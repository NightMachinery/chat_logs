[00:00:27] *** Quits: luva (~luva@185.168.9.233) (Quit: Ping timeout (120 seconds))
[00:00:31] <p-i-> gottit, \W*? works
[00:01:06] *** Joins: luva (~luva@185.168.9.233)
[00:06:09] *** Joins: re101-falcon-14 (~re101-fal@74.120.64.249)
[00:08:11] *** Joins: re101-deer-85 (~re101-dee@2409:4070:2c86:7f94:74a5:682f:701:b6ab)
[00:08:26] *** Quits: luva (~luva@185.168.9.233) (Quit: Ping timeout (120 seconds))
[00:09:04] *** Joins: luva (~luva@185.168.9.233)
[00:09:45] <re101-deer-85> How to limit special characters in text area to a maximum of 5
[00:10:07] *** Quits: re101-falcon-14 (~re101-fal@74.120.64.249) (Client Quit)
[00:12:17] <OnlineCop> https://regex101.com/r/M4Cgrn/1
[00:13:00] *** Joins: re101-falcon-14 (~re101-fal@74.120.64.249)
[00:14:45] <re101-falcon-14> https://regex101.com/r/V8IDl5/1 can anyone help me to capture 1EB, ams0(1EB and ams0 can also be replaced with all numbers and characters
[00:15:17] *** Quits: re101-falcon-14 (~re101-fal@74.120.64.249) (Client Quit)
[00:15:50] <OnlineCop> re101-falcon-14: PCRE (`grep -P`, PHP, etc.)? ERE (egrep, `grep -E`)? BRE (`grep`)? Other?
[00:16:54] <OnlineCop> re101-falcon-14: https://regex101.com/r/V8IDl5/2
[00:17:29] *** Joins: re101-falcon-14 (~re101-fal@74.120.64.249)
[00:17:32] <OnlineCop> If you're certain that it's going to be `DW_P123_Delete_` before it, match that text literally.
[00:17:53] <OnlineCop> https://regex101.com/r/V8IDl5/3 (removed the \K in case your regex flavor doesn't support it).
[00:18:28] <OnlineCop> It matches the whole `DW_...` text, but captures the text at the end.
[00:19:30] <re101-falcon-14> any way to ignore it as well DW_P123_Delete_
[00:20:09] <p-i-> Having some trouble here... https://regex101.com/r/Xhc0cE/12 I'm no longer getting all my targets
[00:20:46] <p-i-> I think the introduction of the /s flag might have borked it
[00:20:47] *** Quits: re101-deer-85 (~re101-dee@2409:4070:2c86:7f94:74a5:682f:701:b6ab) (Quit: Client closed)
[00:21:28] <OnlineCop> Which targets are missing?
[00:21:52] <p-i-> There's 7 but only the first one is getting picked up
[00:22:11] <OnlineCop> Comment out the two lines below it.
[00:22:16] <p-i-> .*? ((?:Target \s \d+ \W* (?&n)\W*)+)  <-- that should be \s+ but it still doesn't fix
[00:22:21] <OnlineCop> You might want `.*?` inside of that repeat group.
[00:23:23] <p-i-> Ah yes!
[00:23:36] <OnlineCop> Notice that "Target ..." isn't matching the entire line.
[00:24:11] <OnlineCop> At this point, is this purely academic, or are you doing this on a bunch of live data?
[00:24:49] <OnlineCop> I'm all for experimenting for the sake of learning. If you want to hammer away at stuff to learn about it, I'll supply the hammer and nails (and screws and whatever you want to hit).
[00:25:48] *** Quits: re101-falcon-14 (~re101-fal@74.120.64.249) (Quit: Client closed)
[00:26:17] <p-i-> I need to fiddle around to get some fluency.
[00:26:44] *** Quits: dandyn (~dandyn@user/dandyn) (Quit: Client closed)
[00:26:52] <p-i-> If I just try to push forward on tasks I always end up befuddled and back at the same place.
[00:27:13] <OnlineCop> https://regex101.com/r/Xhc0cE/13 Introduced a new Target.
[00:27:25] *** Quits: luva (~luva@185.168.9.233) (Quit: Ping timeout (120 seconds))
[00:27:39] *** Joins: re101-falcon-14 (~re101-fal@74.120.64.249)
[00:28:06] *** Joins: luva (~luva@185.168.9.233)
[00:28:54] <OnlineCop> For even more fun, recursive '((((...))))' matching: `(?<p>[(](?>[^()]+|(?&p))*[)])`
[00:29:20] <OnlineCop> Then whenever you encounter an opening '(', call `(?&p)` and it will match until its corresponding closing ')', even if there are some nested values in it.
[00:29:29] <p-i-> Oh that's looking much cleaner
[00:29:58] <p-i-> Is there a way to only pull out the second number of each target?
[00:30:11] <p-i-> Or is this what you were saying yesterday about needing a second-level regex to do that?
[00:30:45] *** Quits: marcojr (~marcojr@62-11-169-12.dialup.tiscali.it) (Quit: Client closed)
[00:33:14] <OnlineCop> Yeah; probably need a 2nd regex for that.
[00:34:06] <p-i-> How come the 'number' requires a DEFINE but the target doesn't?
[00:34:23] <p-i-> (?(DEFINE)(?<n>\d+(?:[.,]\d+)?)
[00:34:36] <p-i-> But (?<t>^[ ]+Target\s\d+[ -]+(?&n)\s\([^()]*\)\n))
[00:35:41] *** Quits: goddard (~goddard@user/goddard) (Ping timeout: 250 seconds)
[00:36:29] *** Quits: re101-falcon-14 (~re101-fal@74.120.64.249) (Quit: Client closed)
[00:36:34] <OnlineCop> Notice the location of the closing ')'. All named groups go inside that (?  ....   )
[00:37:41] <p-i-> It would kinda be a nice feature to be able to comment each revision, and delete revisions. Like... sometimes it takes me 5 revisions to get something, then I want to label it and delete all the clutter
[00:38:21] <OnlineCop> I mean... you can fork your work... Just use "save regex" instead of "update regex".
[00:40:32] <p-i-> üëç
[00:40:46] <p-i-> https://regex101.com/r/Xhc0cE/15 ok, with some spacing/indent I can see it better
[00:43:46] <p-i-> If you're taking feature requests, it would be awesome to be able to adjust the height of the regexp/teststring windows by dragging the dividing bar.
[00:44:56] <OnlineCop> I think we tried that at one point, but it messed up a lot of the views on smart phones and tablets.
[00:45:10] *** Joins: goddard (~goddard@user/goddard)
[00:45:45] <OnlineCop> You CAN, however, auto-hide (or force-hide) the left and right columns. It auto-hides when you shrink the window width, or you can go into the settings and force it to always hide those side bars.
[00:47:04] <OnlineCop> User-resizable windows was also buggy when you switch between the Match, Substitution and other views. So we figure that it's just easier to force everyone to like what we like.
[00:47:48] <p-i-> Maybe you could invert the height ratio of the regex-pane and the test-string pane... https://pasteboard.co/O4T86jvx5UC4.png
[00:48:04] *** Joins: re101-falcon-14 (~re101-fal@74.120.64.249)
[00:48:11] <re101-falcon-14> https://regex101.com/r/tvmq8k/1 can anyone pls help
[00:48:15] <p-i-> like... the regexp and the test-string _could_ fully fit in the vertical space
[00:49:14] <p-i-> but yes, totally agree with: go with whatever keeps the internal structure clean/maintainable
[00:52:04] *** Quits: re101-falcon-14 (~re101-fal@74.120.64.249) (Client Quit)
[00:52:29] <OnlineCop> https://regex101.com/r/tvmq8k/2
[00:52:39] <OnlineCop> Welp, falcon is gone.
[00:52:47] *** Joins: re101-falcon-14 (~re101-fal@74.120.64.249)
[00:53:09] *** Joins: mintoyatsu (~mint@user/mintoyatsu)
[00:54:07] <p-i-> Is [ ]+ interchangeable with \s+ ?  Or there a particular reason you used it instead?
[00:54:50] <OnlineCop> Exclude newlines.
[00:55:28] <OnlineCop> I don't want "Target 8[newline]-[newline]6.70" to match, for example.
[00:57:44] <p-i-> https://regex101.com/r/Xhc0cE/16 I've taken out the (10% TP) from the end of the first target
[00:58:09] <p-i-> I can't see how to adapt the target to handle making that optional
[00:58:42] *** Quits: re101-falcon-14 (~re101-fal@74.120.64.249) (Quit: Client closed)
[00:59:08] <p-i-> I thought if I put it in (...)? that would do it, but it doesn't.
[01:00:18] <p-i-> as in: ^[ ]+ Target \s \d+ [ -]+ (?&n) \s ( \( [^()]* \) )? \n  # this doesn't work
[01:10:41] <OnlineCop> You probably need the `\s` as well as the parens.
[01:11:04] <OnlineCop> https://regex101.com/r/Xhc0cE/18
[01:14:14] *** Quits: ahmedelgabri (~ahmedelga@2a02-a446-d88a-1-6596-912-f565-db07.fixed6.kpn.net) (Ping timeout: 252 seconds)
[01:22:01] <p-i-> ooh so recursions are possible.. so that would handle ( foo (bar (quux) ) )
[01:22:12] <OnlineCop> Yup. Well, within PCRE.
[01:22:24] <OnlineCop> .NET has to do something different, and other flavors don't support it.
[01:26:22] <p-i-> Learning so much today
[01:26:45] <p-i-> https://regex101.com/r/Xhc0cE/20 I got this pretty tidy now (by my own standards)
[01:27:59] <OnlineCop> It seems to scale well. If I copy-paste the TEST STRING into itself a few times, it goes up 2x steps each time instead of some exponential amount (good sign).
[01:33:22] <p-i-> https://regex101.com/r/Xhc0cE/21 Now I've added optional space-padding around my ?&d decimal function, which clears up a lot of space checking elsewhere
[01:37:49] <OnlineCop> Since you have /x enabled, `(?: - (?&d))?` is going to ignore the whitespace around that hyphen.
[01:38:22] <p-i-> Yes, but the ?&d function sucks it up
[01:39:30] <p-i-> I'm trying to (as an experiment) rewrite (?&d) (?: - (?&d))? in the form (?&d) | (?&d) - (?&d) but I can't make it work 
[01:39:56] <OnlineCop> Reverse the order.
[01:40:10] <OnlineCop> `(?&d) - (?&d) | (?&d)`.
[01:40:37] <OnlineCop> You first try the longer one. If that fails, fall back and do the shorter one.
[01:41:32] <OnlineCop> It's like if you try to match the text "ant|antler" on the word "reindeer antlers are shed". It will "SUCCESS!" once it matches 'ant' and not even try 'antler' unless something fails and forces it to backtrack.
[01:41:53] <p-i-> I see!
[01:42:25] <p-i-> https://regex101.com/r/Xhc0cE/22 .. the only thing bothering me is over-conservative use of *? as in [ ]*?
[01:43:01] <p-i-> I'm doing it everywhere, and I don't have a good logic beyond 'nongreedy safer than greedy'
[01:44:48] <p-i-> no wait, that makes no sense. I'm thinking of .*?
[01:44:50] <p-i-> cancel that
[01:49:02] <p-i-> https://regex101.com/r/Xhc0cE/23 I think this is my final version
[01:49:09] <p-i-> I can't see anything else to improve
[01:49:33] <OnlineCop> :) I see my comments in your comments.
[01:49:52] <p-i-> yeah I do that a lot
[01:49:56] <p-i-> memory leaks like a sieve
[01:50:17] <p-i-> This is so kind of you to tutor me.
[01:50:46] *** Joins: jmdaemon (~jmdaemon@user/jmdaemon)
[01:50:50] <OnlineCop> It's fun getting into the advanced stuff.
[01:50:55] <p-i-> It is thanks to individuals such as you that I have a chance to get through this life in one piece. Most grateful.
[01:51:24] <p-i-> I'm a pure-math by inclination. So I love to chase things down.
[01:51:50] <p-i-> But regex was too fierce for me got hack it from the doc.
[01:53:00] <OnlineCop> Heh.
[01:53:32] *** Quits: luva (~luva@185.168.9.233) (Quit: Ping timeout (120 seconds))
[01:54:13] *** Joins: luva (~luva@185.168.9.233)
[01:54:14] <p-i-> Tomorrow I will be going it alone with building out these templates, and I feel pretty confident I can manage it now.
[01:54:45] <p-i-> I'm starting with the least murky one, so some will be a challenge. But I think I have the essential toolkit now.
[01:54:47] <OnlineCop> That's cool. So one template apiece?
[01:54:56] <p-i-> yeah
[01:55:21] <p-i-> Otherwise some provider changes their format and I have to decipher my 'clever' hack to get them all done together
[01:55:28] <p-i-> simple > clever every time
[01:55:37] *** Quits: goddard (~goddard@user/goddard) (Ping timeout: 256 seconds)
[01:55:41] <p-i-> oh I did stumble into one gotcha today: https://github.com/mrabarnett/mrab-regex/issues/451
[01:55:50] <p-i-> This one's really nasty.
[01:56:47] <p-i-> I'm just pre-stripping unicode chars out of my string with re.sub(r'[^\x00-\x7F]', '', message_text) before parsing it. 
[01:57:00] <OnlineCop> That usually occurs because `[...]` character groups match _one_ character, while Unicode characters are 2+ characters.
[01:57:26] *** Quits: lavaball (felix@31.204.155.215) (Remote host closed the connection)
[01:57:32] <OnlineCop> So the /u or /U (Unicode) flag allows character groups to support "more than one character" specifically for them.
[01:58:14] <p-i-> regex101 handled it fine, but Python's `regex` module floundered.
[01:58:51] <p-i-> I'll see if it supports that flag tomorrow
[01:59:03] <OnlineCop> Did you have to pass it a ` | regex.Unicode` or some other flag?
[02:05:16] <p-i-> I just tried, and it actually stalls/hangs.
[02:05:25] <p-i-> Seems to be caught in a recursion/loop
[02:05:59] <p-i-> Something odd is happening with the Python implementation
[02:06:37] <p-i-> It's returning 5 blank matches at the end
[02:08:29] *** Quits: ttys000 (~ttys000@user/ttys000) (Quit: Textual IRC Client: www.textualapp.com)
[02:10:19] <p-i-> https://bpa.st/BHQA
[02:21:06] *** Joins: re101-falcon-15 (~re101-fal@74.120.64.249)
[02:21:53] *** Quits: re101-falcon-15 (~re101-fal@74.120.64.249) (Client Quit)
[02:22:02] *** Joins: goddard (~goddard@user/goddard)
[02:22:13] *** Joins: re101-falcon-15 (~re101-fal@74.120.64.249)
[02:33:19] *** Quits: re101-falcon-15 (~re101-fal@74.120.64.249) (Quit: Client closed)
[02:33:24] <p-i-> 18h codeburn completed
[02:33:32] <p-i-> Thanks OnlineCop
[02:33:33] <p-i-> nn
[02:35:17] *** Quits: goddard (~goddard@user/goddard) (Ping timeout: 240 seconds)
[02:39:40] *** Quits: yitz (~yitz@exercism/yitz) (Remote host closed the connection)
[02:40:04] *** Joins: yitz (~yitz@exercism/yitz)
[02:40:04] *** ChanServ sets mode: +v yitz
[02:43:51] *** Joins: ttys000 (~ttys000@user/ttys000)
[02:49:31] *** Joins: goddard (~goddard@user/goddard)
[02:54:05] *** Quits: goddard (~goddard@user/goddard) (Ping timeout: 256 seconds)
[02:57:52] *** Joins: ash_worksi (~ash_m@user/ash-m/x-3292451)
[02:58:24] <ash_worksi> how can I get upto 80 characters whose final character is a \s ?
[02:59:17] <ash_worksi> nvm
[03:00:04] <mysticspiral[m]> .{0,79}\s
[03:00:15] *** Joins: re101-rabbit-89 (~re101-rab@216-165-95-158.natpool.nyu.edu)
[03:00:15] <re101-rabbit-89> hi
[03:00:20] *** Quits: re101-rabbit-89 (~re101-rab@216-165-95-158.natpool.nyu.edu) (Client Quit)
[03:00:51] *** Joins: goddard (~goddard@user/goddard)
[03:00:54] <mysticspiral[m]> .{0,79}\s$ for \s to be line end
[03:03:16] *** Joins: ircuser-1 (~Johnny@c-71-193-246-4.hsd1.or.comcast.net)
[03:04:33] *** Quits: subie (~subie@2601:4c0:4080:bc0:3090:9fb8:2d28:9a06) (Quit: Leaving)
[03:11:30] *** Quits: zen_coder (~zen_coder@2a02:8109:a280:2d8d:60ef:8113:9157:1102) (Ping timeout: 250 seconds)
[03:13:22] *** Joins: shailangsa (~shailangs@host86-185-98-37.range86-185.btcentralplus.com)
[03:13:41] *** Joins: p-i-_ (~Ohmu@183.89.35.200)
[03:17:19] *** Quits: p-i- (~Ohmu@mx-ll-183.89.35-200.dynamic.3bb.co.th) (Ping timeout: 256 seconds)
[03:17:47] *** Quits: MrNato_Home (MrNato_Hom@61.29.44.88) (Ping timeout: 256 seconds)
[03:17:59] <OnlineCop> This sounds suspiciously like someone is trying to implement word wrap with regex.
[03:18:03] <OnlineCop> I approve of this.
[03:18:37] <OnlineCop> Edge case: `var something = "My long string that should not be chopped up";` :P
[03:18:38] *** Joins: MrNato_Home (MrNato_Hom@61.29.44.88)
[03:20:46] *** Joins: herjazz (~herjazz@p10513117-ipngn24101marunouchi.tokyo.ocn.ne.jp)
[03:22:18] <ash_worksi> OnlineCop: yes, it was word wrapping text in vim; no I didn't want to use `set wrap`
[03:22:35] <ash_worksi> (yes, it was frivilous)
[03:23:20] <ash_worksi> (yes I used `s/\(.\{56,80}\)\s/\1\r/g` )
[03:23:39] <ash_worksi> (yes, I ended up deleting that blob anyway :P)
[03:26:49] <OnlineCop> I think I've got a word wrap regex stashed away somewhere that I like using. Unfortunately, it requires a little manual supervision as it doesn't understand that lines under 80 characters don't need to be matched yet-again.
[03:31:46] *** Joins: ahmedelgabri (~ahmedelga@2a02-a446-d88a-1-6596-912-f565-db07.fixed6.kpn.net)
[03:38:08] *** Joins: subie (~subie@2601:4c0:4080:bc0:f537:c15e:d47f:4c5b)
[03:43:23] *** Quits: ahmedelgabri (~ahmedelga@2a02-a446-d88a-1-6596-912-f565-db07.fixed6.kpn.net) (Ping timeout: 256 seconds)
[03:49:11] *** Quits: d1cor (~diego@179.63.242.122) (Ping timeout: 250 seconds)
[03:56:51] <ash_worksi> OnlineCop: does something particularly wrong jump out at you for /(.{56,80}\s)/\1\n/g ?
[03:58:09] <OnlineCop> You're matching up to 80 characters, then matching any whitespace that lets you drop the remainder of the line onto the next line. However, if you run it more than once, that line will get shorter and shorter.
[03:58:36] <OnlineCop> Maybe at the beginning of the line, add a condition that the line is at least 81 characters.
[03:59:05] <OnlineCop> `/^(?=.{81,})(.{56,80}\s)/\1\n/g`
[03:59:34] <OnlineCop> Otherwise, it will see a valid 58-80 character line and try to wrap it again (and again).
[04:07:57] *** Quits: goddard (~goddard@user/goddard) (Ping timeout: 240 seconds)
[04:25:50] *** Joins: goddard (~goddard@user/goddard)
[04:26:21] *** Quits: herjazz (~herjazz@p10513117-ipngn24101marunouchi.tokyo.ocn.ne.jp) (Quit: leaving)
[04:28:16] *** Quits: palasso (~palasso@user/palasso) (Remote host closed the connection)
[04:32:22] *** Joins: ahmedelgabri (~ahmedelga@2a02-a446-d88a-1-6596-912-f565-db07.fixed6.kpn.net)
[04:36:51] *** Quits: ahmedelgabri (~ahmedelga@2a02-a446-d88a-1-6596-912-f565-db07.fixed6.kpn.net) (Ping timeout: 250 seconds)
[05:00:47] *** Joins: ttree (~ttree0@c-73-97-116-42.hsd1.wa.comcast.net)
[05:01:57] *** Joins: ahmedelgabri (~ahmedelga@2a02-a446-d88a-1-6596-912-f565-db07.fixed6.kpn.net)
[05:08:23] *** Quits: ahmedelgabri (~ahmedelga@2a02-a446-d88a-1-6596-912-f565-db07.fixed6.kpn.net) (Ping timeout: 256 seconds)
[05:12:30] *** Quits: unluckyshrubbery (~unluckysh@45-19-33-188.lightspeed.livnmi.sbcglobal.net) (Quit: ZNC 1.8.2 - https://znc.in)
[05:12:45] *** Joins: unluckyshrubbery (~unluckysh@45-19-33-188.lightspeed.livnmi.sbcglobal.net)
[05:30:20] *** Quits: vlm (~vlm@user/vlm) (Quit: "")
[05:32:17] *** Quits: maetthew (~maetthew@user/maetthew) (Quit: ZNC 1.8.2 - https://znc.in)
[05:33:21] *** Joins: vlm (~vlm@user/vlm)
[05:34:54] *** Joins: maetthew (~maetthew@c188-150-159-232.bredband.tele2.se)
[05:34:54] *** Quits: maetthew (~maetthew@c188-150-159-232.bredband.tele2.se) (Changing host)
[05:34:54] *** Joins: maetthew (~maetthew@user/maetthew)
[05:58:29] *** Quits: r00tb0y (r00tb0y@p57b5692f.dip0.t-ipconnect.de) (Ping timeout: 256 seconds)
[05:58:38] *** Joins: r00tb0y (r00tb0y@p57b56caa.dip0.t-ipconnect.de)
[06:26:48] *** Joins: src (~src@user/src)
[06:30:28] *** Joins: ahmedelgabri (~ahmedelga@2a02-a446-d88a-1-6596-912-f565-db07.fixed6.kpn.net)
[06:34:53] *** Quits: ahmedelgabri (~ahmedelga@2a02-a446-d88a-1-6596-912-f565-db07.fixed6.kpn.net) (Ping timeout: 252 seconds)
[06:54:57] *** Joins: adeliktas5 (~adeliktas@i59F5203E.versanet.de)
[06:56:04] *** Joins: luva3 (~luva@185.168.9.234)
[06:56:37] *** Quits: adeliktas (~adeliktas@i59F5F474.versanet.de) (Ping timeout: 240 seconds)
[06:56:37] *** adeliktas5 is now known as adeliktas
[06:59:25] *** Quits: luva (~luva@185.168.9.233) (Ping timeout: 250 seconds)
[06:59:25] *** luva3 is now known as luva
[07:19:24] *** Joins: luva8 (~luva@37.120.197.53)
[07:22:55] *** Quits: luva (~luva@185.168.9.234) (Ping timeout: 256 seconds)
[07:22:55] *** luva8 is now known as luva
[08:31:20] *** Joins: ahmedelgabri (~ahmedelga@2a02-a446-d88a-1-6596-912-f565-db07.fixed6.kpn.net)
[08:35:37] *** Quits: ahmedelgabri (~ahmedelga@2a02-a446-d88a-1-6596-912-f565-db07.fixed6.kpn.net) (Ping timeout: 250 seconds)
[09:31:19] *** Quits: ttree (~ttree0@c-73-97-116-42.hsd1.wa.comcast.net) (Ping timeout: 256 seconds)
[10:03:00] *** Joins: re101-deer-44 (~re101-dee@207.11.76.196)
[10:03:57] <re101-deer-44> Thank you for calling xxx Goodbye.
[10:04:25] <re101-deer-44> Hi, I want a regex for the above string
[10:04:31] <re101-deer-44> in big query
[10:05:59] *** Joins: re101-donkey-1 (~re101-don@216.9.31.202)
[10:06:33] *** Quits: re101-deer-44 (~re101-dee@207.11.76.196) (Client Quit)
[10:06:36] <mysticspiral[m]> https://regex101.com/r/BwobJQ/1
[10:06:56] *** Quits: re101-donkey-1 (~re101-don@216.9.31.202) (Client Quit)
[10:18:18] *** Joins: callq (~callq@2409:4062:2d8d:345f:4836:a5d4:7aa7:5f2b)
[10:52:39] *** Quits: p-i-_ (~Ohmu@183.89.35.200) (Remote host closed the connection)
[10:53:16] *** Joins: p-i- (~Ohmu@183.89.35.200)
[11:02:46] *** Joins: ahmedelgabri (~ahmedelga@2a02-a446-d88a-1-6596-912-f565-db07.fixed6.kpn.net)
[11:04:08] *** Joins: timm (~timm@user/timm)
[11:13:53] *** Quits: ahmedelgabri (~ahmedelga@2a02-a446-d88a-1-6596-912-f565-db07.fixed6.kpn.net) (Ping timeout: 256 seconds)
[11:14:56] *** Joins: ahmedelgabri (~ahmedelga@2a02-a446-d88a-1-7443-84d3-4dfd-45b1.fixed6.kpn.net)
[11:20:09] *** Joins: ahmedelg1 (~ahmedelga@2a02-a446-d88a-1-f86c-d4cb-116f-3613.fixed6.kpn.net)
[11:21:09] *** Quits: ahmedelgabri (~ahmedelga@2a02-a446-d88a-1-7443-84d3-4dfd-45b1.fixed6.kpn.net) (Ping timeout: 250 seconds)
[11:22:26] *** Quits: cthulchu (~Cthulchu@69-172-160-196.cable.teksavvy.com) (Ping timeout: 245 seconds)
[11:27:10] *** Quits: timm (~timm@user/timm) (Remote host closed the connection)
[11:28:05] *** Joins: timm (~timm@user/timm)
[11:33:44] *** Joins: herjazz (~herjazz@p10513117-ipngn24101marunouchi.tokyo.ocn.ne.jp)
[11:37:41] *** Quits: unluckyshrubbery (~unluckysh@45-19-33-188.lightspeed.livnmi.sbcglobal.net) (Quit: ZNC 1.8.2 - https://znc.in)
[11:37:53] *** Joins: palasso (~palasso@user/palasso)
[11:51:15] *** Joins: lavaball (felix@31.204.155.215)
[11:56:37] *** Quits: davido (~daobrien@159.196.171.246) (Ping timeout: 256 seconds)
[12:21:05] *** Joins: re101-ferret-62 (~re101-fer@125.209.100.220)
[12:24:18] *** Joins: davido (~daobrien@2403-580b-906d--5e24-ebc-3163-4a38.ip6.aussiebb.net)
[12:24:36] <re101-ferret-62> I want to have regex that splits a string in to two parts based on having multipe colons so that string in split based on last colon
[12:26:08] <re101-ferret-62> java language
[12:26:22] <Lindrian> re101-ferret-62: do you have an example link?
[12:26:25] <mysticspiral[m]> like this? https://regex101.com/r/ZbbGWu/1
[12:37:42] *** Joins: zen_coder (~zen_coder@2a02:8109:a280:2d8d:fd90:3f9a:65c3:e850)
[12:42:26] <p-i-> re101-ferret-62: Better to just give example input and desired output, e.g. 'foo:::bar' -> ['foo', 'bar']
[12:43:55] *** Quits: MrNato_Home (MrNato_Hom@61.29.44.88) (Ping timeout: 250 seconds)
[12:44:11] *** Joins: MrNato_Home (MrNato_Hom@61.29.44.88)
[12:44:40] <re101-ferret-62> In need the string to be splitted in two parts based on last colon. Example String "urn:daimler:afm:flashware:A0000000001:001:CFF:02.01.01:0000000001_203620.bin"", Expected Outpul String 1:"urn:daimler:afm:flashware:A0000000001:001:CFF:02.01.01", String 2 "0000000001_203620.bin"
[12:45:30] <mysticspiral[m]> did you have a look at my link?
[12:45:54] <mysticspiral[m]> https://regex101.com/r/ZbbGWu/2
[12:46:08] <re101-ferret-62> yes but when i try regex in java code it doesn't work
[12:46:35] *** Joins: Tobbi_ (~Thunderbi@31.209.188.226)
[12:46:48] <mysticspiral[m]> click on code generator to get an example of usage in java
[12:52:58] <Lindrian> re101-ferret-62: See https://regex101.com/r/ZbbGWu/2/codegen?language=java
[12:55:05] <Lindrian> The rebot should make greater use of those links, as well as the library function.
[12:56:14] <re101-ferret-62> Thanks everyone for the help
[12:56:20] <Lindrian> re101-ferret-62: you're welcome
[13:04:45] *** Joins: Tohan (~Tohan@155.250.198.11)
[13:08:42] <Tohan> Hi folks. do not know if that is the correct approach as i am rather newb, but maybe you can help me out with my regex issue? https://regex101.com/r/GZtLGz/1
[13:11:32] <Tohan> I would like to retrieve my "Text I Nedd" which always comes between a various amount of numbers after DE123... and a closing 999
[13:13:24] *** Quits: Tohan (~Tohan@155.250.198.11) (Quit: Client closed)
[13:13:41] *** Joins: Tohan (~Tohan@155.250.198.11)
[13:16:09] <p-i-> Filed https://github.com/mrabarnett/mrab-regex/issues/452
[13:17:12] <p-i-> Tohan: How about just scraping the words before the 999?
[13:18:24] <Tohan> sounds good...but how to?
[13:22:07] <p-i-> .*?ACCOUNT.*?ACCOUNT \w+(.*?) 999
[13:22:30] <p-i-> That works. I'm a noob, so it's for sure not the best way.
[13:25:25] <p-i-> I think 'Negative Lookahead' might be the way to match the last ACCOUNT
[13:26:10] *** Joins: unluckyshrubbery (~unluckysh@45-19-33-188.lightspeed.livnmi.sbcglobal.net)
[13:26:41] <p-i-> And I think the way of thinking about it is: Match all ACCOUNT, discard the next word, then (.*?) to 999
[13:27:54] <Lindrian> Tohan: the lookbehind must be fixed width, i.e. you cannot use any quantifiers. However, you don't seem to need to, since you are capturing the results either way. You just have to be more specific which information it is you want to capture.
[13:28:23] <Lindrian> Tohan: your input string contains multiple occurrences of "DExxxxx", so you have to be more specific.
[13:30:55] <Tohan> thanks. I do need the "Text I Need" after the 2nd DE9999999. So my text always is between the latest DE0...9 txt and the closing 999.
[13:30:55] <Tohan> DE12354676654454 TEXT I NEED 999
[13:31:26] <p-i-> But are you guaranteed the word ACCOUNT before the DE12354676654454 ?
[13:31:26] <Lindrian> Tohan: are there always two occurrences of DExxxxxx?
[13:32:02] <mysticspiral[m]> you could do it like this https://regex101.com/r/GZtLGz/2
[13:32:07] <Tohan> the amount of numbers/digits after my DE can be random....so it might be that there are only 5 digits but it alsco can be 6,7,8 or more digits. it can be 2 and more appeareances of DE
[13:32:30] <Lindrian> Tohan: in that case, mysticspiral[m] approach is the best.
[13:32:50] <Lindrian> It'll force your pattern to backtrack from the end of the string until it finds a match, regardless of DExxxx occurrences.
[13:33:09] <Tohan> Thanks a lot mysticspiral[m]¬† - i think that is the best and perfect way i was looking for!
[13:33:11] <p-i-> .*ACCOUNT DE[0-9]+ (.+?) 999 <-- that would be more stable
[13:33:23] <Tohan> thank you p-i-
[13:33:41] <Lindrian> Thats exactly what mysticspiral[m] showed :p?
[13:33:59] <mysticspiral[m]> nope
[13:34:00] <Lindrian> Ah, you added "ACCOUNT"
[13:34:06] <Tohan> You made my day. thanks A LOT for your help. I really appreciate it
[13:34:11] <p-i-> Yeah, in case there's an earlier DE that throws it
[13:35:33] <Lindrian> Great idea, p-i- 
[13:35:50] <p-i-> .*ACCOUNT \w+ (.+?) 999
[13:36:39] <Tohan> if the text ACCOUNT also is variable...do I have a chance to make it like "any sort of text [space] DE?
[13:37:15] <p-i-> you could insist a non-word character preceding the DE
[13:38:01] <p-i-> .*\WDE\w+ (.+?) 999
[13:38:45] <Tohan> wow...impressively how fast you are with that
[13:38:59] <p-i-> I'm learning from the best ;)
[13:39:23] <mysticspiral[m]> DE\d+ for numbers only
[13:39:28] <mysticspiral[m]> its an iban right?
[13:39:58] <Tohan> yes
[13:40:07] <p-i-> I remember Elon Musk saying: If you watch something you retain 10%, if you try it you retain 40%, if you teach it you retain 90%.
[13:41:07] <Tohan> true :-)
[13:44:16] *** Joins: re101-ocelot-48 (~re101-oce@182.70.84.129)
[13:44:53] <re101-ocelot-48> https://regex101.com/r/5TDiZe/1
[13:46:31] <re101-ocelot-48> remove everything between starting curly braces and the braces at line no. 80 including braces, platform being used is Java
[13:47:58] *** Quits: src (~src@user/src) (Quit: Leaving)
[13:57:28] *** Quits: lavaball (felix@31.204.155.215) (Remote host closed the connection)
[14:05:32] *** Quits: MrNato_Home (MrNato_Hom@61.29.44.88) (Ping timeout: 240 seconds)
[14:06:03] *** Joins: MrNato_Home (MrNato_Hom@61.29.44.88)
[14:06:11] *** Quits: re101-ferret-62 (~re101-fer@125.209.100.220) (Quit: Client closed)
[14:10:17] *** Quits: MrNato_Home (MrNato_Hom@61.29.44.88) (Ping timeout: 240 seconds)
[14:10:52] *** Quits: Tohan (~Tohan@155.250.198.11) (Quit: Client closed)
[14:11:11] *** Joins: MrNato_Home (MrNato_Hom@61.29.44.88)
[14:18:58] <mysticspiral[m]> re101-ocelot-48: how about this? https://regex101.com/r/5TDiZe/2
[14:20:43] *** Quits: zen_coder (~zen_coder@2a02:8109:a280:2d8d:fd90:3f9a:65c3:e850) (Remote host closed the connection)
[14:21:06] *** Joins: zen_coder (~zen_coder@2a02:8109:a280:2d8d:60ef:8113:9157:1102)
[14:22:40] *** Joins: FH_thecat (~FH_thecat@75.11.25.212.ftth.as8758.net)
[14:23:56] *** Quits: mintoyatsu (~mint@user/mintoyatsu) (Remote host closed the connection)
[14:27:37] *** Quits: callq (~callq@2409:4062:2d8d:345f:4836:a5d4:7aa7:5f2b) (Ping timeout: 240 seconds)
[14:47:15] *** tinystoat is now known as typoholic
[15:09:32] *** Joins: re101-tetra-55 (~re101-tet@163.116.195.119)
[15:10:28] <re101-tetra-55> https://regex101.com/r/VXOdE9/2
[15:10:59] <re101-tetra-55> i am trying to generate a regex for my logs where they will be separated by the timestamp [date and time here]
[15:12:03] <mysticspiral[m]> why dont you separate by line?
[15:12:20] <digitok> https://regex101.com/r/VXOdE9/4 ?
[15:12:35] <re101-tetra-55> our logs are printed in multiple lines . i want the timestamp to be the delimiter ignoring new lines
[15:12:45] <digitok> oic
[15:13:52] <re101-tetra-55> mysticspiral[m] can i get this as a single group [2022-02-09T16:09:35.490 +0530] switch service failed based on the [] as delimiter
[15:14:33] <digitok> are you saying that a log event can have the timestamp on one line and then more lines below which belong to the same log?
[15:15:31] <re101-tetra-55> yes digitok
[15:15:41] *** Quits: FH_thecat (~FH_thecat@75.11.25.212.ftth.as8758.net) (Quit: Leaving)
[15:16:00] <digitok> will the logs themselves ever contain lines that look like [...] ?
[15:16:29] <re101-tetra-55> yes they might. we need to match it in the timestampformat shared in the regex
[15:16:32] <re101-tetra-55> [2022-02-09T16:09:35.048 +0530] (node:29024) [DEP0066] DeprecationWarning: OutgoingMessage.prototype._headers is deprecated
[15:16:32] <re101-tetra-55> (Use `node --trace-deprecation ...` to show where the warning was created)
[15:16:33] <re101-tetra-55> [2022-02-09T16:09:35.490 +0530] switch service failed {
[15:16:33] <re101-tetra-55> ¬† status: 503,
[15:16:34] <re101-tetra-55> ¬† origResponse: Error: Service Unavailable
[15:16:34] <re101-tetra-55> ¬† ¬† ¬† at Request.callback (/Users/300069984/Documents/projects/spectrum-server/node_modules/unity-httpclient/node_modules/superagent/lib/node/index.js:699:13)
[15:16:35] *** rebot sets mode: +q re101-tetra-55!*@*
[15:16:36] <rebot> 14re101-tetra-55: For regex help, please share a https://regex101.com/ link. To share other data, see !paste. You will be unmuted in 30s.
[15:17:05] *** rebot sets mode: -q re101-tetra-55!*@*
[15:17:34] <mysticspiral[m]> the question is if there will ever be line starting with [...] that is not a timestamp
[15:17:59] <re101-tetra-55> this should generate 2 groups
[15:18:01] <re101-tetra-55> https://regex101.com/r/VXOdE9/4
[15:18:13] <re101-tetra-55> yes there might be mysticspiral[m]
[15:18:24] <digitok> why 2 and not 3
[15:18:55] <re101-tetra-55> becoz there are 2 timestamps
[15:19:02] <re101-tetra-55> each timestamp should be a single group
[15:19:18] <re101-tetra-55> anything after the timestamp till next timestamp will be one group
[15:19:32] <digitok> there are 3 timestamps on my end
[15:20:26] <re101-tetra-55> pls look at this sample regex101 link
[15:20:27] <re101-tetra-55> https://regex101.com/r/VXOdE9/4
[15:20:31] <p-i-> woh ho ho! Someone has pimped my regex while I was sleeping! https://regex101.com/r/Xhc0cE/26
[15:20:41] <p-i-> I bet that was OnlineCop
[15:20:54] <digitok> 07re101-ocelot-48, that is what i am looking at
[15:21:01] <digitok> i see 3 lines, each with a timestamp?
[15:21:04] <p-i-> soooo  cool
[15:21:41] <re101-tetra-55> pls refresh now
[15:21:44] <re101-tetra-55> i didnt update it
[15:21:45] <re101-tetra-55> aplogies
[15:22:09] <digitok> ok
[15:22:10] <re101-tetra-55> https://regex101.com/r/VXOdE9/5
[15:22:33] <digitok> .split(/\n+(?=\[[\d-]+T[\d:]+\.\d+ [+-]\d+\])/)
[15:22:34] <digitok> use this
[15:23:49] <re101-tetra-55> thanks. this should help
[15:23:57] <re101-tetra-55> wonderful people here
[15:23:59] <re101-tetra-55> :)
[15:24:34] <digitok> =)
[15:25:05] <digitok> we also have ppl like Lindrian, to maintain balance
[15:25:20] <mysticspiral[m]> lol
[15:25:55] <mysticspiral[m]> lmao
[15:28:18] <digitok> 07re101-tetra-55, slight edit .split(/\n+(?=\[[\d-]+T[\d:.]+ [+-]\d+\])/)
[15:28:25] <p-i-> X-D
[15:29:11] <p-i-> Considering this regex https://regex101.com/r/Xhc0cE/26 ... what if the data is missing one of the fields? e.g. OTE line is missing.
[15:29:14] *** Joins: davido_ (~daobrien@2403-580b-906d--5e24-ebc-3163-4a38.ip6.aussiebb.net)
[15:29:20] <p-i-> Is there a way to make a particular match optional?
[15:29:27] *** Quits: davido (~daobrien@2403-580b-906d--5e24-ebc-3163-4a38.ip6.aussiebb.net) (Read error: Connection reset by peer)
[15:29:42] <digitok> why do you make me look at an OnlineCop regex
[15:30:01] <p-i-> Do I just put the whole thing inside ()?
[15:30:04] <mysticspiral[m]> lmao again
[15:30:39] <digitok> yep, you can wrap it inside an optional group. preferably a non-capturing one
[15:30:44] <digitok> (?:...)?
[15:31:32] <p-i-> digitok: It's a fusion... some of the choices (the bad ones fo'sho') are mine 
[15:33:15] <p-i-> https://regex101.com/r/Xhc0cE/27 hmm, now it doesn't capture the OTE when it IS there...
[15:33:39] <digitok> you need to wrap the whole line
[15:33:46] <digitok> including .*?
[15:34:31] <p-i-> sweeeeeeet
[16:02:02] *** Joins: d1cor (~diego@179.63.242.122)
[16:02:31] <p-i-> https://regex101.com/r/Xhc0cE/29 <-- I'm trying to create my own List DEFINE, but it's not behaving right
[16:02:43] <p-i-> It's matching past the closing brace
[16:03:18] <p-i-> Previous revision (worked) had: \( (?P<exchanges>\w+ (?:, [ ]*? \w+)*) \)
[16:12:45] *** Quits: jmdaemon (~jmdaemon@user/jmdaemon) (Ping timeout: 256 seconds)
[16:18:52] <digitok> what am i looking at
[16:19:16] <digitok> i see you broke the OTE thing
[16:19:30] <digitok> .*? needs to be at the start for that to work
[16:20:41] <digitok> oh nvm
[16:20:45] <digitok> misread
[16:21:36] <digitok> regarding the list thing, your parenthesis need adjusting
[16:21:59] <digitok> you need to add a ) after (?&List)
[16:22:13] <digitok> and remove the ) at the end of the third-last line
[16:23:09] <p-i-> gottit https://regex101.com/r/Xhc0cE/30
[16:25:29] *** Joins: re101-horse-27 (~re101-hor@62.118.133.45)
[16:27:02] <digitok> very nice
[16:27:09] <digitok> in its own way
[16:27:13] <digitok> <:
[16:27:46] <p-i-> haha I've been overly preening it so that I can learn something
[16:28:05] <p-i-> I only seem to be able to get information to stick in my head this way
[16:29:52] <re101-horse-27> Hello. How do I copy the link to my example?
[16:30:14] <p-i-> And I'm going to have to deal with some much messier textstrings next, so I'm getting in some prep practice
[16:30:43] <p-i-> re101-horse-27: probably the same way you wrote that message
[16:31:20] <p-i-> I haven't used regex101's IRC bridge, but just click 'update regex' if you haven't already done so and copy-paste the URL.
[16:33:51] <p-i-> Out of curiosity, how is it that team-regex101 is able to create this technology and offer support for free?  How is it possible in this dog-eat-dog world?  Do you have decent corporate sponsors?
[16:33:58] *** Quits: unluckyshrubbery (~unluckysh@45-19-33-188.lightspeed.livnmi.sbcglobal.net) (Quit: ZNC 1.8.2 - https://znc.in)
[16:34:26] *** Joins: defiant (~defiant@user/defiant)
[16:35:11] <re101-horse-27> Ok I need to delete "_Blueprint" in the first case but leave it in the second. Help please. https://regex101.com/r/nGDGmQ/1
[16:35:14] <mysticspiral[m]> this is a regex channel on libera.chat, not everyone here is part of re101
[16:37:33] *** re101-horse-27 is now known as iogeg
[16:37:49] <digitok> 07Lindrian, is the owner of re101, and he uses libera.chat (irc network)'s web client to allow ppl to access this channel
[16:38:04] <digitok> we just provide help for fun as we enjoy regex
[16:41:26] <purplex> now we are no longer a mystery lol spoiler 
[16:42:23] *** Joins: unluckyshrubbery (~unluckysh@45-19-33-188.lightspeed.livnmi.sbcglobal.net)
[16:45:36] <digitok> basically, he is a high roller and we are plebs offering voluntary regex help
[16:45:57] <p-i-> I got a bug https://regex101.com/r/Xhc0cE/31 ... if I uncomment that targets line, it falls over
[16:46:12] <p-i-> I used a different text to try it out
[16:47:39] <p-i-> oh wait
[16:47:41] <p-i-> fixed it
[16:47:58] <p-i-> whitespace issue
[16:48:01] <iogeg> Please help! https://regex101.com/r/nGDGmQ/3
[16:49:30] <digitok> which programming language, iogeg?
[16:49:58] <iogeg> vbs digitok
[16:50:21] <digitok> does that use .NET regex?
[16:51:41] <digitok> we can just keep it simple, https://regex101.com/r/nGDGmQ/4
[16:52:23] <digitok> https://regex101.com/r/nGDGmQ/5 better
[16:53:55] <iogeg> Yes! Thank you! digitok
[16:55:01] <digitok> np
[17:02:42] *** Quits: timm (~timm@user/timm) (Ping timeout: 260 seconds)
[17:11:58] *** Joins: re101-fly-43 (~re101-fly@rrcs-108-176-17-243.nyc.biz.rr.com)
[17:13:23] <re101-fly-43> "[^if]|[^print][a-z]" I am using java and want to select characters a-z (lowercase) but only when they appear by themselves. (1 character), Sample data:
[17:13:30] <re101-fly-43> a
[17:13:31] <re101-fly-43> b
[17:13:31] <re101-fly-43> print
[17:13:34] <re101-fly-43> of
[17:13:38] <re101-fly-43> if*
[17:13:42] <re101-fly-43> c
[17:13:44] <re101-fly-43> cd
[17:13:51] <re101-fly-43> only a b and c would be selected
[17:14:08] <re101-fly-43> if and print are other keywords I am using to scan a text file and create tokens
[17:15:05] *** Quits: re101-ocelot-48 (~re101-oce@182.70.84.129) (Ping timeout: 256 seconds)
[17:15:26] <mysticspiral[m]> https://regex101.com/r/16SVSQ/1
[17:19:49] <digitok> god level
[17:20:29] <re101-fly-43> it is for a compiler, so it would need to select a = b (select a and b)
[17:20:40] <re101-fly-43> int a = b
[17:20:43] *** Joins: lavaball (felix@31.204.155.215)
[17:21:01] <digitok> change both ^ and $ to \b
[17:21:30] <re101-fly-43> Thank you so much!
[17:21:30] <mysticspiral[m]> god level
[17:22:56] *** Quits: lavaball (felix@31.204.155.215) (Remote host closed the connection)
[17:23:16] *** Quits: herjazz (~herjazz@p10513117-ipngn24101marunouchi.tokyo.ocn.ne.jp) (Quit: leaving)
[17:23:53] <digitok> demigod at best
[17:25:36] <re101-fly-43> for some reason that code works in regex tester but not in my java program
[17:26:21] <mysticspiral[m]> click on code generator to get an example
[17:28:30] <digitok> you probably just need to double escape: \\b
[17:32:47] <re101-fly-43> got it. My compiler still breaks down "print" into p r i n t and creates tokens for each letter, when it should only create a character token for single character variables
[17:36:12] <mysticspiral[m]> when using \b[a-z]\b ?
[17:36:41] <re101-fly-43> yes. even with the double slash
[17:36:58] <mysticspiral[m]> check that you didnt make a mistake?
[17:37:41] <re101-fly-43> I have another keyword regex matcher that says [print] as well as [if] [while] it breaks down all these into single characters, but when I do not have the \\b[a-z]\\b commented in it recognizes them as individual print, if, while tokens
[17:38:34] <re101-fly-43> If returns if token, while returns while token, but with single character rule in place it returns individual character tokens for i, f, w, h, i, l, e
[17:39:47] <p-i-> woo VSCode recognizes regexp in a raw-string and hilights it. That's pretty swish.
[17:40:03] <mysticspiral[m]> [abc123] is a character class
[17:40:20] <mysticspiral[m]> it will either match a b c 1 2 or 3
[17:40:34] *** Joins: p-i-_ (~Ohmu@mx-ll-183.89.35-200.dynamic.3bb.co.th)
[17:41:11] <re101-fly-43> Again, it works in regex debugger but not in my Lexer java code in VS Code
[17:41:16] <mysticspiral[m]> [print] will match p r i n or t
[17:41:52] <re101-fly-43> I also have this for false \b*((?i)false(?-i))\b and it still breaks it down into f, a, l, s, e which is not what I want
[17:43:57] *** Quits: p-i- (~Ohmu@183.89.35.200) (Ping timeout: 240 seconds)
[17:44:02] *** Quits: re101-tetra-55 (~re101-tet@163.116.195.119) (Quit: Client closed)
[18:04:49] *** Quits: blddk (~blddk@user/blddk) (Quit: The Lounge - https://thelounge.chat)
[18:16:22] *** Quits: iogeg (~re101-hor@62.118.133.45) (Quit: Client closed)
[18:27:43] *** Joins: re101-quail-77 (~re101-qua@corp.bah.com)
[18:28:13] *** Parts: re101-quail-77 (~re101-qua@corp.bah.com) ()
[18:28:38] *** Joins: re101-eagle-80 (~re101-eag@2804:7540:1000:bf:9d11:bfd0:f202:107a)
[18:29:00] <re101-eagle-80> hi
[18:30:23] <re101-eagle-80> How do you select only from $ to the last number?  This number goes from 0-9
[18:30:28] <re101-eagle-80> https://regex101.com/r/C8mETg/1
[18:34:39] <digitok> https://regex101.com/r/C8mETg/2
[18:37:00] <re101-eagle-80> Thanks for your help
[18:39:22] *** Joins: re101-ferret-63 (~re101-fer@212.58.121.143)
[18:39:44] <re101-ferret-63> hi,¬† how to check if string contains special character or number ?
[18:39:47] <re101-ferret-63> in java
[18:40:20] *** Joins: blddk (~blddk@user/blddk)
[18:49:43] *** Joins: re101-fennec-35 (~re101-fen@83-86-47-132.cable.dynamic.v4.ziggo.nl)
[19:00:41] *** Quits: davido_ (~daobrien@2403-580b-906d--5e24-ebc-3163-4a38.ip6.aussiebb.net) (Remote host closed the connection)
[19:01:15] *** Joins: davido (~daobrien@2403-580b-906d--5e24-ebc-3163-4a38.ip6.aussiebb.net)
[19:05:25] *** Joins: re101-swan-5 (~re101-swa@76-228-199-206.lightspeed.brhmal.sbcglobal.net)
[19:06:07] *** Quits: shailangsa (~shailangs@host86-185-98-37.range86-185.btcentralplus.com) (Remote host closed the connection)
[19:12:57] *** Quits: p-i-_ (~Ohmu@mx-ll-183.89.35-200.dynamic.3bb.co.th) (Read error: Connection reset by peer)
[19:13:32] *** Joins: p-i- (~Ohmu@183.89.35.200)
[19:16:17] *** Quits: MrNato_Home (MrNato_Hom@61.29.44.88) (Read error: Connection reset by peer)
[19:19:05] *** Joins: MrNato_Home (MrNato_Hom@61.29.44.88)
[19:21:46] *** Quits: d1cor (~diego@179.63.242.122) (Ping timeout: 260 seconds)
[19:27:05] *** Joins: lavaball (felix@31.204.155.215)
[19:30:33] *** Quits: re101-ferret-63 (~re101-fer@212.58.121.143) (Quit: Client closed)
[19:31:39] *** Quits: re101-eagle-80 (~re101-eag@2804:7540:1000:bf:9d11:bfd0:f202:107a) (Ping timeout: 256 seconds)
[20:14:11] *** Joins: jinsun__ (~quassel@user/jinsun)
[20:14:43] *** Quits: jinsun (~quassel@user/jinsun) (Ping timeout: 256 seconds)
[20:16:44] <OnlineCop> re101-fly-43: Are you doing something in vscode (within the Search/Replace dialog) or in Java (the code itself)?
[20:19:30] <OnlineCop> p-i-: If you have "Use Regular Expressions" enabled in VSCode and select text that you want to search (CMD+G on Mac, Ctrl+G on Linux, F3 on Windows), it's smart enough to auto-escape the characters for you: "[my(text)]" becomes `\[my\(text\)\]`. At least, in 75% of the cases.
[20:37:51] *** Quits: jinsun__ (~quassel@user/jinsun) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[20:38:46] *** Quits: ahmedelg1 (~ahmedelga@2a02-a446-d88a-1-f86c-d4cb-116f-3613.fixed6.kpn.net) (Ping timeout: 260 seconds)
[20:39:09] *** Joins: callq (~callq@2409:4062:2296:71d:edc0:24f8:78e1:290e)
[20:41:17] *** Joins: jinsun (~quassel@user/jinsun)
[20:45:49] *** Quits: zen_coder (~zen_coder@2a02:8109:a280:2d8d:60ef:8113:9157:1102) (Quit: Konversation terminated!)
[20:46:41] *** Joins: luva4 (~luva@45.141.152.62)
[20:49:51] *** Quits: luva (~luva@37.120.197.53) (Ping timeout: 256 seconds)
[20:49:51] *** luva4 is now known as luva
[20:51:58] <p-i-> https://regex101.com/r/o9XFCw/1 This regex works fine in regex101 but is failing using Python's 'regex'
[20:52:08] <p-i-> I'm guessing it's something to do with flags
[20:52:33] <p-i-> regex101 I've got gsxm but Python I've got flags = regex.MULTILINE | regex.VERBOSE  | regex.DOTALL
[20:53:02] <p-i-> I can't see how to map betwen the Python flags https://github.com/mrabarnett/mrab-regex#flags and the regex101 flags
[20:53:09] <p-i-> Some are obvious, but some are not
[20:54:16] <p-i-> MULTILINE is m, VERBOSE is x, DOTALL I presume is s "dot matches newline"
[20:54:50] <p-i-> If I remove the #foo from the first line of the teststring, it works in Python by the way.
[20:55:24] <p-i-> sorry, second line. first line is blank
[20:55:43] *** Joins: cthulchu (~Cthulchu@69-172-160-196.cable.teksavvy.com)
[20:59:08] *** Joins: re101-uguisu-19 (~re101-ugu@pool-108-34-178-72.prvdri.fios.verizon.net)
[21:00:09] <re101-uguisu-19> https://regex101.com/r/uHDkpW/1
[21:00:46] <re101-uguisu-19> Is it possible to "trim" the named capture group LINE_DATA (The purple one)
[21:01:02] <re101-uguisu-19> The current match is "¬† ¬† ¬† ¬† ¬† 1(4  ),2(5),3(5),4(5)¬† ¬† ¬† ¬† "
[21:02:11] <re101-uguisu-19> Is is possible to get a result of "1(4),2(5),3(5),4(5)" (note the trailing whitespace after '4' char is no longer there) in the same match stage ?
[21:02:36] <re101-uguisu-19> (?<LINE_DATA>(?<=L[:;'\s]).*?)?
[21:02:52] <re101-uguisu-19> I understand I can change the ".*?' part to exclude \s
[21:03:25] <re101-uguisu-19> however....I actually like having that there because it helps with my lookbehind
[21:03:47] <p-i-> re101-uguisu-19: I think you have to do a second pass to clean it up
[21:03:53] <re101-uguisu-19> i.e. "L:¬† 1,2,3" will result in getting "1,2,3" which is good
[21:04:00] <p-i-> That's what I've been told to do for mine
[21:04:17] <re101-uguisu-19> but I want "L:¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† 1,2,3"¬† to work too
[21:04:53] <re101-uguisu-19> but I can't do (?<=L:\s*) bc of having quantifier in negative lookbehind
[21:05:17] *** Joins: ahmedelg1 (~ahmedelga@2a02-a446-d88a-1-f86c-d4cb-116f-3613.fixed6.kpn.net)
[21:05:25] <re101-uguisu-19> p-i- Ok, yeah, I have `LINE_DATA.replace(/\s*/g, '')` stashed away
[21:05:48] <re101-uguisu-19> makes sense, wasn't sure if there was some other regex magical way to do this
[21:06:41] <re101-uguisu-19> on this note, are there any alternatives to doing something like `(?<=L:\s*) ` ?
[21:06:50] <p-i-> What I have in Python is a dict where the LINE_DELTA key would have for its value a lambda function that cleans up the returned LINE_DELTA, etc.
[21:07:09] <p-i-> Then I just use that dict on my returned data
[21:07:27] <p-i-> keeps it clean
[21:07:32] <re101-uguisu-19> I love that!
[21:07:40] <p-i-> You in Python too?
[21:07:41] <re101-uguisu-19> keeps code clean
[21:07:48] <re101-uguisu-19> nah, php unfortunately
[21:08:04] <re101-uguisu-19> new to php but i'm sure I can achieve something similar
[21:08:18] <re101-uguisu-19> Ik I can do that easily in JS with lambda too
[21:08:21] <p-i-> I got a shitton of formats to regex so I'm preloading effort on getting the first one clean, as Ima have to do this 20x more
[21:08:33] <p-i-> yah JS/TS > Python for that kind of stuff
[21:08:55] <re101-uguisu-19> Dict of lambda fns to clean is cool pattern
[21:09:49] *** Quits: ahmedelg1 (~ahmedelga@2a02-a446-d88a-1-f86c-d4cb-116f-3613.fixed6.kpn.net) (Ping timeout: 250 seconds)
[21:09:50] <p-i-> What's extra good is that when querying the dict in Python, you can use D.get(key, default_value). So I set that default_value to the identity lambda, I can just ignore fields that don't need tweaking
[21:11:40] <re101-uguisu-19> On that note...I was planning on doing some extra steps to parse `LINE_DATA` key
[21:12:07] <p-i-> d_out = {d_tweaks.get(k, lambda u:u)[v] for k,v in d_from_regex.items()}
[21:12:18] <re101-uguisu-19> I want a `LINE_NUMBERS` and `LINE_QUANTITIES`
[21:12:49] *** Joins: luva6 (~luva@45.141.152.61)
[21:12:55] <re101-uguisu-19> so assuming the example above of `1(4),2(5),3(5),4(5)` (assume whitespace has been removed already)
[21:13:20] <re101-uguisu-19> I want a `LINE_NUMBERS` to be all integers before parens and quantities to include parens and ints within them
[21:14:09] <re101-uguisu-19> so `LINE_NUMBERS` = [1,2,3,5]` `LINE_QUANTITIES=[(4),(5),(5),(5)]`
[21:14:44] <re101-uguisu-19> I can do this with post-processing like
[21:14:44] <re101-uguisu-19> ¬† ¬† ¬† ¬† `preg_match_all('/\d+(?!\s*\))/i', $ret_data['LINE_DATA'], $ret_data['LINE_NUMBERS']);`
[21:14:45] <re101-uguisu-19> `preg_match_all('/\(\s*\d\s*\)/i', $ret_data['LINE_DATA'], $ret_data['QUANTITIES']);`
[21:15:09] <re101-uguisu-19> My question is if I can just capture `LINE_NUMBERS` and `QUANTITIES` in the main regex above
[21:16:07] *** Quits: luva (~luva@45.141.152.62) (Ping timeout: 250 seconds)
[21:16:07] *** luva6 is now known as luva
[21:16:36] <OnlineCop> p-i-: Sorry for the delay (at work). https://pypi.org/project/regex/#old-vs-new-behaviour Something to note with the `regex` module: I usually have to append ` | regex.V1` to the options so it handles some of those edge cases.
[21:17:30] *** Joins: imcdona (imcdona@fsf/member/imcdona)
[21:18:10] <re101-uguisu-19> no worries
[21:18:36] <OnlineCop> re101-uguisu-19: "on this note, are there any alternatives to doing something like `(?<=L:\s*)` ?"  PCRE (or Python's 'regex' module on PyPi) supports `\K` which may be similar to what you want?
[21:19:13] <p-i-> Alas it doesn't fix. This is driving me crazy now. https://bpa.st/BUBA wtfff Even a hello world isn't working.
[21:19:16] <OnlineCop> re101-uguisu-19: You would use it like `L:\s*\K(...stuff you actually want here...)`
[21:20:11] <re101-uguisu-19> @+OnlineCop...I've heard of `\K` will look into it more soon. Thanks!
[21:20:46] *** Quits: imcdonald (imcdona@fsf/member/imcdona) (Ping timeout: 260 seconds)
[21:21:45] *** Joins: ahmedelg1 (~ahmedelga@2a02-a446-d88a-1-f86c-d4cb-116f-3613.fixed6.kpn.net)
[21:21:48] *** Quits: sgen (~sgen@2607:fea8:7ce1:c8e0:3caf:1512:480a:ea92) (Quit: Leaving)
[21:22:31] <OnlineCop> p-i-: `regex.match()` differs from `regex.search()` in that `.match()` searches only from the beginning of the string (not good for substrings) while `.search()` searches the whole string for substrings.
[21:24:12] *** Joins: d1cor (~diego@179.63.242.122)
[21:25:38] <OnlineCop> re101-uguisu-19: Python's `re` doesn't support variable-length lookbehinds; `regex` (from PyPi) says it does: https://pypi.org/project/regex/#variable-length-lookbehind
[21:26:03] *** Joins: re101-zonkey-77 (~re101-zon@199.166.10.85)
[21:26:10] <re101-zonkey-77> https://regex101.com/r/YPFhID/1
[21:26:13] *** Quits: ahmedelg1 (~ahmedelga@2a02-a446-d88a-1-f86c-d4cb-116f-3613.fixed6.kpn.net) (Ping timeout: 240 seconds)
[21:26:28] <OnlineCop> re101-uguisu-19: I also see a typo in your regex: `[a-zA-z]+` has a range of capital 'A' to lowercase 'Z' instead of `[a-zA-Z]+`
[21:27:04] <p-i-> OnlineCop: What was that trick for spanning across linebreaks, something like [\n^\n]*? but it wasn't quite that...
[21:27:41] <OnlineCop> re101-zonkey-77: A `*` is a quantifier that repeats the THING right before it. In this example, `abc*` matches 'a' then 'b' and then the `*` quantifier affects only the 'c' at the end, so "ab", "abc", "abccccccccc" will all match.
[21:28:05] <OnlineCop> p-i-: `[\S\s]` or `[\D\d]` or `[\W\w]`. Anything that has an opposite.
[21:29:57] *** Quits: re101-zonkey-77 (~re101-zon@199.166.10.85) (Client Quit)
[21:31:01] <OnlineCop> p-i-: There's also an inline version of the `/s` flag: `.(?s).(?-s).` <-- The 1st `.` acts like `[^\n]`. The 2nd `.` (after `(?s)`) acts like `[\S\s]`. The 3rd `.` (after `(?-s)`) acts like `[^\n]` again.
[21:31:33] <re101-uguisu-19> OnlineCop Ah, thanks! interesting it didn't bark
[21:31:51] <p-i-> oh if I can set my flags inline, then I can guarantee they will match the regex101
[21:31:54] <p-i-> That's much better
[21:31:56] <OnlineCop> p-i-: These inline flags can also be "scoped": `.(?s:.).` <-- You do `(?[flag here]` immediately followed by a colon, followed by the pattern you want within its scope.
[21:32:10] <p-i-> How do I set multiple inline flags?
[21:32:38] *** Joins: re101-skunk-72 (~re101-sku@a109-49-25-27.cpe.netcabo.pt)
[21:32:58] <OnlineCop> `(?smg)...stuff...(?-s)...still applies /m and /g but no longer /s...(?-m) ...still applies /g but not /m or /s...`
[21:33:09] <p-i-> sweet
[21:33:17] <OnlineCop> You can turn on `(?[letters])` and off `(?-[letters])`
[21:33:37] <OnlineCop> The effect lasts till the end of the line, unless you change it again with another of these scopes.
[21:33:46] <OnlineCop> Er, end of the PATTERN.
[21:34:04] *** Quits: re101-skunk-72 (~re101-sku@a109-49-25-27.cpe.netcabo.pt) (Client Quit)
[21:34:46] <OnlineCop> It may also make it a little more readable if you use `.` everywhere as the typical `[^\n]` meaning, and where you specifically want it to match ANYTHING, `(?s:regex_here)` you know that your `.` is going to be acting differently.
[21:35:24] <OnlineCop> Of course, that's highly debatable (the readability aspect), so if it makes it easier for YOU to keep things straight, that's all that really matters.
[21:35:40] <p-i-> pattern_string = r"(?gsmx) FOO (?P<foo>(?&Integer))(?(DEFINE)(?P<Integer>\d+))"
[21:35:50] <p-i-> This (?gsx) breaks it
[21:36:00] <p-i-> (?gsmx) rather
[21:37:17] <p-i-> It's the 'g' that's the problem
[21:38:14] <p-i-> and r"(?smx) FOO (?P<foo>(?&Integer))(?(DEFINE)(?P<Integer>\d+))" doesn't capture correctly
[21:38:25] <p-i-> dangit this Python regex is fiddly
[21:38:38] *** Joins: re101-koala-66 (~re101-koa@201.17.24.106)
[21:38:51] *** Quits: re101-koala-66 (~re101-koa@201.17.24.106) (Client Quit)
[21:39:07] <OnlineCop> Several regex flavors don't actually use/have an actual `/g` flag. If you click "code generator", you can see how the various flavors/engines/languages will simply change whether they do a `search(..., 1)` vs. `search(..., INF)` or whatever.
[21:41:49] *** Quits: karakedi (~eAC53C340@user/karakedi) (Read error: Connection reset by peer)
[21:47:16] *** Joins: karakedi (~eAC53C340@user/karakedi)
[21:56:17] *** Quits: luva (~luva@45.141.152.61) (Quit: Ping timeout (120 seconds))
[21:56:36] *** Quits: d1cor (~diego@179.63.242.122) (Ping timeout: 245 seconds)
[21:56:59] *** Joins: luva (~luva@45.141.152.61)
[22:03:47] *** Quits: ash_worksi (~ash_m@user/ash-m/x-3292451) (Ping timeout: 250 seconds)
[22:04:53] *** Joins: ash_worksi (~ash_m@user/ash-m/x-3292451)
[22:04:53] *** Quits: ash_worksi (~ash_m@user/ash-m/x-3292451) (Client Quit)
[22:07:24] *** Quits: re101-fly-43 (~re101-fly@rrcs-108-176-17-243.nyc.biz.rr.com) (Quit: Client closed)
[22:07:34] *** Joins: re101-bat-98 (~re101-bat@43.66-107-213.static.virginmediabusiness.co.uk)
[22:08:15] <re101-bat-98> I am really struggling with regex. Can I get some help please?
[22:08:54] <re101-bat-98> I need to find underscores in a string .... like this ___ hours ___ minutes
[22:09:10] <re101-bat-98> I want to split underscores from the text
[22:10:56] <re101-bat-98> but I also need to know how many underscores are in a group ... like _ this is one underscore.... ___ this is three underscores
[22:11:03] <re101-bat-98> thanks
[22:12:19] <OnlineCop> re101-bat-98: If you have the text "foo ___ hours ___ minutes", do you want to do something with each of the underscores it finds?
[22:12:54] <re101-bat-98> Yes... it can also be "foo_ hours_ minutes_______"
[22:13:38] <re101-bat-98> What I am really trying to do .. is convert underscores in input fields ...and the size of the input field depends on the number of underscored
[22:13:48] <OnlineCop> You can match underscores simply with `_`. That should return that there were 6 matches, one per underscore. Or, you can match underscores with `_+` which matches "_", "__", "___", "_______________" as a single match.
[22:14:48] <OnlineCop> For your case, it might be easiest to match (or replace) individual underscores, as that will give you the count of each. Unless you want to get more complicated...
[22:14:57] <re101-bat-98> If from this "foo_ hours_ minutes_______", I can get 3 matches ... _, _,¬† and ______ ...then that will solve it for me
[22:15:28] <OnlineCop> If you want just 3 matches, then use `_+` (the plus means 1-or-more of the same item).
[22:16:38] <re101-bat-98> OK will try this on the tester
[22:16:47] <OnlineCop> For each of your match results, you can do a 2nd regex and simply match how many matches `_` gives you.
[22:17:37] <re101-bat-98> aha.. I see
[22:17:44] <OnlineCop> Since your results for `_+` would be [ '_', '_', '_______' ] then you could loop over each of those results and count the underscores (or just look for a text length).
[22:18:41] <re101-bat-98> `_+` <--- this is only giving me 1 match on the tester
[22:18:49] <OnlineCop> Do you have the `/g` flag?
[22:19:01] <re101-bat-98> no let me add that
[22:19:02] <OnlineCop> Without /g, it will stop after its first match.
[22:19:29] <re101-bat-98> perfect
[22:22:25] *** Quits: re101-fennec-35 (~re101-fen@83-86-47-132.cable.dynamic.v4.ziggo.nl) (Quit: Client closed)
[22:35:00] *** Quits: LuKaRo (~LuKaRo@p4fc3264a.dip0.t-ipconnect.de) (Quit: ZNC 1.8.2 - https://znc.in)
[22:42:07] *** Joins: ahmedelg1 (~ahmedelga@2a02-a446-d88a-1-f86c-d4cb-116f-3613.fixed6.kpn.net)
[22:45:32] *** Quits: re101-uguisu-19 (~re101-ugu@pool-108-34-178-72.prvdri.fios.verizon.net) (Quit: Client closed)
[22:45:33] *** Joins: LuKaRo (~LuKaRo@p200300dfa72f4b3100000000000001f9.dip0.t-ipconnect.de)
[22:47:58] *** Joins: re101-iguana-6 (~re101-igu@52.94.133.129)
[22:48:08] <re101-bat-98> That worked. Thanks for helping.
[22:55:55] <p-i-> Finally! https://regex101.com/r/Xhc0cE/35 my regex now passes every string out of 183 strings. That only took 35 revisions!
[23:11:59] <OnlineCop> Yikes.
[23:15:35] *** Joins: timm (~timm@user/timm)
[23:19:41] *** Quits: re101-swan-5 (~re101-swa@76-228-199-206.lightspeed.brhmal.sbcglobal.net) (Quit: Client closed)
[23:24:16] *** Quits: timm (~timm@user/timm) (Ping timeout: 268 seconds)
[23:43:31] *** Quits: re101-bat-98 (~re101-bat@43.66-107-213.static.virginmediabusiness.co.uk) (Quit: Client closed)
[23:46:31] *** Joins: re101-fly-43 (~re101-fly@rrcs-108-176-17-243.nyc.biz.rr.com)
[23:49:05] <re101-fly-43> I have multiple pattern matchings of regex keywords. I need ones for print, if, while, etc... I also need one for single character lowercase variables. So a = b
[23:49:06] <re101-fly-43> print
[23:49:06] <re101-fly-43> if
[23:49:07] <re101-fly-43> a
[23:49:07] <re101-fly-43> while
[23:49:08] <re101-fly-43> ab
[23:49:08] *** rebot sets mode: +q re101-fly-43!*@*
[23:49:09] <rebot> 14re101-fly-43: For regex help, please share a https://regex101.com/ link. To share other data, see !paste. You will be unmuted in 30s.
[23:49:38] *** rebot sets mode: -q re101-fly-43!*@*
[23:51:41] *** Joins: ahmedelgabri (~ahmedelga@2a02-a446-d88a-1-5d83-76ea-e138-9111.fixed6.kpn.net)
[23:53:48] <p-i-> This one's a little different. https://regex101.com/r/4yioKK/3 After TARGETS, I'm trying to pull out all the `Decimal`s until it reaches STOP LOSS.
[23:54:01] <p-i-> I'm trying (?:(?&Decimal) [. \- \n ^\d]*)+ )
[23:54:21] *** Quits: ahmedelg1 (~ahmedelga@2a02-a446-d88a-1-f86c-d4cb-116f-3613.fixed6.kpn.net) (Ping timeout: 256 seconds)
[23:55:18] <p-i-> (?:(?&Decimal) [. \n ^\d]*)+ ) better
[23:55:45] <p-i-> So it pulls out any decimal followed by _anything_ and keeps doing that until it hits the next match, which is STOP LOSS
[23:55:50] <p-i-> Why isn't this working?
[23:59:55] <re101-fly-43> Can someone find another way to represent this? It does not work when I put it in my java file. Even after generating the code. https://regex101.com/r/16SVSQ/1
