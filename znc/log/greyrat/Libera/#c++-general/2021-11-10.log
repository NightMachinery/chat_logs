[00:00:48] *** Joins: spaceangel (~spaceange@ip-89-176-181-220.net.upcbroadband.cz)
[00:02:30] <Simplar> Aha.
[00:03:05] *** Quits: pah (~pah@user/pah) (Ping timeout: 264 seconds)
[00:03:52] <Simplar> Raziel: aka long multiplication?
[00:04:02] <Simplar> well, that debug helps with my understanding
[00:04:54] *** Joins: pah (~pah@user/pah)
[00:06:23] <Raziel> yeah, you see that I had to add the "nx" temporary var to store the result of the digit multiplication so I can get the proper remainder after. I'm not entirely sure if that's avoidable.
[00:07:40] <Raziel> also I think the whole *it > 9 block might be useless for *2
[00:07:47] <Raziel> since I'm pretty sure that can never actually happen. v:
[00:07:57] <Simplar> and the last line is integer division
[00:07:59] <Simplar> amirite?
[00:08:06] <Simplar> the one with /10
[00:08:13] <Raziel> yes
[00:08:22] *** Joins: kraa (~kraa@107-190-7-216.cpe.teksavvy.com)
[00:09:52] <Simplar> Raziel: something hints me division by 2 is not harder
[00:10:04] <Simplar> but using euclidean algo which i know won't work with long arithmetics
[00:10:27] <Raziel> https://wandbox.org/permlink/kRPXTG6lKfzN1IFz so you can simplify to this easily. for *2 anyway.
[00:14:15] <Simplar> Why can't we do (*it = nx%10+rem;)  instead of (*it = nx % 10; *it = *it + rem;) ?
[00:14:29] <Raziel> because I wanted to be able to cout between those two steps :p
[00:14:56] <Raziel> you can change it to that with no issues
[00:15:42] <Simplar> Raziel: I know how to simplify further
[00:16:38] <Raziel> also pls start putting spaces in between... things.
[00:16:47] <Raziel> it's so hard to read something like nx%10+rem
[00:16:48] <Raziel> lol
[00:17:21] <Simplar> Sure
[00:18:11] <Simplar> duh
[00:18:14] <Simplar> my idea failed
[00:18:56] <Simplar> i tried to remove nx
[00:18:57] <Raziel> I mean, as a general style and syntax thing, not necessarily for every small thing you type here or such.
[00:19:13] <Raziel> you'll thank yourself when you have to read shit later :p
[00:19:58] <Raziel> and, yes, I said I'm not sure if it can be removed because getting a correct rem depends on *it before the multiplication, but the previous rem has to be used after multiplication
[00:20:06] <Raziel> so it's either that, or, like, two rems.
[00:21:10] <Raziel> or rather, depends on the it after the *2 but before the mod
[00:21:49] <Simplar> Raziel: I'd like to explicitly point out that I feel uneasy about declaring nx for each iteration of for loop
[00:21:57] <Simplar> can't we move its declaration to rem?
[00:22:08] <Simplar> so it's declared once and reused across the loop?
[00:22:40] *** Joins: m_ben (~m_ben@user/m-ben/x-7429725)
[00:22:44] <Raziel> we can
[00:24:18] <Raziel> but I really doubt it'll make any difference whatsoever
[00:27:32] <Raziel> https://godbolt.org/z/8Kj3TG5Wa the compiler gives so few fucks about that change that it just makes op2 call op1 directly
[00:27:33] <Raziel> >_>
[00:28:13] <Raziel> literally saying "these are the same thing wat r u doin lol"
[00:28:31] <Simplar> what is *it* doing XD
[00:29:13] *** Joins: sord937_ (~sord937@gateway/tor-sasl/sord937)
[00:30:31] <Raziel> well you can see in the asm that nx doesn't actually exist anyway. it just uses a register directly. it doesn't get "declared" or "allocated" in any way
[00:30:47] <Simplar> Gotcha
[00:30:59] <Simplar> Your way to open up new stuff for me is... wow. Nice.
[00:31:19] <Simplar> Holy heck.
[00:31:33] <Simplar> The last task in that taskset is to code your own cryptocurrency blockchain
[00:31:37] <Simplar> Oml.
[00:31:42] <Raziel> lol wat
[00:31:52] <Simplar> I'm genuinely not joking
[00:31:55] <Simplar> let me recite it
[00:32:33] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Ping timeout: 276 seconds)
[00:34:49] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Ping timeout: 268 seconds)
[00:35:12] *** Quits: SuperNintendoSUX (~sjw@69.206.48.64) (Remote host closed the connection)
[00:35:12] <ARoxdale> The original bitcoin code was only about ~5000 lines of c++03 code I think. Sort of "academic". It should be possible to make something a bit smaller for a project if you know what you're doing.
[00:36:06] *** Joins: x_kuru (~xkuru@user/xkuru)
[00:36:20] <Raziel> For a "project", sure. But calling this a "task" as part of a "task set"? seems like it'd be a bit too big for something like that. but maybe that's just semantics :p
[00:36:24] *** Joins: SuperNintendoSUX (~sjw@69.206.48.64)
[00:38:17] *** Quits: xkuru (~xkuru@user/xkuru) (Ping timeout: 250 seconds)
[00:42:25] <Simplar> Raziel: ready to read that pile of text?
[00:42:48] <Raziel> can anyone ever truly be ready for that pile of text?
[00:44:21] <Simplar> ...idk
[00:45:22] <Simplar> A company conducts a survey among clients to discover which brand sold by that company they like the most. All brands are numbered from 1 to K. Every participant of the survey gets to vote for one brand out of K. The results are recorded into a blockchain.
[00:45:22] <Simplar> Every block of such blockchain has the following structure. The first number (call it `count` is the amount of votes in this block). The second number (call it `sum`) is the checksum of all votes in previous block of this blockchain, computed modulo 1999871 (thus, a checksum is a remainder from division of sum of votes by that number). After that, block contains `count` numbers from 1 to K each, which are registered votes. The checksum of the
[00:45:22] <Simplar> first block of a blockchain is 0. The last block of a blockchain is special, it contains no votes, only the aforementioned checksum.
[00:45:22] <Simplar> Unfortunately, votes might not've been saved correctly, so the information in some blockchain blocks might be distorted in the following way: the incorrect block has all votes' values reduced by 1 except those equal to 1. `count` and `sum` are never incorrect, though.
[00:45:22] <Simplar> Input is K, then the following lines are blocks of a blockchain, input in the aforementioned format, each block starting at a new line. Output should consist of two space-separated K numbers, which are the total **correct** votes per brand.
[00:46:23] <Raziel> well okay but like that's not *really* a blockchain :p
[00:46:36] <Simplar> ...maybe, but I am confused by the pile of text XD
[00:47:11] <Simplar> output should consist of K space-separated numbers* not two
[00:47:32] <Simplar> it actually develops a helpful skill, I assume
[00:47:35] <Simplar> working with checksums
[00:49:01] <Raziel> not a very good checksum, but sure :p
[00:49:28] <Simplar> I think there is much easier approach than to task of reducing the number to 1
[00:50:14] <Simplar> Raziel: By the way, to implement op2, I can try using long division :D
[00:50:24] <Raziel> go for it :p
[00:50:26] <Simplar> means iterating forward, and working with remainders
[00:50:34] <Simplar> Let me do dis for my own amusement and practice XD
[00:55:19] *** Quits: pah (~pah@user/pah) (Ping timeout: 256 seconds)
[00:56:02] <Simplar> Here we go. Recurrent subtraction was a bad idea.
[00:56:20] <Simplar> tfw naive solutions just don't work that well
[00:58:19] *** Joins: pah (~pah@user/pah)
[01:01:41] *** Quits: pulse (~pulse@user/pulse) (Ping timeout: 250 seconds)
[01:03:05] <LordKalma> Always roll your own crypto
[01:03:07] <LordKalma> !rq
[01:03:07] <nolyc> LordKalma: <PJBoy> `bool _(true); for ( ;_; ) {}`
[01:03:19] *** Quits: sord937_ (~sord937@gateway/tor-sasl/sord937) (Quit: sord937_)
[01:06:37] *** Quits: magla (~gelignite@55d4ec6e.access.ecotel.net) (Quit: Stay safe!)
[01:09:26] <Simplar> Raziel: https://wandbox.org/permlink/EJHTctUz6k44I8m8 do i impress you this time
[01:09:33] <Simplar> the division by 2 is in op2
[01:10:31] <Simplar> I am only allowed to divide even numbers soooo
[01:10:35] <Raziel> Simplar, it'd be better if it was correct
[01:10:39] <Raziel> 500/2 is not 200
[01:10:40] <Raziel> :p
[01:11:00] <Simplar> but 9998998898/2 = 4999499449
[01:11:09] <Simplar> Wolfram Alpha said so too
[01:11:43] <Raziel> this is true. lol
[01:12:10] <Simplar> what the actual--
[01:12:16] <Simplar> why it gives 200 for 500
[01:12:26] *** Joins: badone (~badone@209.132.189.136)
[01:12:26] <Simplar> so it has a thing for zeros
[01:12:48] <Raziel> no, it has a thing for not doing the remainder for odd numbers properly
[01:13:15] <Raziel> or, maybe it is zeroes. or both.
[01:13:48] <Raziel> I haven't stared at it long enough. but 40 works fine, 30 does not :p
[01:15:09] <Simplar> Ah lmao
[01:15:14] <Simplar> num = num % 2; is wrong
[01:15:46] <Simplar> uh
[01:15:52] <Simplar> if I do num = diff % 2; nothing changes
[01:16:01] <Simplar> 500/2 still 200 XD
[01:17:54] <Simplar> Taking digit 5 Getting quotient 2 Getting remainder 0
[01:18:48] <Raziel> last I checked 5/2 is 2 rem 1, not 2 rem 0
[01:19:13] *** Quits: biberu (~biberu@user/biberu) (Read error: Connection reset by peer)
[01:19:34] <Simplar> OH
[01:19:41] <Simplar> I've found the bug
[01:19:43] <Simplar> if(*it < 2)
[01:19:49] <Simplar> it should compare if num < 2
[01:20:07] <Simplar> 2 5 0
[01:20:10] <Simplar> now it works
[01:20:26] <Raziel> gg
[01:21:04] <Simplar> Raziel: https://wandbox.org/permlink/3gcrDVE1FIT7NW9b test that one
[01:21:12] <Simplar> i wonder if there is an edge case slipped from my mind
[01:21:46] <Simplar> this one won't work on odd numbers, that is intended.
[01:23:03] <Raziel> seems fine
[01:23:36] <Simplar> great
[01:23:50] <Simplar> The rest of the operations is where my library knowledge can shine
[01:23:58] <Simplar> goodbye long arithmetics, definitely not missing ya
[01:24:06] <Simplar> (joke tho... maybe)
[01:24:25] <Simplar> Oh wait WAIT
[01:24:40] <Simplar> Raziel: leading zeros in 1200/2, for example
[01:25:31] <Raziel> yep, missed that one
[01:27:16] <Simplar> hmmm
[01:27:50] <Simplar> It won't require another iterator, will it?
[01:28:06] *** Joins: pulse (~pulse@user/pulse)
[01:28:58] <Simplar> Most naive solution I can think of
[01:31:19] <Simplar> Raziel: https://wandbox.org/permlink/HhxwCZJHrd0vc8su no leading zeroes.
[01:31:34] <Simplar> I'd like to know any simpler way to do that
[01:33:51] *** Joins: biberu (~biberu@user/biberu)
[01:37:11] *** Quits: skapata (~Skapata@user/skapata) (Ping timeout: 245 seconds)
[01:37:43] <Raziel> Simplar, https://wandbox.org/permlink/TvAhoyOhEXr68NHX
[01:37:48] <Raziel> looks a bit hacky, but.
[01:37:48] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[01:37:56] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[01:37:56] *** ChanServ sets mode: +v npaperbot
[01:38:49] <Simplar> 0.0
[01:38:51] <Simplar> Neat
[01:39:12] *** Quits: biberu (~biberu@user/biberu) (Read error: Connection reset by peer)
[01:39:24] <Simplar> Raziel, https://wandbox.org/permlink/HhxwCZJHrd0vc8su look how i cut list by half
[01:39:37] <Simplar> i wonder if i'm right with my assumption to use splice
[01:40:47] <Simplar> wait first half actually got into second half
[01:41:45] <Raziel> Simplar, that's the same link as before >:
[01:42:00] <Simplar> ouch
[01:42:57] <Simplar> Raziel: https://wandbox.org/permlink/bOUEG3RBbllX0W8Z
[01:43:02] <Simplar> now that's correct
[01:43:51] *** Joins: biberu (~biberu@user/biberu)
[01:44:14] *** Quits: mackal (~mackal@pool-96-237-249-63.bstnma.fios.verizon.net) (Quit: BE VIGILANT.)
[01:44:50] <Raziel> seems fine :p
[01:44:59] <Simplar> op4 is the same
[01:45:04] <Simplar> but returns the second half
[01:45:18] <Simplar> what remains is to model op5 and op6 which is also pretty easy (easier than long arithmetics for me)
[01:46:25] *** Joins: mackal (~mackal@pool-96-237-249-63.bstnma.fios.verizon.net)
[01:48:07] <Raziel> by the way, start passing around (const) references, you're making more copies of those lists than you should
[01:49:04] <Simplar> Oh. My. Gosh.
[01:49:11] <Simplar> merge sorts the lists.
[01:52:01] *** Joins: pulse_ (~pulse@user/pulse)
[01:52:09] *** Joins: skapata (~Skapata@user/skapata)
[01:55:23] *** Quits: pulse (~pulse@user/pulse) (Ping timeout: 256 seconds)
[01:58:58] <Simplar> Oh
[01:59:01] <Simplar> Splice exists
[01:59:45] *** Joins: emerent_ (~quassel@p200300cd57485556ba27ebfffed28a59.dip0.t-ipconnect.de)
[01:59:45] *** Quits: emerent (~quassel@p200300cd574855efba27ebfffed28a59.dip0.t-ipconnect.de) (Killed (erbium.libera.chat (Nickname regained by services)))
[01:59:45] *** emerent_ is now known as emerent
[02:00:02] <Raziel> considering you just mentioned it and used it, one would hope so
[02:02:40] *** Joins: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it)
[02:05:15] <Simplar> Raziel: https://wandbox.org/permlink/tPC1VWOEnBAWJEif check this out
[02:05:20] <Simplar> Not through splice but neat
[02:06:11] <Simplar> should return result though
[02:06:12] <Simplar> not n
[02:07:05] <Raziel> looks gud
[02:07:57] *** pulse_ is now known as pulse
[02:09:11] <Simplar> now on to finalizing the algo
[02:09:16] <Simplar> can't sleep until it works
[02:09:44] *** Joins: sprout_ (~quassel@2a02:a467:ccd6:1:e1e5:75f2:6059:4431)
[02:12:52] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:e9:abf1:b887:13fa) (Ping timeout: 268 seconds)
[02:13:05] <Raziel> I do know that feel
[02:14:41] <Simplar> Made it read the number char by char correctly
[02:18:46] <Simplar> solutions for one single number listed
[02:22:12] <Simplar> Okay, all logged
[02:22:14] <Simplar> hopping to sleep
[02:22:21] <Simplar> Thanks for spending a day with me
[02:22:23] <Simplar> Good night
[02:22:40] <Simplar> I'll present the solution when i look at it with refreshed eye
[02:23:21] *** Quits: Simplar (~Simplar@188.163.92.225) (Quit: Going offline, see ya! (www.adiirc.com))
[02:28:02] *** Quits: kraa (~kraa@107-190-7-216.cpe.teksavvy.com) (Ping timeout: 240 seconds)
[02:29:11] *** Quits: Fault (~Fault@152.70.112.168) (Quit: Quit.)
[02:37:03] *** Quits: kenanmarasli (~kenanmara@user/kenanmarasli) (Quit: Leaving)
[02:43:29] *** Quits: spaceangel (~spaceange@ip-89-176-181-220.net.upcbroadband.cz) (Remote host closed the connection)
[02:44:47] *** Joins: gggp (~gggp@111-251-148-239.dynamic-ip.hinet.net)
[02:45:31] *** Quits: gehn (~gehn@user/gehn) (Quit: Leaving)
[02:46:23] *** Joins: Fault (~Fault@152.70.112.168)
[02:47:22] *** Quits: gggp (~gggp@111-251-148-239.dynamic-ip.hinet.net) (Client Quit)
[02:47:46] *** Joins: gggp (~gggp@111-251-148-239.dynamic-ip.hinet.net)
[02:49:49] *** Quits: Fault (~Fault@152.70.112.168) (Client Quit)
[02:50:54] *** Quits: Guest42 (~Guest42@eth-west-pareq2-46-193-4-100.wb.wifirst.net) (Quit: Client closed)
[02:51:29] *** Joins: JeffH (~JeffH@9.sub-174-198-138.myvzw.com)
[02:52:02] *** Quits: gggp (~gggp@111-251-148-239.dynamic-ip.hinet.net) (Ping timeout: 240 seconds)
[02:52:38] *** Joins: gggp (~gggp@111-251-148-239.dynamic-ip.hinet.net)
[02:52:48] *** Quits: JeffH (~JeffH@9.sub-174-198-138.myvzw.com) (Remote host closed the connection)
[02:52:58] *** Joins: Fault (~Fault@152.70.112.168)
[02:57:02] *** Quits: gggp (~gggp@111-251-148-239.dynamic-ip.hinet.net) (Ping timeout: 240 seconds)
[03:00:20] *** Quits: cbreak (~cbreak@77-58-201-132.dclient.hispeed.ch) (Quit: ZNC - https://znc.in)
[03:00:22] *** Quits: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it) (Remote host closed the connection)
[03:00:40] *** Joins: gggp (~gggp@111-251-148-239.dynamic-ip.hinet.net)
[03:02:31] *** Joins: cbreak (~cbreak@77-58-201-132.dclient.hispeed.ch)
[03:04:03] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:8c84:9f64:7a7:24c5) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[03:04:32] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:8c84:9f64:7a7:24c5)
[03:04:50] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:8c84:9f64:7a7:24c5) (Client Quit)
[03:07:40] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[03:07:43] *** Joins: biberu\ (~biberu@user/biberu)
[03:09:29] *** Joins: biberu- (~biberu@user/biberu)
[03:10:08] *** Quits: Fault (~Fault@152.70.112.168) (Quit: Quit.)
[03:10:55] *** Joins: JeffH (~JeffH@9.sub-174-198-138.myvzw.com)
[03:11:09] *** Quits: JeffH (~JeffH@9.sub-174-198-138.myvzw.com) (Remote host closed the connection)
[03:11:27] *** Quits: biberu (~biberu@user/biberu) (Ping timeout: 268 seconds)
[03:12:32] *** Quits: biberu\ (~biberu@user/biberu) (Ping timeout: 240 seconds)
[03:13:06] *** Joins: Fault (~Fault@152.70.112.168)
[03:14:44] *** Quits: biberu- (~biberu@user/biberu) (Ping timeout: 250 seconds)
[03:14:45] *** Joins: vinleod (~vdamewood@fedora/vdamewood)
[03:16:07] *** vdamewood is now known as Guest5784
[03:16:07] *** Quits: Guest5784 (~vdamewood@fedora/vdamewood) (Killed (iridium.libera.chat (Nickname regained by services)))
[03:16:07] *** vinleod is now known as vdamewood
[03:23:58] *** Quits: m_ben (~m_ben@user/m-ben/x-7429725) (Quit: WeeChat 3.3)
[03:26:48] *** Joins: biberu (~biberu@user/biberu)
[03:27:39] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.3)
[03:31:39] *** Quits: gggp (~gggp@111-251-148-239.dynamic-ip.hinet.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[03:32:09] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[03:32:10] *** Quits: pulse (~pulse@user/pulse) (Ping timeout: 260 seconds)
[03:35:01] *** Quits: Fault (~Fault@152.70.112.168) (Quit: Quit.)
[03:37:00] *** Joins: Fault (~Fault@152.70.112.168)
[03:38:02] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 246 seconds)
[03:46:03] *** Joins: pulse (~pulse@user/pulse)
[03:51:02] *** Joins: gggp (~gggp@111-251-148-239.dynamic-ip.hinet.net)
[03:53:56] *** Quits: Rayke (rayke@user/rayke) (Quit: WeeChat 3.3)
[04:02:38] *** Quits: ARoxdale (~ARoxdale@84.203.31.229) (Ping timeout: 268 seconds)
[04:03:38] *** Joins: Rayke (rayke@user/rayke)
[04:04:36] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
[04:06:52] *** Quits: Fault (~Fault@152.70.112.168) (Quit: Quit.)
[04:08:10] *** Joins: Fault (~Fault@152.70.112.168)
[04:08:39] *** Joins: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse)
[04:11:46] *** Quits: Fault (~Fault@152.70.112.168) (Client Quit)
[04:12:17] *** Quits: DSpider (DSpider@2a02:2f00:4ff:ffff::646c:60ca) (Quit: Leaving)
[04:12:32] *** Quits: immibis (~hexchat@62.156.144.218) (Ping timeout: 240 seconds)
[04:12:44] *** Joins: Fault (~Fault@152.70.112.168)
[04:13:32] *** Quits: emerent (~quassel@p200300cd57485556ba27ebfffed28a59.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[04:14:47] *** Joins: emerent (~quassel@p5b265b66.dip0.t-ipconnect.de)
[04:18:25] *** Quits: jkaye (~jkaye@2601:281:8300:7530:49b1:9f67:bcbc:61f) (Ping timeout: 250 seconds)
[04:19:28] *** emerent is now known as Guest999
[04:19:28] *** Joins: emerent_ (~quassel@p200300cd5703cdd4ba27ebfffed28a59.dip0.t-ipconnect.de)
[04:19:28] *** Quits: Guest999 (~quassel@p5b265b66.dip0.t-ipconnect.de) (Killed (osmium.libera.chat (Nickname regained by services)))
[04:19:28] *** emerent_ is now known as emerent
[04:19:29] *** Quits: Fault (~Fault@152.70.112.168) (Quit: Quit.)
[04:20:06] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:5d00:eb1a:26:b28a)
[04:20:28] *** Joins: Fault (~Fault@152.70.112.168)
[04:21:13] *** Joins: ferdna (~ferdna@user/ferdna)
[04:23:26] *** Quits: sprout_ (~quassel@2a02:a467:ccd6:1:e1e5:75f2:6059:4431) (Ping timeout: 245 seconds)
[04:29:23] *** Joins: pah_ (~pah@host-80-181-158-243.pool80181.interbusiness.it)
[04:30:05] *** Quits: pah (~pah@user/pah) (Ping timeout: 256 seconds)
[04:32:34] *** Quits: malloy (~jimery@116.30.220.108) (Ping timeout: 250 seconds)
[04:33:56] *** Quits: Fault (~Fault@152.70.112.168) (Quit: Quit.)
[04:34:44] *** Joins: malloy (~jimery@116.30.220.108)
[04:35:14] *** Joins: Fault (~Fault@152.70.112.168)
[04:38:32] *** Joins: cm007magnum (~Rheanna@218.78.79.129)
[04:39:36] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[04:41:00] *** Quits: Fault (~Fault@152.70.112.168) (Quit: Quit.)
[04:41:58] *** Joins: Fault (~Fault@152.70.112.168)
[04:43:06] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:89a6:1aba:4d2d:ccbe) (Quit: Quit)
[04:45:18] *** Quits: gggp (~gggp@111-251-148-239.dynamic-ip.hinet.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[04:46:38] *** Joins: Youmu (uid129469@user/condy)
[04:55:38] <johnny> hmm.. glad to see folks are playing around with unidirectional data flow stuff like this in C++ https://github.com/arximboldi/lager https://sinusoid.es/lager/architecture.html
[05:05:26] *** Joins: frost (~frost@user/frost)
[05:06:52] *** Joins: lkor (~lionkor@beammp/staff/lionkor)
[05:06:56] *** Quits: lionkor (~lionkor@beammp/staff/lionkor) (Ping timeout: 246 seconds)
[05:07:32] *** Quits: soman (~soman@83.139.147.234) (Ping timeout: 256 seconds)
[05:12:05] *** Quits: Fault (~Fault@152.70.112.168) (Quit: Quit.)
[05:13:14] *** Joins: Fault (~Fault@152.70.112.168)
[05:15:25] <KombuchaKip> What is the simplest way of determining how old, in seconds from now(), a filesystem::last_write_time return value is?
[05:15:57] <KombuchaKip> In C++17
[05:21:23] *** Quits: cm007magnum (~Rheanna@218.78.79.129) (Remote host closed the connection)
[05:22:58] <RandomReader> as far as I know there isn't one, C++17 is broken
[05:23:33] *** Joins: cm007magnum (~Rheanna@218.78.99.237)
[05:23:38] <RandomReader> the problem being that file_time_type isn't specified in a way that lets you use it with anything
[05:24:00] <RandomReader> so there's no point of reference to any useful clock, which means no way to get epoch data
[05:24:50] *** Joins: sprout_ (~quassel@2a02:a467:ccd6:1:ec9d:c0:f2e1:89a6)
[05:27:25] <RandomReader> hm, actaully, maybe you could use a template to extract the Clock from it, which gets you the ability to use Clock::now(), and subtracting that gets you a duration that can be converted to seconds
[05:27:32] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:5d00:eb1a:26:b28a) (Ping timeout: 240 seconds)
[05:28:12] <RandomReader> that should work for relative difference at least, wall time is the "impossible" conversion
[05:31:37] * KombuchaKip bangs head on the desk
[05:31:50] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Remote host closed the connection)
[05:32:04] *** Quits: Fault (~Fault@152.70.112.168) (Quit: Quit.)
[05:32:41] *** Joins: kraa (~kraa@107-190-7-216.cpe.teksavvy.com)
[05:32:57] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[05:33:38] *** Joins: Fault (~Fault@152.70.112.168)
[05:35:48] *** ezzieygu1wuf is now known as ezzieyguywuf
[05:37:49] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[05:37:56] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[05:37:56] *** ChanServ sets mode: +v npaperbot
[05:46:15] *** Quits: Fault (~Fault@152.70.112.168) (Quit: Quit.)
[05:46:56] *** Joins: Fault (~Fault@152.70.112.168)
[05:48:26] <Hello71> create a new file, get its last_write_time, then subtract the two
[05:49:58] <Hello71> wait, that's the same as Clock::now()
[05:57:02] *** Quits: pah_ (~pah@host-80-181-158-243.pool80181.interbusiness.it) (Ping timeout: 240 seconds)
[05:57:26] *** Joins: pah (~pah@user/pah)
[06:02:44] *** Joins: rackj (~rackj@c-73-140-240-136.hsd1.wa.comcast.net)
[06:04:10] <InPhase> RandomReader: Doesn't that have a time_since_epoch member?  What's wrong with that?
[06:06:31] <InPhase> RandomReader: Are you hypothesizing a system using a different epoch for the system clock and the file system?
[06:11:29] *** Quits: cm007magnum (~Rheanna@218.78.99.237) (Remote host closed the connection)
[06:13:44] *** Joins: night_wulfe_ (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[06:14:34] *** Joins: cm007magnum (~Rheanna@218.78.53.13)
[06:16:03] *** Quits: pah (~pah@user/pah) (Ping timeout: 256 seconds)
[06:16:14] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[06:17:02] *** Quits: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 240 seconds)
[06:19:10] *** Joins: pah (~pah@user/pah)
[06:21:08] *** Quits: cm007magnum (~Rheanna@218.78.53.13) (Remote host closed the connection)
[06:22:05] *** Joins: cm007magnum (~Rheanna@218.78.53.13)
[06:24:02] *** Quits: pah (~pah@user/pah) (Ping timeout: 240 seconds)
[06:26:54] *** Joins: proller (~p@2a02:6b8:b081:1208::1:e)
[06:29:21] *** Joins: pah (~pah@user/pah)
[06:36:37] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:cc66:8cdf:6920:eedd)
[06:40:02] *** Quits: sprout_ (~quassel@2a02:a467:ccd6:1:ec9d:c0:f2e1:89a6) (Ping timeout: 240 seconds)
[06:42:28] *** Joins: sprout_ (~quassel@2a02:a467:ccd6:1:646d:b422:185d:c10e)
[06:44:18] *** Joins: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[06:46:17] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:cc66:8cdf:6920:eedd) (Ping timeout: 264 seconds)
[06:46:57] <computerquip> Does anyone know of a system that would fail to get a proper size from seek and tell?
[06:46:58] *** Quits: Fault (~Fault@152.70.112.168) (Quit: Quit.)
[06:47:39] *** Joins: Fault (~Fault@152.70.112.168)
[06:48:00] *** Joins: jkaye (~jkaye@2601:281:8300:7530:c139:e489:8815:b330)
[06:48:05] *** Quits: night_wulfe_ (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 246 seconds)
[06:51:38] *** Quits: rackj (~rackj@c-73-140-240-136.hsd1.wa.comcast.net) (Quit: Client closed)
[06:53:02] *** Quits: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be) (Ping timeout: 240 seconds)
[06:56:17] *** Joins: lionkor (~lionkor@beammp/staff/lionkor)
[06:57:02] *** Quits: proller (~p@2a02:6b8:b081:1208::1:e) (Ping timeout: 240 seconds)
[06:57:02] *** Quits: lkor (~lionkor@beammp/staff/lionkor) (Ping timeout: 240 seconds)
[07:03:28] <InPhase> RandomReader: Well...  It seems they DO use a different epoch.
[07:07:18] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:54d7:9842:9481:b1ca)
[07:07:31] <InPhase> Apparently some sort of genius set the file time clock epoch in the future.
[07:08:41] <InPhase> << std::chrono::duration_cast<std::chrono::seconds>(std::chrono::system_clock::now().time_since_epoch()).count()
[07:08:42] <geordi_> 1636515521
[07:08:44] <InPhase> << std::chrono::duration_cast<std::chrono::seconds>(std::filesystem::file_time_type::clock::now().time_since_epoch()).count()
[07:08:45] <geordi_> -4801148475
[07:08:58] <InPhase> Also, I really really hate the entire chrono library API.
[07:09:45] <InPhase> The file time type epoch is approximately January 1, 2174.
[07:10:09] <InPhase> I have absolutely no explanation...
[07:11:57] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:54d7:9842:9481:b1ca) (Ping timeout: 268 seconds)
[07:12:33] <lru> https://en.cppreference.com/w/cpp/chrono/file_clock says its epoch is unspecified
[07:12:54] <InPhase> Well you can measure it.  And it is absurdly chosen.
[07:15:53] <InPhase> Well, there we are, in the comments on line 312.  https://gcc.gnu.org/onlinedocs/gcc-9.1.0/libstdc++/api/a16951_source.html
[07:16:56] <InPhase> A far futuristic epoch selected to make sure the file times continue to work until the year 2446.
[07:17:08] <lru> hehe
[07:17:27] <lru> assuming we're still using ext4 in 2446
[07:17:38] <InPhase> :)
[07:18:07] *** Quits: jkaye (~jkaye@2601:281:8300:7530:c139:e489:8815:b330) (Ping timeout: 268 seconds)
[07:18:45] <InPhase> I intend to use the RAID0 ext4 system on my PDP-11 well into the 25th century.
[07:19:36] <lru> and use time travel to get parts and info for old systems, just like John Titor
[07:20:38] <InPhase> Amazon TimePrime will send me all of my replacement parts.
[07:21:08] <InPhase> Preferrably right before I need them.
[07:24:08] <InPhase> KombuchaKip: My lessons for you are that this is a bad API, and also you can measure the epoch with that now-difference approach to hack it into C++17.  Perhaps do it as milliseconds instead of sounds, and then round the epoch difference to the nearest second, so that you will never end up with a risk of a clock tick between the two causing an issue.
[07:24:42] <InPhase> KombuchaKip: It's not pretty, but it should work.
[07:27:53] <computerquip> I wonder if boost chrono is better
[07:29:19] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[07:29:42] <RandomReader> the difference isn't the same as actual wall time though
[07:30:00] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Remote host closed the connection)
[07:30:06] <RandomReader> C++20 fixes it by specifying conversions to the system time, and then anchoring the system time to a point of reference that's usable with other arbitrary conversions
[07:30:30] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[07:30:31] * KombuchaKip nods
[07:30:35] <InPhase> RandomReader: If you have the epoch difference, you can reliably convert file times to system clock times and proceed from there.
[07:30:54] <RandomReader> no, because there's no guarantee those are equivalent
[07:31:19] <InPhase> No guarantee what is equivalent?
[07:31:20] <RandomReader> ignoring the pathological case of wildly different tick sizes, wall time conversion sometimes (depending on API) accounts for leap seconds
[07:31:46] <RandomReader> so whether that occurs depends on both clocks' representations, and therefore whether you can get a reliable answer from comparing differences
[07:31:58] <InPhase> The tick size doesn't matter.  I was converting to common units, which you can do.
[07:32:18] <RandomReader> tick size would matter in terms of precision of the common unit
[07:32:40] <RandomReader> I wouldn't expect that to be an issue for seconds in most cases, although I think there is one filesystem that only records minutes .. anyway
[07:33:09] <RandomReader> what I was really getting at was the difference in duration calculations between the two clocks
[07:33:13] <InPhase> Well if you have nanosecond file times and lower precision system times, that would be an issue if you really cared about those file system nanoseconds.  But I bet that's a strong edge case.
[07:33:21] <RandomReader> or, potential difference, depending on what the system time actually uses under the hood
[07:33:34] <RandomReader> all of this crap is one of the things C++20 nailed down
[07:34:02] *** Quits: lionkor (~lionkor@beammp/staff/lionkor) (Ping timeout: 240 seconds)
[07:34:19] <InPhase> A file clock really can't treat leap seconds differently, especially not with an epoch in the future.  We literally don't know what the future leap seconds are going to be, because they haven't been decided yet nor physically manifested.
[07:34:54] <InPhase> An API designer can't really change that.
[07:35:27] <RandomReader> of course it can, because it's only required to represent timestamps, not be a stable ticking clock
[07:35:53] <InPhase> Which system_clock and file_clock share.
[07:36:01] <RandomReader> and it's relevant for conversions to the *past*, which is what this difference -> system approach would be
[07:36:39] <RandomReader> there is no file_clock in C++17, the timestamp is just arbitrary
[07:36:44] <RandomReader> for C++20, yeah, it's more specified
[07:37:18] <InPhase> There is a std::chrono::file_clock in C++17.  It's just called "std::filesystem::file_time_type::clock"
[07:37:45] <InPhase> Which took me a bit to track down...
[07:39:52] <RandomReader> no, std::chrono::file_clock is required to support specific conversions, which require it to support correct translation to the target clock semantics
[07:40:10] <RandomReader> C++17's std::filesystem::file_time_type::clock does not have those requirements on it
[07:40:46] <InPhase> Yes, I know the C++20 features are not there.  I'm just saying, the clock is there usable.
[07:41:57] <RandomReader> I'm saying without those features (imposing requirements), system_clock and file_clock do not share leap second handling
[07:42:21] <RandomReader> that is one of the things C++20 went to add, resulting in these features and their associated requirements
[07:42:58] <RandomReader> C++17's file_time_type really is that broken
[07:44:10] <lru> is it possible to print out the file's timestamp in c++17?
[07:46:17] <RandomReader> not as far as I know, at least not with confidence .. that was essentially what InPhase and I have been going back and forth on, the idea being to get the duration (in seconds) from its' whatever-clock now() and subtract the system_clock.now() to get a wall time
[07:46:29] <RandomReader> which you can do and will yield some kind of answer
[07:47:12] <RandomReader> ...huh, FAT literally records some timestamps with 2-second precision
[07:47:26] <RandomReader> I was not expecting the encoding to be so bizarre
[07:47:28] <InPhase> They're just FAT seconds.
[07:47:39] <RandomReader> lol
[07:49:53] <InPhase> None of these features can really be filesystem dependent, except on niche systems with only one filesystem.  The library will need a standard file clock type for this.
[07:51:12] <InPhase> (Because last_write_time must return a single type.)
[07:51:13] *** Quits: cm007magnum (~Rheanna@218.78.53.13) (Remote host closed the connection)
[07:53:57] *** Joins: cm007magnum (~Rheanna@218.78.79.129)
[07:54:41] <amosbird> Hi! Does c++ filesystem API provide ways to check if the underlying fs is readonly or broken (cannot read/write)
[08:02:13] *** Quits: kraa (~kraa@107-190-7-216.cpe.teksavvy.com) (Quit: Leaving)
[08:09:56] *** Quits: meicceli (meicceli@kapsi.fi) (Ping timeout: 268 seconds)
[08:10:34] *** Joins: riksteri (riksteri@gateway/vpn/airvpn/riksteri)
[08:14:57] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Remote host closed the connection)
[08:15:25] *** Joins: riksu-raksu (riksteri@gateway/vpn/airvpn/riksteri)
[08:15:50] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[08:17:18] *** Joins: meicceli (meicceli@kapsi.fi)
[08:18:27] *** Quits: riksteri (riksteri@gateway/vpn/airvpn/riksteri) (Ping timeout: 256 seconds)
[08:21:44] <computerquip> Fairly sure it doesn't, at least not what I see in boost filesystem which usually has more stuff than std::fs
[08:22:24] <computerquip> You'd need to make a call to statfs afaik. Only place that's done is in space() which doesn't return enough information.
[08:23:14] <computerquip> I'm not sure there's a good way to determine if you can't read from a filesystem.
[08:23:22] <computerquip> I'd imagine a failure to read would be one :P
[08:27:03] *** Quits: Fault (~Fault@152.70.112.168) (Quit: Quit.)
[08:27:51] *** Joins: Fault (~Fault@152.70.112.168)
[08:30:01] *** Quits: emerent (~quassel@p200300cd5703cdd4ba27ebfffed28a59.dip0.t-ipconnect.de) (Remote host closed the connection)
[08:31:45] *** Joins: emerent (~quassel@p200300cd5703cdd4ba27ebfffed28a59.dip0.t-ipconnect.de)
[08:31:50] *** Quits: Fault (~Fault@152.70.112.168) (Client Quit)
[08:32:27] *** Joins: Fault (~Fault@152.70.112.168)
[08:33:39] *** Quits: meicceli (meicceli@kapsi.fi) (Ping timeout: 250 seconds)
[08:35:26] *** Joins: meicceli (meicceli@kapsi.fi)
[08:36:56] *** Joins: ravan_ (~ravan@user/ravan)
[08:39:23] *** Quits: ravan (~ravan@user/ravan) (Ping timeout: 246 seconds)
[08:39:45] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:315a:c7df:cdab:4da8)
[08:41:13] *** Quits: cm007magnum (~Rheanna@218.78.79.129) (Remote host closed the connection)
[08:42:58] *** Quits: pah (~pah@user/pah) (Ping timeout: 260 seconds)
[08:43:11] *** Quits: sprout_ (~quassel@2a02:a467:ccd6:1:646d:b422:185d:c10e) (Ping timeout: 250 seconds)
[08:44:00] *** Joins: cm007magnum (~Rheanna@218.78.67.149)
[08:44:44] *** Joins: pah (~pah@user/pah)
[08:47:18] *** Quits: Fault (~Fault@152.70.112.168) (Quit: Quit.)
[08:51:04] *** Quits: great_taste (~great_tas@190.32.235.20) (Quit: Client closed)
[08:53:29] *** Joins: gggp (~gggp@111-251-148-239.dynamic-ip.hinet.net)
[08:55:11] *** Quits: gggp (~gggp@111-251-148-239.dynamic-ip.hinet.net) (Client Quit)
[08:57:08] *** Quits: x_kuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[09:02:16] *** Joins: pah_ (~pah@host-87-7-20-200.retail.telecomitalia.it)
[09:02:41] *** Quits: pah (~pah@user/pah) (Ping timeout: 250 seconds)
[09:03:48] *** Joins: Fault (~Fault@152.70.112.168)
[09:04:57] *** ravan_ is now known as ravan
[09:09:09] *** Quits: badone (~badone@209.132.189.136) (Quit: ZNC 1.7.5 - https://znc.in)
[09:25:52] *** Quits: CorvetteZR1 (~CorvetteZ@cpef81d0fb064e3-cmf81d0fb064e0.cpe.net.cable.rogers.com) (Quit: Leaving)
[09:31:20] *** Quits: cm007magnum (~Rheanna@218.78.67.149) (Remote host closed the connection)
[09:32:43] *** Joins: cm007magnum (~Rheanna@101.91.232.166)
[09:37:12] *** Quits: Fault (~Fault@152.70.112.168) (Quit: Quit.)
[09:37:49] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[09:37:57] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[09:37:57] *** ChanServ sets mode: +v npaperbot
[09:42:54] *** Quits: ville (~ville@178-75-128-81.bb.dnainternet.fi) (Quit: leaving)
[09:48:10] *** Joins: immibis (~hexchat@62.156.144.218)
[09:49:27] *** Quits: aleko1[m] (~aleko1@2001:470:69fc:105::1:1016) (Quit: Client limit exceeded: 20000)
[09:50:29] *** Joins: ville (~ville@178-75-128-81.bb.dnainternet.fi)
[09:53:20] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[10:03:34] *** Joins: Fault (~Fault@152.70.112.168)
[10:06:57] *** Quits: ravan (~ravan@user/ravan) (Remote host closed the connection)
[10:12:36] *** Joins: gggp (~gggp@111-251-148-239.dynamic-ip.hinet.net)
[10:21:21] *** Quits: cm007magnum (~Rheanna@101.91.232.166) (Remote host closed the connection)
[10:21:37] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[10:23:00] *** Quits: gggp (~gggp@111-251-148-239.dynamic-ip.hinet.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[10:23:16] *** Joins: ambasta (~ambasta@89.46.62.147)
[10:23:33] *** Joins: cm007magnum (~Rheanna@101.89.150.168)
[10:23:57] *** Quits: Neal__ (~Neal@47.146.41.156) (Quit: Leaving)
[10:24:08] <ambasta> Is there a way (existing or proposed) to explcitly define that a class satisfies a concept (like an interface) i.e. class Blah satisies BlahConcept {...};
[10:24:12] *** Joins: nshire (~Neal@user/nshire)
[10:24:16] *** Joins: aleko1[m] (~aleko1@2001:470:69fc:105::1:1016)
[10:25:34] <ville> static_assert?
[10:25:53] <ambasta> So CRTP
[10:26:28] <ville> does not necessarily mean crtp
[10:26:53] *** Joins: dkdns (~dkdns@178.49.152.151)
[10:27:09] <ambasta> Would static_assert retain error messages about why a concept failed?
[10:27:28] <ville> retain? static_assert() takes an optional error message
[10:28:34] <ambasta> Well, if I pass a param which doesn't satisfy a concept, concepts tells me verbosely what member/property declaration mismatched. How do I retain this verbosity with static_assert?
[10:33:58] *** Joins: JohnMS_WORK (~kvirc@213.134.183.29)
[10:34:41] <ambasta> Proving a helper typedef works, using blah_t = Wrap<Blah> where Wrap itself requires the concept
[10:38:36] *** Quits: AbleBacon (~AbleBacon@user/AbleBacon) (Read error: Connection reset by peer)
[10:40:05] *** Joins: sprout_ (~quassel@2a02:a467:ccd6:1:3471:ef4b:ebc8:3b49)
[10:43:39] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:315a:c7df:cdab:4da8) (Ping timeout: 250 seconds)
[10:45:21] <computerquip> Looking at some of the examples for cppreference finally... seems like there's a lot that can cause an ill-formed program with no diagnostic required >.>
[10:45:44] <TinoDidriksen> Yup
[10:46:27] <TinoDidriksen> The Standard assumes that compilers aren't powerful enough to diagnose such issues.
[10:46:50] *** Joins: Simplar (~Simplar@188.163.92.225)
[10:46:57] <computerquip> Totally meant *concepts* but my brain put cppreference instead.
[10:47:12] <computerquip> But statement still stands ;)
[10:48:36] <computerquip> I'd assume it's not as much of a death trap in practice?
[10:49:10] <TinoDidriksen> Compilers will warn about most things if you enable all warnings.
[10:50:27] *** Joins: gggp (~gggp@111-251-148-239.dynamic-ip.hinet.net)
[10:50:44] *** Quits: gggp (~gggp@111-251-148-239.dynamic-ip.hinet.net) (Client Quit)
[10:51:27] *** Joins: gggp (~gggp@111-251-148-239.dynamic-ip.hinet.net)
[10:56:05] *** Quits: gggp (~gggp@111-251-148-239.dynamic-ip.hinet.net) (Client Quit)
[11:01:15] <Simplar> So, here is the code I have: https://wandbox.org/permlink/kZF4rX7H7Rn2V4Ek ; My problem with figuring out a possibly simple thing is stated at lines 131 to 142. My attempt to that approach is shown at lines 101 to 121. I'll be thankful for any guidance on a way to implement the approach. I'll do the implementation myself if you'll tell me the right direction.
[11:10:06] <ville> reduce it to less lines and perhaps someone will take a look
[11:11:13] *** Quits: cm007magnum (~Rheanna@101.89.150.168) (Remote host closed the connection)
[11:13:23] <Simplar> ville: e.g. removing operations?
[11:13:24] *** Joins: cm007magnum (~Rheanna@61.171.69.141)
[11:18:20] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:89a6:1aba:4d2d:ccbe)
[11:20:15] *** Joins: gggp (~gggp@111-251-148-239.dynamic-ip.hinet.net)
[11:21:40] *** Quits: gggp (~gggp@111-251-148-239.dynamic-ip.hinet.net) (Client Quit)
[11:22:00] <amosbird> I just found that c++23 support avoid const/non-const method duplication via      auto && f(this auto && self) { ... }
[11:22:17] *** Joins: andreasbuhr (~quassel@p548ddf3f.dip0.t-ipconnect.de)
[11:26:01] *** Quits: pulse (~pulse@user/pulse) (Ping timeout: 256 seconds)
[11:27:20] <Simplar> Okay, let me simplify
[11:28:21] <Simplar> If I have N objects of type std::list<uint8_t>, which record numbers left to right digit by digit, how to I get the list with minimal number of them all?
[11:28:34] *** Joins: gggp (~gggp@111-251-148-239.dynamic-ip.hinet.net)
[11:29:02] <Simplar> My idea is: (1) take lists with largest size possible (2) compare digits in these lists until different
[11:29:12] <Simplar> digits are compared left to right
[11:31:08] <Simplar> oh minimal
[11:31:11] <Simplar> smallest size*
[11:31:12] *** Joins: nojhan (uid443807@id-443807.lymington.irccloud.com)
[11:44:17] <ville> Simplar: removing everything that isn't vital for the testcase. you can presume people's interest drops sharply after "50" lines
[11:44:54] <Simplar> ville: knowing that operations op1-op6 work as intended so they shouldn't see/debug them is already dropping the codelines
[11:45:17] <Simplar> I've included op1-op6 just so ppl will be able to test
[11:51:07] *** Quits: gggp (~gggp@111-251-148-239.dynamic-ip.hinet.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[11:54:34] *** Quits: malloy (~jimery@116.30.220.108) (Ping timeout: 250 seconds)
[11:56:46] *** Joins: malloy (~jimery@116.30.220.108)
[11:59:22] *** Joins: lionkor (~lionkor@beammp/staff/lionkor)
[12:01:08] <ambasta> Why does #1 work but #2 doesn't? https://wandbox.org/permlink/2c2cuXuaV2M8KgVy Is there some conversion magic going on w/ #1?
[12:01:41] *** Quits: cm007magnum (~Rheanna@61.171.69.141) (Remote host closed the connection)
[12:02:24] *** Quits: Simplar (~Simplar@188.163.92.225) (Quit: Going offline, see ya! (www.adiirc.com))
[12:03:09] *** Joins: cm007magnum (~Rheanna@218.78.109.69)
[12:04:06] <ambasta> Resolved.. this works https://wandbox.org/permlink/d1IbgAJ4zAyrmYHg (and now I can understand why)
[12:04:42] *** Joins: Haohmaru (~Haohmaru@195.24.53.110)
[12:08:28] *** Joins: soman (~soman@83.139.147.234)
[12:09:18] <soman> Does std::array always allocate space on the stack? What if I know size at compile time and the size is big? vector with .reserve()?
[12:13:40] *** Joins: DSpider (~DSpider@82.79.237.28)
[12:20:11] *** Joins: gggp (~gggp@111-251-148-239.dynamic-ip.hinet.net)
[12:20:13] *** Quits: gggp (~gggp@111-251-148-239.dynamic-ip.hinet.net) (Client Quit)
[12:21:05] <TinoDidriksen> soman, yup. But how big is big?
[12:21:47] <TinoDidriksen> Well, if you want the same behavior as array then you want .resize(), but .reserve() will at least allocate all the space you need.
[12:22:10] *** Quits: TheGuestMovie (~TheGuestM@173.231.114.74) (Ping timeout: 256 seconds)
[12:23:21] *** pah_ is now known as pa
[12:23:21] *** Quits: pa (~pah@host-87-7-20-200.retail.telecomitalia.it) (Changing host)
[12:23:21] *** Joins: pa (~pah@user/pah)
[12:24:22] <TinoDidriksen> geordi --version
[12:24:24] <geordi_> GCC 12.0.0 20211109 (experimental)
[12:26:49] *** geordi_ is now known as geordi
[12:32:30] <Haohmaru> that's soooooo yesterday ;P~
[12:38:17] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[12:42:22] <TinoDidriksen> It sure is.
[12:42:23] *** Quits: dkdns (~dkdns@178.49.152.151) (Quit: Client closed)
[12:42:55] <LordKalma> {} import <string>
[12:42:55] <geordi> error: 'import' does not name a type
[12:42:58] <LordKalma> :(
[12:43:07] *** Joins: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it)
[12:43:28] *** Joins: bobb_ (~bobb_@46.232.229.52)
[12:45:19] <Haohmaru> LordKalma trying to import illegal substances, eh?
[12:46:04] *** Joins: paul424 (~tom@ip-31-0-126-115.multi.internet.cyfrowypolsat.pl)
[12:46:30] <soman> TinoDidriksen: say 100MB
[12:46:50] *** Joins: gggp (~gggp@111-251-148-239.dynamic-ip.hinet.net)
[12:46:54] <TinoDidriksen> Ah, that's definitely beyond normal stack sizes.
[12:47:11] <Haohmaru> wow, what's this madness?
[12:52:46] *** Joins: interop_madness (~interop_m@user/interop-madness/x-0950004)
[12:54:35] <Haohmaru> the answer just arived
[13:00:06] *** Quits: Sevalecan (~sevalecan@user/sevalecan) (Quit: F U)
[13:00:36] *** Quits: BluesBoy (~bboy@user/bluesboy) (Quit: leaving)
[13:03:32] *** Quits: chozorho (~chozorho@2601:146:300:c30::4ac5) (Ping timeout: 240 seconds)
[13:04:10] *** Joins: CaCode (~CaCode@user/cacode)
[13:06:48] <LordKalma> soman, a stack is like a couple mb on a good platform
[13:06:59] <LordKalma> you're doing some weird that's for sure
[13:07:09] <LordKalma> or misunderstanding something
[13:07:22] <LordKalma> <soman> Does std::array always allocate space on the stack? -> no
[13:07:27] <Haohmaru> or a bunch of (kilo)bytes on small CPUs
[13:11:32] *** Joins: jzsinatra (~jzsinatra@88-114-238-31.elisa-laajakaista.fi)
[13:14:34] *** Joins: PJBoy (~PJBoy@user/pjboy)
[13:28:16] *** Joins: anyone (~filler@a4.inai.de)
[13:32:31] *** Joins: mitch0 (~mitch@178-164-254-231.pool.digikabel.hu)
[13:32:45] *** Joins: CaCode_ (~CaCode@user/cacode)
[13:33:01] <ville> LordKalma: 8MB is fairly default these days per thread
[13:33:19] <LordKalma> yeah, there's a number
[13:35:09] <ville> or i guess it's safer to state per process 8MB is fairly common, then it starts to vary what it is per thread. notable exception is windows with 1MB per process
[13:35:15] *** Quits: CaCode (~CaCode@user/cacode) (Ping timeout: 250 seconds)
[13:37:50] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[13:37:57] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[13:37:57] *** ChanServ sets mode: +v npaperbot
[13:38:19] *** Quits: gggp (~gggp@111-251-148-239.dynamic-ip.hinet.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[13:41:10] *** Quits: ahlk (~user@2600:1700:31c0:3a10::43) (Remote host closed the connection)
[13:41:12] *** Quits: cm007magnum (~Rheanna@218.78.109.69) (Remote host closed the connection)
[13:41:35] *** Joins: Sevalecan (~sevalecan@user/sevalecan)
[13:43:18] *** Joins: cm007magnum (~Rheanna@218.78.79.129)
[13:43:32] *** Quits: pa (~pah@user/pah) (Ping timeout: 240 seconds)
[13:44:20] *** Joins: pah (~pah@user/pah)
[13:49:43] *** Joins: gggp (~gggp@111-251-148-239.dynamic-ip.hinet.net)
[13:50:25] <anyone> Well, standards are a thing.. everybody has one (xkcd#927)
[13:50:40] <anyone> musllibc has a much smaller default pthread size
[13:51:01] <LordKalma> I admit I'm also part of "I have to make a tool that covers everything better than everybody else"
[13:51:08] <LordKalma> and end up with the n-th mediocre tool
[13:51:19] <Haohmaru> i often have to make my own tools
[13:51:20] <Haohmaru> :/
[13:51:21] *** Quits: pah (~pah@user/pah) (Ping timeout: 245 seconds)
[13:51:27] <Haohmaru> way tooo often
[13:51:31] <LordKalma> Haohmaru, at least you're not one
[13:51:35] <LordKalma> like some dumb fucks around
[13:51:45] <Haohmaru> not one?
[13:51:53] <LordKalma> not a tool :)
[13:52:03] *** Joins: pah_ (~pah@host-95-248-137-21.retail.telecomitalia.it)
[14:02:20] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:89a6:1aba:4d2d:ccbe) (Quit: Quit)
[14:04:37] *** Quits: gggp (~gggp@111-251-148-239.dynamic-ip.hinet.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[14:05:24] *** Joins: gggp (~gggp@111-251-148-239.dynamic-ip.hinet.net)
[14:07:02] *** Quits: frost (~frost@user/frost) (Ping timeout: 240 seconds)
[14:09:02] *** Joins: frost (~frost@user/frost)
[14:14:32] *** Quits: pah_ (~pah@host-95-248-137-21.retail.telecomitalia.it) (Ping timeout: 240 seconds)
[14:14:56] *** Joins: pah (~pah@user/pah)
[14:15:47] *** Quits: gggp (~gggp@111-251-148-239.dynamic-ip.hinet.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[14:16:02] *** Quits: frost (~frost@user/frost) (Ping timeout: 240 seconds)
[14:17:26] *** Joins: gggp (~gggp@111-251-148-239.dynamic-ip.hinet.net)
[14:19:59] *** Quits: pah (~pah@user/pah) (Ping timeout: 256 seconds)
[14:21:47] *** Joins: pah (~pah@user/pah)
[14:24:04] *** Joins: BluesBoy (~bboy@user/bluesboy)
[14:26:16] *** paule32_ is now known as paule32
[14:26:17] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[14:29:50] *** Joins: frost (~frost@user/frost)
[14:31:14] *** Quits: cm007magnum (~Rheanna@218.78.79.129) (Remote host closed the connection)
[14:33:06] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Remote host closed the connection)
[14:34:08] *** pah is now known as pa
[14:34:17] *** Joins: cm007magnum (~Rheanna@218.78.79.129)
[14:41:55] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[14:47:04] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Read error: Connection reset by peer)
[14:48:07] *** Quits: ambasta (~ambasta@89.46.62.147) (Remote host closed the connection)
[14:52:38] *** Quits: paul424 (~tom@ip-31-0-126-115.multi.internet.cyfrowypolsat.pl) (Remote host closed the connection)
[14:55:32] *** Quits: gggp (~gggp@111-251-148-239.dynamic-ip.hinet.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[15:01:41] *** Joins: cart_man (~rynot@host-78-144-127-199.as13285.net)
[15:03:40] *** Quits: bobb_ (~bobb_@46.232.229.52) (Ping timeout: 256 seconds)
[15:10:25] *** Quits: JohnMS_WORK (~kvirc@213.134.183.29) (Ping timeout: 256 seconds)
[15:10:35] <amosbird> "The filesystem library facilities may be unavailable if a hierarchical file system is not accessible to the implementation," What does "not accessible to the implementation" mean here?
[15:11:38] <mort> if you're writing C++ for a system (an "implementation") which doesn't have a concept of a hierarchical filesystem
[15:12:11] <mort> for example, if you're writing C++ for a microcontroller type thing, your target system doesn't have a concept of a filesystem, there are no "files", so std::filesystem probably won't be available
[15:13:25] <mort> C++ is used in a lot of contexts which are less comfortable than userspace code running in Linux or Windows or whatever
[15:17:46] *** Quits: soman (~soman@83.139.147.234) (Quit: Client closed)
[15:21:15] *** Quits: cm007magnum (~Rheanna@218.78.79.129) (Remote host closed the connection)
[15:22:13] <amosbird> mort: Thanks for pointing out that system == implementation )
[15:23:21] <mort> amosbird: no problem. "Implementation" is kind of a catch-all term, like Clang on Windows is a different implementation from MSVC on Windows, GCC + libstdc++ on Linux is a different implementation from GCC + libc++ on Linux, etc
[15:23:46] <mort> basically just means everything in the environment the code is running in somehow
[15:23:47] *** Joins: cm007magnum (~Rheanna@218.78.109.69)
[15:26:13] * Haohmaru waves an 8bit MCU
[15:26:28] <amosbird> btw, why does it mention "hierarchical" in specific
[15:27:48] <mort> there are some systems with a "filesystem" but without a concept of a hierarchical directory structure
[15:28:15] <mort> presumably there are some facilities in std::filesystem which might not work in those circumstances
[15:29:16] <Haohmaru> the closest to hierarchical is probably linux, windows has this slightly weird thing with the drive letters but you could maybe pretend there's one root folder above it too
[15:30:31] <amosbird> Haohmaru: Interesting. So having a root is a must to be hierarchical...
[15:30:39] <Haohmaru> no idea
[15:31:06] *** Joins: JohnMS_WORK (~kvirc@185.73.229.242)
[15:31:18] <Haohmaru> i guess in the old days of computers, folks must have come up with different ways to "store data"
[15:31:23] *** Quits: ville (~ville@178-75-128-81.bb.dnainternet.fi) (Ping timeout: 250 seconds)
[15:31:52] <mort> well, and in the current day
[15:31:53] <Haohmaru> so hierarchical filesystem is probably one scheme, there probably are other schemes too
[15:31:53] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[15:31:56] <vdamewood> Tape, punch card, printout, magnetic cores
[15:32:14] <vdamewood> Oh, switch banks
[15:32:29] <mort> in u-boot for example, which is a bootloader for Linux, you have a basic persistent key/value store
[15:32:36] <vdamewood> Oh, and there were two kinds of tape, punch tape and magnetic tape.
[15:32:37] <mort> that's kind of a non-hierarchical filesystem
[15:33:19] *** Joins: ville (~ville@178-75-128-81.bb.dnainternet.fi)
[15:34:00] <mort> a lot of the things we think of as "that's how they did it in the old days before modern computers" is still how things are done in large parts of the world of computing, just not at the very top of the stack in userspace in some desktop or server operating system
[15:34:38] <Haohmaru> yeah, sure
[15:34:51] <vdamewood> mort: That reminds me of something from A Neal Stephenson book.
[15:35:54] <vdamewood> In In the Beginning... Was the Command Line he talks about how, despite all the advances in storage media and memory, we still represent data using the same basic scheme as tape drives and punch cards.
[15:38:50] *** Joins: lkor (~lionkor@beammp/staff/lionkor)
[15:39:41] *** Quits: lionkor (~lionkor@beammp/staff/lionkor) (Ping timeout: 264 seconds)
[15:39:42] *** Quits: frost (~frost@user/frost) (Ping timeout: 260 seconds)
[15:43:37] <johnny> mort, "target type might not hve the concept of a fielsystm"
[15:43:50] *** Joins: proller (~p@2a02:6b8:0:40c:5076:f741:5552:43b2)
[15:43:50] <johnny> because indeed, many do now
[15:45:04] *** Joins: m_ben (~m_ben@user/m-ben/x-7429725)
[15:47:18] *** Quits: CaCode_ (~CaCode@user/cacode) (Quit: Leaving)
[15:49:33] *** Joins: gggp (~gggp@111-251-148-239.dynamic-ip.hinet.net)
[15:49:42] *** Quits: gggp (~gggp@111-251-148-239.dynamic-ip.hinet.net) (Client Quit)
[15:54:05] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Remote host closed the connection)
[15:54:27] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[16:00:46] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:89a6:1aba:4d2d:ccbe)
[16:04:52] *** Joins: CaCode (~CaCode@user/cacode)
[16:11:42] *** Quits: cm007magnum (~Rheanna@218.78.109.69) (Remote host closed the connection)
[16:13:56] *** Joins: cm007magnum (~Rheanna@61.171.38.68)
[16:16:36] *** Joins: gggp (~gggp@111-251-148-239.dynamic-ip.hinet.net)
[16:24:19] *** Quits: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it) (Remote host closed the connection)
[16:38:35] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[16:41:34] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Remote host closed the connection)
[16:46:51] <manuels> can we forward declare classes using using
[16:47:29] <manuels> like using NS::C instead of namespace NS{ class C;}
[16:56:43] <PJBoy> no
[17:01:15] *** Quits: cm007magnum (~Rheanna@61.171.38.68) (Remote host closed the connection)
[17:02:42] *** Joins: cm007magnum (~Rheanna@218.78.99.237)
[17:02:46] *** Quits: pa (~pah@user/pah) (Ping timeout: 260 seconds)
[17:03:05] *** Quits: gggp (~gggp@111-251-148-239.dynamic-ip.hinet.net) (Ping timeout: 264 seconds)
[17:06:33] *** Joins: gggp (~gggp@220-136-153-49.dynamic-ip.hinet.net)
[17:17:23] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:89a6:1aba:4d2d:ccbe) (Quit: Quit)
[17:19:59] *** Joins: pah (~pah@user/pah)
[17:23:21] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:145:28b:ea41:3529)
[17:30:00] *** Quits: CaCode (~CaCode@user/cacode) (Quit: Leaving)
[17:37:32] *** Quits: pah (~pah@user/pah) (Ping timeout: 240 seconds)
[17:37:50] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[17:37:59] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[17:37:59] *** ChanServ sets mode: +v npaperbot
[17:39:42] *** Joins: pah (~pah@user/pah)
[17:45:54] *** Quits: gggp (~gggp@220-136-153-49.dynamic-ip.hinet.net) (Remote host closed the connection)
[17:46:29] *** Joins: gggp (~gggp@220-136-153-49.dynamic-ip.hinet.net)
[17:46:47] *** Joins: pah_ (~pah@host-87-20-64-13.retail.telecomitalia.it)
[17:47:02] *** Quits: pah (~pah@user/pah) (Ping timeout: 240 seconds)
[17:51:22] *** Quits: cm007magnum (~Rheanna@218.78.99.237) (Remote host closed the connection)
[17:53:00] *** Joins: cm007magnum (~Rheanna@61.171.21.169)
[17:58:14] <mort> I want ufcs
[18:06:32] *** Quits: pah_ (~pah@host-87-20-64-13.retail.telecomitalia.it) (Ping timeout: 240 seconds)
[18:08:23] *** Joins: pah (~pah@user/pah)
[18:14:47] *** Joins: Ronalds_Mazitis_ (~Ronalds_M@46.109.76.104)
[18:18:47] *** Joins: jkaye (~jkaye@2601:281:8300:7530:212b:79de:3c7b:f9e0)
[18:19:30] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:4d21:33e0:266f:38f8)
[18:20:24] *** Joins: xkuru (~xkuru@user/xkuru)
[18:23:30] *** Joins: emerent_ (~quassel@p200300cd572fe8a8ba27ebfffed28a59.dip0.t-ipconnect.de)
[18:23:30] *** emerent is now known as Guest9840
[18:23:30] *** Quits: Guest9840 (~quassel@p200300cd5703cdd4ba27ebfffed28a59.dip0.t-ipconnect.de) (Killed (iridium.libera.chat (Nickname regained by services)))
[18:23:30] *** emerent_ is now known as emerent
[18:29:40] *** Quits: proller (~p@2a02:6b8:0:40c:5076:f741:5552:43b2) (Ping timeout: 268 seconds)
[18:34:15] *** Quits: emerent (~quassel@p200300cd572fe8a8ba27ebfffed28a59.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[18:34:38] *** Joins: emerent (~quassel@p200300cd57303249ba27ebfffed28a59.dip0.t-ipconnect.de)
[18:35:57] *** Joins: great_taste (~great_tas@190.32.235.20)
[18:36:02] *** Quits: JohnMS_WORK (~kvirc@185.73.229.242) (Ping timeout: 240 seconds)
[18:41:12] <LordKalma> !rq
[18:41:12] <nolyc> LordKalma: <Juliu> Why the fuck does anyone need types? When you write x.foo(), simply execute foo, no matter what the fuck x is
[18:41:13] *** Quits: cm007magnum (~Rheanna@61.171.21.169) (Remote host closed the connection)
[18:41:38] <LordKalma> sounds about right
[18:41:50] *** Joins: zen_coder (~zen_coder@2a02:8109:a280:2d8d:b80b:fa5c:c6a4:6438)
[18:41:58] <Raziel> ayyyyy
[18:42:26] <Juliu> ?
[18:42:49] *** Joins: chozorho (~chozorho@2601:146:300:c30::685f)
[18:43:01] *** Joins: cm007magnum (~Rheanna@101.91.232.166)
[18:45:04] <Alipha> LordKalma wants cppscript
[18:45:18] <LordKalma> tell that to Juliu
[18:45:32] *** Quits: emerent (~quassel@p200300cd57303249ba27ebfffed28a59.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[18:46:19] *** Joins: emerent (~quassel@p200300cd57307093ba27ebfffed28a59.dip0.t-ipconnect.de)
[18:46:33] <PJBoy> yo it's happening
[18:46:35] <Juliu> I want ppc, it's more efficient
[18:46:40] <PJBoy> workplace is going hard on cmake
[18:46:59] <PJBoy> I need to get my cmake on
[18:47:15] <PJBoy> try out this VS code + clangd situation
[18:48:05] <Juliu> I'm using cmake since years, since all this project creating and linking stuff is so fucking annoying without
[18:52:08] <Juliu> Just to let you guys know, when I said "simply execute foo, no matter what the fuck x is", I didn't mean an interpreted language. I meant that the compiler should do the work for me and find out what type x is, and then simply call the right foo at compile time. And if this isn't possible, then simply look it at at runtime, as if foo was a virtual method
[18:52:12] <LordKalma> PJBoy, read da book
[18:52:12] *** Quits: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse) (Read error: Connection reset by peer)
[18:52:30] <PJBoy> I need to
[18:52:30] <LordKalma> Juliu, random quotes are funny because they look great withjout context
[18:52:31] <LordKalma> !rq
[18:52:32] <nolyc> LordKalma: <vpw> :)
[18:52:34] <LordKalma> !rq
[18:52:35] <nolyc> LordKalma: <ville> don't believe the cmake propaganda. make is fine
[18:52:37] <PJBoy> I have some motivation for it now
[18:52:38] <LordKalma> shhhhhhhhh
[18:52:42] <Juliu> Why do I have to tell a compiler what type x is? That should be the compilers job, not mine
[18:52:55] <Juliu> LordKalma, I understand :)
[18:55:02] <Juliu> Types are such a useless concept
[18:55:54] <PJBoy> !gives Juliu news
[18:55:55] <nolyc> PJBoy: Error: "gives" is not a valid command.
[18:55:58] <PJBoy> !give Juliu news
[18:55:59] <nolyc> Juliu: I'm sure we are all fascinated, so please write it down in a monthly newsletter and mail it to us.
[18:56:02] <LordKalma> you clearly like overhead in your code
[18:56:21] <Raziel> if you don't like types, you could just, yknow, use python or something.
[18:56:37] <Juliu> PJBoy, you wouldn't want me to mail you stuff every month!
[18:57:11] <Juliu> Raziel, I don't want an interpreted language, and Python is ugly and you search your error forever since it's not strict enough
[18:57:19] *** Joins: pulse (~pulse@user/pulse)
[19:07:18] <urdh> "i don't want types" but also "not having types is not strict enough"?
[19:07:40] <urdh> did you mean to say you *do* want types, but also type inference?
[19:09:10] <Raziel> in that case, I'm sure C++ can manage to add even more places where you can stick auto :p
[19:09:40] <yolo_> is it a good idea to put CTOR in hpp? or it's better to be in .cpp along with all the methods
[19:10:03] *** pah is now known as pa
[19:10:36] <Raziel> if you have everything in cpp you might as well have the ctor there too
[19:12:31] <urdh> if the ctor body is empty I usually stick it in the header
[19:13:05] *** Joins: magla (~gelignite@55d416cc.access.ecotel.net)
[19:13:05] <yolo_> putting all the ctor initialization code in hpp helps code reading to me at least, also dtor in header can make its more visible I did clean-up
[19:13:07] *** Quits: Raziel (~Raziel@user/raziel) (Read error: Connection reset by peer)
[19:13:38] * yolo_ can never type in irc
[19:14:49] <yolo_> anyways i will put ctor/dtor in hpp for now, easy reading takes priority at this point of learning
[19:16:41] *** Quits: interop_madness (~interop_m@user/interop-madness/x-0950004) (Quit: Leaving)
[19:18:00] *** Joins: ahlk (~user@2600:1700:31c0:3a10::43)
[19:23:45] *** Quits: gggp (~gggp@220-136-153-49.dynamic-ip.hinet.net) (Remote host closed the connection)
[19:24:13] <ville> PJBoy: oom killer or over-provisioning?
[19:24:25] *** Joins: gggp (~gggp@li2010-23.members.linode.com)
[19:24:26] <PJBoy> OOM killer I'd like to think
[19:24:33] <PJBoy> lemme dig out the command
[19:25:05] <PJBoy> `echo 2 | sudo tee /proc/sys/vm/overcommit_memory`
[19:25:09] <ville> disabling over-provisioning seems likely first step
[19:25:16] <ville> so yes over-provisioning
[19:25:22] <PJBoy> if it's not clear, I dunno shit about this
[19:25:28] <PJBoy> I just want to be able to catch bad_alloc
[19:25:33] <PJBoy> and terminate safely
[19:25:56] <PJBoy> I don't think that's the same command I used back in uni
[19:26:03] <ville> so yes you've indireclty disabled the oom killer i guess
[19:26:07] <PJBoy> but honestly every time I google for the answer to this, I get a different command to try
[19:27:16] <ville> although i am not sure what are all the scenarios that trigger the oom killer. for example if you can configure it to activate at lower threshold
[19:29:47] *** Joins: JohnMS_WORK (~kvirc@213.134.183.29)
[19:31:32] *** Quits: cm007magnum (~Rheanna@101.91.232.166) (Remote host closed the connection)
[19:32:46] <ville> with overcommit_memory set to 2 you still can overcommit, but i guess you could set overcommit_ratio
[19:35:31] *** Joins: proller (~p@2a02:6b8:0:40c:33a1:c83e:19df:80e8)
[19:36:40] *** Joins: pah (~pah@user/pah)
[19:37:02] *** Quits: pa (~pah@user/pah) (Ping timeout: 240 seconds)
[19:37:13] *** Joins: zoneu (~zoneu@user/zoneu)
[19:37:16] *** Joins: skapata (~Skapata@2804:14c:87b0:a6f9:b86f:881a:ecd7:30b5)
[19:37:17] *** Quits: skapata (~Skapata@2804:14c:87b0:a6f9:b86f:881a:ecd7:30b5) (Changing host)
[19:37:17] *** Joins: skapata (~Skapata@user/skapata)
[19:41:11] *** Quits: gggp (~gggp@li2010-23.members.linode.com) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[19:41:29] <yolo_> char* func() const { return "str";} -- ISO C++ forbids converting a string constant to 'char *', this is so basic yet I don't know how to fix
[19:41:32] *** Quits: pah (~pah@user/pah) (Ping timeout: 240 seconds)
[19:42:24] <TinoDidriksen> Return const char* instead.
[19:42:57] *** Joins: pah (~pah@user/pah)
[19:46:23] *** Quits: JohnMS_WORK (~kvirc@213.134.183.29) (Ping timeout: 256 seconds)
[19:46:57] <yolo_> what's the difference between 'virtual const char *func()` vs `virtual char *func() const`, the above warning is from this
[19:47:31] <imMute> yolo_: the first one const is part of the return type, the 2nd one func() itself is const (can be called on const instances)
[19:47:32] <yolo_> func is a function returning 'const char*' vs func is a const func return char *?
[19:47:50] <yolo_> trying to use the right-left rule
[19:50:39] <anyone> [virtual] RETURNTYPE funcname(params) class-qualifiers {}
[19:51:23] *** Quits: letto (~letto@86.120.85.133) (Quit: Konversation terminated!)
[19:51:45] <yolo_> got it, thanks
[19:52:07] *** Joins: letto (~letto@86.120.85.133)
[19:52:37] *** Quits: pah (~pah@user/pah) (Ping timeout: 256 seconds)
[19:56:37] *** Quits: cart_man (~rynot@host-78-144-127-199.as13285.net) (Quit: Konversation terminated!)
[19:57:11] *** Joins: pah_ (~pah@host-79-42-71-25.retail.telecomitalia.it)
[20:00:00] <yolo_> two hopes for c++ sites: 1. cplusplus.com updated to c++17   2. learncpp.com can be less verbose. Nothing to complain about cppreference.com though it's more like a reference instead of tutorial but it serves what it is designed for: the reference
[20:01:52] <yolo_> https://cplusplus.com/reference/algorithm/minmax/  the down-to-earth simple but productive site layout
[20:02:33] * yolo_ hates wiki-style unorganized info sites
[20:02:37] <PJBoy> there's always devdocs
[20:02:54] <PJBoy> https://devdocs.io/cpp/
[20:03:43] <yolo_> yeah it's essential cppreference with a new layout, good for reference, otherwise too verbose
[20:03:49] <PJBoy> fair
[20:03:56] <yolo_> s/essential/essentially/
[20:04:39] <PJBoy> https://devdocs.io/cpp/algorithm/minmax
[20:04:51] <PJBoy> I was thinking it was roughly comparable with the cplusplus one
[20:05:42] <Juliu> urdh, types are useless for passing variables and such, since the compiler can also determine the right type even if you dont explicitly state the type in our code
[20:06:42] <PJBoy> that's some newsletter shit right there
[20:06:43] *** Joins: JeffH (~JeffH@205.sub-174-198-141.myvzw.com)
[20:07:19] *** Quits: JeffH (~JeffH@205.sub-174-198-141.myvzw.com) (Remote host closed the connection)
[20:08:12] *** Joins: JeffH (~JeffH@205.sub-174-198-141.myvzw.com)
[20:09:13] *** Quits: JeffH (~JeffH@205.sub-174-198-141.myvzw.com) (Remote host closed the connection)
[20:10:21] *** Joins: JeffH (~JeffH@205.sub-174-198-141.myvzw.com)
[20:18:39] *** Quits: teepee (~teepee@openscad/teepee) (Remote host closed the connection)
[20:19:59] *** Joins: teepee (~teepee@openscad/teepee)
[20:20:43] *** Joins: Raziel (~Raziel@user/raziel)
[20:21:36] *** Joins: cm007magnum (~Rheanna@101.89.150.168)
[20:22:03] <ville> Juliu: perhaps it would be useful to learn how computers work: http://ftp.acc.umu.se/mirror/gnu.org/savannah/pgubook/ProgrammingGroundUp-1-0-booksize.pdf
[20:27:50] *** Quits: JeffH (~JeffH@205.sub-174-198-141.myvzw.com) (Remote host closed the connection)
[20:30:12] <Juliu> ville, thanks, I know how computers work
[20:30:41] *** Quits: lkor (~lionkor@beammp/staff/lionkor) (Ping timeout: 264 seconds)
[20:30:58] *** Joins: lkor (~lionkor@beammp/staff/lionkor)
[20:32:31] <ville> Juliu: some of your claims would indicate otherwise
[20:34:56] *** Joins: kenanmarasli (~kenanmara@user/kenanmarasli)
[20:36:16] <Juliu> ville, then you don't understand my clais
[20:36:20] <Juliu> *claims
[20:37:54] <yolo_> Juliu: how does cache coherency work in a computer :)
[20:38:56] <Juliu> yolo_, yes
[20:39:04] <yolo_> shoud a DMA memory region be cache-able or cache-inhibited?
[20:39:20] <Juliu> Agreed
[20:39:54] *** Joins: bobb_ (~bobb_@46.232.229.52)
[20:41:53] *** Quits: bobb_ (~bobb_@46.232.229.52) (Client Quit)
[20:42:09] *** Joins: bobb_ (~bobb_@46.232.229.52)
[20:43:04] <Haohmaru> !fact
[20:43:05] <nolyc> Haohmaru: Each of the standard categories includes a family of facets.
[20:43:17] <bobb_> Hi, what i see in old C code that shall now also be compiled with C++ is the following: https://coliru.stacked-crooked.com/a/402715613c8c9560 i really ask myself how this ever worked.
[20:44:22] <Haohmaru> you wonder how it worked in C?
[20:44:26] <bobb_> yes
[20:44:46] <Haohmaru> well, C is generally dumber and allows you to do crazy sh*t
[20:45:28] <bobb_> i mean, B contains A but its a completely different type, i guess the code only accessed the first say 8 bytes or so
[20:46:07] <Raziel> bobb_, technically that would compile in C++ too, if you do -fpermissive
[20:46:24] <bobb_> Raziel interesting!
[20:47:11] <bobb_> they also have https://coliru.stacked-crooked.com/a/c09ee610c9b2bf86 - great
[20:47:31] <bobb_> looks even more dangerous to me
[20:47:58] <Raziel> bobb_, https://wandbox.org/permlink/KHIEJacZD6XORsod
[20:48:11] <Raziel> it compiles, and what I had it do works, and outputs correctly
[20:48:18] <Raziel> it still yells at you about the warnings tho
[20:49:14] <imMute> yolo_: uncacheable if you're lazy.  cacheable and proper use of cache control functions in the kernel if you're not
[20:49:51] <bobb_> yeah i absolutely agree with you, the "how it ever worked" is more like one can only hope that f "knows" how to handy A and B without knowing what it really is
[20:50:08] <bobb_> s/handy/handle
[20:50:31] <Raziel> I'd definitely recommend not using anything like that lol
[20:51:43] <bobb_> Raziel if i'd knew before that they will put me into that project ...
[20:51:51] *** Joins: JeffH (~JeffH@205.sub-174-198-141.myvzw.com)
[20:52:00] <bobb_> -d
[20:52:00] <Raziel> interestingly enough, if I also add b->x = 3 there, it doesn't even crash. but ASAN would probably murder it.
[20:52:06] <Raziel> lol
[20:52:35] <Raziel> https://wandbox.org/permlink/on8Lvg5zWlWdNpsc like look at this crap
[20:52:52] *** Quits: JeffH (~JeffH@205.sub-174-198-141.myvzw.com) (Remote host closed the connection)
[20:53:21] <bobb_> hehe nice :D
[20:53:32] <bobb_> it does not crash, ship it
[20:54:59] *** Joins: JeffH (~JeffH@205.sub-174-198-141.myvzw.com)
[20:55:01] *** Quits: JeffH (~JeffH@205.sub-174-198-141.myvzw.com) (Client Quit)
[20:55:48] <anyone> that's too strict. If it builds, ship it
[20:55:58] *** Joins: JeffH (~JeffH@205.sub-174-198-141.myvzw.com)
[20:56:34] <bobb_> anyone haha yes, it will take some time until anyone will notice :D
[20:56:42] <bobb_> anybody
[20:56:49] <anyone> the compiler noticed
[20:58:10] <Raziel> I'm sure those warnings can be silenced too, somehow, maybe :p
[20:59:04] <Raziel> alternatively, https://wandbox.org/permlink/oJuuYmc1RfXQ49cf
[20:59:20] <Raziel> simply casting to B* instead of void* makes it perfectly fine (TM)
[21:00:08] *** Quits: urdh (~urdh@user/urdh) (Remote host closed the connection)
[21:01:42] <Juliu> You don't even have to pass the argument as a pointer. A reference would work as well
[21:02:01] *** Quits: JeffH (~JeffH@205.sub-174-198-141.myvzw.com) (Remote host closed the connection)
[21:02:55] <bobb_> Raziel imagine a reinterpret_cast, would that comply with the type aliasing rules?
[21:05:43] <Raziel> "Performing a class member access that designates a non-static data member or a non-static member function on a glvalue that does not actually designate an object of the appropriate type - such as one obtained through a reinterpret_cast - results in undefined behavior"
[21:06:36] <Haohmaru> so put on your UB-helmet on
[21:06:46] <bobb_> how can a c-style cast then be fine?
[21:06:51] <Raziel> it's not fine
[21:06:54] <bobb_> ahhh sorry
[21:06:58] <bobb_> i misunderstood you
[21:07:21] <Haohmaru> c-style is an alternative syntax to write a C++-style cast in C++
[21:07:22] <Raziel> what's in that wandbox is still UB, it just happens to work fine on there even though you're writing to and reading from memory you don't actually own
[21:07:45] <bobb_> okay i agree with you
[21:07:59] <bobb_> Haohmaru thats right
[21:08:07] <Raziel> and it also just so happens that the compiler doesn't figure out it should probably at least warn about that
[21:09:19] <Raziel> ASAN would definitely shit on it, but :p
[21:10:46] <Raziel> my perfectly fine (TM) line there was a joke about there being no warnings even though that's clearly not at all fine
[21:11:06] <ville> holy tits, unity bought weta
[21:11:14] *** Quits: cm007magnum (~Rheanna@101.89.150.168) (Remote host closed the connection)
[21:11:24] <Juliu> Who is weta?
[21:11:34] *** Parts: zoneu (~zoneu@user/zoneu) (Leaving)
[21:13:01] <bobb_> Raziel yeah i was a bit confused didn't got the joke :D
[21:13:09] <Raziel> :p
[21:13:47] *** Quits: Haohmaru (~Haohmaru@195.24.53.110) ()
[21:13:58] *** Joins: cm007magnum (~Rheanna@218.78.67.149)
[21:14:34] *** Joins: X-Scale` (~ARM@165.201.137.78.rev.vodafone.pt)
[21:15:05] *** Quits: X-Scale (~ARM@31.22.162.107) (Ping timeout: 264 seconds)
[21:15:40] <Alipha> yolo_: do you understand const member functions now?
[21:16:31] <Alipha> yolo_: and i typically put short (1 line?) functions/ctors/dtors in headers
[21:16:45] *** X-Scale` is now known as X-Scale
[21:17:09] *** Joins: spaceangel (~spaceange@ip-89-176-181-220.net.upcbroadband.cz)
[21:28:26] *** Quits: bobb_ (~bobb_@46.232.229.52) (Ping timeout: 256 seconds)
[21:28:51] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Quit: sord937)
[21:33:59] *** Quits: andreasbuhr (~quassel@p548ddf3f.dip0.t-ipconnect.de) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[21:34:31] *** Joins: byku45 (~byku@host-92-10-130-64.as13285.net)
[21:37:13] *** Joins: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it)
[21:37:51] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[21:37:58] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[21:37:58] *** ChanServ sets mode: +v npaperbot
[21:44:11] <byku45> Anyone here willing to work with me on some C++ side-project? We can bounce ideas across and decide to work on one of them.
[21:49:23] *** Quits: byku45 (~byku@host-92-10-130-64.as13285.net) (Quit: Client closed)
[21:50:06] *** Quits: jkaye (~jkaye@2601:281:8300:7530:212b:79de:3c7b:f9e0) (Ping timeout: 245 seconds)
[21:50:27] *** Joins: byku (~byku@host-92-10-130-64.as13285.net)
[21:52:44] <LordKalma> !rq
[21:52:44] <nolyc> LordKalma: <PJBoy> `$(CC) -c -o $@ $< $(CFLAGS)` makes jesus cry
[21:53:19] *** Quits: X-Scale (~ARM@165.201.137.78.rev.vodafone.pt) (Ping timeout: 256 seconds)
[21:53:57] *** Joins: X-Scale` (~ARM@31.22.202.101)
[21:56:06] *** X-Scale` is now known as X-Scale
[22:00:32] *** Quits: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it) (Quit: Leaving.)
[22:01:24] *** Quits: cm007magnum (~Rheanna@218.78.67.149) (Remote host closed the connection)
[22:02:26] *** Quits: byku (~byku@host-92-10-130-64.as13285.net) (Ping timeout: 256 seconds)
[22:03:22] *** Joins: cm007magnum (~Rheanna@218.78.104.50)
[22:03:59] *** Quits: proller (~p@2a02:6b8:0:40c:33a1:c83e:19df:80e8) (Ping timeout: 250 seconds)
[22:15:02] *** Joins: dextercd (~dexter@2a02-a450-f25d-1-76d4-35ff-fefe-34c.fixed6.kpn.net)
[22:17:15] *** Quits: riksu-raksu (riksteri@gateway/vpn/airvpn/riksteri) (Quit: riksu-raksu)
[22:18:30] *** Quits: Ameisen (~ameisen@digitalcarbide.com) (Quit: Quitting)
[22:22:09] *** Joins: gehn (~gehn@user/gehn)
[22:23:06] *** Joins: byku (~byku@host-92-10-130-64.as13285.net)
[22:27:33] *** Quits: sonOfRa (sonOfRa@user/sonofra) (Remote host closed the connection)
[22:28:46] *** Quits: byku (~byku@host-92-10-130-64.as13285.net) (Quit: byku)
[22:30:08] *** Joins: jkaye (~jkaye@2601:281:8300:7530:65b4:1325:4217:bff5)
[22:33:37] *** Joins: urdh (~urdh@user/urdh)
[22:34:00] *** Joins: sonOfRa (sonOfRa@user/sonofra)
[22:37:29] *** Joins: Ameisen (~ameisen@137.184.136.18)
[22:45:27] *** Quits: Ameisen (~ameisen@137.184.136.18) (Ping timeout: 256 seconds)
[22:49:15] *** Joins: aegon (~mike@174.127.249.180)
[22:49:32] <cq-work> Quoteception
[22:49:57] <aegon> does anyone know if its possible to cross compile libraries to iOS that use concepts? It looks sketchy support wise but i'm checking on the off chance someone has figured out a way.
[22:50:43] *** Joins: CaCode (~CaCode@user/cacode)
[22:51:21] *** Quits: cm007magnum (~Rheanna@218.78.104.50) (Remote host closed the connection)
[22:52:47] *** Joins: Ameisen (~ameisen@198.211.110.166)
[22:53:35] *** Joins: cm007magnum (~Rheanna@218.78.105.67)
[22:53:38] *** Joins: ARoxdale (~ARoxdale@84.203.31.229)
[22:54:51] *** Quits: KombuchaKip (~kip@192.252.230.5) (Quit: Leaving.)
[22:55:31] *** Quits: Ameisen (~ameisen@198.211.110.166) (Client Quit)
[22:56:15] *** Joins: Ameisen (~ameisen@digitalcarbide.com)
[22:56:40] *** Joins: KombuchaKip (~kip@192.252.230.5)
[22:57:36] *** Joins: proller (~p@80.240.216.69)
[22:58:09] *** Joins: horribleprogram (~user@user/horribleprogram)
[22:58:16] <horribleprogram> Where do I ask make specific questions
[22:58:29] <horribleprogram> I always forget the name of it, it's like #building or some bs
[23:00:02] <horribleprogram> okay if I do something like LISTINGS=$(addsuffix .listing, $(NAMES))
[23:00:29] <horribleprogram> does the LISTINGS variable contain the text '$(addsuffix .listing, $(NAMES))' or does it "expand" it
[23:01:30] <anyone> by default, make variables are expanded on use
[23:01:33] <horribleprogram> cuz there's like :=, =, ?=, /=, $=, *=, \=, !=, ~=, 🥩=
[23:01:37] <horribleprogram> ahh kk
[23:01:41] <horribleprogram> wait define "use"
[23:01:42] <anyone> := is the "expand now goddammit"
[23:02:10] <horribleprogram> so the right side of an =
[23:02:13] <horribleprogram> will not expand
[23:02:33] <horribleprogram> UNAME := $(shell uname) expands... UNAME = $(shell uname) wont?
[23:02:49] <horribleprogram> sorry I think whitespace is important for the =, so it's UNAME=$(shell uname)
[23:02:49] *** Joins: CaCode_ (~CaCode@user/cacode)
[23:02:56] <horribleprogram> how would I test these "theories"
[23:02:56] <anyone> for lack of a better word, my "use" refers to the ultimate intuitive "use", e.g. in a command line
[23:03:08] <anyone> DATE = $(sleep 10; shell date)
[23:03:18] <anyone> uhg. DATE = $(shell sleep 10; date)  or something
[23:03:18] <horribleprogram> lol that's a good point
[23:03:20] <horribleprogram> but
[23:03:41] <horribleprogram> so it's not like CMake
[23:03:45] <horribleprogram> where u need a project and whatnot
[23:04:05] <horribleprogram> u can just call make and it'll do it's thing... even if ur makefile is like just variables and shit
[23:04:08] <anyone> remember that cmake is a Makefile generator
[23:04:22] <aegon> or a ninja generator now o_O
[23:04:29] <anyone> "Makefile" in generic terms
[23:04:43] <horribleprogram> let's just say
[23:04:47] <horribleprogram> I wanted to output something
[23:05:00] <anyone> because people were fucking tired of  e.g. MYLIBS = $(shell pkg-config blah --libs)  being executed *over and over* again as a result of the deferred expansion
[23:05:01] <horribleprogram> UNAME := $(shell uname) .. i wanna output $(UNAME)
[23:05:02] *** Quits: CaCode (~CaCode@user/cacode) (Ping timeout: 240 seconds)
[23:05:09] <horribleprogram> what's the default... std::cout <<
[23:05:21] <horribleprogram> would it be something like $(echo $(UNAME))
[23:05:24] <anyone> make is not meant to output text to screen; it is meant to produce targets
[23:05:28] <horribleprogram> ik
[23:05:35] <horribleprogram> so an "all" target
[23:05:43] <horribleprogram> all: ; <my code here>?
[23:06:01] <anyone> well yeah, since $(echo ...) too can stay unexpanded (but that depends on whether echo is a "expand now"-ish command like, but then unlike, :=)
[23:06:08] <horribleprogram> jesus christ
[23:06:12] <horribleprogram> someone write my a makefile
[23:06:17] <horribleprogram> me*
[23:06:34] <horribleprogram> UNAME = $(shell uname) all: ; echo $(UNAME)
[23:06:36] <horribleprogram> THAT
[23:06:39] <anyone> $(warning ...) for example is an expand-now thing, i.e. gets evaluated even if no targets need remaking.
[23:06:41] <horribleprogram> like something like that but it actually works
[23:06:45] <horribleprogram> dude
[23:06:53] <horribleprogram> idc about little gotchas
[23:06:55] <imMute> horribleprogram: that makefile should work
[23:07:01] <horribleprogram> imMute: i tried
[23:07:28] <anyone> $() expansion is anything but little but whatever
[23:07:29] <horribleprogram> it outputs echo
[23:08:02] <imMute> horribleprogram: it works for me.  remember that Make outputs the commands it's going to run just before running them.  that's where the "echo" is coming from
[23:08:28] <horribleprogram> wait a sec
[23:08:39] <horribleprogram> it's @echo $(UNAME)
[23:09:02] <horribleprogram> also
[23:09:05] <imMute> horribleprogram: the @ at the start of a command tells make not to output the command before running it.
[23:09:14] <horribleprogram> UNAME = $(shell uname) Expands the right sie
[23:09:16] <anyone> but @ is a little gotcha, so horribleprogram doesn't care
[23:09:16] *** Quits: nshire (~Neal@user/nshire) (Read error: Connection reset by peer)
[23:09:20] <horribleprogram> anyone: :P
[23:09:31] <horribleprogram> I see
[23:09:35] <imMute> horribleprogram: UNAME is expanded when it's used in the echo command
[23:09:40] <horribleprogram> OH
[23:09:47] <horribleprogram> danggggg
[23:09:52] <horribleprogram> that's deep af
[23:10:40] <horribleprogram> okay well I'll never know then
[23:10:41] <imMute> if you change it to UNAME := $(shell uname)   then it's expanded and stored in the variable immediately
[23:10:51] <horribleprogram> imMute: how would I know
[23:10:57] <imMute> how would you know what?
[23:11:10] <horribleprogram> I can say the same thing about UNAME = $(shell uname)
[23:11:14] <horribleprogram> and there would be no way to test it
[23:11:27] <imMute> that it's expanded immediately?
[23:11:30] <horribleprogram> yes
[23:11:48] <horribleprogram> any reference to it.. $(UNAME) would expand it
[23:11:55] <horribleprogram> so I have to take ur "word" for it
[23:12:00] <horribleprogram> and I don't trust u
[23:12:03] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[23:12:06] <anyone> You don't need to take our word; you could just read the fucking manual.
[23:12:16] <imMute> A = foo;   Test = $(A);  A = bar;   all: ; echo $(Test)
[23:12:17] <horribleprogram> fake news manual?
[23:12:32] <anyone> sure, just the best for fake users.
[23:12:33] <imMute> if you use Test = $(A) that will output bar, if you change it to := it'll output foo
[23:12:40] <horribleprogram> AHHH
[23:12:58] <horribleprogram> imMute: ur actually pretty genuis
[23:12:59] <imMute> also this is documented in the manpages
[23:13:30] <horribleprogram> oh btw
[23:14:31] <horribleprogram> yeah ur right nvm
[23:14:50] <horribleprogram> tried both ways... that's actually a cool little practice problem to learn = vs :=
[23:23:08] *** Joins: AbleBacon (~AbleBacon@user/AbleBacon)
[23:26:55] *** Joins: wootehfoot (~wootehfoo@user/wootehfoot)
[23:29:48] *** Joins: plastico (~plastico@neomutt/plastico)
[23:30:13] *** Quits: cq-work (~Z_Lund@user/cq-work) (Quit: WeeChat 3.3)
[23:33:01] *** Quits: horribleprogram (~user@user/horribleprogram) (Remote host closed the connection)
[23:34:15] *** Quits: m_ben (~m_ben@user/m-ben/x-7429725) (Quit: WeeChat 3.3)
[23:41:17] *** Quits: cm007magnum (~Rheanna@218.78.105.67) (Remote host closed the connection)
[23:44:23] *** Joins: cm007magnum (~Rheanna@218.78.53.13)
[23:45:31] *** Quits: proller (~p@80.240.216.69) (Ping timeout: 256 seconds)
[23:45:54] *** Joins: proller (~p@2a02:6b8:b081:8017::1:22)
[23:53:44] <antto> programmablehorror
[23:57:17] *** Joins: Guest4249 (~Guest42@eth-west-pareq2-46-193-4-100.wb.wifirst.net)
