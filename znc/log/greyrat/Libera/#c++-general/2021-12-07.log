[00:00:18] <LordKalma> PJBoy, the .net VM is half JIT half interpreter... Some (quite good) heuristics make native code whenever it's "worth it"
[00:00:56] <LordKalma> python's @property decorators are only good to make my_foo.thing magically work with functions
[00:01:18] <LordKalma> for example a computed value accessed as variables
[00:01:34] <PJBoy> yeah I've seen it
[00:02:44] <LordKalma> I keep talking about a language that I used for 2 hours that I haven't decided if I like or hate
[00:03:01] * imMute love-hates C#.
[00:03:24] <PJBoy> I need more time with C#
[00:03:43] <LordKalma> meh, in one hand, I really would like to write my next project in C++. On the other hand... the .net ecosystem is looking sexy, even for speedy stuff
[00:03:44] <LordKalma> so idk
[00:03:48] <LordKalma> yeah, I have to use more too
[00:03:52] <PJBoy> but I'm completely depressed in a C# oriented way
[00:03:59] <LordKalma> !grab PJBoy
[00:03:59] <nolyc> LordKalma: The operation succeeded.
[00:04:22] <Alipha> if i want to be productive and it doesn't matter what language, i'd pick C#.
[00:04:40] <LordKalma> it's a daunting barrier to entry
[00:04:46] <LordKalma> the stdlibrary and stuff
[00:05:04] <PJBoy> C# has a shitload of language features to learn
[00:05:11] <LordKalma> yap
[00:05:16] <PJBoy> I dare say more than any other language ever made
[00:05:24] <LordKalma> laughs in JS?
[00:05:32] <PJBoy> JS has like 2 features
[00:05:46] <Alipha> c++ is a more complex language to learn than c#
[00:05:50] <PJBoy> associative arrays
[00:05:52] <PJBoy> and semicolon insertion
[00:06:12] <imMute> and lack of integers.
[00:06:15] <LordKalma> `this` shenanigans
[00:06:26] <LordKalma> and ... expansion (ES6 iirc)
[00:06:28] <imMute> oh fuck that too.
[00:06:32] <PJBoy> the this video I saw made them seem fine
[00:06:43] <imMute> "this" shenanigans are a bitch when you find out about them unexpectedly
[00:07:00] <kalven> js had async/await way before c++ (and in a usable form)
[00:07:11] <Alipha> my toy scripting language i started has closures...
[00:07:19] <LordKalma> I'm using Vue.js 3 and Vue actually injects this so that it always does the right thing
[00:07:29] <LordKalma> which is a godsend
[00:07:44] <PJBoy> jesus christ does that sound like a hack
[00:08:22] <PJBoy> I haven't seen any JS async/await code yet
[00:08:26] <imMute> JS is a hack.
[00:08:32] <LordKalma> for example https://v3.vuejs.org/guide/composition-api-setup.html#usage-of-this
[00:08:43] <LordKalma> PJBoy, whaaat??! all JS devs write is .then()
[00:08:49] <PJBoy> I usually see those chained "(...).then()" stuff
[00:08:55] <PJBoy> yeah exactly
[00:09:02] <PJBoy> but that's synchronous stuff
[00:09:09] <LordKalma> JS devs love callback hells
[00:09:34] <PJBoy> callbacks make sense
[00:09:42] <PJBoy> I'm completely fine with callbacks
[00:10:24] <LordKalma> I was trying a vue-based framework, but ended up going back to the basics, and now I'm trying to learn tailwind instead of bootstrap
[00:10:36] <PJBoy> python is the language that's exposed me to async/await stuff the most
[00:10:50] <PJBoy> and I've dabbled with it in C#
[00:10:51] <LordKalma> and that came in 3.6 iirc
[00:11:04] <LordKalma> or was async def in 3.6?
[00:11:30] <PJBoy> idk that's ancient history
[00:11:39] <LordKalma> I learned python in 3.3 hahah
[00:11:50] <kalven> async/await is the way out of callback hell
[00:11:50] <LordKalma> and the ecosystem was still all on 2.7
[00:11:53] <LordKalma> namely numpy
[00:11:58] <PJBoy> I learned python back in 2010
[00:12:16] <rpav> commit first, _then_ refactor
[00:12:26] <LordKalma> ^that
[00:12:36] <LordKalma> PJBoy, 2012 for me
[00:12:45] <PJBoy> which was 3.1
[00:13:16] <PJBoy> I never did get a grasp on how the async stuff worked though
[00:13:32] <PJBoy> something complains that I don't use await and I added it in
[00:13:46] <PJBoy> seemed pretty redundant
[00:14:25] <PJBoy> idk what my mental block is in that area
[00:14:27] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Ping timeout: 252 seconds)
[00:14:40] <LordKalma> I don't get async await at all
[00:14:48] <LordKalma> It's just... Calling a function?
[00:14:53] <LordKalma> That was declared async?
[00:14:57] <PJBoy> I feel like one of those people that doesn't understand pointers
[00:14:59] <LordKalma> But what does that mean?
[00:15:05] <PJBoy> so they just add asterisks until shit works
[00:15:54] <kalven> LordKalma: it means you can write async code that looks sync
[00:16:13] *** Quits: proller (~p@2a02:6b8:b081:8012::1:16) (Ping timeout: 240 seconds)
[00:16:52] <LordKalma> I mean, like, I write await somewhere..., isn't just calling the function "as usual"?
[00:17:53] <kalven> is your thinking here that they added something that doesn't actually do anything?
[00:18:01] <LordKalma> no
[00:18:04] <LordKalma> it's jsut that I don't get it
[00:18:48] <LordKalma> https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/await
[00:18:52] * LordKalma reads that
[00:19:06] *** Quits: meator (~meator@user/meator) (Quit: Leaving)
[00:19:40] <PJBoy> I think `await expr` is the operation that says "I'm gonna close my eyes, and when I open them back up, I wanna see expr fully evaluated >:("
[00:19:53] <Alipha> << (****************std::atoi)("234");
[00:19:54] <geordi> 234
[00:20:04] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[00:20:07] <PJBoy> in the meantime, other unrelated code can be executed
[00:20:12] <kalven> close my eyes and yield execution
[00:20:19] <rpav> my god, it's full of stars
[00:20:50] <PJBoy> oh function pointers, never change
[00:21:01] <PJBoy> (and they never did)
[00:21:07] <LordKalma> they won't beacuse backawards compat
[00:21:13] *** Quits: Hokedli (~lasliedv@gateway/tor-sasl/hokedli) (Quit: Konversation terminated!)
[00:21:23] <LordKalma> except when backwards compat doesn't matter?
[00:21:23] <LordKalma> idk
[00:21:32] <LordKalma> design by standard is weird
[00:21:45] <PJBoy> well you know how it is
[00:22:03] <PJBoy> sometimes case law overturns old legislation
[00:23:00] <PJBoy> but not without a fight
[00:23:20] <PJBoy> except for aggregate initialisation
[00:23:28] <PJBoy> that one breaks backward compat for the meme
[00:23:38] *** Joins: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz)
[00:25:55] *** Joins: Itaru (~DaSH@ro2.flokinet.is)
[00:27:55] *** Quits: Itaru (~DaSH@ro2.flokinet.is) (Remote host closed the connection)
[00:28:19] *** Joins: Itaru (~DaSH@ro2.flokinet.is)
[00:30:31] <manuels> showerthoughts: why are build systems such a pain? why arent there any sophisitcated e.g. cmake alternatives written in python? it bothers me that I have to learn a new language which lacks simple things like dictsâ€¦
[00:31:06] <LordKalma> there are (/many) build systems based aroud python
[00:31:11] *** Quits: Leone (~Leo@216.154.50.172) (Read error: Connection reset by peer)
[00:31:12] <LordKalma> cmake-lang is terrible, yes
[00:31:24] <LordKalma> cmake does have critical mass, so we're stuck with it,
[00:31:38] <LordKalma> and it has a great feature set, from building to packaging, and it's not that bad when done correctly
[00:31:45] <LordKalma> if you need dics on your build system... hum....
[00:32:09] <LordKalma> *dicts
[00:32:24] *** Joins: navidr (uid112413@id-112413.uxbridge.irccloud.com)
[00:33:25] <navidr> Can I assume the `true` to `int` promotion will yield the value `1` in all cases? If yes where does specification talk about this? and if not, where can I find more info about this?
[00:34:29] <rpav> set(foo_${key} "val") # ;)
[00:34:47] <LordKalma> hahaha variable name interpolation is amazing
[00:34:59] *** Quits: Codaraxis__ (~Codaraxis@user/codaraxis) (Ping timeout: 252 seconds)
[00:34:59] <LordKalma> amazingly evil, but still amazing
[00:35:50] *** Quits: gehn1 (~gehn@user/gehn) (Quit: Leaving)
[00:36:02] *** Joins: gehn (~gehn@user/gehn)
[00:37:14] <rpav> navidr: https://eel.is/c++draft/expr#conv.prom-6
[00:37:40] <navidr> rpav: thanks. exactly what I was looking for.
[00:37:51] <rpav> i only knew it was there because we discussed this like yesterday
[00:38:04] <rpav> and by yesterday i think i mean friday
[00:40:56] *** Joins: aegon (~mike@174.127.249.180)
[00:42:20] <aegon> Alipha: RandomReader: your guys's overview of byte order and endiennes saved my butt. Just checked cross platform compat with the peering model i've been working on and with the "big endian" conversion i was doing on uuid's everything blows up but using the libs and what you guys talked about its smooth
[00:42:44] <aegon> s/libs/header
[00:42:45] <LordKalma> always roll your own crypto
[00:43:57] <aegon> <rant> crypto is a waste of compute power, energy and overall human resources for a pyramid scheme that has managed to do nothing but make worse versions of jpegs </rant>
[00:44:04] * aegon whistles and walks away slowly
[00:44:04] *** Joins: pulse (~pulse@user/pulse)
[00:44:30] <LordKalma> what are NFTs anyway? :p
[00:44:39] <Alipha> aegon: i wrote my own uuid class
[00:45:24] <navidr> LordKalma: Are you serious, or this is just kidding? and you really mean rolling your own crypto lib/algo? That is recipe for disaster.
[00:46:09] <LordKalma> you must be new around here
[00:46:35] *** Joins: proller (~p@80.240.216.69)
[00:46:53] <LordKalma> I'm only here to shitpost and make you mama jokes with PJBoy
[00:47:32] <PJBoy> your mama's so fat, when she steps on the scales, it reports SIGFPE
[00:48:21] <LordKalma> that's because she's so dense she couldn't ever be a floating point
[00:48:27] <LordKalma> I'mm see myself out
[00:48:37] <aegon> lol, i'm glad thats the context for the the roll your own crypto.
[00:49:09] <aegon> Alipha: that would be cool to take a look at someday if your in a sharing mood. For now i'm copying what my server library does, which is also wrong
[00:49:21] <aegon> but if both are wrong together, and they only talk with eachother, are they wrong?
[00:50:14] <LordKalma> if a function has total public test coverage and all units test pass, but there is a bug, is there one really? :p
[00:51:02] <Alipha> aegon: https://godbolt.org/z/a5ndYToq8 ( RandomReader, fyi, i added the variant to make_v4, if i understand the spec correctly)
[00:51:08] <LordKalma> with the exception of leak-type of bugs, asan and etc, I'm a fan of black box testing
[00:51:46] <Alipha> i wouldn't call UUID generation "rolling your own crypto"
[00:51:49] <rpav> is it really total public coverage if it doesn't cause all code paths to be exercised, and yet they're reachable?
[00:52:08] <LordKalma> you can have mutually canceling bugs
[00:53:01] <rpav> i guess it would only have a hypothetical future impact
[00:54:18] <LordKalma> as long as you don't #define private public
[00:55:01] <rpav> well, i mean if you add or modify something later, you'll potentially run into the individual non-canceling buggy behavior
[00:55:16] <LordKalma> then future tests ought to catch is
[00:55:27] <LordKalma> the bug only happens then
[00:55:40] <rpav> right, it's more a matter of "how soon do you catch this and is it important to catch sooner than later"
[00:55:44] <rpav> and i don't know
[00:55:58] <rpav> it may be better to know about sooner, at least, but
[00:56:12] <LordKalma> arguably, if you have small enough code blocks that's not even a question?
[00:56:54] <rpav> not necessarily, i mean, imagine you've implemented something you think is a general solution, but the general solution is actually _hard_, but it does work for your specific case
[00:57:19] <rpav> later you're like "yeah sure we can implement new feature X in like a week, we already have general_function()" but you don't
[01:00:32] *** Joins: johnny (~johnny@user/johnny)
[01:05:42] *** Quits: walkr (~walkr@177-7-165-171.user3p.brasiltelecom.net.br) (Quit: Leaving)
[01:06:36] *** Joins: seninha (~seninha@user/seninha)
[01:07:05] <ashafq> static_cast<const float **> from float ** not allowed. How do I make it work?
[01:08:50] <whupdup> const_cast
[01:09:19] <whupdup> inb4 someone else explains why what you're doing with const_cast is probably not a good idea
[01:11:04] <LordKalma> https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#es50-dont-cast-away-const
[01:11:09] <LordKalma> https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-type-const-cast.html
[01:11:14] <LordKalma> https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#Pro-type-constcast
[01:11:22] <ashafq> whupdup: I have a function with const float **, but the data I am supplying it isn't const
[01:11:36] <LordKalma> that shouldn't matter
[01:12:12] <rpav> i still want like(X) = decltype(X)
[01:12:44] <LordKalma> decltype(x) y; // ?
[01:12:50] <rpav> maybe decltype(X)()
[01:12:50] <LordKalma> (if that's possible=
[01:13:10] <rpav> auto foo = getThing(); auto x = like(foo); // .. though that could be done as a function
[01:13:27] <LordKalma> but that might not be possible in a static typed language
[01:13:39] <rpav> but nothing is dynamic there
[01:13:42] <LordKalma> well, at least not in a polymorphic one
[01:13:43] <rpav> it's just decltype(foo)();
[01:14:01] <rpav> or <T> T& like(const T&) { return {}; }
[01:15:16] <LordKalma> nevermind, yeah
[01:15:31] <LordKalma> decltype(x) doesn't follow the polymorphic tree :p
[01:15:45] <Alipha> ashafq: ideally the caller and callee would use `const std::vector<std::vector<float>> &` or something instead :-)
[01:16:14] <LordKalma> you mean std::span? :D
[01:16:21] <aegon> Alipha: did you write this up for fun or have it around. This is cool! I'm keeping the broken behavior because it seems to be what a lot of libs do which is.. suprising
[01:16:44] <Alipha> aegon: i wrote it for fun
[01:17:01] *** Quits: Itaru (~DaSH@ro2.flokinet.is) (Ping timeout: 240 seconds)
[01:17:03] <aegon> i think if you throw in the specail nil this is a complete cross platform uuid lib :P
[01:17:53] <whupdup> wait what's the bug? Alipha
[01:17:58] <whupdup> those look like uuids to me
[01:18:58] <aegon> whupdup: its not with what Alipha wrote. I'm interfacing with a haskell library and it seems to think rfc4122 is the same as the native byte representation, treated as 2 uint64's in network byte order
[01:19:19] <whupdup> oh I see
[01:22:29] <Alipha> aegon: uuid nil{}; // should work
[01:22:40] <sord937> hello - I have an odd questions, is it acceptable to include libstdc++.so (and libgcc_s.so) in a package for a shared library which users link against?
[01:22:43] <aegon> i wonder how many rfc standards are just wrong in the majority of places and so its fine :P I don't remember the detail but pyOpenSSL has had a bug for years with some ssl handshake extension I ran into that xbox live services use. I just got an email update on the github thread where they are still deciding on a fix
[01:24:12] <aegon> and i'd guess pyOpenSSL is used *a lot* of places so it must be wrong or unused most places
[01:24:47] *** Quits: magla (~gelignite@55d47927.access.ecotel.net) (Quit: Stay safe!)
[01:25:52] *** Quits: robod34 (Username@79.113.195.239) (Quit: Goe offline! ( http://marius.sucan.ro/ ))
[01:27:25] *** Quits: john99 (~johnny@138.62.221.87.dynamic.jazztel.es) (Remote host closed the connection)
[01:29:33] <aegon> bleh i think it was just not implemented with a TODO which resulted in a generic urllib error during the handshake
[01:32:07] *** Quits: _flood (flooded@gateway/vpn/protonvpn/flood/x-43489060) (Remote host closed the connection)
[01:32:12] <aegon> Alipha: how do you know what integer typ the version number and variant are when shifting them? I guess it doesn't matter since the conversion will be the same i think but do those literals end up being 32, 16, 8, signed, unsigned etc
[01:32:59] *** Joins: flooded (flooded@gateway/vpn/protonvpn/flood/x-43489060)
[01:33:42] *** Joins: fdkf (~fdkf@178.49.152.151)
[01:34:08] *** Joins: troller (~p@80.240.216.69)
[01:34:23] *** Quits: proller (~p@80.240.216.69) (Ping timeout: 252 seconds)
[01:36:39] *** Joins: Terminus (~null@user/terminus)
[01:37:40] *** Quits: Burgundy (~yomon@79.115.213.171) (Ping timeout: 265 seconds)
[01:38:30] <rpav> sord937: it's acceptable if you follow the terms; note however libstdc++ is GPL
[01:38:40] <rpav> probably so is libgcc
[01:39:08] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[01:39:17] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[01:39:17] *** ChanServ sets mode: +v npaperbot
[01:40:10] <sord937> rpav: I mean is it acceptable to expect such package including the libstdc++.so etc to work on any distro (or wide range of them)?
[01:40:22] <ashafq> Alipha: I would love to, but this code is interfacing with C/ASM code
[01:40:30] <sord937> to me it seems wrong and better to build the shared library per distro
[01:41:08] <ashafq> Alipha: And the `const float **` is a nice way of saying "We don't touch this buffer" in C/ASM land
[01:41:10] <rpav> sord937: usually not, though _maybe_ if you use appimage or something
[01:41:37] <rpav>  i'm not sure how appimage gets around licensing issues though
[01:44:17] <rpav> (actually the runtime exception _may_ be sufficient for those, but i'm not sure)
[01:45:00] <sord937> rpav: yes I think the licensing is covered, it is just the "single package including system libs for all distros" that I am uneasy about
[01:45:25] <rpav> https://www.gnu.org/licenses/gcc-exception-3.1-faq.en.html see "I use a proprietary compiler..." 2nd para
[01:46:06] <sord937> the problem with it is that users will link against this library and use unexpected "system" libraries like libstdc++.so/libgcc_s.so/etc from some other source
[01:46:07] <rpav> sord937: it's not necessarily bad, and if you're doing binary dist might be a really good choice, because binary library compatibility can be pretty finnicky especially across versions
[01:46:26] <rpav> and assuming everything has the same version available across distros is .. probably not a good assumption ;)
[01:46:53] <rpav> https://appimage.org/ <- if you haven't considered that, perhaps check it out
[01:46:54] <Alipha> ashafq: use `const float * const *` instead of `const float **`
[01:47:21] <sord937> rpav: thank you
[01:47:27] <rpav> (of course if it would make more sense to get your thing included in distros as distro packages, that's different)
[01:48:17] <sord937> it is not mine actually, someone provided it and to my surprise my app linked against it and ended up using their libstdc++.so which I quite dislike :-)
[01:48:58] <rpav> yeah if it doesn't it's not like C where it's probably fine; you can run into all sorts of ODR violations and binary incompatibility
[01:49:26] <rpav> well, hypothetically .. gnu stuff tends to have all the versioned symbols so that may all work fine nowadays
[01:49:35] <Alipha> aegon: literal integers, unless you specify otherwise, are of type `int`.
[01:49:39] <sord937> yeah - I think I will try to explain that to them - they want to have a single package (tar file) for a number of distros
[01:50:03] <rpav> ULL
[01:50:09] <sord937> rpav: you are right - it works because of that
[01:50:13] <Alipha> aegon: and no, it doesn't matter, unless the result of the shift is potentially larger than an int can hold
[01:51:15] *** Quits: troller (~p@80.240.216.69) (Ping timeout: 252 seconds)
[01:51:29] *** Quits: Simplar (~Simplar@188.163.93.76) (Quit: Going offline, see ya! (www.adiirc.com))
[01:53:00] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Quit: sord937)
[01:53:37] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Ping timeout: 265 seconds)
[01:54:13] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[01:57:32] <johnny> Is there a place to ask about specific usages of the win32 api?
[01:58:43] <Alipha> johnny: sure
[01:58:50] <johnny> and where is tht?
[01:59:09] <Alipha> johnny: oh, sorry. Misread. You can ask here
[01:59:13] <Alipha> !windows
[01:59:14] <nolyc> You should ask your Windows programming questions in #C++-general, #winapi, #windows-coding or irc://irc.efnet.org/winprog
[01:59:20] <Alipha> Also ^
[01:59:23] <johnny> aha
[01:59:59] <johnny> well my problem is actually in a C# application (unity) that interfaces with windows dlls, so this didn't seem to be the place for it
[02:00:13] <johnny> I'm not making a game tho :)
[02:01:01] <Alipha> johnny: ah, so one of the above channels, or possibly there's a #unity and #c# or #csharp channel?
[02:01:31] <johnny> i did ask on unity, but the question is about hte usage of the win32 api itself which seems too specific for most of the people there to be able to answer
[02:02:18] <johnny> and C# doesn't seem to be the right place either, since i'm asking about the proper usage of the win32 apis themselves, not the C# incantations to achieve them
[02:02:56] <johnny> winapi doesn't seem to be the right place either based on the topic sadly
[02:03:09] <aegon> except for #unity is not the engine
[02:03:27] <johnny> it's #unity3d , but i just imagine Alipha didn't know the specific channel
[02:03:27] <aegon> not sure what it is but i end up there every once in a while and am super confused about whats going on
[02:03:57] *** Joins: troller (~p@2a02:6b8:b081:8806::1:2f)
[02:04:20] <johnny> Alipha, btw, that #windows-coding channel seems empty (there's on person there, and no topic), so it should probably be removed from that quote
[02:05:32] *** Quits: KombuchaKip (~kip@192.252.230.5) (Quit: Leaving.)
[02:05:58] <johnny> I guess i can ask the question here more broadly though
[02:06:06] *** Joins: KombuchaKip (~kip@192.252.230.5)
[02:06:20] *** Joins: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it)
[02:06:28] <johnny> If one were to want a transparent click through full screen window, then whats' the most modern api to use?
[02:06:59] <johnny> the apis currently in use have existed since freakin windows 2000 even via user32
[02:07:29] <johnny> maybe that is still in fact the correct way to do it, but some of the links are quite old indeed
[02:12:05] *** Quits: aegon (~mike@174.127.249.180) (Remote host closed the connection)
[02:30:38] *** Quits: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it) (Quit: Leaving.)
[02:39:36] *** Quits: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz) (Remote host closed the connection)
[02:57:10] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.3)
[02:59:46] *** Quits: xkuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[03:02:15] *** Joins: NovumDXW (~NovumDXW@2409:8a28:3610:2340:f1d3:d7bc:cf0a:7599)
[03:05:04] *** Quits: NovumDXW (~NovumDXW@2409:8a28:3610:2340:f1d3:d7bc:cf0a:7599) (Client Quit)
[03:14:33] *** Joins: szutt (~szutt@116.37.2.145)
[03:31:37] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:7515:120c:400a:3571)
[03:31:54] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:7515:120c:400a:3571) (Client Quit)
[03:32:06] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:7515:120c:400a:3571)
[03:33:23] *** Quits: pulse (~pulse@user/pulse) (Quit: Join a gamedev community at https://indiedevs.net/)
[03:33:40] <RandomReader> Alipha - variant looks right
[03:34:34] <RandomReader> PJBoy / LordKalma - that joke repartee was beautiful, I appreciated it
[03:35:33] <PJBoy> :D
[03:42:34] *** Quits: nojhan (uid443807@id-443807.lymington.irccloud.com) (Quit: Connection closed for inactivity)
[03:44:09] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:7515:120c:400a:3571) (Quit: Leaving)
[03:50:06] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Ping timeout: 265 seconds)
[03:50:47] *** Quits: dextercd (~dexter@2a02-a450-f25d-1-76d4-35ff-fefe-34c.fixed6.kpn.net) (Quit: WeeChat 3.3)
[03:55:28] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[04:03:49] *** Quits: Roughy (~mdaw45ns@user/roughy) (Ping timeout: 240 seconds)
[04:03:55] *** Quits: TheHermann (~TheHerman@gateway/tor-sasl/thehermann) (Quit: Leaving)
[04:04:00] *** Quits: Rayke (rayke@user/rayke) (Quit: WeeChat 3.3)
[04:04:22] *** Joins: Rayke (rayke@user/rayke)
[04:08:04] *** Joins: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse)
[04:09:10] *** Joins: Roughy (~mdaw45ns@77.16.51.75.tmi.telenormobil.no)
[04:09:12] *** Quits: Roughy (~mdaw45ns@77.16.51.75.tmi.telenormobil.no) (Changing host)
[04:09:12] *** Joins: Roughy (~mdaw45ns@user/roughy)
[04:09:16] *** Quits: Roughy (~mdaw45ns@user/roughy) (Client Quit)
[04:09:35] *** Joins: Roughy (~mdaw45ns@77.16.51.75.tmi.telenormobil.no)
[04:09:38] *** Quits: Roughy (~mdaw45ns@77.16.51.75.tmi.telenormobil.no) (Changing host)
[04:09:38] *** Joins: Roughy (~mdaw45ns@user/roughy)
[04:12:03] *** Joins: c4017w (~c4017@209.52.68.8)
[04:20:55] *** Joins: Roughy- (~mdaw45ns@ti0090a400-4467.bb.online.no)
[04:20:55] *** Quits: Roughy (~mdaw45ns@user/roughy) (Killed (NickServ (GHOST command used by Roughy-!~mdaw45ns@ti0090a400-4467.bb.online.no)))
[04:20:55] *** Roughy- is now known as Roughy
[04:20:57] *** Quits: Roughy (~mdaw45ns@ti0090a400-4467.bb.online.no) (Changing host)
[04:20:57] *** Joins: Roughy (~mdaw45ns@user/roughy)
[04:25:27] *** Quits: Jupp_S (~quassel@ip-88-153-154-129.hsi04.unitymediagroup.de) (Remote host closed the connection)
[04:25:31] *** Joins: xkoncek8 (xkoncek@lounge.fi.muni.cz)
[04:27:21] *** Quits: xkoncek (xkoncek@lounge.fi.muni.cz) (Read error: Connection reset by peer)
[04:27:21] *** xkoncek8 is now known as xkoncek
[04:31:01] *** Quits: Ivii (~Ivyy@2001:a62:4c3:8e01:d1fb:d15b:4215:e584) (Remote host closed the connection)
[04:35:04] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[04:43:30] *** Quits: AmR (~AmREiSa@156.199.223.24) (Quit: Konversation terminated!)
[04:45:14] *** Joins: chozorho (~chozorho@c-69-250-72-103.hsd1.md.comcast.net)
[04:46:39] *** Quits: skapata (~Skapata@user/skapata) (Ping timeout: 265 seconds)
[04:49:08] <Alipha> Pray for me. I'm doing string parsing AND date/time manipulation in c++
[04:50:12] *** Joins: skapata (~Skapata@user/skapata)
[04:51:04] * RandomReader lights a candle
[04:53:24] *** Joins: gargus (~user@114.198.29.250)
[04:53:25] *** Quits: jkaye (~jkaye@2601:281:8300:7530:1572:52e4:1190:1c22) (Ping timeout: 240 seconds)
[04:57:15] *** Joins: hackinghorn (~hackingho@user/hackinghorn)
[04:57:57] <whupdup> at least it's not unicode
[04:58:04] <whupdup> (is it?)
[05:01:32] <Alipha> whupdup: nope
[05:04:44] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:9def:63cb:61cc:904f) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[05:09:34] <Alipha> At that point, I would just quit
[05:09:59] *** Joins: jkaye (~jkaye@2601:281:8300:7530:da02:a8ec:4a68:7358)
[05:15:05] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[05:15:43] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[05:18:33] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[05:18:59] *** Joins: seninha (~seninha@user/seninha)
[05:19:02] *** Quits: Roughy (~mdaw45ns@user/roughy) (Ping timeout: 265 seconds)
[05:19:35] *** Quits: seninha (~seninha@user/seninha) (Remote host closed the connection)
[05:22:16] *** Quits: johnny (~johnny@user/johnny) (Remote host closed the connection)
[05:24:22] *** Joins: johnny (~johnny@user/johnny)
[05:28:34] *** Joins: Roughy (~mdaw45ns@ti0090a400-4467.bb.online.no)
[05:28:37] *** Quits: Roughy (~mdaw45ns@ti0090a400-4467.bb.online.no) (Changing host)
[05:28:37] *** Joins: Roughy (~mdaw45ns@user/roughy)
[05:36:06] <ashafq> Is there a way to combine bunch of static libraries into a single one with cmake?
[05:36:47] *** Quits: hgkjhgkjgkj (~hjgkjhgkj@46.235.96.249) (Quit: Leaving)
[05:39:08] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[05:39:17] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[05:39:17] *** ChanServ sets mode: +v npaperbot
[05:51:45] *** Quits: fdkf (~fdkf@178.49.152.151) (Quit: Client closed)
[05:57:31] *** Quits: gargus (~user@114.198.29.250) (Quit: Leaving)
[05:58:50] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Remote host closed the connection)
[06:02:03] *** Quits: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net) (Ping timeout: 252 seconds)
[06:11:57] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 252 seconds)
[06:12:40] *** Joins: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net)
[06:16:59] *** Joins: andreasbuhr_ (~quassel@p549db063.dip0.t-ipconnect.de)
[06:17:02] *** Quits: andreasbuhr (~quassel@p548ddc5e.dip0.t-ipconnect.de) (Ping timeout: 265 seconds)
[06:20:40] <sprout_> is there a manner to portably create flexible objects of a class?  (classes which end with a `type[] m`member)?
[06:21:45] <sprout_> or,  conversely is there a manner that _I_ can pass a pointer with the memory location where an object should be created to `new`?
[06:21:54] <sprout_> that would be very handy...
[06:23:36] *** Quits: Roughy (~mdaw45ns@user/roughy) (Quit: Meadow Fresh milk)
[06:24:01] <kalven> c++ doesn't have flexible array members. as for the second question, it sounds like you're asking for placement new
[06:26:25] <sprout_> let me state this differently.  I have a prototype interpreter for a language coded in 'ordinary' c++.  the runtime model is an object hierarchy of atoms or arrays of atoms.  I run into performance problems with the array of atoms.
[06:27:16] <sprout_> what I now have is a smart pointer to an array object which wraps a vector which probably allocates an array in turn... pretty hefty
[06:27:33] <sprout_> I want to get rid of one indirection at least.
[06:27:39] <sprout_> thoughts?
[06:37:01] *** Quits: jkaye (~jkaye@2601:281:8300:7530:da02:a8ec:4a68:7358) (Ping timeout: 268 seconds)
[06:39:33] *** Joins: emerent_ (~quassel@p200300cd571d489bba27ebfffed28a59.dip0.t-ipconnect.de)
[06:39:33] *** emerent is now known as Guest2577
[06:39:33] *** Quits: Guest2577 (~quassel@p200300cd5715b0a8ba27ebfffed28a59.dip0.t-ipconnect.de) (Killed (zinc.libera.chat (Nickname regained by services)))
[06:39:33] *** emerent_ is now known as emerent
[06:40:14] *** Joins: cm007magnum (~Rheanna@218.78.94.61)
[06:50:30] *** Quits: cm007magnum (~Rheanna@218.78.94.61) (Remote host closed the connection)
[06:52:51] *** Joins: cm007magnum (~Rheanna@218.78.79.129)
[06:59:20] *** Joins: letto2 (~letto@79.115.130.66)
[06:59:51] *** Quits: letto (~letto@188.25.118.240) (Ping timeout: 256 seconds)
[07:00:35] *** Joins: ferdna (~ferdna@user/ferdna)
[07:25:45] *** Quits: gehn (~gehn@user/gehn) (Quit: Leaving)
[07:34:02] *** Quits: biberu (~biberu@user/biberu) (Ping timeout: 240 seconds)
[07:36:26] <Alipha> sprout_: are these "arrays of atoms" sizes known at compile-time? or do you know how big they are when you create them? or do they resize after you create them?
[07:40:27] *** Quits: cm007magnum (~Rheanna@218.78.79.129) (Remote host closed the connection)
[07:40:57] <sprout_> they are known and never change.  at most there'll be an update in the array but that's it
[07:41:06] <sprout_> *they=sizes
[07:42:15] *** Joins: biberu (~biberu@user/biberu)
[07:42:19] *** Joins: cm007magnum (~Rheanna@61.171.21.169)
[07:42:58] *** Joins: Burgundy (~yomon@79.115.213.171)
[07:43:56] <Alipha> sprout_: they're known at compile-time?
[07:48:37] *** Quits: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net) (Ping timeout: 241 seconds)
[07:51:10] <sprout_> yes
[07:51:19] <sprout_> uh.  no
[07:51:28] <sprout_> they're known at runtime
[07:52:19] <sprout_> the rewriter basically is just a lot of 'create an array of size n and fill it with this' instructions
[07:53:34] *** Joins: Jupp_S (~quassel@ip-88-153-154-129.hsi04.unitymediagroup.de)
[07:55:04] *** Quits: smeso (~smeso@user/smeso) (Quit: smeso)
[07:55:56] <sprout_> Alipha: my mistake btw.  a value is an atom or an array of values.  (not an array of atoms.  sloppy)
[07:59:12] *** Joins: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net)
[08:01:23] *** Joins: smeso (~smeso@user/smeso)
[08:04:12] <Alipha> sprout_: if the arrays are generally "around n elements", where n is known at compile-time, you could consider a 3rd party vector that does small buffer optimization (sbo)
[08:09:47] *** Joins: letto (~letto@188.26.158.104)
[08:09:49] *** Quits: letto2 (~letto@79.115.130.66) (Ping timeout: 240 seconds)
[08:13:22] <sprout_> yah.  that's the other way.  just add a fixed size array (say 16 pointers) in the array class with a spillover
[08:13:44] <sprout_> but that would mean alway allocate 16 pointers for every array...
[08:13:48] <sprout_> so hmm
[08:24:03] *** Quits: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Quit: And I'm out.)
[08:30:31] *** Quits: nshire_ (~nshire@47.146.41.156) (Quit: Leaving)
[08:30:32] *** Quits: cm007magnum (~Rheanna@61.171.21.169) (Remote host closed the connection)
[08:30:48] *** Joins: nshire (~nshire@user/nshire)
[08:31:38] *** Joins: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[08:32:32] *** Joins: cm007magnum (~Rheanna@101.89.150.168)
[08:35:08] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[08:47:01] *** Quits: biberu (~biberu@user/biberu) (Ping timeout: 240 seconds)
[08:54:32] *** Joins: biberu (~biberu@user/biberu)
[09:08:14] *** Joins: kenanmarasli (~kenanmara@user/kenanmarasli)
[09:16:01] *** Quits: skapata (~Skapata@user/skapata) (Ping timeout: 252 seconds)
[09:20:03] <RandomReader> if this is effectively a create-only graph, you could also just deque all the values (as in all of them in a single container), and use a span in the graph
[09:20:28] *** Quits: cm007magnum (~Rheanna@101.89.150.168) (Remote host closed the connection)
[09:20:55] <RandomReader> sorry vector not deque, thought transformed halfway through the sentence
[09:22:54] *** Joins: cm007magnum (~Rheanna@218.78.105.67)
[09:29:06] *** Joins: skapata (~Skapata@user/skapata)
[09:33:07] *** Joins: lh_cat (~lh_mouse@mingw-w64/developer/lhmouse)
[09:36:28] *** Quits: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse) (Ping timeout: 268 seconds)
[09:39:09] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[09:39:17] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[09:39:17] *** ChanServ sets mode: +v npaperbot
[09:49:26] *** Quits: great_taste (~great_tas@user/great-taste/x-5798414) (Quit: Client closed)
[10:05:09] *** Quits: AbleBacon (~AbleBacon@user/AbleBacon) (Read error: Connection reset by peer)
[10:07:39] *** Joins: lh_mouse_ (~lh_mouse@mingw-w64/developer/lhmouse)
[10:09:28] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[10:10:26] *** Quits: cm007magnum (~Rheanna@218.78.105.67) (Remote host closed the connection)
[10:10:37] *** Quits: lh_cat (~lh_mouse@mingw-w64/developer/lhmouse) (Ping timeout: 240 seconds)
[10:13:05] *** Joins: cm007magnum (~Rheanna@101.91.232.166)
[10:17:15] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Ping timeout: 265 seconds)
[10:17:41] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[10:42:08] *** Joins: smallvil_ (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[10:42:08] *** Quits: cbreak (~cbreak@77-58-201-132.dclient.hispeed.ch) (Read error: Connection reset by peer)
[10:43:25] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Ping timeout: 240 seconds)
[10:45:10] *** Quits: Terminus (~null@user/terminus) (Quit: ZNC 1.8.2 - https://znc.in)
[10:45:58] *** Joins: cbreak (~cbreak@77-58-201-132.dclient.hispeed.ch)
[10:49:34] *** Joins: Terminus (~null@user/terminus)
[10:54:24] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[11:00:37] *** Quits: cm007magnum (~Rheanna@101.91.232.166) (Remote host closed the connection)
[11:07:08] *** Quits: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net) (Remote host closed the connection)
[11:07:33] *** Joins: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net)
[11:13:33] <LordKalma> !rq
[11:13:33] <nolyc> LordKalma: <ashafq> #define SEVENTY_TWO (69)
[11:13:41] *** Joins: gggp (~gggp@60.10.194.43)
[11:16:13] *** Quits: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net) (Ping timeout: 240 seconds)
[11:19:37] *** Joins: gggp_ (~gggp@120.245.47.104)
[11:19:49] *** Quits: gggp (~gggp@60.10.194.43) (Ping timeout: 240 seconds)
[11:24:59] *** Joins: nojhan (uid443807@id-443807.lymington.irccloud.com)
[11:27:36] *** Joins: gggp (~gggp@120.245.40.167)
[11:27:40] *** Joins: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net)
[11:29:21] *** Joins: Guest31 (~Guest31@2001-4dd4-11c2-0-99e-d85a-17ad-fec4.ipv6dyn.netcologne.de)
[11:29:38] *** Guest31 is now known as limubs
[11:30:14] *** Quits: gggp_ (~gggp@120.245.47.104) (Ping timeout: 265 seconds)
[11:34:05] *** Quits: gggp (~gggp@120.245.40.167) (Remote host closed the connection)
[11:34:59] *** Joins: gggp (~gggp@li870-78.members.linode.com)
[11:36:29] *** Joins: luizfrds1 (~Luiz@152.250.243.147)
[11:39:17] *** Quits: luizfrds (~Luiz@152.250.243.147) (Ping timeout: 256 seconds)
[11:41:38] *** Quits: gggp (~gggp@li870-78.members.linode.com) (Remote host closed the connection)
[11:44:03] *** Joins: frost (~frost@user/frost)
[11:48:36] *** Quits: smallvil_ (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) ()
[11:49:58] *** Joins: Haohmaru (~Haohmaru@195.24.53.110)
[11:50:40] *** Joins: gggp (~gggp@120.245.43.237)
[11:51:26] *** Quits: gggp (~gggp@120.245.43.237) (Client Quit)
[11:51:43] *** Joins: cm007magnum (~Rheanna@218.78.79.129)
[11:55:55] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[11:58:56] *** Joins: gggp (~gggp@li870-78.members.linode.com)
[12:04:41] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[12:09:24] *** Quits: artok (~azo@mobile-access-5672c9-83.dhcp.inet.fi) (Ping timeout: 268 seconds)
[12:10:26] *** Joins: artok (~azo@mobile-access-5672c9-83.dhcp.inet.fi)
[12:11:10] *** Quits: gggp (~gggp@li870-78.members.linode.com) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[12:14:39] *** Quits: chozorho (~chozorho@c-69-250-72-103.hsd1.md.comcast.net) (Quit: WeeChat 3.0)
[12:14:57] *** Joins: gggp (~gggp@li870-78.members.linode.com)
[12:15:06] *** Quits: gggp (~gggp@li870-78.members.linode.com) (Remote host closed the connection)
[12:15:33] *** Quits: artok (~azo@mobile-access-5672c9-83.dhcp.inet.fi) (Ping timeout: 256 seconds)
[12:15:54] *** Joins: gggp (~gggp@li870-78.members.linode.com)
[12:20:27] *** Joins: artok (~azo@mobile-access-5672c9-83.dhcp.inet.fi)
[12:21:55] *** Joins: robod34 (Username@79.113.195.239)
[12:27:45] *** Quits: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net) (Ping timeout: 265 seconds)
[12:29:12] *** Quits: gggp (~gggp@li870-78.members.linode.com) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[12:32:48] *** Joins: gggp (~gggp@li870-78.members.linode.com)
[12:34:45] *** Joins: AmR (~AmREiSa@156.199.223.24)
[12:35:36] *** Joins: mat-sharrow (~matthew@31.102.9.51.dyn.plus.net)
[12:36:47] *** Quits: gggp (~gggp@li870-78.members.linode.com) (Client Quit)
[12:38:20] *** Joins: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net)
[12:39:43] *** Joins: krishnac (~krishnac@c-67-188-37-26.hsd1.ca.comcast.net)
[12:40:29] *** Quits: cm007magnum (~Rheanna@218.78.79.129) (Remote host closed the connection)
[12:43:01] *** Joins: cm007magnum (~Rheanna@218.78.79.129)
[12:45:35] *** Joins: gggp (~gggp@li870-78.members.linode.com)
[12:45:45] <Haohmaru> !fact
[12:45:46] <nolyc> Haohmaru: An expression can result in a value and can cause side effects.
[12:48:37] *** Quits: krishnac (~krishnac@c-67-188-37-26.hsd1.ca.comcast.net) (Ping timeout: 240 seconds)
[12:55:38] *** Quits: gggp (~gggp@li870-78.members.linode.com) (Remote host closed the connection)
[12:59:09] *** Joins: pulse (~pulse@user/pulse)
[13:04:23] *** Joins: gggp (~gggp@li870-78.members.linode.com)
[13:07:09] *** Quits: mat-sharrow (~matthew@31.102.9.51.dyn.plus.net) (Remote host closed the connection)
[13:10:30] *** Joins: plastico (~plastico@neomutt/plastico)
[13:13:02] *** Quits: gggp (~gggp@li870-78.members.linode.com) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[13:13:16] *** Joins: mat-sharrow (~matthew@31.102.9.51.dyn.plus.net)
[13:13:31] *** Joins: krishnac (~krishnac@c-67-188-37-26.hsd1.ca.comcast.net)
[13:14:11] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:7515:120c:400a:3571)
[13:22:48] *** Joins: gggp (~gggp@li870-78.members.linode.com)
[13:24:41] *** Quits: gggp (~gggp@li870-78.members.linode.com) (Client Quit)
[13:27:08] <limubs> !right
[13:27:09] <nolyc> http://adrinael.net/youreright
[13:27:20] <limubs> !help
[13:27:20] <nolyc> limubs: Use the 'list' command to list all plugins, and 'list <plugin>' to list all commands in a plugin. To show the help of a command, use 'help <command>'.
[13:27:31] *** Joins: PJBoy (~PJBoy@user/pjboy)
[13:27:57] <Haohmaru> !rq
[13:27:57] <nolyc> Haohmaru: <hnOsmium0001> I should've quotegrabbed that but anyways...
[13:29:23] *** Quits: shailangsa (~shailangs@host86-186-136-27.range86-186.btcentralplus.com) (Ping timeout: 252 seconds)
[13:30:28] *** Quits: cm007magnum (~Rheanna@218.78.79.129) (Remote host closed the connection)
[13:33:03] *** Joins: cm007magnum (~Rheanna@101.89.150.168)
[13:38:39] <manuels> what is the best UML app today? I used umlet a lot, but it's quite "raw"
[13:39:09] *** Joins: cart_man (~rynot@host-78-144-121-71.as13285.net)
[13:39:09] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[13:39:18] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[13:39:19] *** ChanServ sets mode: +v npaperbot
[13:39:25] *** Quits: krishnac (~krishnac@c-67-188-37-26.hsd1.ca.comcast.net) (Ping timeout: 240 seconds)
[13:39:53] <mort> designing the class hierarchy _first_ and then going on to actually write code always seemed like a weird thing to me
[13:40:48] <fruitypunk> UML never took of the way I thought it would, back in the days of Rational Rose
[13:40:58] <mort> I always used draw.io for this stuff when we had to in uni but it's really bad at it
[13:41:45] *** Quits: mat-sharrow (~matthew@31.102.9.51.dyn.plus.net) (Quit: Konversation terminated!)
[13:47:27] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[13:58:06] *** Joins: shailangsa (~shailangs@host86-186-136-27.range86-186.btcentralplus.com)
[14:08:55] *** Joins: xkuru (~xkuru@user/xkuru)
[14:13:35] *** Joins: gggp (~gggp@li870-78.members.linode.com)
[14:16:26] <ville> rational failed to capture the students with reasonable pricing; free for students
[14:16:57] <ville> that guaranteed that incoming people, and those also making new companies, were not already captured by their products
[14:17:59] <mort> I always tried to avoid "free for students" stuff, I always thought of the "being a student" thing as temporary so I should probably learn the tools I'll be using when I'm not a student
[14:18:10] <mort> so far I think that's been the right choice
[14:20:14] <PJBoy> everything was free for me as a student with access to torrent website
[14:20:16] <PJBoy> s
[14:20:27] *** Quits: cm007magnum (~Rheanna@101.89.150.168) (Remote host closed the connection)
[14:20:34] <ville> also there was of course the problem of design-by-uml is snake oil and that's sometimes not a sustainable  market
[14:21:40] <ville> but it could be if you were able to capture large enough percentage of new people every year, so you would pray on them for the first few years of their careers until they realize the game
[14:21:41] <LordKalma> I like "free-style" uml diagrams to soemtimes reason about code
[14:22:09] <Haohmaru> PirateJBoy
[14:22:13] *** Joins: cm007magnum (~Rheanna@218.78.94.61)
[14:23:33] <mort> drawing a diagram which shows the major components and how they interact together can be very valuable, yea
[14:24:07] *** Quits: gggp (~gggp@li870-78.members.linode.com) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[14:24:24] <mort> but when the rules are "this shape box represents exactly a class in your java code, this shape box represents exactly an interface, these lines means this class implements this interface" it loses most of its power
[14:24:46] <LordKalma> that's why I said I "free style" UML
[14:24:50] <mort> yeah
[14:24:52] <LordKalma> the notation is whatever I want
[14:32:36] *** Quits: Hello71 (~Hello71@wireguard/contributor/hello71) (Remote host closed the connection)
[14:34:08] *** Joins: Hello71 (~Hello71@wireguard/contributor/hello71)
[14:46:31] <ac_slater> hey guys, If I call `new(mem) obj{};` to construct obj in some memory, then I manually call the dtor, does this deallocate `mem`?
[14:46:56] <mort> ac_slater: no
[14:47:00] <ac_slater> good, thanks
[14:47:15] <mort> that would've been annoying heh
[14:47:32] <LordKalma> manual memory in C++? sus
[14:47:44] <PJBoy> mem isn't necessarily allocated whatsoever there
[14:48:24] <ac_slater> right, I guess I was trying to see if manually calling the dtor implied anything
[14:48:26] <mort> placement new is useful in abstractions which can help avoid manual memory management kalma
[14:49:07] <ac_slater> LordKalma: I have a memory management system C that allocates from specific regions in external memory ;)
[14:49:14] *** Joins: Hello72 (~Hello71@wireguard/contributor/hello71)
[14:49:21] <ac_slater> can't always just have a single heap
[14:49:24] <LordKalma> I forgive you then
[14:49:27] <ac_slater> but yea, it sucks
[14:49:50] <ac_slater> getting heap-use-after-free things in ASAN and it's hard to figure out
[14:50:49] <limubs> hi, it seems that this: char* node_id_c = strdup(node_id.c_str()); produces a memory leak. Does somebody know how to do this without a leak?
[14:50:57] *** Quits: Hello71 (~Hello71@wireguard/contributor/hello71) (Ping timeout: 276 seconds)
[14:50:58] <mort> asan usually makes that pretty clear, no? It gives a stack trace for where it was allocated, a stack trace for where it was freed, and a stack trace for where you used it after the free
[14:51:25] <mort> well, "clear", there are definitely cases where those stack traces don't help too much
[14:51:26] <PJBoy> limubs, free the string it returns at some point?
[14:51:47] <ac_slater> limubs: please read man page
[14:51:49] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Ping timeout: 240 seconds)
[14:51:50] <ac_slater> `man strdup`
[14:52:04] <limubs> hm
[14:52:50] *** Joins: gggp (~gggp@li870-78.members.linode.com)
[14:54:58] <limubs> ah
[14:56:17] *** Quits: troller (~p@2a02:6b8:b081:8806::1:2f) (Ping timeout: 252 seconds)
[14:56:43] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[15:05:24] *** Quits: gggp (~gggp@li870-78.members.linode.com) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[15:11:11] *** Quits: cm007magnum (~Rheanna@218.78.94.61) (Remote host closed the connection)
[15:18:33] <ac_slater> mort: I do this `auto * p = my_special_malloc(sizeof(myobj));`. It's seemingly 56 bytes. Then I do `auto * o = new(p) myobj{};`. Later, static_cast `p` back to myobj* then manually call dtor. All good, but then freeing(p) triggers use after free
[15:18:55] <ac_slater> a simple test doesnt trigger it, but my larger program does - of course
[15:19:08] <AmR> I have this function " inline const QPixmap *icon() const { return iconLabel->pixmap(); } " I got this error when Try build with Qt6 with Qt5 I don't " error: cannot convert â€˜QPixmapâ€™ to â€˜const QPixmap*â€™ in return " How I can fix that ?
[15:19:41] <ac_slater> AmR: `return &iconLabel->pixmap();` ?
[15:19:43] <mort> make sure that the myobj dtor doesn't do something extremely stupid such as calling `free(this)`
[15:19:52] <ac_slater> mort: it doesnt ;)
[15:20:09] <mort> ac_slater: do you get stack traces from asan?
[15:20:18] <mort> it should make it pretty clear where the memory is being freed both times
[15:20:35] <mort> if you're not getting sensible traces from asan make sure you're compiling with -g
[15:20:46] <mort> (and make sure you're on linux, my experience with asan on macos isn't quite as good)
[15:21:14] <ac_slater> totally all good there. hmm
[15:21:34] <ac_slater> sound advice of course. Seems to be a larger issue at play
[15:21:42] <RandomReader> the "free" itself triggers it, or is it o still floating around afterward?
[15:22:03] <ac_slater> RandomReader: it's the free of the pointer where I placement new'd
[15:22:16] <ac_slater> let me read the trace from ASAN ;)
[15:22:26] <ac_slater> maybe I read it to fast and missed the whole point
[15:22:52] *** Quits: artok (~azo@mobile-access-5672c9-83.dhcp.inet.fi) (Quit: food with kids time)
[15:23:58] <mort> feel free to paste a (redacted, if needed) trace from asan
[15:25:19] *** Joins: fdkff (~fdkff@178.49.152.151)
[15:32:43] *** Joins: cm007magnum (~Rheanna@218.78.67.149)
[15:32:53] <ac_slater> ah
[15:33:32] <ac_slater> so the problem is I'm using utlist (https://troydhanson.github.io/uthash/utlist.html) and deleting objects while iterating a list. I was using LL_FOREACH but I needed to use LL_FOREACH_SAFE
[15:33:39] <ac_slater> mort: thanks for the help
[15:33:45] <ac_slater> I was thinking the problem was my placement new
[15:34:05] <ac_slater> I was missing ASAN's most critical line which shows WHERE the use after free was
[15:35:16] <AmR> ac_slater: It's give me " error: taking the address of a temporary object of type 'QPixmap' " when I try return &iconLabel->pixmap();`
[15:35:40] <ac_slater> AmR: seems like you need to learn C++ :-/. I can't help without seeing the rest of the program
[15:36:11] <ac_slater> AmR: they key thing here is lifetimes and object ownership.
[15:37:35] <AmR> I know the byRef and byVal And It's work in Qt5, But Not with Qt6 I don't know Why ?!!!
[15:37:38] <RandomReader> AmR - sounds like pixmap() returns a new object .. so getting the location of that object is useless, you'd need to permanently store it somewhere first
[15:38:31] <RandomReader> and that comment sounds like you're confusing languages
[15:42:18] <AmR> But How It's work with Qt5 And Not with Qt6 :( ?
[15:42:39] *** Joins: gggp (~gggp@li870-78.members.linode.com)
[15:43:15] *** Joins: Roughy (~mdaw45ns@user/roughy)
[15:47:34] *** Joins: troller (~p@2a02:6b8:0:51e:247d:133b:f0cd:2843)
[15:48:01] *** Joins: Enzix (~Enzix@77.105.17.172)
[15:51:16] <RandomReader> well, it's a major version change, so the API probably changed .. maybe it was deprecated before
[15:52:42] *** Quits: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao) (Ping timeout: 276 seconds)
[15:54:56] <LordKalma> !rq
[15:54:56] <nolyc> LordKalma: <Raziel> he thicc boyeeee
[16:00:27] *** Quits: cm007magnum (~Rheanna@218.78.67.149) (Remote host closed the connection)
[16:03:05] *** Joins: cm007magnum (~Rheanna@218.78.105.67)
[16:06:24] *** Quits: gggp (~gggp@li870-78.members.linode.com) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[16:15:22] *** Joins: Leone (~Leo@69-165-148-197.dsl.teksavvy.com)
[16:22:05] *** Quits: fdkff (~fdkff@178.49.152.151) (Quit: Client closed)
[16:23:50] *** Joins: aegon_w (~aegon_w@174.127.249.180)
[16:24:33] <aegon_w> hey all, i'm running into link errors trying to link libzmq on windows 10 with msvc 2019, where should i start looking for debugging?
[16:24:37] *** Quits: xkuru (~xkuru@user/xkuru) (Remote host closed the connection)
[16:24:53] <limubs> ok so now I am doing:
[16:24:53] <limubs> std::string node_id = "blubb";
[16:24:54] <limubs> char* node_id_c = strdup(node_id.c_str());
[16:24:54] <limubs> free(nod_id_c)
[16:24:55] <limubs> But it is still leaking memory. How can I fix this?
[16:25:23] *** Joins: xkuru (~xkuru@user/xkuru)
[16:37:17] *** Quits: cart_man (~rynot@host-78-144-121-71.as13285.net) (Quit: Konversation terminated!)
[16:38:21] *** Joins: LangerJan (~jan@user/langerjan)
[16:39:18] <LangerJan> Hi! In a bitfield (without "pack" pragma or something else), is a compiler allowed to place padding bits between the elements of a bitfield? If so, can somebody give an example?
[16:40:05] <mort> I think very little is guaranteed about the layout of bitfields?
[16:40:39] <TinoDidriksen> LangerJan, https://en.cppreference.com/w/cpp/language/bit_field#Notes
[16:41:00] <TinoDidriksen> Indeed, all the good parts are implementation defined.
[16:41:31] *** Quits: GunqqerFriithian (~gunqqer@gateway/vpn/pia/gunqqerfriithian) (Ping timeout: 252 seconds)
[16:41:49] *** Joins: GunqqerFriithian (~gunqqer@gateway/vpn/pia/gunqqerfriithian)
[16:45:14] <LangerJan> Would this fall under "on some platforms, bit fields don't straddle bytes, on others they do"?
[16:46:25] <mort> "Everything about the actual allocation details of bit fields within the class object" is implementation-defined
[16:46:41] <mort> I would expect it to be a legal implementation to use one int per bit
[16:47:53] <RandomReader> note even the order is implementation-defined, which makes most use cases for bitfields be basically target-specific, and useless in general
[16:48:12] <RandomReader> (or: assume that just using bitfields is non-standard, and consult implementation docs)
[16:48:33] <mort> I don't see why you would say most use cases are target-specific
[16:48:46] <RandomReader> limubs - how are you determining it is leaking?
[16:49:09] <mort> "most use cases" should be in cases where you're storing a bunch of individual flags and using a bitfield potentially gives you some form of size advantage over using individual bools
[16:49:40] <PJBoy> [[no_unique_address]] might be able to do the same optimisation
[16:50:06] <mort> I don't understand in which cases you would have to rely on the specific layout of a bitfield
[16:50:19] *** Quits: cm007magnum (~Rheanna@218.78.105.67) (Remote host closed the connection)
[16:50:29] <RandomReader> in my experience single-bit fields is not a common use
[16:50:56] <mort> sure?
[16:51:10] <RandomReader> which leaves multi-bit fields, and since even the basic arithmetic is implementation-defined, usually the reason for using them involves layout desires
[16:51:15] <mort> oh you mean single-bit fields as in using them to store boolean flags
[16:51:16] <RandomReader> e.g. pack these in a particular way
[16:51:22] <RandomReader> right
[16:51:38] <mort> I interpreted "single-bit fields" as structs with just one such boolean flag, sorry
[16:51:51] <RandomReader> it's not that it isn't possible to use them that way .. I just mean that most of the time I see people go for bitfields, they care about the implementation details anyway, so might as well just treat the whole thing as "not portable" in a mental sense
[16:51:55] *** Joins: smallvil_ (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[16:52:24] <LangerJan> I am collecting "proof" against my boss, who is coding a bitfield in two ways. Once, with bit-shifting and or/and bitwise operations. And the second way, with such a bitfield.
[16:52:57] <mort> what are you trying to prove
[16:53:14] *** Joins: cm007magnum (~Rheanna@218.78.79.129)
[16:53:29] <PJBoy> bitshifts et al get the PJ seal of approval
[16:53:49] <aegon_w> huh, am i possibly linking wrong on windows?
[16:54:01] <aegon_w> you provide the .lib file output correct?
[16:54:03] <LangerJan> I am trying to prove that these two ways will not work the same way given different platforms/compilers.
[16:54:15] <aegon_w> to the linker in additional libraries
[16:54:20] <mort> I also almost exclusively do the manual bitfield approach with a uintN_t and bit operations
[16:54:35] <mort> LangerJan: what do you classify as "the same way"
[16:55:01] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Ping timeout: 240 seconds)
[16:55:06] <mort> if you consider the size or layout of the struct to be part of "the same way" then yea they may be different
[16:55:17] <mort> if you're just concerned about the semantics in the C abstract machine they may be equivalent
[16:55:26] <mort> depending on what you do
[16:55:57] <PJBoy> aegon_w, that is correct
[16:56:13] *** Quits: smallvil_ (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Ping timeout: 240 seconds)
[16:56:13] <PJBoy> aegon_w, "additional dependencies" to be precise
[16:56:18] <LangerJan> mort: I am concerned that in one approach, we assume a specific field at bit 4, whereas, when taking it from a bitfield, the same field is assumed to be somewhere else
[16:56:39] <PJBoy> aegon_w, with the directory specified in "additional library directories"
[16:56:49] <mort> LangerJan: could you write up a short example of the two approaches
[16:57:22] <LangerJan> mort: will do
[16:58:53] <PJBoy> aegon_w, one common oversight when configuring MSVC projects is selecting the configuration and platform from the dropdown boxes in the property pages window
[17:01:02] <aegon_w> additional library directories points to the root where the .lib files are?
[17:01:05] <aegon_w> or to the .dll's
[17:01:23] <PJBoy> the libs
[17:01:42] <aegon_w> this is bizarry
[17:01:49] <PJBoy> dlls will have to be available to the exe at runtime, you don't specify their paths at all
[17:01:58] <PJBoy> either in the same directory as the exe or in system32
[17:02:06] <aegon_w> i must be not getting something so i'm second guessing everything i know
[17:02:11] <aegon_w> or i think i know
[17:02:30] <aegon_w> i'm trying to linke libzmq and i've built the dynamic version for vs2019 x64 Debug
[17:02:36] <aegon_w> and i'm building this project for the same
[17:02:47] <aegon_w> its listed in additional library dependencies, the directory points to its parent
[17:03:13] <aegon_w> OMG
[17:03:34] <aegon_w> that was 2 HOURS O_O. turns out what i really needed to do was close vscode and reopen it
[17:03:49] <PJBoy> oh VS code?
[17:03:54] <aegon_w> it just built while i was barfing text here :P
[17:04:06] <aegon_w> oh, visual studio, i keep forgetting vscode exists
[17:04:29] <PJBoy> closing VS and opening it... worked?
[17:04:42] <aegon_w> oh man.. what the heck.
[17:04:43] <aegon_w> yeah
[17:04:56] <aegon_w> i did countless clean and rebuilds after mucking with settings to no avail
[17:05:08] <aegon_w> i finally got frustrated and closed everything and was rebaselining
[17:05:11] <aegon_w> and it freakin compiles
[17:05:20] <PJBoy> interesting
[17:05:28] <PJBoy> I've never seen restarting VS solve a problem before
[17:06:10] <ville> visual studio or visual studio code?
[17:07:01] <pulse> visual studio
[17:07:47] <aegon_w> that is super disheartening
[17:07:54] <aegon_w> oy, need more coffee
[17:08:15] <aegon_w> i would expect clean to... clear any cached state
[17:09:47] <aegon_w> i must have at some point had a bad config that stuck or did something else to super confuse it
[17:10:04] <ville> that's a common problem where programs cache things and don't offer functionality to really really clear it out
[17:10:33] <aegon_w> i switched from std++17 to std++latest, thats the biggest change I can think of.
[17:10:52] <ville> ...and it becomes worse problem with "cloud" software that caches things on servers. good luck getting that cleared when it gets into a bad state. and it always wil
[17:11:22] <aegon_w> wait, wat. its failing to link again
[17:11:25] <aegon_w> this is wierd
[17:11:33] <aegon_w> i'm gonna try closing
[17:13:08] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[17:15:23] <aegon_w> i wonder if it has something to do with using /std=c++latest ?
[17:16:09] <aegon_w> nope, link fail again.. ok, gonna try regeneration
[17:16:28] <aegon_w> is there anywhere else i can poke at this to figure out more?
[17:21:05] <RandomReader> what does "failing to link" mean?
[17:21:59] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Remote host closed the connection)
[17:22:16] <aegon_w> it cant find symbols from libzmq.lib at link time
[17:22:38] <aegon_w> so compilation is fine, then it goes to link and cant find em
[17:22:50] <RandomReader> what's the *specific* error?
[17:22:56] <LangerJan> Regarding in-between padding in bitfields: https://wandbox.org/permlink/UIJdCCvTh99FKgif - is there any way that the output coming from line 27 differs from line 28?
[17:23:31] <aegon_w> i just wiped everything and am rebuilding but it should pop up soon
[17:23:37] <aegon_w> unless it decides to build this time :P
[17:24:23] <aegon_w> unresolved external symbol __imp_zmq_poller_destroy and many more from my .obj files
[17:24:55] <PJBoy> double underscores D:
[17:25:12] <RandomReader> ok, so it's expecting a 64bit import lib
[17:25:23] <aegon_w> then theres a unique one ofSeverityÂ Â Â  CodeÂ Â Â  DescriptionÂ Â Â  ProjectÂ Â Â  FileÂ Â Â  LineÂ Â Â  Suppression State
[17:25:23] <aegon_w> ErrorÂ Â Â  LNK2019Â Â Â  unresolved external symbol __imp_zmq_poller_wait_all referenced in function "public: unsigned __int64 __cdecl zmq::poller_t<class std::function<void __cdecl(enum zmq::event_flags)> >::wait_all(class std::vector<struct zmq::poller_event<class std::function<void __cdecl(enum zmq::event_flags)> >,class std::allocator<struct
[17:25:24] <aegon_w> zmq::poller_event<class std::function<void __cdecl(enum zmq::event_flags)> > > > &,class std::chrono::duration<__int64,struct std::ratio<1,1000> >)"
[17:25:24] <aegon_w> (?wait_all@?$poller_t@V?$function@$$A6AXW4event_flags@zmq@@@Z@std@@@zmq@@QEAA_KAEAV?$vector@U?$poller_event@V?$function@$$A6AXW4event_flags@zmq@@@Z@std@@@zmq@@V?$allocator@U?$poller_event@V?$function@$$A6AXW4event_flags@zmq@@@Z@std@@@zmq@@@std@@@std@@V?$duration@_JU?$ratio@$00$0DOI@@std@@@chrono@4@@Z)Â Â Â  octagonal_refractor
[17:25:25] <aegon_w> D:\coding\octilatural dimensions\cpp-refractor-library\src\build\client\ActivePoller.objÂ Â Â  1
[17:25:36] <aegon_w> sorry i'm on the web ui, i hope that didn't flood
[17:25:38] <RandomReader> assuming this Solution is also not building that lib, then it's just about the path and filename
[17:26:04] <aegon_w> the lib is built outside the solution. I'm giving it an absolute path for additional library directories
[17:26:09] <aegon_w> then the .lib name
[17:26:21] *** Joins: udet (~udet@ve603.venus.servdiscount-customer.com)
[17:27:04] <PJBoy> just the name right?
[17:27:08] <PJBoy> including the .lib extension
[17:29:04] <udet> hi all, I've got a question to type polymorphism and runtime type informations. lets assume I have a void* and a type_info describing type referred by that void*. the type referred is defined like C: A, B. could I get a void* to the B part? (dynamic_cast needs to do this somehow, but I can't find out how)
[17:29:15] <aegon_w> yeah its in additional library dependencies as libzmq.lib
[17:29:44] <aegon_w> but it must be finding it, because if i change the name it gives an error about not finding the file
[17:30:12] <PJBoy> it is a big long template there
[17:30:26] <PJBoy> maybe you're instantiating a template with a type that the library hasn't accounted for
[17:30:27] <udet> so basically, how to use type_information system to get offset to a certain inheritaned type
[17:30:53] <aegon_w> this stuff compiles and runs on gcc / clang
[17:31:02] <aegon_w> is it possible its something specific to msvc?
[17:31:32] <PJBoy> it's *possible* yeah
[17:31:37] <aegon_w> i compiled on the other two targeting c++17
[17:32:02] <aegon_w> i only did latest on msvc because it said it needed it for using feild identifiers in initializers
[17:32:24] <aegon_w> and removing those everywhere makes the code way harder to read and they are literally like, everywhere
[17:32:55] <aegon_w> its so wierd that it compiled once. is there any sanity check i can do of the generated libzmq.lib file?
[17:32:55] <PJBoy> designated initialisers are a C++20 feature >_>
[17:33:20] <LordKalma> or C99
[17:33:28] <aegon_w> oh
[17:33:31] <PJBoy> udet, I'm like 90% sure that's not possible
[17:34:03] <aegon_w> i guess at this point its wortht he trouble to go and remove them everywhere and go back to c++17
[17:34:18] <aegon_w> maybe c++latest is foobar'd
[17:34:29] <rpav> c++latest on VS _is_ 20
[17:34:34] <rpav> or beyond
[17:34:39] <PJBoy> do you not have /std:c++20 on your VS?
[17:34:57] <aegon_w> no /std:c++latest
[17:35:12] <PJBoy> ah, well
[17:35:28] <aegon_w> i'm on 16.7.6 of vs2019
[17:35:30] <PJBoy> I'm not sure what the guarantees are with c++latest
[17:35:39] <PJBoy> but it's supposed to be experimental in nature
[17:36:02] <aegon_w> i'll try ripping out the 20 features and switching to 17
[17:36:12] <PJBoy> VS2022 has /std:c++20 though
[17:36:21] <RandomReader> IIRC latest is not ABI compatible
[17:36:45] <aegon_w> oh, i didn't know 2022 was out, i'm stuck on windows 10 1909 because i'm in a windows update fail loop
[17:36:49] <PJBoy> tried googling for that information, but came up short
[17:36:52] <aegon_w> not sure if that will preclude me from getting it
[17:36:56] <PJBoy> doubt it
[17:37:13] <RandomReader> udet - no, the only thing you can get out of a void* is the exact type you put in
[17:37:57] <RandomReader> you can convert after that, but you can't do blind conversions from it alone, since it carries no information on what type it is originally (so there's no source for a conversion)
[17:38:21] <PJBoy> that's what the typo_info is supposedly for
[17:38:27] <RandomReader> type_info serves as an identifier but not as a manual type transport mechanism
[17:38:33] <PJBoy> wow the irony of that mispelling
[17:39:10] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[17:39:19] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[17:39:19] *** ChanServ sets mode: +v npaperbot
[17:40:38] *** Quits: cm007magnum (~Rheanna@218.78.79.129) (Remote host closed the connection)
[17:41:27] <udet> RandomReader, my problem is, at that time I do not know the original type, but only it's type_info(or any other information I can gain and store at runtime) and the destination type. so you say there is no way to acheive this, or is there another way?
[17:41:30] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Remote host closed the connection)
[17:41:30] <aegon_w> well, nuking everything and restarting with 2022 once its installed. hopefully that resolves everything but this is the wierdest bug yet for me
[17:41:38] *** Joins: cm007magnum (~Rheanna@218.78.109.69)
[17:42:04] <aegon_w> is /std:c++20 stable in 2022
[17:42:45] <PJBoy> something like that
[17:43:17] <PJBoy> it should link with older code in any case
[17:43:51] <aegon_w> if i can find out whats going on in the next 3 hours i'll be happy
[17:44:21] <aegon_w> super did not expect to hit a wall linking zmq
[17:44:46] <RandomReader> udet - there is no way to achieve that
[17:44:53] *** Quits: andreasbuhr_ (~quassel@p549db063.dip0.t-ipconnect.de) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[17:45:29] <PJBoy> udet, you can do a `if (the_type_info == typeid(ClassA)) { auto p = static_cast<ClassA*>(the_void_pointer); ... }`
[17:45:37] <aegon_w> heh, i'm trying to get everything on windows for a demo in a presentation i'm giving at 5:20 today, and trying to get things to play nice with windows is terrible this time around. I didn't know docker on windows couldn't take ingress traffic from the host without backflips
[17:45:37] <PJBoy> etc for all possible types
[17:45:40] <RandomReader> the sender needs to supply a type the receiver already knows
[17:46:32] <rpav> udet: you probably have a bigger problem in that typeinfo isn't very useful; can you change what you store (instead of typeinfo)?
[17:46:36] <PJBoy> aegon_w, what library was this again?
[17:46:39] <RandomReader> type_info is only useful for selecting among a set of types you already know
[17:46:46] <rpav> i.e. typeinfo isn't reliable across TUs and it doesn't do much else
[17:46:54] <RandomReader> or simply storing it for the sender to look at itself
[17:47:27] <aegon_w> https://github.com/zeromq/libzmq
[17:47:30] <rpav> yeah if you can store actual other metadata about your class, you can do what you want, but you have to build a bit of infrastructure
[17:48:55] <udet> rpav, yes I can
[17:49:50] <PJBoy> aegon_w, is that the same as any of these? https://zeromq.org/get-started/?language=cpp#
[17:50:00] <udet> rpav, I have mor or less full controll. what I would like to avoid, but would do if really neccessary, would be to access compiler specific typeinfo stuff. however, at the moment my code supports only gcc
[17:50:01] <rpav> ok so i think you can't actually _query_ inherited types til like 20 or 23, but you can define your _own_ thing with like, my_type_info<C, Inherited...>
[17:50:21] <PJBoy> or are you using the C interface?
[17:51:10] <aegon_w> i'm using cppzmq to interface with it which is a header only wrapper around the libzmqÂ  c library
[17:51:17] <PJBoy> alrighty
[17:51:33] <PJBoy> well cppzmq *is* available on vcpkg
[17:51:40] <aegon_w> its the same ones as on that site
[17:51:51] <udet> rpav, I thought of that, but I still do not see how to get the offset
[17:51:52] <rpav> udet: but then if you define such, you can make it do whatever you want, including query and/or cast to base classes
[17:51:54] <PJBoy> which could potentially make linking a shit tonne easier
[17:52:05] <aegon_w> i've never used that, maybe its the way to go, i've got the rest of this stuff configured through cmake
[17:52:28] <PJBoy> it does work best through CMake integration
[17:52:32] <PJBoy> so that's a plus
[17:52:36] <mort> ew
[17:53:18] <PJBoy> fact of that matter is not all vcpkg packages are MSBuild compatible
[17:53:40] <rpav> udet: C++ gets the offset; given a void* and a `mytypeinfo<C,...>`, make `mytypeinfo<C,...>::cast<B*>(void* ptr) { static_cast<B*>(reinterpret_cast<C*>(ptr)); }` or whatever
[17:54:18] <rpav> cast is a template of course and that ought to error if you _can't_ cast it
[17:54:52] <udet> mytypeinfo<C,...> still implies, that I have the type available. I could only pass a mytypeinfo.
[17:56:17] <rpav> right the way you do typeinfo is to have a `mytypeinfo` base, and a templated subclass
[17:56:18] <RandomReader> udet - if you have full control, why are you using void* at all?
[17:56:26] <udet> thats pretty much the catch, I have a void pointer where I "know"(if type is not it it shall nullptr) there is a certain type in, and I have everything I could transport as runtimeinformation.
[17:56:30] <rpav> ^ also what RandomReader said
[17:56:33] <RandomReader> just pass a useful type to begin with
[17:57:14] <rpav> even if you have some kind of `any` you shouldn't have a void*
[17:57:17] <aegon_w> should i be extra careful to build the lib and the main project with the same c++ standard target?
[17:58:44] <PJBoy> from what I understand, the main project C++ standard should be >= the lib's
[17:58:49] <udet> rpav, RandomReader give me a sec, I try something with any and godbolt. probably then I can better show my problem
[17:58:58] <rpav> e.g. i wrote an any_ptr that will "type-safely" store a pointer to any type, but it uses custom type info in this way .. you have a base class with virtuals and templated subclass, so when you _store_ it, you store a pointer to the templated subclass as the typeinfo base class
[17:59:01] <PJBoy> c++latest is questionable
[17:59:17] <rpav> if you want special casting stuff from the base, you need some type-as-value handling probably but it should be doable
[17:59:18] <PJBoy> but I think it should work personally
[17:59:28] <PJBoy> but c++20 really should work
[18:03:17] *** Joins: seninha (~seninha@user/seninha)
[18:07:47] <aegon_w> heh, the windows max macro really messes with a lot of the std
[18:08:25] <aegon_w> well, all the std with max
[18:09:44] <aegon_w> i wonder if thats messing up my libzmq build
[18:09:54] <mort> I think, if I was developing for Windows, I would 1) keep everything which uses windows.h in self-contained platform abstraction source files, and 2) include windows.h after all other headers
[18:09:58] <mort> it seems like such a terrible header
[18:10:13] <aegon_w> i'm not even using it, at least not directly
[18:10:15] *** Quits: cm007magnum (~Rheanna@218.78.109.69) (Ping timeout: 252 seconds)
[18:10:25] <aegon_w> i think visual studio just activates all that?
[18:11:16] <udet> RandomReader, rpav https://godbolt.org/z/MxMrhvE9o this is what I want to acheive. I just internally transport things using a void*. Using the compiler's typinfe like for gcc I think class_type_info this should be possible. however I would like to avoid compiler specific stuff
[18:12:11] <rpav> but why void*
[18:12:37] <rpav> ("because i want to" isn't a valid reason)
[18:13:08] <rpav> a more typesafe construct like `any` should kindof already do this for you
[18:13:36] <udet> https://github.com/gcc-mirror/gcc/blob/master/libstdc%2B%2B-v3/libsupc%2B%2B/tinfo.h#L139 << using this is what I want to avoid
[18:13:45] <udet> rpav, that example is using any
[18:13:53] <udet> I creted on godbolt
[18:14:15] <rpav> right
[18:14:19] <RandomReader> udet - yeah, what you want there isn't possible, and would not be with std::any
[18:14:26] <udet> and as you see there, any is not doing dyncasts
[18:14:30] <RandomReader> but if you're using void*, why not just store B* in the first place?
[18:14:48] <aegon_w> huh, msvc is confused about some of my auto's
[18:14:55] *** Joins: artok (~azo@mobile-access-5672c9-83.dhcp.inet.fi)
[18:14:56] <RandomReader> the sender needs to store a type the receiver can use, regardless
[18:15:05] *** Joins: lh_cat (~lh_mouse@mingw-w64/developer/lhmouse)
[18:15:23] <LordKalma> VS "latest" std is not guaranteed ABI compatible, yes. 16.7 is too old at this point for any c++20-ish feature.
[18:15:24] <rpav> if you had a typeinfo that cast to the stored type then dynamic_cast to the desired type it could work
[18:15:29] <udet> I create here some kind of ahred_ptr you could transport without any typeinfo and then retype it. It's mostly due to avoiding circular dependencies at compiletime
[18:15:35] <rpav> you'd still want to wrap this as some kind of `any` but
[18:15:38] <aegon_w> seems like it can't deduce the type of a deleters argument on a shared_ptr with a custom deleter as a lambda
[18:15:43] <RandomReader> shared_pty can already do that, you don't need to recreate it
[18:15:50] <RandomReader> use the aliasing constructor
[18:15:52] <rpav> ^
[18:16:09] <RandomReader> and how on earth does this avoid circular dependencies?
[18:16:15] <RandomReader> you're not even using a dependent type
[18:16:19] *** Joins: callq (~callq@157.41.67.21)
[18:16:22] <udet> rpav, yeah I would not wrap it into any, because there is an own memory management pattern behind which stores some metainformation above the memory frame
[18:16:46] <rpav> i think they mean 'i don't want to #include "C.hpp"' but that's not really a necessity anyway
[18:16:59] <udet> RandomReader, how shared_ptr can do that?
[18:17:00] <rpav> this kind of thing would be useful for some kind of dynamic plugin system, otherwise it's probably overkill
[18:17:16] <udet> rpav, kind of yes
[18:17:32] <rpav> _and_ if you hvae a dynamic plug, you _still_ return a PluginBase*
[18:17:53] <rpav> and it can be owned by the caller, shared/unique_ptr, and it's not a problem because this is why virtual dtors exist
[18:17:58] <udet> https://www.causal-rt.org/ << its for the "special" datatype of this thing
[18:18:11] <rpav> i sense a rabbit hole in which i don't want to look
[18:18:16] *** Quits: lh_mouse_ (~lh_mouse@mingw-w64/developer/lhmouse) (Read error: Connection reset by peer)
[18:18:23] <udet> I love rabbit holes
[18:20:11] <LordKalma> wtf is going on?
[18:20:22] <rpav> what seems to be going on
[18:20:59] <udet> RandomReader, I don't see how shared_ptr's aliasing ctor shall do this trick
[18:21:23] <rpav> you're likely looking for a solution to your solution, rather than a solution to your problem
[18:21:24] <LordKalma> rpav, ignorance, mostly?
[18:21:52] *** Quits: Tokamak_ (~Tokamak@172.58.191.55) (Ping timeout: 268 seconds)
[18:22:09] <RandomReader> shared_ptr can store a pointer that is independent of the what it is owning
[18:22:24] <RandomReader> but I'm still not clear on why you think you can't use B* here
[18:22:45] <rpav> RandomReader: wait what's this
[18:23:05] *** Quits: ezzieyguywuf (~Unknown@user/ezzieyguywuf) (Read error: Connection reset by peer)
[18:23:08] <rpav> as opposed to shared_ptr<Base> s = make_shared<Sub>(); ?
[18:23:21] *** Joins: ezzieyguywuf (~Unknown@user/ezzieyguywuf)
[18:23:57] <RandomReader> that's what I'm asking
[18:24:13] <LordKalma> shared_ptr<Base> s(new Sub); // ?
[18:24:26] <LordKalma> shared_ptr<Base> s(new Sub()); // ?
[18:24:32] <rpav> n-eww
[18:27:00] <RandomReader> the question was to completely erase, which is what I meant with the aliasing constructor, since you can pick any pointer value to store and still maintain ownership of the original
[18:27:35] <rpav> yeah that's what i thought you meant, the "store a pointer .. independent of what it is owning" struck me as different
[18:28:03] <udet> LordKalma, I already have a pointer and do not know thats of type Sub. just having a type_info or whatever I trasport at runtime from the place where I know it is of type Sub
[18:28:05] <RandomReader> but that value still needs meaning of course, and I haven't yet gotten any answer to why B* isn't the appropriate meaning
[18:28:19] *** Joins: Tokamak (~Tokamak@172.58.191.55)
[18:28:28] <LordKalma> udet, that doesn't sound like particularly good code
[18:28:30] <RandomReader> but you haven't explained why you're doing this
[18:28:44] <RandomReader> what *problem* is this solving?
[18:29:26] <RandomReader> I mean we can go in circles talking about how the approach you're fixated on won't work, but it'd be more interesting to solve the real problem instead :P
[18:29:52] *** Quits: callq (~callq@157.41.67.21) (Quit: callq)
[18:31:18] <udet> LordKalma, Not a good code by common pattern, I agree. But I try to define a new kind of pattern which would create circular dependencies at compiletime if I do not manage to transport typeinformation at runtime. what for sure then does not work out at all. however, without supporting polymorphism this pattern works out well by using reinterpret_cast, type hashes and having the very same destination type as the source type was
[18:31:31] <udet> now I want to support polymorphism for obvious reasons
[18:31:44] <RandomReader> what circular dependency does this avoid?
[18:32:05] <RandomReader> both sides still need the type information
[18:32:42] <udet> yes, thats right. but the code inbetween does not
[18:33:15] <udet> source knows type - transport does not know - destination knows
[18:33:35] <RandomReader> sure, that's fine for void*, but it doesn't explain why you're using type_info at all, or what the point of the polymorphism is
[18:33:36] <udet> if transport code would know the type while code using transportcode defines the type...
[18:33:45] <RandomReader> or why you can't use a common type like B*
[18:34:04] <udet> RandomReader, know I'm not using type_info. That was an attempt to support polymorphism
[18:34:10] <udet> -k
[18:34:32] <RandomReader> you just said "without supporting polymorphism this pattern works out well by using reinterpret_cast, type hashes"
[18:34:43] <RandomReader> why type hashes?
[18:34:59] <udet> If I want to support polymorphism for this, I need to somehow get hand on the offset so I shift void* before I reinterpret_cast it
[18:35:10] <RandomReader> you shouldn't be reinterpret_casting anything at all
[18:35:19] <udet> type hashes to ensure, that I do not reinterpret_ast into problems
[18:35:32] <RandomReader> why would you since you have to use the same type on both sides?
[18:35:40] <RandomReader> again, what is the real problem being solved here?
[18:35:40] <udet> SrcT hash == DstT hash -> reinterpret_cast is ok
[18:35:50] <RandomReader> no, static_cast is ok
[18:35:55] <RandomReader> reinterpret_cast is inappropriate
[18:36:39] <udet> well... thats another discussion, but yes static_cast would work out here too, if there were not the thing with memory compatible containers....
[18:37:00] <RandomReader> there's no "if there were not" here
[18:37:07] <RandomReader> to use void* correctly, you static_cast to and from the same time
[18:37:13] <udet> which then need reinterpret_cast. does not matter, the problem at hand is, how to support polymorphism in this scenario
[18:37:13] <RandomReader> that's it, there is nothing else
[18:37:24] <RandomReader> same type*
[18:37:47] <RandomReader> you're still not describing the scenario
[18:37:49] <rpav> "if everything wants a B*, why are you not dealing in B*"
[18:37:58] <RandomReader> and I'm tired of asking, so I'm not participating in this conversation anymore
[18:38:00] <udet> you assume, that I tell all what is around, but thats not true. I try to break down the problem so a meaningful communication is possible in this chat
[18:38:42] <udet> so when I speak of void* in truth thats a pointer inside a templated container which is reinterpret_casted to its different flavours
[18:38:57] <rpav> the problem is you aren't describing your _problem_, you're describing your conceived _solution_, which does not appear to be particularly good
[18:39:01] <udet> and for transport it is casted to container<void>
[18:39:46] <udet> ok, so lets ask then the direct question. I transport a pointer from A to B while code transporting cannot know its type
[18:40:02] <rpav> be more specific about "A" to "B"
[18:40:04] *** Quits: Hello72 (~Hello71@wireguard/contributor/hello71) (Remote host closed the connection)
[18:40:12] <udet> how do I support polymorphism, so that the receiver only know an inherited type but not the original type
[18:40:13] <rpav> also why are you transporting this pointer
[18:40:25] *** Joins: Hello72 (~Hello71@wireguard/contributor/hello71)
[18:40:53] *** Quits: baltazaar (~baltazar@94-21-221-155.pool.digikabel.hu) (Ping timeout: 256 seconds)
[18:41:15] <aegon_w> welp, same unresolved symbols with 2020 in c++20
[18:41:19] <aegon_w> so that was a red herring
[18:41:23] *** Quits: mitch0 (~mitch@94-21-221-155.pool.digikabel.hu) (Ping timeout: 256 seconds)
[18:41:35] <aegon_w> what tools are there to dig into stuff like this further
[18:41:55] <aegon_w> like can i look at the .lib to make sure that symbol is there :?
[18:42:44] <udet> I'm transporting it, because it has to go from a to be. it's kind of a lazy function call. It is called on A, but executed on B. the mechanism which stores the information of which function and its arguments is the transport code. it's a bit like std::function but has more powerful captures which are actually doing something (locking memory)
[18:43:19] <udet> not std::function, lambdas
[18:43:24] <rpav> continued nondescription of the problem and i'm just Â¯\_(ãƒ„)_/Â¯
[18:43:27] <udet> and the capturing mechanism
[18:44:33] <udet> hm.... well. I do not see the point of this. I might just not be able to communicate it properly and for sure noone will go through my code. so thanks but I don't see the point in continuing this
[18:45:44] <RandomReader> aegon_w - dumpbin /exports
[18:45:58] <udet> however, if someone could provide an answer to my initial question, I'd be glad. How to calculate the memory offset of a inherited type havin only runtime information of the derrived type?
[18:46:38] <udet> without accessing compiler specific runtime internals
[18:47:48] <aegon_w> well, i'm dead in the water
[18:48:01] <aegon_w> 8 hours now and its not even compiling
[18:48:07] <aegon_w> jeez
[18:48:20] <aegon_w> afaik i'm not doing anything crazy here
[18:48:57] <aegon_w> maybe i should have started development on windows and moved to unix based systems later?
[18:49:08] <aegon_w> like this is all coded against the stdlib
[18:56:14] <aegon_w> huh, dumpbin /exports is empty
[18:56:33] <aegon_w> er it has, i don't know how to read it, not function names though
[19:00:37] <RandomReader> LangerJan - using the union is standard-UB (although many compilers support it as an extension), and the anonymous struct is also nonstandard .. but as an example in the different of layout when trying to treat the bitfield struct as a single value: https://godbolt.org/z/5ahcP91G1
[19:00:55] <RandomReader> this is essentially big endian vs little endian on powerpc64
[19:01:39] <RandomReader> I don't know if that's what you were going for .. using *either* the bitfields or the flags value, no union, would be fine
[19:03:06] *** Joins: mitch0 (~mitch@188-143-71-34.pool.digikabel.hu)
[19:05:10] <RandomReader> udet - that was the first thing I answered: not possible
[19:10:05] <udet> RandomReader, not possible is not true. at least using compiler internals it is possible. search for __do_upcast in gcc's libsupc++, it is doing exactly that
[19:10:21] <aegon_w> it cant even find the symbols using the one from vcpkg
[19:10:22] <udet> I just would like to have a generic way
[19:11:51] <RandomReader> udet - are you doing this on purpose?
[19:12:08] <udet> how said, dynamic_cast is doing that what I want to do. traversing class hierarch and getting the offsets
[19:12:15] <RandomReader> you asked whether it was possible without accessing compiler specific runtime internals, so I said no, and your response is "but you can, using compiler specific runtime internals!"
[19:12:42] <RandomReader> this is either one hell of a language barrier, or you're trolling
[19:13:02] <udet> purpose? no for sure not. but ok. you meant something else as I understood
[19:14:03] <ashafq> Is there a way to add symbols from a static library to another static library?
[19:14:03] <PJBoy> aegon_w, did you make sure to get the x64 library (if you're building 64-bit code)?
[19:14:23] <PJBoy> vcpkg requires a triplet argument for that
[19:14:23] <ashafq> I am using cmake so I was wondering if there was a portable way of doing this....
[19:15:29] <RandomReader> dynamic_cast is not a library feature, it's a core language feature that is implemented in some compiler-specific way .. it is unrelated to type_info
[19:16:04] <RandomReader> it is not possible to duplicate what it does within the scope of the standard language, since everything about it is compiler specific
[19:17:03] <RandomReader> type_info does not provide or represent any information about polymorphic relationships
[19:19:44] <rpav> trivially, to cast from some given C to a base B, you need to _compile and ship code_ that performs the `cast<C,B>(ptr)`, for all given C and B
[19:19:51] <RandomReader> the typeid operator is what finds the dynamic type (most derived) of a polymorphic object
[19:33:01] *** Joins: skapata (~Skapata@2804:14c:87b0:a6f9:f1f0:a87b:efe3:ebd7)
[19:33:01] *** Quits: skapata (~Skapata@2804:14c:87b0:a6f9:f1f0:a87b:efe3:ebd7) (Changing host)
[19:33:01] *** Joins: skapata (~Skapata@user/skapata)
[19:33:37] *** Joins: Itaru (~DaSH@ro2.flokinet.is)
[19:44:52] *** Quits: aegon_w (~aegon_w@174.127.249.180) (Ping timeout: 256 seconds)
[19:45:31] *** Joins: great_taste (~great_tas@user/great-taste/x-5798414)
[19:53:11] *** Joins: Ivii (~Ivyy@2001:a62:4c3:8e01:dcc8:ad1a:f19b:91b0)
[19:55:01] *** Quits: Guest19 (~Guest19@2601:647:5280:2a50:a4d0:e86d:318c:d3f8) (Quit: Client closed)
[20:03:08] *** Joins: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it)
[20:05:51] <rpav> holy crap i found a use for binary_search
[20:05:56] <rpav> the very next day
[20:07:10] *** Quits: Tokamak (~Tokamak@172.58.191.55) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[20:10:14] *** Quits: szutt (~szutt@116.37.2.145) (Quit: Client closed)
[20:14:32] *** Joins: CodeMouse92 (~CodeMouse@user/codemouse92)
[20:15:58] *** Joins: Tokamak (~Tokamak@172.58.191.55)
[20:22:27] *** Quits: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it) (Quit: Leaving.)
[20:25:01] *** Quits: Itaru (~DaSH@ro2.flokinet.is) (Ping timeout: 240 seconds)
[20:31:00] *** Joins: magla (~gelignite@55d44df1.access.ecotel.net)
[20:40:04] *** Quits: kristjansson_ (sid126207@id-126207.tinside.irccloud.com) ()
[20:40:35] *** Joins: kristjansson (sid126207@id-126207.tinside.irccloud.com)
[20:45:42] *** Quits: kristjansson (sid126207@id-126207.tinside.irccloud.com) ()
[20:46:20] *** Joins: blyat-73 (~hjgkjhgkj@46.235.96.249)
[20:49:50] *** Joins: kristjansson (sid126207@id-126207.tinside.irccloud.com)
[20:52:04] <Alipha> Ignoring virtual inheritance, you could create a map<type_info, map<type_info, std::function<void*(void*)>>> kind of structure which you can populate with lambda that convert a void* holding a D* to a void* holding a B*
[20:52:49] <Alipha> Well, I guess that'd work with virtual inheritance too. My initial thought was to store offsets, which is why I said "ignoring virtual inheritance"
[20:53:10] <rpav> if all you want is a B* any of these schemes would be insane
[20:54:10] <rpav> if you want to cast to arbitrary types, none would be sufficient; if you want to cast to some subset, you don't need any of them either
[20:55:37] *** Quits: Haohmaru (~Haohmaru@195.24.53.110) ()
[20:56:33] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[21:04:50] <ashafq> Is there a channel for cmake?
[21:06:38] *** Joins: gehn (~gehn@user/gehn)
[21:14:42] <SuperNintendoSUX> !give ashafq alis
[21:14:43] <nolyc> SuperNintendoSUX: Error: "alis" is not a valid command.
[21:14:48] <SuperNintendoSUX> :(
[21:14:57] <SuperNintendoSUX> !fs alis
[21:14:57] <nolyc> SuperNintendoSUX: No keys matching "alis" found.
[21:16:41] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[21:18:08] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[21:27:06] *** Quits: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl) (Read error: Connection reset by peer)
[21:27:49] *** Quits: troller (~p@2a02:6b8:0:51e:247d:133b:f0cd:2843) (Ping timeout: 240 seconds)
[21:32:48] *** Joins: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl)
[21:33:50] *** Quits: lh_cat (~lh_mouse@mingw-w64/developer/lhmouse) (Read error: Connection reset by peer)
[21:39:10] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[21:39:19] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[21:39:19] *** ChanServ sets mode: +v npaperbot
[21:40:17] *** Quits: magla (~gelignite@55d44df1.access.ecotel.net) (Quit: Stay safe!)
[21:45:25] <rpav> need a good (non-fixed) sans font that's a bit slim/condensed
[21:48:06] <kalven> https://fonts.google.com/
[21:48:34] *** Quits: great_taste (~great_tas@user/great-taste/x-5798414) (Quit: Client closed)
[21:48:41] <rpav> err, wrong channel btu yeah
[21:48:48] *** Joins: great_taste (~great_tas@user/great-taste/x-5798414)
[21:48:49] <rpav> open sans condensed is pretty good
[21:53:53] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:5016:201a:4e0f:3d82)
[22:06:31] *** Quits: limubs (~Guest31@2001-4dd4-11c2-0-99e-d85a-17ad-fec4.ipv6dyn.netcologne.de) (Ping timeout: 256 seconds)
[22:06:56] <epiktitos[m]> rpav have a look at iosevka and input as well
[22:07:10] <epiktitos[m]> the latter is customizable too
[22:07:12] <rpav> iosevka is fixed no?
[22:07:36] <rpav> oh huh i forgot they had a non-fixed variant, good call
[22:08:03] <rpav> er maybe not
[22:09:51] <epiktitos[m]> by fixed you mean monospaced ?
[22:11:54] <rpav> yeah
[22:11:56] <rpav> fixed-width
[22:12:34] <hnOsmium0001[m]> that's a weird way to call monospaced fonts
[22:12:53] <hnOsmium0001[m]> I thought you were talking about the OpenType variable font thing, i.e. multiple font weights in one otf file
[22:13:49] <rpav> perhaps if you were born in the last half decade
[22:16:12] <epiktitos[m]> I think both iosevka and input provide proportionally spaced variants
[22:17:09] *** Quits: Tokamak (~Tokamak@172.58.191.55) (Read error: Connection reset by peer)
[22:17:20] <rpav> there's a "quasi-proportional" variant (i'm not sure what that means and didn't look it up) but it still came out unfortunately wide ;/
[22:17:51] <rpav> anyway none of this is C++-specific, though iosevka is an excellent coding font (and the one i use actually)
[22:18:36] <epiktitos[m]> I've tried many but always went back to consolas
[22:18:38] <rpav> and i actually use it because it's decently narrow while not feeling too much, but there are tons of great coding fonts available these days
[22:19:00] <rpav> is that the one MS ships?
[22:19:31] <epiktitos[m]> yeah
[22:19:48] <hnOsmium0001[m]> yeah, Consolas is (IMO) exceptionally good at low resolutions compared to other fonts
[22:19:53] <epiktitos[m]> dejavu sans mono and source code pro are also quite similar to consolas
[22:21:05] <hnOsmium0001[m]> rpav: https://ask.libreoffice.org/t/is-there-a-non-proportional-font-which-is-narrow/34251
[22:21:05] <hnOsmium0001[m]> mentions this https://fontlibrary.org/en/font/noto-serif-extracondensed
[22:21:11] <rpav> cool
[22:21:24] <rpav> yeah i like Source Code Pro as well
[22:21:35] <rpav> not sure how its hinting is but
[22:22:20] <hnOsmium0001[m]> wait no that's a serif font
[22:22:35] *** Joins: Tokamak (~Tokamak@172.58.191.55)
[22:22:41] *** Joins: proller (~p@80.240.216.69)
[22:22:44] <rpav> there's a noto sans though
[22:23:23] <rpav> what's weird is when people code with proportional fonts
[22:24:27] *** Joins: magla (~gelignite@55d40eb7.access.ecotel.net)
[22:25:05] <epiktitos[m]> input has a proportionally spaced compressed variant
[22:27:47] *** Joins: john99 (~johnny@138.62.221.87.dynamic.jazztel.es)
[22:28:08] <PJBoy> consolas is good, but its B and 8 are too similar for my liking
[22:30:12] <CodeMouse92> I like Hack as well, as a font
[22:31:03] <CodeMouse92> It's got clear differences between all characters, unlike most fonts I see. (I also like Source Code Pro besides)
[22:33:06] <rpav> CodeMouse92: that is good, has a bit of a vga vibe
[22:33:18] <ville> good thing about linux is that it's difficult to know what font you are using
[22:33:32] *** Joins: paul424 (~tom@ip-37-248-155-206.multi.internet.cyfrowypolsat.pl)
[22:33:32] <kalven> kek
[22:33:43] <rpav> i don't find that particularly difficult myself
[22:34:47] <ville> if you look at across all the applications you're using there are lots of places and ways to specify it, and then depending what the program queries for the fonts you specified it could just be using a fallback anyways
[22:34:57] <ville> err how the
[22:35:01] *** Quits: Leone (~Leo@69-165-148-197.dsl.teksavvy.com) (Ping timeout: 240 seconds)
[22:37:26] <rpav> it may take a bit of work to get consistency depending
[22:38:36] <rpav> most of the time i don't care except wm stuff, editor, and term
[22:39:08] <rpav> in the days of electron BS you're lucky an app can even be customized beyond "scale it a bit" and "choose dark/light theme"
[22:39:25] <ville> and for the most part people are/were using the wrong size fonts on X anyways. to such extend that the X devs had to reverts the fix that made X choose the correct dpi
[22:39:34] <ville> err extent
[22:41:20] <rpav> fonts and dpi and that is about as complicated as rendering text
[22:42:21] <rpav> like, assuming the monitor reports correctly, and the card reports it, and the app gets it, and everything is rendered properly .. then you have fonts scaling poorly and hinting issues
[22:43:02] <rpav> it turns out people prefer consistent look to attempting (and failing) at consistent size
[22:46:41] <PJBoy> I seem to recall it requiring a PhD to work on text rendering code
[22:48:24] <rpav> dunno but afaict it's the the the web really gets right
[22:48:40] <rpav> also fairly painless security these days
[22:49:17] <rpav> not much else you can throw a fairly complicated formatted document full of international text at have basically work with minimal hassle
[22:49:30] *** Quits: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net) (Ping timeout: 268 seconds)
[22:59:43] *** Joins: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net)
[23:00:15] <rpav> it's pretty annoying qt's handling for everything is all over the place
[23:01:01] <rpav> like, you want two buttons to do the same thing .. you have to manually connect them to some thing, despite Qt having QActions
[23:05:25] *** Quits: proller (~p@80.240.216.69) (Ping timeout: 252 seconds)
[23:10:23] *** Joins: Itaru (~DaSH@ro2.flokinet.is)
[23:11:10] *** Joins: zen_coder (~zen_coder@2a02:8109:a280:2d8d:ad12:63d3:cdb6:3c28)
[23:16:50] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[23:16:51] *** Joins: chozorho (~chozorho@2601:146:300:c30::814d)
[23:18:15] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[23:18:44] *** Joins: proller (~p@2a02:6b8:b081:7::1:2f)
[23:30:12] *** Quits: kurfen_ (~kurfen@160.238.38.230) (Quit: ZNC 1.8.2 - https://znc.in)
[23:31:44] *** Joins: kurfen (~kurfen@160.238.38.230)
[23:36:01] *** Joins: kurfen_ (~kurfen@176.119.195.10)
[23:37:10] *** Quits: kurfen (~kurfen@160.238.38.230) (Ping timeout: 265 seconds)
[23:37:33] *** Quits: kurfen_ (~kurfen@176.119.195.10) (Client Quit)
[23:38:07] *** Joins: kurfen (~kurfen@176.119.195.10)
[23:40:51] *** Joins: voltron (~voltrin_@ip4d16bdc6.dynamic.kabel-deutschland.de)
[23:41:28] *** Quits: AmR (~AmREiSa@156.199.223.24) (Quit: Konversation terminated!)
[23:46:08] <LordKalma> !fact
[23:46:09] <nolyc> LordKalma: The ``implicit int'' rule of C is no longer supported.
[23:49:56] *** Quits: Tokamak (~Tokamak@172.58.191.55) (Ping timeout: 268 seconds)
[23:52:22] *** Quits: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Quit: And I'm out.)
[23:52:48] *** Joins: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[23:58:16] <hnOsmium0001[m]> I like the quotes in this !fact
