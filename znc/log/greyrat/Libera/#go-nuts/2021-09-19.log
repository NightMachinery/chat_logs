[00:01:11] *** Joins: Kyros (~kyros@user/kyros)
[00:03:30] *** Quits: bkircher (~bkircher@2001:a61:2444:eb01:b074:a8a9:4db6:bbaa) (Ping timeout: 260 seconds)
[00:03:46] *** Quits: fdan (~fdan@103.215.168.1) (Quit: Client closed)
[00:05:55] *** Joins: shtirlic (~shtirlic@92-100-163-211.dynamic.avangarddsl.ru)
[00:05:59] *** Quits: sizeof_void34 (~Thunderbi@109-252-124-86.nat.spd-mgts.ru) (Quit: sizeof_void34)
[00:06:54] *** Quits: neurocyte01 (~neurocyte@user/neurocyte) (Quit: The Lounge - https://thelounge.chat)
[00:08:59] *** Joins: neurocyte01 (~neurocyte@45.93.111.147)
[00:08:59] *** Quits: neurocyte01 (~neurocyte@45.93.111.147) (Changing host)
[00:08:59] *** Joins: neurocyte01 (~neurocyte@user/neurocyte)
[00:14:08] *** Quits: shtirlic (~shtirlic@92-100-163-211.dynamic.avangarddsl.ru) (Remote host closed the connection)
[00:26:43] *** Joins: brainfreeze (~brainfree@2a03:1b20:4:f011::20d)
[00:33:33] *** Joins: shtirlic (~shtirlic@92-100-163-211.dynamic.avangarddsl.ru)
[00:36:13] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 252 seconds)
[00:38:04] *** Joins: fikran (~fikran@user/fikran)
[00:40:48] *** Joins: LTCD (~LTCD@2a02:c7f:dd1c:b600:d1b:c54c:daa1:5e7c)
[00:42:15] *** Quits: shtirlic (~shtirlic@92-100-163-211.dynamic.avangarddsl.ru) (Remote host closed the connection)
[00:42:40] *** Joins: freakazoid12345 (~matt@2603-9000-cf0f-80e3-6426-6267-f149-9839.inf6.spectrum.com)
[00:44:11] <LTCD> Hey. Could I have some pointers on how to create a GO Lang program which will scan the RAM for specific strings of text? My platform is Alpine Linux.
[00:45:14] *** Joins: c10l (~c10l@user/c10l)
[00:46:13] *** Quits: freakazoid343 (~matt@2603:9000:cf0f:80e3:1c5f:e9b1:6dd5:a47f) (Ping timeout: 268 seconds)
[00:46:55] <ikke> requires root access, but you can open /dev/mem as a file and scan that
[00:46:56] <aws> Open /dev/mem (needs to be root)
[00:52:35] *** Joins: shtirlic (~shtirlic@92-100-163-211.dynamic.avangarddsl.ru)
[00:55:01] <LTCD> Root is not a problem, I can just do sudo
[00:55:18] <LTCD> use sudo*
[00:55:42] <LTCD> ikke I wanted something to constantly scan the memory, like changes.
[00:56:08] <Memory> Oh ok
[00:56:13] <ikke> lol
[00:56:15] <Memory> Youâ€™re welcome to
[00:56:39] <ikke> LTCD: there is nothing that will provide you with changes in memory afaik
[00:56:56] <LTCD> hahaha Memory
[00:57:29] <LTCD> Basically, I am trying to make a safety program, to ensure certain information is never ending up in RAM.
[00:57:55] <LTCD> It is to make sure MemGuard in Github is working properly.
[01:02:49] <ikke> if it's specific processes you want to scan, you can look at /proc/<pid>/maps and /proc/<pid>/mem
[01:05:01] <LTCD> AFAIK I would want to view all memory in real time, to ensure certain strings are not ending up there (if they do then I know MemGuard failed).
[01:05:58] <ikke> that can proof difficult
[01:10:47] <ikke> Hmm, CONFIG_STRICT_DEVMEM is enabled on the alpine lts kernel, so I don't think you can even read all memory
[01:12:45] <ikke> same on archlinux
[01:14:14] *** Joins: jjonah (~jjonah@p200300d5d71aad00dea632fffeb3342f.dip0.t-ipconnect.de)
[01:15:19] *** Quits: plasticmae (~plasticma@cpe-172-249-151-214.socal.res.rr.com) (Quit: Leaving)
[01:15:30] <LTCD> Well, not all memory, but places where data might end up.
[01:16:34] <ikke> well, it amounts to basically none
[01:16:42] <ikke> only PCI mapped memery and bios
[01:17:07] <Memory> Just say mem not memory =}
[01:18:10] *** Quits: mikoto-chan (~mikoto-ch@ip-83-134-2-136.dsl.scarlet.be) (Ping timeout: 260 seconds)
[01:18:15] <ikke> Memory: You kind of deserve it with a name like that :P
[01:19:53] *** Joins: mikoto-chan (~mikoto-ch@83.137.2.250)
[01:20:25] <LTCD> ikke Damn. What is PCI?
[01:20:33] <ikke> hardware
[01:20:54] <LTCD> Like GPIOs, printers etc...?
[01:21:41] <ikke> https://en.wikipedia.org/wiki/Peripheral_Component_Interconnect
[01:23:11] <LTCD> Thank you.
[01:23:47] *** Joins: fuck_ (uid424131@id-424131.ilkley.irccloud.com)
[01:24:37] *** Parts: fuck_ (uid424131@id-424131.ilkley.irccloud.com) ()
[01:24:37] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 252 seconds)
[01:25:13] *** Quits: sharktamer (~sharktame@cpc91312-watf11-2-0-cust697.15-2.cable.virginm.net) (Remote host closed the connection)
[01:29:24] <LTCD> Wait, what if I disabled it - I mean would it cause more problems and security vulnerabilities than I intended to prevent? ikke
[01:30:04] *** Joins: iluxa (~iliaf@user/iluxa)
[01:30:06] <ikke> Any root process would be able to read all (or most) memory
[01:30:21] <ikke> You have to decide for yourself whether you want to take that risk
[01:30:30] <Memory> Sure would
[01:30:43] <ikke> You'd need to compile your own kernel
[01:31:05] <ikke> \https://cateee.net/lkddb/web-lkddb/STRICT_DEVMEM.html
[01:31:22] *** Quits: iliaf (~iliaf@user/iluxa) (Ping timeout: 260 seconds)
[01:33:12] <LTCD> Yeah, and then that introduces a heap of drama?
[01:42:54] *** Joins: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au)
[01:43:25] *** Joins: src_ (~src@user/src)
[01:43:34] *** Quits: src_ (~src@user/src) (Remote host closed the connection)
[01:44:33] <someuser> hello, i have this dict in python and i want to define it as a map in go lang, what's the best data type to do so ? i wanted to do a map but i am confused on how to initalize a netsted map
[01:44:35] <someuser> https://pastebin.com/raw/EEXMvRG4
[01:46:46] *** Quits: src (~src@user/src) (Ping timeout: 252 seconds)
[01:54:37] *** Quits: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net) (Remote host closed the connection)
[01:55:06] *** Joins: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net)
[02:03:29] *** Quits: Deknos (~someone@user/menace) (Quit: Deknos)
[02:03:30] <someuser> how do i define a nested map?
[02:04:25] <A_Dragon> map[str]map[str]str?
[02:05:00] <A_Dragon> or, the correct answer, use a struct
[02:05:16] <A_Dragon> in fact, for that, you must use a struct
[02:06:23] <fizzie> You *can* have a `map[string]interface{}` to represent that same data, but you shouldn't.
[02:14:43] *** Quits: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au) (Ping timeout: 252 seconds)
[02:15:03] <fizzie> Here's both the "half-typed" and "untyped" versions for comparison: https://play.golang.org/p/o3k8FNKyuQ7 -- in practice some of those nested maps might be better as structs as well.
[02:15:47] *** Joins: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com)
[02:19:10] *** Joins: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au)
[02:20:26] <someuser> thank you! that really helps, i will go with struct that has map[string]string is this what you're refering to by half-typed?
[02:21:01] <fizzie> Yeah. (It's not standard terminology or anything, hence the quotes.)
[02:21:53] <b0nn> Huh, what's wrong with a nested struct?
[02:22:09] <someuser> right thank you, and i see the interface method too, also helpful to know of it, why do you not prefer the untyped interface one btw?
[02:25:18] *** Quits: mollerup (~nmollerup@customer-212-237-103-18.ip4.gigabit.dk) (Quit: Leaving)
[02:27:53] <fizzie> A few reasons. It won't catch any errors you might make with the keys, you have to type-assert all the values you pull out from it to the types you "know" them to be (and panic if you get it wrong), tools won't know what fields there are and can't help you write code, and so on.
[02:32:03] *** Quits: ninjin (~ninjin@user/ninjin) (Remote host closed the connection)
[02:32:17] <someuser> i see what you mean, there has been few times were i expect a json response and i decode the res.Body to some map, i always choose the type to be map[string]interface{}, but then the type assertion can be tricky with it's syntax
[02:32:21] *** Joins: ninjin (~ninjin@user/ninjin)
[02:33:30] <someuser> is there a way to map the response type to the correct one ? i can make var responseMap map[string]string and then json.NewDecoder(req.Body).Decode(&responseMap)
[02:33:36] <someuser> but is this the right way of doing it ?
[02:34:53] <fizzie> You can make `var response StructTypeRepresentingTheResponse` as well, and decode straight into it.
[02:35:40] <fizzie> A `map[string]string` will only be correct if the response is really a "flat" JSON object where all the values are strings.
[02:37:06] <fizzie> (Yes, you'd have to declare the `StructTypeRepresentingTheResponse`, but you implicitly have to list the keys and their types anyway when making use of them, a struct type just puts them all nicely together.)
[02:38:54] <someuser> okay that is also something i should be practicing, but i assume that's the case when I'm aware of the response and it's not some huge one that I only need tiny parts of it
[02:38:59] <someuser> thank you :)
[02:39:45] <fizzie> Even if you need tiny parts of it: you can only declare the fields you use.
[02:39:46] *** Quits: normen (~normen@p54b3452e.dip0.t-ipconnect.de) (Ping timeout: 265 seconds)
[02:41:03] <fizzie> By default, "encoding/json" ignores object fields that don't exist in the target, when unmarshalling into a struct. (Unless you explicitly set `DisallowUnknownFields` on the decoder.)
[02:41:09] *** Joins: sharktamer (~sharktame@cpc91312-watf11-2-0-cust697.15-2.cable.virginm.net)
[02:42:33] *** Quits: sharktamer (~sharktame@cpc91312-watf11-2-0-cust697.15-2.cable.virginm.net) (Remote host closed the connection)
[02:43:01] *** Joins: sharktamer (~sharktame@cpc91312-watf11-2-0-cust697.15-2.cable.virginm.net)
[02:45:27] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 268 seconds)
[02:47:25] *** Joins: fikran (~fikran@user/fikran)
[02:48:01] *** Quits: sharktamer (~sharktame@cpc91312-watf11-2-0-cust697.15-2.cable.virginm.net) (Remote host closed the connection)
[02:48:39] *** Joins: sharktamer (~sharktame@cpc91312-watf11-2-0-cust697.15-2.cable.virginm.net)
[02:49:41] *** Joins: k0ta (~k0ta@103.108.94.37)
[02:50:43] *** Quits: sharktamer (~sharktame@cpc91312-watf11-2-0-cust697.15-2.cable.virginm.net) (Remote host closed the connection)
[02:51:19] *** Joins: sharktamer (~sharktame@cpc91312-watf11-2-0-cust697.15-2.cable.virginm.net)
[02:52:36] *** Quits: mrig (~mrig@user/mrig) (Quit: WeeChat 3.2.1)
[02:52:55] *** Quits: sharktamer (~sharktame@cpc91312-watf11-2-0-cust697.15-2.cable.virginm.net) (Remote host closed the connection)
[02:53:16] *** Joins: sharktamer (~sharktame@cpc91312-watf11-2-0-cust697.15-2.cable.virginm.net)
[02:55:34] *** Quits: sharktamer (~sharktame@cpc91312-watf11-2-0-cust697.15-2.cable.virginm.net) (Remote host closed the connection)
[02:56:10] *** Joins: sharktamer (~sharktame@cpc91312-watf11-2-0-cust697.15-2.cable.virginm.net)
[02:56:21] *** Quits: sharktamer (~sharktame@cpc91312-watf11-2-0-cust697.15-2.cable.virginm.net) (Remote host closed the connection)
[02:56:48] *** Joins: sharktamer (~sharktame@cpc91312-watf11-2-0-cust697.15-2.cable.virginm.net)
[03:04:07] *** Quits: andlabs (~andlabs@70.107.171.168) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[03:04:41] <someuser> ty i got what you mean
[03:05:50] *** Joins: andlabs (~andlabs@70.107.171.168)
[03:09:20] *** Joins: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be)
[03:10:00] *** Quits: jjonah (~jjonah@p200300d5d71aad00dea632fffeb3342f.dip0.t-ipconnect.de) (Remote host closed the connection)
[03:11:48] *** Quits: iskarian (~iskarian@ip24-253-39-6.lv.lv.cox.net) (Killed (lead.libera.chat (Nickname regained by services)))
[03:11:58] *** Joins: iskarian (~iskarian@ip24-253-39-6.lv.lv.cox.net)
[03:12:30] *** Joins: normen (~normen@p54b3452e.dip0.t-ipconnect.de)
[03:17:58] *** Quits: zer0bitz (~zer0bitz@dsl-hkibng31-54fafc-123.dhcp.inet.fi) (Ping timeout: 252 seconds)
[03:26:43] *** Quits: normen (~normen@p54b3452e.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[03:38:38] *** Quits: LTCD (~LTCD@2a02:c7f:dd1c:b600:d1b:c54c:daa1:5e7c) (Quit: Client closed)
[03:39:25] *** Quits: int3l (~int3l@78-83-124-208.spectrumnet.bg) (Quit: Shhhhh... Don't cry!)
[03:54:12] *** Quits: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au) (Ping timeout: 265 seconds)
[03:54:40] *** Quits: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net) (Remote host closed the connection)
[03:55:12] *** Joins: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net)
[03:58:44] *** Joins: burningserenity (~burningse@142-196-178-216.res.spectrum.com)
[03:59:52] *** Quits: brainfreeze (~brainfree@2a03:1b20:4:f011::20d) (Quit: Leaving)
[04:04:08] *** Joins: smitop7 (~smitop@user/smitop)
[04:04:37] *** Joins: Compy_ (~compy@user/compy)
[04:04:45] *** Joins: Valentine_ (~valentine@hackerspacesg/valentine)
[04:05:09] *** Joins: nitrix_ (~nitrix@ns569831.ip-51-79-81.net)
[04:05:57] *** Quits: smitop (~smitop@user/smitop) (Quit: Ping timeout (120 seconds))
[04:05:57] *** Quits: Valentine (~valentine@hackerspacesg/valentine) (Quit: Addio, adieu, adios, aloha, arrivederci, auf Wiedersehen, au revoir, bye, bye-bye, cheerio, cheers, farewell, good-by, good-bye, goodbye, good day, sayonara, shalom, so long.)
[04:05:57] *** smitop7 is now known as smitop
[04:05:57] *** Quits: nitrix (~nitrix@user/nitrix) (Quit: Genius is one percent inspiration and ninety-nine percent perspiration)
[04:29:18] *** Joins: gggpkm (~gggpkm@111-251-158-17.dynamic-ip.hinet.net)
[04:39:08] *** Joins: normen (~normen@p200300d7173dc900494f087fd2a2f46e.dip0.t-ipconnect.de)
[04:42:42] *** Joins: yoonkn (~user@175.197.208.79)
[04:46:01] *** Quits: predmijat (~predmijat@mail.strogopro.com) (Quit: bye)
[04:47:36] *** Joins: predmijat (~predmijat@mail.strogopro.com)
[04:55:06] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 265 seconds)
[04:56:47] *** Joins: fikran (~fikran@user/fikran)
[05:08:31] *** Quits: normen (~normen@p200300d7173dc900494f087fd2a2f46e.dip0.t-ipconnect.de) (Ping timeout: 268 seconds)
[05:14:53] *** Joins: kayprish (~kayprish@46.240.130.158)
[05:15:16] *** Quits: kayprish (~kayprish@46.240.130.158) (Remote host closed the connection)
[05:21:59] *** Quits: zwr (~zwr@2804:d45:b966:fb00:880a:1efd:a4cd:a70f) (Remote host closed the connection)
[05:29:56] *** Joins: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au)
[05:34:11] *** Quits: Seirdy (~Seirdy@sourcehut/user/seirdy) (Quit: exiting 3.2)
[05:35:16] *** Joins: Seirdy (~Seirdy@sourcehut/user/seirdy)
[05:42:00] *** Quits: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au) (Quit: WeeChat 3.2.1)
[05:42:14] *** Joins: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au)
[05:44:05] *** Quits: lemonsnicks (~lemonsnic@cpc159519-perr18-2-0-cust114.19-1.cable.virginm.net) (Quit: ZNC 1.8.2 - https://znc.in)
[05:45:04] *** Joins: lemonsnicks (~lemonsnic@cpc159519-perr18-2-0-cust114.19-1.cable.virginm.net)
[05:45:16] *** Joins: tg (~tg@rockylinux/infra/tg)
[05:53:40] *** Quits: paddymahoney (~paddymaho@cpe9050ca207f83-cm9050ca207f80.cpe.net.cable.rogers.com) (Ping timeout: 240 seconds)
[05:54:41] *** Quits: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net) (Remote host closed the connection)
[05:55:21] *** Joins: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net)
[05:56:42] *** Joins: neurocyte013 (~neurocyte@94.46.67.47)
[05:56:43] *** Quits: neurocyte013 (~neurocyte@94.46.67.47) (Changing host)
[05:56:43] *** Joins: neurocyte013 (~neurocyte@user/neurocyte)
[05:57:03] *** Joins: paddymahoney (~paddymaho@cpe9050ca207f83-cm9050ca207f80.cpe.net.cable.rogers.com)
[05:59:05] *** Quits: neurocyte01 (~neurocyte@user/neurocyte) (Ping timeout: 268 seconds)
[05:59:05] *** neurocyte013 is now known as neurocyte01
[05:59:28] *** Quits: foobaz (~oofabz@199.58.97.156) (Quit: ZNC 1.8.2 - https://znc.in)
[06:01:09] *** Joins: voidnoir0_ (uid343973@id-343973.tinside.irccloud.com)
[06:02:14] *** Joins: foobaz (~oofabz@phoenix.frammish.org)
[06:05:40] *** Quits: someuser (~user@192.121.82.5) (Ping timeout: 265 seconds)
[06:08:53] *** Joins: califax- (~califax@user/califx)
[06:12:03] *** Quits: califax (~califax@user/califx) (Ping timeout: 276 seconds)
[06:12:04] *** califax- is now known as califax
[06:18:14] *** Quits: mikoto-chan (~mikoto-ch@83.137.2.250) (Ping timeout: 265 seconds)
[06:20:48] *** Joins: brainfreeze (~brainfree@2a03:1b20:4:f011::20d)
[06:30:56] *** Joins: shtirlic_ (~shtirlic@178.70.143.157)
[06:33:37] *** Quits: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au) (Ping timeout: 268 seconds)
[06:34:00] *** Quits: shtirlic (~shtirlic@92-100-163-211.dynamic.avangarddsl.ru) (Ping timeout: 260 seconds)
[06:34:56] *** Quits: nostalgia (~nostalgia@c-24-13-122-176.hsd1.in.comcast.net) (Remote host closed the connection)
[06:35:13] *** Joins: nostalgia (~nostalgia@2601:243:c600:95f0:22f1:3efe:9b37:299c)
[06:35:42] *** Joins: gggp (~textual@60.10.23.159)
[06:36:18] *** Quits: gggp (~textual@60.10.23.159) (Client Quit)
[06:37:48] *** Joins: orthoplex64 (~crm@70.120.0.94)
[06:45:51] *** Quits: rek2 (~ReK2@static-141-25-231-77.ipcom.comunitel.net) (Quit: WeeChat 3.2.1)
[06:52:36] *** Joins: eruditass (uid248673@id-248673.uxbridge.irccloud.com)
[06:57:49] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[06:57:49] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[06:57:49] *** Joins: wroathe (~wroathe@user/wroathe)
[07:04:56] *** Joins: normen (~normen@p200300d7173dc900494f087fd2a2f46e.dip0.t-ipconnect.de)
[07:04:59] *** Quits: burningserenity (~burningse@142-196-178-216.res.spectrum.com) (Quit: ZNC 1.8.2 - https://znc.in)
[07:05:04] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 268 seconds)
[07:06:43] *** Joins: fikran (~fikran@user/fikran)
[07:38:22] *** Quits: normen (~normen@p200300d7173dc900494f087fd2a2f46e.dip0.t-ipconnect.de) (Ping timeout: 268 seconds)
[07:54:38] *** Quits: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net) (Remote host closed the connection)
[07:54:57] *** Joins: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net)
[08:09:46] *** Quits: TheCoffeMaker (~TheCoffeM@user/thecoffemaker) (Ping timeout: 260 seconds)
[08:09:49] *** Quits: Gnuman (~gnuman@user/gnuman) (Ping timeout: 268 seconds)
[08:10:01] *** Joins: meinside (uid24933@id-24933.helmsley.irccloud.com)
[08:11:37] *** Quits: LogicAside (~LogicAsid@user/logicaside) (Ping timeout: 252 seconds)
[08:16:29] *** Joins: TheCoffeMaker (~TheCoffeM@user/thecoffemaker)
[08:18:10] *** Joins: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au)
[08:20:04] *** Quits: k0ta (~k0ta@103.108.94.37) (Quit: leaving)
[08:21:10] *** Quits: LiftLeft (~LiftLeft@216-26-118-34.dynamic.nelson.airstreamcomm.net) (Ping timeout: 240 seconds)
[08:22:10] *** Joins: Atque (~Atque@user/atque)
[08:24:18] *** Joins: gggp (~textual@60.10.23.159)
[08:24:53] *** Quits: gggp (~textual@60.10.23.159) (Client Quit)
[08:30:19] *** Quits: TheCoffeMaker (~TheCoffeM@user/thecoffemaker) (Ping timeout: 252 seconds)
[08:31:07] *** Joins: Gnuman (~gnuman@user/gnuman)
[08:31:11] *** Joins: TheCoffeMaker (~TheCoffeM@user/thecoffemaker)
[08:31:56] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[08:33:12] *** Joins: LogicAside (~LogicAsid@user/logicaside)
[08:42:09] *** Quits: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com) (Quit: Leaving)
[09:03:30] *** Joins: gggp (~textual@60.10.194.42)
[09:05:39] *** Quits: gggp (~textual@60.10.194.42) (Client Quit)
[09:06:46] *** Quits: gggpkm (~gggpkm@111-251-158-17.dynamic-ip.hinet.net) (Ping timeout: 252 seconds)
[09:06:49] *** Joins: gggp (~textual@60.10.23.159)
[09:09:57] *** Quits: voidnoir0_ (uid343973@id-343973.tinside.irccloud.com) (Quit: Connection closed for inactivity)
[09:11:10] *** Quits: paddymahoney (~paddymaho@cpe9050ca207f83-cm9050ca207f80.cpe.net.cable.rogers.com) (Ping timeout: 252 seconds)
[09:13:08] *** Joins: paddymahoney (~paddymaho@cpe9050ca207f83-cm9050ca207f80.cpe.net.cable.rogers.com)
[09:14:19] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 252 seconds)
[09:14:35] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[09:15:23] <hendry> I used to do a `go get github.com/kaihendry/blog/...` and that's deprecated. However `go install github.com/kaihendry/blog/...` results in go: warning: "github.com/kaihendry/blog/..." matched no packages. How do I fix this to quickly install the latest binaries?
[09:16:06] *** Joins: fikran (~fikran@user/fikran)
[09:23:42] *** Joins: nevivurn (~nevivurn@user/nevivurn)
[09:27:18] *** Quits: arahael (~arahael@118.211.178.62) (Ping timeout: 268 seconds)
[09:28:16] *** Joins: arahael (~arahael@118.211.178.62)
[09:31:40] *** Quits: Compy_ (~compy@user/compy) (Quit: Going offline, see ya! (www.adiirc.com))
[09:33:14] *** Quits: foobaz (~oofabz@phoenix.frammish.org) (Quit: ZNC 1.8.2 - https://znc.in)
[09:34:40] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 252 seconds)
[09:35:35] *** Joins: foobaz (~oofabz@199.58.97.156)
[09:36:11] *** Joins: k0ta (~k0ta@151.210.174.65)
[09:36:17] *** Joins: normen (~normen@p200300d7173dc900494f087fd2a2f46e.dip0.t-ipconnect.de)
[09:37:22] *** Quits: klaas (~klaas@simply.kla.as) (Read error: Connection reset by peer)
[09:39:53] *** Joins: klaas (~klaas@simply.kla.as)
[09:43:56] *** Quits: jpw (~jpw@user/jpw) (Remote host closed the connection)
[09:48:05] *** Joins: jpw (~jpw@user/jpw)
[09:51:09] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[09:51:09] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[09:51:09] *** Joins: wroathe (~wroathe@user/wroathe)
[09:53:03] *** Quits: nitrix_ (~nitrix@ns569831.ip-51-79-81.net) (Changing host)
[09:53:03] *** Joins: nitrix_ (~nitrix@user/nitrix)
[09:53:08] *** nitrix_ is now known as nitrix
[09:55:40] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[10:07:16] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: sdfgsdfg)
[10:07:58] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[10:07:58] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[10:07:58] *** Joins: wroathe (~wroathe@user/wroathe)
[10:08:54] *** Quits: foobaz (~oofabz@199.58.97.156) (Quit: ZNC 1.8.2 - https://znc.in)
[10:09:14] *** Quits: normen (~normen@p200300d7173dc900494f087fd2a2f46e.dip0.t-ipconnect.de) (Ping timeout: 268 seconds)
[10:11:02] *** Joins: foobaz (~oofabz@phoenix.frammish.org)
[10:12:37] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 252 seconds)
[10:17:39] *** Joins: bkircher (~bkircher@2001:a61:2444:eb01:b074:a8a9:4db6:bbaa)
[10:19:38] *** Quits: meinside (uid24933@id-24933.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[10:22:19] *** Quits: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au) (Ping timeout: 265 seconds)
[10:27:51] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[10:43:58] <ikke> try without /... at the end
[10:54:24] *** Quits: zunk (~zunk@h-79-136-122-114.a240.priv.bahnhof.se) (Remote host closed the connection)
[11:21:55] *** Quits: chemsmith (~chemsmith@user/chemsmith) (Ping timeout: 252 seconds)
[11:23:34] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 252 seconds)
[11:25:30] *** Joins: fikran (~fikran@user/fikran)
[11:30:42] *** Quits: brainfreeze (~brainfree@2a03:1b20:4:f011::20d) (Remote host closed the connection)
[11:36:24] *** Quits: gggp (~textual@60.10.23.159) (Ping timeout: 268 seconds)
[11:47:42] *** Joins: mrig (~mrig@user/mrig)
[11:48:22] *** Quits: monoxane (~monoxane@119-18-17-227.771211.mel.static.aussiebb.net) (Ping timeout: 252 seconds)
[11:50:21] *** Joins: sizeof_void34 (~Thunderbi@109.252.124.86)
[11:54:41] *** Quits: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net) (Remote host closed the connection)
[11:55:05] *** Joins: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net)
[11:57:32] *** Joins: gggp (~textual@114.245.104.163)
[12:08:20] *** Quits: Tv_ (uid62079@user/tv/x-3144562) (Quit: Connection closed for inactivity)
[12:09:38] *** Joins: normen (~normen@p200300d7173dc900494f087fd2a2f46e.dip0.t-ipconnect.de)
[12:09:47] *** Quits: cim (~cim@205.185.117.110) (Quit: The Lounge - https://thelounge.chat)
[12:10:19] *** Joins: cim (~cim@205.185.117.110)
[12:14:36] *** Joins: bomb (~bomb@user/bomb)
[12:18:33] <bomb> generiks bad
[12:22:02] *** Joins: chripell (~chripell@host-79-20-15-48.retail.telecomitalia.it)
[12:38:47] *** Quits: wolfdale (~wolfdale@ec2-3-1-90-26.ap-southeast-1.compute.amazonaws.com) (Quit: The Lounge - https://thelounge.chat)
[12:38:59] *** Joins: jjonah (~jjonah@p200300d5d71aad00dea632fffeb3342f.dip0.t-ipconnect.de)
[12:39:10] *** Quits: normen (~normen@p200300d7173dc900494f087fd2a2f46e.dip0.t-ipconnect.de) (Ping timeout: 260 seconds)
[12:39:38] *** Joins: wolfdale (~wolfdale@ec2-3-1-90-26.ap-southeast-1.compute.amazonaws.com)
[12:40:52] *** Joins: dsrt^ (~dsrt@68.101.54.227)
[12:43:38] *** Quits: cp- (~cp-@b157153.ppp.asahi-net.or.jp) (Read error: Connection reset by peer)
[12:51:19] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: sdfgsdfg)
[12:52:06] *** Quits: gggp (~textual@114.245.104.163) (Ping timeout: 260 seconds)
[12:54:41] *** Joins: normen (~normen@p200300d7173dc900fde3c9a880da5cc5.dip0.t-ipconnect.de)
[13:06:23] *** Joins: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au)
[13:08:51] *** Joins: mosen (~mosen@159-196-125-15.9fc47d.syd.static.aussiebb.net)
[13:12:26] *** Joins: gggp (~textual@114.245.104.159)
[13:16:41] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[13:25:27] <bomb> can you recommend a library to make REST APIs in Go?
[13:32:29] <welt> > <bomb> can you recommend a library to make REST APIs in Go?
[13:32:29] <welt> net/http
[13:33:10] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 260 seconds)
[13:33:22] <bomb> welt: hmm. it should be just fine, you say?
[13:33:56] <welt> And github.com/julienschmidt/httprouter
[13:34:51] <bomb> ah, I was thinking of Gorilla Mux. it was popular 8 years ago
[13:34:53] *** Joins: fikran (~fikran@user/fikran)
[13:36:48] <welt> bomb The general consensus I get is that the standard library is good enough for 99% of use-cases. I'm inclined to agree. There's a lot of stuff built around it that you can take advantage of.
[13:38:49] <welt> You should stick with the standard library unless there's a specific reason to switch.
[13:54:58] *** Quits: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net) (Remote host closed the connection)
[13:55:10] *** Joins: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net)
[13:59:15] *** Joins: prologic (~prologic@mail.mills.io)
[13:59:39] <prologic> Are deferred functions guaranteed to be called?
[13:59:49] <b0nn> no
[14:00:15] <prologic> damn
[14:00:16] <b0nn> os.Exit and something else I forget off the top of my head will cause the defer list to not be executed
[14:00:46] <ikke> segfaults I suppose
[14:00:56] <prologic> Yeah I have 4 out of some hundreds of instances where it seems like it's not getting called
[14:05:18] <b0nn> .Fatal was the other call that stops without running defers
[14:06:36] <b0nn> I presume segfaults and external signals will stop the runtime without running the defers, but I was only thinking of the two calls inside the runtime that could end things without the defers being run
[14:06:36] <prologic> All cases that I'm not hitting
[14:06:42] <bomb> thanks welt I'm looking into net/http right now
[14:06:52] <prologic> But I'll refactor the grouting code to not use defer and see if that's what I'm seeing
[14:06:55] <bomb> I think I'll need a book on "devops" with Go. I've been away from the game for a while :)
[14:06:59] <b0nn> As I say this I think the third option is the main thread exiting without the goroutines exiting
[14:09:01] <hendry> ikke: go install: github.com/kaihendry/blog/@latest: argument must be a clean package path # maybe ... / wildcards don't exist? Gotta name binaries explicity?
[14:10:23] *** Quits: gggp (~textual@114.245.104.159) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[14:10:32] <ikke> It only works for main packages
[14:10:38] <ikke> go install github.com/kaihendry/blog@latest
[14:10:45] <ikke> go install: package github.com/kaihendry/blog is not a main package
[14:10:50] <ikke> Just clone the project
[14:10:56] *** Joins: gggpkm (~gggpkm@111-251-158-17.dynamic-ip.hinet.net)
[14:21:26] *** Joins: fdan (~fdan@103.215.168.1)
[14:39:20] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: sdfgsdfg)
[14:39:24] *** Quits: jomag (~jonatan@31-209-59-170.cust.bredband2.com) (Read error: Connection reset by peer)
[14:39:40] *** Quits: fdan (~fdan@103.215.168.1) (Quit: Client closed)
[14:40:50] *** Quits: tg (~tg@rockylinux/infra/tg) (Ping timeout: 260 seconds)
[14:41:18] *** Parts: prologic (~prologic@mail.mills.io) (Textual IRC Client: www.textualapp.com)
[14:41:50] *** Joins: hexfive (~eric@50.35.83.177)
[14:43:12] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[14:44:34] *** Quits: hexfive (~eric@50.35.83.177) (Client Quit)
[14:46:12] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Client Quit)
[14:51:32] *** Quits: k0ta (~k0ta@151.210.174.65) (Ping timeout: 265 seconds)
[14:55:26] <bomb> oh, how could I forget Go has a built-in template engine :)
[15:00:41] *** Quits: jjonah (~jjonah@p200300d5d71aad00dea632fffeb3342f.dip0.t-ipconnect.de) (Remote host closed the connection)
[15:02:15] *** Quits: con3 (~con3@2604:a880:4:1d0::be:d000) (Quit: ZNC 1.8.2 - https://znc.in)
[15:04:45] <SoF> could someone explain to me how licenses work with go modules/requirements? I.e. can my MIT-licensed project use a GPL-licensed dependency in go.mod?
[15:05:06] <SoF> I think yes, because I don't actually redistribute the files? is that how that works?
[15:08:36] <bomb> "GPL-licensed dependency" gives me goosebumps already
[15:09:18] <bomb> it's contagious, you wouldn't want to touch it.
[15:09:53] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[15:26:48] <SoF> so just having a link in my go.mod means I must release the source code of my project as AGPL as well?
[15:28:46] <Sam> If you just distribute source it's fine to link to a GPL project, if you distribute a binary then you're also distributing that GPL project, so then you'd have to change your thing to be GPL. I am not a lawyer though.
[15:29:14] <SoF> Sam: thank you!
[15:30:07] <ikke> There is a lot of FUD around GPL
[15:32:15] <bomb> rightfully
[15:33:01] <SoF> Sam: is the reason behind that discrepancy (just source code can be MIT, binary must be GPL), that with source code I can inspect and see that it uses some GPL licensed code, but if it was a binary I couldn't (not always, anyway)?
[15:33:04] <Sam> I'm with the other person that replied, I'd avoid it if at all possible. It will limit what you can do with your own code in the future if you ever need to vendor things or distribute a binary.
[15:33:45] <Sam> SoF: no, it's just about distribution. If you're just distributing source code you're only distributing a link to the GPL project. If you're distributing a binary their code is actually built in object form and included so you're distributing it.
[15:34:21] <SoF> how about "vendor things" - is it fine to vendor GPL source in my MIT source if I just distribute the source?
[15:34:35] <Sam> No, vendoring is also distributing the GPL code and you'd need to relicense your stuff most likely
[15:35:13] <SoF> I see
[15:35:20] <bomb> which GPL library you wanted to use, by the way? maybe we can find a non-GPL alternative
[15:35:40] <SoF> https://github.com/juruen/rmapi AGPL
[15:36:05] <SoF> I mostly asked because I found a popular repo that vendors rmapi's source but is licensed as MIT
[15:36:12] <SoF> so that is a license violation, correct?
[15:36:18] <SoF> https://github.com/jessfraz/morningpaper2remarkable/tree/master/vendor/github.com/juruen/rmapi
[15:36:29] <Sam> oooh, that's not GPL, that's AGPL. That's even stricter IIRC
[15:36:40] <SoF> yeah, it is from what I've heard
[15:37:11] <Sam> I would assume that's a license violation, but I am not a lawyer. And it only matters if the other author decides to care and file a complaint.
[15:37:30] <SoF> I see, thank you :)
[15:42:17] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 265 seconds)
[15:42:49] *** Joins: monoxane (~monoxane@119-18-17-227.771211.mel.static.aussiebb.net)
[15:42:57] *** Joins: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com)
[15:44:15] *** Joins: fikran (~fikran@user/fikran)
[15:44:43] <ikke> AGPL is GPL, but it also applies if you just offer it as a service over the network
[15:45:00] *** Joins: kupi (uid212005@id-212005.hampstead.irccloud.com)
[15:45:06] <ikke> (And the clause that you have to let your users know that this is the case)
[15:49:47] <SoF> ahd and btw, since I am allowed to redistribute my library's source as MIT, every user of my library would have to check my library's dependency tree to find the strongest license (e.g. the (A)GPL license), if he wanted to distribute the binary, correct?
[15:50:07] <SoF> ahd ah*
[15:50:46] <Sam> i think so, yes
[15:50:59] <bomb> I'm not sure, to be honest. it's like, you're releasing a codebase that is illegal to compile?
[15:51:02] <ikke> MIT and GPL are considered compattible
[15:51:25] <bomb> oh, right
[15:52:07] *** Quits: x28girl (~x28girl@181.46.32.25) (Quit: Leaving)
[15:52:09] <SoF> ikke: I understood that as "I can use MIT projects in my GPL project", is there more to "compatible" than that?
[15:52:31] <SoF> (i.e. how does it relate to my question)
[15:53:04] <bomb> if it wasn't compatible, you wouldn't legally mix the two
[15:53:15] <Sam> It also means you can link to the GPL project from your MIT project, but as soon as you build a binary the work as a whole must use the GPL terms, IIRC
[15:53:18] <ikke> GPL has clauses that say that you are not allowed to add any additional restrictions
[15:53:39] <SoF> oh, so are AGPL and GPL incompatible?
[15:53:47] <SoF> re: additional restrictions
[15:54:52] <Sam> All of this is exactly why you shouldn't use the GPL though. Normal people can't use them without confusing themselves and screwing up and risking being sued :) I mean, hopefully a good project maintainer wouldn't sue someone acting in good faith, the point is to just stop giant companies from abusing your work, but it opens you up to that. There's got to be a better way to stop big companies while not hurtin
[15:54:52] <Sam> g tiny projects that just want to use some code from a few sources.
[15:54:53] *** Quits: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net) (Remote host closed the connection)
[15:55:07] <ikke> "Please note that the GNU AGPL is not compatible with GPLv2. It is also technically not compatible with GPLv3 in a strict sense"
[15:55:10] <ikke> https://www.gnu.org/licenses/license-list.en.html
[15:55:18] *** Joins: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net)
[15:55:33] <ikke> GPL for applications can make sense, for libraries not so much imho
[15:56:33] *** Joins: int3l (~int3l@78-83-124-208.spectrumnet.bg)
[15:57:07] <Sam> I hate to contribute to license proliferation, so I haven't started doing it, but I wonder if using any old open source license along with something like the commons clause (https://commonsclause.com/) would give you the same protections against abuse by companies but without making everything so complicated for small projects
[15:57:10] <bomb> yeah, it basically shouts "this is demo version, buy our commercial product"
[15:57:20] <bomb> LGPL is a lil bit nicer one
[15:58:06] *** Joins: x28girl (~x28girl@181.46.32.25)
[16:00:31] <ikke> For libraries definitely
[16:04:43] <SoF> thanks everyone
[16:07:14] *** Joins: tg (~tg@rockylinux/infra/tg)
[16:12:07] *** Joins: frost (~frost@59.71.243.104)
[16:16:20] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: sdfgsdfg)
[16:24:47] *** Quits: jpw (~jpw@user/jpw) (Ping timeout: 268 seconds)
[16:40:55] *** Joins: LiftLeft (~LiftLeft@216-26-118-34.dynamic.nelson.airstreamcomm.net)
[16:48:48] *** Quits: x28girl (~x28girl@181.46.32.25) (Quit: Leaving)
[16:49:49] *** Joins: x28girl (~x28girl@181.46.32.25)
[16:51:04] *** Quits: x28girl (~x28girl@181.46.32.25) (Changing host)
[16:51:04] *** Joins: x28girl (~x28girl@user/x28girl)
[16:53:45] *** Joins: x28_girl (~x28girl@user/x28girl)
[16:54:10] *** Quits: tg (~tg@rockylinux/infra/tg) (Ping timeout: 252 seconds)
[16:56:42] *** Joins: tg (~tg@rockylinux/infra/tg)
[17:08:50] *** Joins: jasper_ (~user@styria.daemonized.org)
[17:11:49] *** Joins: Compy_ (~compy@user/compy)
[17:22:16] *** Quits: gggpkm (~gggpkm@111-251-158-17.dynamic-ip.hinet.net) (Remote host closed the connection)
[17:23:15] *** Joins: gggp (~textual@60.10.194.42)
[17:23:43] *** Quits: Aye (jeda@hellomouse/dev/cryb.jeda) (Quit: //System Offline//)
[17:23:45] *** Joins: mikoto-chan (~mikoto-ch@ip-83-134-2-136.dsl.scarlet.be)
[17:26:51] *** Quits: mikoto-chan (~mikoto-ch@ip-83-134-2-136.dsl.scarlet.be) (Read error: Connection reset by peer)
[17:27:19] *** Joins: mikoto-chan (~mikoto-ch@ip-83-134-2-136.dsl.scarlet.be)
[17:36:50] *** Joins: jpw (~jpw@user/jpw)
[17:39:15] *** Quits: shtirlic_ (~shtirlic@178.70.143.157) (Ping timeout: 265 seconds)
[17:44:31] *** Quits: lazyreader (~lazyreade@ec2-34-222-196-228.us-west-2.compute.amazonaws.com) (Quit: The Lounge - https://thelounge.chat)
[17:45:37] *** Joins: lazyreader (~lazyreade@ec2-34-222-196-228.us-west-2.compute.amazonaws.com)
[17:46:18] *** Joins: amahl (~amahl@dsl-jklbng12-54fbca-64.dhcp.inet.fi)
[17:46:55] *** Quits: gggp (~textual@60.10.194.42) (Ping timeout: 252 seconds)
[17:49:05] *** Joins: gggp (~textual@60.10.194.42)
[17:50:48] *** Quits: mikoto-chan (~mikoto-ch@ip-83-134-2-136.dsl.scarlet.be) (Read error: Connection reset by peer)
[17:51:10] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 240 seconds)
[17:53:37] *** Joins: fikran (~fikran@user/fikran)
[17:54:36] *** Quits: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net) (Remote host closed the connection)
[17:54:55] *** Joins: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net)
[17:56:22] *** Joins: zwr (~zwr@2804:d45:b966:fb00:f6d8:f006:581a:3a74)
[17:56:36] *** Joins: mikoto-chan (~mikoto-ch@ip-83-134-2-136.dsl.scarlet.be)
[18:02:04] *** Joins: xrj (~av@xn--andreasvlker-cjb.de)
[18:02:23] *** Quits: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com) (Quit: Leaving)
[18:03:34] *** Joins: X-Scale` (~ARM@50.77.166.178.rev.vodafone.pt)
[18:03:44] <seebs> you're allowed to offer a thing that you make available under GPL also under less restrictive terms. I have a thing which includes a chunk of GPLv3 code, which I should probably replace, but in the mean time the thing is available under GPLv3, but also my code part of it is available under any terms you like, I don't care.
[18:04:52] *** Quits: X-Scale (~ARM@83.223.227.181) (Ping timeout: 265 seconds)
[18:05:09] <ikke> Yes, but effectively it means your code is GPLv3 if you combine it, otherwise you are not allowed to redistribute it
[18:05:18] *** X-Scale` is now known as X-Scale
[18:05:25] *** Joins: shka (~herr@109.231.62.239)
[18:05:43] <seebs> i mean, there exists a combination. someone who wants to copy my code out of that and distribute it under MIT terms without GPLv3 terms is allowed to.
[18:05:54] <ikke> indeed
[18:11:48] *** Quits: int3l (~int3l@78-83-124-208.spectrumnet.bg) (Quit: Bella Chao)
[18:14:56] *** Joins: X-Scale` (~ARM@46.50.5.115)
[18:16:04] *** Quits: X-Scale (~ARM@50.77.166.178.rev.vodafone.pt) (Ping timeout: 252 seconds)
[18:16:22] *** X-Scale` is now known as X-Scale
[18:17:50] *** Quits: tachoknight (~tachoknig@2600:1700:3060:3ee0:a484:fed4:af15:fa66) (Quit: Some random bits)
[18:34:47] *** Quits: kupi (uid212005@id-212005.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[18:38:10] *** Quits: frost (~frost@59.71.243.104) (Quit: Connection closed)
[18:38:28] *** Joins: src (~src@user/src)
[18:45:45] <bomb> can you recommend a Go book?
[18:46:35] <bomb> I can't stop the urge to buy the infamous "Head First Go" :)
[19:00:59] *** Quits: x28_girl (~x28girl@user/x28girl) (Quit: Leaving)
[19:03:58] *** Quits: gggp (~textual@60.10.194.42) (Ping timeout: 252 seconds)
[19:08:33] *** Joins: nperez_ (~nperez@86-93-223-59.fixed.kpn.net)
[19:10:21] *** Joins: gggp (~textual@60.10.194.42)
[19:10:38] *** Joins: burningserenity (~burningse@142-196-178-216.res.spectrum.com)
[19:11:04] *** Quits: nperez (~nperez@86-93-223-59.fixed.kpn.net) (Ping timeout: 252 seconds)
[19:12:04] *** Joins: nperez__ (~nperez@86-93-223-59.fixed.kpn.net)
[19:13:22] *** Quits: nperez_ (~nperez@86-93-223-59.fixed.kpn.net) (Ping timeout: 260 seconds)
[19:17:10] *** Quits: yoonkn (~user@175.197.208.79) (Remote host closed the connection)
[19:22:00] *** Joins: paulgrmn (~paulgrmn@user/paulgrmn)
[19:25:17] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[19:25:17] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[19:25:17] *** Joins: wroathe (~wroathe@user/wroathe)
[19:33:33] <SoF> seebs: thanks, that just answered a question I was about to ask
[19:33:36] *** Joins: zer0bitz (~zer0bitz@dsl-hkibng31-54fafc-123.dhcp.inet.fi)
[19:38:05] *** Quits: gggp (~textual@60.10.194.42) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[19:42:58] *** Joins: someuser (~user@41.43.46.6)
[19:43:33] *** Joins: freakazoid333 (~matt@2603:9000:cf0f:80e3:68dd:d0eb:264c:fcf7)
[19:46:02] *** Quits: freakazoid12345 (~matt@2603-9000-cf0f-80e3-6426-6267-f149-9839.inf6.spectrum.com) (Ping timeout: 268 seconds)
[19:59:36] *** Quits: normen (~normen@p200300d7173dc900fde3c9a880da5cc5.dip0.t-ipconnect.de) (Ping timeout: 268 seconds)
[20:00:23] <SoF> different question - would it be acceptable to have both a GPLv3 licensed version and a MIT licensed version of my project at the same time? that way I could use the GPLv3 licensed version to distribute a binary, but users could still use parts of my own code under MIT
[20:00:46] <SoF> (^still in the context of having a GPLv3 licensed dependency)
[20:00:53] <ikke> yes, mutlilicensing is a thing
[20:01:14] <ikke> But, having it just as MIT means they can still combine it with GPL code
[20:01:18] <seebs> I'm not a lawyer. There's a lot of people associated with FSF who will be very aggressive about suggesting that you can never use other licenses for your code if it's been shipped with GPL code or whatever, or even if it just *relies* on GPL code.
[20:01:21] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 265 seconds)
[20:01:24] <seebs> But so far as I know they're wrong.
[20:01:40] *** Quits: moldorcoder7 (~moldorcod@37.120.143.28) (Ping timeout: 252 seconds)
[20:01:49] <seebs> The example they used to give was a program which can be built to use readline, and their claim was that since readline was GPL, the code can't run without a GPLd thing, therefore has to be GPL also.
[20:01:55] <SoF> ikke: do you have any examples of such multilicensed projects I could look at?
[20:02:01] <seebs> But actually there's a non-GPL API-compatible readline that someone posted to usenet so hah.
[20:02:06] <Sam> Yah, also not a lawyer but that is just wrong.
[20:02:14] <Sam> You can license code even if it doesn't work, it's still your code.
[20:02:32] <seebs> Some companies make commercial products available to other people as GPL, and *also* as their own proprietary binaries, for example.
[20:02:52] <Sam> I wonder if the Oracle v Google case influences this. Maybe they could argue that the API you use is GPL or something. I hope not, but it sounds like something the FSF would do.
[20:02:59] *** Joins: fikran (~fikran@user/fikran)
[20:03:20] <Sam> (in the U.S. anyways, not that that controls anywhere else)
[20:03:26] <SoF> seebs: how does that company example work, the one with one GPL version and one proprietary binary version?
[20:03:56] <seebs> I mean, if I understand it correctly (again, not a lawyer), it works because it's their code and they don't need a license to do anything they want with it.
[20:04:22] <seebs> So they can say "here are terms under which *you* are allowed to use this code", but also *they* can do anything they want with it. Such as building binaries, which they also own, and which they can give to people under any terms they want.
[20:04:33] <SoF> ah my bad, I thought this was in the context of them using a third-party, GPL library
[20:04:43] <SoF> but the way you explained it makes sense.
[20:05:24] <seebs> Yeah. As long as it's their own code, they can make up a new license every time they ship it or something.
[20:05:44] <ikke> It's different when they accept contributions from others though
[20:05:53] <seebs> My favorite recently-seen licenses are (1) a license that does not give you permission to use the code, at all, for any reason or in any way, used on a Go monkeypatching library (and quite reasonably so), and (2) a license the terms of which are "Be gay. Do crimes."
[20:05:57] <ikke> So that's usually why there are multiple licenses
[20:06:41] *** Joins: normen (~normen@p200300d7173dc900fde3c9a880da5cc5.dip0.t-ipconnect.de)
[20:06:46] <SoF> seebs: re monkeypatching: as a 'joke'?
[20:06:58] *** Quits: twaapo (glxblt@91-152-242-177.elisa-laajakaista.fi) (Quit: WeeChat 3.1)
[20:07:01] <SoF> looking at the second license, it seems yes, haha
[20:07:56] *** Joins: moldorcoder7 (~moldorcod@37.120.143.28)
[20:08:56] <ikke> SoF: It's just a PoC, they do not want anyone to actually use it
[20:09:54] <SoF> yes I see
[20:11:09] <seebs> to clarify those licenses were on different projects
[20:11:25] <seebs> and i think the intent of the "be gay. do crimes." license is that most of the writer's friends are already in compliance one way or another. :P
[20:18:15] <SoF> sometimes one implies the other :)
[20:22:26] *** Quits: normen (~normen@p200300d7173dc900fde3c9a880da5cc5.dip0.t-ipconnect.de) (Ping timeout: 260 seconds)
[20:23:21] *** Joins: normen (~normen@p200300d7173dc900fde3c9a880da5cc5.dip0.t-ipconnect.de)
[20:24:56] *** Quits: paulgrmn (~paulgrmn@user/paulgrmn) (Ping timeout: 252 seconds)
[20:38:31] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 252 seconds)
[20:40:22] *** Joins: fikran (~fikran@user/fikran)
[20:58:46] *** Quits: jespada (~jespada@2803:9800:9842:7a62:e945:15a6:5467:94f6) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[21:07:50] *** Quits: califax (~califax@user/califx) (Remote host closed the connection)
[21:09:07] *** Joins: califax (~califax@user/califx)
[21:25:38] *** Joins: c10l0 (~c10l@user/c10l)
[21:28:48] *** Quits: c10l (~c10l@user/c10l) (Ping timeout: 268 seconds)
[21:28:48] *** c10l0 is now known as c10l
[21:29:25] *** Joins: iliaf (~iliaf@user/iluxa)
[21:30:44] *** Quits: iluxa (~iliaf@user/iluxa) (Ping timeout: 260 seconds)
[21:46:32] *** Joins: Guest25 (~Guest25@79.191.111.170.ipv4.supernova.orange.pl)
[21:54:37] *** Quits: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net) (Remote host closed the connection)
[21:55:04] *** Joins: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net)
[22:02:48] *** Joins: anotheruser (~user@45.148.7.7)
[22:06:03] *** Quits: someuser (~user@41.43.46.6) (Ping timeout: 265 seconds)
[22:08:06] *** Quits: ugjka (~ugjka@ugjka.net) (Quit: Rabooting the server https://ugjka.net)
[22:08:41] *** Joins: ugjka (~ugjka@ugjka.net)
[22:09:40] *** Quits: normen (~normen@p200300d7173dc900fde3c9a880da5cc5.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[22:09:48] *** Joins: jespada (~jespada@2803:9800:9842:7a62:edd5:5e74:3ec2:1b19)
[22:19:40] *** Joins: normen (~normen@p200300d7173dc9007c1001738e22eaea.dip0.t-ipconnect.de)
[22:23:54] *** Quits: hwm4rgs (~hwm4rgs@user/hwm4rgs) (Quit: Bye.)
[22:24:27] *** Joins: hwm4rgs (~hwm4rgs@user/hwm4rgs)
[22:28:07] *** Quits: burningserenity (~burningse@142-196-178-216.res.spectrum.com) (Ping timeout: 252 seconds)
[22:35:49] *** Quits: neurocyte01 (~neurocyte@user/neurocyte) (Ping timeout: 252 seconds)
[22:48:06] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 265 seconds)
[22:49:44] *** Joins: fikran (~fikran@user/fikran)
[22:51:01] *** Joins: Atque (~Atque@user/atque)
[22:58:41] *** Quits: jpw (~jpw@user/jpw) (Remote host closed the connection)
[22:59:18] *** Joins: Everything (~Everythin@37.115.210.35)
[22:59:54] *** Joins: jpw (~jpw@user/jpw)
[23:05:52] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[23:08:23] *** Joins: fdan (~fdan@103.215.168.1)
[23:21:26] <dostoyevsky2> > Load average: 30.70
[23:21:33] <FUZxxl> o.O
[23:21:40] *** Quits: califax (~califax@user/califx) (Remote host closed the connection)
[23:21:42] <dostoyevsky2> building go uses all the available CPUs...
[23:22:52] *** Joins: califax (~califax@user/califx)
[23:25:58] *** Quits: x28girl (~x28girl@user/x28girl) (Ping timeout: 268 seconds)
[23:26:56] <dostoyevsky2> does go use a special buildtool for itself or is go's compiler always using all available cpus?
[23:36:03] *** Joins: x28girl (~x28girl@user/x28girl)
[23:37:34] *** Quits: be3uykpy (~be3uykpy@2a00:a040:19a:b060:e075:fc2f:468:25fc) (Read error: Connection reset by peer)
[23:38:30] *** Quits: mikoto-chan (~mikoto-ch@ip-83-134-2-136.dsl.scarlet.be) (Read error: Connection reset by peer)
[23:38:35] *** Joins: mikoto-c1 (~mikoto-ch@ip-83-134-2-136.dsl.scarlet.be)
[23:39:54] <FUZxxl> dostoyevsky2: The Go compiler follows GOMAXPROCS
[23:40:03] <FUZxxl> it tries to do things in parallel
[23:40:23] <FUZxxl> you can use the -p operand to reduce the amount of parallel execution
[23:41:24] *** Quits: j0be (~j0be@user/j0be) (Quit: times up...)
[23:42:57] *** Quits: Jigsy (~Jigsy@user/jigsy) (Ping timeout: 245 seconds)
[23:46:11] *** Joins: Jigsy (~Jigsy@user/jigsy)
[23:48:02] *** Quits: Guest25 (~Guest25@79.191.111.170.ipv4.supernova.orange.pl) (Quit: Client closed)
[23:49:02] *** Joins: paulgrmn (~paulgrmn@user/paulgrmn)
[23:49:09] *** Quits: mikoto-c1 (~mikoto-ch@ip-83-134-2-136.dsl.scarlet.be) (Quit: mikoto-c1)
[23:49:21] *** Joins: mikoto-chan (~mikoto-ch@ip-83-134-2-136.dsl.scarlet.be)
[23:53:56] *** Quits: paulgrmn (~paulgrmn@user/paulgrmn) (Ping timeout: 268 seconds)
[23:54:44] *** Quits: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net) (Remote host closed the connection)
[23:55:13] *** Joins: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net)
[23:57:53] *** Quits: dsrt^ (~dsrt@68.101.54.227) (Remote host closed the connection)
