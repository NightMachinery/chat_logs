[00:02:11] *** Quits: wallymathieu (~wallymath@81-234-151-21-no94.tbcn.telia.com) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[00:09:26] *** Quits: emacsomancer (~emacsoman@c-174-52-88-123.hsd1.ut.comcast.net) (Read error: Connection reset by peer)
[00:10:19] *** Joins: emacsomancer (~emacsoman@c-174-52-88-123.hsd1.ut.comcast.net)
[00:12:38] *** Quits: kevingal (~quassel@2a02:8084:4140:f300:3926:1fd0:955c:64c4) (Remote host closed the connection)
[00:13:16] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Remote host closed the connection)
[00:13:37] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[00:16:42] *** Quits: treflip (~user@95.79.32.99) (Remote host closed the connection)
[00:19:15] *** Quits: emacsomancer (~emacsoman@c-174-52-88-123.hsd1.ut.comcast.net) (Read error: Connection reset by peer)
[00:20:08] *** Joins: emacsomancer (~emacsoman@c-174-52-88-123.hsd1.ut.comcast.net)
[00:24:38] *** Joins: wallymathieu (~wallymath@81-234-151-21-no94.tbcn.telia.com)
[00:36:07] *** Quits: makomo (~makomo@user/makomo) (Quit: WeeChat 3.0.1)
[00:41:49] *** Quits: wallymathieu (~wallymath@81-234-151-21-no94.tbcn.telia.com) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[00:51:32] *** Quits: shka (~herr@109.231.62.239) (Ping timeout: 265 seconds)
[00:59:49] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 246 seconds)
[01:11:53] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 244 seconds)
[01:19:23] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[01:49:48] *** Joins: dave0 (~davezero@069.d.003.ncl.iprimus.net.au)
[01:51:24] <dave0> maw
[01:55:07] *** Joins: humasect (~humasect@2001:1970:57e0:4100::1074)
[02:18:35] * gilberth hears more freight trains.
[02:19:15] <White_Flame> gilberth: same here https://www.youtube.com/watch?v=aGf5NxLQoEo
[02:19:16] -ixelp- Nitro freight train - YouTube
[02:21:57] <gilberth> Heh, mine are real and more pleasant to listen to.
[02:32:48] *** Joins: Gnuxie (~gnuxie@user/gnuxie)
[02:41:36] *** Joins: hayley (~theemacss@user/hayley)
[02:41:41] *** Quits: Gnuxie (~gnuxie@user/gnuxie) (Quit: node-irc says goodbye)
[02:44:56] *** Quits: humasect (~humasect@2001:1970:57e0:4100::1074) (Remote host closed the connection)
[02:47:39] *** Joins: humasect (~humasect@2001:1970:57e0:4100::1074)
[02:52:20] *** Quits: hayley (~theemacss@user/hayley) (Quit: node-irc says goodbye)
[02:57:53] *** Joins: Gnuxie (~gnuxie@user/gnuxie)
[03:08:54] *** Quits: humasect (~humasect@2001:1970:57e0:4100::1074) (Remote host closed the connection)
[03:13:18] *** Joins: hayley (~theemacss@user/hayley)
[03:24:26] *** Joins: humasect (~humasect@2001:1970:57e0:4100::1074)
[03:29:31] *** Quits: humasect (~humasect@2001:1970:57e0:4100::1074) (Ping timeout: 256 seconds)
[03:57:37] *** Quits: brainfunnel (~quassel@36.141.90.146.dyn.plus.net) (Quit: thanks, bye!)
[04:16:06] *** Quits: cond (~example@user/aeth/bot/cond) (Quit: Restarting...)
[04:17:30] *** Joins: cond (~example@user/aeth/bot/cond)
[04:32:17] <dave0> time for a walk!
[04:32:41] *** Quits: dave0 (~davezero@069.d.003.ncl.iprimus.net.au) (Quit: dave's not here)
[04:38:13] *** Joins: humasect (~humasect@2001:1970:57e0:4100::1074)
[04:38:16] *** Quits: humasect (~humasect@2001:1970:57e0:4100::1074) (Remote host closed the connection)
[04:39:14] *** Quits: random-nick (~random-ni@87.116.165.220) (Ping timeout: 256 seconds)
[04:41:27] <hayley> https://www.youtube.com/watch?v=DySNnz5N9WA
[04:41:27] -ixelp- Green Is The Colour - YouTube
[04:49:26] *** Quits: lucf117 (~lucf117@user/lucf117) (Remote host closed the connection)
[05:50:03] <hayley> https://www.youtube.com/watch?v=31GQ6ybnzMo
[05:50:03] -ixelp- The Most Boring Dystopia: 1999 Microsoft 'Home of the Future' - YouTube
[06:28:36] *** Joins: lucf117 (~lucf117@user/lucf117)
[06:38:45] *** Joins: dave0 (~davezero@069.d.003.ncl.iprimus.net.au)
[06:42:35] <dave0> maw
[06:46:58] <hayley> Hey dave0
[06:47:11] <dave0> maw hayley 
[06:47:55] <dave0> how's it going?
[06:50:52] <hayley> It goes.
[06:51:06] <hayley> I have to meet up with my instructors in 1h40 which I am not looking forward to.
[06:51:07] <dave0> does it goes fast?
[06:51:13] <dave0> oh a meeting
[06:51:27] <hayley> It is Wednesday already, I guess.
[06:51:27] <dave0> what happened to that guy who was supposed to be doing a report that he never did
[06:52:12] <hayley> Disappeared as usual.
[06:52:45] <hayley> I don't think he RSVPed to the meeting, which at least makes my case that there have been communication issues easy to make.
[07:14:42] <hayley> https://www.youtube.com/watch?v=bnEc91KRKrc
[07:14:42] -ixelp- David Bowie • Station To Station • Live 1978 - YouTube
[07:17:43] <hayley> So, the story: I have to disappear from home for a week cause someone wants to beat me, and I start making the assignment repo. I copied in the configuration from a previous assignment template so it would be likely to be portable on the first try. A week later, I call my partner to demonstrate sorting and filtering tables. He admits only then that he can't run the code. The week after, we agree to meet up for a help session on a day which
[07:17:43] <hayley> happens to be a public holiday. So instead we pick the Thursday(?) after. He shows up late and so the session ends before we get a chance to do anything. Instead we agree that I'll hack up the rest of the assignment and he'll write up a survey. Never received a copy of the survey so I can't run it.
[07:20:07] <hayley> The week after, I send a message on Monday saying that I booked Thursday to present. My partner responds an hour prior to the presentation, so I just handed him the slides and lead the presentation. In order to look like I didn't do all the work, I ask my partner during the presentation to describe a design change we discussed earlier. Silence. He admits after that he failed to unmute himself. At the end, the instructor asks if we made changes
[07:20:07] <hayley> due to survey responses. I ask my partner again, and he says he didn't run the survey but wrote it up.
[07:21:13] <hayley> So the end result is that no survey was done, I don't have a copy of the survey, and there is somewhat less than a complete application to submit.
[07:22:13] <dave0> don't pretend he did work when he never did
[07:23:33] <dave0> he aint doing you any favours
[07:23:40] <hayley> In a presentation, it looks bad to take up all the time anyway. And they were marking on the spot.
[08:16:58] *** Quits: lucf117 (~lucf117@user/lucf117) (Remote host closed the connection)
[08:19:10] *** notzmv is now known as [deleted]
[08:23:00] * hayley continues to play Squeak's cipher game to distract herself. It gets boring after you realise most quotes are from Squeak method documentation, so you can guess words like "RECEIVER" or "METHOD" or such.
[09:19:13] *** Joins: wallymathieu (~wallymath@81-234-151-21-no94.tbcn.telia.com)
[09:23:46] <hayley> Meeting's over. Usual stuff like "we don't teach generics and lambda notation in Java, how can you expect your partner to understand those" and unusual ones like "VS Code doesn't actually run Maven but a half assed version which didn't like your configuration file"
[09:25:41] <hayley> BTW they said "We use Maven" in class so I think I have a point for being misled, but I only checked after :[
[11:08:01] *** Joins: shka (~herr@109.231.62.239)
[11:39:06] <hayley> https://www.youtube.com/watch?v=1G-YVPtA3GQ
[11:39:06] -ixelp- Gary Numan Complex - YouTube
[12:11:32] *** Quits: wallymathieu (~wallymath@81-234-151-21-no94.tbcn.telia.com) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[12:25:25] *** Joins: jheblu (~user@116.68.96.91)
[12:30:26] *** Quits: jheblu (~user@116.68.96.91) (Ping timeout: 265 seconds)
[12:48:13] *** Quits: lad (~lad@user/lad) (Ping timeout: 246 seconds)
[12:48:48] <gilberth> hayley: Is it really important that your partner understands lambda calculus?
[13:07:24] <hayley> gilberth: No, "lambda notation" refers to the anonymous "functions" in Java. Which I use a lot of to re-signal SQL errors and iterate over results at least.
[13:27:22] <gilberth> hayley: Sure, but just anonymous functions are explained in five minutes. Are that even real closures?
[13:28:10] <hayley> gilberth: Can you ignore that you cannot set closed-over bindings?
[13:28:41] <gilberth> No, that does not count as "real". It's a fake closure then.
[13:28:50] <hayley> There you go.
[13:30:10] <gilberth> In school I often heard: "Gilbert, you are not supposed to know that!" "Gilbert, that is too complicated for you." In uni I never did again.
[13:30:41] <hayley> Quite the opposite here.
[13:31:10] <gilberth> Yes, this is why I mention that. I HATED to hear that.
[13:32:02] <gilberth> It's like "Stooooooopppppppp! Gilbert, quit reading so much!"
[13:32:33] <hayley> Well, the maths teacher was half-impressed when I mentioned that gilberth convinced me to write a RE compiler using derivatives before the semester.
[13:33:26] <gilberth> Hey, so it's a half-decent teacher then. This was at your previous uni?
[13:33:43] <hayley> Yes. But everything out of the CS department seemed nicer there.
[13:34:01] <gilberth> And btw I did't convince you, you did it on your own.
[13:35:02] <hayley> In physics we had to figure out the specific heat capacity of water. If you computed from the results they gave you (noting that this was during lockdown and so we couldn't run the experiment ourselves), you'd find you were off by some 20%. 
[13:35:44] <hayley> They recorded heating the water and letting it cool slowly after. So I thought to subtract the gradient of the latter from the former to adjust for heat lost to the environment. Got 100% on that somehow.
[13:36:22] <gilberth> Well 20% off is at least the right order of magnitude.
[13:36:40] <pjb> gilberth: yeah "you're not supposed to know that" is really the worst a school can do.
[13:36:59] <hayley> IIRC that correction, if you fudge the sample you measure sufficiently, gets you within 2% or so.
[13:37:01] <gilberth> pjb: Indeed.
[13:37:14] <hayley> Damn, 3.68%.
[13:37:54] <pjb> gilberth: but the system is really successful at educating idiots: nowadays people really refuse to know what they're not supposed to know.  
[13:38:26] <gilberth> hayley: We measure elementary charge and speed of light at grammar school within around 5% IIRC. I am still damn convinced I spotted a 1/3 charge.
[13:38:26] *** Joins: kevingal (~quassel@2a02:8084:4140:f300:24f8:e131:401c:771c)
[13:38:52] <hayley> Oh, as it was my last test I also decided to include my Haskell code to have the computer calculate margins of error as an appendix.
[13:39:11] <hayley> Unfortunately the physics teachers went on a "no news is good news" approach to feedback. 
[13:39:26] <gilberth> pjb: What teachers really meant was: "Please don't learn ahead and in advance." *sigh* I just read a few books lying around at home and I found at the library.
[13:39:43] <hayley> "I'm taking a mark from you *here*, because you used parens and not $ instead...."
[13:40:25] <gilberth> $? Some of CLOSOS money?
[13:40:45] <hayley> f $ g x = f (g x) in Haskell
[13:41:04] * gilberth doesn't speak Haskell.
[13:41:42] *** Joins: wallymathieu (~wallymath@81-234-151-21-no94.tbcn.telia.com)
[13:41:43] <gilberth> So it's like (f o g)?
[13:42:01] <hayley> It meddles with precedence so that you can skimp out on some () really.
[13:42:37] <gilberth> Oh dear, then I will get few marks on my C code.
[13:42:57] <hayley> Rather it's like f $ a = f a, recalling that functions bind tighter than infix operators, so it is parsed like f $ (g x)
[13:42:58] <gilberth> And even less for Lisp :-)
[13:43:40] <hayley> (defmacro $ (a b c) `(,a (,b ,c)))
[13:43:52] <gilberth> So, why the $ then? Is it a precedence override? /me is puzzled.
[13:44:03] <hayley> Precisely.
[13:44:30] <gilberth> Easy to read, I guess. /me spares the desk this time.
[13:46:27] <gilberth> So, f g x = (f g) x?
[13:46:38] <hayley> Yes.
[13:46:48] * hayley considers making a "modern" programming language.
[13:47:11] <gilberth> CL with funny parens?
[13:47:15] <hayley> We use consise ML-inspired syntax: f main() { p("Hello world"); return 0 } // The ML inspiration is that we have ; to sequence, yes.
[13:47:25] <hayley> Oh, I forgot s/return/r
[13:48:06] <hayley> Rather than using a runtime GC which is slow and will eat your children or manual memory management which is fast and shits out children, the compiler inserts runtime tests to ensure all variables are linear (i.e. have only one referene).
[13:48:07] <gilberth> May I have postfix?
[13:49:01] <hayley> Suppose I could hack up an implementation for next April Fool's.
[13:49:41] <gilberth> Or: second-fix. (define (foo x) (+ x 1)) -> ((x foo) define (x + 1)) :-p
[13:49:56] <gilberth> hayley: The name "April" is taken.
[13:50:18] <hayley> IIRC the first "Lisp" with Actors could write (x + y) because that is sending the message (+ y) to x.
[13:50:43] <hayley> gilberth: I was going to go for R, but that is taken. What about G? I would need to write a nazi compiler for that.
[13:50:51] <gilberth> The "hack" Smalltalk uses to have "1 + 2".
[13:51:28] <hayley> Self also doesn't have precedence, but it forbids you from writing 1 + 2 * 3, rather you write 1 + (2 * 3) or similar.
[13:51:31] <gilberth> hayley: Take your own damn initial letter, "G" is mine.
[13:51:53] <hayley> gilberth: Hey, I don't mind Haskell, the joke wouldn't work there.
[13:52:10] <hayley> By that logic, aeth should own April anyway.
[13:52:29] <gilberth> I would be pissed, when you call it "G". And our Haskel variant was called "Gopher", so figure.
[13:53:14] <gilberth> hayley: I won't call it "A". That would be a lesser than "B". BTW I kind of like B.
[13:53:31] <hayley> Or I call it "Carbon monoxide". "No, we didn't name it after something society does its damnest to get rid of, it's...a fungus! Right! Yes, a fungus!"
[13:54:53] <gilberth> Call it H2O or "Water", rusted hydrogen.
[13:55:10] <gilberth> And there is your "H" :-)
[13:55:21] <hayley> Cliff Click's AI company is called H2O though. 
[13:55:55] <hayley> "As we don't want to use a global interpreter lock, but any atomics are probably unsafe even when they're not, we also lock around every instruction." 
[13:55:58] <gilberth> Hmm. What else can rust? I guess pretty much anything.
[13:56:43] <hayley> x = 1 // Compiler error: x may be shared between parallel universes, please change the definition to mutex<int> x;
[13:56:59] <gilberth> lol
[13:57:25] <hayley> Or maybe I should just insert them everywhere anyway. shrug
[13:57:35] <gilberth> "x is never written, please use "const x = 1" instead.
[13:58:34] <hayley> "Fuckless concurrency: we lock everything at the finest level possible while supporting our memory model*."
[13:58:55] <hayley> *Our memory model is "A happens-before B if A happens-before B, idk seems obvious to me"
[13:59:58] <gilberth> What about speed of light and special relativity theory? There is no "before".
[14:00:24] <hayley> I was never that good at physics.
[14:00:35] <gilberth> You're kidding.
[14:01:02] <hayley> :)
[14:03:15] <gilberth> Anyhow, would I ever manage to compile LLVM, I may craft an B compiler.
[14:04:01] <gilberth> As this is B, char then is a function, which extracts a 6-bit character out of a 64-bit word. :)
[14:05:31] <gilberth> So, no atomic writes of characters for you. Here your mutex<> would be handy. No types in B.
[14:05:50] <hayley> If you can hide that it's not wait-free, just do a CAS loop.
[14:06:15] <gilberth> No mutex? I am disappointed.
[14:07:07] * hayley hacks the compiler to search arxiv for the most recent papers on wait-free data structures when someone attempts to share one between threads. 
[14:08:18] <hayley> Better than "mate trust me wrap it in Arc<Mutex<...>>"
[14:09:17] <gilberth> Not "Arc $ Mutex"?
[14:09:27] <hayley> Not on the type level.
[14:09:39] <hayley> In Haskell one uses software transactional memory still.
[14:10:27] <gilberth> Hasn't Intel ditched its HW transactional memory?
[14:10:37] <hayley> That's the software part.
[14:10:57] <gilberth> Which got ditched?
[14:11:21] <hayley> They maintain the change lists in memory and then decide what conflicts in software. No hardware support.
[14:11:56] <gilberth> ok, so not really useful?
[14:12:18] <hayley> Useful, but not fast.
[14:12:59] <gilberth> when there is a change list, could it be abused as write barriers?
[14:13:33] * gilberth always wanted to look into this Intel'sh transactional memory, but never got around it.
[14:15:33] <hayley> http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.428.6527&rep=rep1&type=pdf
[14:16:45] <gilberth> Too late for me to read a paper. And /me wants a printer. :/
[14:17:14] * hayley thinks
[14:17:53] <hayley> CL -abcl-> JVM -doppio-> JS -I forgot but IIRC there is one -> WASM -wasm2ps-> PS -> printer
[14:17:54] <gilberth> Run! Everybody! Quick! Hayley thinks she thinks!
[14:18:30] <gilberth> hayley: Nice.
[14:19:35] <hayley> I heard the first two steps caused ABCL to need a few minutes to start.
[14:19:35] *** Quits: wallymathieu (~wallymath@81-234-151-21-no94.tbcn.telia.com) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[14:23:05] <gilberth> Won't matter, have you seen <http://dmitry.gr/?r=05.Projects&proj=07.%20Linux%20on%208bit> Takes 2h for a bash prompt it says.
[14:23:05] -ixelp- Linux on an 8-bit micro? - Dmitry.GR
[14:23:23] <gilberth> But I bet, it could be made faster.
[14:25:04] <gilberth> So, perhaps we just hack an AVR emulator. :-)
[14:27:06] <pjb> gilberth: of course. this is the main problem with the modern school system: it's based on Taylorims: education as chain production of new workers.
[14:27:19] <pjb> s/rims/rism/
[14:30:23] <hayley> The same guy also did a JVM on a microcontroller.
[14:30:36] <pl> JVM on MCUs is... very common
[14:30:50] <hayley> Pissed off a few people who were annoyed that Java is interpreted and it'd be slow. The more things change...
[14:30:53] <pjb> workplace: https://mickkahler.com/wp-content/uploads/2019/04/4-21-19.jpg 
[14:30:54] <pjb> school: https://images.indianexpress.com/2019/01/classroom-759.jpg
[14:30:54] <pjb> modern workplace: https://blog.talkspirit.com/wp-content/uploads/2021/05/Workplace-design-2-1-740x389.jpg
[14:31:06] <hayley> pl: On e.g. a ATmega328 micro with 2KB of SRAM?
[14:31:16] <pjb> That was the purpose of java, to run everywhere…
[14:31:20] <gilberth> pjb: That is not in anyway modern.
[14:31:25] <hayley> http://dmitry.gr/?r=05.Projects&proj=12.%20uJ%20-%20a%20micro%20JVM
[14:31:25] -ixelp- uJ - a Java VM for microcontrollers - Dmitry.GR
[14:31:56] *** Joins: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[14:32:27] <gilberth> Some ARMs could execute Java byte code directly.
[14:33:02] <pl> hayley: usually 1-4kB of RAM
[14:33:12] <gilberth> And at uni I did a bit of work for a Java chip project.
[14:33:13] <hayley> Gees, okay.
[14:33:15] <hayley> No pre-compilation?
[14:33:48] <hayley> gilberth: When was that again? Before or after Self? :P
[14:33:53] <pl> hayley: it's a strict subset with modified encoding, but everything works on normal VM as well
[14:33:53] <pjb> gilberth: well, it's difficult to find a picture illustrating empty offices when the workers are remote; perhaps the best would be something like: https://wellforce.ai/wp-content/uploads/2020/03/Untitled-picturefdgth-400x250.jpg but it's als exagerated (and you can't work on a computer screen in play daylight sun)
[14:34:15] <pl> Jazelle v1 did some JVM acceleration but it quickly ended up unused
[14:34:29] *** Joins: CrashTestDummy (~CrashTest@ool-ad02813b.dyn.optonline.net)
[14:34:48] <pl> Jazelle v2 doesn't interpret bytecode directly but implements some instructions to allow fast implementation
[14:35:21] *** Quits: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 256 seconds)
[14:35:40] <pl> hayley: JavaCard is little known but veeeeryyyy widespread
[14:35:52] <gilberth> hayley: After. I am not that old. Late 90s.
[14:36:53] <gilberth> hayley: And we didn't do an interpreter, like a microcoded design is essentially.
[14:37:10] *** Quits: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 268 seconds)
[14:38:32] <gilberth> pl: Indeed, it's everywhere.
[14:40:40] <hayley> When was SPARC again?
[14:41:01] <shka> that sun architecture
[14:41:04] <shka> now oracle
[14:41:10] <pl> hayley: SPARC is mid-80s
[14:41:24] <shka> oh, i misread when as what
[14:41:26] <shka> silly
[14:41:27] <hayley> I forgot if Self first targeted 68k or SPARC. Probably the former, since it was a Sun project and thus always tracked their machines. 
[14:42:48] *** Joins: wallymathieu (~wallymath@81-234-151-21-no94.tbcn.telia.com)
[14:43:51] <hayley> But then Chambers's thesis was only '91 or so. Oh, and it was considered just a research thing for a few years according to one simulation design book I found from the time. 
[14:44:38] <hayley> gilberth: Still, why not write a good compiler?
[14:45:01] <gilberth> Compiling what?
[14:45:17] <hayley> JVM bytecode?
[14:45:49] <gilberth> Oh, the RISC-idea, right? Just compile the stuff.
[14:46:14] <hayley> Worked for Smalltalk and APL prior, too.
[14:46:45] <pl> Sun-4 was launched in 1987, SPARC itself is derived from RISC-II (1983~1984?)
[14:46:59] <gilberth> Yes, off-the shelf CPUs are just too damn fast -- no way to compete.
[14:48:03] <hayley> Ignoring that, what did you want HW support for?
[14:48:26] <gilberth> Me? For CL, say?
[14:48:43] <hayley> For your work with a Java CPU.
[14:49:11] <gilberth> It was not my idea.
[14:49:25] <hayley> What did they want HW support for?
[14:49:41] <gilberth> Money, essentially.
[14:50:18] <gilberth> It was very easy to get research money for anything related to Java.
[14:51:07] <hayley> Funny.
[14:51:14] <gilberth> Why?
[14:51:51] <hayley> I rather meant what they wanted to add to HW, not why they wanted the HW, but it could be read as either.
[14:53:25] <gilberth> Some GC support IIRC, I was only there very briefly and did some design of the stack HW.
[14:55:26] *** Quits: dave0 (~davezero@069.d.003.ncl.iprimus.net.au) (Quit: dave's not here)
[14:55:28] *** Joins: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[14:58:18] *** Quits: CrashTestDummy (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 240 seconds)
[15:03:07] *** Quits: wallymathieu (~wallymath@81-234-151-21-no94.tbcn.telia.com) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[15:04:08] *** Joins: random-nick (~random-ni@87.116.181.229)
[15:04:47] <hayley> How far can you jump on ARM with a constant in the instruction?
[15:06:30] <hayley> Ah, the manual says 32MB. So if I run on a micro, I can pretty much be guaranteed that any branch will fit in one instruction.
[15:11:54] *** Joins: wallymathieu (~wallymath@81-234-151-21-no94.tbcn.telia.com)
[15:18:24] *** Quits: wallymathieu (~wallymath@81-234-151-21-no94.tbcn.telia.com) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[15:32:28] *** Joins: wallymathieu (~wallymath@81-234-151-21-no94.tbcn.telia.com)
[15:35:13] *** Quits: terpri (~terpri@user/terpri) (Ping timeout: 272 seconds)
[16:26:19] *** Joins: selwyn (~selwyn@user/selwyn)
[16:33:43] *** Joins: treflip (~user@95.79.32.99)
[17:16:44] <shka> interesting launch this time around https://www.youtube.com/watch?v=05MfomjVKlo
[17:16:44] -ixelp- Watch Virgin Orbit launch a rocket from a 747!!! - YouTube
[17:23:30] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 272 seconds)
[17:25:11] *** Joins: aeth (~aeth@user/aeth)
[17:49:35] <hayley> When your instructor asks for your programming experience, you say you wrote Java for 5 years ish and have a part time job hacking a compiler, and the instructor says it's nice to have an internship
[17:50:31] <selwyn> lol
[17:50:52] <hayley> AIUI I have no intentional learning goals, and I am not supervised most of the time, so it is legally not an internship.
[17:53:56] <hayley> Don't trivialise my hyperfixation as a child^W^W^W^Wmemory of x86 instructions pls
[17:55:12] <pl> hayley: what compiler?
[17:55:56] <shka> sicl?
[17:55:59] <hayley> SICL
[17:56:32] <hayley> Gnuxie has the opposite job, writing a disassembler.
[18:02:05] *** Quits: wallymathieu (~wallymath@81-234-151-21-no94.tbcn.telia.com) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[18:02:14] <hayley> shka: Yes, beach was saying he'd fund people with some experience and spare time for a while now.
[18:02:33] <shka> heh
[18:02:46] <shka> shame i don't have spare time
[18:03:52] <hayley> Unfortunately it is more fun and educational than university work.
[18:06:19] <pl> I nearly took a part time job from beach long long ago before QL was a thing - he was offering to sponsor such thing
[18:06:27] <pl> but I was too deep in depression to get there
[18:15:36] <hayley> It is also, sadly, something I can do to feel productive while not being bothered with the notion that my own projects will never find use.
[18:18:23] <hayley> So it is part of my slow return to enjoying programming my own stuff after the events of February.
[18:21:10] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[18:42:03] *** Joins: aeth_ (~aeth@user/aeth)
[18:42:29] *** Quits: aeth (~aeth@user/aeth) (Killed (NickServ (GHOST command used by aeth_)))
[18:42:34] *** aeth_ is now known as aeth
[18:57:33] *** Joins: selwyn (~selwyn@user/selwyn)
[19:06:15] *** Joins: Alfr (~Alfr@user/alfr)
[19:07:23] <Alfr> Good morning.
[19:08:18] <hayley> Good night Alfr.
[19:22:16] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[19:33:30] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 240 seconds)
[19:37:23] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 256 seconds)
[19:39:22] *** Joins: aeth (~aeth@user/aeth)
[20:03:21] <shka> selwyn: i made that demo->pg thingy working today btw
[20:03:30] <shka> i will need to add proper error handling though
[20:03:39] <selwyn> uh
[20:03:43] <selwyn> remind me what that is?
[20:04:49] <shka> tool for extracting data from the CS GO demos
[20:05:01] <shka> into PG so analytics can work on it
[20:05:11] <shka> although SQL is bad fit for this data
[20:05:16] <selwyn> i can imagine
[20:09:10] *** Joins: brainfunnel (~quassel@52.36.99.195.dyn.plus.net)
[20:09:55] *** Joins: rogersm (~rogersm@92.59.121.109)
[20:11:14] *** Joins: brainfunnel_ (~quassel@147.128.208.46.dyn.plus.net)
[20:12:18] *** Quits: brainfunnel (~quassel@52.36.99.195.dyn.plus.net) (Killed (NickServ (GHOST command used by brainfunnel_!~quassel@147.128.208.46.dyn.plus.net)))
[20:13:14] *** brainfunnel_ is now known as brainfunnel
[20:13:14] *** brainfunnel is now known as set
[20:13:44] *** set is now known as Guest1155
[20:14:07] *** Guest1155 is now known as brainfunnel
[20:28:52] *** nckx is now known as Thunderbi
[20:36:12] *** Quits: fengshaun (~fengshaun@68.69.214.210) (Quit: bibi!)
[20:36:43] *** Joins: fengshaun (~fengshaun@68.69.214.210)
[20:45:45] *** Thunderbi is now known as nckx
[20:46:37] *** Joins: brainfunnel_ (~quassel@116.40.99.195.dyn.plus.net)
[20:47:23] *** Quits: brainfunnel_ (~quassel@116.40.99.195.dyn.plus.net) (Client Quit)
[20:49:55] *** Quits: brainfunnel (~quassel@147.128.208.46.dyn.plus.net) (Ping timeout: 256 seconds)
[20:56:04] *** Quits: jasom (~aidenn@2600:8802:7fa0:b00:69c9:7281:b072:31aa) (Ping timeout: 272 seconds)
[20:59:02] *** Joins: jasom (~aidenn@ip184-189-218-164.sb.sd.cox.net)
[21:08:29] *** Joins: wallymathieu (~wallymath@81-234-151-21-no94.tbcn.telia.com)
[21:12:32] *** Joins: lad (~lad@user/lad)
[21:19:38] *** Quits: jasom (~aidenn@ip184-189-218-164.sb.sd.cox.net) (Ping timeout: 252 seconds)
[21:20:02] *** Joins: jasom (~aidenn@2600:8802:7fa0:b00:69c9:7281:b072:31aa)
[21:27:22] *** Joins: selwyn_ (~selwyn@user/selwyn)
[21:29:50] *** Quits: selwyn (~selwyn@user/selwyn) (Ping timeout: 265 seconds)
[21:38:33] *** Joins: lucf117 (~lucf117@user/lucf117)
[21:44:30] *** Quits: selwyn_ (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[21:53:12] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[21:55:28] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Client Quit)
[21:57:41] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[22:43:15] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 256 seconds)
[23:12:05] <Aurora_v_kosmose> In cases where minimal code size and ram use is required for a static binary, what would you recommend if I want to use something other than C? Ocaml?
[23:21:51] <edgar-rft> assembly
[23:22:09] <Aurora_v_kosmose> Now for something both relatively high level and with some illusion of type-safety?
[23:22:16] <^[> I think Zig is aiming for all of those things: small, static binaries, with minimal memory allocations at runtime.
[23:22:24] <Aurora_v_kosmose> 6502 is one thing, but x86 is lolno
[23:24:37] <Aurora_v_kosmose> ^[: That sounds nice. I'd heard of it a while back. Is it relatively stable by now or still "early development" mode?
[23:32:50] <^[> I think the pace of breaking changes has slowed down, but I think it's too early to call it "stable".
[23:33:07] <^[> They seem to put as many deprecation fixes into "zig fmt
[23:33:23] <Aurora_v_kosmose> Hm, worth keeping an eye on I guess.
[23:33:24] <^[> ... as they can, to make it easier to switch to newer versions.
[23:36:49] <ck_> wow, the escape character in person
[23:37:15] <Aurora_v_kosmose> Having fun with accepted nicks.
[23:37:24] <^[> ck_: The pleasure is mine.
[23:37:25] <ck_> you probably get top billing in any dramatis personae
[23:43:51] *** Quits: rogersm (~rogersm@92.59.121.109) (Quit: Leaving...)
[23:45:01] *** Quits: derelict (~derelict@user/derelict) (Ping timeout: 256 seconds)
[23:49:12] <shka> Aurora_v_kosmose: no GC?
[23:53:54] <Aurora_v_kosmose> shka: GC isn't a problem in this case. It's mostly that rumprun only supports executables and SBCL produces such large ones that there'd be no point as it'd produce larger ones than what I might try to replace to start with.
[23:54:35] <Aurora_v_kosmose> Chicken Scheme and Gambit are candidates.
[23:54:39] <shka> ecl maybe?
[23:55:26] <Aurora_v_kosmose> Yeah, it is reportedly the smallest CL, I'll need to check.
[23:56:00] * Aurora_v_kosmose also needs to decide if it'd take longer to write the replacements than to afford a computer with 2x more memory instead
