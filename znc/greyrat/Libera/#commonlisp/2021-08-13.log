[00:00:11] <lotuseater> lisp-newbie: An important difference is, a function first evaluates all of its arguments, a macro takes forms and gives back another or multiple forms as specified.
[00:00:29] <lisp-newbie> yeah, class name is available at compile time
[00:00:50] <mfiano> or rather, macro-expansion time
[00:00:53] <lisp-newbie> got this error when I tried to do it as a function: The NAME argument to DEFUN, (CONCATENATE 'STRING MODEL-NAME; "-get"), is not a function name.
[00:01:08] <mfiano> Right
[00:01:18] <lotuseater> you can try out a macroexpand for '(defstruct person name age) then you'll see that also some functions are built for that
[00:01:18] <mfiano> defun is a macro
[00:01:18] <Bike> i'm going to guess that you wanted the concatenation to happen at macroexpansion time, but left it in the expansion instead by mistake
[00:01:29] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Ping timeout: 244 seconds)
[00:01:41] <lotuseater> also DEFMACRO is a macro xD
[00:01:45] <lisp-newbie> Bike well I defined it as a defun not a defmacro
[00:02:19] <lisp-newbie> I've never done a macro before, but that was kind of the whole point I've started to learn lisp for, so I think finally I have arrived at the beginning of the purpose of this journey
[00:03:02] <lisp-newbie> are function names strings? If I want to define functions in a macro? oh I guess I can macro expand defstruct
[00:03:33] <lotuseater> lisp-newbie: sometimes it's useful defining functions outside a macro that build lists out of other lists or such that your macro needs
[00:03:34] <moon-child> names in general are called _symbols_
[00:03:35] <mfiano> (macrolet ((make-func (name) `(defun ,(alexandria:symbolicate name '#:-get) ...))) (make-func hello) (make-func world))
[00:03:49] <moon-child> you can generate a symbol from a string using INTERN, but this is generally not necessary
[00:04:18] <lisp-newbie> mfiano thanks for that, I would have not gotten there on my own without major googeling and trial and error
[00:04:58] <alphapapa[m]> lisp-newbie: You should probably start with a book like PCL
[00:05:27] <lisp-newbie> alphapapa by PCL do you mean this? https://gigamonkeys.com/book/
[00:05:39] <lisp-newbie> That's what I've been using and lisp cookbook
[00:05:57] <lotuseater> a good start :)
[00:06:25] <alphapapa[m]> lisp-newbie: Ok, so if you're wanting to move into macros, maybe see "On Lisp".  PG has it in PDF form on his site for free.
[00:06:46] <mfiano> and much later Let Over Lambda
[00:06:55] <lotuseater> or a bit smoother the chapter about them in Land of Lisp
[00:06:56] <mfiano> PCL should be finished before starting to write code though
[00:07:08] <lisp-newbie> alphapapa thanks, I have the pdf already :) I just thought it was too advanced for where I'm at
[00:07:22] <lotuseater> mfiano: good advise, LOL is covering pretty advanced stuff ^^
[00:07:39] <alphapapa[m]> lisp-newbie: The early chapters probably aren't over your head, at least
[00:07:40] <mfiano> and pretty opinionated unorthodox code
[00:07:52] <mfiano> But good learning resource on macro writing regardless
[00:07:58] <lotuseater> oh yes
[00:08:02] <lisp-newbie> mfiano before starting to write code? I am doing a project as a way to learn, I find it hard to go through the book, but this way whenever difficulties arise, I now have much more motivation to read the chapters
[00:08:10] <mfiano> lisp-newbie: Right
[00:08:19] <alphapapa[m]> lisp-newbie: On Lisp may also have the effect of whetting your appetite for more Lisp
[00:08:51] <mfiano> I fear you won't be learning properly and going against the path of least resistance. Macros are easy if you follow a linear path the book sets you on
[00:08:52] <lisp-newbie> mfiano which is opinionated code let over lambda or on lisp?
[00:08:57] <Josh_2> the former
[00:09:55] <lisp-newbie> alphapapa I have pretty much read every chapter in PCL up until the second macro chapter, which I stopped because I could progress with the project up until that point, now I think it makes sense to jump in
[00:10:16] <alphapapa[m]> lisp-newbie: Happy Lisping :)
[00:10:29] <lotuseater> just read or also trying out and changing stuff?
[00:10:53] <Josh_2> I think understanding of macros comes as you write more lisp
[00:10:55] <lisp-newbie> I have developed software as a software engineer for a while, so besides macros, I feel eevrything else is just syntax and about knowing which functions to use and well, lisp does have quite a few differences in how packages work and nuances in things
[00:11:05] <lisp-newbie> thanks :D
[00:11:25] <lisp-newbie> lotuseater using it for a project :)
[00:11:40] <lotuseater> Josh_2 mfiano the best is this "Heureka" moment when it makes click in the head :3
[00:12:18] <nij-> I dunno why using central-registry is discouraged..
[00:15:33] <Bike> you're supposed to use the configuration stuff, which is probably more composable, but also like a fuckton more complicated
[00:16:17] <nij-> What do you mean by composable?
[00:16:53] <Bike> like a bunch of different systems can define their own configurations and things work together harmoniously.
[00:19:47] *** Quits: Aksej (~thomasbar@picard.host.weltraumschlangen.de) (Quit: ZNC 1.7.2+deb3 - https://znc.in)
[00:20:00] *** Joins: Aksej (~Aksej@picard.host.weltraumschlangen.de)
[00:20:20] <lisp-newbie> lotuseater thanks for your idea, I think macro graduation will come once I understand this code https://github.com/sbcl/sbcl/blob/master/src/code/defstruct.lisp
[00:20:59] <Josh_2> wat
[00:21:05] <lotuseater> or you start better with something small
[00:21:05] <mfiano> um no
[00:21:17] <Josh_2> Just write some macros...
[00:21:21] <mfiano> Read PCL, not implementation internals!
[00:21:28] <Bike> defstruct is not a good example
[00:21:53] <lotuseater> lisp-newbie: for example how to write a macro LET1 when you just have one binding in a LET form and don't want to write doubly parentheses
[00:22:19] <lotuseater> Bike: right, and then it's this SBCL code
[00:23:17] <Bike> yeah the deep sbcl magic doesn't help
[00:23:45] <Josh_2> write a while macro or something
[00:24:14] <mfiano> Start with simple reproductions like AND
[00:24:22] *** Quits: Aksej (~Aksej@picard.host.weltraumschlangen.de) (Client Quit)
[00:24:32] *** Joins: Aksej (~Aksej@picard.host.weltraumschlangen.de)
[00:24:42] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-F0C2-dynamic.midco.net) (Ping timeout: 245 seconds)
[00:24:52] <lisp-newbie> Bike lotuseater mfiano Josh_2 right, I only meant it for later, I'm trying to turn this into a working macro: https://pastebin.com/0YjcSNeu
[00:25:05] <lisp-newbie> mfiano yeah, I read those in the PCL book, I finished that chapter
[00:25:22] <Josh_2> wat
[00:25:42] <Josh_2> You need to read the chapters in PCL on macros
[00:25:45] *** Quits: Aksej (~Aksej@picard.host.weltraumschlangen.de) (Client Quit)
[00:25:48] <Bike> You seem to not be quoting the code create-model-functions is supposed to return.
[00:25:57] *** Joins: Aksej (~Aksej@picard.host.weltraumschlangen.de)
[00:26:01] <Bike> You're just writing the code in there. So the macroexpander will try to define the functions, not the code it returns.
[00:26:05] <Josh_2> What you are doing is perfectly possible but you are not doing it correctly
[00:26:11] <Bike> Assuming I'm guessing how your annotation reader macros work correctly.
[00:26:34] *** Quits: Aksej (~Aksej@picard.host.weltraumschlangen.de) (Client Quit)
[00:26:39] <mfiano> Also note a macro returns a single form, not many. This is a major use-case for PROGN
[00:26:46] *** Joins: Aksej (~Aksej@picard.host.weltraumschlangen.de)
[00:27:41] <mfiano> You will need to learn quoiting and unquoting, and how a macro transforms data. PCL covers all of this
[00:27:55] <mfiano> I think the path you are on is why many people give up
[00:28:04] <Josh_2> yes, you need to read the chapters on macros in PCL
[00:28:21] <Josh_2> and experiment, copy the code and inspect it with sly/slime and you will start to understand what is going on
[00:29:03] <Josh_2> soon you will be writing macro writing macros, no problems
[00:30:14] <Josh_2> also you could do what you are trying to do in that code with generic functions
[00:30:43] *** Quits: srhm (~ascii@user/srhm) (Quit: Konversation terminated!)
[00:30:52] <mfiano> and don't read the chapter on macros. You will be missing important macro writing pre-requisites in previous chapters
[00:31:08] *** Joins: srhm (~ascii@user/srhm)
[00:31:08] <mfiano> The book is meant to be read linearly
[00:31:17] *** Joins: nij- (~jin@2001-48F8-9021-806-0-0-0-F0C2-dynamic.midco.net)
[00:31:22] <Josh_2> one superclass for all of your models then generics like 'delete-model' 'update-model' etc and you can then create more specific versions if you need special behaviour on various subclasses
[00:31:29] <Josh_2> mfiano: they said they had already read PCL
[00:31:46] <Josh_2> most of it anyway
[00:32:02] <mfiano> I do not believe that
[00:32:51] <lisp-newbie> yeah, I'm going to read the PCL chapter and then try to do it... I was just sharing what my goal is
[00:32:57] <mfiano> Sigh
[00:33:09] <lisp-newbie> mfiano I read the previous chapters of PCL already
[00:33:11] <lisp-newbie> thanks
[00:33:28] <lisp-newbie> thanks Josh_2 will keep those in mind after I read the PCL chapters, then I will give it a go
[00:33:55] <lisp-newbie> Bike the annot is a cl-annot, not my macro...
[00:34:11] <Bike> eh, whichever.
[00:34:28] <Bike> Josh_2 is probably right that this could be better accomplished through CLOS
[00:34:34] <lisp-newbie> I read most of the chapters before chapter 8
[00:34:35] <Josh_2> you do not need that reader macro if you do that with a macro, you can just have the export form
[00:34:37] <lotuseater> lisp-newbie: do you already know what the @ from cl-annot really is?
[00:35:06] <lotuseater> and we surely want you to become powerful :)
[00:35:29] *** Joins: lisp123 (~lisp123@5.30.23.247)
[00:35:30] <mfiano> lisp-newbie: Can you explain what ,@ does?
[00:35:33] <lisp-newbie> yeah, the supper class would be nice, but I'm calling a macro from some other package that defines classes, and I'm trying to work with that package
[00:36:26] <Josh_2> That doesn't matter...
[00:36:38] <Josh_2> you can just subclass their class and everything will still work
[00:36:55] <lisp-newbie> lotuseater the @ is not lisp @ it's a python like @ for annotations it expands into (export something (progn etc
[00:37:10] <Josh_2> if they define a class in their package like package:my-class you can still do (defclass myclas (package:my-class) ..)
[00:37:10] <mfiano> No, ",@"
[00:37:26] <mfiano> The part of macros you already read about
[00:37:31] <lisp-newbie> Josh_2 but I'm using their macro to create many different classes
[00:37:38] <lisp-newbie> and I want to create the functions for those classes
[00:37:40] <mfiano> lisp-newbie: Hint: It is explained before the macro chapters, one of many reasons you should read the book without skipping around.
[00:37:48] <Josh_2> alrighty
[00:38:08] <lisp-newbie> mfiano that's the next PCL chapter that I'm about to read
[00:38:15] <mfiano> Which?
[00:38:19] <lisp-newbie> oh hahaha mfiano OK, you got me
[00:38:20] <Josh_2> You might find if you inspect their macro you can see what superclass they use for each of the classes automatically defined, you can then create generics that specialize on that
[00:38:48] <lisp-newbie> Josh_2 ah, that's a nice idea, will look into it
[00:39:08] <lisp-newbie> ok, got to run to a meeting, thank you guys!
[00:40:10] *** Quits: lisp-newbie (~lisp-newb@192.117.240.42) (Quit: This computer has gone to sleep)
[00:40:46] <lotuseater> ack
[00:40:48] <mfiano> Well, I tried to set them on a decent learning path. I'm not sure they want to listen though
[00:41:11] <lotuseater> maybe they need time
[00:41:13] <Josh_2> I dont think I've read PCL cover to cover yet
[00:41:34] <lotuseater> I offered him to go through this possible LET1 step by step.
[00:41:36] <Josh_2> I know i've read a few chapters over and over again
[00:42:23] <mfiano> lotuseater: I know. It seems they want to jump into an application, no matter how difficult that may be.
[00:42:50] <lotuseater> yeah it's different from most other stuff
[00:44:38] <mfiano> Maybe he will learn to swim in the deep end, but it may produce bad habits with regard to code style and idioms
[00:46:30] <lotuseater> that needs practice (and more asking of others)
[00:48:44] <lotuseater> or there's also being too overenthusiastic with things
[00:50:20] <pjb> nij-: about your file modification, the question you must answer is what to do if the new line is not of the same length as the old one?  If it's shorter, you could pad it with spaces.  If it's longer how do you deal with it?
[00:50:38] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-F0C2-dynamic.midco.net) (Ping timeout: 256 seconds)
[00:50:50] <pjb> nij-: your file could contain fixed-length lines. eg. all lines could be 80-character (like a deck of punched cards).
[00:51:19] <pjb> nij-: in that case the question that remains to ask yourself, is what to do if you want to remove or add lines.
[00:51:35] *** Quits: srhm (~ascii@user/srhm) (Quit: Konversation terminated!)
[00:51:58] *** Joins: srhm (~ascii@user/srhm)
[00:57:18] *** Quits: mfiano (~mfiano@li1282-157.members.linode.com) (Ping timeout: 258 seconds)
[01:01:07] *** Joins: nij- (~jin@2001-48F8-9021-806-0-0-0-F0C2-dynamic.midco.net)
[01:05:42] *** Quits: pve (~pve@188-67-218-76.bb.dnainternet.fi) (Quit: leaving)
[01:09:51] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-F0C2-dynamic.midco.net) (Remote host closed the connection)
[01:12:26] *** Quits: srhm (~ascii@user/srhm) (Quit: Konversation terminated!)
[01:12:48] *** Joins: srhm (~ascii@user/srhm)
[01:13:02] *** Quits: scymtym (~user@2001:638:504:20e6:6ac3:87e0:e782:f3fc) (Ping timeout: 252 seconds)
[01:21:49] *** Quits: shka (~herr@109.231.62.239) (Ping timeout: 268 seconds)
[01:30:12] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[01:31:08] *** Joins: lisp123 (~lisp123@5.30.23.247)
[01:33:05] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[01:33:17] *** Joins: lisp123 (~lisp123@5.30.23.247)
[01:35:12] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[01:36:10] *** Joins: lisp123 (~lisp123@5.30.23.247)
[01:38:13] *** Joins: scymtym (~user@ip-88-153-154-183.hsi04.unitymediagroup.de)
[01:41:16] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 272 seconds)
[01:49:37] *** Joins: karlosz (~karlosz@router.cloyne.org)
[01:52:02] *** Quits: attila_lendvai (~alendvai@2a02:ab88:3707:bb00:5ee0:c5ff:feb2:29e2) (Ping timeout: 272 seconds)
[02:01:05] *** Quits: cage (~cage@dynamic-adsl-78-15-36-212.clienti.tiscali.it) (Quit: rcirc on GNU Emacs 27.1)
[02:10:08] *** Joins: lisp123 (~lisp123@5.30.23.247)
[02:20:05] *** Quits: srhm (~ascii@user/srhm) (Quit: Konversation terminated!)
[02:20:28] *** Joins: srhm (~ascii@user/srhm)
[02:21:29] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 248 seconds)
[02:23:02] *** Quits: selwyn (~selwyn@user/selwyn) (Quit: Leaving)
[02:26:22] *** Quits: amb007 (~a_bakic@cable-94-189-181-220.dynamic.sbb.rs) (Ping timeout: 245 seconds)
[02:36:25] *** Quits: khrbt (~znc@2601:646:8600:2f6:3fa:485d:475e:2130) (Changing host)
[02:36:25] *** Joins: khrbt (~znc@user/khrbt)
[02:38:50] *** Joins: amb007 (~a_bakic@cable-94-189-181-220.dynamic.sbb.rs)
[02:39:21] *** Quits: karlosz (~karlosz@router.cloyne.org) (Quit: karlosz)
[02:40:27] *** Quits: ircseeker3 (~nodebot@185.187.243.123) (Remote host closed the connection)
[02:44:21] *** Joins: dsk (~dsk@user/dsk)
[02:54:37] *** Joins: akoana (~ah@user/akoana)
[02:59:15] *** Quits: Oddity (Oddity@user/oddity) (Ping timeout: 268 seconds)
[03:01:46] *** Quits: srhm (~ascii@user/srhm) (Quit: Konversation terminated!)
[03:02:08] *** Joins: srhm (~ascii@user/srhm)
[03:09:04] *** Joins: makomo_ (~makomo@user/makomo)
[03:09:08] *** Quits: frgo (~frgo@p200300deef181d00b51d11aabf3c221f.dip0.t-ipconnect.de) (Remote host closed the connection)
[03:09:36] *** Joins: frgo (~frgo@p200300deef181d00e18011f6846c28bb.dip0.t-ipconnect.de)
[03:11:52] *** Quits: sjl (~sjl@cpe-66-66-5-59.rochester.res.rr.com) (Quit: WeeChat 2.2-dev)
[03:12:12] *** Quits: makomo (~makomo@user/makomo) (Ping timeout: 268 seconds)
[03:15:03] *** Joins: kakuhen (~kakuhen@user/kakuhen)
[03:19:45] *** Quits: Alfr (~Alfr@user/alfr) (Remote host closed the connection)
[03:22:17] *** Quits: luna-is-here (~quassel@2a02:908:f761:2a3c::a) (Ping timeout: 252 seconds)
[03:22:18] *** Joins: Alfr (~Alfr@user/alfr)
[03:22:43] *** Joins: Inline_ (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431)
[03:23:04] *** Quits: scymtym (~user@ip-88-153-154-183.hsi04.unitymediagroup.de) (Ping timeout: 256 seconds)
[03:23:14] *** Quits: Inline (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431) (Ping timeout: 272 seconds)
[03:23:37] *** Joins: luna-is-here (~quassel@2a02:908:f761:2a3c::a)
[03:24:19] *** Joins: makomo (~makomo@user/makomo)
[03:24:30] *** Quits: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de) (Ping timeout: 272 seconds)
[03:24:53] *** Quits: makomo_ (~makomo@user/makomo) (Read error: Connection reset by peer)
[03:24:55] *** Joins: makomo__ (~makomo@user/makomo)
[03:25:46] *** Quits: gaqwas (~john@dynamic-077-009-062-015.77.9.pool.telefonica.de) (Ping timeout: 268 seconds)
[03:25:53] *** Joins: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de)
[03:25:55] *** Joins: scymtym (~user@ip-88-153-154-183.hsi04.unitymediagroup.de)
[03:28:41] *** Quits: makomo (~makomo@user/makomo) (Ping timeout: 248 seconds)
[03:32:06] *** Quits: amb007 (~a_bakic@cable-94-189-181-220.dynamic.sbb.rs) (Ping timeout: 272 seconds)
[03:34:03] *** Quits: makomo__ (~makomo@user/makomo) (Quit: WeeChat 3.0.1)
[03:34:12] *** Joins: makomo (~makomo@user/makomo)
[03:43:26] *** Quits: srhm (~ascii@user/srhm) (Quit: Konversation terminated!)
[03:43:48] *** Joins: srhm (~ascii@user/srhm)
[03:46:43] *** Joins: scymtym_ (~user@ip-88-153-154-183.hsi04.unitymediagroup.de)
[03:46:44] *** Quits: scymtym (~user@ip-88-153-154-183.hsi04.unitymediagroup.de) (Ping timeout: 268 seconds)
[03:47:10] *** Joins: igemnace (~ian@user/igemnace)
[03:47:53] *** Quits: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de) (Ping timeout: 248 seconds)
[03:48:18] *** Joins: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de)
[03:53:13] *** Quits: jeosol (~jeosol@76-238-186-228.lightspeed.hstntx.sbcglobal.net) (Ping timeout: 248 seconds)
[03:58:06] *** Quits: derelict (~derelict@user/derelict) (Quit: WeeChat 3.2)
[04:02:26] *** Joins: Oddity (Oddity@user/oddity)
[04:04:27] *** Quits: srhm (~ascii@user/srhm) (Read error: Connection reset by peer)
[04:04:50] *** Joins: srhm (~ascii@user/srhm)
[04:15:07] *** Quits: random-nick (~random-ni@87.116.179.82) (Ping timeout: 245 seconds)
[04:15:29] *** Joins: copec (~copec@home.unaen.org)
[04:17:20] *** Parts: akoana (~ah@user/akoana) ()
[04:23:05] *** Joins: kulernil (~kulernil@gateway/tor-sasl/kuler)
[04:23:38] *** Joins: dlowe (~dlowe@user/dlowe)
[04:24:33] *** Quits: dieggsy (~dieggsy@2001:470:69fc:105::91f) (Ping timeout: 252 seconds)
[04:24:58] *** Quits: icepic1984[m] (~icepic198@2001:470:69fc:105::cd23) (Ping timeout: 240 seconds)
[04:24:59] *** Quits: etimmons (~etimmons@2001:470:69fc:105::5d5) (Ping timeout: 252 seconds)
[04:25:06] *** Quits: JooTvora[m] (~joaotavor@2001:470:69fc:105::b9ad) (Ping timeout: 252 seconds)
[04:25:07] *** Quits: akater[m] (~akatermat@2001:470:69fc:105::ccef) (Ping timeout: 245 seconds)
[04:25:11] *** Quits: happy-dude (~happy-dud@2001:470:69fc:105::b4d7) (Ping timeout: 268 seconds)
[04:25:14] *** Quits: kuler (~kulernil@gateway/tor-sasl/kuler) (Remote host closed the connection)
[04:25:16] *** Quits: alphapapa[m] (~alphapapa@2001:470:69fc:105::18b7) (Ping timeout: 276 seconds)
[04:25:23] *** Quits: loke[m] (~loke@2001:470:69fc:105::237) (Ping timeout: 272 seconds)
[04:25:38] *** Quits: Gnuxie (~gnuxie@user/gnuxie) (Ping timeout: 252 seconds)
[04:25:39] *** Quits: Mrtn[m] (~mrtn@2001:470:69fc:105::1f44) (Ping timeout: 252 seconds)
[04:25:49] *** Quits: katco (~katco@2001:470:69fc:105::2b8) (Ping timeout: 268 seconds)
[04:25:49] *** Quits: hayley (~theemacss@user/hayley) (Ping timeout: 268 seconds)
[04:26:00] *** Quits: luis` (~luismboma@2001:470:69fc:105::cc7) (Ping timeout: 272 seconds)
[04:33:08] *** Joins: Qwnavery (~Qwnavery@user/qwnavery)
[04:33:43] <Qwnavery> Hi so I'm trying to figure out lambda functions in CL and I'm just doing so with a basic base, doubler, tripler function
[04:33:46] *** Joins: jeosol (~jeosol@76-238-186-228.lightspeed.hstntx.sbcglobal.net)
[04:34:07] <Josh_2> Whats your Q?
[04:34:14] <Qwnavery> ?
[04:34:31] <Josh_2> Idk, just seemed like you had a question coming
[04:34:36] <Qwnavery> yeah
[04:34:42] <Josh_2> :)
[04:35:17] <Qwnavery> so I've got (defun base (x) (lambda (a) (* x a)) and (defun doubler (x) (base 2) x))
[04:35:45] *** Quits: srhm (~ascii@user/srhm) (Quit: Konversation terminated!)
[04:36:09] <Josh_2> (defun doubler (x) (funcall (base 2) x)) something like that
[04:36:09] *** Joins: srhm (~ascii@user/srhm)
[04:36:17] <Qwnavery> and I'm not sure where I'm going wrong. when I try to call just ((base 2) 2) -> 4 for example it doesn't work.
[04:36:24] <Josh_2> Yeh
[04:36:26] <lotuseater> ohai Qwnavery :)
[04:36:31] <Qwnavery> hihi lotuseater
[04:36:32] <Josh_2> You need to use funcall
[04:37:12] <Qwnavery> does funcall convert a function pointer produced by lambda into a usable function?
[04:37:54] <lotuseater> doing (lambda ...) returns a function, you don't have to do #'(lambda ...)
[04:38:17] <Qwnavery> herm I see.
[04:38:21] <Qwnavery> thankyou Josh_2
[04:38:25] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 244 seconds)
[04:38:25] <Qwnavery> thankyou lotuseater
[04:38:35] <sm2n> it's actually kind of weird
[04:38:46] <sm2n> (lambda ...) is a macro that expands to #'(lambda ...)
[04:38:51] <lotuseater> try (funcall #'sqrt 2)
[04:39:07] <lotuseater> sm2n: yes it is ^^
[04:39:12] <Josh_2> Try (funcall 'sqrt 2) ;)
[04:39:30] <lotuseater> but weird doesn't mean something's not useful
[04:39:44] <Qwnavery> any difference between #'() and '()?
[04:39:55] <sm2n> and so the point to realize is that #'x is a reader macro for (function x), which is a special form
[04:39:57] <lotuseater> Qwnavery: yes
[04:40:09] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 248 seconds)
[04:40:26] <lotuseater> funcall looks up the symbol-function for the provided symbol with only '
[04:40:33] <Josh_2> funcall will do a lookup if you just pass a symbol
[04:40:41] <Josh_2> very useful if you plan on changing the definition of things
[04:41:01] <Qwnavery> what about #'?
[04:41:04] <lotuseater> #' is a readmacro that turns #'foo into (function foo) like 'foo makes (quote foo)
[04:41:11] <Qwnavery> oh
[04:41:17] <Qwnavery> so they are inverse
[04:41:31] <sm2n> I don't know what you mean by "inverse"
[04:41:35] <Qwnavery> one converts to a symbol, the other converts to a funtion?
[04:41:42] <lotuseater> ehm yes not very inverse
[04:41:46] <Josh_2> no
[04:42:03] <Josh_2> 'sqrt = (quote sqrt)
[04:42:13] *** Joins: aeth (~aeth@user/aeth)
[04:42:20] <Josh_2> #'sqrt = (function sqrt)
[04:42:51] <Qwnavery> erm I've never seen (function x) before?
[04:42:57] <Josh_2> Type it into your repl
[04:42:57] <Qwnavery> I know (quote x)
[04:43:01] <sm2n> http://clhs.lisp.se/Body/s_fn.htm#function
[04:43:12] <lotuseater> ah I think he thinks the "#" gets applied to 'foo, but that are independent things
[04:43:14] <Josh_2> Type (function sqrt) into repl and #'sqrt
[04:43:14] *** Joins: hendursaga (~weechat@user/hendursaga)
[04:44:07] <Qwnavery> erm ok? not sure the usecases for that
[04:44:19] <lotuseater> Josh_2: so if I use COMPILE to redefine a definition it's better to just pass the symbol?
[04:44:42] <lotuseater> Qwnavery: preventing you from writing (quote ...) and (function ...) every time
[04:45:07] <Josh_2> Thats what I do lotuseater
[04:45:10] <Qwnavery> lotuseater: the use of (function ...)
[04:45:21] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Quit: ec)
[04:45:23] <lotuseater> writing '(A B C) is the same as (list 'A 'B 'C) so you just have to write ONE quote
[04:45:52] <lotuseater> Qwnavery: it's when writing macros where the name is not known in before
[04:46:20] <lotuseater> and of course FUNCTION is one of the 25 special operators like eg LET
[04:46:56] <Qwnavery> erm..
[04:47:06] <lotuseater> *blub*
[04:47:14] <Qwnavery> why does lisp have to be such a pain in the a$$ to learn
[04:47:16] <Josh_2> This stuff doesn't matter that much when all you are trying to do is called an anonymous function :P
[04:47:30] <Josh_2> (funcall (lambda (x) (print x)) "hello world")
[04:48:05] <lotuseater> it isn't, but you asked a question that's not good to be answered at an entry level
[04:48:33] <Qwnavery> I get lambda calculus, I was just worried about the syntax
[04:48:45] <Qwnavery> I gotta go
[04:48:47] <Qwnavery> thanks
[04:48:47] *** Quits: Qwnavery (~Qwnavery@user/qwnavery) (Quit: WeeChat 3.2)
[04:50:49] *** Quits: makomo (~makomo@user/makomo) (Ping timeout: 248 seconds)
[04:50:55] <lotuseater> I remember, was a bit confusing for me at the beginning getting the difference between FUNCALL and APPLY.
[04:51:40] <Josh_2> I just ignored apply until I found the use case, now I use it all the time
[04:52:04] <lotuseater> :)
[04:55:27] *** Joins: derelict (~derelict@user/derelict)
[04:55:51] *** Joins: happy-dude (~happy-dud@2001:470:69fc:105::b4d7)
[04:57:54] *** Quits: nirnam (~nirnam@1.46.140.64) (Remote host closed the connection)
[05:04:02] *** Quits: dlowe (~dlowe@user/dlowe) (Remote host closed the connection)
[05:14:15] *** Quits: copec (~copec@home.unaen.org) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[05:18:19] *** Quits: igemnace (~ian@user/igemnace) (Quit: WeeChat 3.2)
[05:21:02] *** Quits: dsk (~dsk@user/dsk) (Ping timeout: 272 seconds)
[05:24:08] *** Joins: Qwnavery (~Qwnavery@user/qwnavery)
[05:24:43] *** Quits: srhm (~ascii@user/srhm) (Quit: Konversation terminated!)
[05:25:08] *** Joins: srhm (~ascii@user/srhm)
[05:26:16] *** Joins: loke[m] (~loke@2001:470:69fc:105::237)
[05:35:09] *** Joins: lisp123 (~lisp123@5.30.23.247)
[05:39:42] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 245 seconds)
[05:45:35] *** Quits: srhm (~ascii@user/srhm) (Read error: Connection reset by peer)
[05:45:58] *** Joins: srhm (~ascii@user/srhm)
[05:48:39] *** Joins: mfiano (~mfiano@li1282-157.members.linode.com)
[05:50:41] *** Quits: taiju (~taiju@M014013236064.v4.enabler.ne.jp) (Ping timeout: 268 seconds)
[05:54:42] *** Quits: Qwnavery (~Qwnavery@user/qwnavery) (Quit: WeeChat 3.2)
[05:55:00] *** Joins: alphapapa[m] (~alphapapa@2001:470:69fc:105::18b7)
[05:56:46] *** Joins: lottaquestions (~nick@S0106a84e3f794893.ca.shawcable.net)
[06:02:21] *** Joins: dieggsy (~dieggsy@2001:470:69fc:105::91f)
[06:03:52] *** Quits: frgo (~frgo@p200300deef181d00e18011f6846c28bb.dip0.t-ipconnect.de) (Ping timeout: 245 seconds)
[06:06:19] *** Quits: lotuseater (~user@p200300e7871b3f008a69ffac690ca7c7.dip0.t-ipconnect.de) (Quit: ERC (IRC client for Emacs 27.2))
[06:08:09] *** Joins: frgo (~frgo@p200300deef0cee000dc27aed655f6be3.dip0.t-ipconnect.de)
[06:22:03] *** Quits: srhm (~ascii@user/srhm) (Quit: Konversation terminated!)
[06:22:28] *** Joins: srhm (~ascii@user/srhm)
[06:23:50] *** Joins: icepic1984[m] (~icepic198@2001:470:69fc:105::cd23)
[06:24:54] *** Quits: lottaquestions (~nick@S0106a84e3f794893.ca.shawcable.net) (Quit: Konversation terminated!)
[06:29:57] *** Joins: karlosz (~karlosz@router.cloyne.org)
[06:35:18] *** Joins: taiju (~taiju@M014013236064.v4.enabler.ne.jp)
[06:42:55] *** Quits: srhm (~ascii@user/srhm) (Quit: Konversation terminated!)
[06:43:18] *** Joins: srhm (~ascii@user/srhm)
[06:46:16] *** Joins: katco (~katco@2001:470:69fc:105::2b8)
[06:46:20] *** Quits: waleee (~waleee@h-98-128-228-119.NA.cust.bahnhof.se) (Ping timeout: 252 seconds)
[06:51:37] *** Joins: akater[m] (~akatermat@2001:470:69fc:105::ccef)
[06:55:25] *** Joins: luis` (~luismboma@2001:470:69fc:105::cc7)
[07:00:04] *** Joins: hayley (~theemacss@2001:470:69fc:105::234)
[07:01:32] *** Quits: hayley (~theemacss@2001:470:69fc:105::234) (Changing host)
[07:01:32] *** Joins: hayley (~theemacss@user/hayley)
[07:06:55] *** Joins: JooTvora[m] (~joaotavor@2001:470:69fc:105::b9ad)
[07:07:39] *** Joins: etimmons (~etimmons@2001:470:69fc:105::5d5)
[07:12:18] *** Quits: z3t0 (~z3t0@107-159-14-254.on.dsl.ebox.net) (Read error: Connection reset by peer)
[07:13:18] *** Joins: z3t0 (~z3t0@107-159-14-254.on.dsl.ebox.net)
[07:16:52] *** Joins: Gnuxie (~gnuxie@user/gnuxie)
[07:17:49] *** Joins: Mrtn[m] (~mrtn@2001:470:69fc:105::1f44)
[07:18:01] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 248 seconds)
[07:18:47] *** Joins: nij- (~jin@2001-48F8-9021-806-0-0-0-F0C2-dynamic.midco.net)
[07:20:34] <nij-> Hello, in one of the example, it asks me to run `(click "[name=btnK]")` once it opens the page www.google.com and types in something. However, an error was fired. I guess it's because that google has updated its page, so the selector "btnK" no longer works. My question is, how do I get the selector name independently by inspecting the web page? https://github.com/TatriX/cl-selenium-webdriver
[07:21:47] *** Joins: prxq (~quassel@x4db90fef.dyn.telefonica.de)
[07:22:02] <hayley> I got the class gNO89b, which would be (click ".gNO89b") or something. Loosely speaking, right click on the button, click "inspect element", then the right node will be highlighted in the inspector.
[07:23:59] <nij-> Weird! I tried again and it works. And indeed, in the inspection it does name itself "btnK"
[07:24:10] <nij-> So that's the trick! Thanks :) lemme play with it a bit.
[07:25:23] *** Quits: doyougnu (~user@c-73-25-202-122.hsd1.or.comcast.net) (Remote host closed the connection)
[07:25:48] *** Quits: prxq_ (~quassel@x4db330a1.dyn.telefonica.de) (Ping timeout: 272 seconds)
[07:32:10] <beach> Good morning everyone!
[07:32:34] <nij-> Good morning beach :)
[07:35:01] *** Quits: Bike (~Glossina@71.69.170.70) (Quit: Lost terminal)
[07:36:54] *** Joins: lisp123 (~lisp123@5.30.23.247)
[07:41:20] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 258 seconds)
[07:43:11] *** Joins: Fare (~fare@2601:184:4a7f:995c::871)
[07:44:36] *** Quits: karlosz (~karlosz@router.cloyne.org) (Quit: karlosz)
[07:45:07] *** Joins: dsk (~dsk@user/dsk)
[07:48:21] <nij-> hayley: Hmm.. I played around with it. It worked for google, reddit, but it didn't work for chase bank: https://secure05b.chase.com/web/auth/dashboard
[07:49:20] <hayley> Looks like you want #signin-button for the button, rather than the label. But what are you doing automating a bank UI?
[07:49:58] <nij-> I failed to click on the user input text field. Have tried "class" "id" ..
[07:50:18] <nij-> I want to hack the bank and get rich.
[07:50:20] <nij-> Just kidding.
[07:50:28] <nij-> I want to get my personal info automatically.
[07:50:44] *** Quits: srhm (~ascii@user/srhm) (Quit: Konversation terminated!)
[07:51:03] * hayley hopes the FBI has a stable IRC connection.
[07:51:08] *** Joins: srhm (~ascii@user/srhm)
[07:51:13] * nij- thinks JS is so complicated.
[07:51:27] * nij- is just kidding. FBI! FBI! I was just kidding :)
[07:56:54] *** Joins: igemnace (~ian@user/igemnace)
[08:01:57] *** Quits: phantomics (~phantomic@71-218-228-208.hlrn.qwest.net) (Read error: Connection reset by peer)
[08:03:41] *** Joins: phantomics (~phantomic@97-118-239-225.hlrn.qwest.net)
[08:22:18] *** Quits: srhm (~ascii@user/srhm) (Read error: Connection reset by peer)
[08:22:38] *** Joins: srhm (~ascii@user/srhm)
[08:25:29] <nij-> I have no idea.. maybe I should learn the language of selenium?
[08:27:36] *** Inline_ is now known as Inline
[08:45:50] *** Joins: amb007 (~a_bakic@net157-37-245-109.mbb.telenor.rs)
[08:45:50] *** Quits: amb007 (~a_bakic@net157-37-245-109.mbb.telenor.rs) (Read error: Connection reset by peer)
[08:46:04] *** Joins: amb007 (~a_bakic@cable-94-189-181-220.dynamic.sbb.rs)
[09:04:46] *** kulernil is now known as kuler
[09:09:10] *** Quits: Inline (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431) (Quit: Leaving)
[09:14:24] *** Quits: srhm (~ascii@user/srhm) (Quit: Konversation terminated!)
[09:14:48] *** Joins: srhm (~ascii@user/srhm)
[09:35:14] *** Quits: srhm (~ascii@user/srhm) (Quit: Konversation terminated!)
[09:35:38] *** Joins: srhm (~ascii@user/srhm)
[09:38:48] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-F0C2-dynamic.midco.net) (Ping timeout: 272 seconds)
[09:41:58] *** Quits: taiju (~taiju@M014013236064.v4.enabler.ne.jp) (Ping timeout: 272 seconds)
[09:58:59] *** Parts: pranavats (3fba1d1b34@jabberfr.org) (Disconnected: Received SIGTERM)
[10:11:53] *** Joins: pranavats (3fba1d1b34@jabberfr.org)
[10:14:41] *** Joins: lisp123 (~lisp123@5.30.23.247)
[10:19:19] *** Parts: pranavats (3fba1d1b34@jabberfr.org) (Disconnected: Received SIGTERM)
[10:19:32] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 268 seconds)
[10:21:42] *** Joins: pranavats (3fba1d1b34@jabberfr.org)
[10:25:11] *** Joins: taiju (~taiju@p236053-ipngn200203fukui.fukui.ocn.ne.jp)
[10:29:37] *** Quits: taiju (~taiju@p236053-ipngn200203fukui.fukui.ocn.ne.jp) (Ping timeout: 258 seconds)
[10:31:00] *** Joins: lisp123 (~lisp123@5.30.23.247)
[10:34:01] *** Parts: pranavats (3fba1d1b34@jabberfr.org) (Disconnected: Received SIGTERM)
[10:35:35] *** Joins: taiju (~taiju@p236053-ipngn200203fukui.fukui.ocn.ne.jp)
[10:37:33] *** Joins: pranavats (3fba1d1b34@jabberfr.org)
[10:43:53] *** Quits: taiju (~taiju@p236053-ipngn200203fukui.fukui.ocn.ne.jp) (Ping timeout: 248 seconds)
[10:45:53] *** Parts: pranavats (3fba1d1b34@jabberfr.org) (Disconnected: Received SIGTERM)
[10:49:17] *** Joins: pranavats (3fba1d1b34@jabberfr.org)
[10:51:01] <lisp123> If I am writing a class for Object, should I call it Object or Objects & should I call the file object.lisp or objects.lisp?
[10:51:17] <lisp123> I think singular, but checking
[10:51:27] *** Parts: pranavats (3fba1d1b34@jabberfr.org) (Disconnected: Received SIGTERM)
[10:51:58] <lisp123> Sorry, to clarify - I believe it should be (defclass object ...) and the file should be objects.lisp
[10:53:17] <hayley> The class name should be singular, and generally I tend to make file names singular nouns too.
[10:53:41] *** Joins: pranavats (3fba1d1b34@jabberfr.org)
[10:54:45] *** Joins: shka (~herr@109.231.62.239)
[10:54:46] <lisp123> hayley: thanks
[10:54:52] <hayley> ...or verbs. It depends on what way you think presenting your code is best.
[10:55:29] <lisp123> hayley: do you have an example of using verbs?
[10:56:04] <hayley> In my regular expression compiler I chose to define all the classes in one file, and then write a file per function, so that each file would roughly match up with a function defined in the papers.
[10:56:27] *** Joins: taiju (~taiju@p236053-ipngn200203fukui.fukui.ocn.ne.jp)
[10:56:42] <lisp123> hayley: Thanks, that makes sense
[10:56:51] *** Parts: pranavats (3fba1d1b34@jabberfr.org) (Disconnected: Received SIGTERM)
[10:56:58] <hayley> https://github.com/telekons/one-more-re-nightmare/tree/local-hash-cons/Code/Compiler though, come to think of it, the names are almost all nouns.
[10:58:12] <lisp123> I am generally moving that way too, doing nearly alawys nouns except where a verb reads much more
[10:58:54] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[10:59:28] *** Joins: pranavats (3fba1d1b34@jabberfr.org)
[11:00:22] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 256 seconds)
[11:00:22] *** Lord_of_Life_ is now known as Lord_of_Life
[11:03:48] *** Joins: pve (~pve@37-33-27-4.bb.dnainternet.fi)
[11:04:33] *** Joins: Cymew (~ante@c-e989225c.023-1144-7570702.bbcust.telenor.se)
[11:07:33] *** Parts: pranavats (3fba1d1b34@jabberfr.org) (Disconnected: Received SIGTERM)
[11:10:33] *** Joins: pranavats (3fba1d1b34@jabberfr.org)
[11:29:02] *** Quits: Fare (~fare@2601:184:4a7f:995c::871) (Ping timeout: 258 seconds)
[11:36:32] *** Joins: rain3 (~rain3___@2a02:2f09:d30b:1300:514:bcc7:8202:1798)
[11:38:04] *** Quits: srhm (~ascii@user/srhm) (Read error: Connection reset by peer)
[11:38:30] *** Joins: srhm (~ascii@user/srhm)
[11:50:14] *** Quits: hafat (~hafat@159.146.87.68) (Ping timeout: 256 seconds)
[11:58:54] *** Quits: srhm (~ascii@user/srhm) (Quit: Konversation terminated!)
[11:59:16] *** Joins: Qwnavery (~Qwnavery@user/qwnavery)
[11:59:18] *** Joins: srhm (~ascii@user/srhm)
[12:01:02] *** Joins: kulernil (~kulernil@gateway/tor-sasl/kuler)
[12:01:31] *** Quits: kuler (~kulernil@gateway/tor-sasl/kuler) (Remote host closed the connection)
[12:04:29] <beach> scymtym_: Around?
[12:06:13] *** Quits: amb007 (~a_bakic@cable-94-189-181-220.dynamic.sbb.rs) (Ping timeout: 258 seconds)
[12:06:25] *** Joins: retropikel (~retropike@2001:999:200:1f35:89a7:512c:3e01:fea2)
[12:07:00] *** Joins: amb007 (~a_bakic@net219-37-245-109.mbb.telenor.rs)
[12:11:01] *** Joins: lisp-newbie (~lisp-newb@87.71.111.186)
[12:11:01] *** Quits: amb007 (~a_bakic@net219-37-245-109.mbb.telenor.rs) (Read error: Connection reset by peer)
[12:11:55] *** Joins: amb007 (~a_bakic@net219-37-245-109.mbb.telenor.rs)
[12:15:19] *** Joins: hafat (~hafat@159.146.87.68)
[12:16:52] <mfiano> I've been using a little reader trick I learned a while ago I thought I'd share.
[12:16:52] *** Quits: amb007 (~a_bakic@net219-37-245-109.mbb.telenor.rs) (Read error: Connection reset by peer)
[12:17:07] *** Joins: amb007 (~a_bakic@93.87.81.15)
[12:17:34] *** Quits: d4ryus (~d4ryus@ppp-188-174-54-240.dynamic.mnet-online.de) (Quit: WeeChat 3.2)
[12:18:04] <mfiano> Sometimes I will globally SETF the value of *read-base* in my REPL to do some calculations. To get restore the default efficiently, one can do (setf *read-base* 10.) since a decimal point after an integer is not treated as a float, but a base-10 integer.
[12:18:19] <mfiano> May or may not have been known to you, enjoy regardless :)
[12:19:00] *** Quits: amb007 (~a_bakic@93.87.81.15) (Read error: Connection reset by peer)
[12:21:39] <pjb> Yes, in 10.  . is called the _decimal_ point  which means, the base-ten point ;-)  This is not the floating-point point!
[12:21:42] *** Joins: amb007 (~a_bakic@net219-37-245-109.mbb.telenor.rs)
[12:21:51] <pjb> In 10.0  . would be the floating-point point…
[12:21:51] *** Quits: amb007 (~a_bakic@net219-37-245-109.mbb.telenor.rs) (Read error: Connection reset by peer)
[12:22:14] *** Joins: amb007 (~a_bakic@93.87.81.15)
[12:22:17] <pjb> or in .10 !!!
[12:22:52] <mfiano> Confusingly only in base 10
[12:22:58] <mfiano> It is called a radix point in other bases
[12:24:46] <flip214> #xa is an integer and means 10(decimal) either way
[12:25:09] <mfiano> Sure
[12:26:17] <mfiano> I just find it intuitive to be able to specify the read base you want _in_ the read base you want
[12:26:20] *** Joins: makomo (~makomo@user/makomo)
[12:27:11] *** Joins: gaqwas (~john@dynamic-077-007-108-005.77.7.pool.telefonica.de)
[12:28:51] <beach> I am considering asking for help to make progress on Second Climacs (provided scymtym has no objections).  Specifically I would like to replace the SICL reader used by Second Climacs by Eclector.  The reader is used to parse buffer contents when Common Lisp code is being edited.
[12:29:10] <beach> I am willing to pay a modest amount of money for this to happen.
[12:29:26] <mfiano> That seems to require some particular domain knowledge. Who do you have in mind?
[12:29:44] <beach> I am thinking that a relative newbie might be the best.
[12:29:59] <mfiano> That is not I
[12:30:08] <edgar-rft> mfiano: 10. is a fixnum, so the point is a fixpoint :-)
[12:30:15] <beach> mfiano: If you are interested and available, that is fine too.
[12:30:35] <beach> mfiano: I was just assuming most experienced people are busy.
[12:30:42] <beach> I would be delighted to be wrong.
[12:31:13] <mfiano> beach: I would, I really would, but I fear it is out of my domain of expertise and I would be wasting time and money acquainting myself with it before work could even progress.
[12:31:18] <mfiano> I kindly decline
[12:31:40] <beach> mfiano: That would not be a problem for me.
[12:31:52] *** Quits: lisp-newbie (~lisp-newb@87.71.111.186) (Quit: This computer has gone to sleep)
[12:32:06] <beach> I am willing to spend some money for someone to acquire the knowledge of the domain.
[12:32:09] *** Joins: lisp-newbie (~lisp-newb@87.71.111.186)
[12:32:19] *** Quits: lisp-newbie (~lisp-newb@87.71.111.186) (Remote host closed the connection)
[12:32:29] *** Joins: lisp-newbie (~lisp-newb@87.71.111.186)
[12:32:40] *** Quits: lisp-newbie (~lisp-newb@87.71.111.186) (Remote host closed the connection)
[12:32:41] *** Joins: d4ryus (~d4ryus@ppp-188-174-54-240.dynamic.mnet-online.de)
[12:32:51] *** Joins: lisp-newbie (~lisp-newb@87.71.111.186)
[12:33:10] *** Quits: lisp-newbie (~lisp-newb@87.71.111.186) (Remote host closed the connection)
[12:33:29] <mfiano> Ask me again if you are unable to find anyone willing. I just don't want to disappoint.
[12:33:47] <beach> mfiano: I am willing to take that risk.
[12:33:49] *** Joins: cage (~cage@dynamic-adsl-78-15-36-212.clienti.tiscali.it)
[12:34:01] *** Joins: lisp-newbie (~lisp-newb@2a0d:6fc0:789:3600:4d13:a99d:a8f9:cfe8)
[12:34:09] <beach> mfiano: And someone like you would require a lot less time investment on my part, so that's fine too.
[12:34:15] *** Quits: lisp-newbie (~lisp-newb@2a0d:6fc0:789:3600:4d13:a99d:a8f9:cfe8) (Read error: Connection reset by peer)
[12:34:43] *** Joins: lisp-newbie (~lisp-newb@2a0d:6fc0:789:3600:4d13:a99d:a8f9:cfe8)
[12:34:49] <mfiano> I would be fine with it then if you are
[12:34:57] <beach> Excellent!
[12:35:58] *** Joins: hendursa1 (~weechat@user/hendursaga)
[12:38:24] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 244 seconds)
[12:39:26] *** Quits: lisp-newbie (~lisp-newb@2a0d:6fc0:789:3600:4d13:a99d:a8f9:cfe8) (Ping timeout: 252 seconds)
[12:43:14] <pl> beach: only slightly related question as I don't have time to hit the paper right now - did Second Climacs have any optimization for long lines?
[12:44:08] <beach> It uses Cluffer which has a gap buffer for each line, but since that's a protocol question, it is easy to supply a different implementation of the protocol.
[12:44:15] *** Quits: cage (~cage@dynamic-adsl-78-15-36-212.clienti.tiscali.it) (Remote host closed the connection)
[12:44:33] <beach> I mean, Cluffer has a protocol for editing a single line, and you can supply your own implementation.
[12:44:48] *** Joins: cage (~cage@dynamic-adsl-78-15-36-212.clienti.tiscali.it)
[12:44:51] <beach> The STANDARD-LINE implementation uses a gap buffer.
[12:45:09] <pl> mhm
[12:45:41] <pl> it's just that recently I talked with someone regarding very long lines in emacs and other editors, and I wondered how 2nd climacs would deal with it
[12:47:11] <beach> Sure.  It can't be worse than Emacs (unless Emacs has changed), since Emacs uses a single gap buffer for the entire buffer (or used to at least).
[12:47:33] <pl> still uses
[12:47:50] <beach> The worst case for a gap buffer is if you go to the beginning, edit, go to the end, edit, etc.
[12:48:05] <beach> But that worst case is already taken care of by something like Flexichain.
[12:48:59] <beach> But normally, editing is done with some spatial locality, and then a gap buffer is great.
[12:49:23] <beach> For the sequence of lines, Cluffer uses a splay tree by default.
[12:49:36] <beach> Again, a different implementation can be substituted.
[12:50:19] <beach> Splay trees also take advantage of spatial locality.
[12:51:35] *** Joins: lisp-newbie (~lisp-newb@2a0d:6fc0:789:3600:4d13:a99d:a8f9:cfe8)
[12:58:37] *** Joins: svillemot (~sebastien@rama.villemot.name)
[13:05:45] *** Quits: amb007 (~a_bakic@93.87.81.15) (Ping timeout: 248 seconds)
[13:06:13] *** Joins: amb007 (~a_bakic@net219-37-245-109.mbb.telenor.rs)
[13:06:54] *** Quits: srhm (~ascii@user/srhm) (Quit: Konversation terminated!)
[13:07:20] *** Joins: srhm (~ascii@user/srhm)
[13:24:25] <Qwnavery> beach: someone mention a relative newbie?
[13:24:25] *** Quits: amb007 (~a_bakic@net219-37-245-109.mbb.telenor.rs) (Read error: Connection reset by peer)
[13:24:50] *** Joins: amb007 (~a_bakic@net219-37-245-109.mbb.telenor.rs)
[13:24:56] <beach> Qwnavery: Yes, I did.  The particular project I had in mind is taken for now, but I am willing to discuss other projects.
[13:25:17] <Qwnavery> beach: what do you need done?
[13:25:40] <Qwnavery> or do yo have a list of projects on a site with TODOs?
[13:25:43] <beach> Qwnavery: The general idea is that I need help to make progress on several projects, but there are very few people who are both qualified and available.
[13:26:07] <Qwnavery> well, I'm looking for projects to study (reading others code) and perhaps contribute too.
[13:26:13] <Qwnavery> s/too/to/
[13:26:21] <beach> Qwnavery: So my thinking is that, if there is a "relative newbie" who would like to invest in something like that, I could be that person's "mentor".
[13:26:32] <Qwnavery> beach: no.
[13:26:38] <Qwnavery> I'm not after a mentor.
[13:26:45] <beach> That's fine too.
[13:26:46] *** Quits: hafat (~hafat@159.146.87.68) (Quit: Leaving)
[13:27:25] <beach> So let me start by giving you a list of suggested projects...
[13:27:31] <Qwnavery> I have projects in mind i.e. a clone of Total Commander (midnight commander is doodoo) but I would like to have some other projects to work on.
[13:28:19] <Qwnavery> I've read esr's blog on hackerdom. I'm not here to waste your time.
[13:28:40] <beach> http://metamodular.com/Common-Lisp/suggested-projects.html
[13:30:07] <Qwnavery> By Lisp Operating system I hope you refer to the components to interact with it, not the management of programs and low-level operations the language should handle :)
[13:30:08] *** Quits: amb007 (~a_bakic@net219-37-245-109.mbb.telenor.rs) (Read error: Connection reset by peer)
[13:30:30] <beach> Qwnavery: Why do you hope that?
[13:31:20] *** Joins: amb007 (~a_bakic@93.87.81.91)
[13:31:52] <Qwnavery> Because the language should be the operating system.
[13:32:09] <Qwnavery> ie lisp machines.
[13:32:37] <beach> I don't make a sharp distinction between the two.
[13:32:50] *** Joins: trriplex (~trriplex@user/trriplex)
[13:33:33] *** Quits: trriplex (~trriplex@user/trriplex) (Client Quit)
[13:34:09] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[13:34:50] *** Joins: lisp123 (~lisp123@5.30.23.247)
[13:35:37] <Qwnavery> grammar checking library - any progress on it?
[13:36:14] <beach> I think phoe started with the dictionary, but nothing beyond that I think.
[13:36:24] <Qwnavery> ok.
[13:37:34] <mfiano> Of course you need a game of solitaire for any OS :)
[13:37:39] <beach> Qwnavery: A "relative newbie" who doesn't want a mentor sounds strange to me.  I think it would be best, then, that you work on independent projects, rather than that you contribute to existing ones.
[13:38:01] <Qwnavery> beach: I know python, that's about it.
[13:38:35] <beach> Qwnavery: What I mean is that, without a mentor, you are unlikely to pick up on conventions, whether general or specific to a particular project.
[13:38:47] <beach> So the code you produce may not be very idiomatic.
[13:39:02] <Qwnavery> fair.
[13:39:18] <kakuhen> beach is right -- i'm helping someone with a game in CL for fun and they pretty much teach me everything I now know about common lisp conventions etc
[13:39:43] <kakuhen> sometimes i would unnecessarily pollute a namespace without even realizing it, and he would point it out to me so i could fix it
[13:39:47] <kakuhen> little things like that build up over time
[13:39:58] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 268 seconds)
[13:39:58] *** Quits: gaqwas (~john@dynamic-077-007-108-005.77.7.pool.telefonica.de) (Ping timeout: 268 seconds)
[13:40:31] <beach> kakuhen: Right.  And I don't know Qwnavery very well (yet), but we get a significant number of newbies here who explicitly reject any idea of adhering to conventions.
[13:40:37] <Qwnavery> Isn't it just write functional, try sticking tail recursion in for speed, keep side-effects to a minimum, use ASDF, write portable code?
[13:40:54] <kakuhen> if only it were just that ;^^
[13:40:55] <jackdaniel> half of it sounds like scheme
[13:40:59] <mfiano> beach: 404 for "this document": http://metamodular.com/Common-Lisp/graph-layout-library.html
[13:41:02] <jackdaniel> not like common lisp ,)
[13:41:02] <hayley> Not necessarily, don't count on it, depends, yes, yes.
[13:41:04] <beach> Qwnavery: For one thing, none of the code I write (or want) is written in a functional style.
[13:41:11] <Qwnavery> beach: OOP?
[13:41:16] <beach> mfiano: I'll look into it.
[13:41:23] *** Joins: lisp123 (~lisp123@5.30.23.247)
[13:41:24] <beach> Qwnavery: CLOS-style.
[13:41:51] <beach> hayley: Nice summary! :)
[13:42:06] <kakuhen> Qwnavery: CLOS feels very different than OOP in languages like Python and C++ imo; you'll just have to ask people around here how they do things in CLOS so you can see it
[13:42:27] <kakuhen> if you want to see the tip of the iceberg of what CLOS can do, check out the dynamic-mixins library
[13:42:33] <mfiano> beach: URL is case sensitive. Just change the "D" in "Documentation" to "d"
[13:42:37] <beach> kakuhen: Hence my suggestion about being a mentor, and that was rejected.
[13:42:47] <beach> mfiano: Thank you.
[13:42:51] <hayley> I remember that cl-decentralise1 was (probably) my first independent CL project, and I remember it used to be subtly unidiomatic in ways.
[13:42:52] <Qwnavery> ok. I just don't want to be a nuisance
[13:43:38] <beach> mfiano: Right now I am doing way too many things simultaneously, and I also need lunch and more sleep than I got last night, so it won't be immediate.
[13:43:44] <Qwnavery> beach: well, I mean no offence, I'm of the idea that most do not wish to be a mentor to newbs.
[13:43:45] <beach> mfiano: Remind me if I forget, please.
[13:43:50] <mfiano> Sure
[13:43:52] <lisp-newbie> Hi guys, I've been reading PCL and I'm trying to do a simple macro based on what I read on chapters 3, 7 and so far in 8, and I keep getting a unbound variable error. Can you please take a look: https://pastebin.com/xYC6VuMR
[13:44:07] *** Joins: kevingal (~quassel@2a02:8084:4140:f300:c9dc:5689:c333:f2d7)
[13:44:21] <hayley> For example, rather than using a generic function, I had slots in each server instance contain functions to perform database actions (write object, read object, get iterator for all object names, etc). That was corrected eventually, but only after someone on #lisp pulled me up on it.
[13:44:25] <lisp-newbie> In the top I wrote the goal of what the macro should create
[13:44:27] <beach> Qwnavery: Well, since there are very few people who are both available and qualified, that's the solution I came up with.  I am a teacher, so I can do that kind of stuff.
[13:44:46] <rain3> beach: please accept me as your disciple
[13:44:58] <rain3> I want to learn and contribute
[13:45:21] <beach> rain3: That can definitely be discussed.  What kind of project would you like to work on?
[13:45:41] <hayley> Well, I think you are calling a different function, as the macroexpansion mentions |user-GET|, which is notably not the same as USER-GET.
[13:45:55] <lisp-newbie> The pastebin has the goal of the macro, the short macro, the macroexpand, and the error... https://pastebin.com/xYC6VuMR
[13:46:03] <lisp-newbie> hayley because of the caps?
[13:46:24] <rain3> beach: clim related would be fine, since I have started learning CLIM . I'd like to work on pretty much any project that is useful
[13:46:30] <lisp-newbie> hayley I don't know how the || got in there, but it seems that's what I'm calling because the error references model-class
[13:46:32] <lisp-newbie> let me check
[13:46:36] <hayley> Sort of.
[13:46:54] <Qwnavery> beach: I don't want to waste your time.
[13:47:02] <beach> rain3: Perfect.  Let me check something with hayley...
[13:47:13] <beach> hayley: Did you ever get around to doing a GUI for the accounting system?
[13:47:18] <hayley> While you can write symbols in any casae, the reader will upcase the names.
[13:47:25] <lisp-newbie> hayley doing (|user-GET| 4) I get Evaluation aborted for #<SB-KERNEL:CASE-FAILURE expected-type: (OR SYMBOL STANDARD-CLASS) datum: (CLASS-OF *JOHN*)>
[13:47:27] <beach> ... a CLIM GUI I mean.
[13:47:39] <rain3> "accounting system" is the kind of project I would really like to work on
[13:47:48] <beach> rain3: Perfect.
[13:48:42] <kakuhen> rain3: depending on what you mean with "accounting system," i may be interested in helping with such a project
[13:48:45] <beach> rain3: Do you know about double bookkeeping?
[13:48:51] <hayley> No, only a web UI. But the whole project stinks of "someone set an arbitrary deadline and timeline on me" in a way, so I think it deserves a rewrite.
[13:49:04] <rain3> beach: I have only heard the term but I will read about it to grasp what it means
[13:49:06] <beach> hayley: OK.
[13:49:34] <beach> rain3: It is essential, but also very simple.
[13:49:42] <hayley> ...in the case that you would ask to use Clomptroller for the backend. Oh, and "someone asked me to write an algorithm, so I wrote a lousy compression algorithm" too :)
[13:50:37] <beach> rain3: I desperately need a long-ish lunch break, but let's discuss this later or in the near future.
[13:50:53] <beach> kakuhen: Two people working on such a thing would not be wrong.
[13:51:14] <hayley> lisp-newbie: So, when making symbols in a program you wrote, you do not have the reader to upcase symbol names. Thus you either have to use an all-upcase string, or upcase the name before creating a symbol using SYMBOLICATE.
[13:52:02] *** Joins: nij- (~jin@2001-48F8-9021-806-0-0-0-D91A-dynamic.midco.net)
[13:52:02] <rain3> beach: enjoy the break , and I will hope we'll get to it as soon as possible
[13:52:10] <beach> Thanks.
[13:52:43] <hayley> The other problem, which you just found, is that you have quoted (CLASS-OF *JOHN*) and thus FIND-DAO is passed that list as (I assume) a class specifier. Just remove the quote before ,model-class
[13:52:50] <lisp-newbie> hayley ah ok, will try it with that now, thanks
[13:53:29] <nij-> Hello :) What's a good rpc scheme between lisp and shell?
[13:53:35] <nij-> (POSIX shell)
[13:53:58] <nij-> I've been thinking about this for a while. Doesn't have too much idea, as shell is mostly text..
[13:55:01] *** Quits: lisp-newbie (~lisp-newb@2a0d:6fc0:789:3600:4d13:a99d:a8f9:cfe8) (Quit: This computer has gone to sleep)
[13:55:02] <hayley> What kind of objects do you need to pass between them? Generally, I don't think you can easily pass anything more than strings and integers.
[13:55:17] *** Joins: lisp-newbie (~lisp-newb@87.71.111.186)
[13:55:28] *** Quits: lisp-newbie (~lisp-newb@87.71.111.186) (Remote host closed the connection)
[13:55:28] <nij-> All lisp readably printable objects <- lets start with this.
[13:55:37] *** Joins: lisp-newbie (~lisp-newb@2a0d:6fc0:789:3600:4d13:a99d:a8f9:cfe8)
[13:55:58] *** Quits: lisp-newbie (~lisp-newb@2a0d:6fc0:789:3600:4d13:a99d:a8f9:cfe8) (Read error: Connection reset by peer)
[13:56:07] <nij-> I would need to write a lispy parser in shell that can deal with them primatively..
[13:56:19] *** Joins: lisp-newbie (~lisp-newb@87.71.111.186)
[13:56:23] <hayley> I'm afraid to ask how you manipulate a fair few Lisp types in a shell language.
[13:56:39] <nij-> I'm afraid too @@
[13:56:39] *** Quits: lisp-newbie (~lisp-newb@87.71.111.186) (Remote host closed the connection)
[13:56:46] *** Joins: lisp-newbie (~lisp-newb@87.71.111.186)
[13:57:03] *** Quits: lisp-newbie (~lisp-newb@87.71.111.186) (Remote host closed the connection)
[13:59:03] *** Quits: srhm (~ascii@user/srhm) (Quit: Konversation terminated!)
[13:59:30] *** Joins: srhm (~ascii@user/srhm)
[14:00:29] <nij-> Ok I think I should narrow down to lists of symbols or lists of symbols..
[14:04:01] *** Quits: amb007 (~a_bakic@93.87.81.91) (Ping timeout: 268 seconds)
[14:04:36] *** Joins: amb007 (~a_bakic@net219-37-245-109.mbb.telenor.rs)
[14:05:00] <Qwnavery> whyyy (ql:quickload "mcclim") (mcclim:define-application-frame myapp () (...) => "package mcclim not found.
[14:05:09] <Qwnavery> after it loads.
[14:05:46] <jackdaniel> Qwnavery: package and system are two different things
[14:05:52] <jackdaniel> try clim:define-application-frame
[14:05:52] <Qwnavery> and the manual says to use (inpackage :common-lisp-user) which doesn't work either.
[14:05:54] <hayley> The package you want is CLIM, but the system is McCLIM.
[14:07:10] <Qwnavery> works, not in slime though because of the whole process threads thing
[14:07:56] <jackdaniel> (find-application-frame 'myapp) will be default fire off a separate thread
[14:08:02] <jackdaniel> by*
[14:08:21] <hayley> What process threads thing? I think I've never used CLIM from outside SLIME, funnily enough.
[14:08:23] <Qwnavery> it did mention in the docs that won't happen in slime though
[14:08:40] <Qwnavery> for mcclim's implementation at least
[14:09:10] <jackdaniel> what won't happen in slime?
[14:09:27] <Qwnavery> the thread for the window being created
[14:09:29] *** Joins: lisp123_ (~lisp123@45.130.83.208)
[14:10:10] <jackdaniel> if you call run-application-frame in the slime repl, then the prompt will wait until it finishes running, is that what you mean?
[14:11:24] <Qwnavery> herm I swear I read somewhere in the McClim docs that because of the event loop thread replacing the execution thread it won't run in slime because it doesn't make a new thread
[14:11:31] <jackdaniel> run-frame-top-level that is :)
[14:12:26] <jackdaniel> the only thing to remember is that run-frame-top-level blocks until you close the frame, so you either need to start it from a new thread, or use find-application-frame (which does it for you)
[14:12:37] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 245 seconds)
[14:13:27] <Qwnavery> oh it werks in slime
[14:13:36] <Qwnavery> I see
[14:13:45] <Qwnavery> jackdaniel: makes sense
[14:13:50] <mfiano> There is a way to trick SLIME into thinking it isn't blocked, and update the prompt and allow time sharing to evaluate things in the same thread
[14:14:01] <mfiano> I'm not sure if McCLIM makes use of that feature though
[14:14:47] <Qwnavery> It mentions it in the docs, it might.
[14:15:51] <jackdaniel> there are no provisions in McCLIM to make slime happy
[14:16:22] <Qwnavery> jackdaniel: worth using clim2 instead?
[14:16:50] <jackdaniel> because McCLIM doesn't have provisions to help slime?
[14:17:06] <jackdaniel> neither of them have afaik
[14:17:07] <Qwnavery> yeah?
[14:17:09] <Qwnavery> oh
[14:17:12] <Qwnavery> x_x
[14:17:18] <jackdaniel> slime is just emacs integration
[14:17:36] <jackdaniel> there aren't any problems with using clim2 or McCLIM in slime
[14:17:42] <jackdaniel> s/in/from/
[14:18:06] *** Quits: kakuhen (~kakuhen@user/kakuhen) (Quit: Leaving...)
[14:18:25] *** Joins: luis3 (~luis@lisp/luis)
[14:18:25] *** ChanServ sets mode: +o luis3
[14:18:31] <Qwnavery> I might go, thanks though.
[14:18:41] <jackdaniel> sure
[14:18:48] *** Quits: Qwnavery (~Qwnavery@user/qwnavery) (Quit: WeeChat 3.2)
[14:19:25] <jackdaniel> oh, luis3 joined; what I've meant is that slime is *the* emacs integration of course ;)
[14:21:55] *** Quits: luis (~luis@lisp/luis) (Ping timeout: 258 seconds)
[14:21:56] *** luis3 is now known as luis
[14:24:20] *** Joins: karlosz (~karlosz@router.cloyne.org)
[14:30:24] *** Quits: srhm (~ascii@user/srhm) (Quit: Konversation terminated!)
[14:30:48] *** Joins: srhm (~ascii@user/srhm)
[14:31:10] *** Quits: lad (~lad@user/lad) (Ping timeout: 256 seconds)
[14:39:37] *** Quits: srhm (~ascii@user/srhm) (Ping timeout: 248 seconds)
[14:46:55] <luis> jackdaniel: :D
[14:58:27] *** Joins: dlowe (~dlowe@user/dlowe)
[15:05:57] *** Quits: scymtym_ (~user@ip-88-153-154-183.hsi04.unitymediagroup.de) (Remote host closed the connection)
[15:06:46] *** Joins: scymtym (~user@ip-88-153-154-183.hsi04.unitymediagroup.de)
[15:07:03] *** Quits: frgo (~frgo@p200300deef0cee000dc27aed655f6be3.dip0.t-ipconnect.de) (Remote host closed the connection)
[15:07:31] *** Joins: frgo (~frgo@p200300deef0cee000dc27aed655f6be3.dip0.t-ipconnect.de)
[15:08:08] *** Quits: taiju (~taiju@p236053-ipngn200203fukui.fukui.ocn.ne.jp) (Ping timeout: 272 seconds)
[15:09:33] <scymtym> beach: i am now
[15:22:58] <nij->  What's a good rpc scheme between lisp and c?
[15:23:12] <nij-> To talk to C from lisp we have cffi.
[15:23:33] <nij-> How about the other way around? I hope to have a running lisp server that a C client can talk to.
[15:27:26] <rain3> https://github.com/rpav/ScriptL
[15:28:07] <jackdaniel> nij-: cffi has also an interface to define callbacks that may be passed as pointers to C
[15:31:41] <nij-> jackdaniel: Does that also work if I want to write a little client in C that starts up any time, search for a lisp server, and talk to it?
[15:35:23] <jackdaniel> no, it is not remote, but you've mentioned that talking to c from lisp via cffi is acceptable
[15:36:01] <jackdaniel> a few years back I've adapted a common lisp backend for thrift (which is a full blown rpc)
[15:36:22] <jackdaniel> mind, that the original author was someone else, I've just cleaned it up for inclusion mainline
[15:36:30] *** Joins: taiju (~taiju@M014013236064.v4.enabler.ne.jp)
[15:36:48] <jackdaniel> nij-: https://thrift.apache.org/lib/cl.html
[15:36:58] <nij-> Yeah.. it's doable to c from lisp. But another way around (remotely)?
[15:37:54] <jackdaniel> from lisp to c via cffi is not remote. as noted above, for rpc you may use thrift
[15:38:32] <shka> how to implement useful pretty printer?
[15:38:45] <shka> i need some guidelines
[15:39:01] <jackdaniel> (for the record -- the original author of the backend was James Anderson)
[15:39:12] *** Joins: elf_fortrez (~elf_fortr@adsl-72-50-7-29.prtc.net)
[15:39:13] *** Joins: random-nick (~random-ni@87.116.177.79)
[15:39:22] *** Quits: karlosz (~karlosz@router.cloyne.org) (Quit: karlosz)
[15:39:55] <jackdaniel> shka: while I haven't read it myself I've been recommended this in the past: https://dspace.mit.edu/bitstream/handle/1721.1/6503/AIM-1102.pdf?sequence=2
[15:40:07] <shka> jackdaniel: thanks!
[15:40:18] <shka> oh wow, 40 pages
[15:40:40] <shka> i guess this should cover a lot
[15:40:43] <nij-> hmmm lemme take a look at thrift
[15:41:50] <jackdaniel> (and, for the information completness, this adaptation was sponsored by rigetti computing)
[15:41:51] <nij-> Anyone has had experience with cl-selenium-webdriver?
[15:42:03] <nij-> thrift? you mean
[15:42:11] <jackdaniel> yes
[15:42:51] <nij-> Thanks rigetti computing :)
[15:44:35] <rain3> I've tried cl-selenium-webdriver once and it worked
[15:46:38] <rain3> s/cl-selenium-webdriver/cl-selenium/
[15:46:45] <rain3> "I like this macro example from http://common-lisp.net/cgi-bin/viewcvs.cgi/cl-selenium/?root=cl-selenium It's a Common Lisp binding to Selenium (a web browser test framework), but instead of mapping every method, it reads Selenium's own API definition XML document at compile time and generates the mapping code using CL macros. You can see the generated API here: common-lisp.net/project/cl-selenium/api/selenium-package/index.htm
[15:46:45] <rain3> l This is essentially driving macros with external data, which happens to be an XML document in this case, but could have been as complex is reading from a database or network. This is the power of having the entire Lisp environment available to you at compile time."
[15:48:59] *** Quits: amb007 (~a_bakic@net219-37-245-109.mbb.telenor.rs) (Read error: Connection reset by peer)
[15:49:25] *** Joins: amb007 (~a_bakic@cable-94-189-181-220.dynamic.sbb.rs)
[15:53:07] <nij->   rain3: Oh seems that they are different things. Worth trying though.. did you figure out how to automatically login to a bank account using that?
[15:53:42] <nij-> jackdaniel: IIUC to talk to lisp from C i should follow this tutorial - https://thrift.apache.org/tutorial/c_glib.html ?
[15:53:51] <nij-> Not pretty sure what glib is and if it's necessary.
[15:55:18] <rain3> nij-: if the bank sends an sms check at login, I don't know yet how to easily send that code from the phone to the computer . phone<->computer interaction through some network protocol is needed
[15:55:24] <jackdaniel> I don't remember, try installing thrift and experiment with it. basically it is an rpc where you have a server and various clients
[15:56:33] <jackdaniel> I would follow the tutorial I've linked above, because it is aimed at cl (and then I'd try to connect from C client)
[15:56:39] <nij-> Cool! Will give it a try. The only problem is that I only know lisp, and a little bit of python. But ill try :)
[15:56:39] <pl> is there some usable thrift implementation for lisp?
[15:57:34] <nij-> jackdaniel: iiuc the tutorial you posted above requires the client to call another lisp in order to talk to tahe lisp client.
[15:57:51] <jackdaniel> pl: depends on your definition of usability, but as stated above - there is one merged upstream
[15:58:00] <pl> ho hum
[15:58:03] <nij-> rain3: Thank god they haven't done that to me yet.
[15:58:12] <pl> reminds me I need to go through grpc for CL again
[15:58:56] <jackdaniel> nij-: since it is rpc it doesn't matter what is either side. start server in lisp - first try client in lisp, and then try client in, say, python
[16:01:11] *** Quits: amb007 (~a_bakic@cable-94-189-181-220.dynamic.sbb.rs) (Ping timeout: 268 seconds)
[16:02:28] *** Joins: amb007 (~a_bakic@net219-37-245-109.mbb.telenor.rs)
[16:02:40] <nij-> jackdaniel: I see.
[16:03:09] <nij-> Btw, is it possible to launch subthreads (of a thread)? In the sense that if the main thread is killed, all of its subthreads are killed as well.
[16:20:43] <hayley> Generally killing threads is a Bad Idea, so hopefully you don't kill the main thread, and so you'll never kill any other threads.
[16:22:43] <shka> agreed
[16:22:54] <shka> killing threads is not exactly what you want
[16:22:55] <hayley> (Ergo, bordeaux-threads gives you this functionality out of the box :)
[16:23:02] <nij-> s/main thread/mother thread/g
[16:24:50] <hayley> On the other hand, the "opposite" of having a thread finish only when threads it creates are finished is common. Sometimes the pattern is called "parbegin", sometimes fork-join, sometimes "structured concurrency", but the general idea holds.
[16:28:09] <hayley> I am sure someone implemented "supervisor trees" in Common Lisp, but I am not going to give you any information on that because it is still difficult to write anything where threads can arbitrarily be killed.
[16:31:51] <shka> especially since unwind protects won't run in sbcl
[16:32:05] <shka> which managed to screw me up recently
[16:32:05] <hayley> Hah, if you look up "supervisor tree common lisp" on Google, it comes up with a Clozure-only actor library. If you look up '"supervisor tree" common lisp' with quotes, it comes up with the library I need to finish one day (which does not _kill_ things, rather ask them to stop politely).
[16:32:34] <hayley> shka: Yes, destroying a thread causes it to phase out of reality rather than shut down nicely.
[16:32:59] <shka> yeah
[16:33:16] <pl> so, SBCL just straight out murders the thread with OS APIs?
[16:33:32] <shka> dunno how, but no unwind-protect cleanup
[16:33:36] * pl ponders if there might be some option to use GC safepoints to trigger condition
[16:33:44] <shka> which was a problem because that's where i was closing my files
[16:33:50] <rain3> so, is it possible and recommended to launch subthreads (of a thread)? In the sense that if the main thread is politely stopped, all of its subthreads are politely stopped as well
[16:33:51] <hayley> I think that is generally how DESTROY-THREAD works.
[16:34:38] <hayley> pl: First, you have to have safepoints. Most, perhaps except for ABCL because the JVM uses safepoints, do not. But you can interrupt threads with a function that signals some error, causing unwinding.
[16:34:59] <hayley> Though you still have to think about what you don't want to be interrupted in.
[16:35:18] <pl> hayley: there's still whatever mechanism the GC uses to suspend the mutators
[16:35:37] <rain3> nij- https://stackoverflow.com/questions/55638774/how-to-properly-terminate-a-thread-which-is-blocking-lparallel-common-lisp
[16:35:52] <pl> hayley: so use that when extending an implementation
[16:35:56] <hayley> I believe those also fall under using OS primitives to freeze threads.
[16:36:25] <hayley> (See bt:destroy-thread: "Terminates the thread THREAD, which is an object as returned by MAKE-THREAD. This should be used with caution: it is implementation-defined whether the thread runs cleanup forms or releases its locks first.")
[16:36:33] <pl> the biggest issue I see is that semantics of "stop thread" condition are iffy
[16:36:54] *** Joins: selwyn (~selwyn@user/selwyn)
[16:37:09] *** Quits: selwyn (~selwyn@user/selwyn) (Remote host closed the connection)
[16:37:33] *** Joins: selwyn (~selwyn@user/selwyn)
[16:38:16] <hayley> Yeah, picking critical sections would also be a pain though. Generally I would assume that someone doesn't want to be interrupted while holding a lock; they want to get from state A to B cleanly, and politely destroying oneself in the middle would lead to something strange.
[16:39:51] <pl> doing it full erlang style would probably bulldoze locks anyways, but then one should be aware of what it means to go full erlang style ;)
[16:40:27] <hayley> And then if one uses finer-grained locking, there may still be the expectation that we eventually finish the second critical section after the first, which also isn't nice.
[16:41:14] <hayley> pl: I am aware of it, but I am foolishly trying to find a middle-ground with all my fine-grained locking code. If you squint hard enough, any ol mutable structure is equivalent to an actor.....
[16:42:06] *** Quits: elf_fortrez (~elf_fortr@adsl-72-50-7-29.prtc.net) (Quit: Client closed)
[16:45:27] <hayley> pl: That said, the plan for SICL is to use GC safepoints to handle other interrupts.
[16:52:16] *** Joins: cosimone (~user@151.14.38.15)
[16:54:29] *** Quits: dlowe (~dlowe@user/dlowe) (Remote host closed the connection)
[16:55:49] <hayley> In the case of locks, I think some languages rather make it an error to try to grab a lock that some thread "died" while holding, which is another option.
[17:01:51] <scymtym> not recommending this as a safe practice, but SBCL generally does run cleanups when destroying threads. try (let ((thread (bt:make-thread (lambda () (unwind-protect (sleep 100) (princ "cleaning up" *trace-output*)))))) (sleep 1) (bt:destroy-thread thread)). this is, of course, super racy. for example, without the (sleep 1) the thread may be destroyed before the unwind protection gets established
[17:04:09] <hayley> I see.
[17:04:38] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[17:05:05] *** Quits: Alfr (~Alfr@user/alfr) (Ping timeout: 252 seconds)
[17:08:50] *** Joins: Alfr (~Alfr@user/alfr)
[17:10:56] <scymtym> i think this behavior is essential for interactive development since otherwise interrupting a thread, which has gone off the rails, using the SLIME debugger and choosing the ABORT restart would leave locks locked and possible corrupt the image or application state in other ways
[17:11:53] <hayley> So destroying a thread is implemented by interruption?
[17:11:58] <scymtym> for SBCL, messing up the world lock is game over, for example
[17:12:49] <hayley> I guess it would hit UNWIND-PROTECT and thus unlock locks, but there is still the problem that you can leave critical resources halfway between states.
[17:12:51] <scymtym> i think conceptually (destroy-thread th) == (interrupt-thread th (lambda () (invoke-restart '%abort-thread)))
[17:13:03] <hayley> Oh, nice.
[17:13:27] <scymtym> but, it is still not safe since the interrupt is asynchronous
[17:14:34] <scymtym> so (let ((f (open …))) (unwind-protect … (close f))) could be interrupted between OPEN and UNWIND-PROTECT
[17:15:14] <hayley> Yes, that's true.
[17:15:53] <scymtym> this can be improved, but for example (let ((f nil)) (unwind-protect (progn (setf f (open …)) …) (when f (close f)))) is still unsafe since the interrupt can occur after returning from OPEN but before assigning to F
[17:15:56] <jackdaniel> (without-interrupts (let ((open …)) (unwind-protect (with-interrupts-enabled …) (close f))
[17:16:16] <scymtym> so only WITHOUT-INTERRUPTS … what jackdaniel said
[17:16:22] <jackdaniel> ah, blunder, (f (open …))
[17:17:29] <hayley> I guess I need to invent a portable WITHOUT-INTERRUPTS which doesn't interfere with any other usage of it, but that is doable as I control the unwinding convention.
[17:18:09] <jackdaniel> what do you mean by a "portable" without-interrupts?
[17:18:35] <hayley> Last I checked, it is not in Bordeaux threads or the like.
[17:18:53] <jackdaniel> ah, as in "portability layer"
[17:20:08] <hayley> But, again, I just use a handler for a condition type only I signal, so I could bind a new handler which defers unwinding until finishing some critical section.
[17:26:17] *** Quits: amb007 (~a_bakic@net219-37-245-109.mbb.telenor.rs) (Read error: Connection reset by peer)
[17:26:21] *** Quits: hendursa1 (~weechat@user/hendursaga) (Quit: hendursa1)
[17:27:03] *** Joins: hendursaga (~weechat@user/hendursaga)
[17:28:30] *** Joins: amb007 (~a_bakic@net219-37-245-109.mbb.telenor.rs)
[17:30:49] *** Quits: amb007 (~a_bakic@net219-37-245-109.mbb.telenor.rs) (Read error: Connection reset by peer)
[17:30:56] <scymtym> hayley: https://github.com/Bike/clhs-extension/tree/concurrency/concurrency/interruptions is probably related work
[17:31:52] <hayley> Indeed.
[17:32:25] *** Joins: amb007 (~a_bakic@cable-94-189-181-220.dynamic.sbb.rs)
[17:32:51] <rain3> beach: what's the goal with the accounting app ? I have played with https://github.com/robert-strandh/compta and I am reading Finance for Non-Financial Managers
[17:33:30] *** Quits: amb007 (~a_bakic@cable-94-189-181-220.dynamic.sbb.rs) (Read error: Connection reset by peer)
[17:33:46] *** Joins: amb007 (~a_bakic@cable-94-189-181-220.dynamic.sbb.rs)
[17:34:43] <nij-> Oooh we have a ledger in CL?!
[17:35:27] * hayley hesitates to ask what is meant by "ledger".
[17:36:41] <nij-> https://github.com/ledger/ledger
[17:36:47] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[17:37:00] <jackdaniel> probably an "account book" alluding to compta
[17:37:04] <hayley> Whew!
[17:37:45] <hayley> Yes, but without Unix-induced wheels in the head.
[17:40:03] <rain3> https://www.reddit.com/r/Common_Lisp/comments/7lb8s7/clledger_double_accounting_system/ "BTW, I do my accounting in Lisp also. I studied double-entry accounting and found it idiotic."
[17:41:00] *** Joins: Inline (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431)
[17:41:02] <beach> Double-entry bookkeeping is legally required for companies in most of the world.
[17:42:24] <hayley> I think that the "zero sum accounting" is trivially convertible to double-entry bookkeeping and vice versa, but it is too late for me to think of how exactly.
[17:42:43] <beach> I do not know what the former is.  Sorry.
[17:43:18] <jackdaniel> antoszka wrote a tool to issue invoices in common lisp, I've used it for some time
[17:43:30] <hayley> It is presented in the linked comment, and I suspect the author came up with the name.
[17:43:57] <hayley> Rather, one of the comments on the linked page.
[17:44:20] <rain3> jackdaniel: this one ? https://github.com/antoszka/fv
[17:45:09] <nij-> CL-Ledger official: "CL-Ledger is a Common Lisp port of the Ledger double-entry accounting system."
[17:45:24] <jackdaniel> rain3: yes
[17:45:28] <nij-> Does this mean that someone wrote this from scratch? Or it's just a binder to ledger?
[17:45:29] <hayley> Or rather, this comment states that it is also double entry bookkeeping in spirit: "How you describe your system is exactly how I was taught double-entry accounting in school, and AFAIK, the way its still taught here in Norway. The other way you described is just syntactic sugar for those used to that way of thinking (for those new to double-entry accounting it just leaves a bitter aftertaste in my experience), otherwise they are identical."
[17:45:36] <rain3> jackdaniel: cool thanks for sharing
[17:48:41] <beach> The main tricky part with such an application is not the "business logic" which is almost trivial.  Mainly, it is the GUI, and McCLIM is perfect for such an appliation.
[17:49:20] <beach> Let me go check CL-Ledger.  It may very well be that it could be the "business logic" part of the final system.
[17:49:56] <hayley> I think it is a port, but there is a submodule for the original C code for some reason, and the code looks kind of odd but not necessarily bad.
[17:50:05] <nij-> What is a "port"?
[17:50:27] <hayley> Rather, a Common Lisp rewrite of the original C code.
[17:51:22] <hayley> A "port" is some code which was modified in a way to run on another platform. Admittedly that definition does not make sense when you rewrite all the code to "port" to another language...
[17:52:31] <nij-> Ok, so it's not just a binder. Cool.
[17:52:47] <hayley> Right.
[17:54:40] <nij->  I remember ledger being quite good and well documented. Not sure about cl-ledger.
[17:55:01] <nij-> While it helped, it still painful to get all the data together.
[17:56:10] <rain3> https://plaintextaccounting.org/
[17:56:31] *** Joins: tfeb (~tfb@88.98.95.237)
[17:57:23] <beach> Regular expressions to parse files?  Not acceptable for the system I am thinking of.
[17:58:03] *** Quits: tfeb (~tfb@88.98.95.237) (Client Quit)
[17:58:12] *** Joins: tfeb (~tfb@88.98.95.237)
[18:00:09] <hayley> I don't see the appeal of human-readable file formats necessarily, as attributing any actual meaning to the data tends to require a program.
[18:01:23] <nij-> why not? hayley
[18:02:20] <hayley> As I understand it, the ledger is stored as some list of transactions.
[18:02:25] <tfeb> In the presence of humans I think human-readable (and thus human-editable if need be) is occasionally useful.  Of course we could just eliminate the humans
[18:03:48] <nij-> I still don't know why you see no point @@..
[18:03:59] <nij-> It's also very easy to output, edit.. etc.
[18:04:00] <hayley> To compute the balance of accounts, we need to do some parsing and accumulation. Thus we find we would need a program pretty quickly.
[18:04:50] <jackdaniel> human readable file formats are better if the format is meant to be interchangable between different programs -- programs tend to be written by people, and people are bad with unreadable formats. still, binary formats are OK if they do not assume some certain structure of the program handling them
[18:05:21] <beach> In CL-Ledger, an account seems to have data stored in it.  I think that makes the system unnecessarily complicated.
[18:05:33] *** Quits: lisp123_ (~lisp123@45.130.83.208) (Remote host closed the connection)
[18:05:41] <tfeb> The question is how brittle you want to make it.  Without the program, do you want the files to be useless, or just less useful?
[18:06:16] <jackdaniel> (and, even better, if you stipulate only one client, then you may use the program abstractions -i.e serialize clim output records as a format for graphics)
[18:06:18] <beach> Account balance can be computed from the list of transactions.  So the only real data structure required is a list of transactions.
[18:06:40] <beach> Such a list will be humanly (somewhat) readable if you just use PRINT and READ.
[18:06:46] <beach> ... which is what I want.
[18:08:45] <hayley> Hah, we are having the same discussions as two years ago.
[18:08:53] <hayley> *as we had two years ago.
[18:09:04] <beach> Not surprised!
[18:09:16] <beach> The data structure of CL-Ledger seems to be backwards.
[18:09:34] <beach> An account contains entries, and an entry contains a list of transactions.
[18:09:58] <beach> I want a transaction to contain two lists of accounts, debit and credit.
[18:10:16] <beach> rain3: It looks like it is better to start over.
[18:11:17] <aeth> The problem with binary formats is that you have complete and total control so you are tempted to optimize it and frequently revise it as long as you have a versioning scheme. Plus, the only authoritative documentation is the source code of the program that uses it. Human readable constrains what you do.
[18:11:38] <hayley> nij-: Maybe I am too imaginative, but it couldn't be easier than not having to render and parse the data.
[18:12:01] <beach> aeth: I think what READ and PRINT can handle is the way to go.
[18:12:16] <hayley> Hm, I haven't optimized the one binary format I wrote, and I am pretty sure the BNF grammar still is correct.
[18:13:03] <nij-> hayley: If the format is in sexprs, would you be happier?
[18:13:55] <scymtym> regardless of the representation, be it human-readable plain text or some binary format, specifying the syntax /and/ semantics is the only way to get interoperability
[18:14:06] <hayley> It's a bit easier, sure, but ideally I would have the transaction log in persistent memory.
[18:15:31] <hayley> What I mean is that, with a mere text editor, you are limited in what you can reasonably do with a textual transaction log, and "human readable" is pretty vague (e.g. COBOL and SQL on the worse end).
[18:15:56] <beach> rain3: Are you still interested?
[18:17:36] <nij-> hayley: But can't you just read the sexprs into memory?
[18:18:13] <rain3> beach: I am back, let me read
[18:18:27] <aeth> scymtym: yes, but if it's human readable, it will probably look the same over time, while if it's binary, and it has versioning, then everything after the version number can be radically different as you bikeshed the most optimal way to do it
[18:18:31] <tfeb> Well, some of us have written quite hairy systems to process machine-generate SGML using 'a mere text editor'  Certainly helped me do so that it was human-readable.
[18:18:51] <hayley> nij-: Yes, but you have to come up with a relation between the S-expressions and object graph in memory. Though beach instead uses the printer and reader to serialize the object graph directly.
[18:20:07] <jackdaniel> beach suggestion is still a human readable format
[18:20:21] <jackdaniel> kind of, without headers and such :)
[18:20:48] <scymtym> aeth: i get that human readability lowers the initial barrier. but look at markdown. now people can't agree how to parse and interpret it exactly
[18:21:20] <nij-> hayley: In any case, at the end of the session, if you want to store the data, what would you do?
[18:21:37] <jackdaniel> all grand "ends" end with save-lisp-and-die :)
[18:21:43] <rain3> beach: Yes I am interested
[18:21:46] <tfeb> scymtym: that's because markdown is inadequately specified, not because it is human readable
[18:21:47] *** Joins: Fare (~fare@2601:184:4a7f:995c::871)
[18:22:00] <aeth> That's only because Markdown is underspecified for its role (even CommonMark doesn't specify tables or colors yet) and, crucially, it became too popular before it became specified.
[18:22:06] <beach> rain3: Excellent!
[18:22:06] <aeth> You can easily become too successful too quickly
[18:22:22] <hayley> When I had to serialize a more interesting object graph, have fast incremental updates, and have durability, I mostly just lost my mind trying to do it with files. Next I guess I will repeat that with a relational database.
[18:22:50] <aeth> When you're both underspecified and popular, there are now 5+ ways to do a common task and standardization becomes way harder.
[18:23:01] <jackdaniel> markdown is an excellent example of human-readability value - it has succeeded because it was friendly for the human reader; it could be better specified though :)
[18:23:15] <aeth> almost
[18:23:20] <hayley> nij-: I'd leave the transaction log in the persistent memory, and come back to it tomorrow.
[18:23:29] <beach> rain3: It is almost 3pm here and I haven't gotten anything done yet today on my own projects, so I need to do that for a while.  What forum do you prefer for the discussion?  Maybe #clim is the best since the main thing will be the GUI?
[18:23:36] <aeth> markdown has a few straze design flaws, like _foo_ being the same as *foo* (and having no way to do underlining!)
[18:23:38] <scymtym> tfeb: i thought that's what i said initially
[18:23:45] <rain3> beach: Okay, #clim will do
[18:23:51] <beach> Great!
[18:23:54] <aeth> s/straze/strange/
[18:24:48] *** Quits: kevingal (~quassel@2a02:8084:4140:f300:c9dc:5689:c333:f2d7) (Remote host closed the connection)
[18:25:02] <nij-> hayley: Oh I misunderstand what you mean by persisten memory.
[18:25:04] <nij-> What's that?
[18:25:05] <tfeb> scymtym: my point is that hr and unambiguousity are entirely orthogonal
[18:25:58] <scymtym> tfeb: i agree and i think that's what i said. but i have to go now
[18:26:07] <tfeb> ok
[18:26:30] *** Parts: pranavats (3fba1d1b34@jabberfr.org) ()
[18:26:33] <hayley> nij-: Loosely speaking, you just save everything in memory. (It can be made fast, don't worry about that.) The nice thing is that you only need one policy for how to update state.
[18:26:33] <tfeb> sorry if I misunderstood
[18:26:46] <scymtym> tfeb: no worries
[18:27:39] <hayley> Compare that to serialization, where you have one set of operations in memory, another for objects on disk, and perhaps another with version control. (If we needed versioning, we could use a transactional memory scheme too.)
[18:27:42] <nij-> What is the lisp session ends?
[18:27:55] <nij-> What if *
[18:28:32] <hayley> Persistence is achieved by saving the state to disk.
[18:28:54] <nij-> All states? including functions and closures?!
[18:29:10] <hayley> Yes.
[18:30:01] *** Quits: tfeb (~tfb@88.98.95.237) (Quit: died)
[18:30:38] *** Joins: tfb (tfb@gateway/vpn/protonvpn/tfb)
[18:31:40] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[18:34:07] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Ping timeout: 268 seconds)
[18:34:22] *** Joins: pranavats (3fba1d1b34@jabberfr.org)
[18:36:13] <nij-> hayley: There must be a library that handles this right?
[18:36:53] <nij-> That sounds nice. At most, if someone wants a human readable format, I can write a printer and a parser on top of that.
[18:37:00] <nij-> But the core is indeed what you described.
[18:37:29] *** Quits: dsk (~dsk@user/dsk) (Ping timeout: 252 seconds)
[18:39:22] *** Joins: srhm (~ascii@user/srhm)
[18:47:34] *** Quits: pjb (~pjb@user/pjb) (Ping timeout: 258 seconds)
[18:51:18] *** Joins: Bike (~Glossina@71.69.170.70)
[18:51:18] *** ChanServ sets mode: +o Bike
[18:57:13] *** Joins: cosimone` (~user@5.170.242.101)
[18:57:36] *** Joins: tyson2 (~user@bras-base-toroon0628w-grc-46-142-112-141-177.dsl.bell.ca)
[18:58:03] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-D91A-dynamic.midco.net) (Quit: #archlinux)
[18:58:23] *** Quits: cosimone (~user@151.14.38.15) (Ping timeout: 252 seconds)
[18:58:26] *** Quits: tyson2 (~user@bras-base-toroon0628w-grc-46-142-112-141-177.dsl.bell.ca) (Remote host closed the connection)
[18:58:50] *** Joins: tyson2 (~user@bras-base-toroon0628w-grc-46-142-112-141-177.dsl.bell.ca)
[19:08:07] *** Joins: pjb (~pjb@user/pjb)
[19:13:34] *** Quits: Mandus (~aasmundo@0.51-175-33.customer.lyse.net) (Quit: WeeChat 3.0.1)
[19:15:13] *** pjb is now known as Guest659
[19:15:52] *** Quits: Guest659 (~pjb@user/pjb) (Remote host closed the connection)
[19:16:22] *** Joins: pjb (~pjb@user/pjb)
[19:18:20] *** Joins: Mandus (~aasmundo@0.51-175-33.customer.lyse.net)
[19:22:35] *** Joins: fizbin (~dtm@2601:82:c380:87a:3c14:855f:b6b5:5115)
[19:25:46] *** Parts: pranavats (3fba1d1b34@jabberfr.org) ()
[19:32:29] *** Quits: fizbin (~dtm@2601:82:c380:87a:3c14:855f:b6b5:5115) (Ping timeout: 252 seconds)
[19:38:14] *** Quits: cosimone` (~user@5.170.242.101) (Ping timeout: 268 seconds)
[19:39:50] *** Joins: lisp123 (~lisp123@45.130.83.208)
[19:41:33] *** Joins: lisp123_ (~lisp123@45.130.83.200)
[19:45:13] *** Quits: lisp123 (~lisp123@45.130.83.208) (Ping timeout: 248 seconds)
[19:51:37] *** Joins: lotuseater (~user@p200300e7871b3f008a69ffac690ca7c7.dip0.t-ipconnect.de)
[19:53:42] *** Joins: Michal (~user@45.130.83.200)
[19:54:03] <Michal> Heya, I have a question
[19:54:25] <Bike> shoot
[19:54:43] <Michal> Where should I write my defgeneric forms - within packages.lisp? And also does anyone recommend a way to organising code when using ASDF?
[19:55:24] <Bike> usually the package definition file has only package definitions
[19:55:45] <Bike> you might have a dedicated generic-functions.lisp, or you could put generic function definitions in whichever file defiens their behavior
[19:56:08] <Michal> Thanks, I will do that
[20:01:40] *** Quits: tyson2 (~user@bras-base-toroon0628w-grc-46-142-112-141-177.dsl.bell.ca) (Quit: ERC (IRC client for Emacs 27.2))
[20:04:13] <lisp123_> Does anybody keep in touch with the Lispers of the 80s and 90s
[20:04:22] <lisp123_> I wonder what they are up to these days
[20:04:49] <mfiano> Many of us here fit that description.
[20:05:08] <lisp123_> mfiano: Nice :)
[20:05:51] <lisp123_> mfiano: Any good stories?
[20:06:13] <beach> mfiano: Heh!
[20:06:24] <mfiano> I am not one of them. Only less than 20 years for me
[20:06:41] <mfiano> (I am an early 80's child)
[20:06:45] <lotuseater> mfiano: "only" ^^ I wish that would go for me too.
[20:10:29] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 244 seconds)
[20:12:27] *** Joins: hendursaga (~weechat@user/hendursaga)
[20:14:25] <mfiano> Hmm. Arity overloading is one thing I continually wish CL had, but monomorphized instead of dispatched at runtime.
[20:15:40] <lisp123_> mfiano: funnily enough, I was just looking into that
[20:16:03] <lotuseater> mfiano: I once wrote me a macro to experiment with that like Erlang has it. So you can define functions with the the same name but different (fixed) arity, no &KEY, &OPTIONAL, &REST. so (defun foo (x y z) ...) gets exported and callable by FOO/3
[20:17:42] <lotuseater> but of course recommended calling by just FOO
[20:17:51] <mfiano> specialization-store has it, and supports key/optional/rest, but like other CLtL2 dependent libraries, it is subject to breakage once in a while. I don't think such a thing will be robust with implementation support.
[20:17:55] *** Quits: derelict (~derelict@user/derelict) (Ping timeout: 268 seconds)
[20:19:02] <mfiano> That's what I'm after, something implementation-specific that could be made into an extension like PLN, rather than half-baked libraries that when they break, it's hard to blame the implementation, the CLtL2 portability layer, or the library itself
[20:19:21] *** Joins: robin_ (~robin@user/terpri)
[20:19:23] <mfiano> But I do a lot of wishful thinking :)
[20:20:26] <mfiano> I meant I don't think an attempt will be robust _without_ implementation support above.
[20:20:53] *** Quits: robin (~robin@user/terpri) (Ping timeout: 252 seconds)
[20:22:39] <mfiano> With a proper lambda list parser, which beach might have modularized come to think of it, a naive version that doesn't depend on environment introspection could be written easily.
[20:23:39] <mfiano> I wouldn't mind even an adhoc solution for a few projects of mine.
[20:34:21] *** Joins: robin (~robin@user/terpri)
[20:35:17] *** Quits: robin_ (~robin@user/terpri) (Ping timeout: 258 seconds)
[20:35:45] <Bike> having it monomorphized seems like it would entail some subtle but far reaching semantic changes
[20:36:10] *** Quits: robin (~robin@user/terpri) (Remote host closed the connection)
[20:37:26] *** Joins: robin (~robin@user/terpri)
[20:37:35] <mfiano> Perhaps. I haven't thought too deeply into it. Just one feature I like from Clojure, but not enough to actually use it :)
[20:40:04] *** Joins: derelict (~derelict@user/derelict)
[20:40:57] *** Quits: fengshaun (~fengshaun@68.69.214.210) (Quit: bibi!)
[20:41:15] *** Joins: fengshaun (~fengshaun@68.69.214.210)
[20:46:12] *** Quits: robin (~robin@user/terpri) (Remote host closed the connection)
[20:49:13] *** Joins: robin (~robin@user/terpri)
[20:51:20] *** Joins: Lycurgus (~juan@cpe-45-46-140-49.buffalo.res.rr.com)
[20:53:40] *** Quits: robin (~robin@user/terpri) (Remote host closed the connection)
[20:54:05] *** Joins: robin (~robin@user/terpri)
[20:59:25] *** Joins: karlosz (~karlosz@router.cloyne.org)
[21:04:35] *** Quits: Cymew (~ante@c-e989225c.023-1144-7570702.bbcust.telenor.se) (Ping timeout: 268 seconds)
[21:10:46] *** Quits: santiagopim (~user@90.166.59.254) (Remote host closed the connection)
[21:13:30] *** Quits: Skyfire (~pyon@user/pyon) (Ping timeout: 256 seconds)
[21:17:03] *** Joins: Skyfire (~pyon@user/pyon)
[21:21:48] *** Quits: Skyfire (~pyon@user/pyon) (Ping timeout: 272 seconds)
[21:23:05] *** Quits: tfb (tfb@gateway/vpn/protonvpn/tfb) (Quit: died)
[21:36:09] *** Quits: taiju (~taiju@M014013236064.v4.enabler.ne.jp) (Ping timeout: 248 seconds)
[21:38:07] *** Joins: selwyn (~selwyn@user/selwyn)
[21:38:30] *** Quits: amb007 (~a_bakic@cable-94-189-181-220.dynamic.sbb.rs) (Ping timeout: 268 seconds)
[21:39:05] *** Joins: amb007 (~a_bakic@net219-37-245-109.mbb.telenor.rs)
[21:41:26] *** Quits: Fare (~fare@2601:184:4a7f:995c::871) (Ping timeout: 272 seconds)
[21:43:04] *** Joins: Fare (~fare@2601:184:4a7f:995c::871)
[21:44:04] *** Joins: tfeb (tfb@gateway/vpn/protonvpn/tfb)
[21:44:32] *** Joins: Cymew (~ante@c-e989225c.023-1144-7570702.bbcust.telenor.se)
[21:49:54] *** Joins: pranavats (3fba1d1b34@jabberfr.org)
[21:50:02] *** Quits: robin (~robin@user/terpri) (Ping timeout: 258 seconds)
[21:50:10] *** Joins: robin_ (~robin@user/terpri)
[21:55:08] *** Quits: Cymew (~ante@c-e989225c.023-1144-7570702.bbcust.telenor.se) (Ping timeout: 268 seconds)
[21:57:47] <pve> Does "monomorphized" means that the method is chosen at compile time?
[21:57:54] <pve> *mean
[21:58:42] <Bike> that is how i was interpreting it
[21:59:07] <mfiano> Pretty much.
[21:59:15] <Lycurgus> unless it refers to monomorphism
[21:59:53] <mfiano> It's what Rust does for example, and what contributes to incredible compilation times
[22:00:09] *** Quits: derelict (~derelict@user/derelict) (Ping timeout: 248 seconds)
[22:00:22] <mfiano> But yes, it seems such a thing would not meld well with dynamism/interactivity.
[22:02:44] *** Joins: derelict (~derelict@user/derelict)
[22:02:55] *** Joins: lad (~lad@user/lad)
[22:06:56] <pve> then the types of each argument would need to be declared/known at compile-time? or would that part be run-time?
[22:07:17] <Bike> mfiano was talking about arity rather than types
[22:07:35] <pve> yes, I meant the arity is chosen at compile time
[22:07:35] <Bike> so it would be pretty obvious from non-apply calls which to use
[22:07:50] <pve> oh, so no type-based dispatch at all?
[22:08:51] <pve> ok, I get it now.. thanks
[22:09:13] *** Quits: tfeb (tfb@gateway/vpn/protonvpn/tfb) (Ping timeout: 248 seconds)
[22:12:10] *** Quits: robin_ (~robin@user/terpri) (Remote host closed the connection)
[22:13:06] *** Joins: robin_ (~robin@user/terpri)
[22:13:40] *** Quits: robin_ (~robin@user/terpri) (Remote host closed the connection)
[22:18:34] *** Joins: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[22:20:58] *** Quits: karlosz (~karlosz@router.cloyne.org) (Quit: karlosz)
[22:21:29] *** Quits: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 248 seconds)
[22:24:05] *** Quits: Inline (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431) (Quit: Leaving)
[22:26:19] *** Quits: amb007 (~a_bakic@net219-37-245-109.mbb.telenor.rs) (Read error: Connection reset by peer)
[22:26:53] *** Joins: amb007 (~a_bakic@cable-94-189-181-220.dynamic.sbb.rs)
[22:27:10] *** Joins: esb (~esb@2804:14c:1ad:8b70::1000)
[22:33:29] *** Joins: gaqwas (~john@dynamic-077-007-108-005.77.7.pool.telefonica.de)
[22:33:58] *** Quits: retropikel (~retropike@2001:999:200:1f35:89a7:512c:3e01:fea2) (Quit: Leaving)
[22:34:17] *** Joins: retropikzel (~retropikz@2001:999:200:1f35:89a7:512c:3e01:fea2)
[22:36:13] *** Joins: fizbin (~dtm@2601:82:c380:87a:3c14:855f:b6b5:5115)
[22:39:19] *** Quits: jeosol (~jeosol@76-238-186-228.lightspeed.hstntx.sbcglobal.net) (Quit: Ping timeout (120 seconds))
[22:44:46] *** Joins: Inline (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431)
[22:46:32] *** Quits: Lycurgus (~juan@cpe-45-46-140-49.buffalo.res.rr.com) (Quit: Exeunt)
[22:48:18] *** Quits: fizbin (~dtm@2601:82:c380:87a:3c14:855f:b6b5:5115) (Ping timeout: 258 seconds)
[22:56:17] <White_Flame> mfiano: it could be interactive, if the notion of recompiling was part of the CL image model.  I don't think the two are incompatible, but since there's no interface to such a mechanism, nobody builds in that style
[22:56:39] <White_Flame> to be more clear, recompiling already-compiled functions based on new assumptions
[22:57:08] <mfiano> Sure
[22:58:11] *** Joins: CrashTestDummy (~CrashTest@ool-ad02813b.dyn.optonline.net)
[22:58:52] <White_Flame> either that, or a manual "bake" command which takes the current dynamic code and bakes in all the currently known assumption, preventing further dynamicism, unless unbaked
[22:59:13] <White_Flame> (dynamism?)
[23:00:57] *** Quits: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 248 seconds)
[23:03:22] *** Quits: lisp123_ (~lisp123@45.130.83.200) (Remote host closed the connection)
[23:05:32] *** Joins: yitzi (~yitzi@173-27-106-188.client.mchsi.com)
[23:06:58] *** Joins: Skyfire (~pyon@user/pyon)
[23:08:28] *** Joins: tfeb (~tfb@88.98.95.237)
[23:09:08] *** Quits: Michal (~user@45.130.83.200) (Ping timeout: 268 seconds)
[23:16:20] *** Quits: rain3 (~rain3___@2a02:2f09:d30b:1300:514:bcc7:8202:1798) (Ping timeout: 252 seconds)
[23:17:20] *** Joins: Devon (~devon@71.191.79.143)
[23:17:56] *** Joins: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[23:21:13] *** Quits: CrashTestDummy (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 248 seconds)
[23:22:23] *** Joins: rain3 (~rain3___@2a02:2f09:d30b:1300:514:bcc7:8202:1798)
[23:24:05] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[23:25:17] *** Quits: tfeb (~tfb@88.98.95.237) (Remote host closed the connection)
[23:29:06] *** Joins: lisp123 (~lisp123@45.130.83.200)
[23:29:07] *** Joins: Michal (~user@45.130.83.200)
[23:29:28] *** Parts: Michal (~user@45.130.83.200) ()
[23:30:56] *** Joins: nij- (~jin@2001-48F8-9021-806-0-0-0-14F5-dynamic.midco.net)
[23:31:28] <nij-> hayley: do you recommend mito or elephant for persistent memory?
[23:32:04] *** Joins: Steeve (~steve@user/steeve)
[23:32:25] *** Quits: Devon (~devon@71.191.79.143) (Ping timeout: 248 seconds)
[23:34:15] <lisp123> nij: try bknr
[23:35:25] <lisp123> https://ashok-khanna.medium.com/persistent-in-memory-data-storage-in-common-lisp-b-k-n-r-37f8ae76042f
[23:36:07] *** Joins: jeosol (~jeosol@76-238-186-228.lightspeed.hstntx.sbcglobal.net)
[23:36:52] *** Joins: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[23:40:35] *** Quits: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 268 seconds)
[23:43:06] <dieggsy> Does SBCL have an equivalent of Allegro's interactive-stream-p, which forces output for certain functions if a stream is marked interactive?  it's described here: https://franz.com/support/documentation/9.0/doc/streams.htm#force-finish-output-2
[23:43:50] <dieggsy> basically this helps me have sly handle output more similarly to slime and i'm wondering if other implementations have an equivalent setting
[23:45:12] <nij-> lisp123: what does satellite mean? how does this approach differ with that of mito (db based)?  should I worry about memory overflow?
[23:47:23] *** Joins: taiju (~taiju@240b:253:ec40:2400:701e:19b4:5e8d:19b0)
[23:48:08] <lisp123> nij-: Ignore the term satellite, its just a buzzword. BKNR serialises your lisp data objects to file and then reloads them the memory on startup. So basically you will have all your data in memory always
[23:48:21] <lisp123> And it only requires a very little modification to do so
[23:48:28] *** Joins: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[23:48:56] <lisp123> Unless your data is too large, it should be fine for your uses - how much data do you need to keep in memory?
[23:49:55] <lisp123> Mito / Elephant as I understand are traditional databases, so are much slower than BKNR and also BKNR is very nice in easy it is to use (once you get the hang of it) :)
[23:49:59] <nij-> Oh ok! I dunno yet. What is "too large"?
[23:50:11] <lisp123> Gigabytes is fine
[23:50:33] <nij->  How about 1 million of lines of plain text? One line 100 characters?
[23:50:43] <lisp123> Shouldn't be an issue
[23:50:47] <nij-> :O
[23:50:56] <lisp123> And its all in memory, so super fast
[23:50:58] <nij-> I have been dealing things the wrong way..
[23:51:16] <Josh_2> Something about BKNR makes me very uneasy when using it
[23:51:18] <Josh_2> idk why
[23:51:21] <lisp123> Think of it as working in memory and just saving the results to file to give you persistence and then loading back on startup
[23:51:28] <nij-> Josh_2: plz.. elaborate xD
[23:51:32] <Josh_2> Idk
[23:51:37] *** Quits: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 248 seconds)
[23:51:49] <nij-> Common its manual has cute pics. I was almost determined to learn it.
[23:51:57] <mfiano> Hi all. Question:
[23:52:02] <Josh_2> I was using it for a while, but swapped to postgres
[23:52:11] <nij-> Alert! mfiano has a question. :)
[23:52:17] <lisp123> Josh_2: Are you scared of losing your data?
[23:52:24] <lisp123> I export to XML for that reason
[23:52:27] <lisp123> (which BKNR has)
[23:52:31] <mfiano> CLtL2 says: "Nearly all functions that operate on the contents of a vector will operate only on the active elements. An important exception is aref...". I cannot find anything in CLHS about this. Why do I ask? Well loop :across may be unspecified on arrays with fill pointers.
[23:52:32] <lisp123> So its 100% safe :)
[23:52:41] <Josh_2> Yes something like that lisp123
[23:52:45] <nij-> lisp123 nothing is 100% safe :)
[23:52:55] <nij-> So what does a LISP satellite mean?
[23:53:03] <Josh_2> Have to say I trust Postgres more
[23:53:07] <lisp123> nij-: Disappointment may be :)
[23:53:27] <Inline> ohh
[23:53:47] <Inline> a satellite in orbit ?
[23:54:05] <nij-> i dunno.
[23:54:18] <Inline> or in the mental realm ?
[23:54:19] <lisp123> Josh_2: That's fine too, do you use Postmodern? Good thing about database solutions is that you can remove the lisp part (!) and reuse elsewhere a bit easier (although BKNR has XML export so I don't think its an issue tbh)
[23:54:27] <jmercouris> A satellite is like another node on a network
[23:54:28] <lisp123> nij-: Let me quote the manual, one sec
[23:54:36] <jmercouris> don't worry about it, it is in fact a buzzword
[23:54:37] <Josh_2> Yes I use pomo
[23:54:41] <nij-> lisp123:  I'm reading the manual.
[23:54:46] <nij-> And got stuck by that term.
[23:54:48] <jmercouris> I use pomito, for tomato sauce
[23:55:07] <Josh_2> One of the reasons I swapped to Postgres was because I thought about the possibility that I would need to scale my project, pomo makes that pretty easy
[23:55:23] <jmercouris> You will never need to expand beyond BKNR I guarantee it
[23:55:23] <lisp123> nij-: "BKNR is a software launch platform for LISP satellites. You could replace “launch platform” with framework and “satellites” with “applications”, but that would be too many buzzwords."
[23:55:30] <jmercouris> you could serve MILLIONS of requests per minute easily
[23:55:44] <lisp123> jmercouris: Are you using BKNR :) ?
[23:55:54] <nij-> lisp123:  exactly where I stopped reading and asked
[23:55:54] <jmercouris> lisp123: No, I've played with
[23:55:57] *** Joins: prxq_ (~quassel@x4db90fef.dyn.telefonica.de)
[23:55:57] *** Quits: prxq_ (~quassel@x4db90fef.dyn.telefonica.de) (Client Quit)
[23:56:07] <jmercouris> I am personally using CL P R E V A L E N C E
[23:56:08] <nij-> mfiano: sorry for the text wall..
[23:56:13] <jmercouris> and M I T O
[23:56:22] <lisp123> nij-: Sounds good doesn't it, imagine going into space with a rocket from Baikanur ;)
[23:56:34] <nij-> what makes cl-prevalence so spaced out :O ?
[23:56:37] <Inline> duh
[23:56:44] <jmercouris> A E S T H E T I C S
[23:56:57] <nij-> i like that. lemme take a look.
[23:57:10] <Josh_2> All bknr needs is to be able to interconnect with multiple instances and you have a competitor to allegrocache, however thats not a trivial task
[23:57:12] <Inline> i'd rather ask the grey for a lift!
[23:57:16] <Inline> lol
[23:57:34] <nij-> jmercouris: Can it save functions and closures?
[23:57:43] <jmercouris> nij-: no...?
[23:57:50] <nij-> :(
[23:57:52] <jmercouris> but YOU CAN!
[23:58:08] <lisp123> Josh_2: Indeed, that's a very difficult task :)
[23:58:11] <nij-> lisp123: can bknr save functions and closures?
[23:58:16] <jmercouris> look (format *some-file-stream '(defun my-function ())) ->
[23:58:25] <lisp123> Then it would be called SpaceX not BKNR ;)
[23:58:36] <Bike> serializing compiled functions is not something you're going to be able to do in standard lisp, and probably not in portable lisp either
[23:58:37] <Josh_2> You can save functions and closures with fasl files
[23:58:52] *** Joins: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[23:59:07] <jmercouris> Bike: hence the define-command macro
[23:59:13] <jmercouris> which allows for this
[23:59:22] <lisp123> nij-: Not at the moment, but you could write it for us :)
[23:59:28] <jmercouris> if you want inspiration, look in the Nyxt source code, where we tackle this exact problem
[23:59:52] <Josh_2> Elephant looks cool as well, shame its unmaintained lisp123 I have looked through the source and cant say I had any idea at all what was going on
[23:59:58] <jmercouris> https://github.com/atlas-engineer/nyxt/blob/master/source/command.lisp
