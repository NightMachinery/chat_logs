[00:01:20] *** Joins: ajak (~ajak@gentoo/developer/ajak)
[00:28:25] *** Parts: _val__ (~valentin@82-169-14-137.biz.kpn.net) ()
[00:42:39] *** Quits: ioangogo (~quassel@2a02:8010:67ed:1::11) (Read error: Connection reset by peer)
[00:42:52] *** Joins: ioangogo (~quassel@2a02:8010:67ed:1::11)
[00:46:28] *** Quits: spare (~g2qmwuuxq@user/spareproject) (Remote host closed the connection)
[00:51:01] *** Joins: rgrinberg (~textual@2806:101e:7:6bed:f1e5:db7b:1d69:5e00)
[00:56:27] *** Quits: magla (~gelignite@55d43657.access.ecotel.net) (Quit: Stay safe!)
[01:07:51] *** Joins: spare (~ijuq2kcf5@user/spareproject)
[01:10:42] *** Joins: p-i-_ (~Ohmu@2403:6200:8978:d293:ac55:1771:f0c9:b1e6)
[01:14:14] *** Quits: p-i- (~Ohmu@2403:6200:8978:d293:a95e:b595:a77d:be89) (Ping timeout: 260 seconds)
[01:23:42] *** Joins: crashrep (~crashrep@user/crashrep)
[01:39:20] *** Quits: spare (~ijuq2kcf5@user/spareproject) (Remote host closed the connection)
[01:39:30] *** Joins: spare (~ijuq2kcf5@user/spareproject)
[01:41:37] *** Quits: bch (~bch@S01069050ca2cbf63.ok.shawcable.net) (Remote host closed the connection)
[01:55:54] *** Quits: rgrinberg (~textual@2806:101e:7:6bed:f1e5:db7b:1d69:5e00) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[01:59:26] *** Joins: rgrinberg (~textual@2806:101e:7:6bed:f1e5:db7b:1d69:5e00)
[02:01:25] *** Quits: crashrep (~crashrep@user/crashrep) (Remote host closed the connection)
[02:01:46] *** Joins: crashrep (~crashrep@user/crashrep)
[02:11:48] *** Quits: gh34 (~textual@cpe-184-58-181-106.wi.res.rr.com) (Quit: Textual IRC Client: www.textualapp.com)
[02:16:02] *** Quits: epony (~epony@user/epony) (Ping timeout: 240 seconds)
[02:21:21] *** Quits: rgrinberg (~textual@2806:101e:7:6bed:f1e5:db7b:1d69:5e00) (Ping timeout: 250 seconds)
[02:53:22] *** Joins: epony (epony@user/epony)
[03:00:33] *** Joins: yuesbeez (uid458354@id-458354.tinside.irccloud.com)
[03:13:40] *** Joins: rgrinberg (~textual@187.223.115.137)
[03:14:16] *** Quits: rgrinberg (~textual@187.223.115.137) (Read error: Connection reset by peer)
[03:41:48] *** Quits: spare (~ijuq2kcf5@user/spareproject) (Remote host closed the connection)
[04:27:49] *** Joins: callmepk (~callmepk@wslu/callmepk)
[04:38:56] *** Quits: Seirdy (~Seirdy@sourcehut/user/seirdy) (Quit: exiting 3.4)
[04:39:39] *** Joins: Seirdy (~Seirdy@sourcehut/user/seirdy)
[04:47:37] *** Quits: Seirdy (~Seirdy@sourcehut/user/seirdy) (Ping timeout: 240 seconds)
[05:10:28] *** Quits: callmepk (~callmepk@wslu/callmepk) (Quit: <= To Be Continued)
[05:10:53] *** A_Dragon is now known as [
[05:10:59] *** [ is now known as A_Dragon
[05:34:17] *** Joins: rgrinberg (~textual@2806:101e:7:6bed:a9d7:c052:4356:1941)
[05:50:14] *** Joins: Seirdy (~Seirdy@sourcehut/user/seirdy)
[06:37:09] *** Quits: moparisthebest (~moparisth@user/mopar) (Quit: Gateway shutdown)
[06:49:40] *** Joins: moparisthebest (~moparisth@user/mopar)
[07:01:19] *** Joins: Vonter (~Vonter@user/vonter)
[07:36:37] *** Quits: yuesbeez (uid458354@id-458354.tinside.irccloud.com) (Quit: Connection closed for inactivity)
[07:50:24] *** Quits: crashrep (~crashrep@user/crashrep) (Remote host closed the connection)
[07:50:49] *** Joins: crashrep (~crashrep@user/crashrep)
[07:53:44] *** Quits: crashrep (~crashrep@user/crashrep) (Client Quit)
[08:07:29] *** Quits: The_Blode (~Blode@user/the-blode/x-7164444) (Ping timeout: 256 seconds)
[08:07:50] *** Quits: p-i-_ (~Ohmu@2403:6200:8978:d293:ac55:1771:f0c9:b1e6) (Remote host closed the connection)
[08:08:45] *** Joins: p-i- (~Ohmu@2403:6200:8978:d293:d42:aa16:b622:3cd7)
[08:16:48] *** Joins: The_Blode (~Blode@user/the-blode/x-7164444)
[08:31:17] *** Quits: martiert_work (~martiert@173.38.220.52) (Ping timeout: 256 seconds)
[08:33:09] *** Joins: martiert_work (~martiert@173.38.220.52)
[08:38:02] *** Quits: pvp (~pvp@p4ff134a5.dip0.t-ipconnect.de) (Read error: Connection reset by peer)
[08:38:10] *** Joins: pvp9 (~pvp@p4ff134a5.dip0.t-ipconnect.de)
[08:42:59] *** Quits: p-i- (~Ohmu@2403:6200:8978:d293:d42:aa16:b622:3cd7) (Quit: Leaving...)
[08:57:56] *** Joins: akoana (~ah@user/akoana)
[09:10:41] <akoana> hmm, is there any way to suppress the directory listing when using    curl ... sftp://... -Q "pwd"  (or -Q "rename old new")?
[09:24:16] *** Quits: rgrinberg (~textual@2806:101e:7:6bed:a9d7:c052:4356:1941) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[10:31:41] *** Quits: rnsanchez (~rnsanchez@2804:14d:8a81:94a4:8ccf:d40:d4e6:2ebe) (Ping timeout: 250 seconds)
[10:31:58] *** Quits: Jaxx (~Jaxx@user/jaxx) (Remote host closed the connection)
[10:50:07] *** Quits: moparisthebest (~moparisth@user/mopar) (Ping timeout: 256 seconds)
[10:51:58] <bagder> azure stopped again :-(
[10:52:13] *** Joins: Jaxx (~Jaxx@user/jaxx)
[11:03:02] <akoana> that sounds unfortunate
[11:03:29] <bagder> almost amusing, as it was fixed for a while yday and then it broke again
[11:04:41] <akoana> any hints about the causes?
[11:05:19] <bagder> they're trying to tighten their ship and procedures as they're seeing crypto mining abuse
[11:05:43] <bagder> the presumption yday that we were mostly caught in this by mistake
[11:06:59] <akoana> well, partial success: their ship seems quite tight now...
[11:07:06] <bagder> =)
[11:07:54] <bagder> no, actually I missed this note: "So the issue was unrelated to crypto abuse but a separate one which they have mitigated. Sorry about that"
[11:08:14] <bagder> a very short mitigation it seems =)
[11:09:15] <akoana> nice competence simulation "look we're working hard on it..."
[11:11:43] <akoana> well, fair enough, it's kinda painful for such a big company...
[11:13:17] <bagder> I have hope that my friends there can help us work this out (again)
[11:16:41] <akoana> yeah, I guess azure will soon get fixed, meanwhile they are losing $$$
[11:16:58] <bagder> I don't think affects paying customers...
[11:17:04] <bagder> +this
[11:17:45] <bagder> == we are on the free tier
[11:17:54] <akoana> oh, I see
[11:20:24] *** Joins: otisolsen70 (~otisolsen@80.80.4.2)
[11:28:51] <hsv> Can curl be told to just print the url instead of actually getting it?  (can't see anything in the man page)
[11:29:05] <bagder> hsv: nope
[11:31:01] <hsv> fair enough.
[11:33:06] *** Joins: viridian (~viridian@user/viridian)
[11:33:44] *** Quits: viridian (~viridian@user/viridian) (Client Quit)
[11:40:36] *** Quits: Jaxx (~Jaxx@user/jaxx) (Remote host closed the connection)
[11:44:00] *** Joins: uid_max (~samw@host86-180-104-33.range86-180.btcentralplus.com)
[11:59:01] *** Joins: kdudka (~kdudka@83-208-198-11.rcc.o2.cz)
[12:06:36] *** Quits: DarkG (~DarkG@user/darkg) (Excess Flood)
[12:06:50] *** Joins: DarkG (~DarkG@user/darkg)
[12:07:44] <bagder> sharpobject: with #8436, my quiche build seems to behave correctly
[12:07:45] -curelbot- [GitHub] PR #8436: quiche: after leaving h3_recving state, poll again (https://github.com/curl/curl/pull/8436)
[12:07:56] *** Joins: icing (~stefan@2001:16b8:f3e7:7c00:1170:693:f156:e545)
[12:07:56] *** Quits: icing (~stefan@2001:16b8:f3e7:7c00:1170:693:f156:e545) (Changing host)
[12:07:56] *** Joins: icing (~stefan@user/icing)
[12:08:25] <bagder> quiche had quite subtly changed how their API works
[12:08:39] <sharpobject> cool, I will try it out
[12:10:45] <icing> they switched to tcp.
[12:11:31] <bagder> tcp is soooo 1980 =)
[12:12:08] <icing> it just works too well.
[12:12:25] <bagder> too predicable
[12:13:19] <bagder> time for a refill
[12:27:29] *** Quits: icing (~stefan@user/icing) (Quit: Leaving...)
[12:30:38] *** Joins: spare (~5s6yp3qf5@user/spareproject)
[12:45:33] *** Quits: spare (~5s6yp3qf5@user/spareproject) (Remote host closed the connection)
[12:45:41] *** Joins: spare (~5s6yp3qf5@user/spareproject)
[12:47:54] *** Joins: icing (~stefan@2001:16b8:f3e7:7c00:35fc:a734:1d40:fe60)
[12:47:54] *** Quits: icing (~stefan@2001:16b8:f3e7:7c00:35fc:a734:1d40:fe60) (Changing host)
[12:47:54] *** Joins: icing (~stefan@user/icing)
[13:01:47] *** Joins: rnsanchez (~rnsanchez@2804:14d:8a81:94a4:8ccf:d40:d4e6:2ebe)
[13:06:59] *** Joins: stu (~stu@217-122-163-53.cable.dynamic.v4.ziggo.nl)
[13:07:02] *** Quits: stu (~stu@217-122-163-53.cable.dynamic.v4.ziggo.nl) (Write error: Broken pipe)
[13:58:18] *** Joins: Jaxx (~Jaxx@user/jaxx)
[14:29:40] *** Parts: akoana (~ah@user/akoana) (Leaving)
[14:35:42] <icing> This used to be a lively chat on Fridays. What has the Corona virus done to us?
[14:58:45] *** Joins: otisolsen70_ (~otisolsen@80.80.4.2)
[15:01:58] <bagder> over here all restrictions were lifted this week
[15:02:19] <bagder> still feels weird and things are definately not back to "normal" anyway
[15:02:25] <icing> read it in the paper. everyone happy?
[15:02:32] *** Quits: otisolsen70 (~otisolsen@80.80.4.2) (Ping timeout: 250 seconds)
[15:02:43] <icing> yeah, guess it is getting some used to
[15:02:59] <bagder> it does, I think people will try to ramp up
[15:03:12] <bagder> my wife's job is at "one day a week" in the office
[15:03:18] <icing> especially when in their twenties, I imagine.
[15:04:12] <icing> but you are all vaccinated, I imagine?
[15:04:39] <bagder> yeah, even my 18yo daughter is on 3 shots now
[15:04:59] <icing> my 22yo as well
[15:05:01] <bagder> my 15yo is on two
[15:05:45] <icing> should still work well for him
[15:17:11] <kushal> That reminds me, I should book my second shot
[15:17:35] <kushal> which is practically the 4th shot, 5th if I count COVID itself :p
[15:18:33] <icing> invulnerable, basically
[15:19:11] <kushal> haha, nope :p
[15:19:48] <osse> what were the -1st and 0th shots ?
[15:28:29] <kushal> osse, covishield, the AZ equivalent in India 
[15:35:37] *** Quits: Jaxx (~Jaxx@user/jaxx) (Remote host closed the connection)
[16:08:46] *** Quits: otisolsen70_ (~otisolsen@80.80.4.2) (Quit: Leaving)
[16:09:54] *** Joins: otisolsen70 (~otisolsen@80.80.4.2)
[16:41:02] *** Joins: Jaxx (~Jaxx@user/jaxx)
[16:42:44] *** Quits: Jaxx (~Jaxx@user/jaxx) (Remote host closed the connection)
[16:46:21] *** Joins: Everything (~Everythin@37.115.210.35)
[16:58:35] *** Joins: p-i- (~Ohmu@2403:6200:8978:d293:c8e6:e7be:c059:cf5e)
[16:59:03] *** Joins: Jaxx (~Jaxx@user/jaxx)
[17:46:08] *** Quits: otisolsen70 (~otisolsen@80.80.4.2) (Quit: Leaving)
[17:46:54] *** Quits: epony (epony@user/epony) (Read error: Connection reset by peer)
[17:59:22] *** Quits: kdudka (~kdudka@83-208-198-11.rcc.o2.cz) (Quit: Leaving)
[18:18:49] *** Joins: moparisthebest (~moparisth@user/mopar)
[18:44:04] *** Joins: epony (epony@user/epony)
[19:00:46] <bagder> this is what I did this week => https://bagder.github.io/log/
[19:06:32] *** Quits: epony (epony@user/epony) (Ping timeout: 240 seconds)
[19:11:05] <icing> typo: "user couldn’t changed", httpd will observer the :scheme correctly soon, gz on the star, azure (and cloud landlords) suck, have a nice weekend!
[19:11:52] <bagder> thanks, will fix
[19:12:46] <bagder> every week I do like 5 follow-up commits to fix typos =)
[19:13:12] <bagder> I never learn to check it proper the first time
[19:13:27] <icing> I often run aspell, but not always...
[19:19:11] <icing> just had to write something in google docs today, their spell checker is very good and catches wrong word combinations. maybe c&p from there?
[19:20:12] <Piru> wait uh reducing strlen on static strings
[19:20:26] <Piru> isn't that totally pointless as the compiler optimizes those away?
[19:20:57] <icing> with an inlined strlen() you mean?
[19:21:05] <Piru> it'll be just constant yes
[19:21:20] <icing> it could, but does it?
[19:21:24] <Piru> yes
[19:21:53] <Piru> it goes rather far
[19:22:12] <Piru> printf result of strlen of constant string and it'll putstr
[19:22:18] <Piru> a constant string
[19:22:31] <icing> that bastard - all the work for nothing!
[19:22:54] <icing> maybe no all platforms where curl builds us gcc with Oinf
[19:22:57] <Piru> granted this is somewhat compiler specific
[19:23:01] <Piru> but gcc does all that
[19:24:10] <Piru> mmm ok printf is not optimized in this case it seems
[19:25:06] <Piru> but
[19:25:07] <Piru>     1054:       be 07 00 00 00          mov    $0x7,%esi
[19:25:19] <Piru> ...
[19:25:19] <Piru>     1062:       e8 c9 ff ff ff          callq  1030 <printf@plt>
[19:25:44] <icing> but if you write a 0 into the constant, it will not work! -.-
[19:26:15] <Piru> when I printf("result %lu\n", strlen("testing"));
[19:26:44] <icing> ok, so the strlen does, but printf not. any ____inline___ markups in your header file?
[19:26:57] <Piru> same with:   const char y[] = "yeah"; and then strlen that
[19:27:05] <Piru> constant 4 used
[19:27:18] <Piru> nah this is not about inline
[19:27:23] <Piru> it's gcc optimizing
[19:27:44] <icing> yeah, but it needs some hint to know about what to opt in a call to a shared lib, or?
[19:28:08] <Piru> it has internal knowledge
[19:28:27] <Piru> it knows how strlen behave. yes, that can cause trouble if you do something funky with same function name.
[19:28:37] <icing> doubt it is that simple. what if I link another lib that has a strlen() function?
[19:28:39] <Piru> you need to disable this optimization manually in that case
[19:28:46] <Piru> it is this simple
[19:29:25] <icing> I'd guess it check where the strlen symbol really was declared.
[19:29:30] <Piru> you'll need to -ffreestanding
[19:30:38] <Piru> -fno-builtin-strlen would work for this specific case I suppose
[19:31:02] <Piru> yes
[19:31:02] <Piru>     1073:       c6 44 24 0f 00          movb   $0x0,0xf(%rsp)
[19:31:03] <Piru>     1078:       e8 b3 ff ff ff          callq  1030 <strlen@plt>
[19:31:15] <Piru> so unless if you tell gcc NOT to do it, it will
[19:31:27] <icing> https://stackoverflow.com/questions/18711719/freestanding-gcc-and-builtin-functions
[19:32:13] <icing> so, internally it as __builtin_strlen and strlen is by default #define'd to that
[19:32:51] <Piru> yes unless if you -fno-builtin-strlen or anything else that implies it
[19:33:07] <icing> ok, understood. thanks for the hint!
[19:33:24] <Piru> but of course this might be different on other compilers
[19:33:33] <Piru> so I guess it's not poinless change as such
[19:34:13] <icing> we use in Apache sizeof(x)-1 often as well. old software pieces...
[19:34:42] <Piru> on the other hand performing strcat or other string functions that need to walk to the string end first can be really heavy.. if you strings can grow very very large
[19:35:17] <Piru> then redesigning the code to maintain a pointer to current string end obviously pays off
[19:36:04] <Piru> of course this will likely only really matter if the string gets MBs long
[19:36:57] <icing> unless your code runs inside a lightbulb
[19:37:26] <icing> or a battery device
[19:37:33] <Piru> even those devices hafe insane specs these days
[19:37:37] <Piru> have*
[19:38:29] <Piru> it's not like they're some coldfire cpu or something. even those likely have some some fairly beefy arm
[19:41:45] <Piru> confession: I used to do strlen -> sizeof optimizations years ago as well, until I figured out it was quite pointless with even then current gcc versions
[19:42:18] *** Joins: crashrep (~crashrep@user/crashrep)
[19:42:23] <Piru> btw just recently I did some performance optimization for some highly sensitive code
[19:42:47] <Piru> I have some rather complicated outer loops, y and x.. so yeah working on pixels
[19:43:40] *** Joins: bch (~bch@S01069050ca2cbf63.ok.shawcable.net)
[19:43:54] <Piru> then on each pixel I generate destination alpha value based on mode. either set the alpha to 0xff, keep the original value, use the source alpha, or mix current destination alpha with the source. so 4 diffrent modes
[19:44:26] <Piru> this is inconvinient as it is right in the "innerloop" of the operation. so causes massive slowdown
[19:44:49] <Piru> having a switch satatement there doing the necessary math is painful
[19:45:09] <Piru> especially since you can have RGB alpha which will been to be converted to grayscale, first, too
[19:45:56] <Piru> now. the neat thing is that optimizers are rather impressive these days. so you can do this: have normal code that has the swich statement, and all that code, right in the innerloop
[19:46:27] <Piru> but then higher up do something like this:
[19:46:33] <Piru> #define DESTALPHA(x) \
[19:46:33] <Piru> switch (destalpha) \
[19:46:33] <Piru> { \ default: \ case TT_DestAlpha_One: do { x } while (0); break; \ case TT_DestAlpha_Dst: do { x } while (0); break; \ case TT_DestAlpha_Src: do { x } while (0); break; \ case TT_DestAlpha_Mix: do { x } while (0); break; \
[19:46:39] <Piru> crap. damn it
[19:46:59] <Piru> here https://pastebin.com/7VvAkihY
[19:48:32] <Piru> then just use this macro with your code. DESTALPHA(for (y = 0; y < h; y++) { for (x = 0; x < w; x++) { complex stuff that does switch (destalpha) { .. } }})
[19:49:15] <Piru> the compiler sees all that can then optimize away all that conditional code in the innerloops
[19:50:17] <Piru> so with very little code repetition you can have "perfect" innerloops for each 4 modes. before compilers were this good you had to jump through all kinds of hoops to get similar effect
[19:52:28] <icing> so, with the macros, you basically have generated all code combinations and the optimizer strips the unneeded stuff away. 
[19:52:57] *** Joins: epony (epony@user/epony)
[19:53:00] <Piru> yeah each individual case can optimize away the other 34
[19:53:02] <Piru> -4
[19:53:13] <icing> neat
[19:55:03] <Piru> I think that in some limited scenarios even gcc -O3 will attempt this even without help
[19:55:49] <Piru> of course the code will have to have switch statements that have default: etc so that there are no "loose ends" that can't be optimized away
[19:56:27] *** Joins: magla (~gelignite@55d4e921.access.ecotel.net)
[19:58:44] <Piru> some cool talk about similar things (c++ angle) https://www.youtube.com/watch?v=zBkNBP00wJE
[19:58:53] <Piru> also c64 ;-)
[20:05:48] <Piru> sometimes I see some complaints how C++ is bloaty etc, but yeah this is video shows quite the opposite
[20:07:17] *** Joins: p-i-_ (~Ohmu@mx-ll-180.183.72-196.dynamic.3bb.co.th)
[20:10:37] *** Quits: p-i- (~Ohmu@2403:6200:8978:d293:c8e6:e7be:c059:cf5e) (Ping timeout: 240 seconds)
[20:11:56] *** Quits: p-i-_ (~Ohmu@mx-ll-180.183.72-196.dynamic.3bb.co.th) (Ping timeout: 256 seconds)
[20:35:14] *** Joins: rgrinberg (~textual@2806:101e:7:6bed:3400:dfe7:fd4b:441c)
[20:56:58] *** Quits: icing (~stefan@user/icing) (Quit: Leaving...)
[21:10:33] *** Joins: rv1sr (~rv1sr@user/rv1sr)
[21:14:51] *** Quits: crashrep (~crashrep@user/crashrep) (Ping timeout: 276 seconds)
[21:17:25] *** Quits: rgrinberg (~textual@2806:101e:7:6bed:3400:dfe7:fd4b:441c) (Ping timeout: 240 seconds)
[21:24:40] *** sam_ is now known as sam__
[21:24:51] *** sam__ is now known as sam_
[22:04:51] *** Joins: lotharn (~kvirc@2600:8800:280:d400:a51d:9ed:d31c:ae31)
[22:04:56] <lotharn> how do i use curl to query  the form on this map? https://littlefreelibrary.secure.force.com/mapPage
[22:08:27] <Piru> lotharn: you figure out what requests are needed to do whatever you want to do. it's often manual work
[22:09:02] *** Quits: Vonter (~Vonter@user/vonter) (Quit: WeeChat 3.4)
[22:12:36] *** Quits: Everything (~Everythin@37.115.210.35) (Quit: leaving)
[22:28:32] *** Quits: epony (epony@user/epony) (Ping timeout: 240 seconds)
[22:30:24] *** Joins: crashrep (~crashrep@user/crashrep)
[22:31:10] *** Joins: epony (epony@user/epony)
[22:35:27] *** Quits: crashrep (~crashrep@user/crashrep) (Ping timeout: 276 seconds)
[22:44:22] *** Joins: tiotags (~tiotags@user/tiotags)
[22:53:27] *** Quits: spare (~5s6yp3qf5@user/spareproject) (Remote host closed the connection)
[22:54:02] *** Quits: epony (epony@user/epony) (Ping timeout: 240 seconds)
[23:00:21] *** Joins: cliluw (~cliluw@47.147.73.223)
[23:05:57] *** Joins: rgrinberg (~textual@187.194.14.9)
[23:22:29] *** Quits: uid_max (~samw@host86-180-104-33.range86-180.btcentralplus.com) (Quit: Leaving)
[23:29:47] *** Quits: rgrinberg (~textual@187.194.14.9) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[23:34:49] *** Joins: p-i- (~Ohmu@2403:6200:8978:d293:9c1e:ddbf:a07f:1f6d)
[23:43:11] *** Joins: dege (~dege@user/dege)
[23:51:27] *** Joins: epony (epony@user/epony)
[23:53:52] *** Joins: spare (~6wmjy3pha@user/spareproject)
