[00:06:10] *** Joins: pah (~pah@user/pah)
[00:08:40] *** Joins: stefanos82 (~stefanos8@62-169-104.netrun.cytanet.com.cy)
[00:16:19] *** Quits: andreasbuhr (~quassel@p548dde89.dip0.t-ipconnect.de) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[00:17:11] *** Quits: sprout_ (~quassel@2a02:a467:ccd6:1:e9:abf1:b887:13fa) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[00:17:32] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:e9:abf1:b887:13fa)
[00:22:44] *** Quits: CaCode (~CaCode@user/cacode) (Quit: Leaving)
[00:35:47] *** Quits: pah (~pah@user/pah) (Ping timeout: 264 seconds)
[00:36:13] *** Joins: pah_ (~pah@host-95-235-69-243.retail.telecomitalia.it)
[00:36:42] *** Quits: stefanos82 (~stefanos8@62-169-104.netrun.cytanet.com.cy) (Quit: Leaving)
[00:38:36] *** Joins: Codaraxis__ (~Codaraxis@user/codaraxis)
[00:40:03] *** Joins: Tokamak (~Tokamak@172.58.188.145)
[00:40:50] *** Quits: AmR (~AmREiSa@156.199.218.104) (Quit: Konversation terminated!)
[00:40:52] *** Joins: Simplar (~Simplar@188.163.92.225)
[00:42:16] *** Quits: Codaraxis_ (~Codaraxis@user/codaraxis) (Ping timeout: 244 seconds)
[00:42:27] *** lkor is now known as lionkor
[00:44:30] *** Quits: TheGuestMovie (~TheGuestM@173.231.114.74) (Quit: Client closed)
[00:50:54] *** Quits: pah_ (~pah@host-95-235-69-243.retail.telecomitalia.it) (Ping timeout: 260 seconds)
[00:51:10] *** Joins: pah (~pah@95.236.68.83)
[00:51:33] <lionkor> Hey so I'm writing a wrapper around sockets, to make them easier to use. A lot of things can fail here, like dns lookups, port-already-used,
[00:51:52] *** Quits: pah (~pah@95.236.68.83) (Changing host)
[00:51:52] *** Joins: pah (~pah@user/pah)
[00:52:20] <lionkor> I'm wondering if I should 1) throw, 2) use bool / error type return values, or 3) use an additional error parameter that gets changed on error?
[00:53:36] <lionkor> Exceptions have the disadvantage that failing to handle them will cause (what is effectively) a crash, while any of the other methods are difficult to fail to handle. For example, when I have to pass in a reference to an error_type, and then check it, its almost impossible to miss. What's the right call here?
[00:55:45] <cbreak> lionkor: have you looked at boost::asio?
[00:56:27] <cbreak> it offers two of those options: exceptions, for syncronous calls, and an error code output (via out parameter or callback parameter) for async calls or sync calls
[00:56:50] *** Quits: Tokamak (~Tokamak@172.58.188.145) (Read error: Connection reset by peer)
[00:57:26] <lionkor> i used it before, yeah, now that you say it that does come to mind! So the error code as reference idea isn't completely bad, is it
[01:02:15] <Simplar> Hey guys
[01:02:22] <Simplar> How do I convert deque to string?
[01:02:34] <Simplar> I mean deque<uint32_t> in particular
[01:05:27] <InPhase> lionkor: Exceptions are the right call, because guaranteed error handling is an asset, where the implementer's choice is simply where to handle errors.  Unhandled errors are almost never an asset.  They just mean a program is going to "keep running" in a way that does poorly defined, undefined, or unplanned things, and thus be broken anyway but in ambiguous ways.
[01:06:38] <InPhase> If you don't want your programs to ever crash from exceptions, catch all of them in a place where you can recover from.  This is a pretty straightforward strategy.
[01:07:52] <lionkor> InPhase: Good point! I think the real issue here is the architecture of what I'm building this for, which doesn't allow for graceful recovery but *also* can't crash. I'll use exceptions, possibly with a way to override the error handler if needed, and that's that. Thanks!!
[01:08:22] <Raziel> https://wandbox.org/permlink/wRfnkHmk9FHmec7G is there any good way of avoiding such an obvious cyclic include while keeping things header-only?
[01:08:54] *** Quits: riksteri (riksteri@gateway/vpn/airvpn/riksteri) (Quit: riksteri)
[01:09:24] <InPhase> lionkor: If there is a graceful recovery for error codes, then there is a graceful recovery for exceptions.
[01:09:54] <InPhase> Exceptions just make it easier to have more layers of graceful recovery.
[01:10:04] <lionkor> Yeah, I see the fault in my argument now :D
[01:10:17] <RandomReader> that does sound like an awkward architecture .. I usually don't prefer exceptions for most networking interfaces because "failure" is an expected case, not an exceptional one
[01:10:19] <ville> lionkor: don't go with exceptins. they ruin everything and should never have been added to c++
[01:10:44] <InPhase> RandomReader: It doesn't matter if it's "expected", only if it is frequent.
[01:10:59] <RandomReader> of course it matters if it's expected, that changes the entire code flow
[01:11:18] <RandomReader> I'm not talking about the *mechanics*, but the way code tends to naturally flow
[01:11:38] <InPhase> RandomReader: You can't through many exceptions in tight loops and expect a lightning fast program.  But you can throw them regularly for failures to achieve desired states because things have gone wrong which sometimes do.
[01:12:12] <Alipha> Simplar: do you need to convert the integers in the deque to a string? Or can you just loop through the deque and output the integers to std::cout, as long as you put the integers in the deque in the correct order?
[01:12:13] <lionkor> RandomReader: I think a good way could be to provide an optional error_type parameter to each function, the existance of which will bypass the throw. That way you can signal it "i think this might fail, no need to throw"
[01:12:15] <RandomReader> in most languages handling exceptions is noisier / more verbose / more awkward than dealing with return values, and for a large amount of networking a negative result is as common as a positive one
[01:12:51] <RandomReader> there are some that would be "exceptional" / bad logic, but a surprising amount of cases are natural/expected
[01:13:00] <InPhase> RandomReader: Yes, although exceptions are architecturally convenient because you can write a block of success-focused logic, and treat failures on the whole task.
[01:13:03] <lionkor> The issue with exceptions in networking code is that you have a try/catch block for each operation, so when calling socket(), bind(), listen()
[01:13:16] <lionkor> you have that many try/catch blocks and that gets super ugly
[01:13:24] <RandomReader> right that's what I'm getting at, when the negative result is common, the handling code becomes ugly, not convenient
[01:13:37] <InPhase> This is what scope-based resource management was designed for.
[01:13:53] <InPhase> These things should clean themselves up when the stack unwinds.
[01:14:01] <Simplar> Alipha: I've just looped through the deque with cout. Works nice.
[01:14:38] <RandomReader> you seem to think I'm arguing against exceptions as a mechanic for some reason, even though I said I wasn't
[01:14:43] <RandomReader> as if the issue is resource cleanup
[01:14:53] <lionkor> My entire point is that I'm adding RAII to socket code, but the exceptions just mess with it. I'm definitely just going for throw-by-default with an optional error out-parameter now lol that's a good middle-ground
[01:14:55] <RandomReader> maybe re-read my comments and see if you understand what I'm actually saying?
[01:15:01] <InPhase> RandomReader: lionkor's comment inddicated that, not yours.
[01:15:02] <johnny> i allowed exceptions for ontrol flow because of a design flaw :(
[01:15:08] <ville> InPhase: you can raii in exception-less code just as well
[01:15:17] <johnny> just one place tho
[01:15:22] <RandomReader> oh
[01:15:34] <RandomReader> I'll start addressing people
[01:15:44] <RandomReader> lionkor - I wouldn't use a separate error param either, that's equally ugly
[01:16:14] <RandomReader> but I don't follow your comment about RAII and exceptions: it naturally does the right thing in the presence of exceptions, that's kind of the point
[01:16:16] <johnny> so why out parameter rather than something like Result?
[01:16:18] *** Quits: pah (~pah@user/pah) (Ping timeout: 268 seconds)
[01:16:26] <Raziel> everyone knows you just return ints, and negative ones are bad and positive ones are good
[01:16:27] <Raziel> :p
[01:16:39] <johnny> if there's one thing in C++ i really have trouble wrapping my head around accepting it's out parameters
[01:17:08] <ville> lionkor: i wouldn't necessarily write a "dual" interface. pick one way your "thing" handless errors and that's it.
[01:17:17] <lionkor> RandomReader: Yeah sorry I misphrased that - It messes with my design, not with my RAII :D I dont like how clunky it becomes to use
[01:17:19] <InPhase> lionkor: The socket classes I use close in the the socket in the destructor, for example.  There's no need then for a separate try/catch.
[01:17:33] *** Joins: pah (~pah@user/pah)
[01:17:40] <InPhase> s/in the//
[01:17:48] <InPhase> Not typing great today.
[01:18:15] <RandomReader> typically I'm following two general forms .. if negative and positive results are both "natural" outcomes, then that's the return value .. if I'm structuring this in a functional way then I might use something along the lines of Result<T> or expected<T> or whatever the name of the week is -- it boils down to a variant returning one of two results
[01:18:40] <lionkor> Hm Result<T> is nice, too, yeah
[01:18:48] <RandomReader> if I'm structuring it in a more OO flow then these might just be "operations" I do on a single object, so the return is just success/failure
[01:18:52] <InPhase> lionkor: It's conceivable you want separate error reporting or error type handling, but you can work that into the exception hierarchy and messages.
[01:19:19] <ville> there's nothing functional about result-like. necessarily. sure people seem to want to stick "monadic" things on them
[01:19:38] *** Quits: Simplar (~Simplar@188.163.92.225) (Quit: Going offline, see ya! (www.adiirc.com))
[01:20:13] <RandomReader> then I use exceptions for things that logically should never fail, so e.g. I might have a create_listener() that returns an RAII ListeningSocket or whatever, and that will throw an exception because any failure is an issue that would not be solved by this interface
[01:20:27] <RandomReader> e.g. it's either an environment issue or programmer mistake
[01:20:46] <RandomReader> same for other "can fail but is not natural" flows
[01:21:10] *** Quits: magla (~gelignite@55d4a5c9.access.ecotel.net) (Quit: Stay safe!)
[01:21:14] <RandomReader> and I'll just mix variations of those based on the expected use cases for this thing
[01:21:20] <lionkor> Not to circlejerk, but the "proper c++ way" here would be to make around 100 different exception-derived classes for each possible posix errno and winsock error code, and throw those. Then have catch() for each specific kind and handle them separately. But that's not going to happen, so I just need something that is easy to use. Result<T> and out-parameter errors look the prettiest right now.
[01:21:33] <RandomReader> I don't even bother to try to make networking interfaces generic these days, I'm always building for a use case
[01:21:35] <ville> just use resuslt-like for everything. there's no argument whether something is an exception or not
[01:21:51] <RandomReader> that would not be considered "proper c++ way" by anyone I know of
[01:22:10] <johnny> do you have a preference for a particular implementation ville ?
[01:22:19] <ville> johnny: sure. my own
[01:22:26] <lionkor> RandomReader: It's definitely ad absurdum, yeah.
[01:22:33] <RandomReader> and there's already an exception system for those codes, it's called std::system_error and it works with std::error_code
[01:22:34] <johnny> and how is that different from the known ones?
[01:22:38] <RandomReader> was added in C++11 :P
[01:23:01] <johnny> or the one(s) that have standard proposal at least
[01:24:50] <ville> johnny: its behaviour can be customized somewhat. you can customize value access checking and you can customize dereference depth on value access. and works with either value or error being void
[01:24:59] <RandomReader> lionkor - something else that might be relevant given your comments is that I never wrap the POSIX stuff directly
[01:25:11] <RandomReader> e.g. I don't make an equivalent to bind()
[01:25:24] <RandomReader> I make a create_server_socket that happens to bind because it's necessary
[01:25:49] <johnny> bind just being an implementation detail
[01:25:52] <ville> johnny: also it has operator [] and () on it, so if your value access dereferences to something with those it'll call that
[01:26:12] <RandomReader> similarly I find a Socket being generically create-able doesn't do me any good: I get one as a result of doing one of these things, binding or accepting or connecting
[01:26:14] <johnny> did you publish it anywhere?
[01:26:23] <RandomReader> er not binding, listening
[01:26:42] *** Quits: pah (~pah@user/pah) (Ping timeout: 244 seconds)
[01:26:49] <ville> no not really. i've pasted it on various occasions into a pastebin
[01:27:10] <lionkor> RandomReader: issue is i need winsock+posix.
[01:27:26] <johnny> isn't that the point of RandomReader's design there?
[01:27:43] <RandomReader> that's even more reason to make your interface be about usage, not about making thin wrappers :P
[01:28:09] <InPhase> It's important to note that Expected<T> and direct exceptions have critically different meaning.  An exception says the operation could not be completed.  Expected<T> says the returned object could not be constructed.  Thus Expected<T> is inadequate if the operation had meaningful impacts other than creating the return value.
[01:28:33] <ville> InPhase: whatnow?
[01:28:52] <johnny> the wrappers might be valuable for smoothing over some nonsense, but that doesn't mean you need to directly use them.
[01:29:35] <ville> InPhase: getting the error-side of a result-like is just as well used for anything failing. does not have to be about construction of anything
[01:29:37] <InPhase> ville: Imagine you have a function that does X and returns Y, but the caller only cared about X and did not care about Y.  Now the exception is never thrown and no default error handling happened.
[01:30:22] <InPhase> ville: This reduces to no better than an integer error code.
[01:30:31] <ville> InPhase: i just don't understand your claim. if a function has success/error then result-like is appropriate
[01:30:37] <johnny> because you didn't check the result?
[01:30:37] <InPhase> ville: Which of course is historically often ignored leading to bugs.
[01:30:52] <johnny> isn't that why they created the [[nodiscard]] thingy?
[01:30:59] <johnny> although. i don't know what actually uses it
[01:31:07] <ville> InPhase: presumably any result-like is marked [[nodiscard]]
[01:31:58] <InPhase> ville: Which will guarantee Expected<Y> is saved.  But is there any way with [[nodiscard]] to guarantee the error condition is checked?
[01:32:28] *** Joins: pah_ (~pah@host-80-104-100-41.retail.telecomitalia.it)
[01:32:31] <ville> InPhase: my result-like has configurable checked value access. you can configure it to be noop, or anything you wish really
[01:32:32] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[01:32:49] *** Joins: Tokamak (~Tokamak@172.58.188.145)
[01:32:55] <ville> i don't know about expected in particular
[01:33:32] <RandomReader> lionkor - to expand on that, the WinSock handles and error domains are different, plus a couple of the functions, even with the posix-like interface .. and that interface doesn't integrate well with other Windows work .. so it's much more useful to build the abstraction around "I want to do X" so that these details don't leak into the caller
[01:34:04] <InPhase> ville: Does it contain a feature that mandates the error condition is checked before proceeding to the next operation that would depend on the successful operation of external state changes intended to be caused by the original function call?
[01:34:36] <johnny> RandomReader, it's also a better approach in general when it doesn't affect performance or isn't working around some issue in the implementation imo
[01:34:37] <ville> what is "next" operation?
[01:35:15] <InPhase> ville: Say Function1 is "turn motor on", and function 2 is "move motor forward by 5 steps".
[01:35:30] <lionkor> RandomReader: I don't know any details I *don't* need - I just want to wrap sockets in RAII and have a generic read() & write(). The current code uses winsock and posix in #ifdefs, so this just needs to be a little less bad to be perfect
[01:35:38] <RandomReader> last time I did this I had a generic interface to the rest of the program set up in a header, and the kept the all the platform-specific guts in separate platform_foo.cpp files, just building whichever one was necessary
[01:35:40] <InPhase> ville: Or really any such thing that has a side-effect.
[01:35:42] *** Quits: Fault (~Fault@152.70.112.168) (Quit: Quit.)
[01:36:05] <ville> InPhase: are you asking that can it be misused then yes sure
[01:36:07] *** Joins: Fault (~Fault@152.70.112.168)
[01:36:16] <RandomReader> lionkor - you should have that information based on what the program needs to accomplish with networking though
[01:36:27] <lionkor> yeah, true
[01:36:27] <InPhase> ville: Then that is the semantic difference I mentioned that you said whatnow about.  :)
[01:37:00] <InPhase> ville: There are different guarantees provided.
[01:37:02] <ville> InPhase: you can do it for exceptions too. try { fun1(); } catch(...) {} fun2();
[01:37:41] <RandomReader> e.g. if you need a TCP connection to a host by name on a particular port, then send and receive data, that boils down to Socket connect_to(string name, uint61_t port), and send/receive operations
[01:37:43] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[01:37:50] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[01:37:50] *** ChanServ sets mode: +v npaperbot
[01:37:53] <InPhase> ville: That's an in-your-face active misuse, which differs from success-focused error-neglect, a more common invisible-mistake class.
[01:38:34] <RandomReader> if this needs to be asynchronous/nonblocking/multitasking in some way, I usually don't expose send/recv directly, because the event loop is always platform-specific anyway
[01:38:43] <InPhase> ville: I try to design my APIs around common human error type reduction.
[01:38:57] <RandomReader> so I'll integrate with that and turn recv into an event, rather than a call .. that gets me the ability to do buffer management etc
[01:39:28] <RandomReader> sending may be a separate call, depending on how the flow goes .. e.g. for a trivial request/response server it'd just be the result of the recv event, so no separate call
[01:39:40] <ville> InPhase: it's not a problem in practice
[01:40:03] <RandomReader> for something much more arbitrary then it'd be available as a call, often in the form of "make sure this buffer is sent" and then I go back to the event loop to send it in pieces until it's complete
[01:40:30] <RandomReader> if none of this applies and it really is single-task ok to block, then exposed calls are fine
[01:40:31] *** Quits: kenanmarasli (~kenanmara@user/kenanmarasli) (Quit: Leaving)
[01:41:23] *** Joins: ARoxdale (~ARoxdale@84.203.31.229)
[01:41:24] <johnny> how many times have we seen this dance happen RandomReader :(  i guess i wasn't really exposed to it so directly until apache portable runtime
[01:42:10] <johnny> outside of interpreted languages of course, which already do such smoothing over
[01:42:27] <Alipha> InPhase: typically, I'd design a Result type to throw if you attempt to access the "success value" and the Result was not successful. Unless I had to avoid exceptions entirely
[01:42:35] <RandomReader> yeah .. BSD sockets are simultaneously useful and annoying to me, it influenced an entire model and it's been so hard to see the forest for the trees as a result
[01:42:57] <RandomReader> Internet wouldn't have spread as well without them, and yet...
[01:43:04] <johnny> and yet... :)
[01:43:09] <ville> InPhase: at any rate you may get your static analyzers complain that you're not using an assigned value if that's a concern for you
[01:44:11] <johnny> RandomReader, somewhat relately, did you hear that linux is finally gonna be able to have something like WaitForMultipleObjects ?
[01:44:31] <RandomReader> I didn't, what are they calling it this time? lol
[01:45:14] <johnny> futex_waitv
[01:45:26] *** Joins: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it)
[01:45:34] <ville> io_uring?
[01:45:45] <johnny> no, that's separate
[01:46:01] <ville> from userland i'd probably go through that
[01:46:08] <RandomReader> ah interesting
[01:46:31] *** Quits: pah_ (~pah@host-80-104-100-41.retail.telecomitalia.it) (Ping timeout: 256 seconds)
[01:46:47] <johnny> This patch was written by wine folks for a reimplementation of WaitForMultipleObjects
[01:46:51] <johnny> https://lkml.org/lkml/2021/10/9/121
[01:47:26] <InPhase> Alipha: Yes.  I consider the core value of the Expected<T> returns as being for function calls where the sole purpose is creating a state reflected in a return value that will be accessed for any operations that depended on the completion of the function call.
[01:47:35] <johnny> i don't know if that's the FINAL version of the patch. previous versions handled NUMA and all sorts of fancy things i don't know much about
[01:47:46] *** Joins: pah (~pah@user/pah)
[01:47:56] <johnny> this is the stripped down version with that other stuff to be readded later
[01:48:40] <johnny> you should hvae seen what they tried to do before this
[01:48:51] <ville> Alipha: well people who opt for a result-like probably aren't big fan of exceptions to begin with. so you may be targeting some other people then with your type
[01:48:54] <johnny> i don't know where the full source for those patches are though
[01:50:22] <johnny> or at least a full source that's not just a patch you apply on top of a specific kernel version.  but it did involve massively increasing one of the limits from limits.h
[01:50:44] <ville> but you don't have to really bake-in any checking on value access. make it user-customizable at least if you're going to have it
[01:53:22] <whupdup> If I allocate an array of stuff like `T* ary = (T*)malloc(sizeof(T) * N);` and default-initialize it genericly with a loop like `for (size_t i = 0; i < N; ++i) new (ary + i) T();`, is it safe to assume the entire loop will be optimized away for TriviallyConstructible objects?
[01:54:01] <whupdup> assuming modern compilers and adequate optimization settings of course
[01:54:42] <ville> didn't they dr that malloc now creates the objects?
[01:55:09] <ville> (i still need to catch up on my 20 reading)
[01:55:20] <ville> well 20 and post-20
[01:55:39] <whupdup> that seems... extremely weird and idk how malloc would do that and remain just a function for allocating plain memory
[01:56:01] <ville> it's not "just a function". it's magical function
[01:56:34] <whupdup> is that what the m stands for?
[01:57:13] <ville> at any rate i wouldn't presume that to happen. i'd have to check
[02:00:07] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Ping timeout: 256 seconds)
[02:00:32] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[02:01:30] *** Joins: Simplar (~Simplar@188.163.92.225)
[02:01:44] <Simplar> What is faster in performance: vector, pair or tuple?
[02:02:01] <whupdup> in godbolt it seems to optimize to a calloc with some trivial tests, but I'm trying to think if there's a more generic rule
[02:02:13] <whupdup> I guess if you have a TriviallyContructible then new (mem) T(); will become a noop
[02:02:22] <whupdup> and a loop of noops gets canned for being useless
[02:02:37] *** Joins: emerent_ (~quassel@p200300cd574855c7ba27ebfffed28a59.dip0.t-ipconnect.de)
[02:02:38] *** emerent is now known as Guest7858
[02:02:38] *** emerent_ is now known as emerent
[02:03:10] *** Quits: Guest7858 (~quassel@p200300cd5748552fba27ebfffed28a59.dip0.t-ipconnect.de) (Ping timeout: 268 seconds)
[02:04:38] <Simplar> i guess i should use vector of pairs instead of vector of vectors if I use only 2 first indices in each inner vector
[02:05:13] *** Quits: Tokamak (~Tokamak@172.58.188.145) (Read error: Connection reset by peer)
[02:06:38] <whupdup> Simplar: not sure if this is within the scope of your question but the fastest of all would just be a vector of structs
[02:07:05] <whupdup> just some POD structs would have much less overhead than any std:: container
[02:07:06] *** Quits: pieguy128 (~pieguy128@bas1-quebec14-67-70-102-17.dsl.bell.ca) (Quit: ZNC 1.8.2 - https://znc.in)
[02:07:27] *** Joins: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-48-67-70-102-17.dsl.bell.ca)
[02:07:43] <ville> whupdup: http://www.eelis.net/c++draft/intro.object#12
[02:07:50] <Simplar> whupdup: I'm kinda convinced to make my code faster, so
[02:08:09] <Simplar> https://www.mycompiler.io/view/5ofRrT1 this has a very bad time performance
[02:08:15] <whupdup> thanks, I was just digging in the draft myself but reading directly from the holy book is a bit painful
[02:08:22] <ville> Simplar: vector-of-vectors is "terrible" its memory is scattered all over the place
[02:08:28] <whupdup> rather, it's hard to find stuff lol
[02:08:38] <Simplar> ville: I can tell you why did I do that
[02:08:45] <ville> whupdup: http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2020/p0593r6.html is the paper where that comes from
[02:09:38] <ville> Simplar: modern machines want to be fed contiguous memory if possible, so look if you can do that
[02:09:52] <whupdup> no way there's a function called std::bless lmao
[02:09:56] <whupdup> man modern C++ is a trip
[02:10:05] <RandomReader> Simplar - the original question seems a bit "off", in the sense that vector pair and tuple have entirely different purposes
[02:10:09] <ville> whupdup: well there isn't one yet.
[02:10:25] <RandomReader> it seems more useful to start from the beginning: what is it you're actually trying to represent?
[02:10:27] *** Joins: Tokamak (~Tokamak@172.58.188.145)
[02:11:34] <Simplar> The problem was the following: find the minimal amount of sessions in a time interval 0 to t seconds, where a session should happen at most after d seconds from last session. First session happens at 0 seconds, last session happens at t seconds. There are also time intervals banned from sessions. These time intervals are a pair of integers, first one is 'from', second one is 'to'. And I need to account for them.
[02:11:36] <ville> whupdup: if i've understod the situation correctly, they've accepted the language side of things, the library side of things (std::bless()) is not yet in or something like that
[02:12:51] <Simplar> First line of input is n, d, t: integers separated by space.
[02:12:59] <RandomReader> that sounds like a simple struct { T from; T to; };
[02:13:22] <RandomReader> let's name it Interval
[02:13:24] *** Quits: Fault (~Fault@152.70.112.168) (Quit: Quit.)
[02:13:32] <RandomReader> and if you have a variable number of Intervals, perhaps that can be a vector<Interval>
[02:13:41] *** Quits: RoKenn (~RoKenn@user/rokenn) (Quit: NSA proxy service interrupted)
[02:13:41] *** Joins: Fault (~Fault@152.70.112.168)
[02:13:41] *** Quits: Fault (~Fault@152.70.112.168) (Remote host closed the connection)
[02:13:49] <Simplar> Next n lines of input: two space-separated integers, first one is 'from' in the banned interval (this integer is NOT included in the interval) and 'to' in the banned interval (this integer is also NOT included in the interval)
[02:14:15] <Simplar> For example from=5, to=13, we are allowed to make a session at 5th second and at 13th second.
[02:14:21] <Simplar> but not between 5th and 13th
[02:14:30] <RandomReader> (side note: if you're jumping ahead into exercises without going through a C++ basics book or similar first, you'll be in for a rough and misleading time .. strongly recommend structured learning for a language like C++, it's unlike any other you've encountered)
[02:14:53] <Simplar> I'm just looking for practical application of some cpp stuffs
[02:15:03] <Simplar> That's why I am trying to develop a fast solution
[02:15:13] <Simplar> I stumble upon something I skimmed through before in docs ^^"
[02:15:16] *** Quits: Codaraxis__ (~Codaraxis@user/codaraxis) (Quit: Leaving)
[02:15:30] *** Joins: Fault (~Fault@152.70.112.168)
[02:15:32] *** Quits: Fault (~Fault@152.70.112.168) (Client Quit)
[02:16:12] <Simplar> RandomReader: I know javascript and php in particular
[02:17:46] <Simplar> So in the problem, I have supposed to follow the recurrent algo
[02:18:15] *** Quits: pakcjo (~pakcjo@user/pakcjo) (Ping timeout: 256 seconds)
[02:19:06] *** Quits: pah (~pah@user/pah) (Ping timeout: 260 seconds)
[02:19:15] *** Joins: pakcjo (~pakcjo@user/pakcjo)
[02:19:31] <RandomReader> !basics
[02:19:32] <nolyc> Books, references, tutorials, for all levels of learning: https://isocpp.org/get-started ; https://isocpp.org/faq ; https://learncpp.com/ ; http://stackoverflow.com/q/388242 ; https://github.com/isocpp/CppCoreGuidelines ; https://cppreference.com/
[02:19:35] *** Joins: Fault (~Fault@152.70.112.168)
[02:19:35] *** Quits: Fault (~Fault@152.70.112.168) (Remote host closed the connection)
[02:19:40] <RandomReader> the stackoverflow link in particular has some recommended books
[02:19:54] <Simplar> We start from current_position = 0, sessions = 1 (because first session happens at 0 seconds), set values for d (max interval allowed between sessions), t (max time to which we count sessions). If current_position+d >= t, return sessions+1 and that's the final amount.
[02:20:10] *** Joins: pah (~pah@user/pah)
[02:20:26] <Simplar> Else, if current_position+d is in the prohibited interval, I take its left side as the session time and take it from there.
[02:20:48] <Simplar> Else, if current_position+d is not in the prohibited interval, I just add session+1 and move on
[02:20:58] <Simplar> (and current_position+d)
[02:23:52] <Simplar> This approach failed some tests
[02:23:55] <Simplar> Some passed
[02:24:32] <Simplar> Others stumbled into time limit
[02:26:05] <Simplar> RandomReader: I've grabbed your links, tysm ^^
[02:27:45] *** Quits: Simplar (~Simplar@188.163.92.225) (Quit: Going offline, see ya! (www.adiirc.com))
[02:28:30] <RandomReader> as for the logic, what happens if a banned interval is greater than d?
[02:29:57] <RandomReader> oh timing
[02:31:38] *** Quits: causative (~halberd@user/causative) (Ping timeout: 268 seconds)
[02:32:44] *** Quits: Tokamak (~Tokamak@172.58.188.145) (Read error: Connection reset by peer)
[02:33:21] *** Quits: pah (~pah@user/pah) (Ping timeout: 244 seconds)
[02:34:04] *** Joins: pah_ (~pah@host-95-233-85-87.retail.telecomitalia.it)
[02:38:34] *** Joins: Tokamak (~Tokamak@172.58.188.145)
[02:38:45] *** Quits: spaceangel (~spaceange@ip-89-176-181-220.net.upcbroadband.cz) (Remote host closed the connection)
[02:38:59] *** Joins: causative (~halberd@user/causative)
[02:48:11] *** Joins: Guest7767 (~Guest77@176.98.31.10)
[02:48:27] *** Parts: Guest7767 (~Guest77@176.98.31.10) ()
[03:03:36] *** Joins: hypnos (~hypnos@c-24-218-116-28.hsd1.ct.comcast.net)
[03:05:26] *** Joins: varioust (~varioust@72-46-56-102.lnk.ne.static.allophone.net)
[03:07:35] *** Quits: Tokamak (~Tokamak@172.58.188.145) (Read error: Connection reset by peer)
[03:07:48] <hypnos> Does anyone here have any ideas for a way to get keyup events on linux. Right now I am tracking keydown events by parsing the keyboard event file. For the purposes of what I'm doing I am trying to find a means to do this that doesn't have the overhead of including large libraries.
[03:12:22] *** Joins: Tokamak (~Tokamak@172.58.188.145)
[03:12:48] <computerquip> hypnos, maybe look at what SDL does
[03:14:48] <SuperNintendoSUX> I know
[03:14:59] <SuperNintendoSUX> look at the source code of die-tk
[03:15:04] <SuperNintendoSUX> it's a piece of cake
[03:15:10] <SuperNintendoSUX> xlib, right?
[03:17:08] *** Quits: great_taste (~great_tas@190.32.235.20) (Quit: Client closed)
[03:18:33] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[03:20:25] *** Parts: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it) ()
[03:20:54] <SuperNintendoSUX> looks like he already found it
[03:22:08] <hypnos> I'll check those two things out thank you
[03:24:06] *** Joins: gggpkm (~gggpkm@60.10.194.43)
[03:28:04] *** Quits: emerent (~quassel@p200300cd574855c7ba27ebfffed28a59.dip0.t-ipconnect.de) (Read error: Connection reset by peer)
[03:29:17] *** Joins: emerent (~quassel@p200300cd574855c7ba27ebfffed28a59.dip0.t-ipconnect.de)
[03:31:17] *** Joins: pah (~pah@user/pah)
[03:31:21] *** Quits: pah_ (~pah@host-95-233-85-87.retail.telecomitalia.it) (Ping timeout: 268 seconds)
[03:34:39] *** Quits: ray04 (~ray04@2600:1011:b004:fbf7:b4f8:cfeb:865d:4283) (Read error: Connection reset by peer)
[03:34:39] *** Quits: mgot (~mgot@vps-35cddd71.vps.ovh.net) (Read error: Connection reset by peer)
[03:38:43] *** Quits: pah (~pah@user/pah) (Ping timeout: 256 seconds)
[03:38:45] *** Quits: Burgundy (~yomon@86.127.194.72) (Ping timeout: 268 seconds)
[03:38:52] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.3)
[03:39:18] *** Joins: pah_ (~pah@host-82-49-63-235.retail.telecomitalia.it)
[03:43:47] *** Joins: pah (~pah@user/pah)
[03:44:08] *** Quits: pah_ (~pah@host-82-49-63-235.retail.telecomitalia.it) (Ping timeout: 244 seconds)
[03:45:33] *** Joins: gggpkm_ (~gggpkm@60.10.194.43)
[03:48:55] *** Quits: gggpkm (~gggpkm@60.10.194.43) (Ping timeout: 256 seconds)
[03:57:19] *** Joins: ferdna (~ferdna@user/ferdna)
[03:57:58] *** Quits: Tokamak (~Tokamak@172.58.188.145) (Read error: Connection reset by peer)
[04:03:11] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:7025:e670:e56f:f750) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[04:03:18] *** Joins: Tokamak (~Tokamak@172.58.188.221)
[04:04:17] *** Joins: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse)
[04:05:14] *** Quits: emerent (~quassel@p200300cd574855c7ba27ebfffed28a59.dip0.t-ipconnect.de) (Remote host closed the connection)
[04:06:28] *** Joins: emerent (~quassel@p200300cd574855c7ba27ebfffed28a59.dip0.t-ipconnect.de)
[04:08:42] *** Joins: gggpkm__ (~gggpkm@60.10.194.43)
[04:09:10] *** Quits: Tokamak (~Tokamak@172.58.188.221) (Remote host closed the connection)
[04:11:46] *** Quits: pah (~pah@user/pah) (Ping timeout: 245 seconds)
[04:12:09] *** Quits: gggpkm_ (~gggpkm@60.10.194.43) (Ping timeout: 256 seconds)
[04:13:08] *** Joins: gggpkm (~gggpkm@60.10.194.43)
[04:14:11] *** Joins: pah (~pah@user/pah)
[04:14:59] *** Joins: frost (~frost@user/frost)
[04:15:33] *** Quits: gggpkm__ (~gggpkm@60.10.194.43) (Ping timeout: 256 seconds)
[04:16:50] *** Joins: great_taste (~great_tas@190.32.235.20)
[04:20:30] *** Joins: Tokamak (~Tokamak@107.117.203.66)
[04:34:32] *** Joins: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[04:41:03] *** Quits: Tokamak (~Tokamak@107.117.203.66) (Ping timeout: 256 seconds)
[04:42:29] *** Joins: Tokamak (~Tokamak@172.58.188.221)
[04:51:00] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[04:58:46] *** Quits: varioust (~varioust@72-46-56-102.lnk.ne.static.allophone.net) (Quit: varioust)
[04:59:12] *** Quits: Tokamak (~Tokamak@172.58.188.221) (Remote host closed the connection)
[04:59:45] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 256 seconds)
[05:09:23] *** Quits: pah (~pah@user/pah) (Ping timeout: 256 seconds)
[05:09:58] *** Quits: Guest41 (~Guest41@eth-west-pareq2-46-193-4-100.wb.wifirst.net) (Quit: Client closed)
[05:10:53] *** Joins: ethrl (uid524335@user/doforlove33)
[05:13:55] *** Joins: pah (~pah@user/pah)
[05:26:03] *** Quits: pah (~pah@user/pah) (Ping timeout: 268 seconds)
[05:31:34] *** Joins: pah_ (~pah@host-79-26-137-6.retail.telecomitalia.it)
[05:36:53] *** Quits: gggpkm (~gggpkm@60.10.194.43) (Remote host closed the connection)
[05:37:15] *** Joins: gggpkm (~gggpkm@60.10.194.43)
[05:37:43] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[05:37:52] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[05:37:52] *** ChanServ sets mode: +v npaperbot
[05:41:09] *** Joins: darkstardev13 (~darkstard@50.39.114.152)
[05:42:16] *** Quits: lionkor (~lionkor@beammp/staff/lionkor) (Ping timeout: 260 seconds)
[05:43:56] *** Quits: darkstarx (~darkstard@gateway/vpn/pia/darkstardevx) (Ping timeout: 268 seconds)
[06:04:36] *** Joins: gggpkm_ (~gggpkm@123.113.191.190)
[06:07:46] *** Quits: gggpkm (~gggpkm@60.10.194.43) (Ping timeout: 244 seconds)
[06:09:59] *** Quits: NiKaN (sid385034@2a03:5180:f:1::5:e00a) (Ping timeout: 264 seconds)
[06:09:59] *** Quits: greyblue9 (sid500829@2a03:5180:f:3::7:a45d) (Ping timeout: 264 seconds)
[06:10:27] *** Quits: lhtseng (sid15322@2a03:5180:f:1::3bda) (Ping timeout: 268 seconds)
[06:10:28] *** Quits: computerquip (sid423484@user/computerquip) (Ping timeout: 268 seconds)
[06:10:35] *** Quits: nightstrike (uid487@2a03:5180:f:5::1e7) (Ping timeout: 264 seconds)
[06:10:35] *** Quits: buhman (sid411355@user/buhman) (Ping timeout: 264 seconds)
[06:11:04] *** Quits: bjs (sid190364@user/bjs) (Ping timeout: 268 seconds)
[06:11:11] *** Quits: ethrl (uid524335@user/doforlove33) (Ping timeout: 264 seconds)
[06:11:41] *** Quits: psb (sid500598@user/psb) (Ping timeout: 268 seconds)
[06:11:42] *** Quits: ullbeking (sid5364@user/ullbeking) (Ping timeout: 268 seconds)
[06:12:13] *** Joins: bjs (sid190364@user/bjs)
[06:12:18] *** Joins: Youmu_ (uid129469@user/condy)
[06:12:18] *** Joins: nightstrike (uid487@uxbridge.irccloud.com)
[06:12:18] *** Quits: Youmu (uid129469@user/condy) (Ping timeout: 268 seconds)
[06:12:19] *** Youmu_ is now known as Youmu
[06:12:19] *** Quits: Argorok (sid195487@2a03:5180:f:4::2:fb9f) (Ping timeout: 268 seconds)
[06:12:23] *** Joins: buhman (sid411355@user/buhman)
[06:12:24] *** Joins: ethrl (uid524335@user/doforlove33)
[06:12:37] *** Joins: ullbeking (sid5364@user/ullbeking)
[06:12:47] *** Joins: Argorok (sid195487@hampstead.irccloud.com)
[06:12:51] *** Quits: pakcjo (~pakcjo@user/pakcjo) (Ping timeout: 256 seconds)
[06:13:14] *** Quits: DSpider (DSpider@2a02:2f00:4ff:ffff::646c:684a) (Quit: Leaving)
[06:13:46] *** Joins: greyblue9 (sid500829@ilkley.irccloud.com)
[06:13:52] *** Joins: psb (sid500598@user/psb)
[06:13:56] *** Joins: computerquip (sid423484@user/computerquip)
[06:15:03] *** Joins: lhtseng (sid15322@helmsley.irccloud.com)
[06:15:16] *** Joins: NiKaN (sid385034@helmsley.irccloud.com)
[06:17:51] *** Joins: varioust (~varioust@cpe-108-167-11-88.neb.res.rr.com)
[06:18:58] *** Joins: pakcjo (~pakcjo@user/pakcjo)
[06:19:39] *** Quits: varioust (~varioust@cpe-108-167-11-88.neb.res.rr.com) (Client Quit)
[06:20:10] *** Joins: varioust (~varioust@cpe-108-167-11-88.neb.res.rr.com)
[06:20:11] *** Quits: varioust (~varioust@cpe-108-167-11-88.neb.res.rr.com) (Remote host closed the connection)
[06:20:47] *** Quits: greyblue9 (sid500829@ilkley.irccloud.com) (Ping timeout: 256 seconds)
[06:20:59] *** Quits: psb (sid500598@user/psb) (Read error: Connection reset by peer)
[06:23:03] *** Quits: ullbeking (sid5364@user/ullbeking) (Ping timeout: 256 seconds)
[06:24:17] *** Joins: kraa (~kraa@107-190-7-216.cpe.teksavvy.com)
[06:28:21] *** Quits: Trollmann (~Trollmann@user/trollmann) (Ping timeout: 268 seconds)
[06:34:29] *** Joins: Trollmann (~Trollmann@user/trollmann)
[06:34:57] *** Joins: greyblue9 (sid500829@id-500829.ilkley.irccloud.com)
[06:35:23] *** Joins: psb (sid500598@user/psb)
[06:35:24] *** Joins: ullbeking (sid5364@user/ullbeking)
[06:37:13] *** Quits: ARoxdale (~ARoxdale@84.203.31.229) (Ping timeout: 244 seconds)
[06:40:41] *** Joins: anjali (~anjali@42.111.17.20)
[06:45:05] *** Joins: malloy (~jimery@116.30.220.108)
[06:47:02] *** Quits: pakcjo (~pakcjo@user/pakcjo) (Ping timeout: 244 seconds)
[06:47:28] *** Quits: greyblue9 (sid500829@id-500829.ilkley.irccloud.com) (Ping timeout: 268 seconds)
[06:48:03] *** Joins: pakcjo (~pakcjo@user/pakcjo)
[06:48:41] *** Quits: ullbeking (sid5364@user/ullbeking) (Ping timeout: 268 seconds)
[06:49:19] *** Quits: psb (sid500598@user/psb) (Ping timeout: 268 seconds)
[06:49:43] *** Joins: psb (sid500598@user/psb)
[06:50:05] *** Joins: ullbeking (sid5364@user/ullbeking)
[06:51:04] *** Joins: greyblue9 (sid500829@ilkley.irccloud.com)
[06:56:05] *** Quits: pakcjo (~pakcjo@user/pakcjo) (Remote host closed the connection)
[06:56:36] *** Joins: pakcjo (~pakcjo@user/pakcjo)
[06:57:28] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:f9b0:14b7:ed5a:ac01) (Quit: Quit)
[07:02:09] *** Quits: pakcjo (~pakcjo@user/pakcjo) (Ping timeout: 256 seconds)
[07:03:27] *** Joins: pakcjo (~pakcjo@user/pakcjo)
[07:03:50] *** Quits: gggpkm_ (~gggpkm@123.113.191.190) (Remote host closed the connection)
[07:04:15] *** Joins: gggpkm_ (~gggpkm@60.10.194.43)
[07:06:34] *** Joins: gggpkm__ (~gggpkm@60.10.194.43)
[07:09:23] *** Quits: pakcjo (~pakcjo@user/pakcjo) (Ping timeout: 264 seconds)
[07:10:05] *** Quits: gggpkm_ (~gggpkm@60.10.194.43) (Ping timeout: 256 seconds)
[07:14:05] *** Joins: gggpkm_ (~gggpkm@60.10.194.43)
[07:15:48] *** Joins: pakcjo (~pakcjo@user/pakcjo)
[07:17:27] *** Quits: gggpkm__ (~gggpkm@60.10.194.43) (Ping timeout: 256 seconds)
[07:18:35] *** Joins: gggpkm__ (~gggpkm@111.63.14.119)
[07:21:59] *** Quits: gggpkm_ (~gggpkm@60.10.194.43) (Ping timeout: 256 seconds)
[07:30:50] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:f9b0:14b7:ed5a:ac01)
[07:32:11] *** Quits: psb (sid500598@user/psb) (Ping timeout: 256 seconds)
[07:32:14] *** Quits: bjs (sid190364@user/bjs) (Ping timeout: 260 seconds)
[07:32:30] *** Quits: lhtseng (sid15322@helmsley.irccloud.com) (Ping timeout: 244 seconds)
[07:32:45] *** Quits: ethrl (uid524335@user/doforlove33) (Ping timeout: 256 seconds)
[07:32:50] *** Quits: kraa (~kraa@107-190-7-216.cpe.teksavvy.com) (Quit: Leaving)
[07:33:01] *** Quits: znemo (sid500529@uxbridge.irccloud.com) (Ping timeout: 245 seconds)
[07:33:05] *** Quits: greyblue9 (sid500829@ilkley.irccloud.com) (Ping timeout: 268 seconds)
[07:33:05] *** Quits: ullbeking (sid5364@user/ullbeking) (Ping timeout: 268 seconds)
[07:33:10] *** Quits: NiKaN (sid385034@helmsley.irccloud.com) (Ping timeout: 260 seconds)
[07:33:10] *** Quits: nightstrike (uid487@uxbridge.irccloud.com) (Ping timeout: 260 seconds)
[07:33:15] *** Joins: psb (sid500598@user/psb)
[07:33:26] *** Quits: leonardus (sid358597@tinside.irccloud.com) (Ping timeout: 245 seconds)
[07:33:32] *** Quits: Youmu (uid129469@user/condy) (Ping timeout: 244 seconds)
[07:33:53] *** Quits: buhman (sid411355@user/buhman) (Ping timeout: 256 seconds)
[07:33:53] *** Joins: lhtseng (sid15322@2a03:5180:f:1::3bda)
[07:33:58] *** Joins: Youmu (uid129469@user/condy)
[07:34:04] *** Joins: nightstrike (uid487@2a03:5180:f:5::1e7)
[07:34:05] *** Joins: bjs (sid190364@user/bjs)
[07:34:21] *** Joins: znemo (sid500529@id-500529.uxbridge.irccloud.com)
[07:34:28] *** Joins: greyblue9 (sid500829@id-500829.ilkley.irccloud.com)
[07:34:34] *** Joins: buhman (sid411355@user/buhman)
[07:34:36] *** Joins: gggpkm_ (~gggpkm@60.10.194.43)
[07:34:45] *** Joins: ullbeking (sid5364@user/ullbeking)
[07:34:57] *** Joins: leonardus (sid358597@id-358597.tinside.irccloud.com)
[07:35:07] *** Joins: NiKaN (sid385034@id-385034.helmsley.irccloud.com)
[07:37:12] *** Quits: GunqqerFriithian (~gunqqer@gateway/vpn/pia/gunqqerfriithian) (Killed (NickServ (GHOST command used by Friithian!gunqqer@friithian.dev)))
[07:37:40] *** Joins: GunqqerFriithian (~gunqqer@gateway/vpn/pia/gunqqerfriithian)
[07:38:02] *** Quits: gggpkm__ (~gggpkm@111.63.14.119) (Ping timeout: 268 seconds)
[07:59:18] *** Quits: pah_ (~pah@host-79-26-137-6.retail.telecomitalia.it) (Ping timeout: 260 seconds)
[07:59:20] *** Joins: pah (~pah@user/pah)
[08:00:31] *** Quits: pakcjo (~pakcjo@user/pakcjo) (Ping timeout: 256 seconds)
[08:02:02] *** Quits: ghenry (~ghenry@ghenry.plus.com) (Ping timeout: 260 seconds)
[08:13:39] *** Joins: gggpkm__ (~gggpkm@60.10.194.43)
[08:15:06] *** Joins: ghenry (~ghenry@ghenry.plus.com)
[08:16:23] *** Quits: gggpkm_ (~gggpkm@60.10.194.43) (Ping timeout: 256 seconds)
[08:22:10] *** Joins: pakcjo (~pakcjo@user/pakcjo)
[08:25:06] *** Quits: pah (~pah@user/pah) (Ping timeout: 245 seconds)
[08:27:17] *** Joins: pah (~pah@user/pah)
[08:27:43] *** Quits: pakcjo (~pakcjo@user/pakcjo) (Ping timeout: 256 seconds)
[08:28:30] *** Joins: pakcjo (~pakcjo@user/pakcjo)
[08:53:08] *** Quits: gggpkm__ (~gggpkm@60.10.194.43) (Read error: Connection reset by peer)
[08:57:11] *** Quits: pah (~pah@user/pah) (Ping timeout: 256 seconds)
[08:57:17] *** Joins: pah_ (~pah@host-87-7-12-31.retail.telecomitalia.it)
[09:01:04] *** Quits: chozorho (~chozorho@2601:146:300:c30::9cc7) (Ping timeout: 260 seconds)
[09:01:49] *** Joins: chozorho (~chozorho@2601:146:300:c30:b5f3:6de1:ffe6:9380)
[09:02:17] *** Quits: pah_ (~pah@host-87-7-12-31.retail.telecomitalia.it) (Ping timeout: 256 seconds)
[09:05:34] *** Joins: pah (~pah@user/pah)
[09:09:30] *** Quits: anjali (~anjali@42.111.17.20) (Quit: Leaving)
[09:13:18] *** Joins: RandomRead3r (~RandomRea@user/randomreader)
[09:13:39] *** Quits: chozorho (~chozorho@2601:146:300:c30:b5f3:6de1:ffe6:9380) (Quit: WeeChat 3.0)
[09:16:35] *** Quits: RandomReader (~RandomRea@user/randomreader) (Ping timeout: 264 seconds)
[09:16:44] *** RandomRead3r is now known as RandomReader
[09:27:43] *** Quits: pakcjo (~pakcjo@user/pakcjo) (Ping timeout: 244 seconds)
[09:28:39] *** Joins: pakcjo (~pakcjo@user/pakcjo)
[09:34:57] *** Quits: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Ping timeout: 244 seconds)
[09:34:59] *** Quits: causative (~halberd@user/causative) (*.net *.split)
[09:34:59] *** Quits: rnsanchez (~rnsanchez@179.233.246.221) (*.net *.split)
[09:34:59] *** Quits: bdt (~bdt@2a01:799:39e:7d00:e65f:1ff:fe08:8a88) (*.net *.split)
[09:34:59] *** Quits: Friithian (gunqqer@friithian.dev) (*.net *.split)
[09:34:59] *** Quits: mteo (francis@user/francis) (*.net *.split)
[09:34:59] *** Quits: Soliton (~Soliton@wesnoth/developer/soliton) (*.net *.split)
[09:34:59] *** Quits: orkim (~orkim@user/orkim) (*.net *.split)
[09:35:06] *** Joins: mteo (francis@user/francis)
[09:35:09] *** Joins: Friithian (gunqqer@172.104.26.74)
[09:35:15] *** Joins: Soliton (~Soliton@wesnoth/developer/soliton)
[09:35:19] *** Joins: orkim (~orkim@user/orkim)
[09:35:33] *** Joins: bdt (~bdt@2a01:799:39e:7d00:e65f:1ff:fe08:8a88)
[09:35:52] *** Joins: rnsanchez (~rnsanchez@179.233.246.221)
[09:36:36] *** Joins: causative (~halberd@user/causative)
[09:37:44] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[09:37:52] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[09:37:52] *** ChanServ sets mode: +v npaperbot
[09:37:59] *** Joins: Neal__ (~Neal@47.146.41.156)
[09:38:22] *** Quits: great_taste (~great_tas@190.32.235.20) (Quit: Client closed)
[09:41:26] *** Quits: nshire_ (~Neal@47.146.41.156) (Ping timeout: 260 seconds)
[09:42:53] *** Quits: zagura (~zagura@user/zagura) (*.net *.split)
[09:42:53] *** Quits: tabakhase (tabakhase@user/tabakhase) (*.net *.split)
[09:42:53] *** Quits: scruffyfurn (scruffyfur@turbous.xshellz.com) (*.net *.split)
[09:42:54] *** Quits: edr (~edr@user/edr) (*.net *.split)
[09:42:54] *** Quits: geordi (~geordi@tinodidriksen.com) (*.net *.split)
[09:42:54] *** Quits: sven^ (~quassel@squint.a-oben.org) (*.net *.split)
[09:42:54] *** Quits: mcfrdy (~mcfrdy@user/mcfrdy) (*.net *.split)
[09:42:54] *** Quits: dzz007 (~dzz007@user/dzz007) (*.net *.split)
[09:42:54] *** Quits: mathu (~matt@user/mathu) (*.net *.split)
[09:43:06] *** Joins: zagura (~zagura@user/zagura)
[09:43:06] *** Joins: edr (~edr@enlo.co)
[09:43:07] *** Joins: mathu (~matt@user/mathu)
[09:43:11] *** Joins: sven^ (~quassel@squint.a-oben.org)
[09:43:17] *** Quits: edr (~edr@enlo.co) (Changing host)
[09:43:17] *** Joins: edr (~edr@user/edr)
[09:43:25] *** Joins: tabakhase (~tabakhase@irc.s.bitase.net)
[09:43:30] *** Quits: tabakhase (~tabakhase@irc.s.bitase.net) (Changing host)
[09:43:30] *** Joins: tabakhase (~tabakhase@user/tabakhase)
[09:43:40] *** Joins: dzz007 (~dzz007@user/dzz007)
[09:43:50] *** Joins: mcfrdy (~mcfrdy@user/mcfrdy)
[09:43:50] *** Joins: geordi (~geordi@tinodidriksen.com)
[09:43:50] *** ChanServ sets mode: +v geordi
[09:44:01] *** Joins: scruffyfurn (scruffyfur@turbous.xshellz.com)
[09:52:31] *** Quits: pakcjo (~pakcjo@user/pakcjo) (Ping timeout: 244 seconds)
[09:59:18] *** Joins: pakcjo (~pakcjo@user/pakcjo)
[10:02:55] *** Quits: pah (~pah@user/pah) (Ping timeout: 256 seconds)
[10:04:55] *** Quits: pakcjo (~pakcjo@user/pakcjo) (Ping timeout: 244 seconds)
[10:05:51] *** Joins: pakcjo (~pakcjo@user/pakcjo)
[10:07:08] *** Joins: pah (~pah@user/pah)
[10:09:29] *** Joins: Fault (~Fault@152.70.112.168)
[10:10:02] *** Quits: pakcjo (~pakcjo@user/pakcjo) (Ping timeout: 240 seconds)
[10:11:35] *** Joins: pakcjo (~pakcjo@user/pakcjo)
[10:13:52] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[10:16:01] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:f9b0:14b7:ed5a:ac01) (Quit: Quit)
[10:16:24] *** Joins: xkuru (~xkuru@user/xkuru)
[10:18:39] *** Joins: riksteri (riksteri@gateway/vpn/airvpn/riksteri)
[10:19:43] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:15c2:62d1:76a6:7ae5)
[10:21:56] *** Quits: xkuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[10:27:15] *** Quits: pakcjo (~pakcjo@user/pakcjo) (Ping timeout: 250 seconds)
[10:29:32] *** Joins: kenanmarasli (~kenanmara@user/kenanmarasli)
[10:32:01] *** Joins: JohnMS_WORK (~kvirc@213.134.183.29)
[10:33:27] *** Joins: pakcjo (~pakcjo@user/pakcjo)
[10:38:57] *** Quits: pakcjo (~pakcjo@user/pakcjo) (Ping timeout: 250 seconds)
[10:39:41] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[10:45:03] *** Joins: pakcjo (~pakcjo@user/pakcjo)
[10:48:26] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:15c2:62d1:76a6:7ae5) (Ping timeout: 245 seconds)
[10:54:11] *** Quits: pakcjo (~pakcjo@user/pakcjo) (Remote host closed the connection)
[10:59:48] *** Joins: pakcjo (~pakcjo@user/pakcjo)
[11:02:58] *** pah is now known as pa
[11:05:02] *** Quits: pakcjo (~pakcjo@user/pakcjo) (Ping timeout: 240 seconds)
[11:06:18] *** Joins: pakcjo (~pakcjo@user/pakcjo)
[11:09:39] *** Quits: Fault (~Fault@152.70.112.168) (Quit: Quit.)
[11:09:54] *** Joins: Fault (~Fault@152.70.112.168)
[11:12:36] *** Quits: pakcjo (~pakcjo@user/pakcjo) (Ping timeout: 244 seconds)
[11:13:26] *** Quits: causative (~halberd@user/causative) (Ping timeout: 245 seconds)
[11:18:47] *** Joins: pakcjo (~pakcjo@user/pakcjo)
[11:24:20] *** Quits: letto (~letto@86.120.85.133) (Quit: Konversation terminated!)
[11:25:00] *** Joins: letto (~letto@86.120.85.133)
[11:29:39] *** Quits: pakcjo (~pakcjo@user/pakcjo) (Ping timeout: 250 seconds)
[11:29:51] *** Joins: causative (~halberd@user/causative)
[11:30:40] *** Joins: pakcjo (~pakcjo@user/pakcjo)
[11:35:51] *** Quits: pakcjo (~pakcjo@user/pakcjo) (Ping timeout: 244 seconds)
[11:37:10] *** Joins: pakcjo (~pakcjo@user/pakcjo)
[11:41:11] *** Quits: pulse (~pulse@user/pulse) (Ping timeout: 264 seconds)
[11:42:35] *** Quits: frost (~frost@user/frost) (Quit: Connection closed)
[11:42:39] *** Quits: pakcjo (~pakcjo@user/pakcjo) (Ping timeout: 250 seconds)
[11:45:23] *** Joins: interop_madness (~interop_m@user/interop-madness/x-0950004)
[11:45:54] *** Joins: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be)
[12:06:40] *** Joins: Haohmaru (~Haohmaru@195.24.53.110)
[12:24:03] *** Joins: andreasbuhr (~quassel@p549db23d.dip0.t-ipconnect.de)
[12:24:26] *** Quits: andreasbuhr (~quassel@p549db23d.dip0.t-ipconnect.de) (Client Quit)
[12:30:51] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[12:33:21] *** Quits: JohnMS_WORK (~kvirc@213.134.183.29) (Ping timeout: 250 seconds)
[12:41:50] *** Joins: pakcjo (~pakcjo@user/pakcjo)
[12:47:24] *** Joins: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[12:47:32] *** Quits: pakcjo (~pakcjo@user/pakcjo) (Ping timeout: 240 seconds)
[12:48:31] *** Joins: pakcjo (~pakcjo@user/pakcjo)
[12:49:15] *** Quits: kurfen (~kurfen@45.152.181.20) (Read error: Connection reset by peer)
[12:50:58] *** Quits: night_wulfe_ (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 260 seconds)
[12:53:43] *** Quits: pakcjo (~pakcjo@user/pakcjo) (Ping timeout: 250 seconds)
[12:53:50] *** Joins: kurfen (~kurfen@45.152.181.20)
[12:55:15] *** Joins: night_wulfe_ (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[12:55:53] *** Joins: DSpider (~DSpider@82.79.237.31)
[12:59:02] *** Quits: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 240 seconds)
[13:05:55] *** Joins: pakcjo (~pakcjo@user/pakcjo)
[13:08:11] *** Joins: lionkor (~lionkor@beammp/staff/lionkor)
[13:10:26] *** Joins: plastico (~plastico@neomutt/plastico)
[13:10:48] *** Joins: andreasbuhr (~quassel@p549db23d.dip0.t-ipconnect.de)
[13:10:52] *** Quits: andreasbuhr (~quassel@p549db23d.dip0.t-ipconnect.de) (Client Quit)
[13:14:01] *** Quits: pakcjo (~pakcjo@user/pakcjo) (Ping timeout: 244 seconds)
[13:21:03] *** Joins: paul424 (~tom@ip-37-248-158-176.multi.internet.cyfrowypolsat.pl)
[13:24:41] <LordKalma> !rq
[13:24:41] <nolyc> LordKalma: <urdh> 1/i is clearly -i
[13:27:14] *** Joins: zen_coder (~zen_coder@2a02:8109:a280:2d8d:b80b:fa5c:c6a4:6438)
[13:27:25] *** Joins: cadmio (~cadmio@151.47.9.83)
[13:27:29] <cadmio> HEllo
[13:27:46] <cadmio> this function https://developer-old.gnome.org/gtksourceview/3.24/GtkSourceSearchContext.html#gtk-source-search-context-get-occurrences-count returns always -1 let me know if you understand how to fully scan the buffer
[13:29:50] <vdamewood> cadmio: Why are you asking about a C API in a C++ channel?
[13:29:55] *** Joins: PJBoy (~PJBoy@user/pjboy)
[13:30:06] <cadmio> it should be the same in c++
[13:30:19] <vdamewood> cadmio: Not really. GTK has a separate C++ API.
[13:30:40] <mitch0> that's still ugly though ;)
[13:31:53] <vdamewood> mitch0: Not as ugly as the C api, though.
[13:32:26] *** Joins: ARoxdale (~ARoxdale@84.203.31.229)
[13:37:44] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[13:37:53] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[13:37:53] *** ChanServ sets mode: +v npaperbot
[13:38:34] *** Quits: zen_coder (~zen_coder@2a02:8109:a280:2d8d:b80b:fa5c:c6a4:6438) (Quit: Konversation terminated!)
[13:42:53] *** Parts: cadmio (~cadmio@151.47.9.83) (WeeChat 3.0)
[13:45:32] *** Joins: pakcjo (~pakcjo@user/pakcjo)
[13:45:36] <markand> everything that is not immediate user gui is ugly
[13:46:08] <markand> signal/slot mechanism and event driven programming is handy but makes too much invisible code paths
[13:49:58] *** Joins: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[13:51:35] *** Quits: pakcjo (~pakcjo@user/pakcjo) (Remote host closed the connection)
[13:52:05] *** Joins: pull (~tcz@91.150.165.88)
[13:52:18] *** Joins: pakcjo (~pakcjo@user/pakcjo)
[13:53:32] *** Quits: night_wulfe_ (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 240 seconds)
[13:54:18] *** Quits: AbleBacon (~AbleBacon@user/AbleBacon) (Read error: Connection reset by peer)
[13:57:14] *** Joins: voltron (~voltrin_@ip5f599415.dynamic.kabel-deutschland.de)
[13:57:39] *** Joins: gggpkm (~gggpkm@60.10.194.43)
[13:57:51] *** Quits: pakcjo (~pakcjo@user/pakcjo) (Ping timeout: 250 seconds)
[14:04:06] *** Joins: pakcjo (~pakcjo@user/pakcjo)
[14:05:16] *** Quits: voltron (~voltrin_@ip5f599415.dynamic.kabel-deutschland.de) (Remote host closed the connection)
[14:05:28] *** Joins: JohnMS_WORK (~kvirc@185.73.229.242)
[14:08:30] *** Quits: letto (~letto@86.120.85.133) (Quit: Konversation terminated!)
[14:09:18] *** Quits: pakcjo (~pakcjo@user/pakcjo) (Ping timeout: 244 seconds)
[14:09:37] *** Joins: letto (~letto@86.120.85.133)
[14:10:37] *** Joins: pakcjo (~pakcjo@user/pakcjo)
[14:13:29] *** Joins: r-g (~r-g@51.158.144.32)
[14:14:55] <Haohmaru> !rq
[14:14:56] <nolyc> Haohmaru: <ashafq> #define SEVENTY_TWO (69)
[14:15:03] <LordKalma> nice
[14:16:04] <Haohmaru> <close_enough.jpg>
[14:16:37] *** Joins: lkor (~lionkor@beammp/staff/lionkor)
[14:16:42] *** Joins: voltron (~voltrin_@ip5f599415.dynamic.kabel-deutschland.de)
[14:16:55] *** Quits: pakcjo (~pakcjo@user/pakcjo) (Ping timeout: 250 seconds)
[14:16:56] *** Quits: lionkor (~lionkor@beammp/staff/lionkor) (Ping timeout: 250 seconds)
[14:17:19] *** lkor is now known as lionkor
[14:18:57] *** Joins: pakcjo (~pakcjo@user/pakcjo)
[14:22:02] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[14:29:32] <LordKalma> #define random_encryption_prime (123391263122)
[14:30:33] <Haohmaru> #define rand(x) (42) /* TODO */
[14:30:44] <LordKalma> there's a kxcd about that
[14:30:52] <LordKalma> https://xkcd.com/221/
[14:31:10] <Haohmaru> mine's different
[14:31:29] <Haohmaru> it shows good intentions
[14:32:41] *** Quits: cursey (~cursey@user/cursey) (Quit: bye)
[14:41:20] *** Joins: Simplar (~Simplar@188.163.92.225)
[14:42:53] *** Joins: m_ben (~m_ben@user/m-ben/x-7429725)
[14:47:34] *** Quits: lionkor (~lionkor@beammp/staff/lionkor) (Ping timeout: 260 seconds)
[14:47:53] *** Joins: lionkor (~lionkor@beammp/staff/lionkor)
[14:47:57] *** Joins: cursey (~cursey@user/cursey)
[14:51:21] *** Quits: voltron (~voltrin_@ip5f599415.dynamic.kabel-deutschland.de) (Remote host closed the connection)
[14:51:58] <Raziel> just use CURAND_RNG_PSEUDO_PHILOX4_32_10, in my experience it can generate about a billion values in under 1ms
[14:52:02] <Raziel> :DDDdddd
[14:52:32] *** Quits: pakcjo (~pakcjo@user/pakcjo) (Ping timeout: 240 seconds)
[14:52:40] <Haohmaru> 42 42 42 42 42 42 42 42 42 ..
[14:53:13] *** Joins: paule32_ (~paule32@user/paule32)
[14:53:47] <PJBoy> > random_prime
[14:53:50] <PJBoy> > ends in 2
[14:53:52] <PJBoy> >:(
[14:54:09] *** Joins: pakcjo (~pakcjo@user/pakcjo)
[14:56:29] *** Quits: paule32 (~paule32@user/paule32) (Ping timeout: 268 seconds)
[14:56:33] *** Joins: Burgundy (~yomon@86.127.194.72)
[14:57:07] *** Quits: kenanmarasli (~kenanmara@user/kenanmarasli) (Quit: Leaving)
[14:57:12] <Raziel> so I think I asked this yesterday but no one noticed, I'm curious if there's any good way to fix this obvious cyclic include while keeping everything header only https://wandbox.org/permlink/emNpTl9XJsGn6XuR
[14:57:56] <Raziel> currently, it's not header-only, because of the obvious problem with those two headers needing to include each other
[14:58:35] *** Quits: lionkor (~lionkor@beammp/staff/lionkor) (Quit: quit)
[15:04:35] *** Quits: JohnMS_WORK (~kvirc@185.73.229.242) (Ping timeout: 244 seconds)
[15:04:55] <PJBoy> here's a bad way https://wandbox.org/permlink/RPEUVXmDKjRkxmhB
[15:06:29] <Raziel> that is pretty bad, nice
[15:07:27] *** Quits: paul424 (~tom@ip-37-248-158-176.multi.internet.cyfrowypolsat.pl) (Quit: Leaving)
[15:09:09] *** Joins: frost (~frost@user/frost)
[15:17:32] *** Quits: pakcjo (~pakcjo@user/pakcjo) (Ping timeout: 240 seconds)
[15:19:22] *** Joins: pakcjo (~pakcjo@user/pakcjo)
[15:24:37] *** Joins: spaceangel (~spaceange@ip-89-176-181-220.net.upcbroadband.cz)
[15:27:42] *** Quits: pull (~tcz@91.150.165.88) (Quit: Czesc)
[15:28:03] *** Joins: pull (~tcz@91.150.165.88)
[15:28:54] *** Joins: JohnMS_WORK (~kvirc@213.134.183.29)
[15:34:11] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[15:37:15] *** Joins: gggpkm_ (~gggpkm@60.10.194.43)
[15:40:14] *** Quits: gggpkm (~gggpkm@60.10.194.43) (Ping timeout: 244 seconds)
[16:04:38] *** Quits: ville (~ville@178-75-128-81.bb.dnainternet.fi) (Ping timeout: 260 seconds)
[16:11:23] *** Joins: ville (~ville@37-219-253-74.nat.bb.dnainternet.fi)
[16:13:25] *** Quits: ville (~ville@37-219-253-74.nat.bb.dnainternet.fi) (Read error: Connection reset by peer)
[16:13:39] *** Joins: ville (~ville@37-219-253-74.nat.bb.dnainternet.fi)
[16:19:59] <Haohmaru> !fact
[16:20:00] <nolyc> Haohmaru: Expressions with unary operators group right-to-left.
[16:22:50] <PJBoy> that's not true
[16:23:08] <Haohmaru> which one was unary? + ?
[16:23:19] <PJBoy> geordi, --precedence a++--++--
[16:23:19] <geordi> (((a++)--)++)--
[16:23:41] <PJBoy> unary operators are operators taking one argument
[16:23:55] <LordKalma> geordi, --precedence ++--++--a
[16:23:55] <geordi> ++(--(++(--a)))
[16:24:04] <Haohmaru> so + and - must count too
[16:24:09] <PJBoy> yeah
[16:24:35] <LordKalma> Expressions with PREFIX unary operators group right-to-left. // maybe like this?
[16:24:44] <Haohmaru> but this talks about grouping (whatever that is) not precedence
[16:24:52] *** Quits: Spirit532 (~Spirit532@37.45.255.70) (Killed (NickServ (GHOST command used by Spirit5322!~Spirit532@37.45.182.135)))
[16:24:53] *** Joins: Spirit532 (~Spirit532@37.45.182.135)
[16:24:57] <PJBoy> prefix ones group right to left, yeah
[16:25:01] <LordKalma> Expressions with unary operators group FROM THE OPERAND. // maybe like this?
[16:25:03] <PJBoy> and postfix ones group left to right
[16:33:03] *** Quits: ville (~ville@37-219-253-74.nat.bb.dnainternet.fi) (Read error: Connection reset by peer)
[16:33:15] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Remote host closed the connection)
[16:34:50] * Haohmaru goes cross-eyed
[16:35:02] <LordKalma> 3D vision, cool
[16:35:15] <Haohmaru> yeah, i invented this in 2003
[16:36:52] <LordKalma> and I invented penicilin
[16:37:11] *** Joins: ville (~ville@178-75-128-81.bb.dnainternet.fi)
[16:37:59] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[16:41:15] <Haohmaru> i'm serious..
[16:41:21] <PJBoy> { volatile void* p{}; cout << p; }
[16:41:21] <geordi> false
[16:41:36] <PJBoy> I never realised that volatile pointers choose the bool overload
[16:41:58] <Haohmaru> i guess, i "reinvented" it, because surely someone else must have thought of stereoscopic displays long before that, but i was unaware of any such thing
[16:42:53] <PJBoy> pretty sure I saw stereoscopic displays in the 90s
[16:43:13] <Haohmaru> i was a kid in 2003
[16:43:31] <Haohmaru> i don't even remember if google was a thing back then
[16:43:49] <PJBoy> yeah those old red+blue glasses were stereoscopic 3d
[16:43:54] <PJBoy> remember spy kids 3d?
[16:43:58] <Haohmaru> no
[16:44:06] <PJBoy> well it came out in 2003
[16:44:16] <PJBoy> and it was some gimmicky shit
[16:44:42] <Haohmaru> it's red+cyan btw
[16:45:06] *** Joins: onizu (uid373383@id-373383.uxbridge.irccloud.com)
[16:45:31] <onizu> Hi. In a range-based for loop, is there a way to get the iterator value?
[16:49:28] *** Quits: gggpkm_ (~gggpkm@60.10.194.43) (Ping timeout: 244 seconds)
[16:50:24] <PJBoy> no
[16:50:50] <LordKalma> wdym iterator value'
[16:50:57] <Haohmaru> index?
[16:53:06] <onizu> Haohmaru: how to get the index in that case?
[16:53:37] <Haohmaru> no idea, i write while loops when i want the index
[16:53:54] <onizu> ok
[16:59:38] *** Joins: lihora (~lihora@177.50.213.32)
[17:00:11] *** Quits: pull (~tcz@91.150.165.88) (Quit: Czesc)
[17:02:53] *** Quits: msk (~msk@185.124.240.174) (Ping timeout: 268 seconds)
[17:07:30] *** Joins: msk (~msk@185.124.240.174)
[17:12:25] *** Quits: pa (~pah@user/pah) (Ping timeout: 250 seconds)
[17:14:28] *** Joins: pah (~pah@user/pah)
[17:15:43] <LordKalma> / {auto current{thing.begin()}; auto i{0}; for(; current!=thing.end(); ++current, ++i){/* do something */}}
[17:17:19] <LordKalma> yes, I like uniform initialization, sue me
[17:19:26] <LordKalma> {for(auto [idx, current] = {0, bananas.begin()}; current!=bananas.end(); ++i, ++current) cout << current;} vector bananas{1,2,3,4,5};
[17:19:26] <geordi> error: unable to deduce 'initializer_list<auto>' from '{0, vector<_Tp, _Allocator>::begin() [with _Tp = int; _Allocator = allocator<int>; vector<_Tp, _Allocator>::iterator = vector<int>::iterator]()}'
[17:19:32] *** Quits: pah (~pah@user/pah) (Ping timeout: 240 seconds)
[17:19:36] <LordKalma> {for(auto [idx, current] = {0, bananas.begin()}; current!=bananas.end(); ++i, ++current) cout << current;} vector<int> bananas{1,2,3,4,5};
[17:19:36] <geordi> Same error.
[17:19:54] *** Joins: lionkor (~lionkor@beammp/staff/lionkor)
[17:20:43] <LordKalma> oh for fucks sake, how can you NOT deduce the iterator?
[17:20:46] *** Joins: pah (~pah@user/pah)
[17:22:40] <rpav> {for(auto [i,c] = make_tuple(0, b.begin()); c != b.end; ++i, ++c /* i don't think this works tho */)  cout << *c; } vector b{1,2,3,4,5};
[17:22:40] <geordi> error: no match for 'operator!=' in 'c != b.vector<int>::end' (operand types are 'tuple_element<0, tuple<_Safe_iterator<vector<int>::iterator, vector<int>, random_access_iterator_tag> > >::type' and '<unresolved overloaded function type>')
[17:22:59] <rpav> err
[17:23:03] <rpav> {for(auto [i,c] = make_tuple(0, b.begin()); c != b.end(); ++i, ++c /* i don't think this works tho */)  cout << *c; } vector b{1,2,3,4,5};
[17:23:04] <geordi> 12345
[17:23:20] <rpav> oh right, only restricted comma _declarations_
[17:23:28] *** Quits: frost (~frost@user/frost) (Remote host closed the connection)
[17:23:42] <LordKalma> {for(auto [i,c] = tuple{0, b.begin()}; c != b.end(); ++i, ++c /* i don't think this works tho */)  cout << *c; }
[17:23:43] <geordi> error: 'b' was not declared in this scope
[17:24:03] <LordKalma> {for(auto [i,c] = tuple{0, b.begin()}; c != b.end(); ++i, ++c /* i don't think this works tho */)  cout << *c; } vector b{1,2,3,4,5};
[17:24:03] <geordi> 12345
[17:24:09] <LordKalma> even just adding tuple is enough
[17:24:14] <LordKalma> this language has some weird rules
[17:24:47] <LordKalma> liek, what fucking use does init list have if we can't even use it for structured bindings boilerplate?
[17:28:02] *** Quits: pah (~pah@user/pah) (Ping timeout: 240 seconds)
[17:28:31] <rpav> it was poorly-conceived
[17:28:43] <rpav> tuple should have been used everywhere
[17:28:46] <LordKalma> clearly
[17:28:55] <PJBoy> initializer_list is runtime lengthed
[17:29:09] <PJBoy> so it couldn't possible have std::get et al needed for structured bindings
[17:29:21] <LordKalma> specially the dumb rules on whether you get init list or something decent for auto
[17:29:55] *** Joins: pah (~pah@user/pah)
[17:32:27] *** Joins: xkuru (~xkuru@user/xkuru)
[17:37:01] *** Joins: AmR (~AmREiSa@156.199.218.104)
[17:37:41] *** Quits: m_ben (~m_ben@user/m-ben/x-7429725) (Quit: WeeChat 3.3)
[17:37:45] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[17:37:52] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[17:37:52] *** ChanServ sets mode: +v npaperbot
[17:39:22] *** Quits: Fairy (~Fairy@ti0004a400-4356.bb.online.no) (Read error: Connection reset by peer)
[17:48:54] <rpav> i wish you could alias functions by `using .. =`
[17:48:54] <rpav>  
[17:49:08] <PJBoy> there's `auto .. = `
[17:49:15] <LordKalma> you can tough?
[17:49:19] <rpav> does that work for templates
[17:49:23] <PJBoy> nah
[17:49:27] <PJBoy> but you can make a lambda >_>
[17:49:29] <rpav> heh
[17:49:32] <LordKalma> I've definitely aliased function pointers with using
[17:50:03] <rpav> LordKalma: templates though, i want like `using t = std::make_tuple;`
[17:50:16] <LordKalma> yeah, idk about that
[17:50:26] <rpav> you can obviously write a forwarding function but that sortof defeats the point of simple aliasing
[17:50:36] <LordKalma> pfft, just #macro it :D
[17:50:45] <rpav> heh
[17:57:17] <malinus> What are the keywords I should search for, to better understand the following: Having multiple of the same named entitys, defined across multiple translation units. Like Test.cpp having a struct Foo, and Test2.cpp having a struct Foo.
[17:58:00] <PJBoy> when you say defined across multiple units
[17:58:05] <Alipha> malinus: well, that's a ODR violation if struct Foo is not defined exactly the same in both
[17:58:11] <PJBoy> you mean defined somewhere and available to all translation units?
[17:58:20] <malinus> I mean, across multiple source files.
[17:58:27] <Alipha> !odr
[17:58:28] <nolyc> The One Definition Rules state (1) that no translation unit (see !tu) shall contain more than one definition of any variable, function, class type, enumeration type or template, and (2) that every program shall contain exactly one deﬁnition of every non-inline function or object that is used in that program.
[17:58:32] <PJBoy> or do you mean each TU contributes to the definition a little
[17:58:48] <malinus> PJBoy: the former
[17:59:02] <PJBoy> keyword would be "header" then
[17:59:07] <malinus> So I have two different "struct Foo" in two translation units.
[17:59:38] <PJBoy> oh you want two different Foos with the same name and different definitions, not available to each other?
[17:59:55] <PJBoy> then you'd be looking at anonymous namespaces
[18:00:10] <Alipha> Or just regular namespaces
[18:00:25] <PJBoy> right
[18:00:33] <malinus> no, I want to understand what the linker is doing. It's just that I'm seeing for the first time someone getting fucked big time over this, and they are asking me about the machanics behind.
[18:01:21] <malinus> I understand what you are *supposed* to do (or I would like to think I do anyway). It's just that when I'm trying diffrent scenarios and I'm not exactly sure how the language defines (or doesn't), what I'm getting out.
[18:02:00] <PJBoy> ODR then
[18:02:25] <Alipha> The language doesn't define it. It's Undefined Behavior to have different definitions for the same struct
[18:02:27] <rpav> malinus: the linker is doing nothing; you're obligated to share an identical declaration
[18:02:36] <LordKalma> definition
[18:03:01] <rpav> malinus: in the case of deduplicating functions, you might want to look up how "inline" gets handled by the linker for functions (and variables in 17+)
[18:03:10] <rpav> if they're not inline, it's an error
[18:03:33] <malinus> I'm not getting any errors or warnings, that's what confuses me.
[18:03:57] <PJBoy> yeah that's ODR violations for you
[18:04:18] <rpav> if you're using multiple declarations that differ, that's an ODR violation, UB i think (maybe IFNDR doesn't really matter)
[18:04:22] <malinus> But like Alipha, this is some kind of UB, where the linker just picks whatever implementation was the first.
[18:04:37] <LordKalma> it would be IFNDR more than UB, yeah
[18:04:46] <LordKalma> UB still is a well-formed program iirc
[18:05:11] <PJBoy> here's my ODR test case https://wandbox.org/permlink/OyOICvmEx9HnbbnW
[18:05:18] <rpav> i think we determined the definitions didn't really distinguish anything but i dunno
[18:05:33] <PJBoy> both TUs have a struct S
[18:05:39] <PJBoy> with different definitions
[18:05:49] <PJBoy> the linker assumes they're identical
[18:05:52] <PJBoy> no warnings, no errors
[18:06:02] <malinus> I can't make a test case because wandbox doesn't do TU unless you "include" them or something.
[18:06:03] <LordKalma> anonymous namespaces ftw
[18:06:20] <malinus> PJBoy: Nice
[18:06:26] <rpav> malinus: wandbox supports multiple .cpp, but even better godbolt does now!
[18:06:45] <malinus> rpav: it does? I just tried but couldn't figure out how to add another source file?
[18:06:48] <LordKalma> rpav, but nobody knows about it because that's how good CE's UX is
[18:06:53] <LordKalma> point made
[18:06:56] <PJBoy> yeah but you gotta cmake it
[18:07:04] <LordKalma> PJBoy, no you don't
[18:07:04] <PJBoy> also godbolt's slow enough with one file
[18:07:06] <Alipha> malinus: yes, for inline functions, the linker just picks one
[18:07:09] <LordKalma> cmake mode is optional
[18:07:09] <PJBoy> oh you don't?
[18:07:14] <PJBoy> the only example I ever saw used it >_>
[18:07:31] <LordKalma> malinus, on the "Add..." button, IDE mode
[18:07:35] <rpav> LordKalma: the best UX makes features seem like they're not even there! .. wait no
[18:07:35] <malinus> So I just add another "source editor"?
[18:07:39] <LordKalma> no
[18:07:44] <LordKalma> you must enable IDE mode first
[18:07:53] <malinus> ohhh
[18:07:57] <malinus> all these new features, nice
[18:08:25] <rpav> what i wish is godbolt could _save_ "default layout" ;/
[18:08:47] <LordKalma> everybody has a "share" url for their prefered settings haha
[18:09:02] <rpav> oh true
[18:09:26] <rpav> a case of inaccurate naming ;/
[18:09:39] <LordKalma> Matt isn't a UX expert
[18:09:41] <LordKalma> and it shows haha
[18:09:49] <rpav> dunno i've used far worse .. e.g. wandbox ;P
[18:09:51] <PJBoy> I'm not a fan of the fact that godbolt immediately deletes its URL
[18:10:01] <LordKalma> how so?
[18:10:02] <PJBoy> so you have to generate a new URL if you want to reshare it
[18:10:11] <PJBoy> like if I ask your to look at this godbolt
[18:10:24] <PJBoy> https://godbolt.org/z/667Px3Tcq
[18:10:39] <PJBoy> it'll load, and then your address bar will become https://godbolt.org/
[18:10:49] <LordKalma> https://i.gyazo.com/9d7c90d96febea382eed5cb42131c221.png
[18:10:56] <LordKalma> but if you share without modification the url is the same
[18:11:17] <PJBoy> that's good at least
[18:11:22] <rpav> PJBoy: well you do, because the old url always points to the old thing
[18:11:33] <PJBoy> it's just annoying
[18:11:38] <rpav> it's a useful feature
[18:11:39] <PJBoy> what value is there in deleting the URL like that
[18:11:49] <PJBoy> seems like the kind of thing you only do to annoy people
[18:11:51] <LordKalma> rpav, it's useful that URLs are for a certain state
[18:11:56] <rpav> it's not "deleting" the url, you modifying the thing is making it no longer the content at that URL
[18:11:58] <LordKalma> it's dumb that it's "erased" from the URl bar
[18:12:04] <PJBoy> but I haven't modified anything
[18:12:16] <rpav> oh i see
[18:12:33] <rpav> huh i never noticed
[18:12:52] <LordKalma> PJBoy means this: https://i.gyazo.com/8d2bb283424bd53df6a108e0609cd8d8.mp4
[18:13:00] <rpav> no yeah i just clicked one and noticed
[18:13:08] <PJBoy> nice video
[18:13:30] <malinus> I just keep getting "undefined reference to main" with the new IDE feature. Do I really need to make a proper cmake file?
[18:13:33] <malinus> (godbolt)
[18:13:37] <LordKalma> no
[18:13:46] <LordKalma> but if you want to *run* an application you sure need a main() :D
[18:14:18] <PJBoy> (maybe just use wandbox :p_
[18:14:18] <malinus> well I added main() in one of the included files, still same linker error
[18:14:35] <malinus> PJBoy: NO :P
[18:14:36] <LordKalma> you need to "add new -> compiler" in the Tree tabv
[18:16:23] <PJBoy> then what?
[18:16:24] <LordKalma> https://godbolt.org/z/EbY1zf9EP
[18:16:26] <malinus> this seems bugged
[18:16:27] <LordKalma> maybe you're right...
[18:16:46] <malinus> phew at least I'm not completly retarded
[18:16:48] <PJBoy> how to include source files?
[18:17:13] <PJBoy> ah the plus button
[18:17:28] <rpav> yea it's weird
[18:17:58] <PJBoy> I get "cannot specify '-o' with '-c', '-S' or '-E' with multiple files"
[18:18:15] <LordKalma> so it's building the multiple files?
[18:18:36] <PJBoy> something like that
[18:18:39] <PJBoy> https://godbolt.org/z/8sjs8qEoe WIP
[18:18:48] <rpav> i think you mihgt need a cmakelists.txt
[18:18:54] <PJBoy> yeah I reckon you need cmake
[18:19:01] <LordKalma> ahhh
[18:19:12] <LordKalma> you should needt o add them manually to the compiler command
[18:19:14] <LordKalma> lemme ask in the slack haha
[18:19:34] <rpav> maybe not
[18:19:49] <rpav> but clicking "Add new" from the IDE mode always adds cmake files, but Add.. from the top bar adds .cpp files
[18:19:51] <rpav> it's f'n weird
[18:20:14] <rpav> actually wtf now they both are
[18:20:37] <PJBoy> anyways no props to godbolt
[18:20:45] <PJBoy> fantastic for reading ASM
[18:20:53] <LordKalma> yeah, the UX isn't great
[18:20:58] <PJBoy> minorly useful for running santizers
[18:21:02] <rpav> oooooooooooh
[18:21:04] <PJBoy> poor at everything else
[18:21:10] <LordKalma> and did you know the windows elements are lifted from vscode core libraries?
[18:21:16] <rpav> make sure to click "Language" before creating a file in IDE mode
[18:21:19] <PJBoy> woah haha
[18:21:23] <rpav> i.e. select C++ then "Add source editor"
[18:21:44] <rpav> you _don't_ need cmake i think but if you want it click the button once you've added a language file
[18:22:01] <LordKalma> rpav, when you start to see how things are wired in this UI... damn... I can only image the wiring mess for this UI
[18:22:14] <rpav> LordKalma: nah it's probably not that complicated
[18:22:15] <PJBoy> ah ok I got it
[18:22:22] <PJBoy> you have to not specify the first file
[18:22:23] <rpav> selecting "C++" in the ide view is key to the whoule thing working though
[18:22:27] <PJBoy> and you have to build to executable
[18:22:38] <PJBoy> see https://godbolt.org/z/WaT65rfjv
[18:22:44] <LordKalma> https://i.gyazo.com/6fa96949cb15f1dc2255dbe19b9f2244.png
[18:22:50] <LordKalma> the man himself explains it
[18:22:57] <PJBoy> the man himself is wrong
[18:23:22] <LordKalma> okau, can I share this with them?
[18:23:24] <rpav> yea i think it's not linking
[18:23:33] <PJBoy> yeah of course
[18:23:50] <rpav> because i have 2 `int square(int)` definitions and no error, but the files both compile?
[18:24:12] <malinus> PJBoy: wandabox doesn't even compiler multiple TU unless you include them first (like a .cpp with a class decleration and a global object, won't do anything).
[18:24:12] <LordKalma> int square(int num); // is a declaration
[18:24:18] <LordKalma> like a #include would do
[18:24:24] <PJBoy> no
[18:24:26] <PJBoy> :p
[18:24:32] <malinus> PJBoy: which is oooff, how does it even do?
[18:24:44] <PJBoy> malinus, idk what you're talking about
[18:24:50] <PJBoy> my last wandbox link has multiple TUs
[18:24:51] *** Quits: hypnos (~hypnos@c-24-218-116-28.hsd1.ct.comcast.net) (Quit: Client closed)
[18:24:52] <rpav> can't seem to "get cmake back" though ;/
[18:25:02] <PJBoy> and it's so much easier to set up than godbolt
[18:25:13] <PJBoy> you just add the file name to the command line
[18:25:14] <Alipha> malinus: you have to add the additional files to the compiler options
[18:25:39] <rpav> oh you just have to name the file, there's no other magic
[18:26:11] <LordKalma> so, it's like, godbolt adds the "main" file silently to the build commands, as if single source
[18:26:14] <LordKalma> you just add the others
[18:26:15] <LordKalma> interesting
[18:26:17] <PJBoy> yup
[18:26:30] <rpav> this is not that hard it's just a weird UI
[18:26:34] <PJBoy> which is a shame, means you can't add `*.cpp` to the commandline
[18:26:56] <malinus> Alipha: oh right, might as well use cmake with godbolt then...
[18:27:13] <PJBoy> yeah if you're a glutton for unnecessary effort
[18:27:15] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:89a6:1aba:4d2d:ccbe)
[18:27:52] <LordKalma> So, why can't gcc eat like `gcc example1.cpp example2.cpp example1.cpp`?
[18:28:06] <malinus> LordKalma: it can?
[18:28:44] <LordKalma> "
[18:28:44] <LordKalma> <PJBoy> which is a shame, means you can't add `*.cpp` to the "
[18:28:46] <LordKalma> so you can?
[18:29:07] <malinus> LordKalma: well I took it out of context :P
[18:30:23] <LordKalma> PJBoy,  how did you overcome g++: fatal error: cannot specify '-o' with '-c', '-S' or '-E' with multiple files
[18:30:23] <LordKalma> compilation terminated.
[18:30:47] *** Joins: jkaye (~jkaye@2601:281:8300:7530:bdf2:2ee7:b4ba:f8c3)
[18:31:03] <PJBoy> LordKalma, build to executable
[18:31:33] <LordKalma> "compile to binary" you mean?
[18:31:34] <PJBoy> this fucker https://puu.sh/InQxa/66d038eec8.png
[18:31:40] <PJBoy> yeah
[18:31:58] <PJBoy> also nah you can't add *.cpp
[18:32:07] <PJBoy> because that would list the main file too
[18:32:24] <LordKalma> undefined reference to `main' if I don't add it
[18:32:36] <LordKalma> : multiple definition of `main'; if I do
[18:32:41] <LordKalma> https://godbolt.org/z/dMhvE1hcq
[18:33:22] <PJBoy> square.cpp is the main file of your config
[18:33:38] <PJBoy> https://godbolt.org/z/9hdG7rhYv
[18:33:43] <LordKalma> undefined reference to `square(int)' if I don't use it
[18:33:58] <LordKalma> PJBoy, that one has (.text+0x24): undefined reference to `main'
[18:34:02] *** Quits: JohnMS_WORK (~kvirc@213.134.183.29) (Ping timeout: 240 seconds)
[18:34:09] <PJBoy> that's an incorrect error
[18:34:43] <PJBoy> you can see that it builds and links just fine
[18:34:59] <PJBoy> I think that compiler is not part of the IDE crap
[18:35:15] <PJBoy> all the IDE stuff is incompatible with all the non IDE stuff
[18:35:23] <LordKalma> yeah, not ideal
[18:36:20] <LordKalma> PJBoy, fork it and fix it
[18:36:26] <PJBoy> hahahaha
[18:36:35] <PJBoy> that sounds like hell on earth
[18:36:46] *** Joins: skapata (~Skapata@2804:14c:87b0:a6f9:d18c:8b69:3306:9a69)
[18:36:47] *** Quits: skapata (~Skapata@2804:14c:87b0:a6f9:d18c:8b69:3306:9a69) (Changing host)
[18:36:47] *** Joins: skapata (~Skapata@user/skapata)
[18:36:59] <LordKalma> the way everything affects everything in CEs UI, I can't even imagine how the UI code is
[18:37:15] <PJBoy> I tried forking wandbox once
[18:37:21] <PJBoy> and even that was too much javascript for me
[18:37:36] <PJBoy> and compiler explorer is node JS
[18:37:42] <Haohmaru> i tried setting up compiler explorer locally on my computer.. what was i even thinking
[18:37:44] <PJBoy> what kind of a lunatic would ever use node js
[18:37:47] *** Quits: pah (~pah@user/pah) (Ping timeout: 250 seconds)
[18:38:01] * LordKalma raises hand slowly...
[18:38:11] <PJBoy> other than where necessary
[18:38:30] <Haohmaru> i think i also looked into setting up a geordi instance long ago
[18:38:36] <LordKalma> I'm thinking of using React to make a frontend for a web thing
[18:38:40] <PJBoy> besides, my man has a patreon and github sponsor thing
[18:38:42] <LordKalma> Haohmaru, the best way to set CE is installing docker
[18:38:46] *** Joins: voltron (~voltrin_@ip5f599415.dynamic.kabel-deutschland.de)
[18:38:48] <PJBoy> I'm allowed to demand better from him
[18:38:57] <PJBoy> and insult everything he's put out
[18:39:00] *** Joins: pah (~pah@user/pah)
[18:39:20] <Haohmaru> nah, i've given up on those ideas
[18:39:31] <LordKalma> docker-compose up goes a long way
[18:39:37] * Haohmaru hugs geordi
[18:39:38] <LordKalma> (to fill up your disk :D)
[18:39:44] <PJBoy> he earns £1300/month for writing the worst UI ever made
[18:39:59] <LordKalma> I know a worse UI
[18:40:15] <LordKalma> but now that I think of it
[18:40:16] *** Joins: pulse (~pulse@user/pulse)
[18:40:21] <LordKalma> every hardware engineer sucks at UI
[18:40:33] <PJBoy> I'm wondering if it's worth writing a competing service
[18:40:39] <PJBoy> it can't be that hard to do what godbolt does
[18:40:51] <LordKalma> https://discourse.myriadrf.org/uploads/default/original/2X/e/e7f1bbbbe13a625e6e99a235caa8b29e2835bbdc.PNG
[18:40:55] <LordKalma> look at this fucking thing
[18:41:06] <PJBoy> what's wrong with htat
[18:41:08] <LordKalma> THis is what happens when hardware engineers write a tool to setup your device
[18:42:40] <PJBoy> reminds me of this behemoth https://puu.sh/InQCl/5adc202df3.png
[18:42:53] <LordKalma> holy shit
[18:43:04] <LordKalma> that's enough to have US senators call you a hacker
[18:43:07] * LordKalma runs
[18:43:14] <PJBoy> well
[18:43:17] <PJBoy> it would be appropriate haha
[18:43:23] <PJBoy> that's GBA ROM hacking software
[18:43:34] <malinus> Is there any reason for why ODR's don't procude linker warning? I mean, the linker *could* have a cache for those kind of lookups, no? Maybe as an optional flag if it has performance impacts?
[18:44:06] <PJBoy> ODR is a result of the separate TU compilation model
[18:44:34] <PJBoy> it should be possible to make the linker check for ODR violations at the cost of performance, yeah
[18:44:49] <PJBoy> you'd just have to give up incremental builds
[18:44:56] <malinus> oof
[18:47:36] *** Joins: ipe (~ipe@91-156-241-163.elisa-laajakaista.fi)
[18:48:14] *** Joins: pah_ (~pah@host-82-49-255-201.retail.telecomitalia.it)
[18:48:18] *** Quits: pah (~pah@user/pah) (Ping timeout: 244 seconds)
[18:48:23] <PJBoy> (although with modules about, this should be significantly easier to check I think??)
[18:48:55] <rpav> eh, it would probably not be a huge performance hit if you hash definitions and include the hashes for symbols-defined
[18:49:01] <rpav> first time you encounter a difference bam warn
[18:49:21] *** Quits: dld (~dld@98.217.187.57) (Ping timeout: 256 seconds)
[18:49:38] <rpav> amortized constant at the worst with a bit of extra storage (since you need a lot anyway for every symbol)
[18:50:33] <PJBoy> the MSVC modules partake in naming, so with modules you can more-or-less eliminate ODR violations
[18:50:34] <rpav> of course this means making the compiler and linker talk more and including more information in a .o
[18:51:09] <rpav> that's probably the better solution
[18:51:22] <rpav> really getting away from the TUs model entirely would be ideal ;P
[18:51:36] <PJBoy> yeah I agree
[18:51:57] <PJBoy> unfortunate that module's strong ownership isn't guaranteed by the standard
[18:52:07] <rpav> step 1 is modules and step 2 is probably "module to exe"
[18:52:17] <rpav> well, one step at a time i guess
[18:52:34] <rpav> in 30 years c++ will catch up to java
[18:52:47] <PJBoy> keep dreaming
[18:53:08] <PJBoy> looks like clang and gcc opted for weak module ownership
[18:53:09] <LordKalma> by that time C# will have cought up to c++ :D
[18:53:15] *** Joins: kenanmarasli (~kenanmara@user/kenanmarasli)
[18:53:15] <PJBoy> so that's pretty savage
[18:53:26] <PJBoy> implementation defined ODR violations
[18:53:36] <rpav> crappy
[18:53:44] <rpav> or something i guess, i don't really know heh
[18:56:05] <PJBoy> ah weak module ownership only allows conflicts from modules identifiers to global module identifiers
[18:56:18] <PJBoy> strong module ownership doesn't even allow that
[19:01:19] *** Quits: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse) (Read error: Connection reset by peer)
[19:03:23] *** Quits: voltron (~voltrin_@ip5f599415.dynamic.kabel-deutschland.de) (Remote host closed the connection)
[19:04:37] *** Quits: lionkor (~lionkor@beammp/staff/lionkor) (Quit: quit)
[19:05:52] *** Quits: pah_ (~pah@host-82-49-255-201.retail.telecomitalia.it) (Ping timeout: 244 seconds)
[19:10:03] *** Joins: pah (~pah@user/pah)
[19:12:19] *** Joins: magla (~gelignite@55d431b8.access.ecotel.net)
[19:19:30] <AmR> Any one know know web browser Can built in static way and support multi platform ?
[19:19:56] <LordKalma> static builds of browser engines?
[19:20:07] <LordKalma> doubt that 1) you'd want that, 2) that you want that
[19:20:37] <AmR> It's done with WebKit
[19:21:15] *** Joins: Fairy (~Fairy@2001:464a:4992:0:c5a4:9a37:ed3f:74d)
[19:23:33] *** Joins: Tokamak (~Tokamak@107.117.203.98)
[19:31:32] *** Quits: Tokamak (~Tokamak@107.117.203.98) (Remote host closed the connection)
[19:32:56] *** Joins: Tokamak (~Tokamak@107.117.203.98)
[19:33:13] *** Joins: X-Scale` (~ARM@46.50.3.203)
[19:33:14] *** Quits: X-Scale (~ARM@165.201.137.78.rev.vodafone.pt) (Ping timeout: 260 seconds)
[19:34:32] <Simplar> ...What
[19:34:37] <Simplar> +nolyc
[19:34:39] <Simplar> !help
[19:34:40] <nolyc> Simplar: Use the 'list' command to list all plugins, and 'list <plugin>' to list all commands in a plugin. To show the help of a command, use 'help <command>'.
[19:34:48] <Simplar> execute uint16_t X=5,Y=10,Z=4; cout << ceil((Y+Z)/X);
[19:35:00] <LordKalma> you want to know the bot syntax?
[19:35:17] *** X-Scale` is now known as X-Scale
[19:35:28] <LordKalma> {/* main function */ } /* whatever before main */ // std is using namespace'd
[19:35:28] <geordi>  
[19:35:33] <LordKalma> example:
[19:35:42] <LordKalma> { cout a;} auto a{1};
[19:35:42] <geordi> error: expected ';' before 'a' (fix known)
[19:35:57] <LordKalma> { cout a;}; auto a{1};
[19:35:57] <geordi> Same error.
[19:35:59] <Simplar> uint16_t X=5,Y=10,Z=4; cout << ceil((Y+Z)/X);
[19:36:05] <LordKalma> oh shit, I'm dumb
[19:36:10] <LordKalma> { cout << a;} auto a{1};
[19:36:10] <geordi> 1
[19:36:10] <PJBoy> yeah you're stupid dumb
[19:36:16] <LordKalma> !grab PJBoy
[19:36:16] <nolyc> LordKalma: The operation succeeded.
[19:36:27] <Simplar> {uint16_t X=5,Y=10,Z=4; cout << ceil((Y+Z)/X);}
[19:36:28] <geordi> 2
[19:36:31] <Simplar> why 2
[19:36:34] <Simplar> it must be 3
[19:36:41] <LordKalma> << ceil((Y+Z)/X); uint16_t X=5,Y=10,Z=4; // This also works
[19:36:41] <geordi> 2
[19:36:43] <Simplar> (10+4)/5 = 2.8
[19:36:47] <Simplar> ceil(2.8) = 3
[19:36:48] <Simplar> why 2
[19:36:55] <PJBoy> integer division produces integers
[19:37:02] <LordKalma> << (Y+Z)/X; uint16_t X=5,Y=10,Z=4; // because of this
[19:37:03] <geordi> 2
[19:37:07] <PJBoy> << (10+4)/5
[19:37:08] <geordi> 2
[19:37:31] *** Quits: Tokamak (~Tokamak@107.117.203.98) (Ping timeout: 256 seconds)
[19:37:39] <LordKalma> << (double(Y)+Z)/X; uint16_t X=5,Y=10,Z=4;
[19:37:40] <geordi> 2.8
[19:37:50] <LordKalma> << ceil((double(Y)+Z)/X); uint16_t X=5,Y=10,Z=4
[19:37:50] <geordi> error: expected ',' or ';' before 'int'
[19:38:12] <PJBoy> << ceil(double(Y+Z)/X); uint16_t X=5,Y=10,Z=4;
[19:38:12] <geordi> 3
[19:38:21] <PJBoy> I like my casts as late as reasonable
[19:38:55] <LordKalma> today I'm as dumb as a half dead single brain cell
[19:39:14] <PJBoy> a retarded amoeba would be smarter than you today
[19:39:20] <LordKalma> anyway, Simplar, understand the issue? integer math produces integer results
[19:39:28] <rpav> i'm dealing with qt designer so i soon will be if not
[19:39:45] <LordKalma> designer sucks balls
[19:39:48] <Simplar> Yep!
[19:39:58] <Simplar> Issue understood
[19:40:03] <LordKalma> Simplar, actually this was a funny thing in Python
[19:40:05] <Simplar> Integer division has different context
[19:40:09] <LordKalma> Python 2 respected integer math
[19:40:11] <LordKalma> Python 3 doesn't
[19:40:17] <Simplar> I mean, what
[19:40:22] <Simplar> Python as a whole is a joke
[19:40:30] <PJBoy> python gets an integer division operator
[19:40:40] <LordKalma> https://stackoverflow.com/questions/21316968/division-in-python-2-7-and-3-3
[19:40:42] <PJBoy> which is honestly pretty useful sometimes
[19:40:49] <LordKalma> 2.8//3 _D
[19:46:17] *** Quits: Simplar (~Simplar@188.163.92.225) (Quit: Going offline, see ya! (www.adiirc.com))
[19:46:44] *** Joins: Simplar (~Simplar@188.163.92.225)
[19:49:20] *** Quits: Simplar (~Simplar@188.163.92.225) (Client Quit)
[19:50:24] <Raziel> "If you want float division (which is something I always prefer)"
[19:50:36] <Raziel> yes, I can't wait to use float divison to index my flattened matrices
[19:50:40] <LordKalma> hahahah
[19:50:55] <LordKalma> maybe they do int(float(x)/y) :D
[19:51:33] <rpav> can't that be different from int(int(x)/int(y))
[19:52:43] <rpav> but, "python .. one wrong way to do things"
[19:53:26] <rpav> "perl .. tmtowtdi (but none of them good)"
[19:54:33] <rpav> "c++ .. you must choose, but choose wisely (and the answer is vector)"
[19:55:44] <Raziel> C++ has many bad ways to do things, and for every bad way there's gonna be at least one person actively telling you why that bad way is the best way
[19:56:29] <Raziel> (also, the answer is unordered_map)
[19:57:17] *** Joins: Tokamak (~Tokamak@172.58.188.190)
[19:57:35] <rpav> unordered_map can be slow ;/
[19:57:47] <LordKalma> the joke just flew by
[19:58:21] <Raziel> lol
[19:58:37] <rpav> nah, to conform, unordered_map would have to be bad and someoen would have to tell you it's _best_
[19:58:45] <rpav> it's not _bad_, but you have to watch out
[19:59:15] <rpav> hell i use std::map when it doesn't matter; it's not great but sometimes it really doesn't matter
[20:01:24] <rpav> challenge: raii-manage an arbitrary container or set of children with pointers to `this` (some T) without taking runtime space or explicitly defining ctors (in T)
[20:02:39] <rpav> i think you can't just because you can't define custom ctor/dtor ordering so you need at least 1 byte, even assuming you can somehow designate which field of T you care about (which i think you can't, either)
[20:02:55] *** Joins: m_ben (~m_ben@user/m-ben/x-7429725)
[20:04:19] <PJBoy> map's nice and generic
[20:04:24] <PJBoy> especially in C++20
[20:04:42] <PJBoy> unordered_map requires you to remember how to make a hash
[20:04:44] <rpav> it works and if you don't need maximal performance it does all the things in reasonable space
[20:04:48] <rpav> yeah
[20:04:49] <Raziel> stupid question: what should one do if they need a map with two keys? use a pair as the key?
[20:04:51] <PJBoy> and spark a discussion on how to hash a pair
[20:05:02] <Raziel> woops.
[20:05:02] <Raziel> :p
[20:05:05] <rpav> Raziel: do you need two keys, or one key composed of two elements
[20:05:24] <PJBoy> map or unordered_map?
[20:05:35] <rpav> i.e. "what actual properties do you want given the two values that compose your key"
[20:06:38] <rpav> e.g. two multimaps might fit some use cases, such as "i want to be able to find all elements given only one key or the other"
[20:07:17] <Raziel> I suppose in my case, I'd want to grab based on a determined first key first, then grab a second one at random.
[20:08:22] <rpav> vector<pair<K1, vector<pair<K2, V>>>> ;)
[20:08:36] *** Joins: engest (~engest@50.53.244.75)
[20:09:08] <Raziel> second consideration: these maps are big and I ain't got time for O(n) access
[20:09:14] <rpav> you can binary search (lower_bound i think?) the first vector, then randomly pick the second
[20:09:31] <Alipha> map<K1, vector<pair<K2, V>>>
[20:09:38] <rpav> or that
[20:10:07] <Alipha> though never use std::pair. create a struct with appropriate member names, names that are better than "first" and "second"
[20:10:19] <rpav> really the only reason to use an outer vector is if you really need to iterate it with maximal efficiency
[20:10:37] <rpav> Alipha: yeah
[20:10:51] <rpav> if pair had `key` and `value` it might be one thing :(
[20:11:10] <rpav> <K,V> struct kv { K key; V value; .. };
[20:11:29] <Raziel> rpav, but if I do that, I can't really pick a vector<pair> that has a specific K2 at random :thonk:
[20:11:33] <rpav> probably `const K key` but shrug
[20:12:01] <rpav> Raziel: actually you can lower_bound/upper_bound for the range in (log n), and then randomly pick
[20:12:01] *** Quits: Tokamak (~Tokamak@172.58.188.190) (Read error: Connection reset by peer)
[20:12:14] <rpav> Raziel: of course you need to keep the vector sorted, but
[20:13:06] <Raziel> ...what happens if I just do map<K1, map<K2, V>>
[20:13:23] <rpav> then your random pick is O(n)
[20:13:36] <Raziel> unordered_map*
[20:13:43] <rpav> then you can't randomly pick
[20:13:56] <rpav> er
[20:14:38] <rpav> actually with map _or_ unordered_map, then you can't have {a, b}, {a, c}, {b, c}, ...
[20:14:51] <Alipha> Raziel: you have more than one value for a given K1 and K2?
[20:14:53] <rpav> you can only ever have unique pairs, in which case map<pair<K0,K1>, V>
[20:14:57] <Raziel> you definitely can randomly picj, since .at works on an unordered_map just fine
[20:15:06] <rpav> (but then you can't search on just K0 or K1)
[20:15:20] <Raziel> Alipha, what do you mean?
[20:15:25] *** Quits: kenanmarasli (~kenanmara@user/kenanmarasli) (Quit: Leaving)
[20:15:48] <rpav> Raziel: map is 1:1, if you have one element with K0 = 'a', you can't have another, even if its K1 is different
[20:15:48] <Raziel> wait, at? no. not at.
[20:15:53] <rpav> likewise with K1
[20:16:01] <Raziel> I think I might be doing a dumb
[20:16:09] <Alipha> Raziel: I think you're confusing us with your usage of the word "randomly". It sounds like you know which K2 you're picking, so it's not random
[20:17:36] <Alipha> Or, if it is "random", how do know what to pass to at for K2?
[20:17:58] <Raziel> h m m m
[20:18:01] <rpav> well, one could say "out of the 5 things with K2=v, pick one randomly"
[20:19:13] <Raziel> if I do want to pick a k2 at random out of all k2 values that are in that map, I guess if I don't care about the extra memory I should also... keep all potential k2s in a (unordered) set?
[20:19:24] <Raziel> or I may be overcomplicating this
[20:19:25] *** Joins: kenanmarasli (~kenanmara@user/kenanmarasli)
[20:19:57] <rpav> i think you should start with a representative sample of data, and store it
[20:20:14] <rpav> think about whether there will be multiple shared K0/K1
[20:23:07] <Raziel> Well, K0 would be in a set like {5, 10, 50} and so on , K1 would be a similar set like {1, 3, 5}. And then the "elements" that I'm trying to map could be keyeed as {5, 1}, {5, 3}, {10, 1}, {10, 5}, and so on. where {K1, K2}
[20:23:18] <Raziel> or, K0, K1. I can't even keep my indexes straight >:
[20:24:21] <rpav> ok what does this data actually represent
[20:24:35] <Alipha> Raziel: do you ever have a specific {K0, K1} that you need to fetch the value for? Or is it always specific K0 and random K1?
[20:24:37] <rpav> because if those keys are like vec3s then you probably want some kind of actual spatial construct
[20:25:57] <rpav> e.g. if you want to search for a thing within a bounding box, and then pick one random element to target or somethng
[20:26:21] <rpav> plus if you need to move them / update positions a lot
[20:26:29] <Raziel> those keys are ints, the elements are lists of stuff that match those combos of ints. Alipha, I think K1 is always gonna be random within the existing K1s
[20:26:53] <Raziel> Also, the entire thing can be considered always const and read-only, in this usecase
[20:27:07] <Raziel> because it is v:
[20:27:46] <Alipha> Raziel: then K1 isn't a key because you're never accessing the corresponding "value" using K1
[20:28:29] <Alipha> Raziel: {K1, V} is actually a vector of pairs, which you're accessing by random index
[20:28:53] <Alipha> map<K1, vector<pair<K2, V>>>
[20:29:39] *** Joins: AbleBacon (~AbleBacon@user/AbleBacon)
[20:30:26] <Raziel> Hmm, that makes sense. And that is how I have it set up right now. I just wasn't sure about the access and how that'd go when I do have more than one K1, idk why I missed just doing random access by index on it :/
[20:32:19] *** Quits: ipe (~ipe@91-156-241-163.elisa-laajakaista.fi) (Quit: Leaving)
[20:40:09] *** Quits: Haohmaru (~Haohmaru@195.24.53.110) (Remote host closed the connection)
[20:42:36] <Raziel> probably just getting brain overflow by the general complexity of all the nested maps and vectors and sets >:
[20:47:43] *** Joins: Tokamak (~Tokamak@172.58.191.3)
[20:55:22] *** Quits: jkaye (~jkaye@2601:281:8300:7530:bdf2:2ee7:b4ba:f8c3) (Ping timeout: 268 seconds)
[20:57:53] *** Quits: interop_madness (~interop_m@user/interop-madness/x-0950004) (Quit: Leaving)
[21:01:39] *** Quits: pulse (~pulse@user/pulse) (Ping timeout: 250 seconds)
[21:02:31] *** Joins: Simplar (~Simplar@188.163.92.225)
[21:02:47] *** Joins: pulse (~pulse@user/pulse)
[21:09:19] <Simplar> What do you think about Donald Knuth's The Art of Computer Programming? Is it worth a read?
[21:10:27] *** Quits: Tokamak (~Tokamak@172.58.191.3) (Ping timeout: 256 seconds)
[21:10:34] <yolo_> http://ix.io/3Eq9/cpp  "delete member function should be public [modernize-use-equals-delete]", does this make sense for abstract classes. https://stackoverflow.com/questions/18931133/must-a-deleted-constructor-be-private
[21:11:12] *** Joins: voltron (~voltrin_@ip5f599415.dynamic.kabel-deutschland.de)
[21:11:59] *** Joins: ravan (~ravan@user/ravan)
[21:13:14] <yolo_> go-nuts channel never went nuts, it so quiet, where do go people go?
[21:13:27] *** Quits: voltron (~voltrin_@ip5f599415.dynamic.kabel-deutschland.de) (Read error: Connection reset by peer)
[21:13:28] *** Joins: Tokamak (~Tokamak@107.117.203.65)
[21:14:25] <yolo_> maybe go is too simple to deserve lots of discussions
[21:16:35] <Alipha> yolo_: yes, make them public. As the accepted answer said, you don't want to produce the superfluous access modifier error
[21:17:00] <Alipha> It adds no value and only adds confusion
[21:19:25] <yolo_> ok. it's the latter suggestion confused me a bit. Thanks.
[21:22:23] *** Joins: dld (~dld@2620:6e:6000:2900:1d51:fa28:794f:615f)
[21:28:07] *** Quits: Munnu (~timo@81-197-107-130.elisa-laajakaista.fi) (Read error: Connection reset by peer)
[21:28:27] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[21:31:19] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Client Quit)
[21:32:56] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[21:33:26] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Client Quit)
[21:34:49] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[21:37:45] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[21:37:52] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[21:37:52] *** ChanServ sets mode: +v npaperbot
[21:40:37] *** Quits: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net) (Quit: Leaving)
[21:40:55] *** Joins: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net)
[21:42:24] *** Quits: purplex_ (~purplex@user/purplex) (Quit: bye)
[21:43:33] *** Joins: purplex_ (~purplex@user/purplex)
[21:52:58] <Simplar> #C++-basic
[21:53:47] <Raziel> is anything really "basic" tho
[21:54:06] <Simplar> What is the most time efficient way to do a binary search?
[21:54:13] <Simplar> This is what i wanted to ask
[21:55:01] <Raziel> uh
[21:55:03] <Raziel> that depends
[21:55:42] <LordKalma> that's asking is P really is NP
[21:55:50] <LordKalma> that's asking if* P really is NP
[21:58:53] <Simplar> Binary search through a STL container, Raziel.
[21:59:12] <Raziel> that does not change the previous answer
[21:59:42] <kalven> Simplar: which container?
[21:59:55] <Simplar> std::deque or std::vector
[22:00:09] <kalven> then std::binary_search or std::lower_bound (or upper_bound)
[22:07:13] *** Quits: pulse (~pulse@user/pulse) (Ping timeout: 244 seconds)
[22:09:19] *** Joins: pulse (~pulse@user/pulse)
[22:13:05] <yolo_> binary_search is mostly useless due to duplicate values might exist, use equal_range()
[22:13:51] <kalven> what an odd statement
[22:16:02] *** Quits: ravan (~ravan@user/ravan) (Ping timeout: 240 seconds)
[22:16:08] <yolo_> actually I copied somewhere :)
[22:16:32] <yolo_> that statement made me realize there is equal_range in c++
[22:17:59] <kalven> binary_search gives you a yes/no answer to whether an element exists in a sequence or not. It works if there are duplicates in the sequence.
[22:18:27] <kalven> It's (in my experience) not that useful anyway since you typically want an iterator to the element as well.
[22:24:12] *** Joins: jkaye (~jkaye@2601:281:8300:7530:2b36:18db:1545:7097)
[22:43:20] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
[22:43:22] *** Joins: paul424 (~tom@ip-37-248-157-149.multi.internet.cyfrowypolsat.pl)
[22:43:41] *** Joins: ravan (~ravan@user/ravan)
[22:44:50] *** Quits: Fault (~Fault@152.70.112.168) (Quit: Quit.)
[22:45:06] *** Joins: Fault (~Fault@152.70.112.168)
[22:45:20] *** Joins: thad_the_man (~tlophd_be@2600:1700:3051:4370:21d:9ff:fe33:51f4)
[22:48:58] <rpav> yolo_: not lower_bound?
[22:49:05] <rpav> i thought equal_range had to do more work
[22:49:24] <rpav> yeah
[22:49:36] <rpav> lower_bound gives you the first, equal_range is potentially O(n)
[22:50:19] <rpav> (i mean, obviously, it _is_ O(n), and it may often be expensive for your data)
[22:50:38] <rpav> wait no i'm dumb, it just needs to do upper_bound
[22:50:45] <rpav> it's been a day
[22:50:46] <kalven> it's log(n)
[22:51:22] <rpav> but it does need to search twice, so i guess you should do this if you need to cut
[22:51:22] <yolo_> one for lower_bound, another for upper_bound, both log(n), it got to be log(n)
[22:51:25] <rpav> yea
[22:52:28] <yolo_> i now use std::pari(return_value, error_code) for all my "library" apis, no more optional/variant/etc complexity before I got lost
[22:52:39] <yolo_> s/pari/pair/
[22:52:53] <Simplar> What's the most efficient way to check if a data structure is a palindrome?
[22:52:56] <yolo_> so when I saw equal_range, and yes std::pair for range is good too
[22:52:58] <rpav> i'd reiterate Alipha and say never use pair, always make your own well-named struct
[22:53:15] <rpav> Simplar: homework? :P
[22:53:24] <Simplar> Nope. My self-research
[22:53:33] <Simplar> I've grown up from homeworks :P
[22:53:39] *** Joins: voltron (~voltrin_@ip5f599415.dynamic.kabel-deutschland.de)
[22:53:40] <ville> Simplar: there never is a general answer to questions that include "best", "most" or other superlatives
[22:53:41] <Simplar> So I'm just researching and trying to collect the algos
[22:53:56] <rpav> define what a "data structure that's a palindrome" .. the data, or the structure, or what
[22:54:25] <Simplar> Okay, what is the most time efficient way to check if elements of vector or deque are palindrome.
[22:54:26] <ville> Simplar: doubly so when the question is about "best performance"
[22:54:36] <Simplar> time efficient means best performance
[22:54:39] <yolo_> std::equal(str.begin(), str.begin() + str.size() / 2, str.rbegin());
[22:54:59] <Simplar> yolo_ that
[22:55:04] <Simplar> that's for string*
[22:55:07] <rpav> not really a C++ question :p
[22:55:10] <Simplar> while I asked for vector or deque
[22:55:12] <yolo_> replace str with any container
[22:55:15] <Simplar> oh
[22:55:17] <Simplar> it works?
[22:55:26] <Simplar> why do we add size/2?
[22:55:28] <kalven> it'll work with vector and deque
[22:55:56] <yolo_> many algorithms are container transparent, though not all of them
[22:56:28] <Alipha> Simplar: size/2 is the middle of the container.
[22:56:28] <kalven> Simplar: it's an iterator to the halfpoint of the sequence.
[22:56:53] <ville> Simplar: if you now think you've gotten "the best" then fair enough, but you really haven't
[22:57:18] <Alipha> ville: what would be "better"?
[22:58:50] <rpav> i'm not sure you can do better than O(n) for palindrome-verification and std::equal is probably efficient in most of the ways
[22:59:00] <Alipha> I suppose you could use std::begin, std::size, and std::rbegin instead
[22:59:04] <yolo_> often times I need modify/view 4~8 files(hpp and cpp) in parallel, any nice tools other than tmux and teminator. vim split seems clumsy
[22:59:17] <Simplar> Roger that, thanks for the `equal`
[22:59:24] <rpav> Alipha: those are only cursory checks that it's not though, doesn't really change efficiency
[22:59:30] <ville> Alipha: does it simd? does it split it into threads for large enough inputs?
[22:59:32] <Simplar> I'm also checking cppreference, btw
[22:59:50] <yolo_> for SIMD you better use some intrinsics
[22:59:52] <kalven> web scale palindrome checking
[23:00:10] <yolo_> or CUDA it with 4096 kernels somehow
[23:00:16] <rpav> yolo_: i use a desktop per .cpp/.hpp and i made an entire script thing just for managing varying _sets_ of desktops per task-at-hand
[23:00:19] <yolo_> for leetcoding, equal() is enough
[23:00:34] <rpav> when 8-10 desktops isn't enough and you have like N projects
[23:00:43] <rpav> (on multihead no less)
[23:00:53] <ville> he specifically asked for "best performance" and just pointing it out out that std::equal() likely isn't it
[23:01:13] <yolo_> define desktop please
[23:01:36] <rpav> like wm virtual desktop you can Alt-F1-F10 for
[23:01:57] <rpav> i _can_ get 4 editors in a quad view but it feels constrained to have fewer rows these days
[23:02:01] <yolo_> ville: if it's asked by an algorithm PhD you're right, if it's asked by beginner-intermidiate c++ coder equal is probably more than enough for now
[23:03:26] <Simplar> Wow.
[23:03:32] * yolo_ ponders if to sell stocks for the year
[23:03:40] <ville> yolo_: then be upfron that it's  reasonable first attempt to solving it. not "best performance"
[23:03:43] <Simplar>  ranges::mismatch is a cool thing.
[23:04:13] <Simplar> so I don't really have to iterate through the whole vector to check if it's not equal to other vector
[23:04:26] <rpav> i dunno, std::equal ought to be optimized for e.g. vector multi-element compare for trivial or intrinsic types but you'd have to verify with the compiler
[23:05:53] <rpav> yeah it calls memcmp with gcc 11
[23:06:03] <rpav> https://godbolt.org/z/v5sMMhK3a
[23:06:25] *** Joins: CodeMouse92 (~CodeMouse@user/codemouse92)
[23:06:36] <kalven> bit different with reverse iterators
[23:06:38] <rpav> it's a loop with rbegin of course but it's unclear you could do considerably better
[23:07:14] <rpav> parallel stuff is not really standard and once you're at that point it's dubious whether we're really talking C++
[23:07:16] <ville> rpav: what are your other threads doing?
[23:07:29] <rpav> ville: why would you think threads would be useful here
[23:08:01] <kalven> ville: just sprinkle some ExecutionPolicy on it and it'll be fine
[23:08:01] <rpav> i would _probably_ hand this off to like openMP or similar to optimize since "just use threads" usually results in slower code
[23:09:46] <rpav> but really this is also the point at which unless you've brought real actual data from a real actual case with good benchmark results, and a definition of the range of hardware you expect or need to get better on, you've not really got anything to discuss
[23:09:53] <ville> rpav: what do you mean parallel stuff is not standard? many algorithms take execution policy and the standard includes std::thread and related
[23:10:07] <ville> rpav: and further this is -general
[23:10:50] <ville> kalven: yeah, that's again a reasonable starting try
[23:11:09] <rpav> yes well there's still the "c++" part; you can always hand-write asm, but that doesn't really count ;)
[23:11:22] <kalven> seriously though.. who gives a shit about the most performant palindrome checking..
[23:11:40] *** Joins: great_taste (~great_tas@190.32.235.20)
[23:11:41] <rpav> srs
[23:11:45] <yolo_> anything better than equal() if I know two containers are sorted with same size and I want to comapre? set_difference?
[23:11:59] <ville> apparently Simplar. he asked for "best performance" specifially
[23:12:01] <rpav> plus it entirely depends on the data at the point you're past "well, do a comparison that's probably reasonably quick"
[23:12:12] <yolo_> mismatch/equal do not mandate sorted
[23:12:21] *** Quits: riksteri (riksteri@gateway/vpn/airvpn/riksteri) (Quit: riksteri)
[23:12:24] <rpav> a linear comparison is "best" at that point
[23:12:54] <yolo_> linear comparison works for both sorted and unsorted though
[23:13:02] <rpav> everything else is _still_ a linear comparison unless you can demonstrate a restricted problem set (restricted set of hardware, or input)
[23:13:02] <yolo_> when you compare two containers
[23:13:55] *** Joins: gehn (~gehn@user/gehn)
[23:14:11] <rpav> yolo_: comparison still involves testing every object for equality, there is no way to verify a set is equal in fewer than `n` comparisons
[23:14:15] *** Joins: noarb (~noarb@user/noarb)
[23:14:49] <yolo_> true, unless it's a read-only object that you can get a hash out of it
[23:14:51] <rpav> not-equal conditions may shortcut, but full equality testing will always compare the items, and you can always set up the containers in a way that the nth is the unequal one
[23:15:08] <rpav> yolo_: no, because 1) hashing is O(n) and 2) hash collisions
[23:15:18] *** Joins: supernova (~quassel@2405:9800:ba11:6207:30fd:c9aa:5f13:128b)
[23:15:30] <supernova> Folks, is there any way to create some kind of executeable code in C++ @ linux
[23:15:30] <supernova> Purpose: want to have fast access to executable from folder in Chrome
[23:16:52] <TinoDidriksen> What does Chrome have to do with it?
[23:16:59] <kalven> ville: https://dev.to/wunk/fast-array-reversal-with-simd-j3p - it'd probably start to look something like this
[23:17:28] <TinoDidriksen> supernova, and what do you even mean "executable code"? C++ compiles to native executables.
[23:19:07] <ville> kalven: hah realy nice animations there
[23:21:11] <supernova> i want to have fast access to my program
[23:21:23] <supernova> without using terminal
[23:22:14] <kalven> ville: also gives an idea about the kind of speedup that could be attained
[23:23:09] <Raziel> supernova, so you want to make your program have a graphical interface?
[23:23:18] <ville> i'll have to read it tomorrow. too late to read anything that technical today
[23:23:20] <Raziel> we don't even know what this mythical "program" is supposed to do
[23:23:52] <supernova> i think it could be done with some script
[23:23:57] <rpav> is a chromebook involved in this
[23:24:08] <supernova> cd ~/folder/path ./xyz
[23:24:11] <rpav> but that's sortof irrelevant because the answer is still no
[23:24:38] <TinoDidriksen> Chrome can't execute such scripts.
[23:24:48] <rpav> you could hypothetically write a server which chrome connects to and you send it requests and it runs arbitrary programs on your local machine; that sounds like a _GREAT_ idea... and by idea i mean gaping security hole
[23:24:59] <TinoDidriksen> If you want fast access, install the program. Make a proper package that gets installed correctly.
[23:26:34] <Raziel> I find it fast enough to doubleclick the exe usually. Perhaps even make a shortcut to it somewhere convenient. >_
[23:27:09] *** Quits: CodeMouse92 (~CodeMouse@user/codemouse92) (Quit: Oh freddled gruntbuggly | Thy micturations are to me | As plurdled gabbleblotchits | On a lurgid bee)
[23:27:19] <Simplar> That's pretty interesting
[23:27:33] <Simplar> I thought std::string is a vector of chars
[23:27:41] <Simplar> But it's something else in fact according to docs
[23:27:43] <TinoDidriksen> It mostly is.
[23:27:49] <Simplar> Mosty?
[23:27:52] <Simplar> Mostly?*
[23:28:20] <TinoDidriksen> If it's small enough then it's not a vector-of-char, but beyond the small-string-optimization size then it is.
[23:30:00] <Simplar> TinoDidriksen: define 'small enough'
[23:30:05] <Simplar> Which size is that
[23:30:53] <Simplar> I've also heard that std::string's length is limited to 255 characters, is it true?
[23:31:44] <TinoDidriksen> SSO depends on which stdlib you use, but for 64bit platforms it's commonly 15 characters that can be stored before allocating.
[23:32:04] <TinoDidriksen> std::string is limited to available RAM.
[23:40:38] *** Joins: Codaraxis (~Codaraxis@user/codaraxis)
[23:40:57] *** Quits: voltron (~voltrin_@ip5f599415.dynamic.kabel-deutschland.de) (Remote host closed the connection)
[23:42:36] *** Quits: onizu (uid373383@id-373383.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[23:44:33] *** Quits: m_ben (~m_ben@user/m-ben/x-7429725) (Quit: WeeChat 3.3)
[23:46:43] <rpav> Qt::CheckState .. 0, 1 (partial), 2 .. sigh
[23:47:37] *** Quits: great_taste (~great_tas@190.32.235.20) (Quit: Client closed)
[23:47:47] <rpav> i guess things still have a bool override
[23:47:52] *** Joins: great_taste (~great_tas@190.32.235.20)
[23:48:21] <Simplar> TinoDidriksen: That's good to know
[23:52:52] <AmR> Any one Can Help me with, web Engine Can have build static build.  ?
[23:54:37] *** Joins: Ronalds_Mazitis_ (~Ronalds_M@46.109.76.104)
[23:57:37] *** Quits: rnsanchez (~rnsanchez@179.233.246.221) (Ping timeout: 256 seconds)
[23:57:51] <Raziel> once more, with feeling
