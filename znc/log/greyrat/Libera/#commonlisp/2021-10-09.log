[00:03:04] *** Joins: molson (~molson@2001-48F8-704A-CA1-0-0-75F-1013-static.midco.net)
[00:04:56] *** Quits: tyson2 (~user@bras-base-toroon0628w-grc-46-142-112-141-177.dsl.bell.ca) (Ping timeout: 265 seconds)
[00:06:28] *** Joins: tyson2 (~user@bras-base-toroon0628w-grc-46-142-112-141-177.dsl.bell.ca)
[00:06:56] *** Quits: tyson2 (~user@bras-base-toroon0628w-grc-46-142-112-141-177.dsl.bell.ca) (Remote host closed the connection)
[00:07:14] *** Joins: tyson2 (~user@bras-base-toroon0628w-grc-46-142-112-141-177.dsl.bell.ca)
[00:08:39] *** Quits: waleee (~waleee@h-98-128-228-119.NA.cust.bahnhof.se) (Ping timeout: 245 seconds)
[00:15:47] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[00:16:28] *** Joins: lisp123 (~lisp123@5.30.23.247)
[00:19:25] *** Quits: tyson2 (~user@bras-base-toroon0628w-grc-46-142-112-141-177.dsl.bell.ca) (Quit: ERC (IRC client for Emacs 27.2))
[00:20:16] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[00:20:58] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 252 seconds)
[00:22:24] *** Quits: shka (~herr@83.175.151.96.piasta.pl) (Ping timeout: 245 seconds)
[00:38:53] *** Quits: CptKirk (~CptKirk@70-57-27-195.hlrn.qwest.net) (Quit: Client closed)
[00:50:01] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[00:50:56] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 245 seconds)
[00:51:38] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Ping timeout: 260 seconds)
[00:52:00] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[00:52:47] *** Lord_of_Life_ is now known as Lord_of_Life
[00:58:13] *** Joins: lisp123 (~lisp123@5.30.23.247)
[00:58:14] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Ping timeout: 245 seconds)
[01:01:09] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[01:05:31] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 245 seconds)
[01:19:44] *** Joins: winning-luser (~wl@2601:8c1:181:1340::1b9c)
[01:30:16] *** Quits: cage (~cage@dynamic-adsl-84-220-249-98.clienti.tiscali.it) (Quit: rcirc on GNU Emacs 27.1)
[01:39:08] *** Quits: hayley (~theemacss@2001:470:69fc:105::234) (Changing host)
[01:39:08] *** Joins: hayley (~theemacss@user/hayley)
[01:39:26] *** Joins: lisp123 (~lisp123@5.30.23.247)
[01:45:07] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 252 seconds)
[01:45:26] <greyrat> does CL have a nil-p function?
[01:45:29] *** Joins: Qwnavery (~Qwnavery@user/qwnavery)
[01:45:34] <pve> null
[01:49:52] *** Quits: pve (~pve@37-136-238-169.rev.dnainternet.fi) (Quit: leaving)
[01:54:28] *** Joins: gaqwas (~john@dynamic-077-004-112-242.77.4.pool.telefonica.de)
[01:59:29] *** Joins: gioyik (~gioyik@gateway/tor-sasl/gioyik)
[02:05:31] *** Joins: Devon (~devon@pool-108-28-172-103.washdc.fios.verizon.net)
[02:06:59] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Remote host closed the connection)
[02:09:32] *** Quits: srhm (~srhm@user/srhm) (Read error: Connection reset by peer)
[02:10:04] *** Joins: srhm (~srhm@user/srhm)
[02:10:08] *** Quits: frgo (~frgo@p200300deef0cee00d17979c22d881345.dip0.t-ipconnect.de) (Remote host closed the connection)
[02:10:36] *** Joins: frgo (~frgo@p200300deef0cee00811628c0c0040b1f.dip0.t-ipconnect.de)
[02:15:18] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[02:19:19] *** Quits: selwyn_ (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[02:34:46] *** Quits: rgherdt__ (~rgherdt@2a02:8109:86c0:d8d:e473:ba5e:85e3:6828) (Ping timeout: 252 seconds)
[02:39:29] *** Joins: hendursaga (~weechat@user/hendursaga)
[02:42:06] *** Quits: hendursa1 (~weechat@user/hendursaga) (Ping timeout: 276 seconds)
[02:47:16] *** Quits: gaqwas (~john@dynamic-077-004-112-242.77.4.pool.telefonica.de) (Ping timeout: 252 seconds)
[03:00:54] *** Joins: ebrasca` (~user@171.25.198.58)
[03:03:26] *** Quits: ebrasca (~user@librepanther.com) (Ping timeout: 245 seconds)
[03:24:07] *** Quits: makomo_ (~makomo@user/makomo) (Ping timeout: 252 seconds)
[03:24:54] *** Quits: makomo (~makomo@user/makomo) (Ping timeout: 245 seconds)
[03:29:07] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 252 seconds)
[03:37:57] *** Quits: winning-luser (~wl@2601:8c1:181:1340::1b9c) (Quit: Leaving)
[03:44:36] *** Joins: lisp123 (~lisp123@5.30.23.247)
[03:46:10] *** Quits: loskutak (~loskutak@gw.mecom.cz) (Ping timeout: 252 seconds)
[03:50:05] *** Quits: Qwnavery (~Qwnavery@user/qwnavery) (Quit: WeeChat 3.3)
[03:53:33] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 265 seconds)
[03:56:45] *** Joins: karlosz (~karlosz@135-180-102-220.fiber.dynamic.sonic.net)
[03:57:31] *** Joins: Qwnavery (~Qwnavery@user/qwnavery)
[03:59:16] *** Quits: karlosz (~karlosz@135-180-102-220.fiber.dynamic.sonic.net) (Client Quit)
[04:10:55] *** Quits: X-Scale (~ARM@50.77.166.178.rev.vodafone.pt) (Ping timeout: 252 seconds)
[04:15:30] *** Quits: defaultxr (~defaultxr@99-138-110-241.lightspeed.cicril.sbcglobal.net) (Quit: bbiab)
[04:16:36] *** Quits: ebrasca` (~user@171.25.198.58) (Remote host closed the connection)
[04:20:16] *** Parts: pranavats (3fba1d1b34@jabberfr.org) ()
[04:23:59] *** Joins: X-Scale (~ARM@50.77.166.178.rev.vodafone.pt)
[04:24:09] *** Quits: gioyik (~gioyik@gateway/tor-sasl/gioyik) (Ping timeout: 276 seconds)
[04:24:54] *** Quits: random-nick (~random-ni@87.116.183.117) (Ping timeout: 245 seconds)
[04:31:59] *** Quits: attila_lendvai (~alendvai@catv-213-222-131-28.catv.broadband.hu) (Ping timeout: 245 seconds)
[04:47:49] *** Quits: khrbt (~znc@user/khrbt) (Ping timeout: 245 seconds)
[04:52:57] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Quit: ERC (IRC client for Emacs 27.2))
[04:53:12] *** Joins: tyson2 (~user@70.31.33.162)
[04:53:19] *** Joins: khrbt (~znc@user/khrbt)
[05:06:21] *** Quits: igemnace (~ian@user/igemnace) (Remote host closed the connection)
[05:17:58] *** Quits: khrbt (~znc@user/khrbt) (Ping timeout: 252 seconds)
[05:25:23] *** Joins: donovanquixote (~Donovan@c-98-246-129-179.hsd1.or.comcast.net)
[05:33:27] *** Joins: khrbt (~znc@user/khrbt)
[05:39:44] *** Quits: Bike (~Glossina@71.69.170.70) (Quit: Lost terminal)
[05:40:48] *** Joins: Nilby (~Nilby@2601:603:1481:30a0:82fa:5bff:fe66:4b49)
[05:43:30] *** Joins: notzmv (~zmv@user/notzmv)
[05:46:38] *** Quits: Psybur (~Psybur@mobile-166-170-32-197.mycingular.net) (Remote host closed the connection)
[05:52:28] *** Joins: lad (~lad@user/lad)
[05:53:38] <lad> is there a library for adding data literals to CL? for example, hmaking ash tables with {} or arrays with []? similar to () for lists?
[05:55:44] <hayley> That is easier said than done, because hash tables and arrays have test functions and element types respectively. Though you have #2a((1 2 3) (4 5 6) (7 8 9)) to make an array of with element type T.
[05:58:03] <mfiano> lad: hayley is correct. It would not make much sense, as Common Lisp does not have required type annotation syntax to instruct how keys are to be hashed.
[05:58:14] *** Quits: prxq_ (~quassel@x4db690f5.dyn.telefonica.de) (Ping timeout: 245 seconds)
[05:58:35] <Nilby> There's things like alexandria:alist-hash-table, but of course it's not exactly a literal.
[05:58:36] *** Joins: prxq (~quassel@x4dbd320d.dyn.telefonica.de)
[05:58:38] <waleee> why is it 2a? (noticed the error with just #a)
[05:58:56] <waleee> "to array"?
[05:58:56] <mfiano> 2 is a parameter to the #a dispatcher
[05:58:59] <waleee> ah
[05:58:59] <mfiano> 2 for 2d
[05:59:08] <mfiano> 0-n is possible
[05:59:15] <mfiano> where n is implementation-defined
[05:59:33] <hayley> #0aff00 ; look, CSS colour literals
[05:59:34] <waleee> thanks for the info
[06:01:21] <hayley> mfiano: FWIW types are orthogonal to hashing; you could use a string key for its value (e.g. EQUAL) or for its identity still (e.g. EQ), though the latter would be pretty useless in a literal.
[06:02:21] <mfiano> Right. I just meant that the test function is not really exposed in other languages with such syntaxes
[06:02:52] <hayley> Sure.
[06:05:42] <mfiano> I mean, you might be able to do something like {eq k1 v1 ... kN vN}, and dispatch based on parity (odd takes first element as test, even implies a default test) but I question the utility.
[06:05:42] *** Quits: ullbeking (sid5364@user/ullbeking) (Ping timeout: 260 seconds)
[06:05:52] *** Quits: dbotton (sid492350@id-492350.lymington.irccloud.com) (Ping timeout: 252 seconds)
[06:06:13] <mfiano> Instead I recommend using serapeum's DICT, which does similar in sexp form.
[06:06:38] *** Quits: splittist (sid17737@id-17737.tinside.irccloud.com) (Ping timeout: 260 seconds)
[06:06:38] *** Quits: travv0 (sid293381@user/travv0) (Ping timeout: 260 seconds)
[06:06:38] *** Quits: jcowan (sid325434@id-325434.ilkley.irccloud.com) (Ping timeout: 260 seconds)
[06:06:48] <hayley> Right.
[06:07:06] *** Quits: drmeister (sid45147@id-45147.ilkley.irccloud.com) (Ping timeout: 260 seconds)
[06:07:30] *** Joins: drmeister (sid45147@ilkley.irccloud.com)
[06:07:31] *** Quits: stylewarning (sid241636@id-241636.helmsley.irccloud.com) (Ping timeout: 252 seconds)
[06:07:31] *** Joins: jcowan (sid325434@ilkley.irccloud.com)
[06:07:34] *** Quits: sgithens (sid10659@id-10659.helmsley.irccloud.com) (Ping timeout: 260 seconds)
[06:09:22] *** Joins: sgithens (sid10659@helmsley.irccloud.com)
[06:09:28] *** Joins: travv0 (sid293381@user/travv0)
[06:09:36] <mfiano> Such questions are usually asked by those new to the language and don't understand the trade-offs such a syntax implies.
[06:10:00] <lad> someone recently mentioned to me that clojure is interesting because of the various data literals, that's why i ask. it hadn't occurred to me but it seems like most lisps aren't providing syntax for data literals. i'm used to data literals coming from ruby background, mostly just curious.
[06:10:34] <lad> one reason clojure is interesting*
[06:10:36] <mfiano> In lisp, everyhting is a data literal to be honest.
[06:10:37] *** Joins: stylewarning (sid241636@helmsley.irccloud.com)
[06:10:42] *** Joins: splittist (sid17737@5.254.36.57)
[06:10:47] <lad> :)
[06:11:04] <hayley> Yes, Clojure gets away with it because it doesn't (really) provide a concept of object identity, and only has one equality operator(?)
[06:11:39] <Josh_2> Imagine not having 500 equality operators
[06:11:40] <Josh_2> lame
[06:11:42] <hayley> So there is no need to provide test functions for literal hash tables (or the equivalent persistent data structures).
[06:12:03] <mfiano> The main problem is introducing these new data literals involves changing the read table, of which clean-up propagates down from library responsibility all the way down to user responsibility, by means of named-readtables or such.
[06:12:10] <mfiano> Being built-in to the language is another story
[06:12:29] <hayley> Josh_2: What's so bad about EQ, EQL, EQUAL, EQUALP, STRING=, NETFARM-TESTS::EQUAL-DWIM, NETFARM-SCRIPTS:VALUES-EQUAL?
[06:12:38] <Josh_2> Nothing :)
[06:12:45] <Josh_2> Dont forget string-equal
[06:13:53] <hayley> But I don't find a lack of object identity interesting. Children have a solid grasp on object permeance by the age of two usually.
[06:14:06] <mfiano> :)
[06:14:59] *** Joins: zacque (~zacque@5.102.49.60.klj04-home.tm.net.my)
[06:15:13] <mfiano> Forgot =, TREE-EQUAL, CHAR=, and maybe more
[06:17:19] <Josh_2> yep
[06:17:46] <hayley> "Innumerable legions of my co-workers at Harlequin rushed to help me search out the EBCDIC character code for capital A; I shall be forever indebted to these fine and dedicated individuals." - Kent Pitman
[06:18:33] <mfiano> lad: But I would urge you to stop thinking in this way. Literals are evaluated at a different time than macros (earlier), and mutating them is undefined behavior, and there is no chance for programmatically generating them.
[06:19:47] <lad> so i notice that janet-lang is able to create tables with hash literals, https://janet-lang.org/docs/data_structures/tables.html  -- wouldn't it be possible to add @{} to CL? I guess my Q may be why/how can janet get away with this syntax?
[06:20:15] <mfiano> You already asked this question and we already answered. Anything is possible, but you'd be throwing a lot away.
[06:20:19] <Josh_2> Yes there is library that adds a reader macro for creating hash tables
[06:20:26] <hayley> Now I'm curious if Pitman read Baker's "Equal rights for functional objects" before writing "Equal rights and wrongs in Lisp", or if the joke is that obvious.
[06:20:38] <Josh_2> (ql:quickload :reader)
[06:20:41] <Nilby> To be fair, natural systems have this problem to: = ≃ ≄ ≅ ≆ ≇ ≈ ≑ ≒ ≖ ≛ ≝ ⊴ etc.
[06:21:02] <hayley> This "specification" produces more questions than it answers to me.
[06:21:39] *** Joins: ullbeking (sid5364@user/ullbeking)
[06:21:41] <hayley> Does @{} refer to one table, or does it expand to some form which produces a new table?
[06:21:43] *** Joins: dbotton (sid492350@lymington.irccloud.com)
[06:22:07] <mfiano> and where is the test?
[06:22:57] <mfiano> If this is the entirety of their hash table API specification I would be very surprised.
[06:23:10] <hayley> (Also, why can't you put a nil or NaN in a hash table? We seem to be overloading the meaning of nil because they can't signal an error, or return multiple values or a wrapper object?)
[06:24:03] <mfiano> Yes, this is sad
[06:24:27] <hayley> (I remember that Lua tables have the same limitation, and the creator of Janet also created a "Lisp" on Lua called Fennel, but surely you don't just copy its braindead semantics to make another language. What's the fun in that?)
[06:24:28] <mfiano> That implies they don't even have multiple values or some distinguishing tuple type
[06:24:31] <Nilby> Most people don't realize that hash table literals are like blinders on a horse.
[06:24:51] <mfiano> I mean, no nil for a value, really?
[06:25:24] <lad> Nilby, why's that? and hash table literals only? what about other data literals?
[06:25:28] <hayley> I don't get the analogy, but literals get very hairy with mutation. One classic blunder in Python is to write a function like def f(something=[]): ...  assume that [] refers to a fresh list and modify that.
[06:26:02] <lad> what is a data literal anyway? syntactic sugar i guess?
[06:26:07] <hayley> Turns out, no, Python doesn't create a new list each time you call f without a value for something, and you are mutating the same list each time. Whoops.
[06:26:44] <lad> curious what the thoughts are on this: https://github.com/edn-format/edn
[06:26:59] <mfiano> hayley: If only it were that definitive
[06:27:14] <mfiano> Without a specification, such semantics are subject to whenever
[06:27:28] <Nilby> lab: It may make it easier to work, but only because it hides a huge troublesome complexity. Other data literals, can be simpler.
[06:27:36] <hayley> It Depends. #(...) notation would be "literal" but it instructs the reader to produce a vector at read-time. It is then undefined behaviour to modify that vector. But another meaning of "literal" might be that, say, [a b c] is shorthand for (vector a b c), which would produce new objects when evaluated.
[06:27:41] <hayley> lad: JSON for hipsters.
[06:27:43] <mfiano> But Janet is obvious a toy language with some very questionable decisions.
[06:27:51] <Nilby> Even string literals are approaching fiction now.
[06:28:46] <mfiano> even string types are approaching fiction now
[06:28:58] <mfiano> </zig joke>
[06:29:01] <hayley> I think I should hold off on commenting on other languages, lest I get called a CL cultist or whatever's new.
[06:29:06] *** Joins: Spawns_Carpeting (~Spawns_Ca@user/spawns-carpeting/x-6969421)
[06:29:42] <hayley> mfiano: You have "strings are weird things" like Rust, "strings are arrays of characters" like CL, "strings are lists of characters" like Haskell, "strings are lists of code-point integers" like Erlang...
[06:30:26] <Josh_2> CL cultists unite!
[06:31:06] <hayley> Oh, also "strings are a null-terminated array of bytes" in C which IMO makes it incredibly dubious to handle untrusted input in C programs, unless you check for null bytes.
[06:31:27] <Qwnavery> hehe (cons "S" (cons "t" (cons "r" (cons "i" (cons "n" (cons "g" (cons "s" ())
[06:31:33] <beach> Good morning everyone!
[06:32:18] <Nilby> I thought we were in the CL cultist safe containment zone.
[06:33:46] * Qwnavery accidentally turns his C program into a keylogger-buffer-overflow-memory-leak combo
[06:34:23] * mfiano waits for iron oxide to form
[06:34:40] <Qwnavery> lol
[06:34:56] <hayley> Speaking of literals, you can also use LOAD-TIME-VALUE to produce some object at load-time which can be mutated, which is handy sometimes.
[06:35:02] * hayley gets out the steel wool
[06:35:15] <Alfr> Nilby, are we in a containment zone which is "CL cultist safe" or a "safe containment zone" for CL cultists?
[06:35:29] <waleee> mfiano: zig is taking the cl datastructure approach to strings
[06:35:35] <mfiano> hayley: That's Steele
[06:36:30] <Josh_2> Good morning beach
[06:37:20] <hayley> But, long story short, equality of objects is poorly defined, often subjective, and moreso when you throw mutation into the mix. So one does not simply pick the right equality predicate, and thus one does not simply create a hash table literal without picking the right equality predicate.
[06:38:42] <hayley> I recall SBCL has an extension to #a syntax which allows specifying the element type, but I forgot how it works exactly.
[06:39:22] <hayley> (let ((*print-readably* t)) (print (make-array 10 :element-type '(unsigned-byte 8) :initial-element 0))) ; prints #A((10) (UNSIGNED-BYTE 8) 0 0 0 0 0 0 0 0 0 0)
[06:43:13] <mfiano> I don't think SBCL has such a thing
[06:43:32] <mfiano> I don't ever recall that being in the manual at least, nor have I ever seen code for it.
[06:46:32] <mfiano> Oh wow
[06:46:37] <mfiano> I missed your message.
[06:47:00] <mfiano> Hmm, don't see that documented
[06:52:20] <mfiano> Yeah pretty clever
[06:52:25] <mfiano> CL-USER> #a((2 2) (unsigned-byte 8) (0 128) (128 255))
[06:52:27] <mfiano> #2A((0 128) (128 255))
[06:52:50] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 260 seconds)
[06:54:06] *** Quits: tyson2 (~user@70.31.33.162) (Remote host closed the connection)
[07:06:43] *** Joins: pranavats (3fba1d1b34@jabberfr.org)
[07:08:26] *** Quits: semz (~none@user/semz) (Ping timeout: 245 seconds)
[07:18:24] *** Parts: akoana (~ah@user/akoana) ()
[07:18:26] *** Parts: pranavats (3fba1d1b34@jabberfr.org) (Disconnected: Replaced by new connection)
[07:18:36] *** Joins: pranavats (3fba1d1b34@jabberfr.org)
[07:21:45] *** Joins: semz (~none@user/semz)
[07:28:10] *** Joins: lisp123 (~lisp123@5.30.23.247)
[07:33:16] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 252 seconds)
[07:54:00] *** Parts: pranavats (3fba1d1b34@jabberfr.org) (Disconnected: Replaced by new connection)
[07:54:09] *** Joins: pranavats (3fba1d1b34@jabberfr.org)
[08:01:09] <White_Flame> so is #a(...) without a dimension left unspecified by clhs?
[08:05:26] *** Joins: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[08:08:26] *** Quits: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 260 seconds)
[08:08:37] <mfiano> Yes
[08:27:01] *** Parts: pranavats (3fba1d1b34@jabberfr.org) (Disconnected: Replaced by new connection)
[08:27:22] *** Joins: pranavats (3fba1d1b34@jabberfr.org)
[08:32:43] *** Joins: lisp123 (~lisp123@5.30.23.247)
[08:36:47] *** Joins: jealousm` (~user@2804:431:e7c4:7e2f:f785:531d:f45d:57b8)
[08:37:07] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 252 seconds)
[08:38:46] *** Quits: jealousmonk (~user@2804:431:e7c4:cbd0:ae30:e39b:f4a:15d4) (Ping timeout: 252 seconds)
[08:43:03] *** Quits: opcode (~nathan@user/opcode) (Quit: WeeChat 3.3)
[08:46:46] *** Joins: lisp123 (~lisp123@5.30.23.247)
[08:50:00] *** Joins: asarch (~asarch@2806:10ae:7:d4e4:6236:6230:adc1:364b)
[08:50:54] *** Joins: opcode (~nathan@user/opcode)
[08:54:24] *** Quits: jealousm` (~user@2804:431:e7c4:7e2f:f785:531d:f45d:57b8) (Quit: ERC (IRC client for Emacs 27.1))
[08:55:02] *** Joins: karlosz (~karlosz@135-180-102-220.fiber.dynamic.sonic.net)
[09:03:00] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[09:03:29] <lisp123> How many people usually attend ELS?
[09:03:36] <beach> 90
[09:03:47] <lisp123> Wow, thats a large turnout
[09:03:56] <beach> It's decent.
[09:05:10] <beach> And we have regular participants from places like the USA and Japan.
[09:06:28] <mfiano> Has it been decided if this year's conference will be an in-person/online hybrid as discussed at the last one?
[09:06:43] <mfiano> err next year's
[09:07:53] <beach> As I understand it, it will mainly be in-person, but the aim is to also do online.  This has not been tried before so I am not sure what the plans are.
[09:10:57] <lisp123> Looks great, very snazzy website
[09:11:22] <beach> The works of Shinmera.
[09:25:35] <beach> Me and my (admittedly small) family will likely arrive before the weekend and stay a few days after the conference.
[09:26:11] *** Parts: pranavats (3fba1d1b34@jabberfr.org) (Disconnected: Received SIGTERM)
[09:29:14] <beach> And, as usual, if you bring your copy of Lisp in Small Pieces, the translator will be there and sign it for you.
[09:30:26] *** Joins: pranavats (3fba1d1b34@jabberfr.org)
[09:32:29] <lisp123> Porto looks very beautiful
[09:57:01] *** Quits: Spawns_Carpeting (~Spawns_Ca@user/spawns-carpeting/x-6969421) (Ping timeout: 265 seconds)
[10:08:25] *** Quits: zacque (~zacque@5.102.49.60.klj04-home.tm.net.my) (Quit: Client closed)
[10:11:37] *** Quits: asarch (~asarch@2806:10ae:7:d4e4:6236:6230:adc1:364b) (Quit: Leaving)
[10:30:06] *** Quits: lad (~lad@user/lad) (Ping timeout: 245 seconds)
[10:31:25] *** Joins: gioyik (~gioyik@gateway/tor-sasl/gioyik)
[10:32:20] *** Quits: karlosz (~karlosz@135-180-102-220.fiber.dynamic.sonic.net) (Quit: karlosz)
[10:34:18] *** Quits: gioyik (~gioyik@gateway/tor-sasl/gioyik) (Client Quit)
[10:38:03] *** Joins: selwyn (~selwyn@user/selwyn)
[10:38:48] *** Quits: selwyn (~selwyn@user/selwyn) (Remote host closed the connection)
[10:39:12] *** Joins: selwyn (~selwyn@user/selwyn)
[10:48:49] *** Joins: shka (~herr@83.175.151.96.piasta.pl)
[10:52:21] *** Joins: gaqwas (~john@dynamic-077-007-181-079.77.7.pool.telefonica.de)
[10:59:49] *** Joins: pve (~pve@178-55-34-83.bb.dnainternet.fi)
[11:06:54] *** Joins: zacque (~zacque@5.102.49.60.klj04-home.tm.net.my)
[11:06:57] *** Quits: zacque (~zacque@5.102.49.60.klj04-home.tm.net.my) (Client Quit)
[11:08:17] *** Joins: zacque (~zacque@5.102.49.60.klj04-home.tm.net.my)
[11:14:00] *** Quits: zacque (~zacque@5.102.49.60.klj04-home.tm.net.my) (Quit: rcirc on GNU Emacs 27.2)
[11:14:56] *** Joins: zacque (~zacque@5.102.49.60.klj04-home.tm.net.my)
[11:17:03] *** Joins: rgherdt__ (~rgherdt@2a02:8109:86c0:d8d:65d3:a88:babe:2183)
[11:17:08] <hayley> (assoc 'fixnum '((string) (integer)) :test #'subtypep) works, though I wasn't really expecting it to before checking the HyperSpec.
[11:25:43] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[11:29:49] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 252 seconds)
[11:36:44] *** Joins: hendursa1 (~weechat@user/hendursaga)
[11:37:54] *** Joins: JeromeLon (~jerome@2a00:23c7:999f:3700:b995:87ff:271f:869c)
[11:40:18] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 276 seconds)
[11:40:19] *** Quits: pve (~pve@178-55-34-83.bb.dnainternet.fi) (Quit: leaving)
[11:41:18] *** Joins: pve (~pve@178-55-34-83.bb.dnainternet.fi)
[12:01:11] *** Joins: igemnace (~ian@user/igemnace)
[12:02:00] *** Joins: lisp123 (~lisp123@5.30.23.247)
[12:03:57] <pve> Does anyone know what it was like to develop graphical applications for the Lisp machines? Was it possible to do it "interactively", like in a Smalltalk environment? (as opposed to a write code - compile - run the app cycle)
[12:04:49] <hayley> I borrowed a book called "Lisp lore" which discussed graphics on the Lisp machine (from 1987 from memory?) and it was basically just CLIM.
[12:07:14] <pve> I must admit my knowledge of CLIM is not great, but from what I've gathered, interactive development is possible with CLIM?
[12:07:24] <lisp123> hayley: Where did you borrow it from? Suprised lisp books are in libraries
[12:08:02] <lisp123> pve: LispWorks has CAPI if you want to experience something not too dissimilar
[12:08:16] <hayley> lisp123: The university I left had it in the library, but they had to dig it out of storage.
[12:08:19] <beach> pve: Sure.  You can start your CLIM application in one thread and modify its code in a REPL.
[12:08:40] <hayley> Seems every book I borrow [n=3] is lost somewhere in storage.
[12:08:42] <lisp123> hayley: Nice
[12:08:48] <pve> lisp123: ah, never tried lispworks
[12:08:53] <beach> pve: And you don't need a Lisp Machine anymore.  There is McCLIM which is getting very good.
[12:09:34] <beach> lisp123: Why recommend a proprietary system when we have McCLIM?
[12:09:37] <pve> beach: That's great. So I can add, say a button, to the app while its running?
[12:10:04] <pjb> pve: yes, you don't need to kill your lisp and reboot it to add a button.
[12:10:19] <pjb> pve: in general, you never need to kill your lisp.
[12:10:23] <pjb> (uptime) #| uptime: 5 days, 16 hours, 8 minutes, 31 seconds. --> 490111 |#
[12:10:26] <beach> pve: That's a good question.  I don't use gadgets much.
[12:11:15] <beach> pve: But the display functions are re-run after every iteration of the command loop, so if you make a change to one of those, it will be reflected after the next command.
[12:11:38] <pve> beach: I'd be fine with closing the window and re-opening it too, of course
[12:11:57] <beach> pve: Oh, then definitely.
[12:12:53] <pjb> pve: the point is that there's no difference between "you" adding a button, and the application adding a button.  THere's no static declaration that needs to be processed and compiled and loaded from a fresh image.  This is not how lisp works!
[12:13:02] <_death> pve: (ql:quickload "clim-listener") (clim-listener:run-listener) in the listener you can do (with-output-as-gadget (*standard-output*) (make-pane 'push-button :label "Hello" :activate-callback (lambda (gadget) (declare (ignore gadget)) (format t "Hi there~%"))))
[12:13:26] <pve> _death: let me try that
[12:13:29] <pjb> And even if there was, since we have this compiler available at runtime thing,  you could just reload it right on the spot!
[12:13:56] <_death> pve: I suppose you can build a dialog editor that lets you drag and drop to create gadgets etc.
[12:14:21] <pjb> Yes, it's called Interface Builder, and was developed originally in lisp.
[12:14:42] <pjb> https://fr.wikipedia.org/wiki/Interface_Builder
[12:15:18] <pjb> https://paulhammant.com/2013/03/28/interface-builders-alternative-lisp-timeline/
[12:15:27] <_death> but I think that'd be more consistent with traditional style UI systems and less with presentation based systems
[12:15:29] <beach> lisp123: You didn't answer my question.
[12:16:24] <lisp123> beach: Brb (cooking)
[12:16:39] <pve> _death: yeah, I wasn't even thinking of drag and drop -type interactivity, just something where the app keeps running
[12:16:48] *** Quits: zacque (~zacque@5.102.49.60.klj04-home.tm.net.my) (Quit: Goodbye :D)
[12:18:35] *** Joins: zacque (~zacque@5.102.49.60.klj04-home.tm.net.my)
[12:19:34] *** Joins: makomo (~makomo@user/makomo)
[12:20:28] <pve> pjb: To think, that something like that was made in the 80's. It's really strange considering today's (primitive?) methods, like two entirely different timelines.
[12:21:02] <beach> pve: Also, it depends on what is meant by restarting the application.
[12:21:21] <_death> pve: the listener makes it easy to try things as you read clim tutorials/guides
[12:21:33] <beach> pve: I mean, you can have a complete CLIM application as an instance of a CLIM frame manager, and just restart the display part of it.
[12:22:51] <beach> Er, not frame manager, application frame.
[12:24:18] <pve> Hah! I'm looking at the clim-listener now
[12:24:45] <pve> _death: Your example worked. This is cool!
[12:26:00] <_death> pve: yep.. the listener is nice, though it could be greatly improved.. say by having an organized way to let independent actors extend the set of commands (via, say, command tables)
[12:26:37] <pve> was there an inspector too?
[12:26:50] <_death> (ql:quickload "clouseau") (clouseau:inspect (find-class t))
[12:27:35] <_death> (well, that didn't go to well :P)
[12:28:01] <pjb> pve: well, it was nice, but it has its limitations.  Having a way to declare the interface in an abstract way and a system to place and adjust the elements automatically is nice.  In the 80s, since screens were small, it was important to be able to optimize manually the placements of the gadgets; it's less true nowadays.
[12:29:21] <pjb> That Interface Builder in lisp was written by Jean-Marie Hullot who was hired by NeXT computer Inc. to rewrite it in Objective-C; it still lives in Xcode…a
[12:31:09] <lisp123> beach: Just reading from before. McClim was already mentioned, that's why mentioned LW
[12:31:13] <pjb> On the other hand, there was also Hypercard, that Apple killed.  But there are clones, and IIRC, the sources of the old Hypercard are now available.
[12:31:18] *** Joins: Th30n (~Th30n@cpe-188-252-157-210.zg5.cable.xnet.hr)
[12:31:30] *** Quits: igemnace (~ian@user/igemnace) (Quit: WeeChat 3.3)
[12:33:07] *** Joins: mjoerg (~user@user/mjoerg)
[12:33:45] *** Quits: hubvu (sid495858@user/hubvu) (Ping timeout: 260 seconds)
[12:34:28] *** Joins: hubvu (sid495858@user/hubvu)
[12:35:01] *** Joins: cosimone (~user@2001:b07:ae5:db26:a7aa:8027:6b4e:2fb3)
[12:35:25] *** Quits: cosimone (~user@2001:b07:ae5:db26:a7aa:8027:6b4e:2fb3) (Remote host closed the connection)
[12:35:43] *** Joins: cosimone (~user@2001:b07:ae5:db26:a7aa:8027:6b4e:2fb3)
[12:43:29] <_death> also looks like with-room-for-graphics doesn't work too well in HEAD :/
[12:44:49] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Read error: Connection reset by peer)
[12:45:48] <pve> I played around with the listener and clouseau a bit, they seem really nice. Thanks for showing me.
[12:45:54] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[12:46:40] <beach> Clouseau is great!  I never use the SLIME inspector anymore.
[12:46:59] <pve> the hover splines were pretty cool
[12:47:16] <beach> Yeah.
[12:47:32] <_death> pve: you can also check jackdaniel's demos at https://www.youtube.com/user/dkochmanski/videos
[12:47:59] <pve> So in theory, I should be able to make a plotting library using McCLIM? I'd be interested in basic 2d charts, histograms, scatterplots at least..
[12:48:24] <pve> (not exactly a weekend project, I know)
[12:48:28] *** Quits: mjoerg (~user@user/mjoerg) (Ping timeout: 252 seconds)
[12:49:09] <beach> pve: There is already scigraph as part of the McCLIM distribution.  And jackdaniel has a plotting library he has been working on.
[12:49:11] <_death> pve: yes.. there is also scigraph for plotting.. I recently wrote a short snippet that uses it.. https://old.reddit.com/r/Common_Lisp/comments/pm8p73/loop_macro_with_a_when_vs_an_n2_approach/hcg273y/
[12:50:05] <_death> pve: scigraph can also be greatly improved.. I'd start by renaming the "GRAPH" package though, which is a breaking change, but I don't think many people use it so it'd be worth it
[12:50:35] *** Joins: tfeb (~tfb@88.98.95.237)
[12:50:46] <beach> Yes, improvements to things like scigraph would be welcome.
[12:51:17] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[12:51:20] <pve> oh wow, I see a scigraph chart now :)
[12:52:02] <pve> does it rely on gnuplot?
[12:52:08] <_death> there's mcclim/Apps/Scigraph/scigraph/demo-frame.lisp with some demos
[12:52:22] <_death> no, it draws everything by itself
[12:52:26] <pve> nice!
[12:52:34] *** Joins: lisp123 (~lisp123@5.30.23.247)
[12:52:38] *** Quits: Th30n (~Th30n@cpe-188-252-157-210.zg5.cable.xnet.hr) (Quit: WeeChat 3.3)
[12:52:54] <_death> in another clim app I used py4cl2 to call python to render a chart, and show that in clim UI
[12:53:09] <mfiano> also check out scymtym'
[12:53:13] <lisp123> pve: Let me know how you go, I'd be happy to test it out
[12:53:15] <mfiano> scymtym's fork
[12:53:16] <_death> so you can always get around ;)
[12:53:20] <mfiano> for the flamegraph stuff
[12:54:19] *** Joins: loskutak (~loskutak@gw.mecom.cz)
[12:54:33] <lisp123> I was using vecto before https://www.xach.com/lisp/vecto/
[12:54:42] <gin> (loop for x from 1 to 10 when (evenp x) do (format t "~&~a~%" x) collect x) => prints 2 4 6 8 10 and returns (1 2 3 4 5 6 7 8 9 10). so the WHEN clause applies to the following DO clause. is there a way to make the WHEN clause apply to both DO and COLLECT?
[12:55:11] <tfeb> and I tgink
[12:55:23] <mfiano> yes
[12:55:24] <mfiano> AND
[12:55:27] <beach> DO .... AND ...
[12:55:31] <tfeb> do x and collect y
[12:56:48] <gin> tfeb, mfiano, beach: thanks!
[12:59:39] <beach> Pleasure.
[13:04:04] *** Quits: rogersm (~rogersm@90.166.177.48) (Quit: Leaving...)
[13:06:00] *** Quits: scymtym (~user@ip-94-114-248-79.unity-media.net) (Ping timeout: 265 seconds)
[13:06:21] <_death> well, after bisection it appears that it's not w-r-f-g, but commit efcfd64 that's responsible (I used draw-circle* inside the w-r-f-g)
[13:07:56] <beach> Could you create an issue for that, please?
[13:08:27] *** Quits: tfeb (~tfb@88.98.95.237) (Remote host closed the connection)
[13:08:46] *** Joins: cosimone` (~user@93-44-187-179.ip98.fastwebnet.it)
[13:08:54] <_death> sure
[13:09:22] *** Quits: cosimone (~user@2001:b07:ae5:db26:a7aa:8027:6b4e:2fb3) (Ping timeout: 252 seconds)
[13:17:59] <lisp123> What's a good tool for searching / classifying large amounts of text?
[13:19:01] *** Joins: igemnace (~ian@user/igemnace)
[13:19:54] *** Quits: elderK (uid205007@helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[13:20:28] <mfiano> depends on use. ropes, gap buffers, piece tables, are some of these data structures that various text editors use
[13:20:40] <_death> define "large"
[13:21:06] <lisp123> I want to classify & search through the entire comp.lang.lisp archives (upto 2017)
[13:21:51] <_death> well, you can use sqlite with full text search for example.. if you want just lisp, maybe montezuma, though I didn't try it with a large corpus
[13:22:32] <lisp123> So sqlite is pretty fast?
[13:23:00] <lisp123> I might just do that then
[13:23:31] <_death> sure, you just need to create the fts table add insert to it as well
[13:23:46] <mfiano> _death can probably help you with the Bayesian programming required for anything meaningful from that ;)
[13:23:54] <lisp123> Sounds good
[13:26:14] *** Parts: pranavats (3fba1d1b34@jabberfr.org) ()
[13:33:58] *** Joins: attila_lendvai (~alendvai@catv-213-222-131-28.catv.broadband.hu)
[13:35:47] *** Joins: random-nick (~random-ni@87.116.183.117)
[13:37:40] *** Quits: cosimone` (~user@93-44-187-179.ip98.fastwebnet.it) (Quit: ERC (IRC client for Emacs 27.1))
[13:38:02] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[13:38:54] *** Joins: notzmv (~zmv@user/notzmv)
[13:42:26] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[13:43:30] <pve> lisp123: I was dreaming of indexing #lisp/#commonlisp logs the other day, you could have a go at that too, but I think it's more challenging to extract topics from irc logs.
[13:45:16] <lisp123> pve: Yes I'm looking at comp.lang.lisp archives now (1m lines opened up in 5 seconds in Sublime...seriously, I wish Emacs had the same backend), its very well structured
[13:45:32] <lisp123> How far back do the IRC logs go?
[13:46:37] <beach> There are Tunes logs from 2004-01-01
[13:47:43] *** Joins: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f)
[13:47:53] <lisp123> beach: Do you remember when you started on IRC? Or was it all c.l.l back in the day
[13:48:31] <_death> well, here's some old tfidf code that uses redis for storage https://gist.github.com/death/84c57eb0811421c1c51bf63f2fd716fd .. I used it for example to get terms for each irc person in some channel, with entertaining results
[13:49:50] <_death> more recently I used it on lisp book pdfs (converted with pdftotext) I have.. may be interesting to compare terms used by books of different dialects
[13:50:13] <beach> lisp123: I don't remember.  2002 or so.
[13:50:17] <lisp123> _death: Wow, nice
[13:50:29] *** Quits: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f) (Remote host closed the connection)
[13:50:56] <lisp123> beach: I see
[13:53:55] *** Joins: selwyn (~selwyn@user/selwyn)
[13:55:21] <mfiano> I've been also thinking about how to store/process massive amounts of text
[13:55:58] <mfiano> Wanted to do some HMM, LSTM, or RNN stuff on large corpora
[13:56:19] *** Joins: pranavats (3fba1d1b34@jabberfr.org)
[14:01:25] <beach> This is a point where it is prudent to actually estimate the amount of data.
[14:01:56] *** Joins: jjonah (~jjonah@p200300d5d7058900dea632fffeb3342f.dip0.t-ipconnect.de)
[14:02:43] <beach> The Tunes IRC logs from 2004 to 2018 contain around 660MB of text.
[14:03:54] <hayley> Damn, whoever used to own https://yourdatafitsinram.com doesn't own it now :(
[14:03:58] <beach> It might not be worthwhile making a complicated organization based on secondary memory.
[14:04:16] <hayley> Perhaps because it is https://yourdatafitsinram.net/ and I don't know why Hacker News linked the .com page.
[14:04:45] <_death> often you just need terms and their counts, or small shingles
[14:09:29] <pve> I think segmenting the logs into "discussions" (something like a thread or article) could be worthwhile
[14:10:07] *** Quits: frgo (~frgo@p200300deef0cee00811628c0c0040b1f.dip0.t-ipconnect.de) (Read error: Connection reset by peer)
[14:10:11] <Nilby> my data fits in ram, it just doesn't fit the in (dynamic-space-size) many time :(
[14:10:35] *** Joins: frgo (~frgo@p200300deef0cee00811628c0c0040b1f.dip0.t-ipconnect.de)
[14:10:38] <_death> pve: I also attempted to do that in various ways.. based on time of messages and nick references
[14:11:35] <_death> pve: it was also a fun exercise to do it in the context of gbbopen (a blackboard system framework)
[14:11:38] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[14:12:27] <pve> _death: I guess it wasn't very easy?
[14:14:15] <pve> I feel like message timestamps and nicks should produce at least *something* to go on
[14:14:21] <_death> pve: well, it seems to work most of the time by eye inspection, but its success is difficult to measure if you don't want to read all that stuff again
[14:15:28] <pve> perhaps a small set of manually labeled data could be useful
[14:16:19] <_death> in the old days there were fun programs like mircstats.. they performed very crude statistics but were still fun
[14:17:14] <_death> example http://www.nic.fi/~lct/stats/trinitycore.html
[14:18:07] <pve> that looks pretty cool
[14:18:45] <_death> well, that looks like a git stats.. the irc stats were more entertaining
[14:19:45] <_death> the main page is http://www.nic.fi/~mauvine1/mircstats/
[14:20:06] <greyrat> lisp123: To creatre a search engine? 
[14:20:09] <_death> which links to google to look at some samples
[14:21:53] <pve> things like activity stats could answer questions like "What time of day should I ask my questions?" to people new to the channel.. whoops have to step out now :)
[14:24:42] <greyrat> pve: So should you ask when there is little activity or when there is a lot? :))
[14:25:07] <greyrat> If the chatroom is busy, your question will get lost quickly
[14:25:32] <greyrat> Is there a way to make the shebang line `#!/usr/bin/env ...` eval as a comment?
[14:27:21] <_death> you can use reinforcement learning with reward a function of time-to-response ;)
[14:28:12] <_death> greyrat: sbcl ignores the shebang line if run with --script
[14:30:06] <greyrat> _death: Hmm. Wouldn't a simple regression work? The problem is that we do not know what was a reply to what in IRC.
[14:30:22] <greyrat> This is totally doable in Telegram though. Discord, too, I guess.
[14:31:02] <greyrat> _death: sbcl --script does, but evaling the buffer with emacs doesn't. I guess I could patch the emacs fn to skip the first line.
[14:37:17] <_death> greyrat: in RL context, a regression could be used to estimate the value function.. a simple regression may be good if the system is stationary and you already have a lot of data
[14:49:42] *** Joins: lisp123 (~lisp123@5.30.23.247)
[14:51:26] *** Quits: jjonah (~jjonah@p200300d5d7058900dea632fffeb3342f.dip0.t-ipconnect.de) (Remote host closed the connection)
[14:53:44] *** Quits: White_Flame (~quassel@user/white-flame/x-6930243) (Remote host closed the connection)
[14:54:57] *** Joins: White_Flame (~quassel@user/white-flame/x-6930243)
[14:57:14] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 260 seconds)
[15:07:07] *** Joins: Odin- (~odin@cybernetic.anarchism.is)
[15:18:39] *** Quits: igemnace (~ian@user/igemnace) (Remote host closed the connection)
[15:18:56] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Remote host closed the connection)
[15:20:08] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[15:30:45] *** Joins: scymtym (~user@ip-94-114-248-79.unity-media.net)
[15:33:15] <scymtym> _death: the clouseau problem with class t was that the class is a specializer in too many methods, right? or did you encounter a different problem?
[15:33:58] *** Joins: lisp123 (~lisp123@5.30.23.247)
[15:36:52] *** Joins: Cymew (~ante@c-e989225c.023-1144-7570702.bbcust.telenor.se)
[15:38:16] *** Quits: Antsan (~Aksej@picard.host.weltraumschlangen.de) (Quit: ZNC 1.8.2+deb2+b1 - https://znc.in)
[15:41:36] <_death> scymtym: yeah, and I got some clx overflow error
[15:41:57] <scymtym> _death: ok. i guess i should use the paging mechanism there as well
[15:42:23] <_death> scymtym: I don't remember, does clouseau implement lazy inspection of compound structures?
[15:43:10] <scymtym> _death: not sure what you mean
[15:43:38] <_death> e.g., if you have a list with 1m elements, does it scan/display all of them at once?
[15:45:26] <_death> looks like it scans, but has a limit for display (which can be increased)
[15:45:55] <scymtym> for sequences, it shows a "window" into the sequence. the window can scroll or grow, like a viewport and scrolling. other possibly long lists like symbols of a package, hash-tables or specializers of a class do not yet use this mechanism
[15:46:05] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[15:46:32] <_death> I see
[15:46:44] <scymtym> "moving" the window is not so obvious at the moment: you can click and drag the 0..30 part
[15:54:11] <_death> ah.. I right-clicked and picked the command
[15:54:54] *** Quits: scymtym (~user@ip-94-114-248-79.unity-media.net) (Ping timeout: 245 seconds)
[15:55:35] <_death> other commands (say show-as-graph) may also have issues with big lists
[15:57:53] *** Quits: JeromeLon (~jerome@2a00:23c7:999f:3700:b995:87ff:271f:869c) (Quit: WeeChat 3.0.1)
[16:02:21] *** Joins: taiju (~taiju@240b:253:ec40:2400:85f3:1e5:6cf:4cce)
[16:06:59] *** Quits: Cymew (~ante@c-e989225c.023-1144-7570702.bbcust.telenor.se) (Ping timeout: 245 seconds)
[16:14:04] *** Joins: scymtym (~user@2001:638:504:20e0:a511:8858:bc9:9aae)
[16:17:42] <scymtym> _death: right, but it is very hard, or at least a lot of work, to make an inspector completely safe
[16:18:29] <scymtym> admittedly, the SLIME does that part better at the moment
[16:20:16] <_death> nah, slime's inspector is not lazy
[16:20:38] <_death> I remember trying to demo it to someone by inspecting a 1m element list.. bad
[16:21:01] <_death> later on at home I came with this hack https://github.com/death/slime/commit/ff4d547ba262d39bede147c89eb0fa9ffd9c6e52
[16:21:29] <scymtym> oh, i thought it had this paging-style behavior for everything including slots, restarts, etc. and was therefore safe in this regard
[16:22:02] <_death> it has paging, but builds all of the data regardless
[16:23:23] <scymtym> i see, interesting
[16:26:17] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[16:26:28] *** Joins: selwyn_ (~selwyn@user/selwyn)
[16:29:04] *** Quits: selwyn (~selwyn@user/selwyn) (Ping timeout: 245 seconds)
[16:29:52] <_death> but I agree, inspecting is hard :).. thank you for your work
[16:31:19] <scymtym> sure. to be honest, most of my work on clouseau is motivated by the fact that many of my workflows wouldn't be possible without it
[16:31:21] *** Joins: lisp123 (~lisp123@5.30.23.247)
[16:31:34] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[16:35:19] *** Quits: theBlackDragon (~dragon@fvwm/admin) (Ping timeout: 245 seconds)
[16:39:11] <beach> That would be some excellent motivation indeed.
[16:45:48] <greyrat> What are good general templating systems? (Not just for HTML.) I feel like a lot of languages can benefit from such textual macros, but I have not found any mature, flexible solutions yet.
[16:50:25] <_death> djula works
[16:50:25] *** Quits: Qwnavery (~Qwnavery@user/qwnavery) (Quit: WeeChat 3.3)
[16:53:39] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 245 seconds)
[16:54:59] <_death> it says "HTML templating" in the documentation, but I recently used it to generate css..
[16:55:07] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[16:55:59] <greyrat> _death: It uses a custom DSL; Can't we have a templating system where we can reuse real lisp?
[16:56:36] <greyrat> (Of course, some sort of DSL is needed to interperse the lisp code and the target text)
[16:56:54] <_death> well, there are many templating libraries.. unfortunately many of them limit themselves to html
[16:59:12] <greyrat> Well, I would appreciate any good templating library that uses a real PL (any real PL, I'm fine with Python, JS, etc).
[17:01:17] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Read error: Connection reset by peer)
[17:02:12] <_death> it's not so difficult to write a template renderer that uses plain lisp.. you do need to make it capable of reading fragments, so some lisp syntax is hardcoded
[17:04:21] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[17:08:25] <greyrat> _death: I know, but I prefer to use sth mature.
[17:08:49] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Read error: Connection reset by peer)
[17:09:10] *** Joins: lisp123 (~lisp123@5.30.23.247)
[17:17:15] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[17:19:34] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 252 seconds)
[17:20:53] *** Joins: theBlackDragon (~dragon@fvwm/admin)
[17:24:27] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Quit: Laa shay'a waqi'un moutlaq bale kouloun moumkine)
[17:26:35] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[17:27:52] <_death> dunno about mature.. here's an old (mature?) hack: https://gist.github.com/death/508073b8c9322a9a3c37a8e10d59252c
[17:31:23] *** Joins: cage (~cage@dynamic-adsl-84-220-249-98.clienti.tiscali.it)
[17:36:03] *** Quits: zacque (~zacque@5.102.49.60.klj04-home.tm.net.my) (Quit: Goodbye :D)
[17:38:49] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 252 seconds)
[17:39:22] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Quit: ERC (IRC client for Emacs 27.2))
[17:43:40] <greyrat> _death: I am finding PHP rather promising for templating. Laravel's Blades also seem suitable.
[17:43:48] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[17:46:21] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Read error: Connection reset by peer)
[17:51:13] *** Joins: lisp123 (~lisp123@5.30.23.247)
[17:59:42] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 260 seconds)
[18:10:00] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Remote host closed the connection)
[18:10:14] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[18:17:16] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[18:20:26] <Shinmera> I'll be presenting at a polish games industry conference at the end of the month. The talk is about using lisp for game development, and some of the advantages that its features bring. Because it's aimed at people that have no idea about lisp it's very surface level, but if you're interested, the first draft is here: https://filebox.tymoon.eu//file/TWpNM09BPT0=
[18:20:47] <Shinmera> Also if anyone else is around the conference, I'd be up for a brief meet!
[18:22:32] *** Joins: rain3 (~rain3___@2a02:2f09:d003:5800:b41c:c37:1705:91bc)
[18:28:19] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[18:29:06] <Josh_2> Very cool Shinmera
[18:30:15] *** Joins: raeda (~raeda@72.49.219.33)
[18:31:54] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 260 seconds)
[18:33:47] *** Joins: waleee (~waleee@h-98-128-228-119.NA.cust.bahnhof.se)
[18:33:51] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Ping timeout: 245 seconds)
[18:33:53] <beach> Shinmera: Nice!  Is the conference peer reviewed?
[18:34:04] <Shinmera> No, it's just an industry conference, so no journaly
[18:34:06] <Shinmera> *journal
[18:34:14] <Shinmera> I wouldn't dare submit something like this to an academic conference :)
[18:34:18] <Josh_2> Shinmera: I think you should reword this line "ultimately even more confusing design" so that it doesn't imply the design is confusing
[18:34:53] *** Quits: ggoes (~gregf@fsf/staff/ggoes) (Remote host closed the connection)
[18:36:14] <beach> Shinmera: It is preferable not to use genitive 's with non-proper nouns.  It is much clearer of you rewrite with "of".  You then get the additional advantage that the most important word comes first.
[18:37:32] <beach> "the scripting language's own data types and routines" -> "the data types and routines proper to the scripting language".
[18:40:33] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[18:41:39] <beach> Shinmera: The preposition used in the AMOP for specialization is "to".  A method is specialized "to" a class.  The preposition "on" is reserved for talking about the relation between a method and its associated generic function.  The method "on" that generic function.
[18:44:19] <beach> I'll read it more in detail later.
[18:46:12] *** Joins: ggoes (~gregf@fsf/staff/ggoes)
[18:51:51] *** Joins: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[18:52:24] *** Quits: waleee (~waleee@h-98-128-228-119.NA.cust.bahnhof.se) (Ping timeout: 245 seconds)
[18:55:14] *** Quits: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 260 seconds)
[18:58:01] *** Quits: Nilby (~Nilby@2601:603:1481:30a0:82fa:5bff:fe66:4b49) (Ping timeout: 245 seconds)
[19:09:39] <Shinmera> Thanks, I'll take care of revisions tomorrow :)
[19:20:04] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Ping timeout: 252 seconds)
[19:20:30] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[19:30:42] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 260 seconds)
[19:31:33] *** Joins: JeromeLon (~jerome@2a00:23c7:999f:3700:3cb6:3df6:ca81:2865)
[19:55:58] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[19:58:45] *** Joins: lisp123 (~lisp123@5.30.23.247)
[19:59:50] *** Joins: mjoerg (~user@user/mjoerg)
[20:03:28] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Ping timeout: 252 seconds)
[20:04:09] *** Joins: amb007 (~a_bakic@228.151.22.93.rev.sfr.net)
[20:06:13] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 252 seconds)
[20:09:03] <JeromeLon> (defmacro checkref (value &key (test #'equalp))
[20:09:05] <JeromeLon>   `(,test *ref* ,value))
[20:09:23] <JeromeLon> why is the test not working?
[20:10:05] <JeromeLon> I'm getting: (#<FUNCTION EQUALP> ELF::*REF* 14) illegal function call
[20:10:21] <JeromeLon> with (checkref 14)
[20:11:14] *** Quits: selwyn_ (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[20:11:20] <JeromeLon> oh, I think I know, I need a real symbol, not a function. nevermind.
[20:12:46] <pjb> greyrat: cpp can be used in general, if you assume its restriction. Otherwise, a general text macro processor is m4.
[20:12:53] *** Quits: mjoerg (~user@user/mjoerg) (Remote host closed the connection)
[20:14:29] <pjb> JeromeLon: exactly.
[20:15:44] <JeromeLon> So, my question becomes: what is the idiomatic way to specify the test function in a macro? If I initialize it as (test 'equalp), the user of the macro needs to use :test equalp, which is uncommon, one would expect to have to use :test #'equalp, no?
[20:19:16] <Shinmera> you can emit a funcall and use #'equalp instead. (though in the lambdalist it has to be '#'equalp !) . Any compiler worth bothering with will realise the constant argument and transform it into the same thing as (equalp ..)
[20:20:06] <JeromeLon> I think that there is no good answer to my question. #'name is converted by the reader, so there is no way to recover the symbol, and the macro needs the symbol to generate a simple function call.
[20:20:10] *** Quits: amb007 (~a_bakic@228.151.22.93.rev.sfr.net) (Ping timeout: 260 seconds)
[20:20:23] <JeromeLon> Shinmera: yes, I have to use funcall indeed in this case
[20:20:23] <Shinmera> Uh.
[20:22:56] *** Quits: khrbt (~znc@user/khrbt) (Ping timeout: 265 seconds)
[20:22:57] *** Joins: amb007 (~a_bakic@156.196.204.77.rev.sfr.net)
[20:29:46] *** Joins: khrbt (~znc@user/khrbt)
[20:31:41] *** Joins: lad (~lad@user/lad)
[20:33:36] <pjb> JeromeLon: perhaps you should not write a macro, but a function!
[20:34:03] <JeromeLon> pjb:yes, I am rewriting it. thanks for confirming
[20:35:16] *** Joins: rogersm (~rogersm@90.166.177.48)
[20:36:29] <JeromeLon> pjb:the caller needs to pass some code, which is the reason I went for a macro. But I concluded that I'd rather eval that code and have none of the issues coming from having a macro.
[20:37:12] <pjb> JeromeLon: well: (defmacro fun (&key fun) (if (listp fun) (destructuring-bind (function name) fun (assert (eql function 'function)) `(list 'a 'symbol ',name)) `'(not (function something) ,fun)))  (fun :fun #'foo) #| --> (a symbol foo) |#   (fun :fun foo) #| --> (not #'something foo) |#
[20:37:47] <pjb> #'name is converted by the reader as (CL:FUNCTION name) which is a list…  This is what the macro receives.
[20:38:45] <pjb> Your macro can take the function name (symbol) directly:  (checkref equal foo)   (checkref equalp foo)
[20:38:57] <pjb> it works also with optional/keywords:
[20:41:01] <pjb> (checkref (:test eql) (some-code))   (checkref () (some-code))
[20:42:41] <JeromeLon> pjb: yes, that the syntax that made me uncomfortable, because of the raw eql
[20:45:09] *** Joins: lisp123 (~lisp123@5.30.23.247)
[20:46:35] *** Quits: hendursa1 (~weechat@user/hendursaga) (Quit: hendursa1)
[20:49:28] *** Joins: hendursaga (~weechat@user/hendursaga)
[20:52:00] *** Joins: selwyn (~selwyn@user/selwyn)
[20:52:45] *** Quits: selwyn (~selwyn@user/selwyn) (Remote host closed the connection)
[20:53:09] *** Joins: selwyn (~selwyn@user/selwyn)
[21:00:16] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[21:13:35] <johnjay> does anybody know how to get ros to either recognize an existing sbcl install or make one itself?
[21:13:56] <johnjay> i want to build lisp package xyz. so to do that it invokes ros. which proceeds to try to build sbcl 2.1.9 and then fail
[21:14:22] <johnjay> i already *have* sbcl installed. 2.1.1
[21:15:52] *** Joins: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[21:16:51] *** Quits: cage (~cage@dynamic-adsl-84-220-249-98.clienti.tiscali.it) (Quit: rcirc on GNU Emacs 27.1)
[21:19:29] *** Quits: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 265 seconds)
[21:21:26] *** Joins: selwyn_ (~selwyn@user/selwyn)
[21:23:23] <johnjay> https://paste.debian.net/1214870
[21:23:30] <johnjay> does anybody know what that means?
[21:23:39] *** Quits: selwyn (~selwyn@user/selwyn) (Ping timeout: 245 seconds)
[21:28:55] *** Joins: lisp123 (~lisp123@5.30.23.247)
[21:29:26] *** Quits: hendursaga (~weechat@user/hendursaga) (Remote host closed the connection)
[21:29:58] *** Quits: selwyn_ (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[21:33:41] <etimmons> Shinmera: I'm happy with a condition/restart based interface. Only problem might be the need to establish a dynamic context around the code that signals the warning.
[21:33:54] <Shinmera> What do you mean?
[21:33:59] <Shinmera> oh, injecting a handler?
[21:34:04] <etimmons> Shinmera: But that's more of an issue of how you envision additions to Forge working
[21:34:06] <etimmons> Yeah
[21:34:07] <Shinmera> you can do that easily enough by using a stealth mixin.
[21:35:25] <etimmons> I've never actually used stealth mixins, but recall seeing them mentioned here somewhat recently and they seemed cool/applicable here.
[21:35:56] <Shinmera> it just injects a superclass into an existing class, allowing you to create around/after/before methods without forcing the user to subclass.
[21:36:02] <Shinmera> so, perfect for this kinda thing.
[21:36:42] <etimmons> One thing I like about CLPM integration with ASDF is that the user can just push a search function to some ASDF var (forget the name) and then use ASDF like normal.
[21:37:07] <etimmons> Unlike needing to call through another function like ql:quickload
[21:37:23] <etimmons> So as long as we can do a similar thing with Forge (and I think we can with stealth mixins), I'm happy
[21:37:35] <Shinmera> sure
[21:37:50] <Shinmera> forge is too generic to have something as localised as a "system search function"
[21:38:19] <etimmons> Yeah, and conditions/restarts is more extensible anyways
[21:40:20] <etimmons> johnjay: esrap has some issues with the latest SBCL, but they've all been fixed in the repo. So you need to either role back SBCL or use a newer version of esrap than is currently included in QL
[21:42:45] <etimmons> johnjay: What does using Roswell actually buy you if you've already got a system SBCL installed that you want to use?
[21:42:55] <johnjay> this package forces me to use it. i don't know why.
[21:43:04] *** Parts: tux0r (~tux0r@rosaelefanten.org) (Closing Window)
[21:43:30] <johnjay> i assume it's trying to compile this esrap package you're talking about
[21:43:34] <johnjay> or get it from quicklisp
[21:47:14] <etimmons> Well that's unfortunate.
[21:47:49] <johnjay> i installed a similar package from quicklisp in sbcl directly
[21:47:54] <johnjay> but i don't understand how to load it
[21:48:14] <johnjay> i see some references to it in dists/quicklisp/software though
[21:51:10] *** Joins: notzmv (~zmv@user/notzmv)
[21:56:04] <etimmons> If you have Quicklisp installed and added to your SBCL init file, you should be able to just (ql:quickload "the-system-to-load")
[21:57:55] *** Quits: splittist (sid17737@5.254.36.57) (Read error: Connection reset by peer)
[21:58:04] *** Joins: splittist (sid17737@id-17737.tinside.irccloud.com)
[21:58:17] *** Quits: derwolf (~DerWolf@static.143.125.47.78.clients.your-server.de) (Quit: Bye)
[21:58:36] *** Joins: derwolf (~DerWolf@2a01:4f8:c0c:554a::1)
[21:58:43] <johnjay> right but i dont' know what to do after that
[21:58:55] <johnjay> i googled for how to startup a package or inspect it in quicklisp and didn't find anything
[21:59:04] <johnjay> is it usually (packagename-start)?
[21:59:04] *** Quits: jcowan (sid325434@ilkley.irccloud.com) (Ping timeout: 245 seconds)
[22:01:26] <etimmons> Package is a very specific CL term (basically a namespace for symbols), so you can't really "startup a package".
[22:01:50] <etimmons> If you want to start a program that's written in CL, it's up to that program's documentation to tell you what the correct functions to call are
[22:02:18] <etimmons> But in any case, I suspect #clschool might be a better place to ask these questions
[22:02:19] *** Joins: jcowan (sid325434@id-325434.ilkley.irccloud.com)
[22:04:13] <johnjay> can i figure out how to invoke it from the .asd file?
[22:04:14] <johnjay> ok thanks
[22:04:28] <johnjay> right but it's a chicken egg question
[22:04:38] <johnjay> if i knew how to lookup that documentation i wouldn't need to ask
[22:05:19] <etimmons> There may be an :entrypoint defined in the .asd file. If so, that'd give you a very good hint of where to start looking
[22:07:53] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[22:09:24] *** Joins: lisp123 (~lisp123@5.30.23.247)
[22:12:52] *** Quits: Lord_Nightmare (Lord_Night@user/lord-nightmare/x-3657113) (Quit: ZNC - http://znc.in)
[22:16:01] *** Joins: Lord_Nightmare (Lord_Night@user/lord-nightmare/x-3657113)
[22:19:50] *** Joins: jjonah (~jjonah@p200300d5d7058900dea632fffeb3342f.dip0.t-ipconnect.de)
[22:23:01] *** Quits: rain3 (~rain3___@2a02:2f09:d003:5800:b41c:c37:1705:91bc) (Ping timeout: 245 seconds)
[22:24:22] *** Quits: donovanquixote (~Donovan@c-98-246-129-179.hsd1.or.comcast.net) (Remote host closed the connection)
[22:33:26] *** Quits: amb007 (~a_bakic@156.196.204.77.rev.sfr.net) (Ping timeout: 265 seconds)
[22:38:24] *** Joins: amb007 (~a_bakic@201.107.204.77.rev.sfr.net)
[22:42:33] *** Quits: jjonah (~jjonah@p200300d5d7058900dea632fffeb3342f.dip0.t-ipconnect.de) (Remote host closed the connection)
[22:45:18] *** Joins: hendursaga (~weechat@user/hendursaga)
[22:50:56] *** Quits: amb007 (~a_bakic@201.107.204.77.rev.sfr.net) (Read error: Connection reset by peer)
[22:53:32] *** Joins: tyson2 (~user@24.114.73.249)
[22:56:57] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[23:00:06] *** Quits: lad (~lad@user/lad) (Ping timeout: 245 seconds)
[23:01:38] *** Quits: gaqwas (~john@dynamic-077-007-181-079.77.7.pool.telefonica.de) (Ping timeout: 260 seconds)
[23:02:46] *** Joins: igemnace (~ian@user/igemnace)
[23:03:19] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Ping timeout: 252 seconds)
[23:03:38] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[23:14:09] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[23:19:04] *** Quits: theBlackDragon (~dragon@fvwm/admin) (Ping timeout: 245 seconds)
[23:20:02] *** Joins: theBlackDragon (~dragon@fvwm/admin)
[23:25:39] *** Joins: Spawns_Carpeting (~Spawns_Ca@user/spawns-carpeting/x-6969421)
[23:28:16] *** Quits: Spawns_Carpeting (~Spawns_Ca@user/spawns-carpeting/x-6969421) (Client Quit)
[23:28:31] *** Joins: sandbox (~Spawns_Ca@user/spawns-carpeting/x-6969421)
[23:28:31] *** sandbox is now known as Spawns_Carpeting
[23:32:24] *** Quits: Krystof (~user@81.174.155.115) (Ping timeout: 245 seconds)
[23:39:13] *** Quits: rogersm (~rogersm@90.166.177.48) (Quit: Leaving...)
[23:49:22] *** Quits: tyson2 (~user@24.114.73.249) (Quit: ERC (IRC client for Emacs 27.2))
[23:50:03] *** Joins: jackdani1l (~jack@turtleware.eu)
[23:50:22] *** Quits: ryanbw (~ryanbw@mab.sdf.org) (Ping timeout: 250 seconds)
[23:51:02] *** Quits: jackdaniel (~jack@user/jackdaniel) (Ping timeout: 245 seconds)
[23:51:15] *** Joins: ryanbw (~ryanbw@mab.sdf.org)
[23:55:11] *** Joins: scymtym_ (~user@2001:638:504:20e6:6ac3:87e0:e782:f3fc)
[23:56:43] *** Quits: scymtym (~user@2001:638:504:20e0:a511:8858:bc9:9aae) (Ping timeout: 252 seconds)
[23:56:51] *** Joins: ebrasca (~user@librepanther.com)
