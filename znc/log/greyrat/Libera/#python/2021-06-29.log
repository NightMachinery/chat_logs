[00:00:00] <altendky> Samian: `import otherfile` is the simple (and fiddly) way to do it.  setting up a proper project you install is the robust way to do it.
[00:00:04] *** Quits: shabius (~shabius@2a0e:1c80:2:1021::1000) (Ping timeout: 246 seconds)
[00:00:04] *** Quits: node1 (~node1@user/node1) (Quit: Leaving)
[00:00:31] <Samian> I guess facebook is being unprofessional?
[00:00:49] *** Joins: shabius (~shabius@45.15.19.194)
[00:01:01] *** jarthur_ is now known as jarthur
[00:01:04] *** Quits: djapo (~archangel@user/djapo) (Ping timeout: 250 seconds)
[00:01:16] * amogorkon would use() the otherfile ;)
[00:01:31] <amogorkon> much nicer to work with relative paths with that
[00:01:40] <corn266> gonna use your mom there, amogorkon?
[00:01:51] <altendky> what's `use`?
[00:02:01] <amogorkon> https://pypi.org/project/justuse/
[00:02:21] *** Joins: jazzy (~jaziz@2600:380:8753:52bc:19c1:bcfb:6169:5fdf)
[00:02:23] <altendky> ah, have a dependency instead of a proper project.  how will the dependency end up installed?  `:]`
[00:02:36] <nedbat> corn266: i'm not sure if that was an attempt at humor?
[00:02:37] *** Joins: tg (~tg@rockylinux/infra/tg)
[00:02:39] <altendky> but yes, there are lots of options
[00:02:44] <amogorkon> you can pass in a relative path anywhere on the file hierarchy
[00:02:57] <corn266> nedbat yea i'm not funny :(
[00:03:16] <nedbat> corn266: thanks for being introspective about it
[00:03:42] <nedbat> (and for not following that line of "humor" in the future)
[00:03:54] *** Quits: jhulten (~jhulten@c-67-185-71-124.hsd1.wa.comcast.net) (Remote host closed the connection)
[00:04:05] <corn266> nedbat op for me and i'll actually be sorry
[00:04:24] <corn266> i had a real question further back, read it and check
[00:05:03] <nedbat> corn266: questions are fine. i'm not sure what you mean by "op for me"?
[00:05:07] <altendky> Samian: plenty of fiddly code out there
[00:05:20] *** Joins: kostkon (~kostkon@2a02:587:a100:18e:9fe3:794:a225:7cdb)
[00:05:28] <corn266> kk
[00:05:36] <amogorkon> nedbat, they don't take you serious unless you show them them you can kick them out, i guess
[00:05:36] *** Quits: kostkon__ (~kostkon@2a02:587:a100:18e:9fe3:794:a225:7cdb) (Ping timeout: 268 seconds)
[00:05:47] <nedbat> amogorkon: that would be unfortunate
[00:05:54] *** Quits: shabius (~shabius@45.15.19.194) (Ping timeout: 272 seconds)
[00:05:59] <amogorkon> that's how i understood it
[00:06:14] *** Joins: justinf210 (~justinf21@212.sub-174-204-10.myvzw.com)
[00:06:39] *** Joins: pneff (~pneff@2a02:168:fedc:0:4961:9552:50a:6c11)
[00:06:49] *** Joins: Pickchea (~private@user/pickchea)
[00:07:18] *** Joins: gline (~yashi@p508be03d.dip0.t-ipconnect.de)
[00:07:27] *** Quits: GiLgAmEzH (~gilgamezh@181.47.117.104) (Ping timeout: 268 seconds)
[00:08:19] <altendky> corn266: i don't know my way around aiofiles but an explanation of what does happen and some code that does that thing might help get someone else's help.  "does not want to" isn't the easiest thing to debug.  :]
[00:09:18] <corn266> altendky i wish i could help you help me or help myself even, we're just getting random hangs at this point
[00:09:32] <corn266> sorry nedbat
[00:09:32] <altendky> oof
[00:09:58] <altendky> corn266: welp, a minimal recreation would be a start for anyone to debug.
[00:10:17] <nedbat> corn266: as it happens, i'm having a similar "mysterious filesystem not acting like a filesystem" problem that I'm asking about in #docker. I know the frustration.
[00:10:43] <corn266> we hired a 3rd party to build this wrapper so we don't even know how to diagnose the issue
[00:10:58] *** Quits: gline_ (~yashi@p5b2412d2.dip0.t-ipconnect.de) (Ping timeout: 272 seconds)
[00:12:00] *** Quits: pneff (~pneff@2a02:168:fedc:0:4961:9552:50a:6c11) (Ping timeout: 272 seconds)
[00:12:24] *** Joins: kostkon_ (~kostkon@2a02:587:a100:18e:9fe3:794:a225:7cdb)
[00:12:56] *** Joins: pnoud (~pnoud@user/pnoud)
[00:12:56] *** Quits: kostkon (~kostkon@2a02:587:a100:18e:9fe3:794:a225:7cdb) (Read error: No route to host)
[00:14:21] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Remote host closed the connection)
[00:17:03] <dba> Can AI write books?
[00:17:14] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[00:17:17] <amogorkon> sure
[00:17:21] <grym> dba: that's not a python question
[00:17:26] <Samian> btw, writing to sys.argv worked!
[00:17:30] <amogorkon> hey grym \o/
[00:17:34] <grym> amogorkon: yo
[00:17:48] <amogorkon> how have you been, mate?
[00:17:56] <dba> grym, is there a library in python that would write books with AI?
[00:17:56] *** Quits: pnoud (~pnoud@user/pnoud) (Ping timeout: 272 seconds)
[00:18:36] <altendky> Samian: might be good to refactor and separate the arg parsing from the function calling so they can be used separately
[00:18:39] <amogorkon> dba, https://www.fullstackpython.com/gpt-3.html
[00:19:24] <Samian> altendky  I would, but it's not my code. I'm adding/modifying other people's code, and I don't want to touch anything I'm not supposed to.
[00:19:51] <Samian> altendky  it's like going into someone's house and doing stuff no one said you could do
[00:19:53] *** Joins: jhulten (~jhulten@c-67-185-71-124.hsd1.wa.comcast.net)
[00:20:04] <dba> amogorkon, thank you this is very helpful starting point
[00:20:22] <grym> dba: i don't think that 'ai' can 'write' anything, but if you're looking for programs that generate long sequences of words, GPT3 is the current thing of interest
[00:20:50] *** Joins: anas (~anas@196.224.51.146)
[00:21:32] *** Quits: xa0s (~xa0s@mab.sdf.org) (Quit: leaving)
[00:22:02] <dba> grym, I thought the same, just playing around to see if I can generate a useful meaningful piece of content post/article with AI
[00:22:22] *** Joins: Bronto22 (~mennoh@84-86-247-193.fixed.kpn.net)
[00:22:22] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Ping timeout: 272 seconds)
[00:22:28] <grym> dba: kindasorta
[00:22:32] *** Joins: amahl (~amahl@dsl-jklbng12-54fbca-64.dhcp.inet.fi)
[00:22:54] *** Joins: beshr (~beshr@78-72-246-187-no2006.tbcn.telia.com)
[00:22:58] *** Parts: beshr (~beshr@78-72-246-187-no2006.tbcn.telia.com) ()
[00:23:11] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[00:23:25] *** Quits: magla (~gelignite@55d471c8.access.ecotel.net) (Quit: Stay safe!)
[00:23:30] *** Joins: pneff (~pneff@2a02:168:fedc:0:4961:9552:50a:6c11)
[00:24:16] *** Quits: jhulten (~jhulten@c-67-185-71-124.hsd1.wa.comcast.net) (Ping timeout: 252 seconds)
[00:24:20] *** Quits: amogorkon (~amogorkon@port-92-196-97-137.dynamic.as20676.net) (Quit: just use()!)
[00:24:48] *** Joins: djapo (~archangel@user/djapo)
[00:26:10] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 272 seconds)
[00:26:20] *** Quits: pwnd_sfw (~pwnd_sfw@ool-18b88100.dyn.optonline.net) (Quit: Ping timeout (120 seconds))
[00:26:35] *** Joins: pwnd_sfw (~pwnd_sfw@ool-18b88100.dyn.optonline.net)
[00:27:07] *** Joins: gbristol (gbristol@hermes.gbristol.net)
[00:27:12] *** Quits: Narrat (~omnius@p200300df5f3a682506ea56fffe2e7cdc.dip0.t-ipconnect.de) (Ping timeout: 268 seconds)
[00:27:50] *** Quits: brickfat (~brickfat@user/brickfat) (Quit: Leaving)
[00:28:25] *** Quits: pneff (~pneff@2a02:168:fedc:0:4961:9552:50a:6c11) (Ping timeout: 268 seconds)
[00:28:37] *** Joins: jinsun_ (~jinsun_@user/jinsun)
[00:29:09] <nedbat> dba: https://nanogenmo.github.io/
[00:31:42] *** Quits: RangerBobVA (~bmaddox@user/rangerbobva) (Quit: Leaving)
[00:32:07] *** Joins: Narrat (~omnius@p200300df5f3a682506ea56fffe2e7cdc.dip0.t-ipconnect.de)
[00:32:17] *** Parts: frostblade (onelegend@user/frostblade) (WeeChat 3.2)
[00:33:04] *** Parts: Blankspace (~abcd@user/blankspace) (why)
[00:33:05] *** Joins: matsaman (~matsaman@user/matsaman)
[00:34:26] *** Joins: Adoi (~Adoi@user/adoi)
[00:35:00] *** Quits: thiras (~thiras@user/thiras) (Remote host closed the connection)
[00:35:25] *** Joins: thiras (~thiras@user/thiras)
[00:38:27] *** Quits: odrling (~odrling@korone.aidoru.agency) (Quit: see you space cowboy)
[00:39:12] *** Quits: Adoi (~Adoi@user/adoi) (Ping timeout: 268 seconds)
[00:39:36] *** Quits: alguien (~alguien@user/alguien) (Ping timeout: 265 seconds)
[00:40:09] *** Quits: rhax (~yannick@user/rhax) (Quit: Leaving)
[00:40:21] *** Joins: pneff (~pneff@2a02:168:fedc:0:4961:9552:50a:6c11)
[00:40:55] *** Joins: odrling (~odrling@korone.aidoru.agency)
[00:42:43] <The-Compiler> nedbat: that's pretty nice
[00:43:11] *** Joins: beshr (~beshr@user/beshr)
[00:43:57] <The-Compiler> I'm using a library which used to raise ValueError("DeserializationError") in earlier versions, but raises its own DeserializationError properly now. How do I best unify the two variants? The best thing I could come up with is https://paste.the-compiler.org/view/cf1e5304 which still seems meh (even more so if I want to handle more exceptions later)
[00:44:49] <tunixman> dba: I thought I mentioned them but MArkov Chains are okay at generating semi-plausible text https://towardsdatascience.com/using-a-markov-chain-sentence-generator-in-python-to-generate-real-fake-news-e9c904e967e
[00:45:04] *** Quits: pneff (~pneff@2a02:168:fedc:0:4961:9552:50a:6c11) (Ping timeout: 268 seconds)
[00:45:08] *** Quits: Hazza (~Haxxa@89nnjg0xckz9ggn6r5xm.ip6.superloop.com) (Quit: Haxxa flies away.)
[00:46:05] *** Quits: hnOsmium0001 (uid453710@id-453710.stonehaven.irccloud.com) (Quit: Connection closed for inactivity)
[00:46:39] <grym> old school, but still workable
[00:46:49] <grym> most silly chatbots do this because it's cheap as heck to run
[00:47:13] *** Quits: sgn (~sgn@user/sgn) (Ping timeout: 268 seconds)
[00:47:20] <tunixman> oh yeah, easy to play around with different data sources.
[00:47:23] *** Joins: Haxxa (~Haxxa@89nnjg0xckz9ggn6r5xm.ip6.superloop.com)
[00:48:03] <tunixman> The intuition under it is also semi-applicable to what GANs do in a really metaphorical way.
[00:49:04] <grym> handy in very restricted domains; markov stuff is still heavily used in genomics
[00:49:25] <grym> when you have 20 words, ever, ...
[00:49:38] <tunixman> hahahah yeah, that's true!
[00:49:38] *** Quits: Julian (~tos9@python/site-packages/Julian) (Quit: leaving)
[00:50:08] <tunixman> signal processing too with Viterbi...
[00:52:22] *** Quits: r3m (~launch@user/r3m) (Quit: WeeChat 3.3-dev)
[00:53:10] <GrandPa-G> for a pyserial connection, what can cause a write timeout? if no flow control is involved, what would make a write (with no timeout specified) just wait forever? On a raspberry if it makes any difference
[00:53:15] *** Joins: shibboleth (~shibbolet@gateway/tor-sasl/shibboleth)
[00:54:04] <supakeen> are you certain no flow control?
[00:54:50] *** Joins: r3m (~launch@user/r3m)
[00:56:35] <GrandPa-G> it using a usb to micro cable from pi (usb) to Arduino M4 (micro) with circuitpython. No mention of flow control anywhere.
[00:57:02] *** Joins: monkey_ (~user@190.104.116.134)
[00:57:05] <supakeen> Ah, so UART>
[00:57:29] <supakeen> Perhaps you are going too fast and the buffer is filling up?
[00:57:50] <GrandPa-G> 9600 baud. How can write buffer fill?
[00:58:23] *** Quits: jinsun_ (~jinsun_@user/jinsun) (Read error: Connection reset by peer)
[00:58:31] *** Joins: pneff (~pneff@2a02:168:fedc:0:4961:9552:50a:6c11)
[00:58:38] *** Joins: jinsun_ (~jinsun_@user/jinsun)
[00:58:51] *** Quits: ctrypoph (~ctrypoph@99-51-11-77.lightspeed.brhmmi.sbcglobal.net) (Quit: -a- Connection Timed Out)
[00:58:58] <supakeen> Writing a lot of data to it faster than it can send it to the other side triggering a timeout.
[00:59:38] <GrandPa-G> sending about 2-10 characters, nl is all
[01:00:12] <supakeen> Does the data end up on the device?
[01:00:59] <tunixman> you could try changing the hardware flow control (also called rtscts in some contexts) flag in the serial port settings to see if that helps. Try it with "True" to start with.
[01:01:06] *** Joins: hnOsmium0001 (uid453710@id-453710.stonehaven.irccloud.com)
[01:01:41] *** Joins: effprime (~effprime@user/effprime)
[01:01:58] *** Quits: Auron (~Auron956@user/auron) (Remote host closed the connection)
[01:02:18] <GrandPa-G> I think the data does get there. I have to work at checking, but I think so.
[01:02:48] <GrandPa-G> Also, this only happens once in many hours of sending about every minute or so. very random
[01:02:54] *** Quits: anas (~anas@196.224.51.146) (Ping timeout: 272 seconds)
[01:03:11] <supakeen> Ah, I thought it happened all the time.
[01:03:27] *** Joins: ctrypoph (~ctrypoph@99-51-11-77.lightspeed.brhmmi.sbcglobal.net)
[01:03:34] <Celelibi> tunixman, markov chains are very bad at generating anything that makes sens.
[01:03:35] *** Joins: Auron (Auron956@user/auron)
[01:03:51] <Celelibi> By definition, actually.
[01:04:10] *** Quits: justinf210 (~justinf21@212.sub-174-204-10.myvzw.com) (Ping timeout: 272 seconds)
[01:04:16] <tunixman> Oh yeah, but they're fun to play with to sort of develop an intuition of how generative models work.
[01:04:28] <tunixman> fast to train, fast to see the results from.
[01:04:33] *** Joins: Ronalds_Mazitis_ (~Ronalds_M@78.84.19.247)
[01:04:38] *** Joins: Laibsch (~leggewie@dynamic-002-243-019-213.2.243.pool.telefonica.de)
[01:04:59] <tunixman> and still useful for a lot of other things that aren't human text generation.
[01:05:09] *** Quits: kosh (~kosh@user/kosh) (Read error: Connection reset by peer)
[01:05:28] <Celelibi> Indeed.
[01:06:55] *** Joins: Adoi (~Adoi@user/adoi)
[01:06:57] *** Quits: rajkosto (~rajkosto@cable-178-149-127-189.dynamic.sbb.rs) (Ping timeout: 268 seconds)
[01:07:10] *** Joins: justinf210 (~justinf21@12.sub-97-44-0.myvzw.com)
[01:07:12] *** Joins: semanticz0 (~semanticz@202.164.136.255)
[01:07:19] *** Quits: aslicedbanjo (~aslicedba@host81-157-178-154.range81-157.btcentralplus.com) (Quit: Leaving.)
[01:08:00] <grym> memorylessness makes implementation a breeeeeze
[01:08:01] <grym> :)
[01:08:02] <SnoopJ> n-gram MC models can be very sensible
[01:08:27] *** Quits: Auron (Auron956@user/auron) (Remote host closed the connection)
[01:08:29] <SnoopJ> (at the expense of a much higher data burden)
[01:08:34] <Celelibi> In my tests, they either generate garbage or just repeat their training data.
[01:08:39] <grym> dragon dictation did this for ~15 years
[01:08:53] <tunixman> hahaha
[01:08:56] <grym> Celelibi: _everything_ ultimately recapitulates its training data, so that's not unusual
[01:09:00] *** Quits: pneff (~pneff@2a02:168:fedc:0:4961:9552:50a:6c11) (Ping timeout: 272 seconds)
[01:09:15] <grym> it's just very visible in a MC generator very early
[01:09:18] <SnoopJ> Celelibi, it is certainly downright incorrect to say they are not useful in general; as a text generation tool, they are not very sophisticated though
[01:09:50] <SnoopJ> better (albeit more complex) tools in the NLP space for sure if you want high self-consistency
[01:10:27] <grym> tunixman: dragon did/still does provide language packs for specific applications for their voice input software, which was mcmc based for ages.   Just, be careful not to speak to the oncology dragon language pack when you're dictating patient notes for cardiologists :)
[01:10:28] <tunixman> They were all the rage for mock horse_ebooks accounts on twitter awhile back too.
[01:10:38] <tunixman> hahahah!
[01:10:46] <tunixman> yeah seriously.
[01:11:11] <SnoopJ> Lots of the content on r/SubredditSimulator are simple Markov models, too
[01:11:13] <tunixman> cardiopulmonary metastasis of the third left ventricle electrode
[01:11:32] <tunixman> benign
[01:11:35] *** Quits: Adoi (~Adoi@user/adoi) (Ping timeout: 268 seconds)
[01:11:36] *** Quits: padraigd (~Thunderbi@c-73-48-132-102.hsd1.ca.comcast.net) (Ping timeout: 268 seconds)
[01:11:51] <SnoopJ> although that subreddit has the advantage of providing lots of domain-specific data for the exact task heh
[01:12:09] <tunixman> heh yeah, that's the key really.
[01:12:19] <tunixman> download the internet. train the model on it.
[01:12:22] <SnoopJ> this turns out to be the case for any architecture
[01:12:22] <Celelibi> SnoopJ, do you have an example of text generation task where a markov model produce something sensible?
[01:12:34] *** Quits: pragmaticenigma (~pragmatic@user/pragmaticenigma) (Quit: Leaving)
[01:12:38] <grym> tunixman: why yes, GPT3 is reddit in/reddit out; how'd you know? :)
[01:12:54] <grym> tunixman: cribbing penny arcade, "doctor GPT3 is not a real doctor; do not let him touch you"
[01:12:59] <SnoopJ> Celelibi, https://www.reddit.com/r/SubredditSimulator/
[01:13:00] <tunixman> not at liberty to say, sorry... ;)
[01:13:04] *** Joins: shabius (~shabius@2a0e:1c80:2:1021::1000)
[01:13:12] <tunixman> basically the story of my career.
[01:13:15] *** Joins: mekhami (~lawrence@135.84.115.18)
[01:13:21] <tunixman> but not for the obvious reasons.
[01:13:28] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Quit: ZNC 1.8.2 - https://znc.in)
[01:14:18] *** Quits: justinf210 (~justinf21@12.sub-97-44-0.myvzw.com) (Ping timeout: 272 seconds)
[01:14:28] <SnoopJ> Celelibi, for some value of sensible. I don't know how many models on that sub are n-gram models, but in general the more you keep track of, the higher the local consistency. Long-term consistency is not in general possible with them, you need something that is capable of closer grammar modeling
[01:14:39] *** Joins: Auron (Auron956@user/auron)
[01:15:14] *** Joins: TheHermann (~TheHerman@gateway/tor-sasl/thehermann)
[01:15:15] <Celelibi> SnoopJ, the more tokens you remember, the exponentially larger your dataset must be.
[01:15:19] <grym> learn you a language model en passant (and don't cop to it if you can help it) :)
[01:15:22] <SnoopJ> Celelibi, you're not wrong
[01:15:23] <Celelibi> If you want your statistics to be meaningful.
[01:15:35] <SnoopJ> I don't know what "your statistics" means in the first place
[01:15:53] <Celelibi> Markov Models are statistical models.
[01:16:21] <Celelibi> To train it you basically could the number of occurrence of each n-gram.
[01:16:33] *** Joins: gline_ (~yashi@p508be0b1.dip0.t-ipconnect.de)
[01:16:53] <grym> and then shake rapidly, repeat :)
[01:17:21] <SnoopJ> Celelibi, the Markov property is satisfied as long as something is memoryless. n-gram models use a wider "window"
[01:18:22] <Celelibi> Well, it's widely accepted that the Markov property doesn't hold for natural languages.
[01:18:30] *** Quits: CodeMouse92 (~CodeMouse@user/codemouse92) (Ping timeout: 272 seconds)
[01:18:41] <SnoopJ> Celelibi, what would it even mean for the Markov property to hold for something that isn't a stochastic process
[01:19:01] *** Quits: the_emperor (~the_emper@203.95.220.39) (Quit: Leaving)
[01:19:05] <Celelibi> You can see language as a stochastic process.
[01:19:25] <SnoopJ> That isn't really an answer to my question
[01:19:54] <SnoopJ> But I think we've drifted away from anything about Python here
[01:19:56] *** Quits: gline (~yashi@p508be03d.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[01:20:06] <Celelibi> True.
[01:20:14] *** Joins: pneff (~pneff@2a02:168:fedc:0:4961:9552:50a:6c11)
[01:20:37] *** Quits: nomic (~nomic@2a00:23c6:9910:1201:1ddf:df90:39d5:9eb3) (Quit: Leaving)
[01:20:39] <Celelibi> The thing I wanted to ask (about python) is if there's really some cases where the late binding is clearly useful.
[01:21:21] <Celelibi> Seems to me that most cases where it matters would prefer early binding.
[01:22:29] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[01:22:31] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Remote host closed the connection)
[01:22:44] *** Joins: alguien (~alguien@user/alguien)
[01:22:48] *** Quits: mkellis (~Calibellu@68.235.43.158) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[01:22:59] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[01:23:17] *** Joins: bxsx (~x@171.red-81-35-190.dynamicip.rima-tde.net)
[01:23:18] *** Quits: boxelephant (~boxelepha@209.143.87.130) (Ping timeout: 268 seconds)
[01:24:05] <bxsx> hm, does pyenv deactivate venv when leaving directory with .python-version set to the venv?
[01:24:18] *** Joins: mkellis (~Calibellu@68.235.43.134)
[01:25:24] <tunixman> t Celelibi the late binding thing really trips me up when I've been away for awhile, so I don't particularly like it.
[01:26:02] *** Quits: penguino (~mrpenguin@user/mrpenguin) (Remote host closed the connection)
[01:26:19] *** Joins: jdmark (~jdmark@172.58.172.59)
[01:26:35] <Celelibi> I guess hysterical raisins are always never outdated as well.
[01:26:55] <tunixman> But for things like mutually dependent functions, it's an okay way to handle it. You don't have to have every symbol defined when you're defining functions.
[01:28:21] *** Joins: justinf210 (~justinf21@192-230-160-245.3rivers.net)
[01:28:39] *** Quits: Laibsch (~leggewie@dynamic-002-243-019-213.2.243.pool.telefonica.de) (Quit: Leaving.)
[01:28:47] <Ronalds_Mazitis_> I'm back again
[01:28:48] *** Joins: bilegeek (~bilegeek@2600:1008:b015:3e96:6f34:1a42:6ac5:3b86)
[01:28:53] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Quit: ZNC 1.8.2 - https://znc.in)
[01:28:59] *** Joins: azazello (~azazello@109.75.158.195)
[01:29:12] <Celelibi> I'm not an expert on language theory, but maybe some kind of delayed early binding would work. -> If the name doesn't exist yet, delay its binding until you find one.
[01:29:13] *** Quits: LucaTM (~LucaTM@user/lucatm) (Quit: Textual IRC Client: www.textualapp.com)
[01:29:18] <Ronalds_Mazitis_> pyrsistent requires Python '>=3.5' but the running Python is 2.7.17
[01:29:24] <jiffe> eco/j curl
[01:29:35] <Ronalds_Mazitis_> google seems to not have answers on this issue
[01:29:36] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[01:29:51] <Ronalds_Mazitis_> I mean, it is common for versions to not match
[01:30:16] <Ronalds_Mazitis_> virtual environment such as pip should have some explanations on what to do
[01:30:17] *** Joins: Jin^eLD (~jin@45.62.236.211)
[01:30:21] <Ronalds_Mazitis_> with python versions
[01:30:27] <Celelibi> Ronalds_Mazitis_, who still uses python 2?
[01:30:32] <Ronalds_Mazitis_> idnk
[01:30:35] *** Joins: selimcan (~selimcan@178.204.250.156)
[01:30:38] *** Quits: szymon (~ugh@staticline-31-183-187-232.toya.net.pl) (Remote host closed the connection)
[01:30:39] <Ronalds_Mazitis_> it's there
[01:30:41] <Ronalds_Mazitis_> how do I upgrade
[01:30:42] <Ronalds_Mazitis_> ?
[01:30:51] <Celelibi> Depends on your system.
[01:30:58] *** Quits: GreenResponse (~tomek@r-45-155-148-237.gpon.bialnet.pl) (Quit: Leaving)
[01:31:03] <Ronalds_Mazitis_> pip install python3.5
[01:31:07] *** Quits: sudorm (~sudorm@2a01cb0083a9c100d8c6f179b25d8569.ipv6.abo.wanadoo.fr) (Quit: Leaving)
[01:31:13] <Ronalds_Mazitis_> I'm using ubuntu 18.04
[01:31:19] <matsaman> Ronalds_Mazitis_: what does 'python3 --version' say?
[01:31:20] <nedbat> Ronalds_Mazitis_: are you running in a virtualenv?  Did you make it?
[01:32:21] <Ronalds_Mazitis_> I just did pip install
[01:32:32] *** Quits: lazar (~lazar@user/lazar) (Quit: lazar)
[01:32:36] <matsaman> don't think anyone suggested that
[01:32:48] <Ronalds_Mazitis_> Python 3.6.9
[01:32:51] <Jin^eLD> hi, can anyone give me some hints regarding python extensions in C? I seem to miss something obvious; I am trying to implement a PyTypeObject.tp_str method which has a signature of PyObject *tp_str(PyObject *self); but in my __str__ function, how do I get from the generic PyObject to "my object" so that I can access the data fields of my custom object?
[01:33:06] <nedbat> Jin^eLD: you can cast it.
[01:33:11] *** Quits: pneff (~pneff@2a02:168:fedc:0:4961:9552:50a:6c11) (Ping timeout: 268 seconds)
[01:33:28] <matsaman> Ronalds_Mazitis_: okay, you can make a new virtual env with 'python3 -m venv new_venv_path_here'
[01:33:29] *** Quits: mekhami (~lawrence@135.84.115.18) (Quit: WeeChat 2.8)
[01:33:31] <Jin^eLD> nedbat: just like that, no Python API macros or whatever? did not hink it would be that easy :> lemme try
[01:33:48] <nedbat> Jin^eLD: though in my extension, I declared my self parameters as pointers to my type
[01:33:55] <matsaman> Ronalds_Mazitis_: 3.6.9 is greater than 3.5, so it should cover this particular constraint
[01:34:15] <SnoopJ> Jin^eLD, there are some macros for built-in types that may include sanity checks and the sort, but yea in general you're "just" holding pointers anyway.
[01:34:32] *** Quits: selimcan (~selimcan@178.204.250.156) (Client Quit)
[01:34:34] *** Quits: azazello (~azazello@109.75.158.195) (Ping timeout: 272 seconds)
[01:34:38] <SnoopJ> If you're not obligated to use Python.h directly though, it's much nicer to use something with less footgun potential, like CFFI.
[01:34:41] <Jin^eLD> SnoopJ: I was not able to find anything (which of course does not mean its not there)
[01:34:42] *** Quits: cheater (~Username@user/cheater) (Ping timeout: 265 seconds)
[01:34:45] *** Joins: kosh (~kosh@user/kosh)
[01:34:50] <nedbat> Jin^eLD: i often look at the CPython source to see what they do.  this is the tp_str for dates:  date_str(PyDateTime_Date *self)
[01:34:59] <nedbat> Jin^eLD: so they just declare it as their own type also.
[01:35:11] *** Joins: cheater (~Username@user/cheater)
[01:35:14] <ammar2> both are okay, that approach might lead to your compiler complaining about signatures
[01:35:18] <Jin^eLD> when I tried to declare the function with my type directly gcc did not like it
[01:35:27] <ammar2> unless you cast to (reprfunc) before setting tp_str
[01:35:33] <SnoopJ> Jin^eLD, yea, it can be a little bit of a scavenger hunt. What nedbat said about consulting the source is excellent advice in general when living this close to the implementation
[01:36:00] <nedbat> Jin^eLD: the date function I found is added to the struct as:    (reprfunc)date_str,                                 /* tp_str */
[01:36:01] <ammar2> like so: https://github.com/python/cpython/blob/bb3e0c240bc60fe08d332ff5955d54197f79751c/Objects/interpreteridobject.c#L237
[01:36:07] <Jin^eLD> I'll clone cpython, its a good hint indeed
[01:36:17] <ammar2> the alternative is to take a PyObject* as a param and then cast
[01:36:43] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Remote host closed the connection)
[01:37:06] <ammar2> also woo, PEP 657 got accepted!
[01:37:14] *** Quits: hyperknot (~hyperknot@dynamic-046-114-092-134.46.114.pool.telefonica.de) (Ping timeout: 252 seconds)
[01:37:18] *** Joins: cluelessperson (~cluelessp@user/cluelessperson)
[01:37:22] <SnoopJ> stuzzy :)
[01:37:36] *** Quits: justinf210 (~justinf21@192-230-160-245.3rivers.net) (Ping timeout: 265 seconds)
[01:37:54] <ammar2> time to get off my butt and help write tests ;_;
[01:38:25] <Jin^eLD> thanks guys, just casting did it :)
[01:38:46] *** Quits: jinsun_ (~jinsun_@user/jinsun) (Read error: Connection reset by peer)
[01:39:01] *** Joins: jinsun_ (~jinsun_@user/jinsun)
[01:39:02] <ammar2> Jin^eLD: if this isn't strictly for learning or you have some other constraints you might want to consider SnoopJ's advice on using a higher level api like cffi
[01:39:28] <ammar2> there's a lot more footguns like that lurking around the lower level CPython apis
[01:39:58] <Jin^eLD> I was a bit hesitant to take a detour via swig/cffi or similar
[01:40:13] *** Quits: redgloboli (~redglobol@user/redgloboli) (Read error: Connection reset by peer)
[01:40:24] <Jin^eLD> plus I'm not writing a standalone module, but embedding python into the app, not sure if cffi/swig target these scenarios too?
[01:40:31] *** Quits: especial (~especial@cm-84.214.207.74.getinternet.no) (Quit: Leaving)
[01:40:34] *** Quits: djapo (~archangel@user/djapo) (Ping timeout: 268 seconds)
[01:40:35] <SnoopJ> I would very much not recommend SWIG over more modern (and less hacked-together) alternatives, unless you are generating bindings for multiple target languages (and even then honestly)
[01:40:42] <ammar2> cffi can, not sure about swig
[01:40:44] *** Quits: qlixed (~qlixed@152.170.36.244) (Ping timeout: 250 seconds)
[01:41:26] *** Joins: redgloboli (~redglobol@user/redgloboli)
[01:41:29] <ammar2> SnoopJ: yeah auto generated bindings are so gross :|
[01:41:33] <Jin^eLD> I did look at the cffi docs and it kind of always suggested that you're working with shared libraries or alike
[01:42:05] *** Joins: hyperknot (~hyperknot@2a02:3033:408:c2f7:a9f5:2989:90fa:8206)
[01:42:09] <SnoopJ> You could definitely embed the module that SWIG produces (it's "just" C)
[01:42:16] *** Quits: Bronto22 (~mennoh@84-86-247-193.fixed.kpn.net) (Quit: Konversation terminated!)
[01:42:47] <ammar2> Jin^eLD: for embedding? I believe you can statically link it as well
[01:42:53] <SnoopJ> ammar2, I dunno if I'd go that far (cppyy seems excellent!) but SWIG is...well, it's a hack. It's a very clever hack, but this is not necessarily praise...
[01:43:51] <Jin^eLD> my scenario is an application taht does stuff, plus it allows the users to run their scripts to do even more custom stuff and there the app itself provides the interface/acts as a module, but the script is beinng run from within the app (i.e. embedded scenario)
[01:44:20] *** Joins: nomic (~nomic@2a00:23c6:9910:1201:1ddf:df90:39d5:9eb3)
[01:44:23] <Jin^eLD> I simply went with the embedding tutorial which seemed straightforward enough :)
[01:44:36] <Jin^eLD> it actually is working nicely
[01:45:14] *** Joins: pneff (~pneff@2a02:168:fedc:0:4961:9552:50a:6c11)
[01:45:15] <SnoopJ> Sounds a lot like what GIMP does
[01:45:23] <Jin^eLD> btw, PyUnicode_FromFormat() really does not know  %f for floats?
[01:45:25] <ammar2> yeah it's a common scenario
[01:45:47] <Jin^eLD> oh right, I should probably have a look at the gimp sources too
[01:46:56] <ammar2> Jin^eLD: you can just use %S for floats/PyFloatObject
[01:47:17] <ammar2> if you need more control over the decimals etc then consider calling into format itself
[01:47:57] <Jin^eLD> "calling into format itself" - could you be more precise?
[01:48:00] *** Quits: TheHermann (~TheHerman@gateway/tor-sasl/thehermann) (Remote host closed the connection)
[01:48:06] <Jin^eLD> I'm a noob on the python c API
[01:48:10] *** Joins: qlixed (~qlixed@152.170.36.244)
[01:48:14] <Jin^eLD> 2nd day of hacking ;)
[01:48:16] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[01:48:19] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Read error: Connection reset by peer)
[01:48:20] *** Joins: TheHermann (~TheHerman@gateway/tor-sasl/thehermann)
[01:48:32] <Ronalds_Mazitis_>   error: invalid command 'bdist_wheel'
[01:48:56] *** Quits: manti7 (~manti7@176.10.104.94) (Quit: WeeChat 3.1)
[01:49:48] <Jin^eLD> ammar2: I am trying to reproduce printf's "%15.6f", i.e. return that in a python string
[01:49:56] <Jin^eLD> i.e. from C to Python
[01:50:10] *** Quits: pneff (~pneff@2a02:168:fedc:0:4961:9552:50a:6c11) (Ping timeout: 272 seconds)
[01:50:57] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[01:51:37] *** Quits: derelict (~derelict@user/derelict) (Quit: WeeChat 3.2)
[01:52:15] *** Quits: monkey_ (~user@190.104.116.134) (Remote host closed the connection)
[01:52:54] *** Quits: hyperknot (~hyperknot@2a02:3033:408:c2f7:a9f5:2989:90fa:8206) (Ping timeout: 268 seconds)
[01:54:37] *** Joins: boxelephant (~boxelepha@d192-24-108-69.col.wideopenwest.com)
[01:55:00] <ammar2> Jin^eLD: simplified it would probably be PyUnicode_Format(PyUnicode_FromString("%15.6f"), float_object);
[01:55:05] *** Quits: jinsun_ (~jinsun_@user/jinsun) (Remote host closed the connection)
[01:55:14] <ammar2> Jin^eLD: but this is going to leak a reference
[01:55:36] <Jin^eLD> ah, right, read about that, so I need to wrap stuff around and decref etc
[01:55:40] <Jin^eLD> but i think I get the idea
[01:55:41] <ammar2> if you were using cffi this would be as simple as just '%15.6f' % x ;)
[01:56:05] <Jin^eLD> mhhh :) tempting, perhaps i should look into a cffi tutorial after all
[01:56:32] *** Joins: hyperknot (~hyperknot@2a02:3033:406:c213:1d19:6ce6:ebff:35eb)
[01:58:00] *** Joins: chronon (~chronon@user/chronon)
[01:58:24] <ammar2> https://cffi.readthedocs.io/en/latest/embedding.html
[01:58:35] <ammar2> have fun, it's a lot easier to pick up than the CPython api in my opinion
[01:59:14] *** Quits: boxelephant (~boxelepha@d192-24-108-69.col.wideopenwest.com) (Ping timeout: 252 seconds)
[01:59:18] <Jin^eLD> well, "problem" is that I am quite far into cpython already, but I guess in the long run cffi may save me some time after all, will check it out, thx for the hint
[02:00:20] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Ping timeout: 252 seconds)
[02:00:26] *** Quits: blindguard (~blindguar@2a02:908:1864:c200::4ec1) (Quit: Konversation terminated!)
[02:01:01] * bxsx is looking for someone with pyenv installed
[02:01:19] <ammar2> yeah that's a common problem, I think habnabit_ has brought this up before too. https://docs.python.org/3/extending/index.html should probably emphasize the advantages of the higher-level library based approaches more
[02:01:23] *** Quits: chronon (~chronon@user/chronon) (Client Quit)
[02:01:23] *** Joins: MrFantastik (~Thunderbi@cpe-69-204-101-67.buffalo.res.rr.com)
[02:01:42] *** Joins: pneff (~pneff@2a02:168:fedc:0:4961:9552:50a:6c11)
[02:01:53] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[02:01:54] *** Quits: hegstal (~hegstal@2a02:c7f:7604:8a00:ac06:25a4:7233:bcc6) (Remote host closed the connection)
[02:02:16] <Jin^eLD> ammar2: well, the docs did strongly hint to look at higher level libs, but when you are starting you usually do not trust any "third party stuff" and prefer to go with the original
[02:02:47] <Jin^eLD> and I did work on a project that used SWIG, I wasn't directly involved but it look horrible :)
[02:02:50] *** Joins: chronon (~chronon@user/chronon)
[02:02:52] *** Quits: Pickchea (~private@user/pickchea) (Quit: Leaving)
[02:02:58] <Jin^eLD> *looked
[02:03:48] <SnoopJ> bxsx, pyenv's shims consult .python-version when you run commands that it shims. It doesn't do any virtualenv management at all. If you want to (de)activate virtualenvs based on entering/leaving a directory, I recommend direnv, which has a good pyenv integration on their wiki.
[02:04:42] *** Quits: shibboleth (~shibbolet@gateway/tor-sasl/shibboleth) (Quit: shibboleth)
[02:04:55] *** Joins: srhm (~ascii@user/srhm)
[02:05:00] *** Joins: especial (~especial@2a0a:51c0:0:1f:67a7::2)
[02:05:24] <bxsx> SnoopJ: this is what i would expect, but then I checked README.md and: If eval "$(pyenv virtualenv-init -)" is configured in your shell, pyenv-virtualenv will automatically activate/deactivate virtualenvs on entering/leaving directories which contain a .python-version file that contains the name of a valid virtual environment as shown in the output of pyenv virtualenvs (e.g., venv34 or 3.4.3/envs/venv34 in
[02:05:30] <bxsx> example above).
[02:05:35] *** Quits: shabius (~shabius@2a0e:1c80:2:1021::1000) (Read error: Connection reset by peer)
[02:05:36] <SnoopJ> bxsx, pyenv-virtualenv is not pyenv
[02:06:05] *** Quits: fedenix (~fedenix@gateway/tor-sasl/fedenix) (Remote host closed the connection)
[02:06:14] <SnoopJ> Not sure about its behavior apropos of your original question; I assumed you were asking about 'vanilla' pyenv
[02:06:18] *** Quits: pneff (~pneff@2a02:168:fedc:0:4961:9552:50a:6c11) (Ping timeout: 250 seconds)
[02:06:47] <SnoopJ> Does seem that that readme is saying it can deactivate automagically for you
[02:06:54] <bxsx> SnoopJ: i use pyenv + pyenv-virtualenv
[02:07:06] *** Quits: Lauxley (~lauxley@2a01:e34:ec55:2700:a596:168e:4b57:f991) (Ping timeout: 268 seconds)
[02:07:22] <SnoopJ> bxsx, now we know
[02:07:30] <bxsx> SnoopJ: no? "(..) will automatically deactivate virtualenvs on leaving directories...(..)"
[02:07:56] <SnoopJ> bxsx, not sure what that "no?" is in reply to, because that quote says the same thing I did...
[02:08:03] <SnoopJ> (which is why *I* said it)
[02:08:11] *** Joins: audio (~audio@2603-8081-1800-eb5b-f4a2-2347-4507-53d6.res6.spectrum.com)
[02:08:19] <bxsx> SnoopJ: sorry, i misread your answer
[02:08:58] *** Joins: akmod (~akmod@c-24-10-154-68.hsd1.ut.comcast.net)
[02:10:10] *** Quits: hyperknot (~hyperknot@2a02:3033:406:c213:1d19:6ce6:ebff:35eb) (Ping timeout: 268 seconds)
[02:10:51] *** Joins: justinf210 (~justinf21@192-230-160-245.3rivers.net)
[02:11:06] *** Quits: ST47 (~ST47@user/st47) (Ping timeout: 240 seconds)
[02:11:07] <cliluw> What architectures does CPython support? Is ARM supported? How about RISC-V?
[02:11:57] <BtbN> Anything with a C compiler pretty much, as the name suggests.
[02:12:01] *** Quits: Gurkenglas (~Gurkengla@dslb-002-203-144-156.002.203.pools.vodafone-ip.de) (Remote host closed the connection)
[02:12:02] <roxfan> https://www.python.org/download/other/
[02:12:16] <roxfan> (and that's just the official builds)
[02:12:23] *** Joins: Gurkenglas (~Gurkengla@dslb-002-203-144-156.002.203.pools.vodafone-ip.de)
[02:12:33] *** Quits: glumanda (~manu@194-208-201-025.tele.net) (Ping timeout: 258 seconds)
[02:13:28] <roxfan> https://github.com/sipeed/MaixPy RISC-V
[02:13:29] <bjs> cliluw: the code is fairly architecture-agnostic and should work on most things.  Python is fairly popular on the raspberry pi for example
[02:13:30] *** Joins: drincruz (~drincruz@ec2-18-235-23-153.compute-1.amazonaws.com)
[02:13:45] *** Joins: pnoud (~pnoud@user/pnoud)
[02:13:46] *** Joins: ctrypoph_ (~ctrypoph@172.58.187.101)
[02:13:52] *** Quits: RoyK (~roy@user/royk) (Remote host closed the connection)
[02:14:40] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[02:14:41] <Lvl4Sword> Trying to piece together why create_all() doesn't work with Flask. Is there an easy way to debug here? Never bumped into this.
[02:14:53] *** Quits: rendar (~rendar@user/rendar) ()
[02:15:24] *** Quits: kosh (~kosh@user/kosh) (Ping timeout: 250 seconds)
[02:15:30] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Quit: ZNC 1.8.2 - https://znc.in)
[02:15:43] *** Quits: srhm (~ascii@user/srhm) (Ping timeout: 268 seconds)
[02:15:44] *** Quits: justinf210 (~justinf21@192-230-160-245.3rivers.net) (Ping timeout: 272 seconds)
[02:15:50] *** Joins: derelict (~derelict@user/derelict)
[02:15:56] *** Joins: gline (~yashi@p508be470.dip0.t-ipconnect.de)
[02:15:58] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[02:16:16] <ammar2> roxfan: just a note, that project uses micropython not CPython
[02:16:20] *** Quits: ctrypoph (~ctrypoph@99-51-11-77.lightspeed.brhmmi.sbcglobal.net) (Ping timeout: 268 seconds)
[02:16:23] *** Quits: drincruz_ (~drincruz@ool-44c748be.dyn.optonline.net) (Ping timeout: 258 seconds)
[02:16:30] *** Quits: especial (~especial@2a0a:51c0:0:1f:67a7::2) (Quit: WeeChat 2.8)
[02:16:39] *** Joins: fcjsx (~fcjsx@2800:a4:801:8b00:e360:a379:f9b8:5ea5)
[02:16:48] <roxfan> indeed
[02:16:56] *** Quits: fcjsx (~fcjsx@2800:a4:801:8b00:e360:a379:f9b8:5ea5) (Remote host closed the connection)
[02:17:33] <roxfan> https://riscv.org/blog/2015/01/a-linux-distribution-for-risc-v/ claims to have Python
[02:17:43] *** Quits: Gurkenglas (~Gurkengla@dslb-002-203-144-156.002.203.pools.vodafone-ip.de) (Ping timeout: 265 seconds)
[02:18:14] *** Joins: pneff (~pneff@2a02:168:fedc:0:4961:9552:50a:6c11)
[02:18:35] *** Quits: kostkon_ (~kostkon@2a02:587:a100:18e:9fe3:794:a225:7cdb) (Remote host closed the connection)
[02:18:41] *** Quits: pnoud (~pnoud@user/pnoud) (Ping timeout: 265 seconds)
[02:18:48] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Excess Flood)
[02:18:49] *** Joins: kostkon_ (~kostkon@2a02:587:a100:18e:9fe3:794:a225:7cdb)
[02:19:06] *** Joins: RoyK (~roy@user/royk)
[02:19:11] *** Joins: fcjsx (~fcjsx@2800:a4:801:8b00:e360:a379:f9b8:5ea5)
[02:19:12] *** Quits: fcjsx (~fcjsx@2800:a4:801:8b00:e360:a379:f9b8:5ea5) (Remote host closed the connection)
[02:19:14] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[02:19:29] <SnoopJ> There's also MicroPython :)
[02:19:32] *** Quits: gline_ (~yashi@p508be0b1.dip0.t-ipconnect.de) (Ping timeout: 272 seconds)
[02:19:46] *** Joins: hyperknot (~hyperknot@dynamic-046-114-094-105.46.114.pool.telefonica.de)
[02:20:40] *** Quits: Batzy (~Batzy@user/batzy) (Quit: lata)
[02:20:44] *** Joins: blackout69 (~blackout6@net-31-156-121-196.cust.vodafonedsl.it)
[02:20:48] *** Quits: JavaBean (~JavaBean@user/javabean) (Ping timeout: 272 seconds)
[02:21:22] *** Quits: redgloboli (~redglobol@user/redgloboli) (Ping timeout: 258 seconds)
[02:21:40] *** Joins: srhm (~ascii@user/srhm)
[02:22:00] *** Quits: jmcantrell (~weechat@user/jmcantrell) (Quit: WeeChat 3.2)
[02:22:04] *** Quits: nubonix (uid492751@id-492751.charlton.irccloud.com) (Quit: Connection closed for inactivity)
[02:22:06] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[02:22:39] *** Joins: Gustavo6046_ (~Gustavo60@user/gustavo6046)
[02:22:46] *** Quits: pneff (~pneff@2a02:168:fedc:0:4961:9552:50a:6c11) (Ping timeout: 250 seconds)
[02:22:51] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Read error: Connection reset by peer)
[02:22:53] <ammar2> oh, looks like debian already has cpython packages for riscv64 in unstable and experimental https://packages.debian.org/search?keywords=python3
[02:23:24] *** Joins: patthoyts (~pat@2001:470:1f1d:26c:b866:b2c4:f95a:c741)
[02:24:06] *** Parts: patthoyts (~pat@2001:470:1f1d:26c:b866:b2c4:f95a:c741) ()
[02:25:15] *** Gustavo6046_ is now known as Gustavo6046
[02:25:38] *** Quits: Lando-SpacePimp (~LandoC@user/lando-spacepimp) (Ping timeout: 252 seconds)
[02:25:50] *** Quits: dicajo (~dicajo@072-186-122-186.res.spectrum.com) (Quit: WeeChat 2.3)
[02:26:08] *** Quits: Akuli (~Akuli@87-94-110-84.bb.dnainternet.fi) (Quit: Leaving)
[02:26:12] *** Joins: shabius (~shabius@2a0e:1c80:2:1022::1004)
[02:26:12] *** Quits: mixfix41 (~homefame@user/mixfix41) (Ping timeout: 268 seconds)
[02:27:37] *** Joins: p-i-_ (~Ohmu@113.53.167.81)
[02:27:56] *** Joins: mixfix41 (~homefame@user/mixfix41)
[02:28:25] *** Joins: kostkon__ (~kostkon@2a02:587:a100:18e:9fe3:794:a225:7cdb)
[02:29:15] *** Quits: bxsx (~x@171.red-81-35-190.dynamicip.rima-tde.net) (Quit: leaving)
[02:29:18] *** Quits: p-i- (~Ohmu@125.25.117.240) (Ping timeout: 252 seconds)
[02:29:19] *** Quits: Narrat (~omnius@p200300df5f3a682506ea56fffe2e7cdc.dip0.t-ipconnect.de) (Quit: They say a little knowledge is a dangerous thing, but it's not one half so bad as a lot of ignorance.)
[02:30:21] *** Quits: palasso (~palasso@user/palasso) (Remote host closed the connection)
[02:31:31] *** audio is now known as audiocat
[02:31:43] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Ping timeout: 258 seconds)
[02:31:59] *** Quits: sybariten (~jake@78-47-86-21.cinfuserver.com) (Quit: WeeChat 2.8)
[02:32:17] <Jin^eLD> hmm, does anyone remember any projects using autotools and cffi? I wonder how the integration looks like since cffi is just a python module
[02:32:31] *** Quits: kostkon__ (~kostkon@2a02:587:a100:18e:9fe3:794:a225:7cdb) (Remote host closed the connection)
[02:32:49] *** Joins: kostkon__ (~kostkon@2a02:587:a100:18e:9fe3:794:a225:7cdb)
[02:32:59] *** Quits: kostkon_ (~kostkon@2a02:587:a100:18e:9fe3:794:a225:7cdb) (Ping timeout: 268 seconds)
[02:33:11] *** Joins: dustiestgolf (~spectruml@secure-wireless-nat-19-240.msu.montana.edu)
[02:33:27] *** Quits: TheHermann (~TheHerman@gateway/tor-sasl/thehermann) (Remote host closed the connection)
[02:33:33] <dustiestgolf>  hello! I am having some trouble packaging a little python library. I have followed the setuptools quickstart and when i do a local pip install it says it is successful, however the module name is not recognized once in a python terminal. I am doing this in a clean miniconda environment. any help greatly appreciated,thanks in advance
[02:33:41] <dustiestgolf> i followed the instructions with setup.cfg and pyproject.toml if that helps
[02:33:53] *** Joins: TheHermann (~TheHerman@gateway/tor-sasl/thehermann)
[02:34:01] *** Joins: pneff (~pneff@2a02:168:fedc:0:4961:9552:50a:6c11)
[02:34:13] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[02:34:22] *** Joins: JavaBean (~JavaBean@user/javabean)
[02:34:23] *** Quits: cedric (~cedric@2a01:cb11:867:c200:948b:c317:6c54:8b43) (Quit: Konversation terminated!)
[02:36:34] <roxfan> try a normal python first, anaconda env can get pretty weird
[02:38:29] *** Quits: kostkon__ (~kostkon@2a02:587:a100:18e:9fe3:794:a225:7cdb) (Read error: Connection reset by peer)
[02:38:32] *** Quits: srhm (~ascii@user/srhm) (Ping timeout: 268 seconds)
[02:38:43] *** Quits: upsala (~zcb@185.213.155.160) (Quit: WeeChat 3.2)
[02:38:49] *** Joins: kostkon__ (~kostkon@2a02:587:a100:18e:9fe3:794:a225:7cdb)
[02:43:08] *** Quits: pneff (~pneff@2a02:168:fedc:0:4961:9552:50a:6c11) (Ping timeout: 250 seconds)
[02:43:29] *** Joins: aGNU (~aGNU@p200300d51f353200044a27668a75034e.dip0.t-ipconnect.de)
[02:44:59] *** Joins: pneff (~pneff@2a02:168:fedc:0:4961:9552:50a:6c11)
[02:45:16] *** Joins: pnoud (~pnoud@user/pnoud)
[02:47:57] <aGNU> Hey there, I have a question regarding pathlib. I'm trying to get a list of all files of a specific type in a directory. So I'm using rglob. (path.rglob("*.py")) but instead of writing PosixPaths into the list it fills it with Generator-objects?
[02:49:10] <bjs> aGNU: you mean it's giving you multiple generator objects?
[02:49:25] *** Quits: darksun (~darksun@user/darksun) (Quit: leaving)
[02:49:32] <aGNU> hm..no just tested it, it's a single generator object
[02:49:51] <bjs> aGNU: sure,  what's the problem?
[02:50:03] <bjs> if you want you can turn it into a list:   `list(path.rglob(...))`
[02:50:52] *** Quits: pneff (~pneff@2a02:168:fedc:0:4961:9552:50a:6c11) (Ping timeout: 268 seconds)
[02:51:00] <aGNU> bjs ohh that worked, thank you very much! I used  "  [path.rglob(...))] " instead
[02:51:51] <dustiestgolf> roxfan ill give that a shot, thanks!
[02:52:40] *** Quits: ctrypoph_ (~ctrypoph@172.58.187.101) (Read error: Connection reset by peer)
[02:52:47] *** Quits: nomic (~nomic@2a00:23c6:9910:1201:1ddf:df90:39d5:9eb3) (Quit: Leaving)
[02:52:55] *** Joins: akk (~akk@174-28-112-132.albq.qwest.net)
[02:53:10] *** Joins: nomic (~nomic@2a00:23c6:9910:1201:1ddf:df90:39d5:9eb3)
[02:53:22] *** Quits: jdmark (~jdmark@172.58.172.59) (Read error: Connection reset by peer)
[02:53:39] *** Joins: gline_ (~yashi@p508be605.dip0.t-ipconnect.de)
[02:53:41] *** Joins: ctrypoph (~ctrypoph@2600:1702:3000:9090:6d7f:1c9d:1aea:24aa)
[02:53:43] *** Joins: jdmark (~jdmark@67.8.137.130)
[02:54:40] *** Parts: blackout69 (~blackout6@net-31-156-121-196.cust.vodafonedsl.it) ()
[02:54:59] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Remote host closed the connection)
[02:55:29] *** Quits: plastico (~plastico@2001:8a0:de6b:1a00:9d14:766e:70a8:dcea) (Quit: WeeChat 3.2)
[02:55:48] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[02:55:54] *** Quits: Nact (~l@host-85-27-126-227.dynamic.voo.be) (Quit: Konversation terminated!)
[02:56:17] *** Joins: ctrypoph_ (~ctrypoph@172.58.187.101)
[02:56:25] *** Quits: mexen (uid495612@user/mexen) ()
[02:56:37] *** Joins: gggp (~textual@60.10.194.47)
[02:56:54] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 272 seconds)
[02:57:00] *** Quits: aGNU (~aGNU@p200300d51f353200044a27668a75034e.dip0.t-ipconnect.de) (Quit: Client closed)
[02:57:10] *** Quits: Seiryuu (~Seiryuu@ip174-103-176-143.adsl2.static.versatel.nl) (Quit: Leaving)
[02:57:21] *** Quits: gline (~yashi@p508be470.dip0.t-ipconnect.de) (Ping timeout: 265 seconds)
[02:58:17] *** Quits: ctrypoph (~ctrypoph@2600:1702:3000:9090:6d7f:1c9d:1aea:24aa) (Ping timeout: 268 seconds)
[03:00:07] *** Quits: qlixed (~qlixed@152.170.36.244) (Ping timeout: 268 seconds)
[03:00:23] *** Quits: ctrypoph_ (~ctrypoph@172.58.187.101) (Read error: Connection reset by peer)
[03:00:26] *** Joins: Lando-SpacePimp (~LandoC@user/lando-spacepimp)
[03:00:45] *** Quits: bungle (~bungle@77-147-16-94.dyn.cable.fcom.ch) (Ping timeout: 268 seconds)
[03:00:55] *** Joins: ctrypoph (~ctrypoph@99-51-11-77.lightspeed.brhmmi.sbcglobal.net)
[03:02:32] *** Quits: bilb_ono (~alexmarsh@pool-96-250-84-46.nycmny.fios.verizon.net) (Quit: bilb_ono)
[03:02:35] *** Joins: pneff (~pneff@2a02:168:fedc:0:4961:9552:50a:6c11)
[03:03:12] <lavadonut> https://matplotlib.org/stable/gallery/subplots_axes_and_figures/subplots_demo.html
[03:03:29] <lavadonut> under "Stacking subplots in two directions", how do i make the two "y-label"s different?
[03:04:47] *** Joins: greedom (~greedom@2001:16b8:32d0:b400:22d1:c4b6:997b:9c6)
[03:04:50] *** Quits: maxtim (~maxtim@c-71-228-128-153.hsd1.ga.comcast.net) (Read error: Connection reset by peer)
[03:05:18] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Quit: ZNC 1.8.2 - https://znc.in)
[03:06:09] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[03:06:58] *** Quits: pneff (~pneff@2a02:168:fedc:0:4961:9552:50a:6c11) (Ping timeout: 250 seconds)
[03:07:25] *** Joins: drincruz_ (~drincruz@ool-44c748be.dyn.optonline.net)
[03:07:31] *** Quits: drincruz (~drincruz@ec2-18-235-23-153.compute-1.amazonaws.com) (Read error: Connection reset by peer)
[03:09:39] *** Joins: penguino (~mrpenguin@user/mrpenguin)
[03:11:34] *** Joins: boxelephant (~boxelepha@d192-24-108-69.col.wideopenwest.com)
[03:11:57] *** Joins: srhm (~ascii@user/srhm)
[03:12:08] *** Quits: semanticz0 (~semanticz@202.164.136.255) (Ping timeout: 268 seconds)
[03:15:34] *** Quits: humanbird (~humanBird@2603-8001-7003-5966-75c9-43c6-fd77-9901.res6.spectrum.com) (Quit: Client closed)
[03:16:27] *** Quits: ntdll (~ntdll@user/ntdll) (Ping timeout: 268 seconds)
[03:17:11] *** Quits: srhm (~ascii@user/srhm) (Read error: Connection reset by peer)
[03:17:42] *** Quits: drincruz_ (~drincruz@ool-44c748be.dyn.optonline.net) (Ping timeout: 252 seconds)
[03:18:21] *** Joins: pneff (~pneff@2a02:168:fedc:0:4961:9552:50a:6c11)
[03:19:49] *** Joins: RangerBobVA (~bmaddox@user/rangerbobva)
[03:20:06] <habnabit_> Jin^eLD, yes, use cffi for embedding. its embedding interface is _FAR_ better than anything Python.h provides
[03:20:27] <habnabit_> Jin^eLD, what are you using autotools for?
[03:22:33] *** Quits: omegatron (~some@p5b056bc7.dip0.t-ipconnect.de) (Quit: What happened? You quit!)
[03:22:56] *** Quits: boxelephant (~boxelepha@d192-24-108-69.col.wideopenwest.com) (Ping timeout: 268 seconds)
[03:23:14] *** Quits: ponadm_ (pony@gateway/vpn/protonvpn/ponadm) (Ping timeout: 268 seconds)
[03:23:17] *** Quits: Socra (~Socra@206.217.216.27) (Ping timeout: 268 seconds)
[03:23:33] *** Quits: pneff (~pneff@2a02:168:fedc:0:4961:9552:50a:6c11) (Ping timeout: 268 seconds)
[03:24:10] *** Quits: ______GOD______ (~GOD@user/god/x-9778998) (Quit: Turning off a portion of this simulation.)
[03:24:14] *** Joins: ulu_ulu (~ulu@user/ulu)
[03:24:26] *** Joins: patthoyts (~pat@2001:470:1f1d:26c:b866:b2c4:f95a:c741)
[03:24:40] *** Quits: ulu (~ulu@user/ulu) (Read error: Connection reset by peer)
[03:24:46] *** Quits: akaWolf (~akaWolf@akawolf.org) (Ping timeout: 272 seconds)
[03:25:12] *** Joins: elena (~elena@202-153-212-80.ca99d4.syd.static.aussiebb.net)
[03:25:32] *** Joins: padraigd (~Thunderbi@c-73-48-132-102.hsd1.ca.comcast.net)
[03:25:57] *** Parts: patthoyts (~pat@2001:470:1f1d:26c:b866:b2c4:f95a:c741) ()
[03:26:01] *** Quits: alguien (~alguien@user/alguien) (Ping timeout: 268 seconds)
[03:26:15] *** Joins: patthoyts (~pat@2001:470:1f1d:26c:b866:b2c4:f95a:c741)
[03:26:18] *** Quits: yemel (~yemel@user/yemel) (Quit: Goodbye!)
[03:27:14] *** Joins: akaWolf (~akaWolf@akawolf.org)
[03:28:00] *** Joins: yemel (~yemel@user/yemel)
[03:28:10] *** Quits: Helle (~helle@80-100-16-232.ip.xs4all.nl) (Ping timeout: 244 seconds)
[03:28:44] *** Joins: Helle (~helle@80-100-16-232.ip.xs4all.nl)
[03:29:04] *** Quits: Celeo (~Celeo@user/celeo) (Read error: Connection reset by peer)
[03:30:10] *** Quits: dustiestgolf (~spectruml@secure-wireless-nat-19-240.msu.montana.edu) (Quit: Leaving)
[03:30:24] *** Quits: bilegeek (~bilegeek@2600:1008:b015:3e96:6f34:1a42:6ac5:3b86) (Quit: Leaving)
[03:31:06] *** Joins: Gustavo6046_ (~Gustavo60@user/gustavo6046)
[03:32:08] <dale> Poetry question, if you don't mind: Would I be correct in saying that there's no point in listing a normal dependency a dev dependency as well?
[03:32:31] <habnabit_> dale, unless there was something different about it (extras, tighter version requirement) then no
[03:32:36] <dale> habnabit_: Gracias
[03:33:34] *** Joins: Wulf4 (~Wulf@user/wulf)
[03:33:54] <dale> Hm, just noticed we have one dev dependency with a newer version than the "regular" dependency, that seems like it's probably a bad idea.
[03:34:02] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Ping timeout: 272 seconds)
[03:34:08] <habnabit_> dale, that does seem off
[03:34:13] *** Gustavo6046_ is now known as Gustavo6046
[03:34:29] <tm007> bad idea indeed
[03:34:30] <catern> would anyone take a look at an article I'm writing about a distributed systems library? in PM, since it's still a draft
[03:34:51] <tm007> I'd be glad.
[03:35:02] <tm007> Been working on distributed systems for a while now
[03:36:16] *** Joins: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com)
[03:36:19] *** Joins: pneff (~pneff@2a02:168:fedc:0:4961:9552:50a:6c11)
[03:37:26] *** Quits: Wulf (~Wulf@user/wulf) (Ping timeout: 272 seconds)
[03:37:26] *** Wulf4 is now known as Wulf
[03:37:35] <catern> thanks, PM'd
[03:37:57] *** Quits: ham (~ham4@user/ham) (Ping timeout: 265 seconds)
[03:43:07] *** Joins: ______GOD______ (~GOD@user/god/x-9778998)
[03:43:26] <Jin^eLD> habnabit_: well - for compiling my C application (the one where python scripts will be embedded into)
[03:43:38] *** Joins: cjb (~cjb@user/cjb)
[03:43:41] <nomic> z.
[03:43:44] *** Quits: matsaman (~matsaman@user/matsaman) (Quit: leaving)
[03:44:01] <Jin^eLD> habnabit_: including cross compiling support since it will be running on ARM
[03:44:15] <habnabit_> Jin^eLD, okay. you don't need that for compiling the python bindings part, though. cffi embedding means you get a .h file and a shared library, then you link it like any other foreign library
[03:44:37] <habnabit_> Jin^eLD, so the autotools part doesn't touch the cffi part except indirectly
[03:44:43] <Jin^eLD> habnabit_: I'd like to link the resulting cffi .c source into my app to avoid dlopen and friends
[03:45:23] <habnabit_> Jin^eLD, i'm not sure what dlopen has to do with it? you get a libwhatever.so out of cffi and you run clang -lwhatever
[03:45:48] *** Joins: bigRoo (~user@131.236.54.84)
[03:46:01] *** Quits: hyperknot (~hyperknot@dynamic-046-114-094-105.46.114.pool.telefonica.de) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[03:46:03] <Jin^eLD> oh, you mean the app links to the resulting shared lib? somehow the examples made me believe that then inside python you load the shared lib somehow and then use it
[03:46:22] <habnabit_> Jin^eLD, that's one of the ways for the _extending_ interface, sure, but not _embedding_
[03:46:28] <Jin^eLD> aha
[03:46:35] *** Joins: justinf210 (~justinf21@192-230-160-245.3rivers.net)
[03:47:37] *** Quits: rinzewind (~rinzewind@user/rinzewind) (Ping timeout: 265 seconds)
[03:47:39] <habnabit_> Jin^eLD, the cffi docs aren't always the clearest, but i'm quite familiar and around often
[03:47:45] <Jin^eLD> I looked at some tutorials, but got somewhat confused; so you write a header file (where you are not supposed to use anything that starts with # ?) and then you feed that header to cffi which will generate bindings for those functions and then on top of that you need to write some glue layer in Python to marry the two?
[03:48:46] <Jin^eLD> header file as in - .c header
[03:49:01] *** Quits: P1RATEZ (piratez@user/p1ratez) ()
[03:49:28] *** Quits: pnoud (~pnoud@user/pnoud) (Ping timeout: 272 seconds)
[03:49:59] <habnabit_> Jin^eLD, the cdef can't use #include, which might be what you're thinking of. a cdef uses C-like syntax but is more specific to cffi in that it allows you to indicate things like "i don't know what the precise ABI of this struct is but i still want to use it". it usually can be copy-pasted pretty directly from a header
[03:50:48] <habnabit_> Jin^eLD, but a cdef can have #defines in it which get loaded as normal ordinal values in the lib object
[03:50:52] *** Quits: rmm2 (~rob@user/rmm) (Remote host closed the connection)
[03:51:22] *** Quits: gggp (~textual@60.10.194.47) (Ping timeout: 272 seconds)
[03:51:41] *** Quits: MikZyth (~MikZyth@188.65.242.79) (Quit: WeeChat 3.1)
[03:51:55] *** Quits: pneff (~pneff@2a02:168:fedc:0:4961:9552:50a:6c11) (Ping timeout: 268 seconds)
[03:52:00] <habnabit_> Jin^eLD, for embedding, you'll probably have some `extern "Python"` functions that you use as something like glue yes
[03:54:58] *** Joins: viktorivan (~ivan@187.223.237.71)
[03:56:26] *** Quits: justinf210 (~justinf21@192-230-160-245.3rivers.net) (Ping timeout: 272 seconds)
[03:56:55] *** Quits: dba (uid502594@id-502594.stonehaven.irccloud.com) (Quit: Connection closed for inactivity)
[03:58:38] *** Quits: zeenk (~zeenk@2a02:2f04:a106:9600:82fb:aed9:ca9:38d3) (Quit: Konversation terminated!)
[04:02:13] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Remote host closed the connection)
[04:02:49] *** Joins: justinf210 (~justinf21@192-230-160-245.3rivers.net)
[04:03:16] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[04:03:33] *** Joins: pneff (~pneff@2a02:168:fedc:0:4961:9552:50a:6c11)
[04:04:30] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Ping timeout: 244 seconds)
[04:05:14] <Jin^eLD> I guess I'll have to work through some examples to get the idea of how it works; but it sounds as if a lot of glueing is needed.. right now I have quite a direct implementation in the app itself
[04:06:15] *** Quits: kantlivelong (~kantlivel@cpe-67-250-125-43.hvc.res.rr.com) (Remote host closed the connection)
[04:07:16] *** Joins: ham (~ham4@user/ham)
[04:07:49] *** Joins: drincruz_ (~drincruz@ool-44c748be.dyn.optonline.net)
[04:08:09] *** Quits: Tritium (~tritium@toxin.sdamon.com) (Ping timeout: 244 seconds)
[04:08:27] *** Joins: kantlivelong (~kantlivel@cpe-67-250-125-43.hvc.res.rr.com)
[04:08:34] *** Quits: pneff (~pneff@2a02:168:fedc:0:4961:9552:50a:6c11) (Ping timeout: 268 seconds)
[04:08:44] *** Quits: zaquest (~notzaques@5.128.210.178) (Remote host closed the connection)
[04:09:10] *** Joins: Tritium (~tritium@toxin.sdamon.com)
[04:09:48] *** Quits: justinf210 (~justinf21@192-230-160-245.3rivers.net) (Ping timeout: 268 seconds)
[04:09:51] *** Quits: lukka5 (~lukka5@246-60-231-201.fibertel.com.ar) (Ping timeout: 265 seconds)
[04:10:21] *** Joins: gr33n7007h (~gr33n7007@user/gr33n7007h)
[04:12:11] *** Joins: justinf210 (~justinf21@192-230-160-245.3rivers.net)
[04:13:43] *** Quits: ham (~ham4@user/ham) (Ping timeout: 265 seconds)
[04:13:58] *** Quits: TheRAt (~TheRAt@user/therat) (Read error: Connection reset by peer)
[04:14:03] *** Quits: female_student_4 (~female_st@2a01:388:243:150::1:51) (Quit: Client closed)
[04:14:59] *** Joins: female_student_4 (~female_st@2a01:388:243:150::1:51)
[04:15:15] *** Joins: djapo (~archangel@user/djapo)
[04:16:24] *** Joins: zaquest (~notzaques@5.128.210.178)
[04:16:30] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Quit: ZNC 1.8.2 - https://znc.in)
[04:16:42] *** Quits: justinf210 (~justinf21@192-230-160-245.3rivers.net) (Ping timeout: 272 seconds)
[04:16:55] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[04:16:59] *** Joins: justinf210 (~justinf21@4.sub-97-44-1.myvzw.com)
[04:18:28] *** Quits: emerent (~quassel@p200300cd5703bba5ba27ebfffed28a59.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[04:19:32] *** Joins: emerent (~quassel@p200300cd5703bb9dba27ebfffed28a59.dip0.t-ipconnect.de)
[04:20:05] *** Joins: pneff (~pneff@2a02:168:fedc:0:4961:9552:50a:6c11)
[04:20:27] *** Joins: TheRAt (~TheRAt@user/therat)
[04:20:47] *** Quits: slavfox (~slavfox@ipv4-93-158-232-111.net.internetunion.pl) (Quit: ZNC 1.8.2 - https://znc.in)
[04:21:01] *** Joins: gggp (~textual@60.10.194.47)
[04:21:52] *** Joins: slavfox (~slavfox@93.158.232.111)
[04:22:10] *** Joins: Celeo (~Celeo@user/celeo)
[04:22:26] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Quit: ZNC 1.8.2 - https://znc.in)
[04:23:20] *** Joins: sgn (~sgn@user/sgn)
[04:23:29] *** Quits: Habbie (peter@lorentz.7bits.nl) (Ping timeout: 272 seconds)
[04:23:43] *** Quits: TranquilEcho (~grom@user/tranquilecho) (Quit: WeeChat 2.8)
[04:24:31] *** Joins: Habbie (peter@lorentz.7bits.nl)
[04:25:13] *** Quits: pneff (~pneff@2a02:168:fedc:0:4961:9552:50a:6c11) (Ping timeout: 268 seconds)
[04:25:13] *** Quits: padraigd (~Thunderbi@c-73-48-132-102.hsd1.ca.comcast.net) (Ping timeout: 268 seconds)
[04:25:38] *** Quits: bigRoo (~user@131.236.54.84) (Remote host closed the connection)
[04:25:43] *** Quits: tabakhase (tabakhase@user/tabakhase) (Ping timeout: 244 seconds)
[04:25:47] *** Joins: Geronimo7 (~Geronimo@user/geronimo)
[04:25:55] *** Joins: Deaygo7 (~Deaygo@let.deaygo.in)
[04:26:03] *** Joins: kn1005 (~kn100@wireguard/tunneler/kn100)
[04:26:12] *** Quits: gggp (~textual@60.10.194.47) (Ping timeout: 272 seconds)
[04:26:14] *** Quits: DaPinkOne (~Dap@user/dap) (Ping timeout: 244 seconds)
[04:26:21] *** Joins: lxdr6 (~lxdr@user/lxdr)
[04:26:45] *** Quits: bionade24 (~bionade24@server2.oscloud.info) (Ping timeout: 244 seconds)
[04:26:46] *** Joins: FLHerne_ (flh@flherne.uk)
[04:27:05] *** Joins: DaPinkOne (~Dap@user/dap)
[04:27:16] *** Quits: ferros (~ferros@vps-eacaba1b.vps.ovh.net) (Ping timeout: 244 seconds)
[04:27:16] *** Quits: bluss (~bluss@user/bluss) (Ping timeout: 244 seconds)
[04:27:16] *** Quits: syrius (syrius@titan.stormtek.net) (Ping timeout: 244 seconds)
[04:27:16] *** Quits: f8e4_ (~user@159.89.21.45) (Ping timeout: 244 seconds)
[04:27:21] *** Joins: m1n10n (georgecloo@cpe-76-184-204-251.tx.res.rr.com)
[04:27:23] *** Joins: tabakhase (tabakhase@user/tabakhase)
[04:27:30] *** Quits: FLHerne (flh@flherne.uk) (Read error: Connection reset by peer)
[04:27:47] *** Quits: s1b1 (~s1b1@user/s1b1) (Ping timeout: 244 seconds)
[04:27:47] *** Quits: Deaygo (~Deaygo@let.deaygo.in) (Ping timeout: 244 seconds)
[04:27:47] *** Quits: kn100 (~kn100@wireguard/tunneler/kn100) (Ping timeout: 244 seconds)
[04:27:47] *** Quits: _0ne (~one@user/0ne/x-2101768) (Ping timeout: 244 seconds)
[04:27:47] *** Quits: Ninpo (~Ninpo@charlton.qap.la) (Ping timeout: 244 seconds)
[04:27:47] *** Quits: CalimeroTeknik (~calimero@user/calimeroteknik) (Ping timeout: 244 seconds)
[04:27:47] *** Quits: Antibody (~Antibody@107.170.145.30) (Ping timeout: 244 seconds)
[04:27:47] *** Quits: Ulti (~matt@ec2-35-178-236-167.eu-west-2.compute.amazonaws.com) (Ping timeout: 244 seconds)
[04:27:47] *** Quits: lxdr (~lxdr@user/lxdr) (Ping timeout: 244 seconds)
[04:27:47] *** Quits: galen (~gaken@user/galen) (Ping timeout: 244 seconds)
[04:27:47] *** Quits: Geronimo (~Geronimo@user/geronimo) (Ping timeout: 244 seconds)
[04:27:47] *** Deaygo7 is now known as Deaygo
[04:27:47] *** Geronimo7 is now known as Geronimo
[04:27:48] *** kn1005 is now known as kn100
[04:27:48] *** lxdr6 is now known as lxdr
[04:27:55] *** Joins: bionade24 (~bionade24@server2.oscloud.info)
[04:27:56] *** Joins: galen (~gaken@user/galen)
[04:28:01] *** Joins: Ulti (~matt@ec2-35-178-236-167.eu-west-2.compute.amazonaws.com)
[04:28:27] *** Joins: f8e4_ (~user@159.89.21.45)
[04:28:43] *** Joins: _0ne (~one@user/0ne/x-2101768)
[04:28:44] *** Quits: ice9 (~ice9@user/ice9) (Ping timeout: 272 seconds)
[04:28:57] *** Joins: boxelephant (~boxelepha@d192-24-108-69.col.wideopenwest.com)
[04:29:21] *** Joins: Antibody (~Antibody@107.170.145.30)
[04:29:22] *** Quits: justinf210 (~justinf21@4.sub-97-44-1.myvzw.com) (Ping timeout: 272 seconds)
[04:29:24] *** Joins: ferros (~ferros@vps-eacaba1b.vps.ovh.net)
[04:30:08] *** Joins: justinf210 (~justinf21@192-230-160-245.3rivers.net)
[04:30:32] *** Quits: Cacafuego (~vision@104-1-145-196.lightspeed.tukrga.sbcglobal.net) (Quit: Vision[0.10.3]: i've been blurred!)
[04:30:37] *** FLHerne_ is now known as FLHerne
[04:30:39] *** Quits: justinf210 (~justinf21@192-230-160-245.3rivers.net) (Read error: Connection reset by peer)
[04:31:21] *** Joins: justinf210 (~justinf21@192-230-160-245.3rivers.net)
[04:32:37] *** Quits: Mattiaslndstrm (~Mattiasln@c188-148-207-108.bredband.tele2.se) (Ping timeout: 268 seconds)
[04:32:52] *** Quits: MrFantastik (~Thunderbi@cpe-69-204-101-67.buffalo.res.rr.com) (Ping timeout: 252 seconds)
[04:33:04] *** Joins: MrFantastik (~Thunderbi@cpe-69-204-101-67.buffalo.res.rr.com)
[04:33:26] *** Joins: bluss (~bluss@user/bluss)
[04:33:48] *** Quits: boxelephant (~boxelepha@d192-24-108-69.col.wideopenwest.com) (Ping timeout: 272 seconds)
[04:34:18] *** Joins: Mattiaslndstrm (~Mattiasln@c188-148-207-108.bredband.tele2.se)
[04:34:37] *** Joins: ctrypoph_ (~ctrypoph@2607:fb90:a905:e068:accd:6ac7:3d36:4d8f)
[04:35:04] *** Quits: Asmodean (~Asmoedean@178.115.128.129.wireless.dyn.drei.com) (Ping timeout: 272 seconds)
[04:35:46] *** Quits: justinf210 (~justinf21@192-230-160-245.3rivers.net) (Read error: Connection reset by peer)
[04:36:01] *** Quits: CombatVet (~c4@user/combatvet) (Ping timeout: 244 seconds)
[04:36:01] *** Joins: pneff (~pneff@2a02:168:fedc:0:4961:9552:50a:6c11)
[04:36:21] *** Joins: justinf210 (~justinf21@192-230-160-245.3rivers.net)
[04:36:27] *** Joins: Asmodean (~Asmoedean@77.119.201.202.wireless.dyn.drei.com)
[04:37:05] *** Quits: Norore (~weechat@2a01:e0a:23a:5600:b9d3:ae19:12de:25b) (Quit: WeeChat 3.2)
[04:38:12] *** Parts: transhumanist (~hiken@2601:196:8800:35f0:68dc:cec0:9a3c:b4c) ()
[04:38:23] *** Quits: FFY00 (~FFY00@archlinux/trusteduser/ffy00) (Remote host closed the connection)
[04:38:52] *** Quits: ctrypoph (~ctrypoph@99-51-11-77.lightspeed.brhmmi.sbcglobal.net) (Ping timeout: 272 seconds)
[04:40:12] *** Quits: jeho (~jehoshaph@user/jehoshaphat) (Ping timeout: 252 seconds)
[04:40:27] *** Joins: xlirate (~xlirate@104-222-116-95.cpe.teksavvy.com)
[04:40:41] *** Joins: paravida (~paravida@user/paravida)
[04:40:51] *** Quits: amahl (~amahl@dsl-jklbng12-54fbca-64.dhcp.inet.fi) (Remote host closed the connection)
[04:41:12] *** Joins: monkey_ (~user@190.104.116.134)
[04:41:42] *** Quits: RangerBobVA (~bmaddox@user/rangerbobva) (Quit: Leaving)
[04:41:45] *** Quits: ionface (~ionface@user/ionface) (Ping timeout: 265 seconds)
[04:41:51] *** Joins: kn1009 (~kn100@wireguard/tunneler/kn100)
[04:41:52] *** Quits: pneff (~pneff@2a02:168:fedc:0:4961:9552:50a:6c11) (Ping timeout: 268 seconds)
[04:41:53] *** Joins: ionface_ (~ionface@user/ionface)
[04:42:18] *** Quits: boB_K7IQ (~boB_K7IQ@152.44.147.180) (Ping timeout: 250 seconds)
[04:42:37] *** Joins: qpdb_ (~qpdb@user/qpdb)
[04:42:37] <xlirate> I am having problems installing pygame with pip. My system does not have access to PORTMIDI, on which pygame depends. The error message says "Use -auto to continue building without all dependencies" but I can't find where to put -auto. Can someone point me to the man page that I am missing?
[04:42:49] *** Joins: s1b1 (~s1b1@user/s1b1)
[04:42:58] *** Joins: CombatVet (~c4@user/combatvet)
[04:43:21] *** Quits: ctrypoph_ (~ctrypoph@2607:fb90:a905:e068:accd:6ac7:3d36:4d8f) (Read error: Connection reset by peer)
[04:44:01] *** Quits: kn100 (~kn100@wireguard/tunneler/kn100) (Ping timeout: 268 seconds)
[04:44:01] *** kn1009 is now known as kn100
[04:44:40] *** Quits: justinf210 (~justinf21@192-230-160-245.3rivers.net) (Remote host closed the connection)
[04:44:58] *** Quits: Haxxa (~Haxxa@89nnjg0xckz9ggn6r5xm.ip6.superloop.com) (Ping timeout: 272 seconds)
[04:45:19] *** Quits: qpdb (~qpdb@user/qpdb) (Ping timeout: 246 seconds)
[04:46:39] *** Joins: ctrypoph (~ctrypoph@74.85.109.5)
[04:46:41] *** Quits: pizza (~pizzaiolo@user/pizzaiolo) (Remote host closed the connection)
[04:47:17] *** Joins: jhulten (~jhulten@c-67-185-71-124.hsd1.wa.comcast.net)
[04:48:18] *** Joins: znf (~ibm86@toaster.linge-ma.ro)
[04:48:23] <znf> Hi.
[04:48:28] <xlirate> Hello
[04:48:30] <lavadonut> hi
[04:48:44] *** Quits: greedom (~greedom@2001:16b8:32d0:b400:22d1:c4b6:997b:9c6) (Remote host closed the connection)
[04:48:59] <znf> I'm on an arm board and I'm trying to pip install docker-compose (under Ubuntu 18.04), but the build keeps failing because the make system can't find "arm-linux-gnueabihf-gcc"
[04:49:04] <znf> I do have GCC installed and running tough
[04:49:26] <znf> oh wait, it works now
[04:49:26] <znf> figures
[04:49:34] *** Joins: pizzaiolo (~pizzaiolo@user/pizzaiolo)
[04:49:40] <znf> the second I ask someone else, suddenly it works
[04:50:06] *** Quits: ulu_ulu (~ulu@user/ulu) (Ping timeout: 250 seconds)
[04:50:50] <lavadonut> that's how it goes
[04:50:57] *** pizzaiolo is now known as pizza
[04:52:39] *** Joins: pneff (~pneff@2a02:168:fedc:0:4961:9552:50a:6c11)
[04:52:43] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[04:54:30] <dale> xlirate: Things I'm seeing on their wiki seems to suggest to me that you shouldn't install it with pip unless you can provide all of its dependencies.
[04:54:59] <dale> xlirate: For example, https://www.pygame.org/wiki/CompileUbuntu?parent=#Pygame%202 shows running setup.py -auto.
[04:55:48] <xlirate> Thank you for the help. I will need to go a layer down on my stack. right now I am extending an alpine backed docker which ties my hands
[04:56:01] *** Joins: ice9 (~ice9@user/ice9)
[04:56:11] *** Quits: theo (~theo@user/theo) (Quit: Ping timeout (120 seconds))
[04:56:29] <dale> xlirate: Hm, but I wonder if you could supply either --global-option="-auto" or --install-option"-auto" to "pip install pygame".
[04:56:37] *** Joins: theo (~theo@user/theo)
[04:56:42] *** Joins: lukka5 (~lukka5@246-60-231-201.fibertel.com.ar)
[04:57:17] <xlirate> This image doesn't even have a working turtle, I don't see this as a good place to work from
[04:58:08] *** Joins: humanBird (~humanBird@2603-8001-7003-5966-75c9-43c6-fd77-9901.res6.spectrum.com)
[04:58:11] *** Quits: drincruz_ (~drincruz@ool-44c748be.dyn.optonline.net) (Ping timeout: 265 seconds)
[04:59:21] *** Joins: ulu (~ulu@user/ulu)
[05:00:00] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[05:01:28] *** Quits: lukka5 (~lukka5@246-60-231-201.fibertel.com.ar) (Ping timeout: 252 seconds)
[05:01:36] *** Quits: ice9 (~ice9@user/ice9) (Ping timeout: 258 seconds)
[05:01:48] *** Quits: jwhisnant (~jwhisnant@user/jwhisnant) (Read error: Connection reset by peer)
[05:02:58] *** Quits: TheHermann (~TheHerman@gateway/tor-sasl/thehermann) (Remote host closed the connection)
[05:03:35] *** Quits: pneff (~pneff@2a02:168:fedc:0:4961:9552:50a:6c11) (Ping timeout: 272 seconds)
[05:04:42] *** Joins: jwhisnant (~jwhisnant@user/jwhisnant)
[05:04:59] *** Quits: rgp (~rgp@user/rgp) (Quit: Ping timeout (120 seconds))
[05:05:12] *** Quits: briian (uid321220@id-321220.highgate.irccloud.com) (Quit: Connection closed for inactivity)
[05:05:19] *** Quits: Moosadee (~Moosadee@136.32.155.193) (Ping timeout: 268 seconds)
[05:05:31] *** Joins: rgp (~rgp@user/rgp)
[05:05:55] *** Quits: metah4ck3r (~meta@user/metah4ck3r) (Ping timeout: 268 seconds)
[05:06:08] *** Quits: ohuwuteu (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Quit: ohuwuteu)
[05:06:50] *** Quits: monkey_ (~user@190.104.116.134) (Ping timeout: 268 seconds)
[05:07:19] *** Joins: metah4ck3r (~meta@user/metah4ck3r)
[05:08:35] *** Quits: Auron (Auron956@user/auron) (Remote host closed the connection)
[05:08:36] *** Joins: gggp (~textual@36.112.128.143)
[05:08:38] *** Quits: ttys000 (~ttys000@user/ttys000) (Quit: Textual IRC Client: www.textualapp.com)
[05:09:10] *** Quits: derelict (~derelict@user/derelict) (Ping timeout: 250 seconds)
[05:09:50] *** Joins: bigRoo (~user@131.236.54.84)
[05:13:12] *** Quits: gggp (~textual@36.112.128.143) (Ping timeout: 252 seconds)
[05:14:40] *** Quits: metah4ck3r (~meta@user/metah4ck3r) (Ping timeout: 252 seconds)
[05:15:48] *** Quits: Seirdy (~Seirdy@sourcehut/user/seirdy) (Ping timeout: 268 seconds)
[05:15:59] *** Joins: pneff (~pneff@2a02:168:fedc:0:4961:9552:50a:6c11)
[05:17:34] *** Joins: Seirdy (~Seirdy@sourcehut/user/seirdy)
[05:17:58] <grym> alpine generally ties a lot of hands
[05:18:04] *** Joins: metah4ck3r (~meta@user/metah4ck3r)
[05:19:56] *** Quits: djapo (~archangel@user/djapo) (Ping timeout: 265 seconds)
[05:20:26] *** Quits: pneff (~pneff@2a02:168:fedc:0:4961:9552:50a:6c11) (Ping timeout: 250 seconds)
[05:20:48] *** Quits: jhulten (~jhulten@c-67-185-71-124.hsd1.wa.comcast.net) (Remote host closed the connection)
[05:23:27] <catern> would anyone take a look at an article I'm writing about a distributed systems library? in PM, since it's still a draft
[05:23:41] *** Joins: ctrypoph_ (~ctrypoph@172.58.190.247)
[05:23:43] *** Quits: kn100 (~kn100@wireguard/tunneler/kn100) (Quit: Ping timeout (120 seconds))
[05:23:48] *** Quits: metah4ck3r (~meta@user/metah4ck3r) (Ping timeout: 265 seconds)
[05:24:09] *** Joins: kn100 (~kn100@wireguard/tunneler/kn100)
[05:24:28] *** Quits: goldfish (~goldfish@user/goldfish) (Ping timeout: 272 seconds)
[05:25:06] *** Quits: ctrypoph (~ctrypoph@74.85.109.5) (Ping timeout: 272 seconds)
[05:25:23] *** Joins: metah4ck3r (~meta@user/metah4ck3r)
[05:26:53] *** Joins: derelict (~derelict@user/derelict)
[05:27:00] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 272 seconds)
[05:28:52] *** Quits: ctrypoph_ (~ctrypoph@172.58.190.247) (Read error: Connection reset by peer)
[05:30:21] *** Quits: vlm (~vlm@user/vlm) (Quit: "")
[05:30:24] *** Quits: jarthur (~jarthur@2603-8080-1540-002d-bc1c-de87-81b2-e6e2.res6.spectrum.com) (Ping timeout: 250 seconds)
[05:31:08] *** Joins: gggp (~textual@60.10.194.47)
[05:31:29] *** Joins: Haxxa (~Haxxa@122-199-59-136.ip4.superloop.com)
[05:32:16] *** Joins: ctrypoph (~ctrypoph@2600:1702:3000:9090:6d7f:1c9d:1aea:24aa)
[05:32:20] *** Joins: pneff (~pneff@2a02:168:fedc:0:4961:9552:50a:6c11)
[05:33:20] *** Quits: metah4ck3r (~meta@user/metah4ck3r) (Ping timeout: 272 seconds)
[05:34:22] *** Joins: justinf210 (~justinf21@150.sub-97-43-192.myvzw.com)
[05:34:41] *** Joins: vlm (~vlm@user/vlm)
[05:34:44] *** Joins: metah4ck3r (~meta@user/metah4ck3r)
[05:36:02] *** Joins: et_ (~et@user/et)
[05:36:06] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
[05:36:09] *** Joins: raxor2k (~raxor2k@7.221.181.62.in-addr.dgcsystems.net)
[05:36:19] <raxor2k> can i put functions into asserEquals when i do unit testing ?
[05:36:29] *** Quits: kostkon__ (~kostkon@2a02:587:a100:18e:9fe3:794:a225:7cdb) (Read error: Connection reset by peer)
[05:36:36] <grym> tias
[05:36:47] *** Joins: kostkon__ (~kostkon@2a02:587:a100:18e:9fe3:794:a225:7cdb)
[05:36:52] *** Quits: et (~et@user/et) (Ping timeout: 258 seconds)
[05:36:52] *** et_ is now known as et
[05:39:13] *** Quits: justinf210 (~justinf21@150.sub-97-43-192.myvzw.com) (Ping timeout: 268 seconds)
[05:41:15] *** Joins: venmx (~bertie@host81-155-235-58.range81-155.btcentralplus.com)
[05:42:18] *** Quits: pneff (~pneff@2a02:168:fedc:0:4961:9552:50a:6c11) (Ping timeout: 268 seconds)
[05:42:19] *** Joins: kostkon_ (~kostkon@2a02:587:a100:18e:9fe3:794:a225:7cdb)
[05:42:32] *** Quits: kostkon__ (~kostkon@2a02:587:a100:18e:9fe3:794:a225:7cdb) (Remote host closed the connection)
[05:42:35] *** Quits: PantelicGR (~PantelicG@user/pantelicgr) (Quit: Leaving)
[05:42:55] *** Quits: p-i-_ (~Ohmu@113.53.167.81) (Quit: Leaving...)
[05:43:46] <Jonno_FTW> is there a way to do a HEAD call on an s3 object with boto3?
[05:43:51] *** Joins: justinf210 (~justinf21@192-230-160-245.3rivers.net)
[05:44:06] *** Joins: jarthur (~jarthur@2603-8080-1540-002d-f4dd-c36e-b54e-ab9e.res6.spectrum.com)
[05:44:47] <Jonno_FTW> actually never mind
[05:44:50] *** Quits: jim (~jim@about/linux/staff/jim) (Quit: Leaving)
[05:45:17] *** Joins: pnoud (~pnoud@user/pnoud)
[05:45:19] *** Joins: jim (~jim@about/linux/staff/jim)
[05:47:54] *** Quits: gggp (~textual@60.10.194.47) (Ping timeout: 272 seconds)
[05:48:27] *** Quits: justinf210 (~justinf21@192-230-160-245.3rivers.net) (Ping timeout: 265 seconds)
[05:48:28] *** Joins: NineBAR (~NineBAR@c-68-56-180-29.hsd1.mi.comcast.net)
[05:48:30] *** Quits: MrFantastik (~Thunderbi@cpe-69-204-101-67.buffalo.res.rr.com) (Quit: MrFantastik)
[05:48:45] *** Quits: viktorivan (~ivan@187.223.237.71) (Remote host closed the connection)
[05:48:49] *** Joins: MrFantastik (~Thunderbi@cpe-69-204-101-67.buffalo.res.rr.com)
[05:49:47] *** Quits: Vornicus (~Vornicus@2603-8000-5d07-7ef0-d575-2704-820a-6f5d.res6.spectrum.com) (Read error: Connection reset by peer)
[05:50:26] *** Quits: pnoud (~pnoud@user/pnoud) (Ping timeout: 272 seconds)
[05:50:49] *** Joins: lukka5 (~lukka5@246-60-231-201.fibertel.com.ar)
[05:51:16] *** Joins: sn1tch3r (~sn1tch3r@201-27-147-42.dsl.telesp.net.br)
[05:52:04] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 252 seconds)
[05:53:56] *** Joins: pneff (~pneff@2a02:168:fedc:0:4961:9552:50a:6c11)
[05:54:37] *** Joins: padraigd (~Thunderbi@c-73-48-132-102.hsd1.ca.comcast.net)
[05:56:08] *** Quits: lukka5 (~lukka5@246-60-231-201.fibertel.com.ar) (Ping timeout: 272 seconds)
[05:56:41] *** Quits: Sasazuka (~Sasazuka@user/sasazuka) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[05:56:48] *** Joins: justinf210 (~justinf21@192-230-160-245.3rivers.net)
[05:57:10] *** Quits: phylaz (~phylaz@219.92-221-176.customer.lyse.net) (Quit: Ping timeout (120 seconds))
[05:57:29] *** Quits: kostkon_ (~kostkon@2a02:587:a100:18e:9fe3:794:a225:7cdb) (Read error: Connection reset by peer)
[05:57:37] *** Joins: pete443 (~pete@user/pete443)
[05:57:49] *** Joins: kostkon_ (~kostkon@2a02:587:a100:18e:9fe3:794:a225:7cdb)
[05:58:41] *** Quits: pneff (~pneff@2a02:168:fedc:0:4961:9552:50a:6c11) (Ping timeout: 272 seconds)
[05:59:04] <MrAureliusR> I'm curious, why do most IRC channels encourage people to use paste services *besides* pastebin?
[05:59:35] *** Quits: pete443_ (~pete@user/pete443) (Ping timeout: 268 seconds)
[05:59:44] *** Quits: kostkon_ (~kostkon@2a02:587:a100:18e:9fe3:794:a225:7cdb) (Remote host closed the connection)
[05:59:50] *** Joins: kostkon__ (~kostkon@2a02:587:a100:18e:9fe3:794:a225:7cdb)
[05:59:54] <grym> ads and js are gross; pastebin is occasionally blacklisted for users behind work firewalls
[06:00:10] <grym> bpa.st is home-grown freerange natural
[06:00:27] <grym> admittedly also uses js
[06:00:38] *** Quits: telboon (~telboon@user/telboon) (Ping timeout: 258 seconds)
[06:02:18] <Jonno_FTW> the debian pastebin is nice too
[06:02:45] <Jonno_FTW> there's some utils where you can upload to a pastebin from terminal, or pipe output to a pastebin
[06:02:57] <grym> my editor pastes to bpa.st now
[06:03:10] *** Quits: justinf210 (~justinf21@192-230-160-245.3rivers.net) (Read error: Connection reset by peer)
[06:03:11] <Jonno_FTW> pycharm has a "make gist" context option
[06:03:21] <grym> if you like doxxing yourself :D
[06:03:29] <grym> or have an irc github
[06:03:42] <Jonno_FTW> you can also make an anonymous secret gist paste
[06:03:53] <grym> not anymore
[06:04:07] <grym> https://github.blog/2018-02-18-deprecation-notice-removing-anonymous-gist-creation/
[06:04:17] <Jonno_FTW> this is outrageous
[06:04:27] <grym> "tough!"
[06:04:49] <Jonno_FTW> my irc name is the same as my github anyway
[06:06:33] *** Joins: BrokenCog (~BrokenCog@132.sub-174-194-169.myvzw.com)
[06:06:49] *** Joins: kostkon_ (~kostkon@2a02:587:a100:18e:9fe3:794:a225:7cdb)
[06:07:32] *** Quits: padraigd (~Thunderbi@c-73-48-132-102.hsd1.ca.comcast.net) (Ping timeout: 272 seconds)
[06:07:38] <BrokenCog> hellos, is there an argparse flag to generate "-v" switch options in addition to "--var" long options?
[06:07:59] *** Quits: kostkon_ (~kostkon@2a02:587:a100:18e:9fe3:794:a225:7cdb) (Read error: Connection reset by peer)
[06:08:11] <BrokenCog> I get that allow_abbrev will generate "--va" etc, but, I'd like "-v" to work as well.
[06:08:19] *** Joins: kostkon_ (~kostkon@2a02:587:a100:18e:9fe3:794:a225:7cdb)
[06:08:19] *** Quits: jwhisnant (~jwhisnant@user/jwhisnant) (Read error: Connection reset by peer)
[06:08:22] *** Joins: jwhisnant_ (~jwhisnant@user/jwhisnant)
[06:08:41] *** Quits: kostkon__ (~kostkon@2a02:587:a100:18e:9fe3:794:a225:7cdb) (Remote host closed the connection)
[06:09:30] <nedbat> BrokenCog: here's an example from the docs:   parser.add_argument('-f', '--foo', help='old foo help')
[06:10:26] <BrokenCog> so I have to explicitly add the short switch ... okay.  I was hoping not.  thanks.
[06:10:29] <BrokenCog> fg
[06:10:47] *** Joins: boB_K7IQ (~boB_K7IQ@c-73-254-117-91.hsd1.wa.comcast.net)
[06:11:15] *** Joins: pneff (~pneff@2a02:168:fedc:0:4961:9552:50a:6c11)
[06:11:25] *** Joins: justinf210 (~justinf21@192-230-160-245.3rivers.net)
[06:12:08] *** Quits: justinf210 (~justinf21@192-230-160-245.3rivers.net) (Remote host closed the connection)
[06:13:48] *** Quits: withered_wolf (~withered_@1437135-v103.1561-static.stchilaa.metronetinc.net) (Read error: Connection reset by peer)
[06:14:03] *** Joins: justinf210 (~justinf21@28.sub-97-43-193.myvzw.com)
[06:14:28] *** Joins: withered_wolf (~withered_@1437135-v103.1561-static.stchilaa.metronetinc.net)
[06:14:37] *** Quits: Naan (~naan@user/naan) (Read error: Connection reset by peer)
[06:15:46] *** Quits: onu (~onufn@gibbs.uberspace.de) (Quit: %...%)
[06:15:54] *** Quits: pneff (~pneff@2a02:168:fedc:0:4961:9552:50a:6c11) (Ping timeout: 250 seconds)
[06:15:56] *** Joins: tims (~tims@193-82-247-42.tpgi.com.au)
[06:16:18] *** Quits: ZedHedTed (~ZedHedTed@user/zedhedted) (Remote host closed the connection)
[06:16:23] *** Joins: onu (~onufn@gibbs.uberspace.de)
[06:18:25] *** Quits: justinf210 (~justinf21@28.sub-97-43-193.myvzw.com) (Ping timeout: 265 seconds)
[06:18:47] *** Joins: justinf210 (~justinf21@192-230-160-245.3rivers.net)
[06:19:13] <ssbr> I once benchmarked all the paste services, gist was so faaaaaaaast.
[06:19:43] <ssbr> (pastebin, aside from being ad riddled and annoying, was definitely not. Might've changed since then, but with the ads and such, I doubt it.)
[06:21:34] *** Joins: HaMsTeRs (~mx@14-0-169-108.static.pccw-hkt.com)
[06:21:37] <grym> ssbr: i think if supakeen gets the hamsters running real good, bpa.st is snappy enough
[06:21:48] <ssbr> rewrite it in rust~~
[06:22:00] <grym> nyehhh
[06:22:22] <BrokenCog> termbin.com seems speedy ...
[06:22:40] <grym> yeah, but it has some of the same ux problems that ix.io does
[06:23:01] <ssbr> grym: in my head everything should be blazing fast because CDNs r cheap, idk why so many services are slow as heck
[06:23:13] <grym> i do not like clicking on links and getting prompted to download a text file, for example
[06:23:18] <ssbr> we can serve videos with less latency than some pastebins
[06:23:21] <BrokenCog> maybe it's a local issue?
[06:23:54] <ssbr> BrokenCog: I should clarify that bpaste and most other pastebins I've tried are pretty fast :)
[06:24:08] *** Quits: chaosite (~chaosite@user/chaosite) (Ping timeout: 250 seconds)
[06:24:11] <ssbr> but not all of them, and some of them can be noticeably delayed to load, and idk why
[06:24:31] *** Joins: chaosite (~chaosite@user/chaosite)
[06:26:20] <ssbr> (brb, need to reboot to try to fix computer issues. If I don't come back, it's because it didn't work.)
[06:26:26] *** Quits: justinf210 (~justinf21@192-230-160-245.3rivers.net) (Remote host closed the connection)
[06:26:37] *** Joins: justinf210 (~justinf21@192-230-160-245.3rivers.net)
[06:26:43] *** Quits: ssbr (~ssbr@python/site-packages/ssbr) (Quit: I think the heat wave melted my electronics)
[06:27:06] *** Joins: pneff (~pneff@2a02:168:fedc:0:4961:9552:50a:6c11)
[06:27:46] *** Joins: phylaz (~phylaz@219.92-221-176.customer.lyse.net)
[06:28:10] *** Quits: HaMsTeRs (~mx@14-0-169-108.static.pccw-hkt.com) (Quit: Konversation terminated!)
[06:29:23] *** Quits: chaosite (~chaosite@user/chaosite) (Ping timeout: 258 seconds)
[06:30:01] *** Quits: venmx (~bertie@host81-155-235-58.range81-155.btcentralplus.com) (Ping timeout: 265 seconds)
[06:30:14] *** Joins: ssbr (~ssbr@python/site-packages/ssbr)
[06:32:52] *** Quits: entuland (~entuland@user/entuland) (Ping timeout: 272 seconds)
[06:33:50] *** Joins: creese (~creese@136-25-168-142.cab.webpass.net)
[06:35:04] <creese> `pip install .` isn't installing the dependencies from my pyproject.toml. What should I do instead?
[06:35:10] *** Quits: pneff (~pneff@2a02:168:fedc:0:4961:9552:50a:6c11) (Ping timeout: 272 seconds)
[06:37:25] *** Quits: justinf210 (~justinf21@192-230-160-245.3rivers.net) (Read error: Connection reset by peer)
[06:37:45] *** Quits: noarb- (~noarb@user/noarb) (Ping timeout: 265 seconds)
[06:38:00] *** Joins: justinf210 (~justinf21@192-230-160-245.3rivers.net)
[06:38:55] *** Joins: padraigd (~Thunderbi@c-73-48-132-102.hsd1.ca.comcast.net)
[06:38:58] *** Joins: lukka5 (~lukka5@246-60-231-201.fibertel.com.ar)
[06:39:12] *** Quits: cthulchu (~Cthulchu@193.194.107.250) (Ping timeout: 265 seconds)
[06:41:14] <ssbr> creese: I am not good with pip, but can try my best. what's `pip --version`? (Also, does it work better if you use `pip install -e .` ?)
[06:41:30] <ssbr> (I use poetry, where it'd be `poetry install`)
[06:43:05] *** Joins: semanticz0 (~semanticz@202.164.136.255)
[06:43:08] <creese> `-e` returns an error
[06:43:57] *** Joins: gggpkm (~gggpkm@124.126.15.211)
[06:44:02] <creese> It wants to write to `/usr/local/lib/python3.9/site-packages/` but does not have permission.
[06:44:43] *** Quits: justinf210 (~justinf21@192-230-160-245.3rivers.net) (Ping timeout: 258 seconds)
[06:44:44] <creese> I'm not using a virtual environment. Would that sort out that issue?
[06:45:09] <creese> I'm running pip 21.0.1
[06:45:22] *** Quits: N4G4R41 (uid506268@user/n4g4r41) ()
[06:46:00] *** Joins: N4G4R41 (uid506268@user/n4g4r41)
[06:46:10] *** Joins: justinf210 (~justinf21@89.sub-97-43-193.myvzw.com)
[06:46:16] *** Joins: pneff (~pneff@2a02:168:fedc:0:4961:9552:50a:6c11)
[06:46:17] *** Joins: vince (~vince@75.127.14.76)
[06:46:37] *** Parts: N4G4R41 (uid506268@user/n4g4r41) ()
[06:46:47] *** Quits: justinf210 (~justinf21@89.sub-97-43-193.myvzw.com) (Remote host closed the connection)
[06:47:00] <creese> @ssbr How stable is Poetry?
[06:47:17] *** Joins: leduyquang753 (~leduyquan@user/leduyquang753)
[06:47:45] <ssbr> creese: w.r.t. `-e` error, uhhh, maybe use --user as well. w.r.t. version: well, that's recent enough to support pyproject.toml, anyway.... w.r.t. Poetry: no idea, but it hasn't broken me yet.
[06:48:12] *** Joins: FFY00 (~FFY00@archlinux/trusteduser/ffy00)
[06:48:51] <semanticz0> Is Poetry the default now?
[06:49:49] <semanticz0> In terms of adoption
[06:51:06] *** Quits: gggpkm (~gggpkm@124.126.15.211) (Ping timeout: 252 seconds)
[06:51:35] <SnoopJ> semanticz0, for what task(s)?
[06:51:39] <creese> ssbr: I think I would need a virtual environment for `-e`. I don't have a local python.
[06:52:23] <ssbr> creese: I don't believe those have any relationship. -e just means that it's installed via moral symlink
[06:52:44] <ssbr> creese: I also don't think that it will fix your problem, though, I just have a vague memory that it fixes something weird.
[06:52:44] *** Quits: pneff (~pneff@2a02:168:fedc:0:4961:9552:50a:6c11) (Ping timeout: 250 seconds)
[06:53:02] <semanticz0> SnoopJ: For python package management in general
[06:53:07] <SnoopJ> semanticz0, no
[06:53:30] <SnoopJ> creese, you can't use -e with pyproject.toml yet, full stop
[06:53:39] <ssbr> ouch
[06:54:42] *** Quits: MrFantastik (~Thunderbi@cpe-69-204-101-67.buffalo.res.rr.com) (Quit: MrFantastik)
[06:55:02] <SnoopJ> ooh, but PEP 660 addresses the fundamental issue (TIL) https://www.python.org/dev/peps/pep-0660/
[06:56:58] <creese> Is everyone still using requirements.txt?
[06:57:13] *** Quits: jpic (~jpic@82.142.10.10) (Ping timeout: 268 seconds)
[06:57:46] <semanticz0> creese: On this note: https://twitter.com/obeattie/status/1351574730483105796?s=20
[06:58:37] *** Joins: jpic (~jpic@82.142.17.14)
[06:58:44] *** Quits: tg (~tg@rockylinux/infra/tg) (Quit: tg)
[06:59:16] *** Joins: justinf210 (~justinf21@192-230-160-245.3rivers.net)
[06:59:39] *** Quits: cman (~Cody@2603-9000-d104-8465-454b-ee3b-80ea-6e5a.inf6.spectrum.com) (Quit: WeeChat 3.2)
[07:00:18] *** Joins: MrFantastik (~Thunderbi@cpe-69-204-101-67.buffalo.res.rr.com)
[07:00:21] *** Joins: finn_elija (~finn_elij@user/finn-elija/x-0085643)
[07:00:21] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Killed (copper.libera.chat (Nickname regained by services)))
[07:00:21] *** finn_elija is now known as FinnElija
[07:01:04] *** Quits: justinf210 (~justinf21@192-230-160-245.3rivers.net) (Read error: Connection reset by peer)
[07:01:26] *** Joins: justinf210 (~justinf21@192-230-160-245.3rivers.net)
[07:01:38] <creese> semanticz: Indeed.
[07:01:52] *** Quits: ihaveamac (~ihaveamac@ihaveahax.net) (Quit: fail)
[07:03:19] *** Joins: ihaveamac (~ihaveamac@ihaveahax.net)
[07:03:40] <lavadonut> ihaveamac, do you have a mac?
[07:04:37] <ssbr> creese: FWIW, that tweet roughly describes why I use poetry. I missed cargo. poetry has just about the right feel for me. :)
[07:04:50] <ssbr> creese: w.r.t. requirements.txt: i don't think it has much use in new things
[07:05:15] <ihaveamac> yes i'm using a mid-2015 mbp
[07:05:23] *** Joins: pneff (~pneff@2a02:168:fedc:0:4961:9552:50a:6c11)
[07:05:32] <SnoopJ> creese, not "everyone," no
[07:05:59] <lavadonut> nice i have a 2017
[07:06:27] *** Joins: justsomeguy (~justsomeg@user/justsomeguy)
[07:08:07] *** Quits: akk (~akk@174-28-112-132.albq.qwest.net) (Quit: +++)
[07:10:04] *** Quits: pneff (~pneff@2a02:168:fedc:0:4961:9552:50a:6c11) (Ping timeout: 250 seconds)
[07:10:25] *** Quits: paravida (~paravida@user/paravida) (Remote host closed the connection)
[07:11:50] *** Joins: shinramen (~shinramen@108-196-84-188.lightspeed.irvnca.sbcglobal.net)
[07:13:17] *** Joins: wyclif (~wyclif@user/wyclif)
[07:13:43] <creese> ssbr: I can't seem to install dependencies without it. I agree having used Cargo, coming back to Python has been quite a shock.
[07:14:21] *** Joins: YuGiOhJCJ (~YuGiOhJCJ@gateway/tor-sasl/yugiohjcj)
[07:17:16] *** Quits: justinf210 (~justinf21@192-230-160-245.3rivers.net) (Remote host closed the connection)
[07:17:27] *** Joins: justinf210 (~justinf21@192-230-160-245.3rivers.net)
[07:17:32] *** Joins: mIk3_08 (~Thunderbi@user/mik3-08/x-2852566)
[07:18:53] *** Quits: raxor2k (~raxor2k@7.221.181.62.in-addr.dgcsystems.net) ()
[07:19:14] *** Quits: padraigd (~Thunderbi@c-73-48-132-102.hsd1.ca.comcast.net) (Quit: padraigd)
[07:19:53] *** Quits: shinramen (~shinramen@108-196-84-188.lightspeed.irvnca.sbcglobal.net) (Quit: Leaving)
[07:23:23] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[07:23:39] *** Joins: pneff (~pneff@2a02:168:fedc:0:4961:9552:50a:6c11)
[07:29:34] *** Quits: y04nn (~y04nn@91.193.4.106) (Ping timeout: 258 seconds)
[07:30:34] *** Quits: pneff (~pneff@2a02:168:fedc:0:4961:9552:50a:6c11) (Ping timeout: 268 seconds)
[07:32:56] <tm007> Getting CORS error with django s3 direct
[07:32:59] *** Joins: djapo (~archangel@user/djapo)
[07:33:31] *** Quits: nomic (~nomic@2a00:23c6:9910:1201:1ddf:df90:39d5:9eb3) (Quit: Leaving)
[07:40:41] *** Quits: NineBAR (~NineBAR@c-68-56-180-29.hsd1.mi.comcast.net) (Ping timeout: 258 seconds)
[07:41:07] *** Quits: creese (~creese@136-25-168-142.cab.webpass.net) (Ping timeout: 246 seconds)
[07:44:02] *** Joins: gggp (~textual@60.10.194.47)
[07:44:19] *** Joins: pneff (~pneff@2a02:168:fedc:0:4961:9552:50a:6c11)
[07:46:05] *** Joins: pnoud (~pnoud@user/pnoud)
[07:46:09] *** Joins: heco (~redrum@user/redrum88)
[07:48:40] *** Joins: ctrypoph_ (~ctrypoph@2607:fb90:a90a:a6b7:5bb6:e439:4c1:837f)
[07:49:57] *** Quits: pneff (~pneff@2a02:168:fedc:0:4961:9552:50a:6c11) (Ping timeout: 268 seconds)
[07:50:11] *** Quits: Sheilong (uid293653@id-293653.charlton.irccloud.com) ()
[07:51:02] *** Quits: pnoud (~pnoud@user/pnoud) (Ping timeout: 258 seconds)
[07:51:20] *** Quits: justsomeguy (~justsomeg@user/justsomeguy) (Quit: WeeChat 3.0.1)
[07:52:03] *** Quits: ctrypoph (~ctrypoph@2600:1702:3000:9090:6d7f:1c9d:1aea:24aa) (Ping timeout: 272 seconds)
[07:56:35] *** Joins: Moosadee (~Moosadee@136.32.155.193)
[07:56:40] *** Quits: zeden (~zeden@user/zeden) (Quit: WeeChat 3.0.1)
[07:57:28] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 252 seconds)
[07:59:12] *** Quits: m1n10n (georgecloo@cpe-76-184-204-251.tx.res.rr.com) (Ping timeout: 268 seconds)
[07:59:28] *** Quits: GrandPa-G (~GrandPa-G@www.rgconsulting.com) (Ping timeout: 258 seconds)
[08:00:03] *** Quits: sn1tch3r (~sn1tch3r@201-27-147-42.dsl.telesp.net.br) (Quit: Leaving)
[08:00:12] *** Joins: monkey_ (~user@190.104.116.134)
[08:02:36] *** Joins: pneff (~pneff@2a02:168:fedc:0:4961:9552:50a:6c11)
[08:02:49] *** Quits: gggp (~textual@60.10.194.47) (Ping timeout: 265 seconds)
[08:04:55] *** Quits: ctrypoph_ (~ctrypoph@2607:fb90:a90a:a6b7:5bb6:e439:4c1:837f) (Read error: Connection reset by peer)
[08:05:58] *** Joins: Bobathan (~admin@cpe-65-29-248-157.wi.res.rr.com)
[08:10:36] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[08:11:02] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 265 seconds)
[08:11:50] *** Lord_of_Life_ is now known as Lord_of_Life
[08:12:09] *** Quits: pneff (~pneff@2a02:168:fedc:0:4961:9552:50a:6c11) (Ping timeout: 268 seconds)
[08:14:35] *** Joins: gggp (~textual@60.10.194.47)
[08:18:45] *** Joins: ctrypoph (~ctrypoph@99-51-11-77.lightspeed.brhmmi.sbcglobal.net)
[08:18:47] *** Quits: ctrypoph (~ctrypoph@99-51-11-77.lightspeed.brhmmi.sbcglobal.net) (Excess Flood)
[08:23:04] *** Quits: boB_K7IQ (~boB_K7IQ@c-73-254-117-91.hsd1.wa.comcast.net) (Ping timeout: 272 seconds)
[08:23:08] *** Joins: ctrypoph (~ctrypoph@99-51-11-77.lightspeed.brhmmi.sbcglobal.net)
[08:23:10] *** Quits: ctrypoph (~ctrypoph@99-51-11-77.lightspeed.brhmmi.sbcglobal.net) (Excess Flood)
[08:23:36] *** Joins: pneff (~pneff@2a02:168:fedc:0:4961:9552:50a:6c11)
[08:24:36] *** Quits: djapo (~archangel@user/djapo) (Remote host closed the connection)
[08:27:09] *** Joins: ctrypoph (~ctrypoph@99-51-11-77.lightspeed.brhmmi.sbcglobal.net)
[08:27:11] *** Quits: ctrypoph (~ctrypoph@99-51-11-77.lightspeed.brhmmi.sbcglobal.net) (Excess Flood)
[08:27:55] *** Joins: rindolf (~rindolf@87.68.240.240.adsl.012.net.il)
[08:28:39] *** Quits: cjb (~cjb@user/cjb) (Quit: brb)
[08:28:48] *** Quits: pneff (~pneff@2a02:168:fedc:0:4961:9552:50a:6c11) (Ping timeout: 268 seconds)
[08:29:05] *** Quits: justinf210 (~justinf21@192-230-160-245.3rivers.net) (Remote host closed the connection)
[08:30:13] *** Joins: ctrypoph (~ctrypoph@2600:1702:3000:9090:6d7f:1c9d:1aea:24aa)
[08:30:15] *** Quits: ctrypoph (~ctrypoph@2600:1702:3000:9090:6d7f:1c9d:1aea:24aa) (Excess Flood)
[08:30:54] *** Quits: MrFantastik (~Thunderbi@cpe-69-204-101-67.buffalo.res.rr.com) (Quit: MrFantastik)
[08:31:09] *** Joins: MrFantastik (~Thunderbi@cpe-69-204-101-67.buffalo.res.rr.com)
[08:31:45] *** Joins: ctrypoph (~ctrypoph@2600:1702:3000:9090:6d7f:1c9d:1aea:24aa)
[08:31:48] *** Quits: ctrypoph (~ctrypoph@2600:1702:3000:9090:6d7f:1c9d:1aea:24aa) (Excess Flood)
[08:32:23] *** Joins: cjb (~cjb@user/cjb)
[08:32:37] *** Joins: djapo (~archangel@user/djapo)
[08:33:01] <Wulf> tm007: https://docs.aws.amazon.com/AmazonS3/latest/userguide/cors.html
[08:33:36] *** Joins: ctrypoph (~ctrypoph@99-51-11-77.lightspeed.brhmmi.sbcglobal.net)
[08:33:39] *** Quits: ctrypoph (~ctrypoph@99-51-11-77.lightspeed.brhmmi.sbcglobal.net) (Excess Flood)
[08:36:02] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.2)
[08:36:36] *** Joins: supakeen (~user@python/site-packages/supakeen)
[08:36:42] *** Joins: ctrypoph (~ctrypoph@99-51-11-77.lightspeed.brhmmi.sbcglobal.net)
[08:36:45] *** Quits: ctrypoph (~ctrypoph@99-51-11-77.lightspeed.brhmmi.sbcglobal.net) (Excess Flood)
[08:36:47] *** Quits: Betal (~Beta@user/betal) (Quit: WeeChat 3.2)
[08:36:56] <tm007> Yeah got it
[08:37:00] <tm007> Wulf: thanks
[08:37:25] *** Quits: djapo (~archangel@user/djapo) (Ping timeout: 258 seconds)
[08:40:31] *** Quits: gggp (~textual@60.10.194.47) (Ping timeout: 265 seconds)
[08:40:56] *** Joins: pneff (~pneff@2a02:168:fedc:0:4961:9552:50a:6c11)
[08:41:45] *** Joins: gline (~yashi@p508bed07.dip0.t-ipconnect.de)
[08:41:50] *** Joins: gggp (~textual@60.10.194.47)
[08:41:53] *** Joins: ctrypoph (~ctrypoph@99-51-11-77.lightspeed.brhmmi.sbcglobal.net)
[08:42:54] *** Quits: monkey_ (~user@190.104.116.134) (Remote host closed the connection)
[08:45:24] *** Quits: pneff (~pneff@2a02:168:fedc:0:4961:9552:50a:6c11) (Ping timeout: 250 seconds)
[08:45:27] *** Quits: gline_ (~yashi@p508be605.dip0.t-ipconnect.de) (Ping timeout: 268 seconds)
[08:46:58] *** Quits: m_tadeu (~quassel@85.247.187.233) (Ping timeout: 252 seconds)
[08:47:45] *** Quits: hendursaga (~weechat@user/hendursaga) (Remote host closed the connection)
[08:48:13] *** Joins: hendursaga (~weechat@user/hendursaga)
[08:49:02] *** Quits: gggp (~textual@60.10.194.47) (Ping timeout: 272 seconds)
[08:52:21] *** Joins: rannnn8888 (~rannnn888@bzq-79-182-123-214.red.bezeqint.net)
[08:52:50] *** Quits: mefistofeles (~mefistofe@user/mefistofeles) (Ping timeout: 272 seconds)
[08:52:50] *** Quits: computeiro (~Wender@189.37.69.220) (Ping timeout: 252 seconds)
[08:53:38] <rannnn8888> Hey if want make multi therd , but diffrent script ? i need use concurrent.futures or only therding ?
[08:54:38] *** Quits: pwnd_sfw (~pwnd_sfw@ool-18b88100.dyn.optonline.net) (Quit: Ping timeout (120 seconds))
[08:54:44] *** Quits: cliluw (~cliluw@47.147.80.149) (Ping timeout: 272 seconds)
[08:55:04] *** Joins: cliluw (~cliluw@47.147.80.149)
[08:55:23] *** Joins: pwnd_sfw (~pwnd_sfw@ool-18b88100.dyn.optonline.net)
[08:55:36] *** Joins: pagnol (~user@202.155.216.98)
[08:56:07] *** Quits: aleph (~aleph@pool-98-116-232-112.nycmny.fios.verizon.net) (Quit: WeeChat info:version)
[08:56:59] *** Joins: pneff (~pneff@2a02:168:fedc:0:4961:9552:50a:6c11)
[09:02:43] *** Quits: pneff (~pneff@2a02:168:fedc:0:4961:9552:50a:6c11) (Ping timeout: 268 seconds)
[09:05:30] *** Joins: pnoud (~pnoud@user/pnoud)
[09:06:02] *** Quits: Kaedenn (~kaedenn@137.229.82.89) (Ping timeout: 252 seconds)
[09:07:13] *** Quits: heco (~redrum@user/redrum88) (Quit: Going offline, see ya! (www.adiirc.com))
[09:08:33] *** Joins: Gurkenglas (~Gurkengla@dslb-002-203-144-156.002.203.pools.vodafone-ip.de)
[09:11:49] *** Joins: ttys000 (~ttys000@user/ttys000)
[09:12:26] *** Quits: noctavian (~noctavian@gateway/tor-sasl/noctavian) (Ping timeout: 244 seconds)
[09:13:41] *** Joins: noctavian (~noctavian@gateway/tor-sasl/noctavian)
[09:14:12] *** Joins: boB_K7IQ (~boB_K7IQ@c-73-254-117-91.hsd1.wa.comcast.net)
[09:14:14] *** Joins: pneff (~pneff@2a02:168:fedc:0:4961:9552:50a:6c11)
[09:16:54] *** Quits: lukka5 (~lukka5@246-60-231-201.fibertel.com.ar) (Ping timeout: 272 seconds)
[09:17:29] *** Quits: MrFantastik (~Thunderbi@cpe-69-204-101-67.buffalo.res.rr.com) (Quit: MrFantastik)
[09:17:44] <Samian> you know what would be cool? To be able to set breakpoints in both python and c++ code
[09:17:53] *** Joins: MrFantastik (~Thunderbi@cpe-69-204-101-67.buffalo.res.rr.com)
[09:18:11] <Samian> it would be awesome if I could set a breakpoint at a python call, and then step into it and step through the c++ code
[09:18:17] <Samian> like a numpy call
[09:18:49] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 258 seconds)
[09:21:12] *** Quits: kickingvegas (~cchoi@c-24-5-40-20.hsd1.ca.comcast.net) (Quit: leaving)
[09:22:12] *** Quits: kostkon_ (~kostkon@2a02:587:a100:18e:9fe3:794:a225:7cdb) (Remote host closed the connection)
[09:22:21] *** Joins: kostkon__ (~kostkon@2a02:587:a100:18e:9fe3:794:a225:7cdb)
[09:22:40] *** Quits: pneff (~pneff@2a02:168:fedc:0:4961:9552:50a:6c11) (Ping timeout: 250 seconds)
[09:23:43] *** Joins: wyclif (~wyclif@user/wyclif)
[09:32:31] *** Joins: gggp (~textual@60.10.194.47)
[09:32:41] *** Quits: i0e (~is0ke3@user/is0ke3) (Quit: Zzzzzz.....)
[09:33:23] *** Joins: stranac (~stranac@195.29.239.126)
[09:34:25] *** Joins: maum (~maum@112.166.1.194)
[09:34:27] <maum> hello
[09:34:39] <maum> how can I convert [a, [b, [c]], d, e] to [a, b,c ,d,e]
[09:34:59] *** Quits: Celeo (~Celeo@user/celeo) (Quit: Leaving)
[09:36:09] *** Joins: pneff (~pneff@2a02:168:fedc:0:4961:9552:50a:6c11)
[09:36:12] *** Joins: lukka5 (~lukka5@246-60-231-201.fibertel.com.ar)
[09:37:04] *** Quits: gggp (~textual@60.10.194.47) (Ping timeout: 265 seconds)
[09:38:34] <pagnol> maum: it's typically called 'flattening'
[09:38:49] <pagnol> if you google it, you'll find tons of answers
[09:39:21] *** Quits: derelict (~derelict@user/derelict) (Quit: WeeChat 3.2)
[09:39:43] *** Quits: et (~et@user/et) (Read error: Connection reset by peer)
[09:41:39] <Samian> maum  recursive flattening
[09:42:12] *** Quits: lukka5 (~lukka5@246-60-231-201.fibertel.com.ar) (Ping timeout: 258 seconds)
[09:42:33] *** Joins: et (~et@user/et)
[09:42:56] *** Quits: female_student_4 (~female_st@2a01:388:243:150::1:51) (Quit: Client closed)
[09:44:00] *** Joins: deepfield (~deepfield@104.237.203.149)
[09:45:01] <Jonno_FTW> maum: think about how you would do it manually, then write it in code
[09:48:20] *** Joins: kostkon_ (~kostkon@2a02:587:a100:18e:9fe3:794:a225:7cdb)
[09:49:38] *** Quits: GadgetNerd (~GadgetNer@user/gadgetnerd) (Quit: ZNC 1.7.5+deb4 - https://znc.in)
[09:51:52] *** Quits: slowButPresent (~slowButPr@user/slowbutpresent) (Quit: leaving)
[09:52:28] *** Quits: et (~et@user/et) (Read error: Connection reset by peer)
[09:52:40] *** Quits: pneff (~pneff@2a02:168:fedc:0:4961:9552:50a:6c11) (Ping timeout: 268 seconds)
[09:52:41] *** Quits: kostkon__ (~kostkon@2a02:587:a100:18e:9fe3:794:a225:7cdb) (Ping timeout: 268 seconds)
[09:54:02] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[09:55:17] *** Joins: djapo (~archangel@user/djapo)
[09:55:18] *** Joins: et (~et@user/et)
[10:00:10] *** Joins: ShawnB (~ShawnB@cpe-66-25-137-231.satx.res.rr.com)
[10:01:41] <jim> hi, not sure if you'd know... but, is anyone aware of a django project called wger?
[10:03:50] *** Joins: gggp (~textual@60.10.194.47)
[10:05:07] *** Joins: pneff (~pneff@2a02:168:fedc:0:4961:9552:50a:6c11)
[10:08:28] <pagnol> jim: what is your question?
[10:08:29] *** Quits: gggp (~textual@60.10.194.47) (Ping timeout: 265 seconds)
[10:09:15] <pagnol> join /#sqlalchemy
[10:09:54] *** Quits: pneff (~pneff@2a02:168:fedc:0:4961:9552:50a:6c11) (Ping timeout: 250 seconds)
[10:10:00] *** Joins: derelict (~derelict@user/derelict)
[10:10:28] <jim> pagnol, where to find folks to talk to about it
[10:11:11] <jim> pagnol, the / goes before join, not before the channel
[10:12:25] *** Joins: kostkon (~kostkon@2a02:587:a100:18e:9fe3:794:a225:7cdb)
[10:12:32] *** Quits: kostkon_ (~kostkon@2a02:587:a100:18e:9fe3:794:a225:7cdb) (Read error: No route to host)
[10:12:50] *** Quits: ShawnB (~ShawnB@cpe-66-25-137-231.satx.res.rr.com) (Remote host closed the connection)
[10:14:13] *** Quits: maum (~maum@112.166.1.194) (Quit: Client closed)
[10:15:19] <pagnol> jim: I suppose you could post an Issue
[10:15:31] <pagnol> on the project's github
[10:15:41] *** Joins: mkv (~znc@ubuntu/member/m4v)
[10:15:43] *** Quits: m4v (~znc@ubuntu/member/m4v) (Ping timeout: 246 seconds)
[10:15:43] *** mkv is now known as m4v
[10:15:50] *** Quits: et (~et@user/et) (Read error: Connection reset by peer)
[10:16:25] *** Joins: kostkon_ (~kostkon@2a02:587:a100:18e:9fe3:794:a225:7cdb)
[10:17:47] *** Quits: kostkon (~kostkon@2a02:587:a100:18e:9fe3:794:a225:7cdb) (Remote host closed the connection)
[10:18:22] <pagnol> or maybe their Discord
[10:18:43] *** Joins: K285 (~K285@2401:4900:30cb:c77a:8dd6:9b22:3f6c:585c)
[10:19:36] <jim> pagnol, my thing doesn't rise to the level of being an issue for them to solve :)
[10:19:59] <jim> they have a discord? do you know the link?
[10:20:02] *** Joins: gggp (~textual@60.10.194.47)
[10:20:10] <pagnol> it's on their Github
[10:20:21] *** Joins: kostkon (~kostkon@2a02:587:a100:18e:9fe3:794:a225:7cdb)
[10:20:21] <pagnol> https://discord.gg/rPWFv6W
[10:20:48] *** Joins: et (~et@user/et)
[10:21:41] *** Quits: et (~et@user/et) (Read error: Connection reset by peer)
[10:21:45] *** Joins: xcombelle (~xavie@176-139-252-198.abo.bbox.fr)
[10:22:12] *** Quits: kostkon (~kostkon@2a02:587:a100:18e:9fe3:794:a225:7cdb) (Read error: No route to host)
[10:22:21] *** Joins: kostkon (~kostkon@2a02:587:a100:18e:9fe3:794:a225:7cdb)
[10:22:22] *** Joins: alguien (~alguien@user/alguien)
[10:22:31] *** Joins: pneff (~pneff@2a02:168:fedc:0:4961:9552:50a:6c11)
[10:22:47] *** Quits: kostkon_ (~kostkon@2a02:587:a100:18e:9fe3:794:a225:7cdb) (Ping timeout: 272 seconds)
[10:23:17] *** litharge sets mode: -b $a:mastardet
[10:23:56] <pagnol> anyone know of SQLAlchemy has affordances with the following table inheritance pattern: there's a table Animal with foreign keys to Horse, Duck and Pig and exactly one is not null
[10:24:10] <pagnol> *has affordances for working with ...
[10:24:21] *** Joins: kostkon_ (~kostkon@2a02:587:a100:18e:9fe3:794:a225:7cdb)
[10:24:23] *** Quits: cjb (~cjb@user/cjb) (Quit: end of day)
[10:24:45] *** Joins: fedenix (~fedenix@gateway/tor-sasl/fedenix)
[10:24:55] *** Quits: gggp (~textual@60.10.194.47) (Ping timeout: 265 seconds)
[10:25:07] *** Quits: Deknos (~someone@user/menace) (Quit: Deknos)
[10:25:36] *** Quits: kostkon (~kostkon@2a02:587:a100:18e:9fe3:794:a225:7cdb) (Read error: No route to host)
[10:26:53] *** Joins: et (~et@user/et)
[10:27:33] *** Quits: pneff (~pneff@2a02:168:fedc:0:4961:9552:50a:6c11) (Ping timeout: 268 seconds)
[10:27:59] *** Joins: pneff (~pneff@2a02:168:fedc:0:4961:9552:50a:6c11)
[10:28:12] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 258 seconds)
[10:28:18] *** Quits: Lando-SpacePimp (~LandoC@user/lando-spacepimp) (Ping timeout: 265 seconds)
[10:28:32] *** Quits: Jigsy (~Jigsy@user/jigsy) (Quit: brb.)
[10:30:28] *** Joins: lukka5 (~lukka5@246-60-231-201.fibertel.com.ar)
[10:31:00] *** Quits: semanticz0 (~semanticz@202.164.136.255) (Ping timeout: 272 seconds)
[10:33:49] *** Joins: Jigsy (~Jigsy@user/jigsy)
[10:34:20] *** Joins: rememberYou (~someone@user/rememberyou)
[10:35:26] *** Quits: lukka5 (~lukka5@246-60-231-201.fibertel.com.ar) (Ping timeout: 272 seconds)
[10:35:52] *** Joins: gggp (~textual@60.10.194.47)
[10:36:19] <lavadonut> https://matplotlib.org/stable/gallery/subplots_axes_and_figures/subplots_demo.html
[10:36:33] <lavadonut> howo do i change the font size of y-label? the usual methods don't work
[10:36:47] <lavadonut> under "Stacking subplots in two directions"
[10:37:39] *** Quits: FluffyMask (~FluffyMas@user/fluffymask) (Quit: WeeChat 2.9)
[10:39:05] <lavadonut> how*
[10:40:30] *** Quits: gggp (~textual@60.10.194.47) (Ping timeout: 272 seconds)
[10:41:43] *** Joins: shabius_ (~shabius@2a0e:1c80:2:1022::1005)
[10:42:35] *** Joins: semanticz0 (~semanticz@202.164.136.255)
[10:43:55] *** Quits: neibo (~neibo@86.127.240.9) (Ping timeout: 258 seconds)
[10:44:14] *** Joins: Mulugruntz (~Mulugrunt@2400:4152:2063:3100:b0b6:5979:6e0:c4a2)
[10:45:05] *** Quits: shabius (~shabius@2a0e:1c80:2:1022::1004) (Ping timeout: 268 seconds)
[10:45:26] *** Quits: penguino (~mrpenguin@user/mrpenguin) (Ping timeout: 244 seconds)
[10:45:37] *** Joins: neibo (~neibo@86.127.233.60)
[10:46:30] *** Quits: kostkon_ (~kostkon@2a02:587:a100:18e:9fe3:794:a225:7cdb) (Remote host closed the connection)
[10:46:40] *** Joins: node1 (~node1@user/node1)
[10:46:49] *** Joins: kostkon_ (~kostkon@2a02:587:a100:18e:9fe3:794:a225:7cdb)
[10:47:02] *** Quits: seednode (~seednode@user/seednode) (Quit: Nihil supernum.)
[10:47:47] *** Joins: seednode (~seednode@user/seednode)
[10:48:50] *** Joins: Julian (~tos9@python/site-packages/Julian)
[10:49:40] *** Quits: djapo (~archangel@user/djapo) (Ping timeout: 258 seconds)
[10:49:51] *** Joins: kostkon__ (~kostkon@2a02:587:a100:18e:9fe3:794:a225:7cdb)
[10:50:05] <pagnol> lavadonut: can you show the code that doesn't work?
[10:50:10] *** Joins: palasso (~palasso@user/palasso)
[10:51:33] *** Quits: neibo (~neibo@86.127.233.60) (Ping timeout: 268 seconds)
[10:53:06] *** Quits: kostkon_ (~kostkon@2a02:587:a100:18e:9fe3:794:a225:7cdb) (Ping timeout: 268 seconds)
[10:53:14] *** Joins: neibo (~neibo@86.127.241.4)
[10:54:51] <lavadonut> from the part under "Stacking subplots in two directions", i changed it to ax.set(xlabel='x-label', ylabel='y-label', fontsize=20)
[10:55:19] <lavadonut> AttributeError: 'AxesSubplot'  object has no property 'fontsize'
[10:55:39] <lavadonut> i also tried to add it outside of that for loop with like ax.set_ylabel or something
[10:55:45] *** Quits: rememberYou (~someone@user/rememberyou) (Remote host closed the connection)
[10:57:07] *** Joins: gggpkm (~gggpkm@60.10.194.47)
[10:57:12] *** Joins: rendar (~rendar@user/rendar)
[10:57:14] *** A_Dragon is now known as nogarD_A
[10:57:24] *** Joins: rememberYou (~someone@user/rememberyou)
[10:57:27] *** Joins: n00b101 (uid448161@id-448161.tooting.irccloud.com)
[10:57:32] <gggpkm> how about unicorn
[10:57:32] *** Joins: gusto (~Augustus@109.255.100.54)
[10:58:10] <pagnol> lavadonut: is the fontsize keyword argument being mentioned in the docs anywhere or did you just guess?
[10:59:05] <lavadonut> i tried to look up a page for that ax.set, couldn't find
[10:59:12] <lavadonut> so i pasted in stuff from other (non-sub) plots that worked before
[10:59:20] *** Quits: LiftLeft (~LiftLeft@154.21.114.200) (Ping timeout: 252 seconds)
[10:59:37] <themill> lavadonut: you can use the fontsize keyword if you set_xlabel('label', fontsize=…) separately. Alternatively you can put it into the matplotlib config via rcParams
[10:59:42] *** Joins: kosh (~kosh@user/kosh)
[11:01:28] <lavadonut> i tried axs[0,0].set(ylabel='text',fontsize=20) and get the same error
[11:01:42] <lavadonut> oh wait
[11:01:52] *** Joins: LemurP (~lemurp@109.74.190.250)
[11:02:12] <lavadonut> the set_xlabel works
[11:02:17] <lavadonut> thank you :DD
[11:05:10] *** Joins: manti7 (~manti7@176.10.104.94)
[11:06:43] *** Joins: especial (~especial@2a0a:51c0:0:1f:67a7::2)
[11:07:28] *** Joins: gggp (~textual@60.10.194.47)
[11:07:35] *** Quits: K285 (~K285@2401:4900:30cb:c77a:8dd6:9b22:3f6c:585c) (Quit: Client closed)
[11:08:43] *** Joins: semeion (~semeion@user/semeion)
[11:11:33] *** Joins: justinf210 (~justinf21@192-230-160-245.3rivers.net)
[11:11:54] *** Quits: gggp (~textual@60.10.194.47) (Ping timeout: 258 seconds)
[11:14:10] *** Joins: Deknos (~someone@user/menace)
[11:15:22] *** Joins: blindguard (~blindguar@2a02:908:1864:c200::4ec1)
[11:15:44] *** Quits: gggpkm (~gggpkm@60.10.194.47) (Ping timeout: 258 seconds)
[11:16:16] *** Joins: venmx (~bertie@host81-155-235-58.range81-155.btcentralplus.com)
[11:17:23] <Ronalds_Mazitis_> hey
[11:17:35] <Ronalds_Mazitis_> I installed pythreejs
[11:17:40] <Ronalds_Mazitis_> on virtualenv
[11:17:46] <Ronalds_Mazitis_> how do I use it
[11:17:47] <Ronalds_Mazitis_> ?
[11:18:21] *** Joins: bungle (~bungle@77-147-16-94.dyn.cable.fcom.ch)
[11:18:22] *** Joins: djapo (~archangel@user/djapo)
[11:18:41] *** Quits: thiras (~thiras@user/thiras) (Ping timeout: 268 seconds)
[11:18:47] <Ronalds_Mazitis_> https://pythreejs.readthedocs.io/en/stable/introduction.html
[11:19:00] <Ronalds_Mazitis_> I don't see how to use it to compile and run anything
[11:20:58] *** Quits: venmx (~bertie@host81-155-235-58.range81-155.btcentralplus.com) (Ping timeout: 252 seconds)
[11:24:37] *** Joins: lukka5 (~lukka5@246-60-231-201.fibertel.com.ar)
[11:24:41] <lavadonut> how do i make jupyter make a microwave 'ping' sound when long code finishes running
[11:24:43] *** Joins: rajkosto (~rajkosto@cable-178-149-127-189.dynamic.sbb.rs)
[11:26:06] *** Joins: Seiryuu (~Seiryuu@ip174-103-176-143.adsl2.static.versatel.nl)
[11:26:48] *** Joins: gggp (~textual@60.10.194.47)
[11:26:56] *** Quits: Seiryuu (~Seiryuu@ip174-103-176-143.adsl2.static.versatel.nl) (Client Quit)
[11:27:48] *** Quits: someguy123 (~someguy@user/someguy123) (Read error: Connection reset by peer)
[11:28:05] *** Joins: someguy123 (~someguy@user/someguy123)
[11:29:24] *** Quits: lukka5 (~lukka5@246-60-231-201.fibertel.com.ar) (Ping timeout: 252 seconds)
[11:30:03] *** Joins: ponadm_ (pony@gateway/vpn/protonvpn/ponadm)
[11:31:55] *** Joins: afidegnum (~user@102.176.94.23)
[11:33:31] *** Quits: afidegnum (~user@102.176.94.23) (Remote host closed the connection)
[11:35:33] *** Joins: lsrtl (~lsrtl@user/lsrtl)
[11:36:00] *** Quits: djapo (~archangel@user/djapo) (Ping timeout: 252 seconds)
[11:36:30] *** Quits: kostkon__ (~kostkon@2a02:587:a100:18e:9fe3:794:a225:7cdb) (Remote host closed the connection)
[11:36:38] *** Quits: rajkosto (~rajkosto@cable-178-149-127-189.dynamic.sbb.rs) (Read error: Connection reset by peer)
[11:36:49] *** Joins: kostkon__ (~kostkon@2a02:587:a100:18e:9fe3:794:a225:7cdb)
[11:37:54] *** Quits: pnoud (~pnoud@user/pnoud) (Ping timeout: 265 seconds)
[11:38:00] <BrenBarn> Ronalds: it looks like you're supposed to use it in Jupyter notebook: https://github.com/jupyter-widgets/pythreejs
[11:39:24] *** Quits: LemurP (~lemurp@109.74.190.250) (Ping timeout: 272 seconds)
[11:41:04] *** Joins: lsrtl_ (~lsrtl@user/lsrtl)
[11:41:37] *** Joins: Laibsch (~leggewie@dynamic-093-133-112-192.93.133.pool.telefonica.de)
[11:43:06] *** Joins: szymon (~ugh@staticline-31-183-187-232.toya.net.pl)
[11:43:58] *** Quits: lsrtl (~lsrtl@user/lsrtl) (Ping timeout: 268 seconds)
[11:44:54] *** Quits: derelict (~derelict@user/derelict) (Ping timeout: 268 seconds)
[11:45:06] *** Joins: pnoud (~pnoud@user/pnoud)
[11:45:51] *** Quits: bigRoo (~user@131.236.54.84) (Remote host closed the connection)
[11:47:10] *** Quits: pagnol (~user@202.155.216.98) (Ping timeout: 258 seconds)
[11:48:10] *** Joins: bindu (bindu@user/bindu)
[11:49:18] *** Quits: taylan (~taylan@user/taylan) (Quit: Leaving)
[11:49:34] *** Quits: ponadm_ (pony@gateway/vpn/protonvpn/ponadm) (Ping timeout: 252 seconds)
[11:50:08] *** Joins: magla (~gelignite@55d43d25.access.ecotel.net)
[11:50:18] <Ronalds_Mazitis_> BrenBarn it does not explain
[11:50:21] <Ronalds_Mazitis_> how to launch it
[11:51:46] *** Joins: LemurP (~lemurp@109.74.190.250)
[11:53:49] *** Joins: pagnol (~user@014198154145.ctinets.com)
[11:54:10] *** Joins: chele (~chele@user/chele)
[11:54:20] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 265 seconds)
[11:54:52] *** Joins: NeoCore (~neocore@45.152.181.180)
[11:57:33] *** Joins: mnemonic (~semeion@user/semeion)
[12:00:10] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[12:00:12] *** Quits: semeion (~semeion@user/semeion) (Ping timeout: 252 seconds)
[12:00:12] *** Joins: goldfish (~goldfish@user/goldfish)
[12:00:15] *** Joins: GreenResponse (~tomek@r-45-155-148-237.gpon.bialnet.pl)
[12:00:32] *** Joins: brylie (~Thunderbi@88-114-218-116.elisa-laajakaista.fi)
[12:02:00] *** Quits: kostkon__ (~kostkon@2a02:587:a100:18e:9fe3:794:a225:7cdb) (Remote host closed the connection)
[12:02:19] *** Joins: kostkon__ (~kostkon@2a02:587:a100:18e:9fe3:794:a225:7cdb)
[12:05:22] *** Quits: mxp (~mxp@94.140.11.43) (Ping timeout: 272 seconds)
[12:06:04] *** Joins: Gerula (~Gerula@user/gerula)
[12:06:34] *** Joins: wyclif (~wyclif@user/wyclif)
[12:06:39] *** Joins: mxp (~mxp@94.140.11.46)
[12:06:40] *** Joins: cedric (~cedric@2a01:cb11:867:c200:8247:2715:2cee:69e1)
[12:07:11] *** Joins: venmx (~bertie@host81-155-235-58.range81-155.btcentralplus.com)
[12:08:32] *** Quits: goldfish (~goldfish@user/goldfish) (Ping timeout: 272 seconds)
[12:11:40] *** Joins: wattux (~wattux@212.51.23.106)
[12:11:44] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 265 seconds)
[12:11:56] *** Quits: venmx (~bertie@host81-155-235-58.range81-155.btcentralplus.com) (Ping timeout: 252 seconds)
[12:12:06] *** Joins: securethemews (~securethe@2a00:23c4:1e98:ef00::4)
[12:14:27] *** Joins: IceMichael (~IceMichae@dynamic-046-114-152-238.46.114.pool.telefonica.de)
[12:16:08] *** Quits: bungle (~bungle@77-147-16-94.dyn.cable.fcom.ch) (Ping timeout: 272 seconds)
[12:18:45] *** Joins: lukka5 (~lukka5@246-60-231-201.fibertel.com.ar)
[12:20:36] *** Joins: Norore (~weechat@2a01:e0a:23a:5600:b9d3:ae19:12de:25b)
[12:21:53] *** nogarD_A is now known as A_Dragon
[12:22:35] *** Joins: Nalt (~Nalt|||@162-239-107-41.lightspeed.rcsntx.sbcglobal.net)
[12:23:18] *** Quits: lukka5 (~lukka5@246-60-231-201.fibertel.com.ar) (Ping timeout: 252 seconds)
[12:23:25] *** Joins: wyclif (~wyclif@user/wyclif)
[12:25:22] *** Quits: gggp (~textual@60.10.194.47) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[12:26:49] *** Joins: bungle (~bungle@77-147-16-94.dyn.cable.fcom.ch)
[12:27:50] *** Quits: mnemonic (~semeion@user/semeion) (Quit: WeeChat 3.2)
[12:28:04] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[12:28:48] *** Quits: gr33n7007h (~gr33n7007@user/gr33n7007h) (Quit: WeeChat 3.2)
[12:29:26] *** Quits: audiocat (~audio@2603-8081-1800-eb5b-f4a2-2347-4507-53d6.res6.spectrum.com) (Ping timeout: 250 seconds)
[12:30:33] *** Joins: varaindemian (~varaindem@86.124.78.162)
[12:35:14] *** Joins: shad (~shad@user/shad)
[12:35:46] *** Quits: Nalt (~Nalt|||@162-239-107-41.lightspeed.rcsntx.sbcglobal.net) (Ping timeout: 268 seconds)
[12:36:03] *** Joins: hyperknot (~hyperknot@dynamic-046-114-093-226.46.114.pool.telefonica.de)
[12:36:34] *** Joins: hendursa1 (~weechat@user/hendursaga)
[12:36:49] *** Quits: iomari891 (~iomari891@105.112.138.38) (Quit: WeeChat 3.0.1)
[12:39:15] *** Quits: artemon (~artemon@2001:470:69fc:105::87c) (Quit: Bridge terminating on SIGTERM)
[12:39:15] *** Quits: psydroid (~psydroid@user/psydroid) (Quit: Bridge terminating on SIGTERM)
[12:39:15] *** Quits: bgardner (~bgardner@2001:470:69fc:105::8a8) (Quit: Bridge terminating on SIGTERM)
[12:39:15] *** Quits: archwizard (~archwizar@2001:470:69fc:105::929) (Quit: Bridge terminating on SIGTERM)
[12:39:15] *** Quits: evidlo (~evidlo@2001:470:69fc:105::7fc) (Quit: Bridge terminating on SIGTERM)
[12:39:15] *** Quits: meain (~meain@2001:470:69fc:105::2db) (Quit: Bridge terminating on SIGTERM)
[12:39:16] *** Quits: diegov (~diegov@2001:470:69fc:105::103f) (Quit: Bridge terminating on SIGTERM)
[12:39:16] *** Quits: ubh (~ubh@2001:470:69fc:105::852) (Quit: Bridge terminating on SIGTERM)
[12:39:16] *** Quits: penguinbrian (~penguinbr@2001:470:69fc:105::33d2) (Quit: Bridge terminating on SIGTERM)
[12:39:16] *** Quits: PantelicGR2 (~pantelicg@user/pantelicgr) (Quit: Bridge terminating on SIGTERM)
[12:39:17] *** Quits: ronny (~ronny@2001:470:69fc:105::b57) (Quit: Bridge terminating on SIGTERM)
[12:39:17] *** Quits: BrenBarn (~brenbarn@2001:470:69fc:105::2da2) (Quit: Bridge terminating on SIGTERM)
[12:39:19] *** Quits: orbatos[m] (~orbatos@user/orbatos) (Quit: Bridge terminating on SIGTERM)
[12:39:19] *** Quits: jwon (~jwon@user/jwon) (Quit: Bridge terminating on SIGTERM)
[12:39:19] *** Quits: meatballs (~meatballs@2001:470:69fc:105::633) (Quit: Bridge terminating on SIGTERM)
[12:39:25] *** Quits: dontwannatell[m] (~dontwanna@2001:470:69fc:105::c27) (Quit: Bridge terminating on SIGTERM)
[12:39:25] *** Quits: cecep[m] (~cecep@2001:470:69fc:105::3994) (Quit: Bridge terminating on SIGTERM)
[12:39:29] *** Quits: syphar (~syphar@2001:470:69fc:105::2ad6) (Quit: Bridge terminating on SIGTERM)
[12:39:37] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 244 seconds)
[12:39:44] *** Joins: wyclif (~wyclif@user/wyclif)
[12:40:04] *** Quits: AM (~techman@87-94-110-215.bb.dnainternet.fi) (Ping timeout: 258 seconds)
[12:40:24] *** Quits: kostkon__ (~kostkon@2a02:587:a100:18e:9fe3:794:a225:7cdb) (Ping timeout: 268 seconds)
[12:41:25] *** Joins: kostkon (~kostkon@2a02:587:a100:18e:9fe3:794:a225:7cdb)
[12:42:06] *** Quits: twobitsprite (~twobitspr@107.13.51.62) (Ping timeout: 272 seconds)
[12:43:54] *** Quits: mogad0n (~mogad0n@user/mogad0n) (Ping timeout: 240 seconds)
[12:44:09] *** Joins: hegstal (~hegstal@2a02:c7f:7604:8a00:cf3c:697d:723b:8aac)
[12:45:06] *** Joins: mogad0n (~mogad0n@user/mogad0n)
[12:45:16] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 272 seconds)
[12:45:37] *** Quits: kostkon (~kostkon@2a02:587:a100:18e:9fe3:794:a225:7cdb) (Remote host closed the connection)
[12:46:25] *** Joins: kostkon (~kostkon@2a02:587:a100:18e:9fe3:794:a225:7cdb)
[12:47:59] *** Joins: iomari891 (~iomari891@105.112.138.38)
[12:48:19] *** Joins: upsala (~zcb@185.213.155.160)
[12:48:22] *** Quits: Quack (~Quack@185.21.216.169) (Quit: Hunters spotted)
[12:48:36] *** Quits: Gurkenglas (~Gurkengla@dslb-002-203-144-156.002.203.pools.vodafone-ip.de) (Ping timeout: 252 seconds)
[12:49:31] *** Joins: wyclif (~wyclif@user/wyclif)
[12:50:16] *** Quits: adanwan (~adanwan@gateway/tor-sasl/adanwan) (Remote host closed the connection)
[12:50:53] *** Joins: amahl (~amahl@dsl-jklbng12-54fbca-64.dhcp.inet.fi)
[12:51:07] *** Joins: m_tadeu (~quassel@bl14-187-233.dsl.telepac.pt)
[12:51:08] *** Joins: Quack (~Quack@185.21.216.169)
[12:51:19] *** Joins: adanwan (~adanwan@gateway/tor-sasl/adanwan)
[12:51:35] *** Quits: kostkon (~kostkon@2a02:587:a100:18e:9fe3:794:a225:7cdb) (Remote host closed the connection)
[12:51:44] *** Joins: kostkon (~kostkon@2a02:587:a100:18e:9fe3:794:a225:7cdb)
[12:52:20] *** Quits: onu (~onufn@gibbs.uberspace.de) (Ping timeout: 265 seconds)
[12:52:20] *** Quits: dibas (~dibas@user/dibas) (Ping timeout: 265 seconds)
[12:53:00] *** Joins: YaknotiS (~YaknotiS@user/yaknotis)
[12:53:45] *** Quits: m_tadeu (~quassel@bl14-187-233.dsl.telepac.pt) (Read error: No route to host)
[12:54:00] *** Joins: m_tadeu (~quassel@bl14-187-233.dsl.telepac.pt)
[12:54:29] <shad> Hi, i'm writing a little CLI program to automate dumping and rotation of my PSQL backups inside Docker. This is what I've went with so far: https://bpa.st/4BNQ  Any idea how to redirect the docker stdout (ie: my pg_dump) to a file ?
[12:54:30] *** Quits: kostkon (~kostkon@2a02:587:a100:18e:9fe3:794:a225:7cdb) (Read error: Connection reset by peer)
[12:54:49] *** Joins: kostkon (~kostkon@2a02:587:a100:18e:9fe3:794:a225:7cdb)
[12:55:08] *** Quits: securethemews (~securethe@2a00:23c4:1e98:ef00::4) (Remote host closed the connection)
[12:55:34] *** Quits: wattux (~wattux@212.51.23.106) (Quit: Client closed)
[12:56:07] *** Joins: gggp (~textual@124.126.15.211)
[12:57:02] *** Quits: reset (~reset@user/reset) (Quit: reset)
[12:58:00] *** Quits: kostkon (~kostkon@2a02:587:a100:18e:9fe3:794:a225:7cdb) (Read error: Connection reset by peer)
[12:58:11] *** Quits: brylie (~Thunderbi@88-114-218-116.elisa-laajakaista.fi) (Quit: brylie)
[12:58:20] *** Joins: kostkon (~kostkon@2a02:587:a100:18e:9fe3:794:a225:7cdb)
[12:58:38] *** Joins: CalimeroTeknik (~calimero@user/calimeroteknik)
[13:00:42] *** Quits: gggp (~textual@124.126.15.211) (Ping timeout: 252 seconds)
[13:01:06] *** Quits: pnoud (~pnoud@user/pnoud) (Ping timeout: 272 seconds)
[13:03:34] *** Joins: plastico (~plastico@2001:8a0:de6b:1a00:9d14:766e:70a8:dcea)
[13:03:52] <jor> shad: you can just pass a -f option to pg_dump
[13:05:18] <shad> jor: what I can achieve can be done in less than 10 lines of shell
[13:05:46] <shad> Do i want it though ? Nah. That's why i went for python
[13:06:01] *** Joins: Luyin (~daisy@user/luyin)
[13:06:56] <shad> This code is intended to be delivered to many servers via Ansible, so i'd rather write more readable lines in python than maintain an unbearable shell script. Also I figured out i can't "just" give a file descriptor to stdout, and learn a new trick in python: generators !
[13:07:04] *** Joins: JimMadge (~jim@host86-141-21-184.range86-141.btcentralplus.com)
[13:07:27] <shad> exit_code, output = client.containers.get(psql).exec_run(cmd, stream=True) ; for chunk in output: fd.write(chunk) fixed my issue
[13:07:51] <Luyin> hi, I want to use pylint with my package. when I ran it, it warned me "foo/io/__init__.py:1:0: C0114: Missing module docstring (missing-module-docstring)". So I moved the docstring from io.py to __init__.py. Now when I run pylint, I get "voice_dataset/io/io.py:1:0: C0114: Missing module docstring (missing-module-docstring)". I'm confused where to put the docstring now - in both places seems
[13:07:53] <Luyin> unnecessarily redundant.
[13:08:11] <Luyin> s/foo/voice_dataset/
[13:08:14] *** Joins: mcope (~matt@user/mcope)
[13:08:49] *** Joins: swistak (~swistak@185.21.216.141)
[13:09:13] *** Joins: Ninpo (~Ninpo@charlton.qap.la)
[13:09:49] *** Quits: kostkon (~kostkon@2a02:587:a100:18e:9fe3:794:a225:7cdb) (Read error: Connection reset by peer)
[13:09:57] *** Joins: kostkon_ (~kostkon@2a02:587:a100:18e:9fe3:794:a225:7cdb)
[13:11:21] <jinsun> pylint is a bit too noisy by default, you are expected to turn off the things you don't like with comments or config file
[13:11:38] <Luyin> ah okay
[13:12:06] <Luyin> so is there like a best practice as to where to have the docstrings? I'd rather have it in io.py instead of the __init__ because I feel the latter is less likely to be looked into
[13:12:38] <jinsun> but here it is not really redundant, __init__.py is supposed to document your foo.io module, and io.py is supposed to document foo.io.io
[13:12:54] *** Joins: lukka5 (~lukka5@246-60-231-201.fibertel.com.ar)
[13:13:24] <Luyin> wait, to be clear: I have several __init__s
[13:13:31] <Luyin> one in foo/, one in foo/io/
[13:13:51] <Luyin> and I don't want the docstring for foo/io/ to be in both foo/io/io.py and foo/io/__init__.py
[13:13:55] <Luyin> that's what I mean
[13:14:19] *** Quits: justinf210 (~justinf21@192-230-160-245.3rivers.net) (Remote host closed the connection)
[13:14:25] <jinsun> ok so the init inside foo is supposed to docuement foo, and init inside foo/io is supposed to document foo.io
[13:14:54] <jinsun> and if you have foo/io/io.py then the docstring in that is supposed to document foo.io.io
[13:16:16] *** Joins: kostkon__ (~kostkon@2a02:587:a100:18e:9fe3:794:a225:7cdb)
[13:16:16] *** Quits: kostkon_ (~kostkon@2a02:587:a100:18e:9fe3:794:a225:7cdb) (Remote host closed the connection)
[13:16:45] *** Joins: gareppa (~gareppa@user/gareppa)
[13:16:54] <jinsun> also pylint will not ask for docstrings for anything starting with a single underscore, so if your io.py is internal you can name it as _io.py, then pylint will not ask docstring for that
[13:17:25] <Luyin> hmmm
[13:17:46] *** Joins: anddt (~anddt@net-93-144-12-118.cust.vodafonedsl.it)
[13:17:49] *** Quits: lukka5 (~lukka5@246-60-231-201.fibertel.com.ar) (Ping timeout: 256 seconds)
[13:17:56] *** Joins: Abrax (~Abrax@user/abrax)
[13:18:02] <Luyin> but foo.io.io is imported in foo.io.__init__ as `from . import io`
[13:18:10] <Luyin> so I don't really need the double docstrings
[13:18:18] <Luyin> I think I'll just ignore that error than
[13:18:30] *** Quits: kostkon__ (~kostkon@2a02:587:a100:18e:9fe3:794:a225:7cdb) (Remote host closed the connection)
[13:18:32] *** Joins: kostkon (~androirc@ob21aa.static.otenet.gr)
[13:18:50] *** Joins: kostkon__ (~kostkon@2a02:587:a100:18e:9fe3:794:a225:7cdb)
[13:18:54] *** Quits: gareppa (~gareppa@user/gareppa) (Remote host closed the connection)
[13:18:55] *** Quits: bungle (~bungle@77-147-16-94.dyn.cable.fcom.ch) (Quit: leaving)
[13:19:14] *** kostkon is now known as kostkon_
[13:19:14] *** Joins: mrtnt (~Martin@2001:ad0:1:1:da9e:f3ff:fe4a:8dd0)
[13:19:34] *** kostkon_ is now known as kostkon
[13:21:46] <jinsun> okay, not sure which place is the better to put the docstring myself, I personally keep docstring in __init__.py and make the submodules internal to satisfy pylint without needing to disable anything
[13:22:26] *** Joins: offpics (~offpics@89-79-56-128.dynamic.chello.pl)
[13:23:44] <Mogget> I have a script which creates a PID file. This script takes arguments using argparse. Whenever someone writes wrong arguments on the commnandline, argparse prints help text and exit as expected, but the PID file is not deleted. Is there some way I can run parse_args() in argparse and recognize that this will fail and delete the pid file before the method does a sys.exit()?
[13:24:39] <Mogget> Since the method does not raise any exceptions, I am unable to do a try except statement for this specific issue.
[13:25:19] <raek> Mogget: you can use a try/finally statement or a with statement
[13:25:26] <jinsun> the script creates the file or deletes it?
[13:25:29] *** Joins: Crassus (~Crassus@user/crassus)
[13:25:45] *** Joins: mexen (uid495612@user/mexen)
[13:26:45] <Luyin> jinsun: I'll play around with disabling the warning or suppressing it for the __init__, thanks for the help!
[13:27:04] *** Joins: pnoud (~pnoud@user/pnoud)
[13:27:31] <offpics> Man, I hate argparse, it's too low level. I prefer 'click'
[13:28:15] *** Joins: justinf210 (~justinf21@192-230-160-245.3rivers.net)
[13:28:24] *** Joins: gggpkm (~gggpkm@60.10.194.47)
[13:29:14] <Mogget> raek: because of the way the script has been made, I cannot enclose the rest of the script within the else part of a try except statement, and finally, although it would make sure the pid file is delete. There are situations where we do not want the pid file to be deleted.
[13:29:30] *** Quits: kostkon__ (~kostkon@2a02:587:a100:18e:9fe3:794:a225:7cdb) (Remote host closed the connection)
[13:30:22] *** Joins: kostkon_ (~kostkon@2a02:587:a100:18e:9fe3:794:a225:7cdb)
[13:30:25] <Mogget> jinsun: The script creates the pid file in the very beginning and deletes it when it knows that it has verified that the job is finished.
[13:30:59] <Mogget> jinsun: Sorry, I didn't see that you were talking about something else before I pushed enter.
[13:31:39] <Mogget> offpics: I like it. Its simple and does the job, and it is the first time I actually have an issue with it.
[13:32:47] *** Joins: gggp (~textual@60.10.23.171)
[13:33:31] *** Joins: dvx (~dvx@185.63.97.64)
[13:33:37] *** Quits: kostkon_ (~kostkon@2a02:587:a100:18e:9fe3:794:a225:7cdb) (Read error: No route to host)
[13:33:37] *** Quits: gggp (~textual@60.10.23.171) (Client Quit)
[13:33:49] *** Joins: kostkon_ (~kostkon@2a02:587:a100:18e:9fe3:794:a225:7cdb)
[13:35:23] <raek> Mogget: hmm. maybe you could subclass ArgumentParser and override the exit() method
[13:35:44] <raek> ah, there's also this: https://docs.python.org/3/library/argparse.html#exit-on-error
[13:36:52] <raek> Mogget: would it solve your problem if argparse raised an exception instead of calling sys.exit()?
[13:36:58] *** Quits: pnoud (~pnoud@user/pnoud) (Ping timeout: 246 seconds)
[13:37:00] *** Quits: n00b101 (uid448161@id-448161.tooting.irccloud.com) (Quit: Connection closed for inactivity)
[13:38:11] <raek> I think if you pass exit_on_error=False, then an argparse.ArgumentError is raised
[13:40:06] *** Joins: n00b101 (uid448161@id-448161.tooting.irccloud.com)
[13:40:06] *** Quits: Asmodee[T] (~Asmodee@gateway/tor-sasl/asmodee) (Remote host closed the connection)
[13:41:03] *** Quits: anddt (~anddt@net-93-144-12-118.cust.vodafonedsl.it) (Ping timeout: 256 seconds)
[13:41:17] <jinsun> Mogget: I was actually talking about your script that time, so it does both create and delete, but why is the file created before parse_args? I was thinking simple solution to just not create the file till parse_args succeeds
[13:42:00] *** Quits: kostkon_ (~kostkon@2a02:587:a100:18e:9fe3:794:a225:7cdb) (Remote host closed the connection)
[13:42:19] *** Joins: kostkon_ (~kostkon@2a02:587:a100:18e:9fe3:794:a225:7cdb)
[13:42:22] *** Joins: duso (~duso@n110-21-58-166.rdl3.qld.optusnet.com.au)
[13:43:30] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 240 seconds)
[13:43:34] *** Quits: gggpkm (~gggpkm@60.10.194.47) (Ping timeout: 265 seconds)
[13:43:38] *** Joins: PJBoy (~PJBoy@user/pjboy)
[13:43:42] *** Quits: magla (~gelignite@55d43d25.access.ecotel.net) (Quit: Stay safe!)
[13:44:18] *** Joins: borisrunak (~borisruna@ppp-94-68-239-12.home.otenet.gr)
[13:45:24] <borisrunak> hello!
[13:45:50] *** Quits: pneff (~pneff@2a02:168:fedc:0:4961:9552:50a:6c11) (Ping timeout: 272 seconds)
[13:46:04] *** Joins: hyperknot_ (~hyperknot@2a02:3033:403:c3b2:4455:cf9a:869d:55ab)
[13:46:05] *** Quits: hnOsmium0001 (uid453710@id-453710.stonehaven.irccloud.com) (Quit: Connection closed for inactivity)
[13:46:25] *** Joins: pneff (~pneff@2a02:168:fedc:0:4961:9552:50a:6c11)
[13:46:44] *** Quits: MrFantastik (~Thunderbi@cpe-69-204-101-67.buffalo.res.rr.com) (Read error: Connection reset by peer)
[13:46:51] *** Joins: reedrichards (~Thunderbi@cpe-69-204-101-67.buffalo.res.rr.com)
[13:47:22] *** Joins: zeenk (~zeenk@2a02:2f04:a106:9600:82fb:aed9:ca9:38d3)
[13:47:26] *** Quits: hyperknot (~hyperknot@dynamic-046-114-093-226.46.114.pool.telefonica.de) (Ping timeout: 265 seconds)
[13:48:02] *** Joins: azazello (~azazello@109.75.158.195)
[13:48:26] *** Quits: milkt (~debian@gateway/tor-sasl/milkt) (Remote host closed the connection)
[13:48:58] *** Joins: milkt (~debian@gateway/tor-sasl/milkt)
[13:49:10] *** reedrichards is now known as MrFantastik
[13:50:26] *** Joins: GregTheHun_ (~GregTheHu@2601:300:4500:3d41:9d1f:1512:c7da:4108)
[13:50:28] *** Quits: GregTheHun (~GregTheHu@2601:300:4500:3d41:9d1f:1512:c7da:4108) (Ping timeout: 250 seconds)
[13:50:42] *** GregTheHun_ is now known as GregTheHun
[13:53:17] *** Quits: Dantali0n (~Dantali0n@217-123-73-108.cable.dynamic.v4.ziggo.nl) (Quit: Bye)
[13:54:26] *** Joins: Dantali0n (~Dantali0n@217-123-73-108.cable.dynamic.v4.ziggo.nl)
[13:55:20] *** Quits: Abrax (~Abrax@user/abrax) (Quit: Leaving)
[13:56:11] *** Joins: wyclif (~wyclif@user/wyclif)
[13:56:50] <borisrunak> is this the new room , or do people still chat on freenode?
[13:57:52] <ferros> what is this freenode you speak of?
[13:58:52] *** Joins: tims1 (~tims@220-244-125-107.static.tpgi.com.au)
[13:59:48] *** Quits: et (~et@user/et) (Ping timeout: 258 seconds)
[13:59:53] <borisrunak> #python on irc.freenode.net ferros?
[14:00:09] <borisrunak> I am only asking cause it seems a bit quite in here
[14:00:24] <ferros> I'm sure it exists
[14:00:38] *** Quits: tims (~tims@193-82-247-42.tpgi.com.au) (Ping timeout: 272 seconds)
[14:01:02] <ferros> Seeing as freenode is ran by a lunatic I'd guess this one may be more active
[14:01:03] <very_sneaky> borisrunak: yes this is the new channel
[14:01:19] *** Quits: offpics (~offpics@89-79-56-128.dynamic.chello.pl) (Quit: Konversation terminated!)
[14:01:27] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 256 seconds)
[14:01:34] *** Joins: offpics (~offpics@89-79-56-128.dynamic.chello.pl)
[14:01:39] *** Joins: mrwick (~mrwick@user/mrwick)
[14:02:06] *** Joins: entuland (~entuland@user/entuland)
[14:02:43] *** Quits: offpics (~offpics@89-79-56-128.dynamic.chello.pl) (Client Quit)
[14:02:58] *** Joins: offpics (~offpics@89-79-56-128.dynamic.chello.pl)
[14:05:36] *** Joins: lucad111 (~lucad111@51-148-40-1.dsl.zen.co.uk)
[14:06:16] *** Joins: et (~et@user/et)
[14:06:27] *** Joins: jeho (~jehoshaph@user/jehoshaphat)
[14:07:03] *** Joins: lukka5 (~lukka5@246-60-231-201.fibertel.com.ar)
[14:07:23] *** Joins: pulga (~manuel@92.red-176-83-60.dynamicip.rima-tde.net)
[14:09:49] *** Quits: pulga (~manuel@92.red-176-83-60.dynamicip.rima-tde.net) (Quit: WeeChat 3.0)
[14:11:18] *** Quits: ssbr (~ssbr@python/site-packages/ssbr) (Ping timeout: 258 seconds)
[14:11:39] *** Quits: lukka5 (~lukka5@246-60-231-201.fibertel.com.ar) (Ping timeout: 256 seconds)
[14:11:57] *** Joins: bungle (~bungle@77-147-16-94.dyn.cable.fcom.ch)
[14:12:07] <graingert> borisrunak: I can't connect to leenode
[14:12:12] <graingert> can't/won't/both
[14:13:03] <ferros> have you been cast away, graingert?
[14:13:10] *** Joins: AM (~techman@87-94-111-135.bb.dnainternet.fi)
[14:13:19] <graingert> irccloud
[14:13:22] <pagnol> so what are some cool things that are happening in the Python world right now?
[14:13:32] <graingert> pagnol: anyio taking over the world
[14:13:59] <Luyin> ok, I'm making progress with pylint. Now I seem to have trouble with an import: "voice_dataset/internals/filetypes.py:3:0: E0401: Unable to import 'filetype' (import-error)". The pylint command is run in a venv, which seems to be related to this problem. I found https://stackoverflow.com/questions/1899436/pylint-unable-to-import-error-how-to-set-pythonpath/53908601, which does this weird
[14:14:01] <Luyin> sys.path.append() thing one is supposedly never to do. Is there a better way to fix this error?
[14:14:17] <borisrunak> thank you !
[14:14:24] *** Joins: wyclif (~wyclif@user/wyclif)
[14:14:34] <graingert> Luyin: where's the filetype module on disk?
[14:14:55] <graingert> Luyin: are you using the same virtual environment to run pytest as you use to run pylint?
[14:15:27] <Luyin> graingert: I run all in the same venv. `pip show filetype | grep Location`: Location: /home/alex/.pyenv/versions/3.9.0/envs/Voice_Dataset-3.9.0/lib/python3.9/site-packages
[14:15:59] *** Quits: acid (~acid@user/acid) (Ping timeout: 268 seconds)
[14:16:11] *** Quits: MrFantastik (~Thunderbi@cpe-69-204-101-67.buffalo.res.rr.com) (Ping timeout: 256 seconds)
[14:17:01] <graingert> Luyin: hmm it works for me
[14:17:07] <Luyin> hmmm
[14:17:13] <Luyin> I'll try reinstalling filetype
[14:17:15] <graingert> Luyin: do you have a directory called filetype anywhere?
[14:17:31] <graingert> do you have `__init__.py` files in all directories containing other `.py` files?
[14:17:53] *** Quits: jinsun (~quassel@user/jinsun) (Ping timeout: 265 seconds)
[14:18:02] <Luyin> aaah I think I missed one __init__, that could be it
[14:18:14] <Luyin> no, I haven't got filetype, but filetypes/. should be different enough :D
[14:18:42] *** Joins: jinsun_ (~jinsun_@user/jinsun)
[14:19:15] *** Joins: venmx (~bertie@host81-155-235-58.range81-155.btcentralplus.com)
[14:19:17] *** Joins: jinsun (~quassel@user/jinsun)
[14:19:19] <Luyin> ok I just noticed something
[14:19:35] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 256 seconds)
[14:19:40] *** Quits: hyperknot_ (~hyperknot@2a02:3033:403:c3b2:4455:cf9a:869d:55ab) (Ping timeout: 246 seconds)
[14:20:07] <graingert> Luyin: https://pypi.org/project/flake8-no-pep420/
[14:20:29] *** Quits: MikachuPi (~Mikachu@2001:bc8:47a8:559::1) (Quit: Mikachuuuuuuu !)
[14:20:45] *** Joins: wattux (~wattux@212.51.23.106)
[14:20:57] *** Joins: MikachuPi (~Mikachu@2001:bc8:47a8:559::1)
[14:21:18] *** Joins: hyperknot (~hyperknot@2a02:3033:400:c99e:247d:2fd1:79dc:237d)
[14:21:42] <Luyin> I've got `make lint` and `make tox`, and with `make lint` I don't get the error. But with `make tox` I do. Here's my Makefile and tox.ini, maybe there's something wrong in there: https://paste.xinu.at/m-HSTb/
[14:21:54] *** Joins: acid (~acid@user/acid)
[14:22:30] *** Quits: kostkon_ (~kostkon@2a02:587:a100:18e:9fe3:794:a225:7cdb) (Remote host closed the connection)
[14:22:49] *** Joins: kostkon_ (~kostkon@2a02:587:a100:18e:9fe3:794:a225:7cdb)
[14:22:54] *** Joins: gggp (~textual@60.10.23.171)
[14:23:52] *** Quits: venmx (~bertie@host81-155-235-58.range81-155.btcentralplus.com) (Ping timeout: 246 seconds)
[14:24:46] *** Quits: duso (~duso@n110-21-58-166.rdl3.qld.optusnet.com.au) (Quit: leaving)
[14:25:03] <Luyin> but if I understand the output correctly, there's something off here. Because `make lint` should also show that error, but it doesn't. It only does when it's run from tox. So maybe my code is accidentally using system tox instead of the one installed in the venv?
[14:25:34] *** Quits: gggp (~textual@60.10.23.171) (Client Quit)
[14:25:57] *** Quits: borisrunak (~borisruna@ppp-94-68-239-12.home.otenet.gr) (Quit: Client closed)
[14:26:08] *** PJBoy is now known as Guest9410
[14:26:08] *** Quits: Guest9410 (~PJBoy@user/pjboy) (Killed (molybdenum.libera.chat (Nickname regained by services)))
[14:26:16] *** Joins: PJBoy (~PJBoy@user/pjboy)
[14:27:04] <Luyin> tox --version: https://paste.xinu.at/zK3c/
[14:27:10] <Luyin> so that should do, too
[14:27:32] *** Quits: m_tadeu (~quassel@bl14-187-233.dsl.telepac.pt) (Ping timeout: 256 seconds)
[14:27:43] *** Quits: acid (~acid@user/acid) (Ping timeout: 246 seconds)
[14:29:52] *** Quits: node1 (~node1@user/node1) (Remote host closed the connection)
[14:30:00] *** Joins: omegatron (~some@p5b056bc7.dip0.t-ipconnect.de)
[14:31:41] *** Joins: acid (~acid@user/acid)
[14:32:07] *** Joins: wyclif (~wyclif@user/wyclif)
[14:32:16] *** Quits: azazello (~azazello@109.75.158.195) (Ping timeout: 246 seconds)
[14:32:23] *** Quits: kostkon_ (~kostkon@2a02:587:a100:18e:9fe3:794:a225:7cdb) (Read error: No route to host)
[14:32:26] *** Joins: kostkon__ (~kostkon@2a02:587:a100:18e:9fe3:794:a225:7cdb)
[14:33:48] *** Joins: GiLgAmEzH (~gilgamezh@181.47.117.104)
[14:34:41] *** Quits: Julian (~tos9@python/site-packages/Julian) (Ping timeout: 258 seconds)
[14:35:39] *** Quits: Ronalds_Mazitis_ (~Ronalds_M@78.84.19.247) (Quit: Connection closed)
[14:36:42] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 240 seconds)
[14:36:57] *** Quits: Zer0xFF (michael@matrix.michaelsasser.org) (Remote host closed the connection)
[14:36:57] *** Quits: xsperry (~as@user/xsperry) (Ping timeout: 268 seconds)
[14:37:34] *** Joins: chaosite (~chaosite@user/chaosite)
[14:40:12] <graingert> Luyin: btw don't use --include
[14:40:14] *** Joins: gggp (~textual@60.10.194.47)
[14:40:21] <graingert> Use source-pkgs
[14:40:37] <Luyin> --include where?
[14:40:39] <graingert> In and configure coverage in pyproject.toml
[14:40:47] <graingert> coverage --include
[14:40:50] <Luyin> oh I have this toml, hang on
[14:41:27] <graingert> Luyin: Also pytest-cov is good
[14:41:47] <Luyin> https://paste.xinu.at/K1QeOc/
[14:41:53] <graingert> coverage -m pytest ruins your sys.path
[14:41:59] <Luyin> I followed this guide btw: https://antonz.org/python-packaging/
[14:42:17] <Luyin> which is really nice to follow step by step but
[14:42:23] <graingert> Luyin: looks like you don't have a dep on filetype?
[14:42:32] *** Quits: ctrypoph (~ctrypoph@99-51-11-77.lightspeed.brhmmi.sbcglobal.net) (Quit: -a- Connection Timed Out)
[14:42:55] *** Joins: ctrypoph (~ctrypoph@2600:1702:3000:9090:6d7f:1c9d:1aea:24aa)
[14:43:20] <Luyin> oh in the makefile
[14:43:27] *** Joins: bigRoo (~user@73.181.dsl.syd.iprimus.net.au)
[14:43:30] *** Joins: gtlsgamr (~gtlsgamr@103.247.4.94)
[14:43:37] *** ray is now known as re
[14:43:45] *** Joins: DodgeThis (~DodgeThis@246.102.90.149.rev.vodafone.pt)
[14:44:00] *** Quits: kostkon__ (~kostkon@2a02:587:a100:18e:9fe3:794:a225:7cdb) (Read error: Connection reset by peer)
[14:44:19] *** Joins: kostkon__ (~kostkon@2a02:587:a100:18e:9fe3:794:a225:7cdb)
[14:44:31] <graingert> Luyin: But not in pyproject.toml ?
[14:44:34] <Luyin> graingert: ok, so coverage with source-pkgs instead of --include and checking out pytest-cov instead of using coverage -m pytest? anything else I should fix in the setup?
[14:44:52] <gtlsgamr> Hello. I am looking to scrape a webpage. But for that first I have to login. I do the using requests.post. Once I am in I get the contents to another address using reuests.get, but the issue is that they are dynamically loading the content. All the content is populated by Random AJAX requests in the script tags of the header. Is there a way to scrape this page?
[14:45:04] <graingert> You should move your test deps into an extra
[14:45:46] <graingert> Luyin: https://github.com/PyCQA/modernize/blob/master/pyproject.toml#L37
[14:46:00] <graingert> Luyin: https://github.com/PyCQA/modernize/blob/master/pyproject.toml#L91
[14:47:01] <graingert> Luyin: https://github.com/PyCQA/modernize/blob/master/pyproject.toml#L47
[14:47:21] <graingert> https://github.com/PyCQA/modernize/blob/master/pyproject.toml#L57
[14:47:29] <graingert> Just the whole file really
[14:47:33] <Luyin> :D
[14:47:35] <Luyin> ok
[14:47:38] <Luyin> I'm gonna write myself a list
[14:47:52] <Luyin> or rather, I'm gonna put it into tickets in my gitab
[14:47:54] <Luyin> *l
[14:48:34] *** Joins: wyclif (~wyclif@user/wyclif)
[14:49:28] <graingert> Probably filterwarnings=["error"] is most important
[14:49:48] <graingert> Otherwise upgrading things will just break with no warning
[14:50:34] <Mogget> raek: yes it would definately solve my problem is argparse raised an exception instead of calling sys.exit(). It would have been lovely to be able to controll that through an argument or something similar.
[14:51:01] *** Quits: leduyquang753 (~leduyquan@user/leduyquang753) (Quit: Lost terminal)
[14:51:30] *** Joins: codificat (~pep@66.red-79-154-168.dynamicip.rima-tde.net)
[14:51:34] *** Joins: leduyquang753 (~leduyquan@user/leduyquang753)
[14:52:15] <raek> Mogget: that's what the exit_on_error argument does! :-)
[14:53:16] <Mogget> raek: omg, i missed something that obvious? Going to look in the docs now. Thank you in advance if that solves it for me.
[14:53:35] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 256 seconds)
[14:53:35] *** Quits: pneff (~pneff@2a02:168:fedc:0:4961:9552:50a:6c11) (Ping timeout: 256 seconds)
[14:54:17] <Mogget> raek: Thank you. That will fix everything for me. Now I can put the whole thing in a try except block instead.
[14:56:53] <graingert> Mogget: sys.exit does raise an exception
[14:58:04] *** Quits: amahl (~amahl@dsl-jklbng12-54fbca-64.dhcp.inet.fi) (Remote host closed the connection)
[14:58:07] <kieto> Do you know how the switch from marshmallow 2.x to 3.x affected the fields.Date() ? A field with value '19940321' is giving me the error 'Not a valid date' in marshmallow 3.x, not in 2.x
[14:58:34] *** Quits: gggp (~textual@60.10.194.47) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[15:00:23] *** Joins: pneff (~pneff@2a02:168:fedc:0:4961:9552:50a:6c11)
[15:01:12] *** Joins: lukka5 (~lukka5@246-60-231-201.fibertel.com.ar)
[15:01:54] <kieto> do I need to specify a dateformat Meta option as explained here? https://marshmallow.readthedocs.io/en/stable/upgrading.html#datetime-field-dateformat-meta-option-is-renamed-datetimeformat
[15:02:08] <kieto> I don't understand why in 2.x there were no errors like this
[15:02:22] *** Quits: bindu (bindu@user/bindu) (Quit: WeeChat 3.2)
[15:03:57] *** Joins: iauc (~iauc@2001:4643:23d:0:a426:b321:9258:ecd0)
[15:04:40] <rendar> it seems i can't do this https://bpa.st/6Y5Q -- there is a simpler way?
[15:04:42] *** Quits: pneff (~pneff@2a02:168:fedc:0:4961:9552:50a:6c11) (Ping timeout: 240 seconds)
[15:05:31] <bjs> rendar: why are you nesting classes?
[15:05:37] <bjs> nested classes uh, don't work the way you expect :)
[15:05:57] *** Joins: wyclif (~wyclif@user/wyclif)
[15:06:03] *** Quits: lukka5 (~lukka5@246-60-231-201.fibertel.com.ar) (Ping timeout: 256 seconds)
[15:06:39] <Mogget> graingert: It does? If thats the case, then there is something I do not understand in Python. Why do I not get an exception error message in the terminal when calling sys.exit() then?
[15:06:53] <bjs> Mogget: because python itself catches the exception and shows you the traceback
[15:07:12] <bjs> Mogget: but argparse has exit_on_error option which raises a nicer ArgumentError exception with actual information
[15:07:48] <Mogget> bjs: I altered the script to use exit_on_error=False together with a try except else statement and that worked wonderfully.
[15:08:18] <Mogget> But when graingert wrote that sys.exit() raises an exception, I realized that I am missing some understanding here.
[15:08:25] *** Quits: jvalleroy (~quassel@user/jvalleroy) (Quit: http://quassel-irc.org - Chat comfortably. Anywhere.)
[15:08:52] <Mogget> So the python interpreter ignores the exception raised by sys.exit() and I can choose to react on it?
[15:08:54] <graingert> Mogget: You can catch the exception raised from sys.exit
[15:09:03] *** Joins: pnoud (~pnoud@user/pnoud)
[15:09:44] <bjs> Yeah but don't
[15:09:50] *** Joins: rinzewind (~rinzewind@user/rinzewind)
[15:09:52] <bjs> because argparse has a proper exception that actually has argument-related information on it
[15:09:54] <graingert> It's equivalent to
[15:09:54] <graingert> def exit(*args): raise SystemExit(*args)
[15:09:55] *** Quits: fedenix (~fedenix@gateway/tor-sasl/fedenix) (Remote host closed the connection)
[15:09:58] *** Joins: Ergo^ (~ergo@91.238.59.144)
[15:09:58] <bjs> Yeah but just don't
[15:10:25] *** Joins: Gurkenglas (~Gurkengla@dslb-002-203-144-156.002.203.pools.vodafone-ip.de)
[15:10:42] <graingert> Why would you want to catch an argparse error anyway?
[15:11:09] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 256 seconds)
[15:11:21] <graingert> Maybe unit tests? pytest.raises does it for you
[15:11:28] <Mogget> so if I do try: foo(); except sys.SystemExit: bar; raise; then bar could be my code to finalize before exiting?
[15:11:37] <bjs> Mogget: yes.
[15:12:08] <bjs> Mogget: it's just SystemExit btw, it's not on sys
[15:12:10] *** Joins: fedenix (~fedenix@gateway/tor-sasl/fedenix)
[15:12:36] <supakeen> I still have this habit where I always write `raise SystemExit(main())`.
[15:12:40] <bjs> also I don't think argparse is calling sys.exit
[15:12:44] <supakeen> And I have no idea where I picked it up.
[15:13:00] <graingert> Mogget: You could just use finally:
[15:13:08] <bjs> Oh it is :)
[15:13:21] <graingert> No need for an except clause
[15:13:22] *** Joins: cthulchu (~Cthulchu@193.194.107.250)
[15:13:24] <Mogget> graingert: I have some code, which has been written a long time ago, and we discovered that the PID file it creates is not deleted if then script is called with arguments that does not exist for the script. I cannot use finally because we do not want the pid file to ble cleared in all situations.
[15:13:40] <bjs> graingert: but then you don't know it was an error
[15:13:53] <graingert> Mogget: show the code?
[15:14:20] <graingert> Mogget: why does it create the pid file before possessing arguments?
[15:14:37] <Mogget> But, cathing the exception from argparse work, and I suspect cathing the sys.exit exception will work just as well.
[15:15:01] <graingert> 11:44:20 <graingert> Mogget: why does it create the pid file before possessing arguments?
[15:15:04] <bjs> Mogget: it won't work as well, because the sys.exit is not the thing printing the error message you see from argparse
[15:15:14] <bjs> Mogget: and it won't contain any information about what happened.
[15:15:19] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 258 seconds)
[15:15:33] <bjs> the ArgumentError will be raised *instead* of printing an error to the screen, _and_ it will contain the information about what happened.
[15:15:33] <Mogget> graingert:I asked myself the same question and I was studying the code to find out why until I was told about the exit_on_error argument earlier.
[15:15:57] <graingert> Mogget: That's orthogonal
[15:16:09] <bjs> no it's not, you can catch the exception and then delete the pid file
[15:16:22] <bjs> but obviously, the correct solution is to fix the code properly rather than adding a hack at the end
[15:16:24] <bjs> :P
[15:16:28] *** Joins: pneff (~pneff@2a02:168:fedc:0:4961:9552:50a:6c11)
[15:16:31] <graingert> Delay the creation of the pid file to where you know you'll need to keep it
[15:16:37] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[15:16:38] <Mogget> this is what I am doing now. Cathing the exception, deleting the pidfile and raising the exception again.
[15:17:08] <bjs> Mogget: fair enough,  it seems weird the code is doing any real work before it parses the arguments
[15:17:37] <bjs> probably you can just move the parse_args call up the stack and make it the first thing the script does.
[15:17:59] *** Joins: skapata (~Skapata@user/skapata)
[15:20:04] *** Joins: Adoi (~Adoi@user/adoi)
[15:21:27] *** Joins: Zer0xFF (michael@matrix.michaelsasser.org)
[15:22:17] <Mogget> bjs: explained shortly, if one specific argument (boolean) is found, then the script will do work and exit, but it cannot do that work without calling methods which must be atomic. So the PID file is created before getting the arguments to make sure no one else is doing the same thing at the same time.
[15:22:29] *** Quits: pnoud (~pnoud@user/pnoud) (Ping timeout: 256 seconds)
[15:22:47] <bjs> Mogget: but can't it create the pid file after reading the arguments?
[15:22:57] <bjs> reading the arguments doesn't do any work
[15:23:07] <bjs> (unless you're doing something weird)
[15:23:28] <greyltc> summary of my problem from yesterday: I have a two line setup.py with everything in setup.cfg. Suddenly in the last two weeks my package_data stopped being included in my builds.
[15:23:48] <greyltc> in case anyone's interested i've solved this today
[15:23:48] <Samian> omg, I wasted 16 hours because I wrote [[split_table_batched_embeddings_ops.EmbeddingLocation.DEVICE]*3] when I should have wrote [split_table_batched_embeddings_ops.EmbeddingLocation.DEVICE]*3
[15:24:02] <Samian> how can I stop making clumsy mistakes, and why didn't I check that!?!?
[15:24:25] *** Joins: wyclif (~wyclif@user/wyclif)
[15:24:33] <Samian> the error reported was a CUDA out of memory error so I'm down in c++ and cuda code, when it was freaking two extra brackets in python
[15:24:34] * Samian cries
[15:24:42] *** Quits: palasso (~palasso@user/palasso) (Read error: Connection reset by peer)
[15:24:44] <nedbat> greyltc: how did you solve it?
[15:24:46] <Mogget> bjs: this is what I have been trying to find out and will keep on trying to find out since I need to understand the whole process for later refactoring.
[15:25:14] <greyltc> nedbat: Yhg1s: `include_package_data = True` was the issue
[15:25:31] <nedbat> greyltc: that was the fix?
[15:25:32] <greyltc> I removed that from my setup.cfg and now it all works fine
[15:25:42] <nedbat> greyltc: that sounds backwards1
[15:25:45] <nedbat> !
[15:25:46] <greyltc> no that was breaking it lol
[15:25:49] <greyltc> yeah, go figure
[15:25:52] <nedbat> (oops, i actually did the !/1 thing)
[15:26:02] <greyltc> took me like 3 hours to figure this out
[15:26:16] <greyltc> quite annoying
[15:26:48] <greyltc> I don't know what change caused this
[15:27:01] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[15:27:09] <greyltc> but it doesn't seem to be in setuptools because I rolled that back and it didn't fix it
[15:27:20] <greyltc> so I don't even know where to file the bug for this
[15:27:37] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[15:28:37] <Samian> what's the thinking behind [x]*3 evaluating to [x,x,x] ?  To me it makes more sense for [x]*3 to evaluate to [x],[x],[x] either wrapped in parenthesis as a tuple or brackets as a list
[15:29:19] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 246 seconds)
[15:29:27] <BtbN> The later being substantially less useful
[15:29:38] *** Quits: fuz (~fuz@user/fuz) (Ping timeout: 244 seconds)
[15:29:39] <nedbat> Samian: "x"*3 == "xxx";
[15:29:54] <nedbat> Samian: lists are similar: make a thing that is 3 copies of the original
[15:29:54] *** Joins: i0e (~is0ke3@user/is0ke3)
[15:30:12] <nedbat> Samian: and if you want your result, use [[x]]*3
[15:31:38] *** Joins: xsperry (~as@user/xsperry)
[15:32:28] <Mogget> bjs: you and others here are correct. The person who scriptet this just did not think it through. I manged to move code around to get the desired effect without really doing anything but changing the sequence of execution.
[15:32:33] *** Joins: jinsun__ (~quassel@user/jinsun)
[15:32:41] *** Quits: pneff (~pneff@2a02:168:fedc:0:4961:9552:50a:6c11) (Ping timeout: 256 seconds)
[15:32:49] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 246 seconds)
[15:33:23] <Samian> nedbat  I know. I'm just critiquing the people who make python
[15:33:28] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[15:33:49] *** Quits: jinsun (~quassel@user/jinsun) (Ping timeout: 256 seconds)
[15:34:13] <Samian> ah why bother wondering what was in their mind. The language is the way it is
[15:34:51] *** Joins: gggp (~textual@60.10.23.171)
[15:35:45] *** Joins: pnoud (~pnoud@user/pnoud)
[15:35:48] <bjs> Samian: it's just a question of which is more useful and consistent
[15:36:59] <bjs> Samian: [x]*3 == [x,x,x] is a relatively useful thing and this choice still allows you to do what you want (with [[x]]*3).  Think like `[0]*10` to make a list of 10 0s.
[15:37:30] <Samian> hah you're right!
[15:37:32] <bjs> It's also possible that if the choice was to be re-made today,  we wouldn't get the same feature
[15:37:35] *** Quits: jkl (~jkl@user/jkl) (Quit: ZNC 1.8.2 - https://znc.in)
[15:37:43] <bjs> or maybe they'd decide to just not allow list*something at all
[15:38:39] *** Quits: Zer0xFF (michael@matrix.michaelsasser.org) (Remote host closed the connection)
[15:38:42] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 240 seconds)
[15:39:19] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[15:39:23] <Samian> if  [0]*2 evaluated to [[0],[0]], then there wouldn't be anything that evaluated to [0,0].  0*2 would evaluate to 0. [0]*2 would evaluate to [[0],[0]].  a shortcut for [0,0] would be skipped!
[15:39:26] *** Joins: jkl (~jkl@user/jkl)
[15:39:27] <Samian> thanks bjs
[15:40:19] *** pac-man is now known as blackop
[15:40:28] *** Joins: Zer0xFF (michael@matrix.michaelsasser.org)
[15:40:31] *** Quits: pnoud (~pnoud@user/pnoud) (Ping timeout: 246 seconds)
[15:41:28] *** Quits: humanBird (~humanBird@2603-8001-7003-5966-75c9-43c6-fd77-9901.res6.spectrum.com) (Quit: Client closed)
[15:41:42] *** Joins: wyclif (~wyclif@user/wyclif)
[15:42:36] *** Quits: semanticz0 (~semanticz@202.164.136.255) (Ping timeout: 272 seconds)
[15:43:11] *** Quits: Adoi (~Adoi@user/adoi) (Quit: Leaving)
[15:44:36] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[15:45:03] *** Joins: nfc (nfc@tilde.institute)
[15:45:10] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[15:46:22] *** Joins: Adoi (~Adoi@user/adoi)
[15:46:25] *** Quits: fedenix (~fedenix@gateway/tor-sasl/fedenix) (Remote host closed the connection)
[15:46:57] *** Joins: fedenix (~fedenix@gateway/tor-sasl/fedenix)
[15:47:00] *** Quits: n00b101 (uid448161@id-448161.tooting.irccloud.com) (Quit: Connection closed for inactivity)
[15:47:36] *** Joins: Naan (~naan@user/naan)
[15:47:58] *** Quits: gtlsgamr (~gtlsgamr@103.247.4.94) (Quit: Lost terminal)
[15:49:52] *** Quits: jkl (~jkl@user/jkl) (Quit: ZNC 1.8.2 - https://znc.in)
[15:50:02] *** Joins: ksk (~ksk@217.115.159.249)
[15:50:15] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 256 seconds)
[15:50:42] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 240 seconds)
[15:50:43] *** Joins: jkl (~jkl@user/jkl)
[15:50:52] *** Joins: palasso (~palasso@user/palasso)
[15:51:20] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[15:52:51] *** Joins: rhax (~yannick@user/rhax)
[15:54:24] <ksk> Hola. Looking at the first example here: https://websocket-client.readthedocs.io/en/latest/examples.html#creating-your-first-websocket-connection - on_message(wsapp, message) - I get that I can interact with message, but what about wsapp in that case? -- Seems its "okay" to not interact with it "on_message" in a websocket sense!?
[15:55:22] *** Joins: lukka5 (~lukka5@246-60-231-201.fibertel.com.ar)
[15:55:35] <ksk> (I am kind of asking that because pylint "unused-argument" and "redefined-outer-name" pointed me to it)
[15:55:54] *** Quits: jeho (~jehoshaph@user/jehoshaphat) (Ping timeout: 240 seconds)
[15:56:28] *** Quits: cmc (~methos@gateway/tor-sasl/cmc) (Ping timeout: 244 seconds)
[15:56:37] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 246 seconds)
[15:56:43] *** Quits: alguien (~alguien@user/alguien) (Ping timeout: 258 seconds)
[15:57:11] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[15:58:09] *** Joins: jeho (~jehoshaph@user/jehoshaphat)
[15:59:09] *** Joins: azazello (~azazello@109.75.158.195)
[15:59:29] <deniska> ksk: sometimes you don't need everything you're provided with in a callback, and sometimes linter tools can be more annoying than they should be. Pylint is configurable though
[15:59:31] *** Joins: cmc (~methos@gateway/tor-sasl/cmc)
[15:59:43] <Luyin> graingert: hey, can I ask you a question regarding pyproject.toml again? the file you linked earlier looks nice for a start, but I'm not sure I get it completely yet. Where would I write the required packages like filetype? In the tool.flit.metadata "requires" field?
[16:00:10] *** re is now known as eh
[16:00:27] *** Quits: lukka5 (~lukka5@246-60-231-201.fibertel.com.ar) (Ping timeout: 256 seconds)
[16:01:01] *** Quits: bungle (~bungle@77-147-16-94.dyn.cable.fcom.ch) (Ping timeout: 256 seconds)
[16:01:20] *** Quits: jazzy (~jaziz@2600:380:8753:52bc:19c1:bcfb:6169:5fdf) (Ping timeout: 250 seconds)
[16:01:28] *** eh is now known as re
[16:03:57] *** Joins: kostkon_ (~kostkon@2a02:587:a100:18e:9fe3:794:a225:7cdb)
[16:04:06] *** Quits: kostkon__ (~kostkon@2a02:587:a100:18e:9fe3:794:a225:7cdb) (Remote host closed the connection)
[16:04:26] *** Quits: chaosite (~chaosite@user/chaosite) (Ping timeout: 256 seconds)
[16:04:49] *** Joins: wyclif (~wyclif@user/wyclif)
[16:05:24] *** Joins: alguien (~alguien@user/alguien)
[16:05:38] *** Quits: gggp (~textual@60.10.23.171) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[16:05:52] *** Quits: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com) (Quit: WeeChat 3.0.1)
[16:06:36] <_0x5fc3> is it possible to "change" device settings using pyaudio?
[16:07:05] <_0x5fc3> in mac os, output device default sample rate can be set, is it possible to control it?
[16:07:49] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[16:08:04] *** Joins: pneff (~pneff@2a02:168:fedc:0:4961:9552:50a:6c11)
[16:08:19] *** Joins: bungle (~bungle@77-147-16-94.dyn.cable.fcom.ch)
[16:08:30] *** Quits: kostkon_ (~kostkon@2a02:587:a100:18e:9fe3:794:a225:7cdb) (Remote host closed the connection)
[16:08:45] <graingert> Luyin: You can continue to use optional extras with poetry
[16:08:53] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[16:09:11] *** Joins: kostkon_ (~kostkon@2a02:587:a100:18e:9fe3:794:a225:7cdb)
[16:09:15] <graingert> Luyin: https://python-poetry.org/docs/pyproject/#extras
[16:09:34] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 246 seconds)
[16:10:14] *** Quits: shad (~shad@user/shad) (Ping timeout: 272 seconds)
[16:10:29] *** Quits: Adoi (~Adoi@user/adoi) (Quit: Leaving)
[16:11:34] *** Joins: computeiro (~Wender@189.37.66.161)
[16:11:50] *** Joins: Julian (~tos9@python/site-packages/Julian)
[16:12:28] *** Joins: chaosite (~chaosite@user/chaosite)
[16:12:55] *** Quits: pneff (~pneff@2a02:168:fedc:0:4961:9552:50a:6c11) (Ping timeout: 256 seconds)
[16:13:00] *** Joins: drincruz_ (~drincruz@ool-44c748be.dyn.optonline.net)
[16:13:43] *** Joins: Sheilong (uid293653@id-293653.charlton.irccloud.com)
[16:13:45] *** Joins: wyclif (~wyclif@user/wyclif)
[16:13:54] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 240 seconds)
[16:14:26] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[16:15:48] *** Quits: pwnd_sfw (~pwnd_sfw@ool-18b88100.dyn.optonline.net) (Read error: Connection reset by peer)
[16:16:01] *** Joins: pwnd_sfw (~pwnd_sfw@ool-18b88100.dyn.optonline.net)
[16:16:35] *** Quits: mcope (~matt@user/mcope) (Quit: Konversation terminated!)
[16:16:55] *** Quits: chaosite (~chaosite@user/chaosite) (Ping timeout: 246 seconds)
[16:16:55] *** Joins: mcope (~matt@user/mcope)
[16:17:20] *** Joins: pneff (~pneff@2a02:168:fedc:0:4961:9552:50a:6c11)
[16:18:19] *** Quits: drincruz_ (~drincruz@ool-44c748be.dyn.optonline.net) (Ping timeout: 246 seconds)
[16:18:28] *** Joins: rsrx (~rsrx@175.158.49.150)
[16:19:09] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 256 seconds)
[16:22:44] *** Joins: Asmodee[T] (~Asmodee@gateway/tor-sasl/asmodee)
[16:23:23] <Luyin> graingert: is poetry some replacement for pip?
[16:25:17] *** Quits: mcope (~matt@user/mcope) (Quit: Konversation terminated!)
[16:25:37] *** Joins: mcope (~matt@user/mcope)
[16:26:12] *** Joins: brickfat (~brickfat@user/brickfat)
[16:27:03] *** Joins: p-i- (~Ohmu@113.53.167.81)
[16:27:04] *** Quits: Julian (~tos9@python/site-packages/Julian) (Ping timeout: 246 seconds)
[16:27:11] <mdk> no
[16:27:59] <Luyin> python packaging is like the notorious rabbit hole. you start looking even at one tiny little area and suddenly you're in head over heels in new tools, their names, conventions and configs.
[16:28:25] *** Quits: mcope (~matt@user/mcope) (Client Quit)
[16:28:30] *** Joins: Deneb (~johnch@58.111.189.80.dyn.plus.net)
[16:28:46] *** Joins: mcope (~matt@user/mcope)
[16:28:53] *** Quits: FFY00 (~FFY00@archlinux/trusteduser/ffy00) (Remote host closed the connection)
[16:29:00] *** Joins: ponadm_ (pony@gateway/vpn/protonvpn/ponadm)
[16:29:13] *** Joins: FFY00 (~FFY00@archlinux/trusteduser/ffy00)
[16:29:34] *** Joins: shad (~shad@user/shad)
[16:30:40] *** Quits: lsrtl_ (~lsrtl@user/lsrtl) (Remote host closed the connection)
[16:31:02] *** Joins: lsrtl_ (~lsrtl@user/lsrtl)
[16:31:27] *** Quits: decartes (uid240036@id-240036.brockwell.irccloud.com) (Quit: Connection closed for inactivity)
[16:31:54] *** Joins: wyclif (~wyclif@user/wyclif)
[16:32:40] *** Quits: azazello (~azazello@109.75.158.195) (Ping timeout: 246 seconds)
[16:33:19] *** Quits: Asmodean (~Asmoedean@77.119.201.202.wireless.dyn.drei.com) (Quit: leaving)
[16:33:40] *** Quits: ctrypoph (~ctrypoph@2600:1702:3000:9090:6d7f:1c9d:1aea:24aa) (Quit: -a- Connection Timed Out)
[16:34:27] *** Quits: jeho (~jehoshaph@user/jehoshaphat) (Ping timeout: 256 seconds)
[16:36:02] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.2)
[16:36:10] *** Quits: DodgeThis (~DodgeThis@246.102.90.149.rev.vodafone.pt) (Ping timeout: 246 seconds)
[16:36:16] *** Joins: nomic (~nomic@2a00:23c6:9910:1201:b1d1:7f91:d3d7:a8d8)
[16:36:37] *** Joins: supakeen (~user@python/site-packages/supakeen)
[16:37:09] <rannnn8888> how wait the threads end and do something ? (not but join new def) https://dpaste.org/OUTv
[16:37:17] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 256 seconds)
[16:37:41] *** Joins: ctrypoph (~ctrypoph@2600:1702:3000:9090:6d7f:1c9d:1aea:24aa)
[16:37:43] *** Quits: ctrypoph (~ctrypoph@2600:1702:3000:9090:6d7f:1c9d:1aea:24aa) (Excess Flood)
[16:39:28] <bjs> rannnn8888: call join() on each thread
[16:39:39] *** Joins: DodgeThis (~DodgeThis@246.102.90.149.rev.vodafone.pt)
[16:39:50] <Laibsch> I am looking for equivalent of "at" to schedule a task with python in the future.  What is a good candidate?  I'm happy to use "at" itself as well.
[16:40:10] <rannnn8888> bjs but its no wait the thread1 finish and then start thread2 ?
[16:40:21] <bjs> rannnn8888: huh?
[16:40:24] *** Joins: derelict (~derelict@user/derelict)
[16:40:34] *** Quits: ionface_ (~ionface@user/ionface) (Read error: Connection reset by peer)
[16:40:41] <bjs> rannnn8888: I'm struggling to parse  that sentence,  what are you asking?
[16:40:54] *** Joins: vassen (~vassen@188.170.175.129)
[16:41:33] *** Joins: ionface (~ionface@user/ionface)
[16:41:34] <rannnn8888> bjs IF I use join, its start the thread1 wait him finish, and the start thread2 no?
[16:41:47] <bjs> rannnn8888: no,  just call join _after_ you've started thread2
[16:42:23] <bjs> rannnn8888: `t1.start(); t2.start(); t3.start();` then later `t1.join(); t2.join(); t3.join(); print("finished")`  for example.
[16:42:47] *** Joins: ctrypoph (~ctrypoph@99-51-11-77.lightspeed.brhmmi.sbcglobal.net)
[16:42:49] *** Quits: ctrypoph (~ctrypoph@99-51-11-77.lightspeed.brhmmi.sbcglobal.net) (Excess Flood)
[16:43:22] *** Joins: Bronto22 (~mennoh@84-86-247-193.fixed.kpn.net)
[16:47:22] *** Joins: azazello (~azazello@109.75.158.195)
[16:47:47] *** Joins: wyclif (~wyclif@user/wyclif)
[16:49:29] *** Joins: lukka5 (~lukka5@246-60-231-201.fibertel.com.ar)
[16:50:37] *** Joins: Julian (~tos9@python/site-packages/Julian)
[16:50:52] *** Joins: drincruz_ (~drincruz@ool-44c748be.dyn.optonline.net)
[16:51:55] *** Joins: ctrypoph (~ctrypoph@99-51-11-77.lightspeed.brhmmi.sbcglobal.net)
[16:51:58] *** Quits: ctrypoph (~ctrypoph@99-51-11-77.lightspeed.brhmmi.sbcglobal.net) (Excess Flood)
[16:52:01] *** Quits: vassen (~vassen@188.170.175.129) (Quit: Best wishes!)
[16:52:24] *** Joins: vassen (~vassen@188.170.175.129)
[16:52:37] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 246 seconds)
[16:52:53] <catern> would anyone take a look at an article I'm writing about a distributed systems library? in PM, since it's still a draft
[16:53:54] *** Quits: lukka5 (~lukka5@246-60-231-201.fibertel.com.ar) (Ping timeout: 240 seconds)
[16:54:32] <graingert> Luyin: poetry is not a replacement for pip
[16:54:58] <nedbat> catern: what do you mean by "a library"? One you wrote?
[16:55:07] <graingert> Luyin: poetry is a sandwhich around pip
[16:55:33] <catern> nedbat: yes
[16:55:34] <graingert> rannnn8888: use a threadpool executor btw
[16:56:00] *** Joins: ctrypoph (~ctrypoph@99-51-11-77.lightspeed.brhmmi.sbcglobal.net)
[16:56:01] <graingert> Laibsch: how far in the future, and what sort of task?
[16:56:02] *** Quits: ctrypoph (~ctrypoph@99-51-11-77.lightspeed.brhmmi.sbcglobal.net) (Excess Flood)
[16:56:45] <rannnn8888> graingert all def i other scripts i dont know if i can run its
[16:56:55] <graingert> rannnn8888: sure you can
[16:57:01] *** Joins: gggpkm (~gggpkm@60.10.23.171)
[16:57:15] <rannnn8888> and more ask i can use while true only on the start/join ? its i want make this loop ?
[16:57:52] *** Quits: rsrx (~rsrx@175.158.49.150) (Ping timeout: 246 seconds)
[16:57:55] <rannnn8888> example https://dpaste.org/3KWz
[16:58:02] *** Joins: Pickchea (~private@user/pickchea)
[16:58:11] <graingert> rannnn8888: show in your code where you start the threads
[16:58:18] *** Quits: cliluw (~cliluw@47.147.80.149) (Ping timeout: 252 seconds)
[16:58:23] <graingert> you can use as_completed with conncurrent.futures.ThreadPoolExecutor
[16:58:41] *** Joins: cliluw (~cliluw@47.147.80.149)
[16:58:54] <bjs> rannnn8888: what are the threads doing?
[16:58:57] <nedbat> catern: you might get takers if you say more about the kind of feedback you are looking for.
[16:59:09] <graingert> Luyin: poetry calls pip and pip calls poetry-core
[16:59:41] <rannnn8888> https://dpaste.org/HENZ example
[16:59:57] <rannnn8888> bjs all def do something elase
[17:00:01] <rannnn8888> else*
[17:00:18] <rannnn8888> its problem ?
[17:00:29] <bjs> rannnn8888: i'm just not sure what you're trying to do?  why the loop?
[17:00:45] <bjs> if we actually understood what they were doing we might be able to help you write it to do the thing you want.
[17:00:51] <Luyin> graingert: I'm not sure why I'd need poetry in the first place
[17:01:41] <rannnn8888> bjs in each def i have script i write make something elsh, and i want its run in loop , i run this to all the day
[17:02:00] *** Joins: b0rf (~shaun@121-44-16-32.tpgi.com.au)
[17:02:07] <bjs> rannnn8888: but you want some to wait for the others?
[17:02:25] *** Quits: cthulchu (~Cthulchu@193.194.107.250) (Ping timeout: 246 seconds)
[17:02:52] <rannnn8888> bjs i dont want wait only want after the theard done its start again
[17:03:04] <rannnn8888> or easy add whilte true in the def ?
[17:03:11] <bjs> rannnn8888: why not just make it `def news1(): while True: ...`
[17:03:26] <rannnn8888> https://dpaste.org/Y79O
[17:03:30] <rannnn8888> like this yep ?
[17:03:33] <bjs> rannnn8888: well yes you can add it there, but it does something different to what your code here was doing so I'm confused which you want
[17:03:33] *** Joins: jinsun (~quassel@user/jinsun)
[17:04:05] <bjs> rannnn8888: well those print("kk") will never happen?  i'm still confused what you're trying to do
[17:04:12] <bjs> but yes you can put a `while True:` inside the def
[17:04:37] <rannnn8888> bjs yes i know i in the check somthing and not delete this yes
[17:04:39] *** Joins: ctrypoph (~ctrypoph@2600:1702:3000:9090:6d7f:1c9d:1aea:24aa)
[17:04:40] *** Quits: ctrypoph (~ctrypoph@2600:1702:3000:9090:6d7f:1c9d:1aea:24aa) (Excess Flood)
[17:04:41] *** Quits: brickfat (~brickfat@user/brickfat) (Quit: Leaving)
[17:04:43] <graingert> Luyin: it's great for pinning
[17:04:54] <graingert> Luyin: and pip-compile is pretty good for pinning
[17:05:03] *** Quits: jinsun__ (~quassel@user/jinsun) (Ping timeout: 256 seconds)
[17:05:05] *** Joins: wyclif (~wyclif@user/wyclif)
[17:05:16] <graingert> once pip-compile does multi-environment pins I'll probably switch back to flit/pip-tools
[17:05:27] <graingert> but for now poetry is the only option for my workflow
[17:06:18] *** Quits: vassen (~vassen@188.170.175.129) (Ping timeout: 240 seconds)
[17:07:25] <Luyin> ok I think I fucked up my whole package
[17:07:31] <Luyin> now I can't install it via pip anymore
[17:07:39] <catern> nedbat: just want to get some first reactions to know if the post is clear
[17:08:11] *** Quits: hyperknot (~hyperknot@2a02:3033:400:c99e:247d:2fd1:79dc:237d) (Quit: Textual IRC Client: www.textualapp.com)
[17:08:42] <Luyin> `pip install -e .` gives this: https://paste.xinu.at/hyUh/
[17:09:09] <Luyin> but setuptools is installed. I'm in a venv and I checked several times that I'm using the right paths etc everywhere
[17:09:43] <Samian> anyone ever do stash push -m "your message" followed immediately by stash apply ?
[17:09:54] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 240 seconds)
[17:10:03] <Samian> I ask because when I stash push, git actually resets back to HEAD
[17:10:05] <Luyin> oh, am I supposed to install via "python setup.py develop" instead? at this point I'm not sure anymore
[17:10:05] *** Quits: stranac (~stranac@195.29.239.126) (Read error: Connection reset by peer)
[17:10:08] <rannnn8888> bjs sleep in thread  itss ok ? if i remmber it problem no ?  https://dpaste.org/6jLw
[17:10:09] *** Joins: RangerBobVA (~bmaddox@user/rangerbobva)
[17:10:15] <Samian> as if I did git reset --hard HEAD
[17:10:16] *** Joins: jvalleroy (~quassel@user/jvalleroy)
[17:10:23] *** Quits: nomic (~nomic@2a00:23c6:9910:1201:b1d1:7f91:d3d7:a8d8) (Quit: Leaving)
[17:10:40] <graingert> do something like this: https://www.irccloud.com/pastebin/mkhkI1wV/rannnn8888.py
[17:10:50] <bjs> rannnn8888: yes you can sleep in a thread, the thread will just go to sleep and the others will run.  I really think you should be using a library to help you do things
[17:11:13] <bjs> or just not using threads,  it's very unclear what you are doing
[17:11:51] *** Joins: ssbr (~ssbr@python/site-packages/ssbr)
[17:12:00] <rannnn8888> graingert nice look more easy and add time sleep in the def end the all script ?
[17:12:41] *** Joins: nomic (~nomic@2a00:23c6:9910:1201:b1d1:7f91:d3d7:a8d8)
[17:14:34] *** Quits: Mulugruntz (~Mulugrunt@2400:4152:2063:3100:b0b6:5979:6e0:c4a2) (Ping timeout: 250 seconds)
[17:15:17] <graingert> I'd writ it like this: https://www.irccloud.com/pastebin/OvKcVcXt/%3Crannnn8888.py
[17:15:20] <graingert> write*
[17:16:44] <graingert> nedbat: you might like this for your concurrent thread blog series ^
[17:17:27] <graingert> Luyin: `pip install -e` doesn't work with pep517/518 yet
[17:18:06] <graingert> it was only just defined how it would work today in PEP 660
[17:20:57] *** Joins: ctrypoph (~ctrypoph@2600:1702:3000:9090:6d7f:1c9d:1aea:24aa)
[17:21:00] *** Quits: ctrypoph (~ctrypoph@2600:1702:3000:9090:6d7f:1c9d:1aea:24aa) (Excess Flood)
[17:22:33] *** Joins: wyclif (~wyclif@user/wyclif)
[17:25:07] *** Joins: Asmodean (~quassel@165.22.94.154)
[17:25:11] <rannnn8888> graingert u see this befgraingertre :X Process finished with exit code -1073741819 (0xC0000005)
[17:25:23] <rannnn8888> u this before :x
[17:25:30] *** Joins: ctrypoph (~ctrypoph@99-51-11-77.lightspeed.brhmmi.sbcglobal.net)
[17:25:33] *** Quits: ctrypoph (~ctrypoph@99-51-11-77.lightspeed.brhmmi.sbcglobal.net) (Excess Flood)
[17:25:36] <graingert> rannnn8888: are you using threads to write IRC messages?
[17:25:37] *** Quits: iauc (~iauc@2001:4643:23d:0:a426:b321:9258:ecd0) (Ping timeout: 246 seconds)
[17:26:04] *** Joins: ctrypoph (~ctrypoph@99-51-11-77.lightspeed.brhmmi.sbcglobal.net)
[17:26:29] <graingert> rannnn8888: yes I have seen it
[17:26:35] <graingert> rannnn8888: show your code and the full output
[17:27:20] <rannnn8888> graingert no i scraping pages but all page in diffrent way and save to db
[17:27:32] <graingert> no?
[17:27:44] *** Joins: greenx (~greenx@pool-173-70-159-250.nwrknj.fios.verizon.net)
[17:28:19] *** Quits: greenx (~greenx@pool-173-70-159-250.nwrknj.fios.verizon.net) (Client Quit)
[17:28:54] *** Joins: greenx (~greenx@pool-173-70-159-250.nwrknj.fios.verizon.net)
[17:29:01] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 268 seconds)
[17:29:10] *** Quits: someguy123 (~someguy@user/someguy123) (Read error: Connection reset by peer)
[17:29:45] *** Joins: someguy123 (~someguy@user/someguy123)
[17:29:50] *** Joins: pnoud (~pnoud@user/pnoud)
[17:29:54] *** Joins: bilb_ono (~alexmarsh@pool-96-250-84-46.nycmny.fios.verizon.net)
[17:30:44] <nedbat> graingert: i didn't know i had a series like that?
[17:31:39] <graingert> nedbat: https://nedbatchelder.com/blog/202008/do_a_pile_of_work.html
[17:31:55] <graingert> nedbat: https://nedbatchelder.com/blog/202008/do_a_pile_of_work_better.html
[17:31:57] <nedbat> graingert: ah!
[17:32:14] *** Joins: ST47 (~ST47@user/st47)
[17:32:27] <graingert> nedbat:  "exceptions raised by the work function were silently ignored." you almost invented Structured Concurrency
[17:32:42] * nedbat invented a thing!
[17:32:49] <bjs> almost :P
[17:32:57] * nedbat almost invented a thing!
[17:33:37] *** Quits: Mattiaslndstrm (~Mattiasln@c188-148-207-108.bredband.tele2.se) (Ping timeout: 268 seconds)
[17:33:42] <graingert> eg what happens if two errors happen concurrently
[17:34:02] <graingert> https://www.python.org/dev/peps/pep-0654/ and trio etc
[17:34:09] <bjs> just dont write code that has errors
[17:34:16] <graingert> ^ pro tip
[17:34:16] *** Quits: xcombelle (~xavie@176-139-252-198.abo.bbox.fr) (Killed (NickServ (GHOST command used by xavie)))
[17:34:23] <graingert> bjs: that's the asyncio trick
[17:34:28] <nedbat> graingert: i wasn't following the discussion. what is this code for? what does to_thread do?
[17:34:37] *** Quits: pnoud (~pnoud@user/pnoud) (Ping timeout: 246 seconds)
[17:34:41] <graingert> nedbat: it grabs a thread from a thread pool
[17:34:54] <graingert> and runs the sync fn in that thread
[17:34:59] *** Quits: mossman93 (~quassel@user/mossman93) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[17:35:04] <bjs> I think it's a run-in-thread-executor
[17:35:22] <Luyin> graingert: I'm trying to figure out whether I should stick with tox.ini or pyproject.toml. tox.ini looks easier. what's your take on this?
[17:35:29] <graingert> as soon as any exception happens in a task started by tg.start_soon then the whole tg is "cancelled"
[17:35:37] <nedbat> Luyin: they do different things, don
[17:35:40] <nedbat> Luyin: they do different things, don't they?
[17:35:49] <graingert> every await operation in every cancelled task will fail with CancelledError
[17:35:55] <Luyin> nedbat: As per the tox docs: “At the moment tox supports three configuration locations prioritized in the following order:
[17:35:57] <Luyin>     pyproject.toml
[17:35:59] *** Joins: mossman93 (~quassel@user/mossman93)
[17:35:59] <Luyin>     tox.ini
[17:36:01] <Luyin>     setup.cfg”
[17:36:03] <Luyin> oops, sorry
[17:36:05] <Luyin> from here: https://christophergs.com/python/2020/04/12/python-tox-why-use-it-and-tutorial/
[17:36:12] <graingert> then the task group context manager collects all the CancelledError and other error types into a MultiError
[17:36:27] <graingert> unless there was only one error (that wasn't a CancelledError)
[17:36:34] <graingert> and raises it
[17:36:38] <nedbat> Luyin: oh, i see. yes, there's a movement toward "put your settings for X in any Y file you like"
[17:36:42] <Yhg1s> Luyin: you can configure tox with all three, but tox.ini is the only one you *only* use for tox configuration.
[17:36:49] *** Quits: varaindemian (~varaindem@86.124.78.162) (Ping timeout: 246 seconds)
[17:36:51] *** Joins: twobitsprite (~twobitspr@107.13.51.62)
[17:37:07] <graingert> Luyin: I like putting everything in my kitchensink.toml
[17:37:16] <graingert> but some people vehemently oppose it
[17:37:19] *** Joins: GadgetNerd (~GadgetNer@user/gadgetnerd)
[17:37:50] <graingert> if I could put my py files in there I probably would
[17:38:00] <Luyin> :(
[17:38:27] <graingert> module = """
[17:38:27] <graingert> from __future__ import annotations
[17:38:53] <Luyin> why is this such a chaotic mess
[17:39:05] <graingert> it's really not so bad
[17:39:28] <Luyin> lol
[17:39:34] <graingert> the ecosystem went through a lot of flux recently, but it's all been specced out now
[17:39:35] <Luyin> you're obviously already too deep in :P
[17:39:37] <graingert> (as of today)
[17:39:52] <graingert> and now we're just waiting for setuptools to implement all the peps
[17:39:52] <Luyin> I'm completely unclear of what exactly even reads the pypr.toml
[17:40:21] <Luyin> ok let's go the other way round: what should I do to get my package ready for testing and building?
[17:40:27] <Luyin> instead of "what should I not use"
[17:40:53] <Luyin> like, should I even use tox?
[17:40:59] <graingert> tox is great
[17:41:02] <graingert> tox 4 is better
[17:41:12] *** Quits: greenx (~greenx@pool-173-70-159-250.nwrknj.fios.verizon.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[17:41:15] <graingert> but out soon and mostly you can just upgrade and it will work
[17:41:37] <Luyin> ok, so tox gets a check
[17:41:44] *** Quits: osxtra (~root@136.49.108.80) (Ping timeout: 252 seconds)
[17:41:46] <graingert> everywhere you see a `[tool.*]` entry then a package with that name on pypi.org will read that section
[17:41:48] <Luyin> and basically you're saying "get rid of tox.ini and migrate to pypr.toml"
[17:41:50] <Luyin> ?
[17:42:10] <graingert> Luyin: no I'm saying *I* got rid of *my* tox.ini and moved it to pyproject.toml
[17:42:15] <Luyin> (the name is a bit shitty tbh :D at least in regards to typing)
[17:42:21] <graingert> and obviously I think everyone should do it too
[17:42:36] <Luyin> I would like to have the least convoluted setup possible
[17:42:44] <Luyin> so yes, I'd rather get rid of tox.ini and use pypr.toml
[17:42:45] <graingert> the only thing you should avoid is `setup.py` unless your use-case requires it
[17:42:50] <Luyin> :O
[17:42:53] <Luyin> lol
[17:42:55] <Luyin> damn
[17:42:59] <graingert> Luyin: yeah so my config in modernize is probably what you want
[17:42:59] <Luyin> another one to get rid of
[17:43:06] <Luyin> I might need to start from scratch
[17:43:22] *** Joins: wyclif (~wyclif@user/wyclif)
[17:43:32] <Luyin> but not today. last day before holiday. I think I'll stop here and continue in 2 weeks when I'm back :D
[17:43:38] *** Joins: lukka5 (~lukka5@246-60-231-201.fibertel.com.ar)
[17:43:46] *** Quits: drew (~drew@user/drew) (Ping timeout: 252 seconds)
[17:45:25] *** Joins: hanaan (~naan@user/naan)
[17:47:17] *** Joins: pnoud (~pnoud@user/pnoud)
[17:47:57] *** Joins: kostkon__ (~kostkon@2a02:587:a100:18e:9fe3:794:a225:7cdb)
[17:48:16] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 246 seconds)
[17:48:41] *** Quits: lukka5 (~lukka5@246-60-231-201.fibertel.com.ar) (Ping timeout: 256 seconds)
[17:48:42] *** Quits: kostkon_ (~kostkon@2a02:587:a100:18e:9fe3:794:a225:7cdb) (Remote host closed the connection)
[17:48:54] *** Joins: VaniaPy (~VaniaPy@46.12.252.2.dsl.dyn.forthnet.gr)
[17:49:01] *** Parts: VaniaPy (~VaniaPy@46.12.252.2.dsl.dyn.forthnet.gr) ()
[17:50:00] *** Joins: lukka5 (~lukka5@246-60-231-201.fibertel.com.ar)
[17:50:09] *** Joins: tg (~tg@rockylinux/infra/tg)
[17:50:11] *** Quits: mossman93 (~quassel@user/mossman93) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[17:50:14] *** Joins: slowButPresent (~slowButPr@user/slowbutpresent)
[17:50:48] *** Joins: Mattiaslndstrm (~Mattiasln@c188-148-207-108.bredband.tele2.se)
[17:50:48] *** Joins: Guddu (~Guddu@117.222.83.107)
[17:51:13] *** Joins: marduk (~marduk@216.243.54.166)
[17:52:07] *** Quits: pnoud (~pnoud@user/pnoud) (Ping timeout: 246 seconds)
[17:52:30] *** Quits: Bronto22 (~mennoh@84-86-247-193.fixed.kpn.net) (Quit: Konversation terminated!)
[17:53:38] *** zinc_ is now known as zinc
[17:53:42] *** Quits: {HD} (~{HD}@102.165.16.191) (Ping timeout: 272 seconds)
[17:56:30] *** Joins: billoday (~bill@cpe-104-228-202-125.maine.res.rr.com)
[17:56:37] *** Joins: dibas (~dibas@user/dibas)
[17:56:39] <catern> would anyone take a look at an article I'm writing about a new distributed systems library? I'm just looking for some first reactions to know that it makes sense. In PM, since it's still a draft (see nedbat I improved my message :))
[17:57:42] *** Joins: maharg101 (~maharg101@savoy.force9.co.uk)
[17:58:10] *** Quits: Crassus (~Crassus@user/crassus) (Quit: Textual IRC Client: www.textualapp.com)
[17:58:54] *** Quits: kostkon__ (~kostkon@2a02:587:a100:18e:9fe3:794:a225:7cdb) (Read error: Connection reset by peer)
[17:58:56] *** Joins: mossman93 (~quassel@user/mossman93)
[17:59:04] *** Joins: kostkon__ (~kostkon@2a02:587:a100:18e:9fe3:794:a225:7cdb)
[17:59:06] *** Joins: Church (~aleph@pool-98-116-232-112.nycmny.fios.verizon.net)
[18:00:12] *** Quits: DodgeThis (~DodgeThis@246.102.90.149.rev.vodafone.pt) (Quit: Leaving)
[18:00:28] *** Joins: wyclif (~wyclif@user/wyclif)
[18:00:38] *** Joins: cthulchu (~Cthulchu@193.194.107.250)
[18:02:38] *** Quits: rannnn8888 (~rannnn888@bzq-79-182-123-214.red.bezeqint.net) (Quit: Client closed)
[18:03:54] *** Quits: offpics (~offpics@89-79-56-128.dynamic.chello.pl) (Read error: Connection reset by peer)
[18:05:39] *** Joins: {HD} (~{HD}@37.19.197.192)
[18:05:44] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 272 seconds)
[18:06:51] *** Joins: Snyp (~rksht@49.207.193.103)
[18:07:06] *** Quits: iomari891 (~iomari891@105.112.138.38) (Ping timeout: 240 seconds)
[18:07:13] *** Joins: Schnouki (~schnouki@user/schnouki)
[18:07:15] *** Joins: sudorm (~sudorm@2a01cb0083a9c10044d5d153edc53b24.ipv6.abo.wanadoo.fr)
[18:10:31] *** Joins: pnoud (~pnoud@user/pnoud)
[18:11:03] <hexology> has anyone here used the Eliot logging framework in a serious application? https://eliot.readthedocs.io/en/stable/introduction.html it seems interesting, but also seems somewhat intrusive in your code (you could end up with very deep nesting of `with`s) and it looks like it entirely ignores the standard python logging machinery. so i've been skeptical and haven't wanted to try it.
[18:12:18] *** Quits: Naan (~naan@user/naan) (Quit: Leaving)
[18:13:14] *** Quits: wattux (~wattux@212.51.23.106) (Quit: Client closed)
[18:14:14] *** hanaan is now known as Naan
[18:14:38] <grym> hexology: i use it in prod, but more or less exclusively the @log_call decorator on REST endpoints
[18:15:06] *** Quits: pnoud (~pnoud@user/pnoud) (Ping timeout: 240 seconds)
[18:15:17] *** Joins: Ronalds_Mazitis_ (~Ronalds_M@78.84.19.247)
[18:16:29] <hexology> grym, if you don't mind answering more questions: do you also use the built-in logging framework? why use eliot at all, if you could write a @log_call decorator that uses `logging`?
[18:17:24] <hexology> that is, if you're only using @log_call on "top-level" functions, you don't get the benefit of the "causality tree" feature (which seems like eliot's best feature by far), so what would be the purpose of that?
[18:17:32] *** Joins: timkofu (~timkofu@user/timkofu)
[18:18:14] *** Joins: dsl (~dsl@ppp59-167-120-76.static.internode.on.net)
[18:18:17] <grym> hexology: frankly, no particular reason except that stdlib logging has a reputation for being fussy and i wanted to try something new
[18:18:22] *** Joins: kostkon_ (~kostkon@2a02:587:a100:18e:9fe3:794:a225:7cdb)
[18:18:31] *** Joins: Gerula_ (~Gerula@user/gerula)
[18:18:31] *** Gerula is now known as Guest3020
[18:18:31] *** Quits: Guest3020 (~Gerula@user/gerula) (Killed (molybdenum.libera.chat (Nickname regained by services)))
[18:18:31] *** Gerula_ is now known as Gerula
[18:18:36] *** Joins: wyclif (~wyclif@user/wyclif)
[18:18:38] <grym> we haven't gotten much feedback one way or the other about logs from that client, so it's a low-information thing for me in that regard
[18:19:10] *** Quits: kostkon__ (~kostkon@2a02:587:a100:18e:9fe3:794:a225:7cdb) (Read error: No route to host)
[18:19:56] *** Joins: reset (~reset@user/reset)
[18:20:06] *** Quits: tg (~tg@rockylinux/infra/tg) (Quit: tg)
[18:20:42] *** Quits: hendursa1 (~weechat@user/hendursaga) (Quit: hendursa1)
[18:20:58] *** Quits: ctrypoph (~ctrypoph@99-51-11-77.lightspeed.brhmmi.sbcglobal.net) (Quit: -a- Connection Timed Out)
[18:21:11] <grym> i like the log format and its searching tools.
[18:21:16] *** Joins: hendursaga (~weechat@user/hendursaga)
[18:21:20] *** Joins: mefistofeles (~mefistofe@user/mefistofeles)
[18:22:31] *** Joins: iauc (~iauc@ti0061a400-1478.bb.online.no)
[18:23:30] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 240 seconds)
[18:24:01] <SnoopJ> hexology, I like the logging module a lot, it offers a lot of surface area and doesn't have too many surprises. You do have to get your head around the concept of the logging 'hierarchy' and the distinction between handlers/formatters if you're poking the details, but the "basicConfig() and start logging" workflow is useful, too.
[18:25:09] <SnoopJ> eliot is very much designed towards logs that are associated with 'actions,' which can be nice in complicated apps that call into themselves a bunch (i.e. its tree output helps give you a sense of flow control)
[18:25:30] *** Joins: ctrypoph (~ctrypoph@99-51-11-77.lightspeed.brhmmi.sbcglobal.net)
[18:27:12] *** Joins: venmx (~bertie@host81-155-235-58.range81-155.btcentralplus.com)
[18:27:44] *** Joins: greenx (~greenx@pool-173-70-159-250.nwrknj.fios.verizon.net)
[18:29:01] <hexology> yes, i use the basic logging module and i agree it's great for precise control. i haven't heard many people say it's "fussy", although it definitely has some strange legacy warts (e.g. configurable format string styles) and some minor newbie traps, like duplicate handlers, accidentally using the root logger, etc.
[18:29:08] *** Quits: Jigsy (~Jigsy@user/jigsy) (Quit: brb.)
[18:29:13] *** Joins: pyzozord (~pyzozord@user/pyzozord)
[18:29:30] *** Joins: ApostleInTriumph (~ApostleIn@nat-clients.lix.polytechnique.fr)
[18:29:48] *** Joins: m_tadeu (~quassel@bl14-187-233.dsl.telepac.pt)
[18:29:55] <pyzozord> Hello, please do not hate me for this question. How is python's inhertiance model different from javascript? I have an impression they they are actually BOTH prototypal inhertiance models
[18:30:02] *** Quits: kostkon_ (~kostkon@2a02:587:a100:18e:9fe3:794:a225:7cdb) (Remote host closed the connection)
[18:30:13] <ApostleInTriumph> Hello. I just created a conda env and installed pip. I'm inside this env now, however, $which pip points to the conda base's pip. Why is that?
[18:30:20] *** Joins: kostkon_ (~kostkon@2a02:587:a100:18e:9fe3:794:a225:7cdb)
[18:30:35] *** Joins: Vornicus (~Vornicus@2603-8000-5d07-7ef0-d575-2704-820a-6f5d.res6.spectrum.com)
[18:30:47] <SnoopJ> pyzozord, Python doesn't have any concept of a "prototype"
[18:30:59] <SnoopJ> (I would answer the question as-asked with "very")
[18:31:06] *** Quits: Pickchea (~private@user/pickchea) (Ping timeout: 240 seconds)
[18:31:14] <hexology> the main thing holding me back from eliot is that it doesn't seem to integrate at all with `logging`, which means you have to either use one or the other exclusively, or have your own complicated logging initialization/setup code
[18:31:19] *** Joins: securethemews (~securethe@2a00:23c4:1e98:ef00::4)
[18:31:24] <pyzozord> SnoopJ: in the strict sense it doesn't but I can dynamically modify the properties of the class that my object inherits from, right?
[18:31:40] <very_sneaky> ApostleInTriumph: that's what virtual environments do - they use a local tree so that you don't modify your global environment
[18:31:45] <Yhg1s> pyzozord: maybe. it depends on the class.
[18:31:48] <SnoopJ> pyzozord, some of them. It depends on how the class is written.
[18:31:58] <hexology> ApostleInTriumph: is your path set correctly?
[18:32:10] <hexology> you're 100% sure the conda env is "activated"?
[18:32:20] *** Quits: venmx (~bertie@host81-155-235-58.range81-155.btcentralplus.com) (Ping timeout: 272 seconds)
[18:32:24] <ApostleInTriumph> very_sneaky i installed a package through pip but I get an import error from within this environment and that's the problem
[18:32:24] <ssbr> pyzozord: for that matter you can change what type an object is at runtime. These are things one should never do, and pretend are impossible.
[18:32:50] *** Joins: okamis (~okamis@90-229-141-188-no92.tbcn.telia.com)
[18:32:57] <hexology> ApostleInTriumph: show the commands you executed
[18:33:10] <hexology> use https://bpaste.net or similar
[18:33:15] <ssbr> (Well, modifying the class is sometimes used for testing, but... okay, *argh*.)
[18:33:33] <SnoopJ> hexology, I think it's a matter of aesthetics re: fussiness. eliot's worth at least trying, but you're not wrong that it is very opinionated :)
[18:33:33] <very_sneaky> ApostleInTriumph: { `pip list`, `pip show <package name>`
[18:33:46] <very_sneaky> will show you where the package was installed - could confirm it's in the conda tree
[18:33:54] <ApostleInTriumph> hexology https://dpaste.com/2XGCH23FN
[18:34:07] <pyzozord> what do you mean by "it depends on the class"? So I can modify some classes but not others? Why, and how?
[18:34:41] <ssbr> pyzozord: ones written in C aren't mutable from Python. For example, int.
[18:34:42] *** Joins: wyclif (~wyclif@user/wyclif)
[18:34:52] *** Joins: Jigsy (~Jigsy@user/jigsy)
[18:34:54] <ssbr> Sorry, *often* aren't mutable from Python. Sometimes they are.
[18:35:03] <ApostleInTriumph> very_sneaky https://bpa.st/HMYQ
[18:36:01] <very_sneaky> ApostleInTriumph: can you show the commands you used to set up the environment
[18:36:29] <SnoopJ> pyzozord, re: "how", because the stuff you do when you modify classes is really calling functions (i.e. `foo.bar = 42` is a syntax sugar for a method call)
[18:36:48] <hexology> SnoopJ: i don't mind opinionated! but when the opinionated guy is so opinionated that he can't work with the rest of the team, maybe you shouldn't hire him ;)
[18:37:14] <ApostleInTriumph> very_sneaky conda create --name smpl python=2.7
[18:37:14] <SnoopJ> hexology, 十人十色, try both and see which you like, imo
[18:37:14] <okamis> Hello, guys I got a minimal case here, https://bpa.st/BDKA   I dont understand where I should patch out
[18:37:24] <okamis> See line 15
[18:37:27] <ssbr> hexology: everything is "opinionated" in that way - e.g. you can't write C++ in Python, but that doesn't mean you should refuse to use Python.
[18:37:37] <SnoopJ> hexology, but for the record, I haven't used eliot for similar reasons: I don't like the syntax burden
[18:37:52] <SnoopJ> (and don't have enough task-y things to outweigh that dislike)
[18:37:59] <hexology> ApostleInTriumph: can you include the commands you used to create and activate the env as well? this isn't enough information to help
[18:38:13] <ApostleInTriumph> hexology to create : conda create --name smpl python=2.7
[18:38:15] *** Joins: drincruz (~drincruz@ec2-18-235-23-153.compute-1.amazonaws.com)
[18:38:19] <hexology> ApostleInTriumph: and to activate?
[18:38:19] <pyzozord> SnoopJ: you mean that it's just syntactic sugar on top of __setattr__?
[18:38:23] <ApostleInTriumph> to activate conda activate smpl
[18:38:42] <hexology> close your terminal and open a new shell session
[18:38:43] <hexology> just to be safe
[18:39:04] <ApostleInTriumph> lol
[18:39:07] *** Joins: SteveP (~SteveP@ec2-34-193-49-216.compute-1.amazonaws.com)
[18:39:08] <ssbr> okamis: mock.patch.object(file_1.Classy, '_get_serial_number', autospec=True, ...)
[18:39:30] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 240 seconds)
[18:39:31] <SnoopJ> pyzozord, pretty much, yea. The equivalent spelling is `setattr(foo, "bar", 42)`
[18:39:31] <ApostleInTriumph> hexology tried, didn't work
[18:39:38] <ssbr> (you can also use patch('path.to.<...>') but this inhibits some automated tooling)
[18:39:57] <okamis> ssbr, Its the serial.Serial I want to mock, not the _get_serial_number
[18:40:20] <ApostleInTriumph> https://bpa.st/E3YA
[18:40:32] <ApostleInTriumph> hexology very_sneaky ^
[18:40:35] <SnoopJ> pyzozord, there's some fiddly detail I'm glossing over here in trying to avoid the gory details. The point is that inheritance in Python is "just" a matter of resolving names being accessed on a class/instance, and base classes are another place to look. I don't know ECMAScript super well but AIUI it's quite different.
[18:40:36] <ssbr> okamis: then serial.Serial, 'read_until' perhaps, but I recommend not doing that if the dependency isn't one you control, as then it affects *everyone* using that dependency
[18:40:42] *** Quits: drincruz_ (~drincruz@ool-44c748be.dyn.optonline.net) (Ping timeout: 240 seconds)
[18:41:10] *** Parts: Asmodean (~quassel@165.22.94.154) (https://quassel-irc.org - Chat comfortably. Anywhere.)
[18:41:10] <hexology> pyzozord: fundamentally JS and Python share the property that "almost everything is mutable", and inheritance is somewhat prototype-like, but a "prototype-based" language doesn't need explicit class objects. an object being a "class" is a matter of convention. whereas in python "classes" are distinct things.
[18:41:32] <timkofu> Is there a way to tell Pydantic to raise an error if field: int is given str(2) instead of automatically converting it to an int?
[18:41:35] <ssbr> pyzozord: if the thing being discussed is modifying the instance in order to change behavior, some things are *only* looked up on classes, such as special methods like __iter__ and operator overloading.
[18:41:43] <timkofu> No automatic conversions?
[18:41:45] <ssbr> this feeds into hexology's point.
[18:42:03] <SteveP> I am using a "Queue" to pass messages from a child thread to its parent thread.  I find that when the child thread puts messages and terminates, not all of those messages are fully "settled" in the Queue yet when that child thread's ".is_alive()" method returns False.  Is there a way to block until Queue puts are fully settled, or some other
[18:42:04] <SteveP> threadsafe data structure you can use instead?
[18:42:06] <grym> timkofu: the thanks-i-hate-it answer is a @root_validator(pre=True)
[18:42:07] <pyzozord> hexology: that's a nice explonation, thank you
[18:42:16] <grym> timkofu: there may be something in Config though, that's where i'd look
[18:42:25] <SnoopJ> timkofu, grym: https://pydantic-docs.helpmanual.io/usage/types/#strict-types
[18:42:29] *** Joins: falk689 (~quassel@host-185-210-113-191.wime.it)
[18:42:35] <very_sneaky> ApostleInTriumph: ls -al /home/user/.conda/envs/smpl/bin/pip; echo $PATH
[18:42:36] <grym> ohhh even nicer
[18:42:48] <SnoopJ> I believe you can annotate as `conint(..., strict=True)` for this behavior
[18:42:49] <timkofu> SnoopJ: Thanks.
[18:42:56] <grym> i knew about con- types, but i had forgotten about strict- ones
[18:43:01] <timkofu> grym: Thanks too.
[18:43:02] <SnoopJ> same thing really :)
[18:43:03] <grym> con<type> <3
[18:43:12] <hexology> ApostleInTriumph: pip really should be part of the env already... but try `conda install -n smpl pip` to be sure it's installing into the right env
[18:43:22] <SnoopJ> yea the con*() family are nice, I would use those just because it's less to remember and supports a variety of constraints
[18:43:46] <grym> saves me no end of "no, really, you _will_ POST me between 1 and 10 files" checking
[18:44:15] *** Quits: securethemews (~securethe@2a00:23c4:1e98:ef00::4) (Remote host closed the connection)
[18:44:15] *** Quits: drincruz (~drincruz@ec2-18-235-23-153.compute-1.amazonaws.com) (Read error: Connection reset by peer)
[18:44:34] <ApostleInTriumph> very_sneaky https://bpa.st/UDXQ
[18:44:36] *** Joins: securethemews (~securethe@2a00:23c4:1e98:ef00::4)
[18:45:17] *** Quits: securethemews (~securethe@2a00:23c4:1e98:ef00::4) (Remote host closed the connection)
[18:45:18] <very_sneaky> ApostleInTriumph: for some reason your local bin directory is ahead of your conda env on your path - it's discovering your local bin directory first
[18:45:19] *** Joins: gr33n7007h (~gr33n7007@user/gr33n7007h)
[18:45:21] *** Quits: mcope (~matt@user/mcope) (Ping timeout: 256 seconds)
[18:45:36] *** Joins: securethemews (~securethe@2a00:23c4:1e98:ef00::4)
[18:45:50] <very_sneaky> try `conda deactivate; conda activate smpl;`
[18:45:54] <ApostleInTriumph> why would conda do this?
[18:45:59] <grym> conda is weird
[18:46:03] <ApostleInTriumph> lol
[18:46:06] *** Quits: securethemews (~securethe@2a00:23c4:1e98:ef00::4) (Remote host closed the connection)
[18:46:24] *** Joins: securethemews (~securethe@2a00:23c4:1e98:ef00::4)
[18:46:36] *** Parts: dsl (~dsl@ppp59-167-120-76.static.internode.on.net) ()
[18:46:48] *** Quits: securethemews (~securethe@2a00:23c4:1e98:ef00::4) (Remote host closed the connection)
[18:46:58] <SnoopJ> I don't think conda "did this," I think you're pre-pending /home/user/.local/bin after your conda init in your rc file, probably
[18:47:01] <ApostleInTriumph> still no luck https://bpa.st/UM3Q
[18:47:03] <very_sneaky> i don't have a good feel for conda - but that should remove it from the path and add it to the path. Do you have an `export PATH=/home/user/.local/bin:$PATH` statement in your .*rc file?
[18:47:11] <SnoopJ> yea, probably exactly that ^
[18:47:14] <ApostleInTriumph> SnoopJ nope, that's not the case
[18:47:15] *** Joins: securethemews (~securethe@2a00:23c4:1e98:ef00::4)
[18:47:29] <SnoopJ> ApostleInTriumph, what's putting .local/bin there, then? I don't think conda does this.
[18:47:31] <ApostleInTriumph> because I've another environment that is with python 3.8. there, the correct pip is being used
[18:47:33] *** Parts: pyzozord (~pyzozord@user/pyzozord) ()
[18:47:35] <very_sneaky> oh jeez, nested envs
[18:47:46] <SnoopJ> hmm
[18:47:52] <SnoopJ> maybe something in the env touches PATH?
[18:47:54] <very_sneaky> ApostleInTriumph: `conda deactivate; conda deactivate; conda activate smpl`
[18:48:26] <SnoopJ> yea I would at least try cycling it to see if that 'fixes' the order, and if so that tells you it's at login time. If it's still this way, you can be pretty sure the env is weird.
[18:48:36] <ApostleInTriumph> ah
[18:48:38] *** Joins: akk (~akk@174-28-112-132.albq.qwest.net)
[18:48:43] <ApostleInTriumph> that fixed it, thanks a lot very_sneaky
[18:48:51] *** Joins: kostkon__ (~kostkon@2a02:587:a100:18e:9fe3:794:a225:7cdb)
[18:49:13] <very_sneaky> i'd suggest something in your .*rc file is touching the path after conda initially prepends its path to your path
[18:49:17] <ApostleInTriumph> anyway I'm curious now, why would conda behave weirdly for python 2.7 ?
[18:49:35] <okamis> Same question, I realized my mvc missed some details https://bpa.st/BLHA  what is the correct path of line 16 to allow the test to pass in file 2.
[18:49:38] <SnoopJ> ApostleInTriumph, why do you think it's conda that is doing this?
[18:49:40] *** Joins: drincruz (~drincruz@ool-44c748be.dyn.optonline.net)
[18:49:50] <SnoopJ> Especially since the 'fix' resolved the issue, which suggests it's something not-conda
[18:50:03] <very_sneaky> ApostleInTriumph: you can probably avoid this issue by preventing conda from automatically placing you in an env when you start a new shell session
[18:50:31] *** Quits: kostkon__ (~kostkon@2a02:587:a100:18e:9fe3:794:a225:7cdb) (Remote host closed the connection)
[18:50:35] <SnoopJ> I would definitely not do that, yea
[18:50:46] <very_sneaky> which is one of it's insane defaults
[18:50:49] *** Joins: kostkon__ (~kostkon@2a02:587:a100:18e:9fe3:794:a225:7cdb)
[18:50:56] <SnoopJ> or maybe wrap a guard around it
[18:51:05] <SnoopJ> conda's opinions about rc are pretty annoying imo
[18:51:06] <grym> conda is also pretty greedy about my $PS1
[18:51:13] <ApostleInTriumph> very_sneaky how do do that?
[18:51:17] <grym> one of the reasons i try to avoid using conda
[18:51:30] *** Quits: pneff (~pneff@2a02:168:fedc:0:4961:9552:50a:6c11) (Ping timeout: 240 seconds)
[18:51:30] *** Quits: timkofu (~timkofu@user/timkofu) (Quit: leaving)
[18:51:36] *** Quits: kostkon_ (~kostkon@2a02:587:a100:18e:9fe3:794:a225:7cdb) (Remote host closed the connection)
[18:52:01] *** Quits: securethemews (~securethe@2a00:23c4:1e98:ef00::4) (Remote host closed the connection)
[18:52:04] <hexology> `conda init` is a trojan horse :)
[18:52:09] <hexology> the name is very misleading
[18:52:12] <SnoopJ> or a cuckoo's egg? :)
[18:52:19] *** Joins: securethemews (~securethe@2a00:23c4:1e98:ef00::4)
[18:52:21] <SnoopJ> (no)
[18:52:21] <grym> conda new benson-and-hedges
[18:52:27] <hexology> i haven't done data science stuff in a while, but i have high hopes for the mamba project
[18:52:51] <grym> hexology: the good news is that so much of world now also speaks pip fluently that you more or less don't have to care
[18:52:59] <very_sneaky> ApostleInTriumph: i don't use conda - the setting seems to be `auto_activate_base` for `conda init` though
[18:53:05] <hexology> true, wheels are not as rare as they used to be
[18:53:11] <very_sneaky> ApostleInTriumph: see: https://docs.conda.io/projects/conda/en/latest/user-guide/tasks/manage-environments.html#conda-init
[18:53:17] *** Quits: alguien (~alguien@user/alguien) (Ping timeout: 256 seconds)
[18:53:18] <very_sneaky> you want to set that to false
[18:53:24] <grym> hexology: in ML, anyway, we haven't had to care about conda in about 2 years or slightly longer
[18:53:33] <ApostleInTriumph> hmm, makes sense very_sneaky
[18:53:36] *** Joins: chaosite (~chaosite@user/chaosite)
[18:53:38] <grym> (at work)
[18:53:57] *** Joins: wyclif (~wyclif@user/wyclif)
[18:54:06] <hexology> do the torch and tf wheels have gpu support now?
[18:54:15] <grym> for years
[18:54:19] *** Quits: securethemews (~securethe@2a00:23c4:1e98:ef00::4) (Remote host closed the connection)
[18:54:20] <hexology> i didnt realize
[18:54:29] <grym> and there is no longer tensorflow-gpu since tf ..2 ?
[18:54:35] <grym> i think.  they got unified at some point
[18:54:37] <very_sneaky> ApostleInTriumph: looks like it's `conda config --set auto_activate_base false`
[18:54:39] <hexology> but yeah, with docker and wheels conda isn't as important
[18:54:47] <hexology> i still think it's quite a technical achievement
[18:54:51] *** Joins: kostkon_ (~kostkon@2a02:587:a100:18e:9fe3:794:a225:7cdb)
[18:54:56] *** Quits: bigRoo (~user@73.181.dsl.syd.iprimus.net.au) (Remote host closed the connection)
[18:55:01] <bjs> okamis: you'll want to do something like patch("serial.Serial", autospec=True), your `mock_serial.side_effect = [1, 2]` isn't going to work if you want to mock the Serial object
[18:55:05] <hexology> but i think continuumio really goofed, gave conda a weird/bad reputation by underinvesting in it, and the world is kind of passing them by
[18:55:08] *** Quits: kostkon__ (~kostkon@2a02:587:a100:18e:9fe3:794:a225:7cdb) (Remote host closed the connection)
[18:55:20] *** Joins: mh3f (~mhowle@cpe-98-25-217-234.sc.res.rr.com)
[18:55:27] <very_sneaky> i don't like using conda, but i gotta tell ya, in the absence of a sensible pypi mirror the anaconda distribution certainly provides a lot for free in one big installer
[18:55:44] <very_sneaky> (in offline environments)
[18:55:46] <grym> very_sneaky: that's kind of a point against it, really
[18:55:51] <grym> well, maybe for offline
[18:55:51] <bjs> okamis: but you might want to `mock_serial().__enter__().read_until.side_effect = [1, 2]`
[18:55:54] *** Joins: rubberd0g (~kha0s@p5dc58f39.dip0.t-ipconnect.de)
[18:55:57] <bjs> I think
[18:55:59] <grym> but in the cases i have to use conda, i start with miniconda
[18:56:04] <SnoopJ> conda does strictly more than pip, especially when it comes to deployable envs
[18:56:08] <hexology> same, i used miniconda all the time
[18:56:24] <hexology> and yes SnoopJ, what i liked about miniconda is that i could install binary tools in it
[18:56:26] <SnoopJ> miniconda +1, I know what packages I want 😈
[18:56:36] <hexology> helped a lot with reproducibility in sharing with teammates
[18:56:38] <grym> mkl aside, "subtly different numpy versions, ha ha ha" has bit me at least once
[18:56:51] <grym> (with not-miniconda)
[18:57:06] <SnoopJ> hexology, same, I had a heck of a time getting ROOT installed on a very fiddly HPC machine and found a package for it that made my headaches go away. Amusingly, it turned out that one of the students who had just joined the program was the author :)
[18:57:09] <hexology> precisely controlled python version, numpy, pandas, etc. that you can install with one command? really useful for collaborating
[18:57:14] *** Joins: pneff (~pneff@2a02:168:fedc:0:4961:9552:50a:6c11)
[18:57:22] <hexology> SnoopJ hah, how's that for serendipity
[18:57:37] <very_sneaky> ApostleInTriumph: fwiw, the conda settings are all stored in ~/.condarc. might be worht a look to see if they're sensible/you're happy with them
[18:57:38] <ApostleInTriumph> very_sneaky done and it works
[18:57:44] <grym> hexology: yeah.  docker's great for _deploy_ .. but i think it's a bad fit for "here's an environment to work in", at least right now
[18:58:22] <very_sneaky> ApostleInTriumph: good to hear.
[18:58:29] *** Quits: ndim (hun@moooo.n-dimensional.de) (Read error: Connection reset by peer)
[18:58:42] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 240 seconds)
[18:58:45] <SnoopJ> conda's "forge" system is also pretty sane, considering.
[18:58:51] *** Quits: SteveP (~SteveP@ec2-34-193-49-216.compute-1.amazonaws.com) (Quit: Client closed)
[18:59:09] *** Joins: varaindemian (~varaindem@86.124.78.162)
[18:59:27] <hexology> grym: it's not bad when you use volumes
[18:59:42] <hexology> i know quite a few people work with docker taht way
[18:59:43] *** Quits: rubberd0g (~kha0s@p5dc58f39.dip0.t-ipconnect.de) (Client Quit)
[18:59:48] <hexology> but i agree it's not my preferred workflow
[19:00:12] <hexology> and mamba solves my main conda complaint - it's horribly slow and dependency resolution can be sketchy
[19:00:30] *** Joins: zerotypic (~zerotypic@66.96.192.176)
[19:00:45] <SnoopJ> definitely not my preference if I don't have exactly the problems it solves uniquely
[19:00:46] <grym> hexology: what i have tried and failed to do a few times is to create a base image with a python-and-cuda-and-... environment in it, and then use that as the runtime environment for a python project that exists on disk as normal in a git repo
[19:00:58] <grym> it's ... clunky at best, and rapidly horrible at worst
[19:01:01] <hexology> yeah
[19:01:11] <hexology> i've tried it too, people claim "it works great" but i haven't had that experience
[19:01:16] <SnoopJ> CUDA is well into "ugh, let's docker" territory heh
[19:01:27] <grym> i got about 80% of the way through writing some really horrible UID jugglign scripts
[19:01:31] <grym> and then ragequit :P
[19:01:44] *** Joins: matsaman (~matsaman@user/matsaman)
[19:01:47] <hexology> plus you might have to run debugpy and can't use normal python debugging tools, at which point you're back in the dark ages
[19:01:49] <grym> (as it turns out, mxnet can burn anyway, so it was thankfully moot)
[19:01:51] *** Joins: gggp (~textual@60.10.23.171)
[19:02:13] *** Quits: kostkon_ (~kostkon@2a02:587:a100:18e:9fe3:794:a225:7cdb) (Remote host closed the connection)
[19:02:15] *** Joins: Akuli (~Akuli@82-203-163-66.bb.dnainternet.fi)
[19:02:22] *** Joins: kostkon__ (~kostkon@2a02:587:a100:18e:9fe3:794:a225:7cdb)
[19:03:04] *** Quits: Guddu (~Guddu@117.222.83.107) (Read error: Connection reset by peer)
[19:03:04] <SnoopJ> DAP seems good
[19:03:07] *** Joins: rubberd0g (~kha0s@p5dc58f39.dip0.t-ipconnect.de)
[19:03:34] <hexology> i tried so many times to get debugpy + dap working in neovim
[19:03:40] *** Quits: gggp (~textual@60.10.23.171) (Client Quit)
[19:03:56] <hexology> i think it got it working _once_ for a regular .py file, and never with a docker container
[19:04:04] <hexology> too fussy, i'll try again in a year
[19:04:06] * SnoopJ nod
[19:04:18] *** Quits: kostkon__ (~kostkon@2a02:587:a100:18e:9fe3:794:a225:7cdb) (Read error: No route to host)
[19:04:22] *** Joins: kostkon_ (~kostkon@2a02:587:a100:18e:9fe3:794:a225:7cdb)
[19:04:23] <SnoopJ> I have been tempted to try pudb's ad-hoc protocol but never done it.
[19:04:24] *** Joins: thiras (~thiras@user/thiras)
[19:04:56] *** Joins: alguien (~alguien@user/alguien)
[19:05:54] *** Quits: mIk3_08 (~Thunderbi@user/mik3-08/x-2852566) (Ping timeout: 272 seconds)
[19:06:13] <Julian> like, wiring that up to DAP, or what?
[19:08:30] *** Quits: kostkon_ (~kostkon@2a02:587:a100:18e:9fe3:794:a225:7cdb) (Remote host closed the connection)
[19:08:49] *** Joins: kostkon_ (~kostkon@2a02:587:a100:18e:9fe3:794:a225:7cdb)
[19:08:58] *** Joins: Pickchea (~private@user/pickchea)
[19:09:07] *** Joins: limbera (~limbera@2603-7000-483e-1500-d067-0500-3b1f-8cd8.res6.spectrum.com)
[19:09:25] <SnoopJ> nah, just using it at all
[19:09:28] *** Joins: cidtest (~cidtest@89.238.185.215)
[19:09:46] *** Joins: wyclif (~wyclif@user/wyclif)
[19:11:05] *** Joins: Lando-SpacePimp (~LandoC@user/lando-spacepimp)
[19:12:24] *** Joins: kostkon__ (~kostkon@2a02:587:a100:18e:9fe3:794:a225:7cdb)
[19:12:41] *** Quits: kostkon_ (~kostkon@2a02:587:a100:18e:9fe3:794:a225:7cdb) (Read error: No route to host)
[19:13:11] *** Joins: gggp (~textual@60.10.23.171)
[19:15:05] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 268 seconds)
[19:16:39] *** Quits: limbera (~limbera@2603-7000-483e-1500-d067-0500-3b1f-8cd8.res6.spectrum.com) (Remote host closed the connection)
[19:19:08] *** Joins: ice9 (~ice9@user/ice9)
[19:19:10] *** Quits: gggp (~textual@60.10.23.171) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[19:20:20] *** Joins: drincruz_ (~drincruz@ec2-18-235-23-153.compute-1.amazonaws.com)
[19:20:35] *** Joins: __that__ (~Guest63@195.59.68.214)
[19:20:49] <ice9> I'm getting the error "SSL: TLSV1_ALERT_PROTOCOL_VERSION" with python 3.6, how can I solve that issue?
[19:20:58] *** Quits: ctrypoph (~ctrypoph@99-51-11-77.lightspeed.brhmmi.sbcglobal.net) (Quit: -a- Connection Timed Out)
[19:21:57] *** Joins: ctrypoph (~ctrypoph@2600:1702:3000:9090:6d7f:1c9d:1aea:24aa)
[19:22:53] <ice9> openssl version 1.0.2
[19:23:00] *** Joins: wyclif (~wyclif@user/wyclif)
[19:23:05] *** Quits: drincruz (~drincruz@ool-44c748be.dyn.optonline.net) (Ping timeout: 268 seconds)
[19:23:33] *** Joins: mastardet (~mastardet@user/mastardet)
[19:23:49] <__that__> Hi all
[19:24:06] *** Quits: kostkon__ (~kostkon@2a02:587:a100:18e:9fe3:794:a225:7cdb) (Remote host closed the connection)
[19:24:24] *** Joins: kostkon__ (~kostkon@2a02:587:a100:18e:9fe3:794:a225:7cdb)
[19:24:43] <matsaman> hi that
[19:25:56] <__that__> Could anyone please let me know what sort of exception can be caught in line 38 that cannot be in line 16? https://dpaste.com/8M63GGE63. Just out of curiosity, what gather can throw there that cannot be caught in line 16
[19:28:06] <hexology> ice9: possibly relevant? https://stackoverflow.com/q/44316292/2954547
[19:28:07] *** Joins: ctrypoph_ (~ctrypoph@2607:fb90:a908:91ae:b0f9:1fc6:e1c4:d9af)
[19:28:18] *** Quits: kostkon (~androirc@ob21aa.static.otenet.gr) (Quit: AndroIRC - Android IRC Client ( http://www.androirc.com ))
[19:28:22] *** Quits: gggpkm (~gggpkm@60.10.23.171) (Ping timeout: 246 seconds)
[19:28:50] *** Quits: chele (~chele@user/chele) (Remote host closed the connection)
[19:28:54] <hexology> __that__: maybe if the event loop itself crashes
[19:29:33] *** Quits: ctrypoph (~ctrypoph@2600:1702:3000:9090:6d7f:1c9d:1aea:24aa) (Ping timeout: 256 seconds)
[19:29:42] <ice9> hexology, yes be cause he had older version of openssl but i got a more recent one
[19:29:43] <SnoopJ> ice9, looks like your remote doesn't like the protocol version. That OpenSSL seems kinda old, but it should speak TLS 1.2. Does your remote speak TLS 1.3 exclusively, perhaps?
[19:29:50] *** Joins: y2o (~y2o@pc-128-133-45-190.cm.vtr.net)
[19:29:52] <__that__> hexology, thanks. Yeah I thought about that. I guess I was asking myself about the cause of that crash rather than whether a crash would happen.
[19:29:57] *** Joins: qunzhong_luxian (~qunzhong_@68.235.43.110)
[19:29:58] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 272 seconds)
[19:30:02] <hexology> __that__: also FYI there is `logging.exception`, which i think is the same as `logging.error` wit exc_info=True
[19:30:03] <SnoopJ> (it would help to see the complete error if there's more information)
[19:30:15] <hexology> +1, including traceback
[19:30:37] <hexology> maybe your exception handler raised an exception
[19:30:37] <__that__> hexology, thanks for that. That code isn't mine but that is a handy tip.
[19:33:44] <ice9> SnoopJ, i tried with openssl s_client command to check the supported ssl/tls version but it returned no cert with any of the versions
[19:33:46] *** Quits: alguien (~alguien@user/alguien) (Ping timeout: 272 seconds)
[19:35:27] <tims1> __that__: This is a handy chart builtin exceptions, you can see the exceptions that are excluded when catching "Exception" https://docs.python.org/3/library/exceptions.html#exception-hierarchy
[19:35:49] *** tims1 is now known as tims
[19:36:54] *** Quits: leduyquang753 (~leduyquan@user/leduyquang753) (Quit: leaving)
[19:37:02] *** Quits: nomic (~nomic@2a00:23c6:9910:1201:b1d1:7f91:d3d7:a8d8) (Quit: Leaving)
[19:37:22] *** Joins: nomic (~nomic@2a00:23c6:9910:1201:b1d1:7f91:d3d7:a8d8)
[19:37:26] <__that__> tims1
[19:37:28] *** Joins: venmx (~albasawa@5.148.85.162)
[19:37:58] *** Quits: venmx (~albasawa@5.148.85.162) (Client Quit)
[19:38:16] *** Quits: justinf210 (~justinf21@192-230-160-245.3rivers.net) (Remote host closed the connection)
[19:38:26] *** Joins: justinf210 (~justinf21@192-230-160-245.3rivers.net)
[19:39:25] *** Joins: gitesh (uid423739@id-423739.charlton.irccloud.com)
[19:39:25] <anddam> I need to conditionally install a dependency from setup.py, where can I hook before setup() gets called while doing "pip install .?
[19:39:44] <anddam> x/\.\?/ a/"/
[19:40:02] <altendky> anddam: extras instead of mucking around?
[19:40:19] *** Joins: kostkon (~kostkon@2a02:587:a100:18e:9fe3:794:a225:7cdb)
[19:40:22] *** Joins: Guddu (~Guddu@117.222.83.107)
[19:40:25] <anddam> altendky: can extras handle logic?
[19:40:28] <altendky> anddam: `pip install .[theextra]` and then you can specify what needs installed when `theextra` is chosen
[19:40:29] *** Quits: kostkon__ (~kostkon@2a02:587:a100:18e:9fe3:794:a225:7cdb) (Remote host closed the connection)
[19:40:40] <altendky> anddam: what logic?  same logic as any dep (platform, python version, etc)
[19:41:09] <SnoopJ> ice9, hmm, maybe TLSV1_* is referring to TLS 1.0, which is deprecated. At any rate, the server and the client can't agree on a protocol, and your OpenSSL version *should* be capable of speaking a not-deprecated version of TLS..
[19:41:17] <kieto> weird question: is there a way to specify a python minimum version in requirements.txt?
[19:41:41] *** Joins: vicfred (~vicfred@user/vicfred)
[19:41:49] <tims> kieto: yes use `MY_PACKAGE >=1.0`
[19:42:06] <kieto> tims: no, I mean the python binary itself
[19:42:26] <anddam> altendky: no, for reason outside my control I need to install a library from a path, it the path exists; if not try to clone it from a git URI; if cloning fails rely on a local repository configured via pip.conf
[19:42:28] <hexology> kieto: python_requires=">=3.8"
[19:42:33] <hexology> oh, in requirements.txt? no
[19:42:41] <hexology> in setuptools.setup(), yes
[19:42:47] <SnoopJ> (and pyproject.toml)
[19:43:08] <hexology> requirements.txt is kind of an ad-hoc convention anyway
[19:43:15] *** Quits: ctrypoph_ (~ctrypoph@2607:fb90:a908:91ae:b0f9:1fc6:e1c4:d9af) (Read error: Connection reset by peer)
[19:43:18] <hexology> hey, here's a great use case for conda!
[19:43:26] *** Quits: cheater (~Username@user/cheater) (Ping timeout: 268 seconds)
[19:43:28] <hexology> (if you aren't already using docker)
[19:43:35] *** Joins: cheater (~Username@user/cheater)
[19:43:44] <SnoopJ> hexology, well, they might be distributing this package to users who don't want workflow forced upon them
[19:43:50] *** Joins: wyclif (~wyclif@user/wyclif)
[19:43:50] *** Joins: ctrypoph (~ctrypoph@99-51-11-77.lightspeed.brhmmi.sbcglobal.net)
[19:44:15] *** Joins: ulu_ulu (~ulu@user/ulu)
[19:44:18] <hexology> i guess pyproject.toml/setup.py constitutes forcing a workflow on someone
[19:44:18] <altendky> anddam: uh-huh...  sounds like a job for not-setuptools really.
[19:44:31] <hexology> but either you use tools or you don't
[19:44:34] <hexology> like altendky said
[19:44:36] <SnoopJ> hexology, that's what PEP 517/PEP 518 are all about
[19:45:10] *** Quits: jpic (~jpic@82.142.17.14) (Ping timeout: 272 seconds)
[19:45:24] *** Joins: v01d4lph4 (~v01d4lph4@user/v01d4lph4)
[19:45:52] <altendky> anddam: have a proper sensible package.  have a script/program to setup the environment.  that script/program happens to install the package.
[19:46:28] <hexology> basically i don't see any reason to distribute a requirements.txt instead of a setup.py or pyproject.toml
[19:46:34] <hexology> in addition to, sure
[19:46:36] <altendky> anddam: but, you can put whatever code you want in setup.py.  it's just not super nice.  and you would have to make sure it gets used.  pyproject.toml or such might supersede custom code in setup.py?  i'm not sure
[19:46:40] *** Quits: ulu (~ulu@user/ulu) (Ping timeout: 250 seconds)
[19:47:03] <altendky> yeah, requirements.txt instead of an installable project is a shortcut.
[19:47:14] <hexology> beyond specifying build backend, i thought basically everything in pyproject.toml got passed off to the build backend
[19:47:20] <hexology> and/or to other tools in the "tool" sections
[19:47:38] <SnoopJ> requirements.txt is most useful when you want to share an _environment_. It's a pretty dreadful choice for a _package_
[19:47:43] *** Joins: kickingvegas (~cchoi@c-24-5-40-20.hsd1.ca.comcast.net)
[19:47:56] <SnoopJ> hexology, the build front-end gets information there, too
[19:48:02] <SnoopJ> and the standard fields are...standard
[19:48:04] <hexology> SnoopJ: but then you're either diy-ing your environment distribution, or you're using a tool like conda or docker
[19:48:16] <SnoopJ> hexology, I feel like we're addressing a hypothetical question that wasn't asked, here
[19:48:30] <anddam> I am (have been put) in a team with an existing workflow and I cannot enforce "cleanness"
[19:48:38] *** Quits: LemurP (~lemurp@109.74.190.250) (Ping timeout: 258 seconds)
[19:48:40] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 246 seconds)
[19:48:40] <anddam> what I can do is "fix this install script"
[19:48:54] *** Quits: RangerBobVA (~bmaddox@user/rangerbobva) (Quit: Leaving)
[19:48:57] <altendky> anddam: the simple answer is 'add your custom code before calling setup()' if you want to run custom code before running setup()
[19:49:00] <hexology> anddam: what is the existing workflow? are people trying to install the package w/ the wrong python version and asking what's wrong?
[19:49:19] <hexology> maybe you can check for python version in the script before `pip install -r requirements.txt`-ing
[19:49:22] *** Quits: JimMadge (~jim@host86-141-21-184.range86-141.btcentralplus.com) (Ping timeout: 246 seconds)
[19:49:37] <altendky> hexology: 11:12 <anddam> altendky: no, for reason outside my control I need to install a library from a path, it the path exists; if not try to clone it from a git URI; if cloning fails rely on a local repository configured via pip.conf
[19:49:38] *** Quits: sudorm (~sudorm@2a01cb0083a9c10044d5d153edc53b24.ipv6.abo.wanadoo.fr) (Quit: Leaving)
[19:49:48] <hexology> i missed that, thanks
[19:49:53] <ano> is there a way to store compiled regex in separate file instead re.compile() it on every invocation?
[19:50:08] <SnoopJ> hexology, the question about python version was another user I think...
[19:50:17] <hexology> oh that was, sorry
[19:50:21] <hexology> i was confused
[19:50:22] <hexology> back to my cave
[19:50:53] <SnoopJ> ano, you usually don't need to compile(), the library automatically caches compiled patterns to some depth when you call search() and other functions in the module.
[19:51:30] *** Joins: jpic (~jpic@pop.92-184-108-62.mobile.abo.orange.fr)
[19:51:50] *** Quits: byzandula (~byzandula@beerbq.net) (Quit: good)
[19:52:02] <ano> SnoopJ: but it still compiles it, right? why not put already compiled regex in sep file?
[19:52:06] <SnoopJ> the main reason you'd call compile() is if eval-time compilation is a bottle-neck for you or if you want to do your own caching (i.e. you don't want other people using `re` to flush your patterns)
[19:52:46] *** Joins: ntdll (~ntdll@user/ntdll)
[19:52:50] <hexology> ano SnoopJ i've done some benchmarks and found that pre-compiling regex can be a LOT faster if you need to repeatedly use the same regex in tight loops, apparently the cache lookup is not that fast and/or the cache gets flushed somewhat easily
[19:52:56] <altendky> anddam: i haven't thought of a way to fit that fallback into 'the system'.  so yeah...  just remember that logic won't make it's way into wheels (but will in sdist).
[19:53:04] <SnoopJ> ano, if it needs to be compiled (i.e. it's not in the cache), yes
[19:53:06] *** Quits: okamis (~okamis@90-229-141-188-no92.tbcn.telia.com) (Ping timeout: 240 seconds)
[19:53:11] <hexology> also i personally like having a "pattern object" to work with
[19:53:44] <SnoopJ> hexology, you can do `PAT = r"..."`, but it's not verboten to use compile(). It's just common to see people using it where they don't really need to, and it becomes clutter pretty easily
[19:54:31] <hexology> yeah i prefer `my_special_pattern = re.compile(r'...')`
[19:54:44] <hexology> idk why, i feel like i might as well make use of the OO interface
[19:55:31] <ano> is it possible to do something like a regex = re.compile(r'...') and serialize that regex object, with pickle maybe?
[19:55:50] *** Quits: GadgetNerd (~GadgetNer@user/gadgetnerd) (Quit: ZNC 1.7.5+deb4 - https://znc.in)
[19:56:10] <SnoopJ> ano, possible? yes. A good idea? I doubt it.
[19:56:11] <hexology> in that case i'd just use the string
[19:56:38] <SnoopJ> yea this kind of fiddling is only useful if you have timing/profile data in-hand that are screaming "compilation is a bottleneck"
[19:57:15] <SnoopJ> or the thing I mentioned about having a guarantee that you don't get forced out of the global cache (Sopel is a good example of this, it uses an internal cache)
[19:58:01] <ano> why not good idea to use precompiled regex instead useless recompile on every invocation?
[19:58:23] <hexology> nobody's saying it's _not_ a good idea. they are saying that it's not necessary in most cases.
[19:58:45] <hexology> i personally like having compiled pattern objects, so i will keep doing it
[19:59:31] *** Quits: lukka5 (~lukka5@246-60-231-201.fibertel.com.ar) (Ping timeout: 246 seconds)
[19:59:33] *** Quits: justinf210 (~justinf21@192-230-160-245.3rivers.net) (Read error: Connection reset by peer)
[20:00:23] *** Joins: justinf210 (~justinf21@192-230-160-245.3rivers.net)
[20:00:29] *** Joins: JimMadge (~jim@host86-141-21-184.range86-141.btcentralplus.com)
[20:00:41] *** Joins: GadgetNerd (~GadgetNer@user/gadgetnerd)
[20:00:55] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 246 seconds)
[20:02:10] *** Joins: wyclif (~wyclif@user/wyclif)
[20:02:21] *** Joins: kostkon_ (~kostkon@2a02:587:a100:18e:9fe3:794:a225:7cdb)
[20:02:31] *** Quits: kostkon (~kostkon@2a02:587:a100:18e:9fe3:794:a225:7cdb) (Remote host closed the connection)
[20:02:49] *** Joins: xcombelle (~xavie@176-139-252-198.abo.bbox.fr)
[20:03:16] *** Joins: qlixed (~qlixed@181.45.80.239)
[20:03:22] *** Joins: iomari891 (~iomari891@129.205.113.209)
[20:04:00] *** Quits: kostkon_ (~kostkon@2a02:587:a100:18e:9fe3:794:a225:7cdb) (Remote host closed the connection)
[20:04:18] *** Quits: justinf210 (~justinf21@192-230-160-245.3rivers.net) (Ping timeout: 240 seconds)
[20:04:19] *** Joins: kostkon_ (~kostkon@2a02:587:a100:18e:9fe3:794:a225:7cdb)
[20:04:42] *** Quits: JimMadge (~jim@host86-141-21-184.range86-141.btcentralplus.com) (Ping timeout: 240 seconds)
[20:05:37] *** Joins: torandu (~sean@90.222.17.57)
[20:05:51] *** Joins: pacblinky (~pacblinky@user/pacblinky)
[20:05:52] *** Joins: rama (~rama@c-24-130-92-222.hsd1.ca.comcast.net)
[20:06:04] <pacblinky> hello can someone help me with something related to tkinter?
[20:06:33] *** Joins: someguy1233 (~someguy@user/someguy123)
[20:06:51] <matsaman> pacblinky: once you explain the issue
[20:07:03] <SnoopJ> hexology, I think it's not a good idea far more often than it is
[20:07:09] <pacblinky> well lets say we a have a value = 0000000
[20:07:13] *** Quits: jpic (~jpic@pop.92-184-108-62.mobile.abo.orange.fr) (Ping timeout: 246 seconds)
[20:07:14] <SnoopJ> but only because it adds clutter
[20:07:30] <SnoopJ> there's no harm to program correctness or anything
[20:07:31] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 256 seconds)
[20:07:40] <pacblinky> and i created a button that when i click it it +1 index(1) of the value
[20:07:50] <pacblinky> my problem is how i can make that
[20:07:53] <pacblinky> function
[20:08:03] <The-Compiler> pacblinky: what does "it +1 index(1) of the value" mean?
[20:08:11] <matsaman> pacblinky: you want 0000000 to become 0000001?
[20:08:15] <pacblinky> yes
[20:08:18] <pacblinky> when i click the button
[20:08:25] <pacblinky> and lets say i add multipe buttons
[20:08:33] <pacblinky> i can combine them togther
[20:08:43] <pacblinky> every button related to a index
[20:08:45] <matsaman> pacblinky: what is the purpose of the leading zeros?
[20:08:50] <pacblinky> that increase it by +1
[20:08:54] <pacblinky> it is related to a game
[20:09:00] <pacblinky> cant really explain
[20:09:06] <matsaman> I would probably use value = 0
[20:09:19] <pacblinky> but lets say i have multipe buttons
[20:09:19] <matsaman> and if you need it to _display_ with leading zeros as 7 chars
[20:09:19] *** Quits: dvx (~dvx@185.63.97.64) (Quit: dvx)
[20:09:22] <matsaman> you can use zfill
[20:09:30] <pacblinky> aight
[20:09:35] <pacblinky> is it easy tho
[20:09:52] <pacblinky> i am just adding buttons that when they are clicked every button will increase a value index by 2
[20:09:56] <hexology> SnoopJ: i don't see it as clutter, i see it as communicating semantic intent. call it a stylistic difference then.
[20:09:57] *** Quits: someguy123 (~someguy@user/someguy123) (Ping timeout: 268 seconds)
[20:10:00] <matsaman> I haven't really used tkinter, but I think what you're describing is probably one of the easiest things you could do
[20:10:14] *** Quits: pagnol (~user@014198154145.ctinets.com) (Ping timeout: 265 seconds)
[20:10:18] <pacblinky> and i cant somehow
[20:10:19] *** Quits: kostkon_ (~kostkon@2a02:587:a100:18e:9fe3:794:a225:7cdb) (Read error: No route to host)
[20:10:25] *** Joins: kostkon (~kostkon@2a02:587:a100:18e:9fe3:794:a225:7cdb)
[20:10:25] <matsaman> pacblinky: https://stackoverflow.com/questions/26598010/how-do-i-create-a-button-in-python-tkinter-to-increase-integer-variable-by-1-and
[20:10:27] *** Quits: mrwick (~mrwick@user/mrwick) (Quit: leaving)
[20:10:34] <pacblinky> thx mate
[20:10:47] <SnoopJ> hexology, I think we agree about that, the reason I consider it clutter is that "I want to perform a search/match/whatever" is almost always the intent, where compile signals "I am compiling a regular expression"
[20:11:05] <hexology> oh, i wouldn't re.compile right before using search/match/etc
[20:11:11] <SnoopJ> that's exactly what I am referring to
[20:11:14] <hexology> yeah, ew
[20:11:22] *** Joins: pnoud (~pnoud@user/pnoud)
[20:11:28] <SnoopJ> a lot of people think you need to do this, and it's just noise because of the internal cache
[20:11:29] <hexology> i was talking about re-using a pattern as a module global, class attribute, etc.
[20:11:32] *** Joins: Seiryuu (~Seiryuu@ip174-103-176-143.adsl2.static.versatel.nl)
[20:11:44] <SnoopJ> hexology, well, the same point applies: the library itself caches the pattern
[20:12:46] <SnoopJ> if foo/bar.py does `re.search(PAT, s)` and PAT isn't in the cache, it gets compiled and put there. If foo/baz.py does the same call some time later, it doesn't need to compile if PAT is still in the cache.
[20:12:51] *** Quits: dmvrtx (~dmvrtx@znc.dmvrtx.me) (Quit: ZNC 1.7.5+deb4 - https://znc.in)
[20:13:24] *** Quits: nomic (~nomic@2a00:23c6:9910:1201:b1d1:7f91:d3d7:a8d8) (Quit: Leaving)
[20:14:46] <SnoopJ> so when you care, it's usually because you can't trust the internal cache (default _MAXCACHE is is 512 compiled patterns IIRC)
[20:16:50] *** Quits: pnoud (~pnoud@user/pnoud) (Ping timeout: 272 seconds)
[20:17:01] <SnoopJ> https://github.com/python/cpython/blob/main/Lib/re.py#L270-L273
[20:17:25] *** Joins: anddt (~anddt@net-93-144-12-118.cust.vodafonedsl.it)
[20:20:32] *** Joins: dmvrtx (dmvrtx@2a01:7e01::f03c:92ff:fefd:6ed6)
[20:20:43] *** Quits: Moosadee (~Moosadee@136.32.155.193) (Quit: Leaving)
[20:20:45] *** Joins: wyclif (~wyclif@user/wyclif)
[20:21:35] *** Joins: Moosadee (~Moosadee@136.32.155.193)
[20:22:34] *** Joins: justinf210 (~justinf21@192-230-160-245.3rivers.net)
[20:23:26] *** Joins: LiftLeft (~LiftLeft@154.21.114.30)
[20:23:26] *** Quits: pacblinky (~pacblinky@user/pacblinky) (Read error: Connection reset by peer)
[20:24:49] *** Quits: kostkon (~kostkon@2a02:587:a100:18e:9fe3:794:a225:7cdb) (Remote host closed the connection)
[20:24:51] *** Joins: kostkon_ (~kostkon@2a02:587:a100:18e:9fe3:794:a225:7cdb)
[20:25:42] *** Quits: varaindemian (~varaindem@86.124.78.162) (Quit: Client closed)
[20:25:59] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 268 seconds)
[20:26:57] *** Quits: maharg101 (~maharg101@savoy.force9.co.uk) (Quit: My Mac Mini has gone to sleep. ZZZzzz…)
[20:27:37] *** Joins: ripdog_ (~quassel@user/ripdog)
[20:28:50] *** Joins: pnoud (~pnoud@user/pnoud)
[20:29:11] *** Joins: Warped (~Warped@user/warped)
[20:29:31] *** Quits: ripdog (~quassel@user/ripdog) (Ping timeout: 272 seconds)
[20:29:34] *** Quits: boB_K7IQ (~boB_K7IQ@c-73-254-117-91.hsd1.wa.comcast.net) (Ping timeout: 265 seconds)
[20:29:50] *** Joins: lukka5 (~lukka5@246-60-231-201.fibertel.com.ar)
[20:30:21] *** Joins: maharg101 (~maharg101@savoy.force9.co.uk)
[20:30:25] *** Joins: FluffyMask (~FluffyMas@user/fluffymask)
[20:30:40] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[20:31:16] *** Quits: Pickchea (~private@user/pickchea) (Quit: Leaving)
[20:31:21] *** Quits: __that__ (~Guest63@195.59.68.214) (Quit: Client closed)
[20:31:26] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[20:33:30] *** Quits: pnoud (~pnoud@user/pnoud) (Ping timeout: 240 seconds)
[20:34:26] *** Joins: kostkon__ (~kostkon@2a02:587:a100:18e:9fe3:794:a225:7cdb)
[20:34:48] *** Joins: pagnol (~user@014198154145.ctinets.com)
[20:35:01] *** Quits: kostkon_ (~kostkon@2a02:587:a100:18e:9fe3:794:a225:7cdb) (Remote host closed the connection)
[20:35:12] *** Quits: lukka5 (~lukka5@246-60-231-201.fibertel.com.ar) (Ping timeout: 272 seconds)
[20:35:17] *** Quits: tims (~tims@220-244-125-107.static.tpgi.com.au) (Ping timeout: 256 seconds)
[20:35:47] *** Joins: candyman1 (~candyman@user/candyman)
[20:35:51] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[20:36:14] *** candyman1 is now known as candyman2
[20:38:00] *** Joins: Betal (~Beta@user/betal)
[20:38:22] *** Joins: kostkon (~kostkon@2a02:587:a100:18e:9fe3:794:a225:7cdb)
[20:38:58] *** Joins: wyclif (~wyclif@user/wyclif)
[20:39:15] *** Quits: kostkon__ (~kostkon@2a02:587:a100:18e:9fe3:794:a225:7cdb) (Ping timeout: 256 seconds)
[20:39:16] *** Quits: ctrypoph (~ctrypoph@99-51-11-77.lightspeed.brhmmi.sbcglobal.net) (Read error: Connection reset by peer)
[20:39:25] *** Joins: Auron (Auron956@user/auron)
[20:39:29] *** Quits: ApostleInTriumph (~ApostleIn@nat-clients.lix.polytechnique.fr) (Quit: Client closed)
[20:39:33] *** Joins: ctrypoph (~ctrypoph@99-51-11-77.lightspeed.brhmmi.sbcglobal.net)
[20:39:56] *** Quits: qunzhong_luxian (~qunzhong_@68.235.43.110) (Quit: Textual IRC Client: www.textualapp.com)
[20:40:25] *** Joins: pragmaticenigma (~pragmatic@user/pragmaticenigma)
[20:41:23] *** Joins: qunzhong_luxian (~qunzhong_@68.235.43.150)
[20:41:47] *** Joins: greedom (~greedom@2001:16b8:32d0:b400:22d1:c4b6:997b:9c6)
[20:41:49] *** Joins: semanticz0 (~semanticz@202.164.136.255)
[20:44:21] *** Quits: kostkon (~kostkon@2a02:587:a100:18e:9fe3:794:a225:7cdb) (Ping timeout: 256 seconds)
[20:44:29] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 268 seconds)
[20:44:55] *** Joins: okamis (~okamis@90-229-141-188-no92.tbcn.telia.com)
[20:45:18] *** Joins: kostkon (~kostkon@2a02:587:a100:18e:9fe3:794:a225:7cdb)
[20:46:01] *** Quits: pathos (~pathos@169-1-247-122.ip.afrihost.co.za) (Ping timeout: 268 seconds)
[20:46:28] *** Quits: jarthur (~jarthur@2603-8080-1540-002d-f4dd-c36e-b54e-ab9e.res6.spectrum.com) (Ping timeout: 250 seconds)
[20:47:24] <kieto> Does anyone know how to fix these warnings in pandas lib? https://bpa.st/JFTQ
[20:47:32] *** Quits: greedom (~greedom@2001:16b8:32d0:b400:22d1:c4b6:997b:9c6) (Remote host closed the connection)
[20:47:58] <SnoopJ> kieto, have you read the linked documentation?
[20:48:41] *** Joins: greedom (~greedom@2001:16b8:32d0:b400:22d1:c4b6:997b:9c6)
[20:48:45] *** Quits: fedenix (~fedenix@gateway/tor-sasl/fedenix) (Remote host closed the connection)
[20:48:57] <SnoopJ> pandas gives you a "view" of data when it can and keeping track of whether you have a view or copy can be very important (in particular, creating copies is slower and may harm performance)
[20:48:59] *** Joins: fedenix (~fedenix@gateway/tor-sasl/fedenix)
[20:49:05] *** Joins: jpic (~jpic@pop.92-184-108-113.mobile.abo.orange.fr)
[20:49:46] *** Quits: qlixed (~qlixed@181.45.80.239) (Ping timeout: 272 seconds)
[20:50:28] *** Joins: ElectricSheep (~esheep_zn@pool-100-19-29-200.phlapa.fios.verizon.net)
[20:50:39] <SnoopJ> You probably want `df.loc[:, "Total"] = df["Total"] + df["Tax"]` on Line 54
[20:50:50] *** Joins: kostkon_ (~kostkon@2a02:587:a100:18e:9fe3:794:a225:7cdb)
[20:51:16] *** Quits: jdmark (~jdmark@67.8.137.130) (Read error: Connection reset by peer)
[20:51:30] *** Joins: jdmark (~jdmark@67.8.137.130)
[20:51:39] <kieto> SnoopJ: that's what I was trying to find out, if I should put the .loc at the left or right side, thanks! I'll try that
[20:52:01] *** Quits: justinf210 (~justinf21@192-230-160-245.3rivers.net) (Ping timeout: 246 seconds)
[20:52:01] *** Joins: jarthur (~jarthur@2603-8080-1540-002d-c9ae-7931-d4d7-9809.res6.spectrum.com)
[20:52:03] *** Joins: timkofu (~timkofu@user/timkofu)
[20:52:11] *** Joins: ndim (hun@moooo.n-dimensional.de)
[20:52:20] *** Quits: iomari891 (~iomari891@129.205.113.209) (Read error: Connection reset by peer)
[20:52:41] *** Quits: kostkon_ (~kostkon@2a02:587:a100:18e:9fe3:794:a225:7cdb) (Remote host closed the connection)
[20:52:55] *** Joins: kostkon_ (~kostkon@2a02:587:a100:18e:9fe3:794:a225:7cdb)
[20:53:03] <SnoopJ> kieto, you should really read the doc the warning links to if you haven't already. This warning is telling you that you're changing a copy, where you almost always meant to change the original.
[20:53:16] <SnoopJ> (because that mutated copy is just thrown away in most cases)
[20:54:43] *** Joins: leehbi (~leehbi@host109-154-57-112.range109-154.btcentralplus.com)
[20:55:34] <kieto> hmmm it's hard to understand, it talks all the time about chained indexing, and I'm not doing that
[20:55:35] *** Quits: kostkon (~kostkon@2a02:587:a100:18e:9fe3:794:a225:7cdb) (Ping timeout: 268 seconds)
[20:55:40] *** Joins: pathos (~pathos@169-1-247-122.ip.afrihost.co.za)
[20:57:04] *** Joins: wyclif (~wyclif@user/wyclif)
[20:57:48] *** Joins: iomari891 (~iomari891@129.205.113.209)
[20:58:03] *** Quits: kostkon_ (~kostkon@2a02:587:a100:18e:9fe3:794:a225:7cdb) (Ping timeout: 268 seconds)
[20:58:50] *** Joins: neilthereildeil (~neilthere@204.115.183.4)
[20:59:02] <neilthereildeil> how can i print to stderr from python 2.7?
[20:59:11] *** Joins: justinf210 (~justinf21@54.sub-174-204-32.myvzw.com)
[20:59:21] *** Joins: kostkon (~kostkon@2a02:587:a100:18e:9fe3:794:a225:7cdb)
[20:59:29] *** Quits: re (~ray@user/re) (Quit: WeeChat 3.1)
[20:59:58] <nedbat> neilthereildeil: print >>sys.stderr, "Hello"
[21:00:03] *** Joins: Payam (~Payam@138.106.57.131)
[21:00:17] *** Joins: ray (~ray@user/re)
[21:00:23] <Payam> hi guys, I don't want to write a long sentance. but basically this is my question : https://bpa.st/ZF2A
[21:01:18] <Payam> sorry: this one : https://bpa.st/UCDA
[21:01:49] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 246 seconds)
[21:01:56] <hexology> SnoopJ: but in that case i'd hardly consider it "clutter"
[21:02:24] <SnoopJ> hexology, okay
[21:02:26] *** Joins: qlixed (~qlixed@host77.181-13-77.telecom.net.ar)
[21:03:51] <SnoopJ> kieto, I think the right way to say it is that the warning is "crying wolf" here because there isn't actually a copy, but assigning to an index like that can in general get you into trouble, and you should just use .loc when you're doing this
[21:03:55] *** Quits: timkofu (~timkofu@user/timkofu) (Remote host closed the connection)
[21:04:30] <SnoopJ> df.loc[...] is explicitly referring to "that place, inside this DataFrame" and df[...] is "I dunno pandas, *you* figure it out"
[21:05:25] <Payam> bjs gotta a minute?
[21:05:29] *** Quits: justinf210 (~justinf21@54.sub-174-204-32.myvzw.com) (Remote host closed the connection)
[21:05:32] <bjs> Payam: hi
[21:05:35] <b0rf> @SnoopJ ^ nice
[21:05:36] <kieto> SnoopJ: yes, it's weird because with your solution, it gives weirder warnings: https://bpa.st/W3NQ
[21:05:47] <Payam> bjs hi. Can you help me out?
[21:06:02] <Payam> bjs  this one : https://bpa.st/UCDA
[21:06:08] *** Joins: pnoud (~pnoud@user/pnoud)
[21:06:12] <bjs> Payam: I don't understand the question in the paste
[21:06:45] <b0rf> (me neither)
[21:06:48] <SnoopJ> kieto, that is exactly the same warning. It would help if I could see the accompanying code.
[21:06:59] <bjs> Payam: you say loop over, but I don't see a loop anywhere?
[21:07:06] <Payam> bjs I wrote the question in the paste. Kinda hard to explain without having the code. As you see I want to combine the name of friends and take the largest age
[21:07:20] *** Quits: kmh (~kmh@p200300df5f3e6100dd8abf4c678f29f0.dip0.t-ipconnect.de) (Ping timeout: 244 seconds)
[21:07:30] *** Quits: iomari891 (~iomari891@129.205.113.209) (Ping timeout: 272 seconds)
[21:07:36] <bjs> Payam: I think I see now,  have you written any code that tries to do it yet?
[21:07:37] <b0rf> nope
[21:07:54] <kieto> SnoopJ: the line throwing that warning is: `df.loc[:, "Total"] = df["Price"] + df["Tax"]`
[21:08:03] <Payam> yes. I wana loop, take the one that repeat itself and combine their values
[21:08:14] *** Quits: candyman2 (~candyman@user/candyman) (Quit: candyman2)
[21:08:16] *** Joins: onetwoseven (~onetwosev@webcrawler04.kroger.com)
[21:08:24] *** Quits: shad (~shad@user/shad) (Quit: WeeChat 2.3)
[21:08:25] *** Joins: kostkon_ (~kostkon@2a02:587:a100:18e:9fe3:794:a225:7cdb)
[21:08:35] <bjs> Payam: I think the best thing would be for you to just have a go, make some dictionaries or lists or whatever, write a loop and try do it and then we can try fix the code
[21:08:37] <Payam> bjs yes. this case is very simple , the real problem I have is objects without name. They are just elements in a big list
[21:08:39] <bjs> Payam: otherwise I'd just be doing it for you?
[21:08:46] *** Quits: kostkon (~kostkon@2a02:587:a100:18e:9fe3:794:a225:7cdb) (Remote host closed the connection)
[21:08:49] <bjs> Payam: well they do have a name (or rather, they have a .name attribute)
[21:08:56] <b0rf> argh
[21:08:58] <Payam> bjs, I don't need the code. I need a way of thinking
[21:09:09] <bjs> Payam: well I'd use a `for` loop and a dictionary
[21:09:16] <onetwoseven> ridiculously stupid question but the words make it hell to search on google. If I want to use a module inside a class (like pandas), but I don't know if the module has been imported with an alias, what should I do?
[21:09:18] *** Quits: lsrtl_ (~lsrtl@user/lsrtl) (Ping timeout: 256 seconds)
[21:09:18] <SnoopJ> kieto, hmm, what version of pandas is this?
[21:09:41] <b0rf> Payam document your code and ask real questions instead of providing half-cooked fish guts
[21:09:45] <Payam> bjs the list is very huge. is using dictionary and looping a good way?
[21:09:46] <SnoopJ> onetwoseven, just import it yourself
[21:09:51] <onetwoseven> even just "this is the search term that you can use in google" because I'm getting like 100% results of "this is the difference between a module and a class"
[21:09:53] <b0rf> next
[21:09:56] <onetwoseven> THANK YOU
[21:09:58] <onetwoseven> JESUS
[21:10:00] *** Quits: onetwoseven (~onetwosev@webcrawler04.kroger.com) (Client Quit)
[21:10:04] <kieto> SnoopJ: 1.2.4
[21:10:06] <Payam> b0rf who are you?
[21:10:17] <b0rf> somebody that writes better Python than you
[21:10:18] *** Quits: pagnol (~user@014198154145.ctinets.com) (Ping timeout: 240 seconds)
[21:10:25] <SnoopJ> Payam, we don't do that here
[21:10:29] <SnoopJ> err, b0rf ^
[21:10:31] *** Joins: onetwoseven (~onetwosev@webcrawler04.kroger.com)
[21:10:48] <Payam> SnoopJ never mind.
[21:10:58] *** Joins: lukka5 (~lukka5@246-60-231-201.fibertel.com.ar)
[21:11:18] *** Quits: pnoud (~pnoud@user/pnoud) (Ping timeout: 272 seconds)
[21:11:23] <kieto> SnoopJ: don't do anything, I think I found the error
[21:11:37] <bjs> b0rf: be nice :)
[21:11:38] *** Quits: rindolf (~rindolf@87.68.240.240.adsl.012.net.il) (Ping timeout: 268 seconds)
[21:11:43] <bjs> Payam: how big is huge
[21:11:51] <b0rf> What is he like underage or something
[21:11:52] *** Joins: magla (~gelignite@55d43d25.access.ecotel.net)
[21:11:57] <b0rf> If he's over 18, that's what I"d tell him
[21:11:58] <Payam> 500 elements, best case
[21:12:05] <bjs> Payam: that's smaller than tiny :)
[21:12:12] <SnoopJ> kieto, hmm, okay. I was having trouble reproducing the warning actually
[21:12:29] <bjs> b0rf: can we be nice to people :(
[21:12:41] <Payam> you think? well then I'll go with it
[21:13:10] *** Joins: wyclif (~wyclif@user/wyclif)
[21:13:17] <kieto> SnoopJ: I think the hidden mistake was that I was `df = df_old[cols_to_keep]` before that line, now I changed it to `df = df[cols_to_keep]` and the warnings are gone
[21:13:29] <SnoopJ> kieto, ah, so that creates a view
[21:13:59] <kieto> yes, the weird thing for me was that line wasn't throwing any warnings, but later when I created new columns for df
[21:15:21] <b0rf> I don't understand why you guys think I'm being "mean"
[21:15:33] <b0rf> Like what I described is vital to getting help on code
[21:15:54] *** Joins: UDK450 (~udk450@69-174-157-246.symrinaa.metronetinc.net)
[21:15:55] <b0rf> I"m not sure how you all expect to teach someone that can't figure out how to ask the questions they're asking
[21:16:17] <b0rf> Step 1.) Document code, Step 2.) Be specific
[21:16:21] <SnoopJ> If your style includes belittling others, we'd prefer you don't do it at all. Consult the PSF Code of Conduct for a lengthy discussion.
[21:16:25] <b0rf> Those are fundamentals for any programmer
[21:16:39] <b0rf> Who is "we"?
[21:16:39] *** Quits: Lando-SpacePimp (~LandoC@user/lando-spacepimp) (Ping timeout: 256 seconds)
[21:16:44] <SnoopJ> this community
[21:16:53] <b0rf> As in the people that are signed on, you guys?
[21:17:02] <nedbat> b0rf: you are right, those are important fundamentals. The question is: how do we encourage those fundamentals?
[21:17:13] <b0rf> By teaching them to begin with
[21:17:16] <b0rf> And not pandering
[21:17:25] <nedbat> b0rf: calling them "fish guts" is not teaching.
[21:17:28] <b0rf> Or avoiding and tiptoeing around important topics
[21:17:29] <bjs> I wasn't pandering,  infact I basically told Payam I was going to do it for them :)
[21:17:34] <bjs> wasn't*
[21:17:37] <b0rf> "Fish guts" is a great example of what he provided
[21:17:40] *** Joins: Lando-SpacePimp (~LandoC@user/lando-spacepimp)
[21:17:45] *** Quits: Julian (~tos9@python/site-packages/Julian) (Quit: leaving)
[21:17:46] <b0rf> Incomplete from a code and a question view
[21:17:54] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 240 seconds)
[21:17:57] <b0rf> Not only was the code he provided incomplete, but so were the questions
[21:18:00] <b0rf> "Fish guts"
[21:18:02] <nedbat> b0rf: we'd prefer if you took a more encouraging approach.
[21:18:14] <b0rf> Payam, what do you prefer?
[21:18:25] <SnoopJ> There are ways to deal with incomplete that do not involve insults, and it keeps the 'temperature' of the conversation lower
[21:18:28] <bjs> b0rf: if you mean Payam (you may as well use their nick) then the paste was a little confused  but it certainly was understandable
[21:18:36] <onetwoseven> more generally is there a way I can read up on the proper way to reference modules inside a class? like is it better form to do "import pandas as pd" inside the class definition, or somehow infer that pandas is loaded
[21:18:41] <SnoopJ> when in doubt, clarifying questions :)
[21:18:55] <Payam> I put him on ignore. I can't see what you guys talk about but it is something about me
[21:19:00] <bjs> I was a bit quick to jump to saying I didn't understand in this instance,  I have very low tolerence before I just say "I don't understand the question" because I know if that's my first reaction then they're unlikely to get responses from others.
[21:19:01] <nedbat> onetwoseven: you can't infer it is imported.  You should explicitly import it at the top of your .py file.
[21:19:04] <SnoopJ> Payam, it really isn't
[21:19:11] <onetwoseven> like someone might have import pandas as ARandomName but if I assumed it was pd in the module, I'd get a notfound error
[21:19:16] <Payam> okey awesome.
[21:19:18] <pragmaticenigma> onetwoseven: imports should always be done at the beginning of the source, not embedded
[21:19:29] <onetwoseven> RIGHT?
[21:19:37] <bjs> Payam: it doesn't matter,  I'd just use a loop and a dictionary.  There's a time and place to be worried about "big" lists and dictionaries
[21:19:38] <nedbat> onetwoseven: it doesn't matter how someone imported it. it has to be imported in your .py file.
[21:19:41] <onetwoseven> but if I want to use a module inside a class, what's the right way to do that?
[21:19:45] <bjs> Payam: but I don't usually worry until the OOM worries :)
[21:19:46] <SnoopJ> import it
[21:19:55] <nedbat> onetwoseven: to use it in a class, import it at the top of your .py file
[21:20:00] <SnoopJ> you pay for imports only once: once they're loaded, they're loaded, and the import system knows that
[21:20:14] <Payam> bjs awesome. I am trying something working then i will refactor it to something beautiful
[21:20:22] *** Quits: kostkon_ (~kostkon@2a02:587:a100:18e:9fe3:794:a225:7cdb) (Ping timeout: 246 seconds)
[21:20:33] <SnoopJ> `import expensive_module` <-- you pay for the implied execution only once unless you go out of your way to unload that module (quite rare)
[21:20:36] <pragmaticenigma> onetwoseven: Without an example of what you're trying to do, I'm not sure how to help
[21:21:01] <SnoopJ> pragmaticenigma, what does "embedded" mean in that context? Inside of a non-global scope?
[21:21:04] <pragmaticenigma> onetwoseven: Typically, you assume that there is no aliasing going on. If another dev has aliased something, it is on them to fix the error. You can't predict what someone else is going to do with your code
[21:21:09] <nedbat> b0rf: i guess you have your answer
[21:21:24] *** Joins: kostkon (~kostkon@2a02:587:a100:18e:9fe3:794:a225:7cdb)
[21:21:29] <nedbat> b0rf: i am in complete agreement with your goal, just not your approach.
[21:21:32] <b0rf> Pretty sure it was because of the way you all framed it
[21:21:39] <b0rf> Coming at me like I was "attacking" him or something
[21:22:04] <b0rf> I don't know. This is all beginner stuff anyway, like this needs to be on a different channel
[21:22:14] *** Joins: RangerBobVA (~bmaddox@user/rangerbobva)
[21:22:17] <nedbat> b0rf: there's only one channel.  it works.
[21:22:23] <b0rf> Apparently it doesn't
[21:22:26] *** Joins: pnoud (~pnoud@user/pnoud)
[21:22:37] <nedbat> b0rf: well, you seem unhappy about it, but in what other ways doesn't it?
[21:23:04] <b0rf> I mean I would prefer to learn under people who exemplified experience
[21:23:13] <b0rf> Like folks who actually work doing the stuff
[21:23:15] *** Joins: scaleww (~scaleww@77-41-20-31.ftth.glasoperator.nl)
[21:23:17] <nedbat> b0rf: we have lots of experience. what can we help you with?
[21:23:34] <b0rf> Work experience?
[21:23:39] <b0rf> Like actual work experience
[21:23:41] <onetwoseven> okay thank you guys. I think the problem is that I'm assuming I'm at step 4 when I'm at step 0. I'll read up more on classes.
[21:23:41] *** Joins: wyclif (~wyclif@user/wyclif)
[21:23:52] <nedbat> b0rf: I'm a developer with decades of experience, i have been working professionally for >35 years.
[21:23:59] <bjs> b0rf: there are people here who ask simple beginner questions,  but they often get answered by people with lots of experience yeah
[21:24:01] *** Joins: justinf210 (~justinf21@54.sub-174-204-32.myvzw.com)
[21:24:10] <nedbat> b0rf: i've been working full-time in Python for 15 years
[21:24:22] <nedbat> b0rf: is there something we can help you with?
[21:24:37] <SnoopJ> kieto, see if this resolves some of your confusion about this warning: https://bpa.st/7SIA
[21:24:39] <bjs> infact one of the nice things about this channel is sometimes you watch complete beginners get help with Python by a core dev who has been working on Python for decades
[21:24:50] *** Joins: rajkosto (~rajkosto@cable-178-149-127-189.dynamic.sbb.rs)
[21:24:51] <b0rf> It might just be the case that you all have more of a desire to work with beginners then
[21:25:00] <b0rf> I'm not really interested
[21:25:02] <nedbat> b0rf: we work with whoever shows up here.
[21:25:05] <pragmaticenigma> onetwoseven: what would be helpful is to provide an example of your idea and paste it somewhere so we can see what you're thinking.
[21:25:06] <SnoopJ> b0rf, "beginner stuff" is extremely topical for this channel
[21:25:11] <ammar2> you don't have to participate in all the discussions here
[21:25:13] <nedbat> b0rf: ok, you can wait for an advanced question if you like.
[21:25:14] <bjs> b0rf: questions here cover a broad range :)
[21:25:15] *** Joins: Adoi (~Adoi@user/adoi)
[21:25:16] <ammar2> there's often more advanced topics
[21:25:23] <Payam> nedbat what is your favorit IDE?
[21:25:24] <b0rf> And to me like
[21:25:27] <nedbat> b0rf: or, ask something advanced, and we can talk about it
[21:25:27] <SnoopJ> yea, if you reach frustration with helping, the best move is generally "step away"
[21:25:30] <nedbat> Payam: I use vim
[21:25:32] <b0rf> IF someone comes to a thread, and they deliver something that I feel is half cooked
[21:25:36] *** Joins: hnOsmium0001 (uid453710@id-453710.stonehaven.irccloud.com)
[21:25:38] <Payam> nedbat does it have a debugger?
[21:25:40] *** Joins: snc (~snc@130.44.185.38)
[21:25:41] <b0rf> Like to me that's a waste of my time
[21:25:44] <nedbat> Payam: no, i use pudb
[21:25:47] <b0rf> And doesn't really set up that respect gradient
[21:25:51] <SnoopJ> pudb +1, it's great :)
[21:25:54] *** Quits: jpic (~jpic@pop.92-184-108-113.mobile.abo.orange.fr) (Ping timeout: 240 seconds)
[21:25:57] <nedbat> b0rf: we all have to choose how to be in the community
[21:25:58] <b0rf> But that's just me
[21:26:00] *** Quits: kostkon (~kostkon@2a02:587:a100:18e:9fe3:794:a225:7cdb) (Read error: Connection reset by peer)
[21:26:03] <pragmaticenigma> b0rf: That's your opinion. If you don't like it and don't want to see it. You're welcome to leave for awhile and come back later
[21:26:07] <SnoopJ> b0rf, then it would be better to only participate on questions where you will be able to respect the asker.
[21:26:11] <Adoi> hello, I know the pasted code is not correct, but I couldnt find a way out to do it otherwise, whether counting, listing or dict...https://bpa.st/NXRA
[21:26:19] *** Joins: kostkon (~kostkon@2a02:587:a100:18e:9fe3:794:a225:7cdb)
[21:26:19] <b0rf> Just telling you guys my perspective on the matter
[21:26:24] <b0rf> I think it's valid in its own right
[21:26:29] <Adoi> the function should not be run more than five times
[21:26:29] <b0rf> YOu guys are welcome to disagree
[21:26:31] <b0rf> Anyway
[21:26:36] <kieto> SnoopJ: if instead of `df_copy = df[["ID", "age"]]` you do `df = df[["ID", "age"]]` you wouldn't get those warnings, would you?
[21:26:38] <Payam> nedbat you are happy with it? can you do Watch:s Stack ad so? I used cim for text editing but all those plugins for writing Python made me confused and tired
[21:26:40] <InPhase> b0rf: IRC comes with many topics.  It's best to be selective about which conversations you engage in so that your contributions remain positive.
[21:26:40] <bjs> Adoi: maybe you want a loop rather than to call itself again?
[21:26:45] <nedbat> b0rf: it's fine to want to be in advanced conversations.  it's not ok to insult beginners.
[21:26:47] <Adoi> bjs, I tried that, too
[21:26:54] <b0rf> See tha'ts what I"m talking about
[21:26:58] <SnoopJ> b0rf, sure. And we are letting you know what this channel's policies are.
[21:27:00] <nedbat> b0rf: what is
[21:27:01] <b0rf> You all are the problem
[21:27:04] <bjs> b0rf: what?
[21:27:09] *** Joins: jmcantrell (~weechat@user/jmcantrell)
[21:27:10] <b0rf> By framing what I"m doing as "insult", you create that perception
[21:27:11] <nedbat> b0rf: can we take this to a PM?
[21:27:14] <SnoopJ> +1
[21:27:15] <b0rf> Rather than being straight up about it
[21:27:24] <bjs> b0rf: what perception?
[21:27:27] <Adoi> the loop, too, resets the counter, so I dont know how to get out of it basically, whatever I use it begins with zero when new input is there
[21:27:31] *** Quits: Deneb (~johnch@58.111.189.80.dyn.plus.net) (Quit: Leaving)
[21:27:33] <b0rf> So it's your all's perception, about what I"m saying, that's the limiting factor
[21:27:35] <kieto> SnoopJ: and thanks for taking the time to answer in such an extensive way! :)
[21:27:35] <SnoopJ> kieto, you would
[21:27:36] <nedbat> b0rf: bjs said "I don't understand the question" that is straight up. "This is fish guts" is insulting.
[21:27:37] <b0rf> Or "how" I'm saying it
[21:27:39] *** Quits: pnoud (~pnoud@user/pnoud) (Ping timeout: 268 seconds)
[21:27:44] <b0rf> One of my greatest teachers was just like this
[21:27:51] <b0rf> His studio was internationally renowned
[21:27:53] <nedbat> b0rf: it works for some people.
[21:28:00] *** Joins: jpic (~jpic@82.142.17.14)
[21:28:01] <b0rf> He created greatness because he didn't bullshit others
[21:28:04] <b0rf> Or pander around
[21:28:08] <b0rf> He just said things like they were
[21:28:09] <SnoopJ> b0rf, you can do whatever you like elsewhere. In #python, there is an established set of behaviors.
[21:28:09] <ammar2> or take it to #python-offtopic, you're disrupting on-topic conversation at this point
[21:28:11] <Payam> I wouldn't call myself a beginner, kinda advanced user tbh
[21:28:15] <b0rf> Which is what I believe you should do if you are int he programming world
[21:28:16] <Payam> :D
[21:28:16] <nedbat> b0rf: can I give you a PM?
[21:28:25] <b0rf> Pandering is a waste of the students time, and yours.
[21:28:30] *** Quits: kostkon (~kostkon@2a02:587:a100:18e:9fe3:794:a225:7cdb) (Read error: Connection reset by peer)
[21:28:34] <nedbat> b0rf: no here has pandered. can we drop this?
[21:28:37] <b0rf> That si fair @ammar
[21:28:40] <b0rf> *That is fair
[21:28:42] <nedbat> b0rf: or move to -offtopic or a PM
[21:28:49] <b0rf> No one here has insulted, either.
[21:28:49] <SnoopJ> kieto, think about it this way: the object created by indexing a DataFrame is aware of where it came from, and it can warn you if you mutate it and it thinks it's might be a copy.
[21:28:51] <b0rf> Moving on.
[21:28:52] <bjs> b0rf: the very first thing people said to Payam (for e.g.) was that their question was hard to understand
[21:28:56] <hexology> kieto: the variable name is irrelevant with respect to making a copy vs a view. you have to use .copy() to make a shallow copy of a dataframe
[21:29:04] <bjs> and I did not give Payam the code or the solution, just a hint.
[21:29:05] <SnoopJ> b0rf, what you said about writing better code was definitely insulting
[21:29:10] <bjs> I don't know what more you'd want me to have done :)
[21:29:11] <Adoi> bjs, https://bpa.st/ADBA
[21:29:14] <b0rf> I thought you wanted to move on
[21:29:14] <kieto> hexology: oh, that's what I was missing, thanks!
[21:29:25] <b0rf> IT's not insulting, it's fact
[21:29:26] <SnoopJ> b0rf, I think it would be good if you discuss with nedbat in PM
[21:29:32] <b0rf> Information he's looking for
[21:29:39] <b0rf> "Is this person a developer"?
[21:29:40] <SnoopJ> This isn't going anywhere in-channel and it's crowding out more topical discussion
[21:29:42] <nedbat> b0rf: in what way should we drop this now?
[21:29:43] <b0rf> Anyway
[21:29:52] <b0rf> YOu all keep carrying this conversation on even after telling me I'm off topic
[21:29:55] <b0rf> It's not me
[21:29:59] *** Quits: Dyresen (bjorn@128.39.36.51) (Ping timeout: 265 seconds)
[21:30:01] <b0rf> I dropped it
[21:30:04] <hexology> kieto: it helps to think of variables in python as being "labels attached to data". if you assign something to a different variable, it doesn't change the underlying data. in this case, the "data" is a view of some dataframe. if you overwrite the variable, the original dataframe doesn't have a name attached to it anymore, but it still "exists". not sure if that's helpful or confusing...
[21:30:06] <b0rf> And I'm moving on
[21:30:07] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 268 seconds)
[21:30:21] <Payam> and that was all I wanted.  some people here helped me with writing examples. for instance there was a gentelman here that explain processes for me a long time ago. I wouldnt understand it on my own  tbh, bjs I will paste my code soon.
[21:30:21] <SnoopJ> hexology, this is behavior specific to pandas
[21:30:22] *** Joins: kostkon (~kostkon@2a02:587:a100:18e:9fe3:794:a225:7cdb)
[21:30:33] <Payam> with = by*
[21:30:49] *** Quits: pneff (~pneff@2a02:168:fedc:0:4961:9552:50a:6c11) (Ping timeout: 256 seconds)
[21:31:01] <SnoopJ> kieto, by contrast, when you use .loc, you are making it clear to pandas that you are definitely talking about *that* object, not any new one. But if the object itself might be a copy, pandas will still issue that warning.
[21:31:03] <hexology> SnoopJ: the name-is-irrelevant aspect isn't specific to pandas. but the "view" aspect is, yes
[21:31:13] <SnoopJ> hexology, right, the name itself is immaterial
[21:31:21] <bjs> Adoi: `return` will exit the function,  you need to decide what you want the function to actually do with n and m
[21:31:33] <kieto> hexology & SnoopJ: so let me get this straight... I should `df = df.loc[:, cols]` instead of `df = df[cols]` ?
[21:32:03] <SnoopJ> kieto, you should pretty much never swap a name like this, it makes bugs extremely easy tow rite
[21:32:05] <hexology> personally i use `df[cols]` all the time, and i use `df.loc[rows]` for selecting rows (with a boolean mask or index)
[21:32:05] <SnoopJ> to write*
[21:32:19] <hexology> `df[cols]` is identical to `df.loc[:, cols]`, i think
[21:32:23] <hexology> it's still a view
[21:32:24] <SnoopJ> it is not
[21:32:34] <Adoi> bjs, ah, is that why? I purposefully inserted "return" as I did not want to mix in the remaining part of the function (the real goal)
[21:32:47] <hexology> SnoopJ: is df.loc[:] the same as df.copy()? has it always been that way? if so, i never knew.
[21:32:49] <Adoi> to make it step by step
[21:32:51] <kieto> see, even you both disagree :P I think pandas is becoming complicated to handle
[21:33:06] *** Quits: bungle (~bungle@77-147-16-94.dyn.cable.fcom.ch) (Ping timeout: 240 seconds)
[21:33:16] <SnoopJ> hexology, exactly the opposite: .loc expresses "I don't want a copy" basically.
[21:33:35] <SnoopJ> in the context of an assignment
[21:33:39] *** Quits: semanticz0 (~semanticz@202.164.136.255) (Ping timeout: 256 seconds)
[21:33:48] <kieto> SnoopJ: which one makes bugs extremely easy to write ?
[21:33:50] <hexology> right, and `df[cols]` is the same as `df.loc[:, cols]`. the `df[foo]` syntax in general can mean several things, which is why i prefer `.loc` for slicing rows, because it's less overloading of []
[21:33:54] <SnoopJ> kieto, `name = name[...]`
[21:34:03] <SnoopJ> distinct names are good
[21:34:12] <hexology> the point is that "slicing" in pandas might or might not create a view, and if you explicitly don't want to create a view then you need to use .copy()
[21:34:14] <kieto> SnoopJ: oh cool, I thought you meant the `df = df.loc[:, cols]`, my brain was exploding again
[21:34:20] <nedbat> b0rf: i hope you stick around and find the channel helpful. let me know if I can help.
[21:34:21] <SnoopJ> and having to keep track of whether `name` means X or Y based on where you are in the program is one more thing to juggle
[21:34:38] <hexology> i do wish pandas "views" were a distinct type from a DataFrame
[21:34:39] <SnoopJ> hexology, right, so .loc doesn't slice at all: you use the descriptor to express your intent clearly
[21:34:57] *** Joins: Celeo (~Celeo@user/celeo)
[21:35:02] *** Quits: RangerBobVA (~bmaddox@user/rangerbobva) (Quit: brb)
[21:35:22] <hexology> it's not a "slice" in that it returns a view, not a new object
[21:35:32] <bjs> Adoi: yes a `return` statement makes the function exit. You probably want to save the result somewhere and return it later on?
[21:35:42] <hexology> it'd be nice if .loc returned `DataFrameView`, something that was obviously and clearly not the same as a `DataFrame`
[21:35:52] <SnoopJ> there would be a lot of things that would be nice if pandas was less crazy about them
[21:35:59] <hodapp> were*
[21:36:00] <hexology> but i believe the implicit view thing is borrowed from numpy
[21:36:00] <SnoopJ> I think at that point you'd be rewriting pandas.
[21:36:24] <SnoopJ> hexology, it's more complicated than numpy's basic/advanced indexing divide.
[21:36:27] <hodapp> Pandas is about the only library I've found that does... well... Pandas stuff.
[21:36:47] <hodapp> Julia's and R's dataframes are decent, though.
[21:36:50] <hexology> SnoopJ: doesn't numpy also have this maybe-it's-a-view semantics
[21:36:51] <Adoi> bjs, not necessarily, the problem directly continues by using the output further, so I can go on from there without saving them
[21:37:02] *** PretendSurgeon is now known as Roey
[21:37:09] <SnoopJ> hodapp, pytables and xarray are two alternatives worth at least a look. NumPy's "structured arrays" are also useful if you just want named/heterogeneous fields
[21:37:16] <hexology> also pandas' first-class "index" model i think is a missing feature from R, where row names are kind of weak and not very useful
[21:37:17] <bjs> Adoi: okay well maybe you should output n and m there instead of returning them
[21:37:18] <SnoopJ> hexology, not _this_, no
[21:37:30] <hodapp> hexology: doesn't it have a little bit of ambiguity around things like .reshape/.view though?
[21:37:35] <hexology> yes
[21:37:52] <hexology> i believe numpy is heavily copy-on-write oriented
[21:38:03] <SnoopJ> hexology, it has concepts of a view, but the rule is extremely simple: basic indexing always makes a view, advanced indexing always makes a copy.
[21:38:37] <hexology> oh, yeah. i was thinking of .reshape, .ravel, etce as in hodapp's example
[21:38:39] <hexology> ec*
[21:38:40] <hexology> etc*
[21:38:41] <SnoopJ> https://numpy.org/doc/stable/user/basics.indexing.html is well worth reading in its entirety multiple times (it took a few passes to absorb)
[21:38:53] <Adoi> bjs, I will show you the result :) I need to be away a short while
[21:39:08] <SnoopJ> hexology, shape manipulations can generally use a view on the `data`
[21:39:12] <hexology> agreed SnoopJ, i only recently feel like i'm starting to understand it. the next frontier is einsum...
[21:39:22] <SnoopJ> and ndarrays track this in the OWNDATA flag (see ndarray.flags)
[21:39:31] <hexology> ah, i was wondering how you could check
[21:39:38] *** Joins: MikZyth (~MikZyth@188.65.242.79)
[21:39:39] <SnoopJ> it's not exactly perfect
[21:39:45] <SnoopJ> ideally you don't check: you write it correctly to begin with
[21:39:58] <kieto> So doing `df["new"] = df["old1"] + df["old2"]` is still correct, then?
[21:40:05] *** Joins: kostkon_ (~kostkon@2a02:587:a100:18e:9fe3:794:a225:7cdb)
[21:40:12] *** Quits: kostkon (~kostkon@2a02:587:a100:18e:9fe3:794:a225:7cdb) (Read error: No route to host)
[21:40:14] <hexology> that's fine, it's just mutating the original df
[21:40:30] <SnoopJ> kieto, it depends on what "correct" means to you. If pandas thinks `df` might be a copy, it will issue this warning.
[21:40:41] <hexology> what we're talking about is, making sure you don't overwrite your `df` name with something that isn't actually the "original" dataframe
[21:40:49] <hexology> and yes the same goes for numpy
[21:40:57] <SnoopJ> Even in cases where it *isn't* a copy: pandas isn't omniscient, and it errs on the side of caution here.
[21:41:00] <kieto> cool, thanks again SnoopJ & hexology !
[21:41:07] <SnoopJ> (this is another reason not to re-use names that way, btw)
[21:41:25] <hexology> SnoopJ, i have always done stuff like this: `df = df[['a, 'b']].copy()`
[21:41:25] <SnoopJ> or hm, nevermind, using a brand new name would still trigger this behavior because of what I said earlier about the created object
[21:41:36] *** Quits: onetwoseven (~onetwosev@webcrawler04.kroger.com) (Quit: Client closed)
[21:41:37] <SnoopJ> hexology, that's perfectly fine when you want to pay for a copy, sure.
[21:41:51] *** Quits: xrogaan (~xrogaan@user/xrogaan) (Quit: Leaving)
[21:41:59] <hexology> yeah, i mostly do it in ETL scripts
[21:42:09] <hexology> the alternative would be setdiff'ing the column names and drop'ing the ones you don't want
[21:42:15] *** Joins: Blankspace (~abcd@user/blankspace)
[21:42:16] <SnoopJ> this warning is pandas trying to protect you from...pandas.
[21:42:34] *** Joins: kostkon__ (~kostkon@2a02:587:a100:18e:9fe3:794:a225:7cdb)
[21:43:16] *** Parts: b0rf (~shaun@121-44-16-32.tpgi.com.au) (Leaving)
[21:43:18] <hodapp> SnoopJ: huh, I'll check those out too.
[21:43:34] *** Joins: mojvei (~mojvei@user/mojvei)
[21:43:39] *** Quits: kostkon_ (~kostkon@2a02:587:a100:18e:9fe3:794:a225:7cdb) (Remote host closed the connection)
[21:43:40] *** Quits: Adoi (~Adoi@user/adoi) (Ping timeout: 250 seconds)
[21:43:53] <hodapp> I learned Pandas in a grad class that was actually using it for its original designed purpose (time-series stock data) but didn't bother to look for other comparable libraries
[21:43:58] *** Joins: wyclif (~wyclif@user/wyclif)
[21:44:10] <hexology> afaik, pandas was meant as a general purpose R dataframe equivalent
[21:44:15] <hexology> that's how i've always used it anyway...
[21:44:20] <SnoopJ> yes, it is explicitly riffing R's class of the same name
[21:44:28] <SnoopJ> it's just making a complete hash of it :(
[21:44:30] <hodapp> it came from a hedge fund though, IIRC
[21:44:38] <hexology> nah, like i said the "index" data model is way better
[21:44:49] <hexology> early pandas had a lot of rough edges, like 2015-ish
[21:44:54] <hodapp> ...also the only grad class that was very open about teaching us mathematics and models that didn't actually work in reality. but that's another matter.
[21:44:55] <SnoopJ> modern pandas does too
[21:45:05] <SnoopJ> 1.x has fixed a lot of problems, but the problems are deep
[21:45:11] <hexology> it's more verbose than the R equivalent, but nowadays i think pandas is a bit more powerful, again because of the index data model
[21:45:17] <SnoopJ> the joys of explosive early growth :/
[21:45:30] <hodapp> I've used R plenty but R is....... pretty gross as soon as you want to write real software in it
[21:45:38] <hodapp> even with the hadleyverse at your disposal
[21:45:42] <hexology> what are some of the "serious" core issues? other than the implementation being so wildly complicated that they're afraid to add an `na_action` kwarg to `.apply`?
[21:45:48] *** Parts: HansGeering (~HansGeeri@host86-172-28-182.range86-172.btcentralplus.com) (The Lounge - https://thelounge.chat)
[21:45:51] <hexology> hodapp: easy, don't write "real" software in R :P
[21:46:00] <hexology> not even once
[21:46:17] <SnoopJ> hexology, DataFrame being several ndarrays in a trenchcoat is not exactly what I think of as great, but in general the library has 'kitchen sink syndrome'
[21:46:39] <SnoopJ> pandas lives at the antipodal point of "There should be one-- and preferably only one --obvious way to do it"
[21:46:39] <hexology> SnoopJ: R data.frame is literally a list of vectors in a trenchcoat
[21:46:47] *** Quits: mojvei (~mojvei@user/mojvei) (Client Quit)
[21:46:50] <SnoopJ> hexology, okay? We're talking about pandas.
[21:46:58] *** Quits: CrypticSquared (~CrypticS_@user/crypticsquared) (Ping timeout: 246 seconds)
[21:47:06] <hexology> but if R is the standard then i think it's fair to compare to the standard
[21:47:15] <hexology> it's an easy data model to understand imo and it makes a lot of sense
[21:47:19] <pragmaticenigma> yeah... let's move back to Python ... this R discussion is confusing
[21:47:33] <SnoopJ> hexology, compare to whatever you like, I'm answering your question, not trying to convince you to see it my way
[21:47:41] <hexology> fair enough
[21:47:51] <SnoopJ> and my perspective is that pandas is a mess and I'd rather just use structured arrays or HDF5
[21:47:53] *** Joins: CrypticSquared (~CrypticS_@user/crypticsquared)
[21:47:53] <hexology> i definitely don't like having both .map and .apply
[21:47:55] <SnoopJ> (or sqlite, or...)
[21:48:04] <SnoopJ> yea, .map() and .apply() are pathological rot
[21:48:23] <SnoopJ> they're useful and all but pandas really really drives people towards them, robbing them of pretty much all of the benefits ndarray offers
[21:48:23] <hexology> they don't need to coexist. alterantively, .map should stop accepting callables and specialize on accepting "mappings"
[21:48:28] *** Joins: __bluebell__ (~le@194.110.115.45)
[21:49:17] *** Quits: leehbi (~leehbi@host109-154-57-112.range109-154.btcentralplus.com) (Remote host closed the connection)
[21:49:18] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 272 seconds)
[21:49:40] <hodapp> mleh, I work in ML and people love Pandas because ????
[21:49:44] <hexology> the multiindex-related apis also need a lot of work. very cumbersome to work with, which is unfortunate because they're very useful
[21:49:44] <SnoopJ> to pandas's credit, 1.0 added pd.NA
[21:49:45] <hodapp> almost as much as they love YAML and JSON
[21:50:11] <neilthereildeil> in pythin 2.7, the multiprocessing library has apply_async. how can i  determine whether all the worker processes in my pool are busy or whether any are free so i can submit a job to the pool?
[21:50:26] <hexology> i work/worked in ML and i love pandas because it does everything i need it to do ¯\_(ツ)_/¯
[21:50:29] <SnoopJ> hodapp, pandas.DataFrame knows a lot of tricks and those people probably want those tricks
[21:50:37] <hexology> if something better comes along, i will use that instead
[21:50:39] *** Quits: Gerula (~Gerula@user/gerula) (Ping timeout: 256 seconds)
[21:50:50] <pragmaticenigma> neilthereildeil: Python 2.7 ended support
[21:50:54] <SnoopJ> IME many would do just fine if they knew about structured arrays because they're just using DataFrame to represent heterogeneous data anyway
[21:50:54] <neilthereildeil> i know
[21:50:55] *** Quits: daniel2 (daniel@user/daniel2) (Quit: http://quassel-irc.org - Chat comfortably. Anywhere.)
[21:51:08] <neilthereildeil> but its still used in legacy applications all over the place
[21:51:11] <SnoopJ> but it does have nice stuff in it, like MultiIndex and so on
[21:51:43] <SnoopJ> and I really really hope pd.NA lights a fire under NumPy to solve that problem
[21:53:06] <neilthereildeil> i need to know whether any child processes are ready for another job
[21:53:39] *** Joins: jphaynes66 (~TerraFirm@75-166-102-68.hlrn.qwest.net)
[21:54:12] <pragmaticenigma> neilthereildeil: My general approach is to have the child ask the parent for work
[21:54:40] *** Quits: cheater (~Username@user/cheater) (Ping timeout: 246 seconds)
[21:55:24] *** Joins: cheater (~Username@user/cheater)
[21:56:53] *** Joins: daniel2 (daniel@user/daniel2)
[21:58:11] *** Quits: YuGiOhJCJ (~YuGiOhJCJ@gateway/tor-sasl/yugiohjcj) (Quit: YuGiOhJCJ)
[21:59:06] <xheimlich> SnoopJ: what problem?
[22:00:03] <SnoopJ> xheimlich, the problem of representing missing data in a way that isn't confusible with in-band data (i.e. using NaN or inf isn't perfect because those are valid floats)
[22:00:06] *** Quits: kostkon__ (~kostkon@2a02:587:a100:18e:9fe3:794:a225:7cdb) (Remote host closed the connection)
[22:00:12] *** Joins: wyclif (~wyclif@user/wyclif)
[22:00:19] *** Joins: kostkon__ (~kostkon@2a02:587:a100:18e:9fe3:794:a225:7cdb)
[22:00:50] <jinsun> why does None not work for that?
[22:01:33] <SnoopJ> jinsun, because to store None in an ndarray, the array must have dtype 'object' which sacrifices most of the speed-up numpy offers
[22:01:43] *** Joins: syrius (syrius@titan.stormtek.net)
[22:02:06] *** Quits: kostkon__ (~kostkon@2a02:587:a100:18e:9fe3:794:a225:7cdb) (Remote host closed the connection)
[22:02:19] *** Joins: kostkon__ (~kostkon@2a02:587:a100:18e:9fe3:794:a225:7cdb)
[22:02:39] <jinsun> oh and pd.NA transforms its own type based on the data?
[22:03:16] *** Joins: alguien (~alguien@user/alguien)
[22:03:43] <SnoopJ> well, that's kind of the rub: pandas has to keep track of NA for itself and can currently only do it for some dtypes
[22:04:27] <SnoopJ> but this problem relevant to enough users of ndarray that solving it in NumPy (for those dtypes) would be a useful thing to do.
[22:04:59] <jinsun> ok so the array doesn't have pd.NA inside it, it is just array of float, pandas remembers where to insert it when doing operations, something like that
[22:05:06] *** Parts: snc (~snc@130.44.185.38) ()
[22:05:08] <SnoopJ> close enough, yea
[22:05:19] <SnoopJ> I don't really know the implementation in pandas, and it's experimental besides
[22:05:23] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 256 seconds)
[22:05:39] *** Joins: pneff (~pneff@46-127-136-42.dynamic.hispeed.ch)
[22:06:13] <catern> would anyone take a look at an article I'm writing about a new distributed systems library? I'm just looking for some first reactions to know that it makes sense. In PM, since it's still a draft
[22:09:32] <SnoopJ> jinsun, if you're curious about the texture of the problem in NumPy, NEP 26 is where you can jump in: https://numpy.org/neps/nep-0026-missing-data-summary.html (note how old that is, this has been an issue for a while)
[22:09:53] *** Quits: gusto (~Augustus@109.255.100.54) (Quit: Textual IRC Client: www.textualapp.com)
[22:09:54] *** Quits: pneff (~pneff@46-127-136-42.dynamic.hispeed.ch) (Ping timeout: 240 seconds)
[22:10:05] *** Quits: pragmaticenigma (~pragmatic@user/pragmaticenigma) (Quit: Leaving)
[22:11:17] *** Quits: cliluw (~cliluw@47.147.80.149) (Read error: Connection reset by peer)
[22:11:20] *** Quits: jphaynes66 (~TerraFirm@75-166-102-68.hlrn.qwest.net) (Quit: Bye y'all.)
[22:12:14] *** Quits: kostkon__ (~kostkon@2a02:587:a100:18e:9fe3:794:a225:7cdb) (Remote host closed the connection)
[22:12:22] *** Joins: kostkon_ (~kostkon@2a02:587:a100:18e:9fe3:794:a225:7cdb)
[22:13:23] *** Joins: jhulten (~jhulten@c-67-185-71-124.hsd1.wa.comcast.net)
[22:14:31] *** Quits: Celeo (~Celeo@user/celeo) (Quit: Leaving)
[22:15:23] *** Joins: Gerula (~Gerula@user/gerula)
[22:15:52] *** Joins: Sasazuka (~Sasazuka@user/sasazuka)
[22:18:00] *** Quits: kostkon_ (~kostkon@2a02:587:a100:18e:9fe3:794:a225:7cdb) (Remote host closed the connection)
[22:18:20] *** Joins: kostkon_ (~kostkon@2a02:587:a100:18e:9fe3:794:a225:7cdb)
[22:18:37] *** Joins: wyclif (~wyclif@user/wyclif)
[22:18:51] *** Quits: drincruz_ (~drincruz@ec2-18-235-23-153.compute-1.amazonaws.com) (Read error: Connection reset by peer)
[22:19:42] *** Joins: shibboleth (~shibbolet@gateway/tor-sasl/shibboleth)
[22:20:13] *** Joins: drincruz_ (~drincruz@ool-44c748be.dyn.optonline.net)
[22:20:15] *** Quits: kostkon_ (~kostkon@2a02:587:a100:18e:9fe3:794:a225:7cdb) (Remote host closed the connection)
[22:20:21] *** Joins: kostkon__ (~kostkon@2a02:587:a100:18e:9fe3:794:a225:7cdb)
[22:21:33] <Samian> is there anyway to save program state when debugging python code in vscode? I have this program where it take 15 minutes to reach the part of the code I have breakpoints in. :-(
[22:22:02] <Samian> I want to be able to save the state  and load the program to be at the state I want it at
[22:22:30] *** Quits: kostkon__ (~kostkon@2a02:587:a100:18e:9fe3:794:a225:7cdb) (Remote host closed the connection)
[22:22:38] *** Joins: alikins (sid494119@id-494119.tinside.irccloud.com)
[22:22:49] *** Joins: kostkon__ (~kostkon@2a02:587:a100:18e:9fe3:794:a225:7cdb)
[22:23:22] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 246 seconds)
[22:24:12] *** Quits: justinf210 (~justinf21@54.sub-174-204-32.myvzw.com) (Read error: Connection reset by peer)
[22:24:15] <jinsun> SnoopJ: cool, thanks I'll have a look
[22:24:36] *** Joins: cheater1__ (~Username@user/cheater)
[22:24:40] *** Quits: Sasazuka (~Sasazuka@user/sasazuka) (Quit: I quit)
[22:24:46] *** Quits: cheater (~Username@user/cheater) (Ping timeout: 272 seconds)
[22:24:53] *** cheater1__ is now known as cheater
[22:25:46] <Jin^eLD> habnabit_: cffi insists of having a .lib inside your module? you can't just write a module that appears "normal", i.e. "import mymodule  mymodule.dostuff()", you always have to "from mymodule import ffi, lib" or am I missing something?
[22:26:15] *** Joins: Gudddu (~Guddu@117.222.83.107)
[22:27:19] <SnoopJ> Samian, I would probably save the data that the 15 minutes are necessary for (i.e. np.save() the relevant arrays if it's NumPy) and then patch that step away and just load the reproduction data from disk. There are more complex ways to 'checkpoint' a program, but when debugging, machete-mode takes you directly to the fix.
[22:27:20] *** Quits: neilthereildeil (~neilthere@204.115.183.4) (Quit: Client closed)
[22:28:08] <Samian> that's not scalable. That's a one-off each time. It's not a numpy array :/
[22:28:27] <SnoopJ> Samian, your question didn't mention anything about scale, would you like to ask it again with all of the necessary information?
[22:29:11] *** Quits: Guddu (~Guddu@117.222.83.107) (Ping timeout: 256 seconds)
[22:30:01] *** Joins: Deesl (~bsdboy@redhat/psirt/Deesl)
[22:31:32] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[22:31:43] *** Joins: justinf210 (~justinf21@54.sub-174-204-32.myvzw.com)
[22:32:42] *** Quits: v01d4lph4 (~v01d4lph4@user/v01d4lph4) (Remote host closed the connection)
[22:33:45] <xheimlich> bah, I can't page-up with irssi on tmux. Does the channel keep logs?
[22:34:02] <grym> xheimlich: no
[22:34:06] *** Joins: Pickchea (~private@user/pickchea)
[22:34:13] *** Quits: justinf210 (~justinf21@54.sub-174-204-32.myvzw.com) (Remote host closed the connection)
[22:34:20] <SnoopJ> 13:30 <SnoopJ> xheimlich, the problem of representing missing data in a way that isn't confusible with in-band data (i.e. using NaN or inf isn't perfect because those are valid floats)
[22:34:26] <grym> xheimlich: also, i can absolutely scroll up with irssi+tmux, so check your configs, it's fixable
[22:34:26] *** Joins: baldr333 (~baldr333@modemcable034.69-70-69.static.videotron.ca)
[22:34:27] *** Joins: justinf210 (~justinf21@54.sub-174-204-32.myvzw.com)
[22:34:35] *** Joins: Sasazuka (~Sasazuka@user/sasazuka)
[22:36:16] *** Joins: nomic (~nomic@2a00:23c6:9910:1201:b1d1:7f91:d3d7:a8d8)
[22:36:22] <ali1234> "is there any way to save program state?" is a question which does not require any additional information
[22:36:36] <SnoopJ> ali1234, the answer to that question is "yes"
[22:36:52] <ali1234> i doubt that is true
[22:36:52] <xheimlich> oh. /scrollback goto -20 works.
[22:36:54] *** Joins: zmt01 (~zmt00@user/zmt00)
[22:37:02] *** Joins: djapo (~archangel@user/djapo)
[22:37:10] *** Joins: wyclif (~wyclif@user/wyclif)
[22:37:14] <SnoopJ> ali1234, you're welcome to your doubt
[22:37:20] <grym> xheimlich: i just press page up, myself
[22:37:39] <ali1234> i suspect the answer is in fact "no" unless you change the source code of the program in question to save it's own state
[22:37:41] <xheimlich> anyway, thanks for the repeat :)
[22:38:09] <ali1234> then you are not saving the state of the program, you are saving the state of some other program
[22:38:22] *** Joins: Adoi (~Adoi@user/adoi)
[22:38:29] <xheimlich> ali1234: for values of "save", there is always interrupting from the OS. i.e. Ctrl-Z on Linux.
[22:38:30] <SnoopJ> ali1234, there are certainly ways to restore program state that involve no source changes, they're just far more inconvenient. But here we are speculating about the question, and this is generally a waste of time.
[22:38:41] <grym> "refactor to have a program whose state is easier to snapshot" is a valid moce
[22:38:43] <grym> move*
[22:38:47] <xheimlich> I have like a long GAN computation I've been doing for weeks now but only on weekends.
[22:38:53] <SnoopJ> it's a valid one, and a complicated one
[22:38:56] <ali1234> you are speculating about the question. the meaning of it seems perfectly clear to me
[22:39:10] <SnoopJ> ali1234, would you care to answer it, then?
[22:39:12] *** Quits: Spawns_Carpeting (~pi@user/spawns-carpeting/x-6969421) (Read error: Connection reset by peer)
[22:39:30] <ali1234> this person wants to snapshot the *intepreter* state, so that they can re-load it and continue running from that point
[22:39:32] *** Joins: Spawns_Carpeting (~pi@user/spawns-carpeting/x-6969421)
[22:39:42] <ali1234> and as far as i am aware, this is not possible
[22:39:51] <hexology> sbcl and ccl can do that :P
[22:39:53] <SnoopJ> It's certainly possible, but it is nowhere near convenient
[22:39:56] <BrokenCog> so, I was trying to use split() to seperate a string of pattern: "hash filename" into two components but if filename contains a space, split() doesn't work.  is there a standard  syntax using sequences or something else to do this?  I can use str[0:n] and str[n+1:] because the format is fixed, but I'm wondering about a more general aproach??
[22:39:58] <xheimlich> the OS can literally do that. The OS.
[22:40:00] *** Quits: zmt00 (~zmt00@user/zmt00) (Ping timeout: 250 seconds)
[22:40:26] <grym> BrokenCog: partition
[22:40:32] <grym> BrokenCog: er, rpartition
[22:40:51] <xheimlich> it can suspend a program and it can dump volatile memory to disk when hibernating or something. So there's a known procedure that stores program state to disk.
[22:40:53] <SnoopJ> xheimlich, most OSes I've used don't provide a way to 'rewind' execution, which is the reading of the question they are taking
[22:40:53] <hexology> can't you use maxsplit=1 ?
[22:40:58] <hexology> BrokenCog grym ^
[22:41:10] <ali1234> xheimlich: how can the OS do it? ctrl-z just suspends. how can you save state/re-load back to a previous state?
[22:41:14] *** Quits: enrh (~enrh@user/enrh) (Ping timeout: 272 seconds)
[22:41:20] <BrokenCog> grym: thanks, I'll look at it!
[22:41:46] <deniska> if you run the whole thing in a virtual machine…
[22:41:49] <ali1234> we're talking video game emulator style save states here, where they store the entire CPU and memory state of the emulated system
[22:41:51] <SnoopJ> anyway, a checkpoint system would be the more "scalable" solution
[22:41:55] *** Joins: pneff (~pneff@46-127-136-42.dynamic.hispeed.ch)
[22:41:55] <altendky> SnoopJ: ali1234: i forget what, but a tool was recently pointed out to me for linux to do this.  i didn't get around to digging into it.
[22:41:57] <deniska> but anyway, python doesn't provide "smalltalk mode"
[22:42:00] <grym> BrokenCog: https://bpa.st/GKNA
[22:42:07] <BrokenCog> hexology: I'll look into it as well.
[22:42:13] <hexology> BrokenCog: "asdfzxcv some other stuff".split(maxsplit=1) -> ["asdfzxcv", "some other stuff"]
[22:42:16] <grym> hexology: ^ my way gives you a 3-tuple every single time
[22:42:16] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 268 seconds)
[22:42:27] <BrokenCog> ah. okay.
[22:42:29] *** Joins: SyntheticClamor (~Synthetic@2a01cb04008a92007da59076e1b0ce8b.ipv6.abo.wanadoo.fr)
[22:42:34] *** Quits: CombatVet (~c4@user/combatvet) (Ping timeout: 244 seconds)
[22:42:38] <SnoopJ> altendky, I'd hazard a guess that you could do a core dump and restore from that, but it's certainly more complicated when the task is 'fix a bug'
[22:42:39] <hexology> i do always forget about partition so thanks for the reminder
[22:42:51] *** Quits: justinf210 (~justinf21@54.sub-174-204-32.myvzw.com) (Remote host closed the connection)
[22:43:19] <altendky> SnoopJ: yeah, it was more like 'i want to reboot and continue the process from where it was'.  none the less
[22:43:24] * SnoopJ nod
[22:43:38] <hexology> it'd be interesting if python supported lisp/smalltalk-like "dump the entire system state" and "arbitrary recompile individual functions/classes without restarting the whole thing"
[22:43:53] <SnoopJ> hexology, it's not like falling off a log
[22:44:00] <BrokenCog> I guess partition would work well using the "  " seperaring each part and ignoring the middle tuple, but maxsplit seems the more right.
[22:44:00] <hexology> wdym by that
[22:44:01] <deniska> hexology: you can sorta do the latter, if you don't mind some dragons
[22:44:03] *** Quits: Sasazuka (~Sasazuka@user/sasazuka) (Quit: I quit)
[22:44:11] <hexology> without dragons :P
[22:44:11] <SnoopJ> hexology, I mean that it's a Very Hard problem
[22:44:41] <deniska> hexology: removing dragons would require changing the data model
[22:45:56] *** Joins: enrh (~enrh@user/enrh)
[22:46:18] *** Quits: pneff (~pneff@46-127-136-42.dynamic.hispeed.ch) (Ping timeout: 240 seconds)
[22:46:22] *** Quits: jinsun_ (~jinsun_@user/jinsun) (Read error: Connection reset by peer)
[22:46:56] *** Joins: CombatVet (~c4@user/combatvet)
[22:46:59] <ali1234> isn't this kind of what jupyter notebooks do? when you change a line, it doesn't run the previous ones again?
[22:47:08] *** Joins: pneff (~pneff@46-127-136-42.dynamic.hispeed.ch)
[22:47:24] <ali1234> obviously it isn't storing the whole interpreter state, just the globals or whatever
[22:47:27] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[22:47:38] <hexology> yeah i'm not saying it _should_ support it. i'm saying that it's kind of a "lost feature" that could be interesting in a modern application
[22:47:50] <altendky> is it "storing" anything?  i thought it was just taking the cell of text and running it
[22:48:03] <SnoopJ> ali1234, notebooks are an interface to a running kernel. IPython provides no way to serialize a running kernel to my knowledge.
[22:48:05] <ali1234> well you can reference the result of previous operations
[22:48:06] <hexology> ali1234: a jupyter notebook isn't any different from the python console in terms of the application state
[22:48:14] <ali1234> hmm okay
[22:48:15] <UDK450> having trouble figuring out how to deal with multiple modules, referencing modules from higher up, etc, all using absolute pathing. I've got a project named vlan_automation. Inside this folder, I've got a tests and docs folders, as well as what I thought is supposed to be my package name, vlan_automation. Inside that folder I've got the actual source of my code, as well as a __main__.py. One last folder inside that, named helpers.
[22:48:15] <UDK450> How should I call modules from within the helpers folder by another module within that same folder? from vlan_automation.helpers import module_name doesn't work.
[22:48:31] <SnoopJ> and it certainly doesn't have state rewinding
[22:48:34] <UDK450> It states that no module is named 'vlan_automation'
[22:48:39] <SnoopJ> which is I think the crux of the reading you've taken
[22:48:43] <ali1234> yeah
[22:48:54] <hexology> UDK450: show us your file structure, ideally using the output of a program like `tree` or similar
[22:48:57] <hexology> or a screenshot i guess
[22:49:16] <Nei> hi, are there some current best practices to my git source code and "installing the source in development mode"? I wanted to have a clean package so I tried to go with setup.cfg+pyproject.toml only, but then I get "A "pyproject.toml" file was found, but editable mode currently requires a setup.py based build." from pip -e .
[22:49:31] <Nei> should I just add a setup.py file? or do I have to switch to poetry?
[22:50:04] <hexology> Nei, this is the #1 thing keeping me on setup.py
[22:50:07] <SnoopJ> Nei, poetry is probably less fuss overall, I think the way you can have your cake and eat it too here is basically having a duplicated config
[22:50:16] <UDK450> Unfortunately, hexology, I don't have permissions to install tree on the server.
[22:50:17] <SnoopJ> (even considering how fussy poetry itself is)
[22:50:44] <UDK450> best i can do is a screenshot from VSCode
[22:50:45] <hexology> UDK450: screenshot then i guess. or even just write it out on https://bpaste.net - i'm drafting up a normative suggestion based on what you told me, but it'd help to see what you currently have
[22:51:08] <UDK450> https://i.imgur.com/0nKhis9.png
[22:51:55] <Nei> SnoopJ, hexology: thanks for your comments....
[22:52:00] *** Quits: pneff (~pneff@46-127-136-42.dynamic.hispeed.ch) (Ping timeout: 272 seconds)
[22:52:50] <hexology> UDK450: `from vlan_automation.helpers import bluecat` should work, based on what i see there
[22:52:56] *** Joins: iomari891 (~iomari891@197.210.53.151)
[22:52:58] <hexology> can you post your setup.py file?
[22:52:59] *** Joins: boB_K7IQ (~boB_K7IQ@152.44.147.180)
[22:53:03] *** Joins: RangerBobVA (~bmaddox@user/rangerbobva)
[22:53:25] <hexology> although if your CWD is `VLAN-AUTOMATION` then python should also find the vlan_automation package because it's in the CWD
[22:53:27] *** Quits: Ergo^ (~ergo@91.238.59.144) (Remote host closed the connection)
[22:53:58] *** Joins: Sasazuka (~Sasazuka@user/sasazuka)
[22:54:00] *** Quits: GiLgAmEzH (~gilgamezh@181.47.117.104) (Remote host closed the connection)
[22:54:52] *** Joins: wyclif (~wyclif@user/wyclif)
[22:55:45] *** Quits: NeoCore (~neocore@45.152.181.180) (Read error: Connection reset by peer)
[22:55:50] *** Joins: ApostleInTriumph (~ApostleIn@vpn2.lix.polytechnique.fr)
[22:57:33] *** Joins: onu (~onufn@gibbs.uberspace.de)
[22:57:33] <UDK450> https://pastebin.com/ymuf5Z7z
[22:57:55] <UDK450> I'm just getting more familiar with writing more extensive/complex python projects.
[22:57:57] *** Quits: ctrypoph (~ctrypoph@99-51-11-77.lightspeed.brhmmi.sbcglobal.net) (Quit: -a- Connection Timed Out)
[22:58:04] <UDK450> Been going thru some various resources.
[22:58:20] *** Quits: Sheilong (uid293653@id-293653.charlton.irccloud.com) (Quit: Connection closed for inactivity)
[22:58:38] <mcint> is there a formatter than can sort kwargs
[22:59:22] <Wulf> mcint: formatter for what?
[22:59:32] <UDK450> I'm currently in the vlan_automation/vlan_automation folder, switch to the python3 interpreter, and try to `from vlan_automation.helpers import bluecat` but it fails saying 'ModuleNotFoundError: No module named 'vlan_automation'
[22:59:47] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 256 seconds)
[22:59:59] <mcint> Wulf: python code?
[23:00:18] <SnoopJ> mcint, I'm not entirely clear on what you're asking, but `kwargs` is usually just a dict, which you can sort into a list of key,val tuples by argument name as: `sorted_kwargs = sorted(kwargs.items())`
[23:00:25] <hexology> UDK450: remove package_dir entirely, and remove the where= in find_packages()
[23:00:48] <Wulf> mcint: your question is unclear. Got more context?
[23:01:39] <hexology> UDK450: you technically could, but definitely shouldn't, write this: `packages=find_packages(".")` and `package_dir={"vlan_automation": "./vlan_automation"}`
[23:01:47] <hexology> but maybe that helps clear up what those kwargs are used for
[23:02:03] *** Joins: ctrypoph (~ctrypoph@99-51-11-77.lightspeed.brhmmi.sbcglobal.net)
[23:02:06] *** Quits: ctrypoph (~ctrypoph@99-51-11-77.lightspeed.brhmmi.sbcglobal.net) (Excess Flood)
[23:02:16] <hexology> if you had `./src/vlan_automation` instead of `./vlan_automation` then you'd write `packages=find_packages("./src")` and `package_dir={"": "./src"}`
[23:02:36] <UDK450> I'm trying to learn and establish best practices for Python projects going forward, so I definitely appreciate what I can (but shouldn't do) as well.
[23:02:52] <hexology> but in your case, you would just write `packages=find_packages()` and omit `package_dir`
[23:03:07] <UDK450> I was src/vlan_automation, but then restructured to just vlan_automation
[23:03:30] <UDK450> for the actual package, that is.
[23:03:31] <hexology> i see. this stuff is quite hard to find in the docs, and hard to understand even if you do find it.
[23:03:46] *** Joins: node1 (~node1@user/node1)
[23:04:06] *** Joins: PantelicGR (~PantelicG@user/pantelicgr)
[23:04:14] <UDK450> Yeah, I've been browsing thru https://pep8.org/ from time to time, but even then, it doesn't have everything.
[23:04:49] <hexology> might as well add pyproject.toml, with the `[build-backend]` section as shown here https://setuptools.readthedocs.io/en/latest/build_meta.html#how-to-use-it
[23:04:56] <ApostleInTriumph> Hello. I've two directories containing M and N files each. I'd like to sample m and n random files from each and copy to a new directory. where m<M, n<N. How do I go about?
[23:05:04] <UDK450> Changing setup.py to reflect your changes doesn't fix my issue though. still have trouble importing it
[23:05:08] <hexology> it doesn't make a difference for you as a developer, but you're at least being a good citizen in supporting the modern tooling
[23:05:18] <hexology> UDK450: don't forget to actually re-install it :)
[23:05:49] <UDK450> getting an error, no commands supplied issue too.
[23:05:53] <habnabit_> Jin^eLD, the .lib object is explicitly the proxy to the things that were cdef'd
[23:05:55] <UDK450> for the setup.py
[23:06:05] <grym> ApostleInTriumph: random.choices and pathlib, i think
[23:06:11] <hexology> UDK450: show the current setup.py and the error
[23:06:16] *** Joins: ctrypoph (~ctrypoph@2600:1702:3000:9090:6d7f:1c9d:1aea:24aa)
[23:06:18] <habnabit_> Jin^eLD, you wouldn't expose those without some python wrappers; it would be far too unsafe to
[23:06:18] *** Quits: ctrypoph (~ctrypoph@2600:1702:3000:9090:6d7f:1c9d:1aea:24aa) (Excess Flood)
[23:06:19] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 268 seconds)
[23:06:39] *** Joins: jinsun_ (~jinsun_@user/jinsun)
[23:07:05] *** Quits: lucad111 (~lucad111@51-148-40-1.dsl.zen.co.uk) (Quit: Leaving)
[23:07:07] *** Quits: anddt (~anddt@net-93-144-12-118.cust.vodafonedsl.it) (Ping timeout: 246 seconds)
[23:07:30] *** Quits: djapo (~archangel@user/djapo) (Ping timeout: 240 seconds)
[23:07:57] <SnoopJ> ApostleInTriumph, you might want random.sample() if you don't want repeats
[23:08:10] <UDK450> hexology, https://pastebin.com/HdJ8f5RE
[23:08:13] <ApostleInTriumph> grym the directory contains 200k files. is it still okay?
[23:08:28] <ApostleInTriumph> SnoopJ yes, absolutely i don't want repeats
[23:08:38] <SnoopJ> ApostleInTriumph, then what grym said, but use sample()
[23:08:38] <hexology> UDK450: don't use `python3 setup.py`; use `pip install .` or `pip install -e .`
[23:09:03] <mcint> mmm, i want to format dictuionary layout in source to match some structs
[23:09:27] <hexology> unless you're in some kind of very very constrained environment where pip isn't available but setuptools is available (??), in which case you'd write `python3 setup.py install`, but please don't do that if you can avoid it
[23:09:46] <grym> i can think of exactly one scenario where python setup.py install is required and it is gross and i hate it
[23:09:55] <hexology> i would also encourage using venv, it looks like you aren't using it here
[23:10:15] <hexology> grym: what is that scenario? just so i am emotionally ready if i ever have to face it...
[23:10:18] *** Joins: ctrypoph (~ctrypoph@2600:1702:3000:9090:6d7f:1c9d:1aea:24aa)
[23:10:20] *** Quits: ctrypoph (~ctrypoph@2600:1702:3000:9090:6d7f:1c9d:1aea:24aa) (Excess Flood)
[23:10:50] <grym> hexology: if you ever have to build torch from source
[23:10:55] <grym> its setup.py calls cmake
[23:10:57] <habnabit_> grym, oof
[23:11:00] <grym> but only if you jiggle it juuust right
[23:11:07] <UDK450> Yeah... our environment is a bit of a mess, and I don't have any control over it. Been asking for a few changes from one of the other network engineers but he hasn't had the time to make said changes.
[23:11:07] *** Quits: boB_K7IQ (~boB_K7IQ@152.44.147.180) (Ping timeout: 256 seconds)
[23:11:10] <hexology> so it works as `python setup.py` but not via pip?
[23:11:10] <hexology> ew
[23:11:23] <grym> hexology: yes.  it also has an entire utils class to parse the cmakelists.txt it just made
[23:11:27] <grym> and do _more_ things from them!
[23:11:29] <hexology> ..........
[23:11:32] <grym> >:)
[23:11:35] <habnabit_> UDK450, unless they've written a truly heinous setup.py, you can use pip instead anyway
[23:11:50] <habnabit_> UDK450, the one you posted is not that bad
[23:11:54] <grym> it's fairly eldrich
[23:12:12] *** Soni is now known as queeries
[23:12:12] *** Quits: Blankspace (~abcd@user/blankspace) (Read error: Connection reset by peer)
[23:12:21] <UDK450> hmmm
[23:12:22] *** Joins: wyclif (~wyclif@user/wyclif)
[23:12:25] <hexology> UDK450: you are writing the ansible script though, right? just swap `python3 setup.py` (which is wrong anyway because it's missing the `install` part) and use `pip install .` instead
[23:12:27] <UDK450> (master *) $ pip install setup.py
[23:12:27] <UDK450> Defaulting to user installation because normal site-packages is not writeable
[23:12:27] <UDK450> ERROR: Could not find a version that satisfies the requirement setup.py (from versions: none)
[23:12:27] <UDK450> ERROR: No matching distribution found for setup.py
[23:12:27] <UDK450> WARNING: You are using pip version 21.1.1; however, version 21.1.2 is available.
[23:12:28] <UDK450> You should consider upgrading via the '/usr/bin/python3 -m pip install --upgrade pip' command.
[23:12:33] <habnabit_> UDK450, please don't paste here
[23:12:40] <UDK450> apologies
[23:12:41] <hexology> `pip install .` not `pip install setup.py`
[23:12:58] <hexology> `.` means "the current directory" (i.e. the directory that has setup.py in it)
[23:13:06] *** Quits: lukka5 (~lukka5@246-60-231-201.fibertel.com.ar) (Ping timeout: 268 seconds)
[23:13:26] *** Joins: stdedos (~stdedos@user/stdedos)
[23:13:30] <UDK450> Yeah, I didn't realize that it looks for setup.py in the cwd
[23:13:47] <habnabit_> UDK450, it looks in whatever directory you pass to pip
[23:13:48] <UDK450> I believe it's working now.
[23:14:54] <habnabit_> UDK450, but your setup.py is trivial enough that it can be swapped for a setup.cfg without loss of fidelity
[23:15:29] <UDK450> Yeah, I was trying to figure out at what point I would need a .py vs a .cfg
[23:16:08] <habnabit_> UDK450, the reasons to use setup.py are "i don't know about setup.cfg" and "i don't understand how flexible setup.cfg/pyproject.toml are and i don't want to learn"
[23:16:10] *** Parts: stdedos (~stdedos@user/stdedos) ()
[23:16:24] *** Quits: iomari891 (~iomari891@197.210.53.151) (Ping timeout: 250 seconds)
[23:17:13] <UDK450> so, sounds like I'm going to read up on setup.cfg then.
[23:17:42] <hexology> what about "i don't want to use the cfg syntax but i still want --editable installs to work"
[23:17:52] <Jin^eLD> habnabit_: ok, I see, so it needs yet another python layer around it
[23:17:53] <habnabit_> hexology, sounds like a personal problem
[23:18:11] <hexology> that it is. but it's another reason!
[23:18:21] <habnabit_> Jin^eLD, this is the same layer that cffi always required
[23:18:25] <habnabit_> Jin^eLD, i wouldn't call it 'another'
[23:18:26] *** Joins: iomari891 (~iomari891@105.112.138.38)
[23:18:32] <hexology> another valid reason is, "i don't want to scare my coworkers any more than i already do"
[23:18:38] *** Joins: ctrypoph (~ctrypoph@99-51-11-77.lightspeed.brhmmi.sbcglobal.net)
[23:18:40] *** Quits: ctrypoph (~ctrypoph@99-51-11-77.lightspeed.brhmmi.sbcglobal.net) (Excess Flood)
[23:18:53] *** Joins: jazzy (~jaziz@2600:380:8753:52bc:5137:4898:53f7:15de)
[23:18:55] <habnabit_> Jin^eLD, cffi means you write your binding/glue code in python instead of how Python.h forces you to write much of it in C
[23:19:06] *** Quits: nyah (~nyah@90.221.186.180) (Remote host closed the connection)
[23:19:14] <SnoopJ> CFFI +1
[23:19:29] <habnabit_> Jin^eLD, it's strictly the same work, but done in a different langauge
[23:19:52] <UDK450> wait, if I'm developing a package, I'd want editable installs, right?
[23:19:55] *** Joins: Diemuzi (~Diemuzi@ip68-106-203-17.pn.at.cox.net)
[23:22:35] <Jin^eLD> habnabit_: hmm ok, I guess I still have some top-view difficulties to grasp it, only played around with it a little and felt like I had to little control in comparison to CPython
[23:23:16] *** Joins: pnoud (~pnoud@user/pnoud)
[23:23:18] *** Joins: ctrypoph (~ctrypoph@99-51-11-77.lightspeed.brhmmi.sbcglobal.net)
[23:23:20] *** Quits: ctrypoph (~ctrypoph@99-51-11-77.lightspeed.brhmmi.sbcglobal.net) (Excess Flood)
[23:23:32] <SnoopJ> Jin^eLD, Python.h is very hard to use correctly and there aren't usually a lot of benefits to avoiding an intermediate layer.
[23:24:03] <Jin^eLD> SnoopJ: I am not disagreeing, but CFFI somehow gives me a hard time, while I seem to understand Python.h better
[23:24:06] <habnabit_> Jin^eLD, what control do you feel like you're missing? like i said, it's strictly the same glue, but implemented in python instead of C
[23:24:18] *** Joins: Celeo (~Celeo@user/celeo)
[23:24:21] <SnoopJ> Jin^eLD, as long as you know that what you're holding is a footgun...
[23:24:22] <habnabit_> Jin^eLD, the only thing Python.h offers is more ways to make mistakes, generally
[23:24:31] <Jin^eLD> :)
[23:24:32] <SnoopJ> yea, agreed
[23:25:14] <Jin^eLD> OK I'll have another go at it
[23:26:20] <habnabit_> Jin^eLD, if you can explain what you feel like you're missing, i can tell you how to achieve the same thing with cffi
[23:27:18] *** Joins: ctrypoph (~ctrypoph@99-51-11-77.lightspeed.brhmmi.sbcglobal.net)
[23:27:20] *** Quits: ctrypoph (~ctrypoph@99-51-11-77.lightspeed.brhmmi.sbcglobal.net) (Excess Flood)
[23:28:07] *** Quits: pnoud (~pnoud@user/pnoud) (Ping timeout: 246 seconds)
[23:28:14] <Jin^eLD> habnabit_: I probably feel that cffi is doing "something" which I probably fear because I do not know what exactly it does :) but perhaps its OK, because I  missed the point with the python glue layer and used the .lib stuff directly which seemed ugly as a project API for users
[23:28:51] <habnabit_> Jin^eLD, sure. it's 'ugly' in much the same way as it would be 'ugly' to force people to write Python.h API calls from the C side
[23:29:04] <habnabit_> Jin^eLD, the point is that you write glue to make a better interface
[23:29:39] <Jin^eLD> well that is the point I missed, with Python.h I wrote the "nice Python interface" directly in C
[23:30:03] *** Quits: Laibsch (~leggewie@dynamic-093-133-112-192.93.133.pool.telefonica.de) (Ping timeout: 268 seconds)
[23:30:03] <Jin^eLD> so I somehow assumed ffi would provide fine grained control to present stuff in a similar way
[23:30:12] <habnabit_> Jin^eLD, not quite
[23:30:13] <Jin^eLD> with submodules and stuff like that
[23:30:16] *** Quits: patthoyts (~pat@2001:470:1f1d:26c:b866:b2c4:f95a:c741) (Ping timeout: 250 seconds)
[23:30:33] <SnoopJ> you could do that stuff in Python anyway
[23:30:34] <habnabit_> Jin^eLD, the point is that writing the 'nice python interface' in C is _extremely_ hard compared to writing python code
[23:30:36] *** Joins: szymon_ (~ugh@staticline-31-183-187-232.toya.net.pl)
[23:30:44] *** Joins: RedAero (~RedAero@0526E4E5.unconfigured.pool.telekom.hu)
[23:31:16] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 272 seconds)
[23:31:20] <Jin^eLD> any known performance downsides comparing Python.h and cffi + python wrappers on top?
[23:31:32] *** Joins: ctrypoph (~ctrypoph@2600:1702:3000:9090:6d7f:1c9d:1aea:24aa)
[23:31:35] *** Quits: ctrypoph (~ctrypoph@2600:1702:3000:9090:6d7f:1c9d:1aea:24aa) (Excess Flood)
[23:31:42] <habnabit_> Jin^eLD, yes: Python.h is much slower on pypy
[23:32:00] <RedAero> nedbat: Just read your blogpost re: the freenode fiasco. Thanks for the info
[23:32:27] <SnoopJ> For what it's worth, CFFI does offer you ways to control organization: https://cffi.readthedocs.io/en/latest/cdef.html
[23:32:32] *** Quits: szymon (~ugh@staticline-31-183-187-232.toya.net.pl) (Ping timeout: 272 seconds)
[23:32:56] <SnoopJ> in particular look at ffibuilder.set_source() there
[23:33:01] <Jin^eLD> pypy is the thing that produces binaries out of .py scripts? reading the "what is pypy" docs, but it talks lowlevel
[23:33:22] <SnoopJ> pypy is a Python interpreter written in Python
[23:33:22] <habnabit_> Jin^eLD, no. pypy is an alternate python implementation with a hella nice JIT
[23:33:54] *** Joins: Nact (~l@host-85-27-122-59.dynamic.voo.be)
[23:34:05] <Jin^eLD> habnabit_: aha, well, since I am embedding I do not think pypy is a relevant use case for me anyway (unless it has an embedding interface of its own?)
[23:34:14] <habnabit_> Jin^eLD, pypy's embedding interface is .. cffi
[23:34:19] <Jin^eLD> :)
[23:34:21] <nedbat> RedAero: glad to see you made it here.
[23:34:28] <habnabit_> Jin^eLD, you can transparently swap the backend python implementation
[23:34:28] <Jin^eLD> "python interpreter written in python" what the hell :))
[23:34:37] <habnabit_> Jin^eLD, many languages are self-hosted
[23:34:41] <SnoopJ> Jin^eLD, CS has a term for this: "self hosting"
[23:35:09] <Jin^eLD> well, at the very beginning of each egg there probably is still some C code :)
[23:35:21] <SnoopJ> there's a term for that, too: "bootstrapping"
[23:35:23] <habnabit_> Jin^eLD, what C code compiled the first C compiler? ;)
[23:35:31] *** Joins: PyCharm (~PyCharm@user/pycharm)
[23:35:32] *** Joins: ctrypoph (~ctrypoph@2600:1702:3000:9090:6d7f:1c9d:1aea:24aa)
[23:35:34] *** Quits: ctrypoph (~ctrypoph@2600:1702:3000:9090:6d7f:1c9d:1aea:24aa) (Excess Flood)
[23:35:37] <PyCharm> hi
[23:35:41] *** Joins: Corder_000 (~Coder_000@177.10.203.30)
[23:35:43] <habnabit_> Jin^eLD, anyway no pypy has been bootstrapped
[23:35:45] <SnoopJ> it's turtles all the way down
[23:35:53] <habnabit_> Jin^eLD, you can bootstrap it with cpython if you want
[23:36:02] *** Joins: glumanda (~manu@194-208-201-025.tele.net)
[23:36:09] *** Joins: ctrypoph (~ctrypoph@99-51-11-77.lightspeed.brhmmi.sbcglobal.net)
[23:36:27] *** Quits: jinsun_ (~jinsun_@user/jinsun) (Read error: Connection reset by peer)
[23:36:42] *** Joins: justinf210 (~justinf21@192-230-160-245.3rivers.net)
[23:36:50] <Jin^eLD> I think I know what my issue with cffi is, I simply do not understand its docs :) looking at ffibuilder.set_source() that SnoopJ  pointed me to and not really getting any idea, lots of lowlevel talk going on
[23:37:06] <Jin^eLD> its like, it says what it does without making it clear what it really does and what it is good for :)
[23:37:47] <SnoopJ> Jin^eLD, it doesn't do just one thing, there are 4 distinct modes of usage as explained in the "Overview" part of the docs, which is very good reading if you want an overview.
[23:37:51] *** Quits: szymon_ (~ugh@staticline-31-183-187-232.toya.net.pl) (Quit: szymon_)
[23:38:22] *** Joins: smallfoot- (~smallfoot@c-3202225c.041-5-73746f7.bbcust.telenor.se)
[23:38:23] <Jin^eLD> SnoopJ: I did look at that, especially at the embedding section
[23:38:25] <habnabit_> Jin^eLD, anyway to bring this all into slightly better focus, cffi exists because pypy wanted an embedding/extending interface that wasn't Python.h because that interface makes way, _wayy_ too many assumptions about deep implementation details. in fact, cpython has been trying to move away from it for years because it's stuck them with a bad gc
[23:38:36] <smallfoot-> Python in 2021 still cannot deserialize JSON into a class without third-party package?
[23:38:37] <PyCharm> https://bpa.st/VL7A
[23:38:44] *** Quits: milkt (~debian@gateway/tor-sasl/milkt) (Remote host closed the connection)
[23:38:46] <PyCharm> I'm having trouble]
[23:38:47] <SnoopJ> the four modes come down to two choices: API/ABI mode ("is a C compiler invoked?") and in/out of line ("does module prep happen at runtime or ahead of time?").
[23:39:08] *** Joins: LuxuryMode (uid91005@id-91005.charlton.irccloud.com)
[23:39:09] *** Joins: pnoud (~pnoud@user/pnoud)
[23:39:35] <habnabit_> smallfoot-, seems a bit niche to put into the stdlib, doesn't it?
[23:39:42] <SnoopJ> but you don't really need to know _how_ it works if you just want bindings. If you want to avoid keeping track of complex implementations, Python.h is probably just about the worst choice: it maximizes the amount of this you need to do.
[23:40:00] *** Quits: Corder_000 (~Coder_000@177.10.203.30) (Client Quit)
[23:40:15] *** Joins: Corder_000 (~Coder_000@177.10.203.30)
[23:40:19] <Jin^eLD> SnoopJ: maybe its jus tme, but the docs are written in a way that I simply do not understand, some compliated description, then an example with "and here comes the magic" and I'm like... ehm, ok, no idea what is happening
[23:40:38] <SnoopJ> Jin^eLD, do you have a burning need to know exactly how it makes FFI work?
[23:40:47] <PyCharm> Can anyone help me with my code https://bpa.st/VL7A
[23:40:50] <SnoopJ> Or do you just need FFI that minimizes the burden of using it
[23:41:00] <Jin^eLD> SnoopJ: not at all, I'd be happy to understand how I can use it to do what I need :P
[23:41:21] <Jin^eLD> SnoopJ: for instance I googled for quite a while trying to find out how I could create an object (as in python class) in CFFI
[23:41:24] <Jin^eLD> and I was not able to find it
[23:41:36] <SnoopJ> Jin^eLD, okay, and you've read the overview? So let's start from the top: what's your first "huh?!" question as you read that document?
[23:41:37] <smallfoot-> habnabit_, no it seems very useful then you know what to expect to find, because it is strongly defined in the class
[23:41:38] *** Joins: lukka5 (~lukka5@246-60-231-201.fibertel.com.ar)
[23:41:39] <nedbat> PyCharm: on line 14, add some parens:   print(Solution().addTwoNumbers ...
[23:42:09] <habnabit_> smallfoot-, fortunately, it's easy to install third-party packages if that's a thing you want
[23:42:21] <habnabit_> smallfoot-, i don't think every niche use case needs to be supported in the stdlib
[23:42:25] <SnoopJ> Jin^eLD, re: objects, C doesn't have them.
[23:42:51] <SnoopJ> You might write a Python class that talks to a C API to provide a nice object-y interface to some C, though
[23:42:55] <smallfoot-> habnabit_, only me as a dev can install the package, if i tell end users "oh you need to add dependcy x,y,z" then no way they going to bother
[23:43:07] <habnabit_> Jin^eLD, do you understand why cffi doesn't provide that now?
[23:43:13] <habnabit_> smallfoot-, then.. how do they get _your_ code?
[23:43:20] <Jin^eLD> SnoopJ: well, in Python.h I'd do PyModule_AddObject() and have my object...
[23:43:22] <grym> smallfoot-: make your tool install the dependencies it needs
[23:43:27] <grym> smallfoot-: that's just normal behavior anyway
[23:43:31] <Tashtari> PyCharm: Your code calls addTwoNumbers on the class itself rather than on an instance of the class.  When you call a method on an instance of the class, that gets translated into the first argument (self).  When you just call the method on the class, that doesn't happen, so it thinks an argument is missing.
[23:43:46] <SnoopJ> Jin^eLD, and with CFFI, you do `class MyObject: ...` and you have your object. I'm sorry, I really don't understand what your question is.
[23:43:54] <Tashtari> Also what nedbat said
[23:43:56] *** Joins: waynew (~wayne@user/waynew)
[23:44:07] *** Joins: wyclif (~wyclif@user/wyclif)
[23:44:24] <smallfoot-> habnabit_, idk, maybe wget or git clone
[23:44:34] *** Quits: pnoud (~pnoud@user/pnoud) (Ping timeout: 272 seconds)
[23:44:47] <bjs> Jin^eLD: CFFI lets you call C code from Python
[23:44:56] <Jin^eLD> habnabit_: doesnt provide what now, I got lost sorry? you wrote pypy wanted a better way for bindings
[23:45:13] <nedbat> smallfoot-: it can feel like a pain to get it going the first time, but if you make your code pip-installable, then it will handle dependencies for you
[23:45:14] <habnabit_> Jin^eLD, 'create a python class in cffi'
[23:45:19] <Jin^eLD> ah, taht
[23:45:26] <habnabit_> smallfoot-, there's a number of tools to make a single wget-able artifact that includes your code with its dependencies: shiv, pex, zipapp
[23:45:55] <SnoopJ> habnabit_, you can do deps with zipapp?
[23:46:15] <Jin^eLD> habnabit_, bjs: so I think I get it now, in the sense that isntead of defining those objects/classes in C you only have direct function calls into C and create the class in python which populates itself via the C backend or something like that? is that it?
[23:46:39] <bjs> Jin^eLD: what are you trying to do in C?
[23:46:47] <SnoopJ> Jin^eLD, C does not have classes/objects, full stop. To talk about them in that context is nonsense. The Python C-API creates a class/object system in C, but the language itself does not have this.
[23:47:09] <habnabit_> SnoopJ, pretty sure
[23:47:11] <SnoopJ> Upshot: when you write CFFI, you just those parts in Python, instead of standing on your head to do it in C-API
[23:47:21] <Jin^eLD> SnoopJ: I am aware of that :) but I am designing a python interface for people who will be using python scripts
[23:47:21] <SnoopJ> (and probably making very subtle errors)
[23:47:34] <SnoopJ> Jin^eLD, okay, and you don't want to write those parts in Python because........
[23:47:36] <Jin^eLD> thats why my confusion came from about "how do I do that.."
[23:47:48] <habnabit_> Jin^eLD, 'classes' don't exist in a C API or C ABI, so cffi doesn't include them as something you can cdef
[23:48:00] *** Joins: cvmn (~caveman@gateway/tor-sasl/caveman)
[23:48:06] *** Quits: rendar (~rendar@user/rendar) ()
[23:48:14] <SnoopJ> Right, CFFI is for talking to *any* C which in general does not have this concept
[23:48:28] <bjs> afaik you shouldn't ever have a PyObject* in the CFFI-executed code
[23:48:28] <habnabit_> Jin^eLD, conversely, cppyy (like cffi for C++) does allow class definitions for the local C++ API's implementation of classes
[23:48:30] <Jin^eLD> bjs: I have an application that interacts with some hardware and does some online communication and stuff like that and I need a "plugin" script to allow users to do some processing/custom logic
[23:49:05] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 256 seconds)
[23:49:08] <PyCharm> Tashtari, thank you. I've trying to regain my sanity after trying to learn JavaScript....
[23:49:16] <SnoopJ> Jin^eLD, is there a reason you don't want to write your container classes in Python?
[23:49:38] <Jin^eLD> SnoopJ: I did not say that, but I am trying to figure out how much of them need to be in python
[23:49:40] <SnoopJ> i.e. a reason you really want to go the long way through Python.h's API instead of `class MyObject: ... # CFFI calls`
[23:49:46] *** Quits: rubberd0g (~kha0s@p5dc58f39.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[23:49:47] *** Joins: semanticz0_ (~semanticz@202.164.136.255)
[23:49:55] <SnoopJ> Jin^eLD, did not say what? I asked you a question because I don't know the answer
[23:50:02] <semanticz0_> Anyone have any thoughts about the new Github codepair AI?
[23:50:09] <Jin^eLD> so basically my python class __init__() would go to some C function and ask for default values and stuff like that?
[23:50:26] <SnoopJ> it would do whatever you want it to do. If that stuff includes calling C, you use CFFI's functionality for that.
[23:50:28] <Jin^eLD> SnoopJ: I did not say I do not _want_ to write container classes in Python
[23:50:46] <Jin^eLD> until 20 minues ago I was not aware that was the only way to do what I need :>
[23:50:49] *** Quits: jhulten (~jhulten@c-67-185-71-124.hsd1.wa.comcast.net) (Remote host closed the connection)
[23:50:54] <bjs> Jin^eLD: really CFFI is for "oh I have this bunch of C code that'd be really nice if I could just run it from Python"
[23:50:55] <SnoopJ> we're making progress, then! :)
[23:51:06] *** Quits: ionface (~ionface@user/ionface) (Ping timeout: 240 seconds)
[23:51:06] <bjs> not for some complicated situation where the C code is interacting with python objects
[23:51:10] <Jin^eLD> which of course also explains why my googling on how to tell cffi to create a class resulted in nothing :)
[23:51:12] <habnabit_> Jin^eLD, if your C 'class' has alloc/init/dealloc functions, you'd call them from __init__ and cffi's finalizer in a class defined in pure python
[23:51:21] *** Quits: rhax (~yannick@user/rhax) (Ping timeout: 256 seconds)
[23:51:24] *** Joins: jhulten (~jhulten@c-67-185-71-124.hsd1.wa.comcast.net)
[23:51:27] <Tashtari> (Aside: I just learned the difference between an argument and a parameter, I thought they were interchangeable terms.)
[23:51:41] <SnoopJ> Tashtari, apparently so did I; what's the difference?
[23:51:49] <bjs> the argument is the value that gets passed at the call
[23:51:52] <nedbat> Tashtari: the parameter is the catcher's mitt.  the argument is that ball that gets thrown :)
[23:51:53] <bjs> the parameter is the thing on the `def`
[23:51:53] <smallfoot-> habnabit_, oh I never heard about any of those. Which one is the good one?
[23:51:54] <habnabit_> Jin^eLD, (__del__ is not the same; cffi's docs cover how to do finalizers)
[23:51:56] *** Quits: greedom (~greedom@2001:16b8:32d0:b400:22d1:c4b6:997b:9c6) (Ping timeout: 250 seconds)
[23:51:57] *** Parts: glumanda (~manu@194-208-201-025.tele.net) (WeeChat 3.2)
[23:51:59] <Tashtari> This.
[23:52:02] *** Joins: dustiestgolf (~anotherus@153.90.200.104)
[23:52:10] <SnoopJ> ah, semantics
[23:52:16] <habnabit_> smallfoot-, i always used pex, but i've been hearing that shiv is easier to use
[23:52:19] * SnoopJ glances at click's nomenclature
[23:52:28] <smallfoot-> habnabit_, thanks
[23:52:29] *** Joins: melty_cheese (~melty_che@ip72-219-72-7.oc.oc.cox.net)
[23:52:30] *** Joins: drincruz (~drincruz@ec2-18-235-23-153.compute-1.amazonaws.com)
[23:52:40] <Jin^eLD> ok so I guess I need to completely rethink the approach, which is probably part of the difficulties I have been having with cffi as it seems I was trying to use it in a way its not intended to be used
[23:52:43] *** Quits: semanticz0_ (~semanticz@202.164.136.255) (Quit: Leaving)
[23:52:57] <smallfoot-> habnabit_, and both pex and shiv use zipapp under the hood, they just making it more convienitnet?
[23:53:04] <habnabit_> smallfoot-, they do not
[23:53:06] *** Quits: y2o (~y2o@pc-128-133-45-190.cm.vtr.net) (Ping timeout: 240 seconds)
[23:53:14] *** Joins: digital-carver (~DCarver@49.205.154.191)
[23:53:34] <bjs> SnoopJ: it's an important distinction because e.g. Python's function call semantics is "array of positional arguments and mapping of keyword arguments" and then it tries to match them to the parameters
[23:53:57] <bjs> whether something is a keyword argument or not is entirely dependent on the call, and not the `def`
[23:54:21] *** Quits: kosh (~kosh@user/kosh) (Read error: Connection reset by peer)
[23:54:36] *** Quits: melty_cheese (~melty_che@ip72-219-72-7.oc.oc.cox.net) ()
[23:54:37] <mbrndtgn> smallfoot-: I think they implement the same spec (python applications as zip archives) but the implementation differs
[23:54:42] <SnoopJ> bjs, well, unless it's kw-only but I understand what you mean :)
[23:54:43] *** Quits: drincruz_ (~drincruz@ool-44c748be.dyn.optonline.net) (Ping timeout: 246 seconds)
[23:54:59] *** Joins: Bronto22 (~mennoh@2a02:a46b:4db0:1:5604:a6ff:fe37:3044)
[23:55:03] *** Joins: milkt (~debian@gateway/tor-sasl/milkt)
[23:55:04] <SnoopJ> habnabit_, isn't shiv "zipapp, but we do deps?"
[23:55:11] <habnabit_> SnoopJ, no idea offhand
[23:55:18] <habnabit_> i've only used pex in depth
[23:55:19] <dustiestgolf> I am writing a small device control library and currently autogenerate a bunch of hidden functions for each register from a yaml file with an `exec()` call (all of these functions are basically identical). This is kind of a hack approach. Does anyone have recommendations for a better approach that doesn't require writing them all out individually?
[23:55:20] <smallfoot-> mbrndtgn, i see
[23:55:23] <bjs> SnoopJ: no, if you pass it positionally you'll be told that you just didn't have anything that matched the keyword-only parameter
[23:55:26] <dustiestgolf> Thanks in advance :)
[23:55:30] <SnoopJ> IIRC it bootstraps itself by unpacking deps or somesuch, a bit like pyinstaller does
[23:55:36] <bjs> SnoopJ: (or maybe that you passed too many positional arguments? not sure)
[23:55:39] <SnoopJ> (and that bootstrapper is a zipapp)
[23:55:57] <SnoopJ> it's not exactly elegant but it's darned practical
[23:55:58] *** Quits: jhulten (~jhulten@c-67-185-71-124.hsd1.wa.comcast.net) (Ping timeout: 272 seconds)
[23:55:59] <mbrndtgn> shiv has some advantages with native code as far as i know
[23:56:01] <habnabit_> dustiestgolf, it would be easier to give advice if we could see your code (the generated code or the generator)
[23:56:30] * SnoopJ has had good experiences with shiv
[23:56:30] <mbrndtgn> i've used both a little bit. i like that apps seem to start faster with shiv
[23:56:44] <SnoopJ> mbrndtgn, what is the alternative? pex?
[23:56:48] <graingert> dustiestgolf: show your code?
[23:56:52] <SnoopJ> the alternative to which you are comparin, I mean
[23:56:56] <PyCharm> learning javascript has embedded razors in my brain
[23:56:57] <dustiestgolf> habnabit: ok! give me a sec
[23:57:00] <mbrndtgn> SnoopJ: yeah, i only know of pex and shiv
[23:57:00] *** Joins: PdimH (~pdimh@user/pdimh)
[23:57:00] <PyCharm> i need python to remove them
[23:57:19] <graingert> modern JS is pretty great tbh
[23:57:28] <SnoopJ> mbrndtgn, there's PyInstaller, but that's one big step up the complexity ladder
[23:57:31] <graingert> import system is waaay better than python's
[23:57:40] <PyCharm> you have to be trolling
[23:58:12] <SnoopJ> PyCharm, why?
[23:58:26] <habnabit_> no js's module system is far better than python's (iff you don't have disagreements between libraries about _which_ module system, but that's mostly a non-issue these days..)
[23:58:29] <SnoopJ> seems earnest to me (and I can sort of see why)
[23:58:46] <mbrndtgn> oh, pyinstaller seems to handle desktop apps as well
[23:59:01] <SnoopJ> yea, it's the thing you use when you have a whole application to worry about
[23:59:06] <PyCharm> javascript has prototypal inheritance
[23:59:10] <graingert> habnabit_: mostly you can shiv modules to do the newest module system du jour
[23:59:16] <habnabit_> PyCharm, what does that have to do with modules?
[23:59:20] <SnoopJ> well, usually; I guess nothing *precludes* you from doing that with shiv
[23:59:24] <graingert> thanks to everything being closures
[23:59:26] *** Joins: rhax (~yannick@user/rhax)
[23:59:33] *** Quits: cvmn (~caveman@gateway/tor-sasl/caveman) (Ping timeout: 244 seconds)
[23:59:39] <PyCharm> and weird crap like modules being wrapping stuff in brackets
[23:59:55] <SnoopJ> PyCharm, do you have any questions about Python?
