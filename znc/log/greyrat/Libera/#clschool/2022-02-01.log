[00:17:35] *** Quits: shka (~herr@109.231.0.226) (Ping timeout: 256 seconds)
[00:26:37] *** Quits: epony (epony@user/epony) (Quit: QUIT)
[00:42:53] *** Joins: shka (~herr@109.231.0.226)
[01:37:29] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 256 seconds)
[01:38:56] *** Joins: aeth (~aeth@user/aeth)
[02:30:49] *** Joins: aeth_ (~aeth@user/aeth)
[02:31:00] *** Quits: aeth (~aeth@user/aeth) (Killed (NickServ (GHOST command used by aeth_)))
[02:31:05] *** aeth_ is now known as aeth
[02:38:54] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 256 seconds)
[02:40:28] *** Joins: aeth (~aeth@user/aeth)
[02:41:34] *** Quits: [w] (~w]@2601:8c1:80:70d0::4b06) (Quit: nyaa~)
[03:11:22] *** Joins: Oladon (~olad@98.43.81.226)
[03:33:39] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 256 seconds)
[03:35:37] *** Joins: aeth (~aeth@user/aeth)
[03:49:34] *** Quits: shka (~herr@109.231.0.226) (Ping timeout: 268 seconds)
[04:45:52] *** Quits: dickbar__ (~dickbaren@86-90-132-28.fixed.kpn.net) (Read error: Connection reset by peer)
[04:46:37] *** Joins: dickbar__ (~dickbaren@86-90-132-28.fixed.kpn.net)
[04:47:46] *** Quits: fiddlerwoaroof (~fiddlerwo@user/fiddlerwoaroof) (Quit: Gone.)
[04:48:03] *** Joins: fiddlerwoaroof (~fiddlerwo@user/fiddlerwoaroof)
[04:48:37] *** Quits: micro_ (~micro@user/micro) (Ping timeout: 240 seconds)
[04:49:37] *** Joins: micro (~micro@user/micro)
[04:51:17] *** Quits: random-nick (~random-ni@87.116.167.125) (Ping timeout: 256 seconds)
[05:05:17] *** Joins: epony (epony@user/epony)
[05:10:30] *** Quits: rotateq (~user@p200300e78706a00050f72feb644e2401.dip0.t-ipconnect.de) (Quit: ERC (IRC client for Emacs 27.2))
[05:17:55] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 256 seconds)
[05:19:34] *** Joins: aeth (~aeth@user/aeth)
[05:25:39] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[06:13:45] *** Quits: Josh_2 (~user@37.25.47.130) (Ping timeout: 250 seconds)
[07:20:09] <neominimum> Hi, I'm writing a macro that in the first stage needs to evaluate some symbols into either a function or a funcallable instance as I want to check if they exist in the lexical scope before proceeding.
[07:20:16] <neominimum> Too keep my sanity I'm breaking the macro definition up into more than one function, the first stage being one of them.
[07:20:20] <neominimum> As I've never attempted it I'm unsure how to carry the environment that exists where the macro gets called, into the scope of the first stage function.
[07:20:57] <neominimum> How is this achieved?
[07:24:25] *** Quits: mzan (~quassel@mail.asterisell.com) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[07:25:36] *** Joins: mzan (~quassel@mail.asterisell.com)
[07:25:58] *** Joins: Bike (~Bike@71.69.170.70)
[07:30:16] <beach> Good morning everyone! 
[07:30:55] <beach> neominimum: What does it mean to "evaluate some symbols into either a functions or a funcallable instance"?
[07:37:05] <neominimum> Hi beach: well, lets say the macro takes a list (func-obj 1 2) I want to determine whether func-obj is bound to a funcallable object within the scope where the macro is called. I assumed that the macro receives unevaluated s-exprs as its arguments, so my thinking was that the symbol representing func-obj needs to be evaluated to get at the object it is bound to?
[07:38:08] *** Joins: domovod (~domovod@176.196.122.197)
[07:39:14] <beach> The thing is that if a symbol is evaluated, its value is looked up in the variable namespace.  Is that what you want?  So you want to catch (let ((x (lambda ...))) (your-macro (x 1 2))) but not (flet ((x ())) (your-macro (x 1 2)))? 
[07:42:23] <neominimum> Just for starters, yes. but eventually I'd like to query the function namespace too. I just don't know the general approach to.
[07:42:39] <neominimum> to do that*
[07:43:34] <beach> For stuff like this, you need functions for querying the environment, and those are not in the standard.  You might need something like the CLtL2 protocol.
[07:44:42] <beach> Most implementations provide the CLtL2 protocol though, and there is a compatibility system for it, cl-environments or something like that.
[07:46:49] <mfiano> There are a few iirc
[07:46:52] <neominimum> Okay thanks!
[07:48:09] <beach> mfiano: Oh?  I guess the referees are going to complain that I included only one.
[07:48:38] <mfiano> beach: Also Bike has this: https://github.com/Bike/introspect-environment
[07:49:39] <beach> I completely forgot about that one.  I wonder why Bike did not remind me.
[07:49:51] <Bike> i keep forgetting about it, mostly
[07:50:00] <beach> Hmm, OK.
[07:50:10] <Bike> also the part that takes actual work is the implementations exposing the protocol
[07:50:11] <neominimum> a bunch of functions show up in emacs for sb-cltl2: specifically one called augment environment, that might be it! I have some reading to do.
[07:50:18] <beach> I guess I'll include it in the final version, provided the paper is accepted of course. 
[07:50:41] <beach> neominimum: That would be the implementation-specific version.
[07:51:02] <beach> neominimum: The names would be FUNCTION-INFORMATION and VARIABLE-INFORMATION.
[07:52:33] <neominimum> oh okay, but what if I need to get the information outside of lexical scope? do I carry the environment over somehow?
[07:52:54] <beach> Yes, provide the &ENVIRONMENT parameter to your macro.
[07:53:16] <neominimum> fantastic!
[07:56:08] *** Quits: dre (~dre@2001:8003:c932:c301:9978:1feb:26d8:cb0f) (Quit: Leaving)
[08:09:26] *** Joins: dre (~dre@2001:8003:c932:c301:77c0:cff4:f6dd:6abf)
[08:21:13] <neominimum> Hmm if the object isn't bound until runtime will this approach still work? I only ask because I imagine the macro is expanded and the resulting code is compiled along with the surrounding code before being called so I think checking the variable information during macroexpansion may not work like I need it too. If it helps here is a mockup
[08:21:18] <neominimum> https://pastebin.com/raw/u3mG06yw
[08:23:22] <neominimum> that should read `if (validate-list list env) ,list (error "bad list!"))
[08:24:50] <beach> You explicitly said "in the first stage" which I took to mean "at macro-expansion time".  So then you can't wait until run time.
[08:25:32] <Bike> this won't work because OBJ is bound in the variable namespace, not the function namespace
[08:26:09] <neominimum> Oh sorry I wasn't clear enough
[08:29:14] <neominimum> I'm having trouble wrapping my head around the different 'times'
[08:29:49] <Bike> could we take a step back here? what is your macro supposed to do, precisely?
[08:30:03] <Bike> you give it a form, and it validates... what?
[08:30:46] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 268 seconds)
[08:34:30] <neominimum> alright, one sec
[08:38:55] <Bike> if the point is to check that the function is of some specific type, i'm wondering if you wouldn't be better served by skipping the macro and doing it through a function
[08:39:17] <Bike> (defun my-funcall (function &rest args) (unless (typep function 'funcallable) (error ...)) (apply function args))
[08:39:28] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca) (Remote host closed the connection)
[08:39:41] <Bike> then (my-funcall (make-instance 'funcallable ...) 'symbol-arg ...)
[08:41:20] <Bike> a macro is never going to be able to determine the types of forms with perfect accuracy, so you can't do a type check in the macroexpander
[08:42:01] <neominimum> https://pastebin.com/raw/u65nGF7t
[08:42:15] <neominimum> in haste I may have made an error or two
[08:43:09] <Bike> when i asked what the macro was supposed to do, i was asking for like, an english language description
[08:43:11] <neominimum> I'm starting to think as well that I made an error in assuming that a macro will work
[08:44:15] <Bike> the values of macro parameters will be forms, so e.g. in your example with (macro (obj 'symbol-arg)), the LIST parameter to MACRO will be the symbol OBJ, rather than a function
[08:44:33] <neominimum> ok it checks the first element of each list in the tree for functionp-ness and if the test passes then it modifies the list into a funcall instead
[08:46:30] <neominimum> yes I misunderstood. I thought it may be possible to do the check during macro expansion by checking the environment but it is clear too me now that the variable won't be bound till well after then
[08:46:53] <Bike> right.
[08:47:21] <neominimum> this is new to me so thanks for your patience
[08:48:00] <Bike> no problem. everyone gets pretty confused by macros at first. or at least i did.
[08:50:31] <neominimum> Yeah haha I keep making misguided assumptions that I spend a lot of time trying to work out. Like looking in the kitchen cupboard for a pillow case.
[08:52:00] <neominimum> with the lights off
[08:52:15] *** Quits: jealousmonk (~user@user/jealousmonk) (Quit: ERC 5.4.1 (IRC client for GNU Emacs 27.1))
[08:58:29] *** Quits: Bike (~Bike@71.69.170.70) (Quit: Connection closed)
[09:19:09] <White_Flame> the way I word it, a macro takes source code as parameters, and returns source code
[09:40:14] <neominimum> White_Flame: What's funny is I've probably read something to that effect many times but I seem to have a need to effectively trip over the implications of such things before I get a chance to truly understand them.
[09:40:41] * neominimum is humbled
[09:40:48] <White_Flame> yep, as everyone else also says, there's a learning curve, takes a while to internalize it all
[09:45:36] *** Quits: domovod (~domovod@176.196.122.197) (Ping timeout: 256 seconds)
[09:59:15] *** Joins: Jing (~hedgehog@240e:390:7c53:a7e1:1164:2854:8a6e:b4e3)
[10:17:09] *** Joins: tewi (~tewi@apn-95-41-191-10.dynamic.gprs.plus.pl)
[10:23:26] *** Joins: silasfox (~sbv@p200300cec7219d00ef0f653f23257d7e.dip0.t-ipconnect.de)
[10:35:15] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 256 seconds)
[10:37:02] *** Joins: aeth (~aeth@user/aeth)
[10:40:00] *** Quits: occ (~occ@user/occ) (Ping timeout: 256 seconds)
[10:48:13] *** Joins: st_iron (uid370243@id-370243.uxbridge.irccloud.com)
[10:49:57] <st_iron> good morning
[11:00:37] *** Joins: occ (~occ@user/occ)
[11:04:34] *** Joins: ahc (~ahc@121.98.229.241)
[11:10:37] *** Joins: lottaquestions (~nick@2607:fa49:5041:a200:c011:d62d:2c14:89f2)
[11:11:17] *** Quits: silasfox (~sbv@p200300cec7219d00ef0f653f23257d7e.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[11:11:34] *** Joins: silasfox (~sbv@p4fe8d6cb.dip0.t-ipconnect.de)
[11:11:37] *** Quits: lottaquestions_ (~nick@2607:fa49:5041:a200:9d2a:1a5d:fbd1:7e6b) (Ping timeout: 240 seconds)
[11:37:57] *** Joins: shka (~herr@109.231.0.226)
[12:19:33] *** Joins: rotateq (~user@p200300e78706a00050f72feb644e2401.dip0.t-ipconnect.de)
[13:01:15] <rotateq> I finally realized (myself) how much sense the :default-initargs option in DEFCLASS makes. So when a class inherits from another they can be readjusted there, and even more sense if for example two or more slots share the same possible initarg.
[13:23:14] <beach> Hello st_iron.
[13:24:19] <beach> rotateq: Yes, a subclass is a specialization, so the :DEFAULT-INITARGS can be used to reflect that such a specialization has a particular value for some of the initargs of the superclass. 
[13:36:10] <pjb> (defclass rectangle () ((height :initarg :height) (width :initarg :width)))   (defclass square (rectangle) () (:default-initargs :width 1 :height 1))
[13:41:01] *** Joins: Jing_ (~hedgehog@125.105.15.211)
[13:41:33] *** Joins: gko` (~user@2400:8902::f03c:91ff:fe70:e605)
[13:41:37] *** Quits: Rue (~rue@2001-b011-1000-11b6-9802-64fa-1e5c-3e4d.dynamic-ip6.hinet.net) (Ping timeout: 240 seconds)
[13:41:43] *** Joins: conjunctive_ (sid433686@id-433686.helmsley.irccloud.com)
[13:41:57] *** Quits: lottaquestions (~nick@2607:fa49:5041:a200:c011:d62d:2c14:89f2) (Ping timeout: 240 seconds)
[13:41:57] *** Quits: Jing (~hedgehog@240e:390:7c53:a7e1:1164:2854:8a6e:b4e3) (Ping timeout: 240 seconds)
[13:41:57] *** Quits: il (~il@user/f/x-7830992) (Ping timeout: 240 seconds)
[13:42:03] *** Joins: lottaquestions_ (~nick@2607:fa49:5041:a200:c011:d62d:2c14:89f2)
[13:42:17] *** Quits: conjunctive (sid433686@id-433686.helmsley.irccloud.com) (Ping timeout: 240 seconds)
[13:42:17] *** Quits: cyberbanjo (mksybr@tilde.team) (Ping timeout: 240 seconds)
[13:42:17] *** Quits: GreaseMonkey (greaser@user/greasemonkey) (Ping timeout: 240 seconds)
[13:42:18] *** conjunctive_ is now known as conjunctive
[13:42:37] *** Quits: gko (~user@user/gko) (Ping timeout: 240 seconds)
[13:43:04] *** Joins: greaser|q (greaser@antihype.space)
[13:44:05] *** Joins: Jing (~hedgehog@125.105.15.211)
[13:44:23] *** Joins: il (~il@user/f/x-7830992)
[13:45:35] <rotateq> And one doesn't have to rewrite the slots.
[13:45:39] *** Quits: Jing_ (~hedgehog@125.105.15.211) (Ping timeout: 256 seconds)
[13:45:39] *** Quits: tewi (~tewi@apn-95-41-191-10.dynamic.gprs.plus.pl) (Ping timeout: 256 seconds)
[13:46:00] *** Joins: tewi (~tewi@apn-95-41-191-10.dynamic.gprs.plus.pl)
[13:50:02] <beach> You may not even be allowed to rewrite slots.  Imagine the superclass in a library, so that all you have is some initargs and some accessors.  Whether there are slots or not is internal to the library.  So when you define a subclass, you can not assume that there are any slots.
[13:51:22] <beach> Even if it is not in a library, by not assuming any slots, your code is more maintainable, because you can then change the implementation of the superclass without changing the subclasses.
[13:51:23] <rotateq> Right, good point.
[13:55:11] *** Joins: cyberbanjo (mksybr@tilde.team)
[14:02:54] *** Joins: Harag (~user@105.243.9.173)
[14:03:02] <Harag> How do a rename a slot of a class when there are objects of that type already without loosing the values in that slot?
[14:12:39] *** Quits: Jing (~hedgehog@125.105.15.211) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[14:15:11] *** Quits: antoszka (sid528518@id-528518.uxbridge.irccloud.com) (Ping timeout: 250 seconds)
[14:15:37] *** Quits: dbotton (sid492350@id-492350.lymington.irccloud.com) (Ping timeout: 250 seconds)
[14:15:50] *** Joins: antoszka (sid528518@id-528518.uxbridge.irccloud.com)
[14:16:16] *** Joins: dbotton (sid492350@lymington.irccloud.com)
[14:16:55] *** Quits: Duuqnd (~duuqnd@2001:470:69fc:105::e9c0) (Ping timeout: 250 seconds)
[14:16:55] *** Quits: Riviera (Riviera@user/riviera) (Ping timeout: 250 seconds)
[14:17:21] *** Quits: CodeBitCookie[m] (~code-bit-@2001:470:69fc:105::a2f) (Ping timeout: 250 seconds)
[14:27:31] <pjb> Harag: defining a update-instance-for-redefined-class method; the default already performs some updates.
[14:29:16] *** Joins: Riviera (Riviera@user/riviera)
[14:34:56] *** Joins: Duuqnd (~duuqnd@2001:470:69fc:105::e9c0)
[14:36:39] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 256 seconds)
[14:38:17] *** Joins: aeth (~aeth@user/aeth)
[14:38:22] *** Joins: CodeBitCookie[m] (~code-bit-@2001:470:69fc:105::a2f)
[14:40:05] *** Joins: Jing (~hedgehog@240e:390:7c53:a7e1:4458:b22e:b9a7:2cea)
[14:43:32] *** Joins: seok (~Seok@n114-73-75-18.bla3.nsw.optusnet.com.au)
[14:43:43] <seok> what is the format directive for downcase characters ?
[14:43:52] <seok> to lowercase symbols
[14:44:50] <seok> found it its ~(
[14:44:54] <seok> ~( ~)
[14:44:57] <seok> sorry : )
[14:45:26] <rotateq> No problem seok, FORMAT is a fairly complex function. :)
[14:45:57] <seok> yes there are too many directives I don't know yet
[14:56:14] <rotateq> same goes for me. and iirc SICL will have an also extensible FORMAT
[14:58:02] *** Quits: shka (~herr@109.231.0.226) (Ping timeout: 268 seconds)
[15:03:36] *** Quits: EdLangley[m] (~edwlanmed@2001:470:69fc:105::7a0b) (Quit: Bridge terminating on SIGTERM)
[15:03:38] *** Quits: Gnuxie (~gnuxie@user/gnuxie) (Quit: Bridge terminating on SIGTERM)
[15:03:39] *** Quits: sepanko (~sepanko@user/sepanko) (Quit: Bridge terminating on SIGTERM)
[15:03:41] *** Quits: Duuqnd (~duuqnd@2001:470:69fc:105::e9c0) (Quit: Bridge terminating on SIGTERM)
[15:03:41] *** Quits: CodeBitCookie[m] (~code-bit-@2001:470:69fc:105::a2f) (Quit: Bridge terminating on SIGTERM)
[15:08:55] <Harag> pjb: Thank you!
[15:11:39] *** Joins: Duuqnd (~duuqnd@2001:470:69fc:105::e9c0)
[15:14:57] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 240 seconds)
[15:17:12] *** Joins: aeth (~aeth@user/aeth)
[15:17:43] *** Quits: Duuqnd (~duuqnd@2001:470:69fc:105::e9c0) (Remote host closed the connection)
[15:30:59] *** Quits: Harag (~user@105.243.9.173) (Remote host closed the connection)
[15:31:17] *** Joins: Duuqnd (~duuqnd@2001:470:69fc:105::e9c0)
[15:32:43] *** Quits: Duuqnd (~duuqnd@2001:470:69fc:105::e9c0) (Remote host closed the connection)
[15:38:46] *** Joins: Duuqnd (~duuqnd@2001:470:69fc:105::e9c0)
[15:51:34] *** Joins: Rue (~rue@2001-b011-1000-11b6-9802-64fa-1e5c-3e4d.dynamic-ip6.hinet.net)
[15:54:34] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca)
[15:58:21] *** Joins: random-nick (~random-ni@87.116.181.150)
[16:06:06] *** Quits: Duuqnd (~duuqnd@2001:470:69fc:105::e9c0) (Quit: Client limit exceeded: 20000)
[16:08:40] *** Quits: occ (~occ@user/occ) (Ping timeout: 256 seconds)
[16:13:20] *** Joins: Gnuxie (~gnuxie@user/gnuxie)
[16:13:20] *** Joins: sepanko (~sepanko@user/sepanko)
[16:13:20] *** Joins: EdLangley[m] (~edwlanmed@2001:470:69fc:105::7a0b)
[16:13:32] *** Joins: CodeBitCookie[m] (~code-bit-@2001:470:69fc:105::a2f)
[16:17:17] *** Quits: EdLangley[m] (~edwlanmed@2001:470:69fc:105::7a0b) (Quit: Client limit exceeded: 20000)
[16:25:11] *** Joins: occ (~occ@user/occ)
[16:28:18] *** Joins: Bike (~Bike@71.69.170.70)
[16:40:18] *** Joins: domovod (~domovod@176.196.122.197)
[16:49:01] *** Quits: ahc (~ahc@121.98.229.241) (Quit: Client closed)
[17:17:22] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca) (Remote host closed the connection)
[17:18:05] *** Quits: Bike (~Bike@71.69.170.70) (Quit: Connection closed)
[17:26:17] *** Joins: treflip (~user@user/treflip)
[17:32:08] *** Quits: gko` (~user@2400:8902::f03c:91ff:fe70:e605) (Changing host)
[17:32:08] *** Joins: gko` (~user@user/gko)
[17:43:11] *** Quits: dickbar__ (~dickbaren@86-90-132-28.fixed.kpn.net) ()
[17:55:27] *** Joins: Josh_2 (~user@37.25.47.130)
[18:16:10] *** Quits: silasfox (~sbv@p4fe8d6cb.dip0.t-ipconnect.de) (Ping timeout: 256 seconds)
[18:27:56] *** Quits: st_iron (uid370243@id-370243.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[18:39:55] *** Quits: il (~il@user/f/x-7830992) (Quit: tc)
[18:40:42] *** Joins: f^ (~il@user/f/x-7830992)
[18:40:48] *** f^ is now known as il
[18:40:57] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca)
[18:46:55] *** Quits: Josh_2 (~user@37.25.47.130) (Remote host closed the connection)
[18:47:08] *** Joins: Josh_2 (~user@37.25.47.130)
[18:50:37] *** Quits: Josh_2 (~user@37.25.47.130) (Remote host closed the connection)
[18:50:50] *** Joins: Josh_2 (~user@37.25.47.130)
[19:05:45] *** Quits: Jing (~hedgehog@240e:390:7c53:a7e1:4458:b22e:b9a7:2cea) (Quit: Textual IRC Client: www.textualapp.com)
[19:30:24] *** Joins: Bike (~Glossina@71.69.170.70)
[19:40:40] *** Joins: jealousmonk (~user@user/jealousmonk)
[20:05:58] *** Joins: shka (~herr@109.231.0.226)
[20:06:40] *** Quits: domovod (~domovod@176.196.122.197) (Ping timeout: 256 seconds)
[20:11:13] *** Joins: lisp123 (~lisp123@5.30.23.247)
[20:29:11] *** Joins: st_iron (uid370243@id-370243.uxbridge.irccloud.com)
[20:33:50] *** Joins: Oladon (~olad@98.43.81.226)
[20:49:09] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[21:01:42] *** Quits: Rue (~rue@2001-b011-1000-11b6-9802-64fa-1e5c-3e4d.dynamic-ip6.hinet.net) (Quit: WeeChat 3.4)
[21:01:58] *** Joins: Rue (~rue@2001-b011-1000-11b6-9802-64fa-1e5c-3e4d.dynamic-ip6.hinet.net)
[21:04:01] *** Joins: silasfox (~sbv@p200300cec7219d00ef0f653f23257d7e.dip0.t-ipconnect.de)
[21:05:15] *** Joins: lisp123 (~lisp123@5.30.23.247)
[21:10:08] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 256 seconds)
[21:24:37] *** Quits: Rue (~rue@2001-b011-1000-11b6-9802-64fa-1e5c-3e4d.dynamic-ip6.hinet.net) (Quit: WeeChat 3.4)
[21:46:18] *** Quits: silasfox (~sbv@p200300cec7219d00ef0f653f23257d7e.dip0.t-ipconnect.de) (Ping timeout: 260 seconds)
[22:23:07] *** Quits: treflip (~user@user/treflip) (Quit: good night!)
[22:27:12] *** Joins: lisp123 (~lisp123@5.30.23.247)
[22:31:31] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 256 seconds)
[22:36:08] *** Quits: pjb (~pjb@user/pjb) (Ping timeout: 250 seconds)
[22:37:03] *** Joins: pjb (~pjb@user/pjb)
[22:44:23] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[22:54:24] *** Quits: tewi (~tewi@apn-95-41-191-10.dynamic.gprs.plus.pl) (Ping timeout: 256 seconds)
[23:05:58] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[23:13:02] *** Quits: greaser|q (greaser@antihype.space) (Changing host)
[23:13:02] *** Joins: greaser|q (greaser@user/greasemonkey)
[23:13:05] *** greaser|q is now known as GreaseMonkey
[23:29:00] *** Quits: st_iron (uid370243@id-370243.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[23:34:35] *** Quits: bremner (~bremner@notmuch/developer/bremner) (Remote host closed the connection)
[23:37:49] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 256 seconds)
[23:39:44] *** Joins: aeth (~aeth@user/aeth)
