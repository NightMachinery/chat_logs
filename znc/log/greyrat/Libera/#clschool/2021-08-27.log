[00:02:59] *** Joins: selwyn (~selwyn@user/selwyn)
[00:08:11] *** Quits: silasfox (~sbv@xdsl-78-35-202-189.nc.de) (Ping timeout: 250 seconds)
[00:15:53] *** Joins: silasfox (~sbv@xdsl-87-78-57-101.nc.de)
[00:16:05] *** Joins: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[00:19:01] *** Quits: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 250 seconds)
[00:30:29] *** Quits: tophullyte (tophullyte@gateway/vpn/protonvpn/tophullyte) (Quit: Leaving)
[00:32:27] *** Joins: lisp123 (~lisp123@45.86.202.65)
[00:34:17] *** Quits: silasfox (~sbv@xdsl-87-78-57-101.nc.de) (Ping timeout: 248 seconds)
[00:34:36] *** Quits: ec_ (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[00:36:06] *** Joins: silasfox (~sbv@xdsl-78-35-202-189.nc.de)
[00:40:02] *** Joins: ec_ (~ec@gateway/tor-sasl/ec)
[00:41:52] *** Quits: lisp123 (~lisp123@45.86.202.65) (Ping timeout: 250 seconds)
[00:49:27] *** Quits: silasfox (~sbv@xdsl-78-35-202-189.nc.de) (Ping timeout: 240 seconds)
[00:50:30] *** Quits: rdrg109 (~rdrg109@51.195.232.80) (Ping timeout: 276 seconds)
[00:52:40] *** Joins: rdrg109 (~rdrg109@51.195.232.80)
[00:54:50] *** Joins: silasfox (~sbv@xdsl-78-35-202-189.nc.de)
[01:09:10] *** Joins: lisp123 (~lisp123@45.86.202.65)
[01:13:18] *** Quits: lisp123 (~lisp123@45.86.202.65) (Read error: Connection reset by peer)
[01:33:10] *** Quits: silasfox (~sbv@xdsl-78-35-202-189.nc.de) (Ping timeout: 240 seconds)
[01:38:38] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[01:39:03] *** Joins: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[01:39:59] *** Joins: silasfox (~sbv@xdsl-78-35-202-189.nc.de)
[01:42:13] *** Quits: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 250 seconds)
[01:42:46] *** Joins: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[01:45:37] *** Quits: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 252 seconds)
[01:49:36] *** Joins: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[01:52:40] *** Quits: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 240 seconds)
[01:59:47] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[02:01:17] *** Quits: shka (~herr@109.231.62.239) (Ping timeout: 250 seconds)
[02:01:40] *** Quits: silasfox (~sbv@xdsl-78-35-202-189.nc.de) (Ping timeout: 240 seconds)
[02:03:06] *** Joins: tophullyte (tophullyte@gateway/vpn/protonvpn/tophullyte)
[02:23:51] *** Joins: silasfox (~sbv@xdsl-78-35-202-189.nc.de)
[02:47:05] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[02:57:30] *** Quits: makomo (~makomo@user/makomo) (Ping timeout: 250 seconds)
[03:26:24] *** Quits: ec_ (~ec@gateway/tor-sasl/ec) (Quit: ec_)
[03:32:17] *** Quits: random-nick (~random-ni@87.116.165.220) (Ping timeout: 250 seconds)
[04:40:24] *** Joins: lisp123 (~lisp123@45.86.202.65)
[05:08:40] *** Quits: lisp123 (~lisp123@45.86.202.65) (Ping timeout: 240 seconds)
[05:35:05] *** Quits: silasfox (~sbv@xdsl-78-35-202-189.nc.de) (Ping timeout: 248 seconds)
[06:01:03] *** Joins: silasfox (~sbv@xdsl-78-35-202-189.nc.de)
[06:11:19] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 250 seconds)
[06:52:19] *** Joins: Oladon (~olad@98.43.81.226)
[07:25:25] *** Quits: sts-q (~sts-q@91.200.108.175) (Ping timeout: 250 seconds)
[07:38:33] *** Joins: lisp123 (~lisp123@45.86.202.65)
[07:39:22] *** Joins: sts-q (~sts-q@91.200.108.235)
[07:42:47] *** Quits: Josh_2 (~user@37.25.47.130) (Remote host closed the connection)
[07:42:47] *** Quits: lisp123 (~lisp123@45.86.202.65) (Ping timeout: 240 seconds)
[08:07:33] *** Joins: lisp123 (~lisp123@45.86.202.65)
[08:09:54] *** Quits: lisp123 (~lisp123@45.86.202.65) (Client Quit)
[08:24:20] *** Joins: ln43 (~ln43@user/ln43)
[08:25:27] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Read error: Connection reset by peer)
[08:26:48] <ln43> Hia all, which is the preferred way to see epub documents inside emacs?
[08:31:10] *** Quits: silasfox (~sbv@xdsl-78-35-202-189.nc.de) (Ping timeout: 240 seconds)
[09:00:29] *** Joins: lisp123 (~lisp123@5.30.23.247)
[09:05:47] *** Quits: mfiano (~mfiano@li1282-157.members.linode.com) (Ping timeout: 240 seconds)
[09:09:37] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[09:17:02] *** Joins: silasfox (~sbv@xdsl-87-78-57-101.nc.de)
[09:22:09] *** Joins: mfiano (~mfiano@li1282-157.members.linode.com)
[09:23:17] *** Quits: silasfox (~sbv@xdsl-87-78-57-101.nc.de) (Ping timeout: 250 seconds)
[09:37:44] *** Quits: mala (~mala@user/malaclyps) (Read error: Connection reset by peer)
[09:38:07] *** Joins: mala (~mala@user/malaclyps)
[09:44:33] *** Joins: silasfox (~sbv@xdsl-78-35-202-189.nc.de)
[10:12:10] *** Quits: silasfox (~sbv@xdsl-78-35-202-189.nc.de) (Ping timeout: 252 seconds)
[10:12:26] *** Joins: silasfox (~sbv@xdsl-78-35-202-189.nc.de)
[10:53:59] *** Joins: shka (~herr@109.231.62.239)
[11:14:20] *** Joins: cranium (~cranium@user/cranium)
[11:27:52] *** Quits: vats (~vats@180.149.226.8) (Remote host closed the connection)
[11:31:10] *** Quits: silasfox (~sbv@xdsl-78-35-202-189.nc.de) (Ping timeout: 240 seconds)
[11:33:16] *** Joins: silasfox (~sbv@xdsl-87-78-57-101.nc.de)
[11:34:24] *** Quits: silasfox (~sbv@xdsl-87-78-57-101.nc.de) (Client Quit)
[11:42:26] *** Quits: ln43 (~ln43@user/ln43) (Quit: Connection closed)
[11:51:05] *** Quits: tophullyte (tophullyte@gateway/vpn/protonvpn/tophullyte) (Ping timeout: 248 seconds)
[12:04:25] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[12:04:49] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Remote host closed the connection)
[12:05:12] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[12:35:28] *** Joins: hendursa1 (~weechat@user/hendursaga)
[12:39:21] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 276 seconds)
[13:02:53] *** Joins: rain3 (~rain3___@79.115.250.43)
[13:10:00] *** Joins: st_iron (uid370243@id-370243.highgate.irccloud.com)
[13:10:47] <st_iron> good morning
[13:13:13] <rain3> good morning
[13:14:18] <beach> Hello st_iron.  Hello rain3.
[13:15:18] <lotuseater> Hi there from me too.
[13:15:55] <lotuseater> rain3: I saw your nick in the #apl channel. :)
[13:15:56] <st_iron> hello hello :)
[13:16:32] <lotuseater> How are your parentheses doing st_iron?
[13:17:27] <st_iron> my parentheses are stagnant nowadays, i'm always snowed under with different things
[13:17:31] <st_iron> what about you?
[13:18:27] <rain3> lotuseater https://scottlocklin.wordpress.com/2013/07/28/ruins-of-forgotten-empires-apl-languages/
[13:20:10] <lotuseater> Oh this and that comes by with time. I remembered this night how useful UPDATE-INSTANCE-FOR-DIFFERENT-CLASS and and providing :ALLOCATION :CLASS in a class slot can be.
[13:20:29] <lotuseater> rain3: Thanks, interesting title.
[13:21:08] <lotuseater> Haha this Iverson picture "talk to the hand".
[13:32:06] <lotuseater> Wow I didn't know the license cost for a K system is $100k.
[13:40:48] *** Joins: selwyn (~selwyn@user/selwyn)
[13:52:55] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Remote host closed the connection)
[13:56:04] *** Quits: selwyn (~selwyn@user/selwyn) (Remote host closed the connection)
[13:56:29] *** Joins: selwyn (~selwyn@user/selwyn)
[14:45:25] *** Quits: hendursa1 (~weechat@user/hendursaga) (Remote host closed the connection)
[14:45:48] *** Joins: hendursa1 (~weechat@user/hendursaga)
[15:01:24] *** Joins: ln43 (~ln43@user/ln43)
[15:07:14] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[15:09:38] *** Joins: makomo (~makomo@user/makomo)
[15:14:43] *** Joins: random-nick (~random-ni@87.116.182.72)
[15:48:34] *** Joins: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[15:51:33] *** Quits: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 250 seconds)
[15:53:46] *** Joins: lisp123_ (~lisp123@45.86.202.23)
[15:57:01] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 252 seconds)
[16:12:25] *** Quits: lisp123_ (~lisp123@45.86.202.23) (Ping timeout: 252 seconds)
[16:39:05] *** Joins: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[16:42:07] *** Quits: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 252 seconds)
[16:48:25] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[17:29:38] *** Joins: lisp123 (~lisp123@5.30.23.247)
[17:31:42] <lisp123> Can I have multiple Catch & Throw with the same tag?
[17:31:56] <lisp123> as long as they don't overlap
[17:32:32] <lisp123> (for example I have own catch/throw in the calling function, but the throw only occurs if something is true. If something is false, the called function is called, and that also has a catch/throw
[17:33:58] *** Quits: derelict (~derelict@user/derelict) (Quit: WeeChat 3.2)
[17:34:51] *** Joins: selwyn (~selwyn@user/selwyn)
[17:42:02] <lisp123> Seems like it works: "The throw special form transfers control to a matching catch construct. The tag is evaluated first to produce an object called the throw tag; then the result form is evaluated, and its results are saved (if the result form produces multiple values, then all the values are saved). The most recent outstanding catch whose tag matches the throw tag is exited; the saved results are returned as the value(s) of the catch. A catc
[17:42:02] <lisp123> h matches only if the catch tag is eq to the throw tag."
[17:42:53] <beach> Yes, it's the innermost catch that is used then.
[17:45:18] <lisp123> beach: Thanks :)
[17:45:26] <beach> Pleasure.
[17:49:48] *** Quits: st_iron (uid370243@id-370243.highgate.irccloud.com) (Quit: Connection closed for inactivity)
[17:51:53] <pjb> lisp123: catch is a dynamic concept. block is a lexical concept.
[17:52:37] <pjb> lisp123: you can have mutliple catch using the same tag object. Both lexically and dynamically.  The "closest" in time is used.
[17:53:05] <lisp123> pjb: Thanks :)
[17:53:16] <pjb> (block done (catch 'foo (return-from done (catch 'foo (throw 'foo 42))) 33)) #| --> 42 |# 
[17:53:57] <lisp123> I fear I am writing too much spaghetti / non functional code these days
[17:54:03] <pjb> (defun cfoo (fun) (list 'cfoo (catch 'foo (funcall fun))))   (catch 'foo (cfoo (lambda () (throw 'foo 33)))) #| --> (cfoo 33) |# 
[17:54:15] <lisp123> Its alot easier to cheat and use dynamic variables // non-local exits
[17:54:16] <pjb> lisp123: the spaghetti can be unknotted with macros.
[17:55:03] <lisp123> I'm very slowly entering the world of Macros, maybe it will take 1 more year to get into it
[17:55:04] <pjb> lisp123: usually you will use block/return-from;  You'd use catch/throw only when you need to get outside of the current lexical scope.
[17:55:23] <pjb> lisp123: Casting Spels in Lisp  Conrad Barski, M.D.  http://www.lisperati.com/casting.html
[17:55:25] <lisp123> pjb: Thanks, let me change that actually
[17:55:50] <lisp123> because they are all lexical, I was just used to catch/throw terms
[17:56:33] <lisp123> pjb: Great link
[17:56:55] <lisp123> So for example, what I am doing now, is having 5 - 8 variables defined in a let* form
[17:57:14] <lisp123> and then a very simple form that is evaluated within the let*
[17:57:38] <ln43> yes, i was thinking to use ignore-errors to not end up inside the debugger for example
[17:58:13] <lisp123> I'm wondering if its better to do it like this (A (B (C (D (E *data*)))) vs. (let* ((D (E data)) (C (D D) ...)
[17:58:41] <lisp123> On the one hand, going down a let* is like a list of what is happening, on the other hand, the functions get bigger so likely to have more bugs / harder to test
[17:59:48] <lisp123> ln43: I used to do that alot, can't remember when I stopped. I think I started learnt my ways and figured out ways to avoid those errors to begin with.
[18:00:04] <lisp123> ln43: Remember that "a" can be used to exit the debugger in Slime
[18:00:17] <ln43> ok
[18:00:22] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[18:01:11] *** Quits: ln43 (~ln43@user/ln43) (Quit: Connection closed)
[18:03:24] <lisp123> Time to get the last bits of sunshine for the day, enjoy the rest of your day beach and pjb!
[18:03:33] * edgar-rft THROWs some spaghetti
[18:12:45] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Quit: ERC (IRC client for Emacs 27.2))
[18:20:21] <rdrg109> [Q] I know that I can exit a function with (return-from NAME-OF-THE-FUNCTION VALUE). I don't like having to type the name of the function because if the name of the function changes, then I would have to change all return-from. Is there a way to avoid doing that?
[18:21:00] <beach> (defun blabla (...) (block nil ... (return <values>)))
[18:21:24] <beach> Or (defun blabla (...) (block my-choice ... (return-from my-choice <values>)))
[18:21:40] <beach> Then you are independent of the function name.
[18:24:30] <rdrg109> Thanks! Which one you have noticed is the most commonly used in Common Lisp programs? (A) (return-from NAME-OF-THE-FUNCTION ...) (B) (block nil ...) (C) (block my-choice ...)?
[18:25:19] <beach> A.  Function names don't change often, and RETURNing is not common.
[18:26:20] *** Joins: Oladon (~olad@98.43.81.226)
[18:26:50] <rdrg109> Thanks!
[18:26:54] <beach> If functions are small, then the nesting depth is small and RETURNing is unnecessary because you just determine the return value in an IF or a COND.
[18:27:43] <beach> In fact, you can argue that RETURN should be used only exceptionally, like in side a loop where you found the overall answer.
[18:28:43] <beach> You should avoid stuff like (defun ff (...) (when ... (return-from ff ...)) (when ... (return-from ff ...)) (unless ... (return-from ff ...)))
[18:28:50] <beach> In favor of a COND.
[18:31:30] <beach> Does that makes sense to you?
[18:33:02] <rdrg109> Yes! Thanks!
[18:35:29] <lotuseater> About two years ago I was on a small local hacker convention, someone yelled sometime "So why doesn't anybody tell me those Python lambdas return the produced values implicitely?!"
[18:41:31] <lotuseater> But this guy was a capable hacker indeed and nice, one morning he bought some donuts :3
[18:49:20] <beach> Oh, I didn't realize that rdrg109 might not know that about Common Lisp.  
[18:50:49] <beach> rdrg109: [just to make sure] A call to a function returns the values produced by the last form in the body of the function.  This is called "implicit progn".
[18:51:05] <lotuseater> beach: Do you mean the implicit returning of evaluated expressions?
[18:51:16] <beach> Yes.
[18:52:04] <edgar-rft> I agree with beach that finding an overall answer is an exception.
[18:52:30] <beach> I think all my cases have to do with looping.
[18:55:16] <lotuseater> (loop :named outer ... :do (loop :named inner ...))
[18:56:18] <lotuseater> using RETURN-FROM on named blocks is in my opinion way easier to reason about than in other langs with "break" or "continue".
[18:56:50] <edgar-rft> The overall answer might lie in a deeply nested loop, that's my impression sincever.
[18:57:20] <lotuseater> edgar-rft: Now we're again at DSP. :)
[18:58:23] <lotuseater> and who's used to it can use a (symbol-macrolet ((continue (return-from inner))) ...)
[19:04:52] *** Joins: derelict (~derelict@user/derelict)
[19:07:43] <lotuseater> beach: Yesterday I had a small discussion with some, I saw in one of his macros (defmacro new-macro (arg test &body body) ... (if ,test 'some-symbol ,body)) and I wanted to make clear that it wouldn't work in general, so it's important using (if ,test 'some-symbol (progn ,@body)) instead.
[19:08:28] <beach> Indeed.
[19:09:18] *** Joins: santiagopim (~user@90.166.58.152)
[19:11:41] <lotuseater> or when defining (defmacro when (test &body body) `(if ,test ,body)) and the body would always just have two forms, it would work, but not the way it should ^^
[19:12:04] <beach> Yeah, those are vicious bugs.
[19:15:28] <lotuseater> But I remember when I got in touch with ,@ vs , it took some time to get it and how/when (not) to use.
[19:16:11] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Remote host closed the connection)
[19:16:30] <beach> I can see that.
[19:18:27] <lotuseater> Hm how was it again about #, and ,. ? One of those were in CLtL1 iirc.
[19:20:04] <beach> I don't know, but ,. is in Common Lisp as I recall.
[19:20:38] <lotuseater> I should look in more depth of Steele's definition of a possible backquote readmacro in CLtL2 again, I'm not sure if it defines the readmacros for , and ,@ locally when called.
[19:21:09] <lotuseater> Ah okay, I think it was about load-time-value, but I don't know how to use this.
[19:26:07] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[19:33:13] *** Joins: thrig (~thrig@65.113.153.50)
[19:36:44] *** Quits: cranium (~cranium@user/cranium) (Quit: Leaving)
[19:46:32] *** Quits: hendursa1 (~weechat@user/hendursaga) (Quit: hendursa1)
[19:47:03] *** Joins: hendursaga (~weechat@user/hendursaga)
[20:03:14] *** Joins: lisp123_ (~lisp123@45.86.202.65)
[20:06:47] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 250 seconds)
[20:12:32] *** Quits: lisp123_ (~lisp123@45.86.202.65) (Remote host closed the connection)
[20:14:47] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[20:17:04] *** Joins: lisp123 (~lisp123@45.86.202.65)
[20:21:51] *** Quits: hendursaga (~weechat@user/hendursaga) (Remote host closed the connection)
[20:21:57] *** Quits: lisp123 (~lisp123@45.86.202.65) (Ping timeout: 250 seconds)
[20:22:18] *** Joins: hendursaga (~weechat@user/hendursaga)
[20:29:32] *** Joins: lisp123 (~lisp123@45.86.202.65)
[20:32:28] *** Joins: tyson2 (~user@cpea84e3fd00d93-cma84e3fd00d90.sdns.net.rogers.com)
[20:35:28] <pjb> lotuseater: load-time-value is similar to local static variables in C.
[20:36:05] *** Joins: lisp123_ (~lisp123@5.30.23.247)
[20:36:30] <pjb> (defun foo (x) (let ((persistent-value (load-time-value (cons nil nil)))) (rotatef (car persistent-value) (cdr persistent-value) x) x)) (list (foo 1) (foo 2) (foo 3) (foo 4)) #| --> (nil nil 1 2) |# 
[20:38:44] <pjb> lotuseater: indeed, (defmacro new-macro (arg test &body body) `(if ,test 'some-symbol ,body)) would work only if you called it as (new-macro a nil + 1 2) #| --> 3 |# 
[20:39:37] <pjb> lotuseater: one may want to write instead a macro that takes a single experssion: (defmacro new-macro (arg test expression) `(if ,test 'some-symbol ,expression)) then: (new-macro a nil (+ 1 2)) #| --> 3 |# 
[20:39:43] *** Quits: lisp123 (~lisp123@45.86.202.65) (Ping timeout: 252 seconds)
[20:53:53] *** Quits: shka (~herr@109.231.62.239) (Quit: Konversation terminated!)
[20:54:12] *** Joins: shka (~herr@109.231.62.239)
[21:11:05] *** Joins: rain3_ (~rain3_mob@2a02:2f09:d30b:1300:dda6:f79f:6454:8bff)
[21:25:55] *** Quits: tyson2 (~user@cpea84e3fd00d93-cma84e3fd00d90.sdns.net.rogers.com) (Ping timeout: 252 seconds)
[21:41:40] <White_Flame> are there any advantages to that use of load-time-value than just a (let ((persistent-value (cons nil nil))) (defun ...)) closure?
[21:42:06] *** Joins: fef (~thedawn@user/thedawn)
[21:42:24] <White_Flame> in terms of its staticness; since obv it does have utility in terms of load-time reevaluation
[21:43:44] *** Quits: pjb (~pjb@user/pjb) (Ping timeout: 250 seconds)
[21:43:49] *** Quits: rain3 (~rain3___@79.115.250.43) (Remote host closed the connection)
[21:44:03] *** Joins: rain3 (~rain3___@2a02:2f09:d30b:1300:514:bcc7:8202:1798)
[21:47:55] *** Quits: shka (~herr@109.231.62.239) (Ping timeout: 252 seconds)
[21:49:40] *** Joins: pjb (~pjb@user/pjb)
[21:49:42] *** Joins: shka (~herr@109.231.62.239)
[22:04:10] *** Quits: shka (~herr@109.231.62.239) (Quit: Konversation terminated!)
[22:06:19] *** Joins: tophullyte (tophullyte@gateway/vpn/protonvpn/tophullyte)
[22:12:07] *** Joins: shka (~herr@109.231.62.239)
[22:17:38] *** Quits: selwyn (~selwyn@user/selwyn) (Quit: Leaving)
[22:34:33] *** Joins: Oladon (~olad@98.43.81.226)
[22:54:10] *** Quits: thrig (~thrig@65.113.153.50) (Remote host closed the connection)
[23:07:33] *** Quits: fef (~thedawn@user/thedawn) (Remote host closed the connection)
[23:28:01] *** Quits: tophullyte (tophullyte@gateway/vpn/protonvpn/tophullyte) (Ping timeout: 252 seconds)
[23:43:57] *** Joins: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[23:44:23] *** Quits: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Read error: Connection reset by peer)
[23:44:42] *** Joins: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[23:46:43] *** Quits: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 252 seconds)
[23:47:16] *** Joins: selwyn (~selwyn@user/selwyn)
[23:56:27] *** Quits: rain3 (~rain3___@2a02:2f09:d30b:1300:514:bcc7:8202:1798) (Ping timeout: 240 seconds)
