[00:07:40] <mwnaylor> A couple days ago I was pondering a "lack" of a member function in Clojure. Then, yesterday, chimed in on a discussion of sets. Last night, it hit me. A Clojure set IS a member function. I'm trusting that ((set my-collection) my-target-value) is faster than my algorithm would be. Of course there is a cost for set creation, but that's probably optimized as well. Added bonus, If I use the set as a member function, I get future
[00:07:40] <mwnaylor> optmizations for free.
[00:09:55] <aphyr> Yeah! I think the other idiom for telling if an element is in a collection (without making it a set) is (seq (filter #{x} xs))
[00:10:36] <mwnaylor> I was thinking along the lines of C-h f member RET from elisp. Thinking back, is seem the (member ELT LIST) is a holdover from Lisps that did not have native sets and used lists for the same purpose.
[00:14:20] <mwnaylor> aphyr: Excellent example. Creating a single element set should be super fast. seq gave me a brief pause, until I remembered that (), nor [] {} #{}, are false.
[00:14:32] *** Joins: xsperry (~xs@user/xsperry)
[00:14:55] <aphyr> Yeah, single-element sets are fantastic, and seq... has this weird superpower of returning nil for empty seqs, so it works in boolean context all over the place
[00:16:07] <aphyr> Another favorite idiom I've been using a lot this year: (filter (comp #{:cat} :favorite-animal) people)
[00:16:25] <aphyr> finding all cat-lovers
[00:16:38] <mwnaylor> Minor spoiler: AoC 2021 has me using sets more often to keep track of where I have been processing data. If all that matters is whether or not a value exists in a collection and not when it entered the collection, set is the way to go.
[00:19:01] <mwnaylor> Hmm, I call #(comp #{‚Ä¶} %) an exclusion filter predicate. Would there be a better term for that idiom/pattern?
[00:19:19] <aphyr> It's including, not excluding--are you thinking of complement?
[00:20:05] <ridcully> comp is short for compose - not complement (that exists too)
[00:20:07] <mwnaylor> Yes, complement. Good catch. 
[00:23:37] <mwnaylor> For some reason, my brain mixes comp and complement. Seems like an extremely limited case of dyslexia.
[00:25:33] <aphyr> Happens to me too :)
[00:25:38] <mwnaylor> For (my) readability, I might prefer comp to actually be called compose. I guess Rich Hickey figured compose would be used more often than complement, and chose the shorter name for it.
[00:26:15] <aphyr> I wind up using comp *constantly*, in part because I try to limit the number of fn literals I put into my code--they're one of the things that slows down compile times
[00:27:35] *** Joins: selfsymmetric-mu (~matt@c-73-10-148-139.hsd1.nj.comcast.net)
[00:28:58] <mwnaylor> What if the literal has a limited use, like in a single function? Do you use the literal or define a new function before the one that is calling it? Asking because I'm not sure of preferred practice. I waver between the two options and would like input.
[00:29:55] <mwnaylor> FWIW, I'm a dislaced IT guy. I'm learning Clojure on my own; this channel is the best way for me to communicate with others using the language.
[00:33:10] <mwnaylor> I have to remember to assemble comp actual parameters in reverse order. A bit funky, since in my repl development I use the -> and ->> macros to reduce nesting and typing.
[00:34:43] <ridcully> and for transducers it works in "read order" (comp that is).  so watch out
[00:41:43] <mwnaylor> Re: comp, I've seen some (to me) odd behavior with the cider debugger. Maybe it's because I assign (comp ...) to a value, then use the value later in a call chain. (def new-fn (comp fn-a fn-b ‚Ä¶)) new-fn gets passed to another function to handle internal details. Sort of like map takes a function to handle the details of a more general abstract procss. If I want to get debugger to stop, I have to cider-debug-defun-at-point the (def
[00:41:43] <mwnaylor> new-fn ‚Ä¶) form ùò¢ùòßùòµùò¶ùò≥ doing the same to the called function (like fn-a).
[00:41:45] <aphyr> mwnaylor: Both defn and fn require the compiler to emit a class, so I try to minimize both where compile times are important
[00:42:59] <aphyr> e.g. instead of (map (fn [x] (+ x 1)) xs) I generally write (map (partial + 1) xs) (or, in this particular case, (map inc xs)
[00:43:40] <aphyr> This is a pathological behavior driven by the fact that I spent a good deal of my day waiting for Clojure to compile stuff, so I often do things that are less clear or less fast to execute in order to keep compile times down
[00:43:55] <mwnaylor> aphyr: I see that point. I guess at my level, I'm willing to sacrifice compile time for something that I can read more easily.
[00:44:04] <aphyr> Yeah, don't do as I do here, haha :-)
[00:47:19] <mwnaylor> aphyr: I guess if your are the only reader of your code and can quickly grok your intent when reviewing your older code, then that is an appropriate approach. I don't even like some of my own solutions for AoC 2021 because the functions get too big.
[00:47:55] <mwnaylor> s/your are/you are/
[00:48:04] <aphyr> Oh, I still do a lot of named and anonymous functions too--anywhere the intent wouldn't be clear I go for clarity.
[00:48:19] <aphyr> But for idiomatic or simple transformations, I'll prefer point-free style.
[00:52:27] <ridcully> comp, partial, juxt, ... are great to reuse existing things.  and once you are familiar, what they are doing, you even have an easier time to read your code
[00:54:15] <ridcully> because of seeing this #(...) thingy, you basically have to read to understand, what it does. it suggests, that "there was nothing around to make that easier, so pay attention what is happening here"
[00:58:22] <technomancy> huh; I just assumed `comp` ended up expanding to an equivalent to `fn`; no idea it compiled faster
[01:02:29] <mwnaylor> Where is the tip-over point for familiarity? I've dabbled with Clojure off and on. I'd seen juxt, didn't grok it. Recently started to understand. Before, I would have done (map #(% my-val) [fn-a fn-b fn-c ‚Ä¶]) vs ((juxt fn-a fn-b fn-c ‚Ä¶) my-val)
[01:03:32] <mwnaylor> Sorry for format. With two short forms, didn't thing pastebin would be needed. :-(
[01:03:49] <ridcully> one liners are fine
[01:04:11] <hiredman> fns, anonymous or otherwise compile to a class each (so a classfile when aot compiled), fns built using comp use the same class that is generated when comp is compiled
[01:05:15] <hiredman> the flip side is functions built using comp have the same stackframe refering to a line in clojure/core.clj somewhere which annoys people
[01:07:07] <mwnaylor> hiredman: Re: flip side. Does that tie into how cider debugger handles comp forms, and comp forms assigned to values? 
[01:07:20] <tatsumaru> technomancy: it's exactly what you said, a monopolist is explaining why competition doesn't make sense.
[01:07:56] <ridcully> mwnaylor: i think this is the tipping point - there are many little ones.  you use it more, you will learn more about core or what others use etc and you become better.
[01:11:13] <mwnaylor> ridcully: Thanks. Damned hard to learn things in isolation.
[01:12:10] <ridcully> is there an opposite to ^:dynamic?  i have added a function `***` to my aoc.utils and now i get warnings, that this better should be dynamic (because of the "ear muffs")
[01:13:04] *** Joins: matty_matt (~matt@135.129.244.71)
[01:16:31] <mwnaylor> In my limited experience, I think "ear muffs" may be associated with thread-safe local vars. Haven't used those in xxx.clj lource. All, feel free to jump on me if I have the wrong end of the stick.
[01:19:55] <ridcully> yeah you can easily bind them differently and the ear muffs are an convention.  but if you name anything *_* the compiler warns you, that you should make it explicitly ^:dynamic
[01:19:58] *** Quits: uncleyear (~ian@pppoe.178-66-158-210.dynamic.avangarddsl.ru) (Remote host closed the connection)
[01:20:38] *** Quits: euandreh (~euandreh@2804:14c:33:9fe5:80ee:faa6:7302:e610) (Ping timeout: 260 seconds)
[01:27:41] *** Quits: tatsumaru (~tatsumaru@78.83.244.47) (Quit: Leaving.)
[01:32:14] <mwnaylor> Does the Clojure compiler optimize identical subforms within the same scope?
[01:38:44] *** Quits: cmiles74 (~miles@068-184-030-013.res.spectrum.com) (Ping timeout: 265 seconds)
[01:39:39] <mwnaylor> My subform would be (map long-running-fn very-big-collection). Larger form: (if (test (map long-running-fn very-big-collection)) (process (map long-running-fn very-big-collection))) . Does the (map ‚Ä¶) form get evaluated twice? 
[01:40:21] <mwnaylor> Slap me if I should have used pastebin.
[01:43:10] *** Joins: atw` (~user@2601:5c2:c500:76b0::4f1b)
[01:43:37] *** Joins: euandreh (~euandreh@2804:14c:33:9fe5:9d95:c71:11e4:3e0f)
[01:43:41] *** atw` is now known as atw
[01:44:40] *** Joins: pflanze__ (~pflanze@5-168-208-80-pool.fiber.fcom.ch)
[01:45:11] *** Quits: pflanze_ (~pflanze@5-168-208-80-pool.fiber.fcom.ch) (Read error: Connection reset by peer)
[01:51:38] *** Quits: son0p (~ff@2800:484:1d81:b700:d40b:900:b387:320) (Ping timeout: 252 seconds)
[01:53:18] *** Quits: euandreh (~euandreh@2804:14c:33:9fe5:9d95:c71:11e4:3e0f) (Ping timeout: 260 seconds)
[01:53:31] <goodger> an heuristic: if your client doesn't break the code into two messages, you're okay
[02:01:24] *** Quits: nighcoder_ (~ciumbi@206.176.143.59) (Ping timeout: 240 seconds)
[02:03:41] *** Quits: schmudde (~schmudde@216.169.6.249) (Read error: Connection reset by peer)
[02:03:56] *** Joins: schmudde (~schmudde@216.169.6.249)
[02:13:41] *** Quits: seschwar (~seschwar@user/seschwar) (Quit: :wq)
[02:15:23] *** Joins: euandreh (~euandreh@2804:14c:33:9fe5:1e71:dc8c:d2fa:3d7e)
[02:20:21] *** Joins: nighcoder (~ciumbi@206.176.143.59)
[02:38:40] *** Quits: matty_matt (~matt@135.129.244.71) (Ping timeout: 265 seconds)
[02:39:03] *** Joins: matty_matt (~matt@135.129.244.71)
[02:46:49] *** Joins: poselyqualityles (~poselyqua@user/poselyqualityles)
[02:51:02] *** Quits: matty_matt (~matt@135.129.244.71) (Ping timeout: 240 seconds)
[02:52:05] *** Quits: poselyqualityles (~poselyqua@user/poselyqualityles) (Ping timeout: 250 seconds)
[02:53:03] *** Quits: atw (~user@2601:5c2:c500:76b0::4f1b) (Ping timeout: 252 seconds)
[03:30:03] *** Quits: nighcoder (~ciumbi@206.176.143.59) (*.net *.split)
[03:30:03] *** Quits: selfsymmetric-mu (~matt@c-73-10-148-139.hsd1.nj.comcast.net) (*.net *.split)
[03:30:03] *** Quits: zmt01 (~zmt00@user/zmt00) (*.net *.split)
[03:30:03] *** Quits: dfreeman (~dfreeman@user/dfreeman) (*.net *.split)
[03:30:03] *** Quits: samuelbernardo (~samuelber@nata01.lip.pt) (*.net *.split)
[03:30:03] *** Quits: mwnaylor (~user@2601:5ce:4300:5560::68b3) (*.net *.split)
[03:30:03] *** Quits: TonyStone (~TonyStone@2603-7080-8607-c36a-9cdb-69bc-753b-1e50.res6.spectrum.com) (*.net *.split)
[03:30:03] *** Quits: theruran_ (uid11305@id-11305.hampstead.irccloud.com) (*.net *.split)
[03:30:03] *** Quits: jespada (~jespada@87.74.33.157) (*.net *.split)
[03:30:03] *** Quits: chujev (~chujev@198.20.115.180) (*.net *.split)
[03:30:03] *** Quits: kipz (~kipz@home.kipz.org) (*.net *.split)
[03:30:04] *** Quits: turlando (~turlando@user/turlando) (*.net *.split)
[03:30:04] *** Quits: RedNifre (~michael@dslb-002-203-026-126.002.203.pools.vodafone-ip.de) (*.net *.split)
[03:30:04] *** Quits: opqdonut (opqdonut@pseudo.fixme.fi) (*.net *.split)
[03:30:04] *** Quits: runejuhl (~runejuhl@user/runejuhl) (*.net *.split)
[03:30:04] *** Quits: fuzzfox (~gizzard@saturn.whatbox.ca) (*.net *.split)
[03:30:04] *** Quits: dale (dale@user/dale) (*.net *.split)
[03:30:04] *** Quits: nackjicholson (e492d83292@2604:bf00:561:2000::1d8) (*.net *.split)
[03:30:04] *** Quits: sm2n (ae95cb1267@user/sm2n) (*.net *.split)
[03:30:04] *** Quits: axvr (757f658d76@2604:bf00:561:2000::e1) (*.net *.split)
[03:30:04] *** Quits: harryvederci (aca786de33@user/harryvederci) (*.net *.split)
[03:30:04] *** Quits: gendl (sid100083@id-100083.hampstead.irccloud.com) (*.net *.split)
[03:30:04] *** Quits: cacheyourdreams (~cache@user/cacheyourdreams) (*.net *.split)
[03:30:05] *** Quits: lobotomy (~lobotomy@static.213.19.216.95.clients.your-server.de) (*.net *.split)
[03:30:05] *** Quits: nivag (~gavin@103-76-144-176.ip.cis.gen.nz) (*.net *.split)
[03:30:05] *** Quits: res0nat0r (~Fletch@dia.whatbox.ca) (*.net *.split)
[03:30:05] *** Quits: ozzymcduff (~mathieu@81-234-151-21-no94.tbcn.telia.com) (*.net *.split)
[03:30:05] *** Quits: neirac (~neirac@pc-122-191-45-190.cm.vtr.net) (*.net *.split)
[03:30:05] *** Quits: paddymahoney (~paddymaho@cpe9050ca207f83-cm9050ca207f80.cpe.net.cable.rogers.com) (*.net *.split)
[03:30:06] *** Quits: golanv (~golanv@2001:470:69fc:105::54c) (*.net *.split)
[03:30:06] *** Quits: Ragnor (~Ragnor@user/ragnor) (*.net *.split)
[03:30:06] *** Quits: ihabunek1 (~ihabunek@bezdomni.net) (*.net *.split)
[03:30:06] *** Quits: laman1 (~laman@rego.ai) (*.net *.split)
[03:30:06] *** Quits: victor_ (sid208353@id-208353.tinside.irccloud.com) (*.net *.split)
[03:30:06] *** Quits: lunik1 (~lunik1@37.205.14.203) (*.net *.split)
[03:30:06] *** Quits: leah2 (~leah@vuxu.org) (*.net *.split)
[03:30:06] *** Quits: RendySurvage (~rendysurv@64.72.216.39) (*.net *.split)
[03:30:06] *** Quits: manicennui (uid349235@id-349235.tinside.irccloud.com) (*.net *.split)
[03:30:06] *** Quits: lazr (~lazr@45.76.248.123) (*.net *.split)
[03:30:06] *** Quits: unyu (~pyon@user/pyon) (*.net *.split)
[03:30:06] *** Quits: HDurer (~hdurer@104.132.45.86) (*.net *.split)
[03:30:14] *** Joins: chujev (~chujev@198.20.115.180)
[03:30:16] *** Joins: bailon (~gizzard@saturn.whatbox.ca)
[03:30:16] *** Joins: turlando (~turlando@93-42-250-112.ip89.fastwebnet.it)
[03:30:16] *** Joins: lobotomy (~lobotomy@static.213.19.216.95.clients.your-server.de)
[03:30:19] *** Joins: RedNifre (~michael@dslb-002-203-026-126.002.203.pools.vodafone-ip.de)
[03:30:21] *** Joins: Ragnor (~Ragnor@dslb-084-062-055-138.084.062.pools.vodafone-ip.de)
[03:30:25] *** Joins: harryvederci (aca786de33@user/harryvederci)
[03:30:27] *** Joins: nighcoder (~ciumbi@206.176.143.59)
[03:30:30] *** Joins: res0nat0r (~Fletch@dia.whatbox.ca)
[03:30:33] *** Joins: nivag (~gavin@103-76-144-176.ip.cis.gen.nz)
[03:30:35] *** Joins: runejuhl (~runejuhl@185.166.122.161)
[03:30:35] *** Joins: kipz (~kipz@home.kipz.org)
[03:30:38] *** Joins: opqdonut (~opqdonut@91.105.251.154)
[03:30:38] *** Joins: unyu (~pyon@2800:200:e840:42c7:c75:c5f:d434:a5f1)
[03:30:39] *** Quits: turlando (~turlando@93-42-250-112.ip89.fastwebnet.it) (Changing host)
[03:30:39] *** Joins: turlando (~turlando@user/turlando)
[03:30:40] *** Joins: HDurer (~hdurer@104.132.45.86)
[03:30:42] *** Quits: Ragnor (~Ragnor@dslb-084-062-055-138.084.062.pools.vodafone-ip.de) (Changing host)
[03:30:42] *** Joins: Ragnor (~Ragnor@user/ragnor)
[03:30:47] *** Joins: selfsymmetric-mu (~matt@c-73-10-148-139.hsd1.nj.comcast.net)
[03:30:47] *** Joins: laman1 (~laman@rego.ai)
[03:30:50] *** Joins: RendySurvage (~rendysurv@64.72.216.39)
[03:30:50] *** Joins: lazr (~lazr@45.76.248.123)
[03:30:53] *** Joins: nackjicholson (e492d83292@2604:bf00:561:2000::1d8)
[03:30:54] *** Joins: victor_ (sid208353@id-208353.tinside.irccloud.com)
[03:30:55] *** Joins: gendl (sid100083@id-100083.hampstead.irccloud.com)
[03:30:58] *** Joins: theruran_ (uid11305@2a03:5180:f:4::2c29)
[03:31:20] *** Joins: manicennui (uid349235@id-349235.tinside.irccloud.com)
[03:31:27] *** Quits: Colt (~Colt@user/colt) (Remote host closed the connection)
[03:31:49] *** unyu is now known as Guest6030
[03:32:13] *** Joins: leah2 (~leah@vuxu.org)
[03:32:22] *** Joins: neirac (~neirac@pc-122-191-45-190.cm.vtr.net)
[03:32:40] *** Joins: paddymahoney (~paddymaho@cpe9050ca207f83-cm9050ca207f80.cpe.net.cable.rogers.com)
[03:33:28] *** Joins: Colt (~Colt@user/colt)
[03:33:40] *** Joins: dfreeman (~dfreeman@user/dfreeman)
[03:34:18] *** Joins: sm2n (ae95cb1267@user/sm2n)
[03:34:22] *** Joins: axvr (757f658d76@2604:bf00:561:2000::e1)
[03:34:25] *** Joins: cacheyourdreams (~cache@user/cacheyourdreams)
[03:34:29] *** Joins: dale (dale@user/dale)
[03:35:19] *** Joins: ozzymcduff (~mathieu@81-234-151-21-no94.tbcn.telia.com)
[03:35:43] *** Joins: matty_matt (~matt@135.129.244.71)
[03:35:44] *** Joins: samuelbernardo (~samuelber@nata01.lip.pt)
[03:35:53] *** Joins: jespada (~jespada@87.74.33.157)
[03:36:17] *** Joins: ihabunek1 (~ihabunek@bezdomni.net)
[03:36:41] *** Quits: schmudde (~schmudde@216.169.6.249) (Quit: WeeChat 3.2)
[03:39:56] *** Joins: libertyprime (~libertypr@203.211.78.24)
[03:40:11] *** Quits: matty_matt (~matt@135.129.244.71) (Ping timeout: 250 seconds)
[03:41:13] *** Joins: golanv (~golanv@2001:470:69fc:105::54c)
[03:47:27] *** Joins: TonyStone (~TonyStone@2603-7080-8607-c36a-9cdb-69bc-753b-1e50.res6.spectrum.com)
[03:52:15] *** Joins: matty_matt (~matt@135.129.244.71)
[03:57:10] *** Quits: matty_matt (~matt@135.129.244.71) (Ping timeout: 268 seconds)
[03:58:55] *** Joins: atw (~user@2601:5c2:c500:76b0::d614)
[03:59:50] *** Joins: cmiles74 (~miles@068-184-030-013.res.spectrum.com)
[04:19:24] *** Joins: matty_matt (~matt@135.129.244.71)
[04:24:18] *** Quits: matty_matt (~matt@135.129.244.71) (Ping timeout: 268 seconds)
[04:33:01] *** Joins: matty_matt (~matt@135.129.244.71)
[04:41:05] *** Quits: libertyprime (~libertypr@203.211.78.24) (Quit: leaving)
[04:41:46] *** Quits: dadinn (~dadinn@cpc87065-finc18-2-0-cust67.4-2.cable.virginm.net) (Ping timeout: 260 seconds)
[05:07:25] *** Quits: cmiles74 (~miles@068-184-030-013.res.spectrum.com) (Ping timeout: 256 seconds)
[05:33:52] *** Joins: AlaskanEmily (~AlaskanEm@user/alaskanemily)
[05:55:17] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.3)
[06:03:30] *** Joins: zmt00 (~zmt00@user/zmt00)
[06:05:29] *** Quits: atw (~user@2601:5c2:c500:76b0::d614) (Remote host closed the connection)
[06:06:16] *** Joins: atw (~user@2601:5c2:c500:76b0::7458)
[06:07:40] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[06:14:22] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.3)
[06:21:30] *** Joins: schmudde (~schmudde@216.169.6.249)
[06:26:09] *** Joins: shiranaihito (~textual@123-192-192-149.dynamic.kbronet.com.tw)
[06:41:17] *** Quits: matty_matt (~matt@135.129.244.71) (Ping timeout: 240 seconds)
[06:48:04] *** Joins: mbuf (~Shakthi@223.178.108.131)
[06:49:52] *** Joins: matty_matt (~matt@135.129.244.71)
[07:01:57] *** Quits: atw (~user@2601:5c2:c500:76b0::7458) (Ping timeout: 240 seconds)
[07:08:17] *** Joins: atw (~user@2601:5c2:c500:76b0::b19e)
[08:19:09] <manicennui> https://pinchofyum.com/wp-content/uploads/Chicken-Pot-Pie-Soup-1-5.jpg
[08:20:29] *** Quits: matty_matt (~matt@135.129.244.71) (Ping timeout: 268 seconds)
[08:20:37] *** Quits: atw (~user@2601:5c2:c500:76b0::b19e) (Ping timeout: 240 seconds)
[08:27:06] <manicennui> Oops. Wrong channel.
[08:33:45] *** pflanze__ is now known as pflanze
[08:58:27] *** Quits: selfsymmetric-mu (~matt@c-73-10-148-139.hsd1.nj.comcast.net) (Ping timeout: 250 seconds)
[09:00:50] *** Joins: selfsymmetric-mu (~matt@c-73-10-148-139.hsd1.nj.comcast.net)
[09:17:40] *** Joins: matty_matt (~matt@135.129.244.71)
[09:22:25] *** Quits: matty_matt (~matt@135.129.244.71) (Ping timeout: 256 seconds)
[09:38:44] *** Joins: matty_matt (~matt@129.222.239.110)
[09:42:57] *** Quits: matty_matt (~matt@129.222.239.110) (Ping timeout: 240 seconds)
[09:48:22] *** Joins: uncleyear (~ian@pppoe.178-66-158-210.dynamic.avangarddsl.ru)
[10:18:11] *** Quits: schmudde (~schmudde@216.169.6.249) (Ping timeout: 252 seconds)
[10:32:24] *** Joins: struchu (~struchu@staticline-31-183-182-70.toya.net.pl)
[10:42:06] *** Quits: shiranaihito (~textual@123-192-192-149.dynamic.kbronet.com.tw) (Quit: My MacBook Air has gone to sleep. ZZZzzz‚Ä¶)
[10:52:33] *** Joins: shiranaihito (~textual@219.85.42.193)
[11:02:25] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[11:07:50] <Para> no soup for us? :(
[11:26:26] *** Quits: shiranaihito (~textual@219.85.42.193) (Quit: My MacBook Air has gone to sleep. ZZZzzz‚Ä¶)
[11:34:06] *** Joins: zakora (~zakora@2001:14ba:a0f4:3d00:21aa:b6aa:2bcc:1d84)
[11:35:23] *** Joins: shiranaihito (~textual@219.85.169.119)
[12:00:00] *** Quits: xulfer (uid452788@id-452788.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[12:06:39] *** Quits: shiranaihito (~textual@219.85.169.119) (Quit: My MacBook Air has gone to sleep. ZZZzzz‚Ä¶)
[12:13:45] *** Quits: AlaskanEmily (~AlaskanEm@user/alaskanemily) (Remote host closed the connection)
[12:13:53] <ridcully> NO SOUP FOR YOU! *scnr*
[12:18:07] *** Joins: shiranaihito (~textual@219.85.169.119)
[12:42:26] *** Quits: theruran_ (uid11305@2a03:5180:f:4::2c29) (Quit: Connection closed for inactivity)
[13:23:10] *** Quits: shiranaihito (~textual@219.85.169.119) (Quit: My MacBook Air has gone to sleep. ZZZzzz‚Ä¶)
[13:26:50] *** Quits: zakora (~zakora@2001:14ba:a0f4:3d00:21aa:b6aa:2bcc:1d84) (Ping timeout: 252 seconds)
[13:29:01] *** Joins: shiranaihito (~textual@219.85.169.119)
[13:36:44] *** Joins: Oshawott (~archenoth@2604:3d09:681:f00:8991:6d48:b770:3c11)
[13:36:57] *** Quits: tomku (~tomku@user/tomku) (Read error: Connection reset by peer)
[13:40:35] *** Quits: archenoth (~archenoth@2604:3d09:681:f00:9a0:b063:c52e:debb) (Ping timeout: 252 seconds)
[13:53:07] *** Joins: tomku (~tomku@user/tomku)
[14:01:14] *** Quits: shiranaihito (~textual@219.85.169.119) (Quit: My MacBook Air has gone to sleep. ZZZzzz‚Ä¶)
[14:02:59] *** Quits: leah2 (~leah@vuxu.org) (Quit: trotz alledem!)
[14:03:06] *** Joins: zakora (~zakora@dzd6d6yj1bhywfzv6-bxt-3.rev.dnainternet.fi)
[14:03:09] *** Joins: leah2 (~leah@vuxu.org)
[14:05:43] *** Quits: zakora (~zakora@dzd6d6yj1bhywfzv6-bxt-3.rev.dnainternet.fi) (Client Quit)
[14:14:17] *** Quits: manicennui (uid349235@id-349235.tinside.irccloud.com) (Quit: Connection closed for inactivity)
[14:38:34] *** Joins: Ilyu (~quassel@78.202.228.230)
[14:45:53] <rovanion> Is there a function that is the equivalent of `(first (filter pred seq))`. There should only ever be one item it seq that pred is true for.
[14:56:27] <andreyorst> I'm not sure whether this is leiningen or some other thing it's based on, but when I have a library that depends on another library, and in my app I depend on both libraries, which versions will be included in the resulting uberjar, if the versions are different
[14:57:17] <andreyorst> e.g. lib_a lepends on lib_b version 3, and my application depends on lib_a, and on lib_b version 2 (because I didn't knew that lib_a also depends on lib_b of a different version)
[14:57:56] *** Quits: Guest6030 (~pyon@2800:200:e840:42c7:c75:c5f:d434:a5f1) (Quit: WeeChat 3.3)
[14:58:21] *** Joins: unyu (~pyon@user/pyon)
[14:58:22] <andreyorst> this should potentially be a source of errors, so I assume I should get at least a warning during uberjar compilation, but it builds without any noise
[14:58:34] <andreyorst> any pointers on the topic?
[15:20:41] <ridcully> rovanion: there is flatland.useful.seq/find-first that sounds roughly like what you want.  but i am not sure about the second sentence.  do you want to make sure, that there is exactly one?
[15:21:45] <ridcully> andreyorst: if you use `lein deps :tree` you should see which one get picked.  iirc its the one with the higher number
[15:21:58] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.3)
[15:22:58] <rovanion> ridcully: I am sure, the database should have such a constraint (double checks).
[15:24:37] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[15:24:55] <andreyorst> ridcully: thanks for the command. For me it keeps the lower version, which is in primary project.clj
[15:25:39] <ridcully> to much build tools in my head.  makes sense it pins the explicit one then
[15:26:20] <andreyorst> e.g. it says [lib_b "2"] overrides [lib_a "1"] -> [lib_b "3"]
[15:26:22] <ridcully> i read your example like both are transitive
[15:27:01] <andreyorst> can this situation be made an error at build time?
[15:27:27] <andreyorst> or maybe it doesn't make sense
[15:28:44] <ridcully> you will see this alot in the wild
[15:29:05] <ridcully> in theory every clojars file might depend on clojure e.g.
[15:30:05] <ridcully> if you have contradicting version, you can attempt to exclude deps and cross your fingers
[15:37:47] *** Quits: wink (fhtagn@user/wink) (Ping timeout: 250 seconds)
[16:12:18] *** Joins: wink (fhtagn@user/wink)
[16:15:50] *** Joins: dadinn (~dadinn@cpc87065-finc18-2-0-cust67.4-2.cable.virginm.net)
[16:30:51] *** Joins: matty_matt (~matt@129.222.239.110)
[16:46:07] *** Quits: matty_matt (~matt@129.222.239.110) (Ping timeout: 256 seconds)
[17:00:05] *** Joins: shiranaihito (~textual@2001-b011-4000-1109-c1b7-14ca-a357-e570.dynamic-ip6.hinet.net)
[17:20:12] *** Joins: cmiles74 (~miles@068-184-030-013.res.spectrum.com)
[17:27:27] *** Joins: tatsumaru (~tatsumaru@78.83.244.47)
[17:28:09] <tatsumaru> have you ever met in your dev experience, people who initially didn't seem to have particular affinity for programming but over time they became really good?
[17:28:34] <tatsumaru> asking for a friend
[17:30:04] <tatsumaru> I read something on Richard Stallman's website where he basically says - try programming and if you don't feel like it's your thing immediately do something else.
[17:32:47] *** Joins: schmudde (~schmudde@216.169.6.249)
[17:33:42] *** Joins: shiranaihito_ (~textual@123-192-192-149.dynamic.kbronet.com.tw)
[17:35:14] *** Quits: xsperry (~xs@user/xsperry) (Remote host closed the connection)
[17:36:32] *** Quits: shiranaihito (~textual@2001-b011-4000-1109-c1b7-14ca-a357-e570.dynamic-ip6.hinet.net) (Ping timeout: 240 seconds)
[17:36:38] <andreyorst> tatsumaru: I think I can condider myself an example of that
[17:37:08] <ridcully> i'd say, that this field is full of career changers.  e.g. i know an ex-cop, that now is a very solid polyglot
[17:41:29] *** Joins: matty_matt (~matt@129.222.239.110)
[17:45:37] *** Quits: matty_matt (~matt@129.222.239.110) (Ping timeout: 240 seconds)
[17:46:08] *** Joins: matty_matt (~matt@129.222.239.110)
[17:50:37] *** Quits: matty_matt (~matt@129.222.239.110) (Ping timeout: 240 seconds)
[17:52:35] *** Joins: xsperry (~xs@user/xsperry)
[17:56:51] *** Quits: raek (~raek@2.67.243.131.mobile.tre.se) (Ping timeout: 256 seconds)
[17:57:54] <tatsumaru> I just want to reiterate that when I say "really good" I don't just mean being able to hold a job as a developer and consistently finish projects on time etc, but to be able to solve complicated technical challenges and think like an engineer.
[17:58:41] *** Joins: raek (~raek@2.67.169.254.mobile.tre.se)
[18:00:15] <selfsymmetric-mu> tatsumaru: There was a conceit at one point that introductory CS classes had a bimodal distribution, ostensibly between those who "got it" and those who didn't, which led to the implication (like Stallman's) that everyone should try it and then quickly give up if it's not your thing. The trouble is that I don't know if the original conceit is true.
[18:00:22] <ridcully> that is what i mean with "very solid"
[18:01:24] <selfsymmetric-mu> https://dl.acm.org/doi/abs/10.1145/3372161 "Although it has never been rigorously demonstrated, there is a common belief that grades in computer science courses are bimodal. We statistically analyzed 778 distributions of final course grades from a large research university and found that only 5.8% of the distributions passed tests of multimodality."
[18:01:45] <selfsymmetric-mu> cont. "We showed 53 CS professors a series of histograms displaying ambiguous distributions that we asked them to categorize. A random half of participants were primed to think about the fact that CS grades are commonly thought to be bimodal‚Ä¶"
[18:01:59] <selfsymmetric-mu> "These results suggest that bimodal grades are instructional folklore in CS‚Ä¶"
[18:03:05] <selfsymmetric-mu> So that bimodality conceit could be a myth. As for my own experience, I can't remember knowing anyone like that.
[18:19:23] *** Quits: cmiles74 (~miles@068-184-030-013.res.spectrum.com) (Quit: WeeChat 2.8)
[18:20:11] *** Quits: schmudde (~schmudde@216.169.6.249) (Ping timeout: 256 seconds)
[18:21:34] *** Joins: cmiles74 (~miles@068-184-030-013.res.spectrum.com)
[18:23:21] *** Quits: jespada (~jespada@87.74.33.157) (Quit: My MacBook has gone to sleep. ZZZzzz‚Ä¶)
[18:23:52] *** Joins: jespada (~jespada@87.74.33.157)
[18:29:04] <tatsumaru> I see, thanks guys
[18:32:19] *** Joins: matty_matt (~matt@129.222.239.110)
[18:43:37] *** Quits: matty_matt (~matt@129.222.239.110) (Ping timeout: 240 seconds)
[18:45:43] *** Quits: struchu (~struchu@staticline-31-183-182-70.toya.net.pl) (Quit: WeeChat 3.3)
[18:47:54] *** Joins: matty_matt (~matt@129.222.239.110)
[18:57:29] *** Joins: schmudde (~schmudde@2603:300a:1a01:cfe0:b860:f1d6:75c2:8580)
[19:05:23] *** Joins: mwnaylor (~user@2601:5ce:4300:5560::68b3)
[19:13:16] *** Quits: matty_matt (~matt@129.222.239.110) (Ping timeout: 245 seconds)
[19:19:26] *** Joins: seschwar (~seschwar@user/seschwar)
[19:32:20] *** Joins: matty_matt (~matt@129.222.239.110)
[19:36:19] *** Quits: nighcoder (~ciumbi@206.176.143.59) (Ping timeout: 250 seconds)
[19:42:12] *** Joins: manicennui (uid349235@id-349235.tinside.irccloud.com)
[19:42:29] *** Quits: matty_matt (~matt@129.222.239.110) (Ping timeout: 252 seconds)
[19:56:04] *** Joins: matty_matt (~matt@129.222.239.110)
[20:03:02] *** Quits: matty_matt (~matt@129.222.239.110) (Ping timeout: 240 seconds)
[20:05:54] *** Joins: xulfer (uid452788@id-452788.ilkley.irccloud.com)
[20:09:07] *** Joins: matty_matt (~matt@129.222.239.110)
[20:33:00] <mwnaylor> A couple days ago I was able to start a cider session without being in a project directory. Convenient for testing small code forms posted in this channel. Updated cider, no luck. Version: 1.2.0-snapshot. https://pastebin.com/FbB0Lckm
[20:34:13] *** Parts: mwnaylor (~user@2601:5ce:4300:5560::68b3) (ERC (IRC client for Emacs 26.3))
[20:34:49] *** Joins: mwnaylor (~user@2601:5ce:4300:5560::68b3)
[20:35:21] *** Quits: matty_matt (~matt@129.222.239.110) (Ping timeout: 245 seconds)
[20:36:42] *** Joins: matty_matt (~matt@129.222.239.110)
[20:42:08] <Para> mwnaylor: never use snapshot versions
[20:44:42] <tatsumaru> mwnaylor can't you use lein repl for this faster and easier?
[20:46:37] *** Quits: matty_matt (~matt@129.222.239.110) (Ping timeout: 240 seconds)
[20:47:33] *** Quits: Ilyu (~quassel@78.202.228.230) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[20:59:14] <mwnaylor> snapshot was what was in melpa. üò¶
[21:00:23] <Para> I don't know what that is, but don't use snapshots :)
[21:00:52] <mwnaylor> I can use lein repl, but I'm spoiled by cider. If that were running correctly, I can split my window and see erc and cider at the same time.
[21:02:54] <mwnaylor> lein repl is uglier and clumsier in eshell, shell, and ansi-term.
[21:05:13] <mwnaylor> melpa is a package repository for emacs.
[21:12:14] *** Joins: matty_matt (~matt@129.222.239.110)
[21:13:41] <ridcully> it complains about a missing wrapper?  is everything fine when you run your own `lein repl` (outside of a project should be fine) and connect to that?
[21:22:09] <mwnaylor> lein repl with cider-connect works perfectly. Not as convient as cider-jack-in, but easy enough. cider-connect is interactive and gives a list of lein servers running on local host.
[21:22:25] *** Quits: schmudde (~schmudde@2603:300a:1a01:cfe0:b860:f1d6:75c2:8580) (Ping timeout: 268 seconds)
[21:23:17] *** Quits: matty_matt (~matt@129.222.239.110) (Ping timeout: 240 seconds)
[21:27:48] <mwnaylor> Short term memory fuzzy at times; apologize if repeat question. reduce or apply, which is more in favor in the Clojure development world? Both render same results, so the two function seem interchangable. I tend to prefer reduce, because it reads better for me.
[21:32:49] *** Joins: matty_matt (~matt@129.222.239.110)
[21:33:30] <ridcully> apply most likely performs better
[21:34:31] <ridcully> because it does not build up steps.  e.g. prefer (apply + xs) over (reduce + 0 xs).  but also consider more optimzied versions.  e.g. (str/join xs) is most likely a good pick for joining strings
[21:34:45] *** Quits: tatsumaru (~tatsumaru@78.83.244.47) (Quit: Leaving.)
[21:36:57] *** Quits: matty_matt (~matt@129.222.239.110) (Ping timeout: 240 seconds)
[21:39:42] <mwnaylor> I've been usining variations of string joins for a long time. First discovered this in Python. str/join is probably optimized; (apply fn xs) would be a more general solution.
[21:44:56] <ridcully> str also uses a StrinBuilder.  so (apply str xs) might just work as fast as str/join.  but str/join for sure will win, if you want to join with a different string (over e.g. apply+interpose or something)
[21:45:15] <ridcully> but in the end: measure, if you have a bottleneck.  otherwise use what reads best
[21:48:11] <mwnaylor> I suspected that str/join was a wrapper to core Java.
[21:50:46] <Para> "In Clojure and ClojureScript strings are represented using the native platform implementation" https://clojuredocs.org/clojure.string
[21:51:37] <Para> and indeed a StringBuilder it is https://github.com/clojure/clojure/blob/master/src/clj/clojure/string.clj#L180-L194
[22:05:28] *** Joins: matty_matt (~matt@129.222.239.110)
[22:06:37] *** Quits: cmiles74 (~miles@068-184-030-013.res.spectrum.com) (Ping timeout: 240 seconds)
[22:10:31] *** Quits: matty_matt (~matt@129.222.239.110) (Ping timeout: 268 seconds)
[22:12:16] *** Quits: mbuf (~Shakthi@223.178.108.131) (Quit: Leaving)
[22:34:37] *** Joins: cmiles74 (~miles@068-184-030-013.res.spectrum.com)
[22:37:45] *** Joins: matty_matt (~matt@129.222.239.110)
[22:41:05] <mwnaylor> I did find this when seaching on the topic: For newbies looking at this answer,be careful, they are not the same:
[22:41:06] <mwnaylor> (apply hash-map [:a 5 :b 6])
[22:41:06] <mwnaylor> ;= {:a 5, :b 6}
[22:41:06] <mwnaylor> (reduce hash-map [:a 5 :b 6])
[22:41:09] <mwnaylor> ;= {{{:a 5} :b} 6}
[22:45:24] <ridcully> apply and reduce are not the same - they behave the same for some reducing functions
[22:46:24] *** Joins: schmudde (~schmudde@216.169.6.249)
[22:46:28] <ridcully> and this is where the performance comes in.  e.g. if you do (apply + [1 2 3]) this is effectively (+ 1 2 3), but with reduce it's (+ (+ 1 2) 3)
[22:50:29] *** Quits: matty_matt (~matt@129.222.239.110) (Ping timeout: 256 seconds)
[22:51:19] *** Joins: matty_matt (~matt@129.222.239.110)
[22:52:58] <mwnaylor> I need to keep in mind that reduce applies f multiple times, while apply flattens the sequence/collection then applies a multiple-arity function to the result.
[22:56:08] <ridcully> mwnaylor: nitpicking: not flatten (at least not like the function flatten in clojure) (flatten [[[1]]]) -> (1)
[22:59:28] <ridcully> apply calls the function once.  it passes all the items as arguments in one swoop.  reduce calls the function (roughly) as often as there are items
[23:03:17] <mwnaylor> ridcully: details matter. I wrap my head around apply by thinking in terms of flatten, that is if I could get flatten to do it's work for only one level of nesting.
[23:05:15] <mwnaylor> (flatten ['a 'b 'c {:a {:b 8}}])
[23:06:19] <mwnaylor> Wrong window, that was supposed to go to my cider session, not erc.
[23:06:45] <mwnaylor> (flatten [1 2 [3 4 [5 6 7]]])
[23:07:05] <mwnaylor> DOH, did it again!!!
[23:07:17] *** Quits: matty_matt (~matt@129.222.239.110) (Ping timeout: 240 seconds)
[23:07:34] <ridcully> also try (flatten {:a :b})
[23:08:09] <ridcully> flatten is a function you will usually stay clear
[23:08:37] <mwnaylor> That's a good one. I clearly don't understand flatten.
[23:10:02] <mwnaylor> If I ùòµùò©ùò™ùòØùò¨ I need something like flatten, I look to using something like mapcar, since it would probably be in a map context.
[23:10:06] <andreyorst> ridcully: (flatten {:a :b}) is () tho, (flatten (seq {:a :b})) is not
[23:12:41] <mwnaylor> For some reason, emojify-mode turns :b (colon lowercase b) into a Unicode smiley face.
[23:17:43] <ridcully> andreyorst: i can't remember, when i ever needed flatten.  i'd go so far and say, that most of the time, it's used, it is applied as a band-aid for some missing cat in a step before
[23:18:10] <ridcully> it might work as the lazy-persons tree-seq for some datatypes
[23:19:44] *** Joins: matty_matt (~matt@129.222.239.110)
[23:23:48] *** Joins: atw (~user@2601:5c2:c500:76b0::1440)
[23:23:57] *** Quits: matty_matt (~matt@129.222.239.110) (Ping timeout: 240 seconds)
[23:24:45] <mwnaylor> Since I've head a lein server up while doing my AoC puzzles, I'll cider-connect and switch to user namespace for trying code snippets posted here.
[23:25:36] <mwnaylor> Upon further review, I think that I will prefer apply to reduce.
[23:26:55] <Solid> apply is an interesting function
[23:27:06] <Solid> almost make me forgive clojure for not having currying :>
[23:27:34] <mwnaylor> Since we're discussing apply/reduce, is there a built-in Clojure equivalent to foldr? Reduce is essentially a foldl, or a fold that defaults to foldl.
[23:27:58] <ridcully> when you can use apply, use it.  reduce is an important tool tough and knowing how it works (even without the special things like `reduced`) will help you on many places
[23:28:14] <technomancy> Solid: apply and currying are roughly mutually exclusive, yeah
[23:28:19] <mwnaylor> Not exactly the same, but can't partial be used to do something like curry?
[23:28:19] <technomancy> well, varargs and currying anyway
[23:28:27] <selfsymmetric-mu> Speaking of this, what's the right way to query hiccup-style output from instaparse? If I have `[:quux [:foo 5] [:bar 6] [:baz 7]]`, do I do `(second (nth quux 3))` to get 7? That seems bad.
[23:28:45] <Solid> yes essensially; can't have variable arity functions without currying
[23:28:54] <Solid> and without the fomer apply seems much less useful (if at all)
[23:29:00] <Solid> s/without/with/
[23:29:32] <Solid> mwnaylor: sort of, but that adds a lot of noise
[23:29:46] <ridcully> selfsymmetric-mu: i assume, this is after the transform from instaparse?  if not, have look at that to get rid of stuff
[23:30:03] <ridcully> selfsymmetric-mu: if you don't need to "search" for things, you could use get-in
[23:30:16] <mwnaylor> I'm really only familiar with curry in my dabbling w/ Haskell. Are we using the term curry the same?
[23:30:23] <Solid> yes
[23:30:36] <ridcully> selfsymmetric-mu: (get-in [:quux [:foo 5] [:bar 6] [:baz 7]] [3 1])
[23:31:35] <ridcully> selfsymmetric-mu: are you doing day16 with instaparse?
[23:32:35] <selfsymmetric-mu> ridcully: I am indeed. This is during the transform phase.
[23:32:48] <mwnaylor> From Haskell, I understand curry to convert a function that takes n parameters and creates a chain of n functions that take 1 parameter.
[23:32:57] *** Quits: atw (~user@2601:5c2:c500:76b0::1440) (Ping timeout: 240 seconds)
[23:32:58] <selfsymmetric-mu> I just don't like using the indexes. Since the order doesn't matter, can I get instaparse to throw it away and use maps?
[23:33:32] <ridcully> selfsymmetric-mu: you would have to do that with transform yourself
[23:33:36] <ridcully> at least AFAIK
[23:34:21] <selfsymmetric-mu> ridcully: Okay, that sounds good! I think I need to do a couple of layers of parse-transform-parse to get this to work.
[23:34:24] <mwnaylor> Spoilers ;-). I have only completed 1-7,9-10.
[23:35:05] <selfsymmetric-mu> mwnaylor: Whoops, sorry. I'll put further ideas behind a pastebin.
[23:35:34] *** Joins: matty_matt (~matt@129.222.239.110)
[23:36:23] * Solid completed today with Haskell because it has the best parser combinator libraries
[23:36:31] <mwnaylor> selfsymmetric-mu: teasing. I really didn't get enough to make a difference.
[23:36:42] <Solid> I looked at instaparse but it seemed kind of awkward to use for this particular problem
[23:37:11] <ridcully> so did i.  there will be days for instaparse in the future for sure
[23:37:44] <mwnaylor> Solid: kudos for Haskell. As for me AoC is a venue to sharpen Clojure skills.
[23:38:18] <Solid> mwnaylor: same basically, Haskell was a bit of a cop-out because I know that language well ^^'
[23:38:37] <ridcully> fcyvg-ng was my parser ;)
[23:39:12] <mwnaylor> I'm in debt to Haskell because it introduced me to immutable data structures. That helped with my short stint as a paid Scala developer. And in my Clojure endeavors.
[23:41:40] <selfsymmetric-mu> Yeah, I'm also more familiar with Haskell's parsing libraries that with Clojure's. But I've made it to day 15 and I have my Clojure environment hot so I might as well try to finish it out.
[23:41:41] <Solid> ridcully: I'm feeling stupid; is that an acronym/joke I'm not getting? 
[23:42:10] <ridcully> Solid: rot13 to not spoiler it
[23:42:15] <Solid> aaaah
[23:42:32] <Solid> oh
[23:42:34] <mwnaylor> I could go back and review, but I got lost with Haskell monads and I/O. Clojure and Scala are strongly immutable, but don't require. Scala a tad more flexible allowing mutability.
[23:42:34] <Solid> oh god
[23:44:10] <Solid> I would encourage you to push through that, if you're still interesting in the language
[23:46:17] <mwnaylor> I have a feeling that Day 12 will get left to last, if I do it at all. Graph traversal was a weak spot for me in university comp-sci classes.
[23:47:02] *** Quits: matty_matt (~matt@129.222.239.110) (Ping timeout: 240 seconds)
[23:47:30] <mwnaylor> Day 08 also looks to fall outside my wheelhouse.
[23:47:51] <Solid> mwnaylor: challenge yourself!
[23:48:40] <ridcully> i failed day 15, part 2... all test are fine except the solution.  this is like the css not working in IE.  i could not be bothered to go back.
[23:49:14] <mwnaylor> My work sleep schedule has put me behind on the AoC fun, even with the puzzles that make sense at first read. Hard ones will wait to the end.
[23:51:31] <mwnaylor> ridcully: Same with me for Day 04. My code worked for the test sample, but blew up w/ NullPointerException on the real puzzle input. Because of a false asspumption on how the data would affect final product.
[23:54:37] *** Quits: cmiles74 (~miles@068-184-030-013.res.spectrum.com) (Ping timeout: 240 seconds)
