[00:28:40] *** Quits: vicecea (~vicecea@gateway/vpn/pia/vicecea) (Remote host closed the connection)
[00:29:09] *** Joins: vicecea (~vicecea@gateway/vpn/pia/vicecea)
[00:35:37] <FromDiscord> <Bubblie> In reply to @PMunch "@Bubblie, sure": Sorry I didnt see this my phone died PMunch
[00:36:12] <FromDiscord> <Bubblie> Also for @tting you should use my tag as well so Bubblie#8978 with an @ instead so ill see it
[00:36:39] <FromDiscord> <Bubblie> Let me grab the code I wrote real quick
[01:42:58] *** Joins: yiggityswaps (~yoyojambo@2806:108e:18:7861:551a:a8a6:1dca:688d)
[01:44:31] *** Quits: yoyojambo (~yoyojambo@2806:108e:18:7861:551a:a8a6:1dca:688d) (Ping timeout: 260 seconds)
[01:58:39] <FromDiscord> <Bubblie> Here is the code, sorry this took a while, I can send it on playground too
[01:58:58] <FromDiscord> <Bubblie> sent a code paste, see https://play.nim-lang.org/#ix=3Tym
[01:59:36] <FromDiscord> <Bubblie> Not sure if im doing this right
[02:00:09] <FromDiscord> <Bubblie> It specifically doesn’t work with this part
[02:01:26] <FromDiscord> <Bubblie> Im not sure if its because im using the way windows does paths
[02:01:54] <FromDiscord> <Bubblie> Also I made a pr for the windows install PMunch not sure if you saw
[02:01:57] *** Quits: yiggityswaps (~yoyojambo@2806:108e:18:7861:551a:a8a6:1dca:688d) (Ping timeout: 252 seconds)
[02:02:32] *** Joins: yoyojambo (~yoyojambo@2806:108e:18:7861:551a:a8a6:1dca:688d)
[02:13:35] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Ping timeout: 240 seconds)
[02:15:34] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[02:40:20] <FromDiscord> <Patitotective> how do i convert a cstring to a string?
[02:40:35] <FromDiscord> <Elegantbeef> `string(myCstring)` should work
[02:41:40] <FromDiscord> <Patitotective> sent a code paste, see https://play.nim-lang.org/#ix=3TyD
[02:46:51] <FromDiscord> <Elegantbeef> `$myCstring`
[02:47:35] *** Quits: pro (~pro@user/pro) (Ping timeout: 252 seconds)
[02:47:39] <FromDiscord> <Patitotective> thanks 🙃
[02:54:39] <FromDiscord> <hmmm> hi broskis I have a dumb algo question, basically I have a kind of dumb tree structure with parents each many children that can have more children. I have a couple of recursive procs that walk down the structure and harvest data and that was easy because I just put the results in a seq and be done with it. Now I need make a proc that copies the structure itself. I'm stumped because my recursive procs don't tack the different levels of nestin
[02:55:00] <FromDiscord> <Elegantbeef> `deepCopy`?
[02:55:04] <FromDiscord> <hmmm> wot
[02:55:40] <FromDiscord> <Elegantbeef> Deepcopy deeply copies an object
[02:55:49] <FromDiscord> <hmmm> ohrly?
[02:55:54] <FromDiscord> <hmmm> link to something
[02:56:11] <FromDiscord> <Elegantbeef> `myObj.deepCopy` doesnt really need a link now does it
[02:56:13] <FromDiscord> <hmmm> and what if I want to do it by hand
[02:56:56] <FromDiscord> <Elegantbeef> Iterate over the object duplicating the values from one to the other
[02:57:39] <FromDiscord> <hmmm> hmm
[02:57:41] <FromDiscord> <hmmm> that could work
[03:00:00] <FromDiscord> <Elegantbeef> I'd hope so, that's kinda how deep copy works
[03:04:27] <FromDiscord> <Patitotective> how can get the value behind `userData`? https://nimgl.dev/docs/imgui.html#ImGuiInputTextCallbackData
[03:04:52] <FromDiscord> <Elegantbeef> `cast[ptr MyType](myObj)` or similar
[03:06:30] <FromDiscord> <Elegantbeef> You either will need to allocate for that, use a variable you know will never go out of scope or use a reference
[03:06:39] <FromDiscord> <Elegantbeef> The latter requires doing `GcRef` and `GcUnref`
[03:07:37] <FromDiscord> <Patitotective> In reply to @Elegantbeef "You either will need": i'm passing to it a variable of a for loop, i think that it will never go out of scope (?)
[03:08:06] <FromDiscord> <Elegantbeef> It's likely it will
[03:08:49] <FromDiscord> <Patitotective> so, how do i use references lol↵if i was doing `name.unsafeAddr` now i do `ref name`?
[03:08:51] <FromDiscord> <Elegantbeef> for variables are stack allocated generally, so they do not outlive the procedure they're defined it
[03:09:21] <FromDiscord> <Elegantbeef> No
[03:09:47] <FromDiscord> <Elegantbeef> You need to allocate a reference and make sure it outlives the variable
[03:09:50] <FromDiscord> <Elegantbeef> It highly depends on what you're doing
[03:09:53] <FromDiscord> <Elegantbeef> outlives the procedure\
[03:21:21] *** Joins: yiggityswaps (~yoyojambo@2806:108e:18:7861:551a:a8a6:1dca:688d)
[03:21:27] <FromDiscord> <Patitotective> sent a code paste, see https://play.nim-lang.org/#ix=3TyL
[03:21:47] <FromDiscord> <Patitotective> (edit) "https://play.nim-lang.org/#ix=3TyL" => "https://paste.rs/T18"
[03:22:40] <FromDiscord> <Elegantbeef> That seems unsafe
[03:22:41] <FromDiscord> <Elegantbeef> make it a ref string and use `Gcref` and `GcUnref` and it'll be fine, or use `create`
[03:22:47] <FromDiscord> <Elegantbeef> `create` and `dealloc`
[03:23:23] <FromDiscord> <Elegantbeef> Here's an example of how using refs with `pointer`s work similar to this https://play.nim-lang.org/#ix=3TyO
[03:24:27] *** Quits: yoyojambo (~yoyojambo@2806:108e:18:7861:551a:a8a6:1dca:688d) (Ping timeout: 252 seconds)
[03:28:40] <FromDiscord> <Patitotective> like `GcRef[string](name)` instead of `name.unsafeAddr`?
[03:28:53] <FromDiscord> <Elegantbeef> No
[03:29:04] <FromDiscord> <Elegantbeef> `GCRef` does nothing but increment the GC ref counter
[03:29:47] <FromDiscord> <Elegantbeef> You need to do `var myString = new string; myString[] = myStringVal; GcRef(myString);` then `cast[pointer](myString)`
[03:29:56] <FromDiscord> <Elegantbeef> You cannot raise a non `ref` to ref
[03:30:02] <FromDiscord> <Elegantbeef> Actually this is dubm
[03:30:04] <FromDiscord> <Elegantbeef> Actually this is dumb
[03:30:32] <FromDiscord> <Elegantbeef> you can just do `GcRef(myStringVal)` and then `GcUnref(cast[string](data.userData))` inside the callback
[03:31:15] <FromDiscord> <Elegantbeef> I forgot you can do that with strings
[03:32:56] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3TyR
[03:36:20] <FromDiscord> <Patitotective> sent a code paste, see https://play.nim-lang.org/#ix=3TyT
[03:36:43] <FromDiscord> <Elegantbeef> The error is unrelated
[03:36:55] <FromDiscord> <Elegantbeef> `app` is a `var T` passed into your procedure
[03:37:00] <FromDiscord> <Elegantbeef> You cannot use it in a closure
[03:37:35] <FromDiscord> <Elegantbeef> Either make `app` a `ref object` or do `var app = app.addr` if you know it's safe to do as such
[03:41:54] <FromDiscord> <Patitotective> In reply to @Elegantbeef "Either make `app` a": i only need to make `type App = ref object`?
[03:42:06] <FromDiscord> <Patitotective> (edit) "In reply to @Elegantbeef "Either make `app` a": i only need to make `type App = ref object`? ... " 03added "cause it's not working if i only do that"
[03:43:37] <FromDiscord> <Patitotective> isn't easier to use closure scope? https://nim-lang.org/docs/system.html#closureScope.t,untyped
[03:44:23] <FromDiscord> <Elegantbeef> Your callback cannot be a closure anyway
[03:44:35] <FromDiscord> <Elegantbeef> It needs to be `cdecl`
[03:44:48] <FromDiscord> <Patitotective> ok
[03:44:48] <FromDiscord> <Elegantbeef> User data should be `app`
[03:45:31] <FromDiscord> <Elegantbeef> `buf` on the input of the callback has the cstring
[03:46:00] <FromDiscord> <Elegantbeef> You really need to learn low level programming with Nim to make this easier on yourself 😛
[03:46:51] <FromDiscord> <Elegantbeef> Someone needs to make a low level tutorial for the uninitiated
[03:46:56] <FromDiscord> <Patitotective> In reply to @Elegantbeef "`buf` on the input": yea but i dont need `buf`, i need the key that was used to create that `igInputText`
[03:47:14] <FromDiscord> <Patitotective> (edit) "dont" => "not only"
[03:47:42] <FromDiscord> <Elegantbeef> Imgui doesnt support this
[03:48:05] <FromDiscord> <Patitotective> In reply to @Elegantbeef "Imgui doesnt support this": doesn't support what?
[03:48:13] <FromDiscord> <Elegantbeef> You'd need to make a tuple or object to hold your `app` and `name`
[03:48:25] <FromDiscord> <Elegantbeef> Passing name and holding onto a reference to `app`
[03:48:26] <FromDiscord> <Patitotective> In reply to @Elegantbeef "You'd need to make": 🙃
[03:48:46] <FromDiscord> <Elegantbeef> I mean you're the one with the wacky design 😛
[03:51:25] <FromDiscord> <Patitotective> In reply to @Elegantbeef "I mean you're the": hehe, its just so i don't need to create the preferences widgets manually, they are automatically created from config file (which helps because it's a templat)
[03:51:26] <FromDiscord> <Patitotective> (edit) "templat)" => "template)"
[03:51:35] <FromDiscord> <Patitotective> (edit) "template)" => "template for an imgui app)"
[03:55:28] <FromDiscord> <Elegantbeef> Well the issue here is that you need to pass userdata which is a `ref (App, string)` so you then can reference it later
[03:55:56] <FromDiscord> <Elegantbeef> Imgui doesnt allow you to pass custom user data that is multiple objects so you need a single place that has both
[03:56:16] <FromDiscord> <Elegantbeef> So making `App` a reference and `GcRef`ing the string/app will make it work
[03:57:24] <FromDiscord> <Patitotective> sent a code paste, see https://play.nim-lang.org/#ix=3Tz3
[03:57:33] <FromDiscord> <Elegantbeef> and unref each field
[03:57:39] <FromDiscord> <Patitotective> oh ok
[03:58:26] <FromDiscord> <Elegantbeef> You also could get around the gcref with memory memory allocations(which is basically what gcref/unref does)
[03:59:49] <FromDiscord> <Patitotective> In reply to @Elegantbeef "and unref each field": `GcUnref(cast[App](app))`? `GcUnref(cast[App](cast[UserData](data.userData)).app)`?
[04:00:15] <FromDiscord> <Elegantbeef> Dont need the `cast[App]`
[04:04:01] <FromDiscord> <Patitotective> sent a code paste, see https://paste.rs/GuH
[04:04:22] <FromDiscord> <Elegantbeef> You dont need `GCFullCollect`
[04:05:15] <FromDiscord> <Patitotective> this line `cast[pointer](userData)` complains `Error: expression cannot be cast to pointer`
[04:05:29] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3Tz4
[04:05:34] <FromDiscord> <Elegantbeef> What's your `UserData` type?
[04:05:41] <FromDiscord> <Patitotective> `UserData = tuple[app: App, name: string]`
[04:05:52] <FromDiscord> <Elegantbeef> `ref`
[04:05:58] <FromDiscord> <Elegantbeef> It needs to be a ref
[04:06:02] <FromDiscord> <Elegantbeef> Like i said it needs to outlive the procedure
[04:06:04] <FromDiscord> <Patitotective> `UserData = ref tuple[app: App, name: string]`?
[04:06:07] <FromDiscord> <Elegantbeef> The only way to do that is with heap allocated memory
[04:06:16] <FromDiscord> <Elegantbeef> As such you need to use `ref`s
[04:08:05] <FromDiscord> <Patitotective> and how do i create a ref tuple? `let userData: ref UserData = (app, name)`?
[04:08:25] *** Joins: mahlon (~mahlon@martini.nu)
[04:09:09] <FromDiscord> <Alea> sent a code paste, see https://play.nim-lang.org/#ix=3Tz5
[04:09:09] <FromDiscord> <Alea> Any clues why?
[04:09:35] <FromDiscord> <Elegantbeef> `new (App, string)`
[04:09:57] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3Tz6
[04:09:59] <FromDiscord> <Elegantbeef> Use an object if you want it to be cleaner
[04:10:13] <FromDiscord> <Elegantbeef> it'd just be `let userData = UserData(app: app, name: name)`
[04:11:34] <NimEventer> New thread by Domogled: Two data bindings in vanilla nim for js app without virtual DOM, see https://forum.nim-lang.org/t/9049
[04:13:01] <FromDiscord> <Patitotective> sent a code paste, see https://play.nim-lang.org/#ix=3Tz7
[04:13:08] <FromDiscord> <Elegantbeef> Yes
[04:15:18] <FromDiscord> <Elegantbeef> You can kinda think of `GCref` as "keep this alive" and `GCUnref` as "Ok i'm done with it"
[04:16:06] <FromDiscord> <Patitotective> sent a code paste, see https://play.nim-lang.org/#ix=3Tz8
[04:16:15] <FromDiscord> <Patitotective> In reply to @Elegantbeef "You can kinda think": Someone needs to make a low level tutorial for the uninitiated
[04:16:19] <FromDiscord> <Elegantbeef> yes
[04:16:26] <FromDiscord> <Elegantbeef> Lol
[04:17:27] <FromDiscord> <Patitotective> sent a code paste, see https://play.nim-lang.org/#ix=3Tz9
[04:17:56] <FromDiscord> <Elegantbeef> And line 58 is probably `app.x`?
[04:18:32] <FromDiscord> <Elegantbeef> How do you declare \`app?
[04:20:10] <FromDiscord> <Patitotective> sent a code paste, see https://play.nim-lang.org/#ix=3Tza
[04:20:35] <FromDiscord> <Elegantbeef> `app.prefs`
[04:20:40] <FromDiscord> <Elegantbeef> where do you declare the `app` your pass in?
[04:20:42] <FromDiscord> <Patitotective> sent a code paste, see https://play.nim-lang.org/#ix=3Tzb
[04:20:57] <FromDiscord> <Elegantbeef> No
[04:21:12] <FromDiscord> <Patitotective> In reply to @Elegantbeef "where do you declare": in the `main` procedure (?)
[04:22:06] <FromDiscord> <Elegantbeef> Well it's a nil error so have fun finding what's causing it
[04:22:22] <FromDiscord> <Patitotective> In reply to @Patitotective "now a really verbose": then i pass `var app` to these procedures until `drawPrefsModal`
[04:23:19] <FromDiscord> <Patitotective> In reply to @Elegantbeef "Well it's a nil": maybe `app.prefs`, other times it have done the same↵maybe it's time to improve my error messages 🥲
[04:25:12] <FromDiscord> <Elegantbeef> I'm going to start on a pointers tutorial i guess
[05:17:18] <FromDiscord> <ynfle> In reply to @Elegantbeef "I'm going to start": Pointers on pointers?
[05:18:13] <FromDiscord> <Elegantbeef> Pretty much, i was thinking more "Pointers? Point who I hardly know her" 😛
[05:53:28] <FromDiscord> <Patitotective> @ElegantBeef is there a way to check the stack trace of the cimgui functions called? cause im haven't been able to find anything lol
[05:53:47] <FromDiscord> <Elegantbeef> What do you mean?
[05:54:36] <FromDiscord> <Patitotective> like to see which files (`.h`) are being used by which functions in which lines
[05:55:03] <FromDiscord> <Elegantbeef> C doesnt have a stack trace
[05:55:04] <FromDiscord> <Elegantbeef> So nope
[05:55:28] <FromDiscord> <Elegantbeef> Not easily
[05:55:41] <FromDiscord> <Elegantbeef> You might be able to use debug tools to do it
[05:55:50] <FromDiscord> <Patitotective> In reply to @Elegantbeef "You might be able": like?
[05:56:06] <FromDiscord> <Elegantbeef> You're a windows user so no clue
[05:56:19] <FromDiscord> <Elegantbeef> callgrind might work,  gdb might work
[05:56:23] <FromDiscord> <Patitotective> im an ubuntu user LOL
[05:56:29] <FromDiscord> <Elegantbeef> Oh
[05:56:34] <FromDiscord> <Elegantbeef> Why did i think you used windows
[05:57:43] <FromDiscord> <Elegantbeef> Well i have a writeup for the basic of pointers, it's fucking useless methinks
[05:57:58] <FromDiscord> <Elegantbeef> Doesnt explain anything so time well spent
[05:58:24] <FromDiscord> <Elegantbeef> If anyone wants to take a peak at it https://www.jasonbeetham.com/pointerexplaination.html
[06:15:44] <FromDiscord> <Patitotective> In reply to @Elegantbeef "C doesnt have a": and cpp?
[06:15:57] <FromDiscord> <Elegantbeef> No clue
[06:16:31] <FromDiscord> <Elegantbeef> Doubt it
[06:17:15] <FromDiscord> <michaelb.eth> sent a code paste, see https://paste.rs/NCN
[06:17:27] <FromDiscord> <Elegantbeef> `for _ in 0..<someInt`
[06:17:32] <FromDiscord> <michaelb.eth> (edit) "https://play.nim-lang.org/#ix=3Tzq" => "https://paste.rs/byj"
[06:18:10] <FromDiscord> <michaelb.eth> (edit) "https://play.nim-lang.org/#ix=3Tzs" => "https://play.nim-lang.org/#ix=3Tzr"
[06:20:16] <FromDiscord> <michaelb.eth> In reply to @Elegantbeef "If anyone wants to": I like it 🙂
[06:21:03] <FromDiscord> <ElegantBeef> Thanks
[06:22:03] <FromDiscord> <Elegantbeef> Uh oh the matrix bridge machine borkeded
[06:22:03] <FromDiscord> <Elegantbeef> Hmm this bridge likes dying randomly
[06:22:23] <FromDiscord> <michaelb.eth> probably a bad pointer
[06:22:41] <FromDiscord> <Elegantbeef> It happened after you edited your message so i blame you
[06:23:34] <FromDiscord> <michaelb.eth> I'm pretty sure someone didn't have their fingers crossed and their lips twisted in just the right way to keep it from crashing
[06:23:53] <FromDiscord> <Elegantbeef> Ah my bad, i'll get the glue
[06:41:44] <FromDiscord> <huantian> It is unfortunate that edits don’t transfer perfectly with the bridge
[06:42:01] <FromDiscord> <Elegantbeef> They do sometimes but for some reason the bridge removes the message
[06:42:16] <FromDiscord> <Elegantbeef> Probably a case of no one fed up enough to fix it
[06:43:39] <FromDiscord> <Elegantbeef> Dont even know which bridge they use
[07:04:46] *** Quits: mal`` (~mal``@static.38.6.217.95.clients.your-server.de) (Quit: Leaving)
[07:07:06] <FromDiscord> <huantian> Maybe we should make our own bridge in Nim
[07:07:33] <FromDiscord> <Elegantbeef> Well the matrix API is being wrapped, no clue if it supports bots
[07:12:36] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Quit: Lost terminal)
[07:22:11] *** Joins: mal`` (~mal``@static.38.6.217.95.clients.your-server.de)
[07:54:21] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[07:58:07] <FromDiscord> <Patitotective> how do i know which compiler nim is using?
[07:58:18] <FromDiscord> <Patitotective> (edit) "using?" => "using (gcc or clang)?"
[07:58:31] <FromDiscord> <Elegantbeef> by default on linux it uses `gcc`
[07:59:22] <FromDiscord> <Elegantbeef> `defined(gcc)` is atleast for gcc check
[08:00:06] <FromDiscord> <Patitotective> In reply to @Patitotective "<@!145405730571288577> is there a": i couldn't find anything lol↵i created an issue https://github.com/nimgl/nimgl/issues/77
[08:02:43] <FromDiscord> <Elegantbeef> The issue is your string
[08:02:43] <FromDiscord> <creikey> something I'm just now considering, if the bulk of my SE work is in nim how will I even get hired?
[08:03:29] <FromDiscord> <Elegantbeef> sent a code paste, see https://paste.rs/QvV
[08:03:30] <FromDiscord> <Elegantbeef> There you go how you're supposed to do it
[08:03:46] <FromDiscord> <Elegantbeef> Wait people hire software devs?↵(@creikey)
[08:03:58] <FromDiscord> <Elegantbeef> It's a system programming language I'd imagine if you have good projects it doesnt matter
[08:04:08] <FromDiscord> <creikey> In reply to @Elegantbeef "It's a system programming": even if everybody uses C++?
[08:04:17] <FromDiscord> <creikey> In reply to @Elegantbeef "Wait people hire software": not even sure at this point tbh
[08:05:06] <FromDiscord> <Patitotective> sent a code paste, see https://paste.rs/Tz8
[08:05:15] <FromDiscord> <Elegantbeef> No clue, i'd imagine application of knowledge is more important than language
[08:05:23] <FromDiscord> <creikey> sent a code paste, see https://play.nim-lang.org/#ix=3TzI
[08:05:38] <FromDiscord> <Elegantbeef> Shouldnt matter
[08:06:03] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3TzJ
[08:07:14] <FromDiscord> <Elegantbeef> Dont take my view as gospel anyway, i'm not a software developer
[08:09:30] <FromDiscord> <Elegantbeef> Anyway the 64 is the length of the string without a null terminator, it's what imgui will draw up to or input up to
[08:12:17] <FromDiscord> <Patitotective> :O
[08:12:19] <FromDiscord> <Patitotective> it worked
[08:12:35] <FromDiscord> <Patitotective> In reply to @Elegantbeef "Dont take my view": are you sure you're not a software developer? lol
[08:13:47] <FromDiscord> <Elegantbeef> In an ideal world there is a `proc igInputText(label: string, buff: var openArray[char], ...)`
[08:13:47] <FromDiscord> <Elegantbeef> Also patito you do realize `igInputText` returns true if the buffer has been changed right?
[08:13:48] <FromDiscord> <Elegantbeef> You dont need to use the callback/userdata for what you were doing
[08:14:19] <FromDiscord> <Elegantbeef> I'm not a professional one
[08:14:45] *** Joins: fowl (~fowlmouth@user/fowl)
[08:15:20] <FromDiscord> <creikey> In reply to @Elegantbeef "I'm not a professional": I'm curious do you have a day job?
[08:15:56] <FromDiscord> <Patitotective> In reply to @Elegantbeef "You dont need to": I thought the same but if you see `IgInputText` https://nimgl.dev/docs/imgui.html#igInputText%2Ccstring%2Ccstring%2Cuint%2CImGuiInputTextFlags%2CImGuiInputTextCallback%2Cpointer↵`buf` is not `var` and the only way to get the `buf` is by using the `callback`
[08:16:02] <FromDiscord> <Patitotective> (edit) "In reply to @Elegantbeef "You dont need to": I thought the same but if you see ... `IgInputText`" 03added "in"
[08:18:18] <FromDiscord> <Elegantbeef> uhh
[08:18:29] <FromDiscord> <Elegantbeef> It mutates `buf`
[08:19:11] <FromDiscord> <Patitotective> :O how?
[08:19:18] <FromDiscord> <Elegantbeef> It's a cstring
[08:19:28] <FromDiscord> <Elegantbeef> that `buf` is the `buf` you get back
[08:19:42] <FromDiscord> <Patitotective> time to stop living LMAO
[08:22:51] <FromDiscord> <Patitotective> 🌃
[08:22:54] <FromDiscord> <Patitotective> good night everyone
[08:23:34] <FromDiscord> <Elegantbeef> @Patitotective\: goodnight, but take this https://play.nim-lang.org/#ix=3TzO
[08:38:10] *** Quits: arkurious (~arkurious@user/arkurious) (Quit: Leaving)
[09:04:07] *** Quits: slowButPresent (~slowButPr@user/slowbutpresent) (Quit: leaving)
[10:09:01] <FromDiscord> <Mikerah (Mikerah)> I'm trying to cross-compile a simple nim program (just a hello world for testing purposes) to C and I'm missing a nimbase.h file.
[10:09:45] <FromDiscord> <Elegantbeef> depends on your install path if using choosenim it's `.choosenim/toolchains/version/lib/nimbase.h`
[10:09:47] <FromDiscord> <Mikerah (Mikerah)> I noticed that within the choosenim folder, I can find it but I have a feeling that this is somewhat unnecessary and the nim compiler probably has an option for this somewhere
[10:10:09] <FromDiscord> <Elegantbeef> Are you compiling Nim, or using nim to output C?
[10:10:22] <FromDiscord> <Mikerah (Mikerah)> The latter
[10:10:47] <FromDiscord> <Mikerah (Mikerah)> I guess it's inaccurate to say nim compiler even though I'm running `nim cc ...` ?
[10:11:06] <FromDiscord> <Elegantbeef> If you're doing `nim c ./myNim.nim` it's the former
[10:11:25] <FromDiscord> <Elegantbeef> If you're doing `nim c -c --nimcache:someDir myNim.nim` it's the latter
[10:11:38] <FromDiscord> <Mikerah (Mikerah)> Okay. I see
[10:11:58] <FromDiscord> <Elegantbeef> If nim is doing everything you shouldnt need to do anything with the nimbase
[10:12:05] <FromDiscord> <Elegantbeef> So what's the exact command you're using/process
[10:12:29] <FromDiscord> <Mikerah (Mikerah)> I'm running `nim cc --nimcache:. --cpu:amd64 --os:linux mininimbus.nim`.
[10:12:37] <FromDiscord> <Mikerah (Mikerah)> My goal is to get c code
[10:12:49] <FromDiscord> <Elegantbeef> Ok so then yes you need to copy the nimbase manually afaik
[10:12:57] <FromDiscord> <Elegantbeef> It'd be nice if you didnt, but it's a one time thing
[10:13:22] <FromDiscord> <Mikerah (Mikerah)> I see.
[10:13:36] <FromDiscord> <Mikerah (Mikerah)> Might a good first contribution to automate this process
[10:13:49] <FromDiscord> <Mikerah (Mikerah)> Anyways, thank you @elegantbeef\:matrix.org for the clarification
[10:14:02] <FromDiscord> <Elegantbeef> Perhaps, though might be a bit odd if you change your compiler
[10:15:01] <FromDiscord> <Elegantbeef> Guess it can always compare the two
[10:15:45] <FromDiscord> <Mikerah (Mikerah)> I need a specific version of the nim compiler though. Otherwise it doesn't build
[10:17:32] <FromDiscord> <Elegantbeef> Sounds like great software 😛
[10:18:04] <FromDiscord> <Mikerah (Mikerah)> I'm just trying to write a quick-ish prototype for something and nim was the best option given its ability to compile to MIPS and C
[10:18:41] <FromDiscord> <Elegantbeef> Yea i'm just joking, manually copying is what we have
[10:51:20] *** Joins: Zectbumo (~Zectbumo@2600:8802:5100:3f90:8199:2168:709a:170e)
[11:31:48] *** Quits: jmdaemon (~jmdaemon@user/jmdaemon) (Ping timeout: 240 seconds)
[12:17:03] *** Joins: pro (~pro@user/pro)
[13:04:37] *** Quits: Zectbumo (~Zectbumo@2600:8802:5100:3f90:8199:2168:709a:170e) (Remote host closed the connection)
[13:53:56] <FromDiscord> <iencec> how would I convert a `seq[Rune]` to  `string`?
[13:54:38] <FromDiscord> <Elegantbeef> `$`
[13:54:56] <FromDiscord> <iencec> ah - forgot about that one - thanks!
[13:56:42] <FromDiscord> <Rika> Maybe we should have a proc called to string that’s literally just an alias to that
[13:56:43] <FromDiscord> <Rika> Lol
[13:57:57] <FromDiscord> <iencec> I indeed was trying `toString` earlier..  \:-D
[14:54:07] *** Joins: PMunch (~PMunch@user/pmunch)
[15:09:12] <FromDiscord> <Require Support> is there a way to get type of var in nim?
[15:11:45] <FromDiscord> <Require Support> sent a code paste, see https://play.nim-lang.org/#ix=3TAz
[15:12:07] <FromDiscord> <Solitude> yes, you just did it
[15:12:14] <FromDiscord> <Require Support> wait no way LOL
[15:12:50] <FromDiscord> <Require Support> omg its actually right, im dumb
[15:16:19] *** Joins: xet7 (~xet7@user/xet7)
[15:18:30] <FromDiscord> <Rika> lol
[16:11:25] *** Quits: xet7 (~xet7@user/xet7) (Remote host closed the connection)
[16:19:33] <FromDiscord> <Patitotective> sent a code paste, see https://paste.rs/w9j
[16:28:00] <PMunch> Hmm, anyone here used plotly?
[16:29:25] <PMunch> I have a Raspberry Pi which reads a temperature/humidity sensor and outputs the data to a file in a cron-job. Now I want to display that data on a website, I was initially thinking of using some JavaScript library like Chart.js, but Plotly looks really nice, and since it outputs HTML there is (hopefully) a way to get that HTML and embed it into a site?
[16:34:26] <PMunch> Aha, so the Plotly library only generates the JSON required for the Plotly JS library
[16:35:19] <PMunch> So I should be able to make a HTML file with the Plotly library and then use the `toPlotJson` to get the JSON I need for the library?
[16:38:09] <FromDiscord> <hotdog> In reply to @PMunch "So I should be": Sounds about right
[16:38:15] <FromDiscord> <hotdog> Are there no examples?
[16:38:39] <PMunch> Not of this particular use-case, no
[16:38:47] <PMunch> Hmm, there is a `save` function
[16:38:59] <PMunch> But I want to embed this into another site
[16:41:44] <PMunch> Hmm, there is `fillHtmlTemplate`
[16:41:50] <PMunch> But it's not exported by default
[16:50:30] <pro> can't you just generate svg and embedd svg ?
[16:52:20] <PMunch> pro, I could, but that sounds like more work for me
[16:52:52] <pro> honestly, I enjoy creating simple graphics with simple elements, so I thought you would too :P
[16:53:20] <PMunch> Oh, don't get me wrong, I'd love to do it. But sometimes you just need things done fast .)
[16:53:50] <pro> I remmember that I had some sqlite or .csv files I needed to visualize, and I used some software that generated .png's, which scaled nicely to any res
[16:54:01] <pro> gnuplot iirc
[16:54:07] <PMunch> Yeah I could use something like gnuplot
[16:55:06] <FromDiscord> <Recruit_main707> at that point you may also use matplotlib and generate a png file, from the little ive seen of gnuplot its worse than it
[16:55:10] <pro> if it's production or critical sensor, then I'd self host graylog or something like that, which has several notifications of data stopping to come
[16:55:29] <PMunch> Oh it's nothing like that
[16:55:41] <PMunch> It's just a small Raspberry Pi chilling behind my TV :P
[16:57:11] <FromDiscord> <auxym> ggplotnim can probably generate svg?
[16:58:21] <pro> I want to get into hardware projects now...
[16:58:42] *** Joins: slowButPresent (~slowButPr@user/slowbutpresent)
[17:17:09] <FromDiscord> <auxym> join us in embedded 😉
[17:17:52] <pro> us?
[17:28:01] <FromDiscord> <Rika> there is a channel `nim-embedded` i believe
[17:29:06] <PMunch> Yes, it's #nim-embedded on IRC
[17:32:36] <FromDiscord> <auxym> us 😏
[17:32:38] <FromDiscord> <hmmm> sent a code paste, see https://play.nim-lang.org/#ix=3TB5
[17:32:43] <FromDiscord> <hmmm> basically this fails because seq grows while iterating
[17:33:01] <FromDiscord> <hmmm> but I still need to do it, the objective is to add test 3 times to that seq
[17:33:12] <FromDiscord> <hmmm> how do I get around dat
[17:33:23] <FromDiscord> <Rika> `for _ in 0..a.high:` since you dont need i
[17:33:26] <FromDiscord> <auxym> iterate with an index index?
[17:33:33] <FromDiscord> <auxym> yeah that
[17:33:39] <FromDiscord> <hmmm> what does the underscore do
[17:33:43] <FromDiscord> <Rika> nothing
[17:33:43] <FromDiscord> <auxym> nothing
[17:33:44] <FromDiscord> <Rika> its a variable name
[17:33:46] <FromDiscord> <hmmm> wot
[17:33:48] <FromDiscord> <Rika> but not really
[17:34:08] <FromDiscord> <Rika> you could name it i but you dont use it anyway
[17:34:24] <FromDiscord> <hmmm> nununu this was a simple example lol I need to use it
[17:34:55] <FromDiscord> <hmmm> basically I use a.high and it will lock it
[17:34:56] <FromDiscord> <Rika> then put that in the damn example]
[17:34:58] <FromDiscord> <hmmm> ok I'll try
[17:36:05] <FromDiscord> <auxym> or something like that
[17:36:05] <FromDiscord> <auxym> sent a code paste, see https://play.nim-lang.org/#ix=3TB7
[17:42:17] *** Joins: BEST_Flibra_Gaia (~BEST_Flib@86-45-239-19-dynamic.agg2.sla.mvw-sla.eircom.net)
[17:46:07] <PMunch> Man, running Nim on the Raspberry Pi really makes me appreciate how fast my computer is :P
[17:46:52] <pro> man I wish I had RPI when I grew up
[17:47:02] <FromDiscord> <exelotl> it makes me really long for IC 😅
[17:48:06] *** Quits: BEST_Flibra_Gaia (~BEST_Flib@86-45-239-19-dynamic.agg2.sla.mvw-sla.eircom.net) (Quit: Client closed)
[17:48:16] <pro> why aren't you compiling for rpi on your desktop?
[17:51:32] <PMunch> I had some trouble setting up the cross-compilation, and I just never got around to setting it up properly :P
[17:52:06] <pro> why deal with cross compilation when you can emulate the entire thing with qemu/kvm
[17:52:49] <PMunch> Tbh that sounds like more work to set up than a cross-compiler
[17:53:18] <pro> honestly, it's just a virtual machine
[17:53:21] <pro> :)
[18:02:02] <FromDiscord> <Patitotective> sent a code paste, see https://play.nim-lang.org/#ix=3TBb
[18:02:25] <FromDiscord> <Rika> `find` i think is the name
[18:09:52] <PMunch> Yup, it's find from the system module: https://nim-lang.org/docs/system.html#find%2CT%2CS
[18:19:48] <PMunch> Hmm, I think I should turn https://github.com/PMunch/autotemplate into a library
[18:22:03] <PMunch> I just used it for this actual project and it's pretty neat
[18:57:31] <FromDiscord> <ajusa> Still not sure how it is different from Ninja tbh
[18:57:38] <FromDiscord> <ajusa> (edit) "Ninja" => "Nimja"
[18:58:36] <FromDiscord> <ajusa> Both seem to generate HTML by using HTML templates at compile time
[18:58:59] <FromDiscord> <ajusa> Only Nimja has more features as it's been developed longer
[19:01:15] <PMunch> Oh sure, autotemplates could easily use Nimja instead of templates
[19:01:23] <PMunch> I just grabbed the simplest one I could find for my testing
[19:01:54] <PMunch> Basically all autotemplates does is automatically create templates from files in a directory
[19:02:53] <PMunch> If you have a file called `Chart.html` and `Chart` is a type in your Nim code it will generate `proc toHtml(x: Chart): string` which will take that object and format it based on that template
[19:03:10] <PMunch> I plan to add filetype support as well
[19:04:14] <PMunch> And a way for Jester to respond with different types dependent on the query (by an "Accept" header or a `.html` postfix)
[19:05:31] <PMunch> So if you had both `Chart.html` and `Chart.json` you could call `127.0.0.1:5000/getchart.html` and it would return a HTML version and `127.0.0.1:5000/getchart.json` would return a JSON version
[19:06:26] <FromDiscord> <ajusa> Gotcha, I understand the difference now. You are focused on automatically generating those procs, while Nimja focuses on generating the HTML itself
[19:06:33] <PMunch> Yup
[19:06:50] <PMunch> I don't generate any HTML, I let `onionhammer/nim-templates` handle that for me
[19:07:00] <PMunch> But that could just as easily be Nimja or any other templating library
[19:27:35] *** Quits: ltriant (~ltriant@194-223-10-27.tpgi.com.au) (Ping timeout: 260 seconds)
[19:40:22] *** Joins: arkurious (~arkurious@user/arkurious)
[19:56:44] *** Joins: ltriant (~ltriant@194-223-10-27.tpgi.com.au)
[20:03:29] <FromDiscord> <ajusa> if I wanted to generate code based on a string at compile time, I'd need to use macros right? No way to do it with a template?
[20:05:32] <FromDiscord> <ajusa> sent a code paste, see https://play.nim-lang.org/#ix=3TCp
[20:09:05] <PMunch> Correct
[20:09:29] <PMunch> You need a macro for that
[20:09:53] <FromDiscord> <Bubblie> PMunch sorry to interrupt, but did you see what I said yesterday? i can resend the post
[20:10:08] <FromDiscord> <Bubblie> (edit) "post" => "message"
[20:10:44] <FromDiscord> <Bubblie> I was just unsure if it was seen through IRC
[20:10:53] <FromDiscord> <Bubblie> Sorry if I am being annoying
[20:11:35] <PMunch> I saw you asking if you could get some help, then I said yes and you never replied :P
[20:12:26] <FromDiscord> <Bubblie> Oh no I did
[20:12:36] <FromDiscord> <Bubblie> Wait shit on IRC you cant see replies right
[20:12:52] <PMunch> Well I can see that you reply, but only a small snippet of what you replied to
[20:13:40] <FromDiscord> <Bubblie> sent a code paste, see https://paste.rs/zDQ
[20:13:42] <FromDiscord> <Bubblie> This was the original message
[20:14:19] <PMunch> Ah, backslashes like that are treated as escape codes in Nim
[20:14:33] <PMunch> So you need double backslashes
[20:14:57] <FromDiscord> <Bubblie> I added double
[20:15:02] <FromDiscord> <Bubblie> Problem is that didnt work either
[20:15:09] <PMunch> You also appear to not have sysPath set correctly
[20:15:15] <FromDiscord> <Bubblie> Oh
[20:15:20] <FromDiscord> <Bubblie> How do I set sysPath
[20:15:21] <PMunch> It's supposed to point to the system include path
[20:15:43] <FromDiscord> <Bubblie> ?
[20:15:52] <PMunch> As you can see in the stb example it points to the clang or gcc libraries IIRC
[20:16:07] <PMunch> It should basically point to the standard C library of whichever C compiler you're using
[20:16:15] <FromDiscord> <Bubblie> Ohhh
[20:16:22] <FromDiscord> <Bubblie> So, since futhark is using clang
[20:16:25] <FromDiscord> <Bubblie> It should point to clang
[20:16:31] <FromDiscord> <Bubblie> Then I can specify the library I want
[20:16:34] <FromDiscord> <Bubblie> Like GLDW
[20:16:38] <FromDiscord> <Bubblie> (edit) "GLDW" => "GLFW"
[20:16:39] <FromDiscord> <Bubblie> Right?
[20:16:52] <PMunch> Well Øpir uses clang to read C files, but that's already compiled, what you need is the one for your compiler
[20:17:00] <PMunch> That you use to compile your project with
[20:17:10] <PMunch> Which on Windows is probably mingw or something
[20:17:19] <FromDiscord> <Bubblie> OH so I point to mingw in this case
[20:17:30] <FromDiscord> <Bubblie> Ah that makes a lot more sense
[20:18:20] <PMunch> Yeah, sysPath points to the standard C library, path points to whichever library you want to import, and then the imports have to exist somewhere in those two paths, and anything `#include`-ed that resides in path will be automatically imported into Nim
[20:18:36] <PMunch> And thanks for the Windows instructions
[20:22:01] <FromDiscord> <Bubblie> Of course
[20:22:14] <FromDiscord> <Bubblie> And thank you, ill fix that now
[20:28:20] <NimEventer> New Nimble package! rconv - Universal Rhythm-Game File parser and converter, see https://github.com/prefixaut/rconv
[20:33:03] <FromDiscord> <frobnicate> Do people who use Nim have a name? Like Go is Gophers and C++ is boomers?
[20:34:05] <FromDiscord> <hmmm> nimions
[20:34:14] <pro> nimblers
[20:34:41] <FromDiscord> <hmmm> if low IQ nimlets (I'm one)
[20:35:06] <PMunch> Various names have been proposed, but none of them are in common use
[20:35:17] <PMunch> I think Nimions is the one you'll see the most
[20:37:15] <FromDiscord> <hmmm> I see a bunch of config packages in directory, what can I use to read and write a simple config.ini
[20:38:48] *** Joins: jmdaemon (~jmdaemon@user/jmdaemon)
[20:39:01] <FromDiscord> <Recruit_main707> > c++ is boomers↵lol
[20:39:53] <FromDiscord> <hmmm> maybe I'll just jsony it, seems simpler
[20:41:13] <PMunch> @hmmm, what format is the configuration currently?
[20:41:55] <FromDiscord> <Bubblie> In reply to @frobnicate "Do people who use": Boomers LMAO
[20:41:55] <FromDiscord> <hmmm> hmm no format pmunch, it should just contain all preferences for my app
[20:42:31] <FromDiscord> <Solitude> In reply to @hmmm "I see a bunch": parsecfg from stdlib sometimes works
[20:42:38] <PMunch> @hmmm, do you want them user editable?
[20:42:57] <PMunch> TOML comes to mind as a format if you where considering .ini
[20:43:05] <PMunch> And Nim has a fairly good TOML parser
[20:43:07] <FromDiscord> <hmmm> I think I'll provide in app clicky clocky, but that would be comfy too
[20:43:21] <FromDiscord> <Patitotective> https://patitotective.github.io/niprefs/ 👀
[20:43:43] <PMunch> Or you could of course go full balls to wall and use NimScript as a configuration language :)
[20:44:22] <FromDiscord> <Rika> or other vm languages like lua
[20:44:28] <FromDiscord> <Solitude> ugh
[20:44:30] <FromDiscord> <Rika> if you're that insane
[20:44:33] <FromDiscord> <Bubblie> Lua is cool
[20:44:35] <FromDiscord> <Bubblie> I like it
[20:44:46] <FromDiscord> <Bubblie> Except it lacks a ton of shit
[20:44:47] <FromDiscord> <hmmm> sent a code paste, see https://play.nim-lang.org/#ix=3TCC
[20:44:49] <PMunch> Why use Lua when you can use Nim :)
[20:44:53] <FromDiscord> <Bubblie> Because its supposed to be very small
[20:44:53] <FromDiscord> <Rika> In reply to @Bubblie "Except it lacks a": like?
[20:44:57] <FromDiscord> <Rika> In reply to @PMunch "Why use Lua when": preference perhaps
[20:45:16] <FromDiscord> <Solitude> In reply to @Rika "preference perhaps": mental illness
[20:45:29] <PMunch> Haha :P
[20:45:36] <FromDiscord> <Bubblie> Hold on there was one major thing in lua that isn’t there I forgot the proper terminology
[20:45:38] <PMunch> I've actually never used Lua myself
[20:45:42] <FromDiscord> <Bubblie> Let me look for it
[20:46:03] <FromDiscord> <Patitotective> In reply to @hmmm "I like niprefs because": lol
[20:46:10] <FromDiscord> <Patitotective> In reply to @Bubblie "Except it lacks a": im planning to add tuples
[20:46:23] <FromDiscord> <Bubblie> 👀
[20:46:26] <FromDiscord> <Bubblie> That would be insane
[20:46:29] <FromDiscord> <Bubblie> But yeah lua lacks threads
[20:46:30] <FromDiscord> <Bubblie> There we go
[20:46:33] <FromDiscord> <hmmm> I'll give it a spin parti
[20:46:52] <FromDiscord> <Bubblie> Nim feels like a great scripting language and a great language by itself
[20:46:59] <FromDiscord> <Bubblie> Its like both
[20:47:01] <PMunch> Why would you want threads for a configuration?
[20:47:29] <FromDiscord> <Bubblie> Also lua arrays are weird especially with the indexes if I remember
[20:47:44] <PMunch> I mean I'm not complexity-shaming, but if your configuration logic requires multi-threading then you might be doing something wrong :P
[20:48:33] <FromDiscord> <Bubblie> Im confused I was talking about lua as a language
[20:49:02] <FromDiscord> <Bubblie> Im not shaming it for having these features, as it actually does make sense why it doesn’t have a lot of features other languages have because of how small and light it was meant to be
[20:49:17] <FromDiscord> <Bubblie> Its supposed to be one the kost embeddable languages out there
[20:49:23] <FromDiscord> <Bubblie> (edit) "kost" => "most"
[20:50:32] <PMunch> Hmm, I'm struggling with how I want to organise this code
[20:50:53] <FromDiscord> <Bubblie> ?
[20:51:01] <PMunch> I'm using a C library, libcoap, to send some messages to turn on and off the lights at home
[20:51:13] <pro> libcoap nice :)
[20:52:52] <PMunch> The way it's designed is that you set a callback then queue a request, then call `coap_io_process` which will then process IO until it has received the next message. I have to call coap_io_process multiple times before the callback is triggered and I get the response to my request
[20:53:06] <FromDiscord> <Patitotective> In reply to @hmmm "I like niprefs because": check it again https://patitotective.github.io/niprefs/niprefs.html 👀
[20:53:11] <FromDiscord> <Patitotective> (edit) "https://patitotective.github.io/niprefs/niprefs.html" => "https://patitotective.github.io/niprefs/"
[20:53:12] <PMunch> This works, but it's a bit messy
[20:53:26] <FromDiscord> <frobnicate> Would you guys represent a 4x4 matrix as a type object with a one dimensional array or two dimensional array? I'm not sure it does a ton of difference since it's known size
[20:53:46] <FromDiscord> <Rika> if its an array
[20:53:53] <FromDiscord> <Bubblie> In reply to @PMunch "I'm using a C": Thats really cool!
[20:53:53] <FromDiscord> <Rika> theyre memory-equivalent
[20:53:55] <FromDiscord> <Rika> so use array
[20:53:59] <FromDiscord> <Rika> 2d
[20:54:08] <PMunch> @frobnicate, the memory layout is the same for array[4, array[4, int]] and array[4*4, int]
[20:54:13] <PMunch> So it doesn't really matter
[20:54:27] <FromDiscord> <frobnicate> Yeah that was why I was asking
[20:54:28] <PMunch> Use whatever is more convenient in your code :)
[20:54:31] <FromDiscord> <Rika> 2d array has "better" api
[20:55:35] <PMunch> `coap_io_process` takes a timeout value, so I could wrap it all in an async call I guess
[20:55:53] <PMunch> With a 100ms timeout or something like that..
[20:58:51] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Read error: Connection reset by peer)
[20:59:43] <FromDiscord> <hmmm> In reply to @Patitotective "check it again https://patitotective.github.io/nipr": lol seems appropriate I'm a new user of nipref
[21:00:10] <FromDiscord> <hmmm> I hope you set it up to be nimble installed because that's the extent of my installing powers 😄
[21:00:22] <FromDiscord> <Bubblie> PMunch, could there be a way to specify the sysPath automatically on install of Futhark?
[21:00:47] <FromDiscord> <Bubblie> Depending on the OS
[21:01:10] <FromDiscord> <frobnicate> I forget if there was a way to put restraints on generics
[21:01:11] <FromDiscord> <Bubblie> And could be specified yourself if needed
[21:01:27] <FromDiscord> <Rika> In reply to @frobnicate "I forget if there": like?
[21:01:32] <FromDiscord> <Solitude> In reply to @frobnicate "I forget if there": [T: not int]
[21:01:40] <FromDiscord> <frobnicate> Like only numbers
[21:01:42] <FromDiscord> <Rika> or any other type
[21:01:50] <FromDiscord> <Rika> `[T: SomeNumber]`
[21:01:52] <FromDiscord> <Rika> prolly?
[21:02:15] <FromDiscord> <Rika> https://nim-lang.org/docs/system.html#SomeNumber
[21:02:49] <FromDiscord> <frobnicate> ah thanks a bunch
[21:03:01] <FromDiscord> <frobnicate> it wasn't obvious from the generics tutorial page
[21:05:11] <PMunch> @Bubblie, yeah I'm looking into something like that
[21:05:41] <PMunch> Optimally I'd want to check which C compiler Nim was going to use, and then query that for where it keeps system libraries
[21:05:49] <FromDiscord> <frobnicate> Also the "refactor symbol" function doesn't work for me with the Konstantin Zaitsev Nim extension in VSC which is a little frustrating :/
[21:06:07] <PMunch> But I think a define symbol might be the easiest way to do it for now
[21:06:21] <PMunch> Then you could put it in your system Nim config
[21:07:27] <FromDiscord> <Rika> doesnt nim have facilities for checking what c compiler its gonna use or what
[21:08:07] <FromDiscord> <Bubblie> In reply to @PMunch "But I think a": Yeah
[21:08:09] <PMunch> Yeah it should have something
[21:08:11] <FromDiscord> <Recruit_main707> `when compileOption("cc") == "compiler"`?
[21:08:23] <PMunch> The problem is querying them
[21:08:42] <FromDiscord> <Bubblie> Futhark doesnt have cpp support yet right?
[21:10:09] <PMunch> Nope
[21:11:18] <FromDiscord> <Bubblie> Ah thats okay for the time being ig, I am mostly using c libraries anyway
[21:12:16] <FromDiscord> <Bubblie> Nim has c++ support right? I could just use full on nim if needed
[21:13:44] <FromDiscord> <Rika> yes
[21:14:23] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[21:14:36] <FromDiscord> <Bubblie> I think nim’s ffi is the best ffi ive seen in any language
[21:15:23] <FromDiscord> <Bubblie> Its so easy like what the hell, for java I have to use shitty jni and nim has really been spoiling me with the stuff it has
[21:15:24] *** Joins: Gustavo6046_ (~Gustavo60@user/gustavo6046)
[21:15:34] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Remote host closed the connection)
[21:17:09] <PMunch> It certainly helps compiling to C/C++ :P
[21:17:22] <PMunch> FFI in Nim is basically just telling Nim how to call C functions
[21:18:02] <FromDiscord> <Bubblie> Yeah
[21:20:26] <FromDiscord> <auxym> for c++ ffi I assume you have to use the cpp backend?
[21:21:09] <PMunch> Correct
[21:36:40] <NimEventer> New thread by Solomonthewise: `$` not working on custom type when imported in other modules, see https://forum.nim-lang.org/t/9050
[21:41:04] <FromDiscord> <Patitotective> if i have some type defined in the main module of my library and i want to use it on a module that is in `src/`, should i move the type from the main module to the one in `src/` or should i import the main module?
[21:42:06] <FromDiscord> <Rika> depends on you
[21:42:21] <FromDiscord> <Rika> either one works in certain circumstances
[21:43:50] <FromDiscord> <auxym> third option is to move the type into its own module, imported where its needed. Not uncommon to do that, or have a `common_types.nim` module with all shared types, since nim doesn't have circular imports (yet)
[21:46:34] <FromDiscord> <Rika> i personally use that third option, usually named `prelude` or `common`
[21:46:44] <FromDiscord> <huantian> In reply to @NimEventer "New Nimble package! rconv": Interesting…↵Universal is kind of misleading though, I’d expect more if it was truly universal
[21:47:18] <FromDiscord> <Patitotective> In reply to @Rika "i personally use that": only `common.nim`?
[21:47:22] <FromDiscord> <Rika> yes
[21:47:37] <FromDiscord> <Rika> because i do not only put types there
[21:49:35] <FromDiscord> <Patitotective> also, for nim modules, should i use camel or snake case?
[21:53:33] <FromDiscord> <Rika> snake
[21:53:44] <FromDiscord> <Rika> i believe it is snake
[22:02:26] <PMunch> No, it's camel
[22:02:34] <PMunch> Oh wait, for modules..
[22:02:45] <PMunch> Those tend to just be all lowercase
[22:02:51] <PMunch> But most are a single word
[22:06:29] <FromDiscord> <Patitotective> In reply to @PMunch "Those tend to just": well, if you say so
[22:06:36] <FromDiscord> <Patitotective> (edit) 04removed "well,"
[22:38:38] *** Quits: ltriant (~ltriant@194-223-10-27.tpgi.com.au) (Ping timeout: 272 seconds)
[22:39:49] <FromDiscord> <frobnicate> btw why isn't `--implicitStatic:on` default?
[22:45:27] <FromDiscord> <Rika> what does that do?
[22:45:47] <FromDiscord> <Rika> `--implicitStatic:on|off   turn implicit compile time evaluation on|off`
[22:45:58] <FromDiscord> <Rika> i dont know probably buggy/experimental in some way
[22:48:29] <FromDiscord> <Solitude> wtf, first time i see that flag
[22:50:33] <FromDiscord> <huantian> Maybe backwards compat?
[22:55:48] <FromDiscord> <Solitude> looking at the code, it is implicitly on
[22:56:57] <FromDiscord> <frobnicate> huh, I was led to believe that it wasn't because it doesn't work with the `compileTime` pragma
[22:57:09] <FromDiscord> <auxym> @ElegantBeef thanks for that pointer tutorial you linked yesterday, learned about the gcref/gcunref trick
[22:57:19] <FromDiscord> <frobnicate> Then again I'm looking at 3 year old stuff but it's the only I could find
[22:57:49] <FromDiscord> <Solitude> no clue, what are you talking about
[22:58:12] <FromDiscord> <Solitude> (edit) "clue," => "clue"
[23:00:31] <FromDiscord> <frobnicate> https://stackoverflow.com/questions/54766274/how-to-make-a-proc-available-compile-time-and-run-time
[23:05:08] <FromDiscord> <Rika> sent a code paste, see https://play.nim-lang.org/#ix=3TDt
[23:06:04] <FromDiscord> <Solitude> just call it with `static` if you need to force it to run at compiletime
[23:10:44] <FromDiscord> <frobnicate> In reply to @Solitude "just call it with": Well it was to avoid having to do static and leave it up to the compiler. But if you say it's on, I trust you
[23:11:16] <FromDiscord> <huantian> sent a code paste, see https://play.nim-lang.org/#ix=3TDv
[23:11:17] <FromDiscord> <frobnicate> also that post was like 3 years old so
[23:11:34] <FromDiscord> <frobnicate> I was just playing around with features
[23:12:35] <FromDiscord> <Solitude> In reply to @frobnicate "Well it was to": you can look for yourself, the only time the flag mentioned in compiler is for early return from compiletime optimisation
[23:14:07] <FromDiscord> <Solitude> but maybe im misunderstanding direction of logic there
[23:17:32] <FromDiscord> <Solitude> nah, im wrong, it isnt enabled by default
[23:20:43] <FromDiscord> <Rika> In reply to @huantian "Hm does overloading with": i would assume so, and i believe it does; the stdlib uses it
[23:20:47] <FromDiscord> <Rika> but not in that form
[23:21:57] <FromDiscord> <Solitude> sent a code paste, see https://play.nim-lang.org/#ix=3TDx
[23:31:36] <FromDiscord> <salt> sent a code paste, see https://play.nim-lang.org/#ix=3TDB
[23:31:54] <FromDiscord> <salt> (edit) "https://play.nim-lang.org/#ix=3TDB" => "https://play.nim-lang.org/#ix=3TDC"
[23:31:58] <FromDiscord> <Rika> static Size required
[23:32:04] <FromDiscord> <salt> (edit) "https://play.nim-lang.org/#ix=3TDC" => "https://play.nim-lang.org/#ix=3TDD"
[23:32:14] <FromDiscord> <Rika> hence you cannot use let as well
[23:32:52] <FromDiscord> <salt> const?
[23:33:10] <FromDiscord> <Solitude> yas
[23:33:40] <FromDiscord> <Rika> yes that works
[23:34:03] <FromDiscord> <salt> sent a code paste, see https://play.nim-lang.org/#ix=3TDF
[23:35:42] <FromDiscord> <Rika> huh
[23:36:14] <FromDiscord> <Rika> if i change it to `size[0]` and [1] it works
[23:36:15] <FromDiscord> <Rika> huuuuuuuuh
[23:36:24] <FromDiscord> <Rika> probably something about field access then no?
[23:37:37] <FromDiscord> <salt> doesn't like a named tuple there? i dunno, i'm new to nim and just exploring
[23:39:37] <FromDiscord> <salt> sent a code paste, see https://play.nim-lang.org/#ix=3TDG
[23:40:16] <FromDiscord> <wsantos> How do you guys do unittest/tdd with Nim ? how do you guys organize them also is there a way to mock/monkey patch stuff ?
[23:40:33] <FromDiscord> <Rika> exploit generics and concepts?
[23:40:57] <FromDiscord> <wsantos> Oh so "same" as in golang with interfaces, right ?
[23:41:02] <FromDiscord> <huantian> Organization isn’t reqllyvlang dependent
[23:42:38] <FromDiscord> <huantian> I’ve never been too sure how mocking works
