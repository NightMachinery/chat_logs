[00:01:23] <nightstrike> in my case, the declaration is autogenerated by things I can't control, and it uses static (which is fine for this purpose), so I was just wondering if I should not write static when implementing it
[00:02:27] <fizzie> If you do plan to have separate declarations apart from their definitions for static functions, you don't *have* to have a `static` in the latter, but you are allowed to, and it's probably a good idea to.
[00:03:48] <nightstrike> ok
[00:03:55] <nightstrike> ty for the feedback
[00:04:09] <nightstrike> I do see how it's less ambiguous to put it in both places
[00:04:10] <fizzie> The relevant bit of the standard is C11 6.2.2p4-5: "For an identifier declared with the storage-class specifier extern in a scope in which a prior declaration of that identifier is visible,31) if the prior declaration specifies internal or external linkage, the linkage of the identifier at the later declaration is the same as the linkage specified at the prior declaration. -- If the declaration of an
[00:04:12] <fizzie> identifier for a function has no storage-class specifier, its linkage is determined exactly as if it were declared with the storage-class specifier extern."
[00:04:55] <esselfe> pragma-: crisse
[00:04:58] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Quit: sord937)
[00:05:57] <esselfe> I use extern only in headers
[00:06:09] <esselfe> for my globals
[00:06:18] <esselfe> yeah yeah I know globals don't exist :P
[00:06:38] <esselfe> !globals
[00:06:49] *** Quits: BSaboia (~bsaboia@2a05:f480:1400:b88:5400:3ff:fe51:575c) (Quit: ZNC - https://znc.in)
[00:07:58] <masoudd> ,global
[00:07:58] <candide> There is no "global" scope in C. There are four kinds of scopes: function, file, block, and function prototype. A variable that appears outside of any block or list of parameters has file scope, which terminates at the end of the translation unit.
[00:08:00] <nightstrike> Extern is a lot more important after gcc 10 or 11
[00:08:33] <ChoHag> In some sense there is a global scope but only the compiler/linker knows about it.
[00:09:08] <esselfe> but the thing is I define 'int var = 1;' in test.c, then "extern int var;" in test.h and by including test.h in sample.c I can access it
[00:09:23] <esselfe> so the scope is out of the file
[00:09:27] *** Quits: gdd (~gdd@129.199.146.230) (Quit: WeeChat 3.3)
[00:09:41] *** Joins: BSaboia (~bsaboia@95.179.154.99)
[00:10:36] <esselfe> (needs an #ifndef TEST_H\n#define TEST_H 1\n[...]\n#endif to work though)
[00:10:49] <ChoHag> The extern marker says that the variable is defined in some other (file) scope.
[00:11:16] <esselfe> yes and it becomes accessible for other file including it
[00:11:48] *** Quits: drbeco (~beco@2804:351c:dd03:3500:e47a:cfbe:a980:776b) (Ping timeout: 240 seconds)
[00:12:24] <ChoHag> The same storage becomes accessible in other file scopes which declare it extern and are appropriately linked.
[00:15:17] *** Joins: shivesh (~shivesh@user/shivesh)
[00:16:27] *** Joins: lukedashjr (~luke-jr@user/luke-jr)
[00:16:32] *** Quits: luke-jr (~luke-jr@user/luke-jr) (Ping timeout: 240 seconds)
[00:17:39] *** Joins: gdd (~gdd@129.199.146.230)
[00:18:09] *** lukedashjr is now known as luke-jr
[00:19:55] *** Quits: SaltHilStroller_ (~SaltHillS@206.223.160.26) (Read error: Connection reset by peer)
[00:20:20] *** Joins: SaltHilStroller_ (~SaltHillS@206.223.160.26)
[00:23:03] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Ping timeout: 272 seconds)
[00:23:17] *** Quits: SaltHillStroller (~SaltHillS@206.223.160.26) (Ping timeout: 240 seconds)
[00:23:25] *** Joins: SaltHillStroller (~SaltHillS@206.223.160.26)
[00:24:02] <System_Error> <nightstrike> Extern is a lot more important after gcc 10 or 11 <- did they changed smth?
[00:24:42] <nightstrike> yeah, I'll find the link
[00:26:31] <nightstrike> System_Error: GCC now defaults to -fno-common. As a result, global variable accesses are more efficient on various targets. In C, global variables with multiple tentative definitions now result in linker errors. With -fcommon such definitions are silently merged during linking.  https://gcc.gnu.org/gcc-10/changes.html
[00:26:33] <candide> Title of nightstrike's link: GCC 10 Release Series — Changes, New Features, and Fixes - GNU Project
[00:26:41] *** Joins: boB_K7IQ (~boB_K7IQ@184-98-165-139.phnx.qwest.net)
[00:26:55] *** Quits: SaltHillStroller (~SaltHillS@206.223.160.26) (Read error: Connection reset by peer)
[00:27:19] *** Joins: SaltHillStroller (~SaltHillS@206.223.160.26)
[00:29:42] *** Joins: orestarod (~orestarod@2a02:2149:8b20:700:2b9d:7f86:7169:61c0)
[00:31:16] *** Quits: SaltHilStroller_ (~SaltHillS@206.223.160.26) (Ping timeout: 272 seconds)
[00:31:28] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:602f:2025:c843:6cf4) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[00:31:48] *** Quits: magla (~gelignite@55d4d6c3.access.ecotel.net) (Quit: Stay safe!)
[00:32:01] *** Joins: SaltHilStroller_ (~SaltHillS@206.223.160.26)
[00:32:46] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Excess Flood)
[00:33:01] *** Joins: Tang3nt-Man (~Tang3nt-M@138.199.21.54)
[00:33:49] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:602f:2025:c843:6cf4)
[00:34:07] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[00:35:13] *** Quits: ioxzev1z (~ioxzev1z@user/ioxzev1z) (Quit: Leaving)
[00:35:17] *** Quits: Tangent-Man (~Tang3nt-M@cpc145602-basl14-2-0-cust33.20-1.cable.virginm.net) (Ping timeout: 240 seconds)
[00:35:34] <duds-> i'm following a book on programming C and this exercise doesn't behave how it should https://github.com/Apress/beginning-c-6e/blob/master/Chapter%2005/program5_06.c
[00:36:07] <duds-> i wrote it down exactly as in the book, didn't work, so i compiled the original file from the publisher, also didn't work
[00:36:20] *** Quits: Maxdamantus (~Maxdamant@user/maxdamantus) (Ping timeout: 272 seconds)
[00:36:57] *** Joins: Maxdamantus (~Maxdamant@user/maxdamantus)
[00:37:03] <duds-> this is how, according to the book, it *should* work: https://paste.linux.chat/?9c02b4644ef7094b#8Hze1ZDP57S67KLtuC6oYu1mcuoVZRBmyRrWrJUzTwAq
[00:37:27] <duds-> when entering 22.5 as in the first step in the past, i do get the same result
[00:37:43] *** Joins: Torr (~Torr@user/torr)
[00:37:47] *** Quits: tech_exorcist (txrcst@user/tech-exorcist/x-0447479) (Remote host closed the connection)
[00:38:00] *** Joins: tech_exorcist (txrcst@user/tech-exorcist/x-0447479)
[00:38:01] *** Joins: AbleBacon (~AbleBacon@user/AbleBacon)
[00:38:12] *** Quits: SaltHillStroller (~SaltHillS@206.223.160.26) (Ping timeout: 240 seconds)
[00:38:17] <duds-> but when entering a 29 as in the second step in the paste, it gives me "Your hat size is 3 4/" instead of "You, in technical parlance, are a fathead. No hat for you I'm afraid."
[00:38:40] <duds-> so somehow hat_found is always true, for some reason. weird.
[00:38:56] *** Quits: SaltHilStroller_ (~SaltHillS@206.223.160.26) (Read error: Connection reset by peer)
[00:39:17] *** Joins: SaltHillStroller (~SaltHillS@206.223.160.26)
[00:39:21] *** Joins: SaltHilStroller_ (~SaltHillS@206.223.160.26)
[00:39:29] *** Quits: merrinx (~merrinx@ti0028a400-3686.bb.online.no) (Quit: WeeChat 3.3)
[00:43:20] *** Joins: meator (~meator@user/meator)
[00:44:29] <twkm> scanf used without checking the return value.  (shittyscript only paste ignored)
[00:44:34] *** Quits: SaltHilStroller_ (~SaltHillS@206.223.160.26) (Ping timeout: 272 seconds)
[00:44:34] *** Quits: SaltHillStroller (~SaltHillS@206.223.160.26) (Ping timeout: 272 seconds)
[00:45:31] <twkm> sorry, that was a drive-by, i'm headed out.
[00:45:37] *** Joins: SaltHilStroller_ (~SaltHillS@206.223.160.26)
[00:45:37] *** Joins: SaltHillStroller (~SaltHillS@206.223.160.26)
[00:46:06] <nitrix> duds-, i < sizeof(headsize) is incorrect.
[00:47:02] <duds-> so how should it be written?
[00:47:25] <nitrix> duds-, The loop is ought to do 12 iterations, instead it does 12*sizeof(int) iterations, reading things outside of bounds and accidently finding a match, setting hat_found to true.
[00:47:37] <duds-> i don't know much C yet so i expected the book to teach me. :/
[00:47:48] <duds-> i see
[00:47:49] <nitrix> duds-, (sizeof headsize / sizeof headsize[0])
[00:48:22] <nitrix> #define ARRAY_COUNT(arr) (sizeof (arr) / sizeof (arr)[0]) if you want a nice macro to use.
[00:48:56] <masoudd> ,cc int headsize[12]; size_t i = sizeof(headsize);
[00:48:58] <candide> masoudd: no output: headsize = {0, 0, -143362917, 32767, 4317584, 0, 0, 0, 0, 0, 0, 0}; i = 48
[00:49:15] <masoudd> notice i is not 12 here.
[00:49:17] <nitrix> There's an important difference between the count of an array (the number of elements) vs. the size of an array (the number of bytes).
[00:49:40] <duds-> huh that worked nitrix!
[00:49:42] <duds-> thanks!
[00:49:59] <nitrix> duds-, Are you on a unix-ish system?
[00:50:17] <duds-> yes, linux
[00:50:29] <nitrix> duds-, Do me a favor and compile with -fsanitize=undefined,address then re-run the program.
[00:50:48] *** Quits: shivesh (~shivesh@user/shivesh) (Quit: leaving)
[00:50:59] <duds-> with the modification you told me about, right?
[00:51:00] <nitrix> A sanitizer should've caught the out-of-bounds invalid memory access.
[00:51:11] <nitrix> No, the original one you had.
[00:51:17] <duds-> alright
[00:51:35] *** Quits: crashrep (~crashrep@user/crashrep) (Ping timeout: 240 seconds)
[00:51:40] <Dean> I'm trying to tabulate votes for people (candidates) in a function called 'tabulate', but my totals returned aren't correct. I can't seem to figure out what I am doing wrong in this 'tabulate' function. https://paste.debian.net/1231909/
[00:51:47] <duds-> nitrix, no output
[00:51:56] <nitrix> duds-, You have to run it and trigger the bogus code.
[00:51:59] <duds-> oh!
[00:52:13] <duds-> yep, it returned something...
[00:52:40] *** Joins: crashrep (~crashrep@user/crashrep)
[00:52:47] *** Quits: eroux (~eroux@102-65-85-242.ftth.web.africa) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[00:53:02] *** Quits: meator (~meator@user/meator) (Quit: Leaving)
[00:53:04] <duds-> you want to see it, nitrix ?
[00:53:17] *** Quits: joev (~joev@user/joev) (Ping timeout: 240 seconds)
[00:53:17] *** Joins: meator (~meator@user/meator)
[00:53:35] <masoudd> yes please
[00:53:38] <nitrix> duds-, If you can. I'm curious which lines it reports as the problem. I'm hoping it's the loop, but probably will be the access inside the body.
[00:54:12] <nitrix> Still a good way of identifying what's gone wrong when you're in the dark.
[00:54:17] <duds-> https://paste.linux.chat/?6a91dc3a3e5a20a9#bqswdPSdUYFq78YawzidaWSVnmaDy1TKaLsYqzBV4M1
[00:54:24] *** Quits: natechan (~nate@108-233-125-227.lightspeed.sntcca.sbcglobal.net) (Read error: Connection reset by peer)
[00:55:36] *** Joins: joev (~joev@user/joev)
[00:56:15] *** Joins: natechan (~nate@108-233-125-227.lightspeed.sntcca.sbcglobal.net)
[00:56:30] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[00:56:30] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[00:56:30] *** Joins: wroathe (~wroathe@user/wroathe)
[00:56:44] <nitrix> Mhh.., it says size.c line 44, index out of bounds, which isn't quite there, but then it mentions a read overflowing the `headsize` array, so it's redeeming itself a little bit.
[00:57:22] <duds-> oh i ran it on my original hat size.c rather than the github so the wrong line number is expected
[00:57:39] <duds-> since i wrote it by hand from the book
[00:57:46] <duds-> rather than using the publisher one :p
[00:57:46] *** Joins: WidTurnur39 (~WidTurnur@101.164.208.46.dyn.plus.net)
[00:57:55] *** Quits: crashrep (~crashrep@user/crashrep) (Ping timeout: 240 seconds)
[01:00:22] <nitrix> I went by deduction. The line got printed, so hat_found was true, so the loop must've thought it found something, I looked to make sure hat_found was initialized to false, then focused on the condition, which properly checked the sizes, then the hardcoded array to make sure 29 (232) wouldn't be in there, which only left the loop itself to be incorrect.
[01:00:54] *** Quits: meator (~meator@user/meator) (Quit: Leaving)
[01:01:34] *** Joins: WidTurnur (~WidTurnur@101.164.208.46.dyn.plus.net)
[01:01:47] *** Quits: WidTurnur39 (~WidTurnur@101.164.208.46.dyn.plus.net) (Client Quit)
[01:02:37] <duds-> sugoi............
[01:03:15] *** Joins: merrinx (~merrinx@ti0028a400-3686.bb.online.no)
[01:03:18] *** Quits: WidTurnur (~WidTurnur@101.164.208.46.dyn.plus.net) (Quit: Quit)
[01:03:25] <duds-> may i learn your skills in time (シ_ _)シ (シ_ _)シ
[01:03:32] <NRK> ,cc puts("desu");
[01:03:34] <candide> NRK: desu
[01:04:01] *** Joins: WidTurnur (~WidTurnur@101.164.208.46.dyn.plus.net)
[01:07:32] <nitrix> ,japan may i learn your skills in time
[01:07:33] <candide> may i ruahno youro skirrs ino time
[01:08:51] *** Joins: kitsunenokenja (~kitsunech@68.91.220.96)
[01:08:58] *** Quits: BSaboia (~bsaboia@95.179.154.99) (Quit: ZNC - https://znc.in)
[01:09:59] *** Quits: tech_exorcist (txrcst@user/tech-exorcist/x-0447479) (Quit: Disconnecting)
[01:10:08] *** Joins: zeenk (~zeenk@2a02:2f04:a30d:1300:51a3:bcfc:6cda:9fc5)
[01:10:35] <Dean> fixed it!
[01:10:37] <Inline> hi
[01:10:55] *** Quits: SaltHilStroller_ (~SaltHillS@206.223.160.26) (Ping timeout: 256 seconds)
[01:10:55] *** Quits: SaltHillStroller (~SaltHillS@206.223.160.26) (Ping timeout: 256 seconds)
[01:10:57] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[01:11:27] <Inline> why is a function defined as inline size_t not seen in the same tui but one declared with static inline size_t is seen?
[01:12:30] <Inline> i got a undefined reference to buffer_left which is defined as inline size_t and referenced from some other function later on in the same file
[01:12:43] *** Joins: Guest96fd (~Guest96fd@206.223.160.26)
[01:12:44] <Inline> but  i get a compilation error with that
[01:13:03] *** Joins: BSaboia (~bsaboia@2a05:f480:1400:b88:5400:3ff:fe51:575c)
[01:13:08] *** Quits: kenanmarasli (~kenanmara@user/kenanmarasli) (Quit: Leaving)
[01:14:13] <Guest96fd> Is there a way to stack allocate a struct with an FAM? I want to avoid doing several mallocs
[01:14:14] <Inline> i've seen other funcs in the same manner like buffer_pos which was declared as static inline size_t and that one seems to be seen and doesn't cause an undefined reference error when compiling, so i changed buffer_left to static inline size_t too and now the compilation is ok
[01:14:15] *** Quits: ZedHedTed (~ZedHedTed@user/zedhedted) (Remote host closed the connection)
[01:14:27] <Inline> oh man
[01:14:30] *** Joins: oriba (~oriba@dynamic-078-054-159-212.78.54.pool.telefonica.de)
[01:14:30] *** Joins: ZedHedTed (~ZedHedTed@user/zedhedted)
[01:14:57] <Inline> elfutils elflint.c
[01:16:00] <nitrix> Inline, There's only two valid ways to do it: a definition (static inline) or a declaration (extern inline). inline alone doesn't do what you'd think, it's a hint to prevent conflicting symbols, but it also doesn't guarantee the generation of symbols, it's very confusing unfortunately.
[01:16:13] <Inline> ok
[01:16:21] <Inline> yeah got that thank you nitrix
[01:16:47] *** Joins: wroathe (~wroathe@user/wroathe)
[01:17:18] <nitrix> Like, you'd need `inline void foo(void);` followed by `void foo(void);` to have both the compiler hint + a proper declaration.
[01:17:40] <Inline> ah
[01:17:49] <nitrix> Even the standard is confusing as hell with that, the information is spread in multiple clauses.
[01:17:54] <Inline> oooO
[01:18:34] *** Joins: crashrep (~crashrep@user/crashrep)
[01:19:44] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:602f:2025:c843:6cf4) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[01:19:48] *** Quits: mikoto-chan (~mikoto-ch@213.177.151.239) (Ping timeout: 240 seconds)
[01:20:02] *** Quits: Guest96fd (~Guest96fd@206.223.160.26) (Quit: Client closed)
[01:20:11] <nitrix> Guest96fd, They require either allocated storage (with malloc/calloc/realloc) or you have to get creative with VLAs or your own byte buffer.
[01:20:49] <nitrix> `sizeof foo` provi.... they're gone.
[01:20:58] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 250 seconds)
[01:21:11] <nitrix> I guess I took too long :(
[01:21:41] *** Joins: z4kpi (~z4kpi@user/zacts)
[01:22:35] *** Quits: crashrep (~crashrep@user/crashrep) (Ping timeout: 240 seconds)
[01:23:47] *** Joins: crashrep (~crashrep@user/crashrep)
[01:25:13] *** Joins: circd (~TODO@142.167.143.188)
[01:25:48] <Inline> s/tui/TU/ meh
[01:27:18] *** Quits: strajder (~strajder@user/strajder) (Quit: leaving)
[01:27:54] *** Joins: seninha (~chatzilla@user/seninha)
[01:29:29] *** Quits: circd (~TODO@142.167.143.188) (Remote host closed the connection)
[01:31:21] *** Joins: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f)
[01:32:37] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 240 seconds)
[01:32:43] *** Quits: placeb0 (uid283215@id-283215.lymington.irccloud.com) (Quit: Connection closed for inactivity)
[01:33:28] *** Quits: z4kpi (~z4kpi@user/zacts) (Quit: Client closed)
[01:34:18] *** Joins: inlight (~n0ise@user/inlight)
[01:34:40] *** Joins: loganlee[gnu] (~Thunderbi@user/loganlee)
[01:38:26] *** Joins: SymbioticFemale (~Symbiotic@user/SymbioticFemale)
[01:39:29] *** Quits: malloy (~jimery@116.30.220.175) (*.net *.split)
[01:39:29] *** Quits: Tempesta (~Tempesta@user/tempesta) (*.net *.split)
[01:39:53] *** Joins: malloy (~jimery@116.30.220.175)
[01:40:12] *** Quits: aradesh (~aradesh@user/aradesh) (Quit: WeeChat 1.9.1)
[01:40:42] *** Joins: Tempesta (Tempesta@183.98.39.112)
[01:40:42] *** Quits: Tempesta (Tempesta@183.98.39.112) (Changing host)
[01:40:42] *** Joins: Tempesta (Tempesta@user/tempesta)
[01:40:44] *** Quits: Tempesta (Tempesta@user/tempesta) (Excess Flood)
[01:41:54] *** Joins: Tempesta (Tempesta@183.98.39.112)
[01:41:54] *** Quits: Tempesta (Tempesta@183.98.39.112) (Changing host)
[01:41:54] *** Joins: Tempesta (Tempesta@user/tempesta)
[01:41:55] *** Quits: Tempesta (Tempesta@user/tempesta) (Excess Flood)
[01:43:06] *** Joins: Tempesta (Tempesta@183.98.39.112)
[01:43:07] *** Quits: Tempesta (Tempesta@183.98.39.112) (Changing host)
[01:43:07] *** Joins: Tempesta (Tempesta@user/tempesta)
[01:43:08] *** Quits: Tempesta (Tempesta@user/tempesta) (Excess Flood)
[01:43:30] *** Quits: boB_K7IQ (~boB_K7IQ@184-98-165-139.phnx.qwest.net) ()
[01:44:17] *** Joins: Tempesta (Tempesta@183.98.39.112)
[01:44:17] *** Quits: Tempesta (Tempesta@183.98.39.112) (Changing host)
[01:44:17] *** Joins: Tempesta (Tempesta@user/tempesta)
[01:44:18] *** Quits: Tempesta (Tempesta@user/tempesta) (Excess Flood)
[01:48:16] *** Joins: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net)
[01:48:54] *** Quits: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net) (Remote host closed the connection)
[01:50:03] *** Joins: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net)
[01:50:12] *** Quits: luke-jr (~luke-jr@user/luke-jr) (Ping timeout: 240 seconds)
[01:50:34] *** Joins: luke-jr (~luke-jr@user/luke-jr)
[01:53:04] <fizzie> It *is* a little spread out, but 6.7.4p7 does describe the most confusing bit, which is: "If all the file scope declarations for a function in a translation unit include the `inline` function specifier without `extern`, then the definition in that translation unit is an /inline definition/. An inline definition does not provide an external definition for the function -- [but] provides an alternative to
[01:53:06] <fizzie> an external definition, which a translator may use to implement any call to the function in the same translation unit. It is unspecified whether a call to the function uses the inline definition or the external definition."
[01:53:27] *** Joins: alex11 (~alex11@user/alex11)
[01:53:45] *** Quits: slidercrank (~slidercra@user/slidercrank) (Ping timeout: 256 seconds)
[01:54:38] <Inline> ah
[01:55:01] <fizzie> Or more briefly: a plain `inline` definition only provides an alternative for an external definition, which the compiler isn't required to use, and if it decides not to use it you'll get errors about undefined references unless you provide an external one as well.
[01:55:28] <Inline> so wait extern inline size_t would have worked too ?
[01:56:18] <Inline> but that' just sound so wrong, when the thing in question is in the same file not even coming outside ....
[01:56:19] <fizzie> Yes, I believe, but you couldn't put that in a header, because then you end up with multiple external definitions.
[01:56:30] <Inline> ok
[01:56:34] *** Joins: z4kpi (~z4kpi@user/zacts)
[01:56:58] <Inline> yes absolutely confusing
[01:57:23] *** Quits: luke-jr (~luke-jr@user/luke-jr) (Ping timeout: 256 seconds)
[01:57:24] <nitrix> Yep. The status-quo is forget inline and let the optimizer inline things for you.
[01:57:51] *** Joins: lukedashjr (~luke-jr@user/luke-jr)
[01:58:13] <fizzie> In a single translation unit you *could* use `extern inline ...`, and with an appropriate declaration also use that definition from other translation units too (as a regular function with external linkage), but it'd be a little odd.
[01:59:10] *** Joins: circd (~TODO@142.167.143.188)
[01:59:34] *** lukedashjr is now known as luke-jr
[01:59:37] <nitrix> A function without inline might get inlined and a function with inline might not, so at that point why bother. Let the optimizer decide and for the rare case where it's necessary, there are better suited compiler attributes like GCC/Clang's __attribute__((always_inline)).
[01:59:39] *** Quits: byteskeptical (~amnesia@user/byteskeptical) (Quit: leaving)
[02:00:12] *** Joins: Atque (~Atque@user/atque)
[02:00:52] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[02:01:30] *** Quits: circd (~TODO@142.167.143.188) (Client Quit)
[02:01:37] *** Quits: joev (~joev@user/joev) (Ping timeout: 240 seconds)
[02:02:37] *** Joins: lukedashjr (~luke-jr@user/luke-jr)
[02:03:35] <nitrix> Not to mention, optimized functions that gets inlined are almost unrecognizable. The statements are pieced up in-between instructions and they usually cause a flurry of optimizations upwards. Entire loops gets eliminated, registers re-used, so on.
[02:03:40] *** Joins: joev (~joev@user/joev)
[02:04:24] <nitrix> It's a massive part of what makes the optimizers work, so the heuristics for inlining have gotten really good.
[02:05:02] *** Quits: luke-jr (~luke-jr@user/luke-jr) (Ping timeout: 256 seconds)
[02:05:43] *** lukedashjr is now known as luke-jr
[02:07:32] <oldlaptop> It might have a similar justification to register, i.e. prevent you from accidentally preventing the optimization (or, in the case of inlining, forcing it to occur at a later stage where many toolchains won't know how to perform it)
[02:08:19] <oldlaptop> (should make sure there's a definition in the translation unit using it, no?)
[02:08:38] <oldlaptop> just as register makes sure nobody forces an address to exist
[02:08:51] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:602a:2cae:7652:6a22)
[02:08:55] *** Quits: noteness (~noteness@user/noteness) (Ping timeout: 240 seconds)
[02:09:03] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[02:09:13] *** Quits: wovixo (~wovixo@128.104.205.49) (Quit: Leaving)
[02:09:14] *** Joins: noteness (~noteness@user/noteness)
[02:09:43] *** Quits: gh34 (~textual@cpe-184-58-181-106.wi.res.rr.com) (Quit: Textual IRC Client: www.textualapp.com)
[02:10:05] *** Joins: aqua (~aqua@user/aqua)
[02:10:28] *** Quits: z4kpi (~z4kpi@user/zacts) (Quit: Client closed)
[02:12:35] *** Quits: crashrep (~crashrep@user/crashrep) (Ping timeout: 240 seconds)
[02:13:57] *** Quits: moog_ (~moog@107.77.244.141) (Ping timeout: 240 seconds)
[02:14:28] *** Quits: kish` (~aqua@user/aqua) (Remote host closed the connection)
[02:14:40] *** Quits: WidTurnur (~WidTurnur@101.164.208.46.dyn.plus.net) (Ping timeout: 256 seconds)
[02:15:23] *** Quits: brad_mssw|mac (~bhouse@c-76-106-206-149.hsd1.fl.comcast.net) (Quit: Leaving)
[02:15:48] *** Quits: adip_ (~adip@aeiw26.neoplus.adsl.tpnet.pl) (Ping timeout: 256 seconds)
[02:16:23] *** Joins: lukedashjr (~luke-jr@user/luke-jr)
[02:16:56] *** Quits: luke-jr (~luke-jr@user/luke-jr) (Ping timeout: 256 seconds)
[02:16:56] *** Quits: adip (~adip@aeiw26.neoplus.adsl.tpnet.pl) (Ping timeout: 256 seconds)
[02:17:31] *** Quits: rgrinberg (~textual@2806:101e:7:70b6:a1e9:5294:11ab:484a) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[02:19:12] *** Quits: kitsunenokenja (~kitsunech@68.91.220.96) (Ping timeout: 256 seconds)
[02:20:09] *** Joins: adip (~adip@aeiw26.neoplus.adsl.tpnet.pl)
[02:20:12] *** Joins: z4kpi (~z4kpi@user/zacts)
[02:20:23] *** Joins: adip_ (~adip@aeiw26.neoplus.adsl.tpnet.pl)
[02:20:43] *** Quits: Akuli (~Akuli@82-203-160-215.bb.dnainternet.fi) (Quit: Akuli)
[02:21:59] <Inline> not sure if one should really deport all the optimization language to somewhere else, instead of leaving it in the language itself....
[02:22:06] *** Quits: lukedashjr (~luke-jr@user/luke-jr) (Ping timeout: 272 seconds)
[02:23:36] *** Joins: zuplex (~zuplex@202.51.76.195)
[02:24:07] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[02:24:35] *** Joins: Y4knotiS (~YaknotiS@cpc1-cmbg18-2-0-cust87.5-4.cable.virginm.net)
[02:24:54] *** Joins: kman (sid74249@id-74249.hampstead.irccloud.com)
[02:25:21] *** Quits: Dean (~Dean@user/De4n-Whit3/x-9385125) (Read error: Connection reset by peer)
[02:26:08] *** Quits: constxd (~brad@142.134.79.191) (Quit: WeeChat 2.8)
[02:26:10] *** Joins: drbeco (~beco@2804:351c:dd00:f100:2b17:8b50:fe72:25ea)
[02:28:50] *** Quits: adip (~adip@aeiw26.neoplus.adsl.tpnet.pl) (Ping timeout: 256 seconds)
[02:29:04] *** Quits: adip_ (~adip@aeiw26.neoplus.adsl.tpnet.pl) (Ping timeout: 272 seconds)
[02:29:42] *** Quits: mahmutov (~mahmutov@37.155.63.68) (Ping timeout: 272 seconds)
[02:32:52] *** Quits: geowiesnot (~user@5-51-190-244.abo.bbox.fr) (Ping timeout: 272 seconds)
[02:33:03] *** Quits: nyah (~nyah@05453449.skybroadband.com) (Quit: leaving)
[02:33:05] *** Quits: pizdets_ (~pizdets@183.182.111.141) (Ping timeout: 250 seconds)
[02:33:53] *** Joins: pizdets (~pizdets@183.182.115.20)
[02:34:41] *** Joins: tc__ (~tc@103-140-203-11.vic.as139284.net.au)
[02:34:51] *** Quits: karakedi (~eAC53C340@user/karakedi) (Remote host closed the connection)
[02:35:35] *** Quits: System_Error (~SystemErr@user/systemerror) (Ping timeout: 240 seconds)
[02:35:37] *** Joins: SystemError (~SystemErr@user/systemerror)
[02:36:13] *** SystemError is now known as System_Error
[02:38:34] *** Quits: tc_ (~tc@103-140-203-11.vic.as139284.net.au) (Ping timeout: 272 seconds)
[02:39:27] *** Quits: SymbioticFemale (~Symbiotic@user/SymbioticFemale) (Remote host closed the connection)
[02:42:59] *** Joins: karakedi (~eAC53C340@user/karakedi)
[02:44:47] *** Quits: Rynn (~rynn@216.30.158.198) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[02:45:14] *** Joins: Rynn (~rynn@216.30.158.198)
[02:45:35] *** Quits: blindguard (~blindguar@2a02:908:1864:c200::ef3c) (Quit: Konversation terminated!)
[02:46:44] *** Quits: Rynn (~rynn@216.30.158.198) (Client Quit)
[02:48:12] *** Quits: cherrry9 (~jan@ded246.neoplus.adsl.tpnet.pl) (Ping timeout: 240 seconds)
[02:49:38] *** Joins: joolma (uid527699@id-527699.uxbridge.irccloud.com)
[02:52:56] *** Quits: Livio (~livio@user/livio) (Ping timeout: 252 seconds)
[02:54:02] *** Joins: xel_ (~xel@user/xel)
[02:54:05] *** Quits: mrig (~mrig@user/mrig) (Quit: WeeChat 2.8)
[02:54:18] *** Quits: xel_ (~xel@user/xel) (Remote host closed the connection)
[02:54:36] *** Joins: xel_ (~xel@user/xel)
[02:55:10] *** Quits: z4kpi (~z4kpi@user/zacts) (Quit: Client closed)
[02:55:40] *** Quits: xel (~xel@user/xel) (Ping timeout: 272 seconds)
[02:56:34] *** xel_ is now known as xel
[02:56:37] *** Quits: Chompy (~chpy@30-8-178-69.static.gci.net) (Ping timeout: 240 seconds)
[02:58:30] *** Joins: z4kpi (~z4kpi@user/zacts)
[02:58:35] *** Joins: AmR (~AmREiSa@156.199.47.115)
[02:58:50] *** Quits: joev (~joev@user/joev) (Ping timeout: 272 seconds)
[02:59:37] *** Joins: joev (~joev@user/joev)
[02:59:38] *** Quits: merrinx (~merrinx@ti0028a400-3686.bb.online.no) (Quit: WeeChat 3.3)
[03:00:38] *** Quits: LucaTM (~LucaTM@user/lucatm) (Quit: Textual IRC Client: www.textualapp.com)
[03:03:17] *** Joins: freakazoid333 (~matt@2603:9000:cf03:86c3:1939:d42:288:3891)
[03:03:24] *** Joins: soapsudsxx (~soapsudsx@141.193.188.140)
[03:04:16] *** Quits: nostar (~nostar@2601:406:4100:34d:8f4:5ea7:30b2:b7e6) (Quit: Leaving)
[03:04:31] *** Joins: ian| (~kvirc@cpe-104-228-101-152.stny.res.rr.com)
[03:04:57] *** Joins: kurahaupo (~kurahaupo@115.69.27.211)
[03:04:58] *** Joins: moog (~moog@107.126.53.146)
[03:06:49] <ian|> is there any use for abort(); in daily code?
[03:06:55] <ian|> <stdlib.h>
[03:08:02] *** Quits: cebor (~cebor@user/cebor) (Quit: bye!)
[03:09:29] *** Joins: cebor (~cebor@user/cebor)
[03:13:51] <fizzie> I guess that depends on what "daily" means. It's what the assert does on failure, so it could be a rational action for those "this should be impossible, and can't really be recovered from, but let's add a check anyway to make it behave more predictably" kind of situations. Though it's more than a little abrupt. Especially in library-style code where the surrounding application might want to ensure some
[03:13:53] <fizzie> cleanup.
[03:13:56] <nitrix> No, they used it, then implemented it, then standardized it for no good reasons.
[03:14:07] *** moose` is now known as moose
[03:16:17] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.4)
[03:17:13] <ian|> ok, i use assert() a lot and didn't know it called abort()
[03:18:38] *** Joins: boB_K7IQ (~boB_K7IQ@184-98-165-139.phnx.qwest.net)
[03:19:20] *** Quits: cosimone (~user@93-34-132-33.ip49.fastwebnet.it) (Quit: ERC (IRC client for Emacs 27.1))
[03:19:38] <fizzie> It prints a thing first, and "then calls the `abort` function" (C11 7.2.1.1p2). Modulo the usual as-if rule: it doesn't have to literally call `abort()` as long as the observable behavior is as if it did.
[03:21:51] *** Quits: oriba (~oriba@dynamic-078-054-159-212.78.54.pool.telefonica.de) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[03:23:14] *** Quits: ho4x (~jh@vps2023712.fastwebserver.de) (Ping timeout: 256 seconds)
[03:23:52] *** Quits: rkta (~rkta@2001:4ba0:cafe:eaf::1) (Read error: Connection reset by peer)
[03:27:26] *** Quits: zeenk (~zeenk@2a02:2f04:a30d:1300:51a3:bcfc:6cda:9fc5) (Quit: Konversation terminated!)
[03:28:17] *** Quits: wootehfoot (~wootehfoo@user/wootehfoot) (Ping timeout: 240 seconds)
[03:28:20] *** Joins: crashrep (~crashrep@user/crashrep)
[03:32:35] *** Quits: crashrep (~crashrep@user/crashrep) (Ping timeout: 240 seconds)
[03:41:26] *** Quits: Klinda (~superleag@user/klinda) (Quit: Konversation terminated!)
[03:42:31] *** Quits: ian| (~kvirc@cpe-104-228-101-152.stny.res.rr.com) (Quit: KVIrc 5.0.0 Aria http://www.kvirc.net/)
[03:43:59] *** Joins: cmburn (~Charlie_B@2601:441:4c00:67d:6de2:c541:6f8b:eff4)
[03:44:57] *** Quits: Wulf (~Wulf@user/wulf) (Ping timeout: 240 seconds)
[03:46:57] *** Joins: Wulf (~Wulf@user/wulf)
[03:50:49] *** Quits: gry (~quassel@botters/gry) (Quit: No Ping reply in 180 seconds.)
[03:51:51] *** Quits: Burgundy (~NA@86.121.143.206) (Ping timeout: 256 seconds)
[03:52:14] *** Joins: gry (~quassel@botters/gry)
[03:54:36] *** Quits: orestarod (~orestarod@2a02:2149:8b20:700:2b9d:7f86:7169:61c0) (Ping timeout: 240 seconds)
[03:54:45] *** aqua is now known as kish`
[03:54:56] *** Quits: gr33n7007h (~gr33n7007@user/gr33n7007h) (Quit: WeeChat 3.4)
[03:56:45] *** Joins: YellowSuB (~YellowSuB@user/yellowsub)
[03:58:56] *** Joins: xel_ (~xel@user/xel)
[03:58:56] *** xel is now known as Guest6230
[03:58:56] *** Quits: Guest6230 (~xel@user/xel) (Killed (strontium.libera.chat (Nickname regained by services)))
[03:58:56] *** xel_ is now known as xel
[03:59:17] *** Quits: dogbert2 (~Bill@ip68-227-25-62.lv.lv.cox.net) (Remote host closed the connection)
[03:59:33] *** Joins: dogbert2 (~Bill@ip68-227-25-62.lv.lv.cox.net)
[04:00:42] *** Joins: cassepipe (~cassepipe@81-66-251-102.rev.numericable.fr)
[04:00:58] *** Quits: vicfred (~vicfred@user/vicfred) (Quit: Leaving)
[04:02:18] <cassepipe> So... Can I make a #define some_int 10 a float with the preprocessor ?
[04:03:04] <cassepipe> Or maybe just casting a literal is done at compile time ?
[04:04:29] *** Joins: crashrep (~crashrep@user/crashrep)
[04:06:42] *** Quits: freepp (~freepppp@193.92.35.32.dsl.dyn.forthnet.gr) (Read error: Connection reset by peer)
[04:07:23] <fizzie> #define replaces tokens. It doesn't care about what those tokens are. And it doesn't know about types.
[04:07:45] <fizzie> Or evaluate expressions at all, except for #if conditions.
[04:09:54] <cassepipe> fizzie: I kinda expected that
[04:10:07] *** Joins: MsPooh (~MsPooh@S01069050ca4e3573.cg.shawcable.net)
[04:10:19] *** Quits: z4kpi (~z4kpi@user/zacts) (Quit: Client closed)
[04:10:36] <cassepipe> But I supposte casting a literal happends at compile time right ?
[04:11:03] *** suss` is now known as suss
[04:12:04] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[04:12:04] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[04:12:04] *** Joins: wroathe (~wroathe@user/wroathe)
[04:12:37] *** Quits: inlight (~n0ise@user/inlight) (Quit: WeeChat 3.3)
[04:12:56] <cassepipe> from the information I gathered it seems that's the compiler
[04:13:05] <cassepipe> compiler's business
[04:13:12] <fizzie> Well, yes in the sense that it's definitely an arithmetic constant expression, and if a floating constant is cast to an integer type, the result is also an integer constant expression. The standard doesn't define when things need to happen, exactly.
[04:13:40] <fizzie> But it'd be customary for constant expressions to be simplified as far as they can go.
[04:13:45] *** Quits: AmR (~AmREiSa@156.199.47.115) (Quit: Konversation terminated!)
[04:14:46] <cassepipe> fizzie: As always, thanks !
[04:14:54] *** Quits: ravella (~ravella@user/ryanavella) (Remote host closed the connection)
[04:15:37] *** Quits: zwr (~zwr@2804:d45:b966:fb00:cef0:860a:178a:99b9) (Ping timeout: 240 seconds)
[04:17:37] *** Joins: zwr (~zwr@2804:d45:b966:fb00:7ec2:63d4:2a51:9219)
[04:17:50] *** Joins: Zambyte (~Zambyte@cpe-104-228-60-14.nycap.res.rr.com)
[04:19:15] <MsPooh> I read somewhere that 90% of your code should be declared constant in C / C++ because theres no such thing as true types is that true?
[04:19:31] <MsPooh> since real types are immutable
[04:25:51] *** Quits: useretail (~useretail@185.132.19.151) (Ping timeout: 256 seconds)
[04:27:40] *** Joins: useretail (~useretail@185.132.19.151)
[04:27:55] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.4)
[04:30:14] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:602a:2cae:7652:6a22) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[04:33:00] *** Joins: frost (~frost@user/frost)
[04:33:00] *** Joins: gr33n7007h (~gr33n7007@user/gr33n7007h)
[04:35:42] <caze> MsPooh: No.
[04:36:03] <caze> MsPooh: Wait, what do you mean by immutable?
[04:36:22] <caze> Types don't change, no. But the value stored in an object of a particular type can change.
[04:39:56] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:350b:c716:fa56:ddbc)
[04:40:32] *** Joins: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net)
[04:40:38] *** Joins: Ranhir (~Ranhir@157.97.53.139)
[04:42:40] *** Quits: Tang3nt-Man (~Tang3nt-M@138.199.21.54) (Quit: Leaving)
[04:42:47] *** Quits: cmburn (~Charlie_B@2601:441:4c00:67d:6de2:c541:6f8b:eff4) (Read error: Connection reset by peer)
[04:50:09] *** Joins: ravella (~ravella@user/ryanavella)
[04:54:53] *** Joins: nevdudd (~nevdudd@142.167.143.188)
[04:55:57] *** Quits: nevdudd (~nevdudd@142.167.143.188) (Client Quit)
[04:58:55] *** Quits: Torr (~Torr@user/torr) (Remote host closed the connection)
[04:59:10] *** Quits: joolma (uid527699@id-527699.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[04:59:15] *** Joins: z4kpi (~z4kpi@user/zacts)
[04:59:21] *** Quits: MsPooh (~MsPooh@S01069050ca4e3573.cg.shawcable.net) (Quit: Client closed)
[04:59:24] *** Quits: FluffyMask (~masque@user/fluffymask) (Quit: WeeChat 3.4)
[05:01:21] *** Quits: ravella (~ravella@user/ryanavella) (Remote host closed the connection)
[05:01:56] *** Parts: robyn (~robyndrak@user/robyndrake) (WeeChat 3.4)
[05:02:59] *** Quits: freakazoid333 (~matt@2603:9000:cf03:86c3:1939:d42:288:3891) (Read error: Connection reset by peer)
[05:03:39] *** Joins: freakazoid333 (~matt@2603:9000:cf03:86c3:1939:d42:288:3891)
[05:03:51] *** Quits: Starfoxxes (~Starfoxxe@2a02:8070:5390:d00:12bf:48ff:feb8:38c8) (Ping timeout: 252 seconds)
[05:04:23] *** Quits: bebyx (~Thunderbi@user/bebyx) (Ping timeout: 256 seconds)
[05:04:23] *** Joins: Starfoxxes (~Starfoxxe@2a02:8070:5390:d00:12bf:48ff:feb8:38c8)
[05:06:38] *** Joins: dom2 (~dom2@c-65-96-173-68.hsd1.ma.comcast.net)
[05:07:08] *** Quits: Atque (~Atque@user/atque) (Remote host closed the connection)
[05:07:47] *** Joins: Atque (~Atque@user/atque)
[05:09:54] *** Quits: cassepipe (~cassepipe@81-66-251-102.rev.numericable.fr) (Quit: Leaving)
[05:13:07] *** Joins: MsPooh (~MsPooh@S01069050ca4e3573.cg.shawcable.net)
[05:17:37] *** Joins: blindguard (~blindguar@2a02:908:1864:c200::ef3c)
[05:17:48] *** Quits: blindguard (~blindguar@2a02:908:1864:c200::ef3c) (Client Quit)
[05:20:23] *** Quits: z4kpi (~z4kpi@user/zacts) (Quit: Client closed)
[05:28:36] *** Joins: dave0 (~davezero@069.d.003.ncl.iprimus.net.au)
[05:29:10] *** Joins: ntwk1 (~ntwk@user/ntwk)
[05:31:17] *** Quits: Rounin (~david@84.212.130.215) (Ping timeout: 240 seconds)
[05:31:20] *** Quits: ntwk (~ntwk@user/ntwk) (Ping timeout: 252 seconds)
[05:35:14] *** ntwk1 is now known as ntwk
[05:39:32] *** Quits: drbeco (~beco@2804:351c:dd00:f100:2b17:8b50:fe72:25ea) (Quit: Leaving)
[05:39:35] *** Joins: cuppajoe (~joe@ip70-171-93-122.no.no.cox.net)
[05:39:57] *** Quits: cuppajoe (~joe@ip70-171-93-122.no.no.cox.net) (Client Quit)
[05:40:11] *** Joins: cuppajoe (~joe@ip70-171-93-122.no.no.cox.net)
[05:42:14] *** Quits: steve__ (~steve@ool-182c2b80.dyn.optonline.net) (Ping timeout: 272 seconds)
[05:42:16] *** Quits: gnx (~heh@yep.i.am.1337.cx) (*.net *.split)
[05:44:08] *** Quits: random-nick (~random-ni@87.116.179.129) (Ping timeout: 272 seconds)
[05:48:13] *** Quits: cuppajoe (~joe@ip70-171-93-122.no.no.cox.net) (Quit: WeeChat 3.4)
[05:49:40] *** Joins: drbeco (~beco@2804:351c:dd00:f100:2b17:8b50:fe72:25ea)
[05:50:57] *** Quits: derelict (derelict@user/derelict) (Quit: bye)
[05:51:59] *** Joins: derelict (derelict@user/derelict)
[05:54:18] *** Joins: zer0x (~zer0x@58.186.123.149)
[05:56:23] *** Joins: superboot (~agentgasm@user/superboot)
[05:57:33] *** Quits: seninha (~chatzilla@user/seninha) (Quit: ChatZilla 0.9.93 [SeaMonkey 2.53.10.2/20220219201334])
[05:58:55] *** Quits: Nutte35 (~Nutte@27.114.187.37) (Ping timeout: 250 seconds)
[06:00:31] *** Joins: Rynn (~rynn@216.30.158.198)
[06:02:29] *** Joins: cthi (~cthi@097-082-138-151.res.spectrum.com)
[06:03:22] *** Joins: rgrinberg (~textual@2806:101e:7:70b6:a526:824c:9b4d:f939)
[06:04:37] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[06:06:40] *** Quits: justAstache (~justache@user/justache) (Read error: Connection reset by peer)
[06:07:19] *** Joins: justAstache (~justache@user/justache)
[06:16:14] *** Quits: Zambyte (~Zambyte@cpe-104-228-60-14.nycap.res.rr.com) (Quit: leaving)
[06:18:26] *** Joins: Zambyte (~Zambyte@cpe-104-228-60-14.nycap.res.rr.com)
[06:21:54] *** Joins: ironman (~ironman@2405:201:1010:b033:bad0:8910:44c9:da61)
[06:31:48] *** Quits: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net) (Ping timeout: 240 seconds)
[06:33:09] *** Quits: banc- (banc@gateway/vpn/airvpn/banc) (Ping timeout: 250 seconds)
[06:34:49] *** Joins: ffl^ (~ffl@50-202-219-146-static.hfc.comcastbusiness.net)
[06:35:03] *** Quits: frost (~frost@user/frost) (Ping timeout: 256 seconds)
[06:35:40] *** Joins: ravella (~ravella@user/ryanavella)
[06:39:52] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[06:42:56] *** Joins: steve__ (~steve@ool-182c2b80.dyn.optonline.net)
[06:43:45] *** Quits: superboot (~agentgasm@user/superboot) (Quit: leaving)
[06:45:05] *** Joins: frost (~frost@user/frost)
[06:45:59] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[06:45:59] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[06:45:59] *** Joins: wroathe (~wroathe@user/wroathe)
[06:50:36] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[06:50:57] *** Quits: MsPooh (~MsPooh@S01069050ca4e3573.cg.shawcable.net) (Quit: Client closed)
[06:51:09] *** Joins: MsPooh (~MsPooh@S01069050ca4e3573.cg.shawcable.net)
[06:51:25] *** Quits: crashrep (~crashrep@user/crashrep) (Quit: WeeChat 3.4)
[06:51:55] *** Quits: tejr (~tejr@user/tejr) (Ping timeout: 240 seconds)
[06:52:42] *** Joins: banc (banc@gateway/vpn/airvpn/banc)
[06:53:54] *** Quits: Ranhir (~Ranhir@157.97.53.139) (Remote host closed the connection)
[06:53:56] *** Joins: tejr (~tejr@user/tejr)
[06:55:51] *** Joins: Neutron7 (~monopolys@96.73.191.185)
[06:56:24] *** Joins: Ranhir (~Ranhir@157.97.53.139)
[06:56:42] *** Joins: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net)
[06:58:32] *** Quits: Charadon (~Charadon@155.138.164.183) (Ping timeout: 240 seconds)
[07:00:02] *** Quits: zuplex (~zuplex@202.51.76.195) (Remote host closed the connection)
[07:00:24] *** Quits: zachel (~zachel@user/zachel) (Quit: Quit: Leaving!)
[07:02:32] *** Quits: masoudd (~masoudd@user/masoudd) (Ping timeout: 256 seconds)
[07:03:08] *** Joins: zachel (~zachel@user/zachel)
[07:05:56] *** Joins: fe23 (~fe23@2409:8a34:46c:f80:21ec:b4d0:5029:a13c)
[07:07:29] *** Joins: Azem (~haise01@user/haise01)
[07:10:45] *** Quits: Emet-Selch (~haise01@user/haise01) (Ping timeout: 256 seconds)
[07:14:51] <suss> does sort of immutable exist in c that like it goes in js?
[07:14:55] *** Quits: vysn (~vysn@user/vysn) (Quit: WeeChat 3.4)
[07:23:37] *** Joins: zuplex (~zuplex@202.51.76.195)
[07:31:05] *** Joins: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net)
[07:31:20] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Remote host closed the connection)
[07:36:02] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.4)
[07:36:31] *** Joins: supakeen (~user@python/site-packages/supakeen)
[07:36:32] *** Quits: frost (~frost@user/frost) (Remote host closed the connection)
[07:37:29] *** Quits: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f) (Quit: Leaving)
[07:37:57] *** Quits: pulse (~pulse@user/pulse) (Ping timeout: 256 seconds)
[07:42:25] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[07:42:25] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[07:42:25] *** Joins: wroathe (~wroathe@user/wroathe)
[07:43:30] *** Quits: jennie (~jennie@user/jennie) (Remote host closed the connection)
[07:50:20] <MsPooh> https://www.youtube.com/watch?v=1RUuH_4ljVc
[07:50:46] <MsPooh> my theme song
[07:55:24] *** Quits: Zambyte (~Zambyte@cpe-104-228-60-14.nycap.res.rr.com) (Quit: leaving)
[07:56:17] *** Joins: kurahaupo_ (~kurahaupo@pa49-197-70-58.pa.qld.optusnet.com.au)
[07:58:05] *** Joins: hinata (~hinata@2409:4042:2d11:cfb3:35af:5089:99:d2a7)
[07:58:07] *** Quits: kurahaupo (~kurahaupo@115.69.27.211) (Ping timeout: 256 seconds)
[08:03:24] <dave0> are you a cattle rustler?
[08:04:40] <MsPooh> yea bro
[08:04:48] <MsPooh> how'd you know?
[08:04:59] <dave0> i saw a cow in your theme song
[08:05:40] <MsPooh> the only thing I like more than cattle rustlin' is C
[08:05:56] <dave0> c-c-c-cattle
[08:06:05] <MsPooh> the two are surprisingly alike
[08:07:01] <MsPooh> memory is C's cattle
[08:07:14] <MsPooh> i just rustle real cattle
[08:10:02] <smallville7123> why does this fail?   ((int)120.75) == 121
[08:10:48] <MsPooh> you rounding up or down son?
[08:11:39] <MsPooh> depends if youre grabbing the 20 by the horns and rounding up or touching said bull with your riding hand and rounding down
[08:11:42] <smallville7123> i want to round up
[08:12:43] <dave0> smallville7123: ceil()
[08:12:52] <dave0> ,cc printf("%f ", ceil(120.75));
[08:12:54] <candide> dave0: 121.000000
[08:13:03] <smallville7123> ,cc printf("%f ", ceil(120.1));
[08:13:05] <candide> smallville7123: 121.000000
[08:13:10] <smallville7123> ,cc printf("%f ", ceil(120.0));
[08:13:11] <candide> smallville7123: 120.000000
[08:13:14] <smallville7123> yay
[08:13:20] <smallville7123> thanks
[08:13:24] <dave0> no worries
[08:15:32] <smallville7123> should i worry about this?    Clang-Tidy: Narrowing conversion from 'float' to 'int'
[08:15:46] <smallville7123> createSurface(ceilf(getMeasuredWidth() + 0.5f), ceilf(getMeasuredHeight() + 0.5f));
[08:16:34] *** Quits: dom2 (~dom2@c-65-96-173-68.hsd1.ma.comcast.net) (Quit: Lost terminal)
[08:17:19] <smallville7123> createSurface(ceilf(getMeasuredWidth()), ceilf(getMeasuredHeight()));   // round to nearest pixel up // 120.0 > 120,   120.1 > 121,   120.9 > 121
[08:19:07] *** Joins: kurahaupo (~kurahaupo@115.69.27.211)
[08:19:21] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[08:22:12] *** Quits: kurahaupo_ (~kurahaupo@pa49-197-70-58.pa.qld.optusnet.com.au) (Ping timeout: 240 seconds)
[08:22:23] *** Quits: drbeco (~beco@2804:351c:dd00:f100:2b17:8b50:fe72:25ea) (Quit: Leaving)
[08:27:53] *** Joins: z4kpi (~z4kpi@user/zacts)
[08:35:24] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[08:38:26] *** Quits: MsPooh (~MsPooh@S01069050ca4e3573.cg.shawcable.net) (Quit: Client closed)
[08:38:26] *** Joins: Guest96fd (~Guest96fd@206.223.160.26)
[08:42:13] *** Joins: pokhu (~rishi@103.206.114.88)
[08:43:09] *** Joins: MsPooh (~MsPooh@S01069050ca4e3573.cg.shawcable.net)
[08:44:13] *** Joins: Gimble (~G1mble2@2a01:4b00:8e07:7900:cf47:59fb:2875:5d41)
[08:44:52] <Guest96fd> Anyone have a good way of mapping an Enum to a Struct? I was trying using X-Macros (https://paste.ee/p/QC9co), but it appears you cannot nest defines, which is a shame
[08:45:34] <Guest96fd> My goal being to have `X(MY_ENUM, struct my_enum_struct)`, and to have some mapping that relates MY_ENUM to struct my_enum_struct
[08:47:02] <Gimble> s
[08:47:16] *** Quits: e36freak (~e36freak@user/e36freak) (Quit: leaving)
[08:47:31] *** Gimble is now known as Huutha
[08:47:39] *** Quits: zer0x (~zer0x@58.186.123.149) (Ping timeout: 256 seconds)
[08:49:04] *** Joins: e36freak (~e36freak@user/e36freak)
[08:49:21] *** Quits: PublicWifi (~PublicWiF@user/publicwifi) (Ping timeout: 256 seconds)
[08:49:35] *** Quits: z4kpi (~z4kpi@user/zacts) (Quit: Client closed)
[08:51:04] <dave0> you can't define a macro that defines a macro
[08:53:29] *** Joins: Guest96fd22 (~Guest96fd@206.223.160.26)
[08:53:46] <dave0> so what are you trying to do? like this?    enum { FOO, BAR }; \n #define FOO_STRUCT struct foo \n #define BAR_STRUCT struct bar
[08:53:52] <Guest96fd22> dave0: Sorry, I disconnected for a second. Might have missed something. But yeah, that was the conclusion I came to
[08:54:07] <Guest96fd22> Yeah, exactly that
[08:54:12] *** Joins: PublicWifi (~PublicWiF@user/publicwifi)
[08:55:14] <dave0> dunno i guess i should google what x-macros are
[08:56:02] <smallville7123> Guest96fd22: why do you want to map an enum to a struct?
[08:56:06] <Guest96fd22> Just a way of managing multiple data types in one cohesive list
[08:56:43] *** Quits: Guest96fd (~Guest96fd@206.223.160.26) (Ping timeout: 256 seconds)
[08:56:47] <smallville7123> just do    enum MyEnum { a, b};     MyEnum myEnumVariable;
[08:57:04] *** Quits: unlink2 (~unlink@p200300ebcf147a00a0c5a97c70c72521.dip0.t-ipconnect.de) (Remote host closed the connection)
[08:57:33] *** Joins: floatcomplex (~floatcomp@wireguard/tunneler/floatcomplex)
[08:58:12] <caze> Say you're coming in to C from another language without saying you're coming in to C from another language.
[08:59:29] <Guest96fd22> True
[08:59:51] <Guest96fd22> Basically I have a long list of types defined by Enums, and an associated struct for each
[09:00:29] <Guest96fd22> It would be very convenient to be able to reference their associated struct under a given name, so that the underlying struct type could be changed in the centralized X-Macro
[09:01:31] *** Parts: floatcomplex (~floatcomp@wireguard/tunneler/floatcomplex) ()
[09:01:40] <dave0> ,cc #define LIST X(FOO) X(BAR) \n #define X(a) a, \n enum { LIST }; \n #undef X \n #define X(a) struct a; \n LIST \n #undef X
[09:01:42] <candide> dave0: No output.
[09:01:45] <dave0> does that work?
[09:02:30] <dave0> it resembles what    https://en.wikipedia.org/wiki/X_Macro    says
[09:03:23] *** Joins: slidercrank (~slidercra@user/slidercrank)
[09:04:57] <dave0> ,cc #define LIST X(FOO) X(BAR) X(BAZ) X(QUX) \n #define X(a) a, \n enum { LIST }; \n #undef X \n #define X(a) printf(#a " = %d ", a); \n LIST \n #undef X
[09:04:59] <candide> dave0: FOO = 0 BAR = 1 BAZ = 2 QUX = 3
[09:10:16] *** Quits: malloy (~jimery@116.30.220.175) (Ping timeout: 260 seconds)
[09:11:27] *** Quits: Guest96fd22 (~Guest96fd@206.223.160.26) (Ping timeout: 256 seconds)
[09:11:36] *** Quits: Huutha (~G1mble2@2a01:4b00:8e07:7900:cf47:59fb:2875:5d41) (Quit: Leaving)
[09:11:53] *** Joins: Gimble (~G1mble2@2a01:4b00:8e07:7900:cf47:59fb:2875:5d41)
[09:12:16] *** Joins: malloy (~jimery@116.30.220.175)
[09:13:04] *** Joins: zlg (~zlg@user/zlg)
[09:13:04] *** Quits: Gimble (~G1mble2@2a01:4b00:8e07:7900:cf47:59fb:2875:5d41) (Remote host closed the connection)
[09:13:31] *** Joins: phyto (~kyle@host-198-114.txbrags.bryan.tx.us.clients.pavlovmedia.net)
[09:14:01] <phyto> hi! does anyone know if there is a linux system call that will get me summary statistics for cpu usage? i know i can read /proc/stat but is that the only way?
[09:15:45] *** Quits: AssKoala (~asskoala@user/asskoala) (Ping timeout: 252 seconds)
[09:19:22] *** Joins: kts (~kts@103.73.237.197)
[09:19:51] *** Quits: phyto (~kyle@host-198-114.txbrags.bryan.tx.us.clients.pavlovmedia.net) (Quit: WeeChat 3.4)
[09:20:44] *** Joins: phyto (~kyle@host-198-114.txbrags.bryan.tx.us.clients.pavlovmedia.net)
[09:23:42] *** Quits: kts (~kts@103.73.237.197) (Client Quit)
[09:27:33] *** Joins: AssKoala (~asskoala@23-121-91-253.lightspeed.dybhfl.sbcglobal.net)
[09:27:33] *** Quits: AssKoala (~asskoala@23-121-91-253.lightspeed.dybhfl.sbcglobal.net) (Changing host)
[09:27:33] *** Joins: AssKoala (~asskoala@user/asskoala)
[09:29:44] *** Quits: soapsudsxx (~soapsudsx@141.193.188.140) (Remote host closed the connection)
[09:32:52] *** Joins: helpkidsdragon (~helpkidsd@103.85.125.235)
[09:33:48] *** Quits: helpkidsdragon (~helpkidsd@103.85.125.235) (Quit: Leaving)
[09:35:54] *** Quits: Giovanni (~Giovanni@176.67.166.45) (Read error: Connection reset by peer)
[09:36:09] *** Quits: packet_lozenge_ (~packet_lo@user/packet-lozenge/x-7125090) (Ping timeout: 268 seconds)
[09:40:06] *** Joins: Dean (~Dean@user/De4n-Whit3/x-9385125)
[09:40:09] <Dean> hello
[09:41:08] *** Parts: pokhu (~rishi@103.206.114.88) ()
[09:41:13] *** Joins: pokhu (~rishi@103.206.114.88)
[09:41:18] *** Joins: Giovanni (~Giovanni@176.67.166.45)
[09:43:07] *** Joins: eroux (~eroux@102-65-85-242.ftth.web.africa)
[09:47:52] *** Quits: lilibyte (lilibyte@gateway/vpn/protonvpn/lilibyte) (Quit:  )
[09:48:24] *** Quits: auk (auk@gateway/vpn/protonvpn/auk) (Quit: Leaving)
[09:49:10] *** Joins: midnighthyena (~midn1ghth@67.63.109.249)
[09:49:26] *** Joins: lilibyte (lilibyte@gateway/vpn/protonvpn/lilibyte)
[09:50:08] *** Quits: ckdCreations (~ckdCreati@147.55.130.38) (Read error: Connection reset by peer)
[09:50:26] *** Joins: kenanmarasli (~kenanmara@user/kenanmarasli)
[09:51:06] *** Joins: ckdCreations (~ckdCreati@147.55.133.142)
[09:51:58] *** Quits: rgrinberg (~textual@2806:101e:7:70b6:a526:824c:9b4d:f939) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[09:53:44] *** Quits: loganlee[gnu] (~Thunderbi@user/loganlee) (Quit: loganlee[gnu])
[09:53:49] *** Quits: midnighthyena (~midn1ghth@67.63.109.249) (Read error: Connection reset by peer)
[09:54:42] *** Joins: loganlee[gnu] (~Thunderbi@user/loganlee)
[09:55:02] *** Joins: Alhazred (~Alhazred@86.106.74.40)
[09:55:06] *** Joins: midnighthyena (~midn1ghth@67.63.109.249)
[09:55:39] *** Quits: ironman (~ironman@2405:201:1010:b033:bad0:8910:44c9:da61) (Quit: Leaving)
[09:56:59] *** Joins: kts (~kts@103.73.237.197)
[09:57:10] *** Parts: pokhu (~rishi@103.206.114.88) ()
[09:57:18] *** Joins: packet_lozenge (~packet_lo@user/packet-lozenge/x-7125090)
[09:57:19] <caze> hi
[09:57:35] <MsPooh> hello
[09:57:41] <MsPooh> wutsup
[10:05:38] *** Joins: adip (~adip@aeiw26.neoplus.adsl.tpnet.pl)
[10:05:40] *** Joins: adip_ (~adip@aeiw26.neoplus.adsl.tpnet.pl)
[10:06:28] *** Quits: MsPooh (~MsPooh@S01069050ca4e3573.cg.shawcable.net) (Quit: Client closed)
[10:08:12] *** Joins: midnighthy3na (~midn1ghth@67.63.109.249)
[10:08:31] *** Quits: midnighthyena (~midn1ghth@67.63.109.249) (Read error: Connection reset by peer)
[10:15:05] <phyto>  /quit
[10:15:11] *** Quits: phyto (~kyle@host-198-114.txbrags.bryan.tx.us.clients.pavlovmedia.net) (Remote host closed the connection)
[10:27:50] *** Joins: the_lanetly_052 (~the_lanet@185.30.90.255)
[10:27:52] *** Quits: midnighthy3na (~midn1ghth@67.63.109.249) (Ping timeout: 272 seconds)
[10:28:37] *** Quits: the_lanetly_052 (~the_lanet@185.30.90.255) (Max SendQ exceeded)
[10:29:04] *** Joins: the_lanetly_052 (~the_lanet@194.135.154.63)
[10:31:28] *** Quits: highrate (~presonic@user/highrate) (Remote host closed the connection)
[10:31:49] *** Joins: highrate (~presonic@111-22-237-24.gci.net)
[10:33:50] *** Joins: mikoto-chan (~mikoto-ch@213.177.151.239)
[10:33:58] *** Quits: mad_enz (~mad_enz@lnsm4-toronto12-50-101-118-206.internet.virginmobile.ca) (Ping timeout: 260 seconds)
[10:36:03] *** Quits: bliminse (~bliminse@host86-158-241-239.range86-158.btcentralplus.com) (Ping timeout: 252 seconds)
[10:38:01] *** Joins: bliminse (~bliminse@host109-152-150-162.range109-152.btcentralplus.com)
[10:42:01] *** Quits: mikoto-chan (~mikoto-ch@213.177.151.239) (Ping timeout: 245 seconds)
[10:51:15] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[10:51:35] *** Quits: loganlee[gnu] (~Thunderbi@user/loganlee) (Quit: loganlee[gnu])
[10:54:28] *** Joins: hashfunc170a (~user@162.254.115.155)
[11:00:20] *** Quits: dogbert2 (~Bill@ip68-227-25-62.lv.lv.cox.net) (Remote host closed the connection)
[11:00:36] *** Joins: dogbert2 (~Bill@ip68-227-25-62.lv.lv.cox.net)
[11:03:11] *** Joins: de-facto_ (~de-facto@user/de-facto)
[11:03:55] *** Quits: de-facto (~de-facto@user/de-facto) (Ping timeout: 240 seconds)
[11:06:41] *** de-facto_ is now known as de-facto
[11:08:33] *** Quits: dld (~davidlowr@2601:197:600:1210:c94f:64b7:1eea:84b1) (Ping timeout: 250 seconds)
[11:11:52] *** Joins: freep (~freepppp@193.92.35.32.dsl.dyn.forthnet.gr)
[11:12:03] *** Joins: dld (~davidlowr@98.217.187.57)
[11:13:38] *** Joins: bzng (~bzng4@91-115-30-192.adsl.highway.telekom.at)
[11:17:56] *** Joins: MajorBiscuit (~MajorBisc@c-001-017-039.client.tudelft.eduvpn.nl)
[11:18:59] *** Joins: eddybilley (~freddieti@217.119.232.174)
[11:21:08] *** Quits: Pjerky (~Pjerky@81-234-143-135-no58.tbcn.telia.com) (Ping timeout: 252 seconds)
[11:24:36] *** Joins: arinov_ (~arinov@213.194.126.155)
[11:26:48] *** Joins: cherrry9 (~jan@ded246.neoplus.adsl.tpnet.pl)
[11:27:10] *** Quits: adip_ (~adip@aeiw26.neoplus.adsl.tpnet.pl) (Ping timeout: 256 seconds)
[11:27:10] *** Quits: adip (~adip@aeiw26.neoplus.adsl.tpnet.pl) (Ping timeout: 256 seconds)
[11:27:41] *** Joins: Klinda (~superleag@user/klinda)
[11:33:54] *** Joins: Pjerky (~Pjerky@81-226-226-178-no58.tbcn.telia.com)
[11:34:07] *** Joins: zeenk (~zeenk@2a02:2f04:a30d:1300:51a3:bcfc:6cda:9fc5)
[11:34:15] *** Quits: mven (~mven@ip68-104-39-54.lv.lv.cox.net) (Ping timeout: 256 seconds)
[11:41:20] *** Quits: hashfunc170a (~user@162.254.115.155) (Ping timeout: 272 seconds)
[11:45:01] *** Joins: iomari891 (~iomari891@105.112.138.38)
[11:47:15] *** Quits: kish` (~aqua@user/aqua) (Remote host closed the connection)
[11:47:18] *** Joins: mven (~mven@ip68-104-39-54.lv.lv.cox.net)
[11:47:41] *** Joins: kish` (~aqua@user/aqua)
[11:48:45] *** Joins: z4kpi (~z4kpi@user/zacts)
[11:50:50] *** Joins: frost (~frost@user/frost)
[11:51:54] *** Joins: Rounin (~david@84.212.130.215)
[11:55:43] *** Quits: z4kpi (~z4kpi@user/zacts) (Quit: Client closed)
[12:01:16] *** Joins: rkta_ (~rkta@2001:4ba0:cafe:eaf::1)
[12:02:07] *** rkta_ is now known as rkta
[12:03:47] *** Quits: hinata (~hinata@2409:4042:2d11:cfb3:35af:5089:99:d2a7) (Quit: Leaving)
[12:03:54] *** Joins: cosimone (~user@93-34-132-33.ip49.fastwebnet.it)
[12:14:14] *** Joins: vysn (~vysn@user/vysn)
[12:21:00] *** Quits: Neutron7 (~monopolys@96.73.191.185) (Ping timeout: 256 seconds)
[12:21:39] *** Joins: LucaTM (~LucaTM@user/lucatm)
[12:22:13] *** Quits: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net) (Remote host closed the connection)
[12:23:09] *** Joins: Neutron7 (~monopolys@96.73.191.185)
[12:25:22] *** Joins: aradesh (~aradesh@user/aradesh)
[12:32:24] *** Joins: mrig (~mrig@user/mrig)
[12:33:35] *** Joins: VoidSync (~sync@user/voidsync)
[12:36:27] *** Quits: zuplex (~zuplex@202.51.76.195) (Ping timeout: 272 seconds)
[12:38:07] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:602a:2cae:7652:6a22)
[12:38:12] *** Quits: kurahaupo (~kurahaupo@115.69.27.211) (Ping timeout: 240 seconds)
[12:41:42] *** Quits: VoidSync (~sync@user/voidsync) (Remote host closed the connection)
[12:43:57] *** Quits: arinov_ (~arinov@213.194.126.155) (Ping timeout: 256 seconds)
[12:47:02] *** Joins: bilbo (~bilbo@host-37-191-190-173.lynet.no)
[12:47:28] <Dean> Is it possible to do binary search with recursion? I have this code, but I think returning 'true' would never bubble to the top of the call stack? It would always return false? https://paste.debian.net/1231955/
[12:49:41] <cehteh> should be possible
[12:50:45] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:602a:2cae:7652:6a22) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[12:52:03] <cehteh> and i see your bug :D
[12:52:44] <Dean> Ok thank you cehteh. so in theory this should work I just have a bug to fix.
[12:53:17] <cehteh> 2x same bug to be precise
[12:53:58] <scaramanga> a classic :)
[12:54:09] *** Quits: analognoise (~analognoi@185.202.221.26) (Read error: Connection reset by peer)
[12:54:30] <cehteh> when you make the last 'else return false;' then i belive the compiler will tell you where they are
[12:55:21] <cehteh> anyway you may make it non recursive .. thats as simple and more efficient
[12:58:39] *** Joins: hinata (~hinata@2409:4042:2d11:cfb3:35af:5089:99:d2a7)
[12:58:43] *** Joins: cadmio (~cadmio@151.47.246.42)
[12:58:45] <cadmio> Hello
[12:58:54] <Dean> ok thank you cehteh . i took out the recursion. it works fine now. https://paste.debian.net/1231956/
[12:59:07] <cadmio> why am I getting this https://paste.gnome.org/pb1ly6zqz#line-3 ?
[12:59:14] <cadmio> right here https://paste.gnome.org/pi1stg0qq#line-128
[12:59:29] *** Joins: Livio (~livio@user/livio)
[13:00:06] *** Quits: frost (~frost@user/frost) (Ping timeout: 256 seconds)
[13:00:23] *** Quits: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net) (Ping timeout: 256 seconds)
[13:00:51] *** Joins: kurahaupo (~kurahaupo@115.69.27.211)
[13:03:19] <dave0> Dean: https://ideone.com/FD6xib
[13:04:14] <trenka> cadmio: it says "unknown type name"
[13:04:41] <dave0> Dean: it will return the largest number less than or equal to key, so you have to put in one last check
[13:04:53] *** Quits: Betal (~Betal@user/betal) (Quit: WeeChat 3.4)
[13:04:56] <dave0> Dean: and it returns the index into array, not the element
[13:05:08] <cadmio> I think I've to include  #include <gtkmm/native.h>
[13:05:55] <trenka> cadmio: why don't you talk about gtk related problems with gtk developers?
[13:07:17] <cadmio> trenka: they aren't much supportive sadly
[13:08:03] <NRK> :c
[13:08:53] *** Quits: gildasio (~gildasio@gateway/tor-sasl/gildasio) (Remote host closed the connection)
[13:10:04] *** Joins: arinov_ (~arinov@31.142.86.27)
[13:11:59] *** Joins: gildasio (~gildasio@gateway/tor-sasl/gildasio)
[13:12:24] <trenka> I can guess why :)
[13:19:51] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:602a:2cae:7652:6a22)
[13:21:06] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[13:21:19] *** Joins: ironman (~ironman@2405:201:1010:b033:bad0:8910:44c9:da61)
[13:21:37] *** Quits: cherrry9 (~jan@ded246.neoplus.adsl.tpnet.pl) (Ping timeout: 240 seconds)
[13:23:45] *** Joins: seninha (~chatzilla@user/seninha)
[13:25:16] *** Joins: geowiesnot (~user@5-51-190-244.abo.bbox.fr)
[13:26:18] *** Joins: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net)
[13:26:40] <Dean> thank you dave0
[13:26:47] *** Joins: anshupatia (uid29854@id-29854.helmsley.irccloud.com)
[13:29:51] *** Quits: cadmio (~cadmio@151.47.246.42) (Read error: Connection reset by peer)
[13:30:16] *** Quits: Livio (~livio@user/livio) (Ping timeout: 272 seconds)
[13:30:41] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[13:33:30] *** Quits: Sadale (~Sadale@user/sadale) (Quit: tawa pona!)
[13:33:46] *** Joins: Sadale (~Sadale@user/sadale)
[13:33:48] *** Joins: cadmio (~cadmio@na-19-93-147.service.infuturo.it)
[13:39:07] *** Joins: bebyx (~Thunderbi@user/bebyx)
[13:40:44] *** Quits: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl) (Read error: Connection reset by peer)
[13:42:43] <Dean> dave0: your code will return some index even if the exact element does not exist in the array? https://paste.debian.net/1231960/ Not 100% sure I understand your code.
[13:42:55] *** Joins: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl)
[13:44:04] <dave0> Dean: yep, you need to put a final check in
[13:44:23] <dave0> Dean: it will find the closest, without going over
[13:45:16] <dave0> Dean: maybe     int find(int array[], int size, int key) { int index = binarysearch(array, key, 0, size); if(array[index] == key) return index; else return -1; /* not found */ }
[13:47:58] *** Quits: vysn (~vysn@user/vysn) (Remote host closed the connection)
[13:49:26] <dave0> you have a choice on what to do if the value is found or not found
[13:50:17] *** Parts: cadmio (~cadmio@na-19-93-147.service.infuturo.it) (WeeChat 3.0)
[13:50:20] <dave0> returning an index on found, and returning -1 for not found, may or may not be the best thing to do
[13:50:44] <dave0> i usually don't like to overload the return value like that, but it's easy to type on irc
[13:52:09] <dave0> OTOH hoare regrets having NULL as an exceptional value
[13:52:25] <dave0> which is like what -1 is doing there
[13:52:55] <dave0> you could even have NULL   if(array[index] == key) return &array[index]; else return NULL;
[13:53:04] <dave0> terrible idea
[13:53:08] <dave0> but easy to write
[13:55:12] <Dean> What does OTOH mean?
[13:55:16] <Dean> dave0:
[13:55:21] <dave0> on the other hand
[13:55:55] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Ping timeout: 256 seconds)
[13:56:51] <Dean> thanks
[13:58:03] *** Quits: Alhazred (~Alhazred@86.106.74.40) (Remote host closed the connection)
[13:58:08] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[13:58:14] *** Joins: Alhazred (~Alhazred@86.106.74.40)
[13:58:19] <dave0> the trouble is you have to return two things.. an answer and a flag to indicate the answer is correct (ie. it found the key in the array), or a flag to indicate failure (ie. the key was not found)
[13:58:41] <dave0> that kind of thing is hard in c
[13:58:56] *** Quits: shailangsa (~shailangs@host86-186-127-164.range86-186.btcentralplus.com) (Remote host closed the connection)
[13:59:15] <dave0> just because there's so many different ways to do it ... which way is best?
[13:59:38] <Dean> dave0: https://paste.debian.net/1231966/
[14:00:18] <dave0> Dean: use another variable
[14:01:11] <veltas> I think returning -1 is fine
[14:01:27] <veltas> I might change the check to < 0 rather than == -1
[14:01:40] <veltas> == -1 looks ugly IMO
[14:02:44] <dave0> Dean: https://paste.debian.net/1231968/
[14:03:10] <veltas> I might have made binary() into a loop, rather than calling recursively, since it's pretty much a tail call
[14:03:46] <veltas> Which a normal compiler with optimizations enabled will do correctly but there's no 'guarantee' as such
[14:05:03] <Dean> dave0: https://paste.debian.net/1231969/
[14:05:20] *** Joins: angelacrust (~angelacru@182.64.83.183)
[14:05:28] *** Joins: cherrry9 (~jan@ded246.neoplus.adsl.tpnet.pl)
[14:05:49] <angelacrust> `int *burst_times = malloc(n * sizeof(sizeof *burst_times))` is incorrect right?
[14:05:57] <veltas> Return a pointer to the found element, and return NULL on failure
[14:05:59] <dave0> Dean: not very good
[14:06:04] <veltas> That's more idiomatic
[14:06:35] <dave0> Dean: it'll work... but frowny
[14:06:58] <Dean> how to make it less frowny dave0 ?
[14:07:11] <Dean> veltas: a pointer?
[14:07:39] <Dean> that could be good i presume. but i should not presume much with my knowlege just yet.
[14:07:52] <veltas> Return &array[mid] AKA array + mid
[14:07:57] <veltas> Type int*
[14:08:54] *** Quits: arinov_ (~arinov@31.142.86.27) (Ping timeout: 272 seconds)
[14:08:57] <NRK> angelacrust: how is it incorrect?
[14:09:16] <NRK> wait, i didn't notice the double `sizeof`
[14:09:23] <dave0> Dean: https://paste.debian.net/1231971/
[14:09:46] <NRK> why is it doing double sizeof?/
[14:09:50] <dave0> binary() always returns a valid result, you never need to check it for an error
[14:11:13] <Dean> dave that returns -1? element is not found. I will fiddle.
[14:11:14] <angelacrust> NRK I'd mistakenly written double `sizeof`s in an assignment last week, and I had the view that I'd been writing double of those all the time, and that it was correct. Turns out it is not the correct way.
[14:11:29] <dave0> Dean: that simplifies things.. it moves the test into the caller, but: * the test is not much more code * you can do other processing if you have index
[14:11:41] *** Joins: arinov_ (~arinov@31.142.86.27)
[14:11:54] <Dean> angelacrust: are you doing cs50?
[14:11:56] *** Joins: cart_ (~cart@185.191.86.4)
[14:12:01] <angelacrust> Nope
[14:12:07] <Dean> ok
[14:12:11] <dave0> Dean: binary() still returns an index ... i just put the final test in the printf statement
[14:12:35] <angelacrust> I started CS50 in November and then couldn't continue after week 5 Dean
[14:12:49] <NRK> `int *burst_times = malloc(n * sizeof (*burst_times))` would be the correct way of allocating n elements of `burst_times`
[14:12:58] <angelacrust> yeah
[14:13:03] <NRK> and then checking for malloc failure ofc
[14:13:03] <dave0> Dean: you could very easily do     int index = binary(array, searchfor, 0, MAX); if(array[index] == searchfor) { printf("found at %d ", index); } else { printf("%d not found ", searchfor); }
[14:13:23] <angelacrust> I also had a similar allocation in the same program but I didn't notice it
[14:13:34] <angelacrust> NRK why did it still work though?
[14:13:59] <NRK> do you know what sizeof yields?
[14:14:03] <angelacrust> I do
[14:14:09] <NRK> what?
[14:14:10] <Dean> angelacrust: ah darn. i started week 5 yesterday. talk about information overload. lol
[14:14:12] <angelacrust> it yields the size of something in bytes
[14:14:24] <NRK> correct. but what type is it?
[14:14:27] <angelacrust> Dean lol I want to start cs50 again
[14:14:39] <angelacrust> type?
[14:14:55] <NRK> yes, sizeof yields a size_t
[14:15:01] <angelacrust> oh
[14:15:10] <Dean> its so good. im really enjoying it. a study buddy would've been great though. i found using a book and the course goes well. but without community everything is like astromonically difficult. #c is supper active. i am grateful.
[14:15:17] <angelacrust> What is `size_t`?
[14:15:27] <NRK> so what you basically did was allocate n `size_t`s instead of n `int`s
[14:15:40] <NRK> and size_t happens to be bigger than ints on your machine most likely
[14:15:44] <NRK> so it "worked"
[14:16:10] <angelacrust> oh right
[14:16:22] <dave0> angelacrust: it's an unsigned integer, i believe it's defined as something that can hold the size of the largest object
[14:16:37] <fizzie> dave0: Your code doesn't find the 29: https://0x0.st/oKuv.txt
[14:16:38] *** Quits: slidercrank (~slidercra@user/slidercrank) (Ping timeout: 250 seconds)
[14:16:45] <NRK> ,cc printf("sizeof(int) = %zu", sizeof(int)); printf("sizeof(sizeof(int)) = %zu", sizeof(sizeof(int)));
[14:16:47] <candide> NRK: sizeof(int) = 4sizeof(sizeof(int)) = 8
[14:16:53] <angelacrust> Dean I agree. CS50 is a really nice course. I'm also grateful that this community exists
[14:17:17] *** Quits: Klinda (~superleag@user/klinda) (Ping timeout: 240 seconds)
[14:17:21] <dave0> fizzie: oh crap
[14:17:27] <NRK> ,cc printf("sizeof(int) = %zu -- ", sizeof(int)); printf("sizeof(size_t) = %zu -- ", sizeof(size_t)); printf("sizeof(sizeof(int)) = %zu", sizeof(sizeof(int)));
[14:17:29] <candide> NRK: sizeof(int) = 4 -- sizeof(size_t) = 8 -- sizeof(sizeof(int)) = 8
[14:17:29] <dave0> fizzie: i copied it from wikipedia
[14:17:53] <NRK> angelacrust: do u see what's going on here?
[14:17:59] <angelacrust> I'm trying to interpret it
[14:18:38] *** Joins: strajder (~strajder@user/strajder)
[14:18:49] <angelacrust> I'm sorry, but is `%zu` similar to `%u` ?
[14:19:01] <Dean> angelacrust: if you ever want to pick it up again. let me know. they say you can do labs with class mates.
[14:19:36] <angelacrust> Dean I will continue the course in 2 hours. You've motivated me to pick it up again
[14:20:06] <Dean> *_* truth be told i thought you were one of the people on their discord server lmao. quickest way to get ghosted.
[14:20:21] <angelacrust> oh
[14:20:39] <angelacrust> nope, I never joined their discord
[14:21:04] <Dean> it's pretty active. but people post a lot of spoiler code so i try not to go there unless i need to.
[14:21:04] <angelacrust> NRK does `size_t` vary from machine to machine?
[14:21:51] <NRK> yes.
[14:22:23] <dave0> fizzie: oh no i doesn't find any of them
[14:22:23] *** Joins: zuplex (~zuplex@202.51.76.195)
[14:22:30] <dave0> i thought i debugged this
[14:22:31] <dave0> dammit
[14:22:40] <angelacrust> Dean, thanks I think I've received enough signs from the universe that I should continue CS50 again...thanks for reminding me again
[14:22:53] <angelacrust> NRK why is `sizeof(sizeof(int))` = 8?
[14:23:41] <NRK> because `sizeof(size_t)` is 8 on candide
[14:23:56] <candide> N﻿RK, I'm not sure, let me check.
[14:24:12] <fizzie> `sizeof (sizeof (int))` equals `sizeof (size_t)` for the same reason `sizeof 0` equals `sizeof (int)`.
[14:24:54] <fizzie> You give it an expression with type T, it yields the size of type T.
[14:25:15] <fizzie> (The first one could've been written `sizeof sizeof (int)` as well.)
[14:25:26] <Dean> dave0: https://paste.debian.net/1231976/
[14:25:58] <Dean> is that what you meant?
[14:26:30] <angelacrust> if sizeof(int) equals 4, then  `sizeof(sizeof(int))` should be `sizeof(4)` (from the previous one) and this should also be 4?
[14:27:22] <NRK> sizeof(int) equals 4, but what _type_ does sizeof "return" ?
[14:27:55] <angelacrust> ohh
[14:27:57] <fizzie> angelacrust: `4` is not the same type as `(size_t) 4`.
[14:28:02] <dave0> fizzie: https://ideone.com/QhuNm6
[14:28:24] <angelacrust> does `sizeof` return `size_t` ?
[14:28:50] <dave0> Dean: i screwed up the search
[14:29:01] <NRK> yes
[14:29:02] <dave0> binary search strikes again
[14:29:07] *** Joins: Livio (~livio@user/livio)
[14:29:25] <NRK> sizeof( sizeof (anything)) will always be same as sizeof(size_t)
[14:29:28] <fizzie> dave0: Yes, but then it returns a non-valid index if you search for a number >29, so you can't just blindly do array[index]: https://ideone.com/OyCzJi
[14:29:37] <angelacrust> and can you `r/explainlikeimfive` `size_t` ?
[14:29:50] <fizzie> dave0: (Because it returns a value == size.)
[14:30:16] <dave0> fizzie: hang on
[14:30:19] *** Quits: AbleBacon (~AbleBacon@user/AbleBacon) (Read error: Connection reset by peer)
[14:30:25] <angelacrust> OH, so `sizeof()` returns `size_t` and we're calculating the `sizeof(size_t)` which varies from machine to machine
[14:30:30] <Dean> dave0: https://paste.debian.net/1231978/ i can keep my non recursion version? it works fine. I think?
[14:30:41] <dave0> Dean: of course
[14:30:54] <dave0> i will debug my recursive version though
[14:31:09] <NRK> angelacrust: size_t is the largest object a machine can hold afaik
[14:31:10] <Dean> recursion looks pretty to me. am i weird? lol
[14:31:13] <angelacrust> ohh
[14:31:15] <angelacrust> GOT IT
[14:31:23] <dave0> Dean: it's real nice for binary trees
[14:31:34] <angelacrust> thanks, I understand everything perfectly now
[14:31:48] <angelacrust> size_t is 4 on my machine
[14:31:48] *** Joins: Burgundy (~NA@86.121.143.206)
[14:31:49] <BUTTS> eureka
[14:32:13] <NRK> functions like malloc take `size_t` as an argument, because int might be too small. but on some machine long might be too big.
[14:32:18] *** Quits: System_Error (~SystemErr@user/systemerror) (Remote host closed the connection)
[14:32:25] <angelacrust> right
[14:32:51] <angelacrust> if I print("%u",  sizeof(int)) it will print `size_t` right?
[14:33:52] *** Joins: immibis_ (~hexchat@62.156.144.218)
[14:34:09] *** Joins: System_Error (~SystemErr@user/systemerror)
[14:34:15] <dave0> fizzie: crap
[14:34:27] *** Quits: joedoe47_ (~weechat@c-98-254-188-143.hsd1.fl.comcast.net) (Ping timeout: 256 seconds)
[14:34:35] *** Joins: Klinda (~superleag@user/klinda)
[14:34:38] <fizzie> angelacrust: It might print the value of sizeof (size_t), but %u is not an exactly correct conversion specifier for printing a size_t value.
[14:34:47] <NRK> ,cc printf("%u", sizeof(int));
[14:34:49] <candide> NRK: [warning: format '%u' expects argument of type 'unsigned int', but argument 2 has type 'long unsigned int' [-Wformat=]] 4
[14:34:51] *** Joins: joedoe47 (~weechat@c-98-254-188-143.hsd1.fl.comcast.net)
[14:34:52] <angelacrust> oh
[14:34:59] <Dean> dave0: i think i will work with binary trees this week. i saw granparents, children, parents, and things. I am looking forward to it for the assignment this week.
[14:35:03] <fizzie> That's what the %zu was for. 'z' is a lenngth modifier, just like 'l' and others.
[14:35:08] <angelacrust> ,cc printf("%zu", sizeof(int))
[14:35:10] <candide> angelacrust: 4
[14:35:16] <fizzie> %u for unsigned int, %lu for unsigned long, %zu for size_t.
[14:35:22] <angelacrust> Oh
[14:35:34] <dave0> Dean: don't use any of my code, it's all buggy
[14:35:45] <dave0> and i really don't feel like debugging
[14:35:54] <Dean> ok dave0 thank you though. no worries.
[14:35:54] <dave0> dammit
[14:36:09] <NRK> i bet it's off by one
[14:36:19] <dave0> of course
[14:36:27] <NRK> without even looking at the code
[14:36:35] *** Joins: frost (~frost@user/frost)
[14:37:17] *** Quits: immibis (~hexchat@62.156.144.218) (Ping timeout: 256 seconds)
[14:37:29] *** Joins: merrinx (~merrinx@ti0028a400-3686.bb.online.no)
[14:39:42] <angelacrust>  #c is truly an amazing group of people. thank you so much, guys.
[14:40:16] <Dean> angelacrust: i second that
[14:40:51] <angelacrust> Yep. They've helped me with all my queries for the last two weeks.
[14:41:52] *** Joins: heineken (~i.am@user/heineken)
[14:43:20] *** Quits: eroux (~eroux@102-65-85-242.ftth.web.africa) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[14:44:37] *** Quits: zuplex (~zuplex@202.51.76.195) (Quit: Leaving)
[14:44:37] *** Quits: Thymo (~Thymo@82-74-137-251.cable.dynamic.v4.ziggo.nl) (Ping timeout: 240 seconds)
[14:44:57] *** Quits: angelacrust (~angelacru@182.64.83.183) (Quit: Client closed)
[14:49:34] *** Joins: Thymo (~Thymo@82-74-137-251.cable.dynamic.v4.ziggo.nl)
[14:53:17] *** Quits: gr33n7007h (~gr33n7007@user/gr33n7007h) (Ping timeout: 240 seconds)
[14:53:31] *** Quits: Thymo (~Thymo@82-74-137-251.cable.dynamic.v4.ziggo.nl) (Read error: Connection reset by peer)
[14:55:01] *** Joins: gr33n7007h (~gr33n7007@user/gr33n7007h)
[14:56:47] *** Joins: Thymo (~Thymo@82-74-137-251.cable.dynamic.v4.ziggo.nl)
[15:03:01] *** Quits: hinata (~hinata@2409:4042:2d11:cfb3:35af:5089:99:d2a7) (Remote host closed the connection)
[15:03:19] *** Joins: hinata (~hinata@2409:4042:2d11:cfb3:c8d3:776e:b39a:268e)
[15:11:11] *** Joins: tech_exorcist (txrcst@user/tech-exorcist/x-0447479)
[15:11:17] *** Quits: arinov_ (~arinov@31.142.86.27) (Ping timeout: 240 seconds)
[15:15:24] *** Quits: Livio (~livio@user/livio) (Ping timeout: 240 seconds)
[15:18:15] *** Quits: tusko (~yeurt@user/tusko) (Ping timeout: 240 seconds)
[15:19:51] *** Quits: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net) (Quit: Textual IRC Client: www.textualapp.com)
[15:20:12] *** Joins: tusko (~yeurt@user/tusko)
[15:20:21] *** Quits: kurahaupo (~kurahaupo@115.69.27.211) (Ping timeout: 256 seconds)
[15:23:03] *** Joins: arinov_ (~arinov@31.142.86.27)
[15:23:38] <cherrry9> int x[10] = {1 ... 9 = 10} -- is this syntax not part of the standard?
[15:23:59] <cherrry9> and the same with using {.fieldname = 10}
[15:24:36] <sham1> {.fieldname = 10} is standard but {1 ... 9 = 10} is not
[15:24:53] *** Joins: FH_thecat (~FH_thecat@75.11.25.212.ftth.as8758.net)
[15:25:02] <suss> stardard, its like syntactic sugar
[15:25:28] *** Quits: FH_thecat (~FH_thecat@75.11.25.212.ftth.as8758.net) (Remote host closed the connection)
[15:25:44] *** Quits: Akiva (~Akiva@user/Akiva) (Ping timeout: 256 seconds)
[15:27:57] *** Joins: noze (~uber@2001:41d0:a:21f1::1)
[15:30:12] *** Quits: arinov_ (~arinov@31.142.86.27) (Ping timeout: 240 seconds)
[15:30:21] *** Quits: csrf (~csrf@user/csrf) (Quit: ZNC 1.7.2+deb3 - https://znc.in)
[15:30:47] *** Joins: savolla (~quassel@95.10.204.117)
[15:31:07] *** Joins: csrf (~csrf@user/csrf)
[15:31:10] *** Joins: eroux (~eroux@102-65-85-242.ftth.web.africa)
[15:31:55] *** Joins: kurahaupo (~kurahaupo@115.69.27.211)
[15:33:10] *** Quits: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[15:36:01] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.4)
[15:36:32] *** Joins: supakeen (~user@python/site-packages/supakeen)
[15:37:18] *** Joins: blindguard (~blindguar@2a02:908:1864:c200::ef3c)
[15:38:40] <ChoHag> If I want a variable holding (say) 8 flags how can I declare/assign it with a number but access it using a struct of 8 char bit-fields?
[15:39:48] <ChoHag> I know there a host of things wrong with that I'm just curious if/how I could ensure the bits were always accessed in the right order.
[15:41:12] *** Joins: Livio (~livio@user/livio)
[15:43:52] *** Joins: random-nick (~random-ni@87.116.179.129)
[15:46:28] *** Joins: jmiehe (~Thunderbi@user/jmiehe)
[15:47:16] <NRK> i don't think bitfields of `char` is defined
[15:48:02] <NRK> and if you use an `int` then the struct size will most likely end up being 32bits due to alignment
[15:48:20] *** Parts: noze (~uber@2001:41d0:a:21f1::1) (Killed buffer)
[15:48:35] <NRK> ,cc struct ubit { unsigned u : 1; }; printf("%zu", sizeof(struct ubit));
[15:48:37] <candide> NRK: 4
[15:48:38] <fizzie> Pretty much everything about bit-fields is implementation-defined, including whether types other than `_bool`, `signed int` and `unsigned int` are allowed, as well as the order the fields are allocated in. So you can't control that. Best just to keep it a number.
[15:49:04] <fizzie> And give names for the flag bits, and test/set them with |/&.
[15:50:58] <fizzie> Obligatory references: C11 6.7.2.1p5: "A bit-field shall ave a type that is -- `_Bool`, `signed int`, `unsigned int`, or some other implementation-defined type." p11: "An implementation may allocate any addressable storage unit large enough to hold a bit-field. -- The order of allocation of bit-fields within a unit -- is implementation-defined."
[15:52:15] *** Quits: kts (~kts@103.73.237.197) (Quit: Konversation terminated!)
[15:52:25] <NRK> i'd just go with uchar and then test/set/toggle it via macros
[15:52:43] <NRK> and enum/#defines as "names"
[15:56:31] *** Joins: VoidSync (~sync@user/voidsync)
[15:59:44] <fizzie> That's what I meant. (Modulo test/set/toggle macros, which I think are a little superfluous.)
[16:02:54] *** Quits: clamiax (~clamiax@net-93-65-240-243.cust.vodafonedsl.it) (Ping timeout: 272 seconds)
[16:03:05] <veltas> bitfields shine for storing *fields*, i.e numbers of specific bit widths. IMO flags are easier as numbers using bitwise ops than bitfields of width 1.
[16:04:29] *** Joins: aqua (~aqua@user/aqua)
[16:04:52] *** aqua is now known as kish``
[16:06:15] *** Quits: kish` (~aqua@user/aqua) (Ping timeout: 240 seconds)
[16:07:58] <dave0> fizzie: fixed the damn thing... https://ideone.com/43bYwg
[16:08:29] <NRK> was it off by one? :D
[16:08:42] <dave0> NRK: inverted comparison
[16:09:05] <dave0> instead of < it should have been >
[16:09:47] *** Joins: clamiax (~clamiax@net-93-147-243-230.cust.vodafonedsl.it)
[16:11:47] <dave0> stupid something something
[16:12:04] *** Joins: skapata (~Skapata@2804:14c:87b0:9d2e:706a:5377:a70d:f1d8)
[16:12:04] *** Quits: skapata (~Skapata@2804:14c:87b0:9d2e:706a:5377:a70d:f1d8) (Changing host)
[16:12:04] *** Joins: skapata (~Skapata@user/skapata)
[16:12:23] <dave0> it's pretty bad when my example programs are riddled with bugs :-(
[16:12:33] <dave0> i feel like schildt
[16:13:17] *** Quits: gr33n7007h (~gr33n7007@user/gr33n7007h) (Ping timeout: 240 seconds)
[16:13:48] *** Quits: tusko (~yeurt@user/tusko) (Remote host closed the connection)
[16:14:09] *** Joins: tusko (~yeurt@user/tusko)
[16:14:12] *** Quits: Livio (~livio@user/livio) (Ping timeout: 240 seconds)
[16:14:40] *** Joins: gr33n7007h (~gr33n7007@user/gr33n7007h)
[16:19:32] *** Quits: zeenk (~zeenk@2a02:2f04:a30d:1300:51a3:bcfc:6cda:9fc5) (Quit: Konversation terminated!)
[16:23:22] *** Quits: bliminse (~bliminse@host109-152-150-162.range109-152.btcentralplus.com) (Quit: leaving)
[16:27:25] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:602a:2cae:7652:6a22) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[16:27:55] *** Joins: 038ABBY4F (~adip@apn-37-248-167-238.dynamic.gprs.plus.pl)
[16:27:55] *** Joins: 020AAI1FO (~adip@apn-37-248-167-238.dynamic.gprs.plus.pl)
[16:28:38] *** Quits: suss (~user@user/suss) (Ping timeout: 256 seconds)
[16:29:17] *** Joins: kts (~kts@103.73.237.27)
[16:32:47] *** Quits: guvnor (~guvnor@vaudeville.imaginatif.org) (Remote host closed the connection)
[16:34:41] *** Joins: bliminse (~bliminse@host109-152-150-162.range109-152.btcentralplus.com)
[16:34:59] *** Quits: kts (~kts@103.73.237.27) (Quit: Konversation terminated!)
[16:37:01] *** Joins: LordJohn (~lordjohn@l37-194-102-53.novotelecom.ru)
[16:41:49] *** Joins: AmR (~AmREiSa@156.199.47.115)
[16:42:14] *** Quits: iomari891 (~iomari891@105.112.138.38) (Ping timeout: 256 seconds)
[16:42:59] *** Joins: iomari891 (~iomari891@105.112.138.38)
[16:45:47] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:602a:2cae:7652:6a22)
[16:50:49] *** Joins: kts (~kts@103.73.237.67)
[16:53:34] *** Quits: YellowSuB (~YellowSuB@user/yellowsub) (Ping timeout: 272 seconds)
[16:55:01] *** Joins: YellowSuB (~YellowSuB@user/yellowsub)
[16:55:46] *** Quits: baloona (~baloona@mail.baloona.de) (Remote host closed the connection)
[16:56:10] *** Joins: baloona (~baloona@mail.baloona.de)
[16:57:28] *** Quits: 020AAI1FO (~adip@apn-37-248-167-238.dynamic.gprs.plus.pl) (Read error: Connection reset by peer)
[16:57:28] *** Quits: 038ABBY4F (~adip@apn-37-248-167-238.dynamic.gprs.plus.pl) (Read error: Connection reset by peer)
[16:57:38] *** Joins: slidercrank (~slidercra@user/slidercrank)
[17:01:58] *** Joins: zeenk (~zeenk@2a02:2f04:a30d:1300:51a3:bcfc:6cda:9fc5)
[17:02:53] *** Quits: ironman (~ironman@2405:201:1010:b033:bad0:8910:44c9:da61) (Quit: Leaving)
[17:03:15] *** Quits: joev (~joev@user/joev) (Ping timeout: 256 seconds)
[17:03:40] *** Joins: adip (~adip@apn-37-248-167-238.dynamic.gprs.plus.pl)
[17:03:41] *** Joins: adip_ (~adip@apn-37-248-167-238.dynamic.gprs.plus.pl)
[17:03:50] *** Joins: masoudd (~masoudd@user/masoudd)
[17:04:23] *** Joins: NEYi (~NEYi@109.251.216.38)
[17:04:28] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:602a:2cae:7652:6a22) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[17:04:54] *** Joins: joev (~joev@user/joev)
[17:08:05] *** Quits: hinata (~hinata@2409:4042:2d11:cfb3:c8d3:776e:b39a:268e) (Quit: Leaving)
[17:08:58] *** Quits: VoidSync (~sync@user/voidsync) (Remote host closed the connection)
[17:11:56] *** Quits: geowiesnot (~user@5-51-190-244.abo.bbox.fr) (Ping timeout: 272 seconds)
[17:12:53] *** Quits: fbiagent__ (~fbiagent@user/fbiagent) (Remote host closed the connection)
[17:14:35] *** Quits: seninha (~chatzilla@user/seninha) (Ping timeout: 256 seconds)
[17:15:25] *** Joins: fbiagent (~fbiagent@user/fbiagent)
[17:16:40] *** Joins: sh0ne (~sh0ne@178.237.217.167)
[17:19:30] *** Joins: brad_mssw (~bhouse@2601:344:4100:b490:7de8:69c9:26f5:a1d6)
[17:21:00] *** Joins: gh34 (~textual@cpe-184-58-181-106.wi.res.rr.com)
[17:21:01] *** Joins: nuxil_ (~nuxil@141.195.51.213)
[17:21:19] *** Quits: nuxil (~nuxil@141.195.51.213) (Read error: Connection reset by peer)
[17:26:38] *** Joins: mad_enz (~mad_enz@lnsm4-toronto12-50-101-118-206.internet.virginmobile.ca)
[17:27:21] *** Quits: ldericher (~LDer@pantalaimon.yavook.de) (Quit: ZNC 1.8.2 - https://znc.in)
[17:32:42] *** Joins: nuxil (~nuxil@141.195.51.213)
[17:35:33] *** Quits: nuxil_ (~nuxil@141.195.51.213) (Ping timeout: 256 seconds)
[17:36:07] *** Joins: ldericher (~LDer@pantalaimon.yavook.de)
[17:36:41] *** Joins: seninha (~chatzilla@user/seninha)
[17:39:45] *** Joins: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net)
[17:42:01] *** Quits: frost (~frost@user/frost) (Ping timeout: 256 seconds)
[17:42:02] *** Joins: drbeco (~beco@2804:351c:dd01:f000:a19e:a89a:e0cb:cec7)
[17:44:34] *** Quits: p0g0 (~p0g0@user/p0g0) (Ping timeout: 256 seconds)
[17:45:17] *** Joins: bolovanos (~bolovanos@user/bolovanos)
[17:48:02] *** Joins: p0g0 (~p0g0@user/p0g0)
[17:48:11] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[17:48:11] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[17:48:11] *** Joins: wroathe (~wroathe@user/wroathe)
[17:48:56] *** Quits: tejr (~tejr@user/tejr) (Remote host closed the connection)
[17:49:13] *** Joins: tejr (~tejr@user/tejr)
[17:49:40] *** Quits: ffl^ (~ffl@50-202-219-146-static.hfc.comcastbusiness.net) (Remote host closed the connection)
[17:50:12] *** Quits: gr33n7007h (~gr33n7007@user/gr33n7007h) (Ping timeout: 240 seconds)
[17:51:27] *** Quits: cosimone (~user@93-34-132-33.ip49.fastwebnet.it) (Remote host closed the connection)
[17:51:52] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[17:52:10] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Quit: Ex-Chat)
[17:52:36] *** Joins: brad_mssw|mac (~bhouse@2601:344:4100:b490:939:2adb:cbd6:1f0f)
[17:52:38] *** Joins: gr33n7007h (~gr33n7007@user/gr33n7007h)
[17:53:02] *** Quits: brad_mssw (~bhouse@2601:344:4100:b490:7de8:69c9:26f5:a1d6) (Ping timeout: 240 seconds)
[17:53:47] *** Quits: brad_mssw|mac (~bhouse@2601:344:4100:b490:939:2adb:cbd6:1f0f) (Client Quit)
[17:56:14] *** Joins: brad_mssw (~bhouse@c-76-106-206-149.hsd1.fl.comcast.net)
[17:57:29] *** Joins: zer0bitz (~zer0bitz@2001:2003:f74d:b800:b4a7:dec3:a543:4b87)
[17:57:37] *** Quits: sh0ne (~sh0ne@178.237.217.167) (Read error: Connection reset by peer)
[17:58:39] *** Joins: meandrain (~meandrain@2a02:2f0e:f70f:6e00:a999:e931:80a4:18ae)
[17:59:05] *** Joins: byteskeptical (~amnesia@user/byteskeptical)
[17:59:07] *** Quits: yano (~yano@ircpuzzles/staff/yano) (Quit: WeeChat, the better IRC client, https://weechat.org/)
[18:01:21] *** Quits: savolla (~quassel@95.10.204.117) (Ping timeout: 272 seconds)
[18:01:24] *** Quits: dogbert2 (~Bill@ip68-227-25-62.lv.lv.cox.net) (Remote host closed the connection)
[18:01:25] *** Quits: Alhazred (~Alhazred@86.106.74.40) (Ping timeout: 240 seconds)
[18:01:40] *** Joins: dogbert2 (~Bill@ip68-227-25-62.lv.lv.cox.net)
[18:02:08] *** Joins: yano (~yano@ircpuzzles/staff/yano)
[18:03:22] *** Joins: Alhazred (~Alhazred@ool-18b829c5.dyn.optonline.net)
[18:06:46] *** Quits: ldericher (~LDer@pantalaimon.yavook.de) (Quit: ZNC 1.8.2 - https://znc.in)
[18:07:24] *** Joins: ldericher (~LDer@pantalaimon.yavook.de)
[18:08:37] *** Joins: Tempesta (~Tempesta@user/tempesta)
[18:09:49] *** Quits: adip_ (~adip@apn-37-248-167-238.dynamic.gprs.plus.pl) (Read error: Connection reset by peer)
[18:09:49] *** Quits: adip (~adip@apn-37-248-167-238.dynamic.gprs.plus.pl) (Read error: Connection reset by peer)
[18:12:43] *** Joins: Livio (~livio@user/livio)
[18:18:56] *** Quits: bzng (~bzng4@91-115-30-192.adsl.highway.telekom.at) (Quit: Leaving)
[18:19:08] *** Quits: slidercrank (~slidercra@user/slidercrank) (Ping timeout: 256 seconds)
[18:20:03] *** Joins: placeb0 (uid283215@id-283215.lymington.irccloud.com)
[18:20:04] *** Quits: dave0 (~davezero@069.d.003.ncl.iprimus.net.au) (Quit: dave's not here)
[18:21:52] *** Joins: Guest7390 (~Guest73@2a02:587:481c:a644:c33:769f:d26c:f46)
[18:24:08] *** Quits: eroux (~eroux@102-65-85-242.ftth.web.africa) (Ping timeout: 272 seconds)
[18:24:17] *** Quits: Guest7390 (~Guest73@2a02:587:481c:a644:c33:769f:d26c:f46) (Client Quit)
[18:24:28] *** Joins: Guest (~Guest@2a02:587:481c:a644:c33:769f:d26c:f46)
[18:25:11] *** Quits: Guest (~Guest@2a02:587:481c:a644:c33:769f:d26c:f46) (Client Quit)
[18:25:56] *** Joins: pulse (~pulse@user/pulse)
[18:26:13] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[18:26:58] *** Joins: goepsilongo (~goepsilon@2603-7000-ab00-62ed-9cab-8f8d-e5ab-3a17.res6.spectrum.com)
[18:28:20] *** Joins: vysn (~vysn@user/vysn)
[18:28:20] *** Joins: the_lanetly_052_ (~the_lanet@185.30.89.14)
[18:29:49] *** Joins: cvmn (~caveman@gateway/tor-sasl/caveman)
[18:30:46] *** Quits: the_lanetly_052 (~the_lanet@194.135.154.63) (Ping timeout: 245 seconds)
[18:32:04] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[18:32:05] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[18:32:05] *** Joins: wroathe (~wroathe@user/wroathe)
[18:34:24] *** Joins: AbleBacon (~AbleBacon@user/AbleBacon)
[18:35:35] *** Quits: de-facto (~de-facto@user/de-facto) (Ping timeout: 240 seconds)
[18:36:05] *** Joins: de-facto (~de-facto@user/de-facto)
[18:39:58] *** Joins: adip (~adip@apn-37-248-167-238.dynamic.gprs.plus.pl)
[18:40:06] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[18:40:06] *** Joins: adip_ (~adip@apn-37-248-167-238.dynamic.gprs.plus.pl)
[18:41:48] *** Quits: joedoe47 (~weechat@c-98-254-188-143.hsd1.fl.comcast.net) (Ping timeout: 240 seconds)
[18:42:55] *** Joins: joedoe47 (~weechat@c-98-254-188-143.hsd1.fl.comcast.net)
[18:45:02] *** Joins: crashrep (~crashrep@user/crashrep)
[18:46:43] *** Joins: andrade (~andrade@user/andrade)
[18:47:32] *** Joins: theseb (~theseb@47-220-214-54.cnrocmta03.res.dyn.suddenlink.net)
[18:48:02] <theseb> possible to do &my_function to get address of function to be used as function pointer later?
[18:50:31] <sham1> That's the way to get a function pointer, yes
[18:50:54] *** Joins: mikoto-chan (~mikoto-ch@213.177.151.239)
[18:51:34] <pragma-> except without the &
[18:51:48] <BUTTS> or with it
[18:51:53] <pragma-> but without it
[18:51:55] <BUTTS> works the same
[18:52:02] <BUTTS> weird quirk
[18:52:02] <pragma-> works better without
[18:52:21] *** Joins: meator (~meator@user/meator)
[18:52:28] <BUTTS> in GCC, at least
[18:52:42] <BUTTS> what compiler are you using, pragma- ?
[18:52:48] <sham1> my_func == &my_func according to the standard
[18:52:58] *** Joins: arinov_ (~arinov@31.142.86.27)
[18:53:01] <sham1> Indeed: &&&&&&&&&&&&&&&&&&&&&&&&&&my_func is also possible, as is ***************************my_func
[18:53:26] <BUTTS> scary
[18:53:44] <sham1> ,cc (&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&printf)("Hello, #C");
[18:53:46] <candide> sham1: error: expected identifier before '&&' token
[18:53:49] <sham1> Hm
[18:53:56] <edk> & does not work
[18:53:57] <sham1> Does it only work with derefs
[18:54:00] <sham1> Ah
[18:54:06] <sham1> ,cc (**********************************printf)("Hello, #C");
[18:54:08] <candide> sham1: Hello, #C
[18:54:40] <masoudd> heresy! only prime numbers of *'s are allowed
[18:55:12] <sham1> Okay
[18:55:23] <sham1> ,cc (**puts)("k");
[18:55:25] <candide> sham1: k
[18:55:33] <pragma-> fake chocolate is a hershey's
[19:00:51] *** Joins: cuppajoe (~joe@ip70-171-93-122.no.no.cox.net)
[19:02:01] *** Quits: cuppajoe (~joe@ip70-171-93-122.no.no.cox.net) (Client Quit)
[19:02:14] *** Joins: cuppajoe (~joe@ip70-171-93-122.no.no.cox.net)
[19:05:22] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[19:06:01] <theseb> are all pointers basically 32bits just like unsigned ints?
[19:06:30] <pragma-> are all morons basically trolls just like you?
[19:06:48] <theseb> Reason I ask is I want to store a function pointer address as an unsigned int...if i do a type case like (unsigned int) &myfunc will bad things happen?
[19:07:29] <theseb> s/case/cast
[19:07:57] *** Quits: meator (~meator@user/meator) (Ping timeout: 240 seconds)
[19:08:17] *** Quits: vysn (~vysn@user/vysn) (Remote host closed the connection)
[19:09:23] <markand> uintptr_t at least
[19:10:05] *** Quits: cuppajoe (~joe@ip70-171-93-122.no.no.cox.net) (Quit: WeeChat 3.4)
[19:10:25] <theseb> markand: can you elaborate? i'm not familiar with uintptr_t...all i know is "(unsigned int) &my_func"
[19:10:29] <NRK> why not use void * ?
[19:10:32] *** Joins: vysn (~vysn@user/vysn)
[19:11:00] <markand> theseb, functions pointers must be stored in a function pointer type, otherwise it's fully UB
[19:11:03] *** Joins: meator (~meator@user/meator)
[19:12:02] <theseb> NRK: i have a huge memory space I've malloced like this... unsigned int *exp   = malloc(100000 * sizeof(unsigned int));
[19:12:16] *** Quits: mikoto-chan (~mikoto-ch@213.177.151.239) (Ping timeout: 272 seconds)
[19:12:16] *** Quits: adip_ (~adip@apn-37-248-167-238.dynamic.gprs.plus.pl) (Ping timeout: 272 seconds)
[19:12:16] *** Quits: adip (~adip@apn-37-248-167-238.dynamic.gprs.plus.pl) (Ping timeout: 272 seconds)
[19:12:25] <theseb> NRK: i wanted to store pointer addresses inside this array of unsigned ints!
[19:12:27] <markand> storing a function pointer in a void * is UB as well
[19:12:33] <theseb> markand: what is UB?
[19:12:40] <markand> oh nvm
[19:13:07] <clarity> untitled booze
[19:13:08] <theseb> markand: i think gcc will complain if try to put anything but unsigned int within my exp array
[19:13:22] <theseb> i've noticed the type checker is pretty thorough now
[19:16:54] *** Joins: mtor (~meator@user/meator)
[19:17:22] *** Quits: meator (~meator@user/meator) (Read error: Connection reset by peer)
[19:18:55] *** Quits: cvmn (~caveman@gateway/tor-sasl/caveman) (Ping timeout: 240 seconds)
[19:20:45] *** Joins: malina (~malina@user/malina)
[19:22:48] <masoudd> ,ub
[19:22:49] <candide> Undefined behavior is behavior for which the C standard does not impose any requirements. This is to allow C the freedom to be implemented on systems with different architectures. Programs invoking undefined behavior may appear to compile and even run without errors at first, only to fail on another system, or even at a later time. If you want to write reliable code, don't use such behaviors.
[19:22:53] *** Quits: mintograde (~mintograd@47.201.5.61) (Ping timeout: 256 seconds)
[19:23:06] <fizzie> If it's intended to be a generic array of "anything", just change the type. A `union { intmax_t num; uintmax_t word; void *ptr; void (*func)(void); }` for example could in principle store the value of any of the integer types, or a pointer to either an object or a function.
[19:23:10] <fizzie> (Of course it's likely a little larger than an `unsigned int`, but...)
[19:28:43] <fizzie> ,cc -w unsigned int p = (unsigned int) puts; int (*f)(const char *) = (int (*)(const char *)) p; f("this sort of thing can absolutely fail to work, depending on compilation settings");
[19:28:45] <candide> fizzie: this sort of thing can absolutely fail to work, depending on compilation settings
[19:28:45] <fizzie> ,cc -w -pie -fpie unsigned int p = (unsigned int) puts; int (*f)(const char *) = (int (*)(const char *)) p; f("like what happens here");
[19:28:55] <candide> fizzie:  The program being debugged was signaled while in a function called from GDB. GDB remains in the frame where the signal was received. To change this behavior use "set unwindonsignal on". Evaluation of the expression containing the function (at 0x0xf7e31260) will be abandoned. When the function is done executing, GDB will silently stop.  [gdb time-out]
[19:29:09] <fizzie> Same code, different flags, no longer works.
[19:30:15] *** Quits: Livio (~livio@user/livio) (Ping timeout: 256 seconds)
[19:33:05] <pragma-> hmm i wonder where in gdb that's timing out. could probaby stick a `cont` or something there
[19:34:13] *** Quits: eddybilley (~freddieti@217.119.232.174) (Ping timeout: 256 seconds)
[19:34:15] *** Quits: crashrep (~crashrep@user/crashrep) (Ping timeout: 240 seconds)
[19:34:19] * pragma- squints at 0x0xf7...
[19:34:41] *** Joins: rgrinberg (~textual@2806:101e:7:70b6:c59d:eeae:406c:16f2)
[19:35:13] <fizzie> I guess that was because of the print-last-expression thing caused the `f(...)` call to be a GDB `call` command call.
[19:35:36] <fizzie> ,cc -w -pie -fpie int main(void) { unsigned int p = (unsigned int) puts; int (*f)(const char *) = (int (*)(const char *)) p; f("crash more regularly?"); }
[19:35:37] <candide> fizzie:  Program received signal SIGSEGV, Segmentation fault in ?? () called by main () at statement: f("crash more regularly?");
[19:39:30] *** Quits: rgrinberg (~textual@2806:101e:7:70b6:c59d:eeae:406c:16f2) (Ping timeout: 260 seconds)
[19:40:46] *** Quits: andrade (~andrade@user/andrade) (Ping timeout: 245 seconds)
[19:42:12] *** Quits: Sadale (~Sadale@user/sadale) (Read error: Connection reset by peer)
[19:43:03] *** Joins: wovixo (~wovixo@128.104.205.49)
[19:44:39] *** Quits: mtor (~meator@user/meator) (Remote host closed the connection)
[19:44:58] *** Joins: mtor (~meator@user/meator)
[19:45:26] *** Joins: Sadale (~Sadale@user/sadale)
[19:46:35] *** Joins: suss (~user@user/suss)
[19:55:35] <theseb> fizzie: i'm guessing union lets a variable be multiple types simultaneously?  i don't see how that is possible if the types all have different *sizes*?!
[19:55:55] *** Joins: mikoto-chan (~mikoto-ch@213.177.151.239)
[19:55:56] *** Joins: adip (~adip@apn-37-248-167-238.dynamic.gprs.plus.pl)
[19:56:27] <theseb> fizzie: i honestly just need *2*...unsigned int and a function pointer
[19:56:32] <theseb> types
[19:57:39] <twkm> unions allows you to reuse storage, you must know the type that was last written to safely read it.
[19:58:07] <twkm> which is why some wrap it in a struct with the union and a type indicator.
[19:58:59] *** Joins: cvmn (~caveman@gateway/tor-sasl/caveman)
[19:59:00] *** Quits: Sadale (~Sadale@user/sadale) (Read error: Connection reset by peer)
[20:00:49] *** Quits: adip (~adip@apn-37-248-167-238.dynamic.gprs.plus.pl) (Read error: Connection reset by peer)
[20:01:19] *** Quits: mikoto-chan (~mikoto-ch@213.177.151.239) (Ping timeout: 250 seconds)
[20:01:25] *** Quits: msk (~Thunderbi@89.205.124.40) (Ping timeout: 256 seconds)
[20:02:07] *** Joins: Sadale (~Sadale@user/sadale)
[20:03:27] *** Joins: crashrep (~crashrep@user/crashrep)
[20:04:34] *** Joins: Common-Lisp (~common_li@12.2.190.242)
[20:05:58] *** Quits: mtor (~meator@user/meator) (Quit: Leaving)
[20:06:04] <theseb> At least for the old standard C from the 80s and 90s...there really are types that are more than 32 bits?
[20:06:41] <theseb> I somehow got the idea ints, addresses, et al was all <= 32 bits
[20:06:49] <theseb> yes?
[20:06:50] <clarity> uh no
[20:06:52] *** Joins: FluffyMask (~masque@user/fluffymask)
[20:06:55] <theseb> aww
[20:06:58] <theseb> that stinks
[20:07:00] <clarity> the standards don't state the width of the types
[20:07:06] <clarity> they have some minimums
[20:07:29] <theseb> clarity: yes they may be LESS than 32 bits but what from old standard C is MORE than 32 bits?
[20:07:53] <clarity> Do you understand what minimum means?
[20:07:56] <theseb> clarity: oh you're saying they dont' give the size of the max size
[20:08:02] <Common-Lisp> correct
[20:08:04] <theseb> so you can't assume the int size
[20:08:06] <theseb> ug
[20:08:09] <theseb> that really stinks
[20:08:15] <Common-Lisp> there are systems where all int types have the same width
[20:08:15] *** Quits: crashrep (~crashrep@user/crashrep) (Ping timeout: 240 seconds)
[20:08:21] *** Joins: eddybilley (~freddieti@2a02-a454-7f89-1-90ce-ca8d-49d4-5de5.fixed6.kpn.net)
[20:08:24] <Common-Lisp> there are also systems that have 9-bit CHAR lol
[20:08:25] *** Joins: goodfella (~archer@user/tessio)
[20:08:35] <theseb> I'm not ANSI committee but it seems like it would have been better to just nail down max and min sizes all at once
[20:08:41] *** Quits: vysn (~vysn@user/vysn) (Ping timeout: 250 seconds)
[20:08:43] <Common-Lisp> in fact, C does not specify that by default "char" is signed, and there are systems where char is unsigned
[20:09:05] <Common-Lisp> theseb: that would kill portability.
[20:09:27] <goodfella> theseb: define max and min
[20:09:36] <goodfella> as every computer back then was it's own definition of them
[20:09:43] <goodfella> s/every/some
[20:10:09] *** Joins: mintograde (~mintograd@47.201.5.61)
[20:10:21] *** Joins: dp1021 (~Srain@host86-136-133-7.range86-136.btcentralplus.com)
[20:10:51] <Common-Lisp> It's especially fun when you find a system that eg doesn't support sub-word access, and a word is >2 bytes
[20:11:10] <Common-Lisp> so you'll have 32-bit CHAR and everything that assumes CHAR_BIT=8 explodes
[20:11:46] <Common-Lisp> Or systems where sizeof(int *) > sizeof(int)
[20:12:01] <sham1> Well systems where sizeof(int *) > sizeof(int) include AMD64
[20:12:09] <sham1> So clearly we're doing fine
[20:12:32] *** Quits: eddybilley (~freddieti@2a02-a454-7f89-1-90ce-ca8d-49d4-5de5.fixed6.kpn.net) (Ping timeout: 240 seconds)
[20:12:36] <theseb> wait...32 bits is 4Gb...maybe in principle a pointer address can be more than 32 bits but IN REALITY unless your program allocates more than 4Gb you're safe assuming less than or equal to 32 bits! yes!?
[20:12:38] <sham1> But yeah, CHAR_BIT==32 is something where I'd say most code would fail because nowadays we're so used to octets
[20:12:49] <theseb> please say yes
[20:12:52] <sham1> No
[20:13:01] *** Quits: LordJohn (~lordjohn@l37-194-102-53.novotelecom.ru) (Read error: Connection reset by peer)
[20:13:03] <sham1> The higher bits might be significant even if you only have access to 4 GiB
[20:13:05] *** Quits: moog (~moog@107.126.53.146) (Ping timeout: 256 seconds)
[20:13:24] <goodfella> sham1 he said please say yes common ...
[20:13:33] <Common-Lisp> theseb: Well, most well-written code won't fail; if you're doing something that depends on CHAR_BIT, you should use CHAR_BIT, not the literal 8
[20:14:04] <Common-Lisp> If you write code that assumes a specific value of CHAR_BIT, you have written bad code
[20:14:25] *** Joins: lisbeths (~user@c-73-83-140-133.hsd1.wa.comcast.net)
[20:14:42] <lisbeths> Why is EOF not a character?
[20:14:47] *** Joins: LordJohn (~lordjohn@l37-194-102-53.novotelecom.ru)
[20:15:00] <sham1> lisbeths: it's defined such that it can't be
[20:15:06] <goodfella> lisbeths: to tell apart a data from the end of data
[20:15:09] <Common-Lisp> lisbeths: same reason NULL isn't a memory address
[20:15:11] *** Joins: doorzan (~doorzan@2800:200:f540:73::c)
[20:15:12] <pragma-> s/EOF$//  # yay infinite files
[20:15:34] *** Quits: doorzan (~doorzan@2800:200:f540:73::c) (Changing host)
[20:15:34] *** Joins: doorzan (~doorzan@user/doorzan)
[20:15:37] <goodfella> filE
[20:15:59] <Common-Lisp> the megafile
[20:16:25] *** Quits: malina (~malina@user/malina) (Remote host closed the connection)
[20:16:52] <lisbeths> Well when I think of serial data like sent through a pipe | in bash I think that characters are sent through, but now I am finding out entire integers can be sent through, or am I incorrect?
[20:17:03] <goodfella> is compulsive  colorscheme changing is normal behaviour  ?
[20:17:06] <pragma-> characters are integers.
[20:17:21] <Common-Lisp> lisbeths: what do you think the difference between a character and an integer is?
[20:17:24] *** Quits: doorzan (~doorzan@user/doorzan) (Client Quit)
[20:17:27] <Common-Lisp> goodfella: yes.
[20:17:39] <goodfella> thank god
[20:17:42] *** Joins: doorzan (~doorzan@2800:200:f540:73::c)
[20:17:42] *** Quits: doorzan (~doorzan@2800:200:f540:73::c) (Changing host)
[20:17:42] *** Joins: doorzan (~doorzan@user/doorzan)
[20:17:58] <lisbeths> An integer is multiple bytes whereas a character is 1 byte.
[20:18:47] <Common-Lisp> lisbeths: a key point here is that they're both bytes
[20:19:00] <Common-Lisp> pipes are just files that programs read and write ones and zeroes to/from
[20:19:15] <Common-Lisp> it's up to the programs to interpret those digits in any particular way
[20:19:18] <goodfella> a "char" is just the number of bits to represent any character in the local character set
[20:19:29] <goodfella> they are numbers ( ints ) internally
[20:19:31] <sham1> Also smallest addressible unit
[20:19:47] <goodfella> and you can use character constant in expressions as well
[20:20:01] <doorzan> I usually just use "uint8_t" for a single byte in order to improve readability, but what they're saying is true, "char" is basically the same as "byte"
[20:20:21] <sham1> unsigned char so you don't have to deal with the ambiguity of whether char is signed or unsigned, but yes
[20:20:24] <Common-Lisp> *on systems with CHAR_BIT==8
[20:20:49] <sham1> Well a byte as far as C is concerned is whatever char is
[20:20:55] <Common-Lisp> I'm actually curious if there's any systems out there with CHAR_BIT>8 that support uint8_t
[20:20:57] <sham1> It has as many bits as CHAR_BIT says it does
[20:21:32] <goodfella> sham1: now, i know the basics why didn't i wrote something meaningful in my life ?
[20:21:34] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[20:21:37] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[20:21:39] <goodfella> :)
[20:21:46] <doorzan> If they wouldn't support uint8_t it would probably be a bug wouldn't it? Maybe they have a custom implementation for uint8_t if these systems exist
[20:21:49] *** Joins: geowiesnot (~user@5-51-190-244.abo.bbox.fr)
[20:22:05] <sham1> Well uint8_t isn't required to exist
[20:22:07] *** Joins: analognoise (~analognoi@ip98-176-154-48.sd.sd.cox.net)
[20:22:26] <doorzan> It's inside of stdint.h, if it didn't exist, lots of programs would break
[20:22:28] <Common-Lisp> yeah I looked it up, the spec says uint8_t exists iff the system supports it lol
[20:22:40] <Common-Lisp> It also only exists iff the system supports 2's complement, which many systems do not
[20:23:01] <doorzan> Hmm I didn't know that
[20:23:04] <doorzan> Interesting
[20:23:07] <sham1> Well too bad, they won't be gettint C2023
[20:23:58] <Common-Lisp> Check out C99 chapter 7.18 line 4
[20:24:19] *** Joins: analognoise1 (~analognoi@192.145.80.4)
[20:24:31] <sham1> What I do wonder though is that how would a machine that has, say, CHAR_BIT be 32, how would that machine do networking for example
[20:24:43] <sham1> Since basically everything expects octets
[20:24:48] <Common-Lisp> for each type described herein that the implementation does not provide, <stdint.h> shall not declare that typedef name nor shall it define the associated macros
[20:25:13] <Common-Lisp> > sham1: I'm assuming they align manually
[20:25:39] *** Quits: foxtrot (~foxtrot@user/foxtrot) (Quit: Goodbye)
[20:25:46] <sham1> What I'm mostly curious about is whether one could specify the amount of octets to read from that byte/word
[20:25:58] <Common-Lisp> There's nothing stopping you from storing an octet in a 32-bit char. The problem is when you make assumptions about alignment
[20:26:27] <Common-Lisp> Trying to be more space-efficient by backing multiple discrete octets into a char sounds like a fool's errand
[20:26:37] <Common-Lisp> At least, on systems that don't permit subword access
[20:26:54] <Common-Lisp> s/backing/packing/g
[20:27:37] *** Quits: analognoise (~analognoi@ip98-176-154-48.sd.sd.cox.net) (Ping timeout: 240 seconds)
[20:28:30] <doorzan> That makes me wonder how these systems do booleans, since I'm assuming you could automatically just use the same logic with a uint8_t
[20:29:43] *** Quits: placeb0 (uid283215@id-283215.lymington.irccloud.com) (Quit: Connection closed for inactivity)
[20:30:52] <Common-Lisp> or a bitfield.
[20:31:00] *** Joins: effexzi (uid474242@id-474242.ilkley.irccloud.com)
[20:31:53] <Common-Lisp> I imagine a lot of effort on bespoke optimizing compilers was dedicated to that problem
[20:32:02] <sham1> Any implementation should be able to do _Bool since they can just take one bit of their smallest type size, use that size and make everything else padding bits
[20:32:18] *** Quits: MajorBiscuit (~MajorBisc@c-001-017-039.client.tudelft.eduvpn.nl) (Ping timeout: 256 seconds)
[20:32:24] <Common-Lisp> You could probably sell a lot of licenses if you found an efficient way to store dozens of booleans in an 18-bit char on the DEC-10 for example.
[20:32:52] <Common-Lisp> Well, maybe one and one half dozens.
[20:33:58] <Common-Lisp> There's also systems with working C compilers where the machine byte is LESS than 8 bits, which is not allowed by any version of C
[20:34:23] <Common-Lisp> Usually those had char defined as a word, and C programs were just way slower than assembly programs in most cases.
[20:34:30] *** Quits: Natch (~natch@c-4db8e255.014-297-73746f25.bbcust.telenor.se) (Remote host closed the connection)
[20:34:41] <sham1> Yeah, for example if one had a 6-bit machine for some reason, one could make CHAR_BIT 12
[20:34:51] <sham1> And then somehow allow for subwords
[20:35:09] *** Joins: wootehfoot (~wootehfoo@user/wootehfoot)
[20:35:17] *** Joins: dp1022 (~dp1021@2a00:23c6:559c:ee01:7f6:7f34:6416:e90)
[20:36:04] <Common-Lisp> Yeah, and I understand that was reasonably common 'back in the day'
[20:36:25] <Common-Lisp> It's one of those cases where you can prioritize portability or application speed, but not both
[20:37:19] <Common-Lisp> For all its ills, one of the main benefits of Pentiums taking over the universe is that we don't have to deal with that tradeoff anymore
[20:37:41] *** Joins: Akiva (~Akiva@user/Akiva)
[20:38:10] *** Joins: manoweb (~Alessio.S@c-73-158-143-8.hsd1.ca.comcast.net)
[20:38:13] <doorzan> Yeah, just thinking about it sounds like a nightmare
[20:38:42] <manoweb> is this the channel that was previously on openprojects.net?
[20:38:47] *** Joins: foxtrot (~foxtrot@user/foxtrot)
[20:38:57] <Common-Lisp> It's still prescient if you deal with custom microcontrollers, but it's usually a problem for your compiler team ;)
[20:39:15] <sham1> 36
[20:39:21] <sham1> wrong window
[20:39:55] <manoweb> (also known as freenode)
[20:40:05] <manoweb> or is it a completely different community?
[20:40:22] <doorzan> I think with microcontrollers it's okay since most of the software for those is specialized
[20:40:43] <sham1> manoweb: this is indeed the channel that was over on freenode
[20:40:57] *** Joins: moog (~moog@107.126.53.146)
[20:41:09] *** Quits: dp1022 (~dp1021@2a00:23c6:559c:ee01:7f6:7f34:6416:e90) (Quit: Leaving)
[20:41:11] <Common-Lisp> Yeah, and oftentimes it's genuinely easier to write an emulator for your microcontroller as opposed to binding yourself to 'strictly portable' C on top of an inefficient libc implementation
[20:43:13] <lisbeths> goodfella: so are you saying characters are represented as ints in files?
[20:43:18] <sham1> With a constrained enough device one might just want to write assembly anyway
[20:43:38] *** Joins: dp1022 (~dp1021@2a00:23c6:559c:ee01:7f6:7f34:6416:e90)
[20:44:30] <doorzan> I think there definitely are some benefits to writing C code even with these really small systems, but it's not going to be something you're going to compile natively on your machine
[20:44:40] *** Joins: unlink2 (~unlink@p200300ebcf147a00a0c5a97c70c72521.dip0.t-ipconnect.de)
[20:45:00] <doorzan> s/on/for/g
[20:45:23] *** Joins: crashrep (~crashrep@user/crashrep)
[20:46:13] *** Quits: dp1022 (~dp1021@2a00:23c6:559c:ee01:7f6:7f34:6416:e90) (Client Quit)
[20:50:51] *** Joins: vicfred (~vicfred@user/vicfred)
[20:52:03] <goodfella> lisbeths: yes
[20:52:44] <goodfella> lisbeths: in almost all modern computer these are the ascii values
[20:53:07] <sham1> UTF-8
[20:53:31] <sham1> Of course since all valid ASCII is also valid UTF-8, that immediately inflates the number of stuff encoded in UTF_8
[20:53:34] <sham1> UTF-8*
[20:53:34] *** Parts: Common-Lisp (~common_li@12.2.190.242) ()
[20:54:33] <doorzan> Yeah, but char usually represents ASCII. If you want to do UTF-8 you do have to jump through some hoops
[20:57:51] <lisbeths> goodfella: is there any value other than EOF which can exist out of the charset?
[20:58:28] <lisbeths> oh I see so ascii stores ints?
[20:58:59] <sham1> No. ASCII is an encoding scheme between characters and numbers
[20:59:03] <doorzan> It stores 8-bit integers
[20:59:38] *** Joins: SymbioticFemale (~Symbiotic@user/SymbioticFemale)
[20:59:51] <lisbeths> okay this answers enough of my question to do my own research
[20:59:52] <lisbeths> thank you
[21:00:32] <NRK> isn't ascii 7bit?
[21:00:34] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:602a:2cae:7652:6a22)
[21:00:36] <sham1> Yes
[21:01:11] <doorzan> There's also extended ASCII which goes up until 255
[21:01:32] <sham1> But that's not ASCII, that's extended ASCII
[21:01:42] <doorzan> https://www.ascii-code.com/
[21:01:44] <candide> Title of doorzan's link: ASCII Code - The extended ASCII table
[21:01:50] * pragma- fondly remembers drawing boxes with extended ASCII
[21:02:05] <sham1> Of course those box-drawing characters exist in Unicode
[21:02:14] <pragma-> not in 1989!
[21:02:16] *** Joins: Natch (~natch@c-4db8e255.014-297-73746f25.bbcust.telenor.se)
[21:02:27] <sham1> Yeah but if you want to do it in 2022
[21:02:42] <doorzan> That's what people (or at least I) usually refer to when they say ASCII since ignoring half of the possibilities doesn't really give you back that extra bit
[21:02:54] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[21:03:16] <sham1> Could always use the left-over bit as a parity
[21:03:39] <doorzan> True
[21:03:57] <NRK> how do u draw boxes with ascii?
[21:04:23] <NRK> |Z|
[21:04:27] <pragma-> *extended* ascii
[21:04:36] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[21:05:16] <pragma-> +---+
[21:05:19] <pragma-> | hi |
[21:05:20] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Client Quit)
[21:05:23] <pragma-> +----+
[21:05:26] <pragma-> doh
[21:05:35] <NRK> you messed up
[21:05:48] *** manoweb is now known as alesan
[21:05:54] <doorzan> All because of ___nick___
[21:06:21] *** Quits: clamiax (~clamiax@net-93-147-243-230.cust.vodafonedsl.it) (Remote host closed the connection)
[21:06:22] <doorzan> Oh I just realized the top is also shorter
[21:06:52] <NRK> unicringe ain't that bad once you realize you can draw wizzards with it
[21:06:57] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[21:07:13] *** Joins: clamiax (~clamiax@net-93-147-243-230.cust.vodafonedsl.it)
[21:07:32] *** Joins: t3nj1n (~t3nj1n@pool-173-52-219-149.nycmny.fios.verizon.net)
[21:07:33] <NRK> (∩｀-´)⊃━☆ﾟ.*･｡ﾟ woosh, now you shall have a UB free compile!
[21:07:39] *** Joins: t3nj1n_ (~t3nj1n@pool-173-52-219-149.nycmny.fios.verizon.net)
[21:07:51] *** Parts: alesan (~Alessio.S@c-73-158-143-8.hsd1.ca.comcast.net) (Leaving)
[21:08:05] <NRK> definitely better than drawing yawn boxes
[21:08:36] *** Quits: foxtrot (~foxtrot@user/foxtrot) (Ping timeout: 240 seconds)
[21:10:36] *** Quits: pulse (~pulse@user/pulse) (Ping timeout: 240 seconds)
[21:12:33] <sham1> Doing stuff like using Gentoo on an old netbook really makes you appreciate short compile times
[21:12:41] <masoudd> but unicode has cats. can't argue with that
[21:12:46] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[21:12:46] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[21:12:46] *** Joins: wroathe (~wroathe@user/wroathe)
[21:12:47] <phryk> Does anybody here have experience with cmocka? I'm currently wondering how to write tests for a program that is just a single .c file and am not even sure what to search the web for to get the info I need…
[21:13:25] <sham1> Well you want to make your test program a separate file
[21:13:35] <phryk> sham1: that much i know.
[21:13:41] <phryk> Only way that gets close to what I want would be doing `#include "myprogram.c"` – but that of course runs into errors because now i have two definitions for main.
[21:13:46] <sham1> What you need to do is somehow use your "single C file" like a library
[21:14:05] <phryk> Yeah, but is that even possible without a corresponding header file?
[21:14:09] <sham1> For example you could make a separate static library for testing purposes and then link that static library with your actual executable
[21:14:16] <sham1> It is, but it's not fun
[21:15:04] <phryk> so since this program isn't supposed to have an API, I'd create a file like myprogram_testing.h and include that in the test program?
[21:16:20] <sham1> What I'd do is make a separate library like libmyprogram.a, which has all of the things you want to test, and when you're building your app, you link that library to both your actual application and to your test harness. Splitting a program into (internal) libraries like this is very common
[21:16:46] <NRK> .oO( `int main(void) { do_tests(); } #define main not_main #include "my_cfile.c"` )
[21:17:12] *** Quits: unlink2 (~unlink@p200300ebcf147a00a0c5a97c70c72521.dip0.t-ipconnect.de) (Remote host closed the connection)
[21:17:53] <fizzie> Along the lines of the last one but a little cleaner, an `#ifndef UNDER_TEST` wrapper around the program's main function is also a possibility.
[21:17:53] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 252 seconds)
[21:18:33] <fizzie> (And then obviously #define UNDER_TEST #include <program.c> in the test.
[21:18:50] <fizzie> Well, "program.c" rather, but anyway.
[21:19:26] <NRK> that's definitely better. instead of hacking into main() with #define
[21:19:39] <NRK> .oO( i think a weak attribute would also work )
[21:20:28] <nitrix> The application shouldn't be aware that it's being tested. Any form of branching at runtime or #ifdef TESTING during compilation I would reject the PR.
[21:21:14] <nitrix> The dependencies should be provided to the constructors and you simply instantiated them differently in your tests with mock replacements.
[21:22:01] <phryk> okay, i understand like half of what you people are saying. ^^
[21:22:14] <sham1> This is why I'd rather do the thing where I split the program into an executable (maybe a stub) and then a library that the executable stub calls
[21:22:16] <phryk> sham1's approach seems to be the cleanest, that about right?
[21:22:42] *** Joins: pucara (~i@host14.181-1-101.telecom.net.ar)
[21:22:46] <fizzie> If you're not fundamentally committed to the idea of the program being a single file, sure.
[21:23:45] <phryk> Not fundamentally, but I always appreciate low effort stuff. :P
[21:24:12] <sham1> I'd say that making testing and such work with only one file is more effort than just doing splitting
[21:24:21] <fizzie> You can literally have the "application" part be just `int main(int argc, char **argv) { return thing_main(argc, argv); }` with thing_main from the library part.
[21:24:40] <sham1> And with things like LTO you might not even notice that you're doing the split
[21:24:41] <phryk> Yeah, now I only have to figure out what .a files are ^-^
[21:24:43] <fizzie> And then ignore that file for the rest of your life since it never needs to change.
[21:25:08] <fizzie> An .a file is just a bunch of .o files. ;)
[21:25:39] *** Joins: rgrinberg (~textual@2806:101e:7:7728:18a:215f:c191:4d5d)
[21:25:41] <nitrix> Depending on the type of application, sometimes behavior tests are nicer. You can invoke the binary with different flags, compare its outputs against an expected resultset, build up a suite that way.
[21:26:15] *** Quits: SymbioticFemale (~Symbiotic@user/SymbioticFemale) (Ping timeout: 240 seconds)
[21:27:06] <nitrix> Something like image processing, it's probably much nicer to just have a folder full of test images "before" and "after", with a script that runs the application for all of them, etc.
[21:27:41] <sham1> Every application and library can be tested. Some just are harder to test than others
[21:28:26] <sham1> User-facing software comes to mind as something which is very difficult in many ways to test
[21:28:39] <sham1> At least in a way that is reproducible
[21:29:10] *** Joins: SymbioticFemale (~Symbiotic@user/SymbioticFemale)
[21:29:12] *** Joins: magla (~gelignite@d5360aa7.access.ecotel.net)
[21:29:42] *** Quits: joedoe47 (~weechat@c-98-254-188-143.hsd1.fl.comcast.net) (Ping timeout: 272 seconds)
[21:29:47] <nitrix> SQLite for example creates brand new databases, runs a bunch of queries then starts over, but they do it against code that's intentionally faulty (disk writes randomly failing, memory allocations randomly failing, etc).
[21:30:00] <nitrix> Well, it's deterministic, but yeah.
[21:31:02] <nitrix> phryk, Inspiration: https://www.sqlite.org/testing.html
[21:31:03] <candide> Title of nitrix's link: How SQLite Is Tested
[21:31:14] <fizzie> sham1: That's why you get a bunch of underpaid, overworked and generally badly treated QA people to stand in for users. Cf. the video game industry.
[21:31:48] <sham1> Yeah. Sadly QA isn't reproducible
[21:32:01] <phryk> This is mostly a learning project so I can learn ~proper C. The goal is contributing to icecast.
[21:32:35] <NRK> i read that as icecat for a sec
[21:32:42] <phryk> nya~
[21:32:47] *** Quits: bilbo (~bilbo@host-37-191-190-173.lynet.no) (Quit: Client closed)
[21:32:58] <sham1> Is icecat maintained anymore?
[21:33:03] <NRK> icecat logo is really nice
[21:33:09] <NRK> sham1: i think so?
[21:33:23] <NRK> im on icecat 91 right now
[21:33:30] *** Quits: dogbert2 (~Bill@ip68-227-25-62.lv.lv.cox.net) (Ping timeout: 272 seconds)
[21:33:34] <sham1> Hm, last commit 2 weeks ago
[21:33:36] <sham1> Nice
[21:33:59] <NRK> i think they just release patchset which can be applied on top of firefox. not full source.
[21:35:24] *** Quits: gr33n7007h (~gr33n7007@user/gr33n7007h) (Ping timeout: 240 seconds)
[21:35:53] *** Joins: Maaaanu (~manuel@ip5b429007.dynamic.kabel-deutschland.de)
[21:36:39] *** Joins: gr33n7007h (~gr33n7007@user/gr33n7007h)
[21:37:24] *** Quits: pooryorick (~pooryoric@87-119-174-173.tll.elisa.ee) (Ping timeout: 240 seconds)
[21:38:22] *** Joins: pooryorick (~pooryoric@87-119-174-173.tll.elisa.ee)
[21:38:35] *** Quits: cvmn (~caveman@gateway/tor-sasl/caveman) (Ping timeout: 240 seconds)
[21:39:35] *** Quits: SymbioticFemale (~Symbiotic@user/SymbioticFemale) (Ping timeout: 240 seconds)
[21:39:59] *** Quits: cart_ (~cart@185.191.86.4) (Quit: Konversation terminated!)
[21:41:57] *** Quits: fe23 (~fe23@2409:8a34:46c:f80:21ec:b4d0:5029:a13c) (Quit: fe23)
[21:42:00] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Ping timeout: 256 seconds)
[21:42:31] *** Joins: SymbioticFemale (~Symbiotic@user/SymbioticFemale)
[21:46:44] *** Joins: mahmutov (~mahmutov@37.155.38.157)
[21:47:18] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[21:48:35] *** Quits: crashrep (~crashrep@user/crashrep) (Ping timeout: 240 seconds)
[21:50:27] *** Quits: ckdCreations (~ckdCreati@147.55.133.142) (Read error: Connection reset by peer)
[21:52:00] *** Joins: phrix (~phrix@185.76.176.45)
[21:52:36] *** Joins: tiotags (~tiotags@user/tiotags)
[21:54:12] *** Quits: the_lanetly_052_ (~the_lanet@185.30.89.14) (Ping timeout: 240 seconds)
[21:54:24] *** Joins: Livio (~livio@user/livio)
[21:54:56] <pragma-> hm, gdb in MI mode transmits only 7-bit string content. gdb is octal-encoding the backwards R thing. I have to manually decode it, sigh.
[21:55:27] *** Joins: ckdCreations (~ckdCreati@147.55.133.135)
[21:55:32] *** Joins: foxtrot (~foxtrot@user/foxtrot)
[21:56:47] <pragma-> hmm, i might be able to just do `set print sevenbit-strings off`
[21:56:51] <pragma-> yes, it works
[21:59:42] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[22:01:07] *** Joins: adip (~adip@dil253.neoplus.adsl.tpnet.pl)
[22:01:09] *** Joins: adip_ (~adip@dil253.neoplus.adsl.tpnet.pl)
[22:01:13] *** Quits: adip (~adip@dil253.neoplus.adsl.tpnet.pl) (Client Quit)
[22:01:53] *** Joins: adip (~adip@dil253.neoplus.adsl.tpnet.pl)
[22:02:18] *** Joins: WidTurnur (~WidTurnur@101.164.208.46.dyn.plus.net)
[22:02:47] *** Quits: WidTurnur (~WidTurnur@101.164.208.46.dyn.plus.net) (Client Quit)
[22:07:51] *** Quits: jmiehe (~Thunderbi@user/jmiehe) (Ping timeout: 250 seconds)
[22:09:37] *** Quits: arinov_ (~arinov@31.142.86.27) (Ping timeout: 272 seconds)
[22:09:59] *** Quits: rgrinberg (~textual@2806:101e:7:7728:18a:215f:c191:4d5d) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[22:11:47] *** Quits: noarb (~noarb@user/noarb) (Read error: Connection reset by peer)
[22:12:56] *** Quits: phrix (~phrix@185.76.176.45) (Quit: Leaving)
[22:12:56] *** Joins: pulse (~pulse@user/pulse)
[22:14:33] *** Joins: rgrinberg (~textual@2806:101e:7:7728:18a:215f:c191:4d5d)
[22:15:42] * esselfe decodes pragma- 
[22:18:50] *** Joins: X-Scale` (~ARM@135.232.28.37.rev.vodafone.pt)
[22:20:25] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:350b:c716:fa56:ddbc) (Quit: Quit)
[22:20:31] *** Quits: jx0 (~jx0@199.229.250.137) (Quit: poof!)
[22:20:36] *** Quits: X-Scale (~ARM@83.223.225.19) (Ping timeout: 240 seconds)
[22:20:37] *** X-Scale` is now known as X-Scale
[22:20:49] <masoudd> ,cc char *str = "ȯ Я"; puts(str);
[22:20:49] <candide> masoudd: Virtual machine is resetting, try again soon.
[22:20:57] * masoudd runs away
[22:22:31] *** Joins: Charadon (~Charadon@155.138.164.183)
[22:26:06] *** Joins: anon16_ (~anon16_@user/anon16)
[22:29:22] *** Quits: novns (~novns@user/novns) (Quit: ZNC - https://znc.in)
[22:29:45] *** Joins: novns (~novns@user/novns)
[22:30:28] *** Joins: crashrep (~crashrep@user/crashrep)
[22:31:20] *** Quits: clamiax (~clamiax@net-93-147-243-230.cust.vodafonedsl.it) (Remote host closed the connection)
[22:32:05] *** Joins: clamiax (~clamiax@net-93-147-243-230.cust.vodafonedsl.it)
[22:33:18] *** Quits: anon16_ (~anon16_@user/anon16) (Quit: Quit)
[22:33:44] *** Joins: noarb (~noarb@user/noarb)
[22:34:00] <Dean> what is the best place to read the c documentation? is there a website where all (well most) libraries and functions are listed? like the java documentation for example.
[22:34:07] *** Joins: the_lanetly_052_ (~the_lanet@185.30.89.14)
[22:34:46] <caze> Dean: There is the C standard, but you kind of already have to know C pretty well for it to be accessible.
[22:34:57] <sham1> As for other libraries, not really
[22:35:07] <sham1> There are so many out there
[22:35:20] <caze> Maybe if you're really good at reading, you could learn C from the standard.
[22:35:48] <caze> Dean: Did you ever figure out 1-17?
[22:35:52] <caze> ,kr1-17
[22:35:52] <candide> Chapter 1: A Tutorial Introduction; Exercise 1-17. Write a program to print all input lines that are longer than 80 characters.
[22:37:04] *** immibis_ is now known as immibis
[22:37:52] <ChoHag> lol @ "the C documentation".
[22:38:21] <fizzie> Assuming you've learned the *language* already, the standard is relatively approachable as a reference to the standard *library* part, and has the benefit of being authoritative on it.
[22:38:21] <NRK> Dean: i like this https://en.cppreference.com/w/c/language
[22:38:47] <NRK> for functions i just look up manpages /shruh
[22:39:02] <NRK> s/ruh/rug/
[22:39:31] *** Joins: MajorBiscuit (~MajorBisc@2a02:a461:129d:1:193d:75d8:745d:e91e)
[22:39:50] <goodfella> caze: i curious what so special about 1-17 ...
[22:40:05] *** Quits: the_lanetly_052_ (~the_lanet@185.30.89.14) (Ping timeout: 256 seconds)
[22:40:06] <goodfella> seems like a simple one
[22:40:10] <caze> goodfella: Most people come up with a subpar solution.
[22:40:39] <goodfella> and i also curious because i just doing that
[22:41:08] <caze> goodfella: Did you complete it yet?
[22:41:46] <goodfella> not yet but it doesn't seem anymore complicated then the previous one ... "make sure to pprint arbitrary lines with losing as little as possible data"
[22:42:11] <goodfella> something like that ... which is just put '\0' at MAXLINE-1
[22:42:29] <caze> goodfella: Well, give it a try.
[22:42:58] <goodfella> i do and ill tag you for review :-)
[22:43:04] <goodfella> s/tag/ping
[22:43:47] *** Quits: lisbeths (~user@c-73-83-140-133.hsd1.wa.comcast.net) (Remote host closed the connection)
[22:45:00] *** Parts: theseb (~theseb@47-220-214-54.cnrocmta03.res.dyn.suddenlink.net) (Leaving)
[22:45:03] *** Quits: Haxxa (~Haxxa@122-199-59-132.ip4.superloop.com) (Quit: Haxxa flies away.)
[22:45:31] *** Joins: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net)
[22:45:54] *** Joins: ioxzev1z (~ioxzev1z@user/ioxzev1z)
[22:47:42] *** Joins: Haxxa (~Haxxa@122-199-59-132.ip4.superloop.com)
[22:48:55] *** Quits: System_Error (~SystemErr@user/systemerror) (Ping timeout: 240 seconds)
[22:58:03] *** Joins: System_Error (~SystemErr@user/systemerror)
[23:04:02] *** Quits: masoudd (~masoudd@user/masoudd) (Ping timeout: 252 seconds)
[23:04:14] <caze> goodfella: Here is my solution if you get stuck https://ideone.com/UFAqo1
[23:04:20] *** Quits: dp1021 (~Srain@host86-136-133-7.range86-136.btcentralplus.com) (Remote host closed the connection)
[23:04:26] <caze> bbl
[23:04:48] *** Joins: suss` (~user@user/suss)
[23:05:17] <ChoHag> caze: Doesn't look like that clears the previous line out of the buffer.
[23:05:38] <ChoHag> Oh wait it only prints lines >= 80 so that won't matter.
[23:05:41] <ChoHag> Carry on.
[23:06:16] <ChoHag> Well 3 in your case but carry on regardless.
[23:06:21] *** Quits: suss (~user@user/suss) (Ping timeout: 250 seconds)
[23:06:23] <goodfella> im not going to see what ou posted .
[23:06:36] *** Quits: rgrinberg (~textual@2806:101e:7:7728:18a:215f:c191:4d5d) (Ping timeout: 245 seconds)
[23:06:44] <goodfella> ill try to do it on my own and if i make mistake i want to know about it
[23:08:19] *** Quits: tetravus (~tetravus@c-71-231-69-112.hsd1.wa.comcast.net) (Ping timeout: 250 seconds)
[23:08:30] *** Joins: X-Scale` (~ARM@31.22.144.44)
[23:10:31] *** Joins: tetravus (~tetravus@c-71-231-69-112.hsd1.wa.comcast.net)
[23:11:02] *** Quits: X-Scale (~ARM@135.232.28.37.rev.vodafone.pt) (Ping timeout: 272 seconds)
[23:11:13] *** X-Scale` is now known as X-Scale
[23:11:48] *** Quits: gr33n7007h (~gr33n7007@user/gr33n7007h) (Ping timeout: 240 seconds)
[23:12:29] *** Joins: goepsilongo_ (~goepsilon@cpe-74-73-86-74.nyc.res.rr.com)
[23:14:02] *** Joins: gr33n7007h (~gr33n7007@user/gr33n7007h)
[23:14:42] *** Joins: plastico (~plastico@neomutt/plastico)
[23:15:14] *** Quits: p0g0 (~p0g0@user/p0g0) (Read error: Connection reset by peer)
[23:15:17] *** Quits: goepsilongo (~goepsilon@2603-7000-ab00-62ed-9cab-8f8d-e5ab-3a17.res6.spectrum.com) (Ping timeout: 240 seconds)
[23:15:38] *** Joins: p0g0 (~p0g0@user/p0g0)
[23:16:15] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[23:16:47] *** Joins: anton_ (~anton@ptr-fiic7wgdk2o5jsph01e.18120a2.ip6.access.telenet.be)
[23:17:23] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 272 seconds)
[23:17:44] <anton_> hello
[23:17:57] *** gotem is now known as qorg11
[23:18:59] *** Lord_of_Life_ is now known as Lord_of_Life
[23:19:46] *** Quits: seninha (~chatzilla@user/seninha) (Ping timeout: 260 seconds)
[23:19:48] *** Quits: MajorBiscuit (~MajorBisc@2a02:a461:129d:1:193d:75d8:745d:e91e) (Ping timeout: 240 seconds)
[23:21:44] *** Quits: mahmutov (~mahmutov@37.155.38.157) (Ping timeout: 256 seconds)
[23:24:20] *** Quits: gry (~quassel@botters/gry) (Ping timeout: 272 seconds)
[23:28:47] *** Joins: gry (~quassel@botters/gry)
[23:38:17] *** Quits: iomari891 (~iomari891@105.112.138.38) (Ping timeout: 272 seconds)
[23:41:13] *** Joins: goepsilongo (~goepsilon@2603-7000-ab00-62ed-4d3a-5004-9503-0c7b.res6.spectrum.com)
[23:43:57] *** Quits: goepsilongo_ (~goepsilon@cpe-74-73-86-74.nyc.res.rr.com) (Ping timeout: 240 seconds)
[23:45:35] *** Joins: bolovanos_ (~bolovanos@user/bolovanos)
[23:46:54] *** Joins: wroathe (~wroathe@user/wroathe)
[23:47:30] *** Joins: Tangent-Man (~Tang3nt-M@138.199.21.36)
[23:49:40] *** Quits: bolovanos (~bolovanos@user/bolovanos) (Ping timeout: 272 seconds)
[23:53:00] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[23:54:50] *** Joins: arinov_ (~arinov@5.24.108.1)
[23:54:58] *** Quits: tiotags (~tiotags@user/tiotags) (Quit: Leaving)
