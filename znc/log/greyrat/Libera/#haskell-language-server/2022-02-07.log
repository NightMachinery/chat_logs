[00:02:02] <pepeiborra> Why is dinamically linked better? Because it will use the system linker to dynamically load external dependencies when loading packages for TH. 
[00:03:56] <pepeiborra> Why is using the system linker better than using the rts linker? Because the ghc binary uses the system linker for TH, so we *really* want to do the same thing to ensure the same outcome
[00:04:43] <maerwald> right
[00:04:59] <pepeiborra> Is this a good enough reason to get into the mess of distributing dynlinked artifacts? That's the harder question. I guess we'll find out soon 
[00:25:04] <wz1000> statically linking Haskell but dynamicly linking system libraries might be good enough for most linux platofrms.
[00:27:47] <wz1000> The GHC linker does have some bugs, I admit, but I'm a bit skeptical of blaming most of the bugs on it. From my testing most segfaults seem to arise from ABI mismatches, with both Haskell and system libraries
[00:34:36] <maerwald> well, we can just build and ship both variants... ghcup can easily offer both, one under the odd version name '1.6.2.0-static'
[00:36:17] <maerwald> or we implement the abi matching logic directly in the hls binaries and keep the static linked version
[00:37:43] <maerwald> but it might be worth to simply try a dynamic release once and see how it goes
[00:39:24] <maerwald> it might also reduce abi mismatches, because now they're built with the GHCs that match the platform
[00:39:33] <maerwald> instead of just alpine
[00:41:19] <wz1000> yes, that is true
[00:43:50] <wz1000> maerwald: instead of guessing the ghc binary directory, we can use `ghc -B$libdir` with the unwrapped GHC executable. Same for ghc-pkg
[00:45:05] <maerwald> what does that do?
[00:45:47] <maerwald> I mean... I already invoke the unwrapped binary
[00:45:53] <maerwald> but even that directory is not fixed
[00:46:35] <wz1000> it is the output of `cabal exec ghc -e System.Environment.getExecutablePath`
[00:46:58] <wz1000> the wrapped binary just passes the libdir to the unwrapped binary using `-B`
[00:47:29] <wz1000> so calling `ghc_unwrapped -B$libdir` is good enough as a replacement for the actual wrapped GHC binary
[00:48:04] <maerwald> so the wrapper script ought to invoke cabal as well?
[00:48:37] <maerwald> I guess hls-wrapper binary can just set an env var
[00:48:48] <maerwald> yeah, I'll do that
[00:53:35] <maerwald> and, doesn't that mean https://github.com/haskell/hie-bios/pull/282 could be merged with minor adjustments?
[00:54:06] <wz1000> yeah
[00:54:17] <maerwald> 1. we find the raw binary via cabal, 2. we find the GHC libdir via cabal, 3. we can write a ghc shim that acts like the real ghc script
[00:54:26] <maerwald> k
[01:00:12] <maerwald> I think jneira[m] is having nightmares about the additional support cost (bugs in the wrapper script, Makefile falling over, users running it as root...) :D
[01:03:46] <michaelpj[m]> I am pretty worried about the support costs
[01:04:02] <michaelpj[m]> also
[01:04:37] <maerwald> I think it's gonna be great
[01:04:57] <maerwald> I'm only slightly worried about mac :p
[01:05:13] <maerwald> because I don't have one... and I'm mainly guessing, testing on CI and asking strangers on the internet
[01:05:15] <wz1000> all the segfaults also have support costs
[01:10:38] <michaelpj[m]> our CI/release/distribution setup is already pretty complex, this adds a bunch more
[01:12:28] <maerwald> imo, you can remove all of the github release code
[01:12:44] <maerwald> and hls should be uploaded to downloads.haskell.org/~hls
[01:13:04] <maerwald> so only the gitlab instance would be involved for release artifacts
[01:13:15] <maerwald> but that's for another day
[01:35:57] *** Quits: fendor (~fendor@178.115.78.100.wireless.dyn.drei.com) (Remote host closed the connection)
[07:15:18] *** Quits: jade (jade@lfcode.ca) (Quit: meow)
[07:17:06] *** Joins: jade (jade@lfcode.ca)
[07:25:32] <sooch_> So I was reading through the Meta Issue regarding the new Diagnostics from GHC (https://github.com/haskell/haskell-language-server/issues/2014). As I'm working on a new feature that would greatly benefit from the new Diagnostics. I took a crack at building HLS from GHC HEAD, (most work has been patching dependencies so far). My question: is there any movement to stay on top of GHC HEAD to shorten the time to 
[07:25:32] <sooch_> support new GHC versions? I'm not totally familiar with how GHC handles releases and maybe it's not possible, but figured I'd ask.
[08:16:04] *** Quits: juhp (~juhp@128.106.188.82) (Quit: juhp)
[08:44:48] *** Joins: juhp (~juhp@128.106.188.82)
[09:08:30] *** Parts: jneira[m] (~jneiramat@2001:470:69fc:105::d729) ()
[09:18:47] *** Joins: libertyprime (~libertypr@118-92-72-229.dsl.dyn.ihug.co.nz)
[11:16:30] <wz1000> sooch_: GHC 9.2 already has much of the new diagnostic stuff
[11:51:50] *** Joins: fendor (~fendor@178.115.64.55.wireless.dyn.drei.com)
[12:48:41] <mpickering> sooch_: Do you know about head.hackage?
[12:48:55] <mpickering> you are going to have a bit of a tricky time patching HLS itself to work with HEAD I think
[12:49:00] <mpickering> but I can advise if you're feeling brave
[17:34:03] *** Joins: jneira[m] (~jneiramat@2001:470:69fc:105::d729)
[17:44:05] *** Quits: libertyprime (~libertypr@118-92-72-229.dsl.dyn.ihug.co.nz) (Quit: leaving)
[17:45:03] *** Joins: libertyprime (~libertypr@118-92-72-229.dsl.dyn.ihug.co.nz)
[17:46:36] <sooch_> Hmm I had no idea about head.hackage i generally stay a few GHC releases behind :)
[18:20:52] *** Quits: libertyprime (~libertypr@118-92-72-229.dsl.dyn.ihug.co.nz) (Quit: leaving)
[19:16:56] *** Joins: jcwasmx86[m] (~jcwasmx86@2001:470:69fc:105::f26a)
[19:23:24] *** Parts: jneira[m] (~jneiramat@2001:470:69fc:105::d729) ()
[19:45:17] *** Quits: shapr (~user@pool-173-73-44-186.washdc.fios.verizon.net) (Read error: Connection reset by peer)
[19:45:41] *** Joins: shapr (~user@pool-173-73-44-186.washdc.fios.verizon.net)
[20:41:52] *** Quits: fendor (~fendor@178.115.64.55.wireless.dyn.drei.com) (Remote host closed the connection)
[20:50:17] *** Joins: jneira[m] (~jneiramat@2001:470:69fc:105::d729)
[23:07:52] *** Quits: hpd_ (~hpdhpdeif@2001:470:69fc:105::230) (*.net *.split)
[23:07:52] *** Quits: ManofLetters[m] (~manoflett@2001:470:69fc:105::3be) (*.net *.split)
[23:07:52] *** Quits: dxld[m] (~dxldit-sy@2001:470:69fc:105::978) (*.net *.split)
[23:07:52] *** Quits: LambdaDuck (~anka@ksit.fixme.fi) (*.net *.split)
[23:12:25] *** Joins: hpd_ (~hpdhpdeif@2001:470:69fc:105::230)
[23:12:25] *** Joins: ManofLetters[m] (~manoflett@2001:470:69fc:105::3be)
[23:12:25] *** Joins: dxld[m] (~dxldit-sy@2001:470:69fc:105::978)
[23:12:25] *** Joins: LambdaDuck (~anka@ksit.fixme.fi)
[23:16:12] *** Quits: Heffalump[m] (~hsenagmat@2001:470:69fc:105::e11) (Ping timeout: 245 seconds)
[23:16:12] *** Quits: teto[m] (~keiichima@2001:470:69fc:105::3a35) (Ping timeout: 245 seconds)
[23:16:12] *** Quits: anton-latukha[m] (~anton-lat@2001:470:69fc:105::fe99) (Ping timeout: 245 seconds)
[23:16:13] *** Quits: juhp[m] (~juhpmatri@2001:470:69fc:105::6e9) (Ping timeout: 250 seconds)
[23:16:13] *** Quits: expipiplus1 (~expipiplu@2001:470:69fc:105::d713) (Ping timeout: 240 seconds)
[23:16:13] *** Quits: cdsmith (~cdsmithma@2001:470:69fc:105::284) (Ping timeout: 240 seconds)
[23:16:13] *** Quits: Guillaum[m] (~guiboumat@2001:470:69fc:105::1:72ac) (Ping timeout: 240 seconds)
[23:16:14] *** Quits: sm (~sm@plaintextaccounting/sm) (Ping timeout: 240 seconds)
[23:16:14] *** Quits: mahene[m] (~mahenemat@2001:470:69fc:105::1:6a93) (Ping timeout: 240 seconds)
[23:16:26] *** Quits: thomasjm[m] (~thomasjmm@2001:470:69fc:105::c6d9) (Ping timeout: 250 seconds)
[23:16:26] *** Quits: fendor[m] (~fendormat@2001:470:69fc:105::fcbd) (Ping timeout: 250 seconds)
[23:16:26] *** Quits: michaelpj[m] (~michaelpj@2001:470:69fc:105::86e) (Ping timeout: 250 seconds)
[23:16:26] *** Quits: ttylec[m] (~ttylecmat@2001:470:69fc:105::1:554c) (Ping timeout: 250 seconds)
[23:16:32] *** Quits: eddiemundo (~eddiemund@2001:470:69fc:105::a80) (Ping timeout: 240 seconds)
[23:16:36] *** Quits: cstml[m] (~cstmlmatr@2001:470:69fc:105::1:5c07) (Ping timeout: 256 seconds)
[23:16:36] *** Quits: maralorn (~maralorn@2001:470:69fc:105::251) (Ping timeout: 256 seconds)
[23:16:38] *** Quits: PotatoHatsue (~berberman@2001:470:69fc:105::b488) (Ping timeout: 252 seconds)
[23:16:42] *** Quits: hpd_ (~hpdhpdeif@2001:470:69fc:105::230) (Ping timeout: 260 seconds)
[23:16:42] *** Quits: ManofLetters[m] (~manoflett@2001:470:69fc:105::3be) (Ping timeout: 260 seconds)
[23:16:42] *** Quits: dxld[m] (~dxldit-sy@2001:470:69fc:105::978) (Ping timeout: 260 seconds)
[23:17:03] *** Quits: jcwasmx86[m] (~jcwasmx86@2001:470:69fc:105::f26a) (Ping timeout: 268 seconds)
[23:17:03] *** Quits: jneira[m] (~jneiramat@2001:470:69fc:105::d729) (Ping timeout: 268 seconds)
[23:35:17] *** Quits: juhp (~juhp@128.106.188.82) (Ping timeout: 256 seconds)
[23:37:59] *** Joins: juhp (~juhp@128.106.188.82)
[23:40:49] *** Joins: teto[m] (~keiichima@2001:470:69fc:105::3a35)
[23:53:53] *** Joins: eddiemundo (~eddiemund@2001:470:69fc:105::a80)
[23:53:54] *** Joins: mahene[m] (~mahenemat@2001:470:69fc:105::1:6a93)
[23:53:58] *** Joins: jneira[m] (~jneiramat@2001:470:69fc:105::d729)
[23:54:01] *** Joins: anton-latukha[m] (~anton-lat@2001:470:69fc:105::fe99)
[23:54:01] *** Joins: thomasjm[m] (~thomasjmm@2001:470:69fc:105::c6d9)
[23:54:02] *** Joins: michaelpj[m] (~michaelpj@2001:470:69fc:105::86e)
[23:54:07] *** Joins: ttylec[m] (~ttylecmat@2001:470:69fc:105::1:554c)
[23:54:07] *** Joins: PotatoHatsue (~berberman@2001:470:69fc:105::b488)
[23:54:08] *** Joins: jcwasmx86[m] (~jcwasmx86@2001:470:69fc:105::f26a)
[23:54:16] *** Joins: cdsmith (~cdsmithma@2001:470:69fc:105::284)
[23:55:01] *** Joins: Heffalump[m] (~hsenagmat@2001:470:69fc:105::e11)
