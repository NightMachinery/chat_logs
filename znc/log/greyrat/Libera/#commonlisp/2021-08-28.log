[00:03:21] *** Quits: attila_lendvai (~alendvai@catv-86-101-74-70.catv.broadband.hu) (Quit: Leaving)
[00:09:10] *** Quits: rdrg109 (~rdrg109@51.195.232.80) (Ping timeout: 240 seconds)
[00:09:50] *** Parts: joe_mad (~user@you.are.just.verymad.net) (ERC (IRC client for Emacs 27.1))
[00:10:07] *** Joins: rdrg109 (~rdrg109@51.195.232.80)
[00:11:40] *** Quits: elf_fortrez (~elf_fortr@adsl-72-50-7-8.prtc.net) (Quit: Client closed)
[00:13:15] *** Joins: notzmv (~zmv@user/notzmv)
[00:17:38] *** Joins: attila_lendvai (~alendvai@catv-86-101-74-70.catv.broadband.hu)
[00:17:42] *** Quits: attila_lendvai (~alendvai@catv-86-101-74-70.catv.broadband.hu) (Remote host closed the connection)
[00:18:06] *** Joins: attila_lendvai (~alendvai@catv-86-101-74-70.catv.broadband.hu)
[00:19:02] *** Quits: cage (~cage@dynamic-adsl-78-15-36-212.clienti.tiscali.it) (Quit: rcirc on GNU Emacs 27.1)
[00:23:50] *** Joins: recordgroovy (~recordgro@c-67-185-152-122.hsd1.wa.comcast.net)
[00:37:35] *** Joins: yitzi (~yitzi@173-27-106-188.client.mchsi.com)
[00:44:37] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[01:06:49] *** Quits: shka (~herr@109.231.62.239) (Ping timeout: 248 seconds)
[01:20:58] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[01:28:38] *** Joins: nature_ (~nature@mail.blazebone.com)
[01:30:17] *** Joins: Steeve (~steve@user/steeve)
[01:31:08] *** Quits: lisp123_ (~lisp123@5.30.23.247) (Quit: Leaving...)
[01:37:00] *** Quits: yitzi (~yitzi@173-27-106-188.client.mchsi.com) (Quit: Leaving)
[01:40:13] *** Joins: retropikzel (~retropikz@2001:999:202:2575:3591:3733:f7c:ed63)
[01:45:23] *** Joins: elf_fortrez (~elf_fortr@adsl-72-50-4-145.prtc.net)
[01:46:27] *** Quits: retropikzel (~retropikz@2001:999:202:2575:3591:3733:f7c:ed63) (Quit: Leaving)
[01:46:57] *** Quits: psycomic (~psycomic@2a01:e0a:18:d0a0:d671:58e9:4360:8152) (Ping timeout: 250 seconds)
[01:55:36] *** Quits: okflo (~okflo@188-23-113-20.adsl.highway.telekom.at) (Quit: WeeChat 3.2)
[02:00:46] <kagevf> lisp123_: it's at the top of p. 137
[02:04:30] <lotuseater> I see it. :)
[02:09:29] *** Quits: pve (~pve@178-55-202-203.bb.dnainternet.fi) (Quit: leaving)
[02:14:07] *** Quits: Krystof (~user@81.174.155.115) (Ping timeout: 252 seconds)
[02:16:52] *** Joins: akoana (~ah@user/akoana)
[02:25:55] *** Quits: micro (~micro@user/micro) (Ping timeout: 268 seconds)
[02:26:09] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Remote host closed the connection)
[02:26:41] *** Joins: micro (~micro@user/micro)
[02:28:52] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[02:46:20] *** Quits: nature_ (~nature@mail.blazebone.com) (Remote host closed the connection)
[02:53:04] *** Quits: frgo_ (~frgo@p200300deef0cee0000a8654cc851f71c.dip0.t-ipconnect.de) (Remote host closed the connection)
[02:53:31] *** Joins: frgo (~frgo@p200300deef0cee0000a8654cc851f71c.dip0.t-ipconnect.de)
[02:56:57] <recordgroovy> It looks like cl-unix-sockets doesn't support sending file descriptors using ancillary data. Is there a unix socket library that does?
[02:59:24] <pl> iolib might have had something?
[03:00:35] <recordgroovy> Yep, it looks like iolib has that
[03:00:44] <recordgroovy> sockets:receive-file-descriptor
[03:07:24] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Remote host closed the connection)
[03:07:38] *** Joins: cosimone (~user@2001:b07:ae5:db26:a7aa:8027:6b4e:2fb3)
[03:15:47] *** Quits: doyougnu (~user@c-73-25-202-122.hsd1.or.comcast.net) (Ping timeout: 240 seconds)
[03:17:29] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Ping timeout: 248 seconds)
[03:17:52] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[03:28:32] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[03:33:40] *** Quits: cosimone (~user@2001:b07:ae5:db26:a7aa:8027:6b4e:2fb3) (Ping timeout: 240 seconds)
[03:38:17] *** Quits: random-nick (~random-ni@87.116.182.72) (Ping timeout: 248 seconds)
[03:48:31] *** Quits: Steeve (~steve@user/steeve) (Quit: end)
[03:52:22] *** Quits: Alfr (~Alfr@user/alfr) (Quit: Leaving)
[04:13:41] *** Joins: khrbt (~znc@user/khrbt)
[04:34:05] <dieggsy> So i'm looking at some code that loads a BUNCH of files and runs some lisp in them (in runs eval, which may be relevant?). and i tried to parallelize it with threads. in the parallel version, the functions it tries to eval don't pass fboundp, where they do in the sequential version
[04:34:22] <dieggsy> does that.... make any sense at all, or is this code just an absolute mess
[04:36:54] <hayley> Yes, don't parallelize unless you know what dependencies there are.
[04:37:04] <hayley> Yes to the latter, rather.
[04:38:27] <dieggsy> yeah, i have to investigate more deeply and i'm not at all experienced with threads, it just struck me as a bit odd
[04:48:09] *** Quits: attila_lendvai (~alendvai@catv-86-101-74-70.catv.broadband.hu) (Ping timeout: 248 seconds)
[04:56:03] <dieggsy> *no-defun-allowed*: wait, do you mean file deypendencies?
[04:57:02] <dieggsy> i know for a fact everything is defined and bound before loading any of the files
[04:57:23] <dieggsy> so what could cause the condition where the individual threads see the symbol as unbound?
[04:57:44] <dieggsy> the files themselves don't define any new lisp, it's just 2-3 forms each (some-function arg1 arg2 ..)
[05:08:24] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[05:08:28] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 252 seconds)
[05:09:38] *** Lord_of_Life_ is now known as Lord_of_Life
[05:11:52] *** Quits: dlowe (~dlowe@user/dlowe) (Remote host closed the connection)
[05:12:52] <pjb> dieggsy: uiop was a parallelising asdf proof of concept IIRC.
[05:13:08] <dieggsy> pjb: wait what
[05:14:24] <pjb> poiu I mean. https://github.com/fare/poiu
[05:14:47] <pjb> With idiotic names, it's harder to remember them correctlyâ€¦
[05:15:24] <dieggsy> pjb: oh. this isn't a build
[05:15:55] <dieggsy> we're using read to load in a bunch of forms, checking if the car is fboundp, and eval-ing them
[05:16:05] <dieggsy> i'm not sure exactly why this is being done, but that's the way it is lol
[05:16:23] <pjb> dieggsy: doesn't matter: you need to define the dependencies between the file.
[05:16:43] <dieggsy> pjb: i don't follo
[05:16:45] <pjb> You can use asdf:load-source-op; I guess there's something similar in poiu?
[05:17:27] <pjb> If you use your own "load" function, I guess you an define your own asdf operation.
[05:19:02] <dieggsy> pjb: i'm lost. why would a lisp form you read have to do with asdf ?
[05:19:25] <dieggsy> read at runtime
[05:21:26] <dieggsy> as in, the file has (princ 4), we read that into '(princ 4) as form, check (fboundp (first form)). i'm not arguing, i'm just trying to explain myself better because i'm lost lol
[05:22:01] <dieggsy> in this case it's not princ though, it's some-function that's already defined in the environment though
[05:22:23] <pjb> First, you said "load a bunch of file".  We assume it's with CL:LOAD.
[05:23:11] <dieggsy> pjb: correct, that's imprecise language on my part, my bad.
[05:23:32] <dieggsy> then i still used the word load the second time around, which didn't help. again my bad lol
[05:24:11] <pjb> Now, if you're sure that all the functions are defined before you start reading the files, ie. you don't have file containing  any function call such as: (define-a-new-function 'foo '(x) '(+ x 2))  with another file containing (foo 40)  then ok, there may be no dependencies between your files.
[05:24:33] <dieggsy> i'm sure
[05:24:45] <pjb> But then, how do you explain it works in serie, but not in parallel?
[05:25:07] <dieggsy> pjb: and it's not cl:load, it's cl:read and cl:eval
[05:25:09] <pjb> If it didn't work at all, we could consider it's a problem of *package* not set correctely.
[05:25:27] <pjb> dieggsy:  basically, (defun load (s) (loop (eval (read))))
[05:25:58] <dieggsy> eh, more or less
[05:26:27] <pjb> So if you define your own load function, and you have files with dependencies, then you can put those depedencies in an asd system, and define a my-load-op asdf operation, and use asdf to load them.
[05:26:38] <pjb> and poiu to load them in parallel.
[05:26:41] <dieggsy> what?
[05:27:12] <dieggsy> but that doesn't seem to explain why it works in series but not parallel heh
[05:27:25] <pjb> Exactly.
[05:27:48] <dieggsy> exactly.
[05:27:49] <pjb> So providing your code and files, would be the next step to get help debugging it, but now I'm going to bed.
[05:27:51] <dieggsy> it's a mess, i won't fill the channel with more noise before trying to look into it further
[05:28:13] <dieggsy> pjb: good night, and thanks for the info always
[05:29:32] <pjb> You may have it on git?
[05:29:47] *** Quits: makomo (~makomo@user/makomo) (Ping timeout: 240 seconds)
[05:30:23] <dieggsy> pjb: nah, it's work code that someone else wrote. i can't share it and even if i could oh boy is it just a bunch of spaghetti lol
[05:30:30] <pjb> well, check *package* is set correctly, as well as (readtable-case *readtable*) and check you really defined the functions.
[05:31:00] <pjb> You may try by qualifying the symbols in the files too.
[05:32:22] <pjb> If you generate them, a way to do it easily is to bind *package* when you write the file to a new empty package (let ((*package* (make-package (gensym) :use '())) (*print-readable* t)) (write-file "foo.data"))
[05:33:08] <dieggsy> i'm pretty sure package is set correctly
[05:33:32] <dieggsy> hmmmm
[05:34:08] <dieggsy> would read have any reason not to read into the same package lol
[05:34:22] <dieggsy> anyway, thanks for the extra info
[05:45:15] <dieggsy> huh, maybe package isn't set correctly.
[05:45:26] <dieggsy> but only in the parallel version
[05:50:16] <dieggsy> ah, yeah (bt:make-thread (lambda () (print *package*))) -> CL-USER.
[05:50:31] <dieggsy> *package*, i mean. matrix is swallowing my asterisks
[05:53:25] <mfiano> It isn't. Formatting is not stripped away in a proper IRC client.
[05:53:26] <moon-child> you did have * on your package
[05:53:30] <moon-child> at least in irc
[05:53:57] <moon-child> mfiano: the irc server, on the other hand--
[05:55:45] <dieggsy> oh, good. thanks
[05:56:34] * moon-child note the conspicuous +c mode on #commonlisp
[05:57:24] *** Joins: ln43 (~ln43@user/ln43)
[05:58:00] <White_Flame> dynamic bindings could be another thing that's lost when you start threading stuff
[06:02:27] <dieggsy> White_Flame: incredible, i did not know that lol
[06:03:12] <dieggsy> that makes this entire effort pretty futile. i'd have to reorganize the CRAP out of this code
[06:08:22] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[06:12:09] *** Parts: contrapunctus (a75f5b1571@2a00:c70:1:178:170:40:189:1) ()
[06:21:20] *** Joins: tophullyte (tophullyte@gateway/vpn/protonvpn/tophullyte)
[06:34:49] *** Quits: ln43 (~ln43@user/ln43) (Ping timeout: 248 seconds)
[06:34:49] *** Quits: prxq (~quassel@x4db595bb.dyn.telefonica.de) (Ping timeout: 252 seconds)
[06:35:22] *** Joins: prxq (~quassel@x4db93059.dyn.telefonica.de)
[06:46:43] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[06:47:52] *** Quits: elf_fortrez (~elf_fortr@adsl-72-50-4-145.prtc.net) (Ping timeout: 246 seconds)
[06:53:17] *** Joins: john__ (~john@dynamic-077-004-088-101.77.4.pool.telefonica.de)
[06:54:22] *** Joins: esb (~esb@2804:14c:1ad:8b70::1000)
[06:55:43] *** Quits: gaqwas (~john@dynamic-095-118-037-114.95.118.pool.telefonica.de) (Ping timeout: 252 seconds)
[07:09:54] *** Joins: Oladon (~olad@98.43.81.226)
[07:24:57] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 250 seconds)
[07:31:30] <beach> Good morning everyone!
[07:32:28] *** Joins: wilfred (uid159@id-159.highgate.irccloud.com)
[07:33:40] *** Quits: prxq (~quassel@x4db93059.dyn.telefonica.de) (Ping timeout: 252 seconds)
[07:34:01] *** Joins: prxq (~quassel@x4dbe71a0.dyn.telefonica.de)
[07:37:05] *** Quits: taiju (~taiju@M014013236064.v4.enabler.ne.jp) (Ping timeout: 250 seconds)
[07:59:37] *** Quits: semz (~none@user/semz) (Ping timeout: 250 seconds)
[08:07:06] *** Quits: tophullyte (tophullyte@gateway/vpn/protonvpn/tophullyte) (Quit: Leaving)
[08:11:23] *** Joins: asarch (~asarch@2806:10ae:7:15d4:21db:8911:d8f3:334a)
[08:11:52] *** Quits: asarch (~asarch@2806:10ae:7:15d4:21db:8911:d8f3:334a) (Client Quit)
[08:12:42] *** Joins: semz (~none@user/semz)
[08:26:41] *** Joins: contrapunctus (a75f5b1571@2a00:c70:1:178:170:40:189:1)
[08:33:51] *** Joins: taiju (~taiju@112.208.197.113.dy.bbexcite.jp)
[09:00:09] *** Quits: Bike (~Glossina@71.69.170.70) (Quit: Lost terminal)
[09:01:58] *** Joins: rain3 (~rain3___@79.115.250.43)
[09:17:37] *** Quits: khrbt (~znc@user/khrbt) (Ping timeout: 250 seconds)
[09:21:56] *** Joins: khrbt (~znc@user/khrbt)
[10:40:42] *** Quits: taiju (~taiju@112.208.197.113.dy.bbexcite.jp) (Ping timeout: 250 seconds)
[10:47:12] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[11:04:30] *** Joins: shka (~herr@109.231.62.239)
[11:21:47] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Ping timeout: 240 seconds)
[11:22:15] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[11:35:07] *** Joins: pve (~pve@178-55-34-52.bb.dnainternet.fi)
[11:36:09] *** Quits: akoana (~ah@user/akoana) (Quit: leaving)
[11:37:09] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Ping timeout: 250 seconds)
[11:38:10] *** Joins: amb007 (~a_bakic@123.14.23.93.rev.sfr.net)
[11:40:26] *** Quits: amb007 (~a_bakic@123.14.23.93.rev.sfr.net) (Read error: Connection reset by peer)
[11:40:47] *** Joins: amb007 (~a_bakic@123.14.23.93.rev.sfr.net)
[11:40:48] *** Quits: amb007 (~a_bakic@123.14.23.93.rev.sfr.net) (Read error: Connection reset by peer)
[11:41:48] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[11:46:15] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Ping timeout: 250 seconds)
[11:46:35] *** Joins: amb007 (~a_bakic@123.14.23.93.rev.sfr.net)
[11:47:19] *** Joins: taiju (~taiju@i219-165-213-61.s02.a018.ap.plala.or.jp)
[11:51:53] *** Quits: taiju (~taiju@i219-165-213-61.s02.a018.ap.plala.or.jp) (Ping timeout: 250 seconds)
[12:02:04] *** Joins: lisp123 (~lisp123@5.30.23.247)
[12:10:34] *** Quits: lisp123 (~lisp123@5.30.23.247) (Quit: Leaving...)
[12:12:06] *** Quits: wilfred (uid159@id-159.highgate.irccloud.com) (Quit: Connection closed for inactivity)
[12:13:10] *** Joins: makomo (~makomo@user/makomo)
[12:19:00] *** john__ is now known as gaqwas
[12:30:43] *** Joins: mjoerg (~user@user/mjoerg)
[12:34:25] *** Quits: mjoerg (~user@user/mjoerg) (Remote host closed the connection)
[12:35:13] *** Joins: hendursa1 (~weechat@user/hendursaga)
[12:38:27] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 276 seconds)
[12:38:29] *** Quits: amb007 (~a_bakic@123.14.23.93.rev.sfr.net) (Read error: Connection reset by peer)
[12:38:55] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[12:46:24] <beach> I am looking at Baker's paper "Metacircular Semantics for Common Lisp Special Forms", and in his emulation of CATCH/THROW using BLOCK/RETURN-FROM, he uses PROGV and SYMBOL-VALUE.  I can't see any difference between that and just binding *CATCHERS* using LET.  Can anyone else?
[12:48:28] <beach> Page 5: https://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.46.9657&rep=rep1&type=pdf
[12:50:26] <beach> HTML version here: https://plover.com/~mjd/misc/hbaker-archive/MetaCircular.html
[12:54:42] *** Joins: asarch (~asarch@2806:10ae:7:15d4:21db:8911:d8f3:334a)
[12:58:00] <rain3> https://readevalprint.tumblr.com/post/145348323128/progv
[13:00:53] *** Joins: cosimone (~user@2001:b07:ae5:db26:a7aa:8027:6b4e:2fb3)
[13:02:17] <beach> So my question is: Isn't (progv '(*var*) (list (cons <exp> (symbol-value '*var*))) ...) the same as (let ((*var* (cons <exp> *var*))) ...) ?
[13:03:50] <rain3> they are not the same, no
[13:05:33] <rain3> I mean in general. For catch/throw, I don't know if it matters
[13:07:14] <beach> They look identical to me.  In every possible situation.
[13:08:53] <rain3> you mean in every situation in general? or in every possible situation for catch/throw
[13:09:03] <beach> In general.
[13:09:15] <rain3> the article above, shows how they differ
[13:10:13] *** Joins: taiju (~taiju@M014013236064.v4.enabler.ne.jp)
[13:10:17] <beach> I know how PROGV and LET differ.  But in this case, there is only one special variable and its name is known at compile time.  That is the case I am interested in.
[13:10:59] <rain3> ok
[13:11:05] <moon-child> rain3: the question is, comparing the two forms beach showed, given any value for ... and <exp>, but with some fixed *var*
[13:11:17] <beach> Exactly.
[13:11:31] <rain3> got it
[13:11:51] *** Joins: attila_lendvai (~alendvai@catv-86-101-74-70.catv.broadband.hu)
[13:12:46] <rain3> I was in the middle of something, so I missed that detail, thanks
[13:16:38] <beach> Also, why does Baker do a (MULTIPLE-VALUE-LIST ,EXPRESSION) at the end of CATCH?
[13:18:12] <beach> This makes no sense to me.
[13:24:49] <beach> Oh and his CATCH allow for a single expression, whereas Common Lisp CATCH can take an arbitrary number of expressions.
[13:30:20] <pjb> dieggsy: (bt:make-thread (function your-thread-function) :initial-bindings (acons '*package* (find-package "THE-PACKAGE-YOU-WANT-TO-READ-IN") bt:*default-special-bindings*)) ; or use LET to bind *package* in your-thread-function.
[13:31:04] <pjb> beach: progv let you compute the name of the variable at run-time.  Now if he uses a literal variable name, indeed, no difference.
[13:32:11] <beach> pjb: Thanks for confirming that I am not going mad (yet).
[13:33:03] <pjb> For the multiple-value-list, I guess it's a copy/paste error from the previous code.
[13:33:30] *** Joins: psycomic (~psycomic@2a01:e0a:18:d0a0:2fba:9963:fd86:4722)
[13:34:02] <beach> AH!  That makes sense.
[13:34:58] <pjb> That said, unless you're doing code golfing, even a minimal implementation may choose to avoid too much folding onto a single operator.  Unless of course you consider the use for setjmp/longjmp to be the single eventual operator for all the non-local exits ;-)
[13:36:27] <beach> My plan is to clean up this code, and not use a special variable, but my list of dynamic-environment entries.  And my plan is also to do better error checking and reporting if there is no valid catch tag.
[13:37:37] <pjb> Also it depends on what tool you have to perform optimization. If you have a good IR optimizer, it may not matter how you transform the code at the sexp-level, it'll be transformed and optimized out the same in the IR level. But if you don't have it, it may be preferable to avoid folding, to be able to optimize each operator as much as possible.
[13:37:45] <pjb> It can still be a great inspiration indeed.
[13:38:54] <beach> Sure, but I will say the same thing as I did yesterday in #sicl.  CATCH and THROW are not used very often, and when they are, they are costly (at least THROW is) anyway, so I don't think they need to be optimized.
[13:41:23] *** Quits: shka (~herr@109.231.62.239) (Quit: Konversation terminated!)
[13:42:51] <pjb> Of course.  I was thinking more about let/let*.
[13:45:15] <beach> Oh, OK.
[13:52:38] *** Quits: asarch (~asarch@2806:10ae:7:15d4:21db:8911:d8f3:334a) (Quit: Leaving)
[13:59:16] *** Joins: cage (~cage@dynamic-adsl-78-15-36-212.clienti.tiscali.it)
[14:16:44] *** Joins: okflo (~okflo@188-23-113-20.adsl.highway.telekom.at)
[14:18:12] *** Quits: okflo (~okflo@188-23-113-20.adsl.highway.telekom.at) (Client Quit)
[14:20:49] *** Quits: gaqwas (~john@dynamic-077-004-088-101.77.4.pool.telefonica.de) (Remote host closed the connection)
[14:21:11] *** Joins: okflo (~okflo@188-23-113-20.adsl.highway.telekom.at)
[14:27:31] *** Joins: gaqwas (~john@dynamic-077-004-088-101.77.4.pool.telefonica.de)
[14:33:27] *** Quits: esb (~esb@2804:14c:1ad:8b70::1000) (Ping timeout: 240 seconds)
[14:36:34] *** Joins: cosimone` (~user@93-44-186-196.ip98.fastwebnet.it)
[14:38:01] *** Quits: kakuhen (~kakuhen@user/kakuhen) (Quit: Leaving...)
[14:38:10] *** Quits: cosimone (~user@2001:b07:ae5:db26:a7aa:8027:6b4e:2fb3) (Ping timeout: 250 seconds)
[14:41:28] *** Joins: random-nick (~random-ni@87.116.182.72)
[14:52:05] *** Quits: frgo (~frgo@p200300deef0cee0000a8654cc851f71c.dip0.t-ipconnect.de) (Remote host closed the connection)
[14:52:32] *** Joins: frgo (~frgo@p200300deef0cee0079bf631799723ede.dip0.t-ipconnect.de)
[15:10:44] *** Quits: gaqwas (~john@dynamic-077-004-088-101.77.4.pool.telefonica.de) (Remote host closed the connection)
[15:14:35] *** Joins: pranavats (3fba1d1b34@jabberfr.org)
[15:21:43] *** Quits: scymtym (~user@ip-88-153-154-183.hsi04.unitymediagroup.de) (Ping timeout: 252 seconds)
[15:28:21] *** Joins: gaqwas (~john@dynamic-077-004-088-101.77.4.pool.telefonica.de)
[15:32:39] *** Joins: john__ (~john@dynamic-077-004-088-101.77.4.pool.telefonica.de)
[15:33:50] *** Quits: john__ (~john@dynamic-077-004-088-101.77.4.pool.telefonica.de) (Client Quit)
[15:39:14] *** Joins: scymtym (~user@2001:638:504:20e6:6ac3:87e0:e782:f3fc)
[15:51:27] *** Joins: dra (~dra@2a04:4540:641d:1e00:812b:a6f8:737:14ef)
[16:10:56] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[16:11:43] *** Quits: attila_lendvai (~alendvai@catv-86-101-74-70.catv.broadband.hu) (Remote host closed the connection)
[16:11:46] *** Quits: cosimone` (~user@93-44-186-196.ip98.fastwebnet.it) (Ping timeout: 250 seconds)
[16:20:20] *** Quits: Inline (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431) (Quit: Leaving)
[16:30:15] *** Joins: lisp123 (~lisp123@45.86.202.23)
[16:54:51] *** Joins: cosimone (~user@93-44-186-196.ip98.fastwebnet.it)
[16:56:26] *** Joins: peterhil (~peterhil@dsl-hkibng32-54fb52-57.dhcp.inet.fi)
[17:06:29] *** Quits: lisp123 (~lisp123@45.86.202.23) (Quit: Leaving...)
[17:10:23] *** Quits: hendursa1 (~weechat@user/hendursaga) (Quit: hendursa1)
[17:11:04] *** Joins: hendursaga (~weechat@user/hendursaga)
[17:16:19] *** Joins: okflo_ (~okflo@lisa.diesenbacher.net)
[17:17:37] *** Quits: okflo (~okflo@188-23-113-20.adsl.highway.telekom.at) (Quit: WeeChat 3.2)
[17:21:56] *** Joins: hhdave (~hhdave@ip212.ip-193-70-71.eu)
[17:23:16] *** Quits: hhdave_ (~hhdave@ip212.ip-193-70-71.eu) (Ping timeout: 250 seconds)
[17:26:35] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[17:28:17] *** Quits: okflo_ (~okflo@lisa.diesenbacher.net) (Quit: ZNC 1.6.3+deb1ubuntu0.2 - http://znc.in)
[17:29:12] *** Joins: okflo (~okflo@lisa.diesenbacher.net)
[17:41:54] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 250 seconds)
[17:43:53] *** Joins: igemnace (~ian@user/igemnace)
[17:43:55] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[17:49:17] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Quit: WeeChat 3.2)
[17:49:44] *** Joins: kulernil (~kulernil@gateway/tor-sasl/kuler)
[17:51:45] *** Quits: kuler (~kulernil@gateway/tor-sasl/kuler) (Ping timeout: 276 seconds)
[17:53:43] *** Joins: yitzi (~yitzi@173-27-106-188.client.mchsi.com)
[17:54:51] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[18:06:35] *** Quits: kulernil (~kulernil@gateway/tor-sasl/kuler) (Remote host closed the connection)
[18:07:59] *** Joins: kulernil (~kulernil@gateway/tor-sasl/kuler)
[18:19:10] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 250 seconds)
[18:29:48] *** Joins: Inline (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431)
[18:32:46] *** Joins: lisp123 (~lisp123@5.30.23.247)
[18:35:25] <lisp123> Are there any tools to convert javascript to CL?
[18:39:03] *** Joins: hafat (~hafat@159.146.55.244)
[18:39:29] <random-nick> why would you want to do that?
[18:39:36] <random-nick> also there's https://marijnhaverbeke.nl/cl-javascript/
[18:39:58] <random-nick> but it implements an old version of javascript
[18:40:08] <lisp123> oooo thank you, this could work
[18:40:18] <lotuseater> random-nick: a standardized one? :P
[18:40:30] <lisp123> I want to convert mathjax to common lisp
[18:40:38] <lotuseater> lisp123: you could use named-readtables and write your own
[18:40:44] <lisp123> First I wanted to convert TeX to CL, but damn that program is hard to read
[18:40:47] <lotuseater> ahh mathjax
[18:41:04] <lotuseater> I like KaTeX.
[18:41:57] <lisp123> lotuseater: Oh yes, thanks. Let me check out that one too. Maybe its source code is easier. MathJax is horrendous - its not really open source if they intentionally make it so difficult to follow =.=
[18:42:40] <lisp123> KaTeX on the other hand is very good (just saw), I think I will try (and fail) to convert it to CL
[18:42:54] <lotuseater> I got to know it from RocketChat and that rocketed this chat platform to a high rank.
[18:43:15] <lotuseater> communicating in 2D forms can be very powerful
[18:44:16] <lotuseater> lisp123: maybe you want to learn before about a technique called (monadic) parser combinators
[18:44:20] <lisp123> Indeed :)
[18:44:51] <lisp123> lotuseater: Thanks, let me look into that. Parsers always blow my mind (I wrote a mini one for myself before, works well, but hard for me to even read my own code)
[18:45:47] <lotuseater> yeah and think about the difference, parsing complex things with some monolithic thing is not such a good idea
[18:46:50] <lisp123> I agree
[18:47:49] <lotuseater> so you can define a parser for every case and combine them as needed, even with backtracking
[18:49:08] <lisp123> I see
[18:49:35] <lisp123> I will need to reed into it more to understand a bit better, seems like this is the go to resource: https://www.cs.nott.ac.uk/~pszgmh/monparsing.pdf
[18:49:52] <lisp123> Thanks for mentioning it
[18:50:20] *** Joins: VincentVega (~user@185.66.254.225)
[18:50:46] <rain3> "I just write the parser classes using CLOS, it's doable in pure Common Lisp. See https://github.com/thodg/css-parser and https://github.com/thodg/css-lexer It's actually the only parser code I ever found to be readable without banging my head on the walls. But I might be biased. Some Ruby parsers are written this way also, like ruby-less which is deprecated nowadays."
[18:51:07] <lotuseater> hihi Graham Hutton
[18:51:39] <random-nick> why not use a parser generator like esrap?
[18:52:01] *** Joins: PinealGlandOptic (~PinealGla@37.115.210.35)
[18:52:21] <lotuseater> lisp123: or have a read in the chapter about it in the good book "Real World Haskell" they explain well and not too much, show how to write a correct CSV parser
[18:52:51] <lisp123> lotuseater: Thanks
[18:53:18] <lisp123> rain3: Thanks
[18:53:27] <lotuseater> lisp123: http://book.realworldhaskell.org/read/using-parsec.html
[18:53:49] <rain3> random-nick: any good tutorial on esrap ?
[18:54:51] <random-nick> http://scymtym.github.io/esrap/
[18:55:06] <lotuseater> ah nice
[18:56:44] <random-nick> do note that esrap isn't a CFG parser
[18:57:17] <random-nick> because its choice operator is ordered choice
[18:59:17] *** Joins: selwyn (~selwyn@user/selwyn)
[19:00:32] <random-nick> i.e. the first successful choice is valid (resulting in at most one parse tree) instead of all successful choices (possibly resulting in multiple parse trees)
[19:08:12] *** Joins: seok (~Seok@n114-73-75-18.bla3.nsw.optusnet.com.au)
[19:09:48] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Quit: ERC (IRC client for Emacs 27.2))
[19:27:48] *** Joins: Oladon (~olad@98.43.81.226)
[19:31:33] *** Quits: kulernil (~kulernil@gateway/tor-sasl/kuler) (Remote host closed the connection)
[19:33:13] *** Joins: kulernil (~kulernil@gateway/tor-sasl/kuler)
[19:36:31] *** Quits: kulernil (~kulernil@gateway/tor-sasl/kuler) (Remote host closed the connection)
[19:37:06] *** Joins: kulernil (~kulernil@gateway/tor-sasl/kuler)
[19:39:00] *** Quits: kulernil (~kulernil@gateway/tor-sasl/kuler) (Remote host closed the connection)
[19:39:48] *** Joins: kulernil (~kulernil@gateway/tor-sasl/kuler)
[19:42:30] *** Quits: kulernil (~kulernil@gateway/tor-sasl/kuler) (Remote host closed the connection)
[19:49:08] <saltrocklamp[m]> does anyone have a non-trivial use of cffi-groveller that they're able to share? i'm struggling to understand how to set things up properly
[19:49:19] <saltrocklamp[m]> (i'm not using autowrap because i can't get c2ffi to build)
[19:49:59] <saltrocklamp[m]> i could also try using claw https://github.com/borodust/claw but it seems very new
[19:54:02] <rain3> https://github.com/SquircleSpace/shcl/blob/master/shcl.asd
[19:54:24] <rain3> https://github.com/GrammaTech/sel/blob/master/software-evolution-library.asd
[19:54:55] <saltrocklamp[m]> thank you rain3
[19:54:56] <rain3> these two I have read a while ago when I used cffi-groveller
[19:55:37] <saltrocklamp[m]> what's the benefit of having 3 separate `defsystem`s? i'm also still very new to asdf
[19:56:12] <saltrocklamp[m]> i looks like there's 1 for each grovell'ed c source tree, and then 1 for the main user-facing system
[19:58:31] <borodust> saltrocklamp[m]: i can help you wrap with claw if you have particular library in mind
[19:59:26] <borodust> setting up :claw is as much pita as cl-autowrap+c2ffi
[19:59:35] <borodust> as of now
[20:00:14] <borodust> it is also new and lacks docs, yes
[20:00:51] <rain3> saltrocklamp[m]: I remember it was tricky to control the order of the files that are loaded , making a separate defsystem that uses :cffi-grovel-file  was the only way to kinda have control
[20:08:09] *** Quits: taiju (~taiju@M014013236064.v4.enabler.ne.jp) (Ping timeout: 248 seconds)
[20:08:18] *** Joins: taiju (~taiju@240b:253:ec40:2400:e1d1:588c:bc3f:1887)
[20:08:45] * beach refrains from reminding that it is better in all respects to program in Common Lisp instead. 
[20:11:51] <recordgroovy> sounds like a failure to refrain
[20:21:45] * borodust is trying not to shoot a remark, that it depends on man-hours involved
[20:26:02] <edgar-rft> that's true, the overly many man-hours needed to keep the FFI bindings up-to-date have ruined many Common Lisp projects in the past
[20:27:18] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[20:31:10] <borodust> yes! that's why we have claw, cl-autowrap and groveller :)
[20:31:56] <borodust> but really, once bindings generated you don't need to touch it, unless you need a new version of a lib
[20:32:34] <edgar-rft> what happens every few months with C libraries...
[20:32:38] <borodust> if foreign or native lib changes interface, you need to adapt either way - not specific to pure CL or foreign stuff
[20:32:45] <borodust> edgar-rft: not really
[20:33:01] <borodust> stuff like libuv or libclang is really forever interfaces at this point
[20:33:14] *** Quits: okflo (~okflo@lisa.diesenbacher.net) (Quit: ZNC 1.6.3+deb1ubuntu0.2 - http://znc.in)
[20:34:25] *** Joins: okflo (~okflo@lisa.diesenbacher.net)
[20:36:23] <borodust> the real problem with foreign libraries is just their foreign nature - you need to use another pack of tools to build them and their dependencies
[20:38:33] *** Joins: selwyn (~selwyn@user/selwyn)
[20:44:36] *** Quits: derelict (~derelict@user/derelict) (Quit: WeeChat 3.2)
[20:46:16] *** Joins: derelict (derelict@2600:3c02::f03c:92ff:fe45:2498)
[20:48:36] <jcowan> beach: That strikes me as self-fulfilling.  CATCH/THROW are traditionally implemented inefficiently, so no one uses them, so no one bothers to optimize them.
[20:49:56] <beach> I see.
[20:50:49] <beach> Your opinion seems to match that of SBCL maintainers, because it appears to me that they optimize every part of the system that they can and have time for.
[20:52:44] *** Quits: derelict (derelict@2600:3c02::f03c:92ff:fe45:2498) (Quit: bye)
[20:52:59] *** Joins: derelict (derelict@user/derelict)
[21:02:20] <jcowan> That also agrees with Google's style guide: use the whole language.
[21:03:00] <beach> I think that is totally different.
[21:03:32] <beach> I totally agree with that advice.
[21:04:03] *** Joins: tyson2 (~user@toroon12-3096782677.sdsl.bell.ca)
[21:04:52] <jcowan> I don't know what SBCL does, but one well-established approach when tags are compile-time constants is to maintain a vector of structures {pointer to start of code block, pointer to end of code block, sxhash of tag} sorted by the first two members of the struct.
[21:05:44] <jcowan> This reduces the O(n) search to O(log n).  There are probably ways to make it O(1) as well.
[21:06:40] <beach> Sounds like a great idea.
[21:08:28] *** Joins: Bike (~Bike@71.69.170.70)
[21:08:28] *** ChanServ sets mode: +o Bike
[21:09:10] <loke> jcowan: I wouldn't say no one.
[21:09:17] <loke> Maxima uses them
[21:11:10] <jcowan> A rhetorical move on my part.  (My training, such as it is, is in neither syntax nor semantics, but the third that stands between: rhetoric.)
[21:12:39] <yitzi> Well, Maxima uses them all over the place along with symbol plists because a lot of the code base is still pre CL.
[21:13:48] <beach> yitzi: What would you use instead now?
[21:14:23] <beach> Rather, what should Maxima use instead now?
[21:15:23] <yitzi> Oh I am not saying that I don't use catch/throw myself. Just that a lot Maxima's code is kind of crufty. There is no use of CLOS or restarts that I recall.
[21:16:04] *** Quits: khrbt (~znc@user/khrbt) (Quit: ZNC 1.7.2+deb3 - https://znc.in)
[21:16:25] <loke> beach: The plists aren't the biggest issue in Maxima. The number one problem is that it relies on a lot of global state.
[21:16:37] <loke> So it's impossible to run anything in threads.
[21:16:38] <yitzi> loke: Good point.
[21:18:19] *** Joins: khrbt (~znc@user/khrbt)
[21:18:22] <beach> loke: I meant instead of CATCH/THROW.
[21:18:33] <yitzi> I am working on integrating the their debugger into JupyterLab via common-lisp-jupyter and having to adapt it to work with restarts etc. ... so my opinion is probably slightly biased.
[21:19:47] *** Joins: srhm (~srhm@user/srhm)
[21:20:00] *** Quits: srhm (~srhm@user/srhm) (Client Quit)
[21:20:40] *** Joins: IPmonger (~IPmonger@73.81.116.17)
[21:20:54] *** Quits: IPmonger (~IPmonger@73.81.116.17) (Remote host closed the connection)
[21:24:19] <loke> There are over 300 uses of throw in maxima code (345 it seems)
[21:24:37] <loke> An example snippet that should be quite telling:
[21:24:44] <loke> (cond ((contains-a-replacement expression) (throw 'must-replace t)))
[21:25:18] <loke> It's also exposed to the Maxima language itself.
[21:25:54] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[21:27:31] *** Quits: lisp123 (~lisp123@5.30.23.247) (Quit: Leaving...)
[21:41:04] <recordgroovy> Making progress on a libwayland-less wayland: https://0x0.st/-t6v.png
[21:42:40] *** Joins: lisp123 (~lisp123@45.86.202.23)
[21:42:50] <lisp123> http://paulgraham.com/weird.html
[21:43:51] <borodust> lisp123: what about it
[21:44:14] <lisp123> PG's advocating Lisp :-) One step closer to world domination
[21:44:36] <recordgroovy> How long has PG been advocating lisp for, though?
[21:44:56] <aeth> I mean
[21:45:08] <borodust> can he stop, it's embarassing at this point
[21:45:14] <recordgroovy> ^
[21:45:33] <aeth> he gave up talking about Lisp in like 2003-2004 and focused on just startup stuff since then, with a brief pause to release Arc, which was, unfortunately, one of the biggest flops in programming language history due to the hype
[21:45:52] <lisp123> There's always a few that will bite, and a few of that few will write the next CL libraries ;)
[21:46:04] <aeth> Since Arc, pg might have had a post or two to talk about the "sequel" language, Bel, but due to the disappointment of Arc, it didn't really have the same effect
[21:46:26] <recordgroovy> I thought Bel was more of a though experiment than a practical lisp
[21:46:35] <recordgroovy> As in, "what would lisps look like if we had infinite computing power?"
[21:46:37] <aeth> recordgroovy: he probably learned not to overpromise and underdeliver
[21:46:59] <lisp123> recordgroovy: Yes, that it was. I tried reading the first few paragraphs, then got bored and moved on. But something useful might be there
[21:47:20] <aeth> recordgroovy: I get the impression that "Hundred-Year Language" was a major essay (I even had to read it for a comp sci class, actually)... and that many people (perhaps even pg himself) assumed that pg was claiming that Arc would be that 100 year language.
[21:47:24] <aeth> It wasn't.
[21:47:54] <lisp123> Seems like a lot of people to try reinvent Lisp
[21:48:20] <lisp123> But in any case, any advocacy about Lisp is a good thing imo :)
[21:48:28] <aeth> these days (2021), this sort of thing is more typical for pg's essays: "An NFT That Saves Lives". http://paulgraham.com/nft.html
[21:48:33] <lisp123> (try to reinvent and fail)
[21:48:44] <semz> eh, see how this worked out for rust
[21:49:19] <lisp123> aeth: That and shilling bitcoin and crypto currencies (coinbase must have made YC ridiculously rich)
[21:49:32] <aeth> lisp123: eh, back when pg was more popular, in the early '10s, a lot of people, myself included, joined #lisp on freenode with an extremely mistaken impression of the language saying rather laughable things (myself included)
[21:49:35] <borodust> lisp123: best advocacy is a work done - libraries, documentation, actual programs
[21:49:42] <semz> ^
[21:49:56] <semz> there's a sizable group that has no interest to ever engage with anything rust, no matter how good, simply because of how obnoxious the advocacy was
[21:50:11] <semz> and i can't fully blame them
[21:50:27] <aeth> This is the kind of thing that '00s and early '10s Lisp advocacy produced: https://xkcd.com/224/
[21:50:32] <lisp123> I count myself one of them, I eye roll everytime I see "xyz written in rust"
[21:50:49] <recordgroovy> Most end-user programs that advertise their implementation languages, even when that has nothing relevant with the program, it's usually Rust
[21:50:56] <lisp123> aeth: Did he trick you into thinking Macros were a super power? :D
[21:51:34] <aeth> The more grounded Lisp of the '10s and '20s is more about things like #lispgames https://github.com/lispgames/lispgames.github.io/wiki/Lisp-Games
[21:51:37] <aeth> and https://pgloader.io/
[21:51:53] <lisp123> aeth: lol @ at that xkcd
[21:52:39] <lisp123> borodust: Yes that would help too, but its not everybody's cup of tea or capability. For those, any other way to help is also fine
[21:52:52] <aeth> My go-to example for the "power" of Lisp is literally as mundane as how HTML templating is done in most languages (embed the language or a DSL inside of otherwise-normal .html files) vs in most Lisps (generate HTML strings from s-expressions that map to the HTML syntax)
[21:53:06] <aeth> HTML isn't going to save the world, but it's a good example.
[21:53:17] <aeth> Another example I give is https://borodust.org/projects/trivial-gamekit/
[21:53:19] <aeth> From borodust
[21:53:29] <aeth> But it's kind of a revolving door as far as which project to point to
[21:53:45] <aeth> for a while it was https://github.com/vydd/sketch/
[21:54:16] * borodust blushes
[22:05:47] *** Joins: asarch (~asarch@2806:10ae:7:15d4:21db:8911:d8f3:334a)
[22:11:41] *** Joins: kulernil (~kulernil@gateway/tor-sasl/kuler)
[22:12:54] <saltrocklamp[m]> <borodust> "salt rock lamp: i can help you..." <- that'd be very helpful! i wanted to wrap libgit2 to get started, but probably others in the near future
[22:13:15] <saltrocklamp[m]> <rain3> "salt rock lamp: I remember it..." <- are the defsystem's executed in the order that they are defined?
[22:19:29] <rain3> if system_two depends on system_one , system_one is loaded first
[22:20:38] <saltrocklamp[m]> oh, so this lets you express dependencies
[22:20:49] <saltrocklamp[m]> you can't express dependencies among components within a system?
[22:22:58] <Bike> you can express dependencies between files within a system
[22:23:35] <Bike> might get weird with something like a groveller though
[22:24:33] *** Quits: kulernil (~kulernil@gateway/tor-sasl/kuler) (Remote host closed the connection)
[22:25:26] *** Joins: kulernil (~kulernil@gateway/tor-sasl/kuler)
[22:25:49] <saltrocklamp[m]> is there any convention about `/` and `.` in system names?
[22:27:13] <saltrocklamp[m]> it looks like people are using `/` to refer to specific locations in the source tree, and i've seen others using names like `foo` and `foo.test`
[22:33:08] <scymtym> ASDF allows grouping files into "modules" within systems and those modules can have dependencies as well. dependencies between files, as Bike mentioned, allow finer grained expression of dependencies, though
[22:33:34] <saltrocklamp[m]> i see that here https://github.com/SquircleSpace/shcl/blob/master/shcl.asd#L15-L18
[22:34:32] *** Quits: tyson2 (~user@toroon12-3096782677.sdsl.bell.ca) (Quit: ERC (IRC client for Emacs 27.2))
[22:37:02] <scymtym> an asd file named FOO.asd should only contain systems named either FOO or FOO/SUFFIX since FOO/SUFFIX cannot refer to a file FOO/SUFFIX.asd so ASDF knows to look in FOO.asd when searching for FOO/SUFFIX. in contrast, FOO.SUFFIX could be defined in a file FOO.SUFFIX.asd
[22:38:01] *** Joins: mjoerg (~user@user/mjoerg)
[22:38:12] <saltrocklamp[m]> ah, ok
[22:38:34] <saltrocklamp[m]> so `foo` and `foo/bar` should live in `foo.asd`, and `foo.baz` should live in `foo.baz.asd`
[22:38:44] <saltrocklamp[m]> is `foo.bar/baz` also accepted?
[22:39:04] <saltrocklamp[m]> is this somewhere in the asdf docs?
[22:44:39] *** Quits: mjoerg (~user@user/mjoerg) (Remote host closed the connection)
[22:48:31] *** Quits: kulernil (~kulernil@gateway/tor-sasl/kuler) (Remote host closed the connection)
[22:52:27] *** Joins: kulernil (~kulernil@gateway/tor-sasl/kuler)
[22:56:31] *** Quits: kulernil (~kulernil@gateway/tor-sasl/kuler) (Remote host closed the connection)
[22:57:37] <scymtym> ASDF will warn if a system name does not follow the scheme. i don't know whether the documentation discusses this topic. note that it is not strictly forbidden to define, say, a system named foo.bar in foo.asd. if the system foo is always loaded before foo.bar, ASDF doesn't have to know how to find the definition of foo.bar. because of that, it has been debated whether the naming restriction should exist
[22:58:50] *** Joins: kulernil (~kulernil@gateway/tor-sasl/kuler)
[22:59:17] <scymtym> recordgroovy: which parts of the wayland protocol did you implement so far?
[23:00:06] <recordgroovy> scymtym: Message-passing, events, a naiive dispatching mechanism, and wl_display_roundtrip(), and wl_display_sync()
[23:00:23] <recordgroovy> The object map used to link ID's to objects is also naiively implemented
[23:01:03] <scymtym> recordgroovy: are you using the protocol definitions, that is wayland.xml?
[23:01:11] <recordgroovy> Not yet, that's my main goal
[23:01:17] <scymtym> i see, thanks
[23:01:31] *** Quits: kulernil (~kulernil@gateway/tor-sasl/kuler) (Remote host closed the connection)
[23:01:33] <recordgroovy> First step is to make a DSL that's like the XML definitions, and then a reader that transforms the XML file *into* that DSL.
[23:02:04] <recordgroovy> something like (load-protocol-definitions :package-to-create "wayland.xml")
[23:02:43] <recordgroovy> It will then create pre-built methods like (package-to-create:sync
[23:02:50] <scymtym> yeah, i did that part. but not as a dsl since there is no need for a surface syntax
[23:03:24] *** Quits: Bike (~Bike@71.69.170.70) (Quit: Connection closed)
[23:08:41] <saltrocklamp[m]> is `register-system-packages` essentially a shorthand for `defsystem`?
[23:13:34] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[23:21:18] *** Quits: lisp123 (~lisp123@45.86.202.23) (Quit: Leaving...)
[23:25:41] <etimmons> salt rock lamp: no. It lets ASDF know which packages a system provides as it's not required for the package name to have any relation to the system name.
[23:26:04] <etimmons> salt rock lamp: You frequently see it used with package inferred systems. Those infer system dependencies based on the packages its components use.
[23:26:16] *** Quits: cosimone (~user@93-44-186-196.ip98.fastwebnet.it) (Ping timeout: 252 seconds)
[23:27:43] <borodust> saltrocklamp[m]: i'll have a look
[23:27:55] <borodust> looks like it shouldn't take more than 15 minutes to wrap
[23:30:18] *** Quits: scymtym (~user@2001:638:504:20e6:6ac3:87e0:e782:f3fc) (Ping timeout: 250 seconds)
[23:31:44] <etimmons> salt rock lamp: I actually recently started wrapping libgit2 with claw. Wrapping was pretty quick once I grokked claw and I'm now working on lispify'ing it.
[23:32:31] <etimmons> salt rock lamp: let me know if you're interested in collaborating. I haven't pushed it anywhere yet and won't be able to until tomorrow afternoon, though.
[23:33:02] <borodust> oh wait
[23:33:04] <etimmons> borodust: I really enjoy using claw! Although I feel like there's still some features to it that I am unaware of
[23:33:38] *** Joins: Bike (~Bike@71.69.170.70)
[23:33:38] *** ChanServ sets mode: +o Bike
[23:34:12] <borodust> etimmons: thanks! and i'm kinda amazed you got it working with so little docs ;p
[23:35:29] <borodust> well, i'm halfway wrapping git2 - i'll link result on github, but you can safely discard it or steal whatever seems usable
[23:36:06] <etimmons> Haha, it did take a bit to get everything working! But I've tried the other options out there and knew I didn't like them.
[23:37:02] <etimmons> I think I even had some issues where autowrap just failed on libgit2.
[23:37:36] <etimmons> Cool, I'll definitely take a look and see what I can learn from the master at work
[23:41:09] <borodust> huh, 10k lines bindigns source, okay
[23:41:20] <borodust> that's no small lib
[23:44:03] <borodust> here's the untested version: https://github.com/borodust/claw-git2
[23:44:05] *** Joins: scymtym (~user@ip-88-153-154-183.hsi04.unitymediagroup.de)
[23:44:37] <borodust> clone it into ~/quicklisp/local-projects, (ql:register-local-projects) and (ql:quickload :claw-git2)
[23:44:45] <borodust> i'll see if i can arrange an example
[23:47:28] <saltrocklamp[m]> eric: so `register-system-packages` is _always_ required whenever a package name doesn't match a system name?
[23:47:39] <saltrocklamp[m]> also yes i would love to see what you did so far!
[23:48:07] *** Quits: rain3 (~rain3___@79.115.250.43) (Ping timeout: 240 seconds)
[23:48:24] <saltrocklamp[m]> #commonlisp bands together to make useful working examples and hopefully contribute better docs
[23:48:32] *** Joins: IPmonger (~IPmonger@172.58.203.161)
[23:48:45] *** Quits: IPmonger (~IPmonger@172.58.203.161) (Remote host closed the connection)
[23:48:58] <saltrocklamp[m]> i don't know what it is about common lisp but i really have a hard time getting through some of these manuals
[23:49:47] <saltrocklamp[m]> I just don't really know what to do with information like this:
[23:49:47] <saltrocklamp[m]> >  The file starts with a form `(in-package :asdf-user)`, but it is actually redundant, not necessary and not recommended. But yet more complex cases (also not recommended) may usefully use an in-package form.
[23:49:47] <saltrocklamp[m]> <https://common-lisp.net/project/asdf/asdf/A-more-involved-example.html>
[23:50:04] *** Joins: vats (~vats@180.149.226.8)
[23:53:17] *** Joins: attila_lendvai (~alendvai@catv-86-101-74-70.catv.broadband.hu)
[23:54:06] <etimmons> salt rock lamp: it's needed if a package inferred system depends on a system where the package and system names mismatch
[23:54:17] <saltrocklamp[m]> so it's not needed for "plain" systems?
[23:54:39] *** Joins: Krystof (~user@81.174.155.115)
[23:55:16] <etimmons> But it's important to note that it's routinely put in the asd file for the package inferred system, not the system with the mismatching package name
[23:55:21] <etimmons> Correct
[23:56:51] <saltrocklamp[m]> i see, thanks
[23:57:50] <saltrocklamp[m]> for "plain" systems, there's no "mapping" of packages to systems, you just use `defpackage` somewhere inside the system. right?
