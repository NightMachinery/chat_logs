[00:00:18] *** Quits: tiotags (~tiotags@user/tiotags) (Quit: Leaving)
[00:00:18] *** Joins: Fairy (~Fairy@2001:464a:4992:0:bdfd:8ef1:211a:77dc)
[00:00:42] *** Quits: Teukka (~teukka@user/Teukka) (Read error: Connection reset by peer)
[00:02:29] *** Joins: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com)
[00:04:15] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[00:04:15] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[00:04:15] *** Joins: wroathe (~wroathe@user/wroathe)
[00:04:19] *** Joins: Teukka (~teukka@84-216-41-232.customers.ownit.se)
[00:04:20] *** Quits: Teukka (~teukka@84-216-41-232.customers.ownit.se) (Changing host)
[00:04:20] *** Joins: Teukka (~teukka@user/Teukka)
[00:06:20] *** Joins: Leonardzzz (~Administr@114.55.127.80)
[00:07:25] *** Quits: Itaru (~Itaru@ro2.flokinet.is) (Quit: See Ya Later!)
[00:07:30] *** Joins: cuppajoe (~joe@ip70-171-93-122.no.no.cox.net)
[00:08:47] *** Joins: Hexmind (~Hexmind@modemcable049.25-131-66.mc.videotron.ca)
[00:09:17] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[00:09:25] *** Quits: Leonard (~Administr@114.55.127.80) (Ping timeout: 240 seconds)
[00:10:58] *** Quits: Satin (uid193953@user/Seten) (Quit: Connection closed for inactivity)
[00:11:39] *** Quits: samir_ (~azureuser@user/samir) (Ping timeout: 250 seconds)
[00:13:16] *** Quits: plainoldcheese (~plainoldc@user/plainoldcheese) (Quit: WeeChat 3.4)
[00:15:00] *** Joins: Leonard (~Administr@114.55.127.80)
[00:15:39] *** Joins: samir_ (~azureuser@user/samir)
[00:16:30] *** Joins: aqua (~aqua@user/aqua)
[00:17:17] *** Quits: Leonardzzz (~Administr@114.55.127.80) (Ping timeout: 240 seconds)
[00:20:00] *** Quits: kish` (~aqua@user/aqua) (Ping timeout: 276 seconds)
[00:20:35] *** Joins: halfbit (~tburdick@99-45-126-203.lightspeed.cicril.sbcglobal.net)
[00:22:01] *** Joins: boB_K7IQ (~boB_K7IQ@152.44.147.180)
[00:22:47] <halfbit> if a value is derefenced without assignment, is the compiler free to ignore it?
[00:23:08] <halfbit> ex: *someptr;
[00:24:15] *** Quits: cosimone (~user@93-47-228-11.ip115.fastwebnet.it) (Remote host closed the connection)
[00:24:42] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[00:24:57] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Remote host closed the connection)
[00:26:26] <ntwk> If the compiler didn't ignore the above statement, what code would it generate?
[00:26:31] <nomagno> https://memo.barrucadu.co.uk/c-is-not-turing-complete.html
[00:26:35] <nomagno> This is very interesting
[00:27:29] <cuppajoe> So over Christmas, I made a Pong clone in C where there are two balls instead of one and a single player controls both paddles. Here is the Github link if you want to try it :) https://github.com/cuppajoe123/Pong-Hardmode
[00:27:31] <candide> Title of cuppajoe's link: GitHub - cuppajoe123/Pong-Hardmode: A game inspired by Pong, but with several twists and added functionalities
[00:27:48] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[00:28:05] <cuppajoe> I made it using the SDL2 library. This is my first graphical C program!
[00:28:11] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-d550-b607-3a0a-ff7b.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[00:29:33] <sham1> Nice
[00:30:23] <nomagno> cuppajoe: Just tried it, fairly fun!
[00:30:40] <nomagno> I might try to contribute back some improvements, if you don't mind
[00:31:01] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Ping timeout: 240 seconds)
[00:31:10] <cuppajoe> that would be great!
[00:31:10] *** Quits: Viewday11 (~Viewday@user/viewday) (Read error: Connection reset by peer)
[00:31:18] *** Joins: mattroelle (~mattroell@136-26-68-28.cab.webpass.net)
[00:31:26] *** Quits: complexnumber (~brett@194-223-26-191.tpgi.com.au) (Remote host closed the connection)
[00:31:57] <cuppajoe> The code is a bit of a mess. I could probably make some of it into seperate functions, but right now, each ball is seperate code
[00:32:08] <cuppajoe> Not the most elegant solution, I know...
[00:33:22] *** Joins: Viewday11 (~Viewday@user/viewday)
[00:34:15] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Ping timeout: 256 seconds)
[00:34:37] *** Quits: halfbit (~tburdick@99-45-126-203.lightspeed.cicril.sbcglobal.net) (Ping timeout: 240 seconds)
[00:35:23] *** Joins: Betal (~Betal@user/betal)
[00:37:18] *** Quits: Leonard (~Administr@114.55.127.80) (Read error: Connection reset by peer)
[00:37:22] *** Joins: Leonardzzz (~Administr@114.55.127.80)
[00:37:59] <fizzie> If the pointed-to type is `volatile`-qualified, `*someptr` would be expected to generate code that does a read, though maybe not quite required ("what constitutes an access to an object that has volatile-qualified type is implementation-defined"). If not, then it should certainly be allowed (but not required) to ignore it.
[00:38:18] *** Quits: dithpri (~dithpri@gateway/tor-sasl/dithpri) (Quit: '); DROP TABLE Users;--)
[00:39:21] <sham1> One would hope that even something like `*some_volatile_ptr;` as a singular line would force a read
[00:40:22] <sham1> But one can always fabricate a "fake" data dependency
[00:46:38] <nomagno> fizzie: Is it FULLY implementation-defined?
[00:47:02] <nomagno> volatile foo = bar; var = foo;
[00:47:13] <nomagno> could this not be an access, technically?
[00:47:25] *** Joins: randm_ (~randm@user/randm)
[00:47:25] *** Quits: randm (~randm@user/randm) (Read error: Connection reset by peer)
[00:47:33] *** Joins: slidercrank (~slidercra@user/slidercrank)
[00:47:50] *** randm_ is now known as randm
[00:48:24] *** Joins: Leonard (~Administr@114.55.127.80)
[00:48:29] *** Quits: skapata (~Skapata@user/skapata) (Ping timeout: 268 seconds)
[00:49:04] *** Quits: rgrinberg (~textual@187.223.202.115) (Read error: Connection reset by peer)
[00:49:45] *** Parts: critr (~critr@user/critr) (.)
[00:50:13] *** Quits: Leonardzzz (~Administr@114.55.127.80) (Ping timeout: 240 seconds)
[00:50:16] *** Quits: randm (~randm@user/randm) (Client Quit)
[00:50:19] *** Joins: BCMM (~BCMM@user/bcmm)
[00:50:26] *** Joins: rgrinberg (~textual@2806:101e:7:78bb:604a:d771:1c7e:1e28)
[00:51:02] *** Quits: RAMIII (~RAMIII@2601:8c:801:c600::f02a) (Ping timeout: 240 seconds)
[00:51:47] *** Joins: randm (~randm@user/randm)
[00:51:49] *** Quits: randm (~randm@user/randm) (Remote host closed the connection)
[00:52:35] <nightstrike> Does C enforce that multi-dimensional arrays be contiguous?
[00:52:40] *** Joins: randm (~randm@user/randm)
[00:53:54] *** Quits: randm (~randm@user/randm) (Client Quit)
[00:53:54] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-d550-b607-3a0a-ff7b.res6.spectrum.com)
[00:54:00] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:cdd1:fb1a:1d51:220e) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[00:54:07] *** Joins: HisShadow (~HisShadow@user/hisshadow)
[00:54:16] <sham1> No
[00:54:59] *** Joins: randm (~randm@user/randm)
[00:55:10] <slact[m]> how can you have a non-contiguous multidimensional array? (and i mean array, not just double pointers)
[00:55:27] <Xgc> nightstrike: Indirectly. Yes.  The reason is each level of array, from the left to right (in index order) is required to hold elements which are adjacent.
[00:55:27] <sham1> For example if you have an array `float a[2][5]`, `a[0][5]` need not be the same as `a[1][0]`, and in fact the former could be a runtime error by the implementation
[00:55:38] <slact[m]> and not counting tail-end struct padding
[00:56:19] <nightstrike> A person I'm working with wants to malloc each dimension of a "int ****x" and index it with [][] notation
[00:56:20] <Xgc> nightstrike: But the specification still considers certain accesses across those adjacent bounds as undefined.
[00:57:40] *** Quits: randm (~randm@user/randm) (Read error: Connection reset by peer)
[00:58:10] <Xgc> nightstrike: Your coworker may be making a mistake in trying to treat arrays as pointers.
[00:59:13] <Xgc> nightstrike: It is true that you can access type *p;  via p[x];  As long as the assumptions don't go much beyond that, you're ok.
[00:59:37] <caze> Also you have to understand that C really only has one dimensional arrays.
[00:59:40] <nightstrike> Xgc: ty
[00:59:54] *** Quits: cuppajoe (~joe@ip70-171-93-122.no.no.cox.net) (Quit: WeeChat 3.3)
[01:00:04] <nomagno> I believe p[x] is the same as *(p + x)?
[01:00:12] <nomagno> at least practically speaking
[01:00:17] <Xgc> nomagno: Yes.
[01:01:22] <nightstrike> I recommended to him to manually computer dimensions and flatten the arrays, but he disagreed
[01:01:51] <sham1> Why does he disagree
[01:02:07] *** Joins: odoood (~odoood@2601:c8:c000:c4e0::3)
[01:02:23] <nightstrike> because "it works"
[01:02:29] <nightstrike> I assumed it worked by chance
[01:02:32] <sham1> A lot of things work
[01:02:58] *** Quits: odoood (~odoood@2601:c8:c000:c4e0::3) (Remote host closed the connection)
[01:03:18] *** Quits: magla (~gelignite@55d42ff9.access.ecotel.net) (Quit: Stay safe!)
[01:03:23] *** Joins: odoood (~odoood@2601:c8:c000:c4e0::3)
[01:05:10] *** Joins: dudek (~dudek@185.150.236.156)
[01:06:35] <nomagno> Is there a way to pass a 2D array to a function declaring as a pointer in the function parameters?
[01:06:56] <nomagno> I guess not, because since you lose width information, you don't know how long each 'row' is in memory
[01:07:11] <sham1> nomagno: int (*arr)[6][6]
[01:07:20] *** Joins: Leonardzzz (~Administr@114.55.127.80)
[01:07:47] <nomagno> Doesn't that return an array?
[01:08:00] <nomagno> Or...
[01:08:12] <nomagno> I don't know, this kind of syntax really messes with me
[01:08:22] <nomagno> oh, that's a 2D array of int pointers
[01:08:23] <nomagno> got it
[01:08:27] <sham1> No
[01:08:31] <sham1> It's a pointer to 2D array
[01:08:41] <sham1> ,english int (*arr)[6][6]
[01:08:43] <candide> sham1: Declare `arr` as a pointer to an array of 6 elements of an array of 6 elements of int.
[01:10:19] <nomagno> without the parentheses would it be a 2D array of pointers?
[01:10:37] <sham1> ,english int *arr[6][6]
[01:10:38] <candide> sham1: Declare `arr` as an array of 6 elements of an array of 6 elements of pointer to int.
[01:10:39] *** Quits: Leonard (~Administr@114.55.127.80) (Ping timeout: 256 seconds)
[01:10:40] <sham1> Yes
[01:11:13] <nomagno> ,english int *arr[6][6]
[01:11:13] <candide> nomagno: Declare `arr` as an array of 6 elements of an array of 6 elements of pointer to int.
[01:11:51] <caze> nomagno: Pass a pointer to the first element.
[01:12:10] *** Quits: koffeinfriedhof (~koffeinfr@ubuntuusers/moderation/koffeinfriedhof) (Quit: WeeChat 3.4)
[01:12:50] <nomagno> Then I also need to pass width and height information, right?
[01:13:10] *** Joins: koffeinfriedhof (~koffeinfr@ubuntuusers/moderation/koffeinfriedhof)
[01:13:14] *** Joins: test__ (flooded@gateway/vpn/protonvpn/flood/x-43489060)
[01:13:22] <caze> nomagno: Just the height. The width would be a part of the type information for the first element.
[01:13:32] <nomagno> I guess I could technically define an additional row-terminator character for strings
[01:13:39] <nomagno> it would be a fun experiment
[01:14:02] <sham1> void mat_mul(size_t i, size_t j, size_t k, float (*a)[i][j], float (*b)[j][k], float (*out)[i][k]); // Mayhaps
[01:15:25] <caze> nomagno: For instance, int barr[2][3]; the type of the first element is int [3]. If you wanted the call to look like foo(barr); the parameter would have to be pointer to the first element, e.g., foo(int (*)[3]);
[01:15:57] *** Quits: rgrinberg (~textual@2806:101e:7:78bb:604a:d771:1c7e:1e28) (Ping timeout: 240 seconds)
[01:15:59] <caze> <caze> Also you have to understand that C really only has one dimensional arrays.
[01:16:11] *** Joins: flooded (flooded@gateway/vpn/protonvpn/flood/x-43489060)
[01:16:11] <nomagno> ^
[01:16:15] <sham1> nomagno: U+001E GROUP SEPARATOR or something
[01:16:16] *** Joins: steve__ (~steve@ool-182c2b80.dyn.optonline.net)
[01:16:19] *** Quits: _flood (flooded@gateway/vpn/protonvpn/flood/x-43489060) (Ping timeout: 256 seconds)
[01:16:40] <nomagno> Possibly
[01:16:41] <caze> int carr[2][3][4]; is a one dimensional array that contains two elements.
[01:17:10] *** Quits: kts (~kts@103.73.237.74) (Quit: Konversation terminated!)
[01:17:37] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[01:17:37] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[01:17:37] *** Joins: wroathe (~wroathe@user/wroathe)
[01:18:00] *** Joins: Leonard (~Administr@114.55.127.80)
[01:18:05] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Ping timeout: 268 seconds)
[01:18:16] <nomagno> 1E ----> 16 + 14... '\036', right?
[01:18:27] *** Quits: test__ (flooded@gateway/vpn/protonvpn/flood/x-43489060) (Ping timeout: 256 seconds)
[01:19:35] *** Quits: NEYi (~NEYi@109.251.216.38) (Ping timeout: 256 seconds)
[01:20:43] *** Quits: Leonardzzz (~Administr@114.55.127.80) (Ping timeout: 256 seconds)
[01:22:36] *** Joins: rgrinberg (~textual@2806:101e:7:78bb:e159:66aa:7702:44de)
[01:22:50] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-d550-b607-3a0a-ff7b.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[01:24:19] *** Quits: Leonard (~Administr@114.55.127.80) (Read error: Connection reset by peer)
[01:24:21] *** Joins: Leonardzzz (~Administr@114.55.127.80)
[01:25:00] *** Joins: yolo (~xxiao@li1120-73.members.linode.com)
[01:26:18] *** Joins: SGautam (uid286066@id-286066.ilkley.irccloud.com)
[01:27:29] *** Joins: _mikey (~mikey@user/mikey/x-4335048)
[01:29:20] *** Quits: moose (~moose@user/moose) (Quit: Leaving)
[01:32:36] *** Joins: Leonard (~Administr@114.55.127.80)
[01:35:01] *** Quits: Leonardzzz (~Administr@114.55.127.80) (Ping timeout: 256 seconds)
[01:37:04] *** Joins: RAMIII (~RAMIII@2601:8c:801:c600:5efd:7795:cdf9:ecb2)
[01:37:16] *** Quits: aradesh (~aradesh@user/aradesh) (Quit: WeeChat 1.9.1)
[01:38:20] *** Joins: Leonardzzz (~Administr@114.55.127.80)
[01:41:07] *** Joins: NEYi (~NEYi@109.251.216.38)
[01:41:49] *** Quits: Leonard (~Administr@114.55.127.80) (Ping timeout: 256 seconds)
[01:42:38] <constxo> man
[01:42:49] <constxo> u guys ever have to work with some obscure file format
[01:43:09] <constxo> and the specification doesn't make some things clear
[01:43:31] <constxo> but u can't google it because nobody fucking uses it
[01:45:02] <pony> which one?
[01:47:07] <constxo> XTF
[01:47:24] <sham1> The hydrographic data format?
[01:47:26] <sham1> Like Triton?
[01:48:15] <veltas> caze: The reason they're called 'arrays' in C is because you can declare an array of arrays, i.e. multi-dimensional. They were called vectors in B.
[01:49:00] *** Quits: rgrinberg (~textual@2806:101e:7:78bb:e159:66aa:7702:44de) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[01:49:59] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-d550-b607-3a0a-ff7b.res6.spectrum.com)
[01:50:08] *** Quits: strajder (~strajder@user/strajder) (Quit: leaving)
[01:51:26] <sham1> Well vectors of vectors are just matrices innit
[01:51:30] <sham1> And other tensors
[01:52:25] <veltas> A tensor is represented by an array
[01:52:26] <constxo> sham1: yes
[01:55:41] <sham1> Well I did find some stuff about it with Google
[01:55:54] <veltas> In maths 'array' refers to some n-dimensional grid of numbers, a vector can be represented by a 1-dimensional grid
[01:56:24] <sham1> A rank 1 array
[01:56:57] <caze> That's the important thing to understand about C arrays - it affects how you pass an array of arrays to a function.
[01:57:25] <caze> int carr[2][3][4]; foo(carr) doesn't work if foo is foo(int *);
[01:57:35] <veltas> You're right, but I still think the naming is important / interesting
[01:58:24] <veltas> Even if it doesn't affect the semantics
[01:59:00] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[01:59:27] <AmR> are #warning is standard in language ?
[01:59:35] <sham1> IIRC no
[01:59:36] *** Joins: wenxin (~wenxin@user/vim-fans/x-3284168)
[01:59:37] <sham1> Only errors
[01:59:37] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[01:59:41] <sham1> Like #error
[02:00:03] *** Joins: Leonard (~Administr@114.55.127.80)
[02:00:14] <sham1> Yeah. No #warning in the C11 draft at least
[02:01:06] *** Quits: Torr (~Torr@user/torr) (Remote host closed the connection)
[02:01:09] <veltas> `#pragma warning` is better when something like that is supported, `#pragma` is standard in the sense it won't cause an error if you don't have support for the specific pragma you're using
[02:01:09] <sham1> One thing I like though is that #line is standard, so one can actually use that for generating debug information and all that jazz for languages that compile to C
[02:01:17] <caze> ,c11 warning
[02:01:17] <candide> No such text 'warning' found in C11 Draft Standard (n1570).
[02:01:24] <fizzie> I think there's a #warning proposal for C23.
[02:01:29] *** Quits: xb0o2 (~xb0o2@user/xb0o2) (Quit: Client closed)
[02:01:29] <sham1> It'd be nice
[02:01:31] <fizzie> Not yet incorporated in the drafts though.
[02:01:49] <fizzie> http://www.open-std.org/jtc1/sc22/wg14/www/docs/n2686.pdf
[02:02:02] *** Joins: moose (~moose@user/moose)
[02:02:35] <veltas> sham1: Yes although I notice i.e. GCC doesn't use it when preprocessing
[02:02:39] *** Quits: Leonardzzz (~Administr@114.55.127.80) (Ping timeout: 256 seconds)
[02:02:57] <pragma-> lol, I love how that entire proposal fits in just a few lines on one page.
[02:03:10] <sham1> Speaking of proposals, I really hope that N2724 or some other typeof proposal actually gets though
[02:03:13] <sham1> through*
[02:03:13] *** Quits: mahmutov (~mahmutov@37.155.64.87) (Ping timeout: 256 seconds)
[02:04:07] <sham1> It was already a great win that C is going to get binary literals
[02:04:16] <sham1> I don't know why it took this long, but I'm happy about this
[02:04:44] <veltas> Because real programmers use hex  *HU-AHHH*
[02:04:50] <sham1> Also `%b`. Grand!
[02:04:50] <nomagno> I don't really see the use for binary literals
[02:04:59] <sham1> nomagno: do you never do binary masks?
[02:04:59] <nomagno> hex is genuinely more useful in most contexts
[02:05:06] <nomagno> if you're doing bitmasking
[02:05:12] <nomagno> you write a comment next to the thingy
[02:05:37] <sham1> Yeah, and I'd rather have the actual binary string rather than having to do the hexadecimal and then add the binary next to it
[02:05:38] <fizzie> nomagno: Re `volatile`, I imagine so. Implementation-defined is all it (C11 6.7.3p7) says. Though really the _intent_ -- for example, from the rationale, https://0x0.st/ozgT.txt -- is definitely just avoid specifying the more complex cases.
[02:05:55] <sham1> Wait
[02:06:10] <veltas> Have you actually tried binary literals? Binary is verbose af
[02:06:12] <sham1> Wikipedia: Changes integrated into the latest working draft are: * Digit separators
[02:06:12] <fizzie> (I tend to just do hex with no comments.)
[02:06:12] <sham1> YES
[02:06:30] <nomagno> Digit separator how?
[02:06:32] <pragma-> Hex is pretty easy to read for groupings of 4 bits. Octal for groupings of 3 bits. It's really trivial to do this conversion mentally.
[02:06:36] <sham1> 0xFFFF'FFFF
[02:06:38] <nomagno> as in, treat 1_2 as 12?
[02:06:41] <sham1> So it's like C++
[02:06:44] <nomagno> APOSTROPHE
[02:06:45] <fizzie> The digit separator character is ', which _definitely_ isn't going to break any syntax highlighters.
[02:06:46] <nomagno> What
[02:06:47] <nomagno> no
[02:06:49] <nomagno> that can't be right
[02:07:03] <nomagno> an apostrophe can't be a separator
[02:07:07] <fizzie> It is, though.
[02:07:11] <veltas> pragma-: I've been doing it for years and I still get it wrong loads, but yeah most people are okay with hex :(
[02:07:13] <sham1> Oh it's gonna break syntax highlighting, and it'll be glorious
[02:07:16] <caze> lol
[02:07:19] <nomagno> Literally ALL existing compilers will break
[02:07:33] <nomagno> And will need to have an annoying special case added to the parser
[02:07:35] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[02:07:36] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[02:07:36] *** Joins: wroathe (~wroathe@user/wroathe)
[02:08:20] *** Joins: Leonardzzz (~Administr@114.55.127.80)
[02:08:21] *** Quits: Leonard (~Administr@114.55.127.80) (Read error: Connection reset by peer)
[02:08:26] <nomagno> Also, isn't it potentially ambiguous? how to distinguish int a = 0x12'12'12 -> 0x121212 OR 0x12 '12' 12
[02:08:27] <nomagno> one is an error, the other isn't
[02:08:31] <sham1> if (inside_integer_literal(state) && character == '\'') { /* Skip to the next character (we're in the tokenizer BTW) */ }
[02:08:55] <sham1> I'd say that'd just be 0x12'12'12 == 0x121212
[02:09:00] <sham1> But I'll check
[02:09:22] <fizzie> N2731 6.4.4.1p2: "An optional separating single quote character (') in an integer or floating constant is called a digit separator. Digit separators are ignored when determining the value of the constant."
[02:09:23] <nomagno> Error in GCC
[02:09:30] <nomagno> BUt gcc doesn't support separators
[02:09:33] <nomagno> so not surprising
[02:09:37] <sham1> Well probably not yet
[02:09:39] <veltas> They won't have "an annoying special case", they will just add the syntax to lexer and if you parse a literal with aposts it will error on older -std
[02:09:40] <nomagno> or at least not apostrophe
[02:09:44] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.4)
[02:10:00] <veltas> GCC supports it for C++ and will support it for C, this is not a big deal to the compiler
[02:10:04] <sham1> It does support them for C++ so I don't see why they couldn't do it for C as well
[02:10:09] *** Joins: plastico (~plastico@neomutt/plastico)
[02:10:10] <sham1> They just haven't yet
[02:10:28] <fizzie> 0x12'12'12 would be 0x121212. N2731 has as examples 0x1'2'3'4AB'C'D (equal to 0x1234ABCD), and 0b11'10'11'01 (equal to 0b11101110).
[02:10:42] <veltas> It's going to be a big deal to syntax highlighting
[02:11:08] <nomagno> I'm sorry but _ sounds like a way better separator
[02:11:13] <fizzie> But '1'2 is '1' 2 (as in, a character constant '1' followed by integer constant 2); you only get to use them as digit separators between digits.
[02:11:14] <sham1> Regex-based syntax highlighting is frankly not nice. At the minimum should be a proper lexer IMO
[02:11:30] <sham1> Yeah, the spec also gives an example of 0x'FFFF'FFFF as an error
[02:11:50] * pragma- discreetly hides candide's ,cc code where sham1 can't see it.
[02:11:53] <veltas> vim for ages was highlighting compound literals (especially used in a macro) with bracket errors
[02:11:58] <fizzie> I kind of would have preferred underscores. But, you know, C++.
[02:12:05] * sham1 squints at pragma
[02:12:11] * pragma- whistles innocently
[02:12:25] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[02:12:27] <sham1> Also, having #elidef and #elindef is nice
[02:12:45] <veltas> sham1: Most lexers are regexs
[02:12:52] <sham1> I know, and I say that's BS
[02:12:57] <veltas> Why
[02:13:02] <sham1> "Type generic functions for performing checked integer arithmetic:
[02:13:04] <sham1> Neat
[02:13:08] <nomagno> I think ifdef and ifndef were an error to support in the first place
[02:13:24] <nomagno> they make you want more shorthands
[02:13:25] <nomagno> and MORE
[02:13:26] <nomagno> and MORE
[02:13:27] <fizzie> (Go uses the underscore as the digit separator, I might be biased from there.)
[02:13:44] <sham1> veltas: because, as we see, using regexes will eventually break with the language evolving its lexical rules
[02:14:04] <veltas> Where? I haven't noticed
[02:14:16] <sham1> fizzie: rust does too. And I don't get why it couldn't be underscores because it couldn't be ambiguous with identifiers because you'd have a number character as the first thing anyhow
[02:14:43] <sham1> veltas: well we were just talking how highlighting might break with stuff like 0xFFFF'FFFF'FFFF'FFFF
[02:14:47] <fizzie> It can't be underscore because it's a quote in C++, and I don't feel like looking up why _that_ happened.
[02:15:10] <sham1> Yeah, I'm more thinking about that as well. Why didn't they go with the underscores
[02:15:22] <sham1> I sure hope that the Bjarne and friends had a good rationale
[02:15:31] <veltas> sham1: That's a bit like wondering if a lexer can handle + = and +=
[02:15:49] <sham1> Don't blame me, I wasn't the one that was complaining about it potentially breaking
[02:16:36] <sham1> Looking at the wikipedia list here is intriguing. _BitInt(N) and _UnsignedBitInt(N). C is catching up to Ada!
[02:16:45] <fizzie> Heh, cppreference's C and C++ digit separator examples have broken syntax highlighting. ;) https://en.cppreference.com/w/c/language/integer_constant
[02:17:20] <fizzie> Unless you redefine it as intentionally looking like that.
[02:17:53] <fizzie> I wonder if they picked only examples with even number of separators to make it break less badly.
[02:18:08] <sham1> Probably
[02:18:22] <veltas> I'll just write my own syntax highlighting for vim if I have to use code with these separators
[02:18:47] <pragma-> I don't get the point of those examples. They repeated the exact same 18446744073709550592 number but randomly moved the single quotes around.
[02:18:59] <veltas> In vim it's easy to write custom syntax highlighting
[02:19:06] <sham1> "Variably-modified types (but not VLAs on the stack) become a mandatory feature)" Yay, I can heap allocate VLAs again (are they VLAs if they're not on the stack? I don't know and frankly don't care)
[02:19:19] *** Quits: Narrat (~omnius@p200300df5f0aabe806ea56fffe2e7cdc.dip0.t-ipconnect.de) (Quit: They say a little knowledge is a dangerous thing, but it's not one half so bad as a lot of ignorance.)
[02:19:57] *** Joins: skapata (~Skapata@2804:14c:87b0:a6f9:9c74:da2:a180:c153)
[02:19:57] *** Quits: skapata (~Skapata@2804:14c:87b0:a6f9:9c74:da2:a180:c153) (Changing host)
[02:19:57] *** Joins: skapata (~Skapata@user/skapata)
[02:20:28] <sham1> Well, it's still only proposal, but it'd be nice
[02:20:38] <veltas> Bad idea really
[02:20:50] <fizzie> As for "why not underscores" (for C++), I'm wondering if it's because user-defined literals used an `_xxx` suffix, so there could've been some ambiguity there.
[02:20:56] <pragma-> We think you're probably too stupid to understand this simple sentence, "Optional single quotes (') may be inserted between the digits as a separator. They are ignored by the compiler.", so we're going to show you 3 different examples of how single quotes can be inserted anywhere!
[02:21:04] <sham1> Could have been
[02:21:54] <cryptonector> is there a way to typedef a function (not a function pointer), use it to make forward declarations pithy, and then still define the function?  if so, is that C99 or C11?
[02:22:23] <sham1> pithy?
[02:22:24] <fizzie> Well, would have been. In the sense that there'd be no way to distinguish `0x1_a` from an application of the `operator "" _a(unsigned long long)` or the hex literal 0x1a.
[02:22:44] <fizzie> cryptonector: Yes, if you don't mean "define the function _with_ the typedef".
[02:22:53] <cryptonector> like typdef int (f)(int); static f actual_f; int identity(int a) { return a; }
[02:23:14] <fizzie> Yes, except leave out the redundant ()s in the typedef.
[02:23:17] <cryptonector> fizzie: and... how do the function arguments get names?  they have to be in the typedef?
[02:23:31] <sham1> fizzie: of course this just shows why user literals aren't very great for non-homoiconic languages
[02:23:43] <pragma-> C++ is full of "most vexing parse" problems, isn't it?
[02:23:49] <pragma-> What a silly language.
[02:23:57] <fizzie> ,cc typedef int callback(int); static callback a, b; static int a(int x) { return x+1; } static int b(int x) { return 2*x; } printf("%d %d", a(5), b(5));
[02:24:00] <candide> fizzie: 6 10
[02:24:13] <sham1> pragma-: well ofc. Parsing it is undecidable
[02:24:14] <fizzie> You can't use the typedef for the _definition_ of the function, only the (forward) declaration.
[02:24:29] <cryptonector> nice
[02:24:33] <pragma-> sham1: at least it's merely undecided and not magic like Perl.
[02:24:37] <cryptonector> and is that C89, C99, C11...?
[02:24:42] <fizzie> The parameters are named only in the definition. (Well, you can name them in the `typedef` too if you like, but the names are just informational there.)
[02:24:55] <fizzie> I would think there's nothing in C89 preventing it.
[02:25:10] <sham1> That's another thing that will be nice in C23. Unnamed parameters. I no longer have to (void)-cast them away
[02:25:20] <fizzie> (But it does feel a little "modern" for some reason.)
[02:26:14] <pragma-> ML languages use _ as a placeholder.
[02:26:51] *** Joins: trafficjam (~trafficja@119.17.42.59)
[02:27:14] <trafficjam> how guys, what can i debug a segmentation fault?
[02:27:15] <sham1> ,cc int _ = 3; printf("%d", _); // Just checking
[02:27:18] <candide> sham1: 3
[02:27:21] <sham1> Of course
[02:27:40] <sham1> trafficjam: ASan, Valgrind, some cases even gdb or lldb
[02:27:51] <fizzie> ,cc char *$ = "big money"; puts($); // nonstandard
[02:27:53] <trafficjam> are they programs?
[02:27:53] <candide> fizzie: big money
[02:28:03] <pragma-> But where would you use this? `int func(int x, int _) { // 2nd parameter not used }` C doesn't really... I can't think of any situations where... what?
[02:28:14] <veltas> "even gdb" gdb is the first thing I would use
[02:28:16] <sham1> Valgrind, gdb and lldb are programs. ASan is a library
[02:28:34] <pragma-> Actually, nevermind.
[02:28:53] <trafficjam> is `string` a keyword?
[02:28:57] <veltas> On every segfault in gdb you get a backtrace, and a fresh cup of coffee
[02:28:58] <pragma-> no
[02:29:15] <fizzie> Go uses _ as the "ignore this" identifier too, and there's a steady stream of people coming in and asking about the meaning of a file-scope `var _ SomeInterface = (*SomeType)(nil)` they've seen somewhere.
[02:29:41] <veltas> Nothing beats JavaScript's "what is the $ operator?"
[02:29:47] <sham1> Yeah. The cup of coffee is important because for example in Fedora, we insist on downloading debug info for libraries
[02:30:22] <pragma-> I remember when that debuginfod thing first showed up. So annoying. All of a sudden candide wanted to download debug symbols for every ,cc
[02:31:10] <pragma-> I kept reading it as "Debug In Fod"
[02:31:21] <sham1> Yeah. If I want debufinfo, I'll download it myself damn it
[02:31:25] <pragma-> ikr
[02:32:01] <sham1> It's like, dnf already gives good commands for downloading the relevant packages from the debug repos
[02:32:32] *** Joins: xb0o2 (~xb0o2@user/xb0o2)
[02:32:34] <trafficjam> anyone mind explaining what this valgrind output means? https://dpaste.com/2SZADWZJ9
[02:32:41] *** Quits: tech_exorcist (txrcst@user/tech-exorcist/x-0447479) (Quit: Disconnecting)
[02:33:00] <trafficjam> `Access not within mapped region at address 0x0`
[02:33:04] <trafficjam> i think that's the cause
[02:33:12] <trafficjam> is the string too large?
[02:33:19] <sham1> > gets
[02:33:23] *** Quits: pizdets (~pizdets@183.182.115.85) (Ping timeout: 256 seconds)
[02:33:40] <veltas> trafficjam: address 0x0, sounds like accessing NULL
[02:33:53] <trafficjam> am i using `gets` incorrectly?
[02:33:57] *** Quits: inlight (~inlight@user/inlight) (Ping timeout: 256 seconds)
[02:33:57] *** Quits: Y4knotiS (~YaknotiS@cpc1-cmbg18-2-0-cust87.5-4.cable.virginm.net) (Ping timeout: 256 seconds)
[02:34:00] <sham1> Yes. By using it
[02:34:02] *** Joins: pizdets (~pizdets@183.182.110.89)
[02:34:05] <trafficjam> ah should it be scanf for a single character?
[02:34:19] <trafficjam> i think i'm using it for both the string and to get a single character
[02:34:22] <pragma-> There is no situation in which gets() should be used. It has been removed from C in C99...
[02:34:25] <pragma-> Or was that in C11?
[02:34:31] <EtherNet> trafficjam: gethcar()
[02:34:34] <sham1> IIRC c11
[02:34:42] <sham1> Err, C2011
[02:34:45] <EtherNet> getchar() I meant
[02:34:47] <sham1> I'm making this a thing now
[02:34:52] <trafficjam> yeah using scanf() works
[02:34:57] *** Quits: random-nick (~random-ni@87.116.167.125) (Ping timeout: 256 seconds)
[02:34:59] <sham1> Please no
[02:35:01] <trafficjam> EtherNet: i'll try that too, thanks
[02:35:12] <pragma-> trafficjam: if you compiled your program with warnings enabled, it would warn you against using gets(). If you compiled with debug info, the valgrind output would show you the line numbers and function calls for your program instead of just saying "main" and "a.out".
[02:35:40] <trafficjam> ah i just do 'cc <program.c>'
[02:35:46] <trafficjam> what' the issue with gets()?
[02:36:00] <pragma-> gets() cannot be told when to stop reading into your buffer.
[02:36:04] <EtherNet> for a single char just use getchar();
[02:36:17] <trafficjam> getchar > scanf?
[02:36:31] <sham1> Yes
[02:36:47] <oldlaptop> scanf() is unfortunately rather easy to get wrong
[02:37:11] <sham1> IMO pretty much every API for IO except for gets is better than scanf. If you want scanf, at least use sscanf and even then…
[02:37:16] <pragma-> Especially when mixed with other functions that deal with stdin.
[02:37:19] <oldlaptop> (not as easy as gets(), which is so easy to get wrong that it's absolutely impossible to get right)
[02:37:21] *** Quits: LucaTM (~LucaTM@user/lucatm) (Ping timeout: 256 seconds)
[02:37:34] <veltas> gets() is a good idea when you want to save space in your binary, or for performance. fgets() has more parameters so it's slower and has a larger call overhead
[02:37:42] <pragma-> what
[02:37:50] <sham1> gets is a great way to get pwnd
[02:37:52] <veltas> fgets is also 1 character longer so it compiles slower
[02:38:50] <nitrix> gets() was deprecated and has been removed from the Standard as of C11.
[02:39:11] <nitrix> You shouldn't be able to use it unless you have unorthodox compiler flags or an outdated standard.
[02:39:44] <pragma-> nitrix: gcc still happily compiles things that use gets(). It'll warn only if you tell it to.
[02:39:57] <pragma-> presumably for backwards compatability reasons
[02:40:00] * pragma- shakes his head.
[02:40:01] <nomagno> Why was gets deprecated?
[02:40:14] <nitrix> pragma-, It goes through -pedantic?
[02:40:15] <trafficjam> just to clarify, what function replaced gets()?
[02:40:25] *** Joins: Leonard (~Administr@114.55.127.80)
[02:40:35] <veltas> Joking aside gets() was deprecated in the 1970s, it's recommended against in K&R 1st ed IIRC
[02:40:36] <pragma-> nitrix: probably not. I don't know. gcc without any flags will compile it.
[02:40:42] <veltas> trafficjam: fgets
[02:40:43] <nomagno> trafficjam: fgets(str, sizeof(str), stdin)
[02:40:50] <trafficjam> got it, thanks
[02:41:09] <nitrix> pragma-, That I expected. I'm assuming -std=c11 -Wall -Wextra -pedantic to do the right thing though.
[02:41:27] <trafficjam> also, what flags should i use with gcc?
[02:41:30] <pragma-> Yes, me too. Hence why I said "if you tell it to".
[02:41:32] <trafficjam> (like default flags)
[02:41:33] <nomagno> gcc without any flags would compile a rock
[02:41:34] <veltas> nomagno: Because gets() doesn't take a buffer size so you can overflow 'any' buffer you use it with
[02:41:38] <trafficjam> lol
[02:41:41] *** Joins: dave0 (~davezero@069.d.003.ncl.iprimus.net.au)
[02:41:42] <pragma-> I'm still annoyed that "telling it to" is an opt-in thing.
[02:42:17] *** Quits: Leonardzzz (~Administr@114.55.127.80) (Ping timeout: 240 seconds)
[02:42:28] <dave0> maw
[02:42:53] <veltas> I still have to have too many "conversations" about GCC's default warnings with people, definitely agree
[02:43:01] *** Joins: Zambyte (~Zambyte@cpe-104-228-60-14.nycap.res.rr.com)
[02:43:16] <sham1> If I ever make a C compiler (as in have nothing else to do), I'll just enable the warnings by default and might just reject programs due to them offending my opinionated sensibilities
[02:43:19] <veltas> The very least add -Wall by default
[02:43:32] <nomagno> trafficjam: "2-g -pedantic -Wall -Wextra -Wshadow -Wpointer-arith -Wwrite-strings -Wfloat-equal -Wcast-align -Wformat=2 -Wcast-qual -Wbad-function-cast -Wstrict-overflow=4 -Wunreachable-code -Wundef -Wstrict-prototypes -fsanitize=address,undefined -Wno-discarded-qualifiers"
[02:43:40] <nomagno> (err, without the initial 2)
[02:43:43] <nomagno> This one's pretty safe
[02:43:46] <trafficjam> wait seriously?
[02:43:53] <sham1> Even just -
[02:43:59] <nomagno> I use this one, with a custom wrapper
[02:44:02] <oldlaptop> https://cvsweb.openbsd.org/src/lib/libc/stdio/Attic/gets.c
[02:44:15] <sham1> -Wall -Wextra -pedantic goes a long way
[02:44:23] <nomagno> ^
[02:44:34] <veltas> sham1: You can write -W instead of -Wextra
[02:44:40] <sham1> oldlaptop: based OpenBSD
[02:44:52] <veltas> -pedantic doesn't do anything without -std I thought?
[02:45:04] <sham1> Should default to C99 I think
[02:45:15] <veltas> GNU
[02:45:23] <sham1> Well C99 + GNUisms
[02:45:26] <nomagno> I have found when I started using a custom wrapper over GCC (sc99 in my case, short for 'safe POSIX C99'), my code started being much better structured
[02:45:28] <trafficjam> can i use fgets on a single character? I think it's causing a segfault
[02:45:44] <trafficjam> or should i use getchar() here?
[02:45:49] <nitrix> pragma-, Gosh you're right. Both GCC and Clang compiles the gets() anyway, even with C11 and pedantic.
[02:46:00] <veltas> trafficjam: Yes don't bother with fgets for a single char
[02:46:06] <nitrix> pragma-, It says it's an implicit definition, then the linker satisfies it happily.
[02:46:08] <trafficjam> so getchar()?
[02:46:13] <oldlaptop> trafficjam: Even a single-character string takes two chars to store.
[02:46:39] <nomagno> trafficjam: Yes, getchar is fine
[02:47:05] <nomagno> I would do char arr[2] = {0}; arr[0] = getchar();
[02:47:15] *** Quits: Leonard (~Administr@114.55.127.80) (Read error: Connection reset by peer)
[02:47:16] <veltas> nitrix: And I'm guessing people had to fight to get that implicit def warning
[02:47:20] *** Joins: Leonardzzz (~Administr@114.55.127.80)
[02:47:21] <nitrix> I guess it's forward-compatible for a compiler to keep gets(). The Standard doesn't explicitly say that the function has to become unavailable.
[02:47:56] <nomagno> The standard explicitly says deprecated DOESN'T mean it will be dropped from support any time soon
[02:47:58] <nomagno> I think
[02:48:27] <nitrix> We're past deprecated though. It was removed.
[02:48:27] <veltas> Removing gets()? Just more cancel culture bs
[02:49:19] <sham1> gets had it coming
[02:50:19] <oldlaptop> veltas: https://www.tcl.tk/man/tcl8.6/TclCmd/gets.html
[02:50:20] <candide> Title of oldlaptop's link: gets manual page - Tcl Built-In Commands
[02:50:35] <veltas> >gets() didn't kill himself
[02:50:49] <sham1> I frankly don't know what the team at Bell Labs thought when introducing gets
[02:50:57] *** Quits: WilliamLeara (~wdl@cpe-76-185-2-28.tx.res.rr.com) (Ping timeout: 240 seconds)
[02:51:09] <sham1> Anyone with eyes can tell that it'll be a trainwreck
[02:51:13] <veltas> They thought "here is an easy get-string function for non-production code"
[02:51:36] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.4)
[02:52:20] <nomagno> The solution is to hope the gets() implementation can't read more than size_t limit, and pass it a size_t limit size array
[02:52:28] <nomagno> :D
[02:52:45] <veltas> They didn't think "C is going to run literally everything and this function will get included in the standard library"
[02:53:00] <veltas> Well I was just thinking with correct usage of mmap() you can probably use gets() safely
[02:53:01] <sham1> Even for UNIX
[02:53:14] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[02:53:14] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[02:53:14] *** Joins: wroathe (~wroathe@user/wroathe)
[02:53:42] <nomagno> You could pipe the stream to a string truncator, and the string truncator to the program's stdin
[02:53:43] <nomagno> :D
[02:53:46] <nomagno> UNIX(R) solution
[02:54:18] <sham1> If gets were like fgets without the explicit file argument, like printf ~ fprintf or scanf ~ fscanf, it might've been actually useful
[02:54:55] <sham1> But since I'm dreaming, strtok also pisses me off
[02:54:55] <fizzie> If gets : fgets :: puts : fputs, it'd strip the newline while it's at it.
[02:55:26] <sham1> fizzie: that'd be nice
[02:55:33] <nomagno> sham1: Why does strtok piss you off?
[02:55:38] <nomagno> it's perfectly safe
[02:56:01] <sham1> It's not re-entrant
[02:56:05] <nomagno> Ah, yes
[02:56:15] <nomagno> you first call with the string, then with NULL
[02:56:17] <nomagno> that definitely sucks
[02:56:18] <sham1> Yah
[02:56:33] <dave0> gets is the sprintf of c
[02:56:35] *** Quits: blindguard (~blindguar@2a02:908:1864:c200::12) (Quit: Konversation terminated!)
[02:56:44] <nomagno> dave0: No it isn't.
[02:57:02] <nomagno> sprintf is the sprintf of c
[02:57:20] <sham1> I don't even know if the C2011 standard allows for the strtok state to be thread local. That'd make it better
[02:57:58] <sham1> At least then it could be used cross-thread
[02:58:20] <nitrix> sprintf is slightly less bad than gets, just because you can at least rely on invariants to know you wont go out of bounds.
[02:58:33] *** Joins: Satin (uid193953@user/Seten)
[02:58:36] *** Joins: ferdna (~ferdna@user/ferdna)
[02:58:43] <fizzie> "*Keep the sprintf of C.* The C89 Committee kept as a major goal to preserve the traditional /sprintf/ of C. There are many facets of the sprintf of C, but the essence is a community sentiment of the underlying principles upon which the C language is based. Some of the facets of the sprintf of C can be summarized in phrases like: Trust the programmer. --"
[02:58:49] <nitrix> And then snprintf is luxury. If you don't mind calling it twice.
[02:59:52] <sham1> Calling snprintf twice is a small price to pay for being able to figure out how many chars a formatted string will take
[03:00:18] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: ZzzZ)
[03:00:18] <dave0> twice? that's doing extra work and will slow down the benchmarks
[03:01:01] <nitrix> It's such a common thing, I would be surprised if compilers didn't have a special case for it.
[03:01:04] <sham1> What possible benchmark would use sprintf anyway. I'm actually curious and it's something I'd like a serious answer to, even if it was a joke
[03:01:30] *** Joins: walterwhip (~www@user/walterwhip)
[03:02:07] <veltas> Was just going to get the original gets() off GitHub but I've triggered an "abuse detection mechanism"
[03:02:11] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[03:02:43] <veltas> On my 15 year old laptop
[03:03:02] *** Quits: Fairy (~Fairy@2001:464a:4992:0:bdfd:8ef1:211a:77dc) (Ping timeout: 240 seconds)
[03:03:03] <sham1> Nice
[03:03:15] <sham1> The laptop knows
[03:03:44] *** Quits: Klinda (~superleag@user/klinda) (Quit: Konversation terminated!)
[03:04:05] <trafficjam> does `sizeof(array) / array` give the length of the array?
[03:04:23] <nitrix> sizeof arr / sizeof arr[0]
[03:04:24] <trafficjam> (assuming non-initialized elements)
[03:04:32] <trafficjam> ah thanks
[03:04:44] <nitrix> You want the total array size, divided by the size of a single element.
[03:04:58] <sham1> I think you mean sizeof(are)/sizeof(*are)
[03:05:53] <nitrix> trafficjam, And it only works assuming it's properly typed as an array and if you make a macro, you'll want `arr` to be wrapped with parentheses.
[03:06:01] <veltas> trafficjam: It's okay if it's not initialized
[03:06:15] *** Quits: EdFletcher (~PKD@user/edfletcher) (Ping timeout: 256 seconds)
[03:06:41] *** Quits: Akuli (~Akuli@213.216.209.195) (Quit: Akuli)
[03:06:42] <veltas> `sizeof arr[0]` does not evaluate `arr[0]`
[03:06:46] <sham1> Yeah. sizeof evaluates at compile time (unless VLA and even then it can figure out the proper formulae)
[03:06:56] <sham1> It doesn't need to look at the contents
[03:07:13] <nitrix> Wrong wording there. sizeof _doesn't_ evaluate, unless it's a VLA.
[03:07:25] <veltas> fucc vla
[03:07:37] <sham1> nitrix: good clarification
[03:08:06] <sham1> Imagine if C had alloca as a standard thinf
[03:08:44] <sham1> That's be wild and crazy and exploit-tastic
[03:08:55] <nitrix> Also the compile/run-time part of things is actually not specified as far as I know. Seems to be up to the compiler to decide how it goes about it.
[03:09:57] *** Quits: lightningwright (~lightning@user/lightningwright) (Quit: Leaving)
[03:10:02] <sham1> Well the compiler would be frankly foolish not to constant fold and all that. But again, good clarification
[03:12:41] *** Joins: Leonard (~Administr@114.55.127.80)
[03:14:51] <trafficjam> is the correct way of altering the value of an array in a function to pass the array as a parameter to the function, and alter it there? (rather than returning a new array from the function)
[03:15:11] *** Quits: Leonardzzz (~Administr@114.55.127.80) (Ping timeout: 256 seconds)
[03:17:35] *** Quits: nicode (~nic@69-165-153-180.dsl.teksavvy.com) (Ping timeout: 256 seconds)
[03:17:46] <nitrix> trafficjam, You cannot pass arrays are values, so you also cannot return them either.
[03:17:57] <trafficjam> ah ok, thanks
[03:17:58] <nitrix> trafficjam, Your only option is a pointer into the array.
[03:18:23] <nitrix> *as values
[03:19:49] <nitrix> trafficjam, For convenience, the name of the array automatically gives you a pointer to its first element when its evaluated. A function call evaluates all the arguments before they become parameters.
[03:20:06] *** Quits: dsrt^ (~dsrt@207.5.21.20) (Read error: Connection reset by peer)
[03:20:24] *** Quits: xb0o2 (~xb0o2@user/xb0o2) (Quit: Client closed)
[03:22:02] <nitrix> trafficjam, int x[10]; `x` becomes `&x[0]` in the context of `f(x);`, which is why you'd see such function accept either `int *` or `int []`. The latter is trying to communicate that its an array, but it's an incomplete type, the size information is lost.
[03:22:05] *** Joins: vicfred (~vicfred@user/vicfred)
[03:23:54] <trafficjam> ah neat, thanks, so i can always juts pass the name of the array and it will be accepted as a pointer
[03:24:09] *** Quits: brad_mssw (~bhouse@2601:344:4100:b490:7c83:f849:e013:af79) (Quit: Leaving)
[03:24:55] <nitrix> It's more idiomatic for the function to mutate the array and not bother trying to be pure with accepting/returning things. It's do-able though. When the array is very small, you can wrap it into a struct, then it gets properly copied in and out.
[03:24:58] *** Quits: nyah (~nyah@2a02:c7f:6ea4:ec00:55b7:77f:4ccb:c03c) (Remote host closed the connection)
[03:25:01] <nitrix> trafficjam, yep.
[03:25:41] *** Quits: Leonard (~Administr@114.55.127.80) (Remote host closed the connection)
[03:25:49] *** Joins: nyah (~nyah@94.6.71.219)
[03:26:05] *** Joins: Leonard (~Administr@114.55.127.80)
[03:26:54] <johnjaye> accordin to clang.llvm.org the default mode of clang is gnu c17 mode
[03:27:14] <nitrix> Yeah, C17 with specific GNU extensions on top.
[03:27:27] <johnjaye> i like how it says it treats 'inline' as a mild suggestion from the programmer
[03:27:31] *** Joins: Danishman (~Danishman@2-104-144-110-cable.dk.customer.tdc.net)
[03:27:37] <johnjaye> clang will decide what is and isn't outputted to machine code
[03:27:54] <nitrix> Always been the case for the last decades, ever since we've had optimizing compilers.
[03:31:28] *** Joins: rgrinberg (~textual@177.246.218.93)
[03:32:22] *** Quits: Leonard (~Administr@114.55.127.80) (Read error: Connection reset by peer)
[03:32:59] *** Joins: Leonard (~Administr@114.55.127.80)
[03:33:19] *** Quits: mrig (~mrig@user/mrig) (Quit: WeeChat 3.0)
[03:35:33] *** Quits: SGautam (uid286066@id-286066.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[03:36:12] *** Joins: mixfix41 (~homefame@user/mixfix41)
[03:39:17] *** Quits: freep (~freepppp@188.4.150.192.dsl.dyn.forthnet.gr) (Read error: Connection reset by peer)
[03:39:34] *** Joins: kuber (~kuber@97-126-25-4.tukw.qwest.net)
[03:39:46] *** Quits: Leonard (~Administr@114.55.127.80) (Read error: Connection reset by peer)
[03:39:48] *** Joins: Leonardzzz (~Administr@114.55.127.80)
[03:39:49] *** Quits: wenxin (~wenxin@user/vim-fans/x-3284168) (Ping timeout: 240 seconds)
[03:42:57] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.4)
[03:43:37] *** Quits: odoood (~odoood@2601:c8:c000:c4e0::3) (Ping timeout: 240 seconds)
[03:48:43] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:ccc4:2031:23da:e328)
[03:53:07] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: ZzzZ)
[03:56:22] <trafficjam> hey guys, could someone explain to me why my `char vowels[]` array has a length of 36 and not 5? https://dpaste.org/CTch
[03:56:44] <trafficjam> am I using the wrong type or something?
[03:57:00] <caze> Why do you think it has a length of 36?
[03:57:25] <trafficjam> doesn't strlen() give the number of characters?
[03:57:43] <caze> Yes, for a string.
[03:57:48] <caze> You don't have a string.
[03:57:50] <trafficjam> isn't a string an array of chars though?
[03:58:21] <caze> No.
[03:58:24] <caze> ,string
[03:58:24] <candide> A "string" is a contiguous sequence of characters terminated by and including the first null character; http://www.iso-9899.info/wiki/String
[03:59:03] <trafficjam> ah, i need a null character at the end for it to become a string
[03:59:06] <trafficjam> thanks caze
[03:59:56] *** Joins: chenqisu1 (~bhca7d@183.217.201.21)
[04:02:14] *** Joins: cuppajoe (~joe@ip70-171-93-122.no.no.cox.net)
[04:03:21] *** Quits: Wulf (~Wulf@user/wulf) (Ping timeout: 256 seconds)
[04:04:43] *** Quits: gh34 (~textual@cpe-184-58-181-106.wi.res.rr.com) (Quit: Textual IRC Client: www.textualapp.com)
[04:05:00] *** Joins: Wulf (~Wulf@user/wulf)
[04:05:05] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-d550-b607-3a0a-ff7b.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[04:05:41] *** Joins: Leonard (~Administr@114.55.127.80)
[04:07:48] *** Quits: BCMM (~BCMM@user/bcmm) (Quit: Konversation terminated!)
[04:08:20] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-d550-b607-3a0a-ff7b.res6.spectrum.com)
[04:08:27] *** Quits: Leonardzzz (~Administr@114.55.127.80) (Ping timeout: 256 seconds)
[04:09:23] *** Quits: cuppajoe (~joe@ip70-171-93-122.no.no.cox.net) (Quit: WeeChat 3.4)
[04:09:34] *** Quits: kuber (~kuber@97-126-25-4.tukw.qwest.net) (Quit: leaving)
[04:09:41] <trafficjam> hmm why am i getting a length of 8 for all my different char arrays? https://dpaste.org/EJaC
[04:10:18] *** Joins: Leonardzzz (~Administr@114.55.127.80)
[04:11:47] <trafficjam> (sizeof arr) / (sizeof *arr) should give the length of an array i thought
[04:13:17] *** Quits: Leonard (~Administr@114.55.127.80) (Ping timeout: 240 seconds)
[04:13:33] *** Quits: bebyx (~Thunderbi@user/bebyx) (Ping timeout: 256 seconds)
[04:16:00] <trafficjam> ah it's returning the value of the first element of the `targets` array
[04:17:18] *** Quits: TonyStone (~TonyStone@cpe-74-76-51-197.nycap.res.rr.com) (Remote host closed the connection)
[04:17:38] <trafficjam> so should i convert all my char arrays to strings then?
[04:18:10] <trafficjam> e..g. char vowels[] = {'a', 'e', ...} becomes {'a', 'e', ..., '\0'} and then use strlen()?
[04:18:27] *** Joins: Leonard (~Administr@114.55.127.80)
[04:19:24] <trafficjam> yeah that worked
[04:19:48] <trafficjam> was wondering what the issue was, took a while to figure that out
[04:20:13] <trafficjam> so i guess in the future i should convert all char arrays to strings
[04:20:56] <packet_lozenge> the way you're creating char arrays in your second paste is better than in the first for sure
[04:21:08] <packet_lozenge> in the first, i don't even think they were null terminated
[04:21:29] *** Quits: Leonardzzz (~Administr@114.55.127.80) (Ping timeout: 256 seconds)
[04:22:09] <packet_lozenge> if you had used strlen, you probably would've gotten wacky results
[04:22:42] <caze> trafficjam: char vowels[] = "aeiou";
[04:24:15] <trafficjam> packet_lozenge: yeah that was causing all the problems
[04:24:21] <omegatron> trafficjam:  perhaps  https://bpa.st/KZMQ  this can help to clarify
[04:24:26] *** Joins: pucara (~i@181.91.29.65)
[04:25:35] *** Joins: TonyStone (~TonyStone@2603-7080-8607-c36a-9cdb-69bc-753b-1e50.res6.spectrum.com)
[04:25:57] *** Quits: Burgundy (~yomon@5-12-10-45.residential.rdsnet.ro) (Ping timeout: 240 seconds)
[04:26:53] <trafficjam> omegatron: makes sense, so `char`'s in C are 1 byte in size?
[04:27:26] <omegatron> usually .. unless you have some exotic hardware .. say, some russian ternary computers
[04:27:47] <caze> char is always 1 byte by definition.
[04:28:01] <caze> A byte might not be 8 bits though.
[04:28:27] <trafficjam> that's... confusing
[04:28:34] <trafficjam> i thought 1 byte is by definition 8 bits
[04:28:40] <caze> Nope.
[04:29:01] <caze> https://en.wikipedia.org/wiki/Byte
[04:29:13] *** Quits: ouestbillie (~gallup@192-222-138-215.qc.cable.ebox.net) (Remote host closed the connection)
[04:29:25] <omegatron> for practical uses it is - but in theory ..
[04:29:54] <trafficjam> so a more precise definition is that it's the smallest addressable unit of memory?
[04:30:36] *** Joins: Macuser (~Macuser@2600:1003:b46d:81be:7813:297a:3b7d:daf2)
[04:31:59] *** Joins: kitsunenokenja (~kitsunech@68.91.220.96)
[04:32:06] <omegatron> you might consider to forget 'char' at all and instead define and use datatypes like  'UInt8', 'UInt16', ... and 'SInt8', 'SInt16', ...  for unsigned and signed integer datatypes, like Apple does:   https://opensource.apple.com/source/CarbonHeaders/CarbonHeaders-18.1/MacTypes.h.auto.html
[04:32:54] <omegatron> that way you only have to worry about it only once (when defining your header file) and then use your datatype designations
[04:34:03] <omegatron> I mean, char, short, int, long, word, etc.  are crap after all - someone had to know how many bits they are, it's not deductable from the designation ... with UInt8, etc. you can
[04:34:11] *** Quits: rgrinberg (~textual@177.246.218.93) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[04:34:47] *** Quits: Leonard (~Administr@114.55.127.80) (Read error: Connection reset by peer)
[04:34:48] *** Joins: Leonardzzz (~Administr@114.55.127.80)
[04:35:36] <dave0> posix specifies 8 bit bytes
[04:36:31] <dave0> posix gives you some more guarantees than c, which might make coding a little bit easier
[04:37:05] <kit> posix my beloved
[04:37:24] <dave0> <3 posix
[04:38:35] <trafficjam> do you guys know what exactly happens on the hardware level when i set a character to some value (say 'a' = 97);
[04:39:00] <omegatron> usually a memory cell is assigned that value
[04:39:08] <omegatron> or a register
[04:39:16] <omegatron> or part of a register
[04:39:45] <omegatron> but not every assignment in your code may result in any hardware change at all, due to compilter optimizations
[04:39:48] *** Quits: dudek (~dudek@185.150.236.156) (Quit: Leaving)
[04:40:15] <dave0> trafficjam: check out godbolt.org it shows you the assembly from your c code
[04:40:56] <dave0> it'll probably look like    mov a,97
[04:41:06] <trafficjam> oh neat, thanks
[04:41:15] <dave0> "move" the number 97 to the memory location a
[04:41:18] *** Joins: Leonard (~Administr@114.55.127.80)
[04:42:01] *** Joins: nicode (~nic@2607:f2c0:9387:9c00:854b:558b:d90b:a242)
[04:42:41] <trafficjam> what's the actual physical mechanism that stores data? is it a magnetic field on an atom / small component or something?
[04:43:10] <caze> You're guaranteed that char is at least 8 bits, short is at least 16 bits, int is at least 16 bits, long is at least 32 bits, and long long is at least 64 bits.
[04:43:18] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-d550-b607-3a0a-ff7b.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[04:43:21] <trafficjam> or a group of transistors?
[04:43:29] *** Quits: Richard_Cavell (uid165693@id-165693.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[04:43:37] *** Quits: Leonardzzz (~Administr@114.55.127.80) (Ping timeout: 240 seconds)
[04:43:40] *** aqua is now known as kish`
[04:43:57] <trafficjam> caze: i thought a char is by definition 1 byte, and 1 byte doesn't necessarily need to be 8 bits? (i.e. it could be less)
[04:44:01] <caze> So figure out how many bits you need, and choose a type where the minimum is larger or equal.
[04:44:11] *** Joins: powerLien (~powerLien@2a0d:5600:6:34::4d)
[04:44:20] <caze> trafficjam: That's why I said "at least" for everything.
[04:44:56] <caze> trafficjam: You could have 1 byte be 64 bits, and char, short, int, long, long long all be 64 bits as well.
[04:45:20] <caze> (and all be 1 byte)
[04:45:27] <trafficjam> caze: from my understanding of what the other guys were saying, 1 byte can be *less* than 8 bits
[04:45:33] <caze> trafficjam: No.
[04:45:37] <trafficjam> or did i misinterpret that?
[04:45:46] <pragma-> dave0: candide can too!
[04:45:58] <dave0> pragma-: no way!
[04:46:00] <pragma-> ,cc void f(void) { int a = 97; } gdb("disas f");
[04:46:02] <dave0> pragma-: example?
[04:46:02] <candide> pragma-:  Dump of assembler code for function f: 0x00000000004029aa <+0>:   push   %rbp 0x00000000004029ab <+1>:   mov    %rsp,%rbp 0x00000000004029ae <+4>:   movl   $0x61,-0x4(%rbp) 0x00000000004029b5 <+11>:   nop 0x00000000004029b6 <+12>:   pop    %rbp 0x00000000004029b7 <+13>:   ret     End of assembler dump.
[04:46:15] <pragma-> ,cc -O0 void f(void) { int a = 97; } gdb("disas f");
[04:46:17] <candide> pragma-:  Dump of assembler code for function f: 0x00000000004017e5 <+0>:   push   %rbp 0x00000000004017e6 <+1>:   mov    %rsp,%rbp 0x00000000004017e9 <+4>:   movl   $0x61,-0x4(%rbp) 0x00000000004017f0 <+11>:   nop 0x00000000004017f1 <+12>:   pop    %rbp 0x00000000004017f2 <+13>:   ret     End of assembler dump.
[04:46:31] <dave0> haha that's crazy!
[04:46:39] <trafficjam> caze: if the smallest unit of memory is less than 8 bits, why couldn't a byte be smaller than 8 bits?
[04:46:59] *** Quits: kaph (~kaph@net-2-38-107-19.cust.vodafonedsl.it) (Ping timeout: 256 seconds)
[04:47:04] <caze> trafficjam: The smallest *addressable* unit of memory can't be smaller than 8 bits.
[04:47:24] *** Joins: complexnumber (~brett@194-223-26-191.tpgi.com.au)
[04:47:35] <dave0> ,cc int foo(int a, int b, int c) { return (a & b) | (~a & c); } gdb("disas foo");
[04:47:39] <candide> dave0:  Dump of assembler code for function foo: 0x00000000004029aa <+0>:   push   %rbp 0x00000000004029ab <+1>:   mov    %rsp,%rbp 0x00000000004029ae <+4>:   mov    %edi,-0x4(%rbp) 0x00000000004029b1 <+7>:   mov    %esi,-0x8(%rbp) 0x00000000004029b4 <+10>:   mov    %edx,-0xc(%rbp) 0x00000000004029b7 <+13>:   mov    -0x4(%rbp),%eax 0x00000000004029ba <+16>:   and    -0x8(%rbp),%eax 0x00000000004029bd <+19... <truncated; https://0x0.st/ozEY.txt>
[04:48:01] <trafficjam> caze:  pretty sure there were 5 and 6-bit bytes in the early days
[04:48:15] <omegatron> https://en.wikipedia.org/wiki/4-bit_computing
[04:48:22] <trafficjam> IBM 704 for example
[04:48:26] *** Quits: eastbillie (~gallup@192-222-138-215.qc.cable.ebox.net) (Remote host closed the connection)
[04:48:28] <dave0> pragma-: nice :-)
[04:48:34] <caze> trafficjam: That may be true, but a C implementation is required to have a byte that is at least 8 bits.
[04:49:00] *** Joins: kaph (~kaph@net-2-38-107-19.cust.vodafonedsl.it)
[04:49:12] <omegatron> but why do you care? do you plan to program for < 8-bit hardware? C wouldn't help you with that ..
[04:49:34] <trafficjam> just curiosity
[04:50:17] *** Quits: boB_K7IQ (~boB_K7IQ@152.44.147.180) (Ping timeout: 240 seconds)
[04:50:19] <caze> If you had a system with smaller than 8 bit bytes, whoever made a C compiler for it would have to do some work "under the hood" to put multiple bytes together to make it appear as if there were at least 8 bit bytes.
[04:50:29] <dave0> you could pack six 6-bit chars into one 36-bit word
[04:50:39] <omegatron> if you wanted, you could make a 4-Bit datatype and API, which is internally actually a plain unsigned char (therefore at least 8 bit), which makes sure, that values always stay between 0 and 15 ...  -_-
[04:51:06] <trafficjam> caze: ah ok so for C specifically the standard requires a minimum of 8 bits per byte
[04:51:13] <caze> Of course that would be slower than if it just used its native size.
[04:51:33] <caze> trafficjam: Yes, we're talking about C here in #c.
[04:51:59] <trafficjam> caze: well we were talking about computers in general before that
[04:52:24] <trafficjam> the whole discussion started because i was told that 1 byte does not necessarily equal 8 bits
[04:52:42] <trafficjam> cool to know though
[04:52:46] <caze> Yes, that is true. But when I said <caze> You're guaranteed that char is at least 8 bits, short is at least 16 bits, int is at least 16 bits, long is at least 32 bits, and long long is at least 64 bits.
[04:52:47] <fizzie> I did some ,sh + echo + gcc -x c - -o - -S + sed tricks the other day to get compiler-generated assembly in a moderately pretty form out of candide.
[04:52:54] <candide> That's blatantly fascinating, f​izzie.
[04:52:57] <caze> Did that not make you think that was in the context of C?
[04:53:14] <fizzie> Because neither gdb's disassembly nor GCC's regular generated code is particularly IRC-friendly.
[04:53:15] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[04:53:21] *** Quits: cryptonector (~nico@24.28.108.183) (Ping timeout: 256 seconds)
[04:53:49] <trafficjam> caze: my mind was still thinking on a more general level, but i get your point
[04:53:53] <pragma-> You could slap -paste in front of the ,cc command
[04:53:59] <pragma-> ,cc -paste int foo(int a, int b, int c) { return (a & b) | (~a & c); } gdb("disas foo");
[04:54:02] <candide> pragma-: https://0x0.st/ozEl.txt
[04:54:11] <fizzie> Yeah, but then whoever you're demonstrating to would need to click a link.
[04:54:15] <dave0> oh that's perfect
[04:54:16] <pragma-> At least then it won't spew it into the channel.
[04:54:18] *** Joins: Leonardzzz (~Administr@114.55.127.80)
[04:54:27] <fizzie> ,sh echo 'int f(int p[static 1]) { if (!p) return -1; return *p; }' | clang -x c - -o - -S -O2 -fno-verbose-asm | sed -e '/^[ \t]*[.#]/d'  # yeah, I wanted something small enough to do on-channel though
[04:54:28] <candide> fizzie: f: 	movl	(%rdi), %eax 	retq
[04:54:34] <fizzie> See, that's almost humane.
[04:55:10] *** Joins: scoobydoo_ (~scooby@user/scoobydoo)
[04:55:15] <pragma-> I suppose I could slap that into a ,disas command
[04:56:23] *** Quits: AbleBacon (~AbleBacon@user/AbleBacon) (Read error: Connection reset by peer)
[04:57:11] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Ping timeout: 256 seconds)
[04:57:21] *** scoobydoo_ is now known as scoobydoo
[04:57:53] *** Quits: Leonard (~Administr@114.55.127.80) (Ping timeout: 256 seconds)
[04:58:29] *** Joins: kurahaupo1 (~martin@115.69.27.211)
[05:00:43] *** Quits: walterwhip (~www@user/walterwhip) (Quit: Textual IRC Client: www.textualapp.com)
[05:00:47] *** Joins: Fairy (~Fairy@2001:464a:4992:0:bdfd:8ef1:211a:77dc)
[05:00:57] *** Quits: steve__ (~steve@ool-182c2b80.dyn.optonline.net) (Ping timeout: 240 seconds)
[05:02:08] *** Quits: complexnumber (~brett@194-223-26-191.tpgi.com.au) (Remote host closed the connection)
[05:02:32] *** Quits: kish` (~aqua@user/aqua) (Remote host closed the connection)
[05:02:57] *** Joins: kish` (~aqua@user/aqua)
[05:04:08] *** Quits: Leonardzzz (~Administr@114.55.127.80) (Remote host closed the connection)
[05:04:28] *** Joins: nuxil (~nuxil@141.195.51.213)
[05:04:30] *** Joins: Leonardzzz (~Administr@114.55.127.80)
[05:05:24] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Quit: Ex-Chat)
[05:06:59] *** Quits: acerbic (~acerbic@cs-xdata-50-86-50-90.cspire.com) (Read error: Connection reset by peer)
[05:07:07] *** Joins: odoood (~odoood@2601:c8:c000:c4e0:ba27:5388:26bd:1fb0)
[05:08:05] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[05:08:53] *** Joins: gco (~gco@2601:647:4c80:2424:846c:c05d:a7a1:c8e7)
[05:12:18] *** Joins: pnbeast (~pnbeast@2601:140:4280:6ce0::1)
[05:13:45] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Ping timeout: 256 seconds)
[05:14:10] *** Joins: Leonard (~Administr@114.55.127.80)
[05:14:11] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[05:14:58] *** Joins: danielcamiel (~danielcam@user/danielcamiel)
[05:15:07] *** Quits: danielcamiel (~danielcam@user/danielcamiel) (Remote host closed the connection)
[05:15:31] *** Joins: danielcamiel (~danielcam@user/danielcamiel)
[05:15:40] *** Joins: vysn (~vysn@user/vysn)
[05:15:58] *** Joins: cuppajoe (~joe@ip70-171-93-122.no.no.cox.net)
[05:16:27] *** Quits: Leonardzzz (~Administr@114.55.127.80) (Ping timeout: 256 seconds)
[05:20:36] *** Quits: cuppajoe (~joe@ip70-171-93-122.no.no.cox.net) (Client Quit)
[05:23:17] *** Parts: nuxil (~nuxil@141.195.51.213) (Leaving)
[05:23:48] *** Joins: acerbic (~acerbic@cs-xdata-50-86-50-90.cspire.com)
[05:25:59] *** Quits: RAMIII (~RAMIII@2601:8c:801:c600:5efd:7795:cdf9:ecb2) (Ping timeout: 268 seconds)
[05:26:16] *** Quits: rindolf (~shlomif@inkscape/dev/shlomif) (Read error: Connection reset by peer)
[05:26:21] *** Joins: RAMIII (~RAMIII@2601:8c:801:c600::fe1a)
[05:26:36] *** Joins: rindolf (~shlomif@inkscape/dev/shlomif)
[05:29:22] *** Joins: Leonardzzz (~Administr@114.55.127.80)
[05:29:56] *** Quits: acerbic (~acerbic@cs-xdata-50-86-50-90.cspire.com) (Read error: Connection reset by peer)
[05:32:27] *** Quits: Leonard (~Administr@114.55.127.80) (Ping timeout: 256 seconds)
[05:35:17] *** Quits: odoood (~odoood@2601:c8:c000:c4e0:ba27:5388:26bd:1fb0) (Ping timeout: 240 seconds)
[05:36:42] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[05:40:59] *** Joins: u0_a391 (~u0_a391@2603-6010-a141-6fa3-950d-0150-5311-7e6b.res6.spectrum.com)
[05:41:01] *** Quits: n8chan (~nate@108-233-125-227.lightspeed.sntcca.sbcglobal.net) (Ping timeout: 240 seconds)
[05:43:24] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[05:43:44] *** Joins: n8chan (~nate@108-233-125-227.lightspeed.sntcca.sbcglobal.net)
[05:43:53] *** u0_a391 is now known as Kit__
[05:43:57] *** Quits: kitsunenokenja (~kitsunech@68.91.220.96) (Ping timeout: 240 seconds)
[05:43:57] *** Kit__ is now known as Kit_ten
[05:44:41] *** Quits: kit (~u0_a391@2600:380:a423:8c4a:f33e:17db:7090:510e) (Ping timeout: 250 seconds)
[05:44:44] *** Quits: malloy (~jimery@116.30.220.175) (Ping timeout: 250 seconds)
[05:44:47] *** Kit_ten is now known as kit
[05:46:01] *** Joins: soapsudsxx (~soapsudsx@141.193.188.151)
[05:46:47] *** Joins: malloy (~jimery@116.30.220.175)
[05:46:56] *** Joins: acerbic (~acerbic@cs-xdata-50-86-50-90.cspire.com)
[05:50:08] *** Joins: rgrinberg (~textual@177.246.216.115)
[05:52:08] *** Quits: jimboj1m (~jimboj1m@96.234.171.7) (Quit: Leaving)
[05:53:57] *** Quits: Rounin (~david@84.212.130.215) (Ping timeout: 240 seconds)
[05:56:32] *** Joins: kitsunenokenja (~kitsunech@68.91.220.96)
[05:56:57] *** Quits: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net) (Remote host closed the connection)
[05:57:13] *** Joins: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net)
[05:57:37] *** Quits: nyah (~nyah@94.6.71.219) (Ping timeout: 240 seconds)
[05:59:22] <kit> somewhat off topic but i wonder if its possible to apply machine learning to compilers
[06:04:58] <trafficjam> can someone when scanf needs `&` infront of its second argument for the following code?
[06:05:00] <trafficjam> struct person *personPtr, person1;
[06:05:00] <trafficjam> personPtr = &person1;
[06:05:01] <trafficjam> scanf("%d", &personPtr->age);
[06:05:07] <trafficjam> *explain why
[06:05:34] <trafficjam> doesn't personPtr already point to an address?
[06:05:44] <trafficjam> so why do i need to use &?
[06:06:07] <kit> what if you do personPtr.age
[06:06:36] <kit> wait
[06:06:37] <kit> no
[06:06:37] <trafficjam> well that would make me ask how i can even access .age from a pointer
[06:06:43] <kit> im dumb
[06:06:45] <kit> ya
[06:07:14] <trafficjam> personPointer is a pointer to the person struct, so it have a value of 0x<whatever>
[06:07:16] <kit> you see, when you use -> it uses the pointer to the struct to get the elememt
[06:07:42] <trafficjam> ah so using -> will dereference the pointer?
[06:07:44] <kit> however to get the element's pointer is a different story
[06:07:46] <kit> ya
[06:07:49] *** Joins: Leonard (~Administr@114.55.127.80)
[06:08:00] <trafficjam> cool, didn't know that
[06:08:09] <kit> i mean
[06:08:18] <kit> at least thats what i think
[06:08:22] <kit> dont quote me
[06:08:32] <kit> im just your everyday dumbass so who knows
[06:08:58] <trafficjam> that makes sense, also makes sense why you would then need the & infront of personPtr->age
[06:09:43] <fizzie> `a->b` is the same as `(*a).b`, yes.
[06:09:44] <dave0> trafficjam: &personPtr->age   is shorthand for  &((*personPtr).age)   it dereferences personPtr first
[06:10:25] *** Quits: Leonardzzz (~Administr@114.55.127.80) (Ping timeout: 256 seconds)
[06:10:37] *** Joins: odoood (~odoood@2601:c8:c000:c4e0::3)
[06:10:37] *** Joins: mugen (~mugen@gateway/tor-sasl/mugen)
[06:12:05] <trafficjam> thanks
[06:12:57] *** Quits: mug3n_ (~mugen@gateway/tor-sasl/mugen) (Ping timeout: 276 seconds)
[06:13:05] *** Joins: EdFletcher (~PKD@user/edfletcher)
[06:17:52] *** Joins: Leonardzzz (~Administr@114.55.127.80)
[06:21:03] *** Quits: Leonard (~Administr@114.55.127.80) (Ping timeout: 256 seconds)
[06:21:43] <trafficjam> what's the right function to use to get number input, is scanf ok?
[06:21:47] *** Joins: cuppajoe (~joe@ip70-171-93-122.no.no.cox.net)
[06:21:57] <trafficjam> or can fgets be used?
[06:23:05] <fizzie> fgets followed by something to parse the string as a number (strtol, sscanf) can be easier to reason about than trying to use scanf directly on interactive input.
[06:23:15] <fizzie> The latter is quite easy to get stuck on a non-number, for example.
[06:23:36] <fizzie> http://c-faq.com/stdio/scanfprobs.html has a summary of various issues.
[06:23:36] *** Quits: Zambyte (~Zambyte@cpe-104-228-60-14.nycap.res.rr.com) (Read error: Connection reset by peer)
[06:24:34] *** Joins: Zambyte (~Zambyte@cpe-104-228-60-14.nycap.res.rr.com)
[06:25:10] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Remote host closed the connection)
[06:25:48] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-d550-b607-3a0a-ff7b.res6.spectrum.com)
[06:27:16] *** Joins: Leonard (~Administr@114.55.127.80)
[06:27:16] <dave0> trafficjam: if you're asking humans to type a number, fgets+sscanf is good to use ... if you are reading numbers from a formatted file, fscanf is good
[06:28:21] <dave0> trafficjam: generally when you ask the user to type something, it's on a line-by-line basis, so it makes sense to read a line at a time
[06:28:42] <fizzie> What if you're asking a robot to type a number? On the one hand, they're more logical than people, but on the other, it's still the real world, maybe they can make a typo.
[06:29:33] *** Quits: Leonardzzz (~Administr@114.55.127.80) (Ping timeout: 256 seconds)
[06:30:30] *** Joins: lunix00 (~lunix00@2804:14c:6321:900d:4d91:c1e4:f48:338)
[06:30:35] *** Quits: nicko (~iClass@221.236.54.23) (Read error: Connection reset by peer)
[06:31:57] *** Quits: cuppajoe (~joe@ip70-171-93-122.no.no.cox.net) (Ping timeout: 256 seconds)
[06:32:05] *** Joins: nicko (~iClass@221.236.54.23)
[06:33:02] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:ccc4:2031:23da:e328) (Quit: Quit)
[06:33:31] *** Quits: banc (banc@gateway/vpn/airvpn/banc) (Ping timeout: 256 seconds)
[06:35:01] *** Quits: slidercrank (~slidercra@user/slidercrank) (Ping timeout: 240 seconds)
[06:35:22] *** Quits: Macuser (~Macuser@2600:1003:b46d:81be:7813:297a:3b7d:daf2) (Quit: Textual IRC Client: www.textualapp.com)
[06:36:54] *** Joins: Leonardzzz (~Administr@114.55.127.80)
[06:40:27] *** Quits: Leonard (~Administr@114.55.127.80) (Ping timeout: 256 seconds)
[06:42:17] *** Quits: Danishman (~Danishman@2-104-144-110-cable.dk.customer.tdc.net) (Quit: Leaving)
[06:43:29] *** Joins: frost (~frost@user/frost)
[06:43:43] *** Quits: geranim0 (~geranim0@modemcable242.171-178-173.mc.videotron.ca) (Ping timeout: 256 seconds)
[06:47:05] *** Quits: slayne (~sysadmin@modemcable136.173-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[06:47:57] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-d550-b607-3a0a-ff7b.res6.spectrum.com) (Ping timeout: 240 seconds)
[06:50:29] *** Quits: mugen (~mugen@gateway/tor-sasl/mugen) (Remote host closed the connection)
[06:50:51] *** Joins: mugen (~mugen@gateway/tor-sasl/mugen)
[06:53:13] <trafficjam> what does the `(struct person*)` from `(struct person*) malloc(...)` mean?
[06:53:57] <wroathe> It means it's amateur hour wherever you found that
[06:54:22] *** Joins: banc (banc@gateway/vpn/airvpn/banc)
[06:54:29] <trafficjam> is it lol?
[06:54:34] <wroathe> ,malloc
[06:54:34] <candide> There is no need to cast the result of library functions that return void *; it makes your code hard to read, adds no value, and can hide a bug if you don't have a valid prototype in scope. See http://c-faq.com/malloc/mallocnocast.html
[06:55:02] <wroathe> That bit you highlighted is a cast, and a redundant one at that
[06:55:19] <fizzie> It might also mean you're reading (bad) C++ instead of C.
[06:55:40] <fizzie> I guess that's not inconsistent with what you said though.
[06:56:44] <trafficjam> does putting `ptr = ...` in front make it ok?
[06:57:03] <fizzie> The cast is still unnecessary (and arguably harmful).
[06:57:15] <trafficjam> so never used castes?
[06:57:18] <trafficjam> *use
[06:57:19] *** Quits: danielcamiel (~danielcam@user/danielcamiel) (Ping timeout: 256 seconds)
[06:57:28] <fizzie> Not for the conversion of `void *` to some other object pointer type.
[06:57:42] <trafficjam> good to know
[06:58:18] <dave0> there's always a cast :-(
[06:58:34] <fizzie> There aren't that many "reasonable" uses for a cast, though there are some. Like, you might cast something to a larger unsigned integer type if you're planning to shift it around.
[06:59:24] <wroathe> Sometimes casts are necessary
[06:59:36] <wroathe> Like when you're making a movie
[06:59:37] <trafficjam> this is the full code btw -> https://dpaste.org/REZj
[06:59:41] <wroathe> You'd want casts then
[06:59:44] *** Joins: sonny (~sonny@bras-base-london1483w-grc-32-70-52-175-166.dsl.bell.ca)
[06:59:50] <wroathe> Or potentially a single cast.
[07:00:06] <fizzie> `ptr = malloc(n * sizeof *ptr);` would be the conventional replacement for that.
[07:00:14] <dave0> wroathe: animated
[07:00:34] <wroathe> dave0: A _silent_ animated movie?
[07:00:37] <trafficjam> so basically i should never use casting when using malloc (until i'm an expert and really understand what im doing)
[07:00:54] <wroathe> trafficjam: even then. The experts don't cast the result of malloc
[07:00:55] <dave0> wroathe: ooh
[07:01:13] <fizzie> (Replacing the `sizeof (struct person)` with `sizeof *ptr` is another possible thing worth considering, though not everyone's going to agree.)
[07:01:26] <wroathe> I agree
[07:01:46] <dave0> i don't agree that not everyone's going to agree
[07:02:10] <wroathe> I agree with that assessment of everyone's agreeableness
[07:02:20] *** Joins: Leonard (~Administr@114.55.127.80)
[07:02:36] <fizzie> Other things of note in that example would be adding a check that the `scanf` on line 15 returned 1 (otherwise the value in `n` is nonsense), and possibly using `ptr[i].name` over `(ptr+i)->name` though that's more a style thing.
[07:03:16] <dave0> wroathe: so we're in agreement
[07:03:23] <wroathe> dave0: I agree
[07:03:49] *** Joins: fe23 (~fe23@2409:8a34:464:4990:9530:1dc0:e4b9:5446)
[07:04:17] *** Quits: Leonardzzz (~Administr@114.55.127.80) (Ping timeout: 240 seconds)
[07:05:58] <nitrix> As the self-proclaimed absolute authority on everything and all maters, I support the motion.
[07:05:58] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:ccc4:2031:23da:e328)
[07:06:22] <wroathe> I second the motion
[07:06:43] <dave0> agreed
[07:07:08] <wroathe> fizzie: You're a consensus builder
[07:08:03] <fizzie> Yes, claiming that not everyone will agree always tends to get everyone to agree.
[07:08:15] <wroathe> Agreed
[07:09:13] *** Quits: Maxdamantus (~Maxdamant@user/maxdamantus) (Ping timeout: 256 seconds)
[07:10:53] *** Quits: FluffyMask (~masque@user/fluffymask) (Quit: WeeChat 3.4)
[07:11:04] *** Joins: Leonardzzz (~Administr@114.55.127.80)
[07:11:08] *** Quits: Leonard (~Administr@114.55.127.80) (Read error: Connection reset by peer)
[07:14:13] <nitrix> You joke but this is how I get my RFCs to go my way at work. I try really hard to incorporate everyone's ideas until they start realizing that it's getting out of hands, get involved, tinkering, until they eventually arrive at the same compromise I did.
[07:15:03] *** Quits: constxo (~brad@142.134.38.68) (Quit: WeeChat 2.8)
[07:17:40] <nitrix> For some reason, when you propose something right at the start, people grow attached to their own ideas by defending them and they confuse that with having evaluated the alternatives, so they aren't as receptive.
[07:17:52] *** Joins: Maxdamantus (~Maxdamant@user/maxdamantus)
[07:19:37] <trafficjam> what are header files for?
[07:20:23] <nitrix> Sharing declarations, so they can be included by various different translation units to know about the definitions they don't have.
[07:21:32] <trafficjam> hmm so what would a simple example of that look like?
[07:21:51] <Maxdamantus> If you mean "why do they exist as things I have to write", that's probably just a matter of the original C implementations being practical to implement.
[07:22:25] <Maxdamantus> more modern languages just allow you to refer to things defined in other modules/files, without having to forward-declare them. Everything in C needs to be forward-declared.
[07:22:40] <pony> why do we forward declare functions?
[07:22:49] <trafficjam> ah ok, so it's just an older-type implementation of imports?
[07:23:25] <nitrix> trafficjam, Aka, for the translation unit `main.c` to use the function named `player_move` defined in translation unit `player.c`. By #include-ing `player.h` in `main.c`, the declaration `void player_move(struct player *p);` makes the function known to the unit and is now callable.
[07:23:26] <Maxdamantus> Because requiring the programmer to forward declare makes compilers easier to write.
[07:23:39] <pony> ok
[07:24:17] *** Quits: gco (~gco@2601:647:4c80:2424:846c:c05d:a7a1:c8e7) (Quit: ZZZzzz…)
[07:24:40] <nitrix> trafficjam, You can also control which functions are public/private this way. The public functions have their declarations in the `.h` file, the private functions are marked `static` and don't have that declaration in the `.h` file.
[07:24:41] <Maxdamantus> The compiler only needs to be able to handle a single "translation unit" at a time, and within that translation unit, compilation can be done linearly, as the code is read.
[07:25:05] <fizzie> In C89, having declarations for functions before calling them was (mostly) optional, with some obvious limitations if you don't (like not being able to check at compile time whether the call's arguments are of the correct number and type).
[07:25:56] <trafficjam> ah awesome, thanks for the explanation
[07:26:12] <nitrix> trafficjam, You can try not having .h files and you'll quickly find it annoying to copy the declaration for the function everywhere you want to call it.
[07:26:51] <nitrix> trafficjam, Remember that translation units don't know about each other's definitions, that happens in the very last translation phase.
[07:26:52] <fizzie> (A function call for an identifier that hadn't been declared was treated as an implicit declaration of that function with unspecified parameters and a return type of `int`.)
[07:31:13] *** Joins: stblaha (~stblaha@user/stblaha)
[07:32:12] <wroathe> You guys might get a kick out of this. I'm the only developer as of right now on this legacy project I got tricked into working with ASP.NET. The idea is that eventually developers will join the project, and they're going to have a coniption when they find that most of the code I've written so far is just a bunch of static functions, and that there's no gang of four design patterns to be found
[07:33:00] <wroathe> It's all good code, but I just can't will myself to define classes just to add a single method
[07:34:18] <wroathe> But sometimes when you're on these sorts of projects you need to write code that others will feel comfortable with, and so I might need to reconcile that if their developers come onboard and expect AbstractAdapterFactorySingletons
[07:34:43] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[07:34:43] <wroathe> Anyway, C# is lame
[07:34:44] <nitrix> I'd probably love to inherit a project like that. Instead of prying the business logic from the abstractions you get right to the meat of it.
[07:34:49] <pony> are real world OOP projects really as absurd as that?
[07:34:52] <pony> I'm kind of worried
[07:35:00] <wroathe> pony: Yes
[07:35:12] <nitrix> Then I'd probably rewrite it thinking I know better.
[07:35:29] *** Quits: Moonspell (moon@194.87.139.59) (Ping timeout: 268 seconds)
[07:35:35] <pony> in my country Java is used a lot I think
[07:35:49] <pony> probably every country
[07:36:02] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.4)
[07:36:07] <wroathe> nitrix: Yeah, I've just been treating C# as a verbose semi-functional language. They've got support for higher order functions and first class functions (as long as they're defined within methods)
[07:36:32] *** Joins: supakeen (~user@python/site-packages/supakeen)
[07:36:38] <nitrix> wroathe, Like, you can tell when you see a main like this and you're up for a ride: https://github.com/nitrix/senko/blob/master/main.go
[07:36:48] <pragma-> Java takes OOP to a bit of an extreme by forcing you to put every thing in a class. But there are other languages that let you mix imperative code with OOP code.
[07:36:49] <pony> defined within methods
[07:36:50] <pony> wtf
[07:36:59] <nitrix> wroathe, "Oh cute, a modular codebase... fuck me."
[07:37:00] <pony> pragma-: yeah
[07:37:11] <wroathe> nitrix: Haha, yes.
[07:37:32] <wroathe> nitrix: Especially when those modules are behind tricky dynamic loader nonsense
[07:38:03] <nitrix> wroathe, And the modules uses an event-based system: https://github.com/nitrix/senko/blob/master/modules/core/core.go
[07:38:05] <wroathe> JS is really bad when it comes to that
[07:38:14] <nitrix> wroathe, Completely overengineered.
[07:38:33] <wroathe> nitrix: Looks like gold star enterprise solutioning to me
[07:38:46] <nitrix> wroathe, func (c *Core) say(gateway *app.Gateway, guildId app.GuildID, what string) error { return gateway.Say(guildId, what) }
[07:39:07] <nitrix> wroathe, say() { gateway.Say() }, we love those.
[07:39:13] <wroathe> That's not so bad
[07:39:39] <wroathe> Could be worse.
[07:40:11] <nitrix> wroathe, I'm just mocking myself because I recently rewrote my discord bot and realized how I didn't put the abstractions at the right places.
[07:40:43] <wroathe> nitrix: Ah. Want me to help? Here: Gawrsh nitrix, you're bad at this.
[07:40:53] * wroathe points finger mockingly at nitrix 
[07:40:53] <nitrix> wroathe, I abstracted the Discord part into a "Gateway" so you could have different platforms, like IRC, XMPP, and then split the functionalities into modules. It's overdone.
[07:40:54] <pony> is Go OOPy?
[07:41:11] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Remote host closed the connection)
[07:41:14] <wroathe> OOP is a spectrum
[07:42:07] <wroathe> pony: The part that most critics of OOP languages object to is the golden hammer of defining everything as a class and modeling every abstraction through inheritance
[07:42:21] <nitrix> wroathe, It's not enterprise Java with design patterns; factories, singletons, adapters and crap, but I still got it wrong by immediately reaching for abstractions I didn't need.
[07:42:24] <wroathe> pony: You can write code like that with Go, but Go doesn't have first class support for classes
[07:43:00] <pony> ahh
[07:43:01] *** Joins: Leonard (~Administr@114.55.127.80)
[07:43:15] <trafficjam> guys if I have some int `int x;` and i want to convert it to an array (say at runtime), can i do `ptr = malloc(sizeof(x))`?
[07:43:24] <wroathe> nitrix: I remember when I first discovered the "mediator" pattern. I built an entire application based around the idea of modules that hook into application-level lifecycle events
[07:43:28] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[07:43:31] <trafficjam> sorry it should be `int x = <some_int>`
[07:43:33] <wroathe> nitrix: As you can imagine, that was not the golden hammer I was looking for
[07:43:34] <nitrix> trafficjam, An array of what? A single int? The digits? The bytes?
[07:43:42] <trafficjam> an array of integers
[07:43:57] <nitrix> trafficjam, What are the integers corresponding to?
[07:44:09] <trafficjam> so `int x = 153` would be `int arr[] = {1, 5, 3};`
[07:44:17] *** Quits: Leonardzzz (~Administr@114.55.127.80) (Ping timeout: 240 seconds)
[07:44:19] <nitrix> So the base 10 digits.
[07:44:23] <trafficjam> yeah
[07:44:37] *** Quits: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br) (Ping timeout: 240 seconds)
[07:45:44] <fizzie> Probably *easiest* done by going via a string. Or you could at least use snprintf to count the digits to know how many ints to reserve space for. (It's not `sizeof x`.)
[07:45:45] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[07:45:50] <nitrix> Find out how many digits there are with floor(log10(number)) + 1, then allocate an array that is the count * sizeof (int).
[07:46:25] <trafficjam> ah floor(log10(<number>))+1 is how to find the number of digits?
[07:47:05] <nitrix> Then have a loop that repeatedly divides by 10 and places the remainder at the right position in the array (so you need to keep track of an index increment too).
[07:47:36] <nitrix> And yeah, strings would probably be easier.
[07:48:04] *** Joins: cryptonector (~nico@24.28.108.183)
[07:49:14] <wroathe> nitrix: Easily the most overengineered thing I've ever worked on was an application using CQRS and Event Sourcing
[07:49:58] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Remote host closed the connection)
[07:50:37] *** Quits: odoood (~odoood@2601:c8:c000:c4e0::3) (Ping timeout: 240 seconds)
[07:50:43] *** Quits: rgrinberg (~textual@177.246.216.115) (Ping timeout: 256 seconds)
[07:50:56] *** Quits: powerLien (~powerLien@2a0d:5600:6:34::4d) (Quit: Client closed)
[07:53:03] <nitrix> ,cc int n = 123; int length = floor(log10(n)) + 1; int digits[length]; for (int i = 0; i < n; i++) { digits[i] = n % 10; n /= 10; } printf("%d %d %d", digits[0], digits[1], digits[2]);
[07:53:05] <candide> nitrix: 3 2 4205126
[07:53:19] <nitrix> Oh, I did something wrong.
[07:53:26] <fizzie> A "problem" with floor(log10(n))+1 is the limited precision of floating-point types. Though in practice I imagine it's fine for `int` + `double`.
[07:53:34] <fizzie> ,cc for (long i = 0, n = 9; i < 17; i++, n = 10*n+9) { int a = snprintf(0, 0, "%ld", n); int b = floor(log10(n))+1; printf("%d/%d ", a, b); }
[07:53:36] <candide> fizzie: 1/1 2/2 3/3 4/4 5/5 6/6 7/7 8/8 9/9 10/10 11/11 12/12 13/13 14/14 15/16 16/17 17/18
[07:53:40] *** Joins: teut (~teut@2401:4900:1c68:ebe9:f019:e976:f8bd:9ca2)
[07:53:55] <fizzie> Yeah, they agree up to 14 digits.
[07:54:36] <nitrix> Do we have other options? log10 is always double I think. floor could be a truncate with an int conversion though.
[07:54:55] <dave0> a less accurate but integer only size is:   sizeof(int) * CHAR_BIT / 3 + 3
[07:55:56] <dave0> +1 to round up, +1 for \0 terminate, +1 for a minus sign
[07:56:08] <fizzie> That's an upper bound for any int, though, not the length for a specific one. (Which can be perfectly okay, of course.)
[07:57:35] <nitrix> trafficjam, How do you convert -153. int arr[] = {-1, 5, 3} ?
[07:58:08] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[07:58:14] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Read error: Connection reset by peer)
[07:58:30] <nitrix> That has the smell of a made up exercise and something you'd never really do in practice.
[07:58:56] <wroathe> Sounds like leetcode stuff to me
[07:59:11] <wroathe> Those exercise sites really are a pain
[07:59:18] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[08:00:00] <fizzie> Could be an AoC style thing as well. Decimal digits of a number do crop up quite often in it.
[08:00:01] *** Joins: hinata (~hinata@2409:4042:d1c:87d7:40bc:6e36:751e:ba7b)
[08:00:17] <Maxdamantus> My job is mostly writing Java and my preference is typically to just put related classes/interfaces/methods within a single class (in a single .java file)
[08:00:48] *** Quits: pucara (~i@181.91.29.65) (Quit: Lost terminal)
[08:00:53] *** Joins: missogra (~missogra@dynamic-077-003-011-126.77.3.pool.telefonica.de)
[08:00:54] <Maxdamantus> So there might be various inner classes that can see the same private static methods.
[08:02:39] <Maxdamantus> Ocassionally there'll be some `BlahUtil` class that just has static methods and is not meant to be instatiated (might have a throwing constructor, depending on how defensive we're feeling that day)
[08:03:45] *** Quits: kitsunenokenja (~kitsunech@68.91.220.96) (Ping timeout: 256 seconds)
[08:04:17] <bparker> >My job is mostly writing Java
[08:04:19] <bparker> I'm sorry
[08:05:00] <Maxdamantus> Maybe I'm biased, but I think Java is probably underrated, at least compared to other mainstream languages.
[08:05:30] <Maxdamantus> There's lots of bad Java libraries/code, but it's generally possible to write nice Java code.
[08:07:57] *** Quits: mixfix41 (~homefame@user/mixfix41) (Ping timeout: 240 seconds)
[08:08:33] *** Joins: Leonardzzz (~Administr@114.55.127.80)
[08:09:23] *** Joins: mixfix41 (~homefame@user/mixfix41)
[08:09:24] *** Joins: missogra_ (~missogra@dynamic-077-003-056-003.77.3.pool.telefonica.de)
[08:09:26] *** Joins: fstd (~fstd@xdsl-87-78-21-185.nc.de)
[08:09:27] <trafficjam> if i define a function in a header file, and in main where i write the function i use functions from math.h, do i have to include math.h in the header file too?
[08:09:45] <Maxdamantus> Maybe Go with type parameters could be a decent language to replace Java. Everything else that is somewhat mainstream seems less preferable to me.
[08:10:57] *** Quits: Leonard (~Administr@114.55.127.80) (Ping timeout: 240 seconds)
[08:11:09] <Maxdamantus> trafficjam: you're not generally meant to define functions in header files.
[08:11:31] <trafficjam> not define but declare sorry
[08:11:33] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[08:12:11] <Maxdamantus> trafficjam: a function declaration doesn't refer to another function, so it shouldn't be necessary to import another header file for the sake of a function declaration.
[08:12:22] *** Joins: spidermonkey54 (uid527699@id-527699.uxbridge.irccloud.com)
[08:12:28] <Maxdamantus> trafficjam: a function declaration might refer to types that are declared in another header file though.
[08:12:41] *** Quits: fstd_ (~fstd@xdsl-78-35-82-60.nc.de) (Ping timeout: 256 seconds)
[08:13:15] *** Quits: missogra (~missogra@dynamic-077-003-011-126.77.3.pool.telefonica.de) (Ping timeout: 256 seconds)
[08:14:06] <Maxdamantus> trafficjam: if your header file (A) refers to types declared in another header file (B), you either need to include the other header file (B) in your header file (A), or make sure the other header file (B) is included before each use of your header file (A).
[08:16:10] *** Quits: missogra_ (~missogra@dynamic-077-003-056-003.77.3.pool.telefonica.de) (Remote host closed the connection)
[08:18:04] <trafficjam> Maxdamantus: cool, thanks man
[08:19:08] *** Quits: Thedarkb (~Thedarkb@cpc84095-pool16-2-0-cust190.15-1.cable.virginm.net) (Remote host closed the connection)
[08:19:27] *** Joins: Thedarkb (~Thedarkb@cpc84095-pool16-2-0-cust190.15-1.cable.virginm.net)
[08:21:53] *** Quits: soapsudsxx (~soapsudsx@141.193.188.151) (Remote host closed the connection)
[08:22:18] *** Joins: Leonard (~Administr@114.55.127.80)
[08:22:55] *** Quits: teut (~teut@2401:4900:1c68:ebe9:f019:e976:f8bd:9ca2) (Quit: Client closed)
[08:24:43] *** Quits: Leonardzzz (~Administr@114.55.127.80) (Ping timeout: 256 seconds)
[08:24:55] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Read error: Connection reset by peer)
[08:27:51] *** Parts: sonny (~sonny@bras-base-london1483w-grc-32-70-52-175-166.dsl.bell.ca) (Closing Window)
[08:28:49] <apotheon> Consdiering the popularity of Java in corporate circles, I have a very difficult time understanding the notion that it's "underrated".
[08:29:04] *** Joins: rgrinberg (~textual@177.246.216.115)
[08:29:33] <apotheon> I've been saying for a few years now that Go should really be aimed at trying to replace Java, though.
[08:30:13] <Maxdamantus> I feel like it's been losing popularity for a while, but I don't think there's anything that would be good at replacing it.
[08:30:14] <apotheon> Maxdamantus: Do you make a habit of suggesting that one of the most popular programming languages in the world is underrated?
[08:30:33] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[08:30:34] <apotheon> Where do you think it is irreplaceable?
[08:30:35] <fizzie> https://0x0.st/oz6d.txt <- an attempt at a particularly "C-ish" digit-puller-outer.
[08:30:46] <fizzie> Had an occasion to peek at Go's strconv.FormatInt implementation the other day, and it does a cute trick where it has the 200-byte constant string "00010203...979899" from which it returns directly (as substrings) all values between 0..99, and for anything bigger it does two digits at a time with % 100, / 100, copying the digits from that same string.
[08:30:52] <trafficjam> how do i pass an enum value to a function?
[08:30:58] <apotheon> What's a digit-puller-outer?
[08:31:09] <trafficjam> does `myFunc(enum CONST)` work?
[08:31:16] <Maxdamantus> I don't think it's irreplacable, I just don't think the other mainstream languages are a suitable replacement, at least maybe until Go with generics.
[08:31:29] <trafficjam> or `myFunc(enum const)`?
[08:31:46] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[08:31:46] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[08:31:46] *** Joins: wroathe (~wroathe@user/wroathe)
[08:31:46] <apotheon> Where do you think it is irreplaceable by other languages other than perhaps Go?
[08:31:57] <fizzie> apotheon: A whimsical name for extracting the decimal digits of an integer value in some form, in this case as an array of `int`s.
[08:32:42] <fizzie> trafficjam: Assuming you have an `enum color { red, green, blue };`, you define the function as `void myFunc(enum color c) { ... }`, and call it as `myFunc(blue);`.
[08:33:40] <fizzie> (Though notably the type of `blue` is `int`, not `enum color`. But C's not particularly strongly typed when it comes to enum types, and converting an int to any enum type is implicitly allowed.)
[08:33:46] <trafficjam> fizzie: i have `typedef enum { ... } custom_name`
[08:33:59] <trafficjam> and inside { A = 1, B = 2, ... }
[08:34:15] <fizzie> In that case, `void myFunc(custom_name c) { ... }` and called as `myFunc(A)`.
[08:34:23] <trafficjam> great, thanks
[08:35:47] <fizzie> Hmm, yet another case of gdb ptype not matching reality. I should add that to the list.
[08:35:49] <fizzie> ,cc enum color { red, green, blue }; ptype(blue); __typeof__(blue) x; ptype(x);
[08:35:51] <candide> fizzie:  blue = enum color {red, green, blue}   x = int
[08:36:10] <fizzie> It pretends the enumeration constant has the type of the enumeration, when it actually doesn't.
[08:36:40] <apotheon> fizzie: Without having looked at it, I'm guessing you might have just copied the ones place digit into an array, then divided by ten, until the original integer was 0.
[08:36:50] <Maxdamantus> apotheon: for general-purpose programming, I expect runtime safety (no undefined behaviour), a fairly sound type system involving type parameters (if a function has a type like `<T> T foo(T v)`, and I decide to call it with `T = String`, it should return an `int`), and the ability to write in various paradigms (eg, using objects with state and/or dynamic dispatch, as well as being able to write static
[08:36:56] <Maxdamantus> functions without too much hassle)
[08:36:58] <apotheon> I'm frankly too tired right now to read code, but maybe I can reason about it a little.
[08:37:03] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[08:37:50] <apotheon> Maxdamantus: sounds like Pascal
[08:38:00] <apotheon> well, Object Pascal
[08:38:06] <Maxdamantus> Pascal is not currently a mainstream language.
[08:38:13] <apotheon> okay
[08:38:26] <fizzie> That's the general shape of it, yes. The (arguably) "C-ish" bits are a cute loop condition for making 0 not produce the empty string.
[08:38:40] <Maxdamantus> and actually, does Pascal have parametric types?
[08:38:51] *** Joins: Leonardzzz (~Administr@114.55.127.80)
[08:38:59] <Maxdamantus> I haven't really looked into it, but I wouldn't've thought it would.
[08:39:03] <apotheon> Maxdamantus: I don't recall, frankly.  It has been twenty years since I touched Pascal.
[08:39:07] <apotheon> give or take
[08:39:47] <fizzie> (For the record, that's the fourth ptype incorrect-result I've written down: https://0x0.st/oz6n.txt )
[08:40:50] <Maxdamantus> er, in my list of expectations I wrote `int` instead of `String` (was actually initially writing `int` but wanted to change my example to avoid the `int` vs `Integer` issue that exists in Java)
[08:41:19] *** Quits: pulse (~pulse@user/pulse) (Quit: Join a gamedev community @ https://indiedevs.net/)
[08:41:46] <poprocks> if you want the whole OOP with a lot of features thing, C++ works
[08:42:17] *** Quits: Leonard (~Administr@114.55.127.80) (Ping timeout: 256 seconds)
[08:42:46] <Maxdamantus> Well, C++ doesn't have runtime safety.
[08:43:07] <Maxdamantus> and I should have included "garbage collection" in that list.
[08:43:32] <Maxdamantus> since programming without GC should be kind of special imo.
[08:44:42] *** Joins: gco (~gco@2601:647:4c80:2424:846c:c05d:a7a1:c8e7)
[08:46:13] <apotheon> You can have GC with C++.
[08:47:10] *** Quits: malloy (~jimery@116.30.220.175) (Ping timeout: 250 seconds)
[08:48:14] <Maxdamantus> C++ also doesn't have type parameters afaik.e
[08:48:19] <apotheon> I'm curious about what you mean by runtime safety for Java.  As far as I'm aware, it's quite easy to write runtime-unsafe code in Java, but I'm not a Java expert.
[08:48:40] <Maxdamantus> (it has templates which is kind of gives you unsound type parameters)
[08:48:59] <apotheon> hmm
[08:49:12] *** Joins: malloy (~jimery@116.30.220.175)
[08:49:19] <apotheon> I'm not familiar with how C++ templates provide *unsound* type parameters.
[08:49:19] <Maxdamantus> You can't really write unsafe Java code, unless you use the `Unsafe` class.
[08:50:07] <apotheon> Are you excluding null safety from runtime safety for Java?
[08:50:19] *** Joins: idiotus_prime (~idiot@c-71-236-47-182.hsd1.tn.comcast.net)
[08:50:26] <Maxdamantus> Not sure precise syntax, but you can write something like this: template <T> T foo(T v){ return 4; }
[08:51:02] <idiotus_prime> i have this problem when my program will output to stdout when I run it, but when run in a pipe it will not output anything
[08:51:21] <idiotus_prime> my program uses fprintf(stdout, ...) for output, and fprintf(stderr, ...) for error
[08:51:39] <idiotus_prime> i'm not sure why this is, could someone enlighten me as to why this is?
[08:51:54] <Maxdamantus> it only checks that each instantiation of `foo` is valid, so it's considered a user error when someone tries to instantiate `foo<string>`
[08:52:02] <apotheon> Maxdamantus: Do you get an exception at runtime with something like foo.equals() if foo is null?
[08:52:30] <Maxdamantus> apotheon: yes, Java will by definition throw a `NullPointerException` when you do that.
[08:52:42] <Maxdamantus> apotheon: so that behaviour is defined.
[08:53:00] <apotheon> Is that not included in your definition of runtime safety?
[08:54:19] *** Joins: gproto23 (~gproto23@user/gproto23)
[08:54:33] <Maxdamantus> apotheon: dereferencing null in Java is safe. It will by definition throw a `NullPointerException`.
[08:54:52] <Maxdamantus> apotheon: in C or C++ it is unsafe. The compiler assumes you will never do that.
[08:55:43] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Remote host closed the connection)
[08:55:58] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[08:56:06] <Maxdamantus> Maybe you're thinking of whether or not null dereferences should be checked, which is another issue.
[08:57:26] *** Joins: Leonard (~Administr@114.55.127.80)
[08:57:47] <Maxdamantus> If I designed a new language, I wouldn't have null values, so you might instead have explicit `Option` types in places where you want a placeholder value, but when comparing against other mainstream languages, basically all of them have (unchecked) null dereferencing.
[08:57:49] *** Quits: jsmolic (~quassel@gentoo/developer/jsmolic) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[08:59:43] *** Quits: Leonardzzz (~Administr@114.55.127.80) (Ping timeout: 256 seconds)
[09:00:22] *** Joins: Darkcoal (~user@2001:16a2:77fa:2800:afa:9cc0:ad10:784d)
[09:01:21] <Maxdamantus> (panicing is also an acceptable behaviour for deferencing `null`, where the program will by definition crash, instead of continuing in an undefined state as happens in C/C++)
[09:02:24] <Maxdamantus> (in Go I think it's described as a panic, but I think it's actually fairly similar to Java, since I think you can catch a panic(
[09:03:21] *** Quits: stblaha (~stblaha@user/stblaha) (Quit: leaving)
[09:03:25] *** Quits: Fairy (~Fairy@2001:464a:4992:0:bdfd:8ef1:211a:77dc) (Ping timeout: 240 seconds)
[09:04:04] *** Joins: jsmolic (~quassel@gentoo/developer/jsmolic)
[09:04:45] <trafficjam> how do i return an enum array in a function?
[09:04:47] *** Quits: echoSMILE (uid504326@user/echosmile) (Quit: Connection closed for inactivity)
[09:04:49] *** Quits: zsoltiv_ (~zsoltiv@fibhost-67-12-35.fibernet.hu) (Ping timeout: 256 seconds)
[09:05:06] <trafficjam> e.g. i want to return `typedef enum { RED, GREEN, BLUE } colors;`
[09:05:41] <apotheon> Maxdamantus: Okay, so catchable exceptions are okay in your sense of what a language needs in this case.  Okay.
[09:05:58] <trafficjam> => `myFunc() { const colors c[]; return c };`
[09:06:12] <idiotus_prime> trafficjam, so an array of enums?
[09:06:16] *** Joins: Atque (~Atque@user/atque)
[09:06:24] <Maxdamantus> trafficjam: for that particular use case you'd probably just define the enum members using exclusive bits (1, 2, 4), then you can combine them with a bitwise or (`|`)
[09:06:25] <dave0> trafficjam: put `static` on it
[09:06:46] <trafficjam> dave0: before the function?
[09:06:52] <Maxdamantus> trafficjam: but in general you can't return arrays in C. You can return a struct with an array in it though.
[09:07:16] <Maxdamantus> apotheon: no. As I said it doesn't need to be catchable. It just needs to not result in undefined behaviour.
[09:07:27] *** Quits: Zambyte (~Zambyte@cpe-104-228-60-14.nycap.res.rr.com) (Quit: leaving)
[09:08:22] <dave0> trafficjam: typedef enum { RED, GREEN, BLUE } colours; const colours *myFunc() { static const colours c[] = { BLUE, GREEN, RED }; return c; }
[09:08:44] *** Quits: Leonard (~Administr@114.55.127.80) (Read error: Connection reset by peer)
[09:08:47] <trafficjam> ah ok, let me give that a try
[09:08:51] *** Joins: Leonardzzz (~Administr@114.55.127.80)
[09:08:57] <Maxdamantus> apotheon: in C the behaviour of the program is undefined after deferencing null (or accessing an object out of bounds, etc), which ultimately means that the compiler is allowed to assume that you will never do that.
[09:09:13] *** Quits: idiotus_prime (~idiot@c-71-236-47-182.hsd1.tn.comcast.net) (Quit: WeeChat 3.0)
[09:09:13] *** Quits: Darkcoal (~user@2001:16a2:77fa:2800:afa:9cc0:ad10:784d) (Ping timeout: 268 seconds)
[09:09:31] *** Joins: Darkcoal (~user@2001:16a2:77fa:2800:afa:9cc0:ad10:784d)
[09:09:49] <Maxdamantus> apotheon: but the compiler doesn't have to add checks that you don't break those assumptions, so it's not guaranteeing that your program will execute in a safe manner.
[09:10:17] <apotheon> Maxdamantus: Does Common Lisp count as a mainstream language for you?
[09:11:34] <Maxdamantus> apotheon: I wouldn't think of that as mainstream, no, but CL doesn't match any of my criteria other than runtime safety.
[09:11:54] <trafficjam> dave0: worked perfectly, would you mind explaining what exactly is going on with that code? like what does putting `const colours *myFunc()` do, and also `static const colors c[]`
[09:12:09] <Maxdamantus> actually, it might support multiple paradigms, not sure.
[09:12:19] *** Quits: overrider (~overrider@user/overrider) (Ping timeout: 256 seconds)
[09:12:27] <Maxdamantus> but it certainly doesn't meet the type safety requirements.
[09:12:44] <dave0> trafficjam: c[] is an array, so when you return c; it's converted to a pointer... same thing as when you pass an array to a function you really pass a pointer
[09:12:48] <apotheon> CL definitely is multiparadigm, and has CLOS, an object system.
[09:13:31] <dave0> trafficjam: because you declared c[] as const, it's a good idea to have the pointer that you return be const too
[09:14:29] <apotheon> CL is also is evidently type safe unless you tell it to be less safe.
[09:14:34] <Maxdamantus> I consider type safety a higher priority than the multiparadigm part. I'd rather write Haskell than JavaScript (or probably CL, though I'm less familiar with it).
[09:14:37] <apotheon> s/also is/also/
[09:14:43] <apotheon> damn, my brain is tired tonight
[09:14:46] <dave0> trafficjam: lastly, static makes the compiler allocate space for c in memory that sticks around after your fnction returns
[09:14:56] <dave0> trafficjam: i don't know the technical term for that kind of memory
[09:15:21] <dave0> people just say "global variable" but c purists object to that word :-p
[09:15:56] <trafficjam> ah ok, and what does the asterisk before `myFunc()` do? Is that just deferencing the colors pointer?
[09:16:08] <trafficjam> i.e. it's the same as `const *colors myFunc()`?
[09:16:18] <dave0> trafficjam: it's the return type
[09:16:42] <dave0> trafficjam: no it's like   const colours *x;   x is pointer to something
[09:16:54] <apotheon> Maxdamantus: Remind me what you need other than being multiparadigm, type safe, type annotated, and mainstreamness?
[09:17:03] <dave0> trafficjam: except instead of x being a variable, x is a function.. you can return pointers
[09:17:20] <trafficjam> so you're returning a pointer to a function?
[09:17:36] <dave0> trafficjam: the function returns a pointer
[09:17:38] <apotheon> s/ness//
[09:17:39] <trafficjam> or to the output of the function?
[09:17:40] <apotheon> damn
[09:17:47] <apotheon> I'm getting tired of being brain-tired.
[09:18:35] <trafficjam> i'm still pretty new to pointers, so i'm used to using it like `int *ptr`, which is a pointer to a integer; So when you want to return a pointer from a function, you write that like `int * myFunc()`? is that like the same thing?
[09:19:01] <dave0> ,cc int *foo(void) { static int array[6] = { 3,1,4,1,5,9 }; return array; } int main(void) { int *x = foo(); for(int a=0; a<5; a++) printf("%d ", x[a]); }
[09:19:03] <trafficjam> or perhaps more clearly `int * myFunc()`
[09:19:04] <candide> dave0: 3 1 4 1 5
[09:19:07] *** Quits: gco (~gco@2601:647:4c80:2424:846c:c05d:a7a1:c8e7) (Quit: ZZZzzz…)
[09:19:21] *** Joins: Leonard (~Administr@114.55.127.80)
[09:19:28] <dave0> trafficjam: yep, same thing
[09:19:40] *** Quits: kish` (~aqua@user/aqua) (Remote host closed the connection)
[09:19:40] <trafficjam> dave0: ah awesome, thanks for explaining that
[09:19:46] <dave0> no worries
[09:19:49] <nitrix> trafficjam, Yes. int *func(); is a function returning a pointer to an int, while int (*func)(); is a pointer to a function, returning an int.
[09:20:05] <dave0> the compiler should complain if i remove static
[09:20:06] *** Joins: kish` (~aqua@user/aqua)
[09:20:11] <dave0> ,cc int *foo(void) { int array[6] = { 3,1,4,1,5,9 }; return array; } int main(void) { int *x = foo(); for(int a=0; a<5; a++) printf("%d ", x[a]); }
[09:20:13] <candide> dave0: [In function 'foo':  warning: function returns address of local variable [-Wreturn-local-addr]]  runtime error: load of null pointer of type 'int' Program received signal SIGSEGV, Segmentation fault at statement: for (int a = 0; a < 5; a++) printf("%d ", x[a]); <local variables: a = 0; x = 0x0>
[09:20:22] <dave0> yep crash
[09:21:01] *** Joins: hiovoltage (~hiovoltag@78.186.68.182)
[09:21:17] *** Quits: Leonardzzz (~Administr@114.55.127.80) (Ping timeout: 240 seconds)
[09:21:38] <trafficjam> ah and the reason you use `static` is because otherwise the compiler would free that memory once the scope is exited?
[09:21:52] <dave0> yep
[09:21:54] <apotheon> Oh, shit, I just realized I added a question mark to a statement, too
[09:22:01] <apotheon> The C compiler would reject my English.
[09:22:22] <apotheon> "Ending a statement with a question mark is undefined."
[09:22:42] <rcf> The compiler would not reject it, but quote it out of context to make you look bad.
[09:22:45] <dave0> it just means that statement is optional
[09:23:19] <dave0> if c were more like regex
[09:23:21] <nitrix> trafficjam, The downside of that approach being that future calls to `foo` wipes the previous data that was in there. The function becomes sensitive to the execution flow of the program.
[09:23:41] <trafficjam> ah good point
[09:24:07] <apotheon> rcf: nice
[09:24:33] <apotheon> dave0: thank goodness it isn't more like regex
[09:24:48] <trafficjam> how do enums work btw? like when you define `enum colors { RED, GREEN, BLUE }`, what exactly is this object?
[09:25:02] <trafficjam> is it equivalent to an int array?
[09:25:15] <hanzo> no its an integer with a fixed set of values
[09:25:30] <nitrix> trafficjam, The object itself has an integer type (unknown which), the enumeration constants (RED, GREEN, BLUE) are all ints.
[09:26:04] <trafficjam> ok, so basically all it does is convert RED to 1, GREEN to 2, etc
[09:26:13] <trafficjam> or whatever key/value pair i define
[09:26:26] <rcf> It's just a nicer way to define constants, basically.
[09:26:34] <trafficjam> got it, thanks
[09:26:34] <nitrix> trafficjam, So you're able to switch (the_enum) {} and use case RED as much as case 0, it's all the same.
[09:26:59] <nitrix> Can also perform arithmetic with them, there's nothing special about it.
[09:27:39] <nitrix> trafficjam, Functions that accepts _different_ enums wont even notice; your compiler will usually warn, but from the point of view of C, they're just integers.
[09:27:40] <dave0> RED+GREEN=YELLOW
[09:28:38] <nitrix> trafficjam, They begin at 0, each one without an initializer increments the previous. so enum colors { RED = 5, GREEN, BLUE = 10 } would give you 5, 6 and 10.
[09:28:56] <hanzo> dave0: lol
[09:30:14] <nitrix> trafficjam, And most surprisingly, they can actually have the same values if you're devious.
[09:30:15] <nitrix> ,cc enum foo { A = 5, B, C = 6 }; printf("%d %d %d", A, B, C);
[09:30:16] <dave0> :-)
[09:30:17] <candide> nitrix: 5 6 6
[09:31:45] <trafficjam> neat, so i should just think of them as int constants
[09:31:52] *** Joins: Leonardzzz (~Administr@114.55.127.80)
[09:31:58] <rcf> trafficjam: people often #define their integer constants, but an enum type gives more context to the programmer when you have a set of possible values in mind.
[09:32:17] <katsuragi> kind of like named int constants
[09:32:39] <katsuragi> although the compiler doesn't care about the name
[09:32:57] <nitrix> trafficjam, Yeah, with the benefit that they get automatically enumerated for you, so you don't have to number them all manually and manage them.
[09:32:58] <katsuragi> and my feelings when it spits out errors on my face
[09:33:30] <nitrix> trafficjam, Though, often times, you do end up giving them precise values and managing them because of backwards compatibility reasons with network protocols, database entries, etc.
[09:33:57] <rcf> I could #define RED 0 #define GREEN 1 #define BLUE 2 and then define some function that takes an int color argument, or use the enum color type and make it more obvious what is to be done.
[09:34:30] *** Quits: Darkcoal (~user@2001:16a2:77fa:2800:afa:9cc0:ad10:784d) (Ping timeout: 268 seconds)
[09:34:57] *** Quits: Leonard (~Administr@114.55.127.80) (Ping timeout: 240 seconds)
[09:36:17] *** Joins: Darkcoal (~user@2001:16a2:77fa:2800:afa:9cc0:ad10:784d)
[09:37:45] *** Quits: Leonardzzz (~Administr@114.55.127.80) (Remote host closed the connection)
[09:38:09] *** Joins: Leonardzzz (~Administr@114.55.127.80)
[09:40:20] *** Joins: Leonard (~Administr@114.55.127.80)
[09:41:34] *** Quits: chiselfuse (~chiselfus@user/chiselfuse) (Remote host closed the connection)
[09:42:08] *** Joins: chiselfuse (~chiselfus@user/chiselfuse)
[09:42:13] *** Quits: trisk (~trisk@2601:196:4700:712:8:20ff:fe3e:890e) (Ping timeout: 240 seconds)
[09:42:57] *** Quits: Leonardzzz (~Administr@114.55.127.80) (Ping timeout: 240 seconds)
[09:48:13] *** Quits: Satin (uid193953@user/Seten) (Quit: Connection closed for inactivity)
[09:51:49] *** Quits: mad_enz (~mad_enz@lnsm3-torontoxn-142-116-106-108.internet.virginmobile.ca) (Ping timeout: 240 seconds)
[09:53:28] <trafficjam> what's the general way you guys handle case insensitivity, i.e. treating all characters the same regardless of uppercase or lowercase?
[09:53:51] <trafficjam> is it basically just to test if a character is between a certain int range and then minus (or add) a constant?
[09:54:05] <trafficjam> i guess add in this case, because uppercase has lower values than lowercase
[09:54:15] <trafficjam> or is there a better way of doing this?
[09:55:07] <nitrix> I normally make a copy of the string and normalize it to either all lower or all uppercase before doing the comparison.
[09:55:48] <trafficjam> nitrix: normalize it using something similar to the method above, or is there a string.h function for this?
[09:55:49] <nitrix> It's a technique that scales a lot better to more complex character sets like Unicode, with its complicated normalizations.
[09:55:57] *** Quits: malina (~malina@user/malina) (Ping timeout: 256 seconds)
[09:56:25] <nitrix> For simple ASCII, just tolower()/toupper().
[09:57:28] <nitrix> You could write your own routine that subtract the gap between the lowercase letters and uppercase letters of the ASCII character set, and make sure it gives you 0 and that you're still within the proper range, but it requires knowing a bit more what you're doing.
[09:58:45] *** Quits: rgrinberg (~textual@177.246.216.115) (Read error: Connection reset by peer)
[09:58:51] <rcf> trafficjam: it's one of those fun problems that sounds very simple at first and then becomes incredibly complicated to the point that you'd be insane to do it on your own rather than use some unicode library.
[09:58:56] <trafficjam> yeah i was just going to do something like this: https://dpaste.org/n8FW
[09:59:10] *** Joins: rgrinberg (~textual@177.246.218.93)
[09:59:23] <trafficjam> *65
[10:00:00] <trafficjam> rcf: for ascii it's simple though right?
[10:00:24] *** Quits: Darkcoal (~user@2001:16a2:77fa:2800:afa:9cc0:ad10:784d) (Ping timeout: 268 seconds)
[10:01:01] <rcf> For ASCII, yes.
[10:01:12] <nitrix> trafficjam, The lower and uppercase letters aren't side-by-side, there's a gap with symbols in-between, like : and =
[10:01:51] <trafficjam> nitrix: the difference is still a constant though isn't it?
[10:02:05] *** Joins: Darkcoal (~user@139.64.51.226)
[10:02:32] <nitrix> trafficjam, Which would pass your if check, and incorrectly get bumped to something else I think...
[10:02:44] <nitrix> Wait, why is the lower bound 75? That's K to Z?
[10:02:51] <trafficjam> typo
[10:03:03] <trafficjam> hence the *65
[10:03:26] <nitrix> Ah, yes.
[10:03:52] <nitrix> This is fine then, your range is just the uppercase and you're converting to lowercase if it was uppercase.
[10:03:55] *** Quits: mattroelle (~mattroell@136-26-68-28.cab.webpass.net) (Quit: WeeChat 3.3)
[10:04:21] <nitrix> Look good to me.
[10:05:09] *** Joins: the_lanetly_052_ (~the_lanet@194.135.167.186)
[10:05:11] <trafficjam> but if there is a stdlib function i may as well use that
[10:05:15] <nitrix> ,tell trafficjam about cc printf("%d", 1 < 5 < 10);
[10:05:18] <candide> trafficjam: [warning: comparisons like 'X<=Y<=Z' do not have their mathematical meaning [-Wparentheses]] 1
[10:05:55] <nitrix> The comparison operators produces 0 when false or 1 when true, leading to a problem when they're chained like that.
[10:06:18] <nitrix> ,parens 1 < 5 < 10
[10:06:19] <candide> nitrix: (1 < 5) < 10
[10:06:30] *** Joins: Leonardzzz (~Administr@114.55.127.80)
[10:06:39] <trafficjam> oh thats a neat trick
[10:06:41] <nitrix> This ends up becoming 1 < 10
[10:06:50] <trafficjam> ah
[10:07:19] <apotheon> trafficjam: I think you should probably just use tolower() or tolower_l() from ctype.h, depending on whether you want c89 depending on local locale or POSIX depending on a locale argument.
[10:07:33] <trafficjam> yeah that was a bit pseudocody,
[10:08:04] <trafficjam> apotheon: ah nice, didnt know about this lib
[10:08:17] <apotheon> have fun
[10:08:28] <nitrix> <nitrix> For simple ASCII, just tolower()/toupper().
[10:08:35] *** Joins: Mentor (~Ionut@92.86.217.127)
[10:08:41] <rcf> Indeed.
[10:08:48] <apotheon> or the upper equivalents
[10:08:51] <apotheon> forgot to mention them
[10:09:22] <apotheon> Yeah, I see nitrix mentioned half the options you might want to use, and I mentioned half, but we duplicated one and left one out between the two of us.
[10:09:32] *** Joins: trisk (~trisk@2601:196:4700:712:8:20ff:fe3e:890e)
[10:09:35] <apotheon> out of four total functions
[10:09:59] *** Quits: Leonard (~Administr@114.55.127.80) (Ping timeout: 256 seconds)
[10:10:02] <nitrix> The _l locale ones might be a little too much for him. I don't know.
[10:10:46] <nitrix> Unicode is the future but unicode is annoying.
[10:10:48] <apotheon> On some systems, the _l choices might just ignore the second argument, too.
[10:11:14] <nitrix> To be fair, Unicode is the present actually.
[10:11:24] <apotheon> yeah
[10:11:32] <apotheon> It's the future for a c89 function.
[10:11:37] <nitrix> :P
[10:11:44] <apotheon> bedtime
[10:11:46] <apotheon> g'night
[10:14:34] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: ZzzZ)
[10:17:14] *** Joins: kenanmarasli (~kenanmara@user/kenanmarasli)
[10:19:39] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[10:31:12] *** Quits: vt (~vt@osa.vbc.su) (Remote host closed the connection)
[10:32:33] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[10:32:33] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[10:32:33] *** Joins: wroathe (~wroathe@user/wroathe)
[10:33:21] *** Quits: rgrinberg (~textual@177.246.218.93) (Read error: Connection reset by peer)
[10:34:28] *** Joins: rgrinberg (~textual@177.246.218.93)
[10:37:45] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[10:37:51] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[10:40:27] * katsuragi thinks ooO(const values are not constant expressions..)
[10:41:59] *** Joins: kaph_ (~kaph@net-2-38-107-19.cust.vodafonedsl.it)
[10:43:27] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:cdd1:fb1a:1d51:220e)
[10:44:33] *** Quits: kaph (~kaph@net-2-38-107-19.cust.vodafonedsl.it) (Ping timeout: 256 seconds)
[10:49:37] *** Quits: zmt01 (~zmt00@user/zmt00) (Ping timeout: 240 seconds)
[10:53:21] *** Joins: boB_K7IQ (~boB_K7IQ@c-24-19-3-104.hsd1.wa.comcast.net)
[10:53:43] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:cdd1:fb1a:1d51:220e) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[10:53:55] *** Quits: gr33n7007h (~gr33n7007@user/gr33n7007h) (Quit: WeeChat 3.4)
[10:57:04] *** Joins: gr33n7007h (~gr33n7007@user/gr33n7007h)
[10:58:26] *** Quits: rgrinberg (~textual@177.246.218.93) (Read error: Connection reset by peer)
[11:01:17] *** Joins: Fairy (~Fairy@2001:464a:4992:0:bdfd:8ef1:211a:77dc)
[11:02:05] *** Quits: spidermonkey54 (uid527699@id-527699.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[11:07:41] *** Joins: MajorBiscuit (~MajorBisc@86-88-79-148.fixed.kpn.net)
[11:12:09] *** Quits: MajorBiscuit (~MajorBisc@86-88-79-148.fixed.kpn.net) (Client Quit)
[11:12:24] *** Joins: MajorBiscuit (~MajorBisc@86-88-79-148.fixed.kpn.net)
[11:15:15] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:cdd1:fb1a:1d51:220e)
[11:16:05] *** Joins: Leonard (~Administr@114.55.127.80)
[11:16:56] <markand> const is misnomer
[11:17:00] <markand> it's more like readonly
[11:17:23] <markand> but readonly int x = 0 is too long :P
[11:17:57] <markand> the committee thinks it's a good idea to copy all bloat from C++, so we will get constexpr at some point
[11:18:33] *** Quits: Leonardzzz (~Administr@114.55.127.80) (Ping timeout: 256 seconds)
[11:20:24] *** Joins: Satin (uid193953@user/Seten)
[11:26:37] *** Quits: pnbeast (~pnbeast@2601:140:4280:6ce0::1) (Quit: WeeChat 2.7.1)
[11:27:25] *** Quits: Leonard (~Administr@114.55.127.80) (Read error: Connection reset by peer)
[11:27:30] *** Joins: Leonardzzz (~Administr@114.55.127.80)
[11:33:20] *** Joins: aerysh_ (~aerysh@94.198.43.94)
[11:35:12] *** Joins: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net)
[11:39:50] *** Quits: EdFletcher (~PKD@user/edfletcher) (Quit: Quit.)
[11:40:33] *** Joins: aradesh (~aradesh@user/aradesh)
[11:42:19] *** Joins: EdFletcher (~PKD@user/edfletcher)
[11:42:43] *** Joins: Leonard (~Administr@114.55.127.80)
[11:43:22] *** Joins: mrig (~mrig@user/mrig)
[11:43:52] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[11:44:46] *** Joins: puke (~puke@user/puke)
[11:45:01] *** Quits: Leonardzzz (~Administr@114.55.127.80) (Ping timeout: 240 seconds)
[11:46:07] *** Joins: freep (~freepppp@188.4.150.192.dsl.dyn.forthnet.gr)
[11:46:38] *** Joins: Rounin (~david@84.212.130.215)
[11:46:48] *** Joins: rgrinberg (~textual@2806:265:5401:8cd:55a0:8f60:aba0:28c4)
[11:48:29] *** Joins: Leonardzzz (~Administr@114.55.127.80)
[11:48:33] *** Quits: Leonard (~Administr@114.55.127.80) (Read error: Connection reset by peer)
[11:53:37] *** Quits: freep (~freepppp@188.4.150.192.dsl.dyn.forthnet.gr) (Ping timeout: 240 seconds)
[11:55:39] *** Joins: freep (~freepppp@62.1.174.38.dsl.dyn.forthnet.gr)
[11:56:42] <sham1> As far as "bloat" goes, having constexpr is nice
[12:02:17] *** Quits: Leonardzzz (~Administr@114.55.127.80) (Read error: Connection reset by peer)
[12:02:27] *** Joins: Leonardzzz (~Administr@114.55.127.80)
[12:03:22] *** Joins: slidercrank (~slidercra@user/slidercrank)
[12:07:05] *** Joins: Leonard (~Administr@114.55.127.80)
[12:08:29] *** Quits: rgrinberg (~textual@2806:265:5401:8cd:55a0:8f60:aba0:28c4) (Read error: Connection reset by peer)
[12:08:57] *** Quits: Leonardzzz (~Administr@114.55.127.80) (Ping timeout: 240 seconds)
[12:09:56] *** Quits: hinata (~hinata@2409:4042:d1c:87d7:40bc:6e36:751e:ba7b) (Quit: Leaving)
[12:10:01] *** Joins: rgrinberg (~textual@2806:265:5401:8cd:55a0:8f60:aba0:28c4)
[12:10:25] *** Quits: _mikey (~mikey@user/mikey/x-4335048) (Remote host closed the connection)
[12:10:49] *** Joins: _mikey (~mikey@user/mikey/x-4335048)
[12:17:17] *** Quits: boB_K7IQ (~boB_K7IQ@c-24-19-3-104.hsd1.wa.comcast.net) (Ping timeout: 240 seconds)
[12:17:32] *** Quits: cisco87 (~quassel@static.134.4.251.148.clients.your-server.de) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[12:17:51] *** Joins: cisco87 (~quassel@static.134.4.251.148.clients.your-server.de)
[12:17:58] *** Joins: boB_K7IQ (~boB_K7IQ@c-24-19-3-104.hsd1.wa.comcast.net)
[12:21:15] *** Quits: aerysh_ (~aerysh@94.198.43.94) (Quit: Konversation terminated!)
[12:21:25] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:cdd1:fb1a:1d51:220e) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[12:22:24] *** Quits: fe23 (~fe23@2409:8a34:464:4990:9530:1dc0:e4b9:5446) (Quit: fe23)
[12:27:49] *** Quits: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net) (Quit: Textual IRC Client: www.textualapp.com)
[12:27:57] *** Joins: hiovoltage71 (~hiovoltag@78.186.68.182)
[12:28:31] *** Quits: hiovoltage71 (~hiovoltag@78.186.68.182) (Client Quit)
[12:28:45] *** Joins: hiovoltage56 (~hiovoltag@78.186.68.182)
[12:30:16] *** Joins: agonhajdari (~textual@user/agonhajdari)
[12:31:02] *** Quits: agonhajdari (~textual@user/agonhajdari) (Client Quit)
[12:32:14] *** Quits: hiovoltage (~hiovoltag@78.186.68.182) (Ping timeout: 256 seconds)
[12:33:23] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[12:33:23] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[12:33:23] *** Joins: wroathe (~wroathe@user/wroathe)
[12:37:49] *** hiovoltage56 is now known as hiovoltage
[12:38:35] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[12:41:13] *** Quits: Betal (~Betal@user/betal) (Quit: WeeChat 3.4)
[12:41:30] *** Joins: Leonardzzz (~Administr@114.55.127.80)
[12:42:25] *** Quits: zwr (~zwr@2804:d45:b966:fb00:dc36:d82f:f864:4cfe) (Ping timeout: 250 seconds)
[12:43:10] *** Joins: zwr (~zwr@2804:d45:b966:fb00:7298:34ad:5290:1c7e)
[12:44:41] *** Quits: Leonard (~Administr@114.55.127.80) (Ping timeout: 256 seconds)
[12:46:22] *** Joins: Leonard (~Administr@114.55.127.80)
[12:48:37] *** Quits: Leonardzzz (~Administr@114.55.127.80) (Ping timeout: 240 seconds)
[12:49:25] *** Quits: rgrinberg (~textual@2806:265:5401:8cd:55a0:8f60:aba0:28c4) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[12:52:48] *** Joins: ketiv (~ketiv@92.40.194.80.threembb.co.uk)
[12:52:54] <ketiv> Hello World
[12:53:42] *** Quits: puke (~puke@user/puke) (Remote host closed the connection)
[12:53:57] *** Joins: puke (~puke@user/puke)
[12:56:30] *** Joins: stonkey (~stonkey@user/stonkey)
[12:56:57] *** Joins: agonhajdari (~textual@user/agonhajdari)
[12:58:25] *** Joins: hinata (~hinata@2409:4042:d1c:87d7:40bc:6e36:751e:ba7b)
[12:59:28] *** Quits: xa0s (~xa0s@mab.sdf.org) (Quit: leaving)
[13:00:02] *** Quits: g2anj (~v@58.228.230.4) (Ping timeout: 240 seconds)
[13:00:10] *** Joins: off^ (~off@207.5.21.20)
[13:01:17] *** Quits: joast (~rick@cpe-98-146-112-4.natnow.res.rr.com) (Ping timeout: 240 seconds)
[13:03:29] *** Joins: Leonardzzz (~Administr@114.55.127.80)
[13:06:55] *** Quits: Leonard (~Administr@114.55.127.80) (Ping timeout: 256 seconds)
[13:09:32] *** Quits: ketiv (~ketiv@92.40.194.80.threembb.co.uk) (Quit: WeeChat 3.3)
[13:09:38] *** Quits: hiovoltage (~hiovoltag@78.186.68.182) (Ping timeout: 256 seconds)
[13:11:19] <markand> do you prefer adding int over other types? aka `unsigned short int` vs `unsigned short`
[13:11:34] *** Joins: plastico (~plastico@neomutt/plastico)
[13:11:59] *** Quits: puke (~puke@user/puke) (Quit: puke)
[13:16:30] *** Joins: mad_enz (~mad_enz@lnsm3-torontoxn-142-116-106-108.internet.virginmobile.ca)
[13:16:46] *** Joins: fe23 (~fe23@2409:8a34:464:4990:1b5:d33b:e66f:3b6f)
[13:20:15] *** Joins: Y4knotiS (~YaknotiS@cpc1-cmbg18-2-0-cust87.5-4.cable.virginm.net)
[13:21:54] *** Joins: cassepipe (~cassepipe@2a01:cb18:3ec:6f00:840b:3dd6:9d5e:79f4)
[13:24:13] *** Quits: AmR (~AmREiSa@156.199.28.131) (Quit: Konversation terminated!)
[13:25:34] *** Joins: ironman (~ironman@2405:201:1010:b033:bad0:8910:44c9:da61)
[13:32:09] *** Joins: Everything (~Everythin@37.115.210.35)
[13:35:41] *** Joins: Leonard (~Administr@114.55.127.80)
[13:35:52] *** Quits: Satin (uid193953@user/Seten) (Quit: Connection closed for inactivity)
[13:36:14] *** Quits: malloy (~jimery@116.30.220.175) (Quit: WeeChat 3.0)
[13:38:31] *** Quits: Leonardzzz (~Administr@114.55.127.80) (Ping timeout: 256 seconds)
[13:40:11] *** Joins: LucaTM (~LucaTM@user/lucatm)
[13:44:37] *** Quits: n3rdy1 (~n3rdy1@2600:1700:4570:3480:1b88:50f:dae0:9293) (Ping timeout: 240 seconds)
[13:46:49] <zwr> int unsigned short
[13:47:14] *** Quits: lunix00 (~lunix00@2804:14c:6321:900d:4d91:c1e4:f48:338) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[13:47:41] *** Joins: hiovoltage (~hiovoltag@78.186.68.182)
[13:47:47] <sham1> I usually use fixed width stuff
[13:49:07] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[13:49:07] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[13:49:07] *** Joins: wroathe (~wroathe@user/wroathe)
[13:52:00] *** Quits: cassepipe (~cassepipe@2a01:cb18:3ec:6f00:840b:3dd6:9d5e:79f4) (Quit: Leaving)
[13:54:23] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[13:58:21] *** Quits: oxfuxxx (~oxfuxxx@10.177.181.107.wiredns.net) (Ping timeout: 256 seconds)
[14:03:57] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 240 seconds)
[14:04:09] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:ccc4:2031:23da:e328) (Quit: Quit)
[14:05:10] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[14:05:59] *** Quits: Leonard (~Administr@114.55.127.80) (Read error: Connection reset by peer)
[14:06:01] *** Joins: Leonardzzz (~Administr@114.55.127.80)
[14:07:18] *** Joins: g2anj (~v@58.228.230.4)
[14:19:06] *** Quits: NEYi (~NEYi@109.251.216.38) (Read error: Connection reset by peer)
[14:19:55] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[14:19:55] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[14:19:55] *** Joins: wroathe (~wroathe@user/wroathe)
[14:24:59] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[14:25:33] *** Quits: Akiva (~Akiva@user/Akiva) (Ping timeout: 256 seconds)
[14:30:12] *** Quits: csrf (~csrf@user/csrf) (Quit: ZNC 1.7.2+deb3 - https://znc.in)
[14:30:57] *** Joins: csrf (~csrf@user/csrf)
[14:32:18] *** Quits: Leonardzzz (~Administr@114.55.127.80) (Read error: Connection reset by peer)
[14:32:30] *** Joins: Leonardzzz (~Administr@114.55.127.80)
[14:33:28] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:ccc4:2031:23da:e328)
[14:34:15] *** Joins: random-nick (~random-ni@87.116.167.125)
[14:36:25] *** Joins: sokan (~sokan@athedsl-4548055.home.otenet.gr)
[14:36:53] *** Quits: dave0 (~davezero@069.d.003.ncl.iprimus.net.au) (Ping timeout: 256 seconds)
[14:38:33] *** Joins: dave0 (~davezero@069.d.003.ncl.iprimus.net.au)
[14:40:38] *** Joins: Satin (uid193953@user/Seten)
[14:42:57] *** Quits: mad_enz (~mad_enz@lnsm3-torontoxn-142-116-106-108.internet.virginmobile.ca) (Ping timeout: 240 seconds)
[14:43:29] *** Joins: Leonard (~Administr@114.55.127.80)
[14:45:37] *** Quits: Leonardzzz (~Administr@114.55.127.80) (Ping timeout: 240 seconds)
[14:46:22] <trafficjam> man going back to a dynamic language after using C seems to much easier than it did before
[14:46:53] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:cdd1:fb1a:1d51:220e)
[14:46:55] <trafficjam> i guess learning C makes you a generally better programmer
[14:48:05] *** Joins: puke (~puke@user/puke)
[14:48:18] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:ccc4:2031:23da:e328) (Remote host closed the connection)
[14:48:36] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:ccc4:2031:23da:e328)
[14:49:04] *** Quits: Hexmind (~Hexmind@modemcable049.25-131-66.mc.videotron.ca) (Quit: Leaving)
[14:50:42] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[14:50:42] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[14:50:42] *** Joins: wroathe (~wroathe@user/wroathe)
[14:53:53] *** Joins: bebyx (~Thunderbi@user/bebyx)
[14:55:43] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[14:56:21] *** Joins: mad_enz (~mad_enz@2605:8d80:681:dda0:ab90:af52:d0b2:1539)
[14:56:59] <sokan> I know I finally got a general understanding of pointers!
[14:57:07] <sokan> Thank you all for the help :D
[14:58:19] *** Quits: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net) (Remote host closed the connection)
[14:58:34] *** Joins: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net)
[14:58:52] <sham1> One thing about pointers I've noticed is that they get hyped up as this difficult thing
[15:01:02] *** Joins: cerl (~cerl@c-24-30-27-91.hsd1.ga.comcast.net)
[15:01:13] <cerl> The good thing about structs is that they're like mini classes at times.
[15:02:38] *** Joins: Major_Biscuit (~MajorBisc@c-001-029-007.client.tudelft.eduvpn.nl)
[15:02:56] *** Quits: hinata (~hinata@2409:4042:d1c:87d7:40bc:6e36:751e:ba7b) (Quit: Leaving)
[15:03:49] *** Quits: Fairy (~Fairy@2001:464a:4992:0:bdfd:8ef1:211a:77dc) (Ping timeout: 240 seconds)
[15:04:07] <sokan> sham1: they don't /j #c to get unconfused ;)
[15:04:32] *** Joins: Leonardzzz (~Administr@114.55.127.80)
[15:05:37] *** Quits: MajorBiscuit (~MajorBisc@86-88-79-148.fixed.kpn.net) (Ping timeout: 240 seconds)
[15:08:03] *** Quits: Leonard (~Administr@114.55.127.80) (Ping timeout: 256 seconds)
[15:15:49] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:cdd1:fb1a:1d51:220e) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[15:17:07] *** Quits: hiovoltage (~hiovoltag@78.186.68.182) (Ping timeout: 256 seconds)
[15:20:02] <zwr> C is the first real language I learned. I went in blind when I started reading K&R C, I had only vaguely recalled hearing about pointers, and didn't find them hard. now I don't know how one would program without them
[15:21:27] <nomagno> zwr: You can replace pointers by returning complex structs by value
[15:21:35] <nomagno> For obvious reasons, this is completely impractical
[15:21:41] <sokan> https://upload.vaa.red/oYvgX#a1434b3a375b31cbc19b6692cc9a04be <--- what the hell does this even mean? https://upload.vaa.red/sezSz#6dc72421578d8558457a7666535d90b9 this is the code/exersise
[15:21:53] <nomagno> But this is how I'd factor out pointers if I ever had to
[15:21:59] <fizzie> ,english a[0] = *((pa++)+2);
[15:22:00] <candide> fizzie: Assign to the 1st element of `a` the result of the expression the dereference of ((post-incremented `pa`) plus 2).
[15:22:22] <fizzie> (Just checking if it's any clearer like that.)
[15:22:38] <cerl> zwr C was my first language too, I even bought a copy of the C book off ebay to learn about functions, variables, and other fundamentals.
[15:23:40] <fizzie> It means  what it says it means, though. Increment the pointer `pa`, and also add 2 to the value it had before incrementing, and store the value at that address to a[0].
[15:24:15] <fizzie> It could have been written as `pa++; a[0] = pa[1];` if that helps.
[15:24:32] <sokan> fizzie: so *pa pointed to a[0]. Now it points to a[1] and the value stored there is incresed by 1?
[15:24:33] <fizzie> (Or `a[0] = pa[2]; pa++;`.)
[15:25:04] <sham1> Nothing about the code implies that
[15:25:06] <fizzie> No, it just points now to &a[1] and the value at a[0] is replaced by that at a[2].
[15:25:07] <earnest> sokan: It's location in a doesn't change
[15:26:40] *** Joins: coodre (~no@41.141.7.180)
[15:26:51] <fizzie> That's also shown on the right side of your second paste. If you look at the "line 17" lines, you can see `pa` has moved to column 1, and the value in column 0 in the table has changed from 0 to 4 (the value in column 2).
[15:27:27] *** Quits: Leonardzzz (~Administr@114.55.127.80) (Remote host closed the connection)
[15:28:08] *** Joins: unknow (~i.am@user/marlboro)
[15:28:54] *** Quits: gr33n7007h (~gr33n7007@user/gr33n7007h) (Quit: WeeChat 3.4)
[15:29:14] <sham1> The code in the second paste is written in a very contrived manner. It might be a good exercise, but still, no
[15:29:15] <coodre> if i have to pass a struct in_addr but i only have a 32-bit integer and i don't want to make a new struct, is this a hack: "*(struct in_addr*)&ip_address"
[15:29:16] <fizzie> Similarly you can decompose `*((++pa)+5) = a[1];` apart into `pa++; pa[5] = a[1];`. (Since it's a pre-increment, in order to do it as two separate statements, either the increment has to be done first, or the offset 5 would need to be adjusted to 4.)
[15:30:04] <fizzie> And for the final line, `*(&a[5]-1)` is just an obfuscated way of saying `a[4]`.
[15:30:23] <sham1> coodre: you might not have any reason to believe that struct ip_addr could just be a 32 bit integer
[15:30:38] *** Joins: hinata (~hinata@2409:4042:d1c:87d7:40bc:6e36:751e:ba7b)
[15:30:43] <sham1> Also yeah, the cast is UB
[15:30:49] <coodre> struct in_addr simply contains a 32-bit integer
[15:31:41] *** Quits: trafficjam (~trafficja@119.17.42.59) (Quit: Client closed)
[15:31:50] <fizzie> How about a compound literal? `(struct in_addr){ .s_addr = ip_address }`.
[15:32:10] <fizzie> If the function takes a `struct s_addr` by value, you can't really avoid "making a new struct".
[15:32:13] <sham1> And then you can take th address of that
[15:32:41] <coodre> oh yeah compound literals
[15:33:08] <sham1> Avoiding creating struct instances is counterproductive IMO
[15:35:25] <sokan> fizzie: this is just moronic way of learning :P
[15:35:33] <sokan> but I think I get it! thanks :)
[15:36:02] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.4)
[15:36:15] *** Joins: kit-ten (~u0_a391@2600:380:a420:9b:42e7:36e8:b201:ddbc)
[15:36:32] *** Joins: supakeen (~user@python/site-packages/supakeen)
[15:39:37] *** Quits: kit (~u0_a391@2603-6010-a141-6fa3-950d-0150-5311-7e6b.res6.spectrum.com) (Ping timeout: 240 seconds)
[15:40:36] *** kit-ten is now known as kit
[15:41:30] <coodre> what about the solution for C89
[15:44:29] <sham1> For C89 you just have to suck it up and create a new variable. It's not hat much effort
[15:46:29] *** Joins: cvmn (~caveman@gateway/tor-sasl/caveman)
[15:46:49] *** Quits: coodre (~no@41.141.7.180) (Read error: Connection reset by peer)
[15:46:57] *** Joins: hiovoltage (~hiovoltag@78.186.68.182)
[15:47:04] *** Joins: coodre (~no@41.141.7.180)
[15:47:15] <fizzie> Or sneak in a `static struct in_addr itoaddr(in_addr_t n) { struct in_addr addr = {n}; return addr; }` helper function somewhere.
[15:47:43] *** Joins: Leonardzzz (~Administr@114.55.127.80)
[15:51:20] *** Quits: coodre (~no@41.141.7.180) (Remote host closed the connection)
[15:51:42] *** Joins: coodre (~no@41.141.7.180)
[15:54:52] <sham1> Yeah, and if struct in_addr really only contains the single 32-bit integer number then this all might very well get inlined and turned into no-ops. But that's for the compiler to decide. Just casting pointers and whatnot would probably work for some architectures but that's not at all guaranteed because it's undefined behaviour at least on C1999 and later due to strict aliasing rules
[15:55:00] *** Joins: geranim0 (~geranim0@modemcable242.171-178-173.mc.videotron.ca)
[15:57:34] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: ZzzZ)
[15:58:13] <fizzie> You're seriously committing to those four-digit years, I see.
[15:58:33] <sham1> Someon has to
[15:58:41] <fizzie> Why not go all Long Now Foundation and use C01999?
[15:59:00] <fizzie> Well, maybe that looks a little too octal in the C context.
[15:59:09] <sham1> Invalid octal, even
[15:59:31] *** Quits: Leonardzzz (~Administr@114.55.127.80) (Read error: Connection reset by peer)
[15:59:40] *** Joins: Leonardzzz (~Administr@114.55.127.80)
[16:01:26] <fizzie> ISTR there was a place (a C implementation? a different language? some tool?) that would allow 01999 as an alternate way of saying 1169 / 02221 / 1*8*8*8 + 9*8*8 + 9*8 + 9.
[16:01:57] *** Quits: mad_enz (~mad_enz@2605:8d80:681:dda0:ab90:af52:d0b2:1539) (Ping timeout: 240 seconds)
[16:03:06] <fizzie> Oh, maybe some pre-C89 thing? The C99 rationale contains this: "Little support was expressed for the old practice of permitting the digits 8 and 9 in an octal constant, so it was dropped in C89."
[16:03:36] <dave0> yeah but mohammed will return before 9999 so we'll reset the calenders then
[16:03:47] <X-Scale> lol
[16:04:08] <X-Scale> we'll have 2038 before that
[16:05:08] <dave0> i hope it's more interesting than Y2K what a fizzer
[16:06:28] <X-Scale> hopefully we'll see the reencarnation of Dennis Ritchie at 03:14:08 UTC on 19 January 2038
[16:07:22] *** Joins: Leonard (~Administr@114.55.127.80)
[16:09:03] <coodre> C11 was made in 1911 right?
[16:09:24] *** Quits: Leonardzzz (~Administr@114.55.127.80) (Ping timeout: 256 seconds)
[16:10:06] <katsuragi> no. it was made in 2017
[16:10:18] *** Quits: tejr (~tejr@user/tejr) (Ping timeout: 276 seconds)
[16:12:00] *** Joins: tejr (~tejr@user/tejr)
[16:12:52] <sham1> But that one was C18
[16:13:17] <X-Scale> lol coodre...i do remember witnessing in more than one online place the year 19100 instead of 2000, even on some IRC servers
[16:13:25] <sham1> Which isn't confusing at all. C2017 was actually ratified as C2018
[16:14:02] <katsuragi> hexnaming, sham1
[16:15:22] *** Joins: mad_enz (~mad_enz@lnsm3-torontoxn-142-116-106-108.internet.virginmobile.ca)
[16:16:36] <sham1> I do feel that it was surprisingly short-sighted to just store the decade and year for computer systems in the 1900s. Sure it's efficient, it all fits in one byte, but it's kinda like what we face with 32-bit time_t now that we're barreling towards Y2034
[16:16:37] *** Quits: coodre (~no@41.141.7.180) (Ping timeout: 256 seconds)
[16:17:42] <sham1> At least now mitigations are hopefully already sorta been done so that systems won't just run out of UNIX time at an unopportuned time
[16:18:32] <sham1> One would just hope that all the IoT devices get upgraded, but that's a pipe dream
[16:20:05] *** Joins: tech_exorcist (txrcst@user/tech-exorcist/x-0447479)
[16:20:29] *** Joins: brad_mssw (~bhouse@c-76-106-206-149.hsd1.fl.comcast.net)
[16:20:34] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[16:20:34] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[16:20:34] *** Joins: wroathe (~wroathe@user/wroathe)
[16:21:10] *** Parts: cerl (~cerl@c-24-30-27-91.hsd1.ga.comcast.net) (Leaving)
[16:23:04] <DarkUranium> The Y2K problem was definitely more short-sighted than Y2K38. But both are quite short-sighted.
[16:23:11] <DarkUranium> I'm angry at the Linux kernel too, sham1.
[16:23:42] <DarkUranium> For a long while, it was the *ONLY* major OS to not support 64-bit time in 32-bit systems. FreeBSD, Solaris, Windows, various Unixes, etc, all supported it. But Linux did not, for a *long* while.
[16:24:10] <DarkUranium> (and I don't mean libc --- it had no support at the syscall level, so 32-bit software simply had no means of getting a 64-bit time)
[16:24:40] <DarkUranium> I do believe Linux has fixed it since, but a lot of the damage has been done, since 32-bit Linux is running embedded in all sorts of devices.
[16:25:08] <DarkUranium> Even devs aware of the problem had no workaround available.
[16:25:50] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[16:25:56] <DarkUranium> <coodre> C11 was made in 1911 right?
[16:26:02] <DarkUranium> I mean, yeah. The 'C' stands for "Colt", duh.
[16:26:47] <sham1> It shoots undefined behaviour at the target, and it just happens to be lead
[16:27:13] *** Joins: blindguard (~blindguar@2a02:908:1864:c200::12)
[16:27:26] <DarkUranium> sham1: I mean, you can easily shoot yourself in the foot, too.
[16:27:48] *** Quits: Everything (~Everythin@37.115.210.35) (Quit: leaving)
[16:27:50] <sham1> What did you think I meant with target
[16:28:00] <DarkUranium> touché
[16:30:35] *** Joins: meator (~meator@user/meator)
[16:31:27] *** Quits: Tempesta (Tempesta@user/tempesta) (Quit: See ya!)
[16:32:58] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:cdd1:fb1a:1d51:220e)
[16:34:20] *** Quits: Alhazred (~Alhazred@athedsl-4387600.home.otenet.gr) (Ping timeout: 256 seconds)
[16:35:01] <dave0> DarkUranium: maybe linux sucks?
[16:35:25] <DarkUranium> dave0: There's a reason all my servers are FreeBSD :)
[16:35:33] <DarkUranium> (except for like ... one or two, because software *needed* Linux)
[16:35:41] <DarkUranium> Even my desktop was (in Windoze ATM for gaming)
[16:35:43] *** Joins: Leonardzzz (~Administr@114.55.127.80)
[16:35:50] <DarkUranium> Or rather, is. But I'm not in FreeBSD at the moment.
[16:36:21] *** Joins: Tempesta (~Tempesta@user/tempesta)
[16:39:17] *** Quits: Leonard (~Administr@114.55.127.80) (Ping timeout: 256 seconds)
[16:40:03] *** Joins: spidermonkey54 (uid527699@id-527699.uxbridge.irccloud.com)
[16:41:17] *** Joins: nyah (~nyah@94.6.71.219)
[16:41:56] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Remote host closed the connection)
[16:42:11] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[16:42:56] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:ccc4:2031:23da:e328) (Quit: Quit)
[16:43:16] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:ccc4:2031:23da:e328)
[16:46:35] *** Quits: chenqisu1 (~bhca7d@183.217.201.21) (Quit: Leaving)
[16:50:48] *** Joins: NEYi (~NEYi@109.251.216.38)
[16:50:56] *** Joins: bdax (~tom@05432be4.skybroadband.com)
[16:51:49] <sokan> FILE *pfile; fpile = fopen("file.txt", "r"); pfile points to the contents of file.txt that has been accessed/opened via fopen?
[16:53:33] <EtherNet> fpile will be a pointer to the file.txt file stream, so it means fopen returns a pointer pointing to file.txt, and fpile since it's FILE * and expects that kind of pointer, will contain that
[16:53:33] <DarkUranium> More like a handle to the file. You need to read the file (fread & friends) to get the contents.
[16:53:59] <EtherNet> fread will requiere the pointer to know where to write or read from, that previously fopen assigned to a FILE *pfile;.
[16:54:38] *** Joins: magla (~gelignite@55d457f6.access.ecotel.net)
[16:54:50] *** Quits: llh (~llh@user/llh) (Quit: :::: ( UPP ) ::::)
[16:55:54] <bdax> I want to get a string of a double (or long double), and I'd like to avoid snprintf (sticking to c89/c95), which I suppose means using sprintf/swprintf. Is there any way of knowing before giving the number to sprintf how many characters the resulting number will be, and therefore, how big to make the buffer that will hold it?
[16:56:49] *** Joins: llh (~llh@user/llh)
[16:57:35] <zwr> I'd say go ahead and use C99, but if that really isn't possible, there are many free implementations of the function you can use
[16:57:36] <Learath2> You can limit the number of digits and thus get a predictable length output
[16:58:48] <dave0> bdax: you can also overestimate the size of the buffer to give you some breathing room
[16:59:04] <dave0> it's doesn't have to be exact
[16:59:20] <BtbN> Stackoverflow says the maximum it can be for a 64bit IEEE double is 1079 characters
[17:00:01] <earnest> What does the IEEE 754 standard say?
[17:00:23] <NRK[m]> i'd go with with Learath2 said.
[17:00:26] <BtbN> I don't think it says much about how to represent the numbers as string.
[17:00:44] <NRK[m]> but why do u need to stick to c89?
[17:00:50] <earnest> (To be honest, asking these sorts of questions, with these sorts of seemingly arbitrary requirements, without knowing the basics is highly suspicious)
[17:01:20] *** Joins: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br)
[17:01:21] *** Joins: kts (~kts@103.73.237.237)
[17:01:30] <bdax> hm I would like to stick to c89 for now (for portability, etc), so yeah, limiting it may be the way to go
[17:01:33] <dave0> or cut & paste snprintf from linux or a *BSD
[17:01:34] *** Quits: hinata (~hinata@2409:4042:d1c:87d7:40bc:6e36:751e:ba7b) (Quit: Leaving)
[17:01:39] <bdax> BtbN: interesting, but I suppose the problem is that c89 doesn't mandate ieee
[17:01:43] *** Joins: Fairy (~Fairy@2001:464a:4992:0:bdfd:8ef1:211a:77dc)
[17:02:01] <bdax> or 64bits for that matter
[17:02:25] <Learath2> c99 is fairly portable now, it's not 1453 anymore
[17:02:58] <dave0> could write it to a file with fprintf and read it back
[17:03:14] <Learath2> Just how many digits of precision do you need? Do you need to reserialize this exactly sometime in the future?
[17:03:23] <earnest> This is an excellent question
[17:03:24] <bdax> dave0: that's actually fairly legitimate...
[17:03:39] <earnest> Consider GPS and precision
[17:03:53] <earnest> Do you need to calculate the orbit of Pluto to within a 1mm margin of error?
[17:04:36] <earnest> I.e. https://en.wikipedia.org/wiki/Decimal_degrees
[17:04:50] <bdax> the precision isn't too important, but I haven't thought about an exact number it would need to be..
[17:05:12] <bdax> it might be overkill, but having a buffer of 1079, and limiting it to that might be the way to go
[17:05:14] <sham1> C1999 is just as portable as ANSI C is, realistically
[17:05:28] *** Quits: ironman (~ironman@2405:201:1010:b033:bad0:8910:44c9:da61) (Quit: Leaving)
[17:05:57] <bdax> it's not just portability, I just prefer c89/c95 tbh. I choose it for similar reasons that I choose C over Rust, etc (i.e. religious reasons, lol)
[17:05:58] <Learath2> If you are serializing why not frexp and ldexp? It's C89 afaik
[17:06:01] *** Joins: Leonard (~Administr@114.55.127.80)
[17:06:20] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:cdd1:fb1a:1d51:220e) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[17:06:28] <Learath2> A buffer of 1079 is like extremely wasteful, like so wasteful I just might start crying
[17:06:28] <earnest> I think all of these requirements are 'religious'
[17:06:40] <bdax> nothing wrong with a little bit of religion though
[17:07:00] <bdax> tabs > spaces, after all
[17:07:16] <sham1> Anyhow: https://ranjitjhala.github.io/static/fp-printing-popl16.pdf
[17:07:25] <sham1> That paper might be of interest
[17:07:26] <earnest> Best left to Aquinas, for C, understand what you actually need
[17:07:38] <bdax> ah thank you sham1
[17:07:47] <earnest> Especially for C, might as well just go full MISRA, static allocation
[17:08:12] <bdax> oh I do avoid malloc
[17:08:13] *** Quits: Leonardzzz (~Administr@114.55.127.80) (Ping timeout: 240 seconds)
[17:08:35] *** Joins: Tom^ (~Tom^@user/tom/x-0773808)
[17:08:48] *** Quits: cvmn (~caveman@gateway/tor-sasl/caveman) (Ping timeout: 276 seconds)
[17:09:35] <Learath2> I mean if you are going to implement float printing by hand might aswell implement ryu instead of grisu3
[17:11:08] *** Joins: iomari891 (~iomari891@197.210.55.212)
[17:11:23] <bdax> ah well, that paper's interesting, but it's likely out of my league. I'd use sprintf if at all possible
[17:12:06] <Learath2> https://dl.acm.org/doi/pdf/10.1145/3296979.3192369
[17:12:43] *** Quits: gproto23 (~gproto23@user/gproto23) (Ping timeout: 256 seconds)
[17:13:01] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:ccc4:2031:23da:e328) (Quit: Quit)
[17:13:51] <sham1> I do wonder why these kinds of algorithms aren't used by libcs
[17:14:18] <bdax> *scrolls to page 6* :| definitely using sprintf
[17:14:33] *** Joins: seninha (~seninha@user/seninha)
[17:14:54] <Learath2> As I said, sprintf does work, you just need to decide on the range of values and the amount of precision you want to support
[17:14:58] <sham1> It's just maths that establish that the algorithm works
[17:15:27] <Learath2> If you need exact serialization and deserialization there is frexp and ldexp
[17:15:46] <Learath2> sham1: MSVC STL uses ryu for char_conv in c++
[17:15:57] <sham1> Hm
[17:16:14] <sham1> Well then I wonder why it's not used for %f and such with printf
[17:16:53] <Learath2> I'm sure there is some reasoning given by a 70yo engineer working at HP that blocks it
[17:17:15] <sham1> Mayhaps
[17:17:30] <Learath2> I'll bet a 50 that it's because some old IBM mainframe working at some bank actually relies on floats being printed a certain way
[17:17:43] <zwr> kids these days and their exact float printing
[17:17:59] *** Joins: cart_man (~rynot@host-78-144-125-214.as13285.net)
[17:20:57] *** Joins: zsoltiv_ (~zsoltiv@fibhost-67-12-35.fibernet.hu)
[17:21:15] *** Joins: karthy (~karthy@162.216.143.166)
[17:21:22] *** Quits: brad_mssw (~bhouse@c-76-106-206-149.hsd1.fl.comcast.net) (Ping timeout: 256 seconds)
[17:23:46] *** Joins: pulse (~pulse@user/pulse)
[17:26:57] *** flooded is now known as _flood
[17:27:01] *** Joins: itachi69 (~itachi69@49.205.87.82)
[17:27:32] *** Quits: karthy (~karthy@162.216.143.166) (Quit: Client closed)
[17:29:24] *** Joins: slayne (~sysadmin@modemcable136.173-130-66.mc.videotron.ca)
[17:29:36] *** Joins: karthy (~karthy@162.216.143.166)
[17:29:49] <karthy> hey guys
[17:29:59] <slayne> Morning :)
[17:31:29] *** Joins: nuxil (~nuxil@141.195.51.213)
[17:31:40] *** Parts: nuxil (~nuxil@141.195.51.213) ()
[17:32:28] *** Quits: wovixo (~wovixo@128.104.205.49) (Read error: Connection reset by peer)
[17:33:24] *** Joins: gproto23 (~gproto23@user/gproto23)
[17:33:48] *** Joins: itachi696 (~itachi69@49.205.87.82)
[17:35:16] *** Parts: itachi69 (~itachi69@49.205.87.82) ()
[17:35:56] *** Joins: moog_ (~moog@107.126.53.99)
[17:36:14] *** Parts: itachi696 (~itachi69@49.205.87.82) ()
[17:36:40] *** Joins: Leonardzzz (~Administr@114.55.127.80)
[17:36:47] <fizzie> Use a temporary file and fprintf. ;)
[17:38:22] *** Quits: moog (~moog@107.77.244.52) (Ping timeout: 256 seconds)
[17:39:37] *** Quits: Leonard (~Administr@114.55.127.80) (Ping timeout: 240 seconds)
[17:40:03] *** Joins: wovixo (~wovixo@128.104.205.49)
[17:40:10] <fizzie> ,cc double d = M_PI; FILE *devnull = fopen("/dev/null", "w"); fprintf(devnull, "%f", d); long len = ftell(devnull); fclose(devnull); printf("'%f' takes %ld characters to represent", d, len); // just kidding
[17:40:13] <candide> fizzie: '3.141593' takes 8 characters to represent
[17:40:18] *** Joins: Alhazred (~Alhazred@athedsl-4387600.home.otenet.gr)
[17:41:34] <fizzie> They could've defined `fprintf` with a null `FILE *` argument to discard the output but still return the number of bytes it would have written.
[17:42:20] <bdax> ah that would have been nice
[17:45:01] *** Quits: meator (~meator@user/meator) (Ping timeout: 256 seconds)
[17:46:53] <pragma-> snprintf will do something like that.
[17:47:31] *** Joins: brad_mssw (~bhouse@2620:134:c001:100:948a:1f33:b479:c640)
[17:48:14] <pragma-> ,cc int len = snprintf(NULL, 0, "%f", M_PI);
[17:48:16] <candide> pragma-: no output: len = 8
[17:49:56] <Learath2> pragma-: he can't use snprintf because reasons
[17:50:15] <Learath2> well it's not c89 and he is sticking to c89
[17:50:34] <pragma-> C89 is over 30 years old.
[17:50:34] *** Quits: cation (cation@user/cation) (Ping timeout: 260 seconds)
[17:50:56] <pragma-> I have no sympathy or pity for him.
[17:52:18] <pragma-> Translated to computer-years, it's closer to 7,000 years old.
[17:52:21] *** Joins: cation (cation@user/cation)
[17:52:25] <slayne> Hey guys, what would you use if you had to handle small amount of data (todo app basically), json, had parsing a simple custom format, ini, yaml ?
[17:52:33] <zwr> backwards compatibility with hardware makes sense, but backwards compatibility with software doesn't as far as I see it
[17:52:44] <earnest> pragma-: Does Windows do C99 yet?
[17:52:56] <pragma-> Windows is not a C compiler.
[17:53:06] <zwr> earnest: don't know but Mingw-w64 does
[17:53:50] <pragma-> And Microsoft's official C compiler has claimed 100% C99 library support for decades.
[17:53:53] <zwr> I ported a program of mine to windows recently, it was a small program, but it was enough to show how painful it is in the windows world
[17:53:54] <earnest> Yeah, cygwin and co. do too, but does their official compilers... hm, do their official compilers even matter?  I am so ignorant of windows now
[17:53:57] <pragma-> But nobody uses that for C, right?
[17:54:16] <earnest> I remember seeing nullprogram make some effort to support windows, win32, such, but eh.
[17:55:01] <earnest> zwr: May reduce your pain: https://nullprogram.com/blog/2020/09/25/
[17:55:02] <candide> Title of earnest's link: w64devkit: (Almost) Everything You Need
[17:55:52] *** Quits: Satin (uid193953@user/Seten) (Quit: Connection closed for inactivity)
[17:56:48] <zwr> the devkit side was okay to use, msys2 was pretty good, it's windows' system APIs and documentation that are a pain in the butt
[17:57:33] <BtbN> The Win32 API is archaic, due to backwards compat to Win 3.11 days, but it's documented pretty well.
[17:58:19] *** Quits: agonhajdari (~textual@user/agonhajdari) (Quit: My Mac Mini has gone to sleep. ZZZzzz…)
[17:58:26] <pragma-> That's why you use multiplatform libraries that deal with that nonsense for you. Graphics, input, audio? SDL. Event loops, etc? libUV. See where I'm going with this?
[17:59:37] *** Quits: frost (~frost@user/frost) (Ping timeout: 240 seconds)
[17:59:41] <slayne> Hey guys, what would you use if you had to store small amount of data (todo app basically), json, ini, yaml, hand parsing a simple custom format, anything else ?
[18:00:26] <bdax> hand parsing a simple format, personally, something like an ini file
[18:00:43] *** Quits: tech_exorcist (txrcst@user/tech-exorcist/x-0447479) (Quit: see you later)
[18:01:02] <sham1> If there's anything I'd avoid it'd be YAML, because YAML is just painful
[18:01:41] <zwr> "something like an ini" file is pretty pleasant, I wish we went back to the ini days. there's a window manager called openbox which uses XML for the config file, ugh
[18:01:42] <apotheon> slayne: ini-like
[18:01:55] <pragma-> JSON is convenient because you can easily add new fields without having to do too much, but more importantly you can use other 3rd party tools with the data, like `jq`, etc, to manipulate or explore it.
[18:01:59] *** Joins: Leonard (~Administr@114.55.127.80)
[18:02:01] <pragma-> I would go JSON myself.
[18:02:04] <bdax> https://github.com/nothings/single_file_libs#json
[18:02:06] <candide> Title of bdax's link: GitHub - nothings/single_file_libs: List of single-file C/C++ libraries.
[18:02:12] <sham1> Sadly JSON lacks many things that for example config files would need
[18:02:27] <sham1> JSON for me is mostly a serialization format
[18:02:45] <pragma-> It does suck that JSON doesn't support commenting unless you're using a "non-standard" extension.
[18:03:01] <pragma-> But the tooling around JSON is so nice.
[18:03:08] <apotheon> I'd take JSON over YAML only if you intend to treat it like a debuggable binary format, but for a todo app it seems likely that an ini-like format is best.
[18:03:40] <Learath2> for something like a todo app I think I'd go json, or maaaaybe sqlite if I'm not feeling lazy
[18:03:42] <sham1> I'd go with TOML if I were to want something INI-like
[18:03:55] <sham1> And yeah. SQLite is a good alternative
[18:03:59] *** Joins: lukedashjr (~luke-jr@user/luke-jr)
[18:04:16] <caze> bdb
[18:04:17] *** Quits: Leonardzzz (~Administr@114.55.127.80) (Ping timeout: 240 seconds)
[18:04:20] <pragma-> SQLite is a bit heavier. You have to know a bit of SQL and you have to set up the database and connect to it. And if you have threading...
[18:04:34] <apotheon> I feel like SQLite is great when you need some sophistication to your data and very high assurance of data integrity, but way-overkill for anything I'd consider a "todo app".
[18:04:36] <Learath2> sqlite has good tooling and it makes it easy to do filtering and stuff, which you might want to do with your todos, you know tagging and stuff
[18:04:39] <slayne> Alright, will go for the INI file then, it seems the simplest choice, and I'm lazy :)
[18:04:54] <pragma-> Yeah, SELECT statements are great.
[18:05:29] <pragma-> SQLite is *fast* as long as you set up the tables properly and use indicing.
[18:05:37] *** Quits: luke-jr (~luke-jr@user/luke-jr) (Ping timeout: 240 seconds)
[18:05:41] *** lukedashjr is now known as luke-jr
[18:05:58] <slayne> Well now that SQLite and SELECT has been mentionned, I might just use that!
[18:06:01] <apotheon> Learath2: Filtering and tagging seems like overkill for "todo", unless you just let your "todo" list go to complete shit with overflowing piles of unfinished stuff that you may never get around to tackling and never delete.
[18:06:19] <sham1> I feel personally attacked
[18:06:25] <sham1> So much todo
[18:06:26] *** Joins: agonhajdari (~textual@user/agonhajdari)
[18:06:37] <Learath2> apotheon: Well I'd atleast want to sort by closer due dates and highlight the ones that are due today
[18:06:48] *** Joins: nun (~nun@178.115.236.156.static.drei.at)
[18:06:56] <apotheon> Learath2: You seem to be describing a calendar application now.
[18:07:22] <sham1> Any good todo-app should just evolve into a calendar
[18:07:36] <pragma-> Feature creep!
[18:07:48] <apotheon> This is the help output of the kind of thing I think of as todo list functionality:
[18:07:49] <apotheon> http://sprunge.us/ok8fuB
[18:08:13] <apotheon> massive feature creep
[18:08:17] <apotheon> (re: calendar)
[18:08:22] <apotheon> (not re: link)
[18:08:25] <sham1> In this case I'd say that a todo app without being a calendar is the opposite of feature creep
[18:08:33] <caze> Can't you do that with ed?
[18:08:35] <sham1> Feature deficit
[18:08:37] <pragma-> But what if a more important task comes in! You need a way to prioritize! And group TODOs by project! And...
[18:08:57] <apotheon> Yes, the opposite of feature creep: something that does its job, is "aware" of what it's supposed to do, and doesn't overcomplicate itself
[18:08:58] <ChoHag_> Surely a todo app _is_ feature creep?
[18:09:00] <Learath2> Well if you don't want things like due dates, categories, priorities you might aswell just shove everything into a json file indeed
[18:09:01] <tk> it needs to be able to send and receive emails
[18:09:04] <pragma-> What about prerequisites! Dependencies!
[18:09:11] <pragma-> Notifications!
[18:09:13] <tk> with an email filtering system
[18:09:14] <pragma-> Alerts!
[18:09:20] <Learath2> Maybe don't even bother with a json file and just use a folder with todo files?
[18:09:25] <tk> a full integrated email client
[18:09:34] <pragma-> What if someone else wants to check up on my TODO list to see what I'm currently working on?
[18:09:39] <ChoHag_> Besides, if you have time to sort out a todo app surely you have time to do your todos?
[18:09:49] <slayne> Scratch that, TODO APP are way too complex :D
[18:10:10] <apotheon> I see tk thought of the same kind of thing that came to my mind -- the idea that every piece of software evolves toward supporting email, at which point it becomes obsolete.
[18:10:12] <pragma-> What if someone wants to subscribe to my TODO list?
[18:10:13] <sham1> org-mode brings all the good things
[18:10:21] <pragma-> What if someone wants to Like or Dislike a task on my TODO list?
[18:10:23] <pragma-> This is important!
[18:10:42] *** Joins: System_Error (~SystemErr@user/systemerror)
[18:10:43] <apotheon> I'm pretty fed up with every piece of software acquiring unnecessary bells and whistles until it's unusable.
[18:10:57] <ChoHag_> It's usable as an orchestra.
[18:11:06] <slayne> I do use org-mode daily, it's great, I'm just a beginner in C and was thinking that a TODO app might be a nice little project. It was either that or a Lisp compiler, which is way over my head haha :D
[18:11:20] <apotheon> an "orchestra" of people who never learned to read sheet music or, for that matter, play their instruments
[18:11:31] <pragma-> Auto-tune will fix that.
[18:11:45] <NRK[m]> a trivial todo app can be written in like 10 lines of shell script
[18:11:49] <pragma-> Do we have AI-powered auto-tune yet?
[18:12:02] <ChoHag_> pragma-: Musicians have AI.
[18:12:09] <NRK[m]> i don't see how it would be too complex in C. u just need some boiletplate for IO
[18:12:20] <pragma-> toiletplate
[18:12:36] <NRK[m]> u know what i meant to type!
[18:12:36] <apotheon> slayne: If that's your motivation, *definitely* don't overcomplicate it (at first, at least).  Just write a simple todo list program with a dead-simple file format like ini.
[18:12:59] <apotheon> slayne: If you want to add/change features until it's unusable after that as an exercise in learning, that's cool.
[18:13:04] <apotheon> . . . but start small.
[18:13:18] <tk> apotheon: I worked for a company developing a dental practice management system and at one point I had to try to persuade them that implementing their own email client won't be a walk in the park and aside from sending emails and handling the replies to those emails automatically, general email traffic should definitely be handled by an external client.
[18:13:55] <ChoHag_> I worked for a company who's client was trying to install a dental practice management system.
[18:13:58] <tk> There was also a feature which required a web view but the platform in use was so outdated that all the web views were throwing SSL errors and I tried to suggest that maybe performing paypal payments could just be offloaded to an external web browser
[18:14:17] <apotheon> slayne: You could even write it as a shell script first, then translate it to C, then improve the code, as a way to get started.  That's actually how I wrote Queuer, the todo tool whose help output I shared a little bit ago.
[18:14:21] <ChoHag_> After a lot of similar experiences, my recommendation for such things is generally a diary and a pen.
[18:14:27] <tk> there was this rather strict mindset of "it must all be done in the same window"
[18:14:54] <apotheon> tk: I'm glad you did that good work of arguing against extreme bloat.
[18:14:55] <ChoHag_> tk: It was almost exactly as what you'd expect from the sort of people who you are describing.
[18:14:56] <pragma-> you... you expect hygenists and dentists to know how to alt-tab? you mad lad.
[18:15:22] <sham1> They're doctors, not nerds
[18:15:40] <apotheon> ChoHag_: I mostly just use a pocket journal these days.
[18:15:59] <slayne> apotheon: That's not a bad idea actually, thanks for the suggestion. Care to link your Queuer so I can check it out ? :)
[18:16:07] <pragma-> I watched a doctor struggle to open a cardboard orange juice carton by prying its glued/sealed lips apart instead of screwing the plastic cap off.
[18:16:10] <pragma-> So...
[18:16:18] <apotheon> slayne: sure, incoming in a PM
[18:16:25] <apotheon> slayne: as soon as I find the link again
[18:16:29] <tk> the problem is hygienists and dentists will be using the charting part of the system, appointment management is a receptionist task, you would hope a receptionst can comprehend taskbar items and be able to switch tasks between the web browser where they probably already have facebook loaded and the task for the software.
[18:16:30] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[18:16:30] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[18:16:30] *** Joins: wroathe (~wroathe@user/wroathe)
[18:16:47] <pragma-> Why not just link it in the channel?
[18:16:55] <tk> the system?
[18:16:56] <apotheon> slayne: sent
[18:16:57] <pragma-> There might be 2 or 3 other people interested in looking but they don't want to ask as well.
[18:17:05] <tk> oh, you were talking to slayne
[18:17:10] <pragma-> No, apotheon's queue thing.
[18:17:14] <tk> wait no, you were talkint to apotheon
[18:17:20] <ChoHag_> tk: How many dentists, hygienists and receptionists were involved in building the system?
[18:17:26] <tk> ChoHag_: very few :P
[18:17:30] <caze> pragma-: Was the doctor a gyno?
[18:17:36] <apotheon> pragma-: okay, fine; be gentle
[18:17:40] <pragma-> caze: gross
[18:17:41] <slayne> Damn, now I have to see how to switch channels on weechat lol
[18:17:51] <apotheon> https://fossrec.com/u/apotheon/q
[18:18:05] <apotheon> I sent a longer version of the link to slayne anyway; shoulda used this shorter version.
[18:18:12] <NRK[m]> creative naming
[18:18:17] <tk> ChoHag_: I kept pointing out that if you keep building software for the stupidest possible target audience then you'll forever be re-implementing shitty versions of every feature until you have effectively created a shitty operating system.
[18:18:40] <apotheon> tk: Did they take that well?
[18:18:53] <NRK[m]> tk: that's windows
[18:18:58] <apotheon> I find that with most people arguing for good sense is futile, in a business setting.
[18:19:05] <pragma-> lol, I target the lowest common denominator when I write code, and it's so annoying. I have to double and triple check all the options and flags to make sure none conflict and I have to write extensive help that explains the utmost basic obvious things.
[18:19:13] <tk> I think after years of attrition I got them to realise that maybe having people use an external email client isn't the worst idea
[18:19:21] <ChoHag_> Ah but if you can get software for the stupidest people you can hire cheaper staff.
[18:19:34] <ChoHag_> All you need to do is put a few highly-paid programmers on staff.
[18:19:38] *** Quits: sokan (~sokan@athedsl-4548055.home.otenet.gr) (Quit: Reality.is.a.lie)
[18:19:57] *** Joins: sokan (~sokan@athedsl-4548055.home.otenet.gr)
[18:20:00] <pragma-> apotheon: tsk, you gave in and tolerate mirroring on github
[18:20:19] <ChoHag_> These systems for small business, etc. are always designed the wrong way around.
[18:20:20] <pragma-> this is one of the great things about git, it's so easy to painlessly mirror repos
[18:20:34] <apotheon> pragma-: Is that a problem?
[18:20:39] <ChoHag_> They should start off by taking whatever is currently performed and making that "the process", then slowly digitising individual parts of it.
[18:21:02] <pragma-> apotheon: no, I'm just amused because you seem like the sort of greybeard to stubbornly refuse to touch github with a 50 foot pole.
[18:21:24] <apotheon> I'm tempted to give up on Fossil at this point.  In and of itself, I still prefer it over Git, but a combination of some poor decisions in Fossil dev in recent years with huge social friction against Fossil is wearing me down.
[18:21:51] <apotheon> I'd be more likely to use Gitea if I go that route, though, than Fossil.
[18:22:07] <caze> Anyone ever use Filemaker?
[18:22:23] <wroathe> I just save a new copy of every file I edit
[18:22:28] <apotheon> pragma-: I do dislike some things about GitHub, to be sure.  I just kinda think of it as advertising, and considering I'm such shit at marketing I should perhaps consider accepting all the free help I can get.
[18:22:31] <wroathe> None of this new-fangled fancy nonsense
[18:23:14] <NRK[m]> based
[18:23:14] *** Joins: aqua (~aqua@user/aqua)
[18:23:20] <apotheon> pragma-: I did go so far as to write a Fossil->Git mirror management tool, though after a couple years Fossil broke it by changing the interface and I never bothered to update it.
[18:23:32] *** Quits: magla (~gelignite@55d457f6.access.ecotel.net) (Quit: Stay safe!)
[18:23:33] *** Quits: kish` (~aqua@user/aqua) (Ping timeout: 276 seconds)
[18:24:13] <apotheon> pragma-: Hilariously, my metal-ish almost-three-inch chin beard is grey, making me a literal greybeard now, though none of the hair on my head is grey.
[18:24:25] <apotheon> s/on my head/growing from my scalp/
[18:24:38] <wroathe> apotheon: So you're saying the evolution isn't complete yet
[18:24:46] <wroathe> This isn't even your final form
[18:24:55] <apotheon> I'm actually hopeful that the beard stays grey and nothing else turns grey.
[18:25:10] *** Quits: Tom^ (~Tom^@user/tom/x-0773808) (Quit: WeeChat 3.5-dev)
[18:25:27] <apotheon> I have the kind of hair that makes women jealous, and it's essentially zero-maintenance.  I like that.
[18:26:11] *** aqua is now known as kish`
[18:26:25] <wroathe> I'm fully bald except for thick brush-like sideburns
[18:26:46] <apotheon> You're a 19th century guy.
[18:26:53] <wroathe> And a face tattoo
[18:26:57] *** Quits: hiovoltage (~hiovoltag@78.186.68.182) (Quit: Client closed)
[18:27:02] <pragma-> apotheon: where are spec/describe/it/before/after/etc defined?
[18:27:04] <apotheon> Is it a tattoo of a steam engine?
[18:27:23] <sham1> Sideburns are nie
[18:27:26] <sham1> nice*
[18:27:32] <apotheon> pragma-: bdd-for-c.h
[18:27:40] <wroathe> apotheon: No, of a horse and buggy
[18:27:44] *** Joins: xb0o2 (~xb0o2@user/xb0o2)
[18:27:51] <pragma-> interesting
[18:28:05] <apotheon> pragma-: It's imported from the bdd-for-c project (to which I contributed, but it's not my project).
[18:28:18] <apotheon> wroathe: That's a choice.
[18:28:39] <apotheon> This is the most interest I've ever gotten in Q.
[18:28:59] <pragma-> behavior-driven development
[18:29:02] <wroathe> Q?
[18:29:06] <wroathe> What about Q?
[18:29:11] <apotheon> Queruer for long
[18:29:16] <NRK[m]> Qanon
[18:29:16] <apotheon> err
[18:29:21] <apotheon> Queuer
[18:29:23] <sham1> QuakeNet
[18:29:29] <apotheon> NRK[m]: No, not at all, but thanks.
[18:29:34] *** Joins: jmiehe (~Thunderbi@user/jmiehe)
[18:29:41] <wroathe> NRK[m]: Yeah, that's what I think he was saying too
[18:29:52] <wroathe> I was like, "Huh, apotheon is falling prey to Qanon. This should be fun."
[18:30:08] <NRK[m]> ahh, yes the classic "deny and try to hide"
[18:30:17] <NRK[m]> we've smelled you out, there's no escape apotheon
[18:30:26] <wroathe> Yeah, apotheon
[18:30:30] <apotheon> fucking hell
[18:30:54] <APic> Thou shall not swear ;=P
[18:30:58] <apotheon> I hate people.
[18:31:10] <apotheon> GET OFF MY WLAN
[18:31:18] <pragma-> goddamn
[18:31:21] <pragma-> i need to name my wifi that
[18:31:21] <apotheon> damn kids
[18:31:47] <apotheon> pragma-: Go ahead.  I release it under the terms of the DPL.
[18:33:00] *** Quits: dave0 (~davezero@069.d.003.ncl.iprimus.net.au) (Quit: dave's not here)
[18:33:13] *** Joins: skapata (~Skapata@2804:14c:87b0:a6f9:193a:8038:cdb2:3b71)
[18:33:13] *** Quits: skapata (~Skapata@2804:14c:87b0:a6f9:193a:8038:cdb2:3b71) (Changing host)
[18:33:13] *** Joins: skapata (~Skapata@user/skapata)
[18:34:12] *** Joins: cuppajoe (~joe@ip70-171-93-122.no.no.cox.net)
[18:34:20] *** Joins: WAR10CK (~WAR10CK@219.135.63.48)
[18:35:16] *** Joins: constxd (~brad@142.134.38.68)
[18:35:57] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[18:37:55] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[18:38:15] *** Joins: mattroelle (~mattroell@136-26-68-28.cab.webpass.net)
[18:39:32] *** Joins: Viewday116 (~Viewday@user/viewday)
[18:40:42] *** Quits: Viewday11 (~Viewday@user/viewday) (Ping timeout: 256 seconds)
[18:40:42] *** Viewday116 is now known as Viewday11
[18:40:50] *** Quits: cuppajoe (~joe@ip70-171-93-122.no.no.cox.net) (Quit: WeeChat 3.3)
[18:41:43] <apotheon> pragma-: Do you hate my C code?
[18:42:16] *** Joins: Jong (~Jong@174.27.0.61)
[18:42:17] *** Joins: ioxzev1z (~ioxzev1z@user/ioxzev1z)
[18:42:37] <pragma-> I'm afraid I got sidetracked by bdd-for-c and started reading about it and then I got sidetracked again by TAP.
[18:42:52] <pragma-> bdd-for-c is pretty neat
[18:43:10] <apotheon> Yeah, I like it.
[18:43:12] *** Joins: Leonardzzz (~Administr@114.55.127.80)
[18:43:19] *** Quits: Leonard (~Administr@114.55.127.80) (Read error: Connection reset by peer)
[18:43:34] <apotheon> Feel free to not read my C code.  I have a low opinion of my own code.
[18:44:03] *** Quits: jfsimon1981 (~jfsimon19@2.65.136.88.rev.sfr.net) (Read error: Connection reset by peer)
[18:44:14] *** Joins: jfsimon1981 (~jfsimon19@2.65.136.88.rev.sfr.net)
[18:45:27] <bdax> well at least you use tabs and the otbs, so you've got that going for you at least
[18:45:46] <apotheon> Why am I not catching on to what "otbs" means?
[18:45:56] <bdax> https://en.wikipedia.org/wiki/Indentation_style#Variant:_1TBS_(OTBS)
[18:45:59] <pragma-> Doesn't 1tbs mandate always using {} even for one-line ifs?
[18:46:11] <apotheon> Oh, that.
[18:46:44] <apotheon> Yeah, I 98% agree with OTBS, I think.
[18:46:45] <bdax> I think so pragma-, personally I sometimes don't use braces
[18:47:00] <apotheon> probably also true of KNF
[18:47:42] <apotheon> My rule of thumb is that one-line ifs are only one-line ifs if the code fits on the same line as the condition within 80 columns.
[18:47:55] *** Quits: jfsimon1981 (~jfsimon19@2.65.136.88.rev.sfr.net) (Remote host closed the connection)
[18:48:00] <apotheon> . . . so I'm clearly weird, by most people's standards.
[18:48:08] *** Joins: brad_mssw|mac (~bhouse@172.110.173.17)
[18:48:53] <apotheon> . . . and I don't mix unbraced one-line with braced stuff in a single if/else if/else.
[18:49:30] *** Quits: brad_mssw (~bhouse@2620:134:c001:100:948a:1f33:b479:c640) (Ping timeout: 268 seconds)
[18:49:34] <zwr> that's what I do too, I think it's good
[18:49:48] <apotheon> high five
[18:50:03] <zwr> o/\o
[18:50:20] <apotheon> How have I never seen that o/\o construction be fore?
[18:50:26] <apotheon> s/ fore/fore/
[18:50:54] <pragma-> up high! o/   down low! o_  haha, too slow!
[18:50:54] *** Quits: craekz (~craekz@user/craekz) (Ping timeout: 256 seconds)
[18:50:59] <apotheon> and I suddenly notice my /\ characters are not symmetrical in this font, for some reason
[18:52:46] *** Joins: craekz (~craekz@user/craekz)
[18:53:44] *** Quits: pulse (~pulse@user/pulse) (Remote host closed the connection)
[18:54:05] *** Joins: pulse (~pulse@user/pulse)
[18:54:24] <apotheon> bdax: One nice thing about tabs is that nobody has to know my tab width is four columns.
[18:54:27] <apotheon> oops, outed myself
[18:55:38] <bdax> the only thing better than 4 spaces is 3
[18:55:46] <Learath2> people with tab-width set at 8 are weird
[18:55:47] * bdax braces self for the barrage
[18:55:56] <Learath2> anything less than 3 is punishable by death
[18:56:10] <Learath2> s/3/4/
[18:56:10] *** Quits: off^ (~off@207.5.21.20) (Remote host closed the connection)
[18:56:16] <bdax> :(
[18:56:18] <earnest> RIP google
[18:56:50] <clarity> I've been using 1 or 2 recently
[18:56:52] <clarity> 1 is nice
[18:57:03] <caze> 2 is okay if your font size is 48.
[18:57:34] <earnest> Google recommends 2
[18:57:37] <Learath2> 2 spaces for indent is a sin for which you must repent
[18:57:51] <earnest> Google also recommends using .sh for bash scripts
[18:57:58] <earnest> They're not exactly the brightest people
[18:58:11] *** Quits: acerbic (~acerbic@cs-xdata-50-86-50-90.cspire.com) (Read error: Connection reset by peer)
[18:58:58] *** Quits: iomari891 (~iomari891@197.210.55.212) (Quit: WeeChat 3.3)
[18:59:38] <Learath2> I'm fairly certain people that indent braces are all psychopaths, literally certifiable
[18:59:48] <NRK[m]> i've been boolin with 8 space-wide tabs recently
[18:59:54] <NRK[m]> pretty cozy
[19:00:56] <earnest> I wish editors were more adept, out of the box, to handle tabs for indentation and spaces for alignment.  It provides all the promises of tabs with none of the weirdness
[19:01:19] <NRK[m]> yes, suckless guys do that
[19:04:13] *** Quits: Fairy (~Fairy@2001:464a:4992:0:bdfd:8ef1:211a:77dc) (Ping timeout: 240 seconds)
[19:05:10] *** Joins: jfsimon1981 (~jfsimon19@2.65.136.88.rev.sfr.net)
[19:05:41] *** Quits: jfsimon1981 (~jfsimon19@2.65.136.88.rev.sfr.net) (Client Quit)
[19:05:51] *** Joins: Leonard (~Administr@114.55.127.80)
[19:05:56] <sham1> One of the few things Suckless does nicely
[19:05:58] *** Joins: jfsimon1981 (~jfsimon19@2.65.136.88.rev.sfr.net)
[19:06:39] <smlavine> I use 8-wide tabs
[19:07:01] *** Quits: nwulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Read error: Connection reset by peer)
[19:07:21] <Learath2> 8 tabs looks so disconnected
[19:07:38] <sham1> Rainbow indentation
[19:07:43] <apotheon> bdax: I strongly disagree with odd-numbered-column indents.
[19:08:17] *** Quits: Leonardzzz (~Administr@114.55.127.80) (Ping timeout: 240 seconds)
[19:08:17] <dmlloyd> I indent by points, and furthermore the number of points increases with the square of the indent level
[19:08:18] <apotheon> (except five-column indents for paragraphs, because fnord is five letters)
[19:08:32] <bdax> psh, any particular reason?
[19:08:50] <apotheon> one-column indents are awful
[19:09:05] <apotheon> Some languages are good with two-column indents, but that's not enough for C.
[19:09:08] <dmlloyd> indenting to the next prime column number
[19:09:26] <Learath2> fibonacci ident or bust
[19:09:29] <bdax> not sure even vim supports that one
[19:09:31] <sham1> Fibonacci or pi indentation
[19:09:39] <apotheon> 08:27 < earnest> Google also recommends using .sh for bash scripts
[19:09:40] <apotheon> 08:27 < earnest> They're not exactly the brightest people
[19:09:41] <fizzie> Obligatory reference to the objectively best C brace style, https://0x0.st/-b_U.c
[19:09:42] <apotheon> hell yes
[19:09:44] <apotheon> not the brightest
[19:10:12] <Learath2> ,report fizzie
[19:10:12] <sham1> fizzie: not pythonic enough
[19:10:12] <candide> f​izzie has been reported (report id 36774)
[19:10:21] <Inline> braces all alone in their own lines
[19:10:30] <earnest> fizzie: That is excellent
[19:10:36] <bdax> fizzie: that's incredible, that person needs introducing to lua
[19:10:39] <Inline> that's the best, but i think k&r style is ok too
[19:10:50] <sham1> I like K&R. Well, Linux variation and also the BSD Kernel Normal Form
[19:11:01] <sham1> Sadly KNF can't be done by clang-format
[19:11:01] *** Quits: freep (~freepppp@62.1.174.38.dsl.dyn.forthnet.gr) (Read error: Connection reset by peer)
[19:11:03] <Inline> i think i don't know the others
[19:11:33] <apotheon> bdax: even-numbered column indents are more width-discernible and, weirdly, just tend to look better
[19:12:13] <sham1> Even numbered indents are probably more balanced
[19:12:18] <sham1> Since, well, even numbers
[19:12:21] <apotheon> fizzie: you're fired
[19:12:23] <Inline> braces all alone is really the best looking however it's not the most compact
[19:12:44] <Inline> and so sometimes for short things not necessary either
[19:13:01] *** Joins: malina (~malina@user/malina)
[19:13:09] <apotheon> 08:41 < sham1> Sadly KNF can't be done by clang-format
[19:13:19] <apotheon> I think Clang devs hate BSD Unix devs.
[19:13:26] <Inline> however when the declaration line is itself long enough, it makes sense
[19:13:34] <apotheon> . . . which is kinda sad, considering Clang is preferable to GCC.
[19:13:44] <Inline> err i mean braces all alone makes sense
[19:13:52] <sham1> apotheon: I wouldn't be surprised. Which is weird because the BSDs now use clang mainly (except NetBSD for some things because LLVM isn't portable enough)
[19:14:13] <NRK[m]> Clang is pretty much corpo funded
[19:14:17] <colbyhub> What are some of the more common C formatters and styles?
[19:14:25] <sham1> indent(1)
[19:14:36] <sham1> And then clang-format(1)
[19:14:59] <bdax> I was thinking about clang recently, I can't imagine the kind of people that get the idea that rewriting a beast like gcc is justifiable purely on the grounds of copyright
[19:15:02] <sham1> Just like how you have the original lint(1) and clang-tidy
[19:15:26] <zwr> clang-format's webkit style is pretty close to KNF
[19:15:27] <ioxzev1z> bdax, every now and then you need to rewrite old things
[19:15:28] <apotheon> colbyhub: Who cares?  Just do things right.  (q.v. https://copyfree.fossrec.com/index.cgi/wiki?name=Style . . .)
[19:15:48] <apotheon> (I might have opinions.)
[19:15:54] <zwr> or rather, not "pretty close," but close enough as far as I'm concerned
[19:15:56] *** Joins: acerbic (~acerbic@cs-xdata-50-86-50-90.cspire.com)
[19:15:58] <apotheon> (Mostly, though, I have the Truth.)
[19:16:10] *** Joins: Leonardzzz (~Administr@114.55.127.80)
[19:16:11] <bdax> yeah but for copyright... in my world, copyright is irrelevant
[19:16:13] <zwr> enough that I'm happy with convincing a project with no style to just use clang-format and follow webkit
[19:16:18] *** Joins: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[19:16:22] <johnjaye> i don't think it's just copyright, aren't there things it changes from gcc?
[19:16:48] <bdax> I think it was the original intention at least
[19:17:23] <apotheon> bdax: It's worse than that.  Clang got rewritten with good licensing, then they fucked up the licensing.
[19:17:39] <apotheon> s/rewritten/written/
[19:17:39] <apotheon> oops
[19:17:42] <zwr> clang's competition seems to have made gcc better so it all worked out in the end
[19:17:44] <sham1> Wait, what license did they go to
[19:18:02] <bdax> well that's true, gcc is better now
[19:18:14] <apotheon> johnjaye: Clang's error/warning output is orders of magnitude better than GCC's.
[19:18:20] <colbyhub> sham1: thanks!
[19:18:24] <bdax> do you mean the llvm exceptions apotheon ?
[19:18:33] <zwr> the static analyzer is also really good
[19:18:39] <zwr> the LSP too
[19:18:44] <Learath2> clangs source is also much better, digging into gcc source is always pain
[19:18:47] <apotheon> sham1: AL2
[19:19:18] <bdax> let it be known, public domain is the best licence
[19:19:22] <apotheon> Learath2: s/gcc/GNU-project/
[19:19:29] <apotheon> superset of GCC
[19:19:39] *** Quits: Leonard (~Administr@114.55.127.80) (Ping timeout: 256 seconds)
[19:19:43] <apotheon> bdax: except that public domain dedication doesn't work everywhere
[19:19:53] <bdax> ugh, those pesky germans
[19:19:59] <apotheon> not just Germany
[19:20:00] <zwr> BSD 0-clause to the rescue
[19:20:37] <apotheon> There's also the problem that in Norway something in the public domain might be assigned by the government to be managed by a "rights management" company whose whole job seems to be to charge licensing fees for using things in the public domain.
[19:20:47] <apotheon> zwr: That's a good one.
[19:21:02] <apotheon> AL2 gets a lot of good press, but it sucks.
[19:21:21] <bdax> :| that's mad, Norway doesn't normally suck that bad
[19:21:49] <Learath2> Wait wait wait, norways government can literally open up the public domain for exploitation? truly neoliberal
[19:21:54] <bdax> CC0 is probably the way to go practically speaking
[19:22:01] <apotheon> I just gave up and use very unrestrictive licenses.
[19:22:27] <Learath2> I usually go for BSD or MIT
[19:22:47] <apotheon> Learath2: Any government can do that.  US Congress pulled something that had been public domain because it was pre-1920s out of the public domain and assigned ownership for it.
[19:23:06] <apotheon> Learath2: Which BSD license do you use?
[19:23:18] <apotheon> Revised?  Simplified?
[19:23:26] <apotheon> 0BSD?
[19:23:27] <bdax> apotheon: ownership to who? that's completely insane
[19:23:29] <apotheon> pelase not original
[19:23:42] <apotheon> bdax: I think it was the Romanian government or some such shit.
[19:24:09] *** Joins: inlight (~inlight@157.35.46.171)
[19:24:09] *** Quits: inlight (~inlight@157.35.46.171) (Changing host)
[19:24:09] *** Joins: inlight (~inlight@user/inlight)
[19:24:11] <Learath2> The 2C one, so simplified
[19:24:13] <apotheon> Some central or eastern European government complained that something was PD in the US, and Congress said "Okay!  Let's fuck over everyone using it."
[19:24:21] <bdax> bizarre.. copyright should just be abolished
[19:24:25] <APic> What does Licensing-Stuff have to do with C Programming? Could You please shift that to #c-offtopic? 😉
[19:24:35] <apotheon> Learath2: definitely better than Revised, though Revised is quite good too
[19:24:38] <NRK[m]> clang has better warnings, yeah.
[19:24:38] <bdax> no more wars between gnu and bsd
[19:24:42] <apotheon> bdax: agreed
[19:24:53] <NRK[m]> but compile times are noticeably better with gcc
[19:25:16] <apotheon> Don't write C++ and you won't notice compile times as much.
[19:25:25] <Learath2> APic: we are lacking exactly one C question to be overly pedantic about
[19:25:28] <NRK[m]> bdax: yeah because gnu won :)
[19:25:53] * APic grins magically.
[19:26:04] <APic> Learath2: Do not take me too serious 😉
[19:26:08] <bdax> lmao, the hippies always win
[19:26:11] <apotheon> The only way I accept GNU winning is if GNU winning means all copyright goes away (including copyleft).
[19:26:11] <NRK[m]> apotheon: i was talking about C
[19:26:32] <apotheon> NRK[m]: I was making a "ha ha only serious" joke.
[19:26:37] <apotheon> re: C++
[19:26:44] <Learath2> communal ownership of all IP when?
[19:26:50] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[19:26:55] <apotheon> define "communal"
[19:26:58] <apotheon> "ownership"
[19:27:18] <apotheon> I'm thinking more like "it's infinitely copyable, so there's no ownership".
[19:27:25] <ChoHag_> "Theft"
[19:27:41] <apotheon> Copying and theft are different things.
[19:27:44] <bdax> you wouldn't download a car
[19:27:50] *** Quits: nf (~n@monade.li) (Quit: Fairfarren.)
[19:27:52] <apotheon> With theft, someone loses a chair, and someone else gains it.
[19:27:58] <apotheon> With copying, both of them have chairs.
[19:27:59] <johnjaye> maybe you should write an article. "What is the GPL? The GPL IS THEFT!"
[19:28:02] <ChoHag_> Why would I not download a car?
[19:28:25] <bdax> I misquoted: https://en.wikipedia.org/wiki/You_Wouldn%27t_Steal_a_Car
[19:28:27] <ChoHag_> If I could download a car I would, then upload it when I've finished with it so it's not lying around being a liability.
[19:28:29] *** Joins: freep (~freepppp@62.1.174.38.dsl.dyn.forthnet.gr)
[19:28:34] <apotheon> If I could download the car of my dreams, I'd have to buy a lot of filament for a 3D printer.
[19:28:50] <ChoHag_> I'd keep a local backup on the NAS too.
[19:28:55] <apotheon> good plan
[19:29:16] <clarity> I'd need to download a 3d printer first.  Download some filament too.
[19:29:37] <clarity> Or, screw it, just download money and then buy all that.
[19:30:47] *** Joins: zmt00 (~zmt00@user/zmt00)
[19:31:08] <bdax> clarity just collapsed the economy, gj
[19:31:52] <Learath2> neoliberals hate this one simple trick
[19:32:16] <apotheon> Too bad; clarity was enhancing the economy until downloading money happened.
[19:32:44] <apotheon> . . . unless we're talking about mining cryptocurrencies.
[19:32:49] <clarity> :)
[19:32:57] <apotheon> . . . preferably with software written in C so it's topical.
[19:34:10] <apotheon> I seem to have avoided people tearing me apart for my C code.  Whew.
[19:35:31] *** Quits: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 256 seconds)
[19:35:33] <apotheon> Maybe it's being stored up for later, to disagree with my opinions on something C-related: "Bro, you don't get to have an opinion, 'cause your code is shit."
[19:35:35] <kit> is the api for networking different on android cuz i cant seem to make my irc bot do anything when running it on android but it runs perfectly fine on other systems
[19:37:10] <kit> like none of the functions return an error but yet when i do recv it never recieves anything
[19:37:31] *** Joins: nf (~n@monade.li)
[19:37:35] *** Joins: Leonard (~Administr@114.55.127.80)
[19:38:21] *** Joins: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[19:39:37] *** Quits: Leonardzzz (~Administr@114.55.127.80) (Ping timeout: 240 seconds)
[19:39:58] <sham1> Do you have the permissions
[19:40:14] <kit> i mean
[19:40:25] <kit> im running weechat on termux perfectly fine
[19:40:35] <kit> so it should
[19:40:53] <kit> but if you mean if my device is rooted then no
[19:41:09] <sham1> No, just because you have termux and such running doesn't mean that your app can do stuff
[19:41:17] <sham1> Or is it running under termux
[19:41:24] <kit> running under termux
[19:41:30] <kit> sorry i should have clarified
[19:42:06] *** Joins: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl)
[19:46:13] *** Quits: brad_mssw|mac (~bhouse@172.110.173.17) (Read error: Connection reset by peer)
[19:46:25] *** Joins: brad_mssw (~bhouse@2620:134:c001:200:c93d:56f8:da1b:c555)
[19:47:18] <ioxzev1z> apotheon, upload some codez and let the criticism commence
[19:47:34] <apotheon> You missed your chance.
[19:47:36] <johnjaye> termux does say somewhere it has restrictions if you're not rooted iirc
[19:47:37] *** Joins: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net)
[19:48:02] <johnjaye> they had to stop  updating the app store because of something about executing other files also
[19:48:08] <johnjaye> now you have to install it from f-droid
[19:48:16] <kit> ya im using the f droid one
[19:48:18] <ioxzev1z> apotheon, just now read the ~50 line backlog
[19:48:36] <johnjaye> confusingly the app store one is still there
[19:48:40] <johnjaye> i got bitten by this lol
[19:48:47] <kit> but i know that tcp is working bc i can use weechat
[19:48:57] *** Quits: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Read error: Connection reset by peer)
[19:49:12] <kit> unless it only applies to non-repository installed applications
[19:49:12] *** Joins: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[19:51:42] <apotheon> kit: I'm curious about the answer to your problem, so please ping me if you get a good answer.
[19:52:01] <apotheon> (I won't hold it against you too much if you forget.)
[19:52:26] <kit> lol
[19:52:39] <kit> i cant be online for a while after this bc i have class but after ill logread
[19:54:13] *** Joins: pingpongball (~pingpongb@43.228.192.123)
[19:54:29] <pingpongball> Do you guys suffer from depression and anxiety?
[19:54:37] *** Joins: the_lanetly_052 (~the_lanet@185.30.89.77)
[19:54:48] <pingpongball> oh offtoipc
[19:55:04] *** Joins: Tom^ (~Tom^@user/tom/x-0773808)
[19:55:57] *** Quits: the_lanetly_052_ (~the_lanet@194.135.167.186) (Ping timeout: 240 seconds)
[19:56:10] <apotheon> pingpongball: No, I don't write Java.
[19:56:15] *** Quits: rindolf (~shlomif@inkscape/dev/shlomif) (Read error: Connection reset by peer)
[19:56:18] <apotheon> . . . or PHP.
[19:56:21] <apotheon> lots of C
[19:56:34] <apotheon> Vitamin C helps combat those things.
[19:56:36] *** Joins: rindolf (~shlomif@inkscape/dev/shlomif)
[19:56:55] <apotheon> C programming is my favorite video game.
[19:58:13] *** Joins: iomari891 (~iomari891@197.210.54.48)
[19:58:18] <slayne> pingpongball: I do struggle with Generalized Anxiety Disorder, PTSD & depression, I'm in a good place now :)
[19:58:40] <apotheon> slayne: Was it the vitamin C?
[19:59:42] <slayne> apotheon: Supplements did help, but no, mostly meditation, CBT, exercises & lifestyle changes.
[20:00:07] <apotheon> I was making a C joke.
[20:00:26] <slayne> Haha, it was actually good even if I just got it :D
[20:00:31] <apotheon> . . . but it's cool you were able to deal with it in such a healthy way.
[20:00:49] <slayne> Yeah, programming helps as well, it's a nice distraction from all the noise!
[20:00:50] *** Joins: echoSMILE (uid504326@user/echosmile)
[20:01:08] <apotheon> good deal
[20:01:12] <slayne> apotheon: Thanks, it's been a ride!
[20:01:32] <apotheon> I'm trying to think of things to say about C.
[20:01:35] <apotheon> um
[20:01:40] <apotheon> Pointers are underused.
[20:01:45] <apotheon> There we go.
[20:01:46] <johnjaye> forget c. use vala
[20:01:53] <slayne> It helps you C better..
[20:01:54] *** Parts: earnest (~earnest@user/earnestly) (WeeChat 3.4)
[20:01:56] <johnjaye> it's even better than D
[20:02:20] <apotheon> johnjaye: Why?  Vala doesn't even have a libera.chat channel.
[20:02:48] <apotheon> (or at least not one that isn't hidden from alis)
[20:03:11] *** Joins: WilliamLeara (~wdl@cpe-76-185-2-28.tx.res.rr.com)
[20:04:27] <sham1> Vala is nice if you want to do stuff in the GTK and GNOME ecosystem
[20:05:22] <apotheon> I don't, really.
[20:05:46] <sham1> Understandable
[20:06:00] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Remote host closed the connection)
[20:06:24] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[20:06:29] *** Joins: odoood (~odoood@2601:c8:c000:c4e0::3)
[20:06:29] *** Quits: odoood (~odoood@2601:c8:c000:c4e0::3) (Remote host closed the connection)
[20:07:09] <apotheon> thanks
[20:07:12] *** Joins: Leonardzzz (~Administr@114.55.127.80)
[20:08:55] *** Joins: V-T60 (~v@gateway/tor-sasl/v-t60)
[20:09:40] *** Quits: spidermonkey54 (uid527699@id-527699.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[20:10:39] *** Quits: Leonard (~Administr@114.55.127.80) (Ping timeout: 256 seconds)
[20:11:53] <V-T60> Actually this exercise from "Modern C" isn't hard https://i.imgur.com/9Fwtrhd.png
[20:16:38] <nomagno> apotheon: I wouldn't use presence on Liberal Chat as a metric, but else agreed
[20:16:54] <nomagno> Libera Chat*
[20:17:12] *** Joins: Akiva (~Akiva@user/Akiva)
[20:18:09] *** Quits: kts (~kts@103.73.237.237) (Quit: Konversation terminated!)
[20:19:09] <pragma-> nomagno: oh, I see what you think of this network now.
[20:20:03] *** Joins: mahmutov (~mahmutov@37.155.22.205)
[20:21:09] <summonner> V-T60, that example seems to not get avacado correct
[20:21:17] *** Joins: trafficjam (~trafficja@119.17.42.59)
[20:21:43] <caze> (by strlen())
[20:21:48] <trafficjam> is this difficult? https://www.youtube.com/watch?v=FaILnmUYS_U
[20:21:49] <candide> Title of trafficjam's link: I made an entire OS that only runs Tetris - YouTube
[20:22:04] <summonner> ah, so so
[20:22:25] * summonner runs and hides
[20:22:47] *** Joins: oxfuxxx (~oxfuxxx@139.28.218.188)
[20:23:53] <caze> V-T60: It would be more interesting if you showed your solution, and not just the output.
[20:24:06] *** Quits: agonhajdari (~textual@user/agonhajdari) (Quit: My Mac Mini has gone to sleep. ZZZzzz…)
[20:24:23] *** Joins: strajder (~strajder@user/strajder)
[20:24:37] *** Joins: agonhajdari (~textual@user/agonhajdari)
[20:24:53] <sham1> trafficjam: I love that video, although there are some no-no parts there with the way he made the OS work
[20:25:59] *** Quits: Leonardzzz (~Administr@114.55.127.80) (Read error: Connection reset by peer)
[20:26:10] *** Joins: Leonardzzz (~Administr@114.55.127.80)
[20:27:04] <trafficjam> i have no idea how he did any of it tbh lol
[20:27:29] <trafficjam> seems like damn magic
[20:31:09] <nomagno> pragma-: What?
[20:31:30] <nomagno> I mean, it's a really arbitrary metric
[20:32:02] <nomagno> I guess apotheon searched for it quickly, didn't go on the internet looking for other communities. Which is why he mentioned it
[20:32:38] <nomagno> It just sounded to me like some kind of quantitative valuing of the popularity, which it probably wasn't
[20:32:57] *** Quits: imm_ (~imm_@user/imm/x-3405860) (Ping timeout: 240 seconds)
[20:34:48] *** Joins: kts (~kts@103.73.237.237)
[20:34:54] <nomagno> (They do have an IRC channel on irc.gnome.org)
[20:35:02] *** Quits: vysn (~vysn@user/vysn) (Ping timeout: 240 seconds)
[20:35:10] *** Joins: imm_ (~imm_@user/imm/x-3405860)
[20:36:58] <pragma-> I meant the "Liberal Chat" thing
[20:37:14] <nomagno> Oh
[20:37:14] <nomagno> :P
[20:37:30] <nomagno> These damn radicals!
[20:37:45] *** Quits: pingpongball (~pingpongb@43.228.192.123) (Quit: pingpongball)
[20:37:48] <sham1> nomagno: yeah, I would imagine the Vala channel being at GIMPNet
[20:38:21] <nomagno> ... I'm not sure I can non-offensively jokingly appear conservative, so I'll refrain
[20:38:39] <trafficjam> sham1: is everything in `src` written from scratch? https://github.com/jdah/minecraft-weekend
[20:38:40] <candide> Title of trafficjam's link: GitHub - jdah/minecraft-weekend: Minecraft, but I made it in 48 hours.
[20:38:55] <apotheon> nomagno: It wasn't about popularity, per se.
[20:38:58] *** Quits: omegatron (~some@p5484973e.dip0.t-ipconnect.de) (Quit: What happened? You quit!)
[20:38:59] *** Quits: Akiva (~Akiva@user/Akiva) (Ping timeout: 256 seconds)
[20:39:09] <apotheon> nomagno: It was more of a joke about the kinds of people who (don't) use it.
[20:39:15] <sham1> trafficjam: if I remember that video by jdh, yes
[20:39:56] <trafficjam> in a weekend... how is that even possible
[20:40:13] *** Joins: Leonard (~Administr@114.55.127.80)
[20:40:15] <apotheon> methamphetamines
[20:40:31] *** Joins: skapate (~Skapata@2804:14c:87b0:a6f9:406a:ebc:a997:9963)
[20:40:31] *** Quits: skapate (~Skapata@2804:14c:87b0:a6f9:406a:ebc:a997:9963) (Changing host)
[20:40:31] *** Joins: skapate (~Skapata@user/skapata)
[20:41:39] <apotheon> also, not using Java
[20:41:58] *** Quits: Leonardzzz (~Administr@114.55.127.80) (Ping timeout: 256 seconds)
[20:42:09] *** Quits: mrig (~mrig@user/mrig) (Quit: Going offline, see ya! (www.adiirc.com))
[20:42:22] *** Quits: fe23 (~fe23@2409:8a34:464:4990:1b5:d33b:e66f:3b6f) (Quit: fe23)
[20:42:57] *** Quits: skapata (~Skapata@user/skapata) (Ping timeout: 240 seconds)
[20:43:25] *** Joins: lukedashjr (~luke-jr@user/luke-jr)
[20:44:05] *** Quits: luke-jr (~luke-jr@user/luke-jr) (Ping timeout: 256 seconds)
[20:44:10] <apotheon> I'm quite impressed with minecraft-weekend so far.
[20:45:04] *** lukedashjr is now known as luke-jr
[20:46:12] <nomagno> What's minecraft weekend?
[20:47:42] <apotheon> https://github.com/jdah/minecraft-weekend
[20:47:43] <candide> Title of apotheon's link: GitHub - jdah/minecraft-weekend: Minecraft, but I made it in 48 hours.
[20:48:11] <nomagno> Oh...
[20:48:18] <nomagno> This can't have been written in pure C
[20:48:34] <apotheon> https://github.com/jdah/minecraft-weekend/tree/master/lib
[20:48:35] <candide> Title of apotheon's link: minecraft-weekend/lib at master · jdah/minecraft-weekend · GitHub
[20:48:39] <nomagno> I legit wouldn't know where to start making such a game if I only had 24hrs
[20:48:46] <caze> You can't do much in pure C.
[20:48:51] <nomagno> Ah
[20:48:57] <nomagno> Libraries, tons of them
[20:49:18] <nomagno> Cheater! Real coders use pure C + X11
[20:49:23] <nomagno> /s
[20:49:32] <Teckla> Pffft, I can write Minecraft in a few seconds.  system("minecraft.exe"); /* done! */
[20:50:15] <trafficjam> does it use many 3rd party libraries?
[20:50:23] <apotheon> not many
[20:50:29] <apotheon> see my last link
[20:50:42] <apotheon> I see five.
[20:51:00] <apotheon> (I haven't checked recursive dependencies, of course.)
[20:52:03] <nomagno> Teckla: ./minecraft.exe: cannot execute binary file: Exec format error
[20:53:23] <kit> unix moment
[20:53:30] <nomagno> apotheon: It depends at the very list on math and 3D libraries, OpenGL, X11
[20:53:50] *** Joins: duuude (~user@user/duuude)
[20:54:10] <pragma-> I remember looking at that 48 hour minecraft thing before. IIRC the only thing it can do is render a world that /looks/ like minecraft. Can you even hit and destroy blocks and dig?
[20:54:32] <nomagno> And mingw
[20:55:33] *** Quits: agonhajdari (~textual@user/agonhajdari) (Quit: My Mac Mini has gone to sleep. ZZZzzz…)
[20:56:27] <trafficjam> pragma-: build it and see for yourself, it's pretty impressive
[20:56:39] <pragma-> trafficjam: from this commit https://old.reddit.com/r/Unexpected/comments/ry4rqy/magical_girls_and_where_to_find_them/
[20:56:41] <pragma-> er
[20:56:44] <pragma-> https://github.com/jdah/minecraft-weekend/tree/cb19738305804b5734faa7118c1c784f26ff9463
[20:56:50] <pragma-> God, why is that other link in my paste buffer.
[20:57:00] <caze> lol
[20:57:22] <caze> She needs to close her lips.
[20:57:24] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[20:57:35] <caze> Wrap them tightly.
[20:58:09] <trafficjam> pragma-: ah is that the original 48-hour version?
[20:58:11] <pragma-> yes
[20:58:14] *** Joins: agonhajdari (~textual@user/agonhajdari)
[20:58:33] <trafficjam> ok fair enough, quite a bit simpler then i imagine
[20:58:55] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[20:58:59] *** Joins: lleo (~leo@188-206-106-226.mobile.kpn.net)
[20:59:16] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Client Quit)
[20:59:44] *** Joins: meator (~meator@user/meator)
[21:00:16] *** Joins: mrig (~mrig@user/mrig)
[21:00:50] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[21:00:51] *** Quits: stonkey (~stonkey@user/stonkey) (Remote host closed the connection)
[21:01:31] *** Quits: karthy (~karthy@162.216.143.166) (Quit: Client closed)
[21:01:58] *** Joins: Fairy (~Fairy@2001:464a:4992:0:bdfd:8ef1:211a:77dc)
[21:04:05] *** Joins: semeion (~semeion@user/semeion)
[21:05:53] *** Joins: gr33n7007h (~gr33n7007@user/gr33n7007h)
[21:06:40] *** Joins: Leonardzzz (~Administr@114.55.127.80)
[21:08:00] *** Joins: Zambyte (~Zambyte@cpe-104-228-60-14.nycap.res.rr.com)
[21:08:37] *** Joins: AbleBacon (~AbleBacon@user/AbleBacon)
[21:09:49] *** Quits: Leonard (~Administr@114.55.127.80) (Ping timeout: 240 seconds)
[21:10:45] *** Quits: Major_Biscuit (~MajorBisc@c-001-029-007.client.tudelft.eduvpn.nl) (Quit: WeeChat 3.3)
[21:14:23] *** Joins: FluffyMask (~masque@user/fluffymask)
[21:14:37] *** Quits: meator (~meator@user/meator) (Ping timeout: 240 seconds)
[21:14:39] *** Joins: MarderIII (~MarderIII@2001:985:e889:1:cd63:581e:b8dd:6c01)
[21:14:41] *** Joins: Warkruid (~MarderIII@2001:985:e889:1:cd63:581e:b8dd:6c01)
[21:15:58] *** Quits: inomoz (~inomoz@176.59.115.63) (Quit: WeeChat 3.4)
[21:17:51] *** Quits: mahmutov (~mahmutov@37.155.22.205) (Quit: WeeChat 3.1)
[21:18:22] *** Quits: Warkruid (~MarderIII@2001:985:e889:1:cd63:581e:b8dd:6c01) (Client Quit)
[21:20:23] *** Quits: cart_man (~rynot@host-78-144-125-214.as13285.net) (Quit: Konversation terminated!)
[21:20:55] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Ping timeout: 256 seconds)
[21:22:03] *** Quits: zsoltiv_ (~zsoltiv@fibhost-67-12-35.fibernet.hu) (Ping timeout: 256 seconds)
[21:22:37] *** Quits: WilliamLeara (~wdl@cpe-76-185-2-28.tx.res.rr.com) (Ping timeout: 256 seconds)
[21:22:43] *** Joins: rsjw (~quassel@user/rsjw)
[21:23:22] *** Quits: m0shbear (~nope@205.185.119.231) (Ping timeout: 260 seconds)
[21:23:38] *** Joins: kuber (~kuber@97-126-25-4.tukw.qwest.net)
[21:23:52] *** Joins: m0shbear (~nope@205.185.119.231)
[21:24:54] *** Joins: mahmutov (~mahmutov@37.155.22.205)
[21:26:29] *** Joins: Richard_Cavell (uid165693@id-165693.ilkley.irccloud.com)
[21:30:11] *** Quits: nurupo (~nurupo.ga@user/nurupo) (Quit: nurupo.ga)
[21:30:25] *** Joins: nurupo (~nurupo.ga@user/nurupo)
[21:30:44] *** Joins: lukedashjr (~luke-jr@user/luke-jr)
[21:31:06] *** Joins: omegatron (~some@p5484973e.dip0.t-ipconnect.de)
[21:31:17] *** Quits: inlight (~inlight@user/inlight) (Remote host closed the connection)
[21:31:50] *** Quits: semeion (~semeion@user/semeion) (Ping timeout: 256 seconds)
[21:32:49] *** Quits: luke-jr (~luke-jr@user/luke-jr) (Ping timeout: 256 seconds)
[21:33:03] *** lukedashjr is now known as luke-jr
[21:33:56] *** Joins: JeffH (~JeffH@174-16-131-174.hlrn.qwest.net)
[21:34:28] *** Quits: Leonardzzz (~Administr@114.55.127.80) (Read error: Connection reset by peer)
[21:34:38] *** Joins: Leonardzzz (~Administr@114.55.127.80)
[21:35:14] *** Quits: Y4knotiS (~YaknotiS@cpc1-cmbg18-2-0-cust87.5-4.cable.virginm.net) (Ping timeout: 256 seconds)
[21:35:53] *** Joins: vikn (~vikn@46-162-82-40.cust.bredband2.com)
[21:36:07] *** Joins: alefir (~alefir@rrcs-24-43-248-58.west.biz.rr.com)
[21:36:27] *** Quits: lleo (~leo@188-206-106-226.mobile.kpn.net) (Quit: beyond time space in laws)
[21:40:16] *** Quits: vikn (~vikn@46-162-82-40.cust.bredband2.com) (Remote host closed the connection)
[21:42:36] *** Quits: iomari891 (~iomari891@197.210.54.48) (Ping timeout: 256 seconds)
[21:44:20] *** Joins: semeion (~semeion@user/semeion)
[21:50:57] *** Quits: mrig (~mrig@user/mrig) (Quit: Going offline, see ya! (www.adiirc.com))
[21:51:36] *** Joins: inomoz (~inomoz@176.59.115.63)
[21:52:08] *** Joins: dyeplexer (~dyeplexer@user/dyeplexer)
[21:53:17] *** Joins: AmR (~AmREiSa@156.199.28.131)
[21:55:06] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Quit: sord937)
[22:00:47] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:a9bb:faa4:6c28:2bd6)
[22:01:38] *** Quits: JeffH (~JeffH@174-16-131-174.hlrn.qwest.net) (Remote host closed the connection)
[22:02:20] *** Joins: vikn (~vikn@46-162-82-40.cust.bredband2.com)
[22:03:36] *** Joins: meator (~meator@user/meator)
[22:03:40] *** Joins: zer0bitz (~zer0bitz@196.244.192.57)
[22:03:57] *** Quits: vikn (~vikn@46-162-82-40.cust.bredband2.com) (Remote host closed the connection)
[22:07:01] *** Joins: Leonard (~Administr@114.55.127.80)
[22:09:39] *** Quits: Leonardzzz (~Administr@114.55.127.80) (Ping timeout: 256 seconds)
[22:11:15] <nightstrike> do you have to put restrict in both the definition and declaration of a function?
[22:11:30] <sham1> IIRC you have to
[22:11:38] <nightstrike> ok
[22:11:47] <sham1> And besides, it's just a good practice
[22:11:52] *** Joins: tech_exorcist (txrcst@user/tech-exorcist/x-0447479)
[22:11:55] *** Quits: semeion (~semeion@user/semeion) (Ping timeout: 256 seconds)
[22:12:04] *** Joins: Macuser (~Macuser@2600:1003:b445:790e:64d3:be9f:a6c5:ce5a)
[22:12:36] *** Quits: dyeplexer (~dyeplexer@user/dyeplexer) (Remote host closed the connection)
[22:13:12] <nightstrike> and for a multi-dimension array, you just put restrict in the first dimension, right?  like... void f(size_t X, size_t Y, size_t Z, int a[restrict X][Y][Z])   ?
[22:13:33] <sham1> Well you don't need restrict there
[22:13:45] <NRK[m]> you can't pass an array to a function in C
[22:13:50] <sham1> ^
[22:14:06] <sham1> The most you can do is pass a pointer to an array
[22:14:14] <nomagno> Well, you can wrap it in a struct.
[22:14:19] <NRK[m]> :D
[22:14:24] <nightstrike> ........semantics
[22:14:41] *** Joins: gera (~gera@user/gera)
[22:14:43] <NRK[m]> i personally don't use restrict
[22:14:53] <nightstrike> void f(size_t X, size_t Y, size_t Z, int a[X][Y][Z]) is perfectly valid, and gcc is getting a lot better at verifying sizes
[22:15:12] <System_Error> NRK[m]: you can pass struct with arrays and whatever. Also return it.
[22:15:22] <sham1> I'd do f(size_t X, size_t Y, size_t Z, int (*a)[X][Y][Z])
[22:15:31] <NRK[m]> that's passing struct, not array though.
[22:15:33] <sham1> Also structs with arrays aren't the same as arrays. Same with pointers
[22:15:34] <sham1> Yeah
[22:15:58] *** Quits: tech_exorcist (txrcst@user/tech-exorcist/x-0447479) (Remote host closed the connection)
[22:16:35] <nightstrike> This is all tangential to the question of whether int a[restrict X][Y][Z] is restrictive enough
[22:16:59] <nightstrike> or if it has to be int a[restrict X][restrict Y][restrict Z]
[22:17:09] <fizzie> It can't be that.
[22:17:40] <fizzie> You can only put qualifiers in the first pair of brackets, since it's the only one that gets converted to a pointer.
[22:17:46] <sham1> Anyway, for something like this I tend to use restrict: struct vec3 *vec3_sum(struct vec3 *out, struct vec3 *a, struct vec3 *restrict b);
[22:17:51] <sham1> Should generate better code
[22:18:06] <nightstrike> fizzie: thanks
[22:18:22] <nightstrike> sham1: why would the code be better?
[22:18:39] <sham1> Well, let me load up godbolt and I can answer you
[22:18:44] <sham1> It's easier to show it
[22:18:47] <nightstrike> k
[22:18:47] *** Joins: ADHD (~XXX@user/ADHD)
[22:18:57] *** Quits: inomoz (~inomoz@176.59.115.63) (Ping timeout: 240 seconds)
[22:19:01] <nightstrike> godbolt is such a great tool
[22:20:02] <ADHD> Is there any tool in linux for getting stats after running an executable binary? i'm using `time SOME_BIN` to measure the runtime, but i'd like to get more stats. Is there any tool?
[22:20:09] <fizzie> (IOW, `int a[restrict X][Y][Z]` is the equivalent of `int (* restrict a)[Y][Z]`, and applies the restrict qualifier to the pointer `a`.)
[22:20:25] <nightstrike> fizzie: thank you for the extra info
[22:21:08] *** Quits: boB_K7IQ (~boB_K7IQ@c-24-19-3-104.hsd1.wa.comcast.net) (Ping timeout: 256 seconds)
[22:22:08] *** Quits: V-T60 (~v@gateway/tor-sasl/v-t60) (Quit: leaving)
[22:23:03] *** Joins: mrig (~mrig@user/mrig)
[22:23:27] <fizzie> ADHD: There's a number of profiling tools. `gprof` is a pretty classic one. There's also a bunch of sampling-based ones (that tend to be more platform-specific).
[22:23:55] <System_Error> ADHD: try perf maybe? Global system overview is perf top and that'll give you "heavy" funcs in progs or syscalls it triggers
[22:24:02] <nomagno> I believe this anonymous syntax is correct?
[22:24:02] <nomagno> struct mystruct { int arr[40]; } returnarray(struct mystruct param1) { return param1; }
[22:24:14] <nomagno> Struct syntax*
[22:24:25] <nightstrike> I guess int (*a)[X][Y][Z]  has a certain charm to compared to int a[X][Y][Z]...    I'd get enforcement of every dimension, at least
[22:24:45] <fizzie> (`gprof` requires compiling a specific instrumented build though.)
[22:25:11] *** Quits: Whatshisface (~jon@user/Whatshisface) (Quit: BitchX-1.3-git -- just do it.)
[22:25:25] *** Joins: V-T60 (~v@gateway/tor-sasl/v-t60)
[22:25:26] *** Joins: qwertyasda (~Qwerty@wsip-174-71-193-82.lv.lv.cox.net)
[22:25:28] <fizzie> It's not exactly "anonymous" when you're giving the struct a tag, is it?
[22:25:39] <qwertyasda> Wait wdym by anonymous
[22:25:48] <nomagno> Well yeah, not anonymous
[22:26:03] <nomagno> I couldn't really return an anonymous struct even if I wanted to
[22:26:08] <nomagno> At least according to gcc
[22:26:59] <nomagno> I don't get why anonymous struct type signatures are determined by the place they appear in the file
[22:27:08] <nomagno> Instead of their actual composition
[22:27:29] <fizzie> (FTR there's also an entirely different thing officially called an "anonymous struct" or union that has not much to do with that.)
[22:28:10] <sham1> Hm. There was actually no difference in the generated code. Couldn't even get it to autovectorize properly before -O3 and even then I had to add a 4th element and change it a little bit
[22:28:15] <nomagno> ,cc struct { int a; } var1; struct { int a; } var2 = var1;
[22:28:17] <candide> nomagno: error: invalid initializer
[22:28:26] <nomagno> See?
[22:28:36] <sham1> But yeah. Sometimes restrict is useful
[22:28:52] <ADHD> fizzie: Hmm, I see. Seems like the output isn't as easy as I thought: https://termbin.com/17uq
[22:29:14] <ADHD> System_Error: I'll try `perf`
[22:29:16] <sham1> I mean, there's a semantic difference between being restrict vs not restrict, since for example the difference of signatures between memcpy and memmove is that memcpy has restrict while memmove doesn't
[22:29:43] <fizzie> ,cc struct foo { int a; struct { int b, c; }; }; struct foo x = {1, {2, 3}}; printf("%d, %d, %d", x.a, x.b, x.c); // an anonymous struct
[22:29:45] <candide> fizzie: 1, 2, 3
[22:29:49] <sham1> Since of course memmove is allowed to overlap, while memcpy isn't
[22:30:15] *** Parts: qwertyasda (~Qwerty@wsip-174-71-193-82.lv.lv.cox.net) (Leaving)
[22:30:38] <fizzie> (Specifically, a struct *member* that has no name, the fields of which get promoted into being fields of the containing struct.)
[22:31:12] <nomagno> That kind of anonymous struct is fine
[22:31:15] <pragma-> A struct member has no name.
[22:31:29] <nightstrike> sham1: recent glibc takes advantage of that.  I had to replace thousands of bad memcpy calls to memmove
[22:31:43] <nomagno> What isn't fine is containing anonymous structs
[22:32:01] <nightstrike> vectorization works better with Ofast, since you often need -funsafe-* to at least get floats to vectorize
[22:32:12] <nightstrike> maybe not so much with ints
[22:32:13] <nomagno> struct { int a; } should have type signature struct { int a; }
[22:32:17] *** Joins: eastbillie (~gallup@192-222-138-215.qc.cable.ebox.net)
[22:32:23] *** Quits: eastbillie (~gallup@192-222-138-215.qc.cable.ebox.net) (Client Quit)
[22:32:31] <nomagno> But it is actually struct { int a; } AT LINE X
[22:32:43] <nomagno> This makes no sense
[22:32:43] <sham1> Structural typing vs nominal typing
[22:32:52] *** Joins: ouestbillie (~gallup@192-222-138-215.qc.cable.ebox.net)
[22:32:55] <nomagno> If two structs are identical, they're identical
[22:33:13] <nomagno> Why can't two objectively identical anonymous structs be considered the same struct?
[22:33:15] <sham1> C doesn't do structural typing, so no
[22:33:36] *** Quits: meator (~meator@user/meator) (Ping timeout: 256 seconds)
[22:33:53] <nomagno> sham1: well, what if you consider the entire structure a name?
[22:34:10] <nomagno> struct { int a; } has type strict { int a; }
[22:34:17] <nomagno> struct*
[22:34:28] <sham1> Well the source location is still different
[22:34:59] *** Joins: Leonardzzz (~Administr@114.55.127.80)
[22:35:30] *** Joins: meator (~meator@user/meator)
[22:35:38] <nomagno> sham1: The same should be applied to int then
[22:35:44] <sham1> But int has a name
[22:35:51] <nomagno> int at line 1 != int at line 4
[22:36:02] <nomagno> But so does struct { int a; }
[22:36:08] <sham1> No it doesn't
[22:36:19] <nomagno> I mean, C doesn't even do nominal typing
[22:36:25] <nomagno> Ahem, function type signatures
[22:36:54] <nomagno> Which explicitly disregard names
[22:37:09] <nomagno> As well as array-related and pointer's related traits
[22:37:25] <nomagno> int * != int *?
[22:37:46] <nomagno> int ()(void) != int ()(void)?
[22:37:49] *** Quits: Leonard (~Administr@114.55.127.80) (Ping timeout: 240 seconds)
[22:38:24] <fizzie> Here's a (clang) toy example of `restrict` affecting code generation, for the record: https://gcc.godbolt.org/z/s4KcYYaKd
[22:38:30] <nomagno> int ()[3] != int * (*)[3]?
[22:38:45] *** Joins: Whatshisface (~jon@user/Whatshisface)
[22:39:38] <sham1> Well of course. They have different return types
[22:40:46] *** Quits: baltazar (~baltazar@84-236-61-122.pool.digikabel.hu) (Ping timeout: 268 seconds)
[22:40:55] <sham1> And besides, a pointer to function =/= a function, they just have convenient conversions
[22:41:39] <fizzie> The second of those last two isn't got anything to do with a function (and is quite different from the first).
[22:41:52] <sham1> I misread
[22:42:08] <sham1> Mmhm
[22:42:14] *** Joins: baltazar (~baltazar@193-226-249-203.pool.digikabel.hu)
[22:42:29] <fizzie> (And the first one isn't a valid type.)
[22:42:36] <sham1> But yeah. C is mostly nominal typing
[22:42:55] <nomagno> fizzie: which one?
[22:43:03] <fizzie> `int ()[3]` is syntactically "a function with unspecified parameters returning an array of 3 ints", but a function can't return an array.
[22:43:19] <fizzie> `int * (*)[3]` on the other hand is just "pointer to an array of 3 pointers to int".
[22:43:34] <sham1> I assume he meant int (*)()[3]
[22:43:56] <nomagno> Oh, the markdown formatter in your clients is messing with you
[22:44:04] <fizzie> There's no markdown formatter in my client.
[22:44:35] <nomagno> Well, I meant a pointer to an array of three pointers to int.
[22:45:14] <fizzie> https://0x0.st/oznV.txt is what came through.
[22:46:01] <nomagno> int asterisk (asterisk)[3]
[22:46:03] <nomagno> On both sides.
[22:46:19] <nomagno> Both sides on all messages are supposed to be equal
[22:46:53] <sham1> But yeah. At least aggregates like structs and unions are nominally typed, and thus two struct { int i; } are distinct types, although compatible structurally and you could for example use memcpy without any fear I'd think anyhow
[22:47:03] *** Quits: rsjw (~quassel@user/rsjw) (Ping timeout: 256 seconds)
[22:47:15] <sham1> And of course, C2x might get typeof which could solve this
[22:47:26] *** Joins: Qwerrtty (~Qwerty@wsip-174-71-193-82.lv.lv.cox.net)
[22:47:51] <fizzie> Well, for some values of "solve". You still would need to actually *use* typeof, and refer to something specific, rather than just saying `struct { int a, b; }` in two different places.
[22:48:18] *** Quits: mrig (~mrig@user/mrig) (Quit: Going offline, see ya! (www.adiirc.com))
[22:48:28] <fizzie> As in, it'd make some things _possible_ to write, but it still wouldn't work as ad-hoc types, the same way some languages do tuples for example.
[22:48:37] *** Quits: Thedarkb (~Thedarkb@cpc84095-pool16-2-0-cust190.15-1.cable.virginm.net) (Ping timeout: 240 seconds)
[22:49:59] <sham1> Well it'd still be better
[22:50:52] *** Joins: Akuli (~Akuli@87-94-108-67.bb.dnainternet.fi)
[22:51:15] <fizzie> One "problem" with making tagless structs that are structurally compatible also compatible types is, two typedef'd structs with different semantic meaning but coincidentally the same structure would suddenly become compatible types.
[22:51:22] <sham1> I mean I made this monstrosity a couple of days ago and it clearly can make for some neat tricks like having "tuples" in a sense: https://godbolt.org/z/9GKbP4xxr
[22:52:07] <fizzie> Or else you'd need different rules for "struct { int a, b; }" and "struct { int a, b; } but referred via a typedef alias", which is slightly questionable as well.
[22:53:23] <fizzie> (Not that I condone `typedef struct { int x, y, z; } name;` in the first place, but it's still what a lot of code does.)
[22:55:25] <sham1> Yeah. Structural typing would just be odd
[22:57:40] *** Joins: mrig (~mrig@user/mrig)
[22:58:00] *** Quits: jmiehe (~Thunderbi@user/jmiehe) (Quit: jmiehe)
[22:59:06] *** Quits: malina (~malina@user/malina) (Ping timeout: 256 seconds)
[23:01:13] *** Joins: boB_K7IQ (~boB_K7IQ@152.44.147.180)
[23:03:01] *** Quits: Qwerrtty (~Qwerty@wsip-174-71-193-82.lv.lv.cox.net) (Quit: Leaving)
[23:03:45] *** Quits: Mentor (~Ionut@92.86.217.127) (Quit: Leaving)
[23:05:20] *** Quits: kuber (~kuber@97-126-25-4.tukw.qwest.net) (Ping timeout: 256 seconds)
[23:06:17] *** Joins: Leonard (~Administr@114.55.127.80)
[23:08:03] *** Quits: WAR10CK (~WAR10CK@219.135.63.48) (Quit: Leaving)
[23:08:35] *** Quits: Leonardzzz (~Administr@114.55.127.80) (Ping timeout: 256 seconds)
[23:10:33] *** Joins: malina (~malina@user/malina)
[23:14:14] *** Joins: Thedarkb (~Thedarkb@cpc84095-pool16-2-0-cust190.15-1.cable.virginm.net)
[23:18:52] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Remote host closed the connection)
[23:19:47] *** Joins: SGautam (uid286066@id-286066.ilkley.irccloud.com)
[23:21:20] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[23:21:30] *** Joins: Leonardzzz (~Administr@114.55.127.80)
[23:23:08] *** Joins: inomoz (~inomoz@176.59.103.141)
[23:23:37] *** Quits: Akuli (~Akuli@87-94-108-67.bb.dnainternet.fi) (Quit: Akuli)
[23:23:38] *** Joins: kurahaupo_ (~kurahaupo@115.69.27.211)
[23:23:53] *** Joins: Akuli (~Akuli@87-94-108-67.bb.dnainternet.fi)
[23:24:36] *** Quits: Leonard (~Administr@114.55.127.80) (Ping timeout: 256 seconds)
[23:24:36] *** Quits: Alhazred (~Alhazred@athedsl-4387600.home.otenet.gr) (Ping timeout: 256 seconds)
[23:24:57] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Ping timeout: 240 seconds)
[23:25:44] *** Quits: kurahaupo (~kurahaupo@pa49-182-47-103.pa.qld.optusnet.com.au) (Ping timeout: 256 seconds)
[23:26:40] <System_Error>  and thus two struct { int i; } are distinct types <- and maybe its not bad. Imagine you later change one to something function chewing on other can't swallow...
[23:27:17] *** Quits: kurahaupo1 (~martin@115.69.27.211) (Ping timeout: 256 seconds)
[23:27:52] <System_Error> guess if one needs n compatible things, that's what typedef, etc for?
[23:30:32] *** Quits: skapate (~Skapata@user/skapata) (Ping timeout: 240 seconds)
[23:31:00] *** Quits: slayne (~sysadmin@modemcable136.173-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[23:33:28] *** Joins: tech_exorcist (txrcst@user/tech-exorcist/x-0447479)
[23:33:52] *** Joins: xmyst (~xmyst@ip5f5ac363.dynamic.kabel-deutschland.de)
[23:35:47] *** Quits: Leonardzzz (~Administr@114.55.127.80) (Read error: Connection reset by peer)
[23:36:33] *** Joins: otty (~otty@49.15.201.210)
[23:36:43] *** Joins: Leonard (~Administr@114.55.127.80)
[23:36:51] <otty> hello
[23:37:00] *** Joins: skapata (~Skapata@2804:14c:87b0:a6f9:8d19:f7a3:b91b:6462)
[23:37:00] *** Quits: skapata (~Skapata@2804:14c:87b0:a6f9:8d19:f7a3:b91b:6462) (Changing host)
[23:37:00] *** Joins: skapata (~Skapata@user/skapata)
[23:37:16] *** Joins: rgrinberg (~textual@2806:265:5401:8cd:55a0:8f60:aba0:28c4)
[23:37:40] *** Joins: rsjw (~quassel@user/rsjw)
[23:37:45] <otty> i've geting errors like "[1]    50439 segmentation fault (core dumped)  ./a.out"
[23:37:46] <twkm> System_Error: that's what a tag is for.
[23:38:24] <twkm> you are likely abusing a pointer otty.
[23:38:54] <otty> pointer?
[23:39:30] <twkm> such as attempting to assign to an element outside the bounds of an array.
[23:40:27] <otty> i dont know
[23:40:49] <twkm> so you probably need to debug.
[23:41:09] <otty> ok
[23:41:35] *** Quits: Leonard (~Administr@114.55.127.80) (Read error: Connection reset by peer)
[23:41:57] *** Joins: Leonard (~Administr@114.55.127.80)
[23:41:59] <otty> twkm: can i share you the code
[23:42:26] <zalt> otty: compile with -g3, run the app under gdb (debugger), you will instantly know which line is causing the error
[23:42:28] <twkm> put it on one of the paste sites in the topic.  if it is large you should make a test case instead.
[23:43:49] <bdax> instantly if you can figure out the arcane mystery that is gdb
[23:44:14] <bdax> maybe try nemiver if you can't
[23:46:25] <sham1> gdb isn't all that arcane
[23:46:41] <sham1> It's quite standard as far as debuggers go
[23:47:33] <zalt> gdb is probably the most advanced debugging tool out there
[23:48:00] <sham1> I mean there's also lldb
[23:48:08] <otty> waite i have installde gdb but the problem is i dont know how to use it
[23:48:24] <sham1> gdb prog_name
[23:48:24] <zalt> good, now learn how to use it
[23:48:26] <sham1> And then inside there r
[23:48:28] <twkm> it has documentation.
[23:48:31] <bdax> otty: nemiver, trust brethren
[23:48:33] <sham1> Yeah. Learn it
[23:48:53] <otty> okei
[23:50:23] <otty> can anyone suggest a simple program to print strigs in reverse order without using strrev()
[23:50:42] *** Quits: brad_mssw (~bhouse@2620:134:c001:200:c93d:56f8:da1b:c555) (Quit: Leaving)
[23:50:52] <V-T60> okay, finally I dealt with git basics https://notabug.org/v-t60/data-structures/raw/master/challenge1.c
[23:51:11] <bdax> otty: loop through it backwards?
[23:51:26] <V-T60> that's very first version, actually i wanted to learn git
[23:51:43] *** Joins: kitsunenokenja (~kitsunech@68.91.220.96)
[23:51:46] <otty> bdax: yup
[23:52:10] <twkm> ewww, void functions.
[23:52:25] *** Joins: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net)
[23:53:00] <sham1> Also eww, global variables in lieu of return values
[23:53:04] <sham1> Also scanf
[23:53:36] <poprocks> eww, mid-block declarations
[23:53:55] <bdax> otty: I mean, like: for (int i = strlen(str)-1; i >= 0; i--) { fputc(str[i], stdout) }
[23:53:58] *** Quits: cust_ (amaama@blackbox.amaama.org) (Remote host closed the connection)
[23:54:21] <V-T60> oh, thanks
[23:54:46] <otty> waite noting is going into my mind its 2am here
[23:55:01] <NRK[m]> mid-block decelarations are definitely fugly
[23:55:29] <V-T60> agree with you
[23:55:34] *** Joins: Goreng (~Goreng@202.138.250.36)
[23:55:42] <NRK[m]> takes away the hacker feel from the language and makes it feel like some scripting lang
[23:55:52] *** Quits: Goreng (~Goreng@202.138.250.36) (Remote host closed the connection)
[23:56:04] *** Joins: Goreng (~Goreng@202.138.250.58)
[23:56:17] *** Quits: Leonard (~Administr@114.55.127.80) (Read error: Connection reset by peer)
[23:56:27] *** Joins: Leonard (~Administr@114.55.127.80)
[23:56:37] <sham1> If you want to declare every variable at the top of the block, just use Pascal
[23:56:51] *** Quits: Goreng (~Goreng@202.138.250.58) (Client Quit)
[23:56:54] *** Quits: rsjw (~quassel@user/rsjw) (Ping timeout: 256 seconds)
[23:57:04] *** Joins: Goreng (~Goreng@202.138.250.1)
[23:57:23] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[23:57:29] <twkm> otty: then perhaps you would prefer nemiver.
[23:57:32] *** Quits: kts (~kts@103.73.237.237) (Quit: Konversation terminated!)
[23:57:46] <sham1> But that's just a frontend for gdb
[23:57:54] <twkm> exactly.
[23:58:10] <sham1> I mean if we're recommending that then there's also ddd
[23:58:24] <poprocks> honestly I don't think they're the worst thing in the world - it's just how they're thrown in so readily by people that have learned just enough C to think they can write it like Python or something
[23:58:49] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[23:59:17] *** Quits: Goreng (~Goreng@202.138.250.1) (Client Quit)
[23:59:22] *** Joins: Gorengan (~Goreng@202.138.250.58)
[23:59:35] *** Quits: inomoz (~inomoz@176.59.103.141) (Ping timeout: 256 seconds)
[23:59:40] *** Quits: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net) (Remote host closed the connection)
[23:59:56] *** Joins: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net)
