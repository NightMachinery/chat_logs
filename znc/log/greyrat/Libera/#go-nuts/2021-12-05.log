[00:01:03] *** Joins: beholders_eye (~weechat@179.162.130.138)
[00:04:29] *** Joins: krux02 (~krux02@p200300e817365e0034cc1bc883b75341.dip0.t-ipconnect.de)
[00:05:15] *** Quits: beholders_eye (~weechat@179.162.130.138) (Ping timeout: 256 seconds)
[00:06:28] *** Quits: achilleas (ach@user/achilleas) (Quit: :wq)
[00:07:59] *** Joins: achilleas (~ach@user/achilleas)
[00:08:38] *** Joins: beholders_eye (~weechat@177.132.26.152)
[00:08:38] *** Quits: beholders_eye (~weechat@177.132.26.152) (Read error: Connection reset by peer)
[00:11:15] *** Joins: ahappydeath (~ahappydea@user/ahappydeath)
[00:13:21] *** Joins: andlabs_ (~andlabs@70.107.171.168)
[00:14:40] *** Quits: xMopx (~xMopx-lib@192.95.23.134) (Ping timeout: 256 seconds)
[00:14:53] *** Quits: faceonkeyboard (~faceonkey@anquietas.harting.hosting) (Ping timeout: 256 seconds)
[00:14:53] *** Quits: chemsmith (~chemsmith@user/chemsmith) (Ping timeout: 256 seconds)
[00:14:55] *** Quits: svedrin (~quassel@tiamat.funzt-halt.net) (Read error: Connection reset by peer)
[00:15:11] *** Joins: faceonkeyboard (~faceonkey@anquietas.harting.hosting)
[00:15:27] *** Quits: andlabs (~andlabs@70.107.171.168) (Ping timeout: 256 seconds)
[00:15:35] *** Joins: chemsmith (~chemsmith@user/chemsmith)
[00:15:40] *** Joins: svedrin (~quassel@tiamat.funzt-halt.net)
[00:15:45] *** Quits: pepee (~pepee@user/pepee) (Ping timeout: 252 seconds)
[00:16:21] *** Joins: xMopx (~xMopx-lib@192.95.23.134)
[00:19:31] *** Joins: beholders_eye (~weechat@177.132.26.152)
[00:19:33] *** Quits: beholders_eye (~weechat@177.132.26.152) (Read error: Connection reset by peer)
[00:25:55] *** Joins: beholders_eye (~weechat@179.245.133.175)
[00:25:55] *** Quits: beholders_eye (~weechat@179.245.133.175) (Read error: Connection reset by peer)
[00:27:07] *** Joins: normen (~normen@p54b34baa.dip0.t-ipconnect.de)
[00:29:27] *** Joins: smeeagle (~smeeagle@2a00:23c8:9611:e600:655c:269a:c0b2:3abd)
[00:37:25] *** Quits: xb0o2 (~xb0o2@user/xb0o2) (Quit: Client closed)
[00:37:28] *** Joins: coolnickname (~coolnickn@73.194.7.51.dyn.plus.net)
[00:42:53] *** Quits: ahappydeath (~ahappydea@user/ahappydeath) (Ping timeout: 252 seconds)
[00:50:04] *** Joins: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl)
[00:55:50] *** Quits: Mutsumi (~Mutsumi@99-93-141-12.lightspeed.mssnks.sbcglobal.net) (Ping timeout: 260 seconds)
[00:59:23] *** Quits: shka (~herr@83.175.151.96.piasta.pl) (Ping timeout: 252 seconds)
[01:02:48] *** Joins: mattd (~mattd@2601:1c0:6c01:b460:b429:9115:6b9f:951f)
[01:04:13] *** Quits: bkircher (~bkircher@2001:a61:250f:2b01:4b96:7ca4:45ee:36d4) (Remote host closed the connection)
[01:04:27] *** Joins: bkircher (~bkircher@2001:a61:250f:2b01:4b96:7ca4:45ee:36d4)
[01:04:29] *** Quits: bkircher (~bkircher@2001:a61:250f:2b01:4b96:7ca4:45ee:36d4) (Remote host closed the connection)
[01:04:42] *** Joins: llorllale (~llorllale@2607:9880:3a18:69:44b3:1807:4825:f489)
[01:05:26] *** Quits: burningserenity (~burningse@2603:9001:f01:ad99::100f) (Ping timeout: 252 seconds)
[01:09:14] *** Joins: arinov (~arinov@213.194.126.155)
[01:09:33] *** Joins: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com)
[01:10:22] *** Quits: jjido (~Denis@90.213.58.125) (Quit: My MacBook Air has gone to sleep. ZZZzzzâ€¦)
[01:10:56] *** Quits: LiftLeft (~LiftLeft@gateway/vpn/pia/liftleft) (Ping timeout: 252 seconds)
[01:17:28] *** Joins: beholders_eye (~weechat@179.245.135.11)
[01:17:32] *** Quits: beholders_eye (~weechat@179.245.135.11) (Read error: Connection reset by peer)
[01:23:50] *** Joins: beholders_eye (~weechat@177.132.27.96)
[01:23:50] *** Quits: beholders_eye (~weechat@177.132.27.96) (Read error: Connection reset by peer)
[01:25:50] *** Joins: k0ta (~k0ta@103.108.94.37)
[01:27:14] *** Joins: LiftLeft (~LiftLeft@gateway/vpn/pia/liftleft)
[01:30:21] *** Joins: beholders_eye (~weechat@177.132.27.96)
[01:30:29] *** Quits: beholders_eye (~weechat@177.132.27.96) (Read error: Connection reset by peer)
[01:31:44] *** Joins: jhenson (4584610261@user/jhenson)
[01:44:42] *** Quits: nrl^ (~nrl@68.101.58.90) (Remote host closed the connection)
[01:47:31] *** Joins: Seirdy (~Seirdy@sourcehut/user/seirdy)
[01:49:47] *** Quits: neurocyte0132889 (~neurocyte@user/neurocyte) (Read error: Connection reset by peer)
[01:50:43] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 252 seconds)
[01:50:55] *** Joins: neurocyte0132889 (~neurocyte@IP-213188116193.dynamic.medianet-world.de)
[01:50:55] *** Quits: neurocyte0132889 (~neurocyte@IP-213188116193.dynamic.medianet-world.de) (Changing host)
[01:50:55] *** Joins: neurocyte0132889 (~neurocyte@user/neurocyte)
[01:52:54] *** Joins: fikran (~fikran@user/fikran)
[01:55:55] *** Quits: rendar (~rendar@user/rendar) (Quit: Leaving)
[01:56:07] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[01:59:53] *** Quits: tesuji (~quassel@2a02:908:180:9500:dd45:c2b0:8a98:8612) (Ping timeout: 252 seconds)
[02:02:57] *** Quits: kindablue (znc@irc.tpurist.com) (Quit: System Rebooting..)
[02:04:02] *** Quits: jhenson (4584610261@user/jhenson) (Remote host closed the connection)
[02:04:10] *** Joins: jhenson_ (4584610261@user/jhenson)
[02:04:30] *** Joins: kindablue (znc@irc.tpurist.com)
[02:04:35] *** Quits: jhenson_ (4584610261@user/jhenson) (Remote host closed the connection)
[02:04:43] *** Joins: jhenson (4584610261@user/jhenson)
[02:05:46] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[02:10:12] *** Joins: Torr (~Torr@user/torr)
[02:12:34] *** Joins: beholders_eye (~weechat@177.132.24.49)
[02:19:34] *** Quits: tane (~tane@user/tane) (Quit: Leaving)
[02:23:14] *** Quits: krux02 (~krux02@p200300e817365e0034cc1bc883b75341.dip0.t-ipconnect.de) (Remote host closed the connection)
[02:23:14] *** Quits: beholders_eye (~weechat@177.132.24.49) (Read error: Connection reset by peer)
[02:23:28] *** Joins: rusty (~rustyboy@2a02:2f0e:5610:ab00:b16b:f583:26df:4061)
[02:26:35] *** Quits: blyat-73 (~hjgkjhgkj@46.235.96.249) (Remote host closed the connection)
[02:27:43] *** Quits: Tv_ (uid62079@user/tv/x-3144562) (Quit: Connection closed for inactivity)
[02:28:47] *** Joins: beholders_eye (~weechat@177.132.24.49)
[02:29:16] *** Joins: blyat-73 (~hjgkjhgkj@46.235.96.249)
[02:29:42] *** Quits: blyat-73 (~hjgkjhgkj@46.235.96.249) (Client Quit)
[02:29:57] *** Joins: blyat-73 (~hjgkjhgkj@46.235.96.249)
[02:31:17] *** Joins: vptr (~vptr@user/vptr)
[02:31:57] *** Quits: blyat-73 (~hjgkjhgkj@46.235.96.249) (Remote host closed the connection)
[02:33:41] *** Joins: blyat-73 (~hjgkjhgkj@46.235.96.249)
[02:44:07] *** Quits: vptr (~vptr@user/vptr) (Quit: leaving)
[02:45:55] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[02:46:17] *** Quits: rusty (~rustyboy@2a02:2f0e:5610:ab00:b16b:f583:26df:4061) (Remote host closed the connection)
[02:48:50] *** Joins: NCS_One (~NCS_One@bl11-90-133.dsl.telepac.pt)
[02:53:26] *** Joins: debdut (~debdut@115.187.40.134)
[02:54:51] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[03:02:04] *** Quits: mrig (~mrig@user/mrig) (Quit: WeeChat 3.0)
[03:02:57] *** Quits: kindablue (znc@irc.tpurist.com) (Ping timeout: 252 seconds)
[03:06:48] *** Quits: debdut (~debdut@115.187.40.134) (Quit: debdut)
[03:08:10] *** Joins: moog (~moog@107.126.53.41)
[03:09:03] *** Quits: Thedarkb-Work (~Thedarkb@62.232.253.82) (Remote host closed the connection)
[03:09:27] *** Joins: Thedarkb-Work (~Thedarkb@62.232.253.82)
[03:11:56] *** Quits: LiftLeft (~LiftLeft@gateway/vpn/pia/liftleft) (Ping timeout: 252 seconds)
[03:16:18] *** Quits: queue- (~nerd@user/queue/x-7267619) (Remote host closed the connection)
[03:17:21] *** Quits: Torr (~Torr@user/torr) (Ping timeout: 256 seconds)
[03:18:52] *** Joins: queue (~nerd@rektnet.com)
[03:19:04] *** Joins: alphasierra (~alphasier@2405:201:e:4d:b560:66b7:6b05:1a66)
[03:19:10] *** Quits: veegee (~veegee@ipagstaticip-469c2903-2b07-6dc3-3bc2-98748da5ca77.sdsl.bell.ca) (Quit: Textual IRC Client: www.textualapp.com)
[03:19:47] *** Joins: veegee (~veegee@ipagstaticip-469c2903-2b07-6dc3-3bc2-98748da5ca77.sdsl.bell.ca)
[03:20:45] *** Quits: alphasierra (~alphasier@2405:201:e:4d:b560:66b7:6b05:1a66) (Client Quit)
[03:24:47] *** Quits: imandes0 (~imandes0@109.75.35.208) (Ping timeout: 256 seconds)
[03:25:41] *** Joins: LiftLeft (~LiftLeft@2603-9000-ec02-7dfd-60c4-53d9-14a8-273e.inf6.spectrum.com)
[03:26:26] *** Parts: queue (~nerd@rektnet.com) ()
[03:26:57] *** Quits: LiftLeft (~LiftLeft@2603-9000-ec02-7dfd-60c4-53d9-14a8-273e.inf6.spectrum.com) (Read error: Connection reset by peer)
[03:27:05] *** Quits: ezzieyguywuf (~Unknown@user/ezzieyguywuf) (Read error: No route to host)
[03:27:47] *** Joins: LiftLeft (~LiftLeft@2603:9000:ec02:7dfd:60c4:53d9:14a8:273e)
[03:28:35] *** Quits: LiftLeft (~LiftLeft@2603:9000:ec02:7dfd:60c4:53d9:14a8:273e) (Read error: Connection reset by peer)
[03:28:45] *** Quits: adip (~adip@deq245.neoplus.adsl.tpnet.pl) (Ping timeout: 256 seconds)
[03:29:22] *** Joins: kindablue (znc@irc.tpurist.com)
[03:29:49] *** Joins: MrFantastik (~f@c-98-210-128-179.hsd1.ca.comcast.net)
[03:30:26] *** Joins: adip (~adip@dev165.neoplus.adsl.tpnet.pl)
[03:31:44] <MrFantastik> is it convention to return a struct by value or a pointer to a struct when making constructors? and why is it either if so? https://go.dev/play/p/g3viowaZiRt
[03:36:25] <fizzie> Often it's specifically the pointer type that implements some relevant interfaces (io.Writer, for that paste possibly a `SSHConfigurer`, given that's just the "default" one), in which case it makes more sense for the constructor function to return a pointer.
[03:37:24] <fizzie> And a lot of types that do have a constructor method in the first place (and aren't just "the zero value is good to use" types) are kind of fundamentally "uncopiable", so returning a pointer encourages using them without attempting to make copies.
[03:37:38] *** Joins: maroloccio (~marolocci@151.53.155.184)
[03:44:27] *** Joins: dsrt^ (~dsrt@68.101.58.90)
[03:44:31] *** Quits: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl) (Quit: jaca122)
[03:45:49] *** Joins: LiftLeft (~LiftLeft@2603-9000-ec02-7dfd-60c4-53d9-14a8-273e.inf6.spectrum.com)
[03:47:06] *** Quits: LiftLeft (~LiftLeft@2603-9000-ec02-7dfd-60c4-53d9-14a8-273e.inf6.spectrum.com) (Read error: Connection reset by peer)
[03:56:57] *** Quits: khyr0n (~khyr0n@fixed-187-190-167-75.totalplay.net) (Quit: Leaving)
[04:00:09] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 252 seconds)
[04:02:15] *** Joins: fikran (~fikran@user/fikran)
[04:04:19] *** Joins: LiftLeft (~LiftLeft@2603:9000:ec02:7dfd:60c4:53d9:14a8:273e)
[04:04:48] *** Joins: scottpedia (~scottpedi@bras-base-otwaon0812w-grc-26-76-71-34-247.dsl.bell.ca)
[04:05:19] *** Quits: scottpedia (~scottpedi@bras-base-otwaon0812w-grc-26-76-71-34-247.dsl.bell.ca) (Changing host)
[04:05:19] *** Joins: scottpedia (~scottpedi@user/scottpedia)
[04:05:19] *** Quits: LiftLeft (~LiftLeft@2603:9000:ec02:7dfd:60c4:53d9:14a8:273e) (Read error: Connection reset by peer)
[04:05:54] *** Joins: mickey87 (~user@user/mickey)
[04:05:55] *** Quits: mickey8 (~user@user/mickey) (Quit: Ping timeout (120 seconds))
[04:05:55] *** mickey87 is now known as mickey8
[04:08:26] <scottpedia> Yo
[04:11:47] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-50fd-43b5-7857-81ac.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzzâ€¦)
[04:11:54] *** Quits: scottpedia (~scottpedi@user/scottpedia) (Remote host closed the connection)
[04:13:34] *** Joins: chenqisu1 (~chenqisu1@183.217.200.156)
[04:20:27] *** Quits: moog (~moog@107.126.53.41) (Read error: Connection reset by peer)
[04:22:46] *** Joins: LiftLeft (~LiftLeft@2603-9000-ec02-7dfd-60c4-53d9-14a8-273e.inf6.spectrum.com)
[04:25:08] *** Quits: LiftLeft (~LiftLeft@2603-9000-ec02-7dfd-60c4-53d9-14a8-273e.inf6.spectrum.com) (Read error: Connection reset by peer)
[04:26:44] *** Quits: adip (~adip@dev165.neoplus.adsl.tpnet.pl) (Ping timeout: 252 seconds)
[04:33:20] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-50fd-43b5-7857-81ac.res6.spectrum.com)
[04:33:53] *** Joins: kapu (~kapu@user/egm)
[04:35:31] *** Joins: scottpedia (~scottpedi@bras-base-otwaon0812w-grc-26-76-71-34-247.dsl.bell.ca)
[04:36:06] *** Quits: scottpedia (~scottpedi@bras-base-otwaon0812w-grc-26-76-71-34-247.dsl.bell.ca) (Changing host)
[04:36:06] *** Joins: scottpedia (~scottpedi@user/scottpedia)
[04:43:10] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: ZzzZ)
[04:44:09] *** Quits: scottpedia (~scottpedi@user/scottpedia) (Ping timeout: 252 seconds)
[04:46:02] *** Quits: predmijat (~predmijat@mail.strogopro.com) (Quit: bye)
[04:46:54] *** Quits: maroloccio (~marolocci@151.53.155.184) (Quit: WeeChat 3.0)
[04:47:37] *** Joins: predmijat (~predmijat@mail.strogopro.com)
[04:49:36] *** Joins: maroloccio (~marolocci@151.53.155.184)
[04:49:47] *** Quits: maroloccio (~marolocci@151.53.155.184) (Client Quit)
[04:50:15] *** Joins: maroloccio (~marolocci@151.53.155.184)
[05:06:52] *** Joins: scottpedia (~scottpedi@bras-base-otwaon0812w-grc-26-76-71-34-247.dsl.bell.ca)
[05:20:15] *** Quits: scottpedia (~scottpedi@bras-base-otwaon0812w-grc-26-76-71-34-247.dsl.bell.ca) (Killed (NickServ (GHOST command used by black!~black@bras-base-otwaon0812w-grc-26-76-71-34-247.dsl.bell.ca)))
[05:20:23] *** Joins: LiftLeft (~LiftLeft@2603-9000-ec02-7dfd-cae7-3055-6afe-9a80.inf6.spectrum.com)
[05:20:32] *** Quits: Seirdy (~Seirdy@sourcehut/user/seirdy) (Quit: exiting 3.3)
[05:20:41] *** Quits: LiftLeft (~LiftLeft@2603-9000-ec02-7dfd-cae7-3055-6afe-9a80.inf6.spectrum.com) (Read error: Connection reset by peer)
[05:21:04] *** Joins: LiftLeft (~LiftLeft@2603-9000-ec02-7dfd-cae7-3055-6afe-9a80.inf6.spectrum.com)
[05:21:55] *** Quits: paulgrmn__ (~paulgrmn@user/paulgrmn) (Ping timeout: 252 seconds)
[05:22:00] *** Joins: paulgrmn_ (~paulgrmn@user/paulgrmn)
[05:22:00] *** Quits: LiftLeft (~LiftLeft@2603-9000-ec02-7dfd-cae7-3055-6afe-9a80.inf6.spectrum.com) (Read error: Connection reset by peer)
[05:22:30] *** Joins: LiftLeft (~LiftLeft@2603-9000-ec02-7dfd-cae7-3055-6afe-9a80.inf6.spectrum.com)
[05:23:48] *** Quits: LiftLeft (~LiftLeft@2603-9000-ec02-7dfd-cae7-3055-6afe-9a80.inf6.spectrum.com) (Read error: Connection reset by peer)
[05:24:51] *** Quits: kindablue (znc@irc.tpurist.com) (Ping timeout: 252 seconds)
[05:30:08] *** Joins: pepee (~pepee@user/pepee)
[05:33:11] *** Joins: kindablue (znc@irc.tpurist.com)
[05:40:52] *** Joins: LiftLeft (~LiftLeft@2603-9000-ec02-7dfd-cae7-3055-6afe-9a80.inf6.spectrum.com)
[05:41:33] *** Quits: LiftLeft (~LiftLeft@2603-9000-ec02-7dfd-cae7-3055-6afe-9a80.inf6.spectrum.com) (Read error: Connection reset by peer)
[05:47:13] *** Quits: kapu (~kapu@user/egm) (Ping timeout: 252 seconds)
[05:47:57] *** Quits: paulgrmn_ (~paulgrmn@user/paulgrmn) (Ping timeout: 252 seconds)
[05:52:56] *** Quits: kindablue (znc@irc.tpurist.com) (Quit: System Rebooting..)
[05:54:08] *** Joins: kindablue (~kindablue@irc.tpurist.com)
[05:55:39] *** Quits: neurocyte0132889 (~neurocyte@user/neurocyte) (Ping timeout: 252 seconds)
[05:58:24] *** Joins: LiftLeft (~LiftLeft@2603-9000-ec02-7dfd-cae7-3055-6afe-9a80.inf6.spectrum.com)
[05:59:26] *** Quits: NCS_One (~NCS_One@bl11-90-133.dsl.telepac.pt) (Quit: Lost terminal)
[05:59:33] *** Quits: LiftLeft (~LiftLeft@2603-9000-ec02-7dfd-cae7-3055-6afe-9a80.inf6.spectrum.com) (Read error: Connection reset by peer)
[06:02:54] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-50fd-43b5-7857-81ac.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzzâ€¦)
[06:08:34] *** Joins: paulgrmn__ (~paulgrmn@user/paulgrmn)
[06:09:35] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 252 seconds)
[06:11:36] *** Joins: fikran (~fikran@user/fikran)
[06:12:44] *** Joins: ahappydeath (~ahappydea@user/ahappydeath)
[06:14:16] *** Quits: blyat-73 (~hjgkjhgkj@46.235.96.249) (Remote host closed the connection)
[06:14:39] *** Joins: blyat-73 (~hjgkjhgkj@46.235.96.249)
[06:15:12] *** Quits: blyat-73 (~hjgkjhgkj@46.235.96.249) (Remote host closed the connection)
[06:15:27] *** Quits: paulgrmn__ (~paulgrmn@user/paulgrmn) (Ping timeout: 252 seconds)
[06:15:27] *** Joins: blyat-73 (~hjgkjhgkj@46.235.96.249)
[06:17:48] *** Joins: tesuji (~quassel@2a02:908:180:9500:cd73:72f7:9168:fa9d)
[06:19:13] *** Joins: LiftLeft (~LiftLeft@gateway/vpn/pia/liftleft)
[06:27:07] *** Joins: paulgrmn__ (~paulgrmn@user/paulgrmn)
[06:39:02] *** Quits: jjonah (~jjonah@p200300d5d70fb600dea632fffeb3342f.dip0.t-ipconnect.de) (Ping timeout: 268 seconds)
[06:39:17] *** Quits: smeeagle (~smeeagle@2a00:23c8:9611:e600:655c:269a:c0b2:3abd) (Quit: smeeagle)
[06:44:56] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-50fd-43b5-7857-81ac.res6.spectrum.com)
[06:45:18] *** Quits: maroloccio (~marolocci@151.53.155.184) (Quit: WeeChat 3.0)
[06:46:07] *** Joins: imandes0 (~imandes0@109.75.35.208)
[06:46:27] *** Quits: LiftLeft (~LiftLeft@gateway/vpn/pia/liftleft) (Ping timeout: 256 seconds)
[06:50:59] *** Quits: ahappydeath (~ahappydea@user/ahappydeath) (Ping timeout: 256 seconds)
[06:51:01] *** Quits: paulgrmn__ (~paulgrmn@user/paulgrmn) (Ping timeout: 252 seconds)
[07:07:30] *** Joins: paulgrmn__ (~paulgrmn@user/paulgrmn)
[07:12:39] *** Quits: paulgrmn__ (~paulgrmn@user/paulgrmn) (Ping timeout: 252 seconds)
[07:23:17] *** Quits: chenqisu1 (~chenqisu1@183.217.200.156) (Ping timeout: 256 seconds)
[07:24:55] *** Quits: danmurf (uid480399@user/danmurf) (Quit: Connection closed for inactivity)
[07:26:51] *** Quits: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com) (Quit: Leaving)
[07:33:03] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[08:11:13] <b0nn> I've read this twice https://tech.marksblogg.com/rdns-domain-name-tld-extract-golang.html and I cannot work out if the optimisations he talks about in the "Performance Gap" section are before or after what's measured in the "Running the Go build" section
[08:11:18] <b0nn> I presume it is
[08:17:05] *** Quits: seebs (~seebs@24.196.59.174) (Ping timeout: 268 seconds)
[08:19:01] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 252 seconds)
[08:19:57] *** Quits: sudoforge (~sudoforge@wireguard/tunneler/sudoforge) (Ping timeout: 256 seconds)
[08:20:57] *** Joins: fikran (~fikran@user/fikran)
[08:25:19] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-50fd-43b5-7857-81ac.res6.spectrum.com) (Remote host closed the connection)
[08:31:21] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[08:32:19] *** Quits: k0ta (~k0ta@103.108.94.37) (Quit: Lost terminal)
[08:33:15] *** ciphersalad is now known as bedroller
[08:45:03] *** Joins: seebs (~seebs@24.196.59.174)
[08:46:24] *** Quits: kupi (uid212005@id-212005.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[09:00:53] *** Joins: bkircher (~bkircher@2001:a61:250f:2b01:4b96:7ca4:45ee:36d4)
[09:05:02] *** Quits: imandes0 (~imandes0@109.75.35.208) (Ping timeout: 252 seconds)
[09:11:04] *** Joins: Seirdy (~Seirdy@sourcehut/user/seirdy)
[09:17:46] *** Joins: chenqisu1 (~chenqisu1@183.217.200.156)
[09:17:51] *** Joins: blinux (~blinux@pool-108-48-11-122.washdc.fios.verizon.net)
[09:29:17] *** Joins: acagastya (~acagastya@wikinews/acagastya)
[09:34:19] *** Joins: frost (~frost@user/frost)
[09:37:12] *** Quits: dale (dale@user/dale) (Remote host closed the connection)
[09:41:32] *** Quits: fikran (~fikran@user/fikran) (Quit: WeeChat 3.0.1)
[09:43:02] <acagastya> I am trying to create a server, which fetches some data, after performing an OAuth, using just the net/http functions.  But what I don't understand is how will two users who log in via OAuth -- how is gloang going to handle different access tokens for two different requests?  I know it is a broad question, but am I supposed to run something in parallel (I can't recall the word for it, but `go foo()`?) -- to seperate two concurrent requests to the 
[10:04:26] *** Quits: sleepingforest (~sleepingf@user/sleepingforest) (Ping timeout: 252 seconds)
[10:05:43] *** Quits: normen (~normen@p54b34baa.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[10:20:39] *** Quits: Techcable (~Techcable@168.235.93.147) (Ping timeout: 256 seconds)
[10:20:39] <j416> acagastya: there's no magic, you'll have to build this yourself.
[10:21:39] <j416> acagastya: translate your token data to whatever the other system requires, for example
[10:24:13] <acagastya> j416: so when two different requests are going to, say `/api` handled by `apiHandler` -- are those two functions and the variables in those functions going to have the same values?
[10:25:03] *** Joins: dalek-caan (~Thunderbi@109.252.124.86)
[10:26:02] <seebs> i don't understand your question and i think you don't either
[10:26:11] <seebs> every invocation of a function has its own copy of the function's parameters
[10:26:41] <seebs> you don't have to do anything more to keep auth tokens separate than you do to keep two http requests separate in the first case; each handler is getting its own http request.
[10:26:44] <j416> acagastya: no, two separate calls to a function have different stacks
[10:28:05] <j416> acagastya: perhaps try to simplify to gain better understanding, like, think of just regular functions without http
[10:28:10] <j416> acagastya: (it's no different)
[10:29:16] <acagastya> I had been passing (just doing a poc right now) the token by creating a global variable in the programme; so now, I think I should be looking for how to pass the token among various handlers, then.
[10:30:05] <j416> that'd be a good start, yes
[10:30:21] <j416> or, just one handler.
[10:30:31] *** Joins: normen (~normen@p200300d717306100f59db7c3d67e2d31.dip0.t-ipconnect.de)
[10:31:10] <j416> read the token in your handler, optionally parse it, parse it on to whatever logic layer you have next
[10:31:24] <j416> pass it on*
[10:36:32] <acagastya> All right, thanks!
[10:38:03] <seebs> ... yes do not create global variables, in general, especially not for things that are innately per-request
[10:39:56] *** Joins: tg (~tg@rockylinux/infra/tg)
[10:40:08] *** Quits: tg (~tg@rockylinux/infra/tg) (Client Quit)
[10:40:25] *** Joins: whaley (~whaley@2603-6080-a301-33d1-5925-715a-2870-ce82.res6.spectrum.com)
[10:40:50] *** Joins: tg (~tg@rockylinux/infra/tg)
[10:44:51] <acagastya> That is because I didn't know (still don't know) how to pass variables between two functions.  /login and /callback routes requires a random string `state` and they need to be same for the same request, but different for two different requests.
[10:46:34] *** Quits: tg (~tg@rockylinux/infra/tg) (Quit: tg)
[10:48:08] *** Joins: imandes0 (~imandes0@37.252.70.127)
[10:52:46] <acagastya> I mean, there is `http.handleFunc("/foo", func handler(w ResponseWriter, r *Request))` and one with `/bar` and they both need to have same variables passed to their handlers.
[10:58:24] <acagastya> There are some closure hacks I can try, but that is something I'd do in javascript, and in golang, it just intuitively feels wrong.
[11:04:02] *** Joins: dale (dale@user/dale)
[11:05:08] *** Quits: dale (dale@user/dale) (Remote host closed the connection)
[11:05:24] *** Joins: dale (dale@user/dale)
[11:08:24] *** Joins: nameless_ (~nameless@161.97.252.41)
[11:12:15] *** Joins: gggp (~gggp@60.10.194.46)
[11:14:48] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: ZzzZ)
[11:18:02] <nameless_> I am trying to get data from an io.Reader to an io.Writer implementation with a time.Sleep between iterations. I have tried a few approaches and I am getting unexpected results
[11:18:25] <nameless_> I have created a stackoverflow question: https://stackoverflow.com/questions/70232249/go-copy-data-from-io-reader-to-io-writer-implementations-with-sleep-timeout-em
[11:18:41] *** Quits: normen (~normen@p200300d717306100f59db7c3d67e2d31.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[11:18:45] <nameless_> it contains code and comments detailing the Expected/Actual functionality of each approach
[11:19:00] <nameless_> The code should run on go.dev/play
[11:19:31] <nameless_> Alternatively there is a pastebin I have created with the code as well: https://pastebin.com/aQnkj0d5
[11:20:17] <nameless_> If anyone has any insight on why I can never get a value from the Write attempts I would appreciate it greatly
[11:27:31] *** Quits: frost (~frost@user/frost) (Ping timeout: 256 seconds)
[11:28:53] <zsnes> your MyReader implementation doesn't look right at quick glance..
[11:29:10] <nameless_> I see
[11:30:16] <nameless_> Its a simple hardcoded response, just a string with a random int interpolated into it.
[11:30:54] <nameless_> It is my understanding that once the reading is complete, an io.EOF is expected in order to signal the current Read is finished
[11:31:43] <nameless_> That is the logic being the MyReader impl (it may be flawed, just explaining the intent so you have more information)
[11:32:14] *** Parts: acagastya (~acagastya@wikinews/acagastya) ()
[11:32:48] <zsnes> i think the way you're assigning to p[] is wrong though
[11:33:45] <nameless_> Gotcha, should I be appending?
[11:34:15] <zsnes> you jsut need to use copy() to copy bytes into p, instead of reassigning it
[11:34:54] <nameless_> I see, I will try that. Thank you!
[11:35:57] <zsnes> read = copy(p, []byte(someString))
[11:36:52] <zsnes> with that change output is correct
[11:37:22] <nameless_> You're the best zsnes, thanks!
[11:37:48] *** Joins: bookworm_ (~bookworm@thelounge/maintainer/bookworm)
[11:38:55] *** Quits: bookworm (~bookworm@thelounge/maintainer/bookworm) (Ping timeout: 256 seconds)
[11:39:59] *** Quits: MrFantastik (~f@c-98-210-128-179.hsd1.ca.comcast.net) (Ping timeout: 256 seconds)
[11:42:45] *** Joins: gggp_ (~gggp@60.10.23.170)
[11:44:32] *** Quits: gggp (~gggp@60.10.194.46) (Ping timeout: 252 seconds)
[11:45:17] *** Quits: mattd (~mattd@2601:1c0:6c01:b460:b429:9115:6b9f:951f) (Quit: Leaving)
[11:45:38] *** Quits: blyat-73 (~hjgkjhgkj@46.235.96.249) (Ping timeout: 252 seconds)
[11:50:14] *** Quits: moto (~moto@user/moto) (Ping timeout: 265 seconds)
[11:55:57] *** Joins: danmurf (uid480399@user/danmurf)
[11:57:34] *** Joins: moto (~moto@user/moto)
[11:59:25] *** Quits: gggp_ (~gggp@60.10.23.170) (Remote host closed the connection)
[11:59:52] *** Joins: rendar (~rendar@user/rendar)
[12:00:15] *** Joins: gggp (~gggp@120.245.40.131)
[12:08:47] *** Joins: chenqisu12 (~chenqisu1@183.217.201.63)
[12:11:09] *** Quits: chenqisu1 (~chenqisu1@183.217.200.156) (Ping timeout: 256 seconds)
[12:14:11] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[12:27:39] *** Quits: imandes0 (~imandes0@37.252.70.127) (Ping timeout: 256 seconds)
[12:28:56] *** Joins: Techcable (~Techcable@168.235.93.147)
[12:29:32] *** Joins: gggp_ (~gggp@60.10.194.46)
[12:30:33] *** Joins: imandes0 (~imandes0@37.252.70.127)
[12:30:55] *** Quits: gggp (~gggp@120.245.40.131) (Ping timeout: 252 seconds)
[12:34:10] *** Quits: imandes0 (~imandes0@37.252.70.127) (Remote host closed the connection)
[12:35:28] *** Joins: gggp (~gggp@120.245.46.84)
[12:36:41] *** Quits: gggp_ (~gggp@60.10.194.46) (Remote host closed the connection)
[12:37:19] *** Joins: imandes0 (~imandes0@37.252.70.127)
[12:40:15] *** Joins: bkicher_ (~bkircher@ppp-93-104-88-237.dynamic.mnet-online.de)
[12:40:44] *** Joins: souvik (~souvik@159.89.161.156)
[12:42:15] *** Quits: bkircher (~bkircher@2001:a61:250f:2b01:4b96:7ca4:45ee:36d4) (Ping timeout: 268 seconds)
[12:43:04] *** Joins: shka (~herr@83.175.151.96.piasta.pl)
[12:47:25] *** Joins: normen (~normen@p200300d717306100f59db7c3d67e2d31.dip0.t-ipconnect.de)
[12:52:08] *** Joins: mrig (~AdiIRC@user/mrig)
[13:00:27] <j416> nameless_: I don't understand what you are trying to build, but it sounds to me like this is more low-level than it has to be.
[13:02:04] <j416> nameless_: unless of course you must have control over the _number_ of actual reads (?).
[13:09:31] <nameless_> Hey j416 it may well be, but the general idea is to abstract the I/O for IoT devices
[13:10:25] <nameless_> So the use case is to read the sensor data, do some rule-based action, and then write the data
[13:11:39] <nameless_> If there are other techniques that may provide value I am open to that as well, this just seemed to be the most idiomatic approach
[13:19:00] <j416> nameless_: implement io.Reader or io.Writer, then use io.Copy?
[13:29:02] <nameless_> I could do that, though the issue I had affected io.Copy as well. It is fixed, but io.Copy isnt enough because I need to be able to retain failed writes and include retry attempts
[13:39:51] *** Joins: krux02 (~krux02@p200300e817365e0034cc1bc883b75341.dip0.t-ipconnect.de)
[13:42:40] *** Quits: arinov (~arinov@213.194.126.155) (Quit: WeeChat 3.3)
[13:44:05] *** Quits: bkicher_ (~bkircher@ppp-93-104-88-237.dynamic.mnet-online.de) (Ping timeout: 256 seconds)
[13:49:22] *** Joins: gpeskens (~gpeskens@62.251.31.165)
[13:51:09] *** Joins: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl)
[13:52:40] *** Joins: arinov (~arinov@213.194.126.155)
[13:52:46] <j416> sounds like a custom io.Writer to me, but I don't have the whole picture
[13:53:55] <nameless_> Yeah, in order to do that I'd have to add that logic into the io.Writer impl
[13:54:39] <nameless_> That logic would be preferred to live outside of that io.Writer impl and remain at a higher level
[13:55:25] <nameless_> But you are correct, it could be done there as well
[13:59:30] *** bookworm_ is now known as bookworm
[14:01:25] <nameless_> Also, there is a batching option where you may want to wait for n number of reads before doing a batch write
[14:02:54] <j416> note that one read does not necessarily mean one full read of whatever it is you are reading
[14:03:14] <j416> so you may want to decouple that
[14:03:43] <A_Dragon> you could do some clever dependency injection to make it do either a naive or clever writer impl
[14:10:17] *** Quits: zwr (~zwr@2804:d45:b966:fb00:c634:1c10:a560:ee24) (Ping timeout: 252 seconds)
[14:10:46] *** Joins: zwr (~zwr@2804:d45:b966:fb00:ed3f:2af5:12bc:dd1e)
[14:11:01] *** Joins: gggp_ (~gggp@111.63.44.9)
[14:13:35] *** Quits: gggp (~gggp@120.245.46.84) (Ping timeout: 252 seconds)
[14:14:00] *** Joins: smeeagle (~smeeagle@2a00:23c8:9611:e600:655c:269a:c0b2:3abd)
[14:22:57] *** Quits: gggp_ (~gggp@111.63.44.9) (Remote host closed the connection)
[14:23:00] *** Joins: gggp (~gggp@60.10.23.170)
[14:23:47] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: ZzzZ)
[14:31:53] *** Joins: adip (~adip@dev165.neoplus.adsl.tpnet.pl)
[14:32:12] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[14:38:54] *** Joins: jjido (~Denis@90.213.58.125)
[14:57:33] *** Joins: zer0bitz (~zer0bitz@dsl-hkibng32-54fbfb-173.dhcp.inet.fi)
[15:02:03] *** Quits: eyJhb (~eyJhb@user/eyjhb) (Quit: Clever message)
[15:02:55] *** Joins: eyJhb (~eyJhb@user/eyjhb)
[15:05:31] <dalan> Comparing two solutions for Advent of Code, using the Benchmark tool I'm surprised to find my solution is faster than another one I found. How do I go one level deeper and find out where the additional time is being spent?
[15:06:06] <dalan> (I suspect it's because I'm using preallocated slices instead of maps, but want to validate)
[15:11:59] <bookworm> pprof
[15:12:55] <bookworm> but as always, benchmarks are only half of the story... throw an input file of 30GB at the algorithms and see them all go boom if they try to read everything into memory ;)
[15:21:51] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[15:23:53] *** Quits: arinov (~arinov@213.194.126.155) (Ping timeout: 256 seconds)
[15:27:35] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: ZzzZ)
[15:49:59] *** Quits: zaz\ (~zaz@poneybl.eu) (Quit: bye)
[15:52:20] *** Joins: zaz\ (~zaz@poneybl.eu)
[15:53:55] <A_Dragon> show me the code :P
[15:54:10] <A_Dragon> also Ive done a good few in go this year (rust, go, python)
[15:54:16] <A_Dragon> if you want more comparisons
[15:54:37] <A_Dragon> https://github.com/A-UNDERSCORE-D/aoc2021/tree/main/aoc
[15:57:32] <bookworm> A_Dragon: https://github.com/A-UNDERSCORE-D/aoc2021/blob/main/aoc/go/util/slice.go#L24 exactly what I meant by going boom on large input files ;)
[15:57:43] <A_Dragon> oh yes I know
[15:58:24] <A_Dragon> but for most of them its fine
[15:58:25] <bookworm> also reflect ? Come on
[15:58:30] <A_Dragon> where?
[15:58:46] <bookworm> ah, compare only
[15:58:57] <A_Dragon> yeah, its a helper to pass to the others if Im feeling lazy
[15:59:00] <bookworm> (just looked at the import)
[15:59:39] <ikke> I see this is already using generics?
[15:59:43] <bookworm> oh, you used the go tip with generics? Neat
[15:59:43] <A_Dragon> yeah
[15:59:52] <A_Dragon> yes Im running gotip for all my solutions
[15:59:53] <bookworm> ikek beat me to it
[16:00:46] <bookworm> immediately going full functional on the language :D
[16:00:50] <A_Dragon> >.>
[16:00:52] <ikke> What is the challenge?
[16:00:55] <A_Dragon> Ive been writing lots of rust
[16:01:08] <A_Dragon> ikke: you mean aoc?
[16:01:12] <ikke> yes
[16:01:17] <A_Dragon> adventofcode.com/
[16:01:18] <bookworm> advent of code, logical puzzles
[16:01:22] <A_Dragon> daily puzzles for december
[16:01:28] <A_Dragon> increasing in difficulty
[16:01:37] <bookworm> generally more on the algorithm side than actual programming problems, but fun
[16:03:27] <A_Dragon> things like https://asciinema.org/a/hG3ZBaXBAoPgz0O3Ed0Iuf0lo  , https://asciinema.org/a/W9lntg7WqXg5QeuzH0sPNkXw3 , https://asciinema.org/a/yIs8LhMfl1QgkwgFSoG3BAcca , https://asciinema.org/a/kmGZYfX1YceQiz0BJv5CcV7Pj
[16:04:03] *** Quits: imandes0 (~imandes0@37.252.70.127) (Ping timeout: 256 seconds)
[16:04:40] *** Quits: jjido (~Denis@90.213.58.125) (Quit: My MacBook Air has gone to sleep. ZZZzzzâ€¦)
[16:17:54] *** Joins: sevenever (~seven@user/sevenever)
[16:21:35] <sevenever> Hi there, how to use a type of func in type assertion? something like varA.(type(SomeFunc)) ? I don't want to play with reflect, need this in compile time. Any advice?
[16:22:02] <A_Dragon> type asserts arent compiletime.
[16:23:11] <sevenever> I mean is it possible to get type of SomeFunc at compiletime and put it into type assertion?
[16:23:58] <A_Dragon> have somefunc return the type.
[16:25:08] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[16:25:58] <sevenever> thanks, can you pls give a code snippet?
[16:26:30] *** Joins: menace (~someone@ppp-93-104-168-246.dynamic.mnet-online.de)
[16:26:52] *** Quits: menace (~someone@ppp-93-104-168-246.dynamic.mnet-online.de) (Changing host)
[16:26:52] *** Joins: menace (~someone@user/menace)
[16:26:56] *** menace is now known as Deknos
[16:29:25] *** Quits: dalek-caan (~Thunderbi@109.252.124.86) (Quit: dalek-caan)
[16:32:38] *** Joins: jjido (~Denis@90.213.58.125)
[16:37:41] *** Quits: normen (~normen@p200300d717306100f59db7c3d67e2d31.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[16:38:54] *** Quits: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl) (Quit: jaca122)
[16:39:39] *** Joins: imandes0 (~imandes0@109.75.35.208)
[16:40:03] *** Joins: Torr (~Torr@user/torr)
[16:40:54] *** Quits: tesuji (~quassel@2a02:908:180:9500:cd73:72f7:9168:fa9d) (Ping timeout: 268 seconds)
[16:41:32] *** Joins: normen (~normen@p200300d717306100f59db7c3d67e2d31.dip0.t-ipconnect.de)
[16:41:39] *** Quits: jjido (~Denis@90.213.58.125) (Quit: My MacBook Air has gone to sleep. ZZZzzzâ€¦)
[16:51:18] *** Joins: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com)
[16:52:58] *** Joins: mickey84 (~user@user/mickey)
[16:54:15] *** Quits: mickey8 (~user@user/mickey) (Remote host closed the connection)
[16:54:15] *** mickey84 is now known as mickey8
[17:09:13] *** Quits: beholders_eye (~weechat@177.132.24.49) (Ping timeout: 252 seconds)
[17:18:17] *** Quits: chenqisu12 (~chenqisu1@183.217.201.63) (Ping timeout: 256 seconds)
[17:19:55] *** Quits: smeeagle (~smeeagle@2a00:23c8:9611:e600:655c:269a:c0b2:3abd) (Quit: smeeagle)
[17:28:14] *** Joins: smeeagle (~smeeagle@2a00:23c8:9611:e600:655c:269a:c0b2:3abd)
[17:43:31] *** Joins: Kaivo (~Kaivo@user/kaivo)
[17:48:13] *** Joins: paulgrmn_ (~paulgrmn@user/paulgrmn)
[18:01:00] *** Joins: knkay (~kay@213.190.30.120)
[18:08:13] *** Quits: imandes0 (~imandes0@109.75.35.208) (Ping timeout: 256 seconds)
[18:09:11] *** Quits: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com) (Quit: Leaving)
[18:10:06] *** Joins: blyat-73 (~hjgkjhgkj@46.235.96.249)
[18:22:01] *** Joins: jjonah (~jjonah@p200300d5d70fb600dea632fffeb3342f.dip0.t-ipconnect.de)
[18:24:32] *** Joins: dalek-caan (~Thunderbi@109.252.124.86)
[18:24:42] *** Joins: sudoforge (~sudoforge@wireguard/tunneler/sudoforge)
[18:25:06] *** Quits: gggp (~gggp@60.10.23.170) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[18:27:10] *** Joins: tesuji (~quassel@2a02:908:180:9500:712e:1c30:1e5e:7145)
[18:30:40] *** Joins: popey (~popey@ubuntu/member/popey)
[18:32:17] *** Quits: pepee (~pepee@user/pepee) (Quit: WeeChat 2.8)
[18:33:01] *** Joins: arinov (~arinov@31.142.57.149)
[18:36:33] *** Quits: c10l (~c10l@user/c10l) (Quit: The Lounge - https://thelounge.chat)
[18:36:48] *** Joins: c10l (~c10l@user/c10l)
[18:43:11] *** Joins: LiftLeft (~LiftLeft@gateway/vpn/pia/liftleft)
[18:43:52] *** Joins: tg (~tg@rockylinux/infra/tg)
[18:49:49] *** Joins: imandes0 (~imandes0@109.75.35.208)
[18:50:29] *** Quits: mickey8 (~user@user/mickey) (Remote host closed the connection)
[18:50:44] *** Joins: mickey8 (~user@user/mickey)
[18:52:15] *** Quits: arinov (~arinov@31.142.57.149) (Ping timeout: 252 seconds)
[18:58:02] *** Quits: decartes_ (sid240036@id-240036.helmsley.irccloud.com) (Ping timeout: 240 seconds)
[18:58:16] *** Quits: braxas (sid508886@id-508886.lymington.irccloud.com) (Ping timeout: 245 seconds)
[18:58:58] *** Quits: wangledorf (sid505185@id-505185.ilkley.irccloud.com) (Ping timeout: 260 seconds)
[19:00:04] *** Quits: bindu (~bindu@user/bindu) (Remote host closed the connection)
[19:00:07] *** Joins: wangledorf (sid505185@id-505185.ilkley.irccloud.com)
[19:00:18] *** Joins: braxas (sid508886@id-508886.lymington.irccloud.com)
[19:00:34] *** Joins: bindu (~bindu@user/bindu)
[19:01:18] *** Joins: gzj (~GZJ0X@216.24.178.99.16clouds.com)
[19:01:18] *** Joins: decartes_ (sid240036@id-240036.helmsley.irccloud.com)
[19:07:42] *** Quits: gzj (~GZJ0X@216.24.178.99.16clouds.com) (Remote host closed the connection)
[19:07:47] *** Quits: imandes0 (~imandes0@109.75.35.208) (Remote host closed the connection)
[19:10:28] *** Joins: paulgrmn__ (~paulgrmn@user/paulgrmn)
[19:12:16] *** Quits: greatgatsby (~greatgats@bras-base-toroon0411w-grc-52-142-114-106-7.dsl.bell.ca) (Ping timeout: 260 seconds)
[19:15:01] *** Quits: Torr (~Torr@user/torr) (Ping timeout: 256 seconds)
[19:21:02] *** Quits: HisShadow (~HisShadow@user/hisshadow) (Ping timeout: 252 seconds)
[19:22:47] *** Joins: HisShadow (~HisShadow@user/hisshadow)
[19:23:24] *** A_Dragon is now known as AAAAA_DRAGON
[19:26:07] *** Quits: bindu (~bindu@user/bindu) (Remote host closed the connection)
[19:27:17] *** Joins: bindu (~bindu@user/bindu)
[19:27:49] *** Quits: paulgrmn__ (~paulgrmn@user/paulgrmn) (Ping timeout: 252 seconds)
[19:28:04] *** Quits: smeeagle (~smeeagle@2a00:23c8:9611:e600:655c:269a:c0b2:3abd) (Quit: smeeagle)
[20:00:11] *** Joins: tane (~tane@dslb-002-201-234-166.002.201.pools.vodafone-ip.de)
[20:00:11] *** Quits: tane (~tane@dslb-002-201-234-166.002.201.pools.vodafone-ip.de) (Changing host)
[20:00:11] *** Joins: tane (~tane@user/tane)
[20:07:29] *** Joins: Tv_ (uid62079@user/tv/x-3144562)
[20:08:48] *** Joins: imandes0 (~imandes0@109.75.35.208)
[20:16:39] *** Joins: neurocyte0132889 (~neurocyte@94.46.79.27)
[20:16:39] *** Quits: neurocyte0132889 (~neurocyte@94.46.79.27) (Changing host)
[20:16:39] *** Joins: neurocyte0132889 (~neurocyte@user/neurocyte)
[20:17:57] *** Joins: Hanicef (~gustaf@81-229-9-108-no92.tbcn.telia.com)
[20:18:37] *** Joins: arinov (~arinov@213.194.126.155)
[20:22:59] *** Joins: hackers (~self@user/hackers)
[20:26:03] *** Joins: Torr (~Torr@user/torr)
[20:28:41] *** Quits: hackers (~self@user/hackers) (Ping timeout: 256 seconds)
[20:30:16] *** Quits: Wouter0100 (~Wouter010@entry.nbg.netvos.nl) (Remote host closed the connection)
[20:30:25] *** Joins: Wouter0100 (~Wouter010@entry.nbg.netvos.nl)
[20:32:01] *** Quits: mrig (~AdiIRC@user/mrig) (Quit: Going offline, see ya! (www.adiirc.com))
[20:34:11] *** Quits: mikoto-chan (~mikoto-ch@esm-84-240-99-143.netplaza.fi) (Ping timeout: 252 seconds)
[20:34:59] *** Joins: mrig (~mrig@user/mrig)
[20:35:00] *** Joins: mikoto-chan (~mikoto-ch@esm-84-240-99-143.netplaza.fi)
[20:35:18] *** Quits: bindu (~bindu@user/bindu) (Ping timeout: 276 seconds)
[20:35:21] *** Quits: c10l (~c10l@user/c10l) (Quit: The Lounge - https://thelounge.chat)
[20:37:18] *** Joins: bindu (~bindu@user/bindu)
[20:39:16] *** Quits: todd (~todd@gateway/tor-sasl/toddf) (Remote host closed the connection)
[20:39:31] *** Joins: paulgrmn__ (~paulgrmn@user/paulgrmn)
[20:43:02] *** Quits: danmurf (uid480399@user/danmurf) (Quit: Connection closed for inactivity)
[20:43:41] *** Joins: c10l (~c10l@user/c10l)
[20:44:05] *** Quits: paulgrmn__ (~paulgrmn@user/paulgrmn) (Ping timeout: 252 seconds)
[20:45:11] *** Quits: Torr (~Torr@user/torr) (Ping timeout: 252 seconds)
[20:46:01] *** Joins: todd (~todd@gateway/tor-sasl/toddf)
[21:06:49] *** Joins: kyle__ (~kyle@schmitt.ninja)
[21:09:06] <kyle__> if I make a map of ints to an 2d array of ints with a specific size, how do I go about assigning to it?  I'm missing something fairly obvious I'm sure.
[21:09:38] <kyle__> map[int][5][5]int, make(map[int][5][5]int), but assigning to it tells me I cannot assing.
[21:09:43] <kyle__> assign
[21:10:42] <kyle__> I did also try assigning a literal {{0,0,0 ..},{}} that was 5x5
[21:16:41] *** Joins: jjido (~Denis@90.213.58.125)
[21:21:47] *** Quits: koo5_ (~quassel@51.140.155.227) (Quit: http://quassel-irc.org - Chat comfortably. Anywhere.)
[21:23:59] *** Joins: koo5_ (~quassel@51.140.155.227)
[21:30:22] <seebs> my guess is: you're expecting the array of ints to be addressable and it's not
[21:30:38] <seebs> so, specifically: if you have a map[a]b, you can only assign to b
[21:30:42] <seebs> you can't assign to *part* of b
[21:30:46] <seebs> you must assign the whole b, all at once
[21:31:24] <seebs> so, the only valid assignments to that are complete [5][5]int. you can't write to the [0] or [0][0] of it.
[21:34:49] <j416> kyle__: that's very close to just a [][5][5]int though
[21:35:27] <j416> kyle__: assuming day 4. good luck with it. :D
[21:44:25] <mikoto-chan> what are some good books/sources/tutorials on concurrency/channels in Go?
[21:44:57] *** Joins: dhruvasagar (~dhruvasag@49.207.222.205)
[21:45:00] <mikoto-chan> I find it pretty hard to wrap my head around and I'd honestly avoid it as much as possible since there seem to be endless pitfalls (reminds me of programming in C which I quit in favor of Go)
[21:46:09] *** Joins: xb0o2 (~xb0o2@user/xb0o2)
[21:47:34] *** Joins: masticass (~gzc@host-85-201-222-202.dynamic.voo.be)
[21:48:42] *** Quits: c10l (~c10l@user/c10l) (Quit: The Lounge - https://thelounge.chat)
[21:49:40] *** Joins: c10l (~c10l@user/c10l)
[21:56:07] *** Quits: jjido (~Denis@90.213.58.125) (Quit: My MacBook Air has gone to sleep. ZZZzzzâ€¦)
[21:57:00] *** Quits: blyat-73 (~hjgkjhgkj@46.235.96.249) (Quit: Leaving)
[21:57:13] *** Joins: blyat-73 (~hjgkjhgkj@46.235.96.249)
[21:58:57] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[22:10:02] <kyle__> j416: Yes, Yes it is day4 XD
[22:10:45] <kyle__> seebs: OK.  I think I understand that
[22:17:34] *** Quits: todd (~todd@gateway/tor-sasl/toddf) (Remote host closed the connection)
[22:22:23] *** Joins: todd (~todd@gateway/tor-sasl/toddf)
[22:23:02] <fizzie> Personally, my day 4 is a `[]struct { a int; b [][2]int; c [2][5]int }` (names obfuscated). ;)
[22:29:08] *** Quits: arinov (~arinov@213.194.126.155) (Ping timeout: 252 seconds)
[22:30:29] <kyle__> fizzie: Yeah, I thought of using structs, but I think my long history of ruby is making me want to abuse arrays and maps on the fly.
[22:31:39] *** Quits: Shimmy (~Shimmy@user/shimmy) (Quit: The Lounge - https://thelounge.chat)
[22:31:46] <fizzie> Well, the comment was  more about not having any sort of [5][5]T.
[22:31:50] *** Joins: Shimmy (~Shimmy@user/shimmy)
[22:39:57] *** Quits: llorllale (~llorllale@2607:9880:3a18:69:44b3:1807:4825:f489) (Ping timeout: 252 seconds)
[22:41:12] *** Joins: hgkjhgkjgkj (~hjgkjhgkj@46.235.96.249)
[22:41:20] *** Joins: azidhaka_ (~azidhaka@user/azidhaka)
[22:41:43] *** Quits: monke (~monke@user/monke) (Quit: Ping timeout (120 seconds))
[22:41:43] *** Quits: loosh (~jason@vultr.bastion.pnj1.us.zj.is) (Quit: Ping timeout (120 seconds))
[22:41:53] *** Quits: azidhaka (~azidhaka@user/azidhaka) (Read error: Connection reset by peer)
[22:41:53] *** Joins: loosh (~jason@vultr.bastion.pnj1.us.zj.is)
[22:41:54] *** Joins: monke (~monke@user/monke)
[22:41:55] *** Joins: llorllale (~llorllale@2607:9880:3a18:69:44b3:1807:4825:f489)
[22:42:00] *** Joins: popey3 (~popey@ubuntu/member/popey)
[22:42:16] *** Joins: jjido (~Denis@90.213.58.125)
[22:42:43] *** Quits: Techcable (~Techcable@168.235.93.147) (Quit: ZNC - https://znc.in)
[22:42:56] *** Joins: Techcable_ (~Techcable@168.235.93.147)
[22:43:07] *** Joins: smeeagle (~smeeagle@2a00:23c8:9611:e600:b593:bab6:272d:615b)
[22:44:26] *** Quits: blyat-73 (~hjgkjhgkj@46.235.96.249) (Ping timeout: 256 seconds)
[22:44:40] *** Quits: popey (~popey@ubuntu/member/popey) (Ping timeout: 256 seconds)
[22:44:40] *** Quits: Kaivo (~Kaivo@user/kaivo) (Ping timeout: 256 seconds)
[22:44:40] *** popey3 is now known as popey
[22:45:57] *** Joins: Kaivo (~Kaivo@user/kaivo)
[22:47:38] *** Joins: arinov (~arinov@31.142.57.149)
[22:52:24] *** Quits: vimal (~vimal@ip-213-127-87-89.ip.prioritytelecom.net) (Remote host closed the connection)
[22:52:57] *** Quits: dalek-caan (~Thunderbi@109.252.124.86) (Quit: dalek-caan)
[22:59:57] *** Quits: hgkjhgkjgkj (~hjgkjhgkj@46.235.96.249) (Read error: Connection reset by peer)
[23:00:20] *** Joins: hgkjhgkjgkj (~hjgkjhgkj@46.235.96.249)
[23:05:42] *** Quits: tane (~tane@user/tane) (Quit: Leaving)
[23:13:50] *** Quits: jpw (~jpw@user/jpw) (Remote host closed the connection)
[23:27:48] *** Quits: Hanicef (~gustaf@81-229-9-108-no92.tbcn.telia.com) (Quit: leaving)
[23:29:56] *** Quits: arinov (~arinov@31.142.57.149) (Ping timeout: 245 seconds)
[23:54:05] *** Joins: tyson2 (~user@cpe00fc8d34ff03-cm00fc8d34ff00.sdns.net.rogers.com)
[23:58:08] *** Joins: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl)
