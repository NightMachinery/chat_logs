[00:01:35] *** Quits: Klinda (~superleag@user/klinda) (Ping timeout: 264 seconds)
[00:01:52] *** Quits: KombuchaKip (~kip@192.252.230.5) (Quit: Leaving.)
[00:02:09] *** Joins: imp (~imp@192-141-191-231.alternativaip.net.br)
[00:02:26] *** Quits: Haxxa (~Haxxa@122.199.45.224) (Remote host closed the connection)
[00:03:46] *** Joins: Haxxa (~Haxxa@122.199.45.224)
[00:05:26] *** Joins: sturm_ (~bsturmfel@mediagoblin/maintainer/bsturmfels)
[00:05:48] *** Quits: gitesh (uid423739@id-423739.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[00:05:59] *** Quits: dez (uid92154@user/dez) (Quit: Connection closed for inactivity)
[00:07:26] *** Quits: lethu (~lethu@user/lethu) (Ping timeout: 265 seconds)
[00:09:42] *** Joins: lethu (~lethu@user/lethu)
[00:10:06] *** Quits: GreenResponse (~tomek@r-45-155-148-237.gpon.bialnet.pl) (Quit: Leaving)
[00:10:29] *** Joins: Alleria (~textual@user/alleria)
[00:10:55] *** Joins: phantomotap (~phantomot@c-68-35-28-201.hsd1.al.comcast.net)
[00:12:56] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-d584-6e57-f98b-0941.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[00:13:53] *** Joins: iflema (~ian@user/iflema)
[00:15:10] *** Quits: Haxxa (~Haxxa@122.199.45.224) (Quit: Haxxa flies away.)
[00:15:36] *** Joins: Haxxa (~Haxxa@122.199.45.224)
[00:16:56] *** Quits: sturm_ (~bsturmfel@mediagoblin/maintainer/bsturmfels) (Quit: Leaving)
[00:18:14] *** Quits: semeion (~semeion@user/semeion) (Read error: Connection reset by peer)
[00:23:06] *** Quits: Bronto22 (~mennoh@84-86-247-193.fixed.kpn.net) (Quit: Konversation terminated!)
[00:23:23] *** Quits: Barones (~Barones@2804:7f3:8987:c42f:e519:2999:4571:c6ce) (Quit: Leaving)
[00:23:36] *** Joins: semeion (~semeion@user/semeion)
[00:24:01] *** Quits: oldguy (~oldguy@user/oldguy) (Ping timeout: 265 seconds)
[00:25:06] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-d584-6e57-f98b-0941.res6.spectrum.com)
[00:25:48] *** Joins: oldguy (~oldguy@user/oldguy)
[00:27:23] *** Quits: upsala (~zcb@185.213.155.160) (Quit: WeeChat 3.3)
[00:27:30] <imp> I really like to keep the name space for things imported that are used just once and twice in a code.  But some of these namespaces are insanely huge (like 120 chars long), or sometimes stupid. Like "from A import A" (yes datetime, I'm looking to you). What are the recomendations in these cases?
[00:28:15] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[00:28:44] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-d584-6e57-f98b-0941.res6.spectrum.com) (Client Quit)
[00:29:15] *** Quits: Sheilong (uid293653@id-293653.ilkley.irccloud.com) ()
[00:29:49] <summonner> imp, a rule of thumb is you can have up to a single dot in your function calls, but if you hit 2 dots, you need to dive another level deeper into your imports
[00:30:26] <summonner> a fairly sane guide: https://docs.python-guide.org/writing/structure/#modules
[00:30:34] *** Quits: djhankb (~djhankb@208.113.164.68) (Remote host closed the connection)
[00:30:47] *** Quits: kosh (~kosh@user/kosh) (Ping timeout: 265 seconds)
[00:30:53] <summonner> (skip down a few paragraphs)
[00:30:56] *** Quits: Lando-SpacePimp (~Lando-Spa@user/lando-spacepimp) (Ping timeout: 245 seconds)
[00:31:04] *** Joins: djhankb (~djhankb@208.113.164.68)
[00:31:13] <imp> summoner: Thanks I will read.
[00:32:05] <aphysically> I think Google styleguide has something on this, but like all style guides it is what it is so you gotta find what works for you
[00:32:07] <aphysically> https://google.github.io/styleguide/pyguide.html#22-imports
[00:33:52] *** Quits: src (~src@user/src) (Quit: Leaving)
[00:34:40] *** Quits: adiKt (uid472628@id-472628.tinside.irccloud.com) ()
[00:35:06] *** Quits: Haxxa (~Haxxa@122.199.45.224) (Quit: Haxxa flies away.)
[00:35:08] *** Quits: winterflaw (~winterfla@gateway/tor-sasl/winterflaw) (Remote host closed the connection)
[00:36:13] *** Joins: kickingvegas (~cchoi@c-24-5-40-20.hsd1.ca.comcast.net)
[00:36:18] *** Joins: Haxxa (~Haxxa@122.199.45.224)
[00:37:24] *** Joins: yaalon (~yaalon@2600:1700:9450:2d30:e57c:4c38:fc8f:326c)
[00:40:18] *** Joins: hrob (~hrob@31-209-221-88.dsl.dynamic.simnet.is)
[00:40:38] *** Quits: Sky_Net (~Sky_Net@176.14.213.149) (Read error: Connection reset by peer)
[00:40:58] <hrob> sorry dropped out, found out pip install was just affected by vpn to my work
[00:41:08] <hrob> so mypy is installed and working now
[00:41:10] *** Quits: Haxxa (~Haxxa@122.199.45.224) (Remote host closed the connection)
[00:42:04] <hrob> mypy doesn't like me using class static methods... kinda crazy I feel unless I'm not declaring a static method correctly
[00:42:27] <hrob> mypy... "error: Self argument missing for a non-static method (or an invalid type for self)"
[00:43:37] <hrob> seems circular... yes I dont want "self" in a static method... so naturally it is then static
[00:43:50] *** Joins: Haxxa (~Haxxa@122.199.45.224)
[00:43:59] <braxas> https://github.com/RDFLib/rdflib/pull/1442#pullrequestreview-781463628 < am I somehow not explaining myself well here regarding flake8 config?
[00:44:29] <KirkMcDonald> hrob: I mean, how did you declare it?
[00:45:18] <hrob> KirkMcDonald, just  def foo(args) -> ReturnType: ...
[00:45:30] <hrob> as opposed to   def foo(self, args)...
[00:45:35] <KirkMcDonald> hrob: If you want a static method, then you'd need @staticmethod
[00:45:36] <hrob> does that not make it clear
[00:45:55] <KirkMcDonald> hrob: (Though most often @classmethod is more useful.)
[00:46:24] <hrob> ahaaa... I live and learn... but that seems so verbose, why is it needed?
[00:46:47] <KirkMcDonald> hrob: Because the mechanism that gives you a bound method would still be in place otherwise.
[00:46:52] <imp> summonner: Found this on the article "Lastly, a convenient syntax is available for importing deeply nested packages: import very.deep.module as mod. This allows you to use mod in place of the verbose repetition of very.deep.module."
[00:46:59] *** Quits: manti7 (~manti7@176.10.104.94) (Quit: WeeChat 3.1)
[00:47:05] <KirkMcDonald> hrob: So if you access the method from an instance, it'd still try to bind 'self' to the first parameter.
[00:47:47] <KirkMcDonald> hrob: Remember, as far as the language is concerned, "self" is really just an arbitrary name. It's not actually semantically meaningful in and of itself.
[00:48:41] <hrob> KirkMcDonald, thanks, hm... ok that makes sense... I could have called it a dog and it would still stuff the self in ther
[00:48:51] *** Quits: Ilyu (~quassel@166.215.82.79.rev.sfr.net) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[00:49:29] <hrob> KirkMcDonald, dont know where I got this misconception from... dont use static methods much, and seems like python has been forgiving to me
[00:49:38] <hrob> when I declare things like that
[00:50:05] <KirkMcDonald> hrob: If you access the method from the *class*, rather than an instance, then you just get the function object as-is. So it's possible to not even notice.
[00:50:31] *** Quits: thurs8060 (~thurs@ip68-225-209-147.ph.ph.cox.net) (Ping timeout: 245 seconds)
[00:50:50] *** Joins: thurs8060 (~thurs@ip68-225-209-147.ph.ph.cox.net)
[00:51:30] <KirkMcDonald> hrob: But, as mentioned, I do recommend using @classmethod instead of @staticmethod, in which case it passes the class object as the first parameter, rather than an instance.
[00:51:54] <KirkMcDonald> And does so whether you call it on the class or on an instance.
[00:52:05] *** Joins: orbatos (~orbatos@user/orbatos)
[00:52:05] <hrob> KirkMcDonald, thanks... seems like mypy and you thought me a thing or two... I was almost wanting to dump this mypy... plus confused blog threads on the issue
[00:52:48] *** Quits: zebrag (~chris@user/zebrag) (Remote host closed the connection)
[00:52:57] <hrob> *taught
[00:54:06] *** Quits: Laibsch (~leggewie@93.152.184.249) (Quit: Leaving.)
[00:54:19] *** Quits: orbatos__ (~orbatos@user/orbatos) (Ping timeout: 268 seconds)
[00:54:22] <hrob> I'll compare static vs classmethod -- If I understand you, then it will make the method functional both externally and internally
[00:54:50] <KirkMcDonald> The difference is that a staticmethod just doesn't get *anything* as a special first parameter.
[00:54:51] *** Joins: tektik (~said@68.33.69.0)
[00:55:23] *** Quits: sekiro (~sekiro@125-85.iitb.ac.in) (Ping timeout: 256 seconds)
[00:56:49] *** Joins: zebrag (~chris@user/zebrag)
[00:57:41] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 264 seconds)
[00:58:37] *** Quits: gitly (~gitly@148.252.128.175) (Ping timeout: 252 seconds)
[00:58:53] *** Quits: Pickchea (~private@user/pickchea) (Quit: Leaving)
[00:59:16] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 245 seconds)
[00:59:39] *** Joins: fikran (~fikran@user/fikran)
[01:00:32] *** Joins: gitly (~gitly@85.255.236.123)
[01:01:41] *** Joins: KombuchaKip (~kip@192.252.230.5)
[01:02:44] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 268 seconds)
[01:04:12] *** Joins: Vonter_ (~Vonter@user/vonter)
[01:04:58] *** Quits: ColonelJ (~ColonelJ@user/colonelj) (Quit: leaving)
[01:05:53] *** Quits: Dotz0cat (~Dotz0cat@h38.88.187.173.dynamic.ip.windstream.net) (Quit: ZNC 1.8.2 - https://znc.in)
[01:06:53] *** Quits: oldguy (~oldguy@user/oldguy) (Quit: WeeChat 2.3)
[01:07:49] *** Joins: Dotz0cat (~Dotz0cat@h38.88.187.173.dynamic.ip.windstream.net)
[01:08:49] *** Quits: Vonter_ (~Vonter@user/vonter) (Ping timeout: 265 seconds)
[01:09:27] *** Joins: Klinda (~superleag@user/klinda)
[01:09:30] *** Joins: zen_coder (~zen_coder@2a02:8109:a280:2d8d:dc9e:1427:a97:e25a)
[01:09:44] <zen_coder> when I use `subprocess.run` can I not use an argument with a white space?
[01:09:59] *** Quits: extropiator (~adam@user/extropiator) (Ping timeout: 264 seconds)
[01:10:01] <KirkMcDonald> zen_coder: Sure you can.
[01:10:04] *** Joins: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be)
[01:10:30] <energizer> zen_coder: i suggest passing a list of argument strings
[01:11:15] *** jazzy is now known as jazz-o-lantern
[01:12:04] <aphysically> jinsun: whoa check this out https://mypy-play.net/?mypy=latest&python=3.10&gist=1cb10416c97745cd4b7bc9dcc458109e
[01:12:14] <aphysically> I thought this was only a pyright complaint but this actually isn't compatible with mypy either
[01:13:25] *** Joins: cjb (~cjb@user/cjb)
[01:13:39] *** Quits: khrbt (~znc@user/khrbt) (Ping timeout: 265 seconds)
[01:15:07] *** Quits: gitly (~gitly@85.255.236.123) (Ping timeout: 252 seconds)
[01:15:36] *** Quits: tuskkk____ (uid18470@id-18470.tinside.irccloud.com) (Quit: Connection closed for inactivity)
[01:15:44] <hrob> wow, is this really the future of Python?   -> Tuple[Iterable[MyClass], int]:
[01:16:08] <phantomotap> that doesn't look nice
[01:16:39] <hrob> these typehints, require so many imports and thinking... and Im not sure anymore about ducktyping
[01:16:41] <KirkMcDonald> hrob: It's entirely optional.
[01:16:50] *** Joins: gitly (~gitly@148.252.128.175)
[01:17:02] *** Joins: Skyfire (~pyon@user/pyon)
[01:17:11] *** Quits: semeion (~semeion@user/semeion) (Ping timeout: 264 seconds)
[01:17:50] <hrob> I guess I have to go to a python conference lol
[01:18:45] *** Joins: khrbt (~znc@user/khrbt)
[01:18:50] *** Quits: palasso (~palasso@user/palasso) (Remote host closed the connection)
[01:18:51] <SnoopJ> hrob, "gradual typing" would be a good search keyword for learning about integrating annotations into more conventional Python workflows
[01:21:22] <hrob> SnoopJ thanks, so confused here
[01:21:43] <hrob> but nb. I just got into python3 was stuck too long on 2.7
[01:22:00] <hrob> dont ban me lol
[01:22:12] <SnoopJ> hrob, the really short version: they are NOT modifications to the type system, they are just annotations. The runtime stores them and doesn't care about them beyond that. Various 3rd-party tools may do useful things with them, though.
[01:22:52] <newdimension> Let's say I'm doing pd.read_csv("foo.csv"), since there is no absolute path Python is looking for the file in some folder. What's this folder and what defines it?
[01:23:13] <energizer> newdimension: os.cwd()
[01:23:15] <SnoopJ> newdimension, it looks in the current working directory, which you can query with os.getcwd()
[01:23:38] <energizer> er yeah that
[01:23:44] *** Joins: mattmcc (~matt@li807-33.members.linode.com)
[01:23:48] <newdimension> What usually defines the cwd?
[01:23:50] <SnoopJ> unless your program changes it, it'll be wherever you invoked Python from
[01:24:12] <newdimension> SnoopJ: does this mean in what folder I write python in bash?
[01:24:12] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.3)
[01:24:13] <hrob> newdimension  the $CWD from which you execute the program
[01:24:16] <SnoopJ> newdimension, yes
[01:24:26] *** Joins: extropiator (~adam@user/extropiator)
[01:24:58] <hrob> newdimension sorry $PWD on linux at least
[01:25:07] <newdimension> I see, thank you! :)
[01:25:14] <SnoopJ> hrob, you can also just run `pwd`
[01:25:42] <SnoopJ> newdimension, remember: bash is a program that runs programs for you. One of the things it does when it invokes those other programs is tell the OS what directory the new process is working from :)
[01:26:10] *** Quits: fedenix_ (~fedenix@gateway/tor-sasl/fedenix) (Remote host closed the connection)
[01:26:47] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[01:26:50] <SnoopJ> or maybe not tell, but there's a rule for it when a process makes new processes. I don't actually know how it works to that level of detail
[01:27:05] <newdimension> Makes sense
[01:27:12] *** Joins: TJ- (~root@2a01:7e00:e001:ee00:fa75:a4ff:fef3:42b4)
[01:27:23] *** Quits: rakoon (~rakoon@2001:985:f4c6:1:c50b:d813:5283:e43a) (Ping timeout: 264 seconds)
[01:27:39] *** Joins: Lando-SpacePimp (~Lando-Spa@user/lando-spacepimp)
[01:27:53] <hrob> its probably not very stable to reference files w.r.t. working dir -- not sure how you would solve it so you can run it from anywhere
[01:27:56] <SnoopJ> at any rate, it helps to remember that the shell is "just" a program that starts other programs, and very frequently the state of the shell is propagated to the new program.
[01:28:01] *** Quits: yaalon (~yaalon@2600:1700:9450:2d30:e57c:4c38:fc8f:326c) ()
[01:28:24] <SnoopJ> hrob, you can locate relative to the invoked file with `__file__`, I often type `HERE = pathlib.Path(__here__).parent.resolve()` at the start of programs that do this.
[01:28:44] <SnoopJ> (the .resolve() is unnecessary on modern versions, but I typically target 3.6 which does need it)
[01:28:44] <hrob> SnoopJ yeah thats it... I have googled and used that before lol
[01:29:00] *** Joins: y1n (~y1n@77.119.215.96.wireless.dyn.drei.com)
[01:29:09] <SnoopJ> hrob, it's not _always_ valid, i.e. if the program is running from a .zip or something
[01:29:11] *** Joins: yaalon (~yaalon@2600:1700:9450:2d30:e57c:4c38:fc8f:326c)
[01:29:20] <SnoopJ> but it's convenient when you know that it's definitely a .py on the filesystem
[01:29:57] *** Quits: N3X15 (~nexis@mail.nexisonline.net) (Quit: ZNC - http://znc.in)
[01:30:22] *** Quits: Haxxa (~Haxxa@122.199.45.224) (Quit: Haxxa flies away.)
[01:30:31] *** Quits: djhankb (~djhankb@208.113.164.68) (Remote host closed the connection)
[01:30:34] <hrob> SnoopJ, yup, used that when shipping files with a package - necessary to know the location of the package
[01:31:00] *** Joins: chrysalis (~Lindis@user/lindis)
[01:31:02] *** Joins: djhankb (~djhankb@208.113.164.68)
[01:31:03] *** Joins: blackout69 (~blackout6@net-37-179-183-91.cust.vodafonedsl.it)
[01:31:19] *** Joins: semeion (~semeion@user/semeion)
[01:32:02] *** Quits: imp (~imp@192-141-191-231.alternativaip.net.br) (Quit: imp)
[01:32:16] *** Joins: rexbinary_ (~rexbinary@user/rexbinary)
[01:32:34] *** Joins: Haxxa (~Haxxa@122.199.45.224)
[01:32:42] *** Joins: N3X15 (~nexis@mail.nexisonline.net)
[01:32:43] *** Quits: rexbinary (~rexbinary@user/rexbinary) (Ping timeout: 252 seconds)
[01:32:43] *** rexbinary_ is now known as rexbinary
[01:34:59] *** Joins: Vonter_ (~Vonter@user/vonter)
[01:35:03] *** Joins: imp (~imp@192-141-191-231.alternativaip.net.br)
[01:35:29] *** Quits: janemba (~janemba@94.204.254.193) (Ping timeout: 264 seconds)
[01:35:57] *** Parts: blackout69 (~blackout6@net-37-179-183-91.cust.vodafonedsl.it) ()
[01:36:23] *** Quits: Moosadee (~Moosadee@136.32.155.193) (Ping timeout: 264 seconds)
[01:38:45] *** Quits: jazz-o-lantern (~jaziz@user/jaziz) (Read error: Connection reset by peer)
[01:39:10] *** Joins: jazz-o-lantern (~jaziz@user/jaziz)
[01:39:19] *** Quits: Vonter_ (~Vonter@user/vonter) (Ping timeout: 252 seconds)
[01:41:54] *** Joins: PortableDave (~portabled@194-193-148-202.tpgi.com.au)
[01:42:09] *** Quits: Narrat (~omnius@p200300df5f377c7f06ea56fffe2e7cdc.dip0.t-ipconnect.de) (Quit: They say a little knowledge is a dangerous thing, but it's not one half so bad as a lot of ignorance.)
[01:42:30] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-d584-6e57-f98b-0941.res6.spectrum.com)
[01:44:10] *** Joins: Mindscape (~Lindis@user/lindis)
[01:46:33] *** Quits: chrysalis (~Lindis@user/lindis) (Ping timeout: 276 seconds)
[01:48:13] *** Joins: janemba (~janemba@185.107.80.152)
[01:48:16] *** Quits: eem (~eem@user/eem) (Quit: WeeChat 3.3)
[01:51:50] *** Quits: cedric (~cedric@2a01:cb11:821:7c00:8128:764a:89ad:5c22) (Quit: Konversation terminated!)
[01:54:10] *** Quits: abhixec (~abhixec@c-67-169-139-16.hsd1.ca.comcast.net) (Ping timeout: 252 seconds)
[01:55:17] *** Joins: pycurious (~Adium@user/pycurious)
[01:57:43] *** Joins: Kharon (uid511277@user/cypris)
[01:57:57] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[01:59:21] *** Joins: ElPresidente (~ElPreside@2600:1700:3d10:4870:7557:7aab:4b9d:9fbc)
[01:59:51] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[02:00:26] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[02:04:04] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 252 seconds)
[02:04:44] *** Quits: LucaTM (~LucaTM@user/lucatm) (Quit: Textual IRC Client: www.textualapp.com)
[02:04:48] *** Quits: Akuli (~Akuli@82-203-166-30.bb.dnainternet.fi) (Quit: Leaving)
[02:04:53] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Ping timeout: 265 seconds)
[02:08:10] *** Quits: akk (~akk@75.161.146.115) (Quit: +++)
[02:12:55] *** Quits: Haxxa (~Haxxa@122.199.45.224) (Quit: Haxxa flies away.)
[02:13:14] *** Quits: Seirdy (~Seirdy@sourcehut/user/seirdy) (Quit: exiting 3.2)
[02:13:15] *** Quits: rtur (~weechat@mail.rtur.org) (Ping timeout: 265 seconds)
[02:13:25] <hexology> is zip_safe still required for packages that include non-py data files?
[02:13:37] <hexology> is zip_safe=False still required, rather
[02:13:54] *** Joins: Seirdy (~Seirdy@sourcehut/user/seirdy)
[02:14:49] <aphysically> nedbat: I read through your pytest post this morning thanks
[02:15:39] <aphysically> I was a bit confused by the [0][0][0] on the mock args until I realized call() was a tuple of args/kwargs
[02:16:29] *** Joins: Haxxa (~Haxxa@122.199.45.224)
[02:16:45] <aphysically> I think I still have a lot to learn about mocking; my project will need a good chunk of it (I'm processing input files and interacting with a webserver)
[02:17:06] *** Joins: HaMsTeRs (~Thunderbi@14-0-229-133.static.pccw-hkt.com)
[02:17:35] *** Quits: TheHermann (~TheHerman@gateway/tor-sasl/thehermann) (Quit: Leaving)
[02:17:52] *** Quits: marcello42 (~marcello4@p200300dfaf409c014cf6635be2d5a763.dip0.t-ipconnect.de) (Read error: Connection reset by peer)
[02:18:03] *** Joins: parv (~quass@user/parv)
[02:19:29] <energizer> aphysically: https://pythonspeed.com/articles/verified-fakes/
[02:19:44] *** Joins: amogorkon (~amogorkon@port-92-196-56-8.dynamic.as20676.net)
[02:20:28] <amogorkon> hi
[02:20:37] <aphysically> ah yes unit tests for my unit tests energizer :)
[02:21:07] *** Quits: HaMsTeRs (~Thunderbi@14-0-229-133.static.pccw-hkt.com) (Client Quit)
[02:21:32] <energizer> aphysically: there are two points here. one is, unless using the real database/webserver/whatever is too slow, just use the real thing. if it is too slow, then verified fakes
[02:21:37] *** Quits: PortableDave (~portabled@194-193-148-202.tpgi.com.au) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[02:21:52] <energizer> aphysically: what i dont think is useful is unittest.mock or magicmock etc
[02:21:55] *** Quits: gadius (~gadfly@107-214-145-46.lightspeed.sntcca.sbcglobal.net) (Read error: Connection reset by peer)
[02:22:11] *** Quits: Haxxa (~Haxxa@122.199.45.224) (Quit: Haxxa flies away.)
[02:22:42] <parv> Besides slowness, other issues would be of access credentials & not affecting production database
[02:23:01] <nedbat> aphysically: mocking is a complex topic
[02:23:04] <energizer> for creds i'd just make test creds
[02:23:23] <nedbat> aphysically: verified fakes are great, but can be a lot of work
[02:23:25] <amogorkon> hey nedbat ^^
[02:23:33] <nedbat> amogorkon: hey
[02:23:43] <energizer> mocking is also a lot of work but at least fakes are helpful too :)
[02:24:57] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.2)
[02:25:33] *** Joins: Haxxa (~Haxxa@122.199.45.224)
[02:26:13] *** Joins: gadfly (~gadfly@107-214-145-46.lightspeed.sntcca.sbcglobal.net)
[02:26:29] *** Joins: CodePoint (~BitShift@2600:1700:3070:3790:2422:c266:c912:abfe)
[02:27:08] *** Quits: gadfly (~gadfly@107-214-145-46.lightspeed.sntcca.sbcglobal.net) (Remote host closed the connection)
[02:27:46] *** Quits: mattf (mattf@2600:3c03::f03c:92ff:fea6:56a4) (Quit: ZNC 1.7.5+deb4 - https://znc.in)
[02:28:17] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[02:28:28] *** Quits: Haxxa (~Haxxa@122.199.45.224) (Remote host closed the connection)
[02:29:22] *** Joins: gadfly (~gadfly@107-214-145-46.lightspeed.sntcca.sbcglobal.net)
[02:30:23] *** Quits: slav0nic (slav0nic@python.su) (Ping timeout: 264 seconds)
[02:30:25] *** Joins: PortableDave (~portabled@194-193-148-202.tpgi.com.au)
[02:30:31] *** Quits: djhankb (~djhankb@208.113.164.68) (Remote host closed the connection)
[02:31:01] *** Joins: djhankb (~djhankb@208.113.164.68)
[02:31:29] *** Quits: PortableDave (~portabled@194-193-148-202.tpgi.com.au) (Client Quit)
[02:32:19] *** Joins: PortableDave (~portabled@194-193-148-202.tpgi.com.au)
[02:32:19] *** Quits: PortableDave (~portabled@194-193-148-202.tpgi.com.au) (Client Quit)
[02:32:28] *** Joins: emerent_ (~quassel@p200300cd57485584ba27ebfffed28a59.dip0.t-ipconnect.de)
[02:32:28] *** emerent is now known as Guest2829
[02:32:28] *** emerent_ is now known as emerent
[02:32:32] *** Quits: brelod (~me@90.244.150.142) (Quit: leaving)
[02:32:48] *** Joins: mattf (~mattf@li908-138.members.linode.com)
[02:32:55] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 265 seconds)
[02:32:59] *** Quits: Guest2829 (~quassel@p200300cd57485576ba27ebfffed28a59.dip0.t-ipconnect.de) (Ping timeout: 268 seconds)
[02:33:34] *** Joins: fluffyballoon (~user@131.93.208.196)
[02:34:03] *** Joins: Haxxa (~Haxxa@122.199.45.224)
[02:35:19] *** Joins: winterflaw (~winterfla@gateway/tor-sasl/winterflaw)
[02:36:20] <energizer> what are situations where you think mocks are the optimal thing to use? nothing comes to mind for me atm
[02:37:03] *** Quits: CodePoint (~BitShift@2600:1700:3070:3790:2422:c266:c912:abfe) (Quit: Never gonna give you up, never gonna let you down...)
[02:37:15] <amogorkon> random, time
[02:38:01] <nedbat> energizer: idk if mocks are ever the best thing, but they can be a good tradeoff of effort to benefit.
[02:38:22] <energizer> random - just set seed. time - how?
[02:38:55] <nedbat> freezegun is good for isolating your tests from time
[02:39:37] *** Quits: Macuser (~Macuser@216.30.159.201) (Quit: Textual IRC Client: www.textualapp.com)
[02:40:18] <energizer> years ago you posted about this on blog and i agreed with a commenter who thought it was bad to mock time
[02:40:39] *** Quits: gitly (~gitly@148.252.128.175) (Ping timeout: 265 seconds)
[02:41:11] *** Quits: lethu (~lethu@user/lethu) (Ping timeout: 264 seconds)
[02:41:20] <amogorkon> you can't set seed if you're dealing with real random
[02:41:23] <energizer> or maybe i remebmered wrong https://nedbatchelder.com/blog/201504/testing_time.html
[02:41:35] *** Quits: Haxxa (~Haxxa@122.199.45.224) (Quit: Haxxa flies away.)
[02:41:49] *** Joins: sturm_ (~bsturmfel@mediagoblin/maintainer/bsturmfels)
[02:42:00] <energizer> amogorkon: are you talking about something that comes up in python?
[02:42:09] *** Joins: gitly (~gitly@85.255.236.108)
[02:42:11] *** Quits: phantomotap (~phantomot@c-68-35-28-201.hsd1.al.comcast.net) (Quit: Leaving)
[02:42:26] <amogorkon> https://docs.python.org/2/library/random.html#random.SystemRandom
[02:42:49] <energizer> ah no it was https://nedbatchelder.com/blog/201209/mocking_datetimetoday.html#comment_13742
[02:43:07] <energizer> amogorkon: that accepts a seed
[02:43:11] *** Joins: lethu (~lethu@user/lethu)
[02:43:15] <amogorkon> read it
[02:43:29] *** Quits: mickey8 (~user@user/mickey) (Quit: Ping timeout (120 seconds))
[02:43:52] *** Joins: Haxxa (~Haxxa@122.199.45.224)
[02:45:03] *** Quits: Naan (~naan@user/naan) (Read error: Connection reset by peer)
[02:45:27] <energizer> huh, alright
[02:46:25] *** trench_ is now known as trench
[02:46:28] *** Quits: srhm (~srhm@user/srhm) (Read error: Connection reset by peer)
[02:46:30] *** Joins: mickey8 (~user@user/mickey)
[02:47:09] *** Joins: srhm (~srhm@user/srhm)
[02:47:46] <energizer> seems like there's already a built-in verified fake for that tho
[02:48:11] <energizer> namely random.Random
[02:48:27] *** Quits: gadfly (~gadfly@107-214-145-46.lightspeed.sntcca.sbcglobal.net) (Read error: Connection reset by peer)
[02:49:30] *** Joins: gadfly (~gadfly@107-214-145-46.lightspeed.sntcca.sbcglobal.net)
[02:50:06] <amogorkon> i'd prefer mock
[02:50:11] *** Quits: jonthesnow (~xizhendu@240e:305:7380:4300:d47:48bf:97c5:2de9) (Ping timeout: 264 seconds)
[02:52:08] *** Quits: gadfly (~gadfly@107-214-145-46.lightspeed.sntcca.sbcglobal.net) (Remote host closed the connection)
[02:52:34] *** Quits: lethu (~lethu@user/lethu) (Quit: Leaving)
[02:52:41] *** Quits: Auron (~Auron956@user/auron) (Remote host closed the connection)
[02:53:42] *** Joins: gadfly (~gadfly@107-214-145-46.lightspeed.sntcca.sbcglobal.net)
[02:54:01] *** Joins: rexbinary_ (~rexbinary@user/rexbinary)
[02:54:23] *** Quits: rexbinary (~rexbinary@user/rexbinary) (Ping timeout: 264 seconds)
[02:54:34] <nedbat> amogorkon: why do you prefer mock?
[02:54:45] *** rexbinary_ is now known as rexbinary
[02:56:45] <amogorkon> at least i can be specific about my expected behaviour and deal with potentially very complex objects that might have side effects
[02:58:55] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[02:59:03] <nedbat> amogorkon: i thought you were talking about Random in particular
[02:59:30] *** Quits: Wulf (~Wulf@user/wulf) (Ping timeout: 265 seconds)
[03:00:07] *** Quits: gravy (~gravy@220-245-7-7.static.tpgi.com.au) (Ping timeout: 252 seconds)
[03:00:13] <amogorkon> Random in particular makes me itchy with that seed argument
[03:00:39] <nedbat> amogorkon: itchy? :)
[03:00:41] <amogorkon> which is ignored for true randomness, but then it's not a real argument
[03:00:47] *** Quits: gadfly (~gadfly@107-214-145-46.lightspeed.sntcca.sbcglobal.net) (Read error: Connection reset by peer)
[03:00:50] <amogorkon> yeah, i don't like fake arguments
[03:01:05] *** Joins: Wulf (~Wulf@user/wulf)
[03:01:09] <nedbat> amogorkon: random.Random doesn't ignore the seed?
[03:01:11] *** Joins: PortableDave (~portabled@194-193-148-202.tpgi.com.au)
[03:01:16] <amogorkon> no, but SystemRandom does
[03:01:33] <nedbat> amogorkon: right, that's why you use random.Random with a seed as the fake for SystemRandom
[03:01:50] <amogorkon> which is bad
[03:02:00] <nedbat> amogorkon: can you say why?
[03:02:13] <energizer> i think you both have different pictures in your heads
[03:02:17] *** Quits: Vornicus (~Vornicus@2603-8000-5d07-7ef0-48d0-0004-7e9c-d196.res6.spectrum.com) (Read error: Connection reset by peer)
[03:02:41] <amogorkon> because in real code you'd use SystemRandom and still might pass in a seed and everyone would wonder why
[03:02:51] <amogorkon> it's just meh
[03:02:52] *** Joins: metah4ck3r (~meta@user/metah4ck3r)
[03:02:58] <amogorkon> raises more questions
[03:03:05] <energizer> nedbat is imagining `def test(): r = Random(1); assert foo(r)` and amogorkon is imagining `def test(): assert foo(Random)`
[03:03:10] <nedbat> amogorkon: i don't see why using a seed to create a fake in a test would cause you to use a seed in your real code.
[03:03:31] <nedbat> energizer: yes, that is what I am imagining
[03:03:31] <energizer> right?
[03:03:53] <amogorkon> energizer, something like that, yeah
[03:04:12] <nedbat> amogorkon: consider the first example
[03:04:36] *** Joins: whatsupdoc (~whatsupdo@148.64.18.1)
[03:05:08] <amogorkon> you wouldn't instantiate the class in your test though, you'd want to replace the one in your main code, unless you parametrize everything
[03:05:43] <nedbat> amogorkon: it depends how you've structured your code. it's fine to refactor to make the code more testable
[03:05:45] *** Quits: whatsupdoc (~whatsupdo@148.64.18.1) (Client Quit)
[03:05:52] <amogorkon> i find mock is more explicit here
[03:05:56] *** Joins: whatsupdoc (~whatsupdo@148.64.18.1)
[03:06:26] <amogorkon> and leaves you your freedom how to structure your code
[03:06:46] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 252 seconds)
[03:07:19] <nedbat> amogorkon: class FakeSystemRandom(Random): def __init__(self, seed): self.seed(seed);;   assert foo(FakeSystemRandom)
[03:07:35] *** Quits: nyah (~nyah@bcdcb6e3.skybroadband.com) (Ping timeout: 264 seconds)
[03:07:38] <nedbat> oops, not right
[03:07:47] <amogorkon> on the other hand, i haven't used mock for many years now, so it's not like i'd advocate to use it all the time
[03:08:04] <amogorkon> i just like to have it in my toolbox, just in case
[03:08:17] *** Joins: stormdancer (~stormdanc@2804:14d:3c83:5659:50c9:14d7:605b:86ce)
[03:08:25] *** Quits: gitly (~gitly@85.255.236.108) (Ping timeout: 252 seconds)
[03:08:25] *** Quits: zen_coder (~zen_coder@2a02:8109:a280:2d8d:dc9e:1427:a97:e25a) (Ping timeout: 252 seconds)
[03:09:00] *** Joins: fikran (~fikran@user/fikran)
[03:09:11] *** Joins: squatch (~squatch@c-71-193-161-16.hsd1.or.comcast.net)
[03:10:28] *** Joins: gitly (~gitly@85.255.237.1)
[03:10:44] <nedbat> amogorkon: i use mock. i'm just very careful with it, and try to avoid it.
[03:10:51] *** Joins: herjazz (~herjazz@p6758124-ipngn30801marunouchi.tokyo.ocn.ne.jp)
[03:11:06] *** Joins: sirquack (~sirquack@2601:643:8680:526:f8f6:5d24:9ca1:d4da)
[03:11:08] <amogorkon> since i generally prefer functional style over OOP, i usually don't run into cases where i could use it anymore
[03:11:23] *** Quits: squatch (~squatch@c-71-193-161-16.hsd1.or.comcast.net) (Remote host closed the connection)
[03:12:20] <amogorkon> which is kinda sad, because i found the whole concept funky
[03:12:45] <amogorkon> or recording calls and replaying etc. - good times ^^
[03:12:59] *** Quits: Haxxa (~Haxxa@122.199.45.224) (Quit: Haxxa flies away.)
[03:13:14] <Mindscape> Didnt OOP move from code languages into documents?
[03:13:39] <Mindscape> object oriented organizing... OOO
[03:13:49] *** Joins: clarkk (~clarkk@host31-53-69-254.range31-53.btcentralplus.com)
[03:14:41] *** Joins: Haxxa (~Haxxa@122.199.45.224)
[03:14:43] *** Joins: ethrl (~morty@user/doforlove33)
[03:14:46] <amogorkon> documents? well, i know no-code and low-code "languages" primarily use OOP in the background to plug things together
[03:16:31] *** Joins: jazzy (~jaziz@user/jaziz)
[03:17:11] *** Quits: jazz-o-lantern (~jaziz@user/jaziz) (Ping timeout: 264 seconds)
[03:17:22] *** jazzy is now known as jazz-o-lantern
[03:17:23] *** Quits: extropiator (~adam@user/extropiator) (Ping timeout: 268 seconds)
[03:17:31] <amogorkon> so it hasn't really gone away, just went on doing what it always did best - provide abstractions, interfaces etc.
[03:19:16] <amogorkon> as long as people don't start trying to map RL things to OOP, it's not too bad
[03:21:25] *** Joins: driib1 (~driib@c-94bee655.017-99-73746f1.bbcust.telenor.se)
[03:21:51] <energizer> https://en.wikipedia.org/wiki/Object_Oriented_Management
[03:22:08] <amogorkon> oh lord
[03:22:10] <hrob> I hate not being able to easily find a reliable mock for something like an sql database -- but Im probably not understanding unit testing and mock correctly
[03:22:31] <energizer> hrob: use the database itself
[03:22:40] *** Quits: fluffyballoon (~user@131.93.208.196) (Ping timeout: 252 seconds)
[03:22:53] <energizer> just make a temporary database for your test and then drop it afterwards
[03:23:00] <amogorkon> you can use an ad-hoc in-memory db
[03:23:29] <hrob> energizer - yup... sometimes you just need integration testing it seems... good to do both I understand,
[03:23:47] *** Quits: driib (~driib@185.195.233.168) (Ping timeout: 264 seconds)
[03:24:06] *** Quits: Nact (~l@host-85-27-120-251.dynamic.voo.be) (Quit: Konversation terminated!)
[03:24:17] <hrob> but unit tests mocking a db seem to be less valuable than integration testing on it
[03:24:20] *** Joins: driib (~driib@185.195.233.168)
[03:24:52] <amogorkon> definitely
[03:25:28] <amogorkon> found so many bugs that way, worth the effort
[03:26:11] *** Quits: driib1 (~driib@c-94bee655.017-99-73746f1.bbcust.telenor.se) (Ping timeout: 264 seconds)
[03:26:24] <amogorkon> but you need to be aware of one big potential problem
[03:26:27] *** Joins: extropiator (~adam@user/extropiator)
[03:27:37] <hrob> amogorkon, there are all these flavors and behaviors of sql dbs... which seem to make it hard to do some general sql in memory thing
[03:27:41] <amogorkon> the db you're testing against is *in memory* - which will *not* test against issues that may be related to the file system
[03:28:14] <hrob> yup...
[03:28:17] <amogorkon> that little detail bit me in the butt a few times
[03:29:32] <amogorkon> which seem to make it hard to do some general sql in memory thing <- not sure, but i think all db drivers give you that option
[03:29:49] *** Quits: mat001 (~mat001@213.143.69.121) (Remote host closed the connection)
[03:29:52] *** Quits: rexbinary (~rexbinary@user/rexbinary) (Ping timeout: 252 seconds)
[03:30:01] <hrob> amogorkon some things are just best integration and system tested ... unless I find something better
[03:30:11] *** Quits: tk (~tk@ircpuzzles/staff/tk) (Quit: Well, this is unexpected.)
[03:30:15] *** Joins: rexbinary (~rexbinary@user/rexbinary)
[03:30:22] <hrob> but we need all levels ideally
[03:30:35] *** Joins: tk (~tk@ircpuzzles/staff/tk)
[03:30:36] *** Quits: djhankb (~djhankb@208.113.164.68) (Read error: Connection reset by peer)
[03:31:08] *** Joins: djhankb (~djhankb@208.113.164.68)
[03:31:20] *** Quits: yaalon (~yaalon@2600:1700:9450:2d30:e57c:4c38:fc8f:326c) (Remote host closed the connection)
[03:31:55] *** Joins: yaalon (~yaalon@2600:1700:9450:2d30:e57c:4c38:fc8f:326c)
[03:33:40] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 252 seconds)
[03:33:59] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 264 seconds)
[03:35:17] *** Quits: sirquack (~sirquack@2601:643:8680:526:f8f6:5d24:9ca1:d4da) (Remote host closed the connection)
[03:35:25] *** Quits: flokuehn (~flokuehn@muedsl-82-207-236-198.citykom.de) (Ping timeout: 265 seconds)
[03:35:52] *** Joins: Jong (~Jong@2620:10d:c090:400::5:fbf2)
[03:36:21] *** Quits: yaalon (~yaalon@2600:1700:9450:2d30:e57c:4c38:fc8f:326c) (Ping timeout: 245 seconds)
[03:36:51] *** Quits: Payam (~Payam@c83-250-236-236.bredband.tele2.se) (Remote host closed the connection)
[03:36:58] *** Joins: flokuehn (~flokuehn@i577BC62B.versanet.de)
[03:37:15] *** Joins: HaMsTeRs (~Thunderbi@14-0-229-133.static.pccw-hkt.com)
[03:37:25] *** Joins: Payam (~Payam@c83-250-236-236.bredband.tele2.se)
[03:38:21] *** Quits: Payam (~Payam@c83-250-236-236.bredband.tele2.se) (Remote host closed the connection)
[03:38:31] *** Quits: zebrag (~chris@user/zebrag) (Remote host closed the connection)
[03:38:39] *** Joins: Payam (~Payam@c83-250-236-236.bredband.tele2.se)
[03:38:59] *** Joins: Macuser (~Macuser@216.30.159.201)
[03:39:51] *** Quits: Payam (~Payam@c83-250-236-236.bredband.tele2.se) (Remote host closed the connection)
[03:41:53] *** Joins: zebrag (~chris@user/zebrag)
[03:43:27] *** Quits: Haxxa (~Haxxa@122.199.45.224) (Quit: Haxxa flies away.)
[03:44:20] *** Quits: PortableDave (~portabled@194-193-148-202.tpgi.com.au) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[03:44:52] *** Joins: yaalon (~yaalon@2600:1700:9450:2d30:e57c:4c38:fc8f:326c)
[03:45:03] *** Joins: PortableDave (~portabled@194-193-148-202.tpgi.com.au)
[03:45:49] *** Joins: Haxxa (~Haxxa@122.199.45.224)
[03:46:25] *** Joins: fluffyballoon (~user@131.93.208.196)
[03:47:30] *** Quits: stormdancer (~stormdanc@2804:14d:3c83:5659:50c9:14d7:605b:86ce) (Remote host closed the connection)
[03:49:05] *** Quits: rexbinary (~rexbinary@user/rexbinary) (Quit: ZNC - http://znc.in)
[03:49:40] *** Quits: cthulchu (~Cthulchu@193.194.107.250) (Ping timeout: 252 seconds)
[03:50:11] *** Quits: Klinda (~superleag@user/klinda) (Quit: Konversation terminated!)
[03:50:11] *** Quits: gitly (~gitly@85.255.237.1) (Ping timeout: 264 seconds)
[03:50:14] *** Quits: PantelicGR (~PantelicG@user/pantelicgr) (Quit: Leaving)
[03:50:52] *** Quits: Skyfire (~pyon@user/pyon) (Quit: WeeChat 3.3)
[03:51:23] *** Joins: rexbinary (~rexbinary@user/rexbinary)
[03:51:45] *** Joins: gitly (~gitly@85.255.235.115)
[03:52:16] *** Joins: amo (~amogorkon@port-92-196-12-224.dynamic.as20676.net)
[03:54:02] *** Quits: Seiryuu (~Seiryuu@ip174-103-176-143.adsl2.static.versatel.nl) (Quit: Leaving)
[03:54:07] *** Quits: jazz-o-lantern (~jaziz@user/jaziz) (Ping timeout: 265 seconds)
[03:54:21] *** Joins: gadfly (~gadfly@107-214-145-46.lightspeed.sntcca.sbcglobal.net)
[03:54:29] <whatsupdoc> why can't you do this in python? return -1 if minCoins == float('inf') else return minCoins
[03:54:59] *** Joins: whatsupdoc83 (~whatsupdo@148.64.18.1)
[03:55:01] *** Quits: georgios (~georgios@user/georgios) (Quit: Konversation terminated!)
[03:55:09] *** Quits: whatsupdoc (~whatsupdo@148.64.18.1) (Remote host closed the connection)
[03:55:23] *** whatsupdoc83 is now known as whatsupdoc
[03:55:31] *** Quits: amogorkon (~amogorkon@port-92-196-56-8.dynamic.as20676.net) (Ping timeout: 245 seconds)
[03:55:41] <whatsupdoc> But this works return (-1 if minCoins == float('inf') else minCoins
[03:55:42] <parv> It's Python! That's why. Alternative: return A if true else B
[03:56:46] *** Joins: stormdancer (~stormdanc@185.245.86.123)
[03:58:13] *** Joins: lethu (~lethu@user/lethu)
[03:58:30] <grym> `if mincoins == float('inf'): return -1 else: return mincoins` is valid; `return -1 if mincoins == float('inf') else mincoins`, but you can't mix and max the syntax
[04:02:16] *** Quits: yaalon (~yaalon@2600:1700:9450:2d30:e57c:4c38:fc8f:326c) ()
[04:05:55] <nedbat> whatsupdoc: `return X` is a statement, and you can't put statements in one line with if/else
[04:06:20] <whatsupdoc> ok thanks, oly expressions?
[04:06:30] <whatsupdoc> *only
[04:06:52] <nedbat> whatsupdoc: yes.   `A if C else B` is an expression, and A,B,C must all be expressions
[04:07:17] <whatsupdoc> got it, thanks
[04:08:19] <energizer> i wonder why python has non-expression statements
[04:08:26] *** Joins: cdown (~cdown@163.114.131.1)
[04:08:44] *** Quits: Haxxa (~Haxxa@122.199.45.224) (Quit: Haxxa flies away.)
[04:08:51] <nedbat> energizer: designer's choice I guess
[04:09:40] <energizer> did he have exposure to expression-only languages at the time?
[04:09:42] <KirkMcDonald> It ties at least partly into how the indentation works.
[04:09:46] *** Joins: Haxxa (~Haxxa@122.199.45.224)
[04:10:12] <KirkMcDonald> Same reason `lambda` only supports an expression.
[04:11:19] <energizer> you mean because there's no `end` like ruby has
[04:12:08] *** Quits: Mindscape (~Lindis@user/lindis) (Remote host closed the connection)
[04:12:25] *** Quits: PortableDave (~portabled@194-193-148-202.tpgi.com.au) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[04:12:51] *** Joins: ScindMape (~Lindis@user/lindis)
[04:12:52] *** ScindMape is now known as Mindscape
[04:13:34] <energizer> that works as an answer for me
[04:14:36] *** Joins: rexbinary_ (~rexbinary@user/rexbinary)
[04:14:47] *** Quits: rexbinary (~rexbinary@user/rexbinary) (Ping timeout: 264 seconds)
[04:14:47] *** rexbinary_ is now known as rexbinary
[04:15:13] *** Quits: Haxxa (~Haxxa@122.199.45.224) (Remote host closed the connection)
[04:15:50] *** Joins: Haxxa (~Haxxa@122.199.45.224)
[04:17:11] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Ping timeout: 245 seconds)
[04:17:56] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[04:18:59] *** Quits: HaMsTeRs (~Thunderbi@14-0-229-133.static.pccw-hkt.com) (Ping timeout: 264 seconds)
[04:20:29] *** Joins: PortableDave (~portabled@194-193-148-202.tpgi.com.au)
[04:21:21] *** Joins: frost (~frost@59.71.244.189)
[04:22:21] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[04:22:26] *** Quits: ethrl (~morty@user/doforlove33) (Quit: WeeChat 3.0)
[04:22:30] *** Parts: tektik (~said@68.33.69.0) (Leaving)
[04:22:35] *** Quits: y1n (~y1n@77.119.215.96.wireless.dyn.drei.com) (Ping timeout: 264 seconds)
[04:26:55] *** Joins: HaMsTeRs (~Thunderbi@14-0-229-133.static.pccw-hkt.com)
[04:27:02] *** Joins: Lando-SpaceIzzle (~Lando-Spa@user/lando-spacepimp)
[04:27:55] *** Quits: KombuchaKip (~kip@192.252.230.5) (Quit: Leaving.)
[04:28:27] *** Quits: whatsupdoc (~whatsupdo@148.64.18.1) (Ping timeout: 256 seconds)
[04:30:22] *** Quits: Lando-SpacePimp (~Lando-Spa@user/lando-spacepimp) (Ping timeout: 252 seconds)
[04:30:31] *** Quits: djhankb (~djhankb@208.113.164.68) (Remote host closed the connection)
[04:30:44] *** Quits: vlm (~vlm@user/vlm) (Quit: "")
[04:31:03] *** Joins: djhankb (~djhankb@208.113.164.68)
[04:32:11] *** Quits: flokuehn (~flokuehn@i577BC62B.versanet.de) (Ping timeout: 264 seconds)
[04:32:34] *** Joins: KombuchaKip (~kip@192.252.230.5)
[04:33:26] *** Joins: Skyfire (~pyon@user/pyon)
[04:33:57] *** Joins: flokuehn (~flokuehn@i577BC63E.versanet.de)
[04:34:56] *** Joins: The_Jag (~The_Jag@host-79-16-36-15.retail.telecomitalia.it)
[04:35:06] *** Quits: metah4ck3r (~meta@user/metah4ck3r) (Ping timeout: 245 seconds)
[04:35:49] *** Quits: The_Jag_ (~The_Jag@host-87-17-20-94.retail.telecomitalia.it) (Ping timeout: 252 seconds)
[04:35:49] *** Quits: R0b0t1 (~R0b0t1@d-74-214-63-13.md.cpe.atlanticbb.net) (Ping timeout: 252 seconds)
[04:36:16] *** Joins: y1n (~y1n@77.119.208.217.wireless.dyn.drei.com)
[04:37:05] *** Joins: jazzy (~jaziz@user/jaziz)
[04:37:11] *** Joins: metah4ck3r (~meta@user/metah4ck3r)
[04:37:52] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[04:39:26] *** Joins: abhixec (~abhixec@c-67-169-139-16.hsd1.ca.comcast.net)
[04:40:28] *** Joins: R0b0t1 (~R0b0t1@d-74-214-63-13.md.cpe.atlanticbb.net)
[04:40:34] *** Quits: The_Jag (~The_Jag@host-79-16-36-15.retail.telecomitalia.it) (Read error: Connection reset by peer)
[04:40:44] *** Joins: Naan (~naan@user/naan)
[04:41:01] *** Joins: donald1 (~yoshi@88.5.131.77.rev.sfr.net)
[04:41:41] *** Quits: zaquest (~notzaques@5.128.210.178) (Remote host closed the connection)
[04:41:45] *** Joins: The_Jag (~The_Jag@host-79-16-36-15.retail.telecomitalia.it)
[04:43:01] *** Joins: zaquest (~notzaques@5.128.210.178)
[04:43:20] <donald1> Hi I coded self.stdin = Pipe() and I have as error "Expected type 'int', got 'Pipe' instead " It does not make any sens. Could you tell me why? here is my code: https://github.com/Gallopsled/pwntools/pull/1978/files#diff-99cd97af03bf612ff0c79d6518c1b67ad1a16c7ea4f347f4429e99deca7e3340R588
[04:45:13] <klys> isn't a Pipe an int[ 2 ]; in C?
[04:45:36] <donald1>  klys no this is a class that I made
[04:46:00] <donald1> The class is implemented here: https://github.com/Gallopsled/pwntools/pull/1978/files#diff-e5c5e9c4194bc17bd387086501b60d58b06ec907ecb6c61b4d3d8ed6410dd345R33 klys
[04:47:36] <klys> pip = Pipe(); self.stdin = pip._rh; ?
[04:48:44] *** Quits: nfc_ (nfc@tilde.institute) (Ping timeout: 265 seconds)
[04:50:15] *** Joins: Fiji (~Fiji@user/fiji)
[04:51:32] <SnoopJ> klys, Unix file descriptors are basically integers, is that what you had in mind?
[04:51:39] *** Joins: bn_work (uid268505@id-268505.uxbridge.irccloud.com)
[04:53:35] *** Joins: Lazenca (~lazenca@user/lazenca)
[04:54:10] <klys> snoopj, that would be, yes.
[04:55:31] <donald1> let me think...
[04:56:01] *** Quits: Haxxa (~Haxxa@122.199.45.224) (Quit: Haxxa flies away.)
[04:56:05] <donald1> I do not understand
[04:56:58] *** Joins: Haxxa (~Haxxa@122.199.45.224)
[04:58:01] *** Joins: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[04:59:10] *** Joins: djapo (~archangel@user/djapo)
[04:59:41] *** Quits: nomic (~nomic@185.217.117.88) (Quit: Leaving)
[05:00:18] *** Joins: brabrax_ (~brabrax@user/brabrax)
[05:00:20] *** Quits: zln (~zln@c80-217-230-193.bredband.tele2.se) (Remote host closed the connection)
[05:00:24] <donald1>  klys, snoopj what do you mean?
[05:00:41] <klys> self.stdin is an integer
[05:00:47] <klys> it's a file handle
[05:00:59] *** Quits: brabrax (~brabrax@user/brabrax) (Ping timeout: 268 seconds)
[05:00:59] *** brabrax_ is now known as brabrax
[05:01:31] <donald1> klys why is it an issue?
[05:01:52] <klys> your Pipe object is quite different
[05:01:57] <klys> not an integer
[05:01:58] <donald1> in self.stdin = Pipe() self.stdin can aslo be an interger no?
[05:02:37] <donald1> yes but why does the type matter?the new value should be overwritten
[05:02:52] <klys> also to have a Pipe you need at least two integers in there
[05:03:26] *** Quits: metah4ck3r (~meta@user/metah4ck3r) (Ping timeout: 245 seconds)
[05:03:58] <klys> type is a basic construct of programming languages that prevents the programmer from making a mistake
[05:04:28] *** Quits: fluffyballoon (~user@131.93.208.196) (Remote host closed the connection)
[05:05:35] *** Joins: metah4ck3r (~meta@user/metah4ck3r)
[05:06:12] *** Quits: lethu (~lethu@user/lethu) (Quit: Leaving)
[05:06:48] *** Joins: whatsupdoc (~whatsupdo@148.64.20.1)
[05:07:46] *** Quits: extropiator (~adam@user/extropiator) (Ping timeout: 252 seconds)
[05:10:06] *** Joins: vlm (~vlm@user/vlm)
[05:10:32] <donald1> klys 2 integers where?
[05:10:42] <donald1> ah the stdout?
[05:10:44] <donald1> it exists
[05:10:45] <donald1> also
[05:10:49] <klys> _wh and _rh
[05:11:02] *** Joins: yaalon (~yaalon@2600:1700:9450:2d30:e57c:4c38:fc8f:326c)
[05:11:03] <donald1> it is just here https://github.com/Gallopsled/pwntools/pull/1978/files#diff-99cd97af03bf612ff0c79d6518c1b67ad1a16c7ea4f347f4429e99deca7e3340R589
[05:12:59] *** Quits: metah4ck3r (~meta@user/metah4ck3r) (Ping timeout: 264 seconds)
[05:13:54] <donald1> klys: ah yes I did it here: https://github.com/Gallopsled/pwntools/pull/1978/files#diff-e5c5e9c4194bc17bd387086501b60d58b06ec907ecb6c61b4d3d8ed6410dd345R55
[05:13:58] <donald1> in CreatePipe
[05:14:46] <hrob> donald1, are you trying to read stdin to what?
[05:14:54] *** Joins: metah4ck3r (~meta@user/metah4ck3r)
[05:15:15] *** Joins: Vonter_ (~Vonter@user/vonter)
[05:15:23] <donald1> hrob: to contribute to a library to exploit memory corruption attacks. before on linux, now on windows
[05:15:53] *** Quits: redrum88 (~redrum88@user/redrum88) (Quit: Going offline, see ya! (www.adiirc.com))
[05:16:18] <hrob> is this any help - fileinput.input() ?   https://www.devdungeon.com/content/using-stdin-stdout-and-stderr-python
[05:16:23] <donald1> hrob I am trying to read stdin from a specific program
[05:16:24] *** Joins: pabs3 (~pabs3@user/pabs3)
[05:16:31] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 252 seconds)
[05:17:04] <donald1> hrob I can only agree with you. your solution is really cleaner. But I found this code. I will intergrate your answer latter
[05:17:38] *** Quits: jazzy (~jaziz@user/jaziz) (Read error: Connection reset by peer)
[05:17:58] <jinsun> aphysically: ah so your setter problem is solved much easily
[05:18:19] *** Quits: whatsupdoc (~whatsupdo@148.64.20.1) (Ping timeout: 256 seconds)
[05:18:21] *** Joins: fikran (~fikran@user/fikran)
[05:18:23] <aphysically> jinsun: yeah, it's not backwards incompatible to just change it
[05:18:30] <aphysically> it already didn't type check
[05:18:42] *** Quits: greknod28 (~grek@120.88.171.98) (Ping timeout: 265 seconds)
[05:18:48] *** Quits: bloody (~bloody@user/bloody) (Quit: Always focus on how far you've come, rather than how far you have left to go)
[05:18:48] <aphysically> so we're not breaking anybody
[05:19:16] *** Quits: Macuser (~Macuser@216.30.159.201) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[05:19:52] *** Quits: Vonter_ (~Vonter@user/vonter) (Ping timeout: 252 seconds)
[05:19:52] <jinsun> yeah I thought of checking that yesterday too, but I started looking at something else midway
[05:20:26] <pabs3> in setuptools install_requires, how do I specify to only install feedparser<6 but ensure feedparser>5 for Python 3 (since feedparser<5 crashes with Python 3)
[05:22:01] *** Quits: djapo (~archangel@user/djapo) (Ping timeout: 252 seconds)
[05:24:58] *** Joins: whatsupdoc (~whatsupdo@148.64.20.1)
[05:25:31] <jinsun> pabs3: https://setuptools.pypa.io/en/latest/userguide/dependency_management.html#platform-specific-dependencies
[05:25:35] *** Quits: FluffyMask (~masque@user/fluffymask) (Quit: WeeChat 3.3)
[05:25:53] *** Joins: Vonter_ (~Vonter@user/vonter)
[05:27:59] *** Quits: emf (~emf@2620:10d:c090:400::5:35f6) (Ping timeout: 264 seconds)
[05:28:22] <pabs3> hmm, seems the python_version part applies to the whole dependency item, so I need to add two items for feedparser?
[05:28:27] <pabs3> something like this:  feedparser<6.0 \n feedparser>=5.0,<6.0;python_version>='3'
[05:29:27] <jinsun> yeah, but you can keep feedparser>=5.0,<6.0 for all python version too and have only one entry
[05:29:42] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[05:30:19] *** Quits: Vonter_ (~Vonter@user/vonter) (Ping timeout: 252 seconds)
[05:31:02] *** Quits: zaz\ (~zaz@poneybl.eu) (Quit: bye)
[05:31:11] *** Quits: djhankb (~djhankb@208.113.164.68) (Read error: Connection reset by peer)
[05:31:29] *** Joins: zaz\ (~zaz@poneybl.eu)
[05:31:44] *** Joins: djhankb (~djhankb@208.113.164.68)
[05:32:04] *** Joins: The_Jag_ (~The_Jag@host-80-183-32-131.business.telecomitalia.it)
[05:32:38] <hrob> something Im wondering about, why is camelCase never really used in python -- not even in methods?   I've been looking around and cant find an example in stdlib at least
[05:32:47] *** Quits: The_Jag (~The_Jag@host-79-16-36-15.retail.telecomitalia.it) (Ping timeout: 264 seconds)
[05:33:07] <donald1> https://www.devdungeon.com/content/using-stdin-stdout-and-stderr-python hrob is it possible to create a new process with your link
[05:33:19] *** Joins: shawwwn (uid6132@id-6132.helmsley.irccloud.com)
[05:33:31] <SnoopJ> hrob, it's used, it's just a less common notation
[05:33:48] <hrob> I reallllly prefer it on class methods
[05:34:01] <hrob> will I be shot?
[05:34:04] <SnoopJ> If you obey the Unicode rules for identifiers, Python doesn't much care what you call them
[05:34:06] <meejah> hrob: pep8 recommends snake_case, is probably a huge reason
[05:34:17] <meejah> hrob: Twisted uses snakeCase
[05:34:20] <SnoopJ> As far as what programmers who see your code will think, that depends on the programmers :)
[05:34:21] <meejah> er, camelCase
[05:34:38] <SnoopJ> but yes, PEP-8 makes a recommendation and it's often followed
[05:34:42] *** Quits: lemonsnicks (~lemonsnic@cpc159519-perr18-2-0-cust114.19-1.cable.virginm.net) (Quit: ZNC 1.8.2 - https://znc.in)
[05:34:42] <jinsun> it is used only in unittest I think in stdlib, which borrow Java naming from xunit
[05:35:21] <phy1729> though PEP8 does recommend camelCase for classes https://www.python.org/dev/peps/pep-0008/#class-names
[05:35:37] <meejah> well, UpperCamelCase
[05:35:44] <SnoopJ> sometimes called PascalCase
[05:36:03] <phy1729> right that; this is why I lint
[05:36:34] *** Joins: Vonter_ (~Vonter@user/vonter)
[05:37:04] <hrob> donald1 I think I didnt understand the problem, I guessed you were trying to simply pipe stdout of one process to stdin of another program
[05:37:06] *** Quits: tar_xvf (~tar@ec2-3-136-243-174.us-east-2.compute.amazonaws.com) (Quit: ZNC 1.7.5+deb4 - https://znc.in)
[05:37:14] *** Quits: Fiji (~Fiji@user/fiji) (Quit: Leaving)
[05:37:30] <SnoopJ> I count 4143 matches of `def [a-z]+[A-Z]+` in the CPython repo
[05:37:31] <hrob> donald1 I havent even written such a py-app myself.
[05:38:16] <hrob> donald1  then you mentioned windows I saw, which Im not sure about
[05:38:20] <jinsun> SnoopJ: most of them because of unittest I guess?
[05:38:33] <energizer> hrob: it's annoying when some library deviates from the convention. if you use snake_case for a few days you will get used to it.
[05:38:35] <SnoopJ> jinsun, it does seem common, trying to see the unique ones now
[05:38:46] <energizer> jinsun: logging too
[05:39:20] <jinsun> oh ya logging is also camelCase
[05:39:38] *** Joins: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br)
[05:39:38] <energizer> the reason these libraries are in camelCase is because they were written before PEP 8
[05:40:25] <hrob> awww.... so to for me to be in fashion I need to forget about camelCase all together
[05:40:46] *** Quits: Vonter_ (~Vonter@user/vonter) (Ping timeout: 252 seconds)
[05:41:01] <SnoopJ> 1927 unique such names: https://bpa.st/EQYQ
[05:41:24] *** Joins: tar_xvf (~tar@ip-115-87.wireless.oberlin.edu)
[05:41:41] <energizer> testFoo probably shouldnt count
[05:41:52] <SnoopJ> `ag "def ([a-z]+[A-Z]\w*)" -o --ignore=Doc/ --py --no-filename --nobreak | cut -f2 -d' ' | sort | uniq` if you'd like to count the ones you care about
[05:42:04] *** Quits: clarkk (~clarkk@host31-53-69-254.range31-53.btcentralplus.com) (Quit: Leaving)
[05:42:13] *** Quits: tar_xvf (~tar@ip-115-87.wireless.oberlin.edu) (Client Quit)
[05:42:20] *** Quits: c10l (~c10l@user/c10l) (Quit: The Lounge - https://thelounge.chat)
[05:42:28] <SnoopJ> 733 that don't match "^test"
[05:42:35] <hrob> but honestly, these PIP things are going too far in my opinion to infringe on my right to camelise things
[05:42:49] <hrob> its a human right
[05:42:55] <SnoopJ> hrob, do you mean PEP-8? It's optional style, you don't have to follow it if you don't want to.
[05:43:02] *** Quits: shawwwn (uid6132@id-6132.helmsley.irccloud.com) ()
[05:43:04] <hrob> *pep yeah
[05:43:09] <energizer> hrob: you can do what you want. people will be annoyed if they have to use your stuff and it deviates for no reason
[05:43:23] *** Joins: tar_xvf (~tar@ip-115-87.wireless.oberlin.edu)
[05:43:24] <hrob> lol
[05:43:29] *** Joins: c10l (~c10l@user/c10l)
[05:43:30] <SnoopJ> hrob, most PEPs are not aout style at all. It stands for Python Enhancement Proposal, they're like memos for the Python community. https://www.python.org/dev/peps/pep-0001/
[05:43:41] <SnoopJ> (most of them are not about style, but things like new features)
[05:44:01] *** Quits: stormdancer (~stormdanc@185.245.86.123) (Quit: Leaving...)
[05:44:03] *** Joins: extropiator (~adam@user/extropiator)
[05:44:07] <SnoopJ> but the language doesn't constrain you except to the extent that Unicode does
[05:44:09] *** Quits: tar_xvf (~tar@ip-115-87.wireless.oberlin.edu) (Client Quit)
[05:44:56] *** Joins: tar_xvf (~tar_xvf@ec2-3-136-243-174.us-east-2.compute.amazonaws.com)
[05:45:12] *** Joins: bloody (~bloody@user/bloody)
[05:45:25] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[05:45:43] <SnoopJ> energizer, only 37 files that don't have "test" somewhere in their name/path, though
[05:45:51] *** Joins: lemonsnicks (~lemonsnic@cpc159519-perr18-2-0-cust114.19-1.cable.virginm.net)
[05:45:54] <energizer> mind you, there are sometimes reasons for using different style in certain kinds of projects. fastai for example uses a very different style
[05:46:00] *** Joins: gggp (~gggp@li870-78.members.linode.com)
[05:46:06] <hrob> but yeah... I used to get bugged by JS/C/C++  K&R vs OTBS  bracket conventions lol
[05:46:07] *** Quits: semeion (~semeion@user/semeion) (Read error: Connection reset by peer)
[05:46:13] *** Quits: rexbinary (~rexbinary@user/rexbinary) (Ping timeout: 252 seconds)
[05:46:13] <energizer> (for a reason)
[05:46:19] *** Quits: KombuchaKip (~kip@192.252.230.5) (Quit: Leaving.)
[05:46:26] *** Joins: Vonter_ (~Vonter@user/vonter)
[05:46:27] <meejah> hrob: it might be a little weird for some Python programmers to see camelCase, but you can do whatever .. just be consistent :)
[05:46:49] *** Joins: nfc_ (nfc@tilde.institute)
[05:46:53] <SnoopJ> hrob, this kind of thing is unfortunately a feature of programmers more than one of programming languages. best advice: pick something and be consistent
[05:47:21] <hrob> yup... best just to write something that works and consistently
[05:47:33] <SnoopJ> thankfully Python's use of indentation for blocks makes the tab flamewars irrelevant
[05:47:47] <SnoopJ> ...but it introduces the tap/space flamewar :)
[05:47:53] <SnoopJ> err, tab*
[05:48:08] <SnoopJ> which I guess predates Python, but it's possible to have that one in Python
[05:48:08] *** Quits: bloody (~bloody@user/bloody) (Client Quit)
[05:48:18] <hrob> is 4x spaces not yet accepted - python3 accepts both?
[05:49:07] <hrob> invisible stuff. but argued about lol
[05:49:14] <SnoopJ> hrob, the runtime doesn't care as long as you're consistent
[05:51:05] *** Quits: Vonter_ (~Vonter@user/vonter) (Ping timeout: 265 seconds)
[05:51:30] *** Quits: R0b0t1 (~R0b0t1@d-74-214-63-13.md.cpe.atlanticbb.net) (Read error: Connection reset by peer)
[05:52:17] *** Joins: vinleod (~vdamewood@fedora/vdamewood)
[05:53:03] *** Parts: pabs3 (~pabs3@user/pabs3) (Don't rest until the streets are paved in poems.)
[05:53:22] * vinleod indents using ZWSP.
[05:53:33] *** Quits: Mikaela (~sid12355@Feneas/Mikaela) (Ping timeout: 276 seconds)
[05:53:57] *** Quits: masta`` (~oyster@user/masta/x-2645138) (Read error: Connection reset by peer)
[05:54:08] *** Joins: bloody (~bloody@user/bloody)
[05:54:18] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Killed (silver.libera.chat (Nickname regained by services)))
[05:54:18] *** vinleod is now known as vdamewood
[05:55:01] *** Joins: Mikaela (~sid12355@Feneas/Mikaela)
[05:55:04] *** Quits: HaMsTeRs (~Thunderbi@14-0-229-133.static.pccw-hkt.com) (Ping timeout: 252 seconds)
[05:55:44] <parv> vdamewood, Have you actually tried that yet?
[05:56:03] <vdamewood> No, but I think I'll give it a shot.
[05:56:32] <parv> vdamewood, Brave person!
[05:57:17] *** Joins: R0b0t1 (~R0b0t1@d-74-214-63-13.md.cpe.atlanticbb.net)
[05:57:42] *** Joins: KombuchaKip (~kip@192.252.230.5)
[05:58:06] *** Quits: whatsupdoc (~whatsupdo@148.64.20.1) (Quit: Client closed)
[06:02:57] *** Quits: hrob (~hrob@31-209-221-88.dsl.dynamic.simnet.is) (Quit: Client closed)
[06:03:10] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 265 seconds)
[06:03:22] <vdamewood> SyntaxError: invalid non-printable character U+200B
[06:03:33] <grym> F
[06:04:02] <parv> Aw shucks
[06:04:10] *** Joins: semeion (~semeion@user/semeion)
[06:04:11] <vdamewood> Well, that was fun.
[06:05:11] *** Quits: extropiator (~adam@user/extropiator) (Ping timeout: 264 seconds)
[06:05:27] <parv> I suppose ZWBSP would do the same
[06:05:54] *** Joins: HaMsTeRs (~Thunderbi@14-0-229-133.static.pccw-hkt.com)
[06:07:34] <SnoopJ> no ZWSP/ZWJ in identifiers either, darned Python :)
[06:07:53] <grym> another nail in the :polar_bear: = 5 coffin
[06:08:11] *** Quits: thurs8060 (~thurs@ip68-225-209-147.ph.ph.cox.net) (Quit: The Lounge - https://thelounge.chat)
[06:08:59] <energizer> lst[:polar_bear:]
[06:09:15] <parv> 😭
[06:09:22] <SnoopJ> 🙅
[06:09:36] *** Joins: thurs8060 (~thurs@ip68-225-209-147.ph.ph.cox.net)
[06:12:22] *** Joins: p-i- (~Ohmu@mx-ll-223.206.148-192.dynamic.3bb.co.th)
[06:13:13] *** Quits: p-i-_ (~Ohmu@mx-ll-223.206.71-4.dynamic.3bb.co.th) (Ping timeout: 252 seconds)
[06:15:35] <vdamewood> But what if I want to name a variable می‌کنم?
[06:15:59] *** Quits: cheater (~Username@user/cheater) (Ping timeout: 264 seconds)
[06:16:05] *** Joins: cheater (~Username@user/cheater)
[06:16:31] *** Quits: PortableDave (~portabled@194-193-148-202.tpgi.com.au) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[06:16:34] <vdamewood> می‌کنم = Truel if (می‌کنم): do_stuff()
[06:16:34] *** Joins: phantomotap (~phantomot@c-68-35-28-201.hsd1.al.comcast.net)
[06:16:48] <vdamewood> err s/Truel/True;/
[06:17:14] *** Joins: Vonter_ (~Vonter@user/vonter)
[06:17:24] <mefistofeles> Ŧ®ú€
[06:17:56] <SnoopJ> vdamewood, then UAX-31 says "no"
[06:18:06] <SnoopJ> and Python just adopts the rules laid out in that standard
[06:18:10] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Ping timeout: 252 seconds)
[06:19:09] <SnoopJ> `نم = 42` is syntactically valid, if not visually surprising
[06:19:28] <vdamewood> Well, nuts. No Persian indicative verbs for me then.
[06:19:53] *** Joins: FinnElija (~finn_elij@user/finn-elija/x-0085643)
[06:20:20] <SnoopJ> it's the ZWNJ in there that is the problem I think
[06:20:24] <vdamewood> Of course, I guess dropping the ZWNJ would look about the same as dropping the apostrophe in a contract.
[06:20:55] <SnoopJ> it beats "eh, whatever, ASCII only" at least
[06:20:59] *** Quits: Naan (~naan@user/naan) (Quit: Leaving)
[06:21:26] <vdamewood> mikonam = True; if (mikonam): do_it()
[06:21:59] *** Quits: Vonter_ (~Vonter@user/vonter) (Ping timeout: 264 seconds)
[06:22:14] <SnoopJ> at a guess, from the Consortium's standpoint, the ZWNJ there is probably a homoglyph threat or something like this
[06:22:47] <vdamewood> I would be surprised if that's the rationale.
[06:23:03] <SnoopJ> I find text on computers regularly surprising
[06:23:08] <amosbird> Hello! What's the best practice of updating a file via some url and only do so if there is indeed a update (polling per 5 minutes)
[06:23:45] <vdamewood> HTTP has a Date-Modified header. Do a HEAD request to check if it was changed. Then do a GET request to actually fetch it when it changes.
[06:24:10] <SnoopJ> oh neat, there's actually a section in the report about exactly this http://www.unicode.org/reports/tr31/#Figure_Farsi_Example_with_ZWNJ
[06:24:42] <SnoopJ> I wonder if this is a case where Python breaks with the specification...
[06:24:50] *** Joins: extropiator (~adam@user/extropiator)
[06:25:17] <SnoopJ> "an implementation should allow the following Join_Control characters in the limited contexts specified...below"
[06:25:24] <SnoopJ> vdamewood, so I guess I'm wrong, Python is actually the one saying no here :)
[06:25:28] <parv> "Combining marks are accounted for in identifier syntax: a composed character sequence consisting of a base character followed by any number of combining marks is valid in an identifier." https://www.unicode.org/reports/tr31/tr31-35.html
[06:27:05] *** Joins: Vonter_ (~Vonter@user/vonter)
[06:27:53] <vdamewood> SnoopJ: Still, it's only as bad as not being able to use apostrphes. After Can't means cannot, while cant means underworld slang.
[06:27:57] *** Quits: Haxxa (~Haxxa@122.199.45.224) (Quit: Haxxa flies away.)
[06:28:24] <vdamewood> But no one's going to confuse a variable named it_cant to mean it_slang.
[06:28:33] <SnoopJ> vdamewood, I guess you'd have to drop their use for strings to even begin thinking about allowing them
[06:28:46] <amosbird> vdamewood: interesting. Is that reliable?
[06:29:12] <vdamewood> amosbird: Is What reliable?
[06:29:28] *** Joins: Haxxa (~Haxxa@122.199.45.224)
[06:30:05] *** Joins: PortableDave (~portabled@194-193-148-202.tpgi.com.au)
[06:30:58] *** Quits: djhankb (~djhankb@208.113.164.68) (Read error: Connection reset by peer)
[06:31:06] <amosbird> Date-Modified header
[06:31:09] <amosbird> Can I rely on this
[06:31:32] *** Joins: djhankb (~djhankb@208.113.164.68)
[06:31:35] *** Quits: Vonter_ (~Vonter@user/vonter) (Ping timeout: 264 seconds)
[06:32:32] <vdamewood> amosbird: Oh, oops. It's Last-Modified, and to answer the question, kinda.
[06:32:47] <vdamewood> https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Last-Modified
[06:33:11] <vdamewood> There's nothing stopping a server from serving a wrong time, or not serving the header at all.
[06:33:37] <vdamewood> But most servers that serve that header do serve it correctly, since it's easier to to it right than to screw it up.
[06:33:58] *** Joins: Moosadee (~Moosadee@136.32.155.193)
[06:35:10] *** Quits: donald1 (~yoshi@88.5.131.77.rev.sfr.net) (Ping timeout: 252 seconds)
[06:36:09] *** Quits: KombuchaKip (~kip@192.252.230.5) (Quit: Leaving.)
[06:37:11] *** Quits: penguino (~mrpenguin@user/mrpenguin) (Remote host closed the connection)
[06:37:35] *** Quits: y1n (~y1n@77.119.208.217.wireless.dyn.drei.com) (Ping timeout: 264 seconds)
[06:38:10] *** Quits: grys (~quassel@botters/gry) (Quit: No Ping reply in 180 seconds.)
[06:38:11] *** Quits: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br) (Quit: leaving)
[06:39:05] *** Quits: parv (~quass@user/parv) (Quit: parv)
[06:39:35] *** Joins: grys (~quassel@botters/gry)
[06:41:30] *** Joins: Vonter_ (~Vonter@user/vonter)
[06:46:11] *** Quits: Vonter_ (~Vonter@user/vonter) (Ping timeout: 265 seconds)
[06:47:30] *** Quits: Haxxa (~Haxxa@122.199.45.224) (Quit: Haxxa flies away.)
[06:47:38] *** Joins: cyphase (~cyphase@user/cyphase)
[06:48:54] *** Joins: Haxxa (~Haxxa@122.199.45.224)
[06:49:08] *** Quits: phantomotap (~phantomot@c-68-35-28-201.hsd1.al.comcast.net) (Quit: Leaving)
[06:49:46] *** Joins: zuQe89 (~zuQe8@cpc105068-sgyl40-2-0-cust196.18-2.cable.virginm.net)
[06:50:04] *** Quits: zuQe8 (~zuQe8@cpc105068-sgyl40-2-0-cust196.18-2.cable.virginm.net) (Ping timeout: 252 seconds)
[06:50:04] *** zuQe89 is now known as zuQe8
[06:53:02] *** Quits: Haxxa (~Haxxa@122.199.45.224) (Remote host closed the connection)
[06:54:51] *** Joins: Haxxa (~Haxxa@122.199.45.224)
[06:58:19] *** Quits: nfc_ (nfc@tilde.institute) (Ping timeout: 252 seconds)
[07:00:09] *** Quits: gggp (~gggp@li870-78.members.linode.com) (Remote host closed the connection)
[07:00:40] *** Joins: gggp (~gggp@li870-78.members.linode.com)
[07:02:39] *** Joins: Vonter_ (~Vonter@user/vonter)
[07:03:18] *** Quits: Haxxa (~Haxxa@122.199.45.224) (Quit: Haxxa flies away.)
[07:03:18] *** Quits: NightMonkey (~NightMonk@user/nightmonkey) (Quit: ZNC - http://znc.in)
[07:04:18] *** Joins: Haxxa (~Haxxa@122.199.45.224)
[07:04:34] *** Quits: ExpiredKebab (~sgreadly@32.58.252.27.dyn.cust.vf.net.nz) (Quit: Textual IRC Client: www.textualapp.com)
[07:06:01] *** Quits: Lando-SpaceIzzle (~Lando-Spa@user/lando-spacepimp) (Ping timeout: 252 seconds)
[07:06:44] *** Joins: NightMonkey (~NightMonk@user/nightmonkey)
[07:07:07] *** Quits: Vonter_ (~Vonter@user/vonter) (Ping timeout: 252 seconds)
[07:07:39] *** Quits: winterflaw (~winterfla@gateway/tor-sasl/winterflaw) (Ping timeout: 276 seconds)
[07:09:29] *** Quits: Haxxa (~Haxxa@122.199.45.224) (Remote host closed the connection)
[07:10:03] *** Quits: pycurious (~Adium@user/pycurious) (Quit: Leaving.)
[07:10:16] *** Joins: pycurious (~Adium@user/pycurious)
[07:12:24] *** Joins: Haxxa (~Haxxa@122.199.45.224)
[07:14:16] *** Quits: pycurious (~Adium@user/pycurious) (Ping timeout: 245 seconds)
[07:21:06] *** Joins: aniruddha (uid340443@id-340443.ilkley.irccloud.com)
[07:22:53] *** Quits: gggp (~gggp@li870-78.members.linode.com) (Remote host closed the connection)
[07:23:24] *** Joins: gggp (~gggp@li870-78.members.linode.com)
[07:23:58] *** Quits: Haxxa (~Haxxa@122.199.45.224) (Quit: Haxxa flies away.)
[07:24:16] *** Quits: abhixec (~abhixec@c-67-169-139-16.hsd1.ca.comcast.net) (Ping timeout: 245 seconds)
[07:24:43] *** Joins: fdan (~fdan@103.215.168.1)
[07:24:53] *** Joins: Haxxa (~Haxxa@122.199.45.224)
[07:24:59] *** Quits: clarjon1 (~clarjon1@user/clarjon1) (Ping timeout: 264 seconds)
[07:25:05] <amosbird> Cool. Thanks
[07:25:49] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 265 seconds)
[07:27:42] *** Joins: fikran (~fikran@user/fikran)
[07:32:01] *** Quits: Haxxa (~Haxxa@122.199.45.224) (Quit: Haxxa flies away.)
[07:33:32] *** Joins: kronicmage (user3131@neotame.csclub.uwaterloo.ca)
[07:36:02] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.3)
[07:36:03] *** Quits: p-i- (~Ohmu@mx-ll-223.206.148-192.dynamic.3bb.co.th) (Read error: Connection reset by peer)
[07:36:05] *** Joins: Haxxa (~Haxxa@122.199.45.224)
[07:36:31] *** Joins: supakeen (~user@python/site-packages/supakeen)
[07:36:39] *** Joins: p-i- (~Ohmu@mx-ll-223.206.148-192.dynamic.3bb.co.th)
[07:36:58] *** Joins: pycurious (~Adium@user/pycurious)
[07:40:37] *** kai75 is now known as kai
[07:41:00] *** Quits: Haxxa (~Haxxa@122.199.45.224) (Remote host closed the connection)
[07:41:13] *** Quits: pycurious (~Adium@user/pycurious) (Ping timeout: 252 seconds)
[07:41:23] *** Joins: nfc_ (nfc@tilde.institute)
[07:41:43] *** Joins: Haxxa (~Haxxa@122.199.45.224)
[07:42:25] *** Quits: yaalon (~yaalon@2600:1700:9450:2d30:e57c:4c38:fc8f:326c) ()
[07:47:49] *** Quits: extropiator (~adam@user/extropiator) (Ping timeout: 252 seconds)
[07:48:32] <amosbird> Hmm, why do I get UnboundLocalError: local variable 'last_schema_str' referenced before assignment     http://oracle.wentropy.com/bc7a623ba9577d0d
[07:52:31] <amosbird> "If you set the value of a variable inside the function, python understands it as creating a local variable with that name. " Is that universally true?
[07:52:46] <jinsun> amosbird: because you are assigning it on line 11 but using on line 10
[07:53:28] <jinsun> if you want to assign to the global variable then you have to declare `global last_schema_str` before line 10
[07:53:55] *** Joins: pycurious (~Adium@user/pycurious)
[07:54:42] *** Quits: zebrag (~chris@user/zebrag) (Remote host closed the connection)
[07:55:01] <amosbird> ok
[07:55:24] *** Quits: Haxxa (~Haxxa@122.199.45.224) (Quit: Haxxa flies away.)
[07:55:34] <amosbird> Is it only related to functions?
[07:57:30] <jinsun> functions create a new local scope so it is related to functions, most other statements like for loops and context managers don't create a new scope so this problem doesn't come up there
[07:57:40] *** Quits: Dotz0cat (~Dotz0cat@h38.88.187.173.dynamic.ip.windstream.net) (Ping timeout: 252 seconds)
[07:58:22] *** Joins: Dotz0cat (~Dotz0cat@h113.245.19.98.static.ip.windstream.net)
[07:58:35] *** Quits: pycurious (~Adium@user/pycurious) (Ping timeout: 264 seconds)
[07:58:55] *** Joins: Haxxa (~Haxxa@122.199.45.224)
[07:59:10] <amosbird> "create a new local scope" Any other objects which will create a new scope?
[07:59:12] <jinsun> class definitions are another place where a new scope is created, so you can run into this there too, but you usually write this kind of logic within methods of the class not directly in the class body
[08:00:07] <meejah> also, best to avoid globals when possible .. of course, modules are globals so ....
[08:00:07] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[08:00:37] *** Quits: Spiney (~Spiney@2604:a880:400:d0::1d82:b001) (*.net *.split)
[08:00:37] *** Quits: n-st (~n-st@user/n-st) (*.net *.split)
[08:00:37] *** Quits: mcglk (~mcglk@131.191.49.120) (*.net *.split)
[08:00:37] *** Quits: grawity (grawity@star.nullroute.lt) (*.net *.split)
[08:00:37] *** Quits: dhellmann (~dhellmann@097-081-099-073.res.spectrum.com) (*.net *.split)
[08:00:37] *** Quits: thurstylark (thurstylar@user/thurstylark) (*.net *.split)
[08:00:37] *** Quits: Madda (~Madda@216.51.198.146.dyn.plus.net) (*.net *.split)
[08:00:37] *** Quits: foxtrot (~foxtrot@user/foxtrot) (*.net *.split)
[08:00:37] *** Quits: tanner (~tanner@tilde.town) (*.net *.split)
[08:00:37] *** Quits: ComputerTech (~ComputerT@user/computertech) (*.net *.split)
[08:00:37] *** Quits: `rdvn (~rdvn@user/rdvn) (*.net *.split)
[08:00:37] *** Quits: sud (~sud@user/sud) (*.net *.split)
[08:00:37] *** Quits: ilmais1n (~il@irc.oh1cgn.fi) (*.net *.split)
[08:00:37] *** Quits: graphitemaster (~graphitem@user/graphitemaster) (*.net *.split)
[08:00:37] *** Quits: _0x5fc3 (~0x5fc3@wireguard/tunneler/-0x5fc3) (*.net *.split)
[08:00:37] *** Quits: vlt (~dm@157.230.21.14) (*.net *.split)
[08:00:37] *** Quits: PanamaCity3003_ (~PanamaCit@skylab/user/panamacity3003) (*.net *.split)
[08:00:37] *** Quits: meejah (~meejah@rutas.meejah.ca) (*.net *.split)
[08:00:37] *** Quits: phryk (~totallyno@user/phryk) (*.net *.split)
[08:00:37] *** Quits: dstufft (~dstufft@shitbird.caremad.io) (*.net *.split)
[08:00:37] *** Quits: newdimension (~newdimnes@user/newdimension) (*.net *.split)
[08:00:37] *** Quits: Gaffel_ (~gaffel@h-178-174-170-170.A1405.priv.bahnhof.se) (*.net *.split)
[08:00:37] *** Quits: HenryTheLongshot (~Henry@46.101.4.181) (*.net *.split)
[08:00:37] *** Quits: CrunchyChewie (~CrunchyCh@user/crunchychewie) (*.net *.split)
[08:00:37] *** Quits: quesker (idnet@2600:3c01::f03c:91ff:feac:4ce2) (*.net *.split)
[08:00:37] *** Quits: defn (~n0b0dy@user/defn) (*.net *.split)
[08:00:37] *** Quits: icy (~icy@user/icy) (*.net *.split)
[08:00:37] *** Quits: gamah (~quassel@gamah.net) (*.net *.split)
[08:00:37] *** Quits: syrius (syrius@titan.stormtek.net) (*.net *.split)
[08:00:37] *** Quits: oprypin (~irc@pryp.in) (*.net *.split)
[08:00:37] *** Quits: Nothing4You (N4Y@nothing4you.w.tf-w.tf) (*.net *.split)
[08:00:37] *** Quits: Spydar007 (~spydar007@user/spydar007) (*.net *.split)
[08:00:37] *** Quits: mastardet (~mastardet@user/mastardet) (*.net *.split)
[08:00:37] *** Quits: blurry (xbaranov@lounge.fi.muni.cz) (*.net *.split)
[08:00:37] *** Quits: w1kl4s (~w1kl4s@user/w1kl4s) (*.net *.split)
[08:00:37] *** Quits: mgedmin (~mg@user/mgedmin) (*.net *.split)
[08:00:37] *** Quits: gcbirzan (~gcbirzan@user/gcbirzan) (*.net *.split)
[08:00:37] *** Quits: push-f (~martin@push-f.com) (*.net *.split)
[08:00:37] *** Quits: kungp (~kungp@h-46-59-2-200.A230.priv.bahnhof.se) (*.net *.split)
[08:00:37] *** Quits: SirScott (~SirScott@c-67-176-100-163.hsd1.co.comcast.net) (*.net *.split)
[08:00:37] *** Quits: mjacob (~mjacob@adrastea.uberspace.de) (*.net *.split)
[08:00:37] *** Quits: FLHerne (flh@flherne.uk) (*.net *.split)
[08:00:37] *** Quits: explodes (~explodes@user/explodes) (*.net *.split)
[08:00:37] *** Quits: MelMalik (ellenor@vice-chairwoman.of.freenode.management) (*.net *.split)
[08:00:37] *** Quits: laerling (~lsf@static.235.77.203.116.clients.your-server.de) (*.net *.split)
[08:00:37] *** Quits: Riviera (Riviera@user/riviera) (*.net *.split)
[08:00:37] *** Quits: DarkHelmet (bryan@MrPickles.keekles.org) (*.net *.split)
[08:00:37] *** Quits: a1paca (~a1paca@user/a1paca) (*.net *.split)
[08:00:37] *** Quits: Ulti_ (~matt@ec2-35-178-236-167.eu-west-2.compute.amazonaws.com) (*.net *.split)
[08:00:37] *** Quits: rich (~rich@2a03:4000:3f:f1:b859:16ff:fe45:e87f) (*.net *.split)
[08:00:37] *** Quits: Ara (~Ara@user/ara) (*.net *.split)
[08:00:37] *** Quits: Moult (~sevenstro@sevenstrokes.net) (*.net *.split)
[08:00:37] *** Quits: drincruz (drincruz@2607:5300:203:3f52::19) (*.net *.split)
[08:00:46] *** Joins: oprypin (~irc@pryp.in)
[08:00:47] *** Joins: Spiney_ (~Spiney@2604:a880:400:d0::1d82:b001)
[08:00:48] *** Joins: meejah (~meejah@rutas.meejah.ca)
[08:00:49] *** Joins: dstufft (~dstufft@shitbird.caremad.io)
[08:00:49] *** Joins: Riviera (Riviera@user/riviera)
[08:00:50] *** Joins: mjacob (~mjacob@adrastea.uberspace.de)
[08:00:54] *** Joins: mastardet (~mastardet@user/mastardet)
[08:00:57] *** Joins: FLHerne_ (flh@flherne.uk)
[08:00:59] *** Joins: Gamah (~quassel@gamah.net)
[08:01:00] *** Joins: rdvn (~rdvn@user/rdvn)
[08:01:05] *** Joins: push-f (~martin@push-f.com)
[08:01:10] *** Joins: kungp (~kungp@h-46-59-2-200.A230.priv.bahnhof.se)
[08:01:10] *** Joins: PanamaCity3003 (~PanamaCit@skylab/user/panamacity3003)
[08:01:10] *** Joins: icy (~icy@user/icy)
[08:01:12] *** Joins: Ulti (~matt@ec2-35-178-236-167.eu-west-2.compute.amazonaws.com)
[08:01:15] *** Joins: graphitemaster_ (~graphitem@user/graphitemaster)
[08:01:15] *** Joins: gcbirzan (~gcbirzan@user/gcbirzan)
[08:01:21] *** Joins: newdimension (~newdimnes@user/newdimension)
[08:01:27] *** Joins: sud (~sud@user/sud)
[08:01:30] *** Joins: n-st (~n-st@user/n-st)
[08:01:30] *** Joins: quesker (~idnet@mail.89vx.net)
[08:01:30] *** Joins: SirScott (~SirScott@c-67-176-100-163.hsd1.co.comcast.net)
[08:01:30] *** Joins: phryk (~totallyno@user/phryk)
[08:01:31] *** Joins: _0x5fc3 (~0x5fc3@wireguard/tunneler/-0x5fc3)
[08:01:31] *** Joins: southey (~foxtrot@user/foxtrot)
[08:01:32] *** Joins: dhellmann (~dhellmann@097-081-099-073.res.spectrum.com)
[08:01:33] *** Joins: grawity (grawity@star.nullroute.lt)
[08:01:36] *** Joins: thurstylark (thurstylar@user/thurstylark)
[08:01:36] *** Joins: defn (~n0b0dy@user/defn)
[08:01:37] *** Joins: CrunchyChewie (~CrunchyCh@user/crunchychewie)
[08:01:37] *** Joins: Spydar007 (~spydar007@user/spydar007)
[08:01:38] *** Joins: mcglk (~mcglk@131.191.49.120)
[08:01:42] *** Joins: tanner (~tanner@tilde.town)
[08:01:42] *** Joins: vlt (~dm@157.230.21.14)
[08:01:43] *** Joins: explodes (~explodes@user/explodes)
[08:01:49] *** Joins: mgedmin (~mg@user/mgedmin)
[08:01:57] *** Joins: w1kl4s (~w1kl4s@user/w1kl4s)
[08:02:07] *** Joins: HenryTheLongshot (~Henry@46.101.4.181)
[08:02:29] *** Joins: a1paca (~a1paca@user/a1paca)
[08:02:49] *** FLHerne_ is now known as FLHerne
[08:02:54] <jinsun> yeah better to try not modifying the global but create a new thing and return that, reading globals is better than writing to them (don't have to declare global) but might be better to take that as a parameter instead
[08:02:55] *** Quits: Haxxa (~Haxxa@122.199.45.224) (Client Quit)
[08:03:26] *** Joins: Ara (~Ara@user/ara)
[08:03:29] *** Joins: ComputerTech (~ComputerT@user/computertech)
[08:03:49] <aphysically> I think after I get comfortable with pytest I need to try to get comfortable with using c bindings for stuff
[08:05:07] <energizer> aphysically: cffi is often recommended
[08:05:29] <amosbird> jinsun: does the order matter?
[08:06:13] <amosbird> print(a); a = 1; print(a);  Will the first "a" be treated as globals
[08:06:46] <meejah> amosbird: yes
[08:06:52] *** Joins: Haxxa (~Haxxa@122.199.45.224)
[08:07:19] <KirkMcDonald> amosbird: The presence of an assignment to a name anywhere within a function will make that name a global throughout the entire function block, even lexically preceding the assignment.
[08:07:29] <amosbird> KirkMcDonald: thanks
[08:07:41] <meejah> KirkMcDonald: what if "a" is an arg?
[08:07:52] <KirkMcDonald> meejah: Function parameters are already locals.
[08:08:09] <KirkMcDonald> Err
[08:08:15] <amosbird> How can I refer to class locals instead of globals?
[08:08:16] <KirkMcDonald> Also, I meant s/global/local/
[08:08:21] <KirkMcDonald> Bad typo there.
[08:08:21] *** Joins: Nothing4You (N4Y@nothing4you.w.tf-w.tf)
[08:08:22] <meejah> ah
[08:08:27] *** Joins: whatsupdoc (~whatsupdo@148.64.20.87)
[08:09:18] <meejah> amosbird: what's a "class local"?
[08:09:36] <energizer> class variables meejah
[08:10:06] <BrenBarn> If you want to refer to attributes you need to use the dot like `obj.attr`
[08:10:06] *** Quits: _xor (~xor@72.49.199.147) (Read error: Connection reset by peer)
[08:10:08] <KirkMcDonald> As in class attributes?
[08:10:18] <meejah> amosbird: "self.foo" will "call up" to ClassName.foo .. but not sure what you're asking?
[08:10:32] <energizer> yes, aka typing.ClassVar
[08:10:34] *** Joins: _xor (~xor@72.49.199.147)
[08:10:51] *** Quits: p-i- (~Ohmu@mx-ll-223.206.148-192.dynamic.3bb.co.th) (Read error: Connection reset by peer)
[08:12:30] *** Joins: pycurious (~Adium@user/pycurious)
[08:12:44] *** Joins: shawwwn (uid6132@id-6132.helmsley.irccloud.com)
[08:12:59] *** Joins: Gaffel (~gaffel@h-178-174-170-170.A1405.priv.bahnhof.se)
[08:13:08] *** Quits: Haxxa (~Haxxa@122.199.45.224) (Quit: Haxxa flies away.)
[08:13:11] *** Quits: \\ (~\0x5c@miaow/nonantedeux) (Quit: bye)
[08:13:24] *** Joins: \\ (~\0x5c@miaow/nonantedeux)
[08:13:27] *** Joins: Haxxa (~Haxxa@122.199.45.224)
[08:14:15] *** Joins: MelanieMalik (ellenor@vice-chairwoman.of.freenode.management)
[08:14:20] *** MelanieMalik is now known as MelMalik
[08:15:15] <chymera> hi guys, any idea how I can extract the python code and only the python cult from an ipython notebook?
[08:15:27] *** Joins: FH_thecat (~FH_thecat@75.11.25.212.ftth.as8758.net)
[08:15:57] *** Joins: parv (~quass@user/parv)
[08:17:00] <amosbird> meejah: Does self.foo follow the same rule of globals?
[08:17:03] *** Quits: pycurious (~Adium@user/pycurious) (Ping timeout: 265 seconds)
[08:17:09] <meejah> amosbird: no
[08:17:23] <meejah> it looks up locally, then at class, then gives up
[08:17:24] <amosbird> Like, if the method contains a self.foo = 1, it will be local, or else class attribute
[08:17:40] <meejah> it will be an instance variable then
[08:17:52] <meejah> (so: neither)
[08:19:49] <jinsun> chymera: `jupyter nbconvert --to python .\Untitled.ipynb` will create a Untitled.py (it will put non python stuf in the comments)
[08:21:27] *** Quits: Haxxa (~Haxxa@122.199.45.224) (Quit: Haxxa flies away.)
[08:22:39] *** Quits: cjb (~cjb@user/cjb) ()
[08:22:53] *** Joins: Haxxa (~Haxxa@122.199.45.224)
[08:23:02] *** Joins: Disposeable-Nick (~Ident@user/disposeable-nick)
[08:24:07] *** Quits: gggp (~gggp@li870-78.members.linode.com) (Remote host closed the connection)
[08:24:22] *** Joins: lucidreamachine (~brian@2600:1700:1c60:16c0:e71d:31e7:a5c4:5ea1)
[08:24:35] *** Joins: yeirr (~yeirr@user/yeirr)
[08:24:47] *** Joins: gggp (~gggp@li870-78.members.linode.com)
[08:25:39] <Disposeable-Nick> Hi, I have a Python IRC script that I wrote, and it works, does the basic that I need, but it seems to ignore whatever if statements I add, except for the Pong reply if statement - all other if statements in the loop just don't work and any code after them also doesn't work or gets ignored.  Anyone have an idea why? I'll paste script in a sec.
[08:25:41] *** Joins: _genuser_ (2fb823e8@67.205.143.82)
[08:26:30] <meejah> Disposeable-Nick: please use a pastebin site ..
[08:26:36] <Disposeable-Nick> https://dpaste.com/CT7MSZ425
[08:26:37] <aphysically> jinsun: it *is* backwards incompatible
[08:26:44] <Disposeable-Nick> There you are.
[08:26:54] <aphysically> it may not type check with mypy but it (ironically) *does* type check with pyright
[08:27:05] <aphysically> so it will cause typing regresisons for users of pylance in vs code
[08:27:37] <aphysically> so mypy only type errors on the usage side, and pyright only type errors on the library side
[08:27:51] <aphysically> (for asymmetric getter/setter types)
[08:27:52] <grawity> Disposeable-Nick: all that code seems to be indented 1 level too many, so it's all technically under the "if text.find("PING :")" block
[08:28:21] <grawity> but also please have a function to actually parse the IRC input into components
[08:28:32] *** Quits: Haxxa (~Haxxa@122.199.45.224) (Quit: Haxxa flies away.)
[08:28:33] <grawity> like sender command parameters
[08:29:02] <Disposeable-Nick> grawity, could you paste me an example, where the statements at the bottom of script will run, if in the correct place? I'm fairly new, and am still learning this.
[08:29:23] <jinsun> aphysically: well unless rich wants to typecheck itself with mypy only but wants users to use pyright only, it should still be changed
[08:29:37] *** Quits: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 265 seconds)
[08:30:03] <aphysically> jinsun: okay but get this
[08:30:11] <aphysically> with the change pyright/pylance *does* error on the user side
[08:30:13] <aphysically> :D
[08:30:36] <aphysically> (as does mypy, obviously)
[08:30:56] *** Quits: djhankb (~djhankb@208.113.164.68) (Read error: Connection reset by peer)
[08:31:26] *** Joins: djhankb (~djhankb@208.113.164.68)
[08:31:35] *** Quits: HaMsTeRs (~Thunderbi@14-0-229-133.static.pccw-hkt.com) (Ping timeout: 260 seconds)
[08:32:23] <jinsun> ya if someone was using only pyright/pylance (and not checking rich code itself) they would see errors now
[08:33:20] *** Joins: stranac (~stranac@195.29.239.126)
[08:33:56] <jinsun> but they will be a small subset of people who you can ignore, assume all users use mypy also and change it
[08:34:17] *** Quits: semeion (~semeion@user/semeion) (Quit: WeeChat 3.3)
[08:34:19] *** Joins: Haxxa (~Haxxa@122.199.45.224)
[08:34:34] *** Joins: nomic (~nomic@185.217.117.88)
[08:34:35] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 264 seconds)
[08:34:37] <grawity> Disposeable-Nick: no, I'm not going to do all the testing and debugging for you
[08:34:50] <whatsupdoc> Hi, how do you make a static variable in python? Inside a function?
[08:35:13] <Disposeable-Nick> grawity, I just don't understand how to make the indent adjustments you mentioned.
[08:35:13] <grawity> Disposeable-Nick: does your text editor have something like "indent guides"?
[08:35:29] <meejah> whatsupdoc: sure, kind of, but what do you mean by "static"?
[08:35:59] <whatsupdoc> A variable that doesn't change, contains the same data no matter when / how many times a function is called
[08:36:23] <grawity> do you mean "variable whose value persists across function calls" or "variable which is actually a constant"
[08:36:33] <grawity> I guess static means the former in C
[08:36:43] <Disposeable-Nick> It may, have not explored it deeply enough, I usee IDLE for editing, grawity.
[08:36:43] <whatsupdoc> former
[08:36:53] <jinsun> whatsupdoc: you can rewrite the function to be a object with __call__ method, and store the variable in obj.static_variable
[08:37:44] <aphysically> jinsun: it may be a tough sell, I can infer from context maintainer uses pylance
[08:37:58] <jinsun> whatsupdoc: well you can directly set atributes on plain defs also but linters won't like that
[08:38:11] <whatsupdoc> interesting
[08:38:33] <grawity> tbh sounds like a use for a class/object
[08:38:45] <parv> whatsupdoc, Create function B in function A; define/set the variable in A; return/call B to get the value of the variable -- a closure
[08:39:27] <grawity> i'd make a class that defines a callable object and then it can hold state like a class instance/object would *and* still work like a function
[08:39:44] *** Joins: extropiator (~adam@user/extropiator)
[08:39:46] <jinsun> aphysically: so the maintainer uses only mypy for rich and only pylance for their own code? seems weird
[08:39:46] <grawity> Disposeable-Nick: so like, you know how in line 43-44, the two 'print's are indented more (8 spaces) so that they're "inside" the 'if PING in text' block, but line 46 is back to 4 spaces so that it's not part of that block anymore?
[08:39:53] <aphysically> jinsun: yes
[08:40:11] <aphysically> that is what I have inferred
[08:40:33] <jinsun> well then you can do nothing but leave that failing for pyright
[08:41:13] *** Quits: Moosadee (~Moosadee@136.32.155.193) (Ping timeout: 265 seconds)
[08:41:27] <jinsun> or maybe fork rich just to have a pyright compliant version :D
[08:41:58] <grawity> Disposeable-Nick: well your lines 99-118 all have a 8-space indent, the same as 47-79, which means they just continue within the same 'if text.find' block
[08:42:02] *** Quits: Haxxa (~Haxxa@122.199.45.224) (Quit: Haxxa flies away.)
[08:42:39] *** Joins: Moosadee (~Moosadee@136.32.155.193)
[08:44:29] <Disposeable-Nick> grawity, I do kinda of understand, what you mean, but how many spaces or tab indent difference letf or right should I move the other if statements?
[08:45:05] <grawity> Disposeable-Nick: make it match the outer block
[08:45:12] <whatsupdoc> Code review? https://dpaste.org/xx8X
[08:45:29] <grawity> Disposeable-Nick: in your code, stuff in 'while 1:' is indented by 4 spaces
[08:45:30] <meejah> Disposeable-Nick: always use 4 spaces
[08:45:42] *** Joins: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de)
[08:46:20] <jinsun> aphysically: another solution is to have the getter return the tuple too
[08:46:42] <grawity> Disposeable-Nick: so unindent the problematic code by 4, so that e.g. 'if text.find' in line 99 is only indented by 4 spaces total, and it'll match the indentation used in the 'while' block
[08:46:49] *** Joins: Haxxa (~Haxxa@122.199.45.224)
[08:46:53] <aphysically> jinsun: yeah, but that's break API
[08:46:54] <jinsun> aphysically: eh but that is also backwards incompatile
[08:46:56] <jinsun> ya
[08:47:02] *** Joins: pycurious (~Adium@user/pycurious)
[08:47:03] <jinsun> so it is actually worse
[08:47:04] <aphysically> in particular, everyone who fixed their typing because they used mypy will get an error
[08:47:07] <aphysically> (EVERYONE)
[08:47:37] <whatsupdoc> And also let me know if I can make some optimizations?
[08:48:50] <jinsun> aphysically: yeah, no solution really, other than letting pyright fail or just asssuming everyone uses mypy and so this is nott a breaking change
[08:50:40] <aphysically> jinsun: see my comment https://github.com/willmcgugan/rich/pull/1604
[08:51:20] <grawity> whatsupdoc: since the functions are class methods, make 'memo' a class attribute (self.memo or self._memo), then you won't need to pass it as a parameter
[08:51:21] *** Quits: zmt00 (~zmt00@user/zmt00) (Ping timeout: 245 seconds)
[08:51:39] <grawity> whatsupdoc: (and then you won't need the wrapper/helper split)
[08:51:55] <whatsupdoc> I tried, but if the dictionary is used multiple times, it doesn't reset the dictionary
[08:51:57] <grawity> whatsupdoc: hmm nevermind that, I probaly misunderstood the code
[08:52:22] <whatsupdoc> Just gotta say I hate memoization and DP
[08:53:19] <whatsupdoc> I guess memoization is easy now, but dynamic programming - I have never been able to come up with a fast enough solution
[08:53:22] <aphysically> jinsun: look at my commit messages by the way; way too long :D
[08:53:31] <grawity> in general, what does the code *do*
[08:53:50] <whatsupdoc> classic dynamic programming coin problem
[08:54:07] <jinsun> aphysically: another way is to have a Java like setThing method for people who want to set using tuples, and change the annotation for the setter (still breaking for people who use pylance only, but they will have a convenient way to replace their current usage at least)
[08:54:11] <whatsupdoc> You are given an integer array coins representing coins of different denominations and an integer amount representing a total amount of money.
[08:54:11] <whatsupdoc> Return the fewest number of coins that you need to make up that amount. If that amount of money cannot be made up by any combination of the coins, return -1.
[08:55:47] <jinsun> aphysically:  so add a console.setSize that takes tuples, and console.size = takes only the Namedtuple
[08:56:19] *** Quits: parv (~quass@user/parv) (Quit: parv)
[08:56:43] <aphysically> I'm not sure it's easier to change code to setSize than to wrap it in a class (or add type ignore)
[08:56:47] *** Quits: pycurious (~Adium@user/pycurious) (Ping timeout: 264 seconds)
[08:56:53] <aphysically> but yeah that's an option
[08:57:26] *** Joins: carl--- (~carl-@c-138ee555.02-180-73746f39.bbcust.telenor.se)
[08:57:31] *** Joins: milkt (~debian@gateway/tor-sasl/milkt)
[08:58:27] <jinsun> aphysically: nice long messages in the commits, but really long messages are like this https://github.com/mpv-player/mpv/commit/1e70e82baa9193f6f027338b0fab0f5078971fbe :D
[08:59:03] <whatsupdoc> How do you write Dict like List[int]?
[08:59:19] <jinsun> whatsupdoc: Dict[TKey, TValue]
[08:59:32] <whatsupdoc> Thanks
[09:01:00] <whatsupdoc> Addign Dict[int, int] slows down my code smh
[09:01:50] *** Quits: extropiator (~adam@user/extropiator) (Ping timeout: 260 seconds)
[09:02:13] <jinsun> obviously it does, but it should be few microseconds only that you shouldn't care about
[09:02:39] *** Quits: Haxxa (~Haxxa@122.199.45.224) (Quit: Haxxa flies away.)
[09:02:44] <whatsupdoc> how often is it checked?
[09:02:57] <SnoopJ> it isn't, the runtime stores the annotation and does nothing else with it
[09:03:10] <whatsupdoc> alright
[09:03:28] <jinsun> it is not checked at all, just stored in the object's __annotations__
[09:03:55] <energizer> whatsupdoc: leetcode timers are gonna be really noisy. they're probably running you in a container on a shared machine with tons of other stuff going on
[09:04:13] <whatsupdoc> yep
[09:04:25] *** Quits: gitly (~gitly@85.255.235.115) (Ping timeout: 265 seconds)
[09:04:33] *** Quits: MrBungle (~MrBungle@2604:3d08:1788:dc00:404b:4a6f:740e:a236) (Read error: Connection reset by peer)
[09:04:54] *** Joins: Haxxa (~Haxxa@122.199.45.224)
[09:04:54] *** Quits: rickybob (rickybob@gateway/vpn/protonvpn/rickybob) (Ping timeout: 265 seconds)
[09:04:59] <whatsupdoc> I wonder if my implementation is slow, or if memoization is just a slow solution
[09:05:04] <aphysically> jinsun: pfft it's lowercase D now I only believe in python versions after 3.8
[09:06:04] *** Joins: gitly (~gitly@148.252.132.214)
[09:06:12] <jinsun> aphysically: yeah bt whatsupdoc had a upper case L for the List, so I'm guessing it is python < 3.9
[09:06:26] <aphysically> :^(
[09:06:39] <Jonno_FTW> jinsun: the last paragraph of that commit message is something else
[09:07:13] <jinsun> yeah lmao
[09:07:32] *** Joins: dvx (~dvx@185.63.97.64)
[09:10:48] <whatsupdoc> omg i spend up my code https://dpaste.org/3ebX this is so addicting
[09:11:10] *** Quits: azidhaka (~azidhaka@user/azidhaka) (Remote host closed the connection)
[09:11:11] *** Quits: Moosadee (~Moosadee@136.32.155.193) (Ping timeout: 264 seconds)
[09:12:12] <whatsupdoc> faster and cleaner https://dpaste.org/fhTD
[09:12:18] *** Quits: Mindscape (~Lindis@user/lindis) (Remote host closed the connection)
[09:12:34] *** Quits: stats464_ (~stats4647@ip174-67-220-13.oc.oc.cox.net) (Read error: Connection reset by peer)
[09:12:44] *** Joins: stats4647 (~stats4647@ip174-67-220-13.oc.oc.cox.net)
[09:13:48] *** Quits: Haxxa (~Haxxa@122.199.45.224) (Quit: Haxxa flies away.)
[09:14:24] *** Joins: Haxxa (~Haxxa@122.199.45.224)
[09:15:45] *** Quits: fdan (~fdan@103.215.168.1) (Ping timeout: 256 seconds)
[09:18:20] *** Quits: iflema (~ian@user/iflema) (Quit: iflema)
[09:19:16] *** Quits: slowButPresent (~slowButPr@user/slowbutpresent) (Quit: leaving)
[09:21:20] *** Joins: shangxiao (~davids@124.187.230.212)
[09:21:37] *** Quits: bloody (~bloody@user/bloody) (Quit: Always focus on how far you've come, rather than how far you have left to go)
[09:21:48] *** Joins: iflema (~ian@user/iflema)
[09:22:58] *** Quits: twobitsprite (~twobitspr@45.134.140.18) (Ping timeout: 252 seconds)
[09:24:57] <Disposeable-Nick> grawity, I just want to save how happy I am for your help!  You have saved me from so much frustration, you won't believe.  Python is very in a straightline and very specific on where things go.  No GOTO etc...
[09:24:58] *** Joins: twobitsprite (~twobitspr@107.13.51.62)
[09:25:06] *** Quits: lsrtl (~lsrtl@user/lsrtl) (Ping timeout: 245 seconds)
[09:25:11] <Disposeable-Nick> say *
[09:25:50] <whatsupdoc> goto and global is the way to go
[09:27:04] <Disposeable-Nick> meejah, also, thank you as well!
[09:27:11] *** Joins: pro_z (~pro_z@37.214.47.106)
[09:27:35] <grawity> now use something like https://paste.rs/n0F instead of find() so that the bot can actually distinguish a real PING from some person saying "PING"
[09:28:07] *** Joins: pycurious (~Adium@user/pycurious)
[09:28:23] *** Quits: Haxxa (~Haxxa@122.199.45.224) (Quit: Haxxa flies away.)
[09:28:31] *** Joins: jpodivin (~jpodivin@118.108.broadband14.iol.cz)
[09:28:33] <grawity> there are probably better "parse IRC" modules on pypi, I'm sure, but probably most of them are deep inside a ready-made IRC bot, and where's the fun in that
[09:28:47] *** Joins: lsrtl (~lsrtl@user/lsrtl)
[09:28:54] *** Quits: yeirr (~yeirr@user/yeirr) (Ping timeout: 260 seconds)
[09:29:54] *** Joins: Haxxa (~Haxxa@122.199.45.224)
[09:30:33] *** Quits: djhankb (~djhankb@208.113.164.68) (Read error: Connection reset by peer)
[09:30:33] *** Quits: stats4647 (~stats4647@ip174-67-220-13.oc.oc.cox.net) (Read error: Connection reset by peer)
[09:30:38] *** Joins: lsrtl_ (~lsrtl@user/lsrtl)
[09:31:03] *** Joins: stats4647 (~stats4647@ip174-67-220-13.oc.oc.cox.net)
[09:31:30] *** Joins: djhankb (~djhankb@208.113.164.68)
[09:32:11] <Disposeable-Nick> grawity, before that iteration, I was doing this, lol:
[09:32:11] <Disposeable-Nick> handle = irc.makefile(mode='rw', buffering=1, encoding='utf-8', newline='\r\n') | for line in handle: | print(line) | if "PING" in line: | print("Got a PING") | print("PONG :" + line.split(':')[1], file=handle) | But in the correct line and indent, of course.
[09:32:29] *** Joins: ihristov (~ihristov@85.187.46.226)
[09:32:34] <Disposeable-Nick> I will look into that also
[09:32:36] *** Quits: pycurious (~Adium@user/pycurious) (Ping timeout: 258 seconds)
[09:33:34] *** Quits: lsrtl (~lsrtl@user/lsrtl) (Ping timeout: 260 seconds)
[09:33:38] <Jonno_FTW> there's an IRC parser in twisted, I used that and it works quite well
[09:34:47] *** Joins: upsala (~zcb@185.213.155.160)
[09:34:48] <Disposeable-Nick> Jonno_FTW, link to what you're using for the ping/pong? I'll look into it.
[09:35:05] <Jonno_FTW> you want a custom ping handler? I think twisted does it by itself
[09:35:19] <Jonno_FTW> https://twistedmatrix.com/documents/current/words/howto/ircclient.html
[09:35:21] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 265 seconds)
[09:35:54] *** Quits: Haxxa (~Haxxa@122.199.45.224) (Ping timeout: 260 seconds)
[09:36:33] <energizer> https://github.com/agronholm/ircproto
[09:36:59] *** Quits: _0az3 (~az0@user/az0) (Quit: afk)
[09:37:03] *** Joins: fikran (~fikran@user/fikran)
[09:37:09] *** Quits: ghost43 (~ghost43@gateway/tor-sasl/ghost43) (Ping timeout: 276 seconds)
[09:38:00] *** Joins: _0az3 (~az0@user/az0)
[09:38:06] *** Joins: ghost43 (~ghost43@gateway/tor-sasl/ghost43)
[09:38:53] *** Joins: bhrgunatha (~bhrgunath@2001-b011-8011-07bb-75d1-4d38-03de-4a6b.dynamic-ip6.hinet.net)
[09:39:48] <Disposeable-Nick> By the way, that specific version of the bot is to save my nicks and their groups from dropping on different networks I frequent - I even turned it into a .exe so I have it run headless in the background, once every couple of days using Windows Task Scheduler.  5 mins video that really helped with conversion: https://www.youtube.com/watch?v=Y0HN9tdLuJo
[09:40:24] <Jonno_FTW> I run irssi on a shell
[09:40:31] <Disposeable-Nick> I use that too, but
[09:40:31] *** Quits: bhrgunatha (~bhrgunath@2001-b011-8011-07bb-75d1-4d38-03de-4a6b.dynamic-ip6.hinet.net) (Client Quit)
[09:40:33] <Jonno_FTW> keeps everything logged on 24/7
[09:40:47] <Disposeable-Nick> It's more of a failsafe, Jonno_FTW
[09:41:00] <Jonno_FTW> I've had this running for like 12 years with no issue
[09:41:05] <Disposeable-Nick> Lol
[09:41:46] <Jonno_FTW> you can configure irssi to automatically reconnect and login and msg nickserv etc.
[09:41:48] *** Quits: decimuscorvinus (~jimmy@136.37.105.112) (Quit: Will return)
[09:41:59] <Disposeable-Nick> I'm going to get a Raspberry Pi 5 and set that up to be my 24/7 Windows 10, WSL shell
[09:42:16] <Jonno_FTW> I use a vm in the cloud
[09:42:25] <Disposeable-Nick> Then, Uninteruptable Power Supply and/or power bank etc.. for it and router
[09:42:39] <Jonno_FTW> there's free ones or you can get one of those $5/mo digitalocean ones
[09:42:56] *** Quits: Mechanismus (~LabMonkey@108-246-46-39.lightspeed.rcsntx.sbcglobal.net) (Quit: Leaving)
[09:42:57] <Jonno_FTW> then you can get into webdev and host your webapps there
[09:43:01] *** Joins: decimuscorvinus (~jimmy@136.37.105.112)
[09:43:08] <grawity> what kinda networks do you frequent that drop nicks after a day
[09:43:21] *** Joins: Haxxa (~Haxxa@122.199.45.48)
[09:44:29] <Disposeable-Nick> grawity, so in recent times, I came back to IRC after like 7 years break.  But I was manually, just barely renwing nicks on nets before the 90 days drop period, other are sooner, some dropped etc...
[09:44:50] <aphysically> jinsun: did you see I introduced a sentinel class in another PR?
[09:45:00] *** Joins: lethu (~lethu@user/lethu)
[09:45:10] <aphysically> the codebase was using an Ellipsis as a sentinel but before 3.10 Ellipsis can't be typed so it needed replaced
[09:45:19] <aphysically> https://github.com/willmcgugan/rich/pull/1607
[09:45:52] *** Quits: lethu (~lethu@user/lethu) (Client Quit)
[09:46:39] *** Quits: seednode (~seednode@user/seednode) (Quit: Nihil supernum.)
[09:46:40] <grawity> Disposeable-Nick: so you're not *on* those networks at all, but want to keep your nick registered on networks that you're not on?
[09:47:04] <Disposeable-Nick> It's complicated
[09:47:15] *** Joins: seednode (~seednode@user/seednode)
[09:47:18] <grawity> well tbh 3 months *is* a bit short for expiry, even if it's the "usual"
[09:48:46] <Disposeable-Nick> My oldest surviving nick, even though I have been around on IRC longer than that, is aprox 11 years old
[09:48:58] <Jonno_FTW> what's the point of renewing nicks if you never use them? Is there some prestige in being on a network with a nick you never actually use?
[09:49:06] <Disposeable-Nick> But it's groups under it dropped at some point or other
[09:49:09] <jinsun> aphysically: oh why can't you type ellipsis before 3.10?
[09:50:01] <aphysically> i think the logic is it's only pseudo external and not supposed to be used
[09:50:12] <aphysically> but guido changed his mind and decided there were uses so the type was readded
[09:50:24] <aphysically> as for specifically *why*, the type of an ellipsis was not accessible
[09:50:38] <Disposeable-Nick> Jonno_FTW, I do use the networks, but there were times I was too busy IRL for IRC, but I would hop on for quick things, XDCC for example, see how my channel is doing, with people in it still, lol
[09:50:45] <aphysically> https://bugs.python.org/issue41810 jinsun
[09:51:13] <grawity> if you're taking a few months break and don't want irssi/weechat, then I'd suggest using a bot that already exists (limnoria, eggdrop) -- so that it handles different networks correctly, reconnects correctly, etc
[09:51:26] <Disposeable-Nick> I use eggdrop too
[09:51:30] *** Quits: decimuscorvinus (~jimmy@136.37.105.112) (Quit: Will return)
[09:51:38] <Disposeable-Nick> But I wanted to write my own
[09:51:43] <Disposeable-Nick> Happy with the outcome
[09:52:03] *** Joins: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk)
[09:52:15] *** Joins: decimuscorvinus (~jimmy@136.37.105.112)
[09:52:35] *** Quits: whatsupdoc (~whatsupdo@148.64.20.87) (Ping timeout: 256 seconds)
[09:53:27] *** Joins: manti7 (~manti7@176.10.104.94)
[09:53:34] <Disposeable-Nick> grawity, whilst I still have you here, is there a way to stop certainthing in my while 1: lopp from repeating, whilst ping/pong always replying and other commands working etc... I.E, how would I make the nick group cycle happen just once on connection and not repeat? Someone said variables, but I I'm not sure.
[09:54:21] <jinsun> aphysically: ah okay TIL, the sentinel way is good, there is PEP 661 that will add sentinel to stdlib though not sure how much better that will make things than what you did
[09:56:00] <aphysically> jinsun: the way I did is like the normal workaround afaik, but it has the problem that something can override _DEFAULT_VAL in a subtle way that messes up its use as a singleton
[09:56:15] <Disposeable-Nick> certain things *
[09:56:42] <aphysically> although I did isinstance(sentinel) instead of 'is' the default_val in the code; probably the latter does type checking too
[09:58:11] <grawity> Disposeable-Nick: "if not already_did_this: do_stuff(); already_did_this = True"
[09:58:47] *** Joins: extropiator (~adam@user/extropiator)
[09:59:00] *** Joins: gusto (~Augustus@109.255.100.54)
[09:59:40] <grawity> Disposeable-Nick: also, "now connected" is indicated by event "001", not by a ping
[10:00:07] <themill> If you've got a "foo/py.typed" and there is also "foo/bar/something.py", do you also need "foo/bar/py.typed"?
[10:00:26] <grawity> Disposeable-Nick: pings are just additional stuff that should be replied separately from the whole identify/etc part
[10:00:52] *** Joins: pycurious (~Adium@user/pycurious)
[10:00:59] <jinsun> themill: no, just at the top level is enough
[10:01:04] <themill> thanks
[10:01:36] *** Joins: ExeciN (~ExeciN@user/nicexe)
[10:02:06] <aphysically> oh yeah, I do need the isinstance there
[10:02:11] *** Quits: Spawns_Carpeting (~Spawns_Ca@user/spawns-carpeting/x-6969421) (Ping timeout: 264 seconds)
[10:02:11] *** Quits: ihristov (~ihristov@85.187.46.226) (Remote host closed the connection)
[10:02:41] <jinsun> themill: https://www.python.org/dev/peps/pep-0561/#packaging-type-information " This marker applies recursively: if a top-level package includes it, all its sub-packages MUST support type checking as well."
[10:03:53] <aphysically> jinsun: yeah I linked the PEP in the pull request
[10:04:51] <jinsun> aphysically: which one?
[10:04:53] *** Joins: rendar (~rendar@user/rendar)
[10:04:57] <aphysically> sentinel
[10:05:05] *** Joins: rakoon (~rakoon@2001:985:f4c6:1:35a0:81e0:6892:6515)
[10:05:18] *** Quits: pycurious (~Adium@user/pycurious) (Ping timeout: 260 seconds)
[10:05:25] <jinsun> ah okay
[10:05:28] *** Joins: djapo (~archangel@user/djapo)
[10:05:41] <aphysically> speaking of PEPs I wonder how PEP 505 is doing on the mailing list since Guido said he wants the steering people to accept it
[10:05:47] <aphysically> haven't checked it recently
[10:06:30] *** Joins: yeirr (~yeirr@user/yeirr)
[10:06:36] <aphysically> looks like the thread hasn't been active, but it's the weekend so eh
[10:06:43] *** Quits: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk) (Ping timeout: 258 seconds)
[10:07:00] *** Quits: grys (~quassel@botters/gry) (Quit: .)
[10:07:20] *** Joins: grys (~quassel@botters/gry)
[10:07:25] *** Quits: Haxxa (~Haxxa@122.199.45.48) (Quit: Haxxa flies away.)
[10:07:45] *** Joins: Haxxa (~Haxxa@89nnjg0xckz9ggn6r5xm.ip6.superloop.com)
[10:08:51] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Ping timeout: 245 seconds)
[10:09:01] *** Quits: Zweimer (~Zweimer@2a02:908:d20:26e0:19cf:f76e:b6a:6783) (Ping timeout: 256 seconds)
[10:09:22] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[10:10:58] <jinsun> I'm in favor of accepting 505 too, (and 645 along with that)
[10:11:56] <jinsun> although the title of 645 reads weird, like it is asking a question :D
[10:12:49] <aphysically> oh PEP 645 is really good
[10:13:03] <aphysically> I also like the PEP for covariant/contravariant types as +/-
[10:13:37] <jinsun> is there a pep for that? I found only a github issue
[10:14:15] *** Joins: ayustae (Thunderbir@gateway/vpn/protonvpn/ayustae)
[10:15:16] *** Quits: gggp (~gggp@li870-78.members.linode.com) (Remote host closed the connection)
[10:15:20] *** Joins: rexbinary (~rexbinary@user/rexbinary)
[10:15:47] *** Joins: gggp (~gggp@li870-78.members.linode.com)
[10:15:58] <jinsun> the github issue links to a pull request which didn't find sponsors so it was closed https://github.com/python/peps/pull/2045
[10:17:12] <aphysically> there's an in progress PEP for it
[10:17:22] <aphysically> the author has a sponsor and such
[10:17:30] *** Joins: Seiryuu (~Seiryuu@ip174-103-176-143.adsl2.static.versatel.nl)
[10:17:32] <aphysically> I don't think it's been published yet
[10:19:04] *** Quits: gadfly (~gadfly@107-214-145-46.lightspeed.sntcca.sbcglobal.net) (Ping timeout: 252 seconds)
[10:19:40] *** Joins: kosh (~kosh@user/kosh)
[10:19:55] *** Joins: gitesh (uid423739@id-423739.ilkley.irccloud.com)
[10:20:06] *** Quits: sturm_ (~bsturmfel@mediagoblin/maintainer/bsturmfels) (Remote host closed the connection)
[10:20:08] *** Quits: Subsentient (~WhiteRat@universe2.us) (Remote host closed the connection)
[10:20:18] *** Quits: theo (~theo@user/theo) (Ping timeout: 265 seconds)
[10:20:44] *** Quits: rakoon (~rakoon@2001:985:f4c6:1:35a0:81e0:6892:6515) (Quit: WeeChat 2.8)
[10:20:44] *** Joins: sturm_ (~bsturmfel@mediagoblin/maintainer/bsturmfels)
[10:22:03] *** Quits: sturm_ (~bsturmfel@mediagoblin/maintainer/bsturmfels) (Remote host closed the connection)
[10:22:12] *** Joins: src (~src@user/src)
[10:23:25] *** Joins: sturm_ (~bsturmfel@mediagoblin/maintainer/bsturmfels)
[10:23:47] <aphysically> it's kinda a shame stuff like PEP 645 (if accepted) will take so long to be usable in code since you won't really be able to backport a unary operator
[10:24:21] *** Joins: winterflaw (~winterfla@gateway/tor-sasl/winterflaw)
[10:24:25] <energizer> you can always do it in quotes right?
[10:24:46] <aphysically> oh yeah I guess
[10:24:54] <energizer> er maybe that didn't make sense
[10:25:02] <aphysically> stringized you mean
[10:25:09] *** Quits: sturm_ (~bsturmfel@mediagoblin/maintainer/bsturmfels) (Remote host closed the connection)
[10:25:17] <energizer> the issue you're talking about is that earler versions mypy will complain, right?
[10:25:22] *** Joins: sturm_ (~bsturmfel@mediagoblin/maintainer/bsturmfels)
[10:25:34] <aphysically> no, that using a unary operator that's not in python will be a runtime error
[10:25:48] *** Quits: gr33n7007h (~gr33n7007@user/gr33n7007h) (Quit: WeeChat 3.3)
[10:25:52] <energizer> but + and - are unary operators in python
[10:25:55] *** Joins: Mechanismus (~LabMonkey@2602:306:cf62:e270:fde1:c7ee:1856:d707)
[10:26:09] <jinsun> yeah stringified version will work for 645 (though not if you use them for runtime like pydantic or typealias)
[10:26:15] <aphysically> PEP 645 is the ? operator
[10:26:19] <aphysically> for typing optionals
[10:26:24] <energizer> oh
[10:26:24] <aphysically> (which is not currently a unary operator)
[10:26:29] *** Quits: fartyfoam (~fartyfoam@178-118-118-2.access.telenet.be) (Ping timeout: 264 seconds)
[10:27:15] *** Quits: gusto (~Augustus@109.255.100.54) (Quit: Textual IRC Client: www.textualapp.com)
[10:27:22] <aphysically> stringified annotations are so ugly though ;^(
[10:27:44] <jinsun> that's why you have the future import
[10:28:16] *** Quits: milkt (~debian@gateway/tor-sasl/milkt) (Quit: leaving)
[10:28:52] <energizer> it wont work tho
[10:28:56] *** Joins: Vonter_ (~Vonter@user/vonter)
[10:29:03] <jinsun> so the wait will be mostly for a new version of mypy to support that
[10:29:20] <energizer> also, ? is already an "operator" in ipython
[10:29:39] <jinsun> energizer: what won't work?
[10:29:43] *** Joins: theo (~theo@user/theo)
[10:29:58] <energizer> jinsun: https://bpa.st/UZPQ
[10:30:29] <energizer> that's 3.7
[10:30:31] *** Quits: djhankb (~djhankb@208.113.164.68) (Read error: Connection reset by peer)
[10:30:55] *** Joins: sturm__ (~bsturmfel@mediagoblin/maintainer/bsturmfels)
[10:31:01] *** Joins: djhankb (~djhankb@208.113.164.68)
[10:31:03] <jinsun> ah okay yeah the parser will not like it if it is not in quotes
[10:31:10] *** Quits: PortableDave (~portabled@194-193-148-202.tpgi.com.au) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[10:31:11] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[10:31:53] <jinsun> the other typing changes were valid syntax already, just the classses didn't support those operationis
[10:32:33] *** Quits: sturm__ (~bsturmfel@mediagoblin/maintainer/bsturmfels) (Remote host closed the connection)
[10:32:51] *** Joins: sturm__ (~bsturmfel@mediagoblin/maintainer/bsturmfels)
[10:33:02] *** Quits: sturm_ (~bsturmfel@mediagoblin/maintainer/bsturmfels) (Ping timeout: 260 seconds)
[10:33:10] *** Quits: Vonter_ (~Vonter@user/vonter) (Ping timeout: 258 seconds)
[10:33:36] *** Joins: pycurious (~Adium@user/pycurious)
[10:33:41] <jinsun> and yeah ipython might have to change how it treats the ? too
[10:33:56] *** Quits: extropiator (~adam@user/extropiator) (Ping timeout: 258 seconds)
[10:34:00] *** Joins: szymon (~ugh@staticline-31-183-183-95.toya.net.pl)
[10:34:58] <energizer> ? could be made a valid identifier and then foo.? would be ok
[10:35:43] <energizer> python doesnt have any postfix operators does it
[10:35:49] *** Quits: kickingvegas (~cchoi@c-24-5-40-20.hsd1.ca.comcast.net) (Remote host closed the connection)
[10:36:56] <energizer> the secret tuple operator
[10:37:02] *** Joins: rakoon (~rakoon@2001:985:f4c6:1:248b:d0e4:9bb6:3a33)
[10:37:16] <energizer> x = 42,
[10:37:20] <grawity> if ? is a postfix operator, would ¿ be the equivalent prefix operator
[10:37:45] <hexnewbie> Would indexing with [] count as a postfix or infix operator?
[10:37:46] <energizer> good question grawity
[10:37:49] <grawity> ("we're not perl6")
[10:38:07] <hexnewbie> It's definitely a binary one, not an unary, so it does not qualify here, either way, though
[10:38:11] *** Quits: pycurious (~Adium@user/pycurious) (Ping timeout: 264 seconds)
[10:39:10] <energizer> hexnewbie: i think it's sometimes called circumfix
[10:39:31] <hexnewbie> int? looks sooo PHP, but it's terser than Optional[int], and you definitely understand what it says
[10:40:29] <grawity> I didn't know PHP has "int?", but I'd guess it means "nullable int" based on previous experience with C#
[10:40:34] <energizer> there's also postcircumfix lst[i]
[10:40:47] <grawity> while Optional[] feels slightly like a Maybe/Option type
[10:41:10] <hexnewbie> Hmm, on a second thought, it's unclear if it means Optional[int], or Preferred[int] (should a Preferred[] hint be introduced)
[10:41:16] <grawity> hmm I guess it works fine alongside Union
[10:41:43] <energizer> what does preferred mean?
[10:42:03] <hexnewbie> energizer: Function can be used with anything, but it's intended to work with int.
[10:42:23] <energizer> whoa that's wild
[10:42:39] <grawity> oh, like that?
[10:42:49] <energizer> what's the point of that?
[10:42:50] <grawity> honestly I'd write that as something like Union[int, Any] instead of "optional"
[10:43:12] <hexnewbie> Well, it's NOT a thing, I've just had cases where that would be a sane annotation
[10:43:29] <hexnewbie> grawity: Yeah, Optional[x] is more like x | Literal[None]
[10:44:07] <grawity> right, "optional" sounds extremely like "x or None" to me, not "x or some other type but preferrably x"
[10:44:58] <hexnewbie> I was saying that int? is unclear as a syntax. Do you mean that the value is optional, or the type is optional or you're not sure about it?
[10:45:02] *** Joins: Huitzilopochtli (~ronnie@45.64.220.161)
[10:45:48] <jinsun> hexnewbie: it is literally equal to x | None in 3.10,  Optional[int] == int | None
[10:45:49] <hexnewbie> It says ‘maybe int’ to me, which, um, does it mean you might accept a float? Can I haggle to pass you a complex?
[10:46:20] <energizer> that's a funny interpretation
[10:46:22] <grawity> but it's the same with Optional[int], like is the value optional or is the whole 'int' type annotation optional?
[10:47:07] <hexnewbie> True, but at least the correct interpretation seems to be the more reasonable one, especially if you're comparing it to other type hints
[10:47:44] *** Joins: palasso (~palasso@user/palasso)
[10:48:01] <grawity> in either case, disambiguate based on expectations that strict nullable types are fairly common in other languages, whereas "preferrably int" is something that almost defeats the point of type annotations, like what's a checker going to do about it?
[10:48:55] *** Joins: ice9 (~ice9@user/ice9)
[10:49:08] *** Quits: jwhisnant_ (~jwhisnant@user/jwhisnant) (Quit: Free ZNC ~ Powered by LunarBNC: https://LunarBNC.net)
[10:49:18] *** Quits: szymon (~ugh@staticline-31-183-183-95.toya.net.pl) (Remote host closed the connection)
[10:49:21] *** Joins: jwhisnant (~jwhisnant@user/jwhisnant)
[10:49:24] <hexnewbie> Yeah, but it makes sense in Python, I'd say. It simply turns off the type checker (different types are not an error), while still telling the one reading the code (or help(f)) what on Earth they need to pass.
[10:49:27] <jinsun> the only thing Union[int, Any] instead of int will allow is doing isinstance(x, int)
[10:49:37] <jinsun> pyright doesn't allow that if you annotate int
[10:49:42] *** Joins: szymon (~ugh@staticline-31-183-183-95.toya.net.pl)
[10:49:49] *** Joins: Vonter_ (~Vonter@user/vonter)
[10:49:50] *** Joins: gusto (~Augustus@109.255.100.54)
[10:49:58] <grawity> hexnewbie: that's what __doc__ is for
[10:50:01] *** Joins: fweht (uid404746@id-404746.lymington.irccloud.com)
[10:50:05] *** Joins: HaMsTeRs (~Thunderbi@14-0-229-133.static.pccw-hkt.com)
[10:50:59] <hexnewbie> The doc is for the complete explanation, the signature (with annotations) is for the synopsis.
[10:52:20] *** Joins: cation21 (cation@user/cation)
[10:52:21] *** Joins: pycurious (~Adium@user/pycurious)
[10:52:51] *** Joins: mrwick (~mrwick@user/mrwick)
[10:53:48] *** Quits: cation (cation@user/cation) (Ping timeout: 265 seconds)
[10:54:15] *** Quits: Vonter_ (~Vonter@user/vonter) (Ping timeout: 258 seconds)
[10:55:29] <hexnewbie> Or even if it is stupid as a permanent signature, it could be used to still qualify the type while the function still accepts something else as well -- either deprecated behaviour, or because you're still working to make all your file objects be accepted as such by your type checker.
[10:55:37] *** cation21 is now known as cation
[10:55:56] *** Joins: KombuchaKip (~kip@192.252.230.5)
[10:55:59] *** Joins: HaMmY1 (~Thunderbi@14-0-229-133.static.pccw-hkt.com)
[10:55:59] *** Quits: HaMmY1 (~Thunderbi@14-0-229-133.static.pccw-hkt.com) (Client Quit)
[10:56:02] <hexnewbie> 90% of the time for me it's my file wrappers are the things that fail the type check.
[10:56:54] *** Joins: Ilyu (~quassel@78.202.228.230)
[10:56:57] *** Quits: HaMsTeRs (~Thunderbi@14-0-229-133.static.pccw-hkt.com) (Read error: Connection reset by peer)
[10:57:13] <aphysically> jinsun: I think it only warns that in strict mode tbf
[10:58:19] *** Quits: szymon (~ugh@staticline-31-183-183-95.toya.net.pl) (Quit: szymon)
[10:58:27] <jinsun> ah I always have strict mode on so I forget what basic mode does
[10:58:58] *** Quits: djapo (~archangel@user/djapo) (Ping timeout: 260 seconds)
[11:00:27] *** Joins: Vonter_ (~Vonter@user/vonter)
[11:00:52] <hexnewbie> Is there a way to specify that your *object* should be recognized as one of another type by the type checkers? The inverse of abc.ABCMeta? Say, CharCountingFileProxy having a file object in its __wrapped__ attribute, and getting accepted by something that has io.TextIOWrapper as annotation?
[11:01:56] *** Joins: PortableDave (~portabled@194-193-148-202.tpgi.com.au)
[11:02:27] *** Quits: PortableDave (~portabled@194-193-148-202.tpgi.com.au) (Client Quit)
[11:02:37] <jinsun> I think I saw someone use a decorator for that, have to find it
[11:02:43] <hexnewbie> (That's literally how I implement my progress bars, LOL)
[11:03:15] *** Joins: cvmn (~caveman@gateway/tor-sasl/caveman)
[11:04:41] *** Quits: src (~src@user/src) (Quit: Leaving)
[11:04:59] *** Quits: Vonter_ (~Vonter@user/vonter) (Ping timeout: 258 seconds)
[11:06:03] <aphysically> jinsun: man I still feel like there should be some workaround to allow a namedtuple property setter to accept a tuple but I just don't see one
[11:06:10] *** Parts: thurstylark (thurstylar@user/thurstylark) (WeeChat 3.2.1)
[11:06:22] <jinsun> hexnewbie: I was thnking about this https://github.com/python/typing/issues/769#issuecomment-903760354
[11:06:25] *** Joins: vladoski (~vladoski@2001:b07:add:d406:63fc:899a:25f0:b2bc)
[11:06:25] <aphysically> tuples just aren't really compatible with namedtuples here
[11:07:03] *** Quits: Haxxa (~Haxxa@89nnjg0xckz9ggn6r5xm.ip6.superloop.com) (Quit: Haxxa flies away.)
[11:07:08] <rendar> how can i say to `print()` to send lines into stderr instead of stdin?
[11:07:26] *** Quits: dre (~dre@120.156.30.159) (Remote host closed the connection)
[11:07:32] *** Joins: Haxxa (~Haxxa@122.199.45.48)
[11:08:02] <jinsun> print(..., file=sys.stderr)?
[11:08:26] *** Quits: pycurious (~Adium@user/pycurious) (Ping timeout: 258 seconds)
[11:08:27] <hexnewbie> jinsun: Ah, that's neat. It does expose my poor understanding of the type hinting system, though.
[11:08:43] *** dcaro_away is now known as dcaro
[11:08:45] <rendar> jinsun, ok
[11:10:39] *** Joins: swensson (~swensson@213.88.131.10)
[11:11:25] *** Quits: Haxxa (~Haxxa@122.199.45.48) (Remote host closed the connection)
[11:11:47] *** Joins: Haxxa (~Haxxa@89nnjg0xckz9ggn6r5xm.ip6.superloop.com)
[11:11:54] *** Joins: iomari891 (~iomari891@105.112.138.38)
[11:12:21] *** Quits: Huitzilopochtli (~ronnie@45.64.220.161) (Quit: WeeChat 3.3)
[11:12:39] *** Quits: vladoski (~vladoski@2001:b07:add:d406:63fc:899a:25f0:b2bc) (Remote host closed the connection)
[11:14:01] <jinsun> aphysically: well the logic for reportPropertyTypeMismatch given here makes sense to me https://github.com/microsoft/pylance-release/blob/main/DIAGNOSTIC_SEVERITY_RULES.md#diagnostic-severity-rules
[11:14:04] *** Joins: vladoski (~vladoski@2001:b07:add:d406:886:f908:e49c:23de)
[11:14:16] *** Joins: chele (~chele@user/chele)
[11:14:39] <jinsun> if it won't work for normal attibutes it shouldn't work for property as well
[11:15:03] <aphysically> mmm that's not actually how it works
[11:15:11] <aphysically> I think
[11:15:20] <jinsun> if you wanted property to behave differently than normal variables then maybe you wanted methods
[11:15:45] <aphysically> pyright actually blocks you form overriding an attribute with a property in a subclass e.g.
[11:16:01] <aphysically> (even if you implement a correct getter/setter/deleter)
[11:16:03] <Disposeable-Nick> Hi, so, I solved an issue I just had where I got errors about string (str) and errors about bytes etc... using this: irc.send('PRIVMSG '+ channel + ' :' + str(msg) + '\r\n').encode('utf8') | but when I used this: irc.send(('PRIVMSG '+ channel + ' :' + (msg) + '\r\n').encode()) | it works, but I want to know why it works, it's like becuase I'm not specifying str or bytes nor encoding type, it's like it wildcards and chooses the correct one
[11:16:04] <Disposeable-Nick> for me?
[11:16:22] <aphysically> jinsun: yeah I mean I have nothing against the lint
[11:16:37] <aphysically> I"m just trying to fix rich codebase
[11:17:42] <grawity> Disposeable-Nick: in the first case, you're calling .encode() on the *result of send()*, not on its parameter
[11:17:55] <jinsun> oh haven't tried changing attribute to property in a subclass, I thought that would work
[11:18:08] *** Joins: arseru (uid515527@user/arseru)
[11:18:27] <Disposeable-Nick> grawity, this failed too: irc.send('PRIVMSG '+ channel + ' :' + str(msg) + '\r\n')
[11:18:48] <Disposeable-Nick> But the second one above worked.  I just want to know why
[11:18:52] *** Quits: millido (~millido@84.210.150.128) (Quit: ZNC 1.8.2 - https://znc.in)
[11:19:12] <grawity> because in the second one you're sending bytes, which is what you get from .encode()
[11:19:14] <hexnewbie> Disposeable-Nick: The omitted encoding has nothing to do with the change of behaviour. You've got the parens wrong in your first piece of code, so you're calling .encode() on the result of irc.send()
[11:19:20] <grawity> in the first one it's a string
[11:20:19] <aphysically> jinsun: nope pyright specifically blocks it, and mypy unintentinoally blocks it as a bug I think
[11:20:38] *** Quits: sturm__ (~bsturmfel@mediagoblin/maintainer/bsturmfels) (Remote host closed the connection)
[11:20:50] *** Joins: sturm__ (~bsturmfel@mediagoblin/maintainer/bsturmfels)
[11:21:24] <aphysically> eric explained it something like: most people don't set deleters so they're not equivalent
[11:21:33] <aphysically> iirc
[11:22:08] *** Joins: Pickchea (~private@user/pickchea)
[11:22:25] <hexnewbie> Then again, most people who use an attribute in a class don't intend that to be ever deleted.
[11:23:18] *** Joins: ilmais1n (~il@irc.oh1cgn.fi)
[11:23:24] <jinsun> aphysically: yeah doesn't work, do you have the github discussion where he says it is intentional
[11:23:44] *** Joins: millido (~millido@84.210.150.128)
[11:24:00] <aphysically> no, and I"m heaidng off for the night, but, I remember where it was with enough info you can (probably) find it:
[11:24:17] <aphysically> he explained it a github issue of a mypy bug where it doesn't work
[11:24:27] <aphysically> github issue on mypy
[11:24:43] <aphysically> night :)
[11:25:29] <aphysically> oh, and I think I found it because someone opened a PR that would close it
[11:25:34] <aphysically> (the mypy issue)
[11:27:17] *** Quits: sturm__ (~bsturmfel@mediagoblin/maintainer/bsturmfels) (Ping timeout: 260 seconds)
[11:27:53] *** Joins: FastJack (~fastjack@b2b-78-94-22-14.unitymedia.biz)
[11:27:56] *** Joins: shad (~shad@user/shad)
[11:28:01] <jinsun> this one? https://github.com/python/mypy/issues/4125#issuecomment-870112343
[11:29:23] *** Quits: ilmais1n (~il@irc.oh1cgn.fi) (Remote host closed the connection)
[11:29:37] <aphysically> ah yeah you found it already before I headed in
[11:29:39] <jinsun> I guess we can annoy him again for his contradicting statements now :D
[11:30:32] <aphysically> fwiw it's a bit weird monkey patching a class with a new attribute is a type error but deleting an attribute isn't
[11:30:32] *** Quits: djhankb (~djhankb@208.113.164.68) (Remote host closed the connection)
[11:31:03] *** Joins: djhankb (~djhankb@208.113.164.68)
[11:31:45] <jinsun> yes I thought that should be a type error without trying it
[11:31:47] *** Joins: jwhisnant_ (~jwhisnant@user/jwhisnant)
[11:32:39] *** Joins: AquaL1te (~AquaL1te@user/aqual1te)
[11:32:50] *** Joins: alex_ (~alex11@user/alex11)
[11:32:53] <aphysically> yeah the reasoning does seem a bit contradictory
[11:33:02] *** Joins: ouzel8___ (~ouzel8_@shams.boastblast.com)
[11:33:03] *** Joins: darkstarx (~darkstard@2601:1c2:300:c8a0::6c32)
[11:33:18] *** Quits: alex11 (~alex11@user/alex11) (Read error: Connection reset by peer)
[11:33:18] *** Quits: darkstardevx (~darkstard@2601:1c2:300:c8a0::6c32) (Remote host closed the connection)
[11:33:19] *** Quits: ouzel8_ (~ouzel8_@shams.boastblast.com) (Read error: Connection reset by peer)
[11:33:23] <aphysically> but I'm not particularly invested in it so eh
[11:33:26] *** Quits: jarthur (~jarthur@2603-8080-1540-002d-30a8-e30e-54bb-4206.res6.spectrum.com) (Ping timeout: 245 seconds)
[11:33:26] *** Quits: PocketKiller (PacKetIV@user/packetiv) (Ping timeout: 245 seconds)
[11:33:26] *** Quits: mikebald_ (~mikebald@159.203.185.106) (Ping timeout: 245 seconds)
[11:33:26] *** Quits: LyndsySimon (sid34452@lymington.irccloud.com) (Ping timeout: 245 seconds)
[11:33:26] *** Quits: DPA (~DPA@2a05:41c0:4:604::a3c:10d) (Ping timeout: 245 seconds)
[11:33:26] *** Quits: joel135 (sid136450@hampstead.irccloud.com) (Ping timeout: 245 seconds)
[11:33:26] *** Quits: coldmountain (sid484352@helmsley.irccloud.com) (Ping timeout: 245 seconds)
[11:33:26] *** Quits: pierrepaul (sid504261@uxbridge.irccloud.com) (Ping timeout: 245 seconds)
[11:33:26] *** Quits: Tiago_Paolini (sid172748@hampstead.irccloud.com) (Ping timeout: 245 seconds)
[11:33:26] *** Quits: KnownSyntax (sid233169@user/knownsyntax) (Ping timeout: 245 seconds)
[11:33:27] <aphysically> anyway, night
[11:33:49] *** Joins: coldmountain (sid484352@id-484352.helmsley.irccloud.com)
[11:33:50] *** Joins: joel135 (sid136450@id-136450.hampstead.irccloud.com)
[11:33:50] *** Joins: LyndsySimon (sid34452@id-34452.lymington.irccloud.com)
[11:33:51] *** Quits: nocko (sid501219@user/nocko) (Ping timeout: 245 seconds)
[11:33:51] *** Quits: r0bby (r0bby@user/r0bby) (Ping timeout: 245 seconds)
[11:33:52] *** Joins: Tiago_Paolini (sid172748@id-172748.hampstead.irccloud.com)
[11:33:52] *** Joins: pierrepaul (sid504261@id-504261.uxbridge.irccloud.com)
[11:33:57] *** Joins: KnownSyntax (sid233169@user/knownsyntax)
[11:34:16] *** Joins: azidhaka (~azidhaka@user/azidhaka)
[11:34:18] *** Joins: nocko (sid501219@user/nocko)
[11:34:25] *** Joins: PocketKiller (PacKetIV@user/packetiv)
[11:34:30] *** Joins: r0bby (r0bby@user/r0bby)
[11:34:40] *** Joins: mikebald (~mikebald@159.203.185.106)
[11:35:06] *** Quits: jwhisnant (~jwhisnant@user/jwhisnant) (Ping timeout: 245 seconds)
[11:35:20] *** Joins: DPA (~DPA@2a05:41c0:4:604::a3c:10d)
[11:35:31] *** Quits: Fozzworth (~Fozzworth@user/fozzworth) (Ping timeout: 245 seconds)
[11:35:43] *** Joins: jarthur_ (~jarthur@2603-8080-1540-002d-cc13-c0cf-bf23-08c5.res6.spectrum.com)
[11:35:47] *** Quits: ttree (~ttree0@c-73-239-62-159.hsd1.wa.comcast.net) (Ping timeout: 264 seconds)
[11:35:50] *** Joins: hendursa1 (~weechat@user/hendursaga)
[11:36:33] <azidhaka> Hi everyone, need an idea. I want to encrypt/decrypt a string in a way that is bound to the machine it is generated on, e.g. when copied to another computer it won't decrypt.
[11:37:51] *** Joins: brelod (~me@90.244.150.142)
[11:37:53] *** Joins: Zweimer (~Zweimer@2a02:908:d20:26e0:3c3f:7182:f9c0:2044)
[11:37:58] *** Quits: iomari891 (~iomari891@105.112.138.38) (Quit: WeeChat 3.3)
[11:38:13] <hexnewbie> azidhaka: Just store the string securely on that machine - or just the encryption key?
[11:39:07] <deniska> You'll need to use something like TPM
[11:39:21] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 276 seconds)
[11:39:35] *** Quits: Zweimer (~Zweimer@2a02:908:d20:26e0:3c3f:7182:f9c0:2044) (Client Quit)
[11:40:17] <azidhaka> deniska: i thought about that, but not every machine has TPM
[11:40:40] *** Joins: pycurious (~Adium@user/pycurious)
[11:40:58] <grawity> use the OS-provided secure storage
[11:41:12] <grawity> like Windows has DPAPI to encrypt data with a user-specific key
[11:41:31] <deniska> azidhaka: anything not intrusive as that will be less secure, at least as far as "tied to the machine" part goes
[11:41:35] <grawity> Linux has libsecret to store passwords (that are still stored encrypted with the user's login password)
[11:41:37] <azidhaka> grawity: i can use that on windows, but the program i want to pass the decrypted string runs on linux
[11:42:00] <grawity> but you're passing it the decrypted string anyway
[11:42:01] <azidhaka> grawity: it's xfreerdp, which only supports command line passing of pasword
[11:42:33] <energizer> ssh host keys are tied to a machine
[11:42:37] <grawity> they're not
[11:42:51] <energizer> ?
[11:43:10] <energizer> i mean sure you can move them, but like, dont
[11:43:24] <hexnewbie> azidhaka: So you *are* looking for password storage? There are modules for that, e.g. https://pypi.org/project/keyring/ (have not used it, I think I accessed kwallet directly)
[11:43:25] <grawity> the hypothetical attacker isn't going to care about "but like, don't"
[11:43:31] <grawity> if they can move the key, they will move the key
[11:43:53] <grawity> azidhaka: what are you trying to do in general? store a password for xfreerdp on Linux?
[11:43:53] <energizer> if they can access the key, they have the key. what's the threat model here?
[11:44:02] <azidhaka> hexnewbie: that's an indea
[11:44:28] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 258 seconds)
[11:44:52] <grawity> energizer: doesn't necessarily mean they can copy the key, e.g. if it were actually an SSH key, with the TPM suggestion it would indeed become tied to a machine
[11:45:10] *** Quits: pycurious (~Adium@user/pycurious) (Ping timeout: 260 seconds)
[11:45:29] <azidhaka> grawity: yes, store it somehow that when the program is copied to another computer the password won't be decrypted
[11:46:11] <azidhaka> windows credential manager does this somehow
[11:46:24] *** Joins: fikran (~fikran@user/fikran)
[11:46:48] <grawity> for "generic" credentials, windows credential manager is no different from libsecret or python-keyring, it lets any app read any credential
[11:47:18] <azidhaka> grawity: but for "domain" credentials is different
[11:47:29] <azidhaka> as far as i know
[11:47:50] <grawity> for "domain" credentials, windows credential manager achieves security by not allowing any app read the credentials *at all* – the RDP or SMB clients ask LSASS to perform the necessary NTLM or Kerberos calculations and return the result
[11:47:53] *** Quits: xaltsc (~xaltsc@user/xaltsc) (Ping timeout: 246 seconds)
[11:47:55] *** Quits: vladoski (~vladoski@2001:b07:add:d406:886:f908:e49c:23de) (Ping timeout: 258 seconds)
[11:48:03] <grawity> a bit like ssh-agent
[11:48:57] *** Joins: masta`` (~oyster@user/masta/x-2645138)
[11:49:14] <grawity> though I'm not sure how that works with CredSSP, which literally involves the client sending the server the password
[11:49:17] *** Joins: PortableDave (~portabled@194-193-148-202.tpgi.com.au)
[11:49:26] <grawity> maybe it's still LSASS which encrypts it as part of CredSSP handling?
[11:49:52] *** Quits: PortableDave (~portabled@194-193-148-202.tpgi.com.au) (Client Quit)
[11:50:01] *** Quits: Disposeable-Nick (~Ident@user/disposeable-nick) (Quit: Leaving)
[11:50:03] <grawity> anyway, while possible in theory, this would need new software *and* xfreerdp cooperation
[11:50:03] <azidhaka> grawity: my solution at the moment is pretty terrible, the username and password strings are received from REST API, with fernet encoding and decrypted locally
[11:50:50] <azidhaka> grawity: the fernet key is in the compiled pyinstaller binary, which is terrible security, but the best i could think of
[11:50:55] *** Joins: fartyfoam (~fartyfoam@178-118-118-2.access.telenet.be)
[11:51:05] *** Quits: jeho (~jehoshaph@user/jehoshaphat) (Ping timeout: 260 seconds)
[11:51:14] <grawity> it's also a bit useless as someone interested can just replace xfreerdp with a version that logs the credentials
[11:51:41] <grawity> is this basically a special RDP launcher where the user isn't supposed to ever know "raw" credentials, they only get some specific access?
[11:51:52] <azidhaka> grawity: the path to xfreerdp is hardcoded and the don't have write permission to its location
[11:52:19] <grawity> but they have strace and they have LD_PRELOAD and so on
[11:52:40] <azidhaka> grawity: yes, exactly, an RDP launched where the username/password combo should be secured somehow
[11:53:11] <deniska> azidhaka: I'd look into some way of having single use credentials
[11:53:39] *** Quits: cvmn (~caveman@gateway/tor-sasl/caveman) (Ping timeout: 276 seconds)
[11:53:56] <azidhaka> deniska: single use on the windows server i guess?
[11:53:57] <deniska> azidhaka: or just don't run rdp client off a machine an attacker has access to, see apache guacamole
[11:54:09] <grawity> hmm maybe make the server initiate the connection with +print-reconnect-cookie, then run the client with that cookie as if it was just reestablishing the connection
[11:54:14] *** Joins: y1n (~y1n@178.115.66.247.wireless.dyn.drei.com)
[11:54:17] <azidhaka> deniska: guacamole cannot map the printers
[11:54:21] <grawity> or issue a new password every time
[11:54:31] <grawity> or, honestly, why is this an issue? are multiple users sharing an account?
[11:56:16] <grawity> note that xfreerdp does take the password from stdin if you don't want it to be visible in `ps ax`
[11:56:51] <azidhaka> grawity: we just want to secure the RDP "kiosks" we are preparing. The credentials should not be accessible to the employees
[11:57:13] <azidhaka> grawity: /from-stdin really messes with the certificate prompts
[11:57:39] <grawity> have the API return the cert fingerprint, pass it via /cert:fingerprint:<foo>
[11:57:52] <grawity> you don't want a kiosk to prompt about certificates in the first place
[11:58:09] <grawity> (appears that /cert:fingerprint: is a fairly new addition though)
[11:58:39] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 258 seconds)
[11:58:45] <grawity> actually, *do* the machines have a TPM or something similar?
[11:59:31] <azidhaka> grawity: right, thats an idea. I still need to pass the password to stdin and keep it secured somehow on the local machine
[11:59:32] *** Joins: jeho (~jehoshaph@user/jehoshaphat)
[11:59:47] *** Quits: gitly (~gitly@148.252.132.214) (Ping timeout: 264 seconds)
[11:59:59] <deniska> What are the consequences of someone knowing the password?
[12:00:01] <azidhaka> grawity: they are assorted computers and i can't guarantee TPM will be resent
[12:00:39] <grawity> then you really can't guarantee much if the credentials are long-term
[12:01:07] <azidhaka> grawity: yes, they are long-term
[12:01:24] <grawity> can you do something like, have an individual RDP account for each kiosk, then have the API reset the password to something new every time it's asked?
[12:01:24] *** Joins: gitly (~gitly@148.252.128.182)
[12:02:01] <grawity> or are the accounts per-user somehow?
[12:02:06] *** Quits: AquaL1te (~AquaL1te@user/aqual1te) (Ping timeout: 258 seconds)
[12:02:11] <azidhaka> grawity: they are per-machine
[12:02:28] *** Quits: odinsbane (~mbs@pat-pool-138.crick.ac.uk) (Remote host closed the connection)
[12:02:36] *** Joins: mat001 (~mat001@213.143.69.121)
[12:03:25] <azidhaka> deniska: no planet-changing consequences of course, but still i want to secure the system as best as possible
[12:03:55] *** Joins: AquaL1te (~AquaL1te@user/aqual1te)
[12:04:08] <grawity> then just keep them short-lived, as long as the kiosk works (keeps reconnecting and getting new passwords) it'll prevent the same credentials from being stashed somewhere long-term "for future use"
[12:04:11] <deniska> azidhaka: they will be able to access a computer which you already allow them to access…
[12:04:40] <azidhaka> grawity: that seems to be the best idea so far
[12:07:07] <azidhaka> deniska: ... but from another, not controlled by us computer
[12:07:27] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Quit: elastic_dog)
[12:08:11] <deniska> azidhaka: besides credential access, what other parts do you control on the kiosk side?
[12:08:32] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[12:09:21] <azidhaka> deniska: you are thinking of limiting the ways to export the credentials?
[12:09:37] *** Joins: PJBoy (~PJBoy@user/pjboy)
[12:09:41] <deniska> azidhaka: as I said, I'd look into making them single use
[12:09:51] *** Joins: einhorn (~einhorn@user/einhorn)
[12:10:23] <azidhaka> that seems to be the consensus, thank you deniska and grawity
[12:12:01] *** Joins: vladoski (~vladoski@2001:b07:add:d406:e345:4e9f:5bda:dc73)
[12:12:17] *** Joins: plastico (~plastico@neomutt/plastico)
[12:15:44] *** Joins: arinov (~arinov@213.194.126.155)
[12:16:22] *** amo is now known as amogorkon
[12:21:23] *** Quits: mtg (~mtg@209.250.241.226) (Remote host closed the connection)
[12:21:29] *** Joins: han-solo (~hanish@user/han-solo)
[12:22:33] *** Joins: iomari891 (~iomari891@105.112.138.38)
[12:22:44] *** Joins: mozgalom (~mozgalom@IPnet-gw.157.157.97.111.simnet.is)
[12:23:47] *** Quits: Pickchea (~private@user/pickchea) (Ping timeout: 264 seconds)
[12:26:13] *** Quits: Haxxa (~Haxxa@89nnjg0xckz9ggn6r5xm.ip6.superloop.com) (Quit: Haxxa flies away.)
[12:26:32] *** Joins: Haxxa (~Haxxa@89nnjg0xckz9ggn6r5xm.ip6.superloop.com)
[12:28:30] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[12:28:50] *** Joins: pycurious (~Adium@user/pycurious)
[12:30:53] *** Joins: DesolateHypertex (~DesolateH@static.213-133-103-49.clients.your-server.de)
[12:30:54] *** Quits: djhankb (~djhankb@208.113.164.68) (Read error: Connection reset by peer)
[12:31:27] *** Joins: djhankb (~djhankb@208.113.164.68)
[12:32:02] *** Joins: blindguard (~blindguar@2a02:908:1864:c200::2612)
[12:33:26] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 245 seconds)
[12:33:32] *** Quits: pycurious (~Adium@user/pycurious) (Ping timeout: 258 seconds)
[12:33:45] *** Joins: Zweimer (~Zweimer@2a02:908:d20:26e0:3c3f:7182:f9c0:2044)
[12:34:25] *** Joins: e2m4n (~ezman@user/e2m4n)
[12:35:51] *** Quits: Haxxa (~Haxxa@89nnjg0xckz9ggn6r5xm.ip6.superloop.com) (Quit: Haxxa flies away.)
[12:36:25] *** Joins: curious_user (~curious_u@178.65.6.84.rev.sfr.net)
[12:36:28] <curious_user> test
[12:36:37] *** Joins: Haxxa (~Haxxa@89nnjg0xckz9ggn6r5xm.ip6.superloop.com)
[12:36:44] <curious_user> Hey, i need help with threadings,
[12:36:53] <curious_user> if i show you the code, could you help ?
[12:37:52] <Zweimer> No, sorry. I just had a question about QThreads too :(
[12:39:26] <curious_user> https://pastebin.com/Q5nP7Nf7
[12:39:28] <infobob> https://bpaste.net/6YIQ (repasted for curious_user)
[12:39:37] *** Joins: Madda (~Madda@216.51.198.146.dyn.plus.net)
[12:41:39] *** Quits: iomari891 (~iomari891@105.112.138.38) (Quit: WeeChat 3.3)
[12:41:50] *** Joins: PortableDave (~portabled@194-193-148-202.tpgi.com.au)
[12:42:10] <hexnewbie> curious_user: If your question is about the performance, the threaded version will not run faster than the sequential version, because you're working with Python objects and they hold the GIL
[12:42:27] <curious_user> GIL ?
[12:43:03] <hexnewbie> curious_user: https://wiki.python.org/moin/GlobalInterpreterLock
[12:43:39] <curious_user> how can i speed up the code ?
[12:44:59] *** Joins: masta_ (~oyster@user/masta/x-2645138)
[12:45:48] *** Quits: masta`` (~oyster@user/masta/x-2645138) (Ping timeout: 258 seconds)
[12:45:55] *** masta_ is now known as masta``
[12:46:32] *** Joins: mtg (~mtg@209.250.241.226)
[12:49:31] *** Joins: drogas (~drogas@jump2.jet.uk)
[12:50:25] *** Joins: dambuster (~dambuster@185.193.170.225)
[12:50:43] *** Joins: Khepra (~ratrace@user/ratrace)
[12:50:49] *** Joins: masta_ (~oyster@user/masta/x-2645138)
[12:51:56] *** Quits: vladoski (~vladoski@2001:b07:add:d406:e345:4e9f:5bda:dc73) (Ping timeout: 258 seconds)
[12:52:43] <Khepra> Hello. I have an flask application (python 3.7 currently) running under uwsgi app server. I'm trying to measure maximum RAM usage for a given process, by logging resource.getrusage(resource.RUSAGE_SELF).ru_maxrss in an after_request handler.
[12:52:53] *** Quits: uuair (~quassel@user/uuair) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[12:52:54] *** Quits: very_sneaky (~very_snea@user/very-sneaky/x-7432109) (Quit: very_sneaky)
[12:53:12] <Khepra> But, I was under the impression that Python never released memory back to the OS (wasn't that the case in the past?), so tracking max of ru_maxrss measured will give me what I want.
[12:53:13] *** Joins: uuair (~quassel@user/uuair)
[12:53:40] *** Quits: masta`` (~oyster@user/masta/x-2645138) (Ping timeout: 265 seconds)
[12:53:46] *** masta_ is now known as masta``
[12:54:00] <Khepra> however, from what I see, primarily from measuring the application's cgroup memory controller, apparently that's not the case, and python does release memory back, so now I'm wondering if my metric is accurate. what if there's peaks, garbage collected before the after_request logs it
[12:54:36] *** Quits: eyepeetee (~aa@user/eyepeetee) (Remote host closed the connection)
[12:54:37] <Khepra> so my question is: is this accurate, or is there another way to measure peak memory usage in a (uwsgi served) python process=
[12:58:36] *** Quits: ravan (~ravan@user/ravan) (Remote host closed the connection)
[12:59:35] *** Quits: PortableDave (~portabled@194-193-148-202.tpgi.com.au) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[13:02:49] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[13:03:13] *** Joins: vladoski (~vladoski@2001:b07:add:d406:aa66:9dae:fc42:f2e)
[13:03:31] *** Joins: pycurious (~Adium@user/pycurious)
[13:05:32] *** Joins: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk)
[13:06:19] *** Joins: very_sneaky (~very_snea@user/very-sneaky/x-7432109)
[13:06:41] *** Quits: alex_ (~alex11@user/alex11) (Quit: Leaving)
[13:07:43] *** Quits: Haxxa (~Haxxa@89nnjg0xckz9ggn6r5xm.ip6.superloop.com) (Quit: Haxxa flies away.)
[13:07:50] *** Joins: ksynwa (~ksynwa@5.45.111.57)
[13:08:01] *** Quits: pycurious (~Adium@user/pycurious) (Ping timeout: 245 seconds)
[13:08:22] <ksynwa> Anyone knows what's the equivalent of requests.get's params kwarg in curl?
[13:08:44] <ksynwa> Oh wait it's a URL parameter
[13:08:47] <ksynwa> My bad
[13:09:02] *** Joins: Haxxa (~Haxxa@89nnjg0xckz9ggn6r5xm.ip6.superloop.com)
[13:09:54] <nedbat> curious_user: this is the right channel for the question
[13:10:06] *** Quits: Harlin (~DonQixote@c-24-128-8-53.hsd1.co.comcast.net) (Ping timeout: 265 seconds)
[13:11:15] *** Joins: clarkk (~clarkk@host31-53-69-254.range31-53.btcentralplus.com)
[13:12:03] *** Quits: curious_user (~curious_u@178.65.6.84.rev.sfr.net) (Ping timeout: 256 seconds)
[13:15:45] *** Joins: greknod28 (~grek@120.88.171.98)
[13:17:21] *** Quits: Haxxa (~Haxxa@89nnjg0xckz9ggn6r5xm.ip6.superloop.com) (Read error: Connection reset by peer)
[13:17:31] *** Joins: Hazza (~Haxxa@89nnjg0xckz9ggn6r5xm.ip6.superloop.com)
[13:20:52] <rendar> stdin is a pipe to a process, can i use it for large loads of data? or do i need to instance a pipe manually to set larger buffer or something?
[13:21:19] <Wulf> Khepra: yes, cpython does release memory.
[13:21:22] *** Quits: Hazza (~Haxxa@89nnjg0xckz9ggn6r5xm.ip6.superloop.com) (Remote host closed the connection)
[13:21:41] *** Joins: Haxxa (~Haxxa@89nnjg0xckz9ggn6r5xm.ip6.superloop.com)
[13:23:33] <hexnewbie> rendar: subprocess.Popen() takes bufsize and asyncio.create_subprocess_exec() takes limit to hint at what buffer might be good for your data, though I don't think you need to touch it
[13:23:33] <Wulf> Khepra: when I run /usr/bin/time -v python3  it shows e.g. "Maximum resident set size (kbytes): 1961868", so there is a way to track memory usage.
[13:23:49] *** Joins: stormdancer (~stormdanc@185.245.86.122)
[13:23:52] <rendar> ok
[13:23:56] *** Joins: slav0nic (slav0nic@python.su)
[13:25:03] <qwedfg> sorry for a noob question, I am helping a novice friend to go thru job interview which is for junior python
[13:25:22] <qwedfg> we already did plenty of stuff, but since I am myself more like procedural in python
[13:25:28] *** Quits: Haxxa (~Haxxa@89nnjg0xckz9ggn6r5xm.ip6.superloop.com) (Remote host closed the connection)
[13:25:40] <qwedfg> what would be the best way to make a class to read an excel file
[13:25:51] *** Joins: Haxxa (~Haxxa@89nnjg0xckz9ggn6r5xm.ip6.superloop.com)
[13:25:56] <qwedfg> so I did class and made two functions to read xls and xlsx and now I think
[13:25:58] <Wulf> Khepra: it appears that resource.getrusage(resource.RUSAGE_SELF).ru_maxrss is the correct value
[13:26:23] <qwedfg> I'll do try on each pandas.read_excel and except and how I am supposed to handle that error
[13:26:53] <qwedfg> I though I would clear self.data before reading and in case of exception, fill self.message for web interface
[13:27:20] <qwedfg> and self.data would be None to check whenever file has been read
[13:27:27] <qwedfg> does it make sense in python?
[13:28:37] *** Joins: lucad111 (~lucad111@51-148-40-1.dsl.zen.co.uk)
[13:29:38] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[13:29:43] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Client Quit)
[13:30:39] *** Joins: lsrtl__ (~lsrtl@user/lsrtl)
[13:30:53] *** Joins: pycurious (~Adium@user/pycurious)
[13:30:55] *** Quits: djhankb (~djhankb@208.113.164.68) (Read error: Connection reset by peer)
[13:30:56] *** Quits: arinov (~arinov@213.194.126.155) (Ping timeout: 245 seconds)
[13:31:25] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[13:31:25] *** Joins: djhankb (~djhankb@208.113.164.68)
[13:32:34] *** Quits: lsrtl_ (~lsrtl@user/lsrtl) (Ping timeout: 258 seconds)
[13:32:39] *** Quits: cursey (~cursey@user/cursey) (Quit: bye)
[13:33:20] *** Joins: legola (~legola@46.235.101.181)
[13:34:06] *** Joins: thiras (~thiras@user/thiras)
[13:35:24] *** Quits: einhorn (~einhorn@user/einhorn) (Quit: Enough internet for today.)
[13:35:37] *** Joins: Klinda (~superleag@user/klinda)
[13:36:51] *** Quits: winterflaw (~winterfla@gateway/tor-sasl/winterflaw) (Remote host closed the connection)
[13:37:06] *** Quits: stormdancer (~stormdanc@185.245.86.122) (Remote host closed the connection)
[13:37:10] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 258 seconds)
[13:37:19] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[13:37:43] *** Joins: winterflaw (~winterfla@gateway/tor-sasl/winterflaw)
[13:38:50] <Khepra> Wulf: right, so it's max rss for that PID regardless of garbage collection that occurred, yes?
[13:39:05] *** Quits: pycurious (~Adium@user/pycurious) (Ping timeout: 258 seconds)
[13:39:05] *** Quits: vladoski (~vladoski@2001:b07:add:d406:aa66:9dae:fc42:f2e) (Ping timeout: 258 seconds)
[13:42:56] *** Joins: Seto_Kaiba (~hunterkll@2001:470:8b06:100:2958:1194:aedf:1fa3)
[13:42:56] *** Quits: Hunterkll (~hunterkll@2001:470:8b06:100:2958:1194:aedf:1fa3) (Killed (NickServ (GHOST command used by Seto_Kaiba)))
[13:43:10] *** Seto_Kaiba is now known as Hunterkll
[13:44:41] *** Joins: cursey (~cursey@user/cursey)
[13:46:54] *** Joins: iomari891 (~iomari891@105.112.138.38)
[13:47:18] *** Joins: BlueSky (~BlueSky@user/bluesky)
[13:48:03] *** Joins: daoudr (~daoudr@2a02:1205:c681:1650:2213:cc7f:a040:3a92)
[13:48:15] <Wulf> Khepra: yes
[13:49:47] *** Joins: scoobydoob (~scooby@user/scoobydoo)
[13:50:49] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Ping timeout: 252 seconds)
[13:50:55] *** scoobydoob is now known as scoobydoo
[13:51:20] *** Joins: arinov (~arinov@31.142.50.8)
[13:53:26] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 245 seconds)
[13:53:30] <rendar> why often we see if a is None, but not if x is True ?
[13:55:45] *** Joins: fikran (~fikran@user/fikran)
[13:56:07] <jinsun> because if x is True is same as if x
[13:56:11] <Repiphany> Most objects are truthy if you're testing for them like that in the first place
[13:56:40] <Repiphany> Sometimes you need to distinguish for falsey things like 0 vs something explicitly None
[13:56:52] <rendar> jinsun, i mean that we see more often `== True` instead of `is True`, in the other hand we more often see `is None` -- why?
[13:57:06] <jinsun> (well not same but you probably wanted that)
[13:57:42] <Repiphany> There is only one `None` object so it's conventional to test for the same object instead of equality with ==
[13:57:58] <Khepra> None is "NULL" which always had a special subcontext in programming
[13:58:13] <Repiphany> Testing for `== True` is an antipattern in python
[13:58:23] <jinsun> yeah if x == True is also bad, just do if x
[13:58:24] <rendar> Repiphany, huh? how?
[13:58:33] <Khepra> like, maybe the semantics of a program distinguishes between 0 and None (no value, not even 0). if !val would be insufficient
[13:58:42] <Khepra> (if not val, to be precise)
[13:59:07] <jinsun> is None is used more than == None because PEP 8 says so I guess
[13:59:17] <Repiphany> It's better to use the boolean nature of whatever object you're considering
[13:59:44] <rendar> Repiphany, i suppose also because of python protocol about the __bool__ function
[14:00:11] <Repiphany> If you're comparing a boolean value to True or False, you should just be using that boolean value itself in the first place
[14:00:35] <Repiphany> `if x > 10:` is the same as `if (x > 10) == True:`
[14:00:44] <jinsun> rendar: about is None vs == None https://www.python.org/dev/peps/pep-0008/#programming-recommendations
[14:01:04] *** Joins: e3d3 (~user@2a02-a450-1c17-1-ca60-ff-fe49-35cf.fixed6.kpn.net)
[14:01:12] <rendar> ok thanks
[14:03:01] <jinsun> and yeah `__bool__` is the reason == True and is True are both bad
[14:04:08] <e3d3> How do I install something with pip ? Trying `pip install gnuplot_kernel' don't recognize `install' but I have pip installed according `python3 -m pip --version'
[14:05:02] <rendar> jinsun, thanks
[14:06:07] <nedbat> e3d3: what does `which pip` tell you?
[14:06:29] <nedbat> e3d3: you can use:  `python3 -m pip install gnuplot_kernel`, and probably should.
[14:06:40] <e3d3> nedbat: It errors that `install' is invalid syntax
[14:06:50] <nedbat> e3d3: what does?
[14:07:02] <jinsun> are you running pip install in the REPL?
[14:07:02] *** Quits: clarkk (~clarkk@host31-53-69-254.range31-53.btcentralplus.com) (Ping timeout: 260 seconds)
[14:07:27] <e3d3> nedbat: sorry, the error I got when trying installing.
[14:07:39] <nedbat> e3d3: did you try `python3 -m pip install ...` ?
[14:08:03] <e3d3> nedbat: not yet. `which pip' outputs nothing, in Bash shell
[14:08:27] <nedbat> e3d3: how about `type -a pip` ?
[14:08:38] *** Joins: clarkk (~clarkk@host31-53-69-254.range31-53.btcentralplus.com)
[14:08:44] <e3d3> the `python3 -m pip install' worked
[14:09:06] <e3d3> nedbat: `type -a pip' ==> /bin/bash: line 0: type: pip: not found
[14:09:54] *** Joins: LucaTM (~LucaTM@user/lucatm)
[14:10:02] <nedbat> e3d3: i don't understand what's wrong with your pip command, but the -m syntax is safer anyway
[14:12:21] <e3d3> nedbat: Long time ago I used pip, and promised myself to avoid it forever because it caused a horrible mess. Yesterday I discovered it was installed as dependency, so I could resist to use it. Hopefully pip improved over the years
[14:12:38] <e3d3> could = couldn't
[14:13:05] <jinsun> it causes a terrible mess even today if you do sudo pip
[14:13:29] <jinsun> if you don't mix sudo and pip then it should be fine
[14:13:35] <e3d3> jinsun: I remember doing that often, because sometimes nothing else worked
[14:13:53] *** Joins: darksun (~darksun@user/darksun)
[14:13:56] <e3d3> jinsun: Thanks for that advise.
[14:14:04] <hexnewbie> you can always clean /usr/local after you did do pip as root
[14:15:36] <nedbat> e3d3: virtualenvs are the best way to manage python dependencies
[14:16:08] <e3d3> What confuses me is that the docs for the package I want to install advice to do: `pip install gnuplot_kernel'; `python -m gnuplot_kernel install --user'
[14:16:39] <e3d3> Is that second install command really necesary, or different from the first ?
[14:17:10] *** Joins: stormdancer (~stormdanc@185.245.86.122)
[14:17:18] <e3d3> I'm so scared that pip mess up everything again
[14:18:01] *** Quits: Ilyu (~quassel@78.202.228.230) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[14:18:57] <jinsun> the second command is running gnuplot_kernel and first is running pip, so it is definitely different
[14:19:23] *** dcaro is now known as dcaro_lunch
[14:20:04] <e3d3> jinsun: My sorrow troubles my eyes. I should have seen that. Sorry & thanks again.
[14:20:50] *** Quits: Haxxa (~Haxxa@89nnjg0xckz9ggn6r5xm.ip6.superloop.com) (Quit: Haxxa flies away.)
[14:20:56] <jinsun> I guess the second one it to add that to jupyter config
[14:21:21] *** Joins: Haxxa (~Haxxa@122.199.45.48)
[14:21:38] *** Quits: stormdancer (~stormdanc@185.245.86.122) (Ping timeout: 258 seconds)
[14:22:37] *** Quits: imp (~imp@192-141-191-231.alternativaip.net.br) (Quit: imp)
[14:22:52] *** Quits: clarkk (~clarkk@host31-53-69-254.range31-53.btcentralplus.com) (Remote host closed the connection)
[14:23:17] <e3d3> jinsun: indeed. I'm very happy that it worked. I didn't dare to try it without advice from here.
[14:24:12] *** Joins: clarkk (~clarkk@host31-53-69-254.range31-53.btcentralplus.com)
[14:25:31] *** Joins: Bronto22 (~mennoh@84-86-247-193.fixed.kpn.net)
[14:25:48] *** Joins: raxor2k (~raxor2k@78.158.254.247)
[14:28:22] <e3d3> hexnewbie: nedbat: jinsun: thanks for the adequate & friendly help
[14:28:25] *** Parts: e3d3 (~user@2a02-a450-1c17-1-ca60-ff-fe49-35cf.fixed6.kpn.net) (rcirc on GNU Emacs 26.1)
[14:28:29] *** Quits: Lazenca (~lazenca@user/lazenca) (Remote host closed the connection)
[14:30:35] *** Quits: djhankb (~djhankb@208.113.164.68) (Read error: Connection reset by peer)
[14:31:05] *** Joins: pycurious (~Adium@user/pycurious)
[14:31:08] *** Joins: djhankb (~djhankb@208.113.164.68)
[14:33:19] *** Quits: clarkk (~clarkk@host31-53-69-254.range31-53.btcentralplus.com) (Quit: Leaving)
[14:34:22] *** Joins: clarkk (~clarkk@host31-53-69-254.range31-53.btcentralplus.com)
[14:35:30] *** Quits: pycurious (~Adium@user/pycurious) (Ping timeout: 260 seconds)
[14:37:15] *** Joins: cthulchu (~Cthulchu@193.194.107.250)
[14:37:57] *** Joins: Pickchea (~private@user/pickchea)
[14:38:18] *** Joins: NeilRG (~NeilRG@192.222.196.111)
[14:40:19] *** Joins: stormdancer (~stormdanc@185.245.86.121)
[14:40:27] *** Quits: FH_thecat (~FH_thecat@75.11.25.212.ftth.as8758.net) (Quit: Leaving)
[14:41:42] *** Quits: clarkk (~clarkk@host31-53-69-254.range31-53.btcentralplus.com) (Quit: Leaving)
[14:42:23] *** Quits: shad (~shad@user/shad) (Ping timeout: 264 seconds)
[14:42:37] *** Quits: dld (~davidlowr@2601:197:600:1210:750d:ae1c:e5be:6956) (Ping timeout: 252 seconds)
[14:44:43] *** mh3f_ is now known as mh3f
[14:45:26] *** Quits: nomic (~nomic@185.217.117.88) (Quit: Leaving)
[14:47:35] *** Joins: donald1 (~donald@88.5.131.77.rev.sfr.net)
[14:47:38] *** Quits: stormdancer (~stormdanc@185.245.86.121) (Ping timeout: 260 seconds)
[14:48:04] <rendar> does `except (BaseException, Exception):` makes sense?
[14:50:01] *** Quits: mickey8 (~user@user/mickey) (Quit: Ping timeout (120 seconds))
[14:50:27] *** Joins: mickey8 (~user@user/mickey)
[14:50:39] <jinsun> it is same as except BaseException: I think
[14:51:31] <jinsun> Exception is subclass of BaseException so it will be caught by except BaseException
[14:52:46] *** Quits: arinov (~arinov@31.142.50.8) (Ping timeout: 260 seconds)
[14:53:42] <donald1> hrob: no. I want to ctach the input and output for my library
[14:53:58] <donald1> anyway I just want to understand the meaning of this error
[14:57:26] *** Joins: mIk3_08 (~Thunderbi@user/mik3-08/x-2852566)
[14:58:29] *** Quits: gitesh (uid423739@id-423739.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[14:58:33] *** Joins: pycurious (~Adium@user/pycurious)
[14:58:36] <donald1> Hi I coded self.stdin = Pipe() and I have as error "Expected type 'int', got 'Pipe' instead " It does not make any sens. Could you tell me why? here is my code: https://github.com/Gallopsled/pwntools/pull/1978/files#diff-99cd97af03bf612ff0c79d6518c1b67ad1a16c7ea4f347f4429e99deca7e3340R588
[14:58:48] *** Quits: Haxxa (~Haxxa@122.199.45.48) (Quit: Haxxa flies away.)
[15:00:10] *** Joins: Haxxa (~Haxxa@89nnjg0xckz9ggn6r5xm.ip6.superloop.com)
[15:01:48] <fakenullie> donald1: self.stdin is passed to function which expects integer file descriptor
[15:02:17] <raxor2k> when i run this code locally in a editor, it works perfectly, but when this is run inside an API(docker), i get the error: TypeError: __init__() takes 1 positional argument but 5 were given     WHAT THE HECK???  https://bpa.st/6KIQ
[15:03:02] *** Quits: pycurious (~Adium@user/pycurious) (Ping timeout: 258 seconds)
[15:03:05] *** Joins: shad (~shad@user/shad)
[15:04:39] <fakenullie> raxor2k: newer pymysql only accepts keyword arguments to connect
[15:05:12] *** Quits: Madda (~Madda@216.51.198.146.dyn.plus.net) (Remote host closed the connection)
[15:05:17] *** Joins: logithack (~logithack@p200300cfbf4a7200cbd09806913ddf8f.dip0.t-ipconnect.de)
[15:05:27] <donald1> fakenullie:  but no this is just an assignation. there is no function at this line
[15:05:51] <fakenullie> pymysql.connect('ipadress', 'user','password', "table") is a method call
[15:05:55] <raxor2k> fakenullie: ok ? so why does it work when i run it locally `
[15:06:04] <logithack> I'm trying to remember the name of a paradigm related to how to deal with potential failures of applications. It was something along the lines of 'If it fails, let it fail hard.'. Could anyone give me a hint what it was called?
[15:06:05] <fakenullie> because you have older pymysql version locally
[15:07:05] <raxor2k> fakenullie: ok i updated it locally and i see i get the same error now
[15:07:07] <raxor2k> locally
[15:07:27] *** Joins: Madda (~Madda@216.51.198.146.dyn.plus.net)
[15:08:10] *** Quits: iomari891 (~iomari891@105.112.138.38) (Ping timeout: 260 seconds)
[15:08:20] <fakenullie> logithack: https://en.wikipedia.org/wiki/Fail-fast ?
[15:08:21] <raxor2k> fakenullie: so i need to convert it to an entire string and then push it in the parameter ?
[15:08:37] *** Joins: fearnothing (~fearnothi@user/fearnothing)
[15:08:41] <fakenullie> raxor2k: no, you need to pass these arguments as keyword arguments
[15:09:08] *** Joins: iomari891 (~iomari891@105.112.138.38)
[15:09:15] <fakenullie> pymysql.connect(host='ipadress', user='user', password='password', database="table")
[15:10:37] <raxor2k> fakenullie: ahaaaaa
[15:10:39] <raxor2k> thanks!!!
[15:11:47] *** Joins: arinov (~arinov@31.142.50.8)
[15:12:54] <fakenullie> donald1: it fails later, see your traceback
[15:15:00] <donald1> fakenullie it fails here line 588, in __init__
[15:16:33] <logithack> fakenullie: Thanks, that got me on the right track.
[15:16:56] *** Joins: nomic (~nomic@185.217.117.88)
[15:18:16] <fakenullie> donald1: paste you full traceback please
[15:18:38] <fakenullie> to https://bpa.st/+python
[15:19:08] *** Quits: arinov (~arinov@31.142.50.8) (Ping timeout: 258 seconds)
[15:19:22] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[15:19:32] *** Quits: mickey8 (~user@user/mickey) (Quit: Ping timeout (120 seconds))
[15:20:33] <donald1> https://bpa.st/T7BA fakenullie
[15:20:46] *** Joins: mickey8 (~user@user/mickey)
[15:22:15] *** Joins: dez (uid92154@user/dez)
[15:22:47] <fakenullie> donald1: it's different error. stdin is a read-only property
[15:23:40] *** Quits: upsala (~zcb@185.213.155.160) (Quit: WeeChat 3.3)
[15:25:57] *** Quits: Haxxa (~Haxxa@89nnjg0xckz9ggn6r5xm.ip6.superloop.com) (Quit: Haxxa flies away.)
[15:26:22] <donald1> fakenullie why is stdin a read only property?
[15:26:25] *** Joins: Haxxa (~Haxxa@122.199.45.48)
[15:26:28] *** Joins: stormdancer (~stormdanc@185.245.86.123)
[15:26:54] <fakenullie> donald1: https://github.com/Gallopsled/pwntools/blob/3dbbbef2856c5dc3bab5ef3db76fd13746dcc763/pwnlib/tubes/process.py#L1316
[15:27:22] <donald1> ahhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh yes
[15:27:25] <donald1> interesting!
[15:29:05] *** Quits: raxor2k (~raxor2k@78.158.254.247) ()
[15:29:22] *** Joins: vimart (~vimart@239.218-30-62.static.virginmediabusiness.co.uk)
[15:30:01] *** Joins: tgamblin (~tgamblin@2607:fea8:c29d:d7c0:fa88:8bc5:c0d2:27cc)
[15:31:35] *** Quits: yeirr (~yeirr@user/yeirr) (Ping timeout: 264 seconds)
[15:32:45] *** Joins: Elodin (~weechat@user/elodin)
[15:34:51] *** Quits: stormdancer (~stormdanc@185.245.86.123) (Ping timeout: 258 seconds)
[15:36:02] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.3)
[15:36:31] *** Joins: supakeen (~user@python/site-packages/supakeen)
[15:37:31] *** Quits: thrillgore (~ZugZug@69-225-55-100.lightspeed.nsvltn.sbcglobal.net) (Ping timeout: 252 seconds)
[15:39:23] *** Joins: cybniv (~niv@limbo.cypherpunks.io)
[15:39:23] *** Quits: kenoba (~kenoba@user/kenoba) (Quit: The Lounge - https://thelounge.chat)
[15:40:17] *** Joins: kenoba (~kenoba@user/kenoba)
[15:40:24] *** Quits: Haxxa (~Haxxa@122.199.45.48) (Quit: Haxxa flies away.)
[15:40:39] *** Quits: Jong (~Jong@2620:10d:c090:400::5:fbf2) (Read error: Connection reset by peer)
[15:41:02] *** Joins: Haxxa (~Haxxa@122.199.45.48)
[15:42:27] *** Quits: hendursa1 (~weechat@user/hendursaga) (Ping timeout: 276 seconds)
[15:42:56] *** Joins: hendursa1 (~weechat@user/hendursaga)
[15:43:30] *** Joins: pycurious (~Adium@user/pycurious)
[15:43:35] *** Quits: fr_sleepy (~fr_sleepy@209.94.138.128) (Ping timeout: 264 seconds)
[15:45:30] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[15:45:58] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 260 seconds)
[15:47:36] *** Joins: aknot (~aknot@2603:900a:1503:17bb:1bc:c44c:adcc:8c39)
[15:49:02] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Quit: = "")
[15:49:38] *** Joins: arinov (~arinov@213.194.126.155)
[15:51:46] *** Quits: Bode_Cleu (~Code_Bleu@user/code-bleu/x-6939963) (Ping timeout: 252 seconds)
[15:51:59] *** Joins: DnzAtWrk (~DnzAtWrk@mobile-access-6df047-84.dhcp.inet.fi)
[15:52:05] *** Joins: Bode_Cleu (~Code_Bleu@user/code-bleu/x-6939963)
[15:52:40] *** Joins: gitesh (uid423739@id-423739.ilkley.irccloud.com)
[15:56:50] *** Joins: wedwards (~wedwards@rtr0.17.31.bogert.cyberfusion.cloud)
[15:58:07] *** Quits: Haxxa (~Haxxa@122.199.45.48) (Quit: Haxxa flies away.)
[15:58:39] *** Joins: slowButPresent (~slowButPr@user/slowbutpresent)
[16:00:00] *** Quits: logithack (~logithack@p200300cfbf4a7200cbd09806913ddf8f.dip0.t-ipconnect.de) (Quit: Leaving)
[16:00:36] <Zweimer> https://www.programcreek.com/python/example/1080/imp.load_source << The first example shows a way of how you can load python-scripts dynamically. Can you still use this function after you used pyinstaller on the main program? Could this always work if the plugins are .pyc rather than .py files? Do I still need Python installed?
[16:01:05] *** Quits: mIk3_08 (~Thunderbi@user/mik3-08/x-2852566) (Quit: mIk3_08)
[16:01:13] *** dcaro_lunch is now known as dcaro
[16:01:21] *** Quits: kurfen_ (~kurfen@37.120.204.67) (Ping timeout: 245 seconds)
[16:02:56] <andi_> what's a nice way to get the content of a substring within ` e.g. `i want this` should return i want this?
[16:03:14] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 260 seconds)
[16:03:34] *** Quits: shangxiao (~davids@124.187.230.212) (Quit: WeeChat 3.3)
[16:03:56] <andi_> right now i need the help of import re :/
[16:04:27] *** Quits: Bronto22 (~mennoh@84-86-247-193.fixed.kpn.net) (Quit: Konversation terminated!)
[16:05:06] *** Joins: fikran (~fikran@user/fikran)
[16:05:31] <wedwards> I want a function that I can pass a command to and a bunch of arguments (like bindparams in SQL). I don't want my subprocess clients to have to format the string themselves. I have this POC: https://bpa.st/3DSA . Can anyone comment on the quality of this solution? This is the way it's done in the Python docs, but that doesn't use a function: https://docs.python.org/3/library/shlex.html#shlex.quote
[16:05:49] *** Joins: fluiD (~fluiD@161.97.231.145)
[16:06:37] *** Quits: molt (~molt@178-222-245-206.static.isp.telekom.rs) (Ping timeout: 252 seconds)
[16:07:13] *** Joins: yeirr (~yeirr@user/yeirr)
[16:07:36] <InPhase> andi_: If you have a very clean string and don't care about edge cases:  s[i:i+s[(i:=(s.find('`')+1)):].find('`')]
[16:07:45] <deniska> wedwards: in python typical functions which work with subprocesses accept a list like ['ls', '-la', fileName]
[16:08:09] <deniska> wedwards: and typically people just construct a list like this directly instead of going the whole string formatting road
[16:08:14] <wedwards> deniska: I use shlex.split to convert a string to a list. But what I'm trying to do in not to prevent shell injection.
[16:08:23] *** Quits: legola (~legola@46.235.101.181) (Remote host closed the connection)
[16:08:48] <InPhase> andi_: If you have edge cases, or want a more human-readable solution, pay the extra to import re.
[16:08:50] *** Quits: Pickchea (~private@user/pickchea) (Ping timeout: 260 seconds)
[16:09:41] <andi_> InPhase: alright so re it is. that's maybe a bit overkill but well readable
[16:09:51] <andi_> thanks for the input InPhase
[16:10:04] <deniska> > more human-readable > import re
[16:10:31] <jinsun> :D
[16:10:48] <InPhase> :)
[16:11:03] <InPhase> import recompatiblehuman
[16:11:18] <andi_> well it's `my text`
[16:11:22] <andi_> that's an okay regex
[16:11:41] *** Joins: legola (~legola@46.235.101.181)
[16:12:15] *** Joins: bloody (~bloody@user/bloody)
[16:12:51] <jinsun> what about your_string.split("`")[1] ?
[16:13:21] <deniska> dunno, `[^`]` seems perfectly readable
[16:13:44] <deniska> after you change it to `[^`]*` that is
[16:13:46] *** Joins: src (~src@user/src)
[16:13:48] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[16:15:23] *** Joins: zodd (~zodd@84-106-80-107.cable.dynamic.v4.ziggo.nl)
[16:17:26] *** Joins: dld (~davidlowr@2620:6e:6000:2900:5c78:4bcc:82fe:593c)
[16:18:35] *** Quits: stats4647 (~stats4647@ip174-67-220-13.oc.oc.cox.net) (Remote host closed the connection)
[16:18:59] *** Joins: thrillgore (~ZugZug@69-225-55-100.lightspeed.nsvltn.sbcglobal.net)
[16:19:21] *** Joins: semeion (~semeion@user/semeion)
[16:19:21] *** Joins: stats4647 (~stats4647@ip174-67-220-13.oc.oc.cox.net)
[16:19:26] *** Joins: Haxxa (~Haxxa@122.199.45.48)
[16:19:59] *** Joins: xiongxin (~quassel@113.116.35.81)
[16:22:17] *** Quits: stranac (~stranac@195.29.239.126) (Read error: Connection reset by peer)
[16:22:38] *** Quits: nomic (~nomic@185.217.117.88) (Quit: Leaving)
[16:23:38] *** Joins: zeden (~zeden@user/zeden)
[16:23:44] *** Quits: zeden (~zeden@user/zeden) (Client Quit)
[16:23:46] *** Quits: stats4647 (~stats4647@ip174-67-220-13.oc.oc.cox.net) (Ping timeout: 260 seconds)
[16:24:09] *** Quits: bloody (~bloody@user/bloody) (Quit: Always focus on how far you've come, rather than how far you have left to go)
[16:25:27] *** Joins: bloody (~bloody@user/bloody)
[16:26:03] *** Joins: sn1tch3r (~sn1tch3r@user/sn1tch3r)
[16:26:19] *** Quits: sn1tch3r (~sn1tch3r@user/sn1tch3r) (Remote host closed the connection)
[16:26:27] *** Joins: zeden (~zeden@user/zeden)
[16:26:42] *** Joins: sn1tch3r (~sn1tch3r@user/sn1tch3r)
[16:28:30] *** Quits: sn1tch3r (~sn1tch3r@user/sn1tch3r) (Client Quit)
[16:28:39] *** Quits: Proxysna (~Proxysna@62.119.254.142) (Remote host closed the connection)
[16:28:47] *** Quits: elkclone (~elkclone@user/elkclone) (Quit: Leaving)
[16:30:50] *** Joins: hyskaru (~hyskaru@user/hyskaru)
[16:33:54] *** Quits: ede (~ede@user/ede) (Ping timeout: 268 seconds)
[16:35:41] *** Joins: ede (~ede@user/ede)
[16:39:30] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[16:40:35] *** Quits: gimzmoe (~gimzmoe@user/gimzmoe) (Ping timeout: 264 seconds)
[16:41:21] *** Quits: aknot (~aknot@2603:900a:1503:17bb:1bc:c44c:adcc:8c39) (Ping timeout: 245 seconds)
[16:44:14] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Ping timeout: 258 seconds)
[16:45:50] *** Quits: bloody (~bloody@user/bloody) (Quit: Always focus on how far you've come, rather than how far you have left to go)
[16:47:58] *** Quits: Haxxa (~Haxxa@122.199.45.48) (Quit: Haxxa flies away.)
[16:48:28] *** Joins: Haxxa (~Haxxa@122.199.45.48)
[16:48:57] *** Parts: arseru (uid515527@user/arseru) ()
[16:50:22] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 258 seconds)
[16:50:27] *** Joins: alex11 (~alex11@user/alex11)
[16:53:08] *** Quits: frost (~frost@59.71.244.189) (Quit: Connection closed)
[16:53:25] *** Quits: Haxxa (~Haxxa@122.199.45.48) (Remote host closed the connection)
[16:55:12] *** Joins: Haxxa (~Haxxa@89nnjg0xckz9ggn6r5xm.ip6.superloop.com)
[16:55:26] *** Joins: Shapeshifter (~Shapeshif@parakeet.ifi.uzh.ch)
[16:56:22] <Shapeshifter> Is there any reason why del can't be used like any other expression? i.e. l = [1,2]; x = del(l[0]) gives a syntax error at d.
[16:56:41] <deniska> Shapeshifter: what do you want it to return?
[16:57:08] <Shapeshifter> deniska: maybe None. It doesn't really matter. it looks and behaves like any other function, doesn't it?
[16:57:31] <deniska> Shapeshifter: it's not a function, it's a keyword which forms its own statement: del l[0]
[16:57:39] <Zweimer> If I want to use QThread from PyQt5, does my Worker-Class need to be inherited from QThread or QRunnable? Confusingly, I have seen both.
[16:58:11] <Shapeshifter> deniska: I know, but I'm just wondering if there's a specific reason for this design choice. Is there any clear advantage over having del be a built-in function?
[16:59:07] *** Joins: bloody (~bloody@user/bloody)
[16:59:11] <deniska> Shapeshifter: it can unassign a variable (del a), it can remove an item from a collection (del a[0]), it can remove an attribute from an object (del a.x)
[16:59:21] <deniska> Shapeshifter: all 3 things would be impossible to implement as a function :)
[17:00:13] <deniska> because in all three cases it's not an operation on whatever the argument evaluates to
[17:01:37] *** Quits: doc (~doc@user/doc) (Ping timeout: 265 seconds)
[17:01:42] <deniska> del(a, 0), some sort of del_attr(a, 'x') could be functions
[17:01:49] *** Joins: Gerula (~Gerula@user/gerula)
[17:02:11] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[17:02:18] *** Joins: Sheilong (uid293653@id-293653.ilkley.irccloud.com)
[17:02:23] <Shapeshifter> I see.
[17:02:25] <Shapeshifter> Thanks.
[17:02:58] *** Joins: doc (~doc@user/doc)
[17:03:38] *** Joins: Proxysna (~Proxysna@62.119.254.142)
[17:05:39] *** Joins: vpoat (~vpoat@2001:ee0:249:c921:6656:9403:4549:2c11)
[17:06:04] *** Joins: Trieste_ (T@user/pilgrim)
[17:06:41] *** Quits: Trieste (T@user/pilgrim) (Ping timeout: 264 seconds)
[17:08:01] *** Quits: donald1 (~donald@88.5.131.77.rev.sfr.net) (Ping timeout: 245 seconds)
[17:08:03] *** Joins: Ivii (~Ivyy@2001:a61:13f1:cb01:e587:a1e:b0de:19a5)
[17:08:22] *** Joins: vladoski (~vladoski@2001:b07:add:d406:704f:6a18:b1c4:6e30)
[17:08:26] *** Joins: rinzewind (~rinzewind@user/rinzewind)
[17:10:08] *** Quits: Haxxa (~Haxxa@89nnjg0xckz9ggn6r5xm.ip6.superloop.com) (Quit: Haxxa flies away.)
[17:10:12] *** Joins: odoood (~odoood@2601:c8:c003:a550::3)
[17:10:21] <bjs> deniska: delattr*
[17:10:53] *** Joins: Haxxa (~Haxxa@122.199.45.48)
[17:11:05] <deniska> delattr, delitem :)
[17:11:15] <bjs> sadly delitem doesn't exist
[17:11:20] <deniska> it's called .pop()
[17:11:21] *** Quits: Klinda (~superleag@user/klinda) (Ping timeout: 245 seconds)
[17:11:21] *** Joins: nyah (~nyah@bcdcb6e3.skybroadband.com)
[17:11:25] <bjs> yeah
[17:11:32] <jamwil> Zweimer: QThread typically. QRunnable is more limited in functionality and, I think, is designed for bite-sized tasks in a threadpool. You can't, for instance, emit a custom signal from a QRunnable without making a separate external Emitter class.
[17:11:55] *** Quits: ExeciN (~ExeciN@user/nicexe) (Remote host closed the connection)
[17:12:14] *** Joins: ExeciN (~ExeciN@user/nicexe)
[17:12:27] *** Joins: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br)
[17:13:10] *** Joins: ozoned (odoood@gateway/vpn/protonvpn/odoood)
[17:13:13] *** Quits: vladoski (~vladoski@2001:b07:add:d406:704f:6a18:b1c4:6e30) (Ping timeout: 252 seconds)
[17:13:15] *** Quits: hyskaru (~hyskaru@user/hyskaru) (Quit: hyskaru)
[17:13:19] <jamwil> Zweimer: Basically if you need signals and slots, use a Qthread. If not, a QRunnable is sufficient, whereby you are coordinating task execution explicitly using a QThreadPool.
[17:13:31] *** Joins: gimzmoe (~gimzmoe@user/gimzmoe)
[17:13:34] *** Parts: Khepra (~ratrace@user/ratrace) ()
[17:13:51] *** Quits: FireFish5000 (~FireFish5@user/firefish5000) (Ping timeout: 245 seconds)
[17:15:52] *** Quits: Haxxa (~Haxxa@122.199.45.48) (Remote host closed the connection)
[17:15:56] *** Quits: odoood (~odoood@2601:c8:c003:a550::3) (Ping timeout: 245 seconds)
[17:17:12] *** Joins: Haxxa (~Haxxa@89nnjg0xckz9ggn6r5xm.ip6.superloop.com)
[17:17:23] *** Quits: xiongxin (~quassel@113.116.35.81) (Quit: No Ping reply in 180 seconds.)
[17:18:10] *** Quits: vpoat (~vpoat@2001:ee0:249:c921:6656:9403:4549:2c11) (Ping timeout: 252 seconds)
[17:18:39] *** Joins: xiongxin (~quassel@113.116.34.92)
[17:19:12] *** Joins: vpoat (~vpoat@2001:ee0:24b:fc7c:88be:73d1:994c:2466)
[17:21:48] *** Joins: gulzar (~gulzar@123.201.100.50)
[17:23:36] *** Quits: grys (~quassel@botters/gry) (Quit: No Ping reply in 180 seconds.)
[17:23:41] *** Joins: CodeMouse92 (~CodeMouse@user/codemouse92)
[17:23:43] <gulzar> Hi. Need idea for web srapping. webiste: http://www.jassa.fr/   in second row, first text box, input P12345 and hit submit. It gives a 'result' table which I need to pick up. (for 30000 submissions). The url is not chaning. Seems JS is doing the change. HOw to extract this table?
[17:23:46] *** Quits: herjazz (~herjazz@p6758124-ipngn30801marunouchi.tokyo.ocn.ne.jp) (Quit: leaving)
[17:25:01] *** Joins: grys (~quassel@botters/gry)
[17:25:19] *** Joins: rickybob (rickybob@gateway/vpn/protonvpn/rickybob)
[17:26:01] *** Quits: vpoat (~vpoat@2001:ee0:24b:fc7c:88be:73d1:994c:2466) (Ping timeout: 258 seconds)
[17:27:24] <deniska> gulzar: look up which requests happen on a network tab of your dev tools
[17:27:55] <jamwil> gulzar: Simulat a POST request to index.php?m=jassa with the parameters included as multipart/form-data
[17:27:56] *** Joins: stats4647 (~stats4647@ip174-67-220-13.oc.oc.cox.net)
[17:28:36] *** Joins: Vornicus (~Vornicus@2603-8000-5d07-7ef0-b157-81d2-c247-f7c3.res6.spectrum.com)
[17:28:49] *** Joins: Pickchea (~private@user/pickchea)
[17:29:10] *** Quits: DnzAtWrk (~DnzAtWrk@mobile-access-6df047-84.dhcp.inet.fi) (Read error: Connection reset by peer)
[17:29:11] <jamwil> gulzar: The key you're looking for is likely upload_id_uniprot
[17:29:17] <gulzar> deniska: POST is happing on index.php?m=jassa
[17:29:21] *** Joins: stormdancer (~stormdanc@185.245.86.123)
[17:29:32] <ezzieyguywuf> with the type annotations, is it possible to specify a "placeholder type", similar to templates in c++? i.e. in c++ `<template typename T> class MyClass{ T someData;};` defines a `MyClass` that will contain some type T. it might be used as `MyClass<int> foo; MyClass<float> bar;` etc.
[17:29:47] *** Joins: Klinda (~superleag@user/klinda)
[17:29:59] *** Quits: gggp (~gggp@li870-78.members.linode.com) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[17:31:09] *** Joins: vladoski (~vladoski@2001:b07:add:d406:7a31:77d6:c6b0:2247)
[17:31:10] <gulzar> jamwil: sorry.  where is the POST request parameters? I have FF
[17:31:12] *** Quits: djhankb (~djhankb@208.113.164.68) (Read error: Connection reset by peer)
[17:31:35] *** Quits: pycurious (~Adium@user/pycurious) (Quit: Leaving.)
[17:31:37] *** Quits: ayustae (Thunderbir@gateway/vpn/protonvpn/ayustae) (Quit: ayustae)
[17:31:40] *** Quits: dez (uid92154@user/dez) (Quit: Connection closed for inactivity)
[17:31:44] *** Joins: djhankb (~djhankb@208.113.164.68)
[17:31:48] *** Joins: pycurious (~Adium@user/pycurious)
[17:31:48] <jamwil> gulzar: They're the name attributes associated with the html <input>s in the form itself.
[17:31:53] <deniska> gulzar: press F12, go to network tab, try poking on the site, look what happens in dev tools
[17:32:22] *** Quits: stats4647 (~stats4647@ip174-67-220-13.oc.oc.cox.net) (Ping timeout: 260 seconds)
[17:33:51] *** Quits: stormdancer (~stormdanc@185.245.86.123) (Ping timeout: 265 seconds)
[17:34:24] *** Quits: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao) (Quit: ZNC 1.8.2 - https://znc.in)
[17:34:48] *** Joins: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao)
[17:35:11] <jinsun> ezzieyguywuf: https://docs.python.org/3/library/typing.html#typing.TypeVar
[17:36:17] <gulzar> jamwil: deniska: In "Request " I can see the "Content-Disposition: form-data; name="sequence""    I used sequence instead of id. It is there in request.
[17:36:22] *** Quits: pycurious (~Adium@user/pycurious) (Ping timeout: 258 seconds)
[17:36:38] *** Joins: DnzAtWrk (~DnzAtWrk@mobile-access-6df047-84.dhcp.inet.fi)
[17:36:41] *** Joins: MCMiiic (~mcmic@63.120.199.77.rev.sfr.net)
[17:36:45] <MCMiiic> Hello
[17:36:55] *** Quits: dhellmann (~dhellmann@097-081-099-073.res.spectrum.com) (Quit: Textual IRC Client: www.textualapp.com)
[17:37:28] <gulzar> MCMiiic: Hi
[17:37:35] *** Quits: mefistofeles (~mefistofe@user/mefistofeles) (Ping timeout: 264 seconds)
[17:37:42] <MCMiiic> I’m trying to modify a python software, but because I also have the software installed on my system, when I run it it does not use the files I modify. How can I force a python script to import from its own folders?
[17:37:46] *** Joins: freeman_h (~freeman_h@94.5.86.162)
[17:37:58] <deniska> gulzar: somewhere there firefox should show you form data which were sent, and a response it got
[17:38:15] *** Quits: manuels (~manuel@80.211.205.88) (Read error: Connection reset by peer)
[17:38:18] <deniska> and then you can make a similar request using, well, requests or another prefered library
[17:38:29] <Swayze> hhhh
[17:38:31] *** Quits: freeman_h (~freeman_h@94.5.86.162) (Client Quit)
[17:38:38] <Swayze> final the moment hath cometh
[17:38:41] <fakenullie> MCMiiic: set PYTHONPATH variable to point to folder with its modules
[17:39:16] *** Joins: freeman_h (~freeman_h@94.5.86.162)
[17:39:51] <MCMiiic> fakenullie: Awesome, thanks, it works
[17:40:23] <jinsun> MCMiiic: you can install it with `pip install --editable` so that you can modify it while using it and don't have to mess with sys.path
[17:40:40] *** Joins: odoood__ (~odoood@2601:c8:c003:a550::3)
[17:40:41] *** Joins: tmlk (~tmlk@223.red-83-40-223.dynamicip.rima-tde.net)
[17:40:43] *** Quits: odoood__ (~odoood@2601:c8:c003:a550::3) (Remote host closed the connection)
[17:41:20] <gulzar> deniska: found it. Form data is there.  ok will try request lib
[17:41:46] <ezzieyguywuf> jinsun: thank you!
[17:43:35] *** Quits: ozoned (odoood@gateway/vpn/protonvpn/odoood) (Ping timeout: 264 seconds)
[17:44:07] *** Quits: xrogaan (~xrogaan@user/xrogaan) (Quit: Leaving)
[17:44:26] *** Quits: Pickchea (~private@user/pickchea) (Quit: Leaving)
[17:45:23] *** Joins: loganrun (~quantum@45.131.192.178)
[17:45:41] *** Quits: DnzAtWrk (~DnzAtWrk@mobile-access-6df047-84.dhcp.inet.fi) (Read error: Connection reset by peer)
[17:46:46] <loganrun> I want to do something like cat -f in python. I want to check a file for new data and if there is new data skip right to it and read it. I tried saving the file position and seeking to that position and then trying to read data, which works, but the seek is super slow since the file is big
[17:46:59] <loganrun> Is there any better solution
[17:47:16] <fakenullie> loganrun: you can keep it open and try to read
[17:47:20] <phy1729> How are you seeking?
[17:47:23] <loganrun> do I have to close the file for it to have access new data
[17:47:28] <fakenullie> no
[17:47:37] <loganrun> ahh, let me try that then
[17:47:42] <phy1729> seek should be basically instant (unless it's tape :p)
[17:48:01] *** Quits: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk) (Ping timeout: 245 seconds)
[17:48:10] <fakenullie> maybe it depends on file system
[17:48:13] <loganrun> I am opening the file with gzip.open
[17:48:17] <fakenullie> ah
[17:48:19] <loganrun> then doing the seek,
[17:48:54] <tmlk> hi! I'm veery new to python and I need to achieve this: I have two dictionaries https://bpa.st/55WA. I need to replace the 'key' name with another name.
[17:48:59] *** Joins: dhellmann (~dhellmann@097-081-099-073.res.spectrum.com)
[17:49:01] *** Joins: DnzAtWrk (~DnzAtWrk@mobile-access-6df047-84.dhcp.inet.fi)
[17:49:37] <tmlk> what's the best way to achieve that? I'm reading about .pop but I'm unsure.
[17:50:11] <tmlk> I'm building a new data structure from a json file and I need to "translate" the name of some 'keys'
[17:50:53] *** Quits: swensson (~swensson@213.88.131.10) (Quit: Client closed)
[17:51:09] <NoImNotNineVolt> are these translations hard-coded or will users be specifying them?
[17:51:10] <deniska> tmlk: if I understood what you want correctly: `for d in d1: d['name'] = d2[d['name']]`
[17:51:19] <NoImNotNineVolt> if the former, then that's easy. if the latter, then i recommend some templating language/engine.
[17:51:41] <Repiphany> d2 is a list of dictionaries for some reason, though
[17:52:13] *** Quits: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao) (Remote host closed the connection)
[17:52:17] <tmlk> Repiphany: d2 should actually be a dictionary, not a list of dict
[17:52:21] <tmlk> you're right
[17:52:32] *** Joins: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao)
[17:53:06] <tmlk> NoImNotNineVolt: it is hardcoded, it will not change.
[17:54:00] <loganrun> cool, keeping it open seems to work well, just keep trying to read new data
[17:54:42] *** Quits: iomari891 (~iomari891@105.112.138.38) (Quit: WeeChat 3.3)
[17:54:43] <tmlk> d2 could be d2={'alfa':'delta'} and so on
[17:55:00] *** Joins: zebrag (~chris@user/zebrag)
[17:55:18] *** Joins: iomari891 (~iomari891@105.112.138.38)
[17:56:23] *** Joins: gggp (~gggp@li870-78.members.linode.com)
[17:57:11] *** Joins: vbgunz (~vbgunz@35.141.71.47)
[17:57:32] *** Quits: vbgunz_ (~vbgunz@35.141.71.47) (Ping timeout: 265 seconds)
[17:57:47] <NoImNotNineVolt> tmlk: https://bpa.st/US5Q
[17:58:03] <NoImNotNineVolt> if d2 can be a list OR a dict, well, that changes things.
[17:58:26] *** Joins: akk (~akk@75.161.146.115)
[17:58:49] *** Joins: Julian (~tos9@python/site-packages/Julian)
[17:58:59] *** Quits: arinov (~arinov@213.194.126.155) (Ping timeout: 258 seconds)
[17:59:02] <NoImNotNineVolt> or, obviously, if d2 is a dict and not a list, that changes things too. i answered the question as asked :P
[18:00:25] <tmlk> NoImNotNineVolt: hehe, thanks. :)
[18:01:09] <NoImNotNineVolt> if d2 isn't a list, then d2=[d2] and my code works fine :P
[18:01:36] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[18:01:49] *** Quits: vladoski (~vladoski@2001:b07:add:d406:7a31:77d6:c6b0:2247) (Remote host closed the connection)
[18:01:58] *** Joins: Lando-SpaceIzzle (~Lando-Spa@user/lando-spacepimp)
[18:03:03] *** Joins: vladoski (~vladoski@2001:b07:add:d406:7a31:77d6:c6b0:2247)
[18:03:05] *** Quits: enyc (~enyc@user/enyc) (Ping timeout: 246 seconds)
[18:04:07] *** Joins: sfields (~sfields@2603-8090-1605-d7f3-9318-86ec-5dd6-c4be.res6.spectrum.com)
[18:06:46] *** Joins: maromau (~mauro@151.62.228.166)
[18:07:22] *** Quits: ice9 (~ice9@user/ice9) (Remote host closed the connection)
[18:09:09] *** Lando-SpaceIzzle is now known as Lando-SpacePimp
[18:09:21] <tmlk> NoImNotNineVolt: I tested your code but it doesn't work as I thought. I believe I didn't asked correctly my question. https://bpa.st/NXRA. So yes, d1 is a list of dictionaries. d2 is a dictionary. r the expected result.
[18:09:42] *** Quits: semeion (~semeion@user/semeion) (Ping timeout: 260 seconds)
[18:10:13] *** Quits: dvx (~dvx@185.63.97.64) (Remote host closed the connection)
[18:12:01] *** Joins: nicode (~nic@2607:f2c0:93bd:8400:4271:da28:1b07:4ce8)
[18:12:59] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 264 seconds)
[18:13:02] <sunny93> Is there a Cython channel ?
[18:13:21] <sunny93> I wonder if this code could speed up if I write it with cython, https://dpaste.com/DCCSN23QX .
[18:13:35] *** Quits: fearnothing (~fearnothi@user/fearnothing) (Ping timeout: 264 seconds)
[18:13:46] <Wooble> sunny93: #cython exists, according to Alis. Seems pretty empty though
[18:14:27] *** Joins: fikran (~fikran@user/fikran)
[18:15:03] <sunny93> oh let me try asking there
[18:17:55] <jinsun> sunny93: most of what you wrote is in the operator module, except the regex stuff, it might speed up if you just use operator.thing instead of your versions there
[18:18:14] *** Quits: zepolen (~zepolen@2a02:587:8600:1ad4:fd93:9610:683a:b386) (Remote host closed the connection)
[18:18:39] *** Joins: zepolen (~zepolen@2a02:587:8600:1ad4:755e:28e3:599c:5e55)
[18:19:47] <jinsun> it will probably still speed up if you compile with cython, but cython helps more if you are dealing with specific types (numbers usually), not so much with unannotated functions
[18:20:02] <deniska> sunny93: if you don't have incompatible dependencies, try running your code in pypy
[18:20:44] *** Joins: stormdancer (~stormdanc@185.245.86.123)
[18:20:44] <deniska> it's often faster, sometimes noticeably so
[18:21:28] *** Joins: mefistofeles (~mefistofe@user/mefistofeles)
[18:22:26] *** Joins: fearnothing (~fearnothi@user/fearnothing)
[18:22:44] *** Joins: semeion (~semeion@user/semeion)
[18:23:01] <sunny93> let me think
[18:25:02] <sunny93> jinsun what is `operator.thing`? I don't get it. Could you explain a bit more?
[18:25:17] *** Joins: Ilyu (~quassel@78.202.228.230)
[18:25:26] *** Quits: stormdancer (~stormdanc@185.245.86.123) (Ping timeout: 258 seconds)
[18:25:31] <sunny93> deniska I don't know much about pypy, how do I know my repo could switch to pypy?
[18:25:40] <jinsun> sunny93: https://docs.python.org/3/library/operator.html
[18:26:02] <deniska> sunny93: it's just a different python interpretator you may try
[18:26:24] <deniska> sunny93: you don't switch to it, you install it separately, and try running your program with it
[18:26:42] <deniska> if it works and it's faster, then yay :)
[18:26:45] <sunny93> ya, I know pypy is a different python interpretator
[18:26:55] <jinsun> sunny93: so operator.gt instead of your Operator.GREATER and operator.ge instead of your Operator.GREATER_EQUAL and so on
[18:27:18] *** Quits: alnr (~alnr@38.125.204.99) (Quit: Client closed)
[18:27:25] <Julian> this seems likely to be the kind of code pypy will help with, so yeah likely you want to try that
[18:28:19] <Julian> (also FWIW it's likely irrelevant but I hope you added that @tools.memoize after some profiling? I'm suspicious that even on CPython it probably doesn't matter much)
[18:28:52] *** Quits: xiongxin (~quassel@113.116.34.92) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[18:29:20] *** Joins: leitz (~LeamHall@cpe-173-172-58-72.tx.res.rr.com)
[18:29:31] *** Joins: isomorpheus (~isomorphe@c-73-53-247-25.hsd1.fl.comcast.net)
[18:30:02] <gulzar> deniska: jamwil: i tried both of these methhods https://paste.debian.net/1215878/   . Not getting request table. Please have a look. What am I missing?   online pytthon interpretors rerfused to run it so sharing here
[18:30:43] *** Quits: isomorpheus (~isomorphe@c-73-53-247-25.hsd1.fl.comcast.net) (Client Quit)
[18:31:03] *** Joins: isomorpheus (~isomorphe@c-73-53-247-25.hsd1.fl.comcast.net)
[18:31:13] <sunny93> jinsun thanks for the help. I get the way now. How is this could be faster ?
[18:31:15] *** Quits: fearnothing (~fearnothi@user/fearnothing) (Remote host closed the connection)
[18:31:38] <isomorpheus> can any pandas wizards let me know if there's a clean way of achieving this https://pastebin.com/urspJJpG ?
[18:31:39] <infobob> https://bpaste.net/24QA (repasted for isomorpheus)
[18:32:29] *** Joins: TheHermann (~TheHerman@gateway/tor-sasl/thehermann)
[18:32:37] *** Joins: fearnothing (~fearnothi@user/fearnothing)
[18:33:29] *** Joins: ellie1 (~ellie@2603-6080-8a07-f3f0-4ca2-dfb9-93e4-e871.res6.spectrum.com)
[18:34:17] *** Joins: klotzhauer (~klotzhaue@gibtesnochklopapier.de)
[18:34:35] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 264 seconds)
[18:34:59] <jinsun> sunny93: because the functions there are already compiled C functions (depends on how and where you install python, but likely true)
[18:35:28] <sunny93> ok I get it. I will try your advice and pypy now
[18:36:44] *** Quits: ExeciN (~ExeciN@user/nicexe) (Remote host closed the connection)
[18:37:27] *** Joins: stats4647 (~stats4647@ip174-67-220-13.oc.oc.cox.net)
[18:38:10] <sunny93> If I understand correctly, if pypy works, all other code that use this module needs to be compatible with pypy?
[18:38:26] <ellie1> I messaged about this in pypa, but I'm having some issues with packaging a bit of software if anyone is available to help I would be very grateful
[18:39:37] *** Quits: masta`` (~oyster@user/masta/x-2645138) (Read error: Connection reset by peer)
[18:40:39] *** Joins: ravan (~ravan@user/ravan)
[18:42:37] <SnoopJ> ellie1, it's usually best to ask your question instead of asking to ask
[18:46:14] *** Joins: Fiji (~Fiji@user/fiji)
[18:47:49] *** Quits: Haxxa (~Haxxa@89nnjg0xckz9ggn6r5xm.ip6.superloop.com) (Quit: Haxxa flies away.)
[18:47:54] *** Joins: masta`` (~oyster@user/masta/x-2645138)
[18:48:54] *** Joins: Haxxa (~Haxxa@122.199.45.48)
[18:49:53] <jinsun> isomorpheus: `df.set_index(["id", "color"]).unstack().swaplevel(0, 1, axis=1).sort_index(axis=1)` will almost do that
[18:49:58] *** Joins: Harlin (~DonQixote@c-24-128-8-53.hsd1.co.comcast.net)
[18:50:02] *** Quits: gggp (~gggp@li870-78.members.linode.com) (Remote host closed the connection)
[18:50:53] *** Quits: ellie1 (~ellie@2603-6080-8a07-f3f0-4ca2-dfb9-93e4-e871.res6.spectrum.com) (Quit: WeeChat 3.0.1)
[18:51:15] *** Joins: gggp (~gggp@li870-78.members.linode.com)
[18:51:20] <jamwil> gulzar: Like this: https://replit.com/join/xggskpheqf-jamwil
[18:52:20] *** Quits: gggp (~gggp@li870-78.members.linode.com) (Remote host closed the connection)
[18:52:37] <sunny93> oh I can just call pypy in CPython, e.g. use a subprocess
[18:52:58] <isomorpheus> jinsun, thanks. i can work with this
[18:53:04] *** Joins: gggp (~gggp@li870-78.members.linode.com)
[18:54:34] <jinsun> isomorpheus: the sort_index isn't really needed, I just did that to put all reds and blues together, and swaplevel will also not be needed if you can live with x and y being above red and blue
[18:55:11] <isomorpheus> jinsun, yeah I'm trying to puzzle out those parts rn. what are the 'levels' here? hierarchical index on... columns?
[18:55:20] *** Joins: Mocramis (~mocramis@dalaran.sceen.net)
[18:55:42] *** Quits: mav`rik (~unknown@ec2-54-171-126-99.eu-west-1.compute.amazonaws.com) (Quit: leaving)
[18:56:17] <jinsun> yes, your columns become MultiIndex after the unstack, so they have levels
[18:56:31] *** Joins: donald1 (~donald@88.5.131.77.rev.sfr.net)
[18:56:48] <isomorpheus> I see. I gotta do some reading about that. I assume there's a way to flatten them?
[18:56:57] *** Joins: zmt00 (~zmt00@user/zmt00)
[18:57:06] *** Quits: Kharon (uid511277@user/cypris) (Quit: Connection closed for inactivity)
[18:57:43] *** Quits: runelind (~runelind@user/runelind) (Ping timeout: 252 seconds)
[18:57:56] <jinsun> you can loop though it and str.join the tuples to get a "1D" list and assign it back to columns yes
[18:59:44] <isomorpheus> jinsun, `df.columns = df.columns.to_flat_index()` found it
[19:01:31] <jinsun> ah didn't know about that, though you still get tuples like (red, x) and not red_x
[19:01:33] *** Quits: Haxxa (~Haxxa@122.199.45.48) (Quit: Haxxa flies away.)
[19:01:35] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[19:01:46] <isomorpheus> yeah true. i'll probably do it manually but its cool its there. thanks for your help!
[19:01:54] *** Joins: Haxxa (~Haxxa@89nnjg0xckz9ggn6r5xm.ip6.superloop.com)
[19:02:35] *** Joins: sniperwolf (~sniperwol@91.230.98.1)
[19:03:58] <gulzar> jamwil: it doesn't fetch the data. r.text doesn't contain the data.
[19:04:50] *** Quits: mrwick (~mrwick@user/mrwick) (Quit: nouriturre)
[19:05:14] <jamwil> gulzar: When I run that query in Insomnia, it spits out the exact same page as when I enter P12345 in the web form.
[19:06:20] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[19:06:31] <jamwil> gulzar: The html is the same. I'm not sure what data you're specifically looking for but the web request is working correctly.
[19:06:48] <jamwil> gulzar: It pulls up Aspartate aminotransferase
[19:06:54] <gulzar> jamwil: the table is therre, but no data
[19:07:09] <gulzar> jamwil: I need the "Result" table
[19:07:14] <gulzar> "Reesults"
[19:07:17] *** Quits: jpic (~jpic@82.142.29.22) (Ping timeout: 265 seconds)
[19:07:34] *** Quits: han-solo (~hanish@user/han-solo) (Ping timeout: 260 seconds)
[19:07:59] *** Quits: AquaL1te (~AquaL1te@user/aqual1te) (Quit: leaving)
[19:08:00] <gulzar> "Patterns list" is there always. That tabe is not needed. I need the "Results" table
[19:08:28] *** Quits: Hackerpcs (~user@user/hackerpcs) (Quit: Hackerpcs)
[19:08:45] *** Joins: stdout (~stdout@216.163.21.11)
[19:08:47] *** Joins: jpic (~jpic@82.142.29.22)
[19:09:38] <jamwil> gulzar: It's there man; I just ran `assert "DPILGVTEAYKRDTNSKKMNL" in r.text` and it succeeds, that string being data from the Results table
[19:09:45] *** Joins: Hackerpcs (~user@user/hackerpcs)
[19:10:17] <bjs> gulzar: the results table isn't there at all? or doesn't have any rows? or what?
[19:11:00] <jamwil> You can verify for yourself: https://replit.com/join/xggskpheqf-jamwil
[19:11:03] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 258 seconds)
[19:11:26] <stdout> I'm wanting to use pgmagick to convert files from one type to another. I came across this https://stackoverflow.com/questions/33405611/pgmagick-convert-an-image-to-png-foramt which references "PNG32" as the method to encode the file being written. However, I can't find any documentation showing this or other options. Would someone point me in the right direction please? Thanks
[19:12:09] *** Joins: setuid (sid191390@canonical/setuid)
[19:12:53] *** Quits: stats4647 (~stats4647@ip174-67-220-13.oc.oc.cox.net) (Remote host closed the connection)
[19:13:49] *** Joins: stats4647 (~stats4647@ip174-67-220-13.oc.oc.cox.net)
[19:14:15] *** Joins: arinov (~arinov@213.194.126.155)
[19:14:19] <sunny93> jinsun change to "operator.thing" doesn't make much difference, FYI. ;P
[19:14:50] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[19:15:13] <gulzar> jamwil: Ah... small bug. It's working.
[19:15:18] <gulzar> jamwil: Thank You
[19:15:26] <gulzar> MCMiiic: thank You
[19:15:31] <jamwil> gulzar: You're welcome
[19:16:39] <NoImNotNineVolt> tmlk: isn't that the result my code gives?
[19:17:30] <gulzar> jamwil: I was trying to give sequencce. It doesn't reutrn data. But id works, that's why
[19:18:20] *** Quits: stats4647 (~stats4647@ip174-67-220-13.oc.oc.cox.net) (Ping timeout: 258 seconds)
[19:19:11] <jinsun> sunny93: ah well was worth a try anyway, so then cython also wouldn't have helped much (unless you compiled the part where you call the functions too)
[19:20:08] <tmlk> NoImNotNineVolt: nope
[19:20:12] <NoImNotNineVolt> oh, lol, no, it doesn't work at all. i'm an idiot :P
[19:20:23] <sunny93> I will try cython later. Now I am thinking how to try pypy.
[19:21:17] *** Quits: Ilyu (~quassel@78.202.228.230) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[19:21:37] <jinsun> yeah better to try pypy first
[19:22:24] *** Quits: MCMiiic (~mcmic@63.120.199.77.rev.sfr.net) (Quit: Konversation terminated!)
[19:23:15] *** Quits: vimart (~vimart@239.218-30-62.static.virginmediabusiness.co.uk) (Quit: WeeChat 2.8)
[19:25:05] <Zweimer> Autogenerated Qt-code has often CamelCase naming conventions. My PyCharm is then underlining the functionname and says: "function name should be lowercase". How do you deal with this? Ignore the underlined naming (a lot of warnings), deactivate this function or rename the function names?
[19:25:08] *** Quits: iflema (~ian@user/iflema) (Quit: iflema)
[19:26:36] <SnoopJ> Zweimer, if you don't care about the style rule, you can disable it in the lint, otherwise make a change to the source
[19:26:44] <jinsun> disable the warning in pylint config (or configure the regex it uses to determine valid names)
[19:27:59] <Zweimer> Well, maybe my question is more like: Should I follow the "best-practice" or are they overly-strict?
[19:28:11] *** Quits: cmbengue (~Thunderbi@207.191.249.160) (Quit: Thanks, see you later.)
[19:28:23] <NoImNotNineVolt> tmlk: https://bpa.st/A3ZQ
[19:28:47] <NoImNotNineVolt> tmlk: my initial solution failed to account for the structure of d1
[19:29:29] <NoImNotNineVolt> i saw dicts like {"name": "alfa", "value": "1"} and apparently my mind interpreted that as {"alfa": "1"} :P
[19:30:00] *** Joins: cmbengue (~Thunderbi@207.191.249.160)
[19:30:14] <NoImNotNineVolt> note, the asymptotic performance of this solution is abysmal :P
[19:30:34] *** Quits: isomorpheus (~isomorphe@c-73-53-247-25.hsd1.fl.comcast.net) (Quit: Leaving)
[19:31:25] *** Joins: FluffyMask (~masque@user/fluffymask)
[19:31:59] <aphysically> jinsun: https://github.com/willmcgugan/rich/pull/1604#issuecomment-945640943
[19:32:09] <aphysically> descriptor so like __get__ and __set__ in a new class?
[19:32:21] <aphysically> (consoledimensions class)
[19:32:45] <aphysically> I really thought that wouldn't work
[19:34:01] <dontyouloveshort> hi
[19:34:37] <dontyouloveshort> how do you run pytest with sqlite as memory database in the backgroud for tests?
[19:35:13] <jinsun> aphysically: so mypy will change that behavior it seems, so it will be breaking change in the future :D
[19:36:29] *** Quits: legola (~legola@46.235.101.181) (Remote host closed the connection)
[19:36:34] <jinsun> didn't get how the descriptor thing will work, but seems like an oversight by the type checkers that can be exploited to work around this
[19:37:27] *** Quits: DnzAtWrk (~DnzAtWrk@mobile-access-6df047-84.dhcp.inet.fi) (Quit: Leaving)
[19:37:30] *** Quits: Lando-SpacePimp (~Lando-Spa@user/lando-spacepimp) (Ping timeout: 258 seconds)
[19:37:32] *** Joins: Barones (~Barones@2804:48dc:8500:0:6904:c7e7:9177:1a9c)
[19:37:56] <aphysically> "TBH My motivation to fix all Pyright errors is low, unless they indicate legitimate bugs. Getting two linters to agree doesn't always make better code." -> I've tried to be really sensitive to this
[19:38:14] *** Quits: fflam (~mdt@ip72-220-60-77.sd.sd.cox.net) (Quit: WeeChat 3.3)
[19:38:24] <bjs> aphysically: sensitive to it?  what do you mean by that
[19:38:55] <aphysically> by aggressively bringing up bugs or behavior changes with pyright and not blindly adding code to workaround a pyright error without verifying it's a genuine bug or limitation of mypy that it couldn't see it
[19:39:10] *** Joins: jay-m1262 (~jay-m@154.72.163.187)
[19:39:28] <jinsun> changing it to use descriptors instead of property seems more work than just waiting for type checkers to support it I think (though convincing Eric is a lot of work)
[19:39:39] *** Joins: fflam (~mdt@ip72-220-60-77.sd.sd.cox.net)
[19:39:45] *** Joins: stormdancer (~stormdanc@185.245.86.121)
[19:39:52] <aphysically> well, pyright does support the code as-is
[19:39:54] *** Quits: The_Jag_ (~The_Jag@host-80-183-32-131.business.telecomitalia.it) (Read error: Connection reset by peer)
[19:39:58] <aphysically> so no convincing needed there
[19:40:06] <aphysically> well, it supports it for downstream users I mean
[19:40:14] <aphysically> (which is the concern here)
[19:40:14] *** Joins: chronus (~chronus@user/chronus)
[19:41:07] <jinsun> yeah but you want to eliminate pyright errors in rich code now right? that will require convincing pyright
[19:41:23] *** Joins: kickingvegas (~cchoi@c-24-5-40-20.hsd1.ca.comcast.net)
[19:41:31] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[19:41:54] *** Quits: Julian (~tos9@python/site-packages/Julian) (Quit: leaving)
[19:42:25] *** Joins: The_Jag (~The_Jag@host-80-183-32-131.pool80183.interbusiness.it)
[19:42:26] <aphysically> I don't think that would happen very easily, and besides I'm not convinced it's a bad lint by pyright anyway
[19:42:27] *** Joins: paulbx (~paulbx@172.103.72.107)
[19:42:38] <jinsun> aphysically: a very simple workaround, change both getter and setter to Any :D
[19:42:52] <vladoski> do I have to explicitly call row._asdict() in sqlalchemy to have the row as a dict?
[19:42:57] <jinsun> nothing will complain there then
[19:43:00] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 260 seconds)
[19:43:19] <aphysically> like, if we forget a belief that this asymmetry could have a genuine usage it's still very likely bad style and something you would want an aggressive linter to complain about, but what linter should do it? probably the one that understands types, right?
[19:43:33] *** Joins: Moosadee (~Moosadee@136.32.155.193)
[19:43:58] *** Quits: gulzar (~gulzar@123.201.100.50) (Ping timeout: 260 seconds)
[19:44:01] <aphysically> so it totally makes sense to have it in a type checker, but maybe it really makes sense to just disable the check
[19:44:20] *** Lord_of_Life_ is now known as Lord_of_Life
[19:44:30] <aphysically> s/but/so/
[19:44:53] *** Joins: stats4647 (~stats4647@ip174-67-220-13.oc.oc.cox.net)
[19:44:54] *** Quits: jay-m1262 (~jay-m@154.72.163.187) (Ping timeout: 260 seconds)
[19:46:27] <aphysically> jinsun: https://twitter.com/willmcgugan/status/1450022493234810882
[19:46:30] *** Joins: emf (~emf@2620:10d:c090:400::5:75e7)
[19:47:33] *** Joins: theseb (~theseb@47-220-214-54.cnrocmta03.res.dyn.suddenlink.net)
[19:48:13] *** Quits: freeman_h (~freeman_h@94.5.86.162) (Read error: Connection reset by peer)
[19:49:01] *** Quits: moose (~moose@user/moose) (Read error: Connection reset by peer)
[19:49:20] *** Joins: moose (~moose@user/moose)
[19:51:03] *** Joins: freeman_h (~freeman_h@94.5.86.162)
[19:51:18] *** Quits: shad (~shad@user/shad) (Quit: WeeChat 3.0)
[19:51:31] *** Quits: masta`` (~oyster@user/masta/x-2645138) (Remote host closed the connection)
[19:52:12] <jinsun> yeah it is a bit debatable, on one hand it is rejecting valid code that even uses correct types according to the setter definition
[19:52:38] *** _subopt is now known as subopt
[19:53:08] *** Joins: zln (~zln@c80-217-230-193.bredband.tele2.se)
[19:54:01] <jinsun> but on the other hand it allows x = y where x is different type than y, which you don't expect
[19:54:14] *** Quits: stats4647 (~stats4647@ip174-67-220-13.oc.oc.cox.net) (Ping timeout: 260 seconds)
[19:54:32] *** Quits: mozgalom (~mozgalom@IPnet-gw.157.157.97.111.simnet.is) (Quit: SO LONG SUCKERS!)
[19:54:41] *** Quits: LordVan (~lordvan@gentoo/developer/lordvan) (Quit: Leaving)
[19:55:08] *** Quits: vladoski (~vladoski@2001:b07:add:d406:7a31:77d6:c6b0:2247) (Remote host closed the connection)
[19:55:26] *** Joins: masta`` (~oyster@user/masta/x-2645138)
[19:56:27] *** Joins: Lando-SpacePimp (~Lando-Spa@user/lando-spacepimp)
[19:56:40] *** Quits: freeman_h (~freeman_h@94.5.86.162) (Ping timeout: 258 seconds)
[19:57:08] *** Joins: fedenix (~fedenix@gateway/tor-sasl/fedenix)
[19:57:36] <jinsun> when doing x = y there is no way to see what valid values are allowed other than seeing the setter code, so the users would mostly assume y is same type as x
[19:58:09] <jinsun> (well I guess they can randomly check in the repl that tuple works instead of the NamedTuple instance, but I am talking about people who type check the code and don't run it before it passes)
[19:58:14] *** Joins: freeman_h (~freeman_h@94.5.86.162)
[19:58:41] *** Joins: gulzar (~gulzar@123.201.100.50)
[19:58:58] <stdout> anyone know of a library to convert pdf to tiff that can use a file-like object as opposed to a string path as file input?
[19:59:32] <stdout> i was trying pgmagick but it looks like it will only work with files directly from disk.
[20:00:02] *** Quits: rickybob (rickybob@gateway/vpn/protonvpn/rickybob) (Quit: Leaving)
[20:00:02] <Jackal-o-lantern> stdout: they can usually take either kind
[20:00:07] *** Quits: TheHermann (~TheHerman@gateway/tor-sasl/thehermann) (Quit: Leaving)
[20:00:22] *** Quits: zln (~zln@c80-217-230-193.bredband.tele2.se) (Quit: WeeChat 3.2)
[20:01:24] <Jackal-o-lantern> I guess if that's really true you could also use /dev/shm
[20:03:12] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[20:03:36] <Jackal-o-lantern> Does anyone know the most efficient way to find the indices of all the locations of a substring in a string?
[20:04:45] *** Joins: vpoat (~vpoat@113.185.41.206)
[20:05:08] *** Joins: AlanMD (~AlanMD@193.105.140.131)
[20:05:16] <jinsun> aphysically: pyright doesn't work here really https://mypy-play.net/?mypy=latest&python=3.10&gist=1cb10416c97745cd4b7bc9dcc458109e&flags=show-error-context%2Cshow-error-codes
[20:05:25] *** Quits: Haxxa (~Haxxa@89nnjg0xckz9ggn6r5xm.ip6.superloop.com) (Quit: Haxxa flies away.)
[20:05:51] <aphysically> isn't the error only on the library side though?
[20:06:06] <jinsun> aphysically: even though it allows the assignment, if you put reveal_type(a.size) before and after the assignment it will be the Namedtuple before but tuple later
[20:06:41] <aphysically> spicy, open up a different execution context and check if it's back to namedtuple
[20:07:14] *** Joins: Haxxa (~Haxxa@122.199.45.48)
[20:07:18] <jinsun> it complains about a.size.width type is unknown after that
[20:07:45] <jinsun> aphysically: different execution context?
[20:07:55] *** Joins: djapo (~archangel@user/djapo)
[20:07:57] <aphysically> okay so
[20:08:10] *** Joins: syrius (syrius@titan.stormtek.net)
[20:08:56] *** Quits: freeman_h (~freeman_h@94.5.86.162) (Ping timeout: 258 seconds)
[20:09:14] <jinsun> ah no it complains Cannot access member "width" for type "tuple[Literal[4], Literal[5]]"  Member "width" is unknown
[20:09:23] *** Joins: whatsupdoc (~whatsupdo@148.64.18.46)
[20:09:26] <stdout> Jackal-o-lantern, I get this error https://paste.centos.org/view/5d5bd85f from this code https://paste.centos.org/view/15d65d5e
[20:09:33] <jinsun> not type is unknown, that I get with reveal_type
[20:10:05] <aphysically> jinsun: ctl-f execution context here: https://github.com/microsoft/pyright/issues/2432
[20:10:06] *** Quits: vpoat (~vpoat@113.185.41.206) (Ping timeout: 260 seconds)
[20:10:09] *** Quits: stormdancer (~stormdanc@185.245.86.121) (Remote host closed the connection)
[20:10:10] <aphysically> (and an interesting issue to read)
[20:10:49] *** Quits: paulbx (~paulbx@172.103.72.107) ()
[20:12:05] <jinsun> so execution context = scope ?
[20:12:21] <aphysically> yeah I think so
[20:12:29] <aphysically> but I'm not *completely* certain :)
[20:12:37] *** Joins: adder (~adder@user/adder)
[20:13:04] *** Joins: redrum88 (~redrum88@user/redrum88)
[20:14:22] <aphysically> by the way did you check how it works for the descriptor code? (does it do the same narrowing?) https://gist.github.com/adamchainz/412d6bcad3232c6edaf69f9e4b741713
[20:14:38] <aphysically> I haven't started playing with the descriptors yet, about to in a little bit
[20:15:30] <jinsun> aphysically: okay if I define set_size(a) and set there then it is ConsoleDimension before and after
[20:16:25] <aphysically> heh
[20:16:35] *** Quits: Fiji (~Fiji@user/fiji) (Ping timeout: 264 seconds)
[20:16:52] *** Joins: bancroft (~bancroft@bras-base-mtrlpq02hsy-grc-06-174-93-254-50.dsl.bell.ca)
[20:17:12] <jinsun> but that just tell that my suggestion of providing a Java style setter method for tuples would be the thing that really works, and keep the "real" setter type same as getter
[20:17:26] <jinsun> haven't played with the descriptor code though
[20:17:40] <jinsun> maybe that would also work
[20:17:52] <bancroft> is there a quick datetime timedelta formula to filter out all dates before today at 00:00 UTC?
[20:18:07] <bancroft> as in ignore today, keep everything older
[20:18:54] *** Quits: donald1 (~donald@88.5.131.77.rev.sfr.net) (Ping timeout: 258 seconds)
[20:19:51] *** Quits: jarthur_ (~jarthur@2603-8080-1540-002d-cc13-c0cf-bf23-08c5.res6.spectrum.com) (Quit: jarthur_)
[20:20:26] *** Quits: justm3 (~Username@82-171-42-20.fixed.kpn.net) (Read error: Connection reset by peer)
[20:20:28] *** Joins: Jong (~Jong@2620:10d:c090:400::5:fbf2)
[20:21:04] *** Joins: justm3 (~Username@82-171-42-20.fixed.kpn.net)
[20:21:58] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 258 seconds)
[20:23:48] *** Joins: fikran (~fikran@user/fikran)
[20:24:04] *** Joins: cemotyz09 (~cemotyz09@2603-8081-6300-9e12-bd07-9081-ceb6-d444.res6.spectrum.com)
[20:24:13] *** Quits: gusto (~Augustus@109.255.100.54) (Quit: Textual IRC Client: www.textualapp.com)
[20:24:15] *** Joins: freeman_h (~freeman_h@2a02:c7f:fc54:ba00:d9ee:289d:b7fe:7dfd)
[20:25:00] *** Quits: Haxxa (~Haxxa@122.199.45.48) (Quit: Haxxa flies away.)
[20:26:29] *** Joins: Haxxa (~Haxxa@89nnjg0xckz9ggn6r5xm.ip6.superloop.com)
[20:26:55] *** Joins: han-solo (~hanish@user/han-solo)
[20:28:58] <Wooble> bancroft: (not using timedelta) datetimes = [dt for dt in datetimes if dt.date() < datetime.date.today()]
[20:29:25] <bancroft> Wooble: thank you for releaving me of my monday morning stupidity :)
[20:29:34] <jinsun> Jackal-o-lantern: you can do str.find in a loop, change the starting index to be the thing from previous iteration +1, and stop when you get -1
[20:29:51] <Wooble> bancroft: err... might be broken because it doesn't take the UTC requirement into account.
[20:30:13] <bancroft> Wooble: yeah that's no big, quick fix
[20:30:40] *** Quits: chronus (~chronus@user/chronus) (Quit: bye)
[20:30:50] *** Quits: Haxxa (~Haxxa@89nnjg0xckz9ggn6r5xm.ip6.superloop.com) (Client Quit)
[20:31:20] *** Joins: Haxxa (~Haxxa@122.199.45.48)
[20:31:32] *** Quits: freeman_h (~freeman_h@2a02:c7f:fc54:ba00:d9ee:289d:b7fe:7dfd) (Ping timeout: 268 seconds)
[20:31:42] *** dcaro is now known as dcaro_away
[20:32:24] *** Quits: ali1234 (~al@user/ali1234) (Remote host closed the connection)
[20:32:25] *** Joins: ali12341 (~al@user/ali1234)
[20:32:58] *** Joins: blackout69 (~blackout6@37.183.230.86)
[20:35:00] *** Quits: Moosadee (~Moosadee@136.32.155.193) (Ping timeout: 258 seconds)
[20:36:15] *** Quits: Haxxa (~Haxxa@122.199.45.48) (Remote host closed the connection)
[20:36:32] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 258 seconds)
[20:36:40] *** Joins: Haxxa (~Haxxa@122.199.45.48)
[20:38:12] *** Quits: rendar (~rendar@user/rendar) (Quit: Leaving)
[20:40:26] *** Quits: chele (~chele@user/chele) (Remote host closed the connection)
[20:41:12] *** Joins: jay-m1262 (~jay-m@154.72.163.187)
[20:41:17] *** Joins: pro_z_ (~pro_z@37.214.46.4)
[20:42:48] *** Joins: chuck_ (~chuck@181.191.143.100)
[20:43:26] *** Joins: betuxy (~betuxy@158.181.77.59)
[20:43:38] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[20:43:58] <betuxy> Hey guys i have a question. Im curious why i get all elements in output although they are in the list? http://hastebin.com/raw/afuwusefos
[20:43:59] <infobob> https://bpaste.net/VDCA (repasted for betuxy)
[20:44:12] *** Quits: semeion (~semeion@user/semeion) (Ping timeout: 258 seconds)
[20:44:17] *** Joins: runelind (~runelind@user/runelind)
[20:44:22] *** Joins: Fiji (~Fiji@user/fiji)
[20:44:38] *** Quits: pro_z (~pro_z@37.214.47.106) (Ping timeout: 260 seconds)
[20:44:53] <ChrisWarrick> betuxy: your list contains strings, your range has integers
[20:45:17] <betuxy> oh my god, its one these days. thanks
[20:45:24] <betuxy> one of*
[20:45:38] *** Joins: nomic (~nomic@2a00:23c6:9902:2401:3c3b:5ff:2c65:95bc)
[20:46:17] *** Quits: han-solo (~hanish@user/han-solo) (Quit: Lost terminal)
[20:48:50] *** Quits: runelind (~runelind@user/runelind) (Ping timeout: 260 seconds)
[20:49:04] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[20:49:14] *** Quits: Zweimer (~Zweimer@2a02:908:d20:26e0:3c3f:7182:f9c0:2044) (Quit: Client closed)
[20:49:58] *** Joins: Moosadee (~Moosadee@136.32.155.193)
[20:50:03] *** Joins: runelind (~runelind@user/runelind)
[20:50:29] *** Joins: water_27300935_ (~water_273@182.90.129.243)
[20:51:06] *** Quits: djapo (~archangel@user/djapo) (Ping timeout: 258 seconds)
[20:52:22] *** Quits: DocMors (~DocMors@web.crypticity.net) (Quit: ZNC 1.6.6+deb1ubuntu0.2 - http://znc.in)
[20:52:44] *** Quits: gulzar (~gulzar@123.201.100.50) (Quit: Konversation terminated!)
[20:52:52] *** Quits: sunny93 (~sunny93@wireguard/tunneler/sunny93) (Quit: Ping timeout (120 seconds))
[20:52:53] *** Joins: vd (~vd@bras-base-mtrlpq2848w-grc-41-70-53-240-121.dsl.bell.ca)
[20:52:55] <jinsun> aphysically: the descriptor has the same problem with reveal_type, it does silence all warrning in the class definition and for the users if they don't use the value after setting it
[20:53:10] *** Joins: sunny93 (~sunny93@wireguard/tunneler/sunny93)
[20:54:05] *** Joins: Kaya (~KC@static.89.202.216.95.clients.your-server.de)
[20:54:09] *** Joins: freeman_h (~freeman_h@94.5.86.162)
[20:54:31] *** Parts: freeman_h (~freeman_h@94.5.86.162) ()
[20:55:12] <jinsun> and looks like it solves the problems for mypy users, mypy doesn't change the type based on the assignment but uses the getter type always
[20:56:14] *** Joins: Macuser (~Macuser@216.30.159.201)
[20:56:31] *** Joins: semeion (~semeion@user/semeion)
[20:56:34] *** Quits: chuck_ (~chuck@181.191.143.100) (Quit: leaving)
[20:57:15] *** Quits: betuxy (~betuxy@158.181.77.59) (Quit: Connection closed)
[20:58:18] *** Quits: Linux77 (~Linux7_7@186.233.182.243) (Ping timeout: 265 seconds)
[20:58:34] *** Quits: Barones (~Barones@2804:48dc:8500:0:6904:c7e7:9177:1a9c) (Remote host closed the connection)
[20:58:35] *** Joins: Seiryu (~Seiryuu@ip174-103-176-143.adsl2.static.versatel.nl)
[20:59:40] *** Joins: seabass (~seabass@user/seabass)
[20:59:44] *** Joins: DocMors (~DocMors@web.crypticity.net)
[20:59:55] *** Quits: Seiryuu (~Seiryuu@ip174-103-176-143.adsl2.static.versatel.nl) (Ping timeout: 258 seconds)
[21:00:34] *** Joins: Barones (~Barones@2804:48dc:8500:0:6904:c7e7:9177:1a9c)
[21:00:41] <aphysically> okay, since maintainer wants to move forward with descriptors we can make a PR with descriptors for this and the table.py one since it has the same problem for downstream mypy users
[21:00:53] *** Joins: Ilyu (~quassel@166.215.82.79.rev.sfr.net)
[21:01:10] <seabass> Hello! Under what circumstances is it possible to set a docstring manually (with thing.__doc__ = """Documentation string""")?
[21:01:10] <aphysically> I mentioned I plan to do that after digesting the descriptors: https://github.com/willmcgugan/rich/pull/1604#issuecomment-945988579
[21:01:12] *** Joins: kop (~user@karlpinc-net.karlpinc.com)
[21:01:36] *** Quits: orangeboxcutter (~orange@user/orangeboxcutter) (Ping timeout: 276 seconds)
[21:01:43] <aphysically> I was a bit surprised by the typing of the descriptor arguments so I will need to refresh myself on what's going on there first -> https://gist.github.com/adamchainz/412d6bcad3232c6edaf69f9e4b741713
[21:02:28] <water_27300935_> x = 2, I try to measure execution time of timeit.timeit('x ** 3')
[21:02:30] <water_27300935_> but rise 'x' is not defined, how to pass 'x' to
[21:02:31] *** Quits: deepy (deepy@user/deepy) (Quit: meow)
[21:02:36] *** Joins: orangeboxcutter (~orange@user/orangeboxcutter)
[21:02:48] <water_27300935_> timeit?
[21:03:00] <water_27300935_> timeit.timeit('for i in range(50): pass') is okay
[21:03:02] *** Joins: deepy (deepy@user/deepy)
[21:03:36] <aphysically> and try to understand the set_name stuff
[21:03:47] *** Quits: Haxxa (~Haxxa@122.199.45.48) (Quit: Haxxa flies away.)
[21:04:18] *** Joins: Haxxa (~Haxxa@122.199.45.48)
[21:04:42] *** Joins: pr100 (~pr100@cpc92728-cmbg20-2-0-cust160.5-4.cable.virginm.net)
[21:06:24] <jinsun> aphysically: https://docs.python.org/3/howto/descriptor.html, if you weren't reading that already
[21:07:31] *** Joins: ravindUwU (~ravindUwU@n58-105-88-176.sun3.vic.optusnet.com.au)
[21:08:30] *** Quits: gitesh (uid423739@id-423739.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[21:08:47] <jinsun> it is very confusing even after reading that, I just avoid those always, I would have just fixed the type or ignored it instead of going for descriptors here
[21:09:57] *** Joins: Naan (~naan@user/naan)
[21:09:59] *** Quits: carl--- (~carl-@c-138ee555.02-180-73746f39.bbcust.telenor.se) (Ping timeout: 264 seconds)
[21:09:59] <bjs> water_27300935_: timeit takes a `setup` argument.
[21:10:05] <bjs> water_27300935_: see the docs at https://docs.python.org/3/library/timeit.html#timeit.timeit  for how to use it
[21:12:11] *** Quits: NeilRG (~NeilRG@192.222.196.111) (Ping timeout: 245 seconds)
[21:13:01] *** Joins: yaalon (~yaalon@2600:1700:9450:2d30:ec74:8c39:7366:8759)
[21:14:03] *** Joins: GreenResponse (~tomek@r-45-155-148-237.gpon.bialnet.pl)
[21:14:06] *** Quits: jay-m1262 (~jay-m@154.72.163.187) (Ping timeout: 258 seconds)
[21:14:51] *** Quits: pr100 (~pr100@cpc92728-cmbg20-2-0-cust160.5-4.cable.virginm.net) (Ping timeout: 256 seconds)
[21:15:29] *** Joins: jay-m1262 (~jay-m@154.72.163.187)
[21:17:06] *** Quits: Barones (~Barones@2804:48dc:8500:0:6904:c7e7:9177:1a9c) (Remote host closed the connection)
[21:18:26] *** Joins: gr33n7007h (~gr33n7007@user/gr33n7007h)
[21:19:11] *** Joins: Barones (~Barones@2804:48dc:8500:0:5635:5e6d:7349:856)
[21:19:35] *** Quits: runelind (~runelind@user/runelind) (Ping timeout: 264 seconds)
[21:19:37] *** Joins: stats4647 (~stats4647@ip174-67-220-13.oc.oc.cox.net)
[21:20:02] *** Joins: magla (~gelignite@55d45a4d.access.ecotel.net)
[21:20:14] *** Joins: Hexmind (~Hexmind@modemcable049.25-131-66.mc.videotron.ca)
[21:21:34] <sunny93> god pypy is quite hard to set up and use
[21:21:38] <sunny93> I gave up
[21:21:56] *** Quits: ravindUwU (~ravindUwU@n58-105-88-176.sun3.vic.optusnet.com.au) (Quit: KTHXBAI)
[21:22:02] <sunny93> so few materials could be found online
[21:22:15] <Wooble> are you on windows?
[21:22:24] <sunny93> fresh install ubuntu
[21:22:37] <Wooble> can't you just apt install pypy?
[21:23:22] <sunny93> https://dpaste.com/9BNMEDVAW , this is error I got
[21:23:35] *** Joins: RougeR (~rougex250@user/rouger)
[21:23:47] <sunny93> I download pypy from offical site and installed some packages.
[21:25:17] *** Joins: stormdancer (~stormdanc@185.245.86.122)
[21:25:54] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[21:26:12] *** Quits: Ivii (~Ivyy@2001:a61:13f1:cb01:e587:a1e:b0de:19a5) (Remote host closed the connection)
[21:27:14] <jinsun> pandas has C extensions compiled with cython, those don't work well with pypy
[21:29:38] *** Joins: Auron (~Auron956@user/auron)
[21:29:42] *** Joins: runelind (~runelind@user/runelind)
[21:29:47] *** Quits: stormdancer (~stormdanc@185.245.86.122) (Ping timeout: 264 seconds)
[21:30:43] *** Joins: linux_dream (~isaac@2a01:e0a:7:60e0:bcc4:b32c:9221:831d)
[21:30:55] *** Joins: zln (~zln@c80-217-230-193.bredband.tele2.se)
[21:31:20] *** Joins: fannagoganna (uid110488@id-110488.tinside.irccloud.com)
[21:32:32] <jinsun> though if you were able to install it in pypy, it should have worked? I thought cython compiled stuff won't even be installable on pypy
[21:32:55] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[21:33:11] *** Quits: elibrokeit (eschwartz@archlinux/bugwrangler/eschwartz) (Quit: A random quit message)
[21:33:24] *** Joins: elibrokeit (eschwartz@archlinux/bugwrangler/eschwartz)
[21:33:57] *** Quits: holgersson (~quassel@user/holgersson) (Quit: “Format C:........[Done]“)
[21:34:18] *** Quits: loganrun (~quantum@45.131.192.178) (Quit: Leaving)
[21:34:43] *** Joins: pavlos (~pavlos@ubuntu/member/pavlos)
[21:34:47] <nicode> howdy! is there a way to pop the top element of an array and then shift all the elements so that len() accurately and the (e.g. if I pop(0) I want element 1 to become element 0, element 2 to become element 1, etc)
[21:35:00] *** Quits: bloody (~bloody@user/bloody) (Quit: Always focus on how far you've come, rather than how far you have left to go)
[21:35:21] <SnoopJ> nicode, you might consider using a collections.deque() for this
[21:35:32] <pavlos> got a python q, can I paste my code (11 lines) ?
[21:35:38] <nicode> kk, I'll look into that, thanks SnoopJ
[21:35:40] <jinsun> pavlos: not here
[21:35:53] <jinsun> pavlos: https://bpa.st/+python
[21:35:55] <Wooble> nicode: what do you mean by "array"? list.pop(0) does literally that already.
[21:35:56] <SnoopJ> nicode, with a list, you can do `lst = lst[1:]`, but this makes a new list and might not be as appropriate if your data are large
[21:35:59] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[21:36:20] <SnoopJ> but yea, list.pop(0) should do what you said, so if it's not, show us some code
[21:36:26] *** Joins: holgersson (~quassel@user/holgersson)
[21:36:26] *** Quits: nomic (~nomic@2a00:23c6:9902:2401:3c3b:5ff:2c65:95bc) (Quit: Leaving)
[21:36:32] <pavlos> https://bpa.st/QAAA
[21:37:00] *** Joins: bloody (~bloody@user/bloody)
[21:37:43] <Wooble> pavlos: your function should return the result, you can't reassign a parameter inside the function and reflect it outside.
[21:39:03] <nicode> SnoopJ: I'll do a bit more debuggin to make sure I'm accurately depicting what's going on.
[21:39:07] <pavlos> Wooble: you mean result should be global to be seen from outside?
[21:39:15] <jinsun> pavlos: return findBinar(...) in line 6
[21:39:27] <pavlos> let me try
[21:39:31] <jinsun> and print(findBinary(...)) instead of line 10 and 11
[21:40:49] <pavlos> Wooble: jinsun: perfect, ty
[21:42:28] *** Joins: yotsuba (~yotsuba@93-172-241-53.bb.netvision.net.il)
[21:42:31] *** Quits: Donitz (~Donitz@85-156-203-108.elisa-laajakaista.fi) (Remote host closed the connection)
[21:43:46] *** Joins: ckdCreations (~ckdCreati@147.55.133.135)
[21:44:29] *** Quits: leitz (~LeamHall@cpe-173-172-58-72.tx.res.rr.com) (Quit: nappy time)
[21:45:15] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[21:47:17] <aphysically> jinsun: did descriptors exist before @property? It seems like property decorators obviate the vast majority of basic descriptor usage
[21:47:36] *** Quits: yaalon (~yaalon@2600:1700:9450:2d30:ec74:8c39:7366:8759) (Remote host closed the connection)
[21:47:50] <jinsun> property is implemented using descriptors so no it didn't exist before them
[21:48:02] *** Joins: Donitz (~Donitz@85-156-203-108.elisa-laajakaista.fi)
[21:48:04] <energizer> you answered backwards jinsun
[21:48:12] *** Joins: yaalon (~yaalon@2600:1700:9450:2d30:ec74:8c39:7366:8759)
[21:48:29] <energizer> aphysically: instance methods are implemented using descriptors
[21:49:20] *** Quits: lucad111 (~lucad111@51-148-40-1.dsl.zen.co.uk) (Quit: Leaving)
[21:49:25] *** Joins: mickey80 (~user@user/mickey)
[21:49:25] *** Quits: orangeboxcutter (~orange@user/orangeboxcutter) (Remote host closed the connection)
[21:49:28] <nicode> SnoopJ: array.pop(0) is working correctly, something else is failing.
[21:49:34] <aphysically> so it's really just type checkers that special case properties by not treating in line with descriptors
[21:49:56] *** Joins: Payam (~Payam@c83-250-236-236.bredband.tele2.se)
[21:50:18] <Roey> Payam: o/
[21:50:24] *** Joins: orangeboxcutter (~orange@user/orangeboxcutter)
[21:50:25] <energizer> aphysically: what do the type checkers do
[21:50:27] <energizer> ?
[21:50:27] <Roey> Payam: you know this channel on Youtube called Dr. Payam's channel
[21:50:30] <Roey> Payam: it's all about math
[21:50:53] <Payam> Roey, Im not that guy no. Ive been asked that question before
[21:51:08] <Roey> oh, ok
[21:51:10] <Roey> probably by me
[21:51:16] <Payam> maybe hhh
[21:51:21] <Roey> I think I remember having asked you this before, in fact.
[21:51:39] *** Quits: mickey8 (~user@user/mickey) (Ping timeout: 276 seconds)
[21:51:40] *** mickey80 is now known as mickey8
[21:51:41] *** Quits: SuperLag (~akulbe@user/superlag) (Ping timeout: 264 seconds)
[21:52:08] <jinsun> well type checkers don't allow a lot of valid code, and pyright still doesn't work properly with the descriptor workaround
[21:53:18] *** Joins: SuperLag (~akulbe@user/superlag)
[21:53:18] <jinsun> energizer: type checkers don't allow setter to take different arguement type than what getter returns
[21:53:27] *** Quits: tmlk (~tmlk@223.red-83-40-223.dynamicip.rima-tde.net) (Quit: Leaving)
[21:53:40] <aphysically> mypy implements properties with special cases that aren't compatible with getter/setter
[21:53:48] <aphysically> one of those incompatibilities is what we ran into here: https://github.com/python/mypy/issues/3004
[21:54:12] <SnoopJ> nicode, note that Python lists are not arrays in the sense that they don't have many of the properties "array" implies in other languages. But sounds like you're on the trail of a bug elsewhere.
[21:55:30] *** Quits: yaalon (~yaalon@2600:1700:9450:2d30:ec74:8c39:7366:8759) (Ping timeout: 258 seconds)
[21:57:17] <nicode> SnoopJ: yeah, I thought maybe it wasn't behaving as expected in this way but further debugging tells me that this isn't the issue, it's something else.
[21:57:59] *** Quits: SuperLag (~akulbe@user/superlag) (Ping timeout: 264 seconds)
[21:58:47] *** Quits: maromau (~mauro@151.62.228.166) (Quit: Konversation terminated!)
[21:59:03] *** Joins: Akuli (~Akuli@87-94-110-226.bb.dnainternet.fi)
[21:59:49] *** Quits: ponyofdeath (~vladi@2606:6000:cfc0:2b:9cf9:caf8:f20d:1053) (Quit: WeeChat 3.1)
[21:59:58] *** Joins: xaltsc (~xaltsc@user/xaltsc)
[22:00:23] *** Joins: yaalon (~yaalon@2600:1700:9450:2d30:ec74:8c39:7366:8759)
[22:00:27] <SnoopJ> 👍
[22:00:53] *** Parts: pavlos (~pavlos@ubuntu/member/pavlos) (Leaving)
[22:02:32] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[22:03:07] *** Joins: rpkilby (~rpkilby@ec2-34-252-84-235.eu-west-1.compute.amazonaws.com)
[22:03:47] *** Joins: SuperLag (~akulbe@user/superlag)
[22:03:52] *** Joins: audiobirb (~audio@2603-8081-1800-1546-aa2c-362e-4508-2aa9.res6.spectrum.com)
[22:04:13] *** Quits: Macuser (~Macuser@216.30.159.201) (Quit: Textual IRC Client: www.textualapp.com)
[22:04:49] *** Quits: Haxxa (~Haxxa@122.199.45.48) (Quit: Haxxa flies away.)
[22:05:08] *** Joins: Haxxa (~Haxxa@89nnjg0xckz9ggn6r5xm.ip6.superloop.com)
[22:06:52] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-d584-6e57-f98b-0941.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[22:07:06] *** Joins: djapo (~archangel@user/djapo)
[22:07:46] *** Quits: gimzmoe (~gimzmoe@user/gimzmoe) (Ping timeout: 258 seconds)
[22:07:50] *** Parts: wedwards (~wedwards@rtr0.17.31.bogert.cyberfusion.cloud) (Textual IRC Client: www.textualapp.com)
[22:08:19] *** Joins: esro (~esro@2a02:120b:2c3a:4620:9859:9385:8ada:e4cf)
[22:12:17] *** Quits: yaalon (~yaalon@2600:1700:9450:2d30:ec74:8c39:7366:8759) (Remote host closed the connection)
[22:12:36] <aphysically> attributes use descriptors too internally? jinsun
[22:12:40] <aphysically> err energizer
[22:12:45] *** Quits: djapo (~archangel@user/djapo) (Ping timeout: 258 seconds)
[22:13:18] <CrtxReavr> You know. . . pprint.pprint() really is garbage.
[22:13:27] <SnoopJ> CrtxReavr, why?
[22:13:28] <energizer> aphysically: functions do
[22:13:46] <energizer> CrtxReavr: yes. i use pprintpp
[22:14:14] *** Quits: Haxxa (~Haxxa@89nnjg0xckz9ggn6r5xm.ip6.superloop.com) (Quit: Haxxa flies away.)
[22:14:20] <energizer> aphysically: observe they have __get__
[22:14:34] *** Joins: Haxxa (~Haxxa@89nnjg0xckz9ggn6r5xm.ip6.superloop.com)
[22:14:40] *** Quits: Payam (~Payam@c83-250-236-236.bredband.tele2.se) (Ping timeout: 258 seconds)
[22:14:47] *** Quits: blindguard (~blindguar@2a02:908:1864:c200::2612) (Quit: Konversation terminated!)
[22:14:59] <energizer> aphysically: which is invoked when accessed as an attribute
[22:15:15] <energizer> aphysically: so you get the bound method on an instance and the function on a class
[22:15:29] *** Joins: Spawns_Carpeting (~Spawns_Ca@user/spawns-carpeting/x-6969421)
[22:16:01] <jinsun> and that is why monkey patching functions and using them like instance methods also works
[22:16:47] *** Joins: yaalon (~yaalon@2600:1700:9450:2d30:ec74:8c39:7366:8759)
[22:18:59] <Ninpo> I've got 2 CSV files, each file has a key column and I want to merge the rows for keys that appear in both. e.g. csv1 has bob,6,has kids,99 and csv2 has bob,12,blue car. Output row I'd like to be bob,6,has kids,99,12,blue car
[22:19:14] <Ninpo> stuck on how to approach this with csv module
[22:19:27] <Ninpo> more from an algorithm perspective
[22:20:33] *** Quits: AlanMD (~AlanMD@193.105.140.131) (Remote host closed the connection)
[22:21:08] <jinsun> read both csvs spearately and make a dicts like {bob: [6, has, kids, 99]} and {bob: [12, blue, car]}
[22:21:13] *** Joins: AlanMD (~AlanMD@193.105.140.131)
[22:21:32] <jinsun> then loop over the keys of one dict and add the value of the other
[22:21:46] <energizer> keys should be tuples
[22:21:51] *** Quits: Haxxa (~Haxxa@89nnjg0xckz9ggn6r5xm.ip6.superloop.com) (Quit: Haxxa flies away.)
[22:21:57] <Ninpo> what do you mean energizer ?
[22:22:06] *** Quits: magla (~gelignite@55d45a4d.access.ecotel.net) (Quit: Stay safe!)
[22:22:23] <jinsun> if more than one key column then yes, I was thinking one key column only so it was str
[22:23:05] <energizer> ^
[22:23:15] *** Joins: ayustae (Thunderbir@gateway/vpn/protonvpn/ayustae)
[22:23:22] <Ninpo> the unique identifier IS a string value, but is the same in both files
[22:23:49] *** Quits: jeho (~jehoshaph@user/jehoshaphat) (Quit: Leaving)
[22:23:59] <CrtxReavr> energizer, I wrote my own for pretty-printing complex dicts (and json).
[22:24:00] <energizer> if you're not trying to make it generalize to other files then that's fine
[22:25:45] *** Joins: Atque (~Atque@user/atque)
[22:26:55] <aphysically> jinsun: is there an advantage to using __dict__ here over getattr and setattr? https://gist.github.com/adamchainz/412d6bcad3232c6edaf69f9e4b741713
[22:27:53] *** Joins: Haxxa (~Haxxa@89nnjg0xckz9ggn6r5xm.ip6.superloop.com)
[22:29:35] <energizer> aphysically: that's the idiom to avoid recursionerror
[22:29:46] <aphysically> __dict__ is?
[22:29:48] <energizer> yes
[22:29:59] *** Quits: sunny93 (~sunny93@wireguard/tunneler/sunny93) (Quit: Ping timeout (120 seconds))
[22:30:02] <aphysically> can you show me an example with the recursion error?
[22:30:22] *** Joins: sunny93 (~sunny93@wireguard/tunneler/sunny93)
[22:30:28] *** Quits: philipp64|work (~philipp64@174.27.28.163) (Remote host closed the connection)
[22:30:33] <jinsun> that same example if you change __dict__ usage
[22:30:40] <energizer> i think if you try setting attributes naively it will recurse
[22:30:43] *** Quits: PJBoy (~PJBoy@user/pjboy) (Quit: Ping timeout: 252 seconds)
[22:30:49] *** Quits: Haxxa (~Haxxa@89nnjg0xckz9ggn6r5xm.ip6.superloop.com) (Remote host closed the connection)
[22:31:09] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 258 seconds)
[22:31:14] <jinsun> getattr and setattr will call __get__ and __set__
[22:31:21] <aphysically> ooohhh, I see
[22:31:42] <aphysically> jinsun: I'm working on an update to eric in an old issue I made
[22:31:50] *** Quits: blackout69 (~blackout6@37.183.230.86) (Quit: Leaving.)
[22:32:38] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[22:32:53] <jinsun> which one? the one about type narrowing Literal?
[22:33:09] *** Joins: fikran (~fikran@user/fikran)
[22:33:22] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[22:33:33] <aphysically> https://github.com/python/mypy/issues/4125
[22:33:37] <aphysically> and how this doesn't work in pyright too?
[22:33:47] *** Joins: Haxxa (~Haxxa@89nnjg0xckz9ggn6r5xm.ip6.superloop.com)
[22:34:03] <aphysically> look, this works in both pyright and mypy: https://mypy-play.net/?mypy=latest&python=3.10&gist=422368c3bd7d8ae4cf584db8d7366e5d
[22:34:20] <aphysically> the only change is you need to make the descriptor class a subclass of the one you want to override
[22:34:35] *** Quits: jay-m1262 (~jay-m@154.72.163.187) (Ping timeout: 264 seconds)
[22:35:10] <jinsun> ah yes that is completely silly reason given by Eric there
[22:35:19] <aphysically> which is a bit awkward (the only reason you have to do that is otherwise type checker throws an error when you set x = YIntType)
[22:35:20] <jinsun> if anything should be not allowed it should be del
[22:35:59] <aphysically> but you see it can be completely worked around with descirptors too can't it? is there anything work with subclassing int just to get the compatibility? or I could cast instead, I guess
[22:36:04] *** Joins: jay-m1262 (~jay-m@129.0.205.222)
[22:36:41] *** Joins: NeilRG (~NeilRG@192.222.196.111)
[22:37:59] *** Joins: control (~v1@user/control)
[22:38:09] <control> hello, why i cant get terminal colors?
[22:38:23] <bjs> control: what terminal colors?
[22:39:02] <control> just want to print in color, ive tried couple examples but its not working
[22:39:10] <bjs> control: what examples did you try that didn't work?
[22:39:17] *** Joins: Macuser (~Macuser@216.30.159.201)
[22:39:56] <aphysically> jinsun: I could bring this up with pyright they might also decide descriptors can't override attributes either :D
[22:39:56] *** Parts: water_27300935_ (~water_273@182.90.129.243) (WeeChat 2.3)
[22:40:15] <control> i want to print colors in built in module. print '\033[1;30mGray like Ghost\033[1;m'
[22:40:29] <control> but im getting ←[1;30mGray like Ghost←[1;m
[22:40:40] *** Quits: bloodninja (~bloodninj@user/bloodninja) (Quit: So long king bowser!)
[22:41:01] <jinsun> aphysically: hmm mypy-play example is get int and set int, so it was fine already with propertly wasn't it?
[22:41:03] <bjs> control: those are ANSI escape sequences,  what terminal are you using?
[22:41:26] *** Joins: bloodninja (~bloodninj@user/bloodninja)
[22:41:31] <control> windows default
[22:41:34] <aphysically> jinsun: no, because mypy doesn't allow overriding attribute with property
[22:41:37] *** Joins: Linux77 (~Linux7_7@186.233.183.1)
[22:41:45] *** Quits: ayustae (Thunderbir@gateway/vpn/protonvpn/ayustae) (Quit: ayustae)
[22:41:53] <aphysically> but apparently you can override attribute with descriptor class
[22:42:10] <bjs> control: oh windows
[22:42:21] <Ninpo> energizer | if you're not trying to make it generalize to other files then that's fine <-- nah, I'm trying to work with data from some naff stock system that won't dump all SKUs/supplier codes with a full product dump, so I've got all products with all but supplier info and all products with just supplier info
[22:42:27] <jinsun> aphysically: ah okay I was thinking it was still about the different getter and setter
[22:42:29] *** Quits: Haxxa (~Haxxa@89nnjg0xckz9ggn6r5xm.ip6.superloop.com) (Quit: Haxxa flies away.)
[22:42:43] <bjs> control: Windows command prompt doesn't support ANSI escape sequences,  really I don't think it's a terminal at all.  Something like colorama works with Windows automatically
[22:42:49] <aphysically> no, but it's related insomuch as pyright is justifying choices for similar reasons jinsun
[22:43:15] <control> well, cmd.exe says its a terminal hehe. i will give a try with colorama, thanks
[22:43:16] <jinsun> conflicting reasons really
[22:43:20] <bjs> control: that print you showed would work on a decent linux/mac terminal
[22:43:35] *** Joins: Haxxa (~Haxxa@89nnjg0xckz9ggn6r5xm.ip6.superloop.com)
[22:43:59] <aphysically> jinsun: in particular, my descriptor example passes in pyright despite not setting a deleter. pyright listed the reason for not supporting overriding attributes with properties as being the *possibility* that a deleter could not be implemented
[22:44:08] <control> well, colorame is not working either
[22:44:22] <bjs> control: not working?
[22:44:38] <control> got it working thanks!
[22:45:00] <ChrisWarrick> ansi colors should work in cmd.exe on windows 10
[22:45:07] *** Quits: Haxxa (~Haxxa@89nnjg0xckz9ggn6r5xm.ip6.superloop.com) (Remote host closed the connection)
[22:45:19] <jinsun> aphysically: yeah, the logic is conflicting, property getter and setter should be same because property should behave like normal attribute, but cannot override attribute with property because property is not same as attribute
[22:45:25] <control> ChrisWarrick: i cant get it worked with ansi colors(
[22:46:11] <ChrisWarrick> it might be specific to how windows python interacts with the terminal
[22:46:18] *** Quits: hendursa1 (~weechat@user/hendursaga) (Quit: hendursa1)
[22:46:21] *** Quits: jay-m1262 (~jay-m@129.0.205.222) (Ping timeout: 245 seconds)
[22:46:37] <bjs> ChrisWarrick: are you sure you don't just have colorama installed doing weird things in the background :P
[22:46:50] *** Joins: hendursaga (~weechat@user/hendursaga)
[22:46:50] <ChrisWarrick> bjs: no
[22:47:14] *** Joins: Haxxa (~Haxxa@89nnjg0xckz9ggn6r5xm.ip6.superloop.com)
[22:47:29] <ChrisWarrick> hm, it doesn’t work with cmd.exe and python.exe
[22:47:41] *** Quits: esro (~esro@2a02:120b:2c3a:4620:9859:9385:8ada:e4cf) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[22:47:42] <ChrisWarrick> but it works with windows terminal and python.exe, and also cmd.exe and wsl python
[22:48:14] *** Quits: Ilyu (~quassel@166.215.82.79.rev.sfr.net) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[22:48:33] *** Joins: jay-m1262 (~jay-m@154.72.163.187)
[22:48:56] <bjs> Windows Terminal (not CMD.exe) should work,  isn't that what VSCode uses?
[22:49:00] *** Quits: bloodninja (~bloodninj@user/bloodninja) (Quit: So long king bowser!)
[22:49:20] *** Joins: bloodninja (~bloodninj@user/bloodninja)
[22:49:48] *** Quits: bloodninja (~bloodninj@user/bloodninja) (Remote host closed the connection)
[22:49:56] *** Quits: dld (~davidlowr@2620:6e:6000:2900:5c78:4bcc:82fe:593c) (Ping timeout: 258 seconds)
[22:50:06] <ChrisWarrick> vscode does its own terminal stuff I think
[22:50:07] *** Joins: bloodninja (~bloodninj@user/bloodninja)
[22:51:06] *** Quits: pro_z_ (~pro_z@37.214.46.4) (Ping timeout: 260 seconds)
[22:51:15] *** Quits: Macuser (~Macuser@216.30.159.201) (Max SendQ exceeded)
[22:51:29] *** Quits: Haxxa (~Haxxa@89nnjg0xckz9ggn6r5xm.ip6.superloop.com) (Remote host closed the connection)
[22:53:23] *** Quits: y1n (~y1n@178.115.66.247.wireless.dyn.drei.com) (Ping timeout: 258 seconds)
[22:53:31] <jinsun> yeahm vscode has its own terminal thing "Integrated terminal" it behaves different from windows terminal in at least one way
[22:54:54] <aphysically> jinsun: I'm still not completely sure I didn't break something by subclassing int
[22:55:00] <aphysically> maybe it's better as a cast
[22:55:18] *** Joins: esro (~esro@2a02:120b:2c3a:4620:9859:9385:8ada:e4cf)
[22:56:05] *** Joins: StickyIcky (~StickyIck@ec2-54-90-95-12.compute-1.amazonaws.com)
[22:56:59] <nedbat> i'm trying to debug a long-running GitHub Action.  If the pip run says "Downloading djangorestframework-3.12.4-py3-none-any.whl (957 kB)", then it didn't find the wheel in the pip cache right? Or might it say that when it does find it?
[22:58:49] <energizer> nedbat: it should say "Using cached foo-spec.whl"
[22:58:54] <jinsun> aphysically: yeah cast would work there too, I think subclassing int was fine too
[22:58:58] <nedbat> energizer: that's what i figured
[22:59:01] *** Joins: Haxxa (~Haxxa@122.199.45.48)
[22:59:33] *** Quits: achilleas (ach@user/achilleas) (Quit: :wq)
[22:59:55] <SnoopJ> yea I believe if you see a "Downloading..." message, it's missed the cache or not checked it
[23:00:03] <aphysically> jinsun: https://github.com/microsoft/pyright/issues/2424#issuecomment-946096622 -> now I'm going to comment on the mypy issue with my descriptor workaround since nobody has mentioned a workaround is even possible yet
[23:00:49] *** Joins: StickyIcky2 (~StickyIck@187.211.46.6)
[23:00:54] <energizer> nedbat: you can see this by python3 -m venv venv && venv/bin/pip install django && venv/bin/pip uninstall django && venv/bin/pip install django
[23:00:59] *** Quits: StickyIcky (~StickyIck@ec2-54-90-95-12.compute-1.amazonaws.com) (Ping timeout: 264 seconds)
[23:01:12] *** Quits: control (~v1@user/control) (Quit: leaving)
[23:01:34] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-fce5-8f43-3546-c881.res6.spectrum.com)
[23:01:39] *** Joins: fuxaches (~terry@S01060cb6d29d89df.ed.shawcable.net)
[23:02:44] *** Joins: Midjak (~Midjak@82-65-111-221.subs.proxad.net)
[23:02:54] *** Joins: achilleas (ach@user/achilleas)
[23:04:27] *** Quits: CombatVet (~c4@user/combatvet) (Ping timeout: 276 seconds)
[23:04:43] *** Joins: CombatVet (~c4@user/combatvet)
[23:06:30] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Ping timeout: 260 seconds)
[23:06:37] *** Joins: magla (~gelignite@55d45a4d.access.ecotel.net)
[23:06:46] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 245 seconds)
[23:12:30] *** Joins: nomic (~nomic@2a00:23c6:9902:2401:3c3b:5ff:2c65:95bc)
[23:12:31] *** Quits: Haxxa (~Haxxa@122.199.45.48) (Quit: Haxxa flies away.)
[23:13:25] *** Joins: Haxxa (~Haxxa@89nnjg0xckz9ggn6r5xm.ip6.superloop.com)
[23:13:58] *** Joins: koltrast_ (~koltrast@h77-53-57-114.cust.a3fiber.se)
[23:13:59] *** Quits: Barones (~Barones@2804:48dc:8500:0:5635:5e6d:7349:856) (Remote host closed the connection)
[23:14:45] *** Quits: koltrast (~koltrast@h77-53-57-114.cust.a3fiber.se) (Ping timeout: 265 seconds)
[23:16:52] <aphysically> jinsun: the descriptor thing is just an incredibly invasive workaround :P
[23:17:10] <dontyouloveshort> how do you run pytest so that it uses a sqlite databsae instead of the normal mariadb?
[23:17:47] *** Quits: jay-m1262 (~jay-m@154.72.163.187) (Ping timeout: 264 seconds)
[23:18:31] *** Joins: Barones (~Barones@2804:48dc:8500:0:5635:5e6d:7349:856)
[23:19:01] <jinsun> aphysically: yeah not a fan at all, the maintainer has really strong opinions about the setter thing to go with this
[23:20:02] *** Quits: yeirr (~yeirr@user/yeirr) (Remote host closed the connection)
[23:20:49] *** Quits: adder (~adder@user/adder) (Quit: Leaving)
[23:21:16] <aphysically> jinsun: and to get correct type checking we will have to cast() *every* self.thing call we make in the descriptor
[23:22:54] *** Quits: grys (~quassel@botters/gry) (Ping timeout: 258 seconds)
[23:24:13] *** Joins: grys (~quassel@botters/gry)
[23:25:31] *** Joins: control (~v1@user/control)
[23:25:55] *** Quits: srhm (~srhm@user/srhm) (Read error: Connection reset by peer)
[23:26:02] *** Joins: pycurious (~Adium@user/pycurious)
[23:26:22] *** Quits: yotsuba (~yotsuba@93-172-241-53.bb.netvision.net.il) (Remote host closed the connection)
[23:26:23] *** Joins: srhm (~srhm@user/srhm)
[23:26:47] <jinsun> aphysically: so you got a reply already, he just avoided the real problem of 3)
[23:26:53] *** Quits: StickyIcky2 (~StickyIck@187.211.46.6) (Quit: Leaving)
[23:26:55] *** Quits: zeden (~zeden@user/zeden) (Quit: WeeChat 3.3)
[23:27:21] <aphysically> yeah, I mean to be clear I totally agree with him on 2), it's just not my call and the asymmetric interface is already widely spread in a number of python codebases
[23:27:53] *** Joins: adhawkins (~adhawkins@user/adhawkins)
[23:28:46] <adhawkins> Hi all. Looking for a python package that'll let me display an arbitrary (and changing) number of progress bars on the screen. I want to be able to specify the absolute position for each scroll bar, and add and remove them at will as jobs start and complete. Any suggestions?
[23:28:52] <jinsun> aphysically: yeah 2 is understandable, but because of 2, 3 makes even less sense
[23:29:26] <whatsupdoc> In python, how do you use property decorator syntax if it's the derived class
[23:29:29] <SnoopJ> adhawkins, parts of that sound like the `tqdm` library, but you might want something in the `rich` ecosystem, too
[23:29:32] *** Quits: fedenix (~fedenix@gateway/tor-sasl/fedenix) (Remote host closed the connection)
[23:29:37] <KirkMcDonald> adhawkins: tqdm allows many things.
[23:29:50] *** Joins: fedenix (~fedenix@gateway/tor-sasl/fedenix)
[23:30:14] *** Joins: poon (~poooon@94.2.71.133)
[23:30:24] <poon> if self.my_method is an ansync method, how do I correctly await that method, as part of a conditional if statement? something like await if.my_method == True: ?
[23:30:35] <whatsupdoc> @my_prop.setter doesn't work in the derived
[23:30:35] <whatsupdoc>  class
[23:30:51] <adhawkins> KirkMcDonald: SnoopJ: Thanks, will take a look.
[23:31:04] <energizer> poon: if await f()
[23:31:14] *** Quits: semeion (~semeion@user/semeion) (Ping timeout: 260 seconds)
[23:31:16] <poon> thankyou energizer
[23:31:27] *** Quits: BlueSky (~BlueSky@user/bluesky) (Quit: Leaving)
[23:31:54] <jinsun> whatsupdoc: doesn't work how? throws error? or does something other than what you expect
[23:31:58] *** Joins: newpy (~newpy@2601:280:4381:1390:80e5:b4c3:137e:ac42)
[23:32:30] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[23:32:49] *** Joins: Hokedli (~lasliedv@gateway/tor-sasl/hokedli)
[23:33:51] *** Quits: stats4647 (~stats4647@ip174-67-220-13.oc.oc.cox.net) (Remote host closed the connection)
[23:35:39] *** Joins: stats4647 (~stats4647@ip174-67-220-13.oc.oc.cox.net)
[23:35:47] *** Quits: Telvana (~capo@user/telvana) (Ping timeout: 240 seconds)
[23:36:53] *** Quits: esro (~esro@2a02:120b:2c3a:4620:9859:9385:8ada:e4cf) (Quit: Textual IRC Client: www.textualapp.com)
[23:37:40] <SnoopJ> jinsun, I think they're trying to do e.g. `class Foo: @property def bar(self): ...;; class Bar(Foo) @bar.setter def set_bar(self, val): ...`
[23:37:53] *** Joins: esro (~esro@2a02:120b:2c3a:4620:9859:9385:8ada:e4cf)
[23:39:21] *** Quits: sniperwolf (~sniperwol@91.230.98.1) (Ping timeout: 256 seconds)
[23:39:48] *** Quits: stats4647 (~stats4647@ip174-67-220-13.oc.oc.cox.net) (Remote host closed the connection)
[23:39:52] *** Quits: esro (~esro@2a02:120b:2c3a:4620:9859:9385:8ada:e4cf) (Client Quit)
[23:40:04] *** Joins: stats4647 (~stats4647@ip174-67-220-13.oc.oc.cox.net)
[23:40:13] <jinsun> ah okay, that will be error, will have to overide the getter also otherwise bar is not defined
[23:40:21] *** Quits: stats4647 (~stats4647@ip174-67-220-13.oc.oc.cox.net) (Remote host closed the connection)
[23:40:38] <whatsupdoc> https://dpaste.org/moee
[23:41:00] <SnoopJ> yea, the name isn't resolved against the parent class definition, you'd have to do something like `@property def bar(self): return super().bar`
[23:41:06] *** Joins: stats4647 (~stats4647@ip174-67-220-13.oc.oc.cox.net)
[23:41:14] <whatsupdoc> https://dpaste.org/Q0pq
[23:41:14] *** Joins: emf_ (~emf@2620:10d:c090:400::5:a662)
[23:41:15] <SnoopJ> whatsupdoc, names aren't inherited like that
[23:41:29] <bjs> whatsupdoc: this won't work with the __names anyway,  use _names not __names  (unless you *really* know what __names do and why to use them)
[23:41:53] <bjs> whatsupdoc: just define a `@property def width(self): return super().width` in the child class
[23:42:32] <whatsupdoc> why use _names instead of __names?
[23:42:43] <jinsun> why use __names?
[23:42:49] <whatsupdoc> properties?
[23:43:08] <nedbat> whatsupdoc: properties like "return self.__width" just aren't worth it. They don't do anything for you
[23:43:08] <whatsupdoc> Isn't that how you create a 'private' variable in python?
[23:43:16] <jinsun> no
[23:43:16] <aphysically> jinsun: okay in the case of rich for complicated getter/setter I think it makes the most sense to delegate the getter to a separate internal method of the class that gets called by the descriptor
[23:43:20] <nedbat> whatsupdoc: you don't need private variables like that
[23:43:31] <aphysically> because otherwise you have to cast *every* attribute read
[23:43:42] <aphysically> I think you can just do obj.method()?
[23:43:57] *** Quits: stats4647 (~stats4647@ip174-67-220-13.oc.oc.cox.net) (Remote host closed the connection)
[23:44:01] *** Joins: semeion (~semeion@user/semeion)
[23:44:10] <whatsupdoc> I swear I watched a tutorial and that was standard whenever you use properties
[23:44:11] *** Quits: emf (~emf@2620:10d:c090:400::5:75e7) (Ping timeout: 264 seconds)
[23:44:12] *** Joins: stats4647 (~stats4647@ip174-67-220-13.oc.oc.cox.net)
[23:44:20] *** Quits: Haxxa (~Haxxa@89nnjg0xckz9ggn6r5xm.ip6.superloop.com) (Quit: Haxxa flies away.)
[23:44:30] <whatsupdoc> make a private variable using __ and then access it using property decorators
[23:44:39] <whatsupdoc> is that wrong?
[23:44:40] *** Joins: Haxxa (~Haxxa@89nnjg0xckz9ggn6r5xm.ip6.superloop.com)
[23:44:42] *** Quits: dfch_ (~dfch@user/dfch) (Quit: bye)
[23:45:21] <energizer> whatsupdoc: these days _foo  is considered private and not many people use __foo
[23:45:22] <jinsun> yes just make a public attrubute, propery is there to do some computation while accessing attibute
[23:45:26] *** Quits: Hokedli (~lasliedv@gateway/tor-sasl/hokedli) (Quit: Konversation terminated!)
[23:45:37] <nedbat> whatsupdoc: there is probably a tutorial that shows making private variables like that.
[23:45:54] <nedbat> whatsupdoc: but that is a java programmer writing java in Python. it's not done for the most part in real python code
[23:46:05] <newpy> how do I replace every instance of -1 with a string "Exit", and every +1 with "Enter", in a pandas Dataframe? (I can just create a new Dataframe if that's easier)
[23:46:26] <energizer> whatsupdoc: and @property is imo mostly for when you need to conform your method to some existing interface that uses attributes
[23:46:52] <whatsupdoc> I don't get python sometimes, why can't it just have public, private and protected smh
[23:47:21] <SnoopJ> it could. it doesn't.
[23:48:02] <energizer> i dont really understand why __ never caught on, it does solve the collision problem
[23:48:38] <ChrisWarrick> whatsupdoc: I don’t get java sometimes, why does it bother with public, private, and protected?
[23:48:44] <whatsupdoc> wait, so does nobody ever use __?
[23:48:59] <whatsupdoc> ChrisWarrick: don't get me started lol, I hate Java too
[23:49:05] <hexnewbie> energizer: Though it makes your variables closer to private, so if you need to use them as if they were protected instead, you have to either rename them or type self._MyParentClass_a
[23:49:07] * SnoopJ senses a theme
[23:49:16] *** Quits: Haxxa (~Haxxa@89nnjg0xckz9ggn6r5xm.ip6.superloop.com) (Remote host closed the connection)
[23:49:31] <energizer> whatsupdoc: none of us do. keep in mind we've all been hanging out building our little echo chamber in here
[23:49:47] <hexnewbie> Look, I even misspelled the mangling, which is a good example as to why using it would be a bad idea
[23:50:02] <whatsupdoc> So, is it correct that I should never make __variables?
[23:50:04] <SnoopJ> there are 66 such definitions in the stdlib
[23:50:06] <SnoopJ> but it's uncommon
[23:50:06] <jinsun> aphysically: yes I think that should work (I forgot how complicated the rich getter setter was, so I don't get why so many casts are needed)
[23:50:39] <aphysically> it just calls a bunch of attributes
[23:50:45] <zln> Hi guys, I have a list with two elements imgs[obj1, obj2] and set a variabel with 'image = random.choice(imgs), Later in the code, I need to know if image is set to 1st or 2nd element. What's the best way to do that without reinventing the wheel?
[23:50:59] <energizer> hexnewbie: foo is public, _ is protected, __ is private. works perfectly
[23:51:50] <whatsupdoc> ok lol
[23:51:58] <whatsupdoc> ima go with that lol
[23:52:06] *** Joins: Haxxa (~Haxxa@89nnjg0xckz9ggn6r5xm.ip6.superloop.com)
[23:52:25] <energizer> whatsupdoc: really i dont know any experts who use __
[23:52:29] <SnoopJ> zln, `imgs.index(image)` will tell you which index it is. Or you could `idx = random.choice(range(len(imgs))); image = imgs[idx]` if you wanted to avoid the second scan.
[23:52:33] *** Joins: Vonter_ (~Vonter@user/vonter)
[23:52:38] <ChrisWarrick> whatsupdoc: okay, replace java with whatever language you like that has those keywords
[23:52:48] <jinsun> newpy: `df[df.eq(-1)] = "Exit"; df[df.eq(1)] = "Enter"`
[23:53:03] <zln> SnoopJ: thanks a lot man!
[23:53:08] *** Joins: zen_coder (~zen_coder@2a02:8109:a280:2d8d:b8d6:cab7:8c07:6d7b)
[23:53:12] <whatsupdoc> There, now I'm using protected variables: https://dpaste.org/aFJh
[23:53:12] <energizer> hexnewbie: you shouldnt ever have to do .__Foo_bar, because that's using a private name from outside
[23:53:17] <newpy> jinsun, ah okay I thought it would complain about mixed types if I did that
[23:53:52] *** Quits: control (~v1@user/control) (Quit: leaving)
[23:54:06] <whatsupdoc> liskov's substitution principle
[23:54:07] <energizer> whatsupdoc: 39 s/Rectangle/super()/
[23:54:18] <whatsupdoc> energizer: why?
[23:54:44] *** Joins: henistein (~henistein@2001:8a0:fc8f:9501:e985:77a1:88e5:69a1)
[23:54:46] <energizer> whatsupdoc: https://rhettinger.wordpress.com/2011/05/26/super-considered-super/
[23:55:00] <SnoopJ> You won't always know the base class name, for one thing
[23:55:13] <zen_coder> How can I automatically call a destructor of an object after an exception?
[23:55:30] <henistein> I have a numpy matrix but I want to treat coordinates as xy instead of ij, how can I do it?
[23:55:55] <ChrisWarrick> henistein: xy instead of ij?
[23:55:57] <whatsupdoc> I swear the more I know the less I know
[23:56:00] <energizer> whatsupdoc: consider subclasses of Square
[23:56:38] <whatsupdoc> yes then call Square.__init__(self, size)
[23:56:57] *** Joins: abhixec (~abhixec@c-67-169-139-16.hsd1.ca.comcast.net)
[23:57:00] <aphysically> jinsun: well when they're not its own descriptor I can safely use getattr/setattr I guess
[23:57:01] *** Quits: Vonter_ (~Vonter@user/vonter) (Ping timeout: 258 seconds)
[23:57:24] *** Quits: mikebald (~mikebald@159.203.185.106) (Ping timeout: 258 seconds)
[23:57:30] *** Parts: akk (~akk@75.161.146.115) (+++)
[23:57:44] <henistein> ChrisWarrick Imagine, [[1, 2], [3, 4]] using i = 0 and j = 0 you got 1, but with x = 0 and y = 0 you got 3.
[23:57:52] <energizer> whatsupdoc: under multiple inheritance you'll get the wrong MRO, and maybe in other situations too
[23:58:46] <whatsupdoc> if you're using multiple inheritance, you're doing it wrong
[23:58:59] <sco1> Negative
[23:59:00] *** Joins: Betal (~Betal@user/betal)
[23:59:04] *** Quits: bloody (~bloody@user/bloody) (Quit: Always focus on how far you've come, rather than how far you have left to go)
[23:59:20] <whatsupdoc> energizer: what is MRO?
[23:59:26] *** Joins: bloody (~bloody@user/bloody)
[23:59:40] <whatsupdoc> method resolution order
[23:59:41] *** Quits: stats4647 (~stats4647@ip174-67-220-13.oc.oc.cox.net) (Remote host closed the connection)
[23:59:42] <whatsupdoc> ok
