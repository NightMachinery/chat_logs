[00:00:15] <seebs> > if you're on clojure irc or the like atm, could you ask if it has any pattern matching (like racket match or haskell literally anything)
[00:00:30] <seebs> from a friend who is new to clojure but mostly uses racket, and who of course did not actually tell me what he's thinking of.
[00:01:48] <ridcully_> not in core.  there are libraries that provide matchy things
[00:02:42] <technomancy> there's core.match which is hyper-optimized but it has some bugs
[00:02:42] <seebs> i'm not sure how this differs from either functions with multiple arities or cond lists
[00:02:43] <ridcully_> if you dont need the "if" part of matching, clojure at has some powerful destructuring
[00:02:48] <technomancy> I wrote a pattern matcher too
[00:03:01] <technomancy> https://clojars.org/fnl-match
[00:03:22] <technomancy> well, I ported it anyway. not sure I'd recommend using it for anything serious as the clojure port is largely untested
[00:03:46] <technomancy> seebs: pattern matching lets you match against any arbitrary element inside a data structure
[00:03:57] <ridcully_> another option is meander
[00:04:44] <ridcully_> that one is way more involved and is best used to transform data (so maybe the "big brother" of pattern matching even)
[00:04:55] <technomancy> refusing to add pattern matching to clojure is definitely in my top 5 complaints about the language
[00:05:08] <ridcully_> was it an option in the poll?
[00:05:35] <technomancy> the only valid excuse for not adding pattern matching to your language is A) it's the 1980s and you've never heard of it or B) you're a forth or an esolang where it can't apply
[00:05:49] <technomancy> ridcully_: I don't think so lol
[00:05:56] <ridcully_> me neither ;)
[00:06:08] <ridcully_> should have written that into my comments...
[00:06:42] <ridcully_> i think the best you can get is with if-let and destructuring and i dont even have a clue if that would work
[00:06:59] <technomancy> if-let is like ... dollar-store pattern matching
[00:07:07] <sobel> oof
[00:07:08] <technomancy> the Coors Lite version
[00:07:18] <seebs> clojure blue ribbon
[00:08:29] <sobel> the repl that made milwaukee famous
[00:09:10] <technomancy> one of these days I'm gonna snap and add fnl-match to a work project
[00:09:29] *** Quits: patrice (~patrice@user/patrice) (Quit: Leaving)
[00:09:42] <technomancy> seebs: this documentation maybe explains it https://fennel-lang.org/reference#match-pattern-matching
[00:09:51] <seebs> thanks
[00:09:52] <technomancy> if it doesn't then let me know so I can make it better
[00:10:14] <technomancy> oh, the bits about "multiple values" should be ignored since they don't apply to clojure but the rest should
[00:10:30] <seebs> so for the [9 q 5] case, will that match [9 q 5 6]?
[00:10:45] <seebs> ahh, it will
[00:10:51] <seebs> the answer is found by reading... another paragraph
[00:11:00] *** Quits: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729) (Ping timeout: 240 seconds)
[00:11:21] <technomancy> it will in my implementation but I wouldn't say that's guaranteed by any pattern matcher
[00:11:31] <ridcully_> with types like in haskell it shows its real power
[00:12:05] <ridcully_> so then again in clojure being able to match against fancy java objects would be really sweet
[00:13:00] *** Joins: piotrts (~piotrts@188.146.241.27.nat.umts.dynamic.t-mobile.pl)
[00:14:31] <seebs> okay my racketeer friend has attempted to write a clojure, and (1) i don't understand this (2) it looks confused to me
[00:14:34] <seebs> https://gist.github.com/seebs/c5d0ea31b5af5dd38edde56b9f9840fc
[00:15:27] <technomancy> tell them curry isn't a primitive because we have partial. not exactly the same thing but solves 90% of the same problem
[00:15:53] <technomancy> also they appear to be using rounded parens in let which just won't work at all
[00:16:13] <ridcully_> the let is wrong
[00:16:19] <ridcully_> you have to use a vector there
[00:16:23] <technomancy> also their version of curry isn't actually curry
[00:16:42] <technomancy> it calls the function immediately instead of waiting till it has the right number of args
[00:19:08] <seebs> yeah, the let looks wrong to me
[00:25:03] <ridcully_> now i wonder if using a list with let ever worked (at least in the before-spec days)
[00:25:41] <seebs> so the weird thing is that whatever repl or something they ran on actually *accepted* that code despite the weird let
[00:25:55] <ridcully_> guess not although it's a macro.  should always evaluate first, right?
[00:27:10] <technomancy> seebs: https://web.archive.org/web/20161023205431/http://www.uncarved.com/articles/not_currying fwiw
[00:27:11] <ridcully_> seebs: ran that through clj and it exploded.  spec should kill that at once.  and todays let will exclode for not using a vector too
[00:27:24] <seebs> oh, did let previously allow this one day?
[00:27:34] <technomancy> if they had actually used real curry there it would not have worked because <= takes an infinite number of args
[00:27:42] <seebs> ahh
[00:29:14] <technomancy> also you don't need to quote the vectors
[00:29:22] <technomancy> you can tell a schemer wrote this =)
[00:30:35] <technomancy> but your friend is correct to be annoyed about not being able to use match out of the box
[00:30:51] <technomancy> tell them to use Fennel instead =D
[00:32:25] *** Quits: lagooned (~lagooned@108-208-149-42.lightspeed.hstntx.sbcglobal.net) (Quit: Client closed)
[00:34:20] <seebs> so they were confused by the <= curry thing, because in racket, currying continues producing curried function values until you hit enough arguments, so why would you want it to be impossible to call <= with curry
[00:34:36] <seebs> but of course if you let it produce a result, you couldn't *usefully* call it because the answer would be true on the 0-argument case
[00:36:08] <ridcully_> is your friend to shy to show up here?  this is basically a hippy community... please send 'em over.  we happily explain our view of the world...
[00:36:28] <seebs> i think "doesn't currently have a working IRC"
[00:38:36] *** Quits: piotrts (~piotrts@188.146.241.27.nat.umts.dynamic.t-mobile.pl) (Ping timeout: 240 seconds)
[00:40:16] <ridcully_> <= and many others have "∞" args.  you can write `(apply <= (range 1000))`.  so partial here is the way to add just-some-more-args and often is used to overcome auto-curry
[00:47:24] *** Joins: schmudde (~schmudde@2001:b07:ae6:7d19:58b3:aacc:c1f4:fc2b)
[00:54:54] *** Joins: Null_A (~null_a@c-98-210-133-39.hsd1.ca.comcast.net)
[00:59:46] *** Quits: Null_A (~null_a@c-98-210-133-39.hsd1.ca.comcast.net) (Ping timeout: 256 seconds)
[01:05:40] <seebs> https://clojure.org/guides/weird_characters <-- what a nice guide to have
[01:06:04] <ridcully_> beats symbolhoud
[01:06:05] <technomancy> "Did you know that every day across america there are people who lack access to IRC? your gift can help reach them and connect them to the resources they need to get their questions about currying and partial application answered"
[01:06:50] <technomancy> btw on my mobile I'm connected to this channel from Matrix so you technically don't even need an IRC client
[01:06:55] <seebs> yeah, that's true
[01:07:00] <seebs> anyway they'll be along soonish probably
[01:07:26] <technomancy> cool; always good to meet more racketeers
[01:08:41] *** Joins: Keriel (~Keriel@bras-base-toroon474qw-grc-71-184-145-2-133.dsl.bell.ca)
[01:08:54] <jeaye> and convert them to clojurians
[01:09:12] <ridcully_> to slack?
[01:09:12] <technomancy> or at least https://github.com/greghendershott/rackjure users
[01:09:43] <jeaye> ridcully_: No, to clojure users. Do you use another term other than clojurian?
[01:09:52] <Keriel> hi, I think seebs was posting my very messy clojure-learning experiences here a little bit ago? figured I might as well drop by
[01:09:54] <technomancy> the IRC channel for racket should be #lang
[01:10:13] <seebs> oh no
[01:10:17] <seebs> you have another name
[01:10:18] <seebs> i'm doomed
[01:10:21] <jeaye> ^_^
[01:10:22] <Keriel> doooomed
[01:10:26] <seebs> i can handle exactly one name per person pretty much
[01:10:33] <seebs> well slightly less
[01:10:54] <seebs> i've totally told you, but one time the kid changed discord nicknames, and i said "oh hey that name looks just like the name of someone i know on <other discord>"
[01:10:58] <seebs> and he said "that's me"
[01:11:00] <seebs> and i said "what"
[01:11:14] <seebs> because apparently i'd been sort of chatting casually with him for three months without knowing that was *actually my kid*
[01:11:32] <seebs> just like... seemed like a friendly person with a cool sense of humor, fun to chat with
[01:11:33] <technomancy> Keriel: haha welcome welcome
[01:11:47] <Keriel> also, #lang is a perfect name, that's great
[01:12:13] <technomancy> I was just agreeing with you about the lack of pattern matching in clojure; it's a dang crime
[01:12:21] <ridcully_> jeaye: well i though the slack users gated them off using that name and we all have to pick another one
[01:12:53] <jeaye> hm, could be.
[01:13:09] <Keriel> I've been told let has some form of it at least? not sure on the details though.  the clojure docs have been a bit of a struggle for me so far
[01:13:18] <jeaye> Naming is difficult. Knowing something's name gives us power over it.
[01:13:20] <ridcully_> maybe they dont have power over names...
[01:13:32] <technomancy> Keriel: there's if-let but it's the Coors Lite of pattern matching. for anything else you need a 3rd-party lib
[01:13:35] <jeaye> hah
[01:13:56] <technomancy> oh also I guess regular let can do destructuring without the conditional part
[01:14:09] <jeaye> Any usage of if-let should be if-some, I say.
[01:14:29] <jeaye> Since conflating truthy and some is nasty.
[01:14:31] <technomancy> jeaye: I object, on the grounds that `some` is used in horribly inconsistent ways in clojure
[01:14:52] <ridcully_> yeah more burden on the word some, which is not at all totally controversial in clojure already ;)
[01:14:58] <Keriel> when trying to check which one was = vs == I did see a unify function, so it sounds like there's also a pretend this is prolog option?
[01:15:28] <technomancy> wait there's a unify function??
[01:15:42] <jeaye> Keriel: core.logic is a minikanren implementation for Clojure.
[01:16:01] <Keriel> oh that's why. makes sense
[01:16:05] <technomancy> ah right; despite its name, core.logic is not part of clojure's core
[01:16:15] <jeaye> That's where the unification came from, likely. But there's also core.unify, which is similar.
[01:16:22] <technomancy> no one could have ever foreseen that being confusing, no sir
[01:16:32] <seebs> what's a unify
[01:16:33] <Keriel> yeah I think it was core.logic/==
[01:16:54] <seebs> yeah, there's some people who made some go packages under the github user name `pkg` and i sort of hate that for the same reason
[01:16:58] <jeaye> Yeah, that's basically prolog in Clojure. Worth checking out, if you're into logic programming.
[01:17:14] <Keriel> I really like the idea but prolog's syntax has not been super friendly to me when I try to use it
[01:17:16] <technomancy> seebs: the best instance of this is the library called dash.el
[01:17:22] <Keriel> i should reread reasoned schemer
[01:17:36] <technomancy> seebs: in elisp all library functions have to have prefixes since there's no namespace, so they just said "ok our prefix is -"
[01:17:45] <jeaye> There's also core.async, which is basically Go's async model in Clojure. Turns out all the good stuff can be built with libraries and macros in Clojure.
[01:17:51] <Keriel> these package names are giving me KTANE vibes...  Crazy Talk, Krazy Talk, Crazy Talk With A K, Regular Crazy Talk...
[01:17:58] <technomancy> (kind of poking fun at how bad elisp is at modular coding)
[01:18:15] <jeaye> s/ at .*//
[01:18:36] <Keriel> "(kind of poking fun at)" ? :p
[01:18:42] <jeaye> Oh, damn. s/ at m.*//
[01:18:57] <seebs> i always get really nervous when i see things without namespacing because like... that is so convenient and effective and so much simpler right until you hit the wall, and where the wall is varies from person to person
[01:19:19] <jeaye> i.e. unqualified keywords?
[01:19:21] <seebs> and there is a special dawning horror you get from realizing that you're looking at code maintained by someone whose ability to juggle state is one or two items bigger than yours
[01:19:57] <seebs> for me that's roughly at the level of The Stupid Cat, who has a working memory of roughly 0.75 things
[01:20:39] <technomancy> seebs: in elisp there is a pretty strong convention across the community how to avoid conflicts but it makes everything much more verbose than it would be with a proper module system
[01:20:52] <technomancy> it doesn't lead to bugs so much as tedium
[01:21:11] <Keriel> I didn't like forced namespacing too much for a while but "import qualified" from haskell is growing on me
[01:21:29] <technomancy> clojure lets you import everything but you will be shunned if you do it =P
[01:22:17] <technomancy> personally I love the idea of "if you see an identifier anywhere, it should be very obvious where it came from"
[01:24:29] <jeaye> Yeah, and tying that to compile-time dependencies (i.e. require) is even better.
[01:24:51] <seebs> at one point i proposed for go supporting "..." in import paths
[01:24:52] <seebs> you know
[01:24:57] <seebs> import "github.com/..."
[01:25:09] <Keriel> that sounds like a seebs idea
[01:25:17] <seebs> reduces the complexity of figuring out what's in your dependency tree
[01:25:27] <Keriel> I'm curious, is there any particular reason cond doesn't parenthesize each cond line in clojure?
[01:25:31] <technomancy> half surprised they didn't take you up on that
[01:25:51] <technomancy> Keriel: open parens almost always mean "calling a function/macro/special" in clojure
[01:25:53] *** Quits: schmudde (~schmudde@2001:b07:ae6:7d19:58b3:aacc:c1f4:fc2b) (Ping timeout: 256 seconds)
[01:25:58] <technomancy> there are exceptions but you can maybe count them on one hand
[01:27:52] *** Quits: euandreh (~euandreh@2804:14c:33:9fe5:fb55:f4b:9349:d06d) (Ping timeout: 250 seconds)
[01:28:04] <Keriel> I wonder how long it's going to take me to stop typing (define (f x y) ...)
[01:28:33] <Keriel> anything build-list shaped?
[01:30:05] <technomancy> what's build-list?
[01:30:54] <Keriel> (build-list square 5) => '(0 1 4 9 16)
[01:31:00] <Keriel> er it's 5 square, I always mix up that argument order
[01:31:28] <ridcully_> map+range is your friend here
[01:31:55] <technomancy> we really need the bot back
[01:31:59] <ridcully_> (ignoring lazy semantics which i am not aware with scheme)
[01:32:47] <ridcully_> (or for instead of map for easier to understand syntax)
[01:33:17] <Para> take n?
[01:38:46] *** Joins: AlaskanEmily (~AlaskanEm@user/alaskanemily)
[01:39:46] *** Joins: piotrts (~piotrts@188.146.241.27.nat.umts.dynamic.t-mobile.pl)
[01:41:26] <ridcully_> i now use babashka to show the cpu load as color on my mouse leds.  things you have to do on a desktop...
[01:41:38] <technomancy> I should bring in my fennel bot with cljlib loaded and see how long it takes people to notice
[01:42:58] <seebs> i think you might have undermined the effect of the experiment by talking about it several times explicitly
[01:43:26] <seebs> this reminds me a little of the time i wanted to get More Accurate Feedback on parenting success and someone gave me the great idea of sending the kid an anonymous parenting feedback survey
[01:44:08] <Keriel> https://pastebin.com/atVmxqbx anyone mind helping me clean this up?  having trouble writing things I think are elegant, probably just normal language-starting things I think.
[01:47:13] *** Joins: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729)
[01:54:40] <technomancy> Keriel: (map = [1 2 3] [1 2 3]) will give you true
[01:54:45] <technomancy> that might help with your sublist
[01:55:00] <Keriel> not [true true true]?
[01:55:39] <technomancy> err, right I guess you would still need (every? true? ...) around that
[01:55:46] <technomancy> but it's easier to follow anyway
[01:55:51] <seebs> https://gist.github.com/seebs/8f8e9bd4c89fbe6746c365377a963d8a <-- naive solution
[01:56:28] <Keriel> isn't that wrong? (sublist '(3 4) '(1 2 3 4 5 6))
[01:56:33] <seebs> in particular, (map = ...) will keep searching for a long time if it doesn't need to, i think?
[01:56:53] <technomancy> true; better to just look for the first false
[01:57:28] <ridcully_> which is (= [1 2 3] [1 2 3]), right?
[01:57:41] <Keriel> yeah, I'm already using = to compare lists I think?
[01:58:17] <ridcully_> if you don't have to find the outliers, thanks to immutable data, equals is quite sane to use
[01:58:30] <technomancy> ridcully_: better example: (map = [1 2 3] [1 2 3 4]) you still want this to be true I thikn?
[01:58:37] <technomancy> or maybe I misunderstood the question
[01:59:24] <ridcully_> it all trues. because map will stop when it does not get pairs from the seqs?
[01:59:39] <Keriel> the problem is we aren't just looking for prefix, I think? hmm I have an idea though
[01:59:44] <technomancy> ridcully_: yeah
[02:00:12] <Keriel> I probably need to actually get a local clojure env set up instead of just using stuff in browser for it though...
[02:01:24] <seebs> i redid mine using that (map = ...) thing. my hope is that (every? true? (map = l1 l2)) will stop early if it can
[02:03:17] *** Quits: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729) (Ping timeout: 240 seconds)
[02:03:49] <technomancy> unfortunately I think it won't stop early https://gist.github.com/technomancy/d947fd2f2c02d576568ee3b54a14e4ae
[02:04:14] <Keriel> I also feel like I have a lot of code duplication in classify that I'm not sure how to abstract into something elegant
[02:05:38] *** Joins: lightshadow (~burak@192.222.226.180)
[02:06:25] <technomancy> if you use (some #(= false %) s) you can avoid realizing the whole seq: https://gist.github.com/technomancy/d947fd2f2c02d576568ee3b54a14e4ae
[02:06:32] <technomancy> guess my brain hasn't warmed up yet
[02:06:55] *** Quits: piotrts (~piotrts@188.146.241.27.nat.umts.dynamic.t-mobile.pl) (Ping timeout: 256 seconds)
[02:08:49] *** Quits: theruran (uid11305@id-11305.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[02:08:55] <seebs> interesting
[02:10:20] <seebs> so "(some false? (map = list1 list2))" gets true if there's a mismatch without necessarily realizing the sets
[02:12:18] *** Parts: manicennui (uid349235@id-349235.tinside.irccloud.com) ()
[02:16:57] *** Quits: mwnaylor (~user@2601:5ce:4300:5560::68b3) (Ping timeout: 240 seconds)
[02:18:23] *** Joins: irontom (~user@38.81.106.9)
[02:21:25] <technomancy> yeah `some` in this case only goes as far as it needs to in order to get its first result
[02:21:32] <technomancy> confusing name
[02:22:40] <Keriel> https://pastebin.com/Z03xUX3a this is what I'd like to write for classify, unfortunately it is in Haskell
[02:22:47] <seebs> so really it should be named any?
[02:23:15] <seebs> oh, well, not quite, because any? would probably just return true, but some is returning the first truthy value
[02:23:27] <technomancy> yep exactly; ? means it returns a boolean
[02:23:57] <seebs> still weird that every doesn't short-circuit
[02:24:52] <technomancy> no I was checking it the wrong way
[02:25:24] <seebs> oh, okay
[02:25:28] <technomancy> I forgot (realized? s) doesn't tell you if the whole seq is realized; it just tells you if the next element has
[02:25:40] <technomancy> if you do (realized? (take 100 s)) it will be false
[02:25:59] <seebs> that said, the some false form turns out to be slightly more convenient
[02:26:05] <ridcully_> any? already exists... better not look it up...
[02:26:11] <technomancy> lol
[02:26:29] <seebs> because then i can just do "mismatch :unequal" at the top of the cond and everything past that is only for cases where the lists have identical common prefixes
[02:26:34] <technomancy> ridcully_: any? is a function that was written because apparently (constantly true) is too much typing!
[02:26:40] <seebs> or rather, where one list is an identical prefix of the other
[02:28:28] <seebs> so, keriel, in my attempt at this, i computed the equality-test first, because it turns out that i need to know that in every case except both lists being empty, and i always need to know whether there's a mismatch if the lists aren't empty, so. first return unequal if there is a mismatch. if there isn't, either the lists are identical or one is a sublist of the other.
[02:28:48] <seebs> https://gist.github.com/seebs/8f8e9bd4c89fbe6746c365377a963d8a <-- second version, the first was just a naive recursive version
[02:29:22] <seebs> it can be made slightly shorter by changing every? true? to some false?, then dropping the (not) on the first condition
[02:29:45] *** Quits: irontom (~user@38.81.106.9) (Remote host closed the connection)
[02:29:53] <seebs> i don't think that ever performs a comparison it doesn't eventually need, and it gets rid of the duplication of the sublist cases by using the common test it cares about
[02:30:04] <Keriel> does that actually work when it's not a prefix?
[02:30:12] <seebs> i think so?
[02:30:18] <Keriel> e.g. (classify (range 1 10) (range 3 6))
[02:30:25] <seebs> ohh
[02:30:31] <seebs> i wasn't thinking about that case. good point.
[02:30:48] <seebs> i wasn't allowing non-prefixes, that is trickier. :)
[02:31:15] *** Joins: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729)
[02:35:37] *** Quits: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729) (Ping timeout: 240 seconds)
[02:35:49] *** Quits: yewscion (~yewscion@ec2-34-234-185-163.compute-1.amazonaws.com) (Ping timeout: 240 seconds)
[02:39:15] <seebs> hmm
[02:39:16] <seebs> (defn sublist [s l]
[02:39:16] <seebs>   (cond
[02:39:16] <seebs>     (every? true? (map = s l)) true
[02:39:16] <seebs>     (> (count l) (count s)) (recur s (rest l))
[02:39:17] <seebs>     :else false))
[02:39:39] <seebs> this feels a lot less take/drop-y
[02:42:42] <seebs> ohhh but i forgot, (count ...) isn't free
[02:50:17] *** Joins: Null_A (~null_a@2601:645:8700:2290:a4fb:481a:7fa9:b909)
[02:52:01] *** Quits: TonyStone (~TonyStone@cpe-74-76-51-197.nycap.res.rr.com) (Ping timeout: 256 seconds)
[02:53:14] *** Joins: TonyStone (~TonyStone@2603-7080-8607-c36a-f50c-7cae-60f9-8617.res6.spectrum.com)
[03:01:48] *** Quits: TonyStone (~TonyStone@2603-7080-8607-c36a-f50c-7cae-60f9-8617.res6.spectrum.com) (Ping timeout: 240 seconds)
[03:02:06] *** Joins: TonyStone (~TonyStone@cpe-74-76-51-197.nycap.res.rr.com)
[03:08:17] *** Quits: Null_A (~null_a@2601:645:8700:2290:a4fb:481a:7fa9:b909) (Ping timeout: 240 seconds)
[03:23:58] *** Joins: selfsymmetric-mu (~matt@c-73-29-248-41.hsd1.nj.comcast.net)
[03:37:51] *** Quits: TonyStone (~TonyStone@cpe-74-76-51-197.nycap.res.rr.com) (Quit: Leaving)
[03:40:18] *** Joins: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729)
[03:49:56] *** Quits: seschwar (~seschwar@user/seschwar) (Quit: :wq)
[03:58:17] *** Quits: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729) (Ping timeout: 240 seconds)
[04:29:29] *** Joins: theruran (uid11305@id-11305.hampstead.irccloud.com)
[04:41:00] *** Quits: RedNifre (~RedNifre@dslb-002-206-191-134.002.206.pools.vodafone-ip.de) (Ping timeout: 272 seconds)
[04:45:42] *** Quits: Keriel (~Keriel@bras-base-toroon474qw-grc-71-184-145-2-133.dsl.bell.ca) (Quit: Ping timeout (120 seconds))
[04:46:39] *** Joins: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729)
[04:55:00] *** Joins: RedNifre (~RedNifre@dslb-188-100-021-068.188.100.pools.vodafone-ip.de)
[05:01:48] *** Quits: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729) (Ping timeout: 240 seconds)
[05:17:09] *** Joins: Null_A (~null_a@2601:645:8700:2290:a4fb:481a:7fa9:b909)
[05:22:25] *** Quits: op2 (~op2@user/op2) (Ping timeout: 256 seconds)
[05:31:11] *** Joins: lagooned (~lagooned@108-208-149-42.lightspeed.hstntx.sbcglobal.net)
[05:34:31] *** Quits: Null_A (~null_a@2601:645:8700:2290:a4fb:481a:7fa9:b909) (Ping timeout: 245 seconds)
[06:02:45] *** Joins: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729)
[06:02:46] *** Joins: TonyStone (~TonyStone@2603-7080-8607-c36a-a068-f96d-6ad8-5504.res6.spectrum.com)
[06:03:13] *** Quits: lagooned (~lagooned@108-208-149-42.lightspeed.hstntx.sbcglobal.net) (Ping timeout: 256 seconds)
[06:07:31] *** Quits: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729) (Ping timeout: 256 seconds)
[06:27:25] *** Joins: shiranaihito (~textual@2001-b011-4011-1b52-3ca4-3c57-3d91-03c0.dynamic-ip6.hinet.net)
[06:27:25] *** Joins: mange (~user@n114-78-12-98.bla3.nsw.optusnet.com.au)
[06:38:18] *** Joins: Null_A (~null_a@2601:645:8700:2290:a4fb:481a:7fa9:b909)
[06:55:32] *** Joins: mbuf (~Shakthi@122.174.33.79)
[06:56:36] *** Quits: Null_A (~null_a@2601:645:8700:2290:a4fb:481a:7fa9:b909) (Ping timeout: 240 seconds)
[07:14:12] *** Quits: johnjaye (~pi@173.209.64.74) (Ping timeout: 240 seconds)
[07:16:22] *** Joins: johnjaye (~pi@173.209.64.74)
[07:21:42] *** Quits: johnjaye (~pi@173.209.64.74) (Ping timeout: 256 seconds)
[07:23:09] *** Joins: johnjaye (~pi@173.209.64.74)
[07:26:00] *** Joins: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729)
[07:28:24] *** Quits: johnjaye (~pi@173.209.64.74) (Ping timeout: 250 seconds)
[07:29:44] *** Joins: johnjaye (~pi@173.209.64.74)
[07:30:45] *** Quits: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729) (Ping timeout: 250 seconds)
[07:34:56] *** Quits: johnjaye (~pi@173.209.64.74) (Ping timeout: 245 seconds)
[07:37:29] *** Joins: johnjaye (~pi@173.209.64.74)
[07:42:57] *** Quits: johnjaye (~pi@173.209.64.74) (Ping timeout: 256 seconds)
[07:43:00] *** Joins: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729)
[07:44:27] *** Joins: johnjaye (~pi@173.209.64.74)
[07:50:22] *** Quits: johnjaye (~pi@173.209.64.74) (Remote host closed the connection)
[07:50:53] *** Joins: johnjaye (~pi@173.209.64.74)
[07:54:37] *** Quits: faxmodem (~faxmodem@82-65-124-102.subs.proxad.net) (Ping timeout: 240 seconds)
[07:56:33] *** Quits: johnjaye (~pi@173.209.64.74) (Ping timeout: 256 seconds)
[07:57:23] *** Joins: johnjaye (~pi@173.209.64.74)
[07:59:35] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Ping timeout: 240 seconds)
[08:00:57] *** Quits: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729) (Ping timeout: 240 seconds)
[08:02:47] *** Quits: johnjaye (~pi@173.209.64.74) (Ping timeout: 256 seconds)
[08:05:20] *** Joins: johnjaye (~pi@173.209.64.74)
[08:10:43] *** Quits: johnjaye (~pi@173.209.64.74) (Ping timeout: 256 seconds)
[08:15:36] *** Joins: johnjaye (~pi@173.209.64.74)
[08:20:36] *** Quits: johnjaye (~pi@173.209.64.74) (Ping timeout: 240 seconds)
[08:22:29] *** Joins: johnjaye (~pi@173.209.64.74)
[08:28:22] *** Quits: johnjaye (~pi@173.209.64.74) (Ping timeout: 272 seconds)
[08:28:56] *** Joins: johnjaye (~pi@173.209.64.74)
[08:29:00] *** Quits: zak (~zak@144.172.69.61) (Ping timeout: 240 seconds)
[08:31:00] *** Quits: RedNifre (~RedNifre@dslb-188-100-021-068.188.100.pools.vodafone-ip.de) (Ping timeout: 240 seconds)
[08:34:42] *** Quits: johnjaye (~pi@173.209.64.74) (Ping timeout: 272 seconds)
[08:35:46] *** Joins: johnjaye (~pi@173.209.64.74)
[08:41:00] *** Quits: johnjaye (~pi@173.209.64.74) (Ping timeout: 240 seconds)
[08:42:36] *** Joins: johnjaye (~pi@173.209.64.74)
[08:43:18] *** Quits: ltriant (~ltriant@118.102.122.246) (Ping timeout: 256 seconds)
[08:45:09] *** Joins: RedNifre (~RedNifre@dslb-002-206-191-004.002.206.pools.vodafone-ip.de)
[08:48:07] *** Quits: johnjaye (~pi@173.209.64.74) (Ping timeout: 256 seconds)
[08:48:12] *** Joins: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729)
[08:49:05] *** Joins: johnjaye (~pi@173.209.64.74)
[08:54:58] *** Quits: johnjaye (~pi@173.209.64.74) (Ping timeout: 272 seconds)
[08:55:25] *** Joins: johnjaye (~pi@173.209.64.74)
[09:00:52] *** Quits: johnjaye (~pi@173.209.64.74) (Ping timeout: 256 seconds)
[09:01:27] *** Joins: puchka (~marius@165.73.240.252)
[09:01:55] *** Joins: johnjaye (~pi@173.209.64.74)
[09:02:32] *** Joins: shiranaihito_ (~textual@2001-b011-4011-1ed6-8cf5-6121-46cd-4b7b.dynamic-ip6.hinet.net)
[09:05:17] *** Quits: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729) (Ping timeout: 240 seconds)
[09:05:39] *** Quits: shiranaihito (~textual@2001-b011-4011-1b52-3ca4-3c57-3d91-03c0.dynamic-ip6.hinet.net) (Ping timeout: 250 seconds)
[09:07:40] *** Quits: johnjaye (~pi@173.209.64.74) (Ping timeout: 256 seconds)
[09:25:20] *** Quits: shiranaihito_ (~textual@2001-b011-4011-1ed6-8cf5-6121-46cd-4b7b.dynamic-ip6.hinet.net) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[09:36:36] *** Joins: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729)
[09:41:17] *** Quits: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729) (Ping timeout: 240 seconds)
[09:43:33] *** Joins: ltriant (~ltriant@118.102.122.246)
[09:51:35] *** Quits: ltriant (~ltriant@118.102.122.246) (Ping timeout: 256 seconds)
[09:52:12] *** Joins: shiranaihito (~textual@61-64-208-160-adsl-tpe.dynamic.so-net.net.tw)
[09:52:27] *** Quits: shiranaihito (~textual@61-64-208-160-adsl-tpe.dynamic.so-net.net.tw) (Read error: Connection reset by peer)
[09:52:50] *** Joins: shiranaihito (~textual@61-64-208-160-adsl-tpe.dynamic.so-net.net.tw)
[09:55:10] *** Joins: johnjaye (~pi@173.209.64.74)
[10:00:12] *** Quits: johnjaye (~pi@173.209.64.74) (Ping timeout: 240 seconds)
[10:01:36] *** Quits: ToxicFrog (~ToxicFrog@198-200-100-178.cpe.distributel.net) (Ping timeout: 245 seconds)
[10:01:37] *** Joins: johnjaye (~pi@173.209.64.74)
[10:06:53] *** Quits: johnjaye (~pi@173.209.64.74) (Ping timeout: 256 seconds)
[10:07:59] *** Joins: johnjaye (~pi@173.209.64.74)
[10:13:00] *** Quits: johnjaye (~pi@173.209.64.74) (Ping timeout: 240 seconds)
[10:22:37] *** Joins: johnjaye (~pi@173.209.64.74)
[10:27:37] *** Quits: johnjaye (~pi@173.209.64.74) (Ping timeout: 240 seconds)
[10:41:20] *** Joins: struchu (~struchu@staticline-31-183-184-113.toya.net.pl)
[10:43:14] *** Joins: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729)
[10:46:08] *** Joins: ToxicFrog (~ToxicFrog@198-200-100-178.cpe.distributel.net)
[10:57:02] *** Quits: AlaskanEmily (~AlaskanEm@user/alaskanemily) (Ping timeout: 256 seconds)
[10:57:27] *** Joins: AlaskanEmily (~AlaskanEm@user/alaskanemily)
[10:59:15] *** Quits: shiranaihito (~textual@61-64-208-160-adsl-tpe.dynamic.so-net.net.tw) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[10:59:24] *** Quits: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729) (Ping timeout: 240 seconds)
[11:14:55] *** Joins: faxmodem (~faxmodem@82-65-124-102.subs.proxad.net)
[11:15:55] *** Joins: shiranaihito (~textual@219.85.180.123)
[11:23:36] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Remote host closed the connection)
[11:28:48] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[11:29:12] *** Joins: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729)
[11:33:48] *** Quits: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729) (Ping timeout: 240 seconds)
[11:44:17] *** Joins: op2 (~op2@user/op2)
[11:47:10] *** Joins: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729)
[12:00:37] *** Quits: shiranaihito (~textual@219.85.180.123) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[12:05:24] *** Quits: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729) (Ping timeout: 240 seconds)
[12:11:47] *** Joins: shiranaihito (~textual@219.85.180.123)
[12:13:25] *** Joins: remyrd- (~remy@217.30.64.206)
[12:25:25] *** Joins: schmudde (~schmudde@public.toolboxoffice.it)
[12:29:37] *** Joins: yauhsien (~Yau-Hsien@61-231-19-150.dynamic-ip.hinet.net)
[12:35:06] *** Joins: Null_A (~null_a@2601:645:8700:2290:a4fb:481a:7fa9:b909)
[12:39:17] *** Quits: Null_A (~null_a@2601:645:8700:2290:a4fb:481a:7fa9:b909) (Ping timeout: 240 seconds)
[12:54:48] *** Quits: remyrd- (~remy@217.30.64.206) (Remote host closed the connection)
[13:00:20] *** Joins: MajorBiscuit (~MajorBisc@wlan-145-94-218-48.wlan.tudelft.nl)
[13:02:51] *** Joins: jespada (~jespada@148.252.133.112)
[13:04:04] *** Joins: remyrd- (~remy@217.30.64.206)
[13:07:52] *** Quits: remyrd- (~remy@217.30.64.206) (Remote host closed the connection)
[13:57:24] *** Quits: AlaskanEmily (~AlaskanEm@user/alaskanemily) (Remote host closed the connection)
[14:08:44] *** Quits: shiranaihito (~textual@219.85.180.123) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[14:13:06] *** Quits: mange (~user@n114-78-12-98.bla3.nsw.optusnet.com.au) (Ping timeout: 256 seconds)
[14:23:53] *** Quits: mbuf (~Shakthi@122.174.33.79) (Remote host closed the connection)
[14:24:10] *** Joins: mbuf (~Shakthi@122.174.33.79)
[14:30:14] *** Quits: schmudde (~schmudde@public.toolboxoffice.it) (Ping timeout: 252 seconds)
[14:45:28] *** Joins: schmudde (~schmudde@public.toolboxoffice.it)
[14:48:10] *** Joins: ltriant (~ltriant@118.102.122.246)
[14:53:26] *** Quits: ltriant (~ltriant@118.102.122.246) (Ping timeout: 272 seconds)
[14:54:37] *** Quits: puchka (~marius@165.73.240.252) (Quit: leaving)
[15:06:19] *** Joins: puchka (~marius@165.73.240.181)
[15:25:38] *** Joins: Null_A (~null_a@c-98-210-133-39.hsd1.ca.comcast.net)
[15:30:02] *** Quits: Null_A (~null_a@c-98-210-133-39.hsd1.ca.comcast.net) (Ping timeout: 240 seconds)
[15:59:09] *** Joins: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729)
[16:03:37] *** Quits: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729) (Ping timeout: 240 seconds)
[16:27:32] *** Joins: patrice (~patrice@user/patrice)
[16:34:36] *** Quits: patrice (~patrice@user/patrice) (Ping timeout: 240 seconds)
[16:34:36] *** Quits: schmudde (~schmudde@public.toolboxoffice.it) (Ping timeout: 240 seconds)
[16:40:43] *** Joins: shiranaihito (~textual@123-192-192-149.dynamic.kbronet.com.tw)
[16:43:06] *** Joins: schmudde (~schmudde@public.toolboxoffice.it)
[16:52:13] *** Quits: puchka (~marius@165.73.240.181) (Quit: leaving)
[16:56:12] *** Quits: jespada (~jespada@148.252.133.112) (Ping timeout: 240 seconds)
[17:04:03] *** Joins: johnjaye (~pi@173.209.64.74)
[17:09:15] *** Quits: johnjaye (~pi@173.209.64.74) (Ping timeout: 250 seconds)
[17:10:07] *** Joins: Null_A (~null_a@2601:645:8700:2290:a4fb:481a:7fa9:b909)
[17:10:26] *** Joins: johnjaye (~pi@173.209.64.74)
[17:15:54] *** Quits: johnjaye (~pi@173.209.64.74) (Ping timeout: 260 seconds)
[17:20:08] *** Joins: johnjaye (~pi@173.209.64.74)
[17:23:47] *** Quits: lightshadow (~burak@192.222.226.180) (Ping timeout: 256 seconds)
[17:25:46] *** Quits: johnjaye (~pi@173.209.64.74) (Ping timeout: 256 seconds)
[17:26:17] *** Quits: Null_A (~null_a@2601:645:8700:2290:a4fb:481a:7fa9:b909) (Ping timeout: 240 seconds)
[17:28:02] *** Joins: johnjaye (~pi@173.209.64.74)
[17:33:17] *** Quits: johnjaye (~pi@173.209.64.74) (Ping timeout: 240 seconds)
[17:43:59] *** Joins: patrice (~patrice@user/patrice)
[17:50:12] *** Quits: schmudde (~schmudde@public.toolboxoffice.it) (Ping timeout: 240 seconds)
[17:50:57] *** Joins: jespada (~jespada@148.252.133.112)
[17:55:23] *** Joins: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729)
[17:57:15] *** Joins: johnjaye (~pi@173.209.64.74)
[17:59:46] *** Joins: schmudde (~schmudde@public.toolboxoffice.it)
[18:00:23] *** Quits: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729) (Ping timeout: 256 seconds)
[18:02:48] *** Quits: johnjaye (~pi@173.209.64.74) (Ping timeout: 272 seconds)
[18:16:56] *** Joins: johnjaye (~pi@173.209.64.74)
[18:22:26] *** Quits: johnjaye (~pi@173.209.64.74) (Ping timeout: 256 seconds)
[18:24:17] *** Joins: johnjaye (~pi@173.209.64.74)
[18:27:51] *** Joins: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729)
[18:29:24] *** Quits: johnjaye (~pi@173.209.64.74) (Ping timeout: 240 seconds)
[18:32:12] *** Quits: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729) (Ping timeout: 240 seconds)
[18:32:37] *** Joins: johnjaye (~pi@173.209.64.74)
[18:37:54] *** Quits: johnjaye (~pi@173.209.64.74) (Ping timeout: 250 seconds)
[18:45:50] *** Joins: johnjaye (~pi@173.209.64.74)
[18:51:00] *** Quits: johnjaye (~pi@173.209.64.74) (Ping timeout: 240 seconds)
[18:52:17] *** Joins: johnjaye (~pi@173.209.64.74)
[18:56:31] *** Joins: Keriel (~Keriel@bras-base-toroon474qw-grc-71-184-145-2-133.dsl.bell.ca)
[18:57:24] *** Quits: johnjaye (~pi@173.209.64.74) (Ping timeout: 240 seconds)
[19:00:09] *** Joins: johnjaye (~pi@173.209.64.74)
[19:00:18] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[19:00:52] *** Quits: \f (~form_feed@user/f/x-7101985) (Quit: ZNC 1.8.2 - https://znc.in)
[19:03:19] <Keriel> couple things I want to check while I'm doing exercises: is there really no primitive exponentiation, and do we have anything unfoldr shaped (came up in the case of writing a num->digits function)?  posting my code in case I'm asking the wrong questions on how to simplify it, though - https://pastebin.com/LMatQiYw
[19:05:30] *** Quits: johnjaye (~pi@173.209.64.74) (Ping timeout: 256 seconds)
[19:08:15] *** Joins: johnjaye (~pi@173.209.64.74)
[19:10:12] <ToxicFrog> For exponentiation there is clojure.math.numeric-tower/expt, or to call the Java library function Math/pow directly. I have no idea why `pow` or `expt` isn't part of the stdlib next to `*`.
[19:10:43] <ridcully_> if you have a bigdecimal you can also use .pow
[19:11:54] <ToxicFrog> I'm not familiar with `unfoldr`, but looking it up on Hoogle it looks something like: given (unfoldr f x), return a sequence of (f x), (f (f x)), (f (f (f x))), etc until (f ...) returns nil?
[19:11:55] <ridcully_> and if you have a bigint you can .toBigInteger and then .pow
[19:12:24] <ridcully_> wonder what is wrong with BigInteger so it did not get used directly
[19:12:42] <ToxicFrog> In which case I think you want `iterate`
[19:13:43] *** Quits: johnjaye (~pi@173.209.64.74) (Ping timeout: 256 seconds)
[19:14:08] <Keriel> basically iterate with 2 values from the function instead of 1 - unfoldr f x = let (a, b) = f x in a : (unfoldr f b)
[19:14:44] <Keriel> I'm not sure if I'm just trying to fit everything into a lambda-shaped hole though here :P
[19:14:51] *** Joins: johnjaye (~pi@173.209.64.74)
[19:16:06] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Remote host closed the connection)
[19:16:53] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[19:17:01] <ridcully_> useful has it: https://github.com/clj-commons/useful/blob/dc5cdebf8983a2e2ea24ec8951fbb4dfb037da45/src/flatland/useful/seq.clj#L129
[19:17:31] <ridcully_> looks similar to what you have, but is lazy
[19:18:24] <Keriel> yeah, I think that's the same as the haskell version, thank you
[19:18:26] <Para> ToxicFrog: the reasoning has been traditionally that for non-portable features one should leverage the platform
[19:18:50] <Para> That said, next major version of Clojure is finally bringing native numeric parsing functions which is great, even if they're just thing wrappers.
[19:18:59] <Keriel> also, how do I spell square root (given that I need to grab it from... probably java Math.sqrt, it looks like the site I'm doing exercises on doesn't support numerictower?)
[19:19:10] <Para> (Math/sqrt n m)
[19:19:26] <Para> if on JVM
[19:19:51] <Para> ...sorry, it obviously takes just one input :)
[19:20:04] <Para> damnit we need that bot
[19:20:05] *** Quits: johnjaye (~pi@173.209.64.74) (Ping timeout: 252 seconds)
[19:20:08] <ToxicFrog> Para: how is exponentiation nonportable?
[19:20:23] <Para> ToxicFrog: not the operation but the way to call it
[19:20:33] <Para> Which is to say, it's not a very good argument to begin with :)
[19:20:51] <ToxicFrog> Right, but you also write string concatenation different in java vs. js and clojure still has variadic (str)
[19:21:21] *** Joins: johnjaye (~pi@173.209.64.74)
[19:21:41] <Para> I guess that part was written on Friday and that's just where Rich stopped before moving on.
[19:21:56] <Keriel> thanks - having some trouble with predicting what types I'll get out of math functions, is there a decent explanation somewhere?
[19:24:33] *** Quits: struchu (~struchu@staticline-31-183-184-113.toya.net.pl) (Quit: WeeChat 3.3)
[19:25:22] <ridcully_> the type function will tell you what you hold in hand.  for the jvm interop most likely the javadocs of them are a start
[19:26:00] <ridcully_> with Math/something i'd suspect Double
[19:26:45] *** Quits: johnjaye (~pi@173.209.64.74) (Ping timeout: 256 seconds)
[19:26:53] <ridcully_> but there might different versions for different inputs, so you might have to force that
[19:28:31] *** Joins: johnjaye (~pi@173.209.64.74)
[19:29:01] <Keriel> actually meant clojure's primitive math, i.e. why is (+ 1.0M 1.0) 2.0 and not 2.0M?
[19:34:07] *** Quits: johnjaye (~pi@173.209.64.74) (Ping timeout: 256 seconds)
[19:34:57] *** Joins: johnjaye (~pi@173.209.64.74)
[19:40:56] *** Quits: johnjaye (~pi@173.209.64.74) (Remote host closed the connection)
[19:42:37] *** Joins: johnjaye (~pi@173.209.64.74)
[19:44:14] *** Quits: mbuf (~Shakthi@122.174.33.79) (Quit: Leaving)
[19:48:35] *** Quits: johnjaye (~pi@173.209.64.74) (Remote host closed the connection)
[19:49:13] *** Joins: johnjaye (~pi@173.209.64.74)
[19:55:14] *** Quits: johnjaye (~pi@173.209.64.74) (Remote host closed the connection)
[19:55:35] *** Joins: johnjaye (~pi@173.209.64.74)
[19:55:36] *** Joins: wonko (~wjc@user/wonko)
[19:58:45] *** Joins: form_feed (~form_feed@user/f/x-7101985)
[20:01:06] *** Quits: johnjaye (~pi@173.209.64.74) (Ping timeout: 260 seconds)
[20:02:02] *** Joins: johnjaye (~pi@173.209.64.74)
[20:07:59] *** Quits: johnjaye (~pi@173.209.64.74) (Remote host closed the connection)
[20:10:57] *** Quits: schmudde (~schmudde@public.toolboxoffice.it) (Ping timeout: 256 seconds)
[20:11:41] *** Joins: johnjaye (~pi@173.209.64.74)
[20:17:01] *** Quits: johnjaye (~pi@173.209.64.74) (Ping timeout: 245 seconds)
[20:21:39] *** Joins: schmudde (~schmudde@public.toolboxoffice.it)
[20:21:42] *** Joins: johnjaye (~pi@173.209.64.74)
[20:27:13] *** Quits: johnjaye (~pi@173.209.64.74) (Ping timeout: 272 seconds)
[20:30:22] *** Joins: johnjaye (~pi@173.209.64.74)
[20:35:36] *** Quits: johnjaye (~pi@173.209.64.74) (Ping timeout: 256 seconds)
[20:39:45] *** Joins: ltriant (~ltriant@118.102.122.246)
[20:39:53] *** Joins: johnjaye (~pi@173.209.64.74)
[20:44:37] *** Quits: ltriant (~ltriant@118.102.122.246) (Ping timeout: 250 seconds)
[20:45:34] *** Quits: johnjaye (~pi@173.209.64.74) (Ping timeout: 272 seconds)
[20:46:08] *** Joins: johnjaye (~pi@173.209.64.74)
[20:48:32] *** Quits: v88m (~Xiro@109-252-170-8.dynamic.spd-mgts.ru) (Ping timeout: 240 seconds)
[20:50:41] *** Quits: johnjaye (~pi@173.209.64.74) (Client Quit)
[20:51:04] *** Joins: johnjaye (~pi@173.209.64.74)
[20:54:19] <Keriel> I'm somewhat interested in the reasoning for clojure not having first-class continuations?
[20:56:17] *** Quits: johnjaye (~pi@173.209.64.74) (Ping timeout: 256 seconds)
[20:56:34] <ToxicFrog> My completely uninformed guess is that it's going to be something about JVM limitations.
[20:57:47] <seebs> https://okmij.org/ftp/continuations/against-callcc.html <-- got linked to this recently in some context but now forgot where i ran into it
[20:57:52] <seebs> so it was probably here and my IRC client betrayed me
[20:58:52] *** Quits: bailon (~gizzard@saturn.whatbox.ca) (Quit: ZNC 1.8.2 - https://znc.in)
[20:59:33] <technomancy> the JVM bytecode spec only has method-local gotos
[21:05:14] *** Joins: mwnaylor (~user@2601:5ce:4300:5560::68b3)
[21:15:24] *** Joins: dalek_caan (~Thunderbi@109-252-124-86.nat.spd-mgts.ru)
[21:15:36] *** Quits: jespada (~jespada@148.252.133.112) (Read error: Connection reset by peer)
[21:26:53] *** Quits: MajorBiscuit (~MajorBisc@wlan-145-94-218-48.wlan.tudelft.nl) (Ping timeout: 256 seconds)
[21:42:44] *** Quits: szkl (uid110435@id-110435.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[21:47:56] *** Joins: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729)
[21:57:01] *** Quits: wonko (~wjc@user/wonko) (Ping timeout: 245 seconds)
[22:07:00] *** Quits: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729) (Ping timeout: 240 seconds)
[22:17:29] *** Joins: v88m (~Xiro@109-252-170-8.dynamic.spd-mgts.ru)
[22:38:13] *** Joins: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729)
[22:45:44] *** Guest402 is now known as sudden
[22:46:17] *** Quits: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729) (Ping timeout: 240 seconds)
[22:47:57] *** Joins: jungy (~jungy@pool-96-244-55-89.bltmmd.fios.verizon.net)
[23:17:15] *** Joins: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729)
[23:21:28] *** Quits: dalek_caan (~Thunderbi@109-252-124-86.nat.spd-mgts.ru) (Quit: dalek_caan)
[23:28:20] *** Quits: schmudde (~schmudde@public.toolboxoffice.it) (Ping timeout: 272 seconds)
[23:34:12] *** Quits: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729) (Ping timeout: 240 seconds)
[23:48:53] *** Joins: seschwar (~seschwar@user/seschwar)
[23:49:37] *** Joins: lagooned (~lagooned@108-208-149-42.lightspeed.hstntx.sbcglobal.net)
