[00:00:46] <yo> is there any way of getting the zig language reference in pdf?
[00:00:54] <yo> or epub for that matter?
[00:02:36] <ifreund> yo: you can probably just use the print button in your browser no?
[00:03:54] *** Joins: paulgrmn__ (~paulgrmn@user/paulgrmn)
[00:05:15] <yo> its cutting the wider code snippets, but its better than nothing 
[00:05:17] <yo> thanks 
[00:06:06] <ifreund> no problem
[00:06:50] <yo> its refreshing to see a reference manual under 250 pages for a programming language 
[00:09:05] <ifreund> :)
[00:14:11] *** Joins: nurbl (~jofo@81-236-135-207-no279.tbcn.telia.com)
[00:18:50] *** Quits: amk (~amk@109.255.169.126) (Read error: Connection reset by peer)
[00:19:26] *** Joins: amk (~amk@109.255.169.126)
[00:25:01] *** Quits: paulgrmn__ (~paulgrmn@user/paulgrmn) (Ping timeout: 240 seconds)
[00:27:44] *** Joins: freshcoffee1 (~fresh@user/freshcoffee)
[00:28:07] *** Quits: freshcoffee (~fresh@user/freshcoffee) (Ping timeout: 256 seconds)
[00:35:56] *** Quits: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl) (Read error: Connection reset by peer)
[00:56:27] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[00:57:34] *** Joins: frmdstryr (~jrm@172.58.203.62)
[00:58:02] *** Quits: livoreno (~livoreno@user/notzmv) (Ping timeout: 268 seconds)
[00:58:16] *** Joins: ur5us_ (~ur5us@2406:e002:6c7b:2301:f812:b76c:617f:99d7)
[00:59:34] *** Joins: paulgrmn__ (~paulgrmn@user/paulgrmn)
[01:13:26] *** Quits: earnestly (~earnest@user/earnestly) (Quit: WeeChat 3.4)
[01:21:17] *** Joins: earnestly (~earnest@user/earnestly)
[01:23:19] *** Quits: rgrinberg (~textual@2806:265:5401:9431:bc59:9b73:1cc3:bb38) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[01:33:17] *** Quits: paulgrmn__ (~paulgrmn@user/paulgrmn) (Ping timeout: 240 seconds)
[01:40:31] *** Quits: pkap (~pkap@193.32.127.238) (Ping timeout: 256 seconds)
[01:57:22] <Franciman> now I need to find an alternative to zig
[01:57:25] <Franciman> rip
[01:58:06] <Franciman> the teacher said he was interested in developing a functional language
[01:58:14] <Franciman> so i can't stop the interpreter now :P
[02:19:37] *** Quits: frmdstryr (~jrm@172.58.203.62) (Ping timeout: 240 seconds)
[02:22:46] *** Joins: notapenguin (~ryu@187.3.254.107)
[02:30:16] *** Quits: yrlf (~yrlf@omnath.yrlf.at) (Quit: The Lounge - https://thelounge.chat)
[02:31:14] *** Joins: yrlf (~yrlf@omnath.yrlf.at)
[02:49:06] *** Quits: nurbl (~jofo@81-236-135-207-no279.tbcn.telia.com) (Ping timeout: 245 seconds)
[03:23:13] *** Quits: xackus_ (~xackus@185.15.0.3) (Ping timeout: 256 seconds)
[03:27:52] *** Quits: notapenguin (~ryu@187.3.254.107) (Quit: WeeChat 3.4)
[03:32:32] *** Joins: rgrinberg (~textual@2806:265:5401:9431:bc59:9b73:1cc3:bb38)
[03:51:17] *** Quits: freshcoffee1 (~fresh@user/freshcoffee) (Quit: WeeChat 3.0.1)
[03:54:25] <dcx> How does a C *void translate to zig?
[03:54:46] <dcx> I've tried [*]c_void and *c_void but they both fail CI
[04:02:38] *** Quits: bgs (~bgs@upc.si.94.140.92.241.dc.cable.static.telemach.net) (Remote host closed the connection)
[04:03:15] <dcx> use of undeclared identifier 'c_void'
[04:03:25] *** Joins: bgs (~bgs@upc.si.94.140.92.241.dc.cable.static.telemach.net)
[04:13:40] *** Quits: crest (~quassel@user/crest) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[04:13:58] *** Joins: crest (~quassel@user/crest)
[04:14:18] *** Quits: rgrinberg (~textual@2806:265:5401:9431:bc59:9b73:1cc3:bb38) (Ping timeout: 260 seconds)
[04:18:41] *** Joins: kotto (~kotto@2001:8a0:ee37:f500:2ad2:44ff:fe68:9566)
[04:21:26] <andrewrk> dcx, https://ziglang.org/download/0.9.0/release-notes.html#c_void-renamed-to-anyopaque
[04:27:37] *** Quits: ur5us_ (~ur5us@2406:e002:6c7b:2301:f812:b76c:617f:99d7) (Ping timeout: 240 seconds)
[04:39:57] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 240 seconds)
[04:46:42] *** Joins: nurbl (~jofo@81-236-135-207-no279.tbcn.telia.com)
[04:49:08] * cr1901 reads the release notes... there's a self-hosted linker?! Wow, nice!
[05:07:37] *** Quits: earnestly (~earnest@user/earnestly) (Ping timeout: 240 seconds)
[05:13:43] *** Quits: nurbl (~jofo@81-236-135-207-no279.tbcn.telia.com) (Ping timeout: 256 seconds)
[05:15:14] *** Joins: noeontheend (~noeonthee@207.237.194.194)
[05:48:06] *** Joins: drewr (~drew@user/drewr)
[05:48:58] *** Joins: nurbl (~jofo@81-236-135-207-no279.tbcn.telia.com)
[05:54:57] *** Quits: drewr (~drew@user/drewr) (Ping timeout: 240 seconds)
[06:07:33] *** Quits: nurbl (~jofo@81-236-135-207-no279.tbcn.telia.com) (Ping timeout: 256 seconds)
[06:11:29] *** Quits: neurocyte0132889 (~neurocyte@user/neurocyte) (Ping timeout: 250 seconds)
[06:19:48] *** Joins: Stalevar (~stalevar@user/stalevar)
[06:20:09] <Stalevar> Hello. I cannot build zig from source by official instruction. 
[06:20:24] <Stalevar> CMake Error at cmake/Findllvm.cmake:110 (message):
[06:20:24] <Stalevar>   LLVM (according to /usr/bin/llvm-config) is missing target AArch64.  Zig
[06:20:24] <Stalevar>   requires LLVM to be built with all default targets enabled.
[06:20:50] <Stalevar> The bug is reproducible both in 0.9.0 and 0.10.0 dev latest as on tarball downloaded from the official download page
[06:21:20] <Stalevar> I do not intend to build for AArch64, I only need a compiler for x86, which is listed among targets
[06:21:39] <Stalevar> $ llvm-config --targets-built
[06:21:39] <Stalevar> AMDGPU BPF X86
[06:21:48] *** Joins: pre (~pre@dsl-173-206-157-146.tor.primus.ca)
[06:22:37] *** Quits: pre (~pre@dsl-173-206-157-146.tor.primus.ca) (Client Quit)
[06:23:03] <Stalevar> So, I think that zig build scripts should be adjusted to build zig anyway for targets which system-installed llvm has instead of interrupting the build
[06:24:26] <Stalevar> I do not want to rebuild system llvm to include targets which I do not plan to use anyway
[06:25:52] *** Joins: freshcoffee (~fresh@user/freshcoffee)
[06:28:48] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.4)
[07:10:27] *** Quits: neceve (~quassel@2.26.93.228) (Ping timeout: 256 seconds)
[07:12:44] *** Quits: arkurious (~arkurious@user/arkurious) (Quit: Leaving)
[07:13:57] *** Joins: rgrinberg (~textual@2806:265:5401:9431:bc59:9b73:1cc3:bb38)
[07:22:34] <andrewrk> upstream zig supports targeting aarch64. if you wish to disable that target then you are not building upstream zig, you are maintaining a fork
[07:23:43] <andrewrk> therefore you will have to follow non-official instructions to build from source
[07:31:17] *** Quits: noeontheend (~noeonthee@207.237.194.194) (Ping timeout: 240 seconds)
[07:42:37] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 240 seconds)
[08:13:43] *** Quits: terinjokes (~terinjoke@2604:a880:2:d0::227b:f001) (Quit: ZNC 1.8.2 - https://znc.in)
[08:14:29] *** Joins: terinjokes (~terinjoke@2604:a880:2:d0::227b:f001)
[08:38:33] *** Joins: xd1le (~xd1le@user/xd1le)
[08:43:55] *** Quits: cr1901 (~cr1901@2601:8d:8600:911:b03f:919f:5106:21c0) (Read error: Connection reset by peer)
[08:44:00] *** Joins: cr1901_ (~cr1901@2601:8d:8600:911:9823:6ed:a3e3:31d5)
[08:48:29] *** Quits: outfox (~outfox@user/outfox) (Ping timeout: 256 seconds)
[08:49:53] *** Joins: outfox (~outfox@213.144.147.16)
[08:49:53] *** Quits: outfox (~outfox@213.144.147.16) (Changing host)
[08:49:53] *** Joins: outfox (~outfox@user/outfox)
[09:14:17] *** Quits: outfox (~outfox@user/outfox) (Ping timeout: 240 seconds)
[09:14:33] *** Quits: nyah (~nyah@94.6.71.219) (Ping timeout: 256 seconds)
[09:16:15] *** Joins: outfox (~outfox@213.144.147.16)
[09:16:15] *** Quits: outfox (~outfox@213.144.147.16) (Changing host)
[09:16:15] *** Joins: outfox (~outfox@user/outfox)
[09:40:48] *** Quits: rgrinberg (~textual@2806:265:5401:9431:bc59:9b73:1cc3:bb38) (Read error: Connection reset by peer)
[09:42:08] *** Joins: rgrinberg (~textual@2806:265:5401:9431:bc59:9b73:1cc3:bb38)
[09:56:23] *** Joins: notzmv (~zmv@user/notzmv)
[10:00:21] *** Quits: rgrinberg (~textual@2806:265:5401:9431:bc59:9b73:1cc3:bb38) (Read error: Connection reset by peer)
[10:01:18] *** Joins: rgrinberg (~textual@2806:265:5401:9431:bc59:9b73:1cc3:bb38)
[10:18:42] *** Joins: bgiannan (~bgiannan@2a01:4f8:141:1272::2)
[10:19:37] *** Quits: Arnavion (arnavion@user/arnavion) (Ping timeout: 240 seconds)
[10:23:09] *** Joins: Arnavion (arnavion@user/arnavion)
[10:54:17] *** Quits: Arnavion (arnavion@user/arnavion) (Ping timeout: 240 seconds)
[10:59:26] *** Joins: Arnavion (arnavion@user/arnavion)
[11:01:55] <Stalevar> andrewrk, why llvm is able to disable targets without maintainging any forks?
[11:02:45] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Quit: Leaving)
[11:06:42] <andrewrk> LLVM and Zig have different goals driving the relevant decision making
[11:07:21] <andrewrk> the reason Zig has those checks in the build script is to increase friction for people to distribute handicapped zig binaries that do not support the full set of targets
[11:07:34] <andrewrk> you are experiencing intended friction
[11:15:28] <andrewrk> because we don't want users trying out the advertised cross compilation features and then discovering that it does not work
[11:16:20] *** Quits: rgrinberg (~textual@2806:265:5401:9431:bc59:9b73:1cc3:bb38) (Remote host closed the connection)
[11:17:13] *** Joins: rgrinberg (~textual@177.246.221.117)
[11:37:23] *** Joins: phaleth (~phaleth@user/phaleth)
[12:01:24] *** Joins: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl)
[12:05:16] *** Quits: Arnavion (arnavion@user/arnavion) (Ping timeout: 268 seconds)
[12:16:00] *** Joins: Arnavion (arnavion@user/arnavion)
[12:41:58] *** Quits: rgrinberg (~textual@177.246.221.117) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[13:04:53] *** Quits: bindu (~bindu@user/bindu) (Remote host closed the connection)
[13:05:32] *** Joins: bindu (~bindu@user/bindu)
[13:22:42] *** Joins: nurbl (~jofo@81-236-135-207-no279.tbcn.telia.com)
[13:56:47] *** Quits: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl) (Read error: Connection reset by peer)
[14:08:11] *** Joins: earnestly (~earnest@user/earnestly)
[14:18:34] *** Joins: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl)
[14:32:42] *** Quits: cursey (~cursey@user/cursey) (Quit: bye)
[14:32:52] *** Quits: phaleth (~phaleth@user/phaleth) (Quit: phaleth)
[14:35:35] *** Joins: phaleth (~phaleth@user/phaleth)
[14:45:32] *** Joins: cursey (~cursey@user/cursey)
[14:50:14] <bw> am I remembering correctly that anyopaque is not a pointer by itself? If so, shouldn’t anyframe also be a type with unknown size that has to be behind a pointer?
[15:06:37] *** Quits: nurbl (~jofo@81-236-135-207-no279.tbcn.telia.com) (Ping timeout: 240 seconds)
[15:13:13] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[15:18:35] *** Joins: nurbl (~jofo@81-236-135-207-no279.tbcn.telia.com)
[15:26:05] <bw> Where is the layout of a Frame type computed in the compiler?
[15:29:51] *** Joins: jjido (~Denis@2a01:4b00:80e2:7100:fd22:304c:4846:f013)
[15:33:05] *** Quits: nurbl (~jofo@81-236-135-207-no279.tbcn.telia.com) (Ping timeout: 256 seconds)
[15:39:32] *** Quits: Stalevar (~stalevar@user/stalevar) (Ping timeout: 240 seconds)
[15:53:05] *** Joins: Stalevar (~stalevar@user/stalevar)
[15:54:10] *** Quits: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl) (Read error: Connection reset by peer)
[15:55:06] *** Joins: neceve (~quassel@2.26.93.228)
[16:22:39] *** Joins: yo_ (~0xfe0@49.36.186.18)
[16:24:05] *** Quits: yo (~0xfe0@49.36.186.18) (Ping timeout: 256 seconds)
[16:30:55] *** Joins: terminalpusher (~terminalp@2a01:586:1348:1:f59b:61d9:7028:d913)
[16:34:40] *** Joins: breavyn_ (~breavyn@user/breavyn)
[16:37:37] *** Quits: breavyn (~breavyn@user/breavyn) (Ping timeout: 240 seconds)
[16:40:34] *** Joins: Dko1905 (~Dko1905@37.120.213.164)
[16:43:36] <bw> :O zig emits debug info for the Frame types
[16:58:25] *** Joins: Guest70 (~Guest70@p508c5caf.dip0.t-ipconnect.de)
[16:58:42] <Dko1905> Why don't std.os.linux.* functions work on other unix-like systems?
[16:59:47] <Dko1905> std.os.linux.getuid causes a segfault on FreeBSD.
[17:02:26] <bw> Dko1905: they are syscalls
[17:03:32] <Dko1905> Yes but they fail: "Program terminated with signal SIGSYS, Bad system call."
[17:03:43] <Dko1905> When calling them through @cImport, they work.
[17:04:58] <bw> Dko1905: freebsd doesn't implement the same system calls as linux
[17:05:13] <bw> when you use @cImport, you'd actually calling libc
[17:05:40] <bw> libc is different on linux and freebsd
[17:06:42] <bw> iiuc, BSDs don't have a stable syscall interface
[17:07:04] <bw> but linux does, which is why zig has the `std.os.linux` module
[17:12:10] <Dko1905> Am I expected to write software that only works on Linux, or software that uses @cImports?
[17:12:32] <Dko1905> Why doesn't the std call libc? I would much rather have platform compat than speed.
[17:12:39] <Stalevar> andrewrk, but I have no intention to distribute zig binary, that's 1st, I just was told my program crashed under zig but worked under clang and gcc and I wanted to run it through the debugger to see why
[17:13:06] <Stalevar> 2nd, intended crippling of functionality goes against spirit of free/libre software
[17:14:33] <Stalevar> 3. The zig license says Zig is intended to be used to help **end-users** accomplish their goals. Zig should be used to empower end-users, never to exploit them financially, or to limit their freedom to interact with hardware or software in any way.
[17:15:01] <Stalevar> I am an end user, am I not. And now, zig is used to limit my freedom to interact with software, in this case llvm
[17:16:21] <Stalevar> I was not even going to use zig itself, just to try to reproduce a crash in my program reported by another user
[17:17:16] <Stalevar> And guess, will I feel a desire to learn and promote zig language if I can't build it with my llvm and it was an intentional misfeature?
[17:18:02] <bw> Dko1905: you probably want to use the functions in `std.os` not `std.os.linux`
[17:18:14] <ikskuh> Stalevar: And exactly of reason 3, you cannot build without all targets enabled. Because you are not the end-user, but a zig maintainer in that moment
[17:18:27] <Stalevar> Not really
[17:18:32] <Stalevar> I only build it to use it
[17:18:54] <Stalevar> My distribution does not provide any binaries for zig, only for clang and gcc
[17:18:58] <ikskuh> so you would be a crippled end user in the end
[17:19:09] <ikskuh> becaues you built it in an unsupported way
[17:19:23] <Dko1905> bw: std.os sadly misses A LOT of functions, like getuid, geteuid, getgid, getegid, getgroups and so on?
[17:19:33] <Dko1905> s/\?//
[17:19:40] <Stalevar> I didn't build it. The build failed without technical reason, which I find rather annoying
[17:19:49] <bw> Dko1905: maybe you want `std.c`?
[17:19:54] <ikskuh> it fails with the reason that it couldn't build zig
[17:20:01] <ikskuh> but it would require changing to build a fork of zig
[17:20:14] <Franciman> hi, apparently nobody answered. So i will try to build clang and llvm with debug symbols
[17:20:14] <Stalevar> That's because zig has a misfeature
[17:20:21] <ikskuh> which is "being the same on all platforms"?
[17:20:27] <Franciman> I will let you know
[17:20:42] <ikskuh> that's one of the things that are very important for the mission goal of maintainability
[17:20:51] <ikskuh> if you cannot rely on zig being the same on all platforms and builds
[17:20:55] <ikskuh> you cannot rely on it at all
[17:21:14] <Dko1905> bw: The only reference to getuid is in std.os.linux, I'm forced to create wrappers around the libc.
[17:21:20] <Stalevar> ikskuh, I don't see any reason why I must waste my CPU time on building support for platforms I have never heard about
[17:21:56] <ikskuh> because you're getting either "everything" or "nothing"
[17:22:13] <ikskuh> which is to reduce friction for everyone
[17:22:27] <Stalevar> It did not reduce friction for me, so it has failed
[17:22:30] <ikskuh> if you could select targets enabled you might have problems in the future
[17:22:42] <ikskuh> so you wanna build a zig project
[17:22:44] <Stalevar> Which problems?
[17:22:44] <ikskuh> but it fails
[17:22:49] <ikskuh> because you have disabled targets
[17:22:53] <ikskuh> do you remember this then?
[17:22:54] <semarie> Dko1905: you could just declare the function and use it: pub extern "c" fn getuid() uid_t;
[17:23:00] <bw> Dko1905: hmm, i guess nobody has implemented it for freebsd yet
[17:23:02] <ikskuh> or will you make an issue on the zig repo?
[17:23:10] <bw> you can link it yourself, as semarie says
[17:23:39] <Stalevar> ikskuh, I wanted to make an issue in zig repo already
[17:23:52] <Dko1905> semarie: That's better, I didn't know you could do that.
[17:23:54] <Stalevar> If it didn't have a channel in an IRC net which I was already in, I'd do it
[17:24:15] <ikskuh> for what? "zig couldn't build for aarch64?"
[17:24:18] <ikskuh> (which is my point)
[17:24:25] <dottedmag> Stalevar: wouldn't a prebuilt binary from the same place where you got the tarball work for you?
[17:25:20] <bw> Stalevar: are you trying to build a zig project, or use `zig cc`?
[17:25:35] <ikskuh> bw: afaik they try to build zig
[17:25:48] <ikskuh> but their system LLVM isn't a fully featured LLVM
[17:25:51] <bw> they are trying to build zig so they can build something else
[17:25:53] <ikskuh> but a crippled one with targets disabled
[17:25:55] <Stalevar> bw, zig cc
[17:26:13] <Stalevar> another person told me that my program crashes immediately when built with zig cc but works with gcc
[17:26:14] <bw> and what are you trying to build with zig cc
[17:26:15] <semarie> Stalevar: for me, there is nothing wrong to want a "reduced" zig with only x86 support. but it seems wrong to ask that upstream (zig developers) support it.
[17:26:53] <Dko1905> Is this a good wrapper around getgroups? https://hastebin.skyra.pw/dedafohevu.cs
[17:27:04] <Stalevar> semarie, I'm pretty sure that zig should just silently build for all targets which system llvm supports. 
[17:27:19] <bw> Stalevar: zig has a pre-built freebsd binary
[17:27:22] <dottedmag> Stalevar: It's up to andrewrk to decide
[17:28:28] <bw> Dko1905: there are a couple of issues, but it's not terrible
[17:29:06] <Stalevar> andrewrk, also your decision to disable support for incomplete llvm is mostly going to hit users than maintainers because maintainers in general can probably manipulate cmake config files expertly while I have no idea what to change to make it build anyway
[17:29:15] <bw> Stalevar: it's more work to support a reduced build
[17:29:41] <bw> we'd need feature flags to disable functionality for all the targets you don't want support for
[17:30:15] <ikskuh> Stalevar: you are assuming that users are going to build zig theirselves
[17:30:25] <Stalevar> I doubt that. How does zig know which default targets llvm has? And what if upstream llvm added more target or removed a target with next release, would it break zig build? It would benefit zig to be more flexible about choice of targets
[17:30:45] <Stalevar> ikskuh, yes, because I am an and user and I am going to build it myself
[17:30:56] <ikskuh> so you are both user and maintainer ;)
[17:31:00] <ikskuh> that's why zig is in lockstep with llvm releases
[17:31:06] <bw> Stalevar: it doesn't care about "default targets", it just has all the targets it supports. some of them have to be explicitly enabled in the llvm build
[17:31:26] <Stalevar> And I have no idea which they are
[17:31:39] <ikskuh> so look up what LLVM has enabled by default
[17:31:45] <Stalevar>   LLVM (according to /usr/bin/llvm-config) is missing target AArch64.  Zig
[17:31:45] <Stalevar>   requires LLVM to be built with all default targets enabled.
[17:31:47] <semarie> zig project already supports zig-bootstrap (https://github.com/ziglang/zig-bootstrap) to permit build zig out-of-box with correctly configured llvm
[17:31:50] <bw> Stalevar: why don't you just use the pre-built zig binary for freebsd?
[17:31:51] <ikskuh> because it looks like youre having a non-default LLVM
[17:32:10] *** Joins: drewr (~drew@user/drewr)
[17:32:11] <Stalevar> bw, because it's for freebsd?
[17:32:44] <dottedmag> Stalevar: which target are you on, then?
[17:33:12] <bw> Stalevar: oh, sorry i mixed up two convos
[17:34:19] *** Joins: arkurious (~arkurious@user/arkurious)
[17:34:57] <Stalevar> dottedmag, slackware64 
[17:35:06] <bw> that's just linux...
[17:35:09] <dottedmag> Stalevar: Why don't you use prebuilt binary for linux-amd64?
[17:36:41] <Stalevar> because I don't feel like running binaries which aren't coming from myself or my distro maintainers, it's a basic rule of information security to only run binaries you built yourself except the basic operating system ones
[17:37:07] <bw> Stalevar: if you want to build zig yourself, you have to build all of it
[17:37:23] <bw> zig doesn't work with arbitrary LLVM
[17:37:26] <dottedmag> Stalevar: Then stop calling yourself "user".
[17:38:03] <Stalevar> Why? Building software from source is a usual user thing on distros like Gentoo for example
[17:38:23] <Stalevar> Slackware is less strict in this matters, because it has prebuilt system
[17:38:23] <bw> Stalevar: you can build it from source, but you have to build it with zig's supported LLVM
[17:38:47] <dottedmag> Stalevar: Because that's not the meaning of the word "user" for Zig. It does not make any difference who is called "user" in the other contexts.
[17:38:50] <Stalevar> Or I can just abandon it, or I can patch CmakeLists.txt 
[17:38:57] <bw> making zig super easy to build is not a goal, iiuc
[17:39:06] <earnestly> It ought to be
[17:39:32] <Stalevar> bw, but making zig hard to build seems to be a goal if this was intentionally introduced
[17:39:35] <earnestly> (Hm, tricky.  By easy I assume you mean simple.  Easy might not be the best goal)
[17:39:45] <ikskuh> Stalevar: "making a non-standard build of zig hard" was the goal
[17:39:50] <ikskuh> and you're trying to do that
[17:39:59] <ikskuh> so you're adding/removing features from zig
[17:40:07] <Stalevar> This is a misfeature and it comes strongly against free software spirit
[17:40:07] <ikskuh> which means you are a maintainer/distributor of zig
[17:40:34] <Stalevar> No it doesn't
[17:40:38] <ikskuh> it does
[17:40:42] <ikskuh> as you're changing things
[17:40:51] <Stalevar> Adding/removing features is also in user realm for free software
[17:40:57] <ikskuh> if you are using software, you aren't changing it
[17:41:03] <ikskuh> i disagree
[17:41:14] <Stalevar> Free software is called like that for a reason, as in the user should be free to modify it to suit their needs better
[17:41:20] <ikskuh> yes
[17:41:28] <ikskuh> but then you also will be a maintainer
[17:41:28] <bw> Stalevar: take any open source project and remove one of it's source files, see how well it builds
[17:41:30] *** Quits: terminalpusher (~terminalp@2a01:586:1348:1:f59b:61d9:7028:d913) (Remote host closed the connection)
[17:41:54] <ikskuh> if you don't use the source verbatim, you will be a maintainer/developer of that piece of software
[17:42:00] <ikskuh> and not just a pure user
[17:42:23] <Stalevar> bw, llvm allows to list targets in command line during compilation so you don't have to build obscure targets you'd never use and won't waste your disk space
[17:42:36] <dottedmag> Stalevar: You are free to modify it, but you are not entitled to technical support from the authors, and you are not entitled to having your desires being incorporated back.
[17:42:44] <bw> Stalevar: yes, they put in the work to make targets optional
[17:42:48] <bw> zig has not
[17:43:11] <Stalevar> If I am going to distribute my fork then yes, but in this case I'm going to do it on my local machine only, which means that I am an end user, because I'm not going to distribute my modifications
[17:43:38] <ikskuh> yes, it means you're a maintainer
[17:43:43] <ikskuh> you maintain that fork for a single person
[17:43:45] <ikskuh> which is you
[17:43:59] <dottedmag> Stalevar: If you insist on using the words in a meaning different from the meaning in the project, you should not be suprised that nobody understands it.
[17:44:10] <bw> Stalevar: you're just upset zig doesn't let you disable targets
[17:44:17] <Nulo> What even is the conflict here? 
[17:44:20] <bw> but that takes work to implement
[17:44:22] <Nulo> Sthap the flamewar pls
[17:44:30] <ikskuh> Nulo: definition of "maintainer" and zigs strict defaults
[17:44:36] <ikskuh> 🔥🔥🔥
[17:45:10] <earnestly> Seems reasonable to ask for technical help, but technical help can also just say they don't know the answer instead of all ~this~
[17:45:44] *** Joins: tenshi (~red@user/tenshi)
[17:46:16] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[17:46:33] <Nulo> This is weird to me, Zig is built with system LLVM on distros usually so it should just work
[17:46:43] <earnestly> It is?
[17:46:56] <dottedmag> Nulo:   <Stalevar> because I don't feel like running binaries which aren't coming from myself or my distro maintainers <...>
[17:47:06] <earnestly> Huh, arch builds it with upstream llvm.  That's nice
[17:47:17] <bw> Nulo: most distros have a version of llvm with all default targets
[17:47:18] <Stalevar> Nulo, I wanted to build zig to use zig cc to compile my program and see why it crashes under zig but not under gcc and clang. But when I tried to actually install zig, I got this error message:  CMake Error at cmake/Findllvm.cmake:110 (message): LLVM (according to /usr/bin/llvm-config) is missing target AArch64.  Zig requires LLVM to be built with all default targets enabled.
[17:47:41] <earnestly> Hm, the zig build for arch looks perfectly simple and nice
[17:47:46] <earnestly> daurnimator: Nice one
[17:48:08] <Nulo> Calling it "against the free software spirit" is really something else, specially when Zig is _not_ free software (not libre; MIT https://github.com/ziglang/zig/blob/master/LICENSE)
[17:48:10] <bw> earnestly: it's also simple on nixos
[17:48:26] <Nulo> Stalevar: then.. use an LLVM with all targets enabled. What is the problem?
[17:48:35] <bw> some might say it's not that complicated to build...
[17:48:47] <Nulo> Alpine also uses system LLVM https://gitlab.alpinelinux.org/alpine/aports/-/blob/master/testing/zig/APKBUILD , you _do not_ need to build LLVM with Zig to get it working
[17:48:48] <earnestly> I don't include nixos (or anything like it) when it comes to this particular problem of integration, as those systems sidestep the issue completely
[17:48:49] <Franciman> bw: is it easy to get a debug build on nix?
[17:49:01] <Stalevar> Nulo, I don't want to waste my CPU and disk space and more importantly my time on something I am never going to use
[17:49:05] <Franciman> with debug symbols
[17:49:06] <bw> Franciman: not sure, haven't tried
[17:49:16] <Franciman> sure np
[17:49:32] <bw> but probably, assuming nixos fixed the issue with debug symbols in general
[17:49:37] <Nulo> Stalevar: then patch it out or open an issue instead of complaining in an ephemeral IRC room. Read the topic of the room: "be excellent to each other"
[17:49:42] <bw> i worked around a problem with debug symbols in rust
[17:50:30] <bw> Stalevar: this is like asking "hey, i want to build zig with GCC instead of LLVM"
[17:50:41] <Stalevar> Nulo, it makes sense, but andrewrk said it was intentional (mis)feature, which means that opening bug report will be useless, it will be closed as "won'tfix" most likely
[17:50:42] <bw> we don't support your custom version of LLVM
[17:50:49] <Nulo> FWIW I don't think that they made it that way to make it harder to build, but I might be wrong. Zig is _supposed_ to be easy to bootstrap
[17:51:21] <Nulo> Stalevar: I can't seem to find where andrew said that
[17:51:33] <Franciman> it's above in the logs
[17:51:38] <Stalevar>  <andrewrk> the reason Zig has those checks in the build script is to increase friction for people to distribute handicapped zig binaries that do not support the full set of targets
[17:51:53] <Stalevar> Nulo, see? Sounds like intentional misfeature
[17:52:02] <Stalevar> If it was a bug, I'd understand
[17:52:11] <Nulo> Ah, yeah that's kind of trashy, it should be possible to patch it out then
[17:52:31] <bw> Nulo: you can patch anything out, but it takes work
[17:53:26] <dottedmag> bw: Using Slackware involves work making anything work anyway...
[17:53:42] <bw> sure, but Stalevar isn't willing to do the work
[17:54:00] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[17:54:06] <Nulo> This doesn't seem that complicated to patch https://github.com/ziglang/zig-bootstrap/blob/4cced909c6506a6eb96e55ba5c31f883fe8208a1/zig/cmake/Findllvm.cmake#L107
[17:54:18] <Nulo> Just remove   NEED_TARGET("AArch64")
[17:54:47] <bw> it may break, but maybe it won't
[17:55:17] *** Quits: drewr (~drew@user/drewr) (Ping timeout: 240 seconds)
[17:55:32] <bw> what is `Hexagon`?
[17:56:17] <bw> how do i even google for that..
[17:56:44] <bw> it's a qualcomm chip, i guess
[17:56:44] <freshcoffee> google for `llvm hexagon`
[17:56:48] <Stalevar> Nulo, thanks 
[17:57:20] <Stalevar> But I think that zig should make it into upstream
[17:57:53] <bw> zig disagrees
[17:58:57] <Nulo> Maybe with a flag like I_WONT_DISTRIBUTE_THIS_BINARY_TO_OTHERS (unironically)
[17:59:18] <Nulo> I believe it's made to not give a bad impression of Zig to folks
[17:59:39] <earnestly> Nulo: No, you're not going to fix this with technical solutions
[17:59:46] <bw> that check has been in place for at least 2 years, according to git
[18:00:12] <Nulo> I would argue I_WONT_DISTRIBUTE_THIS_BINARY_TO_OTHERS is more of a social solution but :shrug:
[18:00:34] <earnestly> Nulo: It's a technical solution to a social problem
[18:00:42] <Nulo> True
[18:00:53] <bw> the social solution is to say "don't"
[18:00:56] <dottedmag> There are precedents: tainted flag in Linux for example
[18:01:37] <bw> dottedmag: that solves a technical problem of filtering bug reports
[18:01:40] <earnestly> bw: Consider the construction: "I want to purposefully punish people for doing something different to my ideals because it might reflect badly on me"
[18:02:03] <bw> punish is rather strong here
[18:02:05] <earnestly> dottedmag: tainting doesn't prevent usage
[18:02:41] <earnestly> bw: The consequence is punishment
[18:02:51] <bw> making a flag would still require making sure the build works with the default targets missing
[18:03:20] <earnestly> bw: Why not just emit an error explaining that the target isn't available due to the build of llvm?
[18:03:25] <bw> zig may depend on them, without checking "does this target exist in llvm"
[18:03:34] <earnestly> (Wouldn't this be a condition that is normally checked?)
[18:03:49] <bw> not if you always build llvm to have those targets...
[18:04:00] *** Joins: drewr (~drew@user/drewr)
[18:04:16] <bw> checking things has an overhead
[18:04:29] <bw> it may be small, but it's non-zero
[18:04:39] <earnestly> Overhead is in a tight loop, not during initialisation for building software
[18:05:24] <bw> earnestly: llvm could build all the targets and just disable them at runtime, but they don't, because why should they
[18:05:44] <Stalevar> bw, social solution is to fix zig to build with llvm targets which are present in system llvm, maybe with a warning
[18:06:04] <bw> "system llvm" could easily be missing critical features
[18:06:04] <earnestly> bw: The answer that the old hats would tell you is that they're not smart enough to know all solutions and that people smarter than them might have a good reason
[18:06:14] <dottedmag> ... with the final result calling itself anything but "Zig". Say "CrippledZig".
[18:07:01] <earnestly> bw: The other irony is that it doesn't need to check, the resulting failure would make it quite obvious :P
[18:07:10] <Stalevar> bw, then zig should just work with features it has
[18:07:34] <bw> Stalevar: come back when you maintain a software project with that flexibility
[18:08:16] <bw> Stalevar: you're trivializing the effort involved in supporting "whatever LLVM features the person building wants"
[18:08:19] <earnestly> Stalevar: For now just edit the cmake, it's quite easy
[18:08:26] <Stalevar> also zig is terrible in a different way
[18:08:38] <earnestly> llvm isn't a nice library to use, they break quite often and keeping up is difficult
[18:08:41] <Stalevar> Now that I have made it build it is eating all my RAM and then some
[18:08:42] <Franciman> Stalevar: every language is terrible in its way
[18:09:03] <ikskuh> Stalevar: the memory is just a temporary artifact
[18:09:03] <Stalevar>                total        used        free	  shared  buff/cache   available
[18:09:04] <Stalevar> Mem:         8080028     7714608      127336	    3980      238084	  111988
[18:09:04] <Stalevar> Swap:        9437180     4724516     4712664
[18:09:06] <earnestly> (I'm always surprised to see stuff using system llvm)
[18:09:08] <ikskuh> of using a non-finished compiler
[18:09:10] <dottedmag> Stalevar: If you insist someone will do the work for you, you ought to pay them. Shaming works too sometimes, but the end result is that shamed people burn out and leave.
[18:09:28] <Franciman> Stalevar: i suggest you try my programing language
[18:09:30] <ikskuh> yes, building zig requires a shitload of memory right now
[18:09:40] <Franciman> it's made for people to hack on it
[18:09:43] <Franciman> can you do it?
[18:09:46] <Franciman> if so, it's perfect
[18:09:49] <Franciman> you can render it however you want
[18:10:05] <Stalevar> ikskuh, but even 8g is a lot. most computers have 4G of memory at this time
[18:10:06] <ikskuh> that is known and won't change as long as stage-0 is used to build the zig compiler
[18:10:19] <ikskuh> so? it's nothing permanent
[18:10:23] <Franciman> Stalevar: do you have your programming language?
[18:10:27] <earnestly> Stalevar: rust is like this, and then there's android's build system too.  It's pretty wildf
[18:10:34] <ikskuh> and changing it is too costly and won't help anyone at all
[18:10:37] <dottedmag> Stalevar: "Most computers" don't need to compile Zig compiler.
[18:10:43] <earnestly> I think linkers like mold are supposed to help in this case
[18:11:05] <Stalevar> dottedmag, most people need a C compiler and zig boasts to be a good C compiler
[18:11:06] <Nulo> For anyone looking for it, this is the commit: https://github.com/ziglang/zig/commit/f8ba50f5ed2f0d3ee3b0042d2f4057c50e68f63b
[18:11:22] <Franciman> Stalevar: most people need a flexible language that can suit their needs
[18:11:26] <Franciman> with the cost of modifying it
[18:11:30] <Franciman> that's what y'all don't get
[18:11:36] <Franciman> you want everything to be perfect with 0 effort
[18:11:39] <bw> am i correct the reason it uses so much memory is that the c++ compiler (stage1) just doesn't try to manage memory well?
[18:11:39] <Franciman> which is ludicrous
[18:11:49] <dottedmag> Stalevar: Well, pay the maintainers to prioritize your wishes.
[18:11:51] <Franciman> nothing is perfect for all usages
[18:11:55] <ikskuh> Stalevar: a lot of people just don't build zig from source, as it's not necessary
[18:11:56] <dottedmag> If they accept your money, of course.
[18:11:58] <luuk> bw, it's memory strategy is to not handle it at all :)
[18:12:00] <Franciman> if you want them to, you need to invest money or time
[18:12:04] <luuk> s/it's/its
[18:12:07] <bw> luuk: yeah, sounds right
[18:12:18] <bw> luuk: i would do the same if i had to use c++
[18:12:25] <bw> "get me out of here"
[18:12:47] <ikskuh> dottedmag: zig doesn't do the "pay for features" dance
[18:12:59] <dottedmag> ikskuh: Which is why the reservation ;-)
[18:13:11] <Franciman> ikskuh: i think it supports a totally distributed community tho, right?
[18:13:12] <earnestly> bw: The old hats said the same thing about C compilers, it didn't bother freeing memory because it was a one-shot tool
[18:13:14] <Franciman> which I 100 support
[18:13:16] <Franciman> 100%*
[18:13:29] <ikskuh> Franciman: correct
[18:13:35] <earnestly> I think BWK made this comment somewhere
[18:13:36] <Stalevar> [ 99%] Building self-hosted component zig/zig-0.10.0-dev.62+5b171f446/build/zig1.o
[18:13:40] <Nulo> I think this is what it means by "
[18:13:40] <Nulo>     (anyone else want to help?)
[18:13:44] <bw> earnestly: sure, it's a valid strategy. tradeoffs are everywhere
[18:13:46] <Nulo> " in https://github.com/ziglang/zig/wiki/Community
[18:13:46] <Franciman> Stalevar: why are you ignoring my questions?
[18:13:52] <Stalevar> Which?
[18:13:55] <Franciman> all
[18:14:09] <luuk> Franciman, drop it please. It doesn't add anything to the topic: Zig
[18:14:10] <Stalevar> You suggest me to pay for zig developers to remove 5 lines of code they introduced?
[18:14:20] <Franciman> Stalevar: no, i suggest you to get involved
[18:14:23] <Franciman> and do changes
[18:14:26] <bw> Nulo: i offered to help with irc
[18:14:35] <bw> he hasn't gotten back to me yet
[18:14:42] <earnestly> bw: But it's funny because of the scale.  Back then it was reasonable, but now it's starting to chafe (zig isn't even the worst here)
[18:14:51] <Stalevar> Why should I get involved if I only needed zig to use it once to build a single binary?
[18:14:57] *** Quits: drewr (~drew@user/drewr) (Ping timeout: 240 seconds)
[18:15:00] <Franciman> because that's how things work
[18:15:00] <earnestly> C++ and rust are brutal on some codebases, I ended up getting a workstation just for builds
[18:15:06] <bw> earnestly: software grows to fill the resources available
[18:15:12] <earnestly> bw: Jevon's paradox
[18:15:12] <Franciman> you can't just pretend you have a language to work in all use cases you need
[18:15:15] <Franciman> you must get involved
[18:15:19] <Franciman> or make people get involved
[18:15:40] <Stalevar> zig-0.10.0-dev.62+5b171f446/src/codegen/llvm.zig:4333: undefined reference to `LLVMInitializeAArch64Target
[18:15:48] <bw> surprise surprise
[18:16:01] <dottedmag> Stalevar: If you needed zig to use it once you'd use the available prebuilt binary. Don't tell me you have reviewed the whole source code for the absence of backdoors.
[18:16:02] <Stalevar> Nulo, it seems that removing those lines wasn't enough
[18:16:05] <earnestly> bw: See, the error is nice and clear :D
[18:16:14] <bw> :D
[18:16:19] <earnestly> Now that
[18:16:21] <earnestly> I don't mind
[18:16:37] <Nulo> I guess, patch this out too: https://github.com/ziglang/zig/blob/master/src/codegen/llvm.zig#L4450
[18:16:40] <bw> earnestly: he was trying to give a more helpful error message
[18:16:51] <bw> i would argue it is more helpful than that one
[18:17:00] <bw> "undefined symbol" is garbage
[18:17:01] *** Quits: LanceThepants (~Sawzall@96-82-249-149-static.hfc.comcastbusiness.net) (Read error: Connection reset by peer)
[18:17:19] <Nulo> Not the switch branch itself, the calls to init
[18:17:43] <earnestly> bw: Hmhm, I like compiler errors though because they're the only place that knows the truth.  Many pre-condition checks work but when they break it can be 3 hour rabbit holes (thanks autotools)
[18:17:44] <Nulo> It's pretty likely that things will fall apart anyway
[18:18:08] <bw> earnestly: fair, but we're "maintainers"
[18:18:19] <Nulo> There's 70 results for "LLVM aarch64" in the Zig codebase: https://github.com/ziglang/zig/search?p=2&q=llvm+aarch64
[18:18:37] <bw> Nulo: github's search also isn't great
[18:18:38] <earnestly> bw: I've always had a problem with "proxy conditionals", and quite helpfully someone recently wrote a whole article that explains this nicely: https://ferd.ca/plato-s-dashboards.html
[18:18:44] <earnestly> bw: (Also, I'm just a user too)
[18:18:49] *** Joins: Sawzall (~Sawzall@96-82-249-149-static.hfc.comcastbusiness.net)
[18:18:52] <earnestly> At least herte
[18:18:54] <earnestly> here*
[18:19:24] <bw> earnestly: i get where you're coming from, and i don't disagree
[18:19:58] <bw> in this case, every failure is going to tell you about "one more symbol" that's missing
[18:20:13] <earnestly> As a user I've learned to package software so that it plays to the strengths of package management.  It's through that experience where I've learned to prefer compiler errors over autotool style prechecking
[18:20:17] <bw> so he'll be in a very long build->fail->build loop
[18:21:43] <bw> Nulo: lucky that zig has lazy analysis, it may avoid most of those
[18:23:15] <bw> earnestly: fred writes good articles
[18:24:28] *** Joins: xackus_ (~xackus@185.15.0.3)
[18:28:07] *** Quits: Stalevar (~stalevar@user/stalevar) (Remote host closed the connection)
[18:36:09] *** Quits: Dko1905 (~Dko1905@37.120.213.164) (Ping timeout: 250 seconds)
[18:36:12] *** Joins: Stalevar (~stalevar@user/stalevar)
[18:39:52] <bw> hah, this works: https://godbolt.org/z/8661KTGa7
[18:43:53] *** Joins: drewr (~drew@user/drewr)
[18:47:40] *** Joins: neurocyte0132889 (~neurocyte@user/neurocyte)
[18:50:41] *** Quits: gxt (~gxt@gateway/tor-sasl/gxt) (Remote host closed the connection)
[18:51:14] *** Joins: gxt (~gxt@gateway/tor-sasl/gxt)
[18:57:31] *** Joins: nyah (~nyah@94.6.71.219)
[18:58:57] *** Quits: drewr (~drew@user/drewr) (Ping timeout: 240 seconds)
[19:04:17] *** Joins: drewr (~drew@user/drewr)
[19:06:33] *** Quits: Guest70 (~Guest70@p508c5caf.dip0.t-ipconnect.de) (Quit: Client closed)
[19:06:43] *** Joins: Dko1905 (~Dko1905@37.120.213.164)
[19:06:50] *** Quits: Dko1905 (~Dko1905@37.120.213.164) (Remote host closed the connection)
[19:06:52] <bw> :P and this https://godbolt.org/z/eK34KxoWx
[19:07:28] <bw> andrewrk: field access for frames when!
[19:07:48] <bw> "don't do that, you crazy person"
[19:09:22] *** Quits: drewr (~drew@user/drewr) (Ping timeout: 260 seconds)
[19:24:25] *** Quits: xd1le (~xd1le@user/xd1le) (Quit: xd1le)
[19:26:29] *** Quits: yo_ (~0xfe0@49.36.186.18) (Read error: Connection reset by peer)
[19:28:25] *** Quits: Sawzall (~Sawzall@96-82-249-149-static.hfc.comcastbusiness.net) (Read error: Connection reset by peer)
[19:31:50] *** Joins: Sawzall (~Sawzall@96-82-249-149-static.hfc.comcastbusiness.net)
[19:42:15] *** Joins: terminalpusher (~terminalp@2a01:586:1348:1:f59b:61d9:7028:d913)
[19:51:55] *** Joins: frmdstryr (~jrm@172.58.203.104)
[20:00:25] <ifreund> Stalevar: I’d recommend just using clang with -fsanitize=undefined, you’ll probably reproduce the crash that was reported by the user using zig cc
[20:00:30] *** Joins: nurbl (~jofo@94-255-130-43.cust.bredband2.com)
[20:04:53] *** Joins: gioyik (~gioyik@gateway/tor-sasl/gioyik)
[20:15:12] *** Joins: Dko1905 (~Dko1905@37.120.213.164)
[20:21:27] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 250 seconds)
[20:25:50] <Stalevar> ifreund, hm... but my program is depending on undefined behavior
[20:26:06] <Stalevar> How to compile it without -fsanitize-undefined with zig cc?
[20:30:18] <ifreund> -fno-sanitize=undefined
[20:30:45] <ifreund> Stalevar: Why do you have known UB in your program though and not consider it a bug worth fixing?
[20:31:32] *** Joins: xb0o2 (~xb0o2@user/xb0o2)
[20:31:43] *** Quits: nurbl (~jofo@94-255-130-43.cust.bredband2.com) (Ping timeout: 256 seconds)
[20:32:59] <Stalevar> ifreund, because the whole purpose of the program is to demonstrate certain thing which requires UB
[20:33:30] <ifreund> Stalevar: I'm curious now, do you have a link to said program handy?
[20:42:37] <Franciman> Stalevar: what does «depend on UB» mean?
[20:43:13] <Stalevar> Hm... actually I have been able to make it work with clang -fsanitize=undefined somehow
[20:45:38] <Stalevar> But it still doesn't work elsewhere
[20:47:07] *** Joins: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl)
[20:50:58] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Quit: Leaving)
[20:57:48] *** Quits: Dko1905 (~Dko1905@37.120.213.164) (Remote host closed the connection)
[21:16:10] <bw> lolwat
[21:16:42] <bw> “requires undefined behavior” is new
[21:18:31] <Franciman> yes
[21:18:36] <Franciman> mindbending
[21:22:05] *** Quits: xb0o2 (~xb0o2@user/xb0o2) (Quit: Client closed)
[21:23:41] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[21:28:11] <bw> He probably means “requires undocumented behavior that is not portable or reliable”
[21:29:39] <motiejus> Brotli is such: it "relies" on it; you can use a compile flag to make it ubsan-safe, albeit decompression is 5% slower
[21:30:32] <motiejus> https://lists.sr.ht/~motiejus/bazel-zig-cc/%3C20211213023816.obgjrpaxt445lzpn%40mtpad.i.jakstys.lt%3E for a specific instance (I am still looking for bazel experts to answer this ;) )
[21:31:16] <motiejus> https://github.com/google/brotli/blob/ce222e317e36aa362e83fc50c7a6226d238e03fd/CMakeLists.txt#L104-L108
[21:32:56] <bw> That doesn’t make sense…
[21:33:29] <bw> Doesn’t that just mean they depend on how a particular compiler optimizes their code?
[21:36:37] <bw> https://github.com/google/brotli/issues/70
[21:37:15] <bw> motiejus: maybe it’s just because C doesn’t give the author enough control.
[21:51:16] *** Quits: mercenary (~mercenary@user/mercenary) (Quit: ZNC 1.8.2 - https://znc.in)
[21:51:54] *** Joins: slothby (~JoshAshby@irc.isin.space)
[21:52:33] *** Joins: mercenary (~mercenary@user/mercenary)
[21:54:37] *** cr1901_ is now known as cr1901
[21:56:33] *** Quits: duck2 (~duck2@146.185.156.161) (Quit: Ping timeout (120 seconds))
[21:57:06] *** Joins: duck2 (~duck2@146.185.156.161)
[22:04:42] *** Quits: gioyik (~gioyik@gateway/tor-sasl/gioyik) (Ping timeout: 276 seconds)
[22:05:52] *** Joins: penguino (~mrpenguin@user/mrpenguin)
[22:12:37] *** Joins: gioyik (~gioyik@gateway/tor-sasl/gioyik)
[22:13:53] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.4)
[22:17:02] *** Joins: jokoon (~eio@2a01:e0a:542:b20:c1b1:3552:fd0a:3a58)
[22:19:39] *** Quits: gioyik (~gioyik@gateway/tor-sasl/gioyik) (Ping timeout: 276 seconds)
[22:25:21] *** Joins: gioyik (~gioyik@gateway/tor-sasl/gioyik)
[22:30:42] *** Quits: gioyik (~gioyik@gateway/tor-sasl/gioyik) (Ping timeout: 276 seconds)
[22:36:26] *** Joins: xb0o2 (~xb0o2@user/xb0o2)
[22:46:26] *** Joins: gioyik (~gioyik@gateway/tor-sasl/gioyik)
[22:54:58] *** Quits: jjido (~Denis@2a01:4b00:80e2:7100:fd22:304c:4846:f013) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[22:56:14] *** Quits: penguino (~mrpenguin@user/mrpenguin) (Remote host closed the connection)
[22:57:38] *** Joins: rgrinberg (~textual@2806:101e:7:def:5c7c:5699:6e7:d044)
[23:00:09] *** Quits: rgrinberg (~textual@2806:101e:7:def:5c7c:5699:6e7:d044) (Client Quit)
[23:01:57] *** Quits: jokoon (~eio@2a01:e0a:542:b20:c1b1:3552:fd0a:3a58) (Ping timeout: 240 seconds)
[23:04:59] *** Quits: freshcoffee (~fresh@user/freshcoffee) (Quit: WeeChat 3.0.1)
[23:16:12] *** Quits: gioyik (~gioyik@gateway/tor-sasl/gioyik) (Ping timeout: 276 seconds)
[23:17:22] *** Quits: anthon (~Thunderbi@p2e52aa21.dip0.t-ipconnect.de) (Remote host closed the connection)
[23:20:57] *** Joins: anthon (~Thunderbi@p2e52aa21.dip0.t-ipconnect.de)
[23:23:44] *** Joins: gioyik (~gioyik@gateway/tor-sasl/gioyik)
[23:25:23] *** Quits: terminalpusher (~terminalp@2a01:586:1348:1:f59b:61d9:7028:d913) (Remote host closed the connection)
[23:29:32] *** Joins: penguino (~mrpenguin@user/mrpenguin)
[23:33:24] *** Quits: penguino (~mrpenguin@user/mrpenguin) (Remote host closed the connection)
[23:38:23] *** Joins: nurbl (~jofo@94-255-130-43.cust.bredband2.com)
[23:51:21] *** Joins: penguino (~mrpenguin@user/mrpenguin)
[23:51:51] *** Joins: bcmyers (~bcmyers@cpe-76-92-188-7.kc.res.rr.com)
[23:58:06] *** Quits: Colt (~Colt@user/colt) (Remote host closed the connection)
[23:58:32] *** Joins: Colt (~Colt@user/colt)
[23:58:39] *** Quits: bcmyers (~bcmyers@cpe-76-92-188-7.kc.res.rr.com) (Quit: bcmyers)
[23:59:10] *** Joins: bcmyers (~bcmyers@cpe-76-92-188-7.kc.res.rr.com)
