[00:03:59] <Nilby> It turns out I mostly test the external interface, but if not, it's foo:: and the essential multiple-cursors!
[00:05:46] <shka> lisp123: i write my tests in the same package and i think that this is fine, but you gonna need separate asdf system for tests
[00:06:10] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 265 seconds)
[00:06:57] <lisp123> shka: Thanks, yes I have that. I've ended up keeping the test package separate and doing the above trick to import all the symbols into it
[00:06:59] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[00:07:14] <shka> yeah, that also works,
[00:07:19] <_death> Nilby: indeed.. I often use package inferred systems style, so I can test functionality of internal modules since they export their symbols as external interface for internal use
[00:07:55] <shka> there are benefits of having separate package, but i simply don't bother
[00:08:40] <shka> usually i run my tests in a clean lisp image anyway
[00:09:18] <_death> Nilby: but I did use foo::bar recently, as I have a module for visualization that needs to specialize on some classes and obtain information from their instances, and I didn't want to export those symbols
[00:10:07] <stacksmith> I try to keep things separate, but when it takes too much effort I remind myself that it is likely that no one else will ever see the crap I am making.
[00:12:04] <Nilby> _death: I want to like package inferred systems, but I can't get myself to.
[00:12:51] <Nilby> that "::" always works is programming freedom that many languages can't handle
[00:13:56] <_death> they work very well for some (most) of my use cases.. though I did have one or two projects where a more coarse approach would've been better
[00:15:32] *** Quits: cognemo (~cognemo@cpe-46-164-24-121.dynamic.amis.net) (Quit: ZNC 1.8.2 - https://znc.in)
[00:16:47] *** Joins: cognemo (~cognemo@cpe-46-164-24-121.dynamic.amis.net)
[00:19:38] <Nilby> Many package and systems 1-to-1, but some package and systems relationship status has to be: "It's complicated."
[00:20:01] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[00:20:33] *** Joins: lisp123 (~lisp123@5.30.23.247)
[00:25:11] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 258 seconds)
[00:34:50] *** Quits: peterhil (~peterhil@mobile-access-56734e-227.dhcp.inet.fi) (Ping timeout: 260 seconds)
[00:39:05] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[00:48:51] *** Quits: mrcom (~mrcom@99-73-215-70.lightspeed.irvnca.sbcglobal.net) (Read error: Connection reset by peer)
[00:49:18] *** Quits: mrcom_ (~mrcom@99-73-215-70.lightspeed.irvnca.sbcglobal.net) (Ping timeout: 260 seconds)
[00:50:17] *** Joins: mrcom (~mrcom@99-73-215-70.lightspeed.irvnca.sbcglobal.net)
[00:50:56] *** Quits: gaqwas (~john@dynamic-077-007-148-179.77.7.pool.telefonica.de) (Ping timeout: 245 seconds)
[00:54:52] *** Joins: gaqwas (~john@dynamic-077-007-148-179.77.7.pool.telefonica.de)
[00:58:58] <kagevf> somebody on reddit posted about a "conduit" approach the other day ...
[01:00:26] *** Quits: mrcom (~mrcom@99-73-215-70.lightspeed.irvnca.sbcglobal.net) (Read error: Connection reset by peer)
[01:01:13] <kagevf> it was here: https://tfeb.github.io/ look under "Conduit packages for Common Lisp" .... might be useful for handling packages
[01:01:38] *** Joins: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f)
[01:05:29] *** Joins: lisp123 (~lisp123@5.30.23.247)
[01:07:04] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 265 seconds)
[01:07:33] *** Joins: papertanuki (~paper@191.126.63.196)
[01:07:34] *** Joins: mrcom (~mrcom@99-73-215-70.lightspeed.irvnca.sbcglobal.net)
[01:08:14] <papertanuki> Hi everyone! I have a quick CFFI question that I could't find on the documentation.
[01:09:11] <Bike> what's up?
[01:09:11] <papertanuki> How do you translate a C struct that contains an array (really a pointer, and a counter) of other structs?
[01:09:51] <papertanuki> Ie: ```typedef struct Model {
[01:09:52] <papertanuki>     Matrix transform;
[01:09:52] <papertanuki>     int meshCount;
[01:09:53] <papertanuki>     Mesh *meshes;
[01:09:53] <papertanuki>     int materialCount;
[01:09:54] <papertanuki>     Material *materials;
[01:09:54] <papertanuki>     int *meshMaterial;
[01:09:55] <papertanuki>     // Animation data
[01:09:55] <papertanuki>     int boneCount;
[01:09:56] <papertanuki>     BoneInfo *bones;
[01:09:56] <papertanuki>     Transform *bindPose; ``
[01:10:26] <Bike> please use a paste service if you have several lines of code
[01:10:31] <Bike> anyway, i think you just need to put :pointer
[01:11:44] <Bike> if you have a defcstruct for BoneInfo or whatnot, you can specify (:pointer bone-info) if you want, but i think cffi ignores the underlying types of pointers
[01:12:11] <papertanuki> Sorry, first time using IRC.
[01:12:33] <pjb> try: http://termbin.com
[01:12:45] <papertanuki> how's that different from (:struct bone-info) ?
[01:13:40] <Bike> oh, you're right, (:pointer (:struct bone-info)) then
[01:13:49] <Bike> but again it doesn't matter
[01:14:11] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 264 seconds)
[01:15:37] <papertanuki> So when translating using `translate-from-foreign`, is there a way to get all of the bones in a lisp array?
[01:20:00] *** Quits: shka (~herr@83.175.151.96.piasta.pl) (Ping timeout: 258 seconds)
[01:26:02] <Nilby> papertanuki: You can use mem-aref in a loop on "bones" and then with-foreign-slots or foreign-slot-value of the struct pointer get the data out. The CFFI manual has decent examples.
[01:39:27] *** Quits: pve (~pve@37-136-125-1.rev.dnainternet.fi) (Quit: leaving)
[01:46:14] *** Quits: cosimone (~user@93-47-230-89.ip115.fastwebnet.it) (Ping timeout: 260 seconds)
[01:49:13] *** Joins: icer (eric@gateway/vpn/protonvpn/icer)
[01:52:21] *** Quits: semz (~none@user/semz) (Quit: Leaving)
[01:52:52] *** Joins: semz (~none@user/semz)
[02:03:56] <papertanuki> Nilby: Thanks, I'll try that
[02:07:38] *** Parts: paule32 (~paule32@user/paule32) (Leaving)
[02:14:34] *** Joins: kevingal (~quassel@2a02:8084:4140:f300:80b1:8ede:e79b:49cf)
[02:20:02] *** Joins: Spawns_Carpeting (~Spawns_Ca@user/spawns-carpeting/x-6969421)
[02:24:41] *** Quits: kevingal (~quassel@2a02:8084:4140:f300:80b1:8ede:e79b:49cf) (Remote host closed the connection)
[02:27:36] *** Joins: mrcom_ (~mrcom@99-73-215-70.lightspeed.irvnca.sbcglobal.net)
[02:28:54] *** Quits: spec (~spec@user/spec) (Ping timeout: 265 seconds)
[02:29:31] *** Quits: antoszka (~antoni@rozalia.antoszka.pl) (Ping timeout: 268 seconds)
[02:53:28] *** Joins: akoana (~ah@user/akoana)
[02:57:16] *** Quits: X-Scale (~ARM@50.77.166.178.rev.vodafone.pt) (Ping timeout: 265 seconds)
[02:57:45] *** Joins: spec (~spec@user/spec)
[03:02:35] *** Joins: antoszka (~antoni@rozalia.antoszka.pl)
[03:06:47] *** Joins: hexology (~hexology@user/hexology)
[03:10:49] *** Joins: X-Scale (~ARM@50.77.166.178.rev.vodafone.pt)
[03:24:07] *** Joins: Guest-liao (~Guest-lia@101.86.103.113)
[03:32:10] *** Quits: taiju (~taiju@M014013236064.v4.enabler.ne.jp) (Ping timeout: 260 seconds)
[03:32:43] *** Quits: Guest-liao (~Guest-lia@101.86.103.113) (Ping timeout: 256 seconds)
[03:36:30] <jasom> papertanuki: FWIW Model doesnt' contain an array, only pointers (the two are not always the same in C).
[03:39:48] *** Joins: taiju (~taiju@M014013236064.v4.enabler.ne.jp)
[03:40:35] *** Quits: icer (eric@gateway/vpn/protonvpn/icer) (Ping timeout: 264 seconds)
[03:43:35] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 264 seconds)
[03:43:41] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[03:44:59] *** Lord_of_Life_ is now known as Lord_of_Life
[03:46:50] *** Joins: Guest-liao (~Guest-lia@101.86.103.113)
[03:52:33] <papertanuki> jasom: I know, but in this case Model has "dynamic arrays" in the sense that it stores the length and the pointer to the start of the array.
[03:59:28] *** Quits: igemnace (~ian@user/igemnace) (Ping timeout: 258 seconds)
[04:04:00] *** Joins: igemnace (~ian@user/igemnace)
[04:09:33] *** Quits: papertanuki (~paper@191.126.63.196) (Ping timeout: 256 seconds)
[04:25:47] *** Quits: random-nick (~random-ni@87.116.178.206) (Quit: quit)
[04:27:14] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 260 seconds)
[04:29:07] *** Joins: aeth (~aeth@user/aeth)
[04:54:43] *** Quits: hineios (~hineios@a95-93-142-124.cpe.netcabo.pt) (Ping timeout: 265 seconds)
[04:58:13] *** Joins: peterhil (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi)
[05:06:16] *** Joins: paper (~paper@191.126.63.196)
[05:06:23] *** Quits: paper (~paper@191.126.63.196) (Client Quit)
[05:22:21] *** Joins: zacque (~zacque@5.102.49.60.klj04-home.tm.net.my)
[05:31:28] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 258 seconds)
[05:33:21] *** Joins: aeth (~aeth@user/aeth)
[05:38:21] <zacque> Hi #commonlisp
[05:46:47] *** Quits: nature (~nature@45.32.235.173) (Remote host closed the connection)
[05:51:45] <hayley> Is the most recent version of POIU at https://github.com/fare/poiu?
[06:14:34] *** Quits: gaqwas (~john@dynamic-077-007-148-179.77.7.pool.telefonica.de) (Ping timeout: 260 seconds)
[06:15:19] *** Joins: gaqwas (~john@dynamic-077-009-033-110.77.9.pool.telefonica.de)
[06:19:51] *** Quits: jealousmonk (~user@2804:431:e7c5:3f2:5f6e:d4b3:6e97:d2df) (Quit: ERC (IRC client for Emacs 27.1))
[06:21:23] *** Quits: Nilby (~Nilby@2601:603:1481:30a0:82fa:5bff:fe66:4b49) (Ping timeout: 264 seconds)
[06:29:03] <jeosol> hayley: I would think its the version on gitlab
[06:29:27] <jeosol> I am not sure how updated the github one is. But last time, I had to clone from the gitlab repo
[06:29:42] <hayley> They seem identical, and this repo claims to be a mirror. Still. Thanks!
[06:30:05] *** Quits: Guest-liao (~Guest-lia@101.86.103.113) (Ping timeout: 256 seconds)
[06:30:52] <beach> Good morning everyone!
[06:36:04] *** Joins: Guest-liao (~Guest-lia@101.86.103.113)
[06:46:32] *** Joins: winning-luser (~winning-l@2601:8c1:181:1340::e50f)
[06:48:30] *** Quits: Bike (~Glossina@71.69.170.70) (Quit: leaving)
[06:53:38] <jeosol> hayley: that's great then i f they are same. I didn't check github them.
[06:53:46] <jeosol> beach: good morning
[06:56:09] *** Quits: Guest-liao (~Guest-lia@101.86.103.113) (Ping timeout: 256 seconds)
[07:11:06] *** Quits: akoana (~ah@user/akoana) (Quit: leaving)
[07:28:22] *** Quits: semz (~none@user/semz) (Ping timeout: 252 seconds)
[07:38:40] <opcode> anyone here familiar with the parse-float library?  I'm hitting what I assume is an IEEE 754 bug, where the string "8.78" parses to 8.7799997, but the string "9.78" parses correctly to the number 9.78.  I'm on SBCL 2.1.9 on MacOS
[07:39:28] <opcode> actually 8.78 parses correctly, but 7.78 parses incorrectly.  Typo.
[07:40:07] <beach> What makes you think it is incorrect?
[07:40:27] <White_Flame> opcode: probably a single-float vs double-float discrepancy
[07:40:33] <opcode> White_Flame: perhaps
[07:40:50] <White_Flame> in sbcl linux x64, with read-default-float-format as single, I get that discrepancy.  With it as double-float, it prints 7.78
[07:40:51] <opcode> beach: I would assume that a string-to-number parsing library should faithfully reproduce the number represented in the string
[07:41:13] <beach> opcode: What makes you think it is not faithfully reproduced?
[07:41:47] *** Joins: semz (~none@user/semz)
[07:42:02] <opcode> beach: are you trolling?
[07:42:03] <White_Flame> obviously, typing in 7.78 at the repl parses it as a single-float and prints it in the same 7.78 representation, so it's not a ieee 754 problem
[07:42:29] <beach> opcode: I haven't checked this particular case, but floats are not represented in decimal, so it is entirely possible that there is not an exact decimal representation for the input you are giving.
[07:43:12] <White_Flame> parse-float has a COERCE operation into the returned type, which is probably where the imprecision lies
[07:43:27] <opcode> look beach I can't tell if you're just trying to be irritating but I think you know what I meant.  If you feed a parsing library a string with a number, it should give you that number.  Not a different number.  Unless you're suggesting SBCL can't represent the number "7.78"
[07:44:02] <opcode> White_Flame: thanks for actually helping, I was not aware of the read-default-float-format variable
[07:44:35] <beach> opcode: That's exactly what I am suggesting.  Did you check that your input has an exact representation in IEEE?
[07:44:39] <White_Flame> there is no "that number".  fp represents a range
[07:44:45] <beach> opcode: http://pages.cs.wisc.edu/~david/courses/cs552/S12/handouts/goldberg-floating-point.pdf
[07:45:12] <White_Flame> however, most FP systems try to ensure that the rounding involved makes the read input match the output print
[07:45:26] <opcode> yes exactly
[07:45:33] <White_Flame> but I can guarantee you that it is not holding 7.78
[07:45:45] <opcode> i'm sure it isn't holding 7.78
[07:45:59] <opcode> but my point is that the result I get from the parse operation should be 7.78 because that's the string I fed in
[07:46:06] <opcode> irrespective of the under the hood details
[07:46:09] <beach> *sigh*
[07:46:32] <opcode> *sigh*
[07:47:02] <opcode> beach: I don't know who you are but you've been profoundly unhelpful so I'm going to add you to ignore.  Go troll someone else.
[07:47:54] <beach> Wow.
[07:48:42] <hayley> *sigh*
[07:49:23] <White_Flame> parse-float just builds the number in a haphazard manner
[07:50:15] <White_Flame> there's also no paired printer for it to match its output
[07:53:18] <White_Flame> SBCL's reader appears to keep it as perfect rational, then coerces it into the final format
[07:57:37] <White_Flame> and COERCE goes through a lot of detail in the fp construction, with biases and whatnot, which matches its printer
[07:59:37] *** Parts: pranavats (3fba1d1b34@jabberfr.org) (Disconnected: Replaced by new connection)
[08:00:23] *** Joins: pranavats (3fba1d1b34@jabberfr.org)
[08:01:45] <opcode> I set read-default-float-format to 'double-float but it's still outputting the wrong number.  Interestingly read-from-string does it correctly irrespective of float format
[08:02:37] <White_Flame> it's not outputting the wrong number
[08:02:43] <opcode> sure it is
[08:03:35] <White_Flame> I don't think you're using the right terms in the right places, hence beach's objections
[08:03:44] <opcode> maybe
[08:04:00] <opcode> the condescention from him/her was still unwarratned
[08:04:03] <opcode> *unwarranted
[08:04:11] <opcode> what I'm saying is
[08:04:28] <opcode> if I parse the string "7.78" I expect to see the number 7.78 in my repl
[08:04:44] <opcode> I'm well aware of the limitations of representing infinitely many numbers in a finite number of binary digits
[08:04:50] <White_Flame> why would you expect that with a 3rd party reader?
[08:05:06] <White_Flame> again, parse-float does not have a matching printer
[08:05:14] <beach> I think opcode had better adjust those expectations, but since I am being ignored, it doesn't matter much what I think.
[08:05:16] <opcode> I guess because if I was the author I'd consider it a bug
[08:05:53] <White_Flame> different implementations' floating point storage (which might change with tagging strategies) and their printers could vary.  Which one is "right"?
[08:06:12] <White_Flame> when using parse-float on different implementations with different printers?
[08:06:30] <opcode> I don't think it's an extreme position to suggest that the "right" result is the one that common sense would indicate is correct
[08:06:45] <opcode> especially since (read-from-string "7.78") does produce 7.78 in the repl
[08:06:46] <White_Flame> given the details of FP, yeah that is an unrealistic position
[08:07:41] <opcode> I guess we'll have to agree to disagree
[08:07:49] <White_Flame> again, the critical part is that you are not using a matched reader & printer
[08:08:04] <White_Flame> at the repl with SBCL's reader & SBCL's printer, those 2 are tuned to matched
[08:08:08] <White_Flame> *be matched
[08:08:17] <White_Flame> but 3rd party reader + implementation printer can easily mismatch
[08:08:35] <White_Flame> and again, 3rd party reader + 3 different implementations' printers, which should it match?
[08:08:39] <opcode> how did you determine that there's no matched printer?
[08:09:00] <White_Flame> does parse-float include a floating point printer as well?
[08:09:38] <White_Flame> but even if it did, it doesn't know the implementation representation.  It's only using toplevel math functions, not anything to do with the actual bit representation, as the implementation would do in its platform specific code
[08:10:20] <White_Flame> now, there's lots of work out there in terms of carefully matchign input to output, if you control both ends, but I'm not sure if those have a singular solution
[08:13:42] <opcode> Well, I have the most experience in C#/dotnet and in that ecosystem Double.Parse() will give you consistent results across the two platforms I've had time to try while we've been debating this
[08:13:44] <opcode> and if it didn't
[08:13:51] <opcode> I'm confident it would be considered a bug
[08:14:21] <White_Flame> CL allows platform-defined float formats
[08:14:28] <White_Flame> *implementation-defined
[08:14:39] <White_Flame> in terms of the actual meaning of single-flaot, double-float, etc
[08:15:16] <White_Flame> but I did point out some weakness in parse-float's assembly steps
[08:15:20] <opcode> right but again, and this is just me personally, if I released a library that dealt with implementation-specific code and there was divergent behavior, irrespective of whether it's sockets or floats or what have you, I'd still consider that a bug
[08:15:53] <White_Flame> but this falls within reasonable realms of floating point issues, again because it's not targetting (and cannot target) a specific storage precision & printer
[08:16:00] <opcode> so when I came here asking about it, to be met with smug superiority from beach, it really rubs me the wrong way you know?
[08:16:16] <White_Flame> your terminology was pretty far off
[08:16:23] <opcode> well that's my bad, then
[08:16:36] <White_Flame> and beach was giving you leading questions to realize those
[08:16:37] <opcode> we all are responsible for the words we use
[08:16:53] <opcode> no, beach was playing the "lol ur such a newbie" game
[08:17:01] <opcode> giving half-answers
[08:17:13] <White_Flame> I don't think he said anything inappropriate
[08:18:06] <opcode> cmon man.  7.78 is not the same number (in the mathematical sense, not the binary representation sense) as 7.7799997
[08:18:22] <opcode> so to go "hurr durr what makes you think it's not the same number"
[08:18:25] <White_Flame> and computers don't work with "numbers" in the mathematical sense
[08:18:30] <White_Flame> when it comes to fp
[08:18:47] <White_Flame> so of course it's lossy regarding precision
[08:18:56] <opcode> right and I alluded to that at the outset
[08:19:05] <White_Flame> but whatever, I don't need a play by play
[08:19:10] <White_Flame> the description of the problem was wrong
[08:19:26] <White_Flame> you're using a reader that was not developed in tandem with a specific printer
[08:20:02] <White_Flame> and as a library, as it really can't technically be done as such, has precision decisions that the printer doesn't expect
[08:20:30] *** Quits: winning-luser (~winning-l@2601:8c1:181:1340::e50f) (Quit: zzz)
[08:21:12] <opcode> >the description of the problem was wrong
[08:21:20] <opcode> absolutely, but we don't always know what we don't know
[08:21:24] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[08:21:34] <White_Flame> hence the usefulness of leading questions to get you there
[08:21:46] <opcode> i guess we'll have to agree to disagree on the usefulness of such questions
[08:21:51] <White_Flame> but still, this is veering really off topic for a pretty strictly on topic channel
[08:21:59] <opcode> I can tell you in retrospect I would never have got there following beach's ego game
[08:22:09] <opcode> yes, let's drop it.  I appreciate your help White_Flame
[08:22:11] <White_Flame> I fail to see how you came to that view
[08:22:16] <White_Flame> np
[08:24:35] *** Joins: lisp123 (~lisp123@5.30.23.247)
[08:36:09] *** Joins: Guest-liao (~Guest-lia@101.86.103.113)
[08:46:38] <beach> White_Flame: Thanks.  I don't think I said anything in appropriate either.
[08:48:31] <beach> White_Flame: Since I am ignored, I can say that I don't think opcode was requesting matching input and output functions.  I just think that opcode thinks that the input number has an exact representation in floating point and expect that exact representation to be output.
[08:54:10] *** Quits: peterhil (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi) (Ping timeout: 260 seconds)
[09:04:56] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[09:08:10] *** Quits: remexre (~nathan@user/remexre) (Quit: WeeChat 3.1)
[09:08:19] *** Joins: remexre (~nathan@207-153-38-50.fttp.usinternet.com)
[09:09:06] *** Quits: remexre (~nathan@207-153-38-50.fttp.usinternet.com) (Client Quit)
[09:09:21] *** Joins: remexre (~remexre@user/remexre)
[09:10:30] *** Quits: Krystof (~user@81.174.155.115) (Ping timeout: 260 seconds)
[09:17:16] <beach> If I am doing this right, the SBCL reader turns 7.78 into a number that is greater than 778/100, and I think SBCL has a good input algorithm, i.e. it creates the closest float possible.  That would indicate that the parse-float library does not.
[09:25:03] *** Joins: Qwnavery (~Qwnavery@user/qwnavery)
[09:31:20] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Remote host closed the connection)
[09:31:35] *** Quits: Spawns_Carpeting (~Spawns_Ca@user/spawns-carpeting/x-6969421) (Ping timeout: 264 seconds)
[09:32:40] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[09:33:17] <beach> This discussion reminds me of several incidents when we used Common Lisp in our teaching, and the students discovered that typing something like (+ 0.4 0.3) to the REPL doesn't give the answer 0.7.  They were then very happy to announce that they had found a "bug in Common Lisp".
[09:41:18] <White_Flame> beach: yeah, parse-float coerces portions of the number to the target float type, then combines them with adds and multiplies.  this compounds precision issues
[09:41:51] *** Quits: gxt (~gxt@gateway/tor-sasl/gxt) (Ping timeout: 276 seconds)
[09:43:34] *** Joins: gxt (~gxt@gateway/tor-sasl/gxt)
[09:46:38] *** Quits: Qwnavery (~Qwnavery@user/qwnavery) (Quit: WeeChat 3.3)
[09:52:34] <jasom> It seems that if it used rational arithmetic instead it could avoid that problem
[09:53:40] <jasom> However it's not unusual to see string -> float conversions with an error greater than 1ULP
[09:55:45] *** Joins: rotateq (~user@b2b-78-94-235-194.unitymedia.biz)
[09:58:06] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Ping timeout: 260 seconds)
[09:58:23] <lisp123> beach: You mentioned earlier one of the issues with a CL editor being that without multiple global environments, a crash in the code will cause the editor to crash. How did Lisp Machines or Hemlock (and others) handle this?
[09:58:30] *** Joins: amb007 (~a_bakic@191.39.22.93.rev.sfr.net)
[09:58:43] <beach> White_Flame: Strange!  If I wrote such a thing, I would make sure to use one of the known algorithms for creating the closest possible float.
[09:58:58] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Quit: ZNC - https://znc.in)
[09:59:13] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[10:00:21] *** Joins: Qwnavery (~Qwnavery@user/qwnavery)
[10:01:53] <beach> lisp123: I don't know.  The issue is that current Common Lisp implementations prioritize performance over safety.  I suppose the Lisp Machine didn't have to do that since they had a lot of hardware support.  Don't know about CMUCL (which I believe Hemlock was written for), but it is entirely possible that SBCL has changed its priorities so that performance is more important.  But i am just guessing.
[10:03:40] <beach> lisp123: But it's not related to multiple global environments like that.  I am saying that, with multiple global environments done right, you wouldn't have a disaster if you (say) FMAKUNBOUND CAR.  You would just consider that environment dead and create a new default one.
[10:04:07] <lisp123> beach: Ah thanks good to know. Oh I see, its from that perspective
[10:04:09] <beach> lisp123: And you would not run the editor in the same environment as you work, so you would kill your work environment, but not the editor.
[10:04:51] <rotateq> beach: This performance over-focusing seems to be a cultural thing. :)
[10:05:22] <beach> rotateq: Maybe so.  What "culture" are you referring to here?
[10:05:46] <rotateq> Programming in general and "software development".
[10:05:53] <jackdaniel> I think that asserting that current implementations are more concerned about performance than safety may be a bit a stretch. if climacs signals error that is handler nowhere, you will end up in a debugger no matter how much attention you put to safety
[10:06:07] <beach> rotateq: Yes, I see.  That sounds right.
[10:06:35] <jackdaniel> s/handler nowhere/handled nowhere/
[10:06:47] <Qwnavery> morning jackdaniel, beach
[10:06:49] <rotateq> often also too much business, unnecessary and inefficient planning and too less mathematics
[10:07:03] <rotateq> heyho jackdaniel. i should join #clim :)
[10:07:12] <jackdaniel> sure, go for it ,)
[10:07:33] <beach> jackdaniel: Right.  The scenario I imagined was not when there is a defect in the editor, but when the editor is used in the same image as the application being written, and the programmer does something unsafe.
[10:07:36] <jackdaniel> opcode: if you expect exact representation of numbers in common lisp you may consider using ratios instead of floats
[10:08:47] <lisp123> I may ask this question on Stack Overflow. Because I'm curious that without being in the same image, it is not a trivial affair to transfer Lisp data to / from the image and capture all scenarios
[10:09:21] <lisp123> And being in the same global environment exposes the issues noted above
[10:09:33] <beach> lisp123: Hence the limitations of Emacs + SLIME for editing Common Lisp code.
[10:11:13] *** Joins: cosimone (~user@93-34-132-219.ip49.fastwebnet.it)
[10:11:51] <beach> lisp123: But people seem to accept those limitations to avoid the scenario of an application crashing the editor.  Shinmera, for instance, once said something like "I will never use an editor that runs in the same image as my application code".  It is not an exact quote, but similar in spirit.   And I can understand him, given how relatively easy it is to crash the Common Lisp implementation.
[10:11:57] <jackdaniel> beach: so you mean that some unrelated application sets (safety 0) (speed 3) and triggers some undefined behavior? I would classify it as the programmer being more concerned about performance than safety - the is neutral with this regard (i.e doesn't decide either way)
[10:12:14] <jackdaniel> and there is also restrict-policy in sbcl to mitigate even such scenarios
[10:12:31] <beach> jackdaniel: Sure, but it can happen as a result of a mistake too.
[10:13:07] <beach> jackdaniel: I am told that SBCL believes the programmer when a DYNAMIC-EXTENT declaration is used.
[10:13:19] <beach> jackdaniel: And I can very well see a programmer doing that by mistake.
[10:13:44] <lisp123> beach: Yes. Which makes me wonder what was done in the past. One _speculation_ I have is that they had a more advanced version of SWANK, but hopefully one of the lisp machine experts can answer it
[10:14:05] <beach> But, sure, it is quite possible to state that it is unwise to do things like that with an editor that runs in the same image as the application being developed.
[10:14:12] <jackdaniel> OK, I see your point; I think that the operator `the` is a good counter-example -- sbcl does trust the when safety is <=1 I think, while it doesn't on default settings
[10:14:31] <beach> jackdaniel: Yes, I see.
[10:14:57] <lisp123> (theoretically I don't see an elegant solution without multiple global environments)
[10:15:18] <beach> But those can be had.  We just have to make it happen.
[10:15:42] <lisp123> Yup
[10:16:45] <jackdaniel> n.b (not an argument but an observation), sbcl has ext:*stack-allocate-dynamic-extent* to make it less trusting :) (i.e not trusting unless proven)
[10:17:02] <jackdaniel> when set to nil (although it defaults to t)
[10:17:29] *** Joins: dickbar__ (~dickbaren@86-90-132-28.fixed.kpn.net)
[10:24:06] *** Joins: prxq (~quassel@x4db40186.dyn.telefonica.de)
[10:24:26] *** Joins: pve (~pve@37-136-240-248.rev.dnainternet.fi)
[10:26:19] *** Joins: rgherdt_ (~rgherdt@2a02:8109:86c0:d8d:ede1:773f:e980:d67a)
[10:27:45] *** Joins: Odin-FOO (~odin@cybernetic.anarchism.is)
[10:27:47] *** Joins: jdz_ (~jdz@185.23.160.114)
[10:29:36] <dickbar__> Just a remark: "7.78" should be printed as 7.78000000... (infinit number of zero's). You wil hear from me when i'am ready checking:-)
[10:30:28] <beach> I believe that's right.  So that suggests that it was parsed incorrectly.
[10:30:34] *** Joins: ski_ (~ski@remote12.chalmers.se)
[10:30:42] *** Joins: nckx_ (~nckx@tobias.gr)
[10:30:53] *** Joins: bldr_ (~bull@185.117.72.168)
[10:33:39] <dickbar__> Still checking:-)
[10:34:09] <jackdaniel> "7.78" as a string should be printed as "7.78" or, aesthetically, as 7.78 - but it is not a number ;)
[10:37:00] *** Quits: zacque (~zacque@5.102.49.60.klj04-home.tm.net.my) (Quit: Bye)
[10:39:50] *** Quits: Odin- (~odin@cybernetic.anarchism.is) (Ping timeout: 260 seconds)
[10:39:50] *** Quits: jdz (~jdz@185.23.160.114) (Ping timeout: 260 seconds)
[10:39:50] *** Quits: nckx (~nckx@tobias.gr) (Ping timeout: 260 seconds)
[10:39:50] *** Quits: rgherdt (~rgherdt@2a02:8109:86c0:d8d:e9fe:72f5:e93b:115a) (Ping timeout: 260 seconds)
[10:39:50] *** Quits: ski (~ski@remote12.chalmers.se) (Ping timeout: 260 seconds)
[10:39:50] *** Quits: luis` (~luismboma@2001:470:69fc:105::cc7) (Ping timeout: 260 seconds)
[10:39:50] *** Quits: d4ryus (~d4ryus@ppp-188-174-80-12.dynamic.mnet-online.de) (Ping timeout: 260 seconds)
[10:39:50] *** Quits: bldr (~bull@185.117.72.168) (Ping timeout: 260 seconds)
[10:39:51] *** nckx_ is now known as nckx
[10:40:47] *** Joins: Krystof (~user@81.174.155.115)
[10:42:11] *** Joins: d4ryus (~d4ryus@ppp-188-174-80-12.dynamic.mnet-online.de)
[10:42:35] *** Joins: shka (~herr@83.175.151.96.piasta.pl)
[10:42:52] *** Quits: gaqwas (~john@dynamic-077-009-033-110.77.9.pool.telefonica.de) (Remote host closed the connection)
[10:45:33] *** Joins: gaqwas (~john@dynamic-077-009-033-110.77.9.pool.telefonica.de)
[10:47:51] *** Joins: luis` (~luismboma@2001:470:69fc:105::cc7)
[10:52:52] <saltrocklamp[m]> does anyone here use the `parse-number` library? it seems to triggers some kind of deep internal error in both ccl and sbcl when attempting to parse a string with a literal tab character in it. e.g. in ccl i get "Error: The value NIL is not of the expected type UNSIGNED-BYTE. While executing: (:INTERNAL CCL::BAD-SEQUENCE-INTERVAL CCL::CHECK-SEQUENCE-BOUNDS)"
[10:59:12] *** Quits: amb007 (~a_bakic@191.39.22.93.rev.sfr.net) (Read error: Connection reset by peer)
[11:00:27] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[11:09:57] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Read error: Connection reset by peer)
[11:12:41] *** Joins: amb007 (~a_bakic@191.39.22.93.rev.sfr.net)
[11:12:44] <semz> not for me
[11:13:16] <semz> do you have an example string?
[11:13:37] <semz> saltrocklamp[m]: sorry, forgot to highlight
[11:14:38] *** Quits: lisp123 (~lisp123@5.30.23.247) (Quit: Leaving...)
[11:14:39] *** Quits: amb007 (~a_bakic@191.39.22.93.rev.sfr.net) (Read error: Connection reset by peer)
[11:15:02] *** Joins: zacque (~zacque@5.102.49.60.klj04-home.tm.net.my)
[11:15:04] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[11:17:20] <saltrocklamp[m]> semz: just `(string #\tab)`
[11:18:04] <semz> ah, now I'm getting it too
[11:18:25] <saltrocklamp[m]> bummer. i guess it's a bug
[11:22:06] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Ping timeout: 260 seconds)
[11:22:48] *** Joins: amb007 (~a_bakic@191.39.22.93.rev.sfr.net)
[11:27:59] *** Quits: pve (~pve@37-136-240-248.rev.dnainternet.fi) (Ping timeout: 264 seconds)
[11:28:00] *** Quits: amb007 (~a_bakic@191.39.22.93.rev.sfr.net) (Read error: Connection reset by peer)
[11:28:46] *** Joins: kpoeck (~kpoeck@80.149.96.222)
[11:29:02] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[11:29:06] *** Quits: gaqwas (~john@dynamic-077-009-033-110.77.9.pool.telefonica.de) (Ping timeout: 260 seconds)
[11:29:41] *** Joins: pve (~pve@37-33-35-181.bb.dnainternet.fi)
[11:29:42] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Read error: Connection reset by peer)
[11:29:54] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[11:30:10] <kpoeck> ::notify cracauer static-vectors loads fine in clasp
[11:30:10] <Colleen> kpoeck: Got it. I'll let cracauer know as soon as possible.
[11:39:17] *** Joins: hendursa1 (~weechat@user/hendursaga)
[11:42:45] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 276 seconds)
[11:50:35] *** Quits: Qwnavery (~Qwnavery@user/qwnavery) (Ping timeout: 258 seconds)
[11:52:23] *** Joins: Qwnavery (~Qwnavery@user/qwnavery)
[11:56:12] <JeromeLon> oh no, I missed one of my favorite descussions on binary numbers. I think a good answer was: 7.78 is 111.1100011110101110000101000111101011100001010001111010111000010100011110101110000101000111101011100001... in binary, which is truncated as specified by IEEE754 single precision to 111.110001111010111000010, which is exactly 7.7799997 in decimal.
[11:58:58] <_death> saltrocklamp[m]: it's not bummer, it's an opportunity (submitted a PR)
[12:00:47] <beach> JeromeLon: But the next higher single float is closer to 7.78 than the truncated one I think.  So that means that PARSE-FLOAT truncates rather than returning the best approximation.  Right?
[12:02:25] <jackdaniel> if ieee754 specifies truncating then it should truncate (well, not that common lisp tandard stipulates that its floats behave exactly like ieee754)
[12:03:00] <jackdaniel> marcoxa works on a spec for common lisp floats, it was mentioned during last (or one before last) els
[12:03:11] <beach> Does IEEE745 specify that it should truncate when a decimal representation is converted to a single float?
[12:03:12] <jackdaniel> s/on a spec/on a better spec/
[12:03:41] <jackdaniel> I don't know, I'm repeating what JeromeLon said "which is truncated as specified by IEEE754 single precision"
[12:04:13] <beach> But how is the original binary number obtained, and why was it truncated?
[12:04:18] <beach> There is no reason for that.
[12:04:33] <beach> That's just a choice by PARSE-FLOAT it seems.
[12:04:58] <beach> Whereas there are papers published on how to obtain the closest float for a particular decimal representation.
[12:06:04] <JeromeLon> IEEE745 specifies several rounding methods. Does it recommend one of them? I don't know actually
[12:06:22] <beach> JeromeLon: But isn't that beside the point?
[12:06:53] <beach> JeromeLon: There is no reason for PARSE-FLOAT to generate the original value that you showed.
[12:07:02] <JeromeLon> beach: yes, I agree with you, OC should ponder the source of the number 7.78. If it's a currency, it should not be parsed as a float.
[12:07:23] <beach> That's again a different issue.
[12:08:00] <beach> The best action on the part of PARSE-FLOAT would, in my opinion, be to return the best approximation.  Not the truncation.
[12:09:10] <beach> And this opinion has nothing to do with IEEE truncation or rounding, nor anything about currency.  Just how PARSE-FLOAT has decided to do it.
[12:10:21] <beach> JeromeLon: But, your remark certainly explains the observation by opcode.
[12:11:45] <JeromeLon> beach: I agree that the best approximation would be more correct. I disagree that it has nothing to do with IEEE 754 truncation or rounding. If IEEE 754 specifies clearly which rounding should be done, that PARSE-FLOAT should just do that.
[12:12:09] <JeromeLon> I can't find which rounding is recommended, though.
[12:15:34] <beach> JeromeLon: Where does IEEE say what rounding should be used when a decimal representation is converted to an IEEE float?
[12:16:29] <beach> Notice "when a decimal representation is converted", not "when a higher-precision binary representation is converted".
[12:19:55] <JeromeLon> beach: from wikipedia: "754-2008 requires correctly rounded base conversion between decimal and binary floating point within a range which depends on the format"
[12:19:56] *** Joins: heisig (~heisig@p508b531b.dip0.t-ipconnect.de)
[12:20:24] <JeromeLon> but I can't find an online version of 754-2008 to check what "correctly" means.
[12:20:28] <beach> In that case, truncation is not the right thing to do here.
[12:21:31] <JeromeLon> I agree. And it means that whatever 754 defines as the correct rounding is what PARSE-FLOAT should be doing
[12:22:48] *** Joins: john-a-carroll (~john-a-ca@host-92-28-178-6.as13285.net)
[12:28:13] <beach> As far as I can tell, IEEE rounding has to do with the result of operations between floating-point numbers.
[12:28:21] <beach> But this is not such an operation.
[12:28:25] *** Joins: lisp123 (~lisp123@5.30.23.247)
[12:31:30] *** Quits: john-a-carroll (~john-a-ca@host-92-28-178-6.as13285.net) (Quit: Ping timeout (120 seconds))
[12:31:55] <beach> The IEEE standard says "they shall use correct rounding" for the conversion, which sounds to me like "they shall return the closest floating-point number".
[12:32:24] *** jdz_ is now known as jdz
[12:33:13] <_death> ieee754-2008 has a section 5.12 Details of conversion between floating-point data and external character sequences.. I'm not an expert on floats, but skimming it they talk about "correct rounding" which 2.1.12 defines as the rounding determined by the applicable rounding direction
[12:35:53] <beach> Hmm.
[12:36:08] <_death> 4.3.3 says roundTiesToEven should likely be the default
[12:36:38] <beach> Oh, but that's only valid when the result is exactly in the middle between two values.
[12:36:42] <JeromeLon> which means round to closest and tie to even
[12:37:10] <beach> Yeah.
[12:38:57] <_death> right, so I'm guessing it also implies 4.3.1 round to nearest
[12:39:11] <beach> So if the next higher floating-point number is strictly closer to 7.78, then that next higher number should be returned.
[12:41:27] <_death> the definition of roundTiesToEven does not refer only to ties, it includes the notion of nearest
[12:43:01] <_death> JeromeLon: btw duckduckgo gave me https://irem.univ-reunion.fr/IMG/pdf/ieee-754-2008.pdf
[12:43:35] *** Parts: pranavats (3fba1d1b34@jabberfr.org) ()
[12:54:13] *** Quits: mrcom (~mrcom@99-73-215-70.lightspeed.irvnca.sbcglobal.net) (Quit: This computer has gone to sleep)
[12:54:13] *** Joins: icer (eric@gateway/vpn/protonvpn/icer)
[12:54:13] *** Quits: mrcom_ (~mrcom@99-73-215-70.lightspeed.irvnca.sbcglobal.net) (Quit: This computer has gone to sleep)
[12:56:28] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Remote host closed the connection)
[12:56:52] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[13:11:46] *** Joins: rogersm (~rogersm@90.166.177.48)
[13:16:29] <lisp123> Is there a curated list of hall of fame posts from c.l.l (information / discussion)?
[13:18:44] <flip214> lisp123: Naggum posts are available at https://www.xach.com/naggum/articles/
[13:19:26] <lisp123> flip214: I was thinking more broadly. I read it from time to time and there's a lot of wisdom in there
[13:20:20] <_death> there are too many.. just get the c.l.l archive and a good news reader (say gnus), sit back, relax, and spend a couple of months getting up to date
[13:21:27] <lisp123> _death: Good idea. Will see if I can put into my kindle..
[13:22:05] <_death> more reading material here https://github.com/death/gnus-friendly-archives
[13:22:15] *** Joins: mrcom (~mrcom@99-73-215-70.lightspeed.irvnca.sbcglobal.net)
[13:22:47] <lisp123> Awesome, thanks!
[13:23:14] <lisp123> I'm also trying to download all of CMU AI Repository at the moment, will put it on GitHub once done
[13:25:14] <JeromeLon> SBCL: (+ 7 0.78) => 7.7799997
[13:25:43] <flip214> (+ 7d0 0.78d0)
[13:25:44] *** Joins: mrcom_ (~mrcom@99-73-215-70.lightspeed.irvnca.sbcglobal.net)
[13:25:52] <_death> JeromeLon: try (read-from-string "7.78") though
[13:26:51] <JeromeLon> Sorry, I should have been clearer: the next single float was closer to the correct result
[13:27:43] <JeromeLon> PARSE-FLOAT is doing (+ 7.0 0.78) as its last step, loosing accuracy in the addition
[13:29:32] <JeromeLon> 7.7800002 is closer than 7.7799997, but maybe that's how IEEE 745 addition is specified?
[13:32:47] *** Joins: random-nick (~random-ni@87.116.165.220)
[13:33:58] <pjb> JeromeLon: (loop for *read-default-float-format* in '(short-float single-float double-float long-float) collect (+ 7 (read-from-string "0.78"))) #| --> (7.7799997 7.7799997 7.78D0 7.78D0) |#
[13:34:06] *** Quits: igemnace (~ian@user/igemnace) (Quit: WeeChat 3.3)
[13:34:12] <beach> JeromeLon: I see now.  Yes, that's the wrong algorithm for PARSE-FLOAT to use.
[13:34:40] <pjb> JeromeLon: if you're into high precision floating point computations, you should put (setf *read-default-float-format* 'double-float) in your rc file.
[13:34:46] <beach> JeromeLon: And it is entirely possible that the addition is rounded correctly while still giving that result.
[13:34:53] <pjb> JeromeLon: or explicitely set it in your programs.
[13:35:23] <beach> pjb: That's not what this is about.  It is about a single observation by opcode.
[13:37:00] <_death> https://plaster.tymoon.eu/view/2674#2674
[13:42:06] <JeromeLon> _death: I would claim that :nearest is incorrect.
[13:43:19] <_death> well, first we need to figure out the exact value of single-float 0.78
[13:44:55] <JeromeLon> Also, in C, the float addition result in rounding above: https://onlinegdb.com/pLSxkTMR-o
[13:45:17] *** Quits: Guest-liao (~Guest-lia@101.86.103.113) (Ping timeout: 256 seconds)
[13:46:28] *** Quits: Qwnavery (~Qwnavery@user/qwnavery) (Quit: ta\)
[13:46:29] <pjb> The point is that 7.0 = 111000000000000000000000e-21 0.78 = 111110001111010111000011e-24 = 000110001111010111000010e-21 and 7.0 + 0.78 = 111110001111010111000010e-21 = 7.7799997
[13:46:58] *** Joins: Nilby (~Nilby@2601:603:1481:30a0:82fa:5bff:fe66:4b49)
[13:47:26] <_death> JeromeLon: you know the single float is converted to double when passed to printf right?
[13:47:45] <_death> JeromeLon: then %f rounds it back
[13:47:54] <JeromeLon> _death: No, I didn't know, ok this test is wrong.
[13:48:37] <pjb> JeromeLon: in C, floating-point operations can convert to extended float first…
[13:51:23] <JeromeLon> pjb: "000110001111010111000010e-21" this looks truncated instead of rounded. 000110001111010111000011e-21 is closer
[13:51:39] <_death> JeromeLon: closer to what?
[13:51:48] <JeromeLon> to 0.78
[13:52:06] *** Joins: frgo (~frgo@p200300deef0cee004c1fbdb906d74bb3.dip0.t-ipconnect.de)
[13:52:11] <_death> JeromeLon: but you didn't give it 0.78, which is not representable as a floating point value
[13:52:50] *** Quits: Oddity (Oddity@user/oddity) (Ping timeout: 260 seconds)
[13:53:34] <JeromeLon> _death: 0.78 can be represented as either .07799997 or 0.07800002, I believe the debate is about which one is more correct.
[13:54:12] <JeromeLon> Sorry, I meant 0.7799997 or 0.7800002
[13:54:15] <_death> so, let's first agree that the addition is irrelevant
[13:54:43] <_death> (in this case)
[13:55:06] <JeromeLon> I disagree, but it's because I did not express myself clearly
[13:55:06] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Read error: Connection reset by peer)
[13:55:44] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[13:55:53] *** Joins: robin_ (~robin@user/terpri)
[13:55:53] <_death> (= (+ 7.0 0.7799997) (+ 7.0 0.7800002)) ==> NIL
[13:55:54] <JeromeLon> 0.78 can only be represented as 0.7799997 or 0.7800002 when we are missing 3 digits in single float.
[13:56:00] *** Quits: robin (~robin@user/terpri) (Read error: Connection reset by peer)
[13:57:13] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Read error: Connection reset by peer)
[13:57:22] *** Joins: amb007 (~a_bakic@143.39.22.93.rev.sfr.net)
[13:57:23] *** Quits: amb007 (~a_bakic@143.39.22.93.rev.sfr.net) (Read error: Connection reset by peer)
[13:57:31] *** Joins: amb007 (~a_bakic@143.39.22.93.rev.sfr.net)
[13:57:32] *** Quits: amb007 (~a_bakic@143.39.22.93.rev.sfr.net) (Read error: Connection reset by peer)
[13:57:53] *** Joins: amb007 (~a_bakic@143.39.22.93.rev.sfr.net)
[13:57:55] *** robin_ is now known as robin
[13:58:27] *** Joins: Guest-liao (~Guest-lia@101.86.103.113)
[13:58:55] <_death> would it be fair to say that you want to ask why 0.78 gets converted to 0.7799997 and not 0.7800002
[13:59:57] *** Joins: Brucio-87 (~Brucio-87@ip-94-114-248-79.unity-media.net)
[14:00:09] *** Quits: frgo (~frgo@p200300deef0cee004c1fbdb906d74bb3.dip0.t-ipconnect.de) (Remote host closed the connection)
[14:00:37] *** Joins: frgo (~frgo@p200300deef0cee004c1fbdb906d74bb3.dip0.t-ipconnect.de)
[14:01:20] <JeromeLon> _death: no (because it's not converted to that). I'll do a nice diagram and post back.
[14:01:39] *** Joins: Oddity (Oddity@user/oddity)
[14:04:10] <JeromeLon> OMG it's a tie!
[14:07:12] *** Quits: amb007 (~a_bakic@143.39.22.93.rev.sfr.net) (Read error: Connection reset by peer)
[14:08:20] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[14:09:39] *** Quits: Guest-liao (~Guest-lia@101.86.103.113) (Ping timeout: 256 seconds)
[14:10:33] <JeromeLon> https://pastebin.com/TmrN9krC
[14:12:14] <JeromeLon> Legent: when summing 7 0.779999971389770507812500 (which is the single-float representation of 0.78), the 2 possible roundings (7.779999732971191406250 and 7.780000209808349609375) have the same distance to non-rounded value.
[14:12:18] <JeromeLon> *legend
[14:13:03] <_death> ok, and the first is even
[14:14:52] *** Joins: peterhil (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi)
[14:15:37] <_death> I didn't check the actual float value 0.78 gets converted to; only took the values discussed
[14:16:35] *** Quits: icer (eric@gateway/vpn/protonvpn/icer) (Ping timeout: 264 seconds)
[14:19:50] <JeromeLon> so the conclusion is that PARSE-FLOAT doing a sum (integer part + decimal part) can introduce an error when the rounding of the decimal part changes in turn the rounding of the sum.
[14:22:05] *** Joins: Guest-liao (~Guest-lia@101.86.103.113)
[14:24:35] <_death> correct
[14:25:03] <_death> (loop for x in (list (parse-float:parse-float "0.78") (+ 7.0 0.78) 0.78) collect (decimals:format-decimal-number x :round-magnitude -24))
[14:26:11] <_death> I mean 7.78 as the last element
[14:27:10] <_death> (and what's passed to parse-float..)
[14:32:18] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Remote host closed the connection)
[14:33:20] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[15:03:29] *** Quits: Guest-liao (~Guest-lia@101.86.103.113) (Ping timeout: 256 seconds)
[15:15:36] *** Joins: Guest-liao (~Guest-lia@101.86.103.113)
[15:26:10] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[15:30:21] <rotateq> this is why i like symbolic computing and exact arithmetic :)
[15:37:18] *** Odin-FOO is now known as Odin-
[15:50:49] <lisp123> Actually on that, can I compare two uninterned symbols for equality via (equal (symbol-name #:me) (symbol-name #:you))?
[15:51:03] <lisp123> I presume EQL doesn't work for them?
[15:51:15] <lisp123> (sorry should be #:me and #:me to give T in the above example)
[15:53:53] <beach> The names are strings, so you can use whatever comparison on strings that works for you.
[15:55:14] <Xach> They are also string designators, so you can use string= directly also.
[15:55:27] <pjb> lisp123: (string= '#:me 'me) #| --> t |#
[15:58:32] *** Joins: Bike (~Glossina@71.69.170.70)
[15:58:32] *** ChanServ sets mode: +o Bike
[16:01:33] *** Joins: icer (eric@gateway/vpn/protonvpn/icer)
[16:01:51] <lisp123> pjb: Thanks
[16:02:04] <lisp123> beach & Xach: thanks too
[16:14:35] *** Joins: paule32 (~paule32@user/paule32)
[16:21:59] *** Quits: pve (~pve@37-33-35-181.bb.dnainternet.fi) (Ping timeout: 258 seconds)
[16:23:46] *** Joins: pve (~pve@188-67-246-45.bb.dnainternet.fi)
[16:23:54] *** Joins: igemnace (~ian@user/igemnace)
[16:30:52] *** Joins: gxt_ (~gxt@gateway/tor-sasl/gxt)
[16:31:48] <saltrocklamp[m]> <_death> "salt rock lamp: it's not bummer,..." <- that was quick! you found the issue?
[16:32:39] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 265 seconds)
[16:32:49] <saltrocklamp[m]> i see, very small fix: https://github.com/sharplispers/parse-number/pull/10
[16:33:18] *** Quits: gxt (~gxt@gateway/tor-sasl/gxt) (Ping timeout: 276 seconds)
[16:33:59] <saltrocklamp[m]> has anyone here used `check-it` before https://github.com/DalekBaldwin/check-it? something like `parse-number` would be a great place for property-based testing
[16:34:22] *** Joins: aeth (~aeth@user/aeth)
[16:38:45] *** Joins: azimut_ (~azimut@gateway/tor-sasl/azimut)
[16:39:41] *** Joins: pranavats (3fba1d1b34@jabberfr.org)
[16:40:02] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Quit: ZNC - https://znc.in)
[16:41:37] *** Quits: azimut_ (~azimut@gateway/tor-sasl/azimut) (Remote host closed the connection)
[16:41:54] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[16:51:57] *** Quits: flip214 (~marek@user/flip214) (Ping timeout: 250 seconds)
[16:56:28] *** Quits: prxq (~quassel@x4db40186.dyn.telefonica.de) (Quit: http://quassel-irc.org - Chat comfortably. Anywhere.)
[16:58:24] *** Joins: cage (~cage@dynamic-adsl-84-220-249-98.clienti.tiscali.it)
[16:59:22] *** Joins: flip214 (~marek@user/flip214)
[17:00:44] *** Joins: jealousmonk (~user@2804:431:e7c5:834:2ab0:b9fd:f87f:7a23)
[17:06:37] *** Joins: tfb (~tfb@88.98.95.237)
[17:09:40] *** Quits: tfb (~tfb@88.98.95.237) (Client Quit)
[17:09:43] *** Quits: copec (~copec@schrodbox.unaen.org) (Ping timeout: 268 seconds)
[17:12:40] *** Joins: copec (~copec@schrodbox.unaen.org)
[17:24:50] <Nilby> just add a few more to the 1d308 problems floating point has caused
[17:27:07] *** Joins: nature (~nature@45.32.235.173)
[17:27:50] *** Quits: rotateq (~user@b2b-78-94-235-194.unitymedia.biz) (Remote host closed the connection)
[17:33:25] *** Quits: gxt_ (~gxt@gateway/tor-sasl/gxt) (Remote host closed the connection)
[17:34:05] *** Joins: gxt_ (~gxt@gateway/tor-sasl/gxt)
[17:50:56] *** Quits: dbotton (sid492350@id-492350.lymington.irccloud.com) (Ping timeout: 245 seconds)
[17:51:34] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Quit: ERC (IRC client for Emacs 27.2))
[17:51:43] *** Joins: dbotton (sid492350@id-492350.lymington.irccloud.com)
[17:52:50] *** Quits: jhi (sid81469@id-81469.lymington.irccloud.com) (Ping timeout: 258 seconds)
[17:54:17] *** Joins: jhi (sid81469@lymington.irccloud.com)
[17:59:40] *** Quits: Guest-liao (~Guest-lia@101.86.103.113) (Quit: Client closed)
[18:00:59] *** Quits: flip214 (~marek@user/flip214) (Ping timeout: 264 seconds)
[18:12:01] *** Joins: Guest-liao (~Guest-lia@101.86.103.113)
[18:12:24] *** Joins: tyson2 (~user@bras-base-toroon0628w-grc-46-142-112-141-177.dsl.bell.ca)
[18:14:40] *** Joins: rain3 (~rain3___@2a02:2f09:d003:5800:b41c:c37:1705:91bc)
[18:19:33] *** Quits: hendursa1 (~weechat@user/hendursaga) (Quit: hendursa1)
[18:20:45] *** Joins: hendursaga (~weechat@user/hendursaga)
[18:27:17] *** Quits: rain3 (~rain3___@2a02:2f09:d003:5800:b41c:c37:1705:91bc) (Read error: Connection reset by peer)
[18:37:30] *** Joins: hobo (~lance@204.238.252.22)
[18:43:00] *** Quits: heisig (~heisig@p508b531b.dip0.t-ipconnect.de) (Quit: Leaving)
[18:47:58] *** Quits: icer (eric@gateway/vpn/protonvpn/icer) (Quit: WeeChat 2.8)
[18:56:06] *** Quits: Guest-liao (~Guest-lia@101.86.103.113) (Quit: Client closed)
[18:58:00] *** Quits: Cymew (~ante@c-e989225c.023-1144-7570702.bbcust.telenor.se) (Ping timeout: 258 seconds)
[18:58:16] <saltrocklamp[m]> https://bpa.st/LRTQ does anyone see an obvious reason why the lisp version of my code (with sbcl) is not only ~5x slower than the python version of my code, but also isn't giving the right answers? the correct output numbers should be something like `249.9008` and `288.6628`
[18:58:41] <saltrocklamp[m]> any recommendations for a profiler would be appreciated too
[18:58:51] *** Quits: hobo (~lance@204.238.252.22) (Quit: reboot)
[18:59:26] *** Quits: rogersm (~rogersm@90.166.177.48) (Read error: Connection reset by peer)
[19:00:32] <Bike> sbcl has two built in profilers http://sbcl.org/manual/#Profiling
[19:02:03] <Bike> if i had to guess, slow points could be parse-number and read-line
[19:02:30] <Bike> the latter of which you could deal with by reusing a preallocating string instead of allocating a new one each time read-line is called; maybe python is smart enough to do that for the "for line in" construct
[19:04:41] *** Quits: mrcom (~mrcom@99-73-215-70.lightspeed.irvnca.sbcglobal.net) (Ping timeout: 245 seconds)
[19:05:30] *** Quits: mrcom_ (~mrcom@99-73-215-70.lightspeed.irvnca.sbcglobal.net) (Ping timeout: 260 seconds)
[19:07:25] <Krystof> I think python defaults to double float; SBCL definitely defaults to single-float.  That might be enough to explain the different answers
[19:09:24] <Krystof> well, actually: your wrapper around parse-number returns (values 0.0 nil) on a parse failure, but your check tests for the primary value being null
[19:09:39] <saltrocklamp[m]> oop, that was from an old version
[19:09:41] <Krystof> so you don't handle invalid lines correctly in your Lisp version
[19:09:48] <saltrocklamp[m]> yeah let me try fixing
[19:10:37] <saltrocklamp[m]> that said, i had a previous version of this that used READ + TYPEP to "parse" floats (returning NIL if it didn't actually read a float), and i think the answer was wrong there too, even when i set *READ-DEFAULT-FLOAT-FORMAT* to double-float
[19:13:12] <saltrocklamp[m]> Bike: i'll try `sb-sprof`, that looks nice and easy
[19:13:46] <saltrocklamp[m]> and i will try re-using the string, i assume you mean i should `setq`/`setf` it instead of using a step-form in `do`?
[19:14:23] *** Joins: patrice (~patrice@user/patrice)
[19:16:00] *** Joins: flip214 (~marek@user/flip214)
[19:28:33] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[19:30:06] *** Quits: dualinverter[m] (~dualinver@2001:470:69fc:105::16a7) (Quit: You have been kicked for being idle)
[19:34:43] *** Quits: kpoeck (~kpoeck@80.149.96.222) (Quit: Client closed)
[19:45:42] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 276 seconds)
[19:46:27] *** Quits: tyson2 (~user@bras-base-toroon0628w-grc-46-142-112-141-177.dsl.bell.ca) (Quit: ERC (IRC client for Emacs 27.2))
[19:47:11] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Remote host closed the connection)
[19:47:23] *** Joins: hendursaga (~weechat@user/hendursaga)
[19:56:52] *** Quits: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f) (Remote host closed the connection)
[19:57:07] <saltrocklamp[m]> urgh, i ended up having to rewrite this with `prog`
[19:57:32] <Bike> by reusing the string i was thinking more like read-sequence
[19:57:48] <pjb> saltrocklamp[m]: I'd use loop instead: https://termbin.com/4snu
[20:00:13] <saltrocklamp[m]> that's much nicer pjb , i was wondering if there was a tidy loop version. Bike , wouldn't that cause problems if the current line is shorter than the previous line?
[20:00:57] <Bike> getting it right is more involved, yeah
[20:04:08] *** Quits: slyrus (~slyrus@192-184-223-165.static.sonic.net) (Quit: Leaving)
[20:04:24] <saltrocklamp[m]> this is a great demo of advanced `loop`ing. setting `*read-default-float-format*` did fix the accuracy, but it's still ~7.5 seconds while the python version is ~1.5
[20:05:15] <saltrocklamp[m]> hard to tell which calls are slow, as opposed to just frequent. let me try the deterministic profile
[20:10:13] <saltrocklamp[m]> yep it looks like `read` is really the culprit, 0.000002 seconds per call at 2909618 calls, that's ~5.8 seconds spent on just `read`ing
[20:14:55] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[20:16:45] <saltrocklamp[m]> i'm open to suggestions for how to fix this.. i admit i'm disappointed, i was expecting lisp to at least be comparable to python
[20:17:03] *** Quits: zacque (~zacque@5.102.49.60.klj04-home.tm.net.my) (Quit: Goodbye :D)
[20:22:18] <Bike> how's parse-number compared to read? i'd expect parse-number to be faster
[20:22:20] *** Joins: ec_ (~ec@gateway/tor-sasl/ec)
[20:42:15] *** Quits: ec_ (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[20:42:45] *** Joins: ec_ (~ec@gateway/tor-sasl/ec)
[20:43:44] <saltrocklamp[m]> not appreciably faster in some of the tests i ran, but i can try again
[20:44:01] <Bike> hm. well that sucks.
[20:44:08] <saltrocklamp[m]> i'm not sure if it's possible to write the `loop` version using it
[20:46:58] <saltrocklamp[m]> weird that there's `parse-integer` in the standard but not `parse-float` - i saw some discussion about it above, maybe sicl will turn out to be the fast implementation :)
[20:47:40] *** Quits: igemnace (~ian@user/igemnace) (Ping timeout: 260 seconds)
[20:47:47] <Krystof> the more generic your parsing thing, the slower it is likely to be
[20:48:11] <Krystof> I'd start by trying to use parse-float, though I don't know how optimized it is
[20:48:41] <Krystof> read is a full parser; parse-number is presumably a limited tokenizer; parse-float will be even more limited
[20:49:13] <Krystof> I would also be a bit suspicious of the deterministic profiler; the overhead is substantial and subtracting the overhead off is not necessarily 100% correct
[20:49:24] *** Quits: ec_ (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[20:54:16] *** Quits: rgherdt_ (~rgherdt@2a02:8109:86c0:d8d:ede1:773f:e980:d67a) (Ping timeout: 245 seconds)
[20:55:10] <saltrocklamp[m]> does sbcl have `parse-float`?
[20:55:15] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Ping timeout: 260 seconds)
[20:55:28] *** Joins: amb007 (~a_bakic@143.39.22.93.rev.sfr.net)
[20:55:42] <saltrocklamp[m]> i thought only lispworks had it
[20:55:49] <Catie> It's a library, loadable through quicklisp
[20:55:59] <pjb> saltrocklamp[m]: now, reading in lisp involves decoding octet sequences from files, into text, sequences of characters.
[20:56:11] *** Joins: Spawns_Carpeting (~Spawns_Ca@user/spawns-carpeting/x-6969421)
[20:56:15] <saltrocklamp[m]> oh, the library. i was wondering if it would be faster than `parse-number`
[20:56:19] <saltrocklamp[m]> i can try it
[20:56:36] <pjb> saltrocklamp[m]: in C, and python does like C, one only processes the octets, and almost never decode them into actual characters.
[20:56:49] <pjb> saltrocklamp[m]: so called, "utf-8 octet sequences"…
[20:57:04] <pjb> saltrocklamp[m]: that's where a lot of time (and memory) is spent when reading in CL.
[20:57:26] <pjb> saltrocklamp[m]: if you want to attain the same I/O performance, you must read octets in CL as well.
[20:58:41] <saltrocklamp[m]> python 3 strings are sequences of unicode code points, by default the input encoding is utf-8. so it's definitely doing full string parsing in my example (although i could probably make the python version faster by dropping down to use raw bytes)
[20:59:23] <saltrocklamp[m]> and in fact i think the internal storage is utf-16 or something like that, so not only is it parsing utf-8 but it's also converting it to another format
[20:59:41] <saltrocklamp[m]> however it is written in c, and i'm sure it's been heavily optimized
[20:59:57] <saltrocklamp[m]> not sure if that's what you meant, or something else?
[21:00:13] <saltrocklamp[m]> (in python 2, strings were raw octet/byte sequences)
[21:01:37] *** Quits: z3t0 (~z3t0@146.71.14.98) (Quit: The Lounge - https://thelounge.chat)
[21:01:42] <saltrocklamp[m]> i'm definitely open to suggestions though, maybe this is a missing piece in the library ecosystem
[21:03:06] <pjb> saltrocklamp[m]: https://termbin.com/r555
[21:04:13] <saltrocklamp[m]> wow, you just wrote all that?
[21:04:14] <pjb> this is an intermediate solution: we still convert to string, but assuming pure ascii input (this could also be done with :external-format :us-ascii, but it is highly implementation dependent whether it's possible to set the external format of *standard-input*.
[21:04:25] <pjb> saltrocklamp[m]: no, copy-and-paste from my libraries.
[21:05:06] <pjb> we could avoid converting to characters (which in sbcl take 32-bit each), by processing the octets directly. The float parsing function would have to be changed to use vectors of octets instead of strings.
[21:05:18] <saltrocklamp[m]> is this slurping the entire thing into memory? i forgot to mention this earlier, but one of the other requirements was to assume that the data is "huge" to the point where it can't be reasonably loaded all at once
[21:05:20] <pjb> eg. testing for 48 instead of #\0  etc.
[21:05:47] <saltrocklamp[m]> i see, hm. i wonder if that's what `parse-number` is doing
[21:06:00] <pjb> saltrocklamp[m]: then yes, looping on reading a buffer with read-sequence, and processing the octets instead of converting to string would be best.
[21:06:28] <saltrocklamp[m]> i am curious what python, lua, and nim are doing that make this so much more efficient than whatever sbcl and ccl are doing
[21:06:29] *** Joins: ec_ (~ec@gateway/tor-sasl/ec)
[21:06:58] <pjb> saltrocklamp[m]: you can use https://github.com/informatimago/lisp/blob/master/common-lisp/cesarum/ascii.lisp#L382 to help processing octets of ascii codes.
[21:07:41] <pjb> Notably, if you want to split the lines on newlines: https://github.com/informatimago/lisp/blob/master/common-lisp/cesarum/ascii.lisp#L584
[21:08:36] <pjb> saltrocklamp[m]: I told you: they process octets, instead of characters.
[21:09:31] *** Quits: amb007 (~a_bakic@143.39.22.93.rev.sfr.net) (Ping timeout: 252 seconds)
[21:09:56] <saltrocklamp[m]> i think i was confused before. you are talking about the number parsing part?
[21:10:00] <pjb> which, for a file that contains mostly 10, 43, 45, 46, and 48-57, let you avoid a lot of processing…
[21:10:04] *** Joins: amb007 (~a_bakic@47.37.22.93.rev.sfr.net)
[21:11:49] <saltrocklamp[m]> `for line in sys.stdin` in python iterates over true unicode strings, not byte sequences. but it would make sense if e.g. `float(s)` operated on the underlying bytes of the string `s`
[21:12:10] *** Quits: frgo (~frgo@p200300deef0cee004c1fbdb906d74bb3.dip0.t-ipconnect.de) (Ping timeout: 258 seconds)
[21:13:16] <saltrocklamp[m]> your `contents-from-stream` function seems to implement Bike's suggestion to re-use the string
[21:17:40] <pjb> AFAIK, python keeps the string as a utf-8 sequence.
[21:23:30] <saltrocklamp[m]> it's not utf-8 internally in cpython at least, they use some wider encoding in order to do string lookups in constant time
[21:23:30] *** Joins: frgo (~frgo@p548a30d7.dip0.t-ipconnect.de)
[21:24:22] <saltrocklamp[m]> i'll have to spend some time reading these code snippets, my understanding of how "streams" work in list is hazy still
[21:25:10] <saltrocklamp[m]> i do wonder about the memory allocation, i am trying to look at the generated c code from the nim version to see if that's what nim does
[21:27:45] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[21:28:16] *** Quits: amb007 (~a_bakic@47.37.22.93.rev.sfr.net) (Ping timeout: 258 seconds)
[21:28:46] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[21:29:04] *** Joins: amb007 (~a_bakic@15.244.204.77.rev.sfr.net)
[21:29:24] *** Quits: nature (~nature@45.32.235.173) (Quit: leaving)
[21:30:08] <saltrocklamp[m]> found it, but holy moly that's a complicated c program
[21:31:23] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Client Quit)
[21:36:02] *** Quits: Skyfire (~pyon@user/pyon) (Quit: WeeChat 3.3)
[21:45:42] *** Joins: tyson2 (~user@cpe688f2ec1f9b3-cm688f2ec1f9b0.cpe.net.cable.rogers.com)
[21:47:15] *** Joins: mrcom (~mrcom@2600:1700:c630:a570:d50d:a601:706d:3a99)
[21:48:16] *** Joins: mrcom_ (~mrcom@2600:1700:c630:a570:d50d:a601:706d:3a99)
[21:48:16] *** Quits: amb007 (~a_bakic@15.244.204.77.rev.sfr.net) (Read error: Connection reset by peer)
[21:49:15] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[22:15:51] *** Quits: ec_ (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[22:28:48] *** Joins: gaqwas (~john@dynamic-077-009-033-110.77.9.pool.telefonica.de)
[22:41:53] *** Joins: caret (~caret@24-116-7-78.cpe.sparklight.net)
[22:45:11] *** Joins: igemnace (~ian@user/igemnace)
[22:45:18] *** Quits: attila_lendvai (~alendvai@catv-89-132-208-37.catv.broadband.hu) (Ping timeout: 260 seconds)
[22:45:51] *** Joins: ec_ (~ec@gateway/tor-sasl/ec)
[22:47:50] *** Quits: mrcom_ (~mrcom@2600:1700:c630:a570:d50d:a601:706d:3a99) (Ping timeout: 260 seconds)
[22:48:01] *** Quits: mrcom (~mrcom@2600:1700:c630:a570:d50d:a601:706d:3a99) (Ping timeout: 245 seconds)
[22:49:37] *** Joins: mrcom_ (~mrcom@99-73-215-70.lightspeed.irvnca.sbcglobal.net)
[22:49:58] *** Joins: mrcom (~mrcom@99-73-215-70.lightspeed.irvnca.sbcglobal.net)
[22:53:34] *** Joins: akoana (~ah@user/akoana)
[22:54:38] *** Quits: mrcom_ (~mrcom@99-73-215-70.lightspeed.irvnca.sbcglobal.net) (Read error: Connection reset by peer)
[22:55:55] *** Quits: cosimone (~user@93-34-132-219.ip49.fastwebnet.it) (Quit: ERC (IRC client for Emacs 27.1))
[22:58:45] *** Quits: ec_ (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[22:58:45] *** Quits: mrcom (~mrcom@99-73-215-70.lightspeed.irvnca.sbcglobal.net) (Read error: Connection reset by peer)
[22:59:14] *** Joins: mrcom_ (~mrcom@99-73-215-70.lightspeed.irvnca.sbcglobal.net)
[23:00:13] *** Joins: ec_ (~ec@gateway/tor-sasl/ec)
[23:07:51] *** Quits: ec_ (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[23:13:57] *** Joins: mrcom (~mrcom@99-73-215-70.lightspeed.irvnca.sbcglobal.net)
[23:14:02] *** Quits: cage (~cage@dynamic-adsl-84-220-249-98.clienti.tiscali.it) (Quit: rcirc on GNU Emacs 27.1)
[23:15:37] *** Quits: gaqwas (~john@dynamic-077-009-033-110.77.9.pool.telefonica.de) (Remote host closed the connection)
[23:16:00] *** Joins: gaqwas (~john@dynamic-077-009-033-110.77.9.pool.telefonica.de)
[23:26:52] *** Quits: tyson2 (~user@cpe688f2ec1f9b3-cm688f2ec1f9b0.cpe.net.cable.rogers.com) (Quit: ERC (IRC client for Emacs 27.2))
[23:29:15] *** Quits: mrcom_ (~mrcom@99-73-215-70.lightspeed.irvnca.sbcglobal.net) (Read error: Connection reset by peer)
[23:30:38] *** Quits: lisp123 (~lisp123@5.30.23.247) (Quit: Leaving...)
[23:32:45] *** Quits: caret (~caret@24-116-7-78.cpe.sparklight.net) (Read error: Connection reset by peer)
[23:39:29] *** Joins: kevingal (~quassel@2a02:8084:4140:f300:98c3:36b4:8d7b:786c)
[23:40:13] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[23:43:47] *** ski_ is now known as ski
[23:54:00] *** Joins: James` (~user@5.30.23.247)
[23:54:01] *** Quits: mrcom (~mrcom@99-73-215-70.lightspeed.irvnca.sbcglobal.net) (Read error: Connection reset by peer)
[23:54:29] <James`> Hey I got a question and I read this chat is active
[23:55:13] <James`> Anybody know how I can write a defmacro within a defun? Similar to this post on SO, but for defmacros
[23:55:31] <James`> https://stackoverflow.com/questions/3772365/how-to-defun-a-function-within-a-defun
[23:56:12] <Bike> you can use macro-function instead of symbol-function there, but you probably don't want to actually do this
[23:57:01] <James`> I see, I can try that. Yeah I wasn't sure if its the right way...
[23:57:16] <Bike> What are you trying to do?
[23:58:00] *** ChanServ sets mode: -o Bike
[23:58:22] *** Quits: molson (~molson@2001-48F8-704A-CA1-0-0-75F-102F-static.midco.net) (Ping timeout: 252 seconds)
