[00:51:32] *** Joins: typedef[m]1 (~ddervishg@2001:470:69fc:105::1824)
[00:52:32] <typedef[m]1> Apparently my dendrite is a zombie now
[00:52:42] <typedef[m]1> It looks dead but is still alive
[00:58:01] <typedef[m]1> Federation and everything work, but I can't send or receive messages
[00:59:53] <typedef[m]1> I think that's because of a recent update, but I'll fall back to the GNU server in the meantime
[01:00:34] <typedef[m]1> Is conduit any good?
[01:10:56] <typedef[m]1> Looks even more beta than dendrite. Normally I would be happy, but I don't have enough motivation to do that right now
[01:59:13] <artectrex[m]> Maybe I'm lucky dendrite is still firmly in beta, I spend enough time playing around with my server :P
[02:22:26] <Orbstheorem> Have you guys thought of checking out NixOS?
[02:22:26] <artectrex[m]> hahahaha
[02:33:49] <Orbstheorem> Come, we have chocolate and cookies!
[02:34:40] <Orbstheorem> Well, at least one kindly hearted and hillarious spacekookie, she's cool.
[02:37:13] <artectrex[m]> I might try guix :P
[02:41:00] <artectrex[m]> I think on a new system I would definitely not have chosen ubuntu, maybe nix who knows
[02:41:32] <artectrex[m]> It's just, my server is up now and to switch OSs would take me way too much effort.
[02:42:53] <Orbstheorem> <artectrex[m]> "I might try guix :P" <- Guix and Nix are basically the same thing, politics aside.
[02:43:54] <Orbstheorem> Guix implementation is less focused on fixed-point combinators that said, so it's a bit less satisfying from a mathematical point of view, and also parenthesis. That said it's pretty good too!
[02:44:29] <jonas[m]> Guix is Nix with supply chain integrity / signing AFAIK
[02:45:04] <Orbstheorem> artectrex[m]: For a homelab, I honestly have a hard time distinguishing between Debian and Ubuntu (maybe Fedora aswell).
[02:45:38] <Orbstheorem> jonas[m]: Nah, you got the same in Nix, NARs are signed and what can be reproduced is compared.
[02:46:42] <LucasCrijns[m]> <Orbstheorem> "Have you guys thought of..." <- I did try it about half a year ago. It is a really neat concept to do everything centrally and have clean config file. Rebuilding sometimes takes a long time, look at the nixpkgs repo. In the end I stopped using it, because I had a persistent bug where Firefox would freeze up every 10 seconds. I guess with flakes this might be easier to mitigate, as you can pin versions
[02:47:04] <Orbstheorem> Guix has (afaik) a stronger focus on community-verified packages, whereas Nix is more centralized. In practice, you get signed stuff from cache.nixos.org (or cachix if you're into that) and that's it.
[02:48:27] <Orbstheorem> > Rebuilding sometimes takes a long time
[02:48:28] <Orbstheorem> They have been continuously improving this [and there's more to come](https://github.com/NixOS/nixpkgs/pull/148456) in the near future. [We've had this on our eye](https://github.com/NixOS/rfcs/pull/22) for a while.
[02:49:28] <Orbstheorem> > I had a persistent bug where Firefox would freeze up every 10 seconds
[02:49:29] <Orbstheorem> I'd be surprised if that were a problem in NixOS.
[02:50:05] <LucasCrijns[m]> I don't think it was a problem with Nixos, but it seemed to happen because of a specific kernel bug in the Nix kernel build
[02:50:22] <Orbstheorem> > I guess with flakes this might be easier to mitigate, as you can pin versions
[02:50:22] <Orbstheorem> Flakes is not a silver bullet. It's just a different way of doing Nix :)
[02:50:22] <Orbstheorem> In reality it may have solved your problem, but probably because of an overlay, which are much more ergonomic to use with flakes.
[02:50:35] <LucasCrijns[m]> Unfortunately because of that, I abandoned pursuing nixos
[02:50:46] <LucasCrijns[m]> But I guess I should give it another go
[02:50:53] <LucasCrijns[m]> It seems like it has come a long way
[02:51:21] <Orbstheorem> I'm personally super happy: Fits my use-case, I get local reasoning for free.
[02:51:59] <Orbstheorem> The whole point about Nix is "allows you for local reasoning" (aka: abstraction).
[02:52:06] <Orbstheorem> s/The whole point about Nix is "allows you for local reasoning" (aka: abstraction)./The whole point about Nix is "allows you to do local reasoning" (aka: abstraction)./
[02:52:41] <LucasCrijns[m]> > <@roosemberth:orbstheorem.ch> > I guess with flakes this might be easier to mitigate, as you can pin versions... (full message at https://libera.ems.host/_matrix/media/r0/download/libera.chat/9f34916b503572d06f1b77488676d2efb0b916ac)
[02:53:35] <LucasCrijns[m]> Orbstheorem: Nix is quite elegant in that regard indeed
[02:56:27] <Orbstheorem> Flakes allow you to gain evaluation reproducibitiliy, yes. But that's just one trivial consequence. In reality flakes give you a declaration of inputs and a lockfile. The lockfile may be used to reproduce the evaluation (which is what most people see), but the fact inputs are also declared allows you to use a flake without its lock, in fact you can replace a flake's input with your own version of X to get something from the flake into your
[02:56:27] <Orbstheorem> own evaluation. This we call reuse and reusing is good, you can take any flake in the internet and, well just use it (kind of like AUR, but without the root shenanigans).
[02:57:19] <Orbstheorem> A very nice consequence of flake locks is that not only you get to cache your source, but also the evaluations: So if you already evaluated part of your configuration and you change something unrelated, a good part of the evaluation cache can be reused.
[02:57:25] <Orbstheorem> * be reused, thus faster evals.
[02:57:45] <Orbstheorem> I also got to say `nix shell nixpkgs#foo` <3
[02:58:08] <Orbstheorem> * nixpkgs#foo` <3 Literally fire and forget.
[02:58:09] <LucasCrijns[m]> Wow thank you for the clear explanation, that really enlightens flakes. Most sources on the internet focus purely on the reproducibility aspect
[02:58:56] <Orbstheorem> That's the most attractive aspect because it somehow relates to what other distros are doing, so in a way it appeals to people when you talk about something you know.
[02:59:03] <Orbstheorem> s/you/they/
[02:59:39] <Orbstheorem> Oh, something I really want to say!
[03:03:56] <artectrex[m]> there's so much stuff to learn lol
[03:04:09] <artectrex[m]> really intimidating ^^'
[03:04:35] * Orbstheorem sent a nix code block: https://libera.ems.host/_matrix/media/r0/download/libera.chat/0ac11986c1b2e5241838048be7532602101dbf22
[03:05:03] <Orbstheorem> Mimir is my laptop and the biggest offender is steam (with takes about 5G):
[03:05:03] <Orbstheorem> ```console
[03:05:03] <Orbstheorem> /nix/store/xapnviz8b13imf6k67nx0bnynbffd3xd-steam                                                                                                 4.9G
[03:05:03] <Orbstheorem> ```
[03:06:34] <Orbstheorem> Minerva is my NAS and local server: Hosting a bunch of containers running among others postgresql, grafana, influx, home-assistant, bind9, nextcloud, synapse, prometheus, alertmanager, some small home-made applications.
[03:07:12] <Orbstheorem> * server: Hosting nginx and some other small services plus a bunch
[03:07:55] <Orbstheorem> Heimdaalr is my reverse proxy: Running nginx and Bind9.
[03:08:08] <Orbstheorem> This is alpine-level space efficiency.
[03:09:02] <Orbstheorem> So, I just realized heimdaalr uses 176M on mdadm...... (full message at https://libera.ems.host/_matrix/media/r0/download/libera.chat/1e032b7166a1960f4f5d90bb0c5ab9b66d971e43)
[03:09:19] <Orbstheorem> Some module must be including mdadm on my system path... I should probably look into it.
[03:09:38] <Orbstheorem> * path... I <del>should probably, * should probably</del>could look, * into it, if I wanted to.
[03:10:13] <Orbstheorem> <artectrex[m]> "there's so much stuff to learn..." <- Yes, but there's also a lot of stuff that, given your background you already know.
[03:11:46] <Orbstheorem> <artectrex[m]> "really intimidating ^^'" <- This is a problem. It looks scary and don't get me wrong, nix is not the most ergonomic nor intuitive programming language, but it's small and once you get a hang of nix (which honesly isn't that bad) and understand the principles behind nixos (and the nixos module system) (which are unfortunatelly documented nowhere), well... sky's the limit.
[03:14:04] <Orbstheorem> Fun fact: On minerva, the biggest offender is the nextcloud container:
[03:14:04] <Orbstheorem> ```console
[03:14:04] <Orbstheorem> /nix/store/l1i0grfxmqbrynaf8n4ffl1rz0swvykl-nixos-system-nextcloud-21.11pre-git                                                                   1.5G
[03:14:04] <Orbstheorem> ```
[03:17:10] <Orbstheorem> One of the biggest closures in all nodes is `prometheus-node-exporter`:
[03:17:10] <Orbstheorem> ```console
[03:17:10] <Orbstheorem> /nix/store/8ycx02gkkdgfbl1zkf98kkmv3nkxfpcn-unit-prometheus-node-exporter.service                                                               391.8M
[03:17:10] <Orbstheorem> ```
[03:18:10] <Orbstheorem> Oh, and netdata:
[03:18:10] <Orbstheorem> ```console
[03:18:10] <Orbstheorem> /nix/store/pflzzl3wcjfl9zqdlrqqppg66s709l3a-unit-netdata.service                                                                                614.2M
[03:18:10] <Orbstheorem> ```
[03:18:32] <Orbstheorem> Monitoring software takes 1GB of disk space on every host...
[12:00:13] <typedef[m]1> <Orbstheorem> "Have you guys thought of..." <- I want to try it (or guix) some time when I break my system again (don't worry, it'll happen soon enough)
[12:52:06] <afontain[m]> ironically, part of the reason I'm still on NixOS is https://blogs.gnome.org/tbernard/2020/01/17/doing-things-that-scale/
[12:52:48] <afontain[m]> I'll let you read the article first, itns great
[12:53:01] <afontain[m]> s/itns/it's/
[13:03:03] <artectrex[m]> <afontain[m]> "ironically, part of the reason I..." <- still or still not?
[13:04:46] <Notkea> <Orbstheorem> "Come, we have chocolate and..." <- and 3k pull requests to review on nixpkgs
[13:05:25] <Orbstheorem> Yes, [please review](https://github.com/NixOS/nixpkgs/pull/154688)
[13:11:12] <artectrex[m]> J'aime bien l'epfl qui implémente des dispositifs qu'ils ne peuvent pas appliquer légalement, toujours chouette 🙈
[13:11:53] <artectrex[m]> vu que le bracelet peut pas être requis je me vois déjà oublier d'aller chercher
[13:12:16] <typedef[m]1> Ah c'est illégal?
[13:12:23] <artectrex[m]> ben oui lol
[13:12:46] <artectrex[m]> couleur différente selon statut de vaccination!
[13:13:28] <artectrex[m]> Délégué de classe: "I checked with agepoly, they can’t legally refuse you if you have your covid pass and not the bracelet but please don’t do this on purpose. It’s not the point and [...]"
[13:13:49] <afontain[m]> <artectrex[m]> "still or still not?" <- still actually
[13:14:19] <typedef[m]1> artectrex[m]: Ah oui
[13:15:18] <typedef[m]1> Je suis pas tellement convaincu que ça change grand chose, de toute façon
[13:15:47] <artectrex[m]> de toute façon les assistants doivent passer pour la signature non?
[13:16:06] <artectrex[m]> NA si pass pas valide et bim réglé
[13:16:38] <typedef[m]1> C'était comme ça jusque là en tout cas
[13:17:14] <CedricHlzl[t][m]> artectrex[m]: et inb4 tu aura peu comme pour les certif un "underground market" pour en choper :P
[13:18:34] <typedef[m]1> Je suis assez certain que c'est plus facile de fake un bracelet qu'un certificat
[13:19:50] <Orbstheorem> > I also used to use ZSH with a configuration framework and various plugins to get autocompletion, git status, a fancy prompt etc. A few years ago I switched to fish. It gives me most of what I used to get from my custom ZSH thing, but it does so out of the box, no configuration needed. Of course ideally we’d have all of these things in the default shell so everyone gets these features for free, but that’s hard to do unfortunately (if
[13:19:50] <Orbstheorem> you’re interested in making it happen I’d love to talk!).
[13:19:50] <Orbstheorem> Haskell vs Rust ><"
[13:21:46] <Orbstheorem> I'm not 100% in line with the article, but liked it and would recommend.
[13:53:27] <LucasCrijns[m]> <afontain[m]> "ironically, part of the reason I..." <- This makes a lot of sense actually. I guess I had the same thought, as I am currently on Fedora with Fish
[14:08:53] <afontain[m]> > <@roosemberth:orbstheorem.ch> > I also used to use ZSH with a configuration framework and various plugins to get autocompletion, git status, a fancy prompt etc. A few years ago I switched to fish. It gives me most of what I used to get from my custom ZSH thing, but it does so out of the box, no configuration needed... (full message at https://libera.ems.host/_matrix/media/r0/download/libera.chat/5ddb0aa066c94a6ccb7395413e9d945eedd9639b)
[14:32:26] <Orbstheorem> <LucasCrijns[m]> "This makes a lot of sense..." <- I ask myself a similar question every now and then: Why am I using vim on sway while a lot of people just go for atom over gnome3.
[14:32:27] <Orbstheorem> The memory consumption of atom or vscode help calm myself down, but at the end of the day both provide similar use-cases (even modal editing!). The reason why I stay on vim instead of moving out is because my workflow is terminal-driven but also this could be considered a legacy constraint.
[14:32:27] <Orbstheorem> Things would be very different if I had to type every command entirely by hand, I would still personally be more efficient rather than using a clicky interface, but I would be less efficient than somebody trained in clicky interfaces.
[14:32:27] <Orbstheorem> What I still find lacking on the clicky world is this "unified notion of history":
[14:32:27] <Orbstheorem> Each application have their own notion of action (and thus history).
[14:32:27] <Orbstheorem> This is not an issue of the graphical approach, but rather of its ecosystem and APIs: Terminals have a simple API for this: plain text.
[14:32:27] <Orbstheorem> I use the terminal because it has the highest data-rate between what I want to do and my computer.... (full message at https://libera.ems.host/_matrix/media/r0/download/libera.chat/b32c0f7e124449b7e5311611c853c51cf14ef67c)
[14:32:27] <Orbstheorem> And, of course the argument that rendering a graphical application when no rendering is needed (e.g. because automation) is just a waste of resources.
[14:32:28] <Orbstheorem> Moreover, actions in graphical applications do not allow for local reasoning since they are very contextful (e.g. save the currently open file, send the selected items). This is not only an API problem, but also a design problem that most graphical interfaces will run into. Local reasoning is crucial for reusal and composition, which is key for history. RPCs and signals I think are a step in the right direction (e.g. dbus), but using dbus
[14:32:28] <Orbstheorem> feels like using `tcc` to invoke a syscall or an IOCTL.
[14:32:29] <Orbstheorem> Terminals also have this problem, but the way they work makes it harder for users to run into them: When you build a command you don't checkpoint intermediate state, you usually make a long one-liner that combines 4+ different commands.
[14:32:29] <Orbstheorem> It's also worth mentioning that recording "plain text" is much more straight forward than recording clicky actions. Maybe in the funny world where UIs are only frontends for dbus actions, this would be more reusable.
[14:33:14] <Orbstheorem> <afontain[m]> "> <@roosemberth:orbstheorem.ch>..." <- Haskell is a programming language designed to be flexible and allow for experimentation. Doing such experimentation does take time but you get to express whatever it is you want. More importantly try ideas and if you don't like them scratch that and start over.
[14:33:14] <Orbstheorem> Rust is a programming language with efficiency in mind (both onboarding new people and using it). It's more limited and constrained, but has what most people like from haskell (and other languages) and agree upon, even if that makes them conciously leave stuff on the table (not to mention being nowhere as flexible as haskell is).
[14:37:20] <Orbstheorem> <Orbstheorem> "I ask myself a similar question..." <- A very similar argument applies for tiling window managers: I used to have haskell code to "emulate a display" within a display frame so I could see the projector output on my screen while at the same time notes only for me.
[14:37:20] <Orbstheorem> Nowdays, I only use sway because I never took the time to set that up on wayland. Which is also a sign that I didn't use that feature that much. And I'm seriously hesitating to move to PopOS shell on Gnome3 because it just works and provides much more added value than sway + dunst + (insert 10 other components here).
[14:38:19] <LucasCrijns[m]> You make valid points regarding terminal vs GUI, in the end it boils down to a matter of preference and familiarity. I agree that in GUI applications fuzzy search has not been unified in some sense. 
[14:38:19] <LucasCrijns[m]> As for your point about power consumption, you could make a case that it is wasted power to render everything. For that matter it makes a lot of sense on laptops, desktops not so much
[14:39:26] <LucasCrijns[m]> If you are looking at gnome 3, you may find something like Fedora Silverblue interesting, as you mentioned being interested in Nix
[14:39:27] <Orbstheorem> > it boils down to a matter of preference and familiarity
[14:39:27] <Orbstheorem> I would rather say learning curve. I'd still say that terminal is much (**much**) more efficient after you get a hang of it. Which may take months.
[14:40:11] <Orbstheorem> LucasCrijns[m]: I fail to see what relevance the OS may play in the compositor?
[14:40:34] <LucasCrijns[m]> True, it is a learning curve. But is it really that much more efficient? My workflow is not that terminal centric, so I cannot know
[14:40:40] <Orbstheorem> > As for your point about power consumption, you could make a case that it is wasted power to render everything
[14:40:40] <Orbstheorem> ~12h to ~22h or battery life is a compelling argument x)
[14:42:03] <Orbstheorem> LucasCrijns[m]: I think that if the proper tools exist it is. Coding and text writing?.. definitely. Text and graphical processing, probably not.
[14:42:23] <LucasCrijns[m]> Orbstheorem: It is not relevant per se, but if you want an out of the box working experience with underlying immutability, then it may be of interest
[14:43:30] <LucasCrijns[m]> > <@roosemberth:orbstheorem.ch> > As for your point about power consumption, you could make a case that it is wasted power to render everything
[14:43:30] <LucasCrijns[m]> > 
[14:43:30] <LucasCrijns[m]> > ~12h to ~22h or battery life is a compelling argument x)
[14:43:30] <LucasCrijns[m]> Is the difference already so stark if you use a tiling wm?
[14:44:08] <Orbstheorem> I had something like `xserver.desktopManager.gnome.enable = true;` in mind x)
[14:45:09] <Orbstheorem> LucasCrijns[m]: Yes, web browsers are huge.
[14:48:04] <artectrex[m]> Il est toujours interdit d'utiliser le local puisque nous ne sommes pas en ordre niveau plan de protection et contact tracing au niveau de l'agep
[14:48:35] <artectrex[m]> j'essaie de régler ça d'ici demain ou après-demain..
[14:49:35] <afontain[m]> oui si jamais on risque de se faire taper sur les doigts
[14:49:41] <artectrex[m]> il parait qu'il y a des gens assez souvent au local et des gens du comité de l'agep me grondent
[15:11:12] <Orbstheorem> I have an IPv6 question:... (full message at https://libera.ems.host/_matrix/media/r0/download/libera.chat/3b2f06937c3e0fdbd4c9908e8fa2098b50511767)
[15:11:20] <Orbstheorem>  * I have an IPv6 question:... (full message at https://libera.ems.host/_matrix/media/r0/download/libera.chat/4c1d46aa0d30b0d213e1897baa3c4cdaa18be501)
[15:11:29] <Orbstheorem>  * I have an IPv6 question:... (full message at https://libera.ems.host/_matrix/media/r0/download/libera.chat/08d9864ac8399b9359b0c3d599ba9402ff6f8bbe)
[15:11:48] <Orbstheorem> ipv6 wizards I can think of: sparrowhawk and nu ^^
[15:14:08] <sparrowhawk[m]> There's no more state than in IPv4 - less, usually, in fact. I'd be very surprised if this is expected behavior, my vote is for misbehavior, or, more probably, something else wrong on the host (firewall, ports, whatever)
[15:17:49] <Orbstheorem> I'm not so sure:
[15:17:49] <Orbstheorem> After _hop limit exceeded_, I think the host drops that route. Then when it hears the package coming from that interface (which the host doesn't know it can route to the source address of the package,) it responds with Destination unreachable (because the package is alien).
[15:21:16] <Notkea> > <@roosemberth:orbstheorem.ch> Haskell is a programming language designed to be flexible and allow for experimentation. Doing such experimentation does take time but you get to express whatever it is you want. More importantly try ideas and if you don't like them scratch that and start over.
[15:21:16] <Notkea> > 
[15:21:16] <Notkea> > Rust is a programming language with efficiency in mind (both onboarding new people and using it). It's more limited and constrained, but has what most people like from haskell (and other languages) and agree upon, even if that makes them conciously leave stuff on the table (not to mention being nowhere as flexible as haskell is).
[15:21:16] <Notkea> there's also: Haskell LANGUAGE pragma vs. same set for everyone
[15:25:14] <sparrowhawk[m]> > <@roosemberth:orbstheorem.ch> I'm not so sure:
[15:25:14] <sparrowhawk[m]> > 
[15:25:14] <sparrowhawk[m]> > After _hop limit exceeded_, I think the host drops that route. Then when it hears the package coming from that interface (which the host doesn't know it can route to the source address of the package,) it responds with Destination unreachable (because the package is alien).
[15:25:14] <sparrowhawk[m]> I don't think it should drop the route ? Depends where it learnt it maybe
[15:25:34] <Orbstheorem> ra, like ipv6 says.
[15:25:52] <sparrowhawk[m]> > <@roosemberth:orbstheorem.ch> I'm not so sure:
[15:25:52] <sparrowhawk[m]> > 
[15:25:52] <sparrowhawk[m]> > After _hop limit exceeded_, I think the host drops that route. Then when it hears the package coming from that interface (which the host doesn't know it can route to the source address of the package,) it responds with Destination unreachable (because the package is alien).
[15:25:52] <sparrowhawk[m]> At least, I haven't read anything related to IPv6 that describes this behavior. Might be Linux related.
[15:28:20] <Orbstheorem> Dropping alien packages is a policy, that in particular Linux follows by default (and so does Cisco ASR900 and NCS series AFAIK).
[15:28:33] <Orbstheorem> * NCS series unless configured otherwise, AFAIK).
[15:31:23] <sparrowhawk[m]> I meant dropping the route
[22:05:17] *** Quits: smarter_ (~smarter@martres.me) (*.net *.split)
[22:05:19] *** Quits: chiselfuse (~chiselfus@user/chiselfuse) (*.net *.split)
[22:05:19] *** Quits: __[m] (~slamranig@2001:470:69fc:105::f1a) (*.net *.split)
[22:05:19] *** Quits: Jonas[t][m] (~telegram1@2001:470:69fc:105::1:822) (*.net *.split)
[22:05:19] *** Quits: afontain[m] (~afontain@2001:470:69fc:105::36b) (*.net *.split)
[22:05:19] *** Quits: M95[m] (~M95gnugen@2001:470:69fc:105::1:5220) (*.net *.split)
[22:05:19] *** Quits: LucasCrijns[m] (~crijnsgnu@2001:470:69fc:105::1:50c1) (*.net *.split)
[22:05:19] *** Quits: M92[m] (~M92gnugen@2001:470:69fc:105::1:516f) (*.net *.split)
[22:05:19] *** Quits: R[m]1234 (~pguillodg@2001:470:69fc:105::1:1604) (*.net *.split)
[22:05:19] *** Quits: CedricHlzl[t][m] (~telegram2@2001:470:69fc:105::1:38c4) (*.net *.split)
[22:05:19] *** Quits: M97[m] (~M97gnugen@2001:470:69fc:105::1:5389) (*.net *.split)
[22:05:20] *** Quits: ayekat (~ayekat@user/ayekat) (*.net *.split)
[22:05:21] *** Quits: lexekon[m] (~lexekonma@2001:470:69fc:105::1:52c2) (*.net *.split)
[22:05:21] *** Quits: AntoineFontaine[ (~telegra_9@2001:470:69fc:105::f1c) (*.net *.split)
[22:05:21] *** Quits: MisterMerlinGran (~telegra_9@2001:470:69fc:105::f1d) (*.net *.split)
[22:05:21] *** Quits: gnugen-telegramb (~telegr_10@2001:470:69fc:105::f25) (*.net *.split)
[22:05:21] *** Quits: M94[m] (~M94gnugen@2001:470:69fc:105::1:51f4) (*.net *.split)
[22:05:26] *** Quits: jonas[m] (~jonasviol@2001:470:69fc:105::98a) (*.net *.split)
[22:05:26] *** Quits: typedef[m] (~adminmat_@2001:470:69fc:105::ce75) (*.net *.split)
[22:05:26] *** Quits: nu[m] (~nusynapse@2001:470:69fc:105::f19) (*.net *.split)
[22:05:27] *** Quits: M98[m] (~M98gnugen@2001:470:69fc:105::1:671f) (*.net *.split)
[22:05:28] *** Quits: Notkea (~pacien@2001:470:69fc:105::f12) (*.net *.split)
[22:05:28] *** Quits: NilsDmitriAlainA (~antonovig@2001:470:69fc:105::1:15d6) (*.net *.split)
[22:05:29] *** Quits: flor (~florian@191.97.193.178.dynamic.wline.res.cust.swisscom.ch) (*.net *.split)
[22:05:30] *** Quits: Matthieu[t][m] (~telegr_10@2001:470:69fc:105::fba) (*.net *.split)
[22:05:30] *** Quits: Skeetis[t][m] (~telegram2@2001:470:69fc:105::1:5f50) (*.net *.split)
[22:05:32] *** Quits: sunyibo (~dorsch@2a04:52c0:101:443::) (*.net *.split)
[22:05:32] *** Quits: typedef[m]1 (~ddervishg@2001:470:69fc:105::1824) (*.net *.split)
[22:05:32] *** Quits: DeciusCaeciliusM (~telegram3@2001:470:69fc:105::1:e81) (*.net *.split)
[22:05:32] *** Quits: artectrex[m] (~debeulegn@2001:470:69fc:105::9c7) (*.net *.split)
[22:05:32] *** Quits: Howard42[m] (~howard42m@2001:470:69fc:105::1:517e) (*.net *.split)
[22:05:33] *** Quits: N[m]123 (~npintognu@2001:470:69fc:105::1:19c6) (*.net *.split)
[22:05:33] *** Quits: LaurentRoro[t][m (~telegram4@2001:470:69fc:105::f20) (*.net *.split)
[22:05:33] *** Quits: ToGoddet[t][m] (~telegram5@2001:470:69fc:105::f21) (*.net *.split)
[22:05:33] *** Quits: M93[m] (~M93gnugen@2001:470:69fc:105::1:51ae) (*.net *.split)
[22:05:33] *** Quits: sunyibo[m] (~dorschgnu@2001:470:69fc:105::f0f) (*.net *.split)
[22:05:33] *** Quits: M91[m] (~M91gnugen@2001:470:69fc:105::1:50c0) (*.net *.split)
[22:05:33] *** Quits: edk (edk@libera/staff/edk) (*.net *.split)
[22:05:34] *** Quits: GNUGenerationMat (~telegr_10@2001:470:69fc:105::f24) (*.net *.split)
[22:05:35] *** Quits: sparrowhawk[m] (~sparrowha@2001:470:69fc:105::f1b) (*.net *.split)
[22:05:35] *** Quits: Orbstheorem (~orbstheor@2001:470:69fc:105::a56) (*.net *.split)
[22:05:35] *** Quits: M96[m] (~M96gnugen@2001:470:69fc:105::1:5385) (*.net *.split)
[22:05:36] *** Quits: GermainZ (~GermainZ@user/germainz) (*.net *.split)
[22:05:39] *** Quits: ChanServ (ChanServ@services.libera.chat) (*.net *.split)
[22:10:27] *** Joins: smarter (~smarter@martres.me)
[22:10:27] *** Joins: typedef[m]1 (~ddervishg@2001:470:69fc:105::1824)
[22:10:27] *** Joins: M98[m] (~M98gnugen@2001:470:69fc:105::1:671f)
[22:10:27] *** Joins: Howard42[m] (~howard42m@2001:470:69fc:105::1:517e)
[22:10:27] *** Joins: chiselfuse (~chiselfus@user/chiselfuse)
[22:10:27] *** Joins: __[m] (~slamranig@2001:470:69fc:105::f1a)
[22:10:27] *** Joins: jonas[m] (~jonasviol@2001:470:69fc:105::98a)
[22:10:27] *** Joins: lexekon[m] (~lexekonma@2001:470:69fc:105::1:52c2)
[22:10:27] *** Joins: Jonas[t][m] (~telegram1@2001:470:69fc:105::1:822)
[22:10:27] *** Joins: GNUGenerationMat (~telegr_10@2001:470:69fc:105::f24)
[22:10:27] *** Joins: DeciusCaeciliusM (~telegram3@2001:470:69fc:105::1:e81)
[22:10:27] *** Joins: Matthieu[t][m] (~telegr_10@2001:470:69fc:105::fba)
[22:10:27] *** Joins: sparrowhawk[m] (~sparrowha@2001:470:69fc:105::f1b)
[22:10:27] *** Joins: artectrex[m] (~debeulegn@2001:470:69fc:105::9c7)
[22:10:27] *** Joins: Notkea (~pacien@2001:470:69fc:105::f12)
[22:10:27] *** Joins: Orbstheorem (~orbstheor@2001:470:69fc:105::a56)
[22:10:27] *** Joins: afontain[m] (~afontain@2001:470:69fc:105::36b)
[22:10:27] *** Joins: typedef[m] (~adminmat_@2001:470:69fc:105::ce75)
[22:10:27] *** Joins: M95[m] (~M95gnugen@2001:470:69fc:105::1:5220)
[22:10:27] *** Joins: AntoineFontaine[ (~telegra_9@2001:470:69fc:105::f1c)
[22:10:27] *** Joins: N[m]123 (~npintognu@2001:470:69fc:105::1:19c6)
[22:10:27] *** Joins: M96[m] (~M96gnugen@2001:470:69fc:105::1:5385)
[22:10:27] *** Joins: nu[m] (~nusynapse@2001:470:69fc:105::f19)
[22:10:27] *** Joins: ToGoddet[t][m] (~telegram5@2001:470:69fc:105::f21)
[22:10:27] *** Joins: LaurentRoro[t][m (~telegram4@2001:470:69fc:105::f20)
[22:10:27] *** Joins: Skeetis[t][m] (~telegram2@2001:470:69fc:105::1:5f50)
[22:10:27] *** Joins: M93[m] (~M93gnugen@2001:470:69fc:105::1:51ae)
[22:10:27] *** Joins: MisterMerlinGran (~telegra_9@2001:470:69fc:105::f1d)
[22:10:27] *** Joins: sunyibo[m] (~dorschgnu@2001:470:69fc:105::f0f)
[22:10:27] *** Joins: M92[m] (~M92gnugen@2001:470:69fc:105::1:516f)
[22:10:27] *** Joins: LucasCrijns[m] (~crijnsgnu@2001:470:69fc:105::1:50c1)
[22:10:27] *** Joins: NilsDmitriAlainA (~antonovig@2001:470:69fc:105::1:15d6)
[22:10:27] *** Joins: gnugen-telegramb (~telegr_10@2001:470:69fc:105::f25)
[22:10:27] *** Joins: R[m]1234 (~pguillodg@2001:470:69fc:105::1:1604)
[22:10:27] *** Joins: CedricHlzl[t][m] (~telegram2@2001:470:69fc:105::1:38c4)
[22:10:27] *** Joins: M91[m] (~M91gnugen@2001:470:69fc:105::1:50c0)
[22:10:27] *** Joins: M97[m] (~M97gnugen@2001:470:69fc:105::1:5389)
[22:10:27] *** Joins: M94[m] (~M94gnugen@2001:470:69fc:105::1:51f4)
[22:10:27] *** Joins: ayekat (~ayekat@user/ayekat)
[22:10:27] *** Joins: flor (~florian@191.97.193.178.dynamic.wline.res.cust.swisscom.ch)
[22:10:27] *** Joins: edk (edk@libera/staff/edk)
[22:10:27] *** Joins: sunyibo (~dorsch@2a04:52c0:101:443::)
[22:10:27] *** Joins: GermainZ (~GermainZ@user/germainz)
[22:10:27] *** Joins: ChanServ (ChanServ@services.libera.chat)
[22:10:27] *** molybdenum.libera.chat sets mode: +oo afontain[m] ChanServ
[22:10:32] *** Quits: smarter (~smarter@martres.me) (Ping timeout: 263 seconds)
[22:10:33] *** Joins: smarter (~smarter@martres.me)
