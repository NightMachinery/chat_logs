[00:49:03] *** Quits: shka (~herr@109.231.0.226) (Ping timeout: 252 seconds)
[02:21:41] *** Quits: Aurora_v_kosmose (~LispyLigh@user/lispylights) (Remote host closed the connection)
[02:22:31] *** Joins: Aurora_v_kosmose (~LispyLigh@user/lispylights)
[02:30:17] *** Quits: dra (~dra@2a04:4540:641a:a100:cda8:b2a7:6660:1d6b) (Quit: Leaving)
[02:53:54] *** Quits: random-nick (~random-ni@87.116.160.199) (Ping timeout: 268 seconds)
[03:13:25] <hayley> https://www.intel.com/content/www/us/en/products/performance/cloud-facts.html lol
[03:21:10] *** Quits: slyrus (~slyrus@192-184-223-165.static.sonic.net) (Ping timeout: 265 seconds)
[03:21:18] *** Joins: slyrus_ (~slyrus@192-184-223-165.static.sonic.net)
[03:35:09] <hayley> Interesting, https://www.cs.purdue.edu/homes/hosking/690M/p611-fenichel.pdf also claims that, with huge virtual memory, GC is more of a locality problem than reclaiming memory.
[04:53:31] *** Quits: makomo (~makomo@user/makomo) (Ping timeout: 250 seconds)
[07:06:51] <hayley> https://twitter.com/jetski0/status/1469769341726040065
[07:12:58] *** Joins: humasect (~humasect@2001:1970:57e0:4100::9e43)
[07:14:29] <gilberth> Fenichel-Yochelson predates Cheney, right?
[07:15:29] <moon-child> internet sez former is '69, latter is '70
[07:17:06] * mfiano attempts to crash chatbot
[07:17:14] <gilberth> What bothers me in general is that bets are taken on what would the access pattern be. Can't we somehow guess from allocation order?
[07:18:23] <moon-child> I wonder if you can ask the cpu what is in l1 at a given time
[07:18:27] <moon-child> and move those things closer to each other
[07:19:07] <gilberth> Hmm.
[07:20:42] *** Quits: humasect (~humasect@2001:1970:57e0:4100::9e43) (Remote host closed the connection)
[07:20:51] <gilberth> Which makes me think along the line of a GC co-processor of sorts.
[07:21:14] <moon-child> GC co-processor would be cool
[07:21:23] <moon-child> but I don't think you would need it for this
[07:21:46] <moon-child> just have some protocol to ask what is in cache.  CPU already has all the infrastructure you could want for tracking access patterns
[07:22:37] <gilberth> mfiano: Are you playing with log4j?
[07:23:40] <mfiano> I don't know what that is.
[07:23:52] *** Joins: humasect (~humasect@2001:1970:57e0:4100::9e43)
[07:24:04] <gilberth> moon-child: Yes, like with paging, all the information is there already. We just have no easy way to access it, if at all.
[07:24:48] <gilberth> What made me think again about a GC co-processor is, that memory is hilariously slow. Still.
[07:25:11] <moon-child> I do wonder if you could make a gc co-processor that would pretend to be a memory stick
[07:25:18] <gilberth> mfiano: The most recent and most silly perhaps log injection feature.
[07:25:21] <moon-child> and then have decent performance on modern cpus, still using hobbyist hardware
[07:25:38] <mfiano> gilberth: Ok
[07:26:12] <gilberth> moon-child: I believe that ought to be possible.
[07:29:04] <gilberth> A radical design would be to see memory as not merely addressed by an address but by e.g. CAR[x], CDR[x], AREF[x,i]. Let that be a subsystem that does all the work, like paging and caching, barriers for GC, etc. No idea if that would be feasible.
[07:29:42] <moon-child> hmm.  Why is that better?
[07:30:19] <moon-child> I guess it gives you a more sensible way to move an array
[07:30:44] *** Quits: humasect (~humasect@2001:1970:57e0:4100::9e43) (Remote host closed the connection)
[07:30:52] <moon-child> but really it just sounds like a hardware-assisted forwarding pointer
[07:33:14] <gilberth> It would off-load all the memory related work from the CPU. It should also do bounds and type checking. It's just one of my crazy ideas I have for decades. Though I was thinking along the line of pointer swizzling in the 80s to execute Lisp with a 16-bit CPU while having a larger memory. /me shrugs
[07:33:38] <gilberth> Perhaps it's crazy.
[07:35:18] <hayley> gilberth:  https://researcher.watson.ibm.com/researcher/files/us-bacon/Bacon12AndThenSlides.pdf did it.
[07:36:44] <hayley> "RTGC in hardware is MUCH SIMPLER than in software - Is something wrong with our processor designs?"
[07:38:20] <hayley> Though the memory subsystem just does snapshot-at-the-beginning concurrent mark-sweep and not relocating.
[07:39:27] <gilberth> Hey, that is cool.
[07:40:12] <gilberth> And, yes, I believe something is wrong with our processor designs.
[07:40:28] <hayley> And n.b. they use internal BRAM. And I'm not a fan of fixed size objects. But they did it!
[07:40:58] <gilberth> Well, you need to start somewhere, don't you?
[07:41:04] <hayley> Sure.
[07:43:58] <gilberth> This almost makes me to want an FPGA board.
[07:43:59] <hayley> I might have to return my GC Handbook to the university ):
[07:44:18] <hayley> No, I don't, they just suck at sending renewal emails.
[07:44:46] <gilberth> You don't? You have it for ages, don't you?
[07:44:50] <hayley> Apparently I can keep it till I graduate, lol.
[07:44:57] <hayley> Yes, since July.
[07:47:09] * hayley uploaded an image: (69KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/PjwUcUjseJhpLLSeEdARINkc/Screenshot%20from%202021-12-13%2015-16-57.png >
[07:47:40] <hayley> I can get a job through university and the governmnet, and make $5k over the holidays, and these are the technologies. /me scratches head.
[07:49:05] <moon-child> I suggest returning your government
[07:50:02] <hayley> Not a fan of the project list either. /me decides her sanity is worth more than $5k. 
[07:50:28] * hayley uploaded an image: (149KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/kxLXSioqXsxxhfNkCPpGIINF/Screenshot%20from%202021-12-13%2015-20-17.png >
[07:54:36] <hayley> And it's only about AU$20-25/hour.
[08:02:56] <hayley> gilberth: Yes, Fenichel-Yochelson predates Cheney; the former uses your call stack, the latter uses tospace as a stack. Thus the former does depth first copying, and the latter breadth first copying.
[08:03:55] *** Quits: slyrus_ (~slyrus@192-184-223-165.static.sonic.net) (Ping timeout: 252 seconds)
[08:05:19] *** Quits: semz (~none@user/semz) (Ping timeout: 268 seconds)
[08:09:01] <hayley> https://apps.dtic.mil/sti/pdfs/AD0647601.pdf "Despite the fact that all the data fit in core, this experiment indicated that we are losing a factor of about 2 in speed when we use the software map. Of course, if a hardware paging map were available this problem would vanish."
[08:11:38] <hayley> By my understanding, I could do a lot of "distributed" GCs where I just consider 1/N of the heap if we bump allocate, and have remembered sets between the N areas. I mean, objects that are allocated together tend to reference each other, and to have similar lifetimes, so it could be a big win.
[08:14:38] <hayley> Circular references which span areas should also be rare, so it should further be okay to handle them with an infrequent full GC instead.
[08:16:03] *** Joins: slyrus (~slyrus@192-184-223-165.static.sonic.net)
[08:18:20] *** Joins: semz (~none@user/semz)
[08:20:41] <hayley> Gees, that's evil. And it'd have half-decent locality.
[08:22:38] *** Quits: slyrus (~slyrus@192-184-223-165.static.sonic.net) (Ping timeout: 256 seconds)
[08:23:28] <gilberth> Are circular references really so rare? What about parent-child links?
[08:23:49] <moon-child> won't a parent and child generally be allocated close in time?
[08:23:57] <hayley> Right.
[08:24:00] <hayley> https://github.com/GregBowyer/ManagedRuntimeInitiative
[08:24:00] -ixelp- GitHub - GregBowyer/ManagedRuntimeInitiative: The Managed Runtime Initiative is an open development and integration init [...]
[08:24:22] <hayley> "the linux community views garbage collection as stupid (well lets be fair kernel developers actually view it as useful (go splunking in the kernel ...), but many people for who C is clearly the fabric on which god wraught the universe tend to jump up and down"
[08:24:24] <gilberth> moon-child: In say a CLIM output history?
[08:25:07] <hayley> It also depends if they are common enough that reclaiming them all is important.
[08:25:19] <hayley> A generational GC might choke too, FWIW.
[08:26:23] <gilberth> Well, I was considering applications like CLIM here. With a root output history which is old, yet child records which come and go and which should be reclaimed.
[08:29:58] <hayley> https://github.com/GregBowyer/ManagedRuntimeInitiative/blob/master/MRI-J/azsys/src/whack_stack.s
[08:29:59] -ixelp- ManagedRuntimeInitiative/whack_stack.s at master · GregBowyer/ManagedRuntimeInitiative · GitHub
[08:31:04] <moon-child> i love whacking my stack
[08:31:32] <moon-child> https://pbs.twimg.com/media/FGbhXxZVUAEarES.jpg  checks out
[08:31:39] <hayley> Hold up, is https://github.com/GregBowyer/ManagedRuntimeInitiative/tree/master/MRI-J/hotspot/src/azshare/vm/gc_implementation/genPauseless the source code for C4?
[08:31:40] -ixelp- ManagedRuntimeInitiative/MRI-J/hotspot/src/azshare/vm/gc_implementation/genPauseless at master · GregBowyer/ManagedRunti [...]
[08:32:54] <hayley> ...and it was released GPLv2? Big if true.
[08:37:27] * moon-child spots some lisp-indentation
[08:37:46] <moon-child> https://0x0.st/-Fv1.txt
[08:39:07] <hayley> Anyone up for figuring out where it actually needs Linux kernel hacks, and then either removing the hacks or porting them to a recent kernel?
[08:43:15] <hayley> "It was sad for a while (but I've moved on) to see how the very idea of enabling something that could make GC better for everyone, on all runtimes, seemed to get people upset and angry. To some people, it seems, GC is only useful for helping lazy people who are too stupid to program without it, and anything that makes it work better should not be encouraged."
[08:44:09] <hayley> https://github.com/GregBowyer/ManagedRuntimeInitiative/blob/master/MRI-J/hotspot/src/azshare/vm/gc_implementation/genPauseless/gpgc_heap.cpp#L122-L126 Oh, so batching memory operations is optional. Whew!
[08:44:10] -ixelp- ManagedRuntimeInitiative/gpgc_heap.cpp at master · GregBowyer/ManagedRuntimeInitiative · GitHub
[08:45:10] <moon-child> 'ERROR: The ALSA version must be 0.9.1 or higher.  You have the following ALSA version installed: 1.2.6.1'  🤔
[08:47:31] <hayley> Announcing Managed Runtime Initiative 2: you had your fucking change with Linux, now CLOSOS or bust
[08:52:29] *** Quits: Inline (~Inline@aftr-37-201-240-204.unity-media.net) (Quit: Leaving)
[08:53:26] *** Joins: slyrus (~slyrus@192-184-223-165.static.sonic.net)
[08:58:09] <gilberth> "lazy" is the correct term here. Shouldn't computers do work for us in the first place? Or machines in general.
[08:58:18] *** Joins: dave0 (~davezero@069.d.003.ncl.iprimus.net.au)
[08:58:44] *** Joins: slyrus_ (~slyrus@192-184-223-165.static.sonic.net)
[08:58:52] <dave0> maw
[08:59:01] <hayley> maw
[08:59:13] *** Quits: slyrus (~slyrus@192-184-223-165.static.sonic.net) (Ping timeout: 250 seconds)
[08:59:17] <gilberth> Hello dave0!
[08:59:18] <dave0> hi hayley, how are you?
[08:59:24] <dave0> hi gilberth :-)
[08:59:28] <hayley> Fine, thanks. You?
[08:59:38] <dave0> good, i got a fresh cup of coffee
[09:04:17] * mfiano realizes his symbol plist idea for FFI was dumb and is glad he didn't implement it. cffi:defcenum and cffi:defbitfield have the same effect built-in and better implemented.
[09:17:44] <moon-child> gilberth: relevant: https://everything2.com/user/ShadowNode/writeups/Why+C+sucks  says 'Garbage collectors are for lazy programmers'.  Links to a page which says 'A good programmer is a lazy programmer'
[09:17:46] -ixelp- Why C sucks (idea) by ShadowNode - Everything2.com
[09:18:24] <hayley> Larry Wall.text
[09:41:24] <mfiano> The PR was from Guest74, which I don't even want to merge because he's too lazy to register a nick on here but not on GitHub. Is _that_ too nitpicky? :)
[09:41:28] <mfiano> hayley: ^
[09:42:45] <hayley> Honestly, I don't think that alone is a good reason.
[09:42:53] <mfiano> hehe
[09:43:47] <mfiano> But yeah, about the whitespace. A couple PRs were had different semantics to my brain because the indentation made it look like something else.
[09:43:59] <mfiano> s/where//
[09:44:21] <hayley> Fair.
[09:44:39] <mfiano> It's seriously 1 setq to your emacs rc to use consistent whitespace
[09:44:43] *** Joins: treflip (~user@95.79.32.99)
[09:45:21] <mfiano> I think that small effort pays for itself many times
[09:46:01] <mfiano> (when collaboratively working under version control and confusing others/contributing to back-and-forth diff noise)
[09:50:07] <mfiano> Ok, so I'm not able to get the number of characters and pixels in both dimensions for a pty device in CL
[09:50:16] <mfiano> err s/not/now//
[09:50:21] *** Quits: slyrus_ (~slyrus@192-184-223-165.static.sonic.net) (Ping timeout: 250 seconds)
[09:50:25] <mfiano> I always make these semantic opposite typos :)
[09:50:53] <clothespin_> I created my first 1.0 release tag today
[09:51:15] <clothespin_> after four years of coding
[09:53:12] <mfiano> Congratulations.
[09:53:18] <clothespin_> thanks
[09:53:28] <mfiano> Now just add some users and wait forever to bump another major version :)
[09:53:59] <clothespin_> i have one user
[09:54:46] <mfiano> Software quality is inversely proportional to the number of users and their crazy input. Some people think fuzz testing is a solution.
[09:55:15] <clothespin_> what's fuzz testing?
[09:55:18] <mfiano> Or The number of bugs is, rather.
[09:55:21] *** Joins: slyrus (~slyrus@192-184-223-165.static.sonic.net)
[09:55:49] <mfiano> A kind of random testing.
[09:56:16] <mfiano> Generating random input for the program in an attempt to find vulnerabilities and other bugs.
[09:56:39] <mfiano> To be honest, I'm not sure how it differs from generative testing, like quickcheck
[09:57:50] <hayley> I would say generative testing is a way of specifying how to fuzz.
[09:57:59] <mfiano> also called property-based testing
[09:58:03] <mfiano> Ah ok
[09:58:39] <hayley> https://www.tedinski.com/2018/12/11/fuzzing-and-property-testing.html suggests property testing is smarter about what to generate.
[09:58:40] -ixelp- Fuzzing vs property testing
[09:58:42] <mfiano> https://www.tedinski.com/2018/12/11/fuzzing-and-property-testing.html
[09:58:43] -ixelp- Fuzzing vs property testing
[09:58:45] <mfiano> oh god
[09:58:46] <mfiano> lol
[09:59:01] <mfiano> i lost i guess
[09:59:18] <hayley> But some people think they're synonyms. And then, what about profiling fuzzers like AFL which guess the shape of the input based on runtime behaviour?
[10:00:06] <hayley> Netfarm and SICL have been fuzz tested in places: I generate random data to serialize and deserialize for the former, and I feed random code to SICL to see if any passes break.
[10:00:09] <mfiano> PBT is interesting. I had some build options on BSD for some packages to use it.
[10:00:14] <hayley> pfdietz also fuzz tests SBCL too.
[10:00:18] <mfiano> It kinda seems like AOT JIT :)
[10:00:33] <clothespin_> how do you fuzz test sbcl?
[10:01:16] <hayley> Arguably, running a concurrent system for a long time is fuzzing it, as it will exercise a lot of orderings of actions. But I prefer to use a theorem prover for those, since you can end up with 1 in 10 million bugs otherwise.
[10:01:38] <hayley> clothespin_: You can write a program that generates random Lisp functions, and see if the compiler crashes while compiling it.
[10:02:00] <clothespin_> oh
[10:02:18] <hayley> Worse is e.g. a 1 in 400 billion bug, involving liveness and C♯ destructors: https://www.youtube.com/watch?v=L6z10OvE5DI
[10:02:18] -ixelp- Catching a 1 in 400 billion bug - YouTube
[10:02:21] <mfiano> The takeaway is all software is crap and can always be improved.
[10:02:25] <clothespin_> my system breaks in clasp
[10:02:33] <mfiano> If you ever forget this just (incf *users*)
[10:03:12] <clothespin_> I'm pretty sure its a clasp bug, but i cannot simply replicate it
[10:03:30] <clothespin_> it has to do with structs including structs
[10:04:13] <mfiano> There is a big gotcha in that in conforming code.
[10:04:40] <mfiano> When using :conc-name. There is a big different between :conc-name nil, and :conc-name ""
[10:04:43] <clothespin_> for part of the time, i had a piece of code in an init file hiding that turned off the garbage collector
[10:05:00] <clothespin_> so i wasn't seeing finalization bugs
[10:05:15] <clothespin_> it was like 'oh shit!'
[10:05:46] <hayley> "Well, that shows what I have learned a long time ago, languages which have a builtin garbage collector are inferior to languages where all memory management is done by the person who should know, the programmer." What, they never said "being able to handle temporal logic problems with branching time" was part of knowing how to program.
[10:05:48] *** Joins: slyrus_ (~slyrus@192-184-223-165.static.sonic.net)
[10:07:06] *** Quits: slyrus (~slyrus@192-184-223-165.static.sonic.net) (Ping timeout: 260 seconds)
[10:07:08] <clothespin_> you guys come up with quotes and reference like sports announce come up with stats and anecdotes
[10:07:20] <mfiano> Now all we have to do is convince the kernel team to let us implement the drivers and other leaves in CL instead of the recent Rust go-ahead
[10:07:24] <hayley> No, I was just doing a stupid thing called "reading the comments section".
[10:07:50] <hayley> mfiano: As I was saying, just do it in CLOSOS, since the Linux kernel hackers blew it with the managed runtime initiative already.
[10:08:22] <mfiano> I aborted Linux for kernel development (and other) reasons.
[10:08:29] <clothespin_> do you think that clasp is destined to be slow?
[10:08:51] <hayley> In runtime performance, or compilation speed?
[10:08:58] <clothespin_> both
[10:09:28] <hayley> For the former: LLVM is supposed to be magic according to idiots^Wother compiler gurus, so if there are enough Lisp-end optimisations, it could work. For the latter: only if the LLVM people pull fingers out of their butts.
[10:09:33] <mfiano> Compilation speed can be attributed to lack of runtime optimizations.
[10:09:38] <clothespin_> for me compilation speed is runtime performance since my user[s] unwittingly use the compiler
[10:09:57] <hayley> Last time I asked drmeister, they had to fiddle with the minutae of the IR provided to make LLVM go faster.
[10:10:03] <clothespin_> i don't understand lisp images with no compiler
[10:10:13] <clothespin_> that's the frikken best thing
[10:10:34] <hayley> Such is Unix brainrot?
[10:11:13] <clothespin_> in my main application, a sketch can subclass from another sketch
[10:11:32] <mfiano> are we still talking about structs?
[10:11:36] <clothespin_> no
[10:11:40] <mfiano> Ok good
[10:11:53] <clothespin_> i'm using sbcl for real work
[10:12:24] <clothespin_> sbcl is extremely fast
[10:12:34] <mfiano> As for "destined", well, good compilers require a lot of man hours. It took quite a bit for SBCL to get where it is today.
[10:12:39] <hayley> mfiano: But, IMO, you can really milk the hell out of compiler/runtime features for an OS. Like how Java polls for GC safepoints at 100MHz or so. You could have the safepoints also allow for yielding threads, and do some optimisations around that.
[10:13:11] <hayley> e.g. if all your threads park at safepoints, you don't have to start them back up to start GCing. I wonder if you could make context switching faster, by only reloading live registers, but I wouldn't attempt it.
[10:13:24] <clothespin_> hayley, do you know carl shapiro?
[10:13:35] <hayley> I don't think I do.
[10:13:56] <clothespin_> he's a gc implementer too
[10:14:04] <clothespin_> he works at google
[10:14:15] <hayley> Also C-f "unsafe code tax" in https://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.73.4676&rep=rep1&type=pdf
[10:14:44] <hayley> 38% overhead on a web server to run a microkernel and all, if you have a safe language.
[10:14:59] <clothespin_> so basically what mfiano said is give clasp a few years
[10:15:32] <hayley> Right.
[10:16:05] <mfiano> Not really
[10:16:14] <clothespin_> that's why part time i should invest in it now to reap the benefits of llvm and sicl down the road
[10:16:23] <mfiano> Give it a few years with a lot of developers, or many years with its current developers.
[10:16:36] <clothespin_> is 4 many years?
[10:16:42] <mfiano> SBCL has a long history with a lot of developers, even CUMCL did.
[10:16:47] <mfiano> (where is came from)
[10:17:07] <mfiano> No, 4 nothing
[10:17:11] <clothespin_> bah
[10:17:48] <mfiano> Of course the mythical man month is at play too
[10:17:54] <clothespin_> i guess i can dream
[10:18:03] <clothespin_> i never read that book
[10:19:30] <clothespin_> i guess i continue using swig for c++
[10:20:11] <clothespin_> it generates a 100000 line c++ file
[10:21:04] <clothespin_> calls go through 2 layers of lisp and one layer of C++ to actually call the real code
[10:29:33] *** Joins: slyrus (~slyrus@192-184-223-165.static.sonic.net)
[10:30:26] *** Quits: slyrus_ (~slyrus@192-184-223-165.static.sonic.net) (Ping timeout: 260 seconds)
[10:43:35] *** Joins: slyrus_ (~slyrus@192-184-223-165.static.sonic.net)
[10:44:26] *** Quits: slyrus (~slyrus@192-184-223-165.static.sonic.net) (Ping timeout: 268 seconds)
[10:46:01] *** Joins: kakuhen (~kakuhen@user/kakuhen)
[10:46:29] <kakuhen> How would I read lines of a file into a list without getting a list of lists?
[10:46:46] <kakuhen> My data is structured as "x y\n x y\n x y\n", and I want to get (x y x y x y)
[10:47:04] <moon-child> split according to whitespace?
[10:47:08] <kakuhen> So far I've been able to get ((x y) (x y) ...) by looping with READ-LINE and then collecting words with READ-FROM-STRING
[10:47:16] <kakuhen> but I want to strip that one layer of parens so to speak
[10:47:17] <moon-child> (i.e. don't read lines; read the whole thing and then split)
[10:47:48] <moon-child> or--assuming you're using LOOP--use APPEND instead of COLLECT
[10:48:42] <kakuhen> oh that works, thanks!
[10:51:01] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[10:53:34] *** Joins: slyrus (~slyrus@192-184-223-165.static.sonic.net)
[10:54:55] *** Quits: slyrus_ (~slyrus@192-184-223-165.static.sonic.net) (Ping timeout: 250 seconds)
[10:59:50] *** Quits: slyrus (~slyrus@192-184-223-165.static.sonic.net) (Ping timeout: 268 seconds)
[11:00:39] *** Joins: slyrus (~slyrus@192-184-223-165.static.sonic.net)
[11:00:46] <mfiano> pretty sure uiop has a function for this
[11:01:55] <mfiano> (with-open-file (in "/path/to/file") (uiop:slurp-stream-lines in))
[11:04:00] <mfiano> Simpler: (uiop:read-file-lines #p"/path/to/file")
[11:04:21] <moon-child> mfiano: that gives you ("x y" "z w"), not ("x" "y" "z" "w")
[11:04:29] <mfiano> Not for me
[11:06:45] <mfiano> https://gist.github.com/mfiano/3c5d2077cb22e37602eb774e756e1fd0
[11:06:46] -ixelp- *sly-mrepl for sbcl*.txt · GitHub
[11:07:39] <moon-child> https://0x0.st/-Fw-.txt
[11:08:01] <hayley> https://www.youtube.com/watch?v=X1NkphFI3oQ
[11:08:02] -ixelp- PROMO FILM - Exposure, Robert Fripp - YouTube
[11:08:39] <hayley> "To batch, or not to batch, that is the question. Whether 'tis nobler in the mind to suffer the slings and arrows of long pause times, or to take arms against a lousy virtual memory interface, And by opposing end them? To run: to scale."
[11:10:08] * mfiano is listening to a Fripp & Eno album atm
[11:14:02] *** Quits: slyrus (~slyrus@192-184-223-165.static.sonic.net) (Ping timeout: 240 seconds)
[11:16:31] <mfiano> 🤔 https://i.lisp.cl/HEiIoO.png
[11:18:49] *** Joins: slyrus (~slyrus@192-184-223-165.static.sonic.net)
[11:18:57] <moon-child> Truetype: ‘If a contour falls exactly on a pixel’s center, that pixel is turned on’
[11:19:02] <moon-child> I want half-open ranges ;-;
[11:20:44] <moon-child> mfiano: can’t decide whether I want sourceforge to die in a fire or I want to oppose github centralisation....
[11:20:59] <White_Flame> why not both?
[11:21:17] <mfiano> Personally I don't care. I use Git for its distributive nature, not it's social networking.
[11:21:20] <mfiano> its*
[11:22:11] <moon-child> mfiano: yes, but the fact of the matter is that many people are unable to distinguish git from github, and I think that that is problematic
[11:22:18] <mfiano> You better believe I work with multiple remotes
[11:22:23] <moon-child> I do to
[11:22:27] <moon-child> *too
[11:22:52] <White_Flame> I work with multiple remotes every time I turn on the TV
[11:26:03] <moon-child> 'Values pushed onto the stack or popped from the stack are always 32 bit quantities [...] Note: On a 16-bit system, such as Windows, all stack operations are on 16-bit values'  make up your damn minds!
[11:37:59] *** Joins: shka (~herr@109.231.0.226)
[12:13:02] *** Joins: random-nick (~random-ni@87.116.160.199)
[12:29:49] *** Quits: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de) (Quit: Leaving)
[12:34:06] *** Quits: slyrus (~slyrus@192-184-223-165.static.sonic.net) (Ping timeout: 260 seconds)
[12:37:15] *** Joins: slyrus (~slyrus@192-184-223-165.static.sonic.net)
[12:39:31] <kakuhen> moon-child: mutual destruction of sourceforge and github
[12:39:35] <kakuhen> return to self-hosted Trac and Mailman
[12:40:13] <hayley> "  @theemacsshibe  this is literally what Rust's borrow checker solves for you without you having to do it all in your head " - Wrong, you use Rc and it sucks.
[12:40:44] <moon-child> kakuhen: trac kinda sucks though
[12:40:50] <kakuhen> i like trac :(
[12:40:58] <kakuhen> but yes it feels out of place on the modern web
[12:41:15] <moon-child> 'modern web' sucks too
[12:41:57] <kakuhen> i agree
[12:42:35] <kakuhen> it's crazy how only 3 years ago most japanese websites were still pretty lightweight and reminded me of the web in early 2010s
[12:42:43] <kakuhen> but now they've caught up to the US as far as javascript bloat and breaking old browsers goes
[12:43:17] <kakuhen> i mean, it's nowhere near as bad as most western websites i use
[12:43:21] <kakuhen> but it's noticeable worse than 3 years ago
[12:43:23] <kakuhen> noticeably*
[12:44:06] <moon-child> I mean, early web was pretty bad too
[12:44:15] <moon-child> just not as bad
[12:44:57] <kakuhen> less worse, yes
[12:45:30] <kakuhen> also I wish firefox had a easier control to disable javascript for a website
[12:45:46] <kakuhen> in safari I can just go to Developer > Disable Javascript; I can even disable CSS if I want
[12:45:57] <kakuhen> though in firefox idk of a fast besides editing about:config or installing NoScript
[12:46:04] <kakuhen> fast way*
[12:46:07] <moon-child> (specifically: the lack of good tools for layout is a burden to website implementors; and the lack of visual cohesion makes it difficult to scan)
[12:46:28] <moon-child> (some website are still difficult to scan, e.g. youtube)
[12:46:31] <moon-child> what's wrong with noscript?
[12:46:38] <kakuhen> i have like 5 extensions already
[12:46:42] <kakuhen> i guess it doesnt matter adding another one
[12:46:43] <moon-child> only 5?
[12:46:48] <kakuhen> yeah
[12:47:05] <moon-child> hmm, I guess I only have 5 at the moment :P.  Used to have many more
[12:47:05] <kakuhen> i like my web browser not consuming 1 GB on an empty page
[12:47:05] <kakuhen> 1 GB RAM*
[12:47:12] <kakuhen> i used to have quite a bit too, actually
[12:47:18] <kakuhen> but then XUL extensions got killed off
[12:47:22] <kakuhen> and with it like half the extensions I used to use
[12:47:24] <moon-child> indeed
[12:47:38] <moon-child> remember firebug?
[12:47:51] <kakuhen> Yeah
[12:48:14] <kakuhen> there still isnt a decent alternative to it which i find ironic
[12:48:26] <kakuhen> "We promise to make Web Extensions API really great, everybody!!"
[12:48:54] <kakuhen> well, I suppose Chrome's developer tools are on-par if not better
[12:49:32] *** Quits: slyrus (~slyrus@192-184-223-165.static.sonic.net) (Ping timeout: 256 seconds)
[12:51:02] *** Joins: slyrus (~slyrus@192-184-223-165.static.sonic.net)
[12:53:58] <hayley> So TIL the borrow checker does theorem proving on temporal logic to determine object lifetimes, and not just region-based memory management. Since, well, you don't have regions and stack allocation; whose stack does it go on?
[12:54:11] <hayley> (You could stack allocate if you know the threads die before you return, but good luck with that.)
[12:54:44] *** Quits: shka (~herr@109.231.0.226) (Remote host closed the connection)
[12:55:52] * hayley wonders if she could attach the number of words freed last collection to each region, and thus keep a running tally of which regions tend to die often. That'd give you an approximate sense of object age, too.
[12:59:51] <hayley> But then that doesn't really work if you end up exhausting a region and have to move to another. /me scratches head
[13:00:43] <hayley> Apparently the train/"mature oldspace" GC is just all oldspace, so they always use a generational heuristic of sorts. 
[13:03:13] *** Quits: slyrus (~slyrus@192-184-223-165.static.sonic.net) (Read error: Connection reset by peer)
[13:03:32] *** Joins: slyrus (~slyrus@192-184-223-165.static.sonic.net)
[13:07:52] *** Joins: shka (~herr@109.231.0.226)
[13:14:21] * moon-child reads a horror manga, is deeply morally disturbed
[13:14:26] <moon-child> I really don't know what I expected
[13:14:42] <hayley> "@theemacsshibe  alright buddy if you like your garbage collector so much I'm not trying to stop you. Have fun with your finalizers and unpredicatable performance and 1 in 400 billion bugs."
[13:15:09] <hayley> Yes, the unpredictable performance of...checks notes on the fly compaction.
[13:16:36] <hayley> And I only need it to run multi-core programs. Checks out.
[13:16:56] <sham1> And of course, one shouldn't be tying memory allocation and other finalisation tasks
[13:17:19] <sham1> If your file handle gets closed only when your resource gets deallocated, you're doing it wrong
[13:17:59] <sham1> And on that note: RAII can make things annoying
[13:18:17] <hayley> And on that note: if you use Rc<T> or shared_ptr<T> already, you just have a shitty GC.
[13:18:58] <sham1> That's also true. Just because it's not a tracing GC and instead if refcounts, it doesn't mean that it's still not a GC
[13:20:28] <hayley> Or, worse, you make redundant copies and blow out your cache that way. No free lunch.
[13:27:24] <kakuhen> GC bad
[13:27:32] <kakuhen> because uh.... non-deterministic and stuff
[13:27:42] <kakuhen> borrow checker good because uh.... not GC
[13:27:45] <shka> malloc is not deterministic 
[13:28:07] <shka> uh, you are sarcastic
[13:28:08] <shka> ok
[13:28:10] <kakuhen> i subscribe to the ideology of "no cons, no problems"
[13:28:29] <kakuhen> mo cons, mo problems
[13:28:52] <hayley> But the jump in topic from "Temporal logic ain't easy" -> "the borrow checker does that" -> "No it doesn't, it only does regions, which doesn't work with multiple threads" -> "Oh yeah, since you love your GC so much, why not marry it?"
[13:29:03] <sham1> Well I sorta understand the complaint from a very theoretical standpoint. malloc and friends *feel* less random because you manually insert them. RAII and such *feels* less undeterministic. But that's of course just evidence that just because it doesn't feel undeterministic that it's not undeterministic
[13:29:05] <moon-child> shka: apparently somebody did an O(1) malloc
[13:29:15] <moon-child> but I can't imagine it was particularly fast
[13:29:28] <hayley> Are you using a RTOS and not paging too?
[13:29:37] <shka> moon-child: well, amortized O(1)?
[13:29:49] <hayley> At some point, much to the dismay of rustaceans, OS jitter is more prominent than pause time. Scary, isn't it?
[13:29:59] <sham1> I can make a O(1) malloc. void *malloc(size_t alloc_size) { void *ptr = bump_ptr; bump_ptr += alloc_size; return ptr; }
[13:30:03] <moon-child> hayley: yeah, it was intended primarily for real-time environments
[13:30:11] <kakuhen> shka: and yes i was being sarcastic, but there is also a kernel of truth
[13:30:13] <moon-child> shka: not amortized; constant time for every alloc
[13:30:15] <kakuhen> i know nothing about computers, BUT
[13:30:30] <shka> moon-child: interesting, but likely impractical 
[13:30:34] <kakuhen> i think the issue with GC, if you want to say there is one, is that your execution time becomes non-deterministic
[13:30:40] <kakuhen> not necessarily that GC is slow or anything
[13:30:52] <sham1> It feels like you have less control
[13:30:54] <kakuhen> but this isn't a problem if you just never allocate anything ;)
[13:31:06] <sham1> Or if you statically allocate everything
[13:31:10] <sham1> Welcome to embedded land
[13:31:13] <kakuhen> and in my very biased opinion, i think CL lets you avoid allocating a lot more compared to other GC langs since you have macros
[13:31:31] <moon-child> kakuhen: as hayley says, you may produce a program whose execution time is deterministic only if you very carefully control every aspect of its execution
[13:31:33] <hayley> Your execution time was non-deterministic to start with, and you get to suck it up(tm) with any dynamic allocation, more or less.
[13:31:50] <moon-child> most programs are not written in such a fashion and for those gc is not problematic
[13:32:03] <hayley> The best you can do is use a concurrent collector, and if you want more than the best and don't care about anything else (e.g. throughput), then you may use a hard real-time GC like the Metronome.
[13:32:06] <kakuhen> yeah, im not saying non-determinacy is a big issue
[13:32:16] <hayley> But the time overhead is...unappealing if you don't care that much.
[13:32:17] <kakuhen> but i do know it's one of the more popular complaints among ppl who dislike GC
[13:32:56] <hayley> Well, they are being dumb IMO.
[13:33:06] * moon-child recalls a c++ person who was using '''ecs''', and converging on a bad compacting gc
[13:33:19] <sham1> ecs?
[13:33:49] <kakuhen> I once recall a C++ person who knows about SAP, RAII, and a bunch of fancy stuff, and then somehow failed to understand how you can compute things in compile-time with Common Lisp
[13:33:50] <moon-child> sham1: column stores^W^Wa 'design pattern' which seems to be popular these days
[13:34:11] <kakuhen> My favorite C++ person was the crank in ##math who tried convincing me it was a good idea to use C++ to teach people algebra
[13:34:26] <kakuhen> and also said "if a student gives me a recursive function I will give them an F and tell them to do better"
[13:34:27] <sham1> I mean what is it a shorthand of
[13:34:32] <kakuhen> like ok genius how the hell will you teach them recurrence relations
[13:34:32] <moon-child> 'entity component system'
[13:34:37] <sham1> Ah
[13:34:44] <sham1> Didn't connect at first
[13:34:47] <moon-child> (seriously, I find it kind of ironic that people had figured out column stores by the 70s at least--atw says 50s I think--and now people are reinventing them badly)
[13:35:08] <hayley> .oO(CONS for today, collect tomorrow. That's me. Hahahahaha)
[13:35:12] * moon-child fully expects to see a transposed framebuffer representation at some point
[13:35:27] <sham1> kakuhen: never let that person hear of the Ackermann function
[13:35:56] <kakuhen> I assume he'd brush it off as "theoretical nonsense"
[13:36:00] <kakuhen> idk the guy was really weird
[13:36:09] <hayley> .oO(https://youtu.be/vVooyS4mG4w?t=186)
[13:36:09] -ixelp- Pink Floyd - On The Run - YouTube
[13:36:23] <kakuhen> he really insisted of using c++ rather than sagemath, coq, or some other language specifically designed for math, on the basis of "well, c++ is as close as you get to bare metal and have useful abstractions :)"
[13:36:40] <hayley> Pictured: crab freeing a large graph of objects at once, but it's definitely deterministic
[13:36:43] <sham1> Never let that person hear of the C++ abstract machine
[13:36:44] <kakuhen> yeah, the language without fucking bit vectors is as close as you can get to bare metal and have useful abstractions /s
[13:36:51] <moon-child> c++ has bit vectors
[13:36:56] <kakuhen> oh wait it does?
[13:36:58] <kakuhen> i swore it didn't
[13:36:58] <moon-child> vector<bool> is implemented that way
[13:37:02] <kakuhen> TIL
[13:37:10] <moon-child> (and this caused all sorts of problems, btw)
[13:37:11] <sham1> Well std::vector<bool> *can* be implemented like that
[13:37:12] <kakuhen> i swore most ppl used some thing in boostlib
[13:37:14] <hayley> stf::vector<bool>
[13:37:18] <hayley> AHAhahahaha
[13:37:41] <sham1> That's why iterators over std::vector<bool> are specified to be a bit weird cf. other iterators of std:vector<T>
[13:38:02] <kakuhen> well, one of my friends is an EE student and needed help practicing C++, so I told him to do advent of code
[13:38:08] <moon-child> I don't know the details, because I dont' use c++.  There's this awful 'reference' thing where you can say for (T &x: y), but when y is a vector<bool> you have to say for (T &&x: y) instead
[13:38:14] <kakuhen> and for problem 3 i told him to use std::vector<bool> as a gross approximation of a bit vector
[13:38:18] <kakuhen> im glad to know it is actually a bit vector
[13:38:23] <kakuhen> err rather, sometimes implemented as one
[13:39:01] <sham1> Well one thing is that taking an address of the element within std::vector<bool> can be tricky
[13:39:25] <sham1> Because of course, your bool could be CHAR_BITS bits packed into one "byte"
[13:39:47] <kakuhen> moon-child: "for (auto &&x : y)" is awful in general because the meaning of &&x completely changes on context
[13:40:00] <kakuhen> if you have an l-value then auto& and auto&& will be equivalent
[13:40:04] <kakuhen> if you have an r-value then all bets are off
[13:40:30] <moon-child> doesn't c++ have like...rvalues and prvalues and xrvalues and something?
[13:40:34] <sham1> Yes
[13:40:57] <sham1> All the different ways one can reference a value and classify whether it is an expression that can be assigned or not
[13:41:10] <sham1> And whether it's an expression that can be assigned to or not
[13:41:12] *** Joins: rogersm (~rogersm@90.166.177.48)
[13:41:13] <moon-child> and ... rvalue reference?
[13:41:30] <sham1> A reference to an rvalue. That is, it's not a reference you can assign to
[13:41:33] <sham1> Which is just weird
[13:41:38] <moon-child> (these are all the horrors I know about a language I don't even know.  Imagine the horrors lurking re vt100s and c and unix and ...)
[13:41:51] <sham1> C doesn't have nearly this amount of nonsense
[13:42:00] <kakuhen> can;t have non-sense if you have nothing ;)
[13:42:07] <moon-child> I know that.  But I also know all the horrors that c does have
[13:42:38] <hayley> FWIW ask gilberth about how he fared implementing a proper Lisp object representation in Rust too.
[13:42:54] <sham1> unsafe galore I imagine
[13:43:19] * moon-child implemented a perfectly cromulent lisp interpreter in j.  Just sayin.  #notallreferentiallytransparentlanguages
[13:43:29] <hayley> No, all safe. Just lots of Arc<Mutex<T>> instead.
[13:43:38] <kakuhen> if i had to write a doubly linked list in safe rust
[13:43:44] <sham1> I wouldn't
[13:43:50] <kakuhen> gosh i'd probably finish all of the exercises in my commutative algebra class before i get to that
[13:43:56] <kakuhen> finish all of the exercises i never did*
[13:44:08] * hayley uploaded an image: (145KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/JWxQaPzUUhygTelIByZvGXVM/siclos.png >
[13:44:56] <kakuhen> that reminds me, now that im on break i can spend tons of time on audio stuff in lisp
[13:45:16] <kakuhen> right before i had to cram for finals and suffer, i wrote a smol utility for converting mu-law data to pcm
[13:45:22] <kakuhen> and i will finish my flac decoder once and for all
[13:45:49] <kakuhen> then combine both into one little library and try making a not-so-painful API for initializing your own audio decoders
[13:45:56] <kakuhen> very ambitious goals
[13:46:12] <kakuhen> and in the end i intend to somehow use cffi with libao to actually get a lisp programing making my speakers beep
[13:46:38] <kakuhen> it seems pretty annoying to make a wrapper for all of libao, however, so on the side ive been writing a toy library does just enough with libao to play some stuff
[13:46:46] <kakuhen> then i will maybe a wrapper for that toy library instead
[13:46:51] <kakuhen> maybe make*
[13:47:10] <sham1> Just output to one of the files under /dev/snd
[13:47:23] <moon-child> if you're looking for api inspiration I suggest fmod
[13:47:24] <kakuhen> unfortunately i use a toy computer without a /dev/snd
[13:47:31] <sham1> Ah
[13:47:42] <moon-child> alsa is ... not as bad as pulseaudiob
[13:47:46] <moon-child> ut that's saying little
[13:47:56] <kakuhen> but yeah, the nice part about libao is that, it's perfect for what i want
[13:47:59] <sham1> OSS was nicer
[13:48:17] <kakuhen> i just need to be able to spam pcm frames at an output device and have it "just work"
[13:48:29] <shka> weee look at it go! https://www.reuters.com/world/uk/britain-says-omicron-spreading-phenomenal-rate-2021-12-13/?taid=61b6fd8b4bd3090001f08f26&utm_campaign=trueAnthem:+Trending+Content&utm_medium=trueAnthem&utm_source=twitter&utm_source=reddit.com
[13:48:29] -ixelp- 'Phenomenal' Omicron spread accounts for 40% of London infections | Reuters
[13:48:40] <sham1> woo
[13:49:06] <moon-child> sham1: yes
[13:49:06] <kakuhen> the nice part about libao is that someone else already suffered with ALSA, Pulse, Core Audio, etc. to figure out how to set up the mutexes and stuff to be able to set up an audio queue and play stuff inside of it as you fill it up
[13:49:20] <kakuhen> and they even support lesser known/targetted stuff like sndio and sun's own little thing
[13:50:21] <kakuhen> moon-child: i think ive heard of fmod before
[13:50:32] <kakuhen> that's library that lets you define little audio plugins and modify samples, right?
[13:50:49] <kakuhen> wait no nvm im thinking of some common lisp audio library, not fmod
[13:51:23] <moon-child> https://www.fmod.com/
[13:51:51] <shka> anyway, it looks like omicron is not deadly 
[13:52:30] *** Quits: slyrus (~slyrus@192-184-223-165.static.sonic.net) (Ping timeout: 268 seconds)
[13:53:23] <shka> maybe omicron can actually out-compete the more dangerous variants  
[13:53:30] <shka> which would be a good thing :-)
[13:53:50] <moon-child> shka: yes, it has been suggested in the past that that would be the conclusion of covid
[13:54:08] <kakuhen> i think i actually got omicron the friday before thanksgiving week
[13:54:17] <kakuhen> i had the most unique and strange sore throat ever
[13:54:27] <dave0> it might be a tumor
[13:54:41] <kakuhen> normally, when i start to develop a sore throat, the next 24 hours are absolute shit and i have to take local anaesthetic
[13:54:55] <kakuhen> but this one never got too bad, and almost went away on the same day
[13:55:06] <kakuhen> but then i got a runny nose and it suddenly returned the next morning
[13:55:14] <kakuhen> i sleep again and it goes away
[13:55:20] <kakuhen> then for an entire week i just cant stop coughing
[13:55:26] <kakuhen> it randomly goes and goes, almost like an acute bronchitis
[13:55:35] <dave0> looks like you picked the wrong day to quit smoking
[13:55:38] <kakuhen> and cough syrups wouldn't help either
[13:55:40] <kakuhen> lole
[13:56:05] <kakuhen> anyway, when omicron was still largely undocumented, and i read a report on some dude's symptoms
[13:56:08] <kakuhen> it felt eerily similar to mine
[13:56:18] <kakuhen> it sounded*
[13:56:20] *** Joins: slyrus (~slyrus@192-184-223-165.static.sonic.net)
[13:56:26] <kakuhen> very mild symptoms that you can barely distinguish from a cold
[13:59:02] <dave0> oh no now you're a close contact
[14:00:03] <kakuhen> anyway, i dont think i actually got the omicron variant, but i do think there is a non-zero probability i did
[14:00:19] <kakuhen> because this cold was the first such one i've experienced in my life
[14:00:25] <kakuhen> the rest have followed a very rigid pattern 
[14:00:58] <kakuhen> usually "feel sore throat develop" -> "next day is absolutely terrible for swallowing anything" -> "runny nose for 1-2 days"
[14:01:22] <kakuhen> this one basically cycled between all of this on the same day then somehow turned into a week-long cough that'd randomly come and go
[14:01:51] <dave0> sounds like a cold.. it's cold season
[14:02:24] <dave0> runny nose, tired, lasts a couple of days
[14:02:39] <dave0> nothing to worry about unless you're like 80
[14:04:02] <kakuhen> on an unrelated noted, I found a /dev/cu.Bluetooth-Incoming-Port 
[14:04:14] <kakuhen> and now I want to do "cat /dev/urandom > /dev/cu.Bluetooth-Incoming-Port" just to see what happens
[14:04:24] <kakuhen> but knowing how mac os works, i bet this will somehow make the kernel really upset
[14:11:02] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 240 seconds)
[14:13:18] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.3)
[14:13:42] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[14:29:19] <shka> https://github.com/inconvergent/weird
[14:29:19] -ixelp- GitHub - inconvergent/weird: Generative art in Common Lisp
[14:30:31] <hayley> https://www.youtube.com/watch?v=gZM1WQKwpl0
[14:30:31] -ixelp- Pigs (Three Different Ones) - YouTube
[14:41:40] <dave0> not by the hair of my chinny chin chin
[14:42:22] <dave0> hayley: https://www.abc.net.au/news/2021-12-11/pet-piglet-becomes-massive-lives-in-house-brazil/100693248
[14:42:23] -ixelp- Brazilian woman thinks she's buying miniature piglet, doesn't expect it to grow to 250 kilograms - ABC News
[14:42:38] <hayley> 🐖
[14:42:44] <dave0> yes
[14:42:50] <dave0> a BIG fucking pig!
[14:43:06] <dave0> specializing in flattening the ground
[14:56:33] <hayley> Even though doing incomplete traces of just one region (with remembered sets) doesn't free everything, I wonder if it'd be friendlier to cache, and thus let you do faster collections most of the time.
[14:57:07] <hayley> If gilberth can do CDR coding and make it fast...
[15:48:31] *** Joins: cranium (~cranium@user/cranium)
[15:49:03] *** Quits: slyrus (~slyrus@192-184-223-165.static.sonic.net) (Ping timeout: 268 seconds)
[15:52:28] *** Joins: slyrus (~slyrus@192-184-223-165.static.sonic.net)
[16:01:03] *** Quits: slyrus (~slyrus@192-184-223-165.static.sonic.net) (Ping timeout: 250 seconds)
[16:08:55] *** Joins: slyrus (~slyrus@192-184-223-165.static.sonic.net)
[16:17:27] <dave0> nite all
[16:17:47] *** Quits: dave0 (~davezero@069.d.003.ncl.iprimus.net.au) (Quit: dave's not here)
[16:20:54] *** Joins: notzmv (~zmv@user/notzmv)
[17:26:29] *** Quits: slyrus (~slyrus@192-184-223-165.static.sonic.net) (Ping timeout: 268 seconds)
[17:39:17] *** Joins: slyrus (~slyrus@192-184-223-165.static.sonic.net)
[17:46:32] *** Quits: slyrus (~slyrus@192-184-223-165.static.sonic.net) (Ping timeout: 240 seconds)
[17:51:00] *** Joins: slyrus (~slyrus@192-184-223-165.static.sonic.net)
[17:56:32] *** Quits: slyrus (~slyrus@192-184-223-165.static.sonic.net) (Ping timeout: 240 seconds)
[17:57:50] *** Joins: slyrus (~slyrus@192-184-223-165.static.sonic.net)
[18:30:58] *** Joins: slyrus_ (~slyrus@192-184-223-165.static.sonic.net)
[18:31:14] *** Quits: slyrus (~slyrus@192-184-223-165.static.sonic.net) (Ping timeout: 256 seconds)
[19:09:52] *** Joins: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de)
[19:10:46] *** Quits: slyrus_ (~slyrus@192-184-223-165.static.sonic.net) (Ping timeout: 260 seconds)
[19:13:44] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 256 seconds)
[19:15:42] *** Joins: aeth (~aeth@user/aeth)
[19:19:47] *** Joins: slyrus (~slyrus@192-184-223-165.static.sonic.net)
[19:20:25] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 252 seconds)
[19:21:03] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 250 seconds)
[19:21:29] *** Joins: aeth (~aeth@user/aeth)
[19:25:26] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.3)
[19:25:50] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[19:27:32] *** Quits: slyrus (~slyrus@192-184-223-165.static.sonic.net) (Ping timeout: 240 seconds)
[19:33:05] *** Joins: slyrus (~slyrus@192-184-223-165.static.sonic.net)
[19:35:18] *** Quits: Aurora_v_kosmose (~LispyLigh@user/lispylights) (Remote host closed the connection)
[19:35:49] *** Joins: Aurora_v_kosmose (~LispyLigh@user/lispylights)
[19:38:02] *** Joins: slyrus_ (~slyrus@192-184-223-165.static.sonic.net)
[19:39:14] *** Quits: slyrus (~slyrus@192-184-223-165.static.sonic.net) (Ping timeout: 260 seconds)
[19:49:17] *** Joins: slyrus (~slyrus@192-184-223-165.static.sonic.net)
[19:50:26] *** Quits: slyrus_ (~slyrus@192-184-223-165.static.sonic.net) (Ping timeout: 260 seconds)
[19:51:14] *** Quits: treflip (~user@95.79.32.99) (Remote host closed the connection)
[19:54:00] *** Joins: treflip (~user@95.79.32.99)
[19:58:53] *** Quits: APic (~apic@apic.name) (Quit: [TLS] Client upgrade)
[19:59:10] *** Joins: APic (apic@apic.name)
[20:10:33] <gilberth> Good morning #lispcafe!
[20:12:05] <edgar-rft> is neither good nor morning, at least it's #lispcafe, so 33% success
[20:12:26] <gilberth> Granted.
[20:15:28] <gilberth> And what happend to the missing 1%?
[20:17:59] *** Joins: makomo (~makomo@user/makomo)
[20:18:44] <edgar-rft> it's the taxes you owe me for reading my answers
[20:20:50] <gilberth> Just 1% tax rate? That's a bargain. I am used to >50%. Where do I have to sign to apply for citizenship?
[20:23:18] *** Joins: slyrus_ (~slyrus@192-184-223-165.static.sonic.net)
[20:24:12] *** Quits: slyrus (~slyrus@192-184-223-165.static.sonic.net) (Read error: Connection reset by peer)
[20:24:41] <ck_> I thought it was in the exclamation point
[20:25:11] <ck_> (usually marking 'destructive statements')
[20:26:36] *** Joins: Catie (~user@user/catie)
[20:27:07] <gilberth> How hygienic.
[20:28:25] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.3)
[20:29:08] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[20:32:02] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 240 seconds)
[20:33:47] *** Joins: aeth (~aeth@user/aeth)
[20:36:29] *** Quits: treflip (~user@95.79.32.99) (Read error: Connection reset by peer)
[20:40:06] *** Joins: treflip (~user@95.79.32.99)
[20:53:59] <shka> https://www.youtube.com/watch?v=1IQy5O6OyuA
[20:54:00] -ixelp- The Old Rocket Designs That Make Starship Look Small - YouTube
[21:00:17] *** Joins: samlamamma (~user@79.138.136.192.mobile.tre.se)
[21:00:42] <samlamamma> Do anyone here have a PhD in Comp.Sci. and willing to chat about it?
[21:05:20] <shka> samlamamma: sorry, can't help with that 
[21:07:33] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.3)
[21:07:56] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[21:08:15] <samlamamma> shka: Haha no worries :)
[21:11:51] *** Quits: notzmv (~zmv@user/notzmv) (Remote host closed the connection)
[21:12:39] *** Joins: notzmv (~zmv@user/notzmv)
[21:18:55] <edgar-rft> I have Permanent Head Damage from Somputer Science if that helps.
[21:19:43] <ck_> one stack too many?
[21:20:47] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.3)
[21:21:19] <edgar-rft> oh, by keyboard-accident I just invented Someputer Sciene :-)
[21:21:58] <edgar-rft> damn keybard! - Someputer Science
[21:22:43] <edgar-rft> I can type what I want, always something missing, I give up now :-(
[21:22:57] *** Quits: treflip (~user@95.79.32.99) (Read error: Connection reset by peer)
[21:24:28] *** Joins: treflip (~user@95.79.32.99)
[21:25:30] <ck_> it's ok, the keys are like right next to each other
[21:26:34] *** Quits: samlamamma (~user@79.138.136.192.mobile.tre.se) (Ping timeout: 260 seconds)
[21:28:56] <edgar-rft> that's not the problem, some keys type ddouble or tttriple, others type only sometimes
[21:31:44] <gilberth> Worked ok for "sometimes", I expected "smetttmes".
[21:32:39] <ck_> that's the problem with randomness
[21:41:41] * gilberth is working on his stackoverflow cut and paste degree.
[21:45:19] <ck_> cool, what is the first course? clicking? double-clicking?
[21:46:53] <gilberth> The first course is Using Google 101, a prerequisite. But I almost finished that.
[21:54:00] <ck_> I bought those credentials overseas -- they call it "ghost-googling"
[21:54:21] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[22:01:09] <jasom> Tried a little advent of code; I need to read the specifications more carefully.  Spent an hour trying to find a bug in my implementation of day 4 only to finally notice "Diagonals don't count" in the instructions
[22:03:37] <Catie> jasom: Thanks for the heads up! I've had it in my head that I have to check diagonals too, and that's always my least favorite part
[22:07:13] <jasom> Catie: https://plaster.tymoon.eu/view/2775#2775 <-- not a big deal, here's just the part of my solution for finding diagonals
[22:07:44] <Catie> I did a similar implementation a couple years ago so I've had an idea in my head. Mostly I just haven't bothered actually to do anything on day 4
[22:11:32] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[22:21:12] *** Joins: djuber (~user@65.79.128.64)
[22:39:07] *** Quits: treflip (~user@95.79.32.99) (Quit: good night ✨)
[22:45:20] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.3)
[22:45:43] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[23:01:32] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.3)
[23:02:40] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[23:05:49] *** zbrown[m] is now known as zborwn
[23:06:42] *** zborwn is now known as nworb
[23:25:07] *** Quits: slyrus_ (~slyrus@192-184-223-165.static.sonic.net) (Read error: Connection reset by peer)
[23:25:30] *** Joins: slyrus (~slyrus@192-184-223-165.static.sonic.net)
[23:30:38] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.3)
[23:50:51] *** Quits: rogersm (~rogersm@90.166.177.48) (Quit: Leaving...)
[23:57:43] <White_Flame> does PhD stand for Phat Debt?
[23:59:14] <ck_> acronymfinder dot com agrees!
[23:59:25] <ck_> ("Piled High in Debt")
