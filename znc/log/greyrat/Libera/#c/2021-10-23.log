[00:01:17] <rsarson> https://bpa.st/RO4A
[00:02:59] *** Joins: LARathbone (~logan@user/poprocks)
[00:03:54] <Feuermagier> fizzie, ASLR is turned off. I figured out how to call any library function. (Stackoverflow and I know the address for the jump) - My current problem is, that I can not influence the argument passed in the first register.
[00:04:51] <sham1> What are you doing?
[00:04:56] <sham1> Like actually
[00:05:57] *** Joins: random-nick (~random-ni@87.116.165.220)
[00:06:24] <Feuermagier> sham1, trying to spawn a shell / run a command or find out where the stackframe of main begins. Any of that will do.
[00:06:28] *** Quits: aniruddha (uid340443@id-340443.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[00:08:10] *** Quits: constxd (~brad@192.75.101.164) (Ping timeout: 260 seconds)
[00:08:16] *** Quits: pony (~ed@smol/hors) (Quit: WeeChat 3.3)
[00:09:20] *** Joins: pony (~ed@smol/hors)
[00:11:13] *** Quits: rgrinberg (~textual@ip11-246-50-179.ct.co.cr) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[00:17:29] *** Quits: sysctl (~sysctl@88.215.77.255) (Quit: leaving)
[00:20:42] *** Quits: nehsou^ (~nehsou@wsip-68-227-92-38.mc.at.cox.net) (Ping timeout: 265 seconds)
[00:23:16] *** Joins: returnTRUE (~irc@189.41.191.71)
[00:23:49] *** Quits: Darkcoal (~user@139.64.63.46) (Ping timeout: 258 seconds)
[00:25:17] *** Quits: wovixo (~wovixo@128.104.205.49) (Quit: Leaving)
[00:25:49] *** Joins: Darkcoal (~user@51.158.144.31)
[00:28:07] *** Quits: zer0bitz (~zer0bitz@dsl-hkibng31-54fae3-116.dhcp.inet.fi) (Read error: Connection reset by peer)
[00:30:12] *** Quits: blindguard (~blindguar@2a02:908:1864:c200::2612) (Quit: Konversation terminated!)
[00:30:18] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[00:32:30] *** Joins: pucara (~i@host77.181-14-159.telecom.net.ar)
[00:33:41] *** Quits: marcello42 (~mp@p200300dfaf07ff01fa2e52f98b4dfc80.dip0.t-ipconnect.de) (Quit: Konversation terminated!)
[00:33:59] *** Quits: davidfetter_work (~davidfett@c-73-241-222-148.hsd1.ca.comcast.net) (Ping timeout: 264 seconds)
[00:36:23] *** Quits: dld (~davidlowr@2620:6e:6000:2900:5db6:6f5a:3b6e:25f9) (Ping timeout: 264 seconds)
[00:37:37] *** Quits: johnjay (~pi@192.142.100.50) (Ping timeout: 258 seconds)
[00:37:43] *** Quits: evocatus (~evocatus@84.51.113.13) (Quit: Leaving)
[00:40:17] *** Joins: vinleod (~vdamewood@fedora/vdamewood)
[00:40:20] *** Quits: DPA (~DPA@75-128-16-94.static.cable.fcom.ch) (Ping timeout: 260 seconds)
[00:41:11] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Ping timeout: 264 seconds)
[00:47:02] *** Quits: plainoldcheese (~plainoldc@user/plainoldcheese) (Quit: WeeChat 3.3)
[00:51:02] *** Quits: ioxzev1z (~ioxzev1z@user/ioxzev1z) (Ping timeout: 258 seconds)
[00:51:25] *** Quits: aportnoy (~aportnoy@bras-base-toroon0628w-grc-22-174-95-160-240.dsl.bell.ca) (Ping timeout: 260 seconds)
[00:52:41] *** Joins: rgrinberg (~textual@201.182.226.118)
[00:52:59] *** Quits: magla (~gelignite@55d4ee8d.access.ecotel.net) (Quit: Stay safe!)
[00:53:26] *** Joins: korg815 (~korg815@user/korg815)
[00:53:54] *** Quits: returnTRUE (~irc@189.41.191.71) (Ping timeout: 260 seconds)
[00:56:02] *** Quits: kenanmarasli (~kenanmara@user/kenanmarasli) (Quit: Leaving)
[00:57:36] *** Quits: Macuser (~Macuser@216.30.159.201) (Quit: Textual IRC Client: www.textualapp.com)
[00:59:05] *** Quits: arinov (~arinov@213.194.126.155) (Ping timeout: 258 seconds)
[01:01:25] *** Quits: lemonsnicks (~lemonsnic@cpc159519-perr18-2-0-cust114.19-1.cable.virginm.net) (*.net *.split)
[01:01:25] *** Quits: DarthGandalf (user@znc/developer/DarthGandalf) (*.net *.split)
[01:01:25] *** Quits: wilz (~wilz@modemcable036.177-131-66.mc.videotron.ca) (*.net *.split)
[01:01:25] *** Quits: nitrix (~nitrix@user/nitrix) (*.net *.split)
[01:01:25] *** Quits: SpringSprocket (~srv@hobby.esselfe.ca) (*.net *.split)
[01:01:25] *** Quits: agander_m (sid407952@tinside.irccloud.com) (*.net *.split)
[01:01:25] *** Quits: greyblue9 (sid500829@ilkley.irccloud.com) (*.net *.split)
[01:01:25] *** Quits: dreamcat4 (uid157427@hampstead.irccloud.com) (*.net *.split)
[01:01:25] *** Quits: cengiz_io (sid223191@ilkley.irccloud.com) (*.net *.split)
[01:01:25] *** Quits: computerquip (sid423484@user/computerquip) (*.net *.split)
[01:01:25] *** Quits: bjs (sid190364@user/bjs) (*.net *.split)
[01:01:25] *** Quits: NiKaN (sid385034@helmsley.irccloud.com) (*.net *.split)
[01:01:26] *** Quits: avar (avar@vm.nix.is) (*.net *.split)
[01:01:26] *** Quits: jinsun (~quassel@user/jinsun) (*.net *.split)
[01:01:26] *** Quits: Xgc (~Xgc@user/xgc) (*.net *.split)
[01:01:26] *** Quits: steve__ (~steve@ool-182c2aa4.dyn.optonline.net) (*.net *.split)
[01:01:26] *** Quits: |darc| (darc@darcserv.net) (*.net *.split)
[01:01:26] *** Quits: ryt (~ryt@precari.at) (*.net *.split)
[01:01:26] *** Quits: Byteflux (~byte@byteflux.net) (*.net *.split)
[01:01:26] *** Quits: j0bk_ (~j0bk@190.19.139.160) (*.net *.split)
[01:01:26] *** Quits: coc0nut (~coc0nut@user/coc0nut) (*.net *.split)
[01:01:26] *** Quits: Phil-Work (~phil@62.3.100.20) (*.net *.split)
[01:01:26] *** Quits: mcinglis (~mcinglis@user/mcinglis) (*.net *.split)
[01:01:26] *** Quits: qwedfg (~qwedfg@user/qwedfg) (*.net *.split)
[01:01:26] *** Quits: Brewster (~Brewster@185.145.156.241) (*.net *.split)
[01:01:26] *** Quits: asm (~alexander@user/asm) (*.net *.split)
[01:01:26] *** Quits: lm- (~lm-@vps-a26d080c.vps.ovh.net) (*.net *.split)
[01:01:26] *** Quits: mrkajetanp (~mrkajetan@88.98.245.28) (*.net *.split)
[01:01:26] *** Quits: jiffe (~jiffe@mail.nsab.us) (*.net *.split)
[01:01:26] *** Quits: leosilva (~leosilva@canonical/leosilva) (*.net *.split)
[01:01:26] *** Quits: pervaya (~pervaya@ip250.ip-51-83-183.eu) (*.net *.split)
[01:01:26] *** Quits: moberg (~moberg@luke.millenniumfalcon.org) (*.net *.split)
[01:01:26] *** Quits: johnnyreb (~tth@user/johnnyreb) (*.net *.split)
[01:01:26] *** Quits: arand (~arand@c-0a01235c.05-662-7570703.bbcust.telenor.se) (*.net *.split)
[01:01:26] *** Quits: sm2n (~sm2n@user/sm2n) (*.net *.split)
[01:01:26] *** Quits: rcf (rcf@iceland.sdf.org) (*.net *.split)
[01:01:26] *** Quits: PaulePanter (~paul@mail.gw90.de) (*.net *.split)
[01:01:26] *** Quits: Ryozuki (~Ryozuki@user/ryozuki) (*.net *.split)
[01:01:26] *** Quits: Trashlord (~trash@user/trashlord) (*.net *.split)
[01:01:26] *** Quits: nisstyre (~wes@user/nisstyre) (*.net *.split)
[01:01:26] *** Quits: Church (~aleph@pool-98-116-232-112.nycmny.fios.verizon.net) (*.net *.split)
[01:01:26] *** Quits: davidfetter (~davidfett@xvm-110-146.dc2.ghst.net) (*.net *.split)
[01:01:26] *** Quits: caze (~caze@user/caze) (*.net *.split)
[01:01:26] *** Quits: Cyp (~cyp@213.237.87.7) (*.net *.split)
[01:01:26] *** Quits: mdw (~root@159.65.86.163) (*.net *.split)
[01:01:26] *** Quits: shan (shan@cyblog/maintainer/shan) (*.net *.split)
[01:01:26] *** Quits: savy (~z@io.tl) (*.net *.split)
[01:01:26] *** Quits: avrdude (~avrdude@user/avrdude) (*.net *.split)
[01:01:26] *** Quits: Fish (~Fish@cartwheel.9grid.fr) (*.net *.split)
[01:01:29] *** Quits: aradesh (~aradesh@user/aradesh) (Quit: WeeChat 1.9.1)
[01:01:33] *** Joins: g0z (~gauze@entropy.tmok.com)
[01:01:37] *** Joins: davidfetter (~davidfett@xvm-110-146.dc2.ghst.net)
[01:01:37] *** Joins: savy (~z@io.tl)
[01:01:37] *** Joins: avar (avar@vm.nix.is)
[01:01:39] *** Joins: ryt (~ryt@precari.at)
[01:01:40] *** Joins: |darc| (darc@darcserv.net)
[01:01:41] *** Joins: agander_m (sid407952@id-407952.tinside.irccloud.com)
[01:01:46] *** Joins: Ryozuki (~Ryozuki@edgarluque.com)
[01:01:47] *** Joins: steve__ (~steve@ool-182c2aa4.dyn.optonline.net)
[01:01:56] *** Joins: rcf (rcf@iceland.sdf.org)
[01:01:57] *** Joins: nisstyre (~wes@li798-187.members.linode.com)
[01:01:58] *** Joins: asm (~alexander@burner.asm89.io)
[01:01:58] *** Joins: johnnyreb (~tth@013-240-158-163.dynamic.caiway.nl)
[01:02:02] *** Joins: lm- (~lm-@vps-a26d080c.vps.ovh.net)
[01:02:08] *** Joins: Fish (~Fish@cartwheel.9grid.fr)
[01:02:09] *** Joins: wilz (~wilz@modemcable036.177-131-66.mc.videotron.ca)
[01:02:10] *** Joins: Church (~aleph@pool-98-116-232-112.nycmny.fios.verizon.net)
[01:02:16] *** Joins: greyblue9 (sid500829@id-500829.ilkley.irccloud.com)
[01:02:18] *** Joins: dreamcat4 (uid157427@id-157427.hampstead.irccloud.com)
[01:02:20] *** Joins: j0bk (~j0bk@190.19.139.160)
[01:02:29] *** Joins: bjs (sid190364@id-190364.helmsley.irccloud.com)
[01:02:32] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[01:02:33] *** Joins: cengiz_io (sid223191@id-223191.ilkley.irccloud.com)
[01:02:34] *** Quits: nisstyre (~wes@li798-187.members.linode.com) (Signing in (nisstyre))
[01:02:34] *** Joins: nisstyre (~wes@user/nisstyre)
[01:02:42] *** Quits: bjs (sid190364@id-190364.helmsley.irccloud.com) (Changing host)
[01:02:42] *** Joins: bjs (sid190364@user/bjs)
[01:02:45] *** Quits: Ryozuki (~Ryozuki@edgarluque.com) (Changing host)
[01:02:45] *** Joins: Ryozuki (~Ryozuki@user/ryozuki)
[01:02:52] *** Joins: computerquip (sid423484@id-423484.lymington.irccloud.com)
[01:03:00] *** Quits: computerquip (sid423484@id-423484.lymington.irccloud.com) (Changing host)
[01:03:00] *** Joins: computerquip (sid423484@user/computerquip)
[01:03:06] *** Joins: Byteflux (~byte@byteflux.net)
[01:03:12] *** Joins: Xgc (~Xgc@user/xgc)
[01:03:18] *** Joins: NiKaN (sid385034@id-385034.helmsley.irccloud.com)
[01:03:20] *** Joins: mcinglis (~mcinglis@user/mcinglis)
[01:03:27] *** Joins: jinsun (~quassel@user/jinsun)
[01:03:28] *** Joins: nitrix (~nitrix@user/nitrix)
[01:03:29] *** Joins: moberg (~moberg@luke.millenniumfalcon.org)
[01:03:29] *** Joins: caze (~caze@user/caze)
[01:03:30] *** Joins: mrkajetanp (~mrkajetan@2a01:4b00:ea36:6c00:7994:941c:3f5d:2b88)
[01:03:31] *** Joins: lemonsnicks (~lemonsnic@cpc159519-perr18-2-0-cust114.19-1.cable.virginm.net)
[01:03:31] *** Joins: mdw (~root@159.65.86.163)
[01:03:32] *** Joins: Cyp (~cyp@213.237.87.7)
[01:03:32] *** Joins: DarthGandalf (user@znc/developer/DarthGandalf)
[01:03:32] *** Joins: coc0nut (~coc0nut@user/coc0nut)
[01:03:32] *** Joins: pervaya (~pervaya@2001:41d0:602:3007::641b:b74c)
[01:03:33] *** Joins: Trashlord (~trash@user/trashlord)
[01:03:34] *** Joins: leosilva (~leosilva@canonical/leosilva)
[01:03:34] *** Joins: sm2n (~sm2n@user/sm2n)
[01:03:39] *** Joins: jiffe (~jiffe@mail.nsab.us)
[01:03:45] *** Joins: shan (shan@cyblog/maintainer/shan)
[01:03:52] *** Joins: qwedfg (~qwedfg@user/qwedfg)
[01:04:42] *** Joins: Zambyte (~Zambyte@cpe-104-228-60-14.nycap.res.rr.com)
[01:06:42] *** Joins: PaulePanter (~paul@mail.gw90.de)
[01:06:42] *** Joins: avrdude (~avrdude@user/avrdude)
[01:06:46] *** Joins: arand (~arand@c-0a01235c.05-662-7570703.bbcust.telenor.se)
[01:10:28] *** Parts: Ecco_ (~user@lfbn-idf1-1-725-214.w86-245.abo.wanadoo.fr) ()
[01:15:09] *** Joins: Phil-Work (~phil@62.3.100.20)
[01:16:19] *** Quits: gh34 (~textual@cpe-184-58-181-106.wi.res.rr.com) (Quit: Textual IRC Client: www.textualapp.com)
[01:23:54] <floatcomplex> undefined behaviour is not defined to not flood the facility with deadly neurotoxin
[01:24:59] *** Joins: Brewster (~Brewster@185.145.156.241)
[01:25:33] *** Quits: dutch (~DutchIngr@user/dutch) (Quit: WeeChat 3.3)
[01:28:30] <dragonmaster> indeed
[01:28:52] <dragonmaster> running your buggy code on GladOS is probably not a good idea
[01:31:03] *** Joins: pnbeast (~pnbeast@2601:140:4280:3c90::1)
[01:33:10] *** Joins: davidfetter_work (~davidfett@2601:640:4100:7e0:a44a:73c7:3045:4868)
[01:34:24] *** Joins: reumeth (~reumeth@user/reumeth)
[01:36:22] *** Joins: dutch (~DutchIngr@user/dutch)
[01:38:11] *** Quits: davidfetter_work (~davidfett@2601:640:4100:7e0:a44a:73c7:3045:4868) (Ping timeout: 264 seconds)
[01:42:48] <tk> Feuermagier: Questions regarding exploitation of buggy binaries are not really topical here. This channel specialises in dealing with working C programs and not C programs which invoke UB.
[01:43:05] <tk> I am not sure where you would have better luck on this network though.
[01:43:29] <tk> Try /msg alis help
[01:43:59] <Feuermagier> tk, Yeak. #asm and #c seem to fit the most. Already found what I needed for this assignment I think. Thx for the pointer.
[01:46:12] *** Quits: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl) (Quit: leaving)
[01:46:19] *** Joins: Raguile (~Raguile@user/raguile)
[01:46:19] *** Parts: Raguile (~Raguile@user/raguile) ()
[01:49:11] <nitrix> By the time you intentionally write code that is UB, chances are you know exactly what you're doing and don't need the help of someone on IRC, so it's sort of a catch-22 where someone asking most definitively shouldn't be getting help.
[01:49:17] *** Quits: LuKaRo (~LuKaRo@p4fc32951.dip0.t-ipconnect.de) (Ping timeout: 264 seconds)
[01:49:48] <nitrix> Not in a gatekeeping sense, but in a "you're only becoming more dangerous to yourself", kind of way.
[01:50:23] <nitrix> (The cryptography field has a very similar problem.)
[01:51:18] *** Joins: LuKaRo (~LuKaRo@p5deda401.dip0.t-ipconnect.de)
[01:52:02] *** Joins: DPA (~DPA@75-128-16-94.static.cable.fcom.ch)
[01:53:04] *** Quits: Akuli (~Akuli@87-94-110-25.bb.dnainternet.fi) (Quit: Leaving)
[01:55:21] <nitrix> It's also that it's quite difficult to answer correctly to these questions as there's just so many details involved. Doing your due diligence is time consuming and amounts to doing the work of the other person.
[01:57:41] *** Quits: Laurenceb (~Laurenceb@56.184.147.147.dyn.plus.net) (Quit: Client closed)
[01:58:07] *** Quits: alch (~alch@151.46.45.246) (Read error: Connection reset by peer)
[01:59:45] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Quit: sord937)
[02:01:36] <Feuermagier> nitrix, often it's just a keyword or technique I am missing the name for
[02:02:02] *** Joins: alch (~alch@151.46.54.223)
[02:02:03] <Feuermagier> like, someone mentioned ROP in #asm and that was all I needed. Now I have something to google
[02:04:12] *** vinleod is now known as vdamewood
[02:05:18] *** Joins: davidfetter_work (~davidfett@c-73-241-222-148.hsd1.ca.comcast.net)
[02:06:47] *** Quits: mrig (~mrig@user/mrig) (Quit: WeeChat 3.0)
[02:06:56] *** Quits: reumeth (~reumeth@user/reumeth) (Ping timeout: 258 seconds)
[02:07:06] *** Quits: rgrinberg (~textual@201.182.226.118) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[02:09:14] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[02:10:10] *** Quits: nyah (~nyah@bcdcb6e3.skybroadband.com) (Ping timeout: 260 seconds)
[02:11:11] *** Quits: pony (~ed@smol/hors) (Quit: WeeChat 3.3)
[02:14:50] *** Quits: davidfetter_work (~davidfett@c-73-241-222-148.hsd1.ca.comcast.net) (Ping timeout: 244 seconds)
[02:19:16] *** Joins: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com)
[02:19:38] *** Joins: pony (~ed@smol/hors)
[02:28:30] *** Quits: brelod (~me@90.244.150.142) (Quit: leaving)
[02:28:48] *** Joins: Shimoda (~Shimoda@151.21.153.86)
[02:29:12] *** Quits: SGautam (uid286066@id-286066.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[02:30:27] *** Joins: magic_ninja_work (~sparkie1@4.4.16.52)
[02:32:50] *** Quits: pizdets (~pizdets@183.182.115.246) (Ping timeout: 260 seconds)
[02:33:04] *** Quits: Shimoda (~Shimoda@151.21.153.86) (Client Quit)
[02:33:46] *** Joins: pizdets (~pizdets@183.182.114.206)
[02:34:43] *** Joins: no-n (~ed@smol/hors)
[02:37:58] *** Quits: korg815 (~korg815@user/korg815) (Ping timeout: 260 seconds)
[02:38:38] *** Quits: LucaTM (~LucaTM@user/lucatm) (Quit: Textual IRC Client: www.textualapp.com)
[02:43:43] *** Joins: korg815 (~korg815@bras-base-london1611w-grc-29-70-29-5-135.dsl.bell.ca)
[02:48:16] *** Quits: ravan (~ravan@user/ravan) (Remote host closed the connection)
[02:48:36] *** Joins: ravan (~ravan@user/ravan)
[02:50:43] *** Joins: pert (~pert@fsf/member/pert)
[02:52:14] *** Quits: pony (~ed@smol/hors) (Quit: WeeChat 3.3)
[02:52:23] *** no-n is now known as pony
[02:53:42] *** Quits: markb1 (~markb1@2600:1700:eb40:7ecf:4def:4e95:4385:6486) (Quit: Leaving)
[02:54:30] *** Quits: Wulf (~Wulf@user/wulf) (Ping timeout: 260 seconds)
[02:55:57] *** Joins: Wulf (~Wulf@user/wulf)
[02:57:33] *** Joins: johnjay (~pi@192.142.100.50)
[02:58:05] *** Quits: lm- (~lm-@vps-a26d080c.vps.ovh.net) (Quit: WeeChat 3.2)
[02:58:19] *** Joins: lm- (~lm-@vps-a26d080c.vps.ovh.net)
[02:58:48] *** Joins: Xeha (~Xeha@dynamic-82-220-88-142.ftth.solnet.ch)
[02:59:54] *** Quits: Crescendo (~Crescendo@user/crescendo) (Ping timeout: 260 seconds)
[03:00:29] *** Joins: Crescendo (~Crescendo@user/crescendo)
[03:01:57] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
[03:04:40] *** Joins: davidfetter_work (~davidfett@c-73-241-222-148.hsd1.ca.comcast.net)
[03:09:34] *** Quits: davidfetter_work (~davidfett@c-73-241-222-148.hsd1.ca.comcast.net) (Ping timeout: 252 seconds)
[03:10:44] *** Joins: rgrinberg (~textual@ip11-246-50-179.ct.co.cr)
[03:11:40] *** Quits: magic_ninja_work (~sparkie1@4.4.16.52) (Ping timeout: 244 seconds)
[03:14:24] *** Quits: Crescendo (~Crescendo@user/crescendo) (Read error: Connection reset by peer)
[03:15:16] *** Joins: Crescendo (~Crescendo@user/crescendo)
[03:15:46] *** Quits: random-nick (~random-ni@87.116.165.220) (Quit: quit)
[03:17:01] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.2)
[03:18:32] *** Joins: plastico (~plastico@neomutt/plastico)
[03:20:50] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[03:20:50] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[03:20:50] *** Joins: wroathe (~wroathe@user/wroathe)
[03:21:32] *** Joins: davidfetter_work (~davidfett@c-73-241-222-148.hsd1.ca.comcast.net)
[03:21:57] *** Joins: dsrt^ (~dsrt@wsip-68-227-92-38.mc.at.cox.net)
[03:22:46] *** Quits: mahmutov (~mahmutov@37.155.0.45) (Ping timeout: 260 seconds)
[03:23:53] *** Quits: johnjay (~pi@192.142.100.50) (Ping timeout: 265 seconds)
[03:25:58] *** Joins: johnjay (~pi@192.142.100.50)
[03:26:18] *** Quits: davidfetter_work (~davidfett@c-73-241-222-148.hsd1.ca.comcast.net) (Ping timeout: 265 seconds)
[03:27:33] *** Joins: quartz (~quartz@user/quartz)
[03:28:47] *** Quits: boB_K7IQ (~boB_K7IQ@152.44.147.180) ()
[03:29:46] *** Quits: koo6 (~koo6@89-24-13-235.customers.tmcz.cz) (Ping timeout: 260 seconds)
[03:32:53] *** Joins: koo6 (~koo6@89-24-13-235.customers.tmcz.cz)
[03:33:00] *** Quits: koo6 (~koo6@89-24-13-235.customers.tmcz.cz) (Remote host closed the connection)
[03:33:06] *** Joins: markb1 (~markb1@2600:1700:eb40:7ecf:def0:6996:2bb9:77)
[03:37:43] *** Joins: chenqisu12 (~peiycae@183.217.203.91)
[03:37:46] *** Joins: no-n (~ed@smol/hors)
[03:38:44] *** Quits: pony (~ed@smol/hors) (Quit: WeeChat 3.3)
[03:40:16] *** Joins: MrFantastik (~f@2601:645:8100:cda0:e5a0:d55b:8dd3:719e)
[03:40:22] *** Joins: danielcamiel (~danielcam@user/danielcamiel)
[03:40:39] *** Quits: danielcamiel (~danielcam@user/danielcamiel) (Remote host closed the connection)
[03:40:56] *** Quits: strajder (~strajder@user/strajder) (Quit: leaving)
[03:41:02] *** Joins: danielcamiel (~danielcam@user/danielcamiel)
[03:45:29] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[03:45:50] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 260 seconds)
[03:45:54] *** Joins: ferdna (~ferdna@user/ferdna)
[03:46:15] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.3)
[03:46:17] *** Joins: siwica`` (~user@p200300f6170bca0065951339c2affdf8.dip0.t-ipconnect.de)
[03:46:49] *** Lord_of_Life_ is now known as Lord_of_Life
[03:50:49] *** Quits: siwica` (~user@p200300f6170bca00fe3370c3d3f4e0b3.dip0.t-ipconnect.de) (Ping timeout: 258 seconds)
[03:51:57] *** Quits: Church (~aleph@pool-98-116-232-112.nycmny.fios.verizon.net) (Quit: WeeChat info:version)
[03:52:16] *** Joins: Church (~aleph@pool-98-116-232-112.nycmny.fios.verizon.net)
[03:55:38] *** Joins: FlipFlop (~FlipFlop@user/fl1pfl0p)
[04:06:10] *** Joins: davidfetter_work (~davidfett@c-73-241-222-148.hsd1.ca.comcast.net)
[04:06:21] *** Quits: Player001 (~Player001@user/player001) (Quit: Quitting)
[04:11:08] *** Quits: davidfetter_work (~davidfett@c-73-241-222-148.hsd1.ca.comcast.net) (Ping timeout: 258 seconds)
[04:16:25] *** Quits: supajerm_ (~supajerm@gateway/vpn/pia/supajerm) (Remote host closed the connection)
[04:18:41] *** Quits: AbleBacon (~AbleBacon@user/AbleBacon) (Read error: Connection reset by peer)
[04:23:12] *** Quits: korg815 (~korg815@bras-base-london1611w-grc-29-70-29-5-135.dsl.bell.ca) (Quit: WeeChat 2.8)
[04:23:49] *** Quits: krux02 (~krux02@p200300e817076e005ebbf251e029334f.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[04:26:45] *** Joins: korg815 (~korg815@user/korg815)
[04:30:32] *** Quits: mad_enz (~mad_enz@cpe00508b114c3e-cm788df7e75290.cpe.net.fido.ca) (Remote host closed the connection)
[04:33:02] *** Joins: Player001 (~Player001@user/player001)
[04:38:50] *** Quits: slidercrank (~slidercra@user/slidercrank) (Ping timeout: 260 seconds)
[04:39:14] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[04:43:36] *** Joins: kurahaupo (~kurahaupo@pa49-181-187-56.pa.nsw.optusnet.com.au)
[04:44:24] *** Joins: siwica``` (~user@p200300f6170bca00993ed6fb90bd380f.dip0.t-ipconnect.de)
[04:45:31] *** Quits: brdb (~alarm@24.61.226.255) (Quit: WeeChat 3.2.1)
[04:45:52] *** Joins: mad_enz (~mad_enz@cpe00508b114c3e-cm788df7e75290.cpe.net.fido.ca)
[04:45:57] *** Quits: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net) (Remote host closed the connection)
[04:46:12] *** Joins: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net)
[04:48:34] *** Quits: siwica`` (~user@p200300f6170bca0065951339c2affdf8.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[04:50:21] *** Joins: kurahaupo_ (~kurahaupo@220-245-23-126.static.tpgi.com.au)
[04:52:25] *** Quits: kurahaupo (~kurahaupo@pa49-181-187-56.pa.nsw.optusnet.com.au) (Ping timeout: 252 seconds)
[04:55:30] *** Joins: davidfetter_work (~davidfett@c-73-241-222-148.hsd1.ca.comcast.net)
[04:59:07] *** Quits: kurahaupo_ (~kurahaupo@220-245-23-126.static.tpgi.com.au) (Ping timeout: 244 seconds)
[05:00:33] *** Quits: davidfetter_work (~davidfett@c-73-241-222-148.hsd1.ca.comcast.net) (Ping timeout: 265 seconds)
[05:01:02] *** Joins: kurahaupo (~kurahaupo@220-245-23-126.static.tpgi.com.au)
[05:02:45] *** Joins: The_Jag (~The_Jag@host-87-17-20-218.retail.telecomitalia.it)
[05:03:16] *** Quits: earnestly (~earnest@user/earnestly) (Ping timeout: 258 seconds)
[05:04:52] *** Joins: harveypwca (~harveypwc@2601:246:c180:a570:3828:d8:e523:3f67)
[05:05:10] *** Quits: The_Jag_ (~The_Jag@host-80-182-37-74.retail.telecomitalia.it) (Ping timeout: 260 seconds)
[05:06:22] *** Quits: KevinX (~KevinX@c-71-200-222-150.hsd1.fl.comcast.net) (Ping timeout: 260 seconds)
[05:07:06] *** Quits: gce108 (~gce@user/gce108) (Ping timeout: 258 seconds)
[05:07:57] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[05:14:31] *** Quits: Sheilong (uid293653@id-293653.ilkley.irccloud.com) ()
[05:15:08] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.3)
[05:18:55] *** Quits: pert (~pert@fsf/member/pert) (Ping timeout: 265 seconds)
[05:23:10] *** Quits: jetchisel (jetchisel@user/jetchisel) (Ping timeout: 260 seconds)
[05:28:20] *** Joins: seninha (~seninha@user/seninha)
[05:30:01] *** Quits: nun (~nun@178.115.236.156.static.drei.at) (Quit: ZNC - http://znc.in)
[05:30:01] *** Quits: deavmi (~tbk@user/deavmi) (Read error: Connection reset by peer)
[05:30:15] *** Joins: deavmi (~tbk@user/deavmi)
[05:31:42] *** Quits: BUSY (~BUSY@user/busy) (Remote host closed the connection)
[05:31:51] *** Joins: nun (~nun@178.115.236.156.static.drei.at)
[05:32:09] *** Quits: llh (~llh@user/llh) (Quit: :::: ( UPP ) ::::)
[05:33:14] *** Joins: KevinX (~KevinX@94.140.8.84)
[05:33:54] *** Quits: banc (banc@gateway/vpn/airvpn/banc) (Ping timeout: 265 seconds)
[05:34:35] *** Quits: zsoltiv_ (~zsoltiv@fibhost-67-12-35.fibernet.hu) (Ping timeout: 264 seconds)
[05:36:52] *** Joins: BUSY (~BUSY@user/busy)
[05:37:37] *** Joins: zsoltiv_ (~zsoltiv@fibhost-67-12-35.fibernet.hu)
[05:37:53] *** Quits: KevinX (~KevinX@94.140.8.84) (Ping timeout: 244 seconds)
[05:40:24] *** Joins: davidfetter_work (~davidfett@2601:640:4100:7e0:5c2a:5b47:b8ff:2b86)
[05:40:53] *** Joins: pony (~ed@smol/hors)
[05:41:18] *** Quits: no-n (~ed@smol/hors) (Quit: WeeChat 3.0.1)
[05:42:03] *** Quits: cmbengue (~Thunderbi@207.191.249.160) (Quit: Thanks, see you later.)
[05:42:54] *** Quits: dsrt^ (~dsrt@wsip-68-227-92-38.mc.at.cox.net) (Remote host closed the connection)
[05:44:59] *** Joins: KevinX (~KevinX@94.140.8.81)
[05:45:49] *** Quits: davidfetter_work (~davidfett@2601:640:4100:7e0:5c2a:5b47:b8ff:2b86) (Ping timeout: 258 seconds)
[05:48:53] *** Quits: NiKaN (sid385034@id-385034.helmsley.irccloud.com) (Ping timeout: 258 seconds)
[05:48:58] *** Joins: ppk (~ppk@93.155.140.21)
[05:49:16] *** Quits: agander_m (sid407952@id-407952.tinside.irccloud.com) (Ping timeout: 245 seconds)
[05:49:30] *** Quits: greyblue9 (sid500829@id-500829.ilkley.irccloud.com) (Ping timeout: 260 seconds)
[05:49:30] *** Quits: dOhtem (uid524096@user/dohtem) (Ping timeout: 260 seconds)
[05:49:39] *** Quits: bjs (sid190364@user/bjs) (Read error: Connection reset by peer)
[05:50:43] *** Quits: illustris (sid211748@ilkley.irccloud.com) (Ping timeout: 252 seconds)
[05:50:48] *** Quits: noahmg123 (sid89117@ilkley.irccloud.com) (Read error: Connection reset by peer)
[05:50:49] *** Quits: dmlloyd (sid331705@redhat/dmlloyd) (Ping timeout: 265 seconds)
[05:51:04] *** Quits: wangledorf (sid505185@ilkley.irccloud.com) (Read error: Connection reset by peer)
[05:51:04] *** Quits: psb (sid500598@user/psb) (Read error: Connection reset by peer)
[05:51:08] *** Joins: agander_m (sid407952@tinside.irccloud.com)
[05:51:09] *** Joins: dOhtem (uid524096@tinside.irccloud.com)
[05:51:09] *** Joins: bjs (sid190364@user/bjs)
[05:51:33] *** dOhtem is now known as Guest407
[05:51:48] *** Joins: NiKaN (sid385034@helmsley.irccloud.com)
[05:51:50] *** Quits: dreamcat4 (uid157427@id-157427.hampstead.irccloud.com) (Ping timeout: 260 seconds)
[05:52:10] *** Joins: banc (banc@gateway/vpn/airvpn/banc)
[05:52:24] *** Joins: dreamcat4 (uid157427@id-157427.hampstead.irccloud.com)
[05:52:30] *** Joins: greyblue9 (sid500829@id-500829.ilkley.irccloud.com)
[05:52:55] *** Joins: noahmg123 (sid89117@id-89117.ilkley.irccloud.com)
[05:52:57] *** Quits: Guest407 (uid524096@tinside.irccloud.com) (Client Quit)
[05:53:06] *** Joins: dmlloyd (sid331705@redhat/dmlloyd)
[05:53:07] *** Joins: Guest407 (uid524096@id-524096.tinside.irccloud.com)
[05:53:08] *** Quits: Guest407 (uid524096@id-524096.tinside.irccloud.com) (Client Quit)
[05:53:14] *** Joins: psb (sid500598@user/psb)
[05:53:16] *** Joins: wangledorf (sid505185@id-505185.ilkley.irccloud.com)
[05:53:35] *** Quits: Rounin (~david@84.212.130.215) (Ping timeout: 260 seconds)
[05:53:36] *** Joins: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net)
[05:53:54] *** Joins: cmbengue (~Thunderbi@207.191.249.160)
[05:54:20] *** Joins: illustris (sid211748@id-211748.ilkley.irccloud.com)
[05:54:45] *** Quits: Psybur (~Psybur@mobile-166-170-29-82.mycingular.net) (Remote host closed the connection)
[05:56:08] *** Joins: magic_ninja_work (~sparkie1@4.4.16.52)
[05:56:37] *** Joins: dohtem (uid524096@user/dohtem)
[05:57:42] *** Quits: alch (~alch@151.46.54.223) (Read error: Connection reset by peer)
[05:58:50] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Quit: Ex-Chat)
[05:59:42] *** Joins: davidfetter_work (~davidfett@c-73-241-222-148.hsd1.ca.comcast.net)
[06:00:14] *** Quits: Albright (~Albright@2001:19f0:8001:ca4:e869:f825:7a69:95be) (Quit: ZNC 1.8.2 - https://znc.in)
[06:00:27] *** Joins: Albright (~Albright@149.28.13.173)
[06:01:32] *** Quits: psb (sid500598@user/psb) (Ping timeout: 258 seconds)
[06:01:55] *** Quits: greyblue9 (sid500829@id-500829.ilkley.irccloud.com) (Ping timeout: 258 seconds)
[06:02:11] *** Quits: illustris (sid211748@id-211748.ilkley.irccloud.com) (Ping timeout: 264 seconds)
[06:02:11] *** Quits: noahmg123 (sid89117@id-89117.ilkley.irccloud.com) (Ping timeout: 264 seconds)
[06:02:16] *** Quits: dmlloyd (sid331705@redhat/dmlloyd) (Ping timeout: 252 seconds)
[06:02:18] *** Quits: dreamcat4 (uid157427@id-157427.hampstead.irccloud.com) (Ping timeout: 258 seconds)
[06:02:18] *** Quits: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com) (Ping timeout: 258 seconds)
[06:02:18] *** Quits: computerquip (sid423484@user/computerquip) (Ping timeout: 258 seconds)
[06:02:20] *** Quits: cengiz_io (sid223191@id-223191.ilkley.irccloud.com) (Ping timeout: 260 seconds)
[06:02:24] *** Joins: alch (~alch@151.44.48.31)
[06:02:41] *** Quits: dohtem (uid524096@user/dohtem) (Ping timeout: 258 seconds)
[06:02:41] *** Quits: wangledorf (sid505185@id-505185.ilkley.irccloud.com) (Ping timeout: 258 seconds)
[06:02:54] *** Joins: noahmg123 (sid89117@ilkley.irccloud.com)
[06:03:02] *** Joins: wangledorf (sid505185@ilkley.irccloud.com)
[06:03:04] *** Joins: dohtem (uid524096@user/dohtem)
[06:03:09] *** Joins: whatsupdoc (uid509081@hampstead.irccloud.com)
[06:03:09] *** Joins: dreamcat4 (uid157427@hampstead.irccloud.com)
[06:03:14] *** Joins: cengiz_io (sid223191@ilkley.irccloud.com)
[06:03:38] *** Joins: computerquip (sid423484@user/computerquip)
[06:04:11] *** Joins: greyblue9 (sid500829@ilkley.irccloud.com)
[06:04:13] *** Joins: psb (sid500598@user/psb)
[06:04:16] *** Joins: dmlloyd (sid331705@redhat/dmlloyd)
[06:04:36] *** Quits: davidfetter_work (~davidfett@c-73-241-222-148.hsd1.ca.comcast.net) (Ping timeout: 258 seconds)
[06:05:13] *** Joins: illustris (sid211748@ilkley.irccloud.com)
[06:08:22] *** Quits: nostar (~nostar@2601:406:4100:34d:8f4:5ea7:30b2:b7e6) (Quit: Leaving)
[06:09:06] *** Joins: nostar (~nostar@45.14.195.89)
[06:10:32] <floatcomplex> is it ID to cast two pointers to uintptr_t or whatever, do a bitwise and on one of them, and compare them, or is that always UB
[06:14:03] <fizzie> I don't think there's anything UB about that. In addition to the special pointer round-tripping property, `uintptr_t` is still also just an ordinary integer type. If you've got two values of an unsigned integer type, surely you can do that (bitwise and + comparison), no matter where the values originally came from.
[06:14:24] <fizzie> (It doesn't need to tell you anything useful about the pointers, but still.)
[06:16:12] *** Joins: mahmutov (~mahmutov@37.155.0.45)
[06:16:51] <floatcomplex> fizzie: the imagined use case is where i have some array of sentinel values of the correct type, which is a power of two, and i want to mask the low bits off and compare the rest to see if a pointer points anywhere into that array of sentinel values with a single comparison
[06:20:04] <fizzie> Right. I mean, it isn't guaranteed to *work* for that (because in general the pointer-to/from-uintptr_t conversion could be *any* arbitrary bijection between valid pointer values and a subset of uintptr_t values), but that wouldn't make it UB.
[06:21:28] *** Joins: venomega (~venomega@152.206.214.64)
[06:21:57] *** Quits: superboot (~agentgasm@user/superboot) (Quit: leaving)
[06:26:42] *** Joins: ElectricSheep (~esheep_zn@pool-100-19-29-200.phlapa.fios.verizon.net)
[06:26:58] *** Quits: magic_ninja_work (~sparkie1@4.4.16.52) (Ping timeout: 244 seconds)
[06:33:07] *** Quits: nostar (~nostar@45.14.195.89) (Quit: Leaving)
[06:33:50] *** Joins: nostar (~nostar@68.51.221.108)
[06:44:21] *** Joins: kts (~kts@103.73.237.77)
[06:45:53] *** Quits: ppk (~ppk@93.155.140.21) (Quit: WeeChat 3.3)
[06:54:36] *** Joins: davidfetter_work (~davidfett@c-73-241-222-148.hsd1.ca.comcast.net)
[06:57:41] *** Joins: magic_ninja_work (~sparkie1@4.4.16.52)
[06:58:04] *** Quits: whatsupdoc (uid509081@hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[06:58:58] *** Quits: juliopcrj (~juliopcrj@177.44.227.40) (Quit: Leaving)
[06:59:28] *** Quits: davidfetter_work (~davidfett@c-73-241-222-148.hsd1.ca.comcast.net) (Ping timeout: 252 seconds)
[07:00:57] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 258 seconds)
[07:01:08] *** Quits: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[07:03:08] *** Quits: magic_ninja_work (~sparkie1@4.4.16.52) (Ping timeout: 244 seconds)
[07:05:12] *** Quits: kurahaupo (~kurahaupo@220-245-23-126.static.tpgi.com.au) (Ping timeout: 244 seconds)
[07:05:33] *** Quits: siwica``` (~user@p200300f6170bca00993ed6fb90bd380f.dip0.t-ipconnect.de) (Ping timeout: 258 seconds)
[07:08:50] *** Quits: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be) (Ping timeout: 260 seconds)
[07:10:52] *** Joins: davidfetter_work (~davidfett@c-73-241-222-148.hsd1.ca.comcast.net)
[07:12:17] *** Joins: jetchisel (jetchisel@user/jetchisel)
[07:15:24] *** Quits: davidfetter_work (~davidfett@c-73-241-222-148.hsd1.ca.comcast.net) (Ping timeout: 265 seconds)
[07:17:57] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[07:22:36] *** Quits: kts (~kts@103.73.237.77) (Ping timeout: 250 seconds)
[07:27:26] *** Joins: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net)
[07:28:14] *** Joins: llh (~llh@user/llh)
[07:34:55] *** Joins: kts (~kts@103.73.237.38)
[07:36:02] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.3)
[07:36:31] *** Joins: supakeen (~user@python/site-packages/supakeen)
[07:40:09] *** Joins: Dunce (~Nick@51.158.144.32)
[07:44:03] *** Joins: davidfetter_work (~davidfett@c-73-241-222-148.hsd1.ca.comcast.net)
[07:44:16] *** Quits: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net) (Ping timeout: 258 seconds)
[07:49:05] *** Quits: davidfetter_work (~davidfett@c-73-241-222-148.hsd1.ca.comcast.net) (Ping timeout: 260 seconds)
[07:49:40] *** Quits: pulse (~pulse@user/pulse) (Ping timeout: 260 seconds)
[07:50:24] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[07:52:21] *** Quits: Dunce (~Nick@51.158.144.32) (Quit: Leaving)
[07:52:33] *** Joins: kurahaupo (~kurahaupo@220-245-23-126.static.tpgi.com.au)
[07:52:44] *** Quits: danielcamiel (~danielcam@user/danielcamiel) (Ping timeout: 244 seconds)
[07:54:18] *** Joins: Dunce (~Nick@51.158.144.32)
[07:54:42] *** Dunce is now known as Guest1019
[07:56:51] *** Quits: kurahaupo (~kurahaupo@220-245-23-126.static.tpgi.com.au) (Ping timeout: 244 seconds)
[07:57:42] *** Joins: riksteri (riksteri@gateway/vpn/airvpn/riksteri)
[07:57:55] *** Joins: kurahaupo (~kurahaupo@pa49-181-167-244.pa.nsw.optusnet.com.au)
[07:59:13] *** Joins: Guest8086 (~Guest80@S01069050ca4e3573.cg.shawcable.net)
[08:00:23] *** Quits: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br) (Ping timeout: 264 seconds)
[08:03:47] *** Quits: kurahaupo (~kurahaupo@pa49-181-167-244.pa.nsw.optusnet.com.au) (Read error: Connection reset by peer)
[08:03:52] *** Joins: kurahaupo_ (~kurahaupo@220-245-23-126.static.tpgi.com.au)
[08:06:04] *** Guest1019 is now known as Dunce
[08:08:18] *** Quits: Dunce (~Nick@51.158.144.32) (Quit: Leaving)
[08:10:32] *** Quits: koffeinfriedhof (~koffeinfr@ubuntuusers/moderation/koffeinfriedhof) (Quit: WeeChat 3.3)
[08:10:49] *** Quits: Echoz (~chris@user/echoz) (Quit: WeeChat 3.0.1)
[08:11:31] *** Joins: koffeinfriedhof (~koffeinfr@ubuntuusers/moderation/koffeinfriedhof)
[08:12:21] *** Joins: Echoz (~chris@user/echoz)
[08:13:01] *** Joins: Dunce (~Dunce@51.158.144.32)
[08:14:06] *** Quits: korg815 (~korg815@user/korg815) (Quit: WeeChat 2.8)
[08:14:32] *** Quits: Sadale (~Sadale@user/sadale) (Quit: tawa pona!)
[08:15:41] *** Joins: Sadale (~Sadale@user/sadale)
[08:18:58] *** Quits: quartz (~quartz@user/quartz) (Quit: WeeChat 3.3)
[08:20:50] *** Joins: davidfetter_work (~davidfett@c-73-241-222-148.hsd1.ca.comcast.net)
[08:24:22] *** Joins: aniruddha (uid340443@id-340443.ilkley.irccloud.com)
[08:30:06] *** Quits: davidfetter_work (~davidfett@c-73-241-222-148.hsd1.ca.comcast.net) (Ping timeout: 245 seconds)
[08:38:08] *** Joins: presonic (~presonic@111-22-237-24.gci.net)
[08:38:59] *** Quits: Dunce (~Dunce@51.158.144.32) (Quit: Leaving)
[08:39:01] *** Quits: zsoltiv_ (~zsoltiv@fibhost-67-12-35.fibernet.hu) (Ping timeout: 265 seconds)
[08:39:50] *** Quits: highrate (~presonic@111-22-237-24.gci.net) (Ping timeout: 260 seconds)
[08:44:41] *** presonic is now known as highrate
[08:46:53] *** Joins: davidfetter_work (~davidfett@c-73-241-222-148.hsd1.ca.comcast.net)
[08:47:15] *** Quits: karakedi (~eAC53C340@user/karakedi) (Remote host closed the connection)
[08:49:59] *** Quits: Zambyte (~Zambyte@cpe-104-228-60-14.nycap.res.rr.com) (Quit: Lost terminal)
[08:50:05] *** Joins: Dunce (~Dunce@51.158.144.32)
[08:51:07] *** Quits: davidfetter_work (~davidfett@c-73-241-222-148.hsd1.ca.comcast.net) (Ping timeout: 244 seconds)
[08:51:30] *** Joins: smallvil_ (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[08:58:40] *** Joins: segnior (segnior@user/segnior)
[08:58:43] *** Joins: dyeplexer (~dyeplexer@user/dyeplexer)
[08:59:56] *** Joins: juliandroske (~root@223.104.39.69)
[09:03:01] <floatcomplex> fizzie: i think you could static_assert that it would work, in a given inplementation
[09:08:30] *** Quits: juliandroske (~root@223.104.39.69) (Read error: Connection reset by peer)
[09:13:49] *** Quits: Dunce (~Dunce@51.158.144.32) (Quit: Leaving)
[09:15:17] *** Joins: Dunce (~Dunce@51.158.144.32)
[09:15:41] *** Dunce is now known as Guest6209
[09:16:05] *** Quits: Guest6209 (~Dunce@51.158.144.32) (Client Quit)
[09:16:22] *** Joins: User2 (~Dunce@51.158.144.32)
[09:17:29] *** User2 is now known as Dunce
[09:18:08] *** Quits: skapata (~Skapata@user/skapata) (Read error: Connection reset by peer)
[09:18:19] *** Quits: Dunce (~Dunce@51.158.144.32) (Client Quit)
[09:18:37] *** Quits: fossforus (~stan@99-173-128-32.lightspeed.rlghnc.sbcglobal.net) (Ping timeout: 252 seconds)
[09:18:59] *** Joins: Dunce (~Dunce@gateway/tor-sasl/dunce)
[09:24:34] *** Quits: ckdCreations (~ckdCreati@147.55.130.37) (Read error: Connection reset by peer)
[09:24:53] *** Joins: NEYi_ (~NEYi@109.251.216.38)
[09:26:34] *** Joins: ckdCreations (~ckdCreati@147.55.133.134)
[09:27:46] *** Quits: NEYi (~NEYi@109.251.216.38) (Ping timeout: 258 seconds)
[09:34:01] *** Quits: zmt00 (~zmt00@user/zmt00) (Ping timeout: 252 seconds)
[09:34:26] *** Quits: harveypwca (~harveypwc@2601:246:c180:a570:3828:d8:e523:3f67) (Quit: Leaving)
[09:34:26] *** Joins: davidfetter_work (~davidfett@c-73-241-222-148.hsd1.ca.comcast.net)
[09:35:19] *** Quits: ravan (~ravan@user/ravan) (Quit: Leaving)
[09:35:53] <kkd> iirc round trip is only allowed with void *
[09:36:32] <kkd> atleast according to the standard (in real life nothing useful can be done if you stick to following the standard by word).
[09:39:22] *** Quits: davidfetter_work (~davidfett@c-73-241-222-148.hsd1.ca.comcast.net) (Ping timeout: 260 seconds)
[09:44:08] *** Joins: reumeth (~reumeth@user/reumeth)
[09:47:08] *** Quits: rgrinberg (~textual@ip11-246-50-179.ct.co.cr) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[09:58:49] *** Quits: alch (~alch@151.44.48.31) (Read error: Connection reset by peer)
[10:00:53] *** Joins: dmaroo (~dhruv@2409:4070:460b:9408:8e30:2acf:1083:9872)
[10:02:48] *** Joins: alch (~alch@151.46.82.76)
[10:04:56] *** Quits: teepee (~teepee@openscad/teepee) (Remote host closed the connection)
[10:07:15] *** Joins: teepee (~teepee@openscad/teepee)
[10:09:05] *** Quits: shan (shan@cyblog/maintainer/shan) (Ping timeout: 260 seconds)
[10:15:12] *** Quits: kurahaupo_ (~kurahaupo@220-245-23-126.static.tpgi.com.au) (Ping timeout: 265 seconds)
[10:17:21] <floatcomplex> idk if this requires it to round trip
[10:17:22] *** Joins: elkalamar_ (elkalamar@gateway/vpn/airvpn/elkalamar)
[10:18:09] *** Quits: Guest8086 (~Guest80@S01069050ca4e3573.cg.shawcable.net) (Quit: Connection closed)
[10:19:22] *** Joins: elkalamar__ (elkalamar@gateway/vpn/airvpn/elkalamar)
[10:19:47] *** Joins: shan (shan@cyblog/maintainer/shan)
[10:20:10] *** Quits: elkalamar (elkalamar@gateway/vpn/airvpn/elkalamar) (Ping timeout: 260 seconds)
[10:20:59] <nitrix> kkd, It's also allowed with other pointer types, as long as they're properly aligned. (C11 6.3.2.3p7)
[10:22:03] *** Quits: elkalamar_ (elkalamar@gateway/vpn/airvpn/elkalamar) (Ping timeout: 244 seconds)
[10:22:18] *** Joins: retro_ (~retro@2e41e9c8.skybroadband.com)
[10:22:40] <floatcomplex> static_assert(8 == sizeof(struct thing) && 56 == (uintptr_t)&things[7] - (uintptr_t)&things[0], "unexpected size");
[10:23:43] *** Quits: Dunce (~Dunce@gateway/tor-sasl/dunce) (Remote host closed the connection)
[10:24:50] <nitrix> The issue lies in the user figuring out what that "proper alignment" would be and the hoops necessary to jump through (_Alignof/_Alignas) to even guarantee that.
[10:24:57] <floatcomplex> static_assert(!(((uintptr_t)things) % 64), "unexpected alignment"); /* also passes, assuming __attribute((aligned(64)) was used */
[10:24:58] <nitrix> void * is much more simpler.
[10:25:10] *** Quits: retroid_ (~retro@2e41e9c8.skybroadband.com) (Ping timeout: 252 seconds)
[10:28:56] *** Joins: mrig (~AdiIRC@user/mrig)
[10:29:00] <Akawama[m]> Why is 1%2 == 1 insted of -1?
[10:30:32] <nitrix> Akawama[m], How many bags of 2 marbles can you fill with 1 marble? (division) And then how many marbles are you left with? (modulo)
[10:30:37] <Daniel[m]1234516> My guess would be 1/2=0 rest 1
[10:33:10] <Akawama[m]> oh now I get it, thanks ^_^
[10:36:21] *** Quits: dmaroo (~dhruv@2409:4070:460b:9408:8e30:2acf:1083:9872) (Ping timeout: 245 seconds)
[10:36:41] *** Joins: davidfetter_work (~davidfett@c-73-241-222-148.hsd1.ca.comcast.net)
[10:39:12] <floatcomplex> https://godbolt.org/z/cE4Gn94jK
[10:39:23] <floatcomplex> fizzie: ^
[10:40:01] *** Joins: presonic (~presonic@111-22-237-24.gci.net)
[10:41:40] *** Quits: davidfetter_work (~davidfett@c-73-241-222-148.hsd1.ca.comcast.net) (Ping timeout: 244 seconds)
[10:44:14] *** Quits: highrate (~presonic@111-22-237-24.gci.net) (Ping timeout: 260 seconds)
[10:47:15] *** Joins: slidercrank (~slidercra@user/slidercrank)
[10:47:34] *** Quits: kts (~kts@103.73.237.38) (Ping timeout: 250 seconds)
[10:52:03] <kkd> nitrix: hm, but https://port70.net/~nsz/c/c11/n1570.html#7.20.1.4p1 mentions 'pointer to void' explicitly
[10:53:59] *** Joins: Sujmikro (~Sujmikro@cpe-188-252-129-7.zg5.cable.xnet.hr)
[10:59:11] *** Quits: slidercrank (~slidercra@user/slidercrank) (Ping timeout: 264 seconds)
[11:01:50] <kkd> I'm guessing the reason is that pointer width is not guaranteed to be the same for all types
[11:02:01] <kkd> so it needs to laundered first using a (void*) casta
[11:02:05] <kkd> to be*
[11:04:11] *** Joins: NEYi (~NEYi@109.251.216.38)
[11:04:38] *** Joins: meator (~meator@user/meator)
[11:05:57] *** Quits: NEYi_ (~NEYi@109.251.216.38) (Ping timeout: 265 seconds)
[11:06:11] *** Joins: davidfetter_work (~davidfett@c-73-241-222-148.hsd1.ca.comcast.net)
[11:07:20] *** Joins: Isonzo (~Isonzo@179.6.201.212)
[11:09:15] *** Quits: Isonzo (~Isonzo@179.6.201.212) (Client Quit)
[11:10:35] *** Quits: NEYi (~NEYi@109.251.216.38) (Read error: Connection reset by peer)
[11:10:36] *** Quits: davidfetter_work (~davidfett@c-73-241-222-148.hsd1.ca.comcast.net) (Ping timeout: 244 seconds)
[11:13:04] *** Joins: slidercrank (~slidercra@user/slidercrank)
[11:23:59] *** Quits: uniquepointer (~uniquepoi@190.218.240.164) (Quit: Leaving)
[11:26:01] *** Joins: earnestly (~earnest@user/earnestly)
[11:28:54] *** Joins: dave0 (~davezero@069.d.003.ncl.iprimus.net.au)
[11:32:54] *** Joins: Aky (~Aky@user/aky)
[11:41:38] *** Joins: tsujp (~tsujp@sourcehut/user/tsujp)
[11:55:42] *** Joins: pert (~pert@fsf/member/pert)
[11:55:43] *** Quits: pert (~pert@fsf/member/pert) (Remote host closed the connection)
[11:57:58] *** Joins: mikoto-chan (~mikoto-ch@185.237.102.115)
[12:00:16] *** Quits: venomega (~venomega@152.206.214.64) (Quit: Quit)
[12:02:29] *** Joins: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl)
[12:02:30] *** Quits: asdflkj_sh (asdflkj@user/asdflkj-sh/x-6013523) (Ping timeout: 265 seconds)
[12:03:48] *** Joins: fengdaolong (~fengdaolo@183.93.98.239)
[12:05:54] *** Joins: jusski (~user@78-63-85-123.static.zebra.lt)
[12:08:08] *** Joins: davidfetter_work (~davidfett@c-73-241-222-148.hsd1.ca.comcast.net)
[12:08:33] *** Joins: kashyaprushi (~kashyapru@2405:201:1010:b015:ee96:9a6a:8120:6888)
[12:09:51] *** Joins: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com)
[12:13:35] *** Quits: davidfetter_work (~davidfett@c-73-241-222-148.hsd1.ca.comcast.net) (Ping timeout: 264 seconds)
[12:15:12] *** Quits: mahmutov (~mahmutov@37.155.0.45) (Ping timeout: 244 seconds)
[12:17:02] *** Joins: snehal (~snehal@106.78.37.81)
[12:19:41] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[12:19:59] *** Joins: carlavilla (~carlavill@2a0c:5a84:3607:2f00:221:6bff:fe3b:cee4)
[12:24:59] *** Quits: snehal (~snehal@106.78.37.81) (Quit: Leaving)
[12:25:20] *** Joins: snehal (~snehal@106.78.37.81)
[12:26:24] *** Quits: snehal (~snehal@106.78.37.81) (Client Quit)
[12:26:42] *** Quits: chiselfuse (~chiselfus@user/chiselfuse) (Remote host closed the connection)
[12:26:54] *** Joins: snehal (~snehal@106.78.37.81)
[12:26:57] *** Joins: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f)
[12:27:35] *** Joins: chiselfuse (~chiselfus@user/chiselfuse)
[12:28:29] *** Quits: Betal (~Betal@user/betal) (Quit: WeeChat 3.3)
[12:28:33] *** Joins: aradesh (~aradesh@user/aradesh)
[12:28:38] *** Quits: fengdaolong (~fengdaolo@183.93.98.239) (Ping timeout: 244 seconds)
[12:29:24] *** Quits: pnbeast (~pnbeast@2601:140:4280:3c90::1) (Quit: WeeChat 2.7.1)
[12:29:27] *** Quits: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f) (Remote host closed the connection)
[12:30:13] *** Joins: LucaTM (~LucaTM@user/lucatm)
[12:30:17] *** Quits: mikoto-chan (~mikoto-ch@185.237.102.115) (Read error: Connection reset by peer)
[12:30:32] *** Joins: fengdaolong (~fengdaolo@183.94.82.158)
[12:31:01] *** Quits: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net) (Quit: Textual IRC Client: www.textualapp.com)
[12:33:16] *** Joins: mikoto-chan (~mikoto-ch@ip-83-134-2-136.dsl.scarlet.be)
[12:34:01] *** Joins: gabriele (~gabriele@user/gabriele)
[12:35:27] *** Joins: marcello42 (~mp@p200300dfaf07ff01fa2e52f98b4dfc80.dip0.t-ipconnect.de)
[12:35:37] *** Quits: gabriele (~gabriele@user/gabriele) (Client Quit)
[12:36:44] *** Joins: dmaroo (~dhruv@2409:4070:460b:9408:8e30:2acf:1083:9872)
[12:39:05] *** Quits: nips (~nips@abv84.internetdsl.tpnet.pl) (Remote host closed the connection)
[12:39:22] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[12:41:25] *** Joins: davidfetter_work (~davidfett@c-73-241-222-148.hsd1.ca.comcast.net)
[12:42:22] *** Joins: elkalamar_ (elkalamar@gateway/vpn/airvpn/elkalamar)
[12:44:39] *** Quits: elkalamar__ (elkalamar@gateway/vpn/airvpn/elkalamar) (Ping timeout: 244 seconds)
[12:45:40] *** Quits: davidfetter_work (~davidfett@c-73-241-222-148.hsd1.ca.comcast.net) (Ping timeout: 244 seconds)
[12:46:02] *** Quits: kashyaprushi (~kashyapru@2405:201:1010:b015:ee96:9a6a:8120:6888) (Quit: Leaving)
[12:46:45] *** Quits: meator (~meator@user/meator) (Quit: Leaving)
[12:47:12] *** Quits: snehal (~snehal@106.78.37.81) (Quit: Leaving)
[12:47:40] *** Joins: kawics11 (~ta@catv-89-134-198-57.catv.broadband.hu)
[12:47:53] *** Joins: snehal (~snehal@106.78.37.81)
[12:48:03] *** Quits: snehal (~snehal@106.78.37.81) (Remote host closed the connection)
[12:48:18] *** Joins: snehal (~snehal@106.78.37.81)
[12:48:35] *** Quits: snehal (~snehal@106.78.37.81) (Remote host closed the connection)
[12:52:51] *** Joins: SGautam (uid286066@id-286066.ilkley.irccloud.com)
[12:55:55] *** Quits: kawics11 (~ta@catv-89-134-198-57.catv.broadband.hu) (Ping timeout: 258 seconds)
[12:56:35] *** Joins: random-nick (~random-ni@87.116.165.220)
[13:01:17] *** Joins: mikoto-c1 (~mikoto-ch@ip-83-134-2-136.dsl.scarlet.be)
[13:02:43] *** Quits: Aky (~Aky@user/aky) (Quit: Leaving)
[13:03:15] *** Quits: mikoto-chan (~mikoto-ch@ip-83-134-2-136.dsl.scarlet.be) (Ping timeout: 244 seconds)
[13:03:26] *** Joins: Arthuria (~Arthuria@user/arthuria)
[13:08:21] *** Quits: pucara (~i@host77.181-14-159.telecom.net.ar) (Quit: Lost terminal)
[13:10:03] *** Quits: tsujp (~tsujp@sourcehut/user/tsujp) (Quit: Client closed)
[13:11:37] *** Quits: mikoto-c1 (~mikoto-ch@ip-83-134-2-136.dsl.scarlet.be) (Ping timeout: 265 seconds)
[13:11:55] *** Joins: blindguard (~blindguar@2a02:908:1864:c200::2612)
[13:12:25] *** Joins: davidfetter_work (~davidfett@c-73-241-222-148.hsd1.ca.comcast.net)
[13:13:36] *** Joins: mikoto-c1 (~mikoto-ch@ip-83-134-2-136.dsl.scarlet.be)
[13:17:11] *** Quits: cross (~cross@spitfire.i.gajendra.net) (Ping timeout: 245 seconds)
[13:17:18] *** Quits: davidfetter_work (~davidfett@c-73-241-222-148.hsd1.ca.comcast.net) (Ping timeout: 260 seconds)
[13:19:10] *** Quits: mikoto-c1 (~mikoto-ch@ip-83-134-2-136.dsl.scarlet.be) (Ping timeout: 260 seconds)
[13:19:21] *** Joins: cross (~cross@spitfire.i.gajendra.net)
[13:20:56] *** Joins: mikoto-c1 (~mikoto-ch@ip-83-134-2-136.dsl.scarlet.be)
[13:24:18] *** Joins: Rounin (~david@84.212.130.215)
[13:25:27] *** Quits: mikoto-c1 (~mikoto-ch@ip-83-134-2-136.dsl.scarlet.be) (Ping timeout: 244 seconds)
[13:27:14] *** Joins: mikoto-c1 (~mikoto-ch@ip-83-134-2-136.dsl.scarlet.be)
[13:30:00] * Feuermagier pets candide 
[13:30:13] * candide hugs F​euermagier
[13:30:16] *** Quits: csrf (~csrf@user/csrf) (Quit: ZNC 1.7.2+deb3 - https://znc.in)
[13:30:23] * Feuermagier is happy
[13:31:00] *** Joins: csrf (~csrf@user/csrf)
[13:32:53] *** Quits: mikoto-c1 (~mikoto-ch@ip-83-134-2-136.dsl.scarlet.be) (Ping timeout: 265 seconds)
[13:36:04] *** Joins: kts (~kts@103.73.237.76)
[13:45:06] *** Quits: [R] (~rs@genoce.org) (Ping timeout: 245 seconds)
[13:45:15] *** Joins: [R] (~rs@genoce.org)
[13:47:18] *** Quits: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net) (Remote host closed the connection)
[13:47:34] *** Joins: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net)
[13:51:58] *** Joins: azaza123 (~azaza123@92.248.132.22)
[13:52:24] *** Quits: azaza123 (~azaza123@92.248.132.22) (Read error: Connection reset by peer)
[13:52:34] *** Joins: azaza123 (~azaza123@92.248.132.22)
[13:52:57] *** Quits: azaza123 (~azaza123@92.248.132.22) (Read error: Connection reset by peer)
[13:53:21] *** Joins: azaza123 (~azaza123@92.248.132.22)
[13:53:37] *** Quits: azaza123 (~azaza123@92.248.132.22) (Read error: Connection reset by peer)
[13:54:27] *** Joins: azaza123 (~azaza123@92.248.132.22)
[13:54:57] *** Quits: azaza123 (~azaza123@92.248.132.22) (Read error: Connection reset by peer)
[13:56:50] *** Joins: nitro__ (~nitro@c-73-165-183-88.hsd1.pa.comcast.net)
[13:56:54] *** Joins: cadmio (~cadmio@151.25.149.251)
[13:57:36] <cadmio> Is there anyone familiar with gtk? I've to understand how tags are removed adter a search https://github.com/stevenhoneyman/l3afpad/blob/master/src/search.c
[13:58:18] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[13:58:59] *** Quits: nitro_ (~nitro@c-73-165-183-88.hsd1.pa.comcast.net) (Ping timeout: 265 seconds)
[13:59:30] *** Quits: Arthuria (~Arthuria@user/arthuria) (Ping timeout: 260 seconds)
[14:00:05] *** Quits: alch (~alch@151.46.82.76) (Ping timeout: 244 seconds)
[14:02:07] *** Joins: alch (~alch@151.44.9.31)
[14:02:25] *** Joins: davidfetter_work (~davidfett@c-73-241-222-148.hsd1.ca.comcast.net)
[14:07:18] *** Quits: davidfetter_work (~davidfett@c-73-241-222-148.hsd1.ca.comcast.net) (Ping timeout: 244 seconds)
[14:09:59] *** Quits: jusski (~user@78-63-85-123.static.zebra.lt) (Ping timeout: 264 seconds)
[14:12:24] *** Joins: zer0bitz (~zer0bitz@dsl-hkibng31-54fae3-116.dhcp.inet.fi)
[14:15:28] *** Quits: reumeth (~reumeth@user/reumeth) (Quit: reumeth)
[14:18:42] *** Joins: davidfetter_work (~davidfett@c-73-241-222-148.hsd1.ca.comcast.net)
[14:21:34] *** Quits: cmbengue (~Thunderbi@207.191.249.160) (Quit: Thanks, see you later.)
[14:23:02] *** Quits: kts (~kts@103.73.237.76) (Remote host closed the connection)
[14:23:19] *** Quits: davidfetter_work (~davidfett@c-73-241-222-148.hsd1.ca.comcast.net) (Ping timeout: 258 seconds)
[14:23:26] *** Quits: LuKaRo (~LuKaRo@p5deda401.dip0.t-ipconnect.de) (Quit: ZNC 1.8.2 - https://znc.in)
[14:23:29] *** Joins: kts (~kts@103.73.237.76)
[14:23:48] *** Joins: pulse (~pulse@user/pulse)
[14:25:20] *** Quits: chenqisu12 (~peiycae@183.217.203.91) (Quit: Leaving)
[14:26:01] <rsarson> mornin'!  i just wanted to give a shout out to fizzie.  yesterday he helped me understand some standard stuff.  i was then looking at some of my old notes about wide characters and noticed i had credited fizzie there, too.  my memory ain't what it used to be, obviously, but it's nice to see i at least made a note of who taught me all the things i've since forgotten, lul
[14:28:09] *** Quits: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[14:29:03] *** Quits: kish` (~aqua@user/aqua) (Ping timeout: 276 seconds)
[14:31:24] *** Joins: plastico (~plastico@neomutt/plastico)
[14:34:06] *** Joins: kish` (~aqua@user/aqua)
[14:34:39] *** Joins: LuKaRo (~LuKaRo@p5deda401.dip0.t-ipconnect.de)
[14:39:30] *** Quits: emanuele6 (~emanuele6@user/emanuele6) (Quit: WeeChat 3.3)
[14:40:22] *** Quits: X-Scale (~ARM@83.223.233.104) (Ping timeout: 260 seconds)
[14:45:40] *** Joins: rindolf (~shlomif@2a0d:6fc2:4bb1:500:6b1e:2524:3d70:36ec)
[14:59:50] *** Parts: cadmio (~cadmio@151.25.149.251) (WeeChat 3.0)
[15:00:16] *** Joins: emanuele6 (~emanuele6@user/emanuele6)
[15:02:20] *** Quits: SGautam (uid286066@id-286066.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[15:05:03] *** Quits: marcello42 (~mp@p200300dfaf07ff01fa2e52f98b4dfc80.dip0.t-ipconnect.de) (Quit: Konversation terminated!)
[15:06:25] *** Joins: aqua (~aqua@user/aqua)
[15:06:45] *** Quits: kish` (~aqua@user/aqua) (Ping timeout: 276 seconds)
[15:11:16] *** Quits: aradesh (~aradesh@user/aradesh) (Quit: WeeChat 1.9.1)
[15:21:58] *** Joins: davidfetter_work (~davidfett@c-73-241-222-148.hsd1.ca.comcast.net)
[15:27:02] *** Quits: davidfetter_work (~davidfett@c-73-241-222-148.hsd1.ca.comcast.net) (Ping timeout: 260 seconds)
[15:28:14] *** Joins: karakedi (~eAC53C340@user/karakedi)
[15:28:20] *** Joins: skapata (~Skapata@2804:14c:87b0:a6f9:9536:84ea:4440:882)
[15:28:20] *** Quits: skapata (~Skapata@2804:14c:87b0:a6f9:9536:84ea:4440:882) (Changing host)
[15:28:20] *** Joins: skapata (~Skapata@user/skapata)
[15:33:13] *** Joins: V-T60 (~v@91.203.24.166)
[15:36:01] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.3)
[15:36:15] *** Joins: strajder (~strajder@user/strajder)
[15:36:33] *** Joins: supakeen (~user@python/site-packages/supakeen)
[15:37:25] *** Quits: tejr (~tejr@user/tejr) (Remote host closed the connection)
[15:38:03] *** Joins: tejr (~tejr@user/tejr)
[15:38:53] *** Joins: kurahaupo (~kurahaupo@220-245-23-126.static.tpgi.com.au)
[15:39:00] *** aqua is now known as kish`
[15:39:35] *** Quits: tejr (~tejr@user/tejr) (Remote host closed the connection)
[15:42:49] *** Quits: LuKaRo (~LuKaRo@p5deda401.dip0.t-ipconnect.de) (Quit: ZNC 1.8.2 - https://znc.in)
[15:43:00] *** Joins: tejr (~tejr@user/tejr)
[15:44:26] *** Quits: DPA (~DPA@75-128-16-94.static.cable.fcom.ch) (Ping timeout: 244 seconds)
[15:47:15] *** Joins: DPA (~DPA@75-128-16-94.static.cable.fcom.ch)
[15:49:37] *** Quits: fengdaolong (~fengdaolo@183.94.82.158) (Ping timeout: 244 seconds)
[15:50:52] *** Joins: jusski (~user@78-63-85-123.static.zebra.lt)
[15:51:34] *** Joins: fengdaolong (~fengdaolo@183.94.82.158)
[15:55:40] *** Quits: Darkcoal (~user@51.158.144.31) (Quit: Darkcoal)
[15:56:34] *** Joins: alien_lappy (~alien@user/alien)
[15:57:23] *** Quits: dmaroo (~dhruv@2409:4070:460b:9408:8e30:2acf:1083:9872) (Ping timeout: 264 seconds)
[15:59:26] *** Joins: LuKaRo (~LuKaRo@p5deda401.dip0.t-ipconnect.de)
[15:59:47] <alien_lappy> so, if i have: struct Foo { uint8_t a:3; uint8_t b:5; }; struct Foo foo = {}; uint8_t c = 33; foo.b = c;  what happens? will the bits rollover? or will foo.a be changed?
[16:02:18] <dave0> alien_lappy: it'll truncate it at 5 bits
[16:03:26] <fizzie> (Also, it's implementation-defined whether `uint8_t` can be used as the base type of a bit-field or not. Or, of course, if it exists in the first place.)
[16:03:41] <dave0> alien_lappy: bit fields are pretty much useless, you gain very little from them
[16:04:45] <dave0> i don't know the rationale behind them but it's probably "because a pdp-11 had it"
[16:06:30] <fizzie> floatcomplex: I don't think that's *absolutely* foolproof, though I agree it would work on anything but the DS9K. But it's possible in theory that the pointer-uintptr_t conversion works "intuitively" for all other pointers except that `&sentinels[3]` converts to 0, and whatever would have converted to 0 (likely NULL) converts to whatever &sentinels[3] *should* be.
[16:07:12] *** Quits: rahl (~rahl@102.114.190.3) (Ping timeout: 258 seconds)
[16:07:15] *** Quits: fengdaolong (~fengdaolo@183.94.82.158) (Ping timeout: 260 seconds)
[16:07:24] <fizzie> If you don't mind writing implementation-specific code, they are a pretty legible way of dealing with registers full of flag bits.
[16:07:51] <fizzie> Not that `reg.x = 1;` is *that* much neater than `reg |= REG_X_BIT;` or whatnot.
[16:08:03] <p0g0_> dave0, type variants were the original object.  I use them often, for example to push a complex structure across a serial line as bytes... a single command to move the structure, not individual moves for each element in the structure.  In the bad old days (70s-90s), packed arrays of bits hugely useful, less so now.
[16:08:38] <p0g0_> *bits were hugely useful
[16:08:55] *** Joins: rahl (~rahl@102.114.161.137)
[16:09:14] *** Joins: fengdaolong (~fengdaolo@183.93.99.16)
[16:09:16] *** Joins: davidfetter_work (~davidfett@c-73-241-222-148.hsd1.ca.comcast.net)
[16:10:26] <dave0> i guess there's nothing really wrong with machine dependent
[16:10:49] <p0g0_> yeah, it is system level stuff
[16:11:13] <fizzie> If you're writing something for a system that only really has the one reasonable compiler for it, I guess portability across compilers isn't a top priority.
[16:11:35] <p0g0_> you will need to manage endianess, word length, etc. 
[16:13:34] *** Joins: kts_ (~kts@103.73.237.167)
[16:14:11] *** Quits: davidfetter_work (~davidfett@c-73-241-222-148.hsd1.ca.comcast.net) (Ping timeout: 264 seconds)
[16:14:12] <dave0> p0g0_: messy
[16:14:55] *** Quits: kts_ (~kts@103.73.237.167) (Client Quit)
[16:15:15] <p0g0_> when you need it, or it works well, it is handy.
[16:15:16] *** Joins: kts_ (~kts@103.73.237.167)
[16:16:00] *** Joins: owensjrw (~owensjrw1@2600:1700:b5b0:6380::41)
[16:16:02] *** Quits: kts (~kts@103.73.237.76) (Ping timeout: 250 seconds)
[16:16:45] *** Quits: kts_ (~kts@103.73.237.167) (Client Quit)
[16:17:05] *** Joins: kts (~kts@103.73.237.167)
[16:20:03] *** Quits: frost (~frost@user/frost) (Quit: Connection closed)
[16:20:24] <owensjrw> I was reading an article (sorry don't remember the title), I think it was on Quora. It spoke about how the C book by R&K is antiquated due to updated C standards and accepted idioms and suggested that it be rewritten. I particularly like the book and think it has some value today. Thoughts?
[16:20:53] *** Quits: kts (~kts@103.73.237.167) (Client Quit)
[16:21:34] *** Quits: DPA (~DPA@75-128-16-94.static.cable.fcom.ch) (Ping timeout: 252 seconds)
[16:23:35] *** Joins: AmR (~AmREiSa@156.199.106.121)
[16:24:59] <vdamewood> owensjrw: There are really only two minor problems with the book, maybe 3.
[16:25:27] *** Joins: kts (~kts@103.73.237.167)
[16:25:45] <vdamewood> 1: K&R consistently leave main() without a return type, this isn't allowed in C99 and later. The intro says C doesn't have threads, threads were added in C11. The book doesn't use // coments.
[16:25:59] <vdamewood> Oops, I forgot to enumerate 2 and 3.
[16:27:10] *** Joins: nyah (~nyah@bcdcb6e3.skybroadband.com)
[16:27:59] *** Joins: X-Scale (~ARM@50.77.166.178.rev.vodafone.pt)
[16:30:58] *** Quits: fengdaolong (~fengdaolo@183.93.99.16) (Ping timeout: 260 seconds)
[16:32:54] *** Joins: fengdaolong (~fengdaolo@183.93.98.155)
[16:33:16] *** Quits: X-Scale (~ARM@50.77.166.178.rev.vodafone.pt) (Quit:  HydraIRC -> http://www.hydrairc.com <- Nine out of ten l33t h4x0rz prefer it)
[16:35:48] *** Joins: Famine- (~Famine@user/famine)
[16:36:23] *** Joins: marcello42 (~mp@p200300dfaf07ff01fa2e52f98b4dfc80.dip0.t-ipconnect.de)
[16:38:54] *** Quits: Famine_ (~Famine@user/famine) (Ping timeout: 260 seconds)
[16:38:55] <owensjrw> So you think with exception of some new standards it still holds value?
[16:39:16] *** Quits: TonyStone (~TonyStone@2603-7080-8607-c36a-9cdb-69bc-753b-1e50.res6.spectrum.com) (Ping timeout: 245 seconds)
[16:42:17] *** Quits: Atque (~Atque@user/atque) (Remote host closed the connection)
[16:43:06] *** Quits: unmanbearpig (~unmanbear@user/unmanbearpig) (Ping timeout: 260 seconds)
[16:43:35] *** Joins: Atque (~Atque@user/atque)
[16:44:24] *** Quits: Nex8192 (~Nex8192@user/nex8192) (Quit: Don't watch me die)
[16:44:29] <floatcomplex> vdamewood: does k&r have "const"
[16:45:05] <vdamewood> floatcomplex: Not that I remember.
[16:45:18] *** Quits: LuKaRo (~LuKaRo@p5deda401.dip0.t-ipconnect.de) (Quit: ZNC 1.8.2 - https://znc.in)
[16:46:57] *** Joins: Nex8192 (~Nex8192@user/nex8192)
[16:51:22] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[16:51:41] <owensjrw> The book does does have discussion about constants
[16:51:48] *** Joins: DPA (~DPA@2a05:41c0:e:a704::a3c:10d)
[16:52:48] *** Joins: LuKaRo (~LuKaRo@p5deda401.dip0.t-ipconnect.de)
[16:53:04] *** Quits: aniruddha (uid340443@id-340443.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[16:53:50] *** Quits: marcello42 (~mp@p200300dfaf07ff01fa2e52f98b4dfc80.dip0.t-ipconnect.de) (Remote host closed the connection)
[16:55:17] *** Joins: marcello42 (~mp@p200300dfaf07ff01fa2e52f98b4dfc80.dip0.t-ipconnect.de)
[16:56:30] *** Quits: V-T60 (~v@91.203.24.166) (Quit: Leaving.)
[16:56:30] *** Joins: stzsch (~stzsch@187.44.81.18)
[16:56:51] <floatcomplex> the thing about the style of strict k&r/c89 era code that i have the biggest problem with for new code in 2021 is that no-declaration-after-statement is at odds with const-correctness
[16:57:08] <floatcomplex> otherwise it would just be a style thing
[16:57:32] *** Joins: davidfetter_work (~davidfett@2601:640:4100:7e0:f862:d23c:8a7a:5079)
[16:59:04] *** Quits: marcello42 (~mp@p200300dfaf07ff01fa2e52f98b4dfc80.dip0.t-ipconnect.de) (Client Quit)
[17:00:23] *** Quits: stzsch|2 (~stzsch@45.238.66.15) (Ping timeout: 264 seconds)
[17:02:01] *** Quits: smallvil_ (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Ping timeout: 258 seconds)
[17:02:24] *** Quits: davidfetter_work (~davidfett@2601:640:4100:7e0:f862:d23c:8a7a:5079) (Ping timeout: 258 seconds)
[17:02:58] *** Joins: marcello42 (~mp@p5dedb36a.dip0.t-ipconnect.de)
[17:03:37] *** Joins: cvmn (~caveman@gateway/tor-sasl/caveman)
[17:03:59] <NRK[m]> owensjrw: i didn't like other books because of how long winded they are. K&R was short and concise.
[17:04:17] <NRK[m]> floatcomplex: imo, it's not hard to pick up those stuff once you learn ansi C
[17:04:23] *** Quits: kts (~kts@103.73.237.167) (Quit: Konversation terminated!)
[17:04:53] *** Joins: ioxzev1z (~ioxzev1z@user/ioxzev1z)
[17:05:17] <floatcomplex> yeah, many of us did
[17:05:53] <floatcomplex> but it means you will write a lot of code in one style before learning a very different style
[17:06:37] *** Joins: kts (~kts@103.73.237.240)
[17:08:38] <floatcomplex> i would say, yes read k&r, but don't restrict your own code to c89 while doing so
[17:09:25] *** Joins: SpringSprocket (~srv@hobby.esselfe.ca)
[17:09:43] *** Quits: marcello42 (~mp@p5dedb36a.dip0.t-ipconnect.de) (Remote host closed the connection)
[17:09:44] *** Joins: V-T60 (~v@91.203.24.166)
[17:11:10] *** Joins: marcello42 (~mp@p200300dfaf07ff01fa2e52f98b4dfc80.dip0.t-ipconnect.de)
[17:12:16] *** Quits: kurahaupo (~kurahaupo@220-245-23-126.static.tpgi.com.au) (Ping timeout: 244 seconds)
[17:13:27] *** Quits: marcello42 (~mp@p200300dfaf07ff01fa2e52f98b4dfc80.dip0.t-ipconnect.de) (Remote host closed the connection)
[17:13:49] <floatcomplex> besides const and its far reaching implications for code style, the other main things that c99 and later have that c89 do not, which i use on just about every half page of code i write, are compound literals and designated initializera
[17:16:41] <fizzie> Oof, that's a little excessive: clang-tidy's bugprone-sizeof-expression check warns on any `sizeof (T *)` (or equivalently an expression with pointer type), under the assumption that you meant `sizeof (T)` instead. (I wanted an allocated array of pointers.)
[17:18:37] *** Quits: cvmn (~caveman@gateway/tor-sasl/caveman) (Remote host closed the connection)
[17:19:06] *** Joins: cvmn (~caveman@gateway/tor-sasl/caveman)
[17:26:59] *** Joins: Macuser (~Macuser@216.30.159.201)
[17:29:33] *** Joins: voltron (~voltrin_@ip5f599415.dynamic.kabel-deutschland.de)
[17:29:33] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[17:31:03] *** Quits: cvmn (~caveman@gateway/tor-sasl/caveman) (Ping timeout: 276 seconds)
[17:34:58] *** Joins: marcello42 (~mp@p200300dfaf07ff01fa2e52f98b4dfc80.dip0.t-ipconnect.de)
[17:39:31] *** Joins: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be)
[17:40:00] *** Joins: cvmn (~caveman@gateway/tor-sasl/caveman)
[17:41:11] *** Quits: Crescendo (~Crescendo@user/crescendo) (Ping timeout: 264 seconds)
[17:41:24] *** Joins: shivesh (~shivesh@user/shivesh)
[17:41:36] *** Joins: Crescendo (~Crescendo@user/crescendo)
[17:43:09] *** Joins: Atque (~Atque@user/atque)
[17:44:34] *** Quits: emanuele6 (~emanuele6@user/emanuele6) (Ping timeout: 258 seconds)
[17:54:15] *** Joins: superboot (~agentgasm@user/superboot)
[17:54:45] *** Quits: Crescendo (~Crescendo@user/crescendo) (Read error: Connection reset by peer)
[17:54:54] *** Joins: davidfetter_work (~davidfett@2601:640:4100:7e0:f862:d23c:8a7a:5079)
[17:55:02] *** Joins: seninha (~seninha@user/seninha)
[17:56:07] *** Joins: Crescendo (~Crescendo@user/crescendo)
[17:57:01] *** Joins: aleamb (~aleamb@81.61.187.171.dyn.user.ono.com)
[17:58:28] *** Quits: alch (~alch@151.44.9.31) (Read error: Connection reset by peer)
[17:59:41] *** Quits: davidfetter_work (~davidfett@2601:640:4100:7e0:f862:d23c:8a7a:5079) (Ping timeout: 245 seconds)
[18:01:20] *** Joins: unmanbearpig (~unmanbear@user/unmanbearpig)
[18:02:28] *** Joins: alch (~alch@151.46.5.72)
[18:09:06] <floatcomplex> fizzie: re: the sentinel thing, i suppose the only truly portable way to do it is to loop over all of the possible sentinels, testing for equality
[18:10:06] *** Joins: kts_ (~kts@103.73.237.174)
[18:10:10] <floatcomplex> the compiler has enough information to make this o(1) but it's a pretty obscure optimization to count on
[18:11:48] *** Joins: davidfetter_work (~davidfett@c-73-241-222-148.hsd1.ca.comcast.net)
[18:12:10] *** Quits: kts (~kts@103.73.237.240) (Ping timeout: 250 seconds)
[18:13:49] *** Joins: randuser123 (~rand12323@177.154.8.40)
[18:16:08] *** Joins: katnis (uid15849@id-15849.helmsley.irccloud.com)
[18:16:20] *** Quits: davidfetter_work (~davidfett@c-73-241-222-148.hsd1.ca.comcast.net) (Ping timeout: 244 seconds)
[18:16:34] <katnis> hello
[18:16:41] <katnis> world
[18:18:20] *** Joins: rgrinberg (~textual@ip11-246-50-179.ct.co.cr)
[18:18:28] *** Quits: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be) (Quit: The Lounge - https://thelounge.chat)
[18:18:38] *** Joins: sedeki (~textual@user/sedeki)
[18:18:41] <owensjrw> #include <stdio> int main(void){printf("Hello, Katnis!\n");return 0;}
[18:19:09] <floatcomplex> although, i can think of more situatuons besides sentinels where you want to know in o(1) whether a pointer A points at any member of array B
[18:19:38] *** Joins: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be)
[18:19:59] <strajder> s/stdio/stdio.h/
[18:20:27] <owensjrw> Yep thanks strajder :-)...
[18:22:43] <katnis> its been 2 weeks since started learning the C programming language... i think this channel would be a lot of help for the noob. :D
[18:23:24] <katnis> you people are gods to me
[18:23:41] <katnis> anyways its time for me to sleep. cya world :D
[18:23:42] <owensjrw> Alot of these folks are supper smart and friendly. You will get lots of help here.
[18:23:51] <katnis> sounds very nice!
[18:24:44] *** Joins: kurahaupo (~kurahaupo@220-245-23-126.static.tpgi.com.au)
[18:24:54] <randuser123> strcpy(buffer, "HelloWorld"):
[18:25:38] <randuser123> core dump
[18:25:59] <pragma-> owensjrw: stdio.h. use puts instead of printf if you don't have any format strings. return 0 isn't necessary at the end of main.
[18:27:16] *** Quits: sedeki (~textual@user/sedeki) (Quit: Textual IRC Client: www.textualapp.com)
[18:27:39] *** Quits: LuKaRo (~LuKaRo@p5deda401.dip0.t-ipconnect.de) (Quit: ZNC 1.8.2 - https://znc.in)
[18:27:47] *** Joins: NEYi (~NEYi@109.251.216.38)
[18:28:41] <owensjrw> why is return 0 not required? doesn't "int function(void)" require an integer value be returned?
[18:28:54] *** Joins: msfninja (~kali@user/msfninja)
[18:29:00] <pragma-> in this case, main is special.
[18:29:11] <pragma-> reaching the } that terminates main, specifically main, returns 0.
[18:30:30] <owensjrw> but if I want to exit the program with and error I still have to use a non zero integer, is that still correct?
[18:30:53] <pragma-> yes
[18:31:30] *** Joins: LuKaRo (~LuKaRo@p5deda401.dip0.t-ipconnect.de)
[18:31:38] <randuser123> https://dpaste.org/jhii
[18:31:40] <randuser123> core dump
[18:33:35] *** Joins: mahmutov (~mahmutov@37.155.0.45)
[18:35:49] <owensjrw> randuser123: Is it becuase there are more than 9 'a' in your string you are tring to copy to the buffer? strcpy - copies the string pointed to by src, including the terminating null byte ('\0'), to the buffer.
[18:37:45] <randuser123> i know, i was just trying to be smart
[18:38:02] <randuser123> thanks for your patience
[18:38:14] <randuser123> you sure help people
[18:38:26] *** Quits: DPA (~DPA@2a05:41c0:e:a704::a3c:10d) (Ping timeout: 245 seconds)
[18:39:07] <randuser123> is this the biggest community of c programmers?
[18:39:23] *** Quits: kurahaupo (~kurahaupo@220-245-23-126.static.tpgi.com.au) (Ping timeout: 264 seconds)
[18:39:32] *** Quits: V-T60 (~v@91.203.24.166) (Quit: Leaving.)
[18:39:42] <owensjrw> Im just learning. Thats why I watch all or the post that these smart folks share. Helps me learn. Most of it is over my head though. Just an old dog trying to learn a new trick.
[18:40:22] *** Joins: Optimus (~risto@87.227.237.59)
[18:40:31] <randuser123> is there a alternative to scanf in c?
[18:40:52] <randuser123> i am not a pro
[18:41:01] <owensjrw> From the chat servers I have visited this seems to be the largest and most active. Which helps when people share there knowledge.
[18:41:41] <twkm> there are alternatives.
[18:41:47] <pragma-> randuser123: Yes, scanf is typically avoided. There are better ways with better error handling.
[18:41:54] <owensjrw> I don't know about alternatives but when I use "man function" at the bottom of the page is usually some other functions to look at.
[18:42:27] <randuser123> understood
[18:42:33] *** Quits: cvmn (~caveman@gateway/tor-sasl/caveman) (Ping timeout: 276 seconds)
[18:42:54] *** Quits: fstd (~fstd@xdsl-81-173-175-11.nc.de) (Read error: Connection reset by peer)
[18:43:18] <twkm> generally, fgets then strto*.
[18:43:30] <owensjrw> when "man scanf" the see also says getc(3), printf(3), setlocale(3), strtod(3), strtol(3), strtoul(3). The (3) is the section in the manual.
[18:45:37] <owensjrw> the list of syopsis is: int scanf(const char *format, ...); int fscanf(FILE *stream, const char *format, ...); int sscanf(const char *str, const char *format, ...); #include <stdarg.h> int vscanf(const char *format, va_list ap); int vsscanf(const char *str, const char *format, va_list ap); int vfscanf(FILE *stream, const char *format, va_list ap);
[18:45:38] *** Joins: pert (~pert@fsf/member/pert)
[18:45:56] *** Joins: DPA (~DPA@75-128-16-94.static.cable.fcom.ch)
[18:46:27] *** Quits: strajder (~strajder@user/strajder) (Quit: leaving)
[18:47:03] *** Joins: strajder (~strajder@user/strajder)
[18:47:30] <owensjrw> Ganna go watch Dune then do some taxes. You all have a great day.
[18:47:57] *** Joins: kenanmarasli (~kenanmara@user/kenanmarasli)
[18:48:00] *** Quits: owensjrw (~owensjrw1@2600:1700:b5b0:6380::41) (Quit: Leaving)
[18:49:01] *** Quits: voltron (~voltrin_@ip5f599415.dynamic.kabel-deutschland.de) (Read error: Connection reset by peer)
[18:50:07] *** Quits: randuser123 (~rand12323@177.154.8.40) (Quit: Leaving)
[18:52:02] *** Joins: voltron (~voltrin_@ip5f599415.dynamic.kabel-deutschland.de)
[18:53:42] *** Joins: davidfetter_work (~davidfett@c-73-241-222-148.hsd1.ca.comcast.net)
[18:54:20] *** Joins: kurahaupo (~kurahaupo@220-245-23-126.static.tpgi.com.au)
[18:56:41] *** Joins: missogra (~missogra@dynamic-077-010-155-007.77.10.pool.telefonica.de)
[18:58:28] *** Joins: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net)
[18:58:43] *** Quits: davidfetter_work (~davidfett@c-73-241-222-148.hsd1.ca.comcast.net) (Ping timeout: 244 seconds)
[19:00:59] *** Joins: zmt00 (~zmt00@user/zmt00)
[19:02:13] *** Quits: voltron (~voltrin_@ip5f599415.dynamic.kabel-deutschland.de) (Quit: Leaving)
[19:02:18] *** Joins: smallvil_ (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[19:05:19] *** Joins: fstd (~fstd@xdsl-89-0-79-89.nc.de)
[19:06:34] *** Quits: smallvil_ (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Ping timeout: 252 seconds)
[19:08:31] *** Quits: pulse (~pulse@user/pulse) (Ping timeout: 244 seconds)
[19:10:11] *** Quits: iomari891 (~iomari891@105.112.138.38) (Quit: WeeChat 3.3)
[19:11:32] *** Joins: ferdna (~ferdna@user/ferdna)
[19:17:59] *** Quits: tejr (~tejr@user/tejr) (Remote host closed the connection)
[19:18:19] *** Quits: fstd (~fstd@xdsl-89-0-79-89.nc.de) (Read error: Connection reset by peer)
[19:18:19] *** Quits: chiselfuse (~chiselfus@user/chiselfuse) (Remote host closed the connection)
[19:18:26] *** Joins: tejr (~tejr@user/tejr)
[19:19:06] *** Quits: shivesh (~shivesh@user/shivesh) (Quit: leaving)
[19:19:15] *** Joins: shivesh (~shivesh@user/shivesh)
[19:19:25] *** Joins: fstd (~fstd@xdsl-89-0-79-89.nc.de)
[19:21:09] *** Joins: chiselfuse (~chiselfus@user/chiselfuse)
[19:25:30] *** Quits: wwilly (~wwilly@217.140.106.13) (Ping timeout: 260 seconds)
[19:26:19] *** Joins: wwilly (~wwilly@217.140.106.13)
[19:26:34] *** Joins: davidfetter_work (~davidfett@c-73-241-222-148.hsd1.ca.comcast.net)
[19:27:26] *** Joins: iomari891 (~iomari891@105.112.138.38)
[19:28:07] *** Quits: Nitrousoxide (~msdos@user/nitrousoxide) (Remote host closed the connection)
[19:29:05] *** Quits: tejr (~tejr@user/tejr) (Remote host closed the connection)
[19:29:23] *** Joins: Nitrousoxide (~msdos@user/nitrousoxide)
[19:29:23] *** Joins: tejr (~tejr@user/tejr)
[19:30:57] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[19:31:15] *** Quits: davidfetter_work (~davidfett@c-73-241-222-148.hsd1.ca.comcast.net) (Ping timeout: 244 seconds)
[19:34:22] *** Quits: seninha (~seninha@user/seninha) (Ping timeout: 244 seconds)
[19:34:53] *** Quits: jusski (~user@78-63-85-123.static.zebra.lt) (Ping timeout: 244 seconds)
[19:35:39] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[19:35:39] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[19:35:39] *** Joins: wroathe (~wroathe@user/wroathe)
[19:40:45] *** Joins: owensjrw (~owensjrw1@2600:1700:b5b0:6380::41)
[19:41:02] *** Joins: quartz (~quartz@user/quartz)
[19:41:57] <owensjrw> Have not got to watch the movie yet maybe tomorrow. What is everyone working on?
[19:45:51] *** Joins: monkey_ (~user@190.104.116.134)
[19:47:21] *** Joins: magic_ninja_work (~sparkie1@4.4.16.52)
[19:47:22] <omegatron> world domination!?
[19:48:20] *** Joins: seninha (~seninha@user/seninha)
[19:50:10] <ski> "return 0 isn't necessary at the end of main" -- is this just for the initial call to it, or also for possible (perhaps mutual) recursive calls ?
[19:51:16] *** Joins: pulse (~pulse@user/pulse)
[19:52:47] <fizzie> Hmm, good question. I'll always assumed it's any call, but it might be just the initial one.
[19:52:57] *** Joins: cmbengue (~Thunderbi@207.191.249.160)
[19:53:53] <fizzie> C11 5.1.2.2.3p1: "-- a return from the initial call to the `main` function is equivalent to calling the `exit` function with the value returned by the `main` function as its argument; reaching the `}` that terminates the `main` function returns a value of 0."
[19:54:36] <fizzie> I guess it depends on how you read the semicolon.
[19:55:19] *** Joins: harveypwca (~harveypwc@2601:246:c180:a570:3828:d8:e523:3f67)
[19:55:25] <ski> hm, i see
[19:56:51] <ski> i would have presumed it was just the initial call, but i dunno which the standard writers had in mind, nor what implementations assume
[19:58:43] <fizzie> I think it'd be slightly hard to implement it in a way that *didn't* work for other calls, but of course that's not much of an argument.
[19:59:28] <kurahaupo> ski: "not necessary" depends on the frame of the question. ISO-9899 no longer requires a return statement at the end of main (and implies return 0). However that doesn't mean that not using a return statement is a good idea when the semantics of "return 0" are actually wanted
[20:00:12] *** Joins: davidfetter_work (~davidfett@c-73-241-222-148.hsd1.ca.comcast.net)
[20:00:22] <sham1> One should still use return 0; though, if only for clarity
[20:00:48] *** Joins: fossforus (~stan@99-173-128-32.lightspeed.rlghnc.sbcglobal.net)
[20:01:00] <pragma-> There's a line between noise and clarity.
[20:02:20] *** Quits: DPA (~DPA@75-128-16-94.static.cable.fcom.ch) (Ping timeout: 260 seconds)
[20:02:27] <ski> owensjrw : see kurahaupo ^
[20:03:59] *** Joins: rndusr (~rndusr@user/rndusr)
[20:04:12] *** Quits: g2anj (~v@58.227.244.56) (Quit: .)
[20:04:27] <owensjrw> I like what shaml says though that it leave out the ambiguity of assumption that there is no end. Though is was much more clear :-)
[20:05:11] *** Quits: davidfetter_work (~davidfett@c-73-241-222-148.hsd1.ca.comcast.net) (Ping timeout: 264 seconds)
[20:05:21] <pragma-> Or it demonstrates that the individual writing the code doesn't actually know C.
[20:06:09] <pragma-> And so one should be vigilant about potential misbehaviors in the undefined, unspecified and implementation-defined senses.
[20:06:18] <owensjrw> What is the difference in return 0, the system call of EXIT, or just using the token '}'?
[20:06:47] *** Joins: chair1 (~bbs@187.109.18.204)
[20:09:13] <owensjrw> progma~: I dont think I have ever seen any post on any sight that did not have a opposition opinion regarding C coding be it someones style of code or implementation of an algorithm. Do any of us then really know C?
[20:10:53] <owensjrw> It would be nice if this was my phone then I could blame all the spelling errors on autocorrect :-)...
[20:11:42] <NRK[m]> well, now you've blown it. we wouldn't have known.
[20:11:53] <rndusr> hmm
[20:12:12] <rndusr> for some reason my program is deciding to abort() when i try to fclose() my file
[20:12:23] <rndusr> even though I've checked if !fd and such
[20:12:24] <pragma-> owensjrw: there are many subtle signs that show that the person doesn't really know C or is treating it as a subset of C++. You know, stuff like casting malloc, etc.
[20:12:51] <pragma-> superset?
[20:13:07] <pragma-> Does the set of all sets contain itself?
[20:13:40] *** Quits: dave0 (~davezero@069.d.003.ncl.iprimus.net.au) (Quit: dave's not here)
[20:14:26] <rndusr> yes and no
[20:15:04] <fizzie> Attempting to do `fclose` twice is a good way of getting a crash, just like a double-free.
[20:15:12] <ski> depends on which set theory you're using
[20:15:57] <fizzie> Also not something an `if (!fd)` style check will catch, because `fclose(f)` will not set f to null (just like `free(ptr)` will not set ptr to null).
[20:15:59] *** Quits: MrFantastik (~f@2601:645:8100:cda0:e5a0:d55b:8dd3:719e) (Ping timeout: 264 seconds)
[20:16:25] <ski> (usually (e.g. ZFC) there is no set of all sets. but in, iirc, NFU, there is a universal set, containing itself)
[20:16:31] <rndusr> fizzie: what should I test for, then? fd == 0?
[20:17:00] <ski> don't close twice ?
[20:17:03] <fizzie> There's nothing you can do to test whether a FILE * is "valid" or not. Just don't call `fclose` on it twice.
[20:17:18] <rndusr> fizzie: I haven't
[20:17:28] <fizzie> Again just like how there's nothing you can do to test if a pointer is valid or not; you just can't call free on it twice.
[20:17:36] <rndusr> i open it and then close it in main()
[20:18:19] <fizzie> Well, just saying, it's one way of getting your symptoms that makes any "is it null or not" checks irrelevant. I'm sure there are other ways too.
[20:18:38] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[20:18:50] <fizzie> Ask a memory issue debugger (like AddressSanitizer) for its opinion too.
[20:19:36] <chair1> But is it being opened at all? Are you checking return value of fopen?
[20:19:55] <rndusr> I thought i was
[20:20:53] <rndusr> well addresssanitizer is yelling at me for a different thing now
[20:24:18] <fizzie> Whatever it's yelling about is typically much closer to the actual problem; issues that show up on free (and there's an implied free on fclose) tend to have their real root cause much earlier in the program's execution. Well, except for trying to free more than once, anyway.
[20:24:36] <rndusr> okay, yeah
[20:24:50] <rndusr> there's a function i'm using to read in a file line by line and return each line
[20:24:52] <rndusr> https://ttm.sh/eIM.c
[20:25:07] <rndusr> there's a problem in the while(...) declaration, and i'm not sure why it's erroring
[20:25:28] <rndusr> addrsan said that it was a buffer-underflow
[20:27:09] *** Joins: Sheilong (uid293653@id-293653.ilkley.irccloud.com)
[20:29:27] *** Joins: emanuele6 (~emanuele6@net-2-36-101-242.cust.vodafonedsl.it)
[20:29:44] <fizzie> If that's literally what the function looks like, on first iteration of the loop, strlen(b) == 0, so b[strlen(b) - 1] is b[-1] which is just invalid.
[20:29:46] *** Quits: emanuele6 (~emanuele6@net-2-36-101-242.cust.vodafonedsl.it) (Changing host)
[20:29:46] *** Joins: emanuele6 (~emanuele6@user/emanuele6)
[20:30:15] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[20:30:23] <rndusr> ahhh
[20:31:34] <fizzie> Also, strlen(b) == SIZE is impossible to hit after fgets(b, SIZE, fd), because `fgets` will write at most SIZE-1 bytes of content to leave a room for the '\0' at the end.
[20:31:54] *** Joins: DPA (~DPA@2a05:41c0:b:db04::a3c:10d)
[20:32:12] <rndusr> okay, cool
[20:32:14] *** Quits: mahmutov (~mahmutov@37.155.0.45) (Ping timeout: 260 seconds)
[20:32:15] <rndusr> this makes sense
[20:32:17] <rndusr> thanks
[20:33:46] *** Joins: mahmutov (~mahmutov@37.155.35.85)
[20:33:53] <kurahaupo> pragma-: What about the set of all sets that do not contain themselves? Does that contain itself?
[20:35:17] <kurahaupo> rndusr: It's a bad idea to name a FILE* variable "fd", when that's the common abbreviation for filedescriptor
[20:36:15] *** Joins: davidfetter_work (~davidfett@c-73-241-222-148.hsd1.ca.comcast.net)
[20:36:31] *** Quits: missogra (~missogra@dynamic-077-010-155-007.77.10.pool.telefonica.de) (Quit: Leaving)
[20:36:31] *** Quits: owensjrw (~owensjrw1@2600:1700:b5b0:6380::41) (Quit: Leaving)
[20:36:39] <kurahaupo> rndusr: in particular, checking filedescriptor==0 is equivalent to checking file==stdin
[20:36:46] *** Quits: DPA (~DPA@2a05:41c0:b:db04::a3c:10d) (Ping timeout: 245 seconds)
[20:39:01] *** Quits: chasmo77 (~chas77@71.63.241.168) (Quit: It's just that easy)
[20:40:00] *** Joins: wootehfoot (~wootehfoo@user/wootehfoot)
[20:41:25] *** Quits: davidfetter_work (~davidfett@c-73-241-222-148.hsd1.ca.comcast.net) (Ping timeout: 260 seconds)
[20:41:55] *** Joins: MrFantastik (~f@159.sub-174-194-143.myvzw.com)
[20:44:44] *** Quits: user282069 (user@2a01:7e00::f03c:92ff:fe7f:456d) (Quit: WeeChat 2.3)
[20:45:03] *** Joins: user282069 (user@2a01:7e00::f03c:92ff:fe7f:456d)
[20:45:34] *** Quits: fengdaolong (~fengdaolo@183.93.98.155) (Ping timeout: 252 seconds)
[20:45:40] *** Quits: slidercrank (~slidercra@user/slidercrank) (Quit: Why not ask me about Sevastopol's safety protocols?)
[20:46:40] *** Quits: plastico (~plastico@neomutt/plastico) (Ping timeout: 260 seconds)
[20:47:36] *** Quits: chair1 (~bbs@187.109.18.204) (Quit: we did i join)
[20:48:25] *** Joins: fentanyl (~ryan@user/sapi01)
[20:48:26] <rndusr> okay, addresssan is yelling at me for a different error now
[20:48:44] <rndusr> there's a problem with the call to strcat(...) in my function (https://ttm.sh/eIX.c)
[20:48:45] *** Quits: magic_ninja_work (~sparkie1@4.4.16.52) (Ping timeout: 244 seconds)
[20:49:06] *** Joins: DPA (~DPA@2a05:41c0:b:db04::a3c:10d)
[20:51:59] <rndusr> addrsan says that it's a heap overflow
[20:52:02] *** Quits: cmbengue (~Thunderbi@207.191.249.160) (Quit: Thanks, see you later.)
[20:52:50] *** Joins: Guest26 (~Guest26@2a07-a880-4601-1082-4231-e728-c62f-69fd.pool6.ovpn.com)
[20:53:33] *** Quits: Guest26 (~Guest26@2a07-a880-4601-1082-4231-e728-c62f-69fd.pool6.ovpn.com) (Client Quit)
[20:57:18] <fizzie> A couple of things come to mind, possibly none of them your actual problem though: (a) the first byte of `r` needs to be initialized to 0 before the loop, so that `strcat` knows where to start during the first round through; (b) your allocation strategy doubles the size on every iteration, but you add a fixed amount (SIZE-1 bytes) of data instead; (c) `(char *)&b` would be more readable (and equivalent)
[20:57:20] <fizzie> as just plain `b`.
[20:57:29] *** Joins: slidercrank (~slidercra@user/slidercrank)
[20:59:17] *** Quits: MrFantastik (~f@159.sub-174-194-143.myvzw.com) (Remote host closed the connection)
[21:00:55] <rndusr> fizzie: referring to (c), using plain `b` was giving a compiler warning
[21:01:27] <rndusr> as to (a), r[0] = '\0' should do the trick
[21:01:44] <rndusr> and as to (b), I changed v *= 2 to v += SIZE
[21:01:55] <fizzie> There should be no compiler warning for plain `b`.
[21:02:05] <fizzie> (There should be one for plain `&b` though.)
[21:02:20] <rndusr> huh, okay
[21:02:22] <rndusr> cool
[21:02:53] *** Joins: aradesh (~aradesh@user/aradesh)
[21:03:21] <rndusr> using all those asan is still yelling'
[21:03:46] <rndusr> i feel like this is an off-by-one error
[21:04:20] *** Joins: Ronalds_Mazitis_ (~Ronalds_M@46.109.76.104)
[21:04:51] *** Joins: plastico (~plastico@neomutt/plastico)
[21:05:20] <kurahaupo> rndusr: Linear scaling results in O(n²) time order. Use doubling instead to improve the performance. Use a smaller scale like 1.25 iff you're really worried about memory.
[21:05:30] *** Quits: mrig (~AdiIRC@user/mrig) (Quit: Going offline, see ya! (www.adiirc.com))
[21:05:48] <fizzie> Always a possibility, of course. There should be some detail in the ASan output of which line exactly is doing something wrong, and what exactly it's doing.
[21:06:20] *** Quits: AmR (~AmREiSa@156.199.106.121) (Read error: Connection reset by peer)
[21:06:47] <rndusr> https://ttm.sh/eI6.c.c is the output of asan
[21:06:53] <fizzie> (And re performance, you can fgets directly into the allocated buffer and drop `b` and the strcat completely, but it may be a little more complicated.)
[21:06:55] *** Quits: rindolf (~shlomif@2a0d:6fc2:4bb1:500:6b1e:2524:3d70:36ec) (Quit: Shlomi Fish ("Rindolf") has left the server. “Chuck Norris was challenged to fight the world, and accepted. He bet on himself, won, and collected the bet money.”)
[21:07:12] <kurahaupo> rndusr: Avoid linear scaling unless you've really thought through all the implications. There are plenty of misguided people out there recommending it over exponential scaling, and they're basically wrong
[21:08:36] *** Joins: AmR (~AmREiSa@156.199.106.121)
[21:08:38] *** Quits: Crescendo (~Crescendo@user/crescendo) (Ping timeout: 260 seconds)
[21:08:49] <rndusr> as in realloc(r, v * 2) in linear scaling?
[21:09:01] <Bou> rndusr: what is the value of strlen(b) at the start of your program, and which element will `b[strlen(b) - 1]` access?
[21:09:18] <rndusr> Bou: sorry, here's the updated function
[21:09:26] *** Joins: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com)
[21:10:03] <rndusr> https://ttm.sh/eIV.c
[21:10:28] <rndusr> the MIN guards against a buffer underflow
[21:10:44] *** Joins: davidfetter_work (~davidfett@c-73-241-222-148.hsd1.ca.comcast.net)
[21:10:44] *** Joins: Akuli (~Akuli@87-94-109-157.bb.dnainternet.fi)
[21:11:10] <fizzie> `v += SIZE` is linear scaling, `v *= 2` was exponential scaling. But you'll pretty much have to drop the fixed-size buffer `b` from the picture if you want to do exponential scaling. Or else track "used size" vs. "allocated size" separately, and only call realloc when one reaches the other, not for every iteration of the fgets loop.
[21:11:55] <fizzie> (By the way, that most recent linked paste is still missing the `r[0] = 0` initialization.
[21:12:15] <rndusr> oh, i'm dumb
[21:12:51] <rndusr> https://ttm.sh/eIx.c
[21:15:35] *** Joins: X-Scale (~ARM@31.22.163.11)
[21:15:38] *** Quits: davidfetter_work (~davidfett@c-73-241-222-148.hsd1.ca.comcast.net) (Ping timeout: 244 seconds)
[21:17:42] *** Quits: monkey_ (~user@190.104.116.134) (Ping timeout: 244 seconds)
[21:18:39] <Bou> rndusr: doesn't MIN(strlen(b) - 1, 0) still return -1 when the first argument is -1 ?
[21:20:13] <rndusr> right, i ment MAX
[21:20:42] *** Joins: khoa (~khoa@user/khoa)
[21:21:02] <kurahaupo> I hope MIN and MAX are not macros, despite being upper case
[21:23:04] *** Joins: Crescendo (~Crescendo@user/crescendo)
[21:23:33] <kurahaupo> rndusr: I would stop using fgets and use fgetc instead. Then you know you have a single byte that you can check for being '\n' and put it straight into r without using an intermediate buffer b
[21:23:50] <rndusr> and just add it one at a time?
[21:24:18] <kurahaupo> yes. 
[21:24:47] *** Quits: ckdCreations (~ckdCreati@147.55.133.134) (Read error: Connection reset by peer)
[21:24:56] *** Quits: random-nick (~random-ni@87.116.165.220) (Read error: Connection reset by peer)
[21:25:03] *** Joins: ckdCreations (~ckdCreati@c-24-17-50-149.hsd1.wa.comcast.net)
[21:25:06] *** Quits: DPA (~DPA@2a05:41c0:b:db04::a3c:10d) (Ping timeout: 245 seconds)
[21:25:44] <fizzie> Bou: No, `strlen(b) - 1` is SIZE_MAX.
[21:25:46] <kurahaupo> rndusr: Alternatively you could fgets directly onto the tail of the r array
[21:25:51] *** Joins: random-nick (~random-ni@87.116.165.220)
[21:25:56] <fizzie> Bou: (When `b` is an empty string, that is.)
[21:26:05] <rndusr> okay, thanks
[21:26:20] <rndusr> time to reimpliment
[21:27:07] <fizzie> ,cc char b[] = ""; __typeof__(strlen(b) - 1) result = strlen(b) - 1; ptype(result); print(result); // for the record
[21:27:10] <candide> fizzie:  result = unsigned long   result = 18446744073709551615
[21:28:22] *** Joins: DPA (~DPA@2a05:41c0:b:db04::a3c:10d)
[21:29:04] *** Quits: ckdCreations (~ckdCreati@c-24-17-50-149.hsd1.wa.comcast.net) (Ping timeout: 244 seconds)
[21:29:34] *** Joins: Zambyte (~Zambyte@cpe-104-228-60-14.nycap.res.rr.com)
[21:30:19] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[21:30:27] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[21:31:28] <fizzie> Except I guess if the `size_t` type has an integer conversion rank less than that of `int` and SIZE_MAX <= INT_MAX; in that (unlikely) scenario the result would have been signed and -1.
[21:31:54] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[21:33:25] *** Quits: DPA (~DPA@2a05:41c0:b:db04::a3c:10d) (Ping timeout: 252 seconds)
[21:34:09] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Client Quit)
[21:35:23] *** Joins: DPA (~DPA@2a05:41c0:b:db04::a3c:10d)
[21:35:33] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[21:38:24] *** Joins: davidfetter_work (~davidfett@c-73-241-222-148.hsd1.ca.comcast.net)
[21:39:22] *** Quits: kurahaupo (~kurahaupo@220-245-23-126.static.tpgi.com.au) (Read error: Connection reset by peer)
[21:39:39] *** Joins: kurahaupo (~kurahaupo@220-245-23-126.static.tpgi.com.au)
[21:42:24] *** Joins: random-jellyfish (~random-je@user/random-jellyfish)
[21:42:34] *** Joins: skapate (~Skapata@2804:14c:87b0:a6f9:c1a4:be0a:1fc2:e600)
[21:42:34] *** Quits: skapate (~Skapata@2804:14c:87b0:a6f9:c1a4:be0a:1fc2:e600) (Changing host)
[21:42:34] *** Joins: skapate (~Skapata@user/skapata)
[21:42:59] *** Quits: skapata (~Skapata@user/skapata) (Ping timeout: 264 seconds)
[21:43:15] *** Quits: davidfetter_work (~davidfett@c-73-241-222-148.hsd1.ca.comcast.net) (Ping timeout: 260 seconds)
[21:43:40] *** Joins: pucara (~i@host77.181-14-159.telecom.net.ar)
[21:45:40] *** Quits: Ronalds_Mazitis_ (~Ronalds_M@46.109.76.104) (Quit: Connection closed)
[21:48:24] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[21:50:15] *** Quits: Sujmikro (~Sujmikro@cpe-188-252-129-7.zg5.cable.xnet.hr) (Ping timeout: 260 seconds)
[21:51:57] *** Joins: Isonzo (~Isonzo@179.6.201.212)
[21:52:17] <Isonzo> !: discord & disown
[21:52:23] *** Quits: Isonzo (~Isonzo@179.6.201.212) (Client Quit)
[21:58:36] *** Quits: iomari891 (~iomari891@105.112.138.38) (Quit: WeeChat 3.3)
[22:00:55] *** Joins: inomoz (~inomoz@176.59.118.101)
[22:01:01] *** Quits: alch (~alch@151.46.5.72) (Ping timeout: 258 seconds)
[22:02:20] *** Quits: dyeplexer (~dyeplexer@user/dyeplexer) (Remote host closed the connection)
[22:02:39] *** Joins: Sujmikro (~Sujmikro@cpe-188-252-138-63.zg5.cable.xnet.hr)
[22:02:59] *** Joins: alch (~alch@151.68.100.228)
[22:03:40] *** Quits: Crescendo (~Crescendo@user/crescendo) (Ping timeout: 252 seconds)
[22:04:24] *** Quits: hentai (~hentai@user/hentai) (Remote host closed the connection)
[22:04:43] *** Joins: hentai (~hentai@2a01:e0a:a5c:a070:2e61:e501:448:948)
[22:04:43] *** Quits: hentai (~hentai@2a01:e0a:a5c:a070:2e61:e501:448:948) (Changing host)
[22:04:43] *** Joins: hentai (~hentai@user/hentai)
[22:11:45] *** Joins: Crescendo (~Crescendo@user/crescendo)
[22:12:04] *** Joins: orzel (~orzel@2a01:e0a:df:6ba0:6600:577d:a10:3675)
[22:12:31] *** Quits: DPA (~DPA@2a05:41c0:b:db04::a3c:10d) (Ping timeout: 258 seconds)
[22:12:33] *** Joins: DPA- (~DPA@2a05:41c0:b:db04::a3c:10d)
[22:15:24] <orzel> Hello. i have a problem on linux with wcslen() returning wrong values. Wrong, but reproducible... Using googletest : https://dpaste.org/NEav
[22:15:48] <orzel> any idea what i did wrong ? the first returns 14, and the second line returns 7
[22:16:50] <orzel> I do use -fshort-wchar, if that matters... but that doesn't explain it (for me at least)
[22:17:42] *** Quits: quartz (~quartz@user/quartz) (Quit: WeeChat 3.3)
[22:17:47] <sham1> Well it could matter if the libc built assumes for example that the wide character is a 32-bit value
[22:17:54] <sham1> But it's hard to say up-front
[22:18:43] *** Quits: Crescendo (~Crescendo@user/crescendo) (Read error: Connection reset by peer)
[22:18:54] *** Joins: Crescendo (~Crescendo@user/crescendo)
[22:19:14] *** Quits: DPA- (~DPA@2a05:41c0:b:db04::a3c:10d) (Quit: ZNC 1.8.2+deb2~bpo10+1 - https://znc.in)
[22:20:44] *** Joins: davidfetter_work (~davidfett@c-73-241-222-148.hsd1.ca.comcast.net)
[22:20:47] *** Joins: DPA (~DPA@75-128-16-94.static.cable.fcom.ch)
[22:21:23] *** Joins: kadavul (~vazha@103.165.21.199)
[22:23:29] *** Joins: quartz (~quartz@user/quartz)
[22:23:59] <fizzie> ,cc printf("%zu %zu", wcslen(L"aaa"), wcslen(L"aa bb"));
[22:24:02] <orzel> the more i test the more obscur it is. A twenty chars wstring can give me 25 or 35. A 3-chars gives either 21,14, or 16 depending on how i test (assign to a variable or not). I tripled-check all types (size_t, wchar_t...)
[22:24:02] <candide> fizzie: 3 5
[22:24:04] <fizzie> ,cc -fshort-wchar printf("%zu %zu", wcslen(L"aaa"), wcslen(L"aa bb"));
[22:24:06] <candide> fizzie: 24 27
[22:24:35] <fizzie> I don't think you can use `-fshort-wchar` without recompiling your C library.
[22:24:44] <orzel> !!
[22:24:45] <fizzie> ("Warning: the -fshort-wchar switch causes GCC to generate code that is not binary compatible with code generated without that switch.")
[22:25:13] <orzel> Ouch, and that would include the glibc.. ? 
[22:25:30] <sham1> yah
[22:25:38] *** Quits: davidfetter_work (~davidfett@c-73-241-222-148.hsd1.ca.comcast.net) (Ping timeout: 260 seconds)
[22:26:05] <sham1> How necessary is wchar_t for your use-case
[22:26:19] *** Quits: random-jellyfish (~random-je@user/random-jellyfish) (Ping timeout: 256 seconds)
[22:26:31] *** Quits: kadavul (~vazha@103.165.21.199) (Quit: Leaving)
[22:26:51] *** Joins: kadavul (~vazha@103.165.21.199)
[22:27:00] <orzel> The whole project relies on this being 2-char and not 4-char wide. It's some code interacting with (old ibm) as/400.
[22:28:29] <orzel> mm, indeed, the code is dependant on the compile-time size https://code.woboq.org/userspace/glibc/wcsmbs/wcslen.c.html
[22:28:31] <candide> Title of orzel's link: wcslen.c source code [glibc/wcsmbs/wcslen.c] - Woboq Code Browser
[22:29:29] <orzel> i dont even understand the difference between this code and the (obvious):  while (s[len] != L'\0') len++;
[22:29:54] <sham1> One is in the standard library and the other is an explicit loop in your code
[22:30:34] <fizzie> Regarding why exactly you might be getting the wrong values out of wcslen, I would guess it's because with `-fshort-wchar`, the generated string literals will use a two-byte {0, 0} sequence as the string terminator, but the library `wcslen` code compiled *without* `-fshort-wchar` will be looking for four consecutive zero bytes, and will therefore happily attempt read beyond the end of the string.
[22:31:06] <orzel> sham1: i mean i dont understand how what they did is different. There's probably a reason, but can't find it.
[22:31:25] <fizzie> ,cc -fshort-wchar -fsanitize=address printf("%zu", wcslen(L"aaa")); // in fact
[22:31:29] <candide> fizzie: ================================================================= ==46182==ERROR: AddressSanitizer: global-buffer-overflow on address 0x0000004030c8 at pc 0x7f6382bbe641 bp 0x7ffe89ca7380 sp 0x7ffe89ca6b30 READ of size 12 at 0x0000004030c8 thread T0     #0 0x7f6382bbe640 in __interceptor_wcslen.part.0 (/lib64/libasan.so.6+0x4d640)     #1 0x40254a in main      #2 0x7f638299555f in __libc_start_call... <truncated; https://0x0.st/-d41.txt>
[22:31:37] <orzel> fizzie: yes, i totally agree. was already convinced by your (wise) warning quote.
[22:31:47] <sham1> Oh, it might be a smidge faster
[22:34:27] <sham1> glibc has this habit of being written in a "cute" manner
[22:34:59] *** Quits: pucara (~i@host77.181-14-159.telecom.net.ar) (Quit: Lost terminal)
[22:36:11] *** Joins: Darkcoal (~user@2001:16a2:7737:4e00:ccca:93ff:fe44:3285)
[22:37:55] <orzel> One of my developer would do that without a comment, i would fire him ...
[22:38:08] <orzel> And kick him before :)
[22:38:14] *** Joins: davidfetter_work (~davidfett@c-73-241-222-148.hsd1.ca.comcast.net)
[22:39:07] <kadavul> could someone help me on how VLA works in C
[22:39:08] *** Joins: Cleverness (~clevernes@pool-108-54-152-186.nycmny.fios.verizon.net)
[22:39:18] <sham1> First of all, don't
[22:39:58] <sham1> Second of all, basically what happens is that the array gets allocated during runtime from the automatic storage (for example: your stack)
[22:40:21] <sham1> So if you have something like `int foo[bar]`, it will allocate a `bar * sizeof(*foo)` amount of storage within your stack
[22:40:41] <kadavul> is it possible to allocate memory on stack during runtime?
[22:40:45] <sham1> Yes
[22:40:49] <sham1> But again, don't
[22:41:32] <ski> you can use VLAs, without having them in automatic storage
[22:41:46] <sham1> Yeah, with mallocs. And that's better
[22:41:57] <sham1> At least that won't blow one's stack
[22:41:57] <kadavul> so does this applies to delclaring char* x; and using scanf("%s",x); to get string ?
[22:42:06] <sham1> No
[22:42:33] <rcf> The syntax can be used in other contexts where they are technically considered VLAs but not really 
[22:42:41] <ski>   void foo(size_t M,size_t N,int (*pa)[M][N]);
[22:42:44] <sham1> scanf is its own thing, although you can use a VLA to get a backing store for your string. But just like with VLAs, don't
[22:42:55] *** Quits: davidfetter_work (~davidfett@c-73-241-222-148.hsd1.ca.comcast.net) (Ping timeout: 265 seconds)
[22:43:09] <rcf> VLAs are fine if you know their limitations. 
[22:43:25] <sham1> And in that case one knows that it's not worth it most of the time
[22:43:38] <sham1> It's a very niche situation where it's actually useful
[22:43:43] <ski> kadavul : you'd better allocate storage for `x' to point to, there
[22:43:56] <ski> (also, better write `char *x' than `char* x')
[22:44:13] <kadavul> sry my bad
[22:44:24] <kadavul> thanks for the kind info guys : D
[22:44:28] <sham1> Well it's a style thing, but yeah, it's better to have the asterisk next to the identifier
[22:44:54] <kadavul> does using VLA make the program vulnerable to stack overflow ?
[22:45:11] *** Joins: davidfetter_work (~davidfett@c-73-241-222-148.hsd1.ca.comcast.net)
[22:45:18] <sham1> Yes. And there's really no way of checking for it
[22:45:20] <rcf> That is the concern usually. 
[22:45:28] <twkm> hahahahaha.
[22:45:38] <ski> (if you do automatic storage)
[22:45:53] <sham1> Which is what most people mean with VLAs, to be fair
[22:45:59] *** Quits: Darkcoal (~user@2001:16a2:7737:4e00:ccca:93ff:fe44:3285) (Ping timeout: 264 seconds)
[22:47:24] <rcf> I have been told there are implementations that do automatic VLAs with hidden malloc(). 
[22:47:29] *** Joins: Darkcoal (~user@139.64.63.46)
[22:47:31] <twkm> overflowing an objects bounds is always an issue, no matter where it is stored.
[22:47:38] <sham1> rcf: ew
[22:48:33] *** Quits: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net) (Remote host closed the connection)
[22:48:48] *** Joins: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net)
[22:49:09] <sham1> Could at least use calloc to make sure one doesn't overflow in the resulting multiplication
[22:49:36] <kadavul> does char *x;scanf("%s",x); ->store the string in stack? 
[22:49:41] <sham1> No
[22:49:50] <sham1> You need to allocate something to put the string to
[22:49:59] <rcf> If you're worried about stack issues, the reality is that every function call invites the same limitations, potentially. So I'd place automatic VLAs alongside recursion in terms of potential danger. 
[22:50:22] *** Quits: davidfetter_work (~davidfett@c-73-241-222-148.hsd1.ca.comcast.net) (Ping timeout: 260 seconds)
[22:50:26] <twkm> x doesn't point anywhere, automatic, allocated, static ...
[22:50:48] <sham1> Oh it points somewhere
[22:50:49] <twkm> so since it is wild it might be any of those places, or none.
[22:51:44] *** Quits: elkalamar_ (elkalamar@gateway/vpn/airvpn/elkalamar) (Ping timeout: 244 seconds)
[22:51:44] *** Quits: rgrinberg (~textual@ip11-246-50-179.ct.co.cr) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[22:51:46] <twkm> it might cause a fault to attempt to use it.  it might result in scanf storing bytes somewhere.
[22:53:58] *** Joins: elkalamar (elkalamar@gateway/vpn/airvpn/elkalamar)
[22:54:08] <rcf> I prefer a compiler that realizes that it points nowhere and has the program delete itself at runtime instead. 
[22:54:13] <strajder> ski: I'm using char* x, because the type is a pointer to char
[22:54:14] <ski> <ski> kadavul : you'd better allocate storage for `x' to point to, there
[22:54:23] <ski> strajder : don't
[22:54:28] <sham1> rcf: I prefer it when it summons nasal demons
[22:54:28] <strajder> make me :)
[22:54:51] <ski> strajder : consider `char* x,y;'. what is `y' ?
[22:55:07] <strajder> I never declare multiple variables on the same line
[22:55:18] <twkm> some prefer T *p because mostly you'll use *p to get to the T.
[22:55:27] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 258 seconds)
[22:56:13] <twkm> (once you load p with a pointer to a specific T)
[22:56:19] * ski inserts a newline before the comma, for strajder
[22:56:49] <strajder> nah, char* x;<\n>char* y;
[22:57:04] <ski> no, just a newline
[22:57:12] *** Joins: ferdna (~ferdna@user/ferdna)
[22:57:13] <ski> (anyway, that was a jest)
[22:59:47] <strajder> like sham1 said, it's a style thing; there are many different styles and they are all ok to use, what is more important is to pick one style and be consistent
[23:01:22] *** Joins: davidfetter_work (~davidfett@c-73-241-222-148.hsd1.ca.comcast.net)
[23:01:34] <kadavul> i will :D
[23:06:05] *** Quits: davidfetter_work (~davidfett@c-73-241-222-148.hsd1.ca.comcast.net) (Ping timeout: 260 seconds)
[23:07:53] <johnjay> i feel dum. i can't tell the difference between visual studio code and visual studio.
[23:08:28] <khoa> johnjay: Don't be. Microsoft chooses to keep the 2 similar for a reason
[23:08:40] <johnjay> ... wat
[23:09:58] *** Quits: elkalamar (elkalamar@gateway/vpn/airvpn/elkalamar) (Ping timeout: 260 seconds)
[23:10:08] <khoa> The conspiracy is that new people joining the field would get confused and use the latter
[23:10:41] <johnjay> i noticed if i look for haskell extensions visual studio code has 60+ and msvc has 1
[23:10:49] <johnjay> so i assume there's a reason for that
[23:10:50] *** Quits: kurahaupo (~kurahaupo@220-245-23-126.static.tpgi.com.au) (Read error: Connection reset by peer)
[23:11:05] *** Joins: kurahaupo (~kurahaupo@220-245-23-126.static.tpgi.com.au)
[23:11:26] <kadavul> guys what's ur opinion on co-pilot ?
[23:11:59] <sham1> Sounds like a great way of getting code of a wrong license into one's own codebase
[23:12:22] <kadavul> wow that hit hard 
[23:12:39] <khoa> johnjay: I believe Visual Studio's extensions are handpicked by Microsoft no ?
[23:12:48] <johnjay> oh that would explain it
[23:12:53] <khoa> While VSCode's ones are from the community
[23:13:04] <johnjay> also vscode isn't a compiler suite. allegedly
[23:13:18] <khoa> Not sure about Haskell, but I've heard that C# extensions for VSCode are dogshit
[23:13:53] <kadavul> how does the msvc build tools compare to g++ for building c++ programs?
[23:14:19] <kadavul> is gcc better than the latter?
[23:14:28] <khoa> kadavul: I suspect not a lot of people in #C would care about copilot. Try asking #javascript or channel of webdev maybe
[23:15:06] <kadavul> oh my bad 
[23:15:10] *** Quits: retro_ (~retro@2e41e9c8.skybroadband.com) (Ping timeout: 252 seconds)
[23:15:31] <sham1> Well the GCC suite is free software, so if that's important for you then yeah… As far as using the MSVC suite, well, they of course have their own extensions to both C and C++ which are incompatible with the ones in GCC or I think also clang
[23:15:35] *** Joins: adwwad123 (~adwwad123@2a02:2698:182a:f21:c04d:48e5:6c83:6c63)
[23:15:56] <NRK[m]> i think copilot pasted carmack's fast inverse sqroot function word to word
[23:15:57] <NRK[m]> with the wrong license :D
[23:15:57] <sham1> Also the MSVC stuff was way behind on support for various things for a long time
[23:16:25] <sham1> For example IIRC it rather infamously never implemented C11 threads, or did it way later than other stuff
[23:16:30] <NRK[m]> and when i say word to word, it pasted the "what the fuck" comment as well
[23:16:36] <khoa> Well MSVC hates C, so there's that
[23:16:57] <sham1> Well from what I understand, it's gotten better. IIRC they actually support C17
[23:17:43] <khoa> I would be surpised if they do
[23:18:00] <sham1> I remember when visual studio would yell at me for doing "struct foo *foo = malloc(sizeof(*foo));` even though I had set it to C11 mode by way of cmake. Warning me that I should "cast the return value"
[23:18:34] <sham1> khoa: yeah, they do. https://devblogs.microsoft.com/cppblog/c11-and-c17-standard-support-arriving-in-msvc/
[23:18:47] <sham1> It was last year
[23:21:02] <khoa> sham1: Well it surely supports C11
[23:21:13] <khoa> Just happen to skip all the optional features
[23:22:18] <twkm> which is most features added since 1995.
[23:22:39] *** Joins: retroid_ (~retro@2e41e9c8.skybroadband.com)
[23:24:04] *** Quits: esselfe (~steph@user/esselfe) (Quit: poweroff -f)
[23:24:27] *** Joins: cmbengue (~Thunderbi@207.191.249.160)
[23:25:31] <khoa> So do they support C11 thread and atomic now ?
[23:26:33] <sham1> Apparently "on the roadmap" on the blog post, but I don't know where it is. I don't exactly follow Microsoft stuff
[23:26:34] *** Quits: quartz (~quartz@user/quartz) (Quit: WeeChat 3.3)
[23:27:38] <khoa> Correct me if I'm wrong
[23:28:11] <khoa> But the threading model of C11 is not even compatible with pthread
[23:29:01] <khoa> So that msvc would get an easier time implementing
[23:31:24] <twkm> it was intended the threads not be exactly the same as one system at the expense of others so while they were based on posix threading they aren't identical.
[23:31:42] <khoa> https://gustedt.wordpress.com/2012/10/14/c11-defects-c-threads-are-not-realizable-with-posix-threads/
[23:32:12] <Brewster> Hey I'm getting an odd error that google really isn't helping me with. "Fatal error: glibc detected an invalid stdio handle". It happens on the curl_easy_perform line and I'm not sure what to do. https://pastebin.com/kpUXnUxq
[23:32:33] <Brewster> Sorry for not using the pastebin in the topic. Everything works just fine without the curl stuff so I was hoping someone could just point out if I was doing something wonky.
[23:32:39] <twkm> not a c program.  try #c++
[23:33:01] <Brewster> I meeeeeeeeaan it's close enough
[23:33:06] *** Joins: Guest8099 (~Guest80@S01069050ca4e3573.cg.shawcable.net)
[23:33:13] <Brewster> it's not really a problem specific to c++
[23:33:30] <twkm> then a merely close enough response: it still isn't a fucking c program, and you aren't using a stdio handle.
[23:33:33] <khoa> Brewster: oh no you didn't
[23:33:41] <sham1> >.>
[23:33:44] <Brewster> le sigh
[23:34:15] <twkm> exactly what i say when it would have taken less time for people to accept the redirection.
[23:34:25] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Ping timeout: 252 seconds)
[23:34:47] <Brewster> actually
[23:34:57] <floatcomplex> as a c and not c++ programmer i can legitimately say i don't know what an invalid stdio handle is
[23:34:59] <Brewster> that may have helped
[23:35:04] *** Joins: kuber (~kuber@97-113-74-6.tukw.qwest.net)
[23:35:12] <floatcomplex> but i also don't use glibc other than when using asan
[23:36:58] <sham1> musl usually?
[23:37:48] <khoa> Brewster: if I have to guess, I would guess the problem is in line 58
[23:38:01] *** Quits: astronaut (~annada@103.160.128.31) (Ping timeout: 265 seconds)
[23:38:08] <khoa> https://curl.se/libcurl/c/CURLOPT_WRITEDATA.html
[23:38:54] *** Quits: Crescendo (~Crescendo@user/crescendo) (Ping timeout: 260 seconds)
[23:38:58] <twkm> debugging is hard too.  still #c++ can probably help with that too.
[23:39:02] <khoa> The 3rd argument should be a FILE*, not whatever you are doing
[23:39:26] *** Joins: magla (~gelignite@55d43ee1.access.ecotel.net)
[23:42:08] <twkm> reading docs is also hard, though i don't think #c++ helps much with that.
[23:43:09] <floatcomplex> sham1: musl, newlib, macos libc, and glibc are the ones i care about, in that order
[23:43:17] <sham1> Hm
[23:43:30] <floatcomplex> and only glibc for the leak sanitizer
[23:43:32] <khoa> twkm: Certain crowd would tell you to just use IDE
[23:43:45] <floatcomplex> macos libc has address sanitizer but not leak sanitizer
[23:43:46] <twkm> indeed, but that's not topical either.
[23:44:25] <Brewster> khoa: thanks!
[23:44:32] <khoa> Huh it's the first time I'm seeing newlib
[23:44:35] <floatcomplex> but if you manage to write code that works in those other three libc's and not in glibc, congratulations
[23:44:40] <khoa> How is it compared to ulibc ?
[23:44:44] <Brewster> I actually was figuring that from tkwm said
[23:44:53] <floatcomplex> newlib is kinda the default libc for arm-none-eabi-gcc
[23:45:48] <Brewster> the code example I used was from a git code snippet so I guess I just assumed that was working
[23:46:26] <twkm> yay cargo.
[23:46:50] *** Joins: davidfetter_work (~davidfett@c-73-241-222-148.hsd1.ca.comcast.net)
[23:47:12] <floatcomplex> khoa: never used uclibc, i think they stopped developing it like ten years ago right?
[23:47:31] <floatcomplex> newlib isn't exactly cutting edge either but it's feature complete
[23:47:39] <khoa> floatcomplex: Oh really ?
[23:47:54] <khoa> I don't know I sometimes have to work with MIPS routers
[23:48:15] <khoa> Most routers from rando vendors use uclibc for some reasons
[23:48:19] <floatcomplex> khoa: yeah it says final release 9 years ago
[23:48:42] <floatcomplex> i see musl on routers now
[23:48:45] <floatcomplex> mips ones
[23:49:17] <khoa> Yeah I see some as well, but much fewer
[23:50:05] <fizzie> OpenWRT still uses (a fork of?) uClibc as far as I know, I imagine that may have something to do with its use on random networking hardware.
[23:50:49] <fizzie> Yeah, something called "uClibc-ng", latest release this month.
[23:51:19] *** Joins: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net)
[23:52:26] *** Quits: davidfetter_work (~davidfett@c-73-241-222-148.hsd1.ca.comcast.net) (Ping timeout: 260 seconds)
[23:53:30] <khoa> I see
[23:54:08] *** Joins: subdelusional (~user@188.249.169.186)
[23:54:56] <subdelusional> hello, can someone help me understand why in dirent.h the directory entry "dirent" struct is not typedef? (like DIR for example)
[23:56:05] <fizzie> Does there need to be a specific reason for that? It's not like the (standard's) `struct tm` or `struct timespec` would have typedefs either.
[23:56:09] <twkm> doesn't really matter does it?  but history.
[23:56:34] *** Quits: marcello42 (~mp@p200300dfaf07ff01fa2e52f98b4dfc80.dip0.t-ipconnect.de) (Quit: Konversation terminated!)
[23:57:57] *** Joins: Ard1t (~ard1t@ip5f5ac7ad.dynamic.kabel-deutschland.de)
[23:58:13] *** Quits: Ard1t (~ard1t@ip5f5ac7ad.dynamic.kabel-deutschland.de) (Changing host)
[23:58:13] *** Joins: Ard1t (~ard1t@user/ard1t)
[23:58:42] <fizzie> Usually types tend to get `typedef`s when they're "opaque", i.e., when you don't access their guts directly. But with `struct dirent` (and those others), you *do* access fields of the struct. So there's no way of hiding it must be a struct type. Unlike, say, `FILE` or `DIR`, which you only deal with by getting pointers to them as return values and passing those back to other functions.
[23:59:28] *** Joins: Isonzo (~Isonzo@179.6.201.212)
[23:59:53] <fizzie> (Don't bring up `div_t`, that argument/rationale breaks on it. In the end, it's pretty arbitrary.)
