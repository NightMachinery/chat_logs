[00:00:08] *** Quits: lisp123 (~lisp123@5.30.23.247) (Quit: Leaving...)
[00:01:38] <_death> hopefully your work will result in some love to cl-tls.. it has some potential for lisp, dunno why the author stopped working on it
[00:09:01] <_death> note that if you're dealing with certificates, you also need to check that they are not expired, or possibly revoked
[00:09:15] <Josh_2> Well I'd hope they aren't considering its paypal
[00:09:23] <Josh_2> Just gonna run on trust for now anyway
[00:09:31] <Josh_2> Still not got my verification working
[00:09:34] <_death> they have an expiration date
[00:09:46] <_death> and cl-tls has ocsp code as well
[00:10:09] <Josh_2> each request they send a new url to get the signature from
[00:10:45] <_death> yeah, but you still need to check that
[00:11:03] <Josh_2> :(
[00:11:05] <_death> maybe not ocsp
[00:11:09] <_death> but the date, yeah
[00:11:13] <Josh_2> lemme get the verification working then I'll do that
[00:11:49] <_death> also you need to make sure that the cert is signed by the a trusted root
[00:11:55] <_death> (paypal)
[00:12:05] <_death> crypto is hard ;)
[00:13:14] <Josh_2> Yeh
[00:14:19] <Josh_2> I would have just let paypal do it, they have an api call that lets you verify their webhooks
[00:14:28] <Josh_2> but that wasn't working as I complained about earlier
[00:14:47] <_death> are there no paypal lisp libs already?
[00:15:37] <Josh_2> There is the one I made
[00:15:45] <Josh_2> And ones that are really old
[00:16:00] <_death> I see
[00:16:13] <Josh_2> I'm gonna put this verification into my paypal wrapper (when it works :( )
[00:16:26] <Josh_2> The verification that is
[00:22:27] *** Quits: cage (~cage@dynamic-adsl-84-220-249-98.clienti.tiscali.it) (Quit: rcirc on GNU Emacs 27.1)
[00:31:21] *** Joins: Krystof (~user@81.174.155.115)
[00:32:43] *** Joins: Bike (~Bike@71.69.170.70)
[00:32:43] *** ChanServ sets mode: +o Bike
[00:37:31] <Josh_2> Well I have gotten it to return nil xD
[00:39:26] *** Joins: reggie_ (~reggie_@c-76-22-59-85.hsd1.wa.comcast.net)
[00:40:49] *** Quits: reggie_ (~reggie_@c-76-22-59-85.hsd1.wa.comcast.net) (Remote host closed the connection)
[00:44:23] <Josh_2> https://plaster.tymoon.eu/view/2691#2691 the pain
[00:45:09] <Josh_2> Haven't gotten it to return a t yet :(
[00:46:10] <_death> the arguments are in the wrong order
[00:46:16] <Josh_2> oof
[00:46:47] <Josh_2> The arguments to verify?
[00:46:53] <_death> oh, I was looking at %verify-message
[00:47:43] <Josh_2> I'm not sure if I'm calculating the CRC correcting
[00:48:01] <Josh_2> correctly*. I know its meant to be an integer but does the ironclad built in function return the correct result idk
[00:48:36] <_death> do you not have some test vectors
[00:48:43] <Josh_2> I do
[00:49:02] <Josh_2> I have a webhook from paypal
[00:49:20] <Josh_2> but no I didn't test the crc
[00:49:22] <Josh_2> lemme go see
[00:50:19] <Josh_2> Well I put abcde into an online crc32 generator and got a different result with mine
[00:50:22] <Josh_2> uff
[00:51:01] <_death> there are several variants of crc.. but usually when it's finalized, it's xored with #xffffffff
[00:51:28] <Josh_2> https://stackoverflow.com/questions/61651765/how-to-verify-paypal-webhook-signature is that what this guy is doing with his?
[00:51:42] <Josh_2> He is looping over each by and and i have no idea
[00:52:00] <Josh_2> This is such a pita I just wanna take paypal payments :joy:
[00:52:25] <_death> looks like you want ~8,'0X for the crc
[00:52:38] <_death> well, in lowercase
[00:53:36] <_death> (format nil "~(~8,'0X~)" #xdeadbeef)
[00:53:38] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[00:56:30] <Josh_2> Hmm I dont think I did it right
[00:56:54] <Josh_2> Man I really suck at this stuff
[00:57:23] <Josh_2> I can use ironclad to return a hex string
[00:57:46] <_death> yeah
[00:58:14] *** Quits: Krystof (~user@81.174.155.115) (Ping timeout: 260 seconds)
[00:58:15] <_death> it might be little/big endian confusion
[00:58:26] <Josh_2> That gives me the same result as from the online calculator
[00:58:40] <Josh_2> but I dont know whether i want the hex or the decimal appended to my 'expected signature'
[00:59:16] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 245 seconds)
[00:59:19] <_death> the C# code has foreach (byte b in crc32.ComputeHash(arrayOfBytes)) hash += b.ToString("x2").ToLower();
[00:59:19] <_death>  
[00:59:22] <Josh_2> my word, that C# code uses 'to lower' :(
[00:59:55] <Josh_2> I dont know what that means
[01:00:09] <Josh_2> Everything is like an ELI5 for me right now :joy:
[01:00:19] <Josh_2> I need to go back to preschool
[01:00:24] <_death> it means to lowercase.. basically the output you get from ironclad:byte-array-to-hex-string
[01:00:32] <Josh_2> Ah
[01:00:49] <Josh_2> so I already have it (yes I got the to lower part, I meant what that meant in regards to my result)
[01:01:04] <Josh_2> So now I assume I am computing the correct crc, I wonder what else is wrong then
[01:01:52] <_death> it also needs pkcs1 padding
[01:02:45] <Josh_2> :facepalm:
[01:03:01] <Josh_2> Isn't that the default for verify?
[01:04:03] *** Parts: mason (~mason@redhat/mason) ()
[01:04:36] <Josh_2> Ah, says in the ironclad manual that pkcs1 has to be implemented by the user
[01:04:38] <Josh_2> (at this time)
[01:05:02] *** Quits: pve (~pve@178-55-112-13.bb.dnainternet.fi) (Quit: leaving)
[01:05:33] <Josh_2> cl-tls has cl-tls:rsassa-pkcs1.5-verify
[01:07:08] <Josh_2> https://github.com/sharplispers/ironclad/issues/41
[01:07:52] <_death> yeh.. maybe cl-tls will do
[01:09:04] <Josh_2> So now I can get rid of using ironclads signature verify (and everything that went along with generating the pubkey) and instead use the cl-tls ?
[01:09:36] <_death> first check that it works
[01:11:13] <Josh_2> Hmm I think its actually using ironclads
[01:11:35] <Josh_2> Well it returns nil when I use that
[01:12:18] <Josh_2> https://plaster.tymoon.eu/view/2692#2692
[01:12:49] <Josh_2> I have to go now, shame its not sorted :( I really really appreciate all of your help _death there is about 0% chance I would have been able to get this far on my own
[01:14:30] <_death> no sweat.. don't give up, it'll work out ;)
[01:20:33] *** Quits: peterhil (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi) (Ping timeout: 265 seconds)
[01:25:04] *** Parts: McParen (~mcp@user/mcparen) ()
[01:31:23] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[01:32:31] *** Quits: mfiano (~user@2603-7081-2d02-95bd-0250-b6ff-fef3-da40.res6.spectrum.com) (Remote host closed the connection)
[01:34:11] *** Joins: mfiano (~user@2603-7081-2d02-95bd-0250-b6ff-fef3-da40.res6.spectrum.com)
[01:34:35] *** Quits: hobo (~hobo@69.218.33.204) (Ping timeout: 264 seconds)
[01:34:50] *** Joins: hobo (~hobo@2600:1700:8972:63f:3313:2d33:be9f:8246)
[01:41:20] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 268 seconds)
[01:43:54] *** Quits: hobo (~hobo@2600:1700:8972:63f:3313:2d33:be9f:8246) (Ping timeout: 260 seconds)
[01:45:38] *** Quits: varjag (~user@2a02:2121:283:4033:c018:db4:ccfd:fea5) (Ping timeout: 246 seconds)
[01:47:13] *** Joins: peterhil (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi)
[01:51:43] *** Quits: ahc85 (~ahc@121.98.229.241) (Quit: Client closed)
[01:57:37] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Quit: ERC (IRC client for Emacs 27.1))
[01:58:26] *** Quits: Posterdati (~posterdat@host-79-17-4-141.retail.telecomitalia.it) (Ping timeout: 245 seconds)
[02:06:17] *** Quits: Devon (~devon@c-69-138-77-21.hsd1.va.comcast.net) (Ping timeout: 246 seconds)
[02:08:09] *** Joins: hobo (~hobo@2600:1700:8972:63f:3313:2d33:be9f:8246)
[02:10:23] *** Quits: mfiano (~user@2603-7081-2d02-95bd-0250-b6ff-fef3-da40.res6.spectrum.com) (Remote host closed the connection)
[02:10:59] *** Joins: mfiano (~user@2603-7081-2d02-95bd-0250-b6ff-fef3-da40.res6.spectrum.com)
[02:11:02] *** Quits: peterhil (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi) (Ping timeout: 260 seconds)
[02:12:20] *** Joins: Posterdati (~posterdat@host-79-17-4-141.retail.telecomitalia.it)
[02:19:07] *** Quits: hobo (~hobo@2600:1700:8972:63f:3313:2d33:be9f:8246) (Ping timeout: 260 seconds)
[02:19:11] *** Joins: peterhil (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi)
[02:22:34] *** Joins: hobo (~hobo@2600:1700:8972:63f:3313:2d33:be9f:8246)
[02:28:08] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[02:56:32] *** Quits: Jach (~Jach@2601:600:8600:307:7e31:e7a7:f1f3:a96b) (Quit: Leaving.)
[02:57:12] *** Joins: X-Scale` (~ARM@50.77.166.178.rev.vodafone.pt)
[02:57:23] *** Quits: X-Scale (~ARM@83.223.251.139) (Ping timeout: 264 seconds)
[02:58:55] *** X-Scale` is now known as X-Scale
[03:00:11] *** Quits: Bike (~Bike@71.69.170.70) (Quit: Connection closed)
[03:00:52] *** Joins: Jach (~Jach@2601:600:8600:307:7e31:e7a7:f1f3:a96b)
[03:15:41] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[03:18:40] *** Quits: rgherdt (~rgherdt@2a02:8109:86c0:d8d:1581:8730:7925:b76d) (Ping timeout: 260 seconds)
[03:20:17] *** Quits: mfiano (~user@2603-7081-2d02-95bd-0250-b6ff-fef3-da40.res6.spectrum.com) (Remote host closed the connection)
[03:21:51] *** Joins: mfiano (~user@2603-7081-2d02-95bd-0250-b6ff-fef3-da40.res6.spectrum.com)
[03:22:35] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 264 seconds)
[03:23:59] *** Quits: taiju (~taiju@M014013236064.v4.enabler.ne.jp) (Ping timeout: 246 seconds)
[03:29:54] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 276 seconds)
[03:30:25] *** Joins: hendursaga (~weechat@user/hendursaga)
[03:33:33] *** Quits: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f) (Remote host closed the connection)
[03:41:01] *** Joins: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz)
[03:41:49] *** Joins: taiju (~taiju@M014013236064.v4.enabler.ne.jp)
[03:42:39] *** Joins: epolanski (uid312403@id-312403.helmsley.irccloud.com)
[03:44:24] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[03:48:50] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 246 seconds)
[03:50:23] *** Joins: Devon (~devon@pool-108-28-172-103.washdc.fios.verizon.net)
[03:50:41] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[03:51:50] *** Quits: taiju (~taiju@M014013236064.v4.enabler.ne.jp) (Ping timeout: 260 seconds)
[03:59:47] *** Quits: Inline (~Inline@2a02:908:1252:7a80:b384:bd52:ad64:846c) (Ping timeout: 264 seconds)
[04:02:07] *** Quits: Skyfire (~pyon@user/pyon) (Quit: brb)
[04:02:35] *** Joins: Skyfire (~pyon@user/pyon)
[04:10:15] *** Quits: Devon (~devon@pool-108-28-172-103.washdc.fios.verizon.net) (Read error: Connection reset by peer)
[04:10:44] *** Joins: Devon (~devon@pool-108-28-172-103.washdc.fios.verizon.net)
[04:11:21] *** Quits: random-nick (~random-ni@87.116.179.142) (Ping timeout: 245 seconds)
[04:33:30] *** Joins: Bike (~Bike@71.69.170.70)
[04:33:30] *** ChanServ sets mode: +o Bike
[04:33:47] *** Joins: karlosz (~karlosz@47.151.136.69)
[04:36:21] *** Joins: taiju (~taiju@M014013236064.v4.enabler.ne.jp)
[04:42:05] *** Quits: paule32 (~paule32@user/paule32) (Ping timeout: 260 seconds)
[04:46:43] *** Joins: mfiano_ (user@2600:3c03::f03c:91ff:fe7a:6d7f)
[04:47:12] *** Quits: mfiano_ (user@2600:3c03::f03c:91ff:fe7a:6d7f) (Remote host closed the connection)
[04:48:35] *** Joins: mfiano_ (user@2600:3c03::f03c:91ff:fe7a:6d7f)
[04:48:55] *** Joins: akoana (~ah@user/akoana)
[04:51:08] *** Joins: ec_ (~ec@gateway/tor-sasl/ec)
[04:52:30] *** Quits: mfiano_ (user@2600:3c03::f03c:91ff:fe7a:6d7f) (Remote host closed the connection)
[05:00:36] *** Quits: mfiano (~user@2603-7081-2d02-95bd-0250-b6ff-fef3-da40.res6.spectrum.com) (Remote host closed the connection)
[05:01:27] *** Joins: mfiano (user@2600:3c03::f03c:91ff:fe7a:6d7f)
[05:02:06] *** Quits: mfiano (user@2600:3c03::f03c:91ff:fe7a:6d7f) (Read error: Connection reset by peer)
[05:04:00] *** Joins: mfiano (user@2600:3c03::f03c:91ff:fe7a:6d7f)
[05:15:02] *** ec_ is now known as ec
[05:16:56] *** Joins: Oladon (~olad@98.43.81.226)
[05:17:48] *** Joins: s-liao (~s-liao@101.86.103.113)
[05:21:17] *** Joins: domovod (~domovod@ec2-35-165-86-158.us-west-2.compute.amazonaws.com)
[05:23:47] *** Quits: vats (~vats@103.158.91.51) (Ping timeout: 264 seconds)
[05:31:45] *** Quits: srhm (~srhm@user/srhm) (Ping timeout: 268 seconds)
[05:33:56] *** Quits: peterhil (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi) (Remote host closed the connection)
[05:39:38] *** Quits: domovod (~domovod@ec2-35-165-86-158.us-west-2.compute.amazonaws.com) (Ping timeout: 260 seconds)
[05:44:54] *** Parts: pranavats (3fba1d1b34@jabberfr.org) ()
[06:07:21] *** Quits: Bike (~Bike@71.69.170.70) (Quit: Connection closed)
[06:22:35] *** Quits: hendursaga (~weechat@user/hendursaga) (Quit: hendursaga)
[06:23:05] *** Joins: hendursaga (~weechat@user/hendursaga)
[06:26:47] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 264 seconds)
[06:34:49] *** Joins: lisp123 (~lisp123@5.30.23.247)
[06:41:00] *** Joins: pranavats (3fba1d1b34@jabberfr.org)
[06:58:32] *** Joins: Bike (~Bike@71.69.170.70)
[06:58:32] *** ChanServ sets mode: +o Bike
[06:59:42] *** Quits: s-liao (~s-liao@101.86.103.113) (Quit: Client closed)
[07:03:14] *** Quits: Josh_2 (~user@37.25.47.130) (Ping timeout: 268 seconds)
[07:05:54] *** Joins: s-liao (~s-liao@101.86.103.113)
[07:06:21] *** Joins: Guest93 (~Guest93@190.193.92.32)
[07:10:51] *** Quits: Guest93 (~Guest93@190.193.92.32) (Quit: Client closed)
[07:31:06] <beach> Good morning everyone!
[07:31:23] *** Quits: s-liao (~s-liao@101.86.103.113) (Quit: Ping timeout (120 seconds))
[07:34:23] *** Joins: s-liao (~s-liao@101.86.103.113)
[07:36:38] *** Joins: bcasiello (~bcasiello@066-189-087-112.biz.spectrum.com)
[07:42:59] *** Quits: Bike (~Bike@71.69.170.70) (Quit: Bike)
[07:43:35] *** Quits: taiju (~taiju@M014013236064.v4.enabler.ne.jp) (Ping timeout: 264 seconds)
[07:45:05] *** Quits: semz (~none@user/semz) (Ping timeout: 264 seconds)
[07:45:17] *** Joins: taiju (~taiju@M014013236064.v4.enabler.ne.jp)
[07:52:06] *** Quits: taiju (~taiju@M014013236064.v4.enabler.ne.jp) (Ping timeout: 260 seconds)
[07:52:53] *** Joins: taiju (~taiju@M014013236064.v4.enabler.ne.jp)
[07:57:10] *** Joins: semz (~none@user/semz)
[07:57:49] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[07:58:41] *** Joins: lisp123 (~lisp123@5.30.23.247)
[07:59:04] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[08:00:30] *** Quits: taiju (~taiju@M014013236064.v4.enabler.ne.jp) (Ping timeout: 260 seconds)
[08:00:47] *** Quits: s-liao (~s-liao@101.86.103.113) (Ping timeout: 256 seconds)
[08:02:36] *** Joins: s-liao (~s-liao@101.86.103.113)
[08:03:22] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 260 seconds)
[08:05:17] *** Joins: taiju (~taiju@M014013236064.v4.enabler.ne.jp)
[08:20:11] *** Quits: bcasiello (~bcasiello@066-189-087-112.biz.spectrum.com) (Ping timeout: 264 seconds)
[08:23:00] *** Quits: Skyfire (~pyon@user/pyon) (Quit: brb broken config)
[08:23:21] *** Joins: Skyfire (~pyon@user/pyon)
[08:27:15] *** Quits: mrcom_ (~mrcom@99-73-215-70.lightspeed.irvnca.sbcglobal.net) (Read error: Connection reset by peer)
[09:07:14] *** Joins: mrcom_ (~mrcom@99-73-215-70.lightspeed.irvnca.sbcglobal.net)
[09:09:55] *** Quits: s-liao (~s-liao@101.86.103.113) (Ping timeout: 256 seconds)
[09:26:06] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[09:27:44] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[09:31:14] *** Joins: x-x (~x@user/x-x)
[09:32:11] *** Quits: epolanski (uid312403@id-312403.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[09:36:22] *** Parts: akoana (~ah@user/akoana) ()
[09:45:28] *** Joins: s-liao (~s-liao@101.86.103.113)
[09:53:54] *** Quits: taiju (~taiju@M014013236064.v4.enabler.ne.jp) (Ping timeout: 260 seconds)
[09:59:47] *** Quits: s-liao (~s-liao@101.86.103.113) (Ping timeout: 256 seconds)
[10:01:19] *** Joins: taiju (~taiju@M014013236064.v4.enabler.ne.jp)
[10:05:24] *** Quits: phantomics (~phantomic@71-218-252-43.hlrn.qwest.net) (Quit: Ex-Chat)
[10:10:50] *** Joins: gin (~gin@user/gin)
[10:11:14] <gin> found this question in an interpreters book - "Most Lisp implementations that compile to C also contain an interpreter that lets them execute Lisp code on the fly as well. Why?"
[10:11:28] <gin> need help in understanding this. why?
[10:12:13] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[10:12:29] <hayley> I can't think of very many Lisp implementations that compile to C these days.
[10:13:16] <hayley> If you have a Lisp implementation which uses its own compiler backend, and an implementation which uses a C compiler as a backend, you could do an experiment and observe how fast each compiler is.
[10:17:01] <hayley> ...and then, compare that to an implementation which doesn't generate native code ever (such as CLISP). Something like (time (dotimes (i 100) (compile nil '(lambda () 2)))) should give you that information.
[10:17:48] <gin> hayley: okay. I want to understand the latter part of that question. why do implementations also contain an interpreter to execute Lisp code on the fly? is it to support interactive development?
[10:18:26] <hayley> Not necessarily, you could compile every form evaluated.
[10:19:39] <hayley> I don't really see why they needed to specify that the Lisp implementation should generate C code, but I guess what I am thinking of is more significant with a C compiler.
[10:19:57] *** Joins: s-liao (~s-liao@101.86.103.113)
[10:21:18] <gin> ok. thanks for the insight.
[10:23:12] *** Joins: lisp123 (~lisp123@5.30.23.247)
[10:24:09] <hayley> I think I know the answer, but it isn't very enlightening on its own. And the question is silly, because you can still execute "on the fly" with a compiler.
[10:24:49] <hayley> (Say, EVAL could be implemented like (defun eval (form) (funcall (compile nil `(lambda () ,form)))) if you only have a compiler.)
[10:26:52] <beach> Perhaps it is considered slow to generate C code, compile a file, and load the resulting binary, so that this technique would be reserved for COMPILE-FILE.
[10:27:21] <beach> But which Common Lisp implementations other than ECL compile to C?
[10:27:36] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 245 seconds)
[10:27:58] <beach> gin: When was the book published?
[10:28:27] <hayley> That is what I was thinking of, but it's also not certain that the C compiler is slower than a Lisp compiler (though, practically, the C compiler is slower). And then some Lisp implementations with their own backends, like SBCL, still use an interpreter for EVAL.
[10:28:44] <hayley> beach: 2021.
[10:29:12] <beach> hayley: Oh, you know which book was referred to?
[10:29:25] <hayley> beach: Yes, it's in the question section of Chapter 2 of Crafting Interpreters.
[10:29:33] <gin> yes, crafting interpreters book
[10:29:49] <beach> Oh, OK.
[10:29:54] <hayley> (Challenge #3 in https://craftinginterpreters.com/a-map-of-the-territory.html#challenges)
[10:30:22] <gin> anyway seems like it is not useful to think about that question too much
[10:31:16] <beach> Right.
[10:31:48] <beach> I was asking about the date, because a few decades ago, it might have been to slow to do the C file compilation for interactive evaluation.  But not anymore.
[10:33:39] <hayley> I performed the experiment I described, and ECL (using GCC) is at least three magnitudes slower than SBCL at compilation. But repeatedly compiling (LAMBDA () 2) is perhaps too simple, if we want to model the sorts of forms entered at a REPL.
[10:36:20] <hayley> Or, since we are more concerned with absolute times, it appears ECL took 180ms to compile on average, which is not very long, but not as "instantaneous" as one might like it to be.
[10:37:03] <beach> Sure.  But it would be interesting to know how the author established the basis for the question.
[10:37:31] <hayley> Yes, definitely.
[10:39:16] *** Joins: horar (~horar@49.145.146.182)
[10:39:48] <jackdaniel> I think that a fairer comparison would be compiling some library with empty cache. ecl still will be slow, but not 3 magnitudes slower
[10:40:09] <jackdaniel> when you take small compilation target then gcc startup time shows easily
[10:40:51] <beach> jackdaniel: But the interesting comparison was for interactive evaluation of forms.
[10:41:03] <jackdaniel> sure, but then ecl doesn't invoke gcc but bytecompiler
[10:41:11] <jackdaniel> unless you explicitly call (compile '(lambda …))
[10:41:24] <jackdaniel> and that is not the typical scenario for interactive evaluation
[10:41:28] <beach> I think that's what the question is referring to.
[10:42:07] <hayley> Yes, I was calling COMPILE, because that is described as the alternative to having a bytecode evaluator or a naive interpreter for interactive evaluation.
[10:43:10] <jackdaniel> I see
[10:44:22] <jackdaniel> it is worth noting, that using tcc would shorted that time too (so it is not only whether you compile with c - it is also what compiler you use)
[10:45:04] <hayley> Right again.
[10:46:43] <hayley> You have more options than naive interpretation and running an optimising compiler, such as bytecode or a faster compiler, and then you could (with some error) statically guess which evaluator would be the fastest, or use runtime metering.
[10:49:12] <jackdaniel> as of implementations that compile to c (besides ecl): gcl and mkcl, but all three are direct or indirect offsprings from kcl
[10:50:30] <jackdaniel> both are interesting for comparison, because gcl interprets forms in the repl (i.e walks them) while mkcl statically links tcc (if I remember correctly), so each exhibits a different strategy to working with repl
[10:50:44] <jackdaniel> bytecodes vm, interpretation and compilation to c
[10:54:33] <beach> Interesting.
[10:55:13] <beach> The question still seems to be like the author just want to push the agenda that learning about interpreters is important.
[10:56:56] *** Joins: mjoerg (~user@user/mjoerg)
[10:57:09] <jackdaniel> I suppose that when you have a website that has "interpreters" in domain you believe that they are at least somewhat relevant :)
[10:57:43] <jackdaniel> s/domain/domain then/
[11:03:51] *** Joins: pve (~pve@178-55-197-227.bb.dnainternet.fi)
[11:05:40] <beach> Exactly.
[11:09:41] <hayley> interpreters-stink.com (an illustrative domain which hopefully doesn't exist)
[11:10:49] *** Quits: mjoerg (~user@user/mjoerg) (Remote host closed the connection)
[11:11:52] <jackdaniel> if you proactively dislike something then it means that it is relevant enough for you to try to deter other people from it ;]
[11:12:30] <hayley> With the .sucks TLD you can also do interpretation.sucks, but that is more expensive.
[11:30:52] *** Joins: igemnace (~ian@user/igemnace)
[11:31:52] <pve> Good morning! I need to wait around for a few hours every week at my local library. Ususally I just read, but recently I figured I might use the time to try to sketch out some code in a notebook, and implement later when I get home. The only problem is, it doesn't come naturally to me (probably due to lack of practice).
[11:32:12] <pve> Does anyone here design (CL) programs on pen and paper? Do you have a "system" that works?
[11:32:52] <jackdaniel> I often scribble in my notebook, but it is a mixed notation with blocks, arrows and some lisp code (without parenthesis)
[11:32:56] <hayley> I think I did once, but it was for a fairly "mathematical" program, and I wrote it all in M-expressions.
[11:33:59] <jackdaniel> usually to improve my understanding of a problem I'm thinking about (not to write a complete program) -and some prose to write down some requirements and suggestions for myself
[11:35:01] *** Joins: rgherdt (~rgherdt@2a02:8109:86c0:d8d:88ec:93e4:788b:67b9)
[11:35:27] *** Joins: hendursa1 (~weechat@user/hendursaga)
[11:38:28] <pve> ah, thanks
[11:39:21] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 276 seconds)
[11:39:36] <pve> yeah, I was thinking of some kind of high-level description of the program
[11:40:13] <jackdaniel> that said if I had some free time in a library I'd engage in studying some math book (if you haven't read it yet then you can't go wrong with concrete mathematics)
[11:42:13] <pve> that's not a bad suggestion either
[11:43:15] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 260 seconds)
[11:52:47] *** Parts: contrapunctus (a75f5b1571@jabberfr.org) ()
[11:53:38] *** Quits: igemnace (~ian@user/igemnace) (Remote host closed the connection)
[11:59:29] *** Joins: contrapunctus (a75f5b1571@jabberfr.org)
[12:04:30] <gin> is there any article on what forms the core of Lisp? I mean what is the minimal subset of Lisp I need to implement so that rest of the Lisp can be expressed in terms of the subset?
[12:04:51] <beach> There is no unique such subset.
[12:05:08] <beach> gin: But why would you want to do that?
[12:05:20] <gin> I am still a beginner to lisp but I think if I successfully implement LAMBDA at the interpreter level, then I don't need to implement LET in the interpreter. LET can be implemented as a Lisp code over LAMBDA? am I right?
[12:05:29] <pjb> gin: you can study lambda calculus, and have fun implementing CL in lambda calculus.
[12:05:32] <hayley> Arguably, you only need function creation, function application, and a way to access variables, or a Turing machine, or the S and K combinators...
[12:05:35] <gin> beach: for learning purpose. keep the core small.
[12:05:45] <hayley> Yes, you can rewrite LET to LAMBDA.
[12:05:55] <jackdaniel> gin: if you are interested in "how to implement this and this that is also used in lisp" you may want to read the book "lisp in small pieces"
[12:06:10] <pjb> gin: or you can study: SectorLISP Now Fits in One Sector <https://justine.lol/sectorlisp/>
[12:06:12] <gin> jackdaniel: than you
[12:06:15] <beach> gin: So you are writing yourself a Common Lisp system?
[12:06:17] <jackdaniel> it has a nice overview of various concepts
[12:06:43] <gin> beach: not a common lisp system. just a small lisp for learning purpose.
[12:06:56] <beach> I see.
[12:07:03] <pjb> gin: arguably, there's the special operator list in CL, but a few other functions are required for a working system.
[12:07:21] <pjb> gin: have a look at Lisp in Small Pieces   http://pagesperso-systeme.lip6.fr/Christian.Queinnec/WWW/LiSP.html  http://pagesperso-systeme.lip6.fr/Christian.Queinnec/Books/LiSP-2ndEdition-2006Dec11.tgz
[12:08:06] <gin> pjb: thanks
[12:08:07] <beach> gin: What are you writing this Lisp implementation in?
[12:08:54] <gin> beach: I thought of C. but if there are any good suggestions I will take it.
[12:09:16] <jackdaniel> gin: write it in common lisp
[12:09:21] <jackdaniel> otherwise it will be offtopic here ,-)
[12:10:22] <beach> gin: I am afraid I have no advice to give.  I would not consider implementing Lisp from a subset.
[12:11:04] <gin> beach: how would you do it then? not worry about a subset at all and implement all special forms as the "core" of the interpreter/compiler?
[12:11:12] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Ping timeout: 276 seconds)
[12:11:53] <beach> minion: Please tell gin about SICL.
[12:11:53] <minion> gin: SICL: SICL is a (perhaps futile) attempt to re-implement Common Lisp from scratch, hopefully using improved programming and bootstrapping techniques. See https://github.com/robert-strandh/SICL
[12:12:35] <beach> gin: We use the full Common Lisp language to implement each module, and then we bootstrap on a Common Lisp implementation.
[12:12:56] <gin> beach: I know about SICL :) you are implementing SICL as an expert. I am going to implement a toy lisp for learning purpose.
[12:13:11] <beach> Sure, but you asked me how I would do it.
[12:13:22] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[12:13:28] <beach> gin: I suggest you look at my videos about implementing Common Lisp.
[12:13:35] <beach> They should be archived somewhere.
[12:13:40] <jackdaniel> gin: study the book lisp in small piecies - I believe that this is what you seek
[12:13:59] <beach> I gave them in the context of phoe's online Lisp meeting.
[12:14:13] <gin> ok
[12:14:25] <gin> thanks jackdaniel. I think i will start with lisp in small pieces.
[12:14:51] <beach> gin: The tricky part is going to be the evaluator.
[12:15:14] <gin> beach: why is that?
[12:16:01] <jackdaniel> for curious readers, there is CL0 specification that defines a strict subset of common lisp used i.e by clicc for bootstrapping: http://web.archive.org/web/20170706055918/http://www.informatik.uni-kiel.de/~wg/CL0.ps.Z
[12:16:14] <beach> gin: It requires a lot of knowledge about the semantics of Lisp.
[12:16:14] *** Quits: horar (~horar@49.145.146.182) (Quit: Client closed)
[12:16:23] <jackdaniel> and there is also islisp that is factually a subset of common lisp (despite having its own iso standard)
[12:16:29] <beach> gin: And about how evaluators are written.
[12:17:14] <gin> thanks for the mention about islisp. i did not know it.
[12:18:37] <gin> i was thinking of writing a simple tree walker to visit each node in the tree and just evaluate on the fly. bad idea?
[12:19:04] <beach> gin: How are you going to represent the global environment, the lexical environment, and the dynamic environment?
[12:19:34] <beach> Though, since it's not Common Lisp, I guess you can make simplifications.
[12:21:29] <beach> gin: Like if you have (let ((x 234)) (let ((x 345)) (+ x 1))), how do you know which X the inner one refers to when you reach that place in the tree?
[12:21:33] *** Joins: Inline (~Inline@2a02:908:1252:7a80:ba51:b2dc:656:c660)
[12:26:40] <beach> gin: I should probably stay out of this discussion.  I am afraid I might spoil your enthusiasm if I give advice.  I suggest you try out your original idea and come back when you feel you are stuck.
[12:28:07] <MichaelRaskin> Stuck and unable to revise the scope, that is, because a very minimal interpreter is quite feasible.
[12:28:09] <gin> beach: thank you for the advice. i will do that.
[12:29:09] <pjb> on may also have a look at the shen kernel language: http://shenlanguage.org/index.html
[12:50:48] *** Joins: Krystof (~user@81.174.155.115)
[12:51:00] *** Joins: dnaeon (~dnaeon@user/dnaeon)
[12:51:37] *** Quits: dnaeon (~dnaeon@user/dnaeon) (Client Quit)
[13:01:39] *** Quits: s-liao (~s-liao@101.86.103.113) (Quit: Client closed)
[13:02:00] *** Joins: s-liao (~s-liao@101.86.103.113)
[13:08:58] *** Quits: amb007 (~a_bakic@laubervilliers-658-1-139-127.w80-15.abo.wanadoo.fr) (Ping timeout: 260 seconds)
[13:09:15] *** Joins: amb007 (~a_bakic@16.127.95.79.rev.sfr.net)
[13:11:14] *** Joins: karthik34 (~karthik@103.98.63.145)
[13:13:22] *** Quits: karthik34 (~karthik@103.98.63.145) (Client Quit)
[13:16:27] *** Joins: McParen (~mcp@user/mcparen)
[13:16:57] *** Parts: x-x (~x@user/x-x) ()
[13:33:47] *** Joins: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f)
[13:40:00] *** Quits: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f) (Remote host closed the connection)
[13:41:42] *** Quits: amb007 (~a_bakic@16.127.95.79.rev.sfr.net) (Ping timeout: 260 seconds)
[13:42:33] *** Joins: amb007 (~a_bakic@247.127.95.79.rev.sfr.net)
[13:47:04] *** Joins: cosimone (~user@2001:b07:ae5:db26:a7aa:8027:6b4e:2fb3)
[13:47:14] *** Quits: amb007 (~a_bakic@247.127.95.79.rev.sfr.net) (Ping timeout: 260 seconds)
[13:49:43] *** Quits: cosimone (~user@2001:b07:ae5:db26:a7aa:8027:6b4e:2fb3) (Client Quit)
[13:50:21] *** Joins: cosimone (~user@93-47-230-151.ip115.fastwebnet.it)
[13:54:56] *** Joins: notzmv (~zmv@user/notzmv)
[13:55:07] *** Joins: varjag (~user@2a02:2121:283:4033:38b7:88e8:a5fc:cea6)
[13:59:51] *** Joins: amb007 (~a_bakic@103.245.204.77.rev.sfr.net)
[14:04:52] *** Joins: random-nick (~random-ni@87.116.165.220)
[14:10:35] *** Quits: amb007 (~a_bakic@103.245.204.77.rev.sfr.net) (Ping timeout: 264 seconds)
[14:24:51] *** Joins: lisp123 (~lisp123@5.30.23.247)
[14:29:22] *** Quits: s-liao (~s-liao@101.86.103.113) (Quit: Client closed)
[14:29:23] *** Joins: s-liao67 (~s-liao@101.86.103.113)
[14:29:42] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 260 seconds)
[14:37:40] *** Quits: mrcom_ (~mrcom@99-73-215-70.lightspeed.irvnca.sbcglobal.net) (Quit: This computer has gone to sleep)
[14:37:40] *** Quits: mrcom (~mrcom@99-73-215-70.lightspeed.irvnca.sbcglobal.net) (Quit: This computer has gone to sleep)
[14:45:50] *** Joins: amb007 (~a_bakic@15.86.95.79.rev.sfr.net)
[14:57:42] *** Quits: varjag (~user@2a02:2121:283:4033:38b7:88e8:a5fc:cea6) (Ping timeout: 260 seconds)
[14:58:10] *** Quits: s-liao67 (~s-liao@101.86.103.113) (Quit: Client closed)
[14:58:29] *** Joins: s-liao (~s-liao@101.86.103.113)
[15:02:28] *** Joins: Guest715 (~Guest71@193-154-81-211.adsl.highway.telekom.at)
[15:05:00] *** Parts: Guest715 (~Guest71@193-154-81-211.adsl.highway.telekom.at) ()
[15:07:31] *** Joins: Lycurgus (~juan@98.4.112.204)
[15:16:52] *** Joins: varjag (~user@2a02:2121:283:4033:ddc1:ede9:58d8:be8e)
[15:19:51] *** Joins: horar (~horar@49.145.146.182)
[15:21:56] *** Quits: horar (~horar@49.145.146.182) (Client Quit)
[15:27:27] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[15:40:35] *** Quits: karlosz (~karlosz@47.151.136.69) (Ping timeout: 264 seconds)
[15:41:49] *** Quits: Lycurgus (~juan@98.4.112.204) (Quit: Exeunt)
[15:47:47] *** Quits: amb007 (~a_bakic@15.86.95.79.rev.sfr.net) (Ping timeout: 264 seconds)
[15:48:12] *** Joins: amb007 (~a_bakic@154.127.95.79.rev.sfr.net)
[15:52:49] *** Parts: pranavats (3fba1d1b34@jabberfr.org) ()
[15:59:03] *** Quits: s-liao (~s-liao@101.86.103.113) (Ping timeout: 256 seconds)
[16:01:07] *** Quits: taiju (~taiju@M014013236064.v4.enabler.ne.jp) (Read error: Connection reset by peer)
[16:01:54] *** gxt_ is now known as gxt
[16:03:13] *** Joins: taiju (~taiju@240b:253:ec40:2400:fc4c:c236:bdd0:8139)
[16:08:46] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 268 seconds)
[16:09:05] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[16:11:33] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[16:14:58] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[16:15:24] *** Parts: McParen (~mcp@user/mcparen) ()
[16:26:13] *** Joins: s-liao (~s-liao@101.86.103.113)
[16:30:47] *** Joins: Bike (~Bike@71.69.170.70)
[16:30:47] *** ChanServ sets mode: +o Bike
[16:37:06] *** Quits: Bike (~Bike@71.69.170.70) (Quit: Connection closed)
[16:37:18] *** Joins: Bike (~Bike@71.69.170.70)
[16:37:18] *** ChanServ sets mode: +o Bike
[16:40:20] *** Joins: peterhil (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi)
[16:46:16] *** Quits: mfiano (user@2600:3c03::f03c:91ff:fe7a:6d7f) (Remote host closed the connection)
[16:46:49] *** Joins: mfiano (~user@2603-7081-2d02-95bd-0250-b6ff-fef3-da40.res6.spectrum.com)
[16:48:55] *** Quits: s-liao (~s-liao@101.86.103.113) (Ping timeout: 256 seconds)
[16:49:45] *** Joins: lisp123_win (~user@80.227.170.170)
[16:50:47] <lisp123_win> If I have a macro that uses a function (prior to the macroexpansion form), I need to put the function into an eval-when
[16:51:44] <lisp123_win> A couple of questions; (a) do I need to put the function definition above (before) the macro?
[16:52:35] <lisp123_win> (b) I didn't seem to get an error when I forgot to wrap the function around eval-when --> is that expected or is there some other issue with my code that I may have missed?
[16:53:46] <mfiano> You do not need to put the function in an eval-when if the call to the macro is before the function.
[16:53:58] <mfiano> The macro itself could be after the function. It doesn't matter
[16:54:13] <lisp123_win> mfiano: other way round, macro is calling the function
[16:54:24] <mfiano> You only need an eval-when when the call, thus the expansion, is before any function defined using it.
[16:54:24] <_death> you don't need to use eval-when if uses of the macro are in a different file
[16:54:28] <jackdaniel> mfiano: doesn't he talk about (defmacro with-foo (…) (let ((something (function-must-be-available-now!))) `(…))
[16:54:37] <mfiano> Or put it in a different file to be sure.
[16:54:57] <lisp123_win> _death: Yes, understood. Assume we want to keep it in the same file
[16:55:07] <mfiano> lisp123_win:  But something calls your macro. That's what I am talking about
[16:56:11] <lisp123_win> mfiano: Thanks, assume that is also in the same file
[16:56:21] <mfiano> jackdaniel:  Oh I see. In that case lisp123_win, use eval-when or define the function in an earlier compilation unit.
[16:57:08] <lisp123_win> So with eval-when, do I still need the function to be written before the macro? And then my second question was I didn't seem to get a warning when I forgot to use eval-when, is that expected or just by chance
[16:57:21] <mfiano> Macros are expanded before functions are compiled.
[16:57:38] <mfiano> Then the functions, and any code expanded by macros are compiled afterwards.
[16:57:57] <_death> you don't need it written before the macro, but you do need it available when the macro is used.. so that means you need eval-when if it's in the same compilation unit
[16:58:32] *** Joins: domovod (~domovod@176.196.122.197)
[16:58:32] <mfiano> Place the function in a file that is LOAD'd earlier than the macro and you will never need eval-when.
[16:58:33] <lisp123_win> _death: Thanks. By "available when used" does that mean the function should be written before the macro is called?
[16:58:48] <mfiano> No
[16:58:55] *** Joins: igemnace (~ian@user/igemnace)
[16:59:00] <mfiano> In this case the function isn't being used when the macro is called, but when it is _expanded_
[16:59:21] <mfiano> Macro-expansion time happens before compile time
[17:00:27] <_death> mfiano: I think there's some confusion there.. a macro-function is called when a form is macroexpanded.. macroexpansion usually happens during compile-time
[17:02:09] <lisp123_win> _death: Yes, precisely. So my understanding is that the stream is read, and if the function was not defined before the macro that uses it (like in jackdaniel's example), the function's symbol will be interned during the read of the macro definition
[17:02:37] *** Joins: s-liao (~s-liao@101.86.103.113)
[17:02:38] <lisp123_win> But if the macro call occurs before the function is defined within eval-when, I'm expecting an error, so wanted to confirm that?
[17:02:38] <_death> lisp123_win: that doesn't matter though
[17:04:23] <jackdaniel> when you have: (defmacro bar … (foo) …) (defun foo () …) and nothing else in the file, you don't need eval-when because foo will be called when the macro is expanded in a different file
[17:04:27] <_death> lisp123_win: when macroexpansion happens the macro-function is called.. if it tries to call functions that are not defined there is an issue.. so, it's fine to have the functions defined after the defmacro, but you still need eval-when to have them available at compile-time if uses of the macro (which should be after both) exist in the same compilation unit
[17:04:58] <jackdaniel> on the other hand when you have (defmacro bar) (defun foo) (bar) in the same file, then it will complain, because bar is expanded in the same file where bar is defined
[17:05:09] <jackdaniel> so you need to wrap (defun foo) in eval-when in order to have bar expanded
[17:05:22] <jackdaniel> it doesn't matter where in the file (eval-when … (defun foo …)) is placed
[17:05:29] <jackdaniel> and by file I mean compilation unit ,)
[17:06:16] *** Joins: cage (~cage@dynamic-adsl-84-220-249-98.clienti.tiscali.it)
[17:06:31] <lisp123_win> "it doesn't matter where in the file (eval-when … (defun foo …))
[17:06:31] <lisp123_win>              is placed" --> Why is that? Does eval-when occur before macroexpansion? I thought it was all compile-time
[17:07:25] <_death> jackdaniel: (bar) must come after defmacro bar and defun foo though
[17:08:06] <jackdaniel> _death: sure
[17:08:55] <lisp123_win> _death: Cool thanks for confirming! So my remaining question is that I didn't seem to get a warning when I didn't use eval-when (but the code didn't work)
[17:09:22] <lisp123_win> Is that "normal" (sorry its a very vague question, but for some reason my file works when I compile twice, so I assume its to do with eval-when not being used)
[17:10:23] <beach> lisp123_win: Try starting from a fresh image.
[17:10:33] <_death> lisp123_win: did you just compile or compile and load
[17:10:40] <beach> lisp123_win: If your file has been loaded already, then the function is defined in the image.
[17:11:12] <lisp123_win> beach & _death: I did from a fresh image. On the first compile / load, nothing happens, but when I then do it again, it "magically" works
[17:11:48] <lisp123_win> I realised I didn't have an eval-when, but didn't get an error / warning on the first compile. Sorry its very vague so maybe not worth answering
[17:11:54] <lisp123_win> (might be some other issue with my code)
[17:12:32] <_death> I don't see why you say "magically", since after loading the function is defined.. when you say "nothing happens" can you come up with a test case
[17:14:02] *** Quits: domovod (~domovod@176.196.122.197) (Ping timeout: 260 seconds)
[17:14:27] *** Joins: domovod (~domovod@ec2-35-165-86-158.us-west-2.compute.amazonaws.com)
[17:15:38] <lisp123_win> _death: I was using a test suite (tests are created with macros). The tests don't exist until I compile / load the file the second time in an image, which I am thinking is because a certain function is not within eval-when so my macro is silently failing on the first attempt
[17:15:47] *** Joins: s-liao62 (~s-liao@101.86.103.113)
[17:15:59] <lisp123_win> But on the second attempt, since that function is now defined, the compilation works as expected
[17:16:16] *** Quits: s-liao (~s-liao@101.86.103.113) (Quit: Client closed)
[17:16:20] <lisp123_win> But I'm just guessing, I'll take it offline and investigate further
[17:17:00] <beach> lisp123_win: It would be easier to help you if you were more precise about the meaning of "nothing happens" and "magically works", like error messages, warnings, unexpected output, etc.
[17:17:37] <beach> Not that I plan to get involved this time.  Others seem to be there for you.
[17:18:24] <lisp123_win> beach: Sorry, you are right. I'll try and solve this on my own (unless anybody knows whether forgetting to put a function in an eval-when is meant to cause an error or if no error is signalled during macroexpansion)
[17:18:49] <_death> lisp123_win: you can try it.. put defmacro,defun,use in a file and try to compile-file it
[17:19:00] *** Joins: pranavats (3fba1d1b34@jabberfr.org)
[17:19:24] <jackdaniel> lisp123_win: if you don't use this macro in the same file, then it will compile alright happily expecting that the function will be defined before the macro is expanded
[17:19:41] *** Quits: peterhil (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi) (Quit: Must not waste too much time here...)
[17:19:55] <lisp123_win> _death: Thanks, let me do that. I'll report back
[17:20:03] <_death> lisp123_win: if you have the same case elsewhere, and you don't see an error or warning, it might be suppressed or not there due to some other circumstance peculiar to that scenario
[17:20:17] *** Joins: McParen (~mcp@user/mcparen)
[17:20:28] <lisp123_win> jackdaniel: Yeah, I learnt that now :) But at least I learnt how compiliation works better as a result of this
[17:21:20] *** Joins: peterhil (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi)
[17:21:29] <lisp123_win> _death: Thanks, good idea
[17:23:51] *** Quits: amb007 (~a_bakic@154.127.95.79.rev.sfr.net) (Ping timeout: 245 seconds)
[17:23:59] *** Joins: amb007 (~a_bakic@laubervilliers-658-1-139-127.w80-15.abo.wanadoo.fr)
[17:24:51] *** Quits: peterhil (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi) (Client Quit)
[17:34:55] *** Joins: lisp123 (~lisp123@5.30.23.247)
[17:38:09] <lisp123> Confirming there should be an error message
[17:38:12] <lisp123> Just tested it out
[17:38:28] <lisp123> So might be something to do with my SBCL settings on my main image / something else
[17:39:20] <_death> small tip, I have (setf ql:*quickload-verbose* t) in my init file
[17:41:41] <lisp123> _death: Thanks, I will do that going forward
[17:42:47] *** Quits: s-liao62 (~s-liao@101.86.103.113) (Quit: Client closed)
[17:43:05] *** Joins: casionaut (~casionaut@user/casionaut)
[17:43:20] *** Quits: casionaut (~casionaut@user/casionaut) (Remote host closed the connection)
[17:45:31] *** Joins: mrcom_ (~mrcom@99-73-215-70.lightspeed.irvnca.sbcglobal.net)
[17:45:31] *** Joins: mrcom (~mrcom@99-73-215-70.lightspeed.irvnca.sbcglobal.net)
[17:49:39] *** Joins: heisig (~heisig@p508b531b.dip0.t-ipconnect.de)
[18:05:33] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[18:18:36] *** Quits: amb007 (~a_bakic@laubervilliers-658-1-139-127.w80-15.abo.wanadoo.fr) (Read error: Connection reset by peer)
[18:18:45] *** Joins: clos-encounters (user@2600:3c00::f03c:92ff:fe19:3350)
[18:19:35] *** Joins: amb007 (~a_bakic@191.87.95.79.rev.sfr.net)
[18:25:11] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[18:25:36] *** Joins: epolanski (uid312403@id-312403.helmsley.irccloud.com)
[18:27:56] *** Quits: mfiano (~user@2603-7081-2d02-95bd-0250-b6ff-fef3-da40.res6.spectrum.com) (Remote host closed the connection)
[18:38:01] *** Quits: domovod (~domovod@ec2-35-165-86-158.us-west-2.compute.amazonaws.com) (Ping timeout: 245 seconds)
[18:40:05] *** Joins: domovod (~domovod@176.196.122.197)
[18:40:40] *** Joins: xsperry (~xs@user/xsperry)
[18:48:42] *** Quits: igemnace (~ian@user/igemnace) (Remote host closed the connection)
[18:49:01] *** Joins: gaqwas (~john@dynamic-095-117-012-008.95.117.pool.telefonica.de)
[18:49:29] *** Quits: cage (~cage@dynamic-adsl-84-220-249-98.clienti.tiscali.it) (Remote host closed the connection)
[18:49:35] *** Quits: taiju (~taiju@240b:253:ec40:2400:fc4c:c236:bdd0:8139) (Ping timeout: 264 seconds)
[18:49:49] *** Joins: taiju (~taiju@M014013236064.v4.enabler.ne.jp)
[18:55:37] *** Joins: cage (~cage@dynamic-adsl-84-220-249-98.clienti.tiscali.it)
[19:10:02] *** Quits: varjag (~user@2a02:2121:283:4033:ddc1:ede9:58d8:be8e) (Ping timeout: 246 seconds)
[19:10:08] *** Joins: Jing (~Jing@103.121.208.115)
[19:20:09] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 268 seconds)
[19:24:28] *** Quits: anddam (~anddam@user/anddam) (Quit: WeeChat 3.3)
[19:24:54] *** Joins: Jing_ (~textual@103.121.208.115)
[19:25:05] *** Quits: Jing (~Jing@103.121.208.115) (Quit: Client closed)
[19:52:34] *** Joins: Inline_ (~Inline@2a02:908:1252:7a80:b3a8:c59a:e1f5:9b96)
[19:53:01] *** Quits: Inline (~Inline@2a02:908:1252:7a80:ba51:b2dc:656:c660) (Ping timeout: 245 seconds)
[19:53:15] *** Quits: Inline_ (~Inline@2a02:908:1252:7a80:b3a8:c59a:e1f5:9b96) (Remote host closed the connection)
[19:54:05] *** Joins: Inline (~Inline@2a02:908:1252:7a80:b3a8:c59a:e1f5:9b96)
[19:55:52] *** Joins: attila_lendvai (~alendvai@catv-89-132-208-37.catv.broadband.hu)
[19:57:23] *** Quits: khrbt (~znc@user/khrbt) (Ping timeout: 264 seconds)
[20:00:44] *** Joins: khrbt (~znc@user/khrbt)
[20:05:09] *** Joins: tyson2 (~user@cpe00fc8d34ff03-cm00fc8d34ff00.sdns.net.rogers.com)
[20:27:32] *** Joins: mfiano (~user@2603-7081-2d02-95bd-0250-b6ff-fef3-da40.res6.spectrum.com)
[20:33:37] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[20:33:42] *** Quits: khrbt (~znc@user/khrbt) (Ping timeout: 260 seconds)
[20:38:11] *** Quits: mallkrampus (~mallkramp@94.140.9.119) (Ping timeout: 264 seconds)
[20:38:50] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 260 seconds)
[20:45:29] *** Quits: Bike (~Bike@71.69.170.70) (Quit: Connection closed)
[20:50:22] *** Joins: mallkrampus (~mallkramp@185.203.219.12)
[20:59:50] *** Joins: bcasiello (~bcasiello@066-189-087-112.biz.spectrum.com)
[21:01:49] *** Joins: dra (~dra@2a04:4540:6419:4d00:9c4f:2d61:e582:82f7)
[21:10:27] *** Quits: heisig (~heisig@p508b531b.dip0.t-ipconnect.de) (Quit: Leaving)
[21:21:57] *** Joins: peterhil (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi)
[21:22:21] *** Joins: sbodin (~Android@185.12.224.233)
[21:25:56] *** Quits: domovod (~domovod@176.196.122.197) (Ping timeout: 245 seconds)
[21:26:55] *** Joins: Bike (~Bike@71.69.170.70)
[21:26:55] *** ChanServ sets mode: +o Bike
[21:29:08] *** Joins: khrbt (~znc@user/khrbt)
[21:32:27] *** Joins: X-Scale` (~ARM@31.22.147.35)
[21:33:02] *** Quits: X-Scale (~ARM@50.77.166.178.rev.vodafone.pt) (Ping timeout: 260 seconds)
[21:34:23] *** X-Scale` is now known as X-Scale
[21:40:02] *** Quits: amb007 (~a_bakic@191.87.95.79.rev.sfr.net) (Ping timeout: 260 seconds)
[21:41:31] *** Joins: amb007 (~a_bakic@laubervilliers-658-1-139-127.w80-15.abo.wanadoo.fr)
[21:42:45] *** Quits: sbodin (~Android@185.12.224.233) (Quit: -a- IRC for Android 2.1.59)
[22:01:54] *** Quits: amb007 (~a_bakic@laubervilliers-658-1-139-127.w80-15.abo.wanadoo.fr) (Read error: Connection reset by peer)
[22:02:10] *** Joins: amb007 (~a_bakic@laubervilliers-658-1-139-127.w80-15.abo.wanadoo.fr)
[22:05:02] *** Joins: lotuseater (~user@p200300e7871bd300c158d62dc7544d08.dip0.t-ipconnect.de)
[22:07:43] *** Quits: hendursa1 (~weechat@user/hendursaga) (Quit: hendursa1)
[22:08:21] *** Joins: hendursaga (~weechat@user/hendursaga)
[22:11:47] *** Quits: euandreh (~euandreh@2804:14c:33:9fe5:eba7:95bb:d099:a7d8) (Ping timeout: 264 seconds)
[22:15:03] *** Quits: hendursaga (~weechat@user/hendursaga) (Remote host closed the connection)
[22:15:30] *** Joins: hendursaga (~weechat@user/hendursaga)
[22:25:59] *** Joins: karlosz (~karlosz@47.151.136.69)
[22:26:58] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[22:31:05] *** Joins: igemnace (~ian@user/igemnace)
[22:39:47] *** Joins: Oladon (~olad@98.43.81.226)
[22:50:33] *** Joins: akoana (~ah@user/akoana)
[22:57:16] *** Quits: mariari (~mariari@user/mariari) (Quit: WeeChat 3.3)
[22:57:39] *** Quits: notzmv (~zmv@user/notzmv) (Read error: Connection reset by peer)
[23:00:08] *** Joins: notzmv (~zmv@user/notzmv)
[23:01:20] *** Joins: mariari (~mariari@user/mariari)
[23:09:19] *** Quits: fengshaun (~fengshaun@S010680615f0c2c0a.cg.shawcable.net) (Ping timeout: 260 seconds)
[23:10:19] *** Joins: fengshaun (~fengshaun@S010680615f0c2c0a.cg.shawcable.net)
[23:17:30] *** Quits: Inline (~Inline@2a02:908:1252:7a80:b3a8:c59a:e1f5:9b96) (Ping timeout: 260 seconds)
[23:30:24] *** Parts: McParen (~mcp@user/mcparen) ()
[23:36:15] *** Joins: Inline (~Inline@2a02:908:1252:7a80:e007:8711:e7b4:2641)
[23:39:25] *** Quits: cage (~cage@dynamic-adsl-84-220-249-98.clienti.tiscali.it) (Quit: rcirc on GNU Emacs 27.1)
[23:41:59] <lotuseater> For this day some halloweenmath, don't be too scared by it! https://trash.randomerror.de/mnmjg/halloweenmath.png
[23:52:46] *** Quits: kdlv (~kdlv@user/kdlv) (Quit: The Lounge - https://thelounge.chat)
[23:53:27] *** Joins: kdlv (~kdlv@user/kdlv)
[23:57:15] *** Quits: kdlv (~kdlv@user/kdlv) (Client Quit)
[23:58:39] *** Joins: kdlv (~kdlv@user/kdlv)
[23:59:17] *** Quits: tyson2 (~user@cpe00fc8d34ff03-cm00fc8d34ff00.sdns.net.rogers.com) (Remote host closed the connection)
