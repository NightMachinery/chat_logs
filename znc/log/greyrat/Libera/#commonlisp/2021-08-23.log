[00:00:09] <rain3> what's the metaclass2 method
[00:00:48] <rain3> you mean the method specialized on c2? m2?
[00:01:54] <Bike> I mean the method on compute-effective-slot-definition with :around qualifier specialized on metaclass2.
[00:02:28] <Bike> which is apparently being invoked here.
[00:03:36] <rain3> (finalize-inheritance (find-class 'c2)) is called after (defclass c2 ...) , I forgot to mention
[00:03:59] <rain3> so that compute-effective-slots is already called once , and it does the initalization properly
[00:04:07] <rain3> but then that m1 breaks things up
[00:04:40] <rain3> and afterwards, if I do (defclass c2) and (finalize-inheritance (find-class 'c2)) manually again, the class is fixed and works fine once again
[00:04:49] <rain3> and then m1 will also work without breaking things again
[00:04:52] <Bike> Did you reevaluate any defclass forms between the (make-instance 'c2) and the (m1 ...) call?
[00:05:49] <rain3> no
[00:05:56] <Bike> You could have made the c2 class obsolete, which would result in the instance of it needing to be updated when m1 is called on it.
[00:06:43] <rain3> how to check if a class is obsolete? it is all alive and kicking . until I call m1 which messes it up
[00:06:58] <rain3> I can put online tomorrow or the coming days the 'updated' manardb , it hacky experimental code (the original wasn't very clean either) , and maybe we can fix this together and/or improve it etc
[00:07:38] <Bike> I don't think there is any way to determine if a class's instances have become obsolete. You could put a method on make-instances-obsolete to trip a flag i guess.
[00:10:39] <Bike> c2 being reinitialized is the only way i can make sense of this.
[00:11:34] <Bike> And I still don't quite understand how calling compute-effective-slots twice could be an issue
[00:12:46] *** Joins: cosimone (~user@93-44-186-135.ip98.fastwebnet.it)
[00:12:59] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[00:13:24] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 250 seconds)
[00:14:16] *** Lord_of_Life_ is now known as Lord_of_Life
[00:17:02] <rain3> Bike: when it calls compute-effective-slots the 2nd time, the class parameter is c1 (which has metaclass1) not c2 (which has metaclass2) .
[00:17:10] <rain3> so the behaviour will be different
[00:17:37] <Bike> Oh. That's not what it looks like in the backtrace?
[00:18:58] <Bike> it just shows it being called on *obj1*
[00:19:47] <rain3> I may have messed that part of the backtrace up when pasting the snippet
[00:21:13] <rain3> now the problem is I can't reproduce this issue and I have been struggling with it for 8 hours
[00:21:28] <Bike> sounds like time for a break
[00:21:40] <rain3> thank you for the insights
[00:28:34] *** Quits: rain3 (~rain3___@2a02:2f09:d30b:1300:514:bcc7:8202:1798) (Ping timeout: 250 seconds)
[00:30:04] <moon-child> maxima reduces  0 * (1/x)  to 0.  Why is this justified, when it hasn't proven x is nonzero?
[00:32:52] <lotuseater> 0 * infinity => 0
[00:33:43] <moon-child> what is this 'infinity' you speak of, and why are we allowed to multiply by it?
[00:34:34] <moon-child> 1/0  is an error, as is  0 * (1/0)
[00:34:49] <lotuseater> it's the symbolic value when you let x converge to 0 in the expression 1/x
[00:35:04] <lotuseater> so think better in limits
[00:36:11] <lisp123> moon-child: I agree with
[00:36:11] <minion> lisp123, memo from pjb: you can use (time …) to get a report on the time needed to compute …
[00:36:13] <lisp123> you
[00:36:24] <lisp123> pjb: thanks!
[00:36:28] <lisp123> minion: cheers mate
[00:36:29] <minion> you speak nonsense
[00:36:34] <lisp123> :O
[00:38:47] <moon-child> lotuseater: I don't understand why using limits lets us treat  0 * (1/x)  and  0 * (1/0)  differently, in the case where x=0.  Indeed, maxima also gives an error in response to  x:0; 0 * (1/x)
[00:40:40] <semz> I suspect that maxima is going with some kind of maximal domain for x because the expression makes no sense for x=0
[00:40:51] <lotuseater> so what do you get when you eval sin(x)/x at x=0 ?
[00:41:24] *** Joins: akoana (~ah@user/akoana)
[00:41:27] <lisp123> -0.0e+NaN
[00:41:31] <lotuseater> no.
[00:42:32] <lotuseater> when evaluating derivatives with you also do limits with (f(x+h)-f(x))/h for h->0 rather than directly putting the value into that
[00:43:24] <lotuseater> lisp123: of course, setting directly 0 makes it indeterminate in terms of stupid calculating. its value will be 1
[00:43:46] <lisp123> I guess its splitting hairs, I think we are both saying that if its a limit, it needs to be explicitly declared
[00:44:27] <lisp123> 1/0 is not defined
[00:44:43] <lotuseater> right, so read again what i read
[00:44:45] <lotuseater> *wrote
[00:44:46] <lisp123> Whereas you may be speaking from a practicality perspective
[00:45:09] <lotuseater> no, it's really the mathematical perspective, surely also practical
[00:45:44] <lisp123> 0 * 1/0 is undefined
[00:45:46] <lotuseater> and nonstandard analysis deals with such expressions in more depth
[00:45:54] <moon-child> lotuseater: right; I don't take issue with evaluating an expression using a limit, but I don't understand the inconsistency.  Why can we not similarly reduce  0 * (1/0)  to 0, by treating it as  lim_(x->0) 0 * (1/x)?
[00:47:49] <lotuseater> it's a question of the analytic continuation if there is a real pole point or not
[00:47:53] <lisp123> Its very important to note that the reciprocal is not defined for x = 0. 'Every element x =/= 0 in R has a unique reciprocal'. As it relates to the connection between addition & multiplication
[00:48:15] <lisp123> Everything of that sort is talking in limits or some other disclaimer
[00:48:26] <lotuseater> lisp123: so do you now see why sin(x)/x is 1 for x=0 ?
[00:48:40] <lisp123> It undefined
[00:48:44] <lotuseater> no
[00:50:05] <lisp123> I think we will have to just agree to disagree on this one :)
[00:50:33] <lotuseater> yes you should work on with that example to see why it's 1
[00:51:01] <lotuseater> it's not a question of just "believing" at all
[00:51:29] <Bike> this question seems pretty specific to maxima. does it have an irc channel or something? i couldn't find one.
[00:52:08] <lotuseater> I don't know and I unfortunately don't want to discuss it more now.
[00:53:52] <lisp123> https://math.stackexchange.com/questions/2362920/continuity-of-sinx-x - feel free to change the accepted answer
[00:54:02] <lisp123> And no more off topic now, sorry aobut that
[00:55:25] <lotuseater> surely it's not directly defined
[01:24:10] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[01:36:30] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[01:37:31] *** Joins: lisp123 (~lisp123@5.30.23.247)
[01:45:28] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 252 seconds)
[01:46:36] *** Joins: recordgroovy (~recordgro@c-67-185-152-122.hsd1.wa.comcast.net)
[01:51:11] *** Quits: shka (~herr@109.231.62.239) (Ping timeout: 268 seconds)
[02:01:53] *** Joins: kakuhen (~kakuhen@user/kakuhen)
[02:08:02] *** Joins: hprop (~hprop@187.145.60.213.dynamic.reverse-mundo-r.com)
[02:08:08] *** Joins: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[02:11:10] *** Quits: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 240 seconds)
[02:14:20] *** Quits: hprop (~hprop@187.145.60.213.dynamic.reverse-mundo-r.com) (Remote host closed the connection)
[02:22:30] *** Joins: lisp123 (~lisp123@5.30.23.247)
[02:25:32] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[02:28:51] *** Quits: doyougnu (~user@c-73-25-202-122.hsd1.or.comcast.net) (Remote host closed the connection)
[02:33:52] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 252 seconds)
[02:39:55] *** Quits: gaqwas (~john@dynamic-095-118-102-130.95.118.pool.telefonica.de) (Ping timeout: 268 seconds)
[02:53:10] *** Quits: rgherdt (~rgherdt@2a02:8109:86c0:d8d:cb9:2d96:4da8:aca7) (Ping timeout: 240 seconds)
[02:55:10] *** Joins: IPmonger (~IPmonger@172.58.206.220)
[02:55:24] *** Quits: IPmonger (~IPmonger@172.58.206.220) (Remote host closed the connection)
[02:55:37] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 244 seconds)
[02:56:53] *** Parts: lotuseater (~user@p200300e7871bf000d922bc6401acd239.dip0.t-ipconnect.de) (ERC (IRC client for Emacs 27.2))
[02:57:50] *** Joins: hendursaga (~weechat@user/hendursaga)
[03:08:00] *** Quits: Alfr (~Alfr@user/alfr) (Remote host closed the connection)
[03:08:19] *** Joins: cjb (~cjb@user/cjb)
[03:08:23] *** Joins: Alfr (~Alfr@user/alfr)
[03:10:46] *** Joins: lotuseater (~user@p200300e7871bf00038fb8d6cf7d8260d.dip0.t-ipconnect.de)
[03:16:44] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[03:19:24] *** Quits: pve (~pve@87-93-237-124.bb.dnainternet.fi) (Quit: leaving)
[03:24:05] <edgar-rft> lotuseater: I forsee a great future for you in discussing math problems with pjb that nobody has but you both. But at the same time I have to admit that you have a better math knowledge than me :-)
[03:24:40] *** Quits: makomo (~makomo@user/makomo) (Ping timeout: 240 seconds)
[03:29:38] <lotuseater> I have no problem.
[03:29:52] <lotuseater> edgar-rft: So we can combine our powers.
[03:32:16] <edgar-rft> you have no problems? wait, I'll create some for you...
[03:32:46] <lotuseater> not such problems. of course for that more than enough others
[03:36:49] <lotuseater> and a zoo of interesting conjectures
[03:41:50] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 250 seconds)
[03:42:16] *** Joins: waleee (~waleee@h-98-128-228-119.NA.cust.bahnhof.se)
[03:49:39] *** Joins: Oladon (~olad@98.43.81.226)
[03:58:51] *** Quits: Mandus (~aasmundo@0.51-175-33.customer.lyse.net) (Ping timeout: 268 seconds)
[03:59:18] *** Joins: Mandus (~aasmundo@0.51-175-33.customer.lyse.net)
[04:00:30] *** Quits: Alfr (~Alfr@user/alfr) (Remote host closed the connection)
[04:00:52] *** Joins: Alfr (~Alfr@user/alfr)
[04:13:28] *** Quits: random-nick (~random-ni@87.116.179.117) (Ping timeout: 250 seconds)
[04:41:07] *** Joins: srhm (~srhm@user/srhm)
[04:45:15] *** Joins: igemnace (~ian@user/igemnace)
[04:45:33] *** Quits: srhm (~srhm@user/srhm) (Remote host closed the connection)
[04:48:21] *** Joins: srhm (~srhm@user/srhm)
[04:49:11] *** Quits: srhm (~srhm@user/srhm) (Read error: Connection reset by peer)
[04:49:38] *** Joins: srhm (~srhm@user/srhm)
[05:11:11] *** Joins: lisp123 (~lisp123@5.30.23.247)
[05:18:28] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 250 seconds)
[05:21:13] *** Quits: srhm (~srhm@user/srhm) (Ping timeout: 248 seconds)
[05:22:43] *** Joins: srhm (~srhm@user/srhm)
[05:25:43] *** Joins: pillton (~user@2405:b000:300:b0::2fba)
[05:29:24] *** Quits: srhm (~srhm@user/srhm) (Read error: Connection reset by peer)
[05:29:52] *** Joins: srhm (~srhm@user/srhm)
[05:33:12] *** Quits: srhm (~srhm@user/srhm) (Read error: Connection reset by peer)
[05:38:59] *** Joins: kuler (~kulernil@gateway/tor-sasl/kuler)
[05:41:31] <recordgroovy> Hi, I'm looking for peer-review for my library. I'm looking for ways to improve the confidence of the code, so that other people may want to use it: https://git.sr.ht/~shunter/parsnip/tree/develop
[05:42:14] <recordgroovy> Confidence == Someone would feel comfortable using this library on first glance and use
[05:51:15] *** Quits: abrantesasf (~abrantesa@2804:14d:b086:4b3c:2e56:dcff:fedb:62f) (Quit: Leaving)
[05:53:48] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[06:05:45] <Bike> looks pretty well put together just from the readme. though maybe use a vector drawing for the logo or something. I don't know much about parsing so I don't know what I can say about the actual code, except that you seem to prefer .,foo to ,@foo, which i'd say is a little bit unidiomatic.
[06:06:21] <Bike> looks basically fine to me though.
[06:24:49] *** Quits: cjb (~cjb@user/cjb) (Ping timeout: 256 seconds)
[06:47:47] *** Parts: akoana (~ah@user/akoana) (Leaving)
[06:49:46] *** Joins: cjb (~cjb@user/cjb)
[07:03:46] *** Quits: Guest29 (~Guest29@72.71.222.77) (Ping timeout: 246 seconds)
[07:14:10] *** Quits: prxq_ (~quassel@x4dbea817.dyn.telefonica.de) (Ping timeout: 250 seconds)
[07:14:37] *** Joins: prxq (~quassel@dynamic-077-012-217-237.77.12.pool.telefonica.de)
[07:21:12] *** Quits: Bike (~Bike@71.69.170.70) (Quit: Connection closed)
[07:32:48] <beach> Good morning everyone!
[07:43:01] <lotuseater> Good morning beach :)
[07:44:19] *** Joins: rain3 (~rain3___@2a02:2f09:d30b:1300:514:bcc7:8202:1798)
[07:53:36] *** Quits: semz (~none@user/semz) (Ping timeout: 250 seconds)
[07:54:13] *** Joins: lisp123 (~lisp123@5.30.23.247)
[07:59:21] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 268 seconds)
[08:05:31] *** Quits: skami (~user@bras-base-strepq0102w-grc-14-76-69-161-248.dsl.bell.ca) (Remote host closed the connection)
[08:06:28] *** Joins: semz (~none@user/semz)
[08:09:38] *** Quits: waleee (~waleee@h-98-128-228-119.NA.cust.bahnhof.se) (Ping timeout: 250 seconds)
[08:09:55] *** Quits: taiju (~taiju@m014013236064.v4.enabler.ne.jp) (Ping timeout: 252 seconds)
[08:15:55] *** Quits: Alfr (~Alfr@user/alfr) (Read error: Connection reset by peer)
[08:16:12] *** Joins: taiju (~taiju@m014013236064.v4.enabler.ne.jp)
[09:00:29] <semz> in a way it's obvious, but the condition system makes fuzzing CL libraries really straightforward
[09:01:00] * semz has been hunting down one-offs, missing checks and typo'd constants in babel for the last hour
[09:01:07] <moon-child> why is that?
[09:02:08] <semz> you can work with the errors directly, quickly filter out the ones you're already aware of, or skip through various sections using restarts
[09:02:50] <semz> while still dropping into the debugger when something new pops up
[09:03:31] <moon-child> somebody did a SIGSEGV handler in c that would skip past the instruction causing the fault
[09:07:01] <semz> Wouldn't that just quickly cause another segfault? Or was it just a proof of concept for fun?
[09:07:32] <moon-child> well, it certainly wasn't intended to be practical
[09:07:55] <moon-child> and yes, you would probably end up with mroe segfaults (which you would handle in the same manner)
[09:15:29] *** Joins: phadthai_ (mmondor@ginseng.pulsar-zone.net)
[09:15:37] *** Quits: phadthai (mmondor@ginseng.pulsar-zone.net) (*.net *.split)
[09:15:37] *** Quits: spec (~mrSpec@user/spec) (*.net *.split)
[09:15:37] *** Quits: fe[nl]ix (~quassel@2a01:4f8:200:2425::adda) (*.net *.split)
[09:15:51] *** Joins: mrSpec (~mrSpec@user/spec)
[09:16:00] *** Joins: fe[nl]ix (~quassel@2a01:4f8:200:2425::adda)
[09:16:00] *** ChanServ sets mode: +o fe[nl]ix
[09:17:30] *** phadthai_ is now known as phadthai
[09:18:50] *** Quits: Xach (~xach@user/xach) (*.net *.split)
[09:18:50] *** Quits: sukaeto (~sukaeto@sharona.moonpearltech.com) (*.net *.split)
[09:18:50] *** Quits: madnificent (~madnifice@static.210.74.63.178.clients.your-server.de) (*.net *.split)
[09:18:50] *** Quits: derwolf (~DerWolf@2a01:4f8:c0c:554a::1) (*.net *.split)
[09:19:00] *** Joins: Xach (~xach@66-63-89-62.static.suscom-maine.net)
[09:19:04] *** Joins: sukaeto (~sukaeto@sharona.moonpearltech.com)
[09:19:35] *** Joins: derwolf (~DerWolf@2a01:4f8:c0c:554a::1)
[09:19:53] *** Joins: madnificent (~madnifice@static.210.74.63.178.clients.your-server.de)
[09:23:18] *** Quits: semz (~none@user/semz) (Ping timeout: 250 seconds)
[09:24:38] *** Joins: semz (~none@user/semz)
[09:31:06] *** Joins: lisp123 (~lisp123@5.30.23.247)
[09:35:49] *** Joins: mmk2410_ (~mmk2410@static.241.149.90.157.clients.your-server.de)
[09:40:27] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[09:44:41] *** Quits: mmk2410_ (~mmk2410@static.241.149.90.157.clients.your-server.de) (Ping timeout: 248 seconds)
[09:45:06] *** Quits: cjb (~cjb@user/cjb) (Quit: rcirc on GNU Emacs 28.0.50)
[09:48:07] *** Joins: kulernil (~kulernil@gateway/tor-sasl/kuler)
[09:50:03] *** Quits: kuler (~kulernil@gateway/tor-sasl/kuler) (Remote host closed the connection)
[10:06:12] *** Quits: semz (~none@user/semz) (Ping timeout: 250 seconds)
[10:11:27] *** Joins: semz (~none@user/semz)
[10:27:06] *** Joins: PinealGlandOptic (~PinealGla@37.115.210.35)
[10:33:13] *** Quits: kulernil (~kulernil@gateway/tor-sasl/kuler) (Remote host closed the connection)
[10:33:35] *** Joins: kulernil (~kulernil@gateway/tor-sasl/kuler)
[10:34:22] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 250 seconds)
[10:41:18] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Ping timeout: 250 seconds)
[10:44:20] *** Joins: amb007 (~a_bakic@136.13.23.93.rev.sfr.net)
[10:52:50] *** Joins: contrapunctus (a75f5b1571@jabberfr.org)
[10:57:04] *** Joins: paulman (~kulernil@gateway/tor-sasl/kuler)
[10:59:11] *** Quits: kulernil (~kulernil@gateway/tor-sasl/kuler) (Remote host closed the connection)
[11:00:07] *** Joins: pranavats (3fba1d1b34@jabberfr.org)
[11:09:43] *** Joins: rowanthorpe (~Thunderbi@ppp005054222136.access.hol.gr)
[11:11:28] *** Joins: shka (~herr@109.231.62.239)
[11:11:36] *** Quits: igemnace (~ian@user/igemnace) (Read error: Connection reset by peer)
[11:13:10] *** Joins: igemnace (~ian@user/igemnace)
[11:20:07] *** Joins: rgherdt (~rgherdt@2a02:8109:86c0:d8d:cb9:2d96:4da8:aca7)
[11:23:27] *** Quits: amb007 (~a_bakic@136.13.23.93.rev.sfr.net) (Ping timeout: 240 seconds)
[11:25:50] *** Joins: amb007 (~a_bakic@116.132.22.93.rev.sfr.net)
[11:30:28] <pjb> semz: but we don't have really the position in the user code of the call that signaled the condition, so we cannot know if two seemingly identical conditions come from the same place. eg. (if (= a b) (/ a 0) (/ (setf b a) 0))
[11:32:15] <pjb> semz: you'd have to use an implementation specific backtrace-list function (or portability library), and even this might not be precise enough (you only get the functions, not the code locations: you wouldn't know if it's the first or the second / that was called).
[11:32:40] *** Quits: amb007 (~a_bakic@116.132.22.93.rev.sfr.net) (Ping timeout: 240 seconds)
[11:33:30] <pjb> semz: however, it's conceivable to have an implementation providing enough information to make it indeed quite easy to implement a fuzzer for CL. Perhaps sicl could be specificied in that direction, as a debugging feature.
[11:33:39] <pjb> beach: ^
[11:33:42] *** Joins: amb007 (~a_bakic@116.132.22.93.rev.sfr.net)
[11:35:22] <moon-child> coverage-guided fuzzing is very cool.  Just tossing that out there :)
[11:38:07] *** Quits: amb007 (~a_bakic@116.132.22.93.rev.sfr.net) (Read error: Connection reset by peer)
[11:38:12] <hayley> moon-child is an advertisement funded by the droopy-ear rabbit industry.
[11:38:16] *** Quits: ane (ane@shell.wilan.org) (Remote host closed the connection)
[11:38:28] *** Joins: amb007 (~a_bakic@116.132.22.93.rev.sfr.net)
[11:39:34] <lukego> Hey, I wonder if I am laboring under a misapprehension. Is there a way to globally/persistently specify default optimization quantities? For example to say that I want (SAFETY 3) (DEBUG 3) but that this can be overridden locally by declaim/declare. I always thought PROCLAIM did exactly this but later heard that this gets reset e.g. by COMPILE-FILE...?
[11:39:50] <moon-child> hayley: hey, it's lonely up here on the moon
[11:39:50] *** Quits: amb007 (~a_bakic@116.132.22.93.rev.sfr.net) (Read error: Connection reset by peer)
[11:40:01] <moon-child> there's a man, a rabbit, and--that's it!
[11:40:26] <semz> pjb: I'm not doing it fully automatically right now, so the filtering is interactive and the worst that can happen is that the second parser bug is hidden until the first is fixed. The problem that prompted this was babel signalling the wrong (internal) error type on some inputs.
[11:40:31] *** Joins: amb007 (~a_bakic@116.132.22.93.rev.sfr.net)
[11:41:12] <semz> That said, what you described sounds really juicy. I wonder how heavy the performance cost of such a thing would be
[11:41:34] *** Joins: Cymew (~ante@c-e989225c.023-1144-7570702.bbcust.telenor.se)
[11:42:03] <semz> that's a problem you have with certain C tools like asan: they detect a lot but make the program so slow it becomes hard to test
[11:42:09] <semz> of course that's also partially the fault of the language
[11:42:40] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 240 seconds)
[11:43:10] <moon-child> (yes, it is a lop)
[11:43:11] *** Quits: amb007 (~a_bakic@116.132.22.93.rev.sfr.net) (Read error: Connection reset by peer)
[11:43:34] <hayley> I have a plan for thread-sanitizer in SICL (which can be slightly faster with thread-local nurseries), but coverage-based fuzzing would be welcome.
[11:43:42] *** Joins: amb007 (~a_bakic@116.132.22.93.rev.sfr.net)
[11:44:40] <hayley> In the case of fuzzing (or exhaustive search, when you have a reasonably small domain), it is still faster to fuzz than wait for something to go wrong in a real application.
[11:47:07] *** Quits: amb007 (~a_bakic@116.132.22.93.rev.sfr.net) (Read error: Connection reset by peer)
[11:47:15] *** Joins: gaqwas (~john@dynamic-095-114-045-235.95.114.pool.telefonica.de)
[11:47:16] *** Joins: amb007 (~a_bakic@116.132.22.93.rev.sfr.net)
[11:47:16] *** Quits: amb007 (~a_bakic@116.132.22.93.rev.sfr.net) (Read error: Connection reset by peer)
[11:47:32] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[11:52:22] *** Quits: Mandus (~aasmundo@0.51-175-33.customer.lyse.net) (Ping timeout: 250 seconds)
[11:55:57] <pillton> lukego: Yes. proclaim
[11:56:02] <pillton> clhs proclaim
[11:56:02] <specbot> http://www.lispworks.com/reference/HyperSpec/Body/f_procla.htm
[12:02:37] *** Joins: lisp123 (~lisp123@5.30.23.247)
[12:04:00] *** Parts: contrapunctus (a75f5b1571@jabberfr.org) ()
[12:07:31] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 252 seconds)
[12:07:36] *** Joins: Mandus (~aasmundo@0.51-175-33.customer.lyse.net)
[12:08:52] <lukego> pillton: Indeed. I'd always thought this is how it worked but thought that I'd recently learned otherwise. Likely I didn't phrase my past question correctly and misinterpreted the answer. Thanks!
[12:09:44] *** Joins: contrapunctus (a75f5b1571@jabberfr.org)
[12:09:48] <lukego> (Frankly I still wasn't sure after reading the spec but my experiments with (proclaim ...) (load (compile-file ...)) support the interpretation that proclaim is global/persistent/effective)
[12:14:07] *** Quits: Mandus (~aasmundo@0.51-175-33.customer.lyse.net) (Ping timeout: 252 seconds)
[12:14:31] *** Joins: Mandus (~aasmundo@0.51-175-33.customer.lyse.net)
[12:26:43] *** Joins: pve (~pve@176-93-86-239.bb.dnainternet.fi)
[12:31:14] *** Joins: lisp123 (~lisp123@5.30.23.247)
[12:35:46] *** Joins: hendursa1 (~weechat@user/hendursaga)
[12:36:47] *** Quits: gaqwas (~john@dynamic-095-114-045-235.95.114.pool.telefonica.de) (Ping timeout: 240 seconds)
[12:37:10] *** Joins: makomo (~makomo@user/makomo)
[12:38:56] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 244 seconds)
[12:41:27] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Read error: Connection reset by peer)
[12:42:09] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[12:44:17] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Read error: Connection reset by peer)
[12:44:51] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[13:03:26] *** Quits: cpape`` (~user@2a01:4f9:c010:632d::1) (Quit: ERC (IRC client for Emacs 25.2.2))
[13:03:45] *** Joins: cpape (~user@2a01:4f9:c010:632d::1)
[13:09:06] *** Joins: silasfox (~sbv@xdsl-87-78-57-101.nc.de)
[13:12:08] *** Joins: notzmv (~zmv@user/notzmv)
[13:16:37] *** Parts: PinealGlandOptic (~PinealGla@37.115.210.35) ()
[13:31:15] *** Joins: selwyn (~selwyn@user/selwyn)
[13:33:00] *** Parts: contrapunctus (a75f5b1571@jabberfr.org) ()
[13:33:50] *** Quits: rain3 (~rain3___@2a02:2f09:d30b:1300:514:bcc7:8202:1798) (Remote host closed the connection)
[13:34:25] *** Joins: contrapunctus (a75f5b1571@jabberfr.org)
[13:38:24] *** Quits: igemnace (~ian@user/igemnace) (Remote host closed the connection)
[13:49:16] *** Quits: amk (~amk@109.255.169.126) (Ping timeout: 252 seconds)
[13:49:22] *** Quits: scymtym (~user@ip-88-153-154-183.hsi04.unitymediagroup.de) (Ping timeout: 250 seconds)
[13:55:34] *** Joins: scymtym (~user@ip-88-153-154-183.hsi04.unitymediagroup.de)
[13:56:25] *** Joins: amk (~amk@109.255.169.126)
[14:33:09] *** Joins: attila_lendvai (~alendvai@1F2EFC6D.unconfigured.pool.telekom.hu)
[14:35:00] *** Joins: rain3 (~rain3___@2a02:2f09:d30b:1300:514:bcc7:8202:1798)
[14:41:10] *** Quits: semz (~none@user/semz) (Ping timeout: 240 seconds)
[14:41:49] *** Joins: semz (~none@user/semz)
[15:01:25] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[15:06:04] *** Quits: Inline (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431) (Quit: Leaving)
[15:15:14] *** Quits: kakuhen (~kakuhen@user/kakuhen) (Quit: Leaving...)
[15:17:14] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Read error: Connection reset by peer)
[15:17:46] *** Joins: amb007 (~a_bakic@61.38.22.93.rev.sfr.net)
[15:18:35] <_death> I think it's implementation-dependent
[15:18:39] <lukego> Hey I have a multidimensional array of floats and I want to write that into a file in raw format e.g. just the IEEE double float values stored back-to-back in row-major order. What's the easy way? :)
[15:19:25] <_death> nibbles?
[15:23:02] <lukego> nibbles seems to only do integers
[15:23:22] <pjb> lukego: there are various libraries that will convert floats into ieee-754-double bits.
[15:23:39] <pjb> com.informatimago.common-lisp.data-encoding.ieee-754:float-64-to-ieee-754
[15:23:52] <pjb> for example, but others too.
[15:24:17] <lukego> thanks, makes sense, just iterate through the array converting values one at a time.
[15:24:22] <pjb> So, yes, writing down (array-dimensions a) and then using array-row-major (I would displace it to a vector to make it easier to process)
[15:24:55] <_death> lukego: eh? it has, say, nibbles:write-ieee-double/le
[15:25:42] <pjb> Something like: (map nil (lambda (v) (write-64-bit-unsigned-int (com.informatimago.common-lisp.data-encoding.ieee-754:float-64-to-ieee-754 v))) (make-array (reduce '* (array-dimensions a)) :displaced-to a))
[15:25:43] *** Quits: amb007 (~a_bakic@61.38.22.93.rev.sfr.net) (Read error: Connection reset by peer)
[15:25:48] <lukego> _death: oh, not this nibbles then https://www.quicklisp.org/beta/UNOFFICIAL/docs/nibbles/doc/index.html
[15:26:29] <_death> lukego: right, the docs need an update
[15:26:41] <lukego> thanks for the tip. indeed, sources look more promising
[15:26:50] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[15:28:23] <pjb> yes, nibbles too: https://termbin.com/orm9
[15:30:07] *** Quits: mingus (~jan-magnu@ti0135a400-2471.bb.online.no) (Ping timeout: 268 seconds)
[15:32:21] *** Joins: mingus (~jan-magnu@ti0135a400-2471.bb.online.no)
[15:33:06] <lukego> My array is four-dimensional but I guess I can just make a vector that's displaced to it and then write that to a stream. thanks again.
[15:36:53] *** Joins: random-nick (~random-ni@87.116.177.176)
[15:46:22] *** Joins: Guest29 (~Guest29@72.71.222.77)
[15:51:24] *** Quits: pillton (~user@2405:b000:300:b0::2fba) (Quit: ERC (IRC client for Emacs 27.2))
[15:59:43] *** Quits: hhdave (~hhdave@ip212.ip-193-70-71.eu) (Ping timeout: 268 seconds)
[15:59:53] *** Joins: hhdave_ (~hhdave@ip212.ip-193-70-71.eu)
[16:10:08] *** Joins: yitzi (~yitzi@172.98.105.250)
[16:17:13] *** Quits: silasfox (~sbv@xdsl-87-78-57-101.nc.de) (Ping timeout: 252 seconds)
[16:18:56] *** Joins: silasfox (~sbv@cgn-89-1-215-99.nc.de)
[16:21:49] *** Joins: doyougnu (~user@c-73-25-202-122.hsd1.or.comcast.net)
[16:24:29] *** Joins: Inline (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431)
[16:29:20] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Quit: ERC (IRC client for Emacs 27.2))
[16:52:34] *** Joins: tyson2 (~user@toroon12-3096782589.sdsl.bell.ca)
[16:58:18] <jmercouris> I wrote this awful macro: http://dpaste.com/F3KCT4GS6
[16:58:26] <jmercouris> and I just can't for the life of me figure out how I should structure it intelligently
[16:58:33] <jmercouris> I've been staring at it for like ten minutes
[17:00:04] <jmercouris> obvious question you may have is, "why not move the sentence-case-p into the if block?" well, because the macro will produce a bunch of (if nil xyz qwe) and SBCL will delete the non existent branch and spit out a warning
[17:01:35] <beach> jmercouris: You don't have to put the IF at the top level.
[17:01:42] <beach> Heh.
[17:01:49] <jmercouris> beach: what do you mean?
[17:01:55] <beach> What you just said.
[17:01:58] <jmercouris> I see
[17:02:14] <beach> Oh, no.
[17:02:21] <beach> Let me show you...
[17:02:54] <hayley> Is there no way to make this just a function? I suppose if spinneret doesn't let you generate HTML from some runtime structure, you need some indirection for that.
[17:03:06] <jmercouris> it must be a macro because of spinneret...
[17:04:00] <hayley> (defun write-span (string) (spinneret:with-html (:span string))) (defun command-docstring-first-sentence (name &key sentence-case-p) ...)
[17:04:29] <beach> You do `(if (fboundp ,fn) (spinneret:with-html (:span (or ,(if sentence-case-p `(str-...) `(first ...))))))
[17:04:51] <jmercouris> beach: ah, I can see now
[17:04:57] <beach> ... if it has to be a macro.
[17:05:03] <jmercouris> just conditionally emit rather than emitting the whole IF FORM
[17:05:07] <jmercouris> which will result in the blocks
[17:05:10] <jmercouris> It all makes sense now
[17:06:43] <beach> You can even do better and have one copy of the ppcre:split.
[17:07:01] <pjb> lukego: just write first the (array-dimensions a) to be able to rebuild a similar array when reading.
[17:07:25] <jmercouris> I guess I could conditionally build the list and prepends sentence-case-p if necessary only
[17:07:35] <jmercouris> I assume that is what you mean beach
[17:07:39] <beach> Yes.
[17:07:54] <jmercouris> I see
[17:07:57] <jmercouris> perhaps I may
[17:08:00] <jmercouris> thanks for the help
[17:08:13] <jmercouris> I didn't even think about conditionally emitting
[17:08:16] <jmercouris> I guess my mind was frozen
[17:08:17] <beach> Or ,(if ... 'str... 'identity)
[17:09:39] <beach> (,(if sentence-case-p 'str:sentence-case 'identity) (first ...))
[17:16:21] <jmercouris> yes
[17:18:51] <beach> jmercouris: Or, put the '(first (ppcre:split ...)) in a lexical variable, (let ((body '(first (ppcre:split ...)))) and then `(if ,sentence-case-p '(str:sentence-case ,body ) ,body)
[17:19:40] *** Quits: hendursa1 (~weechat@user/hendursaga) (Quit: hendursa1)
[17:20:18] *** Joins: hendursaga (~weechat@user/hendursaga)
[17:21:36] <jmercouris> I actually almost did a let
[17:21:47] <jmercouris> And then I figured that the context may not be right
[17:22:01] <beach> But you see what I mean, right?
[17:22:08] <jmercouris> Yes
[17:22:11] <jmercouris> I understand it
[17:22:15] <beach> Great!
[17:22:21] <jmercouris> :-)
[17:22:26] <jmercouris> Thanks for the help
[17:22:37] <beach> Pleasure.
[17:22:40] *** Quits: recordgroovy (~recordgro@c-67-185-152-122.hsd1.wa.comcast.net) (Ping timeout: 252 seconds)
[17:24:14] *** Quits: lisp123 (~lisp123@5.30.23.247) (Quit: Leaving...)
[17:24:21] *** Joins: recordgroovy (~recordgro@c-67-185-152-122.hsd1.wa.comcast.net)
[17:25:53] *** Joins: lisp-newbie (~lisp-newb@192.117.240.42)
[17:26:21] *** Joins: cranium (~cranium@user/cranium)
[17:27:07] *** Joins: Bike (~Glossina@71.69.170.70)
[17:27:07] *** ChanServ sets mode: +o Bike
[17:33:32] *** Quits: lisp-newbie (~lisp-newb@192.117.240.42) (Quit: This computer has gone to sleep)
[17:38:53] *** Joins: didi (~user@user/didi)
[17:40:55] <didi> Is it possible to extend `incf' to work with a user-defined class? e.g. (defclass my-class ...) (defmethod my-element (my-class ...) ...) (incf (my-element my-class))
[17:41:45] <hayley> Provided you have a (setf my-element) function, yes.
[17:42:22] <didi> hayley: Ah, cool. Thank you.
[17:57:51] *** Parts: contrapunctus (a75f5b1571@jabberfr.org) ()
[18:04:59] *** Joins: contrapunctus (a75f5b1571@jabberfr.org)
[18:11:29] <pjb> didi: it's automatique if you do (defclass my-class () ((foo :initform 0 :ACCESSOR my-element)))
[18:12:50] <pjb> didi: you can define places with defun/defgeneric foo (setf foo), with defsetf (2 forms) and with define-setf-expander.
[18:13:09] <pjb> didi: in addition to defclass, defstruct and the default CL places.
[18:15:16] *** Quits: tyson2 (~user@toroon12-3096782589.sdsl.bell.ca) (Quit: ERC (IRC client for Emacs 27.2))
[18:16:44] *** Quits: recordgroovy (~recordgro@c-67-185-152-122.hsd1.wa.comcast.net) (Ping timeout: 250 seconds)
[18:17:31] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[18:19:54] <didi> pjb: Nice. Thank you.
[18:20:42] *** Joins: flip214 (~marek@user/flip214)
[18:27:37] * jcowan thinks wisfully that it would be nice if s-expressioniss and s-expressions were the same github repo
[18:28:10] *** Quits: jans (~Thunderbi@185.213.154.242) (Ping timeout: 240 seconds)
[18:28:22] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[18:39:18] *** Joins: nij- (~jin@admin.guest.stonybrook.edu)
[18:45:07] *** Joins: karlosz (~karlosz@93-164-35-250-static.dk.customer.tdc.net)
[18:48:58] *** Joins: lisp123 (~lisp123@45.86.202.23)
[18:52:19] *** Quits: nij- (~jin@admin.guest.stonybrook.edu) (Ping timeout: 252 seconds)
[18:59:38] *** Parts: contrapunctus (a75f5b1571@jabberfr.org) ()
[19:01:34] *** Joins: contrapunctus (a75f5b1571@jabberfr.org)
[19:02:32] *** Joins: lisp-newbie (~lisp-newb@192.117.240.42)
[19:17:49] <beach> Shinmera: Would it be too much to ask for you to log the new #climacs channel?  It is fine if don't want to because you have had enough requests of this type.
[19:22:59] <lisp-newbie> Hi, If I have an object of a certain class, and I want to just add a slot to that object. Is there an easy way to do this? I found 3 answers here: https://groups.google.com/g/comp.lang.lisp/c/3JhUiNth7Lk/m/IW9N1CL7JUAJ in particular the email sent at "12:55:39". Has anything changed in 10 years?
[19:23:26] *** Joins: NeoCron (~NeoCron@45.158.175.19)
[19:24:02] <beach> lisp-newbie: You can't add slots to individual objects (for very good reasons).  You need to make a subclass and call CHANGE-CLASS to turn the object into an instance of that subclass.
[19:25:21] <lisp-newbie> beach thanks, any preference between CHANGE-CLASS over this method? (defmethod make-instance ((class (eql 'third-party-class)) &rest args)(apply #'make-instance 'my-class args))
[19:25:42] <lisp-newbie> it's a one liner, not long code, that's why I sent it... I know, longer code in pastebin
[19:25:48] <Bike> definitely don't do that. it won't work in general.
[19:25:54] <lisp-newbie> beach thanks for answering!
[19:26:03] <beach> lisp-newbie: I assumed you already had an instance.
[19:26:11] <lisp-newbie> Bike which one, change-class or the make-instance?
[19:26:18] <Bike> the make-instance
[19:27:06] <lisp-newbie> beach I have an instance, is that method not overriding the make-instance of the other class so automatically I would get an instance of the new class? I could change other things for that... not sure if that makes sense... trying to weigh approaches
[19:27:10] <Shinmera> beach: sure.
[19:27:17] <Bike> lisp-newbie: we might be able to give more comprehensive answers if you explain more context about what you're doing
[19:27:21] <lisp-newbie> Bike thanks
[19:27:24] <Shinmera> beach: is debate around clim so heated you need two channels now? :)
[19:27:28] *** Joins: domovod (~domovod@ec2-35-165-86-158.us-west-2.compute.amazonaws.com)
[19:27:32] <Bike> lisp-newbie: for example you could still do (make-instance (find-class 'third-party-class) ...) and it would bypass this method
[19:28:03] *** Joins: srhm (~srhm@user/srhm)
[19:28:37] <beach> Shinmera: Sort of.
[19:29:55] *** Joins: X-Scale (~ARM@238.72.108.93.rev.vodafone.pt)
[19:29:58] <lisp-newbie> Bike I have instances of a class that is being json encoded by cl-json. Now the class has a slot with local-time and is being encoded as an object to json which is quite unfortunate. I want to call a local-time function that gives me an iso string representation of the time, and have that enconded as part of the json object. So if I can just add another slot which is a string where I set the value to be the iso date it would work... otherwise t
[19:29:58] <lisp-newbie> hought about converting the object to a plist, but couldn't find a standard way to do it
[19:30:42] <Bike> well in that case cl-json has a mode built in to use "fluid" objects that can have slots added and removed like in a prototype based system.
[19:30:46] <lisp-newbie> Bike I thought about modifying how the json encoder works, but that is a bit of a headache and would have to modify many places... this is more general
[19:31:20] <lisp-newbie> Bike oh, I was reading about that in the docs and didn't get it, can you please point me to an example? thanks so much!
[19:31:26] <lisp-newbie> Bike that sounds much easier
[19:31:37] *** Quits: srhm (~srhm@user/srhm) (Read error: Connection reset by peer)
[19:31:37] <lisp-newbie> I want to have the change for a bunch of different classes...
[19:32:01] *** Joins: srhm (~srhm@user/srhm)
[19:32:42] <Bike> i haven't used it myself, but the documentation seems pretty helpful. there's a brief example under "The CLOS decoder"
[19:32:49] <Bike> https://common-lisp.net/project/cl-json/cl-json.html#CLOS-DECODER
[19:32:51] <lisp-newbie> Bike I need it for encoding btw, not decoding
[19:33:12] <Bike> iiiii see.
[19:34:08] <Bike> wait, so you want to add a slot to this local-time class? couldn't you just customize how it's encoded?
[19:36:28] <Bike> you could customize the encoding of the local-time directly, or it might be better to customize how your object is encoded
[19:36:40] *** Quits: karlosz (~karlosz@93-164-35-250-static.dk.customer.tdc.net) (Quit: karlosz)
[19:37:26] <lisp-newbie> Bike I want to add a slot to a class that contains a local-time object as a slot, to hold the variable. I thought about customizing how it's encoded, but couldn't figure out an easy way to do it, I guess I could copy this "encode-json ((o standard-object)" from here https://github.com/hankhero/cl-json/blob/master/src/encoder.lisp and check for local-time but it seems pretty hacky, no?
[19:38:09] <Bike> let me assure you that adding a slot to a class is way more hacky than one method definition.
[19:38:13] <lisp-newbie> Bike how do you think I could do this in a better way?
[19:38:22] <lisp-newbie> Bike yeah, agreed
[19:38:29] <Bike> like literally you just need to do (defmethod encode-json ((o your-class) ...) ...)
[19:38:37] <Bike> and the method body can be whatever is convenient for you
[19:38:58] <lisp-newbie> Bike ok, will try that, thanks
[19:39:12] <Bike> under "Customizing the encoder" the manual describes how to do things like write out an object with whatever slots you want
[19:39:50] <Bike> like if i'm reading this right you could do (with-object (stream) (encode-object-member 'time (stringify-local-time (time object))) ...)
[19:42:15] <lisp-newbie> Bike right, but that would be for a one time encoding, the standard encoding wouldn't call that, right?
[19:42:33] <lisp-newbie> sorry have to run out for a bit
[19:42:36] *** Quits: lisp-newbie (~lisp-newb@192.117.240.42) (Quit: This computer has gone to sleep)
[19:42:45] *** Joins: lisp-newbie (~lisp-newb@192.117.240.42)
[19:43:02] *** Quits: lisp-newbie (~lisp-newb@192.117.240.42) (Remote host closed the connection)
[19:43:13] *** Joins: lisp-newbie (~lisp-newb@192.117.240.42)
[19:43:34] *** Quits: lisp-newbie (~lisp-newb@192.117.240.42) (Remote host closed the connection)
[19:43:40] *** Joins: lisp-newbie (~lisp-newb@192.117.240.42)
[19:43:41] *** Quits: lisp-newbie (~lisp-newb@192.117.240.42) (Client Quit)
[19:44:00] *** Joins: lisp-newbie (~lisp-newb@192.117.240.42)
[19:44:18] *** Quits: lisp-newbie (~lisp-newb@192.117.240.42) (Remote host closed the connection)
[19:46:46] <Bike> why would it not call encode-json
[19:55:26] <Bike> i mean for one thing you can just call encode-json yourself, and beyond that it's what encode-json-to-string uses
[19:57:26] *** Joins: cage (~cage@dynamic-adsl-78-15-36-212.clienti.tiscali.it)
[20:03:11] *** Joins: karlosz (~karlosz@93-164-35-250-static.dk.customer.tdc.net)
[20:07:28] *** Joins: recordgroovy (~recordgro@c-67-185-152-122.hsd1.wa.comcast.net)
[20:12:07] *** Quits: jasom (~aidenn@2600:8802:7fa0:b00:69c9:7281:b072:31aa) (Ping timeout: 245 seconds)
[20:16:51] *** Joins: jasom (~aidenn@2600:8802:7fa0:b00:69c9:7281:b072:31aa)
[20:21:50] <mfiano> Do I need the MOP to check whether or not the result of fboundp designates a generic function, and if so, how would I do that?
[20:23:13] <beach> No, just check whether the result of FDEFINITION is an instance of generic-function
[20:23:24] <akater[m]> mfiano: `ensure-generic-function`?
[20:23:30] <mfiano> Ah makes sense
[20:24:05] <beach> akater[m]: No, that would create it if it doesn't exist, and it will fail if the definition is already an ordinary function.
[20:26:39] <mfiano> beach: Why would I need FDEFINITION? Isn't (typep (fboundp 'name) 'generic-function) enough?
[20:27:20] <beach> I can't remember what fboundp returns, but it can be messy.  Let me check...
[20:27:41] *** Joins: lisp-newbie (~lisp-newb@192.117.240.42)
[20:27:43] <beach> It could return T.
[20:28:06] <mfiano> But (typep t 'generic-function) is still nil
[20:28:37] <rain3> (fboundp '+) ;=> t
[20:29:08] <mfiano> Oh, so it's not specified whether it returns a function object
[20:29:15] * mfiano reads
[20:29:51] <beach> Maybe I misunderstood the question.  FBOUNDP is not specified to return enough information to determine whether the name designates a generic function.
[20:31:17] <mfiano> Right. So I need to use that first, so I can guard against an undefined function condition
[20:31:34] <beach> Right.
[20:38:51] *** Joins: Lycurgus (~juan@cpe-45-46-140-49.buffalo.res.rr.com)
[20:39:11] *** Quits: domovod (~domovod@ec2-35-165-86-158.us-west-2.compute.amazonaws.com) (Quit: WeeChat 3.2)
[20:44:47] *** Quits: silasfox (~sbv@cgn-89-1-215-99.nc.de) (Ping timeout: 240 seconds)
[20:46:35] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Read error: Connection reset by peer)
[20:47:19] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[20:48:17] *** Quits: NeoCron (~NeoCron@45.158.175.19) (Remote host closed the connection)
[20:51:33] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Ping timeout: 250 seconds)
[20:51:56] *** Joins: Demosthe1ex (~Demosthen@user/demosthenex)
[20:52:09] *** Joins: amb007 (~a_bakic@13.38.22.93.rev.sfr.net)
[20:53:39] *** Joins: nij- (~jin@admin.guest.stonybrook.edu)
[20:54:27] *** Quits: yitzi (~yitzi@172.98.105.250) (Ping timeout: 240 seconds)
[20:55:07] *** Quits: Demosthenex (~Demosthen@user/demosthenex) (Ping timeout: 268 seconds)
[20:55:51] *** Quits: amb007 (~a_bakic@13.38.22.93.rev.sfr.net) (Read error: Connection reset by peer)
[20:56:19] *** Joins: amb007 (~a_bakic@94.199.126.61)
[20:56:20] *** Quits: karlosz (~karlosz@93-164-35-250-static.dk.customer.tdc.net) (Quit: karlosz)
[20:57:31] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Quit: WeeChat 3.2)
[20:59:04] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[21:00:06] *** Parts: contrapunctus (a75f5b1571@jabberfr.org) ()
[21:00:57] *** Quits: amb007 (~a_bakic@94.199.126.61) (Ping timeout: 248 seconds)
[21:01:56] *** Quits: nij- (~jin@admin.guest.stonybrook.edu) (Quit: Using Circe, the loveliest of all IRC clients)
[21:03:44] *** Joins: amb007 (~a_bakic@69.133.22.93.rev.sfr.net)
[21:09:32] *** Joins: silasfox (~sbv@cgn-89-1-215-99.nc.de)
[21:14:04] *** Joins: contrapunctus (a75f5b1571@jabberfr.org)
[21:16:58] *** Quits: srhm (~srhm@user/srhm) (Ping timeout: 252 seconds)
[21:20:27] *** Quits: lisp-newbie (~lisp-newb@192.117.240.42) (Quit: This computer has gone to sleep)
[21:20:36] *** Joins: lisp-newbie (~lisp-newb@192.117.240.42)
[21:20:53] *** Quits: lisp-newbie (~lisp-newb@192.117.240.42) (Remote host closed the connection)
[21:21:04] *** Joins: lisp-newbie (~lisp-newb@192.117.240.42)
[21:21:22] *** Quits: lisp-newbie (~lisp-newb@192.117.240.42) (Remote host closed the connection)
[21:21:29] *** Joins: lisp-newbie (~lisp-newb@192.117.240.42)
[21:21:32] *** Quits: lisp-newbie (~lisp-newb@192.117.240.42) (Client Quit)
[21:21:51] *** Joins: lisp-newbie (~lisp-newb@192.117.240.42)
[21:22:06] *** Quits: lisp-newbie (~lisp-newb@192.117.240.42) (Remote host closed the connection)
[21:22:12] *** Joins: lisp-newbie (~lisp-newb@192.117.240.42)
[21:22:15] *** Quits: lisp-newbie (~lisp-newb@192.117.240.42) (Client Quit)
[21:24:34] *** Quits: mariari (~mariari@user/mariari) (Ping timeout: 240 seconds)
[21:25:27] *** Quits: Demosthe1ex (~Demosthen@user/demosthenex) (Ping timeout: 240 seconds)
[21:25:29] *** Joins: tyson2 (~user@toroon12-3096782677.sdsl.bell.ca)
[21:27:56] *** Quits: sjl (~sjl@cpe-66-66-5-59.rochester.res.rr.com) (Quit: WeeChat 2.2-dev)
[21:28:36] *** Joins: mariari (~mariari@user/mariari)
[21:28:50] *** Quits: cranium (~cranium@user/cranium) (Quit: Leaving)
[21:32:13] *** Joins: livoreno (~livoreno@user/notzmv)
[21:33:21] *** Parts: contrapunctus (a75f5b1571@jabberfr.org) ()
[21:35:50] *** Quits: livoreno (~livoreno@user/notzmv) (Read error: Connection reset by peer)
[21:37:27] *** Quits: silasfox (~sbv@cgn-89-1-215-99.nc.de) (Ping timeout: 240 seconds)
[21:38:13] *** Joins: Demosthenex (~Demosthen@user/demosthenex)
[21:40:14] *** Joins: livoreno (~livoreno@user/notzmv)
[21:44:28] *** Quits: amb007 (~a_bakic@69.133.22.93.rev.sfr.net) (Read error: Connection reset by peer)
[21:44:53] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[21:46:23] <mfiano> Dumb question, but can someone explain to me why calling a function in the REPL that has a compiler macro always calls the original function?
[21:47:25] *** Joins: andreyorst[erc] (~andreyors@2.92.124.61)
[21:50:21] *** Joins: contrapunctus (a75f5b1571@jabberfr.org)
[21:50:31] *** Quits: taiju (~taiju@m014013236064.v4.enabler.ne.jp) (Ping timeout: 252 seconds)
[21:51:00] <random-nick> the standard doesn't require compiler macros to be run
[21:51:21] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Ping timeout: 250 seconds)
[21:51:22] <random-nick> and it recommends them to be run by COMPILE-FILE, LOAD and the like but not EVAL
[21:51:36] *** Joins: taiju (~taiju@M014013236064.v4.enabler.ne.jp)
[21:51:48] *** andreyorst[erc] is now known as aorst[erc]
[21:52:04] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[21:52:14] <random-nick> uh, looks like I misremembered that recommendation
[21:52:14] *** aorst[erc] is now known as andreyorst[erc]
[21:53:57] *** Quits: Demosthenex (~Demosthen@user/demosthenex) (Ping timeout: 250 seconds)
[21:54:40] <random-nick> clhs 3.2.2.1.3.1
[21:54:41] <specbot> Notes about the Implementation of Compiler Macros: http://www.lispworks.com/reference/HyperSpec/Body/03_bbaca.htm
[21:54:44] <pjb> mfiano: why would you are?  Compiler macros cannot change the semantics, so you should see no difference!
[22:01:53] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Read error: Connection reset by peer)
[22:02:24] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[22:03:05] <Bike> compiler macros are basically intended for optimization. if you're just evaluating one call, the expense of calling the compiler macro, consing up a form, and evaluating it is probably gonna be worse than just calling the function
[22:05:14] <mfiano> Sure, this is semantically equivalent optimization. I was testing it, and realized I had to wrap it in a defun and call that, or just macro-step it
[22:11:38] *** Joins: Demosthenex (~Demosthen@user/demosthenex)
[22:11:53] *** Quits: rowanthorpe (~Thunderbi@ppp005054222136.access.hol.gr) (Ping timeout: 248 seconds)
[22:17:12] *** Joins: lisp123_ (~lisp123@5.30.23.247)
[22:20:13] *** Quits: lisp123 (~lisp123@45.86.202.23) (Ping timeout: 252 seconds)
[22:26:04] *** Joins: Demosthe1ex (~Demosthen@user/demosthenex)
[22:29:03] *** Quits: Demosthenex (~Demosthen@user/demosthenex) (Ping timeout: 250 seconds)
[22:32:09] *** Quits: tyson2 (~user@toroon12-3096782677.sdsl.bell.ca) (Quit: ERC (IRC client for Emacs 27.2))
[22:32:30] *** Quits: Lycurgus (~juan@cpe-45-46-140-49.buffalo.res.rr.com) (Quit: Exeunt)
[22:36:51] *** Joins: tyson2 (~user@toroon12-3096782677.sdsl.bell.ca)
[22:47:43] *** Joins: lisp-newbie (~lisp-newb@192.117.240.42)
[22:51:52] *** Quits: lisp123_ (~lisp123@5.30.23.247) (Quit: Leaving...)
[23:01:15] *** Joins: NotThatRPG (~NotThatRP@162-219-230-90.fttp.usinternet.com)
[23:07:21] <jcowan> Of course compiler macros can change the semantics.  That's an abuse of them, but not impossible.
[23:07:40] *** Quits: cosimone (~user@93-44-186-135.ip98.fastwebnet.it) (Ping timeout: 240 seconds)
[23:11:27] *** Joins: karlosz (~karlosz@93-164-35-250-static.dk.customer.tdc.net)
[23:14:55] *** Quits: attila_lendvai (~alendvai@1F2EFC6D.unconfigured.pool.telekom.hu) (Quit: Leaving)
[23:15:57] *** Quits: derelict (~derelict@user/derelict) (Quit: WeeChat 3.2)
[23:16:25] *** Joins: _dave (~Srain@172.13.160.191)
[23:24:43] *** Joins: attila_lendvai (~alendvai@1F2EFC6D.nat.pool.telekom.hu)
[23:25:26] *** Joins: hunar (~Hunar@2a0d:4f00:12:2876:3da7:4422:10c9:820f)
[23:29:13] *** Quits: tux0r- (~tux0r@rosaelefanten.org) (Ping timeout: 248 seconds)
[23:29:33] *** Quits: lisp-newbie (~lisp-newb@192.117.240.42) (Quit: This computer has gone to sleep)
[23:29:43] *** Joins: lisp-newbie (~lisp-newb@192.117.240.42)
[23:29:43] *** Quits: lisp-newbie (~lisp-newb@192.117.240.42) (Client Quit)
[23:29:43] *** Joins: tux0r (~tux0r@2a03:4000:34:5e:281e:e1ff:fe28:c3b5)
[23:31:37] *** Quits: _dave (~Srain@172.13.160.191) (Remote host closed the connection)
[23:35:05] *** Quits: ck_ (~ck@plskthx.org) (Ping timeout: 248 seconds)
[23:38:23] *** Joins: dlowe (~dlowe@user/dlowe)
[23:39:47] *** Quits: hunar (~Hunar@2a0d:4f00:12:2876:3da7:4422:10c9:820f) (Ping timeout: 240 seconds)
[23:43:48] *** Joins: hunar (~Hunar@2a0d:4f00:12:1d1f:8a69:dcdf:ea8e:2048)
[23:44:58] *** Quits: hunar (~Hunar@2a0d:4f00:12:1d1f:8a69:dcdf:ea8e:2048) (Client Quit)
[23:48:27] *** Quits: rain3 (~rain3___@2a02:2f09:d30b:1300:514:bcc7:8202:1798) (Ping timeout: 240 seconds)
[23:49:07] <akater[m]> Concerning our discussions some days ago on setf that always macroexeands to (setf ,getter ..)  Even if this practice became common, it would still be inconsistent due to the very setf generics this was motivated by, as they evaluate their arguments.
[23:51:01] *** Joins: gaqwas (~john@dynamic-095-114-045-235.95.114.pool.telefonica.de)
[23:52:47] *** Quits: tux0r (~tux0r@2a03:4000:34:5e:281e:e1ff:fe28:c3b5) (Ping timeout: 240 seconds)
[23:56:39] *** Joins: ck_ (~ck@plskthx.org)
[23:58:06] *** Quits: cage (~cage@dynamic-adsl-78-15-36-212.clienti.tiscali.it) (Quit: rcirc on GNU Emacs 27.1)
[23:58:27] *** Joins: srhm (~srhm@user/srhm)
