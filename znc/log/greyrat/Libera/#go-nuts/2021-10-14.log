[00:00:02] <fizzie> (Well, in actual fact you might want to just io.Copy from the file to the response_writer instead of having any sort of maximum length limit, but that's a different point.)
[00:00:05] <fentanyl> fizzie: So, I guess you mean `response_writer.Write(file_contents[:num_bytes_read])`? (That didn't solve, unless I'm mistaken)
[00:00:24] *** Joins: rcernin_ (~rcernin@2001:8003:6803:db00:94a6:c64a:503d:8e89)
[00:00:59] <fizzie> Yes, that's what I meant. Well, have you checked the exact contents of your response yet?
[00:01:19] <fentanyl> fizzie: I'm not sure how I could do that. I think io.Copy reads the contents of the file as a `string`? But response_writer would only accept []bytes
[00:01:25] *** Quits: dsrt^ (~dsrt@wsip-70-165-23-55.mc.at.cox.net) (Remote host closed the connection)
[00:01:34] <fentanyl> Like, io.Copy into response_writer
[00:02:38] <fentanyl> fizzie: When I force cURL to output to terminal via `curl --output -`, the contents that're being printed are plain ASCII characters and not non-printable ones.
[00:03:28] <fentanyl> fizzie: also, num_bytes_read returns a incorrect result it seems.
[00:03:54] <fentanyl> fizzie: Here is the code without line numbers: https://termbin.com/pli7
[00:04:36] <fentanyl> and sample cURL test command would be `curl -v http://localhost:PORT/bin?id=HASH_OUTPUT`
[00:05:18] <fentanyl> but we first have to upload a file, it can be done through `curl -v -F "file_name=@SOME_FILE" http://localhost:PORT/post_bin`
[00:05:45] *** Joins: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl)
[00:06:46] <fentanyl> I'm pasting tester cURL command and source file so that anyone would be able to test it on their end.
[00:07:04] *** Quits: jla (~jordi@tao.ddns.jazztel.es) (Ping timeout: 265 seconds)
[00:07:30] *** Joins: espero (~espero@ucitelonline.pedf.cuni.cz)
[00:08:06] <fizzie> io.Copy copies data from an io.Reader to an io.Writer.
[00:08:18] <fizzie> *os.File is an io.Reader, and http.ResponseWriter is an io.Writer.
[00:08:40] <fizzie> But it's true that you couldn't populate the Content-Length header if you were to use io.Copy.
[00:09:00] <fizzie> (Won't be able to try your thing out at least before some dinner.)
[00:09:59] <fizzie> Your PostHandler has a similar problem about writing extra 0 bytes at the end of the file (because your file_contents slice will always be exactly buffer_size bytes long, and that's what you write to the file).
[00:11:39] *** Joins: khrbt (~znc@user/khrbt)
[00:11:56] *** Quits: kiril (~kiril@85.91.153.163) (Read error: Connection reset by peer)
[00:14:45] *** Quits: rcernin_ (~rcernin@2001:8003:6803:db00:94a6:c64a:503d:8e89) (Ping timeout: 260 seconds)
[00:15:14] *** Quits: CoolerX (~CoolerX@user/coolerx) (Quit: Leaving)
[00:16:06] <fentanyl> fizzie: perfect catch. that was the exact issue, thanks :)
[00:17:04] *** Joins: kiril (~kiril@85.91.153.163)
[00:17:08] <fentanyl> I thought, like in C, it'll only write till first null termination. Like a function call taking `const char*`, it'll write till it reaches the first `\0` character.
[00:22:19] *** Joins: rcernin_ (~rcernin@124.190.139.235)
[00:22:42] *** Quits: rcernin_ (~rcernin@124.190.139.235) (Client Quit)
[00:22:56] *** Joins: rcernin (~rcernin@124.190.139.235)
[00:23:57] *** Joins: moldorcoder7_ (~moldorcod@37.120.143.28)
[00:24:29] *** Quits: moldorcoder7 (~moldorcod@37.120.143.28) (Ping timeout: 245 seconds)
[00:27:03] *** Quits: burningserenity (~burningse@142-196-178-216.res.spectrum.com) (Quit: ZNC 1.8.2 - https://znc.in)
[00:28:29] *** Quits: rcernin (~rcernin@124.190.139.235) (Quit: WeeChat 3.3)
[00:28:37] *** Quits: tane (~tane@dslb-002-201-234-068.002.201.pools.vodafone-ip.de) (Quit: Leaving)
[00:28:58] *** Joins: rcernin (~rcernin@124.190.139.235)
[00:30:21] <Awoobis> Nope, no null termination in go
[00:30:28] <Awoobis> the bytes are just 0 if unset
[00:30:41] <Awoobis> (or more specifically, the memory is zeroed before use)
[00:39:38] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 268 seconds)
[00:40:52] *** Quits: zer0bitz (~zer0bitz@dsl-hkibng31-54fafc-123.dhcp.inet.fi) (Ping timeout: 252 seconds)
[00:41:03] *** Joins: fikran (~fikran@user/fikran)
[00:43:05] *** Quits: kaleido_ (~adam@havokworks.io) (Changing host)
[00:43:05] *** Joins: kaleido_ (~adam@user/kaleido)
[00:43:10] *** kaleido_ is now known as kaleido
[00:43:24] *** Joins: mooff (mooff@awful.cooking)
[00:44:01] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[00:44:01] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[00:44:01] *** Joins: wroathe (~wroathe@user/wroathe)
[00:45:27] *** Quits: girafe (~girafe@176-147-142-235.abo.bbox.fr) (Read error: Connection reset by peer)
[00:47:16] *** Joins: freakazoid333 (~matt@2603:9000:cf0f:80e3:cdc5:a33b:1284:64f8)
[00:47:59] *** Quits: rcernin (~rcernin@124.190.139.235) (Quit: WeeChat 3.3)
[00:49:18] *** Joins: chpar (~chpar@node-1w7jra2bl9lqza9wz30y156o7.ipv6.telus.net)
[00:51:42] *** Joins: rcernin (~rcernin@124.190.139.235)
[00:51:57] *** Quits: rcernin (~rcernin@124.190.139.235) (Client Quit)
[00:52:18] *** Joins: k0ta (~k0ta@151.210.172.182)
[00:52:20] *** Joins: rcernin (~rcernin@124.190.139.235)
[00:54:45] *** Quits: jcajka (~jcajka@89-24-144-111.customers.tmcz.cz) (Quit: Leaving)
[00:55:23] *** Joins: mooff2 (mooff@awful.cooking)
[00:55:46] *** Joins: awmv (~awmv@2a02:21b0:644f:c181:a0cd:e6ea:7d94:4695)
[00:57:19] *** Quits: mooff (mooff@awful.cooking) (Ping timeout: 252 seconds)
[00:57:19] *** mooff2 is now known as mooff
[00:57:28] *** Quits: be3uykpy (~be3uykpy@2a00:a040:19a:b060:788e:dd09:b823:d1c0) (Read error: Connection reset by peer)
[01:01:46] *** Quits: normen (~normen@p200300d7174d7900857d4197ebb2e74b.dip0.t-ipconnect.de) (Ping timeout: 245 seconds)
[01:03:06] *** Joins: normen (~normen@p200300d717009700ad89257635a91c51.dip0.t-ipconnect.de)
[01:09:02] *** Joins: imm__ (~imm_@user/imm/x-3405860)
[01:10:52] *** Quits: imm_ (~imm_@user/imm/x-3405860) (Ping timeout: 265 seconds)
[01:11:34] *** Quits: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com) (Quit: Leaving)
[01:12:23] *** Quits: mrig (~mrig@user/mrig) (Quit: WeeChat 3.3)
[01:12:48] *** Quits: __alex (~alex@ip5f5afef3.dynamic.kabel-deutschland.de) (Ping timeout: 265 seconds)
[01:15:33] *** Quits: awmv (~awmv@2a02:21b0:644f:c181:a0cd:e6ea:7d94:4695) (Quit: Client closed)
[01:17:55] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-01c9-3c3d-d233-16d2.res6.spectrum.com)
[01:18:42] *** Quits: khrbt (~znc@user/khrbt) (Ping timeout: 268 seconds)
[01:19:19] <krux02> how do I use `exec` from go? All I find is os.exec which is not what I am looking for.
[01:19:31] <seebs> what are you looking for?
[01:19:49] <seebs> do you mean "interpret string as code and run that code"?
[01:20:14] <bpalmer> or do you mean syscall.Exec ?
[01:21:07] *** Joins: khrbt (~znc@user/khrbt)
[01:21:18] <b0nn> Saw this on reddit, I've not seen the "broker" pattern in Go before https://stackoverflow.com/questions/36417199/how-to-broadcast-message-using-channel/49877632#49877632
[01:21:22] *** Quits: mickey8 (~user@user/mickey) (Quit: Ping timeout (120 seconds))
[01:21:53] <b0nn> It's just Fan Out, with a Pub/Sub feature, but I likes it
[01:22:04] *** Joins: mickey8 (~user@user/mickey)
[01:22:32] <b0nn> krux02: two people have asked you for more feedback so that they can help you, are you ok, or...?
[01:23:35] <krux02> bpalmer, that one might be the one
[01:23:39] <krux02> syscall exec yas
[01:23:41] <krux02> yes
[01:24:49] *** Quits: arinov (~arinov@213.194.126.155) (Ping timeout: 252 seconds)
[01:25:19] <krux02> I am still not fluent to use the search feature of the standard library
[01:25:32] <bpalmer> I haven't heard that called broker before, but the idea of subscribing over a channel of channels is nice.
[01:25:49] *** Joins: arinov (~arinov@213.194.126.155)
[01:25:58] <krux02> b0nn, sorry I was looking through the documentation of `man 3 exec` to specify which syscall exactly I wanted
[01:26:44] *** Joins: LTCD (~LTCD@0547499c.skybroadband.com)
[01:26:53] *** Parts: LTCD (~LTCD@0547499c.skybroadband.com) ()
[01:27:14] <b0nn> is all good :)
[01:28:49] <krux02> is there a search field that allows be to search through all function names in all of the go standard library?
[01:29:26] <seebs> i don't think so?
[01:29:39] <seebs> the pool is pretty small, and there's some names that occur in multiple packages
[01:30:48] <krux02> seebs, I know that names are not unique, but that shouldn't make searching impossible
[01:31:10] <krux02> I constantly fall back to search on google and then I get those bad results from all over the internet.
[01:31:29] <seebs> i don't think i've ever tried to search by name much except within a package, usually i have a package in mind these days.
[01:31:59] <seebs> that seems like a syscall-package thing because `os.Exec` would be very hard to give the same semantics on Linux and Windows.
[01:32:04] <b0nn> Yeah - it's kind of a "I know what I'm looking for" thing
[01:32:13] <krux02> yea, the problem is, I usually don't know in which package the functionality is that I am looking for
[01:32:29] <krux02> so I search for I would name such a function to find out how the function is named
[01:32:39] <krux02> and in which package it is
[01:33:07] <b0nn> This is the problem of all search though :)
[01:33:19] <krux02> yea
[01:33:31] <krux02> I Nim there was one page where I could just do C-f
[01:33:54] *** Joins: PortableDave (~portabled@194-193-148-202.tpgi.com.au)
[01:35:01] <krux02> https://nim-lang.org/docs/theindex.html
[01:35:14] *** Joins: awmv (~awmv@2a02:21b0:644f:c181:a0cd:e6ea:7d94:4695)
[01:35:21] <krux02> there is no search field, the interface is a big website and you use browser search
[01:35:30] <krux02> pretty damn intuitive and fast
[01:35:45] <krux02> I was hoping go would have that as well
[01:35:48] <b0nn> I mean there's https://pkg.go.dev/std but it's just a list of the packages
[01:35:59] <krux02> b0nn, that exactly is the problem
[01:36:16] <krux02> I don't want to search for package names, but function names within the standard library
[01:36:35] <b0nn> Yeah - I totally understand; knowing what you are looking for is the chicken egg problem, and search has not yet figured that out
[01:37:09] <krux02> I've generated a TAGS file for the standard library and I can just make random guesses in my editor and use goto-definition
[01:37:20] <krux02> it kind of works, but it is not great
[01:37:29] <b0nn> heh gopls provides its own - no need for ctags
[01:37:49] <krux02> what is gopls?
[01:38:01] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 245 seconds)
[01:38:14] <krux02> the reason I use ctags is, it just works
[01:38:19] <krux02> no big setup
[01:38:22] <b0nn> I was going to say, tho, the answer is (still) that there are only two ways forward, drawing on your own experience, or drawing on the experience of others (and both pathways are fraught with peril)
[01:39:10] <b0nn> go pls is the LSP server that most IDEs are using now (vim-go, emacs, VScode, Goland, and more)
[01:39:14] *** Quits: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl) (Quit: jaca122)
[01:42:11] <krux02> b0nn, ok, I will use it at some point.
[01:42:21] <b0nn> What IDE are you using?
[01:42:25] <krux02> emacs
[01:42:43] <krux02> I just read through the documentation of gopls and it has emacs support
[01:43:25] <b0nn> heh, I'm not a emacs user so can offer very little in the way of guidance there (although there are emacs users in the channel)
[01:43:37] <krux02> I know
[01:43:44] <krux02> I am also in the #emacs channel ;)
[01:44:02] <b0nn> heh, I mean in this channel there are emacs users :)
[01:44:03] <krux02> I see common names
[01:44:19] <b0nn> Oh, yeah, with you now
[01:44:43] *** Quits: seabass (~seabass@user/seabass) (Quit: leaving)
[01:44:58] <krux02> the reason I use emacs is, I am tired of IDE hopping, I am already doing programming language hopping.
[01:45:03] *** Joins: seabass (~seabass@user/seabass)
[01:45:10] <b0nn> heh, me with vim
[01:45:19] <krux02> I used that as well
[01:45:26] * seabass waves C-x C-f at #go-nuts
[01:46:04] <b0nn> My firm belief is - use whatever editor you like, the deeper you dive into it (no matter what IDE) the more productive you will become
[01:46:06] <seabass> it's kind of late here though, so I'll now proceed to wave C-x C-c ;)
[01:46:34] <seabass> b0nn, yup, completely agree there - every editor has benefits just waiting to be unlocked
[01:46:49] <krux02> some editors just suck
[01:47:07] <krux02> emacs for example has infinite potential on every keystroke
[01:48:01] <krux02> I personally think that it is not the editor that makes a good programmer, it is the work
[01:48:21] <krux02> you can write good software in notepad
[01:48:49] <krux02> anway, not here to talk about editors
[01:49:14] *** Quits: seabass (~seabass@user/seabass) (Client Quit)
[01:49:22] *** Joins: wroathe (~wroathe@user/wroathe)
[01:49:31] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-01c9-3c3d-d233-16d2.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[01:53:58] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 252 seconds)
[01:55:26] *** Quits: aku (~aku@eagleflow.fi) (Remote host closed the connection)
[01:55:40] *** Quits: Torr (~Torr@user/torr) ()
[01:55:53] *** Joins: Torr (~Torr@user/torr)
[02:00:56] *** Quits: silbermm (~silbermm@user/ahappydeath) (Ping timeout: 245 seconds)
[02:02:44] <krux02> There is something to celebrate, my Hello World in my very own programming language compiles
[02:02:56] <krux02> This is the birthday of a new programming language
[02:03:16] <krux02> this is what the world needs, more languages
[02:03:19] <dragonmaster> call us when there's an emacs mode for your new language
[02:03:26] <krux02> dragonmaster, there is
[02:03:31] <dragonmaster> I want to believe
[02:04:02] <krux02> https://github.com/krux02/golem/blob/master/golem-mode.el
[02:04:33] <dragonmaster> I'm guessing golem is functional
[02:04:49] <krux02> not strictly, no
[02:04:58] <dragonmaster> so, yes :)
[02:04:59] <krux02> but inspiried by functional programming languages
[02:05:19] <krux02> yes functional programming should be supported
[02:05:23] <dragonmaster> I'm too stupid to wrap my head around non-procedural languages.  I'll take a peek, though
[02:05:42] *** Quits: Torr (~Torr@user/torr) ()
[02:05:54] *** Joins: Torr (~Torr@user/torr)
[02:05:54] <krux02> nothing is implemented I just made the hello world compile
[02:06:01] <krux02> but there is an ideas.org file
[02:06:08] <krux02> what I want to implement
[02:06:29] <dragonmaster> The fact that you implemented a mode for it before implementation means that your heart is pure
[02:06:37] <krux02> https://github.com/krux02/golem/blob/master/ideas.org
[02:08:09] <dragonmaster> Is your assertion that Go has only features without downsides meant to be ironic?
[02:08:19] *** Joins: silbermm (~silbermm@user/ahappydeath)
[02:08:41] <krux02> dragonmaster, well my knowledge about go is mostly from several years ago, I think around 8ish
[02:08:45] <dragonmaster> (I think I've not had enough sleep so I'll be quiet now)
[02:09:07] *** Quits: Torr (~Torr@user/torr) (Client Quit)
[02:09:17] *** Joins: Torr (~Torr@user/torr)
[02:09:21] <krux02> generally I remember Go has a very good procedural language
[02:09:41] <dragonmaster> I would agree with that
[02:09:45] <dragonmaster> s/would/do/
[02:10:04] <krux02> but a language that is clearly designed to work in big organizations with big teams and very big codebases. And then you want te cut the features of a lanugae as small as possible.
[02:10:21] <krux02> I want a language for the individual, the mad scientist
[02:11:02] <krux02> that means macros and metaprogramming
[02:11:06] <dragonmaster> Surely the mad scientist ethos supports the concept of "forget backward compatibility!"   If a feature gets removed, then so be it.
[02:11:38] <krux02> macros that even appeal the true lispers
[02:12:13] <krux02> dragonmaster, yes
[02:12:40] *** Quits: silbermm (~silbermm@user/ahappydeath) (Ping timeout: 252 seconds)
[02:12:40] <krux02> also as a solo developer I can't support old features if I already maintain something new.
[02:13:00] <krux02> I'll support old features when I get payed to do so.
[02:13:16] <krux02> And the price is raised per year
[02:13:19] <krux02> that's the plan
[02:13:49] *** Joins: silbermm (~silbermm@user/ahappydeath)
[02:14:02] <krux02> but no, it is not my business model to remove features to make people pay for them, I am not apple
[02:18:43] *** Quits: silbermm (~silbermm@user/ahappydeath) (Ping timeout: 252 seconds)
[02:27:27] *** Quits: Torr (~Torr@user/torr) ()
[02:27:39] *** Joins: Torr (~Torr@user/torr)
[02:38:22] *** Joins: tdaeayusr^ (~tdaeayusr@70.166.66.234)
[02:38:52] *** Quits: Seirdy (~Seirdy@sourcehut/user/seirdy) (Quit: exiting 3.2)
[02:39:38] *** Joins: Seirdy (~Seirdy@sourcehut/user/seirdy)
[02:48:25] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 252 seconds)
[02:49:49] *** Joins: silbermm (~silbermm@user/ahappydeath)
[02:50:09] *** Joins: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com)
[02:50:24] *** Joins: fikran (~fikran@user/fikran)
[02:50:41] *** pjs_ is now known as pjs
[02:53:04] *** Quits: awmv (~awmv@2a02:21b0:644f:c181:a0cd:e6ea:7d94:4695) (Quit: Client closed)
[02:55:01] *** Quits: silbermm (~silbermm@user/ahappydeath) (Ping timeout: 252 seconds)
[02:55:06] *** Quits: normen (~normen@p200300d717009700ad89257635a91c51.dip0.t-ipconnect.de) (Ping timeout: 245 seconds)
[02:56:56] *** Quits: NCS_One (~NCS_One@bl11-90-133.dsl.telepac.pt) (Quit: Lost terminal)
[02:59:03] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-4481-c071-7b13-a796.res6.spectrum.com)
[03:01:11] *** Quits: jjonah (~jjonah@p200300d5d7058900dea632fffeb3342f.dip0.t-ipconnect.de) (Remote host closed the connection)
[03:10:31] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-4481-c071-7b13-a796.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[03:15:03] *** Joins: lishanhui (~lishanhui@172.58.100.30)
[03:21:49] *** Quits: chasmo77 (~chas77@71.63.241.168) (Ping timeout: 250 seconds)
[03:23:49] *** Joins: silbermm (~silbermm@user/ahappydeath)
[03:28:26] *** Quits: silbermm (~silbermm@user/ahappydeath) (Ping timeout: 245 seconds)
[03:29:09] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-4481-c071-7b13-a796.res6.spectrum.com)
[03:30:19] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-4481-c071-7b13-a796.res6.spectrum.com) (Client Quit)
[03:31:38] *** Joins: burningserenity (~burningse@2603:9001:f01:ad99::1004)
[03:35:18] *** Joins: chasmo77 (~chas77@71.63.241.168)
[03:38:20] <b0nn> LinkedIn has a "Go programming" skill test
[03:38:40] <b0nn> er "Go (Programming Language)"
[03:39:30] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[03:39:30] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[03:39:30] *** Joins: wroathe (~wroathe@user/wroathe)
[03:39:45] *** Quits: tdaeayusr^ (~tdaeayusr@70.166.66.234) (Ping timeout: 265 seconds)
[03:40:44] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-4481-c071-7b13-a796.res6.spectrum.com)
[03:45:04] *** Quits: burningserenity (~burningse@2603:9001:f01:ad99::1004) (Quit: ZNC 1.8.2 - https://znc.in)
[03:46:01] *** Quits: predmijat (~predmijat@mail.strogopro.com) (Quit: bye)
[03:46:18] *** Joins: burningserenity (~burningse@2603-9001-0f01-ad99-0000-0000-0000-1004.inf6.spectrum.com)
[03:47:35] *** Joins: predmijat (~predmijat@mail.strogopro.com)
[03:52:35] *** Joins: silbermm (~silbermm@user/ahappydeath)
[03:53:42] *** Joins: normen (~normen@pd9eec9f8.dip0.t-ipconnect.de)
[03:58:16] *** Quits: normen (~normen@pd9eec9f8.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[03:59:26] *** Quits: silbermm (~silbermm@user/ahappydeath) (Ping timeout: 268 seconds)
[04:09:12] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-4481-c071-7b13-a796.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[04:09:34] *** Joins: brainfreeze (~brainfree@2a03:1b20:4:f011::20d)
[04:15:22] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 252 seconds)
[04:18:19] *** Quits: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com) (Quit: Leaving)
[04:26:38] *** Quits: burningserenity (~burningse@2603-9001-0f01-ad99-0000-0000-0000-1004.inf6.spectrum.com) (Quit: ZNC 1.8.2 - https://znc.in)
[04:26:46] *** Joins: frost (~frost@59.71.244.189)
[04:27:03] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[04:27:03] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[04:27:03] *** Joins: wroathe (~wroathe@user/wroathe)
[04:31:52] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 252 seconds)
[04:33:47] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-4481-c071-7b13-a796.res6.spectrum.com)
[04:36:39] *** Quits: nitrix (~nitrix@user/nitrix) (Quit: Genius is one percent inspiration and ninety-nine percent perspiration)
[04:37:15] *** Quits: arinov (~arinov@213.194.126.155) (Ping timeout: 265 seconds)
[04:38:42] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[04:38:43] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[04:38:43] *** Joins: wroathe (~wroathe@user/wroathe)
[04:39:52] *** Joins: silbermm (~silbermm@user/ahappydeath)
[04:44:00] *** Joins: nitrix (~nitrix@user/nitrix)
[04:45:56] *** Quits: silbermm (~silbermm@user/ahappydeath) (Ping timeout: 245 seconds)
[04:47:06] *** Quits: jkovac1 (~jkovac1@user/jkovac1) (Remote host closed the connection)
[04:48:08] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-4481-c071-7b13-a796.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[04:48:52] *** Quits: PortableDave (~portabled@194-193-148-202.tpgi.com.au) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[04:56:24] *** nitrix is now known as nitrix-or-treat
[04:57:49] *** Quits: sdfgsdfgs (sdfgsdfg@we.will.rock.you.bnc4you.xyz) (Changing host)
[04:57:49] *** Joins: sdfgsdfgs (sdfgsdfg@user/sdfgsdfg)
[04:58:02] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 265 seconds)
[04:59:44] *** Joins: fikran (~fikran@user/fikran)
[05:07:43] *** Quits: kindablue (znc@2001:19f0:6001:175a:5400:3ff:fe51:d77f) (Quit: System Rebooting..)
[05:08:35] *** Joins: kindablue (znc@2001:19f0:6001:175a:5400:3ff:fe51:d77f)
[05:10:08] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-4481-c071-7b13-a796.res6.spectrum.com)
[05:14:38] *** Quits: brooks85 (~bswinnert@23.157.160.131) (Quit: The Lounge - https://thelounge.chat)
[05:15:35] *** Joins: brooks85 (~bswinnert@23.157.160.131)
[05:19:49] *** Quits: INeedAHandle (~INeedAHan@39.124.72.106) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[05:35:43] *** Joins: PortableDave (~portabled@194-193-148-202.tpgi.com.au)
[05:36:43] *** Quits: lishanhui (~lishanhui@172.58.100.30) (Ping timeout: 252 seconds)
[05:37:11] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 265 seconds)
[05:40:49] *** Joins: silbermm (~silbermm@user/ahappydeath)
[05:43:00] *** Quits: salem (~salem@pool-98-111-206-141.pitbpa.fios.verizon.net) (Quit: ZNC 1.8.2 - https://znc.in)
[05:45:07] *** Joins: salem (~salem@pool-98-111-206-141.pitbpa.fios.verizon.net)
[05:47:12] *** Quits: arcatech (~arcatech@user/arcatech) (Quit: Bye.)
[05:48:26] *** Quits: silbermm (~silbermm@user/ahappydeath) (Ping timeout: 245 seconds)
[05:48:58] *** Joins: wroathe (~wroathe@user/wroathe)
[05:53:13] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 252 seconds)
[06:01:43] *** Joins: aml (~antoon_i@h-85-24-213-163.a392.priv.bahnhof.se)
[06:08:16] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-4481-c071-7b13-a796.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[06:19:25] *** Quits: ahappydeath (~ahappydea@user/ahappydeath) (Ping timeout: 268 seconds)
[06:21:42] *** Joins: CoolerX (~CoolerX@user/coolerx)
[06:24:21] *** Joins: silbermm (~silbermm@user/ahappydeath)
[06:29:01] *** Quits: silbermm (~silbermm@user/ahappydeath) (Ping timeout: 252 seconds)
[06:30:21] *** Quits: mkbloke (~mkbloke@vps.cammo.me.uk) (Quit: leaving)
[06:32:53] *** prime- is now known as prime
[06:34:39] *** Quits: Torr (~Torr@user/torr) ()
[06:34:40] *** Quits: PortableDave (~portabled@194-193-148-202.tpgi.com.au) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[06:34:50] *** Joins: Torr (~Torr@user/torr)
[06:36:35] *** Joins: INeedAHandle (~INeedAHan@39.124.72.106)
[06:41:23] *** Joins: mkbloke (~mkbloke@vps.cammo.me.uk)
[06:42:10] *** Quits: LiftLeft (~LiftLeft@102.165.16.73) (Ping timeout: 252 seconds)
[06:46:33] *** Joins: PortableDave (~portabled@194-193-148-202.tpgi.com.au)
[06:48:25] *** Joins: silbermm (~silbermm@user/ahappydeath)
[06:55:00] *** Quits: silbermm (~silbermm@user/ahappydeath) (Ping timeout: 265 seconds)
[06:58:36] *** Joins: michele_ (~eraser@user/michele)
[07:01:05] *** Quits: michele (~eraser@user/michele) (Ping timeout: 250 seconds)
[07:01:10] *** Quits: nitrix-or-treat (~nitrix@user/nitrix) (Quit: Genius is one percent inspiration and ninety-nine percent perspiration)
[07:02:44] *** Joins: nitrix (~nitrix@user/nitrix)
[07:06:58] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 252 seconds)
[07:07:10] *** Quits: zwr (~zwr@2804:d45:b966:fb00:daf:bd40:117d:c6e9) (Remote host closed the connection)
[07:09:04] *** Joins: fikran (~fikran@user/fikran)
[07:09:47] *** Joins: iateadonut (~dan@121.177.17.154)
[07:09:57] *** Parts: iateadonut (~dan@121.177.17.154) ()
[07:17:47] *** Quits: krux02 (~krux02@p200300e81728d600319fb3a709c9a336.dip0.t-ipconnect.de) (Remote host closed the connection)
[07:25:40] *** Quits: CoolerX (~CoolerX@user/coolerx) (Ping timeout: 252 seconds)
[07:30:50] *** Joins: normen (~normen@p54b34f50.dip0.t-ipconnect.de)
[07:35:19] *** Joins: zwr (~zwr@2804:d45:b966:fb00:e602:a0e9:410a:595d)
[07:35:29] *** Joins: lishanhui (~lishanhui@104-184-3-133.lightspeed.austtx.sbcglobal.net)
[07:35:31] *** Quits: normen (~normen@p54b34f50.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[07:37:08] *** Joins: locrian9 (~mike@99-153-255-194.lightspeed.irvnca.sbcglobal.net)
[07:43:50] *** Joins: jpw (~jpw@user/jpw)
[08:16:24] *** Parts: espero (~espero@ucitelonline.pedf.cuni.cz) (WeeChat 3.2)
[08:20:56] *** Joins: silbermm (~silbermm@user/ahappydeath)
[08:25:52] *** Quits: silbermm (~silbermm@user/ahappydeath) (Ping timeout: 265 seconds)
[08:41:17] *** Quits: ztx (~ztx@user/ztx) (Read error: Connection reset by peer)
[08:59:58] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[09:16:43] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 252 seconds)
[09:18:24] *** Joins: fikran (~fikran@user/fikran)
[09:31:14] *** Quits: Torr (~Torr@user/torr) (Remote host closed the connection)
[09:31:28] *** Joins: Torr (~Torr@user/torr)
[09:42:14] *** Quits: lishanhui (~lishanhui@104-184-3-133.lightspeed.austtx.sbcglobal.net) (Ping timeout: 265 seconds)
[09:45:37] *** Joins: normen (~normen@p54b34f50.dip0.t-ipconnect.de)
[09:46:25] *** Quits: henry40408 (~henry4040@112-104-97-56.adsl.dynamic.seed.net.tw) (Ping timeout: 252 seconds)
[09:47:16] *** Quits: locrian9 (~mike@99-153-255-194.lightspeed.irvnca.sbcglobal.net) (Quit: leaving)
[09:51:55] *** Quits: normen (~normen@p54b34f50.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[09:54:18] *** Joins: lishanhui (~lishanhui@104-184-3-133.lightspeed.austtx.sbcglobal.net)
[09:56:13] *** Quits: kulak (~kulak@user/kulak) (Quit: kulak)
[10:01:52] *** Joins: henry40408 (~henry4040@112-105-246-84.adsl.dynamic.seed.net.tw)
[10:07:31] *** Quits: dza (~dza@user/dza) (Ping timeout: 265 seconds)
[10:09:01] *** Quits: brainfreeze (~brainfree@2a03:1b20:4:f011::20d) (Quit: Leaving)
[10:10:13] *** Joins: dza (~dza@user/dza)
[10:23:47] *** Joins: tebruno995 (~tebruno99@user/tebruno99)
[10:26:01] *** Quits: tebruno99 (~tebruno99@user/tebruno99) (Ping timeout: 252 seconds)
[10:26:01] *** tebruno995 is now known as tebruno99
[10:26:25] *** Quits: PortableDave (~portabled@194-193-148-202.tpgi.com.au) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[10:37:59] *** Quits: keiser0091075852 (~keiser@83.25.208.187.ipv4.supernova.orange.pl) (Quit: The Lounge - https://thelounge.chat)
[10:38:55] *** Joins: jla (~jordi@tao.ddns.jazztel.es)
[10:39:12] *** Joins: keiser0091075852 (~keiser@83.25.208.187.ipv4.supernova.orange.pl)
[10:39:27] *** imm__ is now known as imm_
[10:39:48] *** Joins: saschagrunert (~saschagru@46.128.124.46)
[10:41:25] *** Quits: rcernin (~rcernin@124.190.139.235) (Ping timeout: 252 seconds)
[10:41:29] *** Joins: espero (~espero@ucitelonline.pedf.cuni.cz)
[10:46:40] *** Quits: mickey8 (~user@user/mickey) (Remote host closed the connection)
[10:47:07] *** Joins: mickey8 (~user@user/mickey)
[10:48:30] *** Quits: zanshin (~zanshin@user/zanshin) (Read error: Connection reset by peer)
[10:49:08] *** Quits: saschagrunert (~saschagru@46.128.124.46) (Remote host closed the connection)
[10:50:02] *** Joins: saschagrunert (~saschagru@46.128.124.46)
[10:52:52] *** Joins: zanshin (~zanshin@user/zanshin)
[10:56:33] *** Quits: snits (~quassel@ip98-179-76-75.ph.ph.cox.net) (Quit: No Ping reply in 180 seconds.)
[10:56:49] *** Joins: snits (~quassel@ip98-179-76-75.ph.ph.cox.net)
[10:56:51] *** Joins: PortableDave (~portabled@194-193-148-202.tpgi.com.au)
[11:04:39] *** Joins: jkovac1 (~jkovac1@user/jkovac1)
[11:09:01] *** Parts: jla (~jordi@tao.ddns.jazztel.es) ()
[11:09:21] *** Joins: Atque (~Atque@user/atque)
[11:09:31] *** Quits: sudoforg1 (~sudoforge@wireguard/tunneler/sudoforge) (Ping timeout: 252 seconds)
[11:10:03] *** Joins: sizeof_void34 (~Thunderbi@109.252.124.86)
[11:10:39] *** Joins: jcajka (~jcajka@ip-86-49-254-207.net.upcbroadband.cz)
[11:14:14] *** Joins: rcernin (~rcernin@2001:8003:6803:db00:1c65:1e0e:d90d:9c5)
[11:16:50] *** Quits: GJdan_ (~quassel@107-190-25-70.cpe.teksavvy.com) (Ping timeout: 260 seconds)
[11:17:58] *** Joins: GJdan (~quassel@107-190-25-70.cpe.teksavvy.com)
[11:18:28] *** Joins: panosdev (~panos@oodv2v.static.otenet.gr)
[11:22:09] *** Quits: kiril (~kiril@85.91.153.163) (Read error: Connection reset by peer)
[11:25:50] *** Joins: kiril (~kiril@85.91.153.163)
[11:26:09] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 265 seconds)
[11:27:36] *** Quits: GJdan (~quassel@107-190-25-70.cpe.teksavvy.com) (Ping timeout: 245 seconds)
[11:27:44] *** Joins: fikran (~fikran@user/fikran)
[11:30:50] *** Joins: AquaL1te (~AquaL1te@user/aqual1te)
[11:33:34] *** Quits: sizeof_void34 (~Thunderbi@109.252.124.86) (Quit: sizeof_void34)
[11:35:31] *** Joins: CoolerX (~CoolerX@user/coolerx)
[11:40:31] *** Joins: silbermm (~silbermm@user/ahappydeath)
[11:41:00] *** Quits: Atque (~Atque@user/atque) (Ping timeout: 276 seconds)
[11:42:15] *** Quits: PortableDave (~portabled@194-193-148-202.tpgi.com.au) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[11:42:48] *** Joins: marlinc (~marlinc@user/marlinc)
[11:43:20] *** Quits: rcernin (~rcernin@2001:8003:6803:db00:1c65:1e0e:d90d:9c5) (Quit: WeeChat 3.3)
[11:43:37] *** Quits: marlinc_ (~marlinc@user/marlinc) (Ping timeout: 252 seconds)
[11:46:55] *** Quits: silbermm (~silbermm@user/ahappydeath) (Ping timeout: 252 seconds)
[11:50:57] *** Quits: k0ta (~k0ta@151.210.172.182) (Ping timeout: 265 seconds)
[11:51:08] *** Joins: k0ta (~k0ta@103.108.94.37)
[11:51:20] <Cork> From a http.Request is it possible to get what ip the request came in on (on a machine with multiple ip addresses)
[11:51:26] <Cork> *?
[11:52:19] *** Joins: someone235 (uid419897@id-419897.ilkley.irccloud.com)
[11:52:35] <someone235> Hi, is there a way to check why some object is not cleaned by GC?
[11:53:02] <sztanpet> Cork when you launch the server, you are the one specifying what ip to listen on
[11:53:33] <sztanpet> someone235 there is only a single reason why an object is not GC-ed, something has a reference to it
[11:53:35] <Cork> sztanpet: ya, but i want it to listen on all interfaces, i just need to present more info in the response based on what ip it came in on
[11:54:13] <Cork> and starting one server per ip sounds kinda silly, when it already supports listen on all of them
[11:54:25] *** Quits: mickey8 (~user@user/mickey) (Quit: Ping timeout (120 seconds))
[11:54:35] <someone235> sztanpet: Yeah, this is exactly what I mean. I want to check what has a reference to it that prevents it from being cleaned.
[11:54:44] *** Joins: bpalmer` (~user@user/bpalmer)
[11:54:54] *** Joins: mickey8 (~user@user/mickey)
[11:55:36] <sztanpet> Cork i think it should be possible to get the interface the request came in on, lets see
[11:55:40] *** Quits: jcajka (~jcajka@ip-86-49-254-207.net.upcbroadband.cz) (Ping timeout: 252 seconds)
[11:55:55] *** Quits: bkircher (~bkircher@2001:a61:25b1:b301:4c05:743e:8f19:2b8c) (Ping timeout: 260 seconds)
[11:56:49] *** Quits: bpalmer (~user@user/bpalmer) (Ping timeout: 252 seconds)
[11:58:58] <sztanpet> someone235 there might be a GODEBUG statement for it, you can fall back on auditing the code manually for references, also trick for young players https://github.com/golang/go/wiki/SliceTricks#delete-without-preserving-order
[11:59:46] <someone235> Not sure how this trick is related but thx
[12:00:03] <someone235> Oh I see the note
[12:00:11] <sztanpet> https://pkg.go.dev/runtime for the GODEBUG params
[12:00:20] <someone235> thx
[12:03:51] <sztanpet> Cork https://github.com/golang/go/issues/30694
[12:05:13] <sztanpet> and if you can get the net.Conn of the connection, you can get the LocalAddr
[12:05:23] <sztanpet> *of the request
[12:06:25] *** Quits: mosen (~mosen@159-196-125-15.9fc47d.syd.static.aussiebb.net) (Quit: Textual IRC Client: www.textualapp.com)
[12:06:28] <Cork> sztanpet: thx, deeper into Serve then i've been before
[12:07:20] *** Joins: jcajka (~jcajka@ip-86-49-254-207.net.upcbroadband.cz)
[12:07:56] *** Joins: bkircher (~bkircher@2001:a61:25b1:b301:38c4:d8e7:23b0:bde5)
[12:09:02] <Cork> sztanpet: are you saying i should att a custom context to the server where i modify the request object with the extra data?
[12:09:17] <Cork> else i'm not sure how this helps ^^'
[12:11:06] <sztanpet> set the Server.ConnContext function, return a context where you add the connection to the context, in your handler, you can access the connection from the context and see where it came from
[12:12:36] * Cork nods
[12:12:38] <Cork> thx
[12:16:06] *** Joins: silbermm (~silbermm@user/ahappydeath)
[12:21:15] *** Quits: silbermm (~silbermm@user/ahappydeath) (Ping timeout: 265 seconds)
[12:28:08] *** Joins: normen (~normen@p54b34f50.dip0.t-ipconnect.de)
[12:32:34] *** Quits: CoolerX (~CoolerX@user/coolerx) (Ping timeout: 252 seconds)
[12:35:02] *** Joins: CoolerX (~CoolerX@user/coolerx)
[12:35:45] *** Quits: normen (~normen@p54b34f50.dip0.t-ipconnect.de) (Ping timeout: 265 seconds)
[12:36:04] *** Joins: arinov (~arinov@213.194.126.155)
[12:41:12] *** Joins: PortableDave (~portabled@194-193-148-202.tpgi.com.au)
[12:41:37] *** Joins: odin_ (~odin@static.141.51.12.49.clients.your-server.de)
[12:43:14] *** Joins: hikhvar796073809 (~thelounge@x4db96bc6.dyn.telefonica.de)
[12:46:18] *** Quits: odin_ (~odin@static.141.51.12.49.clients.your-server.de) (Client Quit)
[12:51:29] *** Joins: tdaeayusr^ (~tdaeayusr@70.166.66.234)
[12:59:49] *** Joins: tuskkk____ (uid18470@id-18470.tinside.irccloud.com)
[13:01:15] *** Quits: hikhvar796073809 (~thelounge@x4db96bc6.dyn.telefonica.de) (Ping timeout: 260 seconds)
[13:03:27] *** Quits: Herby (~quassel@merkur.graeber-clan.de) (Ping timeout: 240 seconds)
[13:03:40] *** Joins: Herby (~quassel@merkur.graeber-clan.de)
[13:04:24] *** Joins: mei6 (~mei@user/mei)
[13:06:41] <tuskkk____> What do you guys use to build go projects? Any tool preference when it comes to using it in the CI pipeline?
[13:07:32] *** Joins: normen (~normen@p200300d7172a43008080069a6c46ce3d.dip0.t-ipconnect.de)
[13:09:37] *** Joins: GJdan (~quassel@107-190-25-70.cpe.teksavvy.com)
[13:16:01] *** Quits: tdaeayusr^ (~tdaeayusr@70.166.66.234) (Ping timeout: 252 seconds)
[13:20:18] *** Joins: gggpkm (~gggpkm@li2015-124.members.linode.com)
[13:27:06] <ikke> 'go build'
[13:29:41] *** Quits: dza (~dza@user/dza) (Ping timeout: 245 seconds)
[13:30:29] *** Joins: dza (~dza@user/dza)
[13:35:16] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 252 seconds)
[13:37:05] *** Joins: fikran (~fikran@user/fikran)
[13:38:35] *** Quits: CoolerX (~CoolerX@user/coolerx) (Ping timeout: 260 seconds)
[13:41:52] *** Quits: chpar (~chpar@node-1w7jra2bl9lqza9wz30y156o7.ipv6.telus.net) (Ping timeout: 252 seconds)
[13:42:48] *** Joins: CoolerX (~CoolerX@user/coolerx)
[13:48:33] *** Quits: gggpkm (~gggpkm@li2015-124.members.linode.com) (Remote host closed the connection)
[13:50:01] *** Quits: dozn (uid249292@user/dozn) (Quit: Connection closed for inactivity)
[13:50:51] *** Joins: hikhvar796073809 (~thelounge@x4db96bc6.dyn.telefonica.de)
[13:52:58] *** Joins: gggpkm (~gggpkm@li2015-124.members.linode.com)
[13:56:44] *** Joins: krux02 (~krux02@p200300e81728d600319fb3a709c9a336.dip0.t-ipconnect.de)
[14:03:01] *** Joins: mosen (~mosen@159-196-125-15.9fc47d.syd.static.aussiebb.net)
[14:06:00] <j416> ^
[14:13:11] *** Quits: kiril (~kiril@85.91.153.163) (Read error: Connection reset by peer)
[14:14:17] *** Joins: jla (~jordi@tao.ddns.jazztel.es)
[14:15:46] *** Joins: kiril (~kiril@85.91.153.163)
[14:24:48] *** Quits: PortableDave (~portabled@194-193-148-202.tpgi.com.au) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[14:25:32] *** Joins: ekathva (~ekathva@88-114-118-162.elisa-laajakaista.fi)
[14:30:14] <since_> ^
[14:40:09] *** Quits: k0ta (~k0ta@103.108.94.37) (Ping timeout: 268 seconds)
[14:44:21] *** Joins: silbermm (~silbermm@user/ahappydeath)
[14:47:55] *** Quits: thing (~thing@user/thing) (Quit: thing)
[14:48:13] *** Joins: thing (~thing@user/thing)
[14:48:58] *** Quits: silbermm (~silbermm@user/ahappydeath) (Ping timeout: 252 seconds)
[14:50:38] *** Quits: kiril (~kiril@85.91.153.163) (Read error: Connection reset by peer)
[14:53:25] *** Joins: kiril (~kiril@85.91.153.163)
[14:57:01] *** Quits: CoolerX (~CoolerX@user/coolerx) (Remote host closed the connection)
[14:57:05] *** Quits: achilleas (ach@user/achilleas) (Quit: :wq)
[14:57:25] *** Joins: CoolerX (~CoolerX@user/coolerx)
[14:57:46] *** Joins: achilleas (ach@user/achilleas)
[15:00:51] *** Quits: kiril (~kiril@85.91.153.163) (Read error: Connection reset by peer)
[15:01:41] *** Joins: Atque (~Atque@user/atque)
[15:04:22] *** Joins: llorllale (~llorllale@2607:9880:3a18:69:a545:61cf:6fee:5b9f)
[15:04:25] *** Joins: kiril (~kiril@85.91.153.163)
[15:12:38] *** Quits: kiril (~kiril@85.91.153.163) (Read error: Connection reset by peer)
[15:15:33] *** Joins: kiril (~kiril@85.91.153.163)
[15:15:49] *** Quits: jla (~jordi@tao.ddns.jazztel.es) (Remote host closed the connection)
[15:19:32] *** Joins: silbermm (~silbermm@user/ahappydeath)
[15:25:56] *** Quits: arinov (~arinov@213.194.126.155) (Ping timeout: 245 seconds)
[15:29:58] *** Joins: LiftLeft (~LiftLeft@191.96.185.95)
[15:30:19] *** Quits: kiril (~kiril@85.91.153.163) (Read error: Connection reset by peer)
[15:32:57] *** Joins: kiril (~kiril@85.91.153.163)
[15:35:45] *** Joins: jjonah (~jjonah@p200300d5d7058900dea632fffeb3342f.dip0.t-ipconnect.de)
[15:39:36] *** Quits: tuskkk____ (uid18470@id-18470.tinside.irccloud.com) (Quit: Connection closed for inactivity)
[15:40:48] *** Quits: kiril (~kiril@85.91.153.163) (Read error: Connection reset by peer)
[15:41:27] <oliv3> ^
[15:41:34] *** Joins: tg (~tg@rockylinux/infra/tg)
[15:43:21] *** Joins: kiril (~kiril@85.91.153.163)
[15:44:31] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 252 seconds)
[15:46:26] *** Joins: fikran (~fikran@user/fikran)
[15:48:11] *** Joins: arinov (~arinov@31.142.50.8)
[15:49:14] *** Quits: panosdev (~panos@oodv2v.static.otenet.gr) (Ping timeout: 265 seconds)
[15:52:36] *** Quits: arinov (~arinov@31.142.50.8) (Ping timeout: 245 seconds)
[16:00:40] *** Quits: INeedAHandle (~INeedAHan@39.124.72.106) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[16:00:49] *** Joins: tg_ (~tg@rockylinux/infra/tg)
[16:02:09] *** Joins: INeedAHandle (~INeedAHan@39.124.72.106)
[16:02:17] *** Quits: tg (~tg@rockylinux/infra/tg) (Ping timeout: 265 seconds)
[16:12:46] *** Quits: kiril (~kiril@85.91.153.163) (Read error: Connection reset by peer)
[16:15:26] *** Joins: kiril (~kiril@85.91.153.163)
[16:21:32] *** Joins: panosdev (~panos@oodv2v.static.otenet.gr)
[16:22:06] *** Quits: ekathva (~ekathva@88-114-118-162.elisa-laajakaista.fi) (Ping timeout: 265 seconds)
[16:23:08] *** Joins: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com)
[16:24:36] *** Quits: kiril (~kiril@85.91.153.163) (Read error: Connection reset by peer)
[16:27:17] *** Joins: kiril (~kiril@85.91.153.163)
[16:31:24] *** Joins: mrozitron (~mrozitron@83.0.41.75.internetdsl.tpnet.pl)
[16:36:14] *** Quits: mrozitron (~mrozitron@83.0.41.75.internetdsl.tpnet.pl) (Quit: ..)
[16:48:05] *** Quits: llorllale (~llorllale@2607:9880:3a18:69:a545:61cf:6fee:5b9f) (Ping timeout: 264 seconds)
[16:48:57] *** Joins: Ergo^ (~ergo@91.238.59.144)
[16:51:56] *** bpalmer` is now known as bpalmer
[16:55:25] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-4481-c071-7b13-a796.res6.spectrum.com)
[16:57:18] *** Quits: thing (~thing@user/thing) (Quit: thing)
[16:58:00] *** Joins: thing (~thing@user/thing)
[17:06:13] *** Joins: arinov (~arinov@213.194.126.155)
[17:07:23] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[17:11:20] *** Quits: nitrix (~nitrix@user/nitrix) (Quit: Genius is one percent inspiration and ninety-nine percent perspiration)
[17:11:37] *** Quits: gggpkm (~gggpkm@li2015-124.members.linode.com) (Remote host closed the connection)
[17:11:56] *** Joins: gggpkm (~gggpkm@li2015-124.members.linode.com)
[17:12:25] *** Joins: nitrix (~nitrix@user/nitrix)
[17:12:43] *** vulpine` is now known as vulp1ne
[17:14:36] *** Quits: kiril (~kiril@85.91.153.163) (Read error: Connection reset by peer)
[17:15:08] *** Joins: leitz (~LeamHall@cpe-173-172-58-72.tx.res.rr.com)
[17:15:55] <leitz> A quick look at the regexp syntax page says that it is comperable to most other good regex capable languages. Is that a fair statement?
[17:16:20] <leitz> Somewhere, some time ago, I saw a comment that it wasn't "as good as" other languages.
[17:18:20] *** Joins: kiril (~kiril@85.91.153.163)
[17:18:49] <bpalmer> leitz: there are languages that extend regular expressions; for example, perl and pcre support fixed width look-behind/look-ahead assertions
[17:19:22] <bpalmer> this typically can be handled with a little bit of go code or a more complicated regular expression.
[17:20:21] <leitz> bpalmer, thanks! I use Perl, but don't get deep enough for much of the deeper regex syntax.
[17:21:06] <huf> i'm sure there are pcre2 bindings somewhere
[17:21:23] <leitz> I need to move to "a language to focus on", and Go is an option. Tougher to learn, as I don't have a comp sci education, but I did it a few years ago.
[17:23:55] *** Quits: frost (~frost@59.71.244.189) (Quit: Connection closed)
[17:24:34] <siXy> Also, it's very rare that a complex regular expression is a good solution for the actual problem at hand.
[17:25:00] <siXy> I'm sure there's a lib out there for those rare occurances - but it seems an odd thing to focus on to me
[17:25:02] <huf> zero-width assertions arent complex, they're a pretty basic tool
[17:25:21] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[17:25:21] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[17:25:21] *** Joins: wroathe (~wroathe@user/wroathe)
[17:25:35] <huf> and they help make regexes way simpler and less awkward
[17:26:44] <leitz> siXy, I was hoping to disprove my earlier understanding and have been successful. I need regexs daily, but I don't need highly complex ones.
[17:26:46] *** Quits: hikhvar796073809 (~thelounge@x4db96bc6.dyn.telefonica.de) (Ping timeout: 252 seconds)
[17:27:22] <leitz> huf, I don't know what a zero-width assertion is; can you point me to something to read?
[17:27:41] <huf> leitz: perl's regex docs :)
[17:27:45] <huf> leitz: also, ^ is one
[17:28:01] *** Quits: gggpkm (~gggpkm@li2015-124.members.linode.com) (Ping timeout: 245 seconds)
[17:28:02] <huf> it's a bit of regex that doesnt eat any characters even when it matches
[17:29:29] <leitz> huf, gotcha.
[17:30:16] <siXy> One reason why go's regexp lib doesn't implement everything that, say, perl does is that the go regexp lib is linear time over input, which pcre very much is not. There's some pcre features that aren't feasible to implement in linear time. Most of the time when someone complains about go's regexp not having feature X, it's because it's a feature that can't be done in linear time.
[17:30:36] <huf> ah yeah, there is that
[17:31:15] <huf> sometimes regex implementations can even eat up all the ram if you give them a weird pattern and some carefully crafted input
[17:31:21] <huf> IIRC
[17:37:32] <seebs> https://swtch.com/~rsc/regexp/regexp1.html <-- look at these charts and how badly perl compares to the thompson NFA at larger n. then look at the *units* on the charts to fully appreciate the problem.
[17:40:25] *** Joins: snoel (~snoel@dynamic-002-244-102-183.2.244.pool.telefonica.de)
[17:41:42] *** Quits: lishanhui (~lishanhui@104-184-3-133.lightspeed.austtx.sbcglobal.net) (Ping timeout: 265 seconds)
[17:49:25] *** Quits: CoolerX (~CoolerX@user/coolerx) (Ping timeout: 260 seconds)
[17:50:52] *** Quits: snoel (~snoel@dynamic-002-244-102-183.2.244.pool.telefonica.de) (Quit: Leaving)
[17:51:30] <leitz> seebs, is that still a fair comparison? It's Perl 5.8.7 and they are currently on 5.34 I think.
[17:52:03] <sztanpet> yes because it didnt suddenly change to using a linear-time regexp lib
[17:52:04] <leitz> Of course, the real issue is utility; if it takes 15 seconds, saves you 2 hours, and only gets run once a week, it's probably a win.
[17:52:11] <eyJhb> Unsure if I can do this, but I am trying to define a block based on a var, shown here - https://termbin.com/i7ix , but I get `{"level":"error","error":"template: schema-postgres.sql:5: unexpected <define> in command","time":"2021-10-14T16:20:14+02:00","message":"failed to start daemon"}`. Is it just not allowed to do so?
[17:53:47] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 265 seconds)
[17:54:28] *** Joins: lishanhui (~lishanhui@104-184-3-133.lightspeed.austtx.sbcglobal.net)
[17:55:10] <siXy> leitz: *kind* of. It's a fair comparison for that particular regular expression, but it's a regular expression specifically chosen to highlight the weakness of a particular approach, and maybe not one you'd actually ever write yourself.
[17:55:31] <sztanpet> yea, it might make no difference if you can guarantee you will never run patterns that force non-linear complexity leitz
[17:55:42] <siXy> perl regex isn't known for it's blisteringly fast performance, but it's not normally that bad.
[17:55:47] *** Joins: fikran (~fikran@user/fikran)
[17:56:02] <leitz> Cool.
[17:56:03] <sztanpet> if you ever need to run regexps based on user-input, go for re2
[17:56:26] <leitz> Of course, if I order the Go books I'm looking at, you all are looking at a lot of questions...
[17:56:57] <siXy> leitz: Have you done tour.golang.org yet? I'd do that before ordering any books if you haven't.
[17:57:23] <sztanpet> the tour also has recommendations on what to read next
[17:57:46] <siXy> does it now? that's neat - I don't think it used to
[17:58:00] <leitz> siXy, I've done Go before, in days gone by, and took a Coursera class on it too. Good stuff, but I keep getting pulled back to other tasks with other languages, and tend to forget a lot.
[17:58:04] <sztanpet> yeye https://tour.golang.org/concurrency/11
[17:58:41] <leitz> I just like a physical book to help me get started.
[17:59:25] <sztanpet> gopl.io is good
[18:00:47] <leitz> sztanpet, gopl is a good book, but I didn't learn as much from it.
[18:01:38] <leitz> Right now I'm looking at "Learning Go" by Bodner.
[18:01:59] <sztanpet> was it too terse?
[18:02:56] <leitz> sztanpet, it assumed a level of comp-sci that I don't have. A "real" programmer would do well with it, but I'm mostly self-taught and there are gaps in my knowledge.
[18:03:07] *** Joins: CoolerX (~CoolerX@user/coolerx)
[18:03:49] <siXy> Such as? Depending what you're talking about, it might be a gap that's just worth going and filling in
[18:08:19] <leitz> siXy, math, algorithms, bog O notation, data structures. I come from a Linux sysadmin background, so come from a shell skillset.
[18:08:44] <leitz> I've done Perl, Python, C, Go, PHP, TCL, Ruby, and SQL, but at a basic level.
[18:09:17] <sztanpet> basics of big-oh is not hard and very important imo
[18:09:34] <leitz> Working on some of my challenges, and I usually pick a project to push my learning. Sometimes the challenge beats me, sometimes not.
[18:13:11] <SJrX> If I want to take the max of two integers, is it really idiomatic go for me to declare my own function?
[18:13:31] *** Joins: __alex (~alex@ip5f5afef3.dynamic.kabel-deutschland.de)
[18:13:43] <sztanpet> you could just use an if statement
[18:14:07] *** Quits: normen (~normen@p200300d7172a43008080069a6c46ce3d.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[18:16:41] <siXy> leitz: I too was a sysadmin originally. Big-O notation is probably where I'd start - as sztanpet said it's not too difficult to learn, and a useful skill to have when thinking about different approaches to a problem.
[18:18:03] * leitz has the book "Grokking Algorithms" and will re-read the Big O chapter.  :)
[18:18:09] <sztanpet> im sure there are some youtube videos about it that can give you the jist of it in 10minutes
[18:18:17] <leitz> Actually, I should peobably just read the entire book again.
[18:18:23] <leitz> probably
[18:18:26] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 245 seconds)
[18:18:56] <siXy> I'd ignore a bunch of the algorithm and data structures stuff - some of it will be needed eventually, but other stuff (eg doubly linked lists) you can go years without ever needing to know about.
[18:22:36] *** tg_ is now known as tg
[18:24:01] <leitz> Right now my alpha plan is a web based text game logger. Makes me do templates, sql, and networking.
[18:24:58] <leitz> And auth of some type.
[18:27:17] *** Joins: sizeof_void34 (~Thunderbi@109-252-124-86.nat.spd-mgts.ru)
[18:29:09] *** Quits: nostalgia (~nostalgia@2601:243:c600:95f0:22f1:3efe:9b37:299c) (Ping timeout: 268 seconds)
[18:30:35] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[18:30:35] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[18:30:35] *** Joins: wroathe (~wroathe@user/wroathe)
[18:30:43] *** Quits: sizeof_void34 (~Thunderbi@109-252-124-86.nat.spd-mgts.ru) (Client Quit)
[18:31:06] *** Joins: sizeof_void34 (~Thunderbi@109-252-124-86.nat.spd-mgts.ru)
[18:32:33] <sztanpet> good luck! do come and ask those questions, thats why were here
[18:35:01] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 252 seconds)
[18:35:30] *** Quits: cp- (~cp-@b157153.ppp.asahi-net.or.jp) (Quit: Disappeared in a puff of smoke)
[18:35:51] *** Joins: cp- (~cp-@b157153.ppp.asahi-net.or.jp)
[18:36:37] *** Quits: sizeof_void34 (~Thunderbi@109-252-124-86.nat.spd-mgts.ru) (Quit: sizeof_void34)
[18:37:47] *** Joins: sizeof_void34 (~Thunderbi@109.252.124.86)
[18:37:51] *** Quits: sizeof_void34 (~Thunderbi@109.252.124.86) (Client Quit)
[18:39:28] *** Joins: sizeof_void34 (~Thunderbi@109-252-124-86.nat.spd-mgts.ru)
[18:40:25] *** Quits: sizeof_void34 (~Thunderbi@109-252-124-86.nat.spd-mgts.ru) (Client Quit)
[18:40:45] *** Quits: CoolerX (~CoolerX@user/coolerx) (Ping timeout: 260 seconds)
[18:40:49] *** Joins: sizeof_void34 (~Thunderbi@109-252-124-86.nat.spd-mgts.ru)
[18:41:20] *** Quits: sizeof_void34 (~Thunderbi@109-252-124-86.nat.spd-mgts.ru) (Client Quit)
[18:41:41] *** Joins: sizeof_void34 (~Thunderbi@109-252-124-86.nat.spd-mgts.ru)
[18:42:36] <leitz> Well, I ordered the book, and will do the web page tutorial tonight. Brace yourself for all my n00b questions...
[18:43:32] *** Joins: normen (~normen@p200300d7172a43008080069a6c46ce3d.dip0.t-ipconnect.de)
[18:49:01] *** Quits: kiril (~kiril@85.91.153.163) (Read error: Connection reset by peer)
[18:51:58] *** Quits: normen (~normen@p200300d7172a43008080069a6c46ce3d.dip0.t-ipconnect.de) (Ping timeout: 268 seconds)
[18:54:18] *** Joins: kiril (~kiril@85.91.153.163)
[18:55:45] *** Quits: lofiguy (~lofiguy@87-207-104-205.dynamic.chello.pl) (Remote host closed the connection)
[19:02:30] *** Joins: nostalgia (~nostalgia@69.51.171.201)
[19:03:41] *** Quits: adip (~adip@aedv46.neoplus.adsl.tpnet.pl) (Ping timeout: 268 seconds)
[19:04:55] *** Quits: arinov (~arinov@213.194.126.155) (Ping timeout: 268 seconds)
[19:06:35] *** Quits: kiril (~kiril@85.91.153.163) (Read error: Connection reset by peer)
[19:09:02] *** Joins: kiril (~kiril@85.91.153.163)
[19:16:49] *** Quits: khyr0n (~khyr0n@2806:2f0:9140:56ec:93f7:805d:a273:a1c5) (Ping timeout: 252 seconds)
[19:23:55] *** Quits: silbermm (~silbermm@user/ahappydeath) (Ping timeout: 252 seconds)
[19:26:47] *** Joins: normen (~normen@p200300d7172a43008080069a6c46ce3d.dip0.t-ipconnect.de)
[19:30:48] *** Joins: silbermm (~silbermm@user/ahappydeath)
[19:33:26] *** Quits: sizeof_void34 (~Thunderbi@109-252-124-86.nat.spd-mgts.ru) (Quit: sizeof_void34)
[19:33:47] *** Joins: sizeof_void34 (~Thunderbi@109-252-124-86.nat.spd-mgts.ru)
[19:34:19] *** Quits: HisShadow (~HisShadow@user/hisshadow) (Ping timeout: 265 seconds)
[19:36:52] *** Joins: hackinghorn (~hackingho@user/hackinghorn)
[19:38:50] *** Quits: happy-dude (~happy-dud@2001:470:69fc:105::b4d7) (Quit: Bridge terminating on SIGTERM)
[19:38:50] *** Quits: freswa (~freswa@2001:470:69fc:105::c1ec) (Quit: Bridge terminating on SIGTERM)
[19:38:50] *** Quits: psydroid (~psydroid@user/psydroid) (Quit: Bridge terminating on SIGTERM)
[19:38:51] *** Quits: alwaysr[m] (~alwaysrma@2001:470:69fc:105::50a8) (Quit: Bridge terminating on SIGTERM)
[19:38:51] *** Quits: spudly[m] (~spudly@2001:470:69fc:105::18) (Quit: Bridge terminating on SIGTERM)
[19:38:51] *** Quits: meain (~meain@2001:470:69fc:105::2db) (Quit: Bridge terminating on SIGTERM)
[19:38:51] *** Quits: kadoban (~kadoban@user/kadoban) (Quit: Bridge terminating on SIGTERM)
[19:38:51] *** Quits: securethemews (~securethe@2001:470:69fc:105::9b6d) (Quit: Bridge terminating on SIGTERM)
[19:38:51] *** Quits: bloony (~tjellomat@2001:470:69fc:105::3aac) (Quit: Bridge terminating on SIGTERM)
[19:38:52] *** Quits: mambang[m] (~mambang@user/mambang) (Quit: Bridge terminating on SIGTERM)
[19:38:52] *** Quits: dngray[m] (~dngray@user/dngray) (Quit: Bridge terminating on SIGTERM)
[19:38:52] *** Quits: sordidwhiskey[m] (~sordidwhi@2001:470:69fc:105::c94e) (Quit: Bridge terminating on SIGTERM)
[19:38:52] *** Quits: dung[m] (~dungbrocc@2001:470:69fc:105::d25b) (Quit: Bridge terminating on SIGTERM)
[19:38:52] *** Quits: miquella[m] (~miquellam@2001:470:69fc:105::1:980) (Quit: Bridge terminating on SIGTERM)
[19:38:52] *** Quits: Celeste[m] (~sleprainb@2001:470:69fc:105::3f4a) (Quit: Bridge terminating on SIGTERM)
[19:38:52] *** Quits: AshLeece[m] (~ashleecei@2001:470:69fc:105::c987) (Quit: Bridge terminating on SIGTERM)
[19:38:52] *** Quits: bat[m] (~batdice-t@2001:470:69fc:105::19b8) (Quit: Bridge terminating on SIGTERM)
[19:38:52] *** Quits: tusf[m] (~tusf@2001:470:69fc:105::eff9) (Quit: Bridge terminating on SIGTERM)
[19:38:52] *** Quits: fugkco (~fugkcomat@2001:470:69fc:105::c70d) (Quit: Bridge terminating on SIGTERM)
[19:38:53] *** Quits: TcM1911 (~tcm1911@2001:470:69fc:105::3649) (Quit: Bridge terminating on SIGTERM)
[19:38:53] *** Quits: dec (~dec@2001:470:69fc:105::3204) (Quit: Bridge terminating on SIGTERM)
[19:38:58] *** Quits: hsiktas[m] (~hsiktasma@2001:470:69fc:105::30d4) (Quit: Bridge terminating on SIGTERM)
[19:41:40] *** Joins: spudly[m] (~spudly@2001:470:69fc:105::18)
[19:43:10] *** Quits: holgersson (~quassel@user/holgersson) (Ping timeout: 260 seconds)
[19:44:21] *** Joins: kadoban (~kadoban@user/kadoban)
[19:44:21] *** Joins: freswa (~freswa@2001:470:69fc:105::c1ec)
[19:44:21] *** Joins: mambang[m] (~mambang@user/mambang)
[19:44:21] *** Joins: hsiktas[m] (~hsiktasma@2001:470:69fc:105::30d4)
[19:44:21] *** Joins: psydroid (~psydroid@user/psydroid)
[19:44:21] *** Joins: happy-dude (~happy-dud@2001:470:69fc:105::b4d7)
[19:44:21] *** Joins: securethemews (~securethe@2001:470:69fc:105::9b6d)
[19:44:21] *** Joins: AshLeece[m] (~ashleecei@2001:470:69fc:105::c987)
[19:44:21] *** Joins: dngray[m] (~dngray@user/dngray)
[19:44:21] *** Joins: alwaysr[m] (~alwaysrma@2001:470:69fc:105::50a8)
[19:44:22] *** Joins: meain (~meain@2001:470:69fc:105::2db)
[19:44:33] *** Joins: fugkco (~fugkcomat@2001:470:69fc:105::c70d)
[19:44:33] *** Joins: sordidwhiskey[m] (~sordidwhi@2001:470:69fc:105::c94e)
[19:44:33] *** Joins: miquella[m] (~miquellam@2001:470:69fc:105::1:980)
[19:44:33] *** Joins: Celeste[m] (~sleprainb@2001:470:69fc:105::3f4a)
[19:44:33] *** Joins: dung[m] (~dungbrocc@2001:470:69fc:105::d25b)
[19:44:35] *** Joins: TcM1911 (~tcm1911@2001:470:69fc:105::3649)
[19:44:35] *** Joins: bloony (~tjellomat@2001:470:69fc:105::3aac)
[19:44:35] *** Joins: dec (~dec@2001:470:69fc:105::3204)
[19:44:35] *** Joins: tusf[m] (~tusf@2001:470:69fc:105::eff9)
[19:44:35] *** Joins: bat[m] (~batdice-t@2001:470:69fc:105::19b8)
[19:47:21] *** Quits: panosdev (~panos@oodv2v.static.otenet.gr) (Quit: WeeChat 3.3)
[19:48:37] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-4481-c071-7b13-a796.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[19:49:57] *** Joins: CoolerX (~CoolerX@user/coolerx)
[19:51:13] *** Joins: holgersson (~quassel@user/holgersson)
[19:55:45] *** Joins: lofiguy (~lofiguy@87-207-104-205.dynamic.chello.pl)
[19:55:53] *** Quits: normen (~normen@p200300d7172a43008080069a6c46ce3d.dip0.t-ipconnect.de) (Ping timeout: 264 seconds)
[19:56:22] *** Quits: silbermm (~silbermm@user/ahappydeath) (Ping timeout: 252 seconds)
[19:56:33] *** Quits: lofiguy (~lofiguy@87-207-104-205.dynamic.chello.pl) (Remote host closed the connection)
[19:56:56] *** Joins: lofiguy (~lofiguy@87-207-104-205.dynamic.chello.pl)
[20:01:02] *** Quits: holgersson (~quassel@user/holgersson) (Ping timeout: 268 seconds)
[20:03:01] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 245 seconds)
[20:03:57] *** Joins: holgersson (~quassel@user/holgersson)
[20:04:07] *** Quits: CoolerX (~CoolerX@user/coolerx) (Ping timeout: 268 seconds)
[20:05:08] *** Joins: fikran (~fikran@user/fikran)
[20:05:53] *** Parts: sizeof_void34 (~Thunderbi@109-252-124-86.nat.spd-mgts.ru) ()
[20:08:07] *** Joins: silbermm (~silbermm@user/ahappydeath)
[20:16:14] *** Joins: hikhvar796073809 (~thelounge@x4db96bc6.dyn.telefonica.de)
[20:24:28] *** Quits: hikhvar796073809 (~thelounge@x4db96bc6.dyn.telefonica.de) (Ping timeout: 252 seconds)
[20:25:31] *** Joins: hikhvar796073809 (~thelounge@x4db96bc6.dyn.telefonica.de)
[20:30:24] *** Joins: dalek-caan (~Thunderbi@109.252.124.86)
[20:32:23] * leitz is enjoying the "Writing Web Applications" tutorial.
[20:32:55] *** Joins: adip (~adip@aedv46.neoplus.adsl.tpnet.pl)
[20:33:17] *** Quits: hikhvar796073809 (~thelounge@x4db96bc6.dyn.telefonica.de) (Ping timeout: 265 seconds)
[20:35:50] *** Quits: internut_ (~internut@98.38.226.136) (Remote host closed the connection)
[20:36:05] *** Joins: freakazoid343 (~matt@2603-9000-cf0f-80e3-cdc5-a33b-1284-64f8.inf6.spectrum.com)
[20:39:14] *** Quits: freakazoid333 (~matt@2603:9000:cf0f:80e3:cdc5:a33b:1284:64f8) (Ping timeout: 265 seconds)
[20:39:24] *** Joins: internut (~internut@2601:280:4e00:7b70:a568:10c3:b3b2:8633)
[20:41:04] *** Quits: dalek-caan (~Thunderbi@109.252.124.86) (Quit: dalek-caan)
[20:44:55] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-4481-c071-7b13-a796.res6.spectrum.com)
[20:47:03] *** Joins: ekathva (~ekathva@88-114-118-162.elisa-laajakaista.fi)
[20:49:49] *** Quits: mei6 (~mei@user/mei) (Quit: mei6)
[20:57:09] *** Joins: tane (~tane@dslb-002-201-234-068.002.201.pools.vodafone-ip.de)
[20:59:30] *** Joins: khyr0n (~khyr0n@187.234.38.12)
[21:00:28] *** Quits: amk (~amk@109.255.169.126) (Remote host closed the connection)
[21:01:30] *** Joins: amk (~amk@109.255.169.126)
[21:01:58] *** Quits: jcajka (~jcajka@ip-86-49-254-207.net.upcbroadband.cz) (Quit: Leaving)
[21:02:11] *** Quits: bkircher (~bkircher@2001:a61:25b1:b301:38c4:d8e7:23b0:bde5) (Ping timeout: 245 seconds)
[21:12:36] *** Joins: normen (~normen@pd9eec892.dip0.t-ipconnect.de)
[21:15:05] *** Joins: bkircher (~bkircher@2001:a61:25b1:b301:38c4:d8e7:23b0:bde5)
[21:17:59] *** Joins: hornhack (~hackingho@user/hackinghorn)
[21:20:39] *** Quits: hackinghorn (~hackingho@user/hackinghorn) (Ping timeout: 265 seconds)
[21:22:59] *** Quits: martinkennelly_ (~martinken@84.203.20.92) (Remote host closed the connection)
[21:23:11] *** Joins: martinkennelly_ (~martinken@84.203.20.92)
[21:23:15] *** Quits: mooff (mooff@awful.cooking) (Quit: Ping timeout (120 seconds))
[21:23:43] *** Joins: mooff (mooff@awful.cooking)
[21:26:14] *** Joins: girafe (~girafe@176-147-142-235.abo.bbox.fr)
[21:26:58] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-4481-c071-7b13-a796.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[21:27:31] *** Joins: LTCD (~LTCD@2a02:c7f:dd1c:b600:1081:ba35:ec09:bfd)
[21:30:10] *** Joins: arinov (~arinov@31.142.50.8)
[21:31:21] *** chilvers1 is now known as chilversc
[21:31:32] *** Parts: LTCD (~LTCD@2a02:c7f:dd1c:b600:1081:ba35:ec09:bfd) ()
[21:33:24] *** Quits: girafe (~girafe@176-147-142-235.abo.bbox.fr) (Quit: Leaving)
[21:33:59] *** Joins: girafe (~girafe@176-147-142-235.abo.bbox.fr)
[21:37:37] *** Quits: bkircher (~bkircher@2001:a61:25b1:b301:38c4:d8e7:23b0:bde5) (Ping timeout: 252 seconds)
[21:38:43] *** Quits: hexley (examknow@bitbot/launchd) (Read error: Connection reset by peer)
[21:42:39] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-4481-c071-7b13-a796.res6.spectrum.com)
[21:45:18] *** Quits: normen (~normen@pd9eec892.dip0.t-ipconnect.de) (Ping timeout: 265 seconds)
[21:48:41] *** Quits: SJrX (~sjr@S0106302303dfb018.vf.shawcable.net) (Ping timeout: 264 seconds)
[21:50:27] *** Joins: bkircher (~bkircher@2001:a61:25b1:b301:4c05:743e:8f19:2b8c)
[21:51:59] *** Joins: davidkrauser (~davidkrau@user/davidkrauser)
[21:54:20] *** Joins: NCS_One (~NCS_One@bl11-90-133.dsl.telepac.pt)
[21:54:51] *** Joins: hikhvar796073809 (~thelounge@x4db96bc6.dyn.telefonica.de)
[21:55:25] *** Joins: sonny (~sonny@bras-base-london1483w-grc-32-70-52-175-130.dsl.bell.ca)
[21:56:17] <sonny> What is the rationale for lambda expressions in Go?
[21:59:00] *** Quits: saschagrunert (~saschagru@46.128.124.46) (Remote host closed the connection)
[22:00:14] <bpalmer> does go have lambda expressions/
[22:00:15] <bpalmer> ?
[22:02:00] <novns> Go has anonymous functions but no expressions
[22:03:36] <sonny> yes, it appears to
[22:05:57] *** Quits: meinside (uid24933@id-24933.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[22:08:33] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-4481-c071-7b13-a796.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[22:09:30] *** Quits: ajfriesen (~ajfriesen@cable-78-35-98-50.nc.de) (Quit: The Lounge - https://thelounge.chat)
[22:12:07] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 240 seconds)
[22:12:48] *** Joins: ajfriesen (~ajfriesen@cable-78-35-98-50.nc.de)
[22:14:29] *** Joins: fikran (~fikran@user/fikran)
[22:16:12] *** Joins: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl)
[22:17:28] *** Joins: houze (~houze@user/houze)
[22:17:57] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-4481-c071-7b13-a796.res6.spectrum.com)
[22:18:52] *** Quits: mickey8 (~user@user/mickey) (Quit: Ping timeout (120 seconds))
[22:19:26] *** Joins: mickey8 (~user@user/mickey)
[22:23:31] <fizzie> The expression that represents an anonymous function is "officially" called a function literal. It doesn't have such a streamlined syntax (with inferred types and so on) that many other languages do, it looks almost entirely like a normal function declaration except without the name.
[22:26:19] *** Quits: hikhvar796073809 (~thelounge@x4db96bc6.dyn.telefonica.de) (Read error: Connection reset by peer)
[22:26:23] *** Quits: adip (~adip@aedv46.neoplus.adsl.tpnet.pl) (Ping timeout: 265 seconds)
[22:28:12] *** Joins: hikhvar796073809 (~thelounge@x4db96bc6.dyn.telefonica.de)
[22:29:05] *** Quits: svedrin (~quassel@tiamat.funzt-halt.net) (Quit: https://quassel-irc.org - Komfortabler Chat. Überall.)
[22:30:05] *** Joins: svedrin (~quassel@tiamat.funzt-halt.net)
[22:30:08] *** Joins: chpar (~chpar@209.107.101.201)
[22:33:56] *** Quits: svedrin (~quassel@tiamat.funzt-halt.net) (Read error: Connection reset by peer)
[22:34:57] *** Quits: Byteflux (~byte@byteflux.net) (Quit: ZNC - https://znc.in)
[22:35:33] *** Joins: svedrin (~quassel@tiamat.funzt-halt.net)
[22:38:18] *** Joins: launchd (examknow@bitbot/launchd)
[22:39:55] *** Quits: hikhvar796073809 (~thelounge@x4db96bc6.dyn.telefonica.de) (Ping timeout: 265 seconds)
[22:55:35] <dostoyevsky2> I don't like the panic stacktraces... i'd like to remove the first entries that are from inside go.. and just show where it occurred in my code.. any way to customize that stacktrace inside my program?
[22:58:36] *** Joins: adip (~adip@aedv46.neoplus.adsl.tpnet.pl)
[22:58:43] *** Quits: Ergo^ (~ergo@91.238.59.144) (Remote host closed the connection)
[22:59:36] *** Joins: Byteflux (~byte@byteflux.net)
[22:59:38] *** Joins: tdaeayusr^^ (~tdaeayusr@70.166.66.234)
[23:00:01] <Torr> Is there an advantage of closures over conventional functions?
[23:01:25] <sonny> yeah, that's what allows you to pass them around
[23:01:37] <sonny> plus accessing the outer environment
[23:06:16] *** Quits: davidkrauser (~davidkrau@user/davidkrauser) (Quit: Leaving)
[23:07:56] *** Quits: ekathva (~ekathva@88-114-118-162.elisa-laajakaista.fi) (Remote host closed the connection)
[23:08:50] <alb> dostoyevsky2: you could try recover + runtime.Callers to do your custom stack trace
[23:09:17] *** Joins: hikhvar796073809 (~thelounge@x4db96bc6.dyn.telefonica.de)
[23:09:59] <dostoyevsky2> alb: Ah... I already user Callers for my micro unit testing framework
[23:10:17] *** Joins: M1000mh[theythem (~M1000mhmo@2001:470:69fc:105::4103)
[23:12:11] <dostoyevsky2> alb: I print out the line of code where the unit test failed ... I guess I could also do the same for panic
[23:12:33] <dostoyevsky2> (When panic() occurs in a unit test)
[23:12:33] *** Quits: sonny (~sonny@bras-base-london1483w-grc-32-70-52-175-130.dsl.bell.ca) (Ping timeout: 256 seconds)
[23:14:55] *** Quits: hikhvar796073809 (~thelounge@x4db96bc6.dyn.telefonica.de) (Ping timeout: 252 seconds)
[23:16:23] *** Quits: dvdmuckle (~dvdmuckle@user/dvdmuckle) (Quit: Bouncer Surgery)
[23:16:28] <Torr> sonny: Pass them around?
[23:18:30] *** Joins: dvdmuckle (~dvdmuckle@user/dvdmuckle)
[23:22:36] *** Quits: bkircher (~bkircher@2001:a61:25b1:b301:4c05:743e:8f19:2b8c) (Ping timeout: 245 seconds)
[23:22:40] *** Quits: khyr0n (~khyr0n@187.234.38.12) (Ping timeout: 252 seconds)
[23:23:03] *** Joins: burningserenity (~burningse@142-196-178-216.res.spectrum.com)
[23:25:41] *** Joins: haircode (~haircode@62.196.189.80.dyn.plus.net)
[23:29:13] *** Quits: burningserenity (~burningse@142-196-178-216.res.spectrum.com) (Ping timeout: 252 seconds)
[23:31:53] <seebs> i don't think it's well-defined to say whether a thing occurred "inside go"
[23:32:06] <seebs> and sometimes the answer really is "your code was not a participant in this"
[23:33:07] *** Joins: DeltaNova (~DeltaNova@user/deltanova)
[23:33:12] <dostoyevsky2> seebs: at least when I am unit testing, the error is usually in my code
[23:33:13] *** Joins: sonny (~sonny@bras-base-london1483w-grc-32-70-52-175-130.dsl.bell.ca)
[23:33:54] *** Joins: tuskkk____ (uid18470@id-18470.tinside.irccloud.com)
[23:33:59] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Quit: sord937)
[23:34:45] *** Quits: AquaL1te (~AquaL1te@user/aqual1te) (Ping timeout: 260 seconds)
[23:35:23] <seebs> usually, sure
[23:35:43] <seebs> i think i'd rather just accept that, yeah, there's gonna be a couple of extra lines in some stack traces, but i don't have to worry that they're wrong
[23:36:50] *** Joins: khyr0n (~khyr0n@200.68.186.223)
[23:36:53] *** Joins: itsalexjones (~itsalexjo@82.4.99.241)
[23:37:07] *** Quits: khyr0n (~khyr0n@200.68.186.223) (Read error: Connection reset by peer)
[23:37:37] *** launchd is now known as hexley
[23:42:08] *** Joins: neurocyte0132889 (~neurocyte@213.188.113.91)
[23:42:08] *** Quits: neurocyte0132889 (~neurocyte@213.188.113.91) (Changing host)
[23:42:08] *** Joins: neurocyte0132889 (~neurocyte@user/neurocyte)
[23:43:21] <pinky_> if you have a Ticker and a select case and the case runs longer than the ticker does .. whats the behavior there? do ticks stack up? or do ticks that are blocked on send get thrown away?
[23:46:35] <lazyreader> pinky_ tickers drop missed ticks, I believ
[23:46:44] <pinky_> ah thanks!
[23:47:45] <lazyreader> https://play.golang.org/p/Nj80EAvRbkR
[23:47:50] <lazyreader> https://pkg.go.dev/time#Ticker
[23:48:13] <lazyreader> check the output there, for example
[23:50:31] <pinky_> sweet, thanks!
[23:50:48] *** Quits: DeltaNova (~DeltaNova@user/deltanova) (Quit: WeeChat 3.2)
[23:53:32] *** Quits: jpw (~jpw@user/jpw) (Remote host closed the connection)
[23:54:50] *** Quits: arinov (~arinov@31.142.50.8) (Ping timeout: 265 seconds)
[23:55:31] *** Quits: haircode (~haircode@62.196.189.80.dyn.plus.net) (Ping timeout: 245 seconds)
[23:59:49] *** Joins: normen (~normen@pd9eec557.dip0.t-ipconnect.de)
