[00:07:27] *** Quits: gravicappa (~gravicapp@178.214.248.83) (Ping timeout: 268 seconds)
[00:11:18] *** Joins: mro (~mro@port-92-195-164-88.dynamic.as20676.net)
[00:29:25] *** Quits: Corbin (~Corbin@c-73-67-140-116.hsd1.or.comcast.net) (Ping timeout: 240 seconds)
[00:29:57] *** Quits: Colt (~Colt@user/colt) (Quit: Leaving)
[00:52:32] *** Quits: rgrinberg (~textual@2806:101e:7:2b:4d0:6ff9:1790:ff37) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[01:22:42] *** Quits: beise (~beise@85.17.52.17) (Read error: Connection reset by peer)
[01:25:14] *** Joins: beise (~beise@85.17.52.17)
[01:26:35] *** Joins: rgrinberg (~textual@2806:101e:7:2b:9559:34ac:a49f:3b79)
[01:41:39] *** Quits: mro (~mro@port-92-195-164-88.dynamic.as20676.net) (Quit: Leaving...)
[02:26:31] *** Quits: rgrinberg (~textual@2806:101e:7:2b:9559:34ac:a49f:3b79) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[02:27:48] <d_bot> <Jektrix> I think a book that's more project-based would be good. How to complete projects, how to structure them in an idiomatic way, designing idiomatic APIs
[02:28:47] *** Quits: Tuplanolla (~Tuplanoll@91-159-68-166.elisa-laajakaista.fi) (Quit: Leaving.)
[02:28:53] <d_bot> <Jektrix> cs3110 and realworldocaml seem to focus more on teaching one concept at a time, from there you really just need to start looking at other peoples Githubs or just trying shit out. It'd be nice if that process was shortened a bit by a more industrial book
[02:29:05] *** Joins: rgrinberg (~textual@2806:101e:7:2b:9559:34ac:a49f:3b79)
[02:29:59] *** Quits: rgrinberg (~textual@2806:101e:7:2b:9559:34ac:a49f:3b79) (Client Quit)
[02:39:20] <d_bot> <monk> just discovered a **deep** appreciation for janestreet's s-exp libraries because i'm not sure there is another easy way of testing & enforcing representation invariants of these data structures i'm writing right now
[02:39:44] <d_bot> <monk> and i find it funny that the RWOC book basically introduces sexp's for this specific use-case among others lol
[02:41:37] *** Quits: olle (~olle@i5E866D92.versanet.de) (Ping timeout: 268 seconds)
[02:42:10] <companion_cube> In what way does it help with invariants?
[02:43:54] <d_bot> <monk> i just wanted a very dirty and cheap way of introspecting the structure of eg a RB tree and ensure that i was implementing Okasaki's algorithm correctly
[02:44:02] <d_bot> <monk> and deriving sexp -> sexp.of_string achieved that pretty easily for me
[02:44:56] <d_bot> <monk> honestly it would probably be lest prone to just construct the correct sexp equivalent instead of relying on string comparison but yeah
[02:45:00] <d_bot> <monk> either way
[02:50:46] <d_bot> <monk> does that make sense as a solution?
[03:02:34] *** Quits: pippijn (~pippijn@isis.xinutec.org) (Remote host closed the connection)
[03:03:13] *** Joins: pippijn (~pippijn@isis.xinutec.org)
[03:24:49] *** Quits: Haudegen (~quassel@178.115.237.87.static.drei.at) (Ping timeout: 256 seconds)
[04:12:57] <companion_cube> oh I see.
[04:13:09] <companion_cube> that'd also work with ppx_deriving.show I guess
[04:16:46] <d_bot> <RegularSpatula> I use them a lot together with expect tests with ppx_expect
[04:53:53] *** Joins: Corbin (~Corbin@c-73-67-140-116.hsd1.or.comcast.net)
[05:24:45] *** Joins: rgrinberg (~textual@2806:101e:7:2b:9559:34ac:a49f:3b79)
[05:52:53] *** Quits: x88x88x (~x88x88x@149.28.53.172) (Read error: Connection reset by peer)
[05:54:11] <d_bot> <VPhantom> I ended up using deriving_sexp for a configuration file recently. Much nicer and more permissive than JSON (comments, less quoting).
[06:38:58] *** Joins: hsw (~hsw@2001-b030-2303-0104-0172-0025-0012-0132.hinet-ip6.hinet.net)
[06:41:59] *** Joins: bobo_ (~bobo@37.171.73.143)
[06:42:35] *** Quits: spip (~bobo@37.169.59.118) (Ping timeout: 256 seconds)
[07:11:08] *** Joins: zebrag (~chris@user/zebrag)
[07:12:01] *** Quits: terrorjack (~terrorjac@2a01:4f8:1c1e:509a::1) (Quit: The Lounge - https://thelounge.chat)
[07:13:39] *** Quits: zebrag (~chris@user/zebrag) (Client Quit)
[07:14:03] *** Joins: terrorjack (~terrorjac@2a01:4f8:1c1e:509a::1)
[07:24:57] *** Quits: hackinghorn (~hackingho@user/hackinghorn) (Ping timeout: 240 seconds)
[07:45:57] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 240 seconds)
[07:46:17] *** Quits: ralu (~ralu@static.211.245.203.116.clients.your-server.de) (Ping timeout: 240 seconds)
[07:50:16] *** Joins: ralu (~ralu@static.211.245.203.116.clients.your-server.de)
[08:18:24] <d_bot> <darrenldl> its slightly amusing that security specification people use m4 of all things
[08:18:39] <d_bot> <darrenldl> so difficult to read :dead:
[08:36:20] *** Quits: jonasbits (~quassel@2a00:66c0:1:1::58) (Remote host closed the connection)
[08:42:09] *** Joins: jonasbits (~quassel@2a00:66c0:1:1::58)
[09:01:10] *** Quits: rgrinberg (~textual@2806:101e:7:2b:9559:34ac:a49f:3b79) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[09:04:06] *** Joins: gravicappa (~gravicapp@178.214.248.83)
[09:11:43] *** Joins: rgrinberg (~textual@2806:101e:7:2b:9559:34ac:a49f:3b79)
[09:17:21] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Ping timeout: 276 seconds)
[09:18:32] *** Joins: hackinghorn (~hackingho@user/hackinghorn)
[09:23:58] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[10:19:55] *** Joins: jlrnick (~josephler@2a01cb040a1594007dfc79c9afe919a1.ipv6.abo.wanadoo.fr)
[10:33:39] *** Joins: humasect (~humasect@2001:1970:57e0:4100::1ae0)
[10:35:21] *** Quits: azimut_ (~azimut@gateway/tor-sasl/azimut) (Ping timeout: 276 seconds)
[10:40:58] *** Quits: humasect (~humasect@2001:1970:57e0:4100::1ae0) (Remote host closed the connection)
[10:41:17] *** Joins: humasect (~humasect@2001:1970:57e0:4100::1ae0)
[10:49:47] *** Joins: mbuf (~Shakthi@122.173.242.184)
[11:03:10] *** Joins: Haudegen (~quassel@178.115.237.87.static.drei.at)
[11:04:03] *** Joins: mro (~mro@port-92-195-213-193.dynamic.as20676.net)
[11:07:42] *** Joins: oriba (~oriba@77.11.223.152)
[11:08:37] *** Quits: rgrinberg (~textual@2806:101e:7:2b:9559:34ac:a49f:3b79) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[12:16:24] *** Quits: gentauro (~gentauro@user/gentauro) (Quit: leaving)
[12:24:18] *** Joins: gentauro (~gentauro@user/gentauro)
[12:43:39] *** Quits: humasect (~humasect@2001:1970:57e0:4100::1ae0) (Remote host closed the connection)
[12:47:58] *** Joins: humasect (~humasect@2001:1970:57e0:4100::1ae0)
[12:51:31] *** Quits: humasect (~humasect@2001:1970:57e0:4100::1ae0) (Client Quit)
[13:06:29] <ns12> Hi, does OCaml have functions for creating pseudoterminals on Unix-like systems? There is no mention of pseudoterminals in the Sys and Unix libraries.
[13:33:55] *** Joins: humasect (~humasect@2001:1970:57e0:4100::1ae0)
[13:38:07] *** Joins: kakadu (~kakadu@195.19.236.234)
[13:38:49] *** Joins: olle (~olle@i5E866D8D.versanet.de)
[13:38:57] <d_bot> <antron> ns12: not the standard library. there are some bindings to pty floating around. i also have an unpublished cross-platform binding from a hobby project
[13:39:22] <ns12> Noted.
[13:40:32] <ns12> Second question: Is there a way to make Opam list the packages I have installed using "opam install ..."? I don't want Opam to list all dependencies.
[13:40:57] <d_bot> <antron> opam list
[13:42:45] <ns12> "opam list" displays *all* packages. That's not what I am looking for. In package manager terminology, I only want to see the manual packages, not the automatic ones.
[13:43:07] <ns12> s/*all*/all installed/
[13:44:12] *** Quits: ouestbillie (~gallup@193.138.218.214) (Ping timeout: 250 seconds)
[13:45:15] <ns12> Oh, I've found it. It's "opam list --roots".
[13:46:05] *** Joins: ouestbillie (~gallup@bl16-179-173.dsl.telepac.pt)
[13:52:40] *** Quits: hackinghorn (~hackingho@user/hackinghorn) (Read error: Connection reset by peer)
[13:53:05] *** Joins: hackinghorn (~hackingho@user/hackinghorn)
[14:05:18] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Ping timeout: 276 seconds)
[14:07:06] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[14:23:29] *** Quits: arg__ (~arthur@ns3054037.ip-91-121-134.eu) (Remote host closed the connection)
[14:32:46] *** Quits: mro (~mro@port-92-195-213-193.dynamic.as20676.net) (Remote host closed the connection)
[14:35:41] *** Joins: mro (~mro@port-92-195-213-193.dynamic.as20676.net)
[14:38:56] *** Joins: bartholin (~bartholin@158.110.70.210)
[14:40:39] *** Quits: mro (~mro@port-92-195-213-193.dynamic.as20676.net) (Ping timeout: 268 seconds)
[15:22:11] <d_bot> <VPhantom> @darrenldl I wrote and maintained our `sendmail.cf` in the early 2000s", how's _that_ for cryptic? ðŸ˜› That was before I found out that we could use M4 to compile a much cleaner `sendmail.mc` into `sendmail.cf`. Not saying that we should use M4 more, but it was a revelation when I found out about it.
[15:22:32] <dmbaturin> What is the correct way to create a switch with +musl+static variant now?
[15:22:43] <d_bot> <VPhantom> You need musl, but not static.
[15:23:07] <dmbaturin> Oh, I mean I can't remember the `opam switch` syntax for adding a variant.
[15:23:17] <d_bot> <VPhantom> Hold on, I did this just a few weeks agoâ€¦
[15:23:35] <d_bot> <VPhantom> The syntax changed around OCaml 4.12-4.13 ish.
[15:23:49] <d_bot> <VPhantom> No wait, it changed with opam 2.1 I mean.
[15:25:02] <dmbaturin> Both, I think. :)
[15:26:11] <d_bot> <VPhantom> @dmbaturin: Do you already have the full musl GCC installed?
[15:27:57] *** Quits: ouestbillie (~gallup@bl16-179-173.dsl.telepac.pt) (Ping timeout: 240 seconds)
[15:28:09] <d_bot> <VPhantom> For the switch per se, I used `opam switch create 4.13.1+muslnative+flambda ocaml-variants.4.13.1+options ocaml-option-musl ocaml-option-flambda`
[15:29:15] <d_bot> <VPhantom> Since the available `gcc` in that environment was Musl's, that created a Musl-using compiler. From there of course, one needs to use `(ocamlopt_flags (:standard -ccopt -static))` in dune files, but only for `executable` targets.
[15:29:59] *** Joins: ouestbillie (~gallup@45.83.220.195)
[15:30:04] <dmbaturin> VPhantom: Yes.
[15:30:21] <d_bot> <VPhantom> (In my case, Musl's suite from <http://musl.cc/> is not my system's, so I do a few more things before to set up the environment.)
[15:30:41] <dmbaturin> Fedora has it in the repos, so I have it easy.
[15:30:46] <d_bot> <VPhantom> Yes and no.
[15:31:17] <d_bot> <VPhantom> When I used Debian's musl-tools & co I could not get OCaml to compile some packages successfully.
[15:32:25] <d_bot> <VPhantom> That's why I resorted to remove those packages and installed the full-featured Musl GCC/G++ suite instead. Now not only does OCaml work well for me but it can also compile any C or C++ that comes its way. (A lot of packages on OPAM use some.)
[15:34:37] <d_bot> <VPhantom> Basically I installed the Musl suite in `/usr/local/x86_64-linux-musl-native/` and then in the shell where I'm using OCaml I prepend that `bin/` to my `$PATH` and I prepend its `lib/` to `$LD_LIBRARY_PATH`.
[15:35:17] <d_bot> <VPhantom> Since the final executables compiled by OCaml are truly static, this is only required for installing OPAM packages or compiling with Dune.
[15:36:58] <d_bot> <VPhantom> (Actually there's a few extra steps. If you intend to install the full Musl suite let me know and I'll clean up my install script and throw it on a Gist or Pastebin.)
[15:46:42] <dmbaturin> VPhantom: Thanks, your procedure worked!
[15:47:14] <dmbaturin> I also had problems with musl on Debian, but Fedora's package is working fine for me.
[15:49:07] <d_bot> <VPhantom> Interesting.
[16:00:21] <companion_cube> @VPhantom does it work with zarith?
[16:08:17] <d_bot> <VPhantom> I haven't tried it; I have an int-based equivalent of `Zarith.Q` for my limited needs (financial).
[16:08:40] <d_bot> <VPhantom> I haven't had any problems with C and C++ using dependencies so far though.
[16:42:45] *** Quits: jlrnick (~josephler@2a01cb040a1594007dfc79c9afe919a1.ipv6.abo.wanadoo.fr) (Ping timeout: 268 seconds)
[17:02:02] *** Joins: dalek-caan (~Thunderbi@109-252-124-86.nat.spd-mgts.ru)
[17:04:11] *** Quits: hsw (~hsw@2001-b030-2303-0104-0172-0025-0012-0132.hinet-ip6.hinet.net) (Quit: Leaving)
[17:05:59] *** Joins: mro (~mro@p5dc7d0f3.dip0.t-ipconnect.de)
[17:06:12] *** Joins: hsw (~hsw@2001-b030-2303-0104-0172-0025-0012-0132.hinet-ip6.hinet.net)
[17:07:42] *** Quits: mro (~mro@p5dc7d0f3.dip0.t-ipconnect.de) (Remote host closed the connection)
[17:10:27] *** Quits: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-52-65-93-194-105.dsl.bell.ca) (Ping timeout: 256 seconds)
[17:13:55] *** Joins: pieguy128 (~pieguy128@bas1-montreal02-65-92-163-251.dsl.bell.ca)
[17:18:01] *** Joins: mro (~mro@p5dc7d0f3.dip0.t-ipconnect.de)
[17:21:38] *** Quits: Haudegen (~quassel@178.115.237.87.static.drei.at) (Quit: Bin weg.)
[17:21:57] *** Quits: mro (~mro@p5dc7d0f3.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[17:37:09] *** Joins: jlrnick (~josephler@2a01cb040a15940021ad9cb3998b49f5.ipv6.abo.wanadoo.fr)
[17:37:32] *** Quits: pieguy128 (~pieguy128@bas1-montreal02-65-92-163-251.dsl.bell.ca) (Ping timeout: 240 seconds)
[17:47:30] *** Quits: jlrnick (~josephler@2a01cb040a15940021ad9cb3998b49f5.ipv6.abo.wanadoo.fr) (Ping timeout: 268 seconds)
[17:48:49] *** Joins: pieguy128 (~pieguy128@bas8-montreal02-65-93-195-202.dsl.bell.ca)
[17:48:54] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Ping timeout: 276 seconds)
[17:55:08] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[18:06:23] *** Quits: hsw (~hsw@2001-b030-2303-0104-0172-0025-0012-0132.hinet-ip6.hinet.net) (Remote host closed the connection)
[18:06:29] *** Joins: mro (~mro@p5dc7d0f3.dip0.t-ipconnect.de)
[18:08:23] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[18:16:42] *** Quits: mro (~mro@p5dc7d0f3.dip0.t-ipconnect.de) (Remote host closed the connection)
[18:21:41] *** Joins: mro (~mro@p5dc7d0f3.dip0.t-ipconnect.de)
[18:24:46] *** Joins: Haudegen (~quassel@91.114.49.10)
[18:28:55] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[18:32:25] *** Quits: mro (~mro@p5dc7d0f3.dip0.t-ipconnect.de) (Remote host closed the connection)
[18:32:42] *** Joins: mro (~mro@p5dc7d0f3.dip0.t-ipconnect.de)
[18:34:38] *** Quits: mro (~mro@p5dc7d0f3.dip0.t-ipconnect.de) (Remote host closed the connection)
[18:37:11] *** Joins: hsw (~hsw@2001-b030-2303-0104-0172-0025-0012-0132.hinet-ip6.hinet.net)
[18:39:00] *** Joins: mro (~mro@p5dc7d0f3.dip0.t-ipconnect.de)
[18:41:01] *** Quits: mro (~mro@p5dc7d0f3.dip0.t-ipconnect.de) (Remote host closed the connection)
[18:41:47] *** Joins: mro (~mro@p5dc7d0f3.dip0.t-ipconnect.de)
[18:42:29] *** Joins: spip (~bobo@37.165.217.81)
[18:42:49] *** Quits: bobo_ (~bobo@37.171.73.143) (Ping timeout: 256 seconds)
[18:45:46] *** Quits: mro (~mro@p5dc7d0f3.dip0.t-ipconnect.de) (Remote host closed the connection)
[18:46:28] *** Joins: mro (~mro@p5dc7d0f3.dip0.t-ipconnect.de)
[18:48:11] *** Quits: mro (~mro@p5dc7d0f3.dip0.t-ipconnect.de) (Remote host closed the connection)
[19:01:29] <d_bot> <d4hines> Are there conventions around the meaning of different `let` bindings? I'm migrating a codebase from Reason syntax to OCaml, and we had different bindings like `let.some = Option.bind`, `let.await = Lwt.bind`, `let.ok = Result.bind`. If there are conventions I could follow when picking a new binding for each of these, that would be great.
[19:10:23] <d_bot> <monk> @d4hines there are ppx extensions for monadic let that are fairly common and i think the same does exist for options though maybe less common
[19:10:37] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 240 seconds)
[19:12:19] <d_bot> <monk> https://jobjo.github.io/2019/04/24/ocaml-has-some-new-shiny-syntax.html
[19:13:05] <d_bot> <d4hines> Thanks @monk
[19:22:26] <d_bot> <monk> np, if you look at the blogpost you'll see i haven't written a lot of code that used monads because i mispoke re: needing ppx extensions per se.
[19:22:28] <d_bot> <monk>
[19:22:29] <d_bot> <monk> You just have to open the bindings and define them to operators if you want them for things like Options etc and can go a further step and define the common infix operators you want like `>>=`.
[19:22:30] <d_bot> <monk>
[19:22:31] <d_bot> <monk> There are ppx extensions (eg `ppx_let`) that add more syntactic sugar for doing things like matching if you want that, too.
[19:24:17] <d_bot> <monk> here's a recent blogpost by a Lwt developer that shows how to use Lwt's provided operators in ocaml
[19:24:17] <d_bot> <monk>
[19:24:18] <d_bot> <monk> https://raphael-proust.github.io/code/lwt-part-1.html
[19:25:19] *** Joins: rgrinberg (~textual@2806:101e:7:2b:9559:34ac:a49f:3b79)
[19:26:59] *** Joins: mro (~mro@port-92-195-213-193.dynamic.as20676.net)
[19:30:57] *** Quits: mro (~mro@port-92-195-213-193.dynamic.as20676.net) (Ping timeout: 240 seconds)
[19:51:56] <d_bot> <VPhantom> From what I could tell in my limited experience, `let*` tends to be for the typical monadic bind (`Lwt.bind`, `Result.bind`) and `let&` for resource allocation with implicit freeing at the end of the scope.
[19:56:26] *** Joins: jlrnick (~josephler@2a01cb040a1594005593f371f5be80da.ipv6.abo.wanadoo.fr)
[20:07:55] *** Quits: dalek-caan (~Thunderbi@109-252-124-86.nat.spd-mgts.ru) (Quit: dalek-caan)
[20:13:28] *** Quits: mbuf (~Shakthi@122.173.242.184) (Quit: Leaving)
[20:18:18] <humasect> wbu let%
[20:22:54] *** Quits: humasect (~humasect@2001:1970:57e0:4100::1ae0) (Remote host closed the connection)
[20:23:44] *** Quits: Haudegen (~quassel@91.114.49.10) (Quit: Bin weg.)
[20:30:25] *** Joins: mro (~mro@port-92-195-213-193.dynamic.as20676.net)
[20:35:22] *** Quits: mro (~mro@port-92-195-213-193.dynamic.as20676.net) (Remote host closed the connection)
[20:37:55] *** Joins: zebrag (~chris@user/zebrag)
[20:40:40] *** Joins: mro (~mro@port-92-195-213-193.dynamic.as20676.net)
[20:45:06] *** Quits: rgrinberg (~textual@2806:101e:7:2b:9559:34ac:a49f:3b79) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[20:48:39] *** Quits: mro (~mro@port-92-195-213-193.dynamic.as20676.net) (Remote host closed the connection)
[20:53:27] *** Joins: humasect (~humasect@d24-235-181-179.home1.cgocable.net)
[20:56:52] <reynir> Ah interesting, you can't define ( let% ) :)
[20:58:15] *** Quits: humasect (~humasect@d24-235-181-179.home1.cgocable.net) (Ping timeout: 256 seconds)
[21:00:19] *** Joins: humasect (~humasect@2001:1970:57e0:4100::1ae0)
[21:03:38] <olle> whaaa
[21:03:43] <olle> You have let& in OCaml?
[21:04:51] <olle> How would that be safe without affine types or ownership or alias control?
[21:06:43] <d_bot> <orbitz> It isn't any less safe than the `with_yadda` pattern
[21:07:14] <olle> So you can't wrap it in an escaping closure?
[21:07:55] <pippijn> most with_yadda functions allow you to escape
[21:08:53] <olle> What does that mean? It's safe or not safe?
[21:09:26] <Fardale> It is not safe
[21:09:36] <pippijn> the resource allocation has a deterministic deallocation point
[21:09:41] <Fardale> Just let& is not less safe than what is already in the language
[21:09:53] <olle> Ah
[21:09:53] <pippijn> once deallocated, nothing prevents you from still using it
[21:10:41] <Fardale> But I never saw let& before, which libraries are defining it?
[21:13:11] *** Joins: vicfred (~vicfred@user/vicfred)
[21:19:03] <olle> Google showed some forum result
[21:20:25] *** Quits: zebrag (~chris@user/zebrag) (Quit: Konversation terminated!)
[21:27:03] *** Quits: kakadu (~kakadu@195.19.236.234) (Quit: Konversation terminated!)
[21:28:02] *** Joins: rgrinberg (~textual@2806:101e:7:6bed:c9f9:2cac:8647:c886)
[21:28:32] *** Joins: zebrag (~chris@user/zebrag)
[21:34:00] <reynir> Where is it you find what the warning numbers are/mean?
[21:35:12] <octachron> `ocamlc -warn-help` or with OCaml >= 4.12 warnings are named
[21:35:27] <reynir> Cheers!
[21:39:39] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Ping timeout: 276 seconds)
[21:40:58] *** Joins: Haudegen (~quassel@178.115.237.87.static.drei.at)
[21:41:29] <d_bot> <VPhantom> To clarify, my use of `let&` traps exceptions and uses `Fun.protect ~finally` to try to guarantee ressource deallocation after the closure.
[21:42:12] <d_bot> <VPhantom> (Not sure if IRC shows Discord edits: `s/closure/continuation/`)
[21:55:24] <reynir> it does not
[21:56:20] <reynir> I have been in another irc channel where they do, and it can quickly turn into a spam fest when someone makes many (small) edits :D
[22:04:54] *** Joins: Tuplanolla (~Tuplanoll@91-159-68-166.elisa-laajakaista.fi)
[22:07:02] <d_bot> <VPhantom> Good to know, thanks.
[22:26:35] *** Quits: humasect (~humasect@2001:1970:57e0:4100::1ae0) (Quit: Leaving...)
[22:39:57] *** Quits: ralu (~ralu@static.211.245.203.116.clients.your-server.de) (Ping timeout: 240 seconds)
[22:41:00] *** Quits: octachron (~octachron@2a01:4f8:1c1c:69ae::1) (Quit: ZNC 1.8.2 - https://znc.in)
[22:48:11] *** Joins: octachron (~octachron@2a01:4f8:1c1c:69ae::1)
[22:49:15] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[22:50:39] *** Quits: octachron (~octachron@2a01:4f8:1c1c:69ae::1) (Client Quit)
[22:51:21] *** Joins: ralu (~ralu@static.211.245.203.116.clients.your-server.de)
[22:51:54] *** Joins: octachron (~octachron@2a01:4f8:1c1c:69ae::1)
[22:54:11] *** Quits: octachron (~octachron@2a01:4f8:1c1c:69ae::1) (Client Quit)
[22:58:47] <d_bot> <cemerick> Is there a date-time package that includes human-friendly printing, e.g. "two days ago", "last month", etc?
[23:04:57] *** Joins: octachron (~octachron@2a01:4f8:1c1c:69ae::1)
[23:13:46] *** Quits: rgrinberg (~textual@2806:101e:7:6bed:c9f9:2cac:8647:c886) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[23:30:30] *** Quits: ouestbillie (~gallup@45.83.220.195) (Ping timeout: 250 seconds)
[23:30:47] *** Joins: rgrinberg (~textual@2806:101e:7:6bed:c9f9:2cac:8647:c886)
[23:31:54] <d_bot> <glennsl> it's pretty easy to write yourself, and usually requires integration with whatever translation system you're using anyway, so there's really not much gain in making it a library.
[23:32:12] *** Joins: ouestbillie (~gallup@bl16-179-173.dsl.telepac.pt)
[23:50:17] *** Quits: gravicappa (~gravicapp@178.214.248.83) (Ping timeout: 240 seconds)
