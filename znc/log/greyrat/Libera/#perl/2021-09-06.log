[00:02:00] *** Joins: APic (apic@apic.name)
[00:07:07] * GumbyPAN CPAN Upload: JSON-Parser-Regexp-0.09 by RAJ https://metacpan.org/release/RAJ/JSON-Parser-Regexp-0.09
[00:08:56] *** Joins: Tangoose (~Arco@68.40.3.32)
[00:11:10] *** Quits: Dexel (~Arco@68.40.3.32) (Ping timeout: 240 seconds)
[00:12:30] *** Joins: ZZzz (~ZZzz@77.137.108.101)
[00:18:28] *** Joins: Adoi (~Adoi@user/adoi)
[00:19:30] *** Quits: pounce (~pounce@facebook/engineering/pounce) (Remote host closed the connection)
[00:22:09] * GumbyPAN CPAN Upload: JSON-Parser-Regexp-0.10 by RAJ https://metacpan.org/release/RAJ/JSON-Parser-Regexp-0.10
[00:26:44] *** Joins: pounce (~pounce@facebook/engineering/pounce)
[00:29:45] *** Quits: pflanze (~pflanze@2001:1a88:19e:4500:99e2:ded6:745a:b77c) (Remote host closed the connection)
[00:29:58] *** Joins: pflanze (~pflanze@2001:1a88:19e:4500:48e8:b44:69ef:471d)
[00:31:52] *** Quits: magla (~gelignite@55d40548.access.ecotel.net) (Quit: Stay safe!)
[00:31:54] *** Quits: tealecloud (~tealeclou@cpc1-farn9-2-0-cust495.6-2.cable.virginm.net) (Read error: Connection reset by peer)
[00:33:27] *** Joins: tealecloud (~tealeclou@cpc1-farn9-2-0-cust495.6-2.cable.virginm.net)
[00:34:46] *** Joins: Lantizia (~Lantizia@195.62.201.126)
[00:35:24] <Lantizia> hey, is the crypt function meant to be able to do both $6 and $y type passwords?
[00:36:50] <Grinnz> it's exactly crypt(3), so it can only do 1/2a/5/6
[00:37:11] * GumbyPAN CPAN Upload: JSON-Parser-Regexp-0.11 by RAJ https://metacpan.org/release/RAJ/JSON-Parser-Regexp-0.11
[00:38:03] <Grinnz> by $y do you mean $2y?
[00:38:08] <Grinnz> aka the PHP extension?
[00:41:24] <ZZzz> Hello. Could somebody, please, help me to rewrite this regex (substituting matching of \n by matching empty lines ^$) so that it works with PCRE (grep --perl-regexp). Thank you!  https://stackoverflow.com/questions/69005195/gtksourceview-gedit-regex-matching-discrepancy
[00:41:24] <Paperbot_> Link title(s): [ string - GtkSourceView - Gedit: regex matching discrepancy - Stack Overflow ]
[00:41:25] <Grinnz> $2y is explained here https://www.php.net/security/crypt_blowfish.php and you can just change it to 2a for anything non-php to parse it
[00:41:26] <Paperbot_> Link title(s): [ PHP: CRYPT_BLOWFISH security fix details ]
[00:41:43] *** Quits: Adoi (~Adoi@user/adoi) (Quit: Leaving)
[00:43:54] *** Quits: pounce (~pounce@facebook/engineering/pounce) (Remote host closed the connection)
[00:44:31] <Grinnz> ZZzz: as mentioned, grep only gets one line at a time, so you would not see any matching of multiple lines in that test
[00:45:01] <ZZzz> grep also? it was said about GtkSourceView...
[00:45:13] <Grinnz> no idea about that, but grep literally only gets one line to match against
[00:45:53] <Grinnz> note that PCRE isn't perl regex, but someone might be able to help anyway (thanks for being specific)
[00:47:18] *** Joins: pounce (~pounce@facebook/engineering/pounce)
[00:47:24] <ZZzz> if somebody knows how to replace \n\n with an empty line ^$ this might be enough... we will see the results in both - grep and GtkSourceView
[00:48:41] <ZZzz> (it is good actually as you can use grep --perl-regex for testing instead of GtkSourceView)
[00:53:56] <Grinnz> it's impossible to receive more than one \n in a grep regex
[00:54:30] <Grinnz> unless it has some way of running the regex over multiple lines i don't know what to suggest
[00:55:53] <huf> -z?
[00:56:35] <Grinnz> yeah changing what it considers a line would work
[00:56:53] <huf> dirty deeds done with streams
[00:59:05] <ZZzz> Grinnz: that's why I try not to match \n\n but ^$... here people claim it worked: https://i.imgur.com/t26fPCN.png
[00:59:15] <Grinnz> Lantizia: also consider https://metacpan.org/pod/Crypt::Passphrase with https://metacpan.org/pod/Crypt::Passphrase::Bcrypt and a https://metacpan.org/pod/Crypt::Passphrase::Fallback to validate your SHA hashes, which will also make it easy to set up logic to upgrade people to new hashes
[00:59:17] <Paperbot_> Link title(s): [ Crypt::Passphrase - A module for managing passwords in a cryptographically agile manner - metacpa... ] [ Crypt::Passphrase::Bcrypt - A bcrypt encoder for Crypt::Passphrase - metacpan.org ] [ Crypt::Passphrase::Fallback - a fallback validator for Crypt::Passphrase - metacpan.org ]
[00:59:48] <ZZzz> Grinnz: https://www.reddit.com/r/gnome/comments/csjpxk/problem_writing_own_syntax_highlighting_for/ey5yerg?utm_source=share&utm_medium=web2x&context=3
[00:59:49] <Paperbot_> Link title(s): [ Problem writing own syntax highlighting for Gedit/GtkSourceView : gnome ]
[00:59:50] *** Joins: bestsec (~bestsec@135-23-44-223.cpe.pppoe.ca)
[00:59:55] <bestsec> /join #grapheneos and meet the most secure mobile OS ever existed. Its developer strcat aka Daniel Micay is the best hacker ever existed challenges Linus Torvalds himself for linux kernel security debate.
[00:59:58] *** Parts: bestsec (~bestsec@135-23-44-223.cpe.pppoe.ca) ()
[01:00:05] <Grinnz> lol
[01:00:19] *** Quits: rpath (~rpath@gateway/tor-sasl/rpath) (Remote host closed the connection)
[01:00:40] <Grinnz> ZZzz: right, if you detect an empty line that means that there was a newline before it and it consists of only a newline, so effectively that detects a paragraph
[01:00:56] <Lantizia> Grinnz, no I mean in /etc/shadow you now see $y type passwords (e.g. as opposed to $6 which is sha-512)... which I think is yescrypt?!
[01:01:07] <Lantizia> perl -e'print crypt("'$susrpass'", "\$6\$'$(tr -cd 'a-zA-Z0-9./'</dev/urandom|head -c16)'")'
[01:01:11] <Grinnz> Lantizia: never heard of it
[01:01:19] <Lantizia> that's what I used to use... but if I give it $y then it doesn't work
[01:01:55] <Lantizia> but I thought the perl crypt function just passes it to the system crypt function - which in theory *does* know about $y as (for example) Debian itself must use it (as would adduser, a debian perl script) to make the initial /etc/shadow in the first place
[01:02:58] <Grinnz> it should yes
[01:03:31] <Lantizia> but I'm probably passing 16 random chars now as the 2nd parameter - and I shouldn't be :)
[01:03:31] <Grinnz> does your `man crypt` show it supports that?
[01:03:42] <Grinnz> debian could be using something else
[01:04:49] <Lantizia> oddly I get 'No manual entry for crypt' :S
[01:04:49] <Grinnz> well of course, the salt has to match the one in the hash
[01:05:44] *** Joins: rpath (~rpath@gateway/tor-sasl/rpath)
[01:06:06] <Grinnz> btw i would pass the strings to crypt in @ARGV, rather than trying to interpolate them directly in the string when they could have quotes in them
[01:06:14] <Grinnz> or in %ENV
[01:12:19] *** Joins: neshpion (~neshpion@gateway/tor-sasl/neshpion)
[01:13:06] <Grinnz> https://metacpan.org/dist/Crypt-NaCl-Sodium/view/lib/Crypt/NaCl/Sodium/pwhash.pod is the only option i see on CPAN for yescrypt
[01:13:06] <Paperbot_> Link title(s): [ Crypt::NaCl::Sodium::pwhash - Password hashing (yescrypt) - metacpan.org ]
[01:13:13] <Grinnz> which requires libsodium
[01:18:48] <Lantizia> Grinnz, so ultimately the perl function I was using (irrelevant of any other details, like some non-perl crypt function in another library or the distro/OS) just *isn't* going to do yescrypt / $y format?
[01:19:27] <Grinnz> not unless your libcrypt does
[01:19:34] <Grinnz> which i would find unlikely
[01:19:41] *** Joins: gryphn (~gryphn@191.96.106.243)
[01:20:56] <Lantizia> Grinnz, sure if they go into /etc/shadow - then my libcrypt *must* ... must it not!?
[01:21:05] <Grinnz> looks like fedora is planning to do the same, and is using libxcrypt to do it https://fedoraproject.org/wiki/Changes/yescrypt_as_default_hashing_method_for_shadow
[01:21:05] <Paperbot_> Link title(s): [ Changes/yescrypt as default hashing method for shadow - Fedora Project Wiki ]
[01:21:19] <Lantizia> right libcrypt vs libxcrypt
[01:21:50] <Lantizia> and I presume perl (e.g. basic perl, as in 'perl-base' .. no extra modules)... doesn't have a xcrypt() to go with that crypt() ? :D
[01:21:56] <Grinnz> nope
[01:22:25] <Grinnz> and libtomcrypt doesn't do yescrypt that i can see, so CryptX doesn't either
[01:24:01] <Lantizia> ok thanks for your help Grinnz  :)
[01:27:16] * GumbyPAN CPAN Upload: Game-TextMapper-1 by SCHROEDER https://metacpan.org/release/SCHROEDER/Game-TextMapper-1
[01:28:00] <Grinnz> libxcrypt looks to be a rather fedora specific thing https://github.com/besser82/libxcrypt
[01:28:01] <Paperbot_> Link title(s): [ GitHub - besser82/libxcrypt: Extended crypt library for descrypt, md5crypt, bcrypt, and others ]
[01:28:04] <Grinnz> so i still wonder what debian's using
[01:28:18] *** Joins: aspic (~shifty~~~@ppp121-44-117-101.syd-gls-har-bras39.tpg.internode.on.net)
[01:28:50] <Lantizia> Grinnz, actually this is odd... I've turned to trying...  mkpasswd -s<<<plaintextpassword
[01:29:06] <Lantizia> works a charm... perfect $y every time... haven't had to specify I needed a $y either
[01:29:23] <Grinnz> i'd imagine they have all the tools use the same lib
[01:29:32] <Lantizia> the man for mkpasswd (which oddly comes with the 'whois' package on debian) says it uses crypt(3)
[01:29:54] <Grinnz> see if you can install the crypt tool and get its manpage?
[01:30:10] <Lantizia> the 'crypt tool' ?
[01:30:15] <Grinnz> the executable
[01:30:21] <Lantizia> didn't know there way one
[01:30:30] <Lantizia> I though it was some kind of internal function of a library
[01:30:37] <Lantizia> *was one
[01:30:50] <Grinnz> oh nvm, yeah it is
[01:31:00] <Grinnz> wonder how you don't have the manpage then
[01:31:35] <Grinnz> maybe debian set it up to not use libcrypt at all?
[01:31:43] <Lantizia> no idea - things seem oddly different in debian 11
[01:33:21] <simcop2387> perlbot: allowpaste global off
[01:33:21] <perlbot> simcop2387: This global has pastebin set [off]
[01:33:33] <simcop2387> being hit hard right now just turn it off for a while again
[01:35:15] <Grinnz> wikipedia just says "To use this hash, the libcrypt from glibc is replaced with a backward-compatible one from the "libxcrypt" project." and links to that same fedora wiki page as a source lol
[01:35:28] <Grinnz> so see if you have libxcrypt i guess?
[01:35:44] <Lantizia> nope
[01:36:53] <Lantizia> libcrypt.so.1.1.0
[01:37:31] <Lantizia> https://packages.debian.org/bullseye/libcrypt1
[01:37:32] <Paperbot_> Link title(s): [ Debian -- Details of package libcrypt1 in bullseye ]
[01:37:38] <Lantizia> aha! even though it's called libcrypt1
[01:37:43] <Grinnz> sneaky
[01:37:45] <Lantizia> and the file is libcrypt.so.1.1.0
[01:37:54] <Lantizia> yeah! the desc says libxcrypt :P
[01:38:26] <Grinnz> well if it's visible as libcrypt then it should also be what perl sees...
[01:38:42] <Grinnz> maybe perl has its own validation layer?
[01:39:36] <Lantizia> I think I've been told a $y type needs to be passed not just a salt... but a 'cost' and then a salt
[01:39:53] <Lantizia> however I do that through perl's crypt() function... i'm not sure
[01:40:15] <Grinnz> it would be part of the $y hash you get
[01:40:33] <Lantizia> well surely I have to provide the 'cost' whatever that is
[01:40:34] <Grinnz> if you mean to hash it originally... then you have to form the hash
[01:40:59] <Lantizia> perl -e'print crypt("'$susrpass'", "\$6\$'$(tr -cd 'a-zA-Z0-9./'</dev/urandom|head -c16)'")'
[01:41:10] <Lantizia> at the moment I just provide $6  and  16 random chars
[01:41:13] <Lantizia> (the salt)
[01:41:31] <Lantizia> with $susrpass being the plaintext password
[01:42:52] <Grinnz> for example, bcrypt you would have to pass $2a$08$salt$
[01:43:01] <Grinnz> well the last $ is optional
[01:43:09] <Grinnz> but bcrypt has a cost there
[01:43:48] <Lantizia> https://www.mankier.com/5/crypt#Available_Hashing_Methods-yescrypt
[01:43:49] <Paperbot_> Link title(s): [ crypt man page - libxcrypt - File Formats | ManKier ]
[01:44:02] <Lantizia> oddly that doesn't mention cost
[01:44:08] <Grinnz> argon2 isn't supporte dby crypt but would look like $argon2id$v=19$m=65536,t=2,p=1$salt
[01:44:23] <Grinnz> so i assume yescrypt has something similar
[01:45:21] <Grinnz> yeah it looks like there's something there before the salt, that doesn't say what it is though
[01:45:55] <Grinnz> maybe it's the "CPU time cost parameter"
[01:46:48] <Grinnz> that libsodium version has both an opslimit and memlimit parameter
[01:47:20] <Lantizia> ok so this....
[01:47:23] <Lantizia> $y$j9T$uodXMKf1o2m5EU1DrIK7T/$awMKSNxnYs15h1YLZnr99.2Z9oWpP//exTqYLEmE3t/
[01:47:32] <Lantizia> is plain text password... bob 
[01:47:40] <Lantizia> as made by the debian installer
[01:48:13] <Lantizia> I'm wondering how I can know ... how I'd separate this out into it's components.. so that I could potentially make new passwords in the exact same way debian did
[01:48:15] <Grinnz> right so you have to include that j9T parameter
[01:48:37] <Grinnz> you could try to figure out what it means, but just using it verbatim is probably sufficient to get things working
[01:49:09] <Grinnz> and the salt can't be random bytes
[01:49:22] <Grinnz> oh, your tr takes care of that, nevermind
[01:50:08] <Grinnz> the last component is the hashed password, so you don't need that when hashing, only to verify
[01:50:43] <Lantizia> I'm not sure what you mean by that?  why pass something which is itself the thing I'm trying to generate?
[01:51:01] <Grinnz> that's how crypt works
[01:51:23] <Lantizia> not with sha512 it didn't
[01:51:30] <Lantizia> I'd pass the plain test password, the $6 and the salt
[01:51:33] <Lantizia> *text
[01:51:38] <Grinnz> yes, because sha512 doesn't have any options
[01:51:56] <Grinnz> so the options are just $6$
[01:53:08] <Grinnz> to hash a password you need to pass the options string with the salt, you will get back the same options string with salt with the hash at the end
[01:53:28] <Grinnz> to verify the password, you pass that same string, and it will ignore the hash at the end, and you see if you get the same hash back
[01:54:28] <Lantizia> sorry it's getting my late and my head only just clicked that I can see dollar signs
[01:54:34] <Grinnz> :D
[01:54:42] <Lantizia> $y  $j9T  $uodXMKf1o2m5EU1DrIK7T/  $awMKSNxnYs15h1YLZnr99.2Z9oWpP//exTqYLEmE3t/
[01:54:51] <Grinnz> yeah exactly
[01:55:16] <Lantizia> ooh fffff
[01:55:30] <Lantizia> this is sounding like it'll be one damned ugly oneliner
[01:55:50] <Lantizia> $ mkpasswd -s<<<bob
[01:56:02] <Lantizia> $y  $j9T  $OumUSpCRExFeBdkHf7rT00  $pK8otmh7UaK6v8W.LgBMzbRWZp8f5hArgdR4zVuLTT8
[01:56:12] <Lantizia> but at least mkpasswd generates the exact same format
[01:56:19] * GumbyPAN CPAN Upload: Grizzly-0.100 by NOBUNAGA https://metacpan.org/release/NOBUNAGA/Grizzly-0.100
[01:56:22] <Lantizia> so maybe I'll just use that instead of perl
[01:56:45] <Lantizia> I'm a little more comfortable doing that... now that *I know* that it's using the same size salt, etc...
[01:56:54] <Grinnz> reasonable option
[01:57:22] <Lantizia> just odd depending on the 'whois' package to do that... rather than the more guaranteed to be installed 'perl-base' :P
[01:57:39] <Lantizia> so if you do discover a way of doing it with perl's crypt()... I'm still all ears :)
[01:58:12] <Grinnz> did you try it with the correct hash format?
[01:58:44] <Lantizia> perl -e'print crypt("'$susrpass'", "\$y\$j9T'$(tr -cd 'a-zA-Z0-9./'</dev/urandom|head -c22)'")'
[01:58:57] <Lantizia> I mean I've got a 22 char salt there (that seems to be right?) and the j9T
[01:59:03] <Lantizia> but I've no idea what the end bit is meant to be
[01:59:19] <Grinnz> the end bit is the hash, you omit it to hash a password
[01:59:46] <Lantizia> then I guess yeah it should work - but doesn't
[01:59:48] <Grinnz> crypt ignores it either way, but it's there so you can verify the entire string is equal when it comes back
[01:59:55] <Lantizia> I get...   *0
[02:00:44] <Lantizia> perl -e'print crypt("'$susrpass'", "\$y\$j9T\$'$(tr -cd 'a-zA-Z0-9./'</dev/urandom|head -c22)'")'
[02:00:51] <Lantizia> forgot a \$ :P  but still didn't work
[02:04:28] <Grinnz> tempted to see if i can put together an Alien/FFI interface to yescrypt for Crypt::Passphrase to use
[02:06:20] * GumbyPAN CPAN Upload: Grizzly-0.101 by NOBUNAGA https://metacpan.org/release/NOBUNAGA/Grizzly-0.101
[02:07:04] *** Joins: madduck (~madduck@matilda.madduck.net)
[02:07:04] *** Quits: madduck (~madduck@matilda.madduck.net) (Changing host)
[02:07:04] *** Joins: madduck (~madduck@user/madduck)
[02:08:44] *** Quits: neshpion (~neshpion@gateway/tor-sasl/neshpion) (Quit: neshpion)
[02:12:43] *** Quits: tealecloud (~tealeclou@cpc1-farn9-2-0-cust495.6-2.cable.virginm.net) (Ping timeout: 252 seconds)
[02:20:52] <Lantizia> Grinnz, can I translate that as a) adding something to make this work... in the way I presumed it should, but doesn't? and that b) you're now saying it'll never work in it's present form?
[02:21:41] <Grinnz> no, it wouldn't affect crypt
[02:21:51] <Lantizia> ah ok :)
[02:22:13] <Grinnz> in actual perl applications you would want to use Crypt::Passphrase to manage multiple password schemes in a sustainable way
[02:22:14] <Lantizia> so to your knowledge the last attempt I did - *should* work? :D
[02:22:36] <Grinnz> yes, unless perl's crypt wrapper doesn't allow it
[02:22:50] <Lantizia> what is it, that it wouldn't allow - in what way?
[02:23:19] <Lantizia> are we talking about the perl function checking for the extra $ and not liking that?
[02:23:22] <Grinnz> well since it's supposed to be a dropin replacement without having to do anything special, the only thing i can think is that perl itself checks the $x$
[02:23:27] <Lantizia> or not liking $y in general?
[02:23:35] <Grinnz> nah, it wouldn't care about the rest of the string
[02:23:39] <Lantizia> right
[02:24:28] <Lantizia> so maybe I can find someplace the source of perl's crypt function to see if it checks for known $6, $y, $etc, values... or if it just passes on the request?
[02:24:38] <Lantizia> and that way know for sure what is to "blame" :)
[02:26:30] <Grinnz> https://github.com/Perl/perl5/blob/blead/pp.c seems like where it's implemented, and i don't see anything special
[02:26:32] <Paperbot_> Link title(s): [ perl5/pp.c at blead · Perl/perl5 · GitHub ]
[02:27:42] *** Quits: ZZzz (~ZZzz@77.137.108.101) (Quit: ZZzz)
[02:28:15] <Grinnz> you could try printing $! to see what error it's encountering
[02:28:33] <Grinnz> assuming it's returning undef
[02:29:04] <Grinnz> if it's returning a string then it's not an error, it's just what crypt is returning
[02:30:04] <Grinnz> print crypt(...) // "$!"
[02:30:10] <Grinnz> would be an easy way to do that
[02:31:25] <Grinnz> or // die "$!" even better so you get it on stderr
[02:32:18] *** Quits: EGD (~egd@user/egd) ()
[02:33:34] *** Quits: madduck (~madduck@user/madduck) (Quit: switching to sasl auth)
[02:34:16] *** Joins: madduck (~madduck@user/madduck)
[02:36:00] <Lantizia> Grinnz, well I guess it's not dying?  as I've always had    *0  returned
[02:36:08] <Lantizia> $ perl -e'print crypt("'$susrpass'", "\$y\$j9T\$'$(tr -cd 'a-zA-Z0-9./'</dev/urandom|head -c22)'") // die "$!"'
[02:36:10] <Lantizia> *0
[02:36:27] <Grinnz> ok so crypt is actually just returning that, whatever that means
[02:36:35] <Lantizia> exactly :)
[02:37:06] <Lantizia> seems others get this too... https://stackoverflow.com/questions/28099229/php-crypt-returns-0-failure-string-in-version-5-6-4-but-not-5-4
[02:37:07] <Paperbot_> Link title(s): [ PHP crypt() returns *0 failure string in version 5.6.4, but not 5.4, - Stack Overflow ]
[02:37:35] <Lantizia> it's a "failure string"
[02:38:22] <Grinnz> so either your salt is not correct or it's considering $y$ a failure
[02:39:01] <Grinnz> it seems like *0 is for invalid salt
[02:39:39] <xenu> amazing api
[02:39:48] <Grinnz> but that's referringt o the whole salt parameter, so it could mean invalid options too
[02:39:54] <Grinnz> yep
[02:40:45] <Grinnz> try it with one of the actual salt strings from mkpasswd maybe?
[02:41:00] <revhippie>   neat.  that same command, but with -E 'say  instead of -e 'print ... works.
[02:41:02] <Grinnz> otherwise i would conclude that it's considering $y$ invalid
[02:41:19] <Lantizia> btw I've got 'man crypt' to work now... needed 'libcrypt-dev' installed to have the man page for the new xcrypt-based man page :)
[02:41:26] <Grinnz> ah, weird
[02:41:57] <Lantizia> aha!
[02:42:06] <Lantizia> perl -e'print crypt("'$susrpass'", "\$y\$j9T\$OumUSpCRExFeBdkHf7rT00")'
[02:42:18] <Lantizia> result
[02:42:25] <Lantizia> so there is something about the salt it didn't like
[02:42:32] <Grinnz> progress!
[02:43:08] *** Quits: madduck (~madduck@user/madduck) (Quit: Switching to CertFP (sorry for the disconnects, this will be the last))
[02:44:00] <Lantizia> Grinnz, oooooh
[02:44:09] <Lantizia> I just ran the one I was trying (and failing) to get working before
[02:44:14] <Lantizia> but I ran it over and over and over
[02:44:19] <Lantizia> and SOME of the time - it works
[02:45:58] *** Joins: madduck (~madduck@user/madduck)
[02:46:15] *** Joins: tealecloud (~tealeclou@cpc1-farn9-2-0-cust495.6-2.cable.virginm.net)
[02:46:44] *** Quits: gryphn (~gryphn@191.96.106.243) (Quit: kthxbye)
[02:48:28] * Lantizia wonders if it tests to see if the salt is random enough
[02:49:49] <Lantizia> just ran is 41 times - worked 6 times :)
[02:50:08] <Lantizia> *it
[02:50:38] *** Quits: tealecloud (~tealeclou@cpc1-farn9-2-0-cust495.6-2.cable.virginm.net) (Ping timeout: 256 seconds)
[02:51:39] <revhippie> salt 99 doesn't work, salt 00 does.  weird.
[02:52:27] *** Quits: haj (~haj@ip5f5beb42.dynamic.kabel-deutschland.de) (Quit: Leaving.)
[02:53:49] <Lantizia> revhippie, maybe not randomness then
[02:54:54] <Grinnz> the salt supposedly should be allowed an arbitrary length
[02:55:29] <Grinnz> but libxcrypt says it's up to 512 bits
[02:56:41] <Grinnz> either way the salts you're generating are well under that
[02:59:10] *** Quits: EvanCarroll (~ecarroll@212.174.109.83) (Ping timeout: 240 seconds)
[03:01:27] <revhippie> perl -E 'say "$_ - ", crypt("", q($y$j9T$) . $_) // die "$!" for @ARGV' xA xB xC x0 x1 x2 x. x/ # repeatably, x[ABC2] fail, x[01./] succeed.
[03:02:22] *** Joins: whynot (~whynot@88.155.30.23)
[03:04:09] <Grinnz> weird
[03:07:23] <Grinnz> i wonder if it's when you aren't making a fully padded byte
[03:13:24] <Grinnz> Lantizia: try this to generate your salt: head -c16 /dev/urandom | base64 -w 0 | tr '+' '.' | cut -c-22
[03:15:12] <Lantizia> oddly that generates nothing at all (got it in a while loop now :P)
[03:15:30] <Lantizia> while true; do salt=$(head -c16 /dev/urandom | base64 -w 0 | tr '+' '.' | cut -c-22); echo -e "$salt\t$(perl -e'print crypt("bob", "\$y\$j9T\$'$salt'")')";done
[03:15:55] <Lantizia> vs... this... (which will show a success every now and then...)
[03:15:56] <Lantizia> while true; do salt=$(tr -cd 'a-zA-Z0-9./'</dev/urandom|head -c22); echo -e "$salt\t$(perl -e'print crypt("bob", "\$y\$j9T\$'$salt'")')";done
[03:16:04] <Grinnz> you're using double quotes in a double quote string
[03:16:38] <Lantizia> nope
[03:16:56] <Lantizia> oh you mean the echo?
[03:17:00] <Grinnz> yes
[03:17:04] <Lantizia> it's fine as it's in $()
[03:17:12] <Grinnz> is it?
[03:17:19] <Lantizia> and it doesn't affect the version which sometimes generates them
[03:17:22] <Lantizia> yeah it's fine
[03:17:31] <Lantizia> as the $() is processed first
[03:18:15] <Grinnz> oh ffs, cut outputs a newline at the end
[03:18:21] <Lantizia> ah!
[03:18:41] *** Joins: tealecloud (~tealeclou@cpc1-farn9-2-0-cust495.6-2.cable.virginm.net)
[03:18:51] <Grinnz> dunno how to turn that off
[03:20:52] <Lantizia> well head -c22 should work
[03:20:54] <Grinnz> just use head -c-2 instead of cut 
[03:20:58] <Grinnz> or that
[03:21:12] <Lantizia> i still get *0 every time
[03:21:25] <Lantizia> it's odd how you've managed to come up with something that consistently doesn't work
[03:21:31] <Lantizia> rather than consistently sometimes works :)
[03:21:43] *** Joins: Simon^ (~simon@tunnel113494-pt.tunnel.tserv5.lon1.ipv6.he.net)
[03:21:54] <Simon^> aha, found everyone.
[03:22:27] <Simon^> Anyone know where the catalyst and dbix-class channels are these days?
[03:22:39] <Grinnz> still on irc.perl.org
[03:23:04] <Simon^> hrm, i thought I connected to irc.perl.org here.. 
[03:23:14] <Grinnz> nope this is libera.chat
[03:23:19] <Simon^> huh, weird.
[03:23:40] *** Quits: tealecloud (~tealeclou@cpc1-farn9-2-0-cust495.6-2.cable.virginm.net) (Ping timeout: 240 seconds)
[03:23:45] <Grinnz> which is fine, it just doesn't have the project specific channels (other than #mojo which moved here)
[03:24:57] <Simon^> well, weechat has obviously gone weird.
[03:25:08] <Simon^> the command I ran was: weechat irc.perl.org
[03:25:52] <Simon^> oh, my bad.. doesn't look like that's valid.
[03:25:54] <Grinnz> my experience is you have to configure servers in weechat before connecting to them for it to work best
[03:26:01] <Lantizia> Grinnz, well the base64 version has been generating salts for about 5 minutes now - not one works :P  so whatever magic that was just discovered... is how *not* to do it :)
[03:26:04] <Simon^> yeah, maybe this is set as the default server
[03:26:08] <Lantizia> so maybe go in the other direction
[03:26:15] <Lantizia> of whatever direction we went in? :D
[03:27:35] <Grinnz> Simon^: yeah it's the default server of many clients
[03:28:07] <Simon^> Grinnz: found how to join a server temporarily with weechat.. found the catalyst channel :)
[03:29:08] *** Parts: Simon^ (~simon@tunnel113494-pt.tunnel.tserv5.lon1.ipv6.he.net) (WeeChat 2.7.1)
[03:29:14] <Grinnz> Lantizia: well it's a 64-bit base64 hash, so i dunno what else it would want
[03:29:24] <Grinnz> 128-bit, rather
[03:30:18] <Lantizia> so do the 22 chars get expanded out to something?  and maybe they're not always becoming a 128-bit length once expanded?
[03:30:33] <Grinnz> it shouldn't matter, yescrypt doesn't care about the salt length
[03:30:47] <Grinnz> but yes, it gets decoded from base64 to bytes
[03:31:25] <Lantizia> maybe this $j9T thing is what enforces it be something specific?
[03:31:34] <Grinnz> don't think so
[03:31:41] <Grinnz> but it's possible
[03:32:35] <Lantizia> Grinnz, oh thinking about this the other way then... is there a way of saying we always want 128-bits and generating a compatible string of chars to represent it?
[03:32:47] <Lantizia> rather than generating the chars and not knowing the bit length of it?
[03:32:59] <Grinnz> that's exactly what i did
[03:33:05] <Lantizia> ah :)
[03:33:10] *** Quits: pizdets (~pizdets@183.182.111.251) (Ping timeout: 240 seconds)
[03:33:38] <Lantizia> Grinnz, ahaa....
[03:33:39] <Lantizia> while true; do salt=$(head -c22 /dev/urandom|base64 -w0|tr '+' '.' | head -c22); echo -e "$salt\t$(perl -e'print crypt("bob", "\$y\$j9T\$'$salt'")')";done
[03:33:54] <Lantizia> That's your suggestion... but I changed the first head to be 22 not 16
[03:34:00] <Lantizia> and not *some* of the succeed
[03:34:02] *** Joins: pizdets (~pizdets@183.182.111.5)
[03:34:02] <Lantizia> *now
[03:34:16] <Lantizia> *and now *some* of them succeed
[03:34:30] <Grinnz> oh, head is probably not the right thing to use on /dev/urandom
[03:35:15] <Grinnz> but idk
[03:38:27] <Lantizia> dd if=/dev/urandom bs=16 count=1 2>/dev/null | base64
[03:39:23] <Lantizia> oddly still nothing
[03:45:52] <Lantizia> Grinnz, all we know for sure is reading 16 bytes never gets any results... read 17 or more and we do
[03:46:30] * GumbyPAN CPAN Upload: Statistics-Descriptive-PDL-0.06 by SLAFFAN https://metacpan.org/release/SLAFFAN/Statistics-Descriptive-PDL-0.06
[03:47:20] <Grinnz> maybe try a 256-bit salt? 32 bytes from urandom and 43 chars of base64
[03:47:57] <Grinnz> but it looked like 128-bit was what mkpasswd was using so shrug
[03:50:17] <Lantizia> OH!
[03:50:21] <Lantizia> I never tried 15!
[03:50:28] <Lantizia> while true; do salt=$(dd if=/dev/urandom bs=15 count=1 2>/dev/null|base64 -w0|tr '+' '.'|head -c22); echo -e "$salt\t$(perl -e'print crypt("bob", "\$y\$j9T\$'$salt'")')";done
[03:50:33] <Lantizia> WORKS ALL THE TIME
[03:51:22] <Grinnz> wat
[03:51:26] <Lantizia> yup lol
[03:52:11] <Lantizia> 100% success rate when every random seed being generates (it's pumping out a few dozen every 5 seconds)
[03:54:12] <Lantizia> I feel like I've encountered this 'it's one byte less than you think' thing before
[03:54:17] <Lantizia> but I can't remember how/why
[03:56:31] * GumbyPAN CPAN Upload: Statistics-Descriptive-PDL-0.07 by SLAFFAN https://metacpan.org/release/SLAFFAN/Statistics-Descriptive-PDL-0.07
[03:58:26] <Lantizia> ooh I can loose the head/cut at the end too
[04:00:44] <Lantizia> Grinnz, :)
[04:00:47] <Lantizia> perl -e'print crypt("bob", "\$y\$j9T\$'$(head -c15 /dev/urandom|base64 -w0|tr '+' '.')'")'
[04:00:55] <Lantizia> oh it's gotten elegant again
[04:01:07] <Lantizia> no need for dd, no head, no cut
[04:01:31] <Grinnz> base64 leaves trailing == which is what the last part was for
[04:01:51] <Lantizia> not with 15 bytes it doesn't
[04:02:17] <Lantizia> that *WORKS* :)
[04:02:19] <Grinnz> ah, it's a 20 char hash for that
[04:02:26] <Lantizia> enough that I can finally go to bed :)
[04:02:44] <Lantizia> thanks for your time Grinnz ... was a fun "puzzle" :)
[04:04:51] <Lantizia> nn
[04:08:08] *** Joins: badmap (~badmap@host86-133-51-114.range86-133.btcentralplus.com)
[04:18:10] *** Quits: badmap (~badmap@host86-133-51-114.range86-133.btcentralplus.com) (Ping timeout: 240 seconds)
[04:34:30] <gordonfish> basheval: perl -e 'print crypt q{bob}, q{$y$j9T$}. `head -c15 /dev/urandom|base64 -w0|tr "+" "."`' # Lantizia, a little cleaner
[04:34:31] <perlbot> gordonfish: $y$j9T$hEtDHYU/Ud9YIthJKwJd$JhxBIX.Z.JtSojRBeMaqNe15cV4S7l.8lSBE6MtTPz9
[04:36:15] <Grinnz> and you'll still want to pass the password via @ARGV or %ENV so that you don't have to worry about it containing delimiters
[04:38:29] <gordonfish> Re: <Grinnz> base64 leaves trailing == which is what the last part was for
[04:38:39] <gordonfish> True, and a wise precaution, though I thought I'd point out that in this instance, since 15 (from `head -c15`) is a multiple of 3, no = signs would be present normally.
[04:39:02] <Grinnz> can you read like, three more lines before responding :P
[04:39:12] <gordonfish> d[oh
[04:39:19] <gordonfish> s/\Q[/'/
[04:40:44] <gordonfish> basheval: head -c16 /dev/urandom|base64 -w0|tr '+' '.' # Was this meant to be tr '=' '.' ?
[04:40:45] <perlbot> gordonfish: plxaCfYSuOzo5XPPsZVSzg==
[04:40:51] <Grinnz> no
[04:41:03] <Grinnz> crypt base64 uses . instead of +
[04:41:21] <gordonfish> Re: <Grinnz> base64 leaves trailing == which is what the last part was for
[04:41:32] <Grinnz> the last part is not present in that command
[04:41:34] <gordonfish> That's what made me thing that
[04:41:38] <gordonfish> Oh
[04:43:58] *** Quits: Su-Shee (~Susanne@p4ff4951b.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[04:45:28] *** Joins: Su-Shee (~Susanne@p4ff49551.dip0.t-ipconnect.de)
[04:48:44] *** Joins: tealecloud (~tealeclou@cpc1-farn9-2-0-cust495.6-2.cable.virginm.net)
[04:52:55] *** Joins: jrmu (jrmu@jrmu.lemon.ircnow.org)
[04:53:52] *** Quits: tealecloud (~tealeclou@cpc1-farn9-2-0-cust495.6-2.cable.virginm.net) (Ping timeout: 252 seconds)
[04:54:37] <jrmu> is expect.pm the right module for me? I need a way to interact with a terminal game (monopoly) from perl. I'm taking a look at Expect::Simple, it seems to require a prompt, like you might expect from an interactive shell, but the prompts for monop is not constant
[05:02:50] <mst> jrmu: Expect et. al. is great so long as that process is synchronous
[05:03:10] <mst> you'll want to keep that separate from the bot code
[05:03:10] *** Quits: Pali (~pali@user/pali) (Ping timeout: 240 seconds)
[05:03:42] <mst> otherwise you do the IO::Async wrap thing we also mentioned
[05:03:45] <jrmu> OK, thanks.
[05:04:08] <mst> I have code somewhere that handles it all async
[05:04:29] <mst> but basically that was IO::Async plus some swearing
[05:04:57] <mst> the details were specific to my handling cisco routers because it was part of the CCNA exam system
[05:06:44] *** Quits: fwg (~fwg@user/fwg) (Quit: .oO( zzZzZzz ...)
[05:15:46] *** Quits: zln (~zln@c80-217-230-193.bredband.tele2.se) (Ping timeout: 240 seconds)
[05:24:12] <Grinnz> an IO::Async based expect-like interface wrapper would be pretty neat
[05:24:40] <Grinnz> could use futures and everything
[05:28:19] <mst> I mostly built one
[05:28:47] <mst> remind me on another day to find it and figure out how to de-NDA the fucker
[05:33:20] *** Joins: Su-Shee_ (~Susanne@p4ffc7043.dip0.t-ipconnect.de)
[05:36:40] *** Quits: Su-Shee (~Susanne@p4ff49551.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[05:37:07] <madduck> when I do something like $text =~ /^${check}\s+(.+?)\s*$/ and $check contains a \ or | or other special char, the regexp fails to match. No surprise here. But I thought that I could use \Q$check\E to remove the special meanings. However, this does not seem to work.
[05:37:21] <madduck> Short of manually escaping all special characters prior, is there a better way to do this?
[05:37:29] *** Joins: Manderson_ (~manderson@45.40.80.170)
[05:40:04] *** Quits: Manderson (~manderson@45.40.80.170) (Ping timeout: 252 seconds)
[05:41:26] <mst> madduck: \Q works on any interpolation
[05:41:38] <madduck> including $ in this case? ;) 
[05:41:39] <mst> madduck: please be specific about the actual problem
[05:41:58] <mst> dude, please just be specific otherwise i can't tell
[05:42:04] <Grinnz> \Q escapes any special character within the interpolated text
[05:42:31] <Grinnz> it is the correct way to do what you want
[05:42:40] <mst> right
[05:42:57] <madduck> I need a regexp like /^${check}\s+(.+?)\s*$/, but it needs to work even if $check contains '\', which currently it does not. So I want/need $check to be substituted, but I want any characters therein not to be treated as regexp-special
[05:43:01] <mst> 'i did the right thing, and had a problem, now i'm trying to do the wrong thing, please help with that' isn't helpful
[05:43:02] <Grinnz> yes it does
[05:43:07] <mst> let us help with the right thing
[05:43:12] <mst> madduck: you're wrong
[05:43:18] <mst> madduck: show us a real problem
[05:43:20] <Grinnz> you'll have to show your input and what you're trying to match, because what you said doesn't work does work
[05:43:46] <mst> right
[05:43:50] <mst> this is just stupid now
[05:44:56] <Grinnz> sweval: my $check = '\a'; ['x\ab' =~ m/(\Q$check\E)/]
[05:44:57] <perlbot> Grinnz: ["\\a"]
[05:45:45] *** Sauvin is now known as Lemniscate
[05:45:58] <mst> madduck: so please stop making guesses and let us actually help
[05:46:05] <madduck> perl -e 'my $t="meta-\\        command something", $m="meta-\\"; $t =~ /^\Q${m}\E\s+(\S.+)\s*$/g; print "$1\n"'
[05:46:09] <madduck> of course that now works
[05:46:21] <madduck> but it doesn't work deep down in the code I am debugging
[05:46:36] <mst> madduck: at least now you know what the problem isn't
[05:46:38] <madduck> so uh, I was trying to do the right thing, and the problem is elsewhere.
[05:46:41] <mst> madduck: that's a start :D
[05:46:45] <madduck> it is.
[05:50:27] <madduck> oh. my. god. found the problem. the dude trying to fix this before me used /\S+/ earlier in a s/// when they meant /\s+/
[05:50:59] <Grinnz> hahaha
[05:52:40] <mst> madduck: ow
[05:57:02] *** Joins: G_SabinoMullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net)
[05:57:03] *** Joins: G_Sabino1ullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net)
[06:01:35] *** Joins: Linux77_ (~Linux7_7@186.233.182.237)
[06:03:10] *** Quits: Linux77 (~Linux7_7@186.233.182.237) (Ping timeout: 252 seconds)
[06:10:20] *** Joins: fstd_ (~fstd@xdsl-78-35-86-220.nc.de)
[06:10:52] *** Quits: fstd (~fstd@xdsl-84-44-235-10.nc.de) (Ping timeout: 252 seconds)
[06:11:03] *** Joins: Manderson (~manderson@45.40.80.170)
[06:12:53] *** Joins: tealecloud (~tealeclou@cpc1-farn9-2-0-cust495.6-2.cable.virginm.net)
[06:13:04] *** Quits: Manderson_ (~manderson@45.40.80.170) (Ping timeout: 252 seconds)
[06:18:01] *** Quits: tealecloud (~tealeclou@cpc1-farn9-2-0-cust495.6-2.cable.virginm.net) (Ping timeout: 252 seconds)
[06:19:33] *** Quits: Linux77_ (~Linux7_7@186.233.182.237) (Read error: Connection reset by peer)
[06:21:15] *** Joins: Linux77_ (~Linux7_7@186.233.182.237)
[06:22:16] *** Joins: Manderson_ (~manderson@45.40.80.170)
[06:24:42] *** Quits: Manderson (~manderson@45.40.80.170) (Ping timeout: 245 seconds)
[06:30:28] *** Joins: arthurpbs (~arthurpbs@168.121.98.22)
[06:31:01] *** Parts: jrmu (jrmu@jrmu.lemon.ircnow.org) ()
[06:38:55] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Ping timeout: 252 seconds)
[06:40:58] *** Joins: FinnElija (~finn_elij@user/finn-elija/x-0085643)
[06:44:57] *** Joins: jetchisel (jetchisel@user/jetchisel)
[06:45:02] *** Quits: txtsd (~txtsd@user/txtsd) (Ping timeout: 252 seconds)
[06:50:27] *** Quits: whynot (~whynot@88.155.30.23) (Quit: Lost terminal)
[06:56:50] * GumbyPAN CPAN Upload: Yancy-1.077 by PREACTION https://metacpan.org/release/PREACTION/Yancy-1.077
[07:02:55] *** Joins: Manderson (~manderson@45.40.80.170)
[07:05:02] *** Quits: Manderson_ (~manderson@45.40.80.170) (Ping timeout: 250 seconds)
[07:11:35] *** Joins: cooper (~mitchell@user/cooper)
[07:12:26] *** Quits: G_Sabino1ullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net) (Ping timeout: 256 seconds)
[07:13:00] *** Quits: G_SabinoMullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net) (Ping timeout: 256 seconds)
[07:32:39] *** Joins: dg (~dgl@dg.wtf)
[07:40:23] *** Quits: gast0n (~g4570n@user/gast0n) (Quit: Bye, see you soon! 👋)
[07:50:47] *** Joins: Martchus_ (~martchus@2a01:c23:c1d4:400:d250:99ff:fe49:3cce)
[07:50:58] *** Quits: Martchus (~martchus@2a01:c22:7211:5800:d250:99ff:fe49:3cce) (Ping timeout: 252 seconds)
[07:54:56] *** Joins: jrmu (jrmu@jrmu.lemon.ircnow.org)
[08:07:54] *** Joins: nehsou^ (~nehsou@68.101.54.227)
[08:14:18] *** Quits: Tangoose (~Arco@68.40.3.32) (Remote host closed the connection)
[08:16:19] *** Lemniscate is now known as Sauvin
[08:40:05] *** Quits: chiselfuse (~chiselfus@user/chiselfuse) (Remote host closed the connection)
[08:40:23] *** Joins: chiselfuse (~chiselfus@user/chiselfuse)
[08:40:24] *** Quits: aspic (~shifty~~~@ppp121-44-117-101.syd-gls-har-bras39.tpg.internode.on.net) (Ping timeout: 260 seconds)
[08:41:15] *** Joins: aspic (~shifty~~~@ppp121-44-125-21.syd-gls-har-bras39.tpg.internode.on.net)
[08:44:47] *** Quits: randir_ (~randir@95-25-59-33.broadband.corbina.ru) (Remote host closed the connection)
[08:44:57] *** Quits: APic (apic@apic.name) (Read error: Connection reset by peer)
[08:45:16] *** Joins: APic (apic@apic.name)
[08:48:37] *** Quits: slowButPresent (~slowButPr@user/slowbutpresent) (Quit: leaving)
[08:56:00] *** Joins: furrymcgee (~devuan@31.179.186.66)
[09:00:35] *** Joins: randir (~randir@93.159.239.42)
[09:03:05] *** Quits: nehsou^ (~nehsou@68.101.54.227) (Ping timeout: 252 seconds)
[09:04:11] *** Joins: Manderson_ (~manderson@45.40.80.170)
[09:05:32] *** Joins: nehsou^ (~nehsou@68.101.54.227)
[09:07:58] *** Quits: Manderson (~manderson@45.40.80.170) (Ping timeout: 252 seconds)
[09:08:31] *** Quits: djerius (~quassel@pool-108-20-43-199.bstnma.fios.verizon.net) (Ping timeout: 252 seconds)
[09:08:51] *** Quits: tejr (~tejr@user/tejr) (Ping timeout: 276 seconds)
[09:09:46] *** Joins: djerius (~quassel@pool-108-20-43-199.bstnma.fios.verizon.net)
[09:10:06] *** Joins: tejr (~tejr@user/tejr)
[09:11:29] *** Joins: Manderson (~manderson@45.40.80.170)
[09:14:01] *** Quits: Manderson_ (~manderson@45.40.80.170) (Ping timeout: 252 seconds)
[09:18:34] *** Joins: Manderson_ (~manderson@45.40.80.170)
[09:20:41] *** Quits: Manderson (~manderson@45.40.80.170) (Ping timeout: 252 seconds)
[09:21:15] *** Joins: pi1 (~pi@177.223.162.41)
[09:21:40] *** Quits: aquanight (~aquanight@174-126-159-166.cpe.sparklight.net) (Ping timeout: 240 seconds)
[09:23:27] *** Joins: Manderson (~manderson@45.40.80.170)
[09:23:28] <jrmu> I'm trying to use Expect.pm as a wrapper around the program monop: https://paste.ircnow.org/s1ybctq7s9qn0xqngpy7 However it's not quite behaving as I'd expect. If I type in the exact string "How many players?", it will match; but I want to match any sentence, so I gave it the regex '.*' . Unfortunately this seems to match everything, and a multiline message gets matched multiple times
[09:24:57] *** Quits: APic (apic@apic.name) (Read error: Connection reset by peer)
[09:25:57] *** Quits: Manderson_ (~manderson@45.40.80.170) (Ping timeout: 245 seconds)
[09:30:09] *** Joins: APic (apic@apic.name)
[09:33:40] *** Joins: mixfix41 (~homefame@user/mixfix41)
[09:34:05] <jrmu> I think one of the problems is that, what I type for standard input also gets echoed in standard output
[09:34:22] *** Quits: emanuele6 (~emanuele6@user/emanuele6) (Quit: WeeChat 3.2)
[09:34:44] *** Quits: rpath (~rpath@gateway/tor-sasl/rpath) (Remote host closed the connection)
[09:36:32] *** Joins: theorem (~beadon@c-73-234-190-246.hsd1.ct.comcast.net)
[09:40:15] *** Quits: pizdets (~pizdets@183.182.111.5) (Read error: Connection reset by peer)
[09:40:53] *** Joins: pizdets (~pizdets@183.182.111.5)
[09:42:24] *** Joins: shlomif (~shlomif@87.68.240.100.adsl.012.net.il)
[09:44:25] *** Quits: pizdets (~pizdets@183.182.111.5) (Read error: Connection reset by peer)
[09:44:47] *** Joins: pizdets_ (~pizdets@183.182.111.5)
[09:48:49] *** Quits: pizdets_ (~pizdets@183.182.111.5) (Read error: Connection reset by peer)
[09:49:03] *** Joins: pizdets (~pizdets@183.182.111.5)
[09:53:27] *** Quits: pizdets (~pizdets@183.182.111.5) (Ping timeout: 245 seconds)
[09:53:48] *** Joins: pizdets_ (~pizdets@183.182.111.5)
[09:54:40] <jrmu> ok fixed, no need to answer, here is the code if anyone wants to see https://paste.ircnow.org/s1i7sd6z0pajwlyfkhmf
[09:54:47] *** Quits: pizdets_ (~pizdets@183.182.111.5) (Read error: Connection reset by peer)
[09:55:06] <jrmu> I needed $Expect::Log_Stdout = 0; $Expect::Multiline_Matching = 0; $exp->raw_pty(1);
[09:55:13] *** Joins: pizdets (~pizdets@183.182.111.5)
[10:02:10] *** Quits: pizdets (~pizdets@183.182.111.5) (Ping timeout: 240 seconds)
[10:03:16] *** Joins: pizdets (~pizdets@183.182.111.5)
[10:04:05] *** Quits: theorem (~beadon@c-73-234-190-246.hsd1.ct.comcast.net) (Quit: leaving)
[10:05:09] *** Joins: Manderson_ (~manderson@45.40.80.170)
[10:07:32] *** Quits: Manderson (~manderson@45.40.80.170) (Ping timeout: 256 seconds)
[10:08:28] *** Joins: Manderson (~manderson@45.40.80.170)
[10:10:44] *** Quits: Manderson_ (~manderson@45.40.80.170) (Ping timeout: 252 seconds)
[10:10:44] *** Quits: pizdets (~pizdets@183.182.111.5) (Read error: Connection reset by peer)
[10:11:02] *** Joins: pizdets (~pizdets@183.182.111.5)
[10:17:53] *** Quits: pizdets (~pizdets@183.182.111.5) (Ping timeout: 252 seconds)
[10:18:08] *** Joins: pizdets_ (~pizdets@183.182.110.224)
[10:18:22] *** Joins: mattil (~mattil@helsinki.portalify.com)
[10:21:40] *** Joins: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl)
[10:24:05] *** Quits: mattil (~mattil@helsinki.portalify.com) (Remote host closed the connection)
[10:24:19] *** Quits: pizdets_ (~pizdets@183.182.110.224) (Read error: Connection reset by peer)
[10:24:28] *** Joins: pizdets (~pizdets@183.182.110.224)
[10:24:34] *** Quits: semeion (~semeion@user/semeion) (Quit: WeeChat 3.2)
[10:24:47] *** Joins: mattil (~mattil@helsinki.portalify.com)
[10:29:26] *** Joins: Manderson_ (~manderson@45.40.80.170)
[10:29:57] *** Quits: APic (apic@apic.name) (Read error: Connection reset by peer)
[10:30:07] *** Joins: APic (apic@apic.name)
[10:31:31] *** Quits: mattil (~mattil@helsinki.portalify.com) (Remote host closed the connection)
[10:31:34] *** Quits: Manderson (~manderson@45.40.80.170) (Ping timeout: 252 seconds)
[10:32:10] *** Joins: mattil (~mattil@airio.portalify.com)
[10:39:36] *** Joins: Manderson (~manderson@45.40.80.170)
[10:39:57] *** Quits: APic (apic@apic.name) (Read error: Connection reset by peer)
[10:40:08] *** Joins: APic (apic@apic.name)
[10:42:01] *** Quits: Manderson_ (~manderson@45.40.80.170) (Ping timeout: 252 seconds)
[10:42:13] * GumbyPAN CPAN Upload: Graph-Undirected-Hamiltonicity-0.012 by ASHWIN https://metacpan.org/release/ASHWIN/Graph-Undirected-Hamiltonicity-0.012
[10:45:46] *** Joins: scp1 (~magnus.wo@195-198-186-122.customer.telia.com)
[10:45:54] *** Quits: pizdets (~pizdets@183.182.110.224) (Read error: Connection reset by peer)
[10:46:06] *** Joins: pizdets (~pizdets@183.182.110.224)
[10:47:55] *** Quits: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl) (Read error: Connection reset by peer)
[10:48:30] *** Quits: pizdets (~pizdets@183.182.110.224) (Read error: Connection reset by peer)
[10:48:48] *** Joins: pizdets_ (~pizdets@183.182.110.224)
[10:50:16] *** Quits: scp1 (~magnus.wo@195-198-186-122.customer.telia.com) (Ping timeout: 252 seconds)
[10:55:46] *** Quits: pizdets_ (~pizdets@183.182.110.224) (Ping timeout: 252 seconds)
[10:57:47] *** Joins: pizdets (~pizdets@183.182.110.224)
[10:59:11] *** Joins: horsepatat (~horsepata@80.89.78.138)
[11:07:16] * GumbyPAN CPAN Upload: Test-Mojo-Role-Log-0.2.0 by OETIKER https://metacpan.org/release/OETIKER/Test-Mojo-Role-Log-0.2.0
[11:09:00] *** Joins: zln (~zln@c80-217-230-193.bredband.tele2.se)
[11:12:17] * GumbyPAN CPAN Upload: Text-ANSI-Fold-2.1101 by UTASHIRO https://metacpan.org/release/UTASHIRO/Text-ANSI-Fold-2.1101
[11:12:17] * GumbyPAN CPAN Upload: Test-Mojo-Role-Log-0.2.1 by OETIKER https://metacpan.org/release/OETIKER/Test-Mojo-Role-Log-0.2.1
[11:13:22] *** Joins: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl)
[11:14:51] *** Joins: tobybl (~tobybl@189.192.115.87.dyn.plus.net)
[11:19:47] *** Joins: scp1 (~magnus.wo@195-198-186-122.customer.telia.com)
[11:21:14] *** Joins: ufobat (~martin@dynamic-095-117-041-078.95.117.pool.telefonica.de)
[11:24:22] *** Quits: scp1 (~magnus.wo@195-198-186-122.customer.telia.com) (Ping timeout: 252 seconds)
[11:28:32] *** Joins: art1 (~romeyke@p200300ccdf044c005f268dcd371b8e68.dip0.t-ipconnect.de)
[11:29:48] *** Quits: aspic (~shifty~~~@ppp121-44-125-21.syd-gls-har-bras39.tpg.internode.on.net) (Ping timeout: 260 seconds)
[11:38:56] *** Joins: mattil_ (~mattil@helsinki.portalify.com)
[11:39:08] *** Quits: ufobat (~martin@dynamic-095-117-041-078.95.117.pool.telefonica.de) (Remote host closed the connection)
[11:42:12] *** Quits: mattil (~mattil@airio.portalify.com) (Ping timeout: 245 seconds)
[11:49:58] *** Joins: scp1 (~magnus.wo@195-198-186-122.customer.telia.com)
[11:50:25] *** Joins: ufobat (~martin@dynamic-095-117-041-078.95.117.pool.telefonica.de)
[11:52:12] <Lantizia> Morning :)
[11:52:14] <Lantizia> <Grinnz> and you'll still want to pass the password via @ARGV or %ENV so that you don't have to worry about it containing delimiters
[11:52:27] <Lantizia> is that not what this does?
[11:52:35] <Lantizia> perl -e 'print crypt q{bob}, q{$y$j9T$}. `head -c15 /dev/urandom|base64 -w0|tr "+" "."`'
[11:53:21] <Lantizia> no hmm I guess it doesn't... but it's never been an issue so far...
[11:53:31] *** Quits: ufobat (~martin@dynamic-095-117-041-078.95.117.pool.telefonica.de) (Client Quit)
[11:54:37] *** Quits: scp1 (~magnus.wo@195-198-186-122.customer.telia.com) (Ping timeout: 252 seconds)
[11:55:28] <Botje> what's the point of the tr at the end?
[11:55:33] *** Joins: Pali (~pali@user/pali)
[11:55:56] <Lantizia> Grinnz, I guess you mean something like this?  perl -e'print crypt q{$ARGV[0]}, q{$y$j9T$}. $ARGV[1]' bob $(head -c15 /dev/urandom|base64 -w0|tr + .)
[11:56:22] <Lantizia> Botje, it's because the chars need to be a-Z0-9/. and base64 does +'s rather than .'s
[11:58:11] <Botje> might as well use sha1sum instead
[12:03:39] <Lantizia> try and say that after reading the chat backlog from last night :)  you'll find yescrypt is fussy!
[12:04:40] *** Quits: pizdets (~pizdets@183.182.110.224) (Ping timeout: 240 seconds)
[12:13:58] *** Joins: scp1 (~magnus.wo@195-198-186-122.customer.telia.com)
[12:15:30] *** Quits: mattil_ (~mattil@helsinki.portalify.com) (Remote host closed the connection)
[12:16:02] *** Joins: mattil (~mattil@airio.portalify.com)
[12:20:28] *** Quits: scp1 (~magnus.wo@195-198-186-122.customer.telia.com) (Ping timeout: 252 seconds)
[12:21:28] *** diskin is now known as Guest229
[12:21:28] *** Joins: diskin_ (~diskin@ec2-18-158-74-148.eu-central-1.compute.amazonaws.com)
[12:21:28] *** Quits: Guest229 (~diskin@87.117.52.222) (Killed (mercury.libera.chat (Nickname regained by services)))
[12:21:28] *** diskin_ is now known as diskin
[12:27:59] *** Joins: scp1 (~magnus.wo@195-198-186-122.customer.telia.com)
[12:30:54] *** Quits: horsepatat (~horsepata@80.89.78.138) (Ping timeout: 250 seconds)
[12:32:52] *** Joins: horsepatat (~horsepata@212.3.199.19)
[12:36:45] <zln> taking a python course, it seem to be a fork of Perl? 
[12:37:50] <shlomif> zln: hi
[12:38:51] <shlomif> zln: Python and perl influenced each other, but they are different languages
[12:40:40] <zln> ah, so there is influences from python to perl as well?
[12:40:44] <LeoNerd> Did they? I can't think of much influence in either direction
[12:40:57] <zln> hi shlomif, long time no see :)
[12:41:06] <zln> hi LeoNerd 
[12:41:25] <LeoNerd> Offhand I can't think of *any* Perl feature to have come from Python. The two are about as different as I can think of
[12:41:54] <shlomif> zln: hi
[12:42:12] *** Quits: scp1 (~magnus.wo@195-198-186-122.customer.telia.com) (Ping timeout: 245 seconds)
[12:42:32] <sjn> LeoNerd: IIRC, bless() was originally stolen from python
[12:42:35] <zln> well, I can see a lot of things in python that is present in perl. But since I don't know how perl was in the history and I think perl were there before, I thought python got many of perl stuff
[12:42:56] <shlomif> LeoNerd: haskell and C are more different
[12:43:18] <zln> like giving self as argument to objekt methods
[12:43:31] <LeoNerd> zln: They're both programming languages, sure. I think anything that they might have in common is more to do with "well, preettymuch any language has those"
[12:43:44] <zln> but then maybe there were something before both languages got influenced by
[12:43:48] <LeoNerd> the concepts of variables, functions,... the names of controlflow structures like `if` and `while`
[12:44:39] <zln> LeoNerd: can you use slices in c? 
[12:44:59] *** Joins: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net)
[12:45:02] <LeoNerd> No, C doesn't have the concept of list-valued expressions
[12:45:08] <zln> maybe I am missing a broad knowledge of other languages
[12:45:53] <LeoNerd> Mmm. perhaps. ;)
[12:46:02] <shlomif> LeoNerd: and perl's namespaces' behaviour is based on python's: https://www.perl.com/pub/2007/12/06/soto-11.html/
[12:46:02] <Paperbot_> Link title(s): [ Programming is Hard, Let's Go Scripting... ]
[12:46:11] <LeoNerd> Have a look at one of the pure-functionals (maybe ML or Haskell), and one of the Lisps (I quite like Scheme). You'll find many similar things there too
[12:47:13] <zln> how ever, it's nice to recognize things in python that I'm used to in Perl
[12:47:28] *** Joins: pizdets (~pizdets@183.182.110.224)
[12:53:08] <LeoNerd> Again I suspect that's more because they're both programming languages, rather than that they are particularly similar within such
[12:53:56] <zln> yeah you're probably right. But I don't refer to ifs or whiles. More to map, slices, filter (grep) etc
[12:54:01] <LeoNerd> Though now I think about it, I guess I could imagine an even greater difference between Perl and Python, if one of them didn't use infix operators...
[12:54:26] <LeoNerd> Wellsure.. the moment you have list-like values in your language, you're going to want things like map and filter
[12:54:30] <LeoNerd> Scheme has those too
[12:54:34] <LeoNerd> They're called.. er... map and filter. ;)
[12:55:10] <LeoNerd> (filter even? '(1 2 3 4 5 6 7 8 9 10))
[12:56:17] <zln> :) 
[12:56:23] <zln> well, it's like religions
[12:56:45] <LeoNerd> Thousand-yearold supersitions that people use as modern-daya justification to kill each other over?
[12:56:58] *** Quits: pizdets (~pizdets@183.182.110.224) (Ping timeout: 256 seconds)
[12:57:57] <zln> yes those. It's like how each concequitive religion used the logic from the previous ones and interpreted it 
[12:58:29] *** Joins: tealecloud (~tealeclou@cpc1-farn9-2-0-cust495.6-2.cable.virginm.net)
[13:01:29] <zln> or rather... applied it to the belivers culture etc.. 
[13:02:28] *** Joins: pizdets (~pizdets@183.182.110.224)
[13:03:24] *** Quits: pizdets (~pizdets@183.182.110.224) (Read error: Connection reset by peer)
[13:03:45] *** Joins: pizdets (~pizdets@183.182.110.224)
[13:05:59] *** Joins: TweetiePooh (~richard@cpc75386-sotn16-2-0-cust456.15-1.cable.virginm.net)
[13:08:39] <Botje> zln: Python's map is a very different beast from Perl's though.
[13:08:59] <Botje> >>> map(lambda x: x+1, range(10))
[13:08:59] <Botje> <map object at 0x1024d6400>
[13:09:11] <Botje> it doesn't *do* anything until you consume the iterator.
[13:09:42] *** Quits: nehsou^ (~nehsou@68.101.54.227) (Remote host closed the connection)
[13:12:50] <LeoNerd> Ahyes,.. another useful contrast of eager vs. lazy languages
[13:13:47] *** Joins: zer0bitz_ (~zer0bitz@dsl-hkibng31-58c384-213.dhcp.inet.fi)
[13:13:53] <Botje> I wouldn't call python a lazy language; they just standardized their stdlib on iterators/generators instead of lists
[13:16:50] *** Quits: zer0bitz (~zer0bitz@dsl-hkibng31-58c384-213.dhcp.inet.fi) (Ping timeout: 250 seconds)
[13:20:09] *** Linux77_ is now known as Linux77
[13:23:42] <Linux77> Hello cool friend's it's a pleasure for me stay here and sometimes and maybe learn something! grateful for the oportunity!
[13:26:50] <shlomif> Linux77: hi
[13:29:34] <shlomif> LeoNerd: strangely enough - some haskell fans told me perl, python, ruby, lua [and even C!] were essentially the same language... :S
[13:29:50] *** Quits: pizdets (~pizdets@183.182.110.224) (Ping timeout: 250 seconds)
[13:30:01] *** Quits: entonian[m] (~entonianm@2001:470:69fc:105::7ac0) (Quit: You have been kicked for being idle)
[13:30:14] <LeoNerd> Hah! From the perspective of Haskell, they do all look pretty similar
[13:30:27] *** Joins: entonian[m] (~entonianm@2001:470:69fc:105::7ac0)
[13:30:47] <Linux77> a hug cool friends!
[13:31:03] <LeoNerd> As compared Haskell, all of those are eager vs Haskell's lazy, mutable as compared Haskell's strict immutability, and much less extensible in terms of user-supplied grammar
[13:31:11] <LeoNerd> *even* perl ;)
[13:31:24] <LeoNerd> (though I'm hoping to get PL_infix_plugin in fairly soon)
[13:33:24] <shlomif> LeoNerd: thanks
[13:33:33] *** Joins: choroba (~E.Choroba@88.146.255.106)
[13:35:05] *** Joins: fwg (~fwg@user/fwg)
[13:37:03] *** Joins: EvanCarroll (~ecarroll@212.174.109.83)
[13:43:59] *** Joins: scp1 (~magnus.wo@195-198-186-122.customer.telia.com)
[13:50:11] *** Quits: scp1 (~magnus.wo@195-198-186-122.customer.telia.com) (Ping timeout: 252 seconds)
[13:54:59] *** Joins: aspic (~shifty~~~@ppp121-44-125-21.syd-gls-har-bras39.tpg.internode.on.net)
[13:57:10] *** Quits: CrazyEddy (crazyed@2603:300a:1d10:c000:de4a:3eff:fe88:cc5f) (Ping timeout: 240 seconds)
[13:58:08] *** Quits: pi1 (~pi@177.223.162.41) (Quit: WeeChat 2.8)
[14:02:48] *** Joins: pizdets (~pizdets@183.182.110.224)
[14:04:58] *** Quits: ghenry (~ghenry@ghenry.plus.com) (Ping timeout: 256 seconds)
[14:11:36] * GumbyPAN CPAN Upload: Net-SNMP-Mixin-ArubaCX-VlanStatic-0.02 by GAISSMAI https://metacpan.org/release/GAISSMAI/Net-SNMP-Mixin-ArubaCX-VlanStatic-0.02
[14:12:10] *** Quits: diskin (~diskin@ec2-18-158-74-148.eu-central-1.compute.amazonaws.com) (Ping timeout: 240 seconds)
[14:18:08] *** Joins: ghenry (~ghenry@ghenry.plus.com)
[14:30:16] *** Quits: csrf (~csrf@user/csrf) (Quit: ZNC 1.7.2+deb3 - https://znc.in)
[14:31:01] *** Joins: csrf (~csrf@user/csrf)
[14:34:12] *** Joins: aquanight (~aquanight@174-126-159-166.cpe.sparklight.net)
[14:56:45] <andrzejku> Hi
[14:56:57] <andrzejku> I got a question, what happen to the Perl in the next decade?
[14:57:22] <tm604> andrzejku: awesome things!
[14:57:49] <andrzejku> tm604, you think that perl will survive?
[14:59:02] <Botje> It's not like someone is going to retroactively remove all copies of /usr/bin/perl, so why worry about it?\
[15:03:31] *** Parts: jrmu (jrmu@jrmu.lemon.ircnow.org) ()
[15:06:44] *** Joins: ZZzz (~ZZzz@77.137.108.7)
[15:08:10] <ZZzz> Hello, does anybody has an idea?  Thank you!    https://stackoverflow.com/questions/69073101/is-it-possible-to-match-a-paragraph-followed-by-two-empty-lines-in-a-new-line-ba
[15:08:10] <Paperbot_> Link title(s): [ syntax highlighting - Is it possible to match a paragraph followed by two empty lines in a new li... ]
[15:10:27] <shlomif> ZZzz: hi
[15:10:54] <ZZzz> shulem
[15:12:21] <shlomif> perlbot: pcre
[15:12:21] <perlbot> shlomif: PCRE (the so-called "Perl-compatible regular expression" library) is not Perl.  It lacks several features of Perl regexes.  Don't bother asking for help with a PCRE pattern in a Perl channel as the answers will not be relevant.  Try #regex, or the channel for your language.  See also http://en.wikipedia.org/wiki/PCRE#Differences_from_Perl and LPBD.
[15:12:39] *** Quits: ZZzz (~ZZzz@77.137.108.7) (Remote host closed the connection)
[15:13:37] *** Joins: diskin (~diskin@ec2-18-158-74-148.eu-central-1.compute.amazonaws.com)
[15:14:37] *** Joins: Manderson_ (~manderson@45.40.80.170)
[15:15:01] *** Quits: APic (apic@apic.name) (Read error: Connection reset by peer)
[15:15:13] *** Joins: APic (apic@apic.name)
[15:15:17] <shlomif> perlbot: sweval: my $t="foo\nbar\n\n\n"; [($t=~ /^(bar\n{3})/ms ? "match $1": "no match"]
[15:15:18] <perlbot> shlomif: ERROR: syntax error at (IRC) line 1, near ""no match"]" 
[15:15:33] <shlomif> perlbot: sweval: my $t="foo\nbar\n\n\n"; [($t=~ /^(bar\n{3})/ms) ? "match $1": "no match"]
[15:15:35] <perlbot> shlomif: ["match bar\n\n\n"]
[15:16:54] *** Joins: KnoP (~KnoP@p57b21ac7.dip0.t-ipconnect.de)
[15:16:56] *** Quits: Manderson (~manderson@45.40.80.170) (Ping timeout: 256 seconds)
[15:18:21] *** Joins: ZZzz (~ZZzz@77.137.108.99)
[15:20:21] <ZZzz> sorry, got disconnected...
[15:20:33] <shlomif> perlbot: sweval: my $t="foo\nbar\n\n\n"; [($t=~ /^(bar\n{3})/ms) ? "match $1": "no match"]
[15:20:35] <perlbot> shlomif: ["match bar\n\n\n"]
[15:20:38] <shlomif> perlbot: pcre
[15:20:38] <perlbot> shlomif: PCRE (the so-called "Perl-compatible regular expression" library) is not Perl.  It lacks several features of Perl regexes.  Don't bother asking for help with a PCRE pattern in a Perl channel as the answers will not be relevant.  Try #regex, or the channel for your language.  See also http://en.wikipedia.org/wiki/PCRE#Differences_from_Perl and LPBD.
[15:21:15] <Altreus> hlo
[15:21:29] *** Joins: Manderson (~manderson@45.40.80.170)
[15:23:22] *** Quits: Manderson_ (~manderson@45.40.80.170) (Ping timeout: 240 seconds)
[15:30:46] *** Joins: Manderson_ (~manderson@45.40.80.170)
[15:33:02] *** Quits: Manderson (~manderson@45.40.80.170) (Ping timeout: 252 seconds)
[15:33:40] *** Joins: Manderson (~manderson@45.40.80.170)
[15:34:02] <art1> Hi, In our production environment (and only there) we sporadically get these messages from the Parallel::Iterator module that I don't understand (or whose cause I don't understand):
[15:34:02] <art1> "Magic number checking on storable file failed at /usr/lib/x86_64-linux-gnu/perl/5.28/Storable.pm line 434, at /usr/share/perl5/Parallel/Iterator.pm line 667".
[15:34:02] <art1>  
[15:34:02] <art1> Does anyone have a decisive tip for me on how to narrow this down? The on_error() is not executed. The location in Parallel::Iterator is this one: https://metacpan.org/dist/Parallel-Iterator/source/lib/Parallel/Iterator.pm#L667
[15:34:03] <Paperbot_> Link title(s): [ lib/Parallel/Iterator.pm - metacpan.org ]
[15:34:27] <art1> Any hints?
[15:35:10] *** Quits: Manderson_ (~manderson@45.40.80.170) (Ping timeout: 240 seconds)
[15:38:22] <Botje> did you inspect the broken files?
[15:38:29] <Botje> (if possible)
[15:38:32] *** Joins: Pixi_ (~Pixi@user/pixi)
[15:41:46] * GumbyPAN CPAN Upload: Net-SIP-0.832 by SULLR https://metacpan.org/release/SULLR/Net-SIP-0.832
[15:41:52] *** Quits: Pixi (~Pixi@user/pixi) (Ping timeout: 256 seconds)
[15:45:12] <art1> Botje: There is no file used, IMHO is Storable only used via pipe
[15:45:30] <Botje> fine, the broken files then
[15:45:33] <Botje> err
[15:45:35] <Botje> memory buffers
[15:45:50] <art1> Botje: Could you explain
[15:46:10] *** Quits: EvanCarroll (~ecarroll@212.174.109.83) (Ping timeout: 252 seconds)
[15:47:26] <Botje> you could temporarily modify the _get_obj method to catch the error, then put a breakpoint in the error handler
[15:48:25] <Botje> but that still needs lots of work :/
[15:49:55] <Botje> less invasive option: run your program under strace or tcpdump to get at the Storable values flying around
[15:50:36] *** Joins: mattil_ (~mattil@helsinki.portalify.com)
[15:50:48] <art1> Botje: thx
[15:53:22] *** Quits: mattil (~mattil@airio.portalify.com) (Ping timeout: 240 seconds)
[15:56:47] * GumbyPAN CPAN Upload: JSON-Parser-Regexp-0.18 by RAJ https://metacpan.org/release/RAJ/JSON-Parser-Regexp-0.18
[15:57:59] *** Joins: scp1 (~magnus.wo@195-198-186-122.customer.telia.com)
[16:02:46] *** Quits: mattil_ (~mattil@helsinki.portalify.com) (Remote host closed the connection)
[16:03:58] *** Joins: mattil (~mattil@airio.portalify.com)
[16:04:23] *** Quits: scp1 (~magnus.wo@195-198-186-122.customer.telia.com) (Ping timeout: 252 seconds)
[16:06:48] * GumbyPAN CPAN Upload: Module-ExtractUse-0.344 by DOMM https://metacpan.org/release/DOMM/Module-ExtractUse-0.344
[16:20:44] *** Quits: furrymcgee (~devuan@31.179.186.66) (Quit: leaving)
[16:28:22] *** Quits: Su-Shee_ (~Susanne@p4ffc7043.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[16:30:14] *** Joins: Su-Shee (~Susanne@p4ff4905a.dip0.t-ipconnect.de)
[16:35:03] *** Quits: ZZzz (~ZZzz@77.137.108.99) (Quit: ZZzz)
[16:37:24] *** Quits: The_Blode (~Blode@user/the-blode/x-7164444) (Ping timeout: 256 seconds)
[16:37:35] *** Joins: The_Blode_ (~Blode@user/the-blode/x-7164444)
[16:51:26] <shlomif> art1: note that i wrote https://metacpan.org/pod/Parallel::Map::Segmented based on IO::Async (wrt https://metacpan.org/pod/Parallel::Iterator )
[16:51:27] <Paperbot_> Link title(s): [ Parallel::Map::Segmented - use Parallel::Map on batches / segments of items. - metacpan.org ] [ Parallel::Iterator - Simple parallel execution - metacpan.org ]
[16:59:24] *** Quits: Norkle (~norkle@admin.nasa-g0v.com) (Quit: Lost terminal)
[17:03:15] *** Joins: icedjava37 (~icedjava3@ppp046177149155.access.hol.gr)
[17:06:03] *** Joins: mattil_ (~mattil@helsinki.portalify.com)
[17:09:10] *** Quits: mattil (~mattil@airio.portalify.com) (Ping timeout: 240 seconds)
[17:11:55] * GumbyPAN CPAN Upload: DateTime-Calendar-Christian-0.11 by WYANT https://metacpan.org/release/WYANT/DateTime-Calendar-Christian-0.11
[17:12:02] *** Quits: diskin (~diskin@ec2-18-158-74-148.eu-central-1.compute.amazonaws.com) (Ping timeout: 252 seconds)
[17:13:50] *** Quits: fwg (~fwg@user/fwg) (Quit: .oO( zzZzZzz ...)
[17:17:51] *** Joins: randir_ (~randir@95-25-59-33.broadband.corbina.ru)
[17:20:46] *** Quits: randir (~randir@93.159.239.42) (Ping timeout: 252 seconds)
[17:21:47] *** Joins: badmap (~badmap@user/badmap)
[17:27:23] *** Joins: dsrt^ (~dsrt@68.101.54.227)
[17:33:03] *** Joins: fwg (~fwg@user/fwg)
[17:37:12] *** Quits: horsepatat (~horsepata@212.3.199.19) (Ping timeout: 245 seconds)
[17:38:36] *** Quits: randir_ (~randir@95-25-59-33.broadband.corbina.ru) (Remote host closed the connection)
[17:41:59] *** Joins: scp1 (~magnus.wo@195-198-186-122.customer.telia.com)
[17:43:09] *** Joins: G_Sabino1ullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net)
[17:43:09] *** Joins: G_SabinoMullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net)
[17:48:02] *** Quits: scp1 (~magnus.wo@195-198-186-122.customer.telia.com) (Ping timeout: 245 seconds)
[17:48:08] *** Quits: badmap (~badmap@user/badmap) (Quit: leaving)
[17:51:30] *** Quits: gko (~user@user/gko) (Remote host closed the connection)
[17:58:03] *** Joins: Manderson_ (~manderson@45.40.80.170)
[18:00:31] *** Joins: randir (~randir@95-25-59-33.broadband.corbina.ru)
[18:01:10] *** Quits: Manderson (~manderson@45.40.80.170) (Ping timeout: 240 seconds)
[18:01:46] *** Joins: tobybl_ (~tobybl@189.192.115.87.dyn.plus.net)
[18:04:06] *** Quits: tobybl (~tobybl@189.192.115.87.dyn.plus.net) (Ping timeout: 256 seconds)
[18:05:55] *** Quits: fstd_ (~fstd@xdsl-78-35-86-220.nc.de) (Remote host closed the connection)
[18:10:30] *** Joins: gko (~user@user/gko)
[18:11:19] *** Quits: mattil_ (~mattil@helsinki.portalify.com) (Remote host closed the connection)
[18:11:51] *** Joins: mattil (~mattil@airio.portalify.com)
[18:12:27] *** Quits: pizdets (~pizdets@183.182.110.224) (Quit: pizdets)
[18:13:10] *** Joins: pizdets (~pizdets@183.182.110.224)
[18:13:10] *** Joins: furrymcgee (~devuan@31.179.186.66)
[18:13:57] *** Quits: hudo_ (~hhudo_@37.24.178.194) (Quit: Leaving)
[18:13:59] *** Joins: scp1 (~magnus.wo@195-198-186-122.customer.telia.com)
[18:15:35] *** Quits: mattil (~mattil@airio.portalify.com) (Remote host closed the connection)
[18:18:46] *** Joins: jdltouraine_ (~jdltourai@2a02:a03f:847b:b800:b5f8:2ce2:b911:512e)
[18:20:14] *** Quits: scp1 (~magnus.wo@195-198-186-122.customer.telia.com) (Ping timeout: 252 seconds)
[18:22:17] *** Joins: mov_eax (~mov_eax@user/mov-eax/x-5035058)
[18:28:16] *** Quits: jdltouraine_ (~jdltourai@2a02:a03f:847b:b800:b5f8:2ce2:b911:512e) (Remote host closed the connection)
[18:28:39] *** Joins: jdltouraine_ (~jdltourai@2a02:a03f:847b:b800:b5f8:2ce2:b911:512e)
[18:32:52] *** Joins: anthk_ (~anthk_@92.176.105.30)
[18:33:02] *** Quits: jdltouraine_ (~jdltourai@2a02:a03f:847b:b800:b5f8:2ce2:b911:512e) (Ping timeout: 245 seconds)
[18:35:27] *** Joins: CrazyEddy (crazyed@2603:300a:1d10:c000:de4a:3eff:fe88:cc5f)
[18:36:12] *** Quits: G_Sabino1ullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net) (Ping timeout: 250 seconds)
[18:36:12] *** Quits: G_SabinoMullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net) (Ping timeout: 250 seconds)
[18:37:04] * GumbyPAN CPAN Upload: Mojo-Leds-1.08 by EBRUNI https://metacpan.org/release/EBRUNI/Mojo-Leds-1.08
[18:38:37] *** Joins: bit4bit (~bit4bit@190.128.123.78)
[18:42:51] *** Joins: magla (~gelignite@55d47635.access.ecotel.net)
[18:44:26] *** Joins: Manderson (~manderson@45.40.80.170)
[18:46:03] <art1> Botje: It looks like we cannot trigger the problem under "strace -vfo x $PROG". Any other ideas?
[18:46:34] *** Quits: Manderson_ (~manderson@45.40.80.170) (Ping timeout: 252 seconds)
[18:46:43] *** Joins: Manderson_ (~manderson@45.40.80.170)
[18:48:46] *** Quits: Manderson (~manderson@45.40.80.170) (Ping timeout: 250 seconds)
[18:48:49] <art1> shlomif: Thanks for the tip, but I'd like to understand the problem first before I rewrite all the code only to fall into the same trap. So, would you have *helpful* ideas about the error and *why* it might occur? Reminder: "Magic number checking on storable file failed at /usr/lib/x86_64-linux-gnu/perl/5.28/Storable.pm line 434, at /usr/share/perl5/Parallel/Iterator.pm line 667".
[18:49:46] <art1> The question is, why $fd ist not accessible…
[18:50:58] *** Quits: bit4bit (~bit4bit@190.128.123.78) (Ping timeout: 252 seconds)
[18:51:19] *** Joins: G_SabinoMullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net)
[18:53:12] *** Quits: icedjava37 (~icedjava3@ppp046177149155.access.hol.gr) (Quit: leaving)
[18:53:46] *** Quits: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl) (Read error: Connection reset by peer)
[18:56:21] *** Joins: G_Sabino1ullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net)
[18:57:59] *** Joins: scp1 (~magnus.wo@195-198-186-122.customer.telia.com)
[18:58:14] <Botje> art1: how did you determine that "$fd is not acessible", whatever that means?
[19:01:32] *** Joins: jdltouraine_ (~jdltourai@2a02:a03f:847b:b800:b5f8:2ce2:b911:512e)
[19:07:23] <shlomif> art1: can you pastesite /usr/lib/x86_64-linux-gnu/perl/5.28/Storable.pm please?
[19:08:02] <zln> I'm trying to wrap my head around the logic: if n & x-1 == 0; n is multiple of x. Anyone who knows a good guide for dummies for logic as such. I know the bits is masked but don't know how the result is interpreted
[19:08:16] <zln> mst, you have a grade in math yes?
[19:08:19] <zln> :p
[19:09:47] <art1> Botje: The problem is https://metacpan.org/dist/Parallel-Iterator/source/lib/Parallel/Iterator.pm#L667 and calls https://metacpan.org/dist/Storable/source/Storable.pm#L443. 
[19:09:48] <Paperbot_> Link title(s): [ lib/Parallel/Iterator.pm - metacpan.org ] [ Storable.pm - metacpan.org ]
[19:10:14] <art1> shlomif: moment…
[19:12:58] <shlomif> zln: n is 2 ; x-1 == 1024
[19:13:33] <art1> shlomif: https://l.perl.bot/p/kmwlca
[19:13:34] <Paperbot_> Link title(s): [ Perlbot Pastebin ]
[19:13:50] <xenu> eval: 100 & 5-1 == 0
[19:13:52] <perlbot> xenu: 0
[19:13:58] <art1> The module is from debian buster
[19:13:58] *** Joins: The_Blode (~Blode@user/the-blode/x-7164444)
[19:13:59] <xenu> i'm pretty sure 100 is a multiple of 5
[19:14:22] *** Quits: scp1 (~magnus.wo@195-198-186-122.customer.telia.com) (Ping timeout: 256 seconds)
[19:14:40] *** Quits: The_Blode_ (~Blode@user/the-blode/x-7164444) (Ping timeout: 240 seconds)
[19:15:57] *** Quits: G_SabinoMullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net) (Ping timeout: 245 seconds)
[19:16:29] <shlomif> art1: thanks, line434 is "    eval { $self = pretrieve($file, $flags) };	# Call C routine"
[19:16:40] *** Quits: G_Sabino1ullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net) (Ping timeout: 240 seconds)
[19:17:13] <xenu> oops, there's an operator priority problem
[19:17:16] <xenu> eval: (100 & 5-1) == 0
[19:17:18] <perlbot> xenu: No output.
[19:17:23] <xenu> but it doesn't change the result
[19:18:22] <Botje> art1: that just means that reading from $fd1 does not result in a valid Storable object
[19:18:31] <zln> no, still not getting >D Think I saw something in higher order perl about this object. Have to check. 
[19:18:59] <art1> Botje: Jep.
[19:19:04] <art1> But why?
[19:19:16] <art1> In the kernel logs there are no hints
[19:20:24] <Botje> tcpdump time.
[19:21:09] <Altreus> eval: 100 & 4
[19:21:11] <perlbot> Altreus: 4
[19:21:30] <Altreus> zln: it could be that the reverse is not true
[19:22:04] <zln> hmm
[19:22:42] <Altreus> it could be that there is no 0 where n = kx, but many n = kx where that is not 0
[19:23:01] <Altreus> for integers
[19:24:22] <zln> I think I need some elementary education in the subject to grasp it 
[19:24:29] <Altreus> er, where n != kx, not =
[19:24:45] <Altreus> the first time... ugh you know what I mean :P
[19:25:01] <zln> lol :) 
[19:27:09] <Altreus> I'm trying to find a single example where n & x-1 is 0
[19:27:20] *** Joins: gast0n (~g4570n@user/gast0n)
[19:27:35] <Altreus> (~n)+1 = x
[19:27:54] <Altreus> eval: ~5
[19:27:55] <perlbot> Altreus: 18446744073709551610
[19:29:17] *** Quits: mov_eax (~mov_eax@user/mov-eax/x-5035058) (Ping timeout: 245 seconds)
[19:29:24] <Altreus> sweval: sub ismul($n, $x) { ($n & $x-1) == 0 } ismul(2,6)
[19:29:25] <perlbot> Altreus: 1
[19:29:32] <Altreus> 2 is not a multiple of 6
[19:29:51] <Altreus> zln: turns out the simple answer is the right one; it doesn't work :P
[19:30:35] <zln> eval lol
[19:32:04] <Botje> zln: your trick only works when x is a power of 2.
[19:32:10] * GumbyPAN CPAN Upload: Function-Return-0.14 by KFLY https://metacpan.org/release/KFLY/Function-Return-0.14
[19:32:26] <Botje> zln: since those numbers have 'x' amount of zeroes at the end.
[19:32:51] <zln> sweval: sub ismul($x, $y) {if ($y & (x-1) == 0); print "$y is multiple of $x"} ismul(9, 3)
[19:32:53] <perlbot> zln: Possible precedence problem on bitwise & operator at (IRC) line 1. ERROR: Bareword "x" not allowed while "strict subs" in use at (IRC) line 1. syntax error at (IRC) line 1, near ");" 
[19:33:18] <zln> sweval: sub ismul($x, $y) {if (($y & (x-1)) == 0); print "$y is multiple of $x"} ismul(9, 3)
[19:33:19] <perlbot> zln: ERROR: Bareword "x" not allowed while "strict subs" in use at (IRC) line 1. syntax error at (IRC) line 1, near ");" 
[19:33:21] <zln> lol
[19:33:43] <zln> long time no perl
[19:33:58] <zln> sweval: sub ismul($x, $y) {if (($y & ($x-1)) == 0); print "$y is multiple of $x"} ismul(9, 3)
[19:33:59] <perlbot> zln: ERROR: syntax error at (IRC) line 1, near ");" 
[19:34:01] <zln> comon
[19:34:17] <Altreus> that's bash
[19:34:28] <Altreus> perl uses {}
[19:34:30] <zln> ah
[19:34:49] <zln> missed that
[19:35:48] <zln> wrong order of args too :)
[19:37:35] *** Joins: thrig (~thrig@65.113.153.50)
[19:49:54] *** Quits: magla (~gelignite@55d47635.access.ecotel.net) (Quit: Stay safe!)
[19:53:28] <LeoNerd> ($x % $y) == 0  is the traditional test
[19:53:33] <LeoNerd> As used by Syntax::Operator::Divides
[19:55:47] <Botje> but that uses boring math. we want to use cool bit operations!
[19:56:34] *** Quits: chiselfuse (~chiselfus@user/chiselfuse) (Remote host closed the connection)
[19:58:24] *** Joins: chiselfuse (~chiselfus@user/chiselfuse)
[20:01:35] *** Joins: G_SabinoMullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net)
[20:01:36] *** Joins: G_Sabino1ullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net)
[20:02:21] <zln> it works in python >/
[20:02:55] <thrig> years ago it was just another snake cult. now, snakes, everywhere
[20:04:35] <ology> https://www.youtube.com/watch?v=amYzBQMT4VI
[20:04:35] <Paperbot_> YouTube video linked by ology: Snakes on a Plane- THE line - published by alkatmsu
[20:06:39] <zln> I have to learn how to move in mode of locomotion
[20:06:45] *** Quits: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net) (Quit: Textual IRC Client: www.textualapp.com)
[20:07:58] *** Joins: YaoNai (~YaoNai@user/yaonai)
[20:09:14] *** Quits: eldritch_ (~eldritch@user/eldritch/x-9272577) (Quit: bye)
[20:09:39] *** Joins: eldritch_ (~eldritch@user/eldritch/x-9272577)
[20:12:00] *** Joins: scp1 (~magnus.wo@195-198-186-122.customer.telia.com)
[20:13:28] <zln> Botje: https://www.online-python.com/ST1rRW75mO
[20:13:29] <Paperbot_> Link title(s): [ Online Python - IDE, Editor, Compiler, Interpreter ]
[20:14:19] <Botje> "100 is NOT a multiple of 5" ? TIL.
[20:14:28] <zln> yeah, why? :D
[20:14:34] <zln> it worked until 100
[20:14:36] <zln> :D
[20:15:00] <Botje> i'm not going to explain coincidence.
[20:15:01] <zln> maybe 100 is too big in binary on that site :p
[20:15:08] <Botje> ... no.
[20:15:20] <thrig> doesn't work in my favorite browser. but that's probably a good thing, given how unreadable I find Python to be
[20:15:25] *** Parts: art1 (~romeyke@p200300ccdf044c005f268dcd371b8e68.dip0.t-ipconnect.de) ()
[20:15:36] <zln> alright
[20:15:46] <zln> thrig: :D
[20:16:20] <zln> thrig: it's poisonous, keep away
[20:18:10] *** Quits: scp1 (~magnus.wo@195-198-186-122.customer.telia.com) (Ping timeout: 240 seconds)
[20:20:32] <Altreus> 2 is multiple of 6 apparently
[20:20:49] <LeoNerd> 2 divides 6, certainly
[20:23:45] *** Quits: YaoNai (~YaoNai@user/yaonai) (Quit: leaving)
[20:27:53] <fizzie> 13 is a multiple of 3 too, by that logic.
[20:27:58] <fizzie> Is that "too big" too?
[20:28:14] <thrig> maybe they use toki pona numbers
[20:28:59] <fizzie> (It will work for any x that's a power of two, and coincidentally most of those test cases are.)
[20:30:19] <Altreus> as long as you put the larger number first
[20:32:16] * GumbyPAN CPAN Upload: Mock-Data-0.02 by NERDVANA https://metacpan.org/release/NERDVANA/Mock-Data-0.02
[20:33:02] *** Quits: bn_work (uid268505@id-268505.highgate.irccloud.com) (Quit: Connection closed for inactivity)
[20:33:15] *** Joins: emanuele6 (~emanuele6@user/emanuele6)
[20:43:34] *** Quits: choroba (~E.Choroba@88.146.255.106) (Quit: Leaving)
[20:44:10] *** Quits: jdltouraine_ (~jdltourai@2a02:a03f:847b:b800:b5f8:2ce2:b911:512e) (Ping timeout: 240 seconds)
[20:46:18] * GumbyPAN CPAN Upload: UniEvent-1.2.6 by SYBER https://metacpan.org/release/SYBER/UniEvent-1.2.6
[20:46:18] * GumbyPAN CPAN Upload: XS-Framework-1.5.1 by SYBER https://metacpan.org/release/SYBER/XS-Framework-1.5.1
[20:46:19] * GumbyPAN CPAN Upload: XS-Install-1.3.4 by SYBER https://metacpan.org/release/SYBER/XS-Install-1.3.4
[20:46:25] * GumbyPAN CPAN Upload: XS-Parse-Keyword-0.15 by PEVANS https://metacpan.org/release/PEVANS/XS-Parse-Keyword-0.15
[20:47:40] *** Quits: chiselfuse (~chiselfus@user/chiselfuse) (Remote host closed the connection)
[20:47:51] *** Joins: chiselfu1e (~chiselfus@user/chiselfuse)
[20:56:19] * GumbyPAN CPAN Upload: Syntax-Operator-Equ-0.02 by PEVANS https://metacpan.org/release/PEVANS/Syntax-Operator-Equ-0.02
[20:57:32] *** Joins: rpath (~rpath@gateway/tor-sasl/rpath)
[20:57:37] <LeoNerd> ^-- now with wrapper functions for perls without `PL_infix_plugin` (i.e. everyone's but mine)
[20:57:48] <LeoNerd> Also I learned a new trick: call-checkers. :) I like these
[20:58:02] <LeoNerd> I shall have to use them more. :)
[20:58:35] <Altreus> call-checkers?
[20:59:44] <LeoNerd> Bits of code attached to functions, to run when compiling code which calls said function
[21:00:08] <LeoNerd> So it can potentially rewrite the caller's optree into something else. In my case, all the calls to the wrapper functions just inline the wrapped op itself
[21:00:21] <Altreus> > They yield true if both operands are undef, false if exactly one operand is  # I never understood SQL's handling of NULL
[21:00:44] <LeoNerd> So, while  is_strequ( $x, $y )  -looks like- a function call, internally it's rewritten to a real operator identical to if your perl had supported  $x equ $y
[21:01:17] <Altreus> that sounds like a source filter but in the right place
[21:01:42] <thrig> too LISPy
[21:01:58] <LeoNerd> Kinda.. it's much nicer, but yes. It operates on the real optree, and not just the plain source code
[21:02:10] <LeoNerd> It's more like a Scheme macro
[21:03:02] *** Quits: anthk_ (~anthk_@92.176.105.30) (Read error: Connection reset by peer)
[21:03:49] <Grinnz> LeoNerd: ah, i remember those from https://metacpan.org/pod/Devel::CallChecker which is used for https://metacpan.org/pod/Devel::CallParser which was used for some keyword-like things
[21:03:49] <Paperbot_> Link title(s): [ Devel::CallChecker - custom op checking attached to subroutines - metacpan.org ] [ Devel::CallParser - custom parsing attached to subroutines - metacpan.org ]
[21:03:54] <haarg> if you're going to do that, you really should provide a deparse function
[21:04:12] <LeoNerd> I should, definitely
[21:04:14] <LeoNerd> It'll be in next version
[21:04:15] <haarg> https://metacpan.org/dist/Ref-Util-XS/source/lib/Ref/Util/XS.pm#L45-64
[21:04:15] <Paperbot_> Link title(s): [ lib/Ref/Util/XS.pm - metacpan.org ]
[21:04:24] <haarg> as an example
[21:04:29] <haarg> although i know you've messed with that before
[21:04:44] <LeoNerd> My plan is that XS::Parse::Infix should be able to provide those automatically for most common cases
[21:04:54] <LeoNerd> Also, don't attempt to deparse the wrapper func -itself-  ;)
[21:05:05] <Grinnz> who deparses the deparser
[21:05:25] <haarg> the wrapper function should already be deparsed i think?
[21:05:57] *** Joins: anthk_ (~anthk_@92.176.105.30)
[21:06:00] <LeoNerd> The wrapper function just contains the actual infix operator
[21:06:14] <LeoNerd> Callsites to the wrapper function have probably been rewritten to... the actual infix operator
[21:06:29] <LeoNerd> Thus, deparsing the infix operator on perls that don't support the PL_infix_plugin will have to deparse to calls to the wrapper function
[21:06:41] <LeoNerd> Thus, deparsing the wrapper function will *appear* like a call to itself
[21:07:08] <LeoNerd> sub WRAPPERFUNC { return shift() OP shift(); }
[21:07:23] <LeoNerd> But, we can't deparse to that
[21:07:50] *** Quits: tobybl_ (~tobybl@189.192.115.87.dyn.plus.net) (Remote host closed the connection)
[21:08:06] <LeoNerd> Actually, I should probably be using aelemfast on PL_defav, rather than shift. No need to mutate the array
[21:09:05] <LeoNerd> It's a slight shame the optree-based functions -always- do a full snail setup, and destroy a stack mark
[21:09:18] <LeoNerd> Otherwise the wrapper function could literally be a single opcode, the wrapped op itself
[21:21:58] * LeoNerd ponders on the concept of an operator rapper function
[21:32:46] *** Joins: jlenz__ (~jlenz@c-73-204-107-230.hsd1.fl.comcast.net)
[21:36:35] *** Quits: jlenz_ (~jlenz@c-73-204-107-230.hsd1.fl.comcast.net) (Ping timeout: 250 seconds)
[21:42:13] *** Quits: G_Sabino1ullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net) (Ping timeout: 250 seconds)
[21:42:39] *** Quits: G_SabinoMullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net) (Ping timeout: 250 seconds)
[21:46:00] *** Joins: scp1 (~magnus.wo@195-198-186-122.customer.telia.com)
[21:47:06] *** Joins: krismatrix (~krismatri@38.80.149.51)
[21:52:10] *** Quits: scp1 (~magnus.wo@195-198-186-122.customer.telia.com) (Ping timeout: 240 seconds)
[21:52:28] *** Quits: ztx (~ztx@user/ztx) (Quit: ztx)
[21:54:12] *** Quits: aspic (~shifty~~~@ppp121-44-125-21.syd-gls-har-bras39.tpg.internode.on.net) (Ping timeout: 260 seconds)
[22:04:19] *** Joins: diskin (~diskin@87.117.49.178)
[22:06:54] *** Joins: jdltouraine_ (~jdltourai@2a02:a03f:847b:b800:b5f8:2ce2:b911:512e)
[22:07:20] *** Joins: diskin_ (~diskin@ec2-18-158-88-195.eu-central-1.compute.amazonaws.com)
[22:07:20] *** diskin is now known as Guest1720
[22:07:20] *** diskin_ is now known as diskin
[22:07:40] *** Quits: tealecloud (~tealeclou@cpc1-farn9-2-0-cust495.6-2.cable.virginm.net) (Ping timeout: 240 seconds)
[22:10:04] *** Quits: Guest1720 (~diskin@87.117.49.178) (Ping timeout: 252 seconds)
[22:10:41] *** Quits: djerius (~quassel@pool-108-20-43-199.bstnma.fios.verizon.net) (Ping timeout: 252 seconds)
[22:10:56] *** Joins: djerius (~quassel@pool-108-20-43-199.bstnma.fios.verizon.net)
[22:15:31] *** Quits: Kimm0n0 (~Kimmono@195-159-198-100.customer.powertech.no) (Remote host closed the connection)
[22:15:54] *** Joins: Kimm0n0 (~Kimmono@195-159-198-100.customer.powertech.no)
[22:17:28] <krismatrix> question...what are concepts such as JIT or bytecode? and does perl have them?
[22:17:49] <krismatrix> or need them?
[22:18:17] <LeoNerd> Not overly
[22:19:23] <krismatrix> perl doesn't (overly) need them you mean?
[22:20:15] <thrig> byte magazine code is probably pretty dated by now
[22:21:51] <LeoNerd> Vague question => vague answer. Ask a more specific question and perhaps get a more specific answer
[22:22:10] *** Quits: jdltouraine_ (~jdltourai@2a02:a03f:847b:b800:b5f8:2ce2:b911:512e) (Ping timeout: 252 seconds)
[22:25:49] <krismatrix> hard to ask a mre specific question when i don' have an understanding..but i accept your difficculty with my vague question.
[22:26:01] <LeoNerd> You asked about two things. Try case-spltting. ask about just one
[22:27:08] <krismatrix> ok....why does perl not have  bytecode intermediary that a lang like python does. Does bytecode provide some values...or is it as i like to blieve a nuisance file that python creates for no reason.
[22:27:30] <LeoNerd> There doesn't seem to be any particular benefits in writing those things to disk
[22:27:55] <LeoNerd> Compiletime is sufficiently fast and programs are generally long-lived enough, that the benefit isn't really there
[22:28:12] <krismatrix> long-lived?
[22:28:23] <LeoNerd> Perl will try to find a .pmc file first before a .pm but in practice nobody's defined a way to create such files, or really worked out what might go in them
[22:28:53] <LeoNerd> Yah.. loading those files just saves compiletime startup cost.. if your perl process runs for days, weeks... months at a time, who cares about shaving a few msec off the startup time?
[22:29:33] <thrig> me, but I re-write the slow things in C
[22:29:34] <krismatrix> fair enuf
[22:29:36] <huf> yeah that's not really true tho
[22:29:48] <huf> you cant use Moose in quick commandline scripts for example
[22:29:56] *** Quits: fwg (~fwg@user/fwg) (Quit: .oO( zzZzZzz ...)
[22:29:59] <huf> and you cant seriously claim that's not a domain for perl
[22:30:12] <LeoNerd> Right.. but that's also not really something that a .pmc can do much about
[22:30:14] <huf> at least, you couldnt the last time i tried
[22:30:30] <LeoNerd> That's slow because of BEGIN-time executed code, not just parser+optree optimizer
[22:31:08] <huf> well then the real reason is that we run a lot of stuff in BEGIN :)
[22:31:15] <huf> and you cant shave that off with trickery
[22:31:31] <thrig> Mojo is also slow at the CLI until you set MOJO_NO_NNR MOJO_NO_SOCKS MOJO_NO_TLS
[22:31:32] <rpath> isn't another benefit of .pmc to hide/obscure the code ?
[22:31:41] <huf> eh
[22:31:50] <huf> I doubt it would really obscure it and anyway, that's just stupid
[22:32:17] <huf> you can mostly deparse the optree 
[22:32:25] <thrig> yeah just write it in Perl if you want to obscure it
[22:32:32] <rpath> :)
[22:32:33] <huf> ugh :D
[22:34:27] <krismatrix> soo...i don't understand why you cannot use Moose in cmd line?
[22:34:35] <thrig> it's too slow
[22:35:00] <thrig> starts up like a beached whale, like Java or Chromium does
[22:35:06] <krismatrix> what do ppl use instead if you want non-default oop perl
[22:35:13] <huf> Moo
[22:35:13] *** Joins: tealecloud (~tealeclou@cpc1-farn9-2-0-cust495.6-2.cable.virginm.net)
[22:35:15] <thrig> Moo, Object::Pad, not-OO
[22:35:36] <huf> and it isnt as slow as java
[22:35:38] <huf> just not instant
[22:36:05] <krismatrix> you mean Moose isn't as slow as java?
[22:36:12] <krismatrix> interesting on Moo.
[22:36:37] <krismatrix> I don't do much OO programming...the minimal perl OO that I use is with the mojolicious framework...and that comes with Mojo::Base.
[22:40:19] *** Quits: tealecloud (~tealeclou@cpc1-farn9-2-0-cust495.6-2.cable.virginm.net) (Ping timeout: 252 seconds)
[22:41:37] *** Joins: magla (~gelignite@55d47635.access.ecotel.net)
[22:47:05] <LeoNerd> you haven't addressed JIT yet
[22:47:23] <thrig> O, JIT, wherefore art thou
[22:48:02] <huf> arent all interpreters at least a naive jit? :D
[22:48:47] <tm604> perl's version of just-in-time is more like meh-maybe-later
[22:49:17] <thrig> doesn't Java have an Ahead of Time (AOT) Compiler now, for some reason?
[22:49:35] <huf> what, like a real compiler?
[22:49:43] <huf> imagine what java could do with one of those..
[22:49:50] <tm604> that's just Oracle quietly scanning your home directory for code that you might want to pay them for
[22:49:55] <shlomif> tm604: heh. tm604++
[22:50:07] <thrig> or extra CPUs you need to license?
[22:50:15] <huf> oracle attempting to predict the future of your bank account?
[22:50:18] <huf> seems normal
[22:50:37] <thrig> those 2nd yachts aren't going to pay for themselves
[22:50:54] <tm604> GPU detected, contract now moving into injury time
[22:52:06] <LeoNerd> in-jury time?
[22:52:18] <LeoNerd> ... it's a terrible legal joke
[22:52:27] <thrig> or injunction, if you want to court disaster
[22:53:43] <LeoNerd> Hmmm, is that what we can call my new `in...` operator? An `in`-junction?
[22:54:07] <huf> injun-ction?
[22:54:27] <thrig> injun is too close to "cowboys and ..."
[22:54:46] <huf> cattle herders and native americans?
[22:54:59] <LeoNerd> Plus if you need to invoke your parent class there's always SUPER::in-junction
[23:00:33] <krismatrix> lol
[23:01:17] *** Joins: slowButPresent (~slowButPr@user/slowbutpresent)
[23:09:42] <krismatrix> Sometimes...i hear a lot of buzzwords with languages...and I don't know whether they are important at all. kraih commented that node.js version of mojo is very fast. mst commented, that this was because Microsoft spent a ton of money optimizing node. It made me curious what makes these languages faster..etc. 
[23:10:44] <thrig> node no longer leaks memory printing in a loop, so I guess they've made some progress
[23:12:19] <krismatrix> and perl does or something?
[23:15:47] <mst> zln: I've forgotten a lot of maths, certainly
[23:16:24] <mst> krismatrix: no, node used to because it's, uh, very fast but also very stupid
[23:17:08] *** Joins: haj (~haj@ip5f5beb42.dynamic.kabel-deutschland.de)
[23:17:16] <thrig> perl leaking memory in a while ... print loop would have been ironed out some time before the 90s
[23:17:50] <huf> why? it's a rarely used construct in perl of all things
[23:18:02] <huf> barely any built-in support
[23:21:25] *** Quits: thrig (~thrig@65.113.153.50) (Remote host closed the connection)
[23:23:09] <krismatrix> interesting.
[23:27:17] *** Joins: tealecloud (~tealeclou@cpc1-farn9-2-0-cust495.6-2.cable.virginm.net)
[23:28:33] <mst> mark and sweep is hard, mm'kay
[23:30:31] <krismatrix> do perl need parantheses in if statements, loops , etc. Referring to () not {}.
[23:30:51] *** Joins: tobybl (~tobybl@189.192.115.87.dyn.plus.net)
[23:31:31] <krismatrix> i guess it does..never mind.
[23:31:48] <mason> krismatrix: perldoc perlsyn
[23:32:10] *** Quits: tobybl (~tobybl@189.192.115.87.dyn.plus.net) (Remote host closed the connection)
[23:32:21] <krismatrix> interestingly raku appears not to need it.
[23:32:46] *** Quits: tealecloud (~tealeclou@cpc1-farn9-2-0-cust495.6-2.cable.virginm.net) (Ping timeout: 256 seconds)
[23:37:01] <Grinnz> parentheses are part of the syntax in those cases, but for example, not part of the syntax for postfix forms
[23:37:55] <krismatrix> hmm.
[23:38:28] *** Joins: ztx (~ztx@user/ztx)
[23:39:53] *** Joins: EvanCarroll (~ecarroll@46.196.88.53)
[23:47:13] <buu> krismatrix: Node uses v8 which is *heavily* optimized to run inside short running browser tabs
[23:47:22] <buu> So it makes certain trade offs
[23:47:46] <buu> (Leaking memory was probably not a deliberate tradeoff but you can see how that sort of thing might not be noticed or prioritized for a while)
[23:47:57] <buu> node also takes like 18 seconds to print hello world
[23:48:10] <krismatrix>  what really?
[23:48:20] <lopid> 16s here
[23:48:20] <buu> no but it's really long
[23:48:43] <krismatrix> for me it is instant to do console.log('hello world!');
[23:49:13] <buu> Well, it's better than it used to be, but on my system I have: real    0m0.028s for node and real    0m0.015s for perl
[23:49:31] <krismatrix> you used time?
[23:49:35] <buu> I did
[23:50:15] <krismatrix> you mean 18 ms not seconds.
[23:50:25] <buu> I was exagerating for comedic effect
[23:50:35] <buu> But a year or two ago when I was testing this it was closer to .28s
[23:50:39] <krismatrix> got it...not to take it literally.
[23:51:15] <buu> please always take me seriously but not literally
[23:51:25] <buu> or maybe the other way around
[23:55:33] <huf> fuck you give me irreverently hed yes figurativel
[23:55:34] <huf> y?
[23:56:57] *** Joins: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl)
[23:57:55] *** Joins: G_Sabino1ullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net)
[23:57:55] *** Joins: G_SabinoMullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net)
[23:58:42] *** Quits: krismatrix (~krismatri@38.80.149.51) (Quit: Leaving)
