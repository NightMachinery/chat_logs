[00:03:03] *** Quits: mro (~mro@port-92-195-174-236.dynamic.as20676.net) (Remote host closed the connection)
[00:28:03] <d_bot> <antron> has anyone compared tsdl and ocamlsdl2?
[00:32:22] *** Joins: vicfred (~vicfred@user/vicfred)
[00:36:59] *** Joins: sleeping_papaya (~sleeping_@2601:14f:4500:33a1:4923:974e:e61b:a70b)
[00:42:59] *** Quits: sleeping_papaya (~sleeping_@2601:14f:4500:33a1:4923:974e:e61b:a70b) (Ping timeout: 264 seconds)
[00:53:40] *** Joins: bobo_ (~bobo@66.180.120.78.rev.sfr.net)
[00:56:26] *** Quits: spip (~bobo@69.39.127.78.rev.sfr.net) (Ping timeout: 265 seconds)
[00:56:28] *** Joins: romildo (~Romildo@ip-191-5-86-183.isp.valenet.com.br)
[01:01:11] *** Joins: rgrinberg (~textual@201.192.183.100)
[01:03:52] <d_bot> <antron> well, they are both similar in that they don't install or work readily on windows ðŸ˜›
[01:04:29] <d_bot> <let Butanium = raise Not_found;;> x)
[01:12:09] <d_bot> <antron> looks like there is an sdl2 binding inside revery, too, but it would have to be extracted from the repo. or i could try just using revery i guess
[01:14:55] *** Quits: romildo (~Romildo@ip-191-5-86-183.isp.valenet.com.br) (Quit: Leaving)
[01:17:59] *** Quits: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl) (Quit: leaving)
[01:21:33] *** Quits: favonia (~favonia@user/favonia) (Ping timeout: 268 seconds)
[01:30:38] *** Joins: favonia (~favonia@user/favonia)
[01:37:30] *** Quits: bobo_ (~bobo@66.180.120.78.rev.sfr.net) (Ping timeout: 256 seconds)
[01:37:35] *** Joins: spip (~bobo@143.14.127.78.rev.sfr.net)
[01:42:48] *** Joins: Tuplanolla (~Tuplanoll@91-159-69-50.elisa-laajakaista.fi)
[01:46:25] *** Joins: sleeping_papaya (~sleeping_@2601:14f:4500:33a1:4923:974e:e61b:a70b)
[01:53:00] *** Quits: sleeping_papaya (~sleeping_@2601:14f:4500:33a1:4923:974e:e61b:a70b) (Ping timeout: 268 seconds)
[01:56:18] *** Quits: favonia (~favonia@user/favonia) (Ping timeout: 260 seconds)
[01:59:28] *** Joins: bobo_ (~bobo@127.249.127.78.rev.sfr.net)
[02:01:27] *** Joins: bobo__ (~bobo@37.165.155.66)
[02:02:22] *** Quits: spip (~bobo@143.14.127.78.rev.sfr.net) (Ping timeout: 260 seconds)
[02:04:08] *** Quits: bobo_ (~bobo@127.249.127.78.rev.sfr.net) (Ping timeout: 256 seconds)
[02:05:34] *** Joins: spip (~bobo@37.170.254.44)
[02:08:03] *** Quits: average (uid473595@user/average) (Quit: Connection closed for inactivity)
[02:08:25] *** Quits: bobo__ (~bobo@37.165.155.66) (Ping timeout: 268 seconds)
[02:12:09] *** Quits: olle (~olle@i5E866D8E.versanet.de) (Ping timeout: 265 seconds)
[02:12:35] *** Quits: spip (~bobo@37.170.254.44) (Quit: Konversation terminated!)
[02:15:30] *** Joins: spip (~bobo@37.170.254.44)
[02:22:41] *** Quits: Anarchos (~Anarchos@88.168.112.216) (Quit: Vision[]: i've been blurred!)
[02:45:35] *** Quits: rgrinberg (~textual@201.192.183.100) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[03:08:41] *** Joins: average (uid473595@user/average)
[03:11:53] *** Joins: qwr (~qwr@147-106-50-84.dyn.estpak.ee)
[03:31:05] <d_bot> <psteckler> If anyone uses Caqti, the database connector, have you seen this error:
[03:31:10] <d_bot> <psteckler> ```
[03:31:11] <d_bot> <psteckler> (monitor.ml.Error ("Postgresql.Error(_)")
[03:31:12] <d_bot> <psteckler>  ("Raised at Postgresql.connection.signal_error in file \"src/postgresql.ml\", line 838, characters 6-66"
[03:31:13] <d_bot> <psteckler>   "Called from Postgresql.protectx in file \"src/postgresql.ml\", line 762, characters 8-11"
[03:31:15] <d_bot> <psteckler>   "Re-raised at Postgresql.protectx in file \"src/postgresql.ml\", line 765, characters 6-15"
[03:31:16] <d_bot> <psteckler>   "Called from Caqti_driver_postgresql.Connect_functor.Pg_io.get_next_result.retry in file \"lib-driver/caqti_driver_postgresql.ml\", line 465, characters 8-24"
[03:31:17] <d_bot> <psteckler> ```
[03:35:25] <d_bot> <Et7f3> It was merged inside the repo because revery was the sole consumer. So we switched to monorepo to reduce maintenance burden. Original repo -some patch https://github.com/revery-ui/reason-sdl2 also we use a patched sdl2, some bits were implemented also in upstream so they might differ in behaviour on wayland scrolling for instance.
[03:39:02] *** Quits: Tuplanolla (~Tuplanoll@91-159-69-50.elisa-laajakaista.fi) (Quit: Leaving.)
[03:45:26] *** Joins: rgrinberg (~textual@201.192.183.100)
[03:50:35] <d_bot> <antron> im currently considering "quickly" creating a binding that vendors sdl like luv does, and making that available in opam
[03:52:12] <d_bot> <antron> for the most painless sdl2 experience. and ill be making sure it works on windows since im on windows
[03:53:52] <d_bot> <Et7f3> Nice ðŸ˜Š
[04:01:53] *** Quits: Haudegen (~quassel@178.115.237.87.static.drei.at) (Ping timeout: 268 seconds)
[04:05:25] *** Joins: Colt (~Colt@user/colt)
[04:17:37] *** Quits: horninghack (~hackingho@user/hackinghorn) (Read error: Connection reset by peer)
[04:18:02] *** Joins: horninghack (~hackingho@user/hackinghorn)
[04:18:30] *** Joins: favonia (~favonia@user/favonia)
[04:19:52] <d_bot> <Swerve> In JS, there's a function `Uint8Array()` which can take as input a bytestring and return an array of 8-bit unsigned ints. I couldn't find anything directly corresponding to this in OCaml, but it seems like `Bytes.to_array <bytestring>` would do basically the same thing. Is this correct?
[04:46:07] <companion_cube> bytes is already a kind of array though
[04:46:48] <qwr> is there such function? but you can convert into Seq and then map with Char.code, if you need int array
[04:50:05] <companion_cube> I'm not sure, but you can do `Array.init (Bytes.length b) (Bytes.get b)`
[04:51:49] <qwr> good point :)
[04:56:46] <companion_cube> but generally if you keep chars, `byte` is better than an array
[05:31:11] *** Quits: waleee (~waleee@h-82-196-111-63.NA.cust.bahnhof.se) (Quit: WeeChat 3.3)
[05:53:57] *** Quits: rgrinberg (~textual@201.192.183.100) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[05:58:03] *** Quits: average (uid473595@user/average) (Quit: Connection closed for inactivity)
[06:20:28] *** Joins: sleeping_papaya (~sleeping_@2601:14f:4500:33a1:4923:974e:e61b:a70b)
[06:25:02] *** Quits: sleeping_papaya (~sleeping_@2601:14f:4500:33a1:4923:974e:e61b:a70b) (Ping timeout: 240 seconds)
[06:35:37] *** Joins: rgrinberg (~textual@201.192.183.100)
[06:40:59] *** Quits: favonia (~favonia@user/favonia) (Ping timeout: 268 seconds)
[06:52:46] *** Joins: remexre (~remexre@user/remexre)
[06:53:34] <remexre> does anyone have an example of packaging an ocamlbuild-using project with Nix?
[07:06:58] *** Joins: mbuf (~Shakthi@122.174.57.32)
[07:11:46] <Corbin> remexre: Hopefully somebody does. I have a minimal example with Dune, although that's not the same thing: https://osdn.net/users/corbin/pf/cammy/scm/tree/master/frame/
[07:12:41] <remexre> Corbin: yeah, buildDunePackage doesn't work with ocamlbuild...
[07:13:04] <remexre> though tbh I don't really grok either one, so maybe there's some way to make them compatible
[07:15:35] <Corbin> I had started with ocamlbuild, but ported to Dune. Don't remember why though.
[07:16:23] <rgrinberg> why do you want to use ocamlbuild? if you aren't sure, you should just use dune
[07:17:00] <remexre> I'm trying to package tgls, so I can use opengl
[07:17:10] <remexre> if there's a more modern set of bindings I should be using, I'm open to that too
[07:18:37] *** Quits: vicfred (~vicfred@user/vicfred) (Quit: Leaving)
[07:38:42] <companion_cube> it's because dbunzli refuses to use dune
[07:41:07] <rgrinberg> It might be easiest to just port lablgl to dune and proceed :P
[08:31:43] <remexre> ah, grepping dbunzli's domain name in nixpkgs was productive
[08:36:04] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[08:51:30] <d_bot> <darrenldl> why is dbunzli against(?) dune?
[08:51:40] <rgrinberg> he's got a competing product
[08:52:38] <companion_cube> barelyâ€¦
[08:52:49] <companion_cube> he uses a thin layer above ocamlbuild
[08:53:20] <companion_cube> rgrinberg: even ocp* is finally moving to dune, which means dbunzli is really the most stubborn
[08:54:15] <rgrinberg> wouldn't be surprised if he rewrites OCaml itself one day :)
[08:54:35] <companion_cube> that's an interesting thought experiment
[08:54:39] <companion_cube> I wonder what he'd change :)
[08:55:29] <rgrinberg> throw out regular variants. only polymorphic variants from now on
[08:55:50] <companion_cube> :DDD
[08:55:59] <companion_cube> he does like theseâ€¦
[08:56:07] <companion_cube> also, one library, one module?
[08:56:36] <rgrinberg> Maybe a length limit on identifiers?
[08:56:40] <companion_cube> :D
[08:57:06] <companion_cube> I could see him remove most of the imperative control structures
[08:57:14] <companion_cube> oh. he'd remove exceptions is what he'd do.
[08:58:52] <rgrinberg> companion_cube ocp moved to dune but not without creating a tool to wrap dune so to pretend it doesn't exist
[08:59:36] <companion_cube> heh
[08:59:40] <companion_cube> I'm fine with that
[09:00:00] <companion_cube> sometimes I think I'm missing on the fun :p
[09:00:04] <companion_cube> I should roll my own too
[09:01:52] <rgrinberg> companion_cube brzo is pretty usable now IIRC
[09:02:02] <rgrinberg> not my cup of tea, but hey it works
[09:02:39] <companion_cube> hu, it's not on opam, nor on https://erratique.ch/tags/OCaml
[09:02:50] <companion_cube> I think I've seen the name, but that's it
[09:03:43] <companion_cube> ah! https://erratique.ch/software/brzo
[09:26:18] *** Quits: zebrag (~chris@user/zebrag) (Read error: Connection reset by peer)
[09:56:07] *** Joins: Haudegen (~quassel@178.115.237.87.static.drei.at)
[10:03:41] *** Joins: mro (~mro@port-92-195-246-137.dynamic.as20676.net)
[10:06:37] *** Quits: rgrinberg (~textual@201.192.183.100) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[10:17:44] *** Joins: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl)
[10:45:15] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Quit: WeeChat 3.3)
[11:00:04] *** Quits: mro (~mro@port-92-195-246-137.dynamic.as20676.net) (Remote host closed the connection)
[11:19:53] *** Joins: vicfred (~vicfred@user/vicfred)
[11:50:16] *** Quits: vicfred (~vicfred@user/vicfred) (Quit: Leaving)
[12:39:01] *** Joins: favonia (~favonia@user/favonia)
[12:47:11] *** Quits: _whitelogger (~whitelogg@uruz.whitequark.org) (Ping timeout: 264 seconds)
[12:47:25] *** Joins: _whitelogger (~whitelogg@uruz.whitequark.org)
[12:52:18] *** Joins: mro (~mro@port-92-195-246-137.dynamic.as20676.net)
[13:09:22] <Fardale> companion_cube: let's go for ccbuild!
[13:12:01] <Armael> nnnn
[13:16:34] *** Joins: olle (~olle@p57849377.dip0.t-ipconnect.de)
[13:35:21] *** Joins: bartholin (~bartholin@158.110.70.164)
[14:00:47] *** Quits: mro (~mro@port-92-195-246-137.dynamic.as20676.net) (Remote host closed the connection)
[14:04:27] *** Joins: mro (~mro@port-92-195-246-137.dynamic.as20676.net)
[14:08:09] *** Joins: bobo_ (~bobo@37.166.92.195)
[14:08:30] *** Quits: spip (~bobo@37.170.254.44) (Ping timeout: 260 seconds)
[14:26:56] *** Joins: Everything (~Everythin@37.115.210.35)
[15:05:54] *** Quits: mro (~mro@port-92-195-246-137.dynamic.as20676.net) (Remote host closed the connection)
[15:12:31] *** Joins: mro (~mro@port-92-195-246-137.dynamic.as20676.net)
[15:24:16] *** Quits: favonia (~favonia@user/favonia) (Ping timeout: 256 seconds)
[15:38:36] *** Quits: mro (~mro@port-92-195-246-137.dynamic.as20676.net) (Remote host closed the connection)
[15:50:07] *** Joins: mro (~mro@port-92-195-246-137.dynamic.as20676.net)
[15:52:24] *** Quits: mro (~mro@port-92-195-246-137.dynamic.as20676.net) (Remote host closed the connection)
[15:55:32] *** Joins: mro (~mro@port-92-195-246-137.dynamic.as20676.net)
[15:59:33] *** Quits: mro (~mro@port-92-195-246-137.dynamic.as20676.net) (Remote host closed the connection)
[16:00:01] *** Quits: Everything (~Everythin@37.115.210.35) (Quit: leaving)
[16:01:29] *** Joins: xiongxin (~Thunderbi@119.123.103.170)
[16:37:05] *** Joins: mro (~mro@2002:5cc3:f689:0:95ce:1ae5:de2f:4ceb)
[16:46:39] *** Quits: Haudegen (~quassel@178.115.237.87.static.drei.at) (Quit: Bin weg.)
[17:12:42] *** Quits: xiongxin (~Thunderbi@119.123.103.170) (Remote host closed the connection)
[17:27:39] *** Quits: mro (~mro@2002:5cc3:f689:0:95ce:1ae5:de2f:4ceb) (Remote host closed the connection)
[17:42:23] *** Quits: andreypopp (~andreypop@94.188.42.16) (Read error: Connection reset by peer)
[17:43:30] *** Quits: Colt (~Colt@user/colt) (Quit: Leaving)
[17:45:06] *** Joins: andreypopp (~andreypop@94.188.42.16)
[17:47:28] <companion_cube> :D
[17:47:41] <companion_cube> I keep joking about it, but I'll never do it
[17:49:14] *** Joins: Haudegen (~quassel@91.114.49.10)
[17:49:57] *** Joins: mro (~mro@port-92-195-246-137.dynamic.as20676.net)
[17:53:45] *** Joins: sleeping_papaya (~sleeping_@2601:14f:4500:33a1:4923:974e:e61b:a70b)
[17:55:53] <d_bot> <undu> ccune
[17:57:45] <companion_cube> I have more interesting things to do on my limited time, thank you :p
[18:01:11] *** Quits: sleeping_papaya (~sleeping_@2601:14f:4500:33a1:4923:974e:e61b:a70b) (Ping timeout: 268 seconds)
[18:02:54] *** Joins: favonia (~favonia@user/favonia)
[18:20:44] *** Joins: waleee (~waleee@h-82-196-111-63.NA.cust.bahnhof.se)
[18:26:38] <zozozo> companion_cube: how about ccAI which then can create ccbuild by itself ?
[18:28:25] <companion_cube> :p
[18:28:30] <companion_cube> if only I knew how
[18:30:55] *** Joins: sleeping_papaya (~sleeping_@2601:14f:4500:33a1:4923:974e:e61b:a70b)
[18:34:53] *** Joins: rgrinberg (~textual@201.192.183.100)
[18:42:23] *** Quits: sleeping_papaya (~sleeping_@2601:14f:4500:33a1:4923:974e:e61b:a70b) (Ping timeout: 264 seconds)
[19:01:04] *** Quits: rgrinberg (~textual@201.192.183.100) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[19:05:08] *** Joins: rgrinberg (~textual@201.192.183.100)
[19:10:35] *** Quits: favonia (~favonia@user/favonia) (Ping timeout: 264 seconds)
[19:12:52] <rgrinberg> companion_cube how's zig compared to ocaml?
[19:13:28] <Franciman> wait wut, why are you talking about zig and ocaml, exactly when I am learning both of them
[19:13:30] <Franciman> :P
[19:13:33] <Franciman> such a coincidence
[19:16:31] <olle> Zig?
[19:16:34] <olle> Nim?
[19:16:36] <olle> V?
[19:16:52] <olle> I don't know your question, but the answer is Rust
[19:18:43] <companion_cube> rgrinberg: haven't tried it seriously, but sponsoring it
[19:18:50] <companion_cube> Zig is more there to replace the C in OCaml :p
[19:19:10] <companion_cube> (as in, it's as low level but much less bad)
[19:19:58] <rgrinberg> I see, so zig isn't that good for actual applications
[19:20:12] <rgrinberg> V >>>>> Zig > Nim
[19:20:46] <companion_cube> :D
[19:21:02] <companion_cube> idk, depends on the application probably
[19:21:12] <companion_cube> but Zig seems particularly nice for libraries, like, say, sqlite
[19:23:11] <rgrinberg> sqlite is already rewritten in V to be 100x faster and builds in half a microsecond
[19:23:27] <rgrinberg> *C compilation not included
[19:23:34] <companion_cube> :D
[19:23:37] <companion_cube> lolol
[19:23:41] <companion_cube> everyone loves a good V bashing
[19:23:56] <Armael> <3
[19:24:37] <rgrinberg> The marketing is ridiculous but I respect the author and the project
[19:24:56] <companion_cube> I don't respect the author of V at all
[19:25:07] <companion_cube> he's either delusional or a scammer
[19:25:46] <rgrinberg> I don't know, making a programming language doesn't seem like the easiest way to scam people out of money
[19:27:22] <d_bot> <darrenldl> is V functioning?
[19:27:22] <Corbin> Could be a minor cult leader in the making. It would not be the first cult oriented around a programming language.
[19:27:45] <d_bot> <darrenldl> i only recall a lot of empty promises
[19:28:03] <rgrinberg> There's working software now
[19:28:16] <rgrinberg> it segfaults here and there but those are minor blemishes i'm sure
[19:28:35] <Armael> ...:DD
[19:28:48] <rgrinberg> I'm trying to edit my ocaml in ved, but it's a little buggy
[19:29:13] <d_bot> <darrenldl> uh..huh...interesting...
[19:30:38] <d_bot> <darrenldl> that's...a lot of new apps since i last checked
[19:30:58] <Franciman> now the new hype is roc
[19:30:58] <d_bot> <darrenldl> it must either be really great or really not great
[19:31:01] <rgrinberg> yes, the author is a machine
[19:31:09] <Franciman> 2000 conferences
[19:31:11] <Franciman> 0 code shown
[19:31:36] <d_bot> <darrenldl> what is roc?
[19:31:50] <Franciman> https://www.roc-lang.org/
[19:31:55] <Corbin> Where does the hype come from? dash has a great line about this: "great ideas and bad code build communities"
[19:32:45] <Corbin> If we take a step back, languages like V or Roc don't really have compelling design advantages. So why would anybody think that they're great? Because most mainstream languages are very bad. And they're bad because they're mainstream because only the bad code gets communities.
[19:33:01] <Franciman> Corbin: tbh V has design advantages that are compelling
[19:33:13] <Franciman> like automatic memory management without garbage collector or refcount
[19:33:19] <Franciman> but I think this is impossible? :D
[19:33:30] <rgrinberg> Franciman i think that's been binned already. ved and the rest are using boehm ;)
[19:33:37] <Armael> lol
[19:34:01] <Armael> that answers one the questions I had about V indeed
[19:34:05] <rgrinberg> Like you i didn't expect V to achieve the impossible, but hey it got something working
[19:34:19] <Corbin> V looks alright compared to Go, and Go looks alright compared to the rest of the 1980s. It's a good example of how we care more about tradition of languages than about innovation, for sure.
[19:34:35] <companion_cube> rgrinberg: have you heard of Drew Devault btw?
[19:34:45] <rgrinberg> companion_cube yeah, source hut, right?
[19:34:48] <companion_cube> yeah
[19:34:49] <Armael> but I mean, it's like max crank level to promise impossible stuff, isn't it?
[19:34:55] <Franciman> he's writing a new language right?
[19:34:57] <companion_cube> he's working on his own languageâ€¦ whichâ€¦ is like C
[19:35:00] *** Quits: kakadu (~kakadu@195.19.236.234) (Read error: Connection reset by peer)
[19:35:05] <companion_cube> and has no generics because that's bloat
[19:35:13] <rgrinberg> I quite like that V compiles to C though
[19:35:23] *** Joins: kakadu (~kakadu@195.19.236.234)
[19:35:34] <rgrinberg> Makes it really easy to publish your stuff
[19:35:39] <d_bot> <darrenldl> so...V is legit and good(?
[19:35:59] <Franciman> companion_cube: so go but by devalut
[19:36:00] <rgrinberg> if you can tolerate more than a few rough edges, it's a cool hack imo
[19:36:07] <companion_cube> Franciman: without GC
[19:36:14] <companion_cube> Go is gettig generics at least
[19:36:16] <Franciman> manual memory management?
[19:36:20] <companion_cube> yeah
[19:36:23] <Franciman> oh so it's C
[19:36:25] <companion_cube> ðŸ¤·
[19:36:25] <rgrinberg> companion_cube sounds completely pointless to me
[19:36:30] <companion_cube> it's like C but less bad
[19:36:34] <companion_cube> but there's 0 point compared to Zig
[19:37:03] <Franciman> well zig has generics
[19:37:10] <d_bot> <darrenldl> rgrinberg: right okay, i was gonna say if it's production ready (tm), there are a lot of promises on its website to fulfill
[19:37:11] <Corbin> But that's his brand. Like, I remember when Devault published a Minecraft server in C++ and didn't understand why the one I wrote in Python was using less CPU. I spent less time on memory management and more time on algorithms.
[19:37:27] <companion_cube> Franciman: exactly
[19:37:48] <Franciman> Corbin: LOL
[19:38:04] <d_bot> <darrenldl> Corbin: sounds like an amazing story : D
[19:38:12] <rgrinberg> tbh he messed up somewhere if he couldn't out perform python with C++ :)
[19:38:19] <companion_cube> clearly
[19:39:47] <Corbin> Well, it wasn't a fair fight. I got to use a nice networking library (Twisted) and so it wasn't hard to handle thousands of connections. I had a JIT (PyPy) for numerical stuff like terrain generation. And Python's stdlib has a really nice WeakDictionary implementation which simplified the chunk-management algorithm, where stuff has to be read from disk constantly.
[19:40:14] <rgrinberg> companion_cube have you heard of virgil? an exotic language that isn't a joke like devault's remake of C
[19:40:33] <rgrinberg> Corbin C++ has good libraries for networking and data structures
[19:40:35] <companion_cube> vaguely rings a bell, but is it actively developed?
[19:41:00] <companion_cube> C++ has coroutines now, it could simplify networking it seems
[19:41:01] <rgrinberg> companion_cube not as actively as V, but is making regular progress
[19:41:06] <companion_cube> but I'd use rust if I had to do this
[19:41:09] <companion_cube> rgrinberg: also, carp!!
[19:41:11] <Corbin> rgrinberg: Virgil's very interesting. The IIRC second version was very nifty, with static memory layouts for entire applications. I haven't kept up though, and the authors have changed it radically since.
[19:41:32] <rgrinberg> companion_cube C++ always had coroutines in practice
[19:41:52] <companion_cube> you meanâ€¦ setjump? :s
[19:42:17] <rgrinberg> companion_cube Boost.Coroutine
[19:42:45] <rgrinberg> Corbin that static memory layout is still there. but now it's self hosting and has a lot of backends
[19:43:12] <companion_cube> oh, boost.
[19:43:25] <Franciman> C++ is becoming a bane
[19:43:46] <rgrinberg> even C has coroutines with libcoro :)
[19:46:16] *** Joins: favonia (~favonia@user/favonia)
[19:46:24] <Corbin> Coroutines actually are a performance problem for connection-handling at that scale. I'm sure that there are some libraries which can do it fine for C++ with some trickery.
[19:46:30] <companion_cube> it's like saying C++ had lambdas using Boost
[19:46:41] <companion_cube> Corbin: how so?
[19:47:44] <Corbin> But e.g. Twisted has three ways to do callbacks on Python, and it's well-known that callbacks are fastest, followed by "inline callbacks" with native Python coroutines, and finally the slowest option is "corotwine" where coroutines directly are managed by the event loop.
[19:47:51] <rgrinberg> companion_cube nah, that's totally different. coroutines don't need a special syntax
[19:48:23] <Corbin> By "coroutine" I'm assuming that we're pausing and saving the stack somehow. That's the part that makes it slow on Python and Go.
[19:48:47] <companion_cube> since coroutines are now builtin in C++, they should be pretty fast
[19:48:47] <rgrinberg> Corbin i don't think that's the reason why python's coroutines are slow
[19:49:01] <rgrinberg> companion_cube they were always plenty fast
[19:49:03] <companion_cube> iirc they require one allocation, but well
[19:50:39] <rgrinberg> companion_cube in C++, one usually doesn't need to wait for the stroke of a pen of a standard's body to start using a feature that is already widely available :)
[19:50:51] <companion_cube> heh
[19:50:58] <companion_cube> I wish there were decent sumtypes though
[19:51:07] <companion_cube> I'm betting on Zig also because it has these
[19:51:10] <Franciman> wait wut, you don't like std::variant?
[19:51:14] <Franciman> std::visit
[19:51:16] <Franciman> :D
[19:51:17] <companion_cube> it's incredibly ugly
[19:51:25] <Franciman> it's the bane of my existence
[19:51:43] <Franciman> +1 on the zig bet for better sumtypes
[19:51:56] <rgrinberg> Can zig unbox sumtypes for you?
[19:52:04] <companion_cube> everything is unboxed, so, yeah
[19:52:09] <companion_cube> it's literally tagged unions
[19:52:11] <Franciman> they are regular C unions
[19:52:15] <companion_cube> but it checks the tag for you
[19:52:16] <Franciman> plus an automatic enum
[19:57:25] *** Quits: terrorjack (~terrorjac@2a01:4f8:1c1e:509a::1) (Quit: The Lounge - https://thelounge.chat)
[19:59:09] <d_bot> <andreypopp> I wonder is anyone has tried terra (C metaprogrammed with Lua)
[19:59:52] *** Joins: terrorjack (~terrorjac@2a01:4f8:1c1e:509a::1)
[20:00:09] <rgrinberg> it's abandoned by now I think
[20:00:18] <d_bot> <andreypopp> I wonder why this approach is not popular with OCaml â€” generate fast computation kernels
[20:00:28] <d_bot> <andreypopp> I think MetaOCaml can do that right?)
[20:00:39] <rgrinberg> yes, and that approach is indeed very popular
[20:00:45] <rgrinberg> it's just hard to make it type safe
[20:01:05] <d_bot> <andreypopp> and memory safe...
[20:02:47] <Corbin> It's *very* hard to make type-safe, or at least that's the impression from Oleg's papers. From experience, I know that codegen is very easy in untyped languages like Python or Monte. But lowering untyped code to type-safe code is also very hard.
[20:03:21] <companion_cube> I'm already thinking of doing some code generation in some cases, instead of functorizing
[20:03:33] <companion_cube> for a handful of sensitive types
[20:03:37] <rgrinberg> Probably coq is a better language than OCaml for this kind of stuff
[20:03:53] <rgrinberg> at least in theory
[20:04:07] <companion_cube> I'm thinking of imperative stuff :p
[20:04:23] <companion_cube> like vectors backed by bigarray. Being monomorphic is super useful because ocamlopt produces much better code.
[20:04:29] <d_bot> <Drup> @rgrinberg in Coq, you will not really do it the metaprog way, rather the EDSL way with an embedded compiler. You can do that in OCaml just fine as well.
[20:04:47] <d_bot> <Drup> Less support for notations, but ppx will do it just fine, and you gain the fact that you don't have to program in Galina
[20:05:37] <d_bot> <Drup> Many people do it in Coq currently because they can also prove the embedded compiler *and* the embedded programs
[20:05:39] <rgrinberg> Drup yeah that's true, but I really like notations make dsl's a lot more palatable. and in coq there's more interesting ways to handle binders
[20:05:49] <d_bot> <andreypopp> by the way, there's ATS as well
[20:06:02] <d_bot> <Drup> ATS is unsafe/unsound
[20:06:10] <d_bot> <andreypopp> oh...
[20:06:26] <d_bot> <Drup> Idris is a better low level language than ATS :3
[20:07:33] <rgrinberg> Drup ppx will not "do it just fine" it will double the work for most projects xD
[20:07:37] *** Quits: mro (~mro@port-92-195-246-137.dynamic.as20676.net) (Remote host closed the connection)
[20:08:07] <d_bot> <Drup> Not in this case no. It's pretty much the same as defining your syntax
[20:08:32] <d_bot> <Drup> we are talking about embedded highly optimizing compilers, the syntax is going to be 2% of the work.
[20:08:39] <companion_cube> is Idris really low level?! uh
[20:08:49] <d_bot> <Drup> Coq notations would only build you the AST, same for a PPX
[20:08:58] <rgrinberg> companion_cube you're just generating code, who cares if it's high level
[20:09:21] <d_bot> <Drup> @companion_cube Idris 2 is pretty ok at doing low level work actually
[20:09:33] <d_bot> <Drup> it has linear types, unboxed types, etc
[20:09:46] <d_bot> <Drup> (iirc)
[20:09:59] <Corbin> companion_cube: Idris 2 targets Chez Scheme as its backend. They're definitely designing for performance, with a new type system that can prove that it erases proofs.
[20:10:31] <rgrinberg> ats is having its python3 moment right now, so it seems best to wait
[20:10:37] <Corbin> ATS might be better for talking about safety of hardware I/O or pointer arithmetic, though.
[20:11:00] <d_bot> <Drup> ATS is memory unsafe by default, that's a no-no, sorry :p
[20:11:10] <companion_cube> Corbin: targeting scheme is not "low level"
[20:11:11] <rgrinberg> Drup yeah maybe for some huge compiler project it's small, but there's lots of really small code gen tasks where ppx is heavy
[20:11:17] <Corbin> (Maybe "low-level language", like "functional language" before it, is a meaningless tribal phrase.)
[20:11:48] <d_bot> <Drup> @rgrinberg oh yeah sure, but that's really not the same kind of things where you would build a EDSL with notations either ðŸ˜‰
[20:11:50] <companion_cube> at this point I'm ready to accept that "low level" means manual memory management ðŸ˜‡
[20:12:29] <d_bot> <Drup> @companion_cube manual memory management doesn't mean memory unsafe, thanks to linear/affine types/borrows/...
[20:13:10] <Corbin> companion_cube: I would actually agree with you on your entire point, but I wonder: If I write Python, that's high-level. If I write RPython, that's low-level; I have fine-grained control as if I were talking directly to gcc. So maybe "compiles to C with fine-grained control" -> "low-level".
[20:13:12] <olle> (escape semantics...)
[20:13:48] <Corbin> If we write Scheme, that's high-level; if we write Chez Scheme, that's low-level. Most of the standard libraries (the SRFIs) aren't available, and FFI requires lots of work.
[20:14:36] <companion_cube> @Drup not the same thing
[20:15:03] <companion_cube> oh, Chez Scheme provides control over memory?
[20:15:12] <companion_cube> @Drup I didn't say "low level <-> unsafe"
[20:15:48] <d_bot> <Drup> In any case, the way metaocaml does things is indeed quite hard for a variety of reasons, one being that writing any kind of optimization using metaprogramming is hugely painful
[20:15:53] <rgrinberg> companion_cube weren't you interested in code generation of "impteraive stuff"?
[20:16:07] <companion_cube> yes indeed
[20:16:13] <companion_cube> I'm trying quite hard to turn OCaml into C++ :D
[20:16:29] <d_bot> <Drup> ugly and unusable ?
[20:16:38] <rgrinberg> so what difference does it make if idris runs on chez or ruby, or V?
[20:16:47] <companion_cube> @Drup fast
[20:17:10] <companion_cube> it's a bit of a losing battle, but well
[20:17:10] <rgrinberg> Just define an ADT for your target DSL and then generate it
[20:17:36] <companion_cube> yeah, it's just quite annoying when you need the DSL to be expressive
[20:17:55] <d_bot> <Drup> If you want your optimization to be realiable, that will always be the case
[20:17:56] <rgrinberg> that's where the fancy types come in :)
[20:18:19] <rgrinberg> but does idris have type classes?
[20:18:23] <companion_cube> I think so
[20:18:25] <d_bot> <Drup> of course it does
[20:18:42] <d_bot> <Drup> come on, it's Idris, the better question is: which type feature it *doesn't* have ?
[20:18:47] <rgrinberg> are they more like coq's or more like haskell's
[20:19:00] <d_bot> <Drup> I think the answer is "Yes"
[20:19:16] <d_bot> <Drup> (The Coq one, but with more metaprog, iirc)
[20:19:46] <Corbin> I say this as somebody who favors CHICKEN, FWIW: Chez fast https://ecraven.github.io/r7rs-benchmarks/
[20:20:22] <rgrinberg> Drup so usable? e.g. no crazy compile times, decent errors, etc
[20:20:39] *** Joins: chrisz (n8okxf70ls@55d4a29b.access.ecotel.net)
[20:20:44] <companion_cube> now Idris needs to be self hosted, right? :p
[20:20:48] <d_bot> <Drup> I would not garantee that
[20:21:29] <rgrinberg> companion_cube it is self hosted, what do you mean?
[20:21:43] <companion_cube> oh, idris is now in idris? cool
[20:21:46] <companion_cube> iirc Idris 1 was in Haskellâ€¦
[20:23:30] <rgrinberg> idris 3 will be in V
[20:26:11] <companion_cube> can't wait
[20:26:14] <d_bot> <darrenldl> what wont V do at this rate
[20:32:06] *** Quits: olle (~olle@p57849377.dip0.t-ipconnect.de) (Ping timeout: 260 seconds)
[20:32:46] <Franciman> I heard copilot is rendered useless by V
[20:33:07] <reynir> yes, idris 1 was in haskkell
[20:33:16] <reynir> s/k//
[20:43:13] *** Quits: bartholin (~bartholin@158.110.70.164) (Quit: Leaving)
[20:44:27] *** Quits: mbuf (~Shakthi@122.174.57.32) (Quit: Leaving)
[20:46:50] *** Quits: Haudegen (~quassel@91.114.49.10) (Quit: Bin weg.)
[20:48:30] *** Joins: mro (~mro@port-92-195-246-137.dynamic.as20676.net)
[20:58:07] <companion_cube> anyway, is Idris 2 supposed to be production ready?
[20:58:21] <companion_cube> it's cool and all, but I thought it was still mostly a research vehicle
[21:00:51] *** Joins: mbuf (~Shakthi@122.174.57.32)
[21:04:38] <Corbin> It's self-hosting, but not all of the Idris 1 standard library has been ported.
[21:05:33] <companion_cube> it takes a bit more than that to be production ready :)
[21:06:03] <rgrinberg> cube doesn't need a standard library anyway
[21:06:07] <rgrinberg> he'll just write his own
[21:06:23] <companion_cube> ðŸ¤·
[21:06:28] <companion_cube> you say that like I had a choice ;)
[21:07:50] <Corbin> Well, what does "production ready" mean? Like, ready for business use? Ready to recommend to other people? Ready to use for daily tasks?
[21:11:07] *** Quits: rgrinberg (~textual@201.192.183.100) (Ping timeout: 268 seconds)
[21:13:17] *** Joins: rgrinberg (~textual@201.192.183.53)
[21:18:38] <Franciman> Corbin: I usually take it to mean: breaks only very rarely in strange circumstances
[21:19:16] <Armael> that's true of the trivial language that has only supports the empty program ;-)
[21:19:24] <Armael> -has
[21:21:23] *** Quits: kakadu (~kakadu@195.19.236.234) (Remote host closed the connection)
[21:22:59] *** Quits: mro (~mro@port-92-195-246-137.dynamic.as20676.net) (Remote host closed the connection)
[21:25:07] <Franciman> Armael: ahah fair
[21:26:51] <companion_cube> Corbin: ready to program real things in it without stumbling on errors all the time :p
[21:27:04] <companion_cube> in other words, dependable
[21:30:53] <d_bot> <darrenldl> digression: is V dependable?
[21:31:35] <companion_cube> def. not :p
[21:32:40] <d_bot> <darrenldl> Very nice
[21:34:31] <d_bot> <Et7f3> So assembly is production ready ?
[21:40:41] <d_bot> <darrenldl> hasnt it always been?
[21:41:28] <d_bot> <darrenldl> especially when it comes to dealing with side channel attacks in security code
[21:51:59] *** Quits: omni (~user@shellbox.hack.org) (Ping timeout: 264 seconds)
[21:58:31] *** Joins: vicfred (~vicfred@user/vicfred)
[22:00:33] *** Quits: mbuf (~Shakthi@122.174.57.32) (Quit: Leaving)
[22:01:05] *** Quits: rgrinberg (~textual@201.192.183.53) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[22:02:33] *** Joins: Haudegen (~quassel@178.115.237.87.static.drei.at)
[22:04:57] *** Joins: omni (~user@shellbox.hack.org)
[22:12:07] <companion_cube> welp
[22:12:08] <companion_cube> https://twitter.com/jam1garner/status/1381645842843598852
[22:14:21] *** Joins: mro (~mro@port-92-195-246-137.dynamic.as20676.net)
[22:15:27] <d_bot> <undu> wow, so useful
[22:15:45] <d_bot> <undu> does it work for C as well?
[22:15:54] <companion_cube> I think so!!
[22:20:28] *** Quits: mro (~mro@port-92-195-246-137.dynamic.as20676.net) (Remote host closed the connection)
[22:22:43] *** Quits: vicfred (~vicfred@user/vicfred) (Quit: Leaving)
[22:23:46] *** Quits: motherfsck (~motherfsc@user/motherfsck) (Read error: Connection reset by peer)
[22:25:22] *** Joins: motherfsck (~motherfsc@user/motherfsck)
[22:30:11] *** Joins: mro (~mro@2002:5cc3:f689:0:95ce:1ae5:de2f:4ceb)
[22:40:49] *** Joins: olle (~olle@i5E866D9D.versanet.de)
[22:41:36] *** Quits: chrisz (n8okxf70ls@55d4a29b.access.ecotel.net) (Quit: leaving)
[22:57:24] <d_bot> <Pokegali> I don't have the same cat xD `cat - concatenate files and print on the standard output`
[23:11:05] *** Joins: ymherklotz (~ymherklot@2a0c:5bc0:40:107b:fdfc:4d2d:898a:f9f5)
[23:28:48] *** Joins: Colt (~Colt@user/colt)
