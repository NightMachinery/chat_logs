[00:00:07] *** Quits: cosimone (~user@93-44-187-176.ip98.fastwebnet.it) (Read error: Connection reset by peer)
[00:00:59] *** Joins: bebyx (~Thunderbi@user/bebyx)
[00:01:11] *** Quits: darkbit (~db@152.32.100.99) (Ping timeout: 245 seconds)
[00:02:21] *** Joins: cosimone (~user@93-44-187-176.ip98.fastwebnet.it)
[00:04:31] *** Joins: m_ben (~m_ben@user/m-ben/x-7429725)
[00:08:00] *** Joins: senoraraton (~senorarat@c-67-160-210-246.hsd1.ca.comcast.net)
[00:12:34] *** Quits: wakeup (~wakeup@user/wakeup) (Quit: Client closed)
[00:15:26] *** Quits: rgrinberg (~textual@2806:102e:18:c0c1:a896:63f7:5249:df28) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[00:15:36] *** Joins: bolovanos (~bolovanos@user/bolovanos)
[00:23:34] *** Joins: rgrinberg (~textual@2806:102e:18:c0c1:a896:63f7:5249:df28)
[00:26:39] *** Joins: galik (~galik@cpc115028-bour7-2-0-cust153.15-1.cable.virginm.net)
[00:30:01] *** Quits: NovaXrine_ (~NovaXrine@zen.novaxrine.com) (Quit: ZNC 1.8.2+deb2+b1 - https://znc.in)
[00:30:21] *** Joins: NovaXrine (~NovaXrine@zen.novaxrine.com)
[00:31:01] *** Quits: galik (~galik@cpc115028-bour7-2-0-cust153.15-1.cable.virginm.net) (Ping timeout: 250 seconds)
[00:39:27] *** Joins: unlink2 (~unlink@p200300ebcf19f600f31648a859b660c5.dip0.t-ipconnect.de)
[00:39:40] *** Quits: pulse (~pulse@user/pulse) (Remote host closed the connection)
[00:40:00] *** Joins: pulse (~pulse@user/pulse)
[00:42:57] *** Quits: Enitin (~Enitin@82.180.145.230) (Ping timeout: 240 seconds)
[00:45:47] *** Joins: Enitin (~Enitin@82.180.145.226)
[00:51:21] *** Joins: geowiesnot (~user@5-51-190-244.abo.bbox.fr)
[00:52:22] *** Quits: rgrinberg (~textual@2806:102e:18:c0c1:a896:63f7:5249:df28) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[00:52:36] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Quit: Client closed)
[00:52:48] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[00:53:35] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Client Quit)
[00:53:51] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[00:54:57] *** lawt2 is now known as lawt
[00:54:58] *** Joins: rgrinberg (~textual@187.144.82.175)
[00:55:39] *** Quits: rgrinberg (~textual@187.144.82.175) (Client Quit)
[00:57:03] *** Quits: senoraraton (~senorarat@c-67-160-210-246.hsd1.ca.comcast.net) (Ping timeout: 256 seconds)
[00:57:19] *** Shell is now known as concha
[00:57:24] *** concha is now known as Shell
[00:59:12] *** Joins: Hokedli (~lasliedv@gateway/tor-sasl/hokedli)
[00:59:33] *** Quits: Enitin (~Enitin@82.180.145.226) (Ping timeout: 256 seconds)
[01:03:37] *** Joins: Enitin (~Enitin@82.180.145.230)
[01:07:29] *** Quits: crankslider (~slidercra@user/slidercrank) (Ping timeout: 256 seconds)
[01:07:30] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Quit: sord937)
[01:07:36] *** Quits: sobkas (~sobkas@95.175.17.217) (Quit: sobkas)
[01:08:05] *** Joins: AliceMeows (~AliceMeow@user/alicemeows)
[01:12:39] *** Quits: pulse (~pulse@user/pulse) (Quit: { https://indiedevs.net/ })
[01:13:13] <AliceMeows> I see another smart ass decided to break libstdc++ further by changing unique_ptr's dtor and use std::move
[01:13:46] <PJBoy> oh yeah?
[01:13:46] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Quit: Client closed)
[01:13:58] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[01:13:59] <CarloWood> What do you mean?
[01:14:16] *** Quits: LuckyFire (~LuckyFire@46.217.40.44) (Remote host closed the connection)
[01:14:40] *** Joins: LuckyFire (~LuckyFire@46.217.40.44)
[01:14:44] <AliceMeows> Someone thought it'd be a good idea to write this get_deleter(std::move(__ptr)); instead of get_deleter(__ptr);
[01:15:35] <PJBoy> it's not obvious to me what's wrong with that
[01:15:59] *** Quits: geowiesnot (~user@5-51-190-244.abo.bbox.fr) (Ping timeout: 256 seconds)
[01:16:15] <AliceMeows> Try replacing unique_ptr's with your own type and you'll see how that breaks if your custom deleter's operator() accepts pointer& instead of pointer
[01:16:17] <CarloWood> std::unique_ptr<T,Deleter>::get_deleter does not take any arguments?
[01:16:39] <AliceMeows> Oops
[01:17:03] <AliceMeows> It should be get_deleter()(__ptr); instead of get_deleter()(std::move(__ptr)); which it currently is
[01:17:30] *** Joins: KAHR-Alpha (~Alpha@2a01cb0d024a66002c92c285d35cae12.ipv6.abo.wanadoo.fr)
[01:17:58] <PJBoy> ah I see
[01:18:11] <AliceMeows> The problem is that it ends up calling deleter's operator() like this deleter(std::move(__ptr))
[01:18:16] <PJBoy> yeah that does seem to be non-conforming
[01:18:19] <PJBoy> tsk tsk
[01:18:49] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[01:19:05] <AliceMeows> So you get a lovely error about binding non const lvalue reference
[01:19:35] <PJBoy> indeed
[01:19:38] <Raziel> well, hey, at least you get an error
[01:19:55] *** Quits: john99 (~john99@102.246.103.34.bc.googleusercontent.com) (Quit: Client closed)
[01:19:58] <PJBoy> could potentially query the deleter about whether it would take a rvalue or not
[01:20:11] <PJBoy> but then I'm still not convinced that would be a conforming implementation
[01:20:22] *** Quits: xkuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[01:20:39] <AliceMeows> It already has this static_assert(__is_invocable<deleter_type&, pointer>::value, "msg here");
[01:20:46] <AliceMeows> But that obviously does not help
[01:20:52] <AliceMeows> libc++ isn't much better either
[01:22:58] *** Quits: gproto23 (~gproto23@user/gproto23) (Remote host closed the connection)
[01:23:15] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[01:23:50] <AliceMeows> I still have to provide operator!=(type, std::nullptr_t) for both libc++ and libstdc++ or it wont compile
[01:26:36] *** Quits: rootx74 (~rootx74@user/rootx74) (Ping timeout: 245 seconds)
[01:28:03] <CarloWood> AliceMeows: So basically now they're doing:
[01:28:06] <CarloWood> { unique_ptr<Foo, D> up(new Foo); auto ptr = up.release(); up.get_deleter()(std::move(ptr)); } struct Foo {}; struct D { void operator()(Foo* p) const { BARK; } };
[01:28:07] <geordi> D::operator()(Foo*) const
[01:29:35] *** Quits: Enitin (~Enitin@82.180.145.230) (Ping timeout: 256 seconds)
[01:29:35] <CarloWood> It *kinda* makes sense... if you use an iterator instead of a Foo* - you probably want to move it - making a copy is in fact less logical since afterwards the iterator is invalidated.
[01:29:41] *** Quits: SorcererX (~SorcererX@133.79-161-60.customer.lyse.net) (Remote host closed the connection)
[01:30:51] <PJBoy> it would make sense more generally
[01:31:05] <PJBoy> but the spec says that get_deleter()(ptr) is well formed
[01:31:42] <PJBoy> so you have to allow decltype(get_deleter()) to take a non const lvalue reference and still work
[01:31:46] <CarloWood> That doesn't mean that get_deleter()(std::move(ptr)) isn't?
[01:32:34] <PJBoy> the spec says ~unique_ptr has an effect "Equivalent to: if (get()) get_­deleter()(get());"
[01:32:52] <PJBoy> so I don't think the move is actually allowed?
[01:33:01] <PJBoy> you could presumably observe that move if you wanted to
[01:33:36] <PJBoy> (cite http://eel.is/c++draft/unique.ptr.single.dtor )
[01:33:46] <CarloWood> { unique_ptr<Foo, D> up(new Foo); FooPtr ptr = up.release(); up.get_deleter()(std::move(ptr)); } struct Foo {}; struct FooPtr { FooPtr(Foo* p) : ptr(p) {} Foo* ptr; }; struct D { void operator()(FooPtr p) const { BARK; } };
[01:33:47] <geordi> D::operator()(FooPtr) const
[01:34:17] <CarloWood> It says nowhere that you can or should use FooPtr& for the operator() :/.
[01:34:36] <PJBoy> you can because get_deleter()(get()) would be valid
[01:34:40] <CarloWood> geordi: replace operator()(FooPtr) with operator()(FooPtr&)
[01:34:40] <geordi> error: String `operator()(FooPtr)` does not occur.
[01:34:47] <CarloWood> oops
[01:35:08] <CarloWood> geordi: replace operator()(FooPtr with operator()(FooPtr&
[01:35:08] <geordi> error: no match for call to '(unique_ptr<Foo, D>::deleter_type {aka D}) (remove_reference<FooPtr&>::type)'
[01:35:27] <CarloWood> I'd just remove the '&' and be happy.
[01:35:44] <PJBoy> what if your pointer isn't copyable
[01:35:49] <PJBoy> or moveable
[01:36:03] <PJBoy> also what if you want your standard library to be conforming >_>
[01:36:04] <AliceMeows> It has to be moveable or it wont be NullablePointer
[01:36:04] <CarloWood> Then it wouldn't work without the std::move either
[01:36:27] <PJBoy> well your move might be expensive then
[01:36:36] <AliceMeows> Indeed
[01:36:39] <PJBoy> your pointer could be a 2 gig array
[01:36:52] <PJBoy> or synchronise threads
[01:37:00] <CarloWood> Then a move will be cheaper obviously :/
[01:37:20] <PJBoy> cheaper than the deleter taking its ptr argument by reference?
[01:37:21] <AliceMeows> Passing a reference would be even cheaper
[01:37:46] <CarloWood> If your pointer can be a 2 gig array - then you'll have to add `operator()(FooPtr&&)`
[01:38:25] <PJBoy> or ~unique_ptr could be implemented correctly >_>
[01:38:48] *** Joins: Enitin (~Enitin@82.180.145.226)
[01:39:09] <CarloWood> I don't think the standard demands this :/
[01:39:10] <PJBoy> if the coder of the deleter really wanted the ptr moved, they could take an lvalue reference and move within the deleter
[01:39:45] *** Quits: LucaTM (~LucaTM@user/lucatm) (Quit: Textual IRC Client: www.textualapp.com)
[01:40:00] <PJBoy> http://eel.is/c++draft/unique.ptr#single.general-1.sentence-2
[01:40:11] <PJBoy> > given a value d of type D and a value ptr of type unique_­ptr<T, D>​::​pointer, the expression d(ptr) is valid
[01:40:32] <PJBoy> that wording allows the deleter's operator() to take its parameter by lvalue reference
[01:41:42] <PJBoy> it's the most flexible, and hence best, wording
[01:41:56] <CarloWood> No, it means that that has to be valid. Which it also is when you provide both, pass by value and pass by rvalue-reference (and if you must pass by lvalue-ref).
[01:42:22] <PJBoy> it has to be valid, so we agree on that
[01:42:32] <CarloWood> No where it says that it has to be valid when you ONLY provide an operator()(Ptr&).
[01:42:41] <PJBoy> and then the dtor wording says that it must be called this way too http://eel.is/c++draft/unique.ptr.single.dtor
[01:43:21] *** Quits: cosimone (~user@93-44-187-176.ip98.fastwebnet.it) (Quit: ERC (IRC client for Emacs 27.1))
[01:43:46] <CarloWood> That would require by value or lvalue-ref; but it doesn't say that you can get away with ONLY by lvalue-ref?
[01:44:11] *** Quits: PlasmaHH (~PlasamaHH@user/plasmahh) (Ping timeout: 252 seconds)
[01:44:16] <PJBoy> you can get away with only lvalue-ref because d(ptr) calls operator() with an lvalue
[01:44:41] <CarloWood> And as said before, if you're not happy with by value because your pointer is not copyable or 2GB - then provide an operator() that accepts by rvalue-ref!
[01:45:04] <PJBoy> but the standard says I can take an lvalue reference
[01:45:15] *** Quits: Viewday115 (~Viewday@user/viewday) (Read error: Connection reset by peer)
[01:45:17] <PJBoy> why would I settle for a non conforming implementation
[01:45:40] *** Joins: Viewday115 (~Viewday@user/viewday)
[01:45:41] <CarloWood> *shrug* - I don't get where you read in this that providing ONLY an operator()(unique_ptr<>::pointer&) should work.
[01:45:58] <PJBoy> because operator()(get()) would work
[01:46:05] <CarloWood> so?
[01:46:06] <PJBoy> and that's how the operator() is specified to be called
[01:46:27] <PJBoy> so my deleter that only has the lvalue reference operator() meets the requirements that unique_ptr demands
[01:47:02] <CarloWood> That seems to me that you reverse things;  like if A then B. And now you claim: we have B so we must have A.
[01:47:22] <PJBoy> the spec says the deleter is called like `get_­deleter()(get())`, so I'm free to rely on that behaviour
[01:47:37] <PJBoy> and making a single overload that takes an lvalue reference is a valid way of relying on that
[01:47:48] <CarloWood> no - it says that has to be valid. It doesn't mean it can't be called in different ways.
[01:47:54] <PJBoy> http://eel.is/c++draft/unique.ptr.single.dtor
[01:48:05] <PJBoy> it says it has to do that, or something exactly the same as that
[01:48:29] <CarloWood> I don't read that in that page.
[01:48:39] <PJBoy> the "effects" bit
[01:48:52] <PJBoy> ctrl+f for `get_­deleter()(get())`
[01:49:39] <PJBoy> an implementation can't do `get_­deleter()(move(get()))`, because that's not equivalent to `get_­deleter()(get())`
[01:50:19] <PJBoy> one way in which it's not equivalent is that it will fail to compile if the deleter's operator() doesn't accept rvalues
[01:50:42] <PJBoy> another way that it's not equivalent is that you could observe that move via the ptr's move ctor
[01:50:44] <CarloWood> yes - the effect of ~unique_ptr(); is the same *as-if* you do if (get()) get_­deleter()(get());  which therefore needs to be valid.  Now you say: if I provide only an operator()(Ptr&) that is valid - therefore that has to be sufficient and it is not allowed to ever call it using std::move(). I disagree. You can provide operator()(Ptr) and operator()(Ptr&&) and that would STILL be valid (it would use copy by value).
[01:51:08] <PJBoy> you can't overload a value parameter and reference parameter
[01:51:34] <PJBoy> and if you could, the call would be ambiguous
[01:51:57] <PJBoy> also the spec says it calls the deleter in that specific way or equivalent
[01:52:09] <PJBoy> so it can't do something non equivalent
[01:52:13] *** Joins: geowiesnot (~user@5-51-190-244.abo.bbox.fr)
[01:52:34] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[01:52:45] *** Joins: SorcererX (~SorcererX@133.79-161-60.customer.lyse.net)
[01:52:51] <PJBoy> also you have no reason to want the ptr to be moved into the deleter's operator()
[01:53:27] <Eelis> !illogical
[01:53:27] <nolyc> Eelis: Error: "illogical" is not a valid command.
[01:53:36] <PJBoy> well maybe you do actually
[01:53:46] <PJBoy> yeah I take that back
[01:54:12] *** Joins: Viewday1151 (~Viewday@user/viewday)
[01:54:29] *** Joins: proller (~p@80.240.216.69)
[01:55:14] <AliceMeows> CarloWood: https://godbolt.org/z/adfq7hKr4 this should compile and yet it does not
[01:55:24] *** Quits: Moosadee (~Moosadee@198.248.38.27) (Ping timeout: 240 seconds)
[01:55:25] *** Quits: Viewday115 (~Viewday@user/viewday) (Ping timeout: 256 seconds)
[01:55:41] *** Viewday1151 is now known as Viewday115
[01:55:47] <CarloWood> That is not the point - I am only arguing that from the point of view of a language lawyer I don't think the standard that you showed forbids to call operator()(std::move(ptr)). It might be stupid and unnecessary, but they're not being non-conforming imho.
[01:56:15] <AliceMeows> The standard clearly states this `given a value d of type D and a value ptr of type unique_­ptr<T, D>​::​pointer, the expression d(ptr) is valid`
[01:56:18] <PJBoy> but calling it with the move isn't equivalent
[01:56:26] <PJBoy> if it was equivalent, that move wouldn't do anything
[01:56:33] <CarloWood> also you have no reason to want the ptr to be moved into the deleter's operator() <--- that (not the point)
[01:56:34] <PJBoy> but move does do something
[01:56:35] <AliceMeows> d(ptr) should be valid in my example and it still wont compile
[01:58:02] <CarloWood> AliceMeows: I am pretty sure (and arguing that all this time) that nowhere in the standard it says that that should compile.
[01:58:09] <PJBoy> the standard says ~unique_ptr calls get_­deleter()(get()) or equivalent
[01:58:16] *** Quits: LuckyFire (~LuckyFire@46.217.40.44) (Remote host closed the connection)
[01:58:17] <PJBoy> what's your argument that get_­deleter()(move(get())) is equivalent
[01:58:29] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[01:58:39] *** Joins: LuckyFire (~LuckyFire@46.217.40.44)
[01:58:41] <CarloWood> AliceMeows: isn't line 36 your own code?
[01:59:01] *** Joins: jiffe (~jiffe@47-220-182-140.gtwncmkt04.res.dyn.suddenlink.net)
[01:59:02] *** Quits: proller (~p@80.240.216.69) (Ping timeout: 252 seconds)
[01:59:07] <AliceMeows> Yes? I'm not sure where you're going with this
[02:00:19] <AliceMeows> Changing void operator()(pointer& p) to void operator()(pointer p) allows the code to compile but it makes a copy of custom_handle while there should be no reason for p to be required to be passed by value
[02:00:51] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[02:00:54] <CarloWood> If your pointer is larger than a builtin or not copyable - just provide both?!
[02:01:09] <AliceMeows> And how is that going to help exactly?
[02:01:09] <PJBoy> we're not arguing there are workarounds
[02:01:23] <PJBoy> *aren't
[02:03:26] <CarloWood> You're really not logical PJBoy :/.  You argue that the paragraphs of the standard SHOW that you can get away with just providing a operator()(Ptr&)... Why? The exact same reasoning can be used to "prove" that you can get away with providing JUST operator()(Ptr) !?
[02:03:51] <PJBoy> you *can* get away with just providing an operator()(Ptr)
[02:04:11] <PJBoy> because then the call `get_­deleter()(get())` is valid
[02:04:15] <PJBoy> so that's all well and good
[02:04:17] <CarloWood> And when I say: it doesn't - then you say "but what if I don't want to copy my pointer because it is 2 GB?" that is just what you (don't) want - it's not what the standard dictates.
[02:04:33] <PJBoy> you wanna talk logical, answer my last question
[02:04:42] <PJBoy> the standard says ~unique_ptr calls get_­deleter()(get()) or equivalent, what's your argument that get_­deleter()(move(get())) is equivalent
[02:05:00] <CarloWood> I am not saying it is, at all.
[02:05:15] <PJBoy> well there you go, an implementation can't call get_­deleter()(move(get()))
[02:05:21] <PJBoy> that's non conforming
[02:06:03] <PJBoy> the reason it's non conforming is that it's not equivalent to get_­deleter()(get())
[02:06:06] <CarloWood> Like I said before, that paragraph of the standard shows that get_­deleter()(get()) must always work, which means you MUST provide operator()(Ptr&) AND/OR operator()(Ptr). Nothing more and nothing less.
[02:06:19] <PJBoy> and anything equivalent to get_­deleter()(get()) will allow my deleter's operator() to take an lvalue reference and nothing else
[02:07:00] <PJBoy> not only must get_­deleter()(get()) always work, but get_­deleter()(get()) is what gets called in the dtor
[02:07:23] <PJBoy> so it *has* to work, and then it *will* work
[02:07:33] <CarloWood> "as if" - but ok. And yes, it *has* to work.
[02:07:55] *** Joins: N4buc0 (~N4buc0@2804:7f4:348b:29b4:7f63:bd57:a0b4:7bb5)
[02:08:04] <PJBoy> get_­deleter()(get()) would work with a deleter whose operator() takes an lvalue reference
[02:08:13] <PJBoy> so anything that works as if get_­deleter()(get()) is called will also allow that
[02:08:17] <CarloWood> That does NOT mean that you are not allowed to call get_deleter(std::move(get())) and ALSO provide an operator() that makes that work, no?
[02:08:42] <PJBoy> the unique_ptr dtor can't call get_­deleter()(move(get())) because that's not equivalent
[02:08:51] <CarloWood> I don't know who is calling the std::move by the way.
[02:09:00] <PJBoy> unique_ptr's dtor
[02:09:04] <CarloWood> If libstdc++ itself is - well... that would be weird.
[02:09:10] <PJBoy> yeah libstdc++
[02:09:29] <CarloWood> Got an url somewhere that shows this std::move?
[02:09:34] <PJBoy> hence "smart ass decided to break libstdc++ further by changing unique_ptr's dtor and use std::move"
[02:09:35] <CarloWood> so I know the context
[02:09:45] <CarloWood> ohhh
[02:10:16] <CarloWood> I suppose you were right... I didn't get that part :/.  If they changed unique_ptr's dtor to do that - yes, that is not what the standard says.
[02:10:33] <PJBoy> woo \o/
[02:11:03] <PJBoy> I couldn't figure out the point of confusion there at all
[02:11:37] *** Joins: proller (~p@80.240.216.69)
[02:12:53] <PJBoy> https://github.com/gcc-mirror/gcc/commit/a12c16de529755cdf4dbc594dd48742107ad349e#diff-5a21cc7d85e996725f73dc91117a21f149d96ea4caa55527b12dae1fbdc2aebaR287
[02:12:56] <PJBoy> there's the commit
[02:13:12] <PJBoy> from 2018, wtf
[02:13:47] *** Joins: bitmask (~bitmask@c-73-215-237-27.hsd1.nj.comcast.net)
[02:14:29] *** Quits: Batzy (~quassel@user/batzy) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[02:15:34] *** Joins: Batzy (~quassel@user/batzy)
[02:15:35] <AliceMeows> CarloWood: https://github.com/gcc-mirror/gcc/blob/master/libstdc%2B%2B-v3/include/bits/unique_ptr.h#L359
[02:16:39] *** Joins: zmt00 (~zmt00@user/zmt00)
[02:19:27] *** Quits: zmt01 (~zmt00@user/zmt00) (Ping timeout: 256 seconds)
[02:20:35] *** Joins: hashfuncf39 (~user@2601:5c0:c280:7090:29ba:fcc0:8f3a:efac)
[02:23:47] *** Quits: geowiesnot (~user@5-51-190-244.abo.bbox.fr) (Ping timeout: 252 seconds)
[02:23:55] *** Joins: mathe8989 (~wellmathe@dhcp-138-246-3-71.dynamic.eduroam.mwn.de)
[02:25:30] *** Quits: ville (~ville@user/ville) (Quit: ville)
[02:26:25] <Alipha> Someone file a bug
[02:31:39] <zz> just mentally rejoined. File a bug, with what? that get_deleter(move(__ptr)) should be get_deleter(__ptr)?
[02:32:30] <PJBoy> yeah
[02:32:57] <PJBoy> with standard citation http://eel.is/c++draft/unique.ptr.single.dtor
[02:33:01] *** Quits: krebso (xkrebs@lounge.fi.muni.cz) (Quit: Ping timeout (120 seconds))
[02:33:39] <PJBoy> and test case https://godbolt.org/z/adfq7hKr4
[02:33:46] *** Joins: krebso (xkrebs@lounge.fi.muni.cz)
[02:34:01] *** Joins: ville (~ville@user/ville)
[02:36:16] *** Quits: vicfred (~vicfred@user/vicfred) (Quit: Leaving)
[02:36:35] <Eelis> that citation says the deleter's op() must be callable with an rvalue (since get() returns by-value). so i don't see what's wrong about libstdc++ passing an rvalue to the deleter's op()
[02:38:24] <Alipha> Eelis: where does it say it's an rvalue?
[02:38:58] <Eelis> http://eel.is/c++draft/unique.ptr.single.general says "constexpr pointer get() const noexcept;"
[02:39:00] *** Quits: LuckyFire (~LuckyFire@46.217.40.44) (Ping timeout: 240 seconds)
[02:39:15] <Eelis> so it's returning a pointer by value
[02:39:18] <Alipha> Oh
[02:40:22] *** Joins: jplejacq (~jplejacq@68.71.169.160)
[02:40:37] <PJBoy> oh yeah huh
[02:40:41] <PJBoy> so the move is just redundant
[02:41:13] *** Joins: wakeup (~wakeup@user/wakeup)
[02:41:21] <PJBoy> or not
[02:41:43] <PJBoy> it gets an lvalue reference to something in the libstdc++ source
[02:41:50] <PJBoy> probably the source of my own confusion
[02:42:32] <PJBoy> so actually the move is necessary??
[02:42:45] <PJBoy> because the deleter's operator() should be expecting an rvalue
[02:43:02] <Alipha> Lol, complete 180
[02:43:46] <Alipha> Or pi, if you prefer
[02:44:16] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[02:44:16] *** Joins: rgrinberg (~textual@fixed-186-96-26-198.totalplay.net)
[02:44:23] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[02:44:23] *** ChanServ sets mode: +v npaperbot
[02:44:39] <PJBoy> ok well that solves that mystery
[02:44:51] <PJBoy> !youvsgcc
[02:44:52] <nolyc> Compilers undergo many many many years of development utilizing the combined knowledge of dozens to hundreds to thousands of different developers which could equate to a combined several hundred thousand years worth of programming experience, versus you.
[02:45:02] <PJBoy> >_>;
[02:46:44] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[02:47:55] <AliceMeows> I guess that makes me an idiot then, huh?
[02:48:11] <Eelis> C++ humbles us all
[02:49:27] *** Joins: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net)
[02:51:39] *** Quits: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz) (Remote host closed the connection)
[02:55:27] *** Joins: cosimone (~user@93-44-187-176.ip98.fastwebnet.it)
[02:55:56] <AliceMeows> That essentially means that msvc stl and libc++ don't conform or do I get it wrong?
[02:56:18] <Eelis> hard to say without seeing the code. please link
[02:56:55] *** Joins: neet (~neet@136.41.96.251)
[02:57:49] *** Quits: neet (~neet@136.41.96.251) (Client Quit)
[02:57:54] *** Quits: proller (~p@80.240.216.69) (Ping timeout: 252 seconds)
[02:58:37] <AliceMeows> Eelis: https://godbolt.org/z/6c39d4zPs
[02:58:39] <zz> why would anyone even want to define a deleter::operator()(T &), that is, with an lvalue ref...
[02:59:08] <Eelis> zz: i agree, it makes no sense
[02:59:10] <AliceMeows> Because you might be replacing the internal type with your own custom NullablePointer object
[03:00:14] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.4.1)
[03:00:19] <Eelis> sorry, by "please link" i meant "please link to the implementations of the functions you question, so we can judge those implementations"
[03:02:05] <Eelis> a deleter that doesn't accept rvalues in general won't work with the unique_ptr dtor, because per the spec, that one only has to work for rvalues
[03:02:43] *** Quits: wakeup (~wakeup@user/wakeup) (Quit: Client closed)
[03:02:57] <Eelis> so an implementation that passes an rvalue is valid
[03:02:59] <AliceMeows> https://github.com/microsoft/STL/blob/main/stl/inc/memory#L3250 https://github.com/llvm-mirror/libcxx/blob/master/include/memory#L2587
[03:04:38] <PJBoy> so those would be invalid on the grounds that your deleter::operator() could be taking a pointer&& parameter
[03:04:55] <Eelis> AliceMeows: thanks. yeah i agree those are bad, for the reason given by PJBoy
[03:05:43] *** Joins: geowiesnot (~user@5-51-190-244.abo.bbox.fr)
[03:05:48] <AliceMeows> But my operator() takes pointer& not pointer&&
[03:06:18] <Eelis> you're out of luck; lvalue-ref-to-nonconst-T doesn't bind to rvalues
[03:06:26] <Eelis> gotta comply
[03:07:03] *** Joins: bindu_ (~bindu@user/bindu)
[03:07:55] *** Quits: bindu (~bindu@user/bindu) (Ping timeout: 240 seconds)
[03:09:00] *** bindu_ is now known as bindu
[03:09:40] <Alipha> provide both operator()(pointer&) and operator()(pointer&&)?
[03:10:05] <PJBoy> approved by CarloWoods
[03:10:11] <AliceMeows> Lol
[03:10:16] <Eelis> i strongly doubt it ever makes sense to have a deleter taking a pointer&
[03:10:33] *** Joins: proller (~p@2a02:6b8:b081:b486::1:1b)
[03:10:49] <Alipha> AliceMeows: why do you want to take a pointer& anyway?
[03:11:18] <AliceMeows> I wanted to hack unique_ptr to manage resources and compare it against my unique_resource implementation but it seem pointless now
[03:11:31] *** Quits: rgrinberg (~textual@fixed-186-96-26-198.totalplay.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[03:11:48] <AliceMeows> I don't even know what was the point in providing pointer type via a deleter to begin with
[03:13:32] <jdavfsxd> talking about unique_resource, holly molly how these stdlib implementations on *nix land are lagging so much...
[03:13:42] <jdavfsxd> past 2017
[03:14:55] <jdavfsxd> I use arch by the way and latest libstdc++/libc++ has no format, unique_resource, etc
[03:14:57] <jdavfsxd> annoying
[03:16:19] <AliceMeows> unique_resource provided by the standard is a disgrace
[03:16:35] <Eelis> there is no C++ standard that has unique_resource, is there? so kinda silly to complain about it
[03:16:56] <AliceMeows> Wasn't it accepted for c++23 or am I mistaken?
[03:17:06] <kalven> disgrace I says!
[03:17:06] * Eelis checks the year
[03:17:13] <Eelis> oh hey it's 2022
[03:17:35] <jdavfsxd> uh? I thought it was in, but hmm, dunno whether it was a technical report or something
[03:18:12] <jdavfsxd> it's listed on cppref iirc
[03:18:34] <Eelis> cppreference lists it under std::experimental, to emphasize that it's not part of any standard
[03:18:49] <jdavfsxd> "library fundamentals TS v3"
[03:19:05] <Eelis> exactly. the contents of that TS may or may not one day become part of the stdlib in some form
[03:20:23] <AliceMeows> I sure hope any of the proposals for unique_resource don't make it because they're all pretty terrible and break with out_ptr/inout_ptr which was already accepted but I'm sure the committee would love to discover only a few years later how broken it is
[03:20:29] *** Joins: Moosadee (~Moosadee@198.248.38.26)
[03:20:44] <jdavfsxd> right, but these libs provide experimental/, and it's not there :/, format is std btw.
[03:21:12] <AliceMeows> You could use fmt although from my experience it didn't work with any of my code
[03:21:19] <Eelis> my guess is that 99% of the use cases of unique_resource will not be affected whatsoever by out_ptr/inout_ptr stuff
[03:21:58] <Eelis> (because out_ptr/inout_ptr stuff is fringe to begin with)
[03:22:02] *** Quits: Moosadee (~Moosadee@198.248.38.26) (Client Quit)
[03:23:39] <AliceMeows> You're wrong actually, one of the proposals for unique_resource provided a bool in its ctor and used it internally to check for validity a when calling some api which could potentially fail and out_ptr/inout_ptr is utilized reset() function gets called within out_ptr_t/inout_ptr_t's dtor and sets unique_resource's state to valid which eventually tries to clear it up even though the api actually failed
[03:24:24] <Eelis> i'm not sure how any of that bears on what i said
[03:24:35] *** Quits: GreenResponse (~tomek@r-45-155-148-237.gpon.bialnet.pl) (Quit: Leaving)
[03:24:40] <Eelis> is your belief really that out_ptr/inout_ptr will be non-fringe?
[03:24:57] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Quit: Client closed)
[03:25:09] <Eelis> (i ask because i'm not sure i've ever encountered a person who believes that)
[03:25:12] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[03:25:13] <AliceMeows> No, the problem isn't in out_ptr/inout_ptr but unique_resource
[03:25:56] <Eelis> ok, then you shouldn't have any difficulty stating the problem you perceive with unique_resource without referencing out_ptr/inout_ptr
[03:26:56] *** Quits: AliceMeows (~AliceMeow@user/alicemeows) (Remote host closed the connection)
[03:27:19] *** Joins: AliceMeows (~AliceMeow@user/alicemeows)
[03:27:36] *** Quits: jsbach_ (~jsbach@2a01:c22:a861:c200:b455:8fb0:343e:163a) (Ping timeout: 252 seconds)
[03:28:17] <jdavfsxd> Eelis: that's some nice and elegant sarcasm. I liked.
[03:28:39] <AliceMeows> The only problem I see with out_ptr/inout_ptr is its reliance on smart pointer's internal pointer type instead of relying on the returned type of get() function
[03:28:47] *** Quits: Spirit532 (~Spirit532@user/Spirit532) (Killed (NickServ (GHOST command used by Spirit5323)))
[03:28:48] *** Joins: Spirit532 (~Spirit532@user/Spirit532)
[03:29:10] <Eelis> jdavfsxd: no sarcasm is intended. if AliceMeows has discovered a real deficiency in unique_resource, then that's a good thing and we ought to fix the problem
[03:29:43] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[03:29:53] <jdavfsxd> Eelis: ;-)
[03:30:37] <cbreak> I think I'll stick with references...
[03:31:21] <AliceMeows> There is no shortage of c apis which require T** so out_ptr/inout_ptr is kind of a must to have and the whole aim of unique_resource is to solve the problem of managing resources other than memory
[03:31:39] *** Joins: CodePoint (~CodePoint@107-208-128-79.lightspeed.tukrga.sbcglobal.net)
[03:31:50] *** Joins: badone (~badone@209.132.189.136)
[03:32:45] <kalven> is there some fundamental thing that out_ptr enables that cant be replaced with a few lines of code?
[03:32:52] *** Quits: rendar (~rendar@user/rendar) (Quit: Leaving)
[03:33:15] <AliceMeows> It aims to solve the problem of calling release() and reset() functions when you have to pass T** to some api
[03:33:25] *** Quits: seninha (~seninha@user/seninha) (Ping timeout: 240 seconds)
[03:33:51] *** Joins: pizdets_ (~pizdets@183.182.110.214)
[03:34:11] *** Quits: pizdets (~pizdets@183.182.115.102) (Ping timeout: 265 seconds)
[03:34:40] <AliceMeows> Since returning the address of internal variable breaks encapsulation the committee refused to make such changes to unique_ptr/shared_ptr
[03:36:13] <Eelis> do i understand correctly, then, that the claim is that there are some C APIs which cannot be wrapped efficiently due to the fact that their deallocation functions take T&?
[03:37:07] <Eelis> or, since C doens't have T&, T* where T is the pointer type
[03:37:22] <AliceMeows> When its plain T* then calling get() alone works fine
[03:37:37] *** Quits: bolovanos (~bolovanos@user/bolovanos) (Ping timeout: 240 seconds)
[03:37:45] *** Joins: senoraraton (~senorarat@c-67-160-210-246.hsd1.ca.comcast.net)
[03:38:13] <AliceMeows> The problem is when its T** then get() is no longer an option and the only way to get that T** is by calling release() storing the returned pointer locally, then calling the api and calling reset with the newly modified pointer
[03:38:16] <jdavfsxd> why you damn native english ppl always reverse its and it's?
[03:38:29] <jdavfsxd> no need to answer
[03:38:31] <jdavfsxd> :D
[03:38:49] <cbreak> AliceMeows: you can put a T* into a unique_ptr
[03:38:57] <cbreak> unique_ptr<T*>
[03:39:08] <AliceMeows> That was my initial thought as well
[03:39:09] <cbreak> obviously, dumb. but it's C... so... who knows what they were thinking
[03:39:41] <Eelis> i guess the core questions are: (1) does this only concern the wrapping of C APIs? (2) what is the worst case of a C API that cannot be wrapped efficiently in C++?
[03:39:53] <cbreak> the correct way to deal with bad C APIs is to write a custom wrapper. Because they are often bad in unique ways... :/
[03:40:57] *** Quits: hashfuncf39 (~user@2601:5c0:c280:7090:29ba:fcc0:8f3a:efac) (Ping timeout: 240 seconds)
[03:41:04] <jdavfsxd> having a versatile and generic enough solution in a lib is often sufficient for many many of those particular cases though.
[03:41:29] <jdavfsxd> and handy.
[03:42:14] <Eelis> i've used custom implementations of unique_resource once or twice. it's a legitimately useful utility. not the best thing since slice bread though
[03:42:31] <Eelis> *sliced
[03:42:32] <AliceMeows> jdavfsxd: Its what my unique_resource implementation was meant to solve which unfortunately had a couple flaws and I had to make some changes for the millionth time in the hope that this time it wont break in some horrible way
[03:42:34] <cbreak> one could add a feed_proxy() function to unique_ptr, which returns a proxy object with an implicit conversion member function to T**, which on destruction resets the owner unique_ptr to the written value...
[03:42:42] <cbreak> but I think that'd be overengineered.
[03:42:58] <jdavfsxd> AliceMeows: "It's" PLZ
[03:42:59] <AliceMeows> cbreak: out_ptr/inout_ptr technically does that already
[03:43:05] <AliceMeows> I'm not english  btw
[03:43:09] <jdavfsxd> ah
[03:43:18] <jdavfsxd> nor me but....
[03:43:20] <jdavfsxd> :P
[03:43:55] <AliceMeows> Good catch though, I try to avoid that terrible mistake most of the time but tiredness takes over at times so...
[03:45:17] <jdavfsxd> AliceMeows: it's the first time I see someone doing the reversal typo, most, often native speakers, use "it's"  for "its".
[03:45:28] <jdavfsxd> it's the more common kind.
[03:47:20] <AliceMeows> Eelis and cbreak: https://wg21.link/p1132r8 I suggest going through this and specifically 4.1
[03:47:24] *** Joins: seninha (~seninha@user/seninha)
[03:48:41] <cbreak> jdavfsxd: That's only for when its pizza's!
[03:49:11] <AliceMeows> https://wg21.link/p1132r8#experience-wrapping here is a direct link which I wasn't even sure if it'll work or not
[03:51:22] *** Joins: bittersweetsymph (uid509475@id-509475.lymington.irccloud.com)
[03:51:31] <Eelis> AliceMeows: giving that citation would make a lot of sense if i had argued that out_ptr had no legitimate use cases. i didn't
[03:52:10] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.4)
[03:52:22] <jdavfsxd> cbreak: :-!
[03:52:57] *** Quits: m_ben (~m_ben@user/m-ben/x-7429725) (Quit: WeeChat 3.4.1)
[03:53:42] *** Joins: Viewday1150 (~Viewday@user/viewday)
[03:53:47] <kalven> those performance measurements are funny
[03:55:09] *** Quits: Forsaken87 (~quassel@ip-037-201-193-116.um10.pools.vodafone-ip.de) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[03:55:11] *** Quits: Viewday115 (~Viewday@user/viewday) (Read error: Connection reset by peer)
[03:55:11] *** Viewday1150 is now known as Viewday115
[03:57:51] *** Quits: cosimone (~user@93-44-187-176.ip98.fastwebnet.it) (Quit: ERC (IRC client for Emacs 27.1))
[03:57:52] *** Joins: arch_angel (~arch-ange@user/arch-angel)
[03:58:12] *** Quits: geowiesnot (~user@5-51-190-244.abo.bbox.fr) (Ping timeout: 240 seconds)
[04:03:28] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[04:04:17] *** Quits: zmt00 (~zmt00@user/zmt00) (Ping timeout: 240 seconds)
[04:04:55] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[04:06:33] *** Quits: mathe8989 (~wellmathe@dhcp-138-246-3-71.dynamic.eduroam.mwn.de) (Ping timeout: 268 seconds)
[04:08:15] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[04:08:19] *** Quits: bittersweetsymph (uid509475@id-509475.lymington.irccloud.com) ()
[04:14:00] *** Joins: cosimone (~user@93-44-187-176.ip98.fastwebnet.it)
[04:14:09] *** Joins: hiroshi_ (~freedom@151.35.190.68)
[04:17:05] *** Quits: senoraraton (~senorarat@c-67-160-210-246.hsd1.ca.comcast.net) (Ping timeout: 256 seconds)
[04:17:19] *** Quits: jplejacq (~jplejacq@68.71.169.160) (Ping timeout: 256 seconds)
[04:19:56] *** Quits: reset (~reset@user/reset) (Quit: reset)
[04:21:25] *** Quits: Burgundy (~NA@5-12-91-184.residential.rdsnet.ro) (Ping timeout: 240 seconds)
[04:22:32] *** Quits: TheHermann (~TheHerman@gateway/tor-sasl/thehermann) (Quit: Leaving)
[04:25:54] *** Quits: cosimone (~user@93-44-187-176.ip98.fastwebnet.it) (Quit: ERC (IRC client for Emacs 27.1))
[04:26:16] *** Joins: nicbk (~nicbk@user/nicbk)
[04:26:18] *** Quits: unixpro1970 (~unixpro19@c-67-168-1-124.hsd1.wa.comcast.net) (Remote host closed the connection)
[04:27:12] *** Quits: Praise (~Fat@user/praise) (Remote host closed the connection)
[04:27:48] *** Joins: geowiesnot (~user@5-51-190-244.abo.bbox.fr)
[04:28:21] *** Joins: Praise (~Fat@user/praise)
[04:32:35] *** Quits: Fairy (~Fairy@2001:464a:4992:0:5813:fe5c:3e8c:63aa) (Read error: Connection reset by peer)
[04:32:55] *** Joins: Fairy (~Fairy@2001:464a:4992:0:5813:fe5c:3e8c:63aa)
[04:33:15] *** Quits: nicbk (~nicbk@user/nicbk) (Ping timeout: 240 seconds)
[04:33:48] *** Joins: bindu_ (~bindu@user/bindu)
[04:34:12] *** Quits: bindu (~bindu@user/bindu) (Remote host closed the connection)
[04:34:36] *** Joins: chenqisu1 (~chenqisu1@183.217.201.47)
[04:34:40] *** Joins: Xardas (~Xardas@149.233.51.127)
[04:35:44] *** bindu_ is now known as bindu
[04:40:59] *** Quits: CodePoint (~CodePoint@107-208-128-79.lightspeed.tukrga.sbcglobal.net) (Quit: CodePoint struts into the sunset on the beach.)
[04:44:07] *** Quits: str0 (~str0@178.220.28.32) (Quit: Leaving)
[04:45:17] *** Quits: HvszrStykp (~X@81.171.62.87) (Ping timeout: 240 seconds)
[04:45:25] *** Quits: evangeline (~Eleanor@178.79.105.181) (Ping timeout: 240 seconds)
[04:46:29] *** Quits: ckdCreations (~ckdCreati@147.55.130.35) (Read error: Connection reset by peer)
[04:46:45] *** Joins: ckdCreations (~ckdCreati@c-73-140-151-116.hsd1.wa.comcast.net)
[04:46:55] *** Quits: ckdCreations (~ckdCreati@c-73-140-151-116.hsd1.wa.comcast.net) (Read error: Connection reset by peer)
[04:52:03] *** Quits: zeenk (~zeenk@2a02:2f04:a110:7d00:2011:cfed:bad7:3c94) (Quit: Konversation terminated!)
[04:55:29] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Quit: Ex-Chat)
[04:57:21] *** Joins: nicbk (~nicbk@user/nicbk)
[04:58:37] *** Quits: Enitin (~Enitin@82.180.145.226) (Ping timeout: 240 seconds)
[05:05:34] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:18b3:ab56:6ddb:c942) (Quit: Textual IRC Client: www.textualapp.com)
[05:05:36] *** Joins: Enitin (~Enitin@82.102.22.86)
[05:07:51] *** Quits: mattallmill (~mattallmi@ip68-103-130-85.ks.ok.cox.net) (Ping timeout: 245 seconds)
[05:12:09] *** Quits: Hokedli (~lasliedv@gateway/tor-sasl/hokedli) (Quit: Konversation terminated!)
[05:13:03] *** Quits: AliceMeows (~AliceMeow@user/alicemeows) (Remote host closed the connection)
[05:13:06] *** Joins: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse)
[05:13:28] *** Joins: AliceMeows (~AliceMeow@user/alicemeows)
[05:13:51] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[05:14:07] *** Joins: kaiseisei (~Thunderbi@user/kaiseisei)
[05:14:59] *** Quits: hiroshi_ (~freedom@151.35.190.68) (Quit: hiroshi_)
[05:15:00] *** Joins: dansan (~daniel@75.81.148.51)
[05:15:07] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 256 seconds)
[05:16:03] *** Joins: senoraraton (~senorarat@c-67-160-210-246.hsd1.ca.comcast.net)
[05:17:54] *** Joins: fengdaolong (~fengdaolo@171.43.210.166)
[05:18:01] *** Quits: tapeworm (~tapeworm@188.168.50.119) (Read error: Connection reset by peer)
[05:18:43] *** Quits: Flonk (~Flonk@vps-zap441517-1.zap-srv.com) (Quit: Ping timeout (120 seconds))
[05:19:13] *** Joins: Flonk (~Flonk@vps-zap441517-1.zap-srv.com)
[05:21:06] *** Joins: zer0x (~zer0x@42.113.144.44)
[05:22:00] *** Quits: Flonk (~Flonk@vps-zap441517-1.zap-srv.com) (Client Quit)
[05:22:24] *** Joins: Flonk (~Flonk@vps-zap441517-1.zap-srv.com)
[05:22:39] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[05:23:20] *** Joins: Zogatribe (Zogatribe@user/zogatribe)
[05:27:30] *** Quits: senoraraton (~senorarat@c-67-160-210-246.hsd1.ca.comcast.net) (Ping timeout: 252 seconds)
[05:28:36] *** Quits: geowiesnot (~user@5-51-190-244.abo.bbox.fr) (Ping timeout: 252 seconds)
[05:29:42] *** Quits: treble (~treble@user/treble) (Quit: WeeChat 3.4.1)
[05:33:00] *** Quits: seninha (~seninha@user/seninha) (Ping timeout: 252 seconds)
[05:33:17] *** Quits: bebyx (~Thunderbi@user/bebyx) (Ping timeout: 250 seconds)
[05:36:05] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Remote host closed the connection)
[05:36:24] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[05:36:54] *** Quits: xbkkd (~F0@user/xbkkd) (Remote host closed the connection)
[05:37:25] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[05:43:00] *** Joins: rgrinberg (~textual@fixed-186-96-26-198.totalplay.net)
[05:46:07] *** Quits: kaiseisei (~Thunderbi@user/kaiseisei) (Quit: kaiseisei)
[05:46:44] *** Quits: Flonk (~Flonk@vps-zap441517-1.zap-srv.com) (Quit: Ping timeout (120 seconds))
[05:46:46] *** Joins: senoraraton (~senorarat@c-67-160-210-246.hsd1.ca.comcast.net)
[05:46:54] *** Joins: kaiseisei (~Thunderbi@user/kaiseisei)
[05:47:00] *** Joins: Flonk (~Flonk@vps-zap441517-1.zap-srv.com)
[05:48:25] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Remote host closed the connection)
[05:49:44] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[05:50:03] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[05:50:36] *** Quits: hagabaka (~hagabaka@quassel.woboq.com) (Ping timeout: 252 seconds)
[05:53:14] *** Joins: geowiesnot (~user@5-51-190-244.abo.bbox.fr)
[05:53:28] *** Joins: Viewday1154 (~Viewday@user/viewday)
[05:54:06] *** Quits: rgrinberg (~textual@fixed-186-96-26-198.totalplay.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[05:55:32] *** Quits: Viewday115 (~Viewday@user/viewday) (Ping timeout: 252 seconds)
[05:55:32] *** Viewday1154 is now known as Viewday115
[05:55:59] *** Joins: rgrinberg (~textual@fixed-186-96-26-198.totalplay.net)
[05:58:45] *** Quits: geowiesnot (~user@5-51-190-244.abo.bbox.fr) (Ping timeout: 256 seconds)
[06:01:03] *** Quits: rgrinberg (~textual@fixed-186-96-26-198.totalplay.net) (Ping timeout: 252 seconds)
[06:02:09] *** Quits: senoraraton (~senorarat@c-67-160-210-246.hsd1.ca.comcast.net) (Ping timeout: 252 seconds)
[06:04:03] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[06:08:11] *** Quits: obiwahn (~heini@user/obiwahn) (Ping timeout: 256 seconds)
[06:08:37] *** Joins: obiwahn (~heini@user/obiwahn)
[06:08:57] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[06:11:11] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.4.1)
[06:15:54] *** Joins: senoraraton (~senorarat@c-67-160-210-246.hsd1.ca.comcast.net)
[06:17:56] *** Joins: ferdna (~ferdna@user/ferdna)
[06:21:30] *** Joins: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net)
[06:25:41] *** Quits: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net) (Client Quit)
[06:25:51] *** Joins: rgrinberg (~textual@fixed-186-96-26-198.totalplay.net)
[06:26:00] *** Joins: vin (~vin@user/crash)
[06:26:26] <vin> Why am I getting a no match for operator = when I have clearly defined one https://godbolt.org/z/xKfznY39s ?
[06:30:12] *** Quits: rgrinberg (~textual@fixed-186-96-26-198.totalplay.net) (Ping timeout: 240 seconds)
[06:30:36] <Alipha> vin: did you mean to make keys_idx an array of 2 vectors?
[06:30:52] <Alipha> Did you mean (2) instead of [2]?
[06:31:00] *** Quits: Yruama (~Yruama@2a01:cb15:8128:c100:6c61:6a53:9bf0:64ca) (Quit: Leaving)
[06:31:19] <Batzy> https://bpa.st/DVTQ why does this print 0 as opposed to 1? 13 is clearly in the array. arr[0] here actually prints 13 too
[06:33:22] *** Joins: CCCG2022 (~dell@120.245.30.14)
[06:33:37] <vin> Ah my bad, yes Alipha
[06:34:12] *** Quits: senoraraton (~senorarat@c-67-160-210-246.hsd1.ca.comcast.net) (Ping timeout: 240 seconds)
[06:34:12] *** Quits: jiffe (~jiffe@47-220-182-140.gtwncmkt04.res.dyn.suddenlink.net) (Ping timeout: 240 seconds)
[06:35:11] <vin> Alipha: In this example https://godbolt.org/z/36fnbM4sz why doesn't line 88 work?
[06:35:15] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[06:35:21] <vin> compared to 89 and 90
[06:36:41] *** Joins: jiffe (~jiffe@47-220-182-140.gtwncmkt04.res.dyn.suddenlink.net)
[06:38:53] *** Joins: rootx74 (~rootx74@user/rootx74)
[06:38:55] *** Joins: senoraraton (~senorarat@c-67-160-210-246.hsd1.ca.comcast.net)
[06:39:00] <AliceMeows> Batzy: the array must be sorted
[06:39:47] <Batzy> *facepalm*
[06:39:54] <Batzy> it is in my actual code i was just testing in a repl
[06:39:55] <Batzy> ok ty
[06:41:36] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[06:41:56] *** Quits: Xardas (~Xardas@149.233.51.127) (Quit: Client closed)
[06:42:25] *** Joins: hashfunc569 (~user@2601:5c0:c280:7090:78e9:5f82:1899:8c96)
[06:42:31] <Alipha> vin: the code compiles. It's warning about you not defining corresponding constructors for your assignment operators
[06:44:17] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[06:44:26] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[06:44:26] *** ChanServ sets mode: +v npaperbot
[06:46:34] <vin> Alipha: sure it compiles but look at the value returned for line 91 and 92, they are different
[06:46:39] <vin> When I expected them to be the same
[06:49:36] <AliceMeows> Batzy: https://godbolt.org/z/dYPG8bo44
[06:51:30] *** Joins: HvszrStykp (~X@81.171.62.87)
[06:53:31] *** Joins: Carbonflux (~Carbonflu@c-66-235-54-179.sea.wa.customer.broadstripe.net)
[06:56:18] *** Joins: unixpro1970 (~unixpro19@c-67-168-1-124.hsd1.wa.comcast.net)
[06:58:12] *** Quits: lxsameer (~lxsameer@user/lxsameer) (Ping timeout: 240 seconds)
[07:00:34] *** Joins: geowiesnot (~user@5-51-190-244.abo.bbox.fr)
[07:02:57] *** Quits: hashfunc569 (~user@2601:5c0:c280:7090:78e9:5f82:1899:8c96) (Ping timeout: 240 seconds)
[07:05:27] *** Joins: hashfunc569 (~user@2601:5c0:c280:7090:78e9:5f82:1899:8c96)
[07:06:45] *** Quits: senoraraton (~senorarat@c-67-160-210-246.hsd1.ca.comcast.net) (Ping timeout: 256 seconds)
[07:07:56] *** Joins: senoraraton (~senorarat@c-67-160-210-246.hsd1.ca.comcast.net)
[07:09:42] *** Quits: vin (~vin@user/crash) (Quit: WeeChat 2.8)
[07:11:49] *** Quits: geowiesnot (~user@5-51-190-244.abo.bbox.fr) (Ping timeout: 240 seconds)
[07:12:35] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[07:16:28] *** Joins: Inline__ (~Inline@p200300cd4709ad00c6efe95d186eec52.dip0.t-ipconnect.de)
[07:18:42] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[07:18:47] *** Quits: Inline (~Inline@p200300cd470e6400705287adc1f2aa0f.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[07:21:10] <RandomReader> jdavfsxd - the library fundamentals TS V3 isn't published yet, so there aren't any implementations: https://en.cppreference.com/w/cpp/experimental
[07:22:32] <RandomReader> so even less "support" than C++23, in practical terms .. also without a publishing target date to look forward to
[07:23:19] *** Quits: badone (~badone@209.132.189.136) (Quit: ZNC 1.7.5 - https://znc.in)
[07:23:23] *** Stryykert is now known as Stryyker
[07:24:44] <jdavfsxd> RandomReader: k, but was not the sole example. See format.
[07:25:08] <jdavfsxd> cccckbkkriudcuhjnhdjucijtgtijccrvrbbbkfdvr
[07:26:47] <jdavfsxd> sigh
[07:26:51] <jdavfsxd> sorry
[07:29:15] <RandomReader> yeah, format support is just behind .. libc++ current has it, so next release (due soon I think?), dunno on libstdc++
[07:30:07] <RandomReader> C++20 has had some pretty large additions, and my impression (from a distance) is that there's been a bit less people-support for the stdlib implementations recently
[07:30:28] <jdavfsxd> :/
[07:30:37] <jdavfsxd> I have the same impression
[07:31:17] <RandomReader> Microsoft has really stepped up with theirs, which is impressive, but doesn't really help much for all the other platforms
[07:35:55] *** Quits: nicbk (~nicbk@user/nicbk) (Ping timeout: 240 seconds)
[07:36:17] <AliceMeows> Until the big players get interested nothing gets done
[07:36:21] *** Quits: imi (~imi@catv-89-132-115-236.catv.fixed.vodafone.hu) (Ping timeout: 250 seconds)
[07:38:08] *** Joins: nicbk (~nicbk@user/nicbk)
[07:38:24] <jdavfsxd> if impls end up increasingly kinda stuck with things forever undone, there's no purpose in additional standards, the language is literally dead.
[07:39:03] *** Quits: Zogatribe (Zogatribe@user/zogatribe) (Read error: Connection reset by peer)
[07:39:24] <AliceMeows> It takes time
[07:40:37] *** Quits: senoraraton (~senorarat@c-67-160-210-246.hsd1.ca.comcast.net) (Ping timeout: 240 seconds)
[07:43:55] *** Joins: pulse (~pulse@user/pulse)
[07:43:55] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[07:46:08] *** Joins: hagabaka (~hagabaka@quassel.woboq.com)
[07:47:50] <rootx74> guys how can we link binary program actually ?
[07:48:18] <AliceMeows> rootx74: that is what a linker is for
[07:48:36] *** Joins: imi (~imi@catv-89-132-115-236.catv.fixed.vodafone.hu)
[07:49:10] *** Quits: KAHR-Alpha (~Alpha@2a01cb0d024a66002c92c285d35cae12.ipv6.abo.wanadoo.fr) (Ping timeout: 268 seconds)
[07:50:01] <rootx74> oh ?
[07:50:06] <rootx74> mind to explain ?
[07:50:22] <rootx74> is binary
[07:50:24] <rootx74> 010100101
[07:50:42] <AliceMeows> rootx74: linker does all the heavy work for you but that really isn't the place to ask about it
[07:51:00] <rootx74> ahhh i see
[07:51:07] <rootx74> so how linker work guys ?
[07:51:19] <rootx74> you sure it cna link 10010101001010 ?
[07:51:52] <AliceMeows> Something tells me you're not a programmer or you came here to troll
[07:53:34] *** Joins: Viewday1159 (~Viewday@user/viewday)
[07:55:06] *** Quits: Viewday115 (~Viewday@user/viewday) (Read error: Connection reset by peer)
[07:55:06] *** Viewday1159 is now known as Viewday115
[07:59:03] *** Quits: malloy (~jimery@116.30.221.173) (Ping timeout: 265 seconds)
[07:59:07] *** Quits: AliceMeows (~AliceMeow@user/alicemeows) (Quit: Leaving.)
[08:00:41] *** Joins: malloy (~jimery@116.30.221.173)
[08:01:40] *** Quits: llh (~UPP@user/llh) (Read error: Connection reset by peer)
[08:03:21] *** Quits: Starfoxxes (~Starfoxxe@2a02:8070:5390:d00:12bf:48ff:feb8:38c8) (Ping timeout: 268 seconds)
[08:05:09] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[08:05:40] *** Joins: Starfoxxes (~Starfoxxe@2a02:8070:5390:d00:12bf:48ff:feb8:38c8)
[08:06:15] *** Quits: belphegor666 (~satan@ip-046-223-002-003.um13.pools.vodafone-ip.de) (Ping timeout: 256 seconds)
[08:06:39] *** Joins: belphegor666 (~satan@ip-046-223-002-003.um13.pools.vodafone-ip.de)
[08:10:13] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[08:14:43] *** Quits: jdavfsxd (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Quit: jdavfsxd)
[08:17:10] *** Joins: ncwbqcfe (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[08:20:01] *** Joins: senoraraton (~senorarat@c-67-160-210-246.hsd1.ca.comcast.net)
[08:20:22] *** Quits: ncwbqcfe (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Client Quit)
[08:28:12] *** Quits: senoraraton (~senorarat@c-67-160-210-246.hsd1.ca.comcast.net) (Ping timeout: 240 seconds)
[08:31:27] *** Quits: froggy_ (~froggy@2.235.241.212) (Read error: Connection reset by peer)
[08:33:55] *** Joins: froggyc (~froggy@2-235-241-212.ip230.fastwebnet.it)
[08:42:23] *** Joins: senoraraton (~senorarat@c-67-160-210-246.hsd1.ca.comcast.net)
[08:47:05] *** Joins: ironman (~ironman@2405:201:1010:b026:5f00:b63f:4116:bd78)
[08:47:43] *** Joins: geowiesnot (~user@5-51-190-244.abo.bbox.fr)
[08:47:45] *** Joins: abode (~abode@2001:8f8:1263:f81:8230:49ff:fe6e:36b5)
[08:50:01] *** Quits: senoraraton (~senorarat@c-67-160-210-246.hsd1.ca.comcast.net) (Ping timeout: 250 seconds)
[09:00:15] *** Quits: rootx74 (~rootx74@user/rootx74) (Quit: Leaving)
[09:03:39] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[09:07:47] *** Quits: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br) (Ping timeout: 256 seconds)
[09:08:06] *** Quits: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it) (Read error: Connection reset by peer)
[09:08:29] *** Quits: karakedi (~eAC53C340@user/karakedi) (Remote host closed the connection)
[09:12:07] *** Quits: geowiesnot (~user@5-51-190-244.abo.bbox.fr) (Ping timeout: 250 seconds)
[09:13:22] <Batzy> typedef unsigned __int64 uint64;
[09:13:22] <Batzy> anyone know why this line has "error: expected initializer before ‘uint64’"
[09:13:31] <Batzy> i didnt mean for that to send in 2 lines, my bad
[09:13:52] *** Joins: Garbanzo__ (~Garbanzo@2602:304:6eac:dc10:fbf2:b01f:1d47:7542)
[09:19:58] *** Quits: skapata (~Skapata@user/skapata) (Quit: Ĝis.)
[09:24:32] *** Quits: sreve (~quassel@p4ff44c40.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[09:24:42] *** Joins: sreve (~quassel@p4ff44e04.dip0.t-ipconnect.de)
[09:40:15] *** Quits: nicbk (~nicbk@user/nicbk) (Ping timeout: 240 seconds)
[09:41:42] *** Joins: senoraraton (~senorarat@148-64-109-17.PUBLIC.monkeybrains.net)
[09:43:49] *** Joins: nicbk (~nicbk@user/nicbk)
[09:44:42] *** Joins: abode_ (~abode@94.59.225.33)
[09:45:26] *** Joins: jotoho (~jotoho@user/jotoho)
[09:46:53] *** Quits: abode (~abode@2001:8f8:1263:f81:8230:49ff:fe6e:36b5) (Ping timeout: 256 seconds)
[09:50:57] *** Quits: dansan (~daniel@75.81.148.51) (Quit: The C preprocessor is a pathway to many abilities some consider to be unnatural.)
[09:51:37] *** Joins: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it)
[09:53:43] *** Joins: Viewday1151 (~Viewday@user/viewday)
[09:55:11] *** Quits: Viewday115 (~Viewday@user/viewday) (Read error: Connection reset by peer)
[09:55:11] *** Viewday1151 is now known as Viewday115
[09:55:53] *** Quits: mudzap (~mudzap@2806:107e:f:64c7:ef6d:b82a:36c:d8f6) (Ping timeout: 250 seconds)
[09:58:33] *** Joins: zmt00 (~zmt00@user/zmt00)
[09:59:26] *** Joins: karakedi (~eAC53C340@user/karakedi)
[10:00:01] *** Quits: N4buc0 (~N4buc0@2804:7f4:348b:29b4:7f63:bd57:a0b4:7bb5) (Remote host closed the connection)
[10:00:43] *** Joins: N4buc0 (~N4buc0@2804:7f4:348b:29b4:7f63:bd57:a0b4:7bb5)
[10:03:32] *** Joins: slidercrank (~slidercra@user/slidercrank)
[10:06:15] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[10:10:55] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[10:11:10] *** Quits: Hello71 (~Hello71@wireguard/contributor/hello71) (Remote host closed the connection)
[10:15:30] *** Quits: jotoho (~jotoho@user/jotoho) (Quit: Closing client)
[10:16:07] *** Joins: Hello71 (~Hello71@wireguard/contributor/hello71)
[10:16:15] *** Quits: zer0x (~zer0x@42.113.144.44) (Ping timeout: 252 seconds)
[10:19:15] *** Joins: SGautam (uid286066@id-286066.ilkley.irccloud.com)
[10:29:03] *** Quits: senoraraton (~senorarat@148-64-109-17.PUBLIC.monkeybrains.net) (Ping timeout: 256 seconds)
[10:31:40] *** Joins: rootx74 (~root@108.61.89.107)
[10:32:03] *** Joins: j0hn_mc_clane (~j0hn_mc_c@dD577050E.access.telenet.be)
[10:32:20] *** Quits: rootx74 (~root@108.61.89.107) (Changing host)
[10:32:20] *** Joins: rootx74 (~root@user/rootx74)
[10:35:12] *** Quits: peeps[zen] (~peepsalot@openscad/peepsalot) (Quit: Connection reset by peep)
[10:42:39] *** Quits: j0hn_mc_clane (~j0hn_mc_c@dD577050E.access.telenet.be) (Ping timeout: 256 seconds)
[10:44:17] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[10:44:37] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[10:44:37] *** ChanServ sets mode: +v npaperbot
[10:45:23] *** Joins: seninha (~seninha@user/seninha)
[10:47:47] *** Joins: dansan (~daniel@75.81.148.51)
[10:47:48] *** Quits: Garbanzo__ (~Garbanzo@2602:304:6eac:dc10:fbf2:b01f:1d47:7542) (Ping timeout: 240 seconds)
[10:56:08] *** Quits: rvalue (~rvalue@user/rvalue) (Read error: Connection reset by peer)
[10:58:05] *** Joins: rvalue (~rvalue@user/rvalue)
[11:00:52] *** Joins: Giovanni (~Giovanni@176.67.166.45)
[11:08:35] *** Quits: nicbk (~nicbk@user/nicbk) (Ping timeout: 240 seconds)
[11:13:31] *** Quits: great_taste (~great_tas@user/great-taste/x-5798414) (Quit: Client closed)
[11:15:24] *** Joins: rgrinberg (~textual@fixed-186-96-26-198.totalplay.net)
[11:21:33] *** Quits: malloy (~jimery@116.30.221.173) (Ping timeout: 265 seconds)
[11:22:19] *** Joins: zer0bitz (~zer0bitz@dsl-hkibng32-54fbf8-224.dhcp.inet.fi)
[11:23:22] *** Joins: malloy (~jimery@116.30.221.173)
[11:24:06] *** Joins: zer0x (~zer0x@42.113.144.44)
[11:27:35] *** Joins: g0se (~goose@111.199.80.15)
[11:28:06] *** Joins: Forsaken87 (~quassel@ip-037-201-193-116.um10.pools.vodafone-ip.de)
[11:29:05] *** Quits: N4buc0 (~N4buc0@2804:7f4:348b:29b4:7f63:bd57:a0b4:7bb5) (Remote host closed the connection)
[11:29:25] *** Joins: N4buc0 (~N4buc0@2804:7f4:348b:29b4:7f63:bd57:a0b4:7bb5)
[11:33:47] *** Quits: emerent (~quassel@p200300cd5743c3f3ba27ebfffed28a59.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[11:34:01] *** Joins: emerent (~quassel@p200300cd5743c377ba27ebfffed28a59.dip0.t-ipconnect.de)
[11:34:12] *** Quits: Enitin (~Enitin@82.102.22.86) (Ping timeout: 240 seconds)
[11:35:00] *** Joins: j0hn_mc_clane (~j0hn_mc_c@ptr-fqhhm12iua58a0gd4hj.18120a2.ip6.access.telenet.be)
[11:35:21] *** Quits: Atque (~Atque@user/atque) (Remote host closed the connection)
[11:35:58] *** Joins: Atque (~Atque@user/atque)
[11:36:37] *** Joins: predawn (~predawn@223.233.73.96)
[11:42:22] *** Joins: JohnMS_WORK (~kvirc@194.110.240.100)
[11:45:56] *** Joins: jsbach (~jsbach@2a01:c23:61a1:e900:82f3:2db5:ad58:cd06)
[11:46:50] *** Joins: KimK (~KimK@ip98-186-40-208.ks.ks.cox.net)
[11:50:18] *** Quits: rgrinberg (~textual@fixed-186-96-26-198.totalplay.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[11:51:42] *** Joins: evangeline (~Eleanor@178.79.105.181)
[11:53:55] *** Joins: Viewday1157 (~Viewday@user/viewday)
[11:54:56] *** Quits: predawn (~predawn@223.233.73.96) (Changing host)
[11:54:56] *** Joins: predawn (~predawn@user/predawn)
[11:55:24] *** Quits: Viewday115 (~Viewday@user/viewday) (Read error: Connection reset by peer)
[11:55:24] *** Viewday1157 is now known as Viewday115
[11:56:37] *** Quits: hashfunc569 (~user@2601:5c0:c280:7090:78e9:5f82:1899:8c96) (Ping timeout: 240 seconds)
[12:03:40] *** Quits: bitmask (~bitmask@c-73-215-237-27.hsd1.nj.comcast.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[12:05:05] *** Quits: N4buc0 (~N4buc0@2804:7f4:348b:29b4:7f63:bd57:a0b4:7bb5) (Ping timeout: 268 seconds)
[12:06:29] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:94ac:9102:da39:4ffe)
[12:06:40] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[12:07:20] *** Quits: pulse (~pulse@user/pulse) (Quit: { https://indiedevs.net/ })
[12:07:51] *** Parts: predawn (~predawn@user/predawn) ()
[12:09:18] *** Quits: BluesBoy (~bboy@user/bluesboy) (Quit: leaving)
[12:10:57] *** Joins: andreasbuhr (~quassel@p549db93e.dip0.t-ipconnect.de)
[12:11:03] *** Joins: jellie (~luv_panda@user/jellie)
[12:11:37] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[12:16:19] *** Joins: mathe8989 (~wellmathe@dhcp-138-246-3-71.dynamic.eduroam.mwn.de)
[12:16:43] *** Joins: Payam67 (~Payam@138.106.57.131)
[12:20:27] *** Joins: reset (~reset@user/reset)
[12:23:03] *** Quits: ville (~ville@user/ville) (Quit: ville)
[12:23:24] *** Joins: BluesBoy (~bboy@user/bluesboy)
[12:24:15] *** Joins: ville (~ville@user/ville)
[12:26:13] <zz> Batzy: because __int64 is unknown
[12:28:59] *** Joins: zeenk (~zeenk@2a02:2f04:a110:7d00:2011:cfed:bad7:3c94)
[12:32:01] *** Joins: PlasmaHH (~PlasamaHH@user/plasmahh)
[12:32:35] *** Quits: jellie (~luv_panda@user/jellie) (Ping timeout: 256 seconds)
[12:35:57] *** Quits: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it) (Ping timeout: 252 seconds)
[12:38:05] *** Joins: interop_madness (~interop_m@user/interop-madness/x-0950004)
[12:49:15] *** Joins: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it)
[12:51:27] *** Quits: rvalue (~rvalue@user/rvalue) (Ping timeout: 265 seconds)
[12:51:29] *** Joins: rvalue- (~rvalue@user/rvalue)
[12:56:08] *** rvalue- is now known as rvalue
[12:57:46] *** Joins: bolovanos (~bolovanos@user/bolovanos)
[13:02:14] *** Quits: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it) (Read error: Connection reset by peer)
[13:02:26] *** Joins: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it)
[13:03:52] *** Joins: Enitin (~Enitin@82.180.145.226)
[13:04:01] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:94ac:9102:da39:4ffe) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[13:06:42] *** Joins: pulse (~pulse@user/pulse)
[13:08:12] *** Joins: peepsalot (~peepsalot@openscad/peepsalot)
[13:08:29] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:f91d:204d:f24c:a043)
[13:13:40] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[13:16:06] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:f91d:204d:f24c:a043) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[13:16:44] *** Joins: LucaTM (~LucaTM@user/lucatm)
[13:20:45] *** Quits: C-Man (~C-Man@static.187.59.243.136.clients.your-server.de) (Ping timeout: 256 seconds)
[13:23:25] *** Joins: zibolo (~quassel@global-deiInside018.dei.polimi.it)
[13:25:57] *** Quits: spithash (~spithash@user/spithash) (Remote host closed the connection)
[13:27:25] *** Joins: MajorBiscuit (~MajorBisc@wlan-145-94-219-172.wlan.tudelft.nl)
[13:29:04] *** Joins: rendar (~rendar@user/rendar)
[13:29:06] *** Quits: MajorBiscuit (~MajorBisc@wlan-145-94-219-172.wlan.tudelft.nl) (Client Quit)
[13:32:34] *** Joins: PJBoy (~PJBoy@user/pjboy)
[13:34:58] *** Quits: imi (~imi@catv-89-132-115-236.catv.fixed.vodafone.hu) (Quit: Leaving)
[13:36:27] *** Quits: zer0x (~zer0x@42.113.144.44) (Ping timeout: 252 seconds)
[13:36:46] *** Joins: wakeup (~wakeup@user/wakeup)
[13:37:00] *** Quits: TheCoffeMaker (~TheCoffeM@user/thecoffemaker) (Ping timeout: 240 seconds)
[13:39:32] *** Joins: zer0x (~zer0x@42.113.144.44)
[13:39:56] *** Quits: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it) (Ping timeout: 245 seconds)
[13:41:21] *** Joins: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it)
[13:41:42] *** Quits: j0hn_mc_clane (~j0hn_mc_c@ptr-fqhhm12iua58a0gd4hj.18120a2.ip6.access.telenet.be) (Quit: Leaving)
[13:41:57] *** Joins: j0hn_mc_clane (~j0hn_mc_c@ptr-fqhhm12iua58a0gd4hj.18120a2.ip6.access.telenet.be)
[13:45:16] *** Joins: sa02irc (~mbax@155-079-043-212.ip-addr.inexio.net)
[13:45:33] *** Quits: sa02irc (~mbax@155-079-043-212.ip-addr.inexio.net) (Remote host closed the connection)
[13:47:02] *** Quits: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it) (Remote host closed the connection)
[13:48:38] *** Quits: SGautam (uid286066@id-286066.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[13:49:09] *** Joins: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it)
[13:53:31] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[13:57:49] *** Quits: pulse (~pulse@user/pulse) (Quit: { https://indiedevs.net/ })
[13:58:26] *** Quits: chenqisu1 (~chenqisu1@183.217.201.47) (Quit: Leaving)
[14:01:20] *** Joins: MajorBiscuit (~MajorBisc@wlan-145-94-219-172.wlan.tudelft.nl)
[14:08:45] *** Joins: cosimone (~user@93-44-187-176.ip98.fastwebnet.it)
[14:10:50] *** Joins: pulse (~pulse@user/pulse)
[14:10:57] *** Quits: bolovanos (~bolovanos@user/bolovanos) (Ping timeout: 256 seconds)
[14:15:52] *** Quits: highrate (~presonic@user/highrate) (Read error: Connection reset by peer)
[14:16:56] *** Joins: highrate (~presonic@111-22-237-24.gci.net)
[14:17:23] *** Joins: lxsameer (~lxsameer@user/lxsameer)
[14:17:25] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[14:20:39] *** Joins: bolovanos (~bolovanos@user/bolovanos)
[14:22:35] *** Quits: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it) (Ping timeout: 250 seconds)
[14:25:43] *** Quits: j0hn_mc_clane (~j0hn_mc_c@ptr-fqhhm12iua58a0gd4hj.18120a2.ip6.access.telenet.be) (Remote host closed the connection)
[14:34:06] *** Joins: j0hn_mc_clane (~j0hn_mc_c@ptr-fqhhm12iua58a0gd4hj.18120a2.ip6.access.telenet.be)
[14:34:11] *** Quits: proller (~p@2a02:6b8:b081:b486::1:1b) (Ping timeout: 256 seconds)
[14:36:22] *** Joins: TheCoffeMaker (~TheCoffeM@user/thecoffemaker)
[14:36:44] *** Joins: TheHermann (~TheHerman@gateway/tor-sasl/thehermann)
[14:36:57] <mgaunard> was there a channel for C++ build systems
[14:44:18] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[14:44:27] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[14:44:27] *** ChanServ sets mode: +v npaperbot
[14:45:11] *** Quits: TheCoffeMaker (~TheCoffeM@user/thecoffemaker) (Ping timeout: 256 seconds)
[14:47:08] *** Joins: TheCoffeMaker (~TheCoffeM@user/thecoffemaker)
[14:47:49] *** Joins: GreyXor (~GreyXor@82.66.31.64)
[14:49:18] <TinoDidriksen> mgaunard, #C++-general also handles that.
[14:49:23] <TinoDidriksen> !otherchannels
[14:49:24] <nolyc> #C++ (strictly Standard C++), #c++-basic (for learners and newbies), #C++-general (non-standard but still related to C++), #c++-social (anything goes), and #geordi
[14:51:10] <CarloWood> I still think that the non-programmers that are just trolling and insulting people and don't know C++ should be kicked out of #c++-social ...
[14:51:22] *** Quits: pulse (~pulse@user/pulse) (Quit: { https://indiedevs.net/ })
[14:53:36] *** Quits: GreyXor (~GreyXor@82.66.31.64) (Quit: Client closed)
[14:54:38] *** Joins: GreyXor (~GreyXor@82.66.31.64)
[14:55:01] *** Quits: manx (xuew@p200300e18f3aa800022215fffe03cf97.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[14:55:47] *** Joins: manx (xuew@p200300e18f16de00022215fffe03cf97.dip0.t-ipconnect.de)
[14:57:01] *** Quits: wakeup (~wakeup@user/wakeup) (Quit: Client closed)
[14:57:39] *** Quits: Payam67 (~Payam@138.106.57.131) (Ping timeout: 256 seconds)
[15:01:25] *** Quits: Enitin (~Enitin@82.180.145.226) (Ping timeout: 240 seconds)
[15:04:03] *** Quits: peepsalot (~peepsalot@openscad/peepsalot) (Quit: Connection reset by peep)
[15:04:56] *** Joins: jplejacq (~jplejacq@24.224.90.176)
[15:06:27] *** Joins: C-Man (~C-Man@static.88-198-34-209.clients.your-server.de)
[15:07:26] *** Joins: wib_jonas (~wib_jonas@business-37-191-60-209.business.broadband.hu)
[15:10:18] *** Quits: GreyXor (~GreyXor@82.66.31.64) (Quit: Client closed)
[15:11:01] *** Quits: kaiseisei (~Thunderbi@user/kaiseisei) (Ping timeout: 256 seconds)
[15:11:25] *** Quits: Carbonflux (~Carbonflu@c-66-235-54-179.sea.wa.customer.broadstripe.net) (Quit: When all you have are solutions, everything is a problem.)
[15:15:37] *** Joins: dyeplexer (~dyeplexer@user/dyeplexer)
[15:17:07] *** Joins: lh_cat (~lh_mouse@mingw-w64/developer/lhmouse)
[15:17:54] *** Joins: unknow (~i.am@user/marlboro)
[15:18:03] *** Quits: fengdaolong (~fengdaolo@171.43.210.166) (Ping timeout: 250 seconds)
[15:19:47] *** Quits: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse) (Read error: Connection reset by peer)
[15:22:20] *** Quits: abode_ (~abode@94.59.225.33) (Remote host closed the connection)
[15:23:18] *** Quits: AbleBacon (~AbleBacon@user/AbleBacon) (Read error: Connection reset by peer)
[15:25:25] *** Quits: CCCG2022 (~dell@120.245.30.14) (Quit: Leaving.)
[15:25:27] *** Quits: hackkitten (~hackkitte@94.31.104.136) (Read error: Connection reset by peer)
[15:25:50] *** Joins: hackkitten (~hackkitte@94.31.104.136)
[15:27:06] *** Quits: j0hn_mc_clane (~j0hn_mc_c@ptr-fqhhm12iua58a0gd4hj.18120a2.ip6.access.telenet.be) (Remote host closed the connection)
[15:28:25] *** Quits: useretail (~useretail@185.132.19.151) (Read error: Connection reset by peer)
[15:29:00] *** Quits: luna-is-here (~quassel@2a02:908:f761:2a3c::a) (Remote host closed the connection)
[15:31:49] *** Joins: luna-is-here (~quassel@2a02:908:f761:2a3c::a)
[15:31:57] *** Quits: belphegor666 (~satan@ip-046-223-002-003.um13.pools.vodafone-ip.de) (Ping timeout: 252 seconds)
[15:33:11] *** Joins: belphegor666 (~satan@ip-046-223-002-003.um13.pools.vodafone-ip.de)
[15:34:48] *** Parts: jplejacq (~jplejacq@24.224.90.176) (Leaving.)
[15:39:46] *** Joins: Burgundy (~NA@5-12-91-184.residential.rdsnet.ro)
[15:40:29] *** Quits: zer0bitz (~zer0bitz@dsl-hkibng32-54fbf8-224.dhcp.inet.fi) (Ping timeout: 256 seconds)
[15:40:50] *** Joins: zer0bitz (~zer0bitz@dsl-hkibng32-54fbf8-224.dhcp.inet.fi)
[15:42:55] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.4.1)
[15:49:22] *** Joins: Enitin (~Enitin@82.180.145.227)
[15:51:41] *** Joins: chenqisu1 (~chenqisu1@183.217.201.47)
[15:54:24] *** Quits: Viewday115 (~Viewday@user/viewday) (Quit: Ping timeout (120 seconds))
[15:54:39] *** Joins: Viewday115 (~Viewday@user/viewday)
[15:56:26] *** Joins: jellie (~luv_panda@user/jellie)
[16:04:32] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[16:05:13] *** Joins: peepsalot (~peepsalot@openscad/peepsalot)
[16:05:17] *** Quits: meicceli (meicceli@kapsi.fi) (Ping timeout: 250 seconds)
[16:05:27] *** Joins: Coldberg (~C-Man@static.88-198-34-209.clients.your-server.de)
[16:05:49] *** Quits: TheCoffeMaker (~TheCoffeM@user/thecoffemaker) (Ping timeout: 240 seconds)
[16:07:00] *** Quits: belphegor666 (~satan@ip-046-223-002-003.um13.pools.vodafone-ip.de) (Changing host)
[16:07:00] *** Joins: belphegor666 (~satan@user/belphegor666)
[16:08:17] *** Quits: C-Man (~C-Man@static.88-198-34-209.clients.your-server.de) (Ping timeout: 240 seconds)
[16:09:19] *** Joins: TheCoffeMaker (~TheCoffeM@user/thecoffemaker)
[16:13:47] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[16:14:51] <PJBoy> who *are* the ops in there actually?
[16:15:56] *** Joins: clime (~clime@comprimato-nat.vtp.fi.muni.cz)
[16:16:04] *** Joins: Cahaan_ (~Cahaan@user/cahaan)
[16:17:54] *** Joins: proller (~p@2a02:6b8:b081:8009::1:13)
[16:18:17] <bpalmer> Oxyd is.
[16:18:22] *** Joins: xbkkd (~F0@user/xbkkd)
[16:18:41] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[16:18:42] *** Quits: Cahaan (~Cahaan@user/cahaan) (Ping timeout: 252 seconds)
[16:19:26] <bpalmer> you can check on a channel on libera with /msg chanserv flags #c++-social  (as an example)
[16:20:12] *** Joins: AliceMeows (~AliceMeow@user/alicemeows)
[16:20:32] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[16:21:19] *** Joins: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it)
[16:22:44] <PJBoy> woah, thanks for that tip
[16:23:23] <PJBoy> ...and I'm not getting a response from chanserv >_>
[16:24:18] <ville> your client might direct the output from bots into the "default" window
[16:25:13] *** Joins: meicceli (meicceli@kapsi.fi)
[16:25:15] <PJBoy> nope, and chanserv help isn't working either
[16:25:26] <ville> works for me
[16:26:23] <TinoDidriksen> The whole #C++* namespace is managed by a group, so flags are a bit misleading.
[16:26:25] <PJBoy> oh!
[16:26:33] <PJBoy> I have chanserv on ignore >_>
[16:26:36] <TinoDidriksen> ...
[16:26:55] <PJBoy> there are some IRC channels that make chanserv spam some annoying message when you join
[16:28:05] <PJBoy> don't judge me :<
[16:28:19] *** Quits: jellie (~luv_panda@user/jellie) (Ping timeout: 260 seconds)
[16:28:52] *** Joins: wakeup (~wakeup@user/wakeup)
[16:28:55] *** Joins: mattallmill (~mattallmi@ip68-103-130-85.ks.ok.cox.net)
[16:30:01] *** Quits: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it) (Read error: Connection reset by peer)
[16:30:36] *** Joins: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it)
[16:30:40] <PJBoy> https://puu.sh/IQmgr/c83a419ffd.png <_<
[16:31:06] *** Joins: j0hn_mc_clane (~j0hn_mc_c@ptr-fqhhm12iua58a0gd4hj.18120a2.ip6.access.telenet.be)
[16:32:43] <TinoDidriksen> Anyway, if anything goes bad in #C++-social and the registered op isn't available, then any of the C++ group contacts can "chanserv claim" the channel and deal with it. We can do so for any channel starting with #C++
[16:33:07] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Quit: Client closed)
[16:33:09] <PJBoy> ahh that's great
[16:33:23] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[16:33:57] *** Joins: jellie (~luv_panda@user/jellie)
[16:34:38] <TinoDidriksen> It has so far not been needed. Libera has been amazingly chill. Haven't even needed to mute or block unregistered.
[16:35:31] *** Quits: mrus (~mrus@gateway/tor-sasl/mrus) (Remote host closed the connection)
[16:35:51] *** Joins: mrus (~mrus@gateway/tor-sasl/mrus)
[16:38:16] <PJBoy> yup, we can 100% put all that freenode drama behind us now
[16:40:10] *** Quits: TheCoffeMaker (~TheCoffeM@user/thecoffemaker) (Read error: Connection timed out)
[16:40:46] *** Quits: dyeplexer (~dyeplexer@user/dyeplexer) (Read error: Connection reset by peer)
[16:41:24] *** Quits: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it) (Ping timeout: 240 seconds)
[16:41:55] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[16:47:10] *** Joins: TheCoffeMaker (~TheCoffeM@user/thecoffemaker)
[16:48:06] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[16:49:12] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[16:51:35] *** Quits: zer0x (~zer0x@42.113.144.44) (Remote host closed the connection)
[16:54:27] *** Joins: zer0x (~zer0x@42.113.144.44)
[16:58:17] *** Quits: mattallmill (~mattallmi@ip68-103-130-85.ks.ok.cox.net) (Remote host closed the connection)
[16:59:07] *** Joins: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it)
[16:59:28] *** Quits: chiselfuse (~chiselfus@user/chiselfuse) (Remote host closed the connection)
[16:59:50] *** Joins: chiselfuse (~chiselfus@user/chiselfuse)
[16:59:51] *** Joins: mattallmill (~mattallmi@ip68-103-130-85.ks.ok.cox.net)
[17:02:33] *** Joins: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr)
[17:03:00] *** Quits: TheCoffeMaker (~TheCoffeM@user/thecoffemaker) (Read error: Connection timed out)
[17:04:28] *** Joins: fengdaolong (~fengdaolo@2409:8a4d:c46:9901::4d3)
[17:07:15] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[17:08:36] *** Quits: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it) (Ping timeout: 240 seconds)
[17:11:27] *** Joins: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br)
[17:14:57] *** Joins: TheCoffeMaker (~TheCoffeM@user/thecoffemaker)
[17:18:15] *** Quits: Cahaan_ (~Cahaan@user/cahaan) (Ping timeout: 260 seconds)
[17:18:37] *** Quits: orthoplex64 (~crm@70.120.0.94) (Ping timeout: 240 seconds)
[17:21:15] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Remote host closed the connection)
[17:22:23] *** Joins: CodePoint (~CodePoint@107-208-128-79.lightspeed.tukrga.sbcglobal.net)
[17:23:52] *** Joins: sa02irc (~mbax@155-079-043-212.ip-addr.inexio.net)
[17:27:25] *** Quits: TheCoffeMaker (~TheCoffeM@user/thecoffemaker) (Quit: So long and thanks for all the fish)
[17:28:59] *** Quits: Enitin (~Enitin@82.180.145.227) (Ping timeout: 260 seconds)
[17:30:21] *** Quits: wakeup (~wakeup@user/wakeup) (Quit: Client closed)
[17:30:27] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Quit: Client closed)
[17:30:43] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[17:33:12] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[17:33:46] *** Quits: jellie (~luv_panda@user/jellie) (Ping timeout: 268 seconds)
[17:34:31] *** Joins: TheCoffeMaker (~TheCoffeM@user/thecoffemaker)
[17:35:58] *** Joins: jellie (~luv_panda@user/jellie)
[17:38:01] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[17:38:07] *** Quits: xbkkd (~F0@user/xbkkd) (Quit:  )
[17:40:05] *** Quits: clime (~clime@comprimato-nat.vtp.fi.muni.cz) (Ping timeout: 252 seconds)
[17:41:17] *** Quits: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 240 seconds)
[17:41:53] *** Joins: jotoho (~jotoho@user/jotoho)
[17:42:51] *** Joins: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[17:46:29] <welder> Is lexicographic comparison of two arrays of uint8_t equivalent to comparing them as arrays of big-endian uint32_t?
[17:47:09] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Remote host closed the connection)
[17:47:16] <welder> so if i grab first uchar from both arrays, compare lexicographically and keep on doing it as long as one string is smaller, would that be equivalent to fetching 4 bytes,reversing byte order and comparing them?
[17:47:22] <welder> i think it is, right?
[17:47:32] *** Joins: CodePoint_ (~CodePoint@2607:fb90:25df:e3d4:20e4:9377:5749:e49a)
[17:47:41] *** Quits: TheCoffeMaker (~TheCoffeM@user/thecoffemaker) (Quit: So long and thanks for all the fish)
[17:48:28] *** Joins: TheCoffeMaker (~TheCoffeM@user/thecoffemaker)
[17:48:58] *** Joins: rewrit3 (~rewrit3@user/rewrit3)
[17:49:34] <welder> a[4] = {12 34 55 44}, b[4] = {12 34 56 44} comparing byte by byte says b[] is lexicographically greater, the same would be if i loaded it as 4 bytes, reversed byte ordr and did 4 byte compare, right?
[17:49:59] *** Quits: CodePoint (~CodePoint@107-208-128-79.lightspeed.tukrga.sbcglobal.net) (Ping timeout: 260 seconds)
[17:50:29] *** Quits: mattallmill (~mattallmi@ip68-103-130-85.ks.ok.cox.net) (Ping timeout: 256 seconds)
[17:51:31] *** Joins: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net)
[17:52:33] <urdh> sure
[17:54:22] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Client Quit)
[17:54:22] *** Joins: Viewday1157 (~Viewday@user/viewday)
[17:54:36] *** Quits: Viewday115 (~Viewday@user/viewday) (Ping timeout: 240 seconds)
[17:54:36] *** Viewday1157 is now known as Viewday115
[17:55:11] *** Joins: CodePoint__ (~CodePoint@107-208-128-79.lightspeed.tukrga.sbcglobal.net)
[17:55:43] *** Joins: abode (~abode@2001:8f8:1263:f81:8230:49ff:fe6e:36b5)
[17:55:47] *** Quits: CodePoint_ (~CodePoint@2607:fb90:25df:e3d4:20e4:9377:5749:e49a) (Ping timeout: 250 seconds)
[17:58:23] *** Quits: chenqisu1 (~chenqisu1@183.217.201.47) (Ping timeout: 260 seconds)
[17:59:08] <Alipha> welder: and note that to do that, you can use a std::string or std::vector. Or use std::lexicographical_compare
[18:01:24] *** gentooclimax is now known as climax
[18:01:39] *** Quits: jellie (~luv_panda@user/jellie) (Ping timeout: 260 seconds)
[18:02:07] *** Joins: bebyx (~Thunderbi@user/bebyx)
[18:02:35] *** Parts: rewrit3 (~rewrit3@user/rewrit3) ()
[18:02:39] *** Joins: rewrit3 (~rewrit3@user/rewrit3)
[18:03:59] *** Quits: TheCoffeMaker (~TheCoffeM@user/thecoffemaker) (Read error: Connection timed out)
[18:04:20] *** climax is now known as gentooclimax
[18:04:57] *** Quits: CodePoint__ (~CodePoint@107-208-128-79.lightspeed.tukrga.sbcglobal.net) (Quit: CodePoint struts into the sunset on the beach.)
[18:05:27] *** Joins: TheCoffeMaker (~TheCoffeM@user/thecoffemaker)
[18:14:58] *** Quits: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr) (Quit: Konversation terminated!)
[18:16:40] *** Quits: ironman (~ironman@2405:201:1010:b026:5f00:b63f:4116:bd78) (Quit: Leaving)
[18:18:28] *** Quits: Flonk (~Flonk@vps-zap441517-1.zap-srv.com) (Quit: Ping timeout (120 seconds))
[18:18:43] *** Quits: TheCoffeMaker (~TheCoffeM@user/thecoffemaker) (Quit: So long and thanks for all the fish)
[18:19:40] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[18:20:18] *** Quits: rvalue (~rvalue@user/rvalue) (Read error: Connection reset by peer)
[18:20:29] *** Joins: bolovanos_ (~bolovanos@user/bolovanos)
[18:20:44] *** Joins: rvalue (~rvalue@user/rvalue)
[18:24:38] *** Quits: bolovanos (~bolovanos@user/bolovanos) (Ping timeout: 252 seconds)
[18:25:13] *** Joins: TheCoffeMaker (~TheCoffeM@user/thecoffemaker)
[18:25:37] *** Quits: bolovanos_ (~bolovanos@user/bolovanos) (Ping timeout: 256 seconds)
[18:27:16] *** Joins: oartemeva (~oartemeva@h86-62-71-213.ln.rinet.ru)
[18:29:16] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[18:34:07] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[18:34:23] *** Quits: TheCoffeMaker (~TheCoffeM@user/thecoffemaker) (Quit: So long and thanks for all the fish)
[18:35:30] *** Joins: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it)
[18:39:52] *** Quits: Alipha (~AliphaX@user/alipha) (Quit: WeeChat 1.0.1)
[18:40:20] *** Joins: Alipha (~AliphaX@75-168-143-77.mpls.qwest.net)
[18:40:20] *** Quits: Alipha (~AliphaX@75-168-143-77.mpls.qwest.net) (Changing host)
[18:40:20] *** Joins: Alipha (~AliphaX@user/alipha)
[18:41:11] *** Joins: TheCoffeMaker (~TheCoffeM@user/thecoffemaker)
[18:43:11] *** Quits: mrkajetanp (~mrkajetan@88.98.245.28) (Ping timeout: 256 seconds)
[18:44:18] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[18:44:26] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[18:44:26] *** ChanServ sets mode: +v npaperbot
[18:46:04] *** Joins: Cahaan (~Cahaan@user/cahaan)
[18:49:56] *** Quits: zmt00 (~zmt00@user/zmt00) (Ping timeout: 252 seconds)
[18:51:39] *** Quits: Alipha (~AliphaX@user/alipha) (Quit: WeeChat 1.0.1)
[18:52:11] *** Joins: Alipha (~AliphaX@75-168-143-77.mpls.qwest.net)
[18:52:11] *** Quits: Alipha (~AliphaX@75-168-143-77.mpls.qwest.net) (Changing host)
[18:52:11] *** Joins: Alipha (~AliphaX@user/alipha)
[18:53:27] *** Joins: zmt00 (~zmt00@user/zmt00)
[18:53:34] *** Quits: TheCoffeMaker (~TheCoffeM@user/thecoffemaker) (Quit: So long and thanks for all the fish)
[18:53:38] *** Quits: abode (~abode@2001:8f8:1263:f81:8230:49ff:fe6e:36b5) (Remote host closed the connection)
[18:54:28] *** Joins: TheCoffeMaker (~TheCoffeM@user/thecoffemaker)
[18:57:34] *** Quits: lh_cat (~lh_mouse@mingw-w64/developer/lhmouse) (Read error: Connection reset by peer)
[19:04:16] *** Joins: Garbanzo__ (~Garbanzo@2602:304:6eac:dc10:fbf2:b01f:1d47:7542)
[19:06:37] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[19:11:00] *** Quits: TheCoffeMaker (~TheCoffeM@user/thecoffemaker) (Read error: Connection timed out)
[19:11:34] *** Joins: TheCoffeMaker (~TheCoffeM@user/thecoffemaker)
[19:13:56] *** Quits: oartemeva (~oartemeva@h86-62-71-213.ln.rinet.ru) (Quit: WeeChat 2.8)
[19:21:15] *** Quits: TheCoffeMaker (~TheCoffeM@user/thecoffemaker) (Quit: So long and thanks for all the fish)
[19:23:59] *** Quits: lxsameer (~lxsameer@user/lxsameer) (Ping timeout: 256 seconds)
[19:24:24] *** Joins: Enitin (~Enitin@82.180.145.226)
[19:25:42] *** Joins: lxsameer (lxsameer@user/lxsameer)
[19:27:07] *** Joins: GreenResponse (~tomek@r-45-155-148-237.gpon.bialnet.pl)
[19:32:51] *** Quits: lxsameer (lxsameer@user/lxsameer) (Ping timeout: 252 seconds)
[19:35:01] *** Joins: lxsameer (~lxsameer@user/lxsameer)
[19:35:41] *** Quits: JohnMS_WORK (~kvirc@194.110.240.100) (Ping timeout: 250 seconds)
[19:36:03] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[19:36:12] *** Joins: Ali_A (~Ali_A@dslb-088-070-113-094.088.070.pools.vodafone-ip.de)
[19:37:01] *** Quits: zer0x (~zer0x@42.113.144.44) (Ping timeout: 256 seconds)
[19:40:22] *** Joins: gproto23 (~gproto23@user/gproto23)
[19:40:25] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[19:40:38] *** Joins: TheCoffeMaker (~TheCoffeM@user/thecoffemaker)
[19:44:07] *** Joins: skapata (~Skapata@2804:14c:87b0:9d2e:c4ec:7584:bbd2:af2d)
[19:44:07] *** Quits: skapata (~Skapata@2804:14c:87b0:9d2e:c4ec:7584:bbd2:af2d) (Changing host)
[19:44:07] *** Joins: skapata (~Skapata@user/skapata)
[19:48:53] *** Joins: JohnMS (~JohnMS@23.105.134.179)
[19:49:27] *** Joins: GreyXor (~GreyXor@82.66.31.64)
[19:50:03] *** Quits: TheCoffeMaker (~TheCoffeM@user/thecoffemaker) (Quit: So long and thanks for all the fish)
[19:50:46] *** Joins: Payam69 (~Payam@138.106.57.131)
[19:51:14] *** Quits: ivii (~ivan@user/ivii) (Remote host closed the connection)
[19:51:20] *** Quits: GreyXor (~GreyXor@82.66.31.64) (Client Quit)
[19:53:35] *** Joins: Viewday1151 (~Viewday@user/viewday)
[19:54:20] *** Quits: Viewday115 (~Viewday@user/viewday) (Read error: Connection reset by peer)
[19:54:21] *** Viewday1151 is now known as Viewday115
[19:58:12] *** Quits: Tokamak_ (~Tokamak@107.116.82.163) (Ping timeout: 240 seconds)
[20:00:26] *** Joins: Tokamak (~Tokamak@107.116.82.163)
[20:06:23] *** Quits: kkd (~kkd@255.205.154.104.bc.googleusercontent.com) (Remote host closed the connection)
[20:07:31] *** JohnMS is now known as JohnMS_AWAY
[20:08:13] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[20:09:45] *** Quits: arch_angel (~arch-ange@user/arch-angel) (Remote host closed the connection)
[20:10:33] *** Quits: cosimone (~user@93-44-187-176.ip98.fastwebnet.it) (Read error: Connection reset by peer)
[20:11:15] *** Quits: Payam69 (~Payam@138.106.57.131) (Quit: Client closed)
[20:12:48] *** Joins: cosimone (~user@93-44-187-176.ip98.fastwebnet.it)
[20:12:57] *** JohnMS_AWAY is now known as JohnMS
[20:14:35] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[20:15:02] *** Quits: Ali_A (~Ali_A@dslb-088-070-113-094.088.070.pools.vodafone-ip.de) (Quit: Connection closed)
[20:15:35] *** Quits: Enitin (~Enitin@82.180.145.226) (Ping timeout: 260 seconds)
[20:16:54] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[20:22:15] *** Joins: TheCoffeMaker (~TheCoffeM@user/thecoffemaker)
[20:22:44] *** Joins: ckdCreations (~ckdCreati@c-73-140-151-116.hsd1.wa.comcast.net)
[20:23:12] *** rootx74 is now known as skraito
[20:23:12] *** Quits: skraito (~root@user/rootx74) (K-Lined)
[20:23:27] *** Joins: rootx74 (~root@2001:19f0:5:446d:5400:3ff:feea:eab7)
[20:23:39] *** Joins: skapate (~Skapata@2804:14c:87b0:9d2e:256f:7d5e:6ba9:76fc)
[20:23:39] *** Quits: skapate (~Skapata@2804:14c:87b0:9d2e:256f:7d5e:6ba9:76fc) (Changing host)
[20:23:39] *** Joins: skapate (~Skapata@user/skapata)
[20:25:29] *** Joins: johnjaye (~pi@173.209.64.74)
[20:26:19] *** Quits: skapata (~Skapata@user/skapata) (Ping timeout: 260 seconds)
[20:27:17] *** Quits: Tokamak (~Tokamak@107.116.82.163) (Ping timeout: 240 seconds)
[20:27:39] *** acidtonic__ is now known as acidtonic
[20:30:39] *** Joins: Tokamak (~Tokamak@172.58.191.33)
[20:31:24] *** Joins: Ikkepop (~C-Man@78.31.190.82)
[20:31:25] *** Quits: TheCoffeMaker (~TheCoffeM@user/thecoffemaker) (Quit: So long and thanks for all the fish)
[20:33:24] *** Joins: JohnMS_WORK (~JohnMS@2a02:a311:a33a:a100:4ecc:6aff:fed0:fdf)
[20:33:37] *** Quits: JohnMS (~JohnMS@23.105.134.179) (Ping timeout: 240 seconds)
[20:34:51] *** JohnMS_WORK is now known as JohnMS
[20:35:12] *** Quits: Coldberg (~C-Man@static.88-198-34-209.clients.your-server.de) (Ping timeout: 260 seconds)
[20:36:57] *** Quits: Inline__ (~Inline@p200300cd4709ad00c6efe95d186eec52.dip0.t-ipconnect.de) (Quit: Leaving)
[20:38:31] *** Joins: Guest5310 (~Guest53@155.190.35.5)
[20:39:55] *** Quits: zibolo (~quassel@global-deiInside018.dei.polimi.it) (Ping timeout: 256 seconds)
[20:40:04] <AliceMeows> What would be the implications if dtor was called at the end of a subexpr instead of the end of a 'complete' expr?
[20:40:33] <bpalmer> Temporaries like foo(a()) would be a lot more dangerous
[20:41:14] *** Quits: nq (~nq@2a02:2f08:e015:a900:99af:f5ee:ecd5:7377) (Ping timeout: 268 seconds)
[20:43:08] *** Joins: LuckyFire (~LuckyFire@79.125.172.127)
[20:44:19] *** Joins: AbleBacon (~AbleBacon@user/AbleBacon)
[20:44:27] <AliceMeows> Hmm, I have a case where the opposite is a potential footgun
[20:44:39] *** Quits: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Quit: And I'm out.)
[20:46:02] <AliceMeows> Oh well, so be it
[20:53:34] *** Joins: nq (~nq@82.79.141.40)
[20:53:36] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Quit: Client closed)
[20:53:49] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[20:54:56] *** Joins: Inline (~Inline@p200300cd4709ad00c6efe95d186eec52.dip0.t-ipconnect.de)
[20:55:45] *** Quits: JohnMS (~JohnMS@2a02:a311:a33a:a100:4ecc:6aff:fed0:fdf) (Quit: Konversation terminated!)
[20:55:48] *** Quits: rootx74 (~root@2001:19f0:5:446d:5400:3ff:feea:eab7) (Ping timeout: 240 seconds)
[20:56:11] *** Joins: neure (~TimoSuora@212.146.12.146)
[20:57:21] *** T`aZ is now known as Z`aZ
[20:57:27] *** Z`aZ is now known as Z`aT
[20:58:07] *** Joins: nvmd (~weechat@user/nvmd)
[21:03:26] <AliceMeows> bpalmer: how would it actually make foo(a()) dangerous? would it be because of a() would be considered subexpr of its own therefore it'll die before calling foo or am I missing something?
[21:03:34] *** Joins: Enitin (~Enitin@82.180.145.226)
[21:05:15] *** Joins: LuckyFire_ (~LuckyFire@79.125.172.127)
[21:08:19] *** Quits: LuckyFire (~LuckyFire@79.125.172.127) (Ping timeout: 260 seconds)
[21:08:25] *** Joins: bitmask (~bitmask@c-73-215-237-27.hsd1.nj.comcast.net)
[21:09:49] *** Quits: nvmd (~weechat@user/nvmd) (Quit: WeeChat 3.4.1)
[21:11:16] <PJBoy> yeah
[21:11:55] *** Quits: wib_jonas (~wib_jonas@business-37-191-60-209.business.broadband.hu) (Quit: Client closed)
[21:12:23] <PJBoy> similarly with other cases like `a() + a()`
[21:12:35] <AliceMeows> Yeah that makes sense, thanks
[21:12:54] *** Joins: str0 (~str0@178.220.28.32)
[21:14:37] <AliceMeows> I assume middle ground would still be considered dangerous in some cases where dtor is called at one level above the current subexpr or none if its the complete expression?
[21:15:15] *** Joins: m_ben (~m_ben@user/m-ben/x-7429725)
[21:15:16] <AliceMeows> Scrap that, its probably stupid
[21:17:25] *** Joins: TheCoffeMaker (~TheCoffeM@user/thecoffemaker)
[21:23:24] *** Quits: Garbanzo__ (~Garbanzo@2602:304:6eac:dc10:fbf2:b01f:1d47:7542) (Ping timeout: 240 seconds)
[21:26:42] <AliceMeows> Would having a member function void use(callback_t) where callback_t is defined as void(callback_t*)(int&) and int& is internal member variable be considered to break encapsulation?
[21:27:55] *** Joins: clime (~clime@89-24-40-184.nat.epc.tmcz.cz)
[21:29:51] *** Quits: TheCoffeMaker (~TheCoffeM@user/thecoffemaker) (Ping timeout: 250 seconds)
[21:30:10] *** Joins: SGautam (uid286066@id-286066.ilkley.irccloud.com)
[21:30:38] <Raziel> AliceMeows, probably, but encapsulation is overrated anyway
[21:30:40] <Raziel> :p
[21:31:03] <AliceMeows> Tell that to the committee
[21:31:46] *** Quits: unlink2 (~unlink@p200300ebcf19f600f31648a859b660c5.dip0.t-ipconnect.de) (Remote host closed the connection)
[21:32:24] *** Quits: cosimone (~user@93-44-187-176.ip98.fastwebnet.it) (Quit: ERC (IRC client for Emacs 27.1))
[21:32:57] *** Quits: seninha (~seninha@user/seninha) (Ping timeout: 240 seconds)
[21:33:11] *** Joins: TheCoffeMaker (~TheCoffeM@user/thecoffemaker)
[21:33:58] <AliceMeows> Raziel: you're suggesting that this https://godbolt.org/z/nra9vznzq is breaking encapsulation?
[21:34:22] *** Joins: cosimone (~user@93-44-187-176.ip98.fastwebnet.it)
[21:35:48] <Raziel> in that case, I'm not sure if there's any actual encapsulation to break
[21:37:30] *** Joins: Garbanzo__ (~Garbanzo@2602:304:6eac:dc10:fbf2:b01f:1d47:7542)
[21:38:03] <Raziel> I guess because _n is private but you're sending a non-const reference to a function that doesn't belong to the class, it can be argued it is breaking encapsulation
[21:38:33] <AliceMeows> That's what I've suspected
[21:39:23] <bpalmer> I don't think that breaks encapsulation at all.
[21:40:02] <Raziel> well based on the wikipedia definiton, "encapsulation refers to the bundling of data with the methods that operate on that data, or the restricting of direct access to some of an object's components."
[21:40:52] <Raziel> the method that operates on your data is technically not bundled with said data, and even though access is restricted to the object's components it's then just sent to a method that doesn't belong to the object
[21:40:57] <Raziel> so... feels like it does
[21:41:30] <Raziel> but, encapsulation as a concept isn't very strictly defined v:
[21:41:39] *** Joins: great_taste (~great_tas@user/great-taste/x-5798414)
[21:44:49] *** Joins: bolovanos_ (~bolovanos@user/bolovanos)
[21:45:48] <bpalmer> the class is involved with its own exposure, which to me is the important thing.
[21:47:04] <bpalmer> class AccountView { protected: int balance_; public: int balance() const { return balance_; } };  vs class Account { protected: std::vector<int> transactions; public: int balance() const { return std::sum(transactions.begin(), transactions.end()); } };
[21:47:36] <bpalmer> although one exposes the data member outside the class while the other doesn't have it at all, both have the same level of encapsulation
[21:47:41] <PJBoy> you *wish* there was a std::sum
[21:47:49] <bpalmer> oh, did I make that up? Oops
[21:47:50] *** Quits: KimK (~KimK@ip98-186-40-208.ks.ks.cox.net) (Ping timeout: 268 seconds)
[21:48:11] <PJBoy> there's std::accumulate, but it takes an initial value parameter
[21:48:54] <Raziel> reduce, too
[21:48:55] <PJBoy> and std::reduce, which doesn't
[21:49:15] <Raziel> surprised they didn't make a ranges version
[21:49:26] <AliceMeows> They ran out of time
[21:49:33] <Raziel> understandable
[21:49:39] <AliceMeows> We might get it in the future
[21:49:46] <PJBoy> they should be coming soon
[21:49:56] *** Joins: Ali_A (~Ali_A@dslb-088-070-113-094.088.070.pools.vodafone-ip.de)
[21:50:02] <PJBoy> I saw C++23 got ranges::iota
[21:50:32] *** Joins: KimK (~KimK@2600:8803:740b:4700:4a5b:39ff:fe0b:57d2)
[21:51:03] <PJBoy> and ranges::shift_left/right, which I didn't even notice were absent before
[21:51:20] *** Joins: kkd (~kkd@255.205.154.104.bc.googleusercontent.com)
[21:51:53] <PJBoy> [p1813] for the remaining numeric header algorithms
[21:51:54] <npaperbot> P1813R0: [SG6, Library Evolution] A Concept Design for the Numeric Algorithms <https://wg21.link/p1813r0> (by Christopher Di Bella) (2019-08-02) (Related: https://wg21.link/p1813r0/github)
[21:51:57] *** Quits: Guest5310 (~Guest53@155.190.35.5) (Quit: Client closed)
[21:52:32] *** Quits: HvszrStykp (~X@81.171.62.87) (Ping timeout: 252 seconds)
[21:52:55] <PJBoy> > removed C++23 label
[21:52:57] <PJBoy> :(
[21:53:05] <AliceMeows> What was label supposed to do?
[21:53:12] <PJBoy> github label
[21:53:29] <PJBoy> so that paper was removed from the C++23 roadmap
[21:53:36] <Raziel> PJBoy, you think the C++ people really liked stargate and that's why they chose to name their teams SG?
[21:54:13] <PJBoy> "star" and "standard" are fairly close in a way
[21:55:51] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Ping timeout: 256 seconds)
[21:56:05] <PJBoy> yeah looking at the paper, I'll admit the concepts aren't trivial to come up with
[22:00:15] <ville> chances are it's a structure/term from iso
[22:00:47] *** Quits: MajorBiscuit (~MajorBisc@wlan-145-94-219-172.wlan.tudelft.nl) (Ping timeout: 252 seconds)
[22:00:47] <AliceMeows> PJBoy: I can't find that label you're talking about
[22:01:38] <PJBoy> https://puu.sh/IQoMG/5be5defe14.png
[22:03:00] <PJBoy> https://github.com/cplusplus/papers/issues/585#event-3107564968
[22:04:51] *** Quits: neure (~TimoSuora@212.146.12.146) (Quit: Leaving)
[22:05:13] *** Quits: Ali_A (~Ali_A@dslb-088-070-113-094.088.070.pools.vodafone-ip.de) (Quit: Connection closed)
[22:06:17] *** Joins: sobkas (~sobkas@95.175.17.217)
[22:09:03] <Raziel> el plan
[22:09:12] <AliceMeows> I can't find what it was about and have no idea what it meant to solve
[22:10:39] *** Quits: lxsameer (~lxsameer@user/lxsameer) (Ping timeout: 268 seconds)
[22:12:19] *** Joins: lxsameer (lxsameer@user/lxsameer)
[22:13:17] *** Quits: jotoho (~jotoho@user/jotoho) (Quit: Closing client)
[22:16:32] *** Joins: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz)
[22:17:12] *** Joins: ivii (~ivan@user/ivii)
[22:17:58] *** Joins: Kasreyn (~i@h5ef52163.selulun.dyn.perspektivbredband.net)
[22:18:52] <PJBoy> what what was about and meant to solve?
[22:19:00] *** Joins: ncwbqcfe (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[22:19:46] <AliceMeows> Don't mind me, I just thought it was about some paper related to labels in C++
[22:21:37] *** Quits: proller (~p@2a02:6b8:b081:8009::1:13) (Ping timeout: 240 seconds)
[22:24:15] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[22:26:32] *** Quits: rwb (~augh@alogs.space) (Quit: ZNC - https://znc.in)
[22:26:44] *** Joins: rwb (~augh@alogs.space)
[22:27:19] *** Quits: Alipha (~AliphaX@user/alipha) (Quit: WeeChat 1.0.1)
[22:29:28] *** Joins: Alipha (~AliphaX@75-168-143-77.mpls.qwest.net)
[22:29:28] *** Quits: Alipha (~AliphaX@75-168-143-77.mpls.qwest.net) (Changing host)
[22:29:28] *** Joins: Alipha (~AliphaX@user/alipha)
[22:30:11] *** Joins: segnior (segnior@user/segnior)
[22:32:18] *** Quits: ncwbqcfe (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Quit: ncwbqcfe)
[22:33:09] *** Joins: rgrinberg (~textual@fixed-186-96-26-198.totalplay.net)
[22:33:28] <ville> "study group" is an iso term as far as i can tell
[22:33:36] *** Quits: rewrit3 (~rewrit3@user/rewrit3) (Read error: Connection reset by peer)
[22:35:14] *** Quits: fengdaolong (~fengdaolo@2409:8a4d:c46:9901::4d3) (Ping timeout: 260 seconds)
[22:35:21] *** Quits: Garbanzo__ (~Garbanzo@2602:304:6eac:dc10:fbf2:b01f:1d47:7542) (Remote host closed the connection)
[22:35:31] *** Joins: Garbanzo__ (~Garbanzo@2602:304:6eac:dc10:fbf2:b01f:1d47:7542)
[22:36:13] *** Joins: artok (~azo@mobile-access-b04817-209.dhcp.inet.fi)
[22:36:50] *** Joins: mrkajetanp (~mrkajetan@2a01:4b00:ea36:6c00:7994:941c:3f5d:2b88)
[22:38:13] *** Quits: Dizidentu (~aresg@modemcable151.154-19-135.mc.videotron.ca) (Quit: WeeChat 2.8)
[22:39:37] *** Quits: letto (~letto@188.27.114.171) (Quit: Konversation terminated!)
[22:39:44] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[22:39:47] *** Quits: lxsameer (lxsameer@user/lxsameer) (Ping timeout: 260 seconds)
[22:41:31] *** Quits: polyrob (~rob@user/polyrob) (Ping timeout: 256 seconds)
[22:41:37] *** Joins: lxsameer (lxsameer@user/lxsameer)
[22:42:05] *** Joins: letto (~letto@188.27.114.171)
[22:42:37] *** Joins: ncwbqcfe (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[22:43:46] *** Joins: polyrob (~rob@user/polyrob)
[22:44:19] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[22:44:27] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[22:44:27] *** ChanServ sets mode: +v npaperbot
[22:44:30] *** Joins: rootx74 (~root@2001:19f0:5:446d:5400:3ff:feea:eab7)
[22:47:44] *** Joins: rewrit3 (~rewrit3@user/rewrit3)
[22:50:17] *** Quits: Kasreyn (~i@h5ef52163.selulun.dyn.perspektivbredband.net) (Ping timeout: 252 seconds)
[22:50:51] *** Joins: plastico (~plastico@neomutt/plastico)
[22:51:23] *** Quits: rootx74 (~root@2001:19f0:5:446d:5400:3ff:feea:eab7) (Ping timeout: 252 seconds)
[22:51:27] *** Joins: rootx74_ (~root@2001:19f0:5:446d:5400:3ff:feea:eab7)
[22:51:49] *** Joins: CalamityBlue (~CalamityB@user/CalamityBlue)
[22:52:26] *** Quits: CalamityToo (~CalamityB@user/CalamityBlue) (Ping timeout: 245 seconds)
[22:55:07] *** Joins: CalamityToo (~CalamityB@user/CalamityBlue)
[22:55:07] *** Quits: CalamityToo (~CalamityB@user/CalamityBlue) (Client Quit)
[22:55:23] *** Joins: CalamityToo (~CalamityB@user/CalamityBlue)
[22:55:33] *** Joins: pulse (~pulse@user/pulse)
[22:55:48] *** Quits: CalamityBlue (~CalamityB@user/CalamityBlue) (Ping timeout: 240 seconds)
[22:58:16] *** Quits: interop_madness (~interop_m@user/interop-madness/x-0950004) (Quit: Leaving)
[22:58:50] *** Joins: Kasreyn (~i@h5ef52163.selulun.dyn.perspektivbredband.net)
[23:00:29] *** Joins: senoraraton (~senorarat@192-195-83-130.static.monkeybrains.net)
[23:03:05] *** Quits: j0hn_mc_clane (~j0hn_mc_c@ptr-fqhhm12iua58a0gd4hj.18120a2.ip6.access.telenet.be) (Remote host closed the connection)
[23:20:02] *** Quits: unyu (~pyon@user/pyon) (Ping timeout: 240 seconds)
[23:20:21] *** Quits: geeknix (~pi@2001:e68:5432:2980:281e:46e1:b91e:3c1c) (Ping timeout: 245 seconds)
[23:21:28] *** Quits: Kasreyn (~i@h5ef52163.selulun.dyn.perspektivbredband.net) (Remote host closed the connection)
[23:23:11] *** Quits: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon) (Remote host closed the connection)
[23:23:39] *** Joins: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon)
[23:24:35] *** Quits: senoraraton (~senorarat@192-195-83-130.static.monkeybrains.net) (Ping timeout: 256 seconds)
[23:27:08] *** Quits: lxsameer (lxsameer@user/lxsameer) (Ping timeout: 252 seconds)
[23:28:57] *** Joins: lxsameer (~lxsameer@user/lxsameer)
[23:30:07] *** Quits: clime (~clime@89-24-40-184.nat.epc.tmcz.cz) (Ping timeout: 250 seconds)
[23:30:11] *** Quits: bolovanos_ (~bolovanos@user/bolovanos) (Ping timeout: 260 seconds)
[23:31:51] *** Joins: proller (~p@2a02:6b8:b081:1222::1:34)
[23:33:00] *** Joins: evilpyro (~evilpyro@user/evilpyro)
[23:34:09] <evilpyro> can a std::unique_ptr be used with multithreading?
[23:34:55] *** Quits: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon) (Ping timeout: 240 seconds)
[23:35:24] <AliceMeows> It could but you're probably asking for troubles
[23:35:50] <evilpyro> I dont understand why not as far as the contained type is atomic
[23:36:44] <imMute> a good question would be "how could more than one thread own a unique_ptr?"
[23:37:00] *** Quits: rootx74_ (~root@2001:19f0:5:446d:5400:3ff:feea:eab7) (Ping timeout: 240 seconds)
[23:37:17] <imMute> and IIRC, no, the unique_ptr itself is not thread safe
[23:37:19] *** Joins: geeknix (~pi@2001:e68:5432:7a19:c5f9:1f10:fdeb:7503)
[23:37:23] *** Joins: rootx74 (~root@108.61.89.107)
[23:37:24] <AliceMeows> It isn't
[23:38:25] <evilpyro> but its not owned, each thread accesses the same unique_ptr, right? maybe my concept of ownership is wrong
[23:38:29] *** Joins: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon)
[23:38:51] *** Joins: senoraraton (~senorarat@192-195-83-130.static.monkeybrains.net)
[23:38:54] <imMute> evilpyro: the only way that would be possible is via globals or sharing pointers/references to the unique_ptr, which is ugly at best.
[23:39:23] <imMute> and it's not threadsafe - if one thread tries to get at the underlying object while another thread is reassigning the unique_ptr, bad things are going to happen.
[23:39:57] <imMute> but if you did something like: use a global unique_ptr, assign it an instance, *then* start the multithreading bits and never reassign the unique_ptr, then I think that's safe
[23:40:15] <evilpyro> okay, so neither the unique_ptr is threadsafa nor makes sense to be used in this context
[23:40:16] <AliceMeows> Yes it would be safe to do so
[23:40:34] <AliceMeows> evilpyro: It depends on your use case
[23:41:22] *** Quits: artok (~azo@mobile-access-b04817-209.dhcp.inet.fi) (Quit: workwork)
[23:41:42] <evilpyro> I just overuse shared_ptr and hear everywhere people not using shared_ptr but unique_ptr and at this point I'm just questioning myself
[23:42:10] <AliceMeows> shared_ptr can hurt performance
[23:42:33] *** Joins: magla (~gelignite@d53678fd.access.ecotel.net)
[23:43:15] <evilpyro> also, are references to an atomic type, threadsafe? They should, since the reference can't be reasinged, right?
[23:44:04] <AliceMeows> As long as you don't read and write to the same memory location from different threads at the same time, you're good to go
[23:44:45] <CarloWood> Having a std::u8string - how can I iterate over the unicode characters?
[23:44:47] <evilpyro> which is impossible with a reference to an atomic type?
[23:45:42] *** Joins: unyu (~pyon@user/pyon)
[23:46:15] <AliceMeows> evilpyro: https://godbolt.org/z/f4Mhn9qf6
[23:46:32] <InPhase> CarloWood: You don't.  You could write an iterator for codepoints (not characters), but generally a unicode library is needed to handle displayable glyphs in any sort of reasonable manner.
[23:48:55] *** Joins: llh (~UPP@user/llh)
[23:49:00] <evilpyro> AliceMeows, oh, yeah, I was thinking of passing a ref to a function executed on another thread, so thats not a problem, sorry for not specifying
[23:55:22] *** Quits: crabbedhaloablut (~crabbedha@user/crabbedhaloablut) (Remote host closed the connection)
[23:55:24] *** Quits: sobkas (~sobkas@95.175.17.217) (Remote host closed the connection)
[23:55:33] *** Joins: crabbedhaloablut (~crabbedha@user/crabbedhaloablut)
[23:56:06] *** Joins: sobkas (~sobkas@95.175.17.217)
