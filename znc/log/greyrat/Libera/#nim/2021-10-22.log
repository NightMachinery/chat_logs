[00:14:46] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Ping timeout: 252 seconds)
[00:16:32] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[00:18:05] <FromDiscord> <jmgomez> sent a code paste, see https://play.nim-lang.org/#ix=3Crb
[00:19:36] *** Quits: jkl1337 (~jkl@user/jkl) (Quit: Gone.)
[00:20:57] *** Joins: jkl (~jkl@user/jkl)
[00:23:45] *** Quits: pro (~pro@user/pro) (Ping timeout: 265 seconds)
[00:26:43] *** Quits: Vladar (~Vladar@46.162.2.53) (Quit: Leaving)
[00:35:48] *** Joins: Gustavo6046_ (~Gustavo60@user/gustavo6046)
[00:36:09] *** Quits: Gustavo6046_ (~Gustavo60@user/gustavo6046) (Remote host closed the connection)
[00:36:13] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Ping timeout: 252 seconds)
[00:36:40] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[00:54:17] <FromDiscord> <Elegantbeef> `debugger:native` just adds symbols to the executable, you need to run it with a debugger to get any output @jmgomez
[00:56:31] <FromDiscord> <jmgomez> it should also output a nim-gdb.py file as well. Shouldnt it?
[00:56:52] <FromDiscord> <jmgomez> Or am I mistaken?
[00:57:32] <FromDiscord> <impbox [ftsf]> I've never seen such a file
[00:58:26] <FromDiscord> <jmgomez> ohh maybe I pick it from somewhere else a while ago and assumed that it was output by the compiler :/ ↵So how are you able to see your symbols?
[01:02:41] <FromDiscord> <Elegantbeef> nim-gdb.py is in your nim directory
[01:03:55] <FromDiscord> <Elegantbeef> I havent used the debugger much, but i think gdb can find nim-gdb.py if nim is in your path so it just works, i could be wrong
[01:04:13] <FromDiscord> <Elegantbeef> I've just followed https://github.com/saem/vscode-nim#debugging for setting up the debugger in vscode
[01:05:23] <FromDiscord> <jmgomez> ohh that's useful! Thank you!
[01:10:15] <FromDiscord> <Recruit_main707> is `iterable[T]` implemented as a concept?
[01:11:20] <FromDiscord> <Elegantbeef> Nope
[01:14:44] <FromDiscord> <Yardanico> In reply to @Recruit_main707 "is `iterable[T]` implemented as": It's not what you think it is
[01:14:54] <FromDiscord> <tandy> sent a code paste, see https://paste.rs/Rv9
[01:16:12] <FromDiscord> <leorize> it means you should try to make it work but I can't guarantee that it will \:p
[01:16:31] <FromDiscord> <tandy> lol cool
[01:16:38] <FromDiscord> <leorize> I did improve generics support to the point that it can work in a function declaration context
[01:16:49] <FromDiscord> <leorize> but I haven't tested further than that
[01:16:50] <FromDiscord> <tandy> oh right that should be enough?
[01:17:04] <FromDiscord> <leorize> uniontraits might be useful if you need low level access
[01:20:13] <FromDiscord> <jmgomez> the hotreload is also working, there were two unexpected things on my end: ↵1. Contrary to the regular output I had to specify .exe↵2. I needed two dlls more and had to compile them myself (nimhcr and nimrtl)
[01:20:56] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Ping timeout: 245 seconds)
[01:21:57] <FromDiscord> <tandy> yeah, i need the `Union` type
[01:22:15] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[01:32:38] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Read error: Connection reset by peer)
[01:35:45] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[01:46:05] <Egeon> I know this question is more apt for the mingw-w64 community but their irc has barely many people.
[01:46:26] <Egeon> nim c --listCmd -d:mingw --passc:"-s -Os -nostdlib -nodefaultlibs -nostartfiles" --verbosity=3 -d:ssl -o:$@ $< >> builds.log
[01:47:25] <Egeon> Anyone know how to reduce the binary size when cross compile from mingw
[01:47:27] <Egeon> ?
[01:50:42] *** Joins: evoalg (~evoalg@122-59-30-160-fibre.sparkbb.co.nz)
[01:54:57] *** Quits: evoalg (~evoalg@122-59-30-160-fibre.sparkbb.co.nz) (Quit: Leaving...)
[02:01:25] <Egeon> OK found it nothing fancy passing these flags:
[02:01:28] <Egeon> -d:danger -d:strip -d:ssl --opt:size --passc=-flto --passl=-flto
[02:09:19] <NimEventer> New Nimble package! asyncanything - make anything async [to be honest, fake async], see https://github.com/hamidb80/asyncanything
[02:10:28] <FromDiscord> <Yardanico> more npm packages
[02:12:29] <FromDiscord> <dom96> just imagine the package number growth tho
[02:20:31] <FromDiscord> <evoalg> sent a long message, see http://ix.io/3CrA
[02:24:30] <FromDiscord> <Yardanico> In reply to @evoalg "I've only recently starting": nimsuggest doesn't work well with js backend, but just to make sure - are you on 1.6?
[02:25:02] <FromDiscord> <Yardanico> and yeah, this module is only for JS backend
[02:30:05] <FromDiscord> <evoalg> I'm on 1.6 yes
[02:32:58] <FromDiscord> <evoalg> In reply to @Yardanico "and yeah, this module": Yes I used choosenim to update to nim 1.6, and when I compile using "-b:js" it compiles and runs fine, but it's just the syntax highlighting. I guess maybe I should just wait to see of the plugin will be updated
[02:33:21] <FromDiscord> <Yardanico> well, the plug-in itself can't fix that
[02:34:02] <FromDiscord> <Yardanico> nimsuggest generally doesn't work with -b:js , so you can remove that from you config and compile with "nim js" instead so you get syntax highlighting
[02:37:08] <FromDiscord> <evoalg> In reply to @Yardanico "nimsuggest generally doesn't work": Oh ok thank you - dump question: where do I find that config file?
[02:38:11] <FromDiscord> <Yardanico> oh wait sorry, I thought you had -b:js in your config file
[02:38:28] <FromDiscord> <Yardanico> if you're running it in the command line, then nimsuggest should generally work
[02:41:01] <FromDiscord> <evoalg> ah yea I'm compiling with "nim -b:js -r c <myfile.nim>"
[02:41:37] <FromDiscord> <evoalg> Those large numbers are one of the cool things about python ... exciting to see it coming into nim
[02:42:10] <FromDiscord> <ynfle (ynfle)> @Pmunch what order does `forNode` descend in macroutils descend in ?
[02:45:25] <NimEventer> New post on r/nim by Blue_Moon_Lake: Is there options for Nim formatting ?, see https://reddit.com/r/nim/comments/qd3xjj/is_there_options_for_nim_formatting/
[02:46:12] <FromDiscord> <Yardanico> In reply to @evoalg "Those large numbers are": well js backend isn't the main one, so really jsbiginits is only useful if you're writing for a platform that only supports JS, like browsers :)
[02:46:31] <FromDiscord> <Yardanico> there are a couple of native nim libraries like that though
[02:46:59] <FromDiscord> <Yardanico> https://github.com/status-im/nim-stint
[02:46:59] <FromDiscord> <Yardanico> https://github.com/def-/nim-bigints
[02:47:37] <FromDiscord> <Yardanico> And of course you can use gmp
[02:51:55] <FromDiscord> <evoalg> sent a long message, see http://ix.io/3CrC
[02:54:09] <FromDiscord> <Yardanico> you might not always need bigints though, e.g uint64 goes to 18,446,744,073,709,551,615
[02:56:33] <FromDiscord> <Yardanico> and generally even 32-bit int is more than enough
[02:56:54] <FromDiscord> <evoalg> In reply to @Yardanico "you might not always": Ahhh true ... I guess one of the things people who aren't experienced programmers like to do is play with recursion to calculate factorial(400) and be amazed a the big number appearing on the screen. I did it in python and I was trying in nim but my recursion proc only went to factorial(20)
[02:58:02] <FromDiscord> <Gumber> sent a code paste, see https://play.nim-lang.org/#ix=3CrE
[02:58:35] <FromDiscord> <Gumber> (edit) "https://play.nim-lang.org/#ix=3CrE" => "https://play.nim-lang.org/#ix=3CrF"
[03:00:52] *** Quits: rockcavera (~rc@user/rockcavera) (Remote host closed the connection)
[03:32:03] <FromDiscord> <Anonymous Poet> is there a way to get the nim compiler to print out the nim code in the final pass before converting it to c/c++? i know theres dumpAstGen, dumpTree, etc. but those arent the final asts. there might still be template rewriting, and macro expansion, etc.
[03:34:45] <FromDiscord> <Elegantbeef> there is `macros.expandMacros`
[03:34:56] <FromDiscord> <Elegantbeef> it takes in a typed AST so all expansions happen
[03:35:54] <FromDiscord> <Anonymous Poet> sent a code paste, see https://play.nim-lang.org/#ix=3CrP
[03:36:31] <FromDiscord> <Anonymous Poet> compiling with just `nim r file.nim`
[03:37:30] <FromDiscord> <Elegantbeef> Doesnt `r` hide compiler output?
[03:37:59] <FromDiscord> <Anonymous Poet> not sure, but `c` doesnt print anything either
[03:38:11] <FromDiscord> <Elegantbeef> I cannot compile that code so cannot help
[03:38:15] <FromDiscord> <Anonymous Poet> im concerned that `expandMacros` doesnt do anything if theres no macro in it
[03:40:05] <FromDiscord> <Elegantbeef> https://play.nim-lang.org/#ix=3CrT
[03:42:15] <FromDiscord> <Anonymous Poet> i dont understand why but now it works for my code too ... could it have been cached somehow?
[03:42:27] <FromDiscord> <Elegantbeef> Are you sure it's compiling again?
[03:42:30] <FromDiscord> <Elegantbeef> `nim c -f`
[03:43:03] <FromDiscord> <Anonymous Poet> i copied your playground snippet into a file, compiled that, saw the output, and then tried the same thing on my file, and got output, where before i wasnt (with the same compile command)
[03:44:07] *** Joins: rockcavera (~rc@192.12.113.67)
[03:44:07] *** Quits: rockcavera (~rc@192.12.113.67) (Changing host)
[03:44:07] *** Joins: rockcavera (~rc@user/rockcavera)
[03:46:03] <FromDiscord> <Anonymous Poet> very strange that this works ... i mustve been doing something wrong before. thank you!
[03:47:29] <FromDiscord> <Anonymous Poet> one more thing: when i use `--expandArc:myfunc` it produces an even-more expanded ast, but im not sure its still valid nim, ex `:tmpD` as a statement on a line by itself. do you know if theres a way to get the lifecycle hooks in my macro too?
[03:48:18] <FromDiscord> <Elegantbeef> Nope since your macro can completely change the output which means arc hasnt ran yet
[03:48:35] <FromDiscord> <Elegantbeef> Arc needs code it knows will be safe to insert it's destructors
[03:49:09] <FromDiscord> <Anonymous Poet> i see, thanks. that makes sense
[04:28:10] <FromDiscord> <deech> It seems shipping a Nim library with  `exportc`d functions also requires bundling `nimbase.h`. Is there any way around this?
[04:28:51] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Ping timeout: 245 seconds)
[04:28:54] *** Joins: Gustavo6046_ (~Gustavo60@user/gustavo6046)
[04:31:44] *** Gustavo6046_ is now known as Gustavo6046
[04:34:20] <FromDiscord> <Elegantbeef> I dont think treeform's genny does, could be wrong though
[04:34:46] <FromDiscord> <Elegantbeef> Though that's dynlib, i guess
[04:35:12] <FromDiscord> <Elegantbeef> Hurdur i'm a genius or something here
[04:39:29] <FromDiscord> <Elegantbeef> So I guess assuming you're using the generated C it's required
[04:41:31] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Ping timeout: 252 seconds)
[04:43:02] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[04:49:45] *** Quits: neurocyte0132889 (~neurocyte@user/neurocyte) (Ping timeout: 260 seconds)
[05:06:25] <FromDiscord> <geekrelief> sent a code paste, see https://play.nim-lang.org/#ix=3Cs9
[05:08:46] <FromDiscord> <geekrelief> if I swap `object | proc` for `typed` it compiles.
[05:11:37] *** Quits: dom96_ (~dom@mail.nim-lang.org) (Ping timeout: 250 seconds)
[05:12:23] *** Joins: dom96 (~dom@mail.nim-lang.org)
[05:13:21] *** Quits: NimBot (~NimBot@mail.nim-lang.org) (Ping timeout: 250 seconds)
[05:13:47] *** Joins: NimBot (~NimBot@mail.nim-lang.org)
[05:14:21] <FromDiscord> <Elegantbeef> Can i see the object's declaration?
[05:14:59] <FromDiscord> <geekrelief> sent a code paste, see https://play.nim-lang.org/#ix=3Csb
[05:15:25] <FromDiscord> <geekrelief> sent a code paste, see https://play.nim-lang.org/#ix=3Csc
[05:16:17] <FromDiscord> <Elegantbeef> And macro usage?
[05:16:23] <FromDiscord> <geekrelief> sent a code paste, see https://paste.rs/G1y
[05:16:25] <FromDiscord> <Elegantbeef> There you go
[05:16:45] <FromDiscord> <geekrelief> I'm dumb.. what am I missing?
[05:17:10] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3Cse
[05:17:29] <FromDiscord> <Elegantbeef> The descriminator is bound to the first type so it gets `init_i` and expects `tmPluginInitI`
[05:17:39] <FromDiscord> <Elegantbeef> You want `varargs[typed]` in this case
[05:17:46] <FromDiscord> <Elegantbeef> Then you check in the macro they're objects afaik
[05:17:51] <FromDiscord> <geekrelief> oh duh.. tm_plugin_init_i and tm_plugin_shutdown_i aren't from the same root
[05:18:22] <FromDiscord> <geekrelief> ok I guess there's no way around using `typed`
[05:18:49] <FromDiscord> <geekrelief> can using parameter constraints help?
[05:19:21] <FromDiscord> <geekrelief> I guess not since there's nothing for `object`
[05:21:43] <FromDiscord> <geekrelief> this is what I get for trying to get fancy for the wrong reason, nim has so many features to play with!
[05:35:28] *** Quits: arkurious (~arkurious@user/arkurious) (Quit: Leaving)
[05:41:49] <FromDiscord> <ruki> Do you know how I should solve this problem? https://github.com/nim-lang/Nim/issues/19033
[05:44:16] <FromDiscord> <geekrelief> this might be dumb, but did you try putting double quotes around the argument to `--passL:"-libpath:...."`?
[05:45:20] <FromDiscord> <geekrelief> for instance in my nimble file I use `--passC` like `"--passC:\"/wd4311 /wd4312 /wd4103 /wd4133 /wd4028\"" & `
[05:45:24] <FromDiscord> <geekrelief> (edit) "/wd4028\"" & `" => "/wd4028\""`"
[05:58:30] <FromDiscord> <ruki> In reply to @geekrelief "this might be dumb,": I try it, it does not work. = =
[05:58:35] *** Quits: LyndsySimon (sid34452@id-34452.lymington.irccloud.com) (Ping timeout: 264 seconds)
[05:58:46] *** Joins: LyndsySimon (sid34452@lymington.irccloud.com)
[06:01:28] <FromDiscord> <geekrelief> what if you switch the '-libpath' with a '/libpath'?
[06:02:19] <FromDiscord> <geekrelief> https://docs.microsoft.com/en-us/cpp/build/reference/libpath-additional-libpath?view=msvc-160
[06:02:40] <FromDiscord> <ruki> same problem
[06:03:38] <FromDiscord> <ruki> The problem is that vccexe passed the link flags to cl.exe, but cl.exe ignored them
[06:04:32] <FromDiscord> <ruki> sent a code paste, see https://play.nim-lang.org/#ix=3Csn
[06:05:04] <FromDiscord> <ruki> nim c --cc:vcc -d:release --nimcache:build\.gens\test\windows\x64\release\nimcache --passL:-libpath:build\windows\x64\release --passL:-lfoo -o:build\windows\x64\release\test.exe src\main.nim
[06:10:07] <FromDiscord> <geekrelief> seems like this error has been around a while https://forum.nim-lang.org/t/341
[06:10:16] <FromDiscord> <geekrelief> There's gotta be a fix by now
[06:12:09] <FromDiscord> <ruki> oh, seems to be the same problem.
[06:12:40] <FromDiscord> <geekrelief> https://github.com/nim-lang/Nim/issues/8098
[06:15:35] <FromDiscord> <ruki> This problem seems to exist for a long time, but it has not been fixed. 🙃
[06:16:21] <FromDiscord> <geekrelief> well looks like you just volunteered 🙂
[06:16:24] <FromDiscord> <geekrelief> j/k
[06:16:40] <FromDiscord> <ruki> I am very curious, now how nim links other static libraries on windows, this should be a basic feature.
[06:16:48] <FromDiscord> <geekrelief> I'm sure I'll run into this at some point too
[06:17:26] <FromDiscord> <geekrelief> In theory this should be a simple fix
[06:19:26] <FromDiscord> <Elegantbeef> I thought you just make an `.a` then link it with the compiler
[06:21:20] <FromDiscord> <ruki> .a? but it's windows library.
[06:21:51] <FromDiscord> <Elegantbeef> Thought`.a` is also used for windows static linking
[06:22:29] <FromDiscord> <geekrelief> just to double check did you try using `--clibdir`?
[06:25:21] <FromDiscord> <IsaacPaul> I'm trying to get some simple tests to run but keep running into an error: undeclared identifier: 'addTest' https://media.discordapp.net/attachments/371759389889003532/900940358995836968/Screen_Shot_2021-10-21_at_10.50.34_PM.png
[06:25:53] <FromDiscord> <Elegantbeef> have you exported `addTest`?
[06:25:55] <FromDiscord> <IsaacPaul> sent a code paste, see https://play.nim-lang.org/#ix=3Csq
[06:25:57] <FromDiscord> <Elegantbeef> You havent exported `addTest`
[06:26:08] <FromDiscord> <Elegantbeef> `addTest`
[06:26:21] <FromDiscord> <Elegantbeef> That'll export it, it's like a public accesor in other languages
[06:27:25] <FromDiscord> <IsaacPaul> ah that worked 🙃
[06:27:54] <FromDiscord> <ruki> In reply to @geekrelief "just to double check": When I use it, I will encounter another problem. It cannot completely pass the relative path to the compiler and linker. It seems that it will be converted to an absolute path, but the path location is wrong. So I can only use --passC/--passL to pass the real relative path
[06:27:56] <FromDiscord> <geekrelief> `--clibdir` returns the same issue
[06:28:26] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Ping timeout: 245 seconds)
[06:28:39] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[06:29:13] *** Joins: Pyautogui (~Pyautogui@108-216-110-132.lightspeed.sndgca.sbcglobal.net)
[06:50:30] *** Quits: Pyautogui (~Pyautogui@108-216-110-132.lightspeed.sndgca.sbcglobal.net) (Ping timeout: 260 seconds)
[07:09:19] *** Joins: Pyautogui (~Pyautogui@108-216-110-132.lightspeed.sndgca.sbcglobal.net)
[07:11:00] <Pyautogui> Noob Question: Why does strmisc have a expandTabs func, when the same effect could be achieved with the strutils replace?
[07:11:19] *** Joins: Gustavo6046_ (~Gustavo60@user/gustavo6046)
[07:12:13] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Ping timeout: 252 seconds)
[07:13:32] <FromDiscord> <Elegantbeef> I think it's to reduce module dependencies and cyclical logic
[07:14:34] *** Gustavo6046_ is now known as Gustavo6046
[07:18:01] <Pyautogui> The module dependencies reduction makes. I have never heard the term "cyclical logic" in connection with programming. Google just brings up circular reasoning. What does it mean in this context?
[07:18:24] <Pyautogui> Edit: "makes sense"
[07:19:20] <FromDiscord> <Elegantbeef> Cyclical dependancies mostly
[07:19:45] <Pyautogui> Got it, thanks.
[07:26:22] <FromDiscord> <geekrelief> In reply to @ruki "When I use it,": probably need to modify this https://github.com/nim-lang/Nim/blob/5e2b9341f343c3f80f92cfd160a0186f23521a42/tools/vccexe/vccexe.nim#L163-L169
[07:29:13] *** Quits: Pyautogui (~Pyautogui@108-216-110-132.lightspeed.sndgca.sbcglobal.net) (Quit: Connection closed)
[07:36:01] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.3)
[07:36:31] *** Joins: supakeen (~user@python/site-packages/supakeen)
[07:40:46] *** Joins: tiorock (~rc@192.12.113.67)
[07:40:46] *** Quits: tiorock (~rc@192.12.113.67) (Changing host)
[07:40:46] *** Joins: tiorock (~rc@user/rockcavera)
[07:40:46] *** rockcavera is now known as Guest7704
[07:40:46] *** Quits: Guest7704 (~rc@user/rockcavera) (Killed (tungsten.libera.chat (Nickname regained by services)))
[07:40:46] *** tiorock is now known as rockcavera
[07:42:34] *** Joins: tiorock (~rc@192.12.113.67)
[07:42:34] *** Quits: tiorock (~rc@192.12.113.67) (Changing host)
[07:42:34] *** Joins: tiorock (~rc@user/rockcavera)
[07:42:34] *** rockcavera is now known as Guest926
[07:42:35] *** Quits: Guest926 (~rc@user/rockcavera) (Killed (sodium.libera.chat (Nickname regained by services)))
[07:42:35] *** tiorock is now known as rockcavera
[07:42:58] <FromDiscord> <ruki> In reply to @geekrelief "probably need to modify": oh thanks
[07:48:08] *** Joins: tiorock (~rc@192.12.114.196)
[07:48:08] *** Quits: tiorock (~rc@192.12.114.196) (Changing host)
[07:48:08] *** Joins: tiorock (~rc@user/rockcavera)
[07:48:08] *** rockcavera is now known as Guest5938
[07:48:08] *** tiorock is now known as rockcavera
[07:49:06] *** Quits: Guest5938 (~rc@user/rockcavera) (Ping timeout: 260 seconds)
[07:57:48] <FromDiscord> <Tunnel> sent a code paste, see https://play.nim-lang.org/#ix=3CsB
[07:58:39] <FromDiscord> <Elegantbeef> `exportC`?
[07:59:12] *** Quits: rockcavera (~rc@user/rockcavera) (Remote host closed the connection)
[08:01:33] <FromDiscord> <Elegantbeef> You can also look at the `emit` pragma https://nim-lang.org/docs/manual.html#implementation-specific-pragmas-emit-pragma
[08:01:47] <FromDiscord> <Tunnel> sent a code paste, see https://play.nim-lang.org/#ix=3CsC
[08:02:19] <FromDiscord> <Elegantbeef> what's `goto` defined as?
[08:02:27] <FromDiscord> <Tunnel> nothing?
[08:02:41] <FromDiscord> <Elegantbeef> Why not import the procedure than?
[08:03:08] <FromDiscord> <Tunnel> I think I follow now, but why would newPage work, and "otherSymbol" work, but goto gets mangled?
[08:04:07] <FromDiscord> <Elegantbeef> what's newPage defined as?
[08:04:15] <FromDiscord> <Tunnel> nothing as well
[08:04:23] <FromDiscord> <Elegantbeef> Uhh
[08:04:30] <FromDiscord> <Tunnel> sent a code paste, see https://play.nim-lang.org/#ix=3CsD
[08:04:46] <FromDiscord> <Tunnel> well I was adding my attempt at the goto proc, ignore that line...
[08:07:28] <FromDiscord> <Elegantbeef> Oh this is using js magic i see
[08:07:35] <FromDiscord> <Elegantbeef> does the `std/asyncjs` `await` not work here?
[08:07:59] <FromDiscord> <Tunnel> await expects a Future[T], and I havent figured out how to make jsobject into that.
[08:11:26] <FromDiscord> <Elegantbeef> Hmm the macros do cause some weird behaviour, i'll see if i can figure it out
[08:22:43] <FromDiscord> <Elegantbeef> Ah i found the issue `https://github.com/nim-lang/Nim/blob/version-1-6/lib/js/jsffi.nim#L50` goto is in a reservedWords list
[08:23:05] <FromDiscord> <Tunnel> I had just noticed that too. I'm not sure I understand why that is a thing though.
[08:23:27] <FromDiscord> <Elegantbeef> It's to avoid using keywords as procedures and the like i believe
[08:23:59] <FromDiscord> <Elegantbeef> `function for(){ console.log("hello");}` is invalid for instance
[08:24:09] <FromDiscord> <Tunnel> but that doesn't seem to be an issue to do on purpose though. Since Puppeteer seems to break that rule.
[08:24:14] <FromDiscord> <ruki> In reply to @geekrelief "probably need to modify": I have solved this problem, Thanks! 😀  https://github.com/nim-lang/Nim/issues/19033#issuecomment-949285922
[08:24:32] <FromDiscord> <Elegantbeef> Some words in that list might not be actually restricted
[08:26:01] <FromDiscord> <geekrelief> In reply to @ruki "I have solved this": nice 🙂
[08:26:45] <FromDiscord> <Tunnel> "removed from ecma 5/6 standard" https://www.w3schools.com/js/js_reserved.asp Seems like it is sometimes a restricted keyword...
[08:27:23] <FromDiscord> <geekrelief> In reply to @geekrelief "nice 🙂": I wonder if the link flags are guaranteed to always be at the end
[08:27:58] <FromDiscord> <geekrelief> In reply to @ruki "I have solved this": Do we know if the links flags are always at the end?
[08:28:26] <FromDiscord> <Elegantbeef> It's not ideal tunnel but https://play.nim-lang.org/#ix=3CsF
[08:28:39] <FromDiscord> <Elegantbeef> I'd suggest making a PR for removing it though
[08:30:05] *** Quits: mahlon (~mahlon@martini.nu) (Ping timeout: 258 seconds)
[08:30:44] <FromDiscord> <Tunnel> I thought about that, but does nim intentionally target pre 5/6? Directly removing it might break that compatibility.
[08:32:37] <FromDiscord> <Elegantbeef> Think it targets es3
[08:32:57] <FromDiscord> <Elegantbeef> So yea maybe just an optional overridemangle parameter
[08:34:37] <FromDiscord> <Rika> Nim targets es3
[08:35:02] *** Joins: mahlon (~mahlon@martini.nu)
[08:37:02] <FromDiscord> <ruki> In reply to @geekrelief "Do we know if": I will sort them and put all --passL in tail
[08:37:07] <FromDiscord> <ruki> https://github.com/xmake-io/xmake/blob/62d3e0c681f25cb48560d07461a92738b55a0b6d/xmake/rules/nim/xmake.lua#L133-L150
[08:37:07] <FromDiscord> <Tunnel> Thanks for the help! The problem seems to be resolved for now at the very least.
[08:37:54] <FromDiscord> <geekrelief> In reply to @ruki "I will sort them": cool
[08:40:05] <FromDiscord> <OceanMongrel> proc func
[08:43:26] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Ping timeout: 245 seconds)
[08:44:17] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[08:47:45] <FromDiscord> <geekrelief> In reply to @ruki "I will sort them": Seems like putting `--passL:/link` in front should do it, no need to sort. I tried changing the order of my arguments to `nim` and it compiled fine.
[08:49:27] <FromDiscord> <ruki> In reply to @geekrelief "Seems like putting `--passL:/link`": But there are some compile flags, not link flags. I need to submit the compiled flags in front of --passL:-link
[08:49:35] <FromDiscord> <ruki> e.g. --passC:xx
[08:49:49] <FromDiscord> <geekrelief> I'm using -passC too
[08:49:57] <FromDiscord> <geekrelief> I have a bunch of warnings I disable
[08:50:23] <FromDiscord> <geekrelief> sent a code paste, see https://play.nim-lang.org/#ix=3CsK
[08:50:39] <FromDiscord> <geekrelief> sent a code paste, see https://play.nim-lang.org/#ix=3CsL
[08:50:42] <FromDiscord> <geekrelief> so passL is in front of passC
[08:51:12] <FromDiscord> <geekrelief> anyway, just fyi
[08:52:50] <FromDiscord> <ruki> ok
[09:03:44] *** Joins: Gustavo6046_ (~Gustavo60@user/gustavo6046)
[09:03:44] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Read error: Connection reset by peer)
[09:06:32] *** Gustavo6046_ is now known as Gustavo6046
[09:09:19] <NimEventer> New thread by Gblbaozi: How to send a command to cmd.exe, see https://forum.nim-lang.org/t/8530
[09:41:37] *** Joins: pro (~pro@user/pro)
[09:52:04] <FromDiscord> <soupayan> any good resource from where i can learn metaprogrammimg using nim?
[09:53:51] <nrds> <06Prestige99> https://dev.to/beef331/demystification-of-macros-in-nim-13n8 is good to learn macros
[09:56:07] <FromDiscord> <Elegantbeef> Dont say that might go to the authors head
[10:02:13] <FromDiscord> <Rika> Fuck you beef
[10:02:18] <FromDiscord> <Rika> Your shit is awful
[10:02:23] <FromDiscord> <Rika> Is that good enough to mitigate that issue
[10:12:42] <FromDiscord> <Elegantbeef> Rika with all the new users you need to say jk 😛
[10:13:04] <FromDiscord> <evoalg> nim 1.6 ... when I compile, I get Hints of unused variable twice each, why would that be?
[10:13:29] <FromDiscord> <Elegantbeef> Variables are unused
[10:14:04] <FromDiscord> <evoalg> I mean instead of once each, I get it twice each, exactly the same part of the code
[10:14:37] <FromDiscord> <Elegantbeef> Can you reproduce on playground?
[10:15:06] <FromDiscord> <evoalg> "test16.nim(15, 7) Hint: 'a' is declared but not used [XDeclaredButNotUsed]" and then other "test16.nim(15, 7) Hint: 'a' is declared but not used [XDeclaredButNotUsed]".↵How do I use playground? (sorry I'm quite new)
[10:15:21] <FromDiscord> <Elegantbeef> https://play.nim-lang.org/
[10:17:09] <FromDiscord> <Smarc> sent a long message, see http://ix.io/3CsW
[10:18:15] <FromDiscord> <evoalg> In reply to @Elegantbeef "https://play.nim-lang.org/": oh it's only when I use "import timeit" ....
[10:19:21] <FromDiscord> <evoalg> (edit) "...." => "....↵eg:↵echo timeGo do:↵  var a = 1"
[10:20:09] <FromDiscord> <geekrelief> In reply to @Smarc "Hey party people, here": I think this is what you're looking for https://nim-lang.github.io/Nim/manual.html#procedures-var-parameters
[10:22:00] <FromDiscord> <Elegantbeef> Does timeit take typed code?
[10:23:04] <FromDiscord> <Elegantbeef> rather `timeGo`
[10:24:07] <FromDiscord> <Rika> In reply to @Smarc "Hey party people, here": There’s no concept of modules after you compile afaik
[10:27:01] <FromDiscord> <evoalg> In reply to @Elegantbeef "rather `timeGo`": timeGo runs fine on my computer, but on playground it doesn't seem to work ... I'm not sure what you mean by typed code
[10:28:10] <FromDiscord> <geekrelief> In reply to @Smarc "Hey party people, here": Are you saying you want to modify the array C at compile time?
[10:28:10] <FromDiscord> <Elegantbeef> Macros can take `typed` and `untyped` code typed is semantically checked so has to be valid, and untyped is parsed but unchecked
[10:29:06] <FromDiscord> <geekrelief> (edit) "In reply to @Smarc "Hey party people, here": Are you saying you want to modify the array C at compile time? ... " 03added "Maybe a combination of `static` with `var` parameter to set array C?"
[10:29:28] <FromDiscord> <Elegantbeef> But it takes untyped, so i dont get what the macro is doing
[10:29:41] <FromDiscord> <geekrelief> (edit) "In reply to @Smarc "Hey party people, here": Are you saying you want to modify the array C at compile time? Maybe a combination of `static` with `var` parameter to set array C? ... " 03added "or just return the new array instead of using var parameter."
[10:29:47] <FromDiscord> <Elegantbeef> Smarc i'd suggest making an example and sharing it, it's unclear what you're after to me 😀
[10:31:22] <FromDiscord> <Smarc> In reply to @geekrelief "Are you saying you": `var` parameters did exactly what I wanted to do, thank you!
[10:34:49] <FromDiscord> <evoalg> In reply to @Elegantbeef "Macros can take `typed`": Thank you
[10:38:13] <FromDiscord> <that_dude> I was looking at the 1.6 changelog, and I was wondering, what's the difference between `import foo {.all.}` and `include foo`?
[10:42:27] <FromDiscord> <geekrelief> In reply to @that_dude "I was looking at": just a guess, but `include foo` is a basically inserted so any imports would be brought into your module, while `import foo {.all.}` probably wouldn't bring any imports in.  I would have to test this to confirm it.
[10:43:06] <FromDiscord> <Elegantbeef> That's be my assumption aswell
[10:43:26] <FromDiscord> <that_dude> Ah so include also imports all of `foo`s dependencies as well. Got it
[10:45:40] <FromDiscord> <konsumlamm> include just copy pastes the module
[10:47:13] <FromDiscord> <geekrelief> Yeah I just tested it, and `{.all.}` doesn't bring in imports.
[10:48:04] <pro> is it possible that one process appends to file, while another process is reading the first line of the same file and consuming it (deleting it) without changing the rest of the file
[10:58:43] *** Joins: PMunch (~PMunch@ti0315q160-3667.bb.online.no)
[10:58:51] *** Quits: PMunch (~PMunch@ti0315q160-3667.bb.online.no) (Client Quit)
[10:59:07] *** Joins: PMunch (~PMunch@ti0315q160-3667.bb.online.no)
[11:05:18] <FromDiscord> <Smarc> Is it possible to create an object without explicitly naming the arguments? I mean writing Name(x, y) instead of Name(par1: x, par2: y)
[11:07:05] <FromDiscord> <Rika> Create a proc for it
[11:07:12] <FromDiscord> <Rika> That is the common convention
[11:07:36] <FromDiscord> <Rika> initType for objects, newType for reference objects
[11:08:29] <FromDiscord> <that_dude> I still want to complain that object initialization uses `:` to set its values despite nim using `=` everywhere else to set values and `:` to define type (afaik)
[11:08:46] <FromDiscord> <Rika> No comment
[11:10:11] <FromDiscord> <Rika> It’s not a change that can be done anymore without a version 2
[11:10:38] <FromDiscord> <that_dude> ik :(
[11:10:48] <FromDiscord> <that_dude> Here's to me hoping it will happen in v2
[11:10:58] <FromDiscord> <Rika> Just wait for the more unified initialisation RFCs to pass
[11:11:02] <FromDiscord> <Elegantbeef> I mean using procs works well so idk
[11:12:43] <FromDiscord> <that_dude> Yeah, but I find it just hides the issue. And often I don't want to make a proc whos purpose is nothing but to copy and paste the values with no changes. If I wanted to also add defaults, then sure, but often I don't need them
[11:13:43] <FromDiscord> <Elegantbeef> My view is constructors always suck
[11:14:05] <FromDiscord> <that_dude> Really?
[11:14:19] <FromDiscord> <that_dude> What about working with defaults?
[11:14:57] <FromDiscord> <Elegantbeef> doing `YourType(x: x, y: y)` is tedious so is `proc initYourType(x: XType, y: YType): YourType = YourType(x: x, y: y)`
[11:15:06] <FromDiscord> <Elegantbeef> I'm not talking about their existence just the syntax
[11:15:43] <FromDiscord> <Elegantbeef> Nowadays I think something like https://github.com/beef331/constructor#constructor-1 is idea, but who knows what i'll think later
[11:15:59] <FromDiscord> <Elegantbeef> ideal\
[11:17:16] <FromDiscord> <Rika> Not sure if I like how you use “let” instead of “result.” for defaults…
[11:17:27] <FromDiscord> <that_dude> Cheers to that, I do like that a lot more.
[11:18:05] <FromDiscord> <that_dude> In reply to @Rika "Not sure if I": It uses the implicit result in there instead
[11:18:21] <FromDiscord> <that_dude> from what I can see
[11:18:32] <FromDiscord> <Elegantbeef> Nah it emits a constructor at the end iirc
[11:18:59] <FromDiscord> <that_dude> I was wondering, I see the let in there, does that make the object immutable?
[11:19:00] <FromDiscord> <Rika> I mean the macro syntax
[11:19:19] <FromDiscord> <that_dude> that field I mean
[11:19:43] <FromDiscord> <Elegantbeef> Nope `let` is just demonstrating that you can get values at runtime
[11:19:53] <FromDiscord> <that_dude> Got it
[11:20:03] <FromDiscord> <Rika> I think it’s better if the body wasn’t a scuffed DSL and was just a “this part is inserted after the macro-created body”
[11:20:27] <FromDiscord> <Elegantbeef> Yea that could work
[11:26:36] <FromDiscord> <Elegantbeef> Anywho i'm still actively trying to think of better ways of making constructors cause i really dislike all present versions 😀
[11:26:59] <FromDiscord> <that_dude> What's wrong with them?
[11:27:29] <FromDiscord> <Elegantbeef> Generally tedious or just annoy me to write
[11:27:59] <FromDiscord> <that_dude> Even with your package
[11:28:02] <FromDiscord> <that_dude> ?
[11:28:28] <FromDiscord> <that_dude> Because tbh it seems pretty good, I'm struggling to find issues/disagreements
[11:28:52] <FromDiscord> <Elegantbeef> Well it makes it less annoying but i'm an idiot that's hesitant to bring in dependencies
[11:29:52] <FromDiscord> <Elegantbeef> Constructors are such a small portion of code that it seems comical to pull in a dependancy to just make a constructor 😀
[11:29:57] <FromDiscord> <that_dude> Ah. I'm a "As long as it doesn't crash and works as expected, I don't mind a minor size and performance hit" kinda guy
[11:30:09] <FromDiscord> <Elegantbeef> Well it doesnt effect either of those
[11:30:22] <FromDiscord> <that_dude> In which case why not just use it.
[11:30:29] <FromDiscord> <Elegantbeef> It's more just in most cases in the time i add the dependancy i could've made the constructor
[11:31:02] <FromDiscord> <Elegantbeef> I have to go get the version i have it pinned, put it in the nimble file, add the import, then make the constructor
[11:31:21] <FromDiscord> <that_dude> I made this thing because I needed better switches and counters for a program that has a gui  https://github.com/XDEmer0r-L0rd-360-G0d-SlayerXD/NimCounter
[11:31:50] <FromDiscord> <that_dude> It's the most trivial thing ever, but I'm lazy and I did the work once already
[11:31:53] <FromDiscord> <Elegantbeef> `clear` should be `.setLen(0)`
[11:32:24] <FromDiscord> <that_dude> Is what I currently have bad?
[11:32:27] <FromDiscord> <Elegantbeef> `@[]` allocates a new sequence so you lose all that capacity you had
[11:32:35] <FromDiscord> <that_dude> ah
[11:33:04] <FromDiscord> <Elegantbeef> Isnt this an elaborate `CountTable[string]`?
[11:33:22] <FromDiscord> <that_dude> Hold up let me look that up lol
[11:33:39] <FromDiscord> <Elegantbeef> It's a table that goes string -\> int
[11:33:49] <FromDiscord> <that_dude> Damn lol yeah
[11:34:14] <FromDiscord> <that_dude> Well my initial purpose was for the single version so I can use it as switches. The multi was and after thought lol
[11:34:17] <FromDiscord> <Elegantbeef> `yourTable.inc("someString")` will add `"someString"` and make it `1`
[11:35:21] <FromDiscord> <that_dude> I was 90% what I did already existed so that's why I haven't messed with posting it in nimble
[11:36:09] <FromDiscord> <Elegantbeef> Well another note is you've mad an alias which isnt distinctly typed, so any `seq[string]` can use these procs
[11:36:12] <FromDiscord> <Elegantbeef> Which could be desired, but idk
[11:37:14] <FromDiscord> <Elegantbeef> Probably should ask if people want me to comment on their code instead of just doing it
[11:37:22] <FromDiscord> <that_dude> Who am I to take away possible niche functionality
[11:37:35] <FromDiscord> <that_dude> Nah I'm happy for it. I learned like 3 things already
[11:39:55] <FromDiscord> <Elegantbeef> Just to show you how you might do this if you want an object to be a type but not type match for it https://play.nim-lang.org/#ix=3Ctd
[11:39:55] <NimEventer> New Nimble package! dslutils - A macro collection for creating DSL in nim, see https://github.com/codehz/dslutils
[11:41:22] <FromDiscord> <Elegantbeef> There are some bugs with distinct but i've got some PRs for some of those issues, though there are still others 😀
[11:41:56] <FromDiscord> <that_dude> Tbh I've known for a while that distinct exists, but I've like the ability to be lazy and just it work itself out
[11:42:30] <FromDiscord> <that_dude> That way I can still use normal procs I don't want to bother to impliment or somethnig
[11:43:26] <FromDiscord> <that_dude> Quite often I find that there is no need to remove features when it has little effect on the complexity
[11:44:00] <FromDiscord> <Elegantbeef> Yea i was just mentioning it cause some people act like distinct and type aliases are the same \:D
[11:44:41] <FromDiscord> <that_dude> That's why each type has exactly 4 procs with the same name that are intended to kinda mirror each other
[11:46:36] <FromDiscord> <that_dude> I guess I've never seen the need for distinct in the things I do because I don't really need a name that much that I want to overwrite the builtin
[11:54:05] *** Quits: pro (~pro@user/pro) (Quit: WeeChat 3.3)
[12:26:07] *** Joins: Vladar (~Vladar@46.162.2.53)
[12:26:55] <FromDiscord> <dilawar (Dilawar Singh)> Is there a way to pass the C compiler path to nim directly e.g. `nim c --some_cc_opt:/mingw64/bin/gcc.exe foo.nim`. Following works on bash like shell `CC=/mingw64/bin/gcc.exe nim c --cc:env foo.nim` but it is not very portable (inside cmake `add_custom_command` which may be executed with `cmd.exe` or `pwsh.exe`).
[12:27:12] <FromDiscord> <dilawar (Dilawar Singh)> The last resort would be to write a wrapper script 😟
[12:27:48] <FromDiscord> <dilawar (Dilawar Singh)> [Edit](https://discord.com/channels/371759389889003530/371759389889003532/901031353036976148): Is there a way to pass the C compiler path to nim directly e.g. `nim c --some_cc_opt:/mingw64/bin/gcc.exe foo.nim`?↵↵Following works on bash like shell `CC=/mingw64/bin/gcc.exe nim c --cc:env foo.nim` but it is not very portable (inside cmake `add_custom_command` which may be executed with `cmd.exe` or `pwsh.exe`).
[12:30:44] <FromDiscord> <Elegantbeef> I think the general way of doing it is making a shell script which invokes the compiler
[12:35:20] <FromDiscord> <dilawar (Dilawar Singh)> @elegantbeef\:matrix.org You may be right. Unfortunately add\_custom\_command does not copy parent process ENVs (https://stackoverflow.com/questions/35029277/how-to-modify-environment-variables-passed-to-custom-cmake-target/35032051)
[12:37:06] <FromDiscord> <Elegantbeef> Yea i dont know the best way here, so i can only say good luck
[12:44:56] <FromDiscord> <dilawar (Dilawar Singh)> Hmm. Not sure if it is worth asking it as a feature request on nim Github/forum. May be a useful feature in the universe of build environments!! Anyway, custom script it is.
[13:05:26] <PMunch> IIRC Nim does some extra choices when you choose the compiler, not only which binary to build with
[13:17:53] <FromDiscord> <dilawar (Dilawar Singh)> @\_discord\_709044657232936960\_=50=4dunch=5b=49=52=43=5d\:t2bot.io You are right. You can choose gcc, llvm etc but not the full path
[13:18:12] <FromDiscord> <dilawar (Dilawar Singh)> its finds the binary for you. Most of the time it does a pretty good job
[13:19:28] <FromDiscord> <dilawar (Dilawar Singh)> I got into one corner case where I am using msys+mingw and visual studio to build the whole system. Its a nightmare. And not to mention, on CI environment things are installed at non-standard places..
[13:32:50] <FromDiscord> <dilawar (Dilawar Singh)> In python, `sys.executable` in a script returns the path of the python interpreter. What is nim equivalent?
[13:35:07] <FromDiscord> <Rika> You cannot reliably do soafaik
[13:35:11] <FromDiscord> <Rika> (edit) "soafaik" => "so afaik"
[13:41:31] *** Quits: madprops (~hj8oijo@user/madprops) (Ping timeout: 268 seconds)
[13:42:53] *** Joins: aaaaaaaaaa (~hj8oijo@li628-159.members.linode.com)
[13:44:46] <FromDiscord> <Rika> https://nim-lang.org/docs/os.html#getAppFilename
[13:44:49] <FromDiscord> <Rika> Maybe
[13:49:34] <NimEventer> New question by Dilawar: What is nim&#39;s equivalent of Python&#39;s `sys.executable`?, see https://stackoverflow.com/questions/69675173/what-is-nims-equivalent-of-pythons-sys-executable
[13:50:23] *** Quits: Vladar (~Vladar@46.162.2.53) (Remote host closed the connection)
[13:50:55] <FromDiscord> <dilawar (Dilawar Singh)> Thanks. https://nim-lang.org/docs/os.html#getCurrentCompilerExe also looks promising.↵(@Rika)
[13:51:05] <FromDiscord> <Rika> That is the compiler
[13:51:14] <FromDiscord> <Rika> Do you want the running program or the compiler
[13:51:21] <FromDiscord> <Rika> And what for
[13:52:50] <FromDiscord> <dilawar (Dilawar Singh)> Both are same the same at compile time.
[13:53:10] <FromDiscord> <dilawar (Dilawar Singh)> At compile time, both are the same. Thanks for the help.
[13:56:01] <FromDiscord> <dilawar (Dilawar Singh)> I am working with `nimscript`. I should have been clearer.
[13:57:34] <FromDiscord> <Yardanico> In reply to @dilawar (Dilawar Singh) "I am working with": oh
[14:00:22] <FromDiscord> <Yardanico> btw, out of curiosity, any reason you're using nimscript? :P
[14:00:40] <FromDiscord> <Yardanico> no i mean it's fine, just curious why you're trying out nimscript first
[14:01:21] <FromDiscord> <dilawar (Dilawar Singh)> I don't want to learn PowerShell and python is part of development stack.. A good excuse to get into nim.
[14:03:13] <FromDiscord> <Yardanico> well, you can use Nim itself as kind of a scripting language easily
[14:03:18] <FromDiscord> <Yardanico> quite a lot of people do just that
[14:03:42] <FromDiscord> <Yardanico> and Nimscript is really just Nim, if you're worrying about the static typing - NimScript is also statically typedf
[14:03:44] <FromDiscord> <Yardanico> (edit) "typedf" => "typed"
[14:11:15] <FromDiscord> <dilawar (Dilawar Singh)> @\_discord\_177365113899057152\:t2bot.io Ah, I see. I got the impression that for scripting, `nimscript` is the way.
[14:19:08] *** Joins: neurocyte0132889 (~neurocyte@213.188.113.91)
[14:19:08] *** Quits: neurocyte0132889 (~neurocyte@213.188.113.91) (Changing host)
[14:19:08] *** Joins: neurocyte0132889 (~neurocyte@user/neurocyte)
[14:21:51] <PMunch> Not really, Nim itself can be used for scripting just fine
[14:22:10] <PMunch> You might want to check out nimcr for an easier way to run your scripts as well
[14:22:31] <PMunch> Oh wait, you mentioned Powershell, so I guess your on Windows..
[14:22:34] <PMunch> Might not work then
[14:24:07] <FromDiscord> <Jan81> I would love using a language go write apps and also write basic scripts in 🙂 thats why im learning nim as well! I hate using powershell for this, bash for that, python for another
[14:30:12] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Read error: Connection reset by peer)
[14:33:21] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[14:40:39] <FromDiscord> <dilawar (Dilawar Singh)> "I hate using powershell for this, bash for that, python for another so decided to use NIM" would make a good manga!
[14:43:38] <FromDiscord> <Smarc> sent a code paste, see https://play.nim-lang.org/#ix=3Cu3
[14:43:55] <FromDiscord> <Rika> No
[14:44:21] <FromDiscord> <Smarc> So then whats the Nim way to solve this? Please don't say don't use inheritance :P
[14:44:46] <FromDiscord> <Rika> If I cannot say that then my answer is “deal with it”
[14:44:57] <FromDiscord> <Rika> Or wait do you not know of the “of” operator
[14:45:02] <FromDiscord> <Yardanico> @Smarc i guess you can write a macro that will convert this to if/elif with `of`
[14:45:04] <FromDiscord> <Rika> “if animal of Cat”
[14:45:15] <FromDiscord> <Yardanico> if you want to use case statements
[14:45:31] <FromDiscord> <Rika> In reply to @Yardanico "<@!218712890780155915> i guess you": Ah case statement macros yeah those are new
[14:45:38] <FromDiscord> <Smarc> okay i figured that, so a usual if/elif statement with of operator is the way to go in this case?
[14:46:00] <FromDiscord> <Rika> If you don’t wanna make a macro yeah
[14:46:20] <FromDiscord> <Smarc> haven't dabbled into macros yet, but i'll look into it! Thank you guys once again
[14:51:56] *** Quits: PMunch (~PMunch@ti0315q160-3667.bb.online.no) (Quit: Leaving)
[15:00:38] <arkanoid> I'm experimenting with nimpy, I want to try compiling a static executable that embeds python (limited to builtin modules to make things easier). It should be possible as my ubuntu box ships with "/usr/lib/x86_64-linux-gnu/libpython3.8.a"
[15:01:40] <FromDiscord> <Yardanico> well, the problem is that nimpy only supports dynamic loading of libpython so you'll have to modify it for static linking
[15:02:14] <arkanoid> problem is that according to /proc/<pid>/maps the .so keeps being loaded even when using this config.nims: https://termbin.com/wp3i
[15:02:38] <arkanoid> oh, ok
[15:02:38] <FromDiscord> <Yardanico> yes, as I said
[15:02:46] <FromDiscord> <Yardanico> nimpy doesn't use dynlib, it loads the python libs by itself
[15:02:50] <FromDiscord> <Yardanico> so you'll have to modify it
[15:02:53] <arkanoid> not even dynlibOverride can bypass nimpy logic?
[15:03:03] <arkanoid> ok
[15:03:11] <FromDiscord> <Yardanico> no, dynlibOverride is only for when the library is using the  `dynlib` pragma
[15:03:17] <FromDiscord> <Yardanico> for loading dynamic libraries
[15:03:25] <arkanoid> why nimpy went the non-nim way?
[15:04:00] <FromDiscord> <Yardanico> eh, it's not a "non-nim" way, and checking nimpy source code it seems to do that because python has a lot of versions, y'know :)
[15:06:33] <arkanoid> Yeah I see it uses loadLib directly https://nim-lang.org/docs/dynlib.html#loadLib
[15:07:30] <FromDiscord> <Yardanico> if you check py_lib.nim you can see it has some checks for different versions that have different symbols or don't have some of them at all
[15:07:57] <FromDiscord> <Yardanico> i think it shouldn't too hard to modify nimpy for a static compilation, but you'll have to hardcode it to the python version you're using
[15:08:10] <FromDiscord> <Yardanico> also, why not just ship libpython with your app?
[15:08:50] <arkanoid> you mean ship the dll/so with my nim executable?
[15:08:54] <FromDiscord> <Yardanico> yes
[15:08:59] <FromDiscord> <Yardanico> if you want a "single file binary" on linux, you can just use AppImage for example
[15:09:17] <FromDiscord> <Yardanico> and on windows you usually create installers, or in the worst case you can use tools like Enigma VirtualBox that pack whole folders into a single exe
[15:09:31] <FromDiscord> <Yardanico> and honestly python is almost universally available on linux distros
[15:09:40] <FromDiscord> <Yardanico> the version might differ though
[15:09:43] <arkanoid> well for windows should be possible as exec folder is in dyn loader search path, but that's not true for linux
[15:10:10] <FromDiscord> <Yardanico> but you can just use https://github.com/yglukhov/nimpy/blob/master/nimpy/py_lib.nim#L471
[15:11:16] <arkanoid> cool!
[15:12:19] <FromDiscord> <Yardanico> `pyInitLibPath(getAppDir() / "libpython3.8.so")` or something like that
[15:12:28] <FromDiscord> <Yardanico> assuming you did `import std/os` for the `/`
[15:12:50] <FromDiscord> <evoalg> In reply to @Yardanico "<@!218712890780155915> i guess you": Quick noob question about that: in general for nim, what's the advantage of using case/of's instead of if/elif's?
[15:13:21] <FromDiscord> <Yardanico> all case statements must be exhaustive, meaning that you need to always handle all possible values (or _explicitly_ not handle them)
[15:13:41] <FromDiscord> <evoalg> that's a good thing?
[15:13:44] <FromDiscord> <Yardanico> yes?
[15:13:53] <FromDiscord> <Yardanico> you're not going to miss some value from your enum for example
[15:14:01] <FromDiscord> <Yardanico> see https://nim-lang.org/docs/manual.html#statements-and-expressions-case-statement for a more detailed explanation
[15:14:12] <FromDiscord> <evoalg> ah thank you
[15:15:35] <FromDiscord> <Yardanico> also it can be faster than if/elif in some cases, e.g. if you're doing some parser that consumes chars so you can use char sets
[15:15:44] <FromDiscord> <Yardanico> (second case example in that link)
[15:17:30] *** Joins: Vladar (~Vladar@46.162.2.53)
[15:21:47] <FromDiscord> <evoalg> Thank you! ... that reminds me, in a proc when I do "if foo: return bar", then for the next line I don't bother with "else" because there's no need - is that bad? I've seen examples of people using "else".
[15:23:19] <FromDiscord> <Yardanico> sent a code paste, see https://play.nim-lang.org/#ix=3Cu9
[15:23:32] <FromDiscord> <Yardanico> it's not "bad" but depending on the code it can lead to unexpected behaviour
[15:23:40] <FromDiscord> <Yardanico> (not "undefined" but unexpected :P)
[15:24:46] <FromDiscord> <evoalg> can the next line be: return "goodbye" ... without else ... I know it can, but is it "ok"?
[15:25:30] <FromDiscord> <evoalg> I mean I know it works, but are there good reasons to use "else" where it's not needed here?
[15:26:56] <FromDiscord> <Rika> It’s okay
[15:27:21] <FromDiscord> <evoalg> Thank you!
[15:36:01] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.3)
[15:36:32] *** Joins: supakeen (~user@python/site-packages/supakeen)
[15:39:49] <FromDiscord> <Arend | ᛗᛟᚢᚱᛁᛖᛊ> I used `setSockOpt(OptReuseAddr, true)`  in my code but every time I boot up the server it says address is in use since switching to 1.6.0 🤔
[15:48:10] *** Joins: elph (uid286227@id-286227.lymington.irccloud.com)
[15:49:31] *** Quits: kayabaNerve (~kayabaNer@user/kayabanerve) (Remote host closed the connection)
[15:49:56] *** Joins: kayabaNerve (~kayabaNer@user/kayabanerve)
[17:00:13] *** Joins: rockcavera (~rc@user/rockcavera)
[17:30:06] *** Quits: pch_ (~pch@66.49.131.33) (Ping timeout: 260 seconds)
[17:33:54] *** Joins: pch (~pch@66.49.131.33)
[17:50:34] <FromDiscord> <tandy> is there a way to cite the nim programming language?
[17:51:20] <FromDiscord> <Yardanico> i don't think there's a research paper about nim that you can cite, but i'm not an expert in this area
[18:04:36] <FromDiscord> <haxscramper> There should be a rules for citing online resources and other things
[18:04:50] <FromDiscord> <tandy> yeah im using that
[18:04:50] <FromDiscord> <haxscramper> Of course nim does not have research paper with DOI
[18:04:56] <FromDiscord> <tandy> just was wondering if there was a preferd way
[18:05:23] <FromDiscord> <haxscramper> I suppose you can look up general rules for citing an open-source projects
[18:05:38] <FromDiscord> <haxscramper> https://arxiv.org/abs/2003.03449
[18:08:14] *** Joins: pro (~pro@user/pro)
[18:15:42] *** Quits: pro (~pro@user/pro) (Quit: WeeChat 3.3)
[18:16:00] *** Joins: pro (~pro@user/pro)
[18:16:38] *** Quits: pro (~pro@user/pro) (Client Quit)
[18:16:53] *** Joins: pro (~pro@user/pro)
[18:18:55] *** Quits: pro (~pro@user/pro) (Client Quit)
[18:19:13] *** Joins: pro (~pro@user/pro)
[18:20:13] *** Quits: pro (~pro@user/pro) (Client Quit)
[18:47:43] <arkanoid> when should I use orc and not only arc?
[18:49:04] <FromDiscord> <Yardanico> In reply to @arkanoid "when should I use": well, basically, if you don't care much you can always use orc
[18:49:08] <FromDiscord> <Yardanico> orc is arc + cycle collector
[18:49:19] <FromDiscord> <Yardanico> so if you are sure that your program does not create cycles, you can just use arc
[18:49:28] <FromDiscord> <Yardanico> but if it does actually use cycles and you're using arc, the program will leak memory
[18:49:36] <arkanoid> is it when I make a ref object that references itself?
[18:49:50] <FromDiscord> <Yardanico> that too
[18:50:06] <FromDiscord> <dom96> In reply to @haxscramper "https://arxiv.org/abs/2003.03449": hah, that's my dissertation
[18:50:08] <FromDiscord> <Yardanico> or if you have a -> b -> c and c references a
[18:51:04] *** Joins: al1ranger (~al1ranger@182.57.188.195)
[18:51:15] <arkanoid> got it, thanks. I wonder what's the overhead of orc over arc. I'd always use orc even if it would be 2x times slower
[18:52:04] <FromDiscord> <Yardanico> the overhead is not big, and it can be 0 if you mark potentially cyclic objects that are not actually cyclic as {.acyclic.}
[18:52:18] <FromDiscord> <Yardanico> https://nim-lang.org/blog/2020/12/08/introducing-orc.html
[18:57:45] <arkanoid> Yardanico: is {.acyclic.} a pragma to help compiler compile faster, or it does actually speedup runtime?
[18:57:56] <FromDiscord> <Yardanico> check that article
[18:58:14] <FromDiscord> <Yardanico> ORC assumes all acyclic types can never contain cycles so it doesn't check them
[18:58:18] <arkanoid> it says "The Nim compiler analyses the involved types and only if it is potentially cyclic, code is produced that calls into the cycle collector"
[18:58:28] <FromDiscord> <Yardanico> cycle collector is orc's runtime part
[18:58:36] <FromDiscord> <Yardanico> so if you mark an actually cyclic type as acyclic it'll leak memory even with orc
[19:04:17] *** Joins: Gustavo6046_ (~Gustavo60@user/gustavo6046)
[19:04:28] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Ping timeout: 252 seconds)
[19:05:47] <arkanoid> got it, thanks
[19:06:11] <arkanoid> well, hard realtime party!
[19:06:58] <arkanoid> thanks to nim 1.6.0 I've finally enabled arc/orc in my app. I was waiting for a bug to be fixed
[19:07:09] *** Gustavo6046_ is now known as Gustavo6046
[19:09:14] *** Quits: al1ranger (~al1ranger@182.57.188.195) (Quit: Leaving)
[19:11:30] <FromDiscord> <gerwy> hmm i know it might sound stupid, but i have module conflict and is there a way to like, seperate those two?↵i could always have one script that uses one module and the other one uses other one (they must be run one after another) but its pretty ugly solution↵I know its a problem because linking error pops up only when i import both of them
[19:14:59] <FromDiscord> <gerwy> and its stupid because i just wanted to use nimview with webview...
[19:16:18] <FromDiscord> <lbart> mmmhh I have an Enum which start with "1" and case kind of this enum and nim raises this: "Error: low(kind) must be 0 for discriminant"↵Why kind must start at 0?
[19:16:48] <FromDiscord> <Yardanico> can you show the enum definition?
[19:17:44] <FromDiscord> <Yardanico> and preferably code where you're trying to use the enums too
[19:19:18] <FromDiscord> <Yardanico> ah I see now, for an object variant
[19:19:18] <FromDiscord> <Yardanico> hmm
[19:20:57] <FromDiscord> <lbart> something like this: https://play.nim-lang.org/#ix=3CvO
[19:21:18] <FromDiscord> <Yardanico> yeah, I figured, doesn't look like you can fix that, any reason you want this enum to start at 1 ?
[19:21:56] <FromDiscord> <Yardanico> In reply to @lbart "something like this: https://play.nim-lang.org/#ix=": see the original issue https://github.com/nim-lang/Nim/issues/3096
[19:22:46] <arkanoid> can {.push warningAsError[Effect]: on.} be applied at whole project and not as module pragma?
[19:23:12] <FromDiscord> <Yardanico> yes, just put it in your config
[19:23:27] <FromDiscord> <Yardanico> should be just `--warningAsError[Effect]:on`
[19:23:36] <FromDiscord> <Yardanico> i mean nim config, file.nim.cfg or file.nims
[19:23:54] <FromDiscord> <lbart> In reply to @Yardanico "yeah, I figured, doesn't": It's come from a standard. But I can live with an "unknown = 0"
[19:24:36] <arkanoid> config.nims(1, 2) Error: invalid command line option: '--warningAsError[Effect]'
[19:24:39] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Quit: ZNC 1.8.2 - https://znc.in)
[19:25:01] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[19:25:10] <FromDiscord> <Yardanico> ah, in nims it's a bit different I think
[19:25:19] <FromDiscord> <gerwy> okay nevermind, i didn't know about all nimview functions sowwy
[19:25:28] <FromDiscord> <Yardanico> In reply to @arkanoid "config.nims(1, 2) Error: invalid": try --warningAsError:"Effect:on"
[19:26:11] <arkanoid> ok this works!
[19:26:12] <FromDiscord> <Yardanico> this is needed because in nimscript (which .nims is) `--` is just a template for `switch`
[19:26:13] <arkanoid> thanks
[19:26:23] <FromDiscord> <Yardanico> https://nim-lang.org/docs/nimscript.html#--.t%2Cuntyped%2Cuntyped
[19:27:52] <arkanoid> and how to make "UnusedImport" an error too?
[19:28:20] <FromDiscord> <Yardanico> same as you did Effect ?
[19:28:20] <arkanoid> found
[19:28:32] <arkanoid> but I get errors in system.nim :D
[19:28:35] <arkanoid> not usable
[19:29:03] <FromDiscord> <Yardanico> well yeah, and I don't think it's such a big deal really
[19:29:04] <arkanoid> .choosenim/toolchains/nim-1.6.0/lib/system.nim(1902, 14) Error: imported and not used: 'coro_detection' [UnusedImport]
[19:29:13] <arkanoid> sure, not a problem
[19:29:15] <FromDiscord> <Yardanico> nim always has dead code elimination enabled anyway
[19:29:37] <arkanoid> yeah but it help keeping readable code clean
[19:30:35] <FromDiscord> <Yardanico> sure, but I find warnings given by the compiler enough for me to fix those issues :)
[19:30:46] <FromDiscord> <Yardanico> i don't need to make them into errors to be forced to fix them
[19:55:31] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Ping timeout: 245 seconds)
[19:55:33] *** Joins: Gustavo6046_ (~Gustavo60@user/gustavo6046)
[19:58:20] *** Gustavo6046_ is now known as Gustavo6046
[20:02:32] *** Joins: arkurious (~arkurious@user/arkurious)
[20:37:17] *** Joins: natrys (~natrys@user/natrys)
[20:43:16] <FromDiscord> <DMI-1407> is there a list of known bugs ? (most famous ones etc... ?)
[20:46:59] <FromDiscord> <Rika> the issues page on github?
[20:47:19] <FromDiscord> <DMI-1407> these are not bugs related to the language
[20:47:25] <FromDiscord> <DMI-1407> (mostly)
[20:47:46] <FromDiscord> <DMI-1407> i mean bugs related to the language only
[20:48:59] <FromDiscord> <DMI-1407> e.g. : https://media.discordapp.net/attachments/371759389889003532/901157696462532618/unknown.png
[20:52:37] <FromDiscord> <haxscramper> there are tags for the bugs on github
[20:52:48] <FromDiscord> <haxscramper> you can filter out things that you need
[20:53:29] <FromDiscord> <Rika> there are a lot of labels
[20:53:44] <FromDiscord> <haxscramper> And if you are wondering what it means exactly by "has a bug that affects symbols" then your best bet is to git blame someone who wrote this
[20:53:48] <FromDiscord> <haxscramper> read their mind
[20:54:03] <FromDiscord> <haxscramper> who the hell writes messages like that I wonder
[20:54:06] <FromDiscord> <haxscramper> super descriptive
[20:54:25] <FromDiscord> <haxscramper> "there might be some bug, but I won't even tell you what it can affect, or how or in what situations"
[20:54:30] <FromDiscord> <Rika> should have linked the issue
[20:57:32] <FromDiscord> <DMI-1407> ok 😅
[20:58:05] <FromDiscord> <haxscramper> image.png https://media.discordapp.net/attachments/371759389889003532/901159989324959744/image.png
[20:58:05] <FromDiscord> <haxscramper> holy shit
[20:58:07] <FromDiscord> <haxscramper> 11 years ago
[20:58:08] <FromDiscord> <haxscramper> fucking
[20:58:34] <FromDiscord> <haxscramper> unbelievable
[20:58:37] <FromDiscord> <DMI-1407> yeah hopefully that bug has been fixed already
[20:58:45] <FromDiscord> <dom96> there are older bugs in Firefox
[20:58:54] <FromDiscord> <haxscramper> The main question is "what bug"
[20:59:19] <FromDiscord> <haxscramper> sure, there are older bugs in multix↵(@dom96)
[20:59:38] <FromDiscord> <haxscramper> I bet there are bugs as old as half a century somewher
[20:59:40] <FromDiscord> <haxscramper> so what?
[21:00:03] <FromDiscord> <Rika> what does bugs in firefox have to do with this
[21:00:07] <FromDiscord> <Rika> thats a strange thing to say
[21:00:08] <FromDiscord> <DMI-1407> nim started in 2008
[21:00:12] <FromDiscord> <haxscramper> I've personally been bitten in the ass by bug report 23 years old, but that does not indicate anything
[21:00:29] <FromDiscord> <haxscramper> open-sourced in 2008
[21:00:32] <FromDiscord> <haxscramper> started in 2004 IIRC
[21:00:36] <FromDiscord> <DMI-1407> oh ok
[21:00:51] <FromDiscord> <haxscramper> well, that does not mean to imply anything, just a clarification
[21:01:10] <FromDiscord> <dom96> In reply to @Rika "what does bugs in": firefox is an open source project that actually has a lot of donations and they also have old bugs
[21:01:19] <FromDiscord> <dom96> how is it strange to draw parallels?
[21:01:37] <FromDiscord> <haxscramper> well, it is not strange to draw parallels if they mean anything
[21:01:49] <FromDiscord> <haxscramper> yeah, sure eveyone writes buggy code
[21:02:04] <FromDiscord> <haxscramper> main point is not an existence of the bug itself, but documentation that says
[21:02:13] <FromDiscord> <haxscramper> "it might be broken, idk how, idk why"
[21:02:31] <FromDiscord> <DMI-1407> its scary
[21:02:51] <FromDiscord> <dom96> In reply to @haxscramper "well, it is not": eh, the parallels I drew do mean something
[21:03:14] <FromDiscord> <dom96> it means "every open source project has 11+ year old bugs
[21:03:19] <FromDiscord> <dom96> (edit) "bugs" => "bugs""
[21:03:21] <FromDiscord> <haxscramper> I mean I don't know when bad things can happen, but you did inform that they are likely to happen somehow
[21:04:17] <FromDiscord> <haxscramper> This statement is just as hard to argue against as to find any value that it brings to the conversation. And that was not the point of the original discussion anyway↵(@dom96)
[21:04:59] <FromDiscord> <haxscramper> The point is, that for over a decate there has been a line in the docs, that said "things might go wrong" without actually telling anyone
[21:05:01] <FromDiscord> <haxscramper> and guess what
[21:05:14] <FromDiscord> <haxscramper> nobody has any means to actually find what this means now
[21:05:24] <FromDiscord> <DMI-1407>  https://media.discordapp.net/attachments/371759389889003532/901161829047337031/unknown.png
[21:05:42] <FromDiscord> <haxscramper> unless they go over all bugs there are, find which ones are related to fieldPairs and try to play detective
[21:05:52] <FromDiscord> <haxscramper> but anyway, my assumption is that bug has been fixed
[21:06:06] <FromDiscord> <haxscramper> because `fieldPairs` worked in just about every situation that I managed to put it through
[21:06:14] <FromDiscord> <haxscramper> and I write some very whacky shit
[21:06:22] <FromDiscord> <dom96> In reply to @haxscramper "nobody has any means": Clearly you can just ask Araq about it 🙂
[21:10:22] <FromDiscord> <haxscramper> Let's see if this yields anything
[21:10:33] <FromDiscord> <haxscramper> Btw, 11989 stars on the GH
[21:13:06] <FromDiscord> <dom96> socialblade needs a github stars category
[21:24:48] *** Quits: xet7 (~xet7@user/xet7) (Remote host closed the connection)
[21:25:43] *** Joins: xet7 (~xet7@user/xet7)
[21:26:26] *** Quits: xet7 (~xet7@user/xet7) (Remote host closed the connection)
[21:42:35] <FromDiscord> <Hamid Bluri> sent a code paste, see https://play.nim-lang.org/#ix=3CwF
[21:42:53] <FromDiscord> <Hamid Bluri> (edit) "https://play.nim-lang.org/#ix=3CwF" => "https://play.nim-lang.org/#ix=3CwG"
[21:43:24] <FromDiscord> <Illusive> Hey guys, not sure where to post, but i am thinking of which language to learn. I am coming from Rust lang, and thinking which next one to learn. I picked golang and nim.
[21:45:01] <FromDiscord> <tandy> nim \@Illusive)
[21:47:31] <FromDiscord> <Illusive> In reply to @tandy "nim \> go (<@790153860130799616>)": nim syntax seems comfy
[21:47:47] <FromDiscord> <tandy> it is
[21:50:10] <FromDiscord> <reilly> I recently had to write some Go for a project, and while Go's tooling leaves Nim in the dust, writing actual Go code made it very obvious to me just how much more Nim can do than Go.
[21:51:15] <FromDiscord> <haxscramper> Curly bracket itself is called pragma annotations↵(@Hamid Bluri)
[21:51:56] <FromDiscord> <haxscramper> well, it is not exactly after template, the formatting is not really readable here
[21:52:15] <FromDiscord> <haxscramper> sent a code paste, see https://play.nim-lang.org/#ix=3CwL
[21:52:15] <FromDiscord> <haxscramper> it is a pragma block
[21:52:29] <FromDiscord> <reilly> @haxscramper I believe they're talking about the `{echo(x)}`
[21:53:04] <FromDiscord> <Illusive> In reply to @reilly "I recently had to": hm i guess i will use nim for my needs then
[21:53:13] <FromDiscord> <Illusive> any recommendations where to start?
[21:53:38] <FromDiscord> <Hamid Bluri> In reply to @reilly "<@!608382355454951435> I believe they're": yes but what's pragma block : D - i can't find it in the manual
[21:53:50] <FromDiscord> <Hamid Bluri> now i have 2 questions
[21:54:08] <FromDiscord> <haxscramper> `{echo(x)}`?
[21:54:09] <FromDiscord> <tandy> the manual↵(@Illusive)
[21:54:09] <FromDiscord> <haxscramper> https://nim-lang.org/documentation.html there are quite a few places you can start with
[21:54:21] <FromDiscord> <Hamid Bluri> In reply to @haxscramper "`{echo(x)}`?": yes
[21:54:27] <FromDiscord> <reilly> In reply to @haxscramper "`{echo(x)}`?": Look closer at what comes right after `template`
[21:54:48] <FromDiscord> <haxscramper> Pragma block is a pragma in form of a block ... basically. It is not different from regular pragma, and serves to provide some extra information to the compiler↵(@Hamid Bluri)
[21:55:04] <FromDiscord> <haxscramper> Most pragmas are added to procs, types and fields
[21:55:08] <FromDiscord> <Hamid Bluri> sent a code paste, see https://play.nim-lang.org/#ix=3CwM
[21:55:11] <FromDiscord> <haxscramper> TWM pattern
[21:55:14] <FromDiscord> <haxscramper> TRM
[21:55:14] <FromDiscord> <Rika> term rewriting
[21:55:37] <FromDiscord> <haxscramper> https://nim-lang.org/docs/manual_experimental.html#term-rewriting-macros
[21:55:37] <FromDiscord> <Rika> basically nim looks for `echo x` and replaces it with `pwnecho(x)`
[21:55:40] <FromDiscord> <Rika> pretty much
[21:55:46] <FromDiscord> <reilly> In reply to @Illusive "any recommendations where to": I think https://learnxinyminutes.com/docs/nim/ is a good way of quickly familiarizing yourself with basic Nim syntax. Also a good reference in case you forget anything.
[21:56:09] <FromDiscord> <Rika> In reply to @reilly "I recently had to": tooling is quicker to remediate than language features
[21:58:17] <FromDiscord> <reilly> In reply to @haxscramper "https://nim-lang.org/documentation.html there are q": @Illusive the other links on this page are also definitely good to look at. I'd say start with Learn Nim in 5 Minutes so that you can know what you're looking at, then move on to the official tutorials. Also look at "Nim for..." if you have previous experience with C, Python, or TS/JS.
[21:59:11] <FromDiscord> <reilly> Also, the Nim for Beginners video series is relatively new and is still updated. Good if you prefer to listen and watch rather than just read. https://www.youtube.com/playlist?list=PLvwc2YT9MFOlPPexrsY-t7BNTdg2Vsx06
[21:59:35] <FromDiscord> <Hamid Bluri> thanks to  Hax & Rika
[21:59:53] <FromDiscord> <haxscramper> ﻿Hamid Bluri\: if you are wondering whether you need to learn TRM patterns, I would say they answer is no
[22:00:00] <FromDiscord> <haxscramper> they are hardly ever used
[22:00:03] <FromDiscord> <Rika> same here
[22:00:11] <FromDiscord> <Hamid Bluri> ok : D
[22:00:12] <FromDiscord> <Rika> you need a really really good reason to use them
[22:00:25] <FromDiscord> <haxscramper> Like, they look like a nuclear option to solve some problems
[22:00:37] <FromDiscord> <haxscramper> Sometimes
[22:00:48] <FromDiscord> <haxscramper> But more often that not they are too powerful of a tool
[22:00:58] <FromDiscord> <haxscramper> And also have some bugs
[22:01:38] <FromDiscord> <Hamid Bluri> +1
[22:02:32] <FromDiscord> <Illusive> In reply to @reilly "Also, the Nim for": thanks i will take a look
[22:16:07] *** Joins: xet7 (~xet7@user/xet7)
[22:20:57] *** Joins: yann-kaelig (~yann-kael@static.235.1.76.144.clients.your-server.de)
[22:22:23] <FromDiscord> <DMI-1407> is there a ide (except vs) that support nim (not just highlighting) ?
[22:23:56] <yann-kaelig> Hello. I'm new to nim language, I'm not a dev but I'm really interested to start with nim and learn this language. My first question is, is there an nim dedicated IDE, I don't want to start to hack or lost my time in some configuration, I want to start to learn nim with a sane environment. What can you propose ?
[22:24:21] <FromDiscord> <IsaacPaul> looks like fieldPairs might have been fixed? https://github.com/nim-lang/Nim/issues/15221
[22:25:43] <FromDiscord> <IsaacPaul> In reply to @yann-kaelig "Hello. I'm new to": I'm currently using nim with vscode. Has all the features I need so far (linting, error highlighting, autocomplete), but a little bit confusing to set up.
[22:26:57] <FromDiscord> <IsaacPaul> In reply to @DMI-1407 "is there a ide": theres a sublime text plugin. Though I haven't tried it: https://github.com/nim-lang/NimLime
[22:28:03] <FromDiscord> <Hamid Bluri> In reply to @yann-kaelig "Hello. I'm new to": vscode + nim extention
[22:28:04] <yann-kaelig> Hello IsaacPaul. I'm really not a fan of vscode, but if there is a clear tutorial to configure nim without headache, well if there is nothing else, it's ok for me
[22:29:13] <FromDiscord> <Hamid Bluri> nim extention for vscode doesn't need configuration
[22:29:47] <yann-kaelig> O, so I'm installing vscode, nim extension and I'm ready to go, that right ?
[22:30:18] <FromDiscord> <Hamid Bluri> if you've installed nim lang already, yes
[22:30:25] <FromDiscord> <Rika> what are you a fan of regards editors?
[22:30:27] <FromDiscord> <Rika> if not vscode
[22:30:36] <FromDiscord> <Rika> there is for [n]vim, emacs, etc
[22:30:40] <FromDiscord> <tandy> lite-xl↵(@Rika)
[22:30:49] <FromDiscord> <Hamid Bluri> just make sure download `nim-saem` extenstion
[22:35:32] <yann-kaelig> Well, not a fan it's only my point of view, I'm just not interested to lose a month in learning and configuring nvim, emacs or any any other IDE before I can start to work on nim. I'm interested to lean nim, and maybe after that  I will see what I need to adjust in my IDE to optimize my work
[22:36:06] <FromDiscord> <Rika> i mean
[22:36:11] <FromDiscord> <Rika> what ide/editor do you use
[22:36:14] <FromDiscord> <haxscramper> open notepad, save `test.nim`
[22:36:15] <FromDiscord> <Rika> right now
[22:36:24] <FromDiscord> <haxscramper> run `nim c test.nim`
[22:36:33] <FromDiscord> <haxscramper> I mean there is 0 config needed to play with the langauge
[22:36:56] <FromDiscord> <haxscramper> you can use absolutely any editor to get started, and then if you are interested invest some more time
[22:37:16] <yann-kaelig> I know but at least some help is welcome, error highlighting, autocomplete and more
[22:37:41] <FromDiscord> <IsaacPaul> In reply to @yann-kaelig "O, so I'm installing": No you need a build task, update some configurations, and if you want to use the debugger then that needs to be setup too. ↵https://gist.github.com/izackp/485a850e485893ce5b808124826f69fc - Example of my current setup
[22:37:52] <FromDiscord> <haxscramper> autocomplete is not really good in any IDEs as of now
[22:38:08] <FromDiscord> <Yardanico> In reply to @IsaacPaul "No you need a": You don't need a build task though
[22:38:20] <FromDiscord> <IsaacPaul> need is a strong word.. lol
[22:38:23] <FromDiscord> <Rika> man im just asking what you're using right now to edit code so i can see if there is a nim plugin for it
[22:38:31] <FromDiscord> <haxscramper> well, doom emacs with nim layer worked for me out of the box, but in the end it all comes down to the nimsuggest being kind of bad
[22:38:34] <FromDiscord> <Yardanico> Nim extension has F6 for quick compile and run for the current Nim file
[22:38:45] <FromDiscord> <IsaacPaul> Oh I didn't know that lol
[22:44:07] <FromDiscord> <jmgomez> Hey guys Im trying to import a cpp dyn library as a test but the nim compiler is complaining. It does not seem to find it I think. Where is it looking for? Is there any special folder or something?
[22:45:44] <FromDiscord> <Yardanico> where is that library located?
[22:46:04] <FromDiscord> <Yardanico> And also, does it export a C ABI or a C++ ABI?
[22:46:15] <FromDiscord> <haxscramper> "nim compiler is complaining" what is the error message
[22:46:58] <FromDiscord> <haxscramper> If you are on linux the easiest way might be to run it via strace to find out where it scans for the files
[22:47:00] <FromDiscord> <jmgomez> The error message is https://media.discordapp.net/attachments/371759389889003532/901187399181275186/unknown.png
[22:47:05] <FromDiscord> <jmgomez> It's a Cpp
[22:47:38] <FromDiscord> <jmgomez> sent a code paste, see https://play.nim-lang.org/#ix=
[22:47:57] <FromDiscord> <jmgomez> That's how Im making the binding and the lib is located alongside the binary
[22:48:19] <FromDiscord> <haxscramper> First, this is not a dynamic library erro message, your program has failed static linking via `ld`
[22:48:22] <FromDiscord> <haxscramper> How do you wrap the function?
[22:48:41] <FromDiscord> <jmgomez>  https://media.discordapp.net/attachments/371759389889003532/901187823288324156/unknown.png
[22:49:08] <FromDiscord> <haxscramper> It is not possible to importcpp symbols from the cxx dynamic library this way
[22:49:09] <FromDiscord> <haxscramper> if it is exports cxx symbols
[22:49:09] <FromDiscord> <haxscramper> cpp\
[22:49:10] <yann-kaelig> So, as I understand there is no nim IDE for nim programming, an All-In-One ready to go that make the learning of nim language fun, pleasant. The opposite of having to configure n softwares for this purpose. 
[22:49:26] <FromDiscord> <Rika> yes
[22:49:30] <FromDiscord> <Rika> we are not big enough for that
[22:49:43] <FromDiscord> <haxscramper> we have plugins for the editors
[22:49:47] <FromDiscord> <Rika> IIRC neither does rust
[22:49:52] <FromDiscord> <haxscramper> we don't have dedicated IDE for that one
[22:50:02] <FromDiscord> <jmgomez> Im not following man. How they should be exported them?
[22:50:09] <FromDiscord> <jmgomez> Is there any doc or something that I can refer to?
[22:50:25] <FromDiscord> <IsaacPaul> https://nim-lang.org/nimedit/ 🤷‍♂️  No idea if it's useful but its on the official website lol
[22:50:29] <FromDiscord> <Rika> its old
[22:50:36] <FromDiscord> <Rika> prolly abandoned even
[22:50:43] <FromDiscord> <IsaacPaul> makes sense
[22:50:53] <nrds> <06Prestige99> vscode is probably your best bet
[22:51:18] <FromDiscord> <IsaacPaul> Honestly if you're new set it up isn't going to take you months.. worst case a day or two.
[22:51:33] <FromDiscord> <IsaacPaul> (edit) "set it up" => "setup"
[22:52:07] <FromDiscord> <IsaacPaul> It's also needed experience for becoming a capable developer
[22:52:10] <nrds> <06Prestige99> I think there's a single vscode plugin that does everything you need, saemnim or nimsaem I think
[22:52:40] <FromDiscord> <IsaacPaul> average case an hour lol
[22:52:53] <FromDiscord> <IsaacPaul> like it should just work, but sometimes these plugins just don't work lol
[22:53:07] <yann-kaelig> ok, thank you very much, so vscode until I acquire enough competence to write one :) 
[22:53:09] <FromDiscord> <haxscramper> This code is C or C++? How do you compile it? When C++ code is involved your shared library will usually not contain symbol names like `helloDLl`, instead it would be a mangled representation↵(@jmgomez)
[22:53:10] <FromDiscord> <IsaacPaul> maybe nims not in the path or a dependencies crashes
[22:53:17] <FromDiscord> <haxscramper> Can you send the code text so I can try this out
[22:53:30] <FromDiscord> <IsaacPaul> (edit) "nims" => "nim is"
[22:53:47] <FromDiscord> <haxscramper> Or you can run `readelf -sW` for this purpose
[22:53:48] <FromDiscord> <IsaacPaul> (edit) "dependencies" => "dependency"
[22:54:23] <FromDiscord> <haxscramper> Also, I'm not sure if `importcpp` is even supported for dynamic library imports, since in this case you are dealing only with library symbols
[22:54:48] <FromDiscord> <haxscramper> https://forum.nim-lang.org/t/8352#53847 this is a more convoluted example
[22:54:59] <FromDiscord> <jmgomez> There is no much code. A basic library with a function in cpp and that binding
[22:55:05] <FromDiscord> <haxscramper> `_ZN6Optick4Core16BeginUpdateFrameENS_9FrameType4TypeElm` is how functions in namespaces look in cxx shoo
[22:55:15] <FromDiscord> <haxscramper> can you send the code so I can try this out?↵(@jmgomez)
[22:55:35] <FromDiscord> <haxscramper> something I can copy-paste to reproduce the issue you are having and maybe try to figure out how to solve it
[22:56:41] <FromDiscord> <jmgomez> sent a code paste, see https://play.nim-lang.org/#ix=3CwZ
[22:58:05] <yann-kaelig> My first project is to port a software written in Bash to nim, it's a software that takes care of configuring, compiling, installing software in a Linux distribution.
[22:58:28] <FromDiscord> <jmgomez> My goal is to do a test of a binding for Unreal. They use dynamic libraries all the way down
[23:01:16] <FromDiscord> <jmgomez> looking around it seems like you can also include the headers directly and compile the cpps?
[23:01:27] <FromDiscord> <haxscramper> yes
[23:02:01] <FromDiscord> <geekrelief> In reply to @jmgomez "My goal is to": There's this https://github.com/pragmagic/nimue4 but they dropped it and went with godot.
[23:02:02] <FromDiscord> <haxscramper> sent a code paste, see https://play.nim-lang.org/#ix=3Cx1
[23:02:34] <yann-kaelig> I would like to offer a graphical interface for this software, I have done a lot of research on this subject, still seams that in most case GUI project written in nim are at the test stage 
[23:02:47] <FromDiscord> <haxscramper> sent a code paste, see https://play.nim-lang.org/#ix=3Cx2
[23:02:50] <FromDiscord> <haxscramper> And then you can wrap it in nim using `importc: "helloDll", dynlib: "ActualDll.so"`
[23:03:24] <FromDiscord> <haxscramper> There is no C++ when dynamic libraries are invoved, it all has to be squashed to the regular C-mangled names
[23:03:29] <FromDiscord> <jmgomez> In reply to @geekrelief "There's this https://github.com/pragmagic/nimue4 bu": I know. I would like to narrow the scope first and just get nim code executed
[23:03:46] <FromDiscord> <haxscramper> Then `extern "C"` on the cxx definition
[23:04:12] <FromDiscord> <haxscramper> Other alternative is to just `importcpp: , "header"` this
[23:05:00] <FromDiscord> <haxscramper> I don't remember how you are supposed to do `cxx -> dl -> cxx` interface sandwich
[23:05:31] <FromDiscord> <jmgomez> I see. So TIL I learn that I wont be going that route. Will give at shot to compile the cpp sources them. Maybe I can make that work more easily
[23:05:34] <FromDiscord> <haxscramper> but `importcpp/header` would allow you to do this, since it just generates C code
[23:05:34] <FromDiscord> <jmgomez> Thanks for your support
[23:05:52] <FromDiscord> <haxscramper> compiling  C++ sources is certainly easier
[23:06:31] <FromDiscord> <haxscramper> Though UE might require build to be done via Visual Studio or something along those lines, and in this case you might be not so lucky
[23:07:20] <FromDiscord> <geekrelief> In reply to @jmgomez "I know. I would": Have you seen deech's Nim Nuggets talk?
[23:08:59] <FromDiscord> <jmgomez> In reply to @haxscramper "Though UE might require": I know better their build system than the Cpp traditional one. That's why I wanted to go with dlls.↵@geekrelief nope
[23:10:24] <FromDiscord> <geekrelief> In reply to @jmgomez "I know better their": might be helpful for you https://youtu.be/d2VRuZo2pdA?t=1964
[23:10:32] <FromDiscord> <Smarc> Whats the common naming convention for procs? camelCase or snake_case?
[23:11:11] <FromDiscord> <Rika> camel but it doesnt matter
[23:11:14] <FromDiscord> <Rika> you can use either
[23:12:02] <FromDiscord> <Smarc> Ye, but I want to go full blown nim style :) great, I like camelCase a lot more actually
[23:16:53] <FromDiscord> <zetashift> Handy doc for future Nimisms\: https://nim-lang.org/docs/nep1.html↵(@Smarc)
[23:20:46] <FromDiscord> <Illusive> So I would like to have a TOML file where I have some stuff to be set, and then in my main program I would like to parse configuration from this toml file.
[23:21:25] <FromDiscord> <Illusive> currently it is hardcoded inside of the code
[23:21:30] <FromDiscord> <Illusive> like this
[23:21:33] <FromDiscord> <Illusive> sent a code paste, see https://play.nim-lang.org/#ix=3Cx4
[23:24:57] <FromDiscord> <haxscramper> sent a code paste, see https://play.nim-lang.org/#ix=3Cx5
[23:25:15] <FromDiscord> <Illusive> cool thanks
[23:25:18] <FromDiscord> <haxscramper> might not actually compile since I just wrote it without checking
[23:27:12] <FromDiscord> <Illusive> In reply to @haxscramper "*might not actually compile": and it will build with these values that are in toml file, and it will not require the toml file it self right?
[23:27:27] *** Parts: yann-kaelig (~yann-kael@static.235.1.76.144.clients.your-server.de) ()
[23:27:41] <FromDiscord> <Illusive> when i will have the executable it self
[23:28:56] <FromDiscord> <haxscramper> No, it will require the toml file, because that's the purpose of the configuration file.
[23:29:02] <FromDiscord> <Illusive> damn
[23:29:02] <FromDiscord> <Illusive> sad
[23:29:17] <FromDiscord> <haxscramper> well, you can do `const tomlData = staticRead"config.toml"`
[23:29:28] <FromDiscord> <haxscramper> Then `let conf = parseToml(tomlData)`
[23:29:47] <FromDiscord> <haxscramper> this way you won't need toml file and all values will be stored in the exe
[23:30:13] <FromDiscord> <haxscramper> `const tomlData = staticRead...` reads file at compile-time and stores its content in the `tomlData` that can be later read at runtime
[23:30:24] <FromDiscord> <Illusive> In reply to @haxscramper "this way you won't": this is what i need
[23:30:25] <FromDiscord> <Illusive> lel
[23:30:35] <FromDiscord> <Illusive> thanks
[23:30:58] <FromDiscord> <Illusive> but what about webhook?
[23:30:59] <FromDiscord> <haxscramper> Though I would personally just move common configuration into separate `.nim` file in this case, and just `import` it when needed
[23:31:22] <FromDiscord> <haxscramper> `comf["webhook"].getStr()`
[23:31:31] <FromDiscord> <Illusive> In reply to @haxscramper "`comf["webhook"].getStr()`": thanks again
[23:32:15] <FromDiscord> <haxscramper> sent a code paste, see https://play.nim-lang.org/#ix=3Cx8
[23:32:21] <FromDiscord> <haxscramper> I mean it is even simpler than toml and achieves the same results
[23:34:20] <FromDiscord> <Illusive> In reply to @haxscramper "I mean it is": maybe but tbh i like toml variant more
[23:48:30] <FromDiscord> <Illusive> sooo
[23:48:38] <FromDiscord> <Illusive> compiler screams at me with lots of erros
[23:48:40] <FromDiscord> <Illusive> (edit) "erros" => "errors"
[23:49:10] <FromDiscord> <rainbowasteroids> `slurp` \> `staticRead`
[23:49:42] <FromDiscord> <haxscramper> Yes, now imagine someone reading the code
[23:50:39] <FromDiscord> <haxscramper> And `cost tomlData = readFile` actually works just as well. I actually use it more often than staticRead
[23:51:24] <FromDiscord> <rainbowasteroids> slurp funnie nam
[23:58:28] <FromDiscord> <Illusive> soo
[23:58:48] <FromDiscord> <Illusive> sent a code paste, see https://play.nim-lang.org/#ix=3Cxe
[23:58:55] <FromDiscord> <Illusive> this is how this whole thing looks like
[23:59:12] <FromDiscord> <Illusive> (edit) "https://play.nim-lang.org/#ix=3Cxe" => "https://play.nim-lang.org/#ix=3Cxf"
[23:59:27] <FromDiscord> <rainbowasteroids> what compiler errors are you getting?
[23:59:53] <FromDiscord> <Rika> no, parse the string from tomlData
