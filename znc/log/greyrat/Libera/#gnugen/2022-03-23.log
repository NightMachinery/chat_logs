[00:19:09] <Orbstheorem> Today I learn I don't know squat about roman numbers...
[00:19:19] <Orbstheorem> I've been trying to implement roman numbers all day...
[00:19:27] <Orbstheorem> Deductive programming:
[00:20:25] <Orbstheorem> - Roman numbers are either bottom-up for as long as they don't repeat more than 3 times or top-down => use the Alternative to represent the encoding computation.
[00:23:11] <Orbstheorem> ^ False, counter 89: LXXXVIV != LXXXIX
[00:24:40] <Orbstheorem> So, why 9 is IX and not VIV?
[00:25:41] <Orbstheorem> But 89 is LXXXIX...
[00:26:07] <Orbstheorem> So I thought, maybe is something to do with the length...
[00:27:10] <Orbstheorem> So I evolved my type from `Maybe a` to `newtype Encoding = Encoding [a]`, with alternative `(Encoding as) <|> (Encoding bs) = Encoding (as ++ bs)`...
[00:27:25] <Orbstheorem> But then 89 is not `LXIL`...
[00:27:31] <Orbstheorem> s/`//, s/`.../.../
[00:28:18] <Orbstheorem> (And also, have the inductive step sort possible encodings...... (full message at https://libera.ems.host/_matrix/media/r0/download/libera.chat/8ab46deb651c1ef8ed09af092e4240322a8603c9)
[00:28:45] <Orbstheorem>  * (And also, have the inductive step sort possible encodings...... (full message at https://libera.ems.host/_matrix/media/r0/download/libera.chat/e44b58fce2b42b82823ee1d5e4c0491f4eb5d01e)
[00:30:03] <Orbstheorem> Oh yeah, also, when running top-down, I discarded encoding the 'discount' using the symbol we're trying to discount. That explains the codex restriction.
[00:32:12] * Orbstheorem sent a haskell code block: https://libera.ems.host/_matrix/media/r0/download/libera.chat/d855a7a3721758ee7587f7266cc6c20d0d3efac4
[00:32:17] <Orbstheorem> s/[]/Encoding/
[00:32:43] <Orbstheorem> (`Alternative []` is a bit fucked-up IMHO)
[00:39:56] <afontain[m]> I don't see why you would write LXIL
[00:40:01] <afontain[m]> It just can't be
[00:40:43] <Orbstheorem> From my 'intuitive' understanding of roman numerals: 50 + (50 - (10 + 1))
[00:40:53] <afontain[m]> huh no
[00:41:00] <Orbstheorem> Disclamer: I never really learnt roman numerals xD
[00:41:01] <afontain[m]> you can't subtract a sum
[00:41:17] <Orbstheorem> So, backtracking is a single symbol?
[00:41:41] <afontain[m]> sounds correct
[00:41:44] <Orbstheorem> From wikipedia:
[00:41:44] <Orbstheorem> > There is a common belief that any smaller digit placed to the left of a larger digit is subtracted from the total, and that by clever choices a long Roman numeral can be "compressed". The best known example of this is the ROMAN() function in Microsoft Excel, which can turn 499 into CDXCIX, LDVLIV, XDIX, VDIV, or ID depending on the "Form" setting.[25] There is no indication this is anything other than an invention by the programmer, and the
[00:41:44] <Orbstheorem> universal-subtraction belief may be a result of modern users trying to rationalize the syntax of Roman numerals. 
[00:42:18] <afontain[m]> hmm
[00:42:47] <afontain[m]> technically at times during the roman empire, you could write IIII for 4
[00:43:47] <Orbstheorem> (‚ïØ‡≤∞ ~ ‡≤∞Ôºâ‚ïØÔ∏µ ‚îª‚îÅ‚îª
[00:43:51] <afontain[m]> VDIV is a parse error in my brain's roman numeral implementation
[00:44:19] <afontain[m]> 499 is ID i'd say
[00:45:15] <afontain[m]> I would write 498 to be CCCCLXXXXIII
[00:45:48] <afontain[m]> s/CCCCLXXXXIII/CCCCLXXXXVIII/
[00:46:04] <typedef[m]> afontain[m]: ID looks very weird
[00:46:10] <afontain[m]> but then, I never learnt roman numerals either
[00:46:26] <afontain[m]> typedef[m]: can gather
[00:47:02] <typedef[m]> I did learn that back in the days, but the days were a long time ago
[00:47:29] <Orbstheorem> At what moment do you 'learn' roman numbers?
[00:47:30] <afontain[m]> I don't think romans had a canonical version either
[00:48:04] <afontain[m]> s/version/representation/
[00:48:58] <Orbstheorem> <Orbstheorem> "So, backtracking is a single..." <- Doesn't solve the LXXXVIV instead of LXXXIX problem :/
[00:49:23] <afontain[m]> how so?
[00:50:09] <Orbstheorem> Describe the procedure to encode 89.
[00:50:41] <afontain[m]> wait, are you doing a parse or encoder ?
[00:50:46] <Orbstheorem> Encoder.
[00:50:49] <afontain[m]> *parser
[00:51:08] <Orbstheorem> I fixed 89 with my 'vote for length' rule...
[00:51:24] <Orbstheorem> > <@roosemberth:orbstheorem.ch> (And also, have the inductive step sort possible encodings...... (full message at https://libera.ems.host/_matrix/media/r0/download/libera.chat/015ac0e45cbcd918f71c38e19fd8271b9c26eb39)
[00:51:42] <afontain[m]> simple: romanNumeral n = replicate n 'I'
[00:51:53] * afontain[m] -> [ ]
[00:53:43] <afontain[m]> Orbstheorem: I would accept both tbh
[00:57:42] <Orbstheorem> Oh my... how come 91 is XCI?
[00:58:14] <Orbstheorem> Now I can't deduce an encoding for 91...
[00:59:13] <typedef[m]> You shouldn't have more than three Xs at a time (or any other character)
[00:59:32] <typedef[m]> At least for small-ish values, then the numbering system kind of breaks
[01:00:24] <afontain[m]> I mean, you can also go the way you want and tell people that it's a different roman who wrote the number üòè
[01:00:49] <Orbstheorem> Bottom-up is gonna try 50+41 => 41 ~bu fails cause XXXX is too long and ~td also fails cause the highest allowed is the predecesor of 50, which is X, which fails on XXXX...
[01:01:12] <typedef[m]> The alternative would be LXXXXI, which has four X, so you'd have to overshoot to C, correct to XC and add I
[01:01:59] <afontain[m]> sounds like a nice way of putting it
[01:02:57] <Orbstheorem> So, when I fail due to length, I try to recover by overshooting and rewinding as close as possible?
[01:17:13] <afontain[m]> maybe you can have an automatic rule of IIII->IV, XXXX->XL, etc
[01:17:31] <afontain[m]> that alone isn't enough, but it can help?
[01:18:31] <afontain[m]> (because it won't give you IL ever)
[01:19:50] <typedef[m]> <Orbstheorem> "So, when I fail due to length, I..." <- I guess? But it gets a little complex in cases where you must correct multiple times
[01:20:00] <afontain[m]> TL;DR: roman hard
[01:20:39] <typedef[m]> Like MCDXLIV
[01:21:23] <typedef[m]> We need an RFC LXXXIX for Roman numerals
[01:22:01] <afontain[m]> Oh yeah, so it turns into a total war
[01:22:25] * typedef[m] grabs popcorn
[01:22:29] <afontain[m]> because there is no single correct way to write it I'd say
[01:23:30] <typedef[m]> But we can make a One True Right Way of doing it with a One True Right Standard :D
[01:23:56] <afontain[m]> Indeed
[01:24:22] <afontain[m]> but you may need a war for that ;P
[01:24:31] <Orbstheorem> I just love working on hard problems in haskell.
[01:24:45] <Orbstheorem> Sometimes solving them.
[01:25:25] <Orbstheorem> But more importantly, realizing simple problems as hard...
[01:25:43] <afontain[m]> ¬´ Q: What's a hard problem? A: counting like in 1AD instead of 2000AD ¬ª
[01:26:15] <Orbstheorem> You can blame my dreams :P
[01:26:45] <Orbstheorem> Or rather, an unidentified character whom I was arguing in my dream :P
[01:27:49] <Orbstheorem> I'll let them know my findings if I ever dream of them again :D
[01:28:54] <typedef[m]> You are arguing about Roman numerals in your dreams?
[01:29:04] <Orbstheorem> I didn't start it.
[01:29:53] <Orbstheorem> I was talking about something I no longer remember about with a character in my dream I barely remember and somehow the conversation steered into how 'trivial' it is to make a program to encode roman numbers.
[01:30:32] <afontain[m]> hahaha
[01:30:40] <afontain[m]> owned yourself
[01:31:02] <typedef[m]> Ah yes, good old "the proof is left as an exercise to the dreamer"
[16:59:28] *** Quits: chiselfuse (~chiselfus@user/chiselfuse) (Remote host closed the connection)
[16:59:43] *** Joins: chiselfuse (~chiselfus@user/chiselfuse)
[18:57:32] <artectrex[m]> Qui veut aider pour mettre des affiches?
[19:03:12] <jonas[m]> quand √ßa? je pourrais t'aider apr√®s 5h
[19:08:09] <Orbstheorem> Mon prof du cours de _d√©veloppement de dispositif m√©dicaux_, lorsqu'il √©tait en... (full message at https://libera.ems.host/_matrix/media/r0/download/libera.chat/78a97df3a9d3fd5f2345b9916174d00fdfe2d3ea)
[19:13:26] <artectrex[m]> <jonas[m]> "quand √ßa? je pourrais t'aider..." <- J'ai fait la plupart du CM, les affiches sont au local
[19:13:42] <artectrex[m]> Serait bien d'en mettre sur la diagonale peut √™tre?
[19:14:47] <typedef[m]> √áa serait cool mais tout de suite je peux pas
[19:14:57] <typedef[m]> Mais c'est cool d'avoir commenc√©, merci
[19:25:41] <artectrex[m]> jonas: h√©site pas de faire √ßa si t'as envie üòä
[19:25:42] <artectrex[m]> Est-ce qu'on peut faire un mail sur *annonces* pour les talks peut √™tre ?
[19:26:55] <artectrex[m]> > <@roosemberth:orbstheorem.ch> Mon prof du cours de _d√©veloppement de dispositif m√©dicaux_, lorsqu'il √©tait en... (full message at https://libera.ems.host/_matrix/media/r0/download/libera.chat/ef867dcbd50b09120a094a857b9c9c113c174bdb)
[22:20:05] <Notkea> > <@roosemberth:orbstheorem.ch> Mon prof du cours de _d√©veloppement de dispositif m√©dicaux_, lorsqu'il √©tait en... (full message at https://libera.ems.host/_matrix/media/r0/download/libera.chat/8aed6f0c9235b2ae741f37e6b4ce187df398adf4)
[22:47:13] <jonas[m]> <artectrex[m]> "jonas: h√©site pas de faire √ßa si..." <- On a fait CE, BS, Espla et la Diagonale avec Anyone
[22:47:29] <artectrex[m]> trop cool merci les gars :)
[23:24:59] <sunyibo> I'm having a little party at my place in Zweisimmen on Saturday. You're all cordially invited. Sleeping here possible.
[23:25:12] *** Joins: Skeetis[m] (~widmergnu@2001:470:69fc:105::f26)
[23:25:24] *** Joins: Eurydice[m]1 (~adonnetgn@2001:470:69fc:105::1:68a)
