[00:09:41] *** Joins: EllisKeny[m] (~elkenmatr@2001:470:69fc:105::1:1f4f)
[00:09:47] *** EllisKeny[m] is now known as elken[m]
[00:10:25] *** Joins: Betal (~Betal@user/betal)
[00:18:39] <ec> dundargoc[m]: lmao is it really that bad?
[00:18:57] <ec> jaawerth[m]: and "i have coc and nvim-lsp playing well together" i suspect you overestimate me, my friend 🤣
[00:19:28] <ec> mostly, generally speaking, i'm trying to port my config one "language" at a time - mostly things end up being filetype-specific. as much as possible. but i wouldn't say it works … well .......
[00:20:08] <YorickPeterse[m]> grrr, lua-language-server doesn't specify the document version in their `publishDiagnostics` response
[00:20:25] <YorickPeterse[m]> so close to deferring diagnostics properly until after a write while taking into account diagnostics produced after that write
[00:20:37] <jaawerth[m]> hahaha
[00:21:25] <ec> but yeah speaking of startup time uhhhh it bad, it real bad. but i mostly never close my VimR instance, so that's not really much of a concern.
[00:21:41] *** Joins: reed[m] (~reedriotf@2001:470:69fc:105::5d0)
[00:22:14] <ec> what *is* of concern, is i've recently found my `tsserver` / COC / nvim-lsp setup to have become *bog*-slow (like, fifteen-to-thirty-seconds for diagnostics to update … able to see each ... single ..... character ......... produce ................ new fucking diagnostics) recently
[00:22:43] <jaawerth[m]> ah, makes sense
[00:22:48] <ec> but that's a new-ish problem and almost certainly not related to the sheer "number" of plugins, because it's not been something that's growing slow over the years as I add/swap/update plugins, y'know? something's hella bunged up with my TypeScript setup, clearly. ugh.
[00:22:55] *** Quits: exondation (~wadii@2a01:e34:eca5:6c30:683:f005:ea50:2f1a) (Ping timeout: 260 seconds)
[00:28:23] *** Quits: marvka (marvka@gateway/vpn/airvpn/marvka) (Quit: Leaving)
[00:28:43] <dundargoc[m]> <ec> "dundargoc: lmao is it really..." <- Not bad at all, I'm mostly impressed.
[00:29:03] <YorickPeterse[m]> ec: look into `update_in_insert` and `debounce_text_changes`
[00:29:30] <YorickPeterse[m]> ec: https://gitlab.com/yorickpeterse/dotfiles/-/blob/c6e69aef85181d07763363cbe8b91062ad65c484/dotfiles/.config/nvim/lua/dotfiles/lsp.lua#L12 and https://gitlab.com/yorickpeterse/dotfiles/-/blob/c6e69aef85181d07763363cbe8b91062ad65c484/dotfiles/.config/nvim/lua/dotfiles/lsp.lua#L59 might be useful
[00:30:03] <YorickPeterse[m]> The first option disables diagnostics in insert mode, though it just visually disables them (they are still produced). The second option debounces text changes, which should also help with any load related issues
[00:30:32] <YorickPeterse[m]> If you are working with large typescript files then IIRC the regex engine used also matters
[00:30:47] <YorickPeterse[m]> IIRC `set re=1` is _super_ slow for typescript/javascript for some reason
[00:30:58] <YorickPeterse[m]> at least that's what I ran into in the past
[00:33:25] *** Quits: guido (~guido@host-95-239-188-43.retail.telecomitalia.it) (Quit: WeeChat 3.3)
[00:35:48] <YorickPeterse[m]> yes, my double BufWinEnter bug got fixed: https://github.com/vim/vim/commit/1d30fde3c989a962e0e1af4cbcf90e1ea483f1f4 
[00:35:57] <YorickPeterse[m]> backporting that to neovim so hard....
[00:36:13] <YorickPeterse[m]> s/backporting/porting/
[00:36:20] <mjlbach[m]> ec: Are you on 0.6?
[00:36:54] <rj1> i lov neovim!
[00:37:07] <ec> mjlbach[m]: yeah, 0.6.0, ge6059cf63
[00:37:15] <ec> i lov rj1!
[00:37:58] <rj1> thank u!
[00:39:03] <mjlbach[m]> ec: can you point me to that commit?
[00:39:06] <mjlbach[m]> Having trouble finding it
[00:39:27] <ec> oh, unsure, just what it reported. may be a fork by the VimR developer, for all I know
[00:39:42] <ec> `NVIM v0.6.0-dev+dev-nvimserver-universal-8-ge6059cf63`
[00:39:54] *** Parts: nazarii[m] (~nazariim]@2001:470:69fc:105::63a) ()
[00:40:26] <ec> ahhahahhah, the only DDG result is ... a post by me. https://github.com/qvacua/vimr/issues/864
[00:41:38] <YorickPeterse[m]> mjlbach: when porting patches that contain indentation changes that don't apply (e.g. the `buffer.c` changes in https://github.com/vim/vim/commit/1d30fde3c989a962e0e1af4cbcf90e1ea483f1f4), should those be ported over or left as-is?
[00:41:51] <mjlbach[m]> Oh I am totally the wrong person to ask about that haha
[00:41:57] <mjlbach[m]> I have never ported a vim patch in my life
[00:42:04] <mjlbach[m]> I'd ask Sean Dewar or Jan Edmund Lazo 
[00:42:35] <YorickPeterse[m]> Ah ok
[00:42:49] <YorickPeterse[m]> seems this commit is going to require manual fixing, basically nothing applies to `master` lol
[00:44:20] <SeanDewar[m]> They can be ignored 
[00:44:47] *** Quits: ajr (~andrew@cpe-172-91-111-232.socal.res.rr.com) (Ping timeout: 264 seconds)
[00:45:18] <SeanDewar[m]> Go with what Nvim's style guide suggests 
[00:45:33] <SeanDewar[m]> Aka stick with clint
[00:47:04] <YorickPeterse[m]> oki, thanks 🙂
[00:47:17] *** Joins: rgrinberg (~textual@ip152-195-159-186.ct.co.cr)
[00:52:09] *** Joins: ajr (~andrew@cpe-172-91-111-232.socal.res.rr.com)
[00:53:38] *** Joins: nmuntz87[m] (~nmuntz87m@2001:470:69fc:105::b910)
[00:53:38] <nmuntz87[m]> it seems that if a lua plugin fails loading the entire "nvim boostrapping" process will get interrupted. for example i use the which-key plugin which "binds" into my leader key. if some other plugin fails loading, which-key won't load which is fairly annoying as i have to debug without my favorite bindings :P
[00:54:20] <nmuntz87[m]> * bindings :P is there a way to fix this? 
[00:54:28] <nmuntz87[m]> * bindings :P is there a way to deal with this? 
[00:55:04] <gpanders[m]> either fix the broken plugins or use `pcall(require, "module")` to load the faulty plugin
[00:55:58] <mjlbach[m]> ec: that neovim fork seems extremely out of date
[00:56:11] <mjlbach[m]> it's missing several major performance improvements I made in the built-in client
[00:56:19] <mjlbach[m]> you should try pulling master and giving it a shot :) 
[00:57:13] <nmuntz87[m]> gpanders: thanks, calling the plugin with pcall() seems to have done the trick. should i be requiring all my plugins like this?
[00:57:50] <YorickPeterse[m]> https://github.com/neovim/neovim/pull/16108 huzzah
[00:58:00] <gpanders[m]> nmuntz87[m]: it's up to you
[01:01:23] *** Mion is now known as pantsu
[01:01:38] *** Quits: Pdroman_ (~Android@93.red-79-156-174.staticip.rima-tde.net) (Quit: -a- IRC for Android 2.1.39)
[01:01:46] *** Quits: carbonfiber (uid513797@id-513797.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[01:04:09] *** Parts: reed[m] (~reedriotf@2001:470:69fc:105::5d0) ()
[01:27:34] <YorickPeterse[m]> Bah, it seems that when you use `completefunc` and return `-2`, somewhere along the way Vim decides to temporarily exit insert mode, then re-enter it
[01:27:52] <YorickPeterse[m]> So if you try to defer diagnostics until leaving insert mode, inserting a completion can trigger diagnostics
[01:28:19] <YorickPeterse[m]> Weirdly enough it seems to do so even when setting `debounce_text_changes` to some high value (e.g. 2000) 🤔
[01:30:09] *** Quits: rgrinberg (~textual@ip152-195-159-186.ct.co.cr) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[01:30:42] <YorickPeterse[m]> Ah no: the issue seems that if you trigger a completion request, you also get diagnostics, I think? Too many layers of Lua 😕
[01:37:47] <dundargoc[m]> <YorickPeterse[m]> "seems this commit is going to..." <- I have a wrapper around vim-patch that creates a modified diff which can then be used to patch it. It's still a bit of a hit and miss since it still misses some obvious hunks but it's pretty decent.
[01:37:55] <dundargoc[m]> How big is the patch?
[01:40:36] <dundargoc[m]> Nevermind, I saw that ypu finished writing the patch. Nice :)
[01:40:45] <maverun[m]> enough to make dun confused xD
[01:45:48] *** Joins: frebtherat (~frebthera@c-68-81-228-217.hsd1.pa.comcast.net)
[01:54:18] *** Quits: nyah (~nyah@bcdcb6e3.skybroadband.com) (Ping timeout: 260 seconds)
[01:54:56] <YorickPeterse[m]> Is there a way to run a scheduled timer (using `vim.defer_fn`) immediately?
[01:55:08] <YorickPeterse[m]> so basically something like `some_timer:run_now()`
[01:56:28] *** Quits: off^ (~off@68.101.53.15) (Remote host closed the connection)
[01:59:22] *** Quits: mahlon (~mahlon@martini.nu) (Ping timeout: 252 seconds)
[02:02:39] *** Joins: mahlon (~mahlon@martini.nu)
[02:09:19] *** Quits: Intelo (~Intelo@88.246.74.215) (Ping timeout: 256 seconds)
[02:17:18] *** Joins: sammie (~sammie@users-nat.ccs.neu.edu)
[02:24:51] <jaawerth[m]> Yorick Peterse:  yeah, that's just a wrapper around vim.loop, which itself is an instance of luv, the lua bindings to libuv - if I'm understanding you right, this should do what you want https://github.com/luvit/luv/blob/master/docs.md#uvtimer_againtimer
[02:25:01] *** Joins: tent405 (~tent405@107-214-50-180.lightspeed.bcvloh.sbcglobal.net)
[02:26:07] <jaawerth[m]> oh you might have to set_repeat first? you basically want to run it early right?
[02:27:00] *** Quits: tent405 (~tent405@107-214-50-180.lightspeed.bcvloh.sbcglobal.net) (Client Quit)
[02:29:31] <jaawerth[m]> hrm that may not work actually... but if it exists it should be either in the luv docs or the libuv docs
[02:29:43] *** Joins: tent405 (~tent405@107-214-50-180.lightspeed.bcvloh.sbcglobal.net)
[02:30:51] <jaawerth[m]> actually no it works, just tried it
[02:32:35] <YorickPeterse[m]> jaawerth: Not sure I'm following. What code did you use?
[02:38:40] <jaawerth[m]> oh wait no it didn't work. I just left a 0 off the test timeout and it ran while I was trying it
[02:38:49] <jaawerth[m]> whomp whomp
[02:41:18] *** Quits: frebtherat (~frebthera@c-68-81-228-217.hsd1.pa.comcast.net) (Quit: Client closed)
[02:44:53] <YorickPeterse[m]> heh
[02:45:06] <YorickPeterse[m]> "why is my CPU so hot"
[02:48:23] <jaawerth[m]> haha luckily it turns out it'll wait for the intial timout beffore doing the repeat
[02:48:51] <jaawerth[m]> I was hoping you could, like, do that and schedule a stop at the same time but nope, loos like the best you can do is keep a reference to it early so you can stop it and re-schedule the callback in a different way
[02:52:08] *** Quits: tent405 (~tent405@107-214-50-180.lightspeed.bcvloh.sbcglobal.net) (Remote host closed the connection)
[02:53:39] <mjlbach[m]> <YorickPeterse[m]> "Ah no: the issue seems that if..." <- triggering a completion request is going to flush the queued textDocument/didChange  notifiation
[02:59:41] *** Joins: tent405 (~tent405@107-214-50-180.lightspeed.bcvloh.sbcglobal.net)
[03:23:56] *** Joins: rgrinberg (~textual@201.182.226.118)
[03:35:32] <Bowuigi[m]> Since the neovim config is done in Lua, is it possible to make it in Moonscript/Fennel/etc and compile it to Lua? Will that work?
[03:39:47] <jaawerth[m]> yep. moonscript has more runtime to it but it should be quite possible and fennel has very little overhead anyway - you can either AOT-compile or just integrate it, either by hand or by using a plugin
[03:40:41] <jaawerth[m]> like https://github.com/rktjmp/hotpot.nvim (which seems to be what I was planning on rewriting my old proof-of-concept fennel-nvim into, I need to check it out to decide whether I want to bother reviving mine) or aniseed https://github.com/Olical/aniseed (has more custom stuffs on top, a bit more of its own env for my tastes but a lot of people swear by it)
[03:42:54] *** Joins: off^ (~off@wsip-68-227-92-38.mc.at.cox.net)
[03:52:43] *** Joins: js3z (~js3z@146.115.76.107)
[03:57:12] <jaawerth[m]> Bowuigi:  oh, and to clarify, by "very little overhead" I mean fennel makes a point to not inject any runtime on its own, it solely concerns itself with compile-time semantics like s-exprs and macros, so there's there's not much to break by using it in lua-powered things
[03:58:36] <jaawerth[m]> I'm biased since I'm somewhat involved with the fennel project, but on the other hand what got me into it in the first place was that I could run it in nvim :D
[03:59:20] *** Quits: oddmunds (~oddmunds@81.0.173.254) (Ping timeout: 260 seconds)
[04:06:10] <YorickPeterse[m]> <mjlbach[m]> "triggering a completion request..." <- Ah that makes sense
[04:06:32] <YorickPeterse[m]> I ended up cobbling together https://gitlab.com/yorickpeterse/nvim-dd in response to the diagnostics noise
[04:07:06] <YorickPeterse[m]> Apart from having a super creative name, it solves the issue quite well
[04:13:57] *** Joins: chenqisu1 (~xirndc@183.217.203.91)
[04:14:14] *** chenqisu1 is now known as chenqisu12
[04:19:10] *** Quits: ajr (~andrew@cpe-172-91-111-232.socal.res.rr.com) (Ping timeout: 260 seconds)
[04:26:39] <gpanders[m]> <Bowuigi[m]> "Since the neovim config is..." <- If you want to use Moonscript you can check out nvim-moonwalk
[04:27:07] <gpanders[m]> https://github.com/gpanders/nvim-moonwalk
[04:27:24] <gpanders[m]> I use it for Fennel but it’s designed to work with anything that can compile to Lua
[04:28:01] <jaawerth[m]> Oh nice
[04:30:39] <jaawerth[m]> Also I like that 2/3 relevant plugins also contain references to Michael Jackson and Carl Weathers
[04:31:26] *** Quits: aa (~douglasco@200.146.85.128.static.gvt.net.br) (Read error: Connection reset by peer)
[04:31:35] *** Joins: aa (~douglasco@200.146.85.128.static.gvt.net.br)
[04:34:22] *** Joins: lumbo7332[m] (~lumbo7332@2001:470:69fc:105::1:1f5f)
[04:36:05] *** Quits: LyndsySimon (sid34452@id-34452.lymington.irccloud.com) (Ping timeout: 260 seconds)
[04:36:06] *** Joins: ajr (~andrew@cpe-172-91-111-232.socal.res.rr.com)
[04:36:07] *** Quits: ec (sid1544@id-1544.tinside.irccloud.com) (Ping timeout: 252 seconds)
[04:39:16] *** Quits: liam (sid7517@helmsley.irccloud.com) (Ping timeout: 245 seconds)
[04:40:45] *** Quits: ajr (~andrew@cpe-172-91-111-232.socal.res.rr.com) (Ping timeout: 260 seconds)
[04:42:09] *** Joins: liam (sid7517@helmsley.irccloud.com)
[04:42:19] *** Joins: LyndsySimon (sid34452@id-34452.lymington.irccloud.com)
[04:44:36] *** Joins: ajr (~andrew@cpe-172-91-111-232.socal.res.rr.com)
[04:47:04] *** Joins: oddmunds (~oddmunds@81.0.173.254)
[04:49:29] *** Quits: ajr (~andrew@cpe-172-91-111-232.socal.res.rr.com) (Ping timeout: 258 seconds)
[04:50:05] <BenjmanBenjman[m> Anyone know why clangd server is filling lsp.log with error logs but the messages all seem to be standard info messages? I've set up using the minimal configuration, and example clangd configuration from the lspconfig repo. 
[04:50:34] *** Joins: ec (sid1544@id-1544.tinside.irccloud.com)
[04:51:47] *** Quits: oddmunds (~oddmunds@81.0.173.254) (Ping timeout: 258 seconds)
[04:52:27] <BenjmanBenjman[m> Like the first error log is this... (full message at https://libera.ems.host/_matrix/media/r0/download/libera.chat/01afdc06ced7670a2d155ea1af7d67aa401be0bd)
[04:52:42] <BenjmanBenjman[m> * the `[INFO] Starting RPC
[04:53:11] *** Joins: pagini (~pagini@171.113.237.74)
[04:53:34] *** Joins: emf_ (~emf@2620:10d:c090:400::5:70ff)
[04:54:10] *** Quits: pagini (~pagini@171.113.237.74) (Client Quit)
[04:56:46] *** Quits: emf (~emf@2620:10d:c090:400::5:7558) (Ping timeout: 245 seconds)
[04:56:55] <mjlbach[m]> Benjman (Benjman): clangd is just noisy and logs a lot of stuff to stderr
[04:57:53] <BenjmanBenjman[m> okay, wanted to see if it was something wrong with my setup. Thanks
[05:03:34] *** Joins: xuzhou (~xu@36.152.118.245)
[05:07:09] *** Parts: xuzhou (~xu@36.152.118.245) ()
[05:22:22] *** Quits: MercilessDeth (~brad@136.49.61.2) (Quit: Konversation terminated!)
[05:35:28] *** Quits: FluffyMask (~masque@user/fluffymask) (Quit: WeeChat 3.3)
[05:36:06] *** Joins: utraciss (~utraciss@118.100.91.150)
[05:39:55] *** Joins: ajr (~andrew@cpe-172-91-111-232.socal.res.rr.com)
[05:45:05] *** Joins: MercilessDeth (~brad@136.49.61.2)
[05:45:23] *** Quits: ajr (~andrew@cpe-172-91-111-232.socal.res.rr.com) (Ping timeout: 264 seconds)
[05:46:43] <Bowuigi[m]> <gpanders[m]> "https://github.com/gpanders/nvim..." <- Interesting, I will check it out
[05:47:55] <Bowuigi[m]> <jaawerth[m]> "like https://github.com/rktjmp/..." <- Definitely will check those out
[05:48:03] <Bowuigi[m]> I prefer Moonscript at the moment tho
[05:48:14] <Bowuigi[m]> Thanks
[05:53:29] <mjlbach[m]> <YorickPeterse[m]> "I ended up cobbling together..." <- Hm
[05:53:33] <mjlbach[m]> feel like this shouldn't be a plugin
[05:53:43] <mjlbach[m]> I had a PR that made diagnostic events more granular at one point
[05:53:56] *** Quits: arkurious (~arkurious@user/arkurious) (Quit: Leaving)
[05:57:21] *** Joins: amrx (~amrx@access-63-249-98-253.static.cruzio.net)
[05:58:29] <mjlbach[m]> Anyways the big tension is the cache of diagnostics should always be up to date, but maybe we should also expose/track what diagnostics are actually displayed (apart from the extmarks ofc), and additionally make the events more granular than update_in_insert, I had originally proposed allowing user defined autocommands for this
[06:17:53] *** Quits: Rue (~rue@2001-b011-1000-12a8-e81a-0f23-98d2-5e33.dynamic-ip6.hinet.net) (Quit: WeeChat 3.3)
[06:19:28] *** Joins: Rue (~rue@2001-b011-1000-12a8-e81a-0f23-98d2-5e33.dynamic-ip6.hinet.net)
[06:43:20] *** Quits: js3z (~js3z@146.115.76.107) (Ping timeout: 258 seconds)
[06:48:06] *** Joins: oddmunds (~oddmunds@81.0.173.254)
[06:52:58] *** Quits: oddmunds (~oddmunds@81.0.173.254) (Ping timeout: 260 seconds)
[06:55:35] *** Quits: chenqisu12 (~xirndc@183.217.203.91) (Quit: Leaving)
[07:14:08] *** Quits: jangho (~jangho@121.165.8.28) (Quit: znc)
[07:20:53] *** Joins: Guest15 (~Guest15@2408:8207:7878:6600:7d40:5153:9f6a:a375)
[07:24:07] *** Joins: jangho (~jangho@121.165.8.28)
[07:27:48] *** Quits: ebray187 (~ebray187@2800:150:129:17c4:224:1dff:fed5:599e) (Quit: Konversation terminated!)
[07:36:50] *** Quits: Leethium (~Leethium@92.188.170.43) (Ping timeout: 260 seconds)
[07:44:39] *** Joins: szgy (~szgy@2800:810:549:8290::3)
[07:55:59] *** Quits: szgy (~szgy@2800:810:549:8290::3) (Remote host closed the connection)
[08:22:38] *** Joins: ajr (~andrew@cpe-172-91-111-232.socal.res.rr.com)
[08:22:49] *** Quits: ajr (~andrew@cpe-172-91-111-232.socal.res.rr.com) (Client Quit)
[08:44:47] *** Quits: off^ (~off@wsip-68-227-92-38.mc.at.cox.net) (Ping timeout: 264 seconds)
[08:46:27] *** Joins: off^ (~off@wsip-68-227-92-38.mc.at.cox.net)
[08:46:53] *** Quits: rgrinberg (~textual@201.182.226.118) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[08:52:55] *** Joins: alle_ox[m] (~alleoxmat@2001:470:69fc:105::1:1f94)
[09:01:30] *** totemizer is now known as ashnur
[09:22:14] *** Quits: hololeap (~hololeap@user/hololeap) (Remote host closed the connection)
[09:23:48] *** Joins: hololeap (~hololeap@user/hololeap)
[09:34:39] *** Quits: hololeap (~hololeap@user/hololeap) (Remote host closed the connection)
[09:35:55] *** Joins: rjWon (~rj1@i.dont.know.how.com.puters.work)
[09:36:01] *** Joins: hololeap (~hololeap@user/hololeap)
[09:37:11] *** Quits: rj1 (~rj1@i.dont.know.how.com.puters.work) (Ping timeout: 245 seconds)
[09:37:11] *** rjWon is now known as rj1
[09:38:01] *** Quits: baakeydow (~baake@2001:bc8:65c:2601::1) (Ping timeout: 245 seconds)
[09:39:30] *** Joins: baakeydow (~baake@2001:bc8:65c:2601::1)
[09:40:53] <p00f[m]> <YorickPeterse[m]> "I ended up cobbling together..." <- woahh niceee
[09:41:47] *** Joins: oddmunds (~oddmunds@81.0.173.254)
[09:44:36] *** Quits: _xor (~xor@72.49.199.147) (Read error: Connection reset by peer)
[09:46:49] *** Joins: teclator (~quassel@85.155.180.70.dyn.user.ono.com)
[09:49:00] *** Joins: _xor (~xor@72.49.199.147)
[09:49:04] *** Quits: oddmunds (~oddmunds@81.0.173.254) (Ping timeout: 252 seconds)
[09:49:42] *** Quits: _xor (~xor@72.49.199.147) (Read error: Connection reset by peer)
[09:50:01] *** Joins: _xor (~xor@72.49.199.147)
[09:52:10] *** Quits: sudoforge (~sudoforge@wireguard/tunneler/sudoforge) (Ping timeout: 260 seconds)
[10:10:50] *** Joins: guido (~guido@2001:b07:6455:ac4f:3641:5dff:fe55:2a8f)
[10:19:37] *** Quits: amrx (~amrx@access-63-249-98-253.static.cruzio.net) (Remote host closed the connection)
[10:41:07] *** Quits: flip214 (~marek@user/flip214) (Ping timeout: 265 seconds)
[10:43:09] *** Joins: flip214 (~marek@user/flip214)
[10:46:18] *** Joins: qaph (~weechat@user/qaph)
[10:48:50] *** Quits: kron (~weechat@user/qaph) (Ping timeout: 260 seconds)
[10:48:52] *** qaph is now known as kron
[10:49:42] *** Joins: Ilyu (~quassel@gateway/vpn/pia/ilyu)
[10:59:30] *** Joins: zverev-iv[m] (~zverev-iv@2001:470:69fc:105::1:1fa4)
[11:00:48] *** Quits: Ilyu (~quassel@gateway/vpn/pia/ilyu) (Read error: Connection reset by peer)
[11:01:52] *** Quits: tent405 (~tent405@107-214-50-180.lightspeed.bcvloh.sbcglobal.net) (Remote host closed the connection)
[11:03:21] *** Joins: Ilyu (~quassel@166.215.82.79.rev.sfr.net)
[11:14:05] *** Joins: X-Scale` (~ARM@46.50.7.99)
[11:14:19] *** Quits: X-Scale (~ARM@50.77.166.178.rev.vodafone.pt) (Ping timeout: 252 seconds)
[11:15:12] *** X-Scale` is now known as X-Scale
[11:18:59] *** Joins: gggp (~gggp@li870-78.members.linode.com)
[11:19:47] *** Quits: gggp (~gggp@li870-78.members.linode.com) (Client Quit)
[11:20:11] *** Quits: flip214 (~marek@user/flip214) (Ping timeout: 264 seconds)
[11:23:23] *** Joins: exondation (~wadii@82.210.35.206)
[11:31:19] *** Joins: oddmunds (~oddmunds@176.111.206.100)
[11:32:52] *** Joins: jigfoxJensFahnen (~jigfox-59@2001:470:69fc:105::1:1fac)
[11:32:53] <jigfoxJensFahnen> Hi, I started getting errors on saving files which should be modified by a formatter on saving: `share/nvim/runtime/lua/vim/lsp/util.lua:253: attempt to index local 'text_edit' (a number value)`. Does anybody have an idea? help would be appreciated! currently using neovim 0.5.1 with nvim-lspconfig and nvim-compe in the latest version
[11:33:05] <mjlbach[m]> Are you using a formatter autocommand?
[11:33:08] *** Quits: Ilyu (~quassel@166.215.82.79.rev.sfr.net) (Ping timeout: 258 seconds)
[11:33:24] *** Joins: Ilyu (~quassel@gateway/vpn/pia/ilyu)
[11:33:48] <mjlbach[m]> Also what's the formatter?
[11:34:27] <mjlbach[m]> You should also try the nightly as that entire function was rewritten
[11:39:56] *** Joins: fanis30 (~fanis30@adsl-234.37.6.0.tellas.gr)
[11:41:49] *** Joins: gour (~gour@109.227.37.23)
[11:43:21] <gour> morning
[11:45:24] <gour> i'd like to use https://github.com/tools-life/taskwiki with neovim for note-taking (along with vimwiki) and i wonder whether pynvim-0.4.2 available on debian/sid is good-enough for nv-0.5.1?
[11:47:08] *** Joins: Ilyu_ (~quassel@gateway/vpn/pia/ilyu)
[11:47:10] *** Quits: Ilyu (~quassel@gateway/vpn/pia/ilyu) (Ping timeout: 260 seconds)
[11:48:51] *** Joins: e1e0 (~e1e0@user/e1e0)
[11:49:14] *** Quits: LeoNerd (~leo@genoa.dictatorshipcake.co.uk) (Ping timeout: 258 seconds)
[11:50:04] *** Quits: synthmeat (~synthmeat@user/synthmeat) (Ping timeout: 252 seconds)
[11:52:18] *** Quits: quintasan (~quassel@quintasan.pl) (Ping timeout: 258 seconds)
[11:53:17] <clason[m]> latest is 0.4.3; you can look at the release notes
[11:53:47] <clason[m]> (which look minor for 0.4.2->0.4.3)
[11:54:40] *** Joins: DixieFlatline (~soryuu@pool-173-61-70-58.cmdnnj.fios.verizon.net)
[11:57:42] *** Quits: oddmunds (~oddmunds@176.111.206.100) (Ping timeout: 260 seconds)
[12:00:01] <gour> clason[m]: ahh, thanks! i thought that 0.4.x is related to nvim's releases..
[12:01:08] <jigfoxJensFahnen> @atrius:matrix.org I use prettier with nvim_lsp.diagnosticls
[12:01:30] <mjlbach[m]> I'd try null-ls instead
[12:02:01] *** Joins: gggp (~gggp@li870-78.members.linode.com)
[12:02:08] <bfredl> gour: it is, but there haven't been a reason to put out a pynvim 0.5 yet. 
[12:02:21] *** Quits: gggp (~gggp@li870-78.members.linode.com) (Client Quit)
[12:02:41] <gour> bfredl: ok, got it!
[12:05:03] *** Joins: cottoneyejim (~cottoneye@2a01:261:3d2:6200:ea6a:64ff:fe4f:b643)
[12:05:47] *** Quits: hide (sid299131@helmsley.irccloud.com) (Ping timeout: 264 seconds)
[12:07:09] *** Joins: hide (sid299131@id-299131.helmsley.irccloud.com)
[12:12:15] *** Quits: liam (sid7517@helmsley.irccloud.com) (Ping timeout: 260 seconds)
[12:14:17] *** Joins: liam (sid7517@id-7517.helmsley.irccloud.com)
[12:19:51] *** Joins: quintasan (~quassel@quintasan.pl)
[12:22:57] <jigfoxJensFahnen> @atrius:matrix.org than I get `attempt to index field 'null-ls' (a nil value)`
[12:23:28] <mjlbach[m]> you need to install null-ls
[12:23:43] <kylo252[m]> sorry for the wall text I just dumped in lspconfig
[12:23:50] <mjlbach[m]> https://github.com/jose-elias-alvarez/null-ls.nvim
[12:23:54] <mjlbach[m]> it's a plugin
[12:25:21] <jigfoxJensFahnen> I will try
[12:25:30] <jigfoxJensFahnen> thanks
[12:26:13] *** Joins: LeoNerd (~leo@genoa.dictatorshipcake.co.uk)
[12:27:00] <mjlbach[m]> folke: since you have resurfaced trouble needs updating to work with 0.5.1/0.6 handlers :) 
[12:27:17] <folke[m]> mjlbach: yep, going through all those changes right now :)
[12:27:27] <kylo252[m]> <YorickPeterse[m]> "I ended up cobbling together..." <- I'm pretty sure that null-ls does something related to this
[12:27:27] <mjlbach[m]> should be straightforward, lmk if you have question
[12:27:30] <folke[m]> Just finished fixing tokyonight
[12:27:38] <maverun[m]> oh nice
[12:27:46] <maverun[m]> time to upgrade it not knowing what changed xD
[12:28:10] <Mathias[m]> <mjlbach[m]> "feel like this shouldn't be a..." <- I think it is actually a good thing that stuff like that is in a plugin. Confirms that the design is flexible enough to actually do something like that.  Prevents us from having to cater to every conceivable use-case in core
[12:28:17] <folke[m]> haha, the undercurl was missing. colors were off for diagnostics and virtual text no longer had a background
[12:28:47] <mjlbach[m]> Yes, but I meant that I think diagnostic display should be triggered by a dedicated autocommand
[12:28:49] <clason[m]> new highlight groups to keep colorscheme authors on their toes :]
[12:28:59] <mjlbach[m]> that can then be pushed by a user autocommand or onPublishDiagnostics
[12:29:00] *** Joins: synthmeat (~synthmeat@user/synthmeat)
[12:29:38] <clason[m]> (similar to the LspProgress design)
[12:29:56] <Mathias[m]> mjlbach[m]: yes, question is just what is considered part of the display - see the statusline case mentioned in the plugin/original issue about it
[12:29:57] <kylo252[m]> damn maybe not https://github.com/jose-elias-alvarez/null-ls.nvim/pull/136
[12:30:06] *** Quits: SalamaSalama[m] (~moustafa5@2001:470:69fc:105::e6c4) (Quit: You have been kicked for being idle)
[12:30:08] *** Quits: pinkybrain[m] (~pinkybrai@2001:470:69fc:105::b925) (Quit: You have been kicked for being idle)
[12:30:08] *** Quits: slabity[m] (~slabityma@2001:470:69fc:105::baa0) (Quit: You have been kicked for being idle)
[12:30:08] *** Quits: Nathan[m]123 (~natecradd@2001:470:69fc:105::47e9) (Quit: You have been kicked for being idle)
[12:30:09] *** Quits: gustavokatel[m] (~gustavoka@2001:470:69fc:105::3a13) (Quit: You have been kicked for being idle)
[12:30:09] *** Quits: KarlMeissner[m] (~kmeissner@2001:470:69fc:105::cf6e) (Quit: You have been kicked for being idle)
[12:30:09] *** Quits: taz002[m] (~taz002mat@2001:470:69fc:105::fa93) (Quit: You have been kicked for being idle)
[12:30:09] *** Quits: MarkJames[m]1 (~thingsmar@2001:470:69fc:105::fd47) (Quit: You have been kicked for being idle)
[12:30:09] *** Quits: SeniorMars[m] (~seniormar@2001:470:69fc:105::fd9b) (Quit: You have been kicked for being idle)
[12:30:09] *** Quits: kromato4[m] (~kromato4m@2001:470:69fc:105::fd94) (Quit: You have been kicked for being idle)
[12:30:09] *** Quits: M22mahmoud[m] (~M22mahmou@2001:470:69fc:105::fdf8) (Quit: You have been kicked for being idle)
[12:30:14] <mjlbach[m]> Mathias[m]: Yeah that is separate
[12:30:25] <mjlbach[m]> One option is we keep a cached count of what is currently displayed
[12:30:28] <kylo252[m]> can you guys try to help the poor fella :(
[12:30:28] <kylo252[m]> https://github.com/jose-elias-alvarez/null-ls.nvim/issues/199
[12:31:22] <mjlbach[m]> I think this is referring the internal null-ls things, not interaction with vim.diagnostic
[12:32:03] <mjlbach[m]> like right now there are two states, there is the true diagnostic cache and the extmarks currently in the buffer
[12:32:09] <mjlbach[m]> we could expose the latter in some way that is more accesible
[12:32:20] <mjlbach[m]> pushing things to a new table is not that bad
[12:32:25] <kylo252[m]> aren't they sort of related? 
[12:32:25] <kylo252[m]> too many requests -> too many diagnostics updates -> too many UI updates
[12:32:29] <mjlbach[m]> no
[12:32:55] <mjlbach[m]> we're talking about the subscription model for when display is called on vim.diagnostic
[12:33:12] <mjlbach[m]> and how that intersects with people wanting the diagnostic cache in their status bar to reflect the extmarks, not the cache
[12:33:16] <kylo252[m]> this might've been the catalyst, see related issues as well: https://github.com/jose-elias-alvarez/null-ls.nvim/issues/111
[12:33:31] <Mathias[m]> I think core shouldn't attempt to make every use-case super easy whatever the costs.  Have sane defaults and make it possible to customize with some reasonable effort 
[12:33:38] <kylo252[m]> sorry if it's not related^
[12:34:15] <mjlbach[m]> Mathias[m]: Yeah, totally, but I think moving to an autocommand based model solves it for everyone
[12:34:28] <mjlbach[m]> it's not adding additional options
[12:34:54] <Mathias[m]> yeah I even suggested that on the original vim.diagnostic PR :)
[12:35:05] <mjlbach[m]> I know :) 
[12:35:19] <mjlbach[m]> I completely agree there should not be 20x levers to tweak diagnostic display
[12:35:33] <mjlbach[m]> lsp should always push to the cache when possible
[12:35:33] <Mathias[m]> Not against that - I'm against any additional caching layer or exposing more internals or exposing things that are already accessible via some API via a more ergonomic API 
[12:35:45] <clason[m]> (only question is if you want to break it up: update signs different from counts different from virtual text -- but I would probably draw the line before that)
[12:35:58] <mjlbach[m]> clason: that's not what I'm advocating
[12:36:11] <kylo252[m]> why not make the subscription model async?  I assume that's what dd is hoping for
[12:36:12] <mjlbach[m]> I'm saying when we set extmarks/signs on the buffer, store that number in a table
[12:36:34] <mjlbach[m]> kylo252[m]: that's not the issue
[12:36:36] <clason[m]> yes, I know; it's just something I expect someone will request, and NOPE on that
[12:37:07] <kylo252[m]> mjlbach[m]: oops sorry
[12:40:01] <Mathias[m]> mjlbach[m]: Why store it? All the extmark/sign information can be retrieved via their respective APIs given that one can get the namespace ids. I think https://github.com/neovim/neovim/pull/16098 is is one missing piece in the puzzle. Once that is in you can disable the auto-display via global config (`signs = false`) and so on and trigger the display based on the autocmd 
[12:40:11] <kylo252[m]> I feel like the idea of seeing the error message/code in the status bar is pretty nice in theory, but might end up being too hectic or distracting in practice. unless maybe you work alone or on very nice pieces of code
[12:41:04] <mjlbach[m]> Mathias[m]: Just because I would imagine this is a fairly common usecase, and it's not that much complexity our side
[12:41:18] <mjlbach[m]> I'm not strongly advocating for this as much as I am the autocommand
[12:42:13] *** Joins: zro (~zro@user/zro)
[12:45:23] *** Quits: gour (~gour@109.227.37.23) (Quit: WeeChat 3.3)
[12:49:39] *** Quits: Guest15 (~Guest15@2408:8207:7878:6600:7d40:5153:9f6a:a375) (Ping timeout: 256 seconds)
[12:51:47] *** Quits: fanis30 (~fanis30@adsl-234.37.6.0.tellas.gr) (Quit: WeeChat 3.3)
[12:59:10] *** Joins: oddmunds (~oddmunds@176.111.206.100)
[13:11:10] *** Quits: oddmunds (~oddmunds@176.111.206.100) (Ping timeout: 260 seconds)
[13:14:36] *** Quits: Betal (~Betal@user/betal) (Quit: WeeChat 3.3)
[13:21:17] *** Quits: xenrox (~xenrox@user/xenrox) (Remote host closed the connection)
[13:28:31] *** Quits: exondation (~wadii@82.210.35.206) (Ping timeout: 252 seconds)
[13:37:25] *** Joins: exondation (~wadii@82.210.35.206)
[13:38:35] *** Quits: jaawerth (~jaawerth@104.131.115.202) (Quit: o/)
[13:42:42] *** Quits: exondation (~wadii@82.210.35.206) (Ping timeout: 260 seconds)
[13:57:20] *** Joins: zsoltiv_- (~zsoltiv@fibhost-67-12-35.fibernet.hu)
[13:57:59] *** Quits: zsoltiv_ (~zsoltiv@fibhost-67-12-35.fibernet.hu) (Ping timeout: 264 seconds)
[13:57:59] *** zsoltiv_- is now known as zsoltiv_
[14:06:08] *** Quits: Fernando-Basso (~fernandob@2001:470:69fc:105::d1d4) (Quit: Reconnecting)
[14:06:28] *** Joins: Fernando-Basso (~fernandob@2001:470:69fc:105::d1d4)
[14:09:03] *** Joins: X-Scale` (~ARM@46.50.2.19)
[14:09:22] *** Joins: jaawerth (~jaawerth@104.131.115.202)
[14:10:45] *** Joins: towb (~bwot@user/towb)
[14:11:25] *** Quits: X-Scale (~ARM@46.50.7.99) (Ping timeout: 252 seconds)
[14:11:26] *** X-Scale` is now known as X-Scale
[14:13:02] *** Quits: zsoltiv_ (~zsoltiv@fibhost-67-12-35.fibernet.hu) (Ping timeout: 260 seconds)
[14:13:22] *** Joins: zsoltiv_ (~zsoltiv@fibhost-67-12-35.fibernet.hu)
[14:18:19] *** Joins: xenrox (~xenrox@user/xenrox)
[14:20:30] *** Quits: zsoltiv_ (~zsoltiv@fibhost-67-12-35.fibernet.hu) (Quit: ZNC 1.7.2+deb3 - https://znc.in)
[14:20:50] *** Joins: zsoltiv_ (~zsoltiv@fibhost-67-12-35.fibernet.hu)
[14:22:27] *** Quits: guido (~guido@2001:b07:6455:ac4f:3641:5dff:fe55:2a8f) (Quit: WeeChat 3.3)
[14:22:49] *** Quits: DixieFlatline (~soryuu@pool-173-61-70-58.cmdnnj.fios.verizon.net) (Remote host closed the connection)
[14:24:29] *** Joins: ormaaj2 (~ormaaj2@user/ormaaj)
[14:25:43] *** Joins: oddmunds (~oddmunds@176.111.206.100)
[14:26:07] <jaawerth[m]> this could totally be abstracted with metatables if only nvim had an `__pairs` patch just sayinnnnnnn https://tenor.com/yruy.gif
[14:27:44] <jaawerth[m]> (don't take that seriously, I know there are good reasons not to haha)
[14:27:44] <bfredl> you still can do it, it is just `obj:myiter()` instead of `pairs(obj)`
[14:27:49] <jaawerth[m]> true
[14:28:07] *** Quits: xenrox (~xenrox@user/xenrox) (Remote host closed the connection)
[14:28:22] <jaawerth[m]> and that would give people an easier interface without having those caching issues ala vim.g and friends, right?
[14:28:32] *** Joins: xenrox (~xenrox@user/xenrox)
[14:28:51] <jaawerth[m]> unless I'm misunderstanding the problem
[14:28:59] <bfredl> you don't want to iterate over vim.g. that would convert all sorts of vimL junk to lua (expensive!)
[14:29:20] <jaawerth[m]> nono I mean the extmark stuff - if it's just lookups then iteration is nbd, but for extmarks I imagine people would want both
[14:30:22] *** Parts: ormaaj2 (~ormaaj2@user/ormaaj) ()
[14:31:07] <bfredl> currently you can only get extmarks in a range as a table, though we could add a lua-level iterator if we so desire (still operating on batches internally to avoid death-by-ffi-overhead)
[14:32:26] <jaawerth[m]> gotcha, I was was just commenting on the discussion above - I didn't notice I was 2 hours behind :)
[14:32:38] <jaawerth[m]> but that makes sense!
[14:32:48] *** Quits: hololeap (~hololeap@user/hololeap) (Ping timeout: 276 seconds)
[14:36:41] <jaawerth[m]> though I guess lazy iteration of extmarks would be confusing anyway unless itwas a snapshot so what you're iterating doesn't change while you're iterating it, in which case you'd need to grab it as a table under the hood anway
[14:42:15] <bfredl> well that's like iterating anything mutable
[14:42:34] <bfredl> the best you can do is to document the constraints properly
[14:43:42] *** Joins: Carp (~rue@1-162-40-226.dynamic-ip.hinet.net)
[14:43:53] <dundargoc[m]> lmao wat. You can apparently save only the current line instead of the whole file.
[14:44:06] <dundargoc[m]> vim is wild
[14:44:23] <bfredl> or any range :]
[14:44:28] <jaawerth> fair. I was thinking bout your FFI overhead comment and how if I were going to do it lazily with perf I'd probably end up chunking it by grabbing groups of extmarks in ranges, but that'd further complicate be the mutable state issue..
[14:46:54] *** Joins: exondation (~wadii@82.210.35.206)
[14:48:35] *** Quits: off^ (~off@wsip-68-227-92-38.mc.at.cox.net) (Ping timeout: 260 seconds)
[14:48:36] <bfredl> well, the simplest well-defined behavior (if we _must_ have one, lots of lots of iterable mutable structs get by with "anything happens") is just to throw an error on mutating while iterating.
[14:48:56] <bfredl> next simplest is to allow deletion while iterating (which is supported internally anyway)
[15:07:11] <dundargoc[m]> Anyone who is bored and want to help me? I'm reading `usr_10.txt` and they give this example command:... (full message at https://libera.ems.host/_matrix/media/r0/download/libera.chat/dbd755b07597bba06c0cd2d16eb29c12b3e5cb00)
[15:07:14] <nvim-bot[m]> Links to referenced help pages:
[15:07:14] <nvim-bot[m]> * [`range`](https://neovim.io/doc/user/cmdline.html#range) in *cmdline.txt*
[15:07:44] <dundargoc[m]> OK I think I got it, but it's too late to back out now that I wrote this much :)
[15:08:04] <dundargoc[m]> I think if "/" or "?" is used then they must be used again as the next separator
[15:08:05] <bfredl> next step: PR to clarify the user manual?
[15:09:43] *** Quits: kron (~weechat@user/qaph) (Ping timeout: 258 seconds)
[15:09:52] *** Joins: kron (~weechat@user/qaph)
[15:10:44] <dundargoc[m]> bfredl: I mean, I could. But just because I had trouble understanding it doesn't mean there's something wrong with it :)
[15:13:50] <dundargoc[m]> Eh, I should stop making excuses to avoid making the PR :)
[15:14:10] <maverun[m]> if it to make you feel better, i have done 0 pr
[15:14:43] <dundargoc[m]> maverun[m]: Wanna do one?
[15:15:02] <maverun[m]> i am to dumb, i will consider after learn basic of c again
[15:15:04] <maverun[m]> i need to renew them
[15:16:18] <elianiva[m]> you can also make a PR using lua, y'know
[15:16:29] <dundargoc[m]> maverun[m]: Stop saying things like that please
[15:16:33] <clason[m]> or to the docs
[15:16:44] <maverun[m]> i know nothign about lua, also where to pr on that 🤔 ins't neovim mostly Written in c
[15:16:50] *** Joins: guido (~guido@host-87-7-87-25.retail.telecomitalia.it)
[15:17:03] <elianiva[m]> lsp is mostly lua afaict
[15:17:10] <maverun[m]> dundargoc[m]: shh just my excuses to delay
[15:17:12] <maverun[m]> i am scare of lsp
[15:17:13] <jaawerth> bfredl: sure, the earlier comments from mjlbach[m]  had me thinking stream-of-consciousness out loud about it but I'm perfectly happy with the extmarks API as it is, particularly if there's an autocommand added in. Everything else is pretty easy to do in userland lua to handle special usecases
[15:17:59] <dundargoc[m]> maverun[m]: Me too :). Start with something simpler.
[15:18:09] <maverun[m]> yh...
[15:18:17] <maverun[m]> maybe i should take on buffer/tab thingy 🤔
[15:18:19] <maverun[m]> iff that is possible
[15:18:42] <p00f[m]> maverun[m]: ?
[15:18:55] <maverun[m]> having a tab where it have its own buffer instead of global list of buffer
[15:19:10] <p00f[m]> ohh neat
[15:19:24] <maverun[m]> cuz the way i am looking at it, tab is pretty much useless since it have all buffer, only benefits of it is window panel but that it
[15:19:39] <maverun[m]> but consider no one haven't done it so far, i am thinking it is prob complex?
[15:19:44] <p00f[m]> yeah if tabs are meant to be workspaces then they should have their own buffer lists
[15:20:12] <maverun[m]> if possible i want to do two type of tab, one tab that have all buffer, and one tab that is it own list
[15:20:23] <maverun[m]> which should be allow to be flexible
[15:20:26] <maverun[m]> 🤔
[15:21:10] *** Quits: exondation (~wadii@82.210.35.206) (Ping timeout: 260 seconds)
[15:22:16] <elianiva[m]> maverun[m]: I need this
[15:22:33] <maverun[m]> dont held hope to high lol
[15:42:49] <ram02z[m]> Is the new function replacing `vim.lsp.diagnostic.get_virtual_text_chunks_for_line`, `vim.diagnostic._get_virt_text_chunks`? The comment says its going to be removed, kind of confused what the new function will be called.
[15:43:54] *** Joins: just1602_ (~just1602@199.58.80.143)
[15:43:54] *** Quits: just1602 (~just1602@user/just1602) (Read error: Connection reset by peer)
[15:46:15] <dundargoc[m]> I just realized the `diagnostic.txt` is 1) a thing that exists and 2) 640 lines long.
[15:47:08] <dundargoc[m]> OK, it's not as bad as it sounds now that I read it, it's mostly due to how the file is formatted.
[15:47:15] <dundargoc[m]> Still, got a heart attack at first
[15:48:03] <dundargoc[m]> <ram02z[m]> "Is the new function replacing `..." <- ```... (full message at https://libera.ems.host/_matrix/media/r0/download/libera.chat/aa7873e748da279cfffde283a8e23b00e6385583)
[15:48:09] <dundargoc[m]> whatever that means :)
[15:51:06] <ram02z[m]> hmm, is it possible to only show virtual text diagnostics per line only? I am currently using my own solution, but due to all these diagnostics changes, I am wondering I can do that more easily now
[15:51:55] <dundargoc[m]> https://www.youtube.com/watch?v=uYhwYsdNGVE
[15:52:06] <ram02z[m]> this is what I currently use https://github.com/ram02z/dotfiles/blob/master/dot_config/nvim/lua/modules/lsp/utils.lua#L39-L83
[15:52:19] <ram02z[m]> dundargoc[m]: thanks for your input! :)
[15:52:29] <dundargoc[m]> Anytime ;)
[15:52:58] <bfredl> <dundargoc[m]> "Still, got a heart attack at..." <- Someone added a well documented feature to nvim? How dare they
[15:53:30] <dundargoc[m]> bfredl: Let's not get ahead of ourselves. I never said it was well-documented :)
[15:54:54] <dundargoc[m]> Maybe it is, maybe it isn't. I'll let you know after I read it. I estimate it'll be in two years.
[15:55:06] <dundargoc[m]> 🐢
[15:55:20] <maverun[m]> your deadline is next month
[15:55:34] <maverun[m]> no object or i make you sad
[15:55:34] <dundargoc[m]> oh no
[15:56:10] *** Quits: oddmunds (~oddmunds@176.111.206.100) (Ping timeout: 260 seconds)
[15:56:47] <dundargoc[m]> Hmm, I probably need to learn how the lsp-client works beforehand as well.
[15:56:48] <dundargoc[m]> 🤔
[15:57:00] <dundargoc[m]> Nah a month is too soon, sorry.
[15:57:03] *** Joins: oddmunds (~oddmunds@176.111.206.100)
[15:58:23] <maverun[m]> okay 3 month then
[15:58:52] <bfredl> dundargoc[m]: no, you do not.
[15:59:03] <bfredl> the entire point is to separate out diagnostic from LSP
[15:59:11] <bfredl> if you need to read the LSP, it has failed
[15:59:19] <ndav1d[m]> hey guys, any idea why this is not working anymore?... (full message at https://libera.ems.host/_matrix/media/r0/download/libera.chat/6072a5bb2df7a2f0c0285e83af4bd43c5b2f6683)
[16:00:16] <clason[m]> https://github.com/neovim/neovim/issues/14090#issuecomment-921312955
[16:02:54] <dundargoc[m]> maverun[m]: OK maybe it is possible then. But I don't want to hear spoilers in my documentation story, I'll read the diagnostics when I read the diagnostics, you know?
[16:04:00] <ndav1d[m]> ehm this is not working either...... (full message at https://libera.ems.host/_matrix/media/r0/download/libera.chat/fbd5a6e598b0fab18dac326d0f80b213ba54d5e1)
[16:04:55] <p00f[m]> <ram02z[m]> "hmm, is it possible to only show..." <- wait how?
[16:04:57] <clason[m]> then you need to define "not working"
[16:05:24] <ndav1d[m]> clason[m]: there's no highlight in the line number
[16:05:29] <p00f[m]> p00f[m]: even earlier wasn't it either per-line float win or all-lines virtual text or both?
[16:05:59] <p00f[m]> was it ever possible to have virtual text for the current line
[16:06:18] <clason[m]> And the highlight groups are in fact defined?
[16:07:18] <clason[m]> (read `:h diagnostic-sign`)
[16:07:20] <nvim-bot[m]> Links to referenced help pages:
[16:07:20] <nvim-bot[m]> * [`diagnostic-sign`](https://neovim.io/doc/user/diagnostic.html#diagnostic-sign) in *diagnostic.txt*
[16:07:35] <clason[m]> !h diagnostic-signs
[16:07:36] <nvim-bot[m]> Links to referenced help pages:
[16:07:36] <nvim-bot[m]> * [`diagnostic-signs`](https://neovim.io/doc/user/diagnostic.html#diagnostic-signs) in *diagnostic.txt*
[16:08:01] <clason[m]> (you're not actually setting signs since your `text` is empty...)
[16:08:08] <p00f[m]> > <@ndavid:matrix.org> ehm this is not working either...... (full message at https://libera.ems.host/_matrix/media/r0/download/libera.chat/8a57d477ad4f5d23bcec1a24937c3dbf4e1bfe5b)
[16:08:18] <p00f[m]> isn;t sign_define a function
[16:08:46] <ndav1d[m]> p00f[m]: changes the current line nr to that hl group
[16:08:52] <ndav1d[m]> at least it used to
[16:09:10] <ndav1d[m]> clason[m]: but I don't want any text.. I want to change the line nr color
[16:09:24] <p00f[m]> it should be diagnosticsignerror
[16:09:27] <p00f[m]> and such
[16:09:30] <clason[m]> you're still doing it wrong :)
[16:09:33] <p00f[m]> D, S, E capital
[16:09:44] <ndav1d[m]> clason[m]: oh, oops :P
[16:10:12] <p00f[m]> sign_define("DiagnosticSignError", {...table...})
[16:10:21] * ndav1d[m] uploaded an image: (2KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/WVGJufPavWMduwSXZPPgbpHh/image.png >
[16:10:24] <ndav1d[m]> works now!
[16:10:31] <clason[m]> (the `Sign` highlight groups are derived from the ones you specify, but the signs are _still_ called `DiagnosticSignX`)
[16:10:38] <ndav1d[m]> p00f[m]: `sign` is also a command 
[16:10:48] <ndav1d[m]> clason[m]: yep, thanks
[16:11:00] <p00f[m]> ndav1d[m]: i see
[16:11:00] * ndav1d[m] sent a vim code block: https://libera.ems.host/_matrix/media/r0/download/libera.chat/3be7bb76bb651bf21b5714573c6dfb9f081e2f83
[16:11:15] <ndav1d[m]> that is working :D thank you both
[16:11:15] *** Quits: just1602_ (~just1602@199.58.80.143) (Read error: Connection reset by peer)
[16:12:07] *** Joins: just1602_ (~just1602@199.58.80.143)
[16:14:18] <ndav1d[m]> also, there isn't a way to remove that empty character between the signify symbol and the number is it?
[16:14:19] * ndav1d[m] uploaded an image: (1KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/aSfjOTapeqJFFpPkbrlOXjkW/image.png >
[16:14:27] *** Joins: arkurious (~arkurious@user/arkurious)
[16:14:36] <elianiva[m]> use different glyph
[16:14:43] <p00f[m]> i dont think it is an empty character
[16:14:50] <p00f[m]> thin bar
[16:14:56] *** Quits: gxt_ (~gxt@gateway/tor-sasl/gxt) (Remote host closed the connection)
[16:15:04] <elianiva[m]> it's a left border glyph, there's a right one iirc
[16:15:14] <gpanders[m]> <ram02z[m]> "hmm, is it possible to only show..." <- did you get an answer to this yet?
[16:15:32] *** Joins: gxt_ (~gxt@gateway/tor-sasl/gxt)
[16:15:35] <gpanders[m]> the answer is yes it is possible
[16:16:05] <p00f[m]> gpanders[m]: :0
[16:16:06] <dundargoc[m]> "git gud"
[16:16:59] <p00f[m]> gpanders[m]: well?
[16:17:15] <gpanders[m]> this is a common request, I wonder if we should make a "Cookbook" in the Neovim Wiki like lspconfig has (for non LSP related snippets)
[16:17:40] <ndav1d[m]> p00f[m]: after the thin bar, there is an empty character
[16:18:00] <dundargoc[m]> gpanders[m]: cocbook?
[16:18:28] <p00f[m]> ndav1d[m]: what happens if you use ❚
[16:19:07] <ndav1d[m]> p00f[m]: you mean the full width character?
[16:19:29] <p00f[m]> yeah
[16:19:39] <p00f[m]> what does `set scl?` show?
[16:20:49] <ndav1d[m]> p00f[m]: `auto`
[16:20:55] * ndav1d[m] uploaded an image: (2KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/mgDcXOrYZMwmFYirsDVwzrQs/image.png >
[16:21:37] <p00f[m]> ndav1d[m]: then it's probably not an empty char
[16:22:09] *** Joins: exondation (~wadii@82.210.35.206)
[16:22:09] <p00f[m]> do you have 2 types of signs in the same buffer?
[16:22:22] <p00f[m]> like git unstaged and diagnostic
[16:22:43] <gpanders[m]> <gpanders[m]> "the answer is yes it is possible" <- ```lua... (full message at https://libera.ems.host/_matrix/media/r0/download/libera.chat/73d1f296d1c9f642a30e5aa657440b73acc51c2d)
[16:22:51] <ndav1d[m]> p00f[m]: no
[16:22:53] <gpanders[m]> I had to translate it into Lua, so it took me a minute :)
[16:23:02] <ram02z[m]> <gpanders[m]> "the answer is yes it is possible" <- I asked this same question a while back, and you helped me come up a solution which works well, but when I was porting from `vim.lsp.diagnostic` to `vim.diagnostic`, I thought there may an easier approach (maybe a new API function idk)
[16:23:25] <gpanders[m]> ram02z[m]: just posted it a second ago ☝️
[16:23:38] <p00f[m]> ndav1d[m]: hmmm
[16:24:10] <ram02z[m]> gpanders[m]: ah thank you!
[16:24:17] <gpanders[m]> ram02z[m]: the idea is that you use a custom namespace to display diagnostics using whatever configuration you want and you only show the diagnostics on the current line, triggered by the CursorHold,CursorMoved autocommands
[16:24:19] <ndav1d[m]> p00f[m]: no bc if I have no signify symbols the line nr is the first char 
[16:24:35] <gpanders[m]> you disable virtual text in the global config but enable it in your custom namespace's config so that you only see virtual text displayed by your namespace
[16:25:16] *** Quits: zro (~zro@user/zro) (Quit: WeeChat 3.3)
[16:25:36] *** Joins: zro (~zro@user/zro)
[16:25:53] <ram02z[m]> gpanders[m]: lets say, I do want to enable all virtual text again, would it be as simple as enabling virtual_text in the global config at runtime? (all virtual text is only helpful for lean files imo)
[16:25:55] <dundargoc[m]> <gpanders[m]> "this is a common request, I..." <- I know I would appreciate it at least. It does sound like it'd take a lot of effort to maintain it though.
[16:26:10] <gpanders[m]> ram02z[m]: yes
[16:26:19] <gpanders[m]> just call `vim.diagnostic.config({virtual_text = true})`
[16:26:51] <p00f[m]> gpanders: what if you... (full message at https://libera.ems.host/_matrix/media/r0/download/libera.chat/fdeb80cbd65a69a36839a941f8473478ec979121)
[16:27:29] <gpanders[m]> p00f: hmm, I think that should work
[16:28:15] <p00f[m]> lol will it remove the virtual text if i move the cursor to another line?
[16:28:18] *** Joins: szgy (~szgy@181.47.27.68)
[16:28:18] *** Quits: iomari891 (~iomari891@105.112.138.38) (Ping timeout: 258 seconds)
[16:29:13] <gpanders[m]> gpanders[m]: actually I do not think that works. If the function returns true it will still draw virtual text for all diagnostics (even those not on the current line)
[16:31:19] <p00f[m]> gpanders[m]: current line as in the line the cursor is on i mean
[16:32:28] *** Joins: iomari891 (~iomari891@105.112.138.38)
[16:33:03] <gpanders[m]> if you use a function in config(), that function takes a `namespace` and `bufnr` argument, so you would need to 1) find which window (if any) is showing the buffer, 2) check if that window is the current window, 3) get the cursor position from the window, and 4) check if the cursor's line has any diagnostics. But even if you do all that and return `true`, a return value of `true` from such a function just means "Yes, enable diagnostics for
[16:33:03] <gpanders[m]> this update", which will still draw diagnostics for the whole buffer (by default)
[16:33:51] <p00f[m]> ffff
[16:34:08] <p00f[m]> screw virtual  text
[16:34:15] <p00f[m]> float win for the win
[16:42:39] <ndav1d[m]> clason p00f : so any idea why there are 2 chars?
[16:42:41] * ndav1d[m] uploaded an image: (1KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/QBDfNNikAhhXHwViPoLeQTnn/image.png >
[16:44:35] *** Quits: oddmunds (~oddmunds@176.111.206.100) (Ping timeout: 265 seconds)
[16:44:44] <p00f[m]> Nope
[16:44:54] *** Quits: Strom (strom@fedora/strom) ()
[16:45:17] <ndav1d[m]> :'[
[16:46:29] *** Joins: Strom (strom@fedora/strom)
[16:47:00] *** Joins: gggp (~gggp@li870-78.members.linode.com)
[16:47:30] *** Quits: gggp (~gggp@li870-78.members.linode.com) (Client Quit)
[16:52:16] <wsdjegWangShidon> Is it possible to access vim's command-line arguments in vimscript?
[16:52:42] <wsdjegWangShidon> `argv()` is not what I want.
[16:55:55] *** Joins: Julian (~tos9@python/site-packages/Julian)
[16:57:01] <p00f[m]> wsdjegWangShidon: v:argv ?
[16:58:41] <p00f[m]> argv() is the list of files and v:argv is all arguments one would expect
[16:58:53] *** Quits: jangho (~jangho@121.165.8.28) (Quit: znc)
[16:59:02] <wsdjegWangShidon> Thanks. 
[17:07:08] *** Joins: Guest52 (~Guest52@2408:8207:7878:6600:4873:daad:423a:ca40)
[17:15:57] *** Joins: jangho (~jangho@121.165.8.28)
[17:23:07] *** Joins: oddmunds (~oddmunds@81.0.173.254)
[17:23:35] *** Quits: Julian (~tos9@python/site-packages/Julian) (Quit: leaving)
[17:24:05] *** Joins: Firecatmon (~firecatmo@89.187.163.193)
[17:25:30] *** Quits: exondation (~wadii@82.210.35.206) (Ping timeout: 260 seconds)
[17:27:38] *** Quits: oddmunds (~oddmunds@81.0.173.254) (Ping timeout: 260 seconds)
[17:28:03] <meatballs> One of my Python based plugins has stopped working with a ModuleNotFound error. I can see the module in my autoload folder (installed by Packer). Any clues as to how I might debug this?
[17:32:52] *** Quits: gxt_ (~gxt@gateway/tor-sasl/gxt) (Remote host closed the connection)
[17:33:24] *** Joins: gxt_ (~gxt@gateway/tor-sasl/gxt)
[17:38:46] *** Quits: zro (~zro@user/zro) (Ping timeout: 252 seconds)
[17:43:51] <sumneko[m]> Hello, is anyone help me do a fast test with sumneko_lua in Neovim?
[17:43:51] <sumneko[m]> I found something broken in VSCode with sumneko_lua when the file contains emoji, I want to found out if this is an issue of sumneko_lua or VSCode.
[17:43:51] <sumneko[m]> Please help me check if it works correct in Neovim when the file contains emoji, thank you!
[17:44:04] * sumneko[m] uploaded an image: (82KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/RBWBXLbmlnUilepNFLbrEhnV/image.png >
[17:45:09] * sumneko[m] uploaded an image: (205KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/kIYHTUpDViAbmHATVQeaYpMc/1.gif >
[17:46:49] *** Joins: exondation (~wadii@82.210.35.206)
[17:51:17] *** Joins: zro (~zro@user/zro)
[17:52:17] * bolts uploaded an image: (12KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/WcTObKQwDertlNNkxhyVULnh/image.png >
[17:52:24] <bolts> > <@sumneko:matrix.org> Hello, is anyone help me do a fast test with sumneko_lua in Neovim?
[17:52:24] <bolts> > I found something broken in VSCode with sumneko_lua when the file contains emoji, I want to found out if this is an issue of sumneko_lua or VSCode.
[17:52:24] <bolts> > Please help me check if it works correct in Neovim when the file contains emoji, thank you!
[17:52:24] <bolts> Not sure if there was a specific request you wanted to test, but it seems to work as expected in nvim
[17:53:32] <sumneko[m]> bolts: Thanks for your help. I noticed that there is a diag `Missed symbol`, if this correct?
[17:54:50] <bolts> Yes
[17:55:35] <bolts> Let me make sure it's not from null-ls
[17:56:41] * bolts uploaded an image: (9KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/MsPTOKcrNEiJtshfaKKwQpPl/image.png >
[17:56:54] <bolts> Yeah, looks like it was from null-ls
[17:57:06] <bolts> This is with just lua-language-server running
[17:59:09] <sumneko[m]> Many thanks! I have got what I want!
[18:00:42] *** Joins: jklfds_ (~jklfds@user/jklfds)
[18:03:34] *** Quits: Firecatmon (~firecatmo@89.187.163.193) (Remote host closed the connection)
[18:10:15] *** Joins: rgrinberg (~textual@ip152-195-159-186.ct.co.cr)
[18:11:27] *** Joins: nyah (~nyah@bcdcb6e3.skybroadband.com)
[18:14:10] *** Joins: dsrt^ (~dsrt@wsip-68-227-92-38.mc.at.cox.net)
[18:19:22] *** just1602_ is now known as just1602
[18:19:33] *** Quits: just1602 (~just1602@199.58.80.143) (Changing host)
[18:19:33] *** Joins: just1602 (~just1602@user/just1602)
[18:21:30] *** Quits: jklfds_ (~jklfds@user/jklfds) (Ping timeout: 260 seconds)
[18:23:18] *** Quits: szgy (~szgy@181.47.27.68) (Ping timeout: 258 seconds)
[18:25:12] *** pantsu is now known as evilop
[18:31:21] *** Quits: zro (~zro@user/zro) (Quit: WeeChat 3.3)
[18:34:58] *** Quits: Guest52 (~Guest52@2408:8207:7878:6600:4873:daad:423a:ca40) (Quit: Client closed)
[18:41:32] *** Quits: dsrt^ (~dsrt@wsip-68-227-92-38.mc.at.cox.net) (Remote host closed the connection)
[18:45:16] <sumneko[m]> I found this is an issue of sumneko_lua.
[18:45:16] <sumneko[m]> LSP says "The offsets are based on a UTF-16 string representation.", but the server used UTF-8.
[18:45:16] <sumneko[m]> The length of emoji in UTF-16 is 2 while in UTF-8 is 1, which makes incorrect offsets calc.
[18:46:28] *** Joins: jklfds_ (~jklfds@user/jklfds)
[18:46:40] <muniter[m]> Ahhh encoding issues, never seen one before, so rare 😜
[18:52:30] <clason[m]> clangd has a similar issue (using UTF-8)
[18:55:33] *** Joins: jeremyc (~jeremyc@104-14-89-110.lightspeed.bcvloh.sbcglobal.net)
[18:57:48] <jeremyc> I've just installed neovim and am configuring it. I am trying to setup lsp using lspconfig. I installed via plug nvim-lspconfig, then added require('lspconfig') to my init file. I get "Not an editor command: require("lspconfig")". Any thoughts why require wouldn't be a known command?
[18:59:47] *** Quits: jklfds_ (~jklfds@user/jklfds) (Ping timeout: 264 seconds)
[19:06:25] *** Quits: exondation (~wadii@82.210.35.206) (Ping timeout: 260 seconds)
[19:06:45] *** Joins: sudoforge (~sudoforge@wireguard/tunneler/sudoforge)
[19:14:35] *** Joins: jklfds_ (~jklfds@user/jklfds)
[19:19:10] *** Quits: jklfds_ (~jklfds@user/jklfds) (Ping timeout: 260 seconds)
[19:21:26] <sammie> jeremyc: require is a lua command. So you either have to call it as `lua require('lspconfig')` or within a lua block `lua << EOF \n ... (commands) ... EOF `
[19:24:49] <jeremyc> sammie: thanks, lua require did the trick.
[19:25:53] *** Quits: utraciss (~utraciss@118.100.91.150) (Quit: %quit from znc%)
[19:26:21] <sammie> Awesome
[19:30:07] *** Quits: crimson_owl[m] (~crimsonow@2001:470:69fc:105::bd92) (Quit: You have been kicked for being idle)
[19:35:56] *** Parts: mjlbach[m] (~atriusmat@2001:470:69fc:105::39bd) ()
[19:37:05] *** Quits: justHaunt (~justache@user/justache) (Read error: Connection reset by peer)
[19:38:01] *** Joins: justHaunt (~justache@user/justache)
[19:49:12] <kylo252[m]> time for some noob questions, so everything that has a function syntax and is lower case, is actually C API, e.g: `:h glob()`
[19:49:12] <kylo252[m]> but what lower-case commands? are they always vimL then?
[19:49:15] <nvim-bot[m]> Links to referenced help pages:
[19:49:15] <nvim-bot[m]> * [`glob()`](https://neovim.io/doc/user/eval.html#glob()) in *eval.txt*
[19:55:36] <kylo252[m]> > <@kylo252:matrix.org> time for some noob questions, so everything that has a function syntax and is lower case, is actually C API, e.g: `:h glob()`
[19:55:36] <kylo252[m]> > but what lower-case commands? are they always vimL then?
[19:55:36] <kylo252[m]> to answer my own question, these are what's referred to as `ex_cmds`. the problem is that there are two different `ex_cmds.c`. maybe one is neovim-specific 
[19:55:37] <nvim-bot[m]> Links to referenced help pages:
[19:55:37] <nvim-bot[m]> * [`glob()`](https://neovim.io/doc/user/eval.html#glob()) in *eval.txt*
[19:56:16] <SeanDewar[m]> lol did the quoted comment also trigger the bot
[19:56:30] <gpanders[m]> nope, Vim also has `ex_cmds2.c`
[19:56:45] <kylo252[m]> I wanted to write bad_bot, but didn't want to spam
[19:56:52] <gpanders[m]> (that was in reply to "maybe one is Neovim-specific")
[19:57:41] <muniter[m]> I guess the file got too large and electric bogaloo is too long 😃 so the "2" it is.
[19:57:50] <kylo252[m]> what's an ex-cmd tho? I can't find the help entry for it. and the source code files don't have that info in the headers
[19:58:09] <muniter[m]> Es is everything you call as ":write, :cnext, etc"
[19:58:15] <muniter[m]> s/Es/Ex/
[19:58:25] <YorickPeterse[m]> <mjlbach[m]> "feel like this shouldn't be a..." <- Oh I agree, but I'm not sure if in the current state it should be in core either 😛
[19:59:09] <kylo252[m]> I feel like it's just an archaic term, that isn't supposed to mean anything specific 
[19:59:20] <YorickPeterse[m]> I think the core issue is that the LSP has no notion of "I am editing but wait with diagnostics" vs "I am done editing, give me the diagnostics"
[19:59:27] <YorickPeterse[m]> instead you just get firehosed in the face as you type
[20:00:10] <Bowuigi[m]> kylo252[m]: Ex either refers to the .exrc (basically editorconfig but vim style) or to command mode
[20:00:28] <kylo252[m]> YorickPeterse[m]: I would say that's the correct behaviour, you should be the one throttling the server and not the other way around. isn't it?
[20:00:40] <Bowuigi[m]> YorickPeterse[m]: Mines appear when I leave insert mode
[20:00:56] <Bowuigi[m]> Or when I do something in normal mode
[20:01:02] <YorickPeterse[m]> kylo252[m]: The problem is that due to the async nature of LSP that's insanely hard to get right
[20:01:25] <YorickPeterse[m]> At least if you e.g. also want to immediately show diagnostics when you save
[20:01:32] <kylo252[m]> Bowuigi[m]: but what does the "ex" stand for? that's the part that described as archaic lol
[20:01:34] <Mathias[m]> The bigger problem is that there is no single definition of "right"
[20:01:59] <YorickPeterse[m]> As in: it's easy to just delay publishing them to neovim. It gets more difficult if you straight up never want them in insert mode. It gets even trickier if you want them immediately after a save
[20:02:12] <Bowuigi[m]> kylo252[m]: Ex is actually the vim predecessor, a better version of ed
[20:02:32] <YorickPeterse[m]> oh and it gets even more difficult if you don't want an LSP completion to also trigger diagnostics
[20:02:51] <kylo252[m]> Mathias[m]: isn't LSP generic enough that it doesn't care it's talking to an editor or a bot or whatever?
[20:03:22] <Mathias[m]> That's part of my point, yes :)
[20:03:34] <YorickPeterse[m]> Mathias[m]: eh not sure
[20:03:59] <muniter[m]> kylo252:  Extreme command maybe. It's probably legacy from vi
[20:04:02] <YorickPeterse[m]> At least when still typing, 99% of the diagnostics are useless
[20:04:03] <kylo252[m]> Mathias[m]: I replied to the wrong message, sorry 🥲
[20:04:17] <YorickPeterse[m]> e.g. if I type `local x =` I don't need an LSP to send 20 syntax errors to me
[20:04:30] <YorickPeterse[m]> (because I'm still typing)
[20:04:44] <YorickPeterse[m]> At least in Vim land we have modes to help deal with that, but we still have the async nature that makes things difficult
[20:04:56] <Mathias[m]> If you defer it you are also increasing the latency for when you do want to use it
[20:05:17] <YorickPeterse[m]> Yes, but at least that one could handle by a manual flushing of diagnostics
[20:05:21] <Mathias[m]> In my use-cases I often have to wait for diagnostics that I know will arrive to arrive so I can finally invoke the code action I want
[20:05:50] <Mathias[m]> So what you consider the right behavior is the wrong behavior for others and vice versa
[20:06:29] <kylo252[m]> at a glance, looks like vscode uses throttling techniques instead of denouncing 
[20:07:06] <YorickPeterse[m]> Throttle as in it only shows X diagnostics at a time?
[20:09:37] <kylo252[m]> here's the description from one of their PRs:
[20:09:37] <kylo252[m]> > throttle the progress updates (update the displayed progress once every 100 milliseconds) rather than debounce (only update once it's been 100 milliseconds since the last call).
[20:11:55] <kylo252[m]> that throttling function has since disappeared tho 👀
[20:12:11] <YorickPeterse[m]> I think that's just for LSP progress (e.g. how much has been indexed when starting up)
[20:12:37] <YorickPeterse[m]> Throttling would be an option, but I can see it being annoying vs debouncing
[20:12:48] <YorickPeterse[m]> e.g. if you make a change just before the throttle interval, you may immediately get diagnostics
[20:12:50] <kylo252[m]> nvm I was looking at the fork 🤦‍♂️
[20:12:50] <kylo252[m]> here's the function they use: 
[20:12:50] <kylo252[m]> https://github.com/microsoft/vscode/blob/6c7b2b34069b7d11f8465fb59a78a38424df025a/src/vs/base/common/decorators.ts#L91
[20:12:56] <YorickPeterse[m]> but with a debounce it's always X time after your last change
[20:20:58] *** Joins: szgy (~szgy@181.47.27.68)
[20:24:03] *** Joins: FluffyMask (~masque@user/fluffymask)
[20:54:44] *** Quits: sumner (m-35dsa2@li978-161.members.linode.com) (Remote host closed the connection)
[20:55:00] *** Joins: sumner (m-35dsa2@li978-161.members.linode.com)
[20:56:24] *** Quits: rgrinberg (~textual@ip152-195-159-186.ct.co.cr) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[20:58:42] *** Joins: ajr (~andrew@47.151.137.150)
[20:58:48] *** Joins: rgrinberg (~textual@201.182.226.118)
[21:01:04] *** Joins: jklfds_ (~jklfds@user/jklfds)
[21:03:57] *** Quits: ajr (~andrew@47.151.137.150) (Quit: Reconnecting)
[21:04:09] *** Joins: ajr (~andrew@47.151.137.150)
[21:12:46] *** Quits: nyah (~nyah@bcdcb6e3.skybroadband.com) (Remote host closed the connection)
[21:12:55] *** Joins: qaph (~weechat@user/qaph)
[21:15:44] *** Quits: kron (~weechat@user/qaph) (Ping timeout: 265 seconds)
[21:15:46] *** qaph is now known as kron
[21:16:34] *** Quits: szgy (~szgy@181.47.27.68) (Ping timeout: 258 seconds)
[21:17:36] *** Joins: dsrt^ (~dsrt@wsip-68-227-92-38.mc.at.cox.net)
[21:24:55] *** Quits: jangho (~jangho@121.165.8.28) (Quit: znc)
[21:26:25] *** Joins: sebosuu[m] (~sebosuuma@2001:470:69fc:105::1:201b)
[21:30:30] *** Quits: jklfds_ (~jklfds@user/jklfds) (Ping timeout: 260 seconds)
[21:30:41] *** Joins: jangho (~jangho@121.165.8.28)
[21:36:03] <p00f[m]> wooooo https://github.com/hrsh7th/cmp-cmdline
[21:36:18] * YataoLi[m] uploaded an image: (469KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/HRJfxIcwpfRoBiqjxIqWFgAJ/image.png >
[21:36:27] <YataoLi[m]> gui-widget + nvim-ipy = ? ? ?
[21:36:54] <YataoLi[m]> bfredl: will send a draft PR shortly
[21:37:18] <p00f[m]> dammmnnn
[21:37:20] <p00f[m]> niceeee
[21:38:00] <clason[m]> Ooh, do Julia next!
[21:38:31] <YataoLi[m]> nvim-ipy natively supports julia I think!
[21:38:43] <clason[m]> yeah, that's true :)
[21:38:55] <clason[m]> (Jupyter is no longer Python-only)
[21:39:12] *** Joins: frebtherat (~frebthera@c-68-81-228-217.hsd1.pa.comcast.net)
[21:41:42] <YataoLi[m]> it only requires minimal change to nvim-ipy:
[21:41:42] <YataoLi[m]> https://github.com/bfredl/nvim-ipy/pull/61/files
[21:42:15] <clason[m]> (Really cool stuff, in case I haven't said this!)
[21:42:40] <YataoLi[m]> thanks!! :D
[21:44:15] *** Quits: dsrt^ (~dsrt@wsip-68-227-92-38.mc.at.cox.net) (Ping timeout: 265 seconds)
[21:47:23] <sunjonSenghanBri> nice :]
[21:48:39] <BenjmanBenjman[m> Can anyone tell me how I can save the output of something like this to a file? `:lua print(vim.inspect(vim.lsp.buf))`? I've tried searching but can't find a solution
[21:49:15] <clason[m]> !h pu
[21:49:18] <nvim-bot[m]> Links to referenced help pages:
[21:49:18] <nvim-bot[m]> * [`pu`](https://neovim.io/doc/user/change.html#pu) in *change.txt*
[21:49:43] <clason[m]> like ` pu=execute('lua print(vim.inspect(foo))')
[21:49:45] <clason[m]>  * like ` pu=execute('lua print(vim.inspect(foo))')`
[21:49:52] <clason[m]> s/like ` pu=execute('lua print(vim.inspect(foo))')/like `:pu=execute('lua print(vim.inspect(foo))')`/
[21:49:57] <BenjmanBenjman[m> Great, thanks a bunch
[21:55:10] *** Joins: js3z (~js3z@146.115.76.107)
[21:57:59] *** Joins: jklfds_ (~jklfds@user/jklfds)
[22:06:37] *** Quits: jklfds_ (~jklfds@user/jklfds) (Ping timeout: 252 seconds)
[22:18:04] *** Joins: jklfds_ (~jklfds@user/jklfds)
[22:18:38] *** Joins: dsrt^ (~dsrt@wsip-68-227-92-38.mc.at.cox.net)
[22:21:50] *** Joins: oddmunds (~oddmunds@81.0.173.254)
[22:23:35] *** Quits: jklfds_ (~jklfds@user/jklfds) (Ping timeout: 260 seconds)
[22:28:59] *** Joins: reumeth (~reumeth@user/reumeth)
[22:42:15] *** Quits: dsrt^ (~dsrt@wsip-68-227-92-38.mc.at.cox.net) (Ping timeout: 260 seconds)
[22:45:37] *** Quits: frebtherat (~frebthera@c-68-81-228-217.hsd1.pa.comcast.net) (Quit: Client closed)
[22:50:34] *** Joins: jaitoon (~Jaitoon@2a02:c7f:a5f:1d00:3901:d03b:2d77:c4b6)
[22:53:20] *** Quits: oddmunds (~oddmunds@81.0.173.254) (Ping timeout: 260 seconds)
[22:53:48] *** Joins: oddmunds (~oddmunds@81.0.173.254)
[23:03:10] *** Quits: rgrinberg (~textual@201.182.226.118) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[23:17:59] *** Quits: Carp (~rue@1-162-40-226.dynamic-ip.hinet.net) (Quit: WeeChat 3.3)
[23:31:23] *** Joins: szgy (~szgy@181.47.27.68)
[23:44:47] *** Quits: ikex (ash@user/ikex) (Ping timeout: 264 seconds)
[23:45:26] *** Joins: ikex (ash@user/ikex)
[23:47:30] *** Quits: js3z (~js3z@146.115.76.107) (Ping timeout: 260 seconds)
[23:49:20] *** Quits: ajr (~andrew@47.151.137.150) (Ping timeout: 260 seconds)
[23:50:25] *** Joins: nyah (~nyah@bcdcb6e3.skybroadband.com)
