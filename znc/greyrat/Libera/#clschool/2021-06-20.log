[00:57:58] *** Joins: derelict (~derelict@user/derelict)
[01:29:08] *** Quits: neceve (~quassel@2a02:c7f:607e:d600:a95a:ecd2:e57a:3130) (Ping timeout: 252 seconds)
[01:44:01] <greyrat> mfiano: Is there any danger of conflicts by using special global vars? Not in my own package (e.g., not in `common-lisp-user'), but with external packages
[02:02:48] *** Joins: lottaquestions (~nick@104.221.94.126)
[02:04:08] <White_Flame> the only conflict is the name, which is a symbol, which exists in packages
[02:04:18] *** Quits: lottaquestions_ (~nick@2607:fa49:5041:a600:79d6:b2a9:7eb2:2cc1) (Ping timeout: 240 seconds)
[02:04:27] <White_Flame> so (defvar *foo* ...) in one package is a different symbol than (defvar *foo* ...) in another
[02:05:01] <White_Flame> but if you mean assigning a value to another package's value, then you should create a dynamic binding with (let ((*foo* ...)) ...)
[02:05:09] <White_Flame> *another package's variable
[02:05:41] <White_Flame> this dynamic binding is only visible within that thread's context, and doesn't trample anything else running outside of it, and is undone in that thread when that LET scope exits
[02:05:46] <White_Flame> it's a very nice & clean model
[02:06:08] <White_Flame> such bindings are great for configuration or passing side-band contextual data to a chain of calls without constantly having to pass stuff around as parameters
[02:07:14] *** Quits: lottaquestions (~nick@104.221.94.126) (Client Quit)
[02:07:43] *** Joins: lottaquestions (~nick@2607:fa49:5041:a600:302c:2ca5:9f37:1500)
[02:30:44] <greyrat> white_flame: Umm. So to override a global variable in the package `y`, I use `(let ((y:*some-var* ...)))`? 
[02:38:25] <mfiano> Yes, that adds a new binding onto the stack. A special variable is a stack of bindings
[02:38:33] <mfiano> When the let scope ends, the stack is popped
[02:46:29] <White_Flame> and when that stack is empty, it reads the global symbol-value
[02:46:37] <White_Flame> s/reads/accesses/ as it's both read & write
[02:47:50] <White_Flame> btw, none of this has anything to do with packages, it's purely how symbols work, regardless of where they reside
[02:49:27] <mfiano> Also keep in mind that there is nothing about special variables that keep a stack per thread, since there is nothing about threads standardized. There doesn't seem to exist any implementation that this isn't the case for, but I don't think anything mandates future implementations to conform to this
[02:50:52] <White_Flame> it's hard to think of another model that would conform to CLHS descriptions other than thread-local, though
[02:59:29] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[03:13:46] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[04:19:58] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 244 seconds)
[04:21:51] *** Joins: waleee (~waleee@h-98-128-228-119.NA.cust.bahnhof.se)
[04:22:31] *** Quits: random-nick (~random-ni@87.116.165.220) (Ping timeout: 268 seconds)
[05:31:26] *** Quits: waleee (~waleee@h-98-128-228-119.NA.cust.bahnhof.se) (Ping timeout: 265 seconds)
[06:29:39] *** Joins: Oladon (~olad@98.43.81.226)
[06:38:57] *** Quits: sts-q (~sts-q@212.53.219.134) (Ping timeout: 244 seconds)
[06:48:06] *** Joins: sts-q (~sts-q@91.200.108.155)
[07:33:05] <beach> Good morning everyone! 
[07:37:21] <beach> edgar-rft: DEFPARAMETER etc do not intern.  That is done by the reader.
[07:38:21] <beach> edgar-rft: Whether a symbol is considered a special variable or not has nothing to do with INTERN.  It is a property that is recorded in the environment.
[07:39:19] *** Joins: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[07:39:26] <beach> edgar-rft: Also, there is not necessarily any "value slot" in a symbol.  The value can be kept somewhere else.  
[07:42:36] *** Quits: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 252 seconds)
[08:14:41] *** Quits: Josh_2 (~user@37.25.47.130) (Remote host closed the connection)
[08:38:17] *** Joins: beach` (~user@2a01:cb19:150:3400:a1fa:cc82:d570:b580)
[08:39:24] *** Quits: beach (~user@2a01:cb19:150:3400:a00:cd4:816c:6b7f) (Killed (NickServ (GHOST command used by beach`!~user@2a01:cb19:150:3400:a1fa:cc82:d570:b580)))
[08:39:28] *** beach` is now known as beach
[08:39:40] *** ChanServ sets mode: +o beach
[08:41:46] *** beach sets mode: -o beach
[09:03:59] *** Quits: Mandus (~aasmundo@0.51-175-33.customer.lyse.net) (Ping timeout: 252 seconds)
[09:04:23] *** Joins: Mandus (~aasmundo@85.112.154.250)
[09:13:03] *** Joins: selwyn (~selwyn@user/selwyn)
[09:18:42] *** Quits: Mandus (~aasmundo@85.112.154.250) (Ping timeout: 258 seconds)
[09:20:42] *** Joins: Mandus (~aasmundo@0.51-175-33.customer.lyse.net)
[10:38:50] *** Joins: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[10:42:11] *** Quits: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 265 seconds)
[10:51:05] *** Quits: lottaquestions (~nick@2607:fa49:5041:a600:302c:2ca5:9f37:1500) (Ping timeout: 244 seconds)
[10:52:09] *** Joins: lottaquestions (~nick@2607:fa49:5040:5c00:302c:2ca5:9f37:1500)
[11:09:20] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[11:21:17] *** Joins: ahc (~ahc@121.98.229.241)
[11:36:06] *** Joins: fef (~thedawn@user/thedawn)
[11:52:01] *** Joins: makomo (~makomo@user/makomo)
[12:37:19] *** Joins: hendursa1 (~weechat@user/hendursaga)
[12:39:52] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 252 seconds)
[12:46:00] *** Joins: neceve (~quassel@2a02:c7f:607e:d600:a95a:ecd2:e57a:3130)
[13:10:07] *** Quits: fef (~thedawn@user/thedawn) (Ping timeout: 252 seconds)
[13:28:52] *** Joins: selwyn (~selwyn@user/selwyn)
[13:37:27] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[14:04:06] *** Quits: lucerne (~lucerne@ip202.ip-51-178-215.eu) (Remote host closed the connection)
[14:18:14] *** Quits: micro (~micro@user/micro) (Remote host closed the connection)
[14:20:41] *** Joins: micro (~micro@user/micro)
[14:22:21] *** Quits: hendursa1 (~weechat@user/hendursaga) (*.net *.split)
[14:22:51] *** Joins: hendursa1 (~weechat@user/hendursaga)
[14:25:44] *** Joins: lucerne (~lucerne@ip202.ip-51-178-215.eu)
[14:50:14] *** Joins: random-nick (~random-ni@87.116.177.92)
[15:13:01] *** Joins: susam (~susam@user/susam)
[15:22:52] *** Quits: lucerne (~lucerne@ip202.ip-51-178-215.eu) (Remote host closed the connection)
[15:23:26] *** Joins: lucerne (~lucerne@ip202.ip-51-178-215.eu)
[15:57:13] *** Parts: susam (~susam@user/susam) ()
[16:20:21] *** Joins: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[16:23:56] *** Quits: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 265 seconds)
[16:31:59] *** Quits: lucerne (~lucerne@ip202.ip-51-178-215.eu) (Remote host closed the connection)
[16:32:24] *** Joins: lucerne (~lucerne@ip202.ip-51-178-215.eu)
[16:37:22] *** Joins: silasfox (~sbv@2001-4dd6-5b1d-0-67ea-637e-1274-9008.ipv6dyn.netcologne.de)
[16:51:20] <lucerne> Is there a way to write an escaped newline in a string literal, ala "hello\nworld"?
[16:57:10] <beach> #.(format nil "hello~%world")
[17:03:47] *** Quits: lucerne (~lucerne@ip202.ip-51-178-215.eu) (Remote host closed the connection)
[17:04:16] *** Joins: lucerne (~lucerne@ip202.ip-51-178-215.eu)
[17:04:33] <beach> lucerne: I take it you are not pleased with that solution. 
[17:05:44] <lucerne> beach: It's overkill to use a formatter for a simple new line, honestly. It's not very important, but it's a rough edge.
[17:05:59] <beach> Overkill?  In what respect?
[17:06:05] <beach> It is executed at read time.
[17:06:21] <lucerne> beach: In verbosity
[17:07:15] <beach> If every special case to avoid verbosity would be incorporated into the language, then the entire language would be REALLY verbose. 
[17:07:45] <beach> Instead, the language contains very powerful general mechanisms that make those special cases unnecessary.
[17:08:06] <lucerne> Well, newer langs all agree on =\n=. I think the adoption would be better if CL didn't have the rough edges.
[17:08:07] <beach> Like macros, generic functions, reader macros, etc.
[17:08:26] <beach> I strongly disagree with that statement.  
[17:08:41] <lucerne> Why?
[17:09:00] <beach> Because the reason Common Lisp is not adopted more widely has nothing to do with its features.
[17:09:42] <beach> It has to do with it not being taught in teaching programs, and with some powerful psychological forces that we humans must live with.
[17:10:19] <greyrat>  Why is it not used for teaching though? 
[17:11:04] <beach> Mainly because teachers are incompetent, and the reason for that is how they are recruited.
[17:11:22] <greyrat> (Though, truth to tell, in my university only Java/C were taught formally. People just picked up other langs like Python when the courses demanded them.)
[17:11:29] <beach> We (me and my favorite coauthor) taught Common Lisp for more than 15 years at the university, but we are the exception.
[17:12:23] <beach> Yes, but Common Lisp is very different from the others, so harder to just pick up, using the knowledge of other languages.
[17:12:52] <greyrat> beach: Didn't the students protest? CL wouldn't help on their resumes or scientific computing stuff
[17:13:14] <beach> There were some protests, sure.
[17:13:36] <beach> The protests were much greater when we taught it at the engineering school.
[17:13:57] <beach> There, the students are very resume-oriented.  Not so much at the university.
[17:14:05] <greyrat> As opposed to CS, or general humanities?
[17:14:48] <beach> I am not sure what the question refers to.
[17:15:10] <greyrat> I don't quite knoow what you mean by eng schools, coming from Iran.
[17:15:23] <beach> Oh, it's a specialty of France.
[17:15:43] <beach> Engineering schools are university-level institutions that are highly selectivce.
[17:16:02] <beach> Whereas everyone has the right to enroll at a university, given a high-school degree.
[17:16:30] <beach> So the engineering students are very competitive, and mainly in it just for the degree and a high-paying job.
[17:16:41] <greyrat> Makes sense. Non-ambitious people just want a degree, I assume? Were they enthusiastic in learning?
[17:16:50] <beach> University students are more likely to have confidence that the teachers are going to teach them something useful.
[17:17:24] <beach> At the university it's a mixed bag.
[17:18:06] <beach> Between students who don't know why they chose this rather than that, students who just want to get it over as soon as possible, and students who are genuinely interested. 
[17:18:20] <greyrat> I really dislike the education systems though. Most people have no use for what is taught.
[17:18:52] <beach> I am sorry to hear that.
[17:19:14] <beach> When I was in charge of the undergraduate program here, we certainly taught useful things.
[17:19:51] <beach> I have a life-long experience from academia and industry from 5 countries on 4 continents, so I kind of know what I am talking about.
[17:20:12] <greyrat> I mean, CS/SWE is probably one of the most suited majors to teaching practical stuff, but, e.g., I have studied years of chemistry in K12.
[17:20:16] <beach> Of course, students have no idea what is useful or not.
[17:20:30] <greyrat> Which don't help me in anything except holding an intelligent conversation
[17:21:01] <beach> OK, so here is the major problem when one wants to determine what is "useful" or not...
[17:21:21] <beach> Suppose we aim to teach what industry needs.  That would be useful, right?
[17:21:33] <greyrat> Well, yes.
[17:21:43] <beach> The problem is that industry is incompetent, and what it wants is not what it needs.
[17:21:57] <beach> So we, the academics should be in charge of making the industry understand that.
[17:22:15] <beach> So competent teachers like myself teach what students must know to improve industry.
[17:22:29] <greyrat> True, but wouldn't even a stupid curriculum that is designed to be somewhat useful beat the current K12 completely?
[17:22:31] <Riviera> The industry is incompetent?
[17:22:36] <beach> But students don't understand that, because what we teach is not what is used in industry, but what ought to be used.
[17:22:50] <beach> Riviera: Oh, yes, very much so.
[17:22:58] <greyrat> The only courses from K12 that are useful at all are math, and even then, not all of it.
[17:23:16] <Riviera> If it were for academia we'd all still use C++ and PHP to create software.
[17:23:19] <beach> greyrat: I can't argue with K12 in your country.
[17:23:33] <Riviera> no cloud, no containers, no kubernetes, etc.
[17:23:44] <beach> Riviera: Not where I am active.
[17:24:00] <Riviera> academia lacking behind decades of what actually works, still trying to focus on creating software that is bug-free, while reality shows that that's not what really matters.
[17:24:01] <greyrat> beach: I don't think Iran's would be worse, actually. It's a very STEM-heavy courseload. What do you have in mind that will help students?
[17:24:19] <beach> Riviera: And I didn't say academia is competent.  I said industry is incompetents. 
[17:24:50] <Riviera> beach: uhm, you kind of did, you were talking about the two, comparing them.
[17:24:56] <Riviera> but yeah, moot point :)
[17:25:08] <beach> greyrat: My domain is at the university level.  I don't have the competence for the lower levels. 
[17:25:50] <greyrat> I only have experience in CS at that level, where the courses were adequate enough, even though they still aren't very practical.
[17:26:41] <greyrat> The curriculum was definitely biased towards someone who wanted to pursue a PhD though
[17:28:14] <beach> I would be delighted to see more PhDs in industry, because, unfortunately, the amount of material required to master in order to do what is needed in industry takes more than we can squeeze into a masters degree.
[17:28:24] <beach> Of course, there are no adequate PhD programs for that either.
[17:28:29] <beach> But that's a different story.
[17:28:59] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[17:29:00] <greyrat> Indeed! The programs mostly waste time on unpromising projects in my uninformed opinion.
[17:30:14] <beach> Unfortunately, the university system in most places is not adapted to teaching skills that industry needs.
[17:30:53] <beach> So in some respects it was unfortunate that universities took on the responsibility of teaching software development. 
[17:31:01] <greyrat> I think a project-based model could do the system some good.
[17:31:15] <beach> But then, there were no better candidates at the time.  Probably still aren't.
[17:31:51] <beach> greyrat: We need competent teachers more than anything, and the university system does not produce such teachers. 
[17:32:06] <greyrat> Like, there should be some standard projects that a student should deliver to get their degree. It would vastly improve over programs that don't teach any skills whatsoever.
[17:32:07] <beach> Teachers are hired for their research skills. 
[17:32:19] <greyrat> True
[17:32:35] <greyrat> But isn't this also a cosequence of their SW skills not mattering?
[17:33:16] <beach> They are related, but I don't know which is chicken and which is egg.
[17:33:21] <greyrat> E.g., one of my profs who actually worked for the industry (as a data consultant sth), didn't (probably still doesn't) even know about `git`
[17:33:48] <greyrat> But I think he could do his job. His prooductivity wouldn't improve all that much by knowing, e.g., git.
[17:33:56] <beach> Like I said, having worked for industry is not helping either.
[17:34:36] <beach> So first, we need to make it profitable (or mandatory) for teachers to learn about software development, partly by practicing it, partly by taking courses.
[17:34:40] *** Quits: makomo (~makomo@user/makomo) (Quit: WeeChat 3.0.1)
[17:35:14] <beach> But today, that's a career stopper.  Instead they put no effort into teaching and everything into research. 
[17:35:39] <beach> So they teach what they were taught by teachers who taught what they were taught, etc.
[17:36:03] <greyrat> Yes! That idea of mandatory, standard projects would help with this, as the students will fail if they cannot deliver some basic stuff, and a uni can't go on with rampant failing students.
[17:36:32] <greyrat> The problem is cheating, though.
[17:36:36] <beach> I am telling you, there are very few competent teachers who could define such projects today.
[17:37:09] <greyrat> Yes, but the projects could be defined on a national level, and their skill level can be ramped up gradually over the years
[17:37:40] <greyrat> The profs would then have an incentive to up their game. They are smart people, they will learn the stuff if they need it.
[17:37:46] <beach> In some countries that would be possible, provided the government had competent advisors, and that's not obvious.
[17:38:11] <greyrat> Yes. The gov is the most incompetent of all, usually.
[17:38:26] <greyrat> Do you think it would work at all though?
[17:38:42] <greyrat> Wouldn't people just copy some template project from Github?
[17:38:57] <greyrat> Or pay some shop that specializes in delivering uni projects?
[17:39:32] <beach> Such things can be detected, but it requires manual work to do so.  And if teachers are incompetent, or not willing to put in the work, then cheating will be widespread. 
[17:39:54] <greyrat> The teachers will have an incentive to encourage cheating, too
[17:40:10] <greyrat> As they can then not teach and focus on other obligations
[17:40:35] <beach> Like, when I taught a project-based course, we would ask each student in the group to explain (say) 50 lines of code chosen at random.
[17:41:01] <beach> But that was a lot of work.
[17:41:13] <greyrat> You were kind :)) My profs would usually ask people to change stuff
[17:41:33] <greyrat> Add some feature, change some parameters that were supposed to be constants, etc
[17:42:05] <greyrat> People still cheated though. Most students' pratical HWs were 100/100, I think.
[17:42:14] <beach> So here is the thing though, code from GitHub, or code produced by specialized shops like that would not be any better than code produced by students.  Often it would be worse.
[17:42:38] <greyrat> Though those practical exercises were not monitored as strictly as bigger projects.
[17:43:39] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 265 seconds)
[17:43:44] <greyrat> BTW, Julia looks pretty promising to me.
[17:44:02] <greyrat> Have you used it? I think it just lacks the reader macros.
[17:44:35] <greyrat> Its structs are also currently not redefinable, which somewhat limits the REPL-driven experience.
[17:47:21] <beach> I haven't used it.  What I know is that there are languages invented every year, and industry (and individuals) seem willing to use languages with no independent standard for strategic projects.  In my industry talks, I encourage companies to fire project leaders who do that.
[17:48:01] <lucerne> Why do you think a standard helps?
[17:48:15] <beach> What a strange question.
[17:48:20] <lucerne> It seems more of a luxury thing to me
[17:48:34] <lucerne> It's nice to have, but doesn't provide any concrete benefits.
[17:48:43] <beach> If there is no standard, that usually means that it is not a "language" but a "programming system" that can change arbitrarily over time.
[17:49:08] <lucerne> Yes, but this also helps it be more 'agile.'
[17:49:19] <beach> If it is controlled by a for-profit company, it can not only change, but support can go away completely.
[17:49:29] <beach> If it is a university project, then funding can run out.
[17:49:45] <lucerne> Well, can't same thing happen with, e.g., SBCL?
[17:49:54] <beach> Evolving specifications are undesirable for strategic projects.
[17:50:41] <lucerne> Hmm. I think if they should have the manpower, migrating from breaking changes won't cost them much.
[17:50:47] <beach> SBCL can not change the way the Common Lisp standard is hnored, unless they no longer want to call it an implementation of Common Lisp.
[17:51:09] <lucerne> Perhaps Rust is a good historical example. Mozilla abandoned them. How is the language doing currently?
[17:51:19] <beach> lucerne: Yes, that's what I tell them.  If they have a group that knows about compilers and language implementation, they are fine.  Most don't.
[17:53:28] <beach> During my many years of industry consulting, I have never seen a single risk analysis that takes into account the possibility that their major tool, i.e. the programming language, may change in arbitrary ways.
[18:01:04] *** Quits: neceve (~quassel@2a02:c7f:607e:d600:a95a:ecd2:e57a:3130) (Remote host closed the connection)
[18:10:13] *** Joins: fef (~thedawn@user/thedawn)
[18:33:14] <lucerne> beach: how you seen the risk actualized though?
[18:33:21] <lucerne> have*
[18:36:40] <beach> I am usually not around for the entire project, so I haven't seen it happen.
[18:37:29] <beach> But that's beside the point, because if the stakes are hight enough, no matter how small the risk is, it should be taken into account in the analysis.
[18:37:56] <beach> Then, the person making the decision can decide whether the future of the company is worth risking or not.
[18:38:10] <beach> But without the risk analysis, there is no basis for the decision either way.
[18:46:28] *** Quits: lucerne (~lucerne@ip202.ip-51-178-215.eu) (Read error: Connection reset by peer)
[18:46:29] <beach> And when there is no risk analysis, decisions are typically made by the "fast" brain module (as Kahneman says), and that module is notoriously bead with things like arithmetic and statistics.  
[18:47:27] <beach> So decisions such as "let's choose Java because all our programmers already know Java" are made, despite the fact that (as Hudak and Jones show) learning a new language is a small cost compared to the cost of using a language that is not adapted to the task.
[18:53:01] <beach> s/bead/bad/
[18:53:13] * beach should quit tying to type today.
[18:57:20] *** Joins: dickbar__ (~dickbaren@dyndsl-031-150-225-023.ewe-ip-backbone.de)
[19:07:26] *** Joins: thrig (~thrig@70.97.65.230)
[19:07:47] *** Joins: Josh_2 (~user@37.25.47.130)
[19:19:21] *** Quits: fef (~thedawn@user/thedawn) (Remote host closed the connection)
[19:19:30] *** Joins: fef (~thedawn@user/thedawn)
[19:27:36] *** Quits: thrig (~thrig@70.97.65.230) (Ping timeout: 265 seconds)
[19:28:13] *** Joins: lucerne (~lucerne@ip202.ip-51-178-215.eu)
[19:46:20] *** Joins: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[19:49:24] *** Joins: thrig (~thrig@70.97.65.230)
[19:49:40] *** Quits: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 258 seconds)
[20:24:35] *** Joins: st_iron (uid370243@id-370243.highgate.irccloud.com)
[20:30:50] *** Quits: thrig (~thrig@70.97.65.230) (Remote host closed the connection)
[20:45:02] *** Quits: dickbar__ (~dickbaren@dyndsl-031-150-225-023.ewe-ip-backbone.de) ()
[21:10:52] *** Quits: fef (~thedawn@user/thedawn) (Remote host closed the connection)
[21:11:48] *** Joins: fef (~thedawn@user/thedawn)
[21:25:36] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[21:30:49] *** Quits: silasfox (~sbv@2001-4dd6-5b1d-0-67ea-637e-1274-9008.ipv6dyn.netcologne.de) (Ping timeout: 265 seconds)
[21:54:43] *** Joins: silasfox (~sbv@2001-4dd6-5b1d-0-67ea-637e-1274-9008.ipv6dyn.netcologne.de)
[22:26:24] *** Quits: silasfox (~sbv@2001-4dd6-5b1d-0-67ea-637e-1274-9008.ipv6dyn.netcologne.de) (Ping timeout: 265 seconds)
[22:27:52] *** Joins: silasfox (~sbv@2001-4dd6-57a2-0-a504-35b8-bb69-198e.ipv6dyn.netcologne.de)
[22:34:17] *** Quits: lucerne (~lucerne@ip202.ip-51-178-215.eu) (Read error: Connection reset by peer)
[23:13:33] *** Quits: hendursa1 (~weechat@user/hendursaga) (Quit: hendursa1)
[23:13:49] *** Joins: hendursaga (~weechat@user/hendursaga)
[23:14:01] *** Quits: fef (~thedawn@user/thedawn) (Ping timeout: 244 seconds)
[23:26:05] *** Joins: lucerne (~lucerne@ip202.ip-51-178-215.eu)
[23:29:26] *** Joins: selwyn (~selwyn@user/selwyn)
[23:33:08] *** Quits: hendursaga (~weechat@user/hendursaga) (Remote host closed the connection)
[23:33:36] *** Joins: hendursaga (~weechat@user/hendursaga)
[23:40:54] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[23:50:46] *** Quits: lucerne (~lucerne@ip202.ip-51-178-215.eu) (Remote host closed the connection)
[23:51:14] *** Joins: lucerne (~lucerne@ip202.ip-51-178-215.eu)
[23:52:09] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
