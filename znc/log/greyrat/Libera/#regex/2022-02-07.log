[00:00:54] *** Joins: dandyn (~dandyn@user/dandyn)
[00:01:03] <re101-bichon-63> I have the regex ^[A-Z]([A-Z]|\d)*$ and when I test A12 it counts A1 as one string and the 2 separate and I'm not sure why
[00:02:46] <mysticspiral[m]> ^[A-Z]([A-Z\d]*)$
[00:03:46] <re101-bichon-63> The A is now being left out and the 12 are grouped
[00:04:06] <mysticspiral[m]> lol, thought that is what you wanted
[00:04:25] <mysticspiral[m]> why even use a capture group when you use the whole string anyway?
[00:04:57] <mysticspiral[m]> ^[A-Z][A-Z\d]*$
[00:07:13] <re101-bichon-63> ty
[00:08:14] <mysticspiral[m]> matches also stuff like AAA. hope thats intentional
[00:24:53] *** Joins: p-i-_ (~Ohmu@183.89.38.16)
[00:26:10] *** Joins: Hash (~Hash@hashsecurity.org)
[00:27:57] *** Quits: p-i- (~Ohmu@2403:6200:8978:8b4d:3897:4978:8f12:ada4) (Ping timeout: 240 seconds)
[00:44:13] *** Quits: lavaball (felix@31.204.155.215) (Remote host closed the connection)
[00:45:22] *** Quits: varrg (~varrg@h-176-10-198-245.A351.priv.bahnhof.se) (Quit: Leaving)
[00:45:32] *** Joins: lavaball (~Melissa@31.204.155.215)
[01:08:12] *** Joins: jmdaemon (~jmdaemon@user/jmdaemon)
[01:28:23] *** Quits: lavaball (~Melissa@31.204.155.215) (Remote host closed the connection)
[01:47:23] *** Joins: re101-discus-63 (~re101-dis@46.100.180.127)
[01:47:56] *** Quits: re101-discus-63 (~re101-dis@46.100.180.127) (Client Quit)
[02:10:21] *** Joins: ecalogero (~ecalogero@host31-53-245-117.range31-53.btcentralplus.com)
[02:17:05] *** Joins: shreyasminocha (51fdc93eda@user/shreyasminocha)
[02:32:13] *** Quits: dandyn (~dandyn@user/dandyn) (Quit: Client closed)
[02:34:59] *** Quits: toadtoad (~macbook@cpc101496-gill19-2-0-cust142.20-1.cable.virginm.net) (Quit: toadtoad)
[02:38:08] *** Joins: macbook (~macbook@cpc101496-gill19-2-0-cust142.20-1.cable.virginm.net)
[02:39:17] *** Quits: macbook (~macbook@cpc101496-gill19-2-0-cust142.20-1.cable.virginm.net) (Client Quit)
[02:51:38] *** Quits: jmdaemon (~jmdaemon@user/jmdaemon) (Ping timeout: 250 seconds)
[02:55:53] *** Quits: MrNato_Home (MrNato_Hom@61.29.44.88) (Ping timeout: 256 seconds)
[02:56:51] *** Joins: MrNato_Home (MrNato_Hom@61.29.44.88)
[02:58:51] *** Joins: lehinsun (~ttytwiste@188.113.176.117)
[03:19:58] *** Joins: herjazz (~herjazz@p10513117-ipngn24101marunouchi.tokyo.ocn.ne.jp)
[03:27:32] *** Quits: palasso (~palasso@user/palasso) (Remote host closed the connection)
[03:28:39] *** Quits: callq_ (~callq@2409:4062:202:fb53:35cf:a4ba:9e6b:cada) (Ping timeout: 250 seconds)
[04:20:46] *** Quits: zen_coder (~zen_coder@2a02:8109:a280:2d8d:4d74:be9c:8758:8859) (Ping timeout: 245 seconds)
[04:56:10] *** Joins: jmdaemon (~jmdaemon@user/jmdaemon)
[05:03:09] *** Quits: MrNato_Home (MrNato_Hom@61.29.44.88) (Ping timeout: 256 seconds)
[05:03:59] *** Joins: MrNato_Home (MrNato_Hom@61.29.44.88)
[05:08:29] *** Quits: MrNato_Home (MrNato_Hom@61.29.44.88) (Ping timeout: 256 seconds)
[05:11:32] *** Joins: MrNato_Home (MrNato_Hom@61.29.44.88)
[05:18:45] *** Quits: ecalogero (~ecalogero@host31-53-245-117.range31-53.btcentralplus.com) (Quit: Connection closed)
[05:26:22] *** Joins: loganlee[gnu] (~Thunderbi@user/loganlee)
[05:30:19] *** Quits: vlm (~vlm@user/vlm) (Quit: "")
[05:32:17] *** Quits: maetthew (~maetthew@user/maetthew) (Quit: ZNC 1.8.2 - https://znc.in)
[05:34:59] *** Joins: maetthew (~maetthew@c188-150-159-232.bredband.tele2.se)
[05:34:59] *** Quits: maetthew (~maetthew@c188-150-159-232.bredband.tele2.se) (Changing host)
[05:34:59] *** Joins: maetthew (~maetthew@user/maetthew)
[05:55:07] *** Joins: vlm (~vlm@user/vlm)
[05:56:55] *** Quits: jmdaemon (~jmdaemon@user/jmdaemon) (Quit: ZNC 1.8.2 - https://znc.in)
[05:59:44] *** Joins: jmdaemon (~jmdaemon@user/jmdaemon)
[06:04:24] *** Joins: vitejose (~vitejose@071-045-064-136.res.spectrum.com)
[06:09:52] *** Joins: src (~src@user/src)
[06:13:58] *** Quits: lehinsun (~ttytwiste@188.113.176.117) (Remote host closed the connection)
[06:16:49] *** Joins: lehinsun (~ttytwiste@188.113.176.117)
[06:48:42] *** Joins: p-i- (~Ohmu@183.89.35.200)
[06:50:29] *** Quits: p-i-_ (~Ohmu@183.89.38.16) (Ping timeout: 256 seconds)
[06:55:20] *** Quits: w0ng (~w0ng@103.1.212.158) (Ping timeout: 250 seconds)
[06:56:47] *** Joins: adeliktas9 (~adeliktas@i59F5F08B.versanet.de)
[06:58:17] *** Quits: adeliktas (~adeliktas@i59F52850.versanet.de) (Ping timeout: 240 seconds)
[06:58:17] *** adeliktas9 is now known as adeliktas
[07:06:39] *** Joins: frustrated_perso (~frustrate@2601:547:100:8a40:a096:2806:dca3:aaec)
[07:09:54] <frustrated_perso> Hi everyone. I'm looking to match coin grades in Python, and I have it mostly working right. I want everything shown here to match except for the one that says "MS 90%". How can I have it not match for the entire phrase "MS 90%", or anything that is directly followed by a "%"? Thank you. https://regex101.com/r/I6fE0C/1
[07:16:58] <digitok> and you want to extract those parts individually, yes?
[07:16:58] <frustrated_perso> Nevermind, I think I gotit
[07:17:12] <frustrated_perso> \s(AG|AU|BN|BU|CIR|EF|EX|XF|F|FR|G|MS|PF|PO|PR|RB|RD|SP|UNC|VG|VF)\s?[-]?\s?(\d{1,2}[^\d{1,2}%])([*]?\s?[+]?)
[07:17:15] <frustrated_perso> This seems to work
[07:17:24] <frustrated_perso> Thank you though
[07:17:43] <digitok> i would go with something else, personally
[07:18:07] <frustrated_perso> I'm definitely open to something else if you have a better option
[07:18:14] <frustrated_perso> Still pretty new to regex lol
[07:18:25] <digitok> :)
[07:18:42] <digitok> so, the goal is to extract the coin and grade individually?
[07:19:04] <digitok> and possibly a * and/or + after it?
[07:19:11] <frustrated_perso> Exactly
[07:19:43] <frustrated_perso> So like one group as "MS", "F", etc., followed by the one or two digits, and then possibly the * or +
[07:20:09] <digitok> it would only be * or +, not both?
[07:20:14] <frustrated_perso> Correct
[07:20:46] <frustrated_perso> And the * would have to directly follow the numbers without whitespace between them
[07:20:54] <frustrated_perso> The + can have whitespace before it
[07:21:04] <digitok> ah
[07:21:28] <frustrated_perso> People use the * in the listings sometimes without actually meaning it to be part of the grade haha
[07:21:36] <digitok> right
[07:23:50] <digitok> https://regex101.com/r/I6fE0C/2
[07:24:20] <frustrated_perso> Fantastic, thank you!
[07:24:43] <digitok> yw :)
[07:25:16] <frustrated_perso> What does \b do btw?
[07:25:18] <digitok> the last \s? can be \s* to allow more than one space before +
[07:25:55] <frustrated_perso> Sounds good
[07:26:01] <digitok> \b is a word boundary which matches between a "word" char and a non-word char. word being a-zA-Z0-9_
[07:26:18] <digitok> so since the following char is a letter, the preceding char, if any, cannot be a word char
[07:26:56] <frustrated_perso> Gotcha, thanks again
[07:26:59] <digitok> the only way it would fail is if the preceding char were _ and you expected a match
[07:27:06] <digitok> np
[07:28:50] *** Quits: frustrated_perso (~frustrate@2601:547:100:8a40:a096:2806:dca3:aaec) (Quit: Client closed)
[07:33:51] *** Joins: w0ng (~w0ng@ec2-13-211-241-147.ap-southeast-2.compute.amazonaws.com)
[07:39:39] *** Joins: callq (~callq@157.41.72.120)
[07:43:31] *** Quits: bin101 (~bin101@user/bin101) (Ping timeout: 256 seconds)
[07:53:51] *** Joins: bin101 (~bin101@user/bin101)
[07:58:39] *** Quits: w0ng (~w0ng@ec2-13-211-241-147.ap-southeast-2.compute.amazonaws.com) (Quit: w0ng)
[07:59:09] *** Joins: w0ng (~w0ng@103.212.227.166)
[08:14:09] *** Quits: p-i- (~Ohmu@183.89.35.200) (Read error: Connection reset by peer)
[08:14:45] *** Joins: p-i- (~Ohmu@mx-ll-183.89.35-200.dynamic.3bb.co.th)
[08:27:06] *** Quits: herjazz (~herjazz@p10513117-ipngn24101marunouchi.tokyo.ocn.ne.jp) (Quit: leaving)
[08:27:40] *** Joins: ecalogero (~ecalogero@host31-53-245-117.range31-53.btcentralplus.com)
[08:27:53] *** Joins: ttree (~ttree0@c-73-97-116-42.hsd1.wa.comcast.net)
[09:24:11] *** Quits: ttree (~ttree0@c-73-97-116-42.hsd1.wa.comcast.net) (Read error: Connection reset by peer)
[09:38:12] *** Joins: re101-yorkie-8 (~re101-yor@d-173-44-75-18.md.cpe.atlanticbb.net)
[09:38:39] *** Quits: re101-yorkie-8 (~re101-yor@d-173-44-75-18.md.cpe.atlanticbb.net) (Client Quit)
[09:59:51] *** Quits: cthulchu (~Cthulchu@69-172-160-196.cable.teksavvy.com) (Ping timeout: 256 seconds)
[10:27:57] *** Joins: re101-yorkie-8 (~re101-yor@d-173-44-75-18.md.cpe.atlanticbb.net)
[10:32:10] *** Parts: re101-yorkie-8 (~re101-yor@d-173-44-75-18.md.cpe.atlanticbb.net) ()
[10:33:27] *** Quits: ircuser-1 (~Johnny@c-71-193-246-4.hsd1.or.comcast.net) (Quit: because)
[10:34:17] *** Joins: re101-yorkie-8 (~re101-yor@d-173-44-75-18.md.cpe.atlanticbb.net)
[10:35:13] *** Quits: re101-yorkie-8 (~re101-yor@d-173-44-75-18.md.cpe.atlanticbb.net) (Client Quit)
[10:42:38] *** Joins: re101-yorkie-26 (~re101-yor@49.37.157.191)
[10:43:37] <re101-yorkie-26> Hello there,
[10:43:38] <re101-yorkie-26> could anyone help me create a hive regex to create an athena table ?
[10:50:31] *** Quits: re101-yorkie-26 (~re101-yor@49.37.157.191) (Ping timeout: 256 seconds)
[10:54:29] *** Quits: re101-bichon-63 (~re101-bic@074-135-005-065.res.spectrum.com) (Ping timeout: 256 seconds)
[11:03:13] *** Quits: w0ng (~w0ng@103.212.227.166) (Quit: w0ng)
[11:05:23] *** Joins: w0ng (~w0ng@185.218.127.62)
[11:10:59] *** Quits: ecalogero (~ecalogero@host31-53-245-117.range31-53.btcentralplus.com) (Quit: Connection closed)
[11:19:14] *** Quits: vitejose (~vitejose@071-045-064-136.res.spectrum.com) (Quit: So long, folks)
[11:29:40] *** Quits: mintoyatsu (~mint@user/mintoyatsu) (Remote host closed the connection)
[11:34:52] *** Quits: unluckyshrubbery (~unluckysh@45-19-33-188.lightspeed.livnmi.sbcglobal.net) (Quit: ZNC 1.8.2 - https://znc.in)
[11:38:58] *** Joins: palasso (~palasso@user/palasso)
[11:52:50] *** Quits: loganlee[gnu] (~Thunderbi@user/loganlee) (Quit: loganlee[gnu])
[12:05:54] *** Joins: herjazz (~herjazz@p10513117-ipngn24101marunouchi.tokyo.ocn.ne.jp)
[12:31:30] *** Joins: re101-canaan-22 (~re101-can@46-148-12-79.telpol.net.pl)
[12:32:07] *** Quits: re101-canaan-22 (~re101-can@46-148-12-79.telpol.net.pl) (Client Quit)
[12:39:21] *** Joins: lavaball (felix@31.204.155.215)
[12:47:39] *** Joins: re101-bear-18 (~re101-bea@2001:8003:e097:0:b5f3:6171:ac96:d2c7)
[12:49:09] <re101-bear-18> "Your regex must be able to handle all combinations of the presence/absence of leading sign, integer part, fractional part, exponent, and sign in the exponent.". Stuck on test 80/89 for question eleven - not sure what this one means if anyone happens to know?
[12:53:27] *** Quits: lavaball (felix@31.204.155.215) (Remote host closed the connection)
[12:53:54] *** Joins: zen_coder (~zen_coder@2a02:8109:a280:2d8d:4d74:be9c:8758:8859)
[13:23:03] *** Joins: unluckyshrubbery (~unluckysh@45-19-33-188.lightspeed.livnmi.sbcglobal.net)
[13:27:17] *** Quits: re101-bear-18 (~re101-bea@2001:8003:e097:0:b5f3:6171:ac96:d2c7) (Quit: Client closed)
[13:46:55] *** Quits: zen_coder (~zen_coder@2a02:8109:a280:2d8d:4d74:be9c:8758:8859) (Remote host closed the connection)
[13:46:57] *** Joins: re101-drever-31 (~re101-dre@213.233.108.175)
[13:47:02] <re101-drever-31> Hello
[13:47:10] <re101-drever-31> I need some help
[13:47:20] *** Joins: zen_coder (~zen_coder@2a02:8109:a280:2d8d:60ef:8113:9157:1102)
[13:47:46] <re101-drever-31> I have this kind of strings
[13:47:47] <re101-drever-31> .src="a.b.za-gl.za.gl".
[13:47:47] <re101-drever-31> .src="a.b.c.za-gl.za.gl".
[13:48:09] *** Joins: re101-toucan-55 (~re101-tou@87.140.195.0)
[13:48:23] <re101-drever-31> and I need to match the dots between src= and .za.gl
[13:49:39] <re101-drever-31> (?<=src=)[\.](?=\.za\.gl)
[13:49:44] <re101-drever-31> this is what I have now
[13:50:53] <re101-drever-31> https://regex101.com/r/ijt5C9/1
[14:00:06] <mysticspiral[m]> no idea if that will work for what you want to do
[14:00:07] <mysticspiral[m]> https://regex101.com/r/ijt5C9/4
[14:00:33] *** Joins: re101-lynx-69 (~re101-lyn@ip83.ip-51-91-204.eu)
[14:00:53] <re101-drever-31> Thank you
[14:00:58] <re101-drever-31> I need it in nginx
[14:01:43] <re101-lynx-69> hello guys how can match 3 line after frist match ?
[14:02:00] *** Quits: re101-toucan-55 (~re101-tou@87.140.195.0) (Quit: Client closed)
[14:03:33] <re101-lynx-69> https://regex101.com/r/CA35Ut/1
[14:04:46] <mysticspiral[m]> you mean like this? https://regex101.com/r/CA35Ut/2
[14:05:14] <re101-lynx-69> yea dude
[14:05:16] <re101-lynx-69> thank you
[14:05:21] <re101-lynx-69> can explain me
[14:05:36] <mysticspiral[m]> \n is new line
[14:05:46] <mysticspiral[m]> .* matches the whole line
[14:06:03] *** Joins: ahmedelgabri (~ahmedelga@2a02-a446-d88a-1-31a3-1e17-45a2-c89c.fixed6.kpn.net)
[14:06:15] <purplex> three lines with content while ignoring newlines after it might be https://regex101.com/r/CA35Ut/3
[14:06:46] <mysticspiral[m]> (?:) groups \n.* together so that the quantifier {3} works on the whole thing
[14:07:02] <mysticspiral[m]> essentially making it \n.\n.\n.*
[14:07:05] *** Joins: ecalogero (~ecalogero@host31-53-245-117.range31-53.btcentralplus.com)
[14:07:09] <re101-lynx-69> thank you mate
[14:07:11] <mysticspiral[m]> i mean \n.*\n.*\n.*
[14:07:18] <re101-lynx-69> (y) (y) (y)
[14:07:29] <re101-lynx-69> and thank you for explain
[14:10:39] *** Quits: ahmedelgabri (~ahmedelga@2a02-a446-d88a-1-31a3-1e17-45a2-c89c.fixed6.kpn.net) (Ping timeout: 250 seconds)
[14:16:33] <mysticspiral[m]> re101-drever-31: alternative https://regex101.com/r/ijt5C9/6
[14:30:44] *** Quits: ecalogero (~ecalogero@host31-53-245-117.range31-53.btcentralplus.com) (Quit: Connection closed)
[14:34:59] *** Quits: re101-drever-31 (~re101-dre@213.233.108.175) (Quit: Client closed)
[14:36:05] *** Joins: lavaball (felix@31.204.155.215)
[14:42:35] <digitok> for fun https://regex101.com/r/ijt5C9/8
[14:48:24] <mysticspiral[m]> lol
[14:51:52] *** Joins: ahmedelgabri (~ahmedelga@2a02-a446-d88a-1-85e9-9fbe-b4f9-8a8d.fixed6.kpn.net)
[14:54:19] *** Joins: f00 (~timm@user/timm)
[14:57:40] <digitok> it was for fun, but not a joke :>
[15:11:06] *** Quits: yitz (~yitz@exercism/yitz) (Ping timeout: 268 seconds)
[15:14:50] *** Joins: re101-insect-41 (~re101-ins@2409:4070:4ea4:47b0:18a2:54be:e363:e3dd)
[15:14:58] <re101-insect-41> hello
[15:15:11] <re101-insect-41> need help regex
[15:15:34] *** Quits: re101-insect-41 (~re101-ins@2409:4070:4ea4:47b0:18a2:54be:e363:e3dd) (Client Quit)
[15:37:22] *** Quits: re101-lynx-69 (~re101-lyn@ip83.ip-51-91-204.eu) (Quit: Client closed)
[15:42:57] *** Quits: callq (~callq@157.41.72.120) (Ping timeout: 240 seconds)
[15:57:05] *** Quits: luva (~luva@146.70.62.252) (Ping timeout: 256 seconds)
[15:58:19] *** Joins: luva (~luva@146.70.62.238)
[15:59:51] *** Joins: callq (~callq@2409:4062:2d8d:345f:158c:2117:eab6:8c14)
[16:11:36] *** Joins: re101-toucan-55 (~re101-tou@87.140.195.0)
[16:15:04] *** Quits: re101-toucan-55 (~re101-tou@87.140.195.0) (Client Quit)
[16:55:57] *** Quits: ahmedelgabri (~ahmedelga@2a02-a446-d88a-1-85e9-9fbe-b4f9-8a8d.fixed6.kpn.net) (Ping timeout: 240 seconds)
[17:02:30] *** Joins: ahmedelgabri (~ahmedelga@2a02-a446-d88a-1-85e9-9fbe-b4f9-8a8d.fixed6.kpn.net)
[17:32:58] *** Joins: re101-rat-74 (~re101-rat@181.73.182.190)
[17:33:22] *** Joins: re101-birman-80 (~re101-bir@170.251.201.177)
[17:37:53] *** Quits: re101-birman-80 (~re101-bir@170.251.201.177) (Client Quit)
[17:38:24] *** Quits: re101-rat-74 (~re101-rat@181.73.182.190) (Quit: Client closed)
[17:56:12] *** Quits: herjazz (~herjazz@p10513117-ipngn24101marunouchi.tokyo.ocn.ne.jp) (Quit: leaving)
[17:58:12] *** Joins: luva1 (~luva@185.168.9.233)
[18:01:42] *** Quits: luva (~luva@146.70.62.238) (Ping timeout: 260 seconds)
[18:01:42] *** luva1 is now known as luva
[18:13:22] *** Joins: luva1 (~luva@37.120.197.52)
[18:16:13] *** Quits: luva (~luva@185.168.9.233) (Ping timeout: 240 seconds)
[18:21:59] *** Quits: Muzer (~muzer@tim32.org) (Ping timeout: 250 seconds)
[18:37:48] <p-i-> https://regex101.com/r/sCZSzF/1 Can anyone help me get my head around this regex? It's not mine. I'm trying to pull out all numbers on a line after TOKEN.
[18:37:54] <p-i-> e.g. 'quux TOKEN: 1 - 3 - 5.5 - 7' -> ['1', '3', '5.5', '7']
[18:37:59] <p-i-> `(?m)(?:\G(?!^)|^.*?TOKEN:).*?\K\d+(?:\.\d+)?` ... this is the regex
[18:38:07] <p-i-> Can I build it it up from the ground more simply?
[18:38:41] <p-i-> If I start simple: r'(\d+)' works over '1 2 3 4'. Or '1 2 3.5$-4'.
[18:39:05] <p-i-> But the challenge is to only have that kick in after it's matched TOKEN
[19:03:49] <OnlineCop> p-i-: You can probably get rid of the `^.*?`
[19:05:12] <OnlineCop> https://regex101.com/r/sCZSzF/2
[19:08:16] *** Joins: netpipe (~netpipe@user/netpipe)
[19:17:03] *** Joins: luva19 (~luva@185.168.9.236)
[19:18:25] *** Joins: luva196 (~luva@37.120.197.54)
[19:20:31] *** Quits: luva1 (~luva@37.120.197.52) (Ping timeout: 256 seconds)
[19:21:37] *** Quits: luva19 (~luva@185.168.9.236) (Ping timeout: 240 seconds)
[19:21:37] *** luva196 is now known as luva19
[19:25:49] *** Quits: ahmedelgabri (~ahmedelga@2a02-a446-d88a-1-85e9-9fbe-b4f9-8a8d.fixed6.kpn.net) (Ping timeout: 240 seconds)
[19:29:49] <OnlineCop> p-i-: Are you just trying to understand what's going on in it?
[19:30:10] *** Quits: Hezkore[m] (~hezkore@2001:470:69fc:105::d9fe) (Quit: You have been kicked for being idle)
[19:32:22] <OnlineCop> Version /1 is a little complicated because they combined a bunch of stuff already, which makes it a bit less readable.
[19:33:52] <OnlineCop> Essentially, the first group `(?:\G(?!^)|^.*?TOKEN:)` says "continue matching" (the `\G`) "unless you're at the beginning of the line. Or, from the beginning of the line, match till you find 'TOKEN:'."
[19:34:33] <OnlineCop> Version /2 split that up to first look for 'TOKEN:' and then has `\G` in the next alternation for when it can't be found.
[19:34:37] <p-i-> Hey OnlineCop! thanks for picking up... just got back to the house
[19:34:56] <OnlineCop> No worries, p-i-.
[19:35:02] <p-i-> Yes, I'm trying to learn regex
[19:35:06] <p-i-> ... finally
[19:35:21] <OnlineCop> That's fine. Feel free to ask as many questions as you need to help you learn.
[19:35:32] <p-i-> I've picked up the basics but I'm at adrift with this one
[19:35:49] <OnlineCop> I feel like version /1 had overly complicated a few of the things because all those groups up front made it hard to fit everything it was trying to do, nicely into my brain.
[19:36:55] <OnlineCop> Versions /1 and /2 should match the same stuff, but /2 doesn't have nearly as many groups going on, so I hope it makes it less confusing. Although, it has a problem in that I've had to repeat `\d+(?:\.\d+)?` in two places instead of their single location.
[19:37:37] <OnlineCop> If that were a more complicated example, where it was trying to match more than just digits, then I could understand trying to write it in a "more complicated, but only write it once" fashion.
[19:46:17] <p-i-> I'm trying to fuse trade-signals. Every signal has the same basic info, but the different providers give it in a different way.
[19:46:37] <p-i-> And it seems not one of them has heard of using a template that validates input.
[19:47:47] <p-i-> Could you help me get traction, if we were to reduce the problem to the essentials?
[19:48:09] <p-i-> r'(\d+)' works over '1 2 3 4'
[19:48:18] <p-i-> i.e. it returns all matches
[19:49:01] <OnlineCop> Using `r'...'` makes me think this is using Python?
[19:49:08] <p-i-> In [2]: re.findall(r"(\d+)", "1 2 3 4")
[19:49:08] <p-i-> Out[2]: ['1', '2', '3', '4']
[19:49:16] <p-i-> Yes, raw-strings
[19:49:26] <OnlineCop> Are you using Python's `re` or `regex` module? The `regex` module allows for the PCRE functionality like this.
[19:49:49] <p-i-> I did see there is a regex
[19:50:09] <p-i-> I'd love to move into it if it's going to make code cleaner
[19:50:14] <OnlineCop> Awesome; the `import regex` allows you to use this \G, \K, etc. that `re` just doesn't support.
[19:50:33] <OnlineCop> You have to download it from pypi, though, in case it's not in your system already.
[19:51:32] <p-i-> `pip install regex` ... gottit
[19:51:54] <OnlineCop> Alright, so each of your vendors/providers is giving you data that you want in different formats. You're trying to extract those values and do stuff with them. That makes sense.
[19:52:46] <OnlineCop> If your use-case it quite a bit more complicated than simply `\d+(?:\.\d+)?`, I might suggest using the `(?(DEFINE)...)` style, so you can reuse some "pattern" over and over as you need.
[19:53:06] <OnlineCop> If it's just as simple as that number matching, then we can just keep it like it is now.
[19:53:21] <p-i-> Yes, each signal has a coin-name, either a buy-price or price-range, some other info and a set of "target" sell-prices.
[19:53:47] <p-i-> oh I was trying to get around that... I was having to concatenate strings
[19:54:09] <p-i-> s='([\d\.]+)'
[19:54:16] <p-i-> and then use s
[19:54:23] <p-i-> but I can't f-string it in
[19:54:30] <p-i-> oops r'...'
[19:54:57] <OnlineCop> https://regex101.com/r/sCZSzF/3
[19:55:26] *** Joins: Muzer (~muzer@tim32.org)
[19:55:53] <p-i-> Can I use DEFINE-s over different regex matches?
[19:56:29] <OnlineCop> Yes, definitely. Just be sure that you're using the `regex.compile(r"""...""", regex.X | regex.V1)` options.
[19:57:30] <OnlineCop> For example, if you know that vendor1 gives you "TOKEN: " before your digits, and others give you "FOOBAR{...}" surrounding others, you can add a unique named group within that `(?(DEFINE)...)` to be able to match each of the vendor's styles.
[19:58:17] <p-i-> Given that the vendors fatfinger a lot of their signals, I'm trying to be as generic as I can
[19:58:32] <OnlineCop> That DEFINE group lets you name a bunch of patterns. Then, you actually call those patterns with `(?&pattern_name_here)`. Note, however, that that (?&...) notation is a non-capturing group: if you want to extract it, wrap that in its own (...) capturing parens.
[19:58:58] <p-i-> knocking up some test-data now
[20:00:39] <OnlineCop> It helps if you can say "In this text... I want it to return these results... In this OTHER text, I want these OTHER results..."
[20:01:03] *** Joins: ahmedelgabri (~ahmedelga@77-164-236-89.fixed.kpn.net)
[20:01:39] <OnlineCop> I don't know whether you want each vendor's/provider's regexes separate, so vendor1's regex doesn't try to incorrectly parse vendor2's data. Or whether you want a single regex to parse all of them. That's up to you.
[20:03:46] <OnlineCop> There might also be cases where it's simply easier to `text1 = regex.sub(data_vendor1)` with a very simple regex pattern, and then `text2 = regex.sub(text1)` the results of that with another simple regex pattern. It makes it fairy easy to see what is going on within each stage.
[20:04:13] <p-i-> https://bpa.st/FY2A
[20:04:25] <p-i-> ^ That's the kind of thing I'm dealing with
[20:04:38] <p-i-> About 20 vendors
[20:04:58] <p-i-> I'm trying to avoid doing a separate regexp template for each, although maybe it's the smart move
[20:06:06] <OnlineCop> Are those results from 20 different vendors, or from a single vendor?
[20:06:18] <p-i-> No all different vendors
[20:06:23] <p-i-> One vendor is usually consistent
[20:06:44] <OnlineCop> Okay: If you throw that onto regex101 (and you're the one who clicks Save), it gives you a way to Delete the regex if this contains any IP that you don't want stored.
[20:06:48] *** Joins: re101-squid-20 (~re101-squ@207.171.224.199)
[20:07:02] <OnlineCop> If you could, mark what you want extracted from each section.
[20:07:28] <OnlineCop> It would also help if you have some data that's supposed to be excluded from the match, since you obviously don't just want to grab "all numbers".
[20:08:15] <OnlineCop> Oh, and will numbers ever contain a leading hyphen? "-123.45" for example.
[20:09:46] *** Joins: dandyn (~dandyn@user/dandyn)
[20:13:14] <OnlineCop> p-i-: What I see from that data is that you have "ENTRY:", "ENTRY : ", "Entries", etc. Some end in whitespace followed by a colon; others do not.
[20:14:31] *** Joins: re101-impala-31 (~re101-imp@49.205.141.139)
[20:15:40] *** Quits: re101-squid-20 (~re101-squ@207.171.224.199) (Quit: Client closed)
[20:18:07] <p-i-> Yes, so if I just look for the keyword, r'[Entry|Entries|ENTRY|Buy zone|Buy @|Sell @|BUY|Buy Price|BZ]' and just pick off the ensuing numbers, that'll do most of them.
[20:19:15] <p-i-> Numbers are always positive
[20:24:27] *** Joins: re101-squid-20 (~re101-squ@207.171.224.199)
[20:29:08] *** Joins: re101-uguisu-19 (~re101-ugu@static-96-233-154-238.prvdri.fios.verizon.net)
[20:48:57] *** Quits: netpipe (~netpipe@user/netpipe) (Quit: Client closed)
[20:53:15] *** Joins: cthulchu (~Cthulchu@69-172-160-196.cable.teksavvy.com)
[20:58:49] *** Quits: re101-impala-31 (~re101-imp@49.205.141.139) (Quit: Client closed)
[21:05:42] *** Joins: re101-wolf-59 (~re101-wol@111.119.187.21)
[21:08:37] <re101-wolf-59> HI hope you are doing well i want to combine these two regex how i do can please help  implementing program and  don't have much experience in regex $regex = '(http:\/\/www\.|https:\/\/www\.|http:\/\/|https:\/\/)?([a-z0-9]+[\-\.])?(smsperkasa+)\.com([a-zA-Z0-9\&\.\/\?\:@\-_=#])*';
[21:08:38] <re101-wolf-59> $regex = "<a(?:[^>]*)href=(?:'([^']+)'|\"([^\"]+)\")(?:[^>]*)>([^<]*)?<\/a>";
[21:08:57] *** Quits: ahmedelgabri (~ahmedelga@77-164-236-89.fixed.kpn.net) (Ping timeout: 240 seconds)
[21:10:52] <re101-wolf-59> objective is   find the domain urls of any pattern https://www.smsperkasa.com/produk/besi-beton
[21:10:52] <re101-wolf-59> http://www.smsperkasa.com/produk/besi-beton
[21:10:53] <re101-wolf-59> https://smsperkasa.com/produk/besi-beton
[21:10:53] <re101-wolf-59> http://smsperkasa.com/produk/besi-beton
[21:10:54] <re101-wolf-59> smsperkasa.com/produk/besi-beton
[21:10:54] <re101-wolf-59> smsperkasa.com
[21:10:55] *** rebot sets mode: +q re101-wolf-59!*@*
[21:10:56] <rebot> 14re101-wolf-59: For regex help, please share a https://regex101.com/ link. To share other data, see !paste. You will be unmuted in 30s.
[21:11:25] *** rebot sets mode: -q re101-wolf-59!*@*
[21:14:27] <OnlineCop> re101-wolf-59 !url
[21:14:37] <OnlineCop> !url
[21:14:37] <perlbot> https://mathiasbynens.be/demo/url-regex
[21:15:08] <OnlineCop> ^ That will give you all SORTS of way to match parts of domain URLs, like TLD, queries, and all sorts of other stuff.
[21:15:11] *** luva19 is now known as luva
[21:16:16] <koollman> and a good reason to not do it with regex ;)
[21:16:51] <koollman> no regex with 0 failures so far
[21:16:59] <re101-wolf-59> thanks for fast response  actually i'm extracting href data https://ibb.co/rkHthZ3
[21:17:18] <re101-wolf-59> that is why using  regex
[21:17:25] *** Joins: re101-yorkie-42 (~re101-yor@78.174.66.140)
[21:19:50] <re101-wolf-59> i want to get herf url for my domain(any pattern), rel property data and href keyword
[21:20:18] <re101-wolf-59> i'm getting this data https://ibb.co/rkHthZ3   with this regex <a(?:[^>]*)href=(?:'([^']+)'|\"([^\"]+)\")(?:[^>]*)>([^<]*)?<\/a>
[21:20:53] <re101-wolf-59> but the issues is there extracted  many irrelevant urls  so there is need to run loop
[21:21:04] <re101-wolf-59> i want just my domain related href
[21:22:04] <re101-yorkie-42> sorry i would like to help but i don't know the subject
[21:23:26] *** Quits: re101-yorkie-42 (~re101-yor@78.174.66.140) (Quit: Client closed)
[21:42:37] *** Quits: Muzer (~muzer@tim32.org) (Ping timeout: 240 seconds)
[21:55:57] *** Joins: macbook (~macbook@cpc101496-gill19-2-0-cust142.20-1.cable.virginm.net)
[22:12:45] *** Joins: ahmedelgabri (~ahmedelga@2a02-a446-d88a-1-84c7-c5bc-e6ff-e9b1.fixed6.kpn.net)
[22:15:46] *** Quits: re101-wolf-59 (~re101-wol@111.119.187.21) (Quit: Client closed)
[22:21:16] *** Joins: Muzer (~muzer@tim32.org)
[22:21:50] *** Quits: re101-uguisu-19 (~re101-ugu@static-96-233-154-238.prvdri.fios.verizon.net) (Quit: Client closed)
[22:39:31] *** Quits: f00 (~timm@user/timm) (Ping timeout: 245 seconds)
[22:46:37] *** Quits: ttys000 (~ttys000@user/ttys000) (Read error: Connection reset by peer)
[22:49:30] *** Joins: yitz (~yitz@exercism/yitz)
[22:49:30] *** ChanServ sets mode: +v yitz
[23:03:30] *** Joins: xxzz_ (~xxzz@ec2-3-133-104-162.us-east-2.compute.amazonaws.com)
[23:07:52] *** Quits: spanwysm[m] (~spanwysm@2001:470:69fc:105::e0a) (*.net *.split)
[23:07:52] *** Quits: wbg (~wbg@user/wbg) (*.net *.split)
[23:07:52] *** Quits: thomas25 (thomas25@brought.to.you.by.bnc4free.com) (*.net *.split)
[23:07:52] *** Quits: FightingFalcon (~none@user/fightingfalcon) (*.net *.split)
[23:07:52] *** Quits: Timvde (~tim@towely.vdeynde.com) (*.net *.split)
[23:07:52] *** Quits: jelly (jelly@user/jelly) (*.net *.split)
[23:07:52] *** Quits: xxzz (~xxzz@ec2-3-133-104-162.us-east-2.compute.amazonaws.com) (*.net *.split)
[23:07:52] *** Quits: yuri6037 (~quassel@yuristudio.net) (*.net *.split)
[23:07:52] *** Quits: n-st (~n-st@user/n-st) (*.net *.split)
[23:10:22] *** Joins: ttys000 (~ttys000@user/ttys000)
[23:12:25] *** Joins: spanwysm[m] (~spanwysm@2001:470:69fc:105::e0a)
[23:12:25] *** Joins: FightingFalcon (~none@user/fightingfalcon)
[23:12:25] *** Joins: thomas25 (thomas25@brought.to.you.by.bnc4free.com)
[23:12:25] *** Joins: jelly (jelly@user/jelly)
[23:12:25] *** Joins: yuri6037 (~quassel@yuristudio.net)
[23:12:25] *** Joins: n-st (~n-st@user/n-st)
[23:14:17] *** Joins: Timvde (~tim@towely.vdeynde.com)
[23:14:17] *** ChanServ sets mode: +v Timvde
[23:15:07] *** Quits: re101-squid-20 (~re101-squ@207.171.224.199) (Ping timeout: 256 seconds)
[23:16:12] *** Quits: mysticspiral[m] (~mysticspi@2001:470:69fc:105::1:58fe) (Ping timeout: 245 seconds)
[23:16:12] *** Quits: kuhilas (~kuhilas@2001:470:69fc:105::3040) (Ping timeout: 245 seconds)
[23:16:13] *** Quits: boris[m] (~borisruna@2001:470:69fc:105::32f3) (Ping timeout: 240 seconds)
[23:16:36] *** Quits: ormaaj (~ormaaj@user/ormaaj) (Ping timeout: 256 seconds)
[23:16:36] *** Quits: v1dl00fyuq6f[m] (~v1dl00fyu@2001:470:69fc:105::1:6a20) (Ping timeout: 256 seconds)
[23:16:38] *** Quits: nicoty (~nicoty@user/nicoty) (Ping timeout: 252 seconds)
[23:16:39] *** Quits: psydroid (~psydroid@user/psydroid) (Ping timeout: 250 seconds)
[23:16:42] *** Quits: spanwysm[m] (~spanwysm@2001:470:69fc:105::e0a) (Ping timeout: 260 seconds)
[23:19:23] *** Joins: wbg (~wbg@user/wbg)
[23:20:33] *** Quits: lkhn (~lkhn@user/lkhn) (Ping timeout: 250 seconds)
[23:22:33] *** Quits: macbook (~macbook@cpc101496-gill19-2-0-cust142.20-1.cable.virginm.net) (Quit: macbook)
[23:37:05] *** Joins: jlc (~jlc@cpe-107-15-173-212.nc.res.rr.com)
[23:38:52] *** Joins: v1dl00fyuq6f[m] (~v1dl00fyu@2001:470:69fc:105::1:6a20)
[23:39:57] *** Joins: macbook (~macbook@cpc101496-gill19-2-0-cust142.20-1.cable.virginm.net)
[23:42:49] *** macbook is now known as toadtoad
[23:43:40] *** Quits: toadtoad (~macbook@cpc101496-gill19-2-0-cust142.20-1.cable.virginm.net) (Client Quit)
[23:49:15] *** Joins: jhj (~androirc@user/zibby15)
[23:51:06] <jhj> Hi
[23:51:33] <jhj> Lets assume that each letter written in a word repeats one or more times
[23:52:05] <jhj> What kind of regex should i apply for this
[23:52:06] *** Joins: re101-toucan-55 (~re101-tou@87.140.193.0)
[23:54:04] <jhj> Something like that:
[23:54:26] <jhj> Matched: word wooord worrddd woorrddd
[23:54:59] *** Joins: mysticspiral[m] (~mysticspi@2001:470:69fc:105::1:58fe)
[23:54:59] *** ChanServ sets mode: +v mysticspiral[m]
[23:55:44] <VectorX> jhj what are you asking?
[23:55:56] <jhj> VectorX hi
[23:56:05] *** Joins: mintograde (~mintograd@47.201.5.61)
[23:56:27] <jhj> Lets assume that each letter written in a word repeats one or more times
[23:56:53] <jhj> Something like that: Matched: word wooord worrddd woorrddd
[23:56:54] <VectorX> yes, we are there already
[23:57:02] <jhj> All of them should be matched
[23:57:21] *** Joins: p-i-_ (~Ohmu@183.89.35.200)
[23:57:22] <VectorX> https://regex101.com/r/P0mc7I/1
[23:57:28] <VectorX> but I am sure thats not what you want
[23:58:33] <jhj> That would match all words
[23:58:37] *** Quits: minto (~mintograd@47.201.5.61) (Ping timeout: 240 seconds)
[23:58:45] <VectorX> <jhj> All of them should be matched
[23:58:46] <jhj> How can i do it for specific word
