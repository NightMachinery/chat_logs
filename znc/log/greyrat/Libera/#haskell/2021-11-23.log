[00:01:11] *** Quits: trcc (~trcc@2-104-60-169-cable.dk.customer.tdc.net) (Ping timeout: 245 seconds)
[00:01:27] *** Joins: trcc (~trcc@2-104-60-169-cable.dk.customer.tdc.net)
[00:02:21] *** Joins: myShoggoth (~myShoggot@97-120-85-195.ptld.qwest.net)
[00:03:27] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.3)
[00:04:31] *** Quits: waleee (~waleee@h-82-196-111-63.NA.cust.bahnhof.se) (Ping timeout: 245 seconds)
[00:06:05] *** Joins: reumeth (~reumeth@user/reumeth)
[00:06:27] *** Quits: alx741 (~alx741@186.178.108.219) (Ping timeout: 264 seconds)
[00:08:52] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[00:09:26] <reumeth> I'm new to Haskell trying to make a function Aeson.Value -> Aeson.Value that fuzzes JSON values. I managed to create a deterministic function of that type, but I really want the function to replace all strings with random string/int (kind of like the strings/ints QuickCheck generates)
[00:10:27] <reumeth> Since I want some randomness it feels like I have to do this in IO or something? Or at least seed some generator and send it as an argument to my function?
[00:10:49] *** Joins: hippoid_ (~hippoid@c-98-220-13-8.hsd1.il.comcast.net)
[00:11:29] <geekosaur> the ideal way to use randomness is indeed you seed it in IO and pass the generator around
[00:12:11] <geekosaur> System.Random has a number of functions that will help you do this, and you can pick a number of RNG backends
[00:12:21] <reumeth> Is there a way to reuse the strings/ints Quickcheck generates?
[00:12:25] <geekosaur> ("random" package)
[00:12:47] <reumeth> geekosaur: That will only fix my random integer problem though, right?
[00:13:02] <geekosaur> you can use `arbitrary` but you'll pull in QuickCheck and its dependencies and you might find that a little heavy just for `arbitrary`
[00:13:15] <geekosaur> there are ways to generate random strings and such as well
[00:13:16] *** Quits: hippoid (~hippoid@c-98-220-13-8.hsd1.il.comcast.net) (Ping timeout: 245 seconds)
[00:13:42] *** Quits: hololeap (~hololeap@user/hololeap) (Ping timeout: 276 seconds)
[00:13:50] <geekosaur> (every so often one wishes `arbitrary` were available separately from QC for things like this)
[00:13:57] *** Joins: hololeap (~hololeap@user/hololeap)
[00:14:04] <reumeth> geekosaur: For me that will be fine. I like the fact that QuickCheck has lots of different generator like (valid utf8 strings, random bytestrings etc)
[00:14:36] *** Parts: [Kalisto] (~nico@user/kalisto/x-8968079) (The Lounge - https://thelounge.chat)
[00:14:45] <reumeth> I'm just struggling to see where/how I can use the arbitrary from QC
[00:15:16] *** Quits: _ht (~quassel@82-169-194-8.biz.kpn.net) (Remote host closed the connection)
[00:15:36] *** Quits: hippoid_ (~hippoid@c-98-220-13-8.hsd1.il.comcast.net) (Client Quit)
[00:15:48] *** Joins: hippoid (~hippoid@c-98-220-13-8.hsd1.il.comcast.net)
[00:16:04] *** Joins: ByronJohnson (~bairyn@50-250-232-19-static.hfc.comcastbusiness.net)
[00:16:08] *** Joins: HuGoDrOcHa (~hugodroch@179.158.241.142)
[00:17:13] <reumeth> Right now my fuzz function is stupid and is of the form: fuzz (Array x) = map fuzz x; fuzz (Number x) = Number (x + 1) etc.
[00:17:14] *** Joins: vicfred (~vicfred@user/vicfred)
[00:17:57] <reumeth> I'm pretty sure I can't just add QC.arbitrary stuff inside here, at least the signature of fuzz will have to change, right?
[00:18:45] <geekosaur> yes
[00:19:06] <geekosaur> https://hackage.haskell.org/package/QuickCheck-2.14.2/docs/Test-QuickCheck-Gen.html#t:Gen
[00:19:29] <geekosaur> it's a monad, so your signature becomes Aeson.Value -> Gen Aeson.Value
[00:19:47] <HuGoDrOcHa> ?
[00:20:10] <geekosaur> …yes?
[00:20:19] <HuGoDrOcHa> yes
[00:20:23] *** Joins: alx741 (~alx741@186.178.108.244)
[00:20:51] <reumeth> geekosaur: Hm, ok I'll try to see if I can get any further. Thanks
[00:20:53] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:dcf1:6c47:4df:1ed1) (Remote host closed the connection)
[00:21:48] *** Parts: HuGoDrOcHa (~hugodroch@179.158.241.142) ()
[00:24:06] *** Quits: hololeap (~hololeap@user/hololeap) (Ping timeout: 276 seconds)
[00:24:31] *** Joins: hololeap (~hololeap@user/hololeap)
[00:25:46] *** Joins: zincy_ (~zincy@2a00:23c8:970c:4801:4518:ab7b:975d:2f47)
[00:28:03] *** Quits: myShoggoth (~myShoggot@97-120-85-195.ptld.qwest.net) (Ping timeout: 264 seconds)
[00:28:07] *** Joins: acidjnk (~acidjnk@p200300d0c7271e823d8ddc81d8ce7005.dip0.t-ipconnect.de)
[00:29:31] *** Joins: hololeap_ (~hololeap@user/hololeap)
[00:29:53] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Remote host closed the connection)
[00:30:34] *** Joins: myShoggoth (~myShoggot@97-120-85-195.ptld.qwest.net)
[00:31:15] *** Quits: hololeap (~hololeap@user/hololeap) (Ping timeout: 276 seconds)
[00:32:03] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:dcf1:6c47:4df:1ed1)
[00:33:09] *** Quits: tromp (~textual@dhcp-077-249-230-040.chello.nl) (Quit: My iMac has gone to sleep. ZZZzzz…)
[00:33:46] *** Joins: hololeap (~hololeap@user/hololeap)
[00:34:47] *** Quits: Inoperable (~PLAYER_1@fancydata.science) (Excess Flood)
[00:35:45] *** Quits: jippiedoe (~david@2a02-a44c-e14e-1-3aa6-b22c-891-c248.fixed6.kpn.net) (Quit: Leaving)
[00:35:48] *** Quits: hololeap_ (~hololeap@user/hololeap) (Ping timeout: 276 seconds)
[00:36:04] *** Joins: Kaiepi (~Kaiepi@156.34.44.192)
[00:37:05] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[00:39:08] *** Quits: blackcap (~blackcap@144.89-10-135.nextgentel.com) (Remote host closed the connection)
[00:40:09] *** Joins: vysn (~vysn@user/vysn)
[00:42:54] *** Joins: pfurla (~pfurla@2804:14d:5c81:4104:d09a:3c35:dab9:95ad)
[00:44:14] *** Joins: Inoperable (~PLAYER_1@fancydata.science)
[00:45:00] *** Quits: trcc (~trcc@2-104-60-169-cable.dk.customer.tdc.net) (Remote host closed the connection)
[00:46:03] *** Quits: hippoid (~hippoid@c-98-220-13-8.hsd1.il.comcast.net) (Ping timeout: 264 seconds)
[00:46:05] *** Joins: kupi (uid212005@id-212005.hampstead.irccloud.com)
[00:46:23] *** Joins: tromp (~textual@dhcp-077-249-230-040.chello.nl)
[00:48:09] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[00:49:46] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[00:51:06] *** Quits: nvmd (~nvmd@user/nvmd) (Quit: Later, nerds.)
[00:52:07] *** Joins: justsomeguy (~justsomeg@user/justsomeguy)
[00:53:30] *** Joins: Midjak (~Midjak@82-65-111-221.subs.proxad.net)
[00:53:36] *** Joins: hippoid (~hippoid@c-98-220-13-8.hsd1.il.comcast.net)
[00:53:47] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[00:54:08] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:dcf1:6c47:4df:1ed1) (Remote host closed the connection)
[01:01:03] <jle`> anyone familiar with the Cabal library? is there any -> IO PackageDescription function to get the description of the current project?
[01:01:07] *** Quits: tromp (~textual@dhcp-077-249-230-040.chello.nl) (Quit: My iMac has gone to sleep. ZZZzzz…)
[01:01:36] *** Quits: reumeth (~reumeth@user/reumeth) (Ping timeout: 245 seconds)
[01:02:45] <jle`> hm i guess i could use Distribution.Parsec (maybe?) but i'd still need to get the cabal file name
[01:03:35] <sclv> jle`: yeah given a file there's easy functions to read the package description
[01:03:58] <jle`> hm, is there a way to get the name of the current project? is that what that Paths_ module is for?
[01:04:03] <sclv> but not sure what the easy function is to pick the "right" filename
[01:04:47] <maerwald> https://hackage.haskell.org/package/Cabal-3.6.2.0/docs/Distribution-PackageDescription-Parsec.html#v:parseGenericPackageDescriptionMaybe
[01:04:51] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[01:06:21] <jle`> whoa there's both a Distribution.PackageDescription and a Description.Types.PackageDescription, thanks for the tip
[01:06:52] <jle`> hm, is the ByteString option here the contents of the file?
[01:06:57] <jle`> s/option/argument
[01:06:57] <sclv> yes
[01:07:27] <jle`> ah, thanks
[01:07:33] <jle`> hm i guess i just have to find a way to get the project name then
[01:07:43] <jle`> or i guess i could glob for *.cabal
[01:08:44] <maerwald> https://hackage.haskell.org/package/filepattern
[01:11:10] *** Quits: zincy_ (~zincy@2a00:23c8:970c:4801:4518:ab7b:975d:2f47) (Remote host closed the connection)
[01:11:38] <jle`> ooh thanks :)
[01:11:43] *** Quits: pfurla (~pfurla@2804:14d:5c81:4104:d09a:3c35:dab9:95ad) (Quit: gone to sleep. ZZZzzz…)
[01:13:15] <jle`> and then i can use it with getDatadir
[01:13:17] <sclv> the cabal logic as i understand it is it just looks for a unique file and throws if there's more than one and none is explicitly specified
[01:14:51] <jle`> yeah, i meant i can use it to get the directory to search in
[01:15:04] <sclv> jle`: ooh, found it! https://hackage.haskell.org/package/Cabal-3.6.2.0/docs/Distribution-Simple-Utils.html#v:defaultPackageDesc
[01:15:34] <jle`> :O
[01:15:51] <jle`> sweet, thanks a bunch
[01:17:24] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[01:20:35] *** Quits: hiruji (~hiruji@user/hiruji) (Quit: ZNC 1.8.2 - https://znc.in)
[01:20:50] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[01:20:52] *** Joins: hiruji (~hiruji@user/hiruji)
[01:21:28] *** Joins: pfurla (~pfurla@2804:14d:5c81:4104:d09a:3c35:dab9:95ad)
[01:23:51] *** Quits: hippoid (~hippoid@c-98-220-13-8.hsd1.il.comcast.net) (Ping timeout: 264 seconds)
[01:24:04] *** Joins: hippoid (~hippoid@c-98-220-13-8.hsd1.il.comcast.net)
[01:24:10] *** Joins: yauhsien (~yauhsien@61-231-30-221.dynamic-ip.hinet.net)
[01:25:56] <[itchyjunk]> Hi, wondering if this makes sense `if fst(divMod n 10) == 0 then snd(divMod n 10) else snd(divMod n 10)`
[01:26:38] <[itchyjunk]> i know logically its not brushed up yet, just syntactically
[01:27:14] <dsal> That's weird in several ways.
[01:27:29] <dsal> The lack of space between the function and the parameter is super weird, let me get past that one.
[01:27:40] <dsal> But then like, why are you using divMod if you just want div or mod?
[01:28:13] <[itchyjunk]> i want to do mod based on the value of div but i haven't sorted that out in my head yet
[01:28:46] *** Quits: justsomeguy (~justsomeg@user/justsomeguy) (Quit: WeeChat 3.3)
[01:28:46] <dsal> > let f n = let (d,m) = divMod n 10 in if d == 0 then m else m  in    f 11
[01:28:47] <lambdabot>  1
[01:28:50] *** Quits: yauhsien (~yauhsien@61-231-30-221.dynamic-ip.hinet.net) (Ping timeout: 260 seconds)
[01:29:41] *** Joins: burnsidesLlama (~burnsides@dhcp168-042.wadham.ox.ac.uk)
[01:29:51] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:dcf1:6c47:4df:1ed1)
[01:31:10] *** Quits: ByronJohnson (~bairyn@50-250-232-19-static.hfc.comcastbusiness.net) (Remote host closed the connection)
[01:31:25] <monochrom> Saying "divMod n 10 Beetlejuice" 3 times in a row is a serious violation of DRY. In any language.
[01:31:50] *** Quits: alzgh (alzgh@user/alzgh) (Remote host closed the connection)
[01:32:11] *** Joins: alzgh (alzgh@user/alzgh)
[01:32:21] <maerwald> people still follow DRY? :p
[01:32:36] <dsal> I get into arguments about repetition a lot.  I *kind* of get them, but the arguments are often readability vs. building a new (local) abstraction that makes it clear that it's actually the same thing three times and not some typos or something.
[01:32:47] <dsal> I slow down a lot more when I see what looks like a copy and paste.
[01:32:52] <maerwald> I always start with repetition.
[01:33:03] <monochrom> You know, I have long realized that if a desirable principle has a name, it means people are refusing to do it. >:)
[01:33:11] <maerwald> and then after a while, an abstraction will show itself (or it doesn't)
[01:33:23] <monochrom> Yes I'm OK with that.
[01:33:27] <dsal> Oh sure.  There's nothing wrong with repeating yourself until you realize that copying and pasting the same thing a bunch might be a pain.
[01:33:38] <monochrom> But this one is way too basic.
[01:34:04] <dsal> The one I just looked at was just three copies of some code and a review comment about adding a comment as to when we should add new ones.  I'm like, "Hey, can we just make this a list?"
[01:34:33] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[01:34:36] <monochrom> There are very obvious, staring at your face repetitions that even 1st-year students can easily recognize.
[01:34:50] <dsal> One of the bits of code that was copied and pasted a lot (because that's good for tests!) needed to be updated for a change I made this morning and I figured out that the original one that got copied a lot *also* had a bug.
[01:35:34] <maerwald> I've long ceased to be that invested in stuff when being paid for coding
[01:35:39] <monochrom> What you're referring to are less obvious cases that really takes experience to see, and even then you can argue about pros and cons.
[01:35:40] <dsal> haha
[01:36:16] *** Quits: mc47 (~mc47@xmonad/TheMC47) (Remote host closed the connection)
[01:36:54] <dsal> monochrom: that's kind of the approach I'm taking.  I'll probably catch flak for even spending time on this, but let me write up a big thing describing why copying and pasting this is bad and various benefits of putting stuff in a list instead of unrolling the loop in a big do block.
[01:37:15] <maerwald> monochrom: many coders I've seen start thinking about the abstraction too early... when they should really just copy paste. And that leads to really shitty abstractions
[01:37:32] <dsal> Yeah, I've definitely been in those code bases as well.
[01:37:57] <dsal> that's part of the reason there's knee-jerk in the opposite direction here.  Previous Prelude was insanely large.  No idea where anything came from and all kinds of weird stuff happening.
[01:38:22] <monochrom> That is caused by OOP education. Or at least bad OOP education. (Perhaps there is good OOP education too.)
[01:38:36] <dsal> That's why I qualified (local) abstraction.  They love naming various values with extremely long names and stuff.  But then strategies just get copied and pasted.
[01:39:11] <[itchyjunk]> Every second I confuse myself more.
[01:39:22] <dsal> [itchyjunk]: It's called "learning"
[01:39:25] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[01:39:27] <[itchyjunk]> lol
[01:39:33] <[itchyjunk]> In that case, great!
[01:39:46] <monochrom> 1st-year OOP courses, the bad ones, tend to start with "What's wrong with this struct?  Person = { String name; int age; }"
[01:39:52] <maerwald> Code is so unpredictable... you think up something in your head and when you try it, it turns out totally different, because of a bazillion reasons (unexpected API, bugs, corner cases).
[01:39:53] <monochrom> Really, there is nothing wrong.
[01:40:24] <maerwald> the crap has to settle first
[01:40:42] <dsal> Yep, don't disagree.
[01:40:45] <maerwald> like a dough
[01:40:47] <monochrom> Then the party line reveals the model answer: "It is not hidden behind an interface. What if there are future changes? The right thing to do is getter methods."
[01:41:15] <[itchyjunk]> I have a function and it does a tiny step of what i want. i want to save each of the mini results in a list. i should have a small working function then stitch it so that this another function uses this function and puts the result in a list. then have a third function that uses this whole thing multiple times?
[01:41:16] <monochrom> That kind of brainwashing in 1st-year courses is why people have premature abstractions. "abstractions"
[01:41:17] <dsal> "What if there are future changes" is an argument both for and against abstractions, depending on who's proposing them.  :)
[01:41:48] <[itchyjunk]> I am in a first year OOP course @_@
[01:41:59] <maerwald> dsal: write code that's easy to delete.
[01:42:12] <dsal> Yep, I love deleting code.
[01:42:13] <monochrom> Really, even if there are future changes, you don't even know which direction it will be in. The expression problem implies that if you enable one, you disable the other.
[01:42:43] <maerwald> yes, so better delete the previous code and start anew
[01:42:50] *** Joins: ees (~user@pool-108-18-30-46.washdc.fios.verizon.net)
[01:42:53] *** Joins: tromp (~textual@dhcp-077-249-230-040.chello.nl)
[01:43:08] <maerwald> but people still think that starting anew is too expensive
[01:43:16] <maerwald> it is if your code is hard to delete
[01:43:18] <geekosaur> sunk code fallacy?
[01:43:35] <dsal> I argue that fairly tall code with 8 levels of indentation in nested case blocks (with two space indentation) is kind of hard to follow and should be clearer.  It's completely local, but like, I have to think too hard to follow it.  Just give the structure a bit of name.
[01:44:00] <monochrom> However! DRY is still a good principle, and does not conflict with what I said. I am just against premature interfaces.
[01:44:40] <maerwald> monochrom: well, but dry doesn't focus on abstraction. Deduplication and abstraction is not the same
[01:44:43] <dsal> I got it down to a square of around 6 levels of indentation and 6-8 lines tall with the whole thing on a page so you can see it all at once.
[01:45:18] <maerwald> sometimes, when you see repetition, the abstraction is really somewhere else
[01:45:50] <maerwald> but because we're educated with DRY, we focus on removing the repetition
[01:50:46] <[itchyjunk]> if i have a function returning r and i do (r):[], is this list created locally within that context and lost later on?
[01:51:05] <[itchyjunk]> i.e should i be `let myList = []` and using myList to hold the returns?
[01:51:32] <monochrom> myList will always be [].
[01:51:52] <monochrom> even s/be/stay as/
[01:51:58] <monochrom> For eternity!
[01:52:08] <[itchyjunk]> oh rigiht.. r:myList creates a new list with [r] 
[01:52:16] * [itchyjunk] recursively rips hair
[01:52:17] <monochrom> Yes.
[01:54:05] <monochrom> This is why in my course I open with "think 'function' as in math functions, not C functions; think algebra, not control flow".
[01:54:30] <[itchyjunk]> You teach haskell?
[01:54:41] <jle`> oh now i have to convert Cabal's Extension type to haskell-src-ext's extension type
[01:54:47] * jle` . o ( read . show )
[01:55:07] *** Quits: michalz (~michalz@185.246.204.33) (Remote host closed the connection)
[01:55:08] <[itchyjunk]> I thought i'd do a simple exercise to feel I have been productive. Instead i've put myself into a hole :D
[01:55:30] <monochrom> And don't worry, I don't really say that thinking C functions and control flow are wrong, I just say that you'll have a better time at the beginning if you think my way. After you're experienced, it doesn't matter then.
[01:56:03] <monochrom> Well, strictly speaking, I'm supposed to teach principles of programming languages. I end up doing more Haskell than I should.
[01:56:07] *** Joins: jmorris (uid433911@id-433911.hampstead.irccloud.com)
[01:56:22] *** Quits: Alleria (~textual@user/alleria) (Ping timeout: 268 seconds)
[01:56:46] <[itchyjunk]> I'm in a "Accelerated object oriented programming" class
[01:56:49] <maerwald> interesting, I always think in control flow, no matter the language
[01:56:58] <[itchyjunk]> we use java
[01:57:24] *** Quits: nf (~n@monade.li) (Quit: Fairfarren.)
[01:57:32] <monochrom> And what does the unaccelerated one do?
[01:58:12] *** Joins: nf (~n@monade.li)
[01:58:41] <dsal> I learned Java after learning Eiffel (from Object Oriented Software Construction).  Most of the important OO principles from eiffel are exactly the opposite of java best practices.
[01:58:44] <[itchyjunk]> the unaccelerated one is shorter course. this one is supposidly 3 fused into one. principle of programming, intro to OOP and intro to Java
[01:58:54] <maerwald> wow
[01:59:04] <[itchyjunk]> i just needed the principles class but they weren't offering one so i was thrown into this one :(
[01:59:07] * [itchyjunk] is no programmer
[01:59:22] <maerwald> learning principles of programming through java? ok.
[01:59:39] <[itchyjunk]> I don't think my uni offers anything else to start off with
[01:59:47] <[itchyjunk]> ive heard there are graduate level FP classes
[01:59:53] <maerwald> well, you'll know what getters and setters are pretty soon
[02:00:01] <[itchyjunk]> I know those!
[02:00:04] <maerwald> and that's all you need to know for java
[02:00:09] <[itchyjunk]> lol
[02:00:12] <monochrom> haha
[02:00:26] <monochrom> I can't say there is nothing else to know.
[02:00:37] *** Quits: chele (~chele@user/chele) (Remote host closed the connection)
[02:00:44] <monochrom> But my students do behave like that's all they have learned. >:)
[02:00:48] <dsal> You also get to learn about building factories.
[02:01:10] <dsal> Anyone can construct a new object, but not just anyone can build a whole factory that constructs objects.
[02:01:19] <[itchyjunk]> if i do r:[] to create [r], how to i refrence to this [r] list ?
[02:01:25] <[itchyjunk]> its lost in memory somewhere?
[02:01:26] <geekosaur> and then FactoryFactory, etc.
[02:01:36] <dsal> [itchyjunk]: how do you want to reference it?
[02:01:42] <dsal> Also, [r] is a fine way to make [r]
[02:01:46] <maerwald> well, you can also learn about Java generics and then realize they're just difficult to understand implicit casts
[02:01:49] <monochrom> If I provide "data X = MkX Int X" on an assignment, many of my students code up "getInt :: X -> Int" and "getNext: X -> X" right away.
[02:01:59] <[itchyjunk]> i have a function doing things and i want to store the return values somewhere
[02:02:07] <dsal> monochrom: They don't start writing lenses?
[02:02:15] <monochrom> Nah.
[02:02:28] <maerwald> xD
[02:02:31] <dsal> [itchyjunk]: It's really best to start by thinking of what you want your functions to look like.  Type signatures do most of the work for you when you let them.
[02:02:36] <monochrom> Heh
[02:03:05] <maerwald> store the return value? You could use a database
[02:03:10] <maerwald> start with beam
[02:03:20] <monochrom> No, use a file system... >:)
[02:03:20] <geekosaur> "store" isn't really a thing in Haskell. "pass" is
[02:03:37] <maerwald> file system is too easy.. you want to debug SQL errors when you start your application
[02:03:40] <geekosaur> think functions, not "variables"
[02:04:16] <monochrom> No no, you want to worry about file locking when you start your application...
[02:04:27] <maerwald> well, don't ship for windows
[02:04:32] * dsal uses a software transactional filesystem
[02:04:33] <geekosaur> use sqlite, then you get to deal with both! }:>
[02:04:44] <monochrom> \∩/
[02:04:50] <dsal> Actually, that's true, I just use SQLite.
[02:04:55] <dsal> Except now I'm using Postgres.
[02:05:06] <dsal> Totally forgot how much I like postgres.
[02:05:13] <maerwald> such webscale
[02:05:19] <monochrom> The Pilgrim's Postgres.
[02:05:47] <maerwald> [itchyjunk]: was that helpful? :)
[02:05:55] <monochrom> The Pilsqlim's Postgres.
[02:05:56] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:dcf1:6c47:4df:1ed1) (Remote host closed the connection)
[02:06:03] <[itchyjunk]> If i apply f to n, i get (a,b). i want b to go in a list. then apply f to a and get (c,d), then i want d in the same list and apply f to c ad nausium
[02:06:15] *** Joins: zebrag (~chris@user/zebrag)
[02:06:39] <dsal> What are `n`, `a`, and `b`?
[02:07:07] <monochrom> Perhaps you can write a simple recursion for it.
[02:07:14] <dsal> That's kind of a strangely shaped thing.  Are you writing unfoldr?
[02:07:18] <dsal> :t unfoldr
[02:07:19] <lambdabot> (b -> Maybe (a, b)) -> b -> [a]
[02:07:19] <maerwald> [itchyjunk]: the way you'd do that is that your "store" is an argument to your recursive function
[02:07:22] <[itchyjunk]> n is the input i give f, f maps n to (a,b)
[02:07:27] <monochrom> I can write it for you but I think it's within your reach.
[02:07:31] <[itchyjunk]> yes i need recursion but nothign is simple :D
[02:07:35] <maerwald> when your recursive function terminates, you return the "store"
[02:07:46] <monochrom> OK, beginner-level.
[02:08:16] <dsal> [itchyjunk]: Can you write the actual type signature?     I'm not sure I understand     `:: n -> (a,b)` -- those types have to come from somewhere.
[02:08:22] <geekosaur> what defines "terminates" here?
[02:08:48] <maerwald> crashes with an SQL error
[02:08:54] <[itchyjunk]> if the first value in the tuple is 0
[02:09:00] <[itchyjunk]> let me think of the signature
[02:09:02] <dsal> So it's an Int?
[02:09:18] <[itchyjunk]> yes n , a , b are ints
[02:09:23] <dsal> Ooh.  that's very different
[02:09:36] <dsal> `:: Int -> (Int, Int)`
[02:10:12] <monochrom> But that's for f. And this f may be already given.
[02:10:26] <[itchyjunk]> thats what happens in each step but i want to get a [Int] after all is said an done
[02:10:30] <monochrom> In question is another function, call it g, that uses f again and again etc.
[02:10:45] <[itchyjunk]> okay, then i was kinda in the right track
[02:11:02] <[itchyjunk]> i have a function that applies this once that i have called helperf
[02:11:22] <dsal> Yeah, doing it just once is great.  Then you can just keep calling it.
[02:11:24] <dsal> > let f n = (n + 1, n * 2)  in     iterate (f . snd) (1,1)
[02:11:25] <lambdabot>  [(1,1),(2,2),(3,4),(5,8),(9,16),(17,32),(33,64),(65,128),(129,256),(257,512)...
[02:11:31] *** Joins: random-jellyfish (~random-je@user/random-jellyfish)
[02:11:38] <dsal> > let f n = (n + 1, n * 2)  in    snd <$>  iterate (f . snd) (1,1)
[02:11:40] <lambdabot>  [1,2,4,8,16,32,64,128,256,512,1024,2048,4096,8192,16384,32768,65536,131072,2...
[02:11:52] <dsal> That's a dumb function.  I assume yours isn't.  heh
[02:12:07] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Remote host closed the connection)
[02:12:18] <monochrom> Here is a hint. You probably haven't thought that you can do this:
[02:12:20] <monochrom> @src map
[02:12:20] <lambdabot> map _ []     = []
[02:12:20] <lambdabot> map f (x:xs) = f x : map f xs
[02:12:37] <monochrom> Sleep on that. You don't always need an "accumulator".
[02:13:31] <dsal> @src unfoldr
[02:13:31] <lambdabot> unfoldr f b = case f b of
[02:13:31] <lambdabot>     Just (a, b') -> a : unfoldr f b'
[02:13:31] <lambdabot>     Nothing      -> []
[02:13:38] <dsal> ooh.  I didn't think that'd work.
[02:13:54] *** Joins: geekosaur (~geekosaur@xmonad/geekosaur)
[02:14:44] <dsal> @src iterate
[02:14:44] <lambdabot> iterate f x = x : iterate f (f x)
[02:15:32] <dsal> We should just teach fix and get rid of all this recursion stuff.
[02:15:34] <dsal> @src fix
[02:15:34] <lambdabot> fix f = let x = f x in x
[02:16:04] *** Joins: lavaman (~lavaman@98.38.249.169)
[02:19:48] <monochrom> That also gets rids of a lot of the weaker students. >:)
[02:19:54] <dsal> heh
[02:20:32] <monochrom> I am very uncomfortable with getting rid of weak students because I don't want my class average to be too damn high!
[02:20:33] *** Quits: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de) (Ping timeout: 250 seconds)
[02:20:51] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 264 seconds)
[02:22:34] <zero> get rid of map and just fold
[02:22:34] <dsal> Do you get paid by a measurable amount of education you put into people?
[02:22:44] <dsal> I like fold
[02:22:58] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[02:22:58] <monochrom> Do you go one step further, switch to untyped lambda calculus, so that you don't even need that version of fix? >:)
[02:23:19] <maerwald> dsal: ahaha
[02:23:30] <monochrom> No, my pay is not tied to the class average.
[02:24:17] <monochrom> But sometimes if the class average is too damn high or too damn low, the department chair needs to ask me why. And really, I don't know!
[02:24:35] <dsal> monochrom: The Musical
[02:25:45] <zero> i think education suffers from the observer effect. you cant grade students without the fact that you're grading them has an effect on their performance
[02:26:13] <zero> and it's a big effect
[02:26:17] <xerox> if it doesn't have an effect why would they enroll
[02:26:36] <monochrom> What's wrong with that?
[02:26:56] *** Joins: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be)
[02:26:57] <zero> because universities print some papers that get them jobs
[02:27:25] <monochrom> Don't tell me naïve left-wing answers such as "after graudation they are never graded again".
[02:27:30] <zero> it's not inherently wrong
[02:28:04] *** Quits: DNH (~DNH@2a02:8108:1100:16d8:64b0:a3f2:ec06:e597) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[02:28:14] <EvanR> this is where curves come in
[02:28:16] <zero> it's just impossible not to let it often get in the way of things
[02:28:21] <EvanR> the great equalizer
[02:29:04] <geekosaur> this is all kinda offtopic by now…
[02:29:08] <maerwald> zero: grades are a concept from military. There it's used to distinguish the people who perform best under *pressure*. Because that's what matters there.
[02:29:17] <arahael> maerwald: hey, before i switch to rust for my alpine rpi3, is there anything else i could do to get haskell running?  the ghcup stuff has missing symbols even if i find and satisfy the libraries.
[02:29:56] <monochrom> Perhaps forsake alpine?
[02:30:32] *** Joins: DNH (~DNH@2a02:8108:1100:16d8:64b0:a3f2:ec06:e597)
[02:30:36] <[itchyjunk]> @where paste
[02:30:36] <lambdabot> Help us help you: please paste full code, input and/or output at e.g. https://paste.tomsmeding.com
[02:31:11] <arahael> monochrom: i ultimately want to make static binaries, which means musl.
[02:31:28] <arahael> and i would prefer not to have to set up and maintain a cross compiler.
[02:31:32] *** Quits: gehmehgeh (~user@user/gehmehgeh) (Quit: Leaving)
[02:31:34] <[itchyjunk]> my function g seems to be the place where it all goes wrong
[02:31:35] <[itchyjunk]> https://paste.tomsmeding.com/hngcugQu
[02:32:51] *** Quits: hippoid (~hippoid@c-98-220-13-8.hsd1.il.comcast.net) (Ping timeout: 245 seconds)
[02:33:12] *** Joins: hippoid (~hippoid@c-98-220-13-8.hsd1.il.comcast.net)
[02:33:20] <[itchyjunk]> does any of it makes sense?
[02:33:28] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:dcf1:6c47:4df:1ed1)
[02:33:38] <[itchyjunk]> maybe time for a break, it might magically come to me later
[02:33:40] <monochrom> In the then branch, "helper (f2 n)" gives you a tuple.
[02:33:53] <monochrom> In the else branch, "f1 n" gives you a single number.
[02:34:01] <monochrom> Which one do you want?
[02:34:06] *** Quits: aliosablack (~chomwitt@2a02:587:dc14:4600:12c3:7bff:fe6d:d374) (Ping timeout: 245 seconds)
[02:34:11] <[itchyjunk]> ahhhh
[02:34:20] <monochrom> Or did you just forgot a recursive call to g in the then branch.
[02:34:51] <[itchyjunk]> i want f2 ( helper ( f2 n) )
[02:35:30] <[itchyjunk]> i think it should all be one recursive line once i figure this out xD i was hoping building it up one line at a time like this would make my brain figure it out
[02:35:38] <monochrom> f2 doesn't want a tuple either.
[02:36:13] <maerwald> arahael: ask in #ghc if someone has bootstrapped a musl aarch64 GHC
[02:36:17] <zero> [itchyjunk]: type signatures/annotations are your friend
[02:36:21] <monochrom> TBH I am surprised that it is not simply "then f2 n else f1 n"
[02:36:41] <monochrom> or "then g (f2 n) else f1 n"
[02:37:10] <zero> @type divMod
[02:37:11] <lambdabot> Integral a => a -> a -> (a, a)
[02:37:13] *** Quits: ees (~user@pool-108-18-30-46.washdc.fios.verizon.net) (Ping timeout: 256 seconds)
[02:37:21] *** Quits: dhouthoo (~dhouthoo@178-117-36-167.access.telenet.be) (Quit: WeeChat 3.3)
[02:37:24] <monochrom> f2 already uses helper, so what's "helper (f2 n)" doing there?
[02:37:27] <arahael> maerwald: thanks for the tip!  will do that in a moment.
[02:37:31] <jle`> using parseGenericPackageDescription seems to drop the library/executable/etc. portions of the cabal file and only gets the top level metadata
[02:37:34] <jle`> i wonder if i'm missing something
[02:37:51] *** Quits: hippoid (~hippoid@c-98-220-13-8.hsd1.il.comcast.net) (Ping timeout: 245 seconds)
[02:39:51] <dsal> [itchyjunk]: it's pretty important to think about the type signature first, I find.  It might seem "harder" but it gets you there sooner and with better error messages.
[02:40:39] *** Joins: Tuplanolla (~Tuplanoll@91-159-69-50.elisa-laajakaista.fi)
[02:40:41] <EvanR> yeah there's probably a reason the type signature doesn't go after the code xD
[02:41:16] *** Joins: hippoid (~hippoid@c-98-220-13-8.hsd1.il.comcast.net)
[02:42:16] <jle`> ah it's under CondLibrary
[02:42:39] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Remote host closed the connection)
[02:43:06] *** Joins: cosimone (~user@2001:b07:ae5:db26:a7aa:8027:6b4e:2fb3)
[02:43:41] *** Quits: takuan (~takuan@178-116-218-225.access.telenet.be) (Remote host closed the connection)
[02:44:14] *** Quits: qwedfg (~qwedfg@user/qwedfg) (Read error: Connection reset by peer)
[02:45:46] *** Quits: hippoid (~hippoid@c-98-220-13-8.hsd1.il.comcast.net) (Ping timeout: 245 seconds)
[02:45:46] *** Quits: xff0x (~xff0x@2001:1a81:52ae:a700:2e71:8ba4:bf99:ed92) (Ping timeout: 245 seconds)
[02:46:47] *** Joins: hippoid (~hippoid@c-98-220-13-8.hsd1.il.comcast.net)
[02:46:47] *** Joins: xff0x (~xff0x@2001:1a81:52ae:a700:790f:4bf3:6d42:a0ab)
[02:47:28] *** Quits: ubert (~Thunderbi@p548c9fcb.dip0.t-ipconnect.de) (Read error: Connection reset by peer)
[02:47:41] *** Joins: qwedfg (~qwedfg@user/qwedfg)
[02:48:10] *** Joins: ubert (~Thunderbi@p200300ecdf0ba2d77c1bfff2a135bb9e.dip0.t-ipconnect.de)
[02:48:16] *** Quits: ubert (~Thunderbi@p200300ecdf0ba2d77c1bfff2a135bb9e.dip0.t-ipconnect.de) (Remote host closed the connection)
[02:49:44] *** Quits: alzgh (alzgh@user/alzgh) (Remote host closed the connection)
[02:51:41] *** Quits: Midjak (~Midjak@82-65-111-221.subs.proxad.net) (Quit: This computer has gone to sleep)
[02:52:22] *** Quits: __monty__ (~toonn@user/toonn) (Quit: leaving)
[02:54:57] *** Joins: alzgh (alzgh@user/alzgh)
[02:58:30] *** Quits: tromp (~textual@dhcp-077-249-230-040.chello.nl) (Quit: My iMac has gone to sleep. ZZZzzz…)
[03:01:42] *** Quits: xff0x (~xff0x@2001:1a81:52ae:a700:790f:4bf3:6d42:a0ab) (Remote host closed the connection)
[03:01:58] *** Joins: xff0x (~xff0x@2001:1a81:52ae:a700:8aec:b385:dec1:cc56)
[03:02:27] *** Joins: jinsun__ (~quassel@user/jinsun)
[03:02:39] *** Quits: max22- (~maxime@2a01cb0883359800a5783feecd0598ff.ipv6.abo.wanadoo.fr) (Remote host closed the connection)
[03:02:51] *** Joins: cosimone` (~user@5.170.240.253)
[03:03:03] *** Quits: pfurla (~pfurla@2804:14d:5c81:4104:d09a:3c35:dab9:95ad) (Quit: gone to sleep. ZZZzzz…)
[03:04:06] *** Quits: cosimone (~user@2001:b07:ae5:db26:a7aa:8027:6b4e:2fb3) (Ping timeout: 245 seconds)
[03:04:12] *** Quits: pwug (~pwug@user/pwug) (Ping timeout: 268 seconds)
[03:04:30] *** Quits: jinsun (~quassel@user/jinsun) (Ping timeout: 260 seconds)
[03:06:12] *** Joins: hippoid_ (~hippoid@c-98-220-13-8.hsd1.il.comcast.net)
[03:06:36] *** Joins: pfurla (~pfurla@2804:14d:5c81:4104:2d7f:4f3b:6a60:c865)
[03:07:49] *** Quits: hippoid (~hippoid@c-98-220-13-8.hsd1.il.comcast.net) (Ping timeout: 256 seconds)
[03:12:44] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:5cca:96d9:7234:6761) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[03:14:11] <[itchyjunk]> alright, i'll do types first
[03:14:19] <[itchyjunk]> i generally seem to always get the signature wrong :P
[03:14:33] <[itchyjunk]> the ghci has negatively reinforced my brain to avoid it
[03:15:49] <geekosaur> work on the signatures, then
[03:15:56] <[itchyjunk]> ;_;
[03:16:11] <geekosaur> once you can express an appropriate signature, the function may well "write itself"
[03:16:35] <[itchyjunk]> ah, i'll stop avoiding signatures !
[03:17:01] *** Quits: Jing (~hedgehog@2604:a840:3::1094) (Remote host closed the connection)
[03:17:36] *** Joins: Jing (~hedgehog@2604:a840:3::1094)
[03:17:48] <monochrom> You can let us take a look at your candidate type sig and invite comments.
[03:21:48] <jle`> type signatures are like automatic rubber ducks
[03:23:15] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:dcf1:6c47:4df:1ed1) (Remote host closed the connection)
[03:24:56] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:dcf1:6c47:4df:1ed1)
[03:28:16] *** Quits: acidjnk (~acidjnk@p200300d0c7271e823d8ddc81d8ce7005.dip0.t-ipconnect.de) (Ping timeout: 245 seconds)
[03:28:35] *** Quits: vysn (~vysn@user/vysn) (Ping timeout: 250 seconds)
[03:31:36] *** Quits: random-jellyfish (~random-je@user/random-jellyfish) (Ping timeout: 256 seconds)
[03:32:08] <[itchyjunk]> If I want a function f to take a list containing type Int, do stuff and return an Int to me, my signature should be f :: [Int] -> Int right?
[03:32:16] <monochrom> Yes.
[03:33:36] <[itchyjunk]> If head gives me the first element of a list and tail gives me a list without the head, i could `f [n] = head([n]) * (f tail([n]))`, couldn't I?
[03:34:03] *** Quits: edwardk (sid47016@haskell/developer/edwardk) (Ping timeout: 264 seconds)
[03:34:03] *** Quits: gaze___ (sid387101@helmsley.irccloud.com) (Ping timeout: 264 seconds)
[03:34:03] *** Quits: T_S_ (sid501726@uxbridge.irccloud.com) (Ping timeout: 264 seconds)
[03:34:11] <dsal> That's a bit confusing.  You probably meant `f n`
[03:34:19] <dsal> > head [1]
[03:34:20] <lambdabot>  1
[03:34:54] *** Joins: gaze___ (sid387101@id-387101.helmsley.irccloud.com)
[03:34:54] <monochrom> > tail [1]
[03:34:56] <lambdabot>  []
[03:35:23] <dsal> > head []
[03:35:24] <lambdabot>  *Exception: Prelude.head: empty list
[03:35:37] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[03:35:39] <dsal> best to avoid head altogether.
[03:35:47] <monochrom> And an example that really says "[n]".
[03:35:58] <monochrom> > let n = 1 in head([n])
[03:36:00] <lambdabot>  1
[03:36:06] <monochrom> > let n = 1 in tail([n])
[03:36:07] <lambdabot>  []
[03:36:14] <dsal> [itchyjunk]: Your function is defined only for lists that contain exactly one number.
[03:36:59] <[itchyjunk]> oh
[03:37:14] *** Joins: edwardk (sid47016@haskell/developer/edwardk)
[03:37:19] *** Joins: T_S_ (sid501726@id-501726.uxbridge.irccloud.com)
[03:39:48] <dsal> SPJ is joining Epic Games?  That seems odd.
[03:40:47] <[itchyjunk]> hum, in theory that idea would have worked but head doesn't like empty list unfortunately
[03:40:58] <dsal> [itchyjunk]: which that?
[03:41:16] <dsal> It was specified to work only if there's exactly one item in a list.
[03:41:36] <[itchyjunk]> f n = head n * (f tail n)
[03:41:43] <dsal> Ah.  Yeah, don't use head.  :)
[03:41:59] <dsal> Also, at some point you need to terminate.  You can just make an extra function head for `f [] = ...`
[03:42:00] <monochrom> head n * f (tail n)
[03:42:11] <monochrom> And also yeah, what to do with the empty list?
[03:42:18] <dsal> I don't know what the answer should be for an empty list, though.
[03:42:24] <monochrom> And then, overall, just use pattern matching.
[03:43:00] <dsal> `f [] = answerWithEmptyList`    `f (x:xs) = x * f xs`
[03:43:38] <dsal> This is a catamorphism.  Earlier you were making an anamorphism.  Can't keep up!
[03:44:22] <[itchyjunk]> Don't I declare a signature `f :: [Int] -> Int` ? let me post the error
[03:45:06] <[itchyjunk]> https://paste.tomsmeding.com/4BHzQHrh
[03:45:24] <[itchyjunk]> Does previous declarations of f linger on and cause issue?
[03:45:49] <dsal> Not enough context.
[03:45:50] <monochrom> Did you merely enter "f :: [Int] -> Int" at the ghci prompt?  Please don't.
[03:46:08] <[itchyjunk]> Yes I was being lazy this time :S
[03:46:21] <dsal> Laziness will cost you a lot of time and make everything harder.
[03:46:28] <dsal> It's the thunk cost fallacy.
[03:46:30] <monochrom> Please put complete code in a file and use :load or :reload
[03:46:31] <EvanR> you can only use head if you know the list isn't empty
[03:46:34] <EvanR> which happens
[03:46:55] <monochrom> There is a way to enter multi-line code at the ghci prompt. But it doesn't scale. I refuse to teach it.
[03:47:17] <monochrom> (What happens if you need to go back 5 lines and change something?)
[03:47:33] <dsal> I can't even hit an up arrow in ghci.
[03:48:35] <monochrom> (And the XY problem of "how do I save this ghci session because I entered 100000 lines of code at the prompt".)
[03:48:54] <dsal> "DO NOT REBOOT"
[03:49:30] <[itchyjunk]> in case of empty list, just pretend it's 1? 
[03:49:31] <[itchyjunk]> https://paste.tomsmeding.com/EtJmtzZ8
[03:49:44] <dsal> At work one day someone was talking about a legacy system that they worked on that required a custom keyboard because whoever did it made a physical macro system in the physical keyboard itself and nobody could figure out what it did.
[03:49:54] <dsal> [itchyjunk]: You need to put the empty one first.
[03:50:03] <[itchyjunk]> oh 
[03:50:11] <dsal> Also, your parenthesis are weird.  :p
[03:50:32] *** Quits: forell (~forell@user/forell) (Ping timeout: 240 seconds)
[03:51:14] <dsal> `f n = head(n) * (f (tail n) )` is  just `f n = head n * f (tail n)`   Or  `f (x:xs) = x * f xs`
[03:51:19] <[itchyjunk]> Right i was going to ask about that, math way of writing it would be head(n) * tail(f(n)) right?
[03:51:31] <dsal> No, those parens are confusing, especially the way you have them spaced.
[03:52:14] <dsal> It works, but it's probably going to get confusing fast when you try to make a function that needs more than one input.
[03:52:41] <dsal> > let plus a b = a + b in     plus(1)(2)
[03:52:42] <lambdabot>  3
[03:53:04] <[itchyjunk]> x:xs would add x to the list xs and give me a new list right? but somehow you're extracting the first element of a list and passing whats remaining
[03:53:16] *** Joins: Guest|86 (~Guest|86@49.34.109.242)
[03:53:22] <dsal> No, it's taking the head of the list and naming it x, and then taking the tail of the list and naming it xs.
[03:53:31] <dsal> It's destructuring the list.
[03:53:34] <[itchyjunk]> so a space after each function and if its nested function, a parenthesis for the nest?
[03:53:48] <[itchyjunk]> ahh
[03:53:52] <geekosaur> there is a difference between patterns and expressions. but they look the same
[03:54:06] <dsal> They're kind of symmetrical.
[03:54:11] <geekosaur> because they're doing the same thing "in reverse" from each other
[03:54:19] <[itchyjunk]> ah
[03:55:12] <dsal> The parens are to group things.  You need `(tail n)` because the alternative would be passing a function named `tail` to your function `f` and that's not the type it takes.
[03:55:38] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:dcf1:6c47:4df:1ed1) (Remote host closed the connection)
[03:55:50] <[itchyjunk]> ah
[03:58:22] <Guest|86> A noob question. GHCup tui shows my GHC version at 8.10.7 and there is a recommended tag attached is well. Should I stick it with it or update to GHC 9.2.1? I installed all this to get Darcs version control. I don't have any specific user scenario beside that.
[03:58:44] <dsal> Can't you just install darcs?
[03:59:01] <dsal> nix-shell -p darcs    # :)
[03:59:10] <sm> Guest|86: no, 8.10.7 is fine
[03:59:39] <Guest|86> dsal are no binaries for Linux there. What is nix-shell?
[03:59:59] <dsal> A (really great) can of worms.
[04:00:10] <dsal> It provides me darcs on macos and linux.
[04:00:33] <Guest|86> sm Okay. Thank you for the info my friend.
[04:01:15] <Guest|86> dsal Where can I get that can of worms?
[04:01:38] <dsal> https://nixos.org -- you can probably run just the nix stuff on your local system.
[04:01:58] <dsal> It's used for a lot of dev environments because of things like "I just want to install darcs"
[04:02:14] <sm> if we must speak of nix.. https://ianthehenry.com/posts/how-to-learn-nix is really good
[04:02:29] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:dcf1:6c47:4df:1ed1)
[04:02:42] *** Quits: nuh^ (~nuh@68.101.63.101) (Remote host closed the connection)
[04:03:02] <sm> (not for you Guest|86, don't let me distract your from your goal)
[04:03:21] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 256 seconds)
[04:04:05] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[04:05:15] <Guest|86> Ah, a package manager? sm That definitely doesn't look like it's for me as the author states on the line no.3 "Five years later, I’m still running NixOS. And I still have no idea how it works." ;)
[04:05:38] <geekosaur> that makes most people :þ
[04:05:49] *** Quits: kupi (uid212005@id-212005.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[04:05:54] *** Quits: jmorris (uid433911@id-433911.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[04:06:20] <geekosaur> tbh I'd use cabal (or stack but I personally don't like stack)
[04:06:27] <sm> Guest|86: smart. Ignore dsal :)
[04:06:58] <geekosaur> you can get either one via ghcup tui and then it's "cabal install darcs" (or "stack install darcs")
[04:07:06] *** Quits: Tuplanolla (~Tuplanoll@91-159-69-50.elisa-laajakaista.fi) (Quit: Leaving.)
[04:08:40] <Guest|86> @sm Who is dsal? I don't know him! ;)  Jokin'
[04:08:40] * lambdabot beats up Who is dsal? I don't know him! ;)  Jokin'
[04:09:14] * int-e eyes lambdabot suspiciously
[04:09:20] <geekosaur> @botsmack
[04:09:20] <lambdabot> :)
[04:09:21] <sm> it seems darcs is best packaged for stackage lts-16.31 (ghc 8.8.4). But this should work:
[04:09:21] <sm> stack --resolver lts-18.17 install darcs constraints-0.12 cryptonite-0.27
[04:09:51] <Guest|86> geekosaur I installed it via cabal. dacs is really cool.
[04:09:54] <sm> but I imagine stack would probably install it's own copy of ghc 8.10.7
[04:09:56] *** Joins: fernand (~fernand@179.156.35.4)
[04:10:03] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 264 seconds)
[04:10:06] <sm> Guest|86: seriously ? that was fast
[04:10:13] <int-e> @list slap
[04:10:13] <lambdabot> slap provides: slap smack
[04:10:26] <geekosaur> you didn't know that?
[04:10:41] <int-e> Does that work because `sm` is a unique prefix, maybe? I thought the editing distance cut-off was 2.
[04:10:51] *** Quits: burnsidesLlama (~burnsides@dhcp168-042.wadham.ox.ac.uk) (Remote host closed the connection)
[04:10:53] <monochrom> Yeah sounds like it.
[04:11:29] <Guest|86> sm I installed it a month back. Just ran GHCup for the  kicks and noticed the updates and came here crying for help ;)
[04:11:44] <int-e> Eh it's a mystery for another day. I may also be misremembering.
[04:11:47] <sm> it sounds like you already have current darcs then ?
[04:11:49] <monochrom> Although, I didn't know that "@smack" exists. Now I have ideas...
[04:11:54] <monochrom> @snack monochrom
[04:11:54] * lambdabot hits monochrom with a hammer, so they breaks into a thousand pieces
[04:12:13] <int-e> @slurp lambdabot
[04:12:13] * lambdabot puts on her slapping gloves, and slaps lambdabot
[04:12:16] <Guest|86> sm Yes, A happy Darcs user. 
[04:12:20] <monochrom> \∩/ Large Monochrom Collider
[04:13:10] <sm> great! sounds like you're all set
[04:13:25] <sm> are you a https://hub.darcs.net user ?
[04:14:04] <Guest|86> This nix-shell mentioned by dsal seems pretty much like a long lost brother of Guix => https://guix.gnu.org/
[04:14:23] <geekosaur> they're closely related, yes
[04:14:30] <geekosaur> guix is more or less gnu nix
[04:14:50] <sm> but nix has so much more mindshare
[04:14:55] <geekosaur> except guix uses guile/scheme instead of a custom language for its derivations
[04:14:58] *** Quits: hiruji (~hiruji@user/hiruji) (Read error: Connection reset by peer)
[04:15:25] *** Joins: forell (~forell@user/forell)
[04:15:25] <Guest|86> sm No I am familiar with darcs hub but I a yet to try it. Currently using Darcs exclusively for my solo pet projects. 
[04:15:38] <sm> nice
[04:17:09] <Guest|86> sm So I only upgrade GHC when GHCup puts recommended tag beside the higher version?
[04:17:33] <sm> there's no need to upgrade it until you need the newer version for something
[04:17:54] <sm> but sure, keeping the recommended one installed seems good
[04:19:31] <sm> some things you build would require ghc 8.10+ now. But darcs moves at a slower pace.
[04:19:56] *** Quits: cosimone` (~user@5.170.240.253) (Ping timeout: 245 seconds)
[04:20:17] <sm> well, that sounds like a criticism. Darcs has good support for a wide range of ghc versions.
[04:20:52] <geekosaur> moving at a slower pace than ghc is not necessarily a bad thing, given that ghc can move pretty violently
[04:21:09] <sm> yup
[04:21:13] <geekosaur> much of the ecosystem hasn't caught up to any ghc9, for example
[04:21:41] <sm> in effect ghc major releases are really preview releases it seems
[04:21:59] <geekosaur> well, any x.x.1 seems to be
[04:22:14] *** Quits: fernand (~fernand@179.156.35.4) (Quit: Connection closed)
[04:22:27] *** Joins: fernand (~fernand@179.156.35.4)
[04:23:56] <Guest|86> sm Okay! Cool! Thank you so very much sm geekosaur and dsal for bearing with my noob questions and helping me out. Wishing you all a great week ahead. 
[04:25:21] *** Quits: raehik1 (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Ping timeout: 245 seconds)
[04:26:13] *** Quits: Guest|86 (~Guest|86@49.34.109.242) (Quit: Guest|86)
[04:30:11] *** Quits: hololeap (~hololeap@user/hololeap) (Remote host closed the connection)
[04:30:19] *** Quits: mmhat (~mmh@55d44c37.access.ecotel.net) (Quit: WeeChat 3.3)
[04:38:52] *** Quits: connrs (~connrs@user/connrs) (Read error: Connection reset by peer)
[04:39:23] *** Joins: connrs (~connrs@user/connrs)
[04:40:27] *** Quits: albet70 (~xxx@2400:8902::f03c:92ff:fe60:98d8) (Remote host closed the connection)
[04:44:26] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Remote host closed the connection)
[04:44:55] <[itchyjunk]> If `(x:xs)` means first element and rest of the list, why doesn't it mean first and second element of a tuple?
[04:45:45] <geekosaur> becuase tuples aren't lists
[04:45:56] <geekosaur> (x,y) destructs a 2-tuple
[04:46:01] <[itchyjunk]> ahh
[04:46:24] <geekosaur> but this does not generalize to 3-tuples, for example: you need (x,y,z) there
[04:46:33] *** Joins: albet70 (~xxx@2400:8902::f03c:92ff:fe60:98d8)
[04:46:36] *** Quits: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be) (Ping timeout: 245 seconds)
[04:46:45] <[itchyjunk]> that makes sense
[04:47:27] <dsal> You can also do `(x:y:xs)` but that won't match if you don't have at least two items in your list.
[04:47:53] <dsal> I list is a thing followed by a list.  Sometimes there's an empty item at the end.
[04:48:01] <dsal> I spelled A wrong.
[04:50:55] <energizer> in some languages the first parameter of foldl is (a -> b -> a) and in others it's (a -> b -> b). this is annoying and i dont see any reason for it. is there some history behind this?
[04:51:59] <monochrom> I don't know that history, but my understanding of human nature says big endian vs little endian all over again.
[04:52:43] <geekosaur> my understanding is haskell follows natural associativity, other languages prefer consistency or other things
[04:53:00] <dsal> The good news is that don't use foldl probably.
[04:53:41] <dsal> I use foldr most of the time and it wants the current value which I call x and the accumulator value which I call o so I just have to remember foldr is xo
[04:53:46] <energizer> dont use foldl is only for haskell i think
[04:54:06] <dsal> It's not definitely always correct in Haskell, either.
[04:54:16] <monochrom> Well, it's "don't use foldr" in other languages so there.
[04:54:39] <dibblego> what other language?
[04:54:57] *** Joins: johnw (~johnw@76-234-69-149.lightspeed.frokca.sbcglobal.net)
[04:55:28] *** Joins: hiruji (~hiruji@user/hiruji)
[04:55:28] <energizer> (foldl (lambda (new old) (cons new old)) '()  (list 1 2 3)) ;;  '(3 2 1)
[04:55:39] <monochrom> Have you also surveyed how many people do Church encoding of the natural numbers as "\z s -> s (s z)", how many do "\s z -> s (s z)", and how many take the stance "but zero is not a natural number"?
[04:56:12] *** Quits: ChaiTRex (~ChaiTRex@user/chaitrex) (Quit: ChaiTRex)
[04:56:31] <monochrom> which is the equivalent of big endian, little endian, and "I don't eat eggs".
[04:56:52] *** Joins: jbox (~jbox@user/jbox)
[04:57:56] *** Joins: ChaiTRex (~ChaiTRex@user/chaitrex)
[05:06:37] *** Quits: jushur (~human@user/jushur) (Quit:  ¯\_(ツ)_/¯)
[05:08:27] <[itchyjunk]> I think i have a slightly better grasp of my task. i know how to extract the first and last digit. i think it's extracting all the digits along the way but I am not sure. :x
[05:08:51] *** Quits: machinedgod (~machinedg@135-23-192-217.cpe.pppoe.ca) (Ping timeout: 264 seconds)
[05:09:32] <[itchyjunk]> https://paste.tomsmeding.com/9NOa8oz6
[05:09:40] <[itchyjunk]> I have even snuck some recursion in there.
[05:11:14] <dsal> You can't get to the last element of a list without going through the list.
[05:11:39] *** Joins: ByronJohnson (~bairyn@50-250-232-19-static.hfc.comcastbusiness.net)
[05:12:08] <dsal> [itchyjunk]: Why does `g` take a tuple?
[05:12:34] *** Joins: [_] (~itchyjunk@user/itchyjunk/x-7353470)
[05:12:48] <[_]> oops, internet issue
[05:12:58] <[_]> well it's not a list, last digit of some n in N
[05:13:14] <[_]> for first digit? if it's 12345, i can get the 5 and 1
[05:13:20] <dsal> Yeah, I'm not entirely sure what the goal is.  I can only read what the code does.  ;)
[05:13:34] <[_]> i just need to store each iteration to end up with [1,2,3,4,5]
[05:13:39] *** Quits: myShoggoth (~myShoggot@97-120-85-195.ptld.qwest.net) (Ping timeout: 264 seconds)
[05:13:46] <[_]> goal is to xyz -> [x,y,z]
[05:14:44] <[_]> awe
[05:14:52] <[_]> i had a thought but didn't pan out
[05:14:55] <dsal> Not entirely sure what you mean.  What's the divMod for?
[05:15:33] <[_]> well i need mod to extract each digit. but then i won't know when to stop. so the idea was to use divMod to get (x,y) and stop when x is 0
[05:16:09] *** Quits: vicfred (~vicfred@user/vicfred) (Quit: Leaving)
[05:16:09] <dsal> Well, [x] is a list with only one item in it, so that'd be the last one.
[05:16:39] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Ping timeout: 264 seconds)
[05:16:55] <dsal> I don't quite get what the tuple is for.
[05:17:25] <dsal> I keep thinking about how I'd do that which is not how I'd tell someone how to do it. heh
[05:18:12] <[_]> yeah this isn't the best way probably but i feel like its a way enough
[05:18:27] <[_]> right, i'm getting the last (first) digit only
[05:18:57] <[_]> i need a way to say, take the last list i was using instead of start with a new empty list and append it i think
[05:20:07] <[_]> oh maybe i pass the list along as a parameter possibly, but that complicates the signature
[05:20:43] <dsal> Well, the easiest thing to consider is special casing the first item and then just looking for the last.  The problem is that you've got a lot of weird room for partiality.
[05:21:18] *** Quits: DNH (~DNH@2a02:8108:1100:16d8:64b0:a3f2:ec06:e597) (Quit: Textual IRC Client: www.textualapp.com)
[05:21:51] <dsal> If you didn't have to worry about empty lists, it'd be slightly easier.
[05:24:27] <dsal> This is roughly impossible to read, but something like this:
[05:24:27] <dsal> > let fnl (x:xs) = let go [l] = (x,l); go (_:xs) = go xs  in go (x:xs)  in fnl [1..11]
[05:24:28] <lambdabot>  (1,11)
[05:24:34] <dsal> But it's not defined for empty lists.
[05:25:25] <[_]> hmm my starting digits isn't a list it's just some random number
[05:29:01] <dsal> > fmap digitToInt . show $ 146432
[05:29:03] <lambdabot>  [1,4,6,4,3,2]
[05:29:36] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[05:30:03] <[_]> :O
[05:31:36] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 268 seconds)
[05:31:54] <monochrom> [startingdigit] is a list.
[05:34:02] *** Quits: jkaye (~jkaye@2601:281:8300:7530:c25c:6460:bfbf:33d6) (Ping timeout: 240 seconds)
[05:34:24] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[05:34:24] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[05:34:24] *** Joins: wroathe (~wroathe@user/wroathe)
[05:35:16] *** Quits: unit73e (~emanuel@2001:818:e8dd:7c00:32b5:c2ff:fe6b:5291) (Remote host closed the connection)
[05:39:53] *** Quits: Clint (~Clint@user/clint) (Ping timeout: 250 seconds)
[05:40:01] *** Joins: Clint (~Clint@user/clint)
[05:40:09] *** Joins: hiruji` (~hiruji@2606:6080:1002:4:88e7:e893:3692:25d2)
[05:41:51] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 264 seconds)
[05:43:39] *** Quits: hiruji (~hiruji@user/hiruji) (Ping timeout: 264 seconds)
[05:46:28] *** Quits: learner-monad (~ehanneken@user/learner-monad) (Quit: WeeChat 3.3)
[05:48:25] *** Joins: myShoggoth (~myShoggot@97-120-85-195.ptld.qwest.net)
[05:58:03] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[05:58:03] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[05:58:03] *** Joins: wroathe (~wroathe@user/wroathe)
[06:02:51] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 264 seconds)
[06:05:54] *** Quits: zaquest (~notzaques@5.130.79.72) (Remote host closed the connection)
[06:06:02] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[06:06:58] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.3)
[06:08:28] *** Joins: Cajun (~Cajun@user/cajun)
[06:11:10] *** Quits: neurocyte0132889 (~neurocyte@user/neurocyte) (Ping timeout: 260 seconds)
[06:11:51] *** Quits: xff0x (~xff0x@2001:1a81:52ae:a700:8aec:b385:dec1:cc56) (Ping timeout: 264 seconds)
[06:12:08] *** Joins: jollygood2 (~bc8165b6@217.29.117.252)
[06:13:15] *** Joins: xff0x (~xff0x@2001:1a81:52f2:7200:d4ab:2c51:aa8:c20a)
[06:13:30] *** Joins: dyeplexer (~dyeplexer@user/dyeplexer)
[06:13:59] <[_]> wait a second, starting digit is a list?
[06:14:30] <c_wraith> that's not what monochrom said
[06:14:37] <[_]> oh
[06:14:57] *** Quits: fernand (~fernand@179.156.35.4) (Quit: Connection closed)
[06:15:30] <jollygood2> > let digits 0 = []; digits x = mod x 10 : digits (div x 10) in digits 123
[06:15:32] <lambdabot>  [3,2,1]
[06:15:50] <jollygood2> just reverse the result, and possibly also handle negative input and 0
[06:16:24] *** Joins: fernand (~fernand@179.156.35.4)
[06:18:02] *** Joins: lavaman (~lavaman@98.38.249.169)
[06:18:29] <[_]> hmm
[06:19:11] <monochrom> [3] is a list.
[06:19:14] *** Joins: haruhimywife[m] (~kmatrixth@2001:470:69fc:105::1:3b2f)
[06:19:18] <monochrom> 3 may be your starting digit.
[06:22:26] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 245 seconds)
[06:26:26] *** Joins: random-jellyfish (~random-je@user/random-jellyfish)
[06:28:52] *** Quits: abhixec (~abhixec@c-67-169-139-16.hsd1.ca.comcast.net) (Remote host closed the connection)
[06:29:43] <dsal> oooh, is that what you're trying to do with divMod?
[06:31:09] <[_]> yes lol
[06:31:22] <[_]> idk if i should abandom what i was doing or not now
[06:31:39] <dsal> Nah, do your thing.  I just didn't understand what divMod was doing there.  heh
[06:31:59] *** Quits: johnw (~johnw@76-234-69-149.lightspeed.frokca.sbcglobal.net) (Quit: ZNC - http://znc.in)
[06:32:42] *** Joins: hololeap (~hololeap@user/hololeap)
[06:36:57] <jollygood2> [_] sorry for spoiling it!
[06:38:50] *** Joins: FinnElija (~finn_elij@user/finn-elija/x-0085643)
[06:39:56] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 245 seconds)
[06:40:24] <[_]> naw all good, i'm doing something much weirder haha
[06:40:29] <[_]> i'll poke at it more tomorrow
[06:46:38] *** Quits: myShoggoth (~myShoggot@97-120-85-195.ptld.qwest.net) (Ping timeout: 260 seconds)
[06:50:50] *** Joins: myShoggoth (~myShoggot@97-120-85-195.ptld.qwest.net)
[06:51:48] *** Joins: finn_elija (~finn_elij@user/finn-elija/x-0085643)
[06:51:48] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Killed (NickServ (Forcing logout FinnElija -> finn_elija)))
[06:51:48] *** finn_elija is now known as FinnElija
[06:54:38] *** Joins: mbuf (~Shakthi@27.58.141.80)
[06:55:31] *** Joins: Feuermagier_ (~Feuermagi@154.28.188.153)
[06:58:09] <sm> what's the deal with happy failing to build because it can't find happy, again ?
[06:58:17] <sm> eg: https://github.com/simonmichael/hledger/runs/4294639782?check_suite_focus=true#step:14:1512
[06:58:33] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Ping timeout: 268 seconds)
[06:58:35] <sm> I just started seeing this recently. It looks pretty dumb. Recently I fixed it locally by installing happy first from outside the project directory. Someone here told me to add build-tools: happy to .cabal, I think ?
[07:02:04] <sm> haskell tools are annoying >:|
[07:02:11] *** Joins: img (~img@user/img)
[07:04:06] *** Quits: hippoid_ (~hippoid@c-98-220-13-8.hsd1.il.comcast.net) (Ping timeout: 245 seconds)
[07:04:27] *** Joins: nabaiste^ (~nabaiste@68.101.63.101)
[07:04:44] *** Quits: gdown (~gavin@h69-11-248-109.kndrid.broadband.dynamic.tds.net) (Remote host closed the connection)
[07:06:11] *** Joins: zaquest (~notzaques@5.130.79.72)
[07:06:33] *** Joins: hippoid (~hippoid@c-98-220-13-8.hsd1.il.comcast.net)
[07:08:58] *** Quits: [_] (~itchyjunk@user/itchyjunk/x-7353470) (Remote host closed the connection)
[07:13:15] *** Quits: terrorjack (~terrorjac@2a01:4f8:1c1e:509a::1) (Quit: The Lounge - https://thelounge.chat)
[07:13:45] *** Quits: hippoid (~hippoid@c-98-220-13-8.hsd1.il.comcast.net) (Ping timeout: 256 seconds)
[07:14:29] *** Joins: terrorjack (~terrorjac@2a01:4f8:1c1e:509a::1)
[07:15:13] *** Quits: ian` (~user@ool-45779fe5.dyn.optonline.net) (Remote host closed the connection)
[07:17:54] *** Quits: myShoggoth (~myShoggot@97-120-85-195.ptld.qwest.net) (Ping timeout: 260 seconds)
[07:19:25] *** Quits: td_ (~td@94.134.91.148) (Ping timeout: 256 seconds)
[07:20:02] *** Quits: xkuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[07:21:09] *** Joins: td_ (~td@94.134.91.203)
[07:29:55] *** Joins: myShoggoth (~myShoggot@97-120-85-195.ptld.qwest.net)
[07:30:23] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 250 seconds)
[07:30:43] *** Quits: cjb (~cjb@user/cjb) (Quit: rcirc on GNU Emacs 29.0.50)
[07:30:48] *** Joins: yauhsien (~yauhsien@61-231-30-221.dynamic-ip.hinet.net)
[07:32:15] *** Joins: waleee (~waleee@h-82-196-111-63.NA.cust.bahnhof.se)
[07:33:10] <sm> answer: a packaging bug in the recent happy release, avoid it by using happy 1.20
[07:33:46] *** Quits: fernand (~fernand@179.156.35.4) (Ping timeout: 260 seconds)
[07:35:38] *** Quits: yauhsien (~yauhsien@61-231-30-221.dynamic-ip.hinet.net) (Ping timeout: 260 seconds)
[07:41:36] *** Quits: zebrag (~chris@user/zebrag) (Quit: Konversation terminated!)
[07:43:24] *** Joins: notzmv (~zmv@user/notzmv)
[07:48:02] *** Quits: alzgh (alzgh@user/alzgh) (Remote host closed the connection)
[07:59:39] *** Quits: ralu (~ralu@static.211.245.203.116.clients.your-server.de) (Ping timeout: 256 seconds)
[08:08:28] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[08:09:53] *** Joins: Nolrai2 (~Nolrai2@c-76-27-202-218.hsd1.or.comcast.net)
[08:11:01] *** Quits: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[08:12:42] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[08:12:42] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[08:12:42] *** Joins: wroathe (~wroathe@user/wroathe)
[08:16:05] *** Quits: shapr (~user@pool-100-36-247-68.washdc.fios.verizon.net) (Ping timeout: 256 seconds)
[08:17:15] *** Quits: benin (~benin@183.82.179.164) (Ping timeout: 264 seconds)
[08:17:51] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 264 seconds)
[08:18:18] *** Joins: ralu (~ralu@static.211.245.203.116.clients.your-server.de)
[08:21:21] *** Joins: benin (~benin@183.82.179.164)
[08:23:05] *** Joins: jmorris (uid433911@id-433911.hampstead.irccloud.com)
[08:30:22] *** Joins: Codaraxis (~Codaraxis@user/codaraxis)
[08:30:46] *** Quits: Pent (sid313808@id-313808.lymington.irccloud.com) (Ping timeout: 245 seconds)
[08:33:18] *** Joins: Pent (sid313808@id-313808.lymington.irccloud.com)
[08:36:30] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[08:39:22] *** Joins: fernand (~fernand@179.156.35.4)
[08:39:39] *** Quits: waleee (~waleee@h-82-196-111-63.NA.cust.bahnhof.se) (Quit: WeeChat 3.3)
[08:40:13] *** Joins: deadmarshal (~deadmarsh@95.38.112.23)
[08:42:35] <sm> well, it's not all rosy in rust land: cargo install tries to build 200 packages, number 160 fails, and next time it rebuilds them all again
[08:42:47] <sm> also, just one at a time. I wonder why.
[08:44:51] *** Quits: deadmarshal (~deadmarsh@95.38.112.23) (Ping timeout: 264 seconds)
[08:47:47] *** Quits: catern (~sbaugh@2604:2000:8fc0:b:a9c7:866a:bf36:3407) (Ping timeout: 264 seconds)
[08:52:02] *** Quits: puke (~puke@user/puke) (Quit: puke)
[08:52:12] *** Joins: bollu (uid233390@id-233390.helmsley.irccloud.com)
[08:54:28] *** Quits: fernand (~fernand@179.156.35.4) (Ping timeout: 268 seconds)
[08:56:15] *** Joins: whatsupdoc (uid509081@hampstead.irccloud.com)
[08:58:29] *** jinsun__ is now known as jinsun
[09:01:57] *** Joins: reumeth (~reumeth@user/reumeth)
[09:03:43] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Remote host closed the connection)
[09:03:47] *** Quits: slowButPresent (~slowButPr@user/slowbutpresent) (Quit: leaving)
[09:03:53] *** Joins: FinnElija (~finn_elij@user/finn-elija/x-0085643)
[09:04:58] *** Quits: pfurla (~pfurla@2804:14d:5c81:4104:2d7f:4f3b:6a60:c865) (Ping timeout: 265 seconds)
[09:07:38] *** Quits: Nolrai2 (~Nolrai2@c-76-27-202-218.hsd1.or.comcast.net) (Ping timeout: 256 seconds)
[09:10:39] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 264 seconds)
[09:11:47] *** Quits: reumeth (~reumeth@user/reumeth) (Ping timeout: 250 seconds)
[09:15:00] *** Quits: random-jellyfish (~random-je@user/random-jellyfish) (Ping timeout: 256 seconds)
[09:16:58] *** Joins: deadmarshal (~deadmarsh@95.38.112.23)
[09:20:31] *** Joins: yauhsien (~yauhsien@61-231-30-221.dynamic-ip.hinet.net)
[09:25:22] *** Joins: jinsun__ (~quassel@user/jinsun)
[09:29:11] *** Joins: jinsun___ (~quassel@user/jinsun)
[09:29:37] *** Quits: jinsun (~quassel@user/jinsun) (Ping timeout: 268 seconds)
[09:30:55] *** Joins: jinsun (~quassel@user/jinsun)
[09:31:39] *** Quits: jinsun__ (~quassel@user/jinsun) (Ping timeout: 264 seconds)
[09:32:42] *** Joins: lavaman (~lavaman@98.38.249.169)
[09:34:03] *** Quits: jinsun___ (~quassel@user/jinsun) (Ping timeout: 264 seconds)
[09:34:50] *** Joins: pfurla (~pfurla@2804:14d:5c81:4104:1430:118d:f25f:43fa)
[09:36:55] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 250 seconds)
[09:38:55] *** Joins: takuan (~takuan@178-116-218-225.access.telenet.be)
[09:41:45] <arahael> I've got the x86_64 version of haskell installed and working, but it's x86_64, and I want the arm version...  How do I get the ARM version using ghcup?
[09:49:29] *** Joins: phma_ (phma@2001:5b0:211b:e388:ee5a:511e:22c4:3b06)
[09:51:12] *** Quits: lagash (lagash@lagash.shelltalk.net) (Ping timeout: 268 seconds)
[09:51:53] *** Quits: a1paca (~a1paca@user/a1paca) (Quit: ZNC 1.8.2 - https://znc.in)
[09:51:59] *** Joins: lagash (lagash@lagash.shelltalk.net)
[09:52:12] *** Joins: a1paca (~a1paca@user/a1paca)
[09:52:32] *** Quits: phma (phma@2001:5b0:211b:e388:ee5a:511e:22c4:3b06) (Ping timeout: 240 seconds)
[09:56:13] <arahael> Well, that was easy. I had to remove my ~/.ghcup and do it again.
[09:57:16] *** Quits: sm2n (~sm2n@user/sm2n) (Quit: Leaving)
[09:57:57] <arahael> *so much faster*. :)
[09:58:41] *** Joins: deadmarshal_ (~deadmarsh@95.38.113.89)
[09:59:58] *** Joins: aliosablack (~chomwitt@2a02:587:dc14:4600:12c3:7bff:fe6d:d374)
[10:00:53] *** Quits: aliosablack (~chomwitt@2a02:587:dc14:4600:12c3:7bff:fe6d:d374) (Remote host closed the connection)
[10:00:55] *** Quits: deadmarshal (~deadmarsh@95.38.112.23) (Ping timeout: 256 seconds)
[10:01:11] *** Joins: chomwitt (~chomwitt@2a02:587:dc14:4600:12c3:7bff:fe6d:d374)
[10:02:28] *** Joins: lavaman (~lavaman@98.38.249.169)
[10:08:38] *** phma_ is now known as phma
[10:10:15] <arahael> Still some warts, though, for instance "Warning: Couldn't figure out LLVM version!" when attempting to compile various libraries such as reflection or semigroups.
[10:10:59] <arahael> https://gist.github.com/arafangion/34176990e73ecbdf90139df68d0de627
[10:11:24] <arahael> That's for a straight: cabal install sdl2 --lib
[10:12:35] *** Joins: sm2n (~sm2n@user/sm2n)
[10:13:04] <arahael> Added as a comment what happens when I just cabal init, then cabal build.
[10:14:28] <arahael> Ah...  Found the issue. :(  My llvm version is too new: Apple clang version 13.0.0 (clang-1300.0.29.3)
[10:16:22] *** Joins: jonathanx (~jonathan@h-178-174-176-109.A357.priv.bahnhof.se)
[10:18:41] *** Quits: yauhsien (~yauhsien@61-231-30-221.dynamic-ip.hinet.net) (Ping timeout: 245 seconds)
[10:19:56] <arahael> Nevermind that, it's working perfectly.  My GHC was too old, even though I had just installed it.
[10:27:22] *** Quits: gnyeki (~gnyeki@li578-216.members.linode.com) (Ping timeout: 260 seconds)
[10:27:30] *** Joins: gnyeki (~gnyeki@li578-216.members.linode.com)
[10:32:12] *** Joins: DNH (~DNH@2a02:8108:1100:16d8:5c1e:444:cdf3:4e4)
[10:33:08] *** Quits: deadmarshal_ (~deadmarsh@95.38.113.89) (Ping timeout: 268 seconds)
[10:33:59] *** Joins: tromp (~textual@dhcp-077-249-230-040.chello.nl)
[10:35:34] *** Quits: Sgeo (~Sgeo@user/sgeo) (Read error: Connection reset by peer)
[10:41:38] *** Quits: jonathanx (~jonathan@h-178-174-176-109.A357.priv.bahnhof.se) (Remote host closed the connection)
[10:42:43] *** Quits: econo (uid147250@user/econo) (Quit: Connection closed for inactivity)
[10:55:12] *** Quits: mei (~mei@user/mei) (Read error: Connection reset by peer)
[10:55:12] *** Joins: jonathanx (~jonathan@h-178-174-176-109.A357.priv.bahnhof.se)
[10:56:05] *** Joins: gehmehgeh (~user@user/gehmehgeh)
[10:57:30] *** Joins: lortabac (~lortabac@2a01:e0a:541:b8f0:d444:3bcd:ae33:7f0)
[10:57:52] *** Quits: jonathanx (~jonathan@h-178-174-176-109.A357.priv.bahnhof.se) (Remote host closed the connection)
[11:00:09] *** Joins: jonathanx (~jonathan@h-178-174-176-109.A357.priv.bahnhof.se)
[11:03:34] *** Joins: catern (~sbaugh@cpe-98-7-229-235.nyc.res.rr.com)
[11:06:44] *** Quits: jmorris (uid433911@id-433911.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[11:07:12] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[11:09:49] <[exa]> Hecate: yeah, the "monolith" part defines a niche which is not even remotely a target of everyone (esp. tool devs and unixy people)
[11:12:26] *** Quits: xff0x (~xff0x@2001:1a81:52f2:7200:d4ab:2c51:aa8:c20a) (Ping timeout: 245 seconds)
[11:14:34] *** Joins: trcc (~trcc@2-104-60-169-cable.dk.customer.tdc.net)
[11:16:52] *** Joins: deadmarshal (~deadmarsh@95.38.113.89)
[11:17:52] *** Joins: xff0x (~xff0x@2001:1a81:52f2:7200:812:ece5:6349:588e)
[11:22:13] <Hecate> [exa]: well I'd say it's a precondition to what I said :P
[11:23:34] *** Quits: tromp (~textual@dhcp-077-249-230-040.chello.nl) (Quit: My iMac has gone to sleep. ZZZzzz…)
[11:27:26] *** Quits: deadmarshal (~deadmarsh@95.38.113.89) (Ping timeout: 245 seconds)
[11:33:31] *** Joins: deadmarshal (~deadmarsh@95.38.113.89)
[11:36:27] *** Quits: NiKaN (sid385034@helmsley.irccloud.com) (Ping timeout: 264 seconds)
[11:37:20] *** Quits: tzh (~tzh@c-24-21-73-154.hsd1.or.comcast.net) (Quit: zzz)
[11:38:30] *** Quits: NemesisD (sid24071@lymington.irccloud.com) (Ping timeout: 268 seconds)
[11:39:10] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:dcf1:6c47:4df:1ed1) (Remote host closed the connection)
[11:39:38] *** Quits: jollygood2 (~bc8165b6@217.29.117.252) (Quit: http://www.okay.uz/ (Session timeout))
[11:40:16] *** Joins: NiKaN (sid385034@helmsley.irccloud.com)
[11:40:21] *** Quits: jackdk (sid373013@cssa/jackdk) (Ping timeout: 245 seconds)
[11:41:34] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 260 seconds)
[11:41:35] *** Joins: jackdk (sid373013@cssa/jackdk)
[11:41:51] *** Quits: aarchi (sid486183@uxbridge.irccloud.com) (Ping timeout: 264 seconds)
[11:41:51] *** Quits: acertain (sid470584@hampstead.irccloud.com) (Ping timeout: 264 seconds)
[11:41:51] *** Quits: glowcoil (sid3405@tinside.irccloud.com) (Ping timeout: 264 seconds)
[11:42:35] *** Quits: edwardk (sid47016@haskell/developer/edwardk) (Ping timeout: 250 seconds)
[11:42:53] *** Joins: acertain (sid470584@id-470584.hampstead.irccloud.com)
[11:43:39] *** Quits: dmj` (sid72307@hampstead.irccloud.com) (Ping timeout: 264 seconds)
[11:43:41] *** Quits: mrianbloom (sid350277@id-350277.ilkley.irccloud.com) (Ping timeout: 245 seconds)
[11:44:15] *** Quits: tapas (sid467876@ilkley.irccloud.com) (Ping timeout: 264 seconds)
[11:44:51] *** Quits: idnar (sid12240@debian/mithrandi) (Ping timeout: 264 seconds)
[11:44:53] *** Joins: NemesisD (sid24071@lymington.irccloud.com)
[11:45:15] *** Joins: dmj` (sid72307@id-72307.hampstead.irccloud.com)
[11:45:27] *** Quits: elvishjerricco (sid237756@helmsley.irccloud.com) (Ping timeout: 264 seconds)
[11:45:39] *** Joins: glowcoil (sid3405@id-3405.tinside.irccloud.com)
[11:45:46] *** Joins: edwardk (sid47016@haskell/developer/edwardk)
[11:46:03] *** Quits: sclv (sid39734@haskell/developer/sclv) (Ping timeout: 264 seconds)
[11:46:26] *** Joins: aarchi (sid486183@id-486183.uxbridge.irccloud.com)
[11:46:52] *** Joins: mrianbloom (sid350277@id-350277.ilkley.irccloud.com)
[11:47:25] *** Joins: idnar (sid12240@debian/mithrandi)
[11:47:39] *** Joins: tapas (sid467876@id-467876.ilkley.irccloud.com)
[11:47:50] *** Joins: elvishjerricco (sid237756@id-237756.helmsley.irccloud.com)
[11:47:58] *** Joins: sclv (sid39734@haskell/developer/sclv)
[11:49:47] *** Quits: statusbot (~statusbot@ec2-34-198-122-184.compute-1.amazonaws.com) (Remote host closed the connection)
[11:49:53] *** Joins: statusbot3 (~statusbot@ec2-34-198-122-184.compute-1.amazonaws.com)
[11:58:15] *** Joins: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de)
[11:58:43] *** Quits: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de) (Read error: Connection reset by peer)
[11:59:00] <dminuoso> Do you folks make use of global IORefs in edge cases to save time and ergonomics?
[11:59:01] *** Joins: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de)
[11:59:44] <dminuoso> So far I have resisted every temptation and rather managed (semi-)global dependencies via a lot of boilerplate argument passing, or by using ReaderT - but Im writing a test suite at the moment where I cant trivially use ReaderT
[11:59:50] <dminuoso> And argument passing would become very annoying 
[11:59:51] *** Joins: michalz (~michalz@185.246.204.40)
[12:00:29] <c_wraith> the only times I've wanted a global mutable ref that I didn't find a better approach was when working with FFI to really poorly-written C libraries
[12:00:52] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[12:01:51] * dminuoso wishes hunit was written polymorphically over MonadUnliftIO :(
[12:02:22] <dminuoso> c_wraith: Interesting, how does that come into play with C libraries?
[12:03:16] <c_wraith> usually creating an MVar to act as a mutex because the C library was written to fail when used in concurrent environments
[12:05:08] *** Quits: trcc (~trcc@2-104-60-169-cable.dk.customer.tdc.net) (Remote host closed the connection)
[12:05:40] *** Joins: trcc (~trcc@2-104-60-169-cable.dk.customer.tdc.net)
[12:10:34] *** Quits: trcc (~trcc@2-104-60-169-cable.dk.customer.tdc.net) (Ping timeout: 265 seconds)
[12:11:01] *** Quits: whatsupdoc (uid509081@hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[12:11:44] *** Joins: yauhsien (~yauhsien@61-231-30-221.dynamic-ip.hinet.net)
[12:13:57] *** Quits: kritzefitz (~kritzefit@debian/kritzefitz) (Ping timeout: 265 seconds)
[12:15:55] *** Joins: kritzefitz (~kritzefit@debian/kritzefitz)
[12:16:12] <jackdk> dminuoso: I have been tempted to do this when I was first learning haskell, but have never done so. I don't feel tempted any more.
[12:16:34] *** Quits: yauhsien (~yauhsien@61-231-30-221.dynamic-ip.hinet.net) (Ping timeout: 260 seconds)
[12:17:17] <[exa]> dminuoso: time to free monads? :D
[12:19:18] *** Joins: ph88 (~ph88@2a02:8109:9e00:71d0:8486:2f47:1ad1:518f)
[12:23:31] *** Joins: fef (~thedawn@user/thedawn)
[12:23:41] *** Quits: deadmarshal (~deadmarsh@95.38.113.89) (Ping timeout: 245 seconds)
[12:26:29] *** Joins: machinedgod (~machinedg@135-23-192-217.cpe.pppoe.ca)
[12:27:44] *** Joins: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net)
[12:30:42] <jzsinatra> When you make software with Haskell, do you usually make whole software with haskell, or do you use some other language for example for GUI?
[12:32:14] *** Joins: cfricke (~cfricke@user/cfricke)
[12:33:51] *** Quits: DNH (~DNH@2a02:8108:1100:16d8:5c1e:444:cdf3:4e4) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[12:35:04] *** Joins: __monty__ (~toonn@user/toonn)
[12:35:14] <jle`> recently i've been doing my gui's in purescript
[12:35:14] <dminuoso> jzsinatra: For our problem domain, if we need to interact with other software we do it via FFI or via defined JSON based APIs.
[12:35:22] <[exa]> jzsinatra: depends on the software. I do mostly commandline & small networking tools where 100% haskell is okay, only sometimes calling C/C++ code for performance
[12:35:39] <dminuoso> jzsinatra: So in case of one API that is exposed to a web, we have even a separate django wrapper around our haskell based API
[12:36:01] <jle`> but there are a lot of nice native haskell ui libs too
[12:37:27] *** Joins: Guest9226 (~Guest92@178-78-205-86.customers.ownit.se)
[12:37:46] *** Joins: CiaoSen (~Jura@p200300c95716ce002a3a4dfffe84dbd5.dip0.t-ipconnect.de)
[12:38:51] *** Quits: sus (zero@user/zeromomentum) (Quit: the lounge - https://webirc.envs.net)
[12:39:20] *** Joins: sus (zero@user/zeromomentum)
[12:39:40] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[12:43:34] <jzsinatra> Very interesting.Thanks for the replies. I myself do develop some engineering related calculations tools for our team. Last time I did use GTK bindings for a data analysis software. For my current project I do have thought about alternatives. What I really like about Haskell, is that it allows me to think in the "equation domain". 
[12:44:16] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Ping timeout: 260 seconds)
[12:47:01] *** Joins: deadmarshal (~deadmarsh@95.38.113.89)
[12:47:28] *** Joins: allbery_b (~geekosaur@xmonad/geekosaur)
[12:47:28] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Killed (NickServ (GHOST command used by allbery_b)))
[12:47:31] *** allbery_b is now known as geekosaur
[12:48:45] *** Quits: pfurla (~pfurla@2804:14d:5c81:4104:1430:118d:f25f:43fa) (Quit: gone to sleep. ZZZzzz…)
[12:51:08] *** Joins: mc47 (~mc47@xmonad/TheMC47)
[12:54:48] *** Joins: kuribas (~user@ptr-25vy0iagc74l4rb6r6j.18120a2.ip6.access.telenet.be)
[12:56:12] *** Quits: hendi (sid489601@lymington.irccloud.com) (Ping timeout: 268 seconds)
[12:56:15] *** Quits: gonz_____ (sid304396@lymington.irccloud.com) (Ping timeout: 264 seconds)
[12:57:08] *** Joins: hendi (sid489601@id-489601.lymington.irccloud.com)
[12:57:46] *** Joins: acidjnk (~acidjnk@p200300d0c7271e823d8ddc81d8ce7005.dip0.t-ipconnect.de)
[12:59:31] *** Joins: gonz_____ (sid304396@id-304396.lymington.irccloud.com)
[13:00:48] *** Quits: bollu (uid233390@id-233390.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[13:08:24] <kritzefitz> There is this list of presumably dangerous Haskell functions (link follows) that among other things lists -XTupleSections as dangerous. I have trouble understanding the point made in that list and always found TupleSections quite harmless. Can someone speak from their experience of TupleSections and maybe enlighten me what is so dangerous about them?
[13:08:28] <kritzefitz> Link: https://github.com/NorfairKing/haskell-dangerous-functions#--language-tuplesections--
[13:09:35] <merijn> kritzefitz: People have weird and idiosyncratic beliefs
[13:09:58] <merijn> You wanna know the best part?
[13:10:13] <kritzefitz> Sure.
[13:10:27] <dminuoso> This is not a list of "presumably dangerous functions", its a list of things the author dislikes.
[13:10:45] <merijn> ah, wait, my ghci has TupleSections turned on by default, nevermind :p
[13:10:58] <dminuoso> This behavior of pumping out personal opinions as "facts" and "best practices" is really silly
[13:11:36] *** Quits: deadmarshal (~deadmarsh@95.38.113.89) (Ping timeout: 245 seconds)
[13:11:57] <dminuoso> The only thing that annoys me about TupleSections is that it isn't part of standard haskell already.
[13:12:08] <merijn> word
[13:12:10] <yushyin> ;)
[13:12:25] <merijn> the one function on that last I *truly* agree with is forkProcess
[13:13:10] <merijn> oh, the main argument for that is a reddit link to me ranting about it :D
[13:13:19] <merijn> Good
[13:13:20] <yushyin> gz? :D
[13:13:35] <merijn> I aspire to Dijkstra-immortality
[13:13:54] <merijn> If anyone is slightly terrified of me ranting at them any time they type fork() in their code, that's enough for me
[13:14:08] <kritzefitz> Thanks for clarifying! I was recently asked to remove TupleSections from default-extensions during a review, because of its appearance on that list and didn't want to dismiss that without investigating if there is some real argument against TupleSections.
[13:17:15] *** Quits: rubin55 (sid175221@id-175221.hampstead.irccloud.com) (Ping timeout: 264 seconds)
[13:17:15] *** Quits: SanchayanMaity (sid478177@hampstead.irccloud.com) (Ping timeout: 264 seconds)
[13:17:15] *** Quits: bjs (sid190364@user/bjs) (Ping timeout: 264 seconds)
[13:17:36] *** Quits: fef (~thedawn@user/thedawn) (Ping timeout: 276 seconds)
[13:17:41] <maerwald> kritzefitz: lol
[13:17:51] *** Quits: jackdk (sid373013@cssa/jackdk) (Ping timeout: 264 seconds)
[13:17:51] *** Quits: sa (sid1055@tinside.irccloud.com) (Ping timeout: 264 seconds)
[13:18:03] *** Joins: rubin55 (sid175221@id-175221.hampstead.irccloud.com)
[13:18:23] *** Joins: jackdk (sid373013@cssa/jackdk)
[13:18:24] *** Quits: cbarrett (sid192934@helmsley.irccloud.com) (Ping timeout: 268 seconds)
[13:18:30] <yushyin> kritzefitz: TupleSections is also part of GHC2021
[13:18:54] <merijn> I mean, that list actually argues "any function using division" as dangerous, so...
[13:19:37] *** Joins: SanchayanMaity (sid478177@id-478177.hampstead.irccloud.com)
[13:19:49] *** Joins: sa (sid1055@id-1055.tinside.irccloud.com)
[13:19:54] *** Joins: cbarrett (sid192934@id-192934.helmsley.irccloud.com)
[13:20:12] *** Joins: bjs (sid190364@user/bjs)
[13:21:02] <kritzefitz> Yeah, on closer inspection that list seems to contain quite some perls.
[13:21:16] <maerwald> kritzefitz: if that was during an *interview* I'd tell them I'm not interested anymore :p
[13:21:22] *** Joins: epolanski (uid312403@id-312403.helmsley.irccloud.com)
[13:21:49] <maerwald> too bad I can't dislike on github
[13:22:29] <kritzefitz> maerwald: no interview, it was a code review on Github. The reviewer immediately backed off, when I questioned the request, but I didn't want to skip this opportunity to potentially learn something new.
[13:22:57] <merijn> kritzefitz: oh, double skepticism for code review on github by people you don't know
[13:23:21] <merijn> I've had peope replace all my foreign imports with unsafe foreign imports in a PR before "because they're faster"
[13:23:50] <maerwald> merijn: they also  cause silent memory corruption on mac... like, all the time
[13:24:30] *** Joins: max22- (~maxime@lfbn-ren-1-762-224.w81-53.abo.wanadoo.fr)
[13:26:46] <merijn> maerwald: I use a bunch of unsafe imports on mac and never had an issue. Is that on Intel? And which version?
[13:27:14] *** Joins: aman (~aman@user/aman)
[13:28:21] *** Joins: cosimone (~user@2001:b07:ae5:db26:a7aa:8027:6b4e:2fb3)
[13:28:36] <maerwald> I mean non-capi in general
[13:28:52] <maerwald> it breaks with CPP tricks
[13:28:59] <maerwald> because headers are ignored
[13:30:45] *** Joins: fef (~thedawn@user/thedawn)
[13:33:49] *** Joins: atwm (~andrew@178.197.234.40)
[13:34:12] *** Quits: atwm (~andrew@178.197.234.40) (Client Quit)
[13:36:25] <kuribas> Some guy removed all version bounds in my .cabal "because it stopped him from compiling".
[13:36:29] *** Joins: yauhsien (~yauhsien@61-231-30-221.dynamic-ip.hinet.net)
[13:37:07] <kuribas> I didn't merge obviously.
[13:37:36] <yushyin> pity
[13:38:19] <kuribas> yushyin: it didn't contain anything else useful...
[13:40:45] <Rembane_> Good yolo PR 
[13:41:13] *** Quits: yauhsien (~yauhsien@61-231-30-221.dynamic-ip.hinet.net) (Ping timeout: 268 seconds)
[13:41:39] *** Joins: raehik1 (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[13:42:44] *** Quits: aman (~aman@user/aman) (Remote host closed the connection)
[13:43:02] <merijn> maerwald: oh, sure, but I usually only use my own C code in FFI
[13:43:08] *** Joins: aman (~aman@user/aman)
[13:44:09] *** Joins: ubert (~Thunderbi@2a02:8109:9880:303c:ca5b:76ff:fe29:f233)
[13:44:56] *** Joins: atwm (~andrew@178.197.234.40)
[13:45:44] *** Parts: atwm (~andrew@178.197.234.40) ()
[13:50:49] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:5cca:96d9:7234:6761)
[13:51:05] *** Quits: aman (~aman@user/aman) (Ping timeout: 268 seconds)
[13:52:28] *** Quits: albet70 (~xxx@2400:8902::f03c:92ff:fe60:98d8) (Remote host closed the connection)
[13:56:21] *** Joins: DNH (~DNH@2a02:8108:1100:16d8:5c1e:444:cdf3:4e4)
[13:57:13] *** Quits: raehik1 (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Ping timeout: 256 seconds)
[13:57:46] *** Joins: atwm (~andrew@178.197.234.40)
[13:58:21] *** Quits: atwm (~andrew@178.197.234.40) (Client Quit)
[13:58:25] *** Joins: jinsun__ (~quassel@user/jinsun)
[13:58:35] *** Joins: albet70 (~xxx@2400:8902::f03c:92ff:fe60:98d8)
[13:59:29] *** Quits: albet70 (~xxx@2400:8902::f03c:92ff:fe60:98d8) (Remote host closed the connection)
[14:01:02] *** Joins: tromp (~textual@dhcp-077-249-230-040.chello.nl)
[14:01:23] *** Joins: atwm (~andrew@178.197.234.40)
[14:01:39] *** Quits: jinsun (~quassel@user/jinsun) (Ping timeout: 264 seconds)
[14:01:52] *** Quits: timCF (~timCF@200-149-20-81.sta.estpak.ee) (Quit: leaving)
[14:01:58] <dminuoso> servant generic question. Say I have a record of routes `data MyAPI f = MyAPI { route1 :: f :- ... }, and some wrapper `type API = "api" :> "v1" :> ToServantApi MyAPI`, how can I run a server with `API` instead?
[14:04:51] <dminuoso> For clients its obvious since `client` takes a proxy, but the generics server code demands a record instead https://hackage.haskell.org/package/servant-server-0.18.3/docs/Servant-Server-Generic.html#v:genericServer
[14:05:35] *** Joins: albet70 (~xxx@2400:8902::f03c:92ff:fe60:98d8)
[14:05:55] *** Quits: cls (~cls@chalk.lubutu.com) (Quit: leaving)
[14:05:58] *** Quits: Guest9226 (~Guest92@178-78-205-86.customers.ownit.se) (Quit: Client closed)
[14:13:03] *** Joins: glguy_ (x@libera/staff/glguy)
[14:13:25] *** Quits: glguy (x@libera/staff/glguy) (Read error: Connection reset by peer)
[14:16:01] *** Quits: tromp (~textual@dhcp-077-249-230-040.chello.nl) (Quit: My iMac has gone to sleep. ZZZzzz…)
[14:18:27] *** Quits: xff0x (~xff0x@2001:1a81:52f2:7200:812:ece5:6349:588e) (Ping timeout: 264 seconds)
[14:19:47] *** Joins: mmhat (~mmh@55d42af1.access.ecotel.net)
[14:20:23] *** Joins: deadmarshal (~deadmarsh@95.38.113.89)
[14:25:00] *** Quits: deadmarshal (~deadmarsh@95.38.113.89) (Ping timeout: 268 seconds)
[14:31:31] *** Quits: mc47 (~mc47@xmonad/TheMC47) (Remote host closed the connection)
[14:31:54] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 260 seconds)
[14:32:09] *** Quits: atwm (~andrew@178.197.234.40) (Quit: WeeChat 3.3)
[14:32:39] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[14:34:03] *** Quits: mvk (~mvk@2607:fea8:5cc1:fa00::4702) (Ping timeout: 264 seconds)
[14:34:32] *** Joins: atwm (~andrew@178.197.234.40)
[14:34:52] <idnar> kritzefitz: hah, I have every one of those extensions on
[14:35:07] *** Joins: deadmarshal (~deadmarsh@95.38.113.89)
[14:35:52] *** Quits: atwm (~andrew@178.197.234.40) (Client Quit)
[14:36:36] *** Joins: burnsidesLlama (~burnsides@dhcp168-024.wadham.ox.ac.uk)
[14:39:05] *** Joins: tromp (~textual@dhcp-077-249-230-040.chello.nl)
[14:39:48] *** Joins: atwm (~andrew@178.197.234.40)
[14:43:03] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 264 seconds)
[14:43:51] *** Quits: atwm (~andrew@178.197.234.40) (Client Quit)
[14:43:52] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[14:44:06] *** Joins: atwm (~andrew@178.197.234.40)
[14:47:28] <arahael> Oh, stack's weird.  I should stop using it, ever had this error on nix?
[14:47:37] <arahael> arahael@nixos ~/s/dynip [1]> stack --system-ghc build
[14:47:39] <arahael> I don't know how to install GHC on your system configuration, please install manually
[14:47:48] *** Quits: atwm (~andrew@178.197.234.40) (Client Quit)
[14:48:04] *** Joins: atwm (~andrew@178.197.234.40)
[14:48:06] <maerwald> arahael: nothing works correctly inside nix, except nix
[14:48:08] <maerwald> :p
[14:48:24] <dminuoso> Ah I think I finally figured the servant bit out
[14:48:32] <arahael> maerwald: I can't argue that! :D
[14:48:37] <arahael> Against that, rather.
[14:49:03] *** Quits: atwm (~andrew@178.197.234.40) (Client Quit)
[14:49:06] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 245 seconds)
[14:49:17] <arahael> maerwald: I made the mistake of trying to rebuild an old project, back when I was using stack.
[14:49:34] <arahael> stack has nix integration? Awesome.  No, not awesome.  Really bad. Shockingly bad.
[14:49:35] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[14:49:43] <arahael> Stopped using it, but it was working fine, until I upgraded nix.
[14:49:59] <maerwald> try: stack --system-ghc --no-install-ghc
[14:50:20] <maerwald> it'll probably tell you there is no ghc
[14:50:45] *** Joins: xff0x (~xff0x@2001:1a81:52f2:7200:812:ece5:6349:588e)
[14:50:48] <arahael> Yeah, it told me to try using --system-ghc, or --install-ghc.
[14:51:05] <arahael> I've got it using a shell.nix, though. And shell.nix clearly defines one.
[14:51:27] *** Quits: CiaoSen (~Jura@p200300c95716ce002a3a4dfffe84dbd5.dip0.t-ipconnect.de) (Ping timeout: 264 seconds)
[14:51:29] <maerwald> did you try the command?
[14:51:48] <arahael> > stack --system-ghc --no-install-ghc build
[14:51:50] <lambdabot>  error: Variable not in scope: stack
[14:51:51] <arahael> No compiler found, expected minor version match with ghc-8.6.5 (x86_64) (based on resolver setting in /home/arahael/src/dynip/stack.yaml).
[14:52:18] <maerwald> do you have `ghc-8.6.5` in scope?
[14:52:22] *** Joins: pfurla (~pfurla@201.17.118.230)
[14:52:33] <arahael> No, so it has to be named like that?
[14:52:35] <maerwald> yes
[14:52:56] <maerwald> and GHC makes sure that's the case
[14:53:02] <maerwald> so it's nix fault
[14:56:09] <dminuoso> Is there a cute way to launch ghci in some arbitrary spot and have it behave as some nice repl?
[14:57:09] <dminuoso> What Im thinking of, is launching my program inside GHCi, but with some sort of IO action that will cause GHCi to stop and wait for input
[14:58:59] <arahael> maerwald: I'm thinking I need to de-stack'ify this project, it's just too hard to figure out how to figure out stack and nix.  I should convert it to plain cabal.
[14:59:24] <arahael> maerwald: It's just so weird because stack claims to support nix, and yet, almost every single time, stack's idea of what ghc versions shoudl exist... Don't.
[14:59:43] <maerwald> there's no way to reasonably support nix
[14:59:52] <arahael> maerwald: It should either support nix, or not at all.
[15:00:07] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[15:00:47] <arahael> I get conflicted about nix - the philosophy seems nice, but... I've used it on-and-off for over 2 years now.  And I still have no idea what I'm doing with it.
[15:00:58] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[15:01:39] *** Quits: lagash (lagash@lagash.shelltalk.net) (Ping timeout: 264 seconds)
[15:02:42] <maerwald> there's an easy way to figure out if a project has a completely broken build system: if the README instructs you to use nix.
[15:03:17] <maerwald> e.g. ghcjs :p
[15:03:45] <arahael> Ha.  Yeah, crazy thing is, this system _is_ nixos.
[15:03:50] <arahael> And it's still impossible.
[15:04:21] <arahael> Actually nixos is quite nice, but man, the language is complicated.
[15:04:22] <maerwald> Even nix followers don't use NixOS as their primary OS anymore
[15:04:37] *** Joins: atwm (~andrew@178.197.234.40)
[15:04:38] <arahael> Yeah, I've already been thinking of moving away from it.
[15:07:55] *** Quits: atwm (~andrew@178.197.234.40) (Client Quit)
[15:08:34] *** Joins: atwm (~andrew@178.197.234.40)
[15:09:11] *** Quits: gentauro (~gentauro@user/gentauro) (Read error: Connection reset by peer)
[15:09:28] *** Joins: gentauro (~gentauro@user/gentauro)
[15:11:07] *** Quits: fef (~thedawn@user/thedawn) (Quit: Leaving)
[15:12:27] *** Joins: fr33domlover (~fr33@2.55.141.188)
[15:20:26] *** Joins: enoq (~enoq@2a05:1141:1f5:5600:b9c9:721a:599:bfe7)
[15:22:03] *** Quits: atwm (~andrew@178.197.234.40) (Ping timeout: 264 seconds)
[15:26:02] <albet70> what's a linked list?
[15:26:32] *** Joins: CiaoSen (~Jura@p200300c95716ce002a3a4dfffe84dbd5.dip0.t-ipconnect.de)
[15:26:41] <merijn> maerwald: I have a much easier heuristic
[15:26:45] <merijn> maerwald: "const True"
[15:27:09] <merijn> Every project I joined in my life had entirely broken build systems when I started, because no one seems to care
[15:27:47] *** Joins: fef (~thedawn@user/thedawn)
[15:28:06] <geekosaur> the build systen's usually an afterthought, something to be endured to get to the good parts
[15:29:04] *** Joins: atwm (~andrew@178.197.234.40)
[15:29:07] <merijn> I spent *a lot* (well, it felt like that initially) of effort on the build system for my phd codebase and never regretted it
[15:29:26] <merijn> In 6 years I've had, maybe, 4 times where things broke down (which I then quickly fixed)
[15:29:52] <merijn> But as soon as you tolerate *any* breakage to the build system, you're doomed forever
[15:29:55] *** Quits: atwm (~andrew@178.197.234.40) (Client Quit)
[15:30:12] *** Joins: atwm (~andrew@178.197.234.40)
[15:31:27] <Cajun> albet70: linked list = a form of list (collection, if you like) that has an object/thing and a pointer to the memory address to the next thing (or a thunk in haskell's case). this indirection is why linked lists arent used, but sometimes these lists can be entirely removed during compilation and optimization
[15:31:44] *** Quits: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net) (Quit: WeeChat 3.3)
[15:33:09] *** Quits: benin (~benin@183.82.179.164) (Quit: Ping timeout (120 seconds))
[15:33:26] <arahael> merijn: I'm inclined to agree.  I'm one of those people who keep flitting from system to system, and they're all sucky once you go around the edges.  As maerwald said, nix only works with nix.  Same is true for pretty much everything.
[15:33:28] *** Joins: benin (~benin@183.82.179.164)
[15:33:31] *** Quits: atwm (~andrew@178.197.234.40) (Client Quit)
[15:33:39] *** Joins: dhouthoo (~dhouthoo@178-117-36-167.access.telenet.be)
[15:34:11] *** Joins: atwm (~andrew@178.197.234.40)
[15:36:23] *** Quits: atwm (~andrew@178.197.234.40) (Client Quit)
[15:36:34] <arahael> I gave up with stack, incidentially. The shell.nix seems to have everythign I need, so I ended up going in and just doing a cabal build directly.  stack was giving me no benefit.  Lets see how the build goes.
[15:37:10] *** Joins: atwm (~andrew@178.197.234.40)
[15:38:37] *** Joins: yauhsien (~yauhsien@61-231-30-221.dynamic-ip.hinet.net)
[15:39:25] *** Quits: atwm (~andrew@178.197.234.40) (Client Quit)
[15:43:00] *** Quits: yauhsien (~yauhsien@61-231-30-221.dynamic-ip.hinet.net) (Ping timeout: 260 seconds)
[15:44:39] <albet70> "🟢 Cajun :albet70: linked list = a form of list (collection, if you like) that has an object/thing and a pointer to the memory address to the next thing (or a thunk in haskell's case). this indirection is why linked lists arent used, but sometimes these lists can be entirely removed during compilation and optimization", an object and a pointer in a list? they are different type?
[15:44:51] *** Quits: deadmarshal (~deadmarsh@95.38.113.89) (Ping timeout: 264 seconds)
[15:45:16] <arahael> Yep. WOrked perfectly.  Zero benefit to stack.
[15:46:32] <Cajun> imagine in an object of thealbet70: linked list there is the thing you want (lets say candy) and something pointing you to more things you want (so more candy). you first get the first thing then follow the pointers onwards until you hit your next piece, and so on. you as the user of the linked list dont see this pointer, but behind the scenes its
[15:46:32] <Cajun> there and its why it is so slow
[15:46:55] <Cajun> there is a good (but albeit long winded) computerphile video about linked lists you should watch
[15:47:14] <Cajun> s/but albeit/albeit
[15:47:42] <tomsmeding> albet70: https://www.alphacodingskills.com/imgfiles/linked-list.PNG
[15:48:33] <Cajun> yeah that, its far easier with an image
[15:48:42] *** Joins: atwm (~andrew@178.197.234.40)
[15:49:12] <Cajun> arrays are just better most of the time, but if the intermediate list can be entirely removed then default lists are quite good
[15:52:12] <Cajun> and if you want to dive into the really cool array representation rabbit hole, `massiv` (newer) or `repa` (older) should be a good starting point. they are arrays that have delayed representations which can be removed during compilation
[15:53:12] <Cajun> though sadly there arent many resources which talk about these forms of delayed arrays, which is really strange
[15:54:24] *** Quits: jonathanx (~jonathan@h-178-174-176-109.A357.priv.bahnhof.se) (Remote host closed the connection)
[15:54:48] *** Joins: abrantesasf (~abrantesa@187.36.170.211)
[15:55:24] <arahael> merijn: What's your favorite build system, btw?  Though I suspect most of them are fine, as long as they're kept perfect.
[15:55:58] *** Joins: jonathanx (~jonathan@h-178-174-176-109.A357.priv.bahnhof.se)
[15:57:27] *** Quits: atwm (~andrew@178.197.234.40) (Quit: WeeChat 3.3)
[15:57:42] *** Joins: atwm (~andrew@178.197.234.40)
[15:57:48] *** Joins: deadmarshal (~deadmarsh@95.38.113.89)
[16:03:04] <merijn> arahael: At the moment it is still "carefully handcrafted (g)make"
[16:03:28] <arahael> You keep it simple.   Nice.
[16:03:33] <merijn> I'm looking for an excuse to play with Shake, but pragmatically gmake is the most reasonable
[16:03:36] <merijn> arahael: hah
[16:03:40] <merijn> No I don't :p
[16:04:01] <arahael> Heh.  I sometimes think of making myself a monorepo, or at least, a master repo that builds everything I have.
[16:04:31] *** Joins: arjun (~user@user/arjun)
[16:04:34] <arahael> And I sometimes consider shake as the build system - I used to consider using nix for this, but nix has proven to be too complex.
[16:04:38] <merijn> arahael: I actually have makefiles fetching repos for me :p
[16:04:41] <Cajun> whats gmake compared to make? is it just gnu make? but i thought gnu make was the only form of make..?
[16:04:43] <arahael> merijn: Nice.
[16:05:04] <arahael> Cajun: There's a lot of different makes, including microsoft's, borland's, bsd's...
[16:05:08] <merijn> Cajun: The make on BSD, Solaris, and some other platforms are *not* GNU make
[16:05:22] <merijn> And the make interface/grammar is...rather underspecified
[16:05:28] <arahael> Cajun: Default make for a long time for me was borland make.  Which I tried to ignore. :)
[16:05:46] <Cajun> now im scared of the world of make lol
[16:05:53] <merijn> So rather than limiting myself to a barebones, underspecified format it's easier to simply say "GNU make"
[16:06:15] <arahael> merijn: You'll still need the gnu tools, too, I guess - but that's relatively easy to install these days, I suspect.
[16:06:32] <hpc> step 1 - use linux, step 2 - there is no step 2 :D
[16:06:44] <merijn> Cajun: I mean, the general target, dependency, recipe formula is the same, but POSIX make doesn't standardise: conditionals, no built in functions, etc.
[16:06:54] <merijn> Only a limited form of automatic variables
[16:06:56] <merijn> hpc: Never >.<
[16:06:57] <arahael> I sometimes think of using nix as my build system, but...  The more I learn nix, the more I realise what it wants to do, and the more I wonder: Why don't they just use haskell?
[16:07:15] <merijn> arahael: You just need GNU make, tbh. And that's easily installed anywhere
[16:07:31] <hpc> yeah, nix is perpetually on my list
[16:07:33] <merijn> It's already on most/all unix systems and even on BSD it's easy to install, since many ports rely on it
[16:07:34] <Cajun> isnt there something for nix with haskell? i remember hearing that tossed around here a while back
[16:07:56] <arahael> Cajun: In practice it's a stinking mess, in my experience.  Everything is super complex.
[16:07:59] <merijn> oh, no include in POSIX make either
[16:08:10] <hpc> getting a good rpm/deb setup might be better in practice
[16:08:26] <arahael> Cajun: Just now, I've given up trying to figure out how to use a different ghc in a nix shell.nix for cabal, and that's supposed to be one of the easiest things to do with it!
[16:08:33] <merijn> arahael: The trick I rely on a lot now is combination of including makefiles and makefiles generated via make
[16:08:57] *** Quits: atwm (~andrew@178.197.234.40) (Read error: Connection reset by peer)
[16:09:18] <merijn> arahael: The crucial part is to abandon the heretical (yet mainstream) ways of "recursively invoking make"
[16:09:20] *** Joins: Everything (~Everythin@37.115.210.35)
[16:09:22] <merijn> That way lies madness
[16:09:39] <merijn> If any of your recipes ever invokes make, you done fucked up
[16:09:56] <__monty__> arahael: `haskell.compiler.ghcXYZ.ghcWithPackages [...]`?
[16:10:10] <arahael> merijn: How do you include makefiles, especially makefiles generated via make?
[16:10:27] <arahael> __monty__: Yeah, thing is, I needed it in *stack*'s shell.nix.
[16:10:46] *** Quits: deadmarshal (~deadmarsh@95.38.113.89) (Ping timeout: 260 seconds)
[16:11:13] *** Joins: shapr (~user@pool-100-36-247-68.washdc.fios.verizon.net)
[16:11:54] <__monty__> arahael: The stack repo doesn't seem to have a shell.nix?
[16:12:11] <merijn> arahael: GNU make will, if you include a non-existent file it has a recipe for, run the recipe for that file, then rerun the original invocation
[16:12:13] <arahael> __monty__: https://docs.haskellstack.org/en/v1.2.0/nix_integration/#using-a-custom-shellnix-file
[16:12:23] <merijn> arahael: So it effectively JIT generates the makefiles you're including
[16:12:32] <arahael> merijn: That's nifty.
[16:12:40] *** Quits: phma (phma@2001:5b0:211b:e388:ee5a:511e:22c4:3b06) (Read error: Connection reset by peer)
[16:12:43] *** Joins: deadmarshal (~deadmarsh@95.38.113.89)
[16:13:24] <arahael> At work I've used Fake and Rake, not so bad, though people have a tendency to make the build too complex.
[16:13:28] *** Joins: phma (phma@2001:5b0:212a:9168:d8ac:a312:b259:ce6e)
[16:14:28] <hpc> language-specific make packages are never as good as the real thing imo
[16:14:28] <merijn> the setup in my phd repo is a bit hack-y (but can't be arsed to change it, because it Just Works). For work I wrote a new thing from scratch with some actual documentation but it's...hard for some people to wrap their head around it :p
[16:14:29] *** Quits: albet70 (~xxx@2400:8902::f03c:92ff:fe60:98d8) (Read error: Connection reset by peer)
[16:14:30] <arahael> I still want to play with shake, though, so I'll probably go with that - my difficulty with getting haskell on my Rpi3 (musl based distro) gives me a small pause, but I reckon that if I don't have haskell on the system, then most of my personal projects won't build anyway.
[16:14:55] <arahael> merijn: People struggle with declarative systems for some reason.
[16:15:23] <merijn> arahael: Well, it's more that I'm incredibly demanding and throwing more complicated things at the problem to make it "work how I want"
[16:15:25] <arahael> merijn: I found Rake pretty good, as an example, but people ended up trying to use it as an imperative build language, with hacks on hacks.  Just became big and complex fast.
[16:15:43] <arahael> Hmm, maybe.
[16:15:46] <merijn> Which is: 1) no recursive make invocations, 2) make in any random sub directory should do something sensible
[16:16:01] <merijn> It requires a bit of galaxy brain thinking to make those two work :p
[16:16:23] <arahael> merijn: I seemed to understand it the moment you mentioned that gnu-specific make feature.
[16:17:33] *** Quits: m1dnight (~christoph@christophe.dev) (Quit: WeeChat 3.1)
[16:17:43] <merijn> arahael: So I have a Makefile in every dir (for case 2), but it always ties into the main one via include and hackery
[16:18:13] *** Joins: m1dnight (~christoph@christophe.dev)
[16:18:22] <merijn> arahael: I include everything from the main one: https://github.com/merijn/Belewitte/blob/master/Makefile and then have a few "composable" ones that are used for the rest: https://github.com/merijn/Belewitte/tree/master/makefiles
[16:18:22] <arahael> You're starting to loose me a bit there~
[16:18:22] *** Joins: raehik1 (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[16:18:31] <__monty__> arahael: I assume you've tried providing a default value for the ghc argument? I'm not sure how that interacts with stack though tbqh.
[16:19:21] <arahael> __monty__: And that's the trouble.  How would you find out? There's no compile step to statically check for you. There's no type holes. There's...  Not even any documentation.
[16:19:41] *** Joins: atwm (~andrew@178.197.234.40)
[16:19:56] *** Quits: xff0x (~xff0x@2001:1a81:52f2:7200:812:ece5:6349:588e) (Ping timeout: 245 seconds)
[16:20:05] <arahael> __monty__: As for the default, yeah, trouble is, the default produces a compiler called 'ghc', which has two problems: 1) It's not called ghc-8.6.5, and 2) It's the wrong version.
[16:20:06] *** Quits: tromp (~textual@dhcp-077-249-230-040.chello.nl) (Quit: My iMac has gone to sleep. ZZZzzz…)
[16:20:06] *** Quits: img (~img@user/img) (Quit: ZNC 1.8.2 - https://znc.in)
[16:20:36] *** Joins: albet70 (~xxx@2400:8902::f03c:92ff:fe60:98d8)
[16:20:40] <arahael> Blegh.  And my local haskell is broken.  I should get to bed, nearly midnight and all.  Bleghness.
[16:20:58] <__monty__> No, I meant something like, after moving the nixpkgs import up, `{ghc ? pkgs.haskell.compiler.ghcXYZ}: ...`
[16:21:09] <arahael> That is, my ghc on my mac is now broken.  My LLVM's too new.
[16:21:30] *** Joins: img (~img@user/img)
[16:21:52] <arahael> __monty__: That's the other thing, I've never quite understood that. How does it know what pkgs is?
[16:22:02] *** Quits: deadmarshal (~deadmarsh@95.38.113.89) (Ping timeout: 260 seconds)
[16:22:21] <arahael> __monty__: There's simply too much *magic* in nix.  Sometimes it's pkgs, sometimes it's <nixpkgs>, and those angle-brackets are *part* of the name, and sometimes it's who knows what.
[16:22:52] *** Joins: boxscape_ (~boxscape_@p4ff0bb6c.dip0.t-ipconnect.de)
[16:23:28] <__monty__> arahael: Because of the `with`, you open up the attrset you import nixpkgs, feed it `{}`, get an attrset and then open that up to put all of its attributes in scope.
[16:23:41] <arahael> __monty__: I've even got a patch accepted in nix's documentation, correcting the way people run stuff inside a nix shell, using some obscure bash features: eval ${foo:foo} (from memory)
[16:24:09] <__monty__> I think you'd benefit from reading the Nix pills. These are very syntax-level issues.
[16:24:23] <arahael> __monty__: I've read them about 4 times already over the past 2 years.
[16:25:17] <__monty__> Hmm, I wonder why it isn't sticking? The angle brackets are special syntax. They mean "Take the identifier in between <>, look it up in the NIX_PATH, set in your environment, and substitute the value."
[16:25:20] <merijn> __monty__: Well, maybe if they didn't make the syntax and surface level suck so much, I could consider actually recommending it to my colleagues >.<
[16:25:24] <arahael> __monty__: Despite being quite good at ruby, python, haskell (imho!), Go, Swift, C#...  Something about nix just escapes me.
[16:25:59] *** Quits: max22- (~maxime@lfbn-ren-1-762-224.w81-53.abo.wanadoo.fr) (Ping timeout: 250 seconds)
[16:26:20] <merijn> __monty__: Instead I find myself telling colleagues: Hey! This Nix idea would work *really* well for all the problems we're having...if it was actually usable by mere mortals...
[16:26:34] <__monty__> arahael: pkgs is just an attribute of the nixpkgs attrset you get. It's a little special in that it contains itself.
[16:26:47] <arahael> __monty__: Try parsing that sentence.
[16:26:55] <__monty__> merijn: Guix is close to Nix-but-with-nice-UX.
[16:27:34] <merijn> __monty__: So why aren't people pushing that?
[16:27:37] <__monty__> arahael: Which sentence? It's just a recursive data structure like `ones = 1 : ones`.
[16:27:47] *** Joins: deadmarshal (~deadmarsh@95.38.113.89)
[16:27:57] <arahael> __monty__: I'm trying to parse it like this: "pkgs is...  an attribute. It contians itself".
[16:28:10] <__monty__> merijn: Various reasons. The GNU stance on software freedom being the main pragmatic one.
[16:28:20] *** Quits: img (~img@user/img) (Quit: ZNC 1.8.2 - https://znc.in)
[16:29:08] <merijn> __monty__: So does it actually have much besides GNU stuff in it? :p
[16:29:43] *** Joins: img (~img@user/img)
[16:30:35] <arahael> __monty__: So what's the result of `head pkgs`, tehn?
[16:30:38] <arahael> *then
[16:30:53] <arahael> __monty__: See, I like to *know* what things need to be, not hack things and magically guess what they should be.
[16:32:09] <arahael> Things fall apart in *freaking weird* ways, and nobody knows whhy.
[16:33:27] <arahael> Consider the build phases - the one part of nix I think I understand: You can enter a nix shell, and you'll either need to run the various *phases, or you'll need to *eval* the various phases.  It's weird.
[16:33:34] *** Joins: tromp (~textual@dhcp-077-249-230-040.chello.nl)
[16:33:50] *** Quits: Cajun (~Cajun@user/cajun) (Quit: Client closed)
[16:34:03] *** jinsun__ is now known as jinsun
[16:34:08] <__monty__> arahael: No, pkgs isn't a list. I just gave the simplest recursive data structure I could think of as an example.
[16:35:28] <__monty__> merijn: Anything with an FSF-approved license AFAIK? There's also an effort to package whatever HPC setups tend to need. (And there's a non-free packages repo but hush hush. And don't you dare ask for help with any problems encountered there.)
[16:35:42] <arahael> __monty__: I'm confused why shell.nix is even a function in the first place.
[16:36:08] <merijn> __monty__: Right, so that immediately renders it useless to me
[16:36:19] <__monty__> arahael: Just so you can customize it when entering a nix-shell.
[16:36:49] <arahael> __monty__: I wouldn't even know how.  Luckily it's well documented!  See the link I gave you? It says this: The buildStackProject utility function is documented in the Nixpkgs manual.
[16:36:57] <arahael> __monty__: But when I click on that link, it's nowhere to be seen.
[16:37:03] <__monty__> merijn: Didn't you want to use it as a build system? I'm not sure why you need lots of unfree dependencies.
[16:37:29] <merijn> __monty__: Because scientists use all sorts of shitty proprietary obscure bullshit
[16:37:57] <__monty__> arahael: That's an unfortunate consequence of the haskell infra documentation being move to https://haskell4nix.readthedocs.io/ because they wanted to be able to iterate on it faster.
[16:38:09] <merijn> __monty__: If I didn't have to be able to work with "proprietary, 15 year old undocumented nonsense", Nix wouldn't seem so appealing
[16:38:11] <arahael> __monty__: See, that doesn't help me.
[16:38:14] <__monty__> merijn: Those might fit the HPC project though.
[16:38:40] <arahael> __monty__: Infact, I don't think I've seen that page.
[16:39:32] <__monty__> You can find it via the Haskell section in the Nixpkgs manual. I agree it's bad for discoverability. But I don't have time to maintain the docs so whoever does gets to decide where they're hosted.
[16:39:49] <arahael> __monty__: Yet another reason nix isn't that useful in practice.
[16:40:02] <arahael> __monty__: You have to be "in the know" to understand it
[16:40:19] <__monty__> UX being terrible doesn't mean it's not useful.
[16:41:10] <arahael> __monty__: A terrible UX isn't so bad if the docs are good.
[16:41:21] <arahael> The trouble is it's not just the UX that's terrible.
[16:41:37] <__monty__> Docs are part of UX imo.
[16:41:39] <haruhimywife[m]> hello! just testing to see if anyone can read this, chatting from the matrix bridge
[16:41:50] <arahael> __monty__: Perhaps.
[16:42:00] <arahael> __monty__: It's consistently terrible, then! :)
[16:42:01] <merijn> __monty__: If I can't get anyone I work with to use it because the UX is terrible, then it is, in fact, not useful :)
[16:42:08] <arahael> ^^ That!
[16:42:16] *** Quits: atwm (~andrew@178.197.234.40) (Quit: WeeChat 3.3)
[16:42:33] *** Joins: atwm (~andrew@178.197.234.40)
[16:43:49] <arahael> And for various reasons, nix is really only usable on glibc-based linux systems.
[16:44:06] *** Quits: atwm (~andrew@178.197.234.40) (Client Quit)
[16:44:12] <merijn> And even things with terrible UX that do have people using them can be terrible enough to not be useful
[16:44:19] <merijn> (looking at you, git >.>)
[16:44:42] <arahael> Hey, git's useful!
[16:44:58] <merijn> arahael: If you're a masochist or stockholm syndromed >.>
[16:45:03] <geekosaur> the U in UX does not mean useful
[16:45:07] <arahael> merijn: My previous VCS was perforce.
[16:45:37] <geekosaur> oy
[16:45:41] <geekosaur> you may get a pass
[16:45:43] *** Joins: atwm (~andrew@178.197.234.40)
[16:46:22] <__monty__> I use Nix on macOS so I have to disagree about only being useful on glibc Linux.
[16:46:47] <arahael> __monty__: I tried Nix on High Sierra.  It was OK, but it kept breaking.
[16:47:04] <__monty__> merijn: But Guix's UX isn't terrible. It's worth checking out if the only reason you're reluctant to use Nix is the lacking UX.
[16:47:23] <arahael> __monty__: At teh end of the day, nix is just a build system.
[16:47:50] <dminuoso> __monty__: I think Guix'x UX is terrible.
[16:47:51] * dminuoso shrugs
[16:48:26] <__monty__> I never said it was better than sliced bread, arahael. If it doesn't work for you then ditch it.
[16:48:28] <arahael> __monty__: Anyway, so which pill do I need to read to understand how to write a shell.nix file for stack, such that I get ghc-8.6.5?
[16:48:33] <merijn> You can pry Mercurial from my cold, dead, shriveled hands >.>
[16:49:05] <__monty__> arahael: That's not what I meant. The Nix pills would explain what the <> syntax is about. And with/inherit/attrset/etc.
[16:49:11] <merijn> Unless you magicced the whole world into finally innnovating and moving on to something like Pijul, then it goes right into the trash
[16:49:21] <arahael> __monty__: The thing is, I have a task I want to achieve.
[16:49:23] *** Joins: Topsi (~Tobias@dyndsl-095-033-021-206.ewe-ip-backbone.de)
[16:49:33] <arahael> __monty__: The obscurity of the nix system is interferring with that task.
[16:49:58] *** Quits: burnsidesLlama (~burnsides@dhcp168-024.wadham.ox.ac.uk) (Remote host closed the connection)
[16:50:17] <arahael> __monty__: All I wanted to do was 'stack build'!  As I have done every couple of months for the past 3 years!
[16:50:38] <arahael> (Unfortunately, I've updated my channels)
[16:51:35] <__monty__> arahael: And I'm only trying to help with that task. Move the nixpkgs import up, and add `? pkgs.haskell.compiler.ghcXYZ` after the ghc argument, see if that does what you want. The if it does and you want to understand better why it does, we can talk.
[16:51:46] *** Quits: atwm (~andrew@178.197.234.40) (Quit: WeeChat 3.3)
[16:52:42] <arahael> __monty__: Yeah, considering it's past midnight I'm not goign to do that at the moment but I've taken note of the suggesetion.  I did earlier try *adding* another import, though, which didn't work at all. I forget the error.
[16:53:15] *** Quits: jbox (~jbox@user/jbox) (Ping timeout: 264 seconds)
[16:55:27] <arahael> I remember having a multi-hour investigation where I tried having a shell.nix and a default.nix include the same nix files.  It was a disaster.  
[16:55:29] <__monty__> Probably a syntax issue. Import is an expression in Nix, not a statement.
[16:56:24] <__monty__> Not sure why that would be hard. Usually shell.nix uses default.nix though, maybe you introduced some circularity?
[16:56:53] <arahael> I don't recall that being mentioned in the docs.
[16:57:21] <dminuoso> My main beef with nix and haskell is the part where they dont go well together. :(
[16:57:27] *** Quits: jackdk (sid373013@cssa/jackdk) (Ping timeout: 264 seconds)
[16:57:30] <arahael> dminuoso: Which is all the parts. :(
[16:57:34] <dminuoso> Realistically you have to use haskell.nix if you dont want to go insane
[16:57:37] *** Quits: bjs (sid190364@user/bjs) (Ping timeout: 250 seconds)
[16:57:51] <arahael> dminuoso: Yeah, and I generally try to figure things out "from scratch".  And I go insane.
[16:58:13] <arahael> Heck.  I spent a week trying to figure out why 'unpack_phase' didn't work as it was documented to.
[16:58:17] *** Joins: jackdk (sid373013@cssa/jackdk)
[16:58:21] <dminuoso> arahael: The problem isnt lack of documentation
[16:58:22] *** Joins: bjs (sid190364@user/bjs)
[16:58:22] *** Parts: arjun (~user@user/arjun) (ERC 5.4.1 (IRC client for GNU Emacs 29.0.50))
[16:58:34] <dminuoso> It's rather that haskellPackages has some fundamentally broken sides to it.
[16:58:58] <arahael> dminuoso: I've noticed that _most_ of the sub-ecosystems in nix have broken stuff to it like that.
[16:59:10] <dminuoso> Dunno
[16:59:18] <dminuoso> arahael: As broken and evil as doJailbreak?
[16:59:30] <dminuoso> That thing doesnt just exist to please users, its used in haskellPackages in a multitude of packages
[16:59:38] <dminuoso> And that has some severe implications
[16:59:47] <arahael> Ah, maybe haskell's stuff is even worse.
[17:00:05] *** Quits: hiruji` (~hiruji@2606:6080:1002:4:88e7:e893:3692:25d2) (Read error: Connection reset by peer)
[17:01:03] <arahael> As an example, I've yet to figure out how to use python *and* haskell *and* something else in teh same build, because they tend to have mutually exclusive buildShitWithShit.
[17:03:45] *** Joins: hiruji (~hiruji@user/hiruji)
[17:06:11] *** Joins: wei2912 (~wei2912@116.88.103.128)
[17:06:30] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Quit: = "")
[17:06:34] *** Joins: zava (~zava@ip5f5bdf0f.dynamic.kabel-deutschland.de)
[17:07:15] *** Joins: xff0x (~xff0x@2001:1a81:52f2:7200:e03c:a5df:843b:e9fd)
[17:08:14] *** Joins: yuri (~yuri@nat-0-31.msu.umos.ru)
[17:08:46] <arahael> __monty__: Don't get me wrong, I'm just tired.  Perhaps next week I'll have another hour to go through this again.
[17:09:29] *** Joins: hippoid (~hippoid@c-98-220-13-8.hsd1.il.comcast.net)
[17:10:18] <arahael> Though frankly, I might just try that new website and ignore stack.  Stack's broken, imho.
[17:12:16] <arahael> merijn: I hope I didn't annoy people too much - G'night!
[17:12:28] <__monty__> If it's for development, haskell.nix is really the much better option.
[17:12:45] <arahael> __monty__: Yeah, it's for dev.
[17:13:01] <arahael> I just wanted to stack build, and stack install, and then get to bed 2 hours ago
[17:13:09] <__monty__> The Haskell infra in Nixpkgs suffers from trying to provide *every* package on Hackage but with the Stackage model of having everything build together. And that's simply not possible.
[17:13:36] <__monty__> arahael: Fair warning though, haskell.nix also has documentation bumps in the road : )
[17:14:14] <arahael> __monty__: Yeah, well, hoepfully those are on edge cases.  I'm just quite annoyed where stack has *explicit* support for nix, and it can't even get the compiler right.
[17:14:43] <arahael> And not only that, it still broke completely because of an unrelated channel update I did who knows when however many months ago.
[17:15:08] <__monty__> That channel bump probably had a different default GHC version.
[17:15:16] <arahael> Oh, it did.
[17:15:22] <arahael> But not only that, but it no-longer had ghc865.
[17:16:00] <arahael> My approach before was to randomly try different stackage versions until I magically got one that has a matching ghc.
[17:16:03] <arahael> Build, get to bed.
[17:16:03] <__monty__> Nix is only somewhat reproducible if you pin All-the-things!
[17:16:20] <arahael> Well, I guess I'll pin all the things.
[17:16:31] *** Quits: hiruji (~hiruji@user/hiruji) (Read error: Connection reset by peer)
[17:17:55] *** Joins: azimut_ (~azimut@gateway/tor-sasl/azimut)
[17:18:52] <arahael> __monty__: This was my attempt to to that: https://stackoverflow.com/a/56180220/52273
[17:19:22] <arahael> __monty__: Which I had to modify quite a bit because it turns out that a lot has changed since... 2 years ago.
[17:19:22] *** Joins: hiruji (~hiruji@user/hiruji)
[17:20:24] <arahael> __monty__: Which brings up another point - all these .nix files are so crazy different. Sometimes they're a function. Sometimes they're not. Sometimes they're called as part of a buildPackage, and I've learned that I can't use nixpkg's themselves as a reference because a lot of their stuff only works within nixpkgs.
[17:21:18] <__monty__> Yes, that's the flipside to Nix being a DSL rather than just key-value configuration.
[17:22:00] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Ping timeout: 276 seconds)
[17:22:06] <arahael> __monty__: Somehow, I don't have this issue with... Pretty much any other system I've used (though I've not used Guix)
[17:23:08] *** Parts: nabaiste^ (~nabaiste@68.101.63.101) ()
[17:23:39] <arahael> Actually I do recall *one* other build system I've found almost as difficult.
[17:24:04] <__monty__> Well, it's not as if make can't get complicated. Have you ever seen GHC's make build system?
[17:24:48] <arahael> __monty__: No, but here's the thing. I can understand make. Ah, just remembered the other build system I found complex: Gradle.
[17:24:52] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[17:25:00] *** Joins: burnsidesLlama (~burnsides@dhcp168-024.wadham.ox.ac.uk)
[17:25:09] <arahael> But Grable's just badly documented.  It's possible to figure out
[17:25:25] *** Joins: chenjf (~chenjf@104.208.72.114)
[17:25:31] <__monty__> I doubt you'd say you can understand make after looking at GHC's make build system : )
[17:25:45] <arahael> Doesn't GHC's make system also use shake?
[17:26:22] <arahael> Hell. I Understand *xcode*'s build system.
[17:26:31] <__monty__> No, Hadrian is a build system implemented in parallel because the make build system got so complicated.
[17:26:46] *** Quits: alx741 (~alx741@186.178.108.244) (Quit: alx741)
[17:27:03] *** Joins: alx741 (~alx741@186.178.108.244)
[17:27:04] <arahael> Ok, well, this Hadrian...  Do non-GHC-core-devs need to know it?
[17:27:26] <arahael> Does any other system use it?
[17:27:38] <arahael> If the answer's no, then I'd say it's complexity is somewhat contained.
[17:28:03] <__monty__> Not AFAIK. I assume other project would spin their own version of a Shake build system. Just like how I don't expect GCC's make build system to be reused.
[17:28:14] <arahael> Yeah.  By contrast, nix...
[17:28:38] *** Quits: chenjf (~chenjf@104.208.72.114) (Client Quit)
[17:28:47] <__monty__> Nix's goal is very different though. They're trying to package all the software out there in a declarative way.
[17:29:38] <arahael> Yeah, they were originally trying to do it portably, too, but so far they only have it working *in a pragmatic sense*, in glibc-linux, and sure, macos.
[17:31:03] *** Quits: burnsidesLlama (~burnsides@dhcp168-024.wadham.ox.ac.uk) (Ping timeout: 264 seconds)
[17:31:43] *** Joins: atwm (~andrew@178.197.234.40)
[17:32:20] <arahael> Ok, I'm getting to bed, and I'm leaving this in a tab for my future reference: https://stackoverflow.com/a/56305341/52273 - A lot of lines just to pin a single ghc version, but it seems clearer.
[17:33:25] <arahael> __monty__: Thanks for listening, even if I wasn't in a particularly good mood.  Thanks.
[17:33:28] <arahael> G'night!
[17:33:49] <arahael> __monty__: (I appreciate it)
[17:34:16] <__monty__> np
[17:34:55] *** Quits: hiruji (~hiruji@user/hiruji) (Read error: Connection reset by peer)
[17:36:24] *** Quits: boxscape_ (~boxscape_@p4ff0bb6c.dip0.t-ipconnect.de) (Quit: Connection closed)
[17:36:45] *** Quits: deadmarshal (~deadmarsh@95.38.113.89) (Quit: ZNC 1.8.2 - https://znc.in)
[17:37:09] *** Joins: deadmarshal (~deadmarsh@95.38.113.89)
[17:38:06] *** Quits: atwm (~andrew@178.197.234.40) (Quit: WeeChat 3.3)
[17:38:06] *** Quits: pfurla (~pfurla@201.17.118.230) (Read error: Connection reset by peer)
[17:38:37] *** Joins: pfurla (~pfurla@2804:14d:5c81:4104:7d52:bf34:226e:199c)
[17:40:17] *** Joins: yauhsien (~yauhsien@61-231-30-221.dynamic-ip.hinet.net)
[17:41:39] *** Joins: reumeth (~reumeth@user/reumeth)
[17:44:18] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:dcf1:6c47:4df:1ed1)
[17:44:30] *** Quits: siers (~ij@user/ij) (Quit: ZNC 1.8.1 - https://znc.in)
[17:44:38] *** Quits: yauhsien (~yauhsien@61-231-30-221.dynamic-ip.hinet.net) (Ping timeout: 260 seconds)
[17:46:07] *** Joins: siers (~ij@user/ij)
[17:48:44] *** Joins: lexi-lambda (sid92601@id-92601.hampstead.irccloud.com)
[17:49:03] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:dcf1:6c47:4df:1ed1) (Ping timeout: 264 seconds)
[17:50:00] *** Joins: jkaye (~jkaye@c-71-205-220-154.hsd1.co.comcast.net)
[17:50:36] *** Joins: atwm (~andrew@178.197.234.40)
[17:51:27] *** Quits: deadmarshal (~deadmarsh@95.38.113.89) (Ping timeout: 264 seconds)
[17:52:40] *** Joins: ph88^ (~ph88@ip5f5af068.dynamic.kabel-deutschland.de)
[17:53:51] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Ping timeout: 276 seconds)
[17:55:15] *** Quits: atwm (~andrew@178.197.234.40) (Client Quit)
[17:55:17] *** Joins: FinnElija (~finn_elij@user/finn-elija/x-0085643)
[17:55:35] *** Joins: atwm (~andrew@178.197.234.40)
[17:56:11] *** Quits: ph88 (~ph88@2a02:8109:9e00:71d0:8486:2f47:1ad1:518f) (Ping timeout: 245 seconds)
[17:56:47] *** Joins: hiruji (~hiruji@user/hiruji)
[18:03:11] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[18:03:12] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[18:03:12] *** Joins: wroathe (~wroathe@user/wroathe)
[18:05:46] *** Quits: yuri (~yuri@nat-0-31.msu.umos.ru) (Ping timeout: 245 seconds)
[18:05:56] *** Quits: pfurla (~pfurla@2804:14d:5c81:4104:7d52:bf34:226e:199c) (Quit: gone to sleep. ZZZzzz…)
[18:06:10] *** Joins: yuri (~yuri@nat-0-31.msu.umos.ru)
[18:08:20] *** Joins: obs\ (~obscur1ty@156.192.160.204)
[18:08:20] *** Quits: obs\ (~obscur1ty@156.192.160.204) (Changing host)
[18:08:20] *** Joins: obs\ (~obscur1ty@user/obs/x-5924898)
[18:08:59] *** Joins: pfurla (~pfurla@201.17.118.230)
[18:11:19] *** Quits: hippoid (~hippoid@c-98-220-13-8.hsd1.il.comcast.net) (Ping timeout: 268 seconds)
[18:11:56] *** Joins: slowButPresent (~slowButPr@user/slowbutpresent)
[18:15:23] *** Quits: atwm (~andrew@178.197.234.40) (Quit: WeeChat 3.3)
[18:15:31] *** Joins: zer0bitz (~zer0bitz@dsl-hkibng31-54fabc-15.dhcp.inet.fi)
[18:16:12] *** Quits: tomboy64 (~tomboy64@user/tomboy64) (Quit: Off to see the wizard.)
[18:16:42] *** Joins: deadmarshal (~deadmarsh@95.38.113.89)
[18:19:11] *** Joins: tomboy64 (~tomboy64@user/tomboy64)
[18:20:59] *** Joins: lagash (lagash@lagash.shelltalk.net)
[18:23:05] *** Joins: hippoid (~hippoid@c-98-220-13-8.hsd1.il.comcast.net)
[18:24:31] *** Quits: cfricke (~cfricke@user/cfricke) (Ping timeout: 245 seconds)
[18:25:03] *** Quits: tnks (sid412124@helmsley.irccloud.com) (Ping timeout: 264 seconds)
[18:28:14] *** Joins: tnks (sid412124@id-412124.helmsley.irccloud.com)
[18:29:26] *** Joins: max22- (~maxime@2a01cb0883359800cde23c9f8e51e66f.ipv6.abo.wanadoo.fr)
[18:31:29] *** Joins: atwm (~weechat@19-193-28-81.ftth.cust.kwaoo.net)
[18:33:07] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[18:36:53] *** Quits: atwm (~weechat@19-193-28-81.ftth.cust.kwaoo.net) (Quit: WeeChat 3.3)
[18:37:10] *** Joins: atwm (~weechat@19-193-28-81.ftth.cust.kwaoo.net)
[18:37:15] *** Joins: Sgeo (~Sgeo@user/sgeo)
[18:38:19] *** Quits: atwm (~weechat@19-193-28-81.ftth.cust.kwaoo.net) (Client Quit)
[18:39:25] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[18:40:04] *** Quits: pfurla (~pfurla@201.17.118.230) (Quit: gone to sleep. ZZZzzz…)
[18:40:52] <maerwald[m]> "Declarative"
[18:41:08] *** Quits: pavonia (~user@user/siracusa) (Quit: Bye!)
[18:44:45] *** Parts: obs\ (~obscur1ty@user/obs/x-5924898) (Leaving)
[18:54:10] *** Quits: deadmarshal (~deadmarsh@95.38.113.89) (Ping timeout: 260 seconds)
[18:56:06] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[18:56:06] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[18:56:06] *** Joins: wroathe (~wroathe@user/wroathe)
[18:56:37] *** Joins: cfricke (~cfricke@user/cfricke)
[19:01:10] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 260 seconds)
[19:02:06] *** Joins: shryke (~shryke@91.103.43.254)
[19:03:56] <shryke> How do you deal with code like 'fmap (fmap getFirst) . businessLogicHere . fmap (fmap (fmap First))'? It does not seem too great for readability...
[19:04:06] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[19:04:46] <maralorn> Is there a reasonable way to use a concrete monad like (ReaderT env IO) in a way that a) ghc always knows it’s this monad and can optimize accordingly and b) I can restrict the capabilities of a function by the type signature?
[19:04:55] <shryke> coerce does not work here, no newtypes
[19:05:38] <[exa]> shryke: make the wrap into a function so that you can write it as `runOnFirst bussinesLogicHere`
[19:06:06] <[exa]> also there might be a lensy version of that :]
[19:06:09] <dminuoso> shryke: businessLogicHere transforms the shape?
[19:06:18] <dminuoso> Or did you miss one layer of fmap on the left hand side?
[19:06:37] <shryke> [exa]: Sorry, I was a bit unclear about my beef with this code - that triple 'fmap' bugs me
[19:06:44] *** Quits: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao) (Remote host closed the connection)
[19:06:55] <dminuoso> shryke: As a short gap you can write fmap3 = fmap . fmap . fmap
[19:07:09] *** Joins: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao)
[19:07:27] <shryke> dminuoso: it changes the shape, yes. Essentially, businessLogic is 'foldr1 (liftA2 mappend)'
[19:07:29] <dminuoso> Though Id try and use a newtype wrapper here potentially, then you can use stuff like `ala`
[19:07:34] <dminuoso> Mmm
[19:07:50] <dminuoso> Then `fmap2 getFirst . businessLogicHere . fmap3 First`
[19:08:50] <shryke> I fear that lens-like solution would be on the same level of unreadability
[19:09:45] <[exa]> shryke: the internal-est functor is actually a foldable or traversable right?
[19:11:11] *** Quits: acidjnk (~acidjnk@p200300d0c7271e823d8ddc81d8ce7005.dip0.t-ipconnect.de) (Ping timeout: 245 seconds)
[19:11:30] <shryke> exa: both, actually=)
[19:12:03] <shryke> dminuoso: I'll write down that fmap2/3 idea, thanks
[19:14:41] <[exa]> shryke: if businessLogic actually requires the whole 3 levels of functors then the fmap3/fmap2 is probably the easiest way; if it's somehow separable, lensing the way through could look nice (with e.g. State that allows you to carry some information through the whole structure)
[19:15:56] <[exa]> the main question is if the 1st and 2nd levels of fmap can be joined together somehow, i.e. if there's something in the bussinessLogicHere (such as traverse) that could be fused with them
[19:20:42] <shryke> exa: Sorry, I do not quite understand your idea about separation and fusing =(
[19:21:05] <shryke> selectFirst :: Applicative m => NonEmpty (m (Validation (NonEmpty e) a)) -> m (Validation (NonEmpty e) a)
[19:21:07] <shryke> selectFirst = fmap (fmap getFirst) . foldr1 (liftA2 (<>)) . fmap (fmap (fmap First))
[19:21:34] <shryke> That's the whole code, with Validation coming from validate-selective
[19:27:01] *** Quits: rubin55 (sid175221@id-175221.hampstead.irccloud.com) (Ping timeout: 245 seconds)
[19:27:22] *** Joins: rubin55 (sid175221@id-175221.hampstead.irccloud.com)
[19:28:27] *** Quits: wei2912 (~wei2912@116.88.103.128) (Quit: Lost terminal)
[19:28:44] *** Quits: lortabac (~lortabac@2a01:e0a:541:b8f0:d444:3bcd:ae33:7f0) (Quit: WeeChat 2.8)
[19:29:13] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Remote host closed the connection)
[19:30:11] *** Quits: ru0mad[m] (~ru0madmat@2001:470:69fc:105::9b2) (Quit: You have been kicked for being idle)
[19:33:57] *** Quits: S11001001 (sid42510@ilkley.irccloud.com) (Ping timeout: 268 seconds)
[19:34:03] *** Quits: mustafa (sid502723@rockylinux/releng/mustafa) (Ping timeout: 264 seconds)
[19:34:06] *** Quits: hendi (sid489601@id-489601.lymington.irccloud.com) (Ping timeout: 245 seconds)
[19:34:32] *** Quits: idnar (sid12240@debian/mithrandi) (Ping timeout: 245 seconds)
[19:34:51] *** Quits: ProofTechnique (sid79547@id-79547.ilkley.irccloud.com) (Read error: Connection reset by peer)
[19:34:55] *** Quits: cbarrett (sid192934@id-192934.helmsley.irccloud.com) (Ping timeout: 250 seconds)
[19:34:56] *** Quits: lexi-lambda (sid92601@id-92601.hampstead.irccloud.com) (Ping timeout: 245 seconds)
[19:35:21] *** Quits: elvishjerricco (sid237756@id-237756.helmsley.irccloud.com) (Ping timeout: 245 seconds)
[19:35:47] *** Joins: S11001001 (sid42510@5.254.36.60)
[19:35:52] *** Quits: rubin55 (sid175221@id-175221.hampstead.irccloud.com) (Ping timeout: 260 seconds)
[19:35:59] *** Quits: glowcoil (sid3405@id-3405.tinside.irccloud.com) (Read error: Connection reset by peer)
[19:36:01] *** Joins: mustafa (sid502723@rockylinux/releng/mustafa)
[19:36:12] *** Quits: aarchi (sid486183@id-486183.uxbridge.irccloud.com) (Ping timeout: 265 seconds)
[19:36:14] *** Quits: sa (sid1055@id-1055.tinside.irccloud.com) (Ping timeout: 250 seconds)
[19:36:17] *** Joins: ProofTechnique (sid79547@5.254.36.60)
[19:36:18] *** Quits: enemeth79 (sid309041@lymington.irccloud.com) (Read error: Connection reset by peer)
[19:36:18] *** Quits: gonz_____ (sid304396@id-304396.lymington.irccloud.com) (Read error: Connection reset by peer)
[19:36:27] *** Quits: sa1_ (sid7690@id-7690.ilkley.irccloud.com) (Ping timeout: 264 seconds)
[19:36:27] *** Quits: saolsen (sid26430@lymington.irccloud.com) (Ping timeout: 264 seconds)
[19:36:27] *** Quits: scav (sid309693@helmsley.irccloud.com) (Ping timeout: 264 seconds)
[19:36:43] *** Joins: glowcoil (sid3405@id-3405.tinside.irccloud.com)
[19:36:54] *** Joins: gonz_____ (sid304396@id-304396.lymington.irccloud.com)
[19:36:55] *** Joins: enemeth79 (sid309041@id-309041.lymington.irccloud.com)
[19:36:58] *** Joins: sa (sid1055@id-1055.tinside.irccloud.com)
[19:37:01] *** Quits: tapas (sid467876@id-467876.ilkley.irccloud.com) (Ping timeout: 245 seconds)
[19:37:01] *** Quits: edwardk (sid47016@haskell/developer/edwardk) (Ping timeout: 245 seconds)
[19:37:01] *** Quits: typetetris (sid275937@id-275937.tinside.irccloud.com) (Ping timeout: 245 seconds)
[19:37:02] *** Quits: SrPx (sid108780@uxbridge.irccloud.com) (Ping timeout: 268 seconds)
[19:37:11] *** Joins: hendi (sid489601@id-489601.lymington.irccloud.com)
[19:37:26] *** Quits: bw (sid2730@user/betawaffle) (Ping timeout: 245 seconds)
[19:37:26] *** Quits: teehemkay (sid14792@id-14792.lymington.irccloud.com) (Ping timeout: 245 seconds)
[19:37:38] *** Joins: elvishjerricco (sid237756@id-237756.helmsley.irccloud.com)
[19:37:39] *** Joins: rubin55 (sid175221@id-175221.hampstead.irccloud.com)
[19:37:40] *** Joins: typetetris (sid275937@id-275937.tinside.irccloud.com)
[19:37:41] *** Joins: aarchi (sid486183@id-486183.uxbridge.irccloud.com)
[19:37:44] *** Joins: cbarrett (sid192934@id-192934.helmsley.irccloud.com)
[19:37:48] *** Joins: sa1_ (sid7690@id-7690.ilkley.irccloud.com)
[19:37:57] *** Quits: SanchayanMaity (sid478177@id-478177.hampstead.irccloud.com) (Ping timeout: 250 seconds)
[19:38:11] *** Joins: lexi-lambda (sid92601@id-92601.hampstead.irccloud.com)
[19:38:17] *** Joins: bw (sid2730@user/betawaffle)
[19:38:18] *** Joins: teehemkay (sid14792@id-14792.lymington.irccloud.com)
[19:38:33] *** Joins: tapas (sid467876@id-467876.ilkley.irccloud.com)
[19:38:40] *** Quits: tromp (~textual@dhcp-077-249-230-040.chello.nl) (Quit: My iMac has gone to sleep. ZZZzzz…)
[19:38:40] *** Joins: idnar (sid12240@debian/mithrandi)
[19:38:44] *** Joins: saolsen (sid26430@id-26430.lymington.irccloud.com)
[19:38:46] *** Joins: edwardk (sid47016@haskell/developer/edwardk)
[19:38:58] *** Joins: SrPx (sid108780@id-108780.uxbridge.irccloud.com)
[19:39:10] *** Joins: scav (sid309693@id-309693.helmsley.irccloud.com)
[19:39:13] *** Joins: SanchayanMaity (sid478177@id-478177.hampstead.irccloud.com)
[19:41:16] *** Quits: tv (~tv@user/tv) (Read error: Connection reset by peer)
[19:41:48] *** Joins: yauhsien (~yauhsien@61-231-30-221.dynamic-ip.hinet.net)
[19:46:11] *** Quits: yauhsien (~yauhsien@61-231-30-221.dynamic-ip.hinet.net) (Ping timeout: 245 seconds)
[19:46:39] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 264 seconds)
[19:46:52] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[19:50:57] *** Joins: lavaman (~lavaman@98.38.249.169)
[19:53:01] *** Quits: juhp (~juhp@128.106.188.82) (Remote host closed the connection)
[19:55:21] *** Quits: sa (sid1055@id-1055.tinside.irccloud.com) (Ping timeout: 245 seconds)
[19:55:39] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 264 seconds)
[19:55:39] *** Quits: aristid (sid1599@id-1599.uxbridge.irccloud.com) (Ping timeout: 264 seconds)
[19:57:33] *** Joins: sa (sid1055@id-1055.tinside.irccloud.com)
[19:58:23] *** Joins: tromp (~textual@dhcp-077-249-230-040.chello.nl)
[19:58:49] *** Joins: aristid (sid1599@id-1599.uxbridge.irccloud.com)
[19:58:49] *** Joins: tv (~tv@user/tv)
[20:00:27] *** Quits: hippoid (~hippoid@c-98-220-13-8.hsd1.il.comcast.net) (Ping timeout: 264 seconds)
[20:03:11] *** Joins: puke (~puke@user/puke)
[20:04:32] *** Joins: burnsidesLlama (~burnsides@dhcp168-024.wadham.ox.ac.uk)
[20:05:09] *** Quits: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de) (Read error: Connection reset by peer)
[20:08:08] *** Quits: qwedfg (~qwedfg@user/qwedfg) (Quit: ZNC - https://znc.in)
[20:09:01] *** Quits: DNH (~DNH@2a02:8108:1100:16d8:5c1e:444:cdf3:4e4) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[20:09:15] *** glguy_ is now known as glguy
[20:09:31] *** Joins: qwedfg (~qwedfg@user/qwedfg)
[20:10:16] *** Joins: hippoid (~hippoid@c-98-220-13-8.hsd1.il.comcast.net)
[20:10:57] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 268 seconds)
[20:11:11] *** Joins: pfurla (~pfurla@2804:14d:5c81:4104:7d52:bf34:226e:199c)
[20:14:24] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:dcf1:6c47:4df:1ed1)
[20:19:47] *** Joins: deadmarshal (~deadmarsh@95.38.113.89)
[20:22:30] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[20:25:24] *** Joins: viluon (uid453725@id-453725.helmsley.irccloud.com)
[20:27:01] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 245 seconds)
[20:27:59] <viluon> hi, I'm trying to heap-profile a program. It runs for about 5 minutes without profiling, for about 2 hours 45 minutes with profiling. One profiled run just finished (`+RTS -p -h`) and the profiles I got from it claim the program only ran for 224 seconds. The heap profile also ranges over only 3 GB of memory when max RSS was 10 GB (sustained, not a sudden spike). This is pretty frustrating, where did the profiling data go?
[20:28:08] *** Quits: pfurla (~pfurla@2804:14d:5c81:4104:7d52:bf34:226e:199c) (Quit: gone to sleep. ZZZzzz…)
[20:28:30] *** Quits: dyeplexer (~dyeplexer@user/dyeplexer) (Remote host closed the connection)
[20:30:23] *** Joins: DNH (~DNH@2a02:8108:1100:16d8:5c1e:444:cdf3:4e4)
[20:30:46] *** Quits: CiaoSen (~Jura@p200300c95716ce002a3a4dfffe84dbd5.dip0.t-ipconnect.de) (Ping timeout: 245 seconds)
[20:36:27] *** Joins: tzh (~tzh@c-24-21-73-154.hsd1.or.comcast.net)
[20:37:47] <zero> i have ~/.cabal/store/ghc-8.10.4 and ~/.cabal/store/ghc-8.10.7 do i need them both?
[20:38:07] <sclv> zero you need whichever one corresponds to the ghc you're using
[20:38:20] <sclv> if you upgraded ghc and plan to never ever use the older one again you can remove the old store
[20:38:40] <zero> thanks
[20:38:45] <zero> just making sure
[20:40:37] *** Quits: enoq (~enoq@2a05:1141:1f5:5600:b9c9:721a:599:bfe7) (Quit: enoq)
[20:41:15] *** Quits: deadmarshal (~deadmarsh@95.38.113.89) (Ping timeout: 264 seconds)
[20:42:20] *** Joins: _ht (~quassel@82-169-194-8.biz.kpn.net)
[20:43:33] <[exa]> viluon: it might help to increase -V and take a smaller blob of data for initial profiling
[20:43:42] <sshine> zero, it is safe to remove any of them, but compiling will take longer on the next project that depends on the one you delete. :)
[20:45:03] *** Joins: pfurla (~pfurla@2804:14d:5c81:4104:7d52:bf34:226e:199c)
[20:45:44] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:dcf1:6c47:4df:1ed1) (Remote host closed the connection)
[20:45:53] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:dcf1:6c47:4df:1ed1)
[20:46:16] <zero> no trouble, i am cleaning my disk and don't need the older version
[20:48:02] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[20:48:03] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[20:48:03] *** Joins: wroathe (~wroathe@user/wroathe)
[20:48:12] <dsal> I'm super scared to do a `nix-store collect-garbage` at this point.  heh
[20:48:41] <dsal> /nix on my laptop is about 105GB
[20:49:56] <shapr> dsal: that's pretty good, I think I cleaned 500 gb last time I ran gc
[20:50:05] * shapr checks size of /nix
[20:50:22] <dsal> I've got a ton of x86_64 stuff there I'm not using anymore.
[20:50:29] <dsal> I might run it just to cause misery for me today.
[20:50:59] *** Joins: servytor (uid525486@id-525486.hampstead.irccloud.com)
[20:51:51] *** Joins: bollu (uid233390@id-233390.helmsley.irccloud.com)
[20:54:46] *** Quits: tcard (~tcard@p2878075-ipngn18701hodogaya.kanagawa.ocn.ne.jp) (Remote host closed the connection)
[20:55:00] *** Joins: tcard (~tcard@p2878075-ipngn18701hodogaya.kanagawa.ocn.ne.jp)
[20:55:58] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:dcf1:6c47:4df:1ed1) (Remote host closed the connection)
[20:59:03] *** haruhimywife[m] is now known as fsckskye[m]
[21:02:19] *** Quits: ubert (~Thunderbi@2a02:8109:9880:303c:ca5b:76ff:fe29:f233) (Remote host closed the connection)
[21:04:59] *** Quits: pfurla (~pfurla@2804:14d:5c81:4104:7d52:bf34:226e:199c) (Quit: gone to sleep. ZZZzzz…)
[21:05:52] *** Quits: Jing (~hedgehog@2604:a840:3::1094) (Remote host closed the connection)
[21:06:40] *** Quits: DNH (~DNH@2a02:8108:1100:16d8:5c1e:444:cdf3:4e4) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[21:06:51] *** Joins: Jing (~hedgehog@2604:a840:3::105f)
[21:08:18] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 268 seconds)
[21:11:26] *** Joins: DNH (~DNH@2a02:8108:1100:16d8:5c1e:444:cdf3:4e4)
[21:15:49] *** Quits: yuri (~yuri@nat-0-31.msu.umos.ru) (Ping timeout: 256 seconds)
[21:16:03] *** Quits: zava (~zava@ip5f5bdf0f.dynamic.kabel-deutschland.de) (Ping timeout: 264 seconds)
[21:17:25] *** Joins: oxide (~lambda@user/oxide)
[21:19:58] <dsal> LOL.  /nix is under 9GB now.
[21:20:48] <dsal> Oh nice, and now my things don't build.
[21:21:57] <shapr> mine is 233gb
[21:22:03] *** Quits: hippoid (~hippoid@c-98-220-13-8.hsd1.il.comcast.net) (Ping timeout: 256 seconds)
[21:23:19] *** Joins: lavaman (~lavaman@98.38.249.169)
[21:23:38] <dsal> There were two libraries that my ghc depends on that were missing.  That's kind of interesting.  Luckily, the error messages make it easy to understand exactly what needed to be fixed.
[21:23:48] *** Quits: ChaiTRex (~ChaiTRex@user/chaitrex) (Ping timeout: 276 seconds)
[21:24:05] *** Joins: hippoid (~hippoid@c-98-220-13-8.hsd1.il.comcast.net)
[21:24:16] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[21:24:17] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[21:24:17] *** Joins: wroathe (~wroathe@user/wroathe)
[21:24:39] <dsal> libgmp and libffi in particular
[21:26:04] *** Joins: ChaiTRex (~ChaiTRex@user/chaitrex)
[21:27:21] <zero> o.o
[21:27:43] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 256 seconds)
[21:28:30] * zero caresses his 13GiB disk
[21:28:58] *** Joins: Guest17 (~Guest17@wificampus-097109.grenet.fr)
[21:29:06] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 260 seconds)
[21:30:12] *** Quits: mbuf (~Shakthi@27.58.141.80) (Quit: Leaving)
[21:35:42] *** Joins: deadmarshal (~deadmarsh@95.38.113.89)
[21:36:20] *** Quits: ChaiTRex (~ChaiTRex@user/chaitrex) (Remote host closed the connection)
[21:36:47] *** Joins: ChaiTRex (~ChaiTRex@user/chaitrex)
[21:37:46] *** Quits: DNH (~DNH@2a02:8108:1100:16d8:5c1e:444:cdf3:4e4) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[21:39:57] *** Quits: Topsi (~Tobias@dyndsl-095-033-021-206.ewe-ip-backbone.de) (Read error: Connection reset by peer)
[21:41:32] *** Joins: nvmd (~nvmd@user/nvmd)
[21:43:09] *** Joins: yauhsien (~yauhsien@61-231-30-221.dynamic-ip.hinet.net)
[21:43:14] *** Joins: gaff (~gaff@49.207.223.179)
[21:45:01] <gaff> compare x y | x == y = EQ, | x <= y = LT, otherwise = GT.  why does it use `<=` instead of just `<'?
[21:45:55] <geekosaur> because that allows the other comparison functions to be defined in terms of <=, ==, and negation
[21:46:08] <geekosaur> the minimal definition of Ord is either <= or compare
[21:46:31] <geekosaur> (not sure the other funxtions *are* defined that way currently, but.)
[21:46:54] <EvanR> raising the question of why (<=) is in that rol^
[21:47:08] <EvanR> er, why <= and not < is used in this way
[21:47:18] *** Quits: fr33domlover (~fr33@2.55.141.188) (Ping timeout: 260 seconds)
[21:47:28] *** Joins: hololeap_ (~hololeap@user/hololeap)
[21:47:39] <gaff> EvanR: yeah
[21:47:51] *** Quits: yauhsien (~yauhsien@61-231-30-221.dynamic-ip.hinet.net) (Ping timeout: 264 seconds)
[21:47:51] *** Quits: hololeap (~hololeap@user/hololeap) (Ping timeout: 276 seconds)
[21:48:22] <gaff> geekosaur: which are the "other" comparison functions?  you mean stuff like <, >, etc?
[21:48:34] <geekosaur> yes
[21:48:44] <EvanR> LTE gives the algebraic property that x LTE x, for what thats worth
[21:49:57] <gaff> EvanR: i am not sure i understand what you just said about algebraic property
[21:50:02] <EvanR> you could be working with something that supports LTE and not equality test
[21:50:46] <EvanR> or its technically challenging to tell the difference
[21:51:55] <sm> g'day all. PSA for vs code haskell users: disable Outline: Show Modules to hide imports in outline pane and make it more useful
[21:53:20] <sm> and while I'm here.. if you have TH in your project, stick with hls 1.4.0 a little longer till 1.5.1 arrives
[21:53:20] <EvanR> haskell people like partial orders, and for the comparison to be a partial order, x must be less than or equal to itself
[21:53:49] <EvanR> unlike <
[21:55:27] *** Joins: abhixec (~abhixec@c-67-169-139-16.hsd1.ca.comcast.net)
[21:55:53] <monochrom> <= vs < is once again just another big endian vs little endian, or whether 0 is a natural number.
[21:56:02] <gaff> geekosaur: suppose i defined compare using <.  i could still define other comparison operators using compare.  i am not sure i see the problem. 
[21:56:22] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:dcf1:6c47:4df:1ed1)
[21:56:51] <monochrom> BTW there is also disagreement on whether "positive" means >0 or >=0.
[21:57:18] <EvanR> relations like <= come in more situations than < or ==, it's more general
[21:57:31] <geekosaur> gaff, at this point I suspect it has to do with what EvanR said about partial orders. you're assuming a total order
[21:57:54] *** Joins: hololeap (~hololeap@user/hololeap)
[21:58:00] <gaff> for example x <=y = (compare x y == EQ) || (compare x y == LT)
[21:58:13] <geekosaur> if it's a partial order, compare defined with <= should be strictly more defined than with <. I think.
[21:58:15] *** Quits: hololeap_ (~hololeap@user/hololeap) (Ping timeout: 276 seconds)
[21:58:34] <EvanR> yeah it's useful esp with laziness
[21:58:40] <geekosaur> partial orders are not particularly intuitive
[21:58:53] <geekosaur> we assume any ordering relation is total
[21:59:14] <gaff> sorry, what do you mean by "partial" order?
[21:59:42] <EvanR> an example is the substring relation
[21:59:56] <EvanR> "abc" <= "abcde"
[22:00:09] <EvanR> but "abc" isn't related to "def" one way or the other
[22:00:35] *** Quits: hippoid (~hippoid@c-98-220-13-8.hsd1.il.comcast.net) (Ping timeout: 256 seconds)
[22:00:36] <EvanR> i should say, prefix relation, which lets you quit checking early
[22:00:52] *** Quits: Everything (~Everythin@37.115.210.35) (Quit: leaving)
[22:01:03] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:dcf1:6c47:4df:1ed1) (Ping timeout: 264 seconds)
[22:01:53] <gaff> so what exactly is "partial" about it?  you mean you only need to check things partially?
[22:02:25] <EvanR> not every pair of strings are related, or ordered wrt each other... aka some pairs of "incomparable"
[22:02:28] <geekosaur> it's not defined in some cases
[22:02:43] <EvanR> er, are incomparable
[22:02:45] <geekosaur> with respect to prefixes, "abc" is not in any way related to "def"
[22:03:12] <gaff> ok
[22:03:31] <EvanR> kind of doesn't apply to Ord because you expect an answer for every pair of strings xD
[22:03:35] <geekosaur> so the prefix relation is only a partial orderingt
[22:03:48] <gaff> so you define a minimal set of comparisions, rather than a comprehensive or exhaustive one?
[22:03:57] <sshine> lexicographical order is a full ordering
[22:04:04] <gaff> ok
[22:05:39] <sshine> gaff, another example of something that has a partial order is a lattice: https://i.stack.imgur.com/eSqlI.png
[22:06:03] *** Joins: hippoid (~hippoid@c-98-220-13-8.hsd1.il.comcast.net)
[22:06:24] <EvanR> since Ord is probably expecting total order (x <= y or y <= x for all x and y), this is all probably nonsense. But partial orders come up so much that the designers may led that bleed into the API xD
[22:06:27] *** Quits: ph88^ (~ph88@ip5f5af068.dynamic.kabel-deutschland.de) (Ping timeout: 264 seconds)
[22:07:29] <gaff> EvanR: yeah, thanks for saying that because i was wondering how what you said about partial ordering matches up with my question on compare 
[22:07:40] <EvanR> > ((0/0) <= 1, 1 <= (0/0) -- except for this
[22:07:41] <reumeth> geekosaur: I got further with my JSON fuzz thing. Now I'm stuck because I seem to be missing something that looks like mapM for a HashMap. Is there such a thing?
[22:07:42] <lambdabot>  <hint>:1:43: error:
[22:07:42] <lambdabot>      parse error (possibly incorrect indentation or mismatched brackets)
[22:07:49] <EvanR> > ((0/0) <= 1, 1 <= (0/0)) -- except for this
[22:07:50] <lambdabot>  (False,False)
[22:08:27] <geekosaur> ok, the Report says Ord is total
[22:08:47] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[22:09:18] *** Joins: trcc (~trcc@2-104-60-169-cable.dk.customer.tdc.net)
[22:09:29] <sshine> I actually thought this conversation started from Rust's std::cmp::PartialOrd :)
[22:09:47] <monochrom> Partial order can be equivalently defined in terms of <.  The axioms are: < is irreflexive and transitive.  <= is not the only way to think of partial orders.
[22:10:00] <geekosaur> reumeth, mapM is traverse and HashMap has a Traversable instance
[22:10:22] <gaff> so just to clear up, is there any real reason why compare is defined using <=?
[22:10:26] <geekosaur> (mapM is kind of historical)
[22:10:27] <monochrom> No.
[22:10:27] <EvanR> it may be that <= is simpler in constructive 
[22:10:29] <sshine> gaff, https://doc.rust-lang.org/std/cmp/trait.PartialOrd.html -- so Maybe Ordering.
[22:10:43] <EvanR> or I'm just cargo culting
[22:10:51] <gaff> ok
[22:10:53] <gaff> ha
[22:10:55] <sshine> gaff, my guess is: because classic algorithms textbooks use <=... at least, that's where I started doing <= by default. :-P
[22:11:08] <monochrom> Just another big endian vs little endian.
[22:11:15] *** Quits: hippoid (~hippoid@c-98-220-13-8.hsd1.il.comcast.net) (Ping timeout: 264 seconds)
[22:11:17] <geekosaur> this is another of those instances where you'd like to be able to hunt down the original Haskell designers and ask why, in other words
[22:11:24] <reumeth> geekosaur: Wow, I'm so stupid that I didn't realize that. Now it works, thanks!
[22:11:33] <sshine> yeah, as long as you have a convention, your thingies are gonna end up on the expected side of the balanced tree.
[22:11:35] <EvanR> irreflexive involves a negative assertion which are trickier in constructive settings
[22:11:50] <gaff> ok ... complicated origins lost in the mists of time ... poetic
[22:11:53] <monochrom> <= is more convenient in denotational semantics. This affects Haskell, some Haskellers use denotational semantics to design and use Haskell.
[22:11:58] <reumeth> I think I got tripped up because I had to use HashMap.map for the normal map, so I expected a HashMap.mapM
[22:12:11] <monochrom> But < is more convenient when you work with well-founded induction.
[22:12:35] <gaff> monochrom: i see
[22:13:14] *** Joins: DNH (~DNH@2a02:8108:1100:16d8:5c1e:444:cdf3:4e4)
[22:13:32] <monochrom> I also bet that laziness doesn't favour either one. Where there is no lazy algorithm for <, I bet you there is also none for <=.
[22:14:07] <EvanR> if you don't care if something's equal or not, that's automatically making the problem less specific
[22:14:26] <EvanR> you won't need to check for NOT equal
[22:14:35] <EvanR> as stipulated in <
[22:15:04] <gaff> yeah
[22:15:04] *** Joins: hippoid (~hippoid@c-98-220-13-8.hsd1.il.comcast.net)
[22:15:15] <monochrom> That sounds very nice. Except there is no example.
[22:15:39] <EvanR> testing string prefixes?
[22:15:56] <EvanR> as opposed to is prefix but not also equal
[22:16:42] <monochrom> For finite strings both <= and < can be done.
[22:16:54] <monochrom> For infinite strings both <= and < can non-terminate.
[22:17:21] <AWizzArd> What is TypeInType for? Is this just a shortcut so that I don't explicitly have to use the PolyKinds, DataKinds and KindSignatures extensions?
[22:17:47] *** Quits: tromp (~textual@dhcp-077-249-230-040.chello.nl) (Quit: My iMac has gone to sleep. ZZZzzz…)
[22:18:11] <monochrom> <= still needs to wait for one string to end before saying "yes". This is no better than <.
[22:18:21] <EvanR> yeah
[22:19:03] <EvanR> in well founded induction, does this "not (a < a)" even come up... if not I wonder what the relevant property is
[22:19:13] <geekosaur> AWizzArd, not quite. TypeInType simplifies types, kinds, etc. these days it's on by default iirc
[22:19:52] <Franciman> it's cool, it's only side effect is that it makes the logic inconsistent
[22:19:56] *** Joins: tromp (~textual@dhcp-077-249-230-040.chello.nl)
[22:19:57] <Franciman> but who gares!
[22:20:00] <geekosaur> you could say it's a compiler simplification that originally was conditionally enabled for testing, but these days is conditionally disableable in case of portability issues
[22:20:25] <geekosaur> probably it'll go away at some point because there's no reason to carry the old kind system forward any more
[22:20:26] *** Quits: myShoggoth (~myShoggot@97-120-85-195.ptld.qwest.net) (Ping timeout: 260 seconds)
[22:21:03] *** Joins: myShoggoth (~myShoggot@97-120-85-195.ptld.qwest.net)
[22:21:23] <geekosaur> it does iirc make things like PolyKinds easier to implement
[22:21:45] <AWizzArd> geekosaur: could you list one example of what TypeInType is doing which is *not* available when PolyKinds, DataKinds and KindSignatures are turned on?
[22:22:00] <monochrom> Well-founded induction: To prove forall x. P(x), prove this: forall x. (forall w. if w<x then P(w)) implies P(x)
[22:22:02] <AWizzArd> So anything additional that it adds on top of those?
[22:22:13] <geekosaur> uh, how does that question follow from what I said?
[22:22:53] <geekosaur> TypeInType is a prerequisite for those, not an extension to them
[22:23:10] <EvanR> i see, so w not equal x is critical for that to get started
[22:27:52] <geekosaur> AWizzArd, absent TypeInType ghc's kind system is too limited to do things like PolyKinds or DataKinds. with it, we can start talking about those meaningfully
[22:28:49] <monochrom> Is the logic inconsistent? Or is the meta-logic inconsistent?
[22:29:25] <monochrom> The meta-logical inconsistency is in reading "X -> Y" as "X implies Y", for example.
[22:29:33] *** Quits: max22- (~maxime@2a01cb0883359800cde23c9f8e51e66f.ipv6.abo.wanadoo.fr) (Ping timeout: 250 seconds)
[22:30:00] <monochrom> If you read it as "X implies Y provided non-bottom prerequisites" then it's fine.
[22:30:04] *** Quits: jonathanx (~jonathan@h-178-174-176-109.A357.priv.bahnhof.se) (Quit: Leaving)
[22:30:22] *** Quits: tromp (~textual@dhcp-077-249-230-040.chello.nl) (Quit: My iMac has gone to sleep. ZZZzzz…)
[22:30:46] *** Quits: gaff (~gaff@49.207.223.179) ()
[22:31:33] <monochrom> Ugh missed the opportunity to be a badass.
[22:31:47] <monochrom> If you read it as "X implies Y provided non-bottom prerequisites" then the inconsistency disappears in a puff of logic. >:)
[22:32:17] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[22:33:08] <AWizzArd> geekosaur: okay, so it’s more like foundational to the others if I understand you correctly.
[22:33:15] <geekosaur> yes
[22:33:18] <hskpractice> is it possible to, in ghci, get `Maybe`s Functor instance definition?
[22:33:27] <hskpractice> :info "instance Functor Maybe" or something
[22:33:57] <geekosaur> with the old kind system, the only basic kind was * and you could only use parentheses and arrows to make more complex kinds
[22:33:58] *** Quits: deadmarshal (~deadmarsh@95.38.113.89) (Ping timeout: 260 seconds)
[22:34:15] <geekosaur> and you couldn't actually talk about kind variables, they were only used internally, iirc
[22:34:31] <geekosaur> TypeInType means "reuse the type system as the kind system"
[22:34:46] <geekosaur> so now you get the full power of the type system to describe kinds as well
[22:34:50] <monochrom> hskpractice: No, generally ghci does not show or even know source code.
[22:35:24] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:dcf1:6c47:4df:1ed1)
[22:38:04] *** Joins: emf (~emf@2620:10d:c090:400::5:14a4)
[22:40:45] *** Quits: burnsidesLlama (~burnsides@dhcp168-024.wadham.ox.ac.uk) (Remote host closed the connection)
[22:41:11] *** Quits: trcc (~trcc@2-104-60-169-cable.dk.customer.tdc.net) (Remote host closed the connection)
[22:41:14] <hskpractice> monochrom: ok, thanks
[22:41:44] *** Joins: trcc (~trcc@2-104-60-169-cable.dk.customer.tdc.net)
[22:42:27] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 264 seconds)
[22:42:44] <geekosaur> for many things there's only compiled code available anyway, so not really anything to show
[22:42:57] <geekosaur> you'd need a copy of the source sitting on disk somewhere
[22:44:06] *** Joins: ubert (~Thunderbi@p200300ecdf0ba2dd58f8dc088e4eca94.dip0.t-ipconnect.de)
[22:44:25] <geekosaur> the ecosystem is slowly moving toward making stuff like that possible but you'd still need to e.g. have the base package source sitting around, when it's normally only the binary library
[22:44:36] *** Joins: alzgh (~alzgh@user/alzgh)
[22:45:33] *** Joins: mvk (~mvk@2607:fea8:5cc1:fa00::4702)
[22:46:16] *** Quits: trcc (~trcc@2-104-60-169-cable.dk.customer.tdc.net) (Ping timeout: 260 seconds)
[22:47:03] *** Joins: hippoid_ (~hippoid@c-98-220-13-8.hsd1.il.comcast.net)
[22:48:57] *** Quits: hippoid_ (~hippoid@c-98-220-13-8.hsd1.il.comcast.net) (Client Quit)
[22:49:10] *** Joins: hippoid_ (~hippoid@c-98-220-13-8.hsd1.il.comcast.net)
[22:49:12] <Sqaure> im working on a Miso webapp with Servant server. If i want to download a yaml file from the client app, whats the easier path. Some servant client call. Built in function in Miso? Built in client in Ghcjs? 
[22:49:29] *** Quits: hippoid (~hippoid@c-98-220-13-8.hsd1.il.comcast.net) (Ping timeout: 250 seconds)
[22:49:41] <zero> @src Maybe
[22:49:41] <lambdabot> data Maybe a = Nothing | Just a
[22:49:58] *** Quits: ubert (~Thunderbi@p200300ecdf0ba2dd58f8dc088e4eca94.dip0.t-ipconnect.de) (Remote host closed the connection)
[22:50:20] *** Joins: econo (uid147250@user/econo)
[22:50:39] <geekosaur> zero, remember that @src is a manual compilation and contains lies
[22:50:55] *** Quits: hippoid_ (~hippoid@c-98-220-13-8.hsd1.il.comcast.net) (Client Quit)
[22:51:01] <geekosaur> @src Functor Maybe
[22:51:01] <lambdabot> Source not found. You speak an infinite deal of nothing.
[22:51:13] <geekosaur> @src Maybe fmap
[22:51:13] <lambdabot> fmap _ Nothing  = Nothing
[22:51:13] <lambdabot> fmap f (Just a) = Just (f a)
[22:51:28] <geekosaur> gotta remember how to use that hack :þ
[22:51:57] <geekosaur> there used to be a way to hook lambdabot into ghci but it's long bitrotted
[22:53:32] <zero> that's what i was after
[22:53:34] <monochrom> Not really lies, but certainly can become out of date or unoptimized.
[22:54:08] <zero> hskpractice: you can use @src like this, minding the caveat or
[22:54:33] <monochrom> Not a concern for academic purposes though.
[22:54:40] <zero> search for the amazing haskell-docs-cli
[22:54:54] *** Joins: ph88 (~ph88@2a02:8109:9e00:71d0:980f:fceb:aad:f12)
[22:56:05] <monochrom> Perhaps @src also serves a good purpose of meta-education. That just because you find something on the Internet doesn't mean you can blindly believe it.
[22:56:59] <monochrom> But really, even @src is already more competent and honest than most bloggers.
[22:57:10] *** Quits: DNH (~DNH@2a02:8108:1100:16d8:5c1e:444:cdf3:4e4) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[22:58:21] *** Quits: emf (~emf@2620:10d:c090:400::5:14a4) (Quit: emf)
[22:58:37] *** Quits: fef (~thedawn@user/thedawn) (Quit: Leaving)
[22:58:51] *** Joins: Guest75 (~Guest75@host-176-37-53-221.b025.la.net.ua)
[22:58:57] *** Quits: ByronJohnson (~bairyn@50-250-232-19-static.hfc.comcastbusiness.net) (Remote host closed the connection)
[23:00:09] *** Quits: bollu (uid233390@id-233390.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[23:01:25] <dsal> Does anyone else ever wonder why I'm the only one who writes decent code?
[23:04:09] <int-e> No, never.
[23:04:27] <dsal> haha
[23:04:51] *** Joins: jgeerds (~jgeerds@55d45b75.access.ecotel.net)
[23:05:26] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:dcf1:6c47:4df:1ed1) (Remote host closed the connection)
[23:09:43] *** Quits: Guest75 (~Guest75@host-176-37-53-221.b025.la.net.ua) (Ping timeout: 256 seconds)
[23:10:46] *** Joins: max22- (~maxime@2a01cb088335980087bf2fbe3da00994.ipv6.abo.wanadoo.fr)
[23:15:29] *** Joins: xkuru (~xkuru@user/xkuru)
[23:16:48] *** Joins: burnsidesLlama (~burnsides@dhcp168-024.wadham.ox.ac.uk)
[23:17:03] *** Joins: tromp (~textual@dhcp-077-249-230-040.chello.nl)
[23:18:02] *** Quits: dhouthoo (~dhouthoo@178-117-36-167.access.telenet.be) (Quit: WeeChat 3.3)
[23:20:01] *** Joins: mreh (~mreh@2a00:23c7:2803:ef00:2cfc:8111:4bd9:f4d7)
[23:21:27] *** Quits: burnsidesLlama (~burnsides@dhcp168-024.wadham.ox.ac.uk) (Ping timeout: 264 seconds)
[23:23:37] <mreh> Has anyone found a way to speed up builds on the official haskell docker image? Is there a way somehow I could warm the cabal cache in a layer?
[23:24:34] <Rembane_> \o/ Cachix! \o/ 
[23:24:42] <dsal> Is there a less dumb way to write   `const x <$> v`  -- I have a functor and just want to replace the thing.
[23:24:58] <tomsmeding> :t (<$)
[23:24:58] <lambdabot> Functor f => a -> f b -> f a
[23:24:59] <mreh> dsal: <$
[23:25:24] <dsal> Ah, yeah.  I knew there was a thing and my brain just wasn't smart enough to remember.  :)
[23:25:51] *** Joins: burnsidesLlama (~burnsides@dhcp168-024.wadham.ox.ac.uk)
[23:25:51] <dsal> :t ($>)
[23:25:52] <mreh> Rembane_: I'm using stack
[23:25:52] <lambdabot> error:
[23:25:52] <lambdabot>     • Variable not in scope: $>
[23:25:52] <lambdabot>     • Perhaps you meant one of these:
[23:26:08] <monochrom> Wait, I am the only one who writes decent code!
[23:26:12] <tomsmeding> :t (Data.Functor.$>)
[23:26:13] <lambdabot> Functor f => f a -> b -> f b
[23:26:46] <mreh> I tried to use (<<) the other day. Doesn't exist in base, but (=<<) does.
[23:26:48] *** Joins: Cajun (~Cajun@user/cajun)
[23:26:51] <dsal> Yeah, $> looks pretty good in this spot.
[23:27:04] <mreh> :t <<
[23:27:04] <lambdabot> error: parse error on input ‘<<’
[23:27:11] <mreh> :t (<<)
[23:27:12] <lambdabot> error:
[23:27:12] <lambdabot>     • Variable not in scope: <<
[23:27:12] <lambdabot>     • Perhaps you meant one of these:
[23:27:46] <tomsmeding> :t (<*)
[23:27:47] <lambdabot> Applicative f => f a -> f b -> f a
[23:27:53] <tomsmeding> works for monads too :)
[23:28:04] <monochrom> But wrong effect order.
[23:28:05] <tomsmeding> also (>>) = (*>)
[23:28:17] <tomsmeding> monochrom: depends on who you ask
[23:29:00] <tomsmeding> I'd say one can argue for either order; the situation is different for (=<<), where only one order is sensibly implementable
[23:29:52] <monochrom> I don't argue. I use experience to Bayesian-infer what the next person expects.
[23:29:53] *** Joins: echoreply (~echoreply@45.32.163.16)
[23:30:16] <monochrom> Experience is that more likely a person looking for << is looking for flip (>>)
[23:30:54] <monochrom> Everything can be argued.
[23:31:01] <monochrom> Well, almost everything.
[23:31:42] <monochrom> Should Ord use < instead of <= for one way for minimal completion? That can be argued, as shown earlier.
[23:31:58] <monochrom> Should a CPU use big endian or little endian? One can argue.
[23:33:48] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[23:34:27] <mreh> I think I was trying to use it with Reader.
[23:34:49] <mreh> Applying the result to an argument, looks more like function composition
[23:36:08] <tomsmeding> monochrom: you could well be right that most people expect 'flip (>>)' :)
[23:38:24] *** Joins: juhp (~juhp@128.106.188.82)
[23:42:20] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:dcf1:6c47:4df:1ed1)
[23:42:21] <zero> j alacritty
[23:42:35] <zero> ignore that
[23:42:43] <maerwald> zero: I can't
[23:42:51] * tomsmeding looks at zero
[23:44:17] *** Quits: monochrom (~trebla@216.138.220.146) (Ping timeout: 256 seconds)
[23:44:57] *** Joins: yauhsien (~yauhsien@61-231-30-221.dynamic-ip.hinet.net)
[23:46:28] * zero uninstalls alacritty
[23:46:36] <tomsmeding> :(
[23:46:42] <maerwald> what will you use instead?
[23:47:01] *** Joins: jonathanx (~jonathan@h-178-174-176-109.A357.priv.bahnhof.se)
[23:47:21] *** Joins: monochrom (trebla@216.138.220.146)
[23:47:29] *** Joins: gioyik (~gioyik@gateway/tor-sasl/gioyik)
[23:48:57] *** Joins: trcc (~trcc@2-104-60-169-cable.dk.customer.tdc.net)
[23:49:25] <zero> kitty?
[23:49:29] * zero hides
[23:49:33] <dminuoso> kitty has quite the maintainer behind it.
[23:49:39] *** Quits: yauhsien (~yauhsien@61-231-30-221.dynamic-ip.hinet.net) (Ping timeout: 264 seconds)
[23:50:30] *** Quits: cfricke (~cfricke@user/cfricke) (Quit: WeeChat 3.3)
[23:51:32] <dminuoso> Sadly in the terminal domain there's a rule: wide TERM compatibility, performance and ligatures. pick any two you like.
[23:52:46] *** Quits: Guest17 (~Guest17@wificampus-097109.grenet.fr) (Ping timeout: 256 seconds)
[23:55:12] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[23:55:12] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[23:55:12] *** Joins: wroathe (~wroathe@user/wroathe)
[23:56:02] *** Quits: trcc (~trcc@2-104-60-169-cable.dk.customer.tdc.net) (Remote host closed the connection)
[23:57:23] *** Joins: emf (~emf@2620:10d:c090:400::5:824c)
[23:57:51] *** Joins: gaff (~gaff@49.207.223.179)
[23:58:03] *** Joins: mc47 (~mc47@xmonad/TheMC47)
[23:59:18] *** Quits: gaff (~gaff@49.207.223.179) (Remote host closed the connection)
