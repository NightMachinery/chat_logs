[00:15:36] *** Quits: mro (~mro@2002:5cc3:8f31:0:b8c9:9c5d:86b9:b2e4) (Remote host closed the connection)
[00:18:47] *** Joins: tengu1 (~tengu1@cpe-70-121-244-14.neb.res.rr.com)
[00:24:11] *** Joins: mro (~mro@port-92-195-143-49.dynamic.as20676.net)
[00:24:31] *** Quits: tengu1 (~tengu1@cpe-70-121-244-14.neb.res.rr.com) (Quit: Client closed)
[00:29:59] *** Quits: bmo (~bmo@ool-44c5a861.dyn.optonline.net) (Ping timeout: 250 seconds)
[00:34:15] *** Joins: Anarchos (~Anarchos@88.168.112.216)
[00:42:06] *** Joins: rgrinberg (~textual@187.223.209.106)
[00:51:35] *** Joins: bmo (~bmo@ool-44c5a861.dyn.optonline.net)
[00:54:37] *** Quits: bmo (~bmo@ool-44c5a861.dyn.optonline.net) (Remote host closed the connection)
[00:54:59] *** Joins: bmo (~bmo@ool-44c5a861.dyn.optonline.net)
[01:07:10] *** Quits: mro (~mro@port-92-195-143-49.dynamic.as20676.net) (Remote host closed the connection)
[01:08:27] *** Joins: mro (~mro@port-92-195-143-49.dynamic.as20676.net)
[01:09:41] *** Quits: mro (~mro@port-92-195-143-49.dynamic.as20676.net) (Remote host closed the connection)
[01:10:45] *** Joins: mro (~mro@port-92-195-143-49.dynamic.as20676.net)
[01:17:42] *** Joins: Tuplanolla (~Tuplanoll@91-159-68-169.elisa-laajakaista.fi)
[01:18:12] <d_bot> <let Butanium = raise Not_found;;> for today's advent of code, I had to do hashtable operations after itering through it
[01:19:04] <d_bot> <let Butanium = raise Not_found;;> In this purpose I made this little script : ```ocaml
[01:19:05] <d_bot> <let Butanium = raise Not_found;;> let all_instr = ref @@ fun () -> () in
[01:19:06] <d_bot> <let Butanium = raise Not_found;;>   let add_unit unit_f = let old_f = !all_instr in
[01:19:07] <d_bot> <let Butanium = raise Not_found;;>    all_instr := fun () -> (unit_f (); old_f ()) in
[01:19:08] <d_bot> <let Butanium = raise Not_found;;> ```
[01:19:35] <d_bot> <let Butanium = raise Not_found;;> I found it really beautiful but I'm not sure if it's idiomatic or awful x)
[01:20:06] <d_bot> <let Butanium = raise Not_found;;> Like I could have done it with a linked list of unit function and iter them
[01:32:36] *** Quits: Anarchos (~Anarchos@88.168.112.216) (Quit: Vision[]: i've been blurred!)
[01:33:57] <bmo> what is the deal with d_bot
[01:34:06] <bmo> mirroring chat from somewhere else?
[01:34:15] <d_bot> <NULL> Discord
[01:35:33] <bmo> how does one get on the discord?
[01:35:53] <bmo> the invite link google yields is invalid
[01:36:13] <d_bot> <shawn> https://discord.gg/4E4ZxJPX
[01:36:47] <bmo> hmm also invalid
[01:37:25] <d_bot> <shawn> 🤔
[01:37:41] <d_bot> <let Butanium = raise Not_found;;> it's valid for me
[01:37:47] <d_bot> <let Butanium = raise Not_found;;> maybe your are banned 🤔
[01:38:03] <d_bot> <bmo> heh i just searched in Discord's public directory and could join that way
[01:38:09] <d_bot> <let Butanium = raise Not_found;;> noice
[01:38:10] <d_bot> <shawn> lol..
[01:38:25] *** Quits: bmo (~bmo@ool-44c5a861.dyn.optonline.net) (Quit: Palaver https://palaverapp.com)
[01:38:49] <d_bot> <NULL> Congrats, you've made it to the other side
[01:39:31] <d_bot> <bmo> yeah i thought people still were using irc for some reason
[01:40:04] <d_bot> <NULL> The IRC is far from unused
[01:40:15] <d_bot> <bmo> i started using ocaml for this year's aoc, still struggling 🙂
[01:41:24] <d_bot> <Jektrix> There's also a Matrix server but it doesn't have too much traffic
[01:54:05] <d_bot> <let Butanium = raise Not_found;;> I'm using it for aoc too, if you need help to read data or anything else feel free to ask
[01:56:27] *** Quits: SdeSousa (~SdeSousa@2001:818:db64:7500:e8e3:8725:aa51:16be) (Ping timeout: 256 seconds)
[02:03:09] *** Quits: olle (~olle@i5E866D88.versanet.de) (Ping timeout: 250 seconds)
[02:13:15] *** Joins: Guest8 (~Guest8@88-149-66-61.du.xdsl.is)
[02:17:25] <Guest8> let rec string_of_tree t =  ((string_of_int t.hash)) :: (List.map string_of_tree t.children);
[02:18:02] <Guest8> the compiler complains that  "(List.map string_of_tree t.children)" has type string list list
[02:18:08] <Guest8> and I'm just not seeing it
[02:18:54] <Guest8> string_of_tree has type tree -> string
[02:18:57] <Fardale> List.map take a list and return a list, and string_of_tree for a element return a list, so your map is a list of list
[02:19:36] <Fardale> You may want to use List.flat_map
[02:21:40] <d_bot> <NULL> `string_of_tree` does not have type `tree -> string` with how you wrote it; it returns a list (you're using cons `(::)`)
[02:24:27] <Guest8> oh ffs, but I gave it  the type 'tree -> string' , I think the error message is just picking out entierly the wrong thing here
[02:25:35] <d_bot> <NULL> Where did you give it its type ? You could in an annotation (but you didn't here); if you mean in an interface file, I think the compiler checks against it after compiling the source file
[02:25:58] <Guest8> what is the correct way to concatenate two strings
[02:26:06] <Guest8> interface file
[02:26:08] <d_bot> <NULL> `(^)`
[02:26:25] <Guest8> thank you
[02:27:27] <d_bot> <NULL> If you annotated the return type directly, you would have got `Error: This expression has type 'a list but an expression was expected of type string`
[02:31:22] *** Quits: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl) (Quit: leaving)
[02:57:33] *** Joins: wingsorc__ (~wingsorc@user/wingsorc)
[02:58:07] *** Quits: wingsorc (~wingsorc@user/wingsorc) (Read error: Connection reset by peer)
[03:17:53] <rgrinberg> companion_cube there's no way to add bigarrays to buffer.t, right?
[03:19:22] <companion_cube> nope
[03:20:12] <rgrinberg> ok just making sure i'm not missing something obvious
[03:21:20] <companion_cube> maybe in bigstringaf?
[03:21:33] <companion_cube> but Buffer kind of sucks anyway
[03:26:47] <d_bot> <Anurag> Bigstringaf doesn’t have a buffer api. Jane streets core_kernel has a bigbuffer module that supports adding bigstrings to it.
[03:31:45] *** Quits: Haudegen (~quassel@178.115.237.87.static.drei.at) (Ping timeout: 250 seconds)
[03:36:54] *** Quits: hannes (~hannes@193.30.40.133) (Ping timeout: 268 seconds)
[03:45:36] *** Quits: mro (~mro@port-92-195-143-49.dynamic.as20676.net) (Quit: Leaving...)
[03:59:22] *** Quits: Tuplanolla (~Tuplanoll@91-159-68-169.elisa-laajakaista.fi) (Quit: Leaving.)
[04:10:53] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 252 seconds)
[04:11:04] *** Joins: emacs_pprentice_ (~wingsorc@user/wingsorc)
[04:13:18] *** Quits: emacs_pprentice_ (~wingsorc@user/wingsorc) (Client Quit)
[04:13:32] *** Quits: wingsorc__ (~wingsorc@user/wingsorc) (Ping timeout: 240 seconds)
[04:18:41] *** Quits: Guest8 (~Guest8@88-149-66-61.du.xdsl.is) (Ping timeout: 256 seconds)
[04:38:19] <rgrinberg> @Anurag is there a way to flush more granularly with faraday? E.g. I want to a receive a notification when a particular buffer has been written.
[04:38:34] <rgrinberg> I don't necessarily even want to request the flush
[04:52:17] *** Quits: rgrinberg (~textual@187.223.209.106) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[05:15:36] <d_bot> <Anurag> Hmm, I don’t think there is a way to track this. I believe faraday only tracks the total count of bytes that make their way through faraday, and just uses that information to wake up any registered callbacks via the flush function.
[05:17:01] <d_bot> <Anurag> But the flush api should give you what you want though. If you register a callback as soon as you schedule your bigstring within faraday, whenever that callback is called you can be sure your buffer has been processed.
[05:45:46] *** Joins: wingsorc (~wingsorc@user/wingsorc)
[05:52:11] <d_bot> <rgrinberg> I assumed it was possible. Just add a callback to the flush queue without triggering a flush. The byte count should be just be current + size of buffer
[05:52:22] <d_bot> <rgrinberg> I could be misunderstanding the api though
[06:00:35] *** Joins: Guest64873 (~bot@172-220-180-248.res.spectrum.com)
[06:00:36] *** Parts: Guest64873 (~bot@172-220-180-248.res.spectrum.com) ()
[06:25:10] <d_bot> <Anurag> Hmm, maybe the terminology is a little confusing here, I believe in faraday when you call the flush function the only action happening is the registering of the user provided callback. The faraday buffer's content will be available to write whenever you call `Faraday.operation` , but that's the same even if you don't call `flush` and just use say `write_string`, `write_char` etc
[06:46:19] *** Joins: spip (~bobo@37.170.168.137)
[06:46:43] *** spip is now known as Guest2263
[06:47:10] *** Quits: Guest4325 (~bobo@37.172.101.14) (Ping timeout: 260 seconds)
[06:47:53] <d_bot> <rgrinberg> @Anurag i think flush is schedule + register callback
[06:47:58] *** Joins: rgrinberg (~textual@2806:101e:7:6946:a169:dd6b:ff9a:4d8f)
[06:55:00] <d_bot> <Anurag> True! I guess the reason why I didn't notice a difference with `write_string` etc was because of `Faraday.operation` which internally calls flush_buffer as well which scheduled the internal buffer to surface as a response for the `operation` function.
[07:00:35] <d_bot> <Anurag> But in the context of a library like faraday i think that's the behavior i'd expect. What would be a need to register a callback via flush, but not have the data surface for a potential write operation via Faraday.operation? 🤔 (Note that if that is indeed needed you can call `yield` after scheduling something and the next `operation` call won't surface anything)
[07:19:56] <hackinghorn> is there a difference between using fileutils and Sys. to run commands?
[07:29:16] <rgrinberg> hackinghorn why do you need fileutils?
[07:30:07] <hackinghorn> rgrinberg, I need to run a few things like cd, ls..
[07:30:30] <rgrinberg> There's Sys.chdir for cd. For ls, there's Unix.opendir
[07:30:41] <rgrinberg> or even Sys.readdir
[07:32:58] <hackinghorn> its not as convenient, I think
[07:32:59] <rgrinberg> @Anurag a concrete example would be batching RPC calls. I'd want a flush notification whenever an RPC request has been written, but I don't necessarily want a separate buffer for every request.
[07:33:08] <hackinghorn> rgrinberg, so you're suggesting not using fileutils?
[07:33:56] <rgrinberg> hackinghorn if you're learning the language, I'd suggest to learn how to do things with the Stdlib. You don't need to always use it, but it's valuable knoweledge
[07:34:04] <rgrinberg> at the very least, it will help in reading other people's code
[07:36:35] <hackinghorn> rgrinberg, I started using it for a 'which' and thought I might do it for everything. is there an alternative to `which`?
[07:37:23] <rgrinberg> I don't think so. I suppose there's always Sys.command "which foo". Or you can re-implement which in a few lines.
[07:37:40] <rgrinberg> Sys.getenv "PATH" |> String.split ':' |> (* etc. *)
[07:41:58] <rgrinberg> Anyway, feel free to keep using it. I have nothing against the library - I've never used it
[07:42:22] <rgrinberg> It doesn't seem very popular, so I doubt many people could help you with it
[07:44:09] <hackinghorn> ahh, I see, thanks
[07:45:34] <d_bot> <Anurag> rgrinberg: You wouldn't have separate buffers though? Your faraday instance will ideally be long lived, and you can serialize multiple requests into it before you attempt to collect the data from faraday to write to the socket/file_system etc
[07:46:17] <rgrinberg> Yup, but I will not have per request flush notifications.
[07:48:56] <rgrinberg> Actually, I'm not sure if Faraday's "flush" is meaningful enough anyway. All it means is that it's ready for the writer
[07:52:07] <d_bot> <Anurag> That is true. At-least not without some careful orchestration of Faraday.write/Faraday.flush. You could choose to only write new content into the faraday buffer from within your flush callback so you can be sure that you only schedule new bytes once the current request has made it all the way through from faraday to your sink.
[07:59:08] <d_bot> <darrenldl> hackinghorn: fileutils has been fine in my use so far
[08:25:01] *** Quits: vb (~vb@lfbn-idf2-1-1364-212.w92-169.abo.wanadoo.fr) (Ping timeout: 240 seconds)
[08:26:57] *** Joins: Haudegen (~quassel@178.115.237.87.static.drei.at)
[08:26:58] *** Joins: vb (~vb@lfbn-idf2-1-1364-212.w92-169.abo.wanadoo.fr)
[08:34:32] <hackinghorn> ahh thankss
[08:42:26] *** Quits: shawnw (~shawn_w@152.44.212.188) (Ping timeout: 260 seconds)
[08:59:14] *** Quits: zebrag (~chris@user/zebrag) (Quit: Konversation terminated!)
[09:03:05] *** Joins: mbuf (~Shakthi@122.178.199.206)
[09:47:14] *** Joins: gravicappa (~gravicapp@178.214.248.83)
[09:52:22] <hackinghorn> is In_channel.read_all good to use?
[09:58:57] *** Quits: Colt (~Colt@user/colt) (Quit: Leaving)
[10:07:31] *** Joins: jlrnick (~josephler@2a01cb040a159400d9d2762a1f23b84a.ipv6.abo.wanadoo.fr)
[10:13:38] *** Joins: shawnw (~shawn_w@c-73-225-121-73.hsd1.wa.comcast.net)
[10:23:46] <d_bot> <darrenldl> is that in core?
[10:24:33] <d_bot> <darrenldl> in any case, depends on what you're doing - fine for small files, better not if the files might be very big
[10:33:02] *** Quits: jlrnick (~josephler@2a01cb040a159400d9d2762a1f23b84a.ipv6.abo.wanadoo.fr) (Remote host closed the connection)
[10:34:17] *** Joins: jlrnick (~josephler@2a01cb040a159400d9d2762a1f23b84a.ipv6.abo.wanadoo.fr)
[10:39:13] *** Joins: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl)
[10:46:36] <d_bot> <darrenldl> if you want to modify files line by line, you can have a look at <https://github.com/darrenldl/oali/blob/master/src/file.ml>
[10:47:24] <d_bot> <darrenldl> writes the output to a temp file and move it back, which is similar to how tools would usually work
[10:50:27] *** Quits: jlrnick (~josephler@2a01cb040a159400d9d2762a1f23b84a.ipv6.abo.wanadoo.fr) (Read error: Connection reset by peer)
[10:53:19] *** Joins: jlrnick (~josephler@2a01cb040a159400d9d2762a1f23b84a.ipv6.abo.wanadoo.fr)
[11:30:18] *** Joins: Anarchos (~Anarchos@88.168.112.216)
[11:50:59] *** Quits: gravicappa (~gravicapp@178.214.248.83) (Ping timeout: 256 seconds)
[12:11:40] *** Quits: rgrinberg (~textual@2806:101e:7:6946:a169:dd6b:ff9a:4d8f) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[12:19:24] *** Quits: shawnw (~shawn_w@c-73-225-121-73.hsd1.wa.comcast.net) (Remote host closed the connection)
[12:20:09] *** Joins: shawnw (~shawn_w@c-73-225-121-73.hsd1.wa.comcast.net)
[12:34:06] *** Joins: Guest8 (~Guest8@dsl-149-66-61.hive.is)
[12:34:23] <Guest8> is there a way to get the compiler to expand on "syntax error" ?
[13:06:40] <d_bot> <antron> Syntax error only should be rare, often caused by bad ppx
[13:07:16] <d_bot> <antron> Better ask a specific question about it, if it's a gap in the compiler we might be able to get it patched
[13:07:57] *** Parts: Franciman (~Franciman@mx1.fracta.dev) (WeeChat 3.3)
[13:19:14] *** Joins: olle (~olle@i5E866D88.versanet.de)
[13:50:59] *** Quits: olle (~olle@i5E866D88.versanet.de) (Ping timeout: 250 seconds)
[14:10:36] *** Joins: bartholin (~bartholin@158.110.68.237)
[14:21:07] *** Quits: mbuf (~Shakthi@122.178.199.206) (Ping timeout: 250 seconds)
[14:23:05] *** Joins: mbuf (~Shakthi@171.61.229.99)
[14:28:31] *** Quits: mbuf (~Shakthi@171.61.229.99) (Ping timeout: 256 seconds)
[14:28:40] *** Joins: mbuf (~Shakthi@122.178.230.23)
[14:45:06] *** Joins: hannes (~hannes@193.30.40.133)
[14:45:31] *** Joins: kakadu (~kakadu@195.19.236.234)
[15:11:57] *** Joins: gravicappa (~gravicapp@178.214.248.83)
[15:32:28] *** Joins: olle (~olle@p5784cb5f.dip0.t-ipconnect.de)
[15:44:49] *** Quits: Haudegen (~quassel@178.115.237.87.static.drei.at) (Quit: Bin weg.)
[16:00:16] *** Joins: SdeSousa (~SdeSousa@2001:818:db64:7500:f1d0:52f3:9752:ca8b)
[16:08:59] *** Joins: mro (~mro@port-92-195-195-156.dynamic.as20676.net)
[16:09:28] *** Quits: mro (~mro@port-92-195-195-156.dynamic.as20676.net) (Remote host closed the connection)
[16:32:30] *** Joins: mro (~mro@port-92-195-195-156.dynamic.as20676.net)
[16:37:24] *** Quits: mro (~mro@port-92-195-195-156.dynamic.as20676.net) (Ping timeout: 265 seconds)
[16:41:20] *** Joins: xiongxin (~Thunderbi@113.116.35.147)
[16:49:07] *** Joins: Haudegen (~quassel@91.114.49.10)
[17:03:12] <aru> I'm pretty new and coming from ruby where there are conveniences for almost anything, ocaml feels a bit lacking in this regard. Guess that's the reason why things like core and batteries exist. What's the general consensus around this?
[17:05:04] <d_bot> <darrenldl> example of conveniences?
[17:06:22] <d_bot> <darrenldl> use of the alternative stdlibs are common, but no consensus on a single go to one afaict
[17:07:24] <dmbaturin> The maintainers are also much less reluctant to extend the standard library now than they used to be.
[17:09:53] <dmbaturin> Also, it's not like every project uses some stdlib replacement or extension: https://opam.ocaml.org/packages/core/ https://opam.ocaml.org/packages/batteries/ https://opam.ocaml.org/packages/containers/
[17:10:09] <aru> things like List.take_while from core for example
[17:10:38] <aru> I mean it is not difficult to reimplement it myself or anything
[17:11:35] <dmbaturin> If you just want a bunch of convenience functions without replacing the standard library, Containers is a good option.
[17:12:11] <aru> I'll take a look, thanks
[17:13:11] <dmbaturin> If you like Core, nothing wrong with it, but it replaces literally every stdlib function with one of a different type. One may agree or disagree with its design, but it does mean that people will have to know the Core way to contribute to your project.
[17:34:18] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[17:37:14] *** Quits: jlrnick (~josephler@2a01cb040a159400d9d2762a1f23b84a.ipv6.abo.wanadoo.fr) (Ping timeout: 260 seconds)
[17:53:22] <d_bot> <Gooby> When approximately do you think finished typed effects can be expected? I saw someone write next year around April but I am not sure if that's accurate. I just installed the current multicore from https://github.com/ocaml-multicore/multicore-opam#install-multicore-ocaml, and while it's cool what there is now, I can see that there is much more to be added.
[17:55:57] <companion_cube> that seems very dubious yeah
[17:56:05] <companion_cube> it'll probably take years, from my uninformed perspective
[17:56:10] <d_bot> <Gooby> 😳
[17:56:19] <sadiq> there's no hard timeline at the moment, there's some open research going on right now
[17:56:36] <sadiq> (it's just not drifting though, there's resources going in to making it happen)
[17:56:57] <d_bot> <Gooby> Well I'll welcome it whenever it comes
[17:57:18] <sadiq> just to clarify though, you specifically mean typed effects and not effects in general (using the function syntax)?
[17:57:37] <d_bot> <Gooby> Yeah, as far as I see so far just effects using the function syntax are already there in what I linked
[17:57:48] <sadiq> yes, they are good to go and will be there in 5.0
[17:59:34] <d_bot> <Gooby> On the OCaml page I saw that typed effects were planned for multicore, so while I did not think they'd be there in 5.0, I thought "woah maybe they are going to be there soon," but I guess it is a bit of a less researched subject
[18:00:01] <sadiq> it's also something you really want to get right
[18:00:05] <dmbaturin> So far it seems like 5.0 will have a multicore runtime and domains, but effects may be left fo later.
[18:00:24] <sadiq> no, 5.0 will have effects they just won't have syntax for them.
[18:00:55] <dmbaturin> Ah, sorry, I misremembered it indeed.
[18:01:12] <sadiq> the original plan was just multicore runtime and domains.
[18:01:39] <d_bot> <Gooby> Yes it would be very nice to have them
[18:02:06] <sadiq> but there was a lot of momentum behind effects and it seemed like there was concensus for merging both domains and effects for 5.0.
[18:03:05] <companion_cube> will typed effects push the release number to 6.0? :)
[18:03:41] <d_bot> <Kakadu> They will be in 6.0 unless we help somehow 🙂
[18:04:05] <d_bot> <Gooby> To be perfectly honest, even what is currently there is decent for lots of problems such as asynchronous programming, but when reading about typed effects I became very interested in the subject, so I am looking forward to them
[18:04:50] <sadiq> even without syntactic support it's still pretty good
[18:04:56] <sadiq> e.g here's with syntax: https://github.com/ocaml-multicore/ocaml-multicore/blob/b376d5b424c3ce34e9ce173a5128b0953d2ecee7/testsuite/tests/effects/test2.ml
[18:05:05] <sadiq> and here's without https://github.com/ocaml-multicore/ocaml-multicore/blob/5.00/testsuite/tests/effects/test2.ml
[18:05:14] <d_bot> <Gooby> Especially as it provides a direct alternative to, for example, Haskell's monadic way of encoding of effects
[18:05:38] <sadiq> note that it's the handler that it has the worst impact on
[18:05:49] <sadiq> (which is hopefully the kind of thing that you have in libraries)
[18:07:12] <d_bot> <Gooby> Impact as in the amount of code you have to write?
[18:07:45] <sadiq> basically yea
[18:08:50] <d_bot> <Gooby> Well while that's true, I don't think there's escaping it. As you said, libraries can do it so that the users don't have to, and I don't think other methods of typing effects are much better either
[18:10:13] <sadiq> also it's the kind of thing you could maybe make a bit more ergonomic with a ppx, if it's a real bother.
[18:10:59] <d_bot> <Gooby> Ah true, although ppxes are kind of intimidating because of their complexitiy
[18:13:11] <d_bot> <Gooby> While we are at it, do you think there is anything we as inexperienced users can contribute to make the progress towards typed effects faster?
[18:13:27] <companion_cube> @Kakadu I'm not too optimistic, the retrocompatibility challenges are real
[18:13:46] <companion_cube> and it's the kind of thing you can only contribute to by doing a PL PhD at gallium
[18:14:07] <d_bot> <Gooby> Crap, oh well haha
[18:14:11] <sadiq> yea, there's PL wizardry beyond my skills involved.
[18:14:41] <companion_cube> it'd put OCaml at the cutting edge of ML
[18:16:14] <d_bot> <Gooby> I think the same, but since OCaml community isn't big it's still a bit sluggish unfortunately
[18:16:24] <d_bot> <Gooby> But since there's nothing I can do, can't be helped
[18:18:01] *** Quits: shawnw (~shawn_w@c-73-225-121-73.hsd1.wa.comcast.net) (Ping timeout: 256 seconds)
[18:21:51] <olle> Wouldn't typed effects infer the most general effect?
[18:22:04] <olle> So amount of code would be same, unless you want to be restrictive
[18:24:27] <d_bot> <Gooby> Well I think if a function performs effects e1,e2...en
[18:24:28] <d_bot> <Gooby> Then those will be in the signature, and then a handler matching on it is either supposed to match each effect to be well typed (otherwise it's a partial function), or else there was a page mentioning an effect system which could potentially maybe "release" that effect into some sort of a global handler which could try handling such effects, as well as the ones like IO
[18:25:45] <olle> But echo to stdout is also an effect
[18:25:50] <olle> Right...?
[18:25:59] <d_bot> <Gooby> I think yes
[18:26:15] <olle> Why would you have to match on IO?
[18:27:08] <d_bot> <Gooby> Nono, I'm not speaking from knowledge here, but there could be some sort of a global handler
[18:27:12] <d_bot> <Gooby> For effects such as IO
[18:27:24] <d_bot> <Gooby> Although that sounds like it might hurt performance a bit
[18:27:36] <olle> Hm
[18:27:56] <companion_cube> this would break every existing program
[18:28:02] *** Quits: landonf (landonf@mac68k.info) (Ping timeout: 240 seconds)
[18:28:03] <olle> Which would?
[18:28:20] <companion_cube> retrofitting effects onto existing stuff.
[18:28:29] <companion_cube> exceptions will not be an effect, for example, afaik
[18:29:13] <olle> Huh?
[18:29:15] <d_bot> <Gooby> Do you think it's viable to make it a compiler option? By default it's backwards compatibility mode, if you enable the option then you get to utilise the new effects system
[18:29:23] <d_bot> <Gooby> That way it's opt in rather than opt out
[18:29:26] <companion_cube> I doubt this would fly
[18:29:36] <companion_cube> it would still fragment the ecosystem into 2 incompatible halves
[18:29:39] <companion_cube> no one wants that
[18:29:41] <olle> Would retrofitting be just implicitly making top function "all" effectful?
[18:29:58] <olle> So you have opt-in typed effects
[18:30:07] <companion_cube> well idk, I remember a talk where `->` was basically made into an arrow with implciit effects? not sure
[18:30:29] <olle> Hm
[18:31:20] <companion_cube> just wait and see what the core team will do
[18:32:09] <d_bot> <Gooby> Well I think based on what I read, the type would be something like `int -[IO]-> int`, but if you don't care about the effect you could disregard it and treat it as `int -> int`
[18:32:25] <d_bot> <Gooby> The only issue is incorporating the system in a way that breaks very little
[18:33:03] <olle> Mm
[18:33:23] <olle> Wish I had more time for OCaml. Sigh.
[18:33:33] *** Joins: landonf (landonf@mac68k.info)
[18:33:58] <Anarchos> olle we all wish :)
[18:34:15] <d_bot> <Gooby> Haha, if modular implicits were a thing, you could have `perform` implicitly resolve the module based on the effect type, which would also contain the handler
[18:37:40] <olle> Anarchos: True
[18:41:06] *** Joins: mro (~mro@port-92-195-195-156.dynamic.as20676.net)
[18:42:13] <d_bot> <Gooby> Actually, since effects are supposed to be passable values, and you can continue as long as you have the continuation k, you should be able to match only on a subset of a function's effects, and if no matches pass the effect and the continuation to some other function which can match further
[18:43:00] <d_bot> <Gooby> My point being, the stl could just define a function to handle predefined effects such as IO, and all you need to do is pass your effect if none matcj
[18:43:11] <d_bot> <Gooby> Though that too would break old code
[18:43:35] <d_bot> <Gooby> So I guess it does not solve the issue, but it might be easier to implement instead of some global handler
[18:44:31] <d_bot> <Gooby> It would also be a bit unergonomic maybe
[18:46:02] *** Quits: Guest2263 (~bobo@37.170.168.137) (Ping timeout: 240 seconds)
[18:46:05] *** Joins: spip (~bobo@37.170.190.92)
[18:46:29] *** spip is now known as Guest456
[18:48:47] <d_bot> <mbacarella> workflow sanity check: there are no ocaml IDEs yet that run a compiler in watch mode and when errors are detected you can click on the error and go straight to the error in your editor, right?
[18:51:17] <d_bot> <Anurag> I don't think there is a specific IDE that does that, but quite a few editors will display the errors in a specific window where clicking on them will take you to the error in your editor (vim/neovim/vscode all do this)
[18:51:32] <d_bot> <Anurag> For watch mode you can rely on dune's watch mode. It works really well in my experience
[18:52:19] <Fardale> @mbacarella merlin or ocaml-lsp does this for you, you don't need to leave the editor they will show you the error in the current file directly.
[18:52:21] <d_bot> <Drup> (and almost all editors can use merlin to highlight errors)
[18:52:38] <companion_cube> s/merlin/ocaml-lsp-server/
[18:57:23] <qwr> iirc merlin worked with emacs, ocaml-lsp-server should be good with neovim or some other lsp-oriented editor
[18:57:35] *** Quits: SdeSousa (~SdeSousa@2001:818:db64:7500:f1d0:52f3:9752:ca8b) (Ping timeout: 256 seconds)
[18:58:25] <d_bot> <mbacarella> right I'm aware. The thing is if you're doing a refactor and change some type places everywhere else in your codebase from the point you just edited need to be fixed, and it would be nice if I had a semi-automatic way to jump to them
[18:59:26] <d_bot> <mbacarella> say what? they show you the errors in a section of your editor and you can jump to the line they're complaining about?
[18:59:32] <d_bot> <mbacarella> have i been using neovim and vscode wrong?
[18:59:43] <companion_cube> neovim + LSP should do that, yes
[18:59:47] *** Quits: xiongxin (~Thunderbi@113.116.35.147) (Quit: xiongxin)
[19:00:07] <companion_cube> in the location window (:lNext and all that) iirc
[19:00:33] <d_bot> <mbacarella> huh.
[19:00:34] <d_bot> <p1xelHer0> if you want the easy way out u can use something like https://github.com/folke/trouble.nvim that groups all kinds of errors and definitions in a neat window
[19:01:59] <Corbin> I wonder to what degree we should consider it a language-design problem to make that sort of refactoring easy.
[19:02:27] <d_bot> <mbacarella> huh. I believe you guys, I guess my environments are always some degree of broken
[19:02:37] *** Joins: SdeSousa (~SdeSousa@2001:818:db64:7500:f1d0:52f3:9752:ca8b)
[19:03:18] <companion_cube> Corbin: you mean, by having strong modularity, sum types, warning on missing fields in patterns, etc.?
[19:04:13] <d_bot> <mbacarella> yeah okay. i'm using vs code on two different computers. in one ocaml project it's showing many, many more errors in "problems" than dune build actually reports.
[19:04:22] <d_bot> <mbacarella> (yes i'm running dune build --profile=dev)
[19:04:56] <companion_cube> hu, that's more surprising. in my experience it's dune who tends to complain more :D
[19:05:00] <d_bot> <mbacarella> the other ocaml vs code project, dune reports errors but the vs code problems pane says no errors 🤷‍♂️
[19:05:10] <companion_cube> (merlin/ocaml-lsp doesn't take _all_ warnings into account sadly)
[19:05:23] *** Quits: Anarchos (~Anarchos@88.168.112.216) (Quit: Vision[]: i've been blurred!)
[19:05:34] <d_bot> <p1xelHer0> my experience is that dune shows more, like `unused rec`
[19:05:54] <d_bot> <p1xelHer0> last thing i remember dune showing while the lsp didn't
[19:07:56] <companion_cube> @p1xelHer0 any link to https://pixelhero.dev/ ? :)
[19:08:21] *** Quits: jsoo_ (~znc@irc.refl.club) (Quit: ZNC 1.8.2 - https://znc.in)
[19:09:40] <d_bot> <p1xelHer0> nope, this is just a "gamer tag" i came up with when i created my league of legends account 10 years ago 😄 stuck with it since
[19:10:50] <d_bot> <p1xelHer0> i always use the 1 and 0 in the name, its ugly enough that no one "steals" it on the internet
[19:12:50] <d_bot> <Anurag> Trouble is the plugin i use and it works really well with the build in lsp on neovim (like @p1xelHer0 suggested), but there are other plugins like `ale`, `syntastic` etc that will also populate the loclist with diagnostic data.
[19:14:55] <d_bot> <p1xelHer0> yeah, Trouble is "the new kid on the block" or whatever u want to call it. configured with lua, embracing Neovim more
[19:18:31] *** Joins: jsoo (~znc@irc.refl.club)
[19:23:53] <companion_cube> @anurag I had a plugin for lsp<->loclist
[19:24:01] <companion_cube> but it seems that with neovim 0.6 it does it automatically now
[19:24:05] <companion_cube> 💃
[19:34:17] <Corbin> companion_cube: For comparison, refactoring in Cammy is done with sed, as a design choice. I'm building a nicer refactoring tool that will let me store docs next to code and only refactor code while not changing docs.
[19:34:46] <Corbin> Modularity is great, but the actual cost of hands on keyboard can't be ignored. (Maybe I'm sensitive to this because I have RSI damage to my hands.)
[19:36:11] <companion_cube> if you can refactor with sed, doesn't this mean you can't shorten names?
[19:36:18] <companion_cube> Foo.Bar.yolo ?
[19:37:18] <Corbin> The syntax doesn't bind any names, so the only names left are the ones for files in a filesystem. Refactoring consists of renaming the file and also replacing the filename in all other files; it's only a couple lines of shell.
[19:38:07] <companion_cube> so how do you refer to a function>
[19:38:09] <companion_cube> ?
[19:42:11] <Corbin> I can take "the name" of a function, which is CT jargon; given some function f : X -> Y, its name is [f] : 1 -> (X -> Y).
[19:44:49] <companion_cube> oh well
[19:45:00] <companion_cube> so if you change the type, you have to rename?
[19:47:41] <Corbin> Not necessarily, but probably, yeah. Sometimes the new type is a refinement of the old type; that happened when I changed how the terminal type 1 is implemented. But mostly, if I want a new expression with a new type, I give it a new name and *don't change the old file*, allowing for incremental cleanup.
[19:51:38] <reynir> Opam CI says 'Error: Unbound value Result.iter' in OCaml 4.12, but I think it was introduced in 4.08 and I can't reproduce locally :/
[19:53:10] <reynir> Ahh, it's result.1.0 that's wrecking havok /o\
[19:57:35] <hannes> indeed. add 'conflict: [ "result" {< "1.5"} ]' to packages, even if there's no need for result...
[19:58:03] <companion_cube> try Stdlib.Result.iter, anyway?
[20:00:22] <reynir> yea, I added the conflict
[20:00:45] *** Quits: mro (~mro@port-92-195-195-156.dynamic.as20676.net) (Remote host closed the connection)
[20:03:45] *** Joins: mro (~mro@port-92-195-195-156.dynamic.as20676.net)
[20:12:39] *** Quits: Corbin (~Corbin@c-73-67-140-116.hsd1.or.comcast.net) (Ping timeout: 252 seconds)
[20:16:30] *** Joins: Corbin (~Corbin@c-73-67-140-116.hsd1.or.comcast.net)
[20:20:54] *** rwmjones_ is now known as rwmjones
[20:40:45] *** Quits: SdeSousa (~SdeSousa@2001:818:db64:7500:f1d0:52f3:9752:ca8b) (Quit: Client closed)
[20:40:53] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 252 seconds)
[20:41:25] *** Quits: mro (~mro@port-92-195-195-156.dynamic.as20676.net) (Remote host closed the connection)
[20:41:48] *** Joins: Anarchos (~Anarchos@88.168.112.216)
[20:41:59] *** Quits: Haudegen (~quassel@91.114.49.10) (Quit: Bin weg.)
[20:43:46] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[20:54:56] *** Quits: Anarchos (~Anarchos@88.168.112.216) (Quit: Vision[]: i've been blurred!)
[20:55:27] *** Joins: Anarchos (~Anarchos@88.168.112.216)
[21:01:50] *** Joins: mro (~mro@2002:5cc3:c39c:0:383d:d880:ffe8:ceca)
[21:02:02] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 240 seconds)
[21:03:38] *** Quits: mro (~mro@2002:5cc3:c39c:0:383d:d880:ffe8:ceca) (Remote host closed the connection)
[21:08:20] *** Quits: bartholin (~bartholin@158.110.68.237) (Quit: Leaving)
[21:12:40] *** Joins: mro (~mro@port-92-195-195-156.dynamic.as20676.net)
[21:13:10] *** Quits: mbuf (~Shakthi@122.178.230.23) (Quit: Leaving)
[21:16:21] *** Quits: mro (~mro@port-92-195-195-156.dynamic.as20676.net) (Remote host closed the connection)
[21:24:34] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[21:28:29] *** Joins: Colt (~Colt@user/colt)
[21:36:20] *** Joins: zebrag (~chris@user/zebrag)
[21:36:31] *** Joins: jlrnick (~josephler@2a01cb040a159400d9d2762a1f23b84a.ipv6.abo.wanadoo.fr)
[21:40:41] <d_bot> <Gooby> I meant to ask, since you all have bot markers and cat pfps, I'm guessing you are using a bridge to communicate from a different platform. Which? IRC?
[21:42:03] <companion_cube> yep
[21:42:06] <companion_cube> on libera.chat
[21:45:18] <d_bot> <Gooby> Aah I see
[21:46:09] *** Quits: olle (~olle@p5784cb5f.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[21:46:31] <d_bot> <Gooby> I've taken a liking to XMPP as opposed to IRC but unfortunately nobody uses XMPP only :/
[21:54:38] *** Quits: Anarchos (~Anarchos@88.168.112.216) (Quit: Vision[]: i've been blurred!)
[21:57:13] *** Joins: Haudegen (~quassel@178.115.237.87.static.drei.at)
[22:01:45] *** Joins: mro (~mro@port-92-195-195-156.dynamic.as20676.net)
[22:02:51] *** Quits: mro (~mro@port-92-195-195-156.dynamic.as20676.net) (Remote host closed the connection)
[22:04:09] *** Joins: mro (~mro@port-92-195-195-156.dynamic.as20676.net)
[22:05:19] *** Quits: mro (~mro@port-92-195-195-156.dynamic.as20676.net) (Remote host closed the connection)
[22:05:32] *** Quits: zebrag (~chris@user/zebrag) (Quit: Konversation terminated!)
[22:11:51] *** Joins: waleee-cl (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[22:11:57] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Read error: Connection reset by peer)
[22:12:28] *** Quits: waleee-cl (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Client Quit)
[22:13:17] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[22:22:37] *** Joins: mro (~mro@2002:5cc3:c39c:0:383d:d880:ffe8:ceca)
[22:24:48] *** Quits: mro (~mro@2002:5cc3:c39c:0:383d:d880:ffe8:ceca) (Remote host closed the connection)
[22:24:57] *** Joins: mro (~mro@port-92-195-195-156.dynamic.as20676.net)
[22:59:24] *** Joins: Anarchos (~Anarchos@88.168.112.216)
[23:00:22] <d_bot> <Alistair> Is there a ppx for arrow syntax?
[23:11:50] *** Joins: olle (~olle@i5E866D88.versanet.de)
