[00:02:01] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[00:02:01] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[00:02:01] *** Joins: wroathe (~wroathe@user/wroathe)
[00:06:47] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[00:08:59] *** Quits: rgrinberg (~textual@2806:101e:7:6bed:d154:b93f:c8:b39) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[00:10:05] *** Joins: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com)
[00:10:48] *** Joins: Charadon (~Charadon@155.138.164.183)
[00:10:52] *** Joins: oxfuxxx (~oxfuxxx@10.177.181.107.wiredns.net)
[00:11:23] *** Joins: Cleverness (~Clevernes@pool-108-54-152-186.nycmny.fios.verizon.net)
[00:11:55] *** Quits: skapata (~Skapata@user/skapata) (Read error: Connection reset by peer)
[00:15:23] *** Joins: joilerv (~joilerv@135.129.250.144)
[00:16:36] *** Joins: AbleBacon (~AbleBacon@user/AbleBacon)
[00:20:57] *** Quits: geowiesnot (~user@5-51-190-244.abo.bbox.fr) (Ping timeout: 240 seconds)
[00:21:15] *** Joins: joilerv_ (~joilerv@135.129.250.144)
[00:23:25] *** Quits: joilerv (~joilerv@135.129.250.144) (Ping timeout: 250 seconds)
[00:24:34] *** Quits: meator (~meator@user/meator) (Quit: Leaving)
[00:25:06] *** Quits: Cleverness (~Clevernes@pool-108-54-152-186.nycmny.fios.verizon.net) (Quit: Leaving)
[00:26:59] *** Quits: oxfuxxx (~oxfuxxx@10.177.181.107.wiredns.net) (Quit: Yankies Motherfuckers Cock Astroboys)
[00:27:39] *** Joins: oxfuxxx (~oxfuxxx@10.177.181.107.wiredns.net)
[00:33:25] *** Quits: boB_K7IQ (~boB_K7IQ@wsip-98-174-204-97.ph.ph.cox.net) (Ping timeout: 256 seconds)
[00:34:33] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Ping timeout: 256 seconds)
[00:34:59] *** Quits: drbeco (~beco@2804:351c:dd01:b700:1b03:6b85:20d4:ad73) (Quit: Leaving)
[00:38:21] <nomagno> OLD: https://gitea.com/Nomagno/Half-World/src/commit/499070e10afbe4c34f72ab034e7ff23db2b01949/src/core/hwvm/hwvm.c
[00:38:21] <nomagno> NEW: https://gitea.com/Nomagno/Half-World/src/commit/3963bf966e6fc68b12c8cf7c1d691e7a4ad7279a/src/core/hwvm/hwvm.c
[00:38:21] <nomagno> Would you say the refactor has been for the better?
[00:41:28] *** Joins: beco (~beco@2804:351c:dd01:b700:1b03:6b85:20d4:ad73)
[00:42:42] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Read error: Connection reset by peer)
[00:44:00] *** beco is now known as drbeco
[00:45:25] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[00:46:05] *** Quits: Torr (~Torr@user/torr) (Quit: leaving)
[00:46:45] *** Joins: beco (~beco@2804:351c:dd01:b700:1b03:6b85:20d4:ad73)
[00:46:49] *** Quits: beco (~beco@2804:351c:dd01:b700:1b03:6b85:20d4:ad73) (Remote host closed the connection)
[00:46:52] *** Quits: drbeco (~beco@2804:351c:dd01:b700:1b03:6b85:20d4:ad73) (Quit: Leaving)
[00:47:11] *** Joins: drbeco (~beco@2804:351c:dd01:b700:1b03:6b85:20d4:ad73)
[00:48:42] *** Joins: ckdCreations (~ckdCreati@c-73-140-151-116.hsd1.wa.comcast.net)
[00:49:30] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Remote host closed the connection)
[00:49:30] *** Quits: magla (~gelignite@55d4c694.access.ecotel.net) (Quit: Stay safe!)
[00:51:12] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[00:53:17] *** Quits: mikoto-chan (~mikoto-ch@213.177.151.239) (Ping timeout: 240 seconds)
[00:55:38] *** Quits: skeev (~skeev@92.86.110.192) (Remote host closed the connection)
[00:56:03] *** Joins: skeev (~skeev@92.86.110.192)
[01:00:43] *** Joins: rgrinberg (~textual@2806:101e:7:6bed:d154:b93f:c8:b39)
[01:04:35] *** Quits: skeev (~skeev@92.86.110.192) (Ping timeout: 256 seconds)
[01:06:49] *** Joins: sheb (~sheb@31.223.228.71)
[01:07:07] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:4003:8970:d961:ff06) (Quit: Textual IRC Client: www.textualapp.com)
[01:07:10] *** Joins: System_Error (~SystemErr@user/systemerror)
[01:08:47] *** Quits: mahmutov (~mahmutov@37.155.4.137) (Ping timeout: 256 seconds)
[01:12:12] *** Joins: pyook (~pyook@user/puke)
[01:12:35] *** Quits: zer0bitz (~zer0bitz@2001:2003:f74d:b800:90d6:f3c8:741b:677a) (Ping timeout: 250 seconds)
[01:13:17] *** Quits: Akuli (~Akuli@82-203-162-217.bb.dnainternet.fi) (Quit: Akuli)
[01:13:34] *** Quits: joilerv_ (~joilerv@135.129.250.144) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[01:17:48] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Remote host closed the connection)
[01:18:29] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[01:22:19] *** Quits: System_Error (~SystemErr@user/systemerror) (Remote host closed the connection)
[01:23:16] *** Joins: gr33n7007h (~gr33n7007@user/gr33n7007h)
[01:24:25] *** Joins: System_Error (~SystemErr@user/systemerror)
[01:24:53] <apotheon> nomagno: I haven't read it in depth, but a quick skim suggests the answer is "yes".
[01:25:30] *** Quits: tech_exorcist (txrcst@user/tech-exorcist/x-0447479) (Quit: Disconnecting)
[01:25:40] *** Joins: Trigraph (~Trigraph@user/trigraph)
[01:26:16] *** Quits: Trigraph (~Trigraph@user/trigraph) (Client Quit)
[01:26:34] *** Joins: Trigraph (~Trigraph@user/trigraph)
[01:28:23] *** Quits: Oddity (~Oddity@user/oddity) (Ping timeout: 256 seconds)
[01:29:32] *** Joins: sdfgsdfg (~dfghsfgs@user/sdfgsdfg)
[01:30:01] *** Quits: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[01:30:05] *** Quits: alch (~alch@151.36.99.120) (Ping timeout: 256 seconds)
[01:31:50] *** Joins: alch (~alch@151.38.118.98)
[01:33:38] *** Joins: acerbic (~acerbic@cs-xdata-50-86-51-104.cspire.com)
[01:34:30] *** Quits: gr33n7007h (~gr33n7007@user/gr33n7007h) (Ping timeout: 250 seconds)
[01:35:25] *** Quits: blindguard (~blindguar@2a02:908:1864:c200::ef3c) (Read error: Connection reset by peer)
[01:35:50] *** Joins: blindguard (~blindguar@2a02:908:1864:c200::ef3c)
[01:36:24] *** Joins: gr33n7007h (~gr33n7007@user/gr33n7007h)
[01:36:32] *** Quits: lightningwright_ (~lightning@user/lightningwright) (Quit: Leaving)
[01:39:19] *** Quits: Betal (~Betal@user/betal) (Quit: WeeChat 3.4)
[01:39:27] *** Joins: Neutron7 (~monopolys@96.73.191.185)
[01:42:20] *** Quits: gr33n7007h (~gr33n7007@user/gr33n7007h) (Remote host closed the connection)
[01:42:44] *** Joins: gr33n7007h (~gr33n7007@user/gr33n7007h)
[01:46:00] *** Quits: _mikey (~mikey@user/mikey/x-4335048) (Quit: WeeChat 3.4)
[01:46:25] *** Joins: _mikey (~mikey@user/mikey/x-4335048)
[01:46:56] *** Joins: skapata (~Skapata@2804:14c:87b0:9d2e:71fb:7a3d:845d:425d)
[01:46:56] *** Quits: skapata (~Skapata@2804:14c:87b0:9d2e:71fb:7a3d:845d:425d) (Changing host)
[01:46:56] *** Joins: skapata (~Skapata@user/skapata)
[01:47:23] *** Quits: kenanmarasli (~kenanmara@user/kenanmarasli) (Quit: Leaving)
[01:48:47] *** Quits: merrinx (~merrinx@ti0028a400-1685.bb.online.no) (Quit: WeeChat 3.3)
[01:49:06] *** Quits: slidercrank (~slidercra@user/slidercrank) (Remote host closed the connection)
[01:50:03] *** Joins: merrinx (~merrinx@ti0028a400-1685.bb.online.no)
[01:50:12] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[01:50:12] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[01:50:12] *** Joins: wroathe (~wroathe@user/wroathe)
[01:54:57] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[01:55:09] *** Quits: merrinx (~merrinx@ti0028a400-1685.bb.online.no) (Quit: WeeChat 3.3)
[01:55:13] *** Joins: Betal (~Betal@user/betal)
[01:55:28] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Remote host closed the connection)
[01:55:35] *** Quits: kurahaupo_ (~kurahaupo@115.69.27.211) (Ping timeout: 256 seconds)
[01:55:42] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[01:56:07] *** Joins: merrinx (~merrinx@ti0028a400-1685.bb.online.no)
[02:01:30] *** Joins: kurahaupo_ (~kurahaupo@115.69.27.211)
[02:02:46] *** Quits: blindguard (~blindguar@2a02:908:1864:c200::ef3c) (Quit: Konversation terminated!)
[02:03:15] *** Quits: aradesh (~aradesh@user/aradesh) (Quit: WeeChat 1.9.1)
[02:04:01] *** Joins: shreyasminocha (51fdc93eda@user/shreyasminocha)
[02:07:29] *** Quits: jfsimon1981 (~jfsimon19@218.96.128.77.rev.sfr.net) (Ping timeout: 256 seconds)
[02:09:55] *** Joins: Nutte35 (~Nutte@202.153.81.232)
[02:11:19] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Remote host closed the connection)
[02:11:56] *** Joins: oriba (~oriba@dynamic-077-183-110-253.77.183.pool.telefonica.de)
[02:13:42] *** Joins: freakazoid343 (~matt@2603-9000-cf03-86c3-5824-82b6-9b03-aa20.inf6.spectrum.com)
[02:14:23] *** Quits: mrig (~mrig@user/mrig) (Quit: WeeChat 2.8)
[02:15:44] *** Quits: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net) (Remote host closed the connection)
[02:15:59] *** Joins: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net)
[02:16:28] *** Joins: Trigraph1 (~Trigraph@user/trigraph)
[02:16:28] *** Quits: acerbic (~acerbic@cs-xdata-50-86-51-104.cspire.com) (Read error: Connection reset by peer)
[02:16:33] *** Quits: Trigraph1 (~Trigraph@user/trigraph) (Read error: Connection reset by peer)
[02:16:35] *** Quits: freakazoid333 (~matt@2603:9000:cf03:86c3:5824:82b6:9b03:aa20) (Ping timeout: 252 seconds)
[02:16:42] *** Joins: llh (~llh@user/llh)
[02:17:02] *** Quits: Nutte35 (~Nutte@202.153.81.232) (Read error: Connection reset by peer)
[02:18:51] *** Quits: oxfuxxx (~oxfuxxx@10.177.181.107.wiredns.net) (Quit: Yankies Motherfuckers Cock Astroboys)
[02:19:01] *** Quits: manx (xuew@p200300e18f239d00022215fffe03cf97.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[02:19:26] *** Joins: oxfuxxx (~oxfuxxx@10.177.181.107.wiredns.net)
[02:19:37] *** Quits: Trigraph (~Trigraph@user/trigraph) (Ping timeout: 256 seconds)
[02:20:33] *** Quits: fsoc (~shynerd@bison.alphaw0lf.xyz) (Quit: leaving)
[02:20:40] *** Joins: jfsimon1981 (~jfsimon19@218.96.128.77.rev.sfr.net)
[02:22:28] *** Joins: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net)
[02:26:33] *** Quits: coruja (~coruja@user/coruja) (Quit: WeeChat 3.4)
[02:27:22] *** Joins: coruja (~coruja@user/coruja)
[02:31:07] *** Quits: rgrinberg (~textual@2806:101e:7:6bed:d154:b93f:c8:b39) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[02:31:57] *** Quits: cherrry9 (~jan@aeil171.neoplus.adsl.tpnet.pl) (Ping timeout: 240 seconds)
[02:33:33] *** Quits: pizdets (~pizdets@183.182.111.45) (Ping timeout: 256 seconds)
[02:34:16] *** Joins: pizdets (~pizdets@183.182.110.149)
[02:37:00] *** Quits: System_Error (~SystemErr@user/systemerror) (Remote host closed the connection)
[02:38:34] *** Joins: acerbic (~acerbic@cs-xdata-50-86-51-164.cspire.com)
[02:38:39] *** Quits: gproto23 (~gproto23@user/gproto23) (Ping timeout: 256 seconds)
[02:40:38] *** Quits: strajder (~strajder@user/strajder) (Quit: gn)
[02:44:37] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Quit: Ex-Chat)
[02:45:47] *** Quits: diiirt (~diiirt@user/diiirt) (Remote host closed the connection)
[02:46:14] *** Joins: diiirt (~diiirt@user/diiirt)
[02:47:26] *** Joins: crm (~crm@70.120.0.94)
[02:47:29] *** Quits: orthoplex64 (~crm@70.120.0.94) (Ping timeout: 256 seconds)
[02:50:17] *** Joins: abf (~abf@user/abf)
[02:50:57] *** Quits: gr33n7007h (~gr33n7007@user/gr33n7007h) (Ping timeout: 240 seconds)
[02:51:22] *** Joins: gr33n7007h (~gr33n7007@user/gr33n7007h)
[02:51:24] *** Joins: System_Error (~SystemErr@user/systemerror)
[02:51:41] *** Quits: merrinx (~merrinx@ti0028a400-1685.bb.online.no) (Quit: WeeChat 3.3)
[02:53:21] *** Quits: shivesh (~shivesh@user/shivesh) (Quit: leaving)
[03:08:30] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[03:15:07] *** Joins: malina (~malina@user/malina)
[03:15:37] *** Quits: LucaTM (~LucaTM@user/lucatm) (Quit: Textual IRC Client: www.textualapp.com)
[03:20:26] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.4)
[03:20:52] *** Quits: acerbic (~acerbic@cs-xdata-50-86-51-164.cspire.com) (Read error: Connection reset by peer)
[03:27:44] <nightstrike> why do some people recommend casting the result of malloc to a type and others don't?
[03:27:55] <ChoHag> Cargo culting.
[03:28:12] <nightstrike> well which one is cargo culted? :)
[03:28:57] <twkm> some feel it is useful to catch type mistakes.  they don't write long l; l = (long)10; though.
[03:30:24] *** Quits: tk (~tk@ircpuzzles/staff/tk) (Quit: Well, this is unexpected.)
[03:30:49] *** Joins: tk (~tk@ircpuzzles/staff/tk)
[03:30:51] <ChoHag> Generally I don't cast things until the compiler bitches at me and I spend some time figuring out why.
[03:31:09] <twkm> a cast usually tells the compiler to shut-up about some things, though these days some no longer do.
[03:31:11] <ChoHag> Or if I need to constrain the size of a result or otherwise know with certainty that it's required.
[03:32:30] <nightstrike> It seems from what I've read that casting hides a possible error of failing to include stdlib, while not casting hides a possible error if the lhs type is wrong
[03:34:24] *** Joins: chenqisu1 (~chenqisu1@183.217.200.249)
[03:38:19] <zdctg[m]> well, from memory and this is probably wrong, but from memory the issue relates to the default return type being int which in turn relates to not including the header, and then of course if you cast to something incorrectly you've discarded some other error.
[03:38:29] *** Quits: Soni (~quassel@autistic.space) (Ping timeout: 256 seconds)
[03:41:17] *** Quits: gr33n7007h (~gr33n7007@user/gr33n7007h) (Ping timeout: 240 seconds)
[03:42:34] <zdctg[m]> the former of those issues entails https://wiki.sei.cmu.edu/confluence/spaces/flyingpdf/pdfpageexport.action?pageId=87152081
[03:42:35] *** Joins: gr33n7007h (~gr33n7007@user/gr33n7007h)
[03:44:42] <mcf> i think c++ requires an explicit cast from void * to other pointer types
[03:45:01] <nightstrike> I guess the latter issue is addressed mostly by doing T * t = malloc(sizeof *t) instead of sizeof(T)
[03:45:05] <nightstrike> yeah, c++ does
[03:45:10] <ChoHag> C++ was forged from the fires of C's more ... colourful days.
[03:45:20] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:206a:d63d:f8a8:ec3b) (Remote host closed the connection)
[03:45:26] <ChoHag> It got burned by pointers.
[03:45:42] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:206a:d63d:f8a8:ec3b)
[03:45:50] *** Quits: sdfgsdfg (~dfghsfgs@user/sdfgsdfg) (Quit: ayo yoyo ayo yoyo hololo, hololo.)
[03:47:01] <zdctg[m]> yes, I mostly write c++ anymore and c++ demands that you cast
[03:47:11] <nightstrike> I find the connection between c and c++ interesting, simply because of when things occurred, and I'm impressed that computer science was where it was between 1972 and 1985
[03:47:17] <zdctg[m]> on the rare occasion that I use malloc anyway
[03:47:46] <nightstrike> for me, malloc in c++ is usually because of some dependency on code that I can't change that is shared between languages
[03:47:55] <zdctg[m]> I don't know what the right answer is in terms of exactly why per the standards there, so I won't comment
[03:47:57] <nightstrike> I work with a lot of legacy systems
[03:49:42] <nightstrike> Well this is a fun warning... warning: implicit declaration of function 'cmalloc'; did you mean 'calloc'?
[03:50:12] <nightstrike> why yes, yes I did mean that.  Thank you, dmalcolm!
[03:50:42] <ChoHag> You might use to cast to do a lazy memmove: void *foo = malloc(big); *(struct thing *)foo = bar;
[03:51:57] <zdctg[m]> and I never do that because it feels wrong and dirty to abuse = in that manner, so that might explain my knowledge gap
[03:51:59] *** Quits: freep (~freepppp@46.246.189.172.dsl.dyn.forthnet.gr) (Read error: Connection reset by peer)
[03:52:29] <zdctg[m]> if i want a struct copied, i copy it.
[03:52:37] <ChoHag> I just did.
[03:52:43] *** Joins: rgrinberg (~textual@187.223.115.137)
[03:53:38] <ChoHag> *(struct thing *)foo ← bar;
[03:53:50] <zdctg[m]> yeah i know, i just avoid that and prefer memcpy because i dont think of assignment that way even though i know it does
[03:54:11] <nightstrike> why is that better than making foo be a struct thing *?
[03:54:18] * ChoHag shrugs
[03:54:33] <zdctg[m]> tomato, tomatah
[03:54:39] *** Quits: bebyx (~Thunderbi@user/bebyx) (Ping timeout: 250 seconds)
[03:54:50] *** Joins: joaofukuda (~joaofukuk@2804:431:c7f4:345c:9441:82c4:a226:af6b)
[03:55:09] <ChoHag> I use 'void *' when I mean 'a thing; I don't care what or where or how or really even whether it is'.
[03:55:26] *** Joins: sdfgsdfg (~dfghsfgs@user/sdfgsdfg)
[03:55:41] <nightstrike> std::any :)
[03:57:33] <ChoHag> Oh except not a function. Except on everything.
[03:57:38] <zdctg[m]> i also avoid anything like std::any or auto or similar because it equally feels wrong. I'm slowly becoming okay with the idea of std::move and T&& and such. I think I'm old truthfully.
[03:58:48] *** Quits: AmR (~AmREiSa@156.207.136.200) (Quit: Konversation terminated!)
[03:58:53] <zdctg[m]> I didn't realise it until a few years ago, but I'm not really OCD except with code and then I get all super OCD and things just have to be done in a particular manner often without a real reason for it other than I feel better.
[03:59:31] *** Quits: adip (~adip@crd88.neoplus.adsl.tpnet.pl) (Ping timeout: 245 seconds)
[03:59:45] <nightstrike> There's merit to that, but it must make things difficult work in teams with a different idea of right bikeshed color
[03:59:54] *** Quits: malina (~malina@user/malina) (Remote host closed the connection)
[03:59:55] <ChoHag> You can choose where to apply your OCD.
[03:59:59] <nightstrike> I think I left a few words out of that sentence....
[04:00:14] <zdctg[m]> I do that by deciding whose code I read :)
[04:00:20] <nightstrike> "to work" should be enough to fix it :)
[04:01:01] <ChoHag> I apply mine to figuring out why I get OCD over things then stopping.
[04:01:15] <ChoHag> Never-ending fun.
[04:01:33] *** Joins: Joanna (uid57472@id-57472.lymington.irccloud.com)
[04:01:53] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[04:01:53] *** Joins: geowiesnot (~user@5-51-190-244.abo.bbox.fr)
[04:01:53] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[04:01:53] *** Joins: wroathe (~wroathe@user/wroathe)
[04:02:04] <zdctg[m]> I've typically worked as a consultant and not as a developer thankfully, so I don't generally have to work in teams in that respect-- I come in, I reformat the code and gripe about why a particular programmer does things in a given manner but for the most part I don't have to deal with it
[04:02:17] *** Quits: Wulf (~Wulf@user/wulf) (Ping timeout: 256 seconds)
[04:03:55] *** Joins: Wulf (~Wulf@user/wulf)
[04:04:02] <nightstrike> I would think that as a consultant, you'd find yourself having to be much more agreeable to existing practices
[04:04:11] <nightstrike> since you're just there to do a thing and leave
[04:04:27] <zdctg[m]> one of my things is that local variables should always be initialised-- it drives me bonkers when people don't do that. I can usually excuse it professionally by saying it eliminates an entire bug class and leaving it as that, but I never really have to get into the depths of things with a programmer who for one reason or another refuses to do it
[04:05:02] <ChoHag> I think the standards bodies and compiler writers have caved and made it all zero.
[04:05:20] <nightstrike> sometimes initializing can be an unacceptable time sink
[04:05:36] <shiroyasha> zdctg[m]: "But the code looks ugly if you do that." - Those people, probably.
[04:05:38] <ChoHag> Maybe only the latter. Anyway I try to remember to initialise even to zero but often it's just noise, especially in small functions.
[04:05:41] <nightstrike> for instance, in a world where a type is large and you're counting microseconds, and the initial zero-fill won't get optimized out
[04:06:05] <ChoHag> Oh the speed of the zeroing will almost always be irrelevant.
[04:06:15] <nightstrike> not in my world
[04:06:20] <ChoHag> "almost".
[04:06:23] <nightstrike> :)
[04:06:32] <nightstrike> I admit it's a corner case
[04:06:37] <ChoHag> In your world it will still almost always be irrelevant.
[04:07:05] <caze> Sometimes you don't know what value to initialize with until runtime.
[04:07:05] <nightstrike> the place where I often skip it is for large matrix inversions in embedded controllers
[04:07:10] <ChoHag> I can say this confidently even not knowing what world your in. Not every line of code is part of the tight inner loop.
[04:07:37] *** Quits: random-nick (~random-ni@87.116.167.125) (Ping timeout: 256 seconds)
[04:07:49] <zdctg[m]> A lot of times it doesn't really matter, when reading other peoples code you can see their bugs sometimes and that's often one of them-- they wrote something that loops without initialising the variable, so they do a bunch of stuff and don't initialise any of the locals and then oddly in the middle of a bunch of other stuff you have like x = 0, that was a bug once and they fixed it-- but the main point was that it bothers me for some reason if you
[04:07:49] <zdctg[m]> don't initialise them all and that's what I call my coding OCD
[04:07:53] <ChoHag> Anyway the point is that the time for zeroing nearly always doesn't matter but the clarity of the written source code nearly always does.
[04:08:42] *** Parts: Joanna (uid57472@id-57472.lymington.irccloud.com) ()
[04:08:43] <zdctg[m]> caze: I have developed a special case for that, in such instances I declare like T x{}
[04:09:17] <ChoHag> eg. int i = 0; for (i = 0; i < foo; i++) ... or int i = 0; i = some_complex_calculation(); are both silly.
[04:09:23] <zdctg[m]> "I thought about it, its not uninitialised, but I didn't know at the time of declaration or it otherwise didn't make sense, so I said {} instead"
[04:09:30] <ChoHag> When there are dozens of variables though it's unreadable.
[04:10:16] <caze> int *p = NULL; p = malloc(N * sizeof *p);
[04:10:23] *** Joins: Soni (~quassel@autistic.space)
[04:10:27] <caze> Instead of int *p = malloc(N * sizeof *p);
[04:10:32] <ChoHag> A good rule of thumb would be if the variable is one or two characters long, it might not need initialisation.
[04:10:47] <ChoHag> And if you don't name your variables well enough for that to be a good rule of thumb then shame on you.
[04:10:50] <caze> zdctg[m]: Can you provide an example?
[04:11:28] *** Joins: jx0 (~jx0@199.229.250.94)
[04:11:30] <zdctg[m]> c++ specific, but e.g. std::vector, it generally doesn't make a lot of sense to specify a size at declaration time, so I'll say std::vector<T> x{}; instead of just std::vector<T> x;
[04:12:03] *** Joins: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net)
[04:12:03] <ChoHag> Oh well if you're talking C++ then we're all thumbs.
[04:12:15] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Remote host closed the connection)
[04:12:19] <zdctg[m]> its the same thing, but it means something to me-- "I thought about it"; but I don't call it rationale overall, I call it some sort of weird OCD
[04:12:49] <ChoHag> You should make every byte in the source code work for its presense.
[04:13:11] *** Quits: n3rdy1 (~n3rdy1@2600:1700:4570:3480:1b88:50f:dae0:9293) (Ping timeout: 252 seconds)
[04:13:17] <ChoHag> If it's not helping --- if it's not saying something --- get rid of it.
[04:14:03] <zdctg[m]> I also explicitly declare all of my integers as signed or unsigned because I feel like you should think about that and by doing that it enforces some sort of thought process about how the variable is being used
[04:14:27] <nightstrike> You actually write "signed int i = 0;"  ?
[04:14:59] <zdctg[m]> but thats like a bazillion signed-unsigned conversion errors in, and again, no real reason, I just feel like it exemplifies that the person thought about it and that is one that I don't try to inflict on people but I write in all my code
[04:15:01] <zdctg[m]> yes
[04:15:18] <zdctg[m]> signed int main(signed int argc, char** av) { ...
[04:15:53] <ChoHag> Seeing that would make me extremely wary.
[04:15:53] <caze> I think beginners should write foo(&array[0]), instead of just writing foo(array).
[04:16:20] <zdctg[m]> I always write &array[0], it seems more clear to me
[04:17:34] <ChoHag> I never have rules with "always" in them.
[04:17:45] <caze> How about &*(array + 0)?
[04:17:58] <nightstrike> ChoHag: but do you always have rules with "never" in them? :P :P
[04:18:05] <zdctg[m]> chohang: I'm mostly signifying to myself that I considered the possiblities of the values of the integer; but, for about a 10 year stretch there made a 6 figure income mostly resolving security issues in other peoples code from where they didn't handle integers correctly
[04:18:21] <zdctg[m]> case: I would never write that and would consider any such construct to mean that im doing something wonky/wrong
[04:18:22] <ChoHag> nightstrike: All of them except this one.
[04:18:58] <ChoHag> There's an exception to every rule except that one.
[04:19:30] <zdctg[m]> I understand the two are superfluous, &array[0]/array, it just...I dunno, why write char** argv versus char* argv[]? one seems clearer to some people and the inverse to others
[04:20:11] <nightstrike> I would write "1" instead of "&array[0]/array"  :) :) :) :) :)
[04:20:25] *** Quits: Soni (~quassel@autistic.space) (Ping timeout: 256 seconds)
[04:21:55] <caze> Especially since that won't compile.
[04:24:02] <zdctg[m]> I read some code the other day where the guy did two memcpy's like memcpy(dst, src, size); memcpy(dst+5, src+5, size-5)-- why do that? to him it was clearer that there were two fields in the data he was copying
[04:24:05] <zdctg[m]> well him or her
[04:24:14] <zdctg[m]> thats how &array[0] feels to me
[04:24:41] *** Joins: Soni (~quassel@autistic.space)
[04:25:56] <caze> Eventually, if you're around it enough, "an array's value is converted to a pointer to its first element" becomes second nature.
[04:26:25] <ChoHag> Keep at it long enough and it's all and only pointers.
[04:26:40] <nisstyre> anyone have experience doing software uart? trying to get this code working on my keyboard (atmega32u4) to send data to an adafruit chip
[04:26:42] <nisstyre> https://github.com/blalor/avr-softuart/blob/master/main.c
[04:26:46] *** Joins: freakazoid12345 (~matt@2603:9000:cf03:86c3:4f6:bcd8:5180:d27e)
[04:26:46] <nisstyre> it sends data, but it's wrong
[04:26:46] <zdctg[m]> caze: I know that *ptr = (struct T*)x is the same thing, but I still memcpy it because it seems clearer to me
[04:26:51] <nisstyre> so the interrupts are triggering
[04:26:54] <nisstyre> but the timing is off I think
[04:26:57] <nisstyre> not sure how to debug
[04:27:16] <zdctg[m]> erm struct T* etc
[04:27:18] <nisstyre> I changed all the pin configuration and stuff from that, but it's basically the sane
[04:27:20] <nisstyre> *same
[04:27:36] <nisstyre> oops wrong file, https://github.com/blalor/avr-softuart/blob/master/softuart.c
[04:27:42] *** Quits: Klinda (~superleag@user/klinda) (Quit: Konversation terminated!)
[04:28:01] <nisstyre> I suspect I have to do something to compensate for the cpu frequency or something, but it seems like that should already be happening
[04:28:59] <nisstyre> also I had to set the baudrate to 4800 or it caused integer overflow :/
[04:29:53] <zdctg[m]> very briefly looking at the code it seems to be right but that is just a once over; could you explain the problem you're having in more detail please because it looks like its probably a state error of some sort
[04:29:59] *** Quits: freakazoid343 (~matt@2603-9000-cf03-86c3-5824-82b6-9b03-aa20.inf6.spectrum.com) (Ping timeout: 250 seconds)
[04:30:16] <nisstyre> zdctg[m]: the uart code? my problem is that the other side gets garbage data
[04:30:31] <nisstyre> I have a gpio pin (F7 on the atmega32) wired up
[04:30:33] <nisstyre> for tx
[04:31:43] <nisstyre> https://ww1.microchip.com/downloads/en/DeviceDoc/Atmel-7766-8-bit-AVR-ATmega16U4-32U4_Datasheet.pdf <- for anyone curious about this chip
[04:32:12] <nisstyre> I wish I had a logic analyzer
[04:32:17] <nisstyre> that would prob help
[04:32:42] <zdctg[m]> hrm so keep in mind that I'm reading the code at a very superficial level, but this appears to be the basic functionality of the transmit function
[04:32:43] <zdctg[m]> 	if ( flag_tx_busy == SU_TRUE ) {... (full message at https://libera.ems.host/_matrix/media/r0/download/libera.chat/d45d5a3fccb5a1fa0a084580fe64562a4970d048)
[04:33:11] <nisstyre> yes
[04:33:31] <nisstyre> basically setting it high/low depending on the buffer
[04:33:33] <zdctg[m]> I don't see anything wrong with that, you set the pin to high if its a 1 and low if its not and there's not really a whole lot that could screw up there
[04:33:41] <nisstyre> yeah, agreed
[04:33:45] <nisstyre> there might be something else going wrong
[04:34:06] <nisstyre> it sends it three times though right?
[04:34:14] <ChoHag> Interrupts can happen in the middle of any of that.
[04:34:28] <nisstyre> ChoHag: it's calling cli() somewhere there
[04:34:33] <nisstyre> (clear interrupts)
[04:35:00] <nisstyre> although, maybe something else is resetting them
[04:35:12] <nisstyre> I'm trying to hack this into the QMK firmware for my keyboard
[04:36:49] <zdctg[m]> forgive me if I am wrong, I'm sitting here drinking
[04:36:55] <nisstyre> yeah no problem
[04:37:01] <nisstyre> I'm just trying to get an idea of what might be wrong
[04:37:08] <zdctg[m]> but you don't appear to be doing anything with the data when you receive it for the most part
[04:37:27] <zdctg[m]> so you have flag_rx_off which dictates whether the ISR is send or recive, okay fine
[04:37:29] <nisstyre> right now I'm just doing softuart_putchar('Q') three times
[04:37:45] <ChoHag> Does the interrupt handler have any effect on any of those variables?
[04:37:47] <nisstyre> and softuart_init() first
[04:38:32] <nisstyre> ChoHag: it modifies internal_tx_buffer
[04:38:38] <zdctg[m]> then you have flag_rx_ready which is ...? but its either true or false, when its false you read the actual data transmitted
[04:38:40] <ChoHag> Is it declared volatile?
[04:38:49] <nisstyre> not that I can tell
[04:38:51] <nisstyre> it's static
[04:38:54] <ChoHag> Try that.
[04:38:56] <nisstyre> hmm good idea
[04:39:23] <nisstyre> oh wait it is volatile
[04:39:27] <nisstyre> it's just declared twice
[04:39:38] <nisstyre> ah I was looking at internal_rx_buffer, my bad
[04:39:48] <ChoHag> Twice?
[04:39:59] <ChoHag> That sounds like a bug.
[04:40:00] <nisstyre> internal_tx_buffer is `volatile static unsigned short`
[04:40:03] <zdctg[m]> I guess I am assuming that internal_rx_buffer is what you're eventually ending up with that has trash data in it
[04:40:04] <nisstyre> ChoHag: no I just misread it
[04:40:28] <nisstyre> zdctg[m]: I'm not using the rx pin at all
[04:40:29] <ChoHag> Well dig into those functions/macros maybe.
[04:40:33] <nisstyre> just calling the function that disables it
[04:40:44] <nisstyre> just trying to do tx -> rx (on the adafruit chip)
[04:41:02] <ChoHag> Then if that doesn't work figure out what your assumptions are and check them.
[04:41:07] <nisstyre> I do wonder why they haven't declared internal_rx_buffer volatile
[04:41:25] <nisstyre> ChoHag: yeah I'm going to try and figure out exactly what bit sequence it's sending
[04:41:44] <ChoHag> If you're programming a keyboard there can't be that much state to check.
[04:41:54] <ChoHag> How much memory does it have?
[04:42:03] <nisstyre> nope, although I'm modifying someone else's firmware (QMK)
[04:42:23] <nisstyre> ChoHag: like 2.5kb
[04:42:37] <nisstyre>  2.5 KB SRAM, 1 KB EEPROM
[04:42:39] <zdctg[m]> but where is the data coming from? you read the start bit and then loop through 4 times based on the value of timer_rx_ctr but you're not actually reading data anywhere really
[04:42:47] <ChoHag> That'll fit on a screen.
[04:43:08] <nisstyre>  internal_tx_buffer = ( ch << 1 ) | 0x200;
[04:43:15] <nisstyre> that happens in softuart_putchar
[04:43:23] <nisstyre> so I assume it triggers an interrupt
[04:44:00] <zdctg[m]> but thats the TX buffer that you write out bit by bit via set_tx_pin_high()/set_tx_pin_low()
[04:44:08] <nisstyre> zdctg[m]: yes
[04:44:23] <zdctg[m]> where do you read into a RX buffer?
[04:44:35] <nisstyre> on the other chip, which is running micropython
[04:44:42] <nisstyre> and I'm using a regular uart library
[04:44:51] <nisstyre> just setting the baud rate the same
[04:45:12] <nisstyre> basically I'm trying to get them communicating
[04:45:21] <nisstyre> so that I can use the bluetooth and leds on this other chip
[04:45:23] <zdctg[m]> is there a way to verify that the problem is absolutely for sure in transmission?
[04:45:33] <nisstyre> zdctg[m]: I could use a logic analyzer
[04:45:37] <nisstyre> which I don't have
[04:45:39] <nisstyre> but I could get one :p
[04:46:12] <zdctg[m]> that code seems pretty difficult to screw up, you're just writing bit by bit and nothing seems overly wrong about that
[04:46:14] <nisstyre> I guess this might be a good excuse to
[04:46:39] <nisstyre> zdctg[m]: yeah agreed, it's very simple
[04:46:47] <zdctg[m]> whats the entire point of this RX code path? it seems to do basically nothing
[04:46:58] <nisstyre> zdctg[m]: in softuart.c ?
[04:47:31] <zdctg[m]> yeah; you read the start bit then loop 4 times and then read a flag
[04:47:45] <zdctg[m]> but you dont seem to do anything with it
[04:48:33] <nisstyre> I'm not sure, I only tweaked this code, I didn't write it
[04:48:40] <nisstyre> but I'm not even using the RX part anyway
[04:48:58] <nisstyre> might try just rewriting this from scratch
[04:50:31] <zdctg[m]> without really digging into things and forgive me, as I said, I'm sitting here drinking and looking at only a small portion of your code-- but my immediate concern would be whether all messages received are invalid or of only those after the first were
[04:51:08] <zdctg[m]> you read a start bit and a flags bit, but you don't seem to RX anything other than that-- I'd have to go pull the UART spec to know if that is right or not
[04:51:49] <zdctg[m]> the RX code path seems superfluous to the entire operation, like why does it even exist
[04:52:25] <nisstyre> zdctg[m]: I think it might be something wrong with the timer being used
[04:52:33] <nisstyre> there's multiple timers on this chip
[04:52:52] <nisstyre> I'll have to think about it and do some more research anyway
[04:53:04] <zdctg[m]> because I can't decide why it exists, it makes me wonder if there is some sort of 2 way communication that is supposed to be occurring that isn't, which is why i ask about the first transmission versus subsequent ones
[04:53:17] <nisstyre> oh, yeah
[04:53:25] <zdctg[m]> yeah no if you have a better idea then by all means you're probably right
[04:53:36] <nisstyre> well I'm explicitly disabling RX as well
[04:53:44] <nisstyre> so it should hopefully have no effect on all of this
[04:53:50] <nisstyre> I could even comment it out
[04:54:00] <zdctg[m]> which is sort of my point
[04:54:06] <nisstyre> yeah
[04:54:17] <zdctg[m]> from the code im reading, you could comment it out and have no effect
[04:55:00] <zdctg[m]> I've still got like a liter and a half of beer to go, why don't you do that and test it and see what if anything changes-- if we can eliminate that entirely then we're on a good starting point
[04:55:11] *** Joins: imp (~imp@179-191-215-199.static.sumicity.net.br)
[04:55:53] <zdctg[m]> that would mean that whatever is wrong could only be in the TX code path, and then it would likely mean that whatever the problem is exists on the receiving end-- but my guess is that if that is true that we're not understanding some nuance of UART
[04:56:41] <nisstyre> yeah no difference with that code out
[04:56:58] <zdctg[m]> that's what i thought, but good to check one way or the other
[04:57:06] <nisstyre> #define SOFTUART_TIMERTOP ( F_CPU/SOFTUART_PRESCALE/SOFTUART_BAUD_RATE/3 - 1)
[04:57:11] <nisstyre> I think the problem is this calculation
[04:57:31] <nisstyre> it's actually an 8 bit value
[04:57:47] <zdctg[m]> why do you do this: tmp = 3; // timer_tx_ctr = 3
[04:57:49] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.4)
[04:58:03] <nisstyre> zdctg[m]: the comments say it sends it three times
[04:58:05] <nisstyre> why, not sure
[04:58:27] <nisstyre> well not exactly I guess
[04:58:33] <nisstyre>     /* "A timer interrupt must be set to interrupt at three times
[04:58:35] <nisstyre>        the required baud rate." */
[04:58:42] <nisstyre> that part I don't quite understand actually
[04:59:02] <zdctg[m]> I ask because the logic around both TX and RX seems to revolve around nibbles and you read and set the tmp variable based on timer_tx_ctr/timer_rx_ctr
[04:59:03] <nisstyre> I suppose it's compensating for it being slow somehow?
[04:59:13] <zdctg[m]> but then in the middle of the TX code path you just reset tmp to 3
[05:00:07] <nisstyre> hmm yeah that is weird
[05:00:11] <zdctg[m]> so you've got like int x = 4; int y = x; if (x-- = 0) { ... } x = 3 } x = y;
[05:00:30] <nisstyre> I would expect it to count down from three and reset it at 0
[05:00:39] <zdctg[m]> so the whole logic of whats going on is based on these values but in the middle of it you then just set it to 3
[05:01:09] <nisstyre> oh it's every three interrupt calls
[05:01:27] <nisstyre> so it gets set to three initially, then gets called and each time decremented
[05:01:36] <nisstyre> then at 0 it resets it to go again
[05:01:50] <nisstyre> at least that's my understanding
[05:02:13] <nisstyre> it's a little weird to decrement it in the condition though IMO
[05:02:16] *** Quits: oriba (~oriba@dynamic-077-183-110-253.77.183.pool.telefonica.de) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[05:02:20] <nisstyre> but should be ok?
[05:02:27] <zdctg[m]> but you're setting that on every interrupt call basically aren't you?
[05:02:33] <nisstyre> though won't that trigger it on the 4th call
[05:02:42] <zdctg[m]> why isn't timer_tx_ctr just always set to 3?
[05:02:53] <nisstyre> zdctg[m]: it should only do the tmp = 3; when it's 0
[05:03:16] <zdctg[m]> oh no you're right. /me takes another drink
[05:03:19] <nisstyre> and timer_tx_ctr is in sync with that
[05:03:27] *** Joins: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[05:03:46] <nisstyre> but I wonder what will happen if I change `--tmp == 0` to `--tmp == 1`
[05:04:42] <nisstyre> I get different data, which is interesting
[05:04:47] <nisstyre> but still garbled
[05:05:42] <nisstyre> I'll have to learn a bit more about the UART protocol and figure out *why* it's doing this in the first place
[05:06:08] *** Joins: Zambyte (~Zambyte@cpe-104-228-60-14.nycap.res.rr.com)
[05:06:26] <zdctg[m]> it seems like there is a mistmatch here
[05:06:33] <nisstyre> yes, I believe so
[05:06:41] <zdctg[m]> like you're waiting on 3 interrupt calls for no apparent reason before you write a single bit
[05:07:12] <zdctg[m]> so you putchar() and reset things and start the process, but then for every 3 interrupts you're only writing a single bit, then you're resetting again
[05:07:20] <nisstyre> basically the other side has to be able to reliably detect high/low in the correct order
[05:07:22] <nisstyre> is all
[05:07:25] <nisstyre> that's my understanding
[05:07:30] <zdctg[m]> it feels like that is probably wrong
[05:08:00] <zdctg[m]> it could be right, there could be some timing delay or whatever that makes it correct, but you only ever actually do something every 3rd interrupt
[05:08:07] <nisstyre> well it shouldn't be doing *anything* in those calls that are ignored
[05:09:48] <zdctg[m]> wait won't you always call the pull low code path?
[05:09:49] <zdctg[m]> internal_tx_buffer = ( ch << 1 ) | 0x200
[05:10:52] *** Quits: jx0 (~jx0@199.229.250.94) (Quit: poof!)
[05:10:59] <nisstyre> I have an idea of how to debug this without a logic analyzer
[05:11:05] *** Quits: geowiesnot (~user@5-51-190-244.abo.bbox.fr) (Ping timeout: 256 seconds)
[05:11:11] <nisstyre> just put a huge delay between each bit being set
[05:11:15] <nisstyre> then check with a multimeter
[05:11:31] <zdctg[m]> no not always, just the first time always, the first bit will always be zero
[05:11:42] <nisstyre> zdctg[m]: I think that's supposed to happen
[05:11:46] <nisstyre> as like a status bit or something
[05:12:02] <zdctg[m]> also-- consider this
[05:12:28] <zdctg[m]> internal_tx_buffer = ( ch << 1 ) | 0x200; but you call it in a loop in softuart_puts(), but in order to actually transmit you wait on an ISR
[05:12:47] <zdctg[m]> so you're just rewriting the same char over and over again
[05:12:54] <nisstyre> that's a good point
[05:13:51] <zdctg[m]> it seems like you would want something conceptually like internal_tx_buffer << 8 |= (ch << 1) | 0x200
[05:14:14] <zdctg[m]> that would explain garbage very well actually
[05:14:14] <nisstyre> https://web.ics.purdue.edu/~jricha14/Serial_Stuff/UCSRA.htm
[05:14:15] <candide> Title of nisstyre's link: UART Control and Status Register A
[05:15:29] <nisstyre> oh I think this is just for hardware uart
[05:15:49] <nisstyre> not sure, I need to learn more I guess
[05:15:55] <zdctg[m]> Do you understand what I am saying? you write to the same char over and over again for each iteraction of the loop, but the ISR itself only writes 1 bit for every 3 interrupts
[05:16:12] <nisstyre> zdctg[m]: yeah I see what you're saying
[05:16:43] *** Quits: NEYi (~NEYi@109.251.216.38) (Read error: Connection reset by peer)
[05:17:01] <zdctg[m]> I don't know what reference implementation you're working off of, but my guess is that you've copied something slightly incorrect
[05:17:54] <zdctg[m]> it was maybe something like a 32-bit buffer or whatever for internal_tx_buffer so that the delay in actually writing the data to UART was fine because you didn't loop and overwrite internal_tx_buffer until at least 8 bits had been written
[05:18:32] <zdctg[m]> hrm, actually, you buffer things via flag_tx_busy
[05:18:36] <nisstyre> zdctg[m]: this lib might work better https://github.com/andygock/avr-uart
[05:18:37] <candide> Title of nisstyre's link: GitHub - andygock/avr-uart: An interrupt driven UART Library for 8-bit AVR microcontrollers. Uses built-in UART with circular transmit and receive buffers.
[05:18:56] <nisstyre> at least the code looks more well maintained
[05:19:16] <nisstyre> I'll still have to configure all of the pins and stuff again
[05:19:24] *** Quits: Dotz0cat (~Dotz0cat@h124.175.40.162.dynamic.ip.windstream.net) (Ping timeout: 250 seconds)
[05:20:02] <nisstyre> this will be the third library I've tried on this :(
[05:20:14] <nisstyre> no shortage of these libraries and most of them seem like crap
[05:20:26] <zdctg[m]> are the start and stop bits encoded in the data somehow? is that what the 0x200 is for instance?
[05:20:33] <nisstyre> I think so yeah
[05:20:37] <nisstyre> for example
[05:20:49] <nisstyre> Q = 1010001
[05:21:05] <nisstyre> then it becomes 1010100010
[05:21:17] *** Joins: ironman (~ironman@2405:201:1010:b033:bad0:8910:44c9:da61)
[05:22:10] <nisstyre> though that seems weird
[05:22:43] *** Joins: haniaF_ (~haniaF@83.24.223.148.ipv4.supernova.orange.pl)
[05:22:47] <nisstyre> it should be high at the start and low at the end
[05:22:54] *** Joins: Dotz0cat (~Dotz0cat@173.188.34.42)
[05:22:56] <nisstyre> oh wait no
[05:23:13] *** Quits: haniaF (~haniaF@83.24.206.88.ipv4.supernova.orange.pl) (Ping timeout: 256 seconds)
[05:23:26] <zdctg[m]> that's a little weird-- that sets the high two order bits to 1, but it sets like the high nibble bit to 1 also
[05:23:35] <zdctg[m]> I would expect that a prefix and a suffix didn't modify any of the data
[05:23:51] <zdctg[m]> and the first bit you write is always zero
[05:24:04] <nisstyre> well there's 10 bits
[05:24:09] <nisstyre> so two status bits, and 8 data bits
[05:24:29] *** Quits: kurahaupo_ (~kurahaupo@115.69.27.211) (Read error: Connection reset by peer)
[05:24:39] <nisstyre> so it sees that first low and starts transmitting, then 8 bits, then high, and stops
[05:24:40] *** Joins: kurahaupo_ (~kurahaupo@115.69.27.211)
[05:24:41] <zdctg[m]> yes so the last 2 bits are always 1, which okay cool that's a stop signal or something
[05:24:43] <nisstyre> and starts again for the next byte
[05:24:59] <nisstyre> that's my assumption and google seems to back it up
[05:25:17] <zdctg[m]> but like a middle bit is set to 1 always, which would corrupt any data that exists and apparently the start bit is always x0
[05:25:43] <nisstyre> what do you mean a middle bit is always 1?
[05:25:52] <nisstyre> 200 = 1000000000
[05:25:52] <zdctg[m]> 11001000
[05:26:22] *** Joins: loganlee[gnu] (~Thunderbi@user/loganlee)
[05:26:41] <nisstyre> er 0x200, my bad
[05:26:49] <nisstyre> I thought it was hex lol
[05:26:52] <nisstyre> you're right
[05:27:05] <nisstyre> it is hex in the code though
[05:27:06] <zdctg[m]> are you sure its not supposed it be 0xC1? that would make more sense
[05:27:43] <nisstyre> as far as I can tell the UART protocol expects one start bit and one stop bit
[05:27:47] <zdctg[m]> oh thats my fault
[05:27:55] <zdctg[m]> im typing 200 deciminal into the calculator
[05:28:00] *** Joins: boB_K7IQ (~boB_K7IQ@ip72-201-138-188.ph.ph.cox.net)
[05:28:10] <nisstyre> yeah it's 0x200
[05:28:12] *** Joins: SymbioticFemale (~Symbiotic@user/SymbioticFemale)
[05:28:18] <nisstyre> which is actually 512
[05:28:26] <zdctg[m]> yeah im thinking hex but typing in decimal
[05:28:33] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[05:28:53] <nisstyre> I have a python function in my repl
[05:28:56] <nisstyre> def show_bin(n, b=32):
[05:28:58] <nisstyre>     return ('{:0%sb}' % b).format(n)
[05:29:03] <nisstyre> which shows me the binary output of any number
[05:29:10] <nisstyre> as a 32 bit
[05:29:23] <zdctg[m]> im just using calc.exe but i thought i was set in hex mode when i was in decimal mode
[05:29:26] <zdctg[m]> okay
[05:29:27] <nisstyre> I find it very handy for this sort of thing
[05:29:46] <zdctg[m]> so you call putchar(), it waits until the proper state which is when TX is not busy, then it loops
[05:29:53] <nisstyre> and then I can just do 0xblah
[05:29:56] <nisstyre> to do hex
[05:29:58] <zdctg[m]> wait is that the problem
[05:30:14] *** Quits: alch (~alch@151.38.118.98) (Ping timeout: 250 seconds)
[05:30:16] <nisstyre> is what the problem?
[05:30:28] <nisstyre> that it's not waiting?
[05:30:32] <zdctg[m]> "then [...]"
[05:30:34] <zdctg[m]> rereading
[05:31:05] *** Quits: freakazoid12345 (~matt@2603:9000:cf03:86c3:4f6:bcd8:5180:d27e) (Ping timeout: 250 seconds)
[05:31:05] <zdctg[m]> you're not checking the busy status after the initial check, but you're looping over the input
[05:31:28] <zdctg[m]> nope, excuse me
[05:31:38] <zdctg[m]> putchar versus puts
[05:31:45] <nisstyre> if (flag_tx_busy == SU_TRUE)
[05:32:01] <nisstyre> shouldn't that be SU_FALSE
[05:32:03] <nisstyre> or am I insane
[05:32:10] *** Joins: alch (~alch@151.82.119.111)
[05:32:21] <zdctg[m]> this line bugs me internal_tx_buffer = ( ch << 1 ) | 0x200;
[05:32:29] <zdctg[m]> you actually only have 6 bits of data
[05:32:43] <nisstyre> oh it's setting it to be busy before it does anything
[05:32:55] <nisstyre> then setting it false when it's done
[05:33:08] <nisstyre> that seems backwards
[05:33:45] *** Quits: kurahaupo_ (~kurahaupo@115.69.27.211) (Ping timeout: 256 seconds)
[05:33:49] <nisstyre> why wouldn't the conditional check go before setting it
[05:34:04] <zdctg[m]> no no, ignore that, like I said, I'm drinking-- I thought you had like while (BUSY) ; while(*ptr) write(ptr++);
[05:34:31] <zdctg[m]> but you actually a routine that calls into another one that loops on busy
[05:34:49] <zdctg[m]> so for every character that is written you'll wait on each prior character
[05:35:48] <zdctg[m]> sorta funny that you should mention that, you should initialise it before using it
[05:36:08] <zdctg[m]> but that should only impact one iteration of the loop then it would work fine
[05:36:12] <nisstyre> softuart_init sets it false
[05:36:22] <TonyStone> I found a project on GitHub... written in C.  I am wondering how difficult it would be to make some changes to it to compile it into a dynamic library so i can call its functions from my Pascal program.  I have no experience with C... any good tips?
[05:36:29] <zdctg[m]> indeed
[05:36:43] <nisstyre> TonyStone: does pascal have a way to use the c calling convention?
[05:36:49] <TonyStone> yes it does
[05:36:53] *** Quits: drbeco (~beco@2804:351c:dd01:b700:1b03:6b85:20d4:ad73) (Quit: Leaving)
[05:36:53] <nisstyre> then you should be good
[05:37:04] <nisstyre> just declare your functions as using cdecl convention and link in the .so lib
[05:37:10] <nisstyre> I've never used pascal though
[05:37:11] <zdctg[m]> but the question I was asking is-- you have 10 bits of data, but you're representing it always in 8 bits, which means you lose 2 bits for every 8 bits you try to write
[05:37:25] <TonyStone> but the current project doesnt make a .so file.  it makes a binary console program./.. :(
[05:37:35] *** Joins: kurahaupo_ (~kurahaupo@115.69.27.211)
[05:37:39] <nisstyre> zdctg[m]: well, the other side is supposed to throw them away
[05:37:43] <nisstyre> and result in a byte
[05:37:53] <TonyStone> I just want to call its functions... so I am wondering if there is a special instruction i can use to comnpile it into an .so?
[05:38:04] <nisstyre> TonyStone: you will prob have to modify the declarations
[05:38:08] <zdctg[m]> actually its 16-bits
[05:38:09] <nisstyre> if there's any functions declared static for example
[05:38:17] <nisstyre> you'll want to remove that if you want to use them
[05:38:22] <nisstyre> zdctg[m]: what is?
[05:38:47] <zdctg[m]> volatile static unsigned short internal_tx_buffer; /* ! mt: was type uchar - this was wrong */
[05:38:50] <TonyStone> hmmm... i will have to keep looking through the code... i think i have seen things that had static; in there...
[05:39:08] <nisstyre> zdctg[m]: I'm not sure how big an unsigned short is on this chip actually
[05:39:15] <nisstyre> I can find out though
[05:39:28] <zdctg[m]> yeah that is probably worth checking
[05:39:42] <zdctg[m]> if its 8-bits, then you're losing data due to the start/stop bits
[05:39:43] <nisstyre> 2 bytes apparently
[05:39:46] <nisstyre> so you're right
[05:39:53] <zdctg[m]> yeah so 16-bits
[05:40:15] <nisstyre> TonyStone: it only matters if you actually need to call them in your pascal code
[05:40:18] <nisstyre> otherwise leave it alone
[05:40:27] <nisstyre> then you'll use a compiler like gcc to make a .so file
[05:40:29] <nisstyre> google for that
[05:41:20] <TonyStone> ok... i will look for that.  currently the project uses make and automake or something.  but i beleive it comp;iles with GCC
[05:41:24] <nisstyre> and you can delete main() if it's there
[05:41:34] <TonyStone> yes there is a main i think
[05:42:01] <zdctg[m]> I'm at a loss, you call into softuart_puts() which loops over the string, but for each iteraction of the loop you sit and wait for 10 bits of data to be written.
[05:42:23] <nisstyre> zdctg[m]: this is where a logic analyzer would help me
[05:42:28] <zdctg[m]> For every bit of data that is written you have 3 interrupts that occur, but for 2 of them nothing at all occurs except an integer decrement
[05:42:31] <nisstyre> I'm gonna try that other library I found that looks higher quality
[05:42:41] <nisstyre> but I might come back to this and see if I can figure out why it isn't working
[05:42:49] *** Quits: Rounin (~david@84.212.130.215) (Ping timeout: 256 seconds)
[05:43:03] <nisstyre> it would be nice if there were a good way to emulate this and run a debugger
[05:43:17] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[05:43:32] <zdctg[m]> there doesn't appear to be anything wrong in it
[05:43:49] <nisstyre> well, the wrongness could also be that it wasn't written for the exact chip I have
[05:43:55] <nisstyre> it has the same architecture
[05:44:03] <nisstyre> but it was apparently written for other chips in the same family
[05:44:07] <zdctg[m]> id put some sort of sleep in it and make an LED blink if I pulled high and then print the binary out that I received to make sure that the two are the same thing
[05:44:16] <nisstyre> and I did tweak the pins and registers a bit
[05:44:40] <nisstyre> zdctg[m]: I could do that but I'd have to wire it up to another pin
[05:44:48] <nisstyre> no LEDs on this board at the moment
[05:45:05] <nisstyre> and I'm not sure if it's high enough voltage to make it bright enough without a mosfet or something
[05:45:11] <nisstyre> but yeah I could do that
[05:45:12] <zdctg[m]> whatever data you're sending to softuart_puts() should be transmitted as expected albeit prefixed with the start bits and the stop bit
[05:45:28] <nisstyre> I also have another debugging console
[05:45:30] <nisstyre> over regular UART
[05:45:39] <nisstyre> but that seems to affect the timing of it if I print out to it
[05:45:44] <nisstyre> (while it's doing this)
[05:46:19] <nisstyre> the whole reason I am doing this is because the normal UART pins are already taken
[05:46:24] <zdctg[m]> I'm assuming timing matters here and that's why we only write 1 bit per every 3 interrupts
[05:46:24] <nisstyre> otherwise I'd just use them
[05:46:32] <nisstyre> yep that was what I assumed
[05:46:41] *** Quits: steve__ (~steve@ool-182c2b80.dyn.optonline.net) (Ping timeout: 252 seconds)
[05:46:42] <nisstyre> it's compensating for lack of control
[05:47:07] *** Quits: chenqisu1 (~chenqisu1@183.217.200.249) (Ping timeout: 256 seconds)
[05:47:35] <zdctg[m]> the only reason I suggest the LED thing is because it allows you to verify that both ends of the connection send and receive the same data
[05:47:46] <nisstyre> oh I see what you mean
[05:47:52] <nisstyre> actually that's a good idea
[05:48:04] <nisstyre> I could wire up an LED in parallel with the wire going out
[05:48:13] <nisstyre> and it should at least in theory light up a bit each time it's set high
[05:48:33] <zdctg[m]> its probably easier to try to send only 1's so that you;re not trying to guess about the timing of zero's
[05:48:39] <nisstyre> yeah
[05:48:54] <nisstyre> so just send 0xff each time
[05:49:28] *** Quits: dudebbn (~dudebbn@cpe-174-97-16-77.cinci.res.rr.com) (Quit: Leaving)
[05:49:32] <zdctg[m]> hehe well thats probably a lot of 1's to count, but yeah that is the general idea-- I guess you don't have a lot of options given that your precision is 1 byte
[05:49:37] <nisstyre> I'm going to try the LED thing just for fun
[05:50:02] <nisstyre> it might not be perceptable without a huge delay, though
[05:50:20] <zdctg[m]> I might try something like 3 or 7 initially and see if that is received correctly
[05:51:23] <zdctg[m]> yeah you might need to put a delay in there, but that doesn't overly matter a whole lot just for debugging purposes right?
[05:51:33] <nisstyre> it shouldn't
[05:51:54] <nisstyre> zdctg[m]: I want to get this guy https://www.adafruit.com/product/237
[05:51:55] <candide> Title of nisstyre's link: Bus Pirate - BPv3.6 [v3.6] : ID 237 : $30.00 : Adafruit Industries, Unique & fun DIY electronics and kits
[05:53:02] *** Quits: abf (~abf@user/abf) (Quit: Leaving)
[05:53:16] <nisstyre> "Scriptable binary bitbang, 1-Wire, I2C, SPI, and UART modes"
[05:53:17] *** Quits: kurahaupo_ (~kurahaupo@115.69.27.211) (Ping timeout: 240 seconds)
[05:53:45] <nisstyre> it lets you sniff the connections and stuff
[05:54:53] <zdctg[m]> yeah I have one of them on the other side of the planet
[05:55:18] <zdctg[m]> all we're really trying to do is emulate a logic analyser
[05:56:11] <zdctg[m]> ftr, whatever the problem is, it doesn't appear to be a c language issue, so we're sorta in the wrong channel for it-- but what you interrupt was us debating the nuances of whether its more appropriate to say &array[0] or just array, so I don't think anyone minds
[05:56:26] <zdctg[m]> interrupted
[05:56:37] <nisstyre> true, I wasn't sure where else to ask
[05:56:50] *** Quits: pulse (~pulse@user/pulse) (Quit: Visit https://indiedevs.net/ we have cookies)
[05:56:52] <nisstyre> most of the embedded people seem to be on web forums and stuff
[05:57:53] *** Quits: foul_owl (~kerry@94.140.8.107) (Ping timeout: 256 seconds)
[05:58:03] <zdctg[m]> ##electronics is frequently pretty active, but im not in there at present so i dont know-- its fine i think, no worries plus we didnt know it wasnt a c language issue to start off with
[05:58:18] <nisstyre> I'll check that channel out
[05:59:13] <zdctg[m]> so do something like write a 3 out and check for 3 blinks, ideally you'll receive a 3 on the other end but you might not because you drew from the transmission with the led
[06:00:23] <zdctg[m]> well i guess it would actually be 4 blinks, like a blink then a pause for a bit then 3 blinks
[06:00:41] <nisstyre> yeah exactly
[06:00:44] <zdctg[m]> I'm assuming this is the correct sequence for UART and I don't know that is the case
[06:00:49] <nisstyre> hopefully they'll light up enough
[06:01:09] <nisstyre> actually I can power them off my adafruit board
[06:01:21] <nisstyre> then just use the gpio value to toggle a mosfet
[06:01:31] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[06:02:15] <zdctg[m]> im just trying to get around the fact that there is really no way to output any debugging information and no way to verify that the data intended to be sent is what is actually going out
[06:02:28] <nisstyre> yeah, I like the idea
[06:02:30] <zdctg[m]> id expect it to work, but i expect a lot things that are wrong too, so... o_O
[06:02:39] <nisstyre> I might actually keep it on the final product
[06:02:47] <nisstyre> just a little led blinking when it sends data
[06:03:20] *** Joins: kitsunenokenja (~kitsunech@68.91.220.96)
[06:03:24] <zdctg[m]> das blinkenlights are nicht fur gefingerpoken
[06:03:31] *** Quits: llh (~llh@user/llh) (Quit: :::: ( UPP ) ::::)
[06:04:02] *** Quits: satanist (~satanist@bureaucracy.bureaucracy.de) (Ping timeout: 250 seconds)
[06:04:39] *** Joins: kurahaupo_ (~kurahaupo@115.69.27.211)
[06:04:48] <zdctg[m]> LEDs are really low voltage, so I am assuming that whatever constitutes high here is enough, but I'm also saying that whatever constitutes low isn't that we're sitting with an LED always on
[06:05:21] <zdctg[m]> even so i would expect it to be discernible through the intensity of the brightness
[06:05:30] <nisstyre> zdctg[m]: it isn't a large amount of current though, which is what matters
[06:05:40] <nisstyre> but that's fine
[06:06:05] <nisstyre> I would just connect the positive wire to my adafruit board which has more power, then connect the gpio wire in parallel to the gate of a mosfet to toggle it
[06:06:26] <zdctg[m]> well that might mean that its not received on the other end, but LEDs are so lower power that I would expect that basically anything to them causes some sort of lighting
[06:06:46] <nisstyre> yeah you can light them up just from touching a circuit with your hand
[06:06:49] <nisstyre> even turned off
[06:06:53] <zdctg[m]> I would guess that "high" is probably 5v
[06:07:04] <nisstyre> I think it's 3.3 volt logic
[06:07:08] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[06:07:08] <zdctg[m]> I've not idea what the current required is, but its so low that I've never considered it
[06:07:08] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[06:07:08] *** Joins: wroathe (~wroathe@user/wroathe)
[06:07:16] <nisstyre> actually
[06:07:21] <nisstyre> you might've just discovered the problem
[06:07:28] <zdctg[m]> make sure its not infrared, i made that mistake once trying to do basically this :)
[06:07:34] <nisstyre> when I measured it before with my meter it was closer to 1 volt
[06:07:35] <zdctg[m]> wiring?
[06:07:50] <nisstyre> but it never occurred to me that it might not be 3 volt logic
[06:08:41] <nisstyre> yeah
[06:08:48] <nisstyre> "high" on this chip is like 1.9 volts
[06:08:50] <nisstyre> damn
[06:08:52] <nisstyre> that's the problem haha
[06:09:02] *** Joins: ferdna (~ferdna@user/ferdna)
[06:09:13] *** Quits: ironman (~ironman@2405:201:1010:b033:bad0:8910:44c9:da61) (Ping timeout: 256 seconds)
[06:09:16] <nisstyre> I'll have to measure it again just to make sure
[06:09:20] <nisstyre> but I think that's the issue here
[06:09:33] *** Quits: FluffyMask (~masque@user/fluffymask) (Quit: WeeChat 3.4)
[06:10:40] <zdctg[m]> yeah it seems and sounds like its going to be something like that, i dont see anything conceptually wrong in the transmission code and it doesn't sound like the receiving code would be wrong, so its got to be something between the two
[06:12:21] *** Joins: foul_owl (~kerry@23.82.193.178)
[06:13:31] <zdctg[m]> i had another instance like where i was accidentally using infrared LEDs except i was burning out the LEDs because the voltage was too high and I wasn't seeing them light up and burn out... I've done this sort of debugging a few times now
[06:13:50] <nisstyre> with LEDs you usually can hear them pop a bit
[06:14:34] <zdctg[m]> yeah I didn't, I did have someone break into my house and tamper with my computers PSU once-- tied all the prongs of the AC outlet together with a PTC
[06:14:44] <zdctg[m]> and the only reason I caught it was because I heard the pop
[06:15:51] <zdctg[m]> I had a crazy ex-girlfriend at the time, I'm pretty sure it was her, it was her computer and she liked to do things like that, then blame me and insist I owed her money for it and then use the context to force interactions with her
[06:16:28] <zdctg[m]> but it only occurred to me because I heard the pop, otherwise I never would have thought to open the PSU and check
[06:16:41] <nisstyre> shorting out outlet prongs should cause a breaker to flip / fuse to blow
[06:16:44] <nisstyre> unless I'm mistaken
[06:17:55] <zdctg[m]> very old house that was a fire hazard in itself, all that happened was the PTCs popped and the second time I plugged it in, it appeared to have fried part of the board making up the AC-DC conversion circuit
[06:18:17] <nisstyre> that's horrifying
[06:18:30] <zdctg[m]> mhmm.
[06:18:43] <zdctg[m]> imagine trying to explain that to the police
[06:20:01] <zdctg[m]> "someone broke into my house and..." -> "but why" -> "well I'm pretty sure it was her, but I really don't know why, it could have plausibly burned down the house" -> "that just doesn't make sense, someone broke in and..."
[06:21:20] <zdctg[m]> the only reason I have any idea what she planned was because she was surprised and didn't know what to say when I knew what had occurred, she spent months sending me random pictures of PSUs trying to convince me it was normal
[06:22:14] *** Quits: boB_K7IQ (~boB_K7IQ@ip72-201-138-188.ph.ph.cox.net) (Ping timeout: 250 seconds)
[06:23:24] *** Joins: boB_K7IQ (~boB_K7IQ@ip72-201-138-188.ph.ph.cox.net)
[06:27:42] *** Joins: ironman (~ironman@2405:201:1010:b033:bad0:8910:44c9:da61)
[06:31:24] <nisstyre> zdctg[m]: ok I figured out what I was doing wrong
[06:31:35] <nisstyre> turns out the atmega uses 5 volt logic, and this thing uses 3 volt logic
[06:31:39] <nisstyre> so I need a voltage divider
[06:32:01] <nisstyre> "The absolute maximum rating on GPIO pins is VDD+0.3V (nRF51 supply voltage + 0.3V) based on the nRF51822 PS, so it is allowed to have your UART peer device to drive the UART with up to 3.9V if your supply voltage to the nRF51822 is maximum at 3.6V."
[06:32:02] <nisstyre> derp
[06:32:19] <nisstyre> good thing I didn't fry it
[06:32:24] <zdctg[m]> huzzah; yeah most of my experience in such things is atmega, which is why i assumed 5v logic
[06:32:26] <nisstyre> it probably has a diode or something protecting it
[06:34:02] <zdctg[m]> on the upside, your code appears to be fine
[06:34:14] *** Quits: Zambyte (~Zambyte@cpe-104-228-60-14.nycap.res.rr.com) (Quit: leaving)
[06:34:30] *** Joins: j-james (~apropos@dhcp-206-87-154-254.ubcsecure.wireless.ubc.ca)
[06:34:37] *** Quits: banc (banc@gateway/vpn/airvpn/banc) (Ping timeout: 256 seconds)
[06:38:21] *** Quits: kurahaupo_ (~kurahaupo@115.69.27.211) (Ping timeout: 256 seconds)
[06:42:19] *** Quits: foul_owl (~kerry@23.82.193.178) (Ping timeout: 256 seconds)
[06:43:28] *** Joins: tmpm697 (~tmpm697@171.224.178.134)
[06:44:41] *** Joins: dave0 (~davezero@069.d.003.ncl.iprimus.net.au)
[06:49:15] *** Joins: Rynn (~rynn@216.30.158.198)
[06:52:00] *** Quits: bindu (~bindu@user/bindu) (Ping timeout: 276 seconds)
[06:52:01] <zdctg[m]> its surprising how many things make me think of this comic, this is a new one-- always pulling high: https://www.kodyaz.com/images/pics/random-number-generator-dilbert-comic.jpg
[06:52:04] *** Joins: kurahaupo_ (~kurahaupo@115.69.27.211)
[06:52:46] <dave0> nice :-)
[06:54:04] *** Quits: sdfgsdfg (~dfghsfgs@user/sdfgsdfg) (Quit: ayo yoyo ayo yoyo hololo, hololo.)
[06:54:35] *** Joins: banc (banc@gateway/vpn/airvpn/banc)
[06:55:29] <zdctg[m]> I guess to be fair its probably not always pulling high, but that's what came to mind
[06:57:08] *** Joins: foul_owl (~kerry@23.82.193.176)
[06:58:28] *** Quits: ZedHedTed (~ZedHedTed@user/zedhedted) (Read error: Connection reset by peer)
[06:58:39] *** Joins: sdfgsdfg (~dfghsfgs@user/sdfgsdfg)
[06:59:59] *** Joins: ZedHedTed (~ZedHedTed@user/zedhedted)
[07:00:27] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[07:04:28] <zdctg[m]> given that the chip didn't fry, i would expect that whatever low means is more important than what high means
[07:04:42] *** Joins: fe23 (~fe23@2409:8a34:46c:f80:a8a0:1e29:590:f4be)
[07:06:52] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[07:06:52] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[07:06:52] *** Joins: wroathe (~wroathe@user/wroathe)
[07:07:03] *** Joins: Emet-Selch (~haise01@user/haise01)
[07:07:22] *** Quits: j-james (~apropos@dhcp-206-87-154-254.ubcsecure.wireless.ubc.ca) (Quit: leaving)
[07:07:47] *** Joins: pnbeast (~pnbeast@2601:140:4280:6ce0::1)
[07:10:05] *** Quits: Azem (~haise01@user/haise01) (Ping timeout: 256 seconds)
[07:10:21] *** Quits: kts (~kts@103.73.237.209) (Quit: Konversation terminated!)
[07:11:24] *** Quits: Rynn (~rynn@216.30.158.198) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[07:11:33] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[07:13:02] *** Quits: rgrinberg (~textual@187.223.115.137) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[07:20:37] *** Quits: kurahaupo_ (~kurahaupo@115.69.27.211) (Ping timeout: 240 seconds)
[07:27:42] *** Joins: kurahaupo_ (~kurahaupo@pa49-197-103-160.pa.qld.optusnet.com.au)
[07:36:01] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.4)
[07:36:09] *** Quits: foul_owl (~kerry@23.82.193.176) (Ping timeout: 256 seconds)
[07:36:31] *** Joins: supakeen (~user@python/site-packages/supakeen)
[07:40:16] *** Joins: cvmn (~caveman@gateway/tor-sasl/caveman)
[07:45:34] *** Joins: freakazoid333 (~matt@2603:9000:cf03:86c3:cc37:7a8c:a4ec:8c3d)
[07:46:55] *** Quits: nyah (~nyah@05453449.skybroadband.com) (Ping timeout: 256 seconds)
[07:50:56] *** Joins: foul_owl (~kerry@192.145.116.101)
[07:51:29] *** Quits: kurahaupo_ (~kurahaupo@pa49-197-103-160.pa.qld.optusnet.com.au) (Ping timeout: 250 seconds)
[07:57:17] *** Joins: hinata (~hinata@2409:4042:48b:bdda:d12b:9728:1f6e:1537)
[07:58:50] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[07:58:50] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[07:58:50] *** Joins: wroathe (~wroathe@user/wroathe)
[08:00:13] *** Quits: Lyude (~lyudess@pool-96-230-100-15.bstnma.fios.verizon.net) (Quit: WeeChat 3.4)
[08:01:31] *** Joins: Lyude (~lyudess@pool-96-230-100-15.bstnma.fios.verizon.net)
[08:02:14] *** Joins: rgrinberg (~textual@2806:101e:7:6bed:540b:bd79:8d25:836)
[08:03:18] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[08:03:55] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[08:11:28] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) ()
[08:13:01] *** Joins: nuxil (~nuxil@141.195.51.213)
[08:14:26] *** Quits: mven (~mven@ip68-104-39-54.lv.lv.cox.net) (Quit: Goodbye.)
[08:16:45] *** Joins: mven (~mven@ip68-104-39-54.lv.lv.cox.net)
[08:20:44] *** Joins: chenqisu1 (~chenqisu1@183.217.200.249)
[08:23:17] *** Quits: kitsunenokenja (~kitsunech@68.91.220.96) (Ping timeout: 240 seconds)
[08:23:24] *** Joins: malina (~malina@user/malina)
[08:26:43] *** Quits: ironman (~ironman@2405:201:1010:b033:bad0:8910:44c9:da61) (Quit: Leaving)
[08:30:09] *** Quits: crashrep (~crashrep@user/crashrep) (Ping timeout: 276 seconds)
[08:30:20] *** Quits: moog (~moog@107.126.53.132) (Remote host closed the connection)
[08:30:52] *** Joins: adip (~adip@crd88.neoplus.adsl.tpnet.pl)
[08:32:11] *** Quits: joaofukuda (~joaofukuk@2804:431:c7f4:345c:9441:82c4:a226:af6b) (Quit: Leaving)
[08:34:47] *** Joins: bindu (~bindu@user/bindu)
[08:36:39] *** Quits: szkl (uid110435@id-110435.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[08:37:23] *** Joins: ironman (~ironman@2405:201:1010:b033:bad0:8910:44c9:da61)
[08:43:51] *** Joins: libc (~archer@user/tessio)
[08:43:53] *** Joins: kurahaupo_ (~kurahaupo@pa49-197-103-160.pa.qld.optusnet.com.au)
[08:44:15] <libc> what is the difference between 'string' and "string" ?
[08:44:28] <libc> i get segmentation fault in the first one
[08:47:16] *** Quits: oliverwood (~oliverwoo@2001:56a:f830:f600:6c98:4e15:f2c0:33be) (Quit: Leaving)
[08:49:15] *** Quits: Alhazred (~Alhazred@ool-18b829c5.dyn.optonline.net) (Ping timeout: 256 seconds)
[08:49:19] *** Joins: hiovoltage (~hiovoltag@78.186.68.182)
[08:50:33] <pnbeast> ,books libc
[08:50:33] <candide> libc: See http://www.iso-9899.info/wiki/Books for some useful book recommendations, including free online resources.
[08:54:14] *** Quits: imp (~imp@179-191-215-199.static.sumicity.net.br) (Quit: imp)
[08:54:17] <dave0> libc: "string" is a c string.. a static array of chars ending with a \0     'c'   is a single character, with the type int
[09:04:10] *** Joins: savolla (~quassel@84.44.28.28)
[09:11:21] *** Quits: foul_owl (~kerry@192.145.116.101) (Ping timeout: 256 seconds)
[09:12:45] *** Joins: ketiv (~ketiv@cpc148896-sgyl44-2-0-cust233.18-2.cable.virginm.net)
[09:14:45] *** Quits: hiovoltage (~hiovoltag@78.186.68.182) (Ping timeout: 256 seconds)
[09:16:47] *** Quits: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net) (Remote host closed the connection)
[09:17:03] *** Joins: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net)
[09:17:45] *** Joins: williampiv (~williampi@ip24-254-86-223.sb.sd.cox.net)
[09:20:49] *** Quits: soapsudsxx (~soapsudsx@209.221.40.152) (Remote host closed the connection)
[09:24:06] *** Quits: _mikey (~mikey@user/mikey/x-4335048) (Ping timeout: 276 seconds)
[09:25:45] *** Joins: foul_owl (~kerry@23.82.194.141)
[09:29:39] *** Joins: Oddity (~Oddity@user/oddity)
[09:29:52] *** Quits: alch (~alch@151.82.119.111) (Ping timeout: 250 seconds)
[09:31:17] *** Joins: _mikey (~mikey@user/mikey/x-4335048)
[09:31:34] *** Joins: alch (~alch@151.38.103.214)
[09:33:59] *** Quits: SymbioticFemale (~Symbiotic@user/SymbioticFemale) (Remote host closed the connection)
[09:35:38] *** Quits: williampiv (~williampi@ip24-254-86-223.sb.sd.cox.net) (Quit: williampiv)
[09:43:20] *** Quits: kish (~aqua@user/aqua) (Quit: Leaving)
[09:44:32] *** Joins: kish (~aqua@user/aqua)
[09:47:23] *** Quits: kurahaupo_ (~kurahaupo@pa49-197-103-160.pa.qld.optusnet.com.au) (Ping timeout: 256 seconds)
[09:48:14] *** Quits: koo5_ (~quassel@51.140.155.227) (Quit: http://quassel-irc.org - Chat comfortably. Anywhere.)
[09:48:44] *** Joins: kurahaupo_ (~kurahaupo@115.69.27.211)
[09:49:10] *** Joins: koo5_ (~quassel@51.140.155.227)
[09:50:06] *** Quits: cvmn (~caveman@gateway/tor-sasl/caveman) (Ping timeout: 276 seconds)
[09:51:15] *** Quits: brdb (~alarm@24.61.226.255) (Ping timeout: 256 seconds)
[09:53:04] *** Joins: brdb (~alarm@24.61.226.255)
[10:00:19] *** Joins: ekathva (~ekathva@2001:999:50:cab1:b7e8:130b:c792:9fd)
[10:01:49] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:206a:d63d:f8a8:ec3b) (Quit: Quit)
[10:03:21] *** Joins: masoudd (~masoudd@user/masoudd)
[10:06:37] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[10:06:50] *** Joins: merrinx (~merrinx@ti0028a400-1685.bb.online.no)
[10:07:12] *** Quits: hinata (~hinata@2409:4042:48b:bdda:d12b:9728:1f6e:1537) (Remote host closed the connection)
[10:07:29] *** Joins: hinata (~hinata@2409:4042:48b:bdda:919:6e9d:34aa:5735)
[10:11:11] *** Quits: oxfuxxx (~oxfuxxx@10.177.181.107.wiredns.net) (Ping timeout: 256 seconds)
[10:21:01] *** Joins: ArthurStrong (~ArthurStr@2a01:4f9:6a:15af::2)
[10:22:57] *** Quits: hinata (~hinata@2409:4042:48b:bdda:919:6e9d:34aa:5735) (Ping timeout: 240 seconds)
[10:25:57] *** Joins: cvmn (~caveman@gateway/tor-sasl/caveman)
[10:33:30] *** Quits: chasmo77 (~chas77@c-71-193-246-4.hsd1.or.comcast.net) (Quit: It's just that easy)
[10:35:47] *** Quits: chenqisu1 (~chenqisu1@183.217.200.249) (Ping timeout: 256 seconds)
[10:36:44] *** Joins: oxfuxxx (~oxfuxxx@10.177.181.107.wiredns.net)
[10:40:12] *** Quits: rgrinberg (~textual@2806:101e:7:6bed:540b:bd79:8d25:836) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[10:45:25] *** Joins: Everything (~Everythin@37.115.210.35)
[10:50:32] *** Quits: _mikey (~mikey@user/mikey/x-4335048) (Quit: WeeChat 3.4)
[10:50:35] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[10:50:35] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[10:50:35] *** Joins: wroathe (~wroathe@user/wroathe)
[10:51:05] *** Quits: oxfuxxx (~oxfuxxx@10.177.181.107.wiredns.net) (Ping timeout: 256 seconds)
[10:51:27] *** Quits: kurahaupo_ (~kurahaupo@115.69.27.211) (Read error: Connection reset by peer)
[10:55:37] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[11:00:39] *** Quits: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net) (Quit: Textual IRC Client: www.textualapp.com)
[11:00:58] *** Joins: Guest5078 (~ts@221.216.116.43)
[11:01:42] *** Joins: kts (~kts@103.73.237.238)
[11:02:36] *** Quits: carlavilla (~carlavill@2a0c:5a84:320d:6900:21f:16ff:fe0f:275a) (Ping timeout: 250 seconds)
[11:03:02] *** Quits: pnbeast (~pnbeast@2601:140:4280:6ce0::1) (Quit: WeeChat 2.7.1)
[11:08:29] <citrons> I am debugging the program "fcgiwrap"
[11:08:31] *** Joins: szkl (uid110435@id-110435.uxbridge.irccloud.com)
[11:08:41] <citrons> it is frustrating me quite extremely
[11:09:12] *** Parts: Everything (~Everythin@37.115.210.35) ()
[11:09:35] <citrons> I am trying to fix an error wherein it is unable to accept large file uploads. it would say "An error occurred while reading the request body"
[11:10:05] <citrons> so I looked through the source code and determined that it throws this error when it calls write to a pipe and that fails
[11:11:41] <citrons> very soon after I started debugging it, it changed behaviors. instead of erroring, the write call just blocks forever. the pipe is between it and the CGI script. when it forks and runs the CGI script, it dups the pipe to stdin. the CGI script is reading all of stdin
[11:12:12] *** Joins: freep (~freepppp@46.246.189.172.dsl.dyn.forthnet.gr)
[11:12:42] <citrons> the code for fcgiwrap is available on the internet. the line that is blocking is `		ssize_t nwritten = write(fd, buf, nleft);
[11:13:18] <libc> it's hard enough to debug something that you wrote
[11:13:36] <citrons> it's not really a big program
[11:13:41] *** Quits: kts (~kts@103.73.237.238) (Quit: Konversation terminated!)
[11:14:02] <libc> wenn das leben dir citronen gibt, frage nach tequila und zaltz
[11:14:39] <citrons> I'm just having a hard time figuring out why writing more data than some unknown threshold to a pipe is causing it to block forever
[11:15:28] <ChoHag> The other end's not consuming it and the buffer filled up?
[11:16:20] <citrons> hmm, well the CGI script reads all of stdin. I'll make sure of that that now
[11:16:25] *** Joins: steve__ (~steve@ool-182c2b80.dyn.optonline.net)
[11:17:35] *** Joins: eddybilley (~freddieti@217.119.232.174)
[11:18:20] <citrons> yes, I just confirmed this
[11:18:45] <citrons> my CGI script reads all of the data when I send it the same payload manually in the shell
[11:23:03] *** Joins: mrig (~mrig@user/mrig)
[11:25:30] <ChoHag> ENOCODE
[11:26:50] <citrons> what does this mean
[11:27:06] <citrons> oh, I see
[11:27:38] <citrons> wait, I don't see
[11:28:15] *** Quits: cvmn (~caveman@gateway/tor-sasl/caveman) (Ping timeout: 276 seconds)
[11:28:18] *** Joins: cherrry9 (~jan@aeil171.neoplus.adsl.tpnet.pl)
[11:28:38] <ChoHag> [ENOCODE] An attempt has been made to diagnose a program error without source code.
[11:29:42] <citrons> well, the CGI script is just a lua thing. the code I am debugging is just fcgiwrap, a single file https://0x0.st/oXTd.c
[11:29:56] <ChoHag> It's never just and you have two right there.
[11:30:21] <citrons> it's blocking at line 94
[11:31:24] <citrons> the lua script is this https://0x0.st/oXTn.cgi
[11:31:26] <candide> Title of citrons's link: zzcxz: $title
[11:31:30] *** Joins: milkt_ (~debian@gateway/tor-sasl/milkt)
[11:31:49] <sham1> CGI with lua? Neat
[11:31:58] <citrons> thanks
[11:32:18] <citrons> I find it amusing that the bot parsed the html in my cgi script
[11:32:43] *** Quits: skyfall (~skyfall@user/skyfall) (Quit: afk)
[11:32:56] <sham1> Of course it's a strength of cgi that it can work with everything
[11:33:25] <citrons> yes, I am quite a fan of CGI
[11:34:05] *** Joins: skyfall (~skyfall@user/skyfall)
[11:34:06] *** Quits: milkt (~debian@gateway/tor-sasl/milkt) (Ping timeout: 276 seconds)
[11:34:33] *** Joins: MajorBiscuit (~MajorBisc@2a02:a461:129d:1:193d:75d8:745d:e91e)
[11:35:35] <ChoHag> It's basically unix pipes over http.
[11:39:39] *** Quits: ekathva (~ekathva@2001:999:50:cab1:b7e8:130b:c792:9fd) (Quit: Leaving)
[11:39:53] *** Joins: ekathva (~ekathva@2001:999:50:cab1:b7e8:130b:c792:9fd)
[11:39:55] <ChoHag> My money's on that C code not being the problem.
[11:41:57] *** Quits: ironman (~ironman@2405:201:1010:b033:bad0:8910:44c9:da61) (Ping timeout: 240 seconds)
[11:42:10] <citrons> hmmm, I don't see how that could be the case
[11:42:24] *** Joins: mikeross (~mikeross@90.253.28.103)
[11:42:26] <ChoHag> The copyright line is the biggest clue.
[11:42:39] <citrons> very funny
[11:42:55] <ChoHag> This code has sat around doing basic IO without getting it wrong for ~15 years.
[11:43:06] <ChoHag> Why did it start now? Conclusion: it didn't.
[11:43:19] <citrons> oh, I can actually provide evidence against this
[11:43:35] <citrons> a stackoverflow post from almost 10 years ago. let me find that again
[11:43:54] <ChoHag> I'm sure that'll be useful.
[11:44:13] <citrons> this https://stackoverflow.com/questions/9942815/nginx-fastcgi-error-when-uploading-a-file-over-60kb
[11:44:19] <citrons> this is the exact problem I'm having
[11:44:43] <citrons> the person left an answer that says "I decided to use something else"
[11:44:55] <citrons> "apparently it has issues with larger files"
[11:45:20] *** Joins: cosimone (~user@93-47-231-87.ip115.fastwebnet.it)
[11:48:04] <ChoHag> Have you tried that?
[11:48:50] <citrons> I can't use something designed for perl
[11:49:18] <citrons> wait, what even is that
[11:50:15] *** Quits: Charadon (~Charadon@155.138.164.183) (Ping timeout: 256 seconds)
[11:50:27] <citrons> it's hosting company's help page
[11:50:35] *** Joins: Rounin (~david@84.212.130.215)
[11:51:49] *** Joins: aradesh (~aradesh@user/aradesh)
[11:52:50] *** Quits: loganlee[gnu] (~Thunderbi@user/loganlee) (Quit: loganlee[gnu])
[11:53:46] *** Joins: Smaear (~Administr@2409:8a30:ac54:d3c1:28e4:c7bb:c69e:6ed3)
[11:54:10] *** Parts: Smaear (~Administr@2409:8a30:ac54:d3c1:28e4:c7bb:c69e:6ed3) ()
[11:57:02] *** Quits: elemongw (~elemongw@20.107.36.50) (Quit: ZNC 1.6.5+deb1+deb9u2 - http://znc.in)
[11:57:36] *** Joins: elemongw (~elemongw@20.107.36.50)
[11:57:45] *** Quits: elemongw (~elemongw@20.107.36.50) (Client Quit)
[11:58:05] *** Joins: elemongw (~elemongw@20.107.36.50)
[12:02:51] *** Quits: MajorBiscuit (~MajorBisc@2a02:a461:129d:1:193d:75d8:745d:e91e) (Ping timeout: 245 seconds)
[12:04:47] *** Joins: MajorBiscuit (~MajorBisc@c-001-017-058.client.tudelft.eduvpn.nl)
[12:05:05] <libc> ChoHag:
[12:05:17] <libc> i want a Hag
[12:05:23] *** Joins: SymbioticFemale (~Symbiotic@user/SymbioticFemale)
[12:06:21] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[12:06:21] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[12:06:21] *** Joins: wroathe (~wroathe@user/wroathe)
[12:09:44] *** Joins: bick (~kotaman@94.46.203.147)
[12:10:56] *** Quits: foul_owl (~kerry@23.82.194.141) (Read error: Connection reset by peer)
[12:11:33] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[12:11:35] *** Quits: pyook (~pyook@user/puke) ()
[12:12:36] <rcf> citrons: it blocking on line 94 is not useful, a full backtrace is necessary.
[12:14:14] *** Joins: ironman (~ironman@2405:201:1010:b033:bad0:8910:44c9:da61)
[12:14:56] *** Joins: satanist (~satanist@bureaucracy.bureaucracy.de)
[12:20:20] *** Joins: skeev (~skeev@92.86.110.192)
[12:20:22] *** Joins: oxfuxxx (~oxfuxxx@10.177.181.107.wiredns.net)
[12:22:19] *** Quits: Akiva (~Akiva@user/Akiva) (Ping timeout: 256 seconds)
[12:24:55] *** Quits: oxfuxxx (~oxfuxxx@10.177.181.107.wiredns.net) (Ping timeout: 250 seconds)
[12:27:10] *** Quits: bindu (~bindu@user/bindu) (Remote host closed the connection)
[12:27:11] *** Joins: bindu_ (~bindu@user/bindu)
[12:28:44] *** Quits: kkd (~kkd@255.205.154.104.bc.googleusercontent.com) (Ping timeout: 252 seconds)
[12:28:51] *** Joins: foul_owl (~kerry@192.145.116.33)
[12:29:09] *** bindu_ is now known as bindu
[12:31:03] *** Quits: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net) (Ping timeout: 256 seconds)
[12:31:37] *** Joins: oxfuxxx (~oxfuxxx@10.177.181.107.wiredns.net)
[12:31:43] *** Joins: kkd (~kkd@255.205.154.104.bc.googleusercontent.com)
[12:36:42] <citrons> https://0x0.st/oXAz.png
[12:37:11] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[12:37:11] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[12:37:11] *** Joins: wroathe (~wroathe@user/wroathe)
[12:42:29] *** Quits: V (~v@anomalous.eu) (Ping timeout: 268 seconds)
[12:42:29] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[12:42:42] *** Quits: oxfuxxx (~oxfuxxx@10.177.181.107.wiredns.net) (Ping timeout: 250 seconds)
[12:45:05] *** Quits: Guest5078 (~ts@221.216.116.43) (Quit: Leaving)
[12:47:29] *** Joins: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net)
[12:51:12] *** Joins: iomari891 (~iomari891@105.112.138.38)
[12:51:41] *** Joins: oxfuxxx (~oxfuxxx@10.177.181.107.wiredns.net)
[12:52:34] *** Joins: LucaTM (~LucaTM@user/lucatm)
[12:55:29] *** Joins: eeerik8_ (~eeerik8@95.179.149.48)
[12:55:35] *** Quits: eeerik8_ (~eeerik8@95.179.149.48) (Client Quit)
[13:01:23] <libc> ChoHag
[13:06:33] *** Joins: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[13:07:56] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[13:07:56] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[13:07:56] *** Joins: wroathe (~wroathe@user/wroathe)
[13:09:19] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[13:09:34] *** Quits: savolla (~quassel@84.44.28.28) (Ping timeout: 260 seconds)
[13:11:17] *** Quits: puke (~puke@user/puke) (Ping timeout: 240 seconds)
[13:12:51] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 245 seconds)
[13:19:08] *** kish is now known as kish`
[13:19:09] *** Joins: savolla (~quassel@84.44.28.28)
[13:23:23] *** Quits: AbleBacon (~AbleBacon@user/AbleBacon) (Read error: Connection reset by peer)
[13:24:05] *** Quits: vboykox (~user@233-8-134-95.pool.ukrtel.net) (Ping timeout: 256 seconds)
[13:24:55] *** Joins: Y4knotiS (~YaknotiS@cpc1-cmbg18-2-0-cust87.5-4.cable.virginm.net)
[13:25:43] *** Joins: vboykox (~user@95.134.37.183)
[13:26:21] *** Quits: oxfuxxx (~oxfuxxx@10.177.181.107.wiredns.net) (Ping timeout: 256 seconds)
[13:26:45] *** Joins: plastico (~plastico@neomutt/plastico)
[13:27:44] *** Quits: alch (~alch@151.38.103.214) (Read error: Connection reset by peer)
[13:30:02] *** Joins: oakyy (~oaky@m90-129-219-19.cust.tele2.se)
[13:31:09] *** Quits: oakyy (~oaky@m90-129-219-19.cust.tele2.se) (Client Quit)
[13:31:10] *** Joins: alch (~alch@pd-18-124-7.service.infuturo.it)
[13:31:37] *** Joins: oakyy (~oaky@m90-129-219-19.cust.tele2.se)
[13:32:20] *** Joins: oxfuxxx (~oxfuxxx@10.177.181.107.wiredns.net)
[13:34:56] *** Joins: geowiesnot (~user@5-51-190-244.abo.bbox.fr)
[13:40:06] *** Joins: oxymoron93 (~oxymoron9@212.62.38.106)
[13:40:17] *** Quits: masoudd (~masoudd@user/masoudd) (Ping timeout: 240 seconds)
[13:44:40] *** Quits: kubrickdave (~kubrickda@194-166-168-169.adsl.highway.telekom.at) (Quit: ZNC 1.7.2+deb3 - https://znc.in)
[13:44:53] *** Joins: kubrickdave (~kubrickda@194-166-168-169.adsl.highway.telekom.at)
[13:49:29] *** Joins: mikeross_ (~mikeross@90.253.28.103)
[13:52:10] *** Joins: manx (xuew@p57b5c4bf.dip0.t-ipconnect.de)
[13:52:18] *** Joins: chenqisu1 (~chenqisu1@183.217.200.249)
[13:52:57] *** Quits: Jong (~Jong@2620:10d:c090:400::5:d8b2) (Ping timeout: 240 seconds)
[13:52:59] *** Quits: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net) (Ping timeout: 256 seconds)
[13:52:59] *** Quits: mikeross (~mikeross@90.253.28.103) (Ping timeout: 256 seconds)
[13:53:05] *** Joins: kenanmarasli (~kenanmara@user/kenanmarasli)
[13:55:50] *** Joins: ko (~i.am@user/marlboro)
[13:58:16] *** Joins: Valeria (~Valeria@user/valeria)
[13:58:37] *** Joins: mrig_ (~mrig@lfbn-mar-1-797-135.w92-150.abo.wanadoo.fr)
[14:01:11] *** Quits: mrig (~mrig@user/mrig) (Ping timeout: 245 seconds)
[14:02:34] *** Joins: masoudd (~masoudd@user/masoudd)
[14:05:32] *** Joins: lleo (~leo@31-161-189-89.mobile.kpn.net)
[14:05:34] *** Joins: Klinda (~superleag@user/klinda)
[14:05:35] *** Joins: gproto23 (~gproto23@user/gproto23)
[14:09:22] *** Quits: Betal (~Betal@user/betal) (Quit: WeeChat 3.4)
[14:11:14] *** Joins: Jong (~Jong@2620:10d:c090:400::5:6b6c)
[14:15:29] *** Quits: mrig_ (~mrig@lfbn-mar-1-797-135.w92-150.abo.wanadoo.fr) (Changing host)
[14:15:29] *** Joins: mrig_ (~mrig@user/mrig)
[14:15:29] *** mrig_ is now known as mrig
[14:22:36] *** Joins: joilerv (~joilerv@80.169.238.242)
[14:22:42] *** Quits: joilerv (~joilerv@80.169.238.242) (Client Quit)
[14:25:54] *** Quits: skeev (~skeev@92.86.110.192) (Quit: Leaving)
[14:26:59] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 256 seconds)
[14:28:20] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[14:32:05] *** Quits: foul_owl (~kerry@192.145.116.33) (Ping timeout: 256 seconds)
[14:32:44] *** Quits: cursey (~cursey@user/cursey) (Quit: bye)
[14:34:08] *** Joins: joilerv (~joilerv@80.169.238.242)
[14:34:15] *** Quits: joedoe47 (~weechat@c-98-254-188-143.hsd1.fl.comcast.net) (Ping timeout: 250 seconds)
[14:34:39] *** Joins: joedoe47 (~weechat@c-98-254-188-143.hsd1.fl.comcast.net)
[14:35:09] *** Quits: oakyy (~oaky@m90-129-219-19.cust.tele2.se) (Ping timeout: 256 seconds)
[14:35:38] *** Quits: joilerv (~joilerv@80.169.238.242) (Client Quit)
[14:38:19] *** Quits: geowiesnot (~user@5-51-190-244.abo.bbox.fr) (Ping timeout: 256 seconds)
[14:39:15] *** Quits: mrig (~mrig@user/mrig) (Quit: Going offline, see ya! (www.adiirc.com))
[14:40:06] *** Joins: joilerv (~joilerv@80.169.238.242)
[14:40:47] *** Joins: oakyy (~oaky@m90-129-219-19.cust.tele2.se)
[14:41:15] *** Quits: joilerv (~joilerv@80.169.238.242) (Client Quit)
[14:41:41] *** Joins: seninha (~seninha@user/seninha)
[14:42:48] *** Joins: joilerv (~joilerv@80.169.238.242)
[14:43:10] *** Quits: joilerv (~joilerv@80.169.238.242) (Client Quit)
[14:45:38] *** Joins: cursey (~cursey@user/cursey)
[14:46:45] *** Joins: foul_owl (~kerry@23.82.194.143)
[14:50:39] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[14:50:39] *** Joins: slidercrank (~slidercra@user/slidercrank)
[14:50:39] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[14:50:39] *** Joins: wroathe (~wroathe@user/wroathe)
[14:51:35] *** Quits: oxfuxxx (~oxfuxxx@10.177.181.107.wiredns.net) (Ping timeout: 256 seconds)
[14:52:19] *** Joins: oxfuxxx (~oxfuxxx@10.177.181.107.wiredns.net)
[14:55:42] *** Quits: iomari891 (~iomari891@105.112.138.38) (Quit: WeeChat 3.3)
[14:55:53] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[14:56:45] *** Joins: blindguard (~blindguar@2a02:908:1864:c200::ef3c)
[14:56:55] *** Quits: merrinx (~merrinx@ti0028a400-1685.bb.online.no) (Quit: WeeChat 3.3)
[14:57:01] *** Quits: oxfuxxx (~oxfuxxx@10.177.181.107.wiredns.net) (Ping timeout: 256 seconds)
[14:57:03] *** Quits: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[14:59:10] *** Joins: masoudd_ (~masoudd@user/masoudd)
[15:01:04] *** Joins: Darkcoal (~user@user/Darkcoal)
[15:03:04] *** Joins: bebyx (~Thunderbi@user/bebyx)
[15:03:05] *** Quits: masoudd (~masoudd@user/masoudd) (Ping timeout: 250 seconds)
[15:04:41] *** Joins: oxfuxxx (~oxfuxxx@10.177.181.107.wiredns.net)
[15:05:44] *** Joins: strajder (~strajder@user/strajder)
[15:06:11] *** Quits: strajder (~strajder@user/strajder) (Client Quit)
[15:06:26] *** Joins: strajder (~strajder@user/strajder)
[15:07:33] *** Joins: tech_exorcist (txrcst@user/tech-exorcist/x-0447479)
[15:07:42] *** Joins: summonner (~summonner@188.24.40.180)
[15:09:19] *** Joins: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f)
[15:10:00] *** Joins: merrinx (~merrinx@ti0028a400-1685.bb.online.no)
[15:19:17] *** Joins: Achylles (~Achylles_@2804:431:d724:1728:f3b4:d659:13ba:d509)
[15:19:59] *** Joins: imp (~imp@179-191-215-199.static.sumicity.net.br)
[15:21:40] *** Joins: pulse (~pulse@user/pulse)
[15:21:53] *** Joins: Iarfen (~quassel@181.43.56.115)
[15:29:42] *** Quits: oakyy (~oaky@m90-129-219-19.cust.tele2.se) (Read error: Connection reset by peer)
[15:30:17] *** Quits: csrf (~csrf@user/csrf) (Quit: ZNC 1.7.2+deb3 - https://znc.in)
[15:31:02] *** Joins: csrf (~csrf@user/csrf)
[15:31:24] *** Joins: oakyy (~oaky@host-60.lidingo.se)
[15:35:57] *** Quits: bick (~kotaman@94.46.203.147) (Ping timeout: 240 seconds)
[15:36:01] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.4)
[15:36:07] *** Quits: gproto23 (~gproto23@user/gproto23) (Ping timeout: 256 seconds)
[15:36:31] *** Joins: supakeen (~user@python/site-packages/supakeen)
[15:39:56] *** Joins: gproto23 (~gproto23@user/gproto23)
[15:46:36] *** Joins: random-nick (~random-ni@87.116.167.125)
[15:50:57] *** Quits: oxfuxxx (~oxfuxxx@10.177.181.107.wiredns.net) (Ping timeout: 240 seconds)
[15:51:03] *** Joins: msk (~Thunderbi@89.205.124.40)
[15:55:18] *** Quits: msk (~Thunderbi@89.205.124.40) (Quit: msk)
[15:56:18] *** Joins: msk (~Thunderbi@89.205.124.40)
[15:57:44] *** Joins: oxfuxxx (~oxfuxxx@10.177.181.107.wiredns.net)
[15:58:05] *** Quits: imp (~imp@179-191-215-199.static.sumicity.net.br) (Read error: Connection reset by peer)
[15:59:16] *** Quits: ironman (~ironman@2405:201:1010:b033:bad0:8910:44c9:da61) (Quit: Leaving)
[16:00:01] *** Joins: gildasio (~gildasio@gateway/tor-sasl/gildasio)
[16:02:42] *** Quits: merrinx (~merrinx@ti0028a400-1685.bb.online.no) (Quit: WeeChat 3.3)
[16:03:09] *** Joins: merrinx (~merrinx@ti0028a400-1685.bb.online.no)
[16:03:11] *** Joins: bick (~kotaman@94.46.203.147)
[16:04:41] *** Quits: noonien (~noonien@user/noonien) (Quit: The Lounge - https://thelounge.chat)
[16:05:05] *** Joins: noonien (~noonien@user/noonien)
[16:07:39] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Remote host closed the connection)
[16:07:58] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[16:14:24] *** Joins: CoffeeMuffinCake (~a@2001:871:25f:39a0:2cd6:a858:463c:e4ae)
[16:16:18] *** Quits: oxymoron93 (~oxymoron9@212.62.38.106) (Quit: Client closed)
[16:16:34] *** Joins: oxymoron93 (~oxymoron9@212.62.38.106)
[16:17:51] *** Quits: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net) (Remote host closed the connection)
[16:18:06] *** Joins: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net)
[16:20:50] *** Joins: V (~v@anomalous.eu)
[16:25:23] *** Quits: chenqisu1 (~chenqisu1@183.217.200.249) (Quit: Leaving)
[16:30:15] <mort> so we all know SoA has certain performance advantages, right
[16:30:35] <mort> but I wonder, how big are the advantages if you end up iterating over a bunch of arrays in parallel?
[16:31:01] <clarity> It's complicated and you can't generalize like that
[16:31:05] <clarity> When in doubt, benchmark
[16:31:17] <mort> like if you have a struct with positions, velocities and masses, and your physics engine has to iterate over those 3 arrays, is that significantly worse than iterating one array of position/velocity/mass combinations
[16:31:28] <mort> benchmarking this stuff can be hard
[16:31:52] <mort> but I could try to benchmark and gather some data
[16:32:20] *** Quits: masoudd_ (~masoudd@user/masoudd) (Remote host closed the connection)
[16:32:29] <mort> it should be possible to figure out if iterating over 3 arrays has any penalty at all over iterating over one array, if the amount of data fetched is the same in all cases
[16:33:22] <clarity> I'll postulate that if you're 1) always iterating over the same exact data 2) you fully utilize the data you iterate over (i.e. no cache is wasted) 3) SoA gives no benefit SIMD wise, then AoS is *probably* better or at least no worse than SoA
[16:33:27] <clarity> But there are a lot of assumptions there
[16:34:06] <mort> I agree that AoS won't be worse in that case, but the interesting question is whether it's better
[16:34:33] <mort> I should benchmark this
[16:35:21] *** Joins: FreEm1nD (~FreEm1nD@mail.guarapari.store)
[16:37:55] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[16:39:21] *** Joins: inlight (~thomas@82.221.128.46)
[16:39:21] *** Quits: inlight (~thomas@82.221.128.46) (Changing host)
[16:39:21] *** Joins: inlight (~thomas@user/inlight)
[16:44:49] *** Quits: byteskeptical (~amnesia@user/byteskeptical) (Quit: Lost terminal)
[16:44:53] *** Joins: LordJohn (~lordjohn@l37-194-102-53.novotelecom.ru)
[16:45:32] *** Joins: masoudd (~masoudd@user/masoudd)
[16:46:10] *** Joins: whatsupboy (~whatsupbo@user/scobydoo)
[16:52:03] *** Joins: chung (~lim@184.22.24.222)
[16:52:38] <NRK> re: so we all know SoA has certain performance advantages
[16:52:58] <NRK> that's a very dumb and inaccurate generalization
[16:53:29] *** Quits: FreEm1nD (~FreEm1nD@mail.guarapari.store) (Quit: Leaving)
[16:53:52] <NRK> it depends on your access patterns. if you're accessing s[n].thing and s[n].second_thing then AoS will be better
[16:54:05] <NRK> accessing back to back*
[16:54:39] *** Quits: raym (~raym@user/raym) (Ping timeout: 256 seconds)
[16:54:46] *** Quits: Achylles (~Achylles_@2804:431:d724:1728:f3b4:d659:13ba:d509) (Quit: Leaving)
[16:55:10] *** Parts: chung (~lim@184.22.24.222) ()
[16:55:27] *** Joins: raym (~raym@user/raym)
[16:57:16] <mort> https://p.mort.coffee/nyt.cc this shows that SoA *can* be significantly faster at least
[16:57:31] <mort> which isn't a surprise, but it's nice to have confirmed that so that the benchmark I'm writing isn't completely off
[16:57:47] <mort> sorry about the std::chrono stuff, C++ is terrible
[17:01:06] <mort> but, hmm, this is curious: https://p.mort.coffee/rjN.cc SOA is still faster when an entity has only a position and velocity and both are used by the loop
[17:01:30] <mort> that's the case we were expecting AOS to be at least as fast or faster
[17:02:48] *** Quits: tusko (~yeurt@copyfree/advocate/tusko) (Remote host closed the connection)
[17:03:09] *** Joins: tusko (~yeurt@copyfree/advocate/tusko)
[17:03:37] <Earnestly> These series of articles were quite good too, touches on std::vector pathology as well: https://ourmachinery.com/post/data-structures-part-1-bulk-data/#array-of-structures-vs-structure-of-arrays
[17:04:43] <clarity> mort: At least nyt.cc isn't measuring AoS vs SoA
[17:04:48] <clarity> It's completely bogus
[17:05:01] <mort> what do you mean
[17:05:12] *** Joins: merrinx1 (~merrinx@ti0028a400-1685.bb.online.no)
[17:05:31] <NRK> mort: compiler's often can turn these into 2 separate loops if there's not data dependancy
[17:05:39] <NRK> s/not/no/
[17:05:56] <clarity> mort: Take a look at the assembly and you'll see
[17:06:56] <dave0> is that html markup?    for (auto &ent: ents)
[17:07:03] *** Joins: brad_mssw (~bhouse@2601:344:4100:b490:7984:3c3b:84f3:3121)
[17:07:27] <NRK> and i wouldn't be surprised if more things get optimized out because nents and nsteps are available at compile time to the compiler.
[17:07:40] <clarity> Of course it all depends on compiler optimizations too
[17:08:16] <mort> clarity: you'll gonna have to be more specific, I'm looking at the output from godbolt at -O3 with GCC for x86_64 and nothing immediately jumps out at me other than that the physics functions are being inlined
[17:08:22] <supakeen> dave0: no, C++.
[17:08:34] <supakeen> (I know, hard to tell apart at times)
[17:08:39] <mort> but I'm not great at reading assembly
[17:10:41] *** Quits: dave0 (~davezero@069.d.003.ncl.iprimus.net.au) (Quit: dave's not here)
[17:11:11] <mort> I'll disable inlining just in case
[17:11:20] *** Joins: wovixo (~wovixo@128.104.205.49)
[17:12:02] *** Joins: kts (~kts@103.73.237.38)
[17:13:16] *** Joins: Phil-Work (~phil@62.3.100.20)
[17:14:39] *** Joins: rpath (~rpath@gateway/tor-sasl/rpath)
[17:16:18] <mort> clarity: yea you're gonna have to clarify (heh) why this isn't an SOA vs AOS test, my reading of the assembly (at least after adding __attribute__((noinline))) didn't reveal anything weird going on
[17:16:38] *** Quits: oxymoron93 (~oxymoron9@212.62.38.106) (Quit: Client closed)
[17:17:37] *** Quits: Thymo (~Thymo@NASSP/developer/Thymo) (Ping timeout: 240 seconds)
[17:18:17] *** Quits: phundrak (~phundrak@82-65-91-105.subs.proxad.net) (Remote host closed the connection)
[17:18:45] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[17:19:49] *** Joins: phundrak (~phundrak@82-65-91-105.subs.proxad.net)
[17:20:26] *** Quits: merrinx1 (~merrinx@ti0028a400-1685.bb.online.no) (Quit: WeeChat 3.4)
[17:20:30] *** Joins: Thymo (~Thymo@82-74-137-251.cable.dynamic.v4.ziggo.nl)
[17:21:08] *** Joins: zeenk (~zeenk@2a02:2f04:a30d:1300:51a3:bcfc:6cda:9fc5)
[17:22:34] *** Quits: Thymo (~Thymo@82-74-137-251.cable.dynamic.v4.ziggo.nl) (Read error: Connection reset by peer)
[17:25:43] *** Joins: Thymo (~Thymo@82-74-137-251.cable.dynamic.v4.ziggo.nl)
[17:25:53] *** Joins: skeev (~skeev@92.86.110.192)
[17:30:01] *** Quits: alch (~alch@pd-18-124-7.service.infuturo.it) (Ping timeout: 256 seconds)
[17:31:05] *** Joins: alch (~alch@151.34.110.188)
[17:33:40] *** Quits: BSaboia (~bsaboia@95.179.154.99) (Quit: ZNC 1.8.2+deb2build1 - https://znc.in)
[17:33:52] *** Joins: BSaboia (~bsaboia@2a05:f480:1400:b88:5400:3ff:fe51:575c)
[17:34:25] *** Joins: Rynn_ (~rynn@216.30.158.198)
[17:35:57] *** Joins: joaofukuda (~joaofukuk@2804:431:c7f4:345c:9441:82c4:a226:af6b)
[17:38:09] *** Quits: brad_mssw (~bhouse@2601:344:4100:b490:7984:3c3b:84f3:3121) (Quit: This computer has gone to sleep)
[17:38:28] *** Joins: brad_mssw (~bhouse@2601:344:4100:b490:7984:3c3b:84f3:3121)
[17:39:20] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[17:39:20] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[17:39:20] *** Joins: wroathe (~wroathe@user/wroathe)
[17:41:19] *** Quits: Rynn_ (~rynn@216.30.158.198) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[17:43:12] *** Joins: acerbic (~acerbic@cs-xdata-50-86-51-31.cspire.com)
[17:43:19] *** Quits: grange_c (~grange_c@vps-9763379d.vps.ovh.net) (Quit: Ping timeout (120 seconds))
[17:43:21] *** Quits: Chaser (~Chaser@user/chaser) (Quit: WeeChat 2.8)
[17:43:30] *** Joins: grange_c (~grange_c@vps-9763379d.vps.ovh.net)
[17:43:32] *** Quits: buffet (~buffet@buffet.sh) (Quit: Ping timeout (120 seconds))
[17:43:58] *** Joins: buffet (~buffet@buffet.sh)
[17:44:04] *** Quits: sdfgsdfg (~dfghsfgs@user/sdfgsdfg) (Quit: ayo yoyo ayo yoyo hololo, hololo.)
[17:44:27] *** Quits: pounce (~pounce@facebook/engineering/pounce) (Remote host closed the connection)
[17:44:47] *** Joins: pounce (~pounce@facebook/engineering/pounce)
[17:45:16] *** Quits: rpath (~rpath@gateway/tor-sasl/rpath) (Quit: Leaving)
[17:45:55] *** Joins: skapata (~Skapata@2804:14c:87b0:9d2e:d091:25a9:e1c5:1d46)
[17:45:55] *** Quits: skapata (~Skapata@2804:14c:87b0:9d2e:d091:25a9:e1c5:1d46) (Changing host)
[17:45:55] *** Joins: skapata (~Skapata@user/skapata)
[17:47:22] *** Joins: mrig (~mrig@user/mrig)
[17:48:49] *** Joins: rpath (~rpath@gateway/tor-sasl/rpath)
[17:49:43] *** Quits: rpath (~rpath@gateway/tor-sasl/rpath) (Client Quit)
[17:52:15] *** Joins: milkt (~debian@gateway/tor-sasl/milkt)
[17:54:32] *** Joins: oxymoron93 (~oxymoron9@212.62.38.106)
[17:54:35] *** Joins: drbeco (~beco@2804:351c:dd01:b700:1b03:6b85:20d4:ad73)
[17:54:38] *** Joins: n3rdy1 (~n3rdy1@2600:1700:4570:3480:1b88:50f:dae0:9293)
[17:54:55] *** Quits: milkt_ (~debian@gateway/tor-sasl/milkt) (Remote host closed the connection)
[17:55:03] *** Quits: manx (xuew@p57b5c4bf.dip0.t-ipconnect.de) (Quit: manx)
[17:57:17] *** Joins: manx (xuew@p200300e18f0e0800022215fffe03cf97.dip0.t-ipconnect.de)
[17:58:41] *** Quits: acerbic (~acerbic@cs-xdata-50-86-51-31.cspire.com) (Read error: Connection reset by peer)
[17:59:49] *** Quits: diiirt (~diiirt@user/diiirt) (Remote host closed the connection)
[18:00:09] *** Joins: diiirt (~diiirt@user/diiirt)
[18:00:45] *** Quits: Ap3 (~ape@kanonenjagd.panzer.ninja) (Ping timeout: 250 seconds)
[18:01:08] *** Quits: LordJohn (~lordjohn@l37-194-102-53.novotelecom.ru) (Read error: Connection reset by peer)
[18:02:47] *** Joins: nyah (~nyah@05453449.skybroadband.com)
[18:08:16] *** Joins: LordJohn (~lordjohn@l37-194-102-53.novotelecom.ru)
[18:16:29] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[18:17:47] *** Joins: cruncher (~cruncher@90.68.118.49)
[18:18:45] *** Quits: masoudd (~masoudd@user/masoudd) (Ping timeout: 256 seconds)
[18:21:59] *** Quits: Muzer (~muzer@tim32.org) (Ping timeout: 250 seconds)
[18:22:20] *** Joins: wroathe (~wroathe@user/wroathe)
[18:22:35] *** Joins: merrinx1 (~merrinx@ti0028a400-1685.bb.online.no)
[18:25:04] *** Quits: oxymoron93 (~oxymoron9@212.62.38.106) (Quit: Client closed)
[18:26:46] *** Quits: merrinx1 (~merrinx@ti0028a400-1685.bb.online.no) (Client Quit)
[18:26:56] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[18:29:26] *** Quits: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f) (Quit: Leaving)
[18:30:46] *** Quits: savolla (~quassel@84.44.28.28) (Ping timeout: 245 seconds)
[18:31:02] *** Joins: gh34 (~textual@cpe-184-58-181-106.wi.res.rr.com)
[18:31:09] *** Joins: SaltHillStroller (~SaltHillS@199.249.111.186)
[18:31:13] *** Quits: constxd (~brad@142.167.170.88) (Ping timeout: 256 seconds)
[18:33:05] *** Joins: SaltHilStroller_ (~SaltHillS@206.223.160.26)
[18:36:33] *** Quits: SaltHillStroller (~SaltHillS@199.249.111.186) (Ping timeout: 256 seconds)
[18:39:19] *** Quits: lleo (~leo@31-161-189-89.mobile.kpn.net) (Ping timeout: 250 seconds)
[18:39:29] *** Quits: Dotz0cat (~Dotz0cat@173.188.34.42) (Ping timeout: 256 seconds)
[18:39:56] *** Joins: byteskeptical (~amnesia@user/byteskeptical)
[18:40:08] *** Joins: Dotz0cat (~Dotz0cat@173.187.195.128)
[18:45:23] *** Quits: oakyy (~oaky@host-60.lidingo.se) (Ping timeout: 256 seconds)
[18:45:23] <clarity> mort: Sorry.  With little optimization, one of them got a load of c++ vector crap calls, and on -O3, they took completely different optimization strategies and soa was actually about as slow as aos for me.  With noinline or -O2, the comparison looks reasonable on my end, and indeed soa is faster
[18:47:22] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[18:47:22] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[18:47:22] *** Joins: wroathe (~wroathe@user/wroathe)
[18:47:43] <clarity> mort: IMO the best way to microbenchmark and study the compiler output is to use C and isolate the interesting loops in their own translation unit so you don't get a bucketload of c++ goop in the assembly and you also don't have to fight inlining and constant propagation etc
[18:48:07] <clarity> For this code if I do that, I get loops that are virtually identical, except for the fact that one uses only one base pointer and the other uses two
[18:48:36] <clarity> And there's roughly 30% difference in performance (with the unused members ifdeffed out)
[18:48:54] <mort> yeah, I chose C++ because that made the benchmark faster to write but it did make the asm pretty messy
[18:50:23] <clarity> https://godbolt.org/z/Gj3rsfYjM
[18:51:07] *** Joins: inlight_ (~thomas@157.35.4.71)
[18:51:08] <clarity> Instructions in the loops are exactly the same, except for the one extra add in the soa case
[18:51:16] <clarity> Addressing is of course different
[18:51:49] <clarity> I'd like to study the performance counters to explain the difference but I'm at work right nao.. :)
[18:52:10] <clarity> Something tells me aos waits more on memory but I'm not sure
[18:52:11] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[18:52:36] <mort> hmm
[18:52:47] <clarity> If that were the case, then doing more compute inside the loop would probably eliminate the difference
[18:53:02] <mort> maybe it's faster to load from two completely different locations in RAM than to load from two adjacent locations in RAM
[18:53:21] <clarity> Possibly you get more prefetch requests in flight or something
[18:53:29] <clarity> I don't wanna guess though
[18:54:06] *** Quits: inlight (~thomas@user/inlight) (Ping timeout: 245 seconds)
[18:54:51] <mort> should make a test where we just load sequentially with nothing else, and see if there's a difference between loading sequentially from one array and loading sequentially from two arrays at the same time
[18:56:29] *** Quits: inlight_ (~thomas@157.35.4.71) (Ping timeout: 256 seconds)
[18:57:52] *** Joins: inlight_ (~thomas@106.206.192.79)
[18:59:23] *** Joins: Ap3 (~ape@kanonenjagd.panzer.ninja)
[19:00:40] *** Quits: Jong (~Jong@2620:10d:c090:400::5:6b6c) (Quit: Textual IRC Client: www.textualapp.com)
[19:02:57] *** Quits: inlight_ (~thomas@106.206.192.79) (Ping timeout: 256 seconds)
[19:09:13] <smallville7123> fizzie: welp imma just ignore the iterator as it is very complex
[19:09:53] *** Quits: joaofukuda (~joaofukuk@2804:431:c7f4:345c:9441:82c4:a226:af6b) (Remote host closed the connection)
[19:10:08] *** Joins: joaofukuda (~joaofukuk@2804:431:c7f4:345c:19fc:7530:25c8:1eee)
[19:10:16] <smallville7123> and instea attempt to leverage my parser's rescan ability to acomplish this
[19:12:28] <smallville7123> as attempting to read any "tokens" from a capture context simply does not work in any way
[19:12:41] *** Joins: moog (~moog@107.77.244.68)
[19:13:03] <smallville7123> (and all my tries have failed)
[19:13:43] *** Quits: malina (~malina@user/malina) (Ping timeout: 256 seconds)
[19:16:21] *** Quits: gproto23 (~gproto23@user/gproto23) (Ping timeout: 250 seconds)
[19:16:37] *** Quits: gce108 (~gce@user/gce108) (Remote host closed the connection)
[19:16:54] *** Quits: mikeross_ (~mikeross@90.253.28.103) ()
[19:17:11] *** Joins: imp (~imp@177-131-189-195.static.sumicity.net.br)
[19:17:33] *** Joins: cart_man (~rynot@host-78-144-125-214.as13285.net)
[19:17:39] *** Quits: Telvana (~capo@user/telvana) (Ping timeout: 250 seconds)
[19:18:29] *** Joins: savolla (~quassel@88.227.92.215)
[19:18:49] <smallville7123> fizzie: we push a macro to the stack, expand the macro, and then rescan the expansion until there are no more macro's to expand, and then we pop the macro from the stack and replace it with the resulting expansion,      right?
[19:18:59] *** Quits: ko (~i.am@user/marlboro) (Quit: a pentium 100 "running" windows 11 trying to play Last of Us II at ps4emu... that's my brain trying understand 0->R->R->R/2R->0)
[19:20:43] *** Quits: myon98 (~myon98@user/myon98) (Quit: Bouncer maintainance...)
[19:21:05] *** Quits: CoffeeMuffinCake (~a@2001:871:25f:39a0:2cd6:a858:463c:e4ae) (Quit: WeeChat 3.4)
[19:25:55] *** Joins: oakyy (~oaky@h-155-4-161-203.A518.priv.bahnhof.se)
[19:27:07] *** Joins: masoudd (~masoudd@user/masoudd)
[19:30:33] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[19:30:59] *** Joins: constxd (~brad@142.167.170.88)
[19:31:16] *** Joins: CoffeeMuffin (~a@2001:871:25f:39a0:2cd6:a858:463c:e4ae)
[19:31:22] <CoffeeMuffin> #langdev
[19:31:34] *** Parts: CoffeeMuffin (~a@2001:871:25f:39a0:2cd6:a858:463c:e4ae) ()
[19:31:36] *** Joins: joaofukuda_ (~joaofukuk@191.255.113.250)
[19:34:39] *** Quits: joaofukuda (~joaofukuk@2804:431:c7f4:345c:19fc:7530:25c8:1eee) (Read error: Connection reset by peer)
[19:34:54] *** Joins: mahmutov (~mahmutov@5.176.18.109)
[19:37:35] *** Joins: rgrinberg (~textual@2806:101e:7:6bed:540b:bd79:8d25:836)
[19:40:00] *** Joins: AbleBacon (~AbleBacon@user/AbleBacon)
[19:41:22] <fizzie> Sounds like a challenging case for that would be the one where you have a function-like macro expansion split so that the macro name is from the expansion of one macro, but the arguments are from "the outside".
[19:41:26] <fizzie> ,expand #define foo(a, b) foo_expanded(a, b) \n #define bar x foo \n bar (1, 2) /* i.e., this one */
[19:41:26] <candide> fizzie:  x foo_expanded(1, 2)
[19:41:50] <fizzie> Not that I can think of a practical use case for that sort of thing, but it's still a thing.
[19:42:13] *** Joins: gproto23 (~gproto23@user/gproto23)
[19:43:59] *** Quits: cherrry9 (~jan@aeil171.neoplus.adsl.tpnet.pl) (Ping timeout: 256 seconds)
[19:44:18] <pragma-> ,expand #define foo(a, b) foo_expanded(a, b) \n #define bar x foo \n bar(1, 2)
[19:44:19] <candide> pragma-:  x foo_expanded(1, 2)
[19:45:12] <pragma-> Hm, I recall reading that macros expand differently in `foo (x)` vs `foo(x)` but I can't recall if I actually did read that.
[19:46:06] <Beastie> pragma-: what is different if you do #define A(b,c)   than #define A (b,c)
[19:46:22] <pragma-> Oh, maybe that's what I'm thinking of.
[19:46:37] <pragma-> My brain's wiring hasn't been maintained very well in the last decade.
[19:46:40] <Beastie> in the former you are definint a macro with two parameters.... but in the second (b,c) is the expansion of macor A (with no parameters)
[19:46:55] *** Quits: eddybilley (~freddieti@217.119.232.174) (Ping timeout: 256 seconds)
[19:46:56] *** Quits: skapata (~Skapata@user/skapata) (Read error: Connection reset by peer)
[19:48:47] <smallville7123> fizzie: hi
[19:49:06] <pragma-> surprised that apple still maintains this page https://developer.apple.com/library/archive/documentation/DeveloperTools/gcc-4.2.1/cppinternals/Macro-Expansion.html
[19:49:56] <pragma-> >If you don't have a clear mental picture of how things like nested macro expansion, stringification and token pasting are supposed to work, damage to your sanity can quickly result.
[19:50:04] *** Joins: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net)
[19:50:24] <pragma-> Or... contorting your mental processes in order to have a clear mental picture of these things can damage your sanity!
[19:50:25] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Remote host closed the connection)
[19:50:30] * pragma- nods.
[19:50:41] *** Joins: _mikey (~mikey@user/mikey/x-4335048)
[19:50:53] <smallville7123> pragma-: lol
[19:51:34] <smallville7123> 02:11:22 fizzie: Sounds like a challenging case for that would be the one where you have a function-like macro expansion split so that the macro name is from the expansion of one macro, but the arguments are from "the outside".
[19:51:39] *** Joins: Telvana (~capo@user/telvana)
[19:51:43] <smallville7123> how is that challenging?
[19:55:56] *** Joins: Muzer (~muzer@tim32.org)
[19:57:00] <fizzie> Well, the "push a macro to the stack, expand the macro, and then rescan the expansion until there are no more macros to expand" part of that process presumably wouldn't expand `foo` to `foo_expanded`, since the expansion looks like `x foo` and it doesn't have the arguments for foo.
[19:58:50] *** Joins: theseb (~theseb@47-220-214-54.cnrocmta03.res.dyn.suddenlink.net)
[19:59:10] <theseb> why does this give an error?... unsigned int *env     = malloc(6 * sizeof(unsigned int));
[19:59:23] <theseb> error: initializer element is not constant
[19:59:47] <fizzie> Are you trying to put that at file scope?
[20:00:25] <fizzie> Only constants are allowed as initializers for objects with static storage duration. There's no well-defined point when it would actually *run* that, otherwise.
[20:00:53] <theseb> fizzie: ah..must be in main...ok thanks
[20:01:22] *** Quits: cruncher (~cruncher@90.68.118.49) (Quit: Leaving)
[20:05:01] *** Joins: acerbic (~acerbic@cs-xdata-50-86-53-245.cspire.com)
[20:05:48] *** Joins: nicode (~nic@2607:f2c0:9545:fa00:47ff:84f1:8a69:2f9)
[20:07:41] *** Joins: inlight (~thomas@157.35.4.200)
[20:07:41] *** Quits: inlight (~thomas@157.35.4.200) (Changing host)
[20:07:41] *** Joins: inlight (~thomas@user/inlight)
[20:08:21] *** Joins: inlight_ (~thomas@157.35.4.200)
[20:08:36] *** Quits: rgrinberg (~textual@2806:101e:7:6bed:540b:bd79:8d25:836) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[20:08:43] *** Joins: dyeplexer (~dyeplexer@user/dyeplexer)
[20:09:48] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[20:10:59] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:206a:d63d:f8a8:ec3b)
[20:11:47] <theseb> fizzie: i tried to use global var in a function inside of memcpy and it gave an error
[20:11:58] <theseb> fizzie: is there something special about memcpy and global vars?
[20:12:05] *** Quits: inlight (~thomas@user/inlight) (Ping timeout: 256 seconds)
[20:12:59] *** Quits: acerbic (~acerbic@cs-xdata-50-86-53-245.cspire.com) (Read error: Connection reset by peer)
[20:14:10] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Client Quit)
[20:14:37] <tk> in a function inside of memcpy?
[20:14:39] <tk> what
[20:15:17] <pragma-> lol, I read it the intended way first (memcpy called from a function), and then upon a second reading I read it as putting a function inside memcpy.
[20:15:37] *** Quits: Terlisimo (~Terlisimo@outofband.ozna.net) (Quit: Connection reset by beer)
[20:16:13] <pragma-> I often read things twice in different perspectives because English is so bloody ambiguous.
[20:17:34] <theseb> nm
[20:17:35] <pragma-> People are always assuming they understood what the speaker was saying. But really they're just making their own assumptions and accepting the one that makes the most sense whether or not it was the intended message.
[20:17:36] <theseb> my bad
[20:17:48] <theseb> tk, fizzie: it was my fault..syntax error
[20:18:10] <pragma-> The entire world is running on miscommunications that somehow just barely manage to work out.
[20:19:19] *** Joins: eddybilley (~freddieti@2a02-a454-7f89-1-d1a4-261-eb5f-7151.fixed6.kpn.net)
[20:20:01] <theseb> why does memcmp need string.h?
[20:20:09] <theseb> because it is usually used with strings?
[20:21:42] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[20:21:42] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[20:21:42] *** Joins: wroathe (~wroathe@user/wroathe)
[20:21:50] *** Joins: crashrep (~crashrep@user/crashrep)
[20:22:03] *** Joins: Terlisimo (~Terlisimo@outofband.ozna.net)
[20:22:07] <fizzie> More like, they've just generalized the meaning a bit. The way the standard puts it, <string.h> contains things that are "useful for manipulating arrays of character type and other objects treated as arrays of character type."
[20:23:33] *** Joins: Jong (~Jong@2620:10d:c090:400::5:905d)
[20:23:56] *** Quits: eddybilley (~freddieti@2a02-a454-7f89-1-d1a4-261-eb5f-7151.fixed6.kpn.net) (Ping timeout: 252 seconds)
[20:23:56] *** Quits: inlight_ (~thomas@157.35.4.200) (Ping timeout: 252 seconds)
[20:24:08] *** Joins: elkalamar_ (elkalamar@gateway/vpn/airvpn/elkalamar)
[20:26:29] *** Quits: elkalamar (elkalamar@gateway/vpn/airvpn/elkalamar) (Ping timeout: 256 seconds)
[20:26:41] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 252 seconds)
[20:26:53] *** Quits: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) ()
[20:32:46] *** Joins: rgrinberg (~textual@187.223.115.137)
[20:34:39] *** Joins: zer0bitz (~zer0bitz@2001:2003:f74d:b800:bc81:ba25:7a70:67f2)
[20:36:05] *** Quits: ekathva (~ekathva@2001:999:50:cab1:b7e8:130b:c792:9fd) (Ping timeout: 250 seconds)
[20:42:24] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[20:43:48] *** Joins: BenKietzman (~ben@2600:1700:9930:4f90:f8ab:b6f2:dfc5:6e79)
[20:46:30] *** Quits: BenKietzman (~ben@2600:1700:9930:4f90:f8ab:b6f2:dfc5:6e79) (Client Quit)
[20:46:37] *** Joins: BenKietzman (~ben@2600:1700:9930:4f90:f8ab:b6f2:dfc5:6e79)
[20:51:17] *** Quits: BenKietzman (~ben@2600:1700:9930:4f90:f8ab:b6f2:dfc5:6e79) (Client Quit)
[20:52:07] *** Joins: benk (~ben@2600:1700:9930:4f90:f8ab:b6f2:dfc5:6e79)
[20:53:49] *** Joins: smoke (~smoke@user/smoke)
[20:54:06] *** Joins: bolovanos (~bolovanos@user/bolovanos)
[20:54:26] *** Quits: imp (~imp@177-131-189-195.static.sumicity.net.br) (Quit: imp)
[20:56:10] *** Quits: cosimone (~user@93-47-231-87.ip115.fastwebnet.it) (Remote host closed the connection)
[20:56:55] *** Joins: cherrry9 (~jan@aeil171.neoplus.adsl.tpnet.pl)
[20:57:28] *** Quits: LordJohn (~lordjohn@l37-194-102-53.novotelecom.ru) (Read error: Connection reset by peer)
[20:58:31] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:206a:d63d:f8a8:ec3b) (Quit: Quit)
[20:58:46] *** Quits: oxfuxxx (~oxfuxxx@10.177.181.107.wiredns.net) (Quit: Yankies Motherfuckers Cock Astroboys)
[20:59:18] *** Joins: oxfuxxx (~oxfuxxx@10.177.181.107.wiredns.net)
[21:02:44] *** Joins: cosimone (~user@93-47-231-87.ip115.fastwebnet.it)
[21:03:25] *** Joins: geowiesnot (~user@5-51-190-244.abo.bbox.fr)
[21:05:19] *** Joins: lleo (~leo@31-161-189-89.mobile.kpn.net)
[21:06:05] *** Quits: oxfuxxx (~oxfuxxx@10.177.181.107.wiredns.net) (Quit: Yankies Motherfuckers Cock Astroboys)
[21:06:44] *** Quits: fe23 (~fe23@2409:8a34:46c:f80:a8a0:1e29:590:f4be) (Quit: fe23)
[21:06:44] *** Joins: oxfuxxx (~oxfuxxx@10.177.181.107.wiredns.net)
[21:07:12] *** Quits: oxfuxxx (~oxfuxxx@10.177.181.107.wiredns.net) (Client Quit)
[21:08:44] *** Quits: zeenk (~zeenk@2a02:2f04:a30d:1300:51a3:bcfc:6cda:9fc5) (Quit: Konversation terminated!)
[21:08:57] *** Quits: crashrep (~crashrep@user/crashrep) (Quit: WeeChat 3.4)
[21:09:08] *** Quits: MajorBiscuit (~MajorBisc@c-001-017-058.client.tudelft.eduvpn.nl) (Quit: WeeChat 3.4)
[21:10:15] *** Joins: tforever (~Terabyte@78.174.124.72)
[21:11:53] *** Quits: ka80 (~ka80@111.60.138.34.bc.googleusercontent.com) (Quit: Leaving)
[21:12:56] *** Joins: MatthiasG2 (~matthias@i6DFA026C.versanet.de)
[21:14:03] *** Quits: cart_man (~rynot@host-78-144-125-214.as13285.net) (Quit: Konversation terminated!)
[21:14:11] *** Joins: ka80 (~ka80@111.60.138.34.bc.googleusercontent.com)
[21:15:10] *** Quits: tmpm697 (~tmpm697@171.224.178.134) (Remote host closed the connection)
[21:16:55] *** Quits: masoudd (~masoudd@user/masoudd) (Ping timeout: 256 seconds)
[21:18:02] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[21:19:06] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[21:19:22] <theseb> anyone use valgrind?  i correctly used mallocs in my main but valgrind says those mallocs "definitely lost" memory and reports them as "leaks"
[21:19:24] <theseb> ??
[21:19:55] <theseb> is every malloc a "leak" to valgrind for some reason?
[21:20:22] <twkm> a leak is a failure to use a free for each malloc.
[21:20:55] <twkm> (in case the docs were burning)
[21:21:44] <fizzie> Though Valgrind does also (attempt to) distinguish between "lost" (you didn't use `free`, but also no longer have a pointer to it) and "still reachable" (didn't `free`, but could still hypothetically do so).
[21:22:15] *** Quits: lleo (~leo@31-161-189-89.mobile.kpn.net) (Ping timeout: 250 seconds)
[21:22:44] <koollman> in general I bet on valgrind being right and my code being wrong
[21:23:38] <theseb> twkm, fizzie: oh say,,,this brings up a related point I need to confess.....I NEVER use free.....I don't see the point...when the program finishes it is all freed right?
[21:23:53] <theseb> I'm honestly asking.
[21:23:57] <libc> ;D
[21:24:06] <twkm> what if you want to run it long term, or turn it into a library?
[21:24:27] <theseb> twkm: hmm
[21:24:42] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[21:24:42] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[21:24:42] *** Joins: wroathe (~wroathe@user/wroathe)
[21:24:46] <theseb> twkm: um..well I haven't ever done "real work" like that so maybe that's why i never used free
[21:25:20] <libc> is it a sin if i use the book C programming Language as the standard
[21:26:17] <theseb> libc: is it ANSI C?
[21:26:25] <libc> yes
[21:26:25] <theseb> libc: anything ANSI should be fine
[21:26:29] <theseb> so what's the worry?
[21:26:40] <libc> i want to go ahead from the pro's
[21:27:13] <theseb> well i don't claim i'm a pro but in general if lang specs are ANSI should be fine
[21:27:14] <tforever> libc: if you think that you can advance yourself to c99 after a while, why not
[21:27:39] *** Quits: alch (~alch@151.34.110.188) (Read error: Connection reset by peer)
[21:27:56] <tforever> starting with that book is great to learn the basics. standards can be learned during time
[21:28:06] <tforever> so, why not?
[21:28:20] <libc> i always wanted to be system programmer but life is always getting in my way
[21:28:35] <tforever> based me
[21:28:57] *** Quits: n3rdy1 (~n3rdy1@2600:1700:4570:3480:1b88:50f:dae0:9293) (Ping timeout: 240 seconds)
[21:29:19] *** Quits: skeev (~skeev@92.86.110.192) (Remote host closed the connection)
[21:29:29] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[21:31:47] *** Joins: alch (~alch@151.36.223.141)
[21:33:00] <theseb> fizzie, twkm: thanks...started using free for 1st time...valgrind output is clean...i feel great!
[21:33:03] *** Joins: Akiva (~Akiva@user/Akiva)
[21:33:09] <theseb> i'd like to give a shout out to the awesomeness of valgrind
[21:35:30] *** Joins: ekathva (~ekathva@2001:999:50:cab1:b7e8:130b:c792:9fd)
[21:35:52] *** Quits: tforever (~Terabyte@78.174.124.72) (Quit: Segmentation fault (core dumped))
[21:38:16] <libc> unfortunately i can't say the same for the pizza delivery guy
[21:38:41] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[21:39:41] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
[21:40:14] <libc> an hour is kinda long
[21:40:25] <libc> it's a very small country
[21:41:49] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[21:42:37] *** Quits: Muzer (~muzer@tim32.org) (Ping timeout: 240 seconds)
[21:43:40] <twkm> congratulations theseb.
[21:48:05] *** Quits: geowiesnot (~user@5-51-190-244.abo.bbox.fr) (Ping timeout: 256 seconds)
[21:48:44] *** Joins: merrinx1 (~merrinx@ti0028a400-1685.bb.online.no)
[21:51:55] *** Joins: skapata (~Skapata@2804:14c:87b0:9d2e:6114:c56c:8a91:41ae)
[21:51:55] *** Quits: skapata (~Skapata@2804:14c:87b0:9d2e:6114:c56c:8a91:41ae) (Changing host)
[21:51:55] *** Joins: skapata (~Skapata@user/skapata)
[21:58:22] *** Joins: kilobyte1 (~kbch@213.55.226.125)
[21:59:31] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[22:00:06] *** Joins: masoudd (~masoudd@user/masoudd)
[22:00:23] *** Joins: kts_ (~kts@103.73.237.200)
[22:00:24] *** Quits: kts (~kts@103.73.237.38) (Ping timeout: 250 seconds)
[22:00:24] *** Quits: kilobyte_ch (~kbch@77.109.171.85) (Ping timeout: 250 seconds)
[22:00:35] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[22:00:46] *** Quits: merrinx1 (~merrinx@ti0028a400-1685.bb.online.no) (Quit: WeeChat 3.4)
[22:01:22] *** Joins: FluffyMask (~masque@user/fluffymask)
[22:01:31] *** Joins: merrinx1 (~merrinx@ti0028a400-1685.bb.online.no)
[22:02:04] *** Quits: kts_ (~kts@103.73.237.200) (Client Quit)
[22:02:09] *** Quits: merrinx1 (~merrinx@ti0028a400-1685.bb.online.no) (Client Quit)
[22:02:15] *** Joins: Chaser (~Chaser@user/chaser)
[22:03:55] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Client Quit)
[22:06:42] *** Quits: kilobyte1 (~kbch@213.55.226.125) (Ping timeout: 260 seconds)
[22:09:32] *** Quits: dyeplexer (~dyeplexer@user/dyeplexer) (Ping timeout: 252 seconds)
[22:11:39] *** Quits: smoke (~smoke@user/smoke) (Ping timeout: 250 seconds)
[22:11:44] *** Quits: cosimone (~user@93-47-231-87.ip115.fastwebnet.it) (Read error: Connection reset by peer)
[22:18:07] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[22:18:10] *** Quits: skapata (~Skapata@user/skapata) (Ping timeout: 250 seconds)
[22:18:33] *** Joins: smoke (~smoke@user/smoke)
[22:18:56] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:206a:d63d:f8a8:ec3b)
[22:20:00] *** Joins: merrinx1 (~merrinx@ti0028a400-1685.bb.online.no)
[22:20:07] *** Quits: merrinx1 (~merrinx@ti0028a400-1685.bb.online.no) (Client Quit)
[22:20:12] *** Quits: System_Error (~SystemErr@user/systemerror) (Ping timeout: 276 seconds)
[22:20:37] <homura> ;D
[22:21:12] *** Joins: kilobyte1 (~kbch@77.109.171.85)
[22:22:03] *** Quits: rgrinberg (~textual@187.223.115.137) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[22:22:39] *** Quits: ArthurStrong (~ArthurStr@2a01:4f9:6a:15af::2) (Remote host closed the connection)
[22:22:46] *** Joins: Muzer (~muzer@tim32.org)
[22:23:23] *** Joins: ArthurStrong (~ArthurStr@2a01:4f9:6a:15af::2)
[22:26:03] *** Quits: SaltHilStroller_ (~SaltHillS@206.223.160.26) (Ping timeout: 256 seconds)
[22:26:59] *** Joins: Nutte35 (~Nutte@202.153.80.40)
[22:28:22] *** Quits: joaofukuda_ (~joaofukuk@191.255.113.250) (Read error: Connection reset by peer)
[22:29:22] *** Joins: oxfuxxx (~oxfuxxx@10.177.181.107.wiredns.net)
[22:29:39] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[22:30:25] *** Joins: CaryHartline (~CaryHartl@cpe-76-185-112-162.tx.res.rr.com)
[22:32:56] *** Joins: skapata (~Skapata@user/skapata)
[22:33:47] *** Joins: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net)
[22:33:50] *** Joins: andai (~andai@86.32.40.225)
[22:33:58] *** Quits: smoke (~smoke@user/smoke) (Quit: Leaving)
[22:33:59] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Remote host closed the connection)
[22:37:42] *** Quits: _mikey (~mikey@user/mikey/x-4335048) (Remote host closed the connection)
[22:38:05] *** Quits: bick (~kotaman@94.46.203.147) (Ping timeout: 250 seconds)
[22:38:09] *** Joins: _mikey (~mikey@user/mikey/x-4335048)
[22:38:34] *** Joins: peacefulman (~paul@141.217.247.9)
[22:39:45] <nitrix> theseb, If you're into feel-good, there's also -fsanitize=undefined,address that are useful beyond just detecting leaks.
[22:40:19] *** Quits: peacefulman (~paul@141.217.247.9) (Client Quit)
[22:41:27] *** Quits: BurritoBob (~paul@107-190-110-80.cpe.teksavvy.com) (Ping timeout: 256 seconds)
[22:41:39] *** Joins: SaltHilStroller_ (~SaltHillS@206.223.160.26)
[22:41:45] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Read error: Connection reset by peer)
[22:41:58] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[22:45:07] *** Quits: Haxxa (~Haxxa@125-253-30-213.ip4.superloop.com) (Quit: Haxxa flies away.)
[22:45:38] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[22:48:31] *** Joins: Haxxa (~Haxxa@125-253-30-213.ip4.superloop.com)
[22:49:25] *** Quits: theseb (~theseb@47-220-214-54.cnrocmta03.res.dyn.suddenlink.net) (Read error: Connection reset by peer)
[22:49:48] *** Joins: theseb (~theseb@47-220-214-54.cnrocmta03.res.dyn.suddenlink.net)
[22:51:11] *** Joins: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net)
[22:51:26] *** Joins: inlight (~thomas@82.221.128.46)
[22:51:26] *** Quits: inlight (~thomas@82.221.128.46) (Changing host)
[22:51:26] *** Joins: inlight (~thomas@user/inlight)
[22:51:44] *** Quits: Nutte35 (~Nutte@202.153.80.40) (Read error: Connection reset by peer)
[22:52:48] *** Joins: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com)
[22:53:41] *** Joins: bick (~kotaman@94.46.203.147)
[22:55:36] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[22:56:39] *** Quits: oxfuxxx (~oxfuxxx@10.177.181.107.wiredns.net) (Ping timeout: 256 seconds)
[22:57:09] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[22:57:24] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Client Quit)
[22:57:35] *** Joins: tforever (~Terabyte@78.174.124.72)
[22:58:57] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[22:58:57] *** Joins: masoudd_ (~masoudd@user/masoudd)
[22:59:26] *** Joins: shiroyas1 (~shiroyash@ec2-3-124-70-31.eu-central-1.compute.amazonaws.com)
[23:01:00] *** Joins: dac (~dcx@user/dac)
[23:01:00] *** Joins: NightMonkey_ (~NightMonk@user/nightmonkey)
[23:02:35] *** Quits: merrinx (~merrinx@ti0028a400-1685.bb.online.no) (Quit: WeeChat 3.3)
[23:03:16] *** Joins: pooryori1k (~pooryoric@87-119-174-173.tll.elisa.ee)
[23:03:57] *** Joins: mrec (~markus@sundtek.de)
[23:04:39] *** Quits: andai (~andai@86.32.40.225) (Quit: Client closed)
[23:04:47] *** Joins: Akuli (~Akuli@82-203-164-247.bb.dnainternet.fi)
[23:05:11] *** Joins: Flecks (~fleck@user/fleck)
[23:06:34] *** Joins: finalsummer (~finalsumm@user/finalsummer)
[23:07:52] *** Quits: masoudd (~masoudd@user/masoudd) (*.net *.split)
[23:07:52] *** Quits: satanist (~satanist@bureaucracy.bureaucracy.de) (*.net *.split)
[23:07:52] *** Quits: freakazoid333 (~matt@2603:9000:cf03:86c3:cc37:7a8c:a4ec:8c3d) (*.net *.split)
[23:07:52] *** Quits: Satin (uid193953@user/Seten) (*.net *.split)
[23:07:52] *** Quits: AssKoala (~asskoala@user/asskoala) (*.net *.split)
[23:07:52] *** Quits: hsiktas[m] (~hsiktasm]@2001:470:69fc:105::30d4) (*.net *.split)
[23:07:52] *** Quits: jinsun_ (~jinsun@user/jinsun) (*.net *.split)
[23:07:52] *** Quits: beneth (~beneth@2001:41d0:c:a71:1000:25::) (*.net *.split)
[23:07:52] *** Quits: danieln (~danieln@erebor.danieln.de) (*.net *.split)
[23:07:52] *** Quits: baloona (~baloona@mail.baloona.de) (*.net *.split)
[23:07:52] *** Quits: vt (~vt@osa.vbc.su) (*.net *.split)
[23:07:52] *** Quits: Twix (~None@2a01:4f8:192:23d0::1be4:a) (*.net *.split)
[23:07:52] *** Quits: subvisor (sid502026@id-502026.helmsley.irccloud.com) (*.net *.split)
[23:07:52] *** Quits: Fleck (~fleck@user/fleck) (*.net *.split)
[23:07:52] *** Quits: bzyx (~quassel@89-69-20-238.dynamic.chello.pl) (*.net *.split)
[23:07:52] *** Quits: simpl_e (~user@user/simpl-e/x-8589812) (*.net *.split)
[23:07:52] *** Quits: pooryorick (~pooryoric@87-119-174-173.tll.elisa.ee) (*.net *.split)
[23:07:52] *** Quits: DPA (~DPA@75-128-16-94.static.cable.fcom.ch) (*.net *.split)
[23:07:52] *** Quits: hirish (~hirish@ip85.ip-137-74-20.eu) (*.net *.split)
[23:07:52] *** Quits: gothicserpent (~gothicser@2604:a880:4:1d0::176:6000) (*.net *.split)
[23:07:52] *** Quits: mrec_ (~markus@user/mrec) (*.net *.split)
[23:07:52] *** Quits: dcx (~dcx@user/dac) (*.net *.split)
[23:07:52] *** Quits: finalsummer_ (~finalsumm@user/finalsummer) (*.net *.split)
[23:07:52] *** Quits: shadowchaser (~Shadowcha@liox.eu) (*.net *.split)
[23:07:52] *** Quits: nickorta12 (~nickorta1@174-28-176-216.albq.qwest.net) (*.net *.split)
[23:07:52] *** Quits: shiroyasha (~shiroyash@ec2-3-124-70-31.eu-central-1.compute.amazonaws.com) (*.net *.split)
[23:07:52] *** Quits: kernelc (~kornel@46.101.204.33) (*.net *.split)
[23:07:52] *** Quits: bleb (~cm@user/bleb) (*.net *.split)
[23:07:52] *** Quits: NightMonkey (~NightMonk@user/nightmonkey) (*.net *.split)
[23:07:52] *** Quits: grumble (grumble@user/grumble) (*.net *.split)
[23:07:52] *** Quits: mweckbecker (~matthias@weckbecker.name) (*.net *.split)
[23:07:52] *** Quits: dragonmaster (dragonmast@user/dragonmaster) (*.net *.split)
[23:07:52] *** Quits: ws2k3 (znc@vps.freegamehosting.eu) (*.net *.split)
[23:07:53] *** Quits: computerquip (sid423484@user/computerquip) (*.net *.split)
[23:07:53] *** Quits: kevinsjoberg (sid499516@id-499516.lymington.irccloud.com) (*.net *.split)
[23:07:53] *** Quits: hyper_dave (~hyper_dav@2a01:4f9:4a:246c::2) (*.net *.split)
[23:07:53] *** Quits: gemelen (~gemelen@zooey.gemelen.net) (*.net *.split)
[23:07:53] *** Quits: Justin_T (~Justin@user/justin-t/x-2449983) (*.net *.split)
[23:07:53] *** Quits: lonjil (~quassel@user/lonjil) (*.net *.split)
[23:07:55] *** NightMonkey_ is now known as NightMonkey
[23:09:53] *** Quits: Thymo (~Thymo@82-74-137-251.cable.dynamic.v4.ziggo.nl) (Changing host)
[23:09:53] *** Joins: Thymo (~Thymo@NASSP/developer/Thymo)
[23:10:24] *** Joins: nickorta12 (~nickorta1@174-28-176-216.albq.qwest.net)
[23:10:55] *** Quits: libc (~archer@user/tessio) (Ping timeout: 256 seconds)
[23:12:26] *** Joins: satanist (~satanist@bureaucracy.bureaucracy.de)
[23:12:26] *** Joins: freakazoid333 (~matt@2603:9000:cf03:86c3:cc37:7a8c:a4ec:8c3d)
[23:12:26] *** Joins: Satin (uid193953@user/Seten)
[23:12:26] *** Joins: AssKoala (~asskoala@user/asskoala)
[23:12:26] *** Joins: hsiktas[m] (~hsiktasm]@2001:470:69fc:105::30d4)
[23:12:26] *** Joins: jinsun_ (~jinsun@user/jinsun)
[23:12:26] *** Joins: beneth (~beneth@2001:41d0:c:a71:1000:25::)
[23:12:26] *** Joins: danieln (~danieln@erebor.danieln.de)
[23:12:26] *** Joins: baloona (~baloona@mail.baloona.de)
[23:12:26] *** Joins: vt (~vt@osa.vbc.su)
[23:12:26] *** Joins: Twix (~None@2a01:4f8:192:23d0::1be4:a)
[23:12:26] *** Joins: subvisor (sid502026@id-502026.helmsley.irccloud.com)
[23:12:26] *** Joins: bzyx (~quassel@89-69-20-238.dynamic.chello.pl)
[23:12:26] *** Joins: DPA (~DPA@75-128-16-94.static.cable.fcom.ch)
[23:12:26] *** Joins: hirish (~hirish@ip85.ip-137-74-20.eu)
[23:12:26] *** Joins: gothicserpent (~gothicser@2604:a880:4:1d0::176:6000)
[23:12:26] *** Joins: shadowchaser (~Shadowcha@liox.eu)
[23:12:26] *** Joins: kernelc (~kornel@46.101.204.33)
[23:12:26] *** Joins: bleb (~cm@user/bleb)
[23:12:26] *** Joins: grumble (grumble@user/grumble)
[23:12:26] *** Joins: dragonmaster (dragonmast@user/dragonmaster)
[23:12:26] *** Joins: ws2k3 (znc@vps.freegamehosting.eu)
[23:12:26] *** Joins: mweckbecker (~matthias@weckbecker.name)
[23:12:26] *** Joins: computerquip (sid423484@user/computerquip)
[23:12:26] *** Joins: kevinsjoberg (sid499516@id-499516.lymington.irccloud.com)
[23:12:26] *** Joins: hyper_dave (~hyper_dav@2a01:4f9:4a:246c::2)
[23:12:26] *** Joins: Justin_T (~Justin@user/justin-t/x-2449983)
[23:12:26] *** Joins: gemelen (~gemelen@zooey.gemelen.net)
[23:12:26] *** Joins: lonjil (~quassel@user/lonjil)
[23:13:11] *** Emet-Selch is now known as Azem
[23:15:47] *** Quits: bick (~kotaman@94.46.203.147) (Ping timeout: 250 seconds)
[23:16:02] *** Quits: not_a_robot[m] (~notarobot@2001:470:69fc:105::dd37) (Ping timeout: 240 seconds)
[23:16:12] *** Quits: euphrates[m] (~euphrates@2001:470:69fc:105::fbb5) (Ping timeout: 245 seconds)
[23:16:12] *** Quits: dlozeve[m] (~dlozevema@2001:470:69fc:105::1:1c58) (Ping timeout: 245 seconds)
[23:16:12] *** Quits: nopenope[m] (~repmovsb@2001:470:69fc:105::1:274e) (Ping timeout: 245 seconds)
[23:16:12] *** Quits: Irvise (~irvise@2001:470:69fc:105::84c) (Ping timeout: 245 seconds)
[23:16:12] *** Quits: explosion-mental (~explosion@2001:470:69fc:105::dac2) (Ping timeout: 245 seconds)
[23:16:12] *** Quits: james[m]123 (~jamesjame@2001:470:69fc:105::1:5aa1) (Ping timeout: 245 seconds)
[23:16:12] *** Quits: Akawama[m] (~akawama@user/akawama) (Ping timeout: 245 seconds)
[23:16:13] *** Quits: jaavv[m] (~jaavvmatr@2001:470:69fc:105::1:37b1) (Ping timeout: 250 seconds)
[23:16:13] *** Quits: Roman[m]1 (~wrongt@2001:470:69fc:105::341e) (Ping timeout: 250 seconds)
[23:16:13] *** Quits: dalz (~dalz@2001:470:69fc:105::2ea) (Ping timeout: 250 seconds)
[23:16:13] *** Quits: aura[m] (~aurabindo@2001:470:69fc:105::4204) (Ping timeout: 250 seconds)
[23:16:13] *** Quits: nmat[m] (~nmatm]@2001:470:69fc:105::1:5553) (Ping timeout: 250 seconds)
[23:16:13] *** Quits: nomagno (~nomagno@2001:470:69fc:105::c1f0) (Ping timeout: 250 seconds)
[23:16:13] *** Quits: atulu (~atulum]@2001:470:69fc:105::d50c) (Ping timeout: 240 seconds)
[23:16:13] *** Quits: Neui[m] (~neuimatri@2001:470:69fc:105::745) (Ping timeout: 240 seconds)
[23:16:14] *** Quits: f33d1[m] (~g0nkstead@2001:470:69fc:105::1:320b) (Ping timeout: 240 seconds)
[23:16:14] *** Quits: mattmurr[m] (~mattmurrm@2001:470:69fc:105::1:5ea0) (Ping timeout: 240 seconds)
[23:16:26] *** Quits: zdctg[m] (~zdctgmatr@2001:470:69fc:105::1:8a86) (Ping timeout: 250 seconds)
[23:16:26] *** Quits: skyeto[m] (~skyetosky@2001:470:69fc:105::c2fe) (Ping timeout: 250 seconds)
[23:16:26] *** Quits: carrot98[m] (~carrot98m@2001:470:69fc:105::1:5fcc) (Ping timeout: 250 seconds)
[23:16:26] *** Quits: hussam (~hussam@user/hussam) (Ping timeout: 250 seconds)
[23:16:26] *** Quits: Vsg21\[m] (~vtrollmat@2001:470:69fc:105::17a8) (Ping timeout: 250 seconds)
[23:16:32] *** Quits: randy408[m] (~randy408m@2001:470:69fc:105::2f5e) (Ping timeout: 240 seconds)
[23:16:32] *** Quits: anomalous_creato (~anomalous@2001:470:69fc:105::6ed1) (Ping timeout: 240 seconds)
[23:16:32] *** Quits: go4godvin (~go4godvin@user/go4godvin) (Ping timeout: 240 seconds)
[23:16:32] *** Quits: slact[m] (~slact@2001:470:69fc:105::1:5ee3) (Ping timeout: 240 seconds)
[23:16:35] *** Quits: flashd[m] (~flashdmat@2001:470:69fc:105::1:3d0b) (Ping timeout: 256 seconds)
[23:16:36] *** Quits: ormaaj (~ormaaj@user/ormaaj) (Ping timeout: 256 seconds)
[23:16:36] *** Quits: archdark[m] (~ryonagana@2001:470:69fc:105::fd27) (Ping timeout: 256 seconds)
[23:16:36] *** Quits: silkut42[m] (~silkutmat@2001:470:69fc:105::1:6530) (Ping timeout: 256 seconds)
[23:16:38] *** Quits: NRK (~nrkmatrix@2001:470:69fc:105::4e30) (Ping timeout: 252 seconds)
[23:16:38] *** Quits: spokojni[m] (~spokojnio@2001:470:69fc:105::1:3fb2) (Ping timeout: 252 seconds)
[23:16:38] *** Quits: brindaberg[m] (~brindaber@2001:470:69fc:105::1:873e) (Ping timeout: 252 seconds)
[23:16:38] *** Quits: milia[m] (~mlliarmma@2001:470:69fc:105::1:4631) (Ping timeout: 252 seconds)
[23:16:38] *** Quits: M101donutman[m] (~M101donut@2001:470:69fc:105::d51) (Ping timeout: 252 seconds)
[23:16:39] *** Quits: lupin592[m] (~lupin592m@2001:470:69fc:105::1:6718) (Ping timeout: 250 seconds)
[23:16:39] *** Quits: psydroid (~psydroid@user/psydroid) (Ping timeout: 250 seconds)
[23:16:39] *** Quits: Hansuke[m] (~hansukema@2001:470:69fc:105::1:86bb) (Ping timeout: 250 seconds)
[23:16:42] *** Quits: hsiktas[m] (~hsiktasm]@2001:470:69fc:105::30d4) (Ping timeout: 260 seconds)
[23:17:03] *** Quits: kolmogorov[m] (~kolmogoro@2001:470:69fc:105::e03b) (Ping timeout: 268 seconds)
[23:17:03] *** Quits: mphojele (~mphojelem@2001:470:69fc:105::35ab) (Ping timeout: 268 seconds)
[23:17:03] *** Quits: Bazsalanszky[m] (~bazsalans@2001:470:69fc:105::6fe) (Ping timeout: 268 seconds)
[23:17:34] *** Quits: tforever (~Terabyte@78.174.124.72) (Quit: Segmentation fault (core dumped))
[23:18:17] *** Quits: Darkcoal (~user@user/Darkcoal) (Ping timeout: 252 seconds)
[23:18:54] *** Quits: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net) (Remote host closed the connection)
[23:19:09] *** Joins: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net)
[23:20:24] *** Joins: Darkcoal (~user@user/Darkcoal)
[23:20:26] *** Quits: jinsun_ (~jinsun@user/jinsun) (Ping timeout: 260 seconds)
[23:21:49] *** Joins: crashrep (~crashrep@user/crashrep)
[23:22:06] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[23:23:31] *** Joins: MrFantastik (~f@12.244.8.98)
[23:24:31] *** Joins: bolovanos_ (~bolovanos@user/bolovanos)
[23:24:45] *** Joins: Atque (~Atque@user/atque)
[23:25:19] *** Joins: Charadon (~Charadon@155.138.164.183)
[23:28:21] *** Quits: bolovanos (~bolovanos@user/bolovanos) (Ping timeout: 250 seconds)
[23:29:52] *** Joins: magla (~gelignite@d5366c9a.access.ecotel.net)
[23:31:07] *** Quits: CaryHartline (~CaryHartl@cpe-76-185-112-162.tx.res.rr.com) (Quit: Textual IRC Client: www.textualapp.com)
[23:34:26] *** Joins: Vsg21\[m] (~vtrollmat@2001:470:69fc:105::17a8)
[23:35:31] *** Quits: masoudd_ (~masoudd@user/masoudd) (Quit: Leaving)
[23:35:49] *** Quits: bolovanos_ (~bolovanos@user/bolovanos) (Ping timeout: 240 seconds)
[23:36:01] *** Joins: Akawama[m] (~akawama@user/akawama)
[23:39:30] *** Joins: dalz (~dalz@2001:470:69fc:105::2ea)
[23:42:15] *** Quits: ekathva (~ekathva@2001:999:50:cab1:b7e8:130b:c792:9fd) (Remote host closed the connection)
[23:43:19] *** Joins: bick (~kotaman@94.46.203.147)
[23:45:18] *** Joins: oxfuxxx (~oxfuxxx@10.177.181.107.wiredns.net)
[23:45:27] *** Joins: M101donutman[m] (~M101donut@2001:470:69fc:105::d51)
[23:45:37] *** Quits: Darkcoal (~user@user/Darkcoal) (Ping timeout: 240 seconds)
[23:46:19] *** Joins: zdctg[m] (~zdctgmatr@2001:470:69fc:105::1:8a86)
[23:47:40] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[23:47:44] *** Joins: Darkcoal (~user@user/Darkcoal)
[23:50:28] *** Quits: sr20det (~sr20det@user/sr20det) (Remote host closed the connection)
[23:51:44] *** Quits: crashrep (~crashrep@user/crashrep) (Quit: WeeChat 3.4)
[23:52:03] *** Quits: blindguard (~blindguar@2a02:908:1864:c200::ef3c) (Quit: Konversation terminated!)
[23:52:31] *** Joins: shivesh (~shivesh@user/shivesh)
[23:54:25] *** Joins: skyeto[m] (~skyetosky@2001:470:69fc:105::c2fe)
[23:54:56] *** Joins: mattmurr[m] (~mattmurrm@2001:470:69fc:105::1:5ea0)
[23:56:05] *** Joins: mintograde (~mintograd@47.201.5.61)
[23:56:49] *** Quits: oxfuxxx (~oxfuxxx@10.177.181.107.wiredns.net) (Ping timeout: 256 seconds)
[23:58:37] *** Quits: minto (~mintograd@47.201.5.61) (Ping timeout: 240 seconds)
[23:58:54] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[23:59:37] <Feuermagier> Where exactly are the structs the loader uses for GOT resolutions located?
