[00:02:40] *** Joins: alx741 (~alx741@157.100.93.160)
[00:04:11] *** Quits: doyougnu (~doyougnu@c-73-25-202-122.hsd1.or.comcast.net) (Ping timeout: 252 seconds)
[00:04:32] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:21ba:a382:6b6:54c4) (Ping timeout: 268 seconds)
[00:05:18] *** Quits: tromp (~textual@dhcp-077-249-230-040.chello.nl) (Quit: My iMac has gone to sleep. ZZZzzzâ€¦)
[00:07:09] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[00:07:27] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[00:13:20] *** Joins: lavaman (~lavaman@98.38.249.169)
[00:17:37] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 240 seconds)
[00:18:02] *** Joins: curiousgay (~curiousga@77-120-141-90.kha.volia.net)
[00:19:01] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:21ba:a382:6b6:54c4)
[00:20:23] *** Joins: tromp (~textual@dhcp-077-249-230-040.chello.nl)
[00:21:44] <awpr> a) I think this should be one of the classes where https://hackage.haskell.org/package/base-4.16.0.0/docs/GHC-Exts.html#v:magicDict works; b) put the instance (redundantly) in the GADT constructor(s); c) if performance isn't critical here, seems like just re-deriving the dictionary with GADT matches isn't too terrible
[00:22:51] *** Joins: Erutuon (~Erutuon@user/erutuon)
[00:23:15] *** Joins: evocatus (~evocatus@62.182.78.42)
[00:25:11] *** Joins: alx741 (~alx741@157.100.93.160)
[00:25:17] *** Joins: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net)
[00:25:39] <tomsmeding> re (c): yeah it isn't terrible, was just wondering if there is a better way, since the info that I'm constructing is literally the value that I'm traversing
[00:25:49] <tomsmeding> (a) sounds interesting, also scary :p
[00:26:17] *** Quits: pfurla (~pfurla@172.58.27.44) (Ping timeout: 240 seconds)
[00:26:18] <awpr> yeah, it's a bit sketchy.  but it is how `someNatVal` works, at least
[00:28:26] <tomsmeding> didn't that become withDict in ghc HEAD
[00:28:33] <tomsmeding> with a more informative type signature
[00:30:14] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Remote host closed the connection)
[00:30:22] *** Joins: Tuplanolla (~Tuplanoll@91-159-68-169.elisa-laajakaista.fi)
[00:30:32] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[00:31:08] <tomsmeding> ok magicDict's Note in compiler/GHC/Types/Id/Make.hs is a bit too scary for me :)
[00:31:27] <tomsmeding> but thanks awpr I'd read about magicDict at some point, funny to see it turn up again
[00:31:28] *** Quits: coot (~coot@2a02:a310:e03f:8500:933a:39ca:ef4e:37cb) (Quit: coot)
[00:32:18] *** Quits: _ht (~quassel@82-169-194-8.biz.kpn.net) (Remote host closed the connection)
[00:32:21] *** Joins: gustik (~gustik@2a01:c844:242f:ba20:72e:7030:46bf:1353)
[00:32:24] <awpr> yeah it does look like that's replaced it
[00:40:57] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[00:46:12] *** Joins: acidjnk (~acidjnk@p200300d0c7271e65d42c28944a29f404.dip0.t-ipconnect.de)
[00:56:17] *** Joins: rond_ (~rond_@100.42.200.146.dyn.plus.net)
[00:56:17] *** Quits: shapr (~user@12.5.211.156) (Ping timeout: 240 seconds)
[00:57:28] *** Joins: _xor (~xor@dsl-50-5-233-169.fuse.net)
[00:58:52] *** Joins: alx741 (~alx741@157.100.93.160)
[01:00:22] *** Quits: ProfSimm (~ProfSimm@87.227.196.109) (Remote host closed the connection)
[01:05:49] *** Quits: madjestic (~madjestic@88-159-247-120.fixed.kpn.net) (Ping timeout: 256 seconds)
[01:06:17] *** Joins: sourcemage (~sourcemag@c-24-14-124-168.hsd1.il.comcast.net)
[01:08:14] *** Joins: briandaed (~root@185.234.208.208.r.toneticgroup.pl)
[01:10:30] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[01:11:11] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:21ba:a382:6b6:54c4) (Ping timeout: 245 seconds)
[01:14:37] *** Quits: emf (~emf@2620:10d:c091:480::1:7a0e) (Ping timeout: 240 seconds)
[01:16:44] *** Quits: briandaed (~root@185.234.208.208.r.toneticgroup.pl) (Quit: Lost terminal)
[01:26:02] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 260 seconds)
[01:26:51] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[01:27:43] *** Quits: vicfred (~vicfred@user/vicfred) (Quit: Leaving)
[01:28:27] *** Joins: alx741 (~alx741@157.100.93.160)
[01:29:53] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:21ba:a382:6b6:54c4)
[01:30:17] *** Joins: madjestic (~madjestic@88-159-247-120.fixed.kpn.net)
[01:30:51] *** Joins: jgeerds (~jgeerds@55d4ac73.access.ecotel.net)
[01:35:51] *** Joins: falafel (~falafel@2603-8000-d800-688c-c489-b1e0-39de-1e29.res6.spectrum.com)
[01:35:51] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[01:37:33] *** Quits: deadmarshal (~deadmarsh@95.38.228.121) (Ping timeout: 256 seconds)
[01:37:37] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:21ba:a382:6b6:54c4) (Ping timeout: 240 seconds)
[01:38:40] *** Joins: pfurla (~pfurla@172.58.27.44)
[01:42:18] *** Quits: mjs2600 (~mjs2600@c-24-91-3-49.hsd1.vt.comcast.net) (Read error: Connection reset by peer)
[01:42:31] *** Joins: mjs2600 (~mjs2600@c-24-91-3-49.hsd1.vt.comcast.net)
[01:43:37] *** Quits: madjestic (~madjestic@88-159-247-120.fixed.kpn.net) (Ping timeout: 240 seconds)
[01:47:03] *** Joins: lavaman (~lavaman@98.38.249.169)
[01:47:37] *** Quits: falafel (~falafel@2603-8000-d800-688c-c489-b1e0-39de-1e29.res6.spectrum.com) (Ping timeout: 240 seconds)
[01:49:17] *** Quits: jijimofo (~cmo@S010610561191f5d6.lb.shawcable.net) (Ping timeout: 240 seconds)
[01:52:17] *** Quits: ezzieyguywuf (~Unknown@user/ezzieyguywuf) (Ping timeout: 256 seconds)
[01:52:34] *** Joins: alx741 (~alx741@157.100.93.160)
[01:54:26] *** Joins: wootehfoot (~wootehfoo@user/wootehfoot)
[01:58:03] *** Joins: slack1256 (~slack1256@191.125.99.206)
[01:58:08] *** Quits: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Quit: WeeChat 3.3)
[01:59:14] *** Joins: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[02:01:13] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[02:03:41] *** Joins: Pickchea (~private@user/pickchea)
[02:05:06] *** Quits: dhouthoo (~dhouthoo@178-117-36-167.access.telenet.be) (Quit: WeeChat 3.3)
[02:05:06] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[02:08:50] *** Quits: rond_ (~rond_@100.42.200.146.dyn.plus.net) (Quit: Client closed)
[02:10:14] *** Joins: jijimofo (~cmo@S010610561191f5d6.lb.shawcable.net)
[02:14:03] *** Joins: emf (~emf@2603-6080-9403-11bf-0000-0000-0000-000a.res6.spectrum.com)
[02:16:32] *** Quits: takuan (~takuan@178-116-218-225.access.telenet.be) (Remote host closed the connection)
[02:16:33] *** Joins: benin (~benin@183.82.27.121)
[02:16:52] *** Joins: doyougnu (~doyougnu@c-73-25-202-122.hsd1.or.comcast.net)
[02:17:42] *** Quits: emf (~emf@2603-6080-9403-11bf-0000-0000-0000-000a.res6.spectrum.com) (Client Quit)
[02:19:53] *** Joins: gehmehgeh (~user@user/gehmehgeh)
[02:21:53] *** Quits: wootehfoot (~wootehfoo@user/wootehfoot) (Read error: Connection reset by peer)
[02:22:37] *** Joins: falafel (~falafel@2603-8000-d800-688c-c489-b1e0-39de-1e29.res6.spectrum.com)
[02:23:04] *** Joins: alx741 (~alx741@157.100.93.160)
[02:24:17] *** Quits: xff0x (~xff0x@2001:1a81:5353:e600:1532:bc61:a470:451) (Ping timeout: 240 seconds)
[02:25:07] *** Joins: madjestic (~madjestic@88-159-247-120.fixed.kpn.net)
[02:25:21] *** Joins: xff0x (~xff0x@port-92-193-238-190.dynamic.as20676.net)
[02:25:55] *** Quits: __monty__ (~toonn@user/toonn) (Quit: leaving)
[02:26:37] *** Quits: falafel (~falafel@2603-8000-d800-688c-c489-b1e0-39de-1e29.res6.spectrum.com) (Ping timeout: 240 seconds)
[02:27:21] *** Quits: zer0bitz (~zer0bitz@dsl-hkibng32-54fbfb-173.dhcp.inet.fi) (Read error: Connection reset by peer)
[02:27:51] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Ping timeout: 276 seconds)
[02:31:31] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[02:32:37] *** Quits: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de) (Ping timeout: 240 seconds)
[02:35:02] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 240 seconds)
[02:36:32] *** Quits: slack1256 (~slack1256@191.125.99.206) (Ping timeout: 240 seconds)
[02:39:02] *** Joins: rond_ (~rond_@100.42.200.146.dyn.plus.net)
[02:39:29] *** Quits: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net) (Quit: WeeChat 3.3)
[02:41:12] *** Joins: wroathe (~wroathe@user/wroathe)
[02:42:00] *** Joins: pfurla-matrix (~pedrofurl@2001:470:69fc:105::1:51d7)
[02:44:42] *** Quits: mjs2600 (~mjs2600@c-24-91-3-49.hsd1.vt.comcast.net) (Quit: ZNC 1.8.2 - https://znc.in)
[02:46:42] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 268 seconds)
[02:46:42] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[02:47:16] *** Joins: mjs2600 (~mjs2600@c-24-91-3-49.hsd1.vt.comcast.net)
[02:48:07] *** Quits: aeka` (~aeka@2606:9580:100:c:8757:8ee:ec9c:991c) (Ping timeout: 250 seconds)
[02:49:47] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 268 seconds)
[02:52:51] *** Joins: aeka (~aeka@pool-100-4-208-71.albyny.fios.verizon.net)
[02:53:22] *** Quits: gehmehgeh (~user@user/gehmehgeh) (Quit: Leaving)
[02:59:58] *** Joins: AlexNoo_ (~AlexNoo@178.34.163.82)
[03:01:57] *** Quits: rond_ (~rond_@100.42.200.146.dyn.plus.net) (Quit: Client closed)
[03:02:07] *** Quits: AlexZenon (~alzenon@178.34.151.66) (Ping timeout: 268 seconds)
[03:02:47] *** Quits: Sofia1000 (~Sofia1000@122-59-18-247-adsl.sparkbb.co.nz) (Quit: Client closed)
[03:03:00] *** Quits: Alex_test (~al_test@178.34.151.66) (Ping timeout: 240 seconds)
[03:03:11] *** Quits: zava (~zava@ip5f5bdf0f.dynamic.kabel-deutschland.de) (Quit: WeeChat 3.3)
[03:03:59] *** Quits: AlexNoo (~AlexNoo@178.34.151.66) (Ping timeout: 268 seconds)
[03:04:42] *** Joins: alx741 (~alx741@157.100.93.160)
[03:05:34] *** Joins: AlexZenon (~alzenon@178.34.163.82)
[03:07:02] *** Joins: Alex_test (~al_test@178.34.163.82)
[03:09:02] *** Quits: jijimofo (~cmo@S010610561191f5d6.lb.shawcable.net) (Ping timeout: 240 seconds)
[03:10:30] *** Joins: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com)
[03:10:33] *** Joins: Sofia1000 (~Sofia1000@122-59-18-247-adsl.sparkbb.co.nz)
[03:13:17] *** Quits: machinedgod (~machinedg@173.231.123.211) (Ping timeout: 240 seconds)
[03:13:58] <Sofia1000> Thanks jackdk
[03:16:17] *** Joins: jijimofo (~cmo@S010610561191f5d6.lb.shawcable.net)
[03:16:25] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[03:17:01] *** Quits: Jing (~hedgehog@2604:a840:3::103e) (Remote host closed the connection)
[03:17:45] *** Joins: Jing (~hedgehog@2604:a840:3::103e)
[03:18:22] *** Quits: michalz (~michalz@185.246.204.104) (Remote host closed the connection)
[03:18:50] *** Joins: emf (~emf@2600:1700:841:cc20:184c:c9e0:41bd:a50)
[03:22:30] *** Joins: emf_ (~emf@2620:10d:c091:480::1:2a01)
[03:22:57] *** Quits: emf (~emf@2600:1700:841:cc20:184c:c9e0:41bd:a50) (Ping timeout: 240 seconds)
[03:24:46] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[03:28:35] *** Joins: max22- (~maxime@2a01cb08833598007b9c3a2aa19d2728.ipv6.abo.wanadoo.fr)
[03:33:03] *** Quits: Sofia1000 (~Sofia1000@122-59-18-247-adsl.sparkbb.co.nz) (Quit: Client closed)
[03:34:17] *** Joins: alx741 (~alx741@157.100.93.160)
[03:36:57] *** Quits: emf_ (~emf@2620:10d:c091:480::1:2a01) (Ping timeout: 240 seconds)
[03:37:01] *** Quits: Erutuon (~Erutuon@user/erutuon) (Ping timeout: 245 seconds)
[03:37:33] *** Joins: OscarZ (~oscarz@5d.57.36a9.ip4.static.sl-reverse.com)
[03:37:41] *** Quits: madjestic (~madjestic@88-159-247-120.fixed.kpn.net) (Ping timeout: 256 seconds)
[03:39:06] *** Joins: emf (~emf@2620:10d:c091:480::1:2a01)
[03:40:39] *** Joins: falafel (~falafel@2603-8000-d800-688c-c489-b1e0-39de-1e29.res6.spectrum.com)
[03:42:58] *** Quits: max22- (~maxime@2a01cb08833598007b9c3a2aa19d2728.ipv6.abo.wanadoo.fr) (Remote host closed the connection)
[03:44:21] *** Quits: Morrow (~quassel@bzq-110-168-31-106.red.bezeqint.net) (Remote host closed the connection)
[03:45:02] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Remote host closed the connection)
[03:46:11] *** Quits: martin02 (~silas@141.84.69.76) (Ping timeout: 250 seconds)
[03:48:19] *** Joins: FinnElija (~finn_elij@user/finn-elija/x-0085643)
[03:49:17] *** Quits: jkaye (~jkaye@2601:281:8300:7530:e699:4743:67a2:216e) (Ping timeout: 240 seconds)
[03:53:44] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[03:58:38] *** Joins: martin02 (~silas@141.84.69.76)
[04:00:20] *** Joins: cf2m (~cf2m@2804:14c:5bd7:8a9c::1001)
[04:01:45] *** Quits: johnw (~johnw@76-234-69-149.lightspeed.frokca.sbcglobal.net) (Quit: ZNC - http://znc.in)
[04:01:57] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 240 seconds)
[04:02:26] *** Quits: jgeerds (~jgeerds@55d4ac73.access.ecotel.net) (Ping timeout: 245 seconds)
[04:04:24] *** Parts: cf2m (~cf2m@2804:14c:5bd7:8a9c::1001) (Good Bye)
[04:07:22] *** Joins: Erutuon (~Erutuon@user/erutuon)
[04:10:52] *** Joins: deadmarshal (~deadmarsh@95.38.118.228)
[04:11:50] *** Joins: alx741 (~alx741@157.100.93.160)
[04:11:57] *** Quits: falafel (~falafel@2603-8000-d800-688c-c489-b1e0-39de-1e29.res6.spectrum.com) (Ping timeout: 240 seconds)
[04:13:34] *** Quits: Pickchea (~private@user/pickchea) (Quit: Leaving)
[04:14:41] *** Joins: mvk (~mvk@2607:fea8:5cdd:f000::745c)
[04:15:30] *** Quits: deadmarshal (~deadmarsh@95.38.118.228) (Ping timeout: 268 seconds)
[04:23:03] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[04:24:34] *** Joins: machinedgod (~machinedg@24.105.81.50)
[04:26:01] *** Joins: emf_ (~emf@2620:10d:c091:480::1:2a01)
[04:27:28] *** Joins: zebrag (~chris@user/zebrag)
[04:28:37] *** Quits: emf (~emf@2620:10d:c091:480::1:2a01) (Ping timeout: 240 seconds)
[04:32:08] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[04:32:17] *** Quits: emf_ (~emf@2620:10d:c091:480::1:2a01) (Ping timeout: 240 seconds)
[04:33:55] *** Joins: emf (~emf@2620:10d:c091:480::1:2a01)
[04:33:57] *** Quits: doyougnu (~doyougnu@c-73-25-202-122.hsd1.or.comcast.net) (Ping timeout: 240 seconds)
[04:36:05] *** Quits: machinedgod (~machinedg@24.105.81.50) (Remote host closed the connection)
[04:36:43] *** Quits: erisco (~erisco@d24-57-249-233.home.cgocable.net) (Quit: ZNC 1.8.2+cygwin2 - https://znc.in)
[04:36:58] *** Joins: machinedgod (~machinedg@24.105.81.50)
[04:37:32] *** Joins: erisco (~erisco@d24-57-249-233.home.cgocable.net)
[04:41:25] *** Joins: alx741 (~alx741@181.199.42.79)
[04:49:28] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[04:49:28] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[04:49:28] *** Joins: wroathe (~wroathe@user/wroathe)
[04:50:41] *** Quits: wroathe (~wroathe@user/wroathe) (Client Quit)
[04:59:37] *** Quits: emf (~emf@2620:10d:c091:480::1:2a01) (Ping timeout: 240 seconds)
[05:00:31] *** Quits: acidjnk (~acidjnk@p200300d0c7271e65d42c28944a29f404.dip0.t-ipconnect.de) (Ping timeout: 268 seconds)
[05:01:53] *** Quits: burnsidesLlama (~burnsides@dhcp168-016.wadham.ox.ac.uk) (Remote host closed the connection)
[05:02:03] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[05:02:04] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[05:02:04] *** Joins: wroathe (~wroathe@user/wroathe)
[05:05:57] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 240 seconds)
[05:12:35] *** Quits: hololeap (~hololeap@user/hololeap) (Quit: Bye)
[05:14:01] *** Quits: cheater (~Username@user/cheater) (Ping timeout: 256 seconds)
[05:14:34] <lechner> Hi, when parsing JSON with optional fields, am I better off using   Maybe   or should I create separate types? Thanks!
[05:15:33] <hpc> depends on what you want to express
[05:15:43] <hpc> maybe when a field is missing it just means to use some default value
[05:17:33] *** Joins: cheater (~Username@user/cheater)
[05:18:17] *** Quits: alx741 (~alx741@181.199.42.79) (Read error: Connection reset by peer)
[05:18:54] *** Joins: alx741 (~alx741@157.100.93.160)
[05:21:06] *** Joins: emf (~emf@2620:10d:c091:480::1:2a01)
[05:22:43] *** Quits: cheater (~Username@user/cheater) (Ping timeout: 268 seconds)
[05:23:16] *** Joins: cheater (~Username@user/cheater)
[05:27:17] *** Quits: emf (~emf@2620:10d:c091:480::1:2a01) (Ping timeout: 240 seconds)
[05:29:35] *** Quits: OscarZ (~oscarz@5d.57.36a9.ip4.static.sl-reverse.com) (Quit: Leaving)
[05:30:39] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[05:45:12] *** Quits: Tuplanolla (~Tuplanoll@91-159-68-169.elisa-laajakaista.fi) (Quit: Leaving.)
[05:45:46] *** Quits: jijimofo (~cmo@S010610561191f5d6.lb.shawcable.net) (Ping timeout: 245 seconds)
[05:45:57] *** Quits: neurocyte0132889 (~neurocyte@user/neurocyte) (Ping timeout: 240 seconds)
[05:46:53] *** Quits: werneta (~werneta@70-142-214-115.lightspeed.irvnca.sbcglobal.net) (Ping timeout: 256 seconds)
[05:47:02] *** Quits: epolanski (uid312403@id-312403.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[05:48:27] *** Joins: werneta (~werneta@70-142-214-115.lightspeed.irvnca.sbcglobal.net)
[05:48:33] *** Joins: alx741 (~alx741@157.100.93.160)
[05:51:06] *** Joins: harveypwca (~harveypwc@2601:246:c180:a570:3828:d8:e523:3f67)
[05:56:37] *** Quits: mmhat (~mmh@55d47b0f.access.ecotel.net) (Ping timeout: 240 seconds)
[06:01:37] *** Joins: dyeplexer (~dyeplexer@user/dyeplexer)
[06:01:48] *** Joins: emf (~emf@2620:10d:c091:480::1:2e5a)
[06:02:21] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Ping timeout: 276 seconds)
[06:02:32] *** Quits: bontaq (~user@ool-45779fe5.dyn.optonline.net) (Ping timeout: 240 seconds)
[06:02:40] *** Joins: ub (~Thunderbi@p200300ecdf0a5d68805dbf0fab6de770.dip0.t-ipconnect.de)
[06:04:02] *** Quits: ubert (~Thunderbi@p200300ecdf0a5db5805dbf0fab6de770.dip0.t-ipconnect.de) (Ping timeout: 268 seconds)
[06:04:02] *** ub is now known as ubert
[06:07:17] *** Quits: evocatus (~evocatus@62.182.78.42) (Ping timeout: 256 seconds)
[06:07:26] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Ping timeout: 245 seconds)
[06:07:57] *** Quits: emf (~emf@2620:10d:c091:480::1:2e5a) (Ping timeout: 240 seconds)
[06:08:41] <dsal> You can have other default values than Nothing as well.
[06:09:01] *** Joins: SummerSonw (~The_viole@203.77.49.232)
[06:11:07] *** Joins: mmhat (~mmh@55d47734.access.ecotel.net)
[06:12:51] *** Quits: zebrag (~chris@user/zebrag) (Quit: Konversation terminated!)
[06:18:17] *** Quits: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Ping timeout: 240 seconds)
[06:23:13] *** Quits: mmhat (~mmh@55d47734.access.ecotel.net) (Quit: WeeChat 3.3)
[06:27:17] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.3)
[06:29:13] *** Quits: pfurla (~pfurla@172.58.27.44) (Read error: Connection reset by peer)
[06:29:17] *** Quits: xff0x (~xff0x@port-92-193-238-190.dynamic.as20676.net) (Ping timeout: 240 seconds)
[06:29:19] *** Joins: pfurla_ (~pfurla@2804:18:5822:b7a4:5d55:ee0c:b89:ab0a)
[06:31:33] *** Joins: xff0x (~xff0x@2001:1a81:5394:f900:dd60:fd82:cbed:c232)
[06:36:03] *** Joins: finn_elija (~finn_elij@user/finn-elija/x-0085643)
[06:36:03] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Killed (NickServ (Forcing logout FinnElija -> finn_elija)))
[06:36:03] *** finn_elija is now known as FinnElija
[06:37:59] *** Joins: x_kuru (xkuru@user/xkuru)
[06:39:01] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[06:41:17] *** Quits: xkuru (~xkuru@user/xkuru) (Ping timeout: 256 seconds)
[06:41:46] *** Joins: doyougnu (~doyougnu@c-73-25-202-122.hsd1.or.comcast.net)
[06:52:02] *** Quits: td_ (~td@94.134.91.242) (Ping timeout: 240 seconds)
[06:53:58] *** Joins: td_ (~td@94.134.91.199)
[06:54:43] *** Joins: x_kuru_ (~xkuru@user/xkuru)
[06:57:02] *** Joins: alx741 (~alx741@157.100.93.160)
[06:57:09] *** Quits: machinedgod (~machinedg@24.105.81.50) (Ping timeout: 256 seconds)
[06:58:55] *** Quits: x_kuru (xkuru@user/xkuru) (Ping timeout: 268 seconds)
[07:01:31] *** Joins: hololeap (~hololeap@user/hololeap)
[07:02:52] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[07:05:52] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[07:11:53] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[07:14:04] *** Quits: hololeap (~hololeap@user/hololeap) (Quit: Bye)
[07:15:45] *** Joins: hololeap (~hololeap@user/hololeap)
[07:18:06] *** Quits: erisco (~erisco@d24-57-249-233.home.cgocable.net) (Quit: ZNC 1.8.2+cygwin2 - https://znc.in)
[07:18:52] *** Joins: erisco (~erisco@d24-57-249-233.home.cgocable.net)
[07:19:56] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[07:19:57] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[07:19:57] *** Joins: wroathe (~wroathe@user/wroathe)
[07:20:57] *** Quits: sourcemage (~sourcemag@c-24-14-124-168.hsd1.il.comcast.net) (Ping timeout: 256 seconds)
[07:21:06] *** Quits: rembo10 (~rembo10@remulis.com) (Quit: ZNC 1.8.2 - https://znc.in)
[07:21:17] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 240 seconds)
[07:22:09] *** Joins: rembo10 (~rembo10@remulis.com)
[07:23:40] *** Joins: alx741 (~alx741@157.100.93.160)
[07:29:33] *** Quits: tromp (~textual@dhcp-077-249-230-040.chello.nl) (Quit: My iMac has gone to sleep. ZZZzzzâ€¦)
[07:37:02] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 240 seconds)
[07:39:06] <glguy> I imagine things just aren't there yet, but I wanted to check that this is what's expected and not just that my installation is messed up. I tried using ghc on arm mac and couldn't install ghcid, doctest fell over on a file that used UTF-8, and hls only reported supporting up to 8.10
[07:39:13] <glguy> anyone had more luck with arm mac ghc?
[07:40:54] <xerox> I don't have arm specific problems nowadays anymore
[07:41:33] <glguy> Are you able to install ghcid on it, then?
[07:42:04] <xerox> there is one of its dependencies that is lagging behind because the maintainer is not to be found
[07:42:27] <xerox> so I had to build it manually with a vendored version, with the small fix
[07:43:02] <glguy> HLS?
[07:43:15] <xerox> HLS I don't use sorry
[07:43:46] <glguy> I lean more on ghcid than HLS, so if that one's fixable I might be ok
[07:44:02] <glguy> gotta figure out which computer I can use for AoC this weekend :)
[07:44:45] <xerox> I ended up compiling master a month ago with the calling convention fix for ioctl to have ghci work, sticking with that for now :D
[07:45:05] <xerox> there it is: https://github.com/biegunka/terminal-size/pull/16
[07:48:14] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[07:49:26] <glguy> Which ghc version does that work with?
[07:49:26] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[07:49:58] <xerox> mine reports 9.3.20211020
[07:50:30] <xerox> ah but did I compile it with this, or with another... maybe I can figure that out
[07:50:49] <xerox> I compiled it with ghc-8.10.7 from ghcup
[07:50:49] <glguy> 9.0.1 and 9.2.1 generate different errors each for me :)
[07:51:19] <glguy> OK, 8.10.7 is working better, thanks
[07:51:26] <xerox> excellent
[07:52:18] <glguy> Are you using 9.3 because 9.2.1 is broken in an interesting way or just because 9.3 is newer?
[07:53:05] <xerox> it was the first branch that I was able to compile successfully, with the ioctl fix, so I just stuck with it, I had some problems compiling the release branch/tags that I can't remember right now
[07:53:32] <glguy> What's the ioctl fix?
[07:53:35] <xerox> so I guess the former, the situation might have changed tho
[07:53:58] <glguy> I see that this PR mentions ioctl, but is that also related to picking a GHC in general?
[07:54:10] <xerox> ghci had broken line editing, because a ioctl inside ghc was done incompatibly just like the terminal-size issue above
[07:57:13] *** Joins: lavaman (~lavaman@98.38.249.169)
[07:58:26] <xerox> it was libraries/haskeline/System/Console/Haskeline/Backend/Posix.hsc 66:foreign import capi "sys/ioctl.h ioctl" ioctl
[07:58:40] <xerox> so any ghc with this fix ("capi") will not have broken ghci line editing
[07:59:06] <xerox> there is also a workaround for it if you can't get such a ghc, if I can find it again...
[08:00:44] <xerox> here https://gitlab.haskell.org/ghc/ghc/-/issues/20079#note_364118
[08:03:13] *** Joins: notzmv (~zmv@user/notzmv)
[08:03:24] <xerox> https://www.haskell.org/ghc/blog/20210709-capi-usage.html
[08:04:17] *** Quits: Akiva (~Akiva@user/Akiva) (Ping timeout: 240 seconds)
[08:04:46] *** Quits: curiousgay (~curiousga@77-120-141-90.kha.volia.net) (Quit: Leaving)
[08:07:08] *** Joins: alx741 (~alx741@157.100.93.160)
[08:08:25] <dsal> glguy: I've been running an M1 for a while.  nix+stack.  It's a bit of a balancing act, but mostly works.
[08:08:41] <dsal> My mac's in the shop right now, though.  Wife dropped a spoon on the screen which is apparently enough to completely disable it.
[08:11:45] <hololeap> spwned
[08:12:24] *** Joins: deadmarshal (~deadmarsh@95.38.113.39)
[08:13:56] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Read error: Connection reset by peer)
[08:14:56] <dsal> haha.  :(
[08:17:03] *** Quits: deadmarshal (~deadmarsh@95.38.113.39) (Ping timeout: 256 seconds)
[08:18:20] <hololeap> :(
[08:18:21] *** Joins: off^ (~off@64.253.22.77)
[08:20:25] <EvanR> There Is No Spoon *myth busted*
[08:20:59] *** Joins: shapr (~user@12.5.211.156)
[08:22:07] <sm> woah. Noted, keep spouse and cutlery away from mac
[08:22:31] <int-e> @pl \((a,b),(c,d)) -> ((a,c),(b,d))
[08:22:32] <lambdabot> uncurry (uncurry (flip flip snd . (ap .) . flip flip fst . ((.) .) . (. (,)) . flip . (((.) . (,)) .) . (,)))
[08:23:07] <dsal> I was sitting by the fire.  She was standing over making (me) a drink.  Spoon fell and hit just the edge of my screen.  Doesn't take much to make expensive worthless.  Only $99 to get it fixed.  But also a lot of time.
[08:24:06] <monochrom> You are trying to ship your spouse, a spoon, and an M1 Mac across the river. The boat can only hold two passengers...
[08:25:28] <int-e> Can I throw the spoon all the way across?
[08:28:57] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 268 seconds)
[08:29:17] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[08:29:36] <monochrom> Not if the M1 Mac is also on the other side, bearing the risk of getting hit by the spoon.
[08:33:43] <hololeap> lol
[08:36:57] *** Quits: dtman34 (~dtman34@c-73-62-246-247.hsd1.mn.comcast.net) (Ping timeout: 240 seconds)
[08:38:58] <hololeap> if I have (a -> Logic b) and [a], and I want to search each problem space enumerated by [a], is asum from Data.Foldable what I need?
[08:39:16] *** Quits: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[08:39:20] <hololeap> assuming I want a depth-first search
[08:39:34] *** Joins: dtman34 (~dtman34@c-73-62-246-247.hsd1.mn.comcast.net)
[08:42:37] <hololeap> e.g. (\f xs -> asum (f <$> xs)) :: (a -> Logic b) -> [a] -> Logic b
[08:44:51] <hololeap> I suppose that only makes sense if I'm looking for a single result, otherwise it shouldn't stop on the first successful branch, but keep gathering results instead
[08:45:39] <hololeap> then again a depth-first search implies a single result
[08:46:29] *** Joins: deadmarshal (~deadmarsh@95.38.113.39)
[08:47:38] *** Joins: alx741 (~alx741@157.100.93.160)
[08:48:55] *** Joins: selkirk (~selkirk@182.69.202.102)
[08:54:14] *** Quits: shapr (~user@12.5.211.156) (Ping timeout: 268 seconds)
[08:55:45] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[08:57:13] *** Quits: x_kuru_ (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[09:09:08] <hololeap> >>> observeAll ((pure 'a' `interleave` pure 'b' `interleave` pure 'c') `interleave` (pure 'd' `interleave` pure 'e') `interleave` pure 'f')
[09:09:15] <hololeap> "afdceb"
[09:09:42] <hololeap> so it starts with the front, then goes to the back and works to the left?
[09:12:16] *** Joins: samebchase (~samebchas@51.15.68.182)
[09:14:15] *** Joins: alx741 (~alx741@157.100.93.160)
[09:22:54] *** Quits: hgolden (~hgolden2@cpe-172-114-81-123.socal.res.rr.com) (Remote host closed the connection)
[09:22:54] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[09:24:54] *** Quits: monochrom (trebla@216.138.220.146) (Quit: NO CARRIER)
[09:25:10] <hololeap> >>> observeAll $ foldl interleave mzero (pure <$> "abcdefg")
[09:25:11] <hololeap> "agfedcb"
[09:25:14] <hololeap> seems like it
[09:25:33] *** Joins: hgolden (~hgolden2@cpe-172-114-81-123.socal.res.rr.com)
[09:33:22] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[09:37:51] *** Quits: mikoto-chan (~mikoto-ch@esm-84-240-99-143.netplaza.fi) (Quit: mikoto-chan)
[09:40:52] *** Joins: alx741 (~alx741@157.100.93.160)
[09:43:02] *** Joins: monochrom (trebla@216.138.220.146)
[09:43:45] *** Quits: Sgeo (~Sgeo@user/sgeo) (Read error: Connection reset by peer)
[09:44:08] *** Joins: Sgeo (~Sgeo@user/sgeo)
[09:44:26] *** Joins: mikoto-chan (~mikoto-ch@esm-84-240-99-143.netplaza.fi)
[09:48:57] *** Quits: deadmarshal (~deadmarsh@95.38.113.39) (Ping timeout: 240 seconds)
[09:51:59] *** Joins: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de)
[09:53:41] <hololeap> if you use foldr instead, it comes out as "abcdefg" ... weird
[09:53:41] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[09:56:26] *** Joins: johnw (~johnw@2607:f6f0:3004:1:c8b4:50ff:fef8:6bf0)
[09:58:07] *** Quits: EvanR (~evan@user/evanr) (Remote host closed the connection)
[10:01:03] *** Joins: coot (~coot@89-64-85-93.dynamic.chello.pl)
[10:03:45] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[10:06:32] *** Joins: deadmarshal (~deadmarsh@95.38.113.39)
[10:07:33] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[10:11:22] *** Joins: alx741 (~alx741@157.100.93.160)
[10:17:22] * int-e sighs
[10:17:29] <int-e> ...reading is so hard...
[10:18:52] *** Joins: wehttam (~wehttam@159.196.24.74)
[10:27:27] *** Joins: EvanR (~evan@user/evanr)
[10:30:21] <EvanR> i/o sync errors causing my linux to freeze and crash in the middle of my almost getting tonights answer did not help
[10:34:16] *** Joins: lavaman (~lavaman@98.38.249.169)
[10:35:57] *** Quits: mvk (~mvk@2607:fea8:5cdd:f000::745c) (Ping timeout: 240 seconds)
[10:38:37] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 240 seconds)
[10:45:13] *** Quits: img (~img@user/img) (Quit: ZNC 1.8.2 - https://znc.in)
[10:45:13] *** Quits: EvanR (~evan@user/evanr) (Remote host closed the connection)
[10:45:30] *** Joins: img (~img@user/img)
[10:46:34] *** Quits: wehttam (~wehttam@159.196.24.74) ()
[10:46:48] *** Joins: EvanR (~evan@user/evanr)
[10:50:37] *** Quits: SummerSonw (~The_viole@203.77.49.232) (Ping timeout: 240 seconds)
[10:56:02] *** Joins: Sobhan (~Sobhan@modemcable039.128-131-66.mc.videotron.ca)
[10:56:18] <Sobhan> Hi
[10:56:37] *** Quits: Erutuon (~Erutuon@user/erutuon) (Ping timeout: 240 seconds)
[10:57:59] *** Quits: deadmarshal (~deadmarsh@95.38.113.39) (Ping timeout: 256 seconds)
[10:58:24] *** Joins: deadmarshal (~deadmarsh@95.38.113.39)
[10:58:59] <Sobhan> i'm trying to short circuit a calculation in ST monad (STUArray), i want my function to run until it hits a certain condition, right now i use https://dpaste.com/E6CRB8LKR the trace shows that it reaches the solution but it doesn't stop. it's like it's stop in a 1 : goto 1 type of loop (no allocations)
[10:59:23] <Sobhan> (yes it's for advent of code)
[10:59:45] *** Quits: natechan (~nate@108-233-125-227.lightspeed.sntcca.sbcglobal.net) (Quit: WeeChat 2.9)
[10:59:49] <Sobhan> also `it :: STUArray s (Int, Int) Int -> ST s Int`
[11:00:21] <dsal> Sobhan: It's not clear why you think that should stop.
[11:00:21] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[11:01:00] <Sobhan> i think i'm not getting the state monad but in the state less version that would short circuit
[11:01:09] <Sobhan> dsal
[11:01:16] *** Quits: gdd1 (~gdd@129.199.146.230) (Ping timeout: 268 seconds)
[11:01:48] <Sobhan> i'm clearly not "getting" the ST monad
[11:02:19] *** Joins: takuan (~takuan@178-116-218-225.access.telenet.be)
[11:02:20] <Sobhan> `dd _ _ b a = return b` doesn't short as i had hopped it would
[11:02:23] <dsal> It's not the ST, it's the fold over an infinite list.
[11:02:32] <dsal> `return` is a confusing term.
[11:02:37] <dsal> I'd just never use it.
[11:02:46] <Sobhan> but fold can short, right?
[11:03:17] <dsal> foldr can in lists if it doesn't use the accumulator.
[11:03:44] *** Quits: puke (~puke@user/puke) (Quit: puke)
[11:04:06] <EvanR> foldl can't short circuit, foldlM even less likely
[11:04:34] <Sobhan> huh, what would be a good way to short then?
[11:04:44] <EvanR> in this case, it can't run the ST action until it knows what you want to do with every element
[11:05:24] <Sobhan> that makes sense
[11:06:02] <Sobhan> i think i got it. i have to move the ST inside my iteration
[11:06:13] <EvanR> there's takeWhileM ...
[11:06:45] <Sobhan> would that work with ST?
[11:06:52] <EvanR> :t takeWhileM
[11:06:53] <lambdabot> error:
[11:06:53] <lambdabot>     â€¢ Variable not in scope: takeWhileM
[11:06:53] <lambdabot>     â€¢ Perhaps you meant one of these:
[11:07:08] <Sobhan> the one from monad-loops Control.Monad.Loops
[11:07:10] <Sobhan> right?
[11:07:55] *** Joins: lavaman (~lavaman@98.38.249.169)
[11:08:12] <EvanR> to short circuit to a solution before delving into anything else, I'd probably start with a explicit recursive ST action
[11:08:31] <EvanR> so you decide to recurse or quit at any step
[11:11:45] *** Quits: lemonsnicks (~lemonsnic@cpc159519-perr18-2-0-cust114.19-1.cable.virginm.net) (Ping timeout: 268 seconds)
[11:11:57] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 240 seconds)
[11:11:57] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[11:12:43] *** Joins: lemonsnicks (~lemonsnic@cpc159519-perr18-2-0-cust114.19-1.cable.virginm.net)
[11:13:03] <Square> This may be stupid question. But are both Data.ByteString and Data.Text needed? Add a Lazy variant to both. Do both fill meaningful purposes? I find one often tries to adopt strings between packages. Oh, then we have String too.
[11:13:15] <dsal> They don't do the same thing.
[11:13:41] *** Joins: sofviic[m] (~sofviicma@2001:470:69fc:105::1:51fd)
[11:13:43] <EvanR> bytestring is pretty straight forward, it's packed vectors of Word8
[11:14:10] <EvanR> unlike String and Text which deal with unicode
[11:14:24] <Square> Gotcha. 
[11:14:45] <EvanR> many languages get things mixed up
[11:15:12] <EvanR> like, presume a string encoding, ... or supposedly did then change their mind and add encodings
[11:15:52] <Square> Ok, that makes sense. 
[11:15:58] <EvanR> in the end string and array of word8 should be separate
[11:17:14] <Square> Thanks for the leason, i never took the time to really understand their differences. Hard to get hyped over strings. =D
[11:18:58] *** Joins: alx741 (~alx741@157.100.93.160)
[11:19:35] <EvanR> picking the right types is bread and butter in haskell... and then turns out that's necessary in every language
[11:20:01] <EvanR> you just don't always get any help with it lol
[11:20:39] *** Joins: Feuermagier_ (~Feuermagi@138.199.36.133)
[11:23:28] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Ping timeout: 268 seconds)
[11:23:52] *** Joins: tromp (~textual@dhcp-077-249-230-040.chello.nl)
[11:26:15] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[11:30:37] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[11:32:14] *** Quits: qrpnxz (~qrpnxz@user/qrpnxz) (Ping timeout: 260 seconds)
[11:38:18] *** Quits: selkirk (~selkirk@182.69.202.102) (Quit: leaving)
[11:43:06] *** Joins: alx741 (~alx741@157.100.93.160)
[11:45:14] <Sobhan> how can i have a function that returns both an STArray and a value that it depends on Array. i can't figure out how to use runST and run STUArray at the same time (either on a ST s (a, b) or (ST s a, STUArray ...))
[11:46:25] <Sobhan> type A s a = STUArray s (Int, Int) a
[11:46:25] <Sobhan> it__ :: UArray (Int, Int) Int -> (Int, A s Int)
[11:46:26] <Sobhan> it__ a1 = bimap runST runSTUArray $ do {arr <- (thaw a1 :: ST s (A s Int)); i <- readArray arr (1, 1); (i, arr)}
[11:46:29] <Sobhan> so like something like this
[11:51:03] <EvanR> I'm guessing you have to use runST and do what runSTUArray does yourself in the process of returning
[11:51:31] <EvanR> i.e. unsafeFreeze
[11:53:31] *** Quits: jespada (~jespada@87.74.33.157) (Ping timeout: 256 seconds)
[11:53:32] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[11:54:17] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:21ba:a382:6b6:54c4)
[11:54:18] <Sobhan> i did actually try that but i get `â€¢ Couldn't match type â€˜a1â€™ with â€˜(Int, A s Int)â€™
[11:54:19] <Sobhan> Â Â Â  because type variable â€˜sâ€™ would escape its scope`
[11:55:04] <Sobhan> it__ a1 = runST $ do {arr <- (thaw a1 :: ST s (A s Int)); i <- readArray arr (1, 1); return (i, arr)}
[11:55:28] <EvanR> thaw?
[11:55:43] <Sobhan> thaw :: forall i (a :: * -> * -> *) e (b :: * -> * -> *) (m :: * -> *). (Ix i, IArray a e, MArray b e m) => a i e -> m (b i e)
[11:55:50] <Sobhan> ugh
[11:55:56] <Sobhan> it converts an UArray to a STUArray
[11:55:58] <EvanR> I must be thinking backwards what you want 
[11:56:16] *** Joins: jespada (~jespada@87.74.33.157)
[11:56:45] <EvanR> in ST the mutable arrays you use are supposed to contained within that ST action
[11:57:33] <EvanR> I thought you wanted to return one frozen... instead it seems like you want to get a mutable array from elsewhere?
[11:57:57] <Sobhan> i want the 1,1 index (or something like that & the array (frozen)
[11:58:03] *** Quits: jtomas (~jtomas@153.red-83-53-252.dynamicip.rima-tde.net) (Remote host closed the connection)
[11:58:14] <Sobhan> i'm returning the number of operations on the array
[11:58:18] <Sobhan> plus the new array
[11:58:24] <EvanR> I... don't see the point of ST here
[11:58:55] <EvanR> you're messing with outside arrays within ST, and that's it
[12:00:03] <Sobhan> this is sample code, i want to take a an IArray, modify it and report the number of edits and the results. i kinda need an implementation of a MArray. i was thinking of not using IO
[12:00:10] <Sobhan> so i ended up with ST
[12:00:17] <EvanR> make a new array, operating on it, maybe read some immutable outside data, return the new array, that would make sense
[12:00:48] <Sobhan> well i'm doing operations on it, just not in the sample code
[12:01:43] <Sobhan> i have to choose between Data.Array.IO, Data.Array.ST, and Data.Array.Storable.
[12:01:45] <Sobhan> right?
[12:02:02] <EvanR> I mainly use Data.Vector
[12:02:08] <Sobhan> assuming i *NEED* mutable arrays
[12:03:02] *** Quits: euandreh (~euandreh@2804:14c:33:9fe5:1e71:dc8c:d2fa:3d7e) (Ping timeout: 252 seconds)
[12:03:07] <Sobhan> i need 2d arrays
[12:03:14] *** Joins: Erutuon (~Erutuon@user/erutuon)
[12:04:47] *** Joins: euandreh (~euandreh@2804:14c:33:9fe5:995c:e86e:470c:8a37)
[12:05:53] <EvanR> yeah I also use vector for that xD
[12:07:26] <dsal> a 2D array is just a 1D array with Ix.
[12:07:38] <dsal> You can have arbitrary dimensions where some aren't even numerical if you want.
[12:07:52] <dsal> (that's all you're doing with Arrays)
[12:08:58] <EvanR> my other array uses real number indexes
[12:10:08] <dsal> Numbers aren't real.
[12:10:20] <Sobhan> but i'll be back to using ST, right?
[12:10:25] *** Joins: alx741 (~alx741@157.100.93.160)
[12:10:26] <Sobhan> modify :: (forall s. MVector s a -> ST s ()) -> Vector a -> Vector a
[12:10:51] *** Quits: Jing (~hedgehog@2604:a840:3::103e) (Remote host closed the connection)
[12:11:10] <Sobhan> i'll still be at point zero until i figure out how to return multiple things from ST
[12:11:21] <Sobhan> oops, sorry for the ping
[12:11:28] *** Joins: Jing (~hedgehog@125.105.142.62)
[12:12:07] <EvanR> I'm just not sure what you're gaining from ST here
[12:12:16] <Sobhan> over IO?
[12:12:34] <Sobhan> i want to put my function in a pure context
[12:12:46] <dsal> Do you have something working that's not mutalbe?
[12:13:09] <Sobhan> ?
[12:13:19] <int-e> Sobhan: you have to manually freeze arrays if you want to return more than one
[12:13:45] *** Joins: _ht (~quassel@82-169-194-8.biz.kpn.net)
[12:14:00] <int-e> @src runSTArray
[12:14:00] <lambdabot> Source not found. :(
[12:14:05] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:178:131c:7a0c:e758) (Remote host closed the connection)
[12:14:09] <int-e> pity...  runSTArray st = runST (st >>= unsafeFreezeSTArray)
[12:14:27] <EvanR> yes... like I said xD
[12:14:38] <int-e> I don't know how that works for vectors, do they have a freeze operation as well?
[12:14:42] <EvanR> you'll need to freeze, you only have a thaw there
[12:14:51] <EvanR> yeah they have freeze and thaw too
[12:15:17] <int-e> (I have used `vector` a little, but apparently never with explicit ST.)
[12:17:33] *** Joins: acidjnk (~acidjnk@p200300d0c7271e65d42c28944a29f404.dip0.t-ipconnect.de)
[12:18:46] <EvanR> actually embedding an array mutating program within a pure function with ST is really cool, I just never ran into a case where it would be worth it
[12:18:57] <Sobhan> int-e thanks, i finally figured it out `it__ ::Â  UArray (Int, Int) Int -> (Int,Â  UArray (Int, Int) Int)
[12:18:58] <Sobhan> it__ a1 = runST $ do {arr <- (thaw a1 :: ST s (STUArray s (Int, Int) Int)); i <- readArray arr (1, 1); farr <- freeze arr; return (i, farr)}`
[12:21:02] <int-e> Sobhan: yep. (you /can/ use unsafeFreeze there and avoid a copy; the promise you're making is that you don't touch the array afterwards)
[12:21:12] *** Joins: SummerSonw (~The_viole@203.77.49.232)
[12:21:35] <Sobhan> i don't think i can keep a promise XD
[12:21:56] <int-e> Sobhan: Oh, sorry. "afterwards" is scoped by the ST action
[12:22:06] <EvanR> since you're returning from the ST action... I don't see how you could touch it after
[12:22:10] <Sobhan> i got that...
[12:22:19] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[12:22:35] <Sobhan> by forgetting what unsafeFreeze tomorrow morning...
[12:23:11] <EvanR> don't touch it between freeze and returning?
[12:23:25] *** Quits: coot (~coot@89-64-85-93.dynamic.chello.pl) (Quit: coot)
[12:23:25] <EvanR> unsafeFreeze
[12:24:35] <Sobhan> it was a joke...
[12:24:43] <int-e> Sobhan: I mainly bring it up because unlike most `unsafe` functions, the promise here is completely local in scope, so it's a pretty sane optimization.
[12:25:39] <Sobhan> i'm guessing that the unsafe thawt isn't going to work tho
[12:25:42] <int-e> (In contrast, `unsafeThaw` requires you to keep the constraint in mind for the rest of the program.)
[12:27:06] <int-e> (The constraint being that the immutable array you're thawing is not used elsewhere.)
[12:30:21] <nshepperd2> Sobhan: fun fact, vector actually has a function for doing that sort of thing that I added!
[12:31:14] <nshepperd2> V.createT (do mut <- V.thaw xs; a <- M.read mut 0; return (a, mut))
[12:32:17] <nshepperd2> (createT does 'traverse unsafeFreeze' over any traversable container of mutable vectors that you return)
[12:33:39] *** Quits: Sobhan (~Sobhan@modemcable039.128-131-66.mc.videotron.ca) (Ping timeout: 256 seconds)
[12:33:57] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 240 seconds)
[12:38:37] *** Quits: xff0x (~xff0x@2001:1a81:5394:f900:dd60:fd82:cbed:c232) (Ping timeout: 240 seconds)
[12:38:37] *** Joins: alx741 (~alx741@181.199.42.79)
[12:39:44] *** Joins: xff0x (~xff0x@2001:1a81:5394:f900:9067:7a5d:460c:e4bd)
[12:41:49] *** Joins: madjestic (~madjestic@88-159-247-120.fixed.kpn.net)
[12:46:19] *** Joins: gehmehgeh (~user@user/gehmehgeh)
[12:47:20] <c_wraith> oh, only traversables?  And here I was thinking you were playing fancy tricks with Data
[12:47:36] *** Joins: allbery_b (~geekosaur@xmonad/geekosaur)
[12:47:36] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Killed (NickServ (GHOST command used by allbery_b)))
[12:47:39] *** allbery_b is now known as geekosaur
[12:54:02] *** Quits: xff0x (~xff0x@2001:1a81:5394:f900:9067:7a5d:460c:e4bd) (Ping timeout: 240 seconds)
[12:54:54] *** Joins: xff0x (~xff0x@port-92-195-110-215.dynamic.as20676.net)
[12:55:05] *** Joins: PVPANTHONY (~The_viole@203.77.49.232)
[12:56:09] *** Joins: Jing_ (~hedgehog@2604:a840:3::103e)
[12:56:20] *** Quits: econo (uid147250@user/econo) (Quit: Connection closed for inactivity)
[12:57:17] *** Quits: cyphase (~cyphase@user/cyphase) (Ping timeout: 240 seconds)
[12:57:32] *** Quits: Jing (~hedgehog@125.105.142.62) (Read error: Connection reset by peer)
[12:57:57] *** Quits: SummerSonw (~The_viole@203.77.49.232) (Ping timeout: 240 seconds)
[12:58:05] *** Joins: ProfSimm (~ProfSimm@87.227.196.109)
[12:58:34] *** Parts: jakalx (~jakalx@base.jakalx.net) ()
[12:58:34] *** Joins: cyphase (~cyphase@user/cyphase)
[13:00:31] *** Joins: jakalx (~jakalx@base.jakalx.net)
[13:02:24] *** Quits: alx741 (~alx741@181.199.42.79) (Read error: Connection reset by peer)
[13:02:46] *** Joins: coot (~coot@89-64-85-93.dynamic.chello.pl)
[13:03:07] *** Joins: alx741 (~alx741@157.100.93.160)
[13:14:36] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[13:18:37] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Ping timeout: 240 seconds)
[13:22:24] *** Quits: mikoto-chan (~mikoto-ch@esm-84-240-99-143.netplaza.fi) (Quit: mikoto-chan)
[13:36:00] *** Joins: deadmarshal_ (~deadmarsh@95.38.113.39)
[13:36:37] *** Quits: deadmarshal (~deadmarsh@95.38.113.39) (Ping timeout: 240 seconds)
[13:38:48] *** Quits: tzh (~tzh@c-24-21-73-154.hsd1.or.comcast.net) (Quit: zzz)
[13:39:27] *** Joins: max22- (~maxime@lfbn-ren-1-1026-62.w92-139.abo.wanadoo.fr)
[13:44:49] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[13:47:12] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[13:47:37] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 240 seconds)
[13:48:29] *** Lord_of_Life_ is now known as Lord_of_Life
[13:53:37] *** Quits: pfurla_ (~pfurla@2804:18:5822:b7a4:5d55:ee0c:b89:ab0a) (Ping timeout: 240 seconds)
[13:54:01] *** Joins: pfurla (~pfurla@2804:18:5822:b7a4:6913:9198:2dcc:b6a5)
[13:54:06] *** Parts: jakalx (~jakalx@base.jakalx.net) ()
[13:55:38] *** Joins: Tuplanolla (~Tuplanoll@91-159-68-169.elisa-laajakaista.fi)
[13:59:28] *** Quits: coot (~coot@89-64-85-93.dynamic.chello.pl) (Quit: coot)
[14:01:30] *** Joins: niemand (~niemand@p2e52fab3.dip0.t-ipconnect.de)
[14:02:22] *** Joins: jakalx (~jakalx@base.jakalx.net)
[14:02:35] *** Joins: alx741 (~alx741@157.100.93.160)
[14:03:33] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[14:11:47] *** Quits: deadmarshal_ (~deadmarsh@95.38.113.39) (Ping timeout: 256 seconds)
[14:11:48] *** Quits: madjestic (~madjestic@88-159-247-120.fixed.kpn.net) (Ping timeout: 256 seconds)
[14:14:06] *** Joins: Digit (~user@user/digit)
[14:17:21] *** Quits: niemand (~niemand@p2e52fab3.dip0.t-ipconnect.de) (Quit: Connection closed)
[14:19:36] <nshepperd> hehe no
[14:22:33] *** Quits: PVPANTHONY (~The_viole@203.77.49.232) (Ping timeout: 256 seconds)
[14:23:16] *** Quits: Erutuon (~Erutuon@user/erutuon) (Ping timeout: 245 seconds)
[14:25:48] *** Joins: deadmarshal (~deadmarsh@95.38.113.39)
[14:27:59] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[14:30:39] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[14:36:59] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (Read error: Connection reset by peer)
[14:36:59] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[14:37:11] *** Joins: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi)
[14:39:17] *** Quits: deadmarshal (~deadmarsh@95.38.113.39) (Ping timeout: 240 seconds)
[14:47:43] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Quit: WeeChat 3.3)
[14:47:44] *** Joins: zer0bitz (~zer0bitz@dsl-hkibng32-54fbfb-173.dhcp.inet.fi)
[14:51:07] *** Quits: hugo (znc@verdigris.lysator.liu.se) (Quit: ZNC 1.8.2 - https://znc.in)
[14:53:04] *** Joins: hugo (znc@verdigris.lysator.liu.se)
[14:53:15] *** Joins: deadmarshal (~deadmarsh@95.38.113.39)
[14:55:09] *** Joins: alx741 (~alx741@157.100.93.160)
[14:55:52] *** Joins: mikoto-chan (~mikoto-ch@2a00:1d50:3:0:d35c:a450:4ccc:94ac)
[14:58:27] *** Quits: off^ (~off@64.253.22.77) (Remote host closed the connection)
[14:58:49] *** Joins: jgeerds (~jgeerds@55d4ac73.access.ecotel.net)
[15:01:09] *** Quits: cheater (~Username@user/cheater) (Ping timeout: 268 seconds)
[15:04:31] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 245 seconds)
[15:07:27] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[15:09:01] *** AlexNoo_ is now known as AlexNoo
[15:09:40] *** Joins: lavaman (~lavaman@98.38.249.169)
[15:15:16] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 256 seconds)
[15:15:21] *** Quits: Sgeo (~Sgeo@user/sgeo) (Read error: Connection reset by peer)
[15:16:33] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:178:131c:7a0c:e758)
[15:18:25] *** Joins: __monty__ (~toonn@user/toonn)
[15:20:37] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:178:131c:7a0c:e758) (Ping timeout: 240 seconds)
[15:23:17] *** Joins: PVPANTHONY (~The_viole@203.77.49.232)
[15:25:39] *** Joins: alx741 (~alx741@157.100.93.160)
[15:28:10] <Digit> hi.  nyxt has me inspired to ask along the lines of...   what's "the" web browser written/configured in haskell?    
[15:29:43] *** Joins: deadmarshal_ (~deadmarsh@95.38.113.39)
[15:30:57] *** Quits: deadmarshal (~deadmarsh@95.38.113.39) (Read error: Connection reset by peer)
[15:40:39] *** Joins: zincy (~tom@2a00:23c8:970c:4801:5b6a:e81b:79dc:f684)
[15:40:47] *** Quits: tom__ (~tom@host86-151-99-97.range86-151.btcentralplus.com) (Remote host closed the connection)
[15:40:47] *** Quits: tom_ (~tom@host86-151-99-97.range86-151.btcentralplus.com) (Remote host closed the connection)
[15:40:54] *** Joins: tom__ (~tom@2a00:23c8:970c:4801:5b6a:e81b:79dc:f684)
[15:44:44] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[15:45:37] *** Quits: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de) (Ping timeout: 240 seconds)
[15:45:58] *** Joins: rito_ (~rito_gh@45.112.243.172)
[15:46:56] *** Joins: madjestic (~madjestic@88-159-247-120.fixed.kpn.net)
[15:47:30] *** Quits: phma (phma@2001:5b0:210b:d6b8:694b:ba82:ab88:1eae) (Read error: Connection reset by peer)
[15:49:06] *** Joins: phma (phma@2001:5b0:210f:398:45c4:2d78:79ea:d21b)
[15:53:08] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Remote host closed the connection)
[15:59:56] *** Joins: jeetelongname (~jeet@88-111-159-26.dynamic.dsl.as9105.com)
[16:00:37] *** Quits: _ht (~quassel@82-169-194-8.biz.kpn.net) (Ping timeout: 240 seconds)
[16:01:05] *** Joins: _ht (~quassel@37.120.218.165)
[16:01:51] *** Joins: alx741 (~alx741@157.100.93.160)
[16:07:42] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[16:11:08] *** Joins: MoC (~moc@user/moc)
[16:12:54] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[16:13:18] <sm> I can't think of one offhand. that's a colossal project
[16:15:35] *** Joins: mmhat (~mmh@55d47734.access.ecotel.net)
[16:15:57] *** Quits: deadmarshal_ (~deadmarsh@95.38.113.39) (Ping timeout: 240 seconds)
[16:16:00] *** Quits: robbert-vdh (~robbert@robbertvanderhelm.nl) (Remote host closed the connection)
[16:16:25] *** Joins: robbert-vdh (~robbert@robbertvanderhelm.nl)
[16:16:26] <geekosaur> manatee had a web browser component, but it's long dead
[16:16:27] <sm> a few experiments on hackage, like hbro
[16:16:55] *** Quits: lagash (lagash@lagash.shelltalk.net) (Ping timeout: 250 seconds)
[16:22:04] *** Quits: mikoto-chan (~mikoto-ch@2a00:1d50:3:0:d35c:a450:4ccc:94ac) (Quit: mikoto-chan)
[16:25:55] *** Joins: deadmarshal (~deadmarsh@95.38.113.39)
[16:26:15] *** Quits: Megant (megant@user/megant) (Ping timeout: 250 seconds)
[16:27:54] *** Joins: Megant (megant@user/megant)
[16:29:59] *** Joins: burnsidesLlama (~burnsides@dhcp168-011.wadham.ox.ac.uk)
[16:30:01] *** Quits: burnsidesLlama (~burnsides@dhcp168-011.wadham.ox.ac.uk) (Remote host closed the connection)
[16:30:03] *** Joins: alx741 (~alx741@157.100.93.160)
[16:30:28] *** Joins: burnsidesLlama (~burnsides@dhcp168-011.wadham.ox.ac.uk)
[16:30:33] *** Quits: burnsidesLlama (~burnsides@dhcp168-011.wadham.ox.ac.uk) (Remote host closed the connection)
[16:30:40] *** Joins: burnsidesLlama (~burnsides@dhcp168-011.wadham.ox.ac.uk)
[16:31:36] *** Joins: machinedgod (~machinedg@24.105.81.50)
[16:31:44] *** Quits: son0p (~ff@2800:484:1d81:b700:d40b:900:b387:320) (Remote host closed the connection)
[16:32:00] *** Joins: gensyst (gensyst@user/gensyst)
[16:33:16] *** Quits: max22- (~maxime@lfbn-ren-1-1026-62.w92-139.abo.wanadoo.fr) (Ping timeout: 245 seconds)
[16:34:55] *** Quits: burnsidesLlama (~burnsides@dhcp168-011.wadham.ox.ac.uk) (Remote host closed the connection)
[16:35:58] *** Quits: gensyst (gensyst@user/gensyst) (Client Quit)
[16:38:59] *** Joins: pfurla_ (~pfurla@2804:18:5813:43a7:2d02:6b96:1847:d254)
[16:41:05] *** Joins: slowButPresent (~slowButPr@user/slowbutpresent)
[16:41:57] *** Quits: pfurla (~pfurla@2804:18:5822:b7a4:6913:9198:2dcc:b6a5) (Ping timeout: 240 seconds)
[16:41:58] *** Joins: cheater (~Username@user/cheater)
[16:44:50] <opqdonut> what's the cool way to write `f <$> x <*> pure y` ?
[16:45:12] <opqdonut> there must be some <**$ operator somewhere I can use
[16:45:48] *** Quits: MoC (~moc@user/moc) (Quit: Konversation terminated!)
[16:48:13] *** Joins: toastloop (toastloop@user/toastloop)
[16:48:13] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[16:59:02] *** Quits: jgeerds (~jgeerds@55d4ac73.access.ecotel.net) (Ping timeout: 240 seconds)
[16:59:59] *** Joins: Guest7 (~Guest7@145.107.126.224)
[17:01:10] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[17:01:54] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (Read error: Connection reset by peer)
[17:05:06] *** Quits: acidjnk (~acidjnk@p200300d0c7271e65d42c28944a29f404.dip0.t-ipconnect.de) (Ping timeout: 268 seconds)
[17:06:41] *** Joins: alx741 (~alx741@157.100.93.160)
[17:10:36] *** Joins: burnsidesLlama (~burnsides@dhcp168-011.wadham.ox.ac.uk)
[17:11:30] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[17:11:33] *** Quits: pavonia (~user@user/siracusa) (Quit: Bye!)
[17:13:09] *** Joins: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[17:13:32] *** Quits: Guest7 (~Guest7@145.107.126.224) (Quit: Connection closed)
[17:15:38] *** Joins: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi)
[17:16:37] *** Quits: burnsidesLlama (~burnsides@dhcp168-011.wadham.ox.ac.uk) (Ping timeout: 240 seconds)
[17:18:07] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:178:131c:7a0c:e758)
[17:18:11] *** Quits: mrmonday (~robert@what.i.hope.is.not.a.tabernaevagant.es) (Quit: .)
[17:18:23] *** Joins: mrmonday (~robert@what.i.hope.is.not.a.tabernaevagant.es)
[17:20:05] *** Quits: jeetelongname (~jeet@88-111-159-26.dynamic.dsl.as9105.com) (Read error: Connection reset by peer)
[17:22:17] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:178:131c:7a0c:e758) (Ping timeout: 240 seconds)
[17:25:00] *** Joins: max22- (~maxime@2a01cb088335980036297c973223bba4.ipv6.abo.wanadoo.fr)
[17:29:12] *** Joins: alx741 (~alx741@157.100.93.160)
[17:29:52] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.3)
[17:33:10] *** Joins: pfurla (~pfurla@2804:d41:4331:4800:510d:e80b:d7e8:54bf)
[17:33:57] *** Joins: _73 (~user@pool-108-49-252-36.bstnma.fios.verizon.net)
[17:33:57] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[17:34:31] <_73> does this combinator have a name? `foo f g = \x y -> f (g x) (g y)`
[17:34:57] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 240 seconds)
[17:35:14] *** Quits: rembo10 (~rembo10@remulis.com) (Quit: ZNC 1.8.2 - https://znc.in)
[17:35:37] *** Joins: rembo10 (~rembo10@remulis.com)
[17:35:57] *** Quits: deadmarshal (~deadmarsh@95.38.113.39) (Ping timeout: 240 seconds)
[17:36:02] *** Quits: cheater (~Username@user/cheater) (Ping timeout: 240 seconds)
[17:36:23] *** Joins: deadmarshal (~deadmarsh@95.38.113.39)
[17:36:25] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[17:36:45] *** Quits: xsperry (~xs@user/xsperry) (Remote host closed the connection)
[17:37:10] *** Quits: pfurla_ (~pfurla@2804:18:5813:43a7:2d02:6b96:1847:d254) (Ping timeout: 260 seconds)
[17:37:16] *** Joins: xsperry (~xs@user/xsperry)
[17:38:12] *** Quits: tromp (~textual@dhcp-077-249-230-040.chello.nl) (Quit: My iMac has gone to sleep. ZZZzzzâ€¦)
[17:38:33] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[17:38:45] <yushyin> on?
[17:39:36] *** Joins: pfurla_ (~pfurla@2804:18:5813:43a7:5d3e:bc70:a654:ea1e)
[17:39:36] *** Quits: rembo10 (~rembo10@remulis.com) (Client Quit)
[17:39:54] *** Joins: rembo10 (~rembo10@remulis.com)
[17:40:11] *** Quits: max22- (~maxime@2a01cb088335980036297c973223bba4.ipv6.abo.wanadoo.fr) (Ping timeout: 252 seconds)
[17:41:30] *** Quits: madjestic (~madjestic@88-159-247-120.fixed.kpn.net) (Ping timeout: 268 seconds)
[17:41:34] *** Joins: pfurla__ (~pfurla@2804:d41:4331:4800:b8e7:6926:586a:39fa)
[17:41:35] <_73> yushyin: yes `on` appears the same thanks. It would be helpful to me if somebody knew a mathematical name for this function.
[17:43:00] *** Quits: pfurla (~pfurla@2804:d41:4331:4800:510d:e80b:d7e8:54bf) (Ping timeout: 240 seconds)
[17:43:53] *** Joins: burnsidesLlama (~burnsides@dhcp168-011.wadham.ox.ac.uk)
[17:44:13] *** Quits: pfurla_ (~pfurla@2804:18:5813:43a7:5d3e:bc70:a654:ea1e) (Ping timeout: 240 seconds)
[17:46:21] <Rembane> _73: It's called the psi combinator according to https://hackage.haskell.org/package/data-aviary-0.4.0/docs/Data-Aviary-Birds.html but I can't find any more sources than that.
[17:46:57] <_73> awesome. Thanks
[17:47:52] <Rembane> No worries. :)
[17:50:22] *** Joins: alx741 (~alx741@157.100.93.160)
[17:50:47] *** Quits: rembo10 (~rembo10@remulis.com) (Quit: ZNC 1.8.2 - https://znc.in)
[17:51:04] *** Joins: rembo10 (~rembo10@remulis.com)
[17:53:25] *** Quits: rembo10 (~rembo10@remulis.com) (Client Quit)
[17:53:41] *** Joins: rembo10 (~rembo10@remulis.com)
[17:54:42] *** Joins: sleblanc (~sleblanc@user/sleblanc)
[17:55:12] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (Read error: Connection reset by peer)
[17:56:27] *** Joins: tromp (~textual@dhcp-077-249-230-040.chello.nl)
[17:56:31] *** Joins: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi)
[17:58:56] *** Joins: jeetelongname (~jeet@88-111-159-26.dynamic.dsl.as9105.com)
[17:58:56] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[17:59:17] *** Quits: deadmarshal (~deadmarsh@95.38.113.39) (Ping timeout: 240 seconds)
[17:59:40] *** Quits: rembo10 (~rembo10@remulis.com) (Quit: ZNC 1.8.2 - https://znc.in)
[17:59:58] *** Joins: rembo10 (~rembo10@remulis.com)
[18:05:04] *** Joins: madjestic (~madjestic@88-159-247-120.fixed.kpn.net)
[18:05:35] <yushyin> it's the first time i heard of psi or 'combinator birds'. Why birds? Seems like a reference to a book. 'In his delightful book To mock a mockingbird, Smullyan (1985) chooses birds for his combinators, in memory of Haskell Curry, an early pioneer in the theory of combinators (1958) and an avid bird-watcher.'
[18:07:39] *** Quits: zincy (~tom@2a00:23c8:970c:4801:5b6a:e81b:79dc:f684) (Remote host closed the connection)
[18:07:39] *** Quits: tom__ (~tom@2a00:23c8:970c:4801:5b6a:e81b:79dc:f684) (Read error: Connection reset by peer)
[18:11:55] <juhp> This has been bothering me quite a while - maybe a good one for r/haskell monthly AMA, but isn't there a nice function to say "filter a list by a list of prefixes" for example?  Well I dare say it is probably in some package, but I wish a not too obscure one
[18:12:20] <juhp> I mean a generic function of course
[18:13:43] *** Joins: cheater (~Username@user/cheater)
[18:13:53] *** Joins: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de)
[18:17:00] *** Joins: alx741 (~alx741@157.100.93.160)
[18:17:28] *** Joins: sourcemage (~sourcemag@c-24-14-124-168.hsd1.il.comcast.net)
[18:17:29] *** Joins: juhp[m] (~juhpmatri@2001:470:69fc:105::6e9)
[18:20:32] *** Parts: sourcemage (~sourcemag@c-24-14-124-168.hsd1.il.comcast.net) ()
[18:20:42] *** Joins: jkaye (~jkaye@2601:281:8300:7530:c697:c75:764c:d1a0)
[18:23:51] *** Joins: zebrag (~chris@user/zebrag)
[18:29:17] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[18:33:41] *** Quits: madjestic (~madjestic@88-159-247-120.fixed.kpn.net) (Ping timeout: 245 seconds)
[18:37:11] <juhp> Maybe it is too easy to define case-by-case...
[18:38:32] *** Quits: PVPANTHONY (~The_viole@203.77.49.232) (Ping timeout: 240 seconds)
[18:41:07] *** Joins: max22- (~maxime@2a01cb08833598005bdb830adfc4642c.ipv6.abo.wanadoo.fr)
[18:41:27] *** Quits: lechner (~lechner@debian/lechner) (Ping timeout: 250 seconds)
[18:41:58] *** Joins: evocatus (~evocatus@62.182.78.42)
[18:43:48] *** Quits: _ht (~quassel@37.120.218.165) (Ping timeout: 240 seconds)
[18:44:21] *** Joins: _ht (~quassel@82-169-194-8.biz.kpn.net)
[18:45:15] *** Quits: evocatus (~evocatus@62.182.78.42) (Client Quit)
[18:46:21] *** Joins: alx741 (~alx741@157.100.93.160)
[18:46:48] <_73> I actually have a copy of "To Mock a Mockingbird" that was gifted to me and I never got around to reading. I didn't realize that it was about combinatory logic.
[18:47:16] *** Joins: selkirk (~selkirk@182.69.202.102)
[18:47:25] *** Joins: jgeerds (~jgeerds@55d4ac73.access.ecotel.net)
[18:47:46] *** Quits: jgeerds (~jgeerds@55d4ac73.access.ecotel.net) (Remote host closed the connection)
[18:49:36] *** Joins: deadmarshal (~deadmarsh@95.38.113.39)
[18:53:40] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[18:55:37] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[18:55:37] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[18:55:37] *** Joins: wroathe (~wroathe@user/wroathe)
[19:01:17] *** Joins: madjestic (~madjestic@88-159-247-120.fixed.kpn.net)
[19:04:57] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Read error: Connection reset by peer)
[19:07:22] *** Joins: cosimone (~user@93-34-133-159.ip49.fastwebnet.it)
[19:10:00] *** Quits: noex (~null@2600:8804:1280:aa0:5857:94a:25de:c513) (Quit: :q!)
[19:10:42] *** Joins: alx741 (~alx741@157.100.93.160)
[19:14:21] *** Quits: cosimone (~user@93-34-133-159.ip49.fastwebnet.it) (Remote host closed the connection)
[19:15:11] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[19:15:32] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[19:19:36] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:178:131c:7a0c:e758)
[19:20:59] *** Joins: bollu (uid233390@id-233390.helmsley.irccloud.com)
[19:21:00] *** Quits: slowButPresent (~slowButPr@user/slowbutpresent) (Quit: leaving)
[19:22:45] *** Joins: bontaq (~user@ool-45779fe5.dyn.optonline.net)
[19:23:37] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:178:131c:7a0c:e758) (Ping timeout: 240 seconds)
[19:32:15] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[19:33:15] *** Joins: alx741 (~alx741@157.100.93.160)
[19:34:05] *** Quits: toastloop (toastloop@user/toastloop) (Remote host closed the connection)
[19:35:46] *** Joins: coot (~coot@89-64-85-93.dynamic.chello.pl)
[19:38:42] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Read error: Connection reset by peer)
[19:39:51] *** Joins: xkuru (~xkuru@user/xkuru)
[19:40:50] *** Quits: deadmarshal (~deadmarsh@95.38.113.39) (Ping timeout: 260 seconds)
[19:42:00] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Ping timeout: 276 seconds)
[19:43:04] *** Joins: deadmarshal (~deadmarsh@95.38.113.39)
[19:43:54] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[19:44:09] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[19:45:38] *** Quits: selkirk (~selkirk@182.69.202.102) (Quit: leaving)
[19:46:27] *** Quits: gehmehgeh (~user@user/gehmehgeh) (Quit: Leaving)
[19:55:08] *** Joins: earendel (uid498179@user/earendel)
[19:58:06] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 260 seconds)
[20:01:42] *** Joins: CyberTailor (~cyber@gateway/tor-sasl/cybertailor)
[20:01:50] *** Quits: madjestic (~madjestic@88-159-247-120.fixed.kpn.net) (Ping timeout: 260 seconds)
[20:01:53] *** Joins: alx741 (~alx741@157.100.93.160)
[20:02:06] *** Quits: jeetelongname (~jeet@88-111-159-26.dynamic.dsl.as9105.com) (Ping timeout: 268 seconds)
[20:02:10] <CyberTailor> i have too little RAM to compile haskell packages, what to do?
[20:05:17] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 240 seconds)
[20:05:37] *** Joins: lagash (lagash@lagash.shelltalk.net)
[20:06:37] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (Read error: Connection reset by peer)
[20:06:38] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[20:06:57] *** Quits: pfurla__ (~pfurla@2804:d41:4331:4800:b8e7:6926:586a:39fa) (Ping timeout: 240 seconds)
[20:09:55] *** Joins: pfurla (~pfurla@2804:d41:4331:4800:8490:5949:caf8:c808)
[20:12:54] <pragma-> download more
[20:14:28] <geekosaur> generally you add swap somehow. of course that'll be slow.
[20:16:07] <geekosaur> if this is something like a vps or droplet, you build on another machine and copy the artifacts over. if it's something like an rpi and you can't easily add swap, you may have to look into an arm vps
[20:16:48] *** Joins: Vajb (~Vajb@2001:999:62:f3d1:4390:fbed:1f9b:9d03)
[20:22:46] <sm> how much too little ?
[20:24:25] *** Joins: alx741 (~alx741@157.100.93.160)
[20:29:44] <CyberTailor> sm: 4GB and zram
[20:30:08] <geekosaur> ow
[20:30:39] <geekosaur> might suggest using qemu on an x86 box for builds
[20:30:57] <geekosaur> it'll be slow, but not as slow as swapping on 4gb
[20:30:57] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[20:31:06] <sm> I don't know ram, but many (most ?) packages can build in 4G, some tweaks to your command can help
[20:31:26] <sm> @where lowmem
[20:31:26] <lambdabot> stack build ONEPKG -j1 --ghc-options='+RTS -M1G -RTS'
[20:32:04] <sm> @where lowmemcabal
[20:32:04] <lambdabot> I know nothing about lowmemcabal.
[20:32:55] <sm> but you're probably building pandoc or something
[20:32:58] <monochrom> cabal's is still -j1 and --ghc-options
[20:33:10] <sm> +1
[20:33:58] <sm> @where+ lowmem cabal/stack build ONEPKG -j1 --ghc-options='+RTS -M2G -RTS'
[20:33:58] <lambdabot> Done.
[20:34:38] *** Joins: slack1256 (~slack1256@191.126.99.206)
[20:35:04] <CyberTailor> gentoo builds with +RTS -A256M -qb0 -RTS
[20:35:06] <monochrom> GHC these days autotune its allocator based on physical RAM size. It may be unnecessary to dictate that ghc-options.
[20:35:41] <sm> interesting.. well, worth testing  CyberTailor 
[20:35:52] *** Quits: shailangsa (~shailangs@host86-186-127-224.range86-186.btcentralplus.com) (Remote host closed the connection)
[20:36:24] <c_wraith> most build memory problems come from either the linker or packages like vector-algorithms that do recursive inlining up to some ridiculous depth such that they generate huge amounts of code.
[20:38:36] <c_wraith> it can help to know what situation you're in
[20:39:58] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[20:39:58] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[20:39:58] *** Joins: wroathe (~wroathe@user/wroathe)
[20:40:52] <sm> poor, grim, or dire ?
[20:41:15] <CyberTailor> building e.g. shellcheck or gentoo's hackport
[20:42:16] <sm> is the above command helping ?
[20:45:17] <CyberTailor> i'm just going to put off haskell until i get more ram
[20:48:53] *** Quits: mrus (~mrus@2001:19f0:5:1535:5400:3ff:fe7d:10ae) (Quit: Surfing the great wave off Kanagawa)
[20:49:00] *** Joins: alx741 (~alx741@157.100.93.160)
[20:49:11] *** Joins: mrus (~mrus@2001:19f0:5:1535:5400:3ff:fe7d:10ae)
[20:52:01] <hololeap> this is an example of a what gentoo outputs when configuring. I know that things were optimized at one point to favor speed over RAM economy: http://sprunge.us/oXtTK7
[20:54:09] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[20:54:22] <sm> aww... too sensible :)
[20:56:52] <hololeap> does anyone spot any options that are obviously memory-hungry in that?
[20:58:27] <hololeap> or know of changes that would allow us to have a low-memory profile for building?
[20:58:41] <monochrom> -j4
[20:59:15] <hololeap> sure, they tried with -j1 I'm pretty sure
[21:00:24] <monochrom> I guess I don't understand your question.
[21:01:45] <hololeap> there are a bunch of other options that I'm not familiar with, such as --ghc-option=-optl-Wl,-O1, and I'm wondering if any (besides -j4) stand out as culprits for increasing RAM consumption during compilation
[21:08:47] *** Joins: delYsid (~user@84-115-55-45.cable.dynamic.surfer.at)
[21:09:57] <delYsid> I think I need ExistentialQuantification, but the concept is totally new to me.
[21:11:01] *** Quits: coot (~coot@89-64-85-93.dynamic.chello.pl) (Quit: coot)
[21:11:04] *** Joins: alx741 (~alx741@157.100.93.160)
[21:11:07] <delYsid> I get that it would be better to expand every possible operation to a record and keep that in a list, but I think I can not do that since I want the body of my datatype to be extensible, if that wording makes any sense.
[21:12:59] <delYsid> I am trying to create programmable views in a brick app using dyre.  The idea is to have a generic View type which the user can create which holds data and functions which specify how to draw and handle events.
[21:14:06] <delYsid> Are there any other patterns then ExistentialQuantification to do this, or should I happily proceed with Typeable and cast?
[21:14:17] *** Quits: slack1256 (~slack1256@191.126.99.206) (Ping timeout: 240 seconds)
[21:15:50] *** Joins: shailangsa (~shailangs@host86-186-127-224.range86-186.btcentralplus.com)
[21:15:51] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[21:16:46] *** Joins: regr (~regr@2a02:a466:cf4f:1:5446:667c:b4:12f6)
[21:16:47] <hololeap> delYsid: you only need ExistentialQuantification if you are trying to "hide" some aspect of the type
[21:18:01] <hololeap> for instance, if you had the type (Thing t) and constructors for (Thing String) and (Thing Bool), you would not be able to stick both of those in [Thing t], because lists are homogeneous
[21:19:08] <hololeap> so you could use ExistentialQuantification to make a SomeThing type which hides `t', allowing you to stick it into containers, but you lose the type-level information of what `t' was
[21:19:38] *** Quits: deadmarshal (~deadmarsh@95.38.113.39) (Ping timeout: 256 seconds)
[21:21:34] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:178:131c:7a0c:e758)
[21:22:56] *** Quits: _73 (~user@pool-108-49-252-36.bstnma.fios.verizon.net) (Remote host closed the connection)
[21:23:55] *** Quits: tromp (~textual@dhcp-077-249-230-040.chello.nl) (Quit: My iMac has gone to sleep. ZZZzzzâ€¦)
[21:24:29] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:178:131c:7a0c:e758) (Remote host closed the connection)
[21:24:45] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[21:30:05] *** Quits: benin (~benin@183.82.27.121) (Ping timeout: 252 seconds)
[21:30:34] *** Joins: benin (~benin@183.82.27.121)
[21:32:14] *** Joins: alx741 (~alx741@157.100.93.160)
[21:32:33] *** Parts: CyberTailor (~cyber@gateway/tor-sasl/cybertailor) (Konversation terminated!)
[21:33:01] <delYsid> hololeap: Thats pretty much it.  I dont want to hide anything in particular, but I need a way to add an aribtrary number of custom types of a container.  I am hoping to be able to recover t with a Typeable constraint and cast?
[21:33:17] <delYsid> s/of/to/
[21:35:12] <hololeap> I don't think that's necessary. you can shove as much info as you want into the `s' variable for brick's App
[21:35:20] <monochrom> "Hiding" is true, but is true of all parametric polymorphism. If I code up "f :: forall a. a -> a" and you are the user of f, you are hiding the actual type from me, too.  Changing "forall" to "exist" just turns the table around.
[21:36:14] <monochrom> Instead, "forall" is a product type that is an infinite product, "exists" is a sum type that is an infinite sum.
[21:36:19] *** Quits: dyeplexer (~dyeplexer@user/dyeplexer) (Remote host closed the connection)
[21:36:58] <monochrom> That infinitness is also the driving force of why some people say "open".
[21:39:40] <hololeap> Q: where did you put my keys? A: There exists a location in the universe where your keys are present -- sounds a bit like "hiding" to me ;)
[21:42:47] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[21:43:13] <hololeap> delYsid: you might want to model a widget off of brick's App, where the user just needs to give you (s -> [Widget n]) and (s -> Event n e -> EventM n (Next s)) functions in order to have a View
[21:43:40] <hololeap> _how_ they implement the functions is their business and outside the scope of your library
[21:45:49] <monochrom> Observe that: 1. It uses "forall".  2. It is saying that now the user can hide their s from you.  Which is what I said.
[21:46:25] <monochrom> Generally and formally, "(exists s. ...) -> t" is equivalent to "forall s. ... -> t".
[21:46:31] <delYsid> hololeap: Yes.  Maybe I am stuck in some sort of confusion, but what I want to achieve is the ability to add an aribtrary amount of these to the brick state.  I want some sort of function addView :: View -> State -> State -- which adds the given view (with its own state) to the global brick state.
[21:46:53] *** Joins: madjestic (~madjestic@88-159-247-120.fixed.kpn.net)
[21:47:09] *** Parts: jakalx (~jakalx@base.jakalx.net) (Error from remote client)
[21:48:11] *** Joins: econo (uid147250@user/econo)
[21:49:11] *** Joins: tzh (~tzh@c-24-21-73-154.hsd1.or.comcast.net)
[21:50:28] *** Joins: dsrt^ (~dsrt@64.253.22.77)
[21:50:37] *** Quits: Feuermagier_ (~Feuermagi@138.199.36.133) (Quit: Leaving)
[21:50:48] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[21:51:27] <monochrom> If you find that View is conceptually an open sum type, you can define it to be an existential type, as said.
[21:52:41] <delYsid> ah, that sounds about right then
[21:53:53] <monochrom> A finite and closed sum type is for example "data F = C1 Int | C2 Bool | C3 Char".  If you receive x::F, you say "I know, it can only be Int, Bool, or Char".
[21:55:16] *** Joins: jakalx (~jakalx@base.jakalx.net)
[21:55:29] <monochrom> An infinite and open sum type is for example "data O = forall s. O s (s -> String)". If you receive x::O, it may be any type, you don't know which, but you know it supports an "s -> String" operations.
[21:55:29] <EvanR> you may be able to do it if you can find a uniform interface to your view
[21:55:36] <EvanR> without fancy types
[21:56:07] <monochrom> Note that "O -> Foo" is the same as "forall s. (s, s->String) -> Foo".
[21:56:53] <monochrom> In a language without built-in existential typing, you use that encoding.
[21:57:27] <hololeap> ok, but if we're getting into theory here, what about the yoneda lemma, where a ~ (a -> r) -> r is saying "if you can give me an `r' from your huge open sum type `a', I really don't care what `a' is. just give me the `r'" -- doesn't this also provide a mechanism for dealing with open sum types without getting into ExistentialQuantification?
[21:58:42] <monochrom> But so is F.  "F -> Foo" is the same as "(Int -> Foo, Bool -> Foo, Char -> Foo)" --- a finite "forall".
[21:59:02] *** Joins: deadmarshal (~deadmarsh@95.38.113.39)
[21:59:28] <EvanR> delYsid, does the ultimate use of your dynamic view end up being something like a map reduce
[21:59:50] <EvanR> and foldmap... like map all your weird values to a uniform value and mush them together
[21:59:52] *** Quits: doyougnu (~doyougnu@c-73-25-202-122.hsd1.or.comcast.net) (Ping timeout: 256 seconds)
[22:00:01] *** Joins: natechan (~nate@108-233-125-227.lightspeed.sntcca.sbcglobal.net)
[22:00:24] <monochrom> You are missing a "forall" there.  a ~ forall r. (a -> r) -> r
[22:00:42] <monochrom> In category theory terms, "natural in r".
[22:00:52] <EvanR> is that version of yoneda lemma at all related to scott encoding (or what's it called encoding) of data types
[22:00:56] *** Joins: alx741 (~alx741@157.100.93.160)
[22:01:00] <monochrom> Naturality in category theory becomes parametricity in programming.
[22:01:43] <monochrom> There is also an outer "forall a." over the whole thing.  The Yoneda correspondence is natural in a, too.
[22:02:09] <monochrom> THIS IS WHY HASKELL SHOULD HAVE MADE YOU WRITE "forall" EXPLICITLY.
[22:02:31] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[22:02:36] <EvanR> that would get annoying
[22:02:51] <hololeap> I don't know enough about the theory to actually use it to make a point :) but my point is that the user can just give you back a [Widget] and you don't need to know all the steps they took (or types they used) to do so
[22:02:54] <EvanR> category theory is full of omitted important stuff like that
[22:03:03] <EvanR> the student is just supposed to know it's there
[22:03:16] <EvanR> it's even worse in physics
[22:03:27] *** Joins: tromp (~textual@dhcp-077-249-230-040.chello.nl)
[22:04:10] <EvanR> yes, what hololeap said
[22:04:26] *** Quits: thevishy (~Nishant@2405:201:f005:c007:4c69:b93c:3bc3:9ff2) (Quit: Leaving)
[22:04:29] <delYsid> Well, the draw part of the view is simple, since it is pure.  I have that worked out.  But event handling is different, since it can mutate state, and I need a way for the view to know where its data is located in the big state.
[22:04:50] <EvanR> [BigData -> Widget]
[22:05:26] <monochrom> We can talk non-theory. I started without theory, I didn't bring up Yoneda. I started with basic Haskell code.
[22:05:31] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[22:05:55] <monochrom> You can work with my O->Foo example to see what I mean.  No Yoda required.
[22:06:25] <EvanR> Yoda Nelemma
[22:07:01] <monochrom> And you can see that it is the same technique you described.  I was connecting forall with exist.
[22:07:36] <monochrom> My hidden agenda is, though, to de-FUD existential types.
[22:08:27] <monochrom> Existential types are not an anti-pattern.
[22:08:46] <EvanR> existential types hide stuff... simply applying a function hides stuff xD
[22:08:51] <EvanR> what's the problem
[22:09:13] *** Joins: Morrow (~quassel@bzq-110-168-31-106.red.bezeqint.net)
[22:09:22] *** Quits: gustik (~gustik@2a01:c844:242f:ba20:72e:7030:46bf:1353) (Quit: Leaving)
[22:09:41] <monochrom> Well yeah that's another of my point, too. Existential types do not have a monopoly on hiding.
[22:10:14] <monochrom> In fact to the point that the hiding should be attributed to something else unrelated.
[22:11:14] <monochrom> In Java, you have instanceOf, you have a whole java.reflection machinery.  They break parametricity in a very strong way.  They also break all the fabled "hiding" promised by OOP.
[22:11:43] <monochrom> The conclusion is that hiding should be attributed to parametricity.
[22:12:34] <hololeap> delYsid: here's my thinking: you can write: (local -> BrickEvent n e -> EventM n (Next local)) -> ((s,local) -> BrickEvent n e -> EventM n (Next (s,local)))
[22:12:43] <monochrom> Just that the OOP people boast "hiding" more often, and they use existential types more often, so you get a distorted impression.
[22:12:49] <earendel> i think you misunderstand it as a kind of security feature. 
[22:13:22] <monochrom> Uh no.  Look at academic explanations of "parametricity" and "type case".
[22:13:25] <earendel> in case you mean private and internal types.
[22:13:47] <hololeap> delYsid: this will allow you to take a state function that focuses on your local View state and apply it to your appHandleEvent from Brick.Main
[22:13:53] *** Quits: tromp (~textual@dhcp-077-249-230-040.chello.nl) (Quit: My iMac has gone to sleep. ZZZzzzâ€¦)
[22:13:57] <delYsid> I think my problem boils down to a this "pointer".  If I were to write this in C++, I would have base class, some virtual methods, and hide all the private state in the various view subclasses.  To add a view, I'd push it to a vector of base pointers.  If I call my virtual handle event method, I get a this pointer and can mutate my state.  I am looking for something that lets me do this with Brick, where the State is actually a global
[22:13:58] <delYsid> big nested record, and I have to figure out where my private state lives.
[22:14:06] <monochrom> In particular "type case implies losing parametricity"
[22:14:50] <EvanR> delYsid, you can do exactly this by passing a this pointer as an argument
[22:15:03] <EvanR> and using IO or STM to use it
[22:15:11] <monochrom> Haskell is not very good at subclassing though, even after you use existential types.
[22:15:38] <monochrom> But a virtual class (ignoring subclassing), that we can do.
[22:17:09] *** Quits: regr (~regr@2a02:a466:cf4f:1:5446:667c:b4:12f6) (Ping timeout: 268 seconds)
[22:17:26] <EvanR> virtual class = record of functions? xD
[22:17:31] <monochrom> Yeah!
[22:17:40] <EvanR> cute
[22:18:16] <monochrom> Or even better, record of a few value fields and a few function fields that use those value fields.
[22:18:32] *** Quits: deadmarshal (~deadmarsh@95.38.113.39) (Ping timeout: 240 seconds)
[22:18:41] <monochrom> For example, "data O = forall s. O s (s -> String)" as said.
[22:19:19] <EvanR> that screams "String" to me
[22:19:33] <monochrom> Or you can recgonize that "s -> String looks like a Show method" so you compress it to "data O' = forall s. Show s => O' s"
[22:21:33] <monochrom> It is a basic but dumb and useless example.
[22:21:37] *** Quits: madjestic (~madjestic@88-159-247-120.fixed.kpn.net) (Ping timeout: 240 seconds)
[22:21:48] <monochrom> As usual, all useful OOP examples take up at least 10 lines.
[22:21:51] *** Joins: regr (~regr@2a02:a466:cf4f:1:cb36:2141:856f:f900)
[22:22:11] *** Joins: mc47 (~mc47@xmonad/TheMC47)
[22:23:11] <delYsid> EvanR: I have never worked with pointers in Haskell.  I was hoping I could get what I want with Lens, but I am sort of stuck here.
[22:23:23] <monochrom> delYsid: There is a chance "pointer" translates to "lens"...
[22:23:25] <EvanR> not called a pointer, it's IORef or TVar
[22:23:41] *** Joins: alx741 (~alx741@157.100.93.160)
[22:23:50] <geekosaur> well, one could claim you work with nothing but pointers
[22:24:24] <monochrom> But yeah maybe IORef or TVar is more idiomatic.
[22:24:40] <monochrom> Unless you don't want IO or STM.
[22:25:41] <EvanR> accessing (potentially modifying?) that external "big" "state" ?
[22:26:10] <EvanR> from your OOP subcomponents?
[22:26:22] <monochrom> But if it is strictly a pure function View -> State -> State, different values of View address different slices of State, and there are too many possibilities to write a finite sum type for View...
[22:26:28] <EvanR> seems awkward to do it entirely pure
[22:26:33] <monochrom> then that's straight to the definition of "lens".
[22:26:50] <delYsid> EvanR: Yes.  Its a bit like having two states.  The private state of the view which lives somewhere in a NonEmpty in the global state.  The handler should be able to modify both.
[22:27:30] <EvanR> if you figure out how to do that without IO, you still have the original problem of unmanagable spooky action at a distance
[22:27:38] <EvanR> that happens immediately with lots of globals
[22:28:31] <EvanR> in my current code, I don't have global state and restrict access to what's relevant
[22:28:44] <delYsid> But without access to the global state, the handler is pretty limited in reusing any (global) functionality...
[22:29:45] <delYsid> imagine a clipboard.  How would a view copy stuff to it?
[22:30:07] <EvanR> sounds like a single TVar, the clipboard
[22:30:30] <EvanR> and whatever can use it, has it
[22:30:46] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[22:31:01] <EvanR> (also, a "view" that modifies the clipboard? xD)
[22:31:02] <delYsid> hmm, thats something to think about.
[22:31:19] <EvanR> not your dads MVC pattern
[22:31:20] *** Quits: max22- (~maxime@2a01cb08833598005bdb830adfc4642c.ipv6.abo.wanadoo.fr) (Ping timeout: 268 seconds)
[22:31:31] <delYsid> nah
[22:31:56] <delYsid> Lets call it DisplayableObject then :-)
[22:32:08] <EvanR> it can do anything as well as display
[22:32:20] <EvanR> redundant? xD
[22:32:48] <monochrom> "Object" is redundant :)
[22:33:53] *** Quits: cocreature (~moritz@2a03:b0c0:3:d0::c8:f001) (Quit: WeeChat 3.0.1)
[22:35:24] *** Joins: cocreature (~moritz@2a03:b0c0:3:d0::c8:f001)
[22:35:34] *** Quits: paddymahoney (~paddymaho@cpe9050ca207f83-cm9050ca207f80.cpe.net.cable.rogers.com) (Ping timeout: 256 seconds)
[22:36:17] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 240 seconds)
[22:36:52] *** Joins: tromp (~textual@dhcp-077-249-230-040.chello.nl)
[22:37:05] <delYsid> OK, I get the message, I think.  Dont open everything up because that makes code unpredictable.  So a displayable should only have access to its own state.  And if it needs to do stuff to the global state, make these operations explicit as fields and feed them at creation time.
[22:38:05] <EvanR> something like that is a classic OOP strategy, though the background assumes everything in IO
[22:39:10] <delYsid> Its not even that I am after OOP.  I dont have any sort of inheritance or anything like that.  All I want is a polymorhpic container of things with private state!
[22:39:25] <EvanR> bah inheritance
[22:39:56] <EvanR> haskell has other ways to reuse code
[22:40:32] <delYsid> inheritance is not relevant anyway. polymorphism is.
[22:41:05] <EvanR> the "polymorphic container of things" with private state has an issue in haskell because it doesn't describe what the things or the container are supposed to be able to do
[22:41:29] <EvanR> even implementing it as [IO ()] is too specific, depending on what the point is
[22:42:03] <EvanR> in other languages you have a default background of things all objects can do, but in haskell you don't
[22:42:05] *** Parts: regr (~regr@2a02:a466:cf4f:1:cb36:2141:856f:f900) (WeeChat 2.8)
[22:42:18] <EvanR> i.e. [forall a . a] can't do anything
[22:43:16] *** Joins: wootehfoot (~wootehfoo@user/wootehfoot)
[22:43:32] *** Quits: albet70 (~xxx@2400:8902::f03c:92ff:fe60:98d8) (Remote host closed the connection)
[22:44:07] <delYsid> Well, Things is a typeclass in my case I guess...  The point is more about what signature its methods should exactly have.  as said, the pure draw is simple and done, but the stateful handleEvent probably needs Lens somehow to writ the mutation back to the global state.
[22:45:23] <EvanR> if the big global state has type S then it sounds like your just want a S -> S
[22:45:41] <EvanR> lenses can help you build those, if you want
[22:46:37] <EvanR> your interface could involve (S -> S) or it could take IORef S
[22:47:10] <EvanR> but yeah that there needs to be some interface was my point
[22:47:24] <EvanR> polymorphic or not
[22:48:01] *** Joins: zincy (~zincy@2a00:23c8:970c:4801:bdb9:8c5f:3085:2807)
[22:49:23] *** Joins: alx741 (~alx741@157.100.93.160)
[22:49:39] *** Joins: albet70 (~xxx@2400:8902::f03c:92ff:fe60:98d8)
[22:50:15] <Raito_Bezarius> is it possible to open a named shared memory location with stm library in Haskell?
[22:50:34] <monochrom> I think no.
[22:50:38] *** Quits: zincy (~zincy@2a00:23c8:970c:4801:bdb9:8c5f:3085:2807) (Remote host closed the connection)
[22:52:25] <Raito_Bezarius> Is there a way to open named shared memory locations in Haskell, monochrom ?
[22:54:49] <geekosaur> I don't think there's an interface to the shmget() etc. functions currently. There is one to mmap() but I'm not sure how up to date it is
[22:55:24] <geekosaur> STM only operates in-process; there is no way to synchronize across processes using a shared memory segment, either with STM or with MVars
[22:55:55] <Raito_Bezarius> Thanks geekosaur!
[22:55:57] <hololeap> delYsid: this is my idea: http://sprunge.us/uIMjhF?haskell
[22:56:04] *** Joins: Sgeo (~Sgeo@user/sgeo)
[22:59:34] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[22:59:38] <sm> looks interesting
[23:00:34] *** Joins: lavaman (~lavaman@98.38.249.169)
[23:01:21] <hololeap> oops, there's a typo at the end. fixed: http://sprunge.us/7F3zYK?haskell
[23:02:43] <EvanR> what is the n type in bricks Widget
[23:02:49] *** Joins: max22- (~maxime@2a01cb088335980062ccec88c4c3abad.ipv6.abo.wanadoo.fr)
[23:03:12] <hololeap> you might notice that viewHandleEvent returns `EventM n (Maybe (Next v))` instead of `EventM n (Next v)` -- this is so that you can choose to pass the event on to the parent handler
[23:03:16] *** Joins: Erutuon (~Erutuon@user/erutuon)
[23:03:35] <hololeap> EvanR: it's essentially a sum type that lets you identify your widgets, or at least the important ones
[23:03:54] <EvanR> oh, a naming system
[23:03:58] <hololeap> yeah
[23:04:22] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Read error: Connection reset by peer)
[23:04:52] *** Joins: qrpnxz (~qrpnxz@user/qrpnxz)
[23:06:03] *** Parts: qrpnxz (~qrpnxz@user/qrpnxz) (Disconnected: Replaced by new connection)
[23:06:04] *** Joins: qrpnxz (~qrpnxz@user/qrpnxz)
[23:06:48] *** Quits: rito_ (~rito_gh@45.112.243.172) (Quit: Leaving)
[23:08:28] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[23:10:04] *** Parts: qrpnxz (~qrpnxz@user/qrpnxz) (Disconnected: Replaced by new connection)
[23:10:04] *** Joins: qrpnxz (~qrpnxz@user/qrpnxz)
[23:10:17] *** Quits: Erutuon (~Erutuon@user/erutuon) (Ping timeout: 240 seconds)
[23:10:48] <delYsid> n is for name, actually.
[23:11:33] <delYsid> hololeap: Hmm, I am too slow to digest this immediately, but it looks promising.  Thanks for writing it up!
[23:11:50] *** Parts: qrpnxz (~qrpnxz@user/qrpnxz) (Disconnected: Replaced by new connection)
[23:11:50] *** Joins: qrpnxz (~qrpnxz@user/qrpnxz)
[23:13:06] *** Joins: Erutuon (~Erutuon@user/erutuon)
[23:15:15] <hololeap> delYsid: np. you might also want to add this http://sprunge.us/txnro4 ... not sure how it will all shake out in real code, but this could probably accommodate nested Views as well
[23:15:31] *** Parts: qrpnxz (~qrpnxz@user/qrpnxz) (Disconnected: Replaced by new connection)
[23:15:32] *** Joins: qrpnxz (~qrpnxz@user/qrpnxz)
[23:16:19] *** Joins: madjestic (~madjestic@88-159-247-120.fixed.kpn.net)
[23:16:43] *** Parts: qrpnxz (~qrpnxz@user/qrpnxz) (Disconnected: Replaced by new connection)
[23:16:44] *** Joins: qrpnxz (~qrpnxz@user/qrpnxz)
[23:17:35] <hololeap> where you would end up with `ViewState (ViewState v2 v1) s` or something, where v1 is the state for the outer View and v2 is the state for the inner View
[23:17:50] *** Joins: alx741 (~alx741@157.100.93.160)
[23:18:36] <hololeap> I've actually thought about this exact problem before so I had some ideas already :)
[23:19:55] *** Quits: werneta (~werneta@70-142-214-115.lightspeed.irvnca.sbcglobal.net) (Quit: Lost terminal)
[23:20:13] *** Quits: zebrag (~chris@user/zebrag) (Quit: Konversation terminated!)
[23:21:11] *** Joins: werneta (~werneta@70-142-214-115.lightspeed.irvnca.sbcglobal.net)
[23:22:20] <delYsid> Oh, so the plan is to launch an App for a view?  Thats interesting
[23:22:58] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 260 seconds)
[23:26:54] *** Joins: zebrag (~chris@user/zebrag)
[23:27:00] <hololeap> the idea is that a View is an independent system, sort of like an App, and this means you need to hijack appHandleEvent so that the View can handle events independently and pass on any "leftovers" to the main App
[23:28:15] <hololeap> again, I've only ever thought about this in theory. I haven't tried implementing it or using it so I don't know if it will end up being annoying to use in the end for some reason
[23:29:27] <Athas> ...is there really no convenience function in aeson for decoding from String or Text?
[23:29:28] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[23:29:54] *** Parts: qrpnxz (~qrpnxz@user/qrpnxz) (Disconnected: Replaced by new connection)
[23:29:55] *** Joins: qrpnxz (~qrpnxz@user/qrpnxz)
[23:30:05] <hololeap> there should probably be a mechanism so that a View can both handle event _and_ pass it on to its parent, instead of "consuming" it being the only choice
[23:31:01] *** Joins: jumper149 (~jumper149@static.6.71.203.116.clients.your-server.de)
[23:31:03] <jumper149> Can I use a literate Haskell file with cabal?
[23:31:19] <geekosaur> cabal knows the .lhs extension is Haskell source, yes
[23:33:12] *** Quits: ProfSimm (~ProfSimm@87.227.196.109) (Remote host closed the connection)
[23:33:46] *** Quits: tromp (~textual@dhcp-077-249-230-040.chello.nl) (Quit: My iMac has gone to sleep. ZZZzzzâ€¦)
[23:33:55] *** Parts: qrpnxz (~qrpnxz@user/qrpnxz) (Disconnected: Replaced by new connection)
[23:33:55] *** Joins: qrpnxz (~qrpnxz@user/qrpnxz)
[23:34:21] *** Parts: qrpnxz (~qrpnxz@user/qrpnxz) (Disconnected: Replaced by new connection)
[23:34:21] *** Joins: qrpnxz (~qrpnxz@user/qrpnxz)
[23:34:37] *** Quits: juhp (~juhp@128.106.188.82) (Ping timeout: 240 seconds)
[23:34:45] *** Parts: qrpnxz (~qrpnxz@user/qrpnxz) (Disconnected: Replaced by new connection)
[23:34:46] *** Joins: qrpnxz (~qrpnxz@user/qrpnxz)
[23:37:37] *** Joins: juhp (~juhp@128.106.188.82)
[23:39:46] *** Joins: tromp (~textual@dhcp-077-249-230-040.chello.nl)
[23:40:21] <delYsid> hololeap: I way planning to do the "passing on of event" by actually suing some sort of Keymap.  Right now, I have a global appHandleEvent which picks the current view and call its handler, doing any global stuff hardcoded.  Your idea looks neat, but I dont see how I'd add views to a container, same problem I guess.
[23:41:21] <delYsid> hololeap: As said initially, I'd like to combine Brick and Dyre, which means I'll have a config file which launches the resulting app.  the plan is to be able to add views in that config file, hence the open sum type thing...
[23:41:45] <delYsid> damn, I cant type.
[23:45:20] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 268 seconds)
[23:47:24] *** Joins: alx741 (~alx741@157.100.93.160)
[23:47:25] *** Joins: jonathanx (~jonathan@94.234.53.6)
[23:50:37] *** Quits: jkaye (~jkaye@2601:281:8300:7530:c697:c75:764c:d1a0) (Ping timeout: 240 seconds)
[23:50:40] *** Quits: bollu (uid233390@id-233390.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[23:52:06] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[23:52:09] *** Parts: qrpnxz (~qrpnxz@user/qrpnxz) (Disconnected: Replaced by new connection)
[23:52:10] *** Joins: qrpnxz (~qrpnxz@user/qrpnxz)
[23:52:38] *** Quits: machinedgod (~machinedg@24.105.81.50) (Ping timeout: 256 seconds)
[23:54:43] *** Quits: madjestic (~madjestic@88-159-247-120.fixed.kpn.net) (Remote host closed the connection)
[23:59:44] *** Parts: qrpnxz (~qrpnxz@user/qrpnxz) (Disconnected: Replaced by new connection)
[23:59:44] *** Joins: qrpnxz (~qrpnxz@user/qrpnxz)
