[00:01:49] *** Quits: yos (~yossarian@user/yossarian) (Ping timeout: 240 seconds)
[00:07:49] *** Quits: Aylat (~Aylat@110.red-79-150-96.dynamicip.rima-tde.net) (Remote host closed the connection)
[00:08:07] *** Joins: yossarian (~yossarian@ool-44c5f69e.dyn.optonline.net)
[00:08:08] *** Quits: yossarian (~yossarian@ool-44c5f69e.dyn.optonline.net) (Changing host)
[00:08:08] *** Joins: yossarian (~yossarian@user/yossarian)
[00:08:10] *** Joins: Aylat (~Aylat@110.red-79-150-96.dynamicip.rima-tde.net)
[00:09:40] *** Quits: hanzo (uid532183@user/hanzo) (Quit: Connection closed for inactivity)
[00:12:50] *** Quits: yossarian (~yossarian@user/yossarian) (Ping timeout: 256 seconds)
[00:16:27] *** Quits: gr33n7007h (~gr33n7007@user/gr33n7007h) (Quit: WeeChat 3.4)
[00:20:03] *** Joins: gr33n7007h (~gr33n7007@user/gr33n7007h)
[00:27:00] *** Quits: gproto23 (~gproto23@user/gproto23) (Ping timeout: 256 seconds)
[00:31:34] *** Quits: _ht (~quassel@82-169-194-8.biz.kpn.net) (Remote host closed the connection)
[00:32:55] <havenwood> mooff: How can you omit the first argument and provide a second?
[00:33:06] <havenwood> mooff: Use keyword arguments instead.
[00:34:02] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Ping timeout: 240 seconds)
[00:34:09] <adam12> I think it's possible.
[00:35:04] <adam12> >> def foo(default="foo", bar); { default: default, bar: bar }; end; foo("bar")
[00:35:04] <ruby[bot]> adam12: I'm terribly sorry, I could not evaluate your code because of an error: JSON::ParserError:A JSON text must at least contain two octets!
[00:35:11] <adam12> ruby[bot]: You're dead to me.
[00:36:27] <nakilon> he's terribly sorry
[00:36:28] <havenwood> Error: Octets!
[00:36:36] <havenwood> My new fav error.
[00:36:46] <havenwood> Just has a ring to it.
[00:38:39] <weaksauce> the problem with that adam12 is that you have to supply every parameter if you want to override the first. I'd say named arguments are nicer 
[00:38:49] <nakilon> adam12 did you mean the opposite arg order?
[00:39:38] <adam12> weaksauce: It works fine for first optional. I wouldn't go any more complex than that tho, and I would default to named or a mixture of both (using the positional as the default to the named, for example).
[00:39:48] <havenwood> >> class Octets < StandardError; end; module Kernel def Octets! = Octets end; raise Octets!
[00:39:48] <ruby[bot]> havenwood: I'm terribly sorry, I could not evaluate your code because of an error: JSON::ParserError:A JSON text must at least contain two octets!
[00:40:12] <adam12> nakilon: Nope
[00:40:25] <weaksauce> adam12 not sure what you mean by works fine?
[00:40:36] <adam12> weaksauce: Does it not work for you?
[00:40:45] <weaksauce> the result gets you:  foo("bar") => {:default=>"foo", :bar=>"bar"}
[00:41:05] <weaksauce> yeah it works fine but if you want to override it you'd have to do foo "bar", "baz"
[00:41:28] <adam12> weaksauce: Yeah. Was that not the question? Maybe I'm lost.
[00:43:44] * nakilon is surprised it works at all
[00:44:20] *** Joins: yossarian (~yossarian@ool-44c5f69e.dyn.optonline.net)
[00:44:20] *** Quits: yossarian (~yossarian@ool-44c5f69e.dyn.optonline.net) (Changing host)
[00:44:20] *** Joins: yossarian (~yossarian@user/yossarian)
[00:44:34] <nakilon> where do I read about it?
[00:44:50] <adam12> nakilon: You have Jeremy's book Polished Ruby? It's in there.
[00:45:12] <nakilon> no official page?
[00:46:11] <havenwood> >> def foo(default="foo", bar) = {default: default, bar: bar}; [method(:foo).call(:first), method
[00:46:11] <havenwood> (:foo).curry(2).call(:first).call(:second)]
[00:46:12] <ruby[bot]> havenwood: I'm terribly sorry, I could not evaluate your code because of an error: JSON::ParserError:A JSON text must at least contain two octets!
[00:46:34] <havenwood> #=> [{:default=>"foo", :bar=>:first}, {:default=>:first, :bar=>:second}]
[00:47:02] <havenwood> I still wish curry curried blocks.
[00:47:27] <adam12> nakilon: I'm not sure, tbh. I cant' remember ever using it in the past. But it's a trick Sequel uses in some places, where you can provide a column or a table and column. ie. def qualify(table=nil, column); end; qualify("posts"); qualify("blog", "posts")
[00:47:45] <havenwood> adam12: fancy
[00:48:07] <havenwood> hadn't thought of using it like that. interesting.
[00:48:11] <weaksauce> adam12 maybe i have it wrong and you have it right?
[00:48:28] <weaksauce> i suppose they could want it that way
[00:48:30] <adam12> havenwood: we have all the finest method definitions, with your choice of grey poupon.
[00:48:56] <nakilon> I always saw it done like: a,b=default,a unless b
[00:49:48] <havenwood> Wait, you can't curry keyword arguments? What the heck is this code I wrote? https://gist.github.com/havenwood/db041566abeac894602c188c77374040
[00:49:52] <nakilon> in my country it's prohibited to use features of the language that are not known to all the other people
[00:49:57] <adam12> nakilon: heh
[00:50:21] <nakilon> for many years even ruby was prohibited
[00:50:41] <nakilon> anyway
[00:51:16] <havenwood> Actually, I still like that. I stand by this.
[00:51:17] <havenwood> ['{"aim":true}', '{"impossible":false}'].map &JSON.:parse.curry.(symbolize_names: true)
[00:51:18] <havenwood> #=> [{:aim=>true}, {:impossible=>false}]
[00:51:29] <havenwood> Kinda fun. :)
[00:51:45] *** Joins: hanzo (uid532183@user/hanzo)
[00:51:45] <havenwood> But .: never landed. :(
[00:52:09] <havenwood> JSON.public_method(:parse).curry.(symbolize_names: true)
[00:52:21] <adam12> havenwood: I'm actually OK with that. We're caressing the butt of Perl as it is. Don't want to overtake it.
[00:52:49] <havenwood> It was slow. But I don't like writing `method(:foo)` so much.
[00:53:11] <havenwood> And then of course expand that to `public_method(:foo)`, for politeness, heh.
[00:53:31] <havenwood> I wouldn't mind that *one more* shorthand, but point taken.
[00:53:51] <havenwood> adam12: #curry for kwargs actually seems like a way to avoid new syntax
[00:53:56] <havenwood> too bad it's for play
[00:53:59] <nakilon> I would use the useless &. for that
[00:54:17] <havenwood> i guess i have a pure ruby implementation of curry that supports both kwargs and blocks.
[00:54:31] <havenwood> so doable as a gem or whatev even without C exts
[00:59:34] *** Quits: analogsalad (~analogsal@user/analogsalad) (Quit: bye)
[01:19:36] <havenwood> New RubyGems out: gem update --system
[01:19:50] <Aylat> i was checking that curry code
[01:19:58] <Aylat> what't the arrow operator?
[01:20:12] <Aylat> -> *curry_args ...
[01:20:19] <havenwood> Aylat: it's a lambda literal
[01:20:32] *** DEac-_ is now known as DEac-
[01:20:46] <havenwood> Aylat: `->(*curry_args) { }` is `lambda { |*curry_args| }`
[01:20:55] <Aylat> oooh
[01:23:28] <Aylat> i should learn how lambdas work 
[01:24:21] *** Quits: duderonomy (~duderonom@c-73-158-190-156.hsd1.ca.comcast.net) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[01:26:31] *** Joins: roshanavand_ (~roshanava@p200300d47f01a3003c64921933d38027.dip0.t-ipconnect.de)
[01:32:44] *** Joins: bluedust (~bluedust@59.89.219.209)
[01:34:27] <havenwood> Aylat: https://gist.github.com/havenwood/f80308141c8460e3d181
[01:36:23] <Aylat> You earned a new follower, nice examples dude
[01:37:21] <Aylat> need to read a bit more about lambdas, but not today, really tired, seems interesting and useful
[01:37:28] <havenwood> ðŸ™Œ
[01:41:31] *** Joins: roshanavand__ (~roshanava@185.213.155.160)
[01:44:00] *** Quits: roshanavand_ (~roshanava@p200300d47f01a3003c64921933d38027.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[01:53:59] *** Quits: teclator (~quassel@85.155.180.70.dyn.user.ono.com) (Quit: http://quassel-irc.org - Chat comfortably. Anywhere.)
[02:20:05] *** Quits: Aylat (~Aylat@110.red-79-150-96.dynamicip.rima-tde.net) (Quit: Leaving)
[02:44:45] *** Quits: hololeap (~hololeap@user/hololeap) (Ping timeout: 276 seconds)
[02:44:54] *** Joins: hololeap_ (~hololeap@user/hololeap)
[02:52:18] <micah> how do I configure where the database.yml for a rails app is located?
[02:53:20] *** Joins: constxd_ (~brad@142.134.38.68)
[02:53:27] <constxd_> kings
[02:53:46] *** Quits: roshanavand__ (~roshanava@185.213.155.160) (Ping timeout: 256 seconds)
[02:54:20] <constxd_> does ruby have a method like this
[02:55:31] <constxd_> 'a bb cc ddd'.split.some_method(&:len)   ==    {1 => ['a'], 2 => ['bb', 'cc'], 3 => ['ddd']}
[02:55:52] <constxd_> does that mystery method exist
[02:56:07] <constxd_> if not how would you accomplish this instead
[02:56:26] <constxd_> oops that should be &:length
[02:58:11] <adam12> constxd_: Enumerable#tally\
[02:58:15] <adam12> (remove the backslash)_
[02:58:19] <adam12> Can't type today apparently.
[02:59:19] <nakilon> constxd_ group_by
[02:59:32] <nakilon> group_by(&:size)
[03:00:38] <constxd_> ah
[03:00:53] <constxd_> i thought group_by was like
[03:01:39] <adam12> Ohh
[03:01:40] <constxd_> ['a', 'bb', 'cc', 'ddd'].group_by(&:size) == [['a'], ['bb', 'cc'], ['ddd']]
[03:01:45] <adam12> I misread the desired output.
[03:01:45] <constxd_> in that case
[03:01:52] <constxd_> does *that* method exist
[03:01:55] <constxd_> chunk_while?
[03:02:12] <nakilon> there is .chunk
[03:02:36] <constxd_> oh chunk yeah, kinda does it
[03:06:33] <adam12> 'a bb cc ddd'.split.each_with_object(Hash.new { |k, v| k[v] = [] }) { |el, obj| obj[el.length].push(el) }
[03:08:43] <constxd_> isn't that group_by
[03:09:13] <adam12> Damn, it is. LOL
[03:09:20] <adam12> I give up. It's been a long day. bbl.
[03:09:28] <constxd_> hahaha
[03:34:35] *** Joins: bluedust_ (~bluedust@185.195.232.135)
[03:37:58] *** Quits: bluedust (~bluedust@59.89.219.209) (Ping timeout: 250 seconds)
[03:47:49] <axsuul> How would I define this so that the block has access to the context at the time it was passed in? https://0x0.st/o-bx.txt
[03:58:38] *** Joins: duderonomy (~duderonom@c-73-158-190-156.hsd1.ca.comcast.net)
[04:12:38] *** Quits: duds- (~duds-@gateway/tor-sasl/duds) (Quit: Leaving.)
[04:13:37] *** Joins: duds- (~duds-@gateway/tor-sasl/duds)
[04:14:56] <havenwood> axsuul: That works though?
[04:15:50] <havenwood> The code you showed prints #>> bar
[04:16:44] <havenwood> axsuul: With the code you showed, self inside the block will be main.
[04:16:58] <havenwood> axsuul: check out: debug { p self }
[04:17:08] <havenwood> axsuul: Maybe you're not running it quite like shown?
[04:22:00] *** Quits: Sheilong (uid293653@id-293653.ilkley.irccloud.com) ()
[04:22:13] <axsuul> havenwood : oops! my bad, think I solved it, thanks :)
[04:33:53] *** Joins: easbarba (~user@2804:1b2:83:73a2:69e:cc04:8757:4fbc)
[04:45:44] *** Quits: lunarkitty (uid501895@user/pyra) (Quit: Connection closed for inactivity)
[05:10:11] *** Quits: jtdowney (~jtdowney@user/jtdowney) (Ping timeout: 256 seconds)
[05:11:29] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[05:25:33] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[05:44:32] *** Quits: bluedust_ (~bluedust@185.195.232.135) (Remote host closed the connection)
[06:08:15] *** Joins: bluedust (~bluedust@185.195.232.135)
[06:08:59] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[06:20:09] *** Joins: mdemo (~mdemo@user/mdemo22)
[06:56:45] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[07:00:39] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Client Quit)
[07:02:52] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[07:06:03] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Client Quit)
[07:10:48] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[07:17:35] *** Quits: e2 (e2@sponsored.by.bnc4you.xyz) (Ping timeout: 265 seconds)
[07:22:38] *** Quits: mdemo (~mdemo@user/mdemo22) (Quit: The Lounge - https://thelounge.github.io)
[07:30:05] *** Quits: mooff (mooff@awful.cooking) (Remote host closed the connection)
[07:31:32] *** Joins: mooff (mooff@awful.cooking)
[07:41:16] *** Joins: trillp (~trillp@69.233.98.238)
[08:08:45] *** Quits: bluedust (~bluedust@185.195.232.135) (Remote host closed the connection)
[08:09:33] *** Joins: e2 (e2@sponsored.by.bnc4you.xyz)
[08:16:37] *** Quits: Rounin (~david@84.212.130.215) (Ping timeout: 256 seconds)
[08:39:02] *** Joins: bluedust (~bluedust@185.195.232.135)
[08:40:37] *** Quits: oxfuxxx (~oxfuxxx@160.238.38.154) (Ping timeout: 240 seconds)
[08:56:21] *** Joins: Leon__ (~Leon@249.sub-174-198-197.myvzw.com)
[08:59:25] *** Quits: Guest1499 (~Leon@249.sub-174-198-197.myvzw.com) (Ping timeout: 240 seconds)
[09:05:55] *** Quits: constxd_ (~brad@142.134.38.68) (Ping timeout: 256 seconds)
[09:12:49] *** Joins: fef (~thedawn@user/thedawn)
[09:37:09] *** Joins: leonthemisfit (~Leon@249.sub-174-198-197.myvzw.com)
[09:37:09] *** Quits: leonthemisfit (~Leon@249.sub-174-198-197.myvzw.com) (Changing host)
[09:37:09] *** Joins: leonthemisfit (~Leon@user/leonthemisfit)
[09:39:30] *** Quits: Leon__ (~Leon@249.sub-174-198-197.myvzw.com) (Ping timeout: 256 seconds)
[09:46:05] *** Quits: smp (~smp@user/smp) (Quit: ZNC 1.8.2 - https://znc.in)
[09:46:23] *** Joins: smp (~smp@user/smp)
[09:48:39] *** Joins: bluedust_ (~bluedust@59.89.219.209)
[09:51:30] *** Quits: bluedust (~bluedust@185.195.232.135) (Ping timeout: 250 seconds)
[10:16:46] *** Joins: _ht (~quassel@82-168-34-160.fixed.kpn.net)
[10:37:07] *** Quits: eldritch_ (~eldritch@user/eldritch/x-9272577) (Quit: bye)
[10:37:22] *** Quits: justIrresolute (~justache@user/justache) (Remote host closed the connection)
[10:37:55] *** Joins: eldritch_ (~eldritch@user/eldritch/x-9272577)
[10:38:33] *** Joins: justIrresolute (~justache@user/justache)
[10:51:22] *** Joins: teclator (~quassel@85.155.180.70.dyn.user.ono.com)
[10:58:49] *** Joins: Rounin (~david@84.212.130.215)
[11:06:46] *** Quits: mahlon (~mahlon@martini.nu) (Ping timeout: 260 seconds)
[11:19:17] *** Joins: constxd_ (~brad@142.134.38.68)
[11:21:38] *** Quits: unyu (~pyon@user/pyon) (Quit: brb)
[11:26:57] *** Joins: bluedust (~bluedust@103.161.144.94)
[11:30:00] *** Quits: bluedust_ (~bluedust@59.89.219.209) (Ping timeout: 256 seconds)
[11:39:07] *** Joins: Bounga (~nico@82-65-32-175.subs.proxad.net)
[11:40:40] *** Quits: hololeap_ (~hololeap@user/hololeap) (Read error: Connection reset by peer)
[11:42:00] *** Joins: hololeap_ (~hololeap@user/hololeap)
[11:56:23] *** Quits: fef (~thedawn@user/thedawn) (Quit: Leaving)
[12:01:00] *** Joins: oxfuxxx (~oxfuxxx@160.238.38.158)
[12:10:36] *** Quits: constxd_ (~brad@142.134.38.68) (Ping timeout: 250 seconds)
[12:20:55] *** Quits: oxfuxxx (~oxfuxxx@160.238.38.158) (Quit: can you please adjust your IRC quit message to be less transphobic?)
[12:34:59] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[12:59:20] *** Joins: unyu (~pyon@user/pyon)
[13:21:47] *** Quits: trillp (~trillp@69.233.98.238) (Quit: WeeChat 3.3)
[13:33:51] *** Quits: mollerup (~nmollerup@customer-2a00-7660-1612-0168-cfa8-be86-5a22-ee27.ip6.gigabit.dk) (Quit: Leaving)
[13:39:36] *** Joins: nmollerup (~nmollerup@customer-2a00-7660-1612-0168-3d8b-1f80-ab8f-9df3.ip6.gigabit.dk)
[13:40:28] *** Joins: reset (~reset@user/reset)
[13:42:39] *** Joins: hololeap (~hololeap@user/hololeap)
[13:43:12] *** Quits: hololeap_ (~hololeap@user/hololeap) (Ping timeout: 276 seconds)
[13:45:28] *** Joins: gproto23 (~gproto23@user/gproto23)
[13:45:30] *** Joins: danjo02 (~danjo@2001:a61:b81:2601:65c7:827:1dad:2209)
[13:47:25] *** Quits: danjo0 (~danjo@2001:a61:3a2c:c301:4456:f97f:1ba9:afaa) (Ping timeout: 250 seconds)
[13:47:52] *** Joins: danjo0 (~danjo@2001:a61:3a28:c01:8872:b83a:d3e1:21d)
[13:49:50] *** Quits: danjo02 (~danjo@2001:a61:b81:2601:65c7:827:1dad:2209) (Ping timeout: 250 seconds)
[13:50:45] *** Joins: constxd_ (~brad@142.134.38.68)
[14:14:57] *** Quits: constxd_ (~brad@142.134.38.68) (Ping timeout: 240 seconds)
[14:27:23] *** Quits: Bounga (~nico@82-65-32-175.subs.proxad.net) (Ping timeout: 256 seconds)
[14:28:00] *** Joins: constxd_ (~brad@142.134.38.68)
[14:29:26] *** Quits: duderonomy (~duderonom@c-73-158-190-156.hsd1.ca.comcast.net) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[14:53:54] *** Quits: yxhuvud (~quassel@2001:1ba8:1424:ea00::743) (Remote host closed the connection)
[15:07:23] *** Quits: Tempesta (~Tempesta@user/tempesta) (Quit: See ya!)
[15:10:10] *** Joins: duderonomy (~duderonom@c-73-158-190-156.hsd1.ca.comcast.net)
[15:10:29] *** Joins: Tempesta (~Tempesta@user/tempesta)
[15:16:31] *** Joins: yxhuvud (~quassel@2001:1ba8:1424:ea00:262a:4333:a69d:b36f)
[15:27:05] *** Joins: sgnh (~sgnh@c189-109.i06-16.onvol.net)
[15:43:46] *** Quits: aeris (~aeris@user/aeris) (Remote host closed the connection)
[15:47:42] *** Joins: aeris (~aeris@user/aeris)
[15:54:40] *** Joins: jtdowney (~jtdowney@user/jtdowney)
[15:59:02] *** Quits: _ht (~quassel@82-168-34-160.fixed.kpn.net) (Remote host closed the connection)
[16:02:10] *** Joins: _ht (~quassel@82-168-34-160.fixed.kpn.net)
[16:02:50] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[16:04:32] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[16:06:47] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Client Quit)
[16:08:27] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[16:12:11] *** Joins: analogsalad (~analogsal@user/analogsalad)
[16:12:13] <mooff> so on the default first parameter front.. it's cheeky, but i was wondering how silly i could get with an eval bot :)
[16:13:28] <mooff> i hadn't thought it out too far, but i wondered about making methods ('commands') like "part!" work if you don't specify a channel
[16:16:29] <adam12> I guess as long as you don't eval Kernel#` or something :P
[16:18:04] <mooff> i was mainly thinking about how practical something like 02def 07ambient_target; 10binding.of_caller(022).local_variable_get(05:target); 02end could be
[16:19:55] <mooff> with say 02def 07ambient_target; 10binding.of_caller(022).local_variable_get(05:target); 02end09
[16:20:01] <mooff> woops, wrong copy
[16:20:14] <mooff> 02def 07msg! target=ambient_target, text
[16:21:04] <mooff> then over IRC... msg! "hey, what's up :)"
[16:22:17] <mooff> a lot of the stdlib seems to do the "first arg is optional" thing and i wondered how much ceremony involved
[16:25:04] <mooff> 02def 07bonk target=10binding.of_caller(021).local_variable_get(05:sender); act! 05"05bonks 05#{sender05}05 over the head with a rusty frying pan05" 02end
[16:25:11] <mooff> you know? :)
[16:30:37] <adam12> Yeah.
[16:37:37] *** Quits: CrazyEddy (crazyed@2603:300a:1d10:c000:de4a:3eff:fe88:cc5f) (Ping timeout: 240 seconds)
[16:40:12] *** Quits: duderonomy (~duderonom@c-73-158-190-156.hsd1.ca.comcast.net) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[17:03:34] *** Joins: Bounga (~nico@82-65-32-175.subs.proxad.net)
[17:10:21] *** Joins: tsujp (~tsujp@sourcehut/user/tsujp)
[17:22:13] *** Quits: tsujp (~tsujp@sourcehut/user/tsujp) (Quit: Client closed)
[17:32:36] *** Joins: Sheilong (uid293653@id-293653.ilkley.irccloud.com)
[17:41:45] <nakilon> woah
[17:41:47] <nakilon> colored irc
[17:47:16] <adam12> It was once all the rage
[17:47:29] <adam12> Everyone had mIRC scripts that would do games and colours and all sorts of wild stuff.
[17:48:26] <leah2> and then mode +c was invented
[17:50:34] * adam12 slaps leah2 around a bit with a large trout
[17:51:36] *** Quits: jtdowney (~jtdowney@user/jtdowney) (Quit: Bye)
[17:52:03] <leah2> i remember when i had op in this channel :p or well, it's predecessor
[17:52:29] <adam12> Huh. TIL. https://fileinfo.com/extension/rbw
[17:52:48] *** Joins: jtdowney (~jtdowney@user/jtdowney)
[17:53:32] <adam12> leah2: I don't see why you couldn't have it again if you wanted it (tho I wouldn't be the one making the decision on that; maybe havenwood or jhass[m]). 
[17:53:56] <leah2> oh, i'm not so active anymore, and i dont think we need it
[18:32:25] <adam12> I wonder how ubiquitous the history support in readline is.
[18:43:30] <adam12> https://github.com/ruby/rdoc/pull/861
[18:58:48] <leah2> i never use interactive mode, but sounds reasonable
[18:58:52] <leah2> my shell already has history :p
[19:02:10] <adam12> I like using it to explore. Maybe digging around in Sequel#Dataset or something.
[19:07:30] *** Quits: analogsalad (~analogsal@user/analogsalad) (Quit: bye)
[19:30:25] *** Quits: aximik[m] (~asuxmatri@2001:470:69fc:105::1:4871) (Quit: You have been kicked for being idle)
[19:31:31] *** Joins: fef (~thedawn@user/thedawn)
[19:43:24] * mooff slaps the +c inventor around a bit with a large trout
[19:49:25] *** Joins: a7tism (~a7tism@176-169-136-187.abo.bbox.fr)
[20:12:02] *** Quits: sgnh (~sgnh@c189-109.i06-16.onvol.net) (Ping timeout: 250 seconds)
[20:13:51] *** Joins: sgnh (~sgnh@c189-109.i06-16.onvol.net)
[20:17:53] *** ule_ is now known as ule
[20:18:00] *** Quits: ule (~ule@216.128.176.248) (Changing host)
[20:18:00] *** Joins: ule (~ule@user/ule)
[20:22:07] *** Quits: sgnh (~sgnh@c189-109.i06-16.onvol.net) (Ping timeout: 256 seconds)
[20:24:04] *** Joins: sgnh (~sgnh@c189-109.i06-16.onvol.net)
[20:29:29] *** Quits: sgnh (~sgnh@c189-109.i06-16.onvol.net) (Ping timeout: 256 seconds)
[20:30:35] *** Quits: bluedust (~bluedust@103.161.144.94) (Remote host closed the connection)
[20:31:17] *** Joins: sgnh (~sgnh@c189-109.i06-16.onvol.net)
[20:33:31] <ox1eef> i think that's the first time i saw syntax highlighted code on IRC.
[20:44:58] *** Quits: Bounga (~nico@82-65-32-175.subs.proxad.net) (Ping timeout: 250 seconds)
[20:46:06] *** Joins: mahlon (~mahlon@martini.nu)
[20:59:30] *** Joins: antos (~valierka@cpc105446-brad21-2-0-cust34.17-1.cable.virginm.net)
[21:15:54] *** Quits: antos (~valierka@cpc105446-brad21-2-0-cust34.17-1.cable.virginm.net) (Quit: Leaving)
[21:38:57] <Sheilong> arithmetic expressions in Ruby are always evaluated from the left to the right? For instance the expression "1/2 * 1 * 2 * 3 * 4 * 5" evals to 0 because 1/2 is 0; but  "5 * 4 *  3  * 2 * 1 * 1/2" evals to 60. Why does it happen? Since * has the same precedence  order of * then 1/2 on the right could be evaluated to 0 also.
[21:40:02] <wnd> "1/2" isn't a single component
[21:40:24] <wnd> think (5 * 4 * 3 * 2 * 1) / 2
[21:40:55] <adam12> Would probably need `1/2r`?
[21:42:09] <Sheilong> I just wanted to understand that behavior. 
[21:43:29] <adam12> Sheilong: Oh.
[21:43:44] <adam12> Integer / Integer = Integer. You'd need either 1.fdiv(2) or 1 / 2.0
[21:43:48] <leftylink> see https://ruby-doc.org/core-3.0.1/doc/syntax/precedence_rdoc.html . * is same predecence as /
[21:43:51] <adam12> Integer / Integer = Integer. You'd need either 1.fdiv(2) or 1 / 2.0
[21:44:05] <Sheilong> I am a novice in the language, so somethings are not so obvious to me.
[21:44:47] <Sheilong> adam12: Yeah. I meant to to integer division. I just was trying to understand the behavior when you multiply that from right or from the left
[21:44:50] <nakilon> * and / are of the same precedence in any language
[21:45:01] *** Quits: BSaboia (~bsaboia@177.37.198.83) (Ping timeout: 240 seconds)
[21:45:14] <nakilon> and yeah, usually left to right
[21:45:59] <Sheilong> The language implementation always guarantee that behavior? 
[21:49:40] *** Joins: ouestbillie (~gallup@192-222-138-215.qc.cable.ebox.net)
[21:53:37] *** Joins: BSaboia (~bsaboia@177.37.198.83)
[21:59:45] <adam12> 500 new gems on gemdocs.org in 2 days... doesn't seem absurd but I'm surprised by the amount.
[22:01:00] <leah2> i thought ruby was dead :p
[22:01:11] <leah2> are they legit updates?
[22:01:45] <mooff> ^ does rubygems.org monitor for potential typosquat attacks? 
[22:04:42] *** Quits: BSaboia (~bsaboia@177.37.198.83) (Ping timeout: 250 seconds)
[22:09:25] <adam12> leah2: Looks like it, tho seems a lot are similar packages. dependabot-* and pulp_* and tencentcloud-sdk-* probably make up a hundred or so.
[22:09:32] <leah2> mhm
[22:10:47] <adam12> It's now about ~ 9 GB uncompressed. For 1980 gems, but not including multiple versions which I dont log yet.
[22:11:29] <adam12> I know there are a lot of fans of YARD, but with a better rdoc theme, I wonder if we could do something where docs don't have a mean size of 4MB
[22:13:25] <leah2> put on zfs, enable compression :p
[22:13:36] <adam12> I'm already kinda doing that, but with btrfs.
[22:13:55] <leah2> same, just ensure you have backups /s
[22:13:56] <adam12> So that 9GB is about 1.9GB right now, compressed.
[22:13:57] <adam12> Haha
[22:13:59] <leah2> :)
[22:14:18] <adam12> Yeah, I wouldn't use btrfs if there was more than a single device in this. But I'm actually cheating and using a loopback from a flat file.
[22:14:31] <adam12> Since these are re-generatable docs, I don't care if something goes south.
[22:14:48] <leah2> fair
[22:20:20] *** Quits: sgnh (~sgnh@c189-109.i06-16.onvol.net) (Quit: WeeChat 3.4)
[22:20:30] <ox1eef> i like YARD mostly for the tags. 
[22:20:53] <ox1eef> if rdoc added support for those, i might try it again
[22:21:07] <ox1eef> ah, wait.. markdown > rdoc as well.
[22:26:14] *** Joins: BSaboia (~bsaboia@177.37.198.83)
[22:27:05] <mooff> should i use Ruby 3 features, or keep the library compatible?
[22:27:38] <mooff> it'd be an easier choice if e.g. mruby, artichoke supported them!
[22:27:51] <leah2> do you really need the features?
[22:30:59] <nakilon> ^ this
[22:31:59] <leah2> apparently not because the library exist already :^)
[22:34:01] <mooff> 'need' is such a strong word :)
[22:46:19] <ox1eef> you could write ruby in such a way that it'd still work on 1.8.6/7 but you miss out on the language features that make, imho, Ruby better - for the most part. So, as of late, I don't care about anything <2.7 
[22:47:33] <ox1eef> On my most recent project, I went straight to Ruby 3.1.
[22:49:40] *** Quits: hanzo (uid532183@user/hanzo) (Quit: Connection closed for inactivity)
[23:01:11] *** Quits: BSaboia (~bsaboia@177.37.198.83) (Ping timeout: 256 seconds)
[23:02:53] *** Quits: yossarian (~yossarian@user/yossarian) (Ping timeout: 256 seconds)
[23:03:10] *** Joins: BSaboia (~bsaboia@177.37.198.83)
[23:03:35] *** Joins: yossarian (~yossarian@ool-44c5f69e.dyn.optonline.net)
[23:03:36] *** Quits: yossarian (~yossarian@ool-44c5f69e.dyn.optonline.net) (Changing host)
[23:03:36] *** Joins: yossarian (~yossarian@user/yossarian)
[23:13:43] <mooff> i feel that pull too, ox1eef. when 1.9 came out i switched to it immediately. we only cared about MRI at that point, though JRuby etc supported 1.9 stuff fast
[23:14:59] <mooff> now it feels like 2.6/2.7 is the new sort of "ISO" Ruby. explicitly targeted by many implementations with no real urge to 3.0 ify
[23:19:24] <mooff> the 3.x features i want are endless methods and the new "foo(x:, y:)" calling sugar :)
[23:20:03] <ox1eef> i was more excited for 1.9 than any other major bump I remember. If it is a gem, increasing the audience with support across versions would benefit your gem, but if it is your own web app or whatever, i don't see why not 3.1
[23:25:30] <mooff> it's not a gem yet, but when the design stabilises i hope to release it
[23:25:42] <ox1eef> is it a library or what
[23:26:05] <mooff> it's for making modular IRC bots and aims to be simpler than Cinch
[23:26:20] <ox1eef> for libs id recommend supporting at least 2.7 because companies usually cant move as fast as we do
[23:26:29] <ox1eef> oh cool. nice.
[23:26:43] <mooff> good yard stick..
[23:27:44] <mooff> https://www.ruby-lang.org/en/news/2019/12/12/separation-of-positional-and-keyword-arguments-in-ruby-3-0/
[23:28:12] <adam12> mooff: There's also ruby-next and backports, if you're interested.
[23:28:19] <mooff> i'd been a bit out of the loop leading up to 3.0, and that always struck me as weird. the 'opts' convention was quite nice
[23:28:45] <adam12> It had strange edge cases tho (but what I can't remember currently - there are talks on them). So I enjoyed it too, but the edge cases would get people.
[23:28:58] <mooff> i guess there must have been reasons that backwards incompatibility was preferred. but it's still a little :[
[23:29:12] <mooff> ah yes, cool, adam12 
[23:29:26] <mooff> ruby-next does some pretty funky stuff, doesn't it?
[23:29:43] <ox1eef> **opts always feels like an anti-pattern to me, that should just be a hash.
[23:29:53] <adam12> When they introduced kw args in v2, it was a known limitation of how they did it. I guess over time, they decided the breaking change was worth fixing the edge cases.
[23:30:01] <adam12> mooff: Refinements to the extreme :P
[23:30:43] <mooff> ox1eef: if there are optimizations on the table for the foo(bar:, baz:) syntax.. say if the call site and the declaration use kwargs.. couldn't we have that w/o breaking compatibility?
[23:30:50] *** Quits: easbarba (~user@2804:1b2:83:73a2:69e:cc04:8757:4fbc) (Ping timeout: 268 seconds)
[23:31:23] <mooff> adam12: don't tempt me.. refinements were slow, new and scary before, but now that they're well supported i could really go out to lunch using them :P
[23:31:33] <mooff> 'off the rails'
[23:31:40] <ox1eef> i don't think there should be **args at all. a hash serves that purpose 100%, right? so why complicate the syntax for this feature.
[23:32:09] <mooff> i don't mind the syntax per-se. it was already supported for calls before, right?
[23:32:34] <ox1eef> afaik it is as old as kw args itself. to me it's just confusing.
[23:32:56] <adam12> mooff: Downside is them not working in an IRB repl, but .. maybe the tradeoffs are worth it :)
[23:37:18] <mooff> ox1eef: i got bit a little not realising we must pass **kwargs too now, *args alone won't suffice.. :(
[23:37:42] <mooff> same with capturing args in a method signature for passing on
[23:38:11] <mooff> adam12: well, ruby-next is surely impressive, but using it with my lib can be left as an exercise for the reader :P
[23:39:05] <ox1eef> i use kw args sparingly, usually like def foo(bar, option: )
[23:39:37] <mooff> did they make it illegal to keep using opts={}?
[23:39:45] <mooff> don't want to get in trouble with the Ruby police :)
[23:39:46] <ox1eef> they're cool but easy to misuse, can end up overly verbose if you use them too much.
[23:40:00] <ox1eef> no, opts={} should still work?
[23:40:35] <mooff> (yeah i'm kidding but it feels wrong to use :))
[23:40:41] <ox1eef> :/
[23:40:44] <ox1eef> why?
[23:41:12] <ox1eef> that's syntax that has been here since the early days
[23:41:49] <mooff> haven't seen opts={} used in new code. though i haven't read a lot of new code..
[23:42:30] *** Quits: fef (~thedawn@user/thedawn) (Ping timeout: 276 seconds)
[23:42:38] <mooff> tend to prefer embracing language changes rather than clinging on
[23:43:01] <mooff> as a side comment, i wish keyword_init: true was the default for Struct's
[23:43:20] <ox1eef> well, you coud replace it with: **opts, it is not exactly the same in terms of syntax but more or less it is a new (and more ugly, imho) way of allowing for optional options
[23:43:37] <mooff> with positional initialization still supported
[23:43:53] <ox1eef> if it's the last arg, yes, from what i understood
[23:43:53] <mooff> ox1eef, well, exactly! :)
[23:47:38] <havenwood> ox1eef: it's on its way to being default
[23:48:07] <havenwood> Matz gave the go ahead, if I recall, but wanted a deprecation warning first.
[23:48:43] <havenwood> oh, it was mooff who said they wished it was default
[23:49:09] <mooff> ooh <3
[23:49:20] <mooff> cool
[23:49:26] <ox1eef> what will be default?
[23:49:33] <mooff> keyword_init for Structs
[23:49:45] <ox1eef> interesting
[23:50:00] <mooff> i hope it is backwards compatible by default
[23:50:16] <adam12> I've already said this but I wish Struct didn't default come with Array and Hash accessors. It breaks Array(struct) which is annoying.
[23:50:45] <mooff> eek. special case it in Array()! :)
[23:53:12] <mooff> refine Object!
[23:56:48] <gr33n7007h> adam12: how does it break?
[23:58:44] <havenwood> I am OK with 3.1 to warn, 3.2 to change. ~Matz
[23:59:05] <havenwood> So keyword_init should be default in 3.2 this Christmas.
[23:59:26] <havenwood> https://bugs.ruby-lang.org/issues/16806#note-5
[23:59:53] <havenwood> Now for an anonymous Struct literal... https://bugs.ruby-lang.org/issues/16986
