[00:11:47] *** Joins: wallymathieu (~wallymath@81-234-151-21-no94.tbcn.telia.com)
[00:57:24] *** Quits: wallymathieu (~wallymath@81-234-151-21-no94.tbcn.telia.com) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[01:08:46] <shka> oh god, there is VS code in the github
[01:08:54] <shka> fucking electron is spreading
[01:10:19] <selwyn> vs?
[01:11:42] <shka> visual studio code
[01:11:50] <shka> that editor that ms made in the electron
[01:12:29] <shka> https://github.com/Microsoft/vscode/issues/22900
[01:12:41] <shka> :P
[01:12:47] <selwyn> ew
[01:14:25] <selwyn> i guess it puts arguments about emacs being too heavyweight into perspective
[01:21:49] *** Quits: shka (~herr@109.231.62.239) (Ping timeout: 268 seconds)
[01:21:59] *** Quits: Catie (~user@c-24-17-253-63.hsd1.wa.comcast.net) (Remote host closed the connection)
[01:24:59] <lotuseater> and telling them it's just another IDE converging to emacs is not worth it
[01:27:03] <lotuseater> selwyn: did you know, when buying such a QLED Samsung TV you get a "quantum processor"
[01:27:13] <selwyn> really lol
[01:27:22] <lotuseater> yes they label it that way
[01:27:38] <selwyn> are they using the quantum random number generator for key distribution or sth
[01:28:05] <lotuseater> but I don't know how OLED TVs can get energy efficiency class G
[01:28:11] <selwyn> > quantum dot light emitting diode
[01:28:22] <lotuseater> selwyn: afaik there are quantum dots builtin
[01:29:38] <lotuseater> but the rest is just marketing as always, throwing buzz words
[01:31:30] <selwyn> to be fair, that is really cool
[01:32:14] <lotuseater> one Hadamard gate is enough for generating a random bit, was that correct?
[01:32:53] <lotuseater> or lava lamps xD
[01:33:59] <selwyn> the short answer is, yes, a hadamard gate is enough
[01:34:30] <lotuseater> yeah I know, a bit more is needed ^^
[01:35:58] <selwyn> slightly longer answer is that the quantum random number generators don´t use ´digital´ hadamard gates
[01:36:08] <lotuseater> :)
[01:36:58] <selwyn> the hard part is ensuring that the randomness you get is not biased one way or the other, and that there aren´t complicated correlations that ruin the randomness
[01:37:23] <selwyn> iirc they use the hong ou mandel effect and the von neumann coin trick
[01:37:28] <lotuseater> hmm
[01:37:49] <selwyn> which means you only need beamsplitters which don´t have to be particularly accurate
[01:38:01] <lotuseater> oh sounds I have to look up stuff. do you have serious source recommendations?
[01:38:04] <selwyn> uh
[01:38:12] <selwyn> let me think
[01:38:40] <selwyn> i mean, all of this is just quantum optics
[01:39:05] <lotuseater> "just" ^^
[01:39:11] <selwyn> lol
[01:39:39] <selwyn> what i mean to say is that it doesn´t rely on most of the machinery of quantum computing
[01:39:58] <lotuseater> okay
[01:41:27] <selwyn> nielsen and chuang´s ´quantum information and quantum computation´ probably covers enough quantum optics, let me check my copy
[01:42:07] <lotuseater> but think also about that I'm not an expert like you :)
[01:42:31] <selwyn> https://en.wikipedia.org/wiki/Hong%E2%80%93Ou%E2%80%93Mandel_effect this is a well written article imo
[01:42:58] <lotuseater> okay thx
[01:44:10] <selwyn> the idea is that if you interfere two identical photons using a beamsplitter (which is like a traffic junction), then they both go in one of two output directions
[01:44:25] <selwyn> with 50% probability for each direction
[01:44:50] <lotuseater> ahh
[01:47:04] <selwyn> in practice, beamsplitters are not perfect, so you might get 40% in one direction and 60% in the other
[01:47:12] <selwyn> which is to say you have an unfair coin
[01:47:13] <lotuseater> hmm
[01:48:06] <selwyn> but you can use the von neumann trick to get a fair coin from an unfair coin
[01:50:09] <lotuseater> also with a "real" coin? ^^
[01:50:15] <selwyn> yes
[01:51:14] <selwyn> flip the unfair coin twice. if you get heads then tails = call it heads. if you get tails then heads = call it tails
[01:51:40] <selwyn> both sequences happen with equal probability
[01:52:01] <lotuseater> yeah ok
[01:53:05] <selwyn> this was one of the only experiments that i ever built actually, it was fun
[01:53:18] <lotuseater> now just the why is leaved
[01:53:27] <lotuseater> oh cool
[01:54:11] <selwyn> beamsplitters and optical fibres are relatively cheap pieces of equipment
[01:54:33] <selwyn> demonstrating the hong ou mandel effect is a classic table top experiment
[01:55:24] <lotuseater> a real coin can never be fair by itself, it's not a point object and the flip heavily depends on how it's flipped, how it got started when being flipped, how it is formed etc
[01:55:46] <selwyn> ok, well it seems that id quantique´s random number chips work in a completely different way lol
[01:55:46] <lotuseater> so it's good to abstract stuff for getting pure randomness
[01:57:11] <selwyn> the issue with the von neumann trick is that it won´t work with coins that have a ´memory´ i.e. what if the result you get on the coin toss affects the next result
[01:57:49] <lotuseater> yes all those coins in my pocket with their dreams, visions and hope
[01:58:42] <lotuseater> but of course, having such systems or realizing that it can be, one must just consider cellular automata
[02:01:28] <selwyn> the random number chips use shot noise as the source of randomness
[02:02:36] <lotuseater> :)
[02:03:31] <lotuseater> or when letting generate an RSA key and you randomly tip keys and move the mouse to increase entropy :D
[02:04:13] <lotuseater> lol there's also a Mandela effect
[02:23:02] *** Quits: selwyn (~selwyn@user/selwyn) (Quit: Leaving)
[02:24:32] <gilberth> <http://clim.rocks/gilbert/wtf.png> That is usleep (200*1000);
[02:25:07] <lotuseater> something's going on there :D
[02:25:14] <gilberth> 1002.337s -- A new record!
[02:25:25] <lotuseater> call guiness book of records
[02:25:39] <gilberth> They misssed 1337 by a second.
[02:25:45] <lotuseater> damn
[02:27:03] <gilberth> Anyhow it's 10s + <what I wanted to sleep initially> in the most cases. So a constant 10s added. On my machine.
[02:28:06] <gilberth> Even that is hilarious. Why not max (10s, sleep_time) instead? No, it's 10s + sleep_time.
[02:36:15] *** Joins: dave0 (~davezero@069.d.003.ncl.iprimus.net.au)
[02:36:37] <dave0> maw
[02:36:43] <gilberth> OK. Do I want a workaround for CCL? With a sleep helper as a child process?
[02:36:51] <gilberth> dave0: Hello dave!
[02:37:13] <dave0> hey gilberth!
[02:38:44] <gilberth> This will however get very nasty. (1) figure what besides select(2) is used for waiting with timeout. (2) Is the GC affected? As it needs to interrupt threads. And signals are affected, too.
[02:40:46] <gilberth> So, perhaps I first find every syscall that CCL uses for a survey.
[02:41:56] <gilberth> Big Sur also has a 20s mode, when the app is on another desktop.
[02:44:49] <gilberth> Why doesn't the man page for sleep(3) mention that behaviour?
[02:46:11] <gilberth> So much for being productive.
[02:59:15] *** Quits: Oddity (Oddity@user/oddity) (Ping timeout: 268 seconds)
[03:09:04] *** Joins: makomo_ (~makomo@user/makomo)
[03:12:12] *** Quits: makomo (~makomo@user/makomo) (Ping timeout: 268 seconds)
[03:15:03] *** Joins: kakuhen (~kakuhen@user/kakuhen)
[03:19:45] *** Quits: Alfr (~Alfr@user/alfr) (Remote host closed the connection)
[03:22:00] <pl> are you using C function to sleep?
[03:22:18] *** Joins: Alfr (~Alfr@user/alfr)
[03:24:19] *** Joins: makomo (~makomo@user/makomo)
[03:24:30] *** Quits: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de) (Ping timeout: 272 seconds)
[03:24:53] *** Quits: makomo_ (~makomo@user/makomo) (Read error: Connection reset by peer)
[03:24:55] *** Joins: makomo__ (~makomo@user/makomo)
[03:25:53] *** Joins: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de)
[03:28:41] *** Quits: makomo (~makomo@user/makomo) (Ping timeout: 248 seconds)
[03:34:03] *** Quits: makomo__ (~makomo@user/makomo) (Quit: WeeChat 3.0.1)
[03:34:12] *** Joins: makomo (~makomo@user/makomo)
[03:42:44] <gilberth> pl: Sure.
[03:44:08] <gilberth> This constraint editor of Xcode tries to mimic pixel by pixel placement. I'll ditch it. I have better things to do with my time than to fight it. Give me just a list of constraints to edit, and I'm happy. *sigh*
[03:44:48] <pl> gilberth: I suspect that if you want specific timing you need to schedule code using GCD and timer queue :/
[03:44:53] <hayley> https://www.youtube.com/watch?v=EtWiOSVu-b0
[03:44:54] -ixelp- Gary Numan (London 1981) [11]. Films - YouTube
[03:45:54] <hayley> Huh, I have to report my work hours to the government again!? I thought I am now a full time student.
[03:47:19] <gilberth> pl: I want to select(2) in the end. I/O with timeout.
[03:47:39] <pl> pretty sure select() is also not recommended on osx
[03:47:44] <gilberth> Or wait on a mutex/semaphore/condition what ever with timeout.
[03:47:53] *** Quits: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de) (Ping timeout: 248 seconds)
[03:47:59] <gilberth> Then poll(2), if you wish.
[03:48:18] *** Joins: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de)
[03:48:18] <gilberth> Point is: Why do I need a sleep/timeout helper child process?
[03:48:33] <pl> kqueue or kevent, actually
[03:48:47] <gilberth> I bet, it's the same.
[03:48:59] <gilberth> I mean, not even signals are delivered on time.
[03:49:15] <hayley> Well, the "form" is different. They no longer ask if I found a job.
[03:50:07] <pl> gilberth: supposedly select() is infamously slow
[03:50:25] <pl> and well, were those realtime signals?
[03:50:25] <gilberth> And if select(2) is not recommended, I expect (1) that the man page says so and preferable (2) it is implemented on what ever wait API du jour.
[03:51:21] <gilberth> pl: I cannot test every single API UNIX invented for the last 30 years all at the same time. And: Who would send the signal?
[03:53:30] <gilberth> pl: I won't expect select(2) to actively delay my timeout by 10s. And sorry, it's still select(2) to me. I grew up with SYSV.
[03:53:48] <pl> gilberth: you're trying to do things in ways not blessed by holy priesthood of Apple
[03:53:53] <pl> expect nasal dragons
[03:54:35] <pl> (and you're on mishmash of BSD4.2, OSF/1 and bad Free/NetBSD grafts, so...)
[03:54:38] <gilberth> I still bet that any other API will behave the same, as this stalling must be a feature.
[03:54:56] * hayley wonders how that Unix certification is going.
[03:54:56] <gilberth> pl: You forgot to mention Mach.
[03:55:05] <pl> gilberth: that's included in OSF/1
[03:55:13] <gilberth> Ah.
[03:55:48] <pl> somewhere along the the line NeXT aligned their kernel base with OSF/1
[03:56:26] <gilberth> It's still a feature as of macOS 10.10
[03:56:41] <pl> so XNU is OSFMK based, with bsd server having considerable Free/NetBSD grafts, but userland is often BSD as it was in 1992
[03:57:03] <gilberth> So any quick example how to sleep with kqueue? I'll try that then.
[03:57:30] <pl> gilberth: kqueue won't give you a case without random pauses, I fear
[03:57:48] <gilberth> No timeouts?
[03:57:54] <hayley> Just spin-loop at this point?
[03:58:06] *** Quits: derelict (~derelict@user/derelict) (Quit: WeeChat 3.2)
[03:58:32] <pl> gilberth: man kevent
[03:58:54] <gilberth> Sure.
[04:01:56] <pl> if I understand it correctly, allocate a queue with `int kq = kqueue();` then you call kevent in a loop with some filters and timeout?
[04:02:26] *** Joins: Oddity (Oddity@user/oddity)
[04:15:07] *** Quits: random-nick (~random-ni@87.116.179.82) (Ping timeout: 245 seconds)
[04:15:32] *** Joins: copec (~copec@home.unaen.org)
[04:16:41] <gilberth> Yes, and a fake filter in case, I just want to sleep. Seems to work so far.
[04:16:51] <gilberth> The very same thing happens, as expected.
[04:18:02] <hayley> https://www.youtube.com/watch?v=RF4642pdpdU
[04:18:03] -ixelp- Climb Up On My Music - YouTube
[04:18:33] <gilberth> As it returns when some change you wait for is due. And when the set of events is empty it returns right away.
[04:19:33] <gilberth> pl: So this has nothing to do with my SYSVisms I am accustomed to.
[04:19:37] <kakuhen> pl: what's wrong with select() on OS X? quickly opening top shows me tons of processes waiting on a select() call
[04:20:05] <kakuhen> i mean, i dont see why one would choose select/poll over kqueue, if that's what you mean by "it's not recommended to use select"
[04:20:15] <kakuhen> similarly on linux, i guess you'd use whatever equivalent they have to kqueue
[04:20:17] <pl> kakuhen: apparently it's considerably laggier than kqueue (or GCD), even for single FD case
[04:20:56] <kakuhen> well yeah, kqueue was made specifically for better event/notification handling
[04:20:58] <gilberth> pl: kqueue is as laggy as select. 10s added to timeouts on purpose.
[04:21:14] <kakuhen> not sure where libdispatch comes into play though
[04:21:23] <pl> I kinda lost track of what's the right way to do it on linux now, I think current fastest option on linux is to drop syscalls completely
[04:21:44] <pl> kakuhen: libdispatch provides both I/O and timer events
[04:21:51] <gilberth> And that is not the point here, whether kqueue or poll or select is the waiting primitive du jour. It's all the same in this funny macOS feature.
[04:21:53] <kakuhen> ah, I've never dealt with I/O using libdispatch
[04:21:54] <pl> how it is implemented underneath I have no idea
[04:22:18] <kakuhen> I've only used libdispatch when I was too lazy in mac programs to set up NSInvocations and performSelectorOnMainThread heh
[04:22:22] <pl> gilberth: could be any sort of crap :/
[04:22:42] <pl> gilberth: FWIW, I get multi-second visible pauses on whole OS with mac...
[04:23:40] <gilberth> Point is: When I want reliable, prompt I/O timeouts in a GUI application, I need a helper process (not thread, it must be a process). At least I see no other way.
[04:23:59] <kakuhen> anyway, a quick search shows me that on linux you have epoll/timerfd/... as equivalents for kqueue; and I'd expect most programs wanting to maximize I/O performance or (simply scale up their I/O for things like servers) would use epoll over the usual select/poll stuff.
[04:25:37] <pl> kakuhen: on linux, for max speed in latest kernels, you want io_uring
[04:25:38] *** Quits: Gnuxie (~gnuxie@user/gnuxie) (Ping timeout: 252 seconds)
[04:25:46] <kakuhen> huh, TIL
[04:25:49] *** Quits: hayley (~theemacss@user/hayley) (Ping timeout: 268 seconds)
[04:31:06] <sm2n> though it is still somewhat unstable, apparently
[04:33:11] <sm2n> the author of libev had some complaints about it
[04:33:46] <pl> I think it became usable within last year, but it's so blazing new that you will often encounter distro without stabler versions or without any at all 
[04:34:21] <sm2n> A newer kernel is required, true
[04:34:42] <pl> the main issues I found were complaints about stuff outside of classic file i/o
[04:35:10] <pl> ... which makes me notice how all of this draws back to the fact that Unix I/O primitives simply suck donkey balls through a straw
[04:35:23] <sm2n> ah yes
[04:35:27] <sm2n> http://lists.schmorp.de/pipermail/libev/2021q2/002903.html
[04:35:28] -ixelp- libev-4.31 has just been released
[04:35:34] <kakuhen> i wonder if the illumos people will attempt implementing something like io_uring
[04:35:43] <kakuhen> i know they have their own compatibility thing for epoll, unlike BSD
[04:35:44] <sm2n> "All of this points ot being the right solution to use iouring for the things only it can do (I/O) and using epoll with a submission queue for the rest."
[04:38:53] <pl> It's a bit sad that after ~37 years Unix still hasn't fixed its I/O problem 
[04:40:09] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 248 seconds)
[04:42:13] *** Joins: aeth (~aeth@user/aeth)
[04:45:21] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Quit: ec)
[04:50:49] *** Quits: makomo (~makomo@user/makomo) (Ping timeout: 248 seconds)
[04:54:09] <kakuhen> hard to fix i/o when you're stuck a poorly designed i/o mandated by posix :))
[04:55:00] <kakuhen> unix won, and with it all the other (some of them better) filesystems died
[04:55:27] *** Joins: derelict (~derelict@user/derelict)
[04:55:32] <dave0> "Unix went from being the worst operating system available, to the best operating system available, without getting appreciably better."
[04:56:07] <lotuseater> but how?
[04:56:33] <sm2n> because everything better died
[04:56:46] <lotuseater> sad
[04:56:48] <dave0> lol yes
[04:57:17] <lotuseater> too less user base? or better marketing of UNIX?
[04:57:27] <kakuhen> and everything better that has existed in a unix-dominated world is now forever trapped inside academia
[04:57:36] <lotuseater> damn
[04:57:54] *** Quits: nirnam (~nirnam@1.46.140.64) (Remote host closed the connection)
[04:57:57] <kakuhen> http://0x0.st/-Jga.png
[04:58:04] <kakuhen> my favorite part of the posix spec
[04:58:38] <lotuseater> nice
[04:58:41] <kakuhen> another fun one is how memset can't actually be trusted, so you must use memset_s, but it's only available in C17 and later, so no C programmer will actually use it
[04:58:59] <lotuseater> o_O
[04:59:03] <kakuhen> I'm sorry, C11 and later.
[04:59:10] <lotuseater> it's ok
[04:59:21] <lotuseater> what's about memset?
[05:00:11] <kakuhen> >memset may be optimized away (under the as-if rules) if the object modified by this function is not accessed again for the rest of its lifetime (e.g. gcc bug 8537). For that reason, this function cannot be used to scrub memory (e.g. to fill an array that stored a password with zeroes). This optimization is prohibited for memset_s: it is guaranteed to perform the memory write.
[05:00:31] <kakuhen> in other words, you can't generally trust memset to do what you want it to do
[05:01:17] <lotuseater> and then you have to wait since that gcc bug is fixed
[05:02:01] <kakuhen> freebsd mitigated this issue with explicit_bzero, but that's only available on freebsd so nobody's going to use it
[05:02:16] <kakuhen> and very little people outside of freebsd will likely even know it exists
[05:02:25] <kakuhen> but yeah, fun stuff all around.
[05:02:25] <lotuseater> or begging and praying to language maintainers for years "please give us this new feature/syntax this way"
[05:03:01] <dave0> they do it if linux breaks
[05:03:17] <lotuseater> wooow
[05:03:29] <dave0> anything else it's "sorry"
[05:03:51] <lotuseater> crazy
[05:03:52] <kakuhen> oh also memset is prone to some UB that memset_s is not, which leaves you vulnerable to some types of attacks
[05:04:02] <kakuhen> https://www.freebsd.org/cgi/man.cgi?query=memset&sektion=3&apropos=0&manpath=FreeBSD+13.0-RELEASE+and+Ports
[05:04:03] -ixelp- memset(3)
[05:04:12] <kakuhen> cf. description, 2nd paragraph
[05:04:33] <lotuseater> kakuhen: thought about possible attacks too that offers
[05:05:01] <gilberth> OK. CCL uses Mach semaphores. And semaphore_timedwait on them shows the very, very same behaviour.
[05:10:17] <gilberth> So the question is: Could I block on a fildes and a Mach semaphore at the very same time? Perhaps not.
[05:14:15] *** Quits: copec (~copec@home.unaen.org) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[05:24:13] *** Joins: Qwnavery (~Qwnavery@user/qwnavery)
[05:25:19] <pl> dave0: there's a reason why Linux is not written in standards-compliant C, and only half of that is the impossibility to write an OS in standards-compliant C
[05:54:42] *** Quits: Qwnavery (~Qwnavery@user/qwnavery) (Quit: WeeChat 3.2)
[06:06:19] *** Quits: lotuseater (~user@p200300e7871b3f008a69ffac690ca7c7.dip0.t-ipconnect.de) (Quit: ERC (IRC client for Emacs 27.2))
[06:14:40] <gilberth> OK. ualarm(3) is dalyed too.
[06:15:49] <gilberth> Seems like Apple did a good job in identifying every way, one could implement a timeout.
[06:19:33] <gilberth> Coffeeeeeee! Waiter! Quick!
[06:23:40] <gilberth> No one there? Service at Lisp Café is miserable again.
[06:27:02] * pl sends a coffee on a drunken roomba
[06:28:09] <kakuhen> is it possible to get a beer in the lisp cafe
[06:29:29] <gilberth> Sure. What would it be for you? Some stout?
[06:30:00] <kakuhen> sure; i like dark beer the best
[06:30:47] <gilberth> Your lucky, we have that on tap, you're lucky.
[06:31:01] * gilberth jumps behind the bar.
[06:32:30] * gilberth pours in some stout and gets a little to much foam and shrugs.
[06:33:09] <gilberth> kakuhen: It has to settle a bit. A good taped beer takes its time. Sorry.
[06:33:20] <kakuhen> heh
[06:34:18] * gilberth carefully taps a bit more and puts the glass down again.
[06:35:20] * gilberth tries to look busy behind the bar and idly peek into the fridge.
[06:35:50] * gilberth slams the door shut and attends to the beer again.
[06:36:39] <gilberth> kakuhen: Here you go! Enjoy your beer! With compliments of the house.
[06:41:18] <pl> I wish I could find more of the lisp code from the ancient papers that begat roomba
[06:46:00] <gilberth> Are Roombas using Lisp?
[06:46:20] *** Quits: waleee (~waleee@h-98-128-228-119.NA.cust.bahnhof.se) (Ping timeout: 252 seconds)
[06:46:26] <gilberth> pl: Thanks for the coffee, btw. Not too much was spilled.
[06:46:48] <pl> gilberth: Roombas used to run lisp on the robot
[06:47:09] <gilberth> Cool. I didn't know that.
[06:47:18] <pl> the original generation had an embedded 68k with a bit of C support runtime and a cut-down lisp based on common lisp
[06:47:30] <pl> I *think* the on-robot lisp included compiler
[06:48:00] <gilberth> Could one get a listener? On a debug port of sorts?
[06:49:10] <pl> the architecture was supposedly derived from Rodney Brooks robots
[06:49:27] <pl> gilberth: the one paper I found that described it suggested it was possible
[06:49:34] <pl> or at least it was used in development
[06:51:28] <gilberth> Perhaps disabled when shipped. My elevator emergency phones had an accessible debug port, but secured. Still was nice to have that in the field.
[06:52:44] <gilberth> Although it is not Lisp. But I could peek around the internal state and invoke functions. Never got around though to implement a proper GDB interface.
[07:02:10] *** Joins: hayley (~theemacss@user/hayley)
[07:07:26] * gilberth wonders what it would entail to fork(2) CCL.
[07:08:46] <pl> gilberth: special patches like at ITA Software
[07:09:05] <pl> might still not work on recentish macos unless maybe done very early
[07:12:49] <gilberth> That's the problem. I want to do it way late at the time the process decides to become a "foreground application" aka a GUI application. When this is the first thing I would in main to fork(2) my helper, that wouldn't be a problem, I guess. But I could begin with that. And I need to fork(2) this helper once and hope it would not die.
[07:15:12] <gilberth> Hugh?! You could actually get a window without being a "foreground process". There just is no menu bar and you're not in the dock.
[07:15:41] <pl> gilberth: you do need to create it from initial thread or the process explodes
[07:16:49] *** Joins: Gnuxie (~gnuxie@user/gnuxie)
[07:17:12] <gilberth> pl: Well, that part would be easy. And I could live with the child process not using Lisp at all.
[07:18:01] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 248 seconds)
[07:19:51] * hayley uploaded an image: (38KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/ZsXhtWlfIHOUiQQwsguiwwxv/Screenshot_2021-08-13_12-55-10.png >
[07:19:52] <hayley> At least it's not "Facebook but better".
[07:20:26] <gilberth> Actually it could come from some binary, but then you need to carry that binary file around and trigger this silly "Alarm! Alarm! You're about to execute unsigned, unsafe code! Wanna unmount your network volume?" stuff.
[07:20:47] <hayley> WHO WOULD WIN: process isolation, sandboxing OR one weird binary boi
[07:22:25] <hayley> Still no known uses for memory isolation.
[07:23:57] <gilberth> Rather tell me who came up with this "Unmount your network volume" crap.
[07:26:11] <hayley> Andrew Tanembaum?
[07:26:17] <gilberth> Don't people realize that all this "security" stuff is there to cover up bugs?
[07:26:22] <gilberth> Tanenbaum?
[07:26:29] <hayley> Something like that.
[07:27:06] <gilberth> I mean, it's me who actively asks the system to execute some binary. I would appreciate it, if the OS would just honour my wish.
[07:28:49] <gilberth> What comes next: A captcha before I use a compiler? After all, /me could be an evil bot, no?
[07:29:03] <kakuhen> u2f libraries are a mess on macports right now :s
[07:29:13] <kakuhen> this will be the first time ever i make more than one PR in a day; so far I'm on 3 and counting
[07:29:39] <dave0> gilberth: you could be an evil bot right now!
[07:29:43] <gilberth> But then gcc hw.c && ./a.out does not work on a network volume anymore with Bug Sur.
[07:30:14] <gilberth> dave0: Yes, and ixelp is my best friend, so better be careful!
[07:30:52] <kakuhen> gilberth: if you mean literally fork() in ccl, then I think there's already an extension for that
[07:31:45] * hayley managed to fuck up git history again.
[07:31:53] <pl> kakuhen: doesn't work if you plan on continuing running in the same image, iirc
[07:31:55] <kakuhen> sorry I am thinking of (ccl::pipe), close but not quite
[07:31:56] <gilberth> kakuhen: Well, I perhaps won't use Lisp after the fork(2), anyway. But then I am still planning.
[07:32:25] <kakuhen> (progn (ql:quickload "osicat") (break "Do not continue please.") (loop :do (osicast-posix:fork)))
[07:32:38] <kakuhen> s/osicast/osicat
[07:32:46] <gilberth> Heh, (#_pipe ..) would do :)
[07:33:15] <kakuhen> i wonder how much effort it'd be to turn sb-posix into a bunch of small, independently compilable modules
[07:33:30] * gilberth tries (#_fork).
[07:33:38] <kakuhen> sometimes i wonder to myself what forces lisp software to only work on sbcl, and then i realize it's because all the wrapper libraries out there for posix don't even come close to what sb-posix can do
[07:34:09] <kakuhen> trust me, I've tried the major ones: uiop, osicat, and this other one whose name i forgot.
[07:34:34] <kakuhen> in any case, technically anything sb-posix does can be done with enough CFFI boilerplate
[07:34:51] <kakuhen> and ironically that's what osicat-posix does to implement syscalls on lisps without an extension for it already
[07:34:54] <gilberth> Well, I am happy to be non-portable, would I really need to issue syscalls.
[07:36:11] <kakuhen> I think RS had some proposals for a "sane" posix library for CL, but it hasn't materialized yet.
[07:37:00] <hayley> http://metamodular.com/POSIX-API/ *has
[07:37:01] -ixelp- POSIX system-call API for Common Lisp
[07:38:41] <gilberth> Hmm. (when (zerop (#_fork)) (loop (sleep 100000))) seems to do no harm.
[07:41:06] <gilberth> hayley: But lstat, and fstat I don't see anything there, which the CL standard does not provide yet.
[07:41:31] <gilberth> What this thought as a POSIX interface to implement CL and not complement it?
[07:41:37] <gilberth> * Was
[07:42:30] <gilberth> And for stat we have the subset file-write-date and file-author.
[07:44:50] <gilberth> What I miss at times for instance is creating soft and hard links.
[07:53:21] <hayley> https://www.youtube.com/watch?v=xaK4r0pQaJ0
[07:53:22] -ixelp- Interstellar Overdrive - YouTube
[08:01:57] *** Quits: phantomics (~phantomic@71-218-228-208.hlrn.qwest.net) (Read error: Connection reset by peer)
[08:23:57] * gilberth is almost tempted to ask on stackoverflow.
[08:38:52] <kakuhen> right now i'm getting stumped by a problem with a package that depends on GCC
[08:39:08] <kakuhen> the configure script hangs on "checking whether the C compiler works..." after I make it use GCC, heh.
[08:40:19] <hayley> Can it say "no"?
[08:42:31] <kakuhen> nope
[08:42:35] <kakuhen> It just hangs on that line
[08:42:45] <kakuhen> then gcc-mp-11 stays idle, doing nothing
[08:43:02] <hayley> Sorry, I meant "can the configure script ever find a compiler which doesn't work?"
[08:43:13] <kakuhen> no idea
[08:43:21] <kakuhen> anyway, the compiler's state is "sleeping"
[08:43:35] <kakuhen> when i use apple clang instead of gcc, then the config script works just fine
[08:43:49] <kakuhen> but then i get an error in the linking stage because -wrap isn't supported by dyld
[08:47:09] *** Joins: nihaal (~nihaal@117.96.193.218)
[08:47:27] <gilberth> hayley: It can. I have seen sth like "Compiler is unable to produce executables." or some such.
[08:47:38] <hayley> gilberth: Wow.
[08:48:24] <kakuhen> im now trying to compile outside of macports and i got an error ive never gotten before
[08:48:26] <hayley> https://www.youtube.com/watch?v=aGhsb4aItKA
[08:48:26] -ixelp- Nick Mason's Saucerful Of Secrets - Bike (Live at The Roundhouse) [Official Audio] - YouTube
[08:48:27] <kakuhen> "'a2x' is missing on your system."
[08:48:27] * hayley decides to go for a bike ride.
[08:48:47] <kakuhen> a quick search shows me asciidoc supplies this a2x thingy, but we'll see soon
[08:49:34] <kakuhen> OK it somehow compiles file using apple clang but macports somehow makes dyld complain about wrap
[08:49:44] <kakuhen> i love it when tcl scripts mess up configure scripts in subtle, hard-to-determine ways.
[08:52:38] <gilberth> hayley: <https://termbin.com/5zkjj>
[08:53:10] <gilberth> kakuhen: But why would it just hang?
[08:53:15] <kakuhen> no clue
[08:53:26] <kakuhen> the logs dont give me any useful info despite being "verbose"
[08:53:47] <kakuhen> the very last line of the log is "checking whether the C compiler works..." and gcc stays asleep
[08:54:01] <kakuhen> like gcc is literally doing nothing
[08:54:01] <gilberth> *sigh*
[08:54:20] <kakuhen> methinks some deadlock scenario is happening in the background, but i got the build to work OUTSIDE of macports with apple clang
[08:54:44] <gilberth> Strange.
[08:54:45] <kakuhen> so now i need to figure out why the heck macports is changing the build environment such that it fails on apple clang and hangs ongcc
[08:54:47] <kakuhen> on gcc*
[08:55:39] <kakuhen> The logs are telling me "ld: unknown option: --wrap=strdup"
[08:55:55] <kakuhen> But I was able to compile everything just fine outside of macports
[08:56:00] <kakuhen> this is very epic
[08:56:43] <gilberth> Oh dear. One of the reasons, I never update^Wdowngrade my system.
[08:58:40] <kakuhen> but DUDE check out these new icons !!
[08:59:32] <kakuhen> >AppKit notes: everything useful has been deprecated; everything you got used to now has completely different behavior
[09:00:00] *** Quits: nihaal (~nihaal@117.96.193.218) (Ping timeout: 268 seconds)
[09:00:28] <kakuhen> >miscellaneous notes: we feel like yanking out python, perl, and ruby from the system just because, lol.
[09:01:30] *** Joins: nihaal (~nihaal@117.96.193.218)
[09:04:29] <gilberth> kakuhen: Yes. And telnet.
[09:04:46] <kakuhen> and ftp ;_;
[09:04:55] <gilberth> Really?
[09:05:07] <kakuhen> yeah they yanked it out, alongside telnet and other netutils, for being """insecure"""
[09:05:32] <gilberth> lol
[09:05:34] <kakuhen> i dont even think half the mac users out there ever mindlessly use ftp, let alone open a terminal
[09:06:02] <kakuhen> and im willing to bet a few dollars people who use ftp in $curr_year know the usual risks involved with it
[09:06:21] <kakuhen> but whatever, i guess you have to cut down some stuff in base when you want to import gigabytes of iOS junk
[09:06:23] <gilberth> It's sad. One thing I liked about Macs was, that there is a Unix beneath. Seems like that will be a thing of the past.
[09:06:40] <kakuhen> right?
[09:07:04] <kakuhen> i dont think apple has cared about the unix foundation since probably bertrand serlet left
[09:07:12] <kakuhen> he was one of the last dudes from NeXT who left Apple
[09:07:24] <gilberth> When was this?
[09:07:36] <kakuhen> around the time lion (10.7) released
[09:07:38] <kakuhen> so 2010 or so
[09:07:52] <kakuhen> lion was the last operating system he supervised, and it was also the last to update goodies like Tcl/Tk
[09:08:29] <gilberth> 2011 or so was as I switched to Macs.
[09:08:55] <kakuhen> but yeah, the nexties are pretty much gone and most people working on the mac at apple only care about merging it with iOS, probably because they don't actually use Macs for more than just facebook 
[09:08:58] <kakuhen> strong opinion, i know.
[09:09:17] <gilberth> But yes, in retrospective it fits. It was down-hill since then.
[09:09:49] <gilberth> kakuhen: Kiddies.
[09:10:11] <kakuhen> im gonna stay on catalina as long as i can just because it's the last one that lets you load KEXTs on demand, heh
[09:10:24] <kakuhen> later versions of mac os need you to reboot the system just to load/unload a kext >_>
[09:10:45] <kakuhen> believe it or not, but some people outside of the hackintosh community use KEXTs! I use it so that my system can support ZFS.
[09:11:02] <kakuhen> i also have a kext that lets me record my audio output 
[09:11:29] <kakuhen> im afraid this is one thing they're going to phase out, given the advent of system extensions.
[09:11:33] <gilberth> Does it want to become a Windows? "You moved the mouse, for that taking effect you need to reboot. Restart? [Now] [Later] [I don't know]"
[09:11:54] <kakuhen> ironically, catalina really makes it feel like windows vista
[09:12:09] <kakuhen> download a new app, and the most basic things like accessing your documents will give a popup asking for your explicit permission.
[09:12:57] <kakuhen> this reminded me when I used vista for the time and the most basic things would bring that damn UAC popup
[09:13:07] <gilberth> Yes, silly. I never really used Windows for anything else than to launch games.
[09:13:09] <kakuhen> it got a lot better in 7 at least, in future versions of macos, gatekeeper is only doubling down on its annoyance.
[09:13:54] <kakuhen> but yeah -- in the longer term i may end up switching to linux or freebsd or whatever; time will tell.
[09:14:34] <gilberth> Honestly, I consider to move back to Linux for a desktop, too.
[09:14:48] <kakuhen> once catalina can't run half the software i want it to run; I'll see how the latest mac os is doing and decide whether I'd be better off with Fedora or some other polished, easy-to-use distro.
[09:15:03] <kakuhen> I used to use Ubuntu back in 2010-2013 and have fond memories of it, so I know what I'm getting into, kinda.
[09:16:48] <gilberth> Well, my need are low. What GUI stuff do I use? The browser, Preview.app, and Mail.app. Not much mmore. Oh, and Emacs. And my ancient EDA, I have, but that is a Linux application anyway.
[09:17:21] <kakuhen> I do use some proprietary softwares that are only available on Windows and Mac, but I heard WINE is a looot  better than it was in 2010.
[09:18:09] <gilberth> Wouldn't some VM do? Aren't there any good offers?
[09:18:24] <kakuhen> yeah i could probably run a mac os vm if i really wanted to use final cut
[09:18:29] <kakuhen> or i can just use sony vegas in wine and achieve the same thing
[09:18:32] <kakuhen> or see how kdenlive's doing
[09:19:03] <kakuhen> i think ableton live should run ok in wine, albeit with a lot more audio latency than if i ran it on my mac
[09:19:25] <kakuhen> besides those particular softwares, everything i use should run natively on linux
[09:19:42] <gilberth> Unfortunatly the kids made X11 practically non-usable over a network. Ever tried to run firefox over a LAN?
[09:19:48] <kakuhen> oh I guess there is LINE, too, but I can just use my phone for that
[09:20:03] <kakuhen> >Ever tried to run firefox over a LAN?
[09:20:04] <kakuhen> nope
[09:20:13] <kakuhen> I've used XQuartz to forward a MATE desktop over SSH though
[09:20:19] <kakuhen> interesting experience and it is kinda laggy i'll admit
[09:20:54] <gilberth> X11 wasn't designed as a mere blittering protocol. This all used to work like a snap.
[09:21:44] <gilberth> At my company e.g. my local machine was just a X11 terminal. Worked like a charm.
[09:22:12] <kakuhen> wow
[09:22:30] <kakuhen> I know my uni still has students use X11 over a network for some circuit software, but it is pretty slow.
[09:22:31] <gilberth> But that was in 2003 to 2012. Prior to that there was a time, I even used an X11 terminal with Gnome at home.
[09:24:19] <gilberth> kakuhen: <http://bauhh.de/free-clim/free-clim-remote.mov> this is over DSL on a >30ms latency connection from the hospital to my machine at home.
[09:24:50] <kakuhen> I see
[09:25:36] <gilberth> kakuhen: On a likewise connection from Danmark home to Germany >450km over LTE and DSL I used to use my EDA application.
[09:26:36] <gilberth> Even from here home (100km, >30ms, just ~30Mbit/s).
[09:28:36] <gilberth> Hence, it is silly at best, that recent applications are laggy on a 1Gb/s LAN.
[09:29:01] <kakuhen> yeah it does sound silly
[09:31:43] <gilberth> And X11 itself was designed for as less round-trips as possible, e.g. And with my CLX backend, I am very careful to avoid round-trips like the plague.
[09:32:45] <kakuhen> im still trying to figure out why this configure script is hanging 
[09:32:54] <kakuhen> i managed to get the gcc compiler working just fine outside of macports lol
[09:33:32] <gilberth> I wouldn't know how to even begin debugging that.
[09:34:36] <gilberth> Perhaps attach a debugger to the hung process? Oh, not useful, this is all C :(
[09:36:44] <kakuhen> hehe right
[09:37:00] <kakuhen> maybe with a really intricate setup involving lldb i can do something
[09:37:04] <kakuhen> too much work just for a dumb package script though
[09:38:33] <kakuhen> something tells me that clang shouldn't lie about being gcc when it doesn't support every GNU extension...
[09:40:10] <kakuhen> OK turns out explicitly specifying "clang" brings the same linker error
[09:40:17] <kakuhen> So the configure script doesn't even do its job >.<
[09:40:43] <kakuhen> every major C compiler seems to have its own eccentric way of wrapping functions
[09:46:19] <kakuhen> ok turns out both macports and the package are broken -- the install script seems to forget that mac os doesn't like you installing stuff into /usr/lib anymore
[09:46:41] <kakuhen> But the install script also does a braindead thing where it assumes "oh ok, PAMDIR=/usr/lib, therefore our libraries must go in there, regardless of PREFIX"
[09:48:03] *** Quits: clothespin_ (~awolven@c-73-209-95-92.hsd1.il.comcast.net) (Quit: Leaving)
[09:50:31] <gilberth> kakuhen: It ignores --prefix= ? I would be very angry about that, as I never install in /usr/lib, even not with Linux. It's /opt/acme/lib or ~/opt/acme/lib for me.
[09:50:43] <kakuhen> oh this is a linux-ism btw ;)
[09:51:01] <kakuhen> I used to port stuff to FreeBSD and the #1 source of errors were linux softwares blindly assuming all your libraries will be in /usr/lib
[09:51:08] <kakuhen> To the point where many packages HARD CODE THE LIBRARY PATH
[09:51:31] <gilberth> Oh, you mean not using at least /usr/local is a Linux-ism?
[09:51:34] <kakuhen> i dont even know if /usr/local or /opt is a thing on linux tbh
[09:51:35] <kakuhen> yes
[09:52:07] <kakuhen> everything seems to install wherever it wants -- but it most often likes to shub itself in /usr/bin
[09:52:08] <gilberth> I don't know. I am used to that. Is that a SYSV-ish thing? I really have no idea.
[09:52:16] <kakuhen> no idea
[09:52:28] <hayley> https://www.youtube.com/watch?v=RH1kOgbLqSY
[09:52:29] -ixelp- YouTube Comments Suggestions 1: Oil Sausage - YouTube
[09:52:42] <gilberth> But then Linux is pretty SYSVish.
[09:53:29] *** Joins: wallymathieu (~wallymath@81-234-151-21-no94.tbcn.telia.com)
[09:53:35] <gilberth> Anyhow, installing where "vendor" stuff resides is no good idea.
[09:54:28] <kakuhen> right; this is one thing I like about the BSDs... they very cleanly separate what is the OS' binaries and libraries, and what is the users' binaries and libraries
[09:54:53] <kakuhen> I am very partial toward the BSDs' hier(7)
[09:56:53] <kakuhen> oh my god i got the thing to finally work in macports 
[09:57:27] <kakuhen> I am able to reproduce the error when using trace mode (which is basically a special mode that hides files from the package so that your pre-installed packages do not interfere, and you can find out the actual dependencies of the software).
[09:57:40] <gilberth> I googled and immediately found the "File System Hierarchy Standard" maintained by the Linux Foundation. Ironic. And it mentions /usr/local and /opt
[09:57:41] <kakuhen> With trace mode enabled, the configure script hangs on checking whether gcc can supply binaries.
[09:58:01] <kakuhen> gilberth: p.s. you could've done "man 7 hier" in your terminal ;)
[09:58:17] <gilberth> :)
[09:58:23] <kakuhen> the basic sketch of hierarchy goes back all the way to 7th ed unix
[09:59:12] <gilberth> No /opt :(
[09:59:38] <kakuhen> a lot of apple manpages are straight up ripped off 4.3 BSD and never changed since then
[09:59:48] <kakuhen> some stuff gets updated, and some stuff even has typos
[09:59:58] <kakuhen> sometimes you can even find them ripping off old NetBSD manpages
[10:00:04] <gilberth> I figured that. I wonder when man will be gone.
[10:00:11] <kakuhen> hopefully never :<
[10:00:22] <kakuhen> they still maintain manpages for darwin-specific utilities
[10:00:34] <kakuhen> namely, install-name-tool, codesign, bless, and so on.
[10:00:41] <gilberth> Well, where are all the man pages for NextStep^WCocoa stuff?
[10:00:55] <kakuhen> man defaults goes back to the NeXTSTEP days
[10:01:00] <kakuhen> and another command too, but that's it really.
[10:01:51] <gilberth> kakuhen: Wouldn't it be saner, to just get a NeXTcube?
[10:02:20] <kakuhen> they are stupidly expensive since iToddlers have too many cash and gobble them up despite not knowing how to even use the damn things.
[10:02:43] <kakuhen> whenever I see a NeXT cube going up on ebay, they sell for some insane amount like $30,000
[10:03:06] <kakuhen> at that point I may as well build a Talos II Workstation or something else exotic
[10:03:22] <hayley> gilberth: authentic German sosig https://www.youtube.com/watch?v=dckhsVvbNTU
[10:03:23] -ixelp- Chicken Tikka Masala Sausage - YouTube
[10:03:28] <gilberth> I saw and tinkered with one as it was new. That was just "wow!". No hope though that my dad would buy me one at that days.
[10:04:04] <hayley> Really, Apple fantoddlers^Winfants^Wfetuses buy NeXT devices?
[10:04:16] <kakuhen> believe it or not, but yes
[10:04:37] <kakuhen> NeXT cubes get auctioned occasionally on ebay, and the bids quickly stack to unbelievably high prices
[10:05:10] <kakuhen> for some reason, it's also becoming a trend to buy PowerMac G5s and gut them.
[10:05:12] <gilberth> hayley: You really believe Germans feed from sausages only?
[10:05:12] <hayley> Apparently once someone made an insult with s/kiddie/fetus/ and now I can't not think of it while making such an insult.
[10:05:15] <kakuhen> (as well as SGI Octanes)
[10:05:49] <hayley> gilberth: No, you eat sauerkraut too.
[10:06:12] <gilberth> kakuhen: Really? As I was idly looking for NeXT machine a few years ago the prices were not that absurd.
[10:06:28] <hayley> https://www.youtube.com/watch?v=WV7FIG95Gh4 based sosig
[10:06:29] -ixelp- Crab Cake Sausage - YouTube
[10:06:38] <gilberth> hayley: Don't mix up Bavaria and Germany. It's annoying.
[10:06:59] <kakuhen> gilberth: Yeah, I'm being serious. A few months ago I found a NeXT cube go on auction and the starting bid was like $20,000. It was *still* increasing afterwards.
[10:07:11] <kakuhen> They rarely go on auction, but when they do, the bids skyrocket.
[10:07:22] <gilberth> hayley: I just can't stand the Bavarian stuff they call cuisine.
[10:07:34] <kakuhen> Retro computing is starting to get more attention from mainstream internet, and with it, lots of people with big pockets.
[10:07:50] <hayley> gilberth: Okay, what about the crab cake sausage?
[10:08:04] <gilberth> Well, then I keep my VT1200. It might be valuable.
[10:08:41] <gilberth> hayley: Poor crabs.
[10:08:50] <hayley> Sadly the scarcity of old parts doesn't make people start to think it is a dumb idea, rather it leads to terminal boredom.
[10:10:43] <kakuhen> maybe the people discovering retro computing will get into LispMs :3c 
[10:10:54] * gilberth types "nextcube" to ebay and gets "FRIDAY AFTER NEXT, Ice Cube, Mike Epps, DVD"
[10:11:48] <hayley> kakuhen: No, it is really a projection of what they consider "old" as escapism from what we have today. So a Lispm with its fancy programming language and CLIM^WDynamic Windows won't work.
[10:12:21] <gilberth> kakuhen: There were two on sale recently not far away, I almost got them, wouldn't it be for the space, that I'll not have plenty of space in the near future.
[10:13:07] * hayley types "azul vega java" to ebay and gets a $14.5k machine.
[10:13:58] <kakuhen> the only thing that stops me from trying to get an old unix workstation is the maintenance, power bills, and the space
[10:14:19] <kakuhen> carrying around a bunch of old computers doesnt sound fun when moving
[10:14:19] <hayley> gilberth: IMO sell the RAM second hand (all 384 GB) and, assuming this shortage continues to hold, you'll make the $14,500 back.
[10:14:37] <gilberth> hayley: For your query I get a Poker table.
[10:14:50] <kakuhen> with that said, I do attempt to not mindlessly throw away what I already have 
[10:15:12] <kakuhen> I have a pair of AKG K240s that I bought when I was in 8th grade. I am about to graduate from uni. They still work. I've only had to replace the cable twice all this time.
[10:15:27] <kakuhen> Nearly a decade of usage and still going strong
[10:15:30] <kakuhen> These headphones are never obsolete
[10:19:03] <gilberth> I have a Blaupunkt radio from 1930ish, three X11 terminals, said VT1200 and two HPs, a vintage Laserjet, a CP/M 68k machine (with Lisp and REDUCE!), a CP/M-80 machine. Three ancestral portraits from 1700 and a bit, a clock with a mercury pendulum from the same era.
[10:19:48] <hayley> I seriously remember there being something for consumer electronics about RF shielding; are there regulations on RF shielding?
[10:20:14] <gilberth> Unfortunatly I don't have my IBM XT anymore. These raise in price, too.
[10:21:58] <gilberth> hayley: Sure. I bet you have that down-under, too. Called EMC. Pretty expensive to do the tests.
[10:23:35] <kakuhen> off-topic but, I just learned that trace-mode in macports is just cursed
[10:23:44] <kakuhen> SBCL fails to build with trace mode no matter what, so the committers just let it fail on trace mode lol.
[10:39:59] * hayley sees an XMM0 in the IR visualizer and looks slightly surprised.
[10:46:02] <hayley> Another neat idea for visualising latency: https://twitter.com/xssfox/status/1426054486041055241
[10:54:21] *** Quits: wallymathieu (~wallymath@81-234-151-21-no94.tbcn.telia.com) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[10:54:44] *** Joins: shka (~herr@109.231.62.239)
[11:59:25] *** Joins: Qwnavery (~Qwnavery@user/qwnavery)
[12:26:20] *** Joins: makomo (~makomo@user/makomo)
[12:28:28] <kakuhen> OK I have made 5 PRs to MacPorts in a day; that's enough for now
[12:28:48] <kakuhen> all of this just so that I can use MacPorts to do all the fancy PAM stuff with a SoloKey  that arrived recently.
[12:53:50] <hayley> https://www.youtube.com/watch?v=Ob9AHXuIEjI "Down in the park where the Mach men meet..."
[12:53:51] -ixelp- Down in the Park (Live London 1980) - YouTube
[13:08:20] <Qwnavery> hayley: you seem to share a lot of music?
[13:08:27] <hayley> Qwnavery: yes
[13:08:37] <Qwnavery> pretty good stuff too. good taste.
[13:09:18] <Qwnavery> what genres do you normally listen too, I might have some reccomendations.
[13:09:43] <Qwnavery> s/too/to/
[13:10:37] <hayley> Gary Numan singing about sci-fi robot-overthrown hellholes, prog, new wave in no order?
[13:10:55] <Qwnavery> heh
[13:11:40] <Qwnavery> if you like chipwave esq stuff, you might like this https://fearofdark.bandcamp.com/album/the-coffee-zone
[13:11:42] -ixelp- The Coffee Zone | Fearofdark
[13:12:49] <Qwnavery> if you're more into synths; https://www.youtube.com/watch?v=NWQKiefZ-XI
[13:12:49] -ixelp- Perturbator (Feat. Noir Deco) - Technoir (Dark Synthwave AMV) - YouTube
[13:13:04] <dave0> oh wow it reminds me of wonderboy in monsterland
[13:15:14] <Qwnavery> I know of lots of genres and artists that may or may not be to your taste due to their obscure nature
[13:15:48] <Qwnavery> this guy mixes chiptune and metal: https://www.youtube.com/watch?v=t6KFfYdNPh8
[13:15:48] -ixelp- MASTER BOOT RECORD - INTERNET PROTOCOL - YouTube
[13:17:10] <Qwnavery> :D
[13:17:44] <dave0> sometimes i like soft music in the background
[13:18:06] <dave0> other times i like rock n roll :-)
[13:18:44] <Qwnavery> dave0: Tool?
[13:18:51] <dave0> this song has been in my head for 2 days    https://youtu.be/Hn-enjcgV1o
[13:18:52] -ixelp- Player - Baby Come Back - YouTube
[13:19:37] <dave0> Qwnavery: is alright, my sister used to have their album
[13:19:47] <Qwnavery> Thanks. Now it's going to be in my head for 2 days.
[13:20:02] <dave0> oops you clicked :-p
[13:20:17] <Qwnavery> At work, this song would always play on closing.
[13:20:32] <dave0> lol
[13:20:38] <Qwnavery> Stocking beers in the fridge to this song.
[13:20:50] <dave0> happy memories!
[13:20:59] <Qwnavery> Aye!
[13:26:46] <kakuhen> unrelated genre, but i've been listening to this today https://www.youtube.com/watch?v=fA7IjyVsK6M
[13:26:47] -ixelp- My Way - YouTube
[13:44:07] *** Joins: kevingal (~quassel@2a02:8084:4140:f300:c9dc:5689:c333:f2d7)
[14:13:44] <hayley> https://www.youtube.com/watch?v=WqRnblmVjRc
[14:13:44] -ixelp- Abaddon's Bolero (Live At Olympic Stadium, Montreal, 1977) - YouTube
[14:18:06] *** Quits: kakuhen (~kakuhen@user/kakuhen) (Quit: Leaving...)
[14:18:25] *** Joins: luis3 (~luis@lisp/luis)
[14:18:48] *** Quits: Qwnavery (~Qwnavery@user/qwnavery) (Quit: WeeChat 3.2)
[14:21:55] *** Quits: luis (~luis@lisp/luis) (Ping timeout: 258 seconds)
[14:21:56] *** luis3 is now known as luis
[14:31:10] *** Quits: lad (~lad@user/lad) (Ping timeout: 256 seconds)
[14:55:34] <hayley> https://blog.bracha.org/exemplarDemo/exemplar2021.html?snapshot=BankAccountExemplarDemo.vfuel# "How is a Programmer Like a Pathologist?"
[14:55:35] -ixelp- How is a Programmer Like a Pathologist?
[15:09:37] <Alfr> Not sure the author is sane ... "In fact, we can use the exemplar information in the opposite direction, to generate tests, or type information."
[15:13:56] <hayley> Tests? Sure, if the output looks right. Types? From a documentation POV, sure. From a correctness POV, probably not.
[15:14:30] <hayley> http://www.vpri.org/pdf/rn2017002_memoization.pdf "The Surprising Connection Between Memoization, Test Cases, Runs with Example Data, and the Method Finder"
[15:39:13] *** Joins: random-nick (~random-ni@87.116.177.79)
[16:33:34] <sm2n> This kind of thing would be best effort
[16:33:55] <sm2n> but program synthesis has had some decent levels of success in general
[16:34:30] <sm2n> at any rate, it'd be more predictable than whatever openai's stuff spits out
[16:35:11] *** Joins: wallymathieu (~wallymath@81-234-151-21-no94.tbcn.telia.com)
[16:36:54] *** Joins: selwyn (~selwyn@user/selwyn)
[16:37:09] *** Quits: selwyn (~selwyn@user/selwyn) (Remote host closed the connection)
[16:37:33] *** Joins: selwyn (~selwyn@user/selwyn)
[16:43:34] <Alfr> hayley, I'd like to see it automatically generate anything remotely sensible for (defun (n) (if (fibonaccip n) n (loop))) or some such.
[16:44:51] <Alfr> (Based on examples only.)
[16:45:41] <hayley> https://www.youtube.com/watch?v=Niw_cOHiY1w
[16:45:41] -ixelp- Praying to the Aliens - YouTube
[16:49:28] <sm2n> existing type systems can already handle that...
[16:53:00] <hayley> Alfr: Eh, even on the "good" ML type system we might still type it as Int -> Int, and people are apparently fine with that.
[16:54:10] <hayley> There are more powerful type systems, sure, but it is on par with the not-normie but not-far-out-#lispcafe-subject type systems.
[16:54:53] *** Quits: wallymathieu (~wallymath@81-234-151-21-no94.tbcn.telia.com) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[17:00:38] <Alfr> If you look at it, sure. (Though I'm not really happy with the "-> Int" part.) But how would such a system deduce a type or even a valid test case based on some finite number of input-output pairs? Say: (0, 0), (1, 1), (2, 2), (3, 3), (4, does-not-return), (5, 5)
[17:05:05] *** Quits: Alfr (~Alfr@user/alfr) (Ping timeout: 252 seconds)
[17:05:40] <hayley> I think those would be the test cases; the programmer would come up with examples, run them, check if they are correct, then put them in a database. IIRC some Python library does all but the last on examples in docstrings.
[17:06:16] <hayley> "Does not return" is tricky to do in a portable way though. You could use a timeout, but a slow computation is slower on a slower machine...
[17:08:50] *** Joins: Alfr (~Alfr@user/alfr)
[17:28:10] <selwyn> > Pixar came from a weird combination of George Lucas getting divorced and the visionary Alan Kay suggesting to Steve Jobs that he buy a tiny special effects unit from Lucas, which Jobs did with completely wrong expectations about what would happen. For unexpected reasons this tiny unit turned into a huge success — as Jobs put it later, he was ‘sort of snookered’ into creating Pixar. Now Alan Kay says he struggles to get tech billionair
[17:28:10] <selwyn> es to understand the importance of Victor’s ideas.
[17:28:15] <selwyn> hayley: is this true
[17:29:11] <hayley> Dunno which Victor it is, but I could imagine it.
[17:29:38] <hayley> Kay did some "advertising" for Apple, and Squeak used to be an Apple project.
[17:29:51] <selwyn> bret victor i think
[17:32:24] <hayley> Okay I'm tired of that guy's shit
[17:32:48] * hayley uploaded an image: (125KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/ckSycnXfkVqnQQCnfWYNeVWg/randy.png >
[17:33:28] <hayley> I will personally build a guillotine if necessary to prevent tech billionaires from getting ideas
[17:36:47] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[17:53:41] <selwyn> > Ps. While I have talked to Michael Nielsen and Bret Victor about their ideas, in no way should this blog be taken as their involvement in anything to do with my ideas or plans or agreement with anything written above. I did not show this to them or even tell them I was writing about their work, we do not work together in any way, I have just read and listened to their work over a few years and thought about how their ideas could improve government.
[17:53:42] <selwyn> lol
[17:56:25] * hayley uploaded an image: (129KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/gYaRbubsdOYGGyqchKbYQclK/producer-consumer.png >
[17:56:40] * hayley finds the egoist Self theory to be under-memed
[18:24:48] *** Quits: kevingal (~quassel@2a02:8084:4140:f300:c9dc:5689:c333:f2d7) (Remote host closed the connection)
[18:31:40] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[18:47:34] *** Quits: pjb (~pjb@user/pjb) (Ping timeout: 258 seconds)
[19:02:49] *** Joins: wallymathieu (~wallymath@81-234-151-21-no94.tbcn.telia.com)
[19:08:40] *** Joins: pjb (~pjb@user/pjb)
[19:15:13] *** pjb is now known as Guest659
[19:15:52] *** Quits: Guest659 (~pjb@user/pjb) (Remote host closed the connection)
[19:16:56] *** Joins: pjb (~pjb@user/pjb)
[19:17:59] <dave0> nite all
[19:18:20] *** Joins: Mandus (~aasmundo@0.51-175-33.customer.lyse.net)
[19:19:03] *** Quits: dave0 (~davezero@069.d.003.ncl.iprimus.net.au) (Quit: dave's not here)
[19:46:23] *** Quits: nihaal (~nihaal@117.96.193.218) (Quit: nihaal)
[19:58:36] <gilberth> Good morning #lispcafe!
[20:01:59] <Alfr> Hello gilberth.
[20:17:55] *** Quits: derelict (~derelict@user/derelict) (Ping timeout: 268 seconds)
[20:19:21] *** Joins: robin_ (~robin@user/terpri)
[20:20:53] *** Quits: robin (~robin@user/terpri) (Ping timeout: 252 seconds)
[20:34:21] *** Joins: robin (~robin@user/terpri)
[20:35:17] *** Quits: robin_ (~robin@user/terpri) (Ping timeout: 258 seconds)
[20:36:10] *** Quits: robin (~robin@user/terpri) (Remote host closed the connection)
[20:37:26] *** Joins: robin (~robin@user/terpri)
[20:37:55] *** Quits: krl (~krl@h-158-174-122-239.A357.priv.bahnhof.se) (Remote host closed the connection)
[20:40:04] *** Joins: derelict (~derelict@user/derelict)
[20:40:57] *** Quits: fengshaun (~fengshaun@68.69.214.210) (Quit: bibi!)
[20:41:15] *** Joins: fengshaun (~fengshaun@68.69.214.210)
[20:46:12] *** Quits: robin (~robin@user/terpri) (Remote host closed the connection)
[20:49:13] *** Joins: robin (~robin@user/terpri)
[20:53:40] *** Quits: robin (~robin@user/terpri) (Remote host closed the connection)
[20:54:05] *** Joins: robin (~robin@user/terpri)
[20:55:55] *** Joins: lotuseater (~user@p200300e7871b3f008a69ffac690ca7c7.dip0.t-ipconnect.de)
[21:10:46] *** Quits: santiagopim (~user@90.166.59.254) (Remote host closed the connection)
[21:18:13] <gilberth> OK. It seems like pause(2) is not affected, while alarm(2) is.
[21:19:18] <gilberth> Let's see whether signals would make select(2) return promptly.
[21:37:10] <gilberth> A Mach semaphore wait also is interupted by a signal. So it might be tempting to use signals to implement any form of timeouts. Nasty. Signals come from outside and must be redistributed to the proper thread, as they must come from another process. And signals could get lost, I guess.
[21:38:07] *** Joins: selwyn (~selwyn@user/selwyn)
[21:45:41] *** Joins: christophergray (~christoph@190.148.50.55)
[21:46:43] <gilberth> I could however have a common sleep helper thread in Lisp, which talks to a sleep daemon, which is an external process, over a pipe. Due times would be send to that daemon by each thread wanting to wait with timeout. The daemon would ping, over the pipe, the sleep helper thread, which awakes from its blocking read(2) and redistributes to the initiating thread. *sigh*
[21:47:03] <gilberth> This feels short of implementing a scheduler.
[21:47:55] <Alfr> Just abandon macos?
[21:48:12] <gilberth> So. Thread A -- sends --> Daemon; Daemon -- sends --> Helper thread -- signals --> Thread A. Nice.
[21:48:32] <gilberth> Alfr: I am not there yet.
[21:49:10] <Alfr> I'd report that as a regression, if I were you.
[21:50:02] *** Quits: robin (~robin@user/terpri) (Ping timeout: 258 seconds)
[21:50:06] <gilberth> Who would care? Apple perhaps calls this a feature. There are some hints between the lines in the documentation.
[21:50:10] *** Joins: robin_ (~robin@user/terpri)
[21:51:10] <gilberth> I could announce that I'll do sth "user initiated, background, low latency" does not change anything.
[21:51:46] <gilberth> Bug reports just go to /dev/null at Apple.
[21:51:49] <Alfr> They should have created new api functions for it, breaking existing timeout behavior isn't nice.
[21:52:41] <gilberth> Since when does Apple care, whether they break something?
[21:52:56] <Alfr> gilberth, reason to abandon them, if you ask me.
[21:54:09] <gilberth> Is Linux fit for desktop use? Those GUI kiddies break things all the time.
[21:54:31] <gilberth> I could return to twm and Xaw, though.
[21:54:37] <MichaelRaskin> I just keep running StumpWM
[21:55:13] <gilberth> Nah, rather give me ctwm, the twm with desktops.
[21:55:17] <Alfr> gilberth, see MichaelRaskin's response; it's quite nice. Though requires some work initially.
[21:55:46] <gilberth> Alfr: Work? Exactly. I am too old for that.
[21:55:55] <lotuseater> MichaelRaskin: great to hear, I think I'll also set it up on the new system. otherwise I'm running on xmonad
[21:56:36] <lotuseater> gilberth: so you can run ratpoison, the ancestor of stumpwm :D
[21:57:19] <gilberth> What does it do, what ctwm can't?
[21:57:48] <lotuseater> I don't know ctwm.
[21:58:10] <gilberth> Yeah, you're too young for that.
[21:58:18] <lotuseater> but I saw things xmonad can that i3wm can't, as most people seem to be on i3
[21:58:30] <lotuseater> gilberth: Yes. I. Am. :)
[21:59:12] <lotuseater> does it make tiling window management or another?
[21:59:15] <MichaelRaskin> Hmm, I have actually used TWM but not CTWM
[21:59:43] <lotuseater> of course tiling is not always appropriate but it saved me much nerves and energy
[21:59:45] <gilberth> ctwm is very much like twm, but multiple desktops.
[22:00:07] <gilberth> It's a direct descendant.
[22:00:09] *** Quits: derelict (~derelict@user/derelict) (Ping timeout: 248 seconds)
[22:00:22] <lotuseater> ah it's a stacking one
[22:00:41] <gilberth> Stacking?
[22:00:45] <lotuseater> yes
[22:00:55] <selwyn> twm is a lovely welsh name
[22:00:56] <lotuseater> it's claimed as such a window manager
[22:01:37] <gilberth> I mean, when I return to X11, I want super + mouse-L to grab any window and move it. super + mouse-M to flip it between burried an raised. And I forgot what mouse-R was. Perhaps resize.
[22:02:14] <gilberth> selwyn: The books you recommended to me, just arrived.
[22:02:31] <selwyn> what
[22:02:35] <selwyn> quantum books?
[22:02:44] *** Joins: derelict (~derelict@user/derelict)
[22:02:53] <gilberth> Yes. The booklet has pictures inside! :)
[22:02:55] *** Joins: lad (~lad@user/lad)
[22:03:00] <lotuseater> oh they were teleported?
[22:03:02] <selwyn> great, happy to help :)
[22:06:58] <gilberth> Heh, I find shortcuts for talk(1) in my .ctwmrc. :)
[22:08:17] <gilberth> And for Mosaic.
[22:09:40] <selwyn> the web browser?
[22:09:53] <gilberth> Yes. It's bound to super-m, super-w is Netscape.
[22:10:02] <selwyn> cool
[22:11:10] <gilberth> I must have backups, perhaps I'll to restore them into a VM for nostalgic reasons.
[22:12:10] *** Quits: robin_ (~robin@user/terpri) (Remote host closed the connection)
[22:12:20] <ck_> back when "thick" was just the usual state of scroll bars
[22:13:01] <gilberth> And back when they used to be on the right, that is left hand side of a window.
[22:13:06] *** Joins: robin_ (~robin@user/terpri)
[22:13:40] *** Quits: robin_ (~robin@user/terpri) (Remote host closed the connection)
[22:14:12] <ck_> I just very recently learned about xterms menus on C-m1, -m2, and -m3
[22:14:52] <gilberth> You're kidding. Those menus were there all the time.
[22:15:29] <ck_> hm?
[22:16:30] <selwyn> thicc
[22:16:39] * gilberth misses editres
[22:17:13] <shka> what is the background on the case sensitivities of the original lisp? 
[22:17:29] <shka> was it because some early terminals didn't had the case at all?
[22:17:44] <lotuseater> shka: i think so
[22:18:23] <gilberth> Hard to cram case into 6 bits.
[22:18:34] *** Joins: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[22:18:47] <shka> ok, so that's it?
[22:18:54] <ck_> http://www.kloth.net/services/ttypunch.php
[22:19:10] <ck_> also, I only recently learned that that's where the term "bitbucket" came from
[22:19:18] <gilberth> Try to login with all uppercase on a Linux tty.
[22:19:37] <lotuseater> i sometimes asked kids what they think why the code for #\A is smaller than that for #\a
[22:21:29] *** Quits: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 248 seconds)
[22:23:41] <gilberth> Doesn't work. Try stty olcuc
[22:26:29] <lotuseater> (setf (readtable-case *readtable*) :prevent)
[22:27:44] <lotuseater> gilberth: I did something last year where I didn't know how to escape it. Maybe you have an idea.
[22:28:01] <lotuseater> I did (for fun): (setq *read-base* 36)
[22:28:18] <gilberth> And?
[22:28:53] <lotuseater> what and?
[22:28:55] * gilberth misses the stty mode, where only everything is upper case, but lower case would be escaped.
[22:28:57] <lotuseater> forget it
[22:29:34] <gilberth> What did you want to escape?
[22:29:42] <lotuseater> forget it
[22:33:01] <gilberth> Were you seeking (|SETQ| |*READ-BASE*| 10.)?
[22:34:17] *** Joins: retropikzel (~retropikz@2001:999:200:1f35:89a7:512c:3e01:fea2)
[22:34:23] <lotuseater> yes I think so, that could help in this situation
[22:36:33] <lotuseater> but it should be (|SETQ| *read-base* A)
[22:36:58] <lotuseater> using 10 leaves it at 36 :D
[22:37:17] <gilberth> 10 is in any base the base itself.
[22:38:05] <gilberth> Thus the dot.
[22:38:30] <lotuseater> the dot doesn't work
[22:38:54] <lotuseater> and no, 10 will be read in as decimal 36
[22:39:13] <gilberth> Then get a new lisp.
[22:39:36] <lotuseater> you're just staying once more just on CCL
[22:39:49] <gilberth> Yes, and it does work.
[22:40:25] <gilberth> I get (setq *read-base* 36), (= a 10.) => T
[22:41:07] <lotuseater> what didn't work was your (|SETQ| |*READ-BASE*| |10.|)
[22:41:26] <gilberth> Which I didn't write.
[22:41:39] <lotuseater> and of course (= a 10.) works, just because FLOATS aren't affected by the reader
[22:41:53] <gilberth> It's no float.
[22:41:57] <lotuseater> okay yes, with 10.
[22:42:03] <lotuseater> oh jeez
[22:42:13] <lotuseater> just forget about it anyway
[22:42:41] <lotuseater> so it
[22:42:54] <gilberth> And "10." is an integer.
[22:42:55] <lotuseater> it's not affected cause of the dot
[22:43:00] <lotuseater> yes I see
[22:43:11] <gilberth> The dot forces it to base ten, yes.
[22:43:20] <lotuseater> the dot seems to prevent it from being read by the new readbase
[22:58:11] *** Joins: CrashTestDummy (~CrashTest@ool-ad02813b.dyn.optonline.net)
[23:00:57] *** Quits: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 248 seconds)
[23:05:49] <ck_> the dot is very versatile, like a lot of punctuation
[23:10:40] <gilberth> The Apple documentation for an NSTimer outright lies. "The timer may fire at any time between its scheduled fire date and the scheduled fire date plus the tolerance." The tolerance is set to zero, yet it does, also, fire 10s or 20s too late.
[23:13:02] <gilberth> And when you think about that, what is said, can't be true in any case.
[23:17:56] *** Joins: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[23:18:25] <selwyn> gilberth: remind me which books yo ugot
[23:20:27] <gilberth> selwyn: Susskind: "Quantum Mechanics: The Theoretical Minimum", and Rudolph "Q is for Quantum"
[23:20:35] <selwyn> great
[23:20:43] <selwyn> am considering working for rudolph in the coming months
[23:21:02] <gilberth> Sounds exciting.
[23:21:13] *** Quits: CrashTestDummy (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 248 seconds)
[23:21:24] <lotuseater> ah this susskind book
[23:21:30] <selwyn> he interviewed me for my current program actually
[23:28:05] <lotuseater> selwyn: so what does your current program do? :)
[23:28:45] <selwyn> my phd program
[23:28:54] <selwyn> it is currently doing me :)
[23:28:55] <lotuseater> I thought that.
[23:36:52] *** Joins: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[23:40:35] *** Quits: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 268 seconds)
[23:48:28] *** Joins: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[23:51:37] *** Quits: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 248 seconds)
[23:58:52] *** Joins: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net)
