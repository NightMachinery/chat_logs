[00:00:09] *** Joins: arcatech (~arcatech@user/arcatech)
[00:03:28] *** Quits: komish (~quassel@47-184-200-125.dlls.tx.frontiernet.net) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[00:03:32] *** Quits: independent56 (~independe@95.144.68.39) (Remote host closed the connection)
[00:04:09] *** Joins: independent56 (~independe@95.144.68.39)
[00:08:51] *** Joins: independent_ (~independe@95.144.68.39)
[00:12:02] *** Joins: dsrt^ (~dsrt@wsip-98-188-244-188.mc.at.cox.net)
[00:12:10] *** Quits: independent56 (~independe@95.144.68.39) (Ping timeout: 252 seconds)
[00:24:39] *** Joins: enkeyz (~enkeyz@user/enkeyz)
[00:29:14] *** Joins: Seirdy (~Seirdy@sourcehut/user/seirdy)
[00:30:28] *** Quits: burningserenity (~burningse@2603-9001-0f01-ad99-0000-0000-0000-1006.inf6.spectrum.com) (Quit: ZNC 1.8.2 - https://znc.in)
[00:30:41] *** Quits: arcatech (~arcatech@user/arcatech) (Quit: Bye.)
[00:31:38] *** Joins: mouseghost (~draco@user/mouseghost)
[00:37:41] *** Quits: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net) (Remote host closed the connection)
[00:38:07] *** Joins: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net)
[00:42:00] <eric_hill> cool, looks like 1.17 finally dropped through homebrew.  And the issues with false-positive detection on vt are largely gone, save for Windows x64 still throwing Trojan.Malware.300983.susgen.  Sigh.
[00:50:10] *** Quits: TUSF (~TUSF@2600:1700:7a80:2180:3c40:19de:341a:6837) (Ping timeout: 252 seconds)
[00:50:10] *** Quits: goldfish (~goldfish@user/goldfish) (Ping timeout: 252 seconds)
[00:54:26] *** Quits: jpw (~jpw@user/jpw) (Remote host closed the connection)
[00:56:01] *** Joins: jpw (~jpw@user/jpw)
[00:56:50] *** Quits: lilgopher (~textual@c-73-51-174-246.hsd1.il.comcast.net) (Quit: Textual IRC Client: www.textualapp.com)
[00:56:51] *** Quits: jpw (~jpw@user/jpw) (Remote host closed the connection)
[00:57:25] *** Joins: lilgopher (~textual@c-73-51-174-246.hsd1.il.comcast.net)
[00:57:49] *** Quits: ekathva (~ekathva@88-114-118-108.elisa-laajakaista.fi) (Remote host closed the connection)
[00:59:31] *** Quits: __alex (~alex@ip5f5afef3.dynamic.kabel-deutschland.de) (Ping timeout: 252 seconds)
[01:00:39] <b0nn> eric_hill: "is beyond my level of alcohol." <<-- stealing this
[01:01:50] <eric_hill> b0nn: You have been granted an unlimited use license for that phrase.
[01:02:06] <b0nn> Well above my level of alcohol :)
[01:06:03] *** Quits: verified_human (~verified_@user/verified-human/x-8819513) (Quit: WeeChat 2.8)
[01:10:28] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 252 seconds)
[01:12:43] *** Joins: fikran (~fikran@user/fikran)
[01:12:57] *** Joins: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au)
[01:13:31] *** Joins: TUSF (~TUSF@2600:1700:7a80:2180:3c40:19de:341a:6837)
[01:24:59] *** Joins: PedroG1 (~android@45.77.216.181)
[01:26:25] *** Quits: shka (~herr@109.231.62.239) (Ping timeout: 252 seconds)
[01:29:31] <Tv_> https://xkcd.com/323/
[01:30:08] <Tv_> except personally i use a much less sharp peak of caffeine, for that
[01:30:41] *** Quits: lemmi (~lemmi@user/lemmi) (Quit: WeeChat 3.2)
[01:31:00] <Tv_> the weirdest thing is, however much caffeine you consume regularly, your body adjusts to as the "normal". currently on a "nothing but iced tea" phase, to get rid of the addiction.
[01:36:42] *** Quits: salem (~salem@pool-98-111-206-141.pitbpa.fios.verizon.net) (Quit: ZNC 1.8.2 - https://znc.in)
[01:37:19] <auser0> hello, i am trying to do an http request that needs the data sent to have header of "application/x-www-form-urlencoded", https://play.golang.org/p/iGhZbq6Bmge
[01:37:59] <ikke> auser0: you probably want to set the Content-Type
[01:38:00] <auser0> i have the question on line 43 and that snippet wouldn't run since this variable isn't being used. But can i do a map and convert it to io.reader object without using json ?
[01:38:35] <auser0> the way it is right now ikke, works just fine but i would like to add the data using a map if possible
[01:38:40] *** Quits: hikhvar796073809 (~thelounge@x4db44dae.dyn.telefonica.de) (Read error: Connection reset by peer)
[01:38:45] <auser0> instead of running the .Add(key,value)
[01:38:55] *** Joins: hikhvar796073809 (~thelounge@x4db44dae.dyn.telefonica.de)
[01:39:05] <ikke> (somehow the play.golang.org page always makes me think the content is way shorter than it really is)
[01:39:07] *** Quits: moldorcoder7 (~moldorcod@37.120.143.28) (Ping timeout: 240 seconds)
[01:39:51] *** Joins: burningserenity (~burningse@142-196-178-216.res.spectrum.com)
[01:40:06] *** Joins: salem (~salem@pool-98-111-206-141.pitbpa.fios.verizon.net)
[01:40:09] <auser0> oh i am seeing
[01:40:10] <auser0> https://i.imgur.com/0o4lkbK.png
[01:41:06] *** Quits: mickey (~user@user/mickey) (Remote host closed the connection)
[01:41:22] <ikke> Yes, I see it, it's just not clear there was more content
[01:41:27] <ikke> Due to the whitespace below
[01:41:28] *** Joins: mickey (~user@user/mickey)
[01:42:25] *** Quits: FunnyLookinHat (~FunnyLook@64.184.172.137) (Ping timeout: 252 seconds)
[01:44:34] *** Quits: burningserenity (~burningse@142-196-178-216.res.spectrum.com) (Ping timeout: 252 seconds)
[01:45:14] <auser0> oh i see
[01:45:18] *** Joins: burningserenity (~burningse@102.129.153.217)
[01:45:35] *** Joins: k0ta (~k0ta@103.108.94.37)
[01:45:37] <eric_hill> Tv_: Tazo mint tea is fantastic.  Also got some loose leaf white tea from https://buddhascup.com that's amazing.
[01:45:57] <Tv_> eric_hill: green tea of gtfo
[01:46:01] <Tv_> *or
[01:46:12] <auser0> but in general, can someone just run this .Add method on a map maybe or doing it something similar to :
[01:47:00] <eric_hill> Black tea is where it's at.
[01:47:15] * eric_hill starts a tea war on go-nuts
[01:47:57] <auser0> https://play.golang.org/p/OnpVRpp7K4J
[01:48:00] <Tv_> auser0: just loop the map and .Add, that's the api stdlib provides. or make your map have slice values
[01:48:44] <Tv_> auser0: also in general you probably want req.Header.Set to avoid overwriting possibly pre-existing values
[01:48:54] <Tv_> auser0: debugging such things can be a pain, better to learn a good habit
[01:49:38] <auser0> that's a nice one Tv_, and will make sure to use that too, i was just trying to simply paste a map of key values so i chose this method
[01:49:57] <auser0> do you mind showing me what you mean by loop the map and .Add?
[01:52:46] *** Quits: hikhvar796073809 (~thelounge@x4db44dae.dyn.telefonica.de) (Read error: Connection reset by peer)
[01:54:16] *** Joins: hikhvar796073809 (~thelounge@x4db44dae.dyn.telefonica.de)
[01:54:46] <auser0> that should be too easy sorry
[01:56:35] *** Quits: hikhvar796073809 (~thelounge@x4db44dae.dyn.telefonica.de) (Read error: Connection reset by peer)
[01:56:49] *** Joins: hikhvar796073809 (~thelounge@x4db44dae.dyn.telefonica.de)
[01:58:11] <Tv_> auser0: for k, v := range mymap { q.Add(k, v) }
[01:58:32] <auser0> thanks :D ya done similar
[02:00:34] *** Quits: khrbt (~znc@user/khrbt) (Ping timeout: 252 seconds)
[02:02:38] *** Quits: hikhvar796073809 (~thelounge@x4db44dae.dyn.telefonica.de) (Read error: Connection reset by peer)
[02:02:56] *** Joins: hikhvar796073809 (~thelounge@x4db44dae.dyn.telefonica.de)
[02:08:06] *** Quits: mei (~mei@user/mei) (Read error: Connection reset by peer)
[02:08:28] *** Joins: burningserenity_ (~burningse@2603:9001:f01:ad99::100c)
[02:08:41] *** Joins: mei (~mei@user/mei)
[02:08:49] *** Quits: burningserenity (~burningse@102.129.153.217) (Ping timeout: 252 seconds)
[02:10:10] *** Joins: khrbt (~znc@user/khrbt)
[02:18:10] *** Quits: mei (~mei@user/mei) (Ping timeout: 252 seconds)
[02:19:49] *** Quits: burningserenity_ (~burningse@2603:9001:f01:ad99::100c) (Ping timeout: 252 seconds)
[02:24:42] *** Joins: hexfive (~eric@50.35.83.177)
[02:28:04] *** Quits: amahl (~amahl@dsl-jklbng12-54fbca-64.dhcp.inet.fi) (Ping timeout: 252 seconds)
[02:28:41] *** Quits: hexfive (~eric@50.35.83.177) (Client Quit)
[02:30:19] *** Quits: hikhvar796073809 (~thelounge@x4db44dae.dyn.telefonica.de) (Quit: The Lounge - https://thelounge.chat)
[02:33:56] *** Quits: mouseghost (~draco@user/mouseghost) (Quit: mew wew)
[02:37:38] *** Quits: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net) (Remote host closed the connection)
[02:38:14] *** Joins: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net)
[02:38:36] *** Quits: salem (~salem@pool-98-111-206-141.pitbpa.fios.verizon.net) (Quit: ZNC 1.8.2 - https://znc.in)
[02:40:48] *** Joins: salem (~salem@pool-98-111-206-141.pitbpa.fios.verizon.net)
[02:41:32] *** Quits: independent_ (~independe@95.144.68.39) (Remote host closed the connection)
[02:41:51] *** Joins: independent_ (~independe@95.144.68.39)
[02:45:59] *** Joins: masoudd (~masoudd@user/masoudd)
[02:49:32] *** Joins: masoudd_ (~masoudd@user/masoudd)
[02:51:37] *** Joins: masoudd__ (~masoudd@user/masoudd)
[02:51:40] *** Quits: masoudd (~masoudd@user/masoudd) (Ping timeout: 252 seconds)
[02:53:26] *** Joins: Atque (~Atque@user/atque)
[02:55:01] *** Quits: masoudd_ (~masoudd@user/masoudd) (Ping timeout: 252 seconds)
[02:56:40] *** Quits: masoudd__ (~masoudd@user/masoudd) (Ping timeout: 252 seconds)
[02:57:32] *** Quits: independent_ (~independe@95.144.68.39) (Remote host closed the connection)
[02:57:33] *** Quits: minix (~mnxaw@94.11.23.235) (Ping timeout: 244 seconds)
[02:57:51] *** Joins: independent_ (~independe@95.144.68.39)
[02:59:49] *** Joins: masoudd (~masoudd@user/masoudd)
[03:00:57] *** Joins: masoudd_ (~masoudd@user/masoudd)
[03:04:00] *** masoudd is now known as Guest1069
[03:04:00] *** Quits: Guest1069 (~masoudd@user/masoudd) (Killed (sodium.libera.chat (Nickname regained by services)))
[03:04:00] *** masoudd_ is now known as masoudd
[03:08:55] *** Quits: masoudd (~masoudd@user/masoudd) (Ping timeout: 244 seconds)
[03:13:24] *** Quits: enkeyz (~enkeyz@user/enkeyz) (Quit: WeeChat 3.2)
[03:14:56] *** Quits: mrig (~mrig@user/mrig) (Quit: WeeChat 3.2)
[03:19:32] *** Quits: independent_ (~independe@95.144.68.39) (Remote host closed the connection)
[03:19:49] *** Joins: independent_ (~independe@95.144.68.39)
[03:20:19] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 252 seconds)
[03:21:28] *** Quits: be3uykpy (~be3uykpy@2a00:a040:19a:b060:b45c:3bc5:3a79:b1e7) (Quit: Leaving)
[03:22:05] *** Joins: fikran (~fikran@user/fikran)
[03:23:39] *** Quits: Seirdy (~Seirdy@sourcehut/user/seirdy) (Quit: exiting 3.3-dev)
[03:24:20] *** Joins: Seirdy (~Seirdy@sourcehut/user/seirdy)
[03:25:32] *** Quits: independent_ (~independe@95.144.68.39) (Remote host closed the connection)
[03:25:50] *** Joins: independent_ (~independe@95.144.68.39)
[03:28:13] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[03:28:32] *** Quits: independent_ (~independe@95.144.68.39) (Remote host closed the connection)
[03:28:51] *** Joins: independent_ (~independe@95.144.68.39)
[03:32:15] *** Quits: jsrnop (~mark@user/jsrnop) (Quit: The Lounge - https://thelounge.chat)
[03:32:42] *** Joins: jsrnop (~mark@user/jsrnop)
[03:33:24] *** Quits: amk (~amk@109.255.169.126) (Read error: Connection reset by peer)
[03:33:31] *** Joins: burningserenity (~burningse@102.129.153.47)
[03:33:32] *** Quits: independent_ (~independe@95.144.68.39) (Remote host closed the connection)
[03:33:50] *** Joins: independent_ (~independe@95.144.68.39)
[03:34:34] *** Quits: rschmied (~huh@hsi-kbw-109-193-238-226.hsi7.kabel-badenwuerttemberg.de) (Ping timeout: 252 seconds)
[03:36:01] *** Quits: albertito (~nil@37.228.204.251) (Ping timeout: 250 seconds)
[03:36:11] *** Joins: rschmied (~huh@HSI-KBW-109-193-238-226.hsi7.kabel-badenwuerttemberg.de)
[03:39:21] *** Quits: stefanc_diff (~stefanc_d@cpc97950-croy24-2-0-cust78.19-2.cable.virginm.net) (Ping timeout: 248 seconds)
[03:42:32] *** Joins: sweater (~sweater@206.81.18.26)
[03:42:57] *** Quits: Ergo^ (~ergo@91.238.59.144) (Remote host closed the connection)
[03:43:38] <sweater> Hello, I'm trying to demonstrate open sybtyping in Go by following "use a module from another module" beginners' guide and and trying to define an interface that happens to be implemented byu the struct defined elsewhere
[03:44:07] *** Quits: NCS_One (~NCS_One@bl11-90-133.dsl.telepac.pt) (Quit: Lost terminal)
[03:44:25] <sweater> When I try to run it it says `s.X doesn't implement G (missing f method)...
[03:44:39] <CommunistWolf> interface methods should be exported
[03:44:44] <sweater> ...have s.f() string... ...want f() string
[03:44:44] <CommunistWolf> i.e. start with a capital letter
[03:45:02] <sweater> Woah! Thanks :)
[03:45:08] <CommunistWolf> np. quite impressed it lets you even define one with unexported methods
[03:46:03] *** Quits: kayprish (~kayprish@cable-188-2-229-172.dynamic.sbb.rs) (Remote host closed the connection)
[03:46:32] <sweater> Do you feel there's a lot of Haskellers showing interest in Go after Wadler's contributions btw?
[03:47:22] <sweater> I'm have very pleasant feelings from what I read about golang, trying to get my ICFPC team to try golang next year for the contest.
[03:48:53] <CommunistWolf> haven't noticed any myself, but I don't see a lot of haskellers, period
[03:51:36] *** Quits: lauraaah (uid156848@id-156848.charlton.irccloud.com) (Quit: Connection closed for inactivity)
[03:52:54] *** Joins: Atque (~Atque@user/atque)
[03:53:00] *** Quits: PedroG1 (~android@45.77.216.181) (Quit: Got you)
[03:54:33] *** Joins: amk (~amk@109.255.169.126)
[03:55:25] *** Joins: PedroG1 (~android@45.77.216.181)
[03:57:03] *** Joins: albertito (~nil@37.228.204.251)
[03:57:22] *** Quits: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com) (Quit: Leaving)
[04:00:59] *** Joins: stefanc_diff (~stefanc_d@cpc97950-croy24-2-0-cust78.19-2.cable.virginm.net)
[04:07:01] <b0nn> Interfaces with private methods are called Sealed Interfaces I think
[04:07:32] *** Quits: independent_ (~independe@95.144.68.39) (Remote host closed the connection)
[04:13:30] <lazyreader> yeah, it's a way to provide an interface and implementations from a package as a library but not allow other packages to actually implement the interface
[04:13:42] <lazyreader> kind of a hack
[04:15:46] *** Quits: flynn (~mcbloch@user/flynn) (Read error: Connection reset by peer)
[04:16:11] *** Joins: masoudd (~masoudd@user/masoudd)
[04:16:46] *** Joins: flynn (~mcbloch@user/flynn)
[04:18:40] *** Quits: paulgrmn (~paulgrmn@user/paulgrmn) (Ping timeout: 244 seconds)
[04:21:23] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[04:25:36] *** Joins: burningserenity_ (~burningse@142-196-178-216.res.spectrum.com)
[04:26:16] *** Quits: burningserenity (~burningse@102.129.153.47) (Ping timeout: 252 seconds)
[04:26:55] <b0nn> It suggests that the library has multiple implementations?
[04:27:21] <b0nn> I mean, it'd be silly to only have one implementation possible
[04:28:28] *** Joins: FunnyLookinHat (~FunnyLook@64.184.172.137)
[04:30:02] *** Quits: zopsi (~zopsi@irc.dir.ac) (Quit: Oops)
[04:30:53] *** Joins: zopsi (zopsi@2600:3c00::f03c:91ff:fe14:551f)
[04:37:32] *** Quits: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net) (Remote host closed the connection)
[04:37:54] *** Joins: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net)
[04:40:10] *** Joins: arcatech (~arcatech@user/arcatech)
[04:44:37] *** Quits: arcatech (~arcatech@user/arcatech) (Ping timeout: 245 seconds)
[04:46:01] *** Quits: predmijat (~predmijat@mail.strogopro.com) (Quit: bye)
[04:47:36] *** Joins: predmijat (~predmijat@mail.strogopro.com)
[04:47:52] *** Joins: Atque (~Atque@user/atque)
[04:50:07] *** Quits: jjonah (~jjonah@p200300d5d71aad00dea632fffeb3342f.dip0.t-ipconnect.de) (Remote host closed the connection)
[05:14:17] *** Quits: stefanc_diff (~stefanc_d@cpc97950-croy24-2-0-cust78.19-2.cable.virginm.net) (Ping timeout: 245 seconds)
[05:17:30] *** Quits: jkl (~jkl@user/jkl) (Quit: Gone.)
[05:18:52] *** Joins: jkl (~jkl@user/jkl)
[05:18:54] <seebs> Only one implementation possible *now* might still be a good choice for an interface if you want to be able to change it later.
[05:22:17] <b0nn> You'd need a strong case for that, otherwise you'd fall victim to YAGNI and Premature Optimisation accusations
[05:22:36] *** Joins: masoudd_ (~masoudd@user/masoudd)
[05:24:13] <b0nn> and, a single implementation can change /how/ it works under the hood to its heart's desire
[05:24:40] *** Quits: masoudd (~masoudd@user/masoudd) (Ping timeout: 240 seconds)
[05:25:43] *** Quits: src (~src@user/src) (Ping timeout: 252 seconds)
[05:26:48] <b0nn> heart's content
[05:28:50] *** Quits: mickey (~user@user/mickey) (Quit: Ping timeout (120 seconds))
[05:28:56] *** Quits: masoudd_ (~masoudd@user/masoudd) (Ping timeout: 244 seconds)
[05:29:14] *** Joins: mickey (~user@user/mickey)
[05:29:31] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 252 seconds)
[05:30:24] *** Joins: stefanc_diff (~stefanc_d@cpc97950-croy24-2-0-cust78.19-2.cable.virginm.net)
[05:31:26] *** Joins: fikran (~fikran@user/fikran)
[05:41:43] *** Joins: frost (~frost@59.71.240.119)
[05:46:36] *** Joins: neurocyte6 (~neurocyte@45.93.108.142)
[05:46:36] *** Quits: neurocyte6 (~neurocyte@45.93.108.142) (Changing host)
[05:46:36] *** Joins: neurocyte6 (~neurocyte@user/neurocyte)
[05:48:49] *** Quits: neurocyte (~neurocyte@user/neurocyte) (Ping timeout: 252 seconds)
[05:48:49] *** neurocyte6 is now known as neurocyte
[05:50:22] *** meinside_ is now known as meinside
[05:56:28] *** Quits: southey (~foxtrot@user/foxtrot) (Ping timeout: 252 seconds)
[05:56:59] *** Joins: southey (~foxtrot@user/foxtrot)
[05:58:50] *** Joins: oxum (~oxum@106.203.195.217)
[06:02:00] *** Quits: Torr (~Torr@user/torr) (Ping timeout: 244 seconds)
[06:05:52] *** Quits: oxum (~oxum@106.203.195.217) (Ping timeout: 252 seconds)
[06:14:24] *** Quits: dsrt^ (~dsrt@wsip-98-188-244-188.mc.at.cox.net) (Ping timeout: 244 seconds)
[06:17:55] *** crmur__ is now known as orthoplex64
[06:19:18] <sweater> https://go2goplay.golang.org/p/O0wQ036bRKs why does playground say that x is non-boolean on line 30?
[06:20:59] <sweater> If I change code to `fmt.Printf("x: Type: %T Value: %v\n", x, x); return 0` it compiles and prints:
[06:21:12] <sweater> ```x: Type: bool Value: true
[06:21:13] <sweater> Oopsie
[06:21:15] <sweater> ```
[06:21:41] <b0nn> oh, is that how you tell the compiler the type of the field of the struct in generics
[06:23:22] <sweater> Maybe it's because it's a var not a const? :D
[06:23:32] <b0nn> seems like that limits all fields to a single type when they are generic
[06:23:34] <sweater> When I try `if x == true`, I get anogher error
[06:23:54] <sweater> `prog.go2:31:10: cannot convert true (untyped bool constant) to bool`
[06:23:55] <b0nn> although I recall reading something about that being the intention
[06:25:16] <sweater> is there a way I can make a const out of a field in a structure?
[06:25:30] <b0nn> No.
[06:26:12] <sweater> Uhh like I can't copy some memory into some location marked as read only?
[06:26:30] <sweater> What I'm hoping to get is something like Rust's `clone`
[06:26:37] <b0nn> oh god
[06:27:26] <b0nn> FTR a struct cannot be a constant in Go, and therefore any fields within it cannot be either
[06:27:33] <sweater> b0nn: can you explain what do you mean when you say "that limits all fields to a single type"? In my case, I'm glad to specify that all my fields (Const) are of type bool.
[06:28:16] <sweater> Yes, fair enough, but taking a bool out of a struct and into a const should be doable, intuitively :C Sorry if my questions sound non-idiomatic, it's my first day with golang.
[06:28:48] <b0nn> Sure, when a struct is composed of multiple fields with type T, they all must be of the same T, you cannot have one being a bool, another being a string, and so on
[06:28:48] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[06:29:15] <b0nn> you want to modify some memory, then mark it as non-modifiable?
[06:29:52] <b0nn> In go, memory that is modifiable by a runtime is modifiable for the lifetime of the runtime
[06:33:22] <sweater> b0nn: yes, that's great! That works for me, since the design of my ExprConst is literally to wrap type T in a newtype, essentially.
[06:33:43] <sweater> The question is why can't I get a bool out of this newtype and use it in `if`
[06:34:43] <sweater> but your comment about mutability was very insightful, I'll reverse my arrows )
[06:35:11] <sweater> Ok, now I'm fairly sure that it's a bug in go2go
[06:35:24] <sweater> https://go2goplay.golang.org/p/iil2rrQ2JV9
[06:35:40] <sweater> This gives error "prog.go2:32:5: cannot compare x == t (mismatched types bool and bool)"
[06:37:32] *** Quits: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net) (Remote host closed the connection)
[06:38:01] *** Joins: Atque (~Atque@user/atque)
[06:38:03] *** Joins: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net)
[06:40:27] *** Quits: burningserenity_ (~burningse@142-196-178-216.res.spectrum.com) (Quit: ZNC 1.8.2 - https://znc.in)
[06:40:38] *** Joins: arcatech (~arcatech@user/arcatech)
[06:44:31] <sweater> How would I go about making an issue for go2go?
[06:45:10] *** Quits: arcatech (~arcatech@user/arcatech) (Ping timeout: 240 seconds)
[06:45:29] *** Quits: BUSY (~BUSY@user/busy) (Read error: Connection reset by peer)
[06:45:42] <sweater> https://go.googlesource.com/go/+/refs/heads/dev.go2go/README.go2go.md ah, not maintained.
[06:47:34] *** Quits: freakazoid333 (~matt@2603:9000:cf0f:80e3:3861:b031:6b93:c510) (Read error: Connection reset by peer)
[06:47:40] *** Quits: Christ0pher (~anunnaki@c-174-54-139-228.hsd1.pa.comcast.net) (Ping timeout: 252 seconds)
[06:48:19] *** Joins: freakazoid333 (~matt@2603:9000:cf0f:80e3:3861:b031:6b93:c510)
[06:51:56] <sweater> Are there binary distributions of Golang for linux with generics enabled? If so, how would I go about obtaining those?
[07:04:10] <foobaz> no, go 1.18 is not out yet, you will need to compile it from source
[07:07:45] *** Quits: flynn (~mcbloch@user/flynn) (Read error: Connection reset by peer)
[07:08:46] *** Joins: flynn (~mcbloch@user/flynn)
[07:18:20] *** Joins: oxum (~oxum@106.203.195.217)
[07:20:26] <sweater> foobaz: so I go to Github (?), download the source code, then select branch 1.18 and run make or somesuch?
[07:21:00] <sweater> Or the branch is still dev.go2go?
[07:21:45] <sweater> Ahha! https://golang.org/doc/install/source
[07:23:11] *** Quits: oxum (~oxum@106.203.195.217) (Remote host closed the connection)
[07:23:23] *** Joins: oxum (~oxum@106.203.195.217)
[07:24:40] <sweater> I still have no idea which branch contains generics though (
[07:25:53] <sweater> Found a good candidate: https://github.com/golang/go/tree/dev.typeparams :)
[07:26:12] *** Quits: oxum (~oxum@106.203.195.217) (Remote host closed the connection)
[07:31:58] *** Quits: FunnyLookinHat (~FunnyLook@64.184.172.137) (Remote host closed the connection)
[07:33:47] <b0nn> the tip of 1.17 has it
[07:34:43] <b0nn> that is, no release version  of go has generics right now, but if you pull the source and build on your own machine then you will have generics by default
[07:35:40] *** Joins: arcatech (~arcatech@user/arcatech)
[07:38:13] *** Quits: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be) (Ping timeout: 252 seconds)
[07:38:49] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 252 seconds)
[07:39:24] *** Quits: clarjon_1 (~clarjon1@user/clarjon1) (Read error: Connection reset by peer)
[07:40:40] *** Quits: arcatech (~arcatech@user/arcatech) (Quit: Bye.)
[07:40:48] *** Joins: fikran (~fikran@user/fikran)
[07:42:11] *** Joins: arcatech (~arcatech@user/arcatech)
[07:46:53] *** Joins: jcatana (~jcatana@d14-69-231-247.try.wideopenwest.com)
[07:48:27] *** Joins: oxum (~oxum@106.203.195.217)
[07:52:52] *** Quits: jcatana (~jcatana@d14-69-231-247.try.wideopenwest.com) (Quit: Leaving)
[07:53:07] *** Quits: oxum (~oxum@106.203.195.217) (Ping timeout: 252 seconds)
[07:54:25] *** Quits: fjmorazan (~quassel@user/fjmorazan) (Quit: fjmorazan)
[07:54:36] *** Quits: andlabs (~andlabs@70.107.171.168) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[07:54:44] *** Joins: najatac (~najatac@d14-69-231-247.try.wideopenwest.com)
[07:55:02] *** Joins: fjmorazan (~quassel@user/fjmorazan)
[08:09:13] *** Joins: Guest4294 (~Guest42@223.18.154.68)
[08:23:01] *** Quits: arcatech (~arcatech@user/arcatech) (Quit: Bye.)
[08:25:28] *** Quits: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au) (Ping timeout: 256 seconds)
[08:26:39] *** Joins: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au)
[08:31:37] *** Quits: realies (~realies@user/realies) (Quit: ~)
[08:36:09] *** Quits: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au) (Quit: WeeChat 3.2)
[08:37:00] *** Quits: khrbt (~znc@user/khrbt) (Ping timeout: 244 seconds)
[08:37:06] *** Joins: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au)
[08:37:33] *** Quits: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net) (Remote host closed the connection)
[08:38:11] *** Joins: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net)
[08:39:47] *** Joins: oxum (~oxum@106.203.195.217)
[08:39:57] *** Joins: realies (~realies@user/realies)
[08:40:11] <sweater> This didn't work:
[08:40:13] <sweater> go version devel go1.18-4d3cc84774 Thu Aug 12 20:22:27 2021 +0000 linux/amd64
[08:40:26] <sweater> b0nn: basically, main branch should work, right?
[08:40:34] *** Quits: TUSF (~TUSF@2600:1700:7a80:2180:3c40:19de:341a:6837) (Quit: Leaving)
[08:41:20] *** Joins: khrbt (~znc@user/khrbt)
[08:42:24] *** Quits: oxum (~oxum@106.203.195.217) (Remote host closed the connection)
[08:45:16] *** Joins: NeoCron (~NeoCron@p200300c4cf4a8400dde9c021b1b0ad3f.dip0.t-ipconnect.de)
[08:55:37] <sweater> https://go2goplay.golang.org/p/jZ6V7xoTz0_M this should compile, right?
[08:58:09] *** Quits: NeoCron (~NeoCron@p200300c4cf4a8400dde9c021b1b0ad3f.dip0.t-ipconnect.de) (Remote host closed the connection)
[09:07:28] <sweater> (main branch worked!)
[09:12:34] *** Joins: jpw (~jpw@user/jpw)
[09:17:13] <sweater> Reproduced on main branch; made an issue: https://github.com/golang/go/issues/48108
[09:24:58] *** Joins: A_D (~A_D@102.33.35.23)
[09:25:01] *** Parts: A_D (~A_D@102.33.35.23) ()
[09:25:22] *** Quits: A_Dragon (A_D@doom-tower.awesome-dragon.science) (Ping timeout: 240 seconds)
[09:26:37] *** Quits: khrbt (~znc@user/khrbt) (Ping timeout: 252 seconds)
[09:26:43] *** Joins: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be)
[09:27:26] *** Quits: goplay (tyPW8Ukni4@user/goplay) (Remote host closed the connection)
[09:28:14] *** Joins: oxum (~oxum@106.203.195.217)
[09:29:02] *** Joins: A_Dragon (A_D@doom-tower.awesome-dragon.science)
[09:33:13] *** Quits: oxum (~oxum@106.203.195.217) (Ping timeout: 252 seconds)
[09:36:19] *** Joins: khrbt (~znc@user/khrbt)
[09:47:47] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 244 seconds)
[09:50:10] *** Joins: fikran (~fikran@user/fikran)
[09:52:32] *** Quits: pepee (~user@user/pepee) (Quit: bye $IRC)
[09:54:57] *** Quits: Guest4294 (~Guest42@223.18.154.68) (Ping timeout: 256 seconds)
[09:55:58] *** Joins: andlabs (~andlabs@70.107.171.168)
[10:02:22] *** Quits: normen (~normen@p200300d7173dc90099abd49fa6fe766e.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[10:03:30] *** Quits: sudoforge (~sudoforge@wireguard/tunneler/sudoforge) (Ping timeout: 256 seconds)
[10:10:12] *** Quits: dante443 (~dante443@2600:1702:7a0:9a40:6e62:6dff:fe5d:c340) (Ping timeout: 276 seconds)
[10:22:12] *** Joins: dante443 (~dante443@99-88-166-99.lightspeed.milwwi.sbcglobal.net)
[10:23:30] *** Quits: andlabs (~andlabs@70.107.171.168) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[10:28:33] *** Joins: mikoto-chan (~mikoto-ch@ip-83-134-2-136.dsl.scarlet.be)
[10:30:05] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[10:35:26] *** Joins: normen (~normen@p200300d7173dc90099abd49fa6fe766e.dip0.t-ipconnect.de)
[10:37:32] *** Quits: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net) (Remote host closed the connection)
[10:37:51] *** Joins: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net)
[10:41:41] *** Joins: bkircher (~bkircher@2001:a61:245a:8201:c518:484f:1750:7247)
[10:43:40] *** Quits: normen (~normen@p200300d7173dc90099abd49fa6fe766e.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[10:45:59] *** Joins: __alex (~alex@ip5f5afef3.dynamic.kabel-deutschland.de)
[10:47:02] *** Quits: thing (~thing@user/thing) (Remote host closed the connection)
[10:48:20] *** Joins: thing (~thing@user/thing)
[10:51:37] *** Joins: goroutine (~goroutine@78-56-77-125.static.zebra.lt)
[10:52:33] *** Parts: goroutine (~goroutine@78-56-77-125.static.zebra.lt) ()
[10:56:14] *** Joins: textbox (~goroutine@78-56-77-125.static.zebra.lt)
[10:58:10] *** Quits: textbox (~goroutine@78-56-77-125.static.zebra.lt) (Remote host closed the connection)
[10:58:47] *** Quits: lilgopher (~textual@c-73-51-174-246.hsd1.il.comcast.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[11:00:55] *** Joins: andlabs (~andlabs@70.107.171.168)
[11:01:46] *** Joins: paradise2go (~paradise2@103.160.233.90)
[11:03:12] *** Joins: textbox (~textbox@78-56-77-125.static.zebra.lt)
[11:03:37] *** Joins: Noxturnix (m-svoyoe@154.16.7.201)
[11:04:26] *** Joins: shka (~herr@109.231.62.239)
[11:04:34] *** Joins: theoceaniscool (~theoceani@213.94.16.93)
[11:04:46] <A_Dragon> textbox: so it was in C land that it hung?
[11:04:58] <paradise2go> is go easy to learn?
[11:05:03] <A_Dragon> very
[11:05:15] <A_Dragon> easy to learn, hard to master
[11:05:22] <paradise2go> hard to master means?
[11:05:36] <A_Dragon> use more than effectively
[11:05:39] *** Joins: iateadonut (~dan@121.177.17.154)
[11:06:14] *** Parts: Noxturnix (m-svoyoe@154.16.7.201) (bep)
[11:07:05] <paradise2go> is go the future?
[11:07:11] *** Joins: Wouter0100 (~Wouter010@entry.nbg.netvos.nl)
[11:07:13] <paradise2go> or is Rust the future?
[11:07:16] <iateadonut> what does anyone suggest is their favorite/best web framework?
[11:07:29] <A_Dragon> paradise2go: there is no one future.
[11:07:34] <iateadonut> paradise2go: both
[11:07:42] <A_Dragon> iateadonut: Ive heard good things about various things but am bad at web
[11:08:06] <iateadonut> of the good things you heard, which one(s) did you hear the most good about?
[11:08:29] <paradise2go> I have heard - rust is memory safe and its fast
[11:08:36] <paradise2go> Go - is lightweight and fast
[11:09:15] <iateadonut> i meant that for A_Dragon: of the good things you heard about web frameworks, which one(s) did you hear the most good about?
[11:13:36] <seebs> i i have never yet seen anyone explain to me why i would want a "web framework" in go.
[11:13:53] <A_Dragon> seebs: easier frontend
[11:13:55] <seebs> go and rust are both "memory-safe".
[11:14:27] <seebs> rust requires more programmer cooperation but is at least sometimes noticably faster at memory-management-like-things.
[11:14:32] <go> Where's rust?
[11:14:39] * go is memory-safe
[11:15:13] <seebs> hmm. "easier frontend" is pretty vague, and honestly, i just don't see much appeal. like, if i want to do a web thing, net/http can probably do it just fine, and a "web framework" is more API to think about and use, and i don't have a specific clear example of "here's a thing i'm trying to do which is noticably better using some framework"
[11:15:56] <seebs> i can specifically disrecommend iris because of a long history of sleazy behaviors and such, i guess.
[11:16:15] *** Quits: andlabs (~andlabs@70.107.171.168) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[11:16:26] <seebs> but like, past that, i'm not even sure what counts as "a web framework". i think fundamentally things like "web frameworks" are more common in languages which don't have a friendly stdlib layer to begin with.
[11:17:42] *** Joins: normen (~normen@p200300d7173dc90099abd49fa6fe766e.dip0.t-ipconnect.de)
[11:17:44] *** Joins: absc (~absc@dynamic-adsl-94-34-168-146.clienti.tiscali.it)
[11:19:57] *** Joins: andlabs (~andlabs@70.107.171.168)
[11:22:54] *** Joins: hikhvar796073809 (~thelounge@x4db9a3a1.dyn.telefonica.de)
[11:23:55] *** Joins: mei (~mei@user/mei)
[11:24:04] <iateadonut> so you can see the tools and 3rd-party libraries that other people have found/created.  gobuffalo, for example, has a `go console`, so i'm curious what that's like.
[11:24:12] <iateadonut> speed of development is another.
[11:25:45] <textbox> @A_Dragon - my fault, all is working well. I was trying to reproduce the issue on smaller scale which I have - a legacy app which pre-fork()s a bunch of processes and then those must call back into static Go functions. The calls themselves work well but goroutines/channels behave strangely. For example - I wrap my call into fmt.Println() and then do a goroutine which does the same. Then I do strace -ff ... and I see boths fmt.Println() surro
[11:25:51] <iateadonut> the stdlib mux can't differentiate between POST and GET, so you need that.  i think you also need gorilla in order to upgrade to a websockets connection.  so there's 2 examples of where the stdlib is lacking for web dev.
[11:26:50] <iateadonut> thanks, i will avoid iris, after i look into it.
[11:26:59] <A_Dragon> lol
[11:28:10] <textbox> my message got cut: so I see both fmt.Println() calls which surround a goroutine but not the one from inside the goroutine
[11:28:18] <textbox> adding <-time.After() after goroutine doesn't help
[11:28:34] <iateadonut> where is your code, textbox?
[11:28:48] <textbox> deep inside a commercial product
[11:28:55] <iateadonut> oh well.
[11:29:18] *** Joins: mrig (~mrig@user/mrig)
[11:29:45] <textbox> I though maybe there are some gotchas or limitations(couldn't google anything) when doing calls to static Go library
[11:31:30] <textbox> building a small reproduction works flawlessly as I expect but not in my app. I though maybe it's due to the fork()'ing and signal handling or something like that
[11:31:40] <A_Dragon> wait
[11:31:48] <A_Dragon> you're fork()ing on windows?
[11:31:53] <A_Dragon> because that doesnt work >.>
[11:33:39] <textbox> nope, Linux environment
[11:33:45] <A_Dragon> alright
[11:33:54] *** Joins: saschagrunert (~saschagru@46.128.124.46)
[11:34:42] <textbox> so from my perspective it feels like I do everything right and even feel silly about thinking that Go's scheduler doesn't work but it appears so. Doing a strace also reveals forks being stuck on a futex_wait, sadly I have little idea how to debug on that
[11:35:02] *** Quits: bkircher (~bkircher@2001:a61:245a:8201:c518:484f:1750:7247) (Ping timeout: 245 seconds)
[11:35:15] <shiroyasha> iateadonut: `switch req.Method` has been enough for me (re: "the stdlib mux can't differentiate between POST and GET")
[11:35:17] <textbox> doing gcore on the processes and then analyzing the coredumps with delve reveals forks stuck on goroutines which is even stranger
[11:36:01] <A_Dragon> textbox: IIRC, dont quote me on this, but during the fork itself, the scheduler is disabled as is the GC
[11:37:50] <textbox> A_Dragon: could you gimme some more info on that? My google-fu revealed nothing as off whole last day. Or maybe a hint on what to do..?
[11:38:07] *** Joins: jcajka (~jcajka@89-24-144-111.customers.tmcz.cz)
[11:38:42] <textbox> I am thinking of the obvious - just spin the Go process which would listen on a pipe or UDS and handle the commands on the main process
[11:38:42] <A_Dragon> I was reading through the source for syscall.go when I spotted it. if it is what you think, *and* you have a small reprod, I'd open a go issue
[11:40:07] <textbox> but how does the Go runtime know it was forked? it seems like I need to experiment with small fork() repro, gonna be back soon with results
[11:41:07] *** Quits: blaisebool (~blaiseboo@static.247.123.46.78.clients.your-server.de) (Quit: ZNC - https://znc.in)
[11:41:15] <textbox> well thats obviously a bad statement of course it knows it's been forked as it starts anew
[11:41:28] <A_Dragon> textbox: wait how are you forking?
[11:41:28] <textbox> but Im curious about "gc and runtime disabled" during the fork part
[11:41:31] <A_Dragon> like, what code, from where
[11:41:45] <A_Dragon> you cannot use fork from C
[11:41:49] *** Joins: blaisebool (~blaiseboo@static.247.123.46.78.clients.your-server.de)
[11:42:23] <textbox> C code does a bunch of POSIX fork() calls at the beginning of the app lifetime
[11:42:47] <textbox> my main app is written in C and I'm trying to migrate parts of it to Go slowly
[11:42:48] <A_Dragon> and this is code managed by go, as in same process?
[11:43:01] <textbox> hmmm
[11:43:01] <textbox> yes
[11:43:07] <A_Dragon> or otherwise the runtime and scheduler is running at the same time in the same procesS?
[11:43:10] <A_Dragon> process*
[11:43:12] <textbox> I start Go, which calls in C code which then forks and those call back to Go code :D
[11:43:19] <A_Dragon> yeah no that wont work; not for forks
[11:43:33] <A_Dragon> you'll want to use syscall.Fork
[11:43:55] <A_Dragon> one moment
[11:43:59] <textbox> you have a good idea I think
[11:44:22] <A_Dragon> yeah you cant dupe the entire program, go holds mutexes and other things
[11:44:48] <A_Dragon> syscall.ForkExec
[11:44:54] <A_Dragon> is what you will want to be using
[11:45:59] <textbox> I wrapped my legacy C app into a static library and my main App is now Go. So Go's main() calls into the static-c-main(). which in turn does a bunch of fork() inside of it which in turn call back to Go
[11:46:08] <textbox> and that's probably the issue - this loop?
[11:46:43] <A_Dragon> https://cs.opensource.google/go/go/+/refs/tags/go1.17:src/syscall/exec_unix.go;drc=refs%2Ftags%2Fgo1.17;l=142 see here, you cant do simple fork()
[11:46:57] <A_Dragon> the runtime needs to prepare itself to duplicate things that can be duplicated and recreate things that cant
[11:47:21] <A_Dragon> either remove the forks or expose access to the go fork stuff in C
[11:47:30] *** Joins: bkircher (~bkircher@2001:a61:245a:8201:c518:484f:1750:7247)
[11:49:12] *** Quits: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au) (Ping timeout: 244 seconds)
[11:54:37] <A_Dragon> textbox: also see this answer here: https://stackoverflow.com/questions/28370646/how-do-i-fork-a-go-process
[11:57:19] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 252 seconds)
[11:57:57] *** Quits: k0ta (~k0ta@103.108.94.37) (Quit: leaving)
[11:57:59] <textbox> A_Dragon: that's a tremendous help, thanks a lot. It seems that due to the nature of my app I lose the ability to call back to Go code then
[11:59:32] *** Joins: fikran (~fikran@user/fikran)
[11:59:53] <A_Dragon> How are you communicating over fork?
[12:01:51] <A_Dragon> oh to call back
[12:02:00] <A_Dragon> yeahhhh Im honestly not sure how best to deal with that
[12:02:13] <A_Dragon> its likely some things get weird. probably best to use a socket instead
[12:11:53] *** Joins: ziofork (~ziofork@fr.worn.eu)
[12:13:47] *** Quits: paradise2go (~paradise2@103.160.233.90) (Quit: Client closed)
[12:29:20] *** Quits: sus (zero@user/zeromomentum) (Quit: the lounge - https://webirc.envs.net)
[12:29:35] *** Joins: dr0n (~nabromov@94.11.23.235)
[12:29:48] *** Joins: sus (zero@user/zeromomentum)
[12:33:05] *** Joins: dsrt^ (~dsrt@wsip-98-188-244-188.mc.at.cox.net)
[12:37:39] *** Quits: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net) (Remote host closed the connection)
[12:37:57] *** Joins: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net)
[12:42:27] <textbox> A_Dragon: currently investigating into the code as it was a black box for me however it seems like because the owning process is Go and it calls the C which in turn forks its a big no-no. Currently investigating why C needs those forks as all if Go is already there
[12:42:42] <textbox> though socket communication is with least surprises I think
[12:43:24] <textbox> current communication model is that once Go stars it opens UDS and writes to it and forked C process listen on that but looking at the code it seems like forks all listen on the sake UDS which doesn't make sense to me, oh well
[12:45:39] *** Joins: bpalmer (~user@user/bpalmer)
[12:49:46] *** Joins: Ergo^ (~ergo@91.238.59.144)
[12:55:54] *** Quits: andlabs (~andlabs@70.107.171.168) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[12:58:55] *** Quits: teasea (~teasea@user/teasea) (Quit: teasea)
[12:59:18] *** Joins: teasea (~teasea@user/teasea)
[12:59:35] *** Joins: andlabs (~andlabs@70.107.171.168)
[13:00:05] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[13:01:37] *** Joins: amahl (~amahl@dsl-jklbng12-54fbca-64.dhcp.inet.fi)
[13:14:52] *** Quits: amahl (~amahl@dsl-jklbng12-54fbca-64.dhcp.inet.fi) (Ping timeout: 252 seconds)
[13:15:39] *** Joins: gggp (~textual@111.63.14.115)
[13:17:10] *** Quits: gggp (~textual@111.63.14.115) (Client Quit)
[13:18:07] *** Joins: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au)
[13:25:24] *** Joins: gggp (~textual@111.63.14.115)
[13:31:22] *** Joins: k0ta (~k0ta@103.108.94.37)
[13:33:13] *** Joins: djo (~djo@91-173-41-2.subs.proxad.net)
[13:38:42] *** Joins: AstroBoar (~Falko@92.206.221.21)
[13:56:18] *** Quits: gggp (~textual@111.63.14.115) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[13:58:16] *** Quits: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au) (Ping timeout: 252 seconds)
[13:59:57] *** Quits: Jigsy (~Jigsy@user/jigsy) (Remote host closed the connection)
[14:00:21] *** Joins: Jigsy (~Jigsy@user/jigsy)
[14:04:16] *** Quits: neurocyte (~neurocyte@user/neurocyte) (Quit: The Lounge - https://thelounge.chat)
[14:06:38] *** Quits: k0ta (~k0ta@103.108.94.37) (Ping timeout: 244 seconds)
[14:07:07] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 252 seconds)
[14:07:54] *** Joins: neurocyte (~neurocyte@45.93.108.142)
[14:07:54] *** Quits: neurocyte (~neurocyte@45.93.108.142) (Changing host)
[14:07:54] *** Joins: neurocyte (~neurocyte@user/neurocyte)
[14:08:54] *** Joins: fikran (~fikran@user/fikran)
[14:11:06] *** Quits: flynn (~mcbloch@user/flynn) (Read error: Connection reset by peer)
[14:12:07] *** Joins: flynn (~mcbloch@user/flynn)
[14:12:11] *** Joins: elf_fortrez (~elf_fortr@adsl-64-237-239-250.prtc.net)
[14:15:00] *** b0nn is now known as rust
[14:15:05] <rust> go o/
[14:15:11] *** rust is now known as b0nn
[14:16:33] *** Joins: Atque (~Atque@user/atque)
[14:17:42] *** Joins: independent56 (~independe@95.144.68.39)
[14:22:11] *** kinduff4 is now known as kinduff
[14:33:59] *** Joins: gggp (~textual@111.63.14.115)
[14:34:32] *** Quits: gggp (~textual@111.63.14.115) (Client Quit)
[14:37:43] *** Quits: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net) (Remote host closed the connection)
[14:38:11] *** Joins: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net)
[14:55:09] <iateadonut> shiroyasha, thanks for the tip
[15:00:10] *** Joins: gggp (~textual@111.63.14.115)
[15:01:30] *** Joins: AquaL1te (~AquaL1te@user/aqual1te)
[15:09:48] *** Quits: independent56 (~independe@95.144.68.39) (Remote host closed the connection)
[15:10:06] *** Joins: independent56 (~independe@95.144.68.39)
[15:16:24] *** Quits: mikoto-chan (~mikoto-ch@ip-83-134-2-136.dsl.scarlet.be) (Quit: mikoto-chan)
[15:16:39] *** Joins: mikoto-chan (~mikoto-ch@ip-83-134-2-136.dsl.scarlet.be)
[15:17:31] *** Quits: gggp (~textual@111.63.14.115) (Ping timeout: 252 seconds)
[15:19:20] *** Joins: gggp (~textual@111.63.14.115)
[15:20:18] *** Quits: independent56 (~independe@95.144.68.39) (Remote host closed the connection)
[15:20:36] *** Joins: independent56 (~independe@95.144.68.39)
[15:23:37] *** Quits: elf_fortrez (~elf_fortr@adsl-64-237-239-250.prtc.net) (Ping timeout: 256 seconds)
[15:24:08] *** Quits: gggp (~textual@111.63.14.115) (Ping timeout: 244 seconds)
[15:27:14] *** AndrewYu is now known as Andrew
[15:29:18] *** Quits: independent56 (~independe@95.144.68.39) (Remote host closed the connection)
[15:29:36] *** Joins: independent56 (~independe@95.144.68.39)
[15:36:08] *** Quits: djo (~djo@91-173-41-2.subs.proxad.net) (Ping timeout: 256 seconds)
[15:37:18] *** Quits: independent56 (~independe@95.144.68.39) (Remote host closed the connection)
[15:37:36] *** Joins: independent56 (~independe@95.144.68.39)
[15:45:23] *** Joins: tealecloud (~tealeclou@cpc1-farn9-2-0-cust495.6-2.cable.virginm.net)
[15:46:15] *** Joins: verified_human (~verified_@user/verified-human/x-8819513)
[15:48:16] *** Quits: rabbitear (~juice@142.93.115.104) (Remote host closed the connection)
[15:49:45] *** Joins: rabbitear (~juice@142.93.115.104)
[15:49:56] *** Joins: oxum (~oxum@106.203.195.217)
[15:52:31] *** Quits: oxum (~oxum@106.203.195.217) (Remote host closed the connection)
[15:59:26] *** Quits: bpalmer (~user@user/bpalmer) (Read error: Connection reset by peer)
[16:05:03] *** Joins: cskr (~cskr@49.207.215.225)
[16:07:02] *** Joins: bpalmer (~user@user/bpalmer)
[16:16:12] *** Joins: kupi (uid212005@id-212005.stonehaven.irccloud.com)
[16:16:19] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 244 seconds)
[16:17:27] *** Quits: avakand (~root@static.164.226.201.195.clients.your-server.de) (Quit: WeeChat 3.1)
[16:18:16] *** Joins: fikran (~fikran@user/fikran)
[16:18:56] *** Joins: amahl (~amahl@dsl-jklbng12-54fbca-64.dhcp.inet.fi)
[16:20:34] *** Joins: burningserenity (~burningse@2603:9001:f01:ad99::1006)
[16:29:17] *** Quits: verified_human (~verified_@user/verified-human/x-8819513) (Quit: WeeChat 2.8)
[16:29:23] *** Joins: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au)
[16:32:16] *** Joins: zer0bitz (~zer0bitz@dsl-hkibng31-58c384-213.dhcp.inet.fi)
[16:37:31] *** Quits: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net) (Remote host closed the connection)
[16:38:14] *** Joins: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net)
[16:43:52] *** Quits: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au) (Ping timeout: 252 seconds)
[16:47:30] *** Joins: avakand (~root@static.164.226.201.195.clients.your-server.de)
[16:52:15] *** Quits: Kyros (~kyros@user/kyros) (Quit: ZNC 1.8.2 - https://znc.in)
[16:55:16] *** Joins: paulgrmn (~paulgrmn@user/paulgrmn)
[17:00:55] *** Quits: mikoto-chan (~mikoto-ch@ip-83-134-2-136.dsl.scarlet.be) (Ping timeout: 252 seconds)
[17:00:56] *** Joins: Kyros (~kyros@user/kyros)
[17:01:31] *** Joins: oxum (~oxum@106.203.195.217)
[17:02:49] *** Quits: oxum (~oxum@106.203.195.217) (Remote host closed the connection)
[17:03:01] *** Quits: AquaL1te (~AquaL1te@user/aqual1te) (Quit: leaving)
[17:05:27] *** Joins: oxum (~oxum@106.203.195.217)
[17:15:21] *** Joins: Torr (~Torr@user/torr)
[17:15:29] *** Joins: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com)
[17:22:46] *** Joins: mikoto-chan (~mikoto-ch@ip-83-134-2-136.dsl.scarlet.be)
[17:24:24] *** Joins: enkeyz (~enkeyz@user/enkeyz)
[17:29:17] *** Joins: Astro_Boar (~Falko@92.206.221.21)
[17:30:22] *** Quits: oxum (~oxum@106.203.195.217) (Remote host closed the connection)
[17:30:39] *** Parts: iateadonut (~dan@121.177.17.154) ()
[17:31:21] *** Quits: independent56 (~independe@95.144.68.39) (Remote host closed the connection)
[17:31:39] *** Joins: independent56 (~independe@95.144.68.39)
[17:32:16] *** Quits: AstroBoar (~Falko@92.206.221.21) (Ping timeout: 244 seconds)
[17:32:20] *** Joins: djo (~djo@91-173-41-2.subs.proxad.net)
[17:34:21] *** Quits: independent56 (~independe@95.144.68.39) (Remote host closed the connection)
[17:34:32] *** Joins: cp- (~cp-@b157153.ppp.asahi-net.or.jp)
[17:34:39] *** Joins: independent56 (~independe@95.144.68.39)
[17:36:55] *** Quits: djo (~djo@91-173-41-2.subs.proxad.net) (Ping timeout: 244 seconds)
[17:37:30] *** Quits: independent56 (~independe@95.144.68.39) (Remote host closed the connection)
[17:37:36] *** Joins: independent_ (~independe@95.144.68.39)
[17:39:23] *** Quits: andlabs (~andlabs@70.107.171.168) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[17:41:10] *** Quits: hv99 (~hv99@wireguard/tunneler/hv99) (Ping timeout: 240 seconds)
[17:44:11] *** Joins: oxum (~oxum@106.203.195.217)
[17:44:41] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[17:45:24] *** Quits: flynn (~mcbloch@user/flynn) (Read error: Connection reset by peer)
[17:46:22] *** Quits: oxum (~oxum@106.203.195.217) (Remote host closed the connection)
[17:46:25] *** Joins: flynn (~mcbloch@user/flynn)
[17:46:50] *** Joins: oxum (~oxum@106.203.195.217)
[17:49:32] *** Quits: oxum (~oxum@106.203.195.217) (Remote host closed the connection)
[17:49:33] *** Joins: hv99 (~hv99@wireguard/tunneler/hv99)
[17:49:37] *** Quits: frost (~frost@59.71.240.119) (Quit: Connection closed)
[17:52:32] *** Quits: holgersson (~quassel@user/holgersson) (Ping timeout: 245 seconds)
[17:52:49] *** Quits: ziofork (~ziofork@fr.worn.eu) (Quit: Ping timeout (120 seconds))
[17:53:09] *** Joins: ziofork (~ziofork@fr.worn.eu)
[17:53:21] *** Joins: ninjin (~ninjin@user/ninjin)
[17:53:21] *** Quits: ninjin- (~ninjin@user/ninjin) (Ping timeout: 276 seconds)
[17:56:12] *** Joins: holgersson (~quassel@user/holgersson)
[18:01:14] *** Joins: oxum (~oxum@106.203.195.217)
[18:02:58] *** Quits: lux0r (~lux0r@163.172.148.99) (Ping timeout: 240 seconds)
[18:03:41] *** Quits: aram (~aram@9front.army) (Ping timeout: 252 seconds)
[18:03:59] *** Quits: koolazer (~koo@user/koolazer) (Ping timeout: 250 seconds)
[18:05:49] *** Quits: oxum (~oxum@106.203.195.217) (Ping timeout: 252 seconds)
[18:07:37] *** Joins: oxum (~oxum@106.203.195.217)
[18:11:45] *** Joins: iateadonut (~dan@121.177.17.154)
[18:11:49] *** Parts: iateadonut (~dan@121.177.17.154) ()
[18:15:09] *** Quits: oxum (~oxum@106.203.195.217) (Ping timeout: 244 seconds)
[18:15:58] *** Joins: andlabs (~andlabs@70.107.171.168)
[18:21:24] <iivvoo> any gorm users here? I'm not one myself but reviewing some (applicant) code that uses it, and it doesn't make sense
[18:22:06] <iivvoo> `gorm:"foreignKey:ID"` - would that make the relation based on the object ID? In the database itself (postgresql) I don't actually see a foreign key field
[18:23:22] <iivvoo> just a paste here: https://play.golang.org/p/W9H0q6A4fb_r - does not actually run (of course). Does this make sense with gorm? At least it doesn't make for me related to the generated tables, for me
[18:25:29] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 244 seconds)
[18:26:00] <iivvoo> "fk_users_seats" FOREIGN KEY (id) REFERENCES users(id) which effectively means every user has a single seat / every seat has a single user and (randomly) they have to match by id?
[18:27:11] *** Joins: jjonah (~jjonah@p200300d5d71aad00dea632fffeb3342f.dip0.t-ipconnect.de)
[18:27:38] *** Joins: fikran (~fikran@user/fikran)
[18:27:43] *** Quits: thing (~thing@user/thing) (Quit: thing)
[18:28:00] *** Joins: thing (~thing@user/thing)
[18:28:38] *** Joins: sudoforge (~sudoforge@wireguard/tunneler/sudoforge)
[18:29:17] *** Quits: mickey (~user@user/mickey) (Quit: Ping timeout (120 seconds))
[18:29:35] *** Joins: mickey (~user@user/mickey)
[18:31:54] *** Ginja is now known as GinjaNinja32
[18:35:57] *** Quits: kupi (uid212005@id-212005.stonehaven.irccloud.com) (Quit: Connection closed for inactivity)
[18:37:35] *** Quits: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net) (Remote host closed the connection)
[18:37:49] *** Joins: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net)
[18:38:34] *** Joins: fanis30 (~anon@adsl-180.37.6.1.tellas.gr)
[18:40:29] *** Quits: auser0 (~user@41.44.116.27) (Read error: Connection reset by peer)
[18:41:29] <fizzie> I don't know anything about GORM, but just having that one foreign key constraint you show SQL for doesn't mean "every user has a single seat", only the other way around.
[18:42:08] <fizzie> Oh, I guess maybe it does if that "id" column is also constrained to be unique, never mind.
[18:44:35] *** Joins: Everything (~Everythin@37.115.210.35)
[18:47:42] *** Quits: qwedfg (~qwedfg@user/qwedfg) (Ping timeout: 244 seconds)
[18:53:04] *** Joins: someuser (~user@41.239.243.83)
[18:56:32] <sweater> https://github.com/golang/go/issues/48108#issuecomment-910334567 left some braindead questions to Robert. I don't expect him to answer, of course, so if the community can help out golang newbie, it would be highly appreciated.
[18:56:59] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Remote host closed the connection)
[18:57:22] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[18:57:40] *** Quits: Astro_Boar (~Falko@92.206.221.21) (Quit: WeeChat 2.8)
[18:59:47] *** Quits: kinlo (~peter@user/kinlo) (Ping timeout: 252 seconds)
[19:01:38] *** Joins: kinlo (~peter@user/kinlo)
[19:02:03] <sztanpet> not sure why you wouldnt describe what exactly you want to achieve and instead expect robert to know haskel, but maybe he does
[19:03:07] <sweater> Oh, I'm fairly sure he does. I can try to explain the notion of newtype beyond the title of the issue.
[19:04:43] <sweater> The idea is that for any type T we want to have an idiom that doesn't do anything except wrapping it in another type. For example, you give me `bool` as `T`, I give you `ExprConst` which contains just one field of type `bool`. `ExprConst` should be polymorphic in the type you give to it.
[19:05:32] <siXy> sweater: It's always better to express problems in terms of a concrete job you want to achieve. Telling us that you want to write haskell in go leads us to the obvious conclusion that you should just write haskell instead.
[19:06:15] *** Joins: oxum (~oxum@106.203.195.217)
[19:06:21] <sweater> siXy: ok, I want to parametrise a generic type in a method meaningfully.
[19:07:07] <siXy> that's not a particularly well defined question. What are you _really_ trying to do? What actual problem are you trying to solve?
[19:07:42] <sweater> Ok, Wadler claimed that generic go solves the expression problem. I'm trying to validate it independently.
[19:07:45] <sztanpet> i still have no idea, im basically getting a "i want to have multiple dispatch based on types" vibe
[19:11:20] *** Quits: oxum (~oxum@106.203.195.217) (Ping timeout: 252 seconds)
[19:11:47] <sweater> To do that, I'm following the expression problem formulation, which states that in the inital state of the code base, we should have independent type case for constants (which I want to emulate with a "type wrapper" around T, along with a way to retrieve T from the wrapper); and evaluators (which I'm trying to implement as an Evaler interface that takes a constant expression wrapping some T1,
[19:11:49] <sweater> which is, perhaps, more specific than T and runs a function from T1 to T2, returning a value of type T2).
[19:12:21] <sweater> This is where I'm stuck currently.
[19:14:57] <sweater> Of course, I could start with a fistful of concrete types, say, fix T and T1 to be just bool, fix T2 to be int and call it a day, but I would like to see if I can encode more generic design.
[19:15:52] *** Quits: textbox (~textbox@78-56-77-125.static.zebra.lt) (Remote host closed the connection)
[19:18:22] <siXy> Have you read https://go.googlesource.com/proposal/+/refs/heads/master/design/43651-type-parameters.md ?
[19:19:42] <sztanpet> so generics for generics sake :)
[19:19:56] <sweater> Yes, I have referred to it in the linked comment, but I don't have working knowledge of golang to understand distinction between methods and functions, so I don't quite understand the bit that I linked which suggests the impossibility of doing it for methods.
[19:20:14] <sweater> sztanpet: no, generics for the sake of validating that go with generics solves expression problem.
[19:20:42] <siXy> Yeah, I think you need to start by learning Go properly. tour.golang.org is a good place to start.
[19:21:41] <bookworm> if all you want is a type that is based on some underlying thing just make a new type
[19:21:52] <bookworm> no need for generics
[19:21:59] <sweater> siXy: I am aware of that resource, but please, don't hold back the answer to my question if you have it :)
[19:22:37] <sweater> bookworm: fair enough, I'm looking at this approach right now. I would still be polymorphic in Evaler via interface.
[19:23:52] <sweater> And I guess, extending Evalers with new "T2"s could be done explicitly by adding FoloatEvaler alongside IntEvaler, let's say.
[19:24:38] <sweater> Which still maintains openness of codebase to adding type cases and functions over types because FloatEvaler can reside in a separate module and not depend on IntEvaler.
[19:25:50] <sweater> I still wonder why can I narrow down constraints in a funciton but not in a method.
[19:26:08] <bookworm> you should really try to structure your stuff like idiomatic go rather than trying to shoehorn some other language on top of it
[19:26:19] <sweater> (I expect that a plain English answer to this question that doesn't involve passive aggression exist!)
[19:28:01] <sweater> bookworm: perhaps you can suggest interpreters / DSLs written in Go that you consider idiomatic?
[19:28:15] <sweater> (Non-embedded DSLs)
[19:28:43] <sweater> (Although I guess an embedded DSL would also work, sorry)
[19:30:34] <Tv_> sweater: https://github.com/google/starlark-go is an interpreter for a DSL and written by a very clueful person
[19:30:45] <sweater> Tv_: thank you! <3
[19:31:16] *** Quits: kipukun (~kipukun@207.244.104.227) (Quit: ZNC 1.7.2+deb3 - https://znc.in)
[19:31:28] <Tv_> note complete lack of attempting to program in haskell ;)
[19:32:26] <Tv_> oh fun, i have forgotten my recovery passphrase *sigh*
[19:33:02] *** Joins: kipukun (~kipukun@207.244.104.227)
[19:33:03] <sweater> Tv_: I mean, we work with the concepts we have at our disposal. Part of me referring to Haskell idioms was a false assumption that since parametric polymorphism comes from ML, using idioms that stem from ML will make it easier to communicate intent, not harder.
[19:33:47] <Tv_> sweater: i heartily encourage learning to use Go as it is today, instead of assuming you should emulate something else in Go-with-generics
[19:34:09] <Tv_> i surely hope typical Go code doesn't change much, even after the parametric types stuff is released
[19:35:02] <bookworm> indeed
[19:35:20] <sweater> I understand... Thing is that I'm writing a series of blogposts that motivate PLT research and I am intending to use Go as an example of a well-designed language that, by accompanying concepts from ML ends up beating Haskell in scalability of code bases.
[19:36:29] <sztanpet> its just that go is trying to be simple, pragmatic and non-quite-as-academic as haskel and friends are, sorry if its frustrating
[19:37:07] <Tv_> sweater: Go beats Haskell in scalability of code bases by remaining simple and uniform across practitioners, none of that <=@spaceship@=> stuff
[19:38:02] <Tv_> sweater: and this is why people are pretty harsh on someone trying to program Go as if it was $NOT_GO. it's ruining the fact that we're used to just opening _any_ source file in _any_ project and being able to read it easily, without needing to "study the local conventions"
[19:38:20] <sweater> Gladly, there is an quantifiable criterion to check scalability of codebases, which I intend to use in the post.
[19:38:58] *** Quits: fanis30 (~anon@adsl-180.37.6.1.tellas.gr) (Quit: WeeChat 3.2)
[19:39:02] <sweater> (I already feel the downvotes from reddit coming to the post that praises Go by providing an outsider perspective)
[19:39:20] <sztanpet> reddit is a cesspit
[19:39:24] <sweater> Also, I'm kind of tempted to politely disagree with the homogenity of practices!
[19:40:08] *** Joins: arcatech (~arcatech@user/arcatech)
[19:40:12] <sweater> Haskell kind of forces homogenity by being restrictive, and it provides several "spaceship" approaches to increasing expressiveness.
[19:40:13] <Tv_> there's basically the Go that the Go authors write, and a separate culture of people programming Javascript in Go, and that's roughly it for now
[19:40:34] <Tv_> you can identify the latter by e.g. map[string]interface{} etc everywhere
[19:40:51] <sweater> The fact that I'm suggested to basically read a bunch of code and then lay my code out the way others do it is not an intrinsic property of the language.
[19:41:05] <Tv_> now that generics are getting closer, it looks like we're getting a third "i wish it was haskell" group
[19:41:17] <sweater> Furthermore, at work, we do exactly the same with our Haskell code bases.
[19:41:22] <Tv_> sweater: Go succeeds at it better than most
[19:42:13] <sweater> Anyway, this argument is qualitative, as opposed to validation via expression problem.
[19:42:24] <Tv_> well that sure got academic
[19:42:32] <Tv_> sorry, this channel tends to have mostly working programmers
[19:43:19] <sweater> I'm a drop-out, so I should fit in :D
[19:43:50] *** Quits: francis (francis@user/francis) (Quit: rb)
[19:44:03] *** Quits: jjonah (~jjonah@p200300d5d71aad00dea632fffeb3342f.dip0.t-ipconnect.de) (Remote host closed the connection)
[19:44:39] <siXy> sweater: Try to understand that a user asking extremely vague and theoretical questions about a language they have no idea how to actually write code in comes across _very_ poorly. You're unlikely to find someone willing to put the requisite amount of effort to teach you how to do <complicated thing> when you refuse to start by learning the actual language first.
[19:45:15] <sweater> Anyway, thanks for the link, Tv_. Maybe someone will answer the constraint narrowning in funcitons vs methods question eventually, if not, it's fine. bookworm provided a nice suggestion which fits the bill. Thanks all, sorry for responding to passive agression with passive agression. That's a vicious circle.
[19:45:19] <Tv_> siXy: but surely such a thing has been done in the literary prior
[19:45:25] <Tv_> *literature
[19:45:37] *** Joins: Giedrius (~giedrius@5.133.65.65)
[19:45:48] <Tv_> sweater: i thought that was already answered, there is no constraint narrowing?
[19:45:48] *** Joins: jjonah (~jjonah@p200300d5d71aad00dea632fffeb3342f.dip0.t-ipconnect.de)
[19:45:55] <bookworm> I'm still wondering where you think stuff was passive aggressive
[19:46:01] <Tv_> method type parameters are the same as the type type parameters
[19:46:24] <siXy> I checked - in the original paper there is an implementation of what he/she is looking for - it doesn't actually quite compile because the generics proposal evolved some. It could probably be made to work, but not without first learning how to write go....
[19:46:27] <Tv_> that's in the issue
[19:47:18] <sweater> Yes, I was wondering why, sorry.
[19:48:24] <Tv_> because solving simpler problems enables one to make progress
[19:48:31] *** Joins: lilgopher (~textual@c-73-51-174-246.hsd1.il.comcast.net)
[19:48:49] *** Joins: francis (francis@user/francis)
[19:48:54] <Tv_> engineering, not science
[19:51:01] *** Quits: wim_ (~wim@42.be) (Quit: leaving)
[19:51:35] *** Joins: wim_ (~wim@42.be)
[19:52:51] *** wim_ is now known as wim
[19:54:18] *** Quits: dr0n (~nabromov@94.11.23.235) (Remote host closed the connection)
[19:55:54] *** Quits: mteo (francis@user/francis) (Quit: rb)
[19:57:11] *** Joins: mteo (francis@user/francis)
[19:57:43] *** Quits: lilgopher (~textual@c-73-51-174-246.hsd1.il.comcast.net) (Quit: Textual IRC Client: www.textualapp.com)
[19:58:07] *** Joins: lilgopher (~textual@c-73-51-174-246.hsd1.il.comcast.net)
[19:59:40] *** Quits: cskr (~cskr@49.207.215.225) (Ping timeout: 252 seconds)
[20:00:45] *** Joins: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au)
[20:05:43] *** Quits: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au) (Ping timeout: 252 seconds)
[20:06:51] *** Joins: iateadonut (~dan@121.177.17.154)
[20:07:31] <sweater> Is there an engineering way of declaring multiple head functions?
[20:07:51] <Tv_> define head function
[20:08:16] <sztanpet> you mean multiple functions with the same name?
[20:08:18] <Tv_> as in lisp? that doesn't sound like programming Go..
[20:08:19] <sweater> Let's say I want to define a function that works on ints or bools and return an int
[20:08:28] <ikke> oh, generics
[20:08:43] <Tv_> sweater: i really, *really* would encourage you to drop generics for now and learn Go first
[20:08:59] <Tv_> basically either that or don't bother learning Go at all
[20:09:02] <sztanpet> the tour is succint and teaches you everything but the sharp edges
[20:09:05] <sweater> Tv_: I'm asking a question about Go
[20:09:15] <Tv_> because really, you will only do harm if all you do is try to apply generics
[20:09:24] <sweater> If you can have two functions with the same name with different signatures.
[20:09:31] <Tv_> sweater: Go as released today cannot have two functions with the same name
[20:09:37] <Tv_> write multiple functions
[20:09:55] <Tv_> or don't write that function; `head` sounds like a function no gopher would ever write
[20:10:14] <sztanpet> sweater sure, but go is a relatively tiny language and all of its features are presented in the tour
[20:10:18] <Tv_> sweater: what problem is being solved here? there's likely a more typical Go way of doing things.
[20:10:29] <sztanpet> thus the reason everyone is saying to go through with it first
[20:11:02] <sweater> "A clause head consists of the function name and an argument list", sorry for not being clear.
[20:11:17] <sweater> I didn't mean "mulitple *head* functions", I meant "functions with multiple head clauses"
[20:11:31] <Tv_> what on earth is a "head clause" then
[20:11:51] <sweater> Tv_: I'm trying to prove or disprove claim "Go solves expression problem": https://homepages.inf.ed.ac.uk/wadler/papers/expression/expression.txt
[20:11:52] <Tv_> still sounds like you're just trying to program Haskell in Go
[20:11:59] <ikke>  alles wat hij doet is volmaakt,+
[20:12:08] <ikke> sorry, mispaste
[20:12:19] <Tv_> sweater: oh, academic wankery. color me uninterested.
[20:12:56] <sweater> I think I've got a title for the section about golang :D
[20:14:09] *** Joins: verified_human (~verified_@user/verified-human/x-8819513)
[20:14:40] <siXy> sweater: Again, asking vague and academic questions about a language you don't know even the very basics of how to write is not going to make people want to help you.
[20:15:02] <Tv_> siXy: "but i only want to learn Go in theory!"
[20:15:06] <sweater> siXy: I don't know, mate, I know just enough go to patch TLS client.
[20:15:31] <siXy> If you don't know what a method is, you definitely don't know enough go to patch a tls client.
[20:15:34] <sweater> The fact that I don't know intricacies of implementation of generics and come to the community expecting to not be ridiculed for asking questions seems to be my mistake.
[20:15:46] <Tv_> siXy: dunno changing existing code in a strange language can be very simple
[20:16:01] <Tv_> sweater: how's this: Go has no generics.
[20:16:23] <ikke> (yet)
[20:16:25] <Tv_> it may gain parametric types or something later. now, it definitely doesn't have any.
[20:16:35] *** Joins: lazy1 (~tebeka@bzq-109-67-135-144.red.bezeqint.net)
[20:16:41] *** Joins: brent (~user@quantum2.chem.olemiss.edu)
[20:18:03] <ikke> wasn't 1.18 supposed to get generics?
[20:18:24] <siXy> sweater: You're interpreting this as people ridiculing you. That's not correct. We aren't ridiculing you - you're badly misinterpreting us trying to explain that you need to put in some effort on your part, rather than just expecting us to go and solve your problems for you.
[20:18:28] <sztanpet> probably, not definitively ikke
[20:18:38] <ikke> right
[20:18:47] <sweater> No generics, just a mildly toxic community, gotcha. siXy when I say that I don't know what a method is I'm just being intellectually honest. I don't know how it's implemented in the compiler. Furthermore, if you open "A Tour of Go", you'll see, on slide two of methods section, claim "methods are functions".
[20:19:21] <ikke> sweater: that's a bad-faith interpretation
[20:19:34] <sweater> ikke: define "bad-faith interpretation"
[20:20:24] <ikke> assume the worst in people
[20:20:25] <sweater> They say "they are functions that take a receiver". When I write func Eval(e ExprBool) int, don't I write a function that takes receiver in the first argument?
[20:20:47] <Tv_> sweater: that's not a receiver, that's just an argument
[20:20:55] <ikke> func (r Type) Foo(arguments)
[20:21:20] <sweater> Alright, I concede that I properly don't know what a receiver is :)
[20:21:20] <Tv_> sweater: seriously, program just Go for a while, or don't, but stop trying to "understand it in the abstract"
[20:21:31] *** Quits: brent (~user@quantum2.chem.olemiss.edu) (Quit: ERC (IRC client for Emacs 28.0.50))
[20:21:32] *** Joins: goldfish (~goldfish@user/goldfish)
[20:21:45] <sweater> Tv_: I did, it didn't help me understand it in the abstract.
[20:21:54] <Tv_> good.
[20:21:58] <Tv_> >:->
[20:22:08] <sweater> But I need to understand it in the abstract, don't I?
[20:22:13] <Tv_> now either write something useful in it, or don't
[20:22:23] <Tv_> "expression problem" is not really where Go attempts to shine
[20:22:55] <ikke> sweater: You start with concrete examples. Once you grasp the concrete examples, you can start understanding abstract concepts
[20:23:04] <Tv_> this is what Go tries to be good at: https://pkg.go.dev/github.com/golang/groupcache
[20:23:22] <sweater> Okay, so it's impossible to add functions over all type cases and type cases that work with all functions for some initial set of functions and type cases without recompilation of the initial set in go, right?
[20:23:45] <Tv_> uninteresting
[20:24:11] <Tv_> why would you even attempt to "avoid recompilation" when you're not in the 70s anymore
[20:24:32] <ikke> It's a definition they use. Sound to me like the open-closed principle
[20:24:33] <sztanpet> i would say thats safe to say a yes to, now who actually has an authoritative yes is another question
[20:24:36] <sweater> Because recompilation ~ code change ~ reduced scalability of code bases.
[20:24:48] *** Quits: verified_human (~verified_@user/verified-human/x-8819513) (Quit: WeeChat 2.8)
[20:25:20] <ikke> I think this pertains to c-like languages, where you have explicit compilation units
[20:26:07] *** Quits: arcatech (~arcatech@user/arcatech) (Quit: Bye.)
[20:26:08] <Tv_> sweater: reduced measure according to some paper
[20:26:20] <Tv_> whether that correlates with real world scalable code bases or not is a different question
[20:26:35] <Tv_> Go has so far excelled at large code bases in the real world
[20:26:46] *** Joins: arcatech (~arcatech@user/arcatech)
[20:26:46] <sweater> sztanpet: from reading the GG paper, I felt like it's a decisive "no, it is possible". I got really excited because I miss this property in practice and wrote some paragraphs full of praise about this property, and then I tried to write down the code that proves it and got stuck trying to do it systemically enumerating different approaches.
[20:27:51] <sztanpet> sweater dunno, you know more than me
[20:27:58] *** Quits: iateadonut (~dan@121.177.17.154) (Quit: Leaving.)
[20:28:24] <sweater> I don't think so, I don't even know what a receiver is, really.
[20:28:31] *** Quits: kmerfeld (~kmerfeld@2600:1700:8c31:a00:dea6:32ff:fe93:748) (Remote host closed the connection)
[20:28:50] <sweater> Ok, sorry for being annoying and coming off as arrogant, at no point it was my intention.
[20:29:05] <sztanpet> i like to think that everybody was trying to help and the questions posed illustrated a lack of knowledge of the basics of go-as-it-exists-without-generics (which generics wont change), and that was all the friction
[20:29:27] <siXy> sweater: it may well be possible, but you're trying to run before you know how to crawl, and every time we try to tell you this you say that we're being toxic and passive aggressive.
[20:29:27] <sweater> I'll go through the tour as suggested to be able to provide an educated summary for the research I'm doing.
[20:30:40] <sweater> siXy: if you have an idea for doing it, please share. I'll go through tour and relevant parts of spec!
[20:31:33] *** Joins: kmerfeld (~kmerfeld@2600:1700:8c31:a00:dea6:32ff:fe93:748)
[20:31:55] <siXy> The code in the original paper that you presumably read can probably be adapted into functionality - but that's a non-trivial amount of work that I'm not going to just do for you.
[20:32:08] <sweater> (FTR, if anyone wants to ask me conceptual questions, say, about Erlang, prior to learning it and formulated in terms of Go routines and channels, I'll do my best to understand those and answer)
[20:33:24] <sweater> siXy: it depended on narrowing constraints in methods, didn't it? That was my first attempt.
[20:33:52] *** Quits: Giedrius (~giedrius@5.133.65.65) (Remote host closed the connection)
[20:34:49] *** Quits: stefanc_diff (~stefanc_d@cpc97950-croy24-2-0-cust78.19-2.cable.virginm.net) (Remote host closed the connection)
[20:34:50] <siXy> I suspect you could make it work to a degree at least by expressing the "loose" constraint as an interface.
[20:35:02] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 245 seconds)
[20:37:00] *** Joins: fikran (~fikran@user/fikran)
[20:37:20] <sweater> But then I'll have to update it as I add functionality, causing recompilation of existing code, right?
[20:37:36] *** Quits: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net) (Remote host closed the connection)
[20:37:42] <Tv_> egads
[20:37:53] <Tv_> you'll never get those seconds back
[20:37:55] *** Joins: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net)
[20:38:10] *** Quits: lazy1 (~tebeka@bzq-109-67-135-144.red.bezeqint.net) (Ping timeout: 252 seconds)
[20:38:15] <siXy> no
[20:38:37] <siXy> also avoiding compilation in go is kind of silly - even very large projects take basically no time to build
[20:39:22] <sweater> I tried to proxy the constraint as an interface in the integration point which is only small cheating, but there was a problem too, I don't remember the details.
[20:40:03] <siXy> well once you've learnt the language properly you might be able to work around that problem
[20:40:08] <ikke> What kind of constraint?
[20:40:39] <sweater> Ok, I'll keep in mind what you said and will try to find a way to do it without editting interface constraint in ExprConst!
[20:41:02] <sweater> Thanks for giving a hint about a possible solution. :)
[20:51:13] *** Joins: qwedfg (~qwedfg@user/qwedfg)
[20:52:36] *** Quits: saschagrunert (~saschagru@46.128.124.46) (Remote host closed the connection)
[20:55:17] *** Quits: independent_ (~independe@95.144.68.39) (Remote host closed the connection)
[20:55:36] *** Joins: independent_ (~independe@95.144.68.39)
[20:56:20] *** Quits: kmerfeld (~kmerfeld@2600:1700:8c31:a00:dea6:32ff:fe93:748) (Remote host closed the connection)
[20:58:03] *** Quits: absc (~absc@dynamic-adsl-94-34-168-146.clienti.tiscali.it) (Quit: Leaving.)
[20:59:17] *** Quits: independent_ (~independe@95.144.68.39) (Remote host closed the connection)
[20:59:36] *** Joins: independent_ (~independe@95.144.68.39)
[21:00:45] *** Quits: arcatech (~arcatech@user/arcatech) (Quit: Bye.)
[21:08:55] *** Quits: andlabs (~andlabs@70.107.171.168) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[21:09:41] *** Quits: khyr0n (~khyr0n@2806:2f0:9260:e17b:8c10:d579:6fb:d3b4) (Read error: Connection reset by peer)
[21:11:10] *** Joins: andlabs (~andlabs@70.107.171.168)
[21:11:45] *** Quits: andlabs (~andlabs@70.107.171.168) (Client Quit)
[21:12:18] *** Joins: khyr0n (~khyr0n@2806:2f0:9260:e17b:8c10:d579:6fb:d3b4)
[21:15:01] *** Joins: porn (~hentai@2a01:e0a:a5c:a070:6f38:c445:ff3c:8e97)
[21:15:01] *** Quits: porn (~hentai@2a01:e0a:a5c:a070:6f38:c445:ff3c:8e97) (Changing host)
[21:15:01] *** Joins: porn (~hentai@user/hentai)
[21:18:47] *** Quits: hentai (~hentai@user/hentai) (Ping timeout: 240 seconds)
[21:20:18] *** Joins: lazy1 (~tebeka@bzq-109-67-135-144.red.bezeqint.net)
[21:20:20] <sweater> https://tour.golang.org/moretypes/5 is there a way to define custom default values for fields?
[21:21:05] *** Quits: A_Dragon (A_D@doom-tower.awesome-dragon.science) (Changing host)
[21:21:05] *** Joins: A_Dragon (A_D@libera/staff/dragon)
[21:21:26] <Tv_> no
[21:21:56] <Tv_> zero values are literally zero in memory, that means large swaths of memory can be zeroed all at once
[21:22:06] <sweater> Understood, thanks.
[21:22:42] *** Quits: theoceaniscool (~theoceani@213.94.16.93) (Ping timeout: 244 seconds)
[21:22:55] *** Quits: Ergo^ (~ergo@91.238.59.144) (Remote host closed the connection)
[21:23:40] *** Quits: Xe (~cadey@tailscale/xe) (Ping timeout: 240 seconds)
[21:25:33] *** Quits: khyr0n (~khyr0n@2806:2f0:9260:e17b:8c10:d579:6fb:d3b4) (Quit: Leaving)
[21:25:46] *** Joins: khyr0n (~khyr0n@2806:2f0:9260:e17b:8c10:d579:6fb:d3b4)
[21:26:16] *** Quits: flynn (~mcbloch@user/flynn) (Read error: Connection reset by peer)
[21:27:18] *** Joins: flynn (~mcbloch@user/flynn)
[21:27:39] *** Joins: arcatech (~arcatech@user/arcatech)
[21:27:43] *** Joins: NCS_One (~NCS_One@bl11-90-133.dsl.telepac.pt)
[21:27:55] <sweater> How do I go about learning garbage collection? I have questions about it here already: https://tour.golang.org/moretypes/15
[21:28:22] <sweater> Namely, what happens when I have a slice that is too small to contain new data after append, then reallocation happens because of that.
[21:28:44] <ikke> that's why you do `foo = append(foo, elem)`
[21:28:47] <sweater> Will it get dropped based on reference counting? Will it stay until the next invocation of reference counter? Does Go use a different starategy?
[21:29:02] <siXy> https://go.dev/blog/ismmkeynote
[21:29:04] <sweater> ikke: can I say bar = append(foo, elem)?
[21:29:08] *** Joins: Xe (~cadey@tailscale/xe)
[21:29:09] <siXy> yes you can
[21:29:34] <sweater> siXy: thanks! I have it open at the moment, thank you for confirming that it's the best way to learn this.
[21:30:25] <fizzie> FWIW, `bar = append(foo, elem)` can get a little confusing, because you don't know for sure whether `foo` and `bar` share their backing array. Of course sometimes you don't care.
[21:30:52] <sweater> fizzie: ahha! That's what I thought.
[21:31:01] <sweater> Thanks for confirming!
[21:31:45] *** A_Dragon is now known as ad
[21:31:54] *** ad is now known as A_Dragon
[21:32:06] *** A_Dragon is now known as A_D
[21:32:41] *** A_D is now known as ad
[21:32:49] *** ad is now known as A_Dragon
[21:33:52] *** Joins: djo (~djo@91-173-41-2.subs.proxad.net)
[21:33:55] *** Joins: sweb (~sweb@static.187.181.76.144.clients.your-server.de)
[21:34:12] <sweb> any idea why Contains return false https://play.golang.org/p/ovGi0XjAkrc ?
[21:34:47] *** Quits: arcatech (~arcatech@user/arcatech) (Quit: Bye.)
[21:36:38] <fizzie> Because `net.IP("...")` converts the *bytes* of the string literal into a []byte that's considered to be an IP address, rather than parsing a dotted-quad IP address.
[21:37:10] <fizzie> https://play.golang.org/p/2vZpgH44S63 says `true`.
[21:37:34] <Tv_> oof that's an ugly consequence of exposing the implementation
[21:38:06] <Tv_> can't think of a single reason to convert strings into the IP []byte like that
[21:38:44] *** Quits: djo (~djo@91-173-41-2.subs.proxad.net) (Ping timeout: 252 seconds)
[21:38:47] <Tv_> sweb: i'd encourage you to see if go vet or staticcheck detect that as a bug, and file an issue wishing for such
[21:39:30] <sweb> thanks guys
[21:39:47] *** Joins: arcatech (~arcatech@user/arcatech)
[21:41:37] *** Joins: theoceaniscool (~theoceani@119.12.232.133)
[21:43:16] *** Joins: keiser0091075852 (~keiser@188.47.7.208.ipv4.supernova.orange.pl)
[21:49:34] *** Quits: hikhvar796073809 (~thelounge@x4db9a3a1.dyn.telefonica.de) (Ping timeout: 244 seconds)
[21:54:11] *** Quits: mikoto-chan (~mikoto-ch@ip-83-134-2-136.dsl.scarlet.be) (Quit: mikoto-chan)
[22:05:00] *** Joins: oxum (~oxum@106.203.195.217)
[22:09:10] *** Quits: lazy1 (~tebeka@bzq-109-67-135-144.red.bezeqint.net) (Ping timeout: 240 seconds)
[22:15:06] *** Quits: qwedfg (~qwedfg@user/qwedfg) (Read error: Connection reset by peer)
[22:17:54] *** Joins: qwedfg (~qwedfg@user/qwedfg)
[22:20:12] *** Quits: oxum (~oxum@106.203.195.217) (Remote host closed the connection)
[22:25:07] *** Joins: oxum (~oxum@106.203.195.217)
[22:25:22] <sweater> OK, I've got to methods.
[22:25:58] <sweater> I assumed that by the slide that have confused me it will be explained what "receivers" are, but it seems like it's still just an argument.
[22:26:11] <sweater> How would I go about learning what is a receiver?
[22:26:30] <A_Dragon> sweater: its basically just another argument
[22:26:39] <A_Dragon> but by setting it you attach the method to the struct
[22:27:00] <ikke> foo.bar()
[22:27:03] <ikke> foo is the receiver
[22:27:25] <sweater> Sadly, this is not enough to understand why I can't narrow down generic constraints on methods, but I can on functions.
[22:27:54] <ikke> Can you show an example of what you tried? (eg. on play.golang.org)
[22:28:06] *** Quits: qwedfg (~qwedfg@user/qwedfg) (Read error: Connection reset by peer)
[22:28:08] <sweater> What's the intermediate way of learning Go, which is more detailed than tutor, but less detailed than reading the compiler's source code?
[22:28:14] <sweater> ikke: yes, one sec.
[22:28:31] <quippy> I just read Effective Go and then got to work, personally
[22:28:57] <sweater> It's also something available on the website, right? I thought I saw it.
[22:29:22] <ikke> https://golang.org/doc/effective_go
[22:29:40] <sweater> Understood, thank you. I'll still finish tutor because I'm almost done.
[22:29:49] *** Quits: oxum (~oxum@106.203.195.217) (Ping timeout: 252 seconds)
[22:29:58] <ikke> tutor or tour?
[22:30:07] <sweater> Tour, sorry. Too much Magic.
[22:30:31] <ikke> yes, finishing that is recommended
[22:31:34] *** Joins: qwedfg (~qwedfg@user/qwedfg)
[22:32:09] <sweater> ikke: https://go2goplay.golang.org/p/Yaa9Pz_RXwy
[22:32:53] <ikke> Ah, you are using generics already
[22:34:06] *** Joins: src (~src@user/src)
[22:34:54] <Tv_> sweater: receivers are arguments, but all arguments are not receivers
[22:35:24] <Tv_> sweater: earlier you asked whether the x in func foo(x) is a receiver; it is not
[22:36:16] <Tv_> (for some value of the word "argument" that probably doesn't 100% match the spec. receivers are variables the function body sees, just like arguments and named return values)
[22:36:43] <ikke> I suppose it can be considered as an argument
[22:36:50] <ikke> similar like how python as an explicit self
[22:37:38] *** Quits: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net) (Remote host closed the connection)
[22:38:01] *** Joins: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net)
[22:38:25] <quippy> I haven't tried out the generics yet, how are people liking them?
[22:38:25] <Tv_> "The scope of an identifier denoting a method receiver, function parameter, or result variable is the function body."
[22:39:08] <Tv_> elsewhere, receivers are said to be parameters, but that may be talking more about the syntax of the func (...) foo(...) thing
[22:39:23] <fizzie> For whatever reason, I don't feel surprised you can't do the commented-out thing. It'd be kind of like template specialization, which the generics proposal explicitly excluded. As for `EvalF`, it works because `ExprConst[bool]` is just a concrete type that normal function parameter can be.
[22:39:27] <quippy> receivers are variables that the function sees AND the caller can see the variable, without explicitly needing to return the variable within the function
[22:40:01] <Tv_> quippy: i think you meant to say something about named return values?
[22:40:07] <quippy> so if you find yourself writing a function that takes a pointer and then modifies the object and returns the same pointer, you probably wanted to write a method with that object as its receiver instead
[22:40:16] <sweater> Ok so. "An argument is called a receiver if its type is the same as the type of some struct S and it is the first argument in a special-form func M definition. This way, M is said to be a method of S, and S is said to be ``received`` by the method"
[22:40:28] <quippy> no Tv_ they're a separate concern
[22:40:32] <sweater> Would this be an accurate way to define a receiver and a method?
[22:40:34] <Tv_> quippy: oh in that sense of "methods may mutate the receiver". yeah that's not different from foo(x)
[22:41:06] <Tv_> sweater: it's only a receiver if the func was defined as a method
[22:41:11] <Tv_> s/defined/declared/
[22:41:12] <quippy> right, the difference is that if foo(x) modifies x and you want to use x from the call site, you have to return x inside foo and call it as x = foo(x) instead of just x.foo()
[22:41:21] <Tv_> sweater: func foo(...) has no receiver
[22:41:24] <quippy> x.foo() <- x is a receiver
[22:41:32] <quippy> foo(x) <- x is a regular argument
[22:42:01] <sweater> Tv_: it's covered by my definition via mentioning "special-form", alluding to (R) M (A...) form
[22:42:23] <quippy> right, you specify the receiver in a different part of the signature when defining a method
[22:42:24] <Tv_> abstract, alluding, restating the spec.. meh. just program in Go, or don't
[22:42:32] *** Quits: tealecloud (~tealeclou@cpc1-farn9-2-0-cust495.6-2.cable.virginm.net) (Ping timeout: 245 seconds)
[22:42:45] <sweater> So then, the answer to my initial question was "Go compiler wants the type of receiver to be exactly S, not greater nor smaller than S".
[22:43:02] <ikke> Interesting, in the example of sweater, if I print the type of e.Const in the EvalM method, it does show bool
[22:43:04] <sweater> Tv_: I'm learning go.
[22:43:07] <Tv_> sweater: methods are attached to types, there's no "matching" process
[22:43:21] <sweater> ikke: It's because, as stated, it redefines bool ~ T.
[22:44:07] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 252 seconds)
[22:44:43] <ikke> It's because the method is generic
[22:44:59] <ikke> Specifying bool there does not mean it's a bool that you receive
[22:45:44] <ikke> but not sure why it does work then when specifying it that was as an argument
[22:45:45] <quippy> full disclosure that I haven't used the generics at all yet, but maybe you want to define the method so that the receiver is a generic type? Then maybe you can use it on concrete types?
[22:46:11] <sweater> Tv_: methods are *not* attached to anything. Make a module, call it n. Define a struct there. Make a module, call it m, define a method there. Make a module call it ni, import only n, define a func over struct there. Make a module, call it main, import m. In main, call a method defined in m, assign the result to a variable. Use that variable to call the function in ni.
[22:46:21] <sweater> Ni doesn't know anything about m, but it'll typecheck and run.
[22:46:22] *** Joins: fikran (~fikran@user/fikran)
[22:46:43] <Tv_> sweater: you can't define methods on non-local types. also
[22:47:17] <quippy> I get the feeling that whatever you're trying to do should be an interface instead of using generics and it's giving me a bit of heartburn to see a newbie immediately trying to use generics
[22:47:20] <quippy> they're going to Java my Go
[22:48:02] <Tv_> sweater: also you're using awfully strong absolute statements for something you've claimed to know little about. consider how that comes across.
[22:48:39] <Tv_> meanwhile, in reality: "A method declaration binds an identifier, the method name, to a method, and associates the method with the receiver's base type."
[22:49:35] <quippy> yeah I'm not sure where the idea that methods aren't attached to anything is coming to
[22:49:47] <quippy> they're attached to the receiver type, that's what makes it a receiver fundamentally
[22:50:21] <quippy> Does it ever make sense to have an interface type as a receiver?
[22:50:47] *** Quits: independent_ (~independe@95.144.68.39) (Remote host closed the connection)
[22:51:00] <Tv_> quippy: interfaces can't have methods in the sense discussed here
[22:51:06] *** Joins: independent_ (~independe@95.144.68.39)
[22:51:22] <quippy> yeah okay that's what I thought, but I realized I wasn't certain while I was thinking about it
[22:51:29] <Tv_> that is, you can't declare a method on one; their method set comes from their definition
[22:51:36] <quippy> oh right derp
[22:51:43] <quippy> the question I asked barely makes sense haha
[22:51:56] <quippy> that explains why I've never tried to do it
[22:52:05] <Tv_> i mean, there could be an alternate-reality Go where that would exist, and having conflcits would be an error
[22:52:21] <Tv_> but go discourages that style of attempting to OOP "base classes"
[22:52:23] <quippy> hahaha I'm fine with the Go in this reality
[22:52:28] <sweater> Tv_: I'm sorry, I misunderstood your "attach" as though you mean that after you declare a method over type, it changes the type.
[22:52:53] <Tv_> sweater: define "changes the type". it sure changes its method set.
[22:53:06] <Tv_> methods sets are part of the type definition.
[22:53:16] <quippy> right, which in turn changes which interface types it will satisfy, and therefore, where and how the object can be used
[22:53:50] <sweater> It doesn't matter since I have learned that methods are closed, I thought that methods are open just because interfaces are.
[22:53:51] <Tv_> ahahaha the gibberish project naming.. this is a talk title: "Snorkel Beambell - Real-time Weak Supervision on Apache Flink"
[22:54:15] <Tv_> now assumes a perfectly spherical layperson..
[22:55:21] <sweater> Tv_: but yeah, thanks for the clarification, that's how interfaces are kept open in Go the first place!
[22:55:36] *** Quits: A_Dragon (A_D@libera/staff/dragon) (Quit: ZNC - https://znc.in)
[22:55:54] *** Joins: A_Dragon (A_D@libera/staff/dragon)
[22:56:19] <sweater> I was absolutely sure that I had code that defines methods for non-local structs, that's how I made a fool of myself haha.
[22:56:55] <sweater> Then I looked at the code and it was an interface, which is still amazingly powerful thing to have in the language.
[22:57:09] <quippy> I've gone through this same exact journey before sweater lol
[22:57:52] <quippy> the one that it took me a long time to realize is that I can arbitrarily define new interfaces that are subsets of other, external interfaces, to e.g. ease testing
[22:57:52] <sweater> quippy: haha happens. I mean, if I slowed down and thought about how are interfaces open, I'd figure out that they can be kept open exactly because structs are closed.
[22:58:16] <quippy> >if I slowed down and thought... <- the story of my life right there
[22:58:48] *** Quits: A_Dragon (A_D@libera/staff/dragon) (Remote host closed the connection)
[22:59:02] *** Joins: A_Dragon (A_D@libera/staff/dragon)
[22:59:29] <fizzie> Fun receiver/parameter fact: if you use a method expression (`Type.Method`, as opposed to a method value like `objectOfType.Method`), the result will be a function value where the receiver has been moved to be a parameter. (And calling the result will call the method using the value of the corresponding argument as the receiver.)
[23:01:10] *** Quits: theoceaniscool (~theoceani@119.12.232.133) (Ping timeout: 252 seconds)
[23:01:56] <quippy> haha I was semi-aware of this ^ only because I've had the compiler yell at me in the past for trying to do this when I forgot a pair of empty parents when trying to call a method with no arguments
[23:02:18] *** Joins: alyx (alyx@atheme/alyx)
[23:02:24] <quippy> "cannot take argument of type func().. whatever whatever" <- lol
[23:03:25] *** Joins: elgraz (~elgraz@151.65.9.160)
[23:03:26] *** Joins: mikoto-chan (~mikoto-ch@ip-83-134-2-136.dsl.scarlet.be)
[23:05:39] *** Quits: pmcnabb (~pmcnabb@user/pmcnabb) (Quit: The Lounge - https://thelounge.chat)
[23:06:02] *** Joins: pmcnabb (~pmcnabb@user/pmcnabb)
[23:09:03] *** Quits: zwr (~zwr@2804:d45:b966:fb00:c95b:63d6:bbd2:f8dd) (Ping timeout: 250 seconds)
[23:09:49] *** Joins: zwr (~zwr@2804:d45:b966:fb00:9d50:5f1e:87a4:6ad6)
[23:14:16] *** Joins: tealecloud (~tealeclou@cpc1-farn9-2-0-cust495.6-2.cable.virginm.net)
[23:17:29] <Tv_> quippy: oh the times i've passed a function as an argument to a function...
[23:18:05] <quippy> it's one thing when you MEAN to do it lol
[23:18:52] <Tv_> func foo() ...; fmt.Printf("bar is %v\n", foo)
[23:19:12] *** Quits: tealecloud (~tealeclou@cpc1-farn9-2-0-cust495.6-2.cable.virginm.net) (Ping timeout: 245 seconds)
[23:21:49] *** Quits: mikoto-chan (~mikoto-ch@ip-83-134-2-136.dsl.scarlet.be) (Quit: mikoto-chan)
[23:23:47] *** Quits: independent_ (~independe@95.144.68.39) (Remote host closed the connection)
[23:24:06] *** Joins: independent_ (~independe@95.144.68.39)
[23:25:13] *** Quits: alyx (alyx@atheme/alyx) (Quit: AAAAAAAAA)
[23:25:47] *** Quits: independent_ (~independe@95.144.68.39) (Remote host closed the connection)
[23:26:06] *** Joins: independent_ (~independe@95.144.68.39)
[23:26:10] *** Joins: be3uykpy (~be3uykpy@2a00:a040:19a:b060:f8b5:d21e:3772:d04a)
[23:30:11] *** Quits: elgraz (~elgraz@151.65.9.160) (Remote host closed the connection)
[23:34:39] *** Joins: djo (~djo@91-173-41-2.subs.proxad.net)
[23:35:40] *** Joins: mikoto-chan (~mikoto-ch@ip-83-134-2-136.dsl.scarlet.be)
[23:38:43] *** Quits: arcatech (~arcatech@user/arcatech) (Quit: Bye.)
[23:39:17] *** Quits: djo (~djo@91-173-41-2.subs.proxad.net) (Ping timeout: 245 seconds)
[23:40:52] *** Joins: yulian (~yulian@user/daegalus)
[23:42:48] *** yulian is now known as daegalus
[23:43:21] *** Joins: alyx (alyx@atheme/alyx)
[23:44:41] <Tv_> i have three kinds of shower thoughts: programming problem solving, story ideas, and.. this: https://twitter.com/tv/status/1433146159971766275
[23:47:33] <zsnes> perfect tool for gaslighting
[23:50:09] <KirkMcDonald> Take a next-generation VR headset with eye-tracking, make a horror game.
[23:51:27] <Tv_> KirkMcDonald: ooh measure user heartbeat and play back on attached subwoofer, see if you can gradually control it for managing suspense
[23:51:35] *** Parts: alyx (alyx@atheme/alyx) ()
[23:51:41] <Tv_> i bet there's a subtle feedback loop there
[23:52:30] <Tv_> games that actually manage the excitement level explicitly are next level.. like, the most basic is Left 4 Dead where the "AI director" chooses enemy spawns etc based on how you're doing.
[23:52:55] <Tv_> it just feels like... if you cope well, you get a total zombie onslaught. if not, you're allowed to recover.. until a mini-boss traps you
[23:53:41] <Tv_> you just won't get two similar playthroughs with that
[23:54:16] <Tv_> now take that but with one of those "flashlight in the darkness" horror games
[23:56:07] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Quit: sord937)
[23:58:05] *** Joins: andlabs (~andlabs@70.107.171.168)
[23:58:44] *** Quits: flynn (~mcbloch@user/flynn) (Ping timeout: 244 seconds)
