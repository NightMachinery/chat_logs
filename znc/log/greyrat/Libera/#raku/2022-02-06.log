[00:15:08] *** Joins: Garbanzo__ (~Garbanzo@2602:304:6eac:dc10::49)
[00:16:23] *** Joins: bobv (~bobv@185-227-73-83.dsl.cambrium.nl)
[00:34:45] *** Joins: RakuIRCLogger__ (~RakuIRC@ipv4-wenzperl.connected.by.freedominter.net)
[00:35:10] *** Joins: TempIRCLogger (~RakuIRC@ipv4-wenzperl.connected.by.freedominter.net)
[00:35:37] *** Joins: lizmat_ (~textual@ipv4-wenzperl.connected.by.freedominter.net)
[00:36:28] *** Quits: RakuIRCLogger (~RakuIRC@ipv4-wenzperl.connected.by.freedominter.net) (Ping timeout: 250 seconds)
[00:36:39] *** Quits: lizmat (~textual@ipv4-wenzperl.connected.by.freedominter.net) (Ping timeout: 250 seconds)
[00:36:54] *** Quits: TempIRCLogger__ (~RakuIRC@ipv4-wenzperl.connected.by.freedominter.net) (Ping timeout: 250 seconds)
[00:36:57] *** Quits: Geth (~LizBot@ipv4-wenzperl.connected.by.freedominter.net) (Ping timeout: 240 seconds)
[00:44:32] *** Quits: bobv (~bobv@185-227-73-83.dsl.cambrium.nl) (Quit: leaving)
[01:44:32] *** Quits: benchable6 (ben-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[01:44:32] *** Quits: nativecallable6 (nat-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[01:44:32] *** Quits: linkable6 (lin-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[01:44:32] *** Quits: coverable6 (cov-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[01:44:32] *** Quits: reportable6 (rep-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[01:44:32] *** Quits: greppable6 (gre-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[01:44:32] *** Quits: quotable6 (quo-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[01:44:32] *** Quits: tellable6 (tel-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[01:44:32] *** Quits: unicodable6 (uni-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[01:44:32] *** Quits: evalable6 (eva-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[01:44:32] *** Quits: statisfiable6 (sta-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[01:44:32] *** Quits: bisectable6 (bis-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[01:44:33] *** Quits: shareable6 (sha-able@2001:41d0:2:5eb5::) (Write error: Connection reset by peer)
[01:44:33] *** Quits: bloatable6 (blo-able@2001:41d0:2:5eb5::) (Write error: Connection reset by peer)
[01:44:33] *** Quits: squashable6 (squ-able@2001:41d0:2:5eb5::) (Write error: Connection reset by peer)
[01:44:33] *** Quits: notable6 (not-able@2001:41d0:2:5eb5::) (Write error: Connection reset by peer)
[01:44:33] *** Quits: releasable6 (rel-able@2001:41d0:2:5eb5::) (Write error: Connection reset by peer)
[01:44:33] *** Quits: sourceable6 (sou-able@2001:41d0:2:5eb5::) (Write error: Connection reset by peer)
[01:44:33] *** Quits: committable6 (com-able@2001:41d0:2:5eb5::) (Write error: Connection reset by peer)
[01:44:50] *** Joins: quotable6 (quo-able@2001:41d0:2:5eb5::)
[01:45:49] *** Joins: bloatable6 (blo-able@2001:41d0:2:5eb5::)
[01:46:00] *** Joins: greppable6 (gre-able@2001:41d0:2:5eb5::)
[01:46:09] *** Joins: notable6 (not-able@2001:41d0:2:5eb5::)
[01:46:13] *** Joins: sourceable6 (sou-able@2001:41d0:2:5eb5::)
[01:46:30] *** Joins: reportable6 (rep-able@2001:41d0:2:5eb5::)
[01:46:34] *** Joins: bisectable6 (bis-able@2001:41d0:2:5eb5::)
[01:46:37] *** Joins: benchable6 (ben-able@2001:41d0:2:5eb5::)
[01:47:27] *** Joins: statisfiable6 (sta-able@2001:41d0:2:5eb5::)
[01:47:32] *** Joins: coverable6 (cov-able@2001:41d0:2:5eb5::)
[02:28:17] *** Quits: abraxxa-home (~alex@2a01:100:2000:2500::22) (Remote host closed the connection)
[02:37:03] *** Quits: RakuIRCLogger__ (~RakuIRC@ipv4-wenzperl.connected.by.freedominter.net) (Ping timeout: 256 seconds)
[02:38:39] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:4003:8970:d961:ff06) (Quit: My MacBook Air has gone to sleep. ZZZzzz‚Ä¶)
[02:45:04] *** Joins: shareable6 (sha-able@2001:41d0:2:5eb5::)
[02:45:23] *** Joins: squashable6 (squ-able@2001:41d0:2:5eb5::)
[02:46:43] *** Joins: tellable6 (tel-able@2001:41d0:2:5eb5::)
[02:47:23] *** Joins: committable6 (com-able@2001:41d0:2:5eb5::)
[02:48:59] <leont> Anyone have a clue what's up if Supplier::Preserving.emit hangs?
[02:54:01] <leont> It appears to hang when something starts listening to the Supply
[03:00:26] <leont> I'm rather suspecting a deadlock
[03:02:58] <Voldenet> code snippet would be nice, Supplier::Preserving.emit doesn't hang
[03:05:00] <Voldenet> m: my $s = Supplier::Preserving.new; start { sleep 1; $s.emit("boom"); $s.done }; react whenever $s { .say }
[03:05:02] <camelia> rakudo-moar 1aa05bec0: OUTPUT: ¬´boom‚ê§¬ª
[03:07:49] <leont> Well, it's in the middle of a big piece of code, I'm not entirely sure how to produce it
[03:09:16] <Voldenet> though I agree, it's suspiciously easy to accidentally produce deadlocks with supplies
[03:11:22] <leont> And now I can't install App::MoarVM::Debug, because I can't install Data::MessagePack, because that uses git@github.com: url that github has deprecated -_-
[03:13:47] <ugexe> it fetches for me still
[03:15:27] <leont> https://pastebin.com/ikkaKLzg
[03:15:56] <ugexe> what does it show with --debug
[03:17:07] <leont> Nothing informative, just that it's fetching via Zef::Repository::Ecosystems<p6c>
[03:18:20] <ugexe> ===> Fetching [OK]: Data::MessagePack:ver<0.1.2> to /Users/ugexe/.zef/tmp/1644104797.21486.6370.395852674107/Perl6-Data-MessagePack.git
[03:18:52] <ugexe> `rm -rf ~/.zef` is the cargo culty thing to try
[03:19:13] <ugexe> or `zef nuke RootDir`
[03:20:48] <leont> Removing the zefdir didn't do anything
[03:22:13] <japhb> I had to switch to git@github.com URLs because the https ones got deprecated ....
[03:22:52] <ugexe> https ones arent deprecated
[03:23:08] <ugexe> or at least not the most recent deprecation
[03:23:28] <japhb> You can read with them, but not push with them.
[03:24:30] <ugexe> should just be git:// that is affected
[03:25:51] <leont> Then I don't know what issue I'm dealing with, and it's not giving me much information
[03:34:31] <ugexe> you'd have to modify https://github.com/ugexe/zef/blob/3edbbcf200e593f0f2e17f28f7c453b80d76752a/lib/Zef/Service/Shell/git.rakumod#L173 this little bit to see what the output from git it (alas the shell stuff doesn't have a way to communicate back generally yet) and then run
[03:34:33] <ugexe> raku -I. -e 'use Zef::Service::Shell::git; Zef::Service::Shell::git.new.fetch(q|git@github.com:pierre-vigier/Perl6-Data-MessagePack.git|, "./bar@HEAD".IO);'
[03:39:11] *** Quits: reportable6 (rep-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[03:45:35] <leont> Installed it by hand for now, kind of got my hands full on the other issue
[03:45:51] *** Joins: evalable6 (eva-able@2001:41d0:2:5eb5::)
[03:46:20] *** Joins: linkable6 (lin-able@2001:41d0:2:5eb5::)
[03:46:23] *** Joins: nativecallable6 (nat-able@2001:41d0:2:5eb5::)
[03:46:25] <leont> Thread 1 is definitely hanging in Semaphore.acquire
[03:46:35] <leont> Backtrace doesn't work on half of the threads though
[03:57:17] *** Quits: djerius (~quassel@pool-108-20-43-199.bstnma.fios.verizon.net) (Ping timeout: 256 seconds)
[03:57:20] *** Quits: dextercd (~dexter@2a02-a450-f25d-1-76d4-35ff-fefe-34c.fixed6.kpn.net) (Quit: WeeChat 3.4)
[04:00:51] *** Joins: djerius (~quassel@pool-108-20-43-199.bstnma.fios.verizon.net)
[04:00:55] <leont> I'm beginning to see what's happening here
[04:02:13] *** Joins: colemanx (~coleman@2600:1700:13be:9240:2eb4:278a:91ae:e3a2)
[04:03:41] <leont> https://pastebin.com/FxQeTWg3
[04:05:29] <leont> I this means it will hang if you emit while it's replaying
[04:10:39] <leont> Though there's still a piece I'm missing
[04:19:45] <leont> I'm pretty sure that piece is react/whenever related, so probably one of the locks in ThreadPoolScheduler
[04:25:28] <Voldenet> well, `react whenever` uses .act on a supply if I'm not mistaken
[04:26:44] <Voldenet> m: sub n { state $n = now; say sprintf("%s%s%.1f", $*THREAD, $^t, (now - $n)) }; my $s = Supplier::Preserving.new; start { for ^10 { n("e"); $s.emit(Any); sleep .1; }; $s.done }; sleep .3; react whenever $s.Supply { n("r"); sleep .1 }
[04:26:46] <camelia> rakudo-moar 1aa05bec0: OUTPUT: ¬´Thread<4>(GeneralWorker)e0.0‚ê§Thread<4>(GeneralWorker)e0.1‚ê§Thread<4>(GeneralWorker)e0.2‚ê§Thread<1>(Initial thread)r0.3‚ê§Thread<4>(GeneralWorker)e0.3‚ê§Thread<1>(Initial thread)r0.4‚ê§Thread<1>(Initial thread)r0.5‚ê§Thread<4>(GeneralWorker)r0.6‚ê§‚Ä¶¬ª
[04:28:17] <Voldenet> m: sub n { state $n = now; say sprintf("%s %s%.1f", $*THREAD.id, $^t, (now - $n)) }; my $s = Supplier::Preserving.new; start { for ^10 { n("e"); $s.emit(Any); sleep .1; }; $s.done }; sleep .3; react whenever $s.Supply { n("r"); sleep .1 }
[04:28:20] <camelia> rakudo-moar 1aa05bec0: OUTPUT: ¬´4 e0.0‚ê§4 e0.1‚ê§4 e0.2‚ê§1 r0.3‚ê§4 e0.3‚ê§1 r0.4‚ê§1 r0.5‚ê§4 r0.6‚ê§4 e0.8‚ê§4 r0.8‚ê§4 e1.0‚ê§4 r1.0‚ê§4 e1.2‚ê§4 r1.2‚ê§4 e1.4‚ê§4 r1.4‚ê§4 e1.6‚ê§4 r1.6‚ê§4 e1.8‚ê§4 r1.8‚ê§¬ª
[04:29:07] <Voldenet> so no new value will be emitted until all the values were consumed
[04:33:14] <Voldenet> I don't see whether docs anything about this blocking behaviour though
[04:39:44] <leont> Well, deadlocks are never intentional üòâ
[04:40:55] *** Joins: reportable6 (rep-able@2001:41d0:2:5eb5::)
[04:41:09] <perryprog> Unless you're playing the game Rush Hour
[04:41:12] <Voldenet> Well, I don't mean the deadlock, but .emit actually running the receiving block on its thread
[04:44:32] *** Quits: lizmat_ (~textual@ipv4-wenzperl.connected.by.freedominter.net) (Quit: Textual IRC Client: www.textualapp.com)
[04:44:45] *** Joins: lizmat (~textual@ipv4-wenzperl.connected.by.freedominter.net)
[04:46:27] *** Joins: releasable6 (rel-able@2001:41d0:2:5eb5::)
[04:48:34] *** Joins: RakuIRCLogger (~RakuIRC@ipv4-wenzperl.connected.by.freedominter.net)
[04:48:40] *** Joins: Geth (~LizBot@ipv4-wenzperl.connected.by.freedominter.net)
[04:49:00] <Voldenet> once you know that, it's enormously trivial to make a deadlock:
[04:49:02] <Voldenet> my $s = Supplier::Preserving.new; start { $s.emit(1); }; react whenever $s.Supply { $s.emit(2); }
[04:49:33] <Voldenet> you don't even need that start, just: my $s = Supplier::Preserving.new; $s.emit(1); react whenever $s.Supply { $s.emit(2); }
[04:52:56] *** Quits: RakuIRCLogger (~RakuIRC@ipv4-wenzperl.connected.by.freedominter.net) (Remote host closed the connection)
[04:53:03] *** Joins: RakuIRCLogger (~RakuIRC@ipv4-wenzperl.connected.by.freedominter.net)
[04:53:55] <Voldenet> Eh, nevermind, it's not a deadlock
[04:59:41] *** Joins: SqrtNegInf (~SqrtNegIn@174-21-15-116.tukw.qwest.net)
[04:59:55] <lizmat> m: my $m = Promise.new; await $m
[05:00:17] <camelia> rakudo-moar 1aa05bec0: OUTPUT: ¬´(timeout)¬ª
[05:00:54] <Voldenet> Of course, but I was on about blocking `emit`
[05:00:55] <lizmat> m: await $_ with Promise.new   # even shorter
[05:01:00] <Voldenet> my $s = Supplier::Preserving.new; start { for ^2 { $s.emit($_); sleep .2; say "emit"; }; }; react whenever $s.Supply { $s.emit($_ + 1); }
[05:01:17] <camelia> rakudo-moar 1aa05bec0: OUTPUT: ¬´(timeout)¬ª
[05:01:39] <Voldenet> supply would be going infinitely and the thread would never emit second value
[05:02:25] <ugexe> m: my $s = Supplier::Preserving.new; start { for ^2 { $s.emit($_); sleep .2; say "emit"; }; }; react whenever start $s.Supply { $s.emit($_); }
[05:02:26] <camelia> rakudo-moar 1aa05bec0: ( no output )
[05:02:32] <ugexe> m: my $s = Supplier::Preserving.new; start { for ^2 { $s.emit($_); sleep .2; say "emit"; }; }; react whenever $s.Supply { $s.emit($_); }
[05:02:55] <camelia> rakudo-moar 1aa05bec0: OUTPUT: ¬´(timeout)emit‚ê§¬ª
[05:03:13] <Voldenet> m: my $s = Supplier::Preserving.new; start { for ^2 { $s.emit($_); sleep .2; say "emit"; }; }; react whenever $s.Supply { .say; $s.emit($_ + 1) if $_ < 5; }
[05:03:19] <Voldenet> even more puzzling that this never completes
[05:03:35] <camelia> rakudo-moar 1aa05bec0: OUTPUT: ¬´(timeout)0‚ê§¬ª
[05:04:27] <Voldenet> i'd expect (0 1 2 3 4 5 emit 1 2 3 4 5 emit)
[05:04:49] <Voldenet> m: my $s = Supplier::Preserving.new; start { for ^2 { $s.emit($_); sleep .2; say "emit"; }; $s.done; }; react whenever $s.Supply { .say; $s.emit($_ + 1) if $_ < 5; }
[05:04:50] <camelia> rakudo-moar 1aa05bec0: OUTPUT: ¬´0‚ê§1‚ê§2‚ê§3‚ê§4‚ê§5‚ê§emit‚ê§1‚ê§2‚ê§3‚ê§4‚ê§5‚ê§emit‚ê§¬ª
[05:04:56] <Voldenet> ‚Ä¶again nevermind
[05:42:16] *** Quits: SqrtNegInf (~SqrtNegIn@174-21-15-116.tukw.qwest.net) (Quit: Leaving...)
[05:45:49] *** Joins: unicodable6 (uni-able@2001:41d0:2:5eb5::)
[06:37:16] *** Quits: colemanx (~coleman@2600:1700:13be:9240:2eb4:278a:91ae:e3a2) (Remote host closed the connection)
[07:37:16] *** Quits: evalable6 (eva-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[07:37:16] *** Quits: linkable6 (lin-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[07:38:19] *** Joins: evalable6 (eva-able@2001:41d0:2:5eb5::)
[08:20:48] *** Quits: Sgeo (~Sgeo@user/sgeo) (Read error: Connection reset by peer)
[08:28:00] *** Joins: Darkcoal (~user@user/Darkcoal)
[08:32:28] *** Joins: Sgeo (~Sgeo@user/sgeo)
[09:24:49] *** Quits: pierrot (~pi@user/pierrot) (Read error: Connection reset by peer)
[09:25:58] *** Joins: pierrot (~pi@user/pierrot)
[09:39:05] *** Quits: reportable6 (rep-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[09:41:00] *** Joins: reportable6 (rep-able@2001:41d0:2:5eb5::)
[10:41:00] *** Quits: committable6 (com-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[10:41:00] *** Quits: shareable6 (sha-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[10:41:00] *** Quits: squashable6 (squ-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[10:41:00] *** Quits: nativecallable6 (nat-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[10:41:00] *** Quits: sourceable6 (sou-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[10:41:00] *** Quits: bloatable6 (blo-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[10:41:00] *** Quits: reportable6 (rep-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[10:41:00] *** Quits: unicodable6 (uni-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[10:41:00] *** Quits: evalable6 (eva-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[10:41:00] *** Quits: tellable6 (tel-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[10:41:00] *** Quits: coverable6 (cov-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[10:41:00] *** Quits: notable6 (not-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[10:41:00] *** Quits: quotable6 (quo-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[10:41:00] *** Quits: releasable6 (rel-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[10:41:00] *** Quits: statisfiable6 (sta-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[10:41:00] *** Quits: benchable6 (ben-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[10:41:00] *** Quits: bisectable6 (bis-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[10:41:00] *** Quits: greppable6 (gre-able@2001:41d0:2:5eb5::) (Write error: Connection reset by peer)
[10:41:22] *** Joins: squashable6 (squ-able@2001:41d0:2:5eb5::)
[10:41:29] *** Joins: clarjon1 (~clarjon1@user/clarjon1)
[10:41:56] *** Joins: quotable6 (quo-able@2001:41d0:2:5eb5::)
[10:41:58] *** Joins: nativecallable6 (nat-able@2001:41d0:2:5eb5::)
[10:42:05] *** Joins: shareable6 (sha-able@2001:41d0:2:5eb5::)
[10:42:11] *** Joins: notable6 (not-able@2001:41d0:2:5eb5::)
[10:42:30] *** Joins: reportable6 (rep-able@2001:41d0:2:5eb5::)
[10:42:45] *** Joins: statisfiable6 (sta-able@2001:41d0:2:5eb5::)
[10:42:56] *** Joins: bloatable6 (blo-able@2001:41d0:2:5eb5::)
[10:43:19] *** Joins: sourceable6 (sou-able@2001:41d0:2:5eb5::)
[10:43:19] *** Joins: tellable6 (tel-able@2001:41d0:2:5eb5::)
[10:43:51] *** Joins: committable6 (com-able@2001:41d0:2:5eb5::)
[10:44:09] *** Joins: evalable6 (eva-able@2001:41d0:2:5eb5::)
[10:44:10] *** Joins: greppable6 (gre-able@2001:41d0:2:5eb5::)
[11:40:04] *** Joins: linkable6 (lin-able@2001:41d0:2:5eb5::)
[11:42:10] *** Joins: unicodable6 (uni-able@2001:41d0:2:5eb5::)
[11:43:07] *** Joins: bisectable6 (bis-able@2001:41d0:2:5eb5::)
[12:05:53] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:4003:8970:d961:ff06)
[12:20:37] *** Quits: Garbanzo__ (~Garbanzo@2602:304:6eac:dc10::49) (Ping timeout: 240 seconds)
[12:25:29] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:4003:8970:d961:ff06) (Quit: My MacBook Air has gone to sleep. ZZZzzz‚Ä¶)
[12:31:50] *** Quits: lockywolf (~lockywolf@public.lockywolf.net) (Quit: ZNC 1.8.2 - https://znc.in)
[12:39:31] *** Joins: frost (~frost@user/frost)
[12:39:34] *** Quits: frost (~frost@user/frost) (Client Quit)
[12:39:58] *** Joins: frost (~frost@user/frost)
[12:43:35] *** Joins: releasable6 (rel-able@2001:41d0:2:5eb5::)
[13:43:35] *** Quits: linkable6 (lin-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[13:43:35] *** Quits: evalable6 (eva-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[13:43:52] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:4003:8970:d961:ff06)
[13:44:46] *** Joins: linkable6 (lin-able@2001:41d0:2:5eb5::)
[13:45:37] *** Quits: frost (~frost@user/frost) (Quit: Connection closed)
[13:46:26] *** Joins: evalable6 (eva-able@2001:41d0:2:5eb5::)
[13:59:18] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:4003:8970:d961:ff06) (Quit: My MacBook Air has gone to sleep. ZZZzzz‚Ä¶)
[14:04:24] *** Quits: stoned75 (~seb@78.203.129.116) (Quit: leaving)
[14:15:06] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:4003:8970:d961:ff06)
[14:21:51] *** Joins: abraxxa-home (~alex@2a01:100:2000:2500::22)
[14:42:00] *** Joins: benchable6 (ben-able@2001:41d0:2:5eb5::)
[14:43:30] *** Joins: coverable6 (cov-able@2001:41d0:2:5eb5::)
[14:50:31] *** Quits: Sgeo (~Sgeo@user/sgeo) (Read error: Connection reset by peer)
[14:55:38] <077AAD8E0> hi, just checking my nick
[14:55:51] <077AAD8E0> dang!
[14:56:33] *** Quits: sivoais (~zaki@199.19.225.239) (Ping timeout: 256 seconds)
[14:58:11] *** Joins: suman (~suman@27.34.50.245)
[15:00:03] <suman> This is in python print("A = {:.2%}".format(1/3)) outputs A = 33.33%
[15:00:14] <suman> Can it be similarly done in raku?
[15:02:33] <moon-child> m: printf "%.2f\n", 1/3
[15:02:34] <camelia> rakudo-moar 1aa05bec0: OUTPUT: ¬´0.33‚ê§¬ª
[15:02:37] <077AAD8E0> hay
[15:02:45] <moon-child> % thing is cute, you would have to multiply by 100 yourself
[15:07:29] *** Joins: sivoais (~zaki@199.19.225.239)
[15:24:33] *** Quits: Xliff_ (~Cliff@pool-71-255-227-73.washdc.east.verizon.net) (Ping timeout: 256 seconds)
[15:28:54] <suman> moon-child Python seems to do it without multiplying by 100
[15:29:32] <moon-child> yes.  That is not something you can do in raku, as far as I know
[15:37:47] *** Quits: reportable6 (rep-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[15:41:33] *** Quits: suman (~suman@27.34.50.245) (Quit: Connection closed)
[16:03:48] <077AAD8E0> but if you want that capability, you can file an issue and lobby for your case
[16:09:05] *** Quits: perlbot (~perlbot@perlbot/bot/simcop2387/perlbot) (Ping timeout: 256 seconds)
[16:09:25] *** Quits: simcop2387 (~simcop238@perlbot/patrician/simcop2387) (Ping timeout: 256 seconds)
[16:45:26] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:4003:8970:d961:ff06) (Quit: My MacBook Air has gone to sleep. ZZZzzz‚Ä¶)
[16:58:38] *** Joins: perlbot (~perlbot@perlbot/bot/simcop2387/perlbot)
[17:00:09] *** Joins: simcop2387 (~simcop238@perlbot/patrician/simcop2387)
[17:00:41] *** Joins: thundergnat (~steve@2601:80:8600:2543:2129:3fcf:f399:9779)
[17:01:31] <thundergnat> m: sub postfix:<%> { ($^p * 100).fmt: "%.2f%%" }; say (1/3)%
[17:01:32] <camelia> rakudo-moar 1aa05bec0: OUTPUT: ¬´33.33%‚ê§¬ª
[17:01:42] <thundergnat> :-)
[17:28:35] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:4003:8970:d961:ff06)
[17:40:04] *** Joins: reportable6 (rep-able@2001:41d0:2:5eb5::)
[17:45:55] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:4003:8970:d961:ff06) (Quit: My MacBook Air has gone to sleep. ZZZzzz‚Ä¶)
[17:47:54] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:4003:8970:d961:ff06)
[17:51:35] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:4003:8970:d961:ff06) (Client Quit)
[18:07:38] *** Quits: abraxxa-home (~alex@2a01:100:2000:2500::22) (Remote host closed the connection)
[19:07:38] *** Quits: linkable6 (lin-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[19:07:38] *** Quits: evalable6 (eva-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[19:08:46] *** Joins: linkable6 (lin-able@2001:41d0:2:5eb5::)
[19:10:27] *** Joins: evalable6 (eva-able@2001:41d0:2:5eb5::)
[19:16:37] <077AAD8E0> well there you go, the power of raku coupled with saput it in a module and publish it
[19:17:11] <077AAD8E0> *coupled with smart users
[19:20:49] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:4003:8970:d961:ff06)
[20:20:49] *** Quits: linkable6 (lin-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[20:20:49] *** Quits: evalable6 (eva-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[20:23:19] *** Joins: linkable6 (lin-able@2001:41d0:2:5eb5::)
[20:45:05] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:4003:8970:d961:ff06) (Quit: My MacBook Air has gone to sleep. ZZZzzz‚Ä¶)
[21:04:59] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:4003:8970:d961:ff06)
[21:20:57] *** Joins: lichtkind (~lichtkind@p200300feb710657659afb4046611de8a.dip0.t-ipconnect.de)
[21:21:33] *** Joins: evalable6 (eva-able@2001:41d0:2:5eb5::)
[21:37:35] *** Quits: reportable6 (rep-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[21:43:13] *** Joins: Garbanzo__ (~Garbanzo@2602:304:6eac:dc10::49)
[22:37:39] *** Joins: abraxxa-home (~alex@2a01:100:2000:2500::22)
[22:39:46] *** Joins: reportable6 (rep-able@2001:41d0:2:5eb5::)
[22:42:05] *** Joins: Sgeo (~Sgeo@user/sgeo)
[22:47:57] *** Quits: Manifest0 (~Manifest0@cst2-65-109.cust.vodafone.cz) (Quit: reboot)
[22:59:17] *** Quits: [Coke] (~coke@172.58.236.244) (Ping timeout: 240 seconds)
[23:02:43] *** Joins: [Coke] (~coke@172.58.239.15)
[23:04:18] *** Joins: dogbert11 (~dogbert@c83-253-59-194.bredband.tele2.se)
[23:06:18] *** Quits: dogbert17 (~dogbert@c83-253-59-194.bredband.tele2.se) (Ping timeout: 250 seconds)
[23:08:59] *** Quits: dogbert11 (~dogbert@c83-253-59-194.bredband.tele2.se) (Ping timeout: 256 seconds)
[23:12:19] *** Joins: Xliff (~Cliff@pool-71-255-227-73.washdc.east.verizon.net)
[23:13:35] *** Quits: Od1n1 (~Od1n@aurora-borealis.phear.org) (Quit: WeeChat 2.9)
[23:16:47] *** Joins: dogbert11 (~dogbert@c83-253-59-194.bredband.tele2.se)
[23:20:18] *** Joins: dogbert17 (~dogbert@c83-253-59-194.bredband.tele2.se)
[23:21:34] *** Quits: dogbert17 (~dogbert@c83-253-59-194.bredband.tele2.se) (Read error: Connection reset by peer)
[23:21:50] *** Joins: dogbert17 (~dogbert@c83-253-59-194.bredband.tele2.se)
[23:23:23] *** Quits: dogbert11 (~dogbert@c83-253-59-194.bredband.tele2.se) (Ping timeout: 256 seconds)
[23:30:31] *** Quits: Darkcoal (~user@user/Darkcoal) (Quit: Darkcoal)
[23:44:34] *** Joins: Manifest0 (~Manifest0@cst2-65-109.cust.vodafone.cz)
[23:49:37] *** Quits: lichtkind (~lichtkind@p200300feb710657659afb4046611de8a.dip0.t-ipconnect.de) (Quit: Leaving)
