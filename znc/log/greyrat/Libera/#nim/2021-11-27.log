[00:11:15] <FromDiscord> <retkid> why would anyone ever just write perl
[00:11:32] <FromDiscord> <retkid> perl is one of my least favorite languages.
[00:11:45] <FromDiscord> <retkid> theres nothing it does that TS cant do
[00:35:53] <FromDiscord> <noow> In reply to @retkid "theres nothing it does": typescript? anyways, the script in question was probably not made in the last few years
[01:01:20] *** Quits: fputs (~fputs@67.59.83.166) (Quit: The Lounge - https://thelounge.chat)
[01:02:23] *** Quits: kayabaNerve (~kayabaNer@user/kayabanerve) (Ping timeout: 268 seconds)
[01:03:30] *** Joins: fputs (~fputs@67.59.83.166)
[01:10:00] *** laintree is now known as lain
[01:55:25] *** Quits: advesperacit (~advespera@45.12.220.238) (Quit: advesperacit)
[02:02:52] <NimEventer> New thread by Bonesinger: Macros: why and/or when to use them?, see https://forum.nim-lang.org/t/8658
[02:16:42] *** Quits: terminalpusher (~terminalp@2a01:586:8c54:1:a391:1fef:ae1b:e7f8) (Remote host closed the connection)
[02:52:21] *** Quits: PMunch (~PMunch@user/pmunch) (Quit: leaving)
[03:30:39] <FromDiscord> <evoalg> I was reading that macro link above ... it seems to me that if Nim supported the syntax and functionality of what a particular macro was trying to do, then there would be no need for that particular macro, and so I'm thinking that writing macro's is like extending the Nim language itself ... is that right or am I bonkers?
[03:33:25] <FromDiscord> <Elegantbeef> Hmm a particular macro
[03:33:49] <FromDiscord> <Elegantbeef> It is indeed a method of extending the Nim language
[03:34:01] <FromDiscord> <Yardanico> In reply to @evoalg "I was reading that": yes, you're right in that
[03:34:11] <FromDiscord> <Yardanico> you can implement what macros do in the compiler and then it'll become a language feature
[03:34:28] <FromDiscord> <evoalg> nice!
[03:34:37] <FromDiscord> <Elegantbeef> Macros are realistically defined as "User defined compilation passes"
[03:35:28] <FromDiscord> <Elegantbeef> I do have an idea how to support unpacking in proc calls and var assignment, but no clue if Nim would accept it
[03:37:55] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3Gdu
[03:39:51] <FromDiscord> <Elegantbeef> When doing tuple assignment it calls those procs and when doing a proc call you'd do something like `doThing(...(10, 20))`
[03:55:18] <FromDiscord> <evoalg> Cheers! It's like creating a super-set language of Nim that supports extra syntax to do cool stuff I want. I can see how it's very powerful (but advanced stuff for me).
[04:01:11] *** Quits: ormiret (sid314108@lymington.irccloud.com) (Ping timeout: 245 seconds)
[04:01:45] *** Joins: ormiret (sid314108@id-314108.lymington.irccloud.com)
[04:02:11] *** Quits: pch (~pch@66.49.131.33) (Remote host closed the connection)
[04:03:13] <FromDiscord> <Elegantbeef> Yep in other languages it requires compiler support, like async
[04:03:16] *** Quits: notchris (sid181145@hampstead.irccloud.com) (Ping timeout: 245 seconds)
[04:03:31] <FromDiscord> <Elegantbeef> Thanks to macros we can do it all in "userspace" instead of relying on the compiler devs to add it
[04:05:22] *** Joins: notchris (sid181145@id-181145.hampstead.irccloud.com)
[04:11:01] <FromDiscord> <evoalg> yay! ... do away with those dirty devs ... but seriously, I can see that if I was super duper brainy and creative then I could do a loads with all that freedom
[04:11:22] <FromDiscord> <Elegantbeef> Indeed, you can do quite wonderful things
[04:11:56] <FromDiscord> <Elegantbeef> They can remove a lot of boiler plate or similar
[04:14:21] <FromDiscord> <Elegantbeef> Oh and evoalg i did make that repl and it's pretty much 100% useless and a toy
[04:15:14] <FromDiscord> <evoalg> oh nice! ... the macro one right? ... will it help you to debug macro's while you're building them?
[04:15:39] <FromDiscord> <Elegantbeef> drop-2021-11-24\_15.34.24.mp4 https://media.discordapp.net/attachments/371759389889003532/913953681198678026/drop-2021-11-24_15.34.24.mp4
[04:15:41] <FromDiscord> <Elegantbeef> It's supposed to but it's less than useful i wager
[04:15:57] <FromDiscord> <Elegantbeef> There is a video of it in use
[04:17:32] <FromDiscord> <evoalg> So, you used macro's to help you use macro's?
[04:17:46] <FromDiscord> <Elegantbeef> Well i used the NimVM and macros to help macro ðŸ˜›
[04:17:59] <FromDiscord> <evoalg> that's very cool
[04:19:58] <FromDiscord> <evoalg> When I get into macro's I'll ask you able it further ... for now I'm waiting to be stronger in the basics. I do feel that I understand what macro's are used for now (from a 50 thousand foot level)
[04:20:37] <FromDiscord> <Elegantbeef> Cmon you can be atleast on everest looking down at the trench!
[04:21:16] <FromDiscord> <evoalg> I guess my eyes aren't as good as they were when I was your age
[04:22:06] <FromDiscord> <Elegantbeef> Fairly certain there is a logistical issue that even elven eyes dont solve
[04:26:15] <FromDiscord> <Elegantbeef> Talking to you today reminded me about the dumb resetable closure restraint, so now we can reassign to the same closures!
[04:27:19] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3GdC
[04:30:22] <FromDiscord> <Elegantbeef> But that `true` in the items iterator makes me angry so... distinct it is!
[04:33:17] <FromDiscord> <evoalg> let me try and digest that!
[04:36:37] <FromDiscord> <Elegantbeef> It's not that complicated, `a` is a resetable closure which in this case means you can either do `.reset` or `items(true)`(though it's now `items(Reset)`) to set values to their default
[04:37:15] *** Joins: krux02 (~krux02@p200300e8170c11004db6e8013ca32c23.dip0.t-ipconnect.de)
[04:37:18] <FromDiscord> <Elegantbeef> So in the case of `asResetableClosure("hello"[1..2])` it stores `"hello"` and `1..2` in `a` and when you call `reset` reinitializes the iterator
[04:38:14] <FromDiscord> <evoalg> easy!
[04:38:41] <FromDiscord> <Elegantbeef> The confusing stuff is the macro in the background that converts the iterator to a closure and generates it
[04:41:01] *** Quits: krux02 (~krux02@p200300e8170c11004db6e8013ca32c23.dip0.t-ipconnect.de) (Remote host closed the connection)
[04:44:19] <FromDiscord> <codic> finally released the rewrite of my nim wm, yay https://media.discordapp.net/attachments/371759389889003532/913960896714375168/unknown.png
[04:44:35] <FromDiscord> <codic> (edit) "nim wm," => "wm in nim,"
[04:53:21] <FromDiscord> <evoalg> In reply to @Elegantbeef "The confusing stuff is": I'm such a noob I had to do this to understand it: https://play.nim-lang.org/#ix=3GdG
[04:55:15] <FromDiscord> <evoalg> (I forgot a `print x` in line 27 too)
[05:03:03] <FromDiscord> <Elegantbeef> But hey you understand the silly thing ðŸ˜›
[05:04:57] <FromDiscord> <evoalg> remind me ... a normal slice in Nim is not an iterator, but the slicerator module makes it into an iterator (which means for large slices it's memory efficient and possibly speed effecient), and furthermore, slicerator also has the option of making closure iterators out of normal iterators, and even has a resetable closure iterator ... is that right?
[05:05:12] <FromDiscord> <Elegantbeef> Yep
[05:05:37] <FromDiscord> <superfunc> In reply to @Elegantbeef "Thanks to macros we": big agree, metaprogramming is how clojure got async, pattern matching and a bunch of other neat stuff
[05:06:03] <FromDiscord> <Elegantbeef> You can do `for x in @[10, 20, 30, 40][0..2]` and it will do a non allocating immutable slice with slicerator
[05:06:27] <FromDiscord> <Elegantbeef> Or if you want a mutable slice you can do `for x in @[10, 20, 30, 40]{0..2}`
[05:09:24] <FromDiscord> <Elegantbeef> And you seem to grasp what a resetable closure does
[05:10:27] <FromDiscord> <evoalg> sent a code paste, see https://play.nim-lang.org/#ix=3GdJ
[05:10:44] <FromDiscord> <Elegantbeef> Well that was a dumb example since `@[10, 20, 30, 40]` isnt mutable
[05:11:05] <FromDiscord> <Elegantbeef> it should be `var a = @[10, 20, 30, 40]` and `for x in a{0..2}: x = 300`
[05:11:06] <FromDiscord> <evoalg> ahhh true it's a literal
[05:11:15] <FromDiscord> <evoalg> nice
[05:14:06] <FromDiscord> <Elegantbeef> There is also some dumber stuff in that package i question removing
[05:14:19] <FromDiscord> <Elegantbeef> But yea slices + iterators as closure is mostly all the magic
[05:15:31] *** Joins: pch (~pch@66.49.131.33)
[05:15:38] <FromDiscord> <evoalg> "dumber" implies the above is dumb, but it seems to me it's not dumb at all, as it's not satisfying (at least to me) that some of the core Nim things aren't iterators when they should be
[05:16:05] <FromDiscord> <Elegantbeef> Nah there is more in that package which is dumb
[05:16:41] <FromDiscord> <Elegantbeef> Like i said though this stuff couldnt be done pre 1.6
[05:16:52] <FromDiscord> <Elegantbeef> `[]` was not allowed for iterators
[05:17:23] <FromDiscord> <evoalg> remove the other parts and get this into Nim 2.0 as default? Am I being naive again?
[05:17:58] <FromDiscord> <Elegantbeef> Well 1.6.2 maybe idk
[05:18:24] <FromDiscord> <evoalg> that would be awesome
[05:25:29] <FromDiscord> <evoalg> resetable or resettable?
[05:32:39] <FromDiscord> <Elegantbeef> I'll tell you when i learn to write remedial english ðŸ˜›
[05:33:43] <FromDiscord> <Elegantbeef> It's now spelled properly, well not properly but with two Ts ðŸ˜›
[05:34:26] <FromDiscord> <evoalg> I'm a shocking speller ... my spell check was complaining that's all ðŸ˜‰
[05:34:51] <FromDiscord> <Elegantbeef> Cheers, i cannot spell and let rika bitch and moan about it
[05:36:35] <FromDiscord> <evoalg> I like findAll and rFindAll ... I hope they won't be taken out?
[05:36:45] <FromDiscord> <Elegantbeef> Probably not
[05:36:53] <FromDiscord> <Elegantbeef> `collectit` probably will be
[05:38:27] <FromDiscord> <evoalg> unless it's argued that some should be moved to a different module?
[05:39:36] <FromDiscord> <evoalg> (I don't know and I'm not good with such things)
[05:43:13] <FromDiscord> <evoalg> oh you changed it to "Resttable"
[05:43:32] <FromDiscord> <evoalg> you did it on purpose to wind Rika up
[05:46:07] <FromDiscord> <Elegantbeef> Hey apparently that's how it's spelled
[05:46:55] <FromDiscord> <evoalg> it does have two t's in it, I'll give you half a mark
[05:47:16] <FromDiscord> <Elegantbeef> Lol i cannot fucking spell
[05:52:17] <FromDiscord> <Mocha> is there a naming convention for types/variables that have to contain version numbers/decimals? e.g. "Version 1.3" -> Version13
[05:53:05] <FromDiscord> <Elegantbeef> I think `TypevNumber` is the idiomatic way
[05:53:39] <FromDiscord> <Elegantbeef> Personally i'd prefer using a pragma and a string or tuple to get the type, but that's probably needlessly complex
[05:58:08] <FromDiscord> <Mocha> Oh thanks, I didn't know `TypevNumber` was idiomatic! Planning on just using a pure enum; just to confirm, if the version number has decimals (e.g. 1.2, 1.3, 1.4...), convention is just to omit them in the name?
[05:59:11] <FromDiscord> <Elegantbeef> Yep
[05:59:19] <FromDiscord> <Elegantbeef> Atleast i think so, it's very much up to you
[06:01:36] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3GdR
[06:01:42] <FromDiscord> <Elegantbeef> But likei said probably needlessly complex
[06:02:12] <FromDiscord> <Mocha> oh the type itself doesn't need to be versioned, I'm just building a library that has to be aware of multiple protocol versions
[06:02:21] <FromDiscord> <Elegantbeef> Ah
[06:02:41] <FromDiscord> <Elegantbeef> Could be done with a static enum then
[06:04:10] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3GdS
[06:04:23] <FromDiscord> <Elegantbeef> `[T: static ProtocolVersion]`\
[06:04:32] <FromDiscord> <Elegantbeef> But that very much depends
[06:04:33] <FromDiscord> <Mocha> interesting
[06:04:39] <FromDiscord> <Mocha> i'll look into it for sure
[06:04:46] *** Quits: src (~src@user/src) (Quit: Leaving)
[06:04:47] <FromDiscord> <Elegantbeef> What's the protocol?
[06:04:52] <FromDiscord> <Mocha> TLS :)
[06:05:15] <FromDiscord> <Elegantbeef> Ah so something that probably certainly only adds?
[06:05:24] <FromDiscord> <Mocha> yep
[06:06:14] <FromDiscord> <Elegantbeef> So then yea might be able to use that method and then you just have `proc doThing(myType: MyType)`
[06:06:27] <FromDiscord> <Elegantbeef> Unless you need to dispatch off that enum
[06:08:15] *** Quits: neurocyte0132889 (~neurocyte@user/neurocyte) (Ping timeout: 268 seconds)
[06:22:04] *** Quits: rockcavera (~rc@user/rockcavera) (Remote host closed the connection)
[06:34:49] <FromDiscord> <Anonymous Poet> sent a code paste, see https://play.nim-lang.org/#ix=3GdY
[06:35:02] <FromDiscord> <Elegantbeef> `elif` is the `elif` version of `when`
[06:35:26] <FromDiscord> <Anonymous Poet> ðŸ˜®
[06:35:50] <FromDiscord> <Elegantbeef> Do wish there was a built in case statement version of `when` would make life nicer ðŸ˜€
[06:35:52] <FromDiscord> <Anonymous Poet> thanks! thats awesome
[06:36:17] <FromDiscord> <Anonymous Poet> this is good enough for my case now, not that many cases to enumerate ... would be kinda nice though
[06:36:41] <FromDiscord> <Elegantbeef> I mean it's technically possible with case statement macros but yea not great
[06:37:29] <FromDiscord> <Anonymous Poet> nim to the resuce yet again haa
[06:37:30] <FromDiscord> <Anonymous Poet> haha
[07:06:50] <FromDiscord> <impbox [ftsf]> trying to use redis to do `zrangebyscore` but I get ` Exception message: Expected '' at the beginning of a status reply got '-'`, is there a way to get the error?
[07:07:22] <FromDiscord> <Elegantbeef> What do you mean?
[07:07:45] <FromDiscord> <impbox [ftsf]> well the `-` in redis signifies an error, and it's usually followed by an error message from the server
[07:08:05] <FromDiscord> <Elegantbeef> Ah then not a clue
[07:09:04] <FromDiscord> <impbox [ftsf]> seems like a nim redis bug since the same command works via cli, but not sure
[07:12:46] <FromDiscord> <impbox [ftsf]> aha `-ERR syntax error`
[07:20:40] <FromDiscord> <impbox [ftsf]> yep, bug in nim redis
[07:21:19] <FromDiscord> <impbox [ftsf]> well.. it was, but already fixed
[07:22:09] <FromDiscord> <impbox [ftsf]> looks like it needs a version bump
[07:23:31] <FromDiscord> <gogolxdong (liuxiaodong)> sent a code paste, see https://paste.rs/JLP
[07:25:46] *** Quits: arkurious (~arkurious@user/arkurious) (Quit: Leaving)
[07:26:08] <FromDiscord> <gogolxdong (liuxiaodong)> Test fails with unknown Bool type in nim-web3 recently.
[07:27:05] <FromDiscord> <gogolxdong (liuxiaodong)> Is Bool type still usable or what's the alternative type?
[07:36:01] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.3)
[07:36:31] *** Joins: supakeen (~user@python/site-packages/supakeen)
[08:00:59] <FromDiscord> <Yardanico> `Bool` doesn't exist in Nim by default or in stdlib, it must be something specific to nim-web3 or some of the libraries it uses
[08:07:04] <FromDiscord> <Rika> Also bad naming because itâ€™s too similar to regular bool
[08:17:12] <FromDiscord> <Yardanico> looks like it's generated in a macro https://media.discordapp.net/attachments/371759389889003532/914014468575465492/unknown.png
[08:17:20] <FromDiscord> <Yardanico> solidity contracts, web3 crypto stuff
[08:17:23] <FromDiscord> <Yardanico> https://github.com/status-im/nim-web3/blob/master/web3/encoding.nim#L83
[08:25:13] *** Joins: cheer[m] (~cheertchn@2001:470:69fc:105::39de)
[09:08:40] <FromDiscord> <jfmonty2> Using Zippy (https://github.com/guzba/zippy) to compress a big string at compile-time, and I'm finding that it's really slow. Like, takes 5 minutes to compress 500KB slow. Am I doing something wrong or is it just "tough luck, compile-time execution is slow" ?
[09:09:30] <FromDiscord> <impbox [ftsf]> hmm compile time is probably slow
[09:09:37] <FromDiscord> <Elegantbeef> Consider using supersnappy instead
[09:09:57] <FromDiscord> <Elegantbeef> It's a less efficient for size compression algorithim but also cheaper for performance
[09:11:12] <FromDiscord> <jfmonty2> interesting, I'll have to take a look.
[09:11:51] <FromDiscord> <demotomohiro> You would better to run a external command to compress large string and staticRead the output at compile time.
[09:12:11] <FromDiscord> <impbox [ftsf]> aye
[09:12:11] <FromDiscord> <Elegantbeef> Probably, though this does give me a good idea to benchmark the VM
[09:12:35] <FromDiscord> <jfmonty2> yeah, that was the other thing that occurred to me. It's just a bit of a pain because I'll have to read the original string anyway so I can count the newlines. Not a huge deal though.
[09:38:26] <FromDiscord> <evoalg> sent a code paste, see https://play.nim-lang.org/#ix=3Get
[09:41:25] <FromDiscord> <Elegantbeef> Hmm yea that's not calling the iterator anymore, which is an other allocation, so unacceptable!
[09:43:29] <FromDiscord> <Yardanico> In reply to @jfmonty2 "Using Zippy (https://github.com/guzba/zippy) to": If compile time compression is slow you can always call some external binary and save its output in a const :)
[09:43:42] <FromDiscord> <Yardanico> Perhaps even the binary made by yourself for that specific purpose
[09:43:48] <FromDiscord> <Yardanico> A little hack
[09:45:20] <FromDiscord> <Elegantbeef> Already mentioned yard, how dare you repeat help!
[09:45:38] <FromDiscord> <Yardanico> Where did you mention that? I honestly didn't see
[09:45:48] <FromDiscord> <Elegantbeef> I didnt
[09:46:14] <FromDiscord> <impbox [ftsf]> yard has blocked everyone except beef
[09:46:25] <FromDiscord> <Yardanico> Look
[09:46:26] <FromDiscord> <Elegantbeef> I am just kidding of course but it was mentioned to use an external program
[09:46:30] <FromDiscord> <Yardanico> (edit) "Look" => "Lol"
[09:46:34] <FromDiscord> <Yardanico> yeah I see it now
[09:46:39] <FromDiscord> <Yardanico> I was focused on your messages
[09:46:44] <FromDiscord> <impbox [ftsf]> fair
[09:46:59] <FromDiscord> <Elegantbeef> Ah yea they're like a car crash
[09:47:06] <FromDiscord> <Elegantbeef> Dont want to look but cant look away
[09:51:24] <FromDiscord> <Elegantbeef> @evoalg\: there we go now you can do `"Hello".pairs(0..^2)`
[09:51:39] <FromDiscord> <Elegantbeef> Do like that you're using slicerator, making it better one subtly at a time
[09:52:18] <FromDiscord> <evoalg> nice ... it'll potentially break existing code by importing it though right?
[09:52:25] <FromDiscord> <Elegantbeef> The index is the index in the array and not since the start of the slice, which might be backwards
[09:52:34] <FromDiscord> <Elegantbeef> Nope
[09:52:45] <FromDiscord> <Elegantbeef> It the normal overload will take priority
[09:52:50] <FromDiscord> <evoalg> nice!
[09:53:17] <FromDiscord> <Elegantbeef> `for i, x in someIter` will call `pairs()` the fact you need to do `(0..1)` or `(0..^1)` means it'll never call it
[09:58:18] <FromDiscord> <evoalg> I'm not sure i understand. It looks like slicerator still breaks existing code that's like `for i, x in "Hello"[0..^2]:`
[09:58:32] <FromDiscord> <Elegantbeef> You mean it'll fix it
[09:59:13] <FromDiscord> <Elegantbeef> Well there is some ambiguity for that now with the iterator`[]` so you need to call pairs
[09:59:29] <FromDiscord> <Elegantbeef> And some argue you should call the iterator anyway ðŸ˜€
[10:00:05] <FromDiscord> <Elegantbeef> `for` is looking for an iterator you're doing `i, x` so it's expecting `[]` to return a tuple, but it doesnt
[10:00:36] <FromDiscord> <Elegantbeef> The solution is to call `.pairs` be it the builtin or iterator version of `"Hello".pairs(0..^2)`
[10:01:23] <FromDiscord> <Elegantbeef> So i guess it does break code in this one instance, but the break would get you more performant code so i think it's kinda the point of importing slicerator
[10:01:51] <FromDiscord> <Elegantbeef> The entire point of slicerator is to encourage 0 allocating slices and using iterators more
[10:02:40] <FromDiscord> <Elegantbeef> `for i, x in "Hello"[0..^2]` without it is just a hack that is abused for "proper" behaviour imo
[10:03:25] <FromDiscord> <Elegantbeef> We're abusing the fact `"Hello[0..^2]` returns a sequence then iterating over that sequence with `pairs` since we want `i, x`
[10:04:33] <FromDiscord> <Elegantbeef> I suppose I could use an operator for creating the slice so it doesnt interfere like `"hello"[&0..^2]`
[10:04:36] <FromDiscord> <evoalg> Yea I think it's a great idea.
[10:05:03] <FromDiscord> <evoalg> I mean using an iterator is a great idea
[10:05:40] <FromDiscord> <Elegantbeef> Yea i dont like using a unary operator for removing the ambiguity since sliceing a sequence is "wrong" in this case
[10:06:05] <FromDiscord> <evoalg> I just don't know enough about Nim or the community
[10:06:45] <FromDiscord> <evoalg> So for a normal `for x in myseq:` with no slice, another copy isn't done right?
[10:06:59] <FromDiscord> <Elegantbeef> Yea i dont really care about getting slicerator added to the stdlib, it's opinionated and forces better iterations
[10:07:12] <FromDiscord> <evoalg> true
[10:07:13] <FromDiscord> <Elegantbeef> You're correct that iterates it as is
[10:07:39] <FromDiscord> <evoalg> might it break imported code that I didn't write?
[10:07:47] <FromDiscord> <evoalg> or doesn't import work like that?
[10:07:51] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3GeM
[10:07:55] <FromDiscord> <Elegantbeef> Import doesnt work that way
[10:08:14] <FromDiscord> <evoalg> ahh ok ... and also ahh ok ðŸ™‚
[10:08:14] <FromDiscord> <Elegantbeef> Imported symbols can only go up in normal nim
[10:08:33] <FromDiscord> <Elegantbeef> To get them to go down you need to abuse features of the compiler
[10:08:43] <FromDiscord> <Elegantbeef> So you'd know that what you're doing is going to fuck it up
[10:11:20] <FromDiscord> <evoalg> Why does "enumerate" still support `for i, x in ` when it's still an iterator?
[10:11:42] <FromDiscord> <Elegantbeef> Enumerate yields a tuple
[10:12:01] <FromDiscord> <Elegantbeef> Actually sorry enumerate is a macro
[10:12:11] <FromDiscord> <Elegantbeef> So it rewrites the entire for loop
[10:15:14] <FromDiscord> <Elegantbeef> I guess i didnt explain
[10:15:31] <FromDiscord> <Elegantbeef> But if you do `for i, x in enumerate(mySeq.items)` it'll yield `index, value`
[10:15:47] *** Joins: neocron (~NeoCron@p200300c4cf3f7e00320b69bf1a44e74d.dip0.t-ipconnect.de)
[10:15:57] <FromDiscord> <Elegantbeef> Doesnt make much sense in this case since `pairs` exists, but in cases that you dont have pairs it does
[10:16:41] <FromDiscord> <evoalg> it mostly makes sense
[10:17:45] <FromDiscord> <evoalg> ... but where pairs would do another copy of a slice, enumerate wouldn't? (just like slicerator?)
[10:17:54] <FromDiscord> <evoalg> (I'm just trying to get my head around it)
[10:18:16] <FromDiscord> <Elegantbeef> pairs doesnt do the copy
[10:18:31] <FromDiscord> <Elegantbeef> `"hello"[0..^2]` creates a new string "hell" which then we call pairs on
[10:18:37] *** Quits: Doraemon (~NeoCron@p200300c4cf1c0a00df145b32079df496.dip0.t-ipconnect.de) (Ping timeout: 268 seconds)
[10:18:45] <FromDiscord> <evoalg> ahhh ok
[10:19:16] <FromDiscord> <Elegantbeef> without slicerator you're always calling the slice proc so it's always reallocating whenever you slice
[10:19:32] <FromDiscord> <Elegantbeef> And of course it's pointless when you're iterating
[10:19:35] <FromDiscord> <evoalg> oh!
[10:19:46] <FromDiscord> <evoalg> that makes sense
[10:20:19] <FromDiscord> <Elegantbeef> Good!
[10:21:26] <FromDiscord> <evoalg> (and hence the need for slicerator) ... hehe thank you for today's lesson ... my head is about to explode with info again ðŸ˜„
[10:22:14] <FromDiscord> <Elegantbeef> Yep, with slicerator(assuming you dont use pairs) you get a dropin replacement that gives you a smaller memory footprint and slightly faster operation
[10:22:35] <FromDiscord> <Rika> i saw something about a unary
[10:22:50] <FromDiscord> <Rika> oh it was something else
[10:23:16] <FromDiscord> <Elegantbeef> Well it was a possibility to stop the slice iterator being confused for a slice
[10:23:21] <FromDiscord> <Rika> i was thinking of why not make a unary or a function that makes any iterable into an "intermediate" where [..] does proper iterator slicing
[10:23:38] <FromDiscord> <Elegantbeef> It's not needed
[10:23:48] <FromDiscord> <Rika> im not a fan of pairs(..)
[10:23:50] <FromDiscord> <Rika> i
[10:23:53] <FromDiscord> <Rika> whoops
[10:24:04] <FromDiscord> <impbox [ftsf]> i,m .. pairs()
[10:24:33] <FromDiscord> <Elegantbeef> Well `enumerate("hello"[0..^2])` works so alias `enumerate`?
[10:25:34] <FromDiscord> <Elegantbeef> I dont know `.pair(a..b)` kinda sucks, but short of doing `[&a..&b]` or similar i dont think it can be done nicely
[10:26:10] <FromDiscord> <Elegantbeef> Already using `{}` for mutable slices
[10:26:24] <FromDiscord> <Rika> <some name here>(x)[a..b] idk
[10:27:08] <FromDiscord> <Elegantbeef> PRs welcomed is all i can say cause yea i dont like it but i cant think of something reasonable
[10:28:41] <FromDiscord> <Elegantbeef> Ooh might be able to use a distinct open array
[10:28:52] <NimEventer> New thread by GalaxyDragon: Nim On AVR, see https://forum.nim-lang.org/t/8659
[10:30:29] <NimEventer> New Nimble package! jester2swagger - Converts a file with Jester routes to Swagger JSON which can be imported in Postman., see https://github.com/ThomasTJdev/jester2swagger
[10:32:14] <FromDiscord> <Elegantbeef> Seems that's a no
[11:47:05] *** Joins: n59 (~n@185.17.113.234)
[11:48:01] *** Quits: n59 (~n@185.17.113.234) (Client Quit)
[12:30:37] <NimEventer> New Nimble package! riimut - Transform latin letters to runes & vice versa. Four runic dialects available., see https://github.com/stscoundrel/riimut-nim
[13:18:48] *** Joins: lumo_e (~enrico@2001:b07:5d38:4002:8141:74bb:767b:88db)
[13:27:51] <FromDiscord> <Hex08> sent a code paste, see https://play.nim-lang.org/#ix=3Gfj
[13:28:22] <FromDiscord> <Rika> You only need to assign it to the first entry
[13:28:25] <FromDiscord> <Rika> Otherwise no
[13:29:06] <FromDiscord> <Hex08> In reply to @Rika "You only need to": Sorry I don't understand what you mean
[13:29:15] <FromDiscord> <Hex08> Adding a `.Natural` only to the `1` doesn't seem to work
[13:29:17] <FromDiscord> <Rika> Only 1 needs to have suffix
[13:29:20] <FromDiscord> <Rika> Really now
[13:29:35] <FromDiscord> <Hex08> Oh no!
[13:29:39] <FromDiscord> <Hex08> Sorry you're right
[13:29:46] <FromDiscord> <Rika> !eval var arr: array[4, Natural] = [1.Natural, 2, 3, 4]
[13:29:51] <NimBot> <no output>
[13:29:52] <FromDiscord> <Hex08> I had some leftover code, your suggestion works
[13:29:55] <FromDiscord> <Rika> Yeah
[13:30:03] <FromDiscord> <Rika> Itâ€™s at least somewhat better than all entries
[13:30:09] <FromDiscord> <Rika> Of course itâ€™s still not the best
[13:31:04] <FromDiscord> <Hex08> Yeah it's alright, I think in Rust you would need a suffix for each but I'm not 100% sure
[13:32:14] <FromDiscord> <Elegantbeef> It might resolve it from it's type inference
[13:32:50] <FromDiscord> <Rika> Yeah reverse inference would be nice
[13:33:56] <FromDiscord> <Hex08> In reply to @Elegantbeef "It might resolve it": Yeah but it will still complain that the literals don't match
[13:34:07] <FromDiscord> <Hex08> You need a suffix for each ðŸ˜¦ https://media.discordapp.net/attachments/371759389889003532/914094224843100170/unknown.png
[13:34:26] <FromDiscord> <Elegantbeef> Oh interesting
[13:35:04] <FromDiscord> <Elegantbeef> I guess it's ambiguous if it should be a int or float and they're sticklers for "correct"?
[13:36:28] <FromDiscord> <Hex08> Yes, I might be wrong but I think Rust doesn't ever implicitly cast primitive types
[13:36:47] <FromDiscord> <Hex08> `int / float` is an error and you have to do `int as f64 / float`
[13:38:42] <FromDiscord> <Elegantbeef> Yea seems they'll infer the size of an integer but never make it a float
[13:38:45] <FromDiscord> <Elegantbeef> Which is an odd behaviour
[13:39:10] <FromDiscord> <Rika> Thatâ€™s just annoying
[13:40:18] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3Gfm
[13:40:31] <FromDiscord> <Rika> Thatâ€™s normal at least
[13:40:37] <FromDiscord> <Rika> Same issue with Nim
[13:40:52] <FromDiscord> <Rika> Ah save for the integer part
[13:41:07] <FromDiscord> <Elegantbeef> Guess they view that int -\> sized int is okay to do implicitly but int -\> float is a no no
[13:41:14] <FromDiscord> <Rika> Wait no the whole thing is still like Nim yeah
[13:41:29] <FromDiscord> <Rika> I mean of course
[13:41:47] <FromDiscord> <Elegantbeef> It's not like Nim really
[13:41:52] <FromDiscord> <Rika> Integers canâ€™t be fully represented by their same sized float counterparts
[13:41:55] <FromDiscord> <Elegantbeef> you can pass a numeric literal to any type
[13:42:02] <FromDiscord> <Rika> What you showed is not that
[13:42:19] <FromDiscord> <Rika> You showed a literal getting bound to a variable then being passed into a function
[13:42:23] <FromDiscord> <Elegantbeef> The compiler is backwards reasoning the type of `b` just find
[13:42:31] <FromDiscord> <Elegantbeef> Look at the type it reasoned `b` to
[13:42:35] <FromDiscord> <Elegantbeef> `u8`
[13:42:41] <FromDiscord> <Rika> Yes
[13:42:43] <FromDiscord> <Rika> Is that wrong?
[13:43:07] <FromDiscord> <Rika> Okay
[13:43:10] <FromDiscord> <Rika> I see your point
[13:43:11] <FromDiscord> <Elegantbeef> It's right, but i find it odd that it doesnt do it for a aswell since it's a literal
[13:43:59] <FromDiscord> <Rika> Well I think because integer to integer is always reversible unless you exceed the size of the destination
[13:44:06] <FromDiscord> <Rika> Whilst itâ€™s not true for the other
[13:44:20] <FromDiscord> <Elegantbeef> Possibly, i find the behaviour odd still
[13:44:56] <FromDiscord> <Elegantbeef> You have this backwards type inference but only use it for some literals, seems counter to what one would expect
[13:46:08] <FromDiscord> <Schelz> I have a question why C code returns me wired numbers in nim print ?
[13:46:21] <FromDiscord> <Elegantbeef> Also that's the first rust code i've ever written, oh how the might have fallen
[13:46:34] <FromDiscord> <Elegantbeef> What's the code schelz?
[13:46:37] <FromDiscord> <Schelz>  https://media.discordapp.net/attachments/371759389889003532/914097372102012948/unknown.png
[13:46:43] <FromDiscord> <Schelz>  https://media.discordapp.net/attachments/371759389889003532/914097394751262720/unknown.png
[13:47:05] <FromDiscord> <Schelz> returns numbers like: 6289996, 10747340, 20970220
[13:47:07] <FromDiscord> <Schelz> etc..
[13:47:18] <FromDiscord> <Elegantbeef> One second let me recreate it
[13:47:28] <FromDiscord> <Elegantbeef> Oh you use `int` instead of `cint`
[13:47:31] <FromDiscord> <Elegantbeef> Could be an issue
[13:48:25] <FromDiscord> <Schelz> change to cint {.importc.} nothing changed
[13:48:52] <FromDiscord> <Schelz> (edit) "change" => "I changed " | "I changed to cint {.importc.} nothing changed ... " 03added "still weird numbers"
[13:48:52] <FromDiscord> <Elegantbeef> https://play.nim-lang.org/#ix=3Gfp works fine here
[13:49:17] <FromDiscord> <Schelz> lol
[13:50:48] <FromDiscord> <Schelz> I copied the code in the files nothing lol...
[13:50:54] <FromDiscord> <Elegantbeef> I dont know what to say
[13:51:05] <FromDiscord> <Elegantbeef> Wait did the code i give you not work?
[13:51:09] <FromDiscord> <Rika> Are you on windows
[13:51:18] <FromDiscord> <Rika> Maybe that would matter but it really shouldnâ€™t
[13:51:37] <FromDiscord> <Elegantbeef> `nim -v`
[13:51:48] <FromDiscord> <Elegantbeef> There has to be something we're missing
[13:52:04] <FromDiscord> <Schelz>  https://media.discordapp.net/attachments/371759389889003532/914098743199023144/unknown.png
[13:52:13] <FromDiscord> <Elegantbeef> Cause the only thing that makes sense is that you're not initialising values on C, but if that's the function that's not an issue
[13:52:26] <FromDiscord> <Elegantbeef> windows 32bit
[13:52:44] <FromDiscord> <Elegantbeef> So the code i gave you also failed?
[13:53:03] <FromDiscord> <Rika> It should still work even on 32 bit thoughhhhhh
[13:53:24] <FromDiscord> <Elegantbeef> Indeed
[13:54:16] <FromDiscord> <Schelz> In reply to @Elegantbeef "So the code i": yes
[13:54:28] <FromDiscord> <Rika> That is seriously strange
[13:54:58] <FromDiscord> <Elegantbeef> Does the compiled C work properly?
[13:55:30] <FromDiscord> <Elegantbeef> https://play.nim-lang.org/#ix=3Gfs
[13:55:38] <FromDiscord> <Elegantbeef> Although i assume you could've written that yourself ðŸ˜€
[13:55:56] <FromDiscord> <Rika> What if Nim thinks itâ€™s 32 bit but the compiler is 64?
[13:55:58] <FromDiscord> <Elegantbeef> I can only imagine the 32bit nim compiler is shitting the bed, or there is an issue with your C compiler
[13:56:31] <FromDiscord> <Schelz> returns 88 and 66 https://media.discordapp.net/attachments/371759389889003532/914099857650761778/unknown.png
[13:56:46] <FromDiscord> <Rika> Thatâ€™s correct then
[13:56:57] <FromDiscord> <Rika> 8 from print and another 8 from echo
[13:56:59] <FromDiscord> <Elegantbeef> Ok so we're in a proper universe
[13:57:14] <FromDiscord> <Rika> Lol
[13:57:47] <NimEventer> New thread by Mantielero: Importcpp constructor issue, see https://forum.nim-lang.org/t/8660
[13:59:37] <FromDiscord> <Elegantbeef> I'm now confused why the other errored, is cint on 32bit not a 32bit int?
[14:01:03] <FromDiscord> <Schelz> lame its from cint {.importC, nodecl.} it has to be nodecl. too in order to work
[14:01:27] <FromDiscord> <Schelz> else its printing random numbers
[14:01:37] <FromDiscord> <Schelz>  https://media.discordapp.net/attachments/371759389889003532/914101146002550824/unknown.png
[14:02:20] <FromDiscord> <Elegantbeef> you probably could just do `importc, header: "importex.c"`
[14:02:40] <FromDiscord> <Elegantbeef> then you wouldnt need the `{.compile: ... .}`
[14:02:48] <FromDiscord> <Elegantbeef> Atleast i dont think so
[14:03:22] <FromDiscord> <Elegantbeef> Eh probably dumb, to do that
[14:03:24] <FromDiscord> <Schelz> aha its working that way too
[14:03:37] <FromDiscord> <Schelz> works good https://media.discordapp.net/attachments/371759389889003532/914101649964929054/unknown.png
[14:04:29] <FromDiscord> <Elegantbeef> Well if you have more functions you might want to do `{.push importc header:"importex.c".}` and a `{.pop.}` after
[14:05:47] <FromDiscord> <Schelz> thx
[14:34:09] *** Quits: lumo_e (~enrico@2001:b07:5d38:4002:8141:74bb:767b:88db) (Remote host closed the connection)
[14:35:26] *** Joins: lumo_e (~enrico@2001:b07:5d38:4002:8141:74bb:767b:88db)
[14:44:24] *** Joins: src (~src@user/src)
[14:49:59] <NimEventer> New thread by Lachu: Turn of name mangling for Nim type, while exporting to c, see https://forum.nim-lang.org/t/8661
[14:59:33] *** Quits: src (~src@user/src) (Quit: Leaving)
[15:00:25] *** Joins: src (~src@user/src)
[15:05:40] *** Quits: src (~src@user/src) (Quit: Leaving)
[15:36:02] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.3)
[15:36:55] *** Joins: supakeen (~user@python/site-packages/supakeen)
[15:48:32] *** Quits: lumo_e (~enrico@2001:b07:5d38:4002:8141:74bb:767b:88db) (Ping timeout: 268 seconds)
[15:55:21] *** Joins: neurocyte0132889 (~neurocyte@195.80.52.229)
[15:55:21] *** Quits: neurocyte0132889 (~neurocyte@195.80.52.229) (Changing host)
[15:55:21] *** Joins: neurocyte0132889 (~neurocyte@user/neurocyte)
[16:02:28] *** Joins: PMunch (~PMunch@user/pmunch)
[16:28:43] <FromDiscord> <lantos> @Yardanico
[16:40:02] <FromDiscord> <5271> how do i read a single character?â†µlike readKey
[16:41:57] <FromDiscord> <lantos> @cheatfate
[16:42:05] <FromDiscord> <lantos> (edit) "@cheatfate ... " 03added "on discord?"
[16:42:12] <FromDiscord> <lantos> (edit) 
[16:42:21] <FromDiscord> <lantos> (edit) "@cheatfate" => "cheatfate"
[16:42:28] <FromDiscord> <lantos> (edit) "cheatfate" => "@cheatfate"
[16:43:36] *** Joins: lumo_e (~enrico@2001:b07:5d38:4002:494e:f69b:5c8f:e3ce)
[16:49:10] <FromDiscord> <gdquest> sent a code paste, see https://play.nim-lang.org/#ix=3Ggc
[16:50:29] <FromDiscord> <gdquest> sent a code paste, see https://play.nim-lang.org/#ix=3Ggd
[16:50:33] <FromDiscord> <Rika> notin
[16:50:35] <FromDiscord> <enthus1ast> sent a code paste, see https://play.nim-lang.org/#ix=3Gge
[16:50:37] <FromDiscord> <enthus1ast> if not found -1
[16:50:59] <FromDiscord> <Rika> `if character notin ...`
[16:51:03] <FromDiscord> <gdquest> Ah! `notin`, yes
[16:51:12] <FromDiscord> <gdquest> It's a bit like everything works like procedures?
[16:51:14] <FromDiscord> <Rika> if you prefer you can always `not_in`
[16:51:26] <FromDiscord> <gdquest> And thanks @enthus1iast too
[16:53:22] <FromDiscord> <gdquest> It's going very well working with nim already. I'm coding a formatter for my team and it's fairly straightforward so far
[17:00:32] *** Joins: terminalpusher (~terminalp@2a01:586:8c54:1:b2cc:a15c:886b:e9d6)
[17:06:09] *** Quits: lumo_e (~enrico@2001:b07:5d38:4002:494e:f69b:5c8f:e3ce) (Ping timeout: 250 seconds)
[17:22:32] *** Quits: mahlon (~mahlon@martini.nu) (Ping timeout: 256 seconds)
[17:25:15] *** Quits: terminalpusher (~terminalp@2a01:586:8c54:1:b2cc:a15c:886b:e9d6) (Remote host closed the connection)
[17:29:17] <FromDiscord> <lantos> sent a code paste, see https://play.nim-lang.org/#ix=3Ggo
[17:34:17] *** Quits: anddam (~anddam@user/anddam) (Quit: WeeChat 3.3)
[17:44:54] *** Joins: arkurious (~arkurious@user/arkurious)
[18:24:10] *** Joins: mahlon (~mahlon@martini.nu)
[18:30:08] *** Joins: anddam (~anddam@user/anddam)
[18:37:59] *** Joins: lumo_e (~enrico@2001:b07:5d38:4002:45f4:76c7:4786:7376)
[18:43:51] <FromDiscord> <tandy> can you do a deepcopy in nim?
[18:43:52] <FromDiscord> <tandy> like in python?
[18:44:03] <FromDiscord> <Rika> yes
[18:44:07] <FromDiscord> <tandy> i have a seq[seq[ref object]
[18:44:15] <FromDiscord> <tandy> and x = y isnt working
[18:44:24] <FromDiscord> <Rika> deepcopy()
[18:44:25] <FromDiscord> <tandy> well it copies but changes are carried over to y
[18:44:28] <FromDiscord> <Rika> x = y is shallow
[18:44:53] <FromDiscord> <Rika> deep copies are explicit
[18:47:24] <FromDiscord> <tandy> oh epic it works
[18:49:47] <FromDiscord> <tandy> oh shit does `deepcopy` work with emscripten ?
[18:51:54] <FromDiscord> <tandy> yees it compiles
[19:31:32] <FromDiscord> <Rika> well deepcopy is a magic
[19:31:42] <FromDiscord> <Rika> https://github.com/nim-lang/Nim/blob/version-1-6/lib/system.nim#L2960
[19:44:43] *** Quits: lumo_e (~enrico@2001:b07:5d38:4002:45f4:76c7:4786:7376) (Ping timeout: 268 seconds)
[19:45:20] *** Joins: lumo_e (~enrico@37.160.221.40)
[19:50:11] <FromDiscord> <gdquest> Wow!
[19:50:35] <FromDiscord> <gdquest> I must say, the ability to jump to definition with the standard library is so cool ðŸ™‚
[19:51:09] <FromDiscord> <gdquest> How would you go about something like this in nim? This is Python `"\t"  indent_level + "#"  dash_count + wrapped_line`
[19:51:52] <FromDiscord> <gdquest> So I'm doing it the simple way, with a for loop right now, but I was wondering if there's something different or more idiomatic
[19:53:16] <FromDiscord> <haxscramper> `import std/strutils; repeat("$", dashCount)`
[19:53:23] <FromDiscord> <enthus1ast> well there is alignâ†µâ†µhttps://nim-lang.org/docs/strutils.html#align%2Cstring%2CNatural%2Cchar
[19:57:55] <FromDiscord> <gdquest> Perfect, thanks!
[20:00:09] <FromDiscord> <enthus1ast> sent a code paste, see https://play.nim-lang.org/#ix=3Ghb
[20:00:10] <FromDiscord> <gdquest> sent a code paste, see https://paste.rs/Qf7
[20:00:39] <FromDiscord> <gdquest> Yes it's great you can make functions like that, although I'm avoiding sugar for now to get used to the Nim operators and functions
[20:01:27] <FromDiscord> <gdquest> (edit) "https://play.nim-lang.org/#ix=3Ghd" => "https://play.nim-lang.org/#ix=3Ghc"
[20:49:12] *** Quits: lumo_e (~enrico@37.160.221.40) (Ping timeout: 260 seconds)
[20:58:16] <FromDiscord> <tandy> how can i debug illegal storage access error?
[20:58:37] <FromDiscord> <enthus1ast> have a closer look at your ref or pointer types
[20:59:28] <FromDiscord> <enthus1ast> u prolly try to use a unititialized ref
[21:00:13] <FromDiscord> <enthus1ast> btw JsonNode is ref
[21:10:13] *** Joins: lumo_e (~enrico@2001:b07:5d38:4002:3862:5c18:fd3a:4818)
[21:16:11] *** Quits: lumo_e (~enrico@2001:b07:5d38:4002:3862:5c18:fd3a:4818) (Ping timeout: 250 seconds)
[21:17:27] *** Joins: lumo_e (~enrico@2001:b07:5d38:4002:89fe:8640:33d5:88ae)
[21:23:30] <FromDiscord> <tandy> hmmm i tried
[21:23:34] <FromDiscord> <tandy> big project those
[21:25:00] <FromDiscord> <enthus1ast> you could use gdb to find this, but i have not much experience with nim and gdb, so others might comment on this
[21:26:03] <FromDiscord> <enthus1ast> but i think its something along those lines\:â†µcompile with --debugger\:nativeâ†µrun with gdb until it crashesâ†µsee the stacktrace
[21:26:35] *** Quits: lumo_e (~enrico@2001:b07:5d38:4002:89fe:8640:33d5:88ae) (Ping timeout: 250 seconds)
[21:27:37] *** Joins: lumo_e (~enrico@37.160.217.192)
[21:29:03] <FromDiscord> <tandy> https://internet-of-tomohiro.netlify.app/nim/gdb.en.html
[21:29:03] <FromDiscord> <tandy> i found this
[21:29:53] <FromDiscord> <enthus1ast> yes
[21:33:30] <FromDiscord> <enthus1ast> yeah at least in this example it picks it up easily
[21:33:31] <FromDiscord> <enthus1ast> https://play.nim-lang.org/#ix=3GhH
[21:34:43] <FromDiscord> <tandy> `/home/tandy/.nimble/tools/nim-gdb.py: No such file or directory.`
[21:34:52] <FromDiscord> <tandy> when i run nim-gdb on the compiled file
[21:35:47] <FromDiscord> <enthus1ast> imho you can try it withouth the nim specific scripts
[21:36:15] <FromDiscord> <enthus1ast> should be enough to find it
[21:36:25] <FromDiscord> <enthus1ast> but you can always source the correct python script
[21:36:44] <FromDiscord> <tandy> `nim c --debugger:native tests/test.nim` just compiles  and does nothing
[21:36:56] <FromDiscord> <enthus1ast> yes
[21:37:04] <FromDiscord> <enthus1ast> please have a look at my example
[21:37:09] <FromDiscord> <enthus1ast> you must run it with gdb
[21:37:15] <FromDiscord> <enthus1ast> gdb test.exe
[21:37:37] <FromDiscord> <tandy> yes i try that here
[21:37:41] <FromDiscord> <enthus1ast> sent a code paste, see https://play.nim-lang.org/#ix=3GhI
[21:37:51] <FromDiscord> <tandy> oh il try this
[21:38:26] <FromDiscord> <enthus1ast> then just run you programm until it crashes with\:â†µr
[21:38:48] <FromDiscord> <enthus1ast> r{enter}
[21:40:10] <FromDiscord> <enthus1ast> imho the nim-gdb.py stuff is just to print variables better
[21:40:25] <FromDiscord> <enthus1ast> but you should be able to see the line where it crashes even withouth this
[21:45:53] <FromDiscord> <tandy> hmm its kinda useful
[21:45:57] <FromDiscord> <tandy> but yea ur right
[21:46:09] <FromDiscord> <tandy> i dont understnad why the var is uninitialised tho
[21:46:57] <FromDiscord> <enthus1ast> can you share code?
[21:47:14] <FromDiscord> <tandy> yeah its here
[21:48:53] <FromDiscord> <tandy> https://github.com/tandy-1000/minmax-checkers just pushed
[21:49:07] <FromDiscord> <tandy> the error is in `minimax`
[21:49:15] <FromDiscord> <tandy> im trying to make the tests work
[21:49:26] <FromDiscord> <tandy> you can run `nimble test`
[21:49:55] <FromDiscord> <enthus1ast> on which line it crashes?
[21:50:09] <FromDiscord> <enthus1ast> maybe send a github link
[21:50:44] <FromDiscord> <tandy> https://github.com/tandy-1000/minmax-checkers/blob/cb3c9ce6f7144505c0fcdb26b3bbc40caac052a8/src/classes.nim#L408
[21:51:11] <FromDiscord> <tandy> i think the reason could be that minimax doesnt return any move in certain ocasions?
[21:51:57] <FromDiscord> <enthus1ast> oh you use some oop macros
[21:52:18] <FromDiscord> <tandy> yep
[21:53:24] <FromDiscord> <enthus1ast> if it can, and if it does in this case, this might be your error
[21:53:40] <FromDiscord> <tandy> i wonder how i can find that out
[21:54:07] <FromDiscord> <enthus1ast> echo "here"USE THE MOVEâ†µecho "there"\:D
[21:54:46] <FromDiscord> <tandy> oh i fixed it lol
[21:57:29] <FromDiscord> <tandy> ty ! minimax still maxes debug call depth so i got more work to do lol
[22:03:41] *** Quits: lumo_e (~enrico@37.160.217.192) (Ping timeout: 245 seconds)
[22:29:18] <FromDiscord> <IsaacPaul> In reply to @fishcakenine "I am trying to": @fishcakenine  .. not sure how to ping people on irc or gitter.. but hopefully this works lol. Did you ever finish your wgpu-native wrapper?
[22:33:01] *** Quits: Figworm (FiggyWitIt@user/figworm) (Quit: Figworm)
[22:33:57] *** Joins: krux02 (~krux02@p200300e8170c11004db6e8013ca32c23.dip0.t-ipconnect.de)
[22:50:23] *** Joins: src (~src@user/src)
[22:53:34] *** Joins: lumo_e (~enrico@2001:b07:5d38:4002:5621:72eb:398a:dcb1)
[22:59:30] *** Quits: src (~src@user/src) (Read error: Connection reset by peer)
[22:59:54] *** Joins: src (~src@user/src)
[23:00:08] *** Quits: src (~src@user/src) (Remote host closed the connection)
