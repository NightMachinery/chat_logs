[00:00:21] <shka> we are talking about euros and EU sanctions
[00:00:51] <shka> so this does not effect dollar directly, right now
[00:00:54] <selwyn> i think those are an empty threat
[00:01:00] <selwyn> europe is still buying oil and gas
[00:01:01] <shka> no
[00:01:06] <shka> yes, they do
[00:01:13] <selwyn> i.e. they are sanctioning everything
[00:01:18] <selwyn> except russia's most valuable exports
[00:01:27] <selwyn> this is not threatening
[00:01:31] <pl> selwyn: I do not think seizing assets changes anything. For one, it's not the first time they did it
[00:01:33] <shka> you won't be able to fund war without credit
[00:01:42] <pl> for two, that's the reality of holding assets in foreign system
[00:01:50] <shka> no matter how much oil and gas you sell
[00:02:41] <pl> petrodollars... Russia can always go back to doing what USSR did
[00:03:02] <selwyn> shka: putin is obsessed with budgeting
[00:03:15] <selwyn> syrian war was run on a shoestring
[00:03:22] <shka> selwyn: putin is not obsessed with anything i am afraid 
[00:03:29] <selwyn> if anyone can fight on a budget, russia can
[00:03:46] <selwyn> of course things might not turn out as planned, but i would be very surprised if this whole thing was not priced properly
[00:03:54] <selwyn> at the planning stage
[00:03:56] <shka> selwyn: wanna bet?
[00:04:03] <selwyn> i uh
[00:04:11] <selwyn> it seems distasteful to bet on conflicts
[00:04:19] <shka> ever worked in a big corporation?
[00:04:30] <selwyn> no?
[00:05:05] <shka> well, the reality is that "nobody is promoted for complaining"
[00:05:57] <shka> and unless people well on the planning level were instructed "yes, we are really doing this", they would have no incentive to explain that boss has a stupid idea
[00:06:17] <hayley> https://www.youtube.com/watch?v=kREFiWkUE_M
[00:06:18] -ixelp- King Crimson - Satori in Tangier (Live in Japan 1984) - YouTube
[00:06:23] <selwyn> shka: i see your point
[00:07:22] <selwyn> but i don't agree
[00:07:23] <shka> you must understand, that it is not Putin doing everything, but professionals in organized system
[00:07:39] <shka> and this system just failed
[00:07:50] <selwyn> i believe russia has a winning hand
[00:08:12] <selwyn> as such, invading ukraine may be symptomatic of 'great russia chauvinism' it is not indicative of irrationality or poor planning
[00:08:25] <shka> very well
[00:08:29] <selwyn> like
[00:08:37] <selwyn> how is germany not going to buy gas
[00:08:53] <shka> i am saying that Russia is either going bankrupt or Putin is removed
[00:09:01] <selwyn> ok
[00:09:09] <shka> well, Iran deal is in the works?
[00:09:22] <shka> and again
[00:09:32] <selwyn> how does the iran deal enter into it
[00:09:32] <shka> it does not matter if germany is buying gas or not
[00:09:36] <selwyn> germany buys gas from iran?
[00:09:43] <shka> you can't fund the current situation without credit
[00:09:53] <shka> selwyn: no, not yet anyway
[00:10:13] <selwyn> well, i don't see that happening, for example
[00:10:14] <hayley> https://twitter.com/MichaelRosenYes/status/1500555632289718277 Michael Rosen shows how to defeat radical centrists
[00:10:25] <selwyn> probably the most practical option is to connect azerbaijan to the european gas system via turkey
[00:10:28] <shka> but it is important to realize that there are other energy providers outside Russia
[00:10:29] <selwyn> and stuff like this takes time
[00:10:49] <shka> selwyn: USA has helluva of cheap natural gas right now
[00:10:57] <selwyn> lng expensive
[00:11:07] <selwyn> and unless i am mistaken europe can't import that much
[00:11:16] <shka> it absolutely can
[00:11:45] <shka> you don't have gas port in germany, but there is infrastructure in other places
[00:11:47] <shka> regardless
[00:11:57] <shka> let me repeat
[00:12:20] <shka> russia can sell all the gas they have, and this war will bankrupt them regardless
[00:12:57] *** Joins: notzmv (~zmv@user/notzmv)
[00:13:01] <shka> or they go after private deposits
[00:13:14] <shka> and they are going bankrupt LATER
[00:13:20] <selwyn> well, i think that europe will blink a long time before this
[00:13:24] <selwyn> this can be our bet if you want
[00:13:47] <selwyn> europe cant bear a lot of economic pain before having governments collapse and protest/riot movements
[00:13:57] <selwyn> look at fuel increases -> gilet jaunes
[00:14:34] <selwyn> and importing expensive lng (even if capacity is somehow not an issue) causes that pain
[00:15:25] <pl> selwyn: ppl are more willing to deal with it for a cause
[00:15:46] <selwyn> which people
[00:15:53] <shka> well, i think that russia is gonna default on public debt and this will crash global financial system
[00:16:04] * shka should buy some euros
[00:16:22] <shka> and this can happen this month even
[00:16:45] <selwyn> people in germany? because they are the ones who matter most
[00:16:59] <selwyn> (in terms of economic weight)
[00:18:21] <shka> a lot of money is gonna disappear 
[00:19:59] * selwyn was supposed to write instead of posting
[00:22:16] * edgar-rft awards selwyn a literature nobel prize for his posts
[00:25:35] <selwyn> on a lighter note, boris johnson has come up with a six point plan to defeat russia
[00:25:54] <selwyn> not clear whether this involves sanctioning oligarchs who donated money to the conservative party
[00:26:20] <pl> probably not
[00:26:24] <selwyn> so far, it appears that only those dumb enough to not do that are in trouble
[00:28:44] <shka> well, he better think on how survive global financial crisis
[00:30:15] <pl> shka: he already helped start a minor one for London City
[00:30:28] <pl> anyway, BoJo reached his fucking goal and now is lost
[00:30:33] <selwyn> its sad
[00:30:37] <pl> I mean, "Save Big Dog" plan was lulz
[00:30:43] <selwyn> at least trump enjoyed being in charge
[00:31:28] <selwyn> pl: it worked
[00:31:49] <shka> anyway
[00:32:00] <pl> selwyn: not sure if it worked, or if OCP happened
[00:32:10] <shka> consider how return of Iran to the international market may provide alternative to Russian Oil
[00:32:35] <pl> and plans of several groups very nearly reacted to the OCP the way a sentence deals with a full stop
[00:34:11] <pl> Meanwhile, I'm working on government-supported platform to help with the refugee crisis resulting from this, and I can't help but think we should have more components prepared before
[00:34:14] <selwyn> ocp?
[00:34:19] <pl> a "GovOS", let's say
[00:34:24] <pl> selwyn: "Outside Context Problem"
[00:38:46] <shka> also, Chechnya war proved to expensive for Russia to handle
[00:38:57] <shka> and this in many ways looks like a repeat
[00:39:09] <pl> with Chechenya, didn't they ultimately suborn local elements to bully the population?
[00:39:12] <pl> (i.e. Kadyrov)
[00:39:45] <shka> yes, but first war ended with 1998 financial crisis
[00:40:25] <pl> was there much impact into Georgia? I mean, I do recall bits from listening to evening news as a kid, but not all details
[00:40:51] <shka> Georgia wasn't that bad, it was just few days of combat
[00:40:55] <selwyn> pl: boris johnson is a media guy and knew that if he rode it out long enough, the newspapers would turn to something else
[00:41:05] <selwyn> and lo and behold, an ocp arrived
[00:41:30] <pl> shka: no, I mean back in relation with first chechen war
[00:41:33] <selwyn> advantage of the war in ukraine is that britain can posture a lot about western civilisation, without actually having to do anything
[00:41:48] <waleee> Ukraine has received all the 5000 AT4:s from Sweden now
[00:41:51] <selwyn> britain will not undergo even minor inconveniences such as football clubs closing
[00:41:53] <waleee> just in the news here
[00:42:02] <pl> selwyn: disadvantage is that britain gets called "perfidious albion" for a good reason
[00:42:04] <shka> pl: oh, no, the problem at the time was Russia's "virtual economy" as they called it at the time
[00:42:23] <shka> worked great, until suddenly everyone realized that Russia's economy is half of what it really is
[00:42:26] <selwyn> pl: not a disadvantage if you are in charge of britain
[00:42:29] <hayley> cl-irc doesn't seem to like parens for some reason. /me scratches head
[00:42:35] <selwyn> you are not wrong of course
[00:42:53] <pl> shka: mid-1990s, my mother worked in a company that did things like selling butter to georgia and having the freezer trucks return with same weight of high grade nickel
[00:42:58] <shka> pl: it was fiscal version of current state of the Russian army in a way
[00:43:50] <pl> shka: btw, did you know the bank transfer scams of early post-soviet russia?
[00:44:13] <selwyn> pl: part of georgia became a refuge for terrorists, which may be a consequence of the chechen wars
[00:44:16] <shka> no?
[00:44:18] <selwyn> https://en.wikipedia.org/wiki/Pankisi_Gorge_crisis
[00:44:31] <pl> shka: ever watched "Catch me if you can?"
[00:44:54] <pl> tl;dr faking cheques went on like crazy
[00:45:32] <shka> ok
[00:45:36] <pl> and apparently part of how it was finally brought to heel was introduction of cryptographic checks implemented, among other things, on pocket computers
[00:47:01] <pl> selwyn: BTW, sanctions mean that Russia can't expand its gas&oil operations
[00:47:07] <selwyn> i am reminded that turkey imports polish apples, relabels them and sells them to russia for a profit
[00:47:11] <selwyn> sanctions busting profitable
[00:47:27] *** Joins: Bakerposting (~Bakerpost@n122-104-71-229.sun4.vic.optusnet.com.au)
[00:47:28] <selwyn> pl: idk
[00:47:28] <waleee> how can that be profitable
[00:47:39] <shka> selwyn: note that those are not POLISH embargo
[00:48:02] <shka> Russia did this on their own :P
[00:48:03] <selwyn> uh, well new ones, yeah i guess
[00:48:10] <hayley> Bakerposting: do the thing
[00:48:10] <Bakerposting> [Baker92Tread]  Baker, Henry G.  "The Treadmill: Real-Time Garbage Collection Without Motion Sickness". (Cache-Conscious Copying Collectors <https://plover.com/~mjd/misc/hbaker-archive/CacheCGC.html>)
[00:48:11] -ixelp- GC'91 Workshop on Garbage Collection in Object-Oriented Systems
[00:49:27] <hayley> Guess I don't need the link, since it will make ixelp excited too.
[00:49:40] <selwyn> i always read ixelp in a spanish accent
[00:49:59] * hayley clears throat
[00:50:03] <hayley> pony
[00:50:03] <Bakerposting> OMG!! Ponies!!!
[00:50:05] <waleee> selwyn: Poland is roughly in the same growth zone as Russia in the summers re apples, so I can't fathom there being more Polish apples than Russian ones 
[00:50:50] <shka> waleee: Soviet Union was not big on the agriculture, Russia inherited this and slowly improved situation
[00:51:15] <selwyn> poland 4st biggest producer in the world wtf
[00:51:29] <shka> selwyn: we love apples <3
[00:51:43] <waleee> yeah I know it's agricultural policies was kind of shit, but still. There must be millions of apple trees in russian dachas
[00:51:45] <selwyn> https://www.youtube.com/watch?v=-VKDlEhFJm8
[00:51:46] -ixelp- Hungry for Apples | Rick and Morty | Adult Swim - YouTube
[00:52:06] <pl> waleee: dachas aren't good industrial producers
[00:52:36] <shka> plus if you don't care about the apple tree you ain't getting good apples in significant number
[00:53:13] <waleee> (to be fair 100% of dachas I have seen on youtube seems to be 99% pototoes)
[00:53:24] * selwyn is a cider producer
[00:54:06] <waleee> nice. Not of the apple syrupy, industrial kind I assume?
[00:54:14] * |3b| thought things used MEMS oscillators instead of crystals these days (which is why helium kills or at least stuns a lot of electronics devices)
[00:54:18] <selwyn> i made it last year out of locally picked apples
[00:54:25] <selwyn> it was nice but really, really weak
[00:54:42] <selwyn> if i had only added sugar, it would have been amazing
[00:55:00] <waleee> I got a bit disappointed when I realised that the big brands essentially makes it out of apple syrup, not fresh apple
[00:55:05] <selwyn> well
[00:55:22] <selwyn> i am considering making it out of apple juice some time as this is infinitely easier out of season
[00:55:31] <pl> |3b|: not for timekeeping 
[00:56:15] <pl> MEMS is used a lot for accelerometers and such, though, but I haven't really heard of using them for timekeeping 
[00:56:50] <|3b|> https://en.wikipedia.org/wiki/Microelectromechanical_system_oscillator#Real-time_clocks ?
[00:57:56] <pl> Hmmm
[00:58:03] <pl> Indeed, I had a bit outdated data 
[00:58:54] * |3b| only knows that from reading stories about helium leaks killing all the iphones/watches in the buildings, because helium is small enough to get stuck in the oscillators 
[00:59:31] <|3b|> (small and hard to seal out)
[01:00:38] * selwyn only knows about atomic clocks
[01:03:58] <hayley> gilberth: "In a language which in addition offers inheritance, CLOS, CLIM, function composition techniques, closures as first class objects and so on it is much harder to arrive at an interface that everyone finds good."
[01:04:04] <hayley> Did you know CLIM is part of the CL standard now?
[01:13:38] <hayley> Someone wants me to put one-more-re-nightmare on Quicklisp (again). /me wonders if it will build.
[01:18:38] <hayley> https://github.com/telekons/one-more-re-nightmare/issues/12 It's the LC-3 tutorial guy too.
[01:18:38] -ixelp- Include in quicklisp · Issue #12 · telekons/one-more-re-nightmare · GitHub
[01:21:28] *** Joins: Lycurgus (~juan@98.4.112.204)
[01:24:38] <drakonis> CLIM is part of the standard?
[01:24:51] <hayley> Apparently.
[01:27:22] <edgar-rft> I think an interface that everyone finds good is easier when everybody knows where to searcch.
[01:28:09] <selwyn> am i correct in understanding that you still can't register for els
[01:32:39] <shka> selwyn: https://www.youtube.com/watch?v=FsTbMfQP7b0 wtf?
[01:32:40] -ixelp- New Experiment Creates Strange Quantum Domain Walls - YouTube
[01:33:10] <selwyn> watching
[01:36:08] <selwyn> he does a good job of explaining the bose einstein condensate
[01:37:25] <shka> this whole phenomena has some serious "glitch in matrix" quality to it
[01:38:03] <shka> good night all
[01:38:13] <selwyn> goodnight
[01:39:16] <shka> aaaaaaaand 1 million refugees in Poland
[01:39:17] <shka> great
[01:39:30] * shka misses boring times
[01:39:57] <waleee> chinese good-luck charm: May you live in boring times
[01:40:32] <waleee> (chinese curse per Terry Pratchett, May you live in intresting times)
[01:41:11] <drakonis> rip pterry
[01:41:21] <waleee> yeah that was a sad day
[01:43:11] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca) (Remote host closed the connection)
[02:01:17] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 268 seconds)
[02:02:20] *** Quits: vms14 (~user@29.red-79-153-202.dynamicip.rima-tde.net) (Ping timeout: 272 seconds)
[02:12:33] *** Joins: vms14 (~user@29.red-79-153-202.dynamicip.rima-tde.net)
[02:20:22] *** Quits: Aurora_v_kosmose (~LispyLigh@user/lispylights) (Remote host closed the connection)
[02:20:47] *** Joins: Aurora_v_kosmose (~LispyLigh@user/lispylights)
[02:23:29] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Quit: ERC (IRC client for Emacs 27.1))
[02:25:03] <hayley> https://www.reddit.com/r/australia/comments/mt23ev/ever_wonder_what_happens_when_most_of_the/ How to make news in Australia
[02:25:05] -ixelp- Reddit - Dive into anything
[02:26:26] *** Quits: vms14 (~user@29.red-79-153-202.dynamicip.rima-tde.net) (Read error: Connection reset by peer)
[02:26:39] *** Joins: vms14 (~user@29.red-79-153-202.dynamicip.rima-tde.net)
[02:32:30] *** Quits: vms14 (~user@29.red-79-153-202.dynamicip.rima-tde.net) (Ping timeout: 252 seconds)
[02:33:29] *** Joins: vms14 (~user@29.red-79-153-202.dynamicip.rima-tde.net)
[02:41:10] *** Quits: euandreh (~euandreh@2804:14c:33:9fe5:c731:e273:a007:5879) (Ping timeout: 250 seconds)
[02:43:10] *** Joins: euandreh (~euandreh@2804:14c:33:9fe5:8911:efbc:6ba0:c242)
[02:55:28] *** Quits: euandreh (~euandreh@2804:14c:33:9fe5:8911:efbc:6ba0:c242) (Ping timeout: 250 seconds)
[02:56:21] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca)
[02:57:30] *** Joins: euandreh (~euandreh@2804:14c:33:9fe5:7f03:8b0:a81c:56d7)
[03:11:24] *** Quits: random-nick (~random-ni@87.116.176.196) (Ping timeout: 240 seconds)
[03:25:24] *** Quits: shka (~herr@109.231.3.55) (Ping timeout: 240 seconds)
[03:42:16] *** Joins: jeosol (~jeosol@user/jeosol)
[03:51:28] *** Quits: kevingal (~quassel@2a02:8084:4140:f300:a120:b8c7:d412:19c8) (Remote host closed the connection)
[04:47:53] *** Quits: Bakerposting (~Bakerpost@n122-104-71-229.sun4.vic.optusnet.com.au) (Ping timeout: 256 seconds)
[04:56:11] *** Joins: Bakerposting (~Bakerpost@n122-104-71-229.sun4.vic.optusnet.com.au)
[05:01:42] * hayley forces a recurrent neural network to read up on type inference.
[05:01:55] <hayley> "The ML type system it is assigned to hence the tails of these lists, which we dist of each program state is almost the same as its predecessors and its successors, and since minusp cannot be appliedd to be inferred which noe net te prove that wnither ordirations for those states word first characterization of states and mads control flow inferencing. This is normally used for dead code elimination."
[05:07:28] *** Joins: lisp123 (~lisp123@120.154.103.52)
[05:08:48] *** Joins: notzmv (~zmv@user/notzmv)
[05:12:34] *** Quits: lisp123 (~lisp123@120.154.103.52) (Ping timeout: 256 seconds)
[05:27:18] <moon-child> ML for ML?
[05:28:23] <drakonis> no
[05:28:25] <drakonis> metalanguage
[05:28:50] <drakonis> oh
[05:28:52] <drakonis> duh
[05:39:11] <hayley> "The ML type system is very high performance by adding refcounts of this style and Prefetch Buffers". Proc. Sigplan Not. 26,2 (Feb. 1991), 79-90.
[05:39:12] <hayley> Thanks Baker!!
[05:40:18] <hayley> "The ML type system utilizes forwarding pointers which is relatively difficult to analyze."
[05:47:55] <hayley> Any recommendations for what spiffy AI models to look for, where I can feed it some text and get something similar-looking out?
[05:49:32] <hayley> "The ML type system utilizes its own stack as well as a bank of registers, the stack may (in theory) grow to an unbounded size and therefore cannot be wholly updated when the semispaces are flipped and still preserve a constant bound on the time"
[05:53:08] <moon-child> stylegan?
[05:53:12] * moon-child doesn't know shit about machine learning
[05:55:10] *** Joins: vats (~vats@103.216.143.6)
[05:55:42] <hayley> Text to text. But I'll keep it in mind.
[05:56:27] <sm2n> BERT?
[06:08:13] <hayley> It appears I can re-train GPT2, which should produce decent results. But it's crucial that I can provide training text, so that Bakerposting will actually Bakerpost.
[06:08:13] <Bakerposting> This means that we are allowed to freely share the tails of these lists, which we do as much as possible. (The Nimble Type Inferencer for Common Lisp-84 <https://plover.com/~mjd/misc/hbaker-archive/TInference.html>)
[06:08:14] -ixelp- The Nimble Type Inferencer for Common Lisp-84
[06:08:43] <drakonis> lol
[06:08:55] <drakonis> common lisp-84.....
[06:09:05] <sm2n> Do you have a fancy gpu do to that with?
[06:09:23] <hayley> I'm borrowing one from Google Colab.
[06:09:30] <sm2n> Ah
[06:09:44] <drakonis> the bot's going to get killed soon enough
[06:09:51] <hayley> Of course, I have no idea how I will run the model, as it lives on a Raspberry Pi 4.
[06:09:55] <drakonis> if you're running it from there
[06:10:08] <drakonis> after training the model, you don't actually need a gpu iirc?
[06:10:12] <hayley> drakonis: I run it from a Pi 4 at home. But I haven't implemented reconnecting for IRC yet.
[06:10:15] <drakonis> oic
[06:10:55] <hayley> Running a RNN forward to produce something is slow, even on Colab's GPU platform.
[06:10:57] <robin> github copilot maybe? (https://old.reddit.com/r/github/comments/ogfj5v/use_github_copilot_to_write_a_paper/ for example)
[06:10:58] -ixelp- Use GitHub Copilot to... write a paper? : github
[06:13:26] <hayley> drakonis: According to <https://www.reddit.com/r/LispMemes/comments/lmzfh8/bobrow_wrote_amop_after_being_part_of_the_kay/> Common Lisp-84 would come just after Smalltalk-80 in Smalltalk lineage.
[06:13:27] -ixelp- Reddit - Dive into anything
[06:13:30] <moon-child> oi
[06:13:36] <moon-child> how come discord gets 69 but we don't?
[06:15:38] <hayley> pony
[06:15:38] <Bakerposting> OMG!! Ponies!!!
[06:16:54] *** Joins: dave0 (~davezero@069.d.003.ncl.iprimus.net.au)
[06:38:56] * hayley shows yiff stash to tech support scammer
[06:51:28] <hayley> New Coffee Compiler Club video: "00:00:00 - Intro to new members (Jonathan Blow)"
[06:51:30] <hayley> Ahem, what
[06:51:57] *** Joins: mfiano (~mfiano@cpe-67-240-71-179.nycap.res.rr.com)
[06:52:11] <mfiano> Heya
[06:52:31] <hayley> mfiano: Blow has invaded the Coffee Compiler Club
[06:52:46] <mfiano> That blows :/
[06:53:09] * Lycurgus has never thought of st as being in a lisp lineage
[06:53:24] <mfiano> Curious, could anyone here give me an idea of how to do something trivial in elisp? I wish I knew it as well as I know CL :(
[06:54:05] <mfiano> Wondering why assq and friends don't accept a key function as an argument. I'd like to delete the whole bufler-workspace-mode list from this variable: https://gist.github.com/mfiano/59d4977702e47f3debdb4810f93a0adc
[06:54:06] -ixelp- *ielm*.txt · GitHub
[06:54:15] <Lycurgus> if lisp lineage means a tree starting with ipl and having clojure and stuff as leaves
[06:56:42] <vms14> pony
[06:56:42] <Bakerposting> OMG!! Ponies!!!
[06:56:52] <vms14> its fast
[06:56:54] <hayley> Bakerposting: what do I do about Jon Blow in CCC
[06:56:54] <Bakerposting> However, the efficiency impact of this freedom is normally quite severe. (CONS Should not CONS its Arguments, or, a Lazy Alloc is a Smart Alloc <https://plover.com/~mjd/misc/hbaker-archive/LazyAlloc.html>)
[06:56:55] -ixelp- ACM Sigplan Notices 27, 3 (Mar 1992), 24-34.
[06:57:24] <vms14> pony pony pony
[06:57:24] <Bakerposting> OMG!! Ponies!!!
[06:57:26] <vms14> meh
[06:57:56] <vms14> the pony is on the table
[06:57:57] <Bakerposting> OMG!! Ponies!!!
[06:58:20] <vms14> Bakerposting: the cat is on the table
[06:58:21] <Bakerposting> The result of this complex computation, however, would still not be minimal. (The Nimble Type Inferencer for Common Lisp-84 <https://plover.com/~mjd/misc/hbaker-archive/TInference.html>)
[06:58:22] -ixelp- The Nimble Type Inferencer for Common Lisp-84
[06:58:47] <vms14> Bakerposting: meh
[06:58:47] <Bakerposting> To avoid the overhead of array bounds checking in those compilers which do not perform the analysis, the user must turn off all array bounds checking. (The Nimble Type Inferencer for Common Lisp-84 <https://plover.com/~mjd/misc/hbaker-archive/TInference.html>)
[06:58:48] -ixelp- The Nimble Type Inferencer for Common Lisp-84
[06:59:08] <vms14> Bakerposting: change the link bro
[06:59:08] <Bakerposting> 4.  Bennett, C.H.  Logical reversibility of computation.  IBM J. Res.  Develop.  17 (1973), 525. (List Processing in Real Time on a Serial Computer <https://plover.com/~mjd/misc/hbaker-archive/RealTimeGC.html>)
[06:59:09] -ixelp- Comm. of the ACM 21, 4 (April 1978), 280-294.
[06:59:13] <vms14> oh he did
[06:59:15] <vms14> lol
[07:00:46] * hayley is bored again
[07:01:06] <vms14> learn forth
[07:01:42] <vms14> actually you could make the bot to try answer related stuff you ask to it
[07:01:53] <hayley> /how-about [ no ] def
[07:02:17] <hayley> Yes, I tried generating machine learning models from the articles. Not too amusing.
[07:02:19] <vms14> and add random functionality
[07:02:36] <Lycurgus> http://meansofproduction.biz/history also has st self rooted
[07:02:38] -ixelp- Computer Languages History (preview)
[07:02:41] <vms14> Bakerposting: tell me about lisp
[07:02:42] <Bakerposting> Therefore, these objects are not "first-class". (CONS Should not CONS its Arguments, or, a Lazy Alloc is a Smart Alloc <https://plover.com/~mjd/misc/hbaker-archive/LazyAlloc.html>)
[07:02:43] -ixelp- ACM Sigplan Notices 27, 3 (Mar 1992), 24-34.
[07:03:04] <vms14> and to troll people
[07:03:23] <vms14> actually a troll bot is funnier, maybe gets rid of your boredom
[07:03:57] <|3b|> mfiano: that doesn't look like the key of an alist, but cl-delete has :key if you want to work around that
[07:04:17] <mfiano>   (:hide-mode bufler-workspace-mode)
[07:04:19] <vms14> and btw your code wasn't forth, but postscript
[07:04:20] <mfiano> oops
[07:04:24] * |3b| usually just looks for cl-compatibility functions when i want to do something in elisp :p
[07:04:54] <mfiano> |3b|: I did this because I am not sure if cl-delete has the same semantics as CL's: (setq mode-line-misc-info (cl-remove 'bufler-workspace-mode mode-line-misc-info :key (lambda (x) (car (ensure-list (car x))))))
[07:05:15] <vms14> well a mix of two it seems
[07:05:49] <vms14> ah no, just postscript
[07:05:50] <|3b|> yeah, [cl-]remove is probably a better choice in either language :)
[07:05:58] <mfiano> |3b|: That seems to be the consensus in #emacs too
[07:06:07] <mfiano> TIL. I am not an elisp person by any means.
[07:06:43] <hayley> "You're gonna pay for that table size whenever the garbage collector runs, right?" - Jon "No." - Cliff "No?" - Jon "No." - Cliff
[07:06:45] <vms14> mfiano: lispers aren't elisp people, usually
[07:07:08] <vms14> maybe schemers do
[07:07:24] <mfiano> Except for those people that crank out hundreds of elisp packages.
[07:07:37] <moon-child> hayley: lol
[07:07:42] <moon-child> timestamp?
[07:07:47] <vms14> but it will be never cl even if you use cl packages
[07:07:53] <moon-child> I don't wanna watch the whole thing but I'd watch that
[07:07:56] <vms14> just a cheap copy
[07:08:01] <hayley> https://youtu.be/nUJuEdpy2aY?t=1255
[07:08:02] -ixelp- Coffee Compiler Club, 2022_03_04 - YouTube
[07:08:38] <vms14> and I think you'll always get disappointed if you try to believe elisp can be cl
[07:09:17] <mfiano> Blow likes to listen to himself talk until he is convinced the garbage coming out of his mouth is true.
[07:09:36] <mfiano> I will not watch that video
[07:10:03] <hayley> idk, Cliff schools him around the start on GCs and hash tables.
[07:10:09] <vms14> Bakerposting: pony
[07:10:09] <Bakerposting> OMG!! Ponies!!!
[07:10:10] <Bakerposting> Carnot's theorem tells us that work (available energy) can be produced from heat (energy+randomness), by removing the randomness into a cooler reservoir. (NREVERSAL of Fortune[1] -- The Thermodynamics of Garbage Collection <https://plover.com/~mjd/misc/hbaker-archive/ReverseGC.html>)
[07:10:11] -ixelp- NREVERSAL of Fortune
[07:10:13] <vms14> oh
[07:10:21] *** Quits: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340) (Ping timeout: 245 seconds)
[07:10:34] <|3b|> (common) lispers are probably a bit more elisper than average over all programming languages, from a combination of probably using slime, not being completely turned off by the syntax, and probably expectation of modifying the language extends to modifying tools as well
[07:11:03] <|3b|> elisp not being whatever real lisp they like probably keeps that from being all that much more than the average though :)
[07:11:13] <vms14> yes we have defun
[07:11:15] <vms14> xD
[07:12:00] <mfiano> |3b|: well name another separate namespace for function lisp (I don't like the Lisp-2 term that Schemers throw around)
[07:12:47] <|3b|> mfiano: ?
[07:12:48] <vms14> that remembers now I'm in debian so I could use some cl emacs
[07:13:17] * |3b| failed to parse, not sure if i missed context or just not awake enough
[07:13:50] <Lycurgus> 'Blow'?
[07:13:51] <mfiano> |3b|: I just mean the common lispers are going to be more acquainted with elisp than other lispers because of the (function symbol) aspect, among others.
[07:14:05] <vms14> https://github.com/robert-strandh/Second-Climacs
[07:14:06] -ixelp- GitHub - robert-strandh/Second-Climacs: Version 2 of the Climacs text editor.
[07:14:54] <Lycurgus> https://en.wikipedia.org/wiki/Jonathan_Blow i take it
[07:15:10] <|3b|> ah, yeah, it varies across lisps too, but i'd still expect users of non-CL lisps to be a bit above other styles of languages
[07:15:18] <hayley> Yes, that fuckwad went to the last Coffee Compiler Club to talk about hash tables, and got schooled.
[07:15:54] * hayley not sure when mfiano also got an allergy to Blow talks.
[07:15:56] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca) (Remote host closed the connection)
[07:16:00] <mfiano> hayley: No surprise there. He should stick to spouting nonsense on his own streams.
[07:16:23] <hayley> Pity, my CCC shirt is probably stuck in the mail by now.
[07:16:33] <mfiano> I used to enjoy listening to his talks until it got monotonous and I spotted all the bullshit
[07:16:58] <mfiano> I do not like listening to him talk at all. Schooled or not.
[07:17:56] <mfiano> when? maybe 2-3 years ago?
[07:18:07] <vms14> did you try some cl emacs?
[07:18:10] <vms14> like hemlock
[07:18:28] <hayley> The CCL IDE was fine.
[07:19:34] <hayley> Pro-tip: don't try to school Cliff Click on GCs or fast hash tables.
[07:19:41] <hayley> s/school/outsmart
[07:22:56] * hayley reads Wikipedia out of boredom
[07:23:13] <hayley> "Blow felt it would be possible to create a new programming language for game development which would increase programming efficiency [compared to C++?] by at least 20%" Only 20%? Granted, he will manage to get less than 20% somehow.
[07:24:16] <hayley> "Blow has noted that no previous programming languages have debuted with a piece of software in that language as large and complex as a game" Very funny. Lisp Machine Lisp and the lispm would be an even less funny language and product combination, of course.
[07:24:39] <hayley> "a target compilation rate of a million lines of Jai per second for a clean non-optimized build" He intends to optimise...anything?
[07:25:25] <moon-child> no interactivity, remember?  These are but pale imitations ...
[07:25:39] <hayley> Fuck, we should be making fun of this instead of V now.
[07:26:51] <hayley> moon-child: Unfortunately, I'm probably more than 20% more productive in Java than C++. But I guess the former doesn't work unless your video game is the best selling one of all time.
[07:29:58] <|3b|> programmer productivity is tiny fraction of modern games anyway :/
[07:32:11] *** Parts: vms14 (~user@29.red-79-153-202.dynamicip.rima-tde.net) (ERC (IRC client for Emacs 27.1))
[07:37:22] *** Common-Lisp is now known as Guest8728
[07:49:44] *** Joins: semz_ (~semz@user/semz)
[07:51:23] <hayley> moon-child: I'd also like to know where 1MLOC/s of compilation speed will come from. As semi-recent quips in #sicl indicate, you don't even have an easy road ahead if you have a low-level language.
[07:52:08] <hayley> Also from #sicl, which lead to it: <mfiano> I am just glad hayley didn't join John Blow's compiler club.
[07:52:09] <hayley> Good job.
[07:52:18] *** Quits: semz (~semz@user/semz) (Ping timeout: 250 seconds)
[07:52:43] <moon-child> what quips?
[07:52:54] <moon-child> fwiw tcc gets close to 1mloc/s
[07:53:12] <hayley> "But, if the participants in such a meeting think that they are designing a language that is "close to the metal", like C, then they should have no problems whatsoever writing a compiler which is competitive with the best available. Right?" "<beach> Yeah right!"
[07:53:49] <hayley> I assume one wants better code than tcc generates, still. It was something like gcc -O1 IIRC?
[07:54:13] <moon-child> oh, whelp
[07:54:17] <moon-child> yeah, good luck with that
[07:54:35] <moon-child> (though I can see it, maybe, if you take advantage of multicores.  But that's not 'simple' enough, right?)
[07:55:12] <|3b|> needs GPUs obviously :)
[07:55:20] <hayley> I would accept, say, using make to drive multiple compilers running in parallel for such a definition. Why do you have a 1MLOC source file?
[07:55:45] * moon-child hands |3b| a data parallel compiler
[07:55:49] <moon-child> hayley: 'unity builds'?
[07:55:54] <hayley> But then I don't know how much a factor of 64 (let's say) helps things.
[07:56:06] <hayley> moon-child: thanks I hate it
[07:56:14] <|3b|> also, a compiler that enforces { and } on lines by themselves, long library names and enforced 80 column limit
[07:56:27] <|3b|> stuff like that would help your loc/sec numbers
[07:56:45] <|3b|> moon-child: exactly
[07:56:49] <hayley> ge.applied-langua.decentralise2.core.system.standard-system:update-system-for-new-interesting-object-p
[07:56:55] <moon-child> (cf https://scholarworks.iu.edu/dspace/handle/2022/24749)
[07:57:03] <hayley> s/-p/-predicate/
[07:57:27] <moon-child> > ge.applied-langua
[07:57:29] <moon-child> tihi
[07:57:40] <hayley> Yes, the domain hack only works the right way around.
[07:57:51] <hayley> Hence why we don't put out Java code :)
[07:58:16] <moon-child> I think pjb uses those sorts of package names
[07:58:22] <moon-child> com.informatimago.some-such
[07:58:57] <|3b|> yeah, that style isn't too uncommon, and is even somewhat reasonable now that local nicknames are common
[07:59:03] <hayley> Yes, that also is excluded.
[08:00:34] <hayley> I guess I haven't done many LOC/s tests, but it can get hairy when you have super-linear algorithms in the compiler. So you just pick a real codebase?
[08:00:51] <hayley> ..and use that to test, rather than synthetic benchmarks (i.e. not writing "print(42)" 1e6 times into a file.)
[08:01:22] <moon-child> I measured tcc perf using s7 scheme, which is 100k loc or so
[08:18:41] *** Quits: Lycurgus (~juan@98.4.112.204) (Quit: Exeunt)
[09:09:10] <kakuhen> TIL that SLY obscures error messages of SBCL
[09:09:27] <kakuhen> my flac decoder had undefined behavor and compiles fine on ccl and ecl
[09:09:41] <kakuhen> but it violates some package-lock thing on sbcl and the repl refers me to clhs 11.1.2.1.2
[09:09:59] <kakuhen> but sly doesnt ever print this reference
[09:44:22] <hayley> https://twitter.com/krisnova/status/1500590779047170048
[09:45:23] <hayley> Seems like a mistranslation.
[09:45:25] <moon-child> 'Age-restricted adult content.  This content might not be appropriate for everyone.  To view this media, you’ll need to add your birthdate to your profile.  Twitter also uses your age to show more relevant content, including ads'
[09:46:13] <hayley> Seriously?
[09:46:34] <moon-child> yep
[09:46:41] <moon-child> and I even deign to hold an account with them at all...
[09:47:04] <hayley> It is a picture of some Russian official document, which apparently means that the Russian internet is getting cut out of the rest. But it may also be a mistranslation, and it just states that Russian official sites should be on Russian hardware.
[09:58:30] <robin> that translation formatting is bizarre, also they don't mention .рф (although according to google the punycode TLD is far less popular)
[10:01:26] <robin> (also, "valid from may 2021 to august 2022" seems odd)
[10:06:28] * hayley still feels stupid with "The wise one" role on student Discord server
[10:11:21] <robin> (and "public resource" is ambiguous, it occurred to me that it could refer to government websites which matches @shakirov2036's claim in the comments)
[10:15:13] <moon-child> (btw I misread an earlier message; tcc does not match gcc -O1.  In fact, it's worse than gcc -O0)
[10:15:38] <moon-child> (there was a (neglected) series of patches that aimed to improve performance on i386, bringing it close to par with gcc -O0)
[10:17:29] <robin> also noteworthy that cogent depeered with russia in the last few days (voluntarily? i don't think US sanctions so far would require it)
[10:22:03] *** semz_ is now known as semz
[10:24:18] <robin> mfiano, re: elisp assq, i don't know why there isn't a cl-assq, but cl-assoc exists and supports :test and :key
[10:28:20] <kakuhen> is there a function like NCONC but for vector?
[10:28:38] <kakuhen> or should I just cope with (setf some-vector (concatenate 'vector some-vector other-vector))
[10:30:24] <semz> You could make a modify macro, but consider that NCONC destructively modifies the list, whereas your concatenate pattern (and a theoretical modify macro) only changes the place.
[10:30:51] <kakuhen> maybe what I want is the vector-push-extend function
[10:31:06] <kakuhen> so i have an object with a slot, which is supposed to be a vector of (signed-byte 32)
[10:31:30] <kakuhen> and i think what i can do is initialize the slot as a vector that's adjustable and with fill pointer
[10:31:42] <kakuhen> then it seems that vector-push-extend will do what i want
[10:31:54] <semz> Also obligatory "appending in a loop is O(n²)" reminder goes here, if the vectors are large it might be better to collect them into a list and then concatenate them all in one go.
[10:37:09] <moon-child> you can do in-place extend
[10:43:46] <hayley> Often it's better to make a list of vector chunks, then do the concatenation once you've finished your list.
[10:44:27] <hayley> e.g. https://gitlab.com/cal-coop/netfarm/netfarm/-/blob/master/Code/Binary-format/fasterer-output.lisp - by the name, it is faster than fast-io IIRC
[10:44:28] -ixelp- Code/Binary-format/fasterer-output.lisp · master · Cooperative of Applied Language / The Netfarm Suite / Netfarm · GitLa [...]
[10:45:47] <dave0> fasterer is hard to pronounce
[10:48:08] <hayley> "I think 9front's way of managing the project is something a lot of people can learn from, because they've basically done a lot to create an insular culture/community that is designed to be antagonistic to idiot wreckers astroturfing it for lowest-common denominator users who don't understand or care about the goals of the project"
[10:48:12] <hayley> Any thoughts on that?
[10:48:20] <hayley> dave0: fast-er-er
[10:48:54] <moon-child> well, is this for an array or a list?
[10:49:01] <dave0> hayley: i roll on the r's
[10:49:04] <moon-child> because for an array, exponential cap expansion amortizes to O(1)
[10:49:21] <moon-child> so no reason not to combine immediately
[10:51:01] <hayley> Our algorithms teacher tried to argue why "search a N × N array for a value" that we should be counting a linear search as O(N)...somehow.
[10:52:04] <moon-child> :<
[10:52:16] <hayley> Such an algorithm doesn't care for the actual shape of the array, let alone that it's square. So having N = elements, given that's what we are comparing even, seems less insane to me.
[10:55:41] <dave0> you could use N processors
[10:55:59] <hayley> O(N^2) work is still done, though your latency is O(N).
[10:56:20] <hayley> Steele would say something like that for his talks on parallel computing.
[10:56:37] <mfiano> It's kind of funny discovering the consensus is that elisp is horrible without the cl-* functions from everyone I've talked to. Funny because I remember RMS was very anti-CL back in the day and went out of his way to make sure elisp didn't resemble it at all. Now, you can't get anything done without the cloned functionality it seems, as even some builtin Emacs modules use the cl-* functionality
[10:56:39] <mfiano> quite heavily.
[10:57:55] <ck_> that whole lucid-emacs thread comes to mind again
[10:58:30] <mfiano> summary?
[10:59:10] <semz> Why was RMS so anti-CL?
[10:59:37] <ck_> lucid emacs, xemacs, they came to be because of a quarrel and the resulting failed cooperation between lucid inc and the fsf
[11:00:13] <mfiano> Ah
[11:00:50] <ck_> mfiano: read this
[11:00:51] <ck_> https://www.jwz.org/doc/lemacs.html
[11:01:41] <robin> i'm hoping to have real cl in emacs someday via guile
[11:01:52] <moon-child> cl via ... guile?
[11:02:02] <robin> ...which only requires cl support in guile first, a mere SMOP
[11:02:07] <robin> moon-child, and guile-emacs
[11:05:08] <robin> so far there's, uh, a reader and lambda list parser. 1/24 of a CL implementation! ;)
[11:10:00] *** Joins: Lycurgus (~juan@98.4.112.204)
[11:11:00] <hayley> https://www.youtube.com/watch?v=9JinSfCKuNQ
[11:11:01] -ixelp- eXtReMe iSoLaTiOn ( Low Leakage Power in Precision Electronics ) - YouTube
[11:12:12] *** Quits: vats (~vats@103.216.143.6) (Ping timeout: 240 seconds)
[11:12:31] <recordgroovy> I remember going through jwz's site from his Tent of Doom page and his link on why RMS is anti-cooperative is an audio file of him singing the free software song
[11:13:51] <ck_> yeah
[11:14:02] <ck_> o/~ join us now and free the so-hoft-ware o/~
[11:17:19] <ck_> the lucid chorus would probably have been "we would if you'd let us"
[11:18:06] <recordgroovy> that's not good, hackers, that's not goo-oo-o-od
[11:18:15] * hayley spots the PostgreSQL logo used in a gmod map, for an "elephant land" ad.
[11:20:50] <kakuhen> that reminds me someone online spotted a truck using the GNU logo
[11:22:29] <kakuhen> https://z.zz.fo/91Pbg.jpg
[11:23:02] <dave0> !tld fo
[11:23:21] <kakuhen> faroe islands i think
[11:23:26] <mfiano> that thread shows rms as more of a sociopath than i thought
[11:24:07] <dave0> i hope jaks trucking uses the gpl
[11:24:24] <kakuhen> GPL-3.0 with Font Exception 2.0
[11:25:42] <edgar-rft> kakuhen: of course they use GPL -> https://i2.wp.com/www.mulherportuguesa.com/wp-content/uploads/2016/10/GPL.png
[11:29:31] <kakuhen> nice...
[11:29:40] <robin> free as in freedom, not as in gasoline
[11:30:28] <edgar-rft> my CAR prefers gasoline
[11:30:46] <kakuhen> my CDR prefers no gasoline
[11:32:00] <hayley> https://www.youtube.com/watch?v=IqzKOOa8gh0
[11:32:01] -ixelp- Cars (Live 79) - YouTube
[11:32:12] <hayley> "Here in my car, when the image breaks down, will you visit me please, if I open my door?"
[11:33:03] * edgar-rft didn't know that cars were alive
[11:33:20] <dave0> oh it's live
[11:33:23] <kakuhen> cant tell if i got a bad encode of a tv show or if the camermen became very lazy for a darkly lit scene
[11:33:25] <dave0> i like the studio version
[11:35:42] <Lycurgus> 'member my mother the?
[11:36:37] <Lycurgus> always female, e.g. Christine
[11:37:37] <Lycurgus> not sure what's goin in Titane, didn like it so didn watch much but it got good reviews for whatever that's worth
[11:38:24] *** Quits: minion (~minion@common-lisp.net) (Remote host closed the connection)
[11:39:18] <hayley> Bakerposting: foo
[11:39:19] <Bakerposting> Similarly, remove-duplicates and substitute return copies of their input bit-vectors, except that the subsequence indicated has been modified in the appropriate way. (Efficient Implementation of Bit-vector Operations in Common Lisp <https://plover.com/~mjd/misc/hbaker-archive/Bitvectors.html>)
[11:39:20] -ixelp- ACM Lisp Pointers 3, 2-4 (Apr/Jun 1990), 8-22.
[11:39:25] <hayley> Hey, it's still connected.
[11:39:48] *** Joins: minion (~minion@common-lisp.net)
[11:40:15] <hayley> I like how remove-duplicates on a bit vector can only ever be in #* #*0 #*1 #*10 #*01
[11:58:04] *** Quits: Lycurgus (~juan@98.4.112.204) (Quit: Exeunt)
[12:01:08] <hayley> .oO("Btw im interested in your project because it looks like its the only Lisp implementation that actually generates DFAs." Wait until you hear that this is the only implementation ever that generates correct machines for POSIX submatching.)
[12:01:23] <hayley> .oO(Excluding clex2, sure, but you can't get that unless you're me.)
[12:02:18] *** Joins: mgl (~mgl@cpc87455-finc19-2-0-cust234.4-2.cable.virginm.net)
[12:09:07] <kakuhen> so the show i am watching is usually 1 hour long
[12:09:23] <kakuhen> and i was wondering "how do you force an hour of content if someone's score becomes negative?"
[12:09:40] <kakuhen> the show is a mahjong show and usually game ends if someone gets negative score
[12:09:51] <kakuhen> well, some person suddenly went to -9000 and the staff decided to be very generous
[12:09:58] <kakuhen> that's one way of forcing an hour of content i guess hehe
[12:10:30] <kakuhen> in short, staff is giving them until the end of all east rounds to get back to at least 0 or else game ends; presumably some parts will be scripted so that he can satisfy the condition lol
[12:13:47] <moon-child> isn't the whole thing scripted?
[12:15:10] <kakuhen> sure, but rigging an automatic table takes effort
[12:15:32] <kakuhen> ...it shows considering they are using very non-standard rule for negative scores right now
[12:16:01] <kakuhen> with that said, there is a way to rig the shuffles of an automatic table, you just need to disassemble half the table and be very careful in placing tiles
[12:17:09] <kakuhen> i recall seeing a video on niconico where some university student did this before inviting his friends to play mahjong, it's pretty old but i should be able to find it if i tried
[12:17:36] <kakuhen> as a prank he intentionally shubbed in a 5th tile to the pool and made one of his friend's hands very very close to completion
[12:18:25] <kakuhen> then see chaos unfold as someone claims a win, has 4 tiles of a certain type, but someone else has a 5th tile
[12:19:57] <dave0> read 'em and weep... 5 queens... not so fast! ... 6 queens
[12:20:51] <kakuhen> wait, the duration of the show and the current round already spoils the ending for me :(
[12:21:10] <kakuhen> 7 minutes left, still no south rounds in sight... the guy with negative score is definitely staying that way
[12:23:14] *** Joins: shka (~herr@109.231.3.55)
[12:31:22] <robin> does anyone (perhaps hayley) recall a research project about..."tree regular expressions" or "tagged regular expressions" or something that would return something closer to a parse tree rather than using numbered submatches?
[12:32:24] <hayley> I think there are "parsing expression grammars" or PEGs.
[12:32:43] <robin> i wrote a few thousands of lines of coq verifying their research and also discovered that some scheme implementers (in the early 90s, maybe?) had come up with basically the same idea, for number parsing, which is exactly what i wanted it for :)
[12:32:59] <hayley> But a parse tree rather than numbered submatches would be interface stuff, I think, as long as the grammar is still regular.
[12:33:48] <robin> nah, these were mostly ordinary regular expressions, except it'd be simpler for nested submatches and so on
[12:33:55] <robin> pegs are cool, though
[12:34:31] <hayley> gilberth also allows his matching macro to have named macros, e.g. (with-match (:seq (= left (:* (:range #\0 #\9))) #. (= right ...) (:optional (= marker (:or #\d #\D #\e #\E ...)) ...)) ...)
[12:34:50] <hayley> s/named macros/named matches/
[12:35:03] <hayley> I don't remember the syntax. I try to avoid reading clex2.lisp to avoid getting sued, clearly.
[12:35:32] <robin> yeah, that's basically what i was thinking of
[12:36:31] <hayley> I don't have it, cause one-more-re-nightmare has no S-expression syntax, nor any user-facing way to produce named submatches rather than numbered. But the compiler theoretically can take in any ol' names for registers.
[12:37:50] <robin> hm, that could probably be made to work
[12:38:31] <robin> or i could just use an enormous, nigh-incomprehensible handwritten number parser like sbcl (and presumably most CLs)
[12:39:33] <hayley> May I ask, what differed to warrant a new proof? It just seems like another way of providing the same registers to the user to me.
[12:43:57] <hayley> There's also Baker's META in CL <https://plover.com/~mjd/misc/hbaker-archive/Prag-Parse.html>
[12:43:58] -ixelp- ACM Lisp Pointers 4, 2 (Apr/Jun 1991), 3-15.
[12:44:08] <robin> oh, nothing in particular, i was just learning coq and it was fun
[12:44:26] <hayley> Okay, fair enough then. I worried there was something else I missed.
[12:49:21] <robin> the schemers' paper is probably what i should be working from, but i'll be damned if i can find it with a search engine (garbage results for scheme + all subsets of {regular expressions,submatches,number parsing,floating point})
[12:49:51] <robin> i'll probably find it in an old firefox bookmarks database or something
[12:50:57] <robin> rip readscheme.org
[12:58:33] *** Joins: random-nick (~random-ni@87.116.176.196)
[13:02:26] <robin> and of course i immediately find it, hooray (http://scheme2006.cs.uchicago.edu/14-dube.pdf + https://www.iro.umontreal.ca/~feeley/papers/DubeFeeleyACTAINFORMATICA00.pdf)
[13:05:31] <robin> (though 2006 is a bit late for the "early 90s")
[13:07:40] <hayley> "The main problem is that, when a tagged sub-expression lies inside of a repetition operators (or inside of what is sometimes called a non-linear context) and this sub-expression matches many different parts of a given lexeme, only one of the sub-lexemes is reported. So extraction by tagging starts to become ineffective exactly in the situations where the difficulty or the sophistication of the extraction would make automated extraction most
[13:07:40] <hayley> interesting." That POSIX and PCRE semantics pick the wrong submatch somehow, or that Laurikari loses when loops are involved?
[13:09:23] <hayley> "The original META paper [Schorre64] gives such a compiler for "BNF"-style syntax equations, which we previously implemented (1966) in IBM 360 machine code." lol
[13:09:40] <hayley> "The code complexity of the resulting code is extremely high when measured by software engineering complexity metrics; "productivity", as measured by these metrics, thus goes off-scale." is also a great one-liner.
[13:20:15] <robin> lol
[13:22:29] <robin> "Note that this assumption precludes full minimization of the DFA. SILex
[13:22:29] <robin> currently does not try to minimize the DFA it builds. The assumption is sufficiently strong to ensure that paths through the NFA can be recovered but it may happen to be unnecessarily strong. More investigation should be made to find a sufficient and necessary condition on the conversion."
[13:22:37] <robin> now that might be worth figuring out
[13:23:32] <robin> the SILex paper is a bit critical of laurikari at the very end, but i don't remember the details of laurikari's thesis tbh
[13:24:58] <robin> "Ville Laurikari presents an efficient technique to extract sub-lexemes in a way that complies with the standard [11]. In our opinion, extraction by tagging is too restrictive. The main problem is that, when a tagged sub-expression lies inside of a repetition operators (or inside of what is sometimes called a non-linear context) and this sub-expression matches many different parts of a given lexeme, only one of the sub-lexemes is reported. So extraction by
[13:24:58] <robin> tagging starts to become ineffective exactly in the situations where the difficulty or the sophistication of the extraction would make automated extraction most interesting." hrm
[13:25:08] <hayley> gilberth and I can't find a non-broken Laurikari implementation, and it's provable that it can't produce the right results for matching POSIX (a+aa)* on "aaaaa..."
[13:25:48] <hayley> I think the trick was that NFA→DFA conversion has to decide which tag assignments to keep, but Laurikari uses a "tag priority" scheme which can't be self-consistent.
[13:26:10] <hayley> https://github.com/telekons/one-more-re-nightmare/blob/master/Tests/tests.lisp is my little museum of RE horrors.
[13:26:11] -ixelp- one-more-re-nightmare/tests.lisp at master · telekons/one-more-re-nightmare · GitHub
[13:26:29] <robin> ["the standard" = posix of course]
[13:38:25] <robin> i'll see if i can donate an exhibit for CL numbers :p
[13:40:48] <hayley> https://www.youtube.com/watch?v=Wsni1xUVdXs
[13:40:48] -ixelp- Pink Floyd - On the Run - Analog synthesizer cover - YouTube
[13:42:08] *** Joins: rotateq (~user@ip-078-094-235-194.um19.pools.vodafone-ip.de)
[13:47:40] <hayley> pony
[13:47:40] <Bakerposting> OMG!! Ponies!!!
[13:48:26] *** Joins: treflip (~user@user/treflip)
[13:50:23] <dave0> 'my little' or 'rainbow' ?
[13:50:44] <rotateq> oh noez
[13:50:47] <hayley> The former, I guess.
[13:50:53] <rotateq> hayley: the language?
[13:51:01] <hayley> Definitely not the language.
[13:51:10] <hayley> dave0: https://www.youtube.com/watch?t=822&v=MYQL1zp-zco
[13:51:11] -ixelp- My Little Pony: Friendship Is Magic Season 1 Episode 4 Applebuck Season - YouTube
[13:52:02] <rotateq> okay i joined just some minutes ago :D
[13:52:23] <hayley> "Stop the shakin', it's time to get Bakin'!" - Pinkie Pie
[13:52:35] <dave0> oh dear god
[13:55:14] <gilberth> Well, one thing is: Laurikari's thesis cannot work. That easy to show once you realized that. This is about disambiguation of different matches. Like in the trivial example (a*)(a*) matched against "aa", there are three different solutions namely "()(aa)", "(a)(a)", and "(aa)()". You have to pick the right one according to the semantics you defined. POSIX has semantics different from PCRE here.
[13:55:42] *** Parts: treflip (~user@user/treflip) (ERC (IRC client for Emacs 27.2))
[13:57:35] <gilberth> The other, which is what robin may refer to, is that submatch addressing addresses a submatch but does not construct a sequence or something. And within iterations it's the last match which is reported as submatch. E.g. with (a|b)* matched to "aab", the whole string is matched but only "b" is reported as \1, while you might want to have sth. like the sequence ("a" "a" "b") as the match for \1.
[13:58:54] <gilberth> However, to have the latter is trivial with my algorithm, if you really wished.
[13:59:52] * hayley reads the GC Handbook on coelasced reference counting
[14:00:07] <gilberth> However traditionally with scanners you deal with that differently by using different start conditions like with lex(1).
[14:00:25] <hayley> This "dirty" bitmap, and also the log, remind me of the write barrier in a concurrent tracing GC. Hm.
[14:01:33] <moon-child> haha
[14:02:19] <moon-child> apparently pl people did an apl implementation ('tail'), and separated out catenate into three functions: cat, which joins two arrays of equal rank, cons, which joins a low-rank ⍺ to high-rank ⍵, and snoc, which joins a high-rank ⍺ to low-rank ⍵
[14:02:50] <hayley> n.b. the comparison is inevitable, as a naive mark sweep marks the live stuff in one go, and a naive refcounter frees all the dead stuff in one go.
[14:02:54] <gilberth> Anyhow, it's dealing with this ambiguous grammars according to your semantics using an DFA what this is all about.
[14:05:13] <hayley> But I seem to not understand why coalescing is a good idea. Oh well.
[14:05:43] <robin> hayley, i'm reading it too, ^5 going to write some toy collectors for benchmarking (and hopefully immix eventually)
[14:06:11] <hayley> (Other than storing changes in a local log will use fewer atomics, and thus stall less, compared to atomically updating the refcount.)
[14:08:47] <hayley> robin: Eventually I want to do something like ulterior RC or RCImmix for the old generation in Zero Feet. It seems like a decent way to recover memory from an old generation, more promptly than a concurrent tracing GC, without all the lossage from naive RC.
[14:09:56] <hayley> Steve Blackburn has also been very kind to me, which also biases things. "things" also including porting MMTk for SBCL, which I haven't really found anyone else wanting yet ):
[14:10:40] * robin looks up 'ulterior rc'
[14:11:40] <hayley> Roughly a generational GC, wherein you use copying for the nursery, and deferred reference counting for the old generation.
[14:11:46] <robin> hayley, what's involved in porting mmtk for sbcl (at a high level)? reimplementing it in lisp or c?
[14:12:24] <robin> spritely goblins (E in scheme, basically) has distributed garbage collection which is probably a fun problem
[14:12:29] <hayley> For some reason, MMTk people think "porting" means "making this language implementation work with MMTk".
[14:13:33] <hayley> .oO(King of the Hill: "You're not making distributed object systems better, you're just making fedi weenies worse")
[14:14:18] <robin> lol
[14:14:28] <hayley> But I digress; it's a bit like MPS, where I need to teach MMTk how to read SBCL objects. SBCL's allocation VOPs would also have to be fixed to use MMTk's allocation buffers. We need to manage something for SAVE-LISP-AND-DIE too, I guess.
[14:15:17] <robin> ah, so it'd involve adapting the rust version
[14:15:32] <hayley> Conservative stack scanning and weak reference processing are still being worked on, but I'd be fine putting in elbow grease for that. IIRC with Immix, conservatively referenced objects just have to be opted out of defragmentation.
[14:16:27] <hayley> Right. But all the ports I've found basically punt out to C functions as soon as possible (think impl BlaBla { fn do_something(self) { unsafe { VM::lol_doing_it_in_c(); } } })
[14:21:45] <hayley> However, so far I know that the MMTk idea of allocation buffers and that of SBCL don't quite work. SBCL wants the structure representing buffers to be small, so that it can emit a MOV Rm, [Rn + N] with single-byte displacement N. But MMTk has a god struct with every buffer you could ever want for any GC. I only intend to use the Immix buffers, but MMTk makes me keep space around for mark-compact, large object space (which I don't care for making
[14:21:45] <hayley> fast, they're large objects), ...
[14:23:04] <hayley> Here: https://github.com/mmtk/mmtk-core/blob/master/src/util/alloc/allocators.rs#L15-L31
[14:23:05] -ixelp- mmtk-core/allocators.rs at master · mmtk/mmtk-core · GitHub
[14:23:41] <hayley> I don't care for having another 6 bump pointer allocators, 2 large object allocators, 1 malloc allocator, and another mark-compact. I just want that one Immix allocator. sigh
[14:29:41] <hayley> ...worse, I'd like to keep doing what SBCL does and segregate objects with pointers from objects with no pointers (e.g. unboxed arrays).
[14:30:19] <hayley> That requires having two allocators. So IMO there's a case that Allocators should be more flexible.
[14:30:51] *** Joins: rogersm (~rogersm@90.166.180.250)
[14:31:54] <robin> yeah, i'd assume that would be customizable (being a "tk" and all)
[14:32:55] <hayley> I'd be happy with a "the cooler MPS" at the end of the day, but the weekly porting meetings are actually in my timezone, so I'm taking the opportunity to make it nicer.
[14:33:12] <robin> guile's probably going to end up using immix (for the old generation at least, assuming generations are sitll a win), not sure if it'll be mmtk or a diy c collector though
[14:36:01] <robin> (i still want to dig into mps a bit to figure out how tricky concurrency would be...but it's not the cool new thing these days and rust does have some significant advantages)
[14:41:40] <robin> huh, gcc rust is alive again with a full-time developer, that could be interesting
[14:43:15] <hayley> drmeister wasn't too happy with MPS on Clasp with many threads, from memory.
[14:43:41] <hayley> The threads would contend on a free page lock, which ironically is how my parallel SBCL GC hack also failed.
[14:48:32] <random-nick> is gcc rust a rust compiler in gcc or is it just a gcc backend for rustc?
[14:49:20] <robin> gcc frontend for rust, rather
[14:50:42] <robin> so closer to a rust compiler in gcc i suppose
[14:52:42] <robin> would definitely benefit rust-in-linux efforts and make it more acceptable for gnu projects (guessing more people care about the former)
[14:53:10] <hayley> The latter is what they get for inventing elisp.
[14:55:31] <robin> give me a couple years, i'm building a big horse dedicated to athena
[14:58:06] <robin> (after having written guile-elisp, a pony dedicated to...uh...gazelles...i don't think this metaphor works)
[14:58:07] <Bakerposting> OMG!! Ponies!!!
[14:59:00] * hayley helps someone with the brain dead C++ style constraints at university.
[14:59:56] <hayley> "You could write the while loop as for, which sorta helps. Or use std::find...hm, no I'm one position off now, and what's a 100 character limit doing here...oh shit."
[15:01:41] <hayley> I suspect someone has a fixed size buffer. Oops.
[15:05:36] <robin> ooo beach's first-class environments paper is fascinating, that's sort of what i want to do for guile-cl except i haven't thought about performance yet
[15:06:20] <hayley> Apparently the homework is to implement READ-CHAR but signaling EOF by returning a boolean, and returning the character read by storing it at some pointer.
[15:07:09] <robin> i'm also trying to nudge the spritely folks towards CLOS (well, GOOPS, CLOS-in-scheme) instead of actors, strong sandboxing might be persuasive
[15:07:52] <robin> although i'd been thinking more along the lines of the 3-Lisp tower of languages model
[15:07:59] <hayley> I think the performance is decent; you "link" code to an environment, and then the code can just read a value cell. Call site optimisation can take it further (but that is orthogonal to FCGEs or not).
[15:11:12] <hayley> FCGEs are likely too coarse compared to object systems with access control (e.g. Java, Newspeak, though only the latter works for ocap).
[15:15:58] <pl> hayley: I wonder how to effectively do fast allocation with two allocators - thread-specific or global struct of two pointers (so they fit in one cache line and probably one bus transaction always)?
[15:16:05] <hayley> I'd like to nudge them to change careers to farming, but 3-Lispish would be an improvement. (IIRC they published a post saying blockchains were unnecessary if you indirectly use a centralised validator for spending...whoops!)
[15:16:40] <hayley> pl: IIRC gencgc has two thread local structs with start and end pointers for each.
[15:16:42] <robin> i'm thinking for lisp naive implementations of ocap "patterns" will be easy (thanks, lexical binding!) but the interesting part will be balancing security and expressiveness, particularly reflection
[15:17:08] <hayley> Newspeak has "mirrors" which allow you to restrict things.
[15:17:18] <hayley> *reflective things, as the name may suggest.
[15:17:47] <robin> hayley, who, spritely?
[15:17:52] <pl> hayley: ah, so checking against end pointer, vs. using barrier?
[15:18:14] <hayley> robin: Someone involved with Spritely.
[15:19:04] *** Quits: jeosol (~jeosol@user/jeosol) (Quit: Client closed)
[15:19:29] <hayley> pl: SBCL checks against an end pointer. I don't know how to use barriers for implicit checking in a block/page/region/whatever based collector, rather than two flat semispaces.
[15:20:10] <Gnuxie> sandboxing only gets you a subset of late binding. No you can't change my mind. 
[15:20:12] <pl> hayley: would need system page for granularity, but essentially do a write on allocation
[15:20:31] <hayley> Appel wrote of sticking a no-access page after each semispace, so that trying to allocate and initialize into it would trap. But I can't see protecting after arbitrary pages working out nicely.
[15:21:20] <pl> hayley: I was thinking of larger blocks of pointerful/nonpointerful spaces, with guard page after each block, and each block effectively serving as small generation
[15:21:25] <hayley> The other thing is that the branch would have to be slower than the OS handling the trap sometimes, which I don't think is likely (nor significant, honestly)
[15:21:36] <hayley> Ah, okay.
[15:21:54] <robin> ocap people tend to have awful politics (milton friedman quotes above the fold on your website? utterly misinterpreting the political economy of the past several centuries?), but internet-scale erlang-y software could be fairly interesting. i guess i think of it as "dual-use technology"
[15:21:57] <hayley> We might have to discuss this later, I'm tired.
[15:22:08] <Gnuxie> <robin> "i'm also trying to nudge the..." <- yeah but surely CLOS method dispatch is entirely at odds with E message passing though? 
[15:22:11] <pl> well, always can be done with both - fast branch, and page fault for handling errors
[15:22:31] <pl> robin: ocap?
[15:22:39] <pl> and yes, friedman is a red flag
[15:22:42] <robin> object capability security
[15:22:51] <hayley> I like the Erlang model slightly more, cause sends are uniform w.r.t having an actor on your machine, vs having an actor on another.
[15:23:17] <hayley> Whereas IIRC with E, you have synchronous send for actors in your vat, and async outside.
[15:23:28] <hayley> Gnuxie might remember it better than me.
[15:23:33] <Gnuxie> Yeah that's right 
[15:23:58] <Gnuxie> though you could argue it is consistent if you only use async messages (cos you can use async send in same vat)
[15:24:08] <robin> http://mumble.net/~jar/pubs/secureos/ is a good intro for lispers
[15:24:08] <hayley> But I want replication. "When do we want it?" "Eventually!"
[15:24:08] -ixelp- JAR Security Kernel
[15:24:41] <robin> (jar's w7 system which is a variant of scheme48, or the other way around, i forget)
[15:24:50] <robin> jonathan rees's, that is
[15:26:24] <robin> hayley, i've found that questionable too, spritely goblins has $ for in-vat sends, -> for out-of-vat, which is indeed very different from erlang
[15:26:53] <hayley> As Gnuxie said too, I don't know how to make generic functions work in a distributed object system. That's why Netfarm still uses a Smalltalk-ish message model.
[15:28:13] <hayley> (But messages are synchronous, and the VM provides the illusion that an object can send wherever it likes. It's like the distribution happens another way...which it does, and that's why I had to make up "replicated object system" for the paper.)
[15:28:42] <Gnuxie> The thing is you're supposedly supposed to only use async send if you want there to be no distinction. THough it is another discussion entirely on whether you think async message send is a good idea or not to begin with. 
[15:40:10] <robin> hm, i had some ideas about gf security after google ruined js bigints (-> WIBNI js had operator overloading to fix it), but haven't thought about the distributed programming part really
[15:40:41] <robin> which is probably the harder part
[15:41:15] * ck_ "tfw no gf"
[15:41:43] * ck_ .oO( --^ )
[15:43:33] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[15:43:57] <hayley> My generic function/girlfriend jokes didn't quite land on my ex too well.
[15:44:51] <dave0> a girlfriend would be nice sigh
[15:46:44] <Duuqnd> a generic function would be even better
[15:47:04] <hayley> Don't get a Haskell hacker as a girlfriend, else she will complain about purity and sex.
[15:47:27] <hayley> (This never actually happened, but I just thought of the kinds of "purity")
[15:48:39] <robin> yes, a haskeller probably wouldn't approve of regular unsafePerformIO
[15:49:48] <hayley> Things that did happen that are funny: - I got dumped indirectly because I suggested Don't Build Your Own Lisp to one of her friends who read the subject book
[15:50:38] <hayley> Things that did happen that are not funny: - I got my lovely theory and designs on managing distributed systems lobotomised for public consumption
[15:53:52] *** Joins: kevingal (~quassel@2001:770:c0:401:fd65:9425:6810:d58d)
[15:53:57] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca)
[15:54:46] <hayley> I don't recommend trying to get in a situation where either of those can occur. But despite the (usually) uncontroversial arguments in DBYOL, it had the worst reception by a very wide margin!
[15:58:01] <robin> yeah, yikes
[15:58:19] <robin> what d'you mean by "lobotomised for public consumption"?
[15:59:44] <hayley> What she came up with just seemed way worse, even though I had discussed with her on what I had made, and she seemed to like it.
[16:00:32] <robin> ah
[16:01:30] <hayley> It did have the upside of being an incremental improvement to a shitty environment, and I am not a popular writer as her. So it probably was more socially acceptable in the end. But #lispcafe isn't really my therapist.
[16:04:05] *** Quits: kevingal (~quassel@2001:770:c0:401:fd65:9425:6810:d58d) (Remote host closed the connection)
[16:09:24] <edgar-rft> I am a five year old psychotherapist. Please, describe your problems.
[16:10:40] <ck_> ☕️  ⏰
[16:11:15] <gilberth> edgar-rft: Does it bother you that you are five years old?
[16:11:38] <edgar-rft> gilberth: Is it because I am five years old that you came to me?
[16:11:56] <dave0> 🚬
[16:12:14] <gilberth> edgar-rft: Tell me more about psychotherapist.
[16:12:41] <edgar-rft> gilberth: Why do you say tell you more about psychotherapist?
[16:13:19] <gilberth> edgar-rft: You said you are five years old.
[16:13:46] <edgar-rft> gilberth: Earlier you said I am five years old?
[16:14:19] <gilberth> edgar-rft: That's the same rule I used. Is that why you came to me?
[16:14:41] <edgar-rft> gilberth: Does it bother you that why I came to you?
[16:15:05] <gilberth> SYNTAX ERROR
[16:15:19] * edgar-rft blames M-x doctor
[16:15:53] * ck_ searches "emacs doctor fixed point", is disappointed with the results
[16:17:00] <edgar-rft> in emacs the point is not fixed, otherwise you couldn't edit text
[16:17:42] <gilberth> You could move the buffer beneath the fixed point.
[16:18:25] <edgar-rft> I'll instantly suggest that on emacs-devel :-)
[16:19:41] <gilberth> Does it bother you that the point is not fixed?
[16:27:18] * semz once used M-x doctor as a trolling technique online, but quickly became the trolled one when he got people to regularly dump their life stories on him
[16:27:45] <selwyn> shka: https://www.nakedcapitalism.com/2022/03/america-shoots-its-own-dollar-empire-in-economic-attack-on-russia.html
[16:27:45] -ixelp- America Shoots Its Own Dollar Empire in Economic Attack on Russia | naked capitalism
[16:27:49] <selwyn> michael hudson speaks
[16:27:58] <shka> selwyn: yes, it is obvious
[16:28:18] <shka> as i said, this is the end of petrodollar world
[16:28:30] <shka> well, the covid also helped 
[16:28:39] <pjb> Closing SWIFT on Russia was a fatal error. Why did they do it?
[16:28:42] <pjb> Idiots.
[16:28:44] <shka> but, funny thing
[16:28:50] <shka> USA will be fine
[16:28:58] <pjb> Of course. EU will suffer.
[16:29:11] <pjb> more idiots so more suffering.
[16:31:58] <selwyn> shka: will they
[16:32:07] <shka> yeah
[16:32:36] <selwyn> what happens when the world doesn't need dollars to trade
[16:32:42] <kakuhen> > * <@ck_:libera.chat> searches "emacs doctor fixed point", is disappointed with the results
[16:32:42] <kakuhen> you cannot find fixed points in M-x doctor because repeating the same input will make the doctor grow tired of you and tell you to take a lesson in creative writing
[16:32:43] <kakuhen> genius design imo
[16:33:25] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Remote host closed the connection)
[16:33:47] <shka> selwyn: USA will have to reform, optimize their finance sector and become a productive nation again
[16:35:07] <shka> but they will be fine
[16:35:22] <shka> just not a global empire anymore
[16:35:34] <selwyn> join the club
[16:36:24] <shka> Hudson is also right that Russia will be fine in the long run
[16:36:46] <shka> in terms of decades 
[16:37:47] <shka> but in term of years? it is gonna be hard
[16:39:49] <selwyn> i thought about what you said yesterday
[16:40:07] <selwyn> and if america is hoping to buy oil from hated enemies iran and venezuela
[16:40:18] <selwyn> then the economic war is already starting badly
[16:40:31] <shka> selwyn: America is not buying oil anymore
[16:41:53] <shka> and Americans were buying oil from Venezuela before that 
[16:41:59] <shka> via Chinese proxy 
[16:42:19] <shka> it was rather silly for Venezuela honestly 
[16:42:30] *** Quits: robin (~robin@user/terpri) (Quit: Leaving)
[16:43:21] <shka> selwyn: anyway, thing is, America is currently the biggest oil producer in the world
[16:43:24] *** Joins: robin (~robin@user/terpri)
[16:43:45] <selwyn> surely they are not self sufficient though
[16:43:48] <selwyn> well
[16:43:50] <shka> they are
[16:43:53] <selwyn> i guess shale comes in at high prices
[16:44:18] <shka> last year they actually reached levels of net export
[16:44:51] <shka> that's why the put embargo on the russian oil
[16:44:58] <shka> they simply don't need it
[16:45:28] <shka> this is also why they don't care all that much about the middle east anymore
[16:45:31] <selwyn> they already banned it?
[16:45:39] <shka> yeah, i think so
[16:46:12] <selwyn> financial times says that america is in 'active discussions' to ban russian crude imports
[16:46:22] <selwyn> which rather implies they have been continuing up until now
[16:46:27] <shka> well, ok
[16:46:31] <shka> but they will do that
[16:46:43] <shka> USA simply put does not need Russian oil
[16:47:00] <shka> and Canada would be happy to expand oil extraction in Alberta
[16:47:40] <selwyn> in that case, why bother with overtures to iran and venezuela
[16:48:04] <shka> as for Iran, nuclear question
[16:48:14] <shka> as for Venezuela, not going to happen
[16:48:54] <shka> but truth be told, it is Europe that needs Russian carbohydrates, not USA
[16:49:03] <selwyn> i agree
[16:49:24] <shka> hey, look https://www.reuters.com/world/belgian-greens-make-u-turn-consider-nuclear-plants-extension-2022-03-07/?utm_source=reddit.com
[16:49:24] -ixelp- Belgian Greens make U-turn to consider nuclear plants extension | Reuters
[16:49:39] <shka> good belgians, smart belgians 
[16:50:05] <shka> but it would be better to build new plants
[16:50:24] <selwyn> won't the nuclear industry be screwed by not cooperating with russia
[16:50:34] <shka> not really
[16:50:41] <selwyn> dont ores come from there
[16:51:24] <shka> uranium is not a huge problem
[16:52:05] <shka> and wide adoption of breeding reactors would actually probably eliminate need for mining for a loooooooooong time 
[16:52:14] <shka> there is also seawater extraction option
[16:52:37] <selwyn> ideally it would be best to simply get this stuff from russia
[16:52:50] <selwyn> whenever i read about a cool reactor design, they are the ones who have actually built it
[16:53:06] <shka> not only Russia
[16:53:15] <shka> France build phoenix breeding reactor
[16:53:26] <selwyn> i am talking also about smrs
[16:53:27] <shka> and they were about to go with the Super Phoenix
[16:53:57] <shka> oh, right, well, outside of Russia there is Toshiba and NuPower
[16:54:17] <shka> soryr
[16:54:21] <shka> not toshiba
[16:54:23] <shka> hitachi
[16:54:39] <shka> also, let me mention that i am STILL salty about super phoenix
[16:54:51] <shka> pl: be salty with me!
[16:55:50] <shka> https://en.wikipedia.org/wiki/Superph%C3%A9nix
[16:56:19] <shka> selwyn: witness the biggest blunder of the Europe 
[16:56:32] <selwyn> > a nuclear power station prototype on the Rhône river at Creys-Malville in France, close to the border with Switzerland
[16:56:33] * pl pours extra salt
[16:56:34] <selwyn> classic france
[16:56:52] <shka> seriously 
[16:57:46] <pl> selwyn: technically the reason is that rivers provide cooling, the added benefit is how often they have to sell electricity to those neighbours, the saltiness of the neighbours is really an unofficial perk
[16:57:46] <shka> in the alternative timeline, this SPX would be heralded as the milestone of the new atomic era in Europe 
[17:01:27] <shka> there was SPX-2 planned
[17:02:19] <selwyn> back later
[17:02:31] <shka> anyway, fuck that whole spx story
[17:02:35] <shka> it could be so good
[17:19:25] *** Joins: cosimone (~user@93-47-229-38.ip115.fastwebnet.it)
[17:22:14] <gilberth> When I look at the numbers that I could find, you would need around 25,000 wind turbines to substitute all our nuclear plants we once had. In 2021 a total of 484 new wind turbines were build. So this sure works out. And this is electricity only. What about transportation and heating?
[17:22:36] <gilberth> This will not work. No way.
[17:22:40] <shka> gilberth: IKR
[17:22:58] <shka> wind does not scale
[17:23:30] <shka> solar scales, but needs good condition
[17:23:33] <gilberth> And then they talk about H_2 as if H_2 could be mined or something. No, it's an energy storage and transportation tech, nothing more.
[17:24:13] <pl> and storing H2 is non-trivial
[17:24:30] <gilberth> shka: Wind at least works at night, too. And Germany isn't the best place for solar to begin with.
[17:24:41] <pl> wind works when it wants to
[17:24:55] <shka> gilberth: yes, solar works, but not in europe
[17:24:57] <pl> the bigger benefit of wind farms is that if it's windy you can also use them as energy sinks
[17:25:11] <gilberth> pl: Indeed. But "That can be solved". Heh, when they may refer to non-existing tech, may I point to fusion power?
[17:25:18] <pl> which helps stabilising the power grid
[17:25:35] <pl> gilberth: or SMR NHPs
[17:25:45] <shka> ... you know what can be solved?
[17:25:51] <shka> cheap nuclear power
[17:25:54] <shka> (duh)
[17:26:52] <gilberth> Well, there are wind turbines in North Germany that are not even on the grid. Yet by politically set prices I cannot afford to heat my house by that otherwise unused electricity. Brilliant move.
[17:27:34] <gilberth> And heating houses could be a form of energy storage, too.
[17:27:44] <pl> gilberth: it kinda is in UK
[17:28:34] <gilberth> Anyhow, I am not obligated to get upset. German energy politics is so incredible stupid. It was before the current war, and it is now. I can't see that it will change in any way.
[17:31:22] <gilberth> In the 60s and 70s we had those storage ovens powered by electricity. The utility company would in effect turn that device on and off depending of whether there is a surplus. The oven would store that heat in a stone essentially and let it out when needed. This kind of heating is forbidden here.
[17:31:56] <ck_> where is here?
[17:32:11] <gilberth> Here is Germany.
[17:32:31] <ck_> forbidden how? These things are still in the houses I grew up in
[17:32:57] <gilberth> You are not allowed to install a new one. If you have an old one, you may still use it.
[17:33:40] <gilberth> And yes, we had those too as I was a child. Many had.
[17:35:12] <pl> gilberth: possibly they phased out the system that controlled them
[17:35:36] <gilberth> pl: That system is still in place.
[17:36:02] <pl> in UK, storage heating was controlled by owner, but they had special meters that listened to BBC signal and switched to lower price when in surplus at night
[17:36:14] <ck_> well, TIL. "Am 17. Mai 2013 beschloss der Bundestag, das vom Kabinett Merkel I (2005–2009) stammende Verbot des Betriebes von Nachtspeicherheizungen nach dem Jahr 2019 außer Kraft zu setzen. Diese dürfen nun auch nach dem 31. Dezember 2019 weiter betrieben werden."
[17:36:18] <gilberth> It's a signal modulated onto the power line to signal cheap electricity. You can get a second meter which is then used.
[17:36:19] <ck_> https://de.wikipedia.org/wiki/Nachtspeicherheizung
[17:37:07] <gilberth> ck_: Oh, "Betriebsverbot"? They actually want to make it illegal to use old installations? /me reads.
[17:38:30] <gilberth> Indeed. *sigh*
[17:40:37] <pl> gilberth: why are they disallowing new ones or trying to remove old ones?
[17:46:03] <gilberth> pl: Because that would be good for the climate, apparently. Seriously, don't ask me, I don't know.
[17:47:32] <gilberth> Why are we shutting down nuclear plants? Why was electricity almost ten times more expensive than Russian gas?
[17:47:34] <shka> well, this type of solution may score a comeback 
[17:47:54] <shka> but this will need smart grids this time around
[17:47:57] <ck_> pl: that article characterizes them as uneconomical, without benefit wrt. conserving resources
[17:48:15] <gilberth> It's politically incorrect to heat with electricity. That's why.
[17:48:37] <shka> because they are uneconomical... if your energy comes from coal
[17:50:41] <gilberth> Still, I ask why can't I effort to heat my house by surplus wind energy which is not used at all atm? That's a political decision. Ironically electricity is so expensive because we pay this wind power which could in theory be produced.
[17:51:11] <shka> gilberth: yes, this kind of technology should make a comback
[17:52:05] <shka> and that's what renewable energy is good for
[17:52:17] <ck_> how about using https://en.wikipedia.org/wiki/Masonry_heater
[17:52:26] <gilberth> shka: It should also because it is a puzzle piece to the energy storage problem. I said that years ago.
[17:52:34] <shka> not base load: just additional extra power 
[17:53:38] <gilberth> shka: Exactly.
[17:55:19] <shka> and burning natural gas for heating ALSO emits CO2
[17:55:20] <pl> gilberth: storage heaters might increase overall energy demand and thus require them to build extra backup plants... gas ones
[17:56:01] <gilberth> shka: That's better than all the death of the daily nuclear accidents.
[17:57:20] <gilberth> pl: Well, yes, the plan was to label natural gas green. And burning it on-site sure is more efficient than to turn it into electricity first. This all doesn't make sense.
[17:59:36] <gilberth> Meanwhile I ask myself, where all those perhaps 100,000 wind turbines you would need to get 100% fossile free should go. And who builds them. And in which time frame.
[18:00:01] <shka> gilberth: also, what is the expected time to failure
[18:00:19] <gilberth> Of a wind turbine? idk
[18:00:34] <pl> 10-20 years is the lifespan, iirc
[18:01:41] <gilberth> If it is so little, I ask further questions: Can the rare earth used be recycled? What about all the concrete? Concrete too doesn't last forever.
[18:03:04] <gilberth> What about the CO_2 produced to produce the concrete? What about the ecological impact of all the beaches needed to be "mined" for the sand?
[18:03:22] <ck_> the fiberglass is not recyclable as far as I know
[18:03:41] <gilberth> ck_: Indeed. I forgot about the blades.
[18:05:09] <gilberth> Anyhow, my point is that nothing is 100% green. Everything has it's downsides. We should make a rational choice and not an irrational. And yes, I would like to keep our standard of living.
[18:05:38] <ck_> "just buy some CO2 certificates, easy!"
[18:05:46] *** Joins: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340)
[18:06:26] <gilberth> ck_: Right. Or plant trees.
[18:07:21] <gilberth> Better yet: Don't have children. Biggest saving in CO_2 production you could make.
[18:07:46] <ck_> I think that conflicts a little bit with "keep our standard of living"
[18:08:12] <gilberth> Does breeding improve our standard of living?
[18:08:52] <ck_> ?
[18:09:03] <ck_> I don't know why you argue like that so often. It's not what I said
[18:10:12] <gilberth> ck_: I fear we don't get each other here.
[18:10:14] <rotateq> Bitte ein Bit.
[18:11:23] <ck_> rotateq: here's your 8 bit.  sorry, smallest quantity of consumption in the ram bar
[18:11:23] <gilberth> Bit ist aus. Hamma nich, krimma och nich.
[18:11:51] <gilberth> What is a six-pack? A character?
[18:12:09] <pl> breeding is necessary to keep alive pension schemes
[18:12:14] <rotateq> hehe yes
[18:13:19] <gilberth> pl: There are more than enough children in the world. And if pension depends on that there is something wrong with the pension.
[18:14:52] <pl> gilberth: it does, most pension schemes depend on currently employed paying for current pensioners
[18:15:29] <gilberth> pl: Yep, I am aware. This won't work well in the near future.
[18:15:48] <shka> pl: well, divide that by 100 000 and this is how often you need to replace a wind turbine
[18:15:50] <gilberth> But you can't base pension on a ponzi scheme. Not in the long run.
[18:15:52] <shka> good luck with that
[18:16:39] <gilberth> shka: As I said, Germany erected a bit less than 500 turbines last year.
[18:16:48] <shka> yes
[18:17:09] <gilberth> So you just need to adjust your a tiny little bit and it works well. :-)
[18:17:11] <shka> because you are already saturated on unstable power sources
[18:19:08] <gilberth> Yep, we're skrewed. Big time.
[18:19:24] <pl> the problem is that storage... isn't
[18:20:22] <gilberth> It is. But also the scale still even if there would be a storage tech.
[18:21:03] <shka> yup
[18:21:30] <shka> renewable is feasible where solar works well
[18:21:44] <shka> not germany, for instance
[18:21:50] <shka> or poland actually
[18:22:02] <gilberth> For our country it is wishful thinking IMHO.
[18:23:18] <gilberth> This could work on a larger scale like putting solar power plants into the Sahara. Plenty of unused space plenty of sun.
[18:24:28] <pl> shka: even solar is problematic in many areas with lots of sun
[18:24:48] <shka> pl: sure, but at least it is technically possible
[18:25:04] <pl> gilberth: even there it's... very problematic (lots of water usage, to the point that using Sahara to frack water into hydrogen sounds just as good if not better)
[18:25:07] <shka> you literally can't force solar to work well if you are getting 5 hours of sunlight in the winter
[18:25:55] <pl> solar (and wind too) on large scale with such conditions needs somewhat considerable sized VPPs
[18:25:57] <gilberth> Also not when the weather is cloudy too.
[18:26:19] <pl> remember that you need to coordinate frequency
[18:27:23] *** Quits: cosimone (~user@93-47-229-38.ip115.fastwebnet.it) (Remote host closed the connection)
[18:28:51] * pl ponders if eGovernment system designed for rapid deployment of new features would be interesting topic for a PhD work
[18:31:27] *** Quits: rotateq (~user@ip-078-094-235-194.um19.pools.vodafone-ip.de) (Remote host closed the connection)
[18:35:00] *** Quits: dave0 (~davezero@069.d.003.ncl.iprimus.net.au) (Quit: dave's not here)
[19:01:23] *** Quits: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340) (Ping timeout: 252 seconds)
[19:08:40] <pjb> gilberth: on 709/7090, which were 36-bit machines, there was a 6-bit character set.  So they packed 6 characters in a 36-bit word. 077 was used as filler if a word wasn't full.
[19:09:12] <pjb> gilberth: (defparameter +charset+ "0123456789#=\"###+ABCDEFGHI%.)###-JKLMNOPQRØ$*### /STUVWXYZ±,(###" "Maps lisp characters to IBM-7090 character code (position of the character in the string.  Invalid character codes are denoted by '#'.")
[19:09:52] <pjb> gilberth: note: digit characters = small ints.
[19:10:45] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 252 seconds)
[19:33:30] <shka> pl: btw, do you have an idea why those turkish drones seem to work this well?
[19:34:47] <pl> good operational planning
[19:35:09] <shka> what about electronic warfare? 
[19:35:18] <shka> jamming?
[19:35:21] <pl> shka: Russia seems missing those units :V
[19:35:27] <shka> ... 
[19:35:37] <pl> shka: also they carefully planned the strikes to avoid places with active AA
[19:35:46] <shka> right
[19:36:01] *** Joins: jeosol (~jeosol@user/jeosol)
[19:36:22] <pl> shka: and russia effectively destroyed their AA "onion" in their mad dash over roads
[19:36:22] *** Quits: mgl (~mgl@cpc87455-finc19-2-0-cust234.4-2.cable.virginm.net) (Quit: Client closed)
[19:36:50] <pl> but they are learning, I've seen Tor driving deployed
[19:37:11] <shka> so it is just likely some sort of taxi system with drone cruising for hours above grunts, and when a juicy target is spotted from the ground it is bombing time?
[19:38:16] <pl> I don't know details about how Ukraine is flying them (they keep remarkable OPSEC), but TB2 is classified as "Medium Altitude, Long Endurance" drone
[19:38:33] <pl> so they can patrol for considerable amount of time waiting for a window to strike
[19:39:45] <shka> well, makes sense
[19:40:08] <shka> so i guess it will be harder to make use of drones now
[19:40:35] <pl> shka: the big thing is that Russian integrated air defence.. isn't
[19:40:58] *** Quits: jeosol (~jeosol@user/jeosol) (Quit: Client closed)
[19:41:04] <pl> and air defenses that could protect columns are taken off in ground strikes
[19:42:01] <pl> also, they recently got resupplied
[19:42:14] <shka> by turkey?
[19:42:18] <pl> yes
[19:42:32] <pl> unknown how many drones, but new shipment of TB2s is afaik confirmed
[19:42:50] <pl> Possibly also munitions
[19:43:31] <shka> well, i presume that since russians are not moving a lot now, it will be difficult to attack
[19:43:45] <shka> no idea how south is
[19:44:22] *** Joins: mgl (~mgl@cpc87455-finc19-2-0-cust234.4-2.cable.virginm.net)
[19:48:18] *** Joins: jeosol (~jeosol@user/jeosol)
[19:49:06] <shka> ok, finally Ruble lost 50% of it's value
[19:49:08] <shka> good
[19:52:04] <gilberth> Is SB-ALIEN supposed to know how to pass a struct according to the ABI? No, it isn't, the documentation says so. That's a joke, isn't it? And: A little type checking would have been nice.
[19:52:23] <gilberth> Good, then I glue my struct together with DPB.
[19:59:05] <gilberth> But I wonder, if the all the latency I experience with SBCL also with SLIME is because of its silly exponential back-off in waiting. Come to think of it, I never really used SBCL with macos before.
[20:01:37] <gilberth> pjb: Why are you telling me? I am familiar with the IBM 7090 or rather the LISP implementation.
[20:02:18] <pjb> <15:41:51><gilberth> What is a six-pack? A character?
[20:02:58] <gilberth> Yes, and this shows that I am aware of 6-bit character sets.
[20:03:27] <pjb> No, the question marks show that you don't know what that is.
[20:03:41] <pjb> You should revise the semantics of question marks.
[20:04:34] <gilberth> It was the question whether you would call to a six-pack of beer a character. "Bit" is a beer brand.
[20:05:30] <gilberth> And "Bitte ein Bit!" is an advertisement slogan.
[20:06:11] <gilberth> Actually the brand is named "Bitburger", but this could be shortened.
[20:06:13] <pjb> Ah. Thank you for the context.  Beer is quite alien to me…
[20:08:52] <gilberth> Speaking of which, I am surprised how bad Germans are at selling their beer internationally. All talk about how good German beer is, yet you don't find any outside of Germany.
[20:09:37] *** Quits: rogersm (~rogersm@90.166.180.250) (Quit: Leaving...)
[20:10:55] <gilberth> In contrast to the French beverages. Even convincing us that sparkling wine must come from the Champagne.
[20:16:03] <pl> a lot of the good beer sold internationally turns out to be czech :P
[20:17:56] *** Joins: X-Scale` (~ARM@46.50.5.194)
[20:18:37] *** Joins: Lycurgus (~juan@98.4.112.204)
[20:19:16] *** Quits: X-Scale (~ARM@135.232.28.37.rev.vodafone.pt) (Ping timeout: 272 seconds)
[20:19:17] *** X-Scale` is now known as X-Scale
[20:31:06] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[21:18:53] *** Joins: Catie (~user@user/catie)
[21:39:06] *** Joins: notzmv (~zmv@user/notzmv)
[21:54:15] *** Quits: Lycurgus (~juan@98.4.112.204) (Quit: Exeunt)
[22:12:05] *** Joins: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340)
[22:25:11] *** Quits: mgl (~mgl@cpc87455-finc19-2-0-cust234.4-2.cable.virginm.net) (Quit: Client closed)
[22:46:54] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 252 seconds)
[23:01:46] <gilberth> Hmm, CLIM2 has a contrasting-ink class. I don't know if I like that.
[23:02:58] *** Quits: jeosol (~jeosol@user/jeosol) (Quit: Client closed)
[23:03:54] <gilberth> Oh, they do something different on gray scale displays from what they do on colour displays. Makes sense.
[23:19:34] *** Joins: nexeq (nexeq@user/nexeq)
[23:21:23] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca) (Ping timeout: 256 seconds)
[23:24:42] <gilberth> When I implement MAKE-LOAD-FORM should I recursively invoke MAKE-LOAD-FORM myself, or is this the task of whoever uses MAKE-LOAD-FORM?
[23:31:11] <random-nick> I think the standard says it's the job of the caller?
[23:31:16] <random-nick>  Both the creation-form and the initialization-form may contain references to any externalizable object. However, there must not be any circular dependencies in creation forms.
[23:31:31] *** Quits: recordgroovy (~recordgro@50.35.20.8) (Remote host closed the connection)
[23:36:26] *** Joins: notzmv (~zmv@user/notzmv)
[23:36:26] <gilberth> Ah, ok. But you can sure have cycles as you return two forms: one to cons and one to init. And, yes, me using MAKE-LOAD-FORM would defeat that.
[23:41:16] <random-nick> yes, it says that explicitly later
[23:41:20] <random-nick>  Initialization forms are not subject to any restriction against circular dependencies, which is the reason that initialization forms exist; see the example of circular data structures below. 
[23:45:03] <gilberth> Yes, as always this is well thought out.
[23:46:01] <gilberth> I came across this because my CLIM is lazy. You say (make-rectangle* 0 0 100 100) and it returns #.(MAKE-RECTANGLE* 0 0 100 100)
[23:47:53] <gilberth> I realized that this is a load-form printed. And as I learned that MAKE-LOAD-FORM should just stick recursive objects in there as is, I realized that this MAKE-LOAD-FORM also is a perfect hash key for interning.
