[00:08:25] *** Joins: LiftLeft (~LiftLeft@fixed-138-186-31-170.totalplay.net)
[00:08:26] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Quit: sord937)
[00:10:29] *** Quits: tuskkk____ (uid18470@id-18470.tinside.irccloud.com) (Quit: Connection closed for inactivity)
[00:17:18] *** Quits: zer0bitz (~zer0bitz@2001:2003:f444:a000:a9ef:8cb1:3f34:9694) (Read error: Connection reset by peer)
[00:20:02] *** Joins: Midjak (~Midjak@may53-1-78-226-116-92.fbx.proxad.net)
[00:33:50] *** Joins: CoolerX (~CoolerX@user/coolerx)
[00:38:36] *** Quits: renlo (~Renlo_Ren@pool-173-68-108-120.nycmny.fios.verizon.net) (Ping timeout: 256 seconds)
[00:39:16] *** Joins: shtirlic (~shtirlic@178.69.58.193)
[00:42:26] *** Quits: shtirlic_ (~shtirlic@178.69.58.193) (Ping timeout: 245 seconds)
[00:47:59] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:144d:71e8:f3fd:20f1)
[00:51:49] *** Joins: sdfgsdfg (~dfghsfgs@user/sdfgsdfg)
[00:58:35] *** Parts: Nigthknight (~Nigthknig@user/nigthknight) ()
[00:59:00] *** Quits: sdfgsdfg (~dfghsfgs@user/sdfgsdfg) (Ping timeout: 256 seconds)
[00:59:26] *** Quits: _mikey (~mikey@user/mikey/x-4335048) (Quit: WeeChat 3.4)
[00:59:47] *** Joins: _mikey (~mikey@user/mikey/x-4335048)
[01:01:10] *** Quits: shka (~herr@109.231.0.226) (Ping timeout: 260 seconds)
[01:03:22] *** Quits: NastyNezra (inyou@ip72-193-170-88.lv.lv.cox.net) (Remote host closed the connection)
[01:03:54] *** Joins: Tv_ (uid62079@user/tv/x-3144562)
[01:08:28] *** Quits: mickey8 (~user@user/mickey) (Quit: Ping timeout (120 seconds))
[01:08:40] *** Joins: mickey8 (~user@user/mickey)
[01:12:56] *** Quits: elgraz (~elgraz@151.65.7.178) (Quit: Leaving)
[01:12:57] *** Joins: rcernin (~rcernin@2001:8003:6803:db00:2da8:e0a9:f3ad:5962)
[01:22:03] *** Quits: AquaL1te (~AquaL1te@user/aqual1te) (Quit: leaving)
[01:25:43] *** Quits: rcernin (~rcernin@2001:8003:6803:db00:2da8:e0a9:f3ad:5962) (Quit: WeeChat 3.4)
[01:26:08] *** Joins: rcernin (~rcernin@101.189.141.138)
[01:28:49] *** Quits: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl) (Quit: jaca122)
[01:32:10] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:144d:71e8:f3fd:20f1) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[01:32:51] *** Quits: quosa (~jussiku@82-181-4-77.bb.dnainternet.fi) (Ping timeout: 250 seconds)
[01:40:28] *** Joins: bluedust (~bluedust@103.161.144.140)
[01:44:48] *** Quits: bluedust (~bluedust@103.161.144.140) (Ping timeout: 250 seconds)
[01:48:52] *** Quits: rcernin (~rcernin@101.189.141.138) (Ping timeout: 256 seconds)
[01:49:38] *** Quits: willow (~willow@user/willow) (Quit: willow)
[01:50:48] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:144d:71e8:f3fd:20f1)
[01:53:05] *** Quits: cobber (~protorom@213.240.182.38) (Quit: cobber)
[01:54:49] <lungaro_> I can't do struct tags on anonymous structs can i?
[01:54:55] *** Quits: absc (~absc@dynamic-adsl-94-34-167-118.clienti.tiscali.it) (Remote host closed the connection)
[01:55:11] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:144d:71e8:f3fd:20f1) (Client Quit)
[01:55:24] <fizzie> An embedded field can still have a tag.
[01:55:29] *** Joins: rudi_s_ (~simon@user/rudi-s/x-7673890)
[01:55:31] <lungaro_> but not the struct itself
[01:55:58] <lungaro_> as it, x := struct { A struct { ... }}{}
[01:56:04] <lungaro_> i can't put a struct tag on A can i?
[01:56:13] <fizzie> "Struct itself" never has a tag. Only fields have tags.
[01:56:20] <lungaro_> bleh.
[01:56:35] <fizzie> You can certainly have a tag on field `A` of the outer struct type.
[01:57:21] *** Quits: rudi_s (~simon@user/rudi-s/x-7673890) (Ping timeout: 250 seconds)
[01:58:02] <lungaro_> Oh, i had my bug elsewhere. LOLZ
[01:58:04] <lungaro_> chers
[01:58:07] <lungaro_> cheers* -- I mean
[01:58:49] *** Quits: rendar (~rendar@user/rendar) (Quit: Leaving)
[02:01:10] *** Quits: Herby_ (~quassel@merkur.graeber-clan.de) (Quit: http://quassel-irc.org - Chat comfortably. Anywhere.)
[02:02:12] *** Joins: Herby (~quassel@merkur.graeber-clan.de)
[02:04:59] *** Joins: renlo (~Renlo_Ren@pool-173-68-108-120.nycmny.fios.verizon.net)
[02:09:17] *** Quits: renlo (~Renlo_Ren@pool-173-68-108-120.nycmny.fios.verizon.net) (Ping timeout: 240 seconds)
[02:14:39] *** Quits: markkuit (~markkuit@93-43-234-84.ip94.fastwebnet.it) (Quit: marqquit)
[02:17:24] *** Joins: rcernin (~rcernin@101.189.141.138)
[02:20:37] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:144d:71e8:f3fd:20f1)
[02:21:46] *** Joins: renlo (~Renlo_Ren@pool-173-68-108-120.nycmny.fios.verizon.net)
[02:22:18] *** Quits: LiftLeft (~LiftLeft@fixed-138-186-31-170.totalplay.net) (Ping timeout: 256 seconds)
[02:24:35] *** Joins: markkuit (~markkuit@93-43-234-84.ip94.fastwebnet.it)
[02:26:50] *** Quits: renlo (~Renlo_Ren@pool-173-68-108-120.nycmny.fios.verizon.net) (Ping timeout: 256 seconds)
[02:28:56] <b0nn> there's that weird case where people make a field in a struct '_' and tag that, though
[02:31:17] <fizzie> Yeah, I think there was a discussion about that a while back.
[02:31:20] <fizzie> I think the weirdest bit was where you'd also use the *type* of the `_` field to convey some information.
[02:31:35] <fizzie> "Have to do reflection anyway to read tags, so might as well."
[02:32:17] <b0nn> Yeah - that was it - it sticks in my head because it's such a nasty hack
[02:32:40] *** Joins: renlo (~Renlo_Ren@pool-173-68-108-120.nycmny.fios.verizon.net)
[02:33:46] *** Quits: kinlo (~peter@user/kinlo) (Ping timeout: 250 seconds)
[02:34:50] *** Joins: LiftLeft (~LiftLeft@fixed-138-186-31-170.totalplay.net)
[02:35:00] *** Joins: kinlo (~peter@user/kinlo)
[02:35:17] *** Quits: xavpaice (~quassel@43.249.199.14) (Ping timeout: 240 seconds)
[02:37:33] *** Joins: xavpaice (~quassel@43.249.199.11)
[02:37:45] *** Quits: renlo (~Renlo_Ren@pool-173-68-108-120.nycmny.fios.verizon.net) (Ping timeout: 268 seconds)
[02:37:45] *** Quits: xavpaice (~quassel@43.249.199.11) (Client Quit)
[02:37:59] *** Quits: mickey8 (~user@user/mickey) (Quit: Ping timeout (120 seconds))
[02:38:19] *** Joins: mickey8 (~user@user/mickey)
[02:42:51] *** Quits: mickey8 (~user@user/mickey) (Client Quit)
[02:43:05] *** Joins: mickey8 (~user@user/mickey)
[02:43:17] *** Joins: renlo (~Renlo_Ren@pool-173-68-108-120.nycmny.fios.verizon.net)
[02:44:18] *** Quits: ryu` (~ryusaku@user/ryu/x-3206151) (Quit: SCV ready!)
[02:44:59] *** Joins: shka (~herr@109.231.0.226)
[02:47:37] *** Quits: renlo (~Renlo_Ren@pool-173-68-108-120.nycmny.fios.verizon.net) (Ping timeout: 240 seconds)
[02:51:21] *** Quits: mickey8 (~user@user/mickey) (Quit: Ping timeout (120 seconds))
[02:51:34] *** Joins: mickey8 (~user@user/mickey)
[02:54:07] *** Joins: renlo (~Renlo_Ren@pool-173-68-108-120.nycmny.fios.verizon.net)
[02:54:56] *** Quits: _mikey (~mikey@user/mikey/x-4335048) (Quit: WeeChat 3.4)
[02:56:39] *** Joins: Seirdy (~Seirdy@sourcehut/user/seirdy)
[02:57:15] *** Joins: _mikey (~mikey@user/mikey/x-4335048)
[02:59:08] *** Quits: renlo (~Renlo_Ren@pool-173-68-108-120.nycmny.fios.verizon.net) (Ping timeout: 256 seconds)
[03:01:32] *** Joins: renlo (~Renlo_Ren@pool-173-68-108-120.nycmny.fios.verizon.net)
[03:04:17] *** Quits: CoolerX (~CoolerX@user/coolerx) (Ping timeout: 240 seconds)
[03:08:30] *** Quits: renlo (~Renlo_Ren@pool-173-68-108-120.nycmny.fios.verizon.net) (Quit: WeeChat 3.3)
[03:12:54] *** Quits: remote (~self@user/hackers) (Ping timeout: 268 seconds)
[03:14:32] *** Joins: remote (~self@user/hackers)
[03:22:10] *** Quits: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com) (Quit: Leaving)
[03:25:20] *** Quits: shka (~herr@109.231.0.226) (Ping timeout: 250 seconds)
[03:27:47] *** Quits: DM43078421495115 (~DM4307@047-234-129-039.res.spectrum.com) (Quit: The Lounge - https://thelounge.chat)
[03:28:19] *** Joins: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl)
[03:31:33] *** Joins: DM43078421495115 (~DM4307@047-234-129-039.res.spectrum.com)
[03:34:07] *** Quits: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl) (Quit: jaca122)
[03:41:11] *** Joins: bluedust (~bluedust@103.161.144.140)
[03:44:45] *** Quits: itsalexjones (~itsalexjo@82.4.99.241) (Read error: Connection reset by peer)
[03:45:17] *** Quits: bluedust (~bluedust@103.161.144.140) (Ping timeout: 240 seconds)
[03:48:26] *** Quits: markkuit (~markkuit@93-43-234-84.ip94.fastwebnet.it) (Ping timeout: 256 seconds)
[04:05:13] *** Quits: jimeh (jimeh@matrix.bah.io) (Remote host closed the connection)
[04:05:54] *** Joins: YannickS[m] (~yannicksi@2001:470:69fc:105::1:76f4)
[04:08:58] *** Quits: lazyreader (~lazyreade@user/lazyreader) (Quit: The Lounge - https://thelounge.chat)
[04:10:06] *** Joins: lazyreader (~lazyreade@user/lazyreader)
[04:14:33] *** Joins: jimeh (jimeh@matrix.bah.io)
[04:29:42] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:144d:71e8:f3fd:20f1) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[04:31:43] *** Joins: markkuit (~markkuit@93-43-234-84.ip94.fastwebnet.it)
[04:32:24] *** Quits: leonarth (~leonarth@user/leonarth) (Quit: 84R6CDo3S62HkuYSkVXBr7fXp2wn1XRHeQZ8QPrqxbXvfXP33EH4MhueE2ifPcRbbQQhVXPheMD957muhhBtrvs2QKykeA3)
[04:33:41] *** Joins: quosa (~jussiku@82-181-4-77.bb.dnainternet.fi)
[04:38:32] *** Quits: quosa (~jussiku@82-181-4-77.bb.dnainternet.fi) (Ping timeout: 240 seconds)
[04:46:01] *** Quits: predmijat (~predmijat@mail.strogopro.com) (Quit: bye)
[04:46:34] *** Joins: pagnol (~user@014198154145.ctinets.com)
[04:46:57] *** Joins: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com)
[04:47:37] *** Joins: predmijat (~predmijat@mail.strogopro.com)
[04:49:42] *** Quits: krux02 (~krux02@p200300e81723dd00b48b627b8314596f.dip0.t-ipconnect.de) (Remote host closed the connection)
[04:50:07] *** Joins: mike18_ (~geri@71-220-52-187.mpls.qwest.net)
[04:50:22] <mike18_> hi how can i read response bytes with json.NewEncoder ?
[04:51:18] <mike18_> err = json.NewDecoder(resp.Body).Decode(userResp) ?
[04:51:18] *** Parts: YannickS[m] (~yannicksi@2001:470:69fc:105::1:76f4) ()
[04:51:20] *** Quits: inr (~a@c-5817e555.040-159-73746f16.bbcust.telenor.se) (Ping timeout: 256 seconds)
[04:51:46] <mike18_> is there a good reason to use Unmarshal instead?
[04:53:05] <fizzie> Not really. `json.Unmarshal` forces you to read the entire response into an in-memory []byte. Using a decoder like that can hypothetically stream it.
[04:54:25] *** Joins: chenqisu1 (~chenqisu1@183.217.200.249)
[04:54:27] <mike18_> means you suggest to do: var userResp *UserResponse err := json.NewDecoder(resp.Body).Decode(responseObject)  ?
[04:55:55] <fizzie> Well, either `&userResp` or else `var userResp = &UserResponse{}; ...Decode(userResp)`. It's not really useful to provide a nil pointer to Decode.
[04:56:01] <fizzie> But other than that, sure.
[04:56:30] <mike18_> will i still need defer resp.Body.Close() ?
[04:57:32] <fizzie> Yes. The decoder takes an `io.Reader`, so it can't really close it; and wouldn't anyway, since maybe you want to read something after the JSON object.
[04:58:39] <mike18_> ok
[04:58:57] <mike18_> is there a page with useful functions to read rest api etc?
[04:59:11] <mike18_> some useful snippets like that on github?
[05:00:59] <mike18_> or some public rest api - i can use for testing?
[05:03:12] *** Joins: iryith1 (~iryith3@207.81-166-89.customer.lyse.net)
[05:06:04] *** Quits: iryith (~iryith3@user/iryith) (Ping timeout: 256 seconds)
[05:08:07] <fizzie> I'm sure there are, I just don't know what to link to. There's an official tutorial, but it's for the server side of a REST API and using the Gin framework, so probably not what you want.
[05:08:43] <mike18_> found https://kevin.burke.dev/kevin/golang-json-http/
[05:08:52] <mike18_> anything else you guys can think off?
[05:09:07] <mike18_> fizzie: im talking about client side
[05:12:18] *** Quits: dsrt^ (~dsrt@50.231.5.242) (Ping timeout: 256 seconds)
[05:20:48] *** Quits: LiftLeft (~LiftLeft@fixed-138-186-31-170.totalplay.net) (Ping timeout: 256 seconds)
[05:23:15] *** Joins: haniaF_ (~haniaF@79.191.104.181.ipv4.supernova.orange.pl)
[05:24:52] *** Quits: haniaF (~haniaF@83.24.207.85.ipv4.supernova.orange.pl) (Ping timeout: 268 seconds)
[05:27:58] *** Quits: haniaF_ (~haniaF@79.191.104.181.ipv4.supernova.orange.pl) (Ping timeout: 250 seconds)
[05:28:12] *** Joins: haniaF (~haniaF@83.24.206.88.ipv4.supernova.orange.pl)
[05:31:17] *** Joins: shtirlic_ (~shtirlic@pppoe.95-55-137-7.dynamic.avangarddsl.ru)
[05:34:29] *** Quits: shtirlic (~shtirlic@178.69.58.193) (Ping timeout: 252 seconds)
[05:36:23] *** Joins: inr (~a@c-5817e555.040-159-73746f16.bbcust.telenor.se)
[05:36:28] <mike18_> plan, _ := ioutil.ReadFile(filename) var data Data err := json.Unmarshal(plan, &data) ?
[05:36:31] <mike18_> fizzie: and for
[05:36:35] <mike18_> that above?
[05:40:18] <fizzie> That *could* be `plan, err := os.Open(filename); /* check err */ defer plan.Close(); var data Data; err := json.NewDecoder(plan).Decode(&data);` if you like, for similar reasons as when reading a HTTP response. But depending on the context, the one-shot functions (ReadFile, Unmarshal) can be okay too.
[05:40:36] <fizzie> (`ioutil.ReadFile` got renamed to `os.ReadFile` in Go 1.16, if you don't need compatibility for earlier versions.)
[05:42:04] *** Joins: bluedust (~bluedust@103.161.144.140)
[05:46:17] *** Quits: bluedust (~bluedust@103.161.144.140) (Ping timeout: 240 seconds)
[05:46:23] <mike18_> also is there a good library to do json diff/compare ?
[05:49:08] *** Quits: rcernin (~rcernin@101.189.141.138) (Ping timeout: 256 seconds)
[05:49:35] *** Joins: rcernin (~rcernin@101.189.141.138)
[05:49:59] <b0nn> ugh
[05:50:17] *** Quits: neurocyte0917090 (~neurocyte@user/neurocyte) (Ping timeout: 240 seconds)
[05:50:33] <b0nn> I have been digging around in code trying to work out why the response has {data}{status: ok}
[05:50:47] <b0nn> that is, TWO json objects smooshed into the response
[05:50:58] *** Joins: sdfgsdfg (~dfghsfgs@user/sdfgsdfg)
[05:51:09] <b0nn> and I think it's because the w.Write(json) isn't flushed/closed between calls
[05:54:20] <b0nn> I mean, every single example out there calls w.Write(json) and then lets the function exit, BUT that doesn't deal with w's lifetime
[05:54:57] *** Quits: rcernin (~rcernin@101.189.141.138) (Ping timeout: 240 seconds)
[06:02:26] *** Quits: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com) (Quit: Leaving)
[06:05:10] <fizzie> In a `ServeHTTP` method, you shouldn't *need* to do anything special with `w`. "ServeHTTP should write reply headers and data to the ResponseWriter and then return. Returning signals that the request is finished; it is not valid to use the ResponseWriter or read from the Request.Body after or concurrently with the completion of the ServeHTTP call."
[06:05:34] *** Quits: knkay (~knkay@213.190.30.120) (Ping timeout: 268 seconds)
[06:06:06] *** Quits: zwr (~zwr@2804:d45:b966:fb00:1974:a2f:e75f:4c0b) (Ping timeout: 250 seconds)
[06:06:55] *** Quits: muirrum (~muirrum@sourcehut/user/muirrum) (Quit: Ping timeout (120 seconds))
[06:06:56] <fizzie> In some other context of writing JSON somewhere, maybe that's different. But a http.ResponseWriter doesn't even provide any way to explicitly close/flush.
[06:06:58] *** Joins: zwr (~zwr@2804:d45:b966:fb00:1493:7e75:a195:6d65)
[06:07:10] *** Quits: jkovac1 (~jkovac1@user/jkovac1) (Remote host closed the connection)
[06:07:14] *** Joins: muirrum (~muirrum@sourcehut/user/muirrum)
[06:07:26] *** Joins: jkovac1 (~jkovac1@user/jkovac1)
[06:07:49] <b0nn> bpa.st/DJHQ
[06:08:02] *** Quits: yamchah2 (~yamchah2@user/yamchah2) (Ping timeout: 268 seconds)
[06:08:04] <b0nn> note that the pointer to w is the same for both calls
[06:08:14] <b0nn> (It changes the next call)
[06:08:36] <b0nn> And a Flusher is supposed to implement Flush()
[06:08:43] *** Joins: abc_- (~abc@user/abc)
[06:09:00] <fizzie> But not all `ResponseWriter`s are necessary also `Flusher`s.
[06:09:11] *** Joins: yamchah2 (~yamchah2@user/yamchah2)
[06:09:16] *** Quits: zwindl (~abc@user/abc) (Ping timeout: 268 seconds)
[06:09:45] <b0nn> Yes, although the comment makes it appear that http's ResponseWriter implements Flusher (although, if it does in reality, I couldn't get it to work
[06:10:36] *** Joins: knkay (~knkay@213.190.30.120)
[06:10:47] <b0nn> https://ifood.tv/fudge/344078-sultana-fudge
[06:10:56] <b0nn> oh, you don't want a fudge recipe
[06:10:59] *** Joins: rcernin (~rcernin@101.189.141.138)
[06:11:16] <b0nn> https://cs.opensource.google/go/go/+/refs/tags/go1.17.6:src/net/http/server.go;l=160
[06:11:29] *** Quits: rcernin (~rcernin@101.189.141.138) (Client Quit)
[06:11:43] *** Joins: rcernin (~rcernin@101.189.141.138)
[06:14:04] *** Quits: eXtr3m0 (~eXtr3m0@user/eXtr3m0) (Ping timeout: 256 seconds)
[06:16:32] *** Quits: epony (epony@user/epony) (Ping timeout: 240 seconds)
[06:18:16] *** Quits: sdfgsdfg (~dfghsfgs@user/sdfgsdfg) (Quit: ayo yoyo ayo yoyo hololo, hololo.)
[06:19:04] <fizzie> FWIW, I don't think the pointer being the same *necessarily* indicates anything; net/http should be within its rights to reuse a ResponseWriter object for two non-concurrent requests if it wants to, as long as it arranges it to work (as in, respects that returning from ServeHTTP means the request is finished).
[06:20:30] *** Quits: sgen (~sgen@2607:fea8:7ce1:c8e0:2891:6bd5:ed2a:ab88) (Remote host closed the connection)
[06:22:43] *** Joins: califax- (~califax@user/califx)
[06:25:54] *** Quits: califax (~califax@user/califx) (Ping timeout: 276 seconds)
[06:25:54] *** califax- is now known as califax
[06:27:11] <fizzie> (Skimming net/http/server.go conn.readRequest and .../h2_bundle.go http2serverConn.newWriterAndRequestNoBody, though, it didn't seem like that would ever happen. But I wouldn't want to bet money on it.)
[06:27:21] <b0nn> As I say, the request is receiving two json objects which are generated in two Serverside calls
[06:27:58] <b0nn> That is, a call inside the server is generating one json blob, writing to w, then generating a second, and (again) writing to w
[06:30:38] *** Joins: jasonwucj (uid13975@id-13975.ilkley.irccloud.com)
[06:36:50] <mike18_> hi does someone use this library? https://pkg.go.dev/github.com/nsf/jsondiff#Options.Normal i want to know what flag i can use to see if a field is removed from the expcted data in the actual data?
[06:37:10] <mike18_> i thought it has something to do with Added or removed...
[06:37:11] <mike18_> ?
[06:39:19] <b0nn> Why not the SkipMatches option?
[06:39:44] <fizzie> But are you claiming it's two calls directly from net/http into a http.Handler, or just calls from some custom middleware or from one handler-wrapper to another? Because I think all those examples out there that call w.Write() and exit are in the context of a simple handler, where that's a perfectly normal thing to do.
[06:45:46] <b0nn> ...
[06:46:28] <b0nn> I'm not sure what you are asking
[06:47:13] <b0nn> And I'm not going to continue - this is frustrating enough without being accused of "making claims" about things
[06:50:23] *** Joins: trafficjam (~qubes@2001:8004:5190:2c63:e001:c358:a4c2:b1e6)
[06:50:52] *** Parts: trafficjam (~qubes@2001:8004:5190:2c63:e001:c358:a4c2:b1e6) ()
[06:50:55] *** Joins: trafficjam (~qubes@2001:8004:5190:2c63:e001:c358:a4c2:b1e6)
[06:51:34] *** Parts: trafficjam (~qubes@2001:8004:5190:2c63:e001:c358:a4c2:b1e6) ()
[06:51:36] *** Joins: trafficjam (~qubes@2001:8004:5190:2c63:e001:c358:a4c2:b1e6)
[06:51:40] <trafficjam> hey guys
[06:51:53] <trafficjam> how can i test if a slice[index] contains a value?
[06:52:23] <hannibal_ad_port> for i := range { if i == value { // true }}
[06:52:42] <trafficjam> is there a way to do it without iterating over the whole slice/
[06:52:44] <trafficjam> *?
[06:53:11] <fizzie> What exactly do you want to check here? Because if index < len(slice), there's no way it could *not* "contain a value".
[06:53:38] <fizzie> It might contain the zero value of the slice's element type, but it can't contain "nothing".
[06:53:44] <hannibal_ad_port> or are you checking if the slice contains a spicific value?
[06:53:45] <b0nn> Yes, having a sorted slice before you search, but once you are searching O(n) is better than O(n log n) + O(n log n)
[06:54:08] <b0nn> well it's better than just one too to be honest
[06:54:12] <trafficjam> basically i want to write the function `val, ok := GetItem([]int{1, 2, 4, 1}, 2)`
[06:54:21] *** Joins: hanzo (uid532183@user/hanzo)
[06:54:49] <hannibal_ad_port> which returns the index of the provided value?
[06:55:28] <trafficjam> are you asking if GetItem returns the index of the provided value?
[06:55:57] <hannibal_ad_port> yea what is 'val' supposed to be?
[06:55:58] <foobaz> ok := index >= 0 && index < len(slice)
[06:56:07] <b0nn> trafficjam: If your slice is unsorted, then O(n) (loop over all items) is the fastes search
[06:56:27] *** Joins: blinux (~blinux@pool-72-78-144-199.phlapa.fios.verizon.net)
[06:57:31] <b0nn> if your slice is sorted, O(log n) is fastest - but the cost of sorting is O(n log n)
[06:57:33] <fizzie> I don't think this is about finding a specific value in a slice at all. But I guess we'll see.
[06:58:08] <b0nn> If it's find the item at Foo[x] then it's O(1)
[06:58:28] <foobaz> b0nn's assumption does explain the talk of iterating over the whole slice, maybe he's right
[07:03:30] <trafficjam> so i still have to iterate over it?
[07:03:58] *** Quits: arkurious (~arkurious@user/arkurious) (Quit: Leaving)
[07:04:24] <fizzie> Well, just clarify whether you want `GetItem([]int{1, 2, 4, 1}, 2)` to return the element at index 2, or find out where in the slice the value 2 appears?
[07:04:33] <fizzie> For the former, no; for the latter, yes.
[07:07:49] <mike18_> b0nn: Why not the SkipMatches option? where you see SkipMatches?
[07:08:35] <b0nn> mike18_: the final line in the Options struct definition 	// When true, only differences will be printed. By default, it will print the full json.
[07:08:38] <b0nn> 	SkipMatches bool
[07:08:42] <mike18_> oh
[07:08:54] <mike18_> im stupid i didnt add the json field in the object itself
[07:09:05] <b0nn> oh
[07:09:15] <mike18_> atually why having a object for compare
[07:09:21] <mike18_> just takek the bytes i guess
[07:10:04] <trafficjam> fizzie: well if a value exists at slice[index], it should return `val, true`
[07:10:11] <trafficjam> and if not it should return `0, false`
[07:10:24] <fizzie> trafficjam: In that case, the function is just `if index < 0 || index >= len(slice) { return 0, false } return slice[index], true`. Or some equivalent way of writing that.
[07:10:56] *** Quits: blinux (~blinux@pool-72-78-144-199.phlapa.fios.verizon.net) (Ping timeout: 268 seconds)
[07:11:18] <trafficjam> fikran: is it not possible to have a slice with indexes [1, 2, 3, 100] defined?
[07:11:25] <trafficjam> fizzie: ^
[07:11:44] <trafficjam> in which case that code wouldn't work would it?
[07:11:45] <fizzie> Not without also having indices 0 and 4..99 "defined" as well.
[07:11:50] <trafficjam> oh ok
[07:12:04] <trafficjam> that should work then, thanks man
[07:12:21] <fizzie> They may contain the zero value of the type, but they can't not exit.
[07:12:46] <trafficjam> great to know, thanks!
[07:13:01] <fizzie> As in https://go.dev/play/p/Yxq7-neoCVK just to be real explicit about it.
[07:13:27] <fizzie> (`[]int{1: 123, 10: 456}` being the same thing as `[]int{0, 123, 0, 0, 0, 0, 0, 0, 0, 0, 456}`.)
[07:14:26] *** Quits: jjakob (~quassel@2a01:260:8028:10f0::62) (Quit: Either rebooting or something broke.)
[07:17:15] *** Joins: jjakob (~quassel@2a01:260:8028:10f0::62)
[07:17:20] *** Joins: Atque (~Atque@user/atque)
[07:17:38] <mike18_> b0nn: ok final question how can i skip to compare one field?
[07:17:50] <mike18_> i have a field called timestamp in my json
[07:17:55] <mike18_> dont want to compare that one
[07:19:31] <b0nn> SkippedObjectProperty looks like your jam
[07:19:51] *** Quits: mug3n_ (~mugen@gateway/tor-sasl/mugen) (Ping timeout: 276 seconds)
[07:20:03] <mike18_> or jgnore object ...
[07:21:15] *** Joins: mug3n_ (~mugen@gateway/tor-sasl/mugen)
[07:21:38] <mike18_> b0nn: i need to tell it somehow to skip comparing the timestamp between the json's ...
[07:23:52] <b0nn> hm, I don't think that you can
[07:26:44] <mike18_> damm
[07:26:48] <mike18_> than wrong library
[07:27:01] <mike18_> or how to compare than?
[07:27:17] <mike18_> take the expected timestamp and assignt toe actual?
[07:29:08] <foobaz> what about two structs, one with all fields except timestamp, the other with two fields - the first struct embedded plus the timestamp
[07:29:30] <mike18_> maybe ignore Added ?
[07:29:47] <mike18_> in the jsondiff
[07:30:05] <mike18_> https://github.com/nsf/jsondiff/blob/1e845ec5d249/jsondiff.go#L45 ... there is a added tag
[07:30:27] <mike18_> it will be changed actually than
[07:30:28] <mike18_> hm
[07:31:01] <mike18_> foobaz: thought a json diff lib can do all that work for me....
[07:34:35] <mike18_> use reflect.DeepEqual ?
[07:37:36] <whoami> mike18_: unmarshal into a map, delete the timestamp key, and compare?
[07:37:52] <fizzie> Is this intended for test or non-test use? Because for the former I've used github.com/google/go-cmp which has various options along those lines. But it's explicitly only for test use.
[07:38:12] <mike18_> github.com/google/go-cmp is a bit complex to use im my opineon
[07:38:40] <mike18_> whoami: example?
[07:39:14] <fizzie> (Then again, tests are also the stated primary purpose of that jsondiff.)
[07:40:10] <mike18_> its a test yeah
[07:40:19] <mike18_> i mean not really
[07:40:36] <mike18_> i read some data and what to check if they are as expected from a different data souce
[07:40:41] <mike18_> i mean rest api
[07:41:33] <mike18_> whoami: by Unmarshaling into a map[string]json.RawMessage. ?
[07:41:51] <whoami> sure, or map[interface{}][interface{}]?
[07:41:59] <mike18_> whats json.RawMessage ?
[07:42:12] <whoami> https://pkg.go.dev/encoding/json#RawMessage
[07:42:21] <mike18_> raw json
[07:42:22] <mike18_> ok
[07:43:06] *** Joins: bluedust (~bluedust@103.161.144.140)
[07:43:34] *** Quits: trafficjam (~qubes@2001:8004:5190:2c63:e001:c358:a4c2:b1e6) (Read error: Connection reset by peer)
[07:46:54] <mike18_> whoami: how to remove it from the map now and get it back to []byte?
[07:47:13] *** Joins: qubes (~qubes@2001:8004:5190:2c63:e001:c358:a4c2:b1e6)
[07:47:17] *** Quits: bluedust (~bluedust@103.161.144.140) (Ping timeout: 240 seconds)
[07:47:20] <whoami> json.Marshal?
[07:47:32] <whoami> You might just wanna go ahead and read the json package docs
[07:47:34] <mike18_> for _, e := range val.MapKeys() { ?
[07:47:57] *** Quits: qubes (~qubes@2001:8004:5190:2c63:e001:c358:a4c2:b1e6) (Client Quit)
[07:47:59] <mike18_> i mean: val := reflect.ValueOf(m) and than iterate: for _, e := range val.MapKeys()  ?
[07:48:32] <whoami> i'm confused why you're using reflection. my original understanding was that you had two JSON messages (i.e. bytes or string) and wanted to compare them, except for a key "timestamp"
[07:48:45] <whoami> so i'd unmarshal both, remove the key you don't want to compare, and then call something like assert.Equal
[07:48:54] <whoami> if you want to remarshal them you could, but you shouldn't have to afaik
[07:49:43] <whoami> but i guess there's some other edge cases like - do you just care that the JSON objects have the _same value_? or do you care that they are _identical messages_ (e.g. in ordering of their keys)
[07:49:52] <whoami> if the latter, you don't want to compare the JSON object, you want to compare the unmarshalled map.
[07:50:01] <mike18_> the keys might be unordered etc
[07:50:15] <whoami> err if the former i mean
[07:50:32] <whoami> is this for a test, or production code?
[07:50:41] <mike18_> no just some test
[07:50:44] <mike18_> not for prod
[07:51:48] <whoami> so just use assert.Equal on the unmarshalled maps
[07:52:16] *** Quits: souvik_ (~souvik@103.82.81.39) (Ping timeout: 250 seconds)
[07:52:19] <mike18_> but what for camparign floats?
[07:52:35] <mike18_> or keys are not sorted in json?
[07:52:46] <whoami> you care about the key ordering?
[07:54:13] *** Joins: souvik (~souvik@103.82.81.39)
[07:54:16] <mike18_> i guess not
[07:54:23] <mike18_> but i care about floating point compare
[07:55:40] <whoami> https://pkg.go.dev/encoding/json#Decoder.UseNumber
[07:55:46] <whoami> maybe this is what you're looking for?
[07:56:30] <mike18_> what to do with interface than?
[07:56:50] <mike18_> thinking of some float compare with an epsilon
[07:57:05] <mike18_> number would be integer?
[07:58:13] <whoami> i don't fully understand what you're asking, but i think you just need to read some docs here
[07:58:22] <whoami> https://pkg.go.dev/encoding/json#Unmarshal by default, unmarshal casts all numbers to float64
[07:58:28] <whoami> the json spec doesn't use floats or ints, it uses "json number"
[07:58:35] <whoami> UseNumber will use the json spec number i guess
[07:59:05] <whoami> https://pkg.go.dev/encoding/json#Number which is defined as a string
[07:59:12] <whoami> so the literal value should be compared, it looks as though
[07:59:23] <whoami> map[interface{}]json.RawMessage may also work as you suggested
[07:59:32] <whoami> (because it would leave all the values alone as raw []byte)
[08:00:22] <mike18_> i currently have a var actObjmap map[string]interface{}
[08:00:55] <whoami> i just don't know what behavior you want, but the docs above should give you whatever behavior you wish
[08:01:05] *** Joins: walterwhip (~www@user/walterwhip)
[08:01:06] <mike18_> what i want to say is when you compare a float64 you need and epsilon to compare it
[08:01:30] *** Quits: BrunoFontes (~bruno@187.115.253.43) (Ping timeout: 268 seconds)
[08:02:15] <mike18_> the mashaling into bytes didnt work for a var actObjmap map[interface{}]interface{} ... jsondiff.Compare needs byte as input
[08:02:18] <mike18_> it seems
[08:02:47] <mike18_> https://github.com/nsf/jsondiff/blob/master/jsondiff.go#L634
[08:02:49] <whoami> you could also call json.Marshal to get back to bytes. in that case i would stick with map[string]json.RawMessage to avoid tampering any more than necessary
[08:03:43] <whoami> i'm not following what you're saying with float though... are you trying to compare the literal values in the JSON object, or are you trying to round them?
[08:04:08] <foobaz> i don't think an epsilon is required in this particular case
[08:04:52] <mike18_> lets say if the data is generated by a other process and there are some rouding issues?
[08:05:17] <foobaz> then i would say they are legitimately not equal
[08:05:47] <mike18_> https://www.kidonaoto.com/post/comparing-two-jsons-with-float-values-in-python/
[08:05:56] <mike18_> thats for python - isnt it the same in go?
[08:06:37] <whoami> so what you're saying is that if JSON object a is set to "0.30000000000000004" and JSON object b is set to "0.3", you want them to compare as equal?
[08:06:43] <mike18_> yeah
[08:06:56] <whoami> ok, yeah, dunno what to tell you there, sorry
[08:07:01] <foobaz> you could use float32 to get some wiggle room
[08:07:02] <mike18_> and that is usally caused by rounding or not?
[08:07:18] <whoami> it's caused by floating point math
[08:07:28] <whoami> https://0.30000000000000004.com/
[08:07:36] <foobaz> floating point math is indeed why epsilon is used
[08:07:40] <mike18_> yeah
[08:07:46] <foobaz> but the examples we are discussing do not involve floating point math!
[08:07:51] <foobaz> just parsing a string
[08:08:06] <mike18_> i know - i just ask what can be done
[08:08:23] <mike18_> the data could be dynamically generated for example
[08:08:30] <foobaz> nice thing about using float32 is it's faster than float64
[08:08:42] <whoami> i mean honestly, it totally depends on the use case
[08:08:52] <whoami> if the system generating the data has enough precision, then these are NOT identical
[08:08:55] <mike18_> and with float32 doesnt need compare with epsilon?
[08:09:03] <whoami> so you need to know what's generating your inputs to decide how to handle it
[08:09:05] <foobaz> you don't need epsilon with either
[08:09:25] <foobaz> the arguments you are making here could equally be applied to integers
[08:09:28] <whoami> but i don't do much floating point math so i'm going to bow out
[08:09:48] <foobaz> if one process tallies up 1001 and another comes up with 1002, maybe those are close enough for you after all
[08:09:55] *** Joins: quosa (~jussiku@82-181-4-77.bb.dnainternet.fi)
[08:10:08] <whoami> good way to put it
[08:10:09] <foobaz> but then you need to define "close enough", it adds complexity, and introduces problems if you choose wrong
[08:10:21] <foobaz> strict equality is simpler, and would work fine here
[08:11:36] *** Quits: pepee (~pepee@user/pepee) (Quit: WeeChat 2.8)
[08:12:17] <foobaz> using an epsilon is often a best case practice when working with floating point, but comparing numbers parsed from strings is not a case where you need them
[08:12:26] <foobaz> because two strings that are equal will parse to the same float
[08:12:38] *** Joins: willow (~willow@user/willow)
[08:13:02] <foobaz> when doing math on floats, sometimes two things that should be equal don't end up equal, and epsilon is to work around that
[08:13:28] <foobaz> but there is no such math being done here
[08:15:04] *** Quits: quosa (~jussiku@82-181-4-77.bb.dnainternet.fi) (Ping timeout: 268 seconds)
[08:19:48] <willow> want to run gotour sample code locally (not in browser).  how do i import "golang.org/x/tour/pic"?  I already ran "go install golang.org/x/website/tour@latest"
[08:21:05] *** Joins: on^ (~on@50.231.5.242)
[08:25:03] *** Joins: yagamilito (~yagamilit@2601:642:4600:34b0:68a2:6953:6de0:8da2)
[08:26:15] *** Quits: crashrep (~crashrep@user/crashrep) (Quit: WeeChat 3.4)
[08:29:27] *** Joins: epony (epony@user/epony)
[08:31:24] <willow> nvm i'll just run the web tour locally and use the code window
[08:39:42] *** Quits: chenqisu1 (~chenqisu1@183.217.200.249) (Ping timeout: 256 seconds)
[08:46:04] *** Joins: rcernin_ (~rcernin@2001:8003:6803:db00:fd8c:4391:c384:e82c)
[08:50:32] *** Quits: rcernin_ (~rcernin@2001:8003:6803:db00:fd8c:4391:c384:e82c) (Ping timeout: 240 seconds)
[08:54:42] *** rudi_s_ is now known as rudi_s
[09:02:37] *** Quits: souvik (~souvik@103.82.81.39) (Ping timeout: 240 seconds)
[09:06:58] *** Joins: sdfgsdfg (~dfghsfgs@user/sdfgsdfg)
[09:15:52] *** Joins: ghost08 (~ghost08@adsl-dyn-18.95-102-48.t-com.sk)
[09:20:44] *** Joins: fef (~thedawn@user/thedawn)
[09:25:41] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[09:26:44] *** Quits: pagnol (~user@014198154145.ctinets.com) (Ping timeout: 250 seconds)
[09:27:24] *** Joins: Leon_ (~Leon@85.sub-174-198-194.myvzw.com)
[09:27:45] *** Joins: mncheckm (~mncheck@193.224.205.254)
[09:27:49] *** Leon_ is now known as Guest7929
[09:27:51] *** Joins: crm (~crm@70.120.0.94)
[09:27:59] *** Joins: Thedarkb1-Work (~Thedarkb@62.232.253.82)
[09:28:23] *** Joins: cim4 (~cim@205.185.117.110)
[09:28:31] *** Joins: grumb29 (~grumb@rint.osaka)
[09:28:47] *** Joins: KDDLB6 (kevin@user/kddlb)
[09:28:48] *** Quits: fef (~thedawn@user/thedawn) (Quit: Leaving)
[09:29:07] *** Joins: quosa (~jussiku@82-181-4-77.bb.dnainternet.fi)
[09:29:16] *** Joins: rcernin_ (~rcernin@101.189.141.138)
[09:29:31] *** Joins: lithamme- (~lithammer@2a02:2770::21a:4aff:fe88:c18d)
[09:29:39] *** Joins: RaySl (~raysl@sdf1.xen.prgmr.com)
[09:29:41] *** Joins: Bitflux (~byte@byteflux.net)
[09:29:42] *** Joins: brooks00 (~brooks@23.157.160.131)
[09:29:58] *** Joins: batdog_ (batdog@lnsq.elkins.co)
[09:30:13] *** Joins: _lungaro_ (~lungaro@99-117-118-33.lightspeed.sndgca.sbcglobal.net)
[09:30:21] *** Joins: marlinc_ (~marlinc@user/marlinc)
[09:30:45] *** Joins: walterwhip_ (~www@103.251.64.254)
[09:30:51] *** Joins: acosta7 (~acosta@163.172.62.165)
[09:31:03] *** Joins: effprime_ (~effprime@user/effprime)
[09:31:05] *** Quits: walterwhip_ (~www@103.251.64.254) (Client Quit)
[09:31:12] *** Joins: __alex_ (~alex@ip5f5be2d7.dynamic.kabel-deutschland.de)
[09:31:17] *** Joins: packet_lozenge_ (~packet_lo@user/packet-lozenge/x-7125090)
[09:31:44] *** Joins: glats_ (~glats@45.77.73.141)
[09:31:55] *** Joins: SuperL4g (~akulbe@user/superlag)
[09:32:02] *** Joins: et_ (~et@user/et)
[09:32:02] *** Joins: siXy_ (~jfindley@centos/ops/sixy)
[09:32:02] *** Joins: zanshin_ (~zanshin@ip24-255-217-102.ks.ks.cox.net)
[09:32:12] *** Joins: bch_ (~bch@S01069050ca2cbf63.ok.shawcable.net)
[09:32:26] *** Quits: ghost08 (~ghost08@adsl-dyn-18.95-102-48.t-com.sk) (Quit: WeeChat 3.4)
[09:32:37] *** Quits: et (~et@user/et) (Ping timeout: 240 seconds)
[09:32:37] *** et_ is now known as et
[09:32:43] *** Joins: ghost08 (~ghost08@adsl-dyn-18.95-102-48.t-com.sk)
[09:33:08] *** Joins: halden^ (~halden@lden.im)
[09:33:30] *** Joins: qwedfg_ (~qwedfg@user/qwedfg)
[09:34:00] *** Quits: quosa (~jussiku@82-181-4-77.bb.dnainternet.fi) (Ping timeout: 268 seconds)
[09:35:49] *** Quits: ghost08 (~ghost08@adsl-dyn-18.95-102-48.t-com.sk) (Client Quit)
[09:36:08] *** Joins: ghost08 (~ghost08@adsl-dyn-18.95-102-48.t-com.sk)
[09:36:48] *** Joins: jolan_ (~jolan@ec2.jolan.org)
[09:36:56] *** Joins: go_ (~puck@undernet.hu)
[09:37:08] *** Joins: daved (~daved@162.67.197.35.bc.googleusercontent.com)
[09:37:08] *** Quits: walterwhip (~www@user/walterwhip) (*.net *.split)
[09:37:08] *** Quits: on^ (~on@50.231.5.242) (*.net *.split)
[09:37:08] *** Quits: rcernin (~rcernin@101.189.141.138) (*.net *.split)
[09:37:08] *** Quits: yamchah2 (~yamchah2@user/yamchah2) (*.net *.split)
[09:37:08] *** Quits: jkovac1 (~jkovac1@user/jkovac1) (*.net *.split)
[09:37:08] *** Quits: muirrum (~muirrum@sourcehut/user/muirrum) (*.net *.split)
[09:37:08] *** Quits: mike18_ (~geri@71-220-52-187.mpls.qwest.net) (*.net *.split)
[09:37:09] *** Quits: remote (~self@user/hackers) (*.net *.split)
[09:37:09] *** Quits: Seirdy (~Seirdy@sourcehut/user/seirdy) (*.net *.split)
[09:37:09] *** Quits: Batzy (~quassel@user/batzy) (*.net *.split)
[09:37:09] *** Quits: nabromov (~nabromov@176.26.119.61) (*.net *.split)
[09:37:09] *** Quits: mncheck (~mncheck@193.224.205.254) (*.net *.split)
[09:37:09] *** Quits: pinpox (~pinpox@v2202101107577140883.nicesrv.de) (*.net *.split)
[09:37:09] *** Quits: go (~puck@undernet.hu) (*.net *.split)
[09:37:09] *** Quits: GJdan (~quassel@107-190-26-133.cpe.teksavvy.com) (*.net *.split)
[09:37:09] *** Quits: __alex (~alex@ip5f5be2d7.dynamic.kabel-deutschland.de) (*.net *.split)
[09:37:09] *** Quits: deckard (~deckard@user/deckard) (*.net *.split)
[09:37:09] *** Quits: LtHummus (~lthummus@97-126-121-3.tukw.qwest.net) (*.net *.split)
[09:37:09] *** Quits: llorllale (~llorllale@198.98.119.85) (*.net *.split)
[09:37:09] *** Quits: lungaro_ (~lungaro@99-117-118-33.lightspeed.sndgca.sbcglobal.net) (*.net *.split)
[09:37:09] *** Quits: lithammer (~lithammer@arch-vps.cloud.tilaa.com) (*.net *.split)
[09:37:09] *** Quits: ldiamond (~ldiamond@user/ldiamond) (*.net *.split)
[09:37:09] *** Quits: xse (~xse@user/xse) (*.net *.split)
[09:37:09] *** Quits: qwedfg (~qwedfg@user/qwedfg) (*.net *.split)
[09:37:09] *** Quits: brooks0 (~brooks@23.157.160.131) (*.net *.split)
[09:37:09] *** Quits: theoceaniscool (~theoceani@119.12.241.29) (*.net *.split)
[09:37:09] *** Quits: amk (~amk@109.255.169.126) (*.net *.split)
[09:37:09] *** Quits: leonthemisfit (~Leon@user/leonthemisfit) (*.net *.split)
[09:37:09] *** Quits: bch (~bch@S01069050ca2cbf63.ok.shawcable.net) (*.net *.split)
[09:37:09] *** Quits: Spydar007 (~spydar007@user/spydar007) (*.net *.split)
[09:37:09] *** Quits: mika (~mika@odysseus.grml.info) (*.net *.split)
[09:37:09] *** Quits: jolan (~jolan@ec2.jolan.org) (*.net *.split)
[09:37:09] *** Quits: tau (tau@user/tau) (*.net *.split)
[09:37:09] *** Quits: muesli (~muesli@fribbledom.com) (*.net *.split)
[09:37:09] *** Quits: SuperLag (~akulbe@user/superlag) (*.net *.split)
[09:37:09] *** Quits: shankar (~shankar@user/shankar) (*.net *.split)
[09:37:09] *** Quits: chasmo77 (~chas77@c-71-193-246-4.hsd1.or.comcast.net) (*.net *.split)
[09:37:09] *** Quits: n1000 (~n1000@user/n1000) (*.net *.split)
[09:37:09] *** Quits: Thedarkb-Work (~Thedarkb@62.232.253.82) (*.net *.split)
[09:37:09] *** Quits: grumb2 (~grumb@rint.osaka) (*.net *.split)
[09:37:09] *** Quits: ethoxy (~root@bison.alphaw0lf.xyz) (*.net *.split)
[09:37:09] *** Quits: Disconsented (~quassel@107.170.227.20) (*.net *.split)
[09:37:09] *** Quits: sagax (~sagax_nb@user/sagax) (*.net *.split)
[09:37:09] *** Quits: scjosh (~scjosh@206.189.79.69) (*.net *.split)
[09:37:09] *** Quits: neverwas (jpneverwas@swissbox.unperson.link) (*.net *.split)
[09:37:09] *** Quits: jakew (~jakew@91.110.109.236) (*.net *.split)
[09:37:09] *** Quits: orthoplex64 (~crm@70.120.0.94) (*.net *.split)
[09:37:09] *** Quits: packet_lozenge (~packet_lo@user/packet-lozenge/x-7125090) (*.net *.split)
[09:37:09] *** Quits: siXy (~jfindley@centos/ops/sixy) (*.net *.split)
[09:37:09] *** Quits: koolazer (~koo@user/koolazer) (*.net *.split)
[09:37:09] *** Quits: NOTevil (~notevil@user/notevil) (*.net *.split)
[09:37:09] *** Quits: aaaaa (~a@65.79.136.69) (*.net *.split)
[09:37:09] *** Quits: Lost (~spinning@user/lost) (*.net *.split)
[09:37:09] *** Quits: RayS (~raysl@sdf1.xen.prgmr.com) (*.net *.split)
[09:37:09] *** Quits: tristero (~nobody@user/tristero) (*.net *.split)
[09:37:09] *** Quits: acosta (~acosta@163.172.62.165) (*.net *.split)
[09:37:09] *** Quits: daved_ (~daved@162.67.197.35.bc.googleusercontent.com) (*.net *.split)
[09:37:09] *** Quits: halden (~halden@lden.im) (*.net *.split)
[09:37:09] *** Quits: glats (~glats@45.77.73.141) (*.net *.split)
[09:37:09] *** Quits: effprime (~effprime@user/effprime) (*.net *.split)
[09:37:09] *** Quits: noonien (~noonien@user/noonien) (*.net *.split)
[09:37:09] *** Quits: Byteflux (~byte@byteflux.net) (*.net *.split)
[09:37:09] *** Quits: cim (~cim@205.185.117.110) (*.net *.split)
[09:37:09] *** Quits: KDDLB (~Kevin@user/kddlb) (*.net *.split)
[09:37:09] *** Quits: achilleas (~ach@user/achilleas) (*.net *.split)
[09:37:09] *** Quits: marlinc (~marlinc@user/marlinc) (*.net *.split)
[09:37:10] *** Quits: zanshin (~zanshin@user/zanshin) (*.net *.split)
[09:37:10] *** Quits: batdog (~batdog@lnsq.elkins.co) (*.net *.split)
[09:37:10] *** Quits: kshockey (~kyshoc@adsl-99-93-208-248.dsl.mtry01.sbcglobal.net) (*.net *.split)
[09:37:10] *** Quits: Piraty (~irc@user/piraty) (*.net *.split)
[09:37:10] *** Quits: avakand (~avakand@static.164.226.201.195.clients.your-server.de) (*.net *.split)
[09:37:10] *** Quits: trewq (~trewq@li70-4.members.linode.com) (*.net *.split)
[09:37:10] *** Quits: Fish (~Fish@cartwheel.9grid.fr) (*.net *.split)
[09:37:10] *** Quits: dove (~jordan@li1158-85.members.linode.com) (*.net *.split)
[09:37:10] *** Quits: flynn (~mcbloch@user/flynn) (*.net *.split)
[09:37:11] *** acosta7 is now known as acosta
[09:37:11] *** KDDLB6 is now known as KDDLB
[09:37:11] *** cim4 is now known as cim
[09:37:37] *** glats_ is now known as glats
[09:37:45] *** Joins: Seirdy (~Seirdy@sourcehut/user/seirdy)
[09:38:05] *** Quits: ghost08 (~ghost08@adsl-dyn-18.95-102-48.t-com.sk) (Client Quit)
[09:38:15] *** Joins: on^ (~on@50.231.5.242)
[09:38:22] *** Joins: ghost08 (~ghost08@adsl-dyn-18.95-102-48.t-com.sk)
[09:39:48] *** Quits: sdfgsdfg (~dfghsfgs@user/sdfgsdfg) (Quit: ayo yoyo ayo yoyo hololo, hololo.)
[09:42:50] *** Joins: amk (~amk@109.255.169.126)
[09:42:50] *** Joins: llorllale (~llorllale@198.98.119.85)
[09:42:50] *** Joins: jakew (~jakew@91.110.109.236)
[09:42:50] *** Joins: ldiamond (~ldiamond@142.126.46.115)
[09:42:50] *** Joins: ethoxy (~root@bison.alphaw0lf.xyz)
[09:42:50] *** Joins: kyshoc (~kyshoc@adsl-99-93-208-248.dsl.mtry01.sbcglobal.net)
[09:42:50] *** Joins: LtHummus_ (~lthummus@97-126-121-3.tukw.qwest.net)
[09:42:50] *** Joins: yamchah2 (~yamchah2@user/yamchah2)
[09:42:50] *** Joins: jkovac1 (~jkovac1@user/jkovac1)
[09:42:50] *** Joins: muirrum (~muirrum@sourcehut/user/muirrum)
[09:42:50] *** Joins: remote (~self@user/hackers)
[09:42:50] *** Joins: Batzy (~quassel@user/batzy)
[09:42:50] *** Joins: nabromov (~nabromov@176.26.119.61)
[09:42:50] *** Joins: pinpox (~pinpox@v2202101107577140883.nicesrv.de)
[09:42:50] *** Joins: deckard (~deckard@user/deckard)
[09:42:50] *** Joins: xse (~xse@user/xse)
[09:42:50] *** Joins: Spydar007 (~spydar007@user/spydar007)
[09:42:50] *** Joins: mika (~mika@odysseus.grml.info)
[09:42:50] *** Joins: muesli (~muesli@fribbledom.com)
[09:42:50] *** Joins: shankar (~shankar@user/shankar)
[09:42:50] *** Joins: chasmo77 (~chas77@c-71-193-246-4.hsd1.or.comcast.net)
[09:42:50] *** Joins: n1000 (~n1000@user/n1000)
[09:42:50] *** Joins: Disconsented (~quassel@107.170.227.20)
[09:42:50] *** Joins: scjosh (~scjosh@206.189.79.69)
[09:42:50] *** Joins: neverwas (jpneverwas@swissbox.unperson.link)
[09:42:50] *** Joins: NOTevil (~notevil@user/notevil)
[09:42:50] *** Joins: aaaaa (~a@65.79.136.69)
[09:42:50] *** Joins: Lost (~spinning@user/lost)
[09:42:50] *** Joins: tristero (~nobody@user/tristero)
[09:42:50] *** Joins: noonien (~noonien@user/noonien)
[09:42:50] *** Joins: achilleas (~ach@user/achilleas)
[09:42:50] *** Joins: Piraty (~irc@user/piraty)
[09:42:50] *** Joins: avakand (~avakand@static.164.226.201.195.clients.your-server.de)
[09:42:50] *** Joins: trewq (~trewq@li70-4.members.linode.com)
[09:42:50] *** Joins: Fish (~Fish@cartwheel.9grid.fr)
[09:42:50] *** Joins: dove (~jordan@li1158-85.members.linode.com)
[09:42:50] *** Joins: flynn (~mcbloch@user/flynn)
[09:43:02] *** Joins: Atque (~Atque@user/atque)
[09:43:36] *** Joins: tau (tau@user/tau)
[09:44:09] *** Joins: theoceaniscool (~theoceani@119.12.241.29)
[09:45:17] *** Quits: adip (~adip@deo188.neoplus.adsl.tpnet.pl) (Ping timeout: 252 seconds)
[09:46:53] *** Quits: sailorCat (~sailorCat@mail2.gajsin.name) (Quit: ZNC 1.8.2 - https://znc.in)
[09:47:01] *** Joins: adip (~adip@crd88.neoplus.adsl.tpnet.pl)
[09:47:07] *** Joins: sailorCat (~sailorCat@mail2.gajsin.name)
[09:48:02] *** Quits: naicam| (~naicam|ne@wireguard/tunneler/naicamne) (Ping timeout: 252 seconds)
[09:49:36] *** Joins: bluedust (~bluedust@103.161.144.140)
[09:49:41] *** Quits: bluedust (~bluedust@103.161.144.140) (Remote host closed the connection)
[09:49:56] *** Joins: bluedust (~bluedust@103.161.144.140)
[09:50:10] *** Quits: bluedust (~bluedust@103.161.144.140) (Remote host closed the connection)
[09:50:27] *** Joins: bluedust (~bluedust@103.161.144.140)
[09:54:34] *** Joins: koolazer (~koo@user/koolazer)
[10:00:09] *** Joins: bkircher (~bkircher@2001:a61:2506:9301:af0b:a40a:8043:cfe7)
[10:10:32] *** Joins: quosa (~jussiku@82-181-4-77.bb.dnainternet.fi)
[10:18:07] *** Joins: fef (~thedawn@user/thedawn)
[10:25:36] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[10:34:54] *** Joins: walterwhip (~www@user/walterwhip)
[10:35:51] *** Joins: jcajka (~jcajka@2a02:8308:a106:d100::4ac5)
[10:37:31] *** Quits: veegee (~veegee@ipagstaticip-469c2903-2b07-6dc3-3bc2-98748da5ca77.sdsl.bell.ca) (Quit: Textual IRC Client: www.textualapp.com)
[10:40:02] *** Joins: jla (~jordi@64.225.79.195)
[10:42:32] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:144d:71e8:f3fd:20f1)
[10:48:20] *** Quits: jla (~jordi@64.225.79.195) (Ping timeout: 256 seconds)
[10:49:29] *** Quits: jcajka (~jcajka@2a02:8308:a106:d100::4ac5) (Ping timeout: 250 seconds)
[10:49:53] *** Joins: jcajka (~jcajka@2a02:8308:a106:d100::4ac5)
[10:52:24] *** Quits: rcernin_ (~rcernin@101.189.141.138) (Quit: WeeChat 3.4)
[10:57:59] *** Quits: Tv_ (uid62079@user/tv/x-3144562) (Quit: Connection closed for inactivity)
[11:05:40] *** Joins: bkicher_ (~bkircher@ppp-93-104-113-21.dynamic.mnet-online.de)
[11:08:16] *** Quits: bkircher (~bkircher@2001:a61:2506:9301:af0b:a40a:8043:cfe7) (Ping timeout: 245 seconds)
[11:09:15] *** Quits: shankar (~shankar@user/shankar) (Remote host closed the connection)
[11:09:30] <willow> just want to be clear on this: any time an array is declared and the size is empty, then it is actually a slice?
[11:09:50] <willow> and any time make is used, then it is a slice not an array?
[11:10:39] <willow> and when ... are used, that is only to automatically provide the correct size for a declared array literal?
[11:11:09] *** Joins: shtirlic (~shtirlic@pppoe.95-55-137-7.dynamic.avangarddsl.ru)
[11:15:02] *** Quits: shtirlic_ (~shtirlic@pppoe.95-55-137-7.dynamic.avangarddsl.ru) (Ping timeout: 240 seconds)
[11:20:20] <bookworm> willow: if the size is empty you aren't declaring an array at all
[11:20:51] <bookworm> https://go.dev/ref/spec#Array_types
[11:22:04] <bookworm> ... is just syntactic sugar so that the compiler counts for you, you can only use it if you immediately provide all elements [...]int{1,2,3}
[11:23:05] <bookworm> generally unless you are doing very specific stuff you tend to use slices rather than arrays
[11:23:20] <willow> s := []int{2, 3}     that is a slice because the size is not defined.  but if it were s := [2]int{2, 3} then it would be an array?
[11:24:35] <willow> s := [...]int{2, 3}   is also an array, not a slice?
[11:31:38] *** Joins: xsteadfastx (~marv@94.31.99.245)
[11:34:46] *** Joins: leonarth (~leonarth@user/leonarth)
[11:36:25] <bookworm> yes
[11:36:27] *** Joins: CoolerX (~CoolerX@user/coolerx)
[11:38:26] *** Joins: GJdan (~quassel@107-190-26-133.cpe.teksavvy.com)
[11:40:34] *** Joins: absc (~absc@81.31.144.28)
[11:42:40] *** Quits: jcajka (~jcajka@2a02:8308:a106:d100::4ac5) (Quit: Leaving)
[11:44:43] *** Joins: saschagrunert (~saschagru@46.128.124.48)
[11:44:56] *** Quits: saschagrunert (~saschagru@46.128.124.48) (Remote host closed the connection)
[11:46:58] *** Joins: saschagrunert (~saschagru@46.128.124.48)
[11:47:16] *** Quits: remote (~self@user/hackers) (Ping timeout: 256 seconds)
[11:48:00] *** Quits: flughafen (~flughafen@p5de8e515.dip0.t-ipconnect.de) (Quit: WeeChat 2.8)
[11:48:44] *** Joins: chenqisu1 (~chenqisu1@183.217.200.249)
[11:48:45] *** Joins: remote (~self@user/hackers)
[11:49:30] *** Joins: jla (~jordi@64.225.79.195)
[11:50:35] *** Joins: trafficjam (~qubes@2001:8004:5190:2c63:e001:c358:a4c2:b1e6)
[11:50:49] <trafficjam> what does `copy(a[i:], a[i+1:])` do?
[11:51:14] *** Quits: CoolerX (~CoolerX@user/coolerx) (Ping timeout: 260 seconds)
[11:51:37] <trafficjam> `copy` copies to a slice, from a slice
[11:51:47] <trafficjam> so if a = int[]{1,2,3,4,5}
[11:52:05] <trafficjam> and i = 2
[11:52:23] <trafficjam> a[i:] = {3,4,5}, and a[i+1:] = {4,5}
[11:52:34] *** Joins: CoolerX (~CoolerX@user/coolerx)
[11:52:38] <trafficjam> but what does copy({3,4,5}, {4,5}) do?
[11:53:02] <trafficjam> oh it just sets {3,4,5} to {4,5}?
[11:53:30] <trafficjam> but does that change the underlying value of a?
[11:53:32] *** Quits: walterwhip (~www@user/walterwhip) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[11:56:21] <bookworm> you copy over all elements from i onwards over the storage from i's position... you are effectively removing an element
[11:56:37] <bookworm> and yes, that modifies the underlying array
[11:56:43] *** Quits: nabromov (~nabromov@176.26.119.61) (Quit: WeeChat 3.3)
[11:58:37] *** Joins: souvik (~souvik@103.82.81.39)
[12:01:09] <zutt> trafficjam: https://github.com/golang/go/wiki/SliceTricks https://ueokande.github.io/go-slice-tricks/ https://gist.github.com/GimmyHchs/33bd06e68d72a913a8587b09d41b50d0
[12:01:11] <trafficjam> bookworm: so is it basically replacing the addresses on the left with the addresses on the right?
[12:01:25] <zutt> handy cheatsheets (contains same information mostly) for slice operations :)
[12:02:04] <trafficjam> i.e. &3 becomes &4, &4 becomes &5, and the final &5 in a isn't changed bacause there are no more elements to copy from in {4,5}?
[12:02:11] <trafficjam> ah thanks zutt
[12:03:05] *** Quits: yagamilito (~yagamilit@2601:642:4600:34b0:68a2:6953:6de0:8da2) (Quit: Client closed)
[12:03:20] *** Quits: souvik (~souvik@103.82.81.39) (Ping timeout: 252 seconds)
[12:06:01] *** Joins: jespada (~jespada@87.74.36.188)
[12:06:11] *** Joins: sdfgsdfg (~dfghsfgs@user/sdfgsdfg)
[12:08:42] *** Joins: bk__ (~bkircher@2001:a61:24c9:9301:c70b:7b10:9434:b399)
[12:09:53] <j416> trafficjam: there are no addresses involved, it copies the data
[12:10:40] <j416> (although, I don't know how the underlying mechanics work -- in effect, the data is copied)
[12:10:51] <trafficjam> j416: i thought it changes the underlying slice though
[12:10:57] *** Quits: bkicher_ (~bkircher@ppp-93-104-113-21.dynamic.mnet-online.de) (Ping timeout: 240 seconds)
[12:11:04] <j416> sure
[12:11:43] <trafficjam> yeah i suppose it depends on how lists are implemented in Go
[12:11:58] <trafficjam> i'm relatively new to the language so i can't say i know
[12:12:26] <j416> []int is a slice of int, not pointer to int
[12:12:41] <j416> i = a[0] copies element 0 of a to i
[12:23:47] <bookworm> pointers have nothing to do with it as _j416 already tried to explain... it's all based on the actual values
[12:25:00] <bookworm> in essence an array is a fixed range of memory somewhere... The compiler knows that if the start location is at memory address X then the second element is at location X+sizeof(element) etc
[12:25:23] <bookworm> (plus padding bytes for alignment if needed)
[12:25:33] <bookworm> not that you ever need to care
[12:26:38] *** Joins: souvik (~souvik@103.82.81.39)
[12:28:57] *** Joins: pagnol (~user@014198154145.ctinets.com)
[12:30:54] *** Quits: tesuji_ (~quassel@2a02:908:180:9500:a0da:e697:f0fa:d750) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[12:31:28] *** Quits: souvik (~souvik@103.82.81.39) (Ping timeout: 256 seconds)
[12:32:37] *** Quits: trafficjam (~qubes@2001:8004:5190:2c63:e001:c358:a4c2:b1e6) (Ping timeout: 240 seconds)
[12:33:42] *** Joins: jcajka (~jcajka@2a02:8308:a106:d100::4ac5)
[12:33:51] *** Joins: trafficjam (~qubes@2001:8004:5190:2c63:4c8f:ea0e:1c15:da19)
[12:34:13] *** Joins: souvik (~souvik@103.82.81.39)
[12:34:45] *** Joins: flughafen (~flughafen@p5de8e515.dip0.t-ipconnect.de)
[12:35:06] *** Quits: sudoforge (~sudoforge@wireguard/tunneler/sudoforge) (Ping timeout: 260 seconds)
[12:37:01] *** Quits: xsteadfastx (~marv@94.31.99.245) (Ping timeout: 245 seconds)
[12:37:14] *** Joins: eXtr3m0 (~eXtr3m0@user/eXtr3m0)
[12:37:39] *** Joins: walterwhip (~www@user/walterwhip)
[12:38:28] *** Quits: walterwhip (~www@user/walterwhip) (Client Quit)
[12:40:32] *** Quits: souvik (~souvik@103.82.81.39) (Ping timeout: 240 seconds)
[12:43:09] *** Joins: aLeSD_ (~aLeSD@139.47.114.114)
[12:44:23] *** Quits: aLeSD (~aLeSD@139.47.114.114) (Read error: Connection reset by peer)
[12:47:01] *** Quits: synthmeat (~synthmeat@user/synthmeat) (Quit: WeeChat 3.0)
[12:49:22] *** Quits: aLeSD_ (~aLeSD@139.47.114.114) (Quit: Leaving)
[12:49:43] *** Quits: on^ (~on@50.231.5.242) (Ping timeout: 250 seconds)
[12:51:33] *** Quits: jla (~jordi@64.225.79.195) (Remote host closed the connection)
[12:59:14] *** Joins: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl)
[12:59:17] *** Quits: kodah- (~kodah@user/kodah) (Ping timeout: 240 seconds)
[12:59:35] *** Quits: _mikey (~mikey@user/mikey/x-4335048) (Quit: WeeChat 3.4)
[12:59:59] *** Joins: synthmeat (~synthmeat@user/synthmeat)
[13:00:51] *** Quits: sdfgsdfg (~dfghsfgs@user/sdfgsdfg) (Quit: ayo yoyo ayo yoyo hololo, hololo.)
[13:01:38] *** Joins: kodah- (~kodah@user/kodah)
[13:03:22] *** Quits: saschagrunert (~saschagru@46.128.124.48) (Remote host closed the connection)
[13:07:49] *** Quits: kodah- (~kodah@user/kodah) (Ping timeout: 240 seconds)
[13:08:13] *** Joins: kodah- (~kodah@user/kodah)
[13:12:42] *** Joins: dntreou (~yakiza@inet-2a02-6900-8808-e010--29b.oracle-ocna.com)
[13:16:43] *** Quits: mickey8 (~user@user/mickey) (Remote host closed the connection)
[13:16:54] *** Joins: zer0bitz (~zer0bitz@2001:2003:f444:a000:9102:5c27:2e48:97c2)
[13:17:08] *** Joins: mickey8 (~user@user/mickey)
[13:17:23] *** Joins: aLeSD (~aLeSD@139.47.114.114)
[13:17:29] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:144d:71e8:f3fd:20f1) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[13:18:19] *** Joins: xsteadfastx (~marv@94.31.99.245)
[13:21:29] *** Joins: bluedust_ (~bluedust@59.98.49.134)
[13:24:44] *** Quits: bluedust (~bluedust@103.161.144.140) (Ping timeout: 252 seconds)
[13:25:12] *** Joins: locrian9 (~mike@211.sub-174-193-208.myvzw.com)
[13:25:36] *** Joins: rendar (~rendar@user/rendar)
[13:29:03] *** Joins: souvik (~souvik@103.82.81.39)
[13:29:36] *** Joins: sdfgsdfg (~dfghsfgs@user/sdfgsdfg)
[13:33:48] *** Quits: souvik (~souvik@103.82.81.39) (Ping timeout: 256 seconds)
[13:33:55] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:144d:71e8:f3fd:20f1)
[13:34:05] *** Joins: shka (~herr@109.231.0.226)
[13:36:12] *** Quits: jjakob (~quassel@2a01:260:8028:10f0::62) (Quit: Either rebooting or something broke.)
[13:40:48] *** Quits: trafficjam (~qubes@2001:8004:5190:2c63:4c8f:ea0e:1c15:da19) (Read error: Connection reset by peer)
[13:41:01] *** Quits: cation (cation@user/cation) (Ping timeout: 240 seconds)
[13:41:46] *** Joins: cation (cation@user/cation)
[13:41:47] *** Joins: Jad (~Nashmi@user/jad)
[13:43:56] *** Joins: krux02 (~krux02@p200300e81723dd00b48b627b8314596f.dip0.t-ipconnect.de)
[13:46:14] *** Joins: trafficjam (~qubes@2001:8004:5190:2c63:4c8f:ea0e:1c15:da19)
[13:52:33] *** Quits: cation (cation@user/cation) (Ping timeout: 250 seconds)
[14:02:02] *** Joins: cation (cation@user/cation)
[14:12:19] *** Joins: souvik (~souvik@103.82.81.39)
[14:15:32] *** Quits: teasea (~teasea@user/teasea) (Quit: teasea)
[14:16:32] *** Quits: xsteadfastx (~marv@94.31.99.245) (Ping timeout: 240 seconds)
[14:16:35] *** Joins: teasea (~teasea@user/teasea)
[14:32:10] *** Quits: remote (~self@user/hackers) (Ping timeout: 256 seconds)
[14:33:58] *** Joins: remote (~self@user/hackers)
[14:36:05] *** Quits: locrian9 (~mike@211.sub-174-193-208.myvzw.com) (Quit: Lost terminal)
[14:40:59] *** Joins: alwyn (~alwyn@user/alwyn)
[14:44:02] *** Quits: absc (~absc@81.31.144.28) (Quit: Leaving)
[14:44:22] *** Joins: absc (~absc@81.31.144.28)
[14:46:11] *** Joins: AquaL1te (~AquaL1te@user/aqual1te)
[14:47:24] *** Quits: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl) (Quit: jaca122)
[14:53:10] *** Joins: xsteadfastx (~marv@94.31.99.245)
[15:07:06] *** Quits: mug3n_ (~mugen@gateway/tor-sasl/mugen) (Remote host closed the connection)
[15:07:32] *** Joins: mug3n_ (~mugen@gateway/tor-sasl/mugen)
[15:09:13] *** Quits: trafficjam (~qubes@2001:8004:5190:2c63:4c8f:ea0e:1c15:da19) (Read error: Connection reset by peer)
[15:12:26] *** Quits: zer0bitz (~zer0bitz@2001:2003:f444:a000:9102:5c27:2e48:97c2) (Read error: Connection reset by peer)
[15:12:28] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:144d:71e8:f3fd:20f1) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[15:14:39] *** Joins: trafficjam (~qubes@2001:8004:5190:2c63:4c8f:ea0e:1c15:da19)
[15:16:57] *** Joins: itsalexjones (~itsalexjo@82.4.99.241)
[15:17:09] *** Joins: arinov (~arinov@85.106.97.174)
[15:19:21] *** Joins: walterwhip (~www@user/walterwhip)
[15:19:45] *** Quits: jasonwucj (uid13975@id-13975.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[15:26:13] *** Quits: iryith1 (~iryith3@207.81-166-89.customer.lyse.net) (Quit: Leaving)
[15:26:29] *** Joins: iryith (~iryith3@207.81-166-89.customer.lyse.net)
[15:26:29] *** Quits: iryith (~iryith3@207.81-166-89.customer.lyse.net) (Changing host)
[15:26:29] *** Joins: iryith (~iryith3@user/iryith)
[15:27:40] <chilversc> when running go test ./..., is there an option to show relative directory names instead of the full package name?
[15:36:36] *** Quits: arinov (~arinov@85.106.97.174) (Ping timeout: 268 seconds)
[15:37:43] *** Quits: ghost08 (~ghost08@adsl-dyn-18.95-102-48.t-com.sk) (Quit: WeeChat 3.4)
[15:38:26] *** Joins: ghost08 (~ghost08@adsl-dyn-18.95-102-48.t-com.sk)
[15:39:52] <j416> reading through some commits in the Go project, I frequently see the trailer "Trust:"; I can't find any explanation of what this means. Can anyone enlighten me?
[15:41:28] <j416> ah; I bet it means they trust the change but hasn't reviewed it fully. https://go.dev/doc/contribute
[15:42:25] <j416> it's funny how some authors Trust: their own commits o_O
[15:43:14] *** Quits: sdfgsdfg (~dfghsfgs@user/sdfgsdfg) (Quit: ayo yoyo ayo yoyo hololo, hololo.)
[15:45:11] *** Joins: sdfgsdfg (~dfghsfgs@user/sdfgsdfg)
[15:51:01] *** Quits: dntreou (~yakiza@inet-2a02-6900-8808-e010--29b.oracle-ocna.com) (Ping timeout: 240 seconds)
[15:51:23] *** Joins: huoy99 (~huoy99@gateway/vpn/pia/huoy99)
[15:53:19] <huoy99> is this an antipattern? https://go.dev/play/p/dTfQ80iCEN9 particularly worried about holding buf like that.
[15:57:20] *** Quits: shokohsc (~shokohsc@lfbn-idf2-1-1472-129.w92-169.abo.wanadoo.fr) (Read error: Connection reset by peer)
[15:58:38] *** Joins: shokohsc (~shokohsc@lfbn-idf2-1-1472-129.w92-169.abo.wanadoo.fr)
[15:58:38] *** Joins: zer0bitz (~zer0bitz@2001:2003:f444:a000:e4b0:adf8:305f:a850)
[16:06:54] <j416> seems complex
[16:08:18] <bookworm> initializing the ticker to a nonsense value especially
[16:09:20] <j416> huoy99: also, what if there are multiple writers to data? you might miss a message this way. Cf. https://go.dev/play/p/YzDPXchPl8L
[16:09:53] <huoy99> j416: that's intended. the last one to come through should take precedence
[16:10:59] <j416> difficult to judge implementation without knowing what it's for
[16:11:07] *** Joins: cobber (~protorom@213.240.182.38)
[16:11:17] *** Quits: CoolerX (~CoolerX@user/coolerx) (Ping timeout: 240 seconds)
[16:13:01] *** Quits: ghost08 (~ghost08@adsl-dyn-18.95-102-48.t-com.sk) (Quit: WeeChat 3.4)
[16:13:55] <huoy99> i have an image i need to classify. the data comes from a foreign server. sometimes the server can send more than 1 image, which only the last image matters. but i need to classify it only after some condition is met, hence the condition in the ticker receive block. i can't really figure out a solid way to not have the ticker and/or checking the
[16:13:55] <huoy99> condition
[16:14:35] <huoy99> but i don't expect you to figure that out either. it's very specific :P
[16:15:13] *** Joins: ghost08 (~ghost08@adsl-dyn-18.95-102-48.t-com.sk)
[16:15:28] *** Quits: ghost08 (~ghost08@adsl-dyn-18.95-102-48.t-com.sk) (Client Quit)
[16:15:59] *** Joins: ghost08 (~ghost08@adsl-dyn-18.95-102-48.t-com.sk)
[16:17:01] *** Quits: ghost08 (~ghost08@adsl-dyn-18.95-102-48.t-com.sk) (Client Quit)
[16:17:13] *** Quits: bluedust_ (~bluedust@59.98.49.134) (Remote host closed the connection)
[16:17:18] *** Quits: jimeh (jimeh@matrix.bah.io) (Remote host closed the connection)
[16:19:30] *** Joins: jimeh (jimeh@matrix.bah.io)
[16:20:18] *** Joins: CoolerX (~CoolerX@user/coolerx)
[16:22:55] <j416> re-instantiating the ticker each time seems wasteful
[16:23:08] <j416> there is a Reset method
[16:23:15] <j416> also, are you looking for a Timer instead?
[16:23:53] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:f537:af82:4a8:f904)
[16:24:17] <huoy99> no i don't think i am. i need to check the condition on an interval
[16:24:47] <j416> too little context to help much; sorry
[16:24:50] <huoy99> do you know if reset will start a stopped timer?
[16:24:51] <j416> good luck with it
[16:25:10] <huoy99> i mean ticker*
[16:25:11] <j416> https://pkg.go.dev/time#Timer.Reset
[16:25:26] <j416> https://pkg.go.dev/time#Ticker.Reset
[16:25:45] <huoy99> yeah, it doesn't specify
[16:26:18] <huoy99> i don't like reinstantiating the ticker either but i don't know how to get around it after i stop it
[16:27:26] <j416> easy to test
[16:27:45] <flughafen> src/github.com/prometheus/common/config/http_config.go:414:19: undefined: http2.ConfigureTransports  ->  src/github.com/prometheus/common/config/http_config.go:414:19: undefined: http2.ConfigureTransports
[16:28:07] <flughafen> oopos
[16:28:11] <siXy_> All that messing around with various timeouts and cancellations looks to me like a poor reimplementation of context.
[16:28:19] <j416> huoy99: https://go.dev/play/p/PySn1VjXH_k
[16:28:26] <flughafen> golang.org/x/net/http2    <- that  library
[16:30:02] *** siXy_ is now known as siXy
[16:30:06] *** Quits: walterwhip (~www@user/walterwhip) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[16:30:17] *** Quits: xsteadfastx (~marv@94.31.99.245) (Ping timeout: 240 seconds)
[16:31:01] *** Joins: walterwhip (~www@user/walterwhip)
[16:31:07] *** Quits: walterwhip (~www@user/walterwhip) (Client Quit)
[16:31:50] *** Joins: arinov (~arinov@78.162.47.28)
[16:31:57] <flughafen> https://pkg.go.dev/golang.org/x/net/http2#ConfigureTransport  <- is this option only available in a newer go ?
[16:33:43] <huoy99> i noticed that the error is on ConfigureTransports plural and you're looking at ConfigureTransport
[16:34:18] *** Joins: bluedust (~bluedust@59.98.49.134)
[16:34:45] <flughafen> oh
[16:34:51] <fizzie> There is a https://pkg.go.dev/golang.org/x/net/http2#ConfigureTransports as well though.
[16:35:18] <flughafen> There's both
[16:35:19] <siXy> The plural version was added a little over a year ago.
[16:35:40] <siXy> If you havent updated anything in over a year, you're probably holding it wrong.
[16:36:00] <siXy> Commit is here, if you care: https://cs.opensource.google/go/x/net/+/08b38378de702b893ee869b94b32f833e2933bd2
[16:36:13] <flughafen> https://github.com/prometheus/common/commit/b5c358997cbf126e8f8518cdc024c32da3996d48
[16:36:19] <fizzie> "golang.org/x/net" is a separate module, so I don't think it should really depend on the Go version (other than in the sense that a newer version of the module might require a newer version of Go).
[16:36:49] <flughafen> ok.
[16:37:09] <flughafen> I'm trying to build the latest 0.32.1 version of the common library
[16:37:30] <flughafen> hanks siXy
[16:37:33] <siXy> flughafen: Have you tried talking to the actual prometheus developers in their IRC channel instead?
[16:37:51] <flughafen> that would be an interesting iea
[16:37:53] <flughafen> idea* ha
[16:37:56] <siXy> ...
[16:38:03] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:f537:af82:4a8:f904) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[16:38:33] *** Joins: ghost08 (~ghost08@adsl-dyn-18.95-102-48.t-com.sk)
[16:39:59] *** Joins: pmcnabb9 (~pmcnabb@user/pmcnabb)
[16:40:03] *** Quits: ghost08 (~ghost08@adsl-dyn-18.95-102-48.t-com.sk) (Client Quit)
[16:41:10] *** Joins: ghost08 (~ghost08@adsl-dyn-18.95-102-48.t-com.sk)
[16:41:34] <chilversc> is there a function to wrap multiple errors? e.g. something like fmt.Printf("oops: %w: %w", e1, e2)
[16:41:42] *** Quits: ghost08 (~ghost08@adsl-dyn-18.95-102-48.t-com.sk) (Client Quit)
[16:42:08] <huoy99> fmt.Errorf comes to mind
[16:42:11] <fizzie> flughafen: From general principles, you can also look at the go.mod file of the code you're trying to build for the "correct" versions of its dependencies. For example, https://github.com/prometheus/common/blob/v0.32.1/go.mod says golang.org/x/net v0.0.0-20210525063256-abc453219eb5
[16:42:14] *** Quits: pmcnabb (~pmcnabb@user/pmcnabb) (Ping timeout: 250 seconds)
[16:42:14] *** pmcnabb9 is now known as pmcnabb
[16:42:21] *** Joins: ghost08 (~ghost08@adsl-dyn-18.95-102-48.t-com.sk)
[16:42:41] <chilversc> ah, I don't think I can take e1 and have it wrap e2 :(
[16:42:57] <chilversc> I'll have to lose the context from one of those errors and just flatten it into a plain string
[16:43:17] <flughafen> thanks fizzie
[16:43:32] <fizzie> In the general case it's just not possible, because e1 might already wrap some other error, and you can't really have branches in the chain since errors.Unwrap must return just one error.
[16:45:19] <chilversc> yeah, I'll just have to discard the least important
[16:46:18] <fizzie> In the special case where you'd just want to say "e1, except on unwrap give e2" (as in, keep both but discard any possible wrapped errors from one), I imagine that'd be possible to arrange with a special type for it that implements the right methods, but I don't think one is provided for you.
[16:46:58] <flughafen> I'm goign to try to upgrade the x-net-dev package
[16:47:36] <chilversc> fizzie: yeah, but at some point you still have to decide on the most important error for the unwrap function
[16:47:54] *** Quits: ghost08 (~ghost08@adsl-dyn-18.95-102-48.t-com.sk) (Quit: WeeChat 3.4)
[16:47:57] <chilversc> or maybe not, you could implement the As/Is functions
[16:48:20] *** Joins: fjb (~fjb@2804:378:90ac:400:36d3:7e6a:cea5:aba4)
[16:48:27] *** Joins: ghost08 (~ghost08@adsl-dyn-18.95-102-48.t-com.sk)
[16:49:01] <fizzie> I think that's orthogonal. I was just saying, you can "keep" both if you're okay with discarding the *wrapped* errors of one of them.
[16:49:23] <fizzie> You'd just have an error that acts as if it was (say) e1 in terms of all the methods, except on unwrap it would return e2.
[16:50:12] <fizzie> Not sure if that's really useful for anything. And you'd still have to decide which one's which.
[16:50:28] *** Quits: CoolerX (~CoolerX@user/coolerx) (Read error: Connection reset by peer)
[16:51:11] *** Joins: CoolerX (~CoolerX@user/coolerx)
[16:51:43] <fizzie> But yeah, distinct from that, by implementing As/Is you could *also* make a type that (when used with errors.As / errors.Is) behaves a little like it was the union of e1 and e2. Feels a little unusual too.
[16:52:33] *** Quits: huoy99 (~huoy99@gateway/vpn/pia/huoy99) (Quit: Client closed)
[16:57:03] <fizzie> https://go.dev/play/p/cilWyNRnLrL -- heh, I kind of like it, though I can't say why.
[16:58:03] <fizzie> (Didn't implement Unwrap -- for that, you definitely have to pick one or the other. Well, I guess you could still have a fallback when the first one doesn't have anything.)
[16:58:29] <siXy> I love the "muchError" struct. But I think if your code actually needs to do this, something has gone horribly wrong about 10 steps back
[16:59:09] <chilversc> one use might be an aggregate error type, such as if you're firing off multiple asynchronous commands
[16:59:24] <fizzie> Just for completeness: https://go.dev/play/p/ceVp9i_T6GO
[16:59:27] *** Joins: arinov_ (~arinov@78.162.46.154)
[16:59:30] *** Quits: arinov (~arinov@78.162.47.28) (Ping timeout: 256 seconds)
[16:59:56] <chilversc> in the case I was originally looking at I was just encountering an error whilst handling an error
[17:00:40] <chilversc> fizzie: wouldn't the unwrap just be; return e.err1 ?
[17:02:15] *** Joins: neverfindme (~hayden@158.123.160.43)
[17:03:52] <fizzie> No, because `e` already acts as if it was e.err1 for all practical purposes.
[17:04:02] <fizzie> Well, it *could* be. But not necessarily, anyway.
[17:06:57] *** Quits: chenqisu1 (~chenqisu1@183.217.200.249) (Ping timeout: 240 seconds)
[17:07:37] *** Quits: trafficjam (~qubes@2001:8004:5190:2c63:4c8f:ea0e:1c15:da19) (Quit: trafficjam)
[17:08:14] *** Joins: trafficjam (~qubes@2001:8004:5190:2c63:4c8f:ea0e:1c15:da19)
[17:08:23] <trafficjam> how do i parse the date string "25/10/2020"?
[17:08:43] <trafficjam> i don't really understand datetime stuff in go
[17:09:11] <j416> trafficjam: find a matching constant here, or make your own: https://pkg.go.dev/time#pkg-constants
[17:09:34] <j416> trafficjam: "02/01/2006"
[17:10:04] <j416> then use https://pkg.go.dev/time#Parse
[17:10:55] <j416> trafficjam: https://go.dev/play/p/ET4_FVvSsbY
[17:12:10] <trafficjam> j416: ah so i always have to use this january 2006 date in the layout?
[17:12:14] <j416> yes
[17:12:23] <trafficjam> how odd, never seen that before
[17:20:48] *** Joins: Led_Zeppelin2 (~user@cpe-68-172-241-89.nj.res.rr.com)
[17:21:38] <Led_Zeppelin2> I know that $GOPATH is depreciated. What do you do if a product still uses it for development? For example, I am trying to write a plugin for 'telegraf' it says, I need to go get ..telegraf. Then cd $GOPATH/telegraf.
[17:23:57] *** Joins: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com)
[17:25:11] *** Joins: arkurious (~arkurious@user/arkurious)
[17:26:13] *** Quits: arinov_ (~arinov@78.162.46.154) (Ping timeout: 240 seconds)
[17:26:28] *** Joins: arinov_ (~arinov@78.162.147.102)
[17:30:41] *** Quits: eXtr3m0 (~eXtr3m0@user/eXtr3m0) (Ping timeout: 268 seconds)
[17:32:50] *** Quits: bluedust (~bluedust@59.98.49.134) (Remote host closed the connection)
[17:35:02] *** Quits: arinov_ (~arinov@78.162.147.102) (Ping timeout: 240 seconds)
[17:35:06] *** Joins: arinov (~arinov@78.162.147.120)
[17:37:54] *** Joins: califax- (~califax@user/califx)
[17:39:18] *** Quits: califax (~califax@user/califx) (Ping timeout: 276 seconds)
[17:39:18] *** califax- is now known as califax
[17:41:53] *** Quits: neverfindme (~hayden@158.123.160.43) (Quit: Leaving)
[17:42:06] *** Joins: mikoto-chan (~mikoto-ch@213.177.151.239)
[17:42:13] <trafficjam> wait gopath is deprecated?! when did this happen?
[17:46:04] <Led_Zeppelin2> found mine. it was in pkg/mod/...
[17:48:13] <aLeSD> hi there
[17:48:29] <aLeSD> How many connection could a server handle ?
[17:49:36] *** Joins: yaraju (~yaraju@user/yaraju)
[17:50:02] *** Joins: bluedust (~bluedust@59.98.49.134)
[17:52:38] <KirkMcDonald> aLeSD: There's no single, simple answer to that, but as a matter of technical capability, I suppose you'd run out of fds eventually.
[17:55:40] *** Quits: flughafen (~flughafen@p5de8e515.dip0.t-ipconnect.de) (Quit: WeeChat 2.8)
[17:55:46] <Led_Zeppelin2> go build ... is giving me.  copying /tmp/go-build.../a.out:  permission denied.
[17:57:04] <aLeSD> KirkMcDonald, thanks
[17:57:32] *** Quits: arinov (~arinov@78.162.147.120) (Ping timeout: 240 seconds)
[17:57:49] *** Quits: ghost08 (~ghost08@adsl-dyn-18.95-102-48.t-com.sk) (Quit: WeeChat 3.4)
[17:58:01] *** Joins: arinov (~arinov@78.162.47.24)
[18:00:08] *** Joins: ghost08 (~ghost08@adsl-dyn-18.95-102-48.t-com.sk)
[18:02:07] *** Joins: zer0bitz_ (~zer0bitz@2001:2003:f444:a000:4917:bc56:f54d:812b)
[18:03:35] *** Quits: arinov (~arinov@78.162.47.24) (Ping timeout: 252 seconds)
[18:05:52] *** Quits: zer0bitz (~zer0bitz@2001:2003:f444:a000:e4b0:adf8:305f:a850) (Ping timeout: 250 seconds)
[18:06:48] *** Joins: mugen (~mugen@gateway/tor-sasl/mugen)
[18:09:31] *** Quits: souvik (~souvik@103.82.81.39) (Ping timeout: 245 seconds)
[18:09:51] *** Quits: mug3n_ (~mugen@gateway/tor-sasl/mugen) (Ping timeout: 276 seconds)
[18:13:35] *** Joins: impermanence (~impermane@c-75-73-193-204.hsd1.mn.comcast.net)
[18:17:45] *** Joins: nathanael (~nathanael@user/nathanael)
[18:19:02] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:f537:af82:4a8:f904)
[18:19:57] *** Quits: pagnol (~user@014198154145.ctinets.com) (Ping timeout: 240 seconds)
[18:21:35] *** Joins: jla (~jordi@64.225.79.195)
[18:27:26] *** Joins: dntreou (~yakiza@inet-2a02-6900-8808-e010--78.oracle-ocna.com)
[18:28:35] *** Quits: ghost08 (~ghost08@adsl-dyn-18.95-102-48.t-com.sk) (Quit: WeeChat 3.4)
[18:29:30] <fizzie> trafficjam: Depending on how you measure these things, in Go 1.13 (Sep 2019) when module-aware mode started turning on automatically even inside $GOPATH/src, or in Go 1.16 (Feb 2021) when GO111MODULES default flipped from 'auto' to 'on' (requiring explicit action to use GOPATH style), or "not yet" (since it still hasn't been removed completely). https://github.com/golang/go/wiki/GOPATH has a lot
[18:29:32] <fizzie> more detail.
[18:31:24] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:f537:af82:4a8:f904) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[18:38:23] *** Joins: bluedust_ (~bluedust@103.161.144.140)
[18:39:10] *** Joins: bluedus__ (~bluedust@185.248.85.10)
[18:40:03] *** Quits: sdfgsdfg (~dfghsfgs@user/sdfgsdfg) (Quit: ayo yoyo ayo yoyo hololo, hololo.)
[18:41:24] *** Quits: bluedust (~bluedust@59.98.49.134) (Ping timeout: 250 seconds)
[18:42:03] *** Joins: pepee (~pepee@user/pepee)
[18:42:37] *** Quits: bluedust_ (~bluedust@103.161.144.140) (Ping timeout: 240 seconds)
[18:48:02] *** Joins: tomasfarias8 (~tomasfari@user/tomasfarias)
[18:49:35] *** Joins: bluedust (~bluedust@103.161.144.140)
[18:49:57] *** Quits: tomasfarias (~tomasfari@user/tomasfarias) (Ping timeout: 240 seconds)
[18:49:57] *** tomasfarias8 is now known as tomasfarias
[18:52:50] *** Quits: bluedus__ (~bluedust@185.248.85.10) (Ping timeout: 256 seconds)
[18:54:32] *** Joins: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl)
[19:07:56] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:f537:af82:4a8:f904)
[19:12:09] *** Quits: jla (~jordi@64.225.79.195) (Ping timeout: 250 seconds)
[19:13:28] *** Quits: mikoto-chan (~mikoto-ch@213.177.151.239) (Ping timeout: 250 seconds)
[19:14:28] *** Quits: henry40408 (~henry4040@175.181.155.165) (Quit: Ping timeout (120 seconds))
[19:18:39] *** Joins: mikoto-chan (~mikoto-ch@213.177.151.239)
[19:18:44] *** Quits: leonarth (~leonarth@user/leonarth) (Quit: 84R6CDo3S62HkuYSkVXBr7fXp2wn1XRHeQZ8QPrqxbXvfXP33EH4MhueE2ifPcRbbQQhVXPheMD957muhhBtrvs2QKykeA3)
[19:19:23] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:f537:af82:4a8:f904) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[19:22:26] *** Quits: dntreou (~yakiza@inet-2a02-6900-8808-e010--78.oracle-ocna.com) (Ping timeout: 245 seconds)
[19:26:39] *** Joins: dntreou (~yakiza@105-209-155-171.access.mtnbusiness.co.za)
[19:28:11] *** Quits: bsund (~bsund@user/bsund) (Remote host closed the connection)
[19:30:07] *** Quits: Endow[m] (~endowmatr@2001:470:69fc:105::1:21eb) (Quit: You have been kicked for being idle)
[19:30:13] *** Joins: flughafen (~flughafen@p5de8e515.dip0.t-ipconnect.de)
[19:32:27] *** Quits: cobber (~protorom@213.240.182.38) (Quit: cobber)
[19:32:45] *** Joins: leonarth (~leonarth@user/leonarth)
[19:39:50] *** Joins: henry40408 (~henry4040@175.181.155.165)
[19:42:26] *** Quits: whoami (~whoami@d118-75-170-49.try.wideopenwest.com) (Ping timeout: 245 seconds)
[19:43:52] *** Quits: bluedust (~bluedust@103.161.144.140) (Remote host closed the connection)
[19:47:33] *** Joins: whoami (~whoami@d118-75-170-49.try.wideopenwest.com)
[19:50:32] *** Quits: CoolerX (~CoolerX@user/coolerx) (Read error: Connection reset by peer)
[19:52:59] *** Joins: CoolerX (~CoolerX@user/coolerx)
[20:01:01] *** Joins: RhinosF1 (uid339563@miraheze/RhinosF1)
[20:02:56] *** Quits: whoami (~whoami@d118-75-170-49.try.wideopenwest.com) (Ping timeout: 252 seconds)
[20:05:34] *** Joins: ghost08 (~ghost08@adsl-dyn-18.95-102-48.t-com.sk)
[20:07:18] *** Joins: Snyp (~Snyp@49.207.193.236)
[20:10:33] *** Joins: whoami (~whoami@d118-75-170-49.try.wideopenwest.com)
[20:13:04] *** Joins: rednul (~textual@098-127-226-233.biz.spectrum.com)
[20:20:30] *** Joins: jjakob (~quassel@2a01:260:8028:10f0::62)
[20:25:49] *** Quits: jespada (~jespada@87.74.36.188) (Ping timeout: 240 seconds)
[20:26:57] *** Joins: jespada (~jespada@87.74.36.188)
[20:30:35] *** Quits: sam1 (~sam1@molly.millions.slask.me) (Quit: WeeChat 2.8)
[20:31:59] *** Joins: bluedust (~bluedust@103.161.144.140)
[20:34:11] *** Joins: sudoforge (~sudoforge@wireguard/tunneler/sudoforge)
[20:36:09] *** Joins: CoolerY (~CoolerX@user/coolerx)
[20:36:28] <chilversc> Is there a high level interface to the netlink API, or do I need to make use of the syscall package? It looks like the syscall package has a lot of abstractions for parsing the various netlink responses.
[20:39:19] *** Joins: sam1 (~sam1@molly.millions.slask.me)
[20:39:56] *** Quits: CoolerX (~CoolerX@user/coolerx) (Ping timeout: 256 seconds)
[20:49:54] *** Quits: jcajka (~jcajka@2a02:8308:a106:d100::4ac5) (Quit: Leaving)
[20:50:23] *** Quits: ghost08 (~ghost08@adsl-dyn-18.95-102-48.t-com.sk) (Quit: WeeChat 3.4)
[20:53:31] <siXy> chilversc: There's a couple libs out there, but nothing in the stdlib. https://github.com/mdlayher/netlink looks like it's actively maintained, but can't vouch for how complete or high quality it is.
[20:54:07] *** Quits: hanzo (uid532183@user/hanzo) (Quit: Connection closed for inactivity)
[20:55:52] *** Joins: Hanicef (~gustaf@81-229-9-108-no92.tbcn.telia.com)
[20:56:46] *** Quits: _nuke (~nuke@50-193-103-211-static.hfc.comcastbusiness.net) (Quit: No Ping reply in 180 seconds.)
[20:57:01] *** Quits: mickey8 (~user@user/mickey) (Quit: Ping timeout (120 seconds))
[20:57:16] *** Joins: mickey8 (~user@user/mickey)
[20:58:30] *** Joins: _nuke (~nuke@50-193-103-211-static.hfc.comcastbusiness.net)
[21:04:02] *** Quits: haliucinas (~haliucina@5.20.153.21) (Ping timeout: 240 seconds)
[21:07:25] *** Quits: CoolerY (~CoolerX@user/coolerx) (Ping timeout: 250 seconds)
[21:08:00] *** Joins: CoolerX (~CoolerX@user/coolerx)
[21:10:04] *** Quits: iryith (~iryith3@user/iryith) (Read error: Connection reset by peer)
[21:11:07] *** Joins: haliucinas (~haliucina@5.20.153.21)
[21:13:04] *** Joins: iryith (~iryith3@207.81-166-89.customer.lyse.net)
[21:13:04] *** Quits: iryith (~iryith3@207.81-166-89.customer.lyse.net) (Changing host)
[21:13:04] *** Joins: iryith (~iryith3@user/iryith)
[21:17:12] *** Quits: bluedust (~bluedust@103.161.144.140) (Remote host closed the connection)
[21:17:47] *** Joins: bluedust (~bluedust@103.161.144.140)
[21:22:47] *** Quits: bluedust (~bluedust@103.161.144.140) (Ping timeout: 250 seconds)
[21:26:54] *** Quits: absc (~absc@81.31.144.28) (Quit: Leaving)
[21:27:25] *** Joins: fdan (~fdan@2600:6000:ff7e:f6d5::97b)
[21:34:54] *** Quits: remote (~self@user/hackers) (Ping timeout: 256 seconds)
[21:40:10] *** Quits: AquaL1te (~AquaL1te@user/aqual1te) (Ping timeout: 260 seconds)
[21:42:58] *** Quits: dntreou (~yakiza@105-209-155-171.access.mtnbusiness.co.za) (Ping timeout: 250 seconds)
[21:47:22] *** Quits: _nuke (~nuke@50-193-103-211-static.hfc.comcastbusiness.net) (Ping timeout: 256 seconds)
[21:52:49] *** Quits: fdan (~fdan@2600:6000:ff7e:f6d5::97b) (Ping timeout: 256 seconds)
[21:55:19] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Quit: sord937)
[22:07:06] *** Quits: casastorta (~casastort@neo1.krivokuca.net) (Quit: ZNC 1.8.2 - https://znc.in)
[22:08:44] *** Joins: casastorta (~casastort@neo2.krivokuca.net)
[22:16:12] *** Joins: smrtz (~smrtz@user/smrtz)
[22:16:50] *** Quits: predmijat (~predmijat@mail.strogopro.com) (Quit: bye)
[22:17:30] *** Quits: fef (~thedawn@user/thedawn) (Ping timeout: 276 seconds)
[22:18:04] <chilversc> siXy: that repo also has a rather useful blog series on using netlink
[22:20:50] *** Joins: predmijat (~predmijat@mail.strogopro.com)
[22:22:46] *** Joins: NCS_One (~NCS_One@bl11-90-133.dsl.telepac.pt)
[22:23:10] *** Joins: greatgatsby__ (~greatgats@bras-base-toroon0411w-grc-52-142-114-106-7.dsl.bell.ca)
[22:24:18] *** Joins: nemesis91 (~nem@user/nemesis91)
[22:24:49] *** Joins: connor_goodwolf_ (~connor@user/connor-goodwolf/x-2615606)
[22:24:54] *** Joins: nikos_ (~nikos@nikos.dev)
[22:25:00] *** Joins: Ugrastil27 (~Ugrastil@89.40.112.204)
[22:25:06] *** Joins: L1Cafe7 (~L1Cafe@user/l1cafe)
[22:25:13] *** Joins: oznt- (~oznt@vmd62887.contaboserver.net)
[22:25:14] *** Quits: nemesis_ (~nem@user/nemesis91) (Ping timeout: 256 seconds)
[22:25:14] *** Quits: lux0r (~lux0r@65.56.68.34.bc.googleusercontent.com) (Ping timeout: 256 seconds)
[22:25:14] *** Quits: connor_goodwolf (~connor@user/connor-goodwolf/x-2615606) (Ping timeout: 256 seconds)
[22:25:14] *** Quits: nikos (~nikos@nikos.dev) (Ping timeout: 256 seconds)
[22:25:14] *** Quits: oznt (~oznt@vmd62887.contaboserver.net) (Ping timeout: 256 seconds)
[22:25:14] *** Quits: L1Cafe (~L1Cafe@user/l1cafe) (Write error: Connection reset by peer)
[22:25:14] *** Quits: pztrn15 (~pztrn1@aurora.pztrn.name) (Quit: Ping timeout (120 seconds))
[22:25:14] *** Quits: unmanbearpig (~unmanbear@user/unmanbearpig) (Ping timeout: 256 seconds)
[22:25:14] *** Quits: rdg (~rdg@user/rdg) (Ping timeout: 256 seconds)
[22:25:14] *** Quits: cross (~cross@spitfire.i.gajendra.net) (Ping timeout: 256 seconds)
[22:25:14] *** Quits: tharkun (tharkun@kvm6.telegraphics.com.au) (Ping timeout: 256 seconds)
[22:25:14] *** Quits: jay_wild (~very@138.68.15.221) (Ping timeout: 256 seconds)
[22:25:15] *** L1Cafe7 is now known as L1Cafe
[22:25:17] *** Joins: jay_wild_ (~very@138.68.15.221)
[22:25:23] *** Joins: lux0r- (~lux0r@65.56.68.34.bc.googleusercontent.com)
[22:25:24] *** Joins: rdg_ (~rdg@user/rdg)
[22:25:28] *** Joins: pztrn15 (~pztrn1@aurora.pztrn.name)
[22:25:36] *** jay_wild_ is now known as jay_wild
[22:25:37] *** Joins: cross_ (~cross@spitfire.i.gajendra.net)
[22:25:41] *** Quits: ncopa3 (~ncopa@gbr2-dev1.alpinelinux.org) (Ping timeout: 256 seconds)
[22:25:41] *** Quits: coc0nut (~coc0nut@user/coc0nut) (Ping timeout: 256 seconds)
[22:25:41] *** Quits: koo5_ (~quassel@51.140.155.227) (Ping timeout: 256 seconds)
[22:25:41] *** Quits: jeromenerf (~jerome@176-149-34-153.abo.bbox.fr) (Ping timeout: 256 seconds)
[22:25:41] *** Quits: marcus (~marcus@mojo/viking/marcus) (Ping timeout: 256 seconds)
[22:25:41] *** Quits: sebito91 (~sborza@45.55.74.66) (Ping timeout: 256 seconds)
[22:25:41] *** Quits: erhandsome (~erhandsom@user/erhandsome) (Ping timeout: 256 seconds)
[22:25:41] *** Quits: kochchef (~quassel@80.146.255.46) (Ping timeout: 256 seconds)
[22:25:41] *** Quits: Ekho (~Ekho@user/ekho) (Ping timeout: 256 seconds)
[22:25:41] *** Quits: eagleflo (~aku@163.172.137.34) (Ping timeout: 256 seconds)
[22:25:41] *** Quits: greatgatsby_ (~greatgats@bras-base-toroon0411w-grc-52-142-114-106-7.dsl.bell.ca) (Ping timeout: 256 seconds)
[22:25:41] *** Quits: Ugrastil2 (~Ugrastil@89.40.112.204) (Ping timeout: 256 seconds)
[22:25:41] *** Quits: pjs (~pjs@user/pjs) (Ping timeout: 256 seconds)
[22:25:41] *** Quits: snits (~quassel@ip98-179-76-75.ph.ph.cox.net) (Ping timeout: 256 seconds)
[22:25:47] *** Joins: jeromenerf (~jerome@176-149-34-153.abo.bbox.fr)
[22:25:47] *** Joins: tharkun (tharkun@kvm6.telegraphics.com.au)
[22:25:48] *** Joins: kochchef (~quassel@80.146.255.46)
[22:25:56] *** Joins: snits (~quassel@ip98-179-76-75.ph.ph.cox.net)
[22:25:57] *** Joins: eagleflo (~aku@163.172.137.34)
[22:25:57] *** Joins: ncopa3 (~ncopa@gbr2-dev1.alpinelinux.org)
[22:26:00] *** Joins: koo5_ (~quassel@51.140.155.227)
[22:26:04] *** Joins: marcus (~marcus@mojo/viking/marcus)
[22:26:07] *** Joins: coc0nut (~coc0nut@user/coc0nut)
[22:26:15] *** Quits: redquasar (~redquasar@redquasar.xyz) (Ping timeout: 256 seconds)
[22:26:21] *** Joins: pjs (~pjs@user/pjs)
[22:26:30] *** Joins: redquasar (~redquasar@redquasar.xyz)
[22:26:31] *** Joins: erhandsome (~erhandsom@user/erhandsome)
[22:26:43] *** Joins: sebito91 (~sborza@45.55.74.66)
[22:26:57] *** Joins: unmanbearpig (~unmanbear@user/unmanbearpig)
[22:28:23] *** Quits: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl) (Quit: jaca122)
[22:29:27] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:f537:af82:4a8:f904)
[22:29:57] *** Quits: pgloor (~petergloo@mix.cubus.space) (Read error: Connection reset by peer)
[22:30:05] *** Joins: pgloor1 (~petergloo@mix.cubus.space)
[22:31:55] *** Quits: ds (~ds@user/ds) (Ping timeout: 256 seconds)
[22:31:55] *** Quits: nj (nicholas@stop.disconnecting.me) (Ping timeout: 256 seconds)
[22:32:02] *** Joins: nj (nicholas@stop.disconnecting.me)
[22:32:11] *** Joins: ds (~ds@user/ds)
[22:33:33] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:f537:af82:4a8:f904) (Client Quit)
[22:36:29] *** bch_ is now known as bch
[22:37:38] *** Joins: Ekho (~Ekho@user/ekho)
[22:38:22] *** Quits: Snyp (~Snyp@49.207.193.236) (Ping timeout: 256 seconds)
[22:43:43] *** Quits: smrtz (~smrtz@user/smrtz) (Quit: Client closed)
[22:43:51] *** Joins: yagamilito (~yagamilit@2601:642:4600:34b0:8cbb:90c8:fb87:52b1)
[22:43:59] *** Quits: Hanicef (~gustaf@81-229-9-108-no92.tbcn.telia.com) (Quit: leaving)
[22:44:19] <yagamilito> Hello
[22:44:19] <yagamilito> i am trying to create a json
[22:44:20] <yagamilito> https://go.dev/play/p/mrJDYW-6l7v
[22:44:20] <yagamilito> but i am getting error
[22:44:21] <yagamilito> doesn't have any exported fields, nor custom marshaling
[22:44:21] <yagamilito> struct field field has json tag but is not exported
[22:44:22] <yagamilito> expecting to generate this json
[22:44:22] <yagamilito> https://pastebin.com/raw/G6AZcV61
[22:44:23] <yagamilito> how to fix this
[22:44:23] <yagamilito> Thanks
[22:44:53] <b0nn> yagamilito: field and sometime are not exported
[22:45:13] <b0nn> json.Marshal needs them to be exported so that it can access them
[22:45:57] <b0nn> https://go.dev/play/p/mZKRw3a9gEf
[22:46:21] <foobaz> yagamilito: https://go.dev/play/p/nlnQPP6lnr0
[22:46:45] <foobaz> beat me to it :)
[22:51:41] *** Joins: carlavilla (~carlavill@2a0c:5a84:320d:6900:21f:16ff:fe0f:275a)
[22:52:51] <b0nn> I'm disappointed that play gave two different hashes/links for the same code :(
[22:53:42] *** Quits: alwyn (~alwyn@user/alwyn) (Quit: WeeChat 3.4)
[23:01:38] *** Quits: bk__ (~bkircher@2001:a61:24c9:9301:c70b:7b10:9434:b399) (Quit: Leaving)
[23:01:59] *** Joins: bkircher (~bkircher@2001:a61:24c9:9301:c70b:7b10:9434:b399)
[23:03:29] <ikke> It's not content-addressable :)
[23:04:21] *** Quits: cync (~blah@192.180.187.81.in-addr.arpa) (Quit: No Ping reply in 180 seconds.)
[23:04:27] *** Joins: bluedust (~bluedust@103.161.144.140)
[23:05:33] *** Joins: cync (~blah@192.180.187.81.in-addr.arpa)
[23:12:39] *** Joins: crashrep (~crashrep@user/crashrep)
[23:14:57] *** Quits: moto (~moto@user/moto) (Ping timeout: 240 seconds)
[23:18:24] *** Joins: analogsalad (~analogsal@user/analogsalad)
[23:22:03] *** Joins: moto (~moto@user/moto)
[23:22:12] *** Joins: dsrt^ (~dsrt@75-147-197-198-Atlanta.hfc.comcastbusiness.net)
[23:24:17] <fizzie> It's not? Pretty sure it used to be.
[23:24:38] <fizzie> But it's not the same code. One of those links has `prAccessJson` where the other has `string(prAccessJson)`.
[23:26:14] <fizzie> If I, in Chrome incognito, paste in one of the snippets and click "Share", I get the same link back as where I pasted from. That's content-addressable enough for me.
[23:26:44] <ikke> aha
[23:31:53] *** Quits: moldorcoder7 (~moldorcod@37.120.143.28) (Quit: %bye mirc%)
[23:32:45] *** Joins: moldorcoder7 (~moldorcod@37.120.143.28)
[23:36:48] *** Quits: crashrep (~crashrep@user/crashrep) (Ping timeout: 276 seconds)
[23:37:35] *** Joins: crashrep (~crashrep@user/crashrep)
[23:37:55] *** Quits: crashrep (~crashrep@user/crashrep) (Client Quit)
[23:50:41] *** Joins: rickybob (~rickybob@gateway/vpn/pia/rickybob)
[23:52:59] *** Joins: boof (~rickybob@gateway/vpn/pia/rickybob)
[23:53:38] *** Quits: optic__ (~rickybob@gateway/vpn/pia/rickybob) (Ping timeout: 268 seconds)
[23:53:49] <saml> my http service talks to other service.  what was formula to calculate desired timeout on IO (talking to other service)?
[23:55:08] *** Quits: rickybob (~rickybob@gateway/vpn/pia/rickybob) (Ping timeout: 250 seconds)
[23:56:04] *** Joins: rickybob (~rickybob@gateway/vpn/pia/rickybob)
[23:58:50] *** Quits: boof (~rickybob@gateway/vpn/pia/rickybob) (Ping timeout: 256 seconds)
