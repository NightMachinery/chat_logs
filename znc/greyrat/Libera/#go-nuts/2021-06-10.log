[00:00:30] *** Joins: rolo (~error@2a02:8108:8dc0:1cec:20c4:ad1b:af34:f1e2)
[00:03:13] *** Quits: dr0n (~nabromov@92.40.255.115.threembb.co.uk) (Ping timeout: 268 seconds)
[00:03:45] *** Quits: llorllale (~llorllale@2607:9880:3a18:69:456e:ca79:c17e:6e26) (Quit: WeeChat 3.1)
[00:06:45] *** Joins: llorllale (~llorllale@2607:9880:3a18:69:7d26:8c49:a08:eb4e)
[00:08:09] *** Quits: dkmueller (~dkmueller@dynamic-095-115-042-075.95.115.pool.telefonica.de) (Ping timeout: 268 seconds)
[00:09:02] *** Joins: dkmueller (~dkmueller@2a01:c23:bc05:2b00:56bd:7c0e:bee9:7bb4)
[00:10:46] *** Quits: dkmueller (~dkmueller@2a01:c23:bc05:2b00:56bd:7c0e:bee9:7bb4) (Client Quit)
[00:10:56] *** Quits: tedwing (~anon@lfbn-idf3-1-1409-99.w109-221.abo.wanadoo.fr) (Ping timeout: 252 seconds)
[00:19:27] *** Joins: ktanner (~ktanner@50.39.175.242)
[00:19:42] *** Quits: rolo (~error@2a02:8108:8dc0:1cec:20c4:ad1b:af34:f1e2) (Ping timeout: 244 seconds)
[00:21:41] *** Joins: rolo (~error@2a02:8108:8dc0:1cec:20c4:ad1b:af34:f1e2)
[00:21:42] *** Joins: marcel5 (~marcel@user/marcel)
[00:23:03] *** Quits: aerona (~aerona@2600:6c54:4600:f300:8401:a988:a361:a685) (Quit: Leaving)
[00:23:08] *** Quits: corby (~corby@c0rby.de) (Ping timeout: 265 seconds)
[00:23:10] *** Quits: marcel (~marcel@user/marcel) (Read error: Connection reset by peer)
[00:23:10] *** marcel5 is now known as marcel
[00:23:34] *** Quits: naos (~naos@user/naos) (Ping timeout: 268 seconds)
[00:24:42] *** Joins: goldfish (~goldfish@user/goldfish)
[00:25:11] *** Joins: SebastianM (~seba@user/sebastianm)
[00:26:28] *** Joins: corby (~corby@c0rby.de)
[00:26:30] *** Quits: SebastianM (~seba@user/sebastianm) (Client Quit)
[00:32:09] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Quit: sord937)
[00:34:42] *** Joins: naos (~naos@user/naos)
[00:35:12] *** Quits: shka (~herr@109.231.62.239) (Ping timeout: 244 seconds)
[00:35:58] *** Quits: kaleido (~adam@havokworks.io) (Quit: peas)
[00:36:41] *** Joins: kaleido (~adam@havokworks.io)
[00:36:45] *** Quits: burningserenity (~burningse@102.129.153.54) (Ping timeout: 244 seconds)
[00:38:55] *** Joins: dr0n (~nabromov@92.40.255.112.threembb.co.uk)
[00:40:14] *** Joins: prio (~jonathan@195.162.84.188)
[00:43:12] *** Joins: dkmueller (~dkmueller@2a01:c23:bc05:2b00:56bd:7c0e:bee9:7bb4)
[00:49:22] *** Joins: koo6 (~koo6@89-24-13-235.customers.tmcz.cz)
[00:51:19] *** Quits: prio (~jonathan@195.162.84.188) (Ping timeout: 268 seconds)
[00:53:40] <saml> let's say I have multiple layers of caching: c1,c2   if c1 misses but c2 is hit,  would I just update c1 and be done? or still get to origin and update both c1 and c2?
[00:55:28] <icholy> saml: what's the point of c2 if you go to the origin every time anyway?
[00:56:01] <saml> trying to figure that out :P  c1 has lower TTL than c2
[00:56:52] *** Quits: Kane (~Kane@2a01:e34:ee89:5d90:6156:5104:248f:1990) (Quit: Leaving)
[00:57:01] <icholy> it really depends on your usecase
[00:57:17] *** Joins: gilesc (~textual@2603-8001-3600-dad7-bd9c-717f-8e07-66b2.res6.spectrum.com)
[00:57:44] <jemaclus> what's the difference between the two/three layers?
[00:58:49] <jemaclus> if you have three layers like c1/c2/origin, then typically what would happen is something like: request -> c1 (miss) -> c2 (hit) -> c1 (write) -> response
[00:58:56] <jemaclus> so that next time c1 is a hit instead of a miss
[00:59:03] *** jinie_ is now known as jinie
[00:59:24] <jemaclus> and only go to origin if c2 also misses, as in: request -> c1 (miss) -> c2 (miss) -> origin (hit) -> c2 (write) -> c1 (write) -> response
[01:01:10] <jemaclus> I don't know that i've seen two layers of caching, though, unless c2 updates frequently and c1 has a short TTL but is generally OK if the data is a little out of date. Kind of weird, but I could see a use case for that.
[01:01:11] *** Quits: mikoto-chan (~mikoto-ch@ip-213-49-189-31.dsl.scarlet.be) (Ping timeout: 268 seconds)
[01:01:30] *** Quits: vptr (~tadas@user/vptr) (Quit: leaving)
[01:02:09] <b0nn> https://betterprogramming.pub/how-a-cache-stampede-caused-one-of-facebooks-biggest-outages-dbb964ffc8ed
[01:02:16] <jemaclus> cache misses are expensive, though, so if at all possible, I would put effort/resources toward ensuring that c1 is as populated as possible
[01:02:26] *** Quits: hv99 (~hv99@wireguard/tunneler/hv99) (Quit: The Lounge - https://thelounge.chat)
[01:02:41] *** Joins: hv99 (~hv99@wireguard/tunneler/hv99)
[01:02:48] <jemaclus> b0nn: interesting.
[01:02:56] <jemaclus> that makes sense.
[01:03:38] *** Joins: dyslexic1t (~dyslexica@ymir.whatbox.ca)
[01:04:04] *** Parts: seabass (~sebastian@user/seabass) (WeeChat 2.8)
[01:04:06] <jemaclus> the early recomputation step is what my last message was describing, essentially
[01:04:10] *** Joins: seabass (~sebastian@user/seabass)
[01:04:19] *** Quits: dyslexic1t (~dyslexica@ymir.whatbox.ca) (Client Quit)
[01:04:50] *** Quits: austin_ (~ausserz@n219073000163.netvigator.com) (Ping timeout: 252 seconds)
[01:06:07] *** Quits: dyslexicat (~dyslexica@212.253.59.190) (Ping timeout: 268 seconds)
[01:08:47] *** Quits: theoceaniscool (~theoceani@188.127.173.202) (Ping timeout: 244 seconds)
[01:09:27] *** Joins: theoceaniscool (~theoceani@188.127.173.202)
[01:13:07] *** Quits: dkmueller (~dkmueller@2a01:c23:bc05:2b00:56bd:7c0e:bee9:7bb4) (Quit: WeeChat 3.1)
[01:13:32] *** Joins: dkmueller (~dkmueller@2a01:c23:bc05:2b00:56bd:7c0e:bee9:7bb4)
[01:14:57] *** Joins: austin_ (~ausserz@n219073000163.netvigator.com)
[01:15:52] *** Quits: pepee (~user@user/pepee) (Read error: Connection reset by peer)
[01:18:21] *** Quits: gilesc (~textual@2603-8001-3600-dad7-bd9c-717f-8e07-66b2.res6.spectrum.com) (Quit: Textual IRC Client: www.textualapp.com)
[01:19:03] *** Quits: amahl (~amahl@dsl-jklbng12-54fbca-64.dhcp.inet.fi) (Ping timeout: 252 seconds)
[01:23:26] <saml> how do you even cache a Promise? I thought Promise can't be sent over wire
[01:23:43] <b0nn> #javascript
[01:24:07] <b0nn> But, generally, caching something as yet to be calculated is impossible
[01:24:24] *** Quits: icholy (~icholy@68.71.18.45) (Quit: leaving)
[01:24:26] <saml> yeah i'm having trouble understanding the linked article
[01:24:41] <b0nn> (Having said that Google's search is so fast because the pre-computer and cache aspects of the search
[01:24:57] <b0nn> pre-comute*
[01:25:02] <b0nn> ffs
[01:25:14] *** Joins: Skyz (~Skyz@ool-43538427.dyn.optonline.net)
[01:25:53] *** Joins: pepee (~user@user/pepee)
[01:29:50] *** Joins: tedwing (~anon@lfbn-idf3-1-1409-99.w109-221.abo.wanadoo.fr)
[01:30:08] *** Quits: Guest91 (~textual@2001:171b:c9bc:ce00:6c98:c411:350:790b) (Ping timeout: 252 seconds)
[01:31:17] *** Joins: Guest91 (~textual@2001:171b:c9bc:ce00:807c:a762:a9e0:3682)
[01:31:57] <jemaclus> I don't think they're caching the promise, but they're basically having everyone accept the promise, which is resolved when the caching is complete
[01:32:45] *** Quits: jolof (~jolof@user/jolof) (Quit: leaving)
[01:32:58] <b0nn> Yeah, that's what happens, only one thing is doing the cache lookup/population, the rest are waiting for it to be done
[01:34:29] *** Quits: marlinc (~marlinc@user/marlinc) (Ping timeout: 268 seconds)
[01:38:37] *** Quits: Skyz (~Skyz@ool-43538427.dyn.optonline.net) (Quit: Client closed)
[01:39:44] *** Joins: RougeR (~RougeR@user/rouger)
[01:39:54] *** Quits: mrig (~mrig@user/mrig) (Ping timeout: 264 seconds)
[01:40:40] <Tv_> saml: re the original question, both variants exist and can make sense, https://en.wikipedia.org/wiki/Cache_inclusion_policy
[01:41:39] *** Joins: marlinc (~marlinc@user/marlinc)
[01:41:53] *** Quits: khyr0n (~khyr0n@2806:2f0:9261:36c8:47fe:97b:af8b:a78e) (Remote host closed the connection)
[01:42:19] <Tv_> saml: in the original sense of HTTP caching, with local Squid cache servers, they'd all have independent expiration strategies and were often deployed in a tree shape, with each dept having a cache and then the corporation as a whole having a cache
[01:42:53] <Tv_> saml: as the request passed through each layer, it would decide to cache the response or not, based on whatever criteria it wanted
[01:43:18] <Tv_> that naturally leads to roughly-inclusive caching
[01:43:32] <Tv_> (the strict terminology is used inside one coherent system, like a CPU)
[01:45:28] *** Quits: andlabs (~andlabs@68.237.68.71) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[01:46:05] *** Quits: theoceaniscool (~theoceani@188.127.173.202) (Ping timeout: 252 seconds)
[01:46:12] <b0nn> Just one negative point (albeit a massive one) the more caches you have, the more cache invalidation issues you need to address
[01:46:56] *** Joins: andlabs (~andlabs@68.237.68.71)
[01:47:04] <b0nn> I mean, you can TTL your way through the maze, but that's not a guarantee that your caches are storing the right stuff™nor that the stuff they have is fresh
[01:47:12] *** Joins: khyr0n (~khyr0n@2806:2f0:9261:36c8:47fe:97b:af8b:a78e)
[01:49:54] <b0nn> Was looking at this the other day - it's a list of strategies for keeping your caches fresh https://en.wikipedia.org/wiki/Cache_replacement_policies
[01:50:52] *** lvlinux is now known as ruhnet
[01:51:49] <b0nn> Heh https://www.reuters.com/business/media-telecom/fastly-blames-software-bug-major-global-internet-outage-2021-06-09/
[01:54:03] <saml> cache too hard. cash is better
[01:58:23] *** Quits: rolo (~error@2a02:8108:8dc0:1cec:20c4:ad1b:af34:f1e2) (Ping timeout: 244 seconds)
[01:59:33] *** Joins: internut (~internut@2601:280:4e00:16f0:c416:59d3:2c6e:1247)
[02:00:03] <internut> I'm just curious. If you were describing Go, would you call it a 'low level' language? like C and C++?
[02:00:34] *** Quits: davidkrauser (~davidkrau@user/davidkrauser) (Quit: Leaving)
[02:02:18] <Gnuman> internut, it's almost as low-level as C. You can do inline assembly in it if you want.
[02:02:35] *** Quits: jhenson (~jhenson@user/jhenson) (Remote host closed the connection)
[02:02:43] <internut> I got into an argument with someone saying Go is not a low-level language
[02:02:49] *** Joins: jhenson (~jhenson@user/jhenson)
[02:03:06] <internut> he further informed me that I obviously don't know what a low-level language is
[02:03:25] <internut> (I started in this biz doing 8080 assembly language programming in 1981)
[02:05:29] <Teckla> Before engaging in such conversations, all participants must define low-level language  :)
[02:05:43] <bookworm> things with a runtime and gc can barely be called low level, especially as you can't turn them off
[02:06:19] * Teckla would personally not define Go as low level.
[02:06:24] <bookworm> low level generally means that you controll the memory
[02:06:33] <bookworm> with go you don't
[02:06:45] <internut> I *IS* possible to handle memory in a way that avoids all GC
[02:06:54] <bookworm> (idiomatic go)
[02:07:10] <bookworm> look ma no hands stuff doesn't really count
[02:07:11] <b0nn> Yeah, there was a DB that someone was manually managing the memory, written in Go
[02:07:11] <internut> sync.Pool has been around forever
[02:07:14] <Teckla> But it hardly matters, it's just semantics
[02:07:17] <bookworm> that code would be unreadable
[02:07:44] <jemaclus> b0nn: you know what they say... there are two hard problems in software engineering: naming things, cache invalidation, and off-by-one errors.
[02:07:54] <internut> :)
[02:08:02] <b0nn> 10 async debugging
[02:09:01] <b0nn> It was DGraph that went out and manually manageed memory in their Go code https://dgraph.io/blog/post/manual-memory-management-golang-jemalloc/
[02:09:43] <jemaclus> We used BadgerDB at my last job, which they built. They know what they're talking about. Very cool stuff.
[02:09:48] <Teckla> internut: I went from 6809 to 6502 to 8086, and became more horrified each time, heh
[02:10:11] <internut> hehehe
[02:10:14] <Teckla> And then I threw up my hands in disgust and moved to C
[02:10:30] <internut> programmers hated segmented memory
[02:10:39] <internut> but, it was really no big deal for compiler writers
[02:10:55] <Teckla> tiny small medium large huge  *shudder*
[02:10:59] <internut> and the chip was designed more for high level languages
[02:11:15] <internut> there's no doubt that it was a pain
[02:11:24] <internut> I wrote a lot of 8086 assembler
[02:11:31] <internut> I LOVED 6809
[02:11:49] <Teckla> internut: Me too!  The 6809 was awesome.  The rest of my TRS-80 Color Computer, however, was CRAP.
[02:12:00] <internut> I had a COCO
[02:12:05] <internut> :)
[02:12:06] <Teckla> The 6809 was its only redeeming characteristic.
[02:12:14] <Teckla> internut: Original?
[02:12:49] <internut> yeah
[02:13:00] <internut> early 80s
[02:14:03] <internut> I did so much assembler early in my career
[02:14:12] <Teckla> Same here.  Yeah, the 6809 was an excellent CPU.
[02:14:17] <internut> IBM 370, Cray 3
[02:14:22] <internut> 68000
[02:14:24] <internut> 56000
[02:15:04] <internut> 8051
[02:15:37] * Teckla wonders how tiny Go could get
[02:15:45] <bookworm> b0nn: neat, thanks for sharing. Very interesting but hardly what I would wanna write or read... might as well use C then
[02:16:34] <b0nn> Yeah, no argument from me - just showing it's possible I guess
[02:17:49] *** Quits: acidfu- (~nicolasbo@2605:8d80:5c0:2c75:8811:6ab6:c06a:af5f) (Read error: Connection reset by peer)
[02:21:20] *** Quits: seabass (~sebastian@user/seabass) (Quit: Goodnight!)
[02:25:00] *** Joins: rolo (~error@2a02:8108:8dc0:1cec:20c4:ad1b:af34:f1e2)
[02:26:24] *** Quits: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com) (Remote host closed the connection)
[02:27:38] *** Joins: sudoforge (~sudoforge@wireguard/tunneler/sudoforge)
[02:30:57] *** Quits: Guest91 (~textual@2001:171b:c9bc:ce00:807c:a762:a9e0:3682) (Quit: Textual IRC Client: www.textualapp.com)
[02:35:04] *** Quits: rolo (~error@2a02:8108:8dc0:1cec:20c4:ad1b:af34:f1e2) (Ping timeout: 244 seconds)
[02:37:23] *** Quits: llorllale (~llorllale@2607:9880:3a18:69:7d26:8c49:a08:eb4e) (Ping timeout: 268 seconds)
[02:40:09] *** Quits: thinkofher (~thinkofhe@77-253-125-173.adsl.inetia.pl) (Quit: The Lounge - https://thelounge.chat)
[02:42:11] *** Joins: hexfive (~eric@50.35.83.177)
[02:42:29] *** Joins: Skyz (~Skyz@ool-43538427.dyn.optonline.net)
[02:42:31] *** Quits: hexfive (~eric@50.35.83.177) (Client Quit)
[02:44:47] *** Quits: khyr0n (~khyr0n@2806:2f0:9261:36c8:47fe:97b:af8b:a78e) (Ping timeout: 268 seconds)
[02:45:16] *** Joins: rolo (~error@2a02:8108:8dc0:1cec:20c4:ad1b:af34:f1e2)
[02:46:16] *** Joins: khyr0n (~khyr0n@2806:2f0:9140:1deb:3346:f463:745e:77a4)
[02:47:51] *** Quits: khyr0n (~khyr0n@2806:2f0:9140:1deb:3346:f463:745e:77a4) (Client Quit)
[02:48:02] *** Joins: khyr0n (~khyr0n@2806:2f0:9140:1deb:3346:f463:745e:77a4)
[02:50:23] *** Quits: rolo (~error@2a02:8108:8dc0:1cec:20c4:ad1b:af34:f1e2) (Ping timeout: 272 seconds)
[02:57:04] *** Quits: DeltaNova (~DeltaNova@user/deltanova) (Quit: WeeChat 3.0.1)
[03:00:33] *** Quits: Skyz (~Skyz@ool-43538427.dyn.optonline.net) (Quit: Client closed)
[03:02:05] *** Joins: rolo (~error@2a02:8108:8dc0:1cec:20c4:ad1b:af34:f1e2)
[03:06:18] *** Joins: klltkr (~klltkr@host86-168-182-186.range86-168.btcentralplus.com)
[03:07:36] *** Quits: prout_ (~prout@user/prout) (Quit: prout.)
[03:07:37] *** Joins: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com)
[03:07:52] *** Joins: prout (~prout@user/prout)
[03:10:39] *** Quits: farmstatejake (~farmstate@user/farmstatejake) (Read error: Connection reset by peer)
[03:11:53] *** Joins: farmstatejake (~farmstate@user/farmstatejake)
[03:12:07] *** Quits: cactinoob (~cactinoob@adsl-64-237-237-9.prtc.net) (Quit: Client closed)
[03:12:30] *** Joins: skyz (~skyz@ool-43538427.dyn.optonline.net)
[03:15:22] *** Joins: paruh (~paruh@92.60.39.18)
[03:16:35] *** Quits: skyz (~skyz@ool-43538427.dyn.optonline.net) (Client Quit)
[03:17:41] *** Quits: c10l (~c10l@89.34.167.207) (Read error: Connection reset by peer)
[03:18:07] *** Joins: c10l (~c10l@89.34.167.207)
[03:18:14] *** Joins: SincereFox (uid337158@user/sincerefox)
[03:20:54] *** Quits: dr0n (~nabromov@92.40.255.112.threembb.co.uk) (Quit: WeeChat 2.8)
[03:35:00] *** Quits: jespada (~jespada@90.254.242.55) (Ping timeout: 244 seconds)
[03:38:00] *** Joins: jespada (~jespada@90.254.242.55)
[03:39:14] *** Joins: burningserenity (~burningse@142-196-178-216.res.spectrum.com)
[03:40:54] *** Quits: rolo (~error@2a02:8108:8dc0:1cec:20c4:ad1b:af34:f1e2) (Ping timeout: 268 seconds)
[03:41:51] *** Quits: goldfish (~goldfish@user/goldfish) (Read error: Connection reset by peer)
[03:41:57] *** Joins: goldfish_ (~goldfish@user/goldfish)
[03:42:33] *** Joins: rolo (~error@2a02:8108:8dc0:1cec:20c4:ad1b:af34:f1e2)
[03:44:41] *** Joins: mhorn (~textual@134.134.139.72)
[03:50:03] *** Quits: koo6 (~koo6@89-24-13-235.customers.tmcz.cz) (Remote host closed the connection)
[03:51:30] *** Joins: koo6 (~koo6@89-24-13-235.customers.tmcz.cz)
[03:51:33] *** Quits: eck0 (~Android@mobile-166-173-61-29.mycingular.net) (Quit: -a- Connection Timed Out)
[03:51:47] *** Joins: eck0 (~Android@mobile-166-173-61-29.mycingular.net)
[03:52:00] *** Quits: purpleidea (~james@user/purpleidea) (Ping timeout: 268 seconds)
[03:55:19] *** Joins: skyz (~skyz@ool-43538427.dyn.optonline.net)
[03:56:51] *** Quits: goldfish_ (~goldfish@user/goldfish) (Remote host closed the connection)
[03:59:53] *** Quits: internut (~internut@2601:280:4e00:16f0:c416:59d3:2c6e:1247) (Remote host closed the connection)
[04:05:16] *** Quits: dkmueller (~dkmueller@2a01:c23:bc05:2b00:56bd:7c0e:bee9:7bb4) (Quit: WeeChat 3.1)
[04:06:34] *** Quits: Garb0 (~Garb0@user/garb0) (Quit: Garb0)
[04:07:33] *** Quits: rolo (~error@2a02:8108:8dc0:1cec:20c4:ad1b:af34:f1e2) (Ping timeout: 244 seconds)
[04:10:44] *** Quits: skyz (~skyz@ool-43538427.dyn.optonline.net) (Quit: Client closed)
[04:10:47] *** Joins: llorllale (~llorllale@2607:9880:3a18:69:19f2:6c0e:2873:b9ae)
[04:12:26] *** Joins: tofran (~tofran@37.189.158.134)
[04:14:02] *** Quits: llorllale (~llorllale@2607:9880:3a18:69:19f2:6c0e:2873:b9ae) (Client Quit)
[04:15:51] *** Quits: arcatech (~arcatech@user/arcatech) (Remote host closed the connection)
[04:23:05] *** Joins: rolo (~error@2a02:8108:8dc0:1cec:20c4:ad1b:af34:f1e2)
[04:26:17] *** Quits: mhorn (~textual@134.134.139.72) (Quit: Textual IRC Client: www.textualapp.com)
[04:29:47] <src> question about concurrency
[04:29:58] <b0nn> answer about concurrency
[04:30:22] <fizzie> At least they happened in the causal order.
[04:30:28] <b0nn> lol
[04:30:34] <src> https://play.golang.org/p/mc_BQIT4WUb isn't there a danger here, that I sent integer 99 into the channel, and it's picked up by i, while increment just hangs of sorts?
[04:30:38] *** Joins: Skyz (~Skyz@ool-43538427.dyn.optonline.net)
[04:30:47] <src> I've run it many times and it always behaves as I expect it to and prints 100 in the end
[04:30:49] *** Joins: thinkofher (uid503725@id-503725.charlton.irccloud.com)
[04:31:20] *** Quits: Skyz (~Skyz@ool-43538427.dyn.optonline.net) (Client Quit)
[04:31:34] *** Joins: llorllale (~llorllale@2607:9880:3a18:69:1536:215e:eaad:4ce4)
[04:31:37] <fizzie> src: No, because `i := <-c` can't happen before `c <- 99` finishes, and it's an unbuffered channel.
[04:31:51] <fizzie> If you make it https://play.golang.org/p/XLHZoALWllD you can get 99 out.
[04:32:42] <b0nn> The channel is ordered; that is if you put a 1, then a 2, then that is the order they will come out of the channel
[04:33:50] <rewt> i think his concern is which of lines 13 and 23 will happen first
[04:33:53] <b0nn> the i := <-c prevents the channel being closed
[04:33:54] *** Quits: rolo (~error@2a02:8108:8dc0:1cec:20c4:ad1b:af34:f1e2) (Ping timeout: 264 seconds)
[04:33:55] <src> is it that c <- 99 basically waits until the 99 is received on the other end
[04:34:06] *** Joins: acidfu- (~nicolasbo@2605:8d80:5c0:65bb:e40d:4c54:1869:4c50)
[04:34:08] <fizzie> With an unbuffered channel you need to have two (separate) coroutines to meet and exchange that value, so the only possible receive that can pair up with `c <- 99` is the `r := <-c` on line 23.
[04:34:09] <src> so that's the point both functions "synch up" for the first time?
[04:34:54] <src> fizzie: I thought r := <-c pairs up with c <- 99, now I am confused :P
[04:35:15] <fizzie> Isn't that what I said?
[04:35:27] <rewt> yeah, with an unbuffered channel, the write waits for the read to be ready to read, so c <- 99 will wait until r := <-c is ready to read it
[04:35:42] <src> fizzie: yes it is, sorry
[04:35:47] <b0nn> This proves the point on which will be executed first https://play.golang.org/p/3Odni85uXmH
[04:36:19] *** Joins: Skyz (~Skyz@ool-43538427.dyn.optonline.net)
[04:39:33] <src> sorry but I don't understand how fizzie's example changes things https://play.golang.org/p/XLHZoALWllD
[04:39:52] <src> so now the channel isn't unbuffered but has buffer capacity 1 correct?
[04:40:11] <b0nn> That's buffered
[04:40:12] *** Quits: klltkr (~klltkr@host86-168-182-186.range86-168.btcentralplus.com) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[04:40:28] *** Quits: Skyz (~Skyz@ool-43538427.dyn.optonline.net) (Client Quit)
[04:41:07] <b0nn> Which means that the main thread/goroutine can continue because it's not stuck waiting for the secondary goroutine to read from the channel
[04:45:08] <src> k, I will have to read up on buffered vs unbuffered but unbuffered if I sent something to the channel it will wait until that something is taken out
[04:45:22] <src> so that is a point where functions synch up (using goroutines and channels)
[04:45:46] <src> so far so good, ty
[04:46:02] *** Quits: predmijat_ (~predmijat@mail.strogopro.com) (Quit: bye)
[04:46:16] *** Quits: tedwing (~anon@lfbn-idf3-1-1409-99.w109-221.abo.wanadoo.fr) (Quit: leaving)
[04:46:23] <b0nn> with a buffered channel the channel will /store/ (or cache) some number of elements
[04:46:47] <b0nn> when the max that it can hold is reached anybody trying to write to it will block
[04:47:03] <b0nn> no matter if that's 0 (unbuffered) or 300
[04:47:34] *** Joins: predmijat (~predmijat@mail.strogopro.com)
[04:48:01] <b0nn> So, what you are seeing with the 0 buffered channel is a goroutine trying to write to a 'full' channel, and having to wait for another goroutine to read from it
[04:48:19] <src> oh I get it
[04:48:30] <src> thanks for making the effort, that is very clear
[04:48:55] <src> the unbuffered channel has no cache, so send/receive always will have to synch up, that's it
[04:49:05] <b0nn> spot on
[04:49:09] <src> thanks
[04:53:07] *** Quits: fputs (~fputs@67.59.83.166) (Remote host closed the connection)
[05:00:04] *** Quits: Guest9646 (~KekSi@x4db68d8f.dyn.telefonica.de) (Quit: *.net *.split)
[05:02:19] *** Quits: RougeR (~RougeR@user/rouger) (Ping timeout: 244 seconds)
[05:02:21] <b0nn> hrm, there was a deadlock example on reddit recently that showed this too
[05:02:54] <b0nn> someone was writing to buffered channels, which were writing to buffered channels, which were writing to a (buffered) done channel
[05:03:05] *** Quits: andlabs (~andlabs@68.237.68.71) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[05:03:08] <src> b0nn: serious question, is there a good golang subreddit? is reddit any good for programming?
[05:03:24] <b0nn> But, the first goroutine, the one writing to the buffered channel in the first place, wasn't able to read from the buffered done channel
[05:03:25] *** Joins: vptr (~vptr@user/vptr)
[05:03:39] <src> people keep recommending it saying one has to know the good subreddits and then it's decent, but tbh I never was fond of reddit, no matter the topic
[05:03:52] <b0nn> src: That's a hard question - the go reddit could do with some love I think
[05:03:53] *** Joins: arcatech (~arcatech@user/arcatech)
[05:04:41] <src> I follow rob pike and golang twitter (via rss), and the golang blog (via rss)
[05:04:53] *** Joins: andlabs (~andlabs@68.237.68.71)
[05:05:25] <src> that's all I have which is golang related though (but I guess that's enough anyways)
[05:05:26] <b0nn> So, the reason that I follow IRC, and reddit, is because people ask questions - I learn from answering them or watching other people answer them
[05:05:49] <src> I know what you mean
[05:05:54] <src> if you truly know something you can explain it
[05:06:03] *** Joins: rolo (~error@2a02:8108:8dc0:1cec::7919)
[05:06:08] <src> if you can't you probably don't know as well as you thought
[05:06:13] <src> been noticing that a lot as well
[05:06:20] <b0nn> Not only me knowing it, but rewt and fizzie in your question made me focus
[05:06:36] <b0nn> Which helps me to learn
[05:07:11] <b0nn> And then there are the questions where I'm completely at sea, and other people answer with ease
[05:07:37] <b0nn> Here's the deadlock https://www.reddit.com/r/golang/comments/nqqcmr/help_with_deadlock/h0cbed5/?context=3
[05:08:07] <src> b0nn: this is my summary of an unbuffered channel in case you're interested https://play.golang.org/p/PAqRDjk2vaT
[05:08:20] <src> b0nn: it's basically what you said, you don't have to read it if it's too long for you
[05:10:34] <b0nn> It's good; I think buffer is an older word than cache WRT CS (My memory of buffers goes back to the 80s, caches, 200s)
[05:10:48] <b0nn> 2000s*
[05:10:59] *** Quits: rolo (~error@2a02:8108:8dc0:1cec::7919) (Ping timeout: 272 seconds)
[05:17:44] *** Quits: paulgrmn (~paulgrmn@user/paulgrmn) (Ping timeout: 264 seconds)
[05:22:41] <src> how long are golang playground links good for?
[05:22:54] <src> indefinitely? (unless removed for some sort of violation)
[05:23:02] <b0nn> not indefinite
[05:23:10] <b0nn> but I'm not sure of the lifetime
[05:23:14] <src> k
[05:24:18] *** Joins: yelnah (~felix@2001:44b8:309e:405:6f0:21ff:fe3c:d4d7)
[05:24:41] *** Joins: mpinheir (~mpinheir@S0106f85e4294c2ea.vf.shawcable.net)
[05:31:51] <b0nn> This thread on the mailing list https://groups.google.com/g/golang-nuts/c/moPM3rOeXXQ - the intention was for playground to be indefinite, but the links of one of the posts are all dead
[05:35:09] <b0nn> hm, not *all* dead, only a couple
[05:48:51] *** Joins: tree (sid500598@user/psb)
[05:48:51] *** Joins: Crassus (~Crassus@user/crassus)
[05:49:55] *** Quits: bradp (~bradp@cpe-70-92-7-182.wi.res.rr.com) (Quit: ZNC - https://znc.in)
[05:50:10] *** Joins: bradp (~bradp@cpe-70-92-7-182.wi.res.rr.com)
[05:53:11] <src> does anyone have a favorite golang talk? I've been watching some lately and there certainly seem to be some good ones, but surely there are some I'm poised to overlook
[05:53:59] *** Quits: andlabs (~andlabs@68.237.68.71) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[05:54:29] <Tv_> src: many in https://talks.golang.org/ are very good
[05:55:24] *** Joins: acidfoo (~nicolasbo@2605:8d80:5c0:65bb:8dcf:3491:179b:30f2)
[05:55:30] *** Joins: andlabs (~andlabs@68.237.68.71)
[05:55:35] <src> nice thanks bookmarked
[05:55:52] <Tv_> https://talks.golang.org/2013/oscon-dl.slide is great though i think still missing video
[05:56:42] *** Quits: acidfu- (~nicolasbo@2605:8d80:5c0:65bb:e40d:4c54:1869:4c50) (Ping timeout: 264 seconds)
[05:56:56] <Vigdis> src, https://www.youtube.com/watch?v=yi5A3cK1LNA
[05:57:27] <src> Vigdis: awesome, haven't seen this one, will download :)
[06:01:52] <Vigdis> src, what's your favorite so far?
[06:03:04] <src> I've been going through the official ones mainly
[06:03:32] <src> so anything involing the go team, or a member of the go team (russ cox, rob pike)
[06:04:21] <src> I liked the "can you write an OS kernel in go" upon first viewing (though that was quite a while a go when I didn't even learn / program in go)
[06:05:39] *** rabbitear_ is now known as rabbitear
[06:06:12] <src> Vigdis: I liked https://www.youtube.com/watch?v=oV9rvDllKEg and https://www.youtube.com/watch?v=f6kdp27TYZs but some of it is over my paygrade atm (but I will come back and revisit those)
[06:06:40] <Vigdis> thanks, I'll check them up :)
[06:10:50] *** Joins: Skyz (~Skyz@ool-43538427.dyn.optonline.net)
[06:12:20] *** Quits: sudoforge (~sudoforge@wireguard/tunneler/sudoforge) (Ping timeout: 264 seconds)
[06:13:59] *** Quits: andlabs (~andlabs@68.237.68.71) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[06:14:32] <Skyz> Hi
[06:15:58] *** Joins: andlabs (~andlabs@68.237.68.71)
[06:23:37] *** Quits: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com) (Remote host closed the connection)
[06:25:21] *** Joins: sudoforge (~sudoforge@wireguard/tunneler/sudoforge)
[06:32:13] *** Quits: burningserenity (~burningse@142-196-178-216.res.spectrum.com) (Quit: ZNC 1.8.2 - https://znc.in)
[06:41:54] *** Quits: Ohlov3895174 (~0hlov3@dyndsl-080-228-184-100.ewe-ip-backbone.de) (Ping timeout: 252 seconds)
[06:45:56] *** Quits: koo6 (~koo6@89-24-13-235.customers.tmcz.cz) (Ping timeout: 264 seconds)
[06:47:07] *** Joins: frost (~frost@59.71.241.190)
[06:57:58] *** Quits: SincereFox (uid337158@user/sincerefox) (Quit: Connection closed for inactivity)
[07:00:24] <Freman> man every time those videos pop up, I'm reminded of one of our devs thinking channels and goroutines to get each row of data from the db....
[07:03:26] <b0nn> If big O is worst case - why is quicksort not "Slow as treacle" sort?
[07:03:53] <b0nn> I mean, quicksort has an avg case O(n log n) but it's worst case is O(n*n)
[07:05:11] <lemmi> because you can either check for the bad case or limit the number of bad cases with good pivots
[07:05:55] <b0nn> I *think* that quicksort's worst case is so bad that the linux kernel has dropped it in favour of heap sort
[07:06:15] <lemmi> the worst case is a reversed sorted list
[07:06:46] <lemmi> in practice though, quicksort works well
[07:06:52] *** Quits: austin_ (~ausserz@n219073000163.netvigator.com) (Ping timeout: 268 seconds)
[07:07:37] <b0nn> https://github.com/torvalds/linux/blob/master/lib/sort.c#L181
[07:09:19] <b0nn> I wrote a few sorts in go (heapsort, mergesort, quicksort) and benchmarked them, with quicksort something like twice as fast as the other two *but* I then ran the Go sort, and it ran at the same time as the heap/merge sorts)
[07:09:23] *** Joins: purpleidea (~james@user/purpleidea)
[07:09:42] <b0nn> er, the Go standard library
[07:10:01] <lemmi> with the same interface?
[07:10:36] <lemmi> because that factor of 2 might just be down to reflection
[07:13:09] <b0nn> https://play.golang.org/p/68OfPywfHHW
[07:13:55] <b0nn> Although that doesn't show the benchmarks for the other stuff - they all worked on the same type of input
[07:14:22] <seebs> yeah, usually quicksort is fine but Not Quite Always.
[07:14:41] *** Quits: bitshift_ (~jesse@108.162.158.229) (Ping timeout: 272 seconds)
[07:15:10] <Tv_> kernel = security boundary = special case
[07:15:15] *** Joins: bitshift (~jesse@108.162.158.229)
[07:15:29] <Tv_> sorting a list of filenames or such in your userspace app won't have the same requirements
[07:15:43] <lemmi> i think it's a good idea for the kernel to protect against these things, as it's exposed to quite a lot of things. all user generated
[07:16:00] <Tv_> also, while i haven't looked at this specific implementation, timsort is might fine: https://pkg.go.dev/github.com/psilva261/timsort/v2
[07:16:21] <lemmi> rust uses/used timsort IIRC
[07:16:23] <Tv_> *mighty fine
[07:16:43] *** Quits: Skyz (~Skyz@ool-43538427.dyn.optonline.net) (Quit: Client closed)
[07:16:56] <Tv_> basically in a world where timsort exists, you probably don't want to write anything else from scratch for the general purpose
[07:17:08] <Tv_> (ye olde disk-to-disk sorts etc might still be special cases)
[07:19:59] <b0nn> https://github.com/scandum/quadsort
[07:20:28] *** Joins: Skyz (~Skyz@ool-43538427.dyn.optonline.net)
[07:20:36] <b0nn> Alleged by /. to be faster than quicksort and timsort (for random and partially sorted input sets)
[07:20:48] <b0nn> https://developers.slashdot.org/story/20/07/25/0050202/is-there-a-sorting-algorithm-faster-than-quicksort-and-timsort
[07:21:28] <b0nn> Might write that in Go later this afternoon and see how she flies
[07:22:22] <lemmi> that just looks like a merge sort with a couple of optimisations for small n and skipping
[07:26:04] <b0nn> By conjoining the three operations you perform only 2 comparisons in the best case and the swaps are chained together turning a worst case of 9 assignments into a worst case of 4.
[07:26:13] <b0nn> Ye olde - do less work
[07:26:38] <lemmi> constructing sorting networks with minimal swaps isn't really a new thing. it might just have different hardware requirements to be faster. the trade-off is code size to number of swaps.
[07:27:07] <lemmi> assignments aren't really the problem i think, usually it's waiting for the value if it's not in the cache already
[07:28:48] *** Joins: edrocks (~Ed@user/edrocks)
[07:29:27] <b0nn> https://github.com/scandum/quadsort/blob/master/images/graph1.png
[07:29:55] <b0nn> As for what's better - my plan is to find out with Go's benchmark tests this afternoon
[07:30:06] <b0nn> I mean, I have literally just found out this exists
[07:33:43] <lemmi> personally my alltime favourite sorting algorithm has to be slowsort. sadly only the german wiki entry has the hilarious explanation
[07:34:31] <Tv_> bogosort or bust
[07:35:05] <lemmi> translation: "This is done recursivly, until [...] a solution can no longer be avoided"
[07:35:36] <Tv_> lemmi: worst case of randomized bogosort is that it literally never finishes
[07:36:06] <Tv_> O(inf), take that
[07:36:18] <lemmi> yeah.. but slowsort is so much more elegant
[07:36:31] <lemmi> it actually took an effort to produce something like this
[07:36:35] <foobaz> it's linear time! O(1), where k=inf
[07:37:09] <lemmi> bogosort is just the first thing you come up after taking a CS class, doing all the sorting algorithms and having too much to drink
[07:37:45] <b0nn> In computer science, bogosort[1][2] (also known as permutation sort, stupid sort,[3] or slowsort[4]) i
[07:38:00] <b0nn> I'm confused, are they the same thing (bogosort and slowsort)
[07:38:06] <Tv_> lemmi: dunno maybe earlier. ever heard of the card game 52?
[07:38:23] <lemmi> b0nn: refering to this https://en.wikipedia.org/wiki/Slowsort
[07:39:33] *** Quits: acidfoo (~nicolasbo@2605:8d80:5c0:65bb:8dcf:3491:179b:30f2) (Ping timeout: 268 seconds)
[07:40:18] <b0nn> I propose: Select a random indicie in the unsorted array, swap it with another randomly selected indicie value (which may also be itself)
[07:41:47] <lemmi> Tv_: not exactly that one, but i suspect the rules are similar to the local variant of "32, heb auf!"
[07:42:01] * Tv_ throws a deck of cards all over lemmi
[07:42:11] * lemmi likes cards
[07:43:46] <Tv_> okay my German isn't good enough to understand the rules of 32, heb auf
[07:44:05] <Tv_> but it seems to be the same game
[07:47:00] <lemmi> yeah. you can navigate from the english wikipedia page of "game 52" to the "32, heb auf" by switching to german. (which is what i use when normal translation apps don't work)
[07:53:12] <src> as I understand it an empty select can be useful if you have goroutines running you want to run indefinitely, so https://play.golang.org/p/ixA7KcH298e works as expected, but why does it have a fatal error in the end?
[07:54:19] <b0nn> Go's deadlock detection is quite crude - it notes that goroutines are not running, and after a set time declares a deadlock
[07:54:44] <b0nn> In your case, the main goroutine cannot continue past the select{} which looks like a dealock to Go
[07:56:19] <src> b0nn: so first of all a select works on goroutines rather than on channels (which is what I assumed somehow)
[07:56:28] <b0nn> Also, this is fine reading if the select{} trick tickles your fancy https://blog.sgmansfield.com/2016/06/how-to-block-forever-in-go/
[07:57:51] <src> b0nn: and so once the goroutines are finished and select{} has no goroutines running, it simply assumes deadlock, illustration https://play.golang.org/p/_aQGXgHZpCp
[07:58:31] *** Quits: vptr (~vptr@user/vptr) (Remote host closed the connection)
[07:58:55] <src> b0nn: thank you for the link, won't check it out now, but later :)
[07:59:08] <b0nn> so, select is working on channels, but holding the goroutine (main) from exiting
[08:00:56] <b0nn> Select calls this function https://github.com/golang/go/blob/2ebe77a2fda1ee9ff6fd9a3e08933ad1ebaea039/src/runtime/select.go#L102
[08:01:36] <b0nn> Or, rather, this function is called - gopark puts the calling gorouitne into a run queue that the scheduler will not put onto a process
[08:01:59] * b0nn makes things even more confusing....
[08:02:09] *** Joins: austin_ (~ausserz@n219073000163.netvigator.com)
[08:03:44] <src> glancing over the gopark function it all seems super obvious /s
[08:04:09] <b0nn> lol, it requires a bit of knowledge about how scedules goroutines
[08:04:23] <b0nn> how go schedules goroutines
[08:04:46] <b0nn> I've got a meeting in about 20 minutes so I will brain dump and see how bad it is
[08:05:48] <b0nn> Goroutines are userspace threads - that is, the Go runtime manages them, not the kernel/OS
[08:06:34] <b0nn> The runtime knows that there are kernel threads (and calls them "M"s) and it knows about the goroutines (and calls them "G"s)
[08:06:51] <b0nn> And in the middle of those two are "Processors" "P"s
[08:07:13] <b0nn> Each P has a queue of goroutines
[08:07:25] <b0nn> Waiting to get their turn on the CPU
[08:07:37] <b0nn> these are called runq in the code
[08:08:28] <b0nn> The runtime has a runq that is not married to a P, anything sitting in that queue will never get CPU time (until the scheduler takes them out and puts them into a runq owned by a P)
[08:08:45] <b0nn> And that runq is where gopark is putting the goroutine
[08:09:40] <Skyz> *confused*
[08:11:02] * b0nn strongly recommends a few chapters of Yanenbaum's Operating Systems design and Implementation - and spelunking through the Go source
[08:11:10] <b0nn> Tanenbaum's*
[08:11:39] <b0nn> https://github.com/golang/go/blob/2ebe77a2fda1ee9ff6fd9a3e08933ad1ebaea039/src/runtime/proc.go#L20
[08:28:30] *** Quits: Skyz (~Skyz@ool-43538427.dyn.optonline.net) (Quit: Client closed)
[08:29:34] *** Joins: Kane (~Kane@2a01:e34:ee89:5d90:5c84:9291:82ff:4148)
[08:37:23] *** Quits: arcatech (~arcatech@user/arcatech) (Quit: Bye.)
[08:43:15] <seebs> i feel like "hey is this language interactive or is it like C" is a question that i would say argues against "you should be doing OS level code right now"
[08:43:27] <Tv_> *n't
[08:43:40] <Tv_> oh argues against, yes yes
[08:43:54] <Tv_> also, haven't seen a non-interactive computer in my lifetime
[08:44:28] <Tv_> my university used old punch cards as seat assignments in exams, they were bright colors so good for color coding (interleave people taking different exams to minimize shoulder surfing)
[08:45:16] *** Joins: arcatech (~arcatech@user/arcatech)
[08:46:29] *** Quits: ziofork (~ziofork@fr.worn.eu) (Quit: Ping timeout (120 seconds))
[08:46:36] *** Quits: pmcnabb (~pmcnabb@user/pmcnabb) (Quit: Ping timeout (120 seconds))
[08:46:47] *** Joins: ziofork (~ziofork@fr.worn.eu)
[08:47:01] *** Joins: pmcnabb (~pmcnabb@user/pmcnabb)
[08:48:01] *** Quits: arcatech (~arcatech@user/arcatech) (Client Quit)
[08:52:16] *** Joins: arcatech (~arcatech@user/arcatech)
[08:54:30] *** Quits: src (~src@user/src) (Ping timeout: 265 seconds)
[09:00:41] *** Quits: arcatech (~arcatech@user/arcatech) (Quit: Bye.)
[09:02:09] *** Quits: Progster (~blah@pool-72-80-87-95.nycmny.fios.verizon.net) (Ping timeout: 272 seconds)
[09:02:22] *** Quits: chuckx (~chuckx@77.81.142.11) (Changing host)
[09:02:22] *** Joins: chuckx (~chuckx@user/chuckx)
[09:03:00] *** Quits: mpinheir (~mpinheir@S0106f85e4294c2ea.vf.shawcable.net) (Quit: Client closed)
[09:04:03] *** Quits: sudoforge (~sudoforge@wireguard/tunneler/sudoforge) (Ping timeout: 272 seconds)
[09:13:19] *** Quits: edrocks (~Ed@user/edrocks) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[09:15:29] *** Quits: dan- (~d@ircdocs/dan-) (Ping timeout: 244 seconds)
[09:15:54] *** Joins: dan- (~d@ircdocs/dan-)
[09:17:10] *** Quits: welt[m] (~weltspide@2001:470:69fc:105::15e2) (Read error: Connection reset by peer)
[09:17:10] *** Quits: phoenix[m] (~phoenixma@2001:470:69fc:105::f9b) (Read error: Connection reset by peer)
[09:17:10] *** Quits: ubh (~ubh@2001:470:69fc:105::852) (Read error: Connection reset by peer)
[09:17:10] *** Quits: worr (~worr@2001:470:69fc:105::78c) (Read error: Connection reset by peer)
[09:17:10] *** Quits: meain (~meain@2001:470:69fc:105::2db) (Write error: Connection reset by peer)
[09:17:10] *** Quits: spudly[m] (~spudly@2001:470:69fc:105::18) (Read error: Connection reset by peer)
[09:17:10] *** Quits: speatzle_ (~speatzles@2001:470:69fc:105::1003) (Write error: Connection reset by peer)
[09:17:11] *** Quits: archwizard (~archwizar@2001:470:69fc:105::929) (Write error: Connection reset by peer)
[09:17:11] *** Quits: kadoban (~kadoban@user/kadoban) (Write error: Connection reset by peer)
[09:17:11] *** Quits: mrjumper[m] (~mr-jumper@2001:470:69fc:105::7f1) (Read error: Connection reset by peer)
[09:17:11] *** Quits: jai (~darkapex@user/darkapex) (Write error: Connection reset by peer)
[09:17:50] *** Joins: spudly[m] (~spudly@2001:470:69fc:105::18)
[09:18:53] *** Joins: ubh (~ubh@2001:470:69fc:105::852)
[09:18:53] *** Joins: jai (~darkapex@user/darkapex)
[09:18:53] *** Joins: mrjumper[m] (~mr-jumper@2001:470:69fc:105::7f1)
[09:18:53] *** Joins: meain (~meain@2001:470:69fc:105::2db)
[09:18:53] *** Joins: archwizard (~archwizar@2001:470:69fc:105::929)
[09:18:53] *** Joins: phoenix[m] (~phoenixma@2001:470:69fc:105::f9b)
[09:18:53] *** Joins: worr (~worr@2001:470:69fc:105::78c)
[09:18:54] *** Joins: kadoban (~kadoban@user/kadoban)
[09:19:05] *** Joins: welt[m] (~weltspide@2001:470:69fc:105::15e2)
[09:19:07] *** Joins: speatzle_ (~speatzles@2001:470:69fc:105::1003)
[09:21:44] *** Quits: toshywoshy (~toshywosh@ptr-377wf33o3bnthuddmycb.18120a2.ip6.access.telenet.be) (Ping timeout: 272 seconds)
[09:22:51] *** Joins: toshywoshy (~toshywosh@ptr-377wf33o3bnthuddmycb.18120a2.ip6.access.telenet.be)
[09:31:54] *** Joins: obviyus (sid415299@user/obviyus)
[09:33:27] *** Quits: chemsmith (~chemsmith@user/chemsmith) (Read error: Connection reset by peer)
[09:33:41] *** Joins: chemsmith (~chemsmith@user/chemsmith)
[09:35:05] *** Quits: hendry (~hendry@210.23.22.2) (Ping timeout: 272 seconds)
[09:35:29] *** Quits: TFKyle (~kyle@64.201.205.70) (Ping timeout: 268 seconds)
[09:37:54] *** Joins: hendry (~hendry@210.23.22.2)
[09:40:54] *** Joins: TFKyle (~kyle@64.201.205.70)
[09:41:21] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[09:51:11] *** Joins: mikoto-chan (~mikoto-ch@ip-213-49-189-31.dsl.scarlet.be)
[09:51:39] *** Quits: rabbitear (~juice@142.93.115.104) (Remote host closed the connection)
[09:52:03] *** Joins: rabbitear (~juice@142.93.115.104)
[09:57:27] *** Quits: tg_ (~tg@rockylinux/infra/tg) (Quit: tg_)
[10:01:42] *** Joins: Vukan (~drazen@62.240.24.136)
[10:17:04] <iivvoo> I used to work for/with tanenbaum, actually. Nice guy
[10:30:58] *** Joins: rolo (~error@2a02:8108:8dc0:1cec:e173:f838:6b44:6c47)
[10:33:26] *** Joins: dyslexicat (~dyslexica@ymir.whatbox.ca)
[10:35:04] *** Joins: egy (~egy@105.196.44.38)
[10:35:31] *** Joins: jcajka (~jcajka@2001:1ae9:1052:8400:f9b4:e1a9:7b3a:4b77)
[10:43:26] *** Joins: KekSi (~KekSi@x4dbd5d7c.dyn.telefonica.de)
[10:43:38] *** Quits: dyslexicat (~dyslexica@ymir.whatbox.ca) (Ping timeout: 244 seconds)
[10:44:29] *** Joins: shka (~herr@109.231.62.239)
[10:46:36] *** Quits: rolo (~error@2a02:8108:8dc0:1cec:e173:f838:6b44:6c47) (Ping timeout: 272 seconds)
[10:48:06] *** Joins: rolo (~error@2a02:8108:8dc0:1cec:e173:f838:6b44:6c47)
[10:52:56] *** Quits: rolo (~error@2a02:8108:8dc0:1cec:e173:f838:6b44:6c47) (Ping timeout: 272 seconds)
[10:53:53] *** Quits: kshockey (~kyshoc@user/kyshoc) (Ping timeout: 265 seconds)
[10:57:35] *** Joins: mrig (~mrig@user/mrig)
[11:00:10] *** Joins: fef (~thedawn@user/thedawn)
[11:00:11] *** Joins: rolo (~error@2a02:8108:8dc0:1cec:e173:f838:6b44:6c47)
[11:00:25] *** binkers- is now known as binkers
[11:09:15] *** Joins: prio (~jonathan@195.162.84.188)
[11:10:24] *** Quits: rolo (~error@2a02:8108:8dc0:1cec:e173:f838:6b44:6c47) (Quit: WeeChat 3.1)
[11:11:43] *** Joins: kyshoc (~kyshoc@adsl-99-93-208-248.dsl.mtry01.sbcglobal.net)
[11:11:44] *** Quits: kyshoc (~kyshoc@adsl-99-93-208-248.dsl.mtry01.sbcglobal.net) (Changing host)
[11:11:44] *** Joins: kyshoc (~kyshoc@user/kyshoc)
[11:15:37] *** Joins: theoceaniscool (~theoceani@188.127.173.202)
[11:22:40] *** Joins: absc (~absc@dynamic-adsl-94-34-175-4.clienti.tiscali.it)
[11:23:02] *** Quits: mikoto-chan (~mikoto-ch@ip-213-49-189-31.dsl.scarlet.be) (Read error: No route to host)
[11:24:01] *** Joins: mikoto-chan (~mikoto-ch@ip-213-49-189-31.dsl.scarlet.be)
[11:25:10] *** Joins: dmueller (~dkmueller@2a01:c23:c05b:2f00:473a:aec9:6d44:aa35)
[11:25:14] *** Quits: pepee (~user@user/pepee) (Quit: bye $IRC)
[11:26:30] *** Quits: Vukan (~drazen@62.240.24.136) (Ping timeout: 272 seconds)
[11:31:12] <Cork> ok, now do one make go get / go mod get the master of a github.com branch?
[11:31:23] <Cork> it always replaces it with the latest tag
[11:31:39] <Cork> now==how
[11:38:01] *** Quits: dmueller (~dkmueller@2a01:c23:c05b:2f00:473a:aec9:6d44:aa35) (Quit: WeeChat 3.1)
[11:39:52] <mrig> Cork: does 'go get -d repoAddress@master' work?
[11:39:55] *** Joins: pupiw (~pupiw@2600:8801:f105:5900:4d00:7fff:fb6:51be)
[11:40:08] <mrig> you can also specify commits with the same syntax.
[11:41:05] <Cork> mrig: ya, -d worked, it ignored anything i gave it after @, that was the problem master or commit made no difference
[11:53:30] *** Joins: Xjs (~jannis@user/xjs)
[11:55:15] *** Joins: Jamalengo (~Jamalengo@93.176.132.124)
[11:56:08] *** Quits: jespada (~jespada@90.254.242.55) (Ping timeout: 264 seconds)
[11:56:34] *** Quits: andlabs (~andlabs@68.237.68.71) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[11:56:54] *** Quits: Jamalengo (~Jamalengo@93.176.132.124) (Client Quit)
[11:57:44] *** Joins: jannis (~jannis@user/xjs)
[11:57:59] *** Quits: Xjs (~jannis@user/xjs) (Ping timeout: 245 seconds)
[11:58:20] *** Joins: jespada (~jespada@90.254.242.55)
[12:00:58] *** Joins: dmathieu (~textual@laubervilliers-659-1-148-137.w92-154.abo.wanadoo.fr)
[12:02:24] *** Quits: predmijat (~predmijat@mail.strogopro.com) (Quit: bye)
[12:02:53] *** Joins: predmijat (~predmijat@mail.strogopro.com)
[12:04:32] *** Joins: trex (~trex@96.red-2-139-122.dynamicip.rima-tde.net)
[12:05:13] <mrig> great, I'll make a note and see if this could be clearer in the docs.
[12:05:53] *** Joins: dmueller (~dkmueller@2a01:c23:c05b:2f00:473a:aec9:6d44:aa35)
[12:10:55] *** Quits: betelgeuse (~john2gb@94-225-47-8.access.telenet.be) (Quit: The Lounge - https://thelounge.chat)
[12:12:45] *** Joins: fbandov (~fbandov@80.155.23.139)
[12:14:47] *** Quits: mikoto-chan (~mikoto-ch@ip-213-49-189-31.dsl.scarlet.be) (Read error: Connection reset by peer)
[12:15:25] *** Joins: mikoto-chan (~mikoto-ch@ip-213-49-189-31.dsl.scarlet.be)
[12:18:07] *** Quits: trex (~trex@96.red-2-139-122.dynamicip.rima-tde.net) (Remote host closed the connection)
[12:28:52] *** Quits: pupiw (~pupiw@2600:8801:f105:5900:4d00:7fff:fb6:51be) (Quit: Leaving)
[12:30:14] *** Quits: dmathieu (~textual@laubervilliers-659-1-148-137.w92-154.abo.wanadoo.fr) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[12:31:05] *** Joins: dmathieu (~textual@laubervilliers-659-1-148-137.w92-154.abo.wanadoo.fr)
[12:33:35] *** Joins: tedwing (~anon@lfbn-idf3-1-1409-99.w109-221.abo.wanadoo.fr)
[12:36:18] *** Quits: souvik (~souvik@103.199.182.246) (Ping timeout: 264 seconds)
[12:39:09] *** Joins: Ergo^ (~ergo@91.238.59.144)
[12:39:44] *** Joins: Guest91_ (~textual@2001:171b:c9bc:ce00:1843:6cfe:4acf:fbc0)
[12:50:29] *** Quits: theoceaniscool (~theoceani@188.127.173.202) (Ping timeout: 245 seconds)
[12:52:07] *** Joins: Vukan (~drazen@62.240.24.136)
[12:52:12] *** Joins: larkfisherman (~larkfishe@217.75.204.126)
[12:52:22] *** Quits: dmueller (~dkmueller@2a01:c23:c05b:2f00:473a:aec9:6d44:aa35) (Quit: WeeChat 3.1)
[12:53:16] *** Joins: andlabs (~andlabs@68.237.68.71)
[12:58:06] *** Joins: egy_ (~egy@105.196.212.17)
[12:59:39] *** Quits: egy (~egy@105.196.44.38) (Ping timeout: 245 seconds)
[13:02:56] *** Quits: fbandov (~fbandov@80.155.23.139) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[13:03:38] <ac5tin> if i want to return custom error, should i use errors.New() or fmt.Errorf()
[13:10:41] *** Quits: dmathieu (~textual@laubervilliers-659-1-148-137.w92-154.abo.wanadoo.fr) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[13:10:54] *** Joins: dr0n (~nabromov@92.40.255.115.threembb.co.uk)
[13:11:57] <mrig> ac5tin: you can make a struct, upon that struct define the method `(m MyError) Error() string` and then return &MyError{}
[13:12:30] <mrig> the errror is itself an interface, and this is really where it's magic is seen.
[13:13:30] *** Quits: purpleidea (~james@user/purpleidea) (Ping timeout: 252 seconds)
[13:17:05] *** Quits: Guest91_ (~textual@2001:171b:c9bc:ce00:1843:6cfe:4acf:fbc0) (Ping timeout: 244 seconds)
[13:18:02] *** Joins: fbandov (~fbandov@80.155.23.139)
[13:18:18] *** Joins: dmathieu (~textual@laubervilliers-659-1-148-137.w92-154.abo.wanadoo.fr)
[13:19:08] *** Joins: Guest91 (~textual@2001:171b:c9bc:ce00:f960:e959:ed9e:158d)
[13:23:59] <ac5tin> anyone tried using the serverless framework, there's aws-go , aws-go-dep and aws-go-mod, which one is the best
[13:27:16] *** Quits: fbandov (~fbandov@80.155.23.139) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[13:33:37] *** Quits: Guest91 (~textual@2001:171b:c9bc:ce00:f960:e959:ed9e:158d) (Ping timeout: 244 seconds)
[13:34:49] *** Quits: andlabs (~andlabs@68.237.68.71) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[13:35:17] *** Joins: fbandov (~fbandov@80.155.23.139)
[13:40:04] *** Quits: dr0n (~nabromov@92.40.255.115.threembb.co.uk) (Ping timeout: 245 seconds)
[13:41:14] *** Quits: fbandov (~fbandov@80.155.23.139) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[13:41:36] *** Quits: Crassus (~Crassus@user/crassus) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[13:42:01] *** Joins: Guest91 (~textual@2001:171b:c9bc:ce00:74b2:c6d6:8983:eb96)
[13:44:23] *** Joins: koo6 (~koo6@89-24-13-235.customers.tmcz.cz)
[13:48:44] *** Quits: dmathieu (~textual@laubervilliers-659-1-148-137.w92-154.abo.wanadoo.fr) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[13:49:02] *** Joins: Garb0 (~Garb0@user/garb0)
[13:50:41] *** Joins: dmathieu (~textual@laubervilliers-659-1-148-137.w92-154.abo.wanadoo.fr)
[13:55:58] *** Joins: fbandov (~fbandov@80.155.23.139)
[14:00:27] *** Joins: Naphta (~Naphta@cpc109307-brom11-2-0-cust11.16-1.cable.virginm.net)
[14:04:17] <Naphta> I have a "stupid" question, and I may possibly be being lazy but, I have ASCII text with byte escape sequences e.g. \b220, I'm fairly sure they're UTF-8 (but not 100%), how would I go about making that string in go whilst resolving the escape sequences into proper characters where possible?
[14:08:40] *** Quits: Deknos (~someone@user/menace) (Ping timeout: 268 seconds)
[14:10:12] <fizzie> "\b220" sounds pretty ambiguous. Is that the octal 0220 (decimal 144, hex 0x90), or something else?
[14:10:28] <fizzie> In any case, Go strings are sequences of bytes and aren't *required* to contain UTF-8, so (assuming you're talking manually, not programmatically) I imagine you could just replace those with the corresponding single-byte Go escape sequences ("\NNN" octal, or "\xHH" hex).
[14:11:20] *** Joins: synthwave (~synthwave@p5b056bc7.dip0.t-ipconnect.de)
[14:11:26] *** Parts: synthwave (~synthwave@p5b056bc7.dip0.t-ipconnect.de) ()
[14:11:50] *** Joins: synthwave (~synthwave@p5b056bc7.dip0.t-ipconnect.de)
[14:12:07] *** Quits: synthwave (~synthwave@p5b056bc7.dip0.t-ipconnect.de) (Client Quit)
[14:12:27] *** Quits: thinkofher (uid503725@id-503725.charlton.irccloud.com) (Changing host)
[14:12:27] *** Joins: thinkofher (uid503725@user/thinkofher)
[14:13:24] *** Quits: mrig (~mrig@user/mrig) (Ping timeout: 245 seconds)
[14:13:45] <fizzie> https://play.golang.org/p/b6kjW6ccGGl <- slightly related
[14:14:41] *** jannis is now known as Xjs
[14:15:27] *** Joins: mrig (~mrig@user/mrig)
[14:16:52] *** Quits: Guest91 (~textual@2001:171b:c9bc:ce00:74b2:c6d6:8983:eb96) (Ping timeout: 272 seconds)
[14:18:30] *** Quits: dmathieu (~textual@laubervilliers-659-1-148-137.w92-154.abo.wanadoo.fr) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[14:19:37] *** Joins: Guest91 (~textual@2001:171b:c9bc:ce00:3534:8183:5325:b898)
[14:20:13] *** Quits: Garb0 (~Garb0@user/garb0) (Quit: Garb0)
[14:20:15] *** Joins: dmathieu (~textual@laubervilliers-659-1-148-137.w92-154.abo.wanadoo.fr)
[14:20:40] <b0nn> So, playing with Rust I learnt that there are 3 things, the rune, the byte, and the grapheme - How does Go do it?
[14:20:56] <b0nn> I mean, I've only heard bytes and runes in Go
[14:21:03] *** Quits: fbandov (~fbandov@80.155.23.139) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[14:24:14] <b0nn> Iterating over the runes loses information https://play.golang.org/p/5VACIBinLLS
[14:25:30] <b0nn> This is a bit better https://play.golang.org/p/guOGzfbk3tH
[14:25:51] <b0nn> At issue is the grapheme is actualy composed of two runes
[14:26:00] <mrig> The information is not lost, just does not display when not in order.
[14:26:11] <b0nn> ?
[14:26:13] <fizzie> I don't think Go really does "it" when it gets to be about graphemes, mostly because it's so messy and language-specific. Except maybe some things in the "golang.org/x/text" packages, you can find e.g. the Unicode normalization algorithms there.
[14:26:23] <mrig> Sanskrit is an interesting script, am pondering this at the moment.
[14:27:12] <mrig> b0nn: the glyph are constructed from different phonemes, and depending on the order of those phonemes the glyph is not the same.
[14:27:26] <b0nn> 19:55 < b0nn> At issue is the grapheme is actualy composed of two runes
[14:27:30] <mrig> The scrip itself uses compression.
[14:28:24] *** Quits: Guest91 (~textual@2001:171b:c9bc:ce00:3534:8183:5325:b898) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[14:28:25] <mrig> the best and most logical solution for sanskrit that I can see right now, is a new charset.
[14:28:44] <huf> /o\
[14:28:49] <mrig> an new root that would work with UTF-8
[14:29:04] <b0nn> https://play.golang.org/p/InIubOUcXNy this is the best I think, you can see the final two graphemes have been decomposed into four runes
[14:29:33] <mrig> simple swap, the advantages for many dialects and languages that have the same phonetic basis, would be phenomenal.
[14:29:57] <mrig> I really phenomenal, from what I can gather.
[14:29:58] <b0nn> The reason I even know this issue exists https://doc.rust-lang.org/book/ch08-02-strings.html
[14:30:37] *** Quits: dmathieu (~textual@laubervilliers-659-1-148-137.w92-154.abo.wanadoo.fr) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[14:30:57] <mrig> this would be a massive advantage for cut and paste even between different scripts.
[14:31:31] <b0nn> oh, actually, Rust does the same as Go
[14:31:31] <mrig> it is a no brainer really.
[14:31:50] <b0nn> Getting grapheme clusters from strings is complex, so this functionality is not provided by the standard library. Crates are available on crates.io if this is the functionality you need.
[14:31:55] <mrig> sure it is unicode that does not do justice to these scripts.
[14:32:53] *** Joins: dmathieu (~textual@laubervilliers-659-1-148-137.w92-154.abo.wanadoo.fr)
[14:33:06] *** Joins: souvik (~souvik@157.43.227.156)
[14:34:27] <fizzie> https://play.golang.org/p/sX38cuBUwLb gets one step closer to splitting as you might "expect", by combining one of those two-codepoint sequences together, but it too splits the last one. Fair enough; normalization isn't really the same thing as text segmentation.
[14:34:27] <huf> this seems to do it correctly, if correctly means splitting into 4 https://github.com/rivo/uniseg
[14:34:54] <mrig> From what I gather, if these scripts were treated differently, you would be able to cut and paste from one 'tongue' straight into another.
[14:35:01] <mrig> in a terminal.
[14:35:17] <mrig> due to the phonetic basis.
[14:35:39] <b0nn> नमस्ते
[14:35:50] <b0nn> hm my irssi can handle it
[14:36:11] <mrig> The thing is that there are different unicode sets.
[14:36:18] <mrig> for the same scripts.
[14:37:17] <mrig> a nightmare to deal with if you want to analyze the language, and paradoxically it is arguably one of the most interesting script and language to analyze.
[14:37:19] <b0nn> huf https://play.golang.org/p/FnRu5f_W36E
[14:37:51] <huf> yeah, but is that correct? i cant tell cos i dont know what i'm looking at :)
[14:38:04] <huf> i only read in roman imperial subjectese
[14:38:37] <mrig> Dang I wish that indians had not learned to use the word 'correct' :D
[14:39:13] <mrig> It sounds like a Victorian school master when they do, cute but antiquated and rather black and white :)
[14:40:08] <mrig> it is used grammatically to affirm having understood something too, a colloquial usage.
[14:40:13] <b0nn> It splits them up, but I cannot see how to recombine them
[14:41:18] <b0nn> Eclipse visible in New York and UK happening right now
[14:41:19] *** Joins: fbandov (~fbandov@80.155.23.139)
[14:41:22] <huf> ask for the .Bytes()?
[14:42:09] <huf> but surely you can build stuff from slices of runes...
[14:43:44] <mrig> b0nn: very cool subject and an interesting library, thanks for bringing it up :)
[14:44:26] <b0nn> https://play.golang.org/p/z5X8mkxljsu
[14:44:56] <b0nn> It is a cool library, huf have you used it before?
[14:45:28] <b0nn> Or was it a lucky find on Google :)
[14:46:00] *** Quits: egy_ (~egy@105.196.212.17) (Ping timeout: 272 seconds)
[14:47:39] * mrig is binning unicode for these delightful phonetic scripts, the deserve more respect. :)
[14:48:14] <mrig> Pretty sure that with a different mapping they could be used for coding too in an appropriately designed terminal/editor.
[14:49:42] *** Quits: dmathieu (~textual@laubervilliers-659-1-148-137.w92-154.abo.wanadoo.fr) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[14:49:57] *** Joins: andlabs (~andlabs@68.237.68.71)
[14:54:06] *** Quits: fbandov (~fbandov@80.155.23.139) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[14:55:02] *** Joins: dyslexicat (~dyslexica@ymir.whatbox.ca)
[14:56:50] <huf> b0nn: just google, i cant even really program in go yet :D
[14:56:57] *** Quits: Naphta (~Naphta@cpc109307-brom11-2-0-cust11.16-1.cable.virginm.net) (Quit: Client closed)
[14:58:30] *** Quits: frost (~frost@59.71.241.190) (Quit: Connection closed)
[15:00:25] *** Quits: dyslexicat (~dyslexica@ymir.whatbox.ca) (Ping timeout: 244 seconds)
[15:00:34] *** Quits: souvik (~souvik@157.43.227.156) (Ping timeout: 272 seconds)
[15:02:02] *** Joins: souvik (~souvik@47.11.81.81)
[15:07:05] *** Joins: egy_ (~egy@105.196.212.17)
[15:10:23] *** Quits: adanwan (~adanwan@gateway/tor-sasl/adanwan) (Remote host closed the connection)
[15:10:36] *** Joins: adanwan (~adanwan@gateway/tor-sasl/adanwan)
[15:15:41] *** Joins: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com)
[15:16:28] *** Joins: Guest91 (~textual@213.55.224.174)
[15:21:05] *** Quits: Vukan (~drazen@62.240.24.136) (Ping timeout: 244 seconds)
[15:28:01] *** Quits: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com) (Remote host closed the connection)
[15:29:38] *** Joins: dr0n (~nabromov@92.40.255.115.threembb.co.uk)
[15:30:55] *** Joins: Garb0 (~Garb0@user/garb0)
[15:52:05] *** Quits: Guest91 (~textual@213.55.224.174) (Ping timeout: 244 seconds)
[15:55:19] <mrig> I thought that this might work, but no cigar : https://play.golang.org/p/H7Ok3r4gkTP
[15:55:29] *** Joins: Guest91 (~textual@213.55.224.69)
[15:55:42] * mrig feels a surge of motivation to continue in his work.
[15:59:36] <siXy> mrig: it does work, you just can't print out runes individually like that and expect to get the same as if you didn't.
[16:00:25] <mrig> siXy: right yes that is very true.
[16:00:35] *** Parts: sztanp3t (~sztanpet@znc.sztanpet.net) ()
[16:00:41] *** Joins: sztanpet (~sztanpet@znc.sztanpet.net)
[16:00:46] <siXy> []rune{2344}, []rune{2350} is not the same as []rune{2344, 2350}
[16:00:48] <sztanpet> also, https://golang.org/pkg/strings/#Reader.ReadRune
[16:00:54] <mrig> but for moving the phonemes about logically it is rather more complicated.
[16:01:33] <sztanpet> make a bytes.Buffer, pass it to strings.Reader, read runes
[16:01:35] <siXy> mrig: If you change your last example to append to []rune, then print it out as one, you'll get the same as you started with
[16:02:20] <mrig> but the syllables have been split up, it the aspect that I'm pondering at the moment.
[16:02:33] <siXy> e.g. https://play.golang.org/p/2Fme0cfdxxO
[16:03:16] <Sam> If you're interested in this sort of thing there are issues for what you want, but it doesn't exist within x/text yet:
[16:03:16] <Sam> https://golang.org/issue/14820
[16:03:16] <Sam> https://golang.org/issue/17256
[16:03:52] <Sam> (catching up on backlog, din't see those issues mentioned, but also I have limited context so apologies if that was a duplicate)
[16:03:58] *** Quits: egy_ (~egy@105.196.212.17) (Remote host closed the connection)
[16:04:49] <siXy> based on the activity in those issues, I'm not super convinced we'll see it any time soon
[16:05:05] *** Joins: egy_ (~egy@105.196.212.17)
[16:05:19] <mrig> sure yes, that is due to the functioning of the unicode; There are grammatical constructs within the Sanskrit language that are not really addressed very well just yet, also the very real fact that sanskrit has several scripts or script dialects that all map to the same underlying logical structure.
[16:05:33] <mrig> Thank you Sam, I am intrigued to have a read.
[16:06:05] <mrig> But I am thinking that the logical solution is not to change the language, go would work just fine as it is.
[16:06:24] <Sam> Yes, they are waiting for someone to actually do them. Work is not planned right now.
[16:06:37] <gpeskens[w]> Is there anything besides garbage collection that can interrupt go-routines? I'm having a hard to figure out issue where in the application I'm writing every hour or so it seems like a goroutine is halted for 3~ seconds, causing the video it is supposed to output via srt/udp to break
[16:06:45] *** Quits: jespada (~jespada@90.254.242.55) (Ping timeout: 244 seconds)
[16:07:41] *** Quits: strubbl89 (~strubbl@ipbcc18e84.dynamic.kabel-deutschland.de) (Quit: The Lounge - https://thelounge.github.io)
[16:07:43] <Sam> gpeskens[w]: not interrupt in the same way, no, but it's possible that a goroutine that's sleeping doesn't get scheduled in time after it can wake up. 3 seconds seems like a long time, but depending on your work load it can happen.
[16:08:16] <gpeskens[w]> Any ways to prevent it?
[16:08:57] <Sam> Not without knowing more about what's going on. GCed languages normally aren't great for work that requires precise timing, but you can almost certainly work around whatever the issue is by manually releasing one of the logical processors or something
[16:09:01] *** Joins: jespada (~jespada@90.254.242.55)
[16:09:01] <siXy> gpeskens[w]: I think it's really exceptionally unlikely that a runnable thread doesn't get scheduled for 3s unless you've monstrously overloaded your hardware. Modern OS schedulers are pretty good.
[16:09:13] <Sam> Also, what siXy said.
[16:09:27] *** Quits: Guest91 (~textual@213.55.224.69) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[16:09:27] *** Joins: strubbl89 (~strubbl@ipbcc18e84.dynamic.kabel-deutschland.de)
[16:09:29] <siXy> gpeskens[w]: So unless your box is hideously overloaded, it's more likely the problem is not in fact what you think it is
[16:09:31] <gpeskens[w]> The application is build around 2 goroutines, one that's polling RIST for packets, and another goroutine that selects on a few channels, including a data channel, which then loops over a map of io.Writers to output
[16:09:37] <gpeskens[w]> It shouldn't be
[16:09:45] <gpeskens[w]> load is way below max
[16:10:34] <Sam> Look around for some way that all of the reads or writes could block at once then. It's way more likely to be some sort of deadlock in your code than an issue with GC interrupts or scheduling.
[16:10:53] <Sam> (not impossible, just more likely)
[16:11:09] <sztanpet> also sounds like something some casual profiling would reveal
[16:11:40] <sztanpet> or even a well-timed sigquit to dump the goroutine traces when blocked
[16:11:46] <gpeskens[w]> The reads (at least the goroutine that polls the packets) are fine, it would log if it's falling behind which it's not doing atm
[16:12:08] <gpeskens[w]> And all outputs bork at the same exact time
[16:12:18] <gpeskens[w]> Also unrelated to what type (udp, srt)
[16:12:56] *** Quits: binkers (~binkers@user/binkers) (Quit: ZNC - https://znc.in)
[16:13:33] <gpeskens[w]> I'll look into profiling then :)
[16:13:41] <siXy> If you can't find the culprit with pprof, I'd start adding some way of getting better metrics out of your code about how long it's spending where
[16:14:00] <siXy> But I think you have a better than even chance of pprof telling you
[16:15:47] *** Joins: purpleidea (~james@user/purpleidea)
[16:15:51] *** Joins: binkers (~binkers@user/binkers)
[16:16:42] *** Joins: yoonkn (~user@175.197.208.79)
[16:18:08] *** Joins: fbandov (~fbandov@80.155.23.139)
[16:18:39] *** Joins: Guest91 (~textual@2001:171b:c9bc:ce00:b03a:f574:4f32:f54d)
[16:20:22] *** Quits: mrig (~mrig@user/mrig) (Ping timeout: 272 seconds)
[16:23:27] *** Quits: egy_ (~egy@105.196.212.17) (Remote host closed the connection)
[16:24:34] *** Joins: egy_ (~egy@105.196.212.17)
[16:26:30] *** Quits: dr0n (~nabromov@92.40.255.115.threembb.co.uk) (Quit: WeeChat 2.8)
[16:26:55] *** Joins: burningserenity (~burningse@142-196-178-216.res.spectrum.com)
[16:29:16] *** Joins: mrig (~mrig@user/mrig)
[16:30:46] *** Joins: frost (~frost@59.71.241.190)
[16:33:48] *** Quits: pinpox (~pinpox@v2202101107577140883.nicesrv.de) (Quit: The Lounge - https://thelounge.chat)
[16:34:02] *** Joins: dmathieu (~textual@laubervilliers-659-1-148-137.w92-154.abo.wanadoo.fr)
[16:34:18] *** Joins: pinpox (~pinpox@v2202101107577140883.nicesrv.de)
[16:34:57] *** Quits: sono (~sono@107-209-210-210.lightspeed.sntcca.sbcglobal.net) (Read error: Connection reset by peer)
[16:37:06] *** Joins: edgy (~egy@105.196.12.132)
[16:38:35] *** Quits: egy_ (~egy@105.196.212.17) (Ping timeout: 244 seconds)
[16:39:04] *** Joins: Vukan (~drazen@62.240.24.136)
[16:41:04] *** Joins: tg (~tg@rockylinux/infra/tg)
[16:41:13] *** Quits: fef (~thedawn@user/thedawn) (Ping timeout: 252 seconds)
[16:43:04] *** Quits: whaley (~whaley@066-169-090-170.res.spectrum.com) (Ping timeout: 252 seconds)
[16:44:05] *** Joins: whaley (~whaley@066-169-090-170.res.spectrum.com)
[16:48:36] *** Quits: fbandov (~fbandov@80.155.23.139) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[16:49:57] *** Quits: Guest91 (~textual@2001:171b:c9bc:ce00:b03a:f574:4f32:f54d) (Ping timeout: 244 seconds)
[16:51:28] *** Quits: Vukan (~drazen@62.240.24.136) (Ping timeout: 268 seconds)
[16:51:30] *** Quits: tedwing (~anon@lfbn-idf3-1-1409-99.w109-221.abo.wanadoo.fr) (Ping timeout: 244 seconds)
[16:51:35] *** Joins: Guest91 (~textual@2001:171b:c9bc:ce00:a493:a54c:a105:59bc)
[16:52:15] *** Joins: fbandov (~fbandov@80.155.23.139)
[16:52:35] *** Quits: meinside (uid24933@id-24933.brockwell.irccloud.com) (Quit: Connection closed for inactivity)
[16:53:46] *** Quits: Garb0 (~Garb0@user/garb0) (Quit: Garb0)
[17:06:10] *** Quits: fbandov (~fbandov@80.155.23.139) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[17:06:37] *** Joins: egy (egy@tilde.team)
[17:09:41] *** Quits: edgy (~egy@105.196.12.132) (Quit: edgy)
[17:16:19] *** Joins: Vukan (~drazen@62.240.24.136)
[17:18:53] *** Quits: Guest91 (~textual@2001:171b:c9bc:ce00:a493:a54c:a105:59bc) (Ping timeout: 244 seconds)
[17:20:50] *** Joins: Guest91 (~textual@2001:171b:c9bc:ce00:46:b903:39d6:18eb)
[17:24:20] *** Quits: Vukan (~drazen@62.240.24.136) (Ping timeout: 272 seconds)
[17:27:22] *** Quits: dmathieu (~textual@laubervilliers-659-1-148-137.w92-154.abo.wanadoo.fr) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[17:31:33] *** Joins: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com)
[17:32:41] *** Joins: paulgrmn (~paulgrmn@user/paulgrmn)
[17:42:06] *** Quits: larkfisherman (~larkfishe@217.75.204.126) (Quit: Leaving)
[17:43:35] <twaapo> whats the diff with these output: err %!s(<nil>) at %!p(<nil>) and err <nil> at 0x0
[17:48:20] *** Joins: mmfood (~mmfood@194.103.157.93)
[17:48:37] *** Joins: Progster (~blah@pool-72-80-87-95.nycmny.fios.verizon.net)
[17:48:43] <mmfood> http://ix.io/3psp
[17:49:28] <mmfood> this this error message makes no sence to me...is the problem incompatible types (it is the same type) or something to do with struct literals?
[17:55:33] *** Joins: austin__ (~ausserz@n219073000163.netvigator.com)
[17:56:52] *** Joins: fputs (~fputs@67.59.83.166)
[17:57:17] *** Joins: dmathieu (~textual@pop.92-184-110-62.mobile.abo.orange.fr)
[17:57:31] *** Joins: theoceaniscool (~theoceani@188.127.173.202)
[17:59:08] *** Quits: austin_ (~ausserz@n219073000163.netvigator.com) (Ping timeout: 264 seconds)
[18:05:28] *** Quits: crowbar (~user@user/crowbar) (Ping timeout: 268 seconds)
[18:06:07] *** Joins: fbandov (~fbandov@80.155.23.139)
[18:08:01] *** Quits: Guest91 (~textual@2001:171b:c9bc:ce00:46:b903:39d6:18eb) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[18:15:28] *** Joins: larkfisherman (~larkfishe@217.75.204.126)
[18:19:35] *** Quits: yoonkn (~user@175.197.208.79) (Read error: Connection reset by peer)
[18:19:49] *** Joins: davidkrauser (~davidkrau@user/davidkrauser)
[18:22:16] *** Joins: crowbar (~user@user/crowbar)
[18:27:09] *** Joins: Guest91 (~textual@2001:171b:c9bc:ce00:30ab:c211:c67a:126e)
[18:29:31] *** Quits: fbandov (~fbandov@80.155.23.139) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[18:31:38] <novns> is there a way to declare a global buffered channel variable?  like  `var Variable chan SomeType`
[18:31:57] <novns> where to put the needed size?
[18:32:06] *** Joins: tedwing (~anon@lfbn-idf3-1-1409-99.w109-221.abo.wanadoo.fr)
[18:32:26] *** Joins: Garb0 (~Garb0@user/garb0)
[18:32:34] <twaapo> func init() is called when module is imported, or close to that
[18:33:24] <novns> twaapo, is  Variable := make(blabla)  became global?
[18:33:37] <novns> if it's in init()
[18:33:54] <twaapo> i would make init()'d vars unexported
[18:34:15] <novns> that's not the answer
[18:34:23] <novns> thanks
[18:34:47] <novns> but how to declare a global channel variable with non-zero size?
[18:35:03] <twaapo> "global" scope is something I dont really think in Go
[18:35:10] <novns> учзщкеув щту
[18:35:13] <twaapo> so cant say globally what you mean to do
[18:35:16] <novns> *exported one
[18:35:27] <novns> available for all functions in a package
[18:35:36] <novns> and outside too
[18:35:52] <twaapo> sounds not idiomatic
[18:36:00] <twaapo> give it a go, and prepare for issues
[18:36:12] <novns> := make()  makes variables in the scope of the block
[18:36:33] <novns> but I need it elsewhere
[18:37:01] <Wessie> init () { Variable = make(bla) } ?
[18:37:16] <twaapo> then you can use Variable if you import this module
[18:37:27] <twaapo> as module.Variable
[18:37:37] <novns> Wessie, thanks, will try
[18:38:51] <novns> Wessie, no, it doesn't work
[18:39:25] <novns> another question
[18:40:21] <novns> if I declare a channel var in a module, and then I do variable = make(chan,,,) somewhere, would it be a waste of memory?
[18:40:42] <novns> like create a channel and then replace it with another
[18:42:43] <twaapo> what i meant by modules was packages
[18:44:03] <twaapo> i cant say is there a more global "global" scope than package wide scope
[18:44:11] <twaapo> perhaps someone else knowns definitely
[18:45:25] *** Quits: dmathieu (~textual@pop.92-184-110-62.mobile.abo.orange.fr) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[18:46:31] *** Joins: dmathieu (~textual@pop.92-184-110-62.mobile.abo.orange.fr)
[18:48:52] *** Quits: jawn-smith (~william@cpe-70-119-160-53.tx.res.rr.com) (Quit: WeeChat 3.0.1)
[18:48:52] *** Joins: vptr (~tadas@user/vptr)
[18:48:55] *** Joins: dyslexicat (~dyslexica@ymir.whatbox.ca)
[18:48:59] *** Joins: fbandov (~fbandov@80.155.23.139)
[18:54:12] *** Joins: icholy (~icholy@68.71.18.45)
[18:54:28] *** Quits: Guest91 (~textual@2001:171b:c9bc:ce00:30ab:c211:c67a:126e) (Ping timeout: 244 seconds)
[18:55:12] <Sam> There is not. Package level is the highest scope. Exported package level stuff is effectively "global" though.
[18:57:47] *** Joins: Guest91 (~textual@2001:171b:c9bc:ce00:a477:dcd:7aa:9872)
[18:58:43] <fizzie> (Isn't there technically a scope called "universe" though? Just not one you could put anything new in.)
[18:59:27] *** Quits: souvik (~souvik@47.11.81.81) (Ping timeout: 252 seconds)
[19:01:08] *** Quits: frost (~frost@59.71.241.190) (Quit: Connection closed)
[19:01:24] *** Joins: souvik (~souvik@103.199.182.212)
[19:06:59] *** Quits: Guest91 (~textual@2001:171b:c9bc:ce00:a477:dcd:7aa:9872) (Ping timeout: 272 seconds)
[19:07:14] *** Joins: acidfoo (~nicolasbo@2605:8d80:5c0:f669:e455:60b2:3077:827)
[19:07:48] *** Joins: Guest91 (~textual@2001:171b:c9bc:ce00:7191:6119:e0b5:3a59)
[19:11:04] *** Joins: src (~src@user/src)
[19:14:06] *** Quits: Guest91 (~textual@2001:171b:c9bc:ce00:7191:6119:e0b5:3a59) (Ping timeout: 244 seconds)
[19:15:44] *** Joins: Guest91 (~textual@2001:171b:c9bc:ce00:8914:d3f0:6603:ee5a)
[19:16:23] *** Quits: dmathieu (~textual@pop.92-184-110-62.mobile.abo.orange.fr) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[19:22:53] *** Quits: Guest91 (~textual@2001:171b:c9bc:ce00:8914:d3f0:6603:ee5a) (Ping timeout: 244 seconds)
[19:23:47] *** Joins: arcatech (~arcatech@user/arcatech)
[19:24:30] *** Joins: Guest91 (~textual@2001:171b:c9bc:ce00:fd8d:7a4f:f6b0:56f6)
[19:25:35] *** Joins: znpy (~znpy@user/znpy)
[19:25:50] *** Joins: dmueller (~dkmueller@2a01:c23:c05b:2f00:473a:aec9:6d44:aa35)
[19:27:55] <znpy> quick question: what's the equivalent to `go doc builtin.<built-in-function>` for keyword range ?
[19:29:31] *** Quits: andlabs (~andlabs@68.237.68.71) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[19:30:07] *** Quits: fbandov (~fbandov@80.155.23.139) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[19:30:20] <icholy> znpy: I don't think there is one
[19:30:53] *** Joins: andlabs (~andlabs@68.237.68.71)
[19:30:59] <znpy> icholy: ah, I see. thanks!
[19:33:21] <Wessie> https://golang.org/ref/spec#RangeClause or something
[19:33:28] <Wessie> spec is your buddy
[19:36:31] *** Quits: SJrXX (~sjr@2604:3d08:d180:1f1b::7ea) (Remote host closed the connection)
[19:36:33] *** Quits: andlabs (~andlabs@68.237.68.71) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[19:37:22] *** Quits: ktanner (~ktanner@50.39.175.242) (Quit: Leaving)
[19:38:30] *** Quits: dmueller (~dkmueller@2a01:c23:c05b:2f00:473a:aec9:6d44:aa35) (Quit: WeeChat 3.1)
[19:38:41] *** Joins: andlabs (~andlabs@68.237.68.71)
[19:42:01] *** Quits: sebito91 (~sborza@45.55.74.66) (Quit: laterz, coffee...)
[19:42:58] *** Joins: sebito91 (~sborza@45.55.74.66)
[19:43:26] *** Joins: pepee (~user@user/pepee)
[19:47:57] *** Joins: dmathieu (~textual@pop.92-184-110-204.mobile.abo.orange.fr)
[19:50:43] *** Quits: Garb0 (~Garb0@user/garb0) (Quit: Garb0)
[19:51:36] *** Joins: Vukan (~drazen@62.240.24.136)
[19:52:22] *** Joins: amahl (~amahl@dsl-jklbng12-54fbca-64.dhcp.inet.fi)
[19:53:56] *** Quits: larkfisherman (~larkfishe@217.75.204.126) (Remote host closed the connection)
[19:55:36] *** Joins: Guest53 (~Guest53@124-148-122-75.dyn.iinet.net.au)
[19:57:05] *** Quits: Guest53 (~Guest53@124-148-122-75.dyn.iinet.net.au) (Client Quit)
[20:03:48] *** Quits: Vukan (~drazen@62.240.24.136) (Ping timeout: 252 seconds)
[20:04:15] *** Joins: Torr (~Torr@170.83.145.98)
[20:09:46] *** Joins: fbandov (~fbandov@80.155.23.139)
[20:11:35] *** Joins: Garb0 (~Garb0@user/garb0)
[20:14:27] *** Joins: fef (~thedawn@user/thedawn)
[20:15:45] *** Joins: sudoforge (~sudoforge@wireguard/tunneler/sudoforge)
[20:17:14] *** Quits: Guest91 (~textual@2001:171b:c9bc:ce00:fd8d:7a4f:f6b0:56f6) (Ping timeout: 272 seconds)
[20:17:44] *** Joins: Guest91 (~textual@2001:171b:c9bc:ce00:8cb3:bc37:e204:a623)
[20:24:20] *** Joins: dmueller (~dkmueller@2a01:c23:c05b:2f00:473a:aec9:6d44:aa35)
[20:31:37] *** Quits: amahl (~amahl@dsl-jklbng12-54fbca-64.dhcp.inet.fi) (Ping timeout: 268 seconds)
[20:33:44] *** Joins: be3uykpy (~be3uykpy@141.226.9.247)
[20:35:41] <Sam> > Hello gophers,
[20:35:41] <Sam> > We have just released go1.17beta1, a beta version of Go 1.17.
[20:35:41] <Sam> > It is cut from the master branch at the revision tagged go1.17beta1.
[20:35:41] <Sam> > Please try your production load tests and unit tests with the new version.
[20:35:41] <Sam> > Your help testing these pre-release versions is invaluable.
[20:35:42] <Sam> > Report any problems using the issue tracker:
[20:35:42] <Sam> > https://golang.org/issue/new
[20:36:20] *** Joins: amahl (~amahl@dsl-jklbng12-54fbca-64.dhcp.inet.fi)
[20:37:54] *** Quits: Progster (~blah@pool-72-80-87-95.nycmny.fios.verizon.net) (Ping timeout: 252 seconds)
[20:38:50] *** Joins: Progster (~blah@pool-72-80-87-95.nycmny.fios.verizon.net)
[20:38:52] *** Quits: fbandov (~fbandov@80.155.23.139) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[20:39:16] *** Quits: dmueller (~dkmueller@2a01:c23:c05b:2f00:473a:aec9:6d44:aa35) (Quit: WeeChat 3.1)
[20:42:15] *** Joins: Skyz (~Skyz@ool-43538427.dyn.optonline.net)
[20:42:51] <Skyz> @b0nn What is this code you sent last night?
[20:42:52] *** Joins: Garb00 (~Garb0@user/garb0)
[20:43:22] <Skyz> proc.go
[20:44:10] *** Quits: fmac_ (~fmac@luna.fmac.xyz) (Quit: ZNC 1.8.2 - https://znc.in)
[20:45:32] *** Joins: fmac (~fmac@luna.fmac.xyz)
[20:45:54] *** Quits: Garb0 (~Garb0@user/garb0) (Ping timeout: 245 seconds)
[20:47:38] *** Quits: amahl (~amahl@dsl-jklbng12-54fbca-64.dhcp.inet.fi) (Ping timeout: 272 seconds)
[20:47:41] *** Quits: Guest91 (~textual@2001:171b:c9bc:ce00:8cb3:bc37:e204:a623) (Ping timeout: 272 seconds)
[20:48:39] *** Joins: amahl (~amahl@dsl-jklbng12-54fbca-64.dhcp.inet.fi)
[20:50:38] *** Joins: Guest91 (~textual@2001:171b:c9bc:ce00:80b5:9a1c:d0ed:b119)
[20:54:51] *** Joins: Skyz78 (~Skyz@ool-43538427.dyn.optonline.net)
[20:56:00] *** Quits: Skyz (~Skyz@ool-43538427.dyn.optonline.net) (Ping timeout: 250 seconds)
[20:56:08] *** Quits: Skyz78 (~Skyz@ool-43538427.dyn.optonline.net) (Client Quit)
[20:56:19] <thinkofher> Sam: where i can read changelog?
[20:56:55] *** Quits: koo6 (~koo6@89-24-13-235.customers.tmcz.cz) (Ping timeout: 244 seconds)
[20:58:12] <icholy> https://tip.golang.org/doc/go1.17
[20:59:56] *** Joins: Skyz (~Skyz@ool-43538427.dyn.optonline.net)
[21:00:38] *** Quits: Skyz (~Skyz@ool-43538427.dyn.optonline.net) (Client Quit)
[21:00:59] *** Joins: Skyz (~Skyz@ool-43538427.dyn.optonline.net)
[21:04:00] *** Joins: acidfu (~nicolasbo@24.114.94.64)
[21:04:09] *** Quits: acidfoo (~nicolasbo@2605:8d80:5c0:f669:e455:60b2:3077:827) (Ping timeout: 244 seconds)
[21:05:51] *** Quits: kaleido (~adam@havokworks.io) (Remote host closed the connection)
[21:07:46] *** Quits: dmathieu (~textual@pop.92-184-110-204.mobile.abo.orange.fr) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[21:08:37] *** Joins: dmathieu (~textual@pop.92-184-110-204.mobile.abo.orange.fr)
[21:10:28] *** Quits: acidfu (~nicolasbo@24.114.94.64) (Ping timeout: 268 seconds)
[21:10:33] *** Quits: dmathieu (~textual@pop.92-184-110-204.mobile.abo.orange.fr) (Client Quit)
[21:10:55] *** Parts: Guest91 (~textual@2001:171b:c9bc:ce00:80b5:9a1c:d0ed:b119) ()
[21:11:37] *** Quits: absc (~absc@dynamic-adsl-94-34-175-4.clienti.tiscali.it) (Quit: Leaving.)
[21:11:39] *** Joins: kaleido (~adam@2604:4300:a:22a:202:c9ff:fec1:9e70)
[21:15:58] *** Quits: Skyz (~Skyz@ool-43538427.dyn.optonline.net) (Quit: Client closed)
[21:17:39] *** Joins: Skyz (~Skyz@ool-43538427.dyn.optonline.net)
[21:21:07] *** Quits: sudoforge (~sudoforge@wireguard/tunneler/sudoforge) (Quit: 404)
[21:22:44] *** Joins: omegatron (~some@p5b056bc7.dip0.t-ipconnect.de)
[21:22:52] *** Quits: Skyz (~Skyz@ool-43538427.dyn.optonline.net) (Ping timeout: 250 seconds)
[21:23:44] *** Quits: morgan (~morgan@c-71-202-228-41.hsd1.ca.comcast.net) (Quit: Changing client)
[21:23:45] *** Joins: SebastianM (~seba@user/sebastianm)
[21:27:05] <omegatron> It seems my general approach as a package maintainer/creator of third-party software for our in-house distribution of "download (, configure), build (, test), destdir-based install and finally deployment"  does not really apply to Go-based software or only to some limited extent ..
[21:27:50] *** Joins: Skyz (~Skyz@ool-43538427.dyn.optonline.net)
[21:27:58] *** Joins: gzj (~GZJ0X@199.193.127.217.16clouds.com)
[21:28:29] <Tv_> omegatron: you can do that but you'll have less of a fight if you just do `go install -o destdir/bin/ example.com/foo@v1.2.3`
[21:29:06] <Tv_> omegatron: that can work with offline, pre-downloaded, input, but getting those in the first place doesn't have great tooling at the moment
[21:29:32] <Tv_> you can copy them out from the cache, if you know how it works, but that's about it
[21:29:58] *** Quits: kaleido (~adam@2604:4300:a:22a:202:c9ff:fec1:9e70) (Quit: peas)
[21:30:45] <omegatron> yeah, I would always download some tarball or zip file, extract it, change to this directory (or even better do some out-of-source-tree build) and then run some command(s) to have the "installed" files in some temporary directory, which I then create a tarball from which is then used for distribution
[21:32:28] <Tv_> omegatron: go will do the extract etc dance for you
[21:33:05] *** Quits: SebastianM (~seba@user/sebastianm) (Ping timeout: 244 seconds)
[21:33:38] <Tv_> omegatron: file layout from https://golang.org/ref/mod#module-proxy and use a file:/// url is all you need for offline builds
[21:33:52] <Tv_> but it's not well written up anywhere that i know of
[21:33:55] *** Quits: jjakob (~quassel@2a01:260:8028:10f0::62) (Ping timeout: 272 seconds)
[21:34:01] <omegatron> as long as I can do it with some "verbose" parameter which produces output I can create a nice log file from it, i'm fine with it =)
[21:34:08] *** Quits: Skyz (~Skyz@ool-43538427.dyn.optonline.net) (Ping timeout: 250 seconds)
[21:34:23] *** Joins: Skyz (~Skyz@ool-43538427.dyn.optonline.net)
[21:34:39] <omegatron> but this already more and better information as I could find on the web until now
[21:34:43] *** Joins: jjakob (~quassel@2a01:260:8028:10f0::62)
[21:34:45] <omegatron> I will give it a try
[21:35:29] <Tv_> omegatron: go env GOMODCACHE   for a hint on where to go digging for the already-downloaded things
[21:35:34] <Skyz> "Give it a go"
[21:36:31] <Skyz> Looking for volunteers
[21:36:58] *** Joins: morgan (~morgan@c-71-202-228-41.hsd1.ca.comcast.net)
[21:37:09] *** Quits: Garb00 (~Garb0@user/garb0) (Ping timeout: 245 seconds)
[21:37:16] <Skyz> How are there so many people working on Go open source
[21:38:06] *** Joins: kaleido (~adam@2604:4300:a:22a:202:c9ff:fec1:9e70)
[21:38:18] *** Joins: jolof (~jolof@user/jolof)
[21:38:35] *** Quits: PedroG1 (~android@45.77.216.181) (Quit: Got you)
[21:38:44] *** Joins: PedroG1 (~android@45.77.216.181)
[21:41:40] *** Joins: bat[m] (~batdice-t@2001:470:69fc:105::19b8)
[21:42:04] <omegatron> until now, afaik, only the modules which are available from the gcc with go frontend installation are/should be on this test system.. surprisingly  go env GOMODCACHE prints an empty line on my system, but I assume it's because I have no further modules installed yet
[21:42:51] <Tv_> omegatron: that sounds more like a way old version of go
[21:43:04] <Tv_> also "gcc with go frontend" sounds... weird
[21:43:20] <Tv_> are you using gccgo? you probably don't want to be.
[21:43:25] *** Quits: novns (~novns@user/novns) (Quit: ZNC 1.8.2 - https://znc.in)
[21:43:39] <omegatron> yes, it's the gcc go frontend (10.2.0)
[21:43:49] <Tv_> why?
[21:44:01] <omegatron> I already read somewhere, that some other implementation would be better ..
[21:44:10] <omegatron> it's just because no other is installed yet
[21:44:29] <omegatron> I could do that first .. well now, of course
[21:44:42] *** Joins: novns (~novns@user/novns)
[21:44:57] *** Quits: amahl (~amahl@dsl-jklbng12-54fbca-64.dhcp.inet.fi) (Read error: Connection reset by peer)
[21:46:13] <omegatron> I believe the rationale was, because Go requires Go (just like rust and the glasgow haskell compiler require itself) or similar ...  and this project doesn't allow building from binaries, only from sources
[21:46:46] *** Joins: amahl (~amahl@dsl-jklbng12-54fbca-64.dhcp.inet.fi)
[21:47:56] <omegatron> and gcc has the go frontend, therefore, install gccgo first and then use that to build golang
[21:48:06] <Tv_> omegatron: that's a reason to bootstrap a compiler, not a reason to keep using the bootstrap toolchain forever
[21:48:12] <Skyz> I'm switching back over to linux today could you run Go as a binary in Linux?
[21:48:59] <ikke> What od you mean, run go as a binary>
[21:49:07] <alb> Skyz: yes, Go runs on linux
[21:49:11] <Skyz> Linux is Odd everything is a package
[21:49:19] <Tv_> omegatron: go1.4 is the last written-in-C version of the primary go compiler toolkit, and can be used to bootstrap newer versions
[21:49:51] <omegatron> ah yes, this whole project is one large bootstrapping process.. I never planned to use gccgo if golang is better
[21:49:59] <ikke> Skyz: nothing prevents you from downloading random binaries from the internet and execute them :P
[21:50:30] <omegatron> if trying to bootstrap golang with gccgo is a bad idea, I would actually do it with go-1.4
[21:50:37] <Skyz> Scene.org is the only binaries I'll trust on windows
[21:56:02] *** Quits: PedroG1 (~android@45.77.216.181) (Ping timeout: 272 seconds)
[21:57:51] *** Joins: PedroG1 (~android@45.77.216.181)
[21:58:42] *** Quits: Xjs (~jannis@user/xjs) (Quit: Good night.)
[22:00:00] *** Joins: acidfu (~nicolasbo@2605:8d80:5e0:f140:2cab:f128:5b00:a5f6)
[22:06:35] *** Joins: faceonkeyboard (~faceonkey@anquietas.harting.hosting)
[22:10:20] *** Joins: anonfunc[m] (~idleganda@anquietas.harting.hosting)
[22:10:21] <anonfunc[m]> Hi. I start some external processes in goroutines and do have signal handling, but somehow these external processes receive the same signal my process receives. Is there a way to prevent that?
[22:11:02] *** Quits: Skyz (~Skyz@ool-43538427.dyn.optonline.net) (Quit: Client closed)
[22:11:27] *** Joins: dyslexic1t (~dyslexica@ymir.whatbox.ca)
[22:11:53] *** Joins: Garb0 (~Garb0@user/garb0)
[22:12:05] <icholy> anonfunc[m]: you need to release the process
[22:13:41] *** Joins: Skyz (~Skyz@ool-43538427.dyn.optonline.net)
[22:13:46] *** Quits: dyslexicat (~dyslexica@ymir.whatbox.ca) (Ping timeout: 272 seconds)
[22:14:03] *** Quits: jcajka (~jcajka@2001:1ae9:1052:8400:f9b4:e1a9:7b3a:4b77) (Quit: Leaving)
[22:14:36] *** Quits: Kane (~Kane@2a01:e34:ee89:5d90:5c84:9291:82ff:4148) (Ping timeout: 268 seconds)
[22:14:39] *** Joins: sudoforge (~sudoforge@wireguard/tunneler/sudoforge)
[22:14:53] <anonfunc[m]> icholy: how would I go about that? Docs on exec don't mention anything of sorts.
[22:15:24] <icholy> anonfunc[m]: I'm assuming you want the child processes to keep running after the parent gets a sigterm right?
[22:15:48] <anonfunc[m]> indeed, and I still want to wait for child exit in the subroutine.
[22:16:13] *** Joins: nattiestnate (~nate@36.70.194.182)
[22:18:17] <icholy> anonfunc[m]: maybe https://golang.org/pkg/syscall/#SysProcAttr Pdeathsig
[22:20:45] <anonfunc[m]> icholy: I can try that, thanks. Although the parent is not dead (yet) per se. Does that matter?
[22:21:14] *** Parts: fef (~thedawn@user/thedawn) (Leaving)
[22:29:01] *** Joins: Guest9 (~textual@c-73-51-174-246.hsd1.il.comcast.net)
[22:29:37] <Tv_> anonfunc[m]: are you perhaps talking about signals triggered by a terminal, because target more than one process
[22:29:58] <Tv_> anonfunc[m]: platform, which signal, sent by what, etc...
[22:31:11] *** Joins: BenLubar (~ben@cpe-65-28-175-139.wi.res.rr.com)
[22:31:16] <anonfunc[m]> Tv_: I'm on linux, want to handle SIGINT and SIGTERM, and currently testing ctrl+c in terminal
[22:32:17] <foobaz> imo it's also important to handle SIGPIPE for when you do e.g. "myprogram | less" and then quit less
[22:32:20] <icholy> Tv_: so the terminal enumerates the whole process tree and sends SIGTERM to all of them?
[22:32:24] <BenLubar> is the html/template package 5 megabytes on its own? my executable seems to have gone from 16MB to 21MB in the revision where I added something that uses html/template.
[22:33:01] <Tv_> icholy: not in the terminal, but otherwise yes. e.g. SIGHUP behaves like that
[22:33:05] <Tv_> https://www.linusakesson.net/programming/tty/
[22:33:43] <anonfunc[m]> foobaz: good point
[22:35:14] <Tv_> foobaz: i mean, SIGPIPE is often perfectly fine to just let happen
[22:35:18] *** Joins: Kane (~Kane@2a01:e34:ee89:5d90:91eb:49c0:e1ba:dea9)
[22:35:32] <Tv_> also, https://golang.org/pkg/os/signal/#hdr-SIGPIPE
[22:35:44] <Tv_> Go runtime does SIGPIPE things for you anyway
[22:35:57] *** Quits: Skyz (~Skyz@ool-43538427.dyn.optonline.net) (Quit: Client closed)
[22:36:14] *** Joins: unmanbearpig (~unmanbear@45.76.95.141)
[22:36:20] <foobaz> ah ok, i am probably thinking of python instead of go
[22:36:56] <foobaz> where SIGPIPE triggers a big ugly backtrace
[22:37:54] <anonfunc[m]> so, signal.Notify does not prevent signals reaching child processes or is just something else sigint'ing my childs?
[22:38:57] <Tv_> anonfunc[m]: you haven't given us much information to work on
[22:39:05] <icholy> Tv_: I created a process which starts a child process. I did `kill -HUP <parent pid>` and the child didn't get it.
[22:39:23] <Tv_> icholy: because you sent the signal to a pid
[22:39:42] <icholy> Tv_: what's the alternative?
[22:39:49] <Tv_> icholy: process groups
[22:40:06] *** Joins: Crassus (~Crassus@user/crassus)
[22:40:09] *** Parts: BenLubar (~ben@cpe-65-28-175-139.wi.res.rr.com) ()
[22:41:00] <anonfunc[m]> Tv_: what would be of interest?
[22:41:03] *** Joins: Skyz (~Skyz@ool-43538427.dyn.optonline.net)
[22:41:27] *** Joins: fbandov (~fbandov@80.155.23.139)
[22:41:35] <Skyz> Should make a log for this channel
[22:41:36] <Tv_> anonfunc[m]: well, a runnable minimal reproducing example would take least effort from us
[22:42:31] <anonfunc[m]> Tv_: ok, give me a sec
[22:42:43] *** Quits: Skyz (~Skyz@ool-43538427.dyn.optonline.net) (Client Quit)
[22:43:44] *** Joins: Skyz (~Skyz@ool-43538427.dyn.optonline.net)
[22:45:56] *** Quits: Torr (~Torr@170.83.145.98) (Ping timeout: 244 seconds)
[22:46:36] *** Quits: Skyz (~Skyz@ool-43538427.dyn.optonline.net) (Client Quit)
[22:47:06] *** Quits: gzj (~GZJ0X@199.193.127.217.16clouds.com) (Remote host closed the connection)
[22:47:18] *** Quits: fbandov (~fbandov@80.155.23.139) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[22:47:25] *** Joins: gzj (~GZJ0X@199.193.127.217.16clouds.com)
[22:50:40] *** Joins: dkmueller (~dkmueller@2a01:c23:c05b:2f00:473a:aec9:6d44:aa35)
[22:51:37] *** Joins: souvik_ (~souvik@103.199.182.212)
[22:53:05] *** Quits: gzj (~GZJ0X@199.193.127.217.16clouds.com) (Remote host closed the connection)
[22:53:23] *** Joins: gzj (~GZJ0X@199.193.127.217.16clouds.com)
[22:53:32] *** Joins: dmathieu (~textual@pop.92-184-110-204.mobile.abo.orange.fr)
[22:54:20] *** Quits: souvik (~souvik@103.199.182.212) (Ping timeout: 264 seconds)
[22:57:26] *** Quits: nattiestnate (~nate@36.70.194.182) (Quit: WeeChat 3.1)
[22:57:46] *** Joins: nattiestnate (~nate@36.70.194.182)
[22:59:24] <icholy> Tv_: will all processes controlled by a TTY always belong to the same process group?
[23:00:03] *** Joins: sono (~sono@107-209-210-210.lightspeed.sntcca.sbcglobal.net)
[23:00:22] <anonfunc[m]> example: https://gist.github.com/AnonFuncsAreAwesome/ba38870777a5d6bb7c418df760f2d9d6
[23:00:26] *** Joins: fbandov (~fbandov@80.155.23.139)
[23:00:47] *** Quits: nattiestnate (~nate@36.70.194.182) (Client Quit)
[23:00:52] <Tv_> icholy: you can start a new process group
[23:01:04] <Tv_> icholy: setpgid
[23:01:09] <anonfunc[m]> my assumption was that even when pressing ctrl+c I would have to wait for sleep to finish
[23:01:33] <anonfunc[m]> or read as: the goroutine to finish
[23:01:59] *** Joins: Torr (~Torr@170.83.146.97)
[23:02:27] *** Joins: nattiestnate (~nate@36.70.194.182)
[23:02:31] *** Quits: nattiestnate (~nate@36.70.194.182) (Client Quit)
[23:02:33] *** Quits: dmathieu (~textual@pop.92-184-110-204.mobile.abo.orange.fr) (Ping timeout: 252 seconds)
[23:02:57] *** Joins: nattiestnate (~nate@36.70.194.182)
[23:03:22] *** Quits: dkmueller (~dkmueller@2a01:c23:c05b:2f00:473a:aec9:6d44:aa35) (Quit: WeeChat 3.1)
[23:03:46] *** Joins: dkmueller (~dkmueller@2a01:c23:c05b:2f00:473a:aec9:6d44:aa35)
[23:04:04] <icholy> anonfunc[m]: the process exists when main() returns, it doesn't wait for all goroutines to finish
[23:04:13] <icholy> anonfunc[m]: https://play.golang.org/p/H2Q6Mu8kq1Y
[23:04:24] <icholy> that program exists immediately
[23:04:27] *** Joins: dmathieu (~textual@pop.92-184-110-204.mobile.abo.orange.fr)
[23:04:30] <Tv_> anonfunc[m]: yeah you're confused by ttys
[23:04:32] <icholy> exits*
[23:04:36] *** Quits: dkmueller (~dkmueller@2a01:c23:c05b:2f00:473a:aec9:6d44:aa35) (Client Quit)
[23:04:53] <anonfunc[m]> but that why the WaitGroup is there, is it not?
[23:04:56] *** Joins: dkmueller (~dkmueller@2a01:c23:c05b:2f00:473a:aec9:6d44:aa35)
[23:04:57] <Tv_> icholy: not over here
[23:04:58] *** Quits: amahl (~amahl@dsl-jklbng12-54fbca-64.dhcp.inet.fi) (Remote host closed the connection)
[23:05:20] <Tv_> anonfunc[m]: the parent process behaves exactly as you programmed it, ignores SIGINT, waits for child to exit, logs `res`
[23:05:21] <icholy> anonfunc[m]: Tv_: missed the wait group
[23:05:28] *** Joins: amahl (~amahl@dsl-jklbng12-54fbca-64.dhcp.inet.fi)
[23:05:42] <Tv_> you can even see `res` be printed after you hit control-c
[23:06:14] <Tv_> and then it log.Fatals the error with which the child process died, in that case
[23:06:28] *** Quits: nattiestnate (~nate@36.70.194.182) (Client Quit)
[23:06:37] <anonfunc[m]> Tv_: but why does it die?
[23:06:45] <Tv_> anonfunc[m]: https://www.linusakesson.net/programming/tty/
[23:06:49] <anonfunc[m]> sigint should not go to sleep, should it?
[23:06:49] *** Joins: nattiestnate (~nate@36.70.194.182)
[23:06:54] <Tv_> it's still in the foreground job
[23:07:27] <anonfunc[m]> so I have to get it in background to have it not exiting?
[23:07:55] <Tv_> if you don't want it to receive signals from the terminal
[23:08:20] <Tv_> https://golang.org/pkg/os/exec/#Cmd   https://golang.org/pkg/syscall/#SysProcAttr  and the above link which in this time that has passed i'm 100% sure you haven't read
[23:10:16] *** Joins: andreisamoila (~andreisam@86.122.206.76)
[23:12:41] <anonfunc[m]> Tv_: well that quite a read. Thanks for you help, I *think* I know what to try next.
[23:12:49] <anonfunc[m]> s/that/thats
[23:14:01] <icholy> I'm not 100% through that post, but it seems like setting SysProcAttr.Setpgid = true is the answer
[23:15:12] *** Quits: Garb0 (~Garb0@user/garb0) (Ping timeout: 252 seconds)
[23:16:00] <icholy> maybe Noctty too ?
[23:17:11] *** Joins: Skyz (~Skyz@ool-43538427.dyn.optonline.net)
[23:18:10] *** Joins: Vukan (~drazen@62.240.24.136)
[23:18:55] <icholy> if it's created in a separate process group, does that become a new job in the session or is it completely disconnected?
[23:19:53] <Tv_> icholy: i don't think the session leader magically becomes aware of it
[23:20:13] <Tv_> but it's still in the session, as far as that goes (SIGHUP)
[23:20:34] <Tv_> ain't it lovely to go spelunking in about 50 years of accumulated legacy
[23:25:39] *** Quits: dmathieu (~textual@pop.92-184-110-204.mobile.abo.orange.fr) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[23:26:13] *** Joins: dmathieu (~textual@pop.92-184-110-204.mobile.abo.orange.fr)
[23:26:16] *** Quits: fbandov (~fbandov@80.155.23.139) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[23:26:35] <Skyz> Switching to linux today
[23:26:38] *** Quits: dkmueller (~dkmueller@2a01:c23:c05b:2f00:473a:aec9:6d44:aa35) (Quit: WeeChat 3.1)
[23:27:51] *** Quits: dyslexic1t (~dyslexica@ymir.whatbox.ca) (Ping timeout: 252 seconds)
[23:28:03] <src> I just installed something via $ go install github.com/XYZ ; the binary ended up in ~/go/bin/ ; the usual thing to do would be to symlink that binary now to /usr/local/bin I assume?
[23:29:03] *** Quits: davidkrauser (~davidkrau@user/davidkrauser) (Quit: Leaving)
[23:29:16] *** Joins: dyslexicat (~dyslexica@ymir.whatbox.ca)
[23:30:18] <icholy> Tv_: changing the group id prevents the child from getting the signal. However, after I close the terminal, the process keeps going. What is it writing to if the pts is gone?
[23:30:26] *** Quits: andreisamoila (~andreisam@86.122.206.76) (Quit: Leaving...)
[23:30:38] <icholy> ps shows the pts as '?'
[23:31:42] *** Quits: Vukan (~drazen@62.240.24.136) (Ping timeout: 252 seconds)
[23:31:50] <icholy> oh wait, I'm not checking for errors from the fmt.Printf call
[23:32:00] *** Joins: DeltaNova (~DeltaNova@user/deltanova)
[23:33:17] *** Joins: dr0n (~nabromov@94.11.23.235)
[23:33:39] <jjhoo> maybe sigpipe
[23:34:16] <anonfunc[m]> I got it working, thank you very much Tv_  icholy . Key was using Foreground: False, Setsid: True
[23:34:23] <icholy> jjhoo: the writes to stdout were failing after the pts dissapeared. I just wasn't checking the error
[23:35:00] *** Quits: dmathieu (~textual@pop.92-184-110-204.mobile.abo.orange.fr) (Ping timeout: 252 seconds)
[23:38:20] *** Quits: fputs (~fputs@67.59.83.166) (Remote host closed the connection)
[23:40:19] *** Joins: fputs (~fputs@67.59.83.166)
[23:41:11] <Tv_> icholy: sounds like you detached it from the session, see notes on SIGHUP on that page
[23:42:20] <Tv_> icholy: SIGHUP triggers asap, no need to wait for next write & check error
[23:44:19] *** Quits: Skyz (~Skyz@ool-43538427.dyn.optonline.net) (Quit: Client closed)
[23:44:31] <icholy> Tv_: my understanding is that a session is just a list of process group ids (jobs). If I start a process with a new process group (via Setpgid), the session won't have any way to reference it.
[23:45:23] <Tv_> icholy: setsid(2)
[23:46:54] <Tv_> icholy: which, interestingly, says "foreground process group", but that doesn't jive with my understanding of shells... "sleep 99999999999999 & exit" vs "sleep 99999 & disown; exit"
[23:47:09] *** Quits: austin__ (~ausserz@n219073000163.netvigator.com) (Ping timeout: 245 seconds)
[23:48:34] *** Quits: Torr (~Torr@170.83.146.97) (Quit: leaving)
[23:49:29] <icholy> ah ok, I thought that a session was only present when a tty was involved.
[23:49:54] <Tv_> well that's because tty's going away tend to kill anything in that session ;)
[23:50:58] *** Quits: nattiestnate (~nate@36.70.194.182) (Quit: WeeChat 3.1)
[23:52:23] *** Quits: habys (~habys@2603:3001:bd9:f1:1337:f1ac:d00d:17c) (Quit: byye)
[23:52:41] *** Joins: habys (~habys@2603:3001:bd9:f1:1337:f1ac:d00d:17c)
