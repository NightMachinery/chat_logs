[00:00:37] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[00:00:46] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Client Quit)
[00:02:10] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[00:11:20] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:bcc0:c482:6957:eca1)
[00:14:36] *** Joins: RabidToaster (~Thunderbi@bras-base-otwaon234vw-grc-15-50-100-215-56.dsl.bell.ca)
[00:16:09] *** Joins: badone (~badone@209.132.189.152)
[00:18:59] <johnny> i've only recently heard of mold, but i haven't looked into it because it wouldn't really benefit anything i'm doing
[00:19:56] <rpav> yeah if you're not dealing with long link times or giant memory-sucking builds it's not a priority
[00:20:15] <rpav> and lld is pretty good
[00:20:16] <johnny> the memory sucking mostly happens at compile :)
[00:21:04] <johnny> i'm tryin to remember if i ever bothered with gold when building some apps back i the day
[00:21:16] <johnny> then again, i don't remember how long gold has been around
[00:21:45] <johnny> reminds me of my first experience with cmake.  was messin with facebook's hhvm (when it was still tryin to be php7 compatible)
[00:22:06] <johnny> i actually fixed a few tiny bugs without knowing cmake or C++ at all
[00:22:18] *** Quits: meator (~meator@user/meator) (Quit: Leaving)
[00:22:57] <johnny> i didn't get to the ocaml parts
[00:29:47] *** Joins: hesse (~TheHerman@gateway/tor-sasl/thehermann)
[00:30:28] *** Quits: TheHermann (~TheHerman@gateway/tor-sasl/thehermann) (Remote host closed the connection)
[00:33:29] *** Joins: wootehfoot (~wootehfoo@user/wootehfoot)
[00:34:17] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Ping timeout: 240 seconds)
[00:37:56] *** Quits: Simplar (~Simplar@188.163.93.76) (Quit: Going offline, see ya! (www.adiirc.com))
[00:40:09] *** Joins: varioust (~varioust@cpe-108-167-2-254.neb.res.rr.com)
[00:48:23] *** Joins: PJBoy (~PJBoy@host31-48-117-179.range31-48.btcentralplus.com)
[00:48:23] *** Quits: PJBoy (~PJBoy@host31-48-117-179.range31-48.btcentralplus.com) (Changing host)
[00:48:23] *** Joins: PJBoy (~PJBoy@user/pjboy)
[00:49:07] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[00:49:19] <PJBoy> MSVC modules are fine
[00:49:36] <PJBoy> I got my main C++ project working with them
[00:51:35] *** Joins: Tokamak (~Tokamak@172.58.188.12)
[00:53:31] <rpav> hmm .. longest working program (e.g. main function body) that looks multi-line but has 1 semicolon
[00:53:53] <rpav> or has the fewest semicolons, i suppose (and any #define SEMI ; doesn't count)
[01:05:34] *** Joins: CaCode (~CaCode@user/cacode)
[01:06:11] <johnny> PJBoy, did you manually wire them up in cmake or ?
[01:06:38] <johnny> oh wait, that's right, cmake has some support for msvc only
[01:08:49] <LordKalma> for Visual Studio, rather
[01:08:52] <LordKalma> it's the generator that matters
[01:09:40] *** Quits: john99 (~john99@158.246.103.34.bc.googleusercontent.com) (Quit: Client closed)
[01:10:55] *** Quits: sysctl (~user@88.215.77.255) (Remote host closed the connection)
[01:18:55] <johnny> in gcc you still have to pass some compile arguments
[01:19:10] <johnny> for example*
[01:19:27] <johnny> like -fmodules whatever it is.. i haven't looked into yet.
[01:24:49] *** Quits: magla (~gelignite@55d4a813.access.ecotel.net) (Quit: Stay safe!)
[01:25:20] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:959e:f772:789b:bf56)
[01:27:02] *** Quits: robod34 (Username@79.113.195.239) (Quit: Goe offline! ( http://marius.sucan.ro/ ))
[01:27:23] <PJBoy> yeah nah, I let visual studio manage my build system
[01:28:29] <johnny> i've never not developed software that doesn't work on linux, so i never think about that path
[01:29:06] <PJBoy> I've only opened my eyes to cmake recently
[01:29:22] <johnny> close them!
[01:29:23] <PJBoy> so things could potentially change for that one
[01:29:41] <johnny> cmake is such a C++ buildsystem tho
[01:29:50] <johnny> it fits in with the way everything else in C++ is done
[01:29:59] <PJBoy> does CMake have UB?
[01:30:28] <PJBoy> because you have to have UB to be in the same conversation as C++
[01:31:07] <johnny> cmake requires you to do alot for very little, just like C++. it could smooth rough edges but doesn't. it keeps bad behaviour for BC
[01:31:44] <kalven> compared to what?
[01:32:02] <johnny> meson is one example
[01:32:29] <johnny> i don't know enough about xmake or build2 to speak on those though
[01:32:43] <johnny> autoconf is also the perfect system for C as well :)
[01:33:08] <PJBoy> meson is on the list for me
[01:33:24] <PJBoy> but I do wanna get to grips with cmake properly
[01:33:33] <johnny> i am being a bit harsher on cmake that necessary though. at least it does do well with setting the standard, and standard feature detection
[01:33:51] <johnny> i think the feature detection approach is pretty neat
[01:33:56] <johnny> i don't know if it actually works tho
[01:34:49] <johnny> lots of people seem to like the underlying build system (or meta build system) machinery, but just dislike what's on top of it
[01:35:52] <johnny> i was definitely surprised to see so much cmake integration in visual studio proper. i've never used vs myself, so i don't know how well it works, but seems neat
[01:37:07] <johnny> PJBoy, what do you think you need to get to grips with cmake? most it is is pretty self explanatory if you already know about build systems
[01:37:23] <PJBoy> I don't know about build systems
[01:37:32] <PJBoy> everything in cmake is an adventure
[01:37:53] <johnny> so you've never written a makefile even?
[01:38:09] <johnny> you do know how they work though right? and what they do?
[01:38:09] <PJBoy> I always write super simple makefiles
[01:38:35] *** Joins: sh00p (~sh00p@2001:9b1:41e9:e800:dfc6:b074:1f6f:9b73)
[01:38:36] <johnny> seems a lot easier to grasp if you start with the unix side rather than the windows side, but maybe that's just me
[01:38:49] <PJBoy> well I know that you compile source files into objects, and link up those objects and any dependent libraries
[01:39:18] <PJBoy> I think all the complexity of things like cmake come from having to specify those dependencies
[01:39:33] <sh00p> I'm x-posting this and hope none of you take offense... freenode seems dead, and quakenet told me to go here.
[01:39:36] <PJBoy> and all the different ways that you can do it, and the different ways that are required
[01:39:43] <johnny> but how much do you know about handling dependencies. both on system features and external programs
[01:39:45] <sh00p> Playing around with static singletons
[01:39:51] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[01:39:55] <johnny> err external libraries*
[01:39:58] <sh00p> https://wandbox.org/permlink/RiqRu6VYYc4ngGSd
[01:39:59] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[01:39:59] *** ChanServ sets mode: +v npaperbot
[01:40:17] <sh00p> The rationale is that I have objects with no default ctors, and I dont like putting them on heap
[01:40:21] *** Quits: varioust (~varioust@cpe-108-167-2-254.neb.res.rr.com) (Ping timeout: 245 seconds)
[01:40:30] <johnny> like say you need library A compiled with feature A?
[01:40:34] <sh00p> they live for eternity, and there's only one of each type
[01:41:01] <sh00p> I dont understand why there's nothing like this in boost or similar, or is what I'm doing stupid and dumb for some reason I don't understand?
[01:41:01] *** Quits: Tokamak (~Tokamak@172.58.188.12) (Read error: Connection reset by peer)
[01:41:36] *** Joins: Tokamak (~Tokamak@172.58.188.12)
[01:41:45] <PJBoy> I think that questions is where I'm lost
[01:42:20] <PJBoy> I've never concerned myself with linking to a [system library or local library]
[01:42:51] <johnny> so it's always static linking? you've never had to worry if your program runs on say windows 7 vs windows 10?
[01:42:57] <PJBoy> indeed
[01:43:17] <johnny> but that's the fun smart (snort)
[01:43:21] <johnny> part*
[01:43:27] <PJBoy> very much doing the bare minimum in the build system area
[01:43:43] <PJBoy> which is the draw to visual studio of course
[01:43:45] <johnny> well all themodern build systems handle it well enough
[01:44:10] <johnny> hmm, but even on visual studio you still might wan to make your programs work on windows 7
[01:44:19] <johnny> maybe less so now, but that's pretty recent
[01:44:46] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:d0f9:15ce:3995:401b) (Ping timeout: 260 seconds)
[01:45:00] <johnny> sh00p, you didn't actually ask a question really that i could tell
[01:45:09] <johnny> i mean generally i avoid singletons
[01:45:11] <PJBoy> nah no one runs windows 7 that I would give software to
[01:45:24] <johnny> well.. how about now.. windows 11 vs windows 10
[01:45:54] <sh00p> johnny, hmm.. I was hoping for some feedback I guess, questioning my sanity a little
[01:46:05] <johnny> about what? using a singleton?
[01:46:05] <PJBoy> I will deprive windows 10 users of my software when I upgrade to windows 11 too
[01:46:10] <johnny> harsh
[01:46:33] <sh00p> johnny, allocating it like I'm doing... I usually avoid them also, but for this use case they kinda make sense
[01:46:34] <PJBoy> I mean I'm learning cmake now, so this is a changeable future
[01:46:36] <johnny> man.. i don't know much about C++.. but i do feel like i have a grasp of the dependency side (minus the windows specifics)
[01:47:11] <PJBoy> I will say though
[01:47:18] <PJBoy> I tried to build python3.6 yesterday
[01:47:25] <sh00p> A semi-large application that gets configured with certain behaviours that instantiates one or more objects of different types
[01:47:25] <PJBoy> and make segfaulted
[01:47:46] <johnny> wlol
[01:47:56] <sh00p> and after that they live forever, I dont want to put them on heap cause I dont like it and it's kinda not allowed in MISRA either
[01:47:57] <johnny> why would you build python 3.6 tho.. that's pretty old
[01:47:58] <PJBoy> I definitely get the feeling that no one really knows how to build code
[01:48:11] <PJBoy> because 3.7 made async a keyword, and that breaks this old code
[01:48:25] <johnny> you're just asking for security issues there
[01:48:30] <PJBoy> and some other breaking changes that I didn't care to look into
[01:48:48] <PJBoy> that's ok, there's no attack vector
[01:48:57] <kalven> PJBoy: I'd say you're in an ideal position to write another build system
[01:49:04] <LordKalma> NO
[01:49:09] <PJBoy> I think the world needs another build system
[01:49:13] <johnny> oh.. why were you building it vs just using it?
[01:49:14] <LordKalma> PJBoy is in the ideal position to learn to LOVEEE cmake
[01:49:23] <johnny> lol
[01:49:31] * LordKalma inserts XKCD 15 standards meme
[01:49:45] <PJBoy> because I acquired an ubuntu 21.10 server
[01:49:52] <PJBoy> and its apt repo doesn't have python 3.6
[01:50:06] <LordKalma> python isn't on CCI?
[01:50:06] <johnny> oh, it segfaulted when building it on linux???
[01:50:07] <PJBoy> and that alt repo for python builds doesn't support ubuntu 21.x
[01:50:22] <LordKalma> would be funny to package python with something that requires python
[01:50:25] <johnny> i assumed windows becaus that's what were talking about.. so a make segfault didn't surprise me
[01:50:30] <PJBoy> yeah this was on linux hahaha
[01:50:32] <kalven> nah.. he just needs to pick his favorite problem and then make an hq9+-style build system that shows how neatly his build system solves things
[01:50:38] <johnny> a make segfault on linux does surprise me
[01:50:47] <PJBoy> yeah I was mind blown
[01:50:54] <LordKalma> PJBoy, btw, what you need is conda
[01:50:55] <PJBoy> it happened consistently at the same place though
[01:50:57] <LordKalma> you can get any python you want
[01:51:05] <johnny> or just use pyenv
[01:51:08] <LordKalma> or that
[01:51:12] <hnOsmium0001[m]> LordKalma: actually there is a cpython package now (with 0 download apparently)
[01:51:12] <johnny> pyenv is easier
[01:51:13] * PJBoy googles these things
[01:51:21] <LordKalma> or any of the 15 "standards"
[01:51:24] <LordKalma> yes it is
[01:51:33] <LordKalma> I like conda because I do numerics and shit
[01:51:37] <johnny> if you want a bit more than *just* python, then conda is probably a good choice
[01:51:38] <LordKalma> but yeah
[01:51:41] <johnny> oh.. and then there's also containers
[01:51:41] <hnOsmium0001[m]> and it's actually building from source instead of just grabbing the tarball? nice
[01:51:59] <PJBoy> I will of course only do hello world level examples for my build system
[01:52:01] <johnny> LordKalma, well conda and pyenv solve different problems. conda is it's own whole thing
[01:52:07] <LordKalma> indeed
[01:52:11] <LordKalma> conda also supports R iirc
[01:52:12] <johnny> pyenv is JUST python and nothing else
[01:52:20] <johnny> can't conda also get a compiler?
[01:52:27] *** Joins: skapata (~Skapata@2804:14c:87b0:a6f9:f197:203e:92f7:a4c2)
[01:52:27] *** Quits: skapata (~Skapata@2804:14c:87b0:a6f9:f197:203e:92f7:a4c2) (Changing host)
[01:52:27] *** Joins: skapata (~Skapata@user/skapata)
[01:52:34] <LordKalma> there was mingw or wahtever, but that conda repo is old af
[01:52:51] *** Quits: CaCode (~CaCode@user/cacode) (Remote host closed the connection)
[01:53:06] <johnny> PJBoy, i may suck at C++, but i know a lot about linux stuff
[01:53:35] <LordKalma> for me it's conda and
[01:53:35] <LordKalma> conda config --set pip_interop_enabled True
[01:53:35] <LordKalma> conda config --add channels conda-forge
[01:53:35] <LordKalma> conda config --set channel_priority false
[01:53:38] <LordKalma> and BAM
[01:53:44] <LordKalma> bleeding edge packages :p
[01:53:55] <johnny> i stick with pyenv and pdm
[01:54:09] <LordKalma> PJBoy, basically these are things that manage and install a python environment and you "activate it" with a cmd command
[01:54:10] <johnny> i find virtualenvs offensive from conceptual level
[01:54:23] <LordKalma> and env variables are set so that it's *that* python that you're using
[01:54:26] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:bc5b:dbe0:79e5:a909)
[01:54:35] <johnny> i let direnv handle that too
[01:54:41] <johnny> direnv is such a good program
[01:54:56] <LordKalma> conda has another advantage for me
[01:55:02] <PJBoy> alright they seemed cool
[01:55:18] <LordKalma> when I have someone that's less tech literate than me that needs a python datascience/engineering environment
[01:55:25] <LordKalma> I can tell them to install *Anaconda*
[01:55:27] <LordKalma> and BAM
[01:55:33] <LordKalma> giga and a half of python
[01:56:14] <johnny> yeah.. conda is certainly good in those situations
[01:56:16] <hnOsmium0001[m]> I can't tell if that's a positive or negative review of conda
[01:56:23] <johnny> positive
[01:56:52] <johnny> here you go.. now you can atually do the thing you want to and without a lot of nonsense!
[01:57:00] <LordKalma> It's a life saver
[01:57:05] <LordKalma> You're uma class full of students barely capable of using power point
[01:57:13] <johnny> uma?
[01:57:20] <LordKalma> And you need them to use python AND the engineering packages
[01:57:32] <johnny> hey.. i'm not capable of using power point at all!
[01:57:32] <LordKalma> s/uma/on
[01:57:43] <johnny> i have no idea how to use powerpoint.. not even a little
[01:57:49] <LordKalma> So you tell them to download anaconda and everybody is set
[01:57:57] <LordKalma> It's called a metaphor hahah
[01:57:57] <PJBoy> powerpoint is an art
[01:58:28] *** Quits: wootehfoot (~wootehfoo@user/wootehfoot) (Read error: Connection reset by peer)
[01:58:31] <LordKalma> Not the point! Urg haha
[01:58:37] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:bc5b:dbe0:79e5:a909) (Ping timeout: 240 seconds)
[01:58:56] <johnny> LordKalma, it's just that i kinda feel bad about it.. but not bad enough to actually learn it :)
[01:59:12] <LordKalma> PJBoy: i can't believe you never hearded or used python environments
[01:59:17] <LordKalma> It's like the shit
[01:59:32] <johnny> i'm not sure how much python PJBoy even does
[01:59:32] <LordKalma> 50 different pythons with diffent configurations, versions, packages
[01:59:33] *** Joins: markong (~kvirc@213.146.188.203)
[01:59:33] *** Quits: hesse (~TheHerman@gateway/tor-sasl/thehermann) (Ping timeout: 276 seconds)
[01:59:36] <PJBoy> I was gonna say that they seem massively excessive
[01:59:51] <LordKalma> Conda is another lever, forget Conda
[01:59:58] <PJBoy> but then realised I had to trash my ubuntu VM and go down to 20.04 so that I could install python from that deadeyes repo
[02:00:10] <LordKalma> But one of the same ones, like pipenv are a must
[02:00:22] <LordKalma> Sane *
[02:00:27] <PJBoy> I've been told about venvs before
[02:00:32] <PJBoy> and like
[02:00:40] <PJBoy> I just can't bring myself to care about any of that stuff
[02:00:43] <LordKalma> Venv is one of many
[02:00:44] *** Quits: kenanmarasli (~kenanmara@user/kenanmarasli) (Quit: Leaving)
[02:00:46] <LordKalma> And ducks
[02:00:48] <LordKalma> Sucks
[02:00:55] <PJBoy> except for this one situation, I've only ever wanted the latest possibly python
[02:01:06] <PJBoy> and just that one
[02:01:48] <PJBoy> frankly I wish more people thought like that <_<
[02:02:13] <johnny> thought like what?
[02:02:13] <LordKalma> nah man
[02:02:23] <PJBoy> only ever having the latest python mentality
[02:02:24] <LordKalma> when I'm doing engineering is totally different from when I'm developing on django
[02:02:37] <johnny> PJBoy, i hate venvs conceptually, so you're not totally alone
[02:02:50] <johnny> have you worked with any other languages that have package managers tho?
[02:03:08] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:bcc0:c482:6957:eca1) (Ping timeout: 252 seconds)
[02:03:09] <PJBoy> just python
[02:03:17] <PJBoy> oh and some C#
[02:03:18] <LordKalma> even node has nvm
[02:03:20] <PJBoy> but fuck nuget
[02:03:21] <LordKalma> which works different
[02:03:23] <PJBoy> oh I've done node
[02:03:25] <johnny> aren't those system level?
[02:03:31] <hnOsmium0001[m]> unfortunately it's what you have to use to fix the broken system that relies on PATH (compared to say cmake toolchain files)
[02:03:34] <johnny> nuget isn't lcoal is it?
[02:03:51] <PJBoy> idk
[02:04:00] <LordKalma> PJBoy, another option is installing docker ;) :D
[02:04:15] <johnny> PJBoy, one can hate npm or whatever, but that's the kind of system i always prefer.. where packages get put in a project local place, not system
[02:04:17] <LordKalma> butu that's bringing the flame thrower haha
[02:04:20] <PJBoy> docker is something I need to explore, straight up
[02:04:28] <PJBoy> geordi runs on docker
[02:04:37] <PJBoy> so that's a great place for me to start at some point
[02:04:48] <PJBoy> docker makes things like CI easier
[02:04:50] <johnny> i've so far managed to completely avoid docker
[02:04:51] <LordKalma> today i'm developing directly on docker with vscode for the first time actually
[02:04:52] <PJBoy> full respect to docker
[02:05:03] <johnny> although i wouldn't use docker at all, but rather podman
[02:05:07] <johnny> docker requires a daemon
[02:05:11] <LordKalma> I had this weird system where I duplicated the environment in my machine and the container
[02:05:22] <LordKalma> now I'm just inside the container but with the files mounted locally
[02:05:25] <LordKalma> pretty decent
[02:05:27] <LordKalma> not perfect
[02:05:29] <LordKalma> but decent
[02:05:45] <johnny> i should probably have used a container for this wine dev i'm tryin to do
[02:05:55] <PJBoy> yeah obviously
[02:05:58] <johnny> i installed so many dev deps on my system because i din't feel lik messing with it
[02:06:03] <PJBoy> where else would you keep your wine
[02:06:06] <johnny> it's easy to revert tho
[02:06:10] <LordKalma> my favorite thing about docker is like that you can just delete the container
[02:06:20] <johnny> LordKalma, are you familiar with toolbox though?
[02:06:25] <LordKalma> nope
[02:06:27] <LordKalma> just doker
[02:07:03] <johnny> https://github.com/containers/toolbox
[02:07:27] <johnny> toolbox is when you want scratch environments but still access to your /home and other stuff
[02:07:45] <johnny> for when you want*
[02:08:07] <johnny> unless you're using immutable systems like silverblue, in which case you need it for other things
[02:08:10] <johnny> " This image is used to create a toolbox container that seamlessly integrates with the rest of the operating system by providing access to the user's home directory, the Wayland and X11 sockets, networking (including Avahi), removable devices (like USB sticks), systemd journal, SSH agent, D-Bus, ulimits, /dev and the udev database, etc.."
[02:08:46] <johnny> that's what i use to build projects just to play with
[02:08:54] <artok> docker is good for clean build environment so local edits and what not won't be affecting
[02:08:55] <johnny> so i don't pull in a ton of deps for no reason
[02:09:40] <johnny> like let's say you want project X 1.1 and distro only has X 1.0. you can built it cleanly in the toolbox and just trash it afterwards
[02:09:50] <johnny> well i guess you coul use mock or something as well though
[02:09:59] *** Quits: Tokamak (~Tokamak@172.58.188.12) (Ping timeout: 268 seconds)
[02:10:28] <johnny> docker tech  (and dockerfiles) will be with us for awhile, but podman seems to be the actual tool that folks will use by default i imagine
[02:10:28] <artok> dependency building, that ah so common talk nowadays
[02:10:41] <Alipha> sh00p: eh, just use Scott Meyer's Singleton. It doesn't dynamically allocate and is thread safe and is super easy: https://www.modernescpp.com/index.php/thread-safe-initialization-of-a-singleton
[02:11:10] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:bc5b:dbe0:79e5:a909)
[02:12:02] *** Joins: Tokamak (~Tokamak@172.58.188.12)
[02:14:07] <sh00p> oh, so it DOES exist
[02:14:09] <sh00p> thanks Alipha
[02:16:07] <sh00p> hmm well Alipha, that singleton requires default constructible objects
[02:16:10] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:bc5b:dbe0:79e5:a909) (Ping timeout: 268 seconds)
[02:16:56] <sh00p> but it does some neat things maybe I can get inspired of regardless
[02:17:23] *** Joins: Tokamak_ (~Tokamak@166.205.152.67)
[02:17:58] *** Quits: Tokamak (~Tokamak@172.58.188.12) (Ping timeout: 256 seconds)
[02:28:53] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:bc5b:dbe0:79e5:a909)
[02:34:02] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:bc5b:dbe0:79e5:a909) (Ping timeout: 268 seconds)
[02:35:46] <Alipha> sh00p: no, you can call a different constructor
[02:36:37] *** Quits: RabidToaster (~Thunderbi@bras-base-otwaon234vw-grc-15-50-100-215-56.dsl.bell.ca) (Ping timeout: 240 seconds)
[02:38:49] <xkoncek> supposedly `basic_stacktrace` is a container class
[02:39:54] <Raziel> fatal error C1128: number of sections exceeded object file format limit: compile with /bigobj
[02:39:57] <Raziel> well that's a fuckin new one
[02:40:22] <xkoncek> johnny i recommend podman instead of docker
[02:42:01] <kalven> stacktrace will be nice to have built in
[02:45:08] <comrad> we do use podman as well, if there is an escape it's at least not root
[02:45:32] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:bc5b:dbe0:79e5:a909)
[02:46:17] *** Joins: ferdna (~ferdna@user/ferdna)
[02:50:06] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:bc5b:dbe0:79e5:a909) (Ping timeout: 260 seconds)
[02:52:44] *** Quits: Colt (~Colt@user/colt) (Remote host closed the connection)
[02:53:13] *** Joins: Colt (~Colt@user/colt)
[02:53:24] *** Joins: RPNX (RPNX@gateway/vpn/protonvpn/rpnx)
[02:57:11] <sh00p> Alipha, it gets a bit messy because I need to be able to delete the object during executable termination, but SM puts his storage inside of the scope of the static function
[02:57:27] <sh00p> but it was an interesting approach, way smaller
[02:59:24] *** Quits: Colt (~Colt@user/colt) (Remote host closed the connection)
[02:59:50] *** Joins: Colt (~Colt@user/colt)
[03:02:31] <Alipha> sh00p: the static local variable should automatically get destroyed during termination
[03:03:47] <Alipha> { foo(); } void foo() { static tracked::B b; }
[03:03:47] <geordi> B0* B0~
[03:04:23] <Alipha> { foo(); exit(0); } void foo() { static tracked::B b; }
[03:04:23] <geordi> B0* B0~
[03:04:34] <sh00p> I'm using this draconian framework called autosar, it doesn't seem to like it... i
[03:04:38] <Alipha> { foo(); terminate(); } void foo() { static tracked::B b; }
[03:04:39] <geordi> B0* terminated
[03:04:39] <sh00p> i'm sure there's a way around it
[03:12:39] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.3)
[03:15:21] *** Quits: Tokamak_ (~Tokamak@166.205.152.67) (Ping timeout: 268 seconds)
[03:18:04] *** Joins: Tokamak (~Tokamak@166.205.152.67)
[03:19:44] *** Quits: namo (~nomo@95.87.208.95) (Ping timeout: 256 seconds)
[03:20:52] *** Quits: mackal (~mackal@pool-96-237-249-63.bstnma.fios.verizon.net) (Ping timeout: 256 seconds)
[03:21:45] *** Joins: mackal (~mackal@pool-96-237-249-63.bstnma.fios.verizon.net)
[03:23:22] *** Quits: mackal (~mackal@pool-96-237-249-63.bstnma.fios.verizon.net) (Client Quit)
[03:24:02] *** Quits: Tokamak (~Tokamak@166.205.152.67) (Read error: Connection reset by peer)
[03:24:26] *** Joins: mackal (~mackal@pool-96-237-249-63.bstnma.fios.verizon.net)
[03:25:25] *** Joins: Tokamak (~Tokamak@166.205.152.67)
[03:47:48] *** peeps is now known as peeps[zen]
[03:54:50] *** Joins: DSpider (DSpider@2a02:2f00:4ff:ffff::646c:62f3)
[03:55:15] *** Joins: varioust (~varioust@cpe-108-167-2-254.neb.res.rr.com)
[04:01:37] *** Quits: jkaye (~jkaye@2601:281:8300:7530:e0f7:dc28:dd0d:f0d5) (Ping timeout: 240 seconds)
[04:03:37] *** Quits: Tokamak (~Tokamak@166.205.152.67) (Ping timeout: 240 seconds)
[04:05:18] *** Joins: Tokamak (~Tokamak@172.58.188.110)
[04:09:16] *** Joins: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse)
[04:15:47] *** Quits: Tokamak (~Tokamak@172.58.188.110) (Ping timeout: 268 seconds)
[04:15:57] *** Joins: Tokamak_ (~Tokamak@166.205.152.1)
[04:25:27] *** Quits: Jupp_S (~quassel@ip-88-153-154-129.hsi04.unitymediagroup.de) (Remote host closed the connection)
[04:25:37] *** Quits: markong (~kvirc@213.146.188.203) (Ping timeout: 240 seconds)
[04:26:29] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[04:36:08] *** Quits: sh00p (~sh00p@2001:9b1:41e9:e800:dfc6:b074:1f6f:9b73) (Ping timeout: 268 seconds)
[04:39:15] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[04:47:30] <very_sneaky> i wish i didn't read back on this conversation.
[04:47:48] <very_sneaky> virtualenvs are amazing, anaconda is satan. nobody knows what they're talking about
[04:48:44] <very_sneaky> i do like that conda will get the c++ deps to build underlying math libraries when you try to build numpy, numba, scipy etc from source
[04:51:14] *** Joins: jkaye (~jkaye@2601:281:8300:7530:6da5:b4a4:e0e4:a76e)
[05:23:56] *** Joins: leduyquang753 (~leduyquan@user/leduyquang753)
[05:28:40] *** Quits: shailangsa_ (~shailangs@host109-159-108-207.range109-159.btcentralplus.com) ()
[05:30:04] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 256 seconds)
[05:31:32] *** Joins: sh00p (~sh00p@2001:9b1:41e9:e800:dfc6:b074:1f6f:9b73)
[05:33:18] <johnny> very_sneaky, i was preferring pdm over anything that rquires virtualenvs
[05:33:49] <johnny> but indeed, you still need acompiler to build native stuff
[05:39:42] *** Quits: AmR (~AmREiSa@156.199.5.112) (Ping timeout: 256 seconds)
[05:39:52] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[05:39:59] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[05:39:59] *** ChanServ sets mode: +v npaperbot
[05:42:04] *** Joins: rajkosto (~rajkosto@178.220.166.14)
[05:42:06] *** Quits: rajkosto (~rajkosto@178.220.166.14) (Client Quit)
[05:42:33] *** Quits: RPNX (RPNX@gateway/vpn/protonvpn/rpnx) (Read error: Connection reset by peer)
[05:42:46] *** Joins: RPNX (RPNX@gateway/vpn/protonvpn/rpnx)
[05:43:18] *** Quits: RPNX (RPNX@gateway/vpn/protonvpn/rpnx) (Read error: Connection reset by peer)
[05:44:23] *** Joins: RPNX (RPNX@gateway/vpn/protonvpn/rpnx)
[05:49:25] *** Quits: sh00p (~sh00p@2001:9b1:41e9:e800:dfc6:b074:1f6f:9b73) (Ping timeout: 240 seconds)
[05:52:09] *** Quits: pulse (~pulse@user/pulse) (Quit: Join a gamedev community https://indiedevs.net/)
[05:53:22] *** Joins: CaCode (~CaCode@user/cacode)
[05:54:57] *** Quits: jkaye (~jkaye@2601:281:8300:7530:6da5:b4a4:e0e4:a76e) (Ping timeout: 240 seconds)
[05:55:06] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[05:55:37] *** Joins: shailangsa (~shailangs@host109-159-108-207.range109-159.btcentralplus.com)
[05:57:54] *** Joins: rajkosto (~rajkosto@93-86-163-111.static.isp.telekom.rs)
[05:59:25] *** Quits: rajkosto (~rajkosto@93-86-163-111.static.isp.telekom.rs) (Client Quit)
[05:59:35] *** Joins: rajkosto (~rajkosto@93-86-163-111.static.isp.telekom.rs)
[06:03:21] *** Quits: rajkosto (~rajkosto@93-86-163-111.static.isp.telekom.rs) (Client Quit)
[06:03:34] *** Joins: rajkosto (~rajkosto@93-86-163-111.static.isp.telekom.rs)
[06:05:32] *** Quits: RPNX (RPNX@gateway/vpn/protonvpn/rpnx) (Ping timeout: 240 seconds)
[06:06:52] *** Joins: RPNX (RPNX@gateway/vpn/protonvpn/rpnx)
[06:08:23] *** Quits: rajkosto (~rajkosto@93-86-163-111.static.isp.telekom.rs) (Read error: Connection reset by peer)
[06:14:07] *** Quits: DSpider (DSpider@2a02:2f00:4ff:ffff::646c:62f3) (Quit: Leaving)
[06:15:39] *** Joins: CaCode_ (~CaCode@user/cacode)
[06:17:06] *** Joins: CaCode- (~CaCode@user/cacode)
[06:17:57] *** Quits: CaCode (~CaCode@user/cacode) (Ping timeout: 240 seconds)
[06:19:57] *** Quits: CaCode_ (~CaCode@user/cacode) (Ping timeout: 240 seconds)
[06:20:00] *** Joins: AmR (~AmREiSa@156.199.236.68)
[06:33:57] *** Quits: Rayke (rayke@user/rayke) (Quit: WeeChat 3.4)
[06:34:31] *** Quits: Roughy (~mdaw45ns@user/roughy) (Quit: Meadow Fresh milk)
[06:37:29] *** Joins: adeliktas8 (~adeliktas@i59F52293.versanet.de)
[06:38:08] *** Joins: Rayke (rayke@user/rayke)
[06:38:31] *** Quits: Rayke (rayke@user/rayke) (Client Quit)
[06:39:46] *** Quits: adeliktas (~adeliktas@i59F52042.versanet.de) (Ping timeout: 256 seconds)
[06:39:46] *** adeliktas8 is now known as adeliktas
[06:39:57] *** Joins: Rayke (rayke@user/rayke)
[06:43:02] *** Quits: Rayke (rayke@user/rayke) (Client Quit)
[06:43:22] *** Joins: Rayke (rayke@user/rayke)
[06:56:14] *** Joins: msk (~msk@103.213.213.70)
[06:59:46] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:959e:f772:789b:bf56) (Quit: Quit)
[07:05:43] *** Quits: msk (~msk@103.213.213.70) (Remote host closed the connection)
[07:12:32] <very_sneaky> what static/dynamic analyzers does everyone use? anything that i should consider beyond clang-tidy?
[07:13:53] *** Quits: varioust (~varioust@cpe-108-167-2-254.neb.res.rr.com) (Ping timeout: 252 seconds)
[07:15:33] *** Joins: varioust (~varioust@cpe-108-167-2-254.neb.res.rr.com)
[07:16:15] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[07:47:57] *** Quits: CaCode- (~CaCode@user/cacode) (Quit: Leaving)
[07:50:36] *** Quits: varioust (~varioust@cpe-108-167-2-254.neb.res.rr.com) (Ping timeout: 256 seconds)
[08:15:43] *** Joins: Jupp_S (~quassel@ip-88-153-154-129.hsi04.unitymediagroup.de)
[08:20:54] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:bc5b:dbe0:79e5:a909)
[08:23:37] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Ping timeout: 240 seconds)
[08:24:02] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[08:39:54] *** Joins: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[08:42:59] *** Quits: night_wulfe_ (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 252 seconds)
[08:46:30] *** Quits: great_taste (~great_tas@user/great-taste/x-5798414) (Quit: Client closed)
[08:55:32] *** Quits: x_kuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[08:56:38] *** Joins: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[09:04:21] <johnny> i see cppcheck still being used
[09:04:37] <johnny> i havent yet experimented with fuzzers, but i probably should at some point if i ever really do more C++
[09:04:55] <johnny> are you using asan and such?
[09:14:19] <kalven> fuzzers are nice if you're doing any kind of parsing
[09:19:32] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[09:23:39] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[09:24:43] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[09:25:41] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[09:26:47] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[09:27:44] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[09:28:12] <very_sneaky> johnny: what's asan?
[09:28:32] <very_sneaky> fuzzers presumably for ensuring that there aren't any buffer overflow opportunities, right?
[09:28:48] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[09:29:01] <johnny> among other things
[09:29:02] <johnny> https://docs.microsoft.com/en-us/cpp/sanitizers/asan?view=msvc-170
[09:29:07] <johnny> that's a good enough overview i suppose
[09:29:32] <johnny> it might nt just be buffer overflows, but any sort of input validation
[09:29:40] <hnOsmium0001[m]> btw if you are using clang/gcc, there are other sanitizers for UB, thread safety, memory, etc.
[09:29:51] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[09:30:03] <very_sneaky> i am predominantly using clang/gcc, also building for apple-clang and msvc in CI though
[09:30:05] <johnny> this is why i appreciate meson s that it has options for asan and bsan right at the project level as options
[09:30:12] <very_sneaky> so anything i can incorporate into my ci pipeline is good
[09:30:15] <johnny> and you don't have to set different args
[09:30:25] <johnny> that is you don't have to do it manually per compiler
[09:30:55] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[09:30:56] <johnny> but you can certainly pass the compile args directly percompiler yourself
[09:31:17] <very_sneaky> right, so this would mean if/else statements in my CML switching based on architecture
[09:31:57] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[09:32:59] <johnny> hah.. i just realized that's short for CMakeLists.txt
[09:33:00] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[09:33:09] <johnny> man.. why is it .txt anyways still
[09:34:03] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[09:34:32] <johnny> oh, and sonarsource and github both have C++ stuff as well, but that's all remote
[09:34:33] *** Joins: frost (~frost@user/frost)
[09:35:06] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[09:35:08] <johnny> there's another one i'm forgetting, but they were bought by github.i don't know if all of what they did was integrated yet or not
[09:36:12] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[09:37:16] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[09:38:22] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[09:39:26] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[09:39:52] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[09:40:01] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[09:40:01] *** ChanServ sets mode: +v npaperbot
[09:40:17] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[09:41:21] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[09:42:21] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[09:43:24] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[09:44:20] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[09:45:23] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[09:46:24] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[09:47:29] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[09:48:30] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[09:49:34] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[09:50:37] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[09:51:41] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[09:52:36] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[09:53:41] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[09:54:41] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[09:55:44] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[09:56:16] *** Quits: ravan (~ravan@user/ravan) (Remote host closed the connection)
[09:56:36] *** Joins: ravan (~ravan@user/ravan)
[09:56:45] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[09:57:51] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[09:58:48] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[09:59:51] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[10:00:51] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[10:01:55] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[10:02:12] <very_sneaky> yeahh.. i had a look at sonarsource/sonarqube, looks like you have to pay to get C++ features
[10:02:24] <very_sneaky> their free tier has a bunch of other languages, but no c++
[10:02:27] <very_sneaky> rip
[10:02:52] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[10:03:57] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[10:05:04] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[10:12:14] *** Quits: shailangsa (~shailangs@host109-159-108-207.range109-159.btcentralplus.com) (Ping timeout: 268 seconds)
[10:20:14] *** Quits: Tokamak_ (~Tokamak@166.205.152.1) (Ping timeout: 268 seconds)
[10:26:49] *** Joins: Tokamak (~Tokamak@166.205.152.1)
[10:28:13] *** Joins: Tokamak_ (~Tokamak@172.58.188.90)
[10:31:32] *** Quits: Tokamak (~Tokamak@166.205.152.1) (Ping timeout: 256 seconds)
[10:32:28] *** Quits: AbleBacon (~AbleBacon@user/AbleBacon) (Read error: Connection reset by peer)
[10:34:26] *** Quits: very_sneaky (~very_snea@user/very-sneaky/x-7432109) (Quit: very_sneaky)
[10:34:50] *** Joins: very_sneaky (~very_snea@user/very-sneaky/x-7432109)
[10:37:12] *** Joins: shailangsa_ (~shailangs@host109-159-108-207.range109-159.btcentralplus.com)
[10:48:17] *** Quits: Tokamak_ (~Tokamak@172.58.188.90) (Ping timeout: 240 seconds)
[10:56:17] *** Joins: Tokamak (~Tokamak@172.58.188.90)
[11:08:19] *** Joins: namo (~nomo@95.87.208.95)
[11:11:21] *** Quits: shailangsa_ (~shailangs@host109-159-108-207.range109-159.btcentralplus.com) ()
[11:18:12] *** Quits: Tokamak (~Tokamak@172.58.188.90) (Ping timeout: 268 seconds)
[11:26:33] *** Joins: Tokamak (~Tokamak@172.58.188.90)
[11:33:41] *** Quits: malloy (~jimery@116.30.221.255) (Ping timeout: 250 seconds)
[11:35:35] *** Joins: malloy (~jimery@116.30.221.255)
[11:38:19] *** Joins: shailangsa (~shailangs@host109-159-108-207.range109-159.btcentralplus.com)
[11:43:54] *** Joins: interop_madness (~interop_m@user/interop-madness/x-0950004)
[11:53:11] *** Joins: smallvil_ (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[11:54:37] *** Quits: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Ping timeout: 240 seconds)
[11:57:57] *** Quits: proller (~p@2a02:6b8:b081:8814::1:24) (Ping timeout: 240 seconds)
[12:02:51] *** Joins: andreasbuhr (~quassel@p549db80f.dip0.t-ipconnect.de)
[12:02:59] <LordKalma> !rq
[12:02:59] <nolyc> LordKalma: <PJBoy> the c in cbreak stands for common-sense
[12:03:29] *** Joins: |7| (~seachdamh@user/seachdamh)
[12:21:28] *** Quits: chozorho (~chozorho@2601:146:300:c30::d1a0) (Quit: WeeChat 3.0)
[12:25:25] *** Joins: Haohmaru (~Haohmaru@195.24.53.110)
[12:29:21] *** Joins: robod34 (Username@79.113.195.239)
[12:29:48] *** Joins: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[12:30:12] *** Quits: smallvil_ (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Ping timeout: 240 seconds)
[12:56:14] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[13:01:02] *** Joins: Codaraxis (~Codaraxis@user/codaraxis)
[13:03:20] <Haohmaru> !fact
[13:03:21] <nolyc> Haohmaru: An entity is captured if it is captured explicitly or implicitly.
[13:03:37] <Haohmaru> o_O
[13:15:51] *** Quits: badone (~badone@209.132.189.152) (Quit: ZNC 1.7.5 - https://znc.in)
[13:16:22] <very_sneaky> I'm getting clang tidy output like the following: `Calling a function that uses a default argument is disallowed  /home/user/.conan/data/boost/1.76.0/_/_/package/bb0ed74b47c33e4a724f64890dbd6dd553e41c47/include/boost/multiprecision/number.hpp:58:54: note: default parameter was declared here [fuchsia-default-arguments-calls]` - is this saying it's got problems with the fact that boost has
[13:16:24] <very_sneaky> default arguments in a class defined in number.h?
[13:21:37] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Ping timeout: 240 seconds)
[13:22:02] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[13:23:42] *** Joins: plastico (~plastico@neomutt/plastico)
[13:33:01] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:bc5b:dbe0:79e5:a909) (Ping timeout: 240 seconds)
[13:39:53] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[13:40:01] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[13:40:01] *** ChanServ sets mode: +v npaperbot
[13:40:06] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Read error: Connection timed out)
[13:40:19] *** Joins: PJBoy (~PJBoy@user/pjboy)
[13:42:05] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[13:49:00] *** Joins: zen_coder (~zen_coder@2a02:8109:a280:2d8d:39ca:8a68:8a0c:f08b)
[13:55:22] *** Joins: kenanmarasli (~kenanmara@user/kenanmarasli)
[14:02:53] *** Joins: Roughy (~mdaw45ns@user/roughy)
[14:08:24] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[14:09:30] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[14:10:34] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[14:11:39] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[14:12:37] *** Joins: smallvil_ (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[14:12:43] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[14:13:48] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Remote host closed the connection)
[14:14:51] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[14:14:57] *** Quits: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Ping timeout: 240 seconds)
[14:15:52] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[14:16:56] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[14:17:57] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[14:19:02] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[14:20:07] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[14:21:09] *** Quits: hackkitten (~hackkitte@94.31.103.136) (Read error: Connection reset by peer)
[14:21:11] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[14:22:04] *** Joins: hackkitten (~hackkitte@94.31.103.136)
[14:22:18] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[14:23:22] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[14:24:25] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[14:25:31] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[14:25:40] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Ping timeout: 268 seconds)
[14:26:34] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[14:27:39] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[14:27:55] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[14:28:43] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[14:29:46] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[14:30:46] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[14:31:52] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[14:32:57] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[14:34:01] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[14:35:05] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[14:36:09] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[14:36:10] <Haohmaru> such betel, very geuse, nine!
[14:37:09] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[14:38:12] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[14:39:17] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[14:40:21] *** Joins: rajkosto (~rajkosto@93-86-13-189.dynamic.isp.telekom.rs)
[14:40:21] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[14:40:38] * Haohmaru slaps betelgeuse9 with a std::fish
[14:41:27] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[14:42:31] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[14:42:41] * Haohmaru sets mode +o TinoDidriksen
[14:43:39] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Remote host closed the connection)
[14:44:43] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[14:44:54] *** Joins: RazielZ (~Raziel@user/raziel)
[14:45:43] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[14:46:47] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[14:47:50] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[14:48:04] *** Joins: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[14:48:32] *** Quits: Raziel (~Raziel@user/raziel) (Ping timeout: 240 seconds)
[14:48:55] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[14:49:53] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[14:50:21] *** Quits: smallvil_ (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Ping timeout: 268 seconds)
[14:50:25] <Haohmaru> i made my 4bit compressor into a template, now the number of bits s a template param, 4, 2, and 1 works, huh
[14:50:57] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[14:51:58] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[14:53:01] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[14:54:06] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[14:55:11] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[14:56:17] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[14:57:22] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[14:58:16] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[14:59:19] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[15:00:23] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[15:01:26] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[15:02:01] * Haohmaru sets mode +o cbreak
[15:02:30] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[15:03:33] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[15:04:33] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[15:05:37] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[15:05:52] *** Joins: jkaye (~jkaye@2601:281:8300:7530:6aeb:18f5:2700:2624)
[15:06:01] <LordKalma> or +o TinoDidriksen if they're around
[15:06:14] <Haohmaru> i already did that ;P~
[15:06:22] <LordKalma> ah sorry
[15:06:40] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[15:07:43] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[15:08:41] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[15:09:45] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[15:10:17] *** Quits: jkaye (~jkaye@2601:281:8300:7530:6aeb:18f5:2700:2624) (Ping timeout: 240 seconds)
[15:10:44] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[15:11:49] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[15:12:56] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[15:14:01] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[15:14:56] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[15:16:00] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[15:16:56] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:bc5b:dbe0:79e5:a909)
[15:17:06] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[15:18:11] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[15:19:12] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[15:20:17] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[15:21:20] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[15:22:26] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[15:23:22] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[15:23:36] <very_sneaky> LordKalma: I'm basing my clang-tidy format off what you provided yesterday - how much of the suggested output do you pay attention to here? immediately, i'm getting suggestions from project specific output like fuschia and abseil
[15:24:00] <very_sneaky> like this for example: `Use absl::StrContains instead of find() != npos (fix available) [abseil-string-find-str-contains]`
[15:24:26] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[15:25:31] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[15:26:36] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[15:27:41] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[15:27:50] *** Joins: sh00p (~sh00p@2001:9b1:41e9:e800:dfc6:b074:1f6f:9b73)
[15:28:45] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[15:29:50] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Remote host closed the connection)
[15:30:10] *** Joins: seninha (~seninha@user/seninha)
[15:30:52] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[15:31:51] <LordKalma> very_sneaky, yeah, turn off that stuff
[15:31:52] <LordKalma> hahah
[15:32:04] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[15:33:09] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[15:33:48] <very_sneaky> i'm learning a lot tonight
[15:33:51] <very_sneaky> do you unroll loops?
[15:34:13] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[15:34:18] <PJBoy> why unroll loops when you can let the compile funroll them
[15:35:03] <PJBoy> the compiler can also roll your loops, so I'd say manually unrolling loops is a waste of time
[15:35:16] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[15:35:33] <very_sneaky> well, this is what clang tidy is telling me `Kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]`
[15:35:49] <very_sneaky> though, i'm not convinced by it's use of the word "could"
[15:36:00] <LordKalma> very_sneaky, some proiject specifi crap is dumb i ndeed
[15:36:13] <LordKalma> that file was created recently and I still haven't disabled most of the annoying stuff
[15:36:19] *** Joins: markong (~kvirc@213.146.188.203)
[15:36:24] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[15:36:26] <very_sneaky> i mean, i'm having trouble evaluating whether they're dumb or not lol. I hadn't heard of unrolling loops until 5 minutes ago
[15:36:29] <PJBoy> I guess altera know their compiler well enough to make that kind of statement
[15:36:29] <LordKalma> I don't disregard specific projects outright because I might like/want some stuff
[15:36:49] <PJBoy> #pragma unroll is some specific compiler thing
[15:37:14] <PJBoy> I guess they don't trust their compiler to optimise loops correctly
[15:37:28] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[15:37:56] <very_sneaky> heh, i just found this note on the pragma unroll docs: `Use this pragma only when you have evidence, for example from --diag_warning=optimizations, that the compiler is not unrolling loops optimally by itself.`
[15:38:00] <PJBoy> you gotta think that if clang-tidy can tell you a loop could be unrolled, then the compiler can just straight up unroll it anyway
[15:38:08] <PJBoy> yeah there you go
[15:38:25] <very_sneaky> what is unrolling?
[15:38:28] <PJBoy> so disable all the project stuff a priori
[15:38:36] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[15:39:12] <PJBoy> so like instead of `for (size_t i = 0; i < n; ++i) f(i);` you do `for (size_t i = 0; i < n; i += 4) { f(i); f(i+1); f(i+2); f(i+3); }`
[15:39:20] <very_sneaky> removal of the jmp statement at the end of the loop and copy/pasta the next iteration in place as next instructions?
[15:39:33] <PJBoy> with some special handling for the last 0-3 entries
[15:39:40] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[15:39:48] <PJBoy> where 4 can be replaced by any arbitrary number
[15:39:59] <very_sneaky> huh.
[15:40:23] <PJBoy> if the loop bound is a small constant, then yeah you can do away with the loop entirely
[15:40:33] <very_sneaky> and that saves the computation of incrementing i the additional 2 times?
[15:40:41] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[15:40:49] <PJBoy> yeah
[15:40:58] <PJBoy> the main saving is the cost of the branch
[15:41:00] *** Joins: pulse (~pulse@user/pulse)
[15:41:09] <PJBoy> which isn't a huge saving in today's branch predicting world
[15:41:15] <very_sneaky> yeah, so a minor optimisation
[15:41:18] <very_sneaky> gotcha
[15:41:18] <PJBoy> but it used to cause pipeline stalls
[15:41:45] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[15:41:49] <very_sneaky> what's the cost associated with branching
[15:42:06] <PJBoy> a correctly predicted branch has negligible cost
[15:42:11] <very_sneaky> i'm struggling to remember my asm
[15:42:26] <PJBoy> an incorrectly predicted branch does the pipeline stall, which depends on architecture
[15:42:43] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[15:42:46] <very_sneaky> ah, so a result of compiler prediction about future instructions?
[15:42:48] <PJBoy> but would be roughly the cost of a couple instructions
[15:43:00] <PJBoy> the CPU does branch prediction
[15:43:14] <very_sneaky> that makes sense
[15:43:20] <PJBoy> although you can give hints whether a branch is likely to be taken or not on some archs
[15:43:44] <PJBoy> I don't think x86 or ARM support that though
[15:43:47] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[15:43:48] <very_sneaky> i feel like you've just opened another world of things i now know i don't know
[15:44:26] <PJBoy> HPC is really god damn hard
[15:44:43] <PJBoy> that's why the advice in these situations is always to profile and only optimise hotspots
[15:44:48] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[15:44:55] <PJBoy> because optimising those hotspots is going to simply take a load of trial and error
[15:45:19] <PJBoy> it's not guaranteed that loop unrolling will have any benefit
[15:45:51] <PJBoy> the flip side of loop unrolling is extra codegen, meaning you spend icache
[15:45:51] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[15:46:04] <very_sneaky> yeah that makes sense
[15:46:06] <PJBoy> and increasing the binary size in general
[15:46:30] <very_sneaky> in terms of profiling tools, what is there on windows? is there an equivalent to callgrind/kcachegrind?
[15:46:38] <very_sneaky> what VS ships with seems to be a sample based profiler
[15:46:47] <PJBoy> I've always used VS for profiling
[15:46:50] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[15:47:06] <PJBoy> actually I'm not even too sure what callgrind does
[15:47:15] <very_sneaky> it records every instruction
[15:47:34] <very_sneaky> vs samples every x seconds and records what it samples
[15:47:50] <PJBoy> dang that's heavyweight
[15:47:54] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[15:48:07] <PJBoy> how does it do that
[15:48:19] <very_sneaky> i'm sure there are options. i had a hard time getting vs to properly profile a library i was running because i was getting so few samples
[15:48:22] <PJBoy> that sounds like it would need a full featured emulator
[15:48:46] <very_sneaky> i'm actually not sure
[15:48:57] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[15:49:04] <very_sneaky> https://valgrind.org/docs/manual/cl-manual.html - there you go, branch prediction profiler
[15:49:23] <PJBoy> > Callgrind's cache simulation is based on that of Cachegrind
[15:49:31] <PJBoy> so it actually does simulate cache
[15:49:42] <PJBoy> wow
[15:50:00] <PJBoy> I guess the flip side of that one is that you can't fully trust its accuracy?
[15:50:00] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[15:50:24] <very_sneaky> i guess it depends on how accurately the cache simulation matches the target architecture
[15:50:58] <PJBoy> > unfortunately currently does not work so well on PowerPC, ARM, Thumb or MIPS code. This is because there are no explicit call or return instructions in these instruction sets, so Callgrind has to rely on heuristics to detect calls and returns
[15:51:05] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[15:51:10] <PJBoy> ngl that is a pain point of ARM code
[15:51:24] <PJBoy> but I didn't realise powerpc and MIPS had that problem too haha
[15:51:32] <PJBoy> why is returning from a function so complicated
[15:51:52] <very_sneaky> i mean a return is like 4 instructions isn't it
[15:51:56] <very_sneaky> maybe they were optimising? idk
[15:52:09] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[15:52:25] <PJBoy> x86 has a ret instruction
[15:52:34] <PJBoy> I think most archs do
[15:52:45] <cbreak> return instruction isn't really needed
[15:52:48] <PJBoy> but ARM doesn't, and I guess those other ones don't either
[15:52:49] <very_sneaky> yeah, i meant i thought that was just shorthand for pop sp, jmp, push sp, and something else
[15:53:03] <PJBoy> maybe in microcode it is
[15:53:03] <cbreak> it's an unconditional jump, a register add, and maybe some more
[15:53:08] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[15:53:23] <PJBoy> most instructions aren't needed and can be expressed in other instructions
[15:53:41] <cbreak> yeah. That's why RISC instruction sets don't have most of those
[15:54:10] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[15:54:13] <PJBoy> yeah
[15:54:26] <very_sneaky> hm, the only asm i've done was AVR which i thought did have a ret, and that's a risc instruction set
[15:54:43] <very_sneaky> idk this is stretching my memory back a fair way
[15:54:59] <PJBoy> ARM has quite a rich set of instructions that can manipulate the stack
[15:55:12] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[15:55:23] <PJBoy> other archs I've used that have a return instruction basically only have push and pop
[15:55:30] <PJBoy> and no branch-to-register or whatever
[15:56:11] <very_sneaky> heh, interesting
[15:56:17] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[15:56:30] <very_sneaky> so, i'm guessing there are no analogs to callgrind/cachegrind on windows that you know of then?
[15:57:10] <very_sneaky> oh wait, ... QCacheGrind is available on windows
[15:57:15] <very_sneaky> how did i miss that
[15:57:20] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[15:57:23] <PJBoy> nah, I've never done much profiling
[15:57:37] <PJBoy> short of finding merely finding hotspots
[15:58:09] <very_sneaky> https://sourceforge.net/projects/qcachegrindwin/
[15:58:24] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[15:58:26] <PJBoy> msvc optimises code so poorly that it's almost not even worth trying to optimise windows code
[15:58:34] <very_sneaky> really?
[15:58:38] <LordKalma> sometimes, yea
[15:58:49] <PJBoy> every MSVC godbolt I've ever seen has been tragic
[15:59:09] <very_sneaky> lol rip
[15:59:27] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[16:00:00] <Haohmaru> PJBoy huh, M$VC can't optimize good?
[16:00:10] <PJBoy> well it doesn't seem to
[16:00:19] <Haohmaru> why is it so praised then?!
[16:00:21] <PJBoy> don't have any benchmarks off hand though
[16:00:30] <PJBoy> maybe it does well in the bigger picture
[16:00:32] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[16:00:44] <Haohmaru> maybe the "headers+compiler"
[16:00:47] <PJBoy> used to be that it had the fastest std::sort for example
[16:00:53] <PJBoy> not sure if that still holds true
[16:01:07] <Haohmaru> ah, they have their own stdlib
[16:01:23] <PJBoy> they sure do
[16:01:36] <Haohmaru> so what, they wrote the std::sort in asm? ;P~
[16:01:37] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[16:01:37] <PJBoy> plus MSVC deserves some praise nowadays anyway for banging out C++20
[16:01:55] <Haohmaru> meh
[16:02:04] <PJBoy> gcc's still twiddling their thumbs about std::format
[16:02:09] <Haohmaru> no applause from me
[16:02:10] <PJBoy> no one else knows how to do modules
[16:02:29] <Haohmaru> what's std::format even?
[16:02:41] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[16:02:44] <PJBoy> that one that allows for python-like format strings
[16:02:54] <very_sneaky> that would be nice
[16:03:02] <Haohmaru> as if i schprachen ze snek
[16:03:08] <PJBoy> << format("{} + {} = {}", x, y, x + y); int x = 3, y = 4;
[16:03:08] <geordi> error: 'format' was not declared in this scope
[16:03:18] <PJBoy> should print `3 + 4 = 7`
[16:03:18] *** Quits: teepee (~teepee@openscad/teepee) (Remote host closed the connection)
[16:03:26] <PJBoy> idk what's taking them so long
[16:03:35] <PJBoy> there's a reference library
[16:03:38] <Haohmaru> hm, so sorta like printf()-ish?
[16:03:38] <PJBoy> two if you count MS STL
[16:03:44] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[16:03:46] <PJBoy> yeah
[16:04:10] <PJBoy> it's much safer than printf of course
[16:04:15] <Haohmaru> is this a compiler feature or library?
[16:04:26] <very_sneaky> jeez, it really does look like clang-tidy has way too many project specific checks in here. i'm getting `Backward branch (while loop) is ID-dependent due to variable reference to 'vFile' and may cause performance degradation [altera-id-dependent-backward-branch]`, which i traced back to this issue: https://reviews.llvm.org/D70094/new/. Looks like it's a "set of lint checks aimed at FPGA
[16:04:29] <very_sneaky> developers who write code in OpenCL". wat
[16:04:29] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Read error: Connection timed out)
[16:04:31] <PJBoy> working via variadic templates rather than variadic functions and being able to do some sanity checking
[16:04:46] <PJBoy> producing compile time errors or exceptions rather than UB
[16:04:48] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[16:04:52] <Haohmaru> nice
[16:04:53] <PJBoy> it's purely a library
[16:04:58] <PJBoy> you can use it now as fmtlib
[16:05:10] <Haohmaru> hopefully no buffer exploits with that ;P~
[16:05:35] *** Joins: teepee (~teepee@openscad/teepee)
[16:05:48] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[16:06:09] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[16:06:52] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[16:07:52] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[16:08:57] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[16:09:05] <very_sneaky> are trailing returns considered modern practice? i realised i'd never actually seen them before
[16:09:15] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[16:09:26] <very_sneaky> i.e. `auto func() -> int { return 1; }`
[16:09:40] <very_sneaky> oh wait, in lambdas all the time
[16:09:41] *** Joins: skapata (~Skapata@2804:14c:87b0:a6f9:3457:f613:6c02:3d9f)
[16:09:41] *** Quits: skapata (~Skapata@2804:14c:87b0:a6f9:3457:f613:6c02:3d9f) (Changing host)
[16:09:41] *** Joins: skapata (~Skapata@user/skapata)
[16:10:02] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[16:11:04] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[16:11:37] *** Quits: namo (~nomo@95.87.208.95) (Ping timeout: 240 seconds)
[16:12:14] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[16:12:16] <johnny> very_sneaky, i haven't yet really seen a codebase that uses them througout yet, even though they are part of clang-tidy's modernize set
[16:12:46] <very_sneaky> johnny: are you adopting them in yours?
[16:12:57] <johnny> nah, because it's a FOSS project and being in C++ is a hard enough sell
[16:13:06] <johnny> if it was a company project i might go for it though
[16:13:11] *** Joins: Burgundy (~yomon@79.115.213.171)
[16:13:17] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[16:13:24] <johnny> it doesn't look too different than what i'd do in typescript, so it wouldn't be too out of place
[16:13:36] <johnny> in fact it might even be easier for some
[16:13:58] <johnny> but i'd rather not make it harder for existing C++ coders in FOSS projects
[16:14:20] <very_sneaky> it confused me to begin with
[16:14:24] <johnny> the main FOSS thing i was working on didn't even have a coding standard in the beginning
[16:14:27] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[16:14:28] <very_sneaky> it looks like the type annotations used in python
[16:14:36] <johnny> so i tried to keep it simple
[16:14:50] <very_sneaky> fair. i find coding practices in FOSS are substantially better than what we use at work
[16:15:31] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[16:15:35] <johnny> so i've heard
[16:15:48] <johnny> although wine is an odd project out in that it basically has no coding standards
[16:15:59] <johnny> nothing enforced at least
[16:16:02] <johnny> which is super weird
[16:16:04] <very_sneaky> that is strange given that it's so large
[16:16:15] <very_sneaky> do you contribute to wine?
[16:16:22] <johnny> i've just started attempting to
[16:16:38] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[16:16:46] <very_sneaky> nice
[16:16:50] <johnny> this game translation overlay requires an implementation of DwmExtendFrameIntoClientArea
[16:17:12] <johnny> there's only a stub one such that the call doesn't fail, but it's not really implemented
[16:17:42] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[16:17:54] <johnny> it's supposed to be transparent, but it's not!
[16:18:07] <johnny> and that's because that call doesn't work
[16:18:42] <johnny> it might be a bit too over my head.. but we'll see
[16:18:46] *** Joins: namo (~nomo@95.87.208.95)
[16:18:49] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[16:19:06] <very_sneaky> only way to learn is to get stuck into it
[16:19:18] <johnny> indeed.. but i'm so not used to not having access to source code!
[16:19:41] <johnny> unlike other folks handling wine bugs, i acutally do have some relevant source code of the application
[16:19:53] <very_sneaky> do you mean of the game?
[16:19:53] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[16:20:02] <very_sneaky> surely wine is open source
[16:20:20] <johnny> of the translation overlay  (i don't need the game code, the game works fine)
[16:20:35] <johnny> the problem is trying to figure out how how windows implements something
[16:20:49] <johnny> it's windows that's not open source
[16:21:01] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[16:21:41] <johnny> you can learn a fair amount of how it's supposed to work by reading the msdn docs, but you can't actually reverse engineer the dlls if you actually want your code to make it into wine
[16:22:05] <johnny> certainly can't disassemble them or anyting like that
[16:22:06] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[16:22:17] <PJBoy> are trailing returns considered modern practice? <-- nah
[16:22:17] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Ping timeout: 240 seconds)
[16:22:34] <PJBoy> they're a practice that can only be done in C++11 onwards
[16:22:38] <PJBoy> so they're modern in that sense
[16:22:52] <very_sneaky> i'm trying to work out when they're preferred
[16:23:04] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Remote host closed the connection)
[16:23:06] <johnny> so far i've only seem them used with lambdas, where you actually have to use them
[16:23:07] <very_sneaky> is this something to apply always or just when i want to infer the return type at runtime using decltype
[16:23:17] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[16:23:20] <johnny> i think most people only use them when forced
[16:23:25] <PJBoy> if you're defining a member function outside the class and the return type is a type nested in that class
[16:23:28] <PJBoy> then it's useful
[16:23:51] <PJBoy> it's also useful if your return type depends on the types of the parameters to the function
[16:24:07] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[16:24:09] <very_sneaky> so, for templates and class members
[16:24:10] <johnny> and now.. it's bed time for me
[16:24:17] <very_sneaky> buenas noches
[16:24:19] <johnny> happy hacking y'all
[16:24:27] <PJBoy> yeah more or less
[16:24:46] <very_sneaky> if using for templates and class members, wouldn't it make sense to just adopt it generally for consistency?
[16:25:14] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[16:25:15] <PJBoy> that depends on your philosophy
[16:25:43] <PJBoy> if you agree with the principle of least power or whatever's it's called, then you would only use trailing returns types where necessary
[16:26:08] <very_sneaky> are they more expensive?
[16:26:09] <PJBoy> if you value consistency to that kinda of level, then yeah use trailing return everywhere
[16:26:13] <PJBoy> nah
[16:26:19] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[16:26:23] <PJBoy> there's no objective drawback to using them everywhere
[16:26:52] <PJBoy> but if you only use them where they're required, it kinda signals that you're doing something special
[16:27:07] <PJBoy> it's like, you could use `for (; cond;)` everywhere instead of `while (cond)`
[16:27:14] <PJBoy> and again there would be no objective drawback
[16:27:16] <very_sneaky> yeah gotcha
[16:27:28] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[16:27:37] <PJBoy> but the value of while is much more clear than the value of non trailing return type
[16:27:44] <PJBoy> so it's up to debate
[16:28:04] <PJBoy> there's also the stylistic argument about putting things on the right?
[16:28:32] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[16:28:35] <PJBoy> like `using T = type;` puts a thing on the right, `auto x = expr;` puts a thing on the right
[16:28:46] <PJBoy> and `auto f() -> Ret` puts a thing on the right too
[16:29:05] *** Joins: seninha (~seninha@user/seninha)
[16:29:14] <PJBoy> it's a point I've seen, but I don't really get it
[16:29:41] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[16:30:05] <PJBoy> tldr trailing return type isn't modernisation
[16:30:26] <PJBoy> but fair enough that clang-tidy allows the check for it
[16:30:45] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[16:31:03] <PJBoy> similar arguments apply to using std::array instead of native arrays
[16:31:51] <PJBoy> except native arrays do have an objective benefit in at least one situation
[16:31:51] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[16:32:12] <very_sneaky> you mean int[] vs array<int>?
[16:32:14] <cbreak> trailing return type gives added capabilities
[16:32:15] <PJBoy> yeah
[16:32:23] <cbreak> there's no need to use them if you don't need the added capabilities
[16:32:47] <PJBoy> truth
[16:32:57] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[16:33:11] <very_sneaky> well lets use the array point - isn't array<int> generally preferred over int[] because it has added capabilities?
[16:33:25] <cbreak> like template<typename T, typename Q> auto void foo(T && t, Q && q) -> decltype(t + q);
[16:33:58] <cbreak> very_sneaky: I'd recommend array<T,N> over T[N] because the former has reduced number of stupid capabilities
[16:34:01] <smallville7123> why is function parsing/expansion so complicated ;-;
[16:34:02] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[16:34:07] <cbreak> like pointer decay
[16:34:19] <cbreak> smallville7123: job security for compiler writers
[16:34:36] <smallville7123> cbreak: :)
[16:35:00] <very_sneaky> right, so if there's no cost to the method with more capabilities, why not use that all the time - it sounds like it's a strict superset of convention
[16:35:04] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[16:35:10] *** Quits: Rayke (rayke@user/rayke) (Quit: WeeChat 3.4)
[16:35:22] <malinus> cbreak: but think about the C programmers and their job security!!!
[16:35:29] *** Joins: Rayke (rayke@user/rayke)
[16:35:46] <smallville7123> attempting to parse "bar (4 + (2 * x))" with no defines gives me "bar(4 + 2 * x4 + (2 * x))"
[16:35:49] <cbreak> they can work on linux, the big benevolent dicktator over there apparently has an irational hatred of c++
[16:36:09] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[16:36:45] * Haohmaru sets mode +o cbreak
[16:36:46] <malinus> cbreak: that's how he assures funds and job security for kernel programmers
[16:36:50] <cbreak> smallville7123: your parser might be broken? Because that makes no sense at all
[16:37:05] <very_sneaky> i actually saw a comment of his recently stating that that was because c++ doesn't solve any of the problems that they have with C
[16:37:13] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[16:37:20] <very_sneaky> but that rust had some promise
[16:37:23] * very_sneaky shrug
[16:37:24] *** Joins: nojhan (uid443807@id-443807.lymington.irccloud.com)
[16:37:47] <malinus> I'm pretty sure he hasn't looked at C++ since 92' then
[16:37:55] <cbreak> very_sneaky: maybe they don't realize that they have the problems c++ solves (like improving type safety)
[16:38:00] <PJBoy> if you don't need to copy your array or anything like that, then native arrays are a good choice
[16:38:03] <smallville7123> yea
[16:38:10] <smallville7123> ;-;
[16:38:11] <PJBoy> or a potentially good choice I should say
[16:38:17] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[16:38:28] <PJBoy> you could argue that it signals the usage of the array better in its restrictions
[16:39:14] <PJBoy> tradeoff is that it's a bit less safe to use due to its decay
[16:39:20] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[16:39:38] <PJBoy> so std::array is more better than native arrays than trailing type is better than non-trailing type for that reason
[16:39:44] <very_sneaky> does array have bounds checking? i thought it did
[16:39:54] <PJBoy> it has .at(), yeah
[16:40:10] <very_sneaky> i'd imagine that's another big benefit
[16:40:14] <PJBoy> operator[] doesn't ever do bounds checking in stdlib
[16:40:22] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[16:40:34] <PJBoy> it's a benefit if you would ever use .at
[16:40:43] <PJBoy> I've yet to see anyone use .at() outside of example code
[16:40:53] <very_sneaky> i use it all the time
[16:41:11] <PJBoy> it's not in the spirit of C++ to do bounds checking on every access
[16:41:25] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[16:41:33] <PJBoy> but yeah fair enough
[16:42:01] <very_sneaky> i think i've convinced myself to use trailing return types everywhere until i see a good reason not to
[16:42:23] <cbreak> I want to have the information about size, which C arrays often lose, but I also want to check for it myself (or just require callers to use correct indices)
[16:42:33] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[16:42:49] <cbreak> very_sneaky: there's often no point in writing a trailing return type
[16:43:13] <cbreak> template<typename T, typename Q> auto foo(T && t, Q && q) { return t + q; } // no need
[16:43:17] <very_sneaky> cbreak: it shuts clang-tidy up, and it gets auto-fixed
[16:43:37] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[16:43:38] <cbreak> what would it write there?
[16:43:38] <PJBoy> there's other ways to shut clang-tidy up :(
[16:43:51] <cbreak> the full -> decltype(t + q) ?
[16:43:59] <very_sneaky> yeah i guess so
[16:44:07] <PJBoy> it wouldn't touch auto return type functions
[16:44:17] <very_sneaky> i'm new to it :)
[16:44:38] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[16:45:09] <very_sneaky> heh. recommendation to use ranges
[16:45:14] <very_sneaky> `Replace loop by 'std::ranges::all_of()' [readability-use-anyofallof]`
[16:45:35] <PJBoy> that's pretty cool
[16:45:40] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[16:46:04] <very_sneaky> i wonder if this will break my gcc build
[16:46:41] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[16:47:35] <PJBoy> does cmake not generate VS projects that use llvm-cl? :(
[16:47:45] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[16:47:51] <LordKalma> generator visual studio, but set the right compiler?
[16:48:00] <LordKalma> there's a github repo full of toolchain files for make
[16:48:45] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[16:49:46] <PJBoy> ah SO tells me to add `-T ClangCl`
[16:49:48] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[16:50:55] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Remote host closed the connection)
[16:51:33] <LordKalma> you need that toolchain
[16:51:48] <LordKalma> https://github.com/ruslo/polly
[16:52:00] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[16:52:35] <LordKalma> https://github.com/ruslo/polly/blob/master/vs-16-2019-win64-llvm-cxx17.cmake
[16:52:58] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[16:54:02] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[16:55:10] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[16:55:20] <smallville7123> and its because "4 + (2 * x)" is detected as a function argument in which it is assuming a valid function-like macro
[16:55:28] <smallville7123> ffs :(
[16:56:14] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[16:56:16] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Remote host closed the connection)
[16:57:03] <PJBoy> I guess conan has no support for this anyway
[16:57:21] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[16:58:24] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[16:58:54] <PJBoy> hm, better hold that thought
[16:59:30] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[17:00:34] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[17:00:41] <very_sneaky> what does mingw64 use? i compile with gcc, but isn't that using some kind of cl?
[17:00:51] <PJBoy> no idea about mingw
[17:01:03] <very_sneaky> wel, conan supports that
[17:01:15] <PJBoy> meh
[17:01:39] *** Quits: rajkosto (~rajkosto@93-86-13-189.dynamic.isp.telekom.rs) (Ping timeout: 250 seconds)
[17:01:43] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[17:01:58] *** ChanServ sets mode: +o TinoDidriksen
[17:02:03] <very_sneaky> i've gotta say, i'm not convinced that ranges are actually easier to read lol
[17:02:09] <PJBoy> I can just manually switch to clang-cl in the normal visual studio project
[17:02:19] *** TinoDidriksen sets mode: +b *!*@94-225-47-8.access.telenet.be
[17:02:21] *** Quits: jiffe (~jiffe@mail.nsab.us) (Quit: WeeChat 2.9)
[17:02:24] <PJBoy> so I was hoping there was a way for it do be done in cmake too
[17:02:32] <PJBoy> but cmake's complaining about conan now
[17:03:03] *** Joins: varioust (~varioust@cpe-108-167-2-254.neb.res.rr.com)
[17:04:05] <PJBoy> manual loop with `for (T x : var) { ... }` can be nicer than `std::ranges::any_of(var, [](T x) { ... });`
[17:04:16] <PJBoy> but semantically, the latter is clearer
[17:04:24] <PJBoy> ymmv
[17:05:08] <Haohmaru> yey
[17:06:27] *** Joins: meator (~meator@user/meator)
[17:08:01] <very_sneaky> yeah i guess there are semantics to consider
[17:08:50] <very_sneaky> hah.
[17:09:09] <very_sneaky> clang-tidy renames private members to have trailing underscores
[17:09:20] <cbreak> m_wtf?
[17:09:21] <PJBoy> that's configurable
[17:10:17] <fiesh> m_ seems 100% less efficient than a trailing underscore
[17:10:19] <very_sneaky> as in, i had mRealTime, and it renamed it to mRealTime_
[17:10:33] <PJBoy> see the readability-identifier-naming options
[17:10:43] <very_sneaky> oooh, will do :)
[17:10:45] <PJBoy> you can set the prefix, suffix, case style
[17:11:08] <very_sneaky> that's very cool
[17:11:24] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:959e:f772:789b:bf56)
[17:11:33] <very_sneaky> the core guidelines also cracked the shits at having public member variables in classes
[17:11:35] <very_sneaky> i like that
[17:11:45] <very_sneaky> structs for jbod, classes for functionality
[17:11:56] <PJBoy> problem with trailing underscore is that it's not as clear as m_ whether a variable is a member variable or a non member variable
[17:12:21] <PJBoy> suffix _ is used as a convention for both
[17:12:23] <very_sneaky> also can't autocomplete for trailing underscore
[17:12:27] <PJBoy> but prefix m_ is only ever used for members
[17:13:19] <PJBoy> I disabled that misc-non-private-member-variables-in-classes check
[17:13:30] <PJBoy> it even complains about protected members
[17:13:35] <PJBoy> load of non-sense
[17:13:40] <very_sneaky> it does complain about protected members
[17:13:42] <very_sneaky> maybe that's tunable
[17:13:43] <smallville7123> tf?
[17:13:47] <smallville7123> appending function name: '('
[17:13:47] <smallville7123> v.data: 'bar('
[17:13:55] <smallville7123> appending function paramater (var == nullptr): '4 + (2 * x)'
[17:13:55] <smallville7123> v.data: 'bar(4 + 2 * x4 + (2 * x)'
[17:14:22] <PJBoy> it is not configurable
[17:14:23] <smallville7123> i dont know where "4 + 2 * x" is coming from
[17:15:13] <PJBoy> in fact it has an option to ignore all public variables
[17:15:20] <PJBoy> but *not* one to ignore all protected variables
[17:15:40] <PJBoy> I can't even make sense of that
[17:16:11] <very_sneaky> maybe that would be worth a PR
[17:16:20] <very_sneaky> then i could put llvm contributor on my resume
[17:16:23] <very_sneaky> lol
[17:16:23] <PJBoy> also the docs are wrong??
[17:16:25] <PJBoy> "diagnose all data members declared with a non-public access specifier"
[17:16:39] <PJBoy> I'm sure it means non-private
[17:16:44] <PJBoy> ( https://clang.llvm.org/extra/clang-tidy/checks/misc-non-private-member-variables-in-classes.html )
[17:17:37] <cbreak> smallville7123: what are you rambling about specifically?
[17:17:44] <cbreak> looks like you print the same thing twice
[17:18:03] <very_sneaky> hm, yeah. strange
[17:18:18] <very_sneaky> PJBoy: do you apply suffices to more than just member variables? i.e., pointers, globals etc
[17:18:23] <very_sneaky> input arguments
[17:18:31] <PJBoy> I never use suffices
[17:18:42] <PJBoy> except for some type aliases, I use _t
[17:18:50] <very_sneaky> er, sorry - prefices
[17:18:56] * smallville7123 printf debugs my output_unchanged rule to see if it is being called when it is not supposed to
[17:19:06] <PJBoy> yeah I use some prefices
[17:19:11] <very_sneaky> what do you use?
[17:19:29] <fiesh> PJBoy: protected is just as bad as public from an API point of view sinc it's fully exposed
[17:19:34] <PJBoy> I use i_ for indices, n_ for sizes, p_ for pointers, o_ for optionals, it_ for iterators, it_end_ for sentinels
[17:19:50] <very_sneaky> nice
[17:19:58] <very_sneaky> do you stack them?
[17:20:01] <PJBoy> I don't write m_ for members or g_ for globals though
[17:20:14] <PJBoy> I do stack them, but that almost never happens
[17:20:44] <fiesh> it's like a weird subspace of Hungarian notation
[17:20:51] <very_sneaky> if you had a weak ptr, and then you lock it to get the shared pointer, how would you prefix them?
[17:21:07] <very_sneaky> wp_, sp_?
[17:21:17] *** Quits: pulse (~pulse@user/pulse) (Ping timeout: 240 seconds)
[17:21:19] <fiesh> and why would you do that, seeing that the type is already a fixed observable thing that contains the same information and more
[17:21:24] <PJBoy> I wouldn't, I'd just stick with p_
[17:21:34] <PJBoy> my prefices are all semantic
[17:21:43] <PJBoy> as opposed to hungarian where it just repeats the type for no reason
[17:21:49] <fiesh> how is p_ semantic?
[17:21:53] <smallville7123> and it is being called inside of function_call_arg from the 'any' rule
[17:21:54] <fiesh> or o_
[17:21:57] <fiesh> or it_
[17:22:13] <PJBoy> because they're accessed and used in ways specific to pointers, optionals and itertators
[17:22:32] <fiesh> and for i_ and n_, I'd argue that using a strong type alias would be the good solution
[17:22:47] <PJBoy> strong type aliases are a lot of work for minimal payoff
[17:23:09] <fiesh> if you're fine with macros, they're one liners
[17:23:25] <PJBoy> is that so?
[17:23:32] <fiesh> yes
[17:23:52] <PJBoy> it sounds like you have a recommendation :)
[17:24:12] <fiesh> and if you use them not just like you do your i_ but actually have different types for containers of different things, they bring a lot in that they make sure no accidental index misuse happens
[17:24:23] <fiesh> PJBoy: alas I only have our self-written solution that I can share if you like it
[17:25:03] <PJBoy> would I have to do explicit conversions to do things like compare i_arr with n_arr?
[17:25:10] *** Joins: voltron (~voltrin_@ip4d16bdc6.dynamic.kabel-deutschland.de)
[17:25:19] <PJBoy> because that would be taking it too far for me
[17:25:40] <PJBoy> but yeah I'm interested
[17:25:45] <fiesh> I'd never make the size a different type since that makes no sense to me to be honest -- but no, strong typedefs implicitly convert to their base type, just not the other way around
[17:25:55] <PJBoy> I had a go at writing a strong typedef type thing once, and it didn't work out like I wanted
[17:26:24] <PJBoy> but you suggested it in the first place >:(
[17:26:34] *** Joins: RabidToaster (~Thunderbi@bras-base-otwaon234vw-grc-15-50-100-215-56.dsl.bell.ca)
[17:26:49] <fiesh> sorry tel, one sec
[17:26:59] <PJBoy> no worries ofc
[17:27:19] <PJBoy> but I think all those prefices I have do represent different usages
[17:27:29] *** Quits: varioust (~varioust@cpe-108-167-2-254.neb.res.rr.com) (Ping timeout: 256 seconds)
[17:27:29] <PJBoy> i_ and n_ pair nicely, as do it_ and it_end
[17:27:35] <PJBoy> those things often end up being the same type
[17:27:51] <PJBoy> I tried using p_ for optionals, but it got confusing
[17:28:00] <very_sneaky> this is amazing. i love that you can specify prefices and casing for variables in clang tidy
[17:28:06] *** Joins: pulse (~pulse@user/pulse)
[17:28:13] <PJBoy> yeah it kicks ass
[17:28:22] <PJBoy> you'd think it'd be in clang-format
[17:28:27] <very_sneaky> yeah i would
[17:28:44] <very_sneaky> weird that it's not - i guess for linting purposes? since clang-format isn't in clangd
[17:28:55] <very_sneaky> but clangd can provide errors/warnings inline
[17:29:07] <PJBoy> I think clang-format is in clangd
[17:29:16] <PJBoy> I'm not too sure tbh
[17:29:23] <PJBoy> I think clang-format changes are supposed to be completely harmless
[17:29:31] <very_sneaky> not according to `clangd --help`
[17:29:33] <PJBoy> whereas these name changing things can actually have an effect
[17:29:35] <PJBoy> ah
[17:29:41] *** TinoDidriksen sets mode: -b *!*@94-225-47-8.access.telenet.be
[17:30:02] <very_sneaky> wait, nevermind
[17:30:10] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[17:30:18] <very_sneaky> it automatically interprets a .clang-format
[17:30:25] <PJBoy> like if you had a macro that was MIN and you applied the "all lowercase"
[17:30:26] <very_sneaky> `--fallback-style=<string>       - clang-format style to apply by default when no .clang-format file is found`
[17:30:27] <PJBoy> that would break shit
[17:30:49] <very_sneaky> yeah that would make sense
[17:31:11] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[17:32:05] <PJBoy> right I think I'm gonna join that slack once and for all
[17:32:14] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[17:32:22] * PJBoy digs up that invite link
[17:32:35] *** TinoDidriksen sets mode: +b *!*@94-225-47-8.access.telenet.be
[17:33:17] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[17:34:41] <smallville7123> yay it expands correctly now :)
[17:34:58] <smallville7123> (at least for https://godbolt.org/z/GKojjs6M6 )
[17:35:48] <smallville7123> (at least for https://godbolt.org/z/oPbs1qdqK ) *
[17:35:50] <very_sneaky> this is the best thing i've found in a while. this will let us codify our style guide so we don't have to dig through it to work out what we should be doing
[17:35:52] <very_sneaky> love that
[17:35:55] <PJBoy> oh no, has godbolt completely dropped support for my firefox now
[17:36:06] <PJBoy> ripskies
[17:36:39] <smallville7123> oof
[17:37:24] <smallville7123> "#define x (4 + y) \n #define y (2 * x) \n #define bar x \n #define foo(bax) bar bax \n foo(bar)"    ->    "(4 + (2 * x)) (4 + (2 * x))"
[17:37:33] <PJBoy> it's been a long time coming tbf
[17:37:43] <smallville7123> in both gcc and my preprocessor implementation :)
[17:38:36] <PJBoy> slack's taking its sweet time to sign me up
[17:39:02] <smallville7123> :)
[17:39:53] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[17:40:01] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[17:40:01] *** ChanServ sets mode: +v npaperbot
[17:40:12] <PJBoy> unless it requires manual intervention from the slack?
[17:40:19] <smallville7123> oof it fails "#undef foo // foo \n undef foo undef"   ->     "#undef foo undef foo undef"
[17:40:31] <very_sneaky> no, should be automatic
[17:40:56] <very_sneaky> PJBoy: so you don't distinguish variable scope in any of your prefices?
[17:41:00] <very_sneaky> any reason why?
[17:43:05] <PJBoy> no *particular* reason
[17:43:18] <PJBoy> I just don't feel the benefits in the kind of code I write
[17:43:26] <PJBoy> my local variables are all very obvious
[17:44:01] <PJBoy> and I basically never use globals
[17:44:02] <very_sneaky> are members obvious too?
[17:44:13] <PJBoy> I'd like to think so
[17:44:27] <rpav> obvious today is also not obvious tomorrow
[17:45:13] <very_sneaky> maybe the prefices are a bit of a crutch as well, i'm not sure. I've caught myself a few times not realising that a variable is a member and spent time looking for it when it's not in local scope
[17:45:19] <rpav> but really the killer isn't "what is this," because you can always see what it is and where it came from trivially
[17:45:32] <PJBoy> I will say, visual studio highlights member variables differently anyway
[17:45:34] <rpav> it's "why am i doing this thing"
[17:45:46] <PJBoy> so I might have just always relied on that without realising
[17:46:03] <fiesh> PJBoy: see pm
[17:46:04] <PJBoy> but in my opinion, if you're working on a class, you should know its members
[17:50:19] <rpav> qt's model/selection/etc stuff is so crap
[17:50:53] <very_sneaky> the problem mostly comes up when i'm not intricately familiar with the code
[17:51:12] <very_sneaky> which is often, given our suite of libs is reasonably large and up to 30 years old
[17:52:19] <very_sneaky> heh, shame - clang-tidy doesn't do StaticMemberCase
[17:52:27] <PJBoy> oh yeah, for enterprise code I do the m_ prefix meme
[17:52:40] <PJBoy> it's just for personal code that I don't
[17:53:10] <LordKalma> I use _ suffix :D
[17:53:15] <LordKalma> I'm ready for the flaming
[17:53:17] <rpav> suffix? D:
[17:53:27] <LordKalma> yap
[17:53:32] <rpav> i use `_foo` for private variables and just `foo` for public
[17:53:46] <LordKalma> https://github.com/ruilvo/aether_dsp/blob/master/.clang-tidy#L5
[17:53:56] <rpav> becuase like vec2 is going to have .x and .y, not ._x or .m_x or some bullshit
[17:54:04] <PJBoy> suffix _ is my second favourite form
[17:54:08] <rpav> and typing m_ is silly
[17:54:32] <very_sneaky> i don't mind the python way of doing it
[17:54:44] <PJBoy> the various prefices/suffices aren't generally used for public members
[17:54:53] <very_sneaky> public: foo, protected: _foo, private: __foo
[17:54:59] <rpav> foo_ is kinda painful, but i use it for "this sucks" parameter names, e.g. ctors where you have to keep it around and it's a copy of a member
[17:55:05] <fiesh> prefix _ sucks I think since the rules about when it's legal are already too much and too boring for me to bother remembering
[17:55:12] <PJBoy> ^
[17:55:19] <LordKalma> haha
[17:55:22] <PJBoy> that's what I dislike about prefix _ too
[17:55:25] <rpav> fiesh: they're really not
[17:55:33] <rpav> and suffix _ has the same problem
[17:55:40] <LordKalma> I like suffix because my body thinks "if I sorted them out would it make sense?"
[17:55:45] <PJBoy> nah suffix _ is always ok
[17:55:51] <PJBoy> prefix _ is sometimes not ok
[17:55:53] <fiesh> rpav: when is suffix _ illegal?
[17:56:01] <fiesh> yeah
[17:56:09] <very_sneaky> wait, do you apply m_ as a prefix to public members?
[17:56:14] <rpav> fiesh: in the global namespace and for anything that's _[A-Z]
[17:56:14] <PJBoy> no
[17:56:27] <very_sneaky> why only privates?
[17:56:34] <rpav> fiesh: or really if you prefer, they will always be safe for sanely-named member variables, and that's all that matters
[17:56:37] <PJBoy> for the reason rpav said
[17:56:48] <PJBoy> consumers of your class shouldn't stand for the m_ convention
[17:56:49] *** Joins: xardas (~xardas@149.233.51.127)
[17:57:03] <PJBoy> m_ implies an implementation detail
[17:57:09] <very_sneaky> hmm
[17:57:31] <very_sneaky> maybe
[17:57:40] <rpav> of course this all comes down to yet another issue that's only the case because of dumb/limited text
[17:57:58] <PJBoy> especially when the consumer of your class doesn't necessarily use the same convention
[17:58:07] <PJBoy> like with library provided classes
[17:58:10] <very_sneaky> that's a good point
[17:58:19] <very_sneaky> normally they only expose methods though
[17:58:38] <PJBoy> depends on the class, like a vec2d will usually just provide the members directly
[17:59:41] * smallville7123 wonders if i should start working on my C++ instruction pipeline again...
[18:00:48] <PJBoy> nah, you should pick up rust
[18:01:02] <PJBoy> work on your rusty pipeline ;)
[18:01:11] <very_sneaky> i'm a bit annoyed that it detects private static members as globals
[18:01:59] <very_sneaky> still, better than nothing
[18:02:27] <rpav> {} class C { int 🚫foo; protected: int 🚧bar; public: int baz; };
[18:02:27] <geordi> error: extended character 🚫 is not valid in an identifier
[18:02:40] <rpav> 🤔 clang accepted that
[18:02:45] <smallville7123> XD
[18:03:29] <rpav> though i'd prefer ⛔ and ⚠
[18:04:16] <rpav> correction _gcc 10.1.0_ accepted that
[18:04:55] <PJBoy> I assume the unicode proposal stopped those from working
[18:09:20] <rpav> probably, looks like XID_Start now
[18:09:30] <rpav> pretty dumb but that's C++
[18:10:00] <PJBoy> dude slack sucks
[18:10:07] <rpav> yeah
[18:10:31] <PJBoy> their verification email to me hasn't arrived
[18:10:34] <rpav> it's sortof in a competition with discord to see who can make the most shit client that people keep using
[18:10:39] <PJBoy> hahaha
[18:10:44] *** Quits: voltron (~voltrin_@ip4d16bdc6.dynamic.kabel-deutschland.de) (Read error: No route to host)
[18:10:51] <PJBoy> kinda like visual studio and VS code
[18:11:08] <PJBoy> competition to make the most bloated technology that's still somehow usable
[18:12:02] <cbreak> vscode isn't too bad though, if you ignore the bloat and some of the weirdo idiosyncracies
[18:12:11] <smallville7123> and i accidentally put the << '\n' inside of a
[18:12:18] <cbreak> it has some really cool features, like ssh-tunneled remote editing, and cross-platform support
[18:12:23] <smallville7123> and i accidentally put the "<< '\n'" inside of a if statement
[18:13:05] <PJBoy> the ssh tunneled remote editing is top tier
[18:13:46] <PJBoy> if you didn't tell me VS code was electron, I wouldn't know
[18:14:01] *** Joins: rajkosto (~rajkosto@93-86-90-106.dynamic.isp.telekom.rs)
[18:14:04] <PJBoy> but the fact that it does use electron still hurts
[18:14:09] <cbreak> I used it to remotely edit, compile and even _debug_ programs at work while nicely at home :D
[18:14:17] <PJBoy> same!
[18:15:04] <cbreak> (it even respects .ssh/config's ProxyJump / ForwardAgent / ControlMaster settings)
[18:16:56] <very_sneaky> well, i'll be damned. clang-tidy alreayd paying off. it just caught a logical error that i had to do a double take on
[18:17:09] <PJBoy> yeah right?
[18:17:22] <PJBoy> that's why it's important to disable all the noise :p
[18:17:35] <rpav> {} struct C { int ܢfoo; int ܟbar; int baz; };
[18:17:36] <geordi>  
[18:17:40] <very_sneaky> wasn't passing an end iterator to vector::erase lol
[18:17:41] <rpav> plenty of options still
[18:17:58] <PJBoy> ah classic erase-remove idiom bug
[18:18:02] <cbreak> very_sneaky: and that compiled?
[18:18:10] <PJBoy> of course
[18:18:11] <cbreak> ah, it only erased one element
[18:18:27] <cbreak> those two functionalities shouldn't be in the same overload set.
[18:18:52] <PJBoy> you reckon it should be erase and erase_range?
[18:18:55] <cbreak> functions that do different things should have different names. <- strong opinion.
[18:19:19] <very_sneaky> cbreak: https://godbolt.org/z/8hGPf9743
[18:19:21] <cbreak> yeah. maybe not _range, maybe _elements
[18:19:26] <cbreak> or _items
[18:19:50] <PJBoy> all the std::algorithms don't use that vocabulary though :/
[18:20:13] <cbreak> algorithms are always about iterator ranges
[18:20:16] <PJBoy> except for {min/max}_element
[18:20:26] <very_sneaky> the thing that was confusing me is that i was using remove_if
[18:20:37] <rpav> -Werror=unused-result
[18:20:42] <very_sneaky> so i was assuming it would remove all elements that matched, just by passing the one iterator into erase
[18:20:52] <rpav> also you should -Werror=return-type if you're not
[18:21:19] <smallville7123> oof it does everything correctly (with couple of extra spacing/newlines) except for      gcc "(4 + (2 * x)) A (4 + (2 * x))()"     mine "(4 + (2 * (4 + (2 * x)))) A(4 + (2 * x))()"
[18:21:24] <PJBoy> -Werror >:(
[18:21:25] <rpav> the former enforces [[nodiscard]] and the latter will error on like `int foo() { }` which is always a crash bug
[18:21:46] *** Quits: leduyquang753 (~leduyquan@user/leduyquang753) (Quit: Gotta go, see you guys later.)
[18:22:41] <smallville7123> which i think is from "foo(bar)" ?
[18:23:46] <rpav> actually wtf, that doesn't seem to work on this gcc
[18:24:11] <rpav> clang-tidy will highlight it and you shoudl be using that too, but
[18:24:24] <rpav> it should also not compile
[18:24:44] *** Quits: xardas (~xardas@149.233.51.127) (Quit: Client closed)
[18:25:07] <Haohmaru> when you write a whole big chunk of code in one go and at the end - it compiles.. <concern.jpg>
[18:26:07] <very_sneaky> well, that's annoying - the clang-tidy variables don't match against smart pointers, only raw pointers apparently
[18:26:12] <rpav> oh this libstc++ doesn't even declare it [[nounused]] _or_ gcc's proprietary one
[18:32:06] <smallville7123> andd my problem is incorrectly expanding this function-macro "#define foo(bar) bar \n foo(bar)"
[18:34:54] <PJBoy> you shouldn't need to be told a function returns a value, god damn it
[18:35:05] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Read error: Connection timed out)
[18:36:24] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[18:37:50] <rpav> you should absolutely be told that a function returns a value that you _must_ use or it's a bug
[18:38:09] <rpav> at least a bug 99% of the time someone's not being obtusely "clever"
[18:38:22] <rpav> also if you forgot a return statement, becuase it's incredibly easy to do and sometimes hard to track
[18:38:29] <rpav> and it's _always_ a bug
[18:39:44] <rpav> `[](int x) return x++;` should totally work, but then i always thought one-liner braceless functions ought to work too
[18:40:14] <PJBoy> I disagree that we need to tell programmers that a function returns a value that should be used if you called that function
[18:40:24] <rpav> i don't really care what you think
[18:40:31] <PJBoy> like you called the function
[18:40:37] <PJBoy> you should have a reason to do that
[18:40:46] <rpav> the compiler should ideally always warn when there is a very bug-prone possibility, and it's trivial to do so, and this is a case of such
[18:41:02] *** Quits: frost (~frost@user/frost) (Ping timeout: 240 seconds)
[18:41:38] <PJBoy> there's a point at which it becomes obnoxious hand holding
[18:41:46] <rpav> e.g. someone might not realize remove-erase idiocy is a thing, or likewise they might forget that it's a thing in a passing fit of sanity, or whatever .. the point is, it's almost certainly a bug, and it's trivial for the compiler to complain about it, and it should therefore do so
[18:41:56] <rpav> opinions to the contrary are of no import
[18:43:03] <rpav> i am 100% for allowing people to shoot themselves in the foot; the compiler should not hold your hand.. but you should be purposefully shooting yourself in the foot, not simply doing so out of ignorance .. the easy/default thing should be to not shoot yourself in the foot
[18:43:33] <PJBoy> fwiw std::remove isn't nodiscard
[18:44:05] *** Joins: xkpe (xkpe@cpc115884-addl5-2-0-cust1413.6-3.cable.virginm.net)
[18:44:11] <rpav> or rather, the compiler should not strive to prevent you from doing so, but it can provide an easy/default path for you to avoid doing so with some guard rails that say "if you've come here to jump off the cliff, ok, but if you haven't, please note there is a cliff"
[18:45:57] <PJBoy> one place where I'll admit nodiscard is good is for empty()
[18:46:09] <PJBoy> but that's only because the function isn't called is_empty()
[18:46:18] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Remote host closed the connection)
[18:47:13] <rpav> iirc compilers are free to use qualifiers where they want .. VS will warn on remove() as i recall
[18:47:23] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[18:47:30] <rpav> err, attributes or whatever, which language is this again
[18:47:50] <PJBoy> https://youtu.be/ZDluHz-ybPE?t=1962 <-- Kate Gregory's take
[18:48:22] <rpav> i literally don't give a shit what anyone's take or opinion is; this is a trivial thing to prevent bugs and it should be in place wherever possible
[18:48:25] <PJBoy> yeah implementations can add various things
[18:49:27] <PJBoy> the noise of writing [[nodiscard]] outweights the benefits of it
[18:49:39] <rpav> lamest argument yet
[18:49:52] <PJBoy> "lamest argument yet" is an even lamer argument
[18:50:28] <rpav> "it looks bad in some code you'll never see" is neither true _nor in any way outweighing even if it were true_
[18:50:53] *** Quits: meator (~meator@user/meator) (Remote host closed the connection)
[18:51:12] *** Joins: meator (~meator@user/meator)
[18:52:05] <rpav> besides it's not like you should put [[nodiscard]] on everything .. you should _only_ use it in the _precise_ cases where not heeding the return value is almost certainly a bug, because by not heeding the return you have likely not accomplished what you want
[18:52:15] <rpav> erase/remove is one of those; empty() is another good one; etc
[18:53:31] <rpav> there really aren't that many cases .. i can't think of many off the top of my head, but probably like unique_ptr::release
[18:54:48] <PJBoy> you do see code that uses [[nodiscard]]
[18:55:07] <rpav> because while that can valdily return nullptr, most uses of it probably _aren't_ assuming it's nullptr, because if they _know_ it's nullptr they can not .release()
[18:55:07] <PJBoy> and it seems like it is in fact supposed to be used for most things
[18:57:06] <PJBoy> you're arguing that release() should be discardable right?
[18:57:34] <PJBoy> 'cause that it is generally speaking how it's used
[18:58:49] *** Joins: lh_cat (~lh_mouse@mingw-w64/developer/lhmouse)
[18:59:23] <PJBoy> the main example of where you would not use nodiscard is anything that returns *this
[18:59:35] <rpav> no, release() should be [[nodiscard]]
[18:59:45] <PJBoy> that's a bad take
[19:01:02] <PJBoy> idiomatic use of release is `auto err = try_giving_ownership_to_c_api(uniq_ptr.get()); if (!err) { uniq_ptr.release(); }`
[19:01:13] <PJBoy> no reason to acknowledge the return value there
[19:02:33] *** Quits: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse) (Ping timeout: 268 seconds)
[19:03:23] <rpav> the only argument i'm seeing is "lazy use has lead to poor code which we'd have to rewrite"
[19:04:22] <rpav> though part of the problem is more good c++ stuff is recent and more bad c++ stuff was in the past, and it's hard to get rid of baggage
[19:04:36] <PJBoy> lazy coding is central to  your argument
[19:04:49] <rpav> no, it's not
[19:04:57] <rpav> no one writes perfect code even if they're _not_ lazy
[19:05:04] *** Quits: lh_cat (~lh_mouse@mingw-w64/developer/lhmouse) (Read error: Connection reset by peer)
[19:05:12] <rpav> the compiler should catch anything it can, especially things that are trivial to catch
[19:05:27] <PJBoy> acknowledging the return value of a function that returns a value doesn't require perfect coding
[19:05:35] <PJBoy> it requires the bare minimum of attention and intelligence
[19:05:50] <PJBoy> we're talking coding fundamentals here
[19:06:07] <rpav> in any case i'm not arguing this; i do not accept any opinions to the contrary in any case and it's a pointless waste of my time
[19:06:23] <PJBoy> adding nodiscard to these functions is like putting a trip hazard sign at your home's staircase
[19:06:43] <PJBoy> it theoretically makes your house safer
[19:06:49] <PJBoy> but are you really that big of an idiot?
[19:07:06] <PJBoy> you'd get desensitised to it
[19:07:14] <PJBoy> "oh I don't need to check if this function returns a value"
[19:07:20] *** Joins: evocatus (~evocatus@62.182.78.42)
[19:07:28] <PJBoy> "the compiler will tell me, I'm gonna go back to sleep"
[19:08:26] <PJBoy> next you'll have [[non_empty]] to describe functions that should have at least one statement in them
[19:09:09] <PJBoy> and [[is_array]] to make sure you're declaring an array and not a scalar
[19:09:23] <PJBoy> these things also have a theoretical bug prevention quality
[19:09:25] <PJBoy> but like come on
[19:09:31] <PJBoy> it's insulting
[19:13:43] <rpav> huh; map<variant<int*, float*>, ...> works in fact .. neat
[19:13:50] <rpav> i even have an actual use for it
[19:16:21] <BurumaSerafuku> [[no_ub]]
[19:19:26] *** Quits: meicceli (meicceli@kapsi.fi) (Quit: WeeChat 3.3)
[19:19:35] *** Joins: meicceli (meicceli@kapsi.fi)
[19:34:41] *** RazielZ is now known as Raziel
[19:47:43] *** Joins: varioust (~varioust@cpe-108-167-2-254.neb.res.rr.com)
[19:49:56] <xkoncek> i hate the difference between signed and unsigned std:numeric_limits<T>::digits
[19:57:15] <BurumaSerafuku> << numeric_limits<int>::digits,numeric_limits<unsigned>::digits
[19:57:15] <geordi> 31, 32
[19:57:18] <BurumaSerafuku> XD
[19:57:23] <BurumaSerafuku> makes sense
[19:57:29] <BurumaSerafuku> why you think they should be equal?
[19:57:54] <PJBoy> << numeric_limits<int>::digits, numeric_limits<unsigned>::digits, numeric_limits<double>::digits
[19:57:54] <geordi> 31, 32, 53
[19:58:36] <xkoncek> depends on point of view, but i want to use it for generic bit field size
[19:58:38] <PJBoy> I guess they represent log(max value)?
[19:58:52] <Alipha> very_sneaky: there's a small vocal minority who always uses trailing returns and tells everyone to use them.
[19:59:15] <xkoncek> Type field : std::numeric_limits<Type>::digits - 1 = 0;
[19:59:25] <rpav> xkoncek: avoid signed for bitfield-anythng
[19:59:29] *** Joins: great_taste (~great_tas@user/great-taste/x-5798414)
[20:00:10] <PJBoy> I guess since `digits` doesn't include padding, they can't be used for bitfield size anyway
[20:00:28] <PJBoy> sizeof(T) * CHAR_BIT is the obvious play
[20:01:33] *** Quits: letto (~letto@188.26.158.104) (Quit: Konversation terminated!)
[20:02:00] <PJBoy> the example I had in mind being bool
[20:02:25] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Read error: Connection timed out)
[20:03:05] *** Joins: AbleBacon (~AbleBacon@user/AbleBacon)
[20:03:38] *** Quits: evocatus (~evocatus@62.182.78.42) (Quit: Leaving)
[20:04:15] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[20:10:33] <Alipha> very_sneaky: `private: __foo` double underscore is reserved
[20:11:42] *** Quits: interop_madness (~interop_m@user/interop-madness/x-0950004) (Quit: Leaving)
[20:15:30] *** Quits: mackal (~mackal@pool-96-237-249-63.bstnma.fios.verizon.net) (Quit: BE VIGILANT.)
[20:17:04] <Alipha> I would think you'd mostly see [[nodiscard]] on functions that return error codes
[20:17:35] *** Joins: mackal (~mackal@pool-96-237-249-63.bstnma.fios.verizon.net)
[20:24:35] *** Quits: varioust (~varioust@cpe-108-167-2-254.neb.res.rr.com) (Ping timeout: 268 seconds)
[20:25:55] *** Joins: varioust (~varioust@72-46-48-28.lnk.ne.static.allophone.net)
[20:27:51] *** Joins: smallvil_ (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[20:31:32] *** Quits: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Read error: Connection reset by peer)
[20:31:48] *** Quits: smallvil_ (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Ping timeout: 240 seconds)
[20:32:03] <r-g> PJBoy: log2(max).
[20:32:29] <OnlineCop> !templates
[20:32:30] <nolyc> The compiler generates code not for templates but for their instantiations. If you do not know beforehand precisely with which arguments the template will be instantiated, this precludes separate compilation, and your only option is to place the template and everything belonging to it in a header, so that instantiations of it are compiled along with the translation units that spawn them.
[20:33:16] <OnlineCop> Is there a good tutorial on template programming? I'd like to `template<typename T != std::vector>` or something, but don't know what terms to use in my search.
[20:33:19] *** Joins: CodeMouse92 (~CodeMouse@user/codemouse92)
[20:34:47] *** Joins: letto (~letto@188.26.158.104)
[20:37:33] *** Joins: magla (~gelignite@55d41339.access.ecotel.net)
[20:42:27] <rpav> good Q, you sortof have to grok the mindset, and concepts make a _lot_ of stuff easier if you can use 20, but
[20:42:43] <rpav> knowing a good tutorial to point people at would be pretty useful
[20:45:22] <OnlineCop> I've seen examples that have a kind of "invalid" class declared akin to this: `template<typename T, typename = void> class Invalid_Executor{ public: auto isValid(const T& InObj) -> bool = delete; };` where you would then declare "everything else" that you would accept (I'm not sure if `typename = void` could translate into `typename = std::vector`).
[20:45:34] <rpav> OnlineCop: what you want is possibly `template<typename T, typename = std::enable_if_t<!std::is_same_v<T, std::vector>>> ...`
[20:45:49] <OnlineCop> That would work.
[20:45:57] <rpav> it depends, but it might
[20:46:06] *** Joins: cart_man (~rynot@host-78-144-121-71.as13285.net)
[20:46:14] <rpav> i'm actually not entirely sure off hand and my brain isn't really in template mode
[20:46:27] <BurumaSerafuku> fix your brain
[20:46:40] <BurumaSerafuku> templates are what makes C++ better than other languages
[20:46:44] <rpav> BurumaSerafuku: it is! why do you think it's not in template mode! ;)
[20:47:02] <BurumaSerafuku> "my brain isn't really in template mode"
[20:47:04] <cart_man> Can someone tell me why I am getting such weird behaviour? -> https://wandbox.org/permlink/eujqnBg1MUUodWkt      Does incrementing an iterator not go in sequence?
[20:47:20] *** Quits: markong (~kvirc@213.146.188.203) (Ping timeout: 252 seconds)
[20:47:21] <OnlineCop> Okay, so if templates are what make C++ better, would there be a comprehensive tutorial on it that I could read up on?
[20:47:23] <comrad> templates are what makes c++ unreadable ;)
[20:47:43] <BurumaSerafuku> your mom is unreadable
[20:47:43] <RandomReader> OnlineCop - why "not std::vector"? I ask because usually there's a different way to express a condition that works better
[20:47:48] <rpav> comrad: nah once you've done them a bit they're surprisingly straightforward and accessible
[20:48:22] <comrad> g++ already produces very hard to read error messages, templates make these even more inaccessible, imho
[20:48:23] <rpav> but they are conceptually a different layer than c++
[20:48:31] <rpav> well g++ sucks
[20:48:44] <RandomReader> as for learning material .. possibly https://www.youtube.com/watch?v=vwrXHznaYLA and its related part 2
[20:48:45] <OnlineCop> `template<typename T> checkValue(std::string key, const T& val) { /* do stuff expecting 'val' is a single object */ }`
[20:49:27] <comrad> yeah these types of templates are the easy ones
[20:49:33] <RandomReader> but the best material is probably in book form, there's one just on templates
[20:49:35] <RandomReader> !books
[20:49:36] <nolyc> A nice C++ book guide and list can be found at http://stackoverflow.com/q/388242/1090079
[20:49:45] <RandomReader> I don't seem to have any other intro material bookmarked
[20:50:02] <RandomReader> OnlineCop - it's always a single object though, so I'd say in this case the problem is the design :)
[20:50:08] <OnlineCop> Alright, thanks. If you find some good ones, could !template or !templates or !template-tuts or something include it?
[20:50:15] <cart_man> comrad: I find templates relatively easy
[20:50:21] <RandomReader> you can't eliminate containers, if that's the underlying idea here
[20:50:21] <cart_man> reading them anyway
[20:50:28] <BurumaSerafuku> !tut
[20:50:29] <OnlineCop> I've allowed `T` to be `std::vector<some_type>` as well...
[20:50:29] <nolyc> tut is a wonderfully elegant C++ unit testing framework: http://tut-framework.sf.net (apt-get install libtut-dev)
[20:51:03] <RandomReader> if you have a special case for *just* vector, usually that's expressed as a specialization, and automatically gets chosen because it is the best match
[20:51:14] <comrad> cart_man: good for you!
[20:51:16] <RandomReader> same concept as overloads
[20:51:30] <RandomReader> but "not vector" does not mean "not container", which is something that's impossible to check for
[20:51:34] <comrad> plus if you use templates you have to put your implementation into a header, therefore splitting implementation into different files
[20:51:56] <OnlineCop> There's an outer template which accepts std::vector<T>, and that calls an inner template which validates bounds on each element. I want that inner validation to be where I ensure that it's not somehow passed in its own std::vector<> type.
[20:52:44] <OnlineCop> We've got template declarations in the header file, and definitions as well as the specific type specifications in the source file. Seems to work well within our library.
[20:53:11] *** Quits: Haohmaru (~Haohmaru@195.24.53.110) ()
[20:54:16] <RandomReader> that still doesn't fit logically: what if the outer one receives a vector of vectors?
[20:54:45] <OnlineCop> Then I walk over to the scientists who tried to use that bad type of data, and kick the chair out from under them.
[20:54:48] <RandomReader> what I'm getting at is this kind of check simply doesn't fit, at all, in template terms
[20:55:23] <OnlineCop> In this particular use case, we are explicitly defining the types of data that can be allowed. For example, JSON allows [lists] and {objects}/{dictionaries}.
[20:55:25] <RandomReader> if T has specific traits you need, then you can limit the match to that
[20:56:05] <RandomReader> yes, but that's by allowing specific forms, not by trying to exclude all others :)
[20:56:23] <RandomReader> (by explicitly listing the excluded ones, I mean .. they're infinite)
[20:58:52] <RandomReader> enable_if is often used to handle the overload resolution stage, but you can combine it with custom type traits you create in order to match complex situations, if needed .. the stdlib's type traits cover some common cases: https://en.cppreference.com/w/cpp/types#Type_traits
[20:59:10] <RandomReader> in C++20 you can use concepts and the requires keyword to express the same idea but in a simpler / more legible form
[20:59:27] <BurumaSerafuku> comrad: any C++ code can be written in a good way or in an unreadable way
[20:59:37] <BurumaSerafuku> well written templates are beautiful
[20:59:46] <BurumaSerafuku> and concepts improve them A LOT
[21:00:09] <comrad> i still try to avoid them as best as possible
[21:01:39] <RandomReader> the technique for std::enable_if is also called SFINAE
[21:02:15] <RandomReader> ...oh, here are two bookmarks that hid from me: https://eli.thegreenplace.net/2014/sfinae-and-enable_if/  and  https://jguegant.github.io/blogs/tech/sfinae-introduction.html
[21:02:44] <RandomReader> those might be more suited to what you're currently looking at
[21:02:53] <OnlineCop> Cool, thanks!
[21:06:16] <Alipha> cart_man: did you not click share after making changes or something? https://wandbox.org/permlink/eujqnBg1MUUodWkt doesn't have any iterators or incrementing
[21:06:53] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:2546:cc91:ef22:afaa)
[21:11:24] <xkoncek> templates are just code that isn't executed therefore useless
[21:15:22] <rpav> comrad: you can build some amazing things with templates; c++17 user deduction guides let you help eliminate even more <> in user code
[21:15:38] <rpav> concepts help eliminate more in _library_ code and look like the best thing since sliced bread
[21:21:06] <OnlineCop> Is "std::' pronounced  "stid",  "stud",  or "ess-tee-dee"?
[21:21:19] <rpav> most i've heard say "stid"
[21:21:26] <imMute> depends on the person.  I do the first one.
[21:22:40] <fiesh> stood and standard
[21:23:15] <PJBoy> I'm a fan of ess tee dee
[21:25:45] <xkoncek> git vomit
[21:26:21] <OnlineCop> "stid cout", "stud cout", "stood cout", "standard cout", "ess-tee-dee cout", "git vomit cout" ?
[21:26:29] <BurumaSerafuku> git push barf
[21:26:50] <OnlineCop> barf == chuck, chuck == throw. Would that throw an exception?
[21:27:51] <PJBoy> no
[21:28:03] *** Joins: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[21:28:45] * PJBoy didn't realise it was a joke
[21:30:54] <Alipha> it would be a compile error!
[21:37:40] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Read error: Connection timed out)
[21:37:57] *** Quits: Tokamak (~Tokamak@172.58.188.90) (Ping timeout: 256 seconds)
[21:38:15] *** Joins: eoeek (~eoeek@178.49.152.42)
[21:39:34] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[21:39:54] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[21:40:02] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[21:40:02] *** ChanServ sets mode: +v npaperbot
[21:41:21] *** Quits: meator (~meator@user/meator) (Ping timeout: 256 seconds)
[21:41:30] *** Joins: Tokamak (~Tokamak@166.205.152.22)
[21:43:55] <rpav> OnlineCop: obviously stid::cin and stod::cout
[21:44:04] <rpav> along with stduin::cin for unsigned input
[21:44:18] <rpav> err, stuid yeesh can i type
[21:44:20] <OnlineCop> I... I see no problem here.
[21:45:50] <rpav> also suerly we should have int and ont, for input integer and output integer
[21:46:47] <rpav> `iont i; cout << i; // random access`
[21:49:13] <OnlineCop> I remember in CS class that having a `char buffer[1024];` at the top of a function had the potential to use it within overflow exploits: does `std::array<char, 1024>` have that same problem?
[21:53:33] <rpav> yes
[21:53:51] <imMute> OnlineCop: std::array's operator[] does not bounds check, but at() does.
[21:53:56] <rpav> the exploit is in overflowing the allocation, it doesn't matter how it's allocated
[21:54:32] <cbreak> rpav: that's a DoS exploit
[21:54:37] <rpav> if you `std::vector<char> v; v.resize(1024); take_input(v.data(), v.size());` and take_input does not restrict itself, it will still overflow
[21:55:00] <cbreak> rpav: but if you let attackers overflow the array on write, then you can get a return address modification vulnerability, which can give remote code execution
[21:55:15] <rpav> not accounting for the \0 is also a common overflow but a bit harder to exploit
[21:55:20] <rpav> cbreak: well yeah
[21:55:35] <rpav> oh, you mean specifically overwriting the local space, right
[21:55:37] <cbreak> for an object with storage not on the stack, that's not as likely
[21:55:53] <OnlineCop> With std::vector, though, it's allocating on the heap instead of stack, so they can't just stuff the value with NOPs like you could with a large buffer of bytes?
[21:56:05] <rpav> std::array is still a stack allocation if you're worried about the trivial thing
[21:56:27] <OnlineCop> That's what I was wondering: whether std::array was stack or heap.
[21:56:29] *** Joins: aniketgm (~Aniket@49.36.109.81)
[21:56:32] <rpav> if you're not fixing the broken code, relying on something potentially being in harder-to-exploit space is not a big assurance :p
[21:57:00] <imMute> OnlineCop: std::array stores the data in itself.  so if the std::array is on the stack, so is the underlying objects.
[21:57:22] <imMute> and yeah, stack vs heap doesn't really matter for exploit protection -- it just means different classes of attacks are available.
[21:57:26] <rpav> though, to be fair, you _could_ hypothetically have a std::safe_vector that always allocated between OS-signalling pages
[21:57:29] <OnlineCop> Okay, another question: https://youtu.be/vwrXHznaYLA?t=1778 shows some template deduction. But what about line 19 of https://wandbox.org/permlink/Dv1PR2x4HZ9PyJuX ?
[21:57:38] <rpav> and as such probably not a terrible idea 🤔
[21:58:10] <OnlineCop> I haven't used std::safe_vector before. I'll have to read into it.
[21:58:31] <rpav> it doesn't exist
[21:58:50] *** Joins: meator (~meator@user/meator)
[21:58:53] <imMute> rpav: if you can go out of bounds, you can probably go out of bounds enough to skip right over those guard pages.
[21:59:17] <rpav> and std:: probably doesn't make sense for it, but i'm just saying that _for user/untrusted input_ you could actually probably employ OS mechanisms to always be sure anything you called _didn't_ overflow
[21:59:34] <rpav> imMute: seems unlikely
[21:59:38] <OnlineCop> With template deduction, `add<int, int>(x,y)` is accepted; `add<int>(x,y)` is accepted, and `add<>(x,y)` or `add(x,y)` are as well where the types are deduced from the parameter types. Can you say "deduce the type for 'x' but explicitly use THIS type for 'y'" ?
[21:59:52] <rpav> i mean, yeah you could randomly jump from a pointer to anywhere, but the common case is _writing past the end_
[22:00:12] <imMute> rpav: https://lwn.net/Articles/725832/
[22:00:53] <imMute> but yeah, the most common buffer overflow is contiguous writing, which guard pages would catch.
[22:01:05] <OnlineCop> imMute: That link is probably best for me :D But I was interested to know whether std::array is stack/heap based, so I knew whether or not to sniff-test for this kind of thing.
[22:01:31] <cbreak> OnlineCop: you can have a "heap" based std::array if you allocate it on the heap...
[22:01:41] <cbreak> I wouldn't recommend it though.
[22:01:52] <rpav> imMute: not the same exploit :p
[22:02:25] <OnlineCop> cbreak: Right.
[22:02:44] <rpav> like there is not a mechanism for "read user input" that can exploit stack clash afaict, though there would be plenty of ways by interpreting unsanitized input
[22:02:45] <imMute> and you could have a std::vector that has the data on the stack (using a stack allocator)
[22:03:14] <OnlineCop> There's a stack allocator? Ooh, I'm writing this down for my "what I need to research this week" study.
[22:03:38] <imMute> OnlineCop: I don't know if there's a std:: one, but std::vector takes an allocator template argument, which you could stick your own stack allocator in
[22:03:46] <OnlineCop> Did someone answer my template deduction question about `add<,int>(x,y)` and I missed it?
[22:04:45] <rpav> doesn't `add<auto, int>(x,y)` work in 20
[22:05:18] <OnlineCop> I could try `auto` (although I'm only using 17 and earlier at work).
[22:05:41] <rpav> it definitely does not work in 17
[22:05:58] <OnlineCop> Just confirmed it doesn't work in 17: https://wandbox.org/permlink/K5wojMbK8vGtJsnS
[22:06:05] <rpav> actually this is -std=gnu++2a and it doesn't work on gcc-10.1.0 so
[22:06:12] *** Joins: radu2424078 (~radu242@pool-96-250-79-242.nycmny.fios.verizon.net)
[22:06:37] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Ping timeout: 240 seconds)
[22:07:01] <OnlineCop> So, left-to-right rule, like when there are default parameters: Any values _to the right_ will only be defined if the values left of it exist and/or are provided.
[22:07:46] *** Quits: radu2424078 (~radu242@pool-96-250-79-242.nycmny.fios.verizon.net) (Read error: Connection reset by peer)
[22:07:47] <OnlineCop> No big problem: the video didn't cover that particular case, and I was wanting to raise my hand and ask the presenter that question.
[22:07:48] <rpav> this seems like a fun thing to hack, surely something clever can be done with parameter pack splicing or something
[22:07:52] *** Joins: radu24240782 (~radu242@pool-96-250-79-242.nycmny.fios.verizon.net)
[22:09:07] <Alipha> OnlineCop: if you use begin/end iterators rather than pointer arithmetic, you're less likely to overflow buffers
[22:10:57] <OnlineCop> Alipha: I almost always use iterators (although sometimes, `begin(my_vector) + min(my_vector.size(), some_size)` when I want to be sneaky with the end iterator). I was just curious about std::array when I come across it in code.
[22:11:49] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[22:12:31] <Alipha> OnlineCop: add('x', int(3.1)); // :-)
[22:12:46] <OnlineCop> Someone actually asked my question for me! :D https://www.youtube.com/watch?v=vwrXHznaYLA&t=1954s
[22:12:47] *** Quits: ravan (~ravan@user/ravan) (Remote host closed the connection)
[22:13:05] *** Quits: RabidToaster (~Thunderbi@bras-base-otwaon234vw-grc-15-50-100-215-56.dsl.bell.ca) (Ping timeout: 256 seconds)
[22:15:20] *** Joins: xkuru (~xkuru@user/xkuru)
[22:16:30] *** Joins: sho0p (~z@h-213-164-223-180.A498.priv.bahnhof.se)
[22:17:28] <sho0p> so I'm messing around with memory optimization... the goal is to have singleton/monostate objects allocated next to each other in static storage, whilst they do now have trivial ctors
[22:17:37] <sho0p> and I wrote this little debaccle https://github.com/realsh00p/funwithram
[22:17:53] <sho0p> but I'm now happy with the way ContiguousMonostate is used in main
[22:18:16] <sho0p> there should really be some way to use the parameter pack as a type alias
[22:18:25] <sho0p> but I cant figure out how to do it
[22:18:44] <cbreak> sho0p: why do you want to have monostate objects allocated at all?
[22:18:51] <sho0p> not this again
[22:18:59] *** Quits: great_taste (~great_tas@user/great-taste/x-5798414) (Quit: Client closed)
[22:19:09] <OnlineCop> Why is `size` unused in https://github.com/realsh00p/funwithram/blob/master/StaticMonostate.hpp#L22 ?
[22:19:10] <sho0p> can we just for science please focus on the question
[22:19:21] <cbreak> monostate objects have no state, they take up no space if you do it properly
[22:19:23] *** Joins: great_taste (~great_tas@user/great-taste/x-5798414)
[22:19:42] <sho0p> i'm not talking about std::monospace
[22:20:00] <sho0p> or am I misunderstanding you?
[22:20:14] <cbreak> any monostate type is the same in that it has only one state
[22:20:20] <cbreak> so it takes zero bits to represent said state
[22:20:24] <sho0p> I can't use heap allocations because of the limitations of my platform
[22:20:46] <sho0p> and my objects need to be destroyable because of the limitations of my plaatform, even though they ever only live and die once
[22:21:06] <cbreak> so, make them empty?
[22:21:07] *** Quits: rajkosto (~rajkosto@93-86-90-106.dynamic.isp.telekom.rs) (Read error: Connection reset by peer)
[22:21:14] <cbreak> struct MyMonostate {};
[22:21:28] <cbreak> this will take up space sometimes
[22:21:29] <sho0p> I dont understand, any object with a memeber takes N amount of bytes of storage
[22:21:38] <cbreak> but if you use it as base class, it will not add space
[22:21:55] <cbreak> sho0p: not if it's a monostate
[22:22:09] <cbreak> because then all members are also only in a single state by definition
[22:22:30] <sho0p> sorry if the nomenclature is a bit off
[22:22:31] <cbreak> so there's no need to store that state (since you know it at compile time)
[22:22:52] <sho0p> well, my objects are either instantiated or not depending on configuration
[22:23:18] <kalven> https://wiki.c2.com/?MonostatePattern is not the same as std::monostate
[22:23:24] <sho0p> right kalven
[22:24:17] <sho0p> using the monostate pattern I want to abstract the instantiation of my objects, and if for some weird reason one gets allocd more than once that's a throw or assert
[22:24:30] <cbreak> that's a very different usage of the word "monostate"
[22:24:37] <fiesh> monostate objects have *one* state, not none ;-)  that's why they're monostate, else they'd be medenstate ;-)
[22:24:50] <sho0p> but I want all my objects adjacent to each other in static storage, because I'm crazy
[22:24:55] *** Quits: rb (~augh@theguntretort.com) (Read error: Connection reset by peer)
[22:25:06] *** Joins: rwb (~augh@theguntretort.com)
[22:25:07] <cbreak> fiesh: bits have two states, 0 or 1
[22:25:25] <cbreak> uint8_t have 2^8 states. for a monostate, you don't need any bits.
[22:25:33] <cbreak> that's the semantic of monostate I know
[22:25:38] <fiesh> cbreak: yeah, so it has 2^0 = 1 state
[22:26:00] <cbreak> sho0p: so... struct Blah { Thinga a; Thingb b; } myThingStorage; // ?
[22:26:06] <cbreak> fiesh: -> mono :)
[22:26:17] <sho0p> well cbreak, that works fine for non-trival ctors
[22:26:24] <cbreak> yes.
[22:26:27] <cbreak> also for trivial ones
[22:26:30] <cbreak> since they're trivial.
[22:26:39] <sho0p> sorry xD
[22:26:43] <sho0p> that works fine for trivial ctors
[22:26:46] <sho0p> but not non-trival
[22:26:55] <cbreak> yes, also for non-trivial ones, as long as you have a default constructor
[22:27:00] *** rwb is now known as rb
[22:27:11] <sho0p> but I dont want default ctor, cause setters are ugly
[22:27:18] <cbreak> you can assign.
[22:27:30] <sho0p> I want full blown RAII optimization
[22:27:37] <cbreak> if you want controlable constructor, std::optional can help
[22:27:43] <cbreak> it's not super space efficient though.
[22:28:23] <cbreak> it shouldn't be too hard to create a multi-optional, that has some std::bitset for tracking what's alive, separate from object storage
[22:28:24] <sho0p> @why have a ctor if you can use setters@
[22:28:26] <cbreak> that's probably more compact
[22:28:27] *** Joins: kaph (~kaph@net-2-47-236-216.cust.vodafonedsl.it)
[22:28:43] <cbreak> sho0p: constructors establish class invariants
[22:28:51] <cbreak> setters just set stuff
[22:28:55] *** Quits: radu24240782 (~radu242@pool-96-250-79-242.nycmny.fios.verizon.net) (Read error: Connection reset by peer)
[22:28:57] <rpav> also avoid copying/etc
[22:28:57] <cbreak> very different purposes
[22:28:58] *** Joins: radu242407821 (~radu242@pool-96-250-79-242.nycmny.fios.verizon.net)
[22:29:57] <sho0p> I gotta be honest to say that I don 't fully understand of RAII optimization, but I want to do things by the books
[22:30:00] <sho0p> and this should be possible
[22:30:08] <rpav> raii isn't "optimization"
[22:30:10] <sho0p> did y'all look at my github?
[22:30:17] <rpav> it's ownership and lifetime management
[22:30:27] <sho0p> hmm
[22:31:44] <sho0p> surely, if objects are constructed using ctors that enables locality optimizations?
[22:32:47] <cbreak> no
[22:33:07] <cbreak> it enables the object to be used
[22:33:26] <cbreak> without construction, the object will not be alive enough for you to use.
[22:33:27] <sho0p> well anyway i think it's ugly with default ctor and then a void set(blabla& b);
[22:33:37] <cbreak> trivial constructors work for this, to some degree
[22:33:56] <sho0p> can we not solve this for special use cases where object lifetime is non-important?
[22:34:10] <cbreak> but those usually don't give well defined behavior in many cases, so best to have a proper constructor if you want
[22:34:42] <sho0p> exactly, init(blabla), set(blabla) is ugly imo
[22:34:56] <rpav> the _entire point_ of raii is lifetimes; what are you trying to solve?
[22:35:08] <cbreak> you should be aware that constructors are only the second most important part of raii
[22:35:16] <cbreak> the more important part is the destructor
[22:35:49] <cbreak> it frees resources, and is responsible to clean up, and is allowed to break class invariants
[22:36:11] <sho0p> rpav: object wih non-trival ctor being allocated adjacent to other objects with non-trivial ctors
[22:36:18] <Alipha> RAII is a horrible name because the automatic releasing of resources is the important part, not the acquisition
[22:36:22] <sho0p> https://github.com/realsh00p/funwithram
[22:36:23] <rpav> sho0p: that doesn't sound like a problem
[22:36:29] <cbreak> between the constructor body having been entered, and the destructor body having been left, the object is alive
[22:36:31] <sho0p> and I cannot use heap allocation
[22:36:35] <cbreak> outside of that, the object doesn't exist
[22:36:41] *** Quits: aniketgm (~Aniket@49.36.109.81) (Quit: leaving)
[22:36:43] <rpav> Alipha: it's also a horrible name in that it doesn't really maek evident what it even means ;)
[22:36:56] <rpav> but, those are probably aspects of the same complaint 🤔
[22:37:16] <cbreak> sho0p: struct X { std::optional<T1> thing1; std::optional<T2> thing2; } twoThings;
[22:37:20] <Alipha> !sbrm
[22:37:21] <nolyc> Scope Bound Resource Management is a powerful idiom based on the idea of acquiring resources in constructors and releasing them in destructors. C++ guarantees that destructors are automatically called for variables when they go out of scope, thereby transparently ensuring proper cleanup - even in the face of exceptions and early returns. Popularly called RAII (see !raii).
[22:37:34] <cbreak> sho0p: as I said above: not optimal in storage, separate lifetime tracking might be more compact
[22:37:42] <cbreak> is that what you want?
[22:37:50] <sho0p> imagine you have a compiler without malloc
[22:38:09] <kalven> optional doesn't use the heap
[22:38:22] <sho0p> that sounds fanstastic
[22:38:48] <tonitch> Hey, this will sound stupid I guess but I have got this error and I think I understand that one is a pointer and the other not so I tried to put a & in front of my variable and it didn't work... is something wrong with my process ? I can give you the code if needed
[22:38:52] <tonitch>  no known conversion for argument 1 from ‘pqxx::connection*’ to ‘pqxx::connection&’
[22:39:08] <kalven> tonitch: *ptr
[22:39:09] <fiesh> sho0p: if you need it, you can also come up with your own optional that supports a sentinel value -- something that unfortunately was not added to std::optional
[22:39:16] <sho0p> if optional doesnt use heap, where is the object allocd?
[22:39:37] <kalven> sho0p: it's basically { bool initialized; char storage[sizeof(T)]; }
[22:39:57] <sho0p> so it needs to be trivially constructible_!
[22:39:59] <sho0p> _!
[22:40:11] <sho0p> err.. _!
[22:40:18] <sho0p> lmfao sorry wtf
[22:40:25] <kalven> no, it doesn't
[22:40:43] <sho0p> that sounds like some black magic then
[22:40:43] <kalven> https://en.cppreference.com/w/cpp/utility/optional/emplace
[22:40:59] <kalven> an optional starts out as empty
[22:41:06] <kalven> that is, the T is not constructed
[22:41:39] <sho0p> hmm, i'm stuck on c++14 for this project
[22:41:54] <sho0p> but boost maybe has an equivalent
[22:42:01] <cbreak> sho0p: boost has had optional for decades :D
[22:42:07] <cbreak> well... at least one decade
[22:42:08] <kalven> that's where it came from
[22:42:12] <sho0p> i know boost has an optional
[22:42:21] <sho0p> but, is same?
[22:42:27] <cbreak> close enough
[22:42:35] <sho0p> heap is forbidden
[22:42:40] <sho0p> i'll just try
[22:42:40] <cbreak> no heap needed
[22:42:48] <rpav> "is implicitly deleted because the default definition would be ill-formed" D:
[22:43:01] <cbreak> sho0p: there's also boost::variant and std::variant
[22:43:19] <sho0p> but ok, so if i have T1 and T2 and both have this optional static, i still can't guarantee locality
[22:43:36] <cbreak> both which are similar to an optional with only two possible elements: some nothing placeholder, like std::monostate or boost::whateveritwas
[22:43:40] <cbreak> and the thing you want to store
[22:49:51] <rpav> is there any nice std function for delete-and-placement-new
[22:49:57] <rpav> err, dtor-call i mean
[22:51:20] <PJBoy> not together
[22:51:48] <rpav> template<typename C, typename...Ts> void renew(C& i, Ts&&...vs) { i.~C(); new (&i) C(std::forward<Ts>(vs)...); }
[22:52:12] <PJBoy> think it's worth checking if the type has an assignment operator first
[22:52:34] <Alipha> std::optional::emplace? :-)
[22:52:40] <PJBoy> and you can make it constexpr if you use constuct_at and destroy_at
[22:53:05] *** Quits: great_taste (~great_tas@user/great-taste/x-5798414) (Quit: Client closed)
[22:53:06] *** Parts: meator (~meator@user/meator) (Leaving)
[22:53:38] <rpav> reconstruct_at would be a better name
[22:54:26] <PJBoy> probably worth returning the pointer from new too
[22:54:39] <Alipha> Seems you should just call operator= though
[22:54:47] <rpav> i'm actually not sure why this class is having its operator= deleted .. even _move_ assignment
[22:55:08] <rpav> i have a map-of-thing-to-unique_ptr and an optional
[22:55:17] <Alipha> It's very unusual for a class to not even be movable
[22:55:25] <cbreak> rpav: std::allocator?
[22:55:44] <cbreak> those have construct / destroy members
[22:55:45] <rpav> yea .. also, ooh. happened after a merge, i bet something i'm keeping became unmoveable
[22:57:22] <cbreak> rpav: and maybe more convenient: https://en.cppreference.com/w/cpp/memory/allocator_traits/construct
[22:57:30] <cbreak> and https://en.cppreference.com/w/cpp/memory/allocator_traits/destroy
[22:58:44] <PJBoy> if you're not using an allocator, might as well just call the functions directly
[23:00:22] <PJBoy> although I do notice construct_at uses global scope new for some reason
[23:00:40] <cbreak> PJBoy: those are too new and shiny
[23:00:49] <PJBoy> so if you don't want to disallow overloaded operator new, better stick with the manual syntax
[23:01:21] <PJBoy> and I'm not sure why you would ever want to disallow that
[23:02:06] <PJBoy> there's also ranges::construct at for some reason
[23:02:57] *** Quits: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Ping timeout: 256 seconds)
[23:05:01] *** Quits: varioust (~varioust@72-46-48-28.lnk.ne.static.allophone.net) (Ping timeout: 240 seconds)
[23:05:46] *** Quits: Praise (~Fat@user/praise) (Ping timeout: 245 seconds)
[23:07:11] *** Joins: varioust (~varioust@cpe-108-167-2-254.neb.res.rr.com)
[23:07:26] *** Joins: proller (~p@62.76.32.253)
[23:08:00] <rpav> i grumble that assignment operators differ from copy/move ctors
[23:08:27] <PJBoy> blame references
[23:08:38] <rpav> all the time
[23:08:56] <PJBoy> and const members
[23:09:18] <PJBoy> and the possibility of having resources already allocated leading to quicker assignment than destruction + construction
[23:09:44] <PJBoy> also that fact that assignment operators can be virtual and ctors can't
[23:09:55] <Alipha> rpav: problem is, if your copy or move constructor throws, you can't destroy first and then construct over the object because then the object will be left in a bad state
[23:10:06] <rpav> ah, virtual is probably an issue
[23:10:08] <PJBoy> ah yeah exception safety too
[23:11:13] <rpav> i'm not sure any of these are a case where we shouldn't _just_ have operator=(T&(&))
[23:11:42] <Alipha> rpav: you mean, get rid of copy/move constructors?
[23:11:52] <rpav> right
[23:11:56] <PJBoy> references and consts
[23:12:19] *** Quits: proller (~p@62.76.32.253) (Ping timeout: 268 seconds)
[23:12:31] <PJBoy> and anything else non default constructible
[23:12:35] <Alipha> And having to default construct the object first, which is non-optimal and may not be possible
[23:14:52] <PJBoy> but it's true that you can define the copy/move ctor in terms of default ctor + copy/move assignment in most cases
[23:15:03] <Alipha> Someone should propose `void swap(Foo&) = default;`
[23:15:30] <PJBoy> can even delegate the copy/move ctors to the default ctor and add the assignment in the ctor body
[23:16:02] <PJBoy> would that swap to memberwise swap or std::swap?
[23:16:05] <PJBoy> *do
[23:16:20] <Alipha> PJBoy: member-wise
[23:16:38] <PJBoy> maybe then
[23:18:20] <Alipha> Then you could have `Foo& operator=(const Foo &) = use_swap;` and `Foo& operator=(Foo &&) = use_swap;`
[23:19:09] <PJBoy> that would just be weird though
[23:19:13] <Alipha> Lol
[23:19:29] <PJBoy> [p2187]
[23:19:29] <npaperbot> P2187R5: [Library Evolution] std::swap_if, std::predictable <https://wg21.link/p2187r5> (by Nathan Myers) (2020-10-19) (Related: https://wg21.link/p2187r5/github)
[23:19:41] <PJBoy> what's the deal with this one
[23:20:01] <rpav> Alipha: but if assignment operators were defined _as constructing_ an object
[23:20:26] <PJBoy> it proposes using `swap_if(bool_expr, left, right)` instead of `if (bool_expr) swap(left, right)`
[23:20:47] <rpav> i feel like the main excuses we have two are entirely because of dubious decisions elsewhere
[23:21:01] <PJBoy> construction and assignment are two different things though
[23:21:14] <PJBoy> one has already constructed objects to work with, the other doesn't
[23:21:38] <rpav> oh yeah i imlemented a swap_if somewhere .. i think it was for swapping physics entities (which you get, randomly) to try and order them as like `dynamic, static` (e.g. mob, wall)
[23:22:39] <PJBoy> I don't see the point
[23:23:18] <rpav> auto [dyn, wall] = swap_if(isWall(a), a, b);
[23:23:42] <PJBoy> ok that's more interesting
[23:24:03] <Alipha> Why bother putting something so trivial into the std
[23:24:07] <PJBoy> that's actually pretty neat
[23:24:13] <rpav> Alipha: because it's stupid you have to write it
[23:24:28] *** Joins: proller (~p@2a02:6b8:b081:a428::1:25)
[23:24:42] <PJBoy> the proposed one returns bool though
[23:24:47] <PJBoy> letting you know if the swap happened
[23:24:56] <rpav> it may be very simple to write, but not having it is dumb .. in no small part because _because_ it's simple to write, it should already be written
[23:25:03] <rpav> PJBoy: oh yeah i think mine does too
[23:25:12] <rpav> in fact i pass that to other functions which need it
[23:25:22] <PJBoy> ah that's not cool at all then
[23:25:36] <PJBoy> you don't get your cool structured bindings initialisation
[23:25:48] <rpav> of course you do .. `auto [dyn, wall, swapped] = swap_if(...)`
[23:25:56] <PJBoy> oh
[23:26:03] <PJBoy> I meant the proposed one just returns bool
[23:26:08] <PJBoy> and nothing else
[23:26:33] <rpav> template<typename T> std::tuple<T, T, bool> swap_if(T &&a, T &&b, const std::function<bool()>& test) { if(test()) return {b, a, true}; return {a, b, false}; }
[23:26:47] <rpav> ^ my impl, though i haven't checked it in years so it may be fucked somehow ;)
[23:26:59] <PJBoy> ah so that doesn't even swap the actual objects
[23:27:03] <rpav> PJBoy: oh the proposal is dumb then
[23:27:07] <PJBoy> that's cool in its own right
[23:27:13] <PJBoy> but completely different than the proposal
[23:27:18] <rpav> oh right, std::swap like .. swaps contents
[23:27:49] <rpav> i'm not sure why you'd swap_if contents when you could if(..) swap(a,b);
[23:27:58] <Alipha> You could return an object that defines operator bool and defines structured bindings so that you can choose which you want ;-)
[23:27:58] <PJBoy> exactly
[23:28:15] <PJBoy> the rationale is a bit questionable
[23:28:43] <PJBoy> seems like something that should be a compiler optimisation
[23:29:30] <Alipha> I'm disappointed that a single class/type can't define multiple structured bindings based upon the number of variables the user specifies in their auto[...] list
[23:30:07] <PJBoy> pattern matching might fix that?
[23:31:16] <rpav> Alipha: howso
[23:31:23] <rpav> i'm disappointed you have to bind all the things ;P
[23:31:39] <Alipha> rpav: well, that's a similar complaint
[23:31:50] <rpav> oh, if you mean custom structured bindings then that would be neat .. though now that you mention it, possibly implementable 🤔
[23:32:18] <rpav> longstruct.abbrev() -> tuple<int&,int&> or something
[23:32:23] <Alipha> Being able to do `auto [dyn, wall, swapped] = swap_if(...)` or  `auto [dyn, wall] = swap_if(...)`
[23:32:28] <rpav> though wait no
[23:32:38] <rpav> temporary lifetime extension wouldn't reach back that far i think
[23:32:56] <rpav> lifetime extension rules suck, news at 11
[23:33:46] <PJBoy> the fact that they exist at all
[23:35:18] <Friithian> any of you have suggestions for an svg lib for simple ish things (I am trying to rewrite https://github.com/amandaghassaei/LaserCutRecord/blob/master/LaserCutRecord.pde but in C++) also libs that can do audio convertion to wav would be helpful
[23:38:47] <Friithian> and yes the more I think about this project the more I figure out how difficult it will be but I do not care
[23:39:07] *** Quits: eoeek (~eoeek@178.49.152.42) (Quit: Client closed)
[23:46:19] *** Quits: RPNX (RPNX@gateway/vpn/protonvpn/rpnx) (Read error: Connection reset by peer)
[23:46:35] *** Joins: RPNX (RPNX@gateway/vpn/protonvpn/rpnx)
[23:48:58] <cart_man> Alipha: Sorry my bad -> https://wandbox.org/permlink/lbZVeLvpUxez953j
[23:50:57] <cart_man> Alipha: It seems like the erase on the iterator doesn't remove in sequence
[23:51:26] *** Joins: darkstardevx (~darkstard@50.39.115.145)
[23:51:53] <PJBoy> that's the classic erase loop bug
[23:52:14] <PJBoy> and one of the motivations for the erase-remove idiom / std::erase
[23:52:53] *** Quits: darkstardevx (~darkstard@50.39.115.145) (Remote host closed the connection)
[23:53:07] <PJBoy> cart_man, https://wandbox.org/permlink/n6VqT15yHTrl2nkA
[23:53:19] *** Joins: darkstardevx (~darkstard@50.39.115.145)
[23:54:10] <cart_man> PJBoy: It is an actual bug in STD?
[23:54:18] <PJBoy> not at all
[23:54:32] <PJBoy> erase invalidates the iterator to the erased element
[23:54:43] <PJBoy> which is what you attempt to increment in the for loop
[23:54:46] <cart_man> Ok that makes sense
[23:55:34] <PJBoy> (and the return value of erase is the iterator to the next element)
[23:56:12] <Alipha> cart_man: if you can use c++20, I'd recommend std::erase or std::erase_if instead. Or, for your particular example, simply `con.erase(con.begin(), con.begin() + 5);`
