[00:03:22] *** Quits: tuskkk____ (uid18470@id-18470.tinside.irccloud.com) (Quit: Connection closed for inactivity)
[00:08:06] *** Joins: jrua (~jrua@79.97.146.200)
[00:09:06] *** Quits: kinlo (~peter@user/kinlo) (Ping timeout: 245 seconds)
[00:12:40] *** Quits: tatarqa (~kli@ip-89-177-122-45.net.upcbroadband.cz) (Quit: Leaving)
[00:18:32] *** Joins: kinlo (~peter@user/kinlo)
[00:21:21] *** Joins: sudoforge (~sudoforge@wireguard/tunneler/sudoforge)
[00:23:44] *** Quits: stmuk (~steve@15.43.187.81.in-addr.arpa) (Quit: WeeChat 3.2)
[00:23:59] *** Joins: stmuk (~steve@15.43.187.81.in-addr.arpa)
[00:24:52] *** Joins: absc (~absc@dynamic-adsl-94-34-165-20.clienti.tiscali.it)
[00:27:37] *** Quits: rendar (~rendar@user/rendar) (Quit: Leaving)
[00:34:25] *** Quits: shka (~herr@109.231.0.226) (Ping timeout: 256 seconds)
[00:34:54] *** Joins: krux02 (~krux02@p200300e8170d4f00004bdf5557be8ad9.dip0.t-ipconnect.de)
[00:40:17] *** Joins: _mikey (~mikey@user/mikey/x-4335048)
[00:44:09] *** Quits: bkircher (~bkircher@2001:a61:24c9:9301:c70b:7b10:9434:b399) (Ping timeout: 256 seconds)
[00:44:48] *** Parts: Guest4995 (~xxx@lfbn-bor-1-430-168.w86-213.abo.wanadoo.fr) ()
[00:45:06] *** Joins: gonoob (~xxx@lfbn-bor-1-430-168.w86-213.abo.wanadoo.fr)
[00:46:30] <gonoob> hi, is there a canonical way to write a function which can send an arbitrary number of objects in a chan?  (and, is it even a good idea/practice?)
[00:47:45] <foobaz> yes, use a for loop
[00:49:47] <gonoob> sorry I wasn't clear:  I want the function to be able to send this amount of data without waiting the received to unroll them one by one;  but I also don't want to specify the chan buffer size at its creation time since at this very moment I don't have any idea how much data I'll need to send later
[00:49:56] <gonoob> receiver*
[00:51:21] <foobaz> do the sending in a new goroutine, that way it doesn't matter if it blocks waiting for the receiver
[00:51:25] <gl> does this make any sense?  sorry but my english is bad and my go even worse
[00:51:27] *** Quits: crashrep (~crashrep@user/crashrep) (Quit: WeeChat 3.4)
[00:51:55] <gonoob> gl: to me it does :-)
[00:52:35] <gonoob> foobaz: oh right, I'll try that, thank you!
[00:53:28] *** Joins: blinux (~blinux@pool-72-78-144-199.phlapa.fios.verizon.net)
[00:53:47] *** Quits: mikoto-chan (~mikoto-ch@213.177.151.239) (Ping timeout: 256 seconds)
[00:55:28] *** Joins: bluedust (~bluedust@117.193.122.44)
[00:57:23] <rewt> that would need another channel, which needs a size specified... if something blocks, you need a buffer if you don't want it to block upstream
[00:57:57] *** Quits: art_vandelay (~art_vande@142.126.234.156) (Quit: Textual IRC Client: www.textualapp.com)
[00:59:48] *** Quits: dr0n|aw (~nabromov@176.26.119.61) (Quit: WeeChat 3.3)
[01:09:41] <Tv_> gonoob: generally, channels should not be visible in APIs. the one exception is when your caller will be using `select`
[01:10:06] *** Quits: i_am_beets (~i_am_beet@user/i-am-beets/x-8367380) (Remote host closed the connection)
[01:12:29] <foobaz> the main API i use that exposes a channel is time.Timer, and i do indeed use it in select{}
[01:13:00] <foobaz> but as a counterpoint, how about signal.Notify()? it takes a channel
[01:21:10] *** Quits: jpw (~jpw@user/jpw) (Remote host closed the connection)
[01:22:26] *** Quits: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com) (Quit: Leaving)
[01:26:51] *** Joins: bluedust_ (~bluedust@86.106.136.217)
[01:29:37] *** Quits: bluedust (~bluedust@117.193.122.44) (Ping timeout: 240 seconds)
[01:29:40] *** Joins: greypw254 (~greypw2@grey.pw)
[01:30:30] *** Joins: bluedust (~bluedust@117.193.122.44)
[01:31:59] *** Quits: teasea (~teasea@user/teasea) (Quit: teasea)
[01:33:02] *** Joins: teasea (~teasea@user/teasea)
[01:34:21] *** Joins: phylaz (~phylaz@82.51-174-55.customer.lyse.net)
[01:34:35] *** Quits: bluedust_ (~bluedust@86.106.136.217) (Ping timeout: 256 seconds)
[01:35:32] *** Quits: epony (epony@user/epony) (Ping timeout: 240 seconds)
[01:37:49] *** Joins: art_vandelay (~art_vande@142.126.234.156)
[01:39:26] *** Quits: lilgopher (~textual@2601:241:8000:38f0:e564:312d:a7a1:2956) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[01:39:35] *** Joins: neo (~Neo@user/neo)
[01:42:23] *** Joins: tofran (~tofran@bl15-47-228.dsl.telepac.pt)
[01:49:50] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:4003:8970:d961:ff06)
[01:52:42] *** Joins: nmollerup (~nmollerup@2a00:7660:1612:168:17cc:cba1:478d:92b2)
[01:54:11] *** Joins: lilgopher (~textual@2601:241:8000:38f0:e564:312d:a7a1:2956)
[02:03:09] *** Quits: nitrix (~nitrix@user/nitrix) (Ping timeout: 256 seconds)
[02:07:10] *** Joins: nitrix (~nitrix@user/nitrix)
[02:12:28] *** Joins: gsilvapt (~gsilvapt@2001:8a0:ebdf:e000:8c35:6508:35b1:435e)
[02:14:01] *** Joins: todd (~todd@gateway/tor-sasl/toddf)
[02:21:34] *** Quits: nitrix (~nitrix@user/nitrix) (Quit: ZNC 1.8.2 - https://znc.in)
[02:22:34] *** Joins: nitrix (~nitrix@user/nitrix)
[02:25:20] *** Quits: bluedust (~bluedust@117.193.122.44) (Remote host closed the connection)
[02:25:27] *** Joins: sdfgsdfg (~dfghsfgs@user/sdfgsdfg)
[02:26:40] *** Quits: lilgopher (~textual@2601:241:8000:38f0:e564:312d:a7a1:2956) (Quit: Textual IRC Client: www.textualapp.com)
[02:27:19] *** Quits: gsilvapt (~gsilvapt@2001:8a0:ebdf:e000:8c35:6508:35b1:435e) (Quit: Leaving)
[02:31:21] *** Joins: qrpnxz (abc4f95c31@user/qrpnxz)
[02:44:13] *** Joins: crashrep (~crashrep@user/crashrep)
[02:44:29] *** Quits: absc (~absc@dynamic-adsl-94-34-165-20.clienti.tiscali.it) (Quit: Leaving)
[02:45:18] *** Quits: jrua (~jrua@79.97.146.200) (Remote host closed the connection)
[02:48:52] *** Joins: epony (epony@user/epony)
[02:49:20] *** Quits: mrig (~mrig@user/mrig) (Quit: WeeChat 2.8)
[02:51:42] *** Quits: nitrix (~nitrix@user/nitrix) (Quit: ZNC 1.8.2 - https://znc.in)
[02:59:20] *** Quits: neo (~Neo@user/neo) (Quit: Leaving)
[03:03:32] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:4003:8970:d961:ff06) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[03:07:29] *** Joins: impermanence (~impermane@c-75-73-193-204.hsd1.mn.comcast.net)
[03:27:02] *** Quits: qrpnxz (abc4f95c31@user/qrpnxz) (Ping timeout: 268 seconds)
[03:34:45] *** Quits: NCS_One (~NCS_One@bl11-90-133.dsl.telepac.pt) (Quit: Lost terminal)
[03:40:06] *** Quits: crashrep (~crashrep@user/crashrep) (Ping timeout: 276 seconds)
[03:44:18] *** Quits: catern (~sbaugh@2604:2000:8fc0:b:a9c7:866a:bf36:3407) (Read error: Connection reset by peer)
[03:50:43] *** Joins: nitrix (~nitrix@user/nitrix)
[03:55:02] *** Quits: nitrix (~nitrix@user/nitrix) (Remote host closed the connection)
[03:56:24] *** Joins: nitrix (~nitrix@user/nitrix)
[03:59:25] *** Quits: nitrix (~nitrix@user/nitrix) (Client Quit)
[04:00:23] *** Joins: shep (~bob@bob.4kb.com)
[04:00:26] *** Joins: nitrix (~nitrix@user/nitrix)
[04:01:15] *** Joins: independent56 (~independe@2.26.38.138)
[04:02:07] *** Parts: shep (~bob@bob.4kb.com) ()
[04:19:13] *** Joins: rcernin (~rcernin@101.189.141.138)
[04:20:06] *** Joins: fsoc (~shynerd@bison.alphaw0lf.xyz)
[04:20:59] *** Joins: Compy (~compy@user/compy)
[04:29:01] *** Joins: jjonah (~jjonah@p200300d5d727ec00dea632fffeb3342f.dip0.t-ipconnect.de)
[04:32:50] *** Quits: rcernin (~rcernin@101.189.141.138) (Quit: WeeChat 3.4)
[04:36:37] *** Quits: krux02 (~krux02@p200300e8170d4f00004bdf5557be8ad9.dip0.t-ipconnect.de) (Remote host closed the connection)
[04:38:26] *** Joins: chenqisu1 (~chenqisu1@183.217.200.249)
[04:40:19] *** Quits: itsalexjones (~itsalexjo@82.4.99.241) (Read error: Connection reset by peer)
[04:41:18] *** Joins: rcernin (~rcernin@101.189.141.138)
[04:41:54] *** Joins: hanzo (uid532183@user/hanzo)
[04:45:25] *** Joins: mickey83 (~user@user/mickey)
[04:45:45] *** Quits: mickey8 (~user@user/mickey) (Remote host closed the connection)
[04:45:48] *** mickey83 is now known as mickey8
[04:46:01] *** Quits: predmijat (~predmijat@mail.strogopro.com) (Quit: bye)
[04:46:50] *** Quits: mosen (~mosen@159-196-125-15.9fc47d.syd.static.aussiebb.net) (Quit: Textual IRC Client: www.textualapp.com)
[04:47:36] *** Joins: predmijat (~predmijat@mail.strogopro.com)
[04:50:55] *** Quits: sdfgsdfg (~dfghsfgs@user/sdfgsdfg) (Quit: ayo yoyo ayo yoyo hololo, hololo.)
[04:52:30] *** Quits: Midjak (~Midjak@may53-1-78-226-116-92.fbx.proxad.net) (Quit: This computer has gone to sleep)
[04:55:40] *** Joins: crashrep (~crashrep@user/crashrep)
[05:04:22] <fsoc> Is type assertions only way we can call the underlying concrete type methods of an interface type? Like, `some_variable.(MyConcreteType).SomeMethod()`? Is there a way we can do this using type casting? (Like in C for example?) I tried `ConcreteType(some_variable).SomeMethod()` but it doesn't work. It produces compile-time error "cannot indirect interface type ConcreteType of variable type InterfaceType".
[05:04:51] <fsoc> *the only way
[05:06:19] *** Quits: leonarth (~leonarth@user/leonarth) (Quit: 84R6CDo3S62HkuYSkVXBr7fXp2wn1XRHeQZ8QPrqxbXvfXP33EH4MhueE2ifPcRbbQQhVXPheMD957muhhBtrvs2QKykeA3)
[05:08:37] <bookworm> there's reflection, but why do you want to cast when you can assert?
[05:08:42] <bookworm> you need to test for it anyhow
[05:09:11] <bookworm> if you need to route certain things, use a type switch
[05:09:59] *** Joins: lilgopher (~textual@2601:241:8000:38f0:e564:312d:a7a1:2956)
[05:10:17] *** Quits: independent56 (~independe@2.26.38.138) (Ping timeout: 240 seconds)
[05:11:05] <fsoc> bookworm: I was just curious if there's another way.
[05:11:48] <fsoc> Similar to C-style casting.
[05:12:17] <bookworm> go has conversions and type assertions, no casts iirc
[05:12:43] <bookworm> yup
[05:18:46] *** Quits: koolazer (~koo@user/koolazer) (Remote host closed the connection)
[05:20:04] *** Quits: khyr0n (~khyr0n@2806:10be:6:61e2:a383:acc7:1c75:f44c) (Quit: Leaving)
[05:20:57] *** Quits: clarjon1 (~clarjon1@user/clarjon1) (Read error: Connection reset by peer)
[05:21:51] *** Joins: moog (~moog@107.126.53.132)
[05:27:16] <castlelore> hello #go-nuts! Would a custom XML Marshaller be a good approach for merging two XML documents of similar structure?
[05:35:08] *** Quits: Seirdy (~Seirdy@sourcehut/user/seirdy) (Quit: exiting 3.4)
[05:35:40] *** Joins: Seirdy (~Seirdy@sourcehut/user/seirdy)
[05:36:08] <castlelore> or maybe go-xslt?
[05:40:17] *** Quits: rcernin (~rcernin@101.189.141.138) (Ping timeout: 240 seconds)
[05:43:24] *** Quits: veegee (~veegee@ipagstaticip-469c2903-2b07-6dc3-3bc2-98748da5ca77.sdsl.bell.ca) (Read error: Connection reset by peer)
[05:44:09] *** Quits: neurocyte0917090 (~neurocyte@user/neurocyte) (Ping timeout: 256 seconds)
[05:44:36] *** Quits: salem (~salem@pool-98-111-206-141.pitbpa.fios.verizon.net) (Quit: ZNC 1.8.2 - https://znc.in)
[05:45:56] *** Joins: salem (~salem@pool-98-111-206-141.pitbpa.fios.verizon.net)
[05:46:05] *** Quits: Seirdy (~Seirdy@sourcehut/user/seirdy) (Ping timeout: 256 seconds)
[05:48:43] *** Joins: califax- (~califax@user/califx)
[05:52:23] *** Joins: leonthemisfit (~Leon@85.sub-174-198-194.myvzw.com)
[05:52:23] *** Quits: leonthemisfit (~Leon@85.sub-174-198-194.myvzw.com) (Changing host)
[05:52:23] *** Joins: leonthemisfit (~Leon@user/leonthemisfit)
[05:53:14] *** Joins: Seirdy (~Seirdy@sourcehut/user/seirdy)
[05:53:21] *** Quits: califax (~califax@user/califx) (Ping timeout: 276 seconds)
[05:53:22] *** califax- is now known as califax
[05:53:43] *** Joins: cstls (~ruiner@cpe-67-240-187-167.rochester.res.rr.com)
[05:55:50] *** Joins: Guest40 (~Guest40@2600:1700:232b:6110:f120:afd4:c6b9:f7f4)
[05:58:26] *** Quits: jjonah (~jjonah@p200300d5d727ec00dea632fffeb3342f.dip0.t-ipconnect.de) (Remote host closed the connection)
[05:59:27] *** Quits: Seirdy (~Seirdy@sourcehut/user/seirdy) (Ping timeout: 256 seconds)
[06:02:41] *** Joins: veegee (~veegee@ipagstaticip-469c2903-2b07-6dc3-3bc2-98748da5ca77.sdsl.bell.ca)
[06:04:19] *** Quits: eXtr3m0 (~eXtr3m0@user/eXtr3m0) (Ping timeout: 256 seconds)
[06:04:53] *** Quits: chenqisu1 (~chenqisu1@183.217.200.249) (Ping timeout: 256 seconds)
[06:05:34] *** Joins: Seirdy (~Seirdy@sourcehut/user/seirdy)
[06:06:35] *** Quits: eXtre3m0 (~eXtr3m0@user/eXtr3m0) (Ping timeout: 256 seconds)
[06:13:28] *** Joins: Seirdy0 (~Seirdy@sourcehut/user/seirdy)
[06:15:37] *** Quits: Seirdy (~Seirdy@sourcehut/user/seirdy) (Ping timeout: 240 seconds)
[06:21:00] *** Quits: cync (~blah@192.180.187.81.in-addr.arpa) (Quit: No Ping reply in 180 seconds.)
[06:22:12] *** Joins: cync (~blah@192.180.187.81.in-addr.arpa)
[06:24:13] *** Joins: rcernin (~rcernin@101.189.141.138)
[06:47:00] *** Quits: goldfish (~goldfish@user/goldfish) (Ping timeout: 250 seconds)
[06:48:41] *** Quits: cstls (~ruiner@cpe-67-240-187-167.rochester.res.rr.com) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[06:49:53] *** Quits: rcernin (~rcernin@101.189.141.138) (Ping timeout: 256 seconds)
[06:50:01] *** Quits: crashrep (~crashrep@user/crashrep) (Quit: WeeChat 3.4)
[06:54:38] *** Joins: masoudd (~masoudd@user/masoudd)
[06:55:56] *** Joins: rcernin (~rcernin@101.189.141.138)
[06:57:29] *** Quits: Tv_ (uid62079@user/tv/x-3144562) (Quit: Connection closed for inactivity)
[06:58:40] *** Quits: k8yun (~k8yun@198-48-158-40.cpe.pppoe.ca) (Quit: Leaving)
[06:59:10] *** Joins: k8yun (~k8yun@198-48-158-40.cpe.pppoe.ca)
[07:01:56] *** Joins: masoudd_ (~masoudd@user/masoudd)
[07:03:57] *** Quits: masoudd (~masoudd@user/masoudd) (Ping timeout: 240 seconds)
[07:19:19] *** Joins: Fuzai (~quassel@50.54.159.160)
[07:19:50] <Fuzai> https://play.golang.com/p/tSTRA9rDX0L is there a way to catch the address of a result without assignment to a variable first? ( line 12 )
[07:22:13] <b0nn> return types from functions are not addressable, no, so you do need to store them first
[07:22:16] <b0nn> buuuuuuut
[07:22:46] <b0nn> a slice is a struct with a len, cap, and pointer to the backing array, so
[07:23:10] <b0nn> Are you trying to get the address of the backing array *or* the address of the slice structure
[07:24:06] *** Joins: boingolov (~nastynate@99.26.180.217)
[07:24:06] <Fuzai> slice stucture
[07:24:16] *** Joins: unl0ckd (~unl0ckdma@2001:470:69fc:105::15e6)
[07:24:39] <Fuzai> I'm trying to append to a handful of buffers I want to pass by reference to a function
[07:24:56] *** Quits: unl0ckd (~unl0ckdma@2001:470:69fc:105::15e6) (Changing host)
[07:24:56] *** Joins: unl0ckd (~unl0ckdma@user/unl0ckd)
[07:26:10] <b0nn> Ok, no, you have to ask what the slice structures address is once append has done its work
[07:27:24] <Fuzai> Ok, ty :) I didn't know that slices had a cap and len and their pointer in a struct, that is pretty neat and explains why those functions return so fast
[07:28:03] <b0nn> https://play.golang.com/p/g8DXu2G8BZ1
[07:28:48] <b0nn> I'm not 100% sure what you're asking for, the backing array will change but not the address to the slice struct
[07:29:06] <b0nn> you can pass pointers to the slice struct too
[07:29:55] <b0nn> (which is helpful if one of the functions changes the backing array, because you have a pointer to the slice struct, all users will be updated with the knowledge of the backing array change
[07:30:10] <b0nn> but, brings with it concurrency issues
[07:31:31] <Fuzai> I think you just answered what I was looking for in the first place, with your code example, thank you
[07:31:43] *** Quits: hanzo (uid532183@user/hanzo) (Quit: Connection closed for inactivity)
[07:37:40] *** Quits: arkurious (~arkurious@user/arkurious) (Quit: Leaving)
[07:41:36] *** Quits: solifugus (~solifugus@2603-7080-7a07-ac2a-c9a9-fd6e-cc88-1337.res6.spectrum.com) (Ping timeout: 250 seconds)
[07:42:35] *** Quits: Guest40 (~Guest40@2600:1700:232b:6110:f120:afd4:c6b9:f7f4) (Ping timeout: 256 seconds)
[07:54:00] *** masoudd_ is now known as masoudd
[07:59:23] *** Joins: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com)
[08:10:22] *** Joins: Guest40 (~Guest40@2600:1700:232b:6110:f120:afd4:c6b9:f7f4)
[08:25:39] *** Quits: lemonsnicks (~lemonsnic@cpc159519-perr18-2-0-cust114.19-1.cable.virginm.net) (Ping timeout: 256 seconds)
[08:28:25] *** Quits: seebs (~seebs@24.196.59.174) (Quit: Leaving)
[08:28:36] *** Quits: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com) (Quit: Leaving)
[08:30:22] *** Joins: fsoc_ (~shynerd@bras-vprn-toroon4834w-lp130-08-174-91-44-54.dsl.bell.ca)
[08:33:15] *** Quits: fsoc (~shynerd@bison.alphaw0lf.xyz) (Ping timeout: 256 seconds)
[08:35:00] *** Quits: RhinosF1 (uid339563@miraheze/RhinosF1) (Quit: Connection closed for inactivity)
[08:46:10] *** Quits: _mikey (~mikey@user/mikey/x-4335048) (Remote host closed the connection)
[08:48:53] *** Quits: Guest40 (~Guest40@2600:1700:232b:6110:f120:afd4:c6b9:f7f4) (Ping timeout: 256 seconds)
[08:52:07] *** Joins: _mikey (~mikey@user/mikey/x-4335048)
[08:57:29] *** Quits: Seirdy0 (~Seirdy@sourcehut/user/seirdy) (Quit: exiting 3.4)
[08:57:46] *** Joins: Seirdy (~Seirdy@sourcehut/user/seirdy)
[09:10:11] *** Quits: _mikey (~mikey@user/mikey/x-4335048) (Remote host closed the connection)
[09:11:08] *** Joins: _mikey (~mikey@user/mikey/x-4335048)
[09:22:32] *** Quits: k8yun (~k8yun@198-48-158-40.cpe.pppoe.ca) (Quit: Leaving)
[09:23:07] *** Quits: blinux (~blinux@pool-72-78-144-199.phlapa.fios.verizon.net) (Ping timeout: 256 seconds)
[09:23:57] *** Quits: califax (~califax@user/califx) (Ping timeout: 276 seconds)
[09:24:37] *** Quits: normen (~normen@p200300d717235c0008eb322e6cba7aeb.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[09:25:55] *** Joins: califax (~califax@user/califx)
[09:35:17] *** Quits: Church (~aleph@pool-98-116-232-112.nycmny.fios.verizon.net) (Quit: WeeChat info:version)
[09:38:46] *** Joins: Church (~aleph@pool-98-116-232-112.nycmny.fios.verizon.net)
[09:39:33] *** Quits: transacid (~transacid@transacid.de) (Ping timeout: 256 seconds)
[09:44:50] *** Joins: transacid (~transacid@transacid.de)
[09:50:11] *** Quits: mickey8 (~user@user/mickey) (Quit: Ping timeout (120 seconds))
[09:50:30] *** Joins: mickey8 (~user@user/mickey)
[09:51:16] *** Joins: normen (~normen@p200300d717235c00d1876df7519e3614.dip0.t-ipconnect.de)
[10:00:47] *** Joins: k8yun (~k8yun@198-48-158-40.cpe.pppoe.ca)
[10:02:38] *** Joins: Atque (~Atque@user/atque)
[10:02:50] *** Quits: Atque (~Atque@user/atque) (Client Quit)
[10:03:32] *** Joins: jpw (~jpw@user/jpw)
[10:05:20] *** Quits: mickey8 (~user@user/mickey) (Quit: Ping timeout (120 seconds))
[10:05:34] *** Joins: mickey8 (~user@user/mickey)
[10:08:27] *** Quits: GJdan (~quassel@107-190-26-133.cpe.teksavvy.com) (Ping timeout: 256 seconds)
[10:09:05] *** Joins: GJdan (~quassel@167.114.84.133)
[10:10:51] *** Joins: Atque (~Atque@user/atque)
[10:18:17] *** Quits: sudoforge (~sudoforge@wireguard/tunneler/sudoforge) (Ping timeout: 240 seconds)
[10:18:59] *** Quits: GJdan (~quassel@167.114.84.133) (Ping timeout: 256 seconds)
[10:19:17] *** Joins: GJdan (~quassel@107-190-26-133.cpe.teksavvy.com)
[10:27:52] *** Joins: seebs (~seebs@24.196.59.174)
[10:37:49] *** Joins: mikoto-chan (~mikoto-ch@213.177.151.239)
[10:43:51] *** Quits: Compy (~compy@user/compy) (Quit: Going offline, see ya! (www.adiirc.com))
[10:46:13] *** Joins: independent56 (~independe@2.26.38.138)
[10:50:43] *** Quits: jespada (~jespada@87.74.36.188) (Ping timeout: 256 seconds)
[10:55:28] *** Joins: jespada (~jespada@87.74.36.188)
[11:04:44] *** Quits: todd (~todd@gateway/tor-sasl/toddf) (Remote host closed the connection)
[11:09:52] *** Joins: imm__ (~imm_@user/imm/x-3405860)
[11:10:19] *** Quits: imm_ (~imm_@user/imm/x-3405860) (Ping timeout: 256 seconds)
[11:10:33] *** Joins: todd (~todd@gateway/tor-sasl/toddf)
[11:12:52] *** Joins: mrig (~mrig@user/mrig)
[11:20:31] *** imm__ is now known as imm_
[11:20:41] *** Joins: sdfgsdfg (~dfghsfgs@user/sdfgsdfg)
[11:22:55] *** Joins: bluedust (~bluedust@117.193.122.44)
[11:24:37] *** Quits: Fuzai (~quassel@50.54.159.160) (Ping timeout: 240 seconds)
[11:27:13] *** Joins: Fuzai (~quassel@50.54.159.160)
[11:33:21] *** Joins: independent_ (~independe@2.26.38.138)
[11:33:55] *** Quits: independent56 (~independe@2.26.38.138) (Read error: Connection reset by peer)
[11:36:40] *** Joins: chenqisu1 (~chenqisu1@183.217.200.249)
[11:41:31] *** Joins: RhinosF1 (uid339563@miraheze/RhinosF1)
[11:42:51] *** Joins: Natch (~natch@c-4db8e255.014-297-73746f25.bbcust.telenor.se)
[11:45:07] *** Quits: rcernin (~rcernin@101.189.141.138) (Ping timeout: 256 seconds)
[11:53:01] *** Joins: sumi (~dos@39.191.202.62.dynamic.cgnat.res.cust.swisscom.ch)
[11:53:39] *** Parts: sumi (~dos@39.191.202.62.dynamic.cgnat.res.cust.swisscom.ch) ()
[11:53:42] *** Quits: Fuzai (~quassel@50.54.159.160) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[11:56:45] *** Joins: rcernin (~rcernin@101.189.141.138)
[12:01:18] *** Joins: rendar (~rendar@user/rendar)
[12:01:35] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[12:02:30] *** Joins: Atque (~Atque@user/atque)
[12:02:58] *** Joins: bkircher (~bkircher@2001:a61:24c9:9301:c70b:7b10:9434:b399)
[12:15:23] *** Quits: holgersson (~quassel@user/holgersson) (Quit: “Format C:........[Done]“)
[12:18:48] *** Quits: bindu (~bindu@user/bindu) (Ping timeout: 276 seconds)
[12:20:26] *** Joins: bindu (~bindu@user/bindu)
[12:25:09] *** Joins: masoudd_ (~masoudd@user/masoudd)
[12:26:09] *** Quits: masoudd (~masoudd@user/masoudd) (Ping timeout: 256 seconds)
[12:27:03] *** Quits: rcernin (~rcernin@101.189.141.138) (Ping timeout: 256 seconds)
[12:28:15] *** Joins: ert (~ert@2001:4b99:1:1:216:3eff:fee5:446f)
[12:30:27] *** Quits: k8yun (~k8yun@198-48-158-40.cpe.pppoe.ca) (Ping timeout: 256 seconds)
[12:31:11] *** Quits: masoudd_ (~masoudd@user/masoudd) (Remote host closed the connection)
[12:32:41] *** Joins: masoudd (~masoudd@user/masoudd)
[12:38:36] *** Joins: rcernin (~rcernin@101.189.141.138)
[12:45:02] *** Joins: shka (~herr@109.231.0.226)
[12:46:27] *** Joins: edd_lc (~edd_lc@85.64.225.197.dynamic.barak-online.net)
[12:50:39] *** Joins: leonarth (~leonarth@user/leonarth)
[12:54:01] *** Joins: Midjak (~Midjak@may53-1-78-226-116-92.fbx.proxad.net)
[12:56:46] *** Joins: bluedust_ (~bluedust@194.37.96.121)
[12:59:57] *** Quits: bluedust (~bluedust@117.193.122.44) (Ping timeout: 240 seconds)
[13:00:16] *** Joins: bluedust (~bluedust@117.193.122.44)
[13:00:26] *** Quits: rendar (~rendar@user/rendar) (Quit: Leaving)
[13:03:33] *** Quits: bluedust_ (~bluedust@194.37.96.121) (Ping timeout: 256 seconds)
[13:07:56] *** Quits: sdfgsdfg (~dfghsfgs@user/sdfgsdfg) (Quit: ayo yoyo ayo yoyo hololo, hololo.)
[13:08:11] *** Quits: chenqisu1 (~chenqisu1@183.217.200.249) (Ping timeout: 256 seconds)
[13:09:14] *** Joins: krux02 (~krux02@p200300e8170d4f00004bdf5557be8ad9.dip0.t-ipconnect.de)
[13:39:02] *** Quits: rvalue (~rvalue@user/rvalue) (Quit: ZNC - https://znc.in)
[13:40:18] *** Joins: rvalue (~rvalue@user/rvalue)
[13:46:17] *** Quits: rednul_ (~textual@098-127-178-044.biz.spectrum.com) (Read error: Connection reset by peer)
[13:47:45] *** Joins: holgersson (~quassel@user/holgersson)
[13:48:35] *** Joins: walterwhip (~www@user/walterwhip)
[13:49:44] *** Joins: rubbercable (~rubbercab@2a00:23c5:3181:aa00:6572:59bc:58ae:c17e)
[13:50:57] *** Joins: fef (~thedawn@user/thedawn)
[13:54:17] *** Quits: pepee (~pepee@user/pepee) (Ping timeout: 240 seconds)
[13:56:47] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:4003:8970:d961:ff06)
[13:57:25] *** Joins: masoudd_ (~masoudd@user/masoudd)
[13:57:56] *** Quits: masoudd (~masoudd@user/masoudd) (Killed (NickServ (GHOST command used by masoudd_)))
[13:58:02] *** masoudd_ is now known as masoudd
[14:01:03] *** Joins: zer0bitz (~zer0bitz@2001:2003:f74d:b800:b4e8:6f53:6fdf:55e6)
[14:01:14] *** Joins: mosen (~mosen@159-196-125-15.9fc47d.syd.static.aussiebb.net)
[14:03:33] *** Quits: bluedust (~bluedust@117.193.122.44) (Remote host closed the connection)
[14:12:24] *** Quits: walterwhip (~www@user/walterwhip) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[14:20:57] *** Quits: rcernin (~rcernin@101.189.141.138) (Ping timeout: 256 seconds)
[14:22:26] *** leonarth is now known as anyone
[14:22:28] *** anyone is now known as Guest2572
[14:23:19] *** Joins: rcernin (~rcernin@101.189.141.138)
[14:25:05] *** Joins: rendar (~rendar@user/rendar)
[14:27:26] *** Quits: rubbercable (~rubbercab@2a00:23c5:3181:aa00:6572:59bc:58ae:c17e) (Quit: Leaving)
[14:29:27] *** Quits: rcernin (~rcernin@101.189.141.138) (Ping timeout: 256 seconds)
[14:30:33] *** Guest2572 is now known as leonarth
[14:31:22] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:4003:8970:d961:ff06) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[14:31:23] *** Joins: rcernin (~rcernin@101.189.141.138)
[14:36:29] *** Quits: rcernin (~rcernin@101.189.141.138) (Ping timeout: 256 seconds)
[14:50:14] *** Joins: rcernin (~rcernin@2001:8003:6803:db00:c493:7ae9:a6a2:840e)
[14:53:35] *** Quits: transacid (~transacid@transacid.de) (Ping timeout: 256 seconds)
[15:02:19] *** Quits: Midjak (~Midjak@may53-1-78-226-116-92.fbx.proxad.net) (Ping timeout: 256 seconds)
[15:03:37] *** Quits: edd_lc (~edd_lc@85.64.225.197.dynamic.barak-online.net) (Ping timeout: 240 seconds)
[15:05:08] *** Joins: transacid (~transacid@transacid.de)
[15:11:51] *** Quits: noonien (~noonien@user/noonien) (Quit: The Lounge - https://thelounge.chat)
[15:12:14] *** Joins: noonien (~noonien@user/noonien)
[15:16:36] *** Joins: dr0n (~nabromov@176.26.119.61)
[15:26:11] *** Joins: rcernin_ (~rcernin@101.189.141.138)
[15:29:21] *** Quits: rcernin (~rcernin@2001:8003:6803:db00:c493:7ae9:a6a2:840e) (Ping timeout: 250 seconds)
[15:33:32] *** Joins: rabbit- (rabbit-@119-18-29-214.77121d.mel.static.aussiebb.net)
[15:34:23] *** Quits: rcernin_ (~rcernin@101.189.141.138) (Ping timeout: 256 seconds)
[15:36:42] *** Joins: independent56 (~independe@2.26.38.138)
[15:39:09] *** Quits: independent_ (~independe@2.26.38.138) (Ping timeout: 256 seconds)
[15:44:34] *** Joins: lemonsnicks (~lemonsnic@cpc159519-perr18-2-0-cust114.19-1.cable.virginm.net)
[15:45:54] *** Quits: rabbit- (rabbit-@119-18-29-214.77121d.mel.static.aussiebb.net) (Remote host closed the connection)
[15:46:11] *** Joins: rabbit- (rabbit-@119-18-29-214.77121d.mel.static.aussiebb.net)
[15:48:57] *** Joins: NCS_One (~NCS_One@bl11-90-133.dsl.telepac.pt)
[15:58:01] *** Quits: rabbit- (rabbit-@119-18-29-214.77121d.mel.static.aussiebb.net) (Remote host closed the connection)
[16:04:11] *** Joins: bluedust (~bluedust@117.193.122.44)
[16:08:57] *** Quits: bluedust (~bluedust@117.193.122.44) (Ping timeout: 240 seconds)
[16:13:23] *** Quits: orthoplex64 (~crm@70.120.0.94) (Ping timeout: 256 seconds)
[16:13:59] *** Quits: bkircher (~bkircher@2001:a61:24c9:9301:c70b:7b10:9434:b399) (Quit: Leaving)
[16:18:38] *** Joins: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com)
[16:19:29] <mickey8> is there a way to write something like this in a nicer way? https://dpaste.org/qKnB
[16:19:44] <mickey8> it's a huge hassle to expand it to 25 now for example
[16:20:25] <bookworm> marshal to a map[string]float
[16:20:33] <bookworm> but you'll loose type safety
[16:20:50] <ikke> code generation would be an alternative
[16:21:26] <bookworm> that data structure seems to be suboptimal though, generally
[16:22:04] <bookworm> why can't you just have the data and window over that directly? Why do you need lag-X and lag+x fields?
[16:23:22] *** Joins: rcernin_ (~rcernin@2001:8003:6803:db00:a947:2457:841d:ace4)
[16:28:37] *** Quits: rcernin_ (~rcernin@2001:8003:6803:db00:a947:2457:841d:ace4) (Ping timeout: 240 seconds)
[16:30:15] *** Joins: rcernin_ (~rcernin@2001:8003:6803:db00:a947:2457:841d:ace4)
[16:33:58] <mickey8> bookworm because it has to be marshaled to csv later
[16:34:19] <mickey8> i mean i can feel its done wrong, thats why im asking how to improve
[16:35:01] *** Quits: rcernin_ (~rcernin@2001:8003:6803:db00:a947:2457:841d:ace4) (Ping timeout: 256 seconds)
[16:35:24] *** Quits: carlavilla (~carlavill@188.26.219.45) (Remote host closed the connection)
[16:38:42] <mickey8> the data arrives as json from a python script, and eventually marshaled to a csv file. the python marshaling is straight forward with a dict["lag+%d"] and whatever
[16:40:00] <mickey8> i could go with a custom csv unmarshaler and marshaler i guess, but is that the better way?
[16:40:45] <bookworm> do you control the python script? Then pick a better datastructure than that
[16:41:05] <bookworm> But a map[string]float is essentially the same as you do in python
[16:41:13] <ikke> I would defer transforming to one column per value as late as possible
[16:42:12] <bookworm> I mean, all you need is provide the data no? And an index of the current element. That's one array and a int
[16:42:56] <bookworm> or well, you might not even need the current element when all you do is exhaustively enumerate all possible windows of N over the data
[16:43:13] <bookworm> then just pass an array of floats and off we go
[16:43:58] *** Joins: carlavilla (~carlavill@2a0c:5a84:320d:6900:21f:16ff:fe0f:275a)
[16:44:01] *** Quits: tiferrei (~tiferrei@user/tiferrei) (Remote host closed the connection)
[16:44:25] *** Joins: tiferrei (~tiferrei@user/tiferrei)
[16:51:59] *** Quits: pgloor (~petergloo@bit.cubus.space) (Read error: Connection reset by peer)
[16:52:05] *** Joins: pgloor0 (~petergloo@bit.cubus.space)
[16:54:03] <mickey8> i could easily pass a map[int]float64 around, but that'll require a custom marshaler for csv afterwards. im not saying that's a bad idea, but would you call that a good idea?
[17:01:46] <bookworm> fix the datastructure, everything else is a band aid
[17:02:16] <bookworm> if you can't, first order of business should be to convert it to something sane
[17:05:41] *** Joins: rcernin_ (~rcernin@2001:8003:6803:db00:e8bd:53c1:8d09:96b5)
[17:06:42] *** Joins: cstls (~ruiner@cpe-67-240-187-167.rochester.res.rr.com)
[17:07:38] *** Joins: rcernin (~rcernin@101.189.141.138)
[17:09:01] *** Quits: jespada (~jespada@87.74.36.188) (Ping timeout: 256 seconds)
[17:10:00] *** Quits: pgloor0 (~petergloo@bit.cubus.space) (Quit: The Lounge - https://thelounge.chat)
[17:10:17] *** Quits: rcernin_ (~rcernin@2001:8003:6803:db00:e8bd:53c1:8d09:96b5) (Ping timeout: 240 seconds)
[17:10:33] *** Joins: jespada (~jespada@87.74.36.188)
[17:10:39] *** Joins: pgloor0 (~petergloo@bit.cubus.space)
[17:10:47] *** Joins: bluedust (~bluedust@117.193.122.44)
[17:12:25] <fizzie> I think the key question re that is, is the value in the lag0 column of row N of the CSV the same as the value in the lag-1 column of row N+1? Because I could easily imagine a situation where each row, for example, summarizes an entire frame, or even a separate input. Can't really make that more compact.
[17:15:04] <mickey8> each row is independent
[17:15:31] <bookworm> is the N0 alway sat the same location?
[17:15:41] <bookworm> if so, why bother with a header at all?
[17:15:51] <mickey8> n0? im not sure what you mean here
[17:15:57] <bookworm> (in your go struct)
[17:16:08] <mickey8> you lean lag0?
[17:16:10] <bookworm> yes
[17:17:16] <mickey8> im not sure what "same location" means tbh. i drop data to python to calculate cross correlation at different lags, it's +/- 15 lags right now but i can see myself doing more than that in the near future
[17:17:44] <mickey8> right now python builds a dictionary out of an array, where i,val becomes dict["lag-i"]=val
[17:18:30] <bookworm> the point is, that of that stuff is always symmetrical and doesn't suddenly change offset values [1,2,3,4,5] has the exact same information content as a struct with lag-2 through lag+2
[17:18:57] <bookworm> and you can actually do math with the former pr aggregate or do things
[17:19:06] <bookworm> whereas the struct is horrible to use
[17:19:23] <bookworm> can you? Sure but your code will look strange all the way down
[17:21:38] <bookworm> with the array / slice you wouldn't even need to change the code when you change N in your python script
[17:21:50] *** Joins: bluedust_ (~bluedust@185.248.85.26)
[17:22:52] *** Joins: mrig_ (~mrig@lfbn-cor-1-210-155.w86-211.abo.wanadoo.fr)
[17:22:59] *** Quits: mrig_ (~mrig@lfbn-cor-1-210-155.w86-211.abo.wanadoo.fr) (Client Quit)
[17:24:15] <mickey8> i can pretty much control the order of the array i guess
[17:24:35] <mickey8> and i dont do anything special with it, except marshal it to csv and save it to a file
[17:24:55] <bookworm> you have the headers, so on first iteration of a row you sort and assign the array length based on the input
[17:25:18] *** Quits: bluedust (~bluedust@117.193.122.44) (Ping timeout: 250 seconds)
[17:25:18] <bookworm> then the csv can arrive out of order and you don't care
[17:25:49] <mickey8> i lost you there
[17:26:19] <bookworm> you get a csv offset0,offset-1,offse1
[17:26:29] *** Quits: mrig (~mrig@user/mrig) (Ping timeout: 256 seconds)
[17:26:49] <mickey8> sure but i'd still have to marshal that to a csv somehow eventually
[17:27:03] <bookworm> so in your csv reader you'll get the col headers. Note the lenght, for each of the columns figure out where they should go into a sorted array
[17:27:54] *** Quits: rcernin (~rcernin@101.189.141.138) (Ping timeout: 250 seconds)
[17:28:10] <bookworm> the question is, if you aren't doing anything with it, why feed it to go at all?
[17:29:13] <mickey8> you mean why not save the file from python? because go does other stuff and puts it all together in the same csv
[17:31:22] <mickey8> i could probably get away with this struct thing as well, but id like to improve my writing skills.
[17:42:09] *** Joins: bluedust (~bluedust@117.193.122.44)
[17:43:10] *** Quits: teasea (~teasea@user/teasea) (Quit: teasea)
[17:43:31] *** Joins: teasea (~teasea@user/teasea)
[17:45:11] *** Quits: bluedust_ (~bluedust@185.248.85.26) (Ping timeout: 256 seconds)
[17:50:16] *** Joins: Everything (~Everythin@37.115.210.35)
[17:51:14] *** Joins: leonarth_ (~leonarth@user/leonarth)
[17:52:53] *** Quits: leonarth (~leonarth@user/leonarth) (Killed (NickServ (GHOST command used by leonarth_)))
[17:52:56] *** leonarth_ is now known as leonarth
[17:56:15] *** Quits: leonarth (~leonarth@user/leonarth) (Quit: 84R6CDo3S62HkuYSkVXBr7fXp2wn1XRHeQZ8QPrqxbXvfXP33EH4MhueE2ifPcRbbQQhVXPheMD957muhhBtrvs2QKykeA3)
[18:11:31] *** Joins: mug3n (~mugen@gateway/tor-sasl/mugen)
[18:14:18] *** Joins: goldfish (~goldfish@user/goldfish)
[18:14:36] *** Joins: orthoplex64 (~crm@70.120.0.94)
[18:15:00] *** Quits: mugen (~mugen@gateway/tor-sasl/mugen) (Ping timeout: 276 seconds)
[18:15:49] *** Joins: arkurious (~arkurious@user/arkurious)
[18:16:35] *** Quits: zer0bitz (~zer0bitz@2001:2003:f74d:b800:b4e8:6f53:6fdf:55e6) (Read error: Connection reset by peer)
[18:16:51] *** Joins: zer0bitz (~zer0bitz@2001:2003:f74d:b800:90d6:f3c8:741b:677a)
[18:23:44] *** Joins: Midjak (~Midjak@may53-1-78-226-116-92.fbx.proxad.net)
[18:29:50] *** Joins: k8yun (~k8yun@198-48-158-40.cpe.pppoe.ca)
[18:37:23] *** Quits: fef (~thedawn@user/thedawn) (Remote host closed the connection)
[18:40:17] *** Quits: k8yun (~k8yun@198-48-158-40.cpe.pppoe.ca) (Read error: Connection reset by peer)
[18:40:39] *** Joins: k8yun (~k8yun@198-48-158-40.cpe.pppoe.ca)
[18:42:02] *** Joins: nimu (~nimu@18.29.27.154)
[18:43:07] *** Quits: _xor (~xor@dsl-50-5-233-169.fuse.net) (Quit: WeeChat 3.4)
[18:49:04] *** Joins: Torr (~Torr@user/torr)
[18:50:40] *** Quits: independent56 (~independe@2.26.38.138) (Ping timeout: 250 seconds)
[18:52:57] *** Quits: mosen (~mosen@159-196-125-15.9fc47d.syd.static.aussiebb.net) (Ping timeout: 256 seconds)
[18:56:35] *** Joins: sudoforge (~sudoforge@wireguard/tunneler/sudoforge)
[18:59:39] *** Quits: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com) (Quit: Leaving)
[19:11:19] *** Joins: fef (~thedawn@user/thedawn)
[19:13:54] *** Quits: Torr (~Torr@user/torr) (Quit: leaving)
[19:19:59] *** Joins: Compy (~compy@user/compy)
[19:21:28] *** Joins: independent56 (~independe@2.26.38.138)
[19:22:58] *** Joins: eXtr3m0 (~eXtr3m0@user/eXtr3m0)
[19:26:13] *** Joins: mrig (~mrig@user/mrig)
[19:30:09] *** Joins: larsm (~larsm@2606:54c0:1e20:138::47:347)
[19:32:17] *** Joins: edd_lc (~edd_lc@85.64.225.197.dynamic.barak-online.net)
[19:37:40] *** Joins: tiferrei2000 (~tiferrei@user/tiferrei)
[19:38:07] *** Quits: bluedust (~bluedust@117.193.122.44) (Remote host closed the connection)
[19:38:21] *** Quits: tiferrei (~tiferrei@user/tiferrei) (Remote host closed the connection)
[19:51:07] *** Quits: LtHummus (~lthummus@97-126-121-3.tukw.qwest.net) (Quit: ZNC 1.8.2 - https://znc.in)
[20:02:12] *** Joins: absc (~absc@dynamic-adsl-94-34-165-20.clienti.tiscali.it)
[20:04:10] *** Joins: LtHummus (~lthummus@174-21-27-9.tukw.qwest.net)
[20:13:31] *** Joins: bancroft (~bancroft@user/bancroft)
[20:15:35] *** Quits: larsm (~larsm@2606:54c0:1e20:138::47:347) (Remote host closed the connection)
[20:21:07] *** Joins: sdfgsdfg (~dfghsfgs@user/sdfgsdfg)
[20:21:41] *** Joins: bluedust (~bluedust@117.193.122.44)
[20:21:41] *** Quits: bluedust (~bluedust@117.193.122.44) (Read error: Connection reset by peer)
[20:21:57] *** Joins: bluedust (~bluedust@117.193.122.44)
[20:23:10] *** Joins: rickybob (~rickybob@35.143.255.39)
[20:23:49] *** Quits: rickybob (~rickybob@35.143.255.39) (Read error: Connection reset by peer)
[20:25:19] *** Quits: mikoto-chan (~mikoto-ch@213.177.151.239) (Ping timeout: 256 seconds)
[20:27:15] *** Joins: bluedust_ (~bluedust@117.217.146.23)
[20:27:57] *** Quits: bluedust (~bluedust@117.193.122.44) (Ping timeout: 240 seconds)
[20:40:56] <bancroft> I have some wrappers written in cgo with just an `int main() {}...return 0` I want to convert the return int into a go int, is this not possible? Everywhere I look they talk about size_t but I'm really looking for an int
[20:42:08] *** Joins: bluedust (~bluedust@194.37.96.153)
[20:43:15] *** Quits: Everything (~Everythin@37.115.210.35) (Quit: leaving)
[20:44:56] *** Joins: _xor (~xor@dsl-50-5-233-169.fuse.net)
[20:45:43] *** Quits: bluedust_ (~bluedust@117.217.146.23) (Ping timeout: 256 seconds)
[20:46:28] <bancroft>  ah nevermind, got it
[20:49:26] *** Quits: wolfdale (~wolfdale@ec2-3-1-90-26.ap-southeast-1.compute.amazonaws.com) (Quit: Ping timeout (120 seconds))
[20:49:53] *** Joins: wolfdale (~wolfdale@ec2-3-1-90-26.ap-southeast-1.compute.amazonaws.com)
[20:52:14] *** Joins: dingdreher (~dingdrehe@2a02:aa08:401e:fff2:a824:9afd:6d29:d02c)
[20:53:54] *** Joins: itsalexjones (~itsalexjo@82.4.99.241)
[20:56:54] *** Joins: bluedust_ (~bluedust@117.217.146.23)
[20:59:10] *** Quits: dingdreher (~dingdrehe@2a02:aa08:401e:fff2:a824:9afd:6d29:d02c) (Quit: dingdreher)
[21:00:27] *** Quits: bluedust (~bluedust@194.37.96.153) (Ping timeout: 256 seconds)
[21:01:32] *** Joins: dingdreher (~dingdrehe@2a02:aa08:401e:fff2:a824:9afd:6d29:d02c)
[21:06:19] *** Joins: leonarth (~leonarth@user/leonarth)
[21:15:45] *** Joins: rickybob (~rickybob@gateway/vpn/pia/rickybob)
[21:16:21] *** Quits: tiferrei2000 (~tiferrei@user/tiferrei) (Ping timeout: 276 seconds)
[21:17:11] *** Joins: dreamcat4 (uid157427@id-157427.hampstead.irccloud.com)
[21:17:30] *** Joins: tiferrei (~tiferrei@user/tiferrei)
[21:20:03] *** Joins: TReK (~UnfaQ@user/trek)
[21:30:17] *** Joins: larsm (~larsm@2606:54c0:1e60:138::47:322)
[21:30:47] *** Quits: larsm (~larsm@2606:54c0:1e60:138::47:322) (Remote host closed the connection)
[21:41:39] *** Quits: k8yun (~k8yun@198-48-158-40.cpe.pppoe.ca) (Remote host closed the connection)
[21:42:05] *** Joins: k8yun (~k8yun@198-48-158-40.cpe.pppoe.ca)
[21:43:17] *** Quits: edd_lc (~edd_lc@85.64.225.197.dynamic.barak-online.net) (Ping timeout: 240 seconds)
[21:45:32] *** Quits: sdfgsdfg (~dfghsfgs@user/sdfgsdfg) (Quit: ayo yoyo ayo yoyo hololo, hololo.)
[21:55:47] *** Quits: mickey8 (~user@user/mickey) (Quit: Ping timeout (120 seconds))
[21:56:04] *** Joins: mickey8 (~user@user/mickey)
[22:30:31] *** Quits: qwedfg_ (~qwedfg@user/qwedfg) (Read error: Connection reset by peer)
[22:33:51] *** Joins: larsm (~larsm@2606:54c0:1e20:138::47:30c)
[22:34:17] *** Joins: qwedfg (~qwedfg@user/qwedfg)
[22:34:28] *** Quits: larsm (~larsm@2606:54c0:1e20:138::47:30c) (Remote host closed the connection)
[22:37:51] *** Quits: qwedfg (~qwedfg@user/qwedfg) (Read error: Connection reset by peer)
[22:38:15] *** Quits: fef (~thedawn@user/thedawn) (Ping timeout: 276 seconds)
[22:41:09] *** Joins: qwedfg (~qwedfg@user/qwedfg)
[22:49:06] *** Joins: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com)
[22:52:21] *** Quits: krux02 (~krux02@p200300e8170d4f00004bdf5557be8ad9.dip0.t-ipconnect.de) (Remote host closed the connection)
[22:52:37] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:4003:8970:d961:ff06)
[22:52:58] *** Joins: krux02 (~krux02@p200300e8170d4f00004bdf5557be8ad9.dip0.t-ipconnect.de)
[22:53:20] *** Quits: qwedfg (~qwedfg@user/qwedfg) (Read error: Connection reset by peer)
[22:58:21] *** Quits: rendar (~rendar@user/rendar) (Quit: Leaving)
[23:03:38] *** Quits: independent56 (~independe@2.26.38.138) (Read error: Connection reset by peer)
[23:03:44] *** Joins: independent_ (~independe@2.26.38.138)
[23:12:15] *** Joins: qwedfg (~qwedfg@user/qwedfg)
[23:21:25] *** Quits: oliverwood (~oliverwoo@node-1w7jra27sm79l0xu1l5l5nxry.ipv6.telus.net) (Remote host closed the connection)
[23:22:12] *** Joins: oliverwood (~oliverwoo@2001:56a:f830:f600:6c98:4e15:f2c0:33be)
[23:28:39] *** Joins: crashrep (~crashrep@user/crashrep)
[23:31:40] *** Parts: TReK (~UnfaQ@user/trek) ()
[23:34:55] *** Quits: crashrep (~crashrep@user/crashrep) (Remote host closed the connection)
[23:35:16] *** Joins: crashrep (~crashrep@user/crashrep)
[23:41:23] *** Quits: nimu (~nimu@18.29.27.154) (Quit: Client closed)
[23:53:05] *** Quits: k8yun (~k8yun@198-48-158-40.cpe.pppoe.ca) (Quit: Leaving)
[23:55:56] *** Joins: hyper_dave (~hyper_dav@2a01:4f9:4a:246c::2)
[23:55:57] *** Joins: et_ (~et@user/et)
[23:56:06] <hyper_dave> Hello!
[23:56:26] *** Quits: et (~et@user/et) (Ping timeout: 252 seconds)
[23:56:28] *** et_ is now known as et
[23:57:28] *** Joins: rogersm (~rogersm@90.166.180.250)
