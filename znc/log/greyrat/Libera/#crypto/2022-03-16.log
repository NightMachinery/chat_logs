[00:01:57] *** Quits: foobaz21266 (~foobaz212@152.37.103.80) (Quit: Client closed)
[00:02:13] *** Joins: foobaz21266 (~foobaz212@152.37.103.80)
[00:02:59] *** Quits: Gallomimia (~Gallomimi@node-1w7jra2a2gqpvuszyfgg0phlv.ipv6.telus.net) (Remote host closed the connection)
[00:04:29] *** Joins: Gallomimia (~Gallomimi@node-1w7jra2a2gqpweiap8qs2za8q.ipv6.telus.net)
[00:09:48] *** Quits: xx (~xx@user/xx) (Ping timeout: 240 seconds)
[00:16:08] *** Quits: foobaz21266 (~foobaz212@152.37.103.80) (Quit: Client closed)
[00:16:08] *** Quits: foobaz21248467 (~foobaz212@152.37.103.80) (Quit: Client closed)
[00:16:24] *** Joins: foobaz21266 (~foobaz212@152.37.103.80)
[00:16:24] *** Joins: foobaz21248467 (~foobaz212@152.37.103.80)
[00:16:30] *** Joins: sobkas (~sobkas@95.175.17.217)
[00:21:55] *** Quits: drathir_tor (~drathir@wireguard/tunneler/drathir) (Ping timeout: 240 seconds)
[00:22:39] *** Quits: Pollion (bombar@zamok.crans.org) (Quit: WeeChat 3.4)
[00:25:45] *** Quits: foobaz21266 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[00:25:45] *** Quits: foobaz21248467 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[00:27:19] *** Joins: filename (~kilitary@188.242.105.134)
[00:29:07] *** Joins: drathir_tor (~drathir@wireguard/tunneler/drathir)
[00:32:10] *** Quits: mauz (~mauz@2a01:e0a:994:7ed0:d42e:54ce:ab14:af5e) (Quit: Leaving...)
[00:33:54] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Ping timeout: 252 seconds)
[00:35:42] *** Quits: namkeleser (~namkelese@101.175.155.55) (Quit: Client closed)
[00:38:21] *** Joins: Everything (~Everythin@37.115.210.35)
[00:42:19] *** Quits: Giovanni (~Giovanni@176.219.119.243) (Ping timeout: 250 seconds)
[00:42:34] *** Joins: Giovanni (~Giovanni@176.54.32.122)
[01:02:03] *** Quits: filename (~kilitary@188.242.105.134) (Read error: Connection reset by peer)
[01:13:15] *** Quits: Sofia (~sofia@user/sofia) (Ping timeout: 240 seconds)
[01:16:38] *** Quits: satanist (~satanist@bureaucracy.bureaucracy.de) (Remote host closed the connection)
[01:20:05] *** Joins: satanist (~satanist@bureaucracy.bureaucracy.de)
[01:25:54] *** Quits: TonyStone (~TonyStone@2603-7080-8607-c36a-a0f7-4a6c-9396-dfff.res6.spectrum.com) (Ping timeout: 250 seconds)
[01:26:04] *** Joins: foobaz21248467 (~foobaz212@152.37.103.80)
[01:26:12] *** Seirdy0 is now known as Seirdy
[01:26:23] *** Joins: foobaz21266 (~foobaz212@152.37.103.80)
[01:28:29] *** Joins: Sofia (~sofia@user/sofia)
[01:30:55] *** Quits: foobaz21266 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[01:30:55] *** Quits: foobaz21248467 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[01:34:46] *** Joins: filename (~kilitary@static.246.201.46.78.clients.your-server.de)
[01:35:23] *** Quits: phebus (~phebus@fsf/member/phebus) (Quit: POKE 1,0)
[01:38:43] *** Joins: TonyStone (~TonyStone@2603-7080-8607-c36a-a0f7-4a6c-9396-dfff.res6.spectrum.com)
[01:39:59] *** Quits: machinedgod (~machinedg@24.105.81.50) (Ping timeout: 256 seconds)
[01:42:26] *** Quits: b93 (~I@a94-132-238-173.cpe.netcabo.pt) (Ping timeout: 260 seconds)
[01:43:53] *** Quits: Everything (~Everythin@37.115.210.35) (Quit: leaving)
[01:46:33] *** Quits: g00fy782 (~g00fy@user/g00fy) (Read error: Connection reset by peer)
[01:47:02] *** Joins: phebus (~phebus@fsf/member/phebus)
[01:48:41] *** Joins: g00fy782 (~g00fy@user/g00fy)
[01:56:55] *** Quits: Sofia (~sofia@user/sofia) (Ping timeout: 240 seconds)
[01:58:21] *** Quits: hg (~halosghos@user/halosghost) (Quit: WeeChat 3.4)
[02:03:26] *** Quits: Guyver2 (~Guyver@guyver2.xs4all.nl) (Quit: Going offline, see ya! (www.adiirc.com))
[02:12:39] *** Joins: Sofia (~sofia@user/sofia)
[02:15:32] *** Joins: mauz (~mauz@2a01:e0a:994:7ed0:d42e:54ce:ab14:af5e)
[02:25:01] *** Joins: machinedgod (~machinedg@24.105.81.50)
[02:25:49] *** Joins: foobaz21266 (~foobaz212@152.37.103.80)
[02:29:36] *** Quits: filename (~kilitary@static.246.201.46.78.clients.your-server.de) (Ping timeout: 250 seconds)
[02:30:59] *** Quits: foobaz21266 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[02:48:43] *** Quits: sobkas (~sobkas@95.175.17.217) (Quit: sobkas)
[02:51:58] *** Quits: Seirdy (~Seirdy@sourcehut/user/seirdy) (Quit: exiting 3.4)
[02:59:11] *** Quits: andreasbuhr (~quassel@p549db53a.dip0.t-ipconnect.de) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[03:04:43] *** Quits: Klotz (~Klotzoman@gateway/tor-sasl/klotz) (Quit: Klotz)
[03:08:39] *** Joins: foobaz21266 (~foobaz212@152.37.103.80)
[03:08:49] *** Joins: foobaz21248467 (~foobaz212@152.37.103.80)
[03:18:21] *** Quits: ioxzev1z (~ioxzev1z@user/ioxzev1z) (Quit: Leaving)
[03:19:11] *** Quits: igemnace (~ian@user/igemnace) (Remote host closed the connection)
[03:27:33] *** Joins: Seirdy (~Seirdy@sourcehut/user/seirdy)
[03:29:19] *** Joins: namkeleser (~namkelese@125.7.37.86)
[03:36:30] *** Quits: Wulf (~Wulf@user/wulf) (Ping timeout: 252 seconds)
[03:38:12] *** Joins: Wulf (~Wulf@user/wulf)
[03:47:00] *** Quits: machinedgod (~machinedg@24.105.81.50) (Ping timeout: 240 seconds)
[03:48:13] *** Quits: dhruvism (~dhruvism@user/dhruvism) (Remote host closed the connection)
[03:48:27] *** Joins: dhruvism (~dhruvism@user/dhruvism)
[03:48:28] *** Quits: dhruvism (~dhruvism@user/dhruvism) (Read error: Connection reset by peer)
[03:55:16] *** Quits: foobaz21248467 (~foobaz212@152.37.103.80) (Quit: Client closed)
[03:55:16] *** Quits: foobaz21266 (~foobaz212@152.37.103.80) (Quit: Client closed)
[03:55:30] *** Joins: foobaz21266 (~foobaz212@152.37.103.80)
[03:55:31] *** Joins: foobaz21248467 (~foobaz212@152.37.103.80)
[03:56:09] *** Joins: [The_Tablet] (~tablet@user/the-tablet)
[03:57:30] *** Quits: akaWolf (~akaWolf@akawolf.org) (Ping timeout: 272 seconds)
[04:02:47] *** Quits: foobaz21248467 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[04:02:47] *** Quits: foobaz21266 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[04:02:48] *** Joins: akaWolf (~akaWolf@akawolf.org)
[04:11:43] *** Joins: igemnace (~ian@user/igemnace)
[04:17:14] *** Joins: dhruvism (~dhruvism@user/dhruvism)
[04:23:05] *** Quits: mauz (~mauz@2a01:e0a:994:7ed0:d42e:54ce:ab14:af5e) (Quit: Leaving...)
[04:34:31] *** Quits: mad_enz (~mad_enz@lnsm4-toronto12-50-101-118-206.internet.virginmobile.ca) (Ping timeout: 256 seconds)
[04:37:56] *** Joins: foobaz21266 (~foobaz212@152.37.103.80)
[04:40:17] *** Joins: foobaz21248467 (~foobaz212@152.37.103.80)
[04:42:33] *** Quits: ivii (~ivan@user/ivii) (Remote host closed the connection)
[04:56:38] *** Joins: frost (~frost@user/frost)
[04:57:54] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 252 seconds)
[05:07:54] *** Joins: gproto23 (~gproto23@user/gproto23)
[05:11:29] *** Quits: foobaz21248467 (~foobaz212@152.37.103.80) (Quit: Client closed)
[05:11:29] *** Quits: foobaz21266 (~foobaz212@152.37.103.80) (Quit: Client closed)
[05:11:43] *** Joins: foobaz21266 (~foobaz212@152.37.103.80)
[05:11:45] *** Joins: foobaz21248467 (~foobaz212@152.37.103.80)
[05:16:57] *** Quits: dhruvism (~dhruvism@user/dhruvism) (Read error: Connection reset by peer)
[05:17:39] *** Quits: ua_ (~ua@public-gprs233404.centertel.pl) (Excess Flood)
[05:18:09] *** Quits: foobaz21248467 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[05:18:09] *** Quits: foobaz21266 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[05:19:00] *** Joins: ua_ (~ua@public-gprs233404.centertel.pl)
[05:52:16] <[itchyjunk]> :x
[05:55:14] <Alipha> [itchyjunk]: is the decrypted plaintext "hi"?
[05:55:24] <[itchyjunk]> lol
[05:56:17] <[itchyjunk]> So a "cartographic system" is my plain text, cypher text, a function from plain cypher and a way to go from cypher to plain generally called a "secret" ?
[05:56:32] <[itchyjunk]> Was curious about some terminologies..
[05:57:03] <halosghost> you probably mean “cryptographic”
[05:57:13] <halosghost> cartography is a slightly different discipline
[05:57:16] <[itchyjunk]> oops, yes cryptographic
[05:57:28] <halosghost> :)
[05:57:50] <Alipha> There's plenty of secrets in cryptography. You're probably specifically referring to a "key"
[05:58:38] <halosghost> additionally, usually (in my reading so far), cryptographic systems don't actually include the plain-text or the cipher-text themselves (but rather the whole plaintext and ciphertext spaces)
[05:59:07] <[itchyjunk]> hmm
[05:59:10] <halosghost> and then encrypt is a function that takes a key and a plaintext and returns a ciphertext; and decrypt is a function that takes a key and a ciphertext and returns the plaintext
[05:59:42] <[itchyjunk]> ah, plain text and ciphertext spaces. got it
[06:00:44] <[itchyjunk]> so if i have a f:P->C (Plain text to Ciper text) and a f^(-1):C->P, where does a key come in? or is key not always required ?
[06:01:14] <halosghost> f and f⁻¹ are missing an argument in your definition
[06:01:30] <halosghost> (the key)
[06:02:04] <halosghost> oh right
[06:02:09] <[itchyjunk]> oh so like f:Pxkey -> C and f^(-1):Cxkey -> P ?
[06:02:12] <halosghost> cryptographic systems also tend to include the kyspace
[06:02:18] <halosghost> s/ky/key/
[06:03:10] <halosghost> if x in your pseudo-type syntax means “and”, then sure
[06:03:59] <halosghost> more haskellian would be something like this: encrypt :: (K k, M m, C c) => k -> m -> c
[06:04:14] <halosghost> and decrypt :: (K k, M m, C c) => k -> c -> m
[06:04:26] *** Joins: dhruvism (~dhruvism@user/dhruvism)
[06:04:39] *** Quits: dhruvism (~dhruvism@user/dhruvism) (Read error: Connection reset by peer)
[06:04:48] <[itchyjunk]> x as in Cartesian product
[06:05:03] <halosghost> hmm
[06:05:40] <[itchyjunk]> I am not sure how a key fits in here. i would have imagined i have a space of plain text and a space of cipher text and a function that maps one to another
[06:05:58] <[itchyjunk]> hmm i might have misunderstood something basic here
[06:06:30] <halosghost> I think I might be able to bridge the gap
[06:06:36] <halosghost> there are some systems where the key is kind of implied
[06:06:54] <[itchyjunk]> So the simplest thing i know of is rot13
[06:07:14] <[itchyjunk]> Where my plain text is just alphabet and so is my cipher text
[06:07:23] <halosghost> I was wondering if you were thinking of that
[06:07:25] <halosghost> yeah
[06:07:32] <[itchyjunk]> and i have some bijective map f:A->A
[06:07:51] <halosghost> so
[06:07:58] <[itchyjunk]> where is A = {a,..,z}
[06:08:04] <halosghost> rot13 is actually a special case of a caeser cipher
[06:08:12] <[itchyjunk]> Ah yes
[06:08:14] <halosghost> in particular, rot13 is a caeser cipher where the key is 13
[06:08:19] <[itchyjunk]> maybe caeser cipher is better
[06:08:28] <[itchyjunk]> oh right
[06:08:50] <halosghost> the thing that's kind of fun about that special case is that encrypt and decrypt are the same function
[06:08:57] <halosghost> but that's about it
[06:08:57] <[itchyjunk]> oh my key determines by cipher space
[06:09:02] <[itchyjunk]> oh key makes sense there
[06:09:17] <[itchyjunk]> well, the function is also bijective here
[06:09:22] <[itchyjunk]> does it always have to be bijective?
[06:09:41] <[itchyjunk]> maybe injective is enough sometimes? or is that not true?
[06:09:45] <halosghost> hmm
[06:10:12] * halosghost flips open Joy of Cryptography for a second
[06:12:40] <halosghost> I am not sure
[06:13:46] <halosghost> also, I cannot recommend Joy of Cryptography enough if you're just getting started in the space
[06:13:50] <halosghost> it's been incredibly helpful for me
[06:17:45] <namkeleser> For LastPass Enterprise edition is it a good idea to make these changes? https://ibb.co/HDSG0GS
[06:17:46] <namkeleser> to not allow remembering and killing off stale sessions after X hours
[06:17:46] <namkeleser> force MFA on all accoutns not just personal
[06:17:47] <namkeleser> and notify us when account recovery was requeseted and completed
[06:18:23] <namkeleser> Also what are peoples thoughts of LatPass in an enterprise env? 800 or so enfpoints
[06:19:49] <halosghost> what's your threat-model?
[06:19:59] <[itchyjunk]> So turns out that f has to be injective but doesn't need to be surjective.
[06:20:09] <[itchyjunk]> for my question :x
[06:20:13] <halosghost> [itchyjunk]: good to know
[06:20:31] <halosghost> [itchyjunk]: and `f` == encrypt()?
[06:22:19] <[itchyjunk]> yes
[06:22:27] <[itchyjunk]> i asked in the math channel :x
[06:22:31] <halosghost> lol
[06:24:09] *** Joins: skaro (~skaro@2600:8807:180:80:d05c:a08e:696d:6d65)
[06:25:49] *** Joins: foobaz21266 (~foobaz212@152.37.103.80)
[06:25:56] <Alipha> [itchyjunk]: the key (along with the algorithm) determines the mapping of plaintext space <-> ciphertext space. A different key gives a different mapping
[06:26:10] *** Joins: mad_enz (~mad_enz@lnsm4-toronto12-50-101-118-206.internet.virginmobile.ca)
[06:26:25] <[itchyjunk]> ah! that's what i was wondering
[06:26:34] *** Quits: Gravis (~gravis@user/gravis) (Quit: Murdered)
[06:26:51] *** Joins: Gravis (~gravis@user/gravis)
[06:27:16] <halosghost> (which you can think of in a caeser cipher how if you use a key other than 13, you get a different mapping than if you use 13)
[06:27:59] <namkeleser> halosghost We got breached by ransomware last year, so we are rebuilding our network, hybrid env, Azure/o365/on prem Windows mainly and some linux servers, We currently have an NDR solution + Red Canary MDR with Carbon Black MDR, also connect to our internal env with a VPN with MFA
[06:28:10] <[itchyjunk]> right, so i have a set {a,..,z} and a permutation group of all maps of this set to itself
[06:28:22] <[itchyjunk]> any my encrypt is just one of those permutation function, it seems..
[06:29:06] *** Joins: [_] (~itchyjunk@user/itchyjunk/x-7353470)
[06:29:47] <halosghost> technically speaking, caeser ciphers are all shifts rather than permutations
[06:30:08] <halosghost> so, you actually described substitutions ciphers more generally there
[06:30:14] <[_]> oops
[06:30:22] <[_]> my internet dropped, what did i miss
[06:30:28] <halosghost> nothing
[06:30:30] *** [itchyjunk] is now known as Guest1869
[06:30:30] *** [_] is now known as [itchyjunk]
[06:30:41] *** Quits: foobaz21266 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[06:30:52] <[itchyjunk]> shift is permutation though, no?
[06:30:58] <[itchyjunk]> since it's biejctive
[06:31:26] <[itchyjunk]> if a |-> b, b |-> c, .. z |-> a, thats a permutation
[06:32:15] <TimMc> namkeleser: I'm not very happy with LastPass's security overall, and would recommend looking into Keeper if you have some flexibility there.
[06:32:37] *** Quits: Guest1869 (~itchyjunk@user/itchyjunk/x-7353470) (Ping timeout: 240 seconds)
[06:32:45] <namkeleser> TimMc Which parts of it's security?
[06:32:56] <namkeleser> What makes Keeper better?
[06:33:05] <namkeleser> Also is hitachi software any good?
[06:33:15] <namkeleser> For pw manager
[06:33:59] <halosghost> [itchyjunk]: perhaps I read something in you didn't mean
[06:34:16] <halosghost> [itchyjunk]: permutations (in my experience) don't need to be a consistent shift
[06:34:47] <[itchyjunk]> permutation is a bijective map from a set to itself i think
[06:34:51] <[itchyjunk]> hmm, let me double check
[06:34:56] <halosghost> [itchyjunk]: e.g., anlfijkpqwe… is a valid permutation of the alphabet despite the fact that it has no consistent offset from abc…
[06:35:05] <Alipha> [itchyjunk]: yes, a shift is a specific type of permutation
[06:35:11] <halosghost> ^
[06:35:21] <halosghost> (that's how I was reading it)
[06:35:22] <TimMc> Keeper actually documents their security model, for one. :-) And what I saw looked very reasonable. For context, I was helping IT pick a new enterprise password manager, and reviewed 3 or 4 different options. I don't have experience *administering* any of these, so this is just from trying them out and looking at their docs.
[06:35:41] <TimMc> LastPass also just has a history of serious security screwups.
[06:36:07] <[itchyjunk]> "Permutations can be defined as bijections from a set S onto itself."
[06:36:20] <[itchyjunk]> https://en.wikipedia.org/wiki/Permutation#Definition
[06:36:27] <[itchyjunk]> hmm
[06:36:29] <halosghost> [itchyjunk]: but a caeser cipher isn't any permutation, it's specifically a shift offset
[06:36:41] <[itchyjunk]> but it is a permutation.
[06:36:49] <halosghost> sure
[06:36:51] <[itchyjunk]> if you map a to b, b to c, .. , z to a
[06:36:56] <[itchyjunk]> thats a permutation
[06:37:00] <halosghost> yes
[06:37:10] <halosghost> that's a substitution cipher
[06:37:12] <[itchyjunk]> caeser is nothing but picking some permutation map from set {a,..,z} to itself
[06:37:18] <halosghost> well
[06:37:21] <halosghost> a specific kind of permutation
[06:37:23] <[itchyjunk]> oh, maybe i misunderstand caeser then
[06:37:26] <halosghost> (a shift)
[06:37:39] <Alipha> All symmetric ciphers are just permutations
[06:37:43] <[itchyjunk]> sure but that's still permutation
[06:37:49] <[itchyjunk]> oh!
[06:38:04] *** Joins: bilbo_swaggins (~bilbo_swa@159.196.168.187)
[06:38:06] <[itchyjunk]> what is another (hopefully easy) example of symmetric sipher?
[06:38:09] <[itchyjunk]> cipher*
[06:38:28] <halosghost> memfrob
[06:38:35] <Alipha> Wouldn't call it easy, but AES
[06:38:42] <halosghost> which is a special variant of a XOR cipher
[06:39:03] <[itchyjunk]> hmmmmm
[06:41:25] <[itchyjunk]> hmm am i reading this correctly? that asymmetric ciphers always have a private and a public key?
[06:41:27] <[itchyjunk]> https://www.hypr.com/symmetric-cipher
[06:42:31] <halosghost> I can't think of one that doesn't
[06:43:00] <halosghost> as far as I know, that's kind of the definition (that Alice and Bob have asymmetric information)
[06:43:37] <halosghost> (put another way, that the key used to encrypt is different than the key used to decrypt)
[06:44:00] <Platonides> well, for an easy symmetric cipher, simpler than AES but quite better than a caesar I would suggest RC4
[06:44:05] <[itchyjunk]> I didn't know asymmetric implied public/private key
[06:44:23] <namkeleser> TimMc do you use Keeper in an enterprise env? Is it open source or propritary/Can be used in organisations?
[06:44:35] <Platonides> well, asymmetric implies there are several keys
[06:44:43] <Platonides> we call one the public key and the other the private key
[06:45:04] <halosghost> [itchyjunk]: if you want an algorithm that's less of a toy, then Platonides's suggestion is a good one
[06:45:08] <[itchyjunk]> Oh, WEP used it? that's the thing wifi used to use right?
[06:45:19] <halosghost> (especially because there are variants you can do by-hand which are reasonable)
[06:45:34] <Platonides> [itchyjunk]: and TLS had RC4 for a long time
[06:45:46] <Platonides> I would recommend you to look at ciphersaber
[06:45:57] <halosghost> cf. https://igniparoustempest.github.io/Pocket-RC4/
[06:46:22] <namkeleser> And which 3/4 different options did you review TimMc
[06:53:05] *** Quits: platta (~platta@pool-98-110-52-37.cmdnnj.fios.verizon.net) (Read error: Connection reset by peer)
[06:53:20] <Alipha> [itchyjunk]: RC4 is quite secure if used properly. WEP's downfall is that they used related keys (keys which are similar to other keys, and so you can identify patterns across messages with different, but similar, keys)
[06:55:18] *** Joins: platta (~platta@pool-98-110-52-37.cmdnnj.fios.verizon.net)
[06:55:41] *** Quits: bilbo_swaggins (~bilbo_swa@159.196.168.187) (Quit: Leaving)
[06:55:52] *** Joins: falcorn (~falcorn@159.196.168.187)
[06:56:09] <Alipha> Had WEP used 128-bit keys and had used a proper KDF (Key Derivation Function) for message-specific keys, then WEP probably would not be broken today (at least, not severely). Hmmm... though did WEP use MACs?
[06:56:31] *** Quits: platta (~platta@pool-98-110-52-37.cmdnnj.fios.verizon.net) (Read error: Connection reset by peer)
[06:56:53] *** Joins: platta (~platta@pool-98-110-52-37.cmdnnj.fios.verizon.net)
[06:59:07] *** Quits: platta (~platta@pool-98-110-52-37.cmdnnj.fios.verizon.net) (Read error: Connection reset by peer)
[07:03:47] *** Quits: falcorn (~falcorn@159.196.168.187) (Quit: Leaving)
[07:03:56] *** Joins: falcorn (~falcorn@159.196.168.187)
[07:06:09] <[itchyjunk]> hmm
[07:11:04] <maroon> wasnt there something with rc4 where it was possible to find key pairs that began at not-that-far distances from each other along the stream?
[07:11:56] *** Joins: WishBoy (~WishBoy@user/wishboy)
[07:16:30] <TimMc> namkeleser: Sorry, forgot to link the docs page: https://docs.keeper.io/enterprise-guide/keeper-encryption-model
[07:17:48] *** Quits: ses (uid38151@user/sesquisentient) (Quit: Connection closed for inactivity)
[07:18:01] *** Quits: WishBoy (~WishBoy@user/wishboy) ()
[07:18:09] <TimMc> I don't recall all the options. Uh... I think I looked at Dashlane and wasn't too happy with it. Can't remember others.
[07:18:41] <TimMc> I wish I still had my notes.
[07:19:46] *** Joins: caveman (~caveman@gateway/tor-sasl/caveman)
[07:22:53] <TimMc> haha, found them!
[07:24:53] *** Joins: gde33 (~gde33@84-106-154-98.cable.dynamic.v4.ziggo.nl)
[07:25:09] *** Quits: gde35 (~gde33@84-106-154-98.cable.dynamic.v4.ziggo.nl) (Quit: KVIrc 5.0.0 Aria http://www.kvirc.net/)
[07:26:05] <TimMc> OK yeah, some downsides to Keeper in these notes. I'd forgotten about some of this. 
[07:27:41] <TimMc> namkeleser: Notes: https://paste.debian.net/plainh/67569f31 -- a bit over a year old, so things may have changed.
[07:27:50] <TimMc> Dashlane was just completely clowntown.
[07:28:13] <TimMc> but none of the options I tested thrilled me
[07:42:01] <Alipha> maroon: i'm not sure what you mean. why are key pairs in the stream?
[07:43:30] <maroon> where key1 produced a state table that wasn't far enough away from the state table produced by another key
[07:45:19] <Alipha> maroon: wouldn't that be a related-key attack?
[07:46:03] <maroon> i thought related key was where the keys themselves were related, not that they produced related permutations
[07:46:38] <Alipha> well, they produce related permutations because they themselves are related :-)
[07:50:04] <maroon> wouldnt that be like saying 2 strings are related because they produce similar sha256 hashes?
[07:51:20] *** Joins: recyclehero (~alistar@ec2-3-127-140-208.eu-central-1.compute.amazonaws.com)
[07:51:22] *** Joins: dhruvism (~dhruvism@user/dhruvism)
[07:51:44] *** Quits: dhruvism (~dhruvism@user/dhruvism) (Read error: Connection reset by peer)
[07:52:05] <Alipha> though now i'm looking at the key schedule ( https://en.wikipedia.org/wiki/RC4#Key-scheduling_algorithm_(KSA) ) and the algorithm they used is biased. i'm not sure how big of an impact that has to the security though :-/ ie, the RSA key schedule looks like it has this bias: https://blog.codinghorror.com/the-danger-of-naivete/
[07:52:25] *** Joins: dhruvism (~dhruvism@user/dhruvism)
[07:52:56] *** Quits: dhruvism (~dhruvism@user/dhruvism) (Client Quit)
[07:58:11] <Alipha> maroon: sha256 is a strong algorithm and so there's no connection that can be made from the hash output from the hash input. RC4's key schedule is pitifully weak in comparison. if you changed the last byte of an RC4 key, those two keys would likely result in very similar initial states.
[08:04:58] <halosghost> I need to read more on modern efforts to try to prove the existence of one-way functions
[08:27:01] *** Joins: foobaz21266 (~foobaz212@152.37.103.80)
[08:31:23] *** Quits: foobaz21266 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[08:33:35] *** Quits: Giovanni (~Giovanni@176.54.32.122) (Remote host closed the connection)
[08:34:15] *** Joins: Giovanni (~Giovanni@176.54.32.122)
[08:38:22] *** Quits: Giovanni (~Giovanni@176.54.32.122) (Remote host closed the connection)
[08:45:03] *** Quits: son0p (~ff@181.136.122.143) (Ping timeout: 250 seconds)
[08:58:40] *** Joins: Giovanni (~Giovanni@176.67.166.45)
[08:59:37] *** Quits: falcorn (~falcorn@159.196.168.187) (Quit: Leaving)
[08:59:56] *** Joins: mortymcfly (~mortymcfl@159.196.168.187)
[09:37:22] *** Quits: caveman (~caveman@gateway/tor-sasl/caveman) (Remote host closed the connection)
[09:42:12] *** Quits: mortymcfly (~mortymcfl@159.196.168.187) (Ping timeout: 240 seconds)
[09:46:55] *** Joins: caveman (~caveman@gateway/tor-sasl/caveman)
[09:47:20] <caveman> any updates about my on-going question?
[09:51:06] <maroon> something about craptocurrency?
[09:57:15] *** Parts: Malvolio (~Malvolio@user/malvolio) ()
[10:00:36] <caveman> yes.  
[10:04:13] *** Quits: echoreply (~echoreply@45.32.163.16) (Quit: WeeChat 2.8)
[10:06:01] <Wulf> halosghost: 9aa82901d84b4fdb6e6d1a43238653ba. Turn that md5sum back into the original input. If you can't. that proves the existence of one-way functions ;-)
[10:08:38] <maroon> and in other news, i created a cipher i can't crack, therefore it must be secure
[10:11:23] <Wulf> maroon: it might be. But nobody broke md5's pre-image resistance yet.
[10:11:53] *** Quits: zulutango (~zulutango@static-n58-105-160-58.mas4.nsw.optusnet.com.au) (Remote host closed the connection)
[10:11:59] <maroon> supposedly there's been some attacks against hmac-md5
[10:14:04] *** Quits: JC5 (~X@user/jc5) (Quit: Bye)
[10:15:58] *** Joins: zulutango (~zulutango@static-n58-105-160-58.mas4.nsw.optusnet.com.au)
[10:21:59] *** Quits: caveman (~caveman@gateway/tor-sasl/caveman) (Quit: the #end of the abyss)
[10:26:00] *** Joins: JC5 (~X@user/jc5)
[10:27:18] *** Joins: foobaz21266 (~foobaz212@152.37.103.80)
[10:27:19] <iz> caveman keeps thinking he can make something better than blockchain but just keeps on re-inventing it because he never really understood the double spending problem it solves
[10:28:56] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Read error: Connection reset by peer)
[10:29:55] *** Joins: caveman (~caveman@gateway/tor-sasl/caveman)
[10:32:39] *** Quits: foobaz21266 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[10:33:47] *** Quits: namkeleser (~namkelese@125.7.37.86) (Ping timeout: 256 seconds)
[10:34:14] <caveman> does zk-stark make storage also scalable?  e.g. i don't need to store full data about the entire block chain in order to prove ownership to coins?
[10:35:33] <milesrout> caveman: you know this channel isnt about cryptocurrency right
[10:36:37] <caveman> no.  it's not about the money/economical aspect of cryptocurrency.  but it's about the cryptographic aspects, such as zero knowedge proofs, merkle trees, etc.
[10:47:00] *** Quits: jtgd (~jtgd@user/jtgd) (Ping timeout: 240 seconds)
[10:51:14] <int-e> https://eprint.iacr.org/2018/046 answers those questions, of course
[10:54:11] *** Joins: BOKALDO (~BOKALDO@user/bokaldo)
[10:55:44] *** Joins: ravan_ (~ravan@42.201.198.151)
[10:55:44] *** Quits: ravan_ (~ravan@42.201.198.151) (Changing host)
[10:55:44] *** Joins: ravan_ (~ravan@user/ravan)
[10:55:44] *** Quits: ravan (~ravan@user/ravan) (Ping timeout: 250 seconds)
[11:01:21] *** Joins: jtgd (~jtgd@user/jtgd)
[11:02:35] *** Quits: abraham (~abraham@143.244.185.86) (Quit: The Lounge - https://thelounge.chat)
[11:03:15] *** Quits: rg (~r-g@gateway/tor-sasl/r-g) (Ping timeout: 240 seconds)
[11:04:44] *** Joins: abraham (~abraham@143.244.185.86)
[11:12:23] *** Joins: Malvolio (~Malvolio@user/malvolio)
[11:14:01] *** Quits: abraham (~abraham@143.244.185.86) (Quit: The Lounge - https://thelounge.chat)
[11:16:06] *** Joins: abraham (~abraham@143.244.185.86)
[11:19:14] *** Joins: machinedgod (~machinedg@24.105.81.50)
[11:25:14] *** Joins: xx (~xx@user/xx)
[11:35:48] *** Quits: Gallomimia (~Gallomimi@node-1w7jra2a2gqpweiap8qs2za8q.ipv6.telus.net) (Remote host closed the connection)
[11:36:22] *** Joins: varayu880646 (~thelounge@47.31.243.250)
[11:40:02] *** Quits: abraham (~abraham@143.244.185.86) (Quit: The Lounge - https://thelounge.chat)
[11:40:16] *** Quits: skaro (~skaro@2600:8807:180:80:d05c:a08e:696d:6d65) (Quit: KVIrc 5.0.1 Aria http://www.kvirc.net/)
[11:41:15] *** Joins: abraham (~abraham@143.244.185.86)
[11:44:26] *** Joins: zer0bitz (~zer0bitz@dsl-hkibng32-54fbf8-224.dhcp.inet.fi)
[11:47:25] *** Joins: nerdbasher (~nerdbashe@rrcs-24-43-84-163.west.biz.rr.com)
[11:47:58] *** Joins: andreasbuhr (~quassel@p549db9c0.dip0.t-ipconnect.de)
[11:54:47] *** Joins: xenoterracide (~xenoterra@99-124-139-34.lightspeed.iplsin.sbcglobal.net)
[11:57:16] *** Joins: Nimrodel (~Nimrodel@ppp-94-69-16-130.home.otenet.gr)
[12:04:56] *** Joins: ivii (~ivan@user/ivii)
[12:06:09] *** Quits: Nimrodel (~Nimrodel@ppp-94-69-16-130.home.otenet.gr) (Quit: Leaving)
[12:06:45] *** Joins: Guyver2 (~Guyver@guyver2.xs4all.nl)
[12:08:00] *** Quits: abraham (~abraham@143.244.185.86) (Ping timeout: 252 seconds)
[12:13:43] *** Joins: foobaz21248467 (~foobaz212@152.37.103.80)
[12:13:49] *** Joins: foobaz21266 (~foobaz212@152.37.103.80)
[12:15:53] *** Quits: toulene (~toulene@user/toulene) (Remote host closed the connection)
[12:21:15] *** Joins: MajorBiscuit (~MajorBisc@c-001-026-027.client.tudelft.eduvpn.nl)
[12:21:40] *** Joins: Haohmaru (~Haohmaru@195.24.53.110)
[12:22:59] *** Quits: MajorBiscuit (~MajorBisc@c-001-026-027.client.tudelft.eduvpn.nl) (Client Quit)
[12:23:16] *** Joins: MajorBiscuit (~MajorBisc@c-001-026-027.client.tudelft.eduvpn.nl)
[12:33:37] *** Quits: xenoterracide (~xenoterra@99-124-139-34.lightspeed.iplsin.sbcglobal.net) (Ping timeout: 240 seconds)
[12:34:06] *** Quits: halosghost (~halosghos@user/halosghost) (Ping timeout: 250 seconds)
[12:36:08] *** Joins: PJBoy (~PJBoy@user/pjboy)
[12:40:56] *** Joins: abraham (~abraham@64.227.110.185)
[12:46:50] *** Joins: halosghost (~halosghos@user/halosghost)
[12:57:02] *** Joins: xenoterracide (~xenoterra@99-124-139-34.lightspeed.iplsin.sbcglobal.net)
[12:58:57] *** Quits: xenoterracide (~xenoterra@99-124-139-34.lightspeed.iplsin.sbcglobal.net) (Remote host closed the connection)
[12:59:21] *** Joins: xenoterracide (~xenoterra@99-124-139-34.lightspeed.iplsin.sbcglobal.net)
[13:09:35] *** Joins: Amadiro_ (~Amadiro@45.154.138.41)
[13:11:36] *** Quits: Amadiro (~Amadiro@45.154.138.41) (Ping timeout: 245 seconds)
[13:12:46] *** Quits: Giovanni (~Giovanni@176.67.166.45) (Remote host closed the connection)
[13:17:26] *** Parts: abraham (~abraham@64.227.110.185) (The Lounge - https://thelounge.chat)
[13:17:33] *** Quits: foobaz21266 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[13:17:33] *** Quits: foobaz21248467 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[13:43:00] *** Joins: gde35 (~gde33@84-106-154-98.cable.dynamic.v4.ziggo.nl)
[13:45:21] *** Quits: gde33 (~gde33@84-106-154-98.cable.dynamic.v4.ziggo.nl) (Ping timeout: 252 seconds)
[13:49:14] *** Quits: instantp10neer (~instantp1@user/instantp10neer) (Read error: Connection reset by peer)
[13:57:35] *** Quits: Sofia (~sofia@user/sofia) (Ping timeout: 240 seconds)
[13:57:48] *** Joins: shkurata (~shkurata@ptr-8riebuil60vhi1zqt1v.18120a2.ip6.access.telenet.be)
[13:58:56] *** Joins: Sofia (~sofia@user/sofia)
[14:00:28] *** Joins: milkt (~debian@gateway/tor-sasl/milkt)
[14:07:33] *** Joins: gde33 (~gde33@84-106-154-98.cable.dynamic.v4.ziggo.nl)
[14:08:34] *** Quits: gde35 (~gde33@84-106-154-98.cable.dynamic.v4.ziggo.nl) (Ping timeout: 250 seconds)
[14:19:11] *** Joins: gde35 (~gde33@84-106-154-98.cable.dynamic.v4.ziggo.nl)
[14:19:11] *** Quits: gde33 (~gde33@84-106-154-98.cable.dynamic.v4.ziggo.nl) (Read error: Connection reset by peer)
[14:32:51] *** Quits: ua_ (~ua@public-gprs233404.centertel.pl) (Ping timeout: 245 seconds)
[14:41:28] *** Quits: madage (~madage@user/madage) (Remote host closed the connection)
[14:41:41] *** Joins: madage (~madage@user/madage)
[14:46:14] *** Joins: ua_ (~ua@public-gprs226840.centertel.pl)
[14:48:29] *** Quits: sonOfRa (sonOfRa@user/sonofra) (Remote host closed the connection)
[14:50:17] *** Joins: tradar (~tradar@user/tradar)
[14:51:26] *** Joins: sonOfRa (sonOfRa@user/sonofra)
[14:57:06] *** Joins: X-Scale` (~ARM@219.206.137.78.rev.vodafone.pt)
[15:00:36] *** Quits: X-Scale (~ARM@83.223.232.29) (Ping timeout: 272 seconds)
[15:00:37] *** X-Scale` is now known as X-Scale
[15:01:25] *** Joins: ioxzev1z (~ioxzev1z@user/ioxzev1z)
[15:09:37] *** Joins: llorllale (~llorllale@198.98.119.85)
[15:10:54] *** Quits: dez (uid92154@user/dez) (Quit: Connection closed for inactivity)
[15:12:06] *** Quits: tradar (~tradar@user/tradar) (Remote host closed the connection)
[15:12:25] *** Quits: gproto23 (~gproto23@user/gproto23) (Remote host closed the connection)
[15:12:49] *** Joins: gproto23 (~gproto23@user/gproto23)
[15:13:56] *** Joins: foobaz21266 (~foobaz212@152.37.103.80)
[15:14:00] *** Joins: foobaz21248467 (~foobaz212@152.37.103.80)
[15:18:49] *** Quits: foobaz21248467 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[15:18:49] *** Quits: foobaz21266 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[15:24:54] *** Quits: nerdbasher (~nerdbashe@rrcs-24-43-84-163.west.biz.rr.com) (Ping timeout: 252 seconds)
[15:30:29] <river> https://fermatattack.secvuln.info/
[15:30:54] <rqsd> RSA: the gift that keeps on giving
[15:31:01] <river> :P
[15:31:20] <rqsd> I wish there was a public key system that mere mortals can implement without running into... stupid things like this
[15:31:37] <river> there is lamport signatures :)
[15:31:54] <river> it is limited but relatively simple to implement
[15:32:00] <rqsd> Okay, you win, I forgot to say practical
[15:32:37] <rqsd> Like, okay, power analysis is a hard problem, but say a straightforward implementation of common AEAD either chokes on the bignum for GCM/Poly1305 or the constant time comparison, but other than that, the naïve implementation is, generally, a correct one
[15:32:46] <rqsd> And then there's public key systems
[15:33:40] <river> it's rare you need to worry about power analysis?
[15:34:07] <rqsd> That's the part I'm sweeping under the rug by saying "generally" a correct one
[15:34:35] <Peng> Rambus or... goddamnbus
[15:34:53] <rqsd> What, did they patent something again
[15:35:21] *** Quits: br1ck (~br1ck@150.140.193.82) (Ping timeout: 252 seconds)
[15:53:26] *** Joins: callq (~callq@157.41.137.81)
[15:55:58] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[16:05:03] *** Quits: xenoterracide (~xenoterra@99-124-139-34.lightspeed.iplsin.sbcglobal.net) (Ping timeout: 252 seconds)
[16:23:55] *** Quits: Sofia (~sofia@user/sofia) (Ping timeout: 240 seconds)
[16:26:14] *** Joins: hg (~halosghos@user/halosghost)
[16:26:18] *** Quits: sebbu (~sebbu@user/sebbu) (Ping timeout: 260 seconds)
[16:29:08] *** Quits: gildasio (~gildasio@gateway/tor-sasl/gildasio) (Quit: WeeChat 3.0.1)
[16:29:40] *** Joins: gildasio (~gildasio@gateway/tor-sasl/gildasio)
[16:32:51] *** Quits: halosghost (~halosghos@user/halosghost) (Ping timeout: 245 seconds)
[16:33:39] *** Quits: hg (~halosghos@user/halosghost) (Ping timeout: 252 seconds)
[16:35:27] *** Joins: hg (~halosghos@user/halosghost)
[16:38:52] *** Joins: Sofia (~sofia@user/sofia)
[16:44:44] <iz> rambus bought cri that does lots of SPA/DPA stuff
[16:46:25] <iz> i took a seminar course about it from them when they were still CRI and tbqh, it kinda blew my mind a bit
[16:48:02] *** Joins: halosghost (~halosghos@user/halosghost)
[16:49:08] *** Joins: byteskeptical (~amnesia@user/byteskeptical)
[16:53:57] *** Joins: foobaz21266 (~foobaz212@152.37.103.80)
[16:54:30] *** Joins: brolin (~brolin@179.13.18.50)
[16:54:36] *** Quits: llorllale (~llorllale@198.98.119.85) (Ping timeout: 240 seconds)
[16:58:33] *** Quits: foobaz21266 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[16:58:35] *** Quits: drathir_tor (~drathir@wireguard/tunneler/drathir) (Ping timeout: 240 seconds)
[17:01:02] *** Joins: son0p (~ff@181.136.122.143)
[17:04:41] *** Joins: Klotz (~Klotzoman@gateway/tor-sasl/klotz)
[17:18:56] *** Joins: xenoterracide (~xenoterra@99-124-139-34.lightspeed.iplsin.sbcglobal.net)
[17:19:10] *** Joins: foobaz21266 (~foobaz212@152.37.103.80)
[17:20:38] *** Joins: foobaz21248467 (~foobaz212@152.37.103.80)
[17:22:48] *** Quits: xenoterracide (~xenoterra@99-124-139-34.lightspeed.iplsin.sbcglobal.net) (Remote host closed the connection)
[17:23:07] *** Joins: xenoterracide (~xenoterra@99-124-139-34.lightspeed.iplsin.sbcglobal.net)
[17:24:25] *** Joins: drathir_tor (~drathir@wireguard/tunneler/drathir)
[17:25:07] *** Joins: sebbu (~sebbu@user/sebbu)
[17:27:33] *** Quits: xenoterracide (~xenoterra@99-124-139-34.lightspeed.iplsin.sbcglobal.net) (Ping timeout: 252 seconds)
[17:28:46] *** Joins: ses (uid38151@user/sesquisentient)
[17:30:15] *** Quits: drathir_tor (~drathir@wireguard/tunneler/drathir) (Ping timeout: 240 seconds)
[17:35:26] *** Joins: xenoterracide (~xenoterra@99-124-139-34.lightspeed.iplsin.sbcglobal.net)
[17:37:05] *** Quits: foobaz21266 (~foobaz212@152.37.103.80) (Quit: Client closed)
[17:37:05] *** Quits: foobaz21248467 (~foobaz212@152.37.103.80) (Quit: Client closed)
[17:37:22] *** Joins: foobaz21266 (~foobaz212@152.37.103.80)
[17:37:24] *** Joins: foobaz21248467 (~foobaz212@152.37.103.80)
[17:40:21] *** Quits: xenoterracide (~xenoterra@99-124-139-34.lightspeed.iplsin.sbcglobal.net) (Ping timeout: 245 seconds)
[17:40:45] *** Joins: drathir_tor (~drathir@wireguard/tunneler/drathir)
[17:40:54] *** Quits: callq (~callq@157.41.137.81) (Ping timeout: 250 seconds)
[17:42:11] *** Quits: foobaz21248467 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[17:42:11] *** Quits: foobaz21266 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[17:48:15] *** Quits: mrus (~mrus@gateway/tor-sasl/mrus) (Ping timeout: 240 seconds)
[17:48:25] *** Quits: BOKALDO (~BOKALDO@user/bokaldo) (Quit: Leaving)
[17:48:33] *** Joins: mrus (~mrus@gateway/tor-sasl/mrus)
[17:50:32] <TimMc> Wow, I'd never heard of Fermat's method before. This is really nice.
[17:55:44] *** Joins: CryptoDavid (uid14990@id-14990.uxbridge.irccloud.com)
[17:57:02] *** Quits: brolin (~brolin@179.13.18.50) (Ping timeout: 240 seconds)
[17:58:12] *** Quits: drathir_tor (~drathir@wireguard/tunneler/drathir) (Remote host closed the connection)
[17:58:28] <iz> works great if the primes are close together (so make sure that doesn't happen)
[18:03:28] <river> but now i can just check for primes that aren't close together
[18:11:01] *** Joins: foobaz21266 (~foobaz212@152.37.103.80)
[18:16:11] *** Quits: foobaz21266 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[18:19:16] *** Quits: andreasbuhr (~quassel@p549db9c0.dip0.t-ipconnect.de) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[18:19:36] <hg> TimMc: I think I missed the context; mind relinking?
[18:20:31] <TimMc> hg: https://fermatattack.secvuln.info/
[18:20:39] *** Joins: drathir_tor (~drathir@wireguard/tunneler/drathir)
[18:20:45] <hg> ❤
[18:23:34] *** Quits: madage (~madage@user/madage) (Remote host closed the connection)
[18:23:44] <hg> That Fermat guy did a bunch of cool math things
[18:24:18] *** Joins: madage (~madage@user/madage)
[18:29:10] <wasamasa> yeah
[18:29:21] <wasamasa> I remember reading a way too long book about Fermat's last proof
[18:29:31] <wasamasa> and I couldn't remember it actually explaining it
[18:29:50] <wasamasa> felt like some treatise about an urban legend
[18:30:08] <wasamasa> last theorem actually
[18:30:35] *** Quits: drathir_tor (~drathir@wireguard/tunneler/drathir) (Ping timeout: 240 seconds)
[18:30:48] <TimMc> Fermat's last troll
[18:31:25] <wasamasa> but then, my reading style is voracious
[18:31:27] <wasamasa> I go too fast
[18:32:18] <hg> I sometimes wonder which is better
[18:32:34] <hg> I am a very slow reader, but by the time I've finished reading something I usually have a pretty solid understanding of it
[18:33:51] <hg> I know many people who are something of the opposite (they read incredibly fast—certainly far faster than I do—but tend to need to talk it through after reading so that they can kind of index the information they took in)
[18:34:16] *** Quits: zer0bitz (~zer0bitz@dsl-hkibng32-54fbf8-224.dhcp.inet.fi) (Read error: Connection reset by peer)
[18:35:58] *** Joins: drathir_tor (~drathir@wireguard/tunneler/drathir)
[18:44:54] *** Quits: tent405 (~tent405@2600:1700:8150:214f::df1) (Ping timeout: 260 seconds)
[18:51:12] *** Joins: X-Scale` (~ARM@89.214.146.27)
[18:51:31] *** Joins: foobaz21248467 (~foobaz212@152.37.103.80)
[18:52:09] *** Joins: foobaz21266 (~foobaz212@152.37.103.80)
[18:52:36] *** Quits: X-Scale (~ARM@219.206.137.78.rev.vodafone.pt) (Ping timeout: 240 seconds)
[18:53:08] *** X-Scale` is now known as X-Scale
[18:56:25] *** Quits: foobaz21248467 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[18:56:59] *** Quits: foobaz21266 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[19:02:01] *** Joins: BOKALDO (~BOKALDO@user/bokaldo)
[19:02:57] *** Quits: int-e (~noone@int-e.eu) (Remote host closed the connection)
[19:03:43] *** Quits: hg (~halosghos@user/halosghost) (Quit: WeeChat 3.4.1)
[19:05:16] *** Joins: int-e (~noone@int-e.eu)
[19:06:44] *** Joins: hg (~halosghos@user/halosghost)
[19:10:46] *** Quits: nullheroes (~nullheroe@168.235.66.22) (Quit: WeeChat 2.8)
[19:16:55] *** Quits: drathir_tor (~drathir@wireguard/tunneler/drathir) (Ping timeout: 240 seconds)
[19:26:40] *** Quits: caveman (~caveman@gateway/tor-sasl/caveman) (Remote host closed the connection)
[19:30:06] *** Quits: saolof[m] (~saolofenv@2001:470:69fc:105::1:6188) (Quit: You have been kicked for being idle)
[19:41:35] *** Quits: igemnace (~ian@user/igemnace) (Remote host closed the connection)
[19:42:12] *** Joins: igemnace (~ian@user/igemnace)
[19:53:50] *** Joins: nsh (~lol@user/nsh)
[19:54:38] <nsh> someone who isn't me and also not-coincidentally can understand go please excise this fermat-weak-primes test for public RSA moduli from letsencrypt's blahcode - https://github.com/letsencrypt/boulder/pull/5853/files
[19:54:41] <nsh> thanks in advance
[19:55:36] <wasamasa> only Indiana Jones can do that
[19:55:53] <rqsd> ...Why?
[19:56:05] * wasamasa points at project name
[19:56:12] <sarnold> hey nsh :)
[19:56:24] <nsh> ohai sarnold 
[19:56:24] <nsh> et al
[19:57:07] <ms7821> you don't need to understand go to rewrite the algorithm
[19:57:39] <nsh> the point is to avoid having to think hard about understand anything. this is the internet for godssake 
[19:57:44] <nsh> +or
[19:58:06] <ms7821> what language do you prefer?
[19:58:46] <nsh> programs should do one thing and do it well; maybe a half dozen very closely related things but then you're on thin ice, buddy
[19:58:59] <nsh> but it's actually just half a dozen lines
[19:59:00] <sarnold> what's wrong with checking for keys made stupidly?
[19:59:22] <ms7821> I think nsh wants the weak primes code on its own
[19:59:27] * nsh nods
[19:59:34] *** Joins: dez (uid92154@user/dez)
[19:59:40] <nsh> probably exists some implementation in C and gnu multiprecision blah
[19:59:42] <wasamasa> there's a great python project name that's unfortunately taken already
[19:59:47] <wasamasa> itsdangerous
[19:59:50] <nsh> else it's really just a few lines of code
[20:00:06] <nsh> getting the modulus out of certificate files is likely more effort
[20:00:14] <nsh> but i can figure out incantations for that
[20:00:46] <sarnold> oh! hah :)
[20:02:08] <nsh> google "github fermat factorisation" and you get 1. python / 2. python 3 / 3. github topic / 4. another python implementation / 5. here's a sage notebook whynot 
[20:02:18] <ms7821> python's good
[20:02:21] <nsh> then more python
[20:02:53] <nsh> i just did google's foobar thing, the entire point of which appeared ot be "python is not good"
[20:03:01] <nsh> (and neither is java)
[20:03:24] <nsh> here are some blind testcases that you'll fail on performance reasons with no explanation while you volunteer your own time to save our HR efforts
[20:03:32] <ms7821> lol, of course google pushes go, they made it
[20:04:19] <ms7821> go will eternally be a silly language until it gets exceptions
[20:05:55] <ms7821> https://github.com/badkeys/badkeys/blob/main/badkeys/rsakeys/fermat.py here's hanno's code
[20:07:23] <ms7821> and you can enter your own keys at https://badkeys.info/
[20:08:27] *** Joins: brolin (~brolin@179.13.18.50)
[20:08:46] <nsh> ah nice, ty
[20:09:13] <wasamasa> huh
[20:09:18] <wasamasa> does it work on "raw" keys?
[20:09:27] <ms7821> background for everyone else https://fermatattack.secvuln.info/
[20:09:47] <ms7821> wasamasa: if you mean DER, I don't think so but you can convert easily enough
[20:09:48] <wasamasa> I've once come across an actual key, but only in form of its public parameters
[20:10:03] <wasamasa> I decided against writing the code to create an equivalent PEM file
[20:10:43] <hg> ms7821: I don't think I've ever heard such strong support for exceptions; it's OT, so perhaps in a PM or something, I'd love to hear more about that
[20:12:07] <ms7821> briefly, I like unchecked exceptions, like in JS or Python. Go's insistence on return values is fiddly, and tbh feels like a hangover from 90's C programming
[20:13:13] <hg> fascinating
[20:14:09] <hg> to each their own ☺ (I personally find exceptions to be a harder-to-reason-about `goto`, so I tend to avoid them like the plague and explicitly disable them in Cxx)
[20:14:53] <hg> ms7821: thank you for sharing
[20:14:59] <ms7821> return is still goto, and early return is really good for making code easy to read imo
[20:15:08] *** Quits: CryptoDavid (uid14990@id-14990.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[20:16:01] <ms7821> C++ exceptions can be hard work, I agree
[20:16:08] <ms7821> and I hate Java's checked exceptions
[20:16:41] *** Joins: Guyver2_ (~Guyver@guyver2.xs4all.nl)
[20:19:29] *** Joins: foobaz21266 (~foobaz212@152.37.103.80)
[20:19:30] *** Quits: Guyver2 (~Guyver@guyver2.xs4all.nl) (Ping timeout: 250 seconds)
[20:19:33] *** Guyver2_ is now known as Guyver2
[20:19:59] *** Joins: foobaz21248467 (~foobaz212@152.37.103.80)
[20:21:36] <TimMc> It seems like Rust is trying to thread that needle right now by providing both panic! and some syntactic sugar for structured exception return types.
[20:31:22] *** Joins: Guyver2_ (~Guyver@guyver2.xs4all.nl)
[20:33:00] *** Quits: Guyver2 (~Guyver@guyver2.xs4all.nl) (Ping timeout: 240 seconds)
[20:33:08] *** Guyver2_ is now known as Guyver2
[20:33:57] <hg> ms7821: out of interest, have you looked at how Zig handles errors?
[20:34:09] *** Joins: CryptoDavid (uid14990@id-14990.uxbridge.irccloud.com)
[20:34:22] <ms7821> never heard of it, will take a look
[20:34:44] <ms7821> hmm, looks like lua
[20:41:27] *** Joins: platta (~platta@pool-98-110-52-37.cmdnnj.fios.verizon.net)
[20:42:41] *** Joins: yauhsien (~Yau-Hsien@61-231-56-96.dynamic-ip.hinet.net)
[20:53:43] *** Joins: dude12312414 (~test@gateway/tor-sasl/dude12312414)
[21:01:00] *** Quits: dude12312414 (~test@gateway/tor-sasl/dude12312414) (Quit: THE RAM IS TOO DAMN HIGH)
[21:01:19] *** Joins: Everything (~Everythin@37.115.210.35)
[21:01:22] *** Quits: gproto23 (~gproto23@user/gproto23) (Read error: Connection reset by peer)
[21:04:17] <hg> are there card-based asymmetric encryption schemes?
[21:04:46] *** Quits: Haohmaru (~Haohmaru@195.24.53.110) ()
[21:04:47] <hg> like, Pocket-RC4 but with public/private keypairs instead of the deck order being a shard secret?
[21:08:59] *** Quits: Nebraskka (~Nebraskka@user/nebraskka) (Quit: Good day old chaps)
[21:09:17] * TimMc glues 8 cards together, then files the resulting block into the shape of a key
[21:10:20] *** Joins: Nebraskka (~Nebraskka@user/nebraskka)
[21:10:24] <TimMc> I assume anything you can do with cards is going to be weak, asymmetric or otherwise.
[21:11:30] *** Joins: gabriel1 (~gabriel1@user/gabriel1)
[21:13:40] <hg> lol
[21:14:12] <hg> TimMc: I think you're probably right (especially given that https://aarontoponce.org/wiki/crypto/card-ciphers suggests that all of them either have weaknesses or aren't fully analyzed)
[21:14:26] <hg> I'm thinking about this from a for-fun/teaching perspective
[21:15:59] *** Joins: TunnelJ (~TunnelJ@99-167-200-231.lightspeed.sndgca.sbcglobal.net)
[21:16:20] <TimMc> With 85 cards you could get 2^129 permutations.
[21:17:40] <TimMc> I wonder how many cards you have to reveal from an 85 card permutation before you've revealed half the entropy.
[21:18:12] *** Quits: foobaz21248467 (~foobaz212@152.37.103.80) (Quit: Client closed)
[21:18:12] *** Quits: foobaz21266 (~foobaz212@152.37.103.80) (Quit: Client closed)
[21:18:26] *** Joins: foobaz21266 (~foobaz212@152.37.103.80)
[21:18:29] *** Joins: foobaz21248467 (~foobaz212@152.37.103.80)
[21:18:39] <TimMc> ...sorry, my math was wrong, that was 10^128
[21:19:07] <TimMc> 52 cards is in fact 2^225
[21:19:26] <TimMc> so one deck might be fine!
[21:20:46] *** Joins: frigor (~osi@5.53.148.124)
[21:21:37] *** Joins: Gallomimia (~Gallomimi@node-1w7jra2a2gqpxzu2cmju6d09z.ipv6.telus.net)
[21:22:34] <hg> TimMc: can you walk me through that math, I feel like I missed something
[21:23:11] *** Quits: foobaz21248467 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[21:23:11] *** Quits: foobaz21266 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[21:24:29] <TimMc> log2(52!)
[21:24:51] <hg> ahh
[21:24:53] <hg> gotcha
[21:25:05] <TimMc> I have no idea how to operationalize that, though. :-P
[21:26:52] *** Quits: MajorBiscuit (~MajorBisc@c-001-026-027.client.tudelft.eduvpn.nl) (Quit: WeeChat 3.4)
[21:27:34] <hg> I mean, that's the entropy present in a given deck order chosen at random
[21:28:33] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Read error: Connection reset by peer)
[21:28:43] <hg> I don't know that it immediately applies to the public/private thing
[21:29:02] <hg> but it at least suggests that a random deck order is a reasonable source of high-entropy random numbers ☺
[21:34:01] <hg> perhaps it would result in the notion that some version of DHKE to get a shared secret (in the form of a random deck)
[21:34:12] <hg> … would be reasonably secure
[21:34:54] <TimMc> I *think* that if you show someone the first 21 cards, that gives them half the information about how the rest of the deck is organized. I think
[21:34:57] <TimMc> .
[21:36:27] <hg> interesting, why would that be?
[21:37:02] *** Quits: TunnelJ (~TunnelJ@99-167-200-231.lightspeed.sndgca.sbcglobal.net) (Ping timeout: 240 seconds)
[21:37:19] *** Joins: TunnelJ (~TunnelJ@99-167-200-231.lightspeed.sndgca.sbcglobal.net)
[21:38:26] <iz> it's like with card counting in blackjack
[21:39:46] <hg> mm, it's because each successive card in the deck eliminates a possible next card
[21:39:47] <TimMc> Check my work... last 31 cards would be log₂(31!) = ~112, and first 21 would be log₂(52!÷(52-21)!) = ~112
[21:40:02] <iz> the shown cards tell you that they won't be in the rest of the deck, giving a counter better stats about what might come next
[21:40:08] <TimMc> sorry, I garbled that
[21:40:11] <int-e> TimMc: Hmm that's oddly phrased. They learn the order of the first 21 cards, and the identity of the remaining 31 cards; only the latter is information about the rest of the deck.
[21:40:49] <iz> the way casios have fixed the card counting hole is they just use auto shufflers that reshuffle every hand
[21:41:08] <iz> you could do similar with a card based random number generator to remove that weakness
[21:41:28] <TimMc> (meant to say log₂(52!÷31!) but that's the same thing)
[21:41:50] *** Quits: TunnelJ (~TunnelJ@99-167-200-231.lightspeed.sndgca.sbcglobal.net) (Ping timeout: 250 seconds)
[21:42:14] <TimMc> int-e: Yeah, should be s/rest of // :-)
[21:44:04] <hg> TimMc: just trying to make sure I'm following: are you going down that route because you're thinking the key-exchange would involve revealing part of the deck to any Eve watching?
[21:44:11] <hg> (I don't think that's a good idea)
[21:44:51] <int-e> So you have... log2(21!) = 65.5 bits for the order of the first 21 cards; log2(52C21) = log2(52C31) = 47.4 bits for their identity, and log2(31!) = 112.7 bits of uncertainty about the remaining cards. Those add up to log2(52!) = 225.6 bits.
[21:45:35] <int-e> TimMc: right
[21:48:02] <TimMc> hmm, I'll need to digest that
[21:49:08] <TimMc> hg: I don't think it would involve revealing the raw deck, but I was wondering if there was some "processed
[21:49:27] <TimMc> ... deck" that you'd reveal half the entropy from.
[21:50:09] <TimMc> That's probably not how any of this would work, but I was also curious what "half" a permutation would be. :-P
[21:52:02] *** Joins: foobaz21266 (~foobaz212@152.37.103.80)
[21:57:11] *** Quits: foobaz21266 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[22:06:37] *** Joins: TunnelJ (~TunnelJ@64.201.243.34)
[22:08:20] <Alipha> hg: for symmetric encryption, as long as the keyspace is large enough, I'm skeptical very many of those card ciphers are crackable, with the intended usage of manually encrypting. The amount of ciphertext a person is able to generate isn't going to be enough for analysis, and someone manually encrypting isn't going to be vulnerable to chosen plaintext attacks or such
[22:09:21] <Alipha> hg: I don't think there's any asymmetric algorithm that we know of which is reasonably strong and can reasonably done by hand, unfortunately
[22:09:30] *** Joins: trillp (~trillp@137.220.51.190)
[22:09:40] <hg> damn
[22:09:43] <hg> that's what I want ☺
[22:11:45] * Alipha wonders how long it would take to do DH with pen and pencil with 1024-bit keys
[22:17:15] <ms7821> authentication's going to be fiddly however you do it
[22:19:04] *** Quits: frigor (~osi@5.53.148.124) (Quit: Lost terminal)
[22:20:27] *** Joins: instantp10neer (~instantp1@user/instantp10neer)
[22:23:14] *** Joins: aleck (~aleck@user/aleck)
[22:25:06] *** Quits: aleck1 (~aleck@user/aleck) (Ping timeout: 252 seconds)
[22:27:57] <TimMc> Is there a nice way of converting a permutation to a bit string and vice versa?
[22:28:30] <TimMc> Or, to put it another way, a maximally compact binary representation of a shuffled card deck?
[22:28:48] <iz> i think that's just.. the shuffled card deck in order
[22:29:03] <iz> if you could compact it more, you didn't shuffle it properly
[22:29:21] <TimMc> I mean a general algorithm, not a bespoke description of one ordering.
[22:29:33] <TimMc> constant space
[22:30:52] <TimMc> E.g. for just a 5 card deck, you should be able to use (slightly less than) 7 bits to represent any permutation of the deck.
[22:31:48] <maroon> so if you used 50, that there's an easy way to create the 50th perm in the 5*4*3*2*1 list of combos?
[22:31:52] <TimMc> I guess technically you could use the bits as an entropy source for a permutation function, heh
[22:32:05] <iz> oh.. well, i think you can't beat an index of every possible permutation
[22:32:48] <TimMc> Hmm! If you shuffled it using Fisher-Yates, you could encode each swap-or-not as a 0 or 1.
[22:33:01] <TimMc> (maybe??)
[22:34:14] <TimMc> (Durstenfeld's version)
[22:34:48] <TimMc> ...no, that algorithm uses random positions, not random choice of swap-or-not
[22:35:10] <TimMc> Ugh, you'd need to do some unpleasant fractional bit packing thing.
[22:35:39] *** Joins: dude12312414 (~test@gateway/tor-sasl/dude12312414)
[22:36:39] <maroon> for 5 cards, create random 7 bit number, if it's not 0-119, roll the RNG again. if the result is 50, then the 1st card is the 50+1//(4*3*2*1) non-chosen card, and the remainder is 50-(4*3*2)
[22:37:21] <maroon> then for the 2nd card, it's remainder+1//(3*2) showing the nth unchosen card to be the next one
[22:37:37] <TimMc> Where does 50 come from?
[22:37:49] <TimMc> just an example?
[22:37:57] <maroon> it's the result of rolling the rng until the value is 0-119
[22:38:48] <maroon> you can probably avoid all the -1's by adjusting your RNG roll +1 after you've made sure it's in-range
[22:39:08] <Alipha> TimMc: there's algorithms to do it, eg, https://stackoverflow.com/questions/7918806/finding-n-th-permutation-without-computing-others
[22:40:39] <maroon> so i was reinventing the wheel
[22:41:11] <maroon> though calculating n! for huge arrays can be hard
[22:41:54] *** Quits: dude12312414 (~test@gateway/tor-sasl/dude12312414) (Quit: THE RAM IS TOO DAMN HIGH)
[22:42:15] <TimMc> maroon: The idea here is you divide [0,119] into 5 buckets, then the chosen bucket into 4, then 3, then 2, then 1 and use the bucket offsets for the card choice?
[22:43:13] <maroon> yes, though im wondering if the math is easier by starting at the small end, so you avoid doing factorial of huge numbers
[22:43:49] *** Joins: sobkas (~sobkas@95.175.17.217)
[22:44:07] <maroon> nah, youd still need to know n! for the full array, at least once
[22:45:46] <TimMc> One of those SO answers links to https://en.wikipedia.org/wiki/Factorial_number_system which is just too much for me today.
[22:46:46] <iz> oh man, that's like timecube level
[22:48:20] *** Joins: drathir_tor (~drathir@wireguard/tunneler/drathir)
[22:49:08] <TimMc> int-e: I like how you divided up the split-deck question into card identity vs. card ordering.
[22:49:20] <hg> iz: oh god
[22:49:23] <hg> iz: timecube…
[22:49:39] <hg> I think I was this close to forgetting about that site altogether
[22:49:42] <hg> oh well
[22:50:04] <iz> the factorial permutohedron image on that wiki page gave me those vibes
[22:50:25] *** Quits: drathir_tor (~drathir@wireguard/tunneler/drathir) (Remote host closed the connection)
[22:50:41] <sarnold> lol
[22:50:47] <nsh> (for actual timecube physics see the amplituhedron)
[22:51:16] <nsh> (for the discussion of 'ideal' representations of arbitrary permutations consider most of the arguments from the discussion of perfect compression)
[22:51:20] <hg> nsh: I don't think “actual” and “timecube” are allowed in the same sentence
[22:51:24] <nsh> lol
[22:51:29] <hg> it's one of those matter/anti-matter things
[22:51:48] <hg> also
[22:52:02] <nsh> i prefer to believe gene actually stumbled upon a truth so profound it cracked his brain trying to get out
[22:52:07] <nsh> it's a less tragic story, nominally
[22:52:29] <hg> using “-hedron” as a suffix for anything other than, like “dodeca” is very likely to create vibes of “this is unreasonable to fit in a human's brain”
[22:52:40] <hg> not suggesting that such a vibe is accurate
[22:53:03] <maroon> rsa factoringhedron
[22:53:30] <hg> yes ☺
[22:53:53] <nsh> permutahedra are at least convex hulls 
[22:54:01] <hg> okay, so, now I know what I should try to do for my PhD: a not-horrific-by-hand, reasonable security asymmetric key exchange scheme
[22:54:13] <hg> I'll let y'all know when that's done ☺
[22:54:23] <hg> nsh: that was a sentence
[22:54:25] <hg> ☺
[22:54:36] <maroon> but 52! is like 2^226, so it can be hard to be calculating factorials that huge in order to identify the specific permutation
[22:55:32] <nsh> hg i mean just that it's a reasonable analogy/extension from platonic geometric polyhedra ( https://www.mimuw.edu.pl/~jarekw/pdf/Permutahedron.pdf )
[22:55:55] *** Quits: Klotz (~Klotzoman@gateway/tor-sasl/klotz) (Quit: Klotz)
[22:55:59] <nsh> but things get weird pretty quickly after that
[22:56:52] <nsh> ie we gave some concept artists a big bag of drugs and let them read physics papers: https://www.mimuw.edu.pl/~jarekw/pdf/Permutahedron.pdf
[22:56:53] <nsh> no
[22:56:55] <nsh> https://www.google.com/search?q=amplituhedron&client=firefox-b-d&sxsrf=APq-WBu0COwkRTKGD9dWD-P2CQGYQcve9A:1647458767506&source=lnms&tbm=isch&sa=X&ved=2ahUKEwji6PmUrsv2AhV963MBHYWCBuwQ_AUoAXoECAEQAw&biw=1447&bih=887&dpr=1.09
[22:57:57] <nsh> halp i tried to get into fashion modelling but ended up calculating particle scattering amplitudes... https://www.google.com/imgres?imgurl=https%3A%2F%2Ffreight.cargo.site%2Fw%2F4046%2Fq%2F75%2Fi%2Fc067998762dc025cfbab3a9185df58dd33fd8b42bead97bae2a54a72190804a4%2FAmphi2.1.jpeg&imgrefurl=https%3A%2F%2Fimaginasia.org%2FA-Collection-of-Amplituhedron&tbnid=vKUYCXMhrcp7RM&vet=10CAkQMyhsahcKEwjgk-exrsv2AhUAAAAAHQAAAAAQAg..i&docid=1orieJSeNLqV1M&w=4046&h=2698&q=amplituhedro
[22:57:57] <nsh> n&client=firefox-b-d&ved=0CAkQMyhsahcKEwjgk-exrsv2AhUAAAAAHQAAAAAQAg
[22:57:59] <nsh> ach, nm
[23:00:14] *** Joins: drathir_tor (~drathir@wireguard/tunneler/drathir)
[23:00:35] <sarnold> I think you'd have trouble fitting in to a car, bus, train, airplane, etc, wearing that
[23:01:25] <hg> “In mathematics, the permutohedron of order n is an (n − 1)-dimensional polytope embedded in an n-dimensional space.”
[23:01:57] <hg> I assume someone, somewhere has thought to train a markov chain on math textbooks and the like and just see what comes out
[23:01:59] <iz> permutohedron is my new fav thing discovered today
[23:08:14] <hg> it's definitely my favorite word that I've learned recently
[23:13:42] *** Quits: drathir_tor (~drathir@wireguard/tunneler/drathir) (Remote host closed the connection)
[23:20:25] *** Joins: Klotz (~Klotzoman@gateway/tor-sasl/klotz)
[23:22:03] *** Quits: shkurata (~shkurata@ptr-8riebuil60vhi1zqt1v.18120a2.ip6.access.telenet.be) (Quit: Leaving...)
[23:26:33] *** Joins: nachnacht (~NachNacht@79.140.114.86)
[23:27:45] *** Quits: nachnacht (~NachNacht@79.140.114.86) (Client Quit)
[23:32:01] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[23:33:18] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 252 seconds)
[23:33:36] *** Quits: BOKALDO (~BOKALDO@user/bokaldo) (Quit: Leaving)
[23:34:48] *** Lord_of_Life_ is now known as Lord_of_Life
[23:50:58] *** Quits: son0p (~ff@181.136.122.143) (Ping timeout: 250 seconds)
[23:52:41] *** Joins: foobaz21248467 (~foobaz212@152.37.103.80)
[23:53:28] *** Joins: foobaz21266 (~foobaz212@152.37.103.80)
[23:59:25] *** Joins: Guest67 (~Guest67@134.56.5.35)
[23:59:32] *** Joins: cp_rox (~cp_rox@eduroam-external-69.leeds.ac.uk)
[23:59:35] *** Quits: foobaz21248467 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
