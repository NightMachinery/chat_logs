[00:00:11] <spacewrench> Hmmm, looking at multi_array now..
[00:02:09] <spacewrench> multi_array is something different, I believe.
[00:03:23] <spacewrench> I have things sort of working with a template <class Base,class ArrayEl> where you can make a new one as auto x = new( num_of_el ) flex_array<B,E>( num_of_el )
[00:05:04] <spacewrench> ...but getting the initializers for the various parts of the class is deep into variadic template territory, way over my pay grade.  I'll learn if I have to, but I thought maybe somebody else had already done it.
[00:05:08] <bv> std::vector<T> does hold a contiguous array of type T
[00:06:04] <spacewrench> Hmmm, maybe I can get the base class at the beginning of a single malloc'd block somehow...
[00:06:30] <spacewrench> struct Test { Base B; vector<E> V; }
[00:06:50] *** Quits: AmR (~AmREiSa@156.199.236.198) (Quit: Konversation terminated!)
[00:06:51] <spacewrench> auto a = new Test( base_init, { v0, v1, v2 } )
[00:07:36] <spacewrench> Ah, I remember why I didn't think vector<> would do it -- it can auto-resize, which means it can move somewhere else (right?)
[00:08:39] <bv> I don't know the fully constraints but it will reallocate its internal array if the array size must grow beyond its storage size
[00:09:30] <spacewrench> I need to keep everything in one place (which means that I can't resize...that's OK)
[00:09:34] <bv> if you "std::vector<T> t(100)" and never add more than 100 elements, the underlying storage is kept afaik
[00:10:30] <spacewrench> I'll give it a try...it shouldn't take long to figure out whether it'll work for me.  Thx!
[00:12:21] <bv> I don't know how to use it but std::vector takes an allocator if you need more control over how it uses memory internally
[00:20:11] <spacewrench> Nope, rats.  vector<T> has (more or less) a pointer to an array of Ts (which live somewhere else).  I could probably control where "somewhere else" is by fiddling with the allocator, but I need the array data to live in the same malloc'd block as the header.
[00:23:04] <bv> Eigen3 can "map" a pre-allocated buffer https://eigen.tuxfamily.org/dox/group__TutorialMapClass.html
[01:53:23] <fbiagent> the "right" thing is to use vector with an appropriate allocator
[01:53:45] <fbiagent> you can probably write a wrapper for it if you want to
[01:57:23] <spacewrench> I need the array to be contiguous wiht the header so that a hardware peripheral can understand what's in there.  The peripheral doesn't know how to follow a pointer to get more data somewhere else.
[01:59:50] <bv> I guess a custom allocator could do that.  Pre-allocate space for header+array and give array to std::vector.  Only concern I guess is if header causes array to not be aligned.
[02:01:17] <spacewrench> True...I can get the memory to exist ahead of the array.  But I still have the problem of explaining to C++ what's in that header.  (Actually, I've mostly got it working; my real problem is how to do the variadic templates to initialize everything!)
[02:02:13] <spacewrench> And I know Boost is full of variadic-template magic, so I was kind of hoping there'd be an implementation of what I want.
[02:37:28] *** Quits: zen_coder (~zen_coder@2a02:8109:a280:2d8d:55e3:354c:cb16:8919) (Quit: Konversation terminated!)
[03:34:09] <fbiagent> allocator is easy to write
[03:38:34] *** Quits: Soni (~quassel@autistic.space) (Ping timeout: 250 seconds)
[04:12:19] *** Joins: Soni (~quassel@autistic.space)
[04:34:49] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:9d44:ce22:b648:2a17) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[07:02:31] *** Quits: hkaiser (~hkaiser@2600:1700:a50:99a0:b9a9:66c6:1118:71cc) (Quit: Bye!)
[08:30:30] *** Joins: Martchus_ (~martchus@dynamic-095-117-173-246.95.117.pool.telefonica.de)
[08:30:57] *** Quits: Martchus (~martchus@dynamic-077-009-042-041.77.9.pool.telefonica.de) (Ping timeout: 252 seconds)
[10:10:50] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:b8ef:e8a6:302c:c34c)
[10:36:54] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:b8ef:e8a6:302c:c34c) (Ping timeout: 252 seconds)
[10:52:59] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:4993:549:e4aa:55f6)
[11:30:39] *** Joins: nwulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[11:34:39] *** Quits: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 252 seconds)
[11:35:31] *** Joins: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[11:39:08] *** Quits: nwulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 250 seconds)
[12:38:20] *** Quits: C-Man (~C-Man@78.31.190.82) (Ping timeout: 272 seconds)
[13:42:07] *** Quits: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 256 seconds)
[13:42:48] *** Joins: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[15:02:11] *** Joins: hkaiser (~hkaiser@2600:1700:a50:99a0:301b:a260:8e:7869)
[15:15:26] *** Joins: C-Man (~C-Man@78.31.190.82)
[16:45:44] *** Quits: hkaiser (~hkaiser@2600:1700:a50:99a0:301b:a260:8e:7869) (Quit: Bye!)
[18:19:00] *** Joins: kraa (~kraa@107-190-7-216.cpe.teksavvy.com)
[18:39:09] *** Joins: hkaiser (~hkaiser@2620:105:b00b:4126::1709)
[18:52:37] *** Quits: hkaiser (~hkaiser@2620:105:b00b:4126::1709) (Ping timeout: 240 seconds)
[19:15:33] *** Joins: hkaiser (~hkaiser@2620:105:b00b:4126::1709)
[19:22:36] *** Quits: hkaiser (~hkaiser@2620:105:b00b:4126::1709) (Ping timeout: 240 seconds)
[20:08:46] *** Joins: nwulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[20:12:12] *** Quits: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 252 seconds)
[21:00:15] *** Joins: hkaiser (~hkaiser@2600:1700:a50:99a0:cc76:4102:9f47:f9c0)
[21:38:17] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:4993:549:e4aa:55f6) (Ping timeout: 240 seconds)
[21:45:07] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:ac3a:7c81:c789:5753)
[22:55:19] *** Joins: Codaraxis (~Codaraxis@user/codaraxis)
