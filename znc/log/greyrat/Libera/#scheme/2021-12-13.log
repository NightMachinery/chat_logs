[00:15:31] *** Joins: TCZ (~tcz@91.150.178.124)
[00:21:24] *** Joins: yewscion (~yewscion@52.94.133.128)
[00:23:32] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[00:48:49] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[00:54:13] *** Quits: gproto23 (~gproto23@user/gproto23) (Remote host closed the connection)
[01:13:48] *** Joins: jwd_ (~jwd@23.252.56.93)
[01:18:41] *** Quits: torbjornsd (~torbjorns@213.158.35.13) (Remote host closed the connection)
[01:21:28] *** Joins: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net)
[01:26:10] *** Quits: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net) (Remote host closed the connection)
[01:27:50] *** Joins: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net)
[01:42:59] *** Quits: livoreno (~livoreno@user/notzmv) (Ping timeout: 268 seconds)
[01:45:10] *** Joins: m455 (~m455@user/m455)
[01:45:27] *** Joins: seninha (~seninha@user/seninha)
[01:49:16] *** Quits: seninha (~seninha@user/seninha) (Client Quit)
[01:50:17] *** Quits: TCZ (~tcz@91.150.178.124) (Quit: Leaving)
[02:14:14] *** Joins: chillpc (~chillpc@141.187.20.95.dynamic.jazztel.es)
[02:16:02] *** Parts: chillpc (~chillpc@141.187.20.95.dynamic.jazztel.es) ()
[02:24:30] *** Quits: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net) (Ping timeout: 256 seconds)
[02:51:57] *** Joins: seninha (~seninha@user/seninha)
[02:53:58] *** Quits: yewscion (~yewscion@52.94.133.128) (Ping timeout: 256 seconds)
[02:59:03] *** Quits: badkins (~badkins@136.56.92.199) (Remote host closed the connection)
[03:07:10] *** Quits: jwd_ (~jwd@23.252.56.93) (Quit: jwd_)
[03:25:38] *** Joins: badkins (~badkins@136.56.92.199)
[03:27:22] *** Joins: lockywolf (~lockywolf@vultr-seoul-openbsd.lockywolf.net)
[03:33:38] *** Quits: civodul (~user@guix/contributor/civodul) (Ping timeout: 256 seconds)
[03:34:38] *** Joins: jwd_ (~jwd@23.252.56.93)
[03:44:43] *** Quits: m455 (~m455@user/m455) (Quit: WeeChat 3.0)
[03:45:01] *** Joins: m455 (~m455@user/m455)
[03:49:55] *** Quits: m455 (~m455@user/m455) (Quit: WeeChat 3.0)
[03:50:12] *** Joins: m455 (~m455@user/m455)
[03:50:54] *** Joins: skapata (~Skapata@2804:14c:87b0:a6f9:c514:d4dd:e381:3dae)
[03:50:54] *** Quits: skapata (~Skapata@2804:14c:87b0:a6f9:c514:d4dd:e381:3dae) (Changing host)
[03:50:55] *** Joins: skapata (~Skapata@user/skapata)
[03:50:57] *** Quits: m455 (~m455@user/m455) (Client Quit)
[03:51:00] *** Quits: seninha (~seninha@user/seninha) (Remote host closed the connection)
[03:51:10] *** Joins: aeka` (~aeka@2606:9580:100:c:8757:8ee:ec9c:991c)
[03:51:31] *** Joins: m455 (~m455@user/m455)
[03:52:29] *** Quits: aeka (~aeka@2606:6080:1002:9:ffc4:b9c1:20ad:82f9) (Ping timeout: 268 seconds)
[03:59:38] *** Quits: Spawns_Carpeting (~weechat@user/spawns-carpeting/x-6969421) (Quit: WeeChat 3.0)
[04:03:38] *** Joins: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net)
[04:16:48] *** Quits: jwd_ (~jwd@23.252.56.93) (Quit: jwd_)
[04:38:59] *** Joins: klovett (~klovett@107.115.32.161)
[04:46:31] *** Joins: seninha (~seninha@user/seninha)
[04:48:50] *** Quits: lockywolf (~lockywolf@vultr-seoul-openbsd.lockywolf.net) (Ping timeout: 260 seconds)
[04:49:02] *** Quits: taylan (~taylan@user/taylan) (Quit: Leaving)
[04:53:15] *** Quits: tripfandango (~tripfanda@5.29.44.90) (Ping timeout: 252 seconds)
[05:02:47] *** Quits: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net) (Ping timeout: 252 seconds)
[05:07:06] *** Joins: adot (~adot@2a0c:5bc0:40:2e25:c488:3ff9:2d00:3207)
[05:07:13] *** Joins: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net)
[05:09:40] *** Joins: lockywolf (~lockywolf@vultr-seoul-openbsd.lockywolf.net)
[05:14:39] *** Quits: badkins (~badkins@136.56.92.199) (Remote host closed the connection)
[05:15:22] *** Joins: badkins (~badkins@136.56.92.199)
[05:20:03] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 268 seconds)
[05:22:59] *** Joins: Skyz (~Skyz@user/skyz)
[05:41:57] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[05:44:47] *** Joins: s-liao (~s-liao@101.86.96.154)
[05:47:22] *** Quits: schulze (~schulze@dynamic-095-116-123-184.95.116.pool.telefonica.de) (Ping timeout: 256 seconds)
[06:04:51] *** Quits: adot (~adot@2a0c:5bc0:40:2e25:c488:3ff9:2d00:3207) (Ping timeout: 256 seconds)
[06:52:34] *** Quits: seninha (~seninha@user/seninha) (Remote host closed the connection)
[06:54:48] *** Quits: jao (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net) (Ping timeout: 256 seconds)
[07:00:52] *** Joins: badkins (~badkins@136.56.92.199)
[07:01:31] *** Quits: s-liao (~s-liao@101.86.96.154) (Quit: Client closed)
[07:01:50] *** Joins: s-liao (~s-liao@101.86.96.154)
[07:01:51] *** Quits: Skyz (~Skyz@user/skyz) (Quit: Client closed)
[07:05:47] *** Quits: badkins (~badkins@136.56.92.199) (Remote host closed the connection)
[07:05:58] *** Joins: badkins (~badkins@136.56.92.199)
[07:08:10] *** Joins: Spawns_Carpeting (~Spawns_Ca@user/spawns-carpeting/x-6969421)
[07:10:30] *** Joins: seninha (~seninha@user/seninha)
[07:12:35] *** Quits: terrorjack (~terrorjac@2a01:4f8:1c1e:509a::1) (Quit: The Lounge - https://thelounge.chat)
[07:13:45] *** Quits: badkins (~badkins@136.56.92.199) (Remote host closed the connection)
[07:14:28] *** Joins: badkins (~badkins@136.56.92.199)
[07:14:46] *** Joins: terrorjack (~terrorjac@2a01:4f8:1c1e:509a::1)
[07:19:11] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 252 seconds)
[07:23:14] *** Quits: seninha (~seninha@user/seninha) (Remote host closed the connection)
[07:30:55] *** Quits: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net) (Ping timeout: 252 seconds)
[07:32:16] *** Quits: cjb (~cjb@user/cjb) (Quit: rcirc on GNU Emacs 29.0.50)
[07:39:57] *** Joins: adot (~adot@2a0c:5bc0:40:2e25:cc56:7e08:d30a:f449)
[07:43:49] *** Joins: livoreno (~livoreno@user/notzmv)
[08:08:38] *** Joins: badkins (~badkins@136.56.92.199)
[08:13:00] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 256 seconds)
[08:27:43] *** Quits: livoreno (~livoreno@user/notzmv) (Read error: Connection reset by peer)
[08:55:35] *** Quits: klovett (~klovett@107.115.32.161) (Quit: ZZZzzzâ€¦)
[09:01:05] *** Quits: adot (~adot@2a0c:5bc0:40:2e25:cc56:7e08:d30a:f449) (Ping timeout: 256 seconds)
[09:07:38] *** Quits: elderK (uid205007@id-205007.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[09:10:10] *** Quits: turlando (~turlando@user/turlando) (Ping timeout: 260 seconds)
[09:10:17] *** Joins: turlando (~turlando@93-42-250-112.ip89.fastwebnet.it)
[09:10:17] *** Quits: turlando (~turlando@93-42-250-112.ip89.fastwebnet.it) (Changing host)
[09:10:18] *** Joins: turlando (~turlando@user/turlando)
[09:19:49] *** Quits: s-liao (~s-liao@101.86.96.154) (Quit: Client closed)
[09:23:07] *** Quits: zwr (~zwr@2804:d45:b966:fb00:c2a5:ef0e:5ed1:6178) (Ping timeout: 252 seconds)
[09:24:04] *** Joins: zwr (~zwr@2804:d45:b966:fb00:8070:51d:80f2:cc47)
[09:38:34] *** Quits: mononote (~mononote@user/mononote) (Ping timeout: 256 seconds)
[10:04:44] *** Quits: Spawns_Carpeting (~Spawns_Ca@user/spawns-carpeting/x-6969421) (Quit: WeeChat 3.3)
[10:08:29] *** Quits: catonano (~catonano@net-5-88-192-2.cust.vodafonedsl.it) (Quit: catonano)
[11:01:38] *** Joins: schulze (~schulze@dynamic-077-010-007-189.77.10.pool.telefonica.de)
[11:08:09] *** Joins: sdu (~doo@185.44.146.214)
[11:23:54] *** Joins: badkins (~badkins@136.56.92.199)
[11:29:04] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 256 seconds)
[11:43:17] *** Joins: s-liao (~s-liao@101.86.96.154)
[11:44:18] *** Joins: mononote (~mononote@user/mononote)
[12:02:16] *** Joins: skapata (~Skapata@2804:14c:87b0:a6f9:818e:55b0:ddc9:c071)
[12:02:16] *** Quits: skapata (~Skapata@2804:14c:87b0:a6f9:818e:55b0:ddc9:c071) (Changing host)
[12:02:16] *** Joins: skapata (~Skapata@user/skapata)
[12:13:45] *** Quits: s-liao (~s-liao@101.86.96.154) (Ping timeout: 256 seconds)
[12:26:23] *** Joins: civodul (~user@guix/contributor/civodul)
[12:29:49] *** Quits: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de) (Quit: Leaving)
[12:51:36] *** Joins: gproto23 (~gproto23@user/gproto23)
[12:54:54] *** Joins: Avichi (~Avichi@2a01:e34:ec21:e7a0:fd8b:915c:f9ef:485a)
[13:33:34] *** Joins: s-liao (~s-liao@101.86.96.154)
[13:37:04] *** Quits: Avichi (~Avichi@2a01:e34:ec21:e7a0:fd8b:915c:f9ef:485a) (Ping timeout: 256 seconds)
[14:11:02] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 240 seconds)
[14:28:52] *** Quits: s-liao (~s-liao@101.86.96.154) (Quit: Client closed)
[14:32:31] *** Joins: s-liao (~s-liao@101.86.96.154)
[14:42:49] *** Joins: seninha (~seninha@user/seninha)
[15:09:55] *** Parts: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1) ()
[15:10:49] *** Joins: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1)
[15:11:26] *** Joins: ytc (~ytc@fsf/member/ytc)
[15:14:06] <ytc> hello.  i have a question.
[15:14:24] <ytc> (define s (cons-stream 1 (stream-map s s)))
[15:14:46] <ytc> i'm sorry
[15:14:56] <ytc> (define s (cons-stream 1 (stream-map + s s)))
[15:15:35] <ytc> isn't that should generate a stream like '(1 2 2 4 2 4 4 8 2 4 4 8 4 8 8 16) ?
[15:16:32] <ytc> could you please explain it to me?
[15:25:47] *** Joins: badkins (~badkins@136.56.92.199)
[15:28:34] <ytc> okay i got it when i looked at the definition of the `stream-map'.  thanks anyway. :)
[15:28:44] *** Parts: ytc (~ytc@fsf/member/ytc) (ERC 5.4 (IRC client for GNU Emacs 28.0.90))
[15:30:09] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 252 seconds)
[15:44:10] *** Joins: chillpc (~chillpc@141.187.20.95.dynamic.jazztel.es)
[15:44:18] *** Parts: chillpc (~chillpc@141.187.20.95.dynamic.jazztel.es) ()
[16:06:13] *** Joins: tripfandango (~tripfanda@bzq-219-32-122.isdn.bezeqint.net)
[16:15:19] <dpk> a way to make the ellipsis in pattern matching non-greedy would be handy
[16:17:05] <dpk> then i could just use the pattern (_ positional-args ... (required-keyword-name required-keyword-binding) ... (optional-keyword-name optional-keyword-binding initializer) ...) in https://gitlab.com/dpk/presrfis/-/blob/master/syntax-keywords/syntax-keywords.scm#L41-L106
[16:17:11] <dpk> rather than that big mess
[16:18:03] <dpk> as it is, positional-args ... will just eat up all the args even though they have to be identifiers, not lists as in the rest
[16:19:44] <dpk> and i have to have something equivalent to that big mess even if i implement it in syntax-case, which can at least make the remainder of the macro slightly less bananas
[16:20:16] *** Quits: s-liao (~s-liao@101.86.96.154) (Ping timeout: 256 seconds)
[16:20:45] *** Joins: notzmv (~zmv@user/notzmv)
[16:21:54] *** Joins: badkins (~badkins@136.56.92.199)
[16:26:34] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 256 seconds)
[16:30:01] *** Joins: taylan (~taylan@user/taylan)
[16:39:52] *** Joins: s-liao (~s-liao@101.86.96.154)
[16:43:56] *** Quits: seninha (~seninha@user/seninha) (Ping timeout: 268 seconds)
[16:54:52] *** Joins: yewscion (~yewscion@52.94.133.128)
[16:58:56] *** Joins: badkins (~badkins@136.56.92.199)
[17:00:24] *** Joins: seninha (~seninha@user/seninha)
[17:18:19] *** Joins: tatsumaru (~tatsumaru@78.83.244.47)
[17:18:51] <tatsumaru> guys would you say SICP is the go to book to understand how to write good functional code?
[17:24:22] <schulze> tatsumaru: Hi, SICP does not only to "pure" functional code, they introduce set! somewhere in Chapter 3 in the discussion about state and use mutation more in the later chapters. But I still think, that SICP is one of the best introductary tests.
[17:24:27] <schulze> texts.
[17:31:05] <sham1> Using set! is fine with functional code if you properly constrain your side-effects within your function
[17:35:42] *** Quits: tripfandango (~tripfanda@bzq-219-32-122.isdn.bezeqint.net) (Ping timeout: 256 seconds)
[17:39:01] <schulze> Yep, an the book nicely discusses how one can try to keep state local.
[17:40:45] <schulze> The main benefit for me was, that when I looked at other programming languages later, I regulaly thougt: Wow, I know all these patterns from SICP.
[17:43:06] <tatsumaru> are composite values always implemented as trees in all lisps?
[17:44:38] <schulze> tatsumaru: I donÃ't really understand the question. There is no tree datatype in Scheme or Lisp.
[17:45:13] <schulze> tatsumaru: SICP uses lists often with a symbolic tag. 
[17:45:53] <schulze> tatsumaru: But most Lisps also have some form of struct/record type, that one could use instead.
[17:56:37] <drakonis> huh, there's a scheme written in common lisp now
[17:56:43] <drakonis> airship scheme, how neat.
[17:57:19] *** Joins: tripfandango (~tripfanda@2a00:a040:19e:72a1:f4e2:45ab:e718:1db2)
[17:59:10] *** Joins: klovett (~klovett@107.115.32.161)
[17:59:42] *** Quits: gproto23 (~gproto23@user/gproto23) (Remote host closed the connection)
[18:01:00] <dpk> alas, the repo seems rather deadÂ â€”Â i'm not sure how usable it actually is at present. last i heard it was still a work in progress
[18:01:57] *** Quits: tripfandango (~tripfanda@2a00:a040:19e:72a1:f4e2:45ab:e718:1db2) (Ping timeout: 252 seconds)
[18:02:05] <drakonis> there's an irc channel
[18:03:42] <drakonis> ah, heck, the author's here too
[18:03:54] <drakonis> aeth: what's the status on airship right now?
[18:04:52] *** Joins: jao (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net)
[18:06:53] <tatsumaru> schulze in at least one lisp composite values such as vectors are implemented as trees which allows for cheap copying 
[18:09:15] *** Joins: tripfandango (~tripfanda@2a00:a040:19e:72a1:f4e2:45ab:e718:1db2)
[18:10:31] <sjamaan> tatsumaru: I think vectors traditionally are implemented as contiguous memory blocks with a tag in front, but I'm sure there are Lisps where that's not the case (e.g. Clojure has varying implementations of its primitives from which it chooses at runtime)
[18:15:04] *** Quits: libfud (~libfud@2600:1700:48e8:d1cf:aaa1:59ff:fe53:95b8) (Quit: WeeChat 3.3)
[18:20:03] <tatsumaru> sjamaan: hmm, interesting
[18:20:55] <sjamaan> It kind of has to do that because its vector operations are all purely functional
[18:21:00] <sjamaan> Otherwise it'd be horribly inefficient
[18:39:47] <schulze> tatsumaru: At least Owl Lisp uses trees for vectors internally, yes. But as sjamaan wrote, I would also think of continuous blocks of memory when I see the word vector.
[18:40:09] *** Quits: badkins (~badkins@136.56.92.199) (Remote host closed the connection)
[18:40:44] *** Joins: badkins (~badkins@136.56.92.199)
[18:43:01] *** Quits: taiju (~taiju@M014013236064.v4.enabler.ne.jp) (Read error: Connection reset by peer)
[18:44:09] *** Joins: taiju (~taiju@240b:253:ec40:2400:651e:f83b:5890:99a6)
[18:50:13] *** Quits: s-liao (~s-liao@101.86.96.154) (Quit: Client closed)
[18:52:11] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 252 seconds)
[19:06:31] *** Joins: badkins (~badkins@136.56.92.199)
[19:09:11] *** Quits: badkins (~badkins@136.56.92.199) (Remote host closed the connection)
[19:09:20] *** Joins: badkins (~badkins@136.56.92.199)
[19:09:52] *** Joins: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de)
[19:13:44] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 256 seconds)
[19:15:42] *** Joins: aeth (~aeth@user/aeth)
[19:17:37] *** Joins: trip_fandango (~tripfanda@2a00:a040:19e:72a1:b8b7:c89f:16b9:3e60)
[19:18:37] *** Joins: Spawns_Carpeting (~Spawns_Ca@user/spawns-carpeting/x-6969421)
[19:18:42] *** Quits: tripfandango (~tripfanda@2a00:a040:19e:72a1:f4e2:45ab:e718:1db2) (Ping timeout: 260 seconds)
[19:19:48] <amazigh> Great meme: what do you call a group of scheme experts?
[19:19:51] <amazigh> pros of cons
[19:20:23] <amazigh> seen on the fediverse
[19:20:25] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 252 seconds)
[19:21:29] *** Joins: aeth (~aeth@user/aeth)
[19:23:36] *** Joins: X-Scale` (~ARM@206.46.158.5.rev.vodafone.pt)
[19:25:49] *** Quits: X-Scale (~ARM@83.223.225.184) (Ping timeout: 240 seconds)
[19:25:49] *** X-Scale` is now known as X-Scale
[19:26:35] <jcowan> Lisp in general (except Clojure, I guess)
[19:27:59] <amazigh> hey jcowan, how are you doing?
[19:28:09] <jcowan> good, in mtg
[19:28:36] <gwatt> I assume that's short for "meeting", but I prefer to think of it as "magic: the gathering"
[19:28:51] * jcowan lols
[19:29:38] <amazigh> x)
[19:29:42] *** Parts: tatsumaru (~tatsumaru@78.83.244.47) ()
[19:31:42] *** Quits: sp1ff (~user@c-73-189-25-64.hsd1.ca.comcast.net) (Ping timeout: 265 seconds)
[19:46:46] <drakonis> clojure...
[19:47:36] <amazigh> ^^'
[19:47:41] <amazigh> clojure is fine!
[19:47:47] <amazigh> jvm is not
[19:48:02] <amazigh> drakonis: what makes you say that?
[19:48:08] <drakonis> the userbase, really.
[19:48:23] <amazigh> oh
[19:48:39] <amazigh> what the userbase has to do with that? I read they cult their BDFL..
[19:48:57] <drakonis> yeah
[19:48:59] <amazigh> you mean the product produced by clojure folks?
[19:49:30] <drakonis> the lang itself is fine
[19:49:31] <amazigh> *products
[19:49:40] *** Joins: gproto23 (~gproto23@user/gproto23)
[19:50:24] <amazigh> s/products/software/
[19:51:01] <sham1> The language is fine, if a bit alien compared to other Lisps. I agree that it's mostly the users that go under the skin
[19:51:50] <amazigh> what do clojure users do that is not good?
[19:51:59] <amazigh> Are they as bad as rust users?
[19:52:06] <drakonis> the cult of rich hickey
[19:52:15] <drakonis> attributing a very large amount of things to clojure
[19:52:24] <amazigh> things?
[19:52:28] <wasamasa> lol
[19:52:52] <amazigh> like clojure invented that, clojure is the best pragmattic LISP.
[19:52:57] <amazigh> ?
[19:52:59] <drakonis> yes
[19:53:03] <drakonis> just like that lol
[19:53:06] <wasamasa> they wouldn't dare saying LISP
[19:53:07] <amazigh> hmm
[19:53:16] <wasamasa> allcaps is out, remember
[19:53:16] <drakonis> they do, very often.
[19:53:22] <amazigh> like they did not dare saying datomic is rip of rdf
[19:53:25] <wasamasa> we're no longer in the era of allcaps keyboards
[19:53:31] <sham1> FORTRAN
[19:53:32] <amazigh> sorry!
[19:53:36] <wasamasa> lol
[19:53:38] <wasamasa> is it
[19:53:42] <amazigh> I did not know that
[19:54:03] <amazigh> datomic is mostly inspired from rdf :)
[19:54:17] <wasamasa> all I've seen so far from the rdf front is something about semantic web
[19:54:21] <amazigh> I am the data model is a triple store
[19:54:32] <wasamasa> which turned out to be hot air, mostly
[19:54:42] <amazigh> you need to break appart the RDF-framework mess
[19:54:50] <wasamasa> and then I might discover datomic?
[19:55:00] <amazigh> the tools and execution are useless imo, the ideas are very great
[19:55:14] <wasamasa> ideas are not worth much, execution is
[19:55:23] <amazigh> datomic is RDF done right.
[19:55:30] <wasamasa> didn't you learn a thing from the SRFI-168 debacle
[19:55:33] <sham1> Clojure does have many a neat idea it's taken in and "popularized", but the annoyance comes with its fans claiming that they invented it, or that for example other Lisps are "out-of-date" somehow just because Clojure exists
[19:55:36] <amazigh> ^^'
[19:55:56] <drakonis> https://blog.klipse.tech/databook/2021/12/10/dop-link.html
[19:56:05] <drakonis> this got posted to lobsters last friday
[19:57:01] <drakonis> i'm highly annoyed at how it treats clojure like it made immutable data structures viable
[19:57:26] <amazigh> great post afaict
[19:57:30] *** Quits: x88x88x (~x88x88x@2001:19f0:5:39a8:5400:3ff:feb6:73cb) (Read error: Connection reset by peer)
[19:57:32] <wasamasa> do you have any examples of anyone else doing that before them?
[19:57:41] <wasamasa> like, I dunno, erlang or something
[19:57:54] <wasamasa> otherwise this seems like lisp envy, lol
[19:57:56] <drakonis> the ml family, maybe?
[19:58:02] <amazigh> wasamasa: +1
[19:58:10] <sham1> Yeah. The MLs and relatedly for example Haskell
[19:58:41] <amazigh> maybe we are jealous of clojure buzz
[19:58:55] <wasamasa> yeah, but do you see anyone actually boasting how great haskell is for that?
[19:59:07] <amazigh> it is not as if they claimed for a decated that performance does not matter..
[19:59:24] <wasamasa> SML I've only seen in academic literature and compiler/interpreter PoCs
[19:59:25] <drakonis> to be fair, clojure has rich hickey hyping it at every corner
[19:59:44] <amazigh> what is the problem with that?
[19:59:55] <wasamasa> I picked erlang specifically because it does FP and is used in telecom industry
[19:59:56] * amazigh takes his evil advocate hat
[19:59:59] <amazigh> ;)
[20:00:19] <drakonis> the historical revisionism that arises from it
[20:00:51] <amazigh> and darkness
[20:00:57] <amazigh> hence darkness
[20:03:27] <drakonis> honestly, not too happy about that
[20:03:54] <wasamasa> honestly, I'd rather have clojure than CL fanboys
[20:03:55] <drakonis> has clojure ever gotten people to try other lisps?
[20:04:03] <drakonis> idk about that
[20:04:10] <wasamasa> greater net benefit
[20:04:37] <amazigh> drakonis: apparantly they read haskell.. see hyperfiddle
[20:04:52] <amazigh> and they reference them
[20:05:05] <amazigh> unlike some other programming language I will not cite
[20:05:15] <drakonis> ha
[20:05:20] <drakonis> which one is it?
[20:05:41] <wasamasa> no culture of eric naggums, language lawyering or lisp machine fetishism
[20:05:59] <dpk> "hygienic macros are toy macros", they say, but when i ask them how i test for free-identifier=? in Common Lisp, they suddenly go all quiet
[20:06:25] <amazigh> drakonis: python.
[20:06:27] <drakonis> oh
[20:06:28] <drakonis> hmmmm
[20:07:34] <sham1> Well that's of course because they only think of syntax-rules which, while useful, can seem like but a toy when compared to defmacro. Not knowing of stuff like syntax-case is *somewhat* excusable
[20:07:35] <amazigh> I mean, you might say, they do not cite their heritage because it is all self-serving research, except they do eye on Scheme in particular, contextvars are a direct descendants of scheme parameters (without the reference)
[20:08:25] <amazigh> for the record, contextvars, are more like continuation attachments
[20:09:17] <amazigh> they allow to share a global variable inside an async flow of execution.
[20:10:05] <amazigh> it is global to the flow of async functions, you can change the value with with bidule statment, similar the parametrize
[20:11:25] <amazigh> Wut! You will not believe what happened, I opend a .py, and then out of nowhere, a popin appears with SCHEME in allcaps... it is sign of some sort.
[20:11:29] <mdhughes> I mean, I like a lot of immutable data structures, and Clojure has themâ€¦ but you do also need mutable so it's not like you saved the world.
[20:12:13] <amazigh> my computer is trying to tell me stuff.
[20:12:24] <mdhughes> But the core claims of Clojure are at least not eye-rollingly impossible, like Rust's.
[20:12:43] <dpk> â€˜Scheme only needs hygienic macros because itâ€™s a Lisp-1â€™. also, wet streets cause rain
[20:13:32] <sham1> Mmhm. Taking a puritanical stance on the issue of mutability is a bit silly. And of course it doesn't help that at some point you need to give some sort of mutability anyway.
[20:15:07] <dpk> sham1: sure, but for all the breathless awe about â€˜the most advanced programming language in the worldâ€™ and how all other languages are Blub, youâ€™d think theyâ€™d show some self-awareness about their reactions to features other languages have that CL lacks
[20:16:11] <mdhughes> "We can serialize objects into JSON!" is the new "code and data are both sexpr", which is *true* but not sufficient.
[20:17:06] <sham1> Oh this was more of a dig towards Clojure and Haskell than CL, although I do also wish that there was more self-awareness in the CL ecosystem
[20:18:28] <sham1> Loading code fragments from streams of JSON, now that'd be incredible to watch someone actually try to do and justify
[20:19:22] <dpk> iâ€™ve found the Haskellers i know to be very interested in Lisp, though not necessarily in using it
[20:20:01] <dpk> i donâ€™t really know any Clojurers personally
[20:21:41] <amazigh> we need a https://ccbw.scm
[20:21:46] <wasamasa> conjurers
[20:21:54] <drakonis> ccbw.scm?
[20:22:17] <amazigh> chief cook bottle washer tribute to our grand editor =)
[20:22:19] <wasamasa> wait, is that the actual meaning behind conj
[20:22:30] <amazigh> conj = conjunction
[20:22:48] <sham1> Haskell does interesting things, but at points it feels like a practical joke being played on people, of trying to introduce as much mathematical jargon into software as possible while not being all that descriptive
[20:23:15] <amazigh> sham1: Zipheir will wake up angry if they read that ;)
[20:23:50] <mdhughes> I haven't seen a JSON coding system, but it wouldn't be hard. I wrote two different ones in XML!
[20:24:24] <amazigh> I do not know enough haskell to be able to tell whether their approach makes any sense, from a high level perspective "build a DSL" and "make it work" is similar to what lispers do
[20:24:43] <amazigh> mdhughes: JSON coding system, like a pl written in JSON?
[20:25:02] <sham1> Yes
[20:25:28] <mdhughes> amazigh: Yeah, like sexpr in JSON objects. Make all your control structures as objects, etc.
[20:25:51] <amazigh> mdhughes: there is one at least, but I do not recall the name, they even claim it is a lisp
[20:26:08] <amazigh> lisp with JSON syntax
[20:26:15] <amazigh> what can possibly go wrong.
[20:26:56] <wasamasa> https://github.com/kanaka/minimal
[20:27:48] <amazigh> I do not understand how it is delightful :/
[20:27:54] <mdhughes> MAL = Bad.
[20:28:06] <amazigh> OH!
[20:28:30] <mdhughes> (in Latin)
[20:28:58] <mdhughes> But specifically in this case, string-typing all your keywords sucks.
[20:29:05] <wasamasa> welcome to JS
[20:29:45] <sham1> > Functions, symbols and strings are all in the same namespace making miniMAL a "Lisp-0".
[20:30:27] <amazigh> ahha
[20:30:32] <sham1> Oh, just what I wanted. Not only is it probably stringly typed, it's also made in such a way that all identifiers are strings!
[20:30:53] <wasamasa> welcome to JSON
[20:31:06] <wasamasa> I dunno what else you expected when asking for lisp with JSON syntax
[20:31:09] <mdhughes> What I did in the better of my XML languages was that tags are commands, either built-in or in define blocks, and comparators and other flow control are attributes, ifvar="x" ifvalue="y", loop="true", etc.
[20:32:02] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 240 seconds)
[20:32:12] <mdhughes> In JSON that'd be something like foo:{ifvar:"x", ifvalue:"y", loop:"true", body:[ ... ]}
[20:32:59] <wasamasa> quiz question: what type do foo and such have/
[20:33:27] <sham1> I would have expected a JSON-y Lisp to at least use the object literals for something, but this is literally nested arrays
[20:33:47] *** Joins: aeth (~aeth@user/aeth)
[20:33:50] <mdhughes> foo's a string, because all object keys are strings, but at least the block is an object.
[20:34:01] <wasamasa> wow, a stringly types object
[20:34:05] <wasamasa> fascinating
[20:35:06] <wasamasa> anyway, I guess the array thing is for size optimization purposes
[20:35:17] <sham1> Most pikely
[20:35:20] <wasamasa> handling objects in JS is kind of painful
[20:35:23] <mdhughes> And at least you don't need quotes around everything if you use object keys.
[20:39:07] <drakonis> pikely indeed
[20:48:12] <drakonis> wasamasa: regarding cl fanboys, these can be found on any language, sadly.
[20:48:28] <drakonis> you might also know them as rust fanboys
[20:48:38] <wasamasa> I didn't know any language is rust
[20:48:58] <wasamasa> that explains everything
[20:49:19] <drakonis> i mean that you can find these in go, python, ruby, julia
[20:49:23] <drakonis> the possibilities are endless
[20:49:26] <wasamasa> really
[20:49:45] <wasamasa> where are the people suggesting python can do anything and is without faults?
[20:49:52] *** Joins: adot (~adot@2a0c:5bc0:40:2e25:348d:ed26:5298:67f1)
[20:50:05] <sham1> Data science, usually
[20:50:10] <drakonis> ^
[20:50:20] <wasamasa> and outside of that?
[20:50:30] <wasamasa> data science isn't anything after all
[20:50:36] <drakonis> ah, forgot to mention javascript's ecosystem
[20:50:47] *** Quits: badkins (~badkins@136.56.92.199) (Remote host closed the connection)
[20:50:51] <wasamasa> no, I see other language ecosystems being more humble and realistic
[20:52:36] <wasamasa> there isn't anyone suggesting every popular programming language is julia in sheep's clothing
[20:53:03] <wasamasa> with lisp though, the smugness is strong
[20:53:20] <drakonis> lisp weenies amirite
[20:53:53] <amazigh> lispppppppppppppp all the things
[20:53:55] * amazigh runs...
[20:54:01] <drakonis> agreedo
[20:55:32] *** Joins: badkins (~badkins@136.56.92.199)
[20:56:23] <drakonis> look, the thing i like about common lisp is that it makes no assumptions about feature languages, it has everything
[20:56:29] <sham1> Well I'd say that Scheme isn't immune to the whole "smug Lisp weenie" trope either
[20:56:42] <drakonis> oops, language features
[20:56:47] <mdhughes> https://wiki.c2.com/?SmugLispWeenie
[20:56:48] <drakonis> i can do it whatever way i want
[20:56:59] *** Joins: X-Scale` (~ARM@92.250.97.79)
[20:57:16] <drakonis> that first picture is surprisingly accurate though
[20:58:29] *** Quits: X-Scale (~ARM@206.46.158.5.rev.vodafone.pt) (Ping timeout: 256 seconds)
[20:58:29] *** X-Scale` is now known as X-Scale
[21:00:09] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 252 seconds)
[21:00:42] <wasamasa> meh, c2 is broken
[21:00:59] <drakonis> its a shame its very much dead/archived at this point
[21:01:01] <drakonis> https://sic.pm
[21:02:43] *** Quits: thevishy (~Nishant@2405:201:f005:c007:81f3:ee3c:76f0:8869) (Ping timeout: 252 seconds)
[21:02:43] *** Joins: yhsiveht (~Nishant@2405:201:f005:c007:d93e:9746:14f0:2f69)
[21:02:49] <mdhughes> Oh, I hate the new UI they added. But the content's still there?
[21:03:01] <drakonis> still, yeah.
[21:04:05] *** Quits: yhsiveht (~Nishant@2405:201:f005:c007:d93e:9746:14f0:2f69) (Client Quit)
[21:07:38] *** Quits: civodul (~user@guix/contributor/civodul) (Ping timeout: 256 seconds)
[21:11:19] *** Joins: livoreno (~livoreno@user/notzmv)
[21:11:21] *** Joins: badkins (~badkins@136.56.92.199)
[21:11:51] *** Quits: notzmv (~zmv@user/notzmv) (Remote host closed the connection)
[21:12:31] *** Joins: notzmv (~zmv@user/notzmv)
[21:18:39] <lagash> oh, didn't realize they got their own domain back!
[21:18:54] <drakonis> yeah!
[21:19:12] <drakonis> i should start posting in it
[21:19:21] <drakonis> largely because it does lobsters in a much nicer way
[21:23:22] <lagash> nicer how?
[21:23:30] <amazigh> good question
[21:23:46] <lagash> I've yet to get an invite to Lobsters, not that I'm actively looking..
[21:24:04] <amazigh> I have an account on lobsters, but I do not know you :|
[21:24:08] <amazigh> sorry!
[21:24:11] <amazigh> maybe later :)
[21:24:24] <drakonis> UI, aggregations
[21:24:59] <amazigh> but lobsters is hijacked by lazy programmers, only seeing pros in their company tech. Still better than HN tho
[21:25:10] <drakonis> yes
[21:25:12] <drakonis> sadly.
[21:25:26] <drakonis> lobsters became a really good way to drive clicks to your thing
[21:26:24] <amazigh> last time some people we angry at 100rabbits uxn, like saying it is useless etc... because too small: "How do you run Machine Learning or a browser on those" completly missing the point
[21:26:38] <wasamasa> clearly lobsters is driven by the clojure mafia
[21:26:54] <amazigh> wasamasa: and rust fanbody x')
[21:27:03] <drakonis> you forgot about nix fanboys
[21:27:19] <amazigh> nix is great, the idea of nix is great..
[21:27:33] <amazigh> did you know it has 60k unique pakages available?
[21:27:34] <drakonis> the implementation on the other hand is lacking
[21:27:36] <drakonis> yes i know
[21:27:41] <drakonis> i used it for years
[21:27:54] <amazigh> so, what made you leave the boat?
[21:28:02] <amazigh> nix the lang?
[21:28:35] <drakonis> the lang, how hacky everything feels
[21:29:01] <amazigh> I never understodd, why they put the hash before the package name in nix store
[21:29:41] <amazigh> seems like a ux design mistake, but... dunno.
[21:30:37] <drakonis> https://mobile.twitter.com/aisamanra/status/1333497486690840576
[21:32:11] <amazigh> drakonis: gentoo?
[21:32:16] <drakonis> no, nix.
[21:32:23] <amazigh> I mean you use gentoo?
[21:32:27] <drakonis> no.
[21:32:34] <amazigh> what do you use?
[21:33:18] <drakonis> had been using guix but ended going to debian because i still have a nvidia gpu
[21:34:05] <amazigh> sorry, but guix has still some... infecillities
[21:34:23] <amazigh> outside the binary-blob-free dogma
[21:34:36] <drakonis> do tell
[21:34:56] <amazigh> rolling release? you are forced to upgrade
[21:35:22] <amazigh> no CFLAGS or USE flags
[21:35:37] <amazigh> guix cli is a mess
[21:36:03] <amazigh> but my knowledge is a few years old.
[21:36:04] <drakonis> the cli is pretty good next to nix though
[21:36:15] *** Quits: mononote (~mononote@user/mononote) (Ping timeout: 250 seconds)
[21:36:23] <drakonis> it has improved over the years as well
[21:37:01] <drakonis> cflags exist but use flags might be implemented
[21:37:03] <drakonis> at least something similar
[21:37:16] <amazigh> the main problem I have is that you can't have you own CFLAGS to compile to optimized builds, without rewriting / overring all packages (that may be gone at next guix pull)
[21:37:40] <amazigh> I read on the blog use flags were a no-go a few month back
[21:38:06] <drakonis> have they said that?
[21:38:21] <drakonis> also they've already added package tunables
[21:38:33] <amazigh> I am correct that if say, you pick a package from guix, override it, next release, they bump the same package,  and then your downstream package is broken?
[21:38:34] <drakonis> so you can compile where it actually gives you benefits
[21:38:43] <drakonis> hmm... no.
[21:38:58] <drakonis> you can create a duplicate of that package and inherit it
[21:39:10] <amazigh> you can copy the old definition?
[21:39:12] <drakonis> yes
[21:39:17] <amazigh> meh ;)
[21:39:32] <drakonis> its in the documentation
[21:39:35] <amazigh> I guess they do that to save on compile farm
[21:39:55] <drakonis> regarding rolling release, its pretty workable though
[21:40:11] <drakonis> its not unlike how nix does things if you're following nixos-unstable
[21:40:24] <drakonis> they don't have enough manpower to support the releases
[21:40:54] <amazigh> rolling release is fine, but if you want to pin a package version, and and customize it, you need to compile the whole transitive closure
[21:41:15] <amazigh> c/compile/copy/
[21:42:57] <Zipheir> Keep those bugs rolling!
[21:43:12] <amazigh> good morning Zipheir 
[21:43:18] <drakonis> nah you dont
[21:43:22] <Zipheir> Hello!
[21:43:49] <Zipheir> It's a great strategy if all the software you use is written by competent and responsible programmers who never make a buggy release. :)
[21:45:33] <drakonis> https://guix.gnu.org/en/manual/en/guix.html#Defining-Package-Variants
[21:48:14] *** Quits: gproto23 (~gproto23@user/gproto23) (Read error: Connection reset by peer)
[21:49:29] *** Joins: gproto23 (~gproto23@user/gproto23)
[21:49:56] <Zipheir> Guix is pretty cool.
[21:50:42] <drakonis> yeah it is.
[21:54:01] <amazigh> it is the coolest with racket's chez :)
[21:54:09] <amazigh> and unsyntax
[21:57:44] *** Joins: x88x88x (~x88x88x@2001:19f0:5:39a8:5400:3ff:feb6:73cb)
[21:58:59] *** Joins: [deleted] (~livoreno@user/notzmv)
[22:01:49] *** Quits: livoreno (~livoreno@user/notzmv) (Ping timeout: 250 seconds)
[22:10:27] <drakonis> https://github.com/zyrolasting/denxi amazigh
[22:15:49] *** Quits: qhong_ (~qhong@rescomp-21-400677.stanford.edu) (Ping timeout: 240 seconds)
[22:16:22] *** Joins: qhong (~qhong@rescomp-21-400677.stanford.edu)
[22:30:52] *** Joins: qhong_ (~qhong@rescomp-21-400677.stanford.edu)
[22:30:55] *** Quits: qhong (~qhong@rescomp-21-400677.stanford.edu) (Read error: Connection reset by peer)
[22:37:33] <drakonis> i'm wondering how would guix look like if it was implemented with different lisps or schemes
[22:37:57] <drakonis> its very clear to me that it will not look the same
[22:41:26] <drakonis> amazigh: btw, i would like to clarify that the rolling release thing is surprisingly useful
[22:43:39] <drakonis> it makes it fairly simple to bring in cli and tooling improvements without needing to be explicitly tied to the uneven release cycles
[22:43:50] <drakonis> and if you need to pin something, there's enough ways to do it
[22:48:24] <sham1> One probably couldn't get rid of all the Guile things in Guix recipes, but I'd hazard a wager that after R7-large becomes an actual thing, it probably could replicate a lot of the stuff. Of course with the obvious caveat that we don't know what R7-large will look like
[22:49:55] *** Quits: trip_fandango (~tripfanda@2a00:a040:19e:72a1:b8b7:c89f:16b9:3e60) (Ping timeout: 250 seconds)
[22:53:20] *** Joins: trip_fandango (~tripfanda@5.29.44.90)
[22:55:06] <drakonis> you can get a glimpse of it by going into the srfi list and check which ones are part of it
[22:57:43] <sham1> Well yes, although technically an SRFI being in any given future docket doesn't mean that it would get voted in. Even if currently it seems that every SRFI in any docket would get voted in
[22:57:57] <drakonis> fair enough
[22:58:20] <drakonis> as for srfi availability, only a couple schemes have the majority of them
[22:58:57] <drakonis> gauche, stklos and chicken
[22:59:26] <drakonis> chibi i think?
[22:59:38] <drakonis> not sure if gambit's in that list either
[23:00:33] *** Joins: justinethier (~justineth@pool-96-244-241-160.bltmmd.fios.verizon.net)
[23:00:33] <jcowan> Some things have been voted down in the R7RS process, and I expect the rejection rate to rise dramatically in later dockets.
[23:00:40] <drakonis> i see
[23:00:47] <drakonis> fair enough.
[23:00:58] <sham1> Would you say that the Yellow Docket was more of an outlier or what
[23:01:39] <drakonis> i've looked into https://docs.scheme.org/srfi/support/ but i'm not sure if it is fully accurate
[23:01:56] <drakonis> i know chez has a repository filled with srfi implementations
[23:02:49] <drakonis> http://htmlpreview.github.io/?https://github.com/schemedoc/srfi-metadata/blob/master/table.html ah this one's fresh
[23:05:00] <drakonis> some of the scheme implementations are borderline greenspun's tenth rule
[23:22:48] *** Joins: sonny (~sonny@8.6.144.252)
[23:23:01] *** Joins: nytpu (5a8c9ec580@2604:bf00:561:2000::33)
[23:23:06] <sonny> figured out `apply map list`, such magic
[23:36:24] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[23:42:07] *** Joins: tristero (~nobody@user/tristero)
[23:42:57] *** Quits: sonny (~sonny@8.6.144.252) (Ping timeout: 252 seconds)
[23:43:34] *** Joins: mononote (~mononote@user/mononote)
[23:44:25] *** Joins: seninha (~seninha@user/seninha)
[23:47:10] *** Joins: sonny (~sonny@8.6.144.252)
[23:54:31] *** Joins: civodul (~user@guix/contributor/civodul)
