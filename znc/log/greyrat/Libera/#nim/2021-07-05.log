[00:11:14] <FromDiscord> <zevv> What is the reason deepcopy is not default enabled for arc/orc?
[00:52:06] *** Quits: xet7 (~xet7@user/xet7) (Remote host closed the connection)
[00:53:03] *** Joins: xet7 (~xet7@user/xet7)
[01:00:36] <FromDiscord> <@bracketmaster-5a708063d73408ce4> After a macro rewrite, is there a way to have nim print the rewritten file?
[01:04:13] <FromDiscord> <ElegantBeef> You can do `--expandMacro:macroName`
[01:04:33] <FromDiscord> <ElegantBeef> or do `echo result.repr` in the nim macro
[01:12:47] <FromDiscord> <@bracketmaster-5a708063d73408ce4> thx
[01:14:03] <FromDiscord> <saem> Bah, tried to reuse NimLime's syntax highlighting definitions in vscdoe... and sadly it doesn't work. \:( If any motivated individual wants to take a peek\: https://github.com/saem/vscode-nim/tree/trial-nimlime-syntax-highlighting
[01:14:53] *** Quits: xet7 (~xet7@user/xet7) (Remote host closed the connection)
[01:16:08] <FromDiscord> <dom96> why are you trying to reuse them?
[01:27:14] <FromDiscord> <saem> Consistency, consolidation of effort, etc...
[01:27:44] <FromDiscord> <saem> they're the ones that are "officially" used on github.
[01:55:36] <FromDiscord> <dom96> ahh, of course, GitHub uses tm syntax highlighting now. I remember when linguist used Pygments
[02:02:17] <FromDiscord> <hugogranstrom> Ugh tm syntax highlighting is nasty, it works until it doesn't and then you have to search through a jungle of regex to find the errors \:(
[02:02:42] <FromDiscord> <saem> I know, it's why I don't want to maintain yet another one.
[02:02:48] <FromDiscord> <saem> I don't want to maintain the current one.
[02:05:02] <FromDiscord> <hugogranstrom> OK yeah that's reasonable üëçÔ∏è
[02:05:42] <FromDiscord> <hugogranstrom> How bad is it currently? (the ported version)
[02:06:00] <FromDiscord> <hugogranstrom> A total mess or just a few odd cases?
[02:12:20] <FromDiscord> <Bung> why does not work ? https://github.com/bung87/vscode-nim-lsp/commits/master/syntaxes/nim.json same thing
[02:13:35] <FromDiscord> <Bung> package json file `contributes.grammars.path` to nim.json
[02:27:56] <FromDiscord> <saem> I'm not going to bother answering that.
[02:28:52] <FromDiscord> <saem> [hugogranstrom](https://matrix.to/#/@hugogranstrom:matrix.org)\: the current one has bugs, see filed against the github repo. They're a bother to fix, not huge, but still annoying. There also isn't a great way to compare this stuff, so I can't tell how bad.
[02:48:54] <FromDiscord> <dom96> shouldn't this work? https://play.nim-lang.org/#ix=3rY0
[02:49:09] <FromDiscord> <dom96> I'm getting `Error: invalid type: 'UncheckedArray[int]' in this context: 'Payload' for var`
[02:49:58] <FromDiscord> <clyybber> no, you need ptr UncheckedArray
[02:50:50] *** Quits: max22- (~maxime@2a01cb0883359800b4b9c2f6746deeb9.ipv6.abo.wanadoo.fr) (Quit: Leaving)
[02:50:51] <FromDiscord> <dom96> ahh, I thought `UncheckedArray` was already implicitly a `ptr`
[02:52:23] <FromDiscord> <clyybber> nope, it's consistent with array :)
[02:53:57] <FromDiscord> <dom96> is it? non-ptr `array` works just fine
[02:54:15] *** Joins: arkanoid (~arkanoid@2-238-151-49.ip244.fastwebnet.it)
[02:54:46] <arkanoid> what's the difference of const variable and {.global.} pragma?
[02:55:05] <FromDiscord> <ElegantBeef> global is scoped to the procedure and can be mutable
[02:55:32] <FromDiscord> <clyybber> In reply to @dom96 "is it? non-ptr `array`": because a non-ptr array has a length, an UncheckedArray doesn't
[02:57:24] <arkanoid> ElegantBeef, but aren't consts scoped to procedure too, when declared within them?
[02:57:40] <FromDiscord> <ElegantBeef> Consts arent mutable
[02:58:00] <arkanoid> also, global seems unrelated to mutability. 
[02:58:11] <FromDiscord> <ElegantBeef> Well it's unrelated to consts
[02:58:27] <arkanoid> I'm confused
[02:58:38] <FromDiscord> <ElegantBeef> https://play.nim-lang.org/#ix=3rY1
[02:58:39] <FromDiscord> <ElegantBeef> Run that
[02:59:19] <FromDiscord> <ElegantBeef> sent a code paste, see https://play.nim-lang.org/#ix=3rY2
[02:59:23] <arkanoid> ok, I got it, but you declared it as var
[02:59:37] <FromDiscord> <ElegantBeef> Well what's the point any other way
[02:59:50] <FromDiscord> <ElegantBeef> `let` or `var` only make sense with global
[02:59:58] <FromDiscord> <ElegantBeef> a global const is useless since it cannot be mutated
[03:00:47] <arkanoid> I mean. a let {.global.} is same as constant, from compiler point of view, or not?
[03:01:17] <FromDiscord> <ElegantBeef> Nope since the let is intialized at runtime
[03:01:53] <arkanoid> yes, correct, apart from code execute at compile time
[03:02:07] <FromDiscord> <ElegantBeef> I'm sorry is this a test? üòÑ
[03:02:31] <arkanoid> no, I'm just trying to find out if I got it correctly by spotting the overlapping points
[03:02:39] <FromDiscord> <ElegantBeef> global is meant for having scoped global variables which do not reset in between calls nor escape scope, unrelated const üòÑ
[03:03:30] <arkanoid> got it. Thanks
[03:05:56] <FromDiscord> <talaing> sent a code paste, see https://play.nim-lang.org/#ix=3rY4
[03:06:04] <FromDiscord> <talaing> (edit) "https://play.nim-lang.org/#ix=3rY4" => "https://play.nim-lang.org/#ix=3rY5"
[03:06:19] <FromDiscord> <talaing> is there any way to somehow transform this array into sequence to be able to modify its size at the runtime?
[03:07:20] <FromDiscord> <timotheecour> toSeq
[03:07:30] <FromDiscord> <ElegantBeef> or `newSeq`
[03:10:07] <arkanoid> new question: the manual on the NoDecl pragma says "Note: This will not work for the LLVM backend". Is there an official LLVM backend for nim?
[03:10:26] <FromDiscord> <ElegantBeef> nlvm exists but dont think it's "official"
[03:13:22] <arkanoid> so why is NoDecl so special to get a Note about future?
[03:13:26] <FromDiscord> <talaing> sent a code paste, see https://paste.rs/sNY
[03:14:27] <FromDiscord> <ElegantBeef> You left out `()`
[03:15:43] <FromDiscord> <ElegantBeef> sent a code paste, see https://play.nim-lang.org/#ix=3rY7
[03:15:53] <FromDiscord> <ElegantBeef> (edit) "https://play.nim-lang.org/#ix=3rY7" => "https://play.nim-lang.org/#ix=3rY8"
[03:18:44] <FromDiscord> <ElegantBeef> As that error message  pointed out the reason it was not letting you do it was cause you were not doing `Thread[HttpClient]()` an as such you were passing a type of `Thread[HttpClient]`, which is kinda like `int` vs `int(100)`
[03:19:25] <FromDiscord> <dom96> anybody else wishing Nim's `echo` behaved like Python's `print` (with regards to adding spaces implicitly between args)?
[03:19:42] <FromDiscord> <ElegantBeef> Not really
[03:20:10] <FromDiscord> <ElegantBeef> If i did i would've made a variant that did as such üòÑ
[03:20:12] <FromDiscord> <dom96> every time I use it I have to add the darn `" ",` manually
[03:20:31] <FromDiscord> <dom96> and I'm getting tempted to create a PR to add a `print` that does this
[03:20:42] <FromDiscord> <ElegantBeef> Or you know `[$a, $b, $c, $d].join(" ")` üòõ
[03:21:08] <FromDiscord> <talaing> In reply to @ElegantBeef "Though you can just": Works like a charm! Thanks!
[03:21:26] <FromDiscord> <ElegantBeef> Alternative you could do `echo (a, b, c, d)` and let the tuple formatting do it
[03:21:31] <FromDiscord> <ElegantBeef> (edit) "Alternative" => "Alternatively"
[03:21:37] <FromDiscord> <ElegantBeef> No problem
[03:21:38] <FromDiscord> <dom96> In reply to @ElegantBeef "Or you know `[$a,": far too much writing to do for echo debugging
[03:21:41] <FromDiscord> <talaing> (edit) "Thanks!" => "Thanks!‚Üµ(also, thanks for explanation :))"
[03:21:43] <FromDiscord> <dom96> In reply to @ElegantBeef "Alternatively you could do": that's a good idea
[03:22:44] <FromDiscord> <ElegantBeef> My laziness knows no bounds
[03:23:11] <FromDiscord> <dom96> hah, we need to put this in some sort of Nim's tricks guide
[03:25:26] <FromDiscord> <dom96> `repr` giving `[...]` for UncheckedArray
[03:25:33] <FromDiscord> <dom96> I guess I can't expect more than that
[03:25:45] <FromDiscord> <ElegantBeef> Well ofc not
[03:28:02] <FromDiscord> <dom96> anddd compiler bug https://play.nim-lang.org/#ix=3rYy
[03:32:37] <FromDiscord> <ElegantBeef> that's not a `ptr array[5, byte]`
[03:34:23] <FromDiscord> <dom96> yes, it doesn't matter, Nim shouldn't ever generate broken C
[03:41:19] *** Joins: nozza (~nozza@2401:7000:d8b5:3100:458f:d579:ace6:728)
[03:44:54] *** Quits: nozza (~nozza@2401:7000:d8b5:3100:458f:d579:ace6:728) (Client Quit)
[04:09:58] <FromDiscord> <@bracketmaster-5a708063d73408ce4> sent a code paste, see https://play.nim-lang.org/#ix=3rZu
[04:17:30] *** Quits: neceve (~quassel@2a02:c7f:607e:d600:f762:20dd:304e:4b1f) (Ping timeout: 240 seconds)
[04:19:54] <FromDiscord> <ElegantBeef> That's CSS, so no clue what you're asking
[04:20:55] <FromDiscord> <ElegantBeef> Jesus i'm dumb today
[04:20:58] <FromDiscord> <ElegantBeef> Xml
[04:21:05] <FromDiscord> <ElegantBeef> Someone shoot me before i say something even dumber
[04:22:25] <FromDiscord> <exelotl> seems like it was valid nim but somehow got output as HTML for syntax highlighting
[04:23:15] <FromDiscord> <ElegantBeef> Ah yea
[04:23:54] <FromDiscord> <ElegantBeef> It's a non holey set so you can just do `last.high.ord` adding +1 if needed
[04:24:44] <FromDiscord> <ElegantBeef> With a holey set you would want to probably use `setutils` from devel and do `fullSet(YourEnum).card`
[04:25:22] <FromDiscord> <ElegantBeef> At the very least stealing the macro to generate a fullset for holey enums üòÑ
[04:30:15] <fn> <11ForumUpdaterBot99> New thread by Sixte: Nonlinear module behaviour in Nim, see https://forum.nim-lang.org/t/8197
[05:00:26] <FromDiscord> <@bracketmaster-5a708063d73408ce4> Thx @\_discord\_145405730571288577\:t2bot.io
[05:00:41] <FromDiscord> <timotheecour> In reply to @@bracketmaster-5a708063d73408ce4 "say I have an": `typetraits.enumLen`
[05:03:19] <FromDiscord> <@bracketmaster-5a708063d73408ce4> @\_discord\_427948629249228800\:t2bot.io , not seeing that? https://nim-lang.org/docs/typetraits.html
[05:04:03] <FromDiscord> <@bracketmaster-5a708063d73408ce4> I do however see TupleLen - maybe convert enum to Tuple?ü§∑
[05:06:47] <FromDiscord> <ElegantBeef> probably just on devel
[05:08:43] <FromDiscord> <timotheecour> ya devel
[05:48:45] <FromDiscord> <@bracketmaster-5a708063d73408ce4> ah
[06:49:10] <FromDiscord> <aleclarson> sent a code paste, see https://play.nim-lang.org/#ix=3s01
[06:49:15] <FromDiscord> <aleclarson> So this isn't possible then?‚Üµhttps://discord.com/channels/371759389889003530/371759389889003532/861324736856719361
[06:53:02] <FromDiscord> <aleclarson> btw is there documentation on what all the `macro` pragmas do?‚Üµhttps://nim-lang.org/docs/compiler/pragmas.html#macroPragmas
[06:55:29] *** Quits: arkurious (~arkurious@user/arkurious) (Quit: Leaving)
[07:03:26] <FromDiscord> <ElegantBeef> It's sorta possible
[07:03:36] <FromDiscord> <ElegantBeef> But you have to play with the syntax nim lets you parse
[07:04:44] <FromDiscord> <ElegantBeef> https://play.nim-lang.org/#ix=3s03
[07:05:29] <FromDiscord> <ElegantBeef> Ah that didnt work for multiple statements, https://play.nim-lang.org/#ix=3s04 this could be a starter
[07:06:24] <FromDiscord> <ElegantBeef> That's all internal compiler stuff that corresponds to stuff here https://nim-lang.org/docs/manual.html#pragmas
[07:07:56] <FromDiscord> <ElegantBeef> @aleclarson as i just noticed when you posted that üòÑ
[07:17:48] *** Joins: rockcavera (~rc@192.12.112.199)
[07:17:48] *** Quits: rockcavera (~rc@192.12.112.199) (Changing host)
[07:17:48] *** Joins: rockcavera (~rc@user/rockcavera)
[07:55:33] *** Quits: vicfred (~vicfred@user/vicfred) (Quit: Leaving)
[08:01:31] <FromDiscord> <Raws> @zetashift Have you had any more progress working with neovim and msgpack? I have mostly been trying in an isolated project. My attempts to work with nvim_client were brief because it seemed like a bigger undertaking than doing what I need from scratch. But it turns out I'm struggling with both ü§∑‚Äç‚ôÇÔ∏è.
[08:07:09] <FromDiscord> <aleclarson> is there nothing like `parseEnum` for ordinal enums? (ie: to convert the ordinal to an ident string)
[08:08:38] <FromDiscord> <ElegantBeef> `strutils` has a parseEnum that goes str -> enum
[08:08:43] <FromDiscord> <Raws> @aleclarson https://stackoverflow.com/questions/63931540/string-enum-type-in-nim
[08:09:33] <FromDiscord> <aleclarson> yeah i saw that, but i want to convert `NimNodeKind` integer back to the `nnkProc` string, for example
[08:09:37] <FromDiscord> <aleclarson> for debugging
[08:10:29] <FromDiscord> <aleclarson> i could make a massive `case` stmt that does it manually, but i'd like to that
[08:10:35] <FromDiscord> <aleclarson> (edit) "i could make a massive `case` stmt that does it manually, but i'd like to ... that" 03added "avoid"
[08:11:33] <fn> <06Prestige99> you want to go from int to enum?
[08:17:34] <FromDiscord> <aleclarson> more like "int to string" if you know what i mean
[08:18:42] <FromDiscord> <aleclarson> so i can know what a specific `NimNodeKind` represents when echoing it
[08:19:21] <FromDiscord> <ElegantBeef> Can you provide an example?
[08:19:34] <FromDiscord> <aleclarson> i guess i can reverse engineer it, so to speak, by running a single statement in isolation and checking its `kind`
[08:19:51] <FromDiscord> <aleclarson> (edit) "running" => "passing"
[08:26:12] <FromDiscord> <aleclarson> sent a code paste, see https://play.nim-lang.org/#ix=3s0d
[08:27:40] <FromDiscord> <ElegantBeef> but that's just `$foo == "foo"`
[08:28:16] <FromDiscord> <aleclarson> oh perfect xD
[08:28:20] <FromDiscord> <aleclarson> thx
[08:28:52] <FromDiscord> <ElegantBeef> All things but `ptr`, `ref`, and `distinct` will have a `$` by default
[08:29:20] <FromDiscord> <aleclarson> yeah i dumbly assumed `$foo` would just stringify the int value
[08:29:34] <FromDiscord> <ElegantBeef> it returns the actual ident or the given string
[08:29:49] <FromDiscord> <ElegantBeef> so if you did `foo = "SomeLongString"` it'd return that string
[08:30:42] <FromDiscord> <aleclarson> sent a code paste, see https://paste.rs/s30
[08:30:46] <FromDiscord> <aleclarson> this is what confused me i think
[08:31:20] <fn> <06Prestige99> can you just do $MyInt(i)
[08:31:34] <fn> <06Prestige99> Where MyInt is the enum name
[08:32:04] <FromDiscord> <ElegantBeef> That should work
[08:32:11] <FromDiscord> <ElegantBeef> Assuming `i` is a valid enum value
[08:32:25] <FromDiscord> <ElegantBeef> And now for the safest way to know that refer to arne's forum post with no concrete single solution üòõ
[08:34:26] <FromDiscord> <aleclarson> sent a code paste, see https://play.nim-lang.org/#ix=3s0i
[08:34:33] <FromDiscord> <aleclarson> whatever im just glad i got a solution \:)
[08:34:50] <FromDiscord> <ElegantBeef> Maybe you aliased the enum with a variable?
[08:36:02] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.2)
[08:36:38] *** Joins: supakeen (~user@python/site-packages/supakeen)
[08:55:11] *** Quits: rockcavera (~rc@user/rockcavera) (Remote host closed the connection)
[09:31:55] *** Quits: mjsir911 (~bnc@user/mjsir911) (*.net *.split)
[09:31:55] *** Quits: emery (~quassel@2a03:3b40:fe:ab::1) (*.net *.split)
[09:31:55] *** Quits: joast (~rick@cpe-98-146-112-4.natnow.res.rr.com) (*.net *.split)
[09:31:55] *** Quits: redj (~quassel@bras-base-bchmpq5707w-grc-24-76-69-197-62.dsl.bell.ca) (*.net *.split)
[09:31:55] *** Quits: crem (~crem@2a02:169:160a:1:9b30:962e:76eb:4bb3) (*.net *.split)
[09:32:07] *** Joins: mjsir911 (~bnc@2001:19f0:5:4de7:bcd8:54fd:695b:5fa0)
[09:32:07] *** Quits: mjsir911 (~bnc@2001:19f0:5:4de7:bcd8:54fd:695b:5fa0) (Changing host)
[09:32:07] *** Joins: mjsir911 (~bnc@user/mjsir911)
[09:32:11] *** Joins: crem (~crem@2a02:169:160a:1:9b30:962e:76eb:4bb3)
[09:33:58] *** Quits: jfinkhaeuser (~jfinkhaeu@user/jfinkhaeuser) (*.net *.split)
[09:33:59] *** Quits: blackbeard420 (~blackbear@2600:3c03:e000:297::) (*.net *.split)
[09:34:07] *** Joins: blackbeard420_ (~blackbear@2600:3c03:e000:297::)
[09:35:16] *** Quits: mal`` (~mal``@static.38.6.217.95.clients.your-server.de) (*.net *.split)
[09:35:16] *** Quits: Oddmonger (~Oddmonger@user/oddmonger) (*.net *.split)
[09:35:16] *** Quits: dom96 (~dom@mail.nim-lang.org) (*.net *.split)
[09:35:16] *** Quits: Amun-Ra (~amun-ra@retro.rocks) (*.net *.split)
[09:35:16] *** Quits: mst (~matthewt@vps-6c71e929.vps.ovh.net) (*.net *.split)
[09:35:17] *** Quits: mahlon (~mahlon@martini.nu) (*.net *.split)
[09:35:17] *** Quits: pjz (~pjz@place.org) (*.net *.split)
[09:35:24] *** Joins: mst (~matthewt@vps-6c71e929.vps.ovh.net)
[09:35:49] *** Joins: pjz (~pjz@place.org)
[09:35:49] *** Joins: Oddmonger (~Oddmonger@mx1.gammaray.finiderire.com)
[09:35:54] *** Joins: mahlon (~mahlon@martini.nu)
[09:35:57] *** Joins: Amun-Ra (~amun-ra@retro.rocks)
[09:36:18] *** Quits: nisstyre (~wes@user/nisstyre) (*.net *.split)
[09:36:18] *** Quits: snowolf (~snowolf@user/snowolf) (*.net *.split)
[09:36:18] *** Quits: oz (~oz@crystal/user/oz) (*.net *.split)
[09:36:27] *** Joins: snowolf (~snowolf@2607:5300:60:ba2::1)
[09:36:30] *** Joins: mal`` (~mal``@static.38.6.217.95.clients.your-server.de)
[09:36:47] *** Joins: nisstyre (~wes@li798-187.members.linode.com)
[09:40:42] *** Joins: emery (~quassel@2a03:3b40:fe:ab::1)
[09:42:57] *** Joins: ox (~oz@crystal/user/oz)
[09:43:43] *** Joins: redj (~quassel@bras-base-bchmpq5707w-grc-24-76-69-197-62.dsl.bell.ca)
[09:44:14] *** Joins: jfinkhaeuser (~jfinkhaeu@user/jfinkhaeuser)
[09:44:27] <FromDiscord> <aleclarson> Are custom pragmas possible?
[09:45:08] <FromDiscord> <ElegantBeef> Yes
[09:45:44] <FromDiscord> <ElegantBeef> Nim's macros can be used like pragmas, but you can also make annotative pragms by doing `template yourPragma {.pragma.}`
[09:45:46] *** Joins: dom96 (~dom@mail.nim-lang.org)
[09:45:49] <FromDiscord> <ElegantBeef> (edit) "pragms" => "pragmas"
[09:47:01] <FromDiscord> <ElegantBeef> What type of pragma are you after?
[09:48:08] <FromDiscord> <aleclarson> A pragma that can alter the AST, so i guess `macro` is the way to go?
[09:48:29] <FromDiscord> <ElegantBeef> Well yea but i mean where's the usecase, on a procbody?
[09:48:34] <FromDiscord> <aleclarson> yeah
[09:48:53] <FromDiscord> <ElegantBeef> Then yep a macro will get the proc body and you'll be able to mutate it
[09:49:03] <FromDiscord> <ElegantBeef> I've got many examples of those if you need one, not that they're overly clear üòÑ
[09:49:27] <FromDiscord> <aleclarson> haha thx, i'll let you know if i run into any problems \:)
[09:51:42] <FromDiscord> <Rika> ~~`async` is a macro used like a pragma~~
[10:02:52] <FromDiscord> <emef> is it possible to implement specializations of a generic proc?
[10:02:57] <FromDiscord> <emef> something like this
[10:03:04] <FromDiscord> <emef> sent a code paste, see https://play.nim-lang.org/#ix=3s0s
[10:03:07] <FromDiscord> <ElegantBeef> `T: int32`
[10:03:19] <FromDiscord> <ElegantBeef> then use T elsewhere
[10:03:24] <FromDiscord> <emef> nice
[10:03:24] <FromDiscord> <emef> ty
[10:03:55] <FromDiscord> <saem> There is a sub-type relation hiding in there.
[10:04:11] <FromDiscord> <ElegantBeef> No need to hold that string value inside the object
[10:04:18] <FromDiscord> <ElegantBeef> You can always retrieve that for free
[10:04:31] <FromDiscord> <ElegantBeef> And it makes more sense to do `T: int32 or int64`
[10:04:41] <FromDiscord> <ElegantBeef> Unless you have code that relies on the difference ofc
[10:04:55] <FromDiscord> <emef> yea I do, was just trying to synthesize a simple example
[10:05:43] <FromDiscord> <aleclarson> sent a code paste, see https://play.nim-lang.org/#ix=3s0t
[10:05:50] <FromDiscord> <ElegantBeef> I actually can help here!
[10:05:59] <FromDiscord> <ElegantBeef> With one of those afformentioned examples
[10:06:08] <FromDiscord> <aleclarson> thank the gods
[10:06:43] <FromDiscord> <ElegantBeef> https://github.com/beef331/kashae/blob/master/src/kashae.nim#L113
[10:07:04] <FromDiscord> <ElegantBeef> It's as simple as that `procBody[3]` is the formal params, so adding a `identDef` will add a new parameter
[10:07:33] <FromDiscord> <aleclarson> hmm, isn't that what my snippet is doing?
[10:07:56] <FromDiscord> <ElegantBeef> You dont set the result
[10:08:07] <FromDiscord> <aleclarson> ahh newb mistake
[10:08:23] <FromDiscord> <ElegantBeef> macros return stuffs, so make it an `: untyped` to make it clear üòÑ
[10:08:49] <FromDiscord> <ElegantBeef> Here's me learning there is a params shortcut
[10:08:58] <FromDiscord> <ElegantBeef> What was remembering `[3]` good for then? üò¶
[10:09:12] <FromDiscord> <aleclarson> yay i taught the teacher \:D
[10:09:29] <FromDiscord> <aleclarson> hmm, still not working after adding `: untyped`‚Üµhttps://play.nim-lang.org/#ix=3s0u
[10:10:18] <FromDiscord> <ElegantBeef> Well this is semantically checked before the macro is ran
[10:10:22] <FromDiscord> <ElegantBeef> So this will never work properly
[10:10:56] <FromDiscord> <aleclarson> ohhhh of course
[10:10:56] <FromDiscord> <ElegantBeef> Anything that is a specific parameter in a macro requires that to be semantically checked
[10:11:08] <FromDiscord> <aleclarson> just used `untyped` instead of proc
[10:11:19] <FromDiscord> <ElegantBeef> So you can make the parameter untyped and then inside make sure you do some checking to ensure it only runs on procs
[10:11:24] <FromDiscord> <ElegantBeef> be it `expectKind` or `assert`
[10:11:28] <FromDiscord> <aleclarson> thx alot
[10:13:34] <FromDiscord> <ElegantBeef> https://play.nim-lang.org/#ix=3s0w for the working version of my suggestion üòÑ
[10:14:20] <FromDiscord> <emef> I think what I was looking for is more likely a concept, is that feature fairly stable? (I see it's in the experimental docs)
[10:16:23] <FromDiscord> <ElegantBeef> They're fairly stable imo
[10:17:47] <FromDiscord> <emef> maybe someone has a suggestion on a more elegant way to handle this
[10:17:49] <FromDiscord> <emef> https://github.com/emef/nimarrow#typed-tables
[10:17:52] <fn> <12R2D299> 4GitHub: 7"<No Description>"
[10:18:43] <FromDiscord> <emef> I would like to be able call `newTypedBuilter[MyType]()` after running the macro
[10:19:24] <FromDiscord> <emef> rather than use this `TypeTag[MyType]()` to work around it
[10:19:37] <FromDiscord> <emef> (edit) "`newTypedBuilter[MyType]()`" => "`newTypedBuilder[MyType]()`"
[10:22:21] <FromDiscord> <ElegantBeef> declareTypeTable subscribes it somewhere right?
[10:24:24] <FromDiscord> <aleclarson> is there any way to insert a statement at a specific index in a statement list?
[10:24:37] <FromDiscord> <ElegantBeef> `insert 0, yourNimNode`
[10:25:19] <FromDiscord> <ElegantBeef> If it doesnt subscribe presently, you should probably do the subscription in there, and then make `newTypeBuilder` a macro that takes a typedef and checks if it's in the macrocache, if not it throws a compile time error that's helpful
[10:25:25] <FromDiscord> <ElegantBeef> @emef ^ that's for you ofc üòÑ
[10:26:14] <FromDiscord> <emef> oh interesting
[10:26:26] <FromDiscord> <ElegantBeef> (edit) "typedef" => "typedesc"
[10:26:33] <FromDiscord> <emef> what is the macrocache
[10:26:37] <FromDiscord> <ElegantBeef> https://nim-lang.github.io/Nim/macrocache.html
[10:26:57] <FromDiscord> <ElegantBeef> It's a cross module cache that's designed to hold nimnodes for things like this
[10:28:58] <FromDiscord> <emef> I'll look into using this instead, I was hoping there was some way to do this without having to explicitly call a macro to generate those functions
[10:29:10] <FromDiscord> <emef> macrocache looks like a good option
[10:29:21] <FromDiscord> <ElegantBeef> Oh that's what you were after
[10:29:51] <FromDiscord> <ElegantBeef> You actually can probably use the macrocache in the concept
[10:30:06] <FromDiscord> <ElegantBeef> Though, that might not work
[10:30:44] <FromDiscord> <ElegantBeef> Now has to test that
[10:30:53] <FromDiscord> <emef> thanks for the tip
[10:30:55] <FromDiscord> <aleclarson> is there a reversed `items` iterator?
[10:31:58] <FromDiscord> <ElegantBeef> Doesnt appear so, probably smart to make your own based off the requirements
[10:32:10] <FromDiscord> <ElegantBeef> Are you destroying/adding to a collection?
[10:33:12] <FromDiscord> <aleclarson> since i'm using `insert` on a NimNode, i decided using `ipairs` works just fine \:)
[10:33:25] <FromDiscord> <aleclarson> no, i'm redefining proc params as let stmts
[10:34:51] <FromDiscord> <ElegantBeef> ipairs?
[10:35:46] <FromDiscord> <aleclarson> whoops, i think that's lua terminology slipping thru \:)
[10:36:17] <FromDiscord> <aleclarson> `for index, param in ast.params:` basically
[10:36:33] <FromDiscord> <ElegantBeef> Ah
[10:36:37] <FromDiscord> <ElegantBeef> so `pairs`
[10:36:45] <FromDiscord> <aleclarson> haha ya
[10:46:28] <FromDiscord> <ElegantBeef> @emef So it does work! üòõ https://play.nim-lang.org/#ix=3s0D
[10:54:06] <FromDiscord> <richard stallmen(crazy GNU guy)> sent a code paste, see https://play.nim-lang.org/#ix=3s0G
[10:54:23] <FromDiscord> <ElegantBeef> No trinary operators
[10:54:54] <FromDiscord> <ElegantBeef> What are you after?
[18:14:02] *** Joins: greyrat (~greyrat@ip202.ip-51-178-215.eu)
[18:15:04] *** Joins: lucerne (~lucerne@ip202.ip-51-178-215.eu)
[18:15:42] *** Server sets mode: +nt 
[18:21:15] <FromDiscord> <‚Éü‚Éü> what does the `` mean
[18:21:26] <FromDiscord> <‚Éü‚Éü> like after a function name
[18:21:32] <FromDiscord> <Rika> export
[18:21:38] <FromDiscord> <Rika> public access modifier
[18:22:07] <FromDiscord> <haxscramper> saem\:  the numbers were a little (3x times actually), now I did proper analysis based on full manifests parsing
[18:22:15] <FromDiscord> <haxscramper> sent a code paste, see https://play.nim-lang.org/#ix=3s2H
[18:22:40] <FromDiscord> <haxscramper> So `bin = ` ('canonical') was specified 362 times
[18:24:00] <FromDiscord> <haxscramper> Though I'm still kind of suspicious of some numbers here
[18:27:20] <FromDiscord> <dom96> what are you looking for in your analysis?
[18:28:39] <FromDiscord> <haxscramper> how different metadata is specified
[18:29:00] <FromDiscord> <haxscramper> toplevel/nested in `task`, argument types
[18:29:36] <FromDiscord> <dom96> what does canon vs ident vs spec mean?
[18:30:02] <FromDiscord> <haxscramper> canonical means "canonical" as described in the RFC - `requires "string literal"`, or `author = "string literal"`
[18:30:12] <FromDiscord> <haxscramper> ident means that instead of a string literal identifier was used
[18:30:20] <FromDiscord> <haxscramper> `include common.nim`
[18:30:29] <FromDiscord> <haxscramper> `version = appVersion`
[18:30:52] <FromDiscord> <haxscramper> special means "special" - idk what exactly, just none of the above
[18:31:16] <FromDiscord> <haxscramper> for `bin` and other lists canonical means `@["string literal", "string literal"]`
[18:31:33] <FromDiscord> <haxscramper> I've seen `namedBin[] = ` in somec packages
[18:31:50] <FromDiscord> <haxscramper> Need to account for that one
[18:32:18] <FromDiscord> <dom96> cool, looks like there isn't much stopping us from making these values static
[18:32:24] <FromDiscord> <dom96> (edit) "values" => "fields"
[18:32:35] <FromDiscord> <haxscramper> yes
[18:33:12] <FromDiscord> <haxscramper> sent a code paste, see https://play.nim-lang.org/#ix=3s2M
[18:33:17] <FromDiscord> <haxscramper> Still does not exactly match with other `requires` metric
[18:33:27] <FromDiscord> <dom96> I wonder what the special there is
[18:33:38] <FromDiscord> <dom96> nested I'm guessing is `when defined(windows)`
[18:33:57] <FromDiscord> <haxscramper> any non-toplevel
[18:34:04] <FromDiscord> <haxscramper> but I need to differentialte between these cases
[18:34:06] <FromDiscord> <haxscramper> good idea
[18:34:12] <FromDiscord> <haxscramper> `when defined()` is a special case
[18:48:50] <FromDiscord> <haxscramper> Is it possible to really enforce compile-time evaluation of a procedure where all parameters are `static[]`?
[18:49:41] <FromDiscord> <Rika> only when pure
[18:49:48] *** Joins: rockcavera (~rc@192.12.112.199)
[18:49:49] *** Quits: rockcavera (~rc@192.12.112.199) (Changing host)
[18:49:49] *** Joins: rockcavera (~rc@user/rockcavera)
[18:50:16] <FromDiscord> <Rika> and if it's recursive, most likely not
[18:50:40] <FromDiscord> <Rika> (you can try but you might hit limits or whatsoever)
[18:52:25] <FromDiscord> <TennisBowling> does `httpclient` support `async`? I see that `puppy` won't
[18:55:05] <FromDiscord> <dom96> it disappoints me that I cannot do this: ``{.emit: staticRead("fonts/nim_compat.h").}``
[18:56:19] <FromDiscord> <arnetheduck> In reply to @TennisBowling "does `httpclient` support `async`?": https://forum.nim-lang.org/t/7964#52137 might be useful for that
[18:56:47] <FromDiscord> <TennisBowling> arne! thanks
[18:58:30] *** Quits: xet7 (~xet7@user/xet7) (Remote host closed the connection)
[18:59:59] <FromDiscord> <dom96> In reply to @TennisBowling "does `httpclient` support `async`?": yep: https://nim-lang.org/docs/httpclient.html#retrieving-a-website
[19:00:27] <FromDiscord> <TennisBowling> and with `httpclient` you need to ship openssl right?
[19:00:35] <FromDiscord> <TennisBowling> I see that chronos you don't need to
[19:07:06] *** Quits: blackbeard420_ (~blackbear@2600:3c03:e000:297::) (Quit: ZNC 1.8.2 - https://znc.in)
[19:07:26] *** Joins: blackbeard420 (~blackbear@blackbeard420.me)
[19:11:40] <FromDiscord> <dom96> In reply to @TennisBowling "and with `httpclient` you": yeah, you will need to unless you statically link openssl
[19:12:55] *** Joins: arkanoid (~arkanoid@2-238-151-49.ip244.fastwebnet.it)
[19:16:08] *** ox is now known as oz
[19:17:53] <fn> <11ForumUpdaterBot99> New thread by NameUndefined: Unable to create a flowVar, see https://forum.nim-lang.org/t/8201
[19:19:30] <FromDiscord> <haxscramper> matrix -\> discord bridge sure have a lot of lag
[19:19:37] <FromDiscord> <Zoom> Eh, how can I specify an array of Natural? Is there a literal? Need this for tests.
[19:19:39] <FromDiscord> <haxscramper> [Edit](https://discord.com/channels/371759389889003530/371759389889003532/861619808536756236): matrix -\> discord bridge sure has a lot of lag
[19:20:03] <FromDiscord> <haxscramper> `array[10, Natural]`
[19:20:22] <FromDiscord> <haxscramper> There is no `Natural` literal since `1` is already occupied by integer
[19:20:24] <FromDiscord> <dom96> Yep, that's why you should come back to Discord üôÇ
[19:20:35] <FromDiscord> <haxscramper> it has message limit
[19:20:51] <FromDiscord> <haxscramper> and it seems like the message simply does not go through
[19:21:27] <FromDiscord> <haxscramper> sent a code paste, see https://play.nim-lang.org/#ix=3s2U
[19:21:28] <FromDiscord> <Zoom> I meant not only declare, but assign a value without looping
[19:21:59] <FromDiscord> <haxscramper> In reply to @dom96 "Yep, that's why you": and I just happened to like matrix
[19:22:03] <FromDiscord> <haxscramper> it allows monspaced ui
[19:22:50] <FromDiscord> <dom96> what's a "monospaced ui"?
[19:23:03] <FromDiscord> <haxscramper> `var ar: array[2, Natural] =  [1.Natural, 2]`
[19:23:07] <FromDiscord> <haxscramper> monospaced text in UI‚Üµ(@dom96)
[19:23:20] <FromDiscord> <Zoom> Ah, dot! Thanks!
[19:23:50] <FromDiscord> <Zoom> Oops, missed the message to reply to.
[19:23:59] <FromDiscord> <haxscramper> and also has open API and several differnt clients‚Üµ(@dom96)
[19:25:50] <FromDiscord> <dom96> can't you change the font discord uses to a monospace one?
[19:25:59] <FromDiscord> <haxscramper> Anyway, I cut out `other` section for the table, but otherwise it seems like `requires` is almost always used on
[19:26:17] <FromDiscord> <haxscramper> on toplevel and, inside when it happened 44 times total,
[19:26:58] <FromDiscord> <haxscramper> Strangely enough all uses for requires in tasks happened using "special" syntax
[19:27:14] <FromDiscord> <haxscramper> But it is almost universally `requires: "pacakge >= 123"`
[19:27:47] <FromDiscord> <haxscramper> So I assume large portion of these packages are written by the same person
[19:39:47] <FromDiscord> <Rika> discord is only monospace when using code blocks/segments, otherwise no
[19:41:44] <FromDiscord> <System64 ~ Flandre Scarlet> Hello! Is SDL2 nice for sound output?
[19:42:59] <FromDiscord> <haxscramper> Updated the RFC. I also thought about making top-level completely static, something like a makefile. You write some variables, requires, then declare different tasks or hooks
[19:43:16] <FromDiscord> <haxscramper> And task/hook body is mapped to a nimscript code
[19:43:55] <FromDiscord> <haxscramper> Almost the same approach as we do now, though with interdependent tasks
[19:44:22] <FromDiscord> <haxscramper> Not on this iteration of nimble, but the idea looks nice
[19:48:38] <FromDiscord> <dom96> isn't making top-level completely static the real idea proposed? üôÇ
[19:51:38] <FromDiscord> <haxscramper> Right now you can place some code at top-level and it would run each time package is parsed
[19:52:03] <FromDiscord> <haxscramper> And I didn't say anything in the RFC about completely removing this functionality
[19:54:04] <FromDiscord> <haxscramper> Also, there are some values, specifically for installation/build purposes that might be set up in the tasks, or collected through some code that iterates over project files
[19:54:09] <FromDiscord> <dom96> I see, reading what you wrote to me implied this was the idea
[19:54:31] <FromDiscord> <dom96> why not do it this way though?
[19:54:38] <FromDiscord> <dom96> is it because of `when defined(windows)`?
[19:55:22] <FromDiscord> <haxscramper> Ideally yes
[19:55:23] <FromDiscord> <haxscramper> No, that can be evaluated statically. I'm just not sure how much this would break now, I need to get more statis
[19:55:24] <FromDiscord> <haxscramper> Stats\
[19:55:51] <FromDiscord> <haxscramper> But ultimately, if I get numbers that say it is relatively safe to do so, nothing would really stop us
[19:57:01] <FromDiscord> <dom96> I was expecting cargo to have a nice syntax for this, but nah: https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#platform-specific-dependencies
[19:57:10] <FromDiscord> <haxscramper> Saem and Arne might have stronger arguments in favor of fully purging imperative code from top-level, I personally just want to make sure we are not hang up in the intermediate state when something is guaranteed to be static and something is not
[19:57:12] <FromDiscord> <dom96> I very much prefer `when ...` even if it means we need to parse it
[19:58:47] <FromDiscord> <haxscramper> This is not really hard to implement, I can do a POC implementation when we finalize what we want
[19:59:38] <FromDiscord> <dom96> I've also been thinking about purging imperative code from the top-level for a while now
[20:00:30] <FromDiscord> <dom96> not needing to depend on the Nim compiler for this would be nice
[20:01:22] <FromDiscord> <dom96> (although it's important to note that with `when` the syntax will be complex enough that it won't be trivial for third-party tools to parse it and so in the end they will likely need to depend on Nimble or Nimble's parser anyway)
[20:01:32] <FromDiscord> <haxscramper> Yes. Most of the dependency resolution stuff can be done using only PNode parser (we would still have to import compiler/parser, but that is inevitable unless we redo format from scratch)
[20:02:01] <FromDiscord> <haxscramper> And when you need to execute code, there is nothing wrong (or nothing can be done really) with using compiler
[20:02:42] <FromDiscord> <haxscramper> Yes, this should be exposed in the nimble API‚Üµ(@dom96)
[20:02:48] <FromDiscord> <haxscramper> Nim library API from nimblepkg
[20:03:27] <FromDiscord> <haxscramper> The compiler package is quite good, and it would make sense to have something like this for nimble as well
[20:04:40] *** Quits: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com) (Quit: WeeChat 3.0.1)
[20:04:52] <FromDiscord> <exelotl> In reply to @System64 "Hello! Is SDL2 nice": Yes, if you want to write your own mixer
[20:05:12] <FromDiscord> <exelotl> or synth or player or whatever
[20:05:17] <FromDiscord> <dom96> In reply to @haxscramper "The compiler package is": for what it's worth, this stuff is already exposed in likely a very similar manner as the compiler API
[20:06:41] <FromDiscord> <dom96> the API is pretty good IMO: https://github.com/nim-lang/nimble/blob/master/src/nimblepkg/packageparser.nim#L424
[20:11:17] <FromDiscord> <haxscramper> It does not support logging redirection (compiler has structuredErrorHook) and I had to turn off messages twice so it wouldn't log things. Also version type is not semversion but a string which is kind of strange. Otherwise it is pretty usable‚Üµ(@dom96)
[20:11:32] <FromDiscord> <haxscramper> Had to rewrite resolution from scratch to use it in haxdoc
[20:11:40] <FromDiscord> <haxscramper> But I mention this in RFC
[20:12:24] <FromDiscord> <haxscramper> And package parser as well, for both types. Don't remember what was wrong with cfg, but for nims I used PNode scanner
[20:12:26] <FromDiscord> <System64 ~ Flandre Scarlet> In reply to @exelotl "Yes, if you want": I use the callback to play the music but I still don't have SFX
[20:13:34] <FromDiscord> <dom96> good point about logging. Why'd you need to rewrite resolution? also what does haxdoc use nimble's APIs for?
[20:14:12] <FromDiscord> <haxscramper> I need to get dependency list, and in nimble it is mixed with download/install stages
[20:14:26] <FromDiscord> <haxscramper> And this was not configurable even at code level
[20:15:34] <FromDiscord> <dom96> yeah, there isn't really another way to do it in Nimble unfortunately
[20:15:50] <FromDiscord> <haxscramper> There should be
[20:15:59] <FromDiscord> <haxscramper> With full package registry I mean
[20:16:19] <FromDiscord> <dom96> of course
[20:21:29] <FromDiscord> <exelotl> In reply to @System64 "I use the callback": if you want music and sfx at the same time you have to mix them yourself - for example introduce a "channel" type where each channel has a source (song or sound effect) and a procedure to mix samples from the source into the output buffer (`output[i] += source[j]  channelVol`)
[20:26:51] <FromDiscord> <System64 ~ Flandre Scarlet> wow seems complex
[20:29:48] <FromDiscord> <System64 ~ Flandre Scarlet> isn't there a risk of clipping?
[20:30:37] *** Quits: neceve (~quassel@2a02:c7f:607e:d600:f762:20dd:304e:4b1f) (Ping timeout: 246 seconds)
[20:31:07] *** Quits: Torro (Torro@gateway/vpn/protonvpn/torro) (Quit: leaving)
[20:37:18] <FromDiscord> <aleclarson> is there a way to print the entire tree of a `NimNode` for inspection?
[20:37:56] <FromDiscord> <aleclarson> oh nvm found it: `astGenRepr`
[20:38:37] <FromDiscord> <System64 ~ Flandre Scarlet> > output[i] += source[j]  channelVol‚Üµit's for nim right?
[20:44:07] <FromDiscord> <exelotl> just psuedocode to demonstrate the concept
[20:47:18] <FromDiscord> <exelotl> and yeah clipping is a risk, you're best off mixing into a floating point buffer then multiply my the master volume and apply limiting (clamp between -1.0 and 1.0) to the buffer once everything is mixed
[20:47:49] *** Joins: pro (~pro@user/pro)
[20:50:51] *** Joins: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com)
[20:51:03] <FromDiscord> <System64 ~ Flandre Scarlet> isn't it CPU heavy?
[20:57:39] <FromDiscord> <System64 ~ Flandre Scarlet> and the thing is the lib that generates the sound outputs 16-bits sound
[20:58:22] <FromDiscord> <leorize> you should use treeRepr as it has less visual clutter‚Üµ(@aleclarson)
[21:02:17] <FromDiscord> <aleclarson> nice \:)
[21:05:51] *** Quits: pro (~pro@user/pro) (Quit: WeeChat 3.2)
[21:07:12] *** Joins: pro (~pro@user/pro)
[21:12:23] <FromDiscord> <exelotl> In reply to @System64 "and the thing is": ah I guess you can mix 16-bit samples into a 32-bit buffer and still be able to multiply and clamp the output when converting it back to 16-bits (assuming SDL is doing 16-bit output)
[21:12:45] <FromDiscord> <exelotl> basic mixing likely won't be too CPU heavy
[21:13:46] <FromDiscord> <exelotl> if you wanna do some fancy stuff like EQ and reverb, that's when things can start to get intensive
[21:31:49] <FromDiscord> <System64 ~ Flandre Scarlet> I'll try that
[21:35:16] *** Joins: vicfred (~vicfred@user/vicfred)
[21:36:47] *** Quits: vicfred (~vicfred@user/vicfred) (Remote host closed the connection)
[21:37:55] *** Joins: vicfred (~vicfred@user/vicfred)
[21:52:36] *** Joins: neceve (~quassel@2a02:c7f:607e:d600:f762:20dd:304e:4b1f)
[21:56:15] <FromDiscord> <aleclarson> how do i re-export?
[21:57:00] <FromDiscord> <aleclarson> sent a code paste, see https://play.nim-lang.org/#ix=3s3B
[21:57:38] <FromDiscord> <Rika> ? have you tried it?
[21:58:09] <FromDiscord> <aleclarson> r u saying my guess is correct? lol
[21:58:42] <FromDiscord> <Rika> yes
[21:58:47] <FromDiscord> <Rika> im pretty sure that is correct
[21:59:44] <FromDiscord> <aleclarson> well that's a nice surprise. intuitive syntax \:)
[21:59:56] <FromDiscord> <aleclarson> what about re-exporting an entire module?
[22:00:07] <fn> <06Prestige99> works the same way
[22:00:12] <fn> <06Prestige99> import foo export foo
[22:00:54] <FromDiscord> <aleclarson> sent a code paste, see https://play.nim-lang.org/#ix=3s3F
[22:01:14] <FromDiscord> <aleclarson> i get `cannot export ./foo`
[22:01:16] <FromDiscord> <Rika> can, just import with relative
[22:01:17] <fn> <06Prestige99> export by name
[22:01:20] <FromDiscord> <Rika> then export without ./
[22:01:30] <fn> <06Prestige99> import ../foo export foo for example
[22:01:52] <FromDiscord> <aleclarson> hmm ok thx!
[22:04:59] <FromDiscord> <haxscramper> sent a code paste, see https://play.nim-lang.org/#ix=3s3H
[22:05:35] <FromDiscord> <haxscramper> Idk whether it qualifies as "safe to use", but the numbers
[22:05:55] <FromDiscord> <haxscramper> Actually wait, I'm being dump with recursive walks again
[22:11:35] <FromDiscord> <haxscramper> sent a code paste, see https://play.nim-lang.org/#ix=3s3I
[22:11:54] <FromDiscord> <haxscramper> So people define helper procs and import different stuff in toplevel
[22:12:24] <FromDiscord> <haxscramper> Defining procs is totally fine, we can handle that easily. Importing things is also not a problem
[22:13:35] <FromDiscord> <haxscramper> This 9 procedure calls are `mkDir`
[22:13:42] <FromDiscord> <haxscramper> sent a code paste, see https://play.nim-lang.org/#ix=3s3J
[22:13:57] <FromDiscord> <haxscramper> That have no business being on toplevel in the first palce
[22:14:20] <FromDiscord> <haxscramper> since each time you try to get a package version it would happily make you a directory
[22:14:21] <FromDiscord> <haxscramper> somewhere
[22:16:37] <FromDiscord> <haxscramper> Seems like we are safe, I will consider updating RFC for completely static toplevel
[22:32:58] *** Quits: max22- (~maxime@2a01cb08833598004ce3b75c202c96bb.ipv6.abo.wanadoo.fr) (Ping timeout: 240 seconds)
[22:45:33] *** Quits: supakeen (~user@python/site-packages/supakeen) (Remote host closed the connection)
[22:45:57] *** Joins: supakeen (~user@python/site-packages/supakeen)
[23:05:36] *** Quits: nisstyre (~wes@user/nisstyre) (*.net *.split)
[23:05:36] *** Quits: pjz (~pjz@place.org) (*.net *.split)
[23:05:37] *** Quits: flynn (~mcbloch@user/flynn) (*.net *.split)
[23:05:37] *** Quits: federico3 (~quassel@debian/federico) (*.net *.split)
[23:05:37] *** Quits: mst (~matthewt@vps-6c71e929.vps.ovh.net) (*.net *.split)
[23:05:37] *** Quits: beshr (~beshr@user/beshr) (*.net *.split)
[23:05:37] *** Quits: fn (~NimBot@ns501209.ip-142-4-210.net) (*.net *.split)
[23:09:58] *** Joins: nisstyre (~wes@user/nisstyre)
[23:09:59] *** Joins: pjz (~pjz@place.org)
[23:09:59] *** Joins: mst (~matthewt@vps-6c71e929.vps.ovh.net)
[23:09:59] *** Joins: beshr (~beshr@user/beshr)
[23:09:59] *** Joins: fn (~NimBot@ns501209.ip-142-4-210.net)
[23:09:59] *** Joins: flynn (~mcbloch@user/flynn)
[23:09:59] *** Joins: federico3 (~quassel@debian/federico)
[23:10:33] *** Quits: flynn (~mcbloch@user/flynn) (Max SendQ exceeded)
[23:11:44] *** Joins: flynn (~mcbloch@user/flynn)
[23:18:48] <FromDiscord> <leorize> [haxscramper](https://matrix.to/#/@haxscramper:matrix.org)\: if you want an example of a static-ish language you can look at meson's build description
[23:18:55] <FromDiscord> <leorize> it's like python, but turing-incomplete
[23:20:08] <FromDiscord> <leorize> btw I noticed the MVS addition, excellent work [haxscramper](https://matrix.to/#/@haxscramper:matrix.org)
[23:31:54] *** Joins: max22- (~maxime@2a01cb0883359800fa08eeaa302ddae6.ipv6.abo.wanadoo.fr)
[23:32:38] <FromDiscord> <haxscramper> Is there any specific feature that you like in meson, [leorize](https://matrix.to/#/@leorize:envs.net) ? I did a quick look, and it seems like it is python-like DSL and maybe some nice things for C build system
[23:32:38] <FromDiscord> <haxscramper> But it is a C build system, so it has a lot of complexity to deal with that
[23:32:39] <FromDiscord> <haxscramper> Also it has `foreach/if`, variables, function calls
[23:32:39] <FromDiscord> <leorize> I'm just thinking if we might want something similar, but for nim
[23:36:43] <FromDiscord> <haxscramper> Maybe, but this could be solved by a collection of helper procs
[23:36:43] <FromDiscord> <leorize> the meson system is declarative but still retain some expressiveness, which is why I think might be a good middle ground for making the current nimscript stuff safe to evaluate
[23:38:05] <FromDiscord> <haxscramper> so you mean replace inner content of the `task` with this?
[23:38:05] <FromDiscord> <leorize> no, task is fine the way its working
[23:38:12] <FromDiscord> <leorize> for the top-level that is
[23:39:33] <FromDiscord> <haxscramper> toplevel can simply be static
[23:39:34] <FromDiscord> <haxscramper> nobody needs anything more complex than that
[23:39:34] <FromDiscord> <haxscramper> but some values make sense only in runtime context like .. idk, `bin`? The only thing I've seen being set up with some complicated logic
[23:39:35] <FromDiscord> <leorize> those are build targets
[23:39:46] <FromDiscord> <leorize> they're a different breed
[23:41:36] <FromDiscord> <leorize> the only issue I can think of about the static top-level is OS-specific deps, but I believe you have that figured out
[23:42:17] <FromDiscord> <Double> can you write discord bots in your language?
[23:42:20] <FromDiscord> <haxscramper> yes, `when defined(windows)` is considered static part
[23:42:21] <FromDiscord> <leorize> and an annoying part of OS-specific deps is that you also have to know what is the target os, please don't forget that
[23:42:40] <FromDiscord> <leorize> for cross-compilation, from linux -\> windows for example
[23:43:05] <FromDiscord> <ElegantBeef> In reply to @Double "can you write discord": Are you asking if one can write discord bots in Nim? If so yes
[23:44:03] <FromDiscord> <Double> In reply to @ElegantBeef "Are you asking if": Yes
[23:44:23] <FromDiscord> <haxscramper> Since I literally not doing that
[23:44:23] <FromDiscord> <haxscramper> But right now I just don't have anything to input for cross-compilation dependencies
[23:44:23] <FromDiscord> <leorize> I think going all-in on DSL is better than trying to do a static-ish nim
[23:44:24] <FromDiscord> <haxscramper> I'm going to write RFC extension for static toplevel
[23:44:24] <FromDiscord> <haxscramper> I don't deal with that, so I would need someone's input on that topic
[23:44:26] <FromDiscord> <haxscramper> https://github.com/krisppurg/dimscord‚Üµ(@Double)
[23:44:42] <FromDiscord> <ElegantBeef> Damn matrix just lagged, got like 5 messages at once üòÑ
[23:44:42] <FromDiscord> <haxscramper> [Edit](https://discord.com/channels/371759389889003530/371759389889003532/861686462025039883): Since I'm literally not doing that
[23:44:48] <FromDiscord> <leorize> but assuming that you're using the compiler's parser, maybe its not a problem
[23:45:01] <FromDiscord> <Double> artificial intelligence bot?
[23:45:26] <FromDiscord> <ElegantBeef> No it's a matrix bridge
[23:45:45] <FromDiscord> <Double> Interesting
[23:45:51] <FromDiscord> <haxscramper> Well, the idea is to have some toplevel static parts that we can reason about easily
[23:45:51] <FromDiscord> <leorize> I'm mostly worried about the flexibility of Nim syntax
[23:45:51] <FromDiscord> <haxscramper> But then we have to write another interpreter on top of manfiest file?
[23:45:52] <FromDiscord> <haxscramper> So far this hasn't been a problem
[23:46:01] <FromDiscord> <ElegantBeef> Though leorize would be a lot cooler if he was a AI bot
[23:46:19] <FromDiscord> <haxscramper> You mean it is overly flexible?
[23:46:19] <FromDiscord> <haxscramper> ...
[23:46:20] <FromDiscord> <haxscramper> Or not enough flexibility
[23:46:20] <FromDiscord> <leorize> if the top-level looks like nim, works like nim, then people will try to write it like nim
[23:46:28] <FromDiscord> <leorize> not an issue if you're importing the compiler to parse it
[23:46:48] <FromDiscord> <haxscramper> ah, yes, I use compiler
[23:46:49] <FromDiscord> <haxscramper> but on top of that
[23:46:49] <FromDiscord> <leorize> but might be an issue for non-compiler
[23:46:50] <FromDiscord> <haxscramper> nope
[23:47:18] <FromDiscord> <haxscramper> everyone writes `requires "string"`
[23:47:21] <FromDiscord> <haxscramper> But of course I will reuse compiler parser
[23:47:21] <FromDiscord> <haxscramper> But of course I will reuse `compiler/parser`
[23:47:30] <FromDiscord> <leorize> I mean, an issue for 3rd party interop that doesn't use the compiler's parser
[23:47:41] <FromDiscord> <leorize> but you can argue that everyone should use the compiler parser, right \:P
[23:48:53] <FromDiscord> <haxscramper> well, yes, I don't think we should optimize manifest format for some undefined external tooling that is not written in nim on top of that
[23:49:27] <FromDiscord> <haxscramper> if it is written in nim it can either use `compiler/parser` or `nimblepkg/manifestparser`
[23:49:28] <FromDiscord> <haxscramper> if you need you can grep for versions
[23:49:28] <FromDiscord> <haxscramper> and all that kind of stuff since it is very simple syntax
[23:49:28] <FromDiscord> <leorize> maybe that portion of nimble should be split into an external package
[23:49:49] <FromDiscord> <leorize> an issue with hybrid packages is that it will always install the binary as well
[23:50:04] <FromDiscord> <haxscramper> There certainly should be nimble-CLI and nimble-library, but I don't see any point in having two separate pacakges
[23:50:37] <FromDiscord> <leorize> `nimble install nimble` -\> `~/.nimble/bin/nimble` is now the preferred nimble
[23:51:15] <FromDiscord> <leorize> which is a slight concern that I have with nimble-cli + nimble-lib in the same package
[23:51:24] <FromDiscord> <haxscramper> isn't that `$PATH` ordering issues?
[23:51:47] <FromDiscord> <haxscramper> nimble packge is not installed by default, isnt it?
[23:51:50] <FromDiscord> <leorize> everyone would have `~/.nimble/bin` above everything else, right?
[23:51:55] <FromDiscord> <haxscramper> [Edit](https://discord.com/channels/371759389889003530/371759389889003532/861688326220939267): nimble package is not installed by default, isn't it?
[23:52:03] <FromDiscord> <leorize> I'm talking about when you build tools that use nimble library
[23:52:13] <FromDiscord> <leorize> then the binary gets installed as well because hybrid packages
[23:53:27] <FromDiscord> <haxscramper> That is a problem that is not nimble-only, I don't always want to build/install binary for hybrid packages
[23:53:38] <FromDiscord> <haxscramper> So better solution would be to disable binary builds for a package
[23:53:59] <FromDiscord> <haxscramper> hmm, actually I was very vague on that part in RFC
[23:53:59] <FromDiscord> <leorize> but some hybrid packages depends on their binary got installed, prime example is nimterop
[23:54:18] <FromDiscord> <haxscramper> I do mention it, but it is a one-line "quality-of-life" feature
[23:54:20] <FromDiscord> <haxscramper> That's why I'm saying to make it optional
[23:54:54] <FromDiscord> <haxscramper> `requires "nimterop", binary = off`
[23:54:54] <FromDiscord> <haxscramper> but that is underexplained
[23:54:55] <FromDiscord> <leorize> I don't think the complexity should be moved to the user
[23:56:06] <FromDiscord> <haxscramper> and who will decide package should not be building binary then?
[23:56:06] <FromDiscord> <haxscramper> I require something
[23:56:06] <FromDiscord> <haxscramper> But not it's binary
[23:56:07] <FromDiscord> <haxscramper> therefore I'm saying `binary = off`
[23:56:07] <FromDiscord> <haxscramper> who else can make this decision for me?
[23:56:31] <FromDiscord> <leorize> what about the case where it doesn't matter, but it happened to be an issue because of global conflicts?
[23:57:11] <FromDiscord> <leorize> I'm building a tool that uses the nimble library, so I `requires "nimble"`, since it's what I want
[23:57:23] <FromDiscord> <leorize> now the binary got installed and messes the users system up
[23:57:34] <FromDiscord> <leorize> I have to dig the docs and use this `binary = off` flag
[23:58:01] <FromDiscord> <haxscramper> because you said nimble you want everything, while in reality you meant "everything but binary"
[23:58:50] <FromDiscord> <haxscramper> alright, if not `binary = off`, what is the alternative?
[23:58:50] <FromDiscord> <haxscramper> Push this to developer and make every hybrid package in two
[23:59:14] <FromDiscord> <leorize> make hybrids use a special requires string
[23:59:15] <FromDiscord> <SolitudeSF> hybrid packages were a mistake
[23:59:31] <FromDiscord> <leorize> they are a `lib` + `cmd` combo, separate them out
[23:59:44] <FromDiscord> <leorize> ie `requires "nimble/cmd"`
[23:59:52] <FromDiscord> <leorize> `requires "nimble/lib"`
