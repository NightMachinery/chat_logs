[00:02:32] *** Joins: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com)
[00:03:11] <nedbat> zen_coder: jinsun's point was this: if you are writing an app, whether you use static types or not only affects you. If you are writing a library, it also affects the users of the library.
[00:03:38] *** Quits: RangerBobVA (~bmaddox@user/rangerbobva) (Quit: Leaving)
[00:04:08] *** Quits: medium_cool (~medium_co@136.36.128.48) (Quit: My Mac Mini has gone to sleep. ZZZzzz‚Ä¶)
[00:05:34] *** Joins: NIKKE (~NIKKE@dyx0pyyh19gtd13njgwmt-3.rev.dnainternet.fi)
[00:05:47] <NIKKE> hello is python 3.10.0 officially realeased? or still in beta?
[00:06:03] <NIKKE> trying to: conda install python==3.10.0¬† but failing
[00:06:23] *** Joins: Warped (~Warped@user/warped)
[00:06:36] <NIKKE> but i can see it in "conda search python" as h96c0403_3 for instance
[00:06:41] <Wulf> NIKKE: https://www.python.org/dev/peps/pep-0619/#schedule
[00:08:09] <NIKKE> Wulf so it should be out? https://bpa.st/TIXA
[00:09:14] *** Joins: monkey_ (~user@190.104.116.153)
[00:10:03] *** Quits: ubert (~Thunderbi@p200300ecdf0ba253e6b318fffe838f33.dip0.t-ipconnect.de) (Remote host closed the connection)
[00:10:21] *** Joins: ubert (~Thunderbi@p200300ecdf0ba253e6b318fffe838f33.dip0.t-ipconnect.de)
[00:11:26] <NIKKE> not sure what im doing wrong
[00:11:51] *** Joins: vd (~vd@bras-base-mtrlpq2848w-grc-41-70-53-240-121.dsl.bell.ca)
[00:12:20] *** Joins: bitplane (~bitplane@2a00:23a8:826:a800:5c8d:e4e:cc1d:cf2f)
[00:12:33] <NIKKE> seems to work if i just create a new environment: conda create --name ten python=3.10.0
[00:13:33] *** Joins: hrehf (~foofaoijf@2001:16b8:2ceb:5100:71fe:ef22:5ef6:b49b)
[00:13:47] *** Joins: mathe8787 (~wellmathe@85.251.70.233.dyn.user.ono.com)
[00:14:04] *** mathe8787 is now known as montpol
[00:14:04] <hrehf> are str always utf-8? If not, how can I retrieve the encoding of a str?
[00:14:31] *** Quits: monkey_ (~user@190.104.116.153) (Remote host closed the connection)
[00:14:53] *** Quits: montpol (~wellmathe@85.251.70.233.dyn.user.ono.com) (Client Quit)
[00:14:59] <nedbat> hrehf: strings in Python aren't in a particular encoding, they are Unicode codepoints.
[00:15:06] <aphysically> do I still have to work if github is down
[00:15:11] *** Joins: Xaldafax (~xaldafax@cpe-198-72-160-101.socal.res.rr.com)
[00:15:46] <hrehf> nedbat wait, I think I can learn something. There is a precise concrete fully-defined definition of "unicode" not meaning one of utf-8, utf-16, utf-7, etc?
[00:15:49] *** Joins: pony (sid524992@smol/hors)
[00:15:56] *** Quits: j1mu5 (~j1mu5@user/j1mu5) (Ping timeout: 265 seconds)
[00:16:14] <hrehf> I thought unicode was just the name for the class of those encodings
[00:17:08] *** Quits: damxsa (~damx@2001:16a2:cc46:e600:cd17:6bf3:a5a4:8bdc) (Remote host closed the connection)
[00:17:58] *** Joins: hemstock (~hemstock@194.59.250.234)
[00:18:00] *** Joins: phantomotap (~phantomot@c-71-207-252-96.hsd1.al.comcast.net)
[00:18:13] <bitplane> unicode is the set of characters, the utf-X are how it's represented as bytes
[00:18:14] <nedbat> hrehf: i guess the term means a few things.  Python strings are a sequence of integers, each representing one codepoint.
[00:18:17] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Remote host closed the connection)
[00:18:39] <nedbat> hrehf: they don't have a particular encoding. You can encode them into bytes as utf-8, utf-16, etc, if you need to.
[00:19:48] <bitplane> oh they're ints inside? I figured they'd be using utf8 or something internally as it solves the space issue
[00:20:02] <hrehf> ah, okay, so that probably means python always holds them opaquely as something like utf-32, and it's possible to decode into something transparent via decode/encode. Finally the weird decode/encode name switch that keeps confusing me
[00:20:11] <bitplane> I know Windows uses some ugly UCS-16 jobbie that doesn't really have multibyte support, or used to anyway
[00:20:36] <nedbat> bitplane: i'm not saying anything about how they are actually stored.  conceptually, they are a sequence of integers
[00:20:47] <bitplane> cool yeah makes sense
[00:21:02] <bitplane> I guess that's implementation specific detail anyway
[00:21:06] *** Joins: damxsa (~damx@2001:16a2:cc46:e600:cd17:6bf3:a5a4:8bdc)
[00:21:13] *** Joins: x88x88x (~cheeg@gateway/vpn/pia/x88x88x)
[00:21:16] *** Joins: rvalue (~rvalue@user/rvalue)
[00:21:18] *** justache is now known as justBOOMER
[00:21:49] <bitplane> you can join them, compare them, manipulate them without knowing wtf they really are. then when you output them somewhere you encode them first
[00:22:40] <Wulf> hrehf: unicode encodes characters to code points, e.g. "e" to U+0065 or "üêç" to U+1F40D. UTF-8 encodes those code points to byte sequences.
[00:24:23] <aphysically> duck
[00:24:51] <nedbat> hrehf: some of this is covered here: https://nedbatchelder.com/text/unipain.html
[00:24:56] <Wulf> aphysically: print("\N{DUCK}")
[00:26:31] <bitplane> ah, ucs-2 that was the crummy windows one that caused me all that pain 15 years ago
[00:26:45] *** Joins: tar_xvf (~tar_xvf@ec2-3-136-243-174.us-east-2.compute.amazonaws.com)
[00:27:02] <aphysically> a moment of silence to everyone who was on call this weekend for github
[00:27:30] *** Quits: vd (~vd@bras-base-mtrlpq2848w-grc-41-70-53-240-121.dsl.bell.ca) (Ping timeout: 256 seconds)
[00:27:31] *** Joins: NyaaTheCat (~CalculusC@pool-71-178-171-140.washdc.fios.verizon.net)
[00:27:41] <aphysically> just wanted to relax ;^(
[00:27:54] *** Parts: tar_xvf (~tar_xvf@ec2-3-136-243-174.us-east-2.compute.amazonaws.com) (WeeChat 3.3)
[00:28:18] *** Quits: x88x88x (~cheeg@gateway/vpn/pia/x88x88x) (Remote host closed the connection)
[00:29:41] <kenwoodfox> Can i override the logging hostname var?
[00:29:57] <kenwoodfox> or, maybe i can make two logger instances
[00:30:08] <hrehf> nedbat: thanks
[00:30:08] *** Quits: neff (~neff@89-138-208-63.bb.netvision.net.il) (Read error: Connection reset by peer)
[00:30:31] <mkbloke> aphysically: :)
[00:36:52] *** Joins: x88x88x (~chee@gateway/vpn/pia/x88x88x)
[00:39:15] *** Parts: rtgg (~rtgg@p5791f0bc.dip0.t-ipconnect.de) ()
[00:40:01] *** Joins: hqdruxn08_ (~hqdruxn08@cpe-66-68-166-214.austin.res.rr.com)
[00:40:32] *** Quits: velgin_ (~velgin@pool-96-237-105-119.bstnma.fios.verizon.net) (Read error: Connection reset by peer)
[00:42:01] *** Quits: Mechanismus (~LabMonkey@206.255.106.67) (Quit: Leaving)
[00:43:08] *** Quits: imp (~imp@192-141-191-227.alternativaip.net.br) (Read error: Connection reset by peer)
[00:43:11] *** Quits: ThePhilgrim (~ThePhilgr@151.41.185.44) (Ping timeout: 268 seconds)
[00:44:25] *** Quits: hqdruxn08__ (~hqdruxn08@cpe-66-68-166-214.austin.res.rr.com) (Ping timeout: 268 seconds)
[00:45:24] *** Quits: x88x88x (~chee@gateway/vpn/pia/x88x88x) (Remote host closed the connection)
[00:46:50] *** Joins: guenhael (~Thunderbi@aaubervilliers-652-1-290-168.w82-121.abo.wanadoo.fr)
[00:48:03] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[00:48:13] *** tombobcat is now known as selikolg
[00:48:19] *** Joins: x88x88x (~cheeg@gateway/vpn/pia/x88x88x)
[00:48:32] *** Quits: psyxopompos (~psyxopomp@user/psyxopompos) (Quit: WeeChat 3.0)
[00:48:58] *** Joins: whaley (~whaley@2603-6080-a312-c426-d446-c15e-23ee-d1be.res6.spectrum.com)
[00:49:35] *** Quits: whaley (~whaley@2603-6080-a312-c426-d446-c15e-23ee-d1be.res6.spectrum.com) (Read error: Connection reset by peer)
[00:50:19] *** Quits: NIKKE (~NIKKE@dyx0pyyh19gtd13njgwmt-3.rev.dnainternet.fi) (Quit: Client closed)
[00:50:39] *** Joins: evocatus (~evocatus@213.193.2.105)
[00:51:05] *** Quits: betuxy (~betuxy@p579ad707.dip0.t-ipconnect.de) (Quit: Connection closed)
[00:51:30] *** Quits: selikolg (~tombobcat@178.62.2.76) (Quit: ZNC 1.7.5+deb4 - https://znc.in)
[00:51:47] *** Joins: selikolg (~selikolg@178.62.2.76)
[00:52:01] *** Quits: NyaaTheCat (~CalculusC@pool-71-178-171-140.washdc.fios.verizon.net) (Quit: I have phased into another dimension, see ya later!)
[00:53:55] *** Joins: NyaaTheCat (~CalculusC@pool-71-178-171-140.washdc.fios.verizon.net)
[00:54:13] *** Joins: whaley (~whaley@cpe-24-88-70-100.sc.res.rr.com)
[00:55:21] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Ping timeout: 276 seconds)
[00:56:51] *** Joins: FinnElija (~finn_elij@user/finn-elija/x-0085643)
[00:58:46] *** Joins: Macuser (~Macuser@2600:1003:b45e:2f7f:59ee:3b4c:2039:46eb)
[00:59:00] *** Quits: phantomotap (~phantomot@c-71-207-252-96.hsd1.al.comcast.net) (Quit: Leaving)
[01:02:06] *** Joins: vd (~vd@bras-base-mtrlpq2848w-grc-41-70-53-240-121.dsl.bell.ca)
[01:03:32] *** Quits: Lando-SpacePimp (~Lando-Spa@user/lando-spacepimp) (Ping timeout: 240 seconds)
[01:03:32] *** Quits: NyaaTheCat (~CalculusC@pool-71-178-171-140.washdc.fios.verizon.net) (Quit: I have phased into another dimension, see ya later!)
[01:04:43] *** Quits: upsala (~zcb@185.213.155.252) (Quit: WeeChat 3.3)
[01:06:16] *** Joins: givemeyourpies (~givemeyou@c-66-235-2-202.sea.wa.customer.broadstripe.net)
[01:07:06] *** Joins: NyaaTheCat (~CalculusC@pool-71-178-171-140.washdc.fios.verizon.net)
[01:07:44] *** Quits: vd (~vd@bras-base-mtrlpq2848w-grc-41-70-53-240-121.dsl.bell.ca) (Ping timeout: 256 seconds)
[01:08:40] *** Quits: NyaaTheCat (~CalculusC@pool-71-178-171-140.washdc.fios.verizon.net) (Client Quit)
[01:08:45] *** Quits: zer0bitz (~zer0bitz@2001:2003:f6bc:f00:9d34:9ef:e98a:2cbe) (Read error: Connection reset by peer)
[01:08:59] *** Quits: whaley (~whaley@cpe-24-88-70-100.sc.res.rr.com) (Quit: It won't give up.  It wants me dead.  Goddamn this noise inside my head.)
[01:09:21] *** Joins: ThePhilgrim (~ThePhilgr@151.41.185.44)
[01:09:59] *** Joins: parv (~quass@user/parv)
[01:12:28] *** Joins: Mechanismus (~LabMonkey@206.255.106.67)
[01:12:34] *** Quits: ircuser-1 (~Johnny@71.63.241.168) (Quit: because)
[01:18:18] *** Joins: NyaaTheCat (~CalculusC@pool-71-178-171-140.washdc.fios.verizon.net)
[01:21:03] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[01:22:30] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[01:22:31] *** Joins: Pickchea (~private@user/pickchea)
[01:24:25] *** Quits: NyaaTheCat (~CalculusC@pool-71-178-171-140.washdc.fios.verizon.net) (Read error: Connection reset by peer)
[01:25:28] *** Joins: zebrag (~chris@user/zebrag)
[01:27:01] *** Joins: NyaaTheCat (~CalculusC@pool-71-178-171-140.washdc.fios.verizon.net)
[01:28:44] *** Joins: brentaarnold (~brentaarn@32.132.115.46)
[01:30:32] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 240 seconds)
[01:32:50] *** Joins: fikran (~fikran@user/fikran)
[01:33:14] *** Joins: nomic (~nomic@185.217.117.132)
[01:34:25] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[01:36:45] *** Quits: Macuser (~Macuser@2600:1003:b45e:2f7f:59ee:3b4c:2039:46eb) (Quit: My MacBook has gone to sleep. ZZZzzz‚Ä¶)
[01:37:14] *** Joins: forgotmynick (uid24625@id-24625.hampstead.irccloud.com)
[01:38:33] <nedbat> frustrating experience of the day: try to make a test suite go faster, end up just shuffling tests, which uncovers bizarre test couplings that I can't explain or fix.
[01:41:28] *** Quits: wingsorc (~wingsorc@user/wingsorc) (Quit: Leaving)
[01:43:01] *** Quits: mallkrampus (~mallkramp@148.72.164.119) (Ping timeout: 268 seconds)
[01:46:05] *** Joins: awmv (~awmv@2a02:21b0:644f:c181:2c15:8095:e6b8:fe4)
[01:47:39] *** Quits: Santzes (~Santzes@2400:8901::f03c:92ff:fe49:47a6) (Quit: WeeChat 3.2)
[01:48:44] *** Quits: mihaiadrian (~Thunderbi@82.76.223.244) (Remote host closed the connection)
[01:52:39] *** Joins: bancroft (~bancroft@bras-base-mtrlpq02hsy-grc-09-76-68-189-165.dsl.bell.ca)
[01:54:04] *** Joins: Santzes (~Santzes@2400:8901::f03c:92ff:fe49:47a6)
[01:54:12] *** Quits: bitplane (~bitplane@2a00:23a8:826:a800:5c8d:e4e:cc1d:cf2f) (Ping timeout: 256 seconds)
[01:56:28] *** Joins: mallkrampus (~mallkramp@64.44.140.60)
[01:56:39] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Quit: ERC (IRC client for Emacs 27.1))
[01:58:09] *** Quits: bancroft (~bancroft@bras-base-mtrlpq02hsy-grc-09-76-68-189-165.dsl.bell.ca) (Ping timeout: 256 seconds)
[01:58:32] *** Quits: x88x88x (~cheeg@gateway/vpn/pia/x88x88x) (Ping timeout: 240 seconds)
[01:58:34] *** Joins: bancroft (~bancroft@bras-base-mtrlpq02hsy-grc-09-76-68-189-165.dsl.bell.ca)
[01:58:37] *** Quits: rakoon (~rakoon@2001:985:f4c6:1:4051:4ef6:e952:2a9c) (Quit: WeeChat 2.8)
[01:59:45] *** Quits: greedom (~greedom@p200300de67426b00ef4aa59168ec0e54.dip0.t-ipconnect.de) (Remote host closed the connection)
[02:00:00] *** Joins: carl--- (~carl-@c-138ee555.02-180-73746f39.bbcust.telenor.se)
[02:03:21] *** Joins: Themis3000 (~Thunderbi@user/themis3000)
[02:03:47] *** Joins: y1n (~y1n@178.115.47.173.wireless.dyn.drei.com)
[02:04:56] *** Quits: Barones (~Barones@2804:7f3:8987:f411:88c0:ec5e:94ff:7eaf) (Remote host closed the connection)
[02:04:59] <Celelibi> Hey guys. I was wondering if it's bad practice to use a context manager to time a portion of code.
[02:05:04] *** Joins: vd (~vd@bras-base-mtrlpq2848w-grc-41-70-53-240-121.dsl.bell.ca)
[02:05:30] <Celelibi> Or if the context managers should only be used for resource management.
[02:06:04] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[02:06:18] *** Joins: Barones (~Barones@177.96.250.224.dynamic.adsl.gvt.net.br)
[02:06:47] <ammar2> it's not bad practice, in fact the built-in timeit module supports a context manager based API
[02:08:04] <ammar2> err wait, no it doesn't
[02:08:29] <ammar2> but anyway, for coarse grained timing data, using context managers should be good
[02:09:18] *** Quits: NyaaTheCat (~CalculusC@pool-71-178-171-140.washdc.fios.verizon.net) (Quit: I have phased into another dimension, see ya later!)
[02:11:30] *** Quits: fedenix (~fedenix@gateway/tor-sasl/fedenix) (Remote host closed the connection)
[02:11:48] *** Quits: tabakhase (~tabakhase@user/tabakhase) (Ping timeout: 256 seconds)
[02:11:56] *** Joins: pycurious (~Adium@user/pycurious)
[02:12:44] *** Joins: Betal (~Betal@user/betal)
[02:13:04] *** Quits: goldfish (~goldfish@user/goldfish) (Ping timeout: 260 seconds)
[02:13:15] *** Joins: ubert1 (~Thunderbi@p200300ecdf0ba253e6b318fffe838f33.dip0.t-ipconnect.de)
[02:13:32] *** Quits: ubert (~Thunderbi@p200300ecdf0ba253e6b318fffe838f33.dip0.t-ipconnect.de) (Read error: Connection reset by peer)
[02:13:32] *** ubert1 is now known as ubert
[02:14:26] *** Quits: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk) (Quit: Leaving)
[02:14:53] *** Quits: nucranium (~nucranium@2a02:8010:6173:0:2164:de0d:a8d4:46df) (Remote host closed the connection)
[02:14:54] *** Quits: jstein (~jstein@gentoo/developer/jstein) (Quit: quit)
[02:15:39] <Celelibi> Ok, thanks.
[02:16:09] <Celelibi> And yes, it's not meant for micro-benchmarking. It's meant for general information for the user.
[02:17:44] *** Joins: jdavfsxd (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[02:18:16] *** Quits: carl--- (~carl-@c-138ee555.02-180-73746f39.bbcust.telenor.se) (Ping timeout: 245 seconds)
[02:19:20] *** Joins: Henistein (~Henistein@2001:8a0:c18a:f601:d0cb:e87e:b05:ed0d)
[02:21:03] <Celelibi> Oh, another unrelated question: I have a very hard time explaining to my students that having a clean indentation is crucial. Why they should pay close attention to it and why python is therefore a nice language to learn.
[02:21:47] *** Quits: delvian (~delvian@41.13.198.66) (Quit: Leaving)
[02:22:34] <ede> tbh i'd be lost w/o proper indentation. even in trivial bash scripts.
[02:22:37] <bancroft> Celelibi: sure, but like any language there are downsides to python. So what's your question?
[02:22:41] <Celelibi> I guess I have a hard time explaining the importance of it because it's only based on my subjective experience. So are there some studies about indentation, code maintability, developers prefering patterns and sucH?
[02:23:01] *** Parts: pony (sid524992@smol/hors) ()
[02:23:41] <Celelibi> bancroft, what's the downside of forcing blocs of code to be indented?
[02:23:50] *** Joins: Fiji (~Fiji@user/fiji)
[02:24:10] *** Joins: Fiji_ (~Fiji@user/fiji)
[02:25:03] <bancroft> Celelibi: not the blocks itself but the lack of strict typing is definitely an issue.
[02:25:26] <Celelibi> In some situations, indeed it can be.
[02:26:30] *** Joins: delvian (~delvian@41.13.198.66)
[02:27:34] *** Joins: tabakhase (~tabakhase@user/tabakhase)
[02:28:14] *** Quits: Fiji (~Fiji@user/fiji) (Ping timeout: 256 seconds)
[02:28:16] *** Quits: lyr (~lyr@user/lyr) (Quit: Ping timeout (120 seconds))
[02:28:33] *** Joins: lyr (~lyr@user/lyr)
[02:29:21] *** Quits: GreenResponse (~tomek@r-45-155-148-237.gpon.bialnet.pl) (Quit: Leaving)
[02:29:27] <Celelibi> ede, well, basically, you're saying even less than I tell my students. ^^
[02:30:50] *** Quits: jdavfsxd (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Remote host closed the connection)
[02:30:50] <Celelibi> I tend to tell them that code is meant to be read by humans more than by the computer. And humans tend to pay more attention to the indentation than small sneaky symbols like braces.
[02:30:51] <bancroft> Celelibi: so you're using a library that doesn't have types and their documentation is flat-out wrong (not uncommon). How can you make code ready for production? So you write your own types, and write tests to make sure your custom defined types continue to work. But you still can't account for any new exceptions they introduce. Big !@#$ problem.
[02:30:57] *** Quits: magla (~gelignite@55d49b41.access.ecotel.net) (Quit: Stay safe!)
[02:30:58] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[02:31:43] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Client Quit)
[02:32:02] <ede> Celelibi: i realized that such symbols are also a real help (started with pascal and C on the PC). BEGIN .... END. really not. also, mathematical language.
[02:32:09] *** Joins: jdavfsxd (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[02:34:09] <Celelibi> bancroft, I see types as just some invariants put onto the code that help manage the complexity. Because as a program grows more complex, less and less people know how every part of it work together.
[02:34:31] <Celelibi> Making the assumptions at least partly explicit with types do help.
[02:35:31] <bancroft> Celelibi: don't get me wrong, i love python it's the first language I ever learned and it got me to learn many others and it's probably the best prototyping language. But any serious code shouldn't be written in it
[02:36:37] <Celelibi> ede, really, you think that braces help in C? Personnally, when I see a code indented with only two spaces (or worse, with the GNU coding style), I can't visually see where a block ends if it's more than a few lines long and has other nested blocks.
[02:36:41] <grym> bancroft: speak for yourself :P
[02:36:45] <Celelibi> That's unfortunately very common.
[02:36:55] *** Quits: evocatus (~evocatus@213.193.2.105) (Quit: Leaving)
[02:37:07] <ede> Celelibi: yeah, i really like editors with vertical hints ;)
[02:37:43] *** Joins: lovelace (~Elspeth@2.24.23.175)
[02:38:00] <ede> 4 is pretty good, but in things like endless formatted JSON it doesn't really help.
[02:38:02] <Celelibi> Not sure they would help me there. When you have a vertical line on every other column with other nested blocks inside and outside.
[02:38:22] *** Quits: Pickchea (~private@user/pickchea) (Quit: Leaving)
[02:38:41] <Celelibi> 4 is the minimum readable. But I very much prefer tabs, so that I can display them as 8 characters wide.
[02:40:15] <ede> i remember i've read something about the problem with line width when using 8. if your screen becomes to small then you're doing something wrong ;)
[02:40:33] *** Quits: manti7 (~manti7@176.10.104.94) (Quit: WeeChat 3.3)
[02:40:41] <ede> i think this was more about not having too many indent levels
[02:40:47] *** Quits: gitesh (uid423739@id-423739.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[02:40:58] <Celelibi> bancroft, I don't know about that. It's true that static typing does help manage the complexity. But, well... you can have type hints checking be part of the development workflow.
[02:40:59] *** Joins: djapo (~archangel@user/djapo)
[02:41:12] *** Quits: djapo (~archangel@user/djapo) (Remote host closed the connection)
[02:41:35] <Celelibi> ede, 8 chars indentation and 80-ish columns.
[02:42:07] <Celelibi> And not breaking long lines. (The solution is to not write them.)
[02:43:21] <Celelibi> You'd be surprised how these constraints makes the code much more simple and readable. It forces you to redesign some parts of your code, to build more abstractions, to name things and give them semantics.
[02:43:35] <Celelibi> It's all good for readability, understandability and maintainability.
[02:43:49] <ede> when i think of function definitions in OWL i've seen back in the 90s...
[02:44:44] <ede> i'm really bad with names. in any aspect. can't memorize them, can't think of usable ones, if for files or functions :(
[02:44:51] *** Joins: Atque (~Atque@user/atque)
[02:45:23] <Celelibi> That's precisely why you should work on it. It's one very crucial aspect of good code.
[02:46:11] *** Quits: jim (~jim@about/linux/staff/jim) (Ping timeout: 245 seconds)
[02:46:23] <ede> RtlWriteDecodedUcsDataIntoSmartLBlobUcsWritingContext -> https://ashutoshmehra.net/blog/2010/02/long-function-names/
[02:46:52] <ede> *nod*
[02:47:17] <wootehfoot> ede, but code with short variable names runs faster, right? Let's rewrite it into abbreviated gibberish instead
[02:47:57] <wootehfoot> sadly such people actually exist
[02:48:54] <Themis3000> That's what minimizers are for
[02:50:01] <ChrisWarrick> Themis3000: minifiers in JS are to minimize bytes transfered, not improve code speed
[02:50:15] <wootehfoot> hahahahaha
[02:51:02] <Themis3000> I know
[02:51:03] <Celelibi> wootehfoot, it's unfortunately very easy to make this assumption implicitely.
[02:51:44] *** Joins: waveclaw (~quassel@ip98-162-237-241.ok.ok.cox.net)
[02:51:56] <Celelibi> Less code runs faster (on average), so you get into the mindset of writing the shortest code.
[02:52:11] <Celelibi> Which apply equally to the number of lines and the identifier length.
[02:52:31] <Celelibi> But interestingly, it apply less strongly to the complexity of the lines written.
[02:53:56] <Themis3000> I think in python though longer variable names do run slightly slower though by a tiny margin https://stackoverflow.com/a/12106556/5813879. Nothing to be worth even using a python minimizer though
[02:55:08] <wootehfoot> Celelibi, it's an assumption some refuse to let go of, trusting own inferred knowledge, because [individual] saw what a few lines of assembler code looks like - monkey see monkey do
[02:55:38] <ChrisWarrick> Themis3000: the microbenchmark in the first answer (a) says otherwise (b) is useless anyways
[02:55:39] <wootehfoot> Themis3000, parsing happens prior to execution
[02:55:50] *** Joins: luigibu1 (~luigibu@80.30.201.209)
[02:56:11] *** Quits: kosh (~kosh@user/kosh) (Ping timeout: 245 seconds)
[02:58:10] <Themis3000> ?? it shows a extremely low time difference. They call the time difference "neglegible". I'd assume the longer names maybe just slow down parsing by an extremely low amount that's not even worth considering
[02:58:25] <ChrisWarrick> Themis3000: the long variable name is faster
[02:58:32] <ChrisWarrick> ‚Äú‚Äú‚Äúfaster‚Äù‚Äù‚Äù*
[02:58:41] <Celelibi> "Best of 3" does it mean it was run only 3 times? On such a tiny duration?
[02:58:46] *** Quits: LucaTM (~LucaTM@user/lucatm) (Quit: Textual IRC Client: www.textualapp.com)
[02:58:47] <Celelibi> Could be due to anything.
[02:59:17] <Themis3000> it says "10000000 loops" and has the code it's executing right there
[02:59:39] <ChrisWarrick> it‚Äôs a pointless microbenchmark
[02:59:47] <Themis3000> ChrisWarrick: oh I didn't notice the longer one was faster, that's interesting
[02:59:50] <Themis3000> I know it's pointless
[03:00:27] *** Joins: jazzy3 (~jaziz@user/jaziz)
[03:00:29] <Themis3000> I just think it's interesting. It's not gonna be a consideration or change how I code or anything ever
[03:00:33] <Celelibi> Anyway, could still be anything. I'd bet the bytecode generated is the same.
[03:01:06] <Celelibi> Could be the memory allocation that performs slightly better by preallocating a larger chuck or whatever.
[03:01:20] <wootehfoot> the IR doesn't care about variable names, they're not even human readable
[03:01:23] <Themis3000> I'm sure it is generating the same bytecode. could be anything though.
[03:01:55] <ChrisWarrick> they‚Äôre running this test on a computer running hundreds of different processes and system services at the same time
[03:02:02] *** Quits: damxsa (~damx@2001:16a2:cc46:e600:cd17:6bf3:a5a4:8bdc) (Ping timeout: 240 seconds)
[03:02:26] <Celelibi> That as well.
[03:03:00] <Celelibi> Most probably with a browser opened on stackoverflow, running tons of javascript periodically.
[03:03:01] <Themis3000> I do wonder what it would look like on a truly isolated environment though. That time difference could easily be from outside factors like you mentioned
[03:03:55] <Celelibi> Hm... Maybe I have a server on hand for that.
[03:03:56] *** Quits: luigibu1 (~luigibu@80.30.201.209) (Ping timeout: 256 seconds)
[03:05:05] *** Quits: Seirdy (~Seirdy@sourcehut/user/seirdy) (Quit: exiting 3.3)
[03:05:24] <Themis3000> If you run a test to see if there is a difference let me know, I'd be interested to hear if one is really slightly faster then the other or if they're pretty much dead even
[03:05:39] *** Joins: Seirdy (~Seirdy@sourcehut/user/seirdy)
[03:05:58] <Timvde> I just tested the same code on my machine, both ended up between 29 and 31 ns every time without any being obviously faster than the other one
[03:06:05] <Timvde> It's probably just coincidence.
[03:08:04] <jinsun> I can confirm the one with longer names is faster, just tried on my machine
[03:08:32] <Celelibi> https://bpa.st/XSYQ
[03:08:38] <jinsun> 7.65 ns vs 7.67 ns for shorter name
[03:08:41] <ChrisWarrick> so‚Ä¶ does Python have a maximum variable name length?
[03:09:00] <Themis3000> Huh I wonder why you both have different results. I was hoping one would consistently faster then the other. Them running at the same speed is too predictable and uninteresting
[03:09:02] <Celelibi> Should probably check the average variance, and maybe compute some p-value.
[03:09:20] <Celelibi> average and variance*
[03:09:31] *** Quits: pycurious (~Adium@user/pycurious) (Quit: Leaving.)
[03:10:05] <Celelibi> jinsun, is it consistently faster?
[03:10:07] <Themis3000> ChrisWarrick: I think they're unlimited in possible length
[03:10:12] <Themis3000> https://stackoverflow.com/a/16920876/5813879
[03:11:07] <Themis3000> I wonder how long an identifier can be before it takes a significant amount of time to parse
[03:11:09] <SnoopJ> Themis3000, there can be a surprising amount of variation between different builds of the same interpreter
[03:11:11] *** Quits: bancroft (~bancroft@bras-base-mtrlpq02hsy-grc-09-76-68-189-165.dsl.bell.ca) (Ping timeout: 245 seconds)
[03:11:23] <bjs> Shorter names will be faster as looking up names is a dictionary lookup with the name as a string key
[03:11:23] <jinsun> Celelibi: yes
[03:11:37] *** Joins: phantomotap (~phantomot@c-71-207-252-96.hsd1.al.comcast.net)
[03:11:37] <bjs> and that lookup is O(n) in the length of the string
[03:12:01] <grym> see, FORTRAN was right
[03:12:03] <grym> >:)
[03:12:28] <SnoopJ> it was also spelled like that, once!
[03:12:52] *** Quits: lovelace (~Elspeth@2.24.23.175) (Quit: Konversation terminated!)
[03:14:04] *** Quits: blindguard (~blindguar@2a02:908:1864:c200::12) (Quit: Konversation terminated!)
[03:14:22] *** Quits: ThePhilgrim (~ThePhilgr@151.41.185.44) (Quit: ThePhilgrim)
[03:16:14] *** Quits: wootehfoot (~wootehfoo@user/wootehfoot) (Read error: Connection reset by peer)
[03:16:27] *** Quits: hemstock (~hemstock@194.59.250.234) ()
[03:18:46] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[03:18:49] <ChrisWarrick> my micro-benchmark says your variables should be 16777216 characters long: https://bpa.st/22GQ
[03:19:19] *** Quits: cedric (~cedric@2a01:cb11:821:7c00:73d2:b9cb:440e:ac9a) (Quit: Konversation terminated!)
[03:19:28] <ChrisWarrick> eg, 8388608 characters long*
[03:20:10] <CrtxReavr> My biggest dicts have always used integers as keys. . . or tuples of integers.
[03:20:39] <Timvde> chilversc++, thanks for doing the hard work
[03:20:44] <Timvde> damn it :P
[03:20:46] <Timvde> ChrisWarrick++
[03:21:03] <Timvde> Sorry for the mention, other person
[03:21:07] <bjs> CrtxReavr: well integers are also not-constant lookup time,  basically nothing is constant lookup time if you're willing to expoit the arbitrary-sizeness
[03:21:19] <Themis3000> ChrisWarrick: Lmao for some reason I thought 8388608 characters would have made parsing slow and near some sort of breaking point. I'm always underestimating what computers can do fast
[03:21:41] *** Quits: darksun (~darksun@user/darksun) (Quit: leaving)
[03:21:46] <Themis3000> ChrisWarrick: ++ thank you for running that test, I very much enjoy seeing that
[03:22:12] <nedbat> Celelibi: askyourstudentswhyspacesbetweenwordsareimportant. Maybe then they will understand about indentation?
[03:22:17] <ChrisWarrick> Themis3000: perhaps timeit just parses the code once and then runs the parsed thing multiple times, I dunno
[03:23:17] <Celelibi> nedbat, well, that's not the same as indentation.
[03:23:18] <Themis3000> ChrisWarrick: perhaps, that's a really good point
[03:23:29] <bjs> nedbat: idontseewhatswrongwiththatsinceicanreaditperfectlyfine?
[03:23:33] <bjs> sowhatstheproblem
[03:23:55] <nedbat> Celelibi: not exactly the same, but it shows that spaces can be important for understanding text
[03:24:55] <nedbat> bjs: the medieval scribes don't understand either
[03:25:28] *** Quits: Allegretto (~allegrett@84-236-65-68.pool.digikabel.hu) (Ping timeout: 256 seconds)
[03:26:12] *** Quits: millido (~millido@84.210.150.128) (Quit: ZNC 1.8.2 - https://znc.in)
[03:27:36] *** Quits: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[03:28:05] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: ZzzZ)
[03:28:41] *** Quits: dextercd (~dexter@2a02-a450-f25d-1-76d4-35ff-fefe-34c.fixed6.kpn.net) (Quit: WeeChat 3.3)
[03:30:02] *** Quits: waxfire (~waxfire@65.119.2.240) (Quit: The Lounge - https://thelounge.chat)
[03:30:19] *** Joins: waxfire (~waxfire@65.119.2.240)
[03:31:20] *** Joins: pycurious (~Adium@user/pycurious)
[03:32:42] *** Quits: runlevel_0 (~nyarlatho@user/runlevel-0/x-6929182) (Quit: Konversation terminated!)
[03:34:50] <jinsun> mandatory good indentation isn't really much of a benefit, when you can just run auto-formatters on your code
[03:35:25] <jinsun> in fact it works against black, because a file with mixed tabs and spaces cannot be fixed because the behavior will change
[03:37:17] *** Joins: Allegretto (~allegrett@84-236-126-151.pool.digikabel.hu)
[03:38:08] *** Joins: Lando-HoloNet (~Lando-Spa@user/lando-spacepimp)
[03:39:24] *** Quits: Auron (~Auron956@user/auron) (Remote host closed the connection)
[03:40:23] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 265 seconds)
[03:41:05] *** Joins: dre (~dre@2001:8003:c932:c301:7e35:e886:e998:1b1c)
[03:42:11] *** Joins: fikran (~fikran@user/fikran)
[03:43:38] <grym> nedbat: most manuscripts have marks to seperate ambiguous words in lieu of whitespace :)
[03:43:45] <grym> parser tokens!
[03:43:57] *** Joins: jim (~jim@about/linux/staff/jim)
[03:44:29] <grym> minifiers make more sense when your punchtape comes from sheep
[03:49:20] *** Joins: Kanjizai (~kanjizai@cpe-107-185-193-171.socal.res.rr.com)
[03:52:51] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 245 seconds)
[03:53:28] *** Joins: monkey_ (~user@190.104.116.153)
[03:56:39] *** Quits: bomb-on (~bomb-on@194.144.47.113) (Quit: a–ª–ª–∏–ª—π—ñ–∞!)
[03:57:26] *** Quits: Henistein (~Henistein@2001:8a0:c18a:f601:d0cb:e87e:b05:ed0d) (Quit: Client closed)
[04:01:46] *** Quits: Wulf (~Wulf@user/wulf) (Ping timeout: 268 seconds)
[04:02:36] *** Quits: kickingvegas (~cchoi@c-24-5-40-20.hsd1.ca.comcast.net) (Quit: leaving)
[04:03:00] *** Joins: Wulf (~Wulf@user/wulf)
[04:03:07] *** Quits: onichomp (~onichomp@2806:264:4404:80b7:39b5:1fff:b620:146d) (Read error: Connection reset by peer)
[04:03:45] *** Joins: onichomp (~onichomp@2806:264:4404:80b7:68f8:d4df:964e:ba0)
[04:04:23] *** Quits: Andrynet (~Andrynet@190.152.210.157) (Ping timeout: 250 seconds)
[04:06:26] *** Joins: Andrynet (~Andrynet@190.152.210.157)
[04:06:49] *** Quits: pycurious (~Adium@user/pycurious) (Quit: Leaving.)
[04:06:57] *** Quits: forgotmynick (uid24625@id-24625.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[04:10:18] *** Joins: damxsa (~damx@2001:16a2:cc46:e600:cd17:6bf3:a5a4:8bdc)
[04:11:37] *** Quits: parv (~quass@user/parv) (Ping timeout: 268 seconds)
[04:14:38] *** Quits: ali1234 (~al@user/ali1234) (Ping timeout: 260 seconds)
[04:15:48] *** Quits: xrogaan (~xrogaan@user/xrogaan) (Quit: Leaving)
[04:15:57] *** Quits: superboot (~agentgasm@user/superboot) (Quit: leaving)
[04:19:06] *** Quits: vit (~vit@chello085216193138.chello.sk) (Ping timeout: 245 seconds)
[04:22:03] *** Quits: penguino (~mrpenguin@user/mrpenguin) (Ping timeout: 276 seconds)
[04:22:49] *** Quits: phax (~phax@user/phax) (Remote host closed the connection)
[04:24:21] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[04:25:04] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Client Quit)
[04:27:23] *** Joins: PantelicGR (~PantelicG@user/pantelicgr)
[04:32:04] *** Quits: PantelicGR (~PantelicG@user/pantelicgr) (Client Quit)
[04:33:32] *** Quits: zen_coder (~zen_coder@2a02:8109:a280:2d8d:c9c2:550b:b5da:5a2a) (Quit: Konversation terminated!)
[04:34:47] *** Quits: delvian (~delvian@41.13.198.66) (Quit: Leaving)
[04:36:21] *** Joins: xardas (~xardas@149.233.51.127)
[04:37:32] *** Quits: Andrynet (~Andrynet@190.152.210.157) (Ping timeout: 240 seconds)
[04:38:10] <Forty-Bot> what's the correct way to implement a METH_FASTCALL method?
[04:38:24] <Forty-Bot> seems like all the exported helpers expect a tuple
[04:38:40] *** Quits: Midjak (~Midjak@may53-1-78-226-116-92.fbx.proxad.net) (Ping timeout: 260 seconds)
[04:38:40] <Forty-Bot> should I just use e.g. _PyArg_UnpackStack?
[04:39:38] *** Joins: penguino (~mrpenguin@user/mrpenguin)
[04:39:47] *** Joins: Andrynet (~Andrynet@190.152.210.157)
[04:40:55] *** Joins: Midjak (~Midjak@may53-1-78-226-116-92.fbx.proxad.net)
[04:41:16] *** Quits: newpy (~newpy@206.168.231.90) (Quit: Leaving)
[04:44:56] *** Quits: Andrynet (~Andrynet@190.152.210.157) (Ping timeout: 245 seconds)
[04:47:08] *** Joins: Andrynet (~Andrynet@190.152.210.157)
[04:48:37] *** Joins: domhnall (~developer@user/domhnall/x-2887755)
[04:50:11] *** Joins: audiobirb (~audio@user/audio)
[04:50:44] *** Joins: ali1234 (~al@user/ali1234)
[04:51:37] *** Quits: flokuehn (~flokuehn@87.123.247.51) (Ping timeout: 250 seconds)
[04:51:45] *** Quits: akk (~akk@75.161.146.115) (Quit: +++)
[04:53:24] *** Joins: flokuehn (~flokuehn@87.123.247.58)
[04:53:40] *** Joins: cdown_ (~cdown@89.32.122.5)
[04:54:08] *** Joins: arinov (~arinov@213.194.126.155)
[04:54:12] *** Quits: Vornicus (~Vornicus@2603-8000-5d07-7ef0-0878-4455-c54a-a6c0.res6.spectrum.com) (Read error: Connection reset by peer)
[04:54:26] *** Quits: jim (~jim@about/linux/staff/jim) (Ping timeout: 256 seconds)
[04:54:31] *** Quits: atrigent (~atrigent@c-73-69-68-26.hsd1.ma.comcast.net) (Quit: My MacBook has gone to sleep. ZZZzzz‚Ä¶)
[04:55:05] <Yhg1s> Forty-Bot: METH_FASTCALL just gets an array of PyObjects. If you want to unpack those into something other than PyObjects, you probably don't want to use METH_FASTCALL.
[04:55:19] <Forty-Bot> I just need the first argument
[04:55:33] <Yhg1s> Do you only want to accept one argument?
[04:55:37] <Forty-Bot> yes
[04:55:47] <Yhg1s> Then you probably want to use METH_O instead of METH_FASTCALL.
[04:56:02] <Forty-Bot> what about an optional argument?
[04:56:32] <Yhg1s> then you're back to METH_VARARGS, really.
[04:58:04] <Forty-Bot> I don't understand why METH_FASTCALL is part of the stable abi
[04:58:15] <Forty-Bot> if the tools to use it are not
[04:58:29] *** Quits: y1n (~y1n@178.115.47.173.wireless.dyn.drei.com) (Ping timeout: 268 seconds)
[04:59:19] <Yhg1s> What kind of tools are you expecting? It's a calling convention that gives you an array of PyObjects. That's what it does, and what it's for. There are lots of tools for turning PyObjects into other things. They're not as convenient as PyArg_ParseTuple, but that's because PyArg_ParseTuple can use the convenience of the args tuple. If you want the args tuple, and PyArg_ParseTuple, don't use METH_FASTCALL.
[04:59:52] <Forty-Bot> I mean, I would expect there to be a simple function for checking nargs
[04:59:54] <Forty-Bot> which there is
[04:59:57] <Forty-Bot> but it's not stable
[05:00:20] <Yhg1s> You mean 'if (nargs != x) { ... }'?
[05:00:24] <Forty-Bot> right
[05:00:30] *** Quits: bn_work (uid268505@id-268505.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[05:00:31] <Forty-Bot> and set the appropriate error
[05:00:32] *** Joins: pycurious (~Adium@user/pycurious)
[05:00:40] <Forty-Bot> which is what _PyArg_CheckPositional does
[05:00:54] <Yhg1s> That's not just not part of the stable API, that's not part of the public API.
[05:01:12] <Forty-Bot> well, it *should* be part of stable :)
[05:01:13] *** Quits: arinov (~arinov@213.194.126.155) (Quit: WeeChat 3.3)
[05:01:40] *** Joins: Fiji- (~Fiji@user/fiji)
[05:02:12] *** Quits: Seirdy (~Seirdy@sourcehut/user/seirdy) (Ping timeout: 268 seconds)
[05:05:43] *** Quits: Fiji_ (~Fiji@user/fiji) (Ping timeout: 256 seconds)
[05:05:55] *** Quits: hrehf (~foofaoijf@2001:16b8:2ceb:5100:71fe:ef22:5ef6:b49b) (Ping timeout: 250 seconds)
[05:10:04] *** Joins: y1n (~y1n@178.115.41.6.wireless.dyn.drei.com)
[05:11:12] *** Joins: x88x88x (~cheeg@gateway/vpn/pia/x88x88x)
[05:12:13] *** Quits: Klinda (~superleag@user/klinda) (Quit: Konversation terminated!)
[05:14:32] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Ping timeout: 240 seconds)
[05:14:33] *** Joins: pretty_d1 (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[05:15:25] *** Joins: leduyquang753 (~leduyquan@user/leduyquang753)
[05:15:38] *** Joins: cdown__ (~cdown@163.114.131.1)
[05:18:05] *** Quits: pycurious (~Adium@user/pycurious) (Quit: Leaving.)
[05:18:20] *** Quits: cdown (~cdown@89.32.122.5) (Ping timeout: 260 seconds)
[05:18:23] *** cdown__ is now known as cdown
[05:18:23] *** fluter- is now known as fluter
[05:20:29] *** Quits: Midjak (~Midjak@may53-1-78-226-116-92.fbx.proxad.net) (Quit: This computer has gone to sleep)
[05:20:32] *** Quits: Andrynet (~Andrynet@190.152.210.157) (Ping timeout: 240 seconds)
[05:21:00] *** Quits: Barones (~Barones@177.96.250.224.dynamic.adsl.gvt.net.br) (Quit: Leaving)
[05:21:57] *** Quits: xardas (~xardas@149.233.51.127) (Quit: Client closed)
[05:22:46] *** Joins: Andrynet (~Andrynet@190.152.210.157)
[05:23:14] <jinsun> aphysically: there is new discussion here suddenly https://github.com/python/mypy/issues/3004
[05:24:11] <jinsun> aphysically: and now Eric is changing that in pyright https://github.com/microsoft/pyright/issues/2626
[05:25:30] *** Joins: luigibu1 (~luigibu@80.30.201.209)
[05:25:41] *** Quits: monkey_ (~user@190.104.116.153) (Remote host closed the connection)
[05:27:12] *** Joins: cdown__ (~cdown@163.114.131.1)
[05:29:30] *** Joins: cdown___ (~cdown@89.32.122.5)
[05:29:56] *** Quits: cdown_ (~cdown@89.32.122.5) (Ping timeout: 245 seconds)
[05:30:05] *** Quits: luigibu1 (~luigibu@80.30.201.209) (Ping timeout: 256 seconds)
[05:30:29] *** Quits: pretty_d1 (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.3)
[05:30:58] *** Joins: nicholaus04 (~nicholaus@172.58.22.198)
[05:31:22] *** Quits: vlm (~vlm@user/vlm) (Quit: "")
[05:31:28] *** Joins: cdown_ (~cdown@163.114.131.1)
[05:32:23] *** Quits: FluffyMask (~masque@user/fluffymask) (Quit: WeeChat 3.3)
[05:32:44] *** Quits: bloody (~bloody@user/bloody) (Quit: Always focus on how far you've come, rather than how far you have left to go)
[05:33:38] *** Quits: cdown__ (~cdown@163.114.131.1) (Ping timeout: 268 seconds)
[05:34:52] *** Quits: cdown___ (~cdown@89.32.122.5) (Ping timeout: 268 seconds)
[05:35:47] *** Quits: awmv (~awmv@2a02:21b0:644f:c181:2c15:8095:e6b8:fe4) (Quit: My MacBook has gone to sleep. ZZZzzz‚Ä¶)
[05:38:57] <sveinse> It is ok to call a=foobar() given foobar is an coro, and then later "execute" the call by issuing await a, right?
[05:40:24] <demsh> yeah, technically async def is a function, which returns coroutine
[05:41:02] *** Joins: jazzy2 (~jaziz@user/jaziz)
[05:41:15] <sveinse> ah yes of course, then it makes even more sense
[05:41:25] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 256 seconds)
[05:43:41] *** Joins: jim (~jim@about/linux/staff/jim)
[05:44:44] *** Quits: jazzy3 (~jaziz@user/jaziz) (Ping timeout: 268 seconds)
[05:44:49] <kenwoodfox> Im having some trouble importing a module right here on this line https://kitsunehosting.net/gitea/Kenwood/lewis-crawler/src/branch/rs-integration/companion_software/houston/houston.py#L7
[05:45:13] <kenwoodfox> my package is houston, and my subpackage is robotstreamer, and my submodule  is streamer.py (I think)
[05:45:21] *** Quits: qpdb (~qpdb@user/qpdb) (Ping timeout: 250 seconds)
[05:45:26] <kenwoodfox> import houston works, but import houston.subpackage says that houston is not a package
[05:46:32] *** Quits: damxsa (~damx@2001:16a2:cc46:e600:cd17:6bf3:a5a4:8bdc) (Ping timeout: 240 seconds)
[05:47:27] <kenwoodfox> I feel a little dumb :c package importing seems easy but i always get tripped up
[05:48:23] <jinsun> kenwoodfox: you probably want to rename houston.py to `__init__.py`
[05:48:38] <kenwoodfox> jinsun: wont that conflict with the code in __main__.py
[05:48:55] <jinsun> a package is a folder with a `__init__.py` in it
[05:49:10] <kenwoodfox> jinsun: Ok, ill give it a go
[05:49:18] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[05:49:40] *** Quits: Andrynet (~Andrynet@190.152.210.157) (Ping timeout: 268 seconds)
[05:50:08] <kenwoodfox> jinsun: that seems to have broken the import on line 9 in __main__.py now, now it thinks houston is not a package either :c https://kitsunehosting.net/gitea/Kenwood/lewis-crawler/src/branch/rs-integration/companion_software/houston/__main__.py#L9
[05:50:19] <kenwoodfox> sorry, maybe __main__.py should be __init__.py ?
[05:50:51] <jinsun> kenwoodfox: how are you running it?
[05:50:59] <kenwoodfox> jinsun: python houston
[05:51:18] *** Joins: Andrynet (~Andrynet@190.152.210.157)
[05:52:58] <kenwoodfox> jinsun: Am i missing something basic in my package structure?
[05:53:09] <jinsun> that is for scripts, for running the `__main__.py` of the package you have to run it as `python -m houston`, (from the parent folder of the package if you haven't installed it)
[05:53:53] *** Quits: Elzington (~Elzington@static-68-235-44-76.cust.tzulo.com) (Quit: Leaving)
[05:54:30] *** Joins: Elzington (~Elzington@static-68-235-44-76.cust.tzulo.com)
[05:54:38] <kenwoodfox> jinsun: Oh, that would make sense, now im getting a ImportError: cannot import name 'Houston' from 'houston' (unknown location) but i can see where i went wrong without the -m
[05:56:32] <jinsun> did you forget to rename your houston.py to `__init__.py`? it will be looking for the class in `__init__.py` if you import from houston
[05:57:01] <jinsun> if you don't want to rename it then you will have to import from houston.houston
[05:57:22] <jinsun> the first houston is your folder and the second is your file
[05:57:27] <kenwoodfox> jinsun: Perfect! that last comment was it, thank you so much
[05:57:38] <kenwoodfox> package.submodule, that makes sense
[05:57:40] <kenwoodfox> thanks again
[05:57:47] *** Quits: rvalue (~rvalue@user/rvalue) (Quit: ZNC - https://znc.in)
[05:57:54] *** Quits: Andrynet (~Andrynet@190.152.210.157) (Ping timeout: 256 seconds)
[05:58:02] *** Quits: brabrax (~brabrax@user/brabrax) (Ping timeout: 240 seconds)
[05:58:04] *** Joins: rvalue (~rvalue@user/rvalue)
[05:58:17] *** Joins: brabrax (~brabrax@user/brabrax)
[05:58:37] *** Joins: qpdb (~qpdb@user/qpdb)
[05:59:38] *** Joins: Andrynet (~Andrynet@190.152.210.157)
[06:04:07] <aphysically> jinsun: ??
[06:04:13] <aphysically> Guido changed his mind?
[06:04:18] <aphysically> changed Eric's mind I mean
[06:04:43] <jinsun> Guido changed his own mind too
[06:04:51] <aphysically> oh I see that now yes
[06:05:07] <jinsun> earlier in the same issue he was against asymmetric propery
[06:05:46] <jinsun> so it took Guido to convince Eric to change his mind :D
[06:06:30] <aphysically> mypy will be changing as well?
[06:06:35] *** Quits: sharperguy (~sharpergu@88.130.218.153) (Ping timeout: 250 seconds)
[06:06:49] <aphysically> not yet but soon maybe
[06:06:54] <jinsun> well yes, but when who knows
[06:07:11] <jinsun> pyright should do it soon because Eric is convinced
[06:07:33] <jinsun> so Will was right after all in the rich issue
[06:07:52] <jinsun> and now your descriptor PR is not needed
[06:08:01] <aphysically> I added comment to the PR https://github.com/willmcgugan/rich/pull/1612
[06:08:13] *** Joins: sharperguy (~sharpergu@88.130.223.247)
[06:08:47] <aphysically> jinsun: well, the PR is primarily to fix the *users*
[06:09:09] <aphysically> pyright already didn't break users, and mypy only broke users because of a (different) bug that's unfixed still
[06:09:19] <aphysically> (and it's not clear the change of heart will result in that bug being fixed anyway)
[06:09:26] *** Joins: junebug (~junebug@104-0-169-217.lightspeed.miamfl.sbcglobal.net)
[06:09:53] <jinsun> yeah mypy change will not happen anytime soon I guess
[06:10:48] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.3)
[06:11:27] <aphysically> in other news he fixed the bug that drove me nuts :D https://github.com/willmcgugan/rich/commit/07d51ffc1aee6f16bd2e5a25b4e82850fb9ed778
[06:11:30] <jinsun> so might be worth doing it anyway, but also might be worth waiting because now this is just a bug, not a fundamental disagreement with the type checker
[06:13:43] <aphysically> yeah I put the information on the PR so rich maintainer can decide what he wants
[06:14:27] *** Joins: Seirdy (~Seirdy@sourcehut/user/seirdy)
[06:15:37] <jinsun> users were broken in pyright too though depending on how they used it, the assignment in the same scope used to narrow the type to the thing that was assigned
[06:16:44] <jinsun> so even though the assignment won't error, later using that variable like a numedtuple instead of tuple will give errors
[06:16:54] <aphysically> ah I didn't realize that
[06:17:19] <aphysically> pyright has a fast release cycle so I expect it to be fixed in days at most
[06:18:15] <aphysically> mypy on the other hand has cut a release for like 3 months and hasn't pushed it yet (???)
[06:18:21] <jinsun> yeah, definitely before mypy gets to it
[06:18:29] <aphysically> as in, they already chose the commit for the next release (it was like ~3-4 months ago)
[06:19:05] <aphysically> it's been so long I do wonder if they'll end up just re-cutting the release
[06:20:04] <aphysically> ah I was wrong it's only been 2 months: https://github.com/python/mypy/issues/11158
[06:20:08] <jinsun> mypy's super slow releases is one of the reasons this should be accepted https://github.com/python/typeshed/issues/5835
[06:20:26] *** Quits: Sario (uid356235@fosshost/cdo/Sario) (Quit: Connection closed for inactivity)
[06:20:36] <aphysically> looks like it's still moving ahead it just genuinely is taking a few months
[06:20:37] <jinsun> I don't know why that was not the original idea anyway
[06:21:08] *** Quits: nyah (~nyah@94.6.71.219) (Ping timeout: 256 seconds)
[06:21:08] *** Joins: jbox (~jbox@user/jbox)
[06:22:02] <aphysically> the upcoming mypy release was cut before fixes that unblock python 3.10 syntax
[06:22:02] *** Quits: ubert (~Thunderbi@p200300ecdf0ba253e6b318fffe838f33.dip0.t-ipconnect.de) (Ping timeout: 260 seconds)
[06:22:11] <aphysically> not sure if they've backported
[06:22:27] <aphysically> I don't mean adding support for the new typing features, just not throwing errors when seeing it
[06:23:13] <jinsun> lots of cherry picks mentioned in the comments
[06:23:24] <aphysically> so if they haven't backported, mypy not blocking adoption of 3.10 typing features will be quite a while from now
[06:23:35] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 268 seconds)
[06:23:42] <aphysically> yeah I haven't gone through them to double check :P
[06:24:06] *** Joins: ubert (~Thunderbi@p200300ecdf0ba253e6b318fffe838f33.dip0.t-ipconnect.de)
[06:24:23] <aphysically> Eric tends to implement typing features before the RFC is even fully published (!)
[06:24:30] <aphysically> this has actually led to some weird bugs :P
[06:24:44] <aphysically> (due to some subtle difference between final RFC and what was implemented)
[06:25:00] <aphysically> pyright already supports Self for example
[06:25:09] <aphysically> (and has for a few weeks now)
[06:25:30] <jinsun> :D yeah I think he was working on the variadic generics also many months before it was accepted
[06:25:37] <aphysically> the PEP hasn't even been posted that long (for Self)
[06:25:54] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Remote host closed the connection)
[06:29:11] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[06:29:29] *** Joins: ubert1 (~Thunderbi@p200300ecdf0ba234e6b318fffe838f33.dip0.t-ipconnect.de)
[06:30:54] *** Quits: ubert (~Thunderbi@p200300ecdf0ba253e6b318fffe838f33.dip0.t-ipconnect.de) (Ping timeout: 260 seconds)
[06:30:54] *** ubert1 is now known as ubert
[06:34:37] *** Quits: phantomotap (~phantomot@c-71-207-252-96.hsd1.al.comcast.net) (Quit: Leaving)
[06:35:49] *** Quits: Lando-HoloNet (~Lando-Spa@user/lando-spacepimp) (Ping timeout: 256 seconds)
[06:36:02] *** Joins: cdown__ (~cdown@89.32.122.5)
[06:36:30] *** Quits: jdavfsxd (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Quit: jdavfsxd)
[06:38:05] *** Quits: cdown_ (~cdown@163.114.131.1) (Ping timeout: 256 seconds)
[06:40:03] <jinsun> ah I just realized that stdlib stubs cannot be installed like normal package stubs when I read that typeshed issue again
[06:40:32] <jinsun> because it will have to go in site-packages where stdlib does not live
[06:40:55] <jinsun> so it will have to be special cased by the type checkers
[06:41:36] *** Quits: x88x88x (~cheeg@gateway/vpn/pia/x88x88x) (Ping timeout: 245 seconds)
[06:41:52] *** Joins: Fiji (~Fiji@user/fiji)
[06:42:26] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 245 seconds)
[06:44:06] *** Quits: Fiji- (~Fiji@user/fiji) (Ping timeout: 245 seconds)
[06:47:15] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Killed (NickServ (Forcing logout FinnElija -> finn_elija)))
[06:47:15] *** Joins: finn_elija (~finn_elij@user/finn-elija/x-0085643)
[06:47:15] *** finn_elija is now known as FinnElija
[06:54:17] *** Quits: cdown__ (~cdown@89.32.122.5) (Read error: Connection reset by peer)
[06:55:15] *** Joins: cdown_ (~cdown@89.32.122.5)
[06:57:52] *** Quits: cdown_ (~cdown@89.32.122.5) (Remote host closed the connection)
[06:58:07] *** Joins: cdown_ (~cdown@89.32.122.5)
[06:58:57] *** Joins: fannagoganna (uid110488@id-110488.tinside.irccloud.com)
[06:59:05] *** Joins: powftw (uid448161@id-448161.lymington.irccloud.com)
[07:02:55] *** Quits: Seiryuu (~Seiryuu@ip174-103-176-143.adsl2.static.versatel.nl) (Remote host closed the connection)
[07:06:23] *** Quits: guenhael (~Thunderbi@aaubervilliers-652-1-290-168.w82-121.abo.wanadoo.fr) (Ping timeout: 250 seconds)
[07:07:51] *** Quits: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 245 seconds)
[07:11:26] *** Joins: Vonter (~Vonter@user/vonter)
[07:11:50] *** Joins: medium_cool (~medium_co@2605:a601:a9aa:f800:c9e9:cee:5d9a:d89c)
[07:14:02] *** Quits: cdown_ (~cdown@89.32.122.5) (Ping timeout: 240 seconds)
[07:16:28] *** Quits: Naan (~naan@user/naan) (Read error: Connection reset by peer)
[07:18:47] *** Joins: Robin_Jadoul (~Robin_Jad@152.67.64.160)
[07:22:04] <Celelibi> What's the associativity of the ternary if?
[07:22:17] *** Joins: grayn (~Thunderbi@2001:8003:8c8b:e00:410e:c414:49e7:f7e8)
[07:23:08] *** Joins: thurs80601421 (~thurs@ip68-225-209-147.ph.ph.cox.net)
[07:23:34] <Celelibi> Looks like it's right associative.
[07:28:01] *** Quits: llh (~llh@user/llh) (Quit: :::: ( UPP ) ::::)
[07:29:41] *** Joins: llh (~llh@user/llh)
[07:31:33] *** Quits: nomic (~nomic@185.217.117.132) (Quit: Leaving)
[07:33:32] *** Quits: ali1234 (~al@user/ali1234) (Remote host closed the connection)
[07:35:23] *** Joins: ali1234 (~al@user/ali1234)
[07:35:34] *** Quits: grayn (~Thunderbi@2001:8003:8c8b:e00:410e:c414:49e7:f7e8) (Quit: grayn)
[07:35:48] *** Joins: grayn (~Thunderbi@124.188.209.195)
[07:35:56] *** Joins: lsrtl__ (~lsrtl@user/lsrtl)
[07:36:02] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.3)
[07:36:32] *** Joins: supakeen (~user@python/site-packages/supakeen)
[07:38:49] *** Joins: fikran (~fikran@user/fikran)
[07:40:39] *** Quits: grayn (~Thunderbi@124.188.209.195) (Client Quit)
[07:40:54] *** Joins: grayn (~Thunderbi@124.188.209.195)
[07:42:02] *** Quits: Enitin (~Enitin@82.102.22.84) (Ping timeout: 240 seconds)
[07:44:25] *** Quits: ckdCreations (~ckdCreati@147.55.133.138) (Read error: Connection reset by peer)
[07:45:00] *** Quits: BillyZane (~BillyZane@91.196.220.172) (Ping timeout: 256 seconds)
[07:45:01] *** Quits: yitz (~yitz@exercism/yitz) (Quit:  )
[07:45:16] *** Quits: grayn (~Thunderbi@124.188.209.195) (Client Quit)
[07:45:20] *** Quits: EGH (~EGH@185.25.195.104) (Ping timeout: 260 seconds)
[07:45:42] *** Joins: grayn (~Thunderbi@2001:8003:8c8b:e00:6b7d:d5a:863:528b)
[07:45:46] *** Joins: yitz (~yitz@exercism/yitz)
[07:46:14] <Omega037> morning yall
[07:46:31] *** Joins: Enitin (~Enitin@82.102.22.84)
[07:47:51] *** Quits: Robin_Jadoul (~Robin_Jad@152.67.64.160) (Ping timeout: 245 seconds)
[07:49:26] *** Joins: ckdCreations (~ckdCreati@147.55.130.36)
[07:50:17] *** Quits: grayn (~Thunderbi@2001:8003:8c8b:e00:6b7d:d5a:863:528b) (Client Quit)
[07:50:39] *** Joins: grayn (~Thunderbi@2001:8003:8c8b:e00:6b7d:d5a:863:528b)
[07:51:20] *** Quits: grayn (~Thunderbi@2001:8003:8c8b:e00:6b7d:d5a:863:528b) (Remote host closed the connection)
[07:53:37] *** Quits: rvalue (~rvalue@user/rvalue) (Ping timeout: 268 seconds)
[07:55:27] *** Joins: Fiji_ (~Fiji@user/fiji)
[07:55:35] *** Joins: rvalue (~rvalue@user/rvalue)
[07:56:39] *** Quits: sreve (~quassel@p54a70f12.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[07:57:12] *** Joins: sreve (~quassel@p54a71042.dip0.t-ipconnect.de)
[07:57:13] *** Joins: luigibu1 (~luigibu@80.30.201.209)
[07:58:20] <Disposeable-Nick> Hey, I just have a question, when using ConfigParser to put user editable data from the *.py to a *.ini - is it possible to have the same comments next to each editable piece of info like you could in the .py, like a #comment goes here type of thing, but inside the .ini instead without that inof being read as part of the code by accident, as last time I had some code injection and had to remove comments from the .ini - was just wondering
[07:58:20] <Disposeable-Nick> if there was a workaround to keep #comments in the .ini w/o hem potentially being injected and triggered?
[07:59:09] <Disposeable-Nick> Excuse typos
[07:59:10] *** Quits: Fiji (~Fiji@user/fiji) (Ping timeout: 268 seconds)
[08:02:00] *** Quits: luigibu1 (~luigibu@80.30.201.209) (Ping timeout: 256 seconds)
[08:03:41] *** Quits: martums (~martums@user/martums) (Ping timeout: 245 seconds)
[08:06:32] *** Joins: BillyZane (~BillyZane@185.202.221.99)
[08:11:28] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[08:12:14] <jinsun> you can put a #comment on its own line just before the thing
[08:12:28] <jinsun> instead of putting it to the right of the thing
[08:12:46] <jinsun> then it willl be ignored
[08:13:51] <Disposeable-Nick> Jesus
[08:13:55] <Disposeable-Nick> That is handy
[08:14:25] *** Quits: kjdf (~kjdf@ti0063q161-1126.bb.online.no) (Ping timeout: 250 seconds)
[08:14:44] <Disposeable-Nick> I hoped it'd be that simple, but thought, nah, I doubt it's that simple :)  -  Wow, thanks so much jinsun, you have been a huge help!
[08:15:12] <Disposeable-Nick> So, yeah, I did initially have the comments on the right side.
[08:16:11] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[08:16:11] <jinsun> I don't like doing that in python code also
[08:16:25] <jinsun> unless the lline is really short
[08:16:54] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[08:17:43] <Disposeable-Nick> jinsun, do I put a hash before and after, as it is left aligned?
[08:18:38] <jinsun> only the hash in the beginning of the line matters
[08:19:00] <Disposeable-Nick> And it will know to just skim through the stuff it don't need?
[08:19:05] <jinsun> you can put one at the endd also if you want, it will just be a part of the comment
[08:20:06] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[08:20:27] *** Joins: MinimotoMusashi (~MinimotoM@229.sub-174-197-29.myvzw.com)
[08:21:48] <MinimotoMusashi> Hey guys. Running a script, that runs a script in a sub dir, that runs another script in a sub dir. But they can also be ran at each level down into the directories. Any elegant way to do this with sys append path?
[08:22:02] <MinimotoMusashi> without*
[08:22:26] *** Joins: rexbinary_ (~rexbinary@user/rexbinary)
[08:22:58] *** Quits: rexbinary (~rexbinary@user/rexbinary) (Ping timeout: 256 seconds)
[08:22:58] *** rexbinary_ is now known as rexbinary
[08:24:47] *** Quits: junebug (~junebug@104-0-169-217.lightspeed.miamfl.sbcglobal.net) (Quit: Leaving)
[08:25:42] *** Quits: ubert (~Thunderbi@p200300ecdf0ba234e6b318fffe838f33.dip0.t-ipconnect.de) (Ping timeout: 260 seconds)
[08:27:17] *** Joins: stdout (~stdout@50.115.255.72)
[08:27:19] *** Joins: ubert (~Thunderbi@p200300ecdf0ba234e6b318fffe838f33.dip0.t-ipconnect.de)
[08:28:15] *** Joins: et_ (~et@user/et)
[08:28:41] *** Quits: et (~et@user/et) (Ping timeout: 245 seconds)
[08:28:46] *** et_ is now known as et
[08:29:47] *** Joins: rindolf (~shlomif@2a0d:6fc2:4bb1:500:6b1e:2524:3d70:36ec)
[08:29:53] *** Joins: cebtenzzre (~cebtenzzr@2603-7081-3406-8f26-00c4-ed3c-3f47-2b1e.res6.spectrum.com)
[08:30:10] *** justBOOMER is now known as justache
[08:30:29] *** Quits: Fiji_ (~Fiji@user/fiji) (Quit: Leaving)
[08:30:42] *** Quits: djhankb (~djhankb@208.113.164.68) (Remote host closed the connection)
[08:31:20] *** Joins: djhankb (~djhankb@208.113.164.68)
[08:32:03] *** Quits: zebrag (~chris@user/zebrag) (Quit: Konversation terminated!)
[08:32:50] <jinsun> MinimotoMusashi: not very clear how your folder structure looks like or how one script is "running" another script, what goes wrong if you just don't sys.path.append?
[08:34:05] *** Quits: AlanMD (~AlanMD@86.121.179.183) (Quit: ZZZzzz‚Ä¶)
[08:38:33] <MinimotoMusashi> I am setting up an organized test setup to test all sub-components individually by running the lower level python script located in the subdirectory or running multiple by running the script in the parent directory.
[08:38:54] <MinimotoMusashi> test_combined.py calls test_one.py and test_two.py
[08:39:04] <MinimotoMusashi> test_one.py calls test_one_sub.py
[08:39:15] <MinimotoMusashi> test_one.py when ran as main calles test_one_sub.py without issue.
[08:39:29] <MinimotoMusashi> [#python]
[08:39:35] <MinimotoMusashi> [#python]
[08:39:42] <MinimotoMusashi> But when test_combined.py calls test_one.py, test_one.py throws an error saying that module test_one_sub.py can't be found.
[08:39:49] *** Joins: mihaiadrian (~Thunderbi@82.76.223.244)
[08:39:55] <MinimotoMusashi> https://pastebin.com/RSn8c0w9
[08:45:17] <jinsun> put a __init__.py inside the subfolders and then import testone.test_one and testtwo.test_two instead of directly importing test_one and test_two
[08:48:02] *** Quits: cthulchu (~Cthulchu@69-172-160-196.cable.teksavvy.com) (Ping timeout: 240 seconds)
[08:48:35] <aphysically> jinsun: I just got to reading the full thing and they discussed the proeprty overriding thing as well!
[08:48:51] <aphysically> that one was much more questionable on pyright's part
[08:48:54] <aphysically> imo
[08:49:00] *** Quits: vd (~vd@bras-base-mtrlpq2848w-grc-41-70-53-240-121.dsl.bell.ca) (Ping timeout: 256 seconds)
[08:49:08] <MinimotoMusashi> thanks!!
[08:49:14] <jinsun> oh I missed that
[08:49:44] <jinsun> yeah that was worse logic than the asymmetric interface one
[08:50:13] <jinsun> on asymmetric interface I actually was fine with the behavior
[08:50:39] <aphysically> I'll even still agree that asymmetric interfaces are in general bad practice unless you have a quite good reason
[08:50:50] <aphysically> but those reasons probably exist
[08:50:54] <Disposeable-Nick> Hi, is there a way to edit config .ini files up with idle, NOTEPAD is arse...  I canright click a .py, then open new idle window and open file blah blah, but that is long and tedious...
[08:52:37] <Disposeable-Nick> .ini just looks so much cleaner in IDLE
[08:52:58] <jinsun> IDLE is just slightly better than notepad really
[08:53:11] <Disposeable-Nick> Come on now, it has colours :O
[08:53:22] <aphysically> in fact, IDLE is the only environment that supports match colors afaik
[08:53:28] <Disposeable-Nick> And doesn't hurt my eyeballs
[08:53:36] <aphysically> (or, at least the only one I'm aware of)
[08:53:48] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[08:53:52] *** Quits: Themis3000 (~Thunderbi@user/themis3000) (Quit: Themis3000)
[08:53:56] <jinsun> really? I thought by now others wouldhave caught up
[08:54:08] <jinsun> let me check vscode
[08:54:15] <aphysically> i haven't seen it on vim or vscodium or tree-sitter
[08:54:15] *** Joins: Themis3000 (~Thunderbi@user/themis3000)
[08:54:34] <aphysically> and I mean the community-maintained vim syntax
[08:54:39] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[08:55:11] <jinsun> I get match and case colored at least
[08:56:04] <jinsun> and re.match is not colored
[08:56:26] <jinsun> so there is some logic than just coloring match and case
[08:57:41] <aphysically> this is vscode?
[08:57:44] <jinsun> tried notepad++, fail
[08:57:56] <aphysically> they must have updated since I last checked :)
[08:57:59] <jinsun> yeah vscode
[08:58:03] <Disposeable-Nick> It is far superior to NOTEPAD when it comes to anything Python related, hell, I don't even use NOTEPAD, I use Wordpad, as NOTEPAD screws up all kinds of things, like eggdrop bot .confs
[08:58:11] <aphysically> they use a uhhh textmate based syntax that they maintain themselves I think
[08:58:36] <aphysically> sublime text's is really interesting
[08:58:41] *** Quits: Vonter (~Vonter@user/vonter) (Ping timeout: 245 seconds)
[08:58:59] <aphysically> they actually use a syntax really similar to tree-sitter, but that can be watered down to something not much more complex than textmate's
[08:59:08] <aphysically> and I think they simultaneously support textmate syntax
[08:59:27] <Disposeable-Nick> I only use NOTEPAD for Windows batch files and the like
[08:59:48] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Read error: Connection reset by peer)
[08:59:50] <aphysically> vim uses its own regex-type syntax and neovim is integrating treesitter syntax highlighting (not yet stable), and treesitter is shared by a few different text editors
[09:00:31] <aphysically> a lot of people seem to be hoping tree-sitter matures and becomes adopted by most editors but that remains to be seen
[09:01:16] <aphysically> (treesitter and sublime are actual incremental syntax parsers w/ fault tolerance, basically)
[09:01:48] <aphysically> this actually means you can get a few IDE-like features from your syntax highlighter directly, which is cool
[09:02:32] <aphysically> match work with any other editors jinsun?
[09:03:19] <jinsun> dunno I just use vscode, and I don't even use 3.10 much yet, I switched to 3.10 to test this now
[09:04:27] <jinsun> well IDLE does, but not very well I think, it just has a bunch of regexes
[09:04:50] <Disposeable-Nick> I probably have to rely on some sort of registry hack; which I find to be really lame, I wish upon installtion that it asked if you wanted like a sane exe version IDLE put on your system.
[09:04:51] *** Quits: rany (~rany@user/rany) (Remote host closed the connection)
[09:05:02] *** Joins: rany (~rany@user/rany)
[09:06:47] <Disposeable-Nick> Wait
[09:06:47] *** Quits: peterhil (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi) (Remote host closed the connection)
[09:06:48] <jinsun> Disposeable-Nick: use something like notepad++ for ini, if you just want colors it is enough, and it gives you a right click menu that works on literally any file
[09:06:49] <Disposeable-Nick> Idea
[09:07:01] *** Joins: peterhil (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi)
[09:07:23] <Disposeable-Nick> Could I use py-to-exe, pyinstaller front-end, to convery a copy of ILDE.PY to an executable, lol :O ?
[09:08:06] <jinsun> you could, but easier would be to switch editors
[09:09:06] *** Quits: MrFixIt (~samurai_@c-73-75-104-200.hsd1.il.comcast.net) (Remote host closed the connection)
[09:09:14] <Disposeable-Nick> Worth a try or could I do some accidental system damage?
[09:09:56] <jinsun> the pyinstaller thing? not at all worth it a try, is it not simple to do
[09:10:00] *** Quits: domhnall (~developer@user/domhnall/x-2887755) (Ping timeout: 256 seconds)
[09:10:35] <jinsun> being better than notepad and having colors is a low bar, so you have lots of choices other than IDLE
[09:10:54] <Disposeable-Nick> I know how to convert scripts to exe, I do it all the time, just wondering if an executable version of IDLE would word the same, as a.exe version would then hopefully work on Windows 'Open With...'
[09:11:08] <Disposeable-Nick> work *
[09:12:27] *** Joins: Vonter (~Vonter@user/vonter)
[09:13:55] <Disposeable-Nick> Then, I could use 'Open With...' to always open this (.ini) filetype with IDLE :)  -  just brain storming, but don't want to b0rk system if the .exe goes all crazy on me
[09:14:03] <jinsun> there is probably be a way to associate the normal IDLE with ini, I would try to find that instead of making an exe
[09:14:06] <aphysically> jinsun: "it just has a bunch of regexes" -> that's how vscode's syntax highlighting works
[09:14:09] <aphysically> :)
[09:14:19] *** Joins: han-solo (~han-solo@user/han-solo)
[09:14:52] <aphysically> vscode actually has pretty much the least advanced syntax highlighting system since it's still using the old textmate format
[09:15:03] <aphysically> but on the plus side it's better maintained than the syntax highlighting in most editors
[09:15:04] <jinsun> oh, okay, possible, I tested only simiple things
[09:15:12] <aphysically> so it doesn't matter as much
[09:16:33] <MinimotoMusashi> clear
[09:16:38] <MinimotoMusashi> lol
[09:16:57] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[09:17:44] *** Joins: poiqwepoiqwe (uid525840@id-525840.hampstead.irccloud.com)
[09:22:40] *** Joins: bancroft (~bancroft@bras-base-mtrlpq02hsy-grc-09-76-68-189-165.dsl.bell.ca)
[09:22:52] *** Quits: rud01f (rud0lf@user/rud0lf) (Ping timeout: 260 seconds)
[09:24:33] *** Joins: delvian (~delvian@41.13.198.66)
[09:30:26] *** Quits: Vonter (~Vonter@user/vonter) (Read error: Connection reset by peer)
[09:31:31] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: ZzzZ)
[09:38:02] *** Quits: y1n (~y1n@178.115.41.6.wireless.dyn.drei.com) (Ping timeout: 240 seconds)
[09:39:16] *** Parts: MinimotoMusashi (~MinimotoM@229.sub-174-197-29.myvzw.com) ()
[09:44:43] *** Joins: djapo (~archangel@user/djapo)
[09:45:19] *** Joins: molt (~molt@178-222-245-206.static.isp.telekom.rs)
[09:45:46] *** Quits: bancroft (~bancroft@bras-base-mtrlpq02hsy-grc-09-76-68-189-165.dsl.bell.ca) (Ping timeout: 245 seconds)
[09:46:02] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 240 seconds)
[09:46:12] *** Joins: domhnall (~developer@user/domhnall/x-2887755)
[09:46:33] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[09:47:11] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Client Quit)
[09:47:43] *** Joins: bancroft (~bancroft@bras-base-mtrlpq02hsy-grc-09-76-68-189-165.dsl.bell.ca)
[09:48:10] *** Joins: fikran (~fikran@user/fikran)
[09:50:04] *** Joins: berong91 (~noob4ever@d75-154-235-153.bchsia.telus.net)
[09:50:08] *** Quits: berong91 (~noob4ever@d75-154-235-153.bchsia.telus.net) (Remote host closed the connection)
[09:51:53] *** Joins: rud01f (rud0lf@user/rud0lf)
[09:58:08] *** Joins: atrigent (~atrigent@c-73-69-68-26.hsd1.ma.comcast.net)
[10:00:39] *** Parts: bancroft (~bancroft@bras-base-mtrlpq02hsy-grc-09-76-68-189-165.dsl.bell.ca) (WeeChat 3.2)
[10:01:18] <Wulf> I've got a python program which needs a long time to initialize an internal data structure. What's a good way to keep this program running and run other code on that internal structure? For development purposes I need to change that code quite often.
[10:01:29] *** Joins: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com)
[10:04:01] *** Quits: llh (~llh@user/llh) (Quit: :::: ( UPP ) ::::)
[10:04:21] *** Quits: jim (~jim@about/linux/staff/jim) (Ping timeout: 256 seconds)
[10:07:41] *** Quits: SallyAhaj (~SallyAhaj@user/sallyahaj) (Remote host closed the connection)
[10:08:08] *** Joins: llh (~llh@user/llh)
[10:08:53] <Swayze> Wulf: my first question is: what functionality would the program offer without the data structure being populated?
[10:09:02] <Swayze> is it just that you want the interface not to 'hang'
[10:09:03] <Wulf> Swayze: none
[10:09:11] <Swayze> so what would be the point then
[10:09:26] <Wulf> Swayze: save time during development
[10:09:48] <Swayze> the answer sounds like threading
[10:09:55] <Swayze> where yo would spawn a child thread to load that structure
[10:10:05] <Swayze> while the rest of the code continues to execute
[10:10:07] <Wulf> Swayze: that wouldn't make things faster.
[10:10:26] <Swayze> oh i think i understand then
[10:10:33] <Swayze> you cuold serialize the data structure
[10:10:40] <Swayze> and read it back from a db/file
[10:10:48] *** Joins: SallyAhaj (~SallyAhaj@user/sallyahaj)
[10:10:53] <Swayze> sort of an 'offline' mode
[10:11:46] <Swayze> https://docs.python-guide.org/scenarios/serialization/
[10:11:52] *** Quits: atrigent (~atrigent@c-73-69-68-26.hsd1.ma.comcast.net) (Ping timeout: 260 seconds)
[10:11:59] <Swayze> this is a great guide on it
[10:12:26] <Wulf> Swayze: I've already got it pickled. Still slow.
[10:13:35] <Swayze> is that because of the file size generated?
[10:14:14] <Wulf> Swayze: lots of small objects, I guess.
[10:14:18] <Swayze> why not use the exec function
[10:14:25] <Swayze> to dynamically execute the part of the code you changing
[10:14:36] <Swayze> so the main program never quits
[10:14:42] <Swayze> you just update the code and rerun it
[10:14:44] *** Joins: Vonter (~Vonter@user/vonter)
[10:14:50] <Wulf> Swayze: looking for something like that, yes.
[10:15:22] <Swayze> thats well documented on the google machine
[10:15:34] <Swayze> shout if you need links for whatever reason
[10:15:43] <dba> I have been working on several project, and in each project a create a separate venv after some time times I realized that the venvs created for all project are sucking up my desk space. how do you guys deal with venv and particularly space issue in case of many different project
[10:16:02] <Wulf> dba: big enough hard drive
[10:16:22] <Wulf> dba: my venv collection takes ~ 3 GiB
[10:16:23] <Swayze> another way to easily gain space when you need is to create a link
[10:16:27] <Swayze> to another drive
[10:16:41] <Swayze> and fool your OS into thinking its all still in the same place
[10:17:01] <Swayze> I used to do this a lot when steam etc didnt support multiple install library locations
[10:18:24] *** Joins: atrigent (~atrigent@c-73-69-68-26.hsd1.ma.comcast.net)
[10:18:47] *** Quits: powftw (uid448161@id-448161.lymington.irccloud.com) (Quit: Connection closed for inactivity)
[10:18:56] <Wulf> dba: I believe I once saw a program which could automatically create hard links if files are identical
[10:19:43] <Wulf> rdfind?
[10:19:45] *** Joins: MrFixIt (~samurai_@c-73-75-104-200.hsd1.il.comcast.net)
[10:20:00] *** Quits: han-solo (~han-solo@user/han-solo) (Quit: leaving)
[10:20:39] <dba> wulf, Swayze: would this approach export only the necessary packages (pip freeze) for the current project?
[10:21:28] <Wulf> dba: what approach?
[10:22:25] <Swayze> it works like this: say you have all your projects on c:\users\youruser\python\, you could the directory "python" to another drive
[10:22:32] <dba> Wulf, I meant Swayze's approach
[10:22:37] <Swayze> then you delete the original "python" and create a ddirectory sym link to the new drive
[10:22:57] <Swayze> so you still have c:\users\youruser\python\ but python now points to a drive with a lot more space
[10:23:21] <Swayze> copy it to a new drive*
[10:23:33] <Swayze> you could do this with the whole folder
[10:23:38] <dba> Swayze: hmm i might have to try it out to see it in action :)
[10:23:39] <Swayze> or just particularly big projects
[10:23:53] *** Joins: jay-m126 (~jay-m@154.72.150.248)
[10:23:53] <Wulf> dba: do you have multiple disks? what OS?
[10:23:57] <Swayze> to your OS its still in the same place but logically the files now sit on another drive
[10:23:58] *** Joins: jay-m126_ (~jay-m@154.72.150.248)
[10:24:34] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[10:24:36] <dba> Wulf, OSX not extra internal disk only external hard drives
[10:25:08] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Client Quit)
[10:25:26] <Wulf> dba: might be easier to move your movie collection to the external drive and keep using the internal for development.
[10:26:16] <dba> Wulf, hahah that would be my winning card solution
[10:26:19] *** Quits: ubert (~Thunderbi@p200300ecdf0ba234e6b318fffe838f33.dip0.t-ipconnect.de) (Remote host closed the connection)
[10:30:47] *** Joins: ubert (~Thunderbi@p200300ecdf0ba234e6b318fffe838f33.dip0.t-ipconnect.de)
[10:30:59] *** Joins: YuGiOhJCJ (~YuGiOhJCJ@gateway/tor-sasl/yugiohjcj)
[10:31:47] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[10:35:30] *** Joins: MrFantastik (~f@cpe-69-204-101-67.buffalo.res.rr.com)
[10:36:49] *** Quits: MrFantastik (~f@cpe-69-204-101-67.buffalo.res.rr.com) (Remote host closed the connection)
[10:37:05] *** Joins: upsala (~zcb@185.213.155.252)
[10:39:28] *** Quits: Roey (~Roey@user/Roey) (Quit: Client exiting)
[10:42:43] *** Quits: Xaldafax (~xaldafax@cpe-198-72-160-101.socal.res.rr.com) (Quit: Bye...)
[10:43:19] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[10:43:48] <dba> https://bpa.st/POBA is it possible to access the printname() or class of Class2() after instantiating the Class3()?
[10:44:30] *** Joins: chowmein__ (~chowmeine@user/chowmeined)
[10:44:39] <dba> https://bpa.st/POBA is it possible to access the printname() object of class of Class2() after instantiating the Class3()?
[10:44:52] <Wulf> dba: your problem might be that you need to access a different name.
[10:45:39] *** Joins: MrFantastik (~f@cpe-69-204-101-67.buffalo.res.rr.com)
[10:45:43] *** Quits: chowmein__ (~chowmeine@user/chowmeined) (Read error: Connection reset by peer)
[10:45:54] *** Joins: chowmein__ (~chowmeine@user/chowmeined)
[10:46:08] <MrFantastik> https://robw.fyi/AreYouARobot.html did a monte carlo simulation of a card game
[10:46:08] <Wulf> dba: you can do Class2.printname(c)
[10:46:12] *** Quits: mihaiadrian (~Thunderbi@82.76.223.244) (Read error: Connection reset by peer)
[10:46:13] *** Joins: mihaiadrian1 (~Thunderbi@82.76.223.244)
[10:46:41] <MrFantastik> I'm wondering how I can improve it
[10:47:28] <InPhase> dba: In addition to Class2.printname(c), update the Class2 printname to be:  print(f'name is {Class2.name}')
[10:47:29] *** Joins: jim (~jim@about/linux/staff/jim)
[10:48:32] *** mihaiadrian1 is now known as mihaiadrian
[10:48:40] <InPhase> dba: If it's unclear what's happening, as an intermediate test make both say print(f'Class1 name is: {self.name}') and print(f'Class2 name is: {self.name}') and you'll see that the self grabs name in Class3's order.
[10:48:41] *** Quits: chowmeined (~chowmeine@user/chowmeined) (Ping timeout: 250 seconds)
[10:50:10] *** Joins: Atque (~Atque@user/atque)
[10:50:33] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[10:51:13] *** Quits: chowmein__ (~chowmeine@user/chowmeined) (Ping timeout: 268 seconds)
[10:51:17] *** Joins: pmb (~pmb@89-64-79-51.dynamic.chello.pl)
[10:51:25] *** Quits: Atque (~Atque@user/atque) (Client Quit)
[10:53:41] *** Quits: MrFantastik (~f@cpe-69-204-101-67.buffalo.res.rr.com) (Quit: Leaving)
[10:55:00] <dba> Wulf, InPhase: thanks for your valuable feedback. not sure if I clearly described my point. when I instantiate the class3 and access printname() object I understood after some googling that there is something in python called MRO (Method resolution Order) meaning that if a class has 2 subclass it would take the first class object (in this case Class1) and use it. So my question is, is it possible to override this. like access the
[10:55:00] <dba> printname() object of class2 even the it is not the first to serve
[10:55:03] *** Joins: nat_of_cy (~nat_of_cy@user/nat-of-cy/x-1732112)
[10:55:39] *** Quits: seednode (~seednode@user/seednode) (Quit: Nihil supernum.)
[10:56:20] *** Joins: luigibu1 (~luigibu@80.30.201.209)
[10:56:26] *** Joins: seednode (~seednode@user/seednode)
[10:56:33] <dba> The output for https://bpa.st/WDRQ is Class1 name is: ABD
[10:57:02] *** Quits: audiobirb (~audio@user/audio) (Ping timeout: 240 seconds)
[10:59:02] *** Quits: the_lanetly_052 (~the_lanet@194.135.153.243) (Ping timeout: 240 seconds)
[11:00:05] *** Joins: the_lanetly_052 (~the_lanet@194.135.154.78)
[11:01:32] *** Quits: lsrtl__ (~lsrtl@user/lsrtl) (Ping timeout: 240 seconds)
[11:02:16] *** Joins: rakoon (~rakoon@2001:985:f4c6:1:c386:3e11:e834:9e07)
[11:04:25] *** Quits: luigibu1 (~luigibu@80.30.201.209) (Ping timeout: 256 seconds)
[11:05:21] *** Quits: Sadale (~Sadale@user/sadale) (Read error: Connection reset by peer)
[11:07:32] *** Quits: sadara (~sadara@user/sadara) (Ping timeout: 240 seconds)
[11:08:34] *** Joins: Sadale (~Sadale@user/sadale)
[11:10:02] *** Quits: stdout (~stdout@50.115.255.72) (Remote host closed the connection)
[11:10:34] *** Joins: runlevel_0 (~nyarlatho@user/runlevel-0/x-6929182)
[11:10:50] <BrenBarn> well, you can use `super(Class1, c).name` to get "QWE"
[11:10:55] *** Quits: Togra (~Togra@user/togra) (Remote host closed the connection)
[11:10:55] <BrenBarn> but no, there's no way to override the MRO as such
[11:11:07] <BrenBarn> I mean, if you want a different MRO, why not have the classes inherit in the other order?
[11:11:41] *** Joins: Togra (~Togra@user/togra)
[11:15:02] <InPhase> dba: Well what we explained to you is exactly how to do that.  You simply need to modify the syntax.  c.printname will use the MRO as specified.
[11:19:08] *** Joins: parv (~quass@user/parv)
[11:20:14] *** Quits: Sadale (~Sadale@user/sadale) (Read error: Connection reset by peer)
[11:20:30] *** Joins: Sadale (~Sadale@user/sadale)
[11:24:12] *** Joins: sadara (~sadara@user/sadara)
[11:25:08] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 268 seconds)
[11:27:01] *** Joins: manti7 (~manti7@176.10.104.94)
[11:28:23] *** Quits: jay-m126_ (~jay-m@154.72.150.248) (Ping timeout: 260 seconds)
[11:28:23] *** Quits: jay-m126 (~jay-m@154.72.150.248) (Ping timeout: 260 seconds)
[11:30:06] *** Joins: jay-m126 (~jay-m@129.0.76.209)
[11:30:17] *** Joins: jay-m126_ (~jay-m@129.0.76.209)
[11:31:20] *** Quits: fbiagent (~fbiagent@user/fbiagent) (Remote host closed the connection)
[11:31:47] *** Joins: fbiagent (~fbiagent@user/fbiagent)
[11:31:56] *** Quits: jetchisel (~jetchisel@user/jetchisel) (Ping timeout: 268 seconds)
[11:33:13] *** Joins: grooverman (~grooverma@177.102.117.95)
[11:33:22] *** Quits: Trieste (T@user/pilgrim) (Ping timeout: 256 seconds)
[11:34:32] *** Quits: grooverman_ (~grooverma@177.102.117.95) (Ping timeout: 240 seconds)
[11:38:28] *** Quits: medium_cool (~medium_co@2605:a601:a9aa:f800:c9e9:cee:5d9a:d89c) (Quit: My Mac Mini has gone to sleep. ZZZzzz‚Ä¶)
[11:42:01] *** Joins: tobybl (~tobybl@213.31.134.21)
[11:44:35] *** Quits: jay-m126 (~jay-m@129.0.76.209) (Read error: Connection reset by peer)
[11:45:10] *** Quits: jay-m126_ (~jay-m@129.0.76.209) (Read error: Connection reset by peer)
[11:45:34] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[11:47:33] *** Quits: BillyZane (~BillyZane@185.202.221.99) (Remote host closed the connection)
[11:47:35] *** Joins: jay-m126 (~jay-m@129.0.76.209)
[11:47:47] *** Joins: jay-m126_ (~jay-m@129.0.76.209)
[11:48:37] *** Joins: BillyZane (~BillyZane@185.202.221.99)
[11:49:53] *** Joins: BillyZane2 (~BillyZane@91.196.220.173)
[11:52:44] *** Quits: pmb (~pmb@89-64-79-51.dynamic.chello.pl) (Quit: pmb)
[11:53:09] *** Quits: BillyZane (~BillyZane@185.202.221.99) (Ping timeout: 256 seconds)
[11:55:16] *** Joins: pmb (~pmb@89-64-79-51.dynamic.chello.pl)
[11:55:32] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 240 seconds)
[11:56:35] *** Joins: onichomp666 (~onichomp@177.231.43.15)
[11:57:20] *** Joins: kosh (~kosh@user/kosh)
[11:57:31] *** Joins: fikran (~fikran@user/fikran)
[11:58:27] *** Quits: onichomp (~onichomp@2806:264:4404:80b7:68f8:d4df:964e:ba0) (Ping timeout: 268 seconds)
[11:59:44] *** Joins: awmv (~awmv@2a02:21b0:644f:c181:2c15:8095:e6b8:fe4)
[12:00:19] *** Joins: causaui1 (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[12:01:02] *** Joins: vit (~vit@chello085216193138.chello.sk)
[12:02:01] *** Quits: vit (~vit@chello085216193138.chello.sk) (Client Quit)
[12:02:54] *** Quits: p-i-_ (~Ohmu@mx-ll-223.206.149-59.dynamic.3bb.co.th) (Read error: Connection reset by peer)
[12:03:29] *** Joins: p-i- (~Ohmu@mx-ll-223.206.149-59.dynamic.3bb.co.th)
[12:04:34] *** Joins: jetchisel (jetchisel@user/jetchisel)
[12:07:55] *** Quits: murr4y (ali@user/murr4y) (Remote host closed the connection)
[12:08:24] *** Joins: murr4y (ali@user/murr4y)
[12:13:00] *** Joins: bandit_za (~bandit@102-65-138-35.dsl.web.africa)
[12:14:42] *** Joins: Atque (~Atque@user/atque)
[12:16:36] *** Joins: x88x88x (~cheeg@gateway/vpn/pia/x88x88x)
[12:18:02] *** Quits: runlevel_0 (~nyarlatho@user/runlevel-0/x-6929182) (Ping timeout: 240 seconds)
[12:18:20] *** Quits: murr4y (ali@user/murr4y) (Quit: WeeChat 3.3)
[12:19:57] *** Joins: jay-m1261 (~jay-m@154.72.150.248)
[12:20:46] *** Quits: jay-m126 (~jay-m@129.0.76.209) (Ping timeout: 265 seconds)
[12:20:55] *** Quits: jay-m126_ (~jay-m@129.0.76.209) (Ping timeout: 256 seconds)
[12:21:17] *** Joins: jay-m126 (~jay-m@154.72.150.248)
[12:21:54] *** Quits: tobybl (~tobybl@213.31.134.21) (Remote host closed the connection)
[12:23:06] *** Joins: xrogaan (~xrogaan@user/xrogaan)
[12:26:37] *** Joins: luigibu1 (~luigibu@80.30.201.209)
[12:28:41] *** Quits: Themis3000 (~Thunderbi@user/themis3000) (Quit: Themis3000)
[12:28:54] *** Quits: x88x88x (~cheeg@gateway/vpn/pia/x88x88x) (Remote host closed the connection)
[12:31:37] *** Joins: weedmic (~weedmic@188.120.139.53)
[12:33:16] *** Joins: jazzy3 (~jaziz@user/jaziz)
[12:34:38] *** Joins: rama (~rama@c-24-130-92-222.hsd1.ca.comcast.net)
[12:35:42] *** Quits: luigibu1 (~luigibu@80.30.201.209) (Ping timeout: 256 seconds)
[12:35:52] *** Joins: runlevel_0 (~nyarlatho@user/runlevel-0/x-6929182)
[12:36:11] *** Quits: jazzy2 (~jaziz@user/jaziz) (Ping timeout: 245 seconds)
[12:36:27] *** Joins: jazzy (~jaziz@user/jaziz)
[12:37:36] *** Quits: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[12:38:09] *** Quits: rindolf (~shlomif@2a0d:6fc2:4bb1:500:6b1e:2524:3d70:36ec) (Read error: Connection reset by peer)
[12:38:32] *** Joins: rindolf (~shlomif@2a0d:6fc2:4bb1:500:6b1e:2524:3d70:36ec)
[12:38:32] *** Quits: jazzy3 (~jaziz@user/jaziz) (Ping timeout: 240 seconds)
[12:39:02] *** Quits: rama (~rama@c-24-130-92-222.hsd1.ca.comcast.net) (Ping timeout: 240 seconds)
[12:39:37] *** Quits: jay-m1261 (~jay-m@154.72.150.248) (Ping timeout: 256 seconds)
[12:40:06] *** Quits: jay-m126 (~jay-m@154.72.150.248) (Ping timeout: 265 seconds)
[12:41:22] *** Joins: l4yer (~l4yer@195.181.170.210)
[12:41:28] *** Joins: jay-m126 (~jay-m@129.0.76.209)
[12:41:46] *** Quits: lethu (~lethu@user/lethu) (Remote host closed the connection)
[12:41:50] *** Joins: jay-m126_ (~jay-m@129.0.76.209)
[12:42:32] *** Quits: penguino (~mrpenguin@user/mrpenguin) (Remote host closed the connection)
[12:45:01] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Quit: My MacBook has gone to sleep. ZZZzzz‚Ä¶)
[12:46:36] *** Joins: kdc (~kdc@196.211.197.159)
[12:46:52] *** Joins: BillyZane (~BillyZane@193.160.245.245)
[12:47:33] *** Quits: BillyZane2 (~BillyZane@91.196.220.173) (Ping timeout: 256 seconds)
[12:54:36] *** Quits: bandit_za (~bandit@102-65-138-35.dsl.web.africa) (Ping timeout: 265 seconds)
[12:54:36] *** Quits: jay-m126 (~jay-m@129.0.76.209) (Read error: Connection reset by peer)
[12:58:27] *** Joins: predmijat (~predmijat@mail.strogopro.com)
[12:59:26] *** Quits: awmv (~awmv@2a02:21b0:644f:c181:2c15:8095:e6b8:fe4) (Quit: My MacBook has gone to sleep. ZZZzzz‚Ä¶)
[12:59:55] *** Joins: jay-m126 (~jay-m@129.0.76.209)
[13:02:02] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 240 seconds)
[13:02:26] *** Quits: causaui1 (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 245 seconds)
[13:02:46] *** Joins: awmv (~awmv@213.55.225.213)
[13:03:18] *** Quits: xkuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[13:03:18] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[13:03:57] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Client Quit)
[13:04:10] *** Joins: causaui1 (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[13:05:47] *** Joins: carl--- (~carl-@c-138ee555.02-180-73746f39.bbcust.telenor.se)
[13:06:29] *** Joins: greedom (~greedom@p200300de67375500888e7d1fc2c7a325.dip0.t-ipconnect.de)
[13:07:35] *** Quits: runlevel_0 (~nyarlatho@user/runlevel-0/x-6929182) (Quit: Konversation terminated!)
[13:07:54] *** Joins: lethu (~lethu@user/lethu)
[13:09:12] *** Quits: bindu (~bindu@user/bindu) (Ping timeout: 276 seconds)
[13:11:12] *** Joins: bindu (~bindu@user/bindu)
[13:11:35] *** Joins: gitesh (uid423739@id-423739.ilkley.irccloud.com)
[13:13:27] *** Quits: causaui1 (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 265 seconds)
[13:14:35] *** Joins: raxor2k (~raxor2k@78.158.245.248)
[13:21:14] *** Joins: millido (~millido@84.210.150.128)
[13:23:41] *** Joins: Bronto22 (~mennoh@2a02:a46b:4db0:1:5604:a6ff:fe37:3044)
[13:23:51] *** Joins: fedenix (~fedenix@gateway/tor-sasl/fedenix)
[13:25:32] *** Quits: awmv (~awmv@213.55.225.213) (Quit: My MacBook has gone to sleep. ZZZzzz‚Ä¶)
[13:26:15] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[13:26:22] *** Quits: rany (~rany@user/rany) (Remote host closed the connection)
[13:27:19] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Client Quit)
[13:27:37] *** kai2 is now known as kai
[13:28:32] *** Quits: jay-m126_ (~jay-m@129.0.76.209) (Ping timeout: 240 seconds)
[13:29:53] *** Quits: jay-m126 (~jay-m@129.0.76.209) (Ping timeout: 250 seconds)
[13:30:32] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 240 seconds)
[13:31:28] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[13:31:35] *** Quits: the_lanetly_052 (~the_lanet@194.135.154.78) (Remote host closed the connection)
[13:31:37] *** Joins: jay-m126 (~jay-m@129.0.76.209)
[13:32:24] *** Joins: the_lanetly_052 (~the_lanet@194.135.154.78)
[13:35:08] *** Joins: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it)
[13:35:55] *** Joins: jay-m126_ (~jay-m@129.0.76.209)
[13:36:19] *** Joins: Viewday112 (~Viewday@user/viewday)
[13:36:24] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: sdfgsdfg)
[13:37:41] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[13:37:47] *** Quits: Viewday11 (~Viewday@user/viewday) (Read error: Connection reset by peer)
[13:37:47] *** Viewday112 is now known as Viewday11
[13:38:32] *** Quits: djapo (~archangel@user/djapo) (Ping timeout: 240 seconds)
[13:38:37] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[13:38:50] *** Quits: ubert (~Thunderbi@p200300ecdf0ba234e6b318fffe838f33.dip0.t-ipconnect.de) (Ping timeout: 260 seconds)
[13:38:52] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Client Quit)
[13:40:00] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[13:40:26] *** Joins: xcombelle (~xavie@abordeaux-658-1-148-113.w92-146.abo.wanadoo.fr)
[13:40:49] *** Joins: montpol (montpol@fine.mouses.xyz)
[13:44:58] *** Joins: BlueSky (~BlueSky@user/bluesky)
[13:46:12] *** Quits: givemeyourpies (~givemeyou@c-66-235-2-202.sea.wa.customer.broadstripe.net) (Quit: Going offline, see ya! (www.adiirc.com))
[13:46:52] *** Quits: catdog (~quassel@2001:470:50f7:cdcd::cd1) (Quit: No Ping reply in 120 seconds.)
[13:48:00] *** Joins: catdog (~quassel@2001:470:50f7:cdcd::cd1)
[13:48:15] *** Quits: jay-m126 (~jay-m@129.0.76.209) (Ping timeout: 265 seconds)
[13:48:33] *** Joins: rendar (~rendar@user/rendar)
[13:48:44] *** Quits: jay-m126_ (~jay-m@129.0.76.209) (Ping timeout: 265 seconds)
[13:50:03] *** Joins: jay-m126 (~jay-m@129.0.76.215)
[13:50:22] *** Joins: jay-m126_ (~jay-m@129.0.76.215)
[13:54:18] *** Joins: causaui1 (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[13:56:02] *** Quits: reset (~reset@user/reset) (Quit: reset)
[14:03:43] *** Quits: causaui1 (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 265 seconds)
[14:04:10] *** Joins: causaui1 (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[14:04:32] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 240 seconds)
[14:04:49] *** Joins: x88x88x (~cheeg@218.212.160.154)
[14:05:32] *** Quits: Enitin (~Enitin@82.102.22.84) (Ping timeout: 240 seconds)
[14:06:52] *** Joins: fikran (~fikran@user/fikran)
[14:08:25] *** Joins: Enitin (~Enitin@82.102.22.86)
[14:09:21] *** Quits: YuGiOhJCJ (~YuGiOhJCJ@gateway/tor-sasl/yugiohjcj) (Quit: YuGiOhJCJ)
[14:10:50] *** Joins: plastico (~plastico@neomutt/plastico)
[14:10:59] *** Joins: LucaTM (~LucaTM@user/lucatm)
[14:13:06] *** Joins: awmv (~awmv@2a02:21b0:644f:c181:6d74:7509:74f5:7d14)
[14:13:07] *** Quits: causaui1 (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 256 seconds)
[14:14:42] *** Joins: sniperwolf (~sniperwol@91.230.98.1)
[14:14:53] *** Joins: esro (~esro@nat1.krakowskiinternet.pl)
[14:18:27] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: ZzzZ)
[14:19:33] *** Joins: magla (~gelignite@55d4f645.access.ecotel.net)
[14:29:31] *** Joins: arinov (~arinov@213.194.126.155)
[14:29:54] *** Joins: rany (~rany@user/rany)
[14:29:57] *** Joins: y1n (~y1n@91.141.78.185.wireless.dyn.drei.com)
[14:30:18] *** Quits: xcombelle (~xavie@abordeaux-658-1-148-113.w92-146.abo.wanadoo.fr) (Ping timeout: 265 seconds)
[14:30:48] *** Quits: dohtem (uid524096@user/dohtem) (Quit: Connection closed for inactivity)
[14:32:52] *** Quits: arinov (~arinov@213.194.126.155) (Client Quit)
[14:33:02] *** Joins: arinov (~arinov@213.194.126.155)
[14:34:09] *** Joins: xcombelle (~xavie@abordeaux-658-1-148-113.w92-146.abo.wanadoo.fr)
[14:34:29] *** Joins: noord (~noord@user/noord)
[14:35:54] *** Quits: Betal (~Betal@user/betal) (Quit: WeeChat 3.3)
[14:36:18] *** Quits: jim (~jim@about/linux/staff/jim) (Ping timeout: 268 seconds)
[14:37:08] *** Joins: ham5urg_ (~ham5urg@2a04:4540:6803:ed00:cd03:2ace:207e:c525)
[14:40:06] *** Quits: greedom (~greedom@p200300de67375500888e7d1fc2c7a325.dip0.t-ipconnect.de) (Remote host closed the connection)
[14:42:12] *** Joins: guenhael (~Thunderbi@2a01cb008c3d5800018c2bbe0a122bce.ipv6.abo.wanadoo.fr)
[14:43:24] *** Quits: Falcon| (andreas@user/falcon/x-0540249) (Quit: brb)
[14:45:31] *** Quits: toine (~antoine@2001:41d0:e:41f::1) (Quit: WeeChat 3.1)
[14:45:37] *** Joins: Robin_Jadoul (~Robin_Jad@152.67.64.160)
[14:45:47] *** Joins: Falcon| (andreas@user/falcon/x-0540249)
[14:47:03] *** Joins: toine42 (~antoine@2001:41d0:e:41f::1)
[14:47:09] *** Joins: rajkosto (~rajkosto@93-86-146-248.dynamic.isp.telekom.rs)
[14:49:53] *** Joins: jmd (~user@de.cellform.com)
[14:50:32] *** Quits: gitgitgit (~gitly@85.255.232.190) (Ping timeout: 240 seconds)
[14:50:37] *** Quits: parv (~quass@user/parv) (Quit: parv)
[14:52:08] *** Joins: cosimone (~user@2001:b07:ae5:db26:a7aa:8027:6b4e:2fb3)
[14:52:28] *** Joins: gitgitgit (~gitly@85.255.237.223)
[14:52:56] *** Quits: kn100 (~kn100@wireguard/tunneler/kn100) (Quit: https://kn100.me :))
[14:53:36] *** Joins: kn100 (~kn100@wireguard/tunneler/kn100)
[14:54:29] *** Quits: carl--- (~carl-@c-138ee555.02-180-73746f39.bbcust.telenor.se) (Ping timeout: 256 seconds)
[14:54:48] *** Quits: Robin_Jadoul (~Robin_Jad@152.67.64.160) (Ping timeout: 268 seconds)
[14:56:23] *** Quits: zaquest (~notzaques@5.130.79.72) (Remote host closed the connection)
[14:57:19] *** Quits: gitgitgit (~gitly@85.255.237.223) (Ping timeout: 256 seconds)
[14:57:23] *** Joins: zaquest (~notzaques@5.130.79.72)
[14:58:00] *** Quits: dre (~dre@2001:8003:c932:c301:7e35:e886:e998:1b1c) (Quit: Leaving)
[14:58:36] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[14:58:58] *** Joins: gitgitgit (~gitly@85.255.232.190)
[14:59:35] *** Quits: x88x88x (~cheeg@218.212.160.154) (Ping timeout: 256 seconds)
[14:59:40] *** Joins: palasso (~palasso@user/palasso)
[14:59:41] <wyre> hi guys, when I run `poetry install` inside my new crated shell I have this error https://bpa.st/DBGA
[14:59:46] <wyre> why do you think is this?
[15:00:18] *** Quits: iflema (~ian@user/iflema) (Quit: iflema)
[15:00:34] *** Joins: iflema (~ian@user/iflema)
[15:00:39] <tk> Why are python deques so slow? why does using a dict to store a linked-list improve performance multiple orders of magnitude?
[15:00:59] <tk> hmm... I guess lookup time would be faster
[15:01:01] <deniska> tk: you mean collections.deque?
[15:01:08] <tk> I wonder if that's where the bottleneck is
[15:01:15] <tk> deniska: yes
[15:01:36] *** Quits: sgn (~sgn@user/sgn) (Ping timeout: 268 seconds)
[15:01:37] <nedbat> tk: deque is unlikely to be the bottleneck in your program
[15:01:53] <deniska> I use deques when I want a list with efficient .append and .pop from both ends, never noticed any performance problems I woudln't have with a list
[15:01:56] <tk> nedbat: https://old.reddit.com/r/adventofcode/comments/kimluc/2020_day_23_solutions/ it's the bottleneck of a bunch of people's programs here
[15:02:07] <tk> but I think it's the lookup time which is killing things actually
[15:02:12] <tk> what's a profiling tool for python?
[15:02:34] *** Joins: sgn (~sgn@user/sgn)
[15:03:01] <deniska> there's a builtin one, cProfile
[15:03:14] <nedbat> tk: https://docs.python.org/3/library/profile.html
[15:04:02] *** Quits: gitgitgit (~gitly@85.255.232.190) (Ping timeout: 240 seconds)
[15:05:18] *** Joins: gitgitgit (~gitly@148.252.128.243)
[15:06:09] <tk>      1001   15.847    0.016   15.847    0.016 {method 'index' of 'collections.deque' objects}
[15:06:11] <tk> okay, so I was right
[15:06:15] <tk> it was the lookup time killing it
[15:06:34] <tk> that makes perfect sense, python deque is working fine, it's just I forgot how the solution works
[15:06:38] <tk> thanks
[15:07:01] <deniska> tk: .index is slow (well, O(n)) on both lists and deques
[15:07:09] <tk> deniska: yeah I am aware
[15:07:52] <tk> I forgot the solution relied on index and was confused thinking that removing elements from the middle of the deque and adding them somewhere else must be somehow slow
[15:08:14] *** Joins: jim (~jim@about/linux/staff/jim)
[15:11:08] <nedbat> i think removing from the middle would also be O(n)
[15:11:52] *** Quits: pmb (~pmb@89-64-79-51.dynamic.chello.pl) (Quit: pmb)
[15:12:18] *** Joins: Robin_Jadoul (~Robin_Jad@152.67.64.160)
[15:13:04] *** Joins: pmb (~pmb@89-64-79-51.dynamic.chello.pl)
[15:13:41] *** Joins: Midjak (~Midjak@may53-1-78-226-116-92.fbx.proxad.net)
[15:14:40] <tk> yes, hmm... it has to get to it, you're riht
[15:14:46] *** Quits: gitgitgit (~gitly@148.252.128.243) (Ping timeout: 265 seconds)
[15:16:08] *** Joins: vulpes_vulpes (~vulpes_vu@62-64-204-115.dynamic.dial.as9105.com)
[15:16:10] *** Joins: grayn (~Thunderbi@2001:8003:8c8b:e00:fa1b:cb7a:c685:4fb9)
[15:16:38] *** Joins: gitgitgit (~gitly@85.255.237.223)
[15:17:26] *** Joins: grayn1 (~Thunderbi@124.188.209.195)
[15:17:28] *** Quits: grayn (~Thunderbi@2001:8003:8c8b:e00:fa1b:cb7a:c685:4fb9) (Client Quit)
[15:17:28] *** grayn1 is now known as grayn
[15:20:06] *** Quits: raxor2k (~raxor2k@78.158.245.248) (Remote host closed the connection)
[15:21:11] *** Quits: gitgitgit (~gitly@85.255.237.223) (Ping timeout: 245 seconds)
[15:21:56] *** Joins: causaui1 (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[15:22:58] *** Joins: gitgitgit (~gitly@148.252.133.95)
[15:23:45] *** Joins: jazzy2 (~jaziz@user/jaziz)
[15:25:47] *** Joins: luigibu1 (~luigibu@80.30.201.209)
[15:26:36] *** Quits: jetchisel (jetchisel@user/jetchisel) (Ping timeout: 245 seconds)
[15:26:38] *** Quits: jazzy (~jaziz@user/jaziz) (Ping timeout: 260 seconds)
[15:27:32] *** Joins: cdown_ (~cdown@89.32.122.5)
[15:28:29] *** Quits: causaui1 (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 256 seconds)
[15:28:41] *** Joins: mIk3_08 (~Thunderbi@user/mik3-08/x-2852566)
[15:28:47] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[15:29:03] *** Quits: jim (~jim@about/linux/staff/jim) (Ping timeout: 256 seconds)
[15:29:24] *** Quits: grayn (~Thunderbi@124.188.209.195) (Quit: grayn)
[15:30:11] *** Quits: cdown (~cdown@163.114.131.1) (Ping timeout: 256 seconds)
[15:30:18] *** Joins: rsrx (~rsrx@178-222-105-178.dynamic.isp.telekom.rs)
[15:31:19] *** Quits: gitgitgit (~gitly@148.252.133.95) (Ping timeout: 256 seconds)
[15:33:04] *** Quits: cdown_ (~cdown@89.32.122.5) (Ping timeout: 256 seconds)
[15:33:08] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 265 seconds)
[15:33:19] *** Joins: gitgitgit (~gitly@85.255.232.190)
[15:34:14] *** Joins: cdown (~cdown@89.32.122.5)
[15:34:44] *** Joins: grayn (~Thunderbi@2001:8003:8c8b:e00:6033:a22f:7e31:153a)
[15:34:48] *** Joins: hrehf (~foofaoijf@2001:16b8:2c73:b400:ec9e:658e:3caf:38ef)
[15:35:05] *** Joins: tobybl (~tobybl@213.31.134.21)
[15:35:54] *** Quits: luigibu1 (~luigibu@80.30.201.209) (Ping timeout: 256 seconds)
[15:36:01] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.3)
[15:36:31] *** Joins: supakeen (~user@python/site-packages/supakeen)
[15:36:37] *** Quits: remolej (~kenoba@user/kenoba) (Quit: The Lounge - https://thelounge.chat)
[15:36:44] *** Quits: Midjak (~Midjak@may53-1-78-226-116-92.fbx.proxad.net) (Quit: This computer has gone to sleep)
[15:37:28] *** Joins: remolej (~kenoba@user/kenoba)
[15:38:04] *** Joins: chowmeined (~chowmeine@user/chowmeined)
[15:39:15] *** Quits: orbatos_ (~orbatos@user/orbatos) (Ping timeout: 250 seconds)
[15:41:16] *** Joins: blindguard (~blindguar@2a02:908:1864:c200::12)
[15:41:31] *** Quits: grayn (~Thunderbi@2001:8003:8c8b:e00:6033:a22f:7e31:153a) (Remote host closed the connection)
[15:47:11] *** Quits: jay-m126_ (~jay-m@129.0.76.215) (Ping timeout: 256 seconds)
[15:47:11] *** Quits: jay-m126 (~jay-m@129.0.76.215) (Ping timeout: 256 seconds)
[15:47:38] *** Quits: nrg (~NRG@user/nrg) (Quit: ZNC - https://znc.in)
[15:48:41] *** Joins: jay-m126 (~jay-m@154.72.150.248)
[15:49:13] *** Joins: jay-m126_ (~jay-m@154.72.150.248)
[15:49:28] <wyre> can I see the dependency tree of a poetry project?
[15:51:29] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[15:53:02] <sveinse> Does anyone know about any packages providing synchronization mechanisms (like Lock, Event, Condition) that works both with blocking sync code as well as async? E.g. like janus does for Queue
[15:53:43] *** Joins: NyaaTheCat (~CalculusC@pool-71-178-171-140.washdc.fios.verizon.net)
[15:53:55] *** Joins: nrg (~NRG@user/nrg)
[15:54:48] <bjs> sveinse: can't you use a Queue to implement those? :)
[15:55:03] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[15:55:41] *** Quits: Enitin (~Enitin@82.102.22.86) (Ping timeout: 256 seconds)
[15:56:49] <sveinse> bjs: Yeah, I've considered it. Queue supports one to one events, but Condidition supports one to many (.e.g. notify_all()). If I had that, I think this wouldn't be too hard
[15:57:24] <bjs> sveinse: you can just put() onto the queue many times
[15:57:29] <bjs> to notify multiple :)
[15:57:58] *** Joins: Seiryuu (~Seiryuu@ip174-103-176-143.adsl2.static.versatel.nl)
[15:59:09] <wyre> I've got these dependencies https://bpa.st/OXFQ and some of them must depend on greenlet 1.1.0, which `poetry install` is not able to build inside the virtual env üòû
[15:59:23] <sveinse> Then you'd need to implement some payload to indicate which listener this is addressed to perhaps. Like if you had listener A and B, to separate between the events AB vs AA
[15:59:26] *** Joins: Enitin (~Enitin@82.102.22.85)
[15:59:58] <wyre> some idea about why poetry is not able to build greenlet 1.1.0 in python 3.10?
[16:00:10] *** Quits: jay-m126_ (~jay-m@154.72.150.248) (Ping timeout: 268 seconds)
[16:00:13] *** Quits: jay-m126 (~jay-m@154.72.150.248) (Ping timeout: 256 seconds)
[16:00:18] *** Joins: rama (~rama@c-24-130-92-222.hsd1.ca.comcast.net)
[16:00:21] *** Joins: causaui1 (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[16:00:22] <wyre> I think it's outdated because I'm apparently able of installing greenlet 1.1.2 with pip install ü§î
[16:00:25] <sveinse> bjs: I'm not sure what happens in Queue if there are multiple threads/tasks that wait() on it and a new value is presented. I don't even know if threading.Queue behaves the same way as asyncio.Queue. I will ned to check
[16:00:45] <wyre> but what's depending on that outdated greenlet's version?
[16:01:05] <bjs> sveinse: well only 1 of them will succeed in the get()
[16:01:08] <bjs> otherwise it's pretty broken
[16:01:35] *** Joins: jay-m126 (~jay-m@129.0.76.217)
[16:01:46] *** Quits: fedenix (~fedenix@gateway/tor-sasl/fedenix) (Remote host closed the connection)
[16:01:51] *** Joins: nomic (~nomic@185.217.117.132)
[16:02:04] <sveinse> bjs: yeah, so its functionally equal to Condition().notify(1)
[16:02:07] *** Joins: jay-m126_ (~jay-m@129.0.76.217)
[16:02:13] <bjs> sveinse: yeah
[16:02:24] <NyaaTheCat> mornin' everyone
[16:02:33] *** Quits: l4yer (~l4yer@195.181.170.210) (Remote host closed the connection)
[16:03:37] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Ping timeout: 256 seconds)
[16:03:45] *** Joins: fedenix (~fedenix@gateway/tor-sasl/fedenix)
[16:04:35] *** Joins: l4yer (~l4yer@195.181.170.210)
[16:04:45] *** Quits: rama (~rama@c-24-130-92-222.hsd1.ca.comcast.net) (Ping timeout: 256 seconds)
[16:06:27] <sveinse> bjs: And another property of Queue is that it is stateful. If you put a message/event on the queue, it'll stay there until its get. Condition are stateless. When wait() is called, it won't remember anything about the past. Correspondingly notify() or notify_all() can be called without any "recipients".
[16:07:00] <sveinse> For this mixed sync/async pacakge is would be awsome with a Condition() that had a sync multi-threaded + async interface
[16:07:18] *** Quits: tobybl (~tobybl@213.31.134.21) (Remote host closed the connection)
[16:07:32] *** Joins: cdown_ (~cdown@163.114.131.1)
[16:08:09] *** Quits: causaui1 (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 256 seconds)
[16:10:16] *** Joins: imp (~imp@192-141-191-227.alternativaip.net.br)
[16:10:28] *** Quits: cdown (~cdown@89.32.122.5) (Ping timeout: 256 seconds)
[16:10:30] *** cdown_ is now known as cdown
[16:11:16] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Quit: My MacBook has gone to sleep. ZZZzzz‚Ä¶)
[16:11:22] <sveinse> I haven't really discussed with the original package author if it is desireable to have this package with dual usage (sync and async), or if they better live as two distinct packages. The problem with the latter is that is much more work to keep the two variants synchronized. If it isn't a desire to keep them together, this debate about multi-threaded sync + async synchronization methods are moot.
[16:12:06] <bjs> sveinse: working with threads is painful enough as it is, I'd have assumed that mixing threads with async would just make things more complicated than needed
[16:12:07] *** Joins: EGH (~EGH@185.25.195.104)
[16:12:50] *** Quits: toine42 (~antoine@2001:41d0:e:41f::1) (Quit: WeeChat 3.1)
[16:14:10] *** Joins: toine42 (~antoine@2001:41d0:e:41f::1)
[16:14:23] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 256 seconds)
[16:14:30] *** Quits: l4yer (~l4yer@195.181.170.210) (Quit: Leaving)
[16:15:12] <sveinse> bjs: I agree, but the underlying library / communication uses threads and callback. Fortunately the low-level package now supports a loop argument and will fire the callbacks with call_soon_threadsafe() and thus run them into the same thread. So that's one thing off the table.
[16:15:34] *** Joins: withered_wolf (~withered_@174.25.131.17)
[16:15:47] *** Joins: tWqaq (~tWqaq@240e:389:5dd3:9000:79d4:44c6:3599:48)
[16:16:08] *** Quits: gitgitgit (~gitly@85.255.232.190) (Ping timeout: 256 seconds)
[16:16:13] *** Joins: fikran (~fikran@user/fikran)
[16:16:15] *** Joins: bloody (~bloody@user/bloody)
[16:16:39] *** Quits: Enitin (~Enitin@82.102.22.85) (Ping timeout: 256 seconds)
[16:16:40] <sveinse> But the whole callback logic is based on sync code thou and at some point I'll need to cross into the async world
[16:16:52] *** Joins: gitgitgit (~gitly@85.255.237.195)
[16:18:13] *** Parts: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it) ()
[16:18:15] <imp> Hello all. I have a list of dictionaries, where the dict schema looks like this: { 'user': { 'username': 'someusername', ... <many other keys> }, 'item': { 'itemname': 'name', ... <many other keys> }, 'value': INTVALUE, ... <many other keys> }. There are many entries for different usernames, items and values. I would like to list only the `max()` value of each pair of `username` and `itemname`. My idea in how to do it is to loop over the arr
[16:18:17] <imp> ay, storing a copy of the the max per user/item in a auxiliary dict. Any better ways?
[16:18:47] *** Joins: daoudr (~daoudr@xdsl-31-164-222-159.adslplus.ch)
[16:20:03] *** Quits: withered_wolf (~withered_@174.25.131.17) (Ping timeout: 256 seconds)
[16:20:15] *** Joins: Enitin (~Enitin@82.102.22.85)
[16:21:26] <sveinse> imp: Something like this? aux={k: {'username': v['username'], 'max': max(v['itemname']} for k, v in userdict.items()}
[16:21:41] <sveinse> imp: Not quite sure what you mean by the max part thou
[16:22:02] <imp> sveinse: max value. there is a 'value' key.
[16:23:04] <ChrisWarrick> a for loop over the dict should solve this quite easily
[16:23:06] <sveinse> imp: I think I didn't quite understand the hierarchy of your dict
[16:24:13] <imp> each user can give a different value of an item, I'm  looking for the most expensive items in opinion of each user per item.
[16:24:14] <sveinse> imp: You have a dict of dicts, right? Where each inner dict contains a lot of info about one user?
[16:24:27] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[16:24:34] <imp> sveinse: yes. a dict of dicts.
[16:24:51] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Client Quit)
[16:25:07] <imp> ChrisWarrick:  yes.. That is my idea. but I'm thinking to use a auxiliary dict to keep only the "pick" items.
[16:25:20] <imp> and not change the original data.
[16:25:33] <sveinse> imp: Either loop as ChrisWarrick suggest or dict comprehension aux={k: max(v['value']} for k, v in userdict.items()}
[16:25:34] <ChrisWarrick> imp: sure, a dict of {username: list of values} would be fine
[16:25:41] *** Joins: control (~v1@user/control)
[16:25:52] <ChrisWarrick> imp: hm, is it a dict of dicts, or a list of dicts of dicts?
[16:26:14] <imp> ChrisWarrick: a list of dict of dicts.
[16:26:33] <sveinse> Oh, sorry, I'm misleading you here. max(v['value']) will only return the same value
[16:26:39] <imp> ChrisWarrick: that dict of dicts of dicts... was read from a json.
[16:26:46] <sveinse> imp: max() against what? What are you comparing against?
[16:26:51] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[16:26:53] <ChrisWarrick> imp: ?
[16:27:09] <ChrisWarrick> imp: can you show a full example structure and expected output?
[16:27:18] *** Quits: rajkosto (~rajkosto@93-86-146-248.dynamic.isp.telekom.rs) (Ping timeout: 268 seconds)
[16:27:43] <control> hi, there is any way i could do the 'if' check like this? 'if var1 or var2 or var3 in var4:' ?
[16:27:51] <ChrisWarrick> control: no
[16:28:27] *** Quits: control (~v1@user/control) (Client Quit)
[16:28:53] <imp> ChrisWarrick: full example of structure is TOOO big. but I can create a small sample.
[16:29:06] <ChrisWarrick> imp: a small sample that visualizes the problem
[16:29:17] *** Joins: carl--- (~carl-@c-138ee555.02-180-73746f39.bbcust.telenor.se)
[16:29:36] <imp> ChrisWarrick: do you mind to see a json format?
[16:29:57] <ChrisWarrick> imp: show us the python data structure you have
[16:30:14] <sveinse> control: You can do if any(k in var4 for k in (var1, var2, var3)): Uncertain if one would consider this more compact that just doing 'if var1 in var4 or var2 in var4 or ...'
[16:30:17] <ChrisWarrick> imp: if the python data structure is just json.loads() then you could just show us the json
[16:30:19] <imp> is a json.loads(jsonfile).
[16:30:34] <imp> ok.. let me build one.
[16:30:43] *** Quits: weedmic (~weedmic@188.120.139.53) (Quit: Konversation terminated!)
[16:30:47] *** Joins: l4yer (~l4yer@2001:ac8:31:6e:1012:caf7:418b:4543)
[16:32:03] *** Joins: betuxy (~betuxy@p579ad707.dip0.t-ipconnect.de)
[16:33:34] *** Joins: rajkosto (~rajkosto@91-150-115-184.dynamic.isp.telekom.rs)
[16:34:46] *** Quits: jazzy2 (~jaziz@user/jaziz) (Ping timeout: 260 seconds)
[16:36:24] <imp> ChrisWarrrick:  http://jsonblob.com/914502388443004928
[16:37:03] *** Quits: y1n (~y1n@91.141.78.185.wireless.dyn.drei.com) (Ping timeout: 256 seconds)
[16:38:03] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Quit: My MacBook has gone to sleep. ZZZzzz‚Ä¶)
[16:38:40] *** Joins: mat001 (~mat001@c-71-202-208-251.hsd1.ca.comcast.net)
[16:40:35] <imp> I would like to find the max(value) per 'from_account'. In this case will return me 2 entries: the entry 0 since value 1390 is the largest to 'from_account["address"] = '0x0002' and entry 2 since value 1350 is the largest value to 'from_account['address'] = '0x0003'.
[16:41:50] *** Quits: NyaaTheCat (~CalculusC@pool-71-178-171-140.washdc.fios.verizon.net) (Read error: Connection reset by peer)
[16:41:55] *** Joins: cdown_ (~cdown@89.32.122.5)
[16:42:10] *** Joins: NyaaTheCat (~CalculusC@pool-71-178-171-140.washdc.fios.verizon.net)
[16:42:26] <sveinse> Is it safe to assume mylist.append() is atomic, multi-threaded-wise?
[16:42:43] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Ping timeout: 268 seconds)
[16:43:20] *** Quits: mat001 (~mat001@c-71-202-208-251.hsd1.ca.comcast.net) (Ping timeout: 256 seconds)
[16:44:20] *** Quits: ali1234 (~al@user/ali1234) (Ping timeout: 260 seconds)
[16:44:40] *** Quits: cdown (~cdown@163.114.131.1) (Ping timeout: 265 seconds)
[16:44:41] *** cdown_ is now known as cdown
[16:44:52] *** Joins: SteveR (~SteveR@103.215.168.1)
[16:45:36] *** Quits: betuxy (~betuxy@p579ad707.dip0.t-ipconnect.de) (Remote host closed the connection)
[16:45:51] *** Joins: betuxy (~betuxy@p579ad707.dip0.t-ipconnect.de)
[16:46:09] <bjs> sveinse: yes
[16:46:15] <bjs> sveinse: https://docs.python.org/3/faq/library.html#what-kinds-of-global-value-mutation-are-thread-safe
[16:46:26] <sveinse> bjs: thank you
[16:46:27] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[16:46:53] *** Quits: rindolf (~shlomif@2a0d:6fc2:4bb1:500:6b1e:2524:3d70:36ec) (Read error: Connection reset by peer)
[16:47:54] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[16:48:18] <sveinse> bjs: are these guarantees of the language or cpython specific (due to the current GIL implementation)?
[16:49:47] <bjs> sveinse: well, they should be guarantees of the language but concurrency is the place where other implementations are bound to differ even if it is in the language spec
[16:50:25] *** Joins: orbatos (~orbatos@user/orbatos)
[16:52:11] *** Quits: mIk3_08 (~Thunderbi@user/mik3-08/x-2852566) (Quit: mIk3_08)
[16:53:48] *** Quits: mcglk_ (~mcglk@131.191.49.120) (Read error: Connection reset by peer)
[16:54:07] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[16:54:20] *** Quits: gitgitgit (~gitly@85.255.237.195) (Ping timeout: 265 seconds)
[16:54:47] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[16:55:41] *** Quits: DPA (~DPA@2a05:41c0:b:db04::a3c:10d) (Ping timeout: 268 seconds)
[16:55:52] *** Joins: Barones (~Barones@2804:7f3:8987:f411:8c3b:1479:947a:aeea)
[16:56:14] *** Joins: gitgitgit (~gitly@85.255.237.195)
[16:56:33] *** Joins: ThePhilgrim (~ThePhilgr@151.41.185.44)
[16:59:54] *** Quits: Bronto22 (~mennoh@2a02:a46b:4db0:1:5604:a6ff:fe37:3044) (Quit: Konversation terminated!)
[17:00:10] *** Quits: mickey8 (~user@user/mickey) (Quit: Ping timeout (120 seconds))
[17:00:25] *** Joins: mickey8 (~user@user/mickey)
[17:00:41] *** Joins: tobybl (~tobybl@213.31.134.21)
[17:01:39] <sveinse> Why is it so common to see `if a is not None:` when a has the type Optional[SomeClass]? One can test it directly for being truthy, but a lot of authors do this "is" test. Is it a bleedover habit from other languages?
[17:02:14] <nedbat> sveinse: it's because SomeClass might have falsey instances
[17:02:32] <bjs> sveinse: because `if a` and `if a is not None` is not the same thing, and the former depends on SomeClass's __bool__
[17:02:33] *** Joins: zeden (~zeden@user/zeden)
[17:02:56] <sveinse> nedbat, bjs: Thanks. Very good point
[17:02:58] <bjs> and some types (e.g. numpy arrays) don't even let you type `if a:` most of the time
[17:03:35] *** Joins: y1n (~y1n@91.141.78.185.wireless.dyn.drei.com)
[17:04:19] *** Joins: rindolf (~shlomif@2a0d:6fc2:4bb1:500:6b1e:2524:3d70:36ec)
[17:05:07] *** Quits: tobybl (~tobybl@213.31.134.21) (Remote host closed the connection)
[17:05:45] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Quit: My MacBook has gone to sleep. ZZZzzz‚Ä¶)
[17:06:27] *** Joins: tobybl (~tobybl@213.31.134.21)
[17:06:31] *** Quits: mallkrampus (~mallkramp@64.44.140.60) (Ping timeout: 256 seconds)
[17:06:40] *** Quits: tobybl (~tobybl@213.31.134.21) (Remote host closed the connection)
[17:07:44] *** Joins: DPA (~DPA@75-128-16-94.static.cable.fcom.ch)
[17:08:13] *** Joins: scarce (~scarce@2a05:f480:2000:1325::)
[17:14:38] *** Joins: bomb-on (~bomb-on@194.144.47.113)
[17:15:08] *** Joins: BlueSky_ (~BlueSky@user/bluesky)
[17:15:51] *** Quits: NyaaTheCat (~CalculusC@pool-71-178-171-140.washdc.fios.verizon.net) (Quit: I have phased into another dimension, see ya later!)
[17:17:32] *** Joins: NyaaTheCat (~CalculusC@pool-71-178-171-140.washdc.fios.verizon.net)
[17:17:32] *** Quits: BlueSky (~BlueSky@user/bluesky) (Ping timeout: 240 seconds)
[17:19:06] *** Quits: pipapipapipo (~peppbel@c-73-221-241-101.hsd1.wa.comcast.net) (Ping timeout: 268 seconds)
[17:19:40] *** Quits: arinov (~arinov@213.194.126.155) (Quit: WeeChat 3.3)
[17:19:49] *** Joins: mallkrampus (~mallkramp@172.93.207.234)
[17:21:24] *** Joins: arinov (~arinov@213.194.126.155)
[17:21:36] *** Quits: esro (~esro@nat1.krakowskiinternet.pl) (Quit: Leaving)
[17:23:46] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[17:28:17] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[17:29:15] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[17:29:35] *** Joins: causaui1 (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[17:30:04] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[17:30:16] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[17:32:03] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[17:32:23] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Remote host closed the connection)
[17:32:57] *** Quits: poiqwepoiqwe (uid525840@id-525840.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[17:33:37] *** Joins: ali1234 (~al@user/ali1234)
[17:33:51] *** Joins: darksun (~darksun@user/darksun)
[17:34:20] *** Quits: cheater (~Username@user/cheater) (Ping timeout: 256 seconds)
[17:34:28] *** Joins: cheater (~Username@user/cheater)
[17:35:29] *** Quits: NyaaTheCat (~CalculusC@pool-71-178-171-140.washdc.fios.verizon.net) (Quit: I have phased into another dimension, see ya later!)
[17:36:04] *** Quits: cdown (~cdown@89.32.122.5) (Remote host closed the connection)
[17:36:23] *** Quits: nfc_ (nfc@tilde.institute) (Ping timeout: 268 seconds)
[17:36:59] *** Joins: Sario (uid356235@fosshost/cdo/Sario)
[17:37:21] *** Joins: cdown (~cdown@89.32.122.5)
[17:38:13] *** Quits: DPA (~DPA@75-128-16-94.static.cable.fcom.ch) (Ping timeout: 268 seconds)
[17:38:19] *** Quits: Barones (~Barones@2804:7f3:8987:f411:8c3b:1479:947a:aeea) (Ping timeout: 265 seconds)
[17:38:29] *** Quits: causaui1 (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 265 seconds)
[17:38:39] *** Quits: nomic (~nomic@185.217.117.132) (Quit: Leaving)
[17:38:41] *** Joins: zer0bitz (~zer0bitz@dsl-hkibng31-54fabc-15.dhcp.inet.fi)
[17:38:50] *** Quits: arinov (~arinov@213.194.126.155) (Quit: WeeChat 3.3)
[17:39:01] *** Joins: DPA- (~DPA@2a05:41c0:0:8104::a3c:10d)
[17:40:19] *** Joins: Roey (~Roey@user/Roey)
[17:41:44] *** SeeM_ is now known as SeeM
[17:43:16] *** Joins: dextercd (~dexter@2a02-a450-f25d-1-76d4-35ff-fefe-34c.fixed6.kpn.net)
[17:44:02] *** Quits: cosimone (~user@2001:b07:ae5:db26:a7aa:8027:6b4e:2fb3) (Ping timeout: 240 seconds)
[17:44:13] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[17:45:32] *** Quits: Robin_Jadoul (~Robin_Jad@152.67.64.160) (Quit: Robin_Jadoul)
[17:45:33] *** Quits: TonyStone (~TonyStone@2603-7080-8607-c36a-9971-ce5a-c805-3e08.res6.spectrum.com) (Remote host closed the connection)
[17:46:36] *** Quits: DPA- (~DPA@2a05:41c0:0:8104::a3c:10d) (Ping timeout: 245 seconds)
[17:49:04] *** Quits: Jigsy (~Jigsy@user/jigsy) (Ping timeout: 256 seconds)
[17:49:28] *** Quits: y1n (~y1n@91.141.78.185.wireless.dyn.drei.com) (Remote host closed the connection)
[17:49:35] *** Quits: Enitin (~Enitin@82.102.22.85) (Ping timeout: 256 seconds)
[17:50:00] *** Joins: caveman (~caveman@gateway/tor-sasl/caveman)
[17:50:18] *** Joins: TonyStone (~TonyStone@cpe-74-76-51-197.nycap.res.rr.com)
[17:50:25] *** Quits: ali1234 (~al@user/ali1234) (Remote host closed the connection)
[17:50:53] *** Joins: DPA (~DPA@75-128-16-94.static.cable.fcom.ch)
[17:51:02] *** Joins: ali1234 (~al@user/ali1234)
[17:52:31] *** Joins: nyah (~nyah@94.6.71.219)
[17:52:49] *** Joins: Enitin (~Enitin@82.102.22.85)
[17:53:14] *** Joins: henistein (~henistein@2001:8a0:c18a:f601:748d:cf0f:cbc6:7c34)
[17:53:19] *** Quits: henistein (~henistein@2001:8a0:c18a:f601:748d:cf0f:cbc6:7c34) (Client Quit)
[17:53:35] *** Joins: Henistein (~Henistein@2001:8a0:c18a:f601:748d:cf0f:cbc6:7c34)
[17:53:51] *** Quits: Henistein (~Henistein@2001:8a0:c18a:f601:748d:cf0f:cbc6:7c34) (Client Quit)
[17:54:07] *** Quits: mxp (~mxp@185.16.205.131) (Quit: leaving)
[17:54:19] *** Joins: HENISTEIN (~HENISTEIN@2001:8a0:c18a:f601:748d:cf0f:cbc6:7c34)
[17:54:41] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Quit: My MacBook has gone to sleep. ZZZzzz‚Ä¶)
[17:56:35] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: ZzzZ)
[17:56:43] *** Joins: zzy2357 (~zzy2357@user/zzy2357)
[17:57:44] *** Joins: mxp (~mxp@185.16.205.131)
[18:00:16] *** Quits: sfields (~sfields@2605:a601:adea:7a00:1a87:4473:c6e2:6ac8) (Read error: Connection reset by peer)
[18:00:55] *** Quits: gitgitgit (~gitly@85.255.237.195) (Ping timeout: 256 seconds)
[18:01:30] *** Parts: zzy2357 (~zzy2357@user/zzy2357) ()
[18:01:32] *** Quits: rakoon (~rakoon@2001:985:f4c6:1:c386:3e11:e834:9e07) (Ping timeout: 240 seconds)
[18:02:30] *** Joins: rakoon (~rakoon@2001:985:f4c6:1:5cd0:c655:fac8:533f)
[18:02:45] *** Joins: gitgitgit (~gitly@85.255.232.172)
[18:03:45] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[18:03:46] *** Quits: vakera_pingveno (~dan@107-209-165-75.lightspeed.hstntx.sbcglobal.net) (Quit: Konversation terminated!)
[18:03:51] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.3)
[18:03:54] *** Joins: nfc_ (nfc@tilde.institute)
[18:03:56] *** Quits: guenhael (~Thunderbi@2a01cb008c3d5800018c2bbe0a122bce.ipv6.abo.wanadoo.fr) (Ping timeout: 265 seconds)
[18:03:58] *** Joins: vakera_pingveno (~dan@107-209-165-75.lightspeed.hstntx.sbcglobal.net)
[18:04:18] *** Quits: trace987 (~trace@ip5b429941.dynamic.kabel-deutschland.de) (Remote host closed the connection)
[18:04:55] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[18:07:53] *** Quits: HENISTEIN (~HENISTEIN@2001:8a0:c18a:f601:748d:cf0f:cbc6:7c34) (Quit: Client closed)
[18:10:18] *** Quits: millido (~millido@84.210.150.128) (Quit: ZNC 1.8.2 - https://znc.in)
[18:12:20] *** Joins: NyaaTheCat (~CalculusC@pool-71-178-171-140.washdc.fios.verizon.net)
[18:13:54] *** Joins: Klinda (~superleag@user/klinda)
[18:14:44] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Quit: My MacBook has gone to sleep. ZZZzzz‚Ä¶)
[18:15:07] *** Quits: SteveR (~SteveR@103.215.168.1) (Quit: Client closed)
[18:15:23] *** Quits: zyweo (~Svew@user/zyweo) (Ping timeout: 264 seconds)
[18:18:19] *** Joins: lsrtl__ (~lsrtl@user/lsrtl)
[18:18:54] *** Joins: the_lanetly_052_ (~the_lanet@194.135.154.78)
[18:19:00] *** Joins: causaui1 (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[18:19:03] *** Quits: gitgitgit (~gitly@85.255.232.172) (Ping timeout: 256 seconds)
[18:19:03] *** Quits: the_lanetly_052 (~the_lanet@194.135.154.78) (Ping timeout: 256 seconds)
[18:19:22] *** Quits: caveman (~caveman@gateway/tor-sasl/caveman) (Quit: see ya l8tr (i.a.))
[18:21:08] *** Joins: gitgitgit (~gitly@148.252.133.95)
[18:22:48] *** Joins: GreenResponse (~tomek@r-45-155-148-237.gpon.bialnet.pl)
[18:23:38] *** Quits: causaui1 (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 256 seconds)
[18:23:45] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 265 seconds)
[18:24:10] *** Joins: causaui1 (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[18:24:56] *** Quits: rsrx (~rsrx@178-222-105-178.dynamic.isp.telekom.rs) (Quit: Leaving)
[18:25:34] *** Joins: fikran (~fikran@user/fikran)
[18:26:18] *** Joins: rajkohaxor (~rajkosto@91-150-115-184.dynamic.isp.telekom.rs)
[18:28:44] *** Quits: causaui1 (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 256 seconds)
[18:28:54] *** Quits: the_lanetly_052_ (~the_lanet@194.135.154.78) (Read error: Connection reset by peer)
[18:29:02] *** Joins: the_lanetly_052 (~the_lanet@194.135.154.78)
[18:29:04] *** Quits: rajkosto (~rajkosto@91-150-115-184.dynamic.isp.telekom.rs) (Ping timeout: 265 seconds)
[18:29:10] *** Joins: causaui1 (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[18:30:10] *** Joins: bitrot (~rajkosto@91-150-115-184.dynamic.isp.telekom.rs)
[18:30:41] *** Joins: millido (~millido@84.210.150.128)
[18:33:13] *** Quits: rajkohaxor (~rajkosto@91-150-115-184.dynamic.isp.telekom.rs) (Ping timeout: 256 seconds)
[18:33:24] *** Quits: binary01 (~binary01@174.141.153.217) (Remote host closed the connection)
[18:33:38] *** Joins: binary01 (~binary01@174.141.153.217)
[18:34:32] *** Quits: NyaaTheCat (~CalculusC@pool-71-178-171-140.washdc.fios.verizon.net) (Quit: I have phased into another dimension, see ya later!)
[18:35:37] *** Quits: leduyquang753 (~leduyquan@user/leduyquang753) (Quit: Lost terminal)
[18:36:05] *** Joins: NyaaTheCat (~CalculusC@pool-71-178-171-140.washdc.fios.verizon.net)
[18:36:49] *** cvmn is now known as caveman
[18:37:45] *** Quits: gitgitgit (~gitly@148.252.133.95) (Ping timeout: 256 seconds)
[18:37:52] *** Quits: sniperwolf (~sniperwol@91.230.98.1) (Quit: Client closed)
[18:38:07] *** Quits: bomb-on (~bomb-on@194.144.47.113) (Quit: a–ª–ª–∏–ª—π—ñ–∞!)
[18:39:49] *** Joins: Vornicus (~Vornicus@2603-8000-5d07-7ef0-0c57-8e43-cde0-fc57.res6.spectrum.com)
[18:40:02] *** Joins: rsx (~dummy@ppp-188-174-148-7.dynamic.mnet-online.de)
[18:40:23] *** Joins: gitgitgit (~gitly@148.252.128.72)
[18:41:45] *** Joins: Reffter (~Reffter@2001:818:dea5:2b00:e477:ae35:3ae8:7acc)
[18:42:39] *** Quits: delvian (~delvian@41.13.198.66) (Quit: Leaving)
[18:43:25] *** Quits: causaui1 (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 256 seconds)
[18:44:50] *** Joins: x88x88x (~cheeg@218.212.160.154)
[18:45:07] *** Quits: gitgitgit (~gitly@148.252.128.72) (Ping timeout: 256 seconds)
[18:45:22] *** Joins: rajkosto (~rajkosto@91-150-115-184.dynamic.isp.telekom.rs)
[18:45:39] *** Joins: FluffyMask (~masque@user/fluffymask)
[18:45:46] *** Joins: trace987 (~trace@ip5f5ad0ee.dynamic.kabel-deutschland.de)
[18:46:17] *** Quits: NyaaTheCat (~CalculusC@pool-71-178-171-140.washdc.fios.verizon.net) (Quit: I have phased into another dimension, see ya later!)
[18:46:43] *** Joins: gitgitgit (~gitly@148.252.128.232)
[18:47:28] *** Joins: x88x88x- (~cheeg@gateway/vpn/pia/x88x88x)
[18:47:35] *** Joins: zebrag (~chris@user/zebrag)
[18:48:14] *** Joins: RasnCain_ (~rasncain@ip174-73-119-77.br.br.cox.net)
[18:48:36] *** Joins: rb100 (~jeff@d27-96-151-97.nap.wideopenwest.com)
[18:49:05] *** Quits: bitrot (~rajkosto@91-150-115-184.dynamic.isp.telekom.rs) (Ping timeout: 256 seconds)
[18:49:39] *** Quits: x88x88x (~cheeg@218.212.160.154) (Ping timeout: 256 seconds)
[18:49:51] *** Joins: luva2 (~luva@45.141.152.44)
[18:50:15] *** Joins: p-i-_ (~Ohmu@mx-ll-223.206.149-59.dynamic.3bb.co.th)
[18:50:28] *** Quits: RasnCain_ (~rasncain@ip174-73-119-77.br.br.cox.net) (Client Quit)
[18:50:44] *** Joins: yotsuba (~yotsuba@109.253.194.31)
[18:50:55] *** Joins: RasnCain_ (~rasncain@ip174-73-119-77.br.br.cox.net)
[18:52:44] *** Quits: kronicmage (user72429@neotame.csclub.uwaterloo.ca) (Quit: WeeChat 3.0.1)
[18:53:05] *** Joins: bomb-on (~bomb-on@194.144.47.113)
[18:53:24] *** Quits: luva (~luva@45.141.152.36) (Ping timeout: 265 seconds)
[18:53:24] *** luva2 is now known as luva
[18:53:40] *** Quits: rajkosto (~rajkosto@91-150-115-184.dynamic.isp.telekom.rs) (Ping timeout: 256 seconds)
[18:53:41] *** Quits: p-i- (~Ohmu@mx-ll-223.206.149-59.dynamic.3bb.co.th) (Ping timeout: 245 seconds)
[18:53:51] *** RasnCain_ is now known as RasnCain
[18:54:10] *** Joins: Xaldafax (~xaldafax@cpe-198-72-160-101.socal.res.rr.com)
[18:54:43] *** Joins: rajkosto (~rajkosto@91-150-115-184.dynamic.isp.telekom.rs)
[18:54:58] *** Quits: Noisytoot (~noisytoot@sourcehut/user/noisytoot) (Read error: Connection reset by peer)
[18:55:09] *** Joins: Elliria (~littlegir@cpe-66-24-84-219.stny.res.rr.com)
[18:55:14] *** Quits: rajkosto (~rajkosto@91-150-115-184.dynamic.isp.telekom.rs) (Read error: Connection reset by peer)
[18:55:43] *** Quits: rsx (~dummy@ppp-188-174-148-7.dynamic.mnet-online.de) (Quit: rsx)
[18:56:11] *** Quits: rakoon (~rakoon@2001:985:f4c6:1:5cd0:c655:fac8:533f) (Ping timeout: 245 seconds)
[18:56:42] *** Joins: rakoon (~rakoon@2001:985:f4c6:1:64fb:e5e6:23de:97ab)
[18:58:25] *** Joins: Gerula (~Gerula@user/gerula)
[18:59:00] *** Quits: Reffter (~Reffter@2001:818:dea5:2b00:e477:ae35:3ae8:7acc) (Quit: Client closed)
[18:59:20] *** Joins: Reffter (~Reffter@2001:818:dea5:2b00:e477:ae35:3ae8:7acc)
[19:01:38] *** Joins: rajkosto (~rajkosto@91-150-115-184.dynamic.isp.telekom.rs)
[19:02:05] *** Joins: raxor2k (~raxor2k@78.158.245.248)
[19:03:18] *** Joins: NyaaTheCat (~CalculusC@pool-71-178-171-140.washdc.fios.verizon.net)
[19:03:51] *** Quits: mickey8 (~user@user/mickey) (Quit: Ping timeout (120 seconds))
[19:04:06] *** Joins: mickey8 (~user@user/mickey)
[19:04:17] <raxor2k> Someone help me edit this query so i am able to edit row using sqlalchemy? https://bpa.st/FQVA
[19:06:50] *** Joins: pycurious (~Adium@user/pycurious)
[19:08:16] *** Joins: Noisytoot (~noisytoot@sourcehut/user/noisytoot)
[19:10:30] *** Quits: Elliria (~littlegir@cpe-66-24-84-219.stny.res.rr.com) (Quit: *POOF*)
[19:11:15] <cluelessperson> raxor2k, it looks like you're already editing the row, which you have stored in an object named: "machine_to_edit"
[19:11:15] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Ping timeout: 276 seconds)
[19:11:22] <cluelessperson> what's not working?
[19:11:36] *** Quits: pycurious (~Adium@user/pycurious) (Ping timeout: 265 seconds)
[19:12:06] <Ninpo> guessing the lack of update calls after the object is changed
[19:14:01] *** Quits: jay-m126_ (~jay-m@129.0.76.217) (Ping timeout: 256 seconds)
[19:14:17] *** Joins: akk (~akk@75.161.146.115)
[19:14:30] *** Quits: jay-m126 (~jay-m@129.0.76.217) (Ping timeout: 265 seconds)
[19:17:14] *** Quits: NyaaTheCat (~CalculusC@pool-71-178-171-140.washdc.fios.verizon.net) (Quit: I have phased into another dimension, see ya later!)
[19:17:35] *** Quits: rb100 (~jeff@d27-96-151-97.nap.wideopenwest.com) (Quit: leaving)
[19:19:03] *** Joins: guenhael (~Thunderbi@2a01cb008c3d5800018c2bbe0a122bce.ipv6.abo.wanadoo.fr)
[19:19:14] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[19:21:53] *** Joins: monkey_ (~user@190.104.116.153)
[19:22:19] *** Quits: Sadale (~Sadale@user/sadale) (Quit: tawa pona!)
[19:23:28] *** Joins: xardas (~xardas@149.233.51.127)
[19:23:29] *** Joins: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[19:23:48] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[19:24:15] *** Joins: causaui1 (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[19:25:04] *** Joins: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it)
[19:25:20] *** Joins: Sadale (~Sadale@user/sadale)
[19:25:23] *** Quits: rajkosto (~rajkosto@91-150-115-184.dynamic.isp.telekom.rs) (Read error: Connection reset by peer)
[19:26:32] *** Joins: NyaaTheCat (~CalculusC@pool-71-178-171-140.washdc.fios.verizon.net)
[19:28:29] *** Quits: mickey8 (~user@user/mickey) (Quit: Ping timeout (120 seconds))
[19:28:45] *** Joins: mickey8 (~user@user/mickey)
[19:29:19] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[19:29:23] *** Joins: mcglk (~mcglk@131.191.49.120)
[19:30:15] *** Joins: userHeni (~userHeni@bl20-187-88.dsl.telepac.pt)
[19:30:42] *** Quits: userHeni (~userHeni@bl20-187-88.dsl.telepac.pt) (Remote host closed the connection)
[19:30:56] *** Quits: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 265 seconds)
[19:31:36] *** Joins: sammie (~sammie@remote.sps.edu)
[19:31:36] *** Quits: elkalamar_ (elkalamar@gateway/vpn/airvpn/elkalamar) (Ping timeout: 245 seconds)
[19:33:28] *** Joins: elkalamar (~elkalamar@81.203.68.150.dyn.user.ono.com)
[19:33:33] *** Quits: causaui1 (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 268 seconds)
[19:35:33] *** Quits: domhnall (~developer@user/domhnall/x-2887755) (Ping timeout: 256 seconds)
[19:37:19] *** Joins: cthulchu (~Cthulchu@69-172-160-196.cable.teksavvy.com)
[19:37:29] *** Joins: elkalamar_ (~elkalamar@81.203.68.150.dyn.user.ono.com)
[19:37:52] *** Quits: cthulchu (~Cthulchu@69-172-160-196.cable.teksavvy.com) (Read error: Connection reset by peer)
[19:38:08] *** Joins: cthulchu (~Cthulchu@69-172-160-196.cable.teksavvy.com)
[19:38:43] *** Joins: delvian (~delvian@41.13.198.66)
[19:39:34] *** Quits: elkalamar (~elkalamar@81.203.68.150.dyn.user.ono.com) (Ping timeout: 256 seconds)
[19:40:18] *** Joins: slowButPresent (~slowButPr@user/slowbutpresent)
[19:42:08] *** Joins: cdown_ (~cdown@163.114.131.1)
[19:42:23] *** Quits: Viewday11 (~Viewday@user/viewday) (Read error: Connection reset by peer)
[19:42:30] *** Joins: pycurious (~Adium@user/pycurious)
[19:43:02] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[19:43:02] *** Quits: NyaaTheCat (~CalculusC@pool-71-178-171-140.washdc.fios.verizon.net) (Quit: I have phased into another dimension, see ya later!)
[19:44:08] *** Joins: rolo (~rolo@2a02:8108:8d80:7aa4:3fc3:db4d:f740:3834)
[19:44:26] *** Joins: Viewday11 (~Viewday@user/viewday)
[19:44:42] *** Quits: Sadale (~Sadale@user/sadale) (Quit: tawa pona!)
[19:44:42] *** Quits: ckdCreations (~ckdCreati@147.55.130.36) (Read error: Connection reset by peer)
[19:44:44] <raxor2k> cluelessperson: i can not see any changes in the DB after that function is performed
[19:45:11] *** Quits: cdown (~cdown@89.32.122.5) (Ping timeout: 256 seconds)
[19:45:21] *** cdown_ is now known as cdown
[19:45:58] *** Joins: Sadale (~Sadale@user/sadale)
[19:46:08] *** Quits: magla (~gelignite@55d4f645.access.ecotel.net) (Quit: Stay safe!)
[19:46:38] *** Joins: magla (~gelignite@55d4f645.access.ecotel.net)
[19:48:01] *** Quits: gitgitgit (~gitly@148.252.128.232) (Ping timeout: 256 seconds)
[19:48:35] *** Quits: elkalamar_ (~elkalamar@81.203.68.150.dyn.user.ono.com) (Ping timeout: 256 seconds)
[19:48:35] <cluelessperson> raxor2k, as the other user said, you probably need to do session.update(obj)
[19:48:39] <Ninpo> raxor2k: you're not running any updates...
[19:48:48] <cluelessperson> :)
[19:49:15] <Ninpo> imagine instead you read lines from a file. If you change the line object in python, the file doesn't magically change without a write
[19:49:18] *** Quits: Reffter (~Reffter@2001:818:dea5:2b00:e477:ae35:3ae8:7acc) (Quit: Client closed)
[19:50:02] *** Joins: ckdCreations (~ckdCreati@147.55.133.131)
[19:50:07] *** Joins: gitgitgit (~gitly@85.255.237.194)
[19:50:25] *** Joins: medium_cool (~medium_co@2605:a601:a9aa:f800:9c7d:c861:5a1f:2808)
[19:50:51] *** Joins: Barones (~Barones@2804:7f3:8987:f411:5040:de15:a6e:73ee)
[19:52:54] *** Quits: delvian (~delvian@41.13.198.66) (Read error: Connection reset by peer)
[19:53:28] *** Joins: Julian (~tos9@python/site-packages/Julian)
[19:54:56] *** Quits: rakoon (~rakoon@2001:985:f4c6:1:64fb:e5e6:23de:97ab) (Ping timeout: 245 seconds)
[19:56:11] *** Joins: greedom (~greedom@p200300de67375500888e7d1fc2c7a325.dip0.t-ipconnect.de)
[19:57:42] *** Quits: trace987 (~trace@ip5f5ad0ee.dynamic.kabel-deutschland.de) (Ping timeout: 256 seconds)
[19:57:49] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Quit: My MacBook has gone to sleep. ZZZzzz‚Ä¶)
[19:58:16] *** Joins: trace987 (~trace@ip5f5ad0ee.dynamic.kabel-deutschland.de)
[19:58:29] *** Quits: cheater (~Username@user/cheater) (Ping timeout: 265 seconds)
[20:00:06] *** Joins: elkalamar (elkalamar@gateway/vpn/airvpn/elkalamar)
[20:00:39] <raxor2k> ninpo: so i like this:   await session.flush()   await session.update(machine_to_edit) await session.commit()
[20:00:41] <raxor2k> in that order, right?
[20:01:31] <raxor2k> or "await session.update(machine_to_edit)" first, and then flush and then commit?
[20:02:07] *** Quits: monkey_ (~user@190.104.116.153) (Remote host closed the connection)
[20:02:31] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[20:03:47] *** Joins: nomic (~nomic@185.217.117.132)
[20:04:57] *** Joins: cheater (~Username@user/cheater)
[20:05:15] *** Quits: x88x88x- (~cheeg@gateway/vpn/pia/x88x88x) (Ping timeout: 265 seconds)
[20:06:18] *** Quits: EgonX (~EgonX@2601:2c6:47f:879e:8054:dbbd:cb01:2aa3) (Quit: Textual IRC Client: www.textualapp.com)
[20:06:19] <raxor2k> ninpo: i tried all 3 combinations, still no changes in the db..
[20:06:40] <raxor2k> "'AsyncSession' object has no attribute 'update'
[20:07:40] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 265 seconds)
[20:08:38] *** Quits: vakera_pingveno (~dan@107-209-165-75.lightspeed.hstntx.sbcglobal.net) (Ping timeout: 265 seconds)
[20:09:27] *** Joins: penguino (~mrpenguin@user/mrpenguin)
[20:10:05] *** Quits: elkalamar (elkalamar@gateway/vpn/airvpn/elkalamar) (Ping timeout: 265 seconds)
[20:12:18] *** fling is now known as bedroller
[20:13:08] *** Joins: EgonX (~EgonX@c-73-115-70-244.hsd1.tx.comcast.net)
[20:13:12] *** Joins: rama (~rama@c-24-130-92-222.hsd1.ca.comcast.net)
[20:13:59] *** bedroller is now known as fling
[20:15:31] *** Quits: Vonter (~Vonter@user/vonter) (Quit: WeeChat 3.3)
[20:16:17] *** Joins: mrcrypto (uid521271@id-521271.helmsley.irccloud.com)
[20:16:41] *** Joins: vakera_pingveno (~dan@107-209-165-75.lightspeed.hstntx.sbcglobal.net)
[20:19:25] *** Quits: guenhael (~Thunderbi@2a01cb008c3d5800018c2bbe0a122bce.ipv6.abo.wanadoo.fr) (Quit: guenhael)
[20:19:44] *** Joins: guenhael (Thunderbir@gateway/vpn/protonvpn/guenhael)
[20:20:43] *** Quits: rama (~rama@c-24-130-92-222.hsd1.ca.comcast.net) (Ping timeout: 265 seconds)
[20:21:50] <bjs> raxor2k: I'm confused, how many rows does your select return?
[20:22:03] <raxor2k> bjs: only 1 ?
[20:22:13] <bjs> raxor2k: but it's a where(), there could be many rows no?
[20:22:19] <bjs> raxor2k: what type is machine_to_edit  ?
[20:22:54] <raxor2k> bjs: where(models.WorkoutMachines.machine_ID == 33)  selects the machine with ID 33
[20:23:08] <bjs> raxor2k: selects all rows where the machine_ID column is 33 *
[20:23:19] <bjs> which may or may not be a single row,  what type is machine_to_edit  anyway?
[20:24:27] <raxor2k> bjs: type is : <class 'sqlalchemy.engine.result.ChunkedIteratorResult'>
[20:24:44] <raxor2k> print(type(machine_to_edit)) -- > <class 'sqlalchemy.engine.result.ChunkedIteratorResult'>
[20:24:57] *** Quits: thurs80601421 (~thurs@ip68-225-209-147.ph.ph.cox.net) (Quit: The Lounge - https://thelounge.chat)
[20:25:02] <bjs> raxor2k: that implies it's some kind of iterator of rows no?
[20:25:14] <bjs> and not a single WorkOutMachines
[20:25:24] <raxor2k> ooooooooook
[20:25:26] <raxor2k> there you said it
[20:25:29] <raxor2k> i think i know where it is
[20:25:47] <raxor2k> or maybe not
[20:25:55] <bjs> raxor2k: what do the sqlalchemy tutorials/documentation do for updating an ORM thingy like that?
[20:26:24] <raxor2k> bjs: as i complained with one guy some days ago: sqlalchemy tutorials are completely different for page by page
[20:26:30] <bjs> ah here https://docs.sqlalchemy.org/en/14/tutorial/orm_data_manipulation.html#updating-orm-objects
[20:26:35] *** Quits: akk (~akk@75.161.146.115) (Ping timeout: 268 seconds)
[20:26:38] <bjs> well yes each page will have something different on it? I don't understand the complaint
[20:26:45] <Ninpo> lol
[20:27:42] <bjs> so if you update an ORM object then the next flush will emit an UPDATE statement,  and then that update will be committed on the commit()
[20:28:09] <bjs> that page uses .scalar_one() to extract the one object from the iterator,  maybe you should do that raxor2k ?
[20:28:27] <raxor2k> bjs: i will try now
[20:29:02] *** Quits: tWqaq (~tWqaq@240e:389:5dd3:9000:79d4:44c6:3599:48) (Ping timeout: 260 seconds)
[20:31:15] *** Quits: vakera_pingveno (~dan@107-209-165-75.lightspeed.hstntx.sbcglobal.net) (Quit: Konversation terminated!)
[20:31:42] <raxor2k> bjs: .scalars.one() did not works but ".scalars()" did.. aaaand another example of a bad documentation
[20:31:46] <raxor2k> here is what i did: https://bpa.st/RQVQ
[20:31:48] <raxor2k> thanks bjs <3
[20:31:56] *** Quits: Barones (~Barones@2804:7f3:8987:f411:5040:de15:a6e:73ee) (Remote host closed the connection)
[20:32:06] <Ninpo> they didn't say .scalars.one
[20:32:30] *** Quits: penguino (~mrpenguin@user/mrpenguin) (Ping timeout: 276 seconds)
[20:32:32] <bjs> raxor2k: did you even read my comment or the page I linked? ;s
[20:32:50] <bjs> sorry
[20:32:55] *** Joins: damxsa (~damx@2001:16a2:cc46:e600:cd17:6bf3:a5a4:8bdc)
[20:33:00] *** Quits: moto (~moto@user/moto) (Read error: Connection reset by peer)
[20:33:10] *** Joins: moto (~moto@user/moto)
[20:33:17] *** Quits: tf_ (~tf@user/tf) (Quit: tf_)
[20:33:17] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 265 seconds)
[20:33:25] *** Joins: dohtem (uid524096@user/dohtem)
[20:33:31] *** Joins: tf (~tf@user/tf)
[20:33:47] <raxor2k> bjs ninpo: eeh yes. the link that bjs shared you can see "scalar.one()" being used: https://docs.sqlalchemy.org/en/14/tutorial/orm_data_manipulation.html#updating-orm-objects
[20:33:47] <raxor2k> :)
[20:33:58] *** Quits: Andrynet (~Andrynet@190.152.210.157) (Ping timeout: 256 seconds)
[20:34:11] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[20:34:12] <bjs> raxor2k: the text "scalar.one" does not appear on that link to me?
[20:34:12] <Ninpo> session.execute(select(User).filter_by(name="sandy")).scalar_one() literally the first example
[20:34:29] <bjs> Ninpo: yeah that's what I see too
[20:34:55] *** Joins: fikran (~fikran@user/fikran)
[20:36:03] *** Joins: Andrynet (~Andrynet@190.152.210.157)
[20:37:25] *** Quits: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it) (Quit: Leaving.)
[20:37:48] *** Quits: ph88 (~ph88@2a02:8109:9e00:71d0:cdf3:eec1:2823:7459) (Quit: Leaving)
[20:38:36] *** Quits: Julian (~tos9@python/site-packages/Julian) (Ping timeout: 265 seconds)
[20:39:00] *** Joins: j1mu5 (~j1mu5@user/j1mu5)
[20:39:11] <raxor2k> bjs: you see it or you dont see it?
[20:39:19] <raxor2k> sandy = session.execute(select(User).filter_by(name="sandy")).scalar_one()
[20:39:28] *** Joins: tWqaq (~tWqaq@240e:389:5dd3:9000:79d4:44c6:3599:48)
[20:39:41] <bjs> raxor2k: I do not see ".scalar.one()" anywhere or ".scalars.one()"  but I do see ".scalar_one()"
[20:39:47] <bjs> so I don't know where you got the other two from
[20:40:09] *** Joins: Julian (~tos9@python/site-packages/Julian)
[20:40:35] *** Quits: j1mu5 (~j1mu5@user/j1mu5) (Remote host closed the connection)
[20:41:42] *** Joins: Trieste (~T@user/pilgrim)
[20:42:04] *** Quits: tWqaq (~tWqaq@240e:389:5dd3:9000:79d4:44c6:3599:48) (Remote host closed the connection)
[20:42:43] <raxor2k> ok but my point is still: there are multiple documentation around, and only one of them are properly made. why is that ?
[20:42:49] <Ninpo> execute(select(models.WorkOutMachines).filter_by(machine_ID=machine_id)).scalar_one()
[20:43:04] <bjs> I don't know, I just linked the first I found on the sqlalchemy website
[20:43:20] <Ninpo> are you talking about differences between core and ORM or different SQLAlchemy versions
[20:43:26] *** Quits: Andrynet (~Andrynet@190.152.210.157) (Ping timeout: 265 seconds)
[20:43:26] <Ninpo> because otherwise I don't understand the complaint
[20:44:26] <grym> i'm trying to wrap my head around lxml and html parsing and etree stuff.  I'd love to have a tool kind of like regex101 but for xpath, where i could build up a query and see it applied on a document in sync.  lxml reprs are ... not useful
[20:44:31] <grym> does such a tool exist?
[20:45:15] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 256 seconds)
[20:45:24] *** Joins: Andrynet (~Andrynet@190.152.210.157)
[20:45:32] *** Quits: Julian (~tos9@python/site-packages/Julian) (Ping timeout: 240 seconds)
[20:46:41] *** Joins: drdesquire_ (~drlp@2601:4c0:4180:3750:a71d:815c:bb15:7d29)
[20:46:51] <The-Compiler> grym: not exactly what you are looking for, but I think I used https://chrome.google.com/webstore/detail/xpath-helper/hgimnogjllphhhkhlmebbmlgjoejdpjl?hl=en in the past
[20:47:03] *** Joins: Trieste_ (T@user/pilgrim)
[20:47:16] *** Joins: fikran (~fikran@user/fikran)
[20:48:10] <grym> The-Compiler: is there a firefox equivalent?
[20:48:16] *** Quits: Trieste (~T@user/pilgrim) (Ping timeout: 265 seconds)
[20:48:24] <grym> that's close though
[20:48:28] <The-Compiler> grym: I don't know
[20:48:47] <grym> looks like there are a few
[20:48:53] <grym> this might work
[20:48:53] *** Joins: Lando-SpaceIzzle (~Lando-Spa@user/lando-spacepimp)
[20:48:55] <The-Compiler> yeah, https://addons.mozilla.org/en-US/firefox/search/?q=xpath
[20:49:09] *** Joins: vakera_pingveno (~dan@107-209-165-75.lightspeed.hstntx.sbcglobal.net)
[20:49:30] <The-Compiler> actually https://addons.mozilla.org/en-US/firefox/addon/try-xpath/ sounds pretty close to what you described
[20:50:00] *** Quits: Inline (~Inline@2a02:908:1252:7a80::1) (Ping timeout: 268 seconds)
[20:50:36] *** Quits: RasnCain (~rasncain@ip174-73-119-77.br.br.cox.net) (Remote host closed the connection)
[20:53:34] *** Quits: nomic (~nomic@185.217.117.132) (Quit: Leaving)
[20:53:52] *** Joins: nomic (~nomic@185.217.117.132)
[20:54:04] *** Quits: Trieste_ (T@user/pilgrim) (Ping timeout: 265 seconds)
[20:54:13] *** Joins: Trieste (T@user/pilgrim)
[20:55:06] *** Quits: noord (~noord@user/noord) (Quit: WeeChat 3.3)
[20:55:41] *** Joins: rajkosto (~rajkosto@91-150-115-184.dynamic.isp.telekom.rs)
[20:57:12] *** Quits: kdc (~kdc@196.211.197.159) (Quit: Leaving)
[20:57:26] *** Joins: trampel (~trampel@2601:602:9c00:921:374f:879a:3d1:4894)
[20:58:20] *** Joins: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it)
[20:58:54] *** Quits: Andrynet (~Andrynet@190.152.210.157) (Ping timeout: 265 seconds)
[20:59:34] *** Joins: causaui1 (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[21:00:53] *** Joins: Andrynet (~Andrynet@190.152.210.157)
[21:03:41] *** Quits: causaui1 (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 245 seconds)
[21:04:11] *** Joins: causaui1 (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[21:04:35] *** Quits: koziad (~koz@user/koziad/x-1285628) (Quit: The Lounge - https://thelounge.chat)
[21:06:08] *** Joins: Julian (~tos9@python/site-packages/Julian)
[21:06:44] *** Joins: interweb (~interweb@user/interweb)
[21:08:02] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 240 seconds)
[21:09:21] *** Joins: RangerBobVA (~bmaddox@user/rangerbobva)
[21:10:32] *** Joins: RasnCain (~rasncain@ip174-73-119-77.br.br.cox.net)
[21:12:39] *** Quits: rindolf (~shlomif@2a0d:6fc2:4bb1:500:6b1e:2524:3d70:36ec) (Read error: Connection reset by peer)
[21:13:03] *** Joins: rindolf (~shlomif@2a0d:6fc2:4bb1:500:6b1e:2524:3d70:36ec)
[21:13:19] *** Quits: RasnCain (~rasncain@ip174-73-119-77.br.br.cox.net) (Remote host closed the connection)
[21:13:33] *** Joins: mat001 (~mat001@c-71-202-208-251.hsd1.ca.comcast.net)
[21:13:36] *** Quits: causaui1 (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 260 seconds)
[21:13:47] *** Joins: jim (~jim@about/linux/staff/jim)
[21:13:51] *** Joins: RasnCain (~rasncain@ip174-73-119-77.br.br.cox.net)
[21:14:07] *** Joins: luigibu (~luigi@80.30.201.209)
[21:14:10] *** Joins: causaui1 (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[21:15:01] *** strungout is now known as suffer
[21:16:54] *** Joins: sudomann (~sudomann@c-73-133-131-19.hsd1.md.comcast.net)
[21:17:33] *** Quits: Andrynet (~Andrynet@190.152.210.157) (Ping timeout: 256 seconds)
[21:18:07] *** Quits: yotsuba (~yotsuba@109.253.194.31) (Ping timeout: 256 seconds)
[21:18:27] *** Quits: Lando-SpaceIzzle (~Lando-Spa@user/lando-spacepimp) (Read error: Connection reset by peer)
[21:18:28] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[21:18:41] *** Quits: causaui1 (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 256 seconds)
[21:18:42] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Client Quit)
[21:19:10] *** Joins: causaui1 (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[21:19:12] *** Quits: greedom (~greedom@p200300de67375500888e7d1fc2c7a325.dip0.t-ipconnect.de) (Remote host closed the connection)
[21:19:18] *** Joins: Andrynet (~Andrynet@190.152.210.157)
[21:19:31] *** Quits: drdesquire_ (~drlp@2601:4c0:4180:3750:a71d:815c:bb15:7d29) (Quit: Xi no likey!)
[21:20:00] *** Quits: pycurious (~Adium@user/pycurious) (Quit: Leaving.)
[21:20:25] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[21:20:26] *** Quits: medium_cool (~medium_co@2605:a601:a9aa:f800:9c7d:c861:5a1f:2808) (Quit: My Mac Mini has gone to sleep. ZZZzzz‚Ä¶)
[21:20:56] *** Joins: guenhael1 (~Thunderbi@2a01cb008c3d5800018c2bbe0a122bce.ipv6.abo.wanadoo.fr)
[21:20:57] *** Quits: jim (~jim@about/linux/staff/jim) (Ping timeout: 256 seconds)
[21:21:00] *** Quits: guenhael (Thunderbir@gateway/vpn/protonvpn/guenhael) (Ping timeout: 256 seconds)
[21:21:00] *** guenhael1 is now known as guenhael
[21:21:34] *** Quits: sudomann (~sudomann@c-73-133-131-19.hsd1.md.comcast.net) (Ping timeout: 256 seconds)
[21:23:11] <gitesh> What is a value in short?
[21:24:06] <bjs> gitesh: by now you know, there are no hard rules and definitions. A value is a "thing"
[21:24:23] <bjs> in Python all things are objects (where in Python, an "object" is an instance of a class)
[21:26:04] <Swayze> it irks me when questions are asked (and answered) without sufficient context in the academic sphere
[21:27:17] <Swayze> was helping some youth do 'programming assignments' and noticed stuff like what gitesh asked
[21:27:30] *** Joins: powftw (uid448161@id-448161.lymington.irccloud.com)
[21:27:41] <Swayze> the multiple choice answers were equally vague
[21:28:04] *** Joins: lionslicer (~lionslice@2804:d41:a7a6:1300:441d:cdb1:6bdf:37c6)
[21:28:22] <queue-> wuts the best speech recognition lib for python
[21:28:23] *** Quits: causaui1 (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 265 seconds)
[21:29:13] <Swayze> https://realpython.com/python-speech-recognition/
[21:29:31] <queue-> ty Swayze
[21:32:16] *** Joins: vd (~vd@bras-base-mtrlpq2848w-grc-41-70-53-240-121.dsl.bell.ca)
[21:32:30] *** Joins: yotsuba (~yotsuba@93-172-241-53.bb.netvision.net.il)
[21:32:34] *** Joins: Betal (~Betal@user/betal)
[21:32:37] *** Quits: luigibu (~luigi@80.30.201.209) (Quit: WeeChat 3.3)
[21:32:55] *** Joins: Algernon69 (~Algernon6@80.214.118.147)
[21:33:49] <Swayze> yw queue-
[21:34:15] *** Joins: monkey_ (~user@190.104.116.153)
[21:35:59] *** Quits: Trieste (T@user/pilgrim) (Remote host closed the connection)
[21:36:15] *** Quits: trace987 (~trace@ip5f5ad0ee.dynamic.kabel-deutschland.de) (Ping timeout: 256 seconds)
[21:36:18] *** Joins: Barones (~Barones@2804:7f3:8987:f411:a07d:f577:2eaa:7c3a)
[21:36:18] <gitesh> bjs: I think a value can be made of only what is available on the keyboard
[21:36:23] <gitesh> Is that true?
[21:36:56] <nedbat> gitesh: these are values: ints, bools, strings, tuples, dicts, lists, objects made by defined classes, etc, etc.
[21:36:56] <gitesh> So all things are made up of integers, floats and strings?
[21:37:07] <nedbat> gitesh: anything that can be on the right-hand side of an assignment is a value.
[21:37:12] <gitesh> nedbat: oh thanks
[21:38:03] *** Quits: Andrynet (~Andrynet@190.152.210.157) (Ping timeout: 265 seconds)
[21:39:16] *** Joins: Trieste (~T@user/pilgrim)
[21:39:41] *** Joins: Andrynet (~Andrynet@190.152.210.157)
[21:40:38] *** Joins: pycurious (~Adium@user/pycurious)
[21:40:46] *** Quits: pycurious (~Adium@user/pycurious) (Client Quit)
[21:40:50] *** Quits: Algernon69 (~Algernon6@80.214.118.147) (Quit: Connection closed)
[21:41:03] *** Joins: trace987 (~trace@ip5f5ad0ee.dynamic.kabel-deutschland.de)
[21:42:32] *** Quits: p-i-_ (~Ohmu@mx-ll-223.206.149-59.dynamic.3bb.co.th) (Remote host closed the connection)
[21:42:35] *** Quits: the_lanetly_052 (~the_lanet@194.135.154.78) (Ping timeout: 250 seconds)
[21:43:09] *** Joins: Trieste_ (T@user/pilgrim)
[21:43:37] *** Quits: Trieste (~T@user/pilgrim) (Ping timeout: 256 seconds)
[21:44:17] *** Joins: Algernon69 (~Algernon6@2a04:cec0:11d8:d959:c93d:9f3e:f0b5:db46)
[21:44:50] *** Quits: interweb (~interweb@user/interweb) (Quit: Leaving)
[21:45:53] *** Joins: diverdude (~user@176-21-102-230-cable.dk.customer.tdc.net)
[21:45:58] <diverdude> Isnt there a shorter way to write: `round(0 if getattr(self.stage,'center_northing_corr',0) is None else getattr(self.stage,'center_northing_corr',0),2)`? In `C#` they have the `??` operator to shorten this type of expressions... Does python not have anything similar?
[21:46:32] *** Trieste_ is now known as Trieste
[21:47:14] *** Quits: cheater (~Username@user/cheater) (Ping timeout: 265 seconds)
[21:47:23] *** Joins: cheater (~Username@user/cheater)
[21:48:12] *** Joins: runlevel_0 (~nyarlatho@user/runlevel-0/x-6929182)
[21:48:15] *** Joins: junebug (~junebug@104-0-169-217.lightspeed.miamfl.sbcglobal.net)
[21:48:56] <lionslicer> can someone help me? I'm trying to create a list comprised of 16 elements using a function. Then I want to create a new list comprised of the previous one, but its order is changed so that the last 8 elements are the first elements in the new list. E.g.: first list[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16], new list [8, 9, 10, 11, 12, 13, 14, 15, 16, 1, 2, 3, 4, 5, 6, 7, 8]]]
[21:49:01] *** Quits: trampel (~trampel@2601:602:9c00:921:374f:879a:3d1:4894) (Quit: Leaving)
[21:49:11] <lionslicer> this is what I've done so far: https://bpa.st/OPJA
[21:50:28] <lionslicer> the second function is supposed to change the order of the list by creating a new one, but I'm not sure how to do it
[21:51:08] <yitz> new = old[8:] + old[:8]
[21:51:38] *** Joins: interweb (~interweb@user/interweb)
[21:52:17] *** Quits: RasnCain (~rasncain@ip174-73-119-77.br.br.cox.net) (Read error: Connection reset by peer)
[21:53:44] <lionslicer> yitz, thanks, mate
[21:53:59] <lionslicer> just wondering, does this work on other languages?
[21:54:03] <lionslicer> like c, for instance
[21:55:27] *** Quits: Andrynet (~Andrynet@190.152.210.157) (Ping timeout: 265 seconds)
[21:56:44] *** Joins: RasnCain (~rasncain@ip174-73-119-77.br.br.cox.net)
[21:57:15] *** Joins: Andrynet (~Andrynet@190.152.210.157)
[21:58:19] *** Joins: djapo (~archangel@user/djapo)
[22:01:15] *** Quits: Telvana (~capo@user/telvana) (Quit: ZNC 1.9.x-git-156-ac57c0e5 - https://znc.in)
[22:01:29] <yitz> lionslicer: Ask the C channel :)
[22:02:02] <yitz> It's called list slicing
[22:02:29] *** Joins: tracey (~trace@dynamic-002-247-249-116.2.247.pool.telefonica.de)
[22:02:59] *** Joins: Deedee (~Deedee@2601:600:877f:ae0f:586d:703a:264b:761c)
[22:03:28] *** Joins: elwoodpd (~elwoodpd@host-92-8-65-11.as13285.net)
[22:03:41] <Deedee> Hello. Perhaps a trivial question, but given two variables of same class, why is the inequality false? Both the hash() and the id() of the two variables are different by they implement the same class (imported from the same module)
[22:03:42] <Deedee> >>> my_timetable
[22:03:42] <Deedee> <class 'workday.AfterWorkdayTimetable'>
[22:03:43] <Deedee> >>> repr(my_timetable)
[22:03:43] <Deedee> "<class 'workday.AfterWorkdayTimetable'>"
[22:03:44] <Deedee> >>> repr(timetable_class)
[22:03:44] *** litharge sets mode: +q $a:Deedee
[22:03:53] <jinsun> diverdude: there is pep for ?? but not accepted yet https://www.python.org/dev/peps/pep-0505/
[22:04:12] <jinsun> Deedee: don't paste here, use bpa.st
[22:04:15] *** litharge sets mode: -q $a:Deedee
[22:04:26] <elwoodpd> if I want to make an async generator for a dict wait on any potential updates to the dict how do I do that?
[22:04:34] *** Joins: givemeyourpies (~givemeyou@c-66-235-2-202.sea.wa.customer.broadstripe.net)
[22:05:07] *** Quits: trace987 (~trace@ip5f5ad0ee.dynamic.kabel-deutschland.de) (Ping timeout: 265 seconds)
[22:05:15] *** Quits: rindolf (~shlomif@2a0d:6fc2:4bb1:500:6b1e:2524:3d70:36ec) (Ping timeout: 268 seconds)
[22:05:37] *** Quits: NeoCore (~neocore@195.200.221.100) (Quit: Leaving)
[22:05:46] *** Joins: whaley (~whaley@2603-6080-a312-c426-118b-2d83-981e-afbe.res6.spectrum.com)
[22:05:49] <Deedee> Sorry for pasting the code in the channel. The link to it: https://bpa.st/P54A
[22:06:02] *** Joins: medium_cool (~medium_co@2605:a601:a9aa:f800:588f:a4c6:4dc6:4091)
[22:09:51] <jinsun> Deedee: did you define `__eq__` for your class? the default eq for object gives true only if they are literally the same object (x is y)
[22:09:53] *** Quits: interweb (~interweb@user/interweb) (Quit: Leaving)
[22:11:11] <jinsun> you may want to use dataclass to get `__eq__` automatically defined for you
[22:11:55] *** Quits: whaley (~whaley@2603-6080-a312-c426-118b-2d83-981e-afbe.res6.spectrum.com) (Quit: It won't give up.  It wants me dead.  Goddamn this noise inside my head.)
[22:11:55] *** Joins: Telvana (~capo@user/telvana)
[22:12:51] <Deedee> Since the `__eq__` is not defined, should I check for instanceof equality?
[22:13:09] <bjs> Deedee: what are you trying to check with the == ?
[22:15:06] <diverdude> jinsun: geeez created 6 years ago and still not acccepted :( whats up w. that
[22:16:04] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[22:16:35] <Deedee> bjs I have two variables of same class. I want to verify that they are throught equality
[22:16:44] *** Joins: sudomann (~sudomann@2601:155:8402:4960:b845:8dae:1b6a:9b76)
[22:16:55] <bjs> Deedee: well you have to decide exactly what "equality" means for your class
[22:17:06] *** Quits: mat001 (~mat001@c-71-202-208-251.hsd1.ca.comcast.net) (Ping timeout: 256 seconds)
[22:17:11] <bjs> (by writing an __eq__)
[22:17:56] <jinsun> diverdude: well in many cases you don't need it, you can create a temp variable in your case to shorted it, or just make it impossible to have None as the value
[22:18:19] <Deedee> bjs¬† if two variables are of same class I want to have them equal when compared, say through my_timetable == timetable_class
[22:19:17] <bjs> Deedee: I'm still a little confused, what are you trying to do?  It's kind of weird to ask if they're the same class...
[22:19:25] *** Quits: sammie (~sammie@remote.sps.edu) (Quit: WeeChat 3.0.1)
[22:19:26] <bjs> What else might they be?
[22:19:37] *** Quits: carl--- (~carl-@c-138ee555.02-180-73746f39.bbcust.telenor.se) (Ping timeout: 265 seconds)
[22:19:47] <jinsun> diverdude: oh you can also do `round(getattr(self.stage,'center_northing_corr',0) or 0, 2)
[22:20:30] *** Joins: Midjak (~Midjak@may53-1-78-226-116-92.fbx.proxad.net)
[22:23:10] *** Joins: Inline (~Inline@aftr-37-201-240-2.unity-media.net)
[22:23:58] *** Joins: p-i- (~Ohmu@223.206.149.59)
[22:24:25] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[22:24:46] *** Quits: de-facto (~de-facto@user/de-facto) (Remote host closed the connection)
[22:24:56] <Deedee> bjs well two variables can be of different class. In this example I want to check if they belong to same class.
[22:24:58] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Client Quit)
[22:25:07] *** Joins: de-facto (~de-facto@user/de-facto)
[22:25:14] *** Quits: djapo (~archangel@user/djapo) (Ping timeout: 260 seconds)
[22:25:20] <bjs> Deedee: well you can ask `if type(var1) is type(var2): ...`
[22:25:37] <bjs> but I've never seen anyone need this line of code before, so it's a bit weird :)
[22:25:48] *** Quits: rajkosto (~rajkosto@91-150-115-184.dynamic.isp.telekom.rs) (Read error: Connection reset by peer)
[22:26:09] <bjs> it's fairly unusual to end up in a situation where you don't know what types the variables are... but the types matter
[22:27:12] <bjs> Deedee: you can also just more directly ask `if isinstance(var1, workday.AfterWorkdayTimetable): ...` to ask if var1 belongs to the AfterWorkdayTimetable class
[22:27:17] <bjs> (assuming you've imported workday)
[22:27:37] *** Joins: Pi-sistance (~kvirc@cpc94050-newt37-2-0-cust176.19-3.cable.virginm.net)
[22:28:00] <sudomann> I'm trying to understand how cython works: I see in a setup.py: `from Cython.Build import cythonize` then in a module: `from cython.parallel import prange`
[22:28:02] *** Quits: p-i- (~Ohmu@223.206.149.59) (Ping timeout: 240 seconds)
[22:28:07] <sudomann> why are there different cases
[22:28:31] <Pi-sistance> what rules does poython use when choosing how many print commands to print? Sometimes it will only print the last command, sometimes not.
[22:28:45] <bjs> Pi-sistance: what?
[22:28:46] *** Joins: ThreeOfLife (~ThreeOfLi@108.red-83-58-131.dynamicip.rima-tde.net)
[22:29:02] <Pi-sistance> I will guess that if I use the same function with different inputs it will only print the last inputs , right?
[22:29:19] <bjs> Pi-sistance: I'm confused, Python is sometimes not printing your print() commands?
[22:29:41] <hexnewbie> Pi-sistance: Output buffering issue with non-terminal output?
[22:29:42] *** Joins: esro (~esro@nat1.krakowskiinternet.pl)
[22:31:09] *** Parts: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it) ()
[22:31:12] <Pi-sistance> im using jupyter notebooks. Yes most times if I use print several times in a cell, it will only print the last command, I thought thuis was normal until I encountered examples of it not being so recently
[22:31:18] *** Joins: p-i- (~Ohmu@223.206.149.59)
[22:31:45] <ThreeOfLife> Hi! I am trying to generate an array of random cords like [[0, 1], [1, 0], [-1, 0], [0, -1]], but I am currently stuck at also getting [-1, -1] etc when trying with numpy's randint. Suggestions?
[22:31:54] <jinsun> Pi-sistance: are you actually writing print() or just putting the expression in a line and expecting jupyter to print it automatically
[22:32:23] <Pi-sistance> im finding it hard to type here, most programs (including the irc client)  that have a scroll bar are being auto-scrolled left or up. Am about to reinstall shortly windows
[22:32:53] <Pi-sistance> jinsun yes im putting it in print
[22:33:00] <Pi-sistance> okay I will experiment quickly
[22:33:09] *** Quits: Algernon69 (~Algernon6@2a04:cec0:11d8:d959:c93d:9f3e:f0b5:db46) (Ping timeout: 265 seconds)
[22:36:02] <Pi-sistance> ugh, I cant reproduce the past behaviour, perhaps I thought this was true when i was incorrectly using functions at the start and I conflated them in my head.
[22:36:32] <Pi-sistance> sorry, nvm I guess.
[22:37:30] *** Quits: medium_cool (~medium_co@2605:a601:a9aa:f800:588f:a4c6:4dc6:4091) (Quit: My Mac Mini has gone to sleep. ZZZzzz‚Ä¶)
[22:37:43] *** Quits: damxsa (~damx@2001:16a2:cc46:e600:cd17:6bf3:a5a4:8bdc) (Remote host closed the connection)
[22:38:01] <Julian> ThreeOfLife: Do you mean array or list? And are you looking for just ones with length 1?
[22:38:12] <Julian> ThreeOfLife: Or all non-points?
[22:38:37] <Julian> Either way perhaps what you mean is itertools.permutations({0, 1, -1}, 2), or to pass that into whatever type you're looking for.
[22:40:19] <ThreeOfLife> Julian, I guess List is the correct name for it (not a Python programmer), whatever np.random.randint(-1, [2, 2], (10, 2)) returns, but just without [-1, -1] etc
[22:40:23] *** Joins: damxsa (~damx@2001:16a2:cc46:e600:cd17:6bf3:a5a4:8bdc)
[22:40:43] *** Joins: xkuru (~xkuru@user/xkuru)
[22:41:09] <Julian> ThreeOfLife: numpy returns arrays :), numpy arrays
[22:41:24] <Julian> ThreeOfLife: [[0, 1], [1, 0], [-1, 0], [0, -1]] on the other hand is a list. (A normal Python list)
[22:41:29] <nedbat> ThreeOfLife: maybe you want:  random.choice([(0,1), (0,-1), (1,0), (-1,0)])
[22:42:49] *** Joins: MrBungle (~MrBungle@2604:3d08:1788:dc00:e574:13cf:2f5d:c5fd)
[22:45:06] *** Quits: Haxxa (~Haxxa@202-63-76-96.ip4.superloop.com) (Quit: Haxxa flies away.)
[22:46:20] *** Quits: esro (~esro@nat1.krakowskiinternet.pl) (Read error: Connection reset by peer)
[22:46:24] *** Quits: crabbedhaloablut (~crabbedha@user/crabbedhaloablut) (Ping timeout: 276 seconds)
[22:47:10] *** Joins: Haxxa (~Haxxa@202-63-76-96.ip4.superloop.com)
[22:47:15] *** Joins: esro (~esro@nat1.krakowskiinternet.pl)
[22:47:26] <ThreeOfLife> nedbat, too bad choice only support 1d arrays
[22:47:39] *** Quits: junebug (~junebug@104-0-169-217.lightspeed.miamfl.sbcglobal.net) (Ping timeout: 256 seconds)
[22:48:02] <nedbat> ThreeOfLife: what result do you want? And why is it a numpy array? What will you do with the array?
[22:48:34] <jinsun> sudomann: `from Cython.Build import cythonize` is easy to understand, it is coming from here https://github.com/cython/cython/blob/master/Cython/Build/__init__.py#L1
[22:49:11] <ThreeOfLife> nedbat, I want e.g. [[0, 1], [1, 0], [-1, 0], [0, -1]], I will then add it to another variable (numpy array) to make it randomly move one step on the grid.
[22:50:07] <jinsun> sudomann: the cython.parallel thing is a bit more magic, because parallel is not a module, it comes from here https://github.com/cython/cython/blob/master/Cython/Shadow.py#L516, somehow cython is inserting the class as a module in sys.modules I guess
[22:50:43] <jinsun> ah it is doing that if you scroll down in the same
[22:50:52] <jinsun> file
[22:51:10] <nedbat> ThreeOfLife: ok, and these need to be 1d arrays of pairs, or 2d arrays of pairs?
[22:51:13] *** Joins: akk (~akk@75.161.146.115)
[22:51:20] *** Joins: kyooo (~kyooo@2a02:a31d:a13c:5600:559d:f748:905d:cda9)
[22:51:33] <ThreeOfLife> nedbat, 2d
[22:51:48] <sudomann> why is there cython and Cython? is this normal for a package to name modules like this?
[22:52:25] <jinsun> Cython is the Cython folder and cython is cython.py
[22:52:26] <roxfan> it's to troll Windows people
[22:52:38] <jinsun> it is not normal but possible
[22:52:46] <jinsun> actualyl works in windows too
[22:52:57] <jinsun> s/actualyl/actually
[22:53:17] *** Joins: junebug (~junebug@104-0-169-217.lightspeed.miamfl.sbcglobal.net)
[22:53:47] *** Quits: esro (~esro@nat1.krakowskiinternet.pl) (Read error: No route to host)
[22:53:50] <sudomann> thanks a lot jinsun makes sense
[22:54:31] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 245 seconds)
[22:54:34] *** Joins: causaui1 (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[22:55:07] <raxor2k> is it possible to deactivate the all the info that sqlaclhemy.engine.Engine is printing? its annoying
[22:56:14] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Quit: My MacBook has gone to sleep. ZZZzzz‚Ä¶)
[22:56:17] *** Quits: damxsa (~damx@2001:16a2:cc46:e600:cd17:6bf3:a5a4:8bdc) (Quit: Leaving)
[22:56:18] <Julian> raxor2k: echo=False
[22:56:37] *** Joins: fikran (~fikran@user/fikran)
[22:56:40] *** Quits: kyooo (~kyooo@2a02:a31d:a13c:5600:559d:f748:905d:cda9) (Quit: Leaving)
[22:57:45] <raxor2k> Julian: thank you king
[22:58:15] <Disposeable-Nick> jinsun, you there?
[22:58:30] <jinsun> maybe
[22:58:52] <Disposeable-Nick> The left aligned #comment in the .ini didn't work :(
[22:59:23] *** Joins: pycurious (~Adium@user/pycurious)
[22:59:29] *** Joins: sudomann_ (~sudomann@c-73-133-131-19.hsd1.md.comcast.net)
[22:59:33] <jinsun> what does left-aligned mean? comment before the value?
[22:59:38] <Disposeable-Nick> Yes
[22:59:53] <jinsun> that will obviosly not work because the value will become part of the comment and will be ignored
[23:00:17] <jinsun> just keep the comment in separate line
[23:00:25] <Disposeable-Nick> But it doesn't work on the right either, so where should I add them?
[23:00:28] *** Quits: Payam (~Payam@c83-250-236-236.bredband.tele2.se) (Ping timeout: 260 seconds)
[23:00:28] <Disposeable-Nick> Oh
[23:00:30] <Disposeable-Nick> Own line
[23:00:34] <Disposeable-Nick> Gotcha
[23:00:37] <Disposeable-Nick> Fair enough
[23:02:03] <Pi-sistance> any idea why any screen/program with a scrollbar would start auto scrolling? I restarted the computer, didnt help heh.
[23:02:30] <Disposeable-Nick> Oh, and I attempted to turn IDLE into a .exe, but yeah, failed, jinsun, lol
[23:02:39] <Pi-sistance> need to finish a backup before I reinstall, *sigh
[23:02:40] <Disposeable-Nick> I turned it into one, sure
[23:02:42] <bjs> Pi-sistance: your mouse? :P
[23:02:49] <Disposeable-Nick> But obviously it didn't run as expected
[23:03:28] *** glider_ is now known as glider
[23:03:37] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[23:04:05] *** Quits: sudomann_ (~sudomann@c-73-133-131-19.hsd1.md.comcast.net) (Ping timeout: 265 seconds)
[23:04:14] *** Quits: hays (rootvegeta@fsf/member/hays) (Quit: hays)
[23:04:17] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[23:04:33] *** Joins: hays (rootvegeta@fsf/member/hays)
[23:04:35] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Client Quit)
[23:04:37] *** gitgitgit is now known as gitly
[23:04:48] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[23:04:53] *** Joins: Jigsy (~Jigsy@user/jigsy)
[23:04:58] <gitesh> Treating a function as a thing is a good idea or bad idea?
[23:05:50] <nedbat> gitesh: functions are values, if that is what you mean, and it is a good thing
[23:05:56] <bjs> gitesh: you've been asking essentially the same question repeatedly over many months now,  I'm just a little curious what it is you are looking for in an answer
[23:06:07] <nedbat> gitesh: "good idea or bad idea" sounds like you are deciding on an approach
[23:06:39] *** Joins: driib2 (~driib@185.65.135.234)
[23:06:47] <jinsun> Disposeable-Nick: there is idle.bat in Lib\idlelib inside the python folder, you can associate ini with that
[23:07:10] <gitesh> bjs: I'm looking for a answer so that function will become natural to me than a weird thing or value
[23:07:42] <sazawal> Hi all. I have started a thread and a subprocess with asyncio.to_thread and asyncio.create_subprocess_exec. By mistake I have used queue.Queue() to communicate between the two, and it works suprisingly though I know that queue.Queue objects are not multiprocessing safe. It shouldn't work, or am I making a mistake? Should I use multiprocessing.Queue() to communicate between the two?
[23:07:47] <Disposeable-Nick> jinsun, I attempted to turn that .bat into an exe too, along with the .pyw, lol.  I'll try asscociate witht he .bat in 'Open With...' and see what happens, cheers jinsun
[23:08:27] <jinsun> no need to turn bat to exe, you can choose bat directly in the open with... dialog
[23:08:40] <Disposeable-Nick> Cool
[23:08:47] <bjs> sazawal: a queue.Queue won't work for communicating between processes,  I'm not sure how you managed to get "it works"
[23:09:07] <nedbat> gitesh: are you writing python programs?
[23:09:20] <gitesh> bjs: why not make if else and for loop and all other, other things
[23:09:34] <gitesh> nedbat: no I'm clearing concepts
[23:09:36] *** Quits: gitly (~gitly@85.255.237.194) (Quit: WeeChat 3.3)
[23:09:54] *** Quits: nyah (~nyah@94.6.71.219) (Remote host closed the connection)
[23:10:02] <nedbat> gitesh: my learning style is that writing programs helps me understand best.  maybe you will find that is true for you too
[23:10:12] <sazawal> bjs, Yes I have the experience that it blocks the system. But this time I started the thread and the process from asyncio thread, is it that making a difference?
[23:10:15] *** Joins: driib24 (~driib@185.195.233.158)
[23:10:25] <bjs> sazawal: I'm not sure I understand, a difference compared to what?
[23:10:34] *** Quits: junebug (~junebug@104-0-169-217.lightspeed.miamfl.sbcglobal.net) (Remote host closed the connection)
[23:10:58] *** Joins: junebug (~junebug@104-0-169-217.lightspeed.miamfl.sbcglobal.net)
[23:11:27] <sazawal> bjs, I mean starting a thread and a process from asyncio as opposed to with Thread(...).start() and Process(...).start()
[23:11:29] *** Joins: gitly (~gitly@85.255.237.194)
[23:11:45] <bjs> sazawal: ah, well it means you can `await` them to do things in the asyncio event loop
[23:11:49] <nedbat> gitesh: it's a good question: why isn't a for loop a value?
[23:12:11] <nedbat> gitesh: statements by themselves are not values, but they can be the body of a function, which is a value.
[23:12:36] <Swayze> hey queue- you there?
[23:12:47] *** Quits: driib2 (~driib@185.65.135.234) (Ping timeout: 265 seconds)
[23:12:49] <sazawal> bjs, Yes but what about the communication between the started thread and the process? I suppose I cannot use queue.Queue() object, but it is working somehow
[23:12:53] <bjs> sazawal: really if you were to look inside, all asyncio is doing is doing Thread(...) and Popen(...)but wrapping it up in an asyncio.Future
[23:13:05] <sazawal> bjs, I see
[23:13:10] *** Quits: Deedee (~Deedee@2601:600:877f:ae0f:586d:703a:264b:761c) (Ping timeout: 256 seconds)
[23:13:11] <Swayze> i did a quick dictation program using pysimplegui and SpeechRecognition
[23:13:15] <bjs> sazawal: well your comment about communicating between the process and thread is a bit odd to me, because the subprocess functions dont' let you pass Python objects like queues to the process
[23:13:38] <queue-> did it work out?
[23:13:41] <bjs> only strings (like on the command-line),  the `multiprocessing` module can (with what I can only describe as a hack to make it work)
[23:13:48] <demsh> there is multiprocessing.Queue() for this, queue.Queue() probably works because of fork(), won't work on other platforms without it
[23:14:00] <Disposeable-Nick> jinsun, it worked, but the issue is, when opening the BAT, it of course opens its own Python Shell version of IDLE showing version etc... and also the other instance with the thing you're trying to open.  jinsun, should I clone the .bat, rename 2.bat and edit something in it to hopefully not open two instances of it?
[23:14:10] <Swayze> queue-: yep its working great
[23:14:11] *** Joins: driib2 (~driib@c-94bee655.017-99-73746f1.bbcust.telenor.se)
[23:14:12] <Swayze> u want the source?
[23:14:40] <bjs> sazawal: if you want to communicate between a process and a thread, you want some form of IPC (inter-process-communication),  the `multiprocessing` module has some wrappers that look like Python queues and things (multiprocessing.Queue) but if you use "subprocess" you can't use them (well not easily or directly)
[23:14:45] *** Quits: Julian (~tos9@python/site-packages/Julian) (Quit: leaving)
[23:14:54] <sazawal> bjs, I used a shared object of the common class which contains the functions to be run in the thread and the process
[23:14:58] <queue-> yea i'd like to test it
[23:15:29] <gitesh> nedbat: wow that's a beautiful answer :+)
[23:15:33] *** Joins: withered_wolf (~withered_@2600:1008:b00c:4230:d938:6550:7f13:58eb)
[23:15:45] <jinsun> gitesh: it would be great if loops and if else and try catch and match case all are expression values, there are other languages wherre that is True, but unfortunately python chose to not do it
[23:15:59] *** Quits: driib24 (~driib@185.195.233.158) (Ping timeout: 256 seconds)
[23:16:06] <sazawal> bjs, Oh I cannot use multiprocessing queues for the subprocesses? So how is it done otherwise?
[23:16:08] *** Quits: withered_wolf (~withered_@2600:1008:b00c:4230:d938:6550:7f13:58eb) (Read error: Connection reset by peer)
[23:16:33] *** Quits: Betal (~Betal@user/betal) (Ping timeout: 256 seconds)
[23:16:34] <bjs> sazawal: well, in general there are lots of ways of communicating between processes.  files, sockets, pipes
[23:16:37] <nedbat> jinsun: there's a difference between statements evaluating to values, and statements *being* values.
[23:16:43] <sazawal> bjs, I still don't understand why queue.Queue object is working in this case
[23:16:47] <nedbat> jinsun: in python, functions are both. statements are neither.
[23:16:53] <Swayze> queue-: cool coming
[23:17:12] <bjs> sazawal: I'm not sure what "this case" is, create_subprocess_exec doesn't even *have* a way to pass a queue to the subprocess so I'm 100% confused at what you're describing
[23:17:25] <Swayze> queue-: https://bpa.st/WJMA
[23:17:29] <gitesh> nedbat: so a function is a source code which is a part of larger program
[23:17:36] <queue-> ty, checking it out
[23:17:40] <Swayze> it iwll allow to select input mic, then record, then copy it to the clipboard and output it
[23:18:06] <Disposeable-Nick> Damn, jinsun, also, it doesn't kepp the nice colours that way :(((((((((
[23:18:14] <Disposeable-Nick> keep*
[23:18:38] <jinsun> nedbat: yeah I wanted to say evaluating to values
[23:19:18] *** Quits: vulpes_vulpes (~vulpes_vu@62-64-204-115.dynamic.dial.as9105.com) (Remote host closed the connection)
[23:19:22] <sazawal> bjs, I didn't pass the queue to it. I used the queue object of the class. Well now I also see that the main process and the subprocess cannot have a shared variable like that. I am also confused now
[23:19:37] <bjs> sazawal: maybe you should share the code?
[23:19:41] <bjs> since we're both confused :)
[23:19:51] <sazawal> Lol
[23:19:57] *** Quits: driib2 (~driib@c-94bee655.017-99-73746f1.bbcust.telenor.se) (Ping timeout: 256 seconds)
[23:20:13] <sazawal> bjs, Let me create an example code
[23:20:14] <queue-> sweet swayze, this works perfect
[23:20:45] *** Joins: Betal (~Betal@user/betal)
[23:21:10] *** Joins: rakoon (~rakoon@2001:985:f4c6:1:b0bd:e9f6:4e4f:c71e)
[23:21:34] <jinsun> Disposeable-Nick: okay, no idea how to fix that problem, I would suggest to just switch editors like I said earlier, I use vscode which doesn't have those problems
[23:21:44] *** Joins: penguino (~mrpenguin@user/mrpenguin)
[23:22:25] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Quit: My MacBook has gone to sleep. ZZZzzz‚Ä¶)
[23:22:44] *** Joins: cosimone (~user@93-44-184-115.ip98.fastwebnet.it)
[23:25:29] *** Joins: NyB (~archon@2a02:169:1d9::1:0:0)
[23:25:30] <nedbat> gitesh: i really think writing some programs would help clarify some of these questions
[23:25:58] *** Quits: yotsuba (~yotsuba@93-172-241-53.bb.netvision.net.il) (Remote host closed the connection)
[23:26:04] *** Joins: yotsuba-chan (~yotsuba@93-172-241-53.bb.netvision.net.il)
[23:26:13] <Swayze> queue-: great
[23:26:33] <Swayze> im glad you asked th questions i just learned a whole bunch about speech recog and pysimplegui :p
[23:26:45] *** Joins: minimars (~minimars@81.19.208.103)
[23:27:29] *** Joins: cr0n0s (~quassel@181.66.138.161)
[23:28:15] *** Quits: Jigsy (~Jigsy@user/jigsy) (Ping timeout: 265 seconds)
[23:28:44] *** Quits: minimars (~minimars@81.19.208.103) (Client Quit)
[23:29:01] *** Joins: f33d1 (~m4z3y@2604:2d80:8d83:b400:d20f:84fe:7ced:4b98)
[23:29:39] *** Quits: mrcrypto (uid521271@id-521271.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[23:30:17] *** Quits: cr0n0s (~quassel@181.66.138.161) (Client Quit)
[23:30:45] *** Joins: cr0n0s (~quassel@181.66.138.161)
[23:31:11] <Disposeable-Nick> https://puu.sh/Isd74/a88748663e.png | https://puu.sh/Isd89/4bb2b65dcb.png | https://puu.sh/Isd98/6121547f0f.png | https://puu.sh/Isd9D/d153b1db77.png | jinsun, I guess this is some progress, thatmight help with the two instances being opened, by changing the startup options, but it's, when opening the .ini that, it knows for sure it isn't a .py, so I guess doesn't display the nice colours.  Not sure if there's a work around.
[23:31:17] *** Joins: lotsofpizza (~lotsofpiz@2603:3004:100:600:413a:3baf:3075:ed0a)
[23:32:09] <Disposeable-Nick> but it's like * when opening the .ini that way*
[23:32:54] *** Quits: Throgkt (~Throgkt@user/throgkt) (Quit:  )
[23:32:59] *** Quits: tracey (~trace@dynamic-002-247-249-116.2.247.pool.telefonica.de) (Remote host closed the connection)
[23:33:26] *** Quits: causaui1 (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 268 seconds)
[23:34:00] *** Joins: Jigsy (~Jigsy@user/jigsy)
[23:34:45] *** Parts: f33d1 (~m4z3y@2604:2d80:8d83:b400:d20f:84fe:7ced:4b98) (WeeChat 3.3)
[23:35:18] *** Joins: mdrake (~mattd@2601:1c0:6c01:b460:1b72:680d:903d:2b7d)
[23:35:20] <Pi-sistance> cool, is there any pattern as to where python stores values in the memory? I printed (function1) without input accidentally and I got a result relating to memory position I think
[23:35:45] <Pi-sistance> 0x00 etc
[23:36:13] <ChrisWarrick> Pi-sistance: it will tell you a memory address. how python allocates memory is an implementation detail and not really something you should care about
[23:36:38] <Pi-sistance> ok
[23:38:28] <sveinse> __next__ returns a value. The async variant __anext__ isn't simply a function that allows using await in it, but a coro must be returned. When I have the next value already, how can I return the value? Does it exists some form of a coroutine lambda I can use?
[23:39:01] *** Joins: Auron (~Auron956@user/auron)
[23:39:22] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 265 seconds)
[23:40:13] <bjs> sveinse: __next__ is a function that returns the value (or raises StopIteration),  __anext__ is a function that returns a coroutine which returns the value or raises StopAsyncIteration
[23:40:23] *** Quits: xcombelle (~xavie@abordeaux-658-1-148-113.w92-146.abo.wanadoo.fr) (Quit: WeeChat 3.3)
[23:40:34] <queue-> lol Swayze nice you pulled 2 scripts together from git and made it work :D
[23:40:35] <bjs> sveinse: I'm not sure what you mean by "how can I return the value?", can't you just `return the_value` in the `async def __anext__` ?
[23:41:25] <sveinse> Yeah, the wording for PEP 525 confuses me, but it seems I only need to return the value from __anext__
[23:41:39] <bjs> sveinse: which wording?
[23:41:45] <ChrisWarrick> > SyntaxWarning: 'tuple' object is not callable; perhaps you missed a comma?
[23:41:47] <ChrisWarrick> oh, clever
[23:42:51] *** Quits: mags (~mags@097-090-237-145.res.spectrum.com) (Ping timeout: 245 seconds)
[23:42:55] <sveinse> bjs: https://www.python.org/dev/peps/pep-0525/#support-for-asynchronous-iteration-protocol. 2) An __anext__ method returning an awaitable object, ...
[23:43:17] *** Joins: agronholm (sid403424@id-403424.helmsley.irccloud.com)
[23:43:20] <bjs> sveinse: sure, that sounds correct
[23:43:27] <bjs> (a coroutine is one kind of awaitable object...)
[23:44:26] <sveinse> bjs: yeah so I realized after a long while. It's easy to get confused as all async functions actually returns a coroutine. It's easy to get confused with the actual return statement of that function
[23:44:32] <sveinse> All good
[23:44:36] *** Quits: pycurious (~Adium@user/pycurious) (Quit: Leaving.)
[23:44:53] *** Joins: mags (~mags@097-090-237-145.res.spectrum.com)
[23:45:17] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[23:45:56] *** Joins: MaximB (~MaximB@87.68.165.78)
[23:46:06] *** Joins: jim (~jim@about/linux/staff/jim)
[23:46:16] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Client Quit)
[23:47:54] *** Quits: cr0n0s (~quassel@181.66.138.161) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[23:48:12] *** Joins: cr0n0s (~quassel@181.66.138.161)
[23:48:48] *** Joins: resmo (~resmo@2a00:d420:9:8a00:b149:b8f4:9c2a:cebd)
[23:50:29] *** Quits: ham5urg_ (~ham5urg@2a04:4540:6803:ed00:cd03:2ace:207e:c525) (Ping timeout: 265 seconds)
[23:51:07] *** Quits: sharperguy (~sharpergu@88.130.223.247) (Quit: Lost terminal)
[23:51:13] <sazawal> bjs, I don't know what happened, it was working before and now I ended up with an exception. Why I am getting this error when I do `await asyncio.create_subprocess_exec(function_to_be_run_as_subprocess)`. Here is the traceback https://bpa.st/EOJA
[23:51:27] *** yotsuba-chan is now known as yotsuba
[23:51:56] <bjs> sazawal: I will stand my ground and strongly dispute the statement that this "was working before" :)
[23:52:34] <sazawal> bjs, I believe you
[23:52:42] <bjs> sazawal: create_subproces_exec takes the program to run, and the set of command-line arguments (argv) as strings and starts the program with those arguments
[23:53:18] *** Quits: scarce (~scarce@2a05:f480:2000:1325::) (Changing host)
[23:53:18] *** Joins: scarce (~scarce@sourcehut/user/scarce)
[23:53:41] <sazawal> bjs, And not a function to be run in a separate process?
[23:53:43] *** Quits: cr0n0s (~quassel@181.66.138.161) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[23:53:48] <bjs> sazawal: no, not a function
[23:53:58] <lotsofpizza> Is there a way I can tell python to not Print "Example 2, Example 1" if they were already populated as "Example 1, Example 2"? When pulling from a list of items to determine all possible paired combinations without creating duplicates.
[23:53:59] *** Joins: j1mu5 (~j1mu5@user/j1mu5)
[23:54:01] *** Joins: cr0n0s (~quassel@181.66.138.161)
[23:54:19] <sazawal> bjs, What is the way to run a function in a separate process?
[23:54:39] <bjs> sazawal: multiprocessing is a module that has some hacks to let you appear to do that
[23:54:41] <sazawal> bjs, I mean what high level api of asyncio can I use for that?
[23:54:52] *** Joins: akahs (~Shaka@user/shaka)
[23:54:56] <bjs> sazawal: you can use run_in_executor (and use a ProcessPoolExecutor)
[23:55:11] <bjs> which uses multiprocessing in the background,  and the same set of multiprocessing caveats apply here too
[23:55:14] *** Joins: Bronto22 (~mennoh@84-86-247-193.fixed.kpn.net)
[23:55:27] <sazawal> I see
[23:55:29] <BrenBarn> lotsofpizza: how are you getting those pairs?
[23:55:40] <BrenBarn> if you use itertools.combinations it will already not give you duplicates
[23:55:42] <Swayze> queue-: i actually copied and pasted 90% of it from the links i sent you
[23:55:54] <queue-> lol ic
[23:55:59] <queue-> yea i noticed cause the # stops the game
[23:56:00] <Swayze> i still did it mate
[23:56:01] <lotsofpizza> I've been using if i != g in List.. print (i, ',', g) to not print exact duplicates ie. Example 1, Example 1 but I can't get past that point
[23:56:06] <Swayze> i did it xD
[23:56:15] <queue-> :D ik
[23:56:19] <bjs> lotsofpizza: I'm not sure what you mean by "already populated" ?
[23:56:21] *** Joins: x_kuru (~xkuru@user/xkuru)
[23:57:04] <demsh> "if i != g in List" will lookup boolean in List
[23:57:12] <BrenBarn> lotsofpizzas: I suggest you look at itertools.combinations
[23:57:21] *** Quits: dohtem (uid524096@user/dohtem) (Quit: Connection closed for inactivity)
[23:57:27] <lotsofpizza> I have a list of ice cream flavors I have to obtain all of the different paired combinations for
[23:57:43] <bjs> lotsofpizza: ah, it sounds like you've accidentally computed the *permutations* rather than the *combinations*
[23:58:00] <bjs> itertools has some helper functions to do it for you (itertools.permutations and itertools.combinations)
[23:58:32] <lotsofpizza> BrenBarn: Okay I'll take a look at intertools.combinations. Thank you
[23:58:39] <bjs> but you can do it manually. `for i in range(10): for j in range(i, 10): print(i, j)`  will print 1, 2 but not 2, 1
[23:58:39] *** Quits: beli6147 (~Thunderbi@cpe-72-132-224-120.dc.res.rr.com) (Ping timeout: 250 seconds)
[23:58:41] *** Joins: megaTherion (~therion@unix.io)
[23:58:41] *** Quits: Leonarbro (~Leonet@user/leonarbro) (Ping timeout: 245 seconds)
[23:58:44] <lotsofpizza> bjs: will do thank you
[23:59:06] *** Quits: xkuru (~xkuru@user/xkuru) (Ping timeout: 245 seconds)
[23:59:28] <Swayze> bjs always do thank you
[23:59:34] <Swayze> :-D
