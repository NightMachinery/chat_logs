[01:14:09] *** Quits: mint (~mint@46.159.204.49) (Quit: Leaving)
[01:30:29] *** Quits: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz) (Remote host closed the connection)
[01:31:24] *** Quits: darkbit (~db@152.32.100.99) (Ping timeout: 240 seconds)
[01:35:49] *** Joins: mint (~mint@46.159.204.49)
[01:49:46] *** Quits: mint (~mint@46.159.204.49) (Quit: Leaving)
[01:51:38] *** Joins: kleiner (uid540109@id-540109.uxbridge.irccloud.com)
[01:57:02] *** Quits: magla (~gelignite@d5363125.access.ecotel.net) (Quit: Stay safe!)
[01:59:32] *** Joins: seninha (~seninha@user/seninha)
[02:32:02] *** Quits: LuckyFire (~LuckyFire@79.125.173.139) (Ping timeout: 260 seconds)
[03:18:31] *** Joins: ferdna (~ferdna@user/ferdna)
[03:21:08] *** Joins: Xardas (~Xardas@149.233.51.127)
[03:24:45] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[03:31:33] *** Quits: calcul0n (~calcul0n@2a01:e0a:150:6030:4012:c816:317c:3628) (Ping timeout: 252 seconds)
[03:55:06] *** Joins: Tazmainian (~Tazmainia@83.80.169.186)
[03:58:30] *** Quits: Tazy (~Tazmainia@83.80.169.186) (Ping timeout: 252 seconds)
[04:01:18] *** Quits: Xardas (~Xardas@149.233.51.127) (Quit: Client closed)
[04:01:30] *** Joins: Xardas (~Xardas@149.233.51.127)
[04:02:04] *** Quits: Tazmainian (~Tazmainia@83.80.169.186) (Read error: Connection reset by peer)
[04:21:15] *** Quits: TheHermann (~TheHerman@gateway/tor-sasl/thehermann) (Quit: Leaving)
[04:27:46] *** Quits: cbreak (~cbreak@77-58-201-132.dclient.hispeed.ch) (Read error: Connection reset by peer)
[04:28:45] *** Joins: cbreak (~cbreak@77-58-201-132.dclient.hispeed.ch)
[05:30:21] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 252 seconds)
[05:40:09] *** Quits: bebyx (~Thunderbi@user/bebyx) (Ping timeout: 256 seconds)
[05:58:47] *** Quits: seninha (~seninha@user/seninha) (Remote host closed the connection)
[06:02:04] *** Joins: seninha (~seninha@user/seninha)
[06:04:55] *** Joins: seninha_ (~seninha@user/seninha)
[06:07:18] *** Quits: seninha_ (~seninha@user/seninha) (Remote host closed the connection)
[06:07:32] *** Quits: seninha (~seninha@user/seninha) (Ping timeout: 240 seconds)
[06:07:51] *** Joins: seninha_ (~seninha@user/seninha)
[06:07:56] *** Joins: Stryykert (~stryyke1@about/windows/staff/stryyker)
[06:08:52] *** Quits: Stryyker (~stryyke1@about/windows/staff/stryyker) (Ping timeout: 250 seconds)
[06:10:13] *** Quits: seninha_ (~seninha@user/seninha) (Remote host closed the connection)
[06:11:42] *** Joins: seninha (~seninha@user/seninha)
[06:12:52] *** Quits: seninha (~seninha@user/seninha) (Remote host closed the connection)
[06:22:27] *** Joins: seninha (~seninha@user/seninha)
[06:34:00] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[07:17:48] *** Joins: Inline__ (~Inline@p200300cd470e6400705287adc1f2aa0f.dip0.t-ipconnect.de)
[07:19:56] *** Quits: Inline (~Inline@p200300cd4709f600befffe6df48235ec.dip0.t-ipconnect.de) (Ping timeout: 245 seconds)
[07:20:48] *** Quits: very_sneaky (~very_snea@user/very-sneaky/x-7432109) (Ping timeout: 250 seconds)
[07:22:40] *** Joins: very_sneaky (~very_snea@user/very-sneaky/x-7432109)
[07:40:51] *** Joins: Zertrin_ (~zertrin@user/zertrin)
[07:41:13] *** Joins: nolyc_ (~nolyc@tinodidriksen.com)
[07:41:29] *** Quits: Zertrin (~zertrin@user/zertrin) (*.net *.split)
[07:41:29] *** Quits: nolyc (~nolyc@tinodidriksen.com) (*.net *.split)
[07:41:29] *** nolyc_ is now known as nolyc
[07:42:11] *** Quits: Xardas (~Xardas@149.233.51.127) (Quit: Client closed)
[07:51:45] *** Quits: geranim0 (~geranim0@modemcable242.171-178-173.mc.videotron.ca) (Remote host closed the connection)
[08:04:51] *** Joins: Fairy (~Fairy@2001:464a:4992:0:5813:fe5c:3e8c:63aa)
[08:07:25] *** Quits: Fairy97 (~Fairy@2001:464a:4992:0:f470:9081:bd76:4326) (Ping timeout: 240 seconds)
[08:55:30] *** Quits: LangerJan (~jan@user/langerjan) (Ping timeout: 252 seconds)
[08:55:39] *** Joins: LangerJan (~jan@user/langerjan)
[09:11:17] *** Quits: jsbach (~jsbach@2a01:c23:6148:1d00:b546:c5e3:316a:a) (Ping timeout: 256 seconds)
[09:20:57] *** Quits: Crocodillian (~Crocodill@comply.posixsh.org) (Quit: WeeChat 3.3)
[09:21:28] *** Joins: Crocodillian (~Crocodill@comply.posixsh.org)
[09:24:02] *** Joins: jsbach (~jsbach@2a01:c22:a861:c200:a1b8:256b:efc8:e064)
[09:37:08] *** Quits: Crocodillian (~Crocodill@comply.posixsh.org) (Quit: WeeChat 3.3)
[09:57:27] *** Joins: mint (~mint@46.159.204.49)
[10:01:12] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[10:19:06] *** Quits: mudzap (~mudzap@2806:107e:f:64c7:945a:364:ecf7:ff43) (Ping timeout: 268 seconds)
[10:20:59] *** Quits: nq (~nq@2a02:2f08:e015:a900:7e72:2af9:f526:1e8f) (Quit: Leaving)
[10:49:02] *** Joins: Xardas (~Xardas@149.233.51.127)
[11:07:20] *** Joins: calcul0n (~calcul0n@2a01:e0a:150:6030:4012:c816:317c:3628)
[12:16:05] *** Joins: Crocodillian (~Crocodill@comply.posixsh.org)
[12:25:40] *** Joins: DSpider (DSpider@2a02:2f00:4ff:ffff::646c:6882)
[12:53:08] *** Joins: osfe_ (~lemaire@nanpc540.in2p3.fr)
[12:53:10] *** Joins: dgcampea-2 (~dgc@user/dgcampea)
[12:53:11] *** Quits: dgcampea (~dgc@user/dgcampea) (Killed (NickServ (Forcing logout dgcampea -> dgcampea)))
[12:53:11] *** dgcampea-2 is now known as dgcampea
[13:04:55] *** Quits: Xardas (~Xardas@149.233.51.127) (Quit: Client closed)
[13:23:16] *** Quits: cbreak (~cbreak@77-58-201-132.dclient.hispeed.ch) (Quit: ZNC - https://znc.in)
[13:25:05] *** Joins: cbreak (~cbreak@77-58-201-132.dclient.hispeed.ch)
[13:28:29] *** Joins: PJBoy (~PJBoy@user/pjboy)
[13:43:42] *** Quits: dgcampea (~dgc@user/dgcampea) (Remote host closed the connection)
[13:44:04] *** Joins: dgcampea (~dgc@user/dgcampea)
[14:14:32] *** Joins: osfe (~lemaire@nanpc540.in2p3.fr)
[14:15:01] *** Quits: osfe_ (~lemaire@nanpc540.in2p3.fr) (Ping timeout: 256 seconds)
[14:23:07] *** Quits: LampoNero (~kifir@host-87-21-207-141.retail.telecomitalia.it) (Quit: KVIrc 5.0.1 Aria http://www.kvirc.net/)
[14:25:02] *** Joins: Armoured (~kifir@host-87-21-207-141.retail.telecomitalia.it)
[14:31:02] *** Joins: TheHermann (~TheHerman@gateway/tor-sasl/thehermann)
[14:35:52] *** Quits: Armoured (~kifir@host-87-21-207-141.retail.telecomitalia.it) (Quit: KVIrc 5.0.1 Aria http://www.kvirc.net/)
[14:39:20] *** Joins: Armoured (~kifir@host-87-21-207-141.retail.telecomitalia.it)
[14:49:49] *** Joins: Tazy (~Tazmainia@2001:1c02:170b:3d00::1009)
[15:18:04] *** Joins: nq (~nq@2a02:2f08:e015:a900:99af:f5ee:ecd5:7377)
[15:26:57] *** Joins: seninha (~seninha@user/seninha)
[15:36:40] *** Joins: bebyx (~Thunderbi@user/bebyx)
[16:26:39] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Quit: Life beckons)
[16:35:06] *** Joins: markong (~kvirc@213.146.188.203)
[17:30:50] *** Joins: mudzap (~mudzap@2806:107e:f:64c7:ef6d:b82a:36c:d8f6)
[17:43:12] *** Quits: DSpider (DSpider@2a02:2f00:4ff:ffff::646c:6882) (Quit: Leaving)
[17:56:47] *** Joins: darkbit (~db@152.32.100.99)
[17:59:43] *** Quits: very_sneaky (~very_snea@user/very-sneaky/x-7432109) (Quit: very_sneaky)
[18:06:25] *** Joins: very_sneaky (~very_snea@user/very-sneaky/x-7432109)
[18:55:15] *** Joins: jsbach_ (~jsbach@2a01:c22:a861:c200:b455:8fb0:343e:163a)
[18:56:13] *** Quits: jsbach (~jsbach@2a01:c22:a861:c200:a1b8:256b:efc8:e064) (Ping timeout: 240 seconds)
[18:56:17] *** Quits: Alipha (~AliphaX@user/alipha) (Quit: WeeChat 1.0.1)
[18:58:24] *** Quits: FuzzyBottom (~FuzzyBott@d207-6-38-95.bchsia.telus.net) (Remote host closed the connection)
[18:59:57] *** Joins: FuzzyBottom (~FuzzyBott@d207-6-38-95.bchsia.telus.net)
[19:02:13] *** Joins: Alipha (~AliphaX@75-168-143-77.mpls.qwest.net)
[19:02:13] *** Quits: Alipha (~AliphaX@75-168-143-77.mpls.qwest.net) (Changing host)
[19:02:13] *** Joins: Alipha (~AliphaX@user/alipha)
[19:08:15] *** Joins: hesse (~TheHerman@gateway/tor-sasl/thehermann)
[19:08:33] *** Quits: TheHermann (~TheHerman@gateway/tor-sasl/thehermann) (Remote host closed the connection)
[19:08:46] *** Quits: Inline__ (~Inline@p200300cd470e6400705287adc1f2aa0f.dip0.t-ipconnect.de) (Read error: Connection reset by peer)
[19:09:16] *** Joins: Inline (~Inline@p200300cd470e6400705287adc1f2aa0f.dip0.t-ipconnect.de)
[19:21:00] *** Joins: magla (~gelignite@55d4decd.access.ecotel.net)
[19:30:50] *** Quits: hesse (~TheHerman@gateway/tor-sasl/thehermann) (Quit: Leaving)
[19:31:01] *** Joins: hesse (~TheHerman@gateway/tor-sasl/thehermann)
[19:33:23] *** hesse is now known as TheHermann
[20:01:01] *** Quits: magla (~gelignite@55d4decd.access.ecotel.net) (Quit: Stay safe!)
[20:09:05] *** Quits: osfe (~lemaire@nanpc540.in2p3.fr) (Ping timeout: 250 seconds)
[20:31:43] *** Quits: mint (~mint@46.159.204.49) (Quit: Leaving)
[20:49:46] <nq> hi all
[20:50:32] <nq> does ~ "template overloading" not work in C++? I am interested in doing two variants of Pair<> -> template <typename ContainedT1, typename ContainedT2> struct Pair {..}; and template <typename ContainedT> struct Pair {..};
[20:50:51] <Raziel> hi one
[20:51:46] <nq> Raziel: hi another
[20:52:59] <Raziel> and yes, that doesn't really work
[20:53:07] <Raziel> there may be ways around it depending on what you're actually trying to do
[20:53:42] <Raziel> see https://en.cppreference.com/w/cpp/language/partial_specialization
[20:54:13] <nq> I tried template <typename ContainedT>
[20:54:13] <nq> struct Pair<ContainedT, ContainedT> but it doesn't seem to be what I need
[20:54:47] <nq> it then says that Pair<size_t> requires 2 arguments
[20:55:18] <nq> I thought that the row with the tempalte<typename ContainedT> would act as the template parameter list when writting Pair<something>
[20:55:30] <Raziel> that should compile
[20:56:52] <Raziel> oh, I guess the instantiation doesn't
[20:57:01] <nq> https://godbolt.org/z/jce6bqTPT
[21:00:58] <Raziel> nq, in that specific case, you could just default the second type
[21:00:59] <Raziel> https://wandbox.org/permlink/Hkx4v9EXsbMI3UFJ
[21:01:02] <Raziel> like so
[21:02:18] <Raziel> don't even need another specialization to do it, unless you do want it do something else specific to the case where both are indeed the same type
[21:02:36] <nq> I see
[21:02:53] <nq> I wanted to have different internal representation based on whether it was an heterogeneous pair or homogeneous one
[21:03:03] <nq> T1 first; T2 second; vs T values[2];
[21:03:19] <nq> using specialization
[21:03:56] <Raziel> you can do that, but you'll need getters I suppose
[21:06:58] *** Joins: mekor (~mekor@mekor.vpk.bme.hu)
[21:07:40] <Raziel> nq, https://wandbox.org/permlink/z6XlXRkxcS8uiT1p
[21:08:16] <Raziel> bleh, I forgot how annoying it is to write getters and setters :p
[21:08:35] *** Quits: mekor (~mekor@mekor.vpk.bme.hu) (Client Quit)
[21:10:13] <Raziel> obviously you don't *need* the getters and setters, unless you do want to have identical access regardless of which pair specialization you're using. which I think is a good idea v:
[21:11:13] <nq> interesting, due to that default argument on ContainerT2 = ContainerT1, the initial thing I tried works, as I have seen in your code
[21:11:21] <nq> Raziel, thanks
[21:11:31] <Raziel> yeah, it still won't work without it
[21:12:16] <nq> I suppose it won't accept identical... mno, Pair<int, int> would work; then maybe not "identical types", but "identical arguments" 
[21:12:45] <nq> so what, ContainedT2 = ContainedT1 means that it allows the two tempalte parameters to coincide, but otherwise they can't ?
[21:12:51] <Alipha> nq: so you don't want Pair<int, int> to use the specialization?
[21:13:13] <Raziel> Pair<int, int> will use the homogenous specialization in the code I posted at least, same as Pair<int> would
[21:13:23] <Raziel> if you don't want it to, uhhhh, not sure 
[21:13:23] <nq> well, I am wondering what went wrong with the pattern matcher in what I initially tried and why that default arg. is necessary
[21:13:41] <nq> what raziel gave me is what I needed
[21:15:02] <Raziel> default is necessary because you always have to specify all template parameters of the main template, unless some of them have a default
[21:15:11] <Raziel> just cpp being cpp I guess :p
[21:17:15] <nq> but if main templ: <typename T1, typename T2> struct A {}; -> why would spec. templ: <typename T> struct A <T, T> {}; not work ?
[21:18:00] <nq> A<T, T> does specify both T1 and T2, based on a ~ "re-parametrization" from <T1, T2> to <T>
[21:19:37] <Raziel> I'm not actually sure what the underlying limitation is. If I were to guess, the main template is still looked at first before partial specializations? But that does seem a bit back-asswards
[21:19:58] <nq> well yes but it doesn't matter
[21:20:06] <nq> you see, the template pattern matcher will look at all templates
[21:20:16] <nq> if you CAN have multiple mathces, it will say "multiple candidates"
[21:20:23] <Raziel> true
[21:20:25] <nq> so the order is not that important
[21:20:52] <nq> I think that if you do that <T1, T2 = T1> it says that templt<T> A<T, T> is supported
[21:21:23] <nq> otherwise, if main = <T1, T2>, you can't have spec = <T> A<T, T> because it's the "same argument" 
[21:21:32] <nq> not that it doesn't fill in the types needed
[21:21:47] <nq> it's that T1 ought to be "non-identical" (not "non-equal") from T2
[21:21:55] <nq> I guess.. ?
[21:22:16] <Raziel> well, based on the observed behaviour at least, that seems to be what it does, yes
[21:22:57] <nq> I wish I had a better visualization of what the pattern matcher DOES
[21:25:08] <Alipha> a partial specialization doesn't change the number of template parameters. `template<typename T> struct A <T, T> {};` only has one template parameter in template list because only one is needed to define what the specialization (A <T, T>) is
[21:26:15] <Alipha> you could have: `template<typename U, typename K, typename T, std::size_t N> struct <U, std::map<K, std::array<T, N>>> {};`
[21:26:25] <nq> I am confused by whether it's "parameters" or "arguments"
[21:26:49] <Alipha> but A would still only take 2 arguments
[21:26:59] <Raziel> in templates they're called parameters
[21:27:20] <Raziel> ...I think?
[21:27:38] <Raziel> are they just interchangeable terms?
[21:27:49] <Raziel> arrrrgh semantics, my old nemesis
[21:27:54] <Alipha> some people say there's a difference, but i always use them interchangably
[21:28:19] <nq> I thought that specialized template<just what is being used by arguments> A <need to match the main's parameter list>
[21:28:47] <Alipha> nq: yes
[21:29:10] <nq> I'll try some code to see if I really can't arbitrarily change the template param. list
[21:29:25] <nq> as long as I keep the spec's argument list the same as the main's param list
[21:30:22] <Raziel> you really can't. :p
[21:30:40] <Raziel> or, what do you mean?
[21:32:01] <Raziel> also, the default there doesn't necessarily have to be T2 = T1, it could be T2 = int or whatever else
[21:32:04] <nq> https://godbolt.org/z/En5aKddT6
[21:32:07] <Raziel> just not void :p
[21:32:10] <nq> it indeed does complain
[21:32:10] *** Joins: LuckyFire (~LuckyFire@46.217.40.44)
[21:33:38] <nq> although it doesn't complain about the template itself
[21:34:26] <Raziel> yeah, cause it's technically a valid specialization, even though I don't think there's any way to actually use it lol
[21:35:33] <Alipha> Raziel: eh, sure you can: https://godbolt.org/z/94hnYKsWb
[21:36:39] <Raziel> oh, yes
[21:37:03] <Raziel> I'm dumb :p
[21:37:40] <Alipha> nq: str is a template that takes 3 typename arguments. that doesn't change. the template arguments specified in the partial specialization are just "wildcards". your specialization is basically just saying "if you pass 3 template arguments to str which has the form of str<std::pair<*, *>, *, *> then use this specialization"
[21:43:11] <nq> I had the misconception that I could use the spec. templ. <..> as struct str's new template parameter list
[21:43:28] <nq> because.. that's what it feels like to me by looking at the syntax
[21:43:53] <Raziel> right, because it looks similar to function overloading, and that's how those would work
[21:44:01] <Raziel> but nope.
[21:44:13] <nq> I am trying to see why the spec. templ. still has a parameter list at all
[21:44:29] <nq> it uses that to "maintain the wildcards" I presume
[21:44:52] <nq> but these are "identifiable, distinguishable wildcards" (something that identifiers are always used for in lambda calculus, essentially)
[21:45:27] <nq> but then... I should be able to specialized a specialization
[21:46:22] <nq> but that's not how it is treated actually
[21:46:32] <nq> I had a drawing of this.. this will take some time.. brb
[21:47:57] <Raziel> have fun :p
[21:49:39] <nq> https://ibb.co/ts5TLRJ
[21:49:58] <nq> my ugly handwriting though.. please excuse that
[21:50:32] <nq> the highlight of the discussion in the notes was on the disjointness of the specializations of a main template
[21:50:43] <nq> and that the main template itself acts like the else of an if-elif-else chain
[21:50:57] <nq> where the if's/elif's are the specializations
[21:51:00] <nq> essentially
[21:52:35] <nq> even though I thought of this, I still had the misconception that the specializations can act as re-parametrization, instead of solely as pattern matchers - probably because "overloading templates" seems rather expressive
[21:53:40] *** Joins: magla (~gelignite@55d4decd.access.ecotel.net)
[22:00:20] <Raziel> I do think it would be more flexible if it did work that way, but I have no idea how realistic that is
[22:17:13] <nq> well, when they are not disjoint you get the "multiple candidates" error
[22:21:00] <nq> a useful aspect is that if you have multiple if's that are all mutually disjoint, their order does not matter (they are ~ "commutative and associative"))
[22:29:08] <nq> which is often needed in a large codebase, or in source code in general
[22:31:57] *** Joins: Tazmainian (~Tazmainia@2001:1c02:170b:3d00::1009)
[22:32:26] *** Quits: Tazy (~Tazmainia@2001:1c02:170b:3d00::1009) (Ping timeout: 245 seconds)
[22:44:17] *** Quits: markong (~kvirc@213.146.188.203) (Ping timeout: 240 seconds)
[22:44:26] *** Joins: mint (~mint@46.159.204.49)
[23:16:26] *** Tazmainian is now known as Tazy
[23:36:36] <nq> / <conclusion>: the base template is used first in order to match the parameter list and validate it; if there are default arguments, then the argument list will be augmented with them in this step
[23:36:37] <nq> 	// next comes the specialization matching phase, where matching "candidates" are searched for; the base template implementation is used only if specialized implementations are not found; it is a problem if multiple specialized candidates are found, causing ambiguity
[23:37:09] <nq> is this correct ?
[23:37:39] *** Joins: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz)
[23:52:39] <Raziel> think so
[23:52:46] *** Quits: LuckyFire (~LuckyFire@46.217.40.44) (Remote host closed the connection)
[23:53:08] *** Joins: LuckyFire (~LuckyFire@46.217.40.44)
[23:53:51] *** Quits: magla (~gelignite@55d4decd.access.ecotel.net) (Quit: Stay safe!)
[23:57:27] *** Quits: bebyx (~Thunderbi@user/bebyx) (Quit: bebyx)
[23:58:03] <nq> it's weirder than a function's parameter list, because it's both that and a pattern for matching
