[00:05:57] *** Quits: andlabs (~andlabs@ool-ad034a4d.dyn.optonline.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[00:07:00] *** Joins: lungaro (~lungaro@99-117-118-33.lightspeed.sndgca.sbcglobal.net)
[00:07:53] *** Quits: shka (~herr@109.231.62.239) (Ping timeout: 265 seconds)
[00:09:47] *** Joins: andlabs (~andlabs@ool-ad034a4d.dyn.optonline.net)
[00:10:59] *** Quits: dmathieu (~textual@78.203.212.55) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[00:11:45] *** Joins: dany74q (~dany74q@IGLD-84-229-190-86.inter.net.il)
[00:14:47] *** Quits: jcajka (~jcajka@89-24-144-111.customers.tmcz.cz) (Remote host closed the connection)
[00:16:02] *** Quits: cync (~blah@192.180.187.81.in-addr.arpa) (Quit: No Ping reply in 180 seconds.)
[00:17:13] *** Joins: amahl (~amahl@dsl-jklbng12-54fbca-64.dhcp.inet.fi)
[00:17:24] *** Joins: cync (~blah@192.180.187.81.in-addr.arpa)
[00:19:17] <mikoto-chan> https://pkg.go.dev/github.com/fluffle/goirc/client
[00:20:10] <mikoto-chan> why is Handle, HandleFunc, Handler, HandlerFunc and all the other stuff so overcomplicated?
[00:20:46] <mikoto-chan> I don't understand their relationship at all and keep getting type errors, I know that package http got the same types but they're much easier to understand
[00:21:50] <mikoto-chan> looked at some examples on Github and everybody seems to limit themselves to HandleFunc but I don't want to put functions inside of function calls
[00:23:29] <Tv_> mikoto-chan: looks like they copied the design from net/http, maybe familiarize with that first?
[00:24:01] <lungaro> what's a good scripting language for use in go these days? are my best choices still lua or javascript?
[00:24:06] <Tv_> mikoto-chan: HandlerFunc is just a helper to make it easy to standalone functions or methods with other names to implement the interface
[00:24:32] <Tv_> lungaro: kinda depends on the use case, e.g. sometimes you don't want a full scripting language, and starlark is neat
[00:25:16] <lungaro> i could almost get away with pure convention, i just want to write some simple tests to evaluate to determine if plugins should be enabled at runtime. Ie, "If hostname matches regex" or "if file/dir exists"
[00:25:53] <lungaro> whoa, interesting (Starlark)
[00:26:11] <Tv_> lungaro: starlark or something like https://github.com/osohq/oso might work well for such a restricted role
[00:26:40] <lungaro> what's tough about all these niche languages is someone has to learn it
[00:27:13] <Tv_> lungaro: starlark is a subset of python
[00:27:22] <lungaro> yeah, that's pretty nice
[00:28:18] <Tv_> lungaro: https://github.com/google/cel-go can do stuff like `request.time - resource.age < duration("24h")`, smells slightly like javascript, and is used in various places "cloud admins" might have been exposed to; similar to oso from above
[00:29:25] <Tv_> oso is more of a mindfuck prolog thing, but good for "should this be ok" kind of queries like the expert systems of olden times it imitates
[00:29:51] <Tv_> as in, "X is a giraffe. giraffes are mammals. mammals are animals. is X an animal?"
[00:31:03] *** Joins: sono (~sono@107-209-210-210.lightspeed.sntcca.sbcglobal.net)
[00:35:29] *** Quits: davidkrauser (~davidkrau@user/davidkrauser) (Quit: Leaving)
[00:35:34] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Quit: sord937)
[00:44:34] *** Parts: currybullen (~curry@h-81-170-128-138.A258.priv.bahnhof.se) (WeeChat 3.2)
[00:54:26] *** Joins: Necoro (~Necoro@user/necoro)
[01:09:12] *** Quits: andlabs (~andlabs@ool-ad034a4d.dyn.optonline.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[01:12:14] *** Quits: sysh (~sysh@212.237.182.120) (Remote host closed the connection)
[01:13:07] *** Quits: Kane (~Kane@2a01:e34:ee89:5d90:c07d:7132:2854:e46a) (Quit: Leaving)
[01:13:45] *** Joins: andlabs (~andlabs@ool-ad034a4d.dyn.optonline.net)
[01:18:19] *** Quits: andlabs (~andlabs@ool-ad034a4d.dyn.optonline.net) (Client Quit)
[01:21:42] *** Joins: andlabs (~andlabs@ool-ad034a4d.dyn.optonline.net)
[01:28:13] *** Quits: andlabs (~andlabs@ool-ad034a4d.dyn.optonline.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[01:30:31] *** Joins: andlabs (~andlabs@ool-ad034a4d.dyn.optonline.net)
[01:30:32] *** Quits: andlabs (~andlabs@ool-ad034a4d.dyn.optonline.net) (Client Quit)
[01:31:54] *** Quits: art_vandelay (~art_vande@bras-base-toroon63x9w-grc-21-174-89-102-174.dsl.bell.ca) (Ping timeout: 258 seconds)
[01:32:45] *** Quits: dr0n (~nabromov@94.11.23.235) (Quit: WeeChat 2.8)
[01:33:01] *** Joins: martinkennelly (~martinken@84.203.21.166)
[01:33:07] *** Joins: art_vandelay (~art_vande@bras-base-toroon63x9w-grc-21-174-89-102-174.dsl.bell.ca)
[01:34:03] *** Joins: andlabs (~andlabs@ool-ad034a4d.dyn.optonline.net)
[01:36:22] <martinkennelly> how come I can access data structures inside an anon closure without passing them in as args? Would you folks recommend passing them in as args anyway to an anon closure?
[01:41:15] <Tv_> martinkennelly: sounds like your variables are in the parent scope. if you don't like that, use a non-anonymous function outside the scope
[01:42:07] <fizzie> Being able to refer to names from the surrounding lexical scope is pretty much what the word "closure" means.
[01:42:48] <fizzie> I don't think people would normally explicitly pass them as arguments to the call just because.
[01:43:52] <fizzie> Was going to say maybe if you need to make a copy (like, you want to refer to the current value of a for loop iteration variable), but even then feels like you'd maybe just short-declare a copy.
[01:45:02] *** Quits: mikoto-chan (~mikoto-ch@ip-213-49-189-31.dsl.scarlet.be) (Ping timeout: 265 seconds)
[01:50:40] <martinkennelly> fizzie: Yeah, I am misunderstanding what closure means. Apologies for being dumb here.
[01:53:35] <b0nn> heh, I just finished the "environment" section of the "Write an interpreter in Go" book, and it's access to the environment of the "outer" function when the closure is called that defines what a closure is
[01:53:50] *** Joins: zaibon[m]1 (~zaibonsyn@2001:470:69fc:105::1019)
[01:56:01] <martinkennelly> b0nn: I thought initially that func can access global vars or args. I didnt consider the vars defined in the func wrapping the anon func.      btw, good book?
[01:56:59] *** Joins: mikoto-chan (~mikoto-ch@ip-213-49-189-31.dsl.scarlet.be)
[01:57:36] <b0nn> genuinely enjoying the book
[01:58:28] <b0nn> the journey it takes you on (even if it's a bit "paint by numbers" I am finding really exciting
[01:59:02] <martinkennelly> That interpreter journey has always been on my bucketlist. Seems the book is popular.
[02:00:59] <b0nn> Currently my interpreter supports Integers and Booleans, and functions and clocures, but I am about to move into the more complex types, strings, arrays, etc
[02:02:14] <b0nn> But the abstract knowledge that the author provides, like - oh now we move to evaluating our AST, here are several possible strategies and where you will see them in the wild
[02:02:36] *** Quits: dmang (~dmang@user/dmang) (Remote host closed the connection)
[02:04:13] <b0nn> Sorry, the abstract knowledge makes me wish I had done the "Create an interpreter" paper at Uni (although that would have been in Haskell)
[02:04:22] *** Joins: fikran (~fikran@pool-108-31-11-131.washdc.fios.verizon.net)
[02:04:38] <martinkennelly> good stuff. I hear its essential learning experience.
[02:05:13] *** Quits: fikran (~fikran@pool-108-31-11-131.washdc.fios.verizon.net) (Changing host)
[02:05:13] *** Joins: fikran (~fikran@user/fikran)
[02:05:16] <fikran> I am json.Marhshal()'ing a map. When I print it, it comes out as a series of numbers, rather than text. Am I doing something wrong?
[02:06:29] <martinkennelly> fikran: seems as expected to me. youre converting your map to binary.
[02:06:53] <b0nn> fikran: the numbers are runes, if you want to print it then string(data)
[02:06:57] *** Joins: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au)
[02:07:03] <b0nn> runes/bytes
[02:08:40] <fikran> that was it! thank you!
[02:09:35] *** Quits: mickey (~user@user/mickey) (Quit: Ping timeout (120 seconds))
[02:09:51] *** Joins: mickey (~user@user/mickey)
[02:10:40] <martinkennelly> b0nn: runes are int32?
[02:11:04] <b0nn> so, runes are 1-3 bytes IIRC
[02:11:51] <Tv_> fikran: fmt.Printf("%s", b) where b is a byte slice tells Go to display it as a string. see also %q, %x, etc
[02:12:42] <b0nn> The Go language defines the word rune as an alias for the type int32, so programs can be clear when an integer value represents a code point.
[02:12:53] *** Quits: thriqon (~thriqon@HSI-KBW-46-223-162-105.hsi.kabel-badenwuerttemberg.de) (Quit: leaving)
[02:13:18] <martinkennelly> b0nn: good stuff. I just saw this too.
[02:13:26] *** Quits: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com) (Remote host closed the connection)
[02:14:24] <martinkennelly> b0nn: https://play.golang.org/p/pHK6dwWlYvl
[02:14:37] <b0nn> The channel has also been discussing the next step, graphemes, which runes do not always represent
[02:16:50] <martinkennelly> b0nn: so it seems a rune can be anywhere from 1-3 bytes as you said.
[02:17:00] <fizzie> 1-4.
[02:18:06] *** Quits: paulgrmn (~paulgrmn@user/paulgrmn) (Ping timeout: 252 seconds)
[02:18:40] <martinkennelly> fizzie: because 4 bytes in int32. my bad.
[02:19:22] <b0nn> I know there's room for four, but I'm sure that I've read somewhere that a rune is only doing 1-3
[02:19:32] <fizzie> It's not directly from that; UTF-8 is a variable-length encoding, so it would take more than 4 bytes to encode all int32 values. But it's limited to the range of Unicode code points (0 .. 10FFFF).
[02:20:51] *** Quits: mrig (~mrig@user/mrig) (Quit: WeeChat 3.2)
[02:20:52] <martinkennelly> fizzie: I see - so golang supports utf-16 also?
[02:21:27] <fizzie> b0nn: One rune, four bytes: https://play.golang.org/p/RV0A_DOa-9c
[02:21:46] <martinkennelly> or is it utf-8 itself doesnt map to directly to 4 byes but as you said, its variable.
[02:22:53] *** Quits: eck0 (~eck0@047-007-119-133.res.spectrum.com) (Quit: leaving)
[02:23:35] <b0nn> With the recent Unicode 6.3, there are over 110,000 symbols defined. This requires at least 21-bit representation of each code point, so a rune is like int32 and has plenty of bits
[02:23:39] *** Joins: Garb0 (~Garb0@user/garb0)
[02:23:44] <b0nn> ^ SO comment
[02:25:34] *** Quits: MrFantastik (~Thunderbi@cpe-69-204-101-67.buffalo.res.rr.com) (Ping timeout: 258 seconds)
[02:26:33] <fizzie> That's a bit of a nonsense comment, because the "at least 21-bit representation" is because of the range of code points (0..10FFFF, so 1114112 unique values), not because of how many symbols they've actually defined so far.
[02:26:37] <b0nn> Unfortunately my web browser cannot display the symbol https://play.golang.org/p/oVNPUspQPSi
[02:27:25] <b0nn> ￿
[02:28:21] <fizzie> How about https://play.golang.org/p/mTmUvOsmFo4 -- that's a more popular character. (I just picked at random.)
[02:29:05] <fizzie> The first one was U+1F38A CONFETTI BALL, just to not leave it hanging.
[02:30:06] *** Joins: MrFantastik (~Thunderbi@cpe-69-204-101-67.buffalo.res.rr.com)
[02:30:13] *** Quits: mikoto-chan (~mikoto-ch@ip-213-49-189-31.dsl.scarlet.be) (Quit: mikoto-chan)
[02:30:34] <b0nn> Right, today I am dedicating to learning how to go in a lambda
[02:30:52] <b0nn> does anyone have a good link for the lernin? And are there any pitfalls I should be aware of?
[02:31:12] <fikran> if I declare a variable at the top of the function outside of a function and i update it in a function, it seems to return back to blank.
[02:31:14] <b0nn> or is it as simple as "func Foo() {}
[02:31:39] <fikran> I declared "var trending string" at the top of the function. When I update it in a function, it doens't survive the end of the function usage.
[02:31:43] <b0nn> fikran: if you := the variable inside a function you are shadowing the package version
[02:32:05] <b0nn> shadowing == multiple variables with the same name
[02:32:13] <fikran> I am updating it as this: trendingexport = string(data)
[02:32:30] <b0nn> play.golang.org so people can see what you are doing
[02:32:36] *** Quits: MrFantastik (~Thunderbi@cpe-69-204-101-67.buffalo.res.rr.com) (Remote host closed the connection)
[02:32:38] <fikran> sure!
[02:33:04] <fikran> sicne my kid was born, I haven't coded in go in 3-4 minutes, so I'm forgetting a lot..
[02:34:00] <b0nn> since I woke up I have made at least a dozen mistakes in go - no judgement
[02:36:06] *** Quits: src (~src@user/src) (Quit: leaving)
[02:38:01] *** Joins: MrFantastik (~Thunderbi@cpe-69-204-101-67.buffalo.res.rr.com)
[02:38:20] *** Quits: bat[m] (~batdice-t@2001:470:69fc:105::19b8) (Write error: Connection reset by peer)
[02:38:20] *** Quits: mrjumper[m] (~mr-jumper@2001:470:69fc:105::7f1) (Read error: Connection reset by peer)
[02:38:21] *** Quits: zaibon[m]1 (~zaibonsyn@2001:470:69fc:105::1019) (Write error: Connection reset by peer)
[02:38:22] *** Quits: ubh (~ubh@2001:470:69fc:105::852) (Read error: Connection reset by peer)
[02:38:22] *** Quits: hsiktas[m] (~hsiktasma@2001:470:69fc:105::30d4) (Read error: Connection reset by peer)
[02:38:22] *** Quits: spudly[m] (~spudly@2001:470:69fc:105::18) (Read error: Connection reset by peer)
[02:38:22] *** Quits: worr (~worr@2001:470:69fc:105::78c) (Read error: Connection reset by peer)
[02:38:22] *** Quits: meain (~meain@2001:470:69fc:105::2db) (Read error: Connection reset by peer)
[02:38:23] *** Quits: psydroid (~psydroid@user/psydroid) (Write error: Connection reset by peer)
[02:38:24] *** Quits: jai (~darkapex@user/darkapex) (Read error: Connection reset by peer)
[02:38:24] <fikran> hm...updated. odd
[02:38:25] *** Quits: blakeorwhatever[ (~blakeorwh@2001:470:69fc:105::340e) (Read error: Connection reset by peer)
[02:38:25] *** Quits: kadoban (~kadoban@user/kadoban) (Write error: Connection reset by peer)
[02:38:25] *** Quits: archwizard (~archwizar@2001:470:69fc:105::929) (Write error: Connection reset by peer)
[02:38:27] *** Quits: geoah (~geoah@2001:470:69fc:105::1d59) (Read error: Connection reset by peer)
[02:38:30] <b0nn> Is anyone using Tailscale?
[02:38:33] *** Quits: TcM1911 (~tcm1911@2001:470:69fc:105::3649) (Read error: Connection reset by peer)
[02:38:34] *** Quits: mambang[m] (~mambang@user/mambang) (Write error: Connection reset by peer)
[02:38:34] *** Quits: phoenix[m] (~phoenixma@2001:470:69fc:105::f9b) (Read error: Connection reset by peer)
[02:39:08] *** Joins: spudly[m] (~spudly@2001:470:69fc:105::18)
[02:39:36] *** Quits: bloony (~bloony@2a02:2121:309:b13c:1c13:86d4:5401:3) (Ping timeout: 250 seconds)
[02:40:58] *** Joins: meain (~meain@2001:470:69fc:105::2db)
[02:40:58] *** Joins: worr (~worr@2001:470:69fc:105::78c)
[02:40:58] *** Joins: mrjumper[m] (~mr-jumper@2001:470:69fc:105::7f1)
[02:40:58] *** Joins: archwizard (~archwizar@2001:470:69fc:105::929)
[02:40:59] *** Joins: phoenix[m] (~phoenixma@2001:470:69fc:105::f9b)
[02:40:59] *** Joins: kadoban (~kadoban@user/kadoban)
[02:40:59] *** Joins: mambang[m] (~mambang@user/mambang)
[02:40:59] *** Joins: hsiktas[m] (~hsiktasma@2001:470:69fc:105::30d4)
[02:40:59] *** Joins: blakeorwhatever[ (~blakeorwh@2001:470:69fc:105::340e)
[02:40:59] *** Joins: psydroid (~psydroid@user/psydroid)
[02:40:59] *** Joins: geoah (~geoah@2001:470:69fc:105::1d59)
[02:40:59] *** Joins: jai (~darkapex@user/darkapex)
[02:41:11] *** Joins: zaibon[m] (~zaibonsyn@2001:470:69fc:105::1019)
[02:41:11] *** Joins: ubh (~ubh@2001:470:69fc:105::852)
[02:41:12] *** Joins: bat[m] (~batdice-t@2001:470:69fc:105::19b8)
[02:41:12] *** Joins: TcM1911 (~tcm1911@2001:470:69fc:105::3649)
[02:41:27] <fikran> hm..can't reproduce this
[02:41:34] <fikran> at least isolated.
[02:41:51] <fikran> could it be because the function in question never actually returns?
[02:42:16] *** Quits: holgersson (~quassel@user/holgersson) (Ping timeout: 246 seconds)
[02:42:23] <fikran> darn.
[02:42:39] *** Joins: thing_ (~thing@user/thing)
[02:42:43] <b0nn> Impossible for me to be able to comment from here, fmt.Println() is helpful IME
[02:42:43] *** Joins: holgersson (~quassel@user/holgersson)
[02:43:17] *** Quits: thing (~thing@user/thing) (Ping timeout: 244 seconds)
[02:43:34] <fikran> I'm so dumb...I didn't save the file.
[02:43:53] <fikran> I'm new to vs code while in vim I reflexively hit :w, I am not here.
[02:44:02] <fikran> I apologize and thank everyone here.
[02:45:28] <b0nn> ha! IRC rubber duck debugging
[02:47:09] <b0nn> https://scottlocklin.wordpress.com/2021/04/01/obvious-and-possible-software-innovations-nobody-does/ <<-- Not Go related, but interesting nonetheless
[02:47:29] *** Joins: dalan (~dalan@118.102.85.89)
[02:47:43] *** Quits: dalan (~dalan@118.102.85.89) (Client Quit)
[02:48:19] *** Joins: dalan (~dalan@118.102.85.89)
[02:53:53] <b0nn> Also, because there was an (overnight for me) discussion on hashing, I saw this linked from a proposal to hash switch statements for faster lookup https://blog.gopheracademy.com/advent-2017/mphf/
[03:02:18] *** Quits: jjonah (~jjonah@p200300d5d723c400dea632fffeb3342f.dip0.t-ipconnect.de) (Remote host closed the connection)
[03:07:39] *** Quits: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au) (Ping timeout: 268 seconds)
[03:17:20] *** Quits: mrlemke_ (~mrlemke@208.74.105.200) (Quit: Konversation terminated!)
[03:19:28] *** Joins: mrlemke (~mrlemke@208.74.105.200)
[03:23:20] *** Quits: NCS_One (~NCS_One@bl11-90-133.dsl.telepac.pt) (Quit: Lost terminal)
[03:25:40] *** Quits: kupi (uid212005@id-212005.stonehaven.irccloud.com) (Quit: Connection closed for inactivity)
[03:26:13] *** Quits: karhunkynsi (~karhunkyn@user/karhunkynsi) (Remote host closed the connection)
[03:30:52] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 272 seconds)
[03:30:58] *** Quits: jsrnop (~mark@user/jsrnop) (Quit: The Lounge - https://thelounge.chat)
[03:31:30] *** Joins: jsrnop (~mark@user/jsrnop)
[03:32:03] *** Joins: fikran (~fikran@pool-108-31-11-131.washdc.fios.verizon.net)
[03:32:13] *** Joins: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au)
[03:33:02] *** Quits: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au) (Client Quit)
[03:33:17] *** Joins: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au)
[03:33:31] *** Quits: jkl (~jkl@user/jkl) (Quit: ZNC 1.8.2 - https://znc.in)
[03:40:01] *** Joins: jkl (~jkl@user/jkl)
[03:44:43] *** Quits: Eddward (~Eddward@207.138.204.132) (Ping timeout: 256 seconds)
[03:47:20] *** Quits: jkl (~jkl@user/jkl) (Quit: ZNC 1.8.2 - https://znc.in)
[03:50:01] *** Quits: jiqiren (~jiqiren@oh-hi.org) (Quit: leaving)
[03:52:02] *** Joins: burningserenity (~burningse@142-196-178-216.res.spectrum.com)
[03:53:16] *** Joins: karhunkynsii (~karhunkyn@user/karhunkynsi)
[03:57:32] *** Joins: jkl (~jkl@user/jkl)
[04:09:36] *** Quits: andlabs (~andlabs@ool-ad034a4d.dyn.optonline.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[04:13:48] *** Joins: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com)
[04:20:11] *** Joins: arinov_ (~arinov@31.142.27.189)
[04:30:02] *** Quits: zopsi (zopsi@2600:3c00::f03c:91ff:fe14:551f) (Quit: Oops)
[04:30:19] *** Joins: zopsi (zopsi@2600:3c00::f03c:91ff:fe14:551f)
[04:32:19] *** Quits: zoey (~zoey@2a02:8084:a080:9e00:3fae:994c:3fdc:274d) (Ping timeout: 256 seconds)
[04:38:02] *** Quits: Necoro (~Necoro@user/necoro) (Quit: WeeChat 3.2)
[04:38:58] *** Joins: andlabs (~andlabs@ool-ad034a4d.dyn.optonline.net)
[04:39:10] *** Joins: grayhemp (~grayhemp@107-203-253-139.lightspeed.sntcca.sbcglobal.net)
[04:46:02] *** Quits: predmijat (~predmijat@mail.strogopro.com) (Quit: bye)
[04:47:37] *** Joins: predmijat (~predmijat@mail.strogopro.com)
[04:47:42] *** Quits: cync (~blah@192.180.187.81.in-addr.arpa) (Quit: No Ping reply in 180 seconds.)
[04:49:05] *** Joins: cync (~blah@192.180.187.81.in-addr.arpa)
[04:52:58] *** Quits: amahl (~amahl@dsl-jklbng12-54fbca-64.dhcp.inet.fi) (Remote host closed the connection)
[04:54:10] *** Joins: cmburnett (~cmburnett@c-73-37-184-31.hsd1.mn.comcast.net)
[04:56:55] *** Quits: arinov_ (~arinov@31.142.27.189) (Ping timeout: 265 seconds)
[04:58:16] *** Joins: gggpkm (~gggpkm@60.10.194.47)
[04:58:43] *** Joins: gggp (~textual@60.10.194.47)
[05:04:04] <rk4> reminds me of https://lib.rs/crates/phf
[05:13:26] *** Quits: omegatron (~some@p5b056bc7.dip0.t-ipconnect.de) (Quit: What happened? You quit!)
[05:15:22] *** Quits: gggp (~textual@60.10.194.47) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[05:20:04] *** Joins: gggpkm_ (~gggpkm@60.10.194.47)
[05:22:58] *** Quits: gggpkm (~gggpkm@60.10.194.47) (Ping timeout: 272 seconds)
[05:23:22] *** Quits: cync (~blah@192.180.187.81.in-addr.arpa) (Quit: No Ping reply in 180 seconds.)
[05:24:45] *** Joins: cync (~blah@192.180.187.81.in-addr.arpa)
[05:28:55] *** Quits: gggpkm_ (~gggpkm@60.10.194.47) (Read error: Connection reset by peer)
[05:29:40] *** Joins: gggpkm (~gggpkm@60.10.194.47)
[05:36:26] *** Joins: gggpkm_ (~gggpkm@60.10.194.47)
[05:39:26] *** Quits: gggpkm (~gggpkm@60.10.194.47) (Ping timeout: 272 seconds)
[05:40:04] *** Quits: fikran (~fikran@pool-108-31-11-131.washdc.fios.verizon.net) (Ping timeout: 272 seconds)
[05:40:42] *** Quits: KekSi (~KekSi@x4db451d4.dyn.telefonica.de) (Ping timeout: 240 seconds)
[05:41:17] *** Joins: fikran (~fikran@pool-108-31-11-131.washdc.fios.verizon.net)
[05:44:49] *** Joins: KekSi (~KekSi@x4db62c11.dyn.telefonica.de)
[05:44:51] *** Quits: bodhi (~bodhi@c-73-93-87-220.hsd1.ca.comcast.net) (Ping timeout: 256 seconds)
[05:44:57] *** Joins: gggpkm (~gggpkm@60.10.194.47)
[05:47:02] *** Quits: gggpkm_ (~gggpkm@60.10.194.47) (Ping timeout: 272 seconds)
[05:53:25] *** Joins: gggpkm_ (~gggpkm@60.10.194.47)
[05:56:32] *** Quits: gggpkm (~gggpkm@60.10.194.47) (Ping timeout: 272 seconds)
[05:58:25] *** Quits: stmuk (~steve@15.43.187.81.in-addr.arpa) (Ping timeout: 244 seconds)
[06:01:24] *** Joins: penguwin2 (~penguwin@fribbledom.com)
[06:01:56] *** Quits: fgau (~fgau@mail.berliner-termindienst.de) (Ping timeout: 252 seconds)
[06:02:08] *** Joins: fgau (~fgau@mail.berliner-termindienst.de)
[06:02:11] *** Joins: binkers- (~binkers@user/binkers)
[06:02:27] *** Quits: binkers (~binkers@user/binkers) (Ping timeout: 268 seconds)
[06:03:02] *** Quits: penguwin (~penguwin@fribbledom.com) (Ping timeout: 252 seconds)
[06:03:02] *** penguwin2 is now known as penguwin
[06:14:32] *** Quits: cync (~blah@192.180.187.81.in-addr.arpa) (Quit: No Ping reply in 180 seconds.)
[06:14:44] *** Joins: cync (~blah@192.180.187.81.in-addr.arpa)
[06:17:50] *** Joins: Garb00 (~Garb0@user/garb0)
[06:18:20] *** Joins: adanwan_ (~adanwan@gateway/tor-sasl/adanwan)
[06:18:42] *** Quits: adanwan (~adanwan@gateway/tor-sasl/adanwan) (Remote host closed the connection)
[06:20:39] *** Quits: martinkennelly (~martinken@84.203.21.166) (Remote host closed the connection)
[06:20:57] *** Joins: martinkennelly (~martinken@84.203.21.166)
[06:21:14] *** Quits: Garb0 (~Garb0@user/garb0) (Ping timeout: 272 seconds)
[06:21:43] *** Quits: martinkennelly (~martinken@84.203.21.166) (Client Quit)
[06:23:33] *** Joins: frost (~frost@59.71.241.179)
[06:25:43] *** Joins: Guest53 (~textual@ool-43527ebe.dyn.optonline.net)
[06:31:33] *** Joins: cryocaustik (~cryocaust@user/cryocaustik)
[06:33:31] *** Quits: Guest53 (~textual@ool-43527ebe.dyn.optonline.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[06:36:26] *** Joins: menace (~someone@ppp-93-104-109-239.dynamic.mnet-online.de)
[06:38:18] *** Quits: Deknos (~someone@user/menace) (Ping timeout: 240 seconds)
[06:38:57] *** Quits: gggpkm_ (~gggpkm@60.10.194.47) (Ping timeout: 258 seconds)
[06:39:34] *** Joins: gggpkm (~gggpkm@60.10.194.47)
[06:40:27] *** Quits: andlabs (~andlabs@ool-ad034a4d.dyn.optonline.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[06:43:34] *** Quits: gggpkm (~gggpkm@60.10.194.47) (Remote host closed the connection)
[06:43:45] *** Joins: andlabs (~andlabs@ool-ad034a4d.dyn.optonline.net)
[06:43:53] *** Joins: gggpkm (~gggpkm@60.10.194.47)
[06:47:51] *** Joins: Guest53 (~textual@ool-43527ebe.dyn.optonline.net)
[06:48:30] *** Quits: gggpkm (~gggpkm@60.10.194.47) (Remote host closed the connection)
[06:48:33] *** Quits: Guest53 (~textual@ool-43527ebe.dyn.optonline.net) (Client Quit)
[06:49:18] *** Joins: gggpkm (~gggpkm@60.10.23.171)
[06:50:35] *** Quits: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au) (Ping timeout: 256 seconds)
[06:54:29] *** Joins: gggpkm_ (~gggpkm@60.10.23.171)
[06:54:53] *** Joins: emptyleg (~emptyleg@71.212.173.254)
[06:56:49] *** Quits: gggpkm (~gggpkm@60.10.23.171) (Ping timeout: 256 seconds)
[06:57:22] *** Joins: strubbl891941 (~strubbl@ipb21a9309.dynamic.kabel-deutschland.de)
[06:57:27] *** veegee_ is now known as veegee
[06:59:13] *** Quits: strubbl89194 (~strubbl@ipbcc10753.dynamic.kabel-deutschland.de) (Ping timeout: 268 seconds)
[07:01:59] *** Joins: gggp (~textual@60.10.23.171)
[07:02:35] *** Quits: andlabs (~andlabs@ool-ad034a4d.dyn.optonline.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[07:03:08] *** Quits: gggp (~textual@60.10.23.171) (Client Quit)
[07:10:39] *** Joins: andlabs (~andlabs@2607:fb90:f804:cc1:5ddd:e875:a11c:3f4b)
[07:12:07] *** Quits: gggpkm_ (~gggpkm@60.10.23.171) (Ping timeout: 256 seconds)
[07:18:31] *** Joins: andlabs_ (~andlabs@172.58.230.185)
[07:18:38] *** Joins: Eddward (~Eddward@207.138.204.132)
[07:21:45] *** Quits: andlabs (~andlabs@2607:fb90:f804:cc1:5ddd:e875:a11c:3f4b) (Ping timeout: 256 seconds)
[07:21:46] *** Joins: andlabs__ (~andlabs@2607:fb90:f80b:c6db:d98:3d2e:d9f0:8cae)
[07:23:03] *** Quits: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com) (Remote host closed the connection)
[07:24:35] *** Joins: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au)
[07:25:12] *** Quits: andlabs_ (~andlabs@172.58.230.185) (Ping timeout: 272 seconds)
[07:27:25] *** Quits: andlabs__ (~andlabs@2607:fb90:f80b:c6db:d98:3d2e:d9f0:8cae) (Ping timeout: 256 seconds)
[07:29:08] *** Joins: kupi (uid212005@id-212005.stonehaven.irccloud.com)
[07:29:47] *** Joins: andlabs (~andlabs@172.58.230.225)
[07:31:37] *** Joins: gggpkm_ (~gggpkm@60.10.194.47)
[07:33:37] *** Joins: andlabs_ (~andlabs@2607:fb90:f80e:e192:80a9:3718:15b3:6451)
[07:35:01] *** Quits: Torr (~Torr@user/torr) (Quit: leaving)
[07:36:42] *** Quits: andlabs (~andlabs@172.58.230.225) (Ping timeout: 240 seconds)
[07:38:00] *** Joins: andlabs (~andlabs@172.58.227.118)
[07:38:22] *** Quits: gggpkm_ (~gggpkm@60.10.194.47) (Ping timeout: 258 seconds)
[07:38:56] *** Joins: gggpkm (~gggpkm@60.10.194.47)
[07:39:19] *** Quits: andlabs_ (~andlabs@2607:fb90:f80e:e192:80a9:3718:15b3:6451) (Ping timeout: 256 seconds)
[07:40:16] *** Joins: andlabs_ (~andlabs@2607:fb90:f804:e4e9:94b8:f1d9:4b0b:985f)
[07:40:17] *** Quits: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au) (Ping timeout: 265 seconds)
[07:41:33] *** Quits: gregf (~gregf@user/gregf) (Quit: The Lounge - https://thelounge.chat)
[07:42:32] *** Joins: andlabs__ (~andlabs@172.58.230.228)
[07:44:12] *** Quits: andlabs (~andlabs@172.58.227.118) (Ping timeout: 272 seconds)
[07:45:52] *** Joins: andlabs (~andlabs@2607:fb90:f80d:3cae:31bd:1829:81b9:8354)
[07:46:07] *** Quits: andlabs_ (~andlabs@2607:fb90:f804:e4e9:94b8:f1d9:4b0b:985f) (Ping timeout: 256 seconds)
[07:47:11] *** Quits: andlabs (~andlabs@2607:fb90:f80d:3cae:31bd:1829:81b9:8354) (Client Quit)
[07:47:36] *** Joins: gregf (~gregf@user/gregf)
[07:49:31] *** Quits: andlabs__ (~andlabs@172.58.230.228) (Ping timeout: 256 seconds)
[07:53:28] *** Joins: davidkrauser (~davidkrau@user/davidkrauser)
[07:53:48] *** Joins: andlabs (~andlabs@71.190.119.164)
[07:53:49] *** Quits: davidkrauser (~davidkrau@user/davidkrauser) (Client Quit)
[07:54:32] *** Quits: cync (~blah@192.180.187.81.in-addr.arpa) (Quit: No Ping reply in 180 seconds.)
[07:55:29] *** Quits: lilgopher (~textual@c-73-51-174-246.hsd1.il.comcast.net) (Quit: Textual IRC Client: www.textualapp.com)
[07:55:54] *** Joins: cync (~blah@192.180.187.81.in-addr.arpa)
[08:02:02] *** Joins: Guest53 (~textual@ool-43527ebe.dyn.optonline.net)
[08:02:08] *** Joins: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au)
[08:02:15] *** Joins: gggpkm_ (~gggpkm@60.10.23.171)
[08:04:27] *** Quits: gggpkm (~gggpkm@60.10.194.47) (Ping timeout: 265 seconds)
[08:06:05] *** Joins: sono_ (~sono@107-209-210-210.lightspeed.sntcca.sbcglobal.net)
[08:07:07] *** Quits: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au) (Ping timeout: 258 seconds)
[08:07:29] *** Quits: justache (~justache@user/justache) (Quit: Ping timeout (120 seconds))
[08:07:29] *** Quits: frost (~frost@59.71.241.179) (Quit: Ping timeout (120 seconds))
[08:08:25] *** Joins: justache (~justache@user/justache)
[08:09:06] *** Quits: sono (~sono@107-209-210-210.lightspeed.sntcca.sbcglobal.net) (Ping timeout: 240 seconds)
[08:10:45] *** Joins: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au)
[08:11:31] *** Quits: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au) (Client Quit)
[08:11:45] *** Joins: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au)
[08:13:13] *** Joins: gggpkm (~gggpkm@60.10.23.171)
[08:14:27] *** Quits: gggpkm_ (~gggpkm@60.10.23.171) (Ping timeout: 256 seconds)
[08:15:04] *** Joins: stmuk (~steve@15.43.187.81.in-addr.arpa)
[08:19:21] *** Quits: adanwan_ (~adanwan@gateway/tor-sasl/adanwan) (Quit: _)
[08:19:33] *** Joins: adanwan (~adanwan@gateway/tor-sasl/adanwan)
[08:30:52] *** Joins: gggpkm_ (~gggpkm@60.10.194.47)
[08:31:20] *** Quits: gggpkm (~gggpkm@60.10.23.171) (Remote host closed the connection)
[08:31:37] *** Joins: Kane (~Kane@2a01:e34:ee89:5d90:610c:3ef6:c79a:ebf8)
[08:32:12] *** Joins: bodhi (~bodhi@c-73-93-87-220.hsd1.ca.comcast.net)
[08:36:57] *** Joins: gggpkm (~gggpkm@60.10.194.47)
[08:37:14] *** Quits: andlabs (~andlabs@71.190.119.164) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[08:38:46] *** Quits: gggpkm_ (~gggpkm@60.10.194.47) (Ping timeout: 265 seconds)
[08:40:23] *** Joins: gggpkm_ (~gggpkm@60.10.194.47)
[08:40:38] *** Joins: andlabs (~andlabs@71.190.119.164)
[08:43:07] *** Quits: gggpkm (~gggpkm@60.10.194.47) (Ping timeout: 265 seconds)
[08:48:54] *** Quits: particleflux (~particlef@ircb.hackthe.codes) (Quit: 418 I'm a teapot)
[08:49:06] *** Quits: a1paca (~a1paca@user/a1paca) (Quit: ZNC 1.8.2 - https://znc.in)
[08:49:17] *** Joins: particleflux (~particlef@ircb.hackthe.codes)
[08:49:25] *** Joins: a1paca (~a1paca@user/a1paca)
[08:49:49] *** thing_ is now known as thing
[08:49:54] *** Quits: burningserenity (~burningse@142-196-178-216.res.spectrum.com) (Quit: ZNC 1.8.2 - https://znc.in)
[08:50:46] *** Quits: Garb00 (~Garb0@user/garb0) (Quit: Garb00)
[08:52:03] *** Quits: emptyleg (~emptyleg@71.212.173.254) (Remote host closed the connection)
[08:57:17] <icy> Hi. How would I convert https://godocs.io/github.com/emersion/go-maildir#Flag to string? It's a []rune, and normally I can just string([]rune). But that doesn't work on this custom type.
[08:58:30] *** Quits: glik22 (~glik22@99-36-164-253.lightspeed.snjsca.sbcglobal.net) (Ping timeout: 252 seconds)
[08:59:36] *** Quits: _rubik (~wgriggs@user/rubik/x-6853868) (Quit: WeeChat 3.2)
[09:01:32] *** Quits: menace (~someone@ppp-93-104-109-239.dynamic.mnet-online.de) (Quit: menace)
[09:03:18] <KirkMcDonald> icy: It isn't a []rune, it's a rune.
[09:04:18] <icy> ... Oh.
[09:04:40] <icy> Ah, my bad: https://godocs.io/github.com/emersion/go-maildir#Dir.Flags
[09:04:44] <KirkMcDonald> That said, you can convert a rune to a string just fine: https://play.golang.org/p/NggrlETfAVg
[09:04:47] <icy> This returns a []Flag.
[09:05:01] <KirkMcDonald> Ahh.
[09:05:29] <icy> Yeah, I can't just string([]Flag), unfortunately.
[09:05:31] <KirkMcDonald> Then, yeah, you can't convert that to a string.
[09:06:01] <icy> Hmm.
[09:07:00] <icy> What options do I have? I guess I'll have to loop through it.
[09:07:26] <KirkMcDonald> Yeah, you'd need to copy it over to a []rune: https://play.golang.org/p/K7IeGOmfrKW
[09:07:54] <icy> Gotcha. Thanks!
[09:08:26] *** Quits: gggpkm_ (~gggpkm@60.10.194.47) (Ping timeout: 272 seconds)
[09:11:00] *** Quits: particleflux (~particlef@ircb.hackthe.codes) (Quit: 418 I'm a teapot)
[09:11:18] *** Joins: particleflux (~particlef@ircb.hackthe.codes)
[09:29:37] *** Quits: grayhemp (~grayhemp@107-203-253-139.lightspeed.sntcca.sbcglobal.net) (Quit: Connection closed)
[09:31:01] *** Joins: grayhemp (~grayhemp@107-203-253-139.lightspeed.sntcca.sbcglobal.net)
[09:38:51] *** Quits: kupi (uid212005@id-212005.stonehaven.irccloud.com) (Quit: Connection closed for inactivity)
[09:39:34] *** Quits: art_vandelay (~art_vande@bras-base-toroon63x9w-grc-21-174-89-102-174.dsl.bell.ca) (Read error: Connection reset by peer)
[09:40:19] *** Joins: art_vandelay (~art_vande@bras-base-toroon63x9w-grc-21-174-89-102-174.dsl.bell.ca)
[09:44:02] *** Quits: amigan (dramoray@dtvax.dynatron.me) (Quit: WeeChat 3.2)
[09:47:24] *** Joins: amigan (dramoray@dtvax.dynatron.me)
[09:53:16] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[09:58:09] *** Quits: arcatech (~arcatech@user/arcatech) (Ping timeout: 256 seconds)
[09:58:34] *** Joins: acagastya (~acagastya@wikinews/acagastya)
[10:03:35] *** Quits: Icedream (~icedream@hzn-b.serverkomplex.de) (Quit: A lol made me boom.)
[10:04:50] *** Quits: be3uykpy (~be3uykpy@141.226.9.247) (Quit: Leaving)
[10:05:00] *** Joins: jiqiren (~jiqiren@oh-hi.org)
[10:08:04] *** Joins: monoxane6 (~monoxane@119-18-17-227.771211.mel.static.aussiebb.net)
[10:08:35] *** Joins: Icedream (~icedream@hzn-b.serverkomplex.de)
[10:09:00] *** Quits: jybs (~james@110-175-225-162.static.tpgi.com.au) (Ping timeout: 272 seconds)
[10:09:13] *** Joins: jybs (~james@110-175-225-162.static.tpgi.com.au)
[10:09:14] *** Quits: Eddward (~Eddward@207.138.204.132) (Ping timeout: 272 seconds)
[10:09:26] *** Quits: monoxane (~monoxane@119-18-17-227.771211.mel.static.aussiebb.net) (Read error: Connection reset by peer)
[10:09:26] *** monoxane6 is now known as monoxane
[10:18:15] *** Joins: gggp (~textual@36.112.135.215)
[10:25:59] *** Joins: glik22 (~glik22@99-36-164-253.lightspeed.snjsca.sbcglobal.net)
[10:31:33] *** Parts: cmburnett (~cmburnett@c-73-37-184-31.hsd1.mn.comcast.net) ()
[10:35:06] *** Quits: glik22 (~glik22@99-36-164-253.lightspeed.snjsca.sbcglobal.net) (Ping timeout: 240 seconds)
[10:38:38] *** Quits: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au) (Ping timeout: 265 seconds)
[10:38:50] *** Quits: gggp (~textual@36.112.135.215) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[10:42:58] *** Joins: mikoto-chan (~mikoto-ch@ip-213-49-189-31.dsl.scarlet.be)
[10:44:36] *** Quits: znpy (~znpy@user/znpy) (Ping timeout: 268 seconds)
[10:47:54] *** Joins: shka (~herr@109.231.62.239)
[10:50:19] *** Joins: absc (~absc@dynamic-adsl-94-34-217-240.clienti.tiscali.it)
[10:51:22] *** Joins: glik22 (~glik22@99-36-164-253.lightspeed.snjsca.sbcglobal.net)
[10:55:26] *** Joins: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au)
[10:58:12] *** Quits: AquaL1te (~AquaL1te@user/aqual1te) (Quit: leaving)
[11:00:19] *** Joins: mrig (~mrig@user/mrig)
[11:13:48] *** Quits: glik22 (~glik22@99-36-164-253.lightspeed.snjsca.sbcglobal.net) (Ping timeout: 252 seconds)
[11:17:48] *** Joins: fef (~thedawn@user/thedawn)
[11:17:54] *** Joins: betelgeuse (~john2gb@94-225-47-8.access.telenet.be)
[11:19:58] *** Quits: betelgeuse (~john2gb@94-225-47-8.access.telenet.be) (Client Quit)
[11:21:42] *** Joins: betelgeuse (~john2gb@94-225-47-8.access.telenet.be)
[11:22:22] *** Quits: betelgeuse (~john2gb@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[11:23:53] *** Joins: betelgeuse (~john2gb@94-225-47-8.access.telenet.be)
[11:24:01] *** Joins: jcajka (~jcajka@89-24-144-111.customers.tmcz.cz)
[11:24:38] *** Quits: betelgeuse (~john2gb@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[11:26:08] *** Joins: betelgeuse (~john2gb@94-225-47-8.access.telenet.be)
[11:26:16] *** Quits: betelgeuse (~john2gb@94-225-47-8.access.telenet.be) (Client Quit)
[11:31:46] *** Quits: LiftLeft (~LiftLeft@154.21.28.239) (Ping timeout: 252 seconds)
[11:50:09] *** Joins: oxum (~oxum@136.185.148.86)
[11:50:59] *** Quits: koo7 (~koo6@89-24-13-235.customers.tmcz.cz) (Ping timeout: 258 seconds)
[11:52:43] *** Joins: normen (~normen@p200300d7173dc9004836a2f4f0c9faba.dip0.t-ipconnect.de)
[11:53:05] *** Parts: normen (~normen@p200300d7173dc9004836a2f4f0c9faba.dip0.t-ipconnect.de) (WeeChat 3.1)
[12:01:29] *** Joins: dmathieu (~textual@laubervilliers-659-1-148-137.w92-154.abo.wanadoo.fr)
[12:03:36] *** Joins: normen (~normen@p200300d7173dc9004836a2f4f0c9faba.dip0.t-ipconnect.de)
[12:05:12] *** Quits: normen (~normen@p200300d7173dc9004836a2f4f0c9faba.dip0.t-ipconnect.de) (Quit: WeeChat 3.1)
[12:05:54] *** Joins: normen (~normen@p200300d7173dc9004836a2f4f0c9faba.dip0.t-ipconnect.de)
[12:07:47] *** Quits: normen (~normen@p200300d7173dc9004836a2f4f0c9faba.dip0.t-ipconnect.de) (Client Quit)
[12:08:12] *** Joins: normen (~normen@p200300d7173dc9004836a2f4f0c9faba.dip0.t-ipconnect.de)
[12:08:25] *** Quits: normen (~normen@p200300d7173dc9004836a2f4f0c9faba.dip0.t-ipconnect.de) (Client Quit)
[12:09:15] *** Joins: normen (~normen@p200300d7173dc9004836a2f4f0c9faba.dip0.t-ipconnect.de)
[12:11:11] *** Quits: normen (~normen@p200300d7173dc9004836a2f4f0c9faba.dip0.t-ipconnect.de) (Client Quit)
[12:11:19] *** Quits: andlabs (~andlabs@71.190.119.164) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[12:12:01] *** Joins: normen (~normen@p200300d7173dc9004836a2f4f0c9faba.dip0.t-ipconnect.de)
[12:15:40] *** Joins: kupi (uid212005@id-212005.stonehaven.irccloud.com)
[12:15:54] *** Quits: mrlemke (~mrlemke@208.74.105.200) (Ping timeout: 272 seconds)
[12:25:41] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Remote host closed the connection)
[12:26:06] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[12:27:07] *** Quits: fef (~thedawn@user/thedawn) (Ping timeout: 244 seconds)
[12:28:41] *** Quits: pepee (~user@user/pepee) (Quit: bye $IRC)
[12:34:34] *** Quits: cmc (~methos@gateway/tor-sasl/cmc) (Remote host closed the connection)
[12:36:05] *** Joins: cmc (~methos@gateway/tor-sasl/cmc)
[12:43:46] *** Quits: art_vandelay (~art_vande@bras-base-toroon63x9w-grc-21-174-89-102-174.dsl.bell.ca) (Ping timeout: 272 seconds)
[12:45:07] *** Joins: art_vandelay (~art_vande@bras-base-toroon63x9w-grc-21-174-89-102-174.dsl.bell.ca)
[12:49:31] *** Joins: arinov_ (~arinov@178.240.158.75)
[12:52:31] *** Joins: amahl (~amahl@dsl-jklbng12-54fbca-64.dhcp.inet.fi)
[12:53:42] *** Joins: znpy (~znpy@user/znpy)
[12:56:09] *** Joins: glik22 (~glik22@99-36-164-253.lightspeed.snjsca.sbcglobal.net)
[12:58:38] *** Joins: bloony (~bloony@2a02:2121:281:fa22:1c13:86d4:5401:4)
[13:05:27] *** Joins: frost14 (~frost@59.71.241.179)
[13:07:55] *** Quits: dmathieu (~textual@laubervilliers-659-1-148-137.w92-154.abo.wanadoo.fr) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[13:08:57] *** Quits: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au) (Ping timeout: 265 seconds)
[13:09:44] *** Joins: gggpkm_ (~gggpkm@60.10.194.47)
[13:09:54] *** Quits: bloony (~bloony@2a02:2121:281:fa22:1c13:86d4:5401:4) (Ping timeout: 240 seconds)
[13:11:51] *** Quits: frost14 (~frost@59.71.241.179) (Quit: Connection closed)
[13:12:07] *** Joins: frost46 (~frost@59.71.241.179)
[13:13:18] *** Quits: frost46 (~frost@59.71.241.179) (Client Quit)
[13:13:34] *** Joins: frost24 (~frost@59.71.241.179)
[13:14:25] *** Quits: jai (~darkapex@user/darkapex) (Quit: node-irc says goodbye)
[13:15:21] *** Quits: frost24 (~frost@59.71.241.179) (Client Quit)
[13:15:42] *** Joins: dmathieu (~textual@laubervilliers-659-1-148-137.w92-154.abo.wanadoo.fr)
[13:19:07] *** Joins: dr0n (~nabromov@92.40.255.115.threembb.co.uk)
[13:24:35] *** gggpkm_ is now known as gggpkm
[13:27:19] *** Joins: frost (~frost@59.71.241.179)
[13:28:42] *** Joins: AquaL1te (~AquaL1te@user/aqual1te)
[13:29:30] *** Joins: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au)
[13:31:48] *** Quits: gggpkm (~gggpkm@60.10.194.47) (Ping timeout: 258 seconds)
[13:33:38] *** Quits: mollerup (~nmm@customer-212-237-103-18.ip4.gigabit.dk) (Read error: Connection reset by peer)
[13:33:56] *** Joins: mollerup (~nmm@customer-2a00-7660-1612-0168-496a-8588-c940-0fae.ip6.gigabit.dk)
[13:42:42] *** Quits: mollerup (~nmm@customer-2a00-7660-1612-0168-496a-8588-c940-0fae.ip6.gigabit.dk) (Ping timeout: 240 seconds)
[13:42:43] *** Joins: fef (~thedawn@user/thedawn)
[13:44:41] *** Quits: fef (~thedawn@user/thedawn) (Remote host closed the connection)
[13:47:30] *** Quits: grayhemp (~grayhemp@107-203-253-139.lightspeed.sntcca.sbcglobal.net) (Quit: Connection closed)
[13:50:05] *** Joins: Ergo^ (~ergo@91.238.59.144)
[14:02:28] *** Quits: arinov_ (~arinov@178.240.158.75) (Ping timeout: 258 seconds)
[14:03:00] *** Quits: iauc (~iauc@ti0061a400-1478.bb.online.no) (Quit: Client closed)
[14:03:43] *** Joins: Ohlov3179 (~Ohlov3@dyndsl-095-033-061-095.ewe-ip-backbone.de)
[14:07:26] *** Quits: Ohlov317 (~Ohlov3@dyndsl-085-016-106-080.ewe-ip-backbone.de) (Ping timeout: 265 seconds)
[14:09:11] *** Quits: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au) (Ping timeout: 256 seconds)
[14:11:36] *** Joins: arinov_ (~arinov@213.14.161.121)
[14:17:04] *** Joins: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au)
[14:17:20] *** Joins: eduardas (~eduardas@93.93.57.5)
[14:19:23] *** Joins: gggpkm (~gggpkm@60.10.194.47)
[14:21:11] *** Joins: jimmy (~jimmy___@2607:fa49:4b00:7000:1d4b:242d:4ae5:9449)
[14:23:55] *** Joins: gggpkm_ (~gggpkm@60.10.194.47)
[14:24:34] *** Quits: gggpkm (~gggpkm@60.10.194.47) (Killed (NickServ (GHOST command used by gggpkm_)))
[14:24:37] *** gggpkm_ is now known as gggpkm
[14:38:22] *** Joins: gggpkm_ (~gggpkm@124.126.15.211)
[14:41:16] *** Quits: gggpkm (~gggpkm@60.10.194.47) (Ping timeout: 265 seconds)
[14:42:09] *** Quits: dmathieu (~textual@laubervilliers-659-1-148-137.w92-154.abo.wanadoo.fr) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[14:42:20] <shibumi> Hi, I am a little bit confused about json.Decoder vs json.Unmarshal ... according to this blog article here (https://ahmet.im/blog/golang-json-decoder-pitfalls/) the decoder should only be used for json streams. I am dealing with HTTP body responses
[14:42:28] <shibumi> shall I use json decoder or json unmarshall?
[14:42:50] *** Joins: gggpkm (~gggpkm@36.112.134.194)
[14:44:16] *** Quits: gggpkm_ (~gggpkm@124.126.15.211) (Ping timeout: 252 seconds)
[14:48:19] *** Quits: Guest53 (~textual@ool-43527ebe.dyn.optonline.net) (Quit: Textual IRC Client: www.textualapp.com)
[14:48:54] *** Joins: Guest53 (~textual@ool-43527ebe.dyn.optonline.net)
[14:48:56] *** Joins: snoel (~snoel@78.48.117.224)
[14:49:24] *** Joins: dmathieu (~textual@laubervilliers-659-1-148-137.w92-154.abo.wanadoo.fr)
[14:49:31] *** Quits: Guest53 (~textual@ool-43527ebe.dyn.optonline.net) (Client Quit)
[14:50:57] <Sam> Probably they meant byte streams, not json streams. If you have []byte unmarshal is a nice shortcut, if you have io.Reader Decoder is what you want.
[14:52:15] *** Quits: snoel (~snoel@78.48.117.224) (Client Quit)
[14:55:53] *** Joins: gggpkm_ (~gggpkm@60.10.194.47)
[14:58:12] *** Quits: gggpkm (~gggpkm@36.112.134.194) (Ping timeout: 252 seconds)
[15:00:15] *** Quits: amahl (~amahl@dsl-jklbng12-54fbca-64.dhcp.inet.fi) (Remote host closed the connection)
[15:04:40] <sztanpet> and you get the http body as a stream originally
[15:05:06] *** Quits: dmathieu (~textual@laubervilliers-659-1-148-137.w92-154.abo.wanadoo.fr) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[15:15:16] *** Joins: gggp (~textual@60.10.194.47)
[15:15:30] *** Quits: rabbitear (~juice@142.93.115.104) (Remote host closed the connection)
[15:15:46] *** Quits: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au) (Ping timeout: 272 seconds)
[15:16:29] *** Joins: rabbitear (~juice@142.93.115.104)
[15:18:44] *** Quits: MrFantastik (~Thunderbi@cpe-69-204-101-67.buffalo.res.rr.com) (Read error: Connection reset by peer)
[15:19:01] *** Joins: MrFantastik (~Thunderbi@cpe-69-204-101-67.buffalo.res.rr.com)
[15:20:12] *** Quits: gggp (~textual@60.10.194.47) (Ping timeout: 272 seconds)
[15:20:47] *** Joins: arcy (~arcy@ip5b43c26f.dynamic.kabel-deutschland.de)
[15:21:03] *** Quits: gggpkm_ (~gggpkm@60.10.194.47) (Ping timeout: 258 seconds)
[15:21:53] *** Joins: gggp (~textual@60.10.194.47)
[15:24:01] *** Quits: sono_ (~sono@107-209-210-210.lightspeed.sntcca.sbcglobal.net) (Quit: When You're Taught Through Feelings~♪)
[15:28:16] *** Quits: arinov_ (~arinov@213.14.161.121) (Ping timeout: 252 seconds)
[15:31:17] *** Joins: virtualroot (~virtualro@user/virtualroot)
[15:31:31] *** Joins: src (~src@user/src)
[15:32:19] *** Joins: arinov_ (~arinov@213.14.161.121)
[15:43:18] *** Quits: MrFantastik (~Thunderbi@cpe-69-204-101-67.buffalo.res.rr.com) (Ping timeout: 252 seconds)
[15:46:10] *** Quits: gggp (~textual@60.10.194.47) (Ping timeout: 272 seconds)
[15:46:57] *** Joins: gggp (~textual@36.112.128.143)
[15:58:21] *** Quits: oxum (~oxum@136.185.148.86) (Remote host closed the connection)
[15:58:57] *** Quits: gggp (~textual@36.112.128.143) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[15:59:20] *** Joins: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au)
[15:59:21] *** Quits: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au) (Client Quit)
[15:59:34] *** Joins: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au)
[15:59:35] *** Joins: oxum (~oxum@136.185.148.86)
[16:04:13] *** Quits: oxum (~oxum@136.185.148.86) (Ping timeout: 256 seconds)
[16:06:41] *** Joins: gggpkm_ (~gggpkm@60.10.194.47)
[16:13:54] *** Joins: oxum (~oxum@136.185.148.86)
[16:14:40] *** Quits: gggpkm_ (~gggpkm@60.10.194.47) (Ping timeout: 272 seconds)
[16:15:55] *** Joins: gggpkm (~gggpkm@60.10.194.47)
[16:18:28] *** Quits: jespada (~jespada@90.254.247.46) (Ping timeout: 272 seconds)
[16:18:50] *** Quits: imm_ (~imm_@user/imm/x-3405860) (Ping timeout: 268 seconds)
[16:18:54] *** Quits: oxum (~oxum@136.185.148.86) (Ping timeout: 265 seconds)
[16:18:57] *** Quits: jimmy (~jimmy___@2607:fa49:4b00:7000:1d4b:242d:4ae5:9449) (Ping timeout: 256 seconds)
[16:19:05] *** Joins: jespada (~jespada@90.254.247.46)
[16:22:02] *** Joins: jimmy (~jimmy___@2607:fa49:4b00:7000:41e0:47b8:75c1:9b24)
[16:22:16] *** Quits: kupi (uid212005@id-212005.stonehaven.irccloud.com) (Quit: Connection closed for inactivity)
[16:22:39] *** Joins: Giedrius (~giedrius@5.133.65.65)
[16:24:41] *** Joins: oxum (~oxum@136.185.148.86)
[16:27:48] <debugloop> Hi folks, is there a way to unpack a map to arguments? i.e. if MyStruct has a string-type field A and I have a map[string]string containing {a:foo}, then I want  &MyStruct{**theMap} (pythons kwargs unpacking basically)
[16:29:01] <bookworm> no*
[16:29:08] *** Quits: oxum (~oxum@136.185.148.86) (Ping timeout: 252 seconds)
[16:29:16] <bookworm> (probably with reflection, but don't do that)
[16:30:06] <debugloop> bookworm: thanks, too bad... I wasn't about to ;)
[16:33:19] *** Joins: dmathieu (~textual@laubervilliers-659-1-148-137.w92-154.abo.wanadoo.fr)
[16:33:23] *** Joins: fef (~thedawn@user/thedawn)
[16:34:13] <siXy> debugloop: sure you can. You can use a loop. Which is the same way as python does it under the hood. The only difference is go is a language where things happen explicitly, so you need to type it out.
[16:36:53] *** Joins: arthur (~arthur@2a02:390:9151:0:1c94:e381:bf81:7129)
[16:38:16] <acagastya> Hi, I have in `go/src` a project `myproj`.  Inside `myproj` there is `main.go` and also `foo/bar.go` -- `bar.go` has a function `baz()`.  How do I call it in `main.go`?
[16:39:21] <fizzie> You don't, if it's literally `baz()` rather than `Baz()`.
[16:39:40] <fizzie> Names that start with lowercase are not exported outside the package they're in, and different directory -> different package.
[16:40:03] <sztanpet> also https://golang.org/doc/code
[16:53:22] <mrig> Hello, is there a norm in go, for the resting value of an index inside an object; the previously added array value or one above it? Say for a stack or a ringbuffer?
[16:55:15] <mrig> I suppose after is always going to be the most logical for the first instance.
[16:56:16] <sztanpet> whats an index of an object?
[16:56:45] <sztanpet> what does it mean that its value is resting?
[16:57:25] <mrig> any object that contains an array which is being used as memory, to access the last value added as an example.
[16:57:25] *** Quits: dmathieu (~textual@laubervilliers-659-1-148-137.w92-154.abo.wanadoo.fr) (Read error: Connection reset by peer)
[16:57:41] *** Joins: normen_ (~normen@p200300d7173dc900a9596ed88ac0c260.dip0.t-ipconnect.de)
[16:57:59] *** Joins: dmathieu (~textual@laubervilliers-659-1-148-137.w92-154.abo.wanadoo.fr)
[16:58:41] <mrig> I think that I'd just forgotten the case where if you leave it on the index of the last added value, this makes adding the first value messy; I was wondering if there were norms concerning this kind of code.
[16:58:51] <sztanpet> can you maybe show what you are talking about on play.golang?
[16:58:53] *** Quits: dmathieu (~textual@laubervilliers-659-1-148-137.w92-154.abo.wanadoo.fr) (Client Quit)
[16:59:14] <mrig> As mention for a stack or a ringbuffer, right will post something.
[16:59:58] <mrig> This is the file that I'm working on : https://play.golang.org/p/vouRj8093Rf
[17:00:19] *** Quits: normen (~normen@p200300d7173dc9004836a2f4f0c9faba.dip0.t-ipconnect.de) (Ping timeout: 256 seconds)
[17:00:21] *** normen_ is now known as normen
[17:01:39] *** Joins: yoonkn (~user@175.197.208.79)
[17:01:41] *** Joins: dmathieu (~textual@laubervilliers-659-1-148-137.w92-154.abo.wanadoo.fr)
[17:02:31] <mrig> Oh actually that is ri-1 == i not as is, i've just swapped that over.
[17:03:19] <mrig> r.i is the last added value in the ringbuffer, which is the index inside of an object that I've mentioned.
[17:05:22] *** Joins: martinkennelly (~martinken@84.203.21.166)
[17:07:42] *** Quits: cync (~blah@192.180.187.81.in-addr.arpa) (Quit: No Ping reply in 180 seconds.)
[17:08:37] <acagastya> fizzie: now that I think of, I have, in `main.go` `main()` and `foo()` -- I want to move `foo` to a seperate file.  Should I do packages/modules or what kind of import would I need?
[17:09:04] *** Joins: cync (~blah@192.180.187.81.in-addr.arpa)
[17:11:28] <siXy> mrig: that looks very flawed in quite a number of ways, and so far is quite a long way away from being a real ringbuffer. Have you considered reading some other ringbuffer implementations to get an idea of what you should be doing?
[17:12:29] <sztanpet> and i have still no idea about what you were asking
[17:13:25] <siXy> In fact the more I look at it, the more convinced I am that you should probably start from scratch, AFTER spending some time actually reading and understanding how this is done properly.
[17:13:29] <mrig> siXy: I am just putting some things down on paper at the moment, have not tested or anything at all as such am formulating it. I've written these before and read from the language source code too; Which is why I was asking really, the way that it was done in the source code is to hold the index on the next bucket that is to be used.
[17:13:58] <sztanpet> oh, is this about the implementation of a ring buffer?
[17:14:12] <mrig> siXy: this is a buffer that swaps out and moves the content for any preexisting values, you see?
[17:14:17] <sztanpet> about the way you handle some index regards to that
[17:14:30] <sztanpet> doesnt look like the right data structure honestly
[17:14:36] *** Quits: bodhi (~bodhi@c-73-93-87-220.hsd1.ca.comcast.net) (Ping timeout: 252 seconds)
[17:14:45] <mrig> well the question was about indexes in this kind of implementation more generally.
[17:14:54] <mrig> well it is not a ring buffer.
[17:15:19] <mrig> it is a queue that bubbles up any pre existing values.
[17:15:31] <mrig> but based upon a ringbuffer.
[17:15:40] *** Joins: Eddward (~Eddward@207.138.204.132)
[17:16:11] <mrig> but the question was more generally about indexes, to keep them at the current bucket or one above.
[17:16:20] <mrig> Quite a simple question.
[17:17:10] <siXy> mrig: The problem is that your starting point is so incorrect there's no real good answer to that question. What you've written won't do what you're saying you want.
[17:17:27] <mrig> The ringbuffer that I've read in the past in a golang source code implementation, kept it at +1 so when peeking at the top, you use i-1
[17:17:49] <mrig> siXy: how can my starting point be incorrect, I don't really understand?
[17:18:33] <mrig> needing to have a queue that replaces old instances of a new addition by moving the data and adding it to the top?
[17:19:34] <mrig> I just sent my current code from vim by pressing GoPlay, as code was requested, I didn't really understand why code examples were needed to answer the question.
[17:19:51] <mrig> I know that code will not work, it is scribbling.
[17:20:02] <mrig> formulation.
[17:23:38] <siXy> mrig: Your data structure is missing a lot of things that it needs to have, and has at least one entirely pointless int that does nothing.
[17:24:23] <acagastya> I wonder if same can be done for variables.
[17:24:26] <mrig> You are jumping ahead of the gun a little I am just deciding whether to store the index at the last added value or one above it.
[17:24:32] <siXy> "Where should I put <poorly described thing> in <non-functional data structure>?" isn't really a question with a clear answer.
[17:25:41] *** Joins: Guest2024 (~ryan@75-109-154-192.nbrncmtk01.res.dyn.suddenlink.net)
[17:25:44] <mrig> the question is simply is it a standard practice to keep the index inside of an object that references an array or slice bucket, at the index or one above it.
[17:27:24] <siXy> "keep the index at the index?" what? one above what? None of that makes any sense to me.
[17:27:32] *** Joins: paulgrmn (~paulgrmn@user/paulgrmn)
[17:28:01] <huf> i think this is about, say, a stack
[17:28:04] <mrig> same thing as the pointer to a stack in c
[17:28:11] <mrig> huf: yes as previously mentioned.
[17:28:13] <huf> do you leave the stack pointer pointing to the last thing or the first free spot?
[17:28:45] <mrig> yes exactly.
[17:28:55] <siXy> Well, competent implementations would usually do both. You want a read index AND a write index, most likely.
[17:29:37] <mrig> well yes, a read will often use index-1
[17:29:53] <siXy> But not always, which is one of several things that's wrong with your current code
[17:30:26] <mrig> ignore the current code, it is not codified as I have not decided upon how to leave my index.
[17:30:42] <mrig> which was why I took pause to ask this question :)
[17:31:05] *** Joins: andlabs (~andlabs@71.190.119.164)
[17:31:24] <mrig> I posted code to give context only, as stack and index did not seem to resonate.
[17:32:16] *** Joins: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com)
[17:33:56] <mrig> would likely not leave the code in so many function either, just doing so whilst thinking about how to implement the bubbling up (for want of a better term, this is not a heap) of any previous use of the value. A heap would be an interesting way to implement this now that I come to think of it. But overkill for my current requirement.
[17:35:42] *** Quits: arcy (~arcy@ip5b43c26f.dynamic.kabel-deutschland.de) (Quit: Konversation terminated!)
[17:37:19] *** Joins: bodhi (~bodhi@c-73-93-87-220.hsd1.ca.comcast.net)
[17:38:26] *** Joins: thing_ (~thing@user/thing)
[17:38:44] *** Quits: thing (~thing@user/thing) (Quit: thing)
[17:39:24] *** Joins: ecraven (ecraven@user/nex)
[17:39:35] <ecraven> is there a way to show parameters that go build ... could take?
[17:40:06] <mrig> siXy: which int does nothing? Would you use the len() function instead, when printing a buffer that is not full?
[17:40:16] *** Joins: miasuji (~miasuji@184-96-251-92.hlrn.qwest.net)
[17:41:44] *** Quits: bodhi (~bodhi@c-73-93-87-220.hsd1.ca.comcast.net) (Ping timeout: 258 seconds)
[17:47:51] *** Quits: frost (~frost@59.71.241.179) (Quit: Connection closed)
[17:48:20] <nevivurn> erani: `go help build`
[17:49:16] <nevivurn> For stuff like -ldflags and such, you can check stuff like `go doc cmd/link`
[17:51:19] *** Quits: HisShadow (~HisShadow@188.170.84.198) (Ping timeout: 256 seconds)
[17:52:12] <siXy> mrig: len/cap are "free" - there's no reason to store the same value as a separate int.
[17:52:20] *** Parts: ecraven (ecraven@user/nex) (Bye)
[17:52:21] *** thing_ is now known as thing
[17:52:31] *** Joins: kdsch (~kdsch@89.45.224.170)
[17:52:42] *** Joins: bloony (~bloony@2a02:2121:107:e338:1c13:86d4:5401:2)
[17:52:57] <mrig> right, I see that, am just removing the l value as I write, to use len instead.
[17:53:03] <mrig> thanks for the pointer
[17:53:08] <Anderson-D> Is there any way to `go get` the dependencies without actual sources, only with `go.mod` & `go.sum`?
[17:53:17] <mrig> the code that I'd read previously was using this l value.
[17:53:32] <Anderson-D> I'm trying to reduce docker cache invalidation by copying only `go.mod` & `go.sum` before doing `go get`
[17:53:48] <nevivurn> Anderson-D: go mod download should do it
[17:55:56] <Anderson-D> Is `go mod download` using `go.mod` for downloads? I'm trying it and it just gets stuck
[17:56:28] <Anderson-D> Oh, nvm, it worked!
[17:56:29] <Anderson-D> Thanks
[17:56:33] <nevivurn> yay
[17:57:02] *** Quits: qrpnxz (~qrpnxz@user/qrpnxz) (Ping timeout: 272 seconds)
[17:57:52] *** Quits: kdsch (~kdsch@89.45.224.170) (Ping timeout: 252 seconds)
[17:58:33] <mrig> oh that is a point, I don't even need the m as that is the same as the cap() value.
[18:05:17] *** Joins: omegatron (~some@p5b056bc7.dip0.t-ipconnect.de)
[18:06:10] *** Joins: kdsch (~kdsch@86.106.121.209)
[18:06:23] *** Joins: davidkrauser (~davidkrau@user/davidkrauser)
[18:07:26] *** Quits: dmathieu (~textual@laubervilliers-659-1-148-137.w92-154.abo.wanadoo.fr) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[18:08:44] *** Quits: arthur (~arthur@2a02:390:9151:0:1c94:e381:bf81:7129) (Remote host closed the connection)
[18:09:12] *** Quits: kdsch (~kdsch@86.106.121.209) (Client Quit)
[18:09:35] *** Joins: arthur (~arthur@2a02:390:9151:0:1c94:e381:bf81:7129)
[18:11:11] *** Joins: qrpnxz (~qrpnxz@user/qrpnxz)
[18:11:47] *** Joins: gggpkm_ (~gggpkm@60.10.194.47)
[18:12:03] *** Quits: gggpkm (~gggpkm@60.10.194.47) (Killed (NickServ (GHOST command used by gggpkm_)))
[18:12:15] *** Quits: fef (~thedawn@user/thedawn) (Ping timeout: 244 seconds)
[18:12:26] *** gggpkm_ is now known as gggpkm
[18:17:56] *** Joins: Torr (~Torr@user/torr)
[18:18:24] *** Joins: bodhi (~bodhi@c-73-93-87-220.hsd1.ca.comcast.net)
[18:19:41] *** Quits: gggpkm (~gggpkm@60.10.194.47) (Remote host closed the connection)
[18:20:40] *** Joins: MrFantastik (~Thunderbi@rrcs-184-74-43-235.nys.biz.rr.com)
[18:20:54] *** Quits: MrFantastik (~Thunderbi@rrcs-184-74-43-235.nys.biz.rr.com) (Client Quit)
[18:21:11] *** Quits: arinov_ (~arinov@213.14.161.121) (Ping timeout: 265 seconds)
[18:25:32] *** Quits: mrig (~mrig@user/mrig) (Ping timeout: 265 seconds)
[18:25:55] *** Joins: mrig (~mrig@user/mrig)
[18:25:56] *** Quits: virtualroot (~virtualro@user/virtualroot) ()
[18:26:47] *** Joins: StyXman (~mdione@2a01:e0a:5e5:4790:20d:b9ff:fe52:1a0)
[18:27:47] <StyXman> has anyone used encode/pem.Block.Decode()? from the docs https://golang.org/pkg/encoding/pem/#Decode it seems I can't tell from EOF from garbled input
[18:28:50] *** Joins: imm_ (~imm_@user/imm/x-3405860)
[18:35:04] *** Joins: edrocks (~Ed@user/edrocks)
[18:42:04] *** Joins: sysh (~sysh@212.237.182.120)
[18:51:03] *** Joins: dmathieu (~textual@78.203.212.55)
[18:53:14] *** Joins: The_Loko (~The_Loko@86.127.244.52)
[18:59:22] *** Quits: cync (~blah@192.180.187.81.in-addr.arpa) (Quit: No Ping reply in 180 seconds.)
[19:00:44] *** Joins: cync (~blah@192.180.187.81.in-addr.arpa)
[19:01:06] *** Joins: arinov_ (~arinov@178.240.158.75)
[19:01:31] *** Joins: burningserenity (~burningse@2603:9001:f01:ad99::1000)
[19:04:31] *** Joins: internut_ (~internut@2601:280:4e00:16f0:c4d6:6dfe:b47c:bd4f)
[19:05:16] <internut_> I have a question. I need to do an http Get, but, I need to process the Headers BEFORE reading the body.
[19:05:19] <internut_> is this possible?
[19:05:38] *** Joins: MrFantastik (~Thunderbi@rrcs-184-74-43-235.nys.biz.rr.com)
[19:10:19] <Tv_> internut_: the response body is just an io.Reader, consume it when you wish
[19:10:47] <Tv_> it's literally impossible to *not* read http headers before consuming the body
[19:10:53] <internut_> the Body doesn't have the headers in it
[19:10:56] <Tv_> i heartily recommend familiarizing yourself with HTTP the protocol
[19:11:22] <Tv_> internut_: are you asking how to see http response headers?
[19:11:48] <internut_> Well, my question is about the http library in Go, not the protocol so much
[19:12:09] <internut_> by the time I read the Body, the headers have already been stripped off
[19:12:39] <Tv_> you mean parsed and collected and handed to you at the same time as you got the io.Reader for the body
[19:12:49] <Tv_> https://golang.org/pkg/net/http/#Response
[19:14:09] <internut_> resp, err := client.Do(req)
[19:14:44] <internut_> okay, wait maybe I see the error in my thinking
[19:26:36] *** Quits: AquaL1te (~AquaL1te@user/aqual1te) (Ping timeout: 252 seconds)
[19:32:35] *** Joins: LiftLeft (~LiftLeft@154.21.23.33)
[19:33:13] *** Joins: Guest27 (~Guest27@2600:1702:4610:5990:8cbe:b579:47f9:9fa0)
[19:36:07] *** Parts: acagastya (~acagastya@wikinews/acagastya) ()
[19:36:13] *** Joins: arcatech (~arcatech@user/arcatech)
[19:38:25] *** Quits: dmathieu (~textual@78.203.212.55) (Ping timeout: 256 seconds)
[19:39:33] *** Quits: burningserenity (~burningse@2603:9001:f01:ad99::1000) (Ping timeout: 256 seconds)
[19:40:45] *** Joins: burningserenity (~burningse@102.129.152.16)
[19:41:11] *** Joins: dmathieu (~textual@2a01:e34:ecbd:4370:d09:6481:df3d:eadb)
[19:41:29] *** Joins: pepee (~user@user/pepee)
[19:43:05] *** Joins: goldfish (~goldfish@user/goldfish)
[19:45:54] *** Quits: mikoto-chan (~mikoto-ch@ip-213-49-189-31.dsl.scarlet.be) (Ping timeout: 240 seconds)
[19:51:00] *** Quits: Guest27 (~Guest27@2600:1702:4610:5990:8cbe:b579:47f9:9fa0) (Quit: Client closed)
[19:51:32] *** Quits: yoonkn (~user@175.197.208.79) (Read error: Connection reset by peer)
[19:54:38] *** Quits: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au) (Quit: WeeChat 3.1)
[19:58:08] *** Quits: burningserenity (~burningse@102.129.152.16) (Ping timeout: 252 seconds)
[19:59:20] *** Joins: burningserenity (~burningse@102.129.152.118)
[20:05:08] *** Joins: mrlemke (~mrlemke@208.74.105.200)
[20:08:33] *** Quits: miasuji (~miasuji@184-96-251-92.hlrn.qwest.net) (Ping timeout: 258 seconds)
[20:14:05] *** Quits: sysh (~sysh@212.237.182.120) (Read error: Connection reset by peer)
[20:14:07] *** Joins: Garb0 (~Garb0@user/garb0)
[20:14:21] *** Quits: eduardas (~eduardas@93.93.57.5) (Quit: Konversation terminated!)
[20:16:02] *** Joins: sysh (~sysh@212.237.182.120)
[20:16:11] *** Quits: Giedrius (~giedrius@5.133.65.65) (Remote host closed the connection)
[20:21:35] *** Joins: miasuji (~miasuji@184-96-251-92.hlrn.qwest.net)
[20:22:18] *** Quits: arinov_ (~arinov@178.240.158.75) (Ping timeout: 272 seconds)
[20:22:32] *** Quits: absc (~absc@dynamic-adsl-94-34-217-240.clienti.tiscali.it) (Quit: Leaving.)
[20:24:53] *** Quits: Garb0 (~Garb0@user/garb0) (Ping timeout: 256 seconds)
[20:25:50] *** Quits: davidkrauser (~davidkrau@user/davidkrauser) (Quit: Leaving)
[20:28:47] *** Quits: Guest2024 (~ryan@75-109-154-192.nbrncmtk01.res.dyn.suddenlink.net) (Ping timeout: 265 seconds)
[20:34:35] *** Quits: lungaro (~lungaro@99-117-118-33.lightspeed.sndgca.sbcglobal.net) (Ping timeout: 265 seconds)
[20:36:19] *** Joins: d18n (~d18n@81.128.219.20)
[20:36:34] *** Quits: d18n (~d18n@81.128.219.20) (Client Quit)
[20:46:04] *** Joins: arinov_ (~arinov@178.240.158.75)
[20:46:37] *** Quits: PedroG1 (~android@45.77.216.181) (Quit: Got you)
[20:47:16] *** Joins: PedroG1 (~android@45.77.216.181)
[20:47:53] *** Joins: wgr (~wgr@user/wgr)
[20:52:15] <wgr> hey does anyone know if a net.Conn Read could return less han len(b)? the documentation is not clear if it's needed to loop while n < len(b)
[20:56:01] *** Joins: davidkrauser (~davidkrau@user/davidkrauser)
[20:57:54] *** Quits: arinov_ (~arinov@178.240.158.75) (Ping timeout: 240 seconds)
[20:58:42] *** Joins: fef (~thedawn@user/thedawn)
[20:59:40] <siXy> wgr: conn.Read is an io.Reader implementation, and so you can read the docs of the interface here: https://golang.org/pkg/io/#Reader
[21:00:20] <Tv_> also, https://golang.org/pkg/io/#ReadFull
[21:03:09] <wgr> siXy: thanks, i was not sure if net.Conn Read method was meant to be an io.Reader
[21:03:53] <wgr> Tv_: also thanks, im implementing net.Conn, so im more worried about the semantics of Read itself
[21:04:54] <Tv_> yeah that seems to be a rare case that doesn't explicitly state that it's an io.Reader implementation
[21:04:57] <Tv_> often the docs do
[21:05:05] <Tv_> that might be worth an issue, if you wish
[21:06:39] *** Joins: emptyleg (~emptyleg@71.212.173.254)
[21:11:28] *** Quits: atriix (~atriix@c83-254-2-32.bredband.tele2.se) (Ping timeout: 252 seconds)
[21:13:57] *** Joins: NCS_One (~NCS_One@bl11-90-133.dsl.telepac.pt)
[21:14:49] *** Quits: davidkrauser (~davidkrau@user/davidkrauser) (Quit: Leaving)
[21:16:41] *** Joins: mmfood (~mmfood@194.103.157.64)
[21:21:56] *** Quits: jcajka (~jcajka@89-24-144-111.customers.tmcz.cz) (Remote host closed the connection)
[21:23:41] *** Joins: be3uykpy (~be3uykpy@141.226.9.247)
[21:39:40] *** Joins: menace (~someone@2001:a61:533:5a01:a49f:a81:6c54:19a4)
[21:39:41] *** Quits: menace (~someone@2001:a61:533:5a01:a49f:a81:6c54:19a4) (Changing host)
[21:39:41] *** Joins: menace (~someone@user/menace)
[21:42:48] *** Quits: be3uykpy (~be3uykpy@141.226.9.247) (Remote host closed the connection)
[21:43:11] *** Joins: be3uykpy (~be3uykpy@141.226.9.247)
[21:43:39] *** Quits: treethought (treethou@138.68.49.251) (Ping timeout: 256 seconds)
[21:45:25] *** Quits: andlabs (~andlabs@71.190.119.164) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[21:48:22] *** Joins: be3uykpy_ (~be3uykpy@141.226.9.247)
[21:48:27] *** Quits: be3uykpy (~be3uykpy@141.226.9.247) (Quit: Leaving)
[21:51:02] *** Quits: cync (~blah@192.180.187.81.in-addr.arpa) (Quit: No Ping reply in 180 seconds.)
[21:51:22] *** Joins: treethought (~treethoug@138.68.49.251)
[21:52:14] *** Joins: zoey (~zoey@2a02:8084:a080:9e00:3fae:994c:3fdc:274d)
[21:52:24] *** Joins: cync (~blah@192.180.187.81.in-addr.arpa)
[21:54:10] *** Joins: elf_fortrez (~elf_fortr@adsl-72-50-4-120.prtc.net)
[21:55:11] <debugloop> siXy: not quite, pretty sure that python's unpack syntax are actual operators and not overloadable :) but of course, the interpreter will do the looping at some point, the thing I was hung up on is that that doesn't happen on instanciation... but it isn't like I got a constructor to worry about in Go :) thanks!
[21:59:16] *** Quits: edrocks (~Ed@user/edrocks) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[22:00:30] *** Quits: endigma (~endigma@134.41.133.214) (Ping timeout: 250 seconds)
[22:05:25] *** Quits: strubbl891941 (~strubbl@ipb21a9309.dynamic.kabel-deutschland.de) (Quit: The Lounge - https://thelounge.github.io)
[22:06:38] *** Joins: SincereFox (uid337158@user/sincerefox)
[22:06:44] *** Joins: endigma (~endigma@134.41.133.214)
[22:06:55] *** Joins: strubbl891941 (~strubbl@178.26.147.9)
[22:07:26] *** Quits: burningserenity (~burningse@102.129.152.118) (Ping timeout: 272 seconds)
[22:07:31] *** Joins: burningserenity_ (~burningse@102.129.152.26)
[22:12:36] *** Quits: dmathieu (~textual@2a01:e34:ecbd:4370:d09:6481:df3d:eadb) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[22:16:44] *** Joins: Garb0 (~Garb0@user/garb0)
[22:23:44] *** Joins: hugotty (~user@51.159.70.14)
[22:24:45] *** Joins: kdsch (~kdsch@89.45.224.100)
[22:29:53] *** Quits: elf_fortrez (~elf_fortr@adsl-72-50-4-120.prtc.net) (Quit: Client closed)
[22:30:04] *** Quits: fef (~thedawn@user/thedawn) (Ping timeout: 244 seconds)
[22:39:25] *** Joins: DeltaNova (~DeltaNova@user/deltanova)
[22:39:52] *** Quits: bea (~bea@user/bea) (Quit: POOF!)
[22:46:15] *** Joins: andlabs (~andlabs@71.190.119.164)
[22:55:54] *** Quits: dr0n (~nabromov@92.40.255.115.threembb.co.uk) (Ping timeout: 240 seconds)
[22:58:23] *** Joins: Ox151 (~user@user/ox151)
[23:01:54] *** Quits: Eddward (~Eddward@207.138.204.132) (Ping timeout: 272 seconds)
[23:02:43] <Ox151> hello, say i have a set of characters I want to replace {a, b, c, d} and I want to replace them with {w, x, y, z} how would I go about that? eg, ahhhhahhhhhbhhc would be whhhhwhhhhhxhhy
[23:06:09] <fizzie> If they're always just single characters, you could consider strings.Map. Otherwise, strings.Replacer.
[23:07:46] <fizzie> https://play.golang.org/p/A_AeNJd6rvw and so on.
[23:07:51] *** Joins: oxum (~oxum@136.185.148.86)
[23:10:25] <fizzie> Or https://play.golang.org/p/G8RWTgzeEcD with strings.Replacer.
[23:10:36] <Ox151> fizzie: thanks that makes sense. and what do you mean if theyre always just single chracters? what would be the alternate case with a string? are you meaning if you dont want ab to be changed to wx? so if combinations of the set are in some order dont replace?
[23:11:09] *** Joins: elgraz (~elgraz@151.65.7.224)
[23:12:38] *** Quits: oxum (~oxum@136.185.148.86) (Ping timeout: 265 seconds)
[23:13:51] *** Parts: kdsch (~kdsch@89.45.224.100) (WeeChat 2.8)
[23:14:01] *** Quits: elgraz (~elgraz@151.65.7.224) (Client Quit)
[23:14:11] *** Joins: elgraz (~elgraz@151.65.7.224)
[23:20:48] <j416> Ox151: he means, if you are replacing "a" with "xy", instead of just "x", i.e. not char by char, but whole strings.
[23:21:40] *** Parts: StyXman (~mdione@2a01:e0a:5e5:4790:20d:b9ff:fe52:1a0) (http://quassel-irc.org - Chat comfortably. Anywhere.)
[23:22:54] *** Quits: keiser0091075 (~keiser@83.25.198.9.ipv4.supernova.orange.pl) (Quit: The Lounge - https://thelounge.chat)
[23:23:54] *** Joins: keiser0091075 (~keiser@83.25.198.9.ipv4.supernova.orange.pl)
[23:29:15] *** Quits: shiroyasha (~shiroyash@ec2-3-124-70-31.eu-central-1.compute.amazonaws.com) (Quit: WeeChat 3.1)
[23:29:17] *** Quits: __alex (~alex@ip5f5afef3.dynamic.kabel-deutschland.de) (Ping timeout: 268 seconds)
[23:31:06] *** Joins: betelgeuse (~john2gb@94-225-47-8.access.telenet.be)
[23:33:02] *** Joins: iauc (~iauc@ti0061a400-1478.bb.online.no)
[23:33:05] *** Joins: dmathieu (~textual@78.203.212.55)
[23:39:59] *** Quits: be3uykpy_ (~be3uykpy@141.226.9.247) (Remote host closed the connection)
[23:40:21] *** Joins: be3uykpy_ (~be3uykpy@141.226.9.247)
[23:40:47] *** Joins: theoceaniscool (~theoceani@93.177.121.14)
[23:41:22] *** Joins: Eddward (~Eddward@207.138.204.132)
[23:44:31] *** Joins: Garb00 (~Garb0@user/garb0)
[23:45:28] *** Quits: dmathieu (~textual@78.203.212.55) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[23:47:26] *** Quits: Garb0 (~Garb0@user/garb0) (Ping timeout: 258 seconds)
[23:48:27] *** Quits: elgraz (~elgraz@151.65.7.224) (Quit: Leaving)
[23:52:02] *** Quits: Garb00 (~Garb0@user/garb0) (Ping timeout: 258 seconds)
[23:59:46] *** Quits: shka (~herr@109.231.62.239) (Ping timeout: 252 seconds)
