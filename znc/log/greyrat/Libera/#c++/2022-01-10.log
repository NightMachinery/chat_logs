[00:00:31] *** Quits: T`aZ (~TaZ@user/taz/x-9470768) (Ping timeout: 256 seconds)
[00:02:06] *** Joins: T`aZ (~TaZ@user/taz/x-9470768)
[00:05:03] *** Joins: Fairy (~Fairy@2001:464a:4992:0:bdfd:8ef1:211a:77dc)
[00:08:00] <CarloWood> I have a template<typename T> ...   that is defined in namespace X.  How can I disable the template when T is not a type defined in namespace X?
[00:09:08] <anyone> what's the point of doing that
[00:09:38] <CarloWood> To avoid a use of overloaded operator '<<' is ambiguous
[00:10:14] <anyone> if something offers a *generic* interface to me, I would damn well want to use my own type.
[00:10:15] <CarloWood> It finds the template in the current namespace AND in the namespace of the type with ADL. So I want to disable the one in the current namespace.
[00:10:20] <Oxyd> Well you can't disable it based on the namespace.
[00:10:24] *** Quits: LuksNuke (~LuksNuke@gateway/tor-sasl/luksnuke) (Remote host closed the connection)
[00:10:43] *** Joins: LuksNuke (~LuksNuke@gateway/tor-sasl/luksnuke)
[00:10:48] *** Quits: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon) (Ping timeout: 276 seconds)
[00:10:49] <phrosty> you can't; practically you'd just have to make all the types in that namespace implement some pattern to test for
[00:11:22] <anyone> CarloWood: Interesting. Happen to have a testcase?
[00:15:25] *** Quits: jehelset (~jeh@2001:4644:4144:0:e2d4:e8ff:fedf:f070) (Ping timeout: 240 seconds)
[00:15:46] <CarloWood> I'll try to come up with one.
[00:16:13] *** Quits: T`aZ (~TaZ@user/taz/x-9470768) (Ping timeout: 240 seconds)
[00:18:01] *** Joins: Garbanzo (~Garbanzo@2602:304:6eac:dc10::46)
[00:18:05] <CarloWood> Or maybe I should just forget about using a catch-all operator<< (aka, a template).
[00:18:07] *** Joins: T`aZ (~TaZ@user/taz/x-9470768)
[00:18:27] *** Quits: LuksNuke (~LuksNuke@gateway/tor-sasl/luksnuke) (Remote host closed the connection)
[00:21:44] <anyone> https://wandbox.org/permlink/tQTImvXR6oUX058M
[00:22:27] <anyone> if it's like that, then there's no ADL (not that I can see)
[00:26:33] <kalven> just embed a static constexpr string_view password = "sUp3rSeCrEt"; in all your types in X and then have a concept that checks the password and overload << for that concept.
[00:26:51] *** Quits: r-g (~r-g@51.15.187.53) (Quit: r-g)
[00:27:36] <CarloWood> Here is a test case: https://wandbox.org/permlink/rcXMRCITFiEDl6Dt
[00:28:36] *** Quits: EdFletcher (~PKD@user/edfletcher) (Quit: Quit.)
[00:29:18] *** Joins: RabidToaster (~Thunderbi@bras-base-otwaon234vw-grc-15-50-100-215-56.dsl.bell.ca)
[00:29:26] <CarloWood> So what I need is that the template at line 21 only accepts a T that defined in namespace M.
[00:29:35] <CarloWood> that is*
[00:30:36] *** Joins: sa02irc (~mbax@155-079-043-212.ip-addr.inexio.net)
[00:31:03] *** Joins: EdFletcher (~PKD@user/edfletcher)
[00:32:19] *** Quits: sa02irc (~mbax@155-079-043-212.ip-addr.inexio.net) (Remote host closed the connection)
[00:34:13] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Ping timeout: 240 seconds)
[00:40:29] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[00:40:47] <anyone> What you can do is rewrite the failing line to
[00:40:53] <anyone> M::operator<<(std::cout, a) << std::endl;
[00:41:08] <CarloWood> nah
[00:41:29] <CarloWood> I idea is that I can just write all objects to ostreams without jumping through hoops.
[00:47:08] *** Quits: rito_ (~rito_gh@45.112.243.149) (Quit: Leaving)
[00:47:59] *** Quits: irrenhaus3 (~xenon@HSI-KBW-046-005-003-233.hsi8.kabel-badenwuerttemberg.de) (Quit: Lost terminal)
[00:49:06] *** Joins: seninha (~seninha@user/seninha)
[00:52:25] *** Quits: magla (~gelignite@55d47b01.access.ecotel.net) (Quit: Stay safe!)
[00:52:59] *** Quits: SomeonePaul (~SomeonePa@c-24-34-241-188.hsd1.ma.comcast.net) (Quit:  Try HydraIRC -> http://www.hydrairc.com <-)
[00:53:17] *** Joins: SomeonePaul (~SomeonePa@c-24-34-241-188.hsd1.ma.comcast.net)
[00:54:34] *** Quits: SomeonePaul (~SomeonePa@c-24-34-241-188.hsd1.ma.comcast.net) (Client Quit)
[00:54:44] <CarloWood> I got something working... https://wandbox.org/permlink/5q96t2qZ53JWJkb5
[00:54:55] *** Joins: SomeonePaul (~SomeonePa@c-24-34-241-188.hsd1.ma.comcast.net)
[00:55:16] <CarloWood> Or rather https://wandbox.org/permlink/bItws2dWzGUCSciI
[00:56:51] *** Quits: SomeonePaul (~SomeonePa@c-24-34-241-188.hsd1.ma.comcast.net) (Client Quit)
[00:57:10] *** Joins: SomeonePaul (~SomeonePa@c-24-34-241-188.hsd1.ma.comcast.net)
[00:58:19] *** Joins: luizfrds (~Luiz@152.250.243.147)
[00:58:28] *** Quits: T`aZ (~TaZ@user/taz/x-9470768) (Ping timeout: 256 seconds)
[01:00:28] *** Joins: T`aZ (~TaZ@user/taz/x-9470768)
[01:01:13] *** Joins: Brett[Air] (~Brett@124.148.79.4)
[01:01:21] *** Quits: pulse (~pulse@user/pulse) (Remote host closed the connection)
[01:01:42] *** Joins: pulse (~pulse@user/pulse)
[01:03:46] *** Quits: SomeonePaul (~SomeonePa@c-24-34-241-188.hsd1.ma.comcast.net) (Quit:  HydraIRC -> http://www.hydrairc.com <-)
[01:06:36] *** Quits: Leone (~Leo@157.52.18.77) ()
[01:12:27] *** Quits: RoKenn (~RoKenn@user/rokenn) (Quit: NSA proxy service interrupted)
[01:12:56] *** Joins: Leone (~Leo@157.52.18.77)
[01:12:57] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[01:12:59] *** Joins: rgrinberg (~textual@2806:265:5401:8cd:18b:fa2e:c948:1d68)
[01:14:37] *** Quits: zmt00 (~zmt00@user/zmt00) (Ping timeout: 240 seconds)
[01:14:53] *** Joins: AbleBacon (~AbleBacon@user/AbleBacon)
[01:32:17] *** Quits: john99 (~johnny@138.62.221.87.dynamic.jazztel.es) (Remote host closed the connection)
[01:32:46] *** Joins: bzyx (~quassel@89-69-20-238.dynamic.chello.pl)
[01:34:44] *** Quits: arinov (~arinov@31.142.76.178) (Ping timeout: 256 seconds)
[01:36:34] *** Joins: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon)
[01:40:45] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[01:40:52] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[01:40:52] *** ChanServ sets mode: +v npaperbot
[01:42:48] *** Joins: sabry (~sabry@197.37.72.225)
[01:45:46] *** Joins: bedouin_ (sid523379@id-523379.hampstead.irccloud.com)
[01:46:21] *** Joins: aeg (~aeg@215-052-180-159.dynamic.caiway.nl)
[01:47:06] *** Joins: kit_ten (~u0_a391@2603-6010-a141-6fa3-950d-0150-5311-7e6b.res6.spectrum.com)
[01:49:19] *** Quits: bigRoo (~user@73.181.dsl.syd.iprimus.net.au) (Ping timeout: 256 seconds)
[01:51:01] *** Quits: kit-ten (~u0_a391@2600:380:a434:56d9:6ab3:5bed:adee:69d0) (Ping timeout: 240 seconds)
[01:52:10] *** Joins: noarb (~noarb@user/noarb)
[01:54:21] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Read error: Connection reset by peer)
[01:55:26] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[01:55:51] *** Quits: Leone (~Leo@157.52.18.77) (Read error: Connection reset by peer)
[01:56:57] *** Joins: blackout69 (~blackout6@net-109-117-245-237.cust.vodafonedsl.it)
[01:57:15] *** Joins: elastic_1 (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[01:57:30] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Read error: Connection reset by peer)
[02:01:25] *** Quits: T`aZ (~TaZ@user/taz/x-9470768) (Ping timeout: 240 seconds)
[02:01:59] *** Quits: elastic_1 (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Read error: Connection reset by peer)
[02:02:02] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[02:02:20] *** Quits: jsbach (~jsbach@2a01:c22:3576:8400:5c0d:1d5f:eb51:9dd2) (Ping timeout: 252 seconds)
[02:03:26] *** Joins: T`aZ (~TaZ@user/taz/x-9470768)
[02:04:10] *** Quits: sabry (~sabry@197.37.72.225) (Quit: Client closed)
[02:05:31] *** Joins: Betal (~Betal@user/betal)
[02:07:25] *** Quits: Fairy (~Fairy@2001:464a:4992:0:bdfd:8ef1:211a:77dc) (Ping timeout: 240 seconds)
[02:14:45] *** Joins: jsbach (~jsbach@2a01:c22:3576:8400:485:57f6:a6f7:e592)
[02:18:37] *** Quits: T`aZ (~TaZ@user/taz/x-9470768) (Ping timeout: 240 seconds)
[02:20:36] *** Joins: T`aZ (~TaZ@user/taz/x-9470768)
[02:26:12] *** Joins: jehelset (~jeh@2001:4644:4144:0:e2d4:e8ff:fedf:f070)
[02:26:52] *** Quits: Schrostfutz (~Schrostfu@55d4263e.access.ecotel.net) (Ping timeout: 256 seconds)
[02:32:40] *** Quits: pizdets_ (~pizdets@183.182.115.92) (Ping timeout: 250 seconds)
[02:33:50] *** Joins: pizdets (~pizdets@183.182.111.169)
[02:34:07] *** Quits: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon) (Quit: Leaving)
[02:34:24] *** Joins: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon)
[02:37:58] *** Joins: anandn (~anandn@2601:600:a27f:d92d:d5cd:456:23f2:7291)
[02:39:21] *** Quits: GreenResponse (~tomek@r-45-155-148-237.gpon.bialnet.pl) (Quit: Leaving)
[02:39:41] *** Quits: jdavfsxd (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Quit: jdavfsxd)
[02:40:19] *** Joins: jdavfsxd (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[02:40:46] *** Quits: jsbach (~jsbach@2a01:c22:3576:8400:485:57f6:a6f7:e592) (Quit: Leaving)
[02:44:56] *** Quits: tolog (~tolog@91.193.6.10) (Remote host closed the connection)
[02:47:24] *** Parts: blackout69 (~blackout6@net-109-117-245-237.cust.vodafonedsl.it) ()
[02:51:06] *** Quits: nejni-marji (~nejni-mar@user/nejni-marji) (Ping timeout: 256 seconds)
[02:51:44] *** Joins: Burgundy (~yomon@82.76.72.88)
[02:55:33] <CarloWood> When M::C is derived from N::A shouldn't it find N::f(N::A const&) when calling f(c), where c is type M::C.
[02:56:40] *** Quits: rgrinberg (~textual@2806:265:5401:8cd:18b:fa2e:c948:1d68) (Remote host closed the connection)
[02:57:04] <CarloWood> Oh - I had forgotten a 'const&' somewhere... now it fails: https://wandbox.org/permlink/MmJLyHhaxy1G9ooh
[02:57:21] <CarloWood> The question then is: how to fix this?
[02:57:37] *** Joins: rgrinberg (~textual@177.246.219.153)
[02:57:43] <CarloWood> I want that
[02:57:46] <CarloWood> template<typename T>
[02:57:46] <CarloWood> constexpr bool in_namespace_N<T, std::void_t<decltype(only_in_N(std::declval<T>()))>> = true;
[02:58:09] <CarloWood> fails, for T = M::C (which is derived from N::A).
[02:58:45] <CarloWood> But this still compiles, aka find N::only_in_N(N::A const&) when T is M::C :/
[02:58:50] <CarloWood> finds*
[02:59:19] *** Joins: stonkey (~stonkey@user/stonkey)
[02:59:44] *** Quits: evelyette (~Eleanor@178.79.105.181) (Ping timeout: 256 seconds)
[03:05:24] *** Quits: jehelset (~jeh@2001:4644:4144:0:e2d4:e8ff:fedf:f070) (Remote host closed the connection)
[03:09:36] *** Joins: g0zart (~g0zart@gateway/vpn/pia/g0zart)
[03:10:17] *** Quits: plastico1 (~plastico@neomutt/plastico) (Quit: WeeChat 3.4)
[03:10:55] *** Quits: RabidToaster (~Thunderbi@bras-base-otwaon234vw-grc-15-50-100-215-56.dsl.bell.ca) (Ping timeout: 256 seconds)
[03:22:17] *** Joins: jehelset (~jeh@2001:4644:4144:0:e2d4:e8ff:fedf:f070)
[03:24:49] *** Joins: seninha (~seninha@user/seninha)
[03:25:33] *** Joins: chenqisu1 (~bhca7d@183.217.201.21)
[03:26:46] *** Quits: seninha (~seninha@user/seninha) (Client Quit)
[03:26:57] *** Quits: LucaTM (~LucaTM@user/lucatm) (Quit: Textual IRC Client: www.textualapp.com)
[03:28:01] *** Joins: Jantz (~IceChat95@118-93-132-243.dsl.dyn.ihug.co.nz)
[03:28:04] *** Quits: Jantz (~IceChat95@118-93-132-243.dsl.dyn.ihug.co.nz) (Excess Flood)
[03:29:37] *** Quits: T`aZ (~TaZ@user/taz/x-9470768) (Ping timeout: 256 seconds)
[03:30:14] *** Quits: tk (~tk@ircpuzzles/staff/tk) (Quit: Well, this is unexpected.)
[03:30:39] *** Joins: tk (~tk@ircpuzzles/staff/tk)
[03:31:36] *** Joins: T`aZ (~TaZ@user/taz/x-9470768)
[03:33:48] *** Quits: Tokamak (~Tokamak@172.58.188.35) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[03:34:13] *** Quits: Soni (~quassel@autistic.space) (Ping timeout: 240 seconds)
[03:36:12] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[03:41:13] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[03:46:37] *** Quits: Zogatribe (Zogatribe@user/zogatribe) (Ping timeout: 256 seconds)
[03:51:09] *** Quits: roadt_ (~roadt@114.100.129.3) (Ping timeout: 256 seconds)
[03:52:49] *** Joins: RangerBobVA (~bmaddox@user/rangerbobva)
[03:55:49] *** Joins: frost (~frost@user/frost)
[04:01:17] *** Joins: chozorho (~chozorho@c-69-250-72-103.hsd1.md.comcast.net)
[04:01:21] *** Quits: bebyx (~Thunderbi@user/bebyx) (Ping timeout: 256 seconds)
[04:01:59] *** Joins: nejni-marji (~nejni-mar@user/nejni-marji)
[04:02:00] *** Quits: nejni-marji (~nejni-mar@user/nejni-marji) (Client Quit)
[04:02:33] *** Joins: nejni-marji (~nejni-mar@user/nejni-marji)
[04:04:04] *** Joins: roadt_ (~roadt@60.168.93.72)
[04:04:05] *** Joins: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net)
[04:04:43] *** Quits: RangerBobVA (~bmaddox@user/rangerbobva) (Quit: Leaving)
[04:04:52] *** Joins: Soni (~quassel@autistic.space)
[04:06:27] *** Quits: SKiTZO_ (~dark@64.89-10-146.nextgentel.com) (Ping timeout: 256 seconds)
[04:07:49] *** Quits: frost (~frost@user/frost) (Ping timeout: 240 seconds)
[04:08:34] *** Joins: seninha (~seninha@user/seninha)
[04:09:00] *** Joins: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse)
[04:17:44] *** Quits: xkuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[04:20:05] *** Joins: _SKiTZO (~dark@64.89-10-146.nextgentel.com)
[04:20:05] *** Joins: xkuru (~xkuru@user/xkuru)
[04:20:48] *** Joins: frost (~frost@user/frost)
[04:21:37] <Alipha> Aardwolf: FYI, with `template<typename T> void test(T (*f)(T x)) {}` then the following does compile: `test(+[](int x) { return x; });`. Note the +. Unary + will convert a captureless lambda (with no auto parameters) into a function pointer
[04:23:02] *** Quits: stonkey (~stonkey@user/stonkey) (Ping timeout: 256 seconds)
[04:23:35] *** Joins: crankslider (~slidercra@user/slidercrank)
[04:23:38] *** Quits: g0zart (~g0zart@gateway/vpn/pia/g0zart) (Quit: Leaving)
[04:26:46] *** Joins: Fairy (~Fairy@ti0004a400-0210.bb.online.no)
[04:27:41] *** Quits: Forsaken87 (~quassel@2a02:908:1866:e360:88b0:2032:220f:3f73) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[04:28:07] *** Quits: rgrinberg (~textual@177.246.219.153) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[04:29:28] *** Joins: Forsaken87 (~quassel@2a02:908:1866:e360:88b0:2032:220f:3f73)
[04:30:24] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[04:36:48] *** Joins: lunix00 (~lunix00@2804:14c:6321:900d:e97c:ffd8:4c4e:d5f5)
[04:40:56] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[04:41:35] *** Quits: lxsameer (~lxsameer@user/lxsameer) (Ping timeout: 256 seconds)
[04:45:21] *** Joins: MarkT- (markt@S0106244bfe907043.vs.shawcable.net)
[04:45:57] <MarkT-> How can I fix this:  https://godbolt.org/z/Mb89WbfMP
[04:48:15] <MarkT-> Anyone?
[04:48:32] *** Quits: frost (~frost@user/frost) (Ping timeout: 256 seconds)
[04:48:34] <MarkT-> Bueller?
[04:48:57] <anyone> What about me?
[04:49:25] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[04:50:30] *** Joins: forgotmynick (uid24625@id-24625.hampstead.irccloud.com)
[04:50:32] <MarkT-> I was quoting a movie, being faced with near deafening silence
[04:53:04] *** Quits: Burgundy (~yomon@82.76.72.88) (Ping timeout: 256 seconds)
[04:55:22] *** Parts: MarkT- (markt@S0106244bfe907043.vs.shawcable.net) ()
[05:00:13] *** Quits: Mooncairn (~mooncairn@user/mooncairn) (Ping timeout: 240 seconds)
[05:02:39] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 276 seconds)
[05:03:08] *** Quits: TonyStone (~TonyStone@2603-7080-8607-c36a-9cdb-69bc-753b-1e50.res6.spectrum.com) (Remote host closed the connection)
[05:11:09] *** Joins: TonyStone (~TonyStone@2603-7080-8607-c36a-9cdb-69bc-753b-1e50.res6.spectrum.com)
[05:11:12] *** Joins: SomeonePaul (~SomeonePa@c-24-34-241-188.hsd1.ma.comcast.net)
[05:15:08] *** Quits: lunix00 (~lunix00@2804:14c:6321:900d:e97c:ffd8:4c4e:d5f5) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[05:18:26] *** Quits: nejni-marji (~nejni-mar@user/nejni-marji) (Ping timeout: 256 seconds)
[05:18:44] *** Quits: SomeonePaul (~SomeonePa@c-24-34-241-188.hsd1.ma.comcast.net) (Quit:  HydraIRC -> http://www.hydrairc.com <- Like it?  Visit #hydrairc on Freenode)
[05:26:06] *** Joins: NEYi (~NEYi@109.251.216.38)
[05:26:09] *** Joins: PJBoy (~PJBoy@user/pjboy)
[05:28:29] *** PJBoy is now known as Guest5916
[05:28:29] *** Quits: Guest5916 (~PJBoy@user/pjboy) (Killed (tantalum.libera.chat (Nickname regained by services)))
[05:28:33] *** Joins: PJBoy (~PJBoy@user/pjboy)
[05:31:20] *** Joins: AmR (~AmREiSa@41.238.31.212)
[05:34:27] *** Joins: frost (~frost@user/frost)
[05:40:45] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[05:40:55] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[05:40:55] *** ChanServ sets mode: +v npaperbot
[05:54:00] *** Joins: Lazenca (~lazenca@user/lazenca)
[05:57:56] *** Joins: lunix00 (~lunix00@2804:14c:6321:900d:59ed:78f6:d0f0:e463)
[05:58:45] *** Quits: Pook (~Pook@2001:8a0:f996:1400:ddd6:1f40:3146:40af) (Quit: Leaving)
[05:59:22] *** Quits: frost (~frost@user/frost) (Ping timeout: 256 seconds)
[06:01:26] *** Joins: Carbonflux (~Carbonflu@c-66-235-54-179.sea.wa.customer.broadstripe.net)
[06:07:15] *** Joins: frost (~frost@user/frost)
[06:09:41] *** Joins: leduyquang753 (~leduyquan@user/leduyquang753)
[06:11:10] *** Quits: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl) (Read error: Connection reset by peer)
[06:12:56] *** Joins: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl)
[06:20:11] *** Quits: frost (~frost@user/frost) (Ping timeout: 256 seconds)
[06:23:14] *** Joins: mattallmill (~mattallmi@ip68-103-130-85.ks.ok.cox.net)
[06:24:36] *** Joins: frost (~frost@user/frost)
[06:26:02] *** Quits: dld (~davidlowr@2601:197:600:1210:31ff:a804:81e3:5196) (Ping timeout: 240 seconds)
[06:26:50] *** Joins: ironman (~ironman@2405:201:1010:b033:bad0:8910:44c9:da61)
[06:27:23] *** Joins: dld (~davidlowr@2601:197:600:1210:a837:f325:7d6a:5246)
[06:27:45] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Remote host closed the connection)
[06:29:49] *** Quits: Fairy (~Fairy@ti0004a400-0210.bb.online.no) (Ping timeout: 256 seconds)
[06:34:21] *** Quits: segnior (segnior@user/segnior) (Ping timeout: 256 seconds)
[06:36:13] *** Joins: rgrinberg (~textual@2806:265:5401:8cd:18b:fa2e:c948:1d68)
[06:36:31] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
[06:37:11] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 256 seconds)
[06:38:03] *** Joins: lh_cat (~lh_mouse@mingw-w64/developer/lhmouse)
[06:41:18] *** Quits: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse) (Ping timeout: 256 seconds)
[06:41:21] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[06:42:41] *** Quits: xkuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[06:43:54] *** Quits: SaEeDIRHA (~saeed@bras-base-mtrlpq02hsy-grc-04-174-93-252-228.dsl.bell.ca) (Quit: Leaving)
[06:54:57] *** Quits: frost (~frost@user/frost) (Ping timeout: 240 seconds)
[06:55:25] *** Quits: jehelset (~jeh@2001:4644:4144:0:e2d4:e8ff:fedf:f070) (Ping timeout: 240 seconds)
[06:57:08] *** Joins: Jantz (~IceChat95@118-93-132-243.dsl.dyn.ihug.co.nz)
[06:57:33] *** Quits: Jantz (~IceChat95@118-93-132-243.dsl.dyn.ihug.co.nz) (Excess Flood)
[07:03:31] *** Joins: Jantz (~IceChat95@118-93-132-243.dsl.dyn.ihug.co.nz)
[07:03:36] *** Quits: Jantz (~IceChat95@118-93-132-243.dsl.dyn.ihug.co.nz) (Excess Flood)
[07:08:17] *** Quits: Dizidentu (~aresg@modemcable151.154-19-135.mc.videotron.ca) (Quit: WeeChat 3.2)
[07:10:32] *** Quits: nicholaus04 (~nicholaus@2607:fb90:e589:e2b9:d5ee:56de:0:7ca) (Quit: WeeChat 3.4)
[07:12:07] *** Joins: Jantz (~IceChat95@118-93-132-243.dsl.dyn.ihug.co.nz)
[07:12:38] *** Quits: Jantz (~IceChat95@118-93-132-243.dsl.dyn.ihug.co.nz) (Excess Flood)
[07:14:33] *** Joins: segnior (segnior@user/segnior)
[07:15:22] *** Quits: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br) (Quit: leaving)
[07:17:46] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Quit: Ex-Chat)
[07:18:00] *** Joins: dyeplexer (~dyeplexer@user/dyeplexer)
[07:18:58] *** Joins: Jantz (~IceChat95@118-93-132-243.dsl.dyn.ihug.co.nz)
[07:19:26] *** Quits: Jantz (~IceChat95@118-93-132-243.dsl.dyn.ihug.co.nz) (Excess Flood)
[07:19:30] *** Quits: segnior (segnior@user/segnior) (Read error: Connection reset by peer)
[07:22:46] *** Joins: arinov (~arinov@213.194.126.155)
[07:26:33] *** Quits: rgrinberg (~textual@2806:265:5401:8cd:18b:fa2e:c948:1d68) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[07:29:49] *** Joins: Jantz (~IceChat95@118-93-132-243.dsl.dyn.ihug.co.nz)
[07:30:13] *** Quits: rayw (~ray@cpc83999-pool15-2-0-cust1.15-1.cable.virginm.net) (Ping timeout: 240 seconds)
[07:30:19] *** Quits: Jantz (~IceChat95@118-93-132-243.dsl.dyn.ihug.co.nz) (Excess Flood)
[07:34:13] *** Quits: kit_ten (~u0_a391@2603-6010-a141-6fa3-950d-0150-5311-7e6b.res6.spectrum.com) (Ping timeout: 240 seconds)
[07:36:34] *** Joins: Jantz (~IceChat95@118-93-132-243.dsl.dyn.ihug.co.nz)
[07:37:07] *** Quits: Jantz (~IceChat95@118-93-132-243.dsl.dyn.ihug.co.nz) (Excess Flood)
[07:37:37] *** Joins: kit_ten (~u0_a391@cpe-76-190-178-139.neo.res.rr.com)
[07:39:52] *** Joins: Jantz (~IceChat95@118-93-132-243.dsl.dyn.ihug.co.nz)
[07:40:59] *** Quits: Jantz (~IceChat95@118-93-132-243.dsl.dyn.ihug.co.nz) (Excess Flood)
[07:41:22] *** Quits: arinov (~arinov@213.194.126.155) (Ping timeout: 256 seconds)
[07:49:58] *** Quits: forgotmynick (uid24625@id-24625.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[07:54:10] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Remote host closed the connection)
[08:00:45] *** Joins: hinata (~hinata@2409:4042:d98:f536:7120:a20:9229:980c)
[08:04:03] *** Joins: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net)
[08:05:45] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Client Quit)
[08:05:49] *** Quits: T`aZ (~TaZ@user/taz/x-9470768) (Ping timeout: 240 seconds)
[08:07:40] *** Joins: Jantz (~IceChat95@118-93-132-243.dsl.dyn.ihug.co.nz)
[08:07:58] *** Joins: T`aZ (~TaZ@user/taz/x-9470768)
[08:08:01] *** Quits: pulse (~pulse@user/pulse) (Quit: pulse)
[08:08:21] *** Quits: Jantz (~IceChat95@118-93-132-243.dsl.dyn.ihug.co.nz) (Excess Flood)
[08:08:25] *** Quits: tbcr (~tbcr@107.13.189.161) (Ping timeout: 256 seconds)
[08:08:33] *** Joins: tbcr_ (~tbcr@107.13.189.161)
[08:11:38] *** Joins: Jantz (~IceChat95@118-93-132-243.dsl.dyn.ihug.co.nz)
[08:11:45] *** Quits: Jantz (~IceChat95@118-93-132-243.dsl.dyn.ihug.co.nz) (Excess Flood)
[08:12:13] *** Quits: T`aZ (~TaZ@user/taz/x-9470768) (Ping timeout: 240 seconds)
[08:13:14] *** Joins: T`aZ (~TaZ@user/taz/x-9470768)
[08:15:38] *** Joins: Jantz (~IceChat95@2407:7000:8d04:100:2009:c7d3:533:666c)
[08:15:46] *** Quits: Jantz (~IceChat95@2407:7000:8d04:100:2009:c7d3:533:666c) (Excess Flood)
[08:17:11] *** Joins: Inst (~delicacie@c-98-208-218-119.hsd1.fl.comcast.net)
[08:17:15] <Inst> I guess this is half trolling
[08:17:33] <Inst> but I know what monads are, but not what objects are
[08:17:34] <Inst> lol
[08:17:49] *** Joins: Atque (~Atque@user/atque)
[08:18:50] *** Joins: techsurvivor (~don@89.45.90.201)
[08:21:36] *** Joins: Jantz (~IceChat95@118-93-132-243.dsl.dyn.ihug.co.nz)
[08:24:14] *** Quits: techsurvivor (~don@89.45.90.201) (Quit: discord)
[08:25:03] *** Joins: don (~don@89.45.90.201)
[08:27:03] *** Joins: Fairy (~Fairy@2001:464a:4992:0:55d4:c070:9ca0:8896)
[08:29:02] *** Quits: Yruama (~Yruama@2a01:cb15:8128:c100:8634:97ff:fe6e:86ac) (Remote host closed the connection)
[08:35:03] *** Quits: Jantz (~IceChat95@118-93-132-243.dsl.dyn.ihug.co.nz) (Ping timeout: 256 seconds)
[08:36:01] <Garbanzo> Objects are like values
[08:40:20] *** Quits: bitmask (~bitmask@c-73-215-237-27.hsd1.nj.comcast.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[08:45:47] *** Joins: Jantz (~IceChat95@118-93-132-243.dsl.dyn.ihug.co.nz)
[08:46:04] *** Quits: Jantz (~IceChat95@118-93-132-243.dsl.dyn.ihug.co.nz) (Excess Flood)
[08:50:22] *** Joins: supernova (~quassel@2405:9800:ba11:6207:d922:7fa5:432:de05)
[08:51:04] *** Quits: don (~don@89.45.90.201) (Ping timeout: 256 seconds)
[08:51:18] <Inst> i sort of got haskellers pissed off when I tried to understand objects in the context of monads
[08:51:54] <RandomReader> a C++ object is just a conceptual container for a value
[08:52:07] <Inst> which, even if it's an imperfect way to think of it (monads strictly refer to a bunch of methods that can be implemented), actually bears analogizing
[08:52:07] *** Quits: nostar (~nostar@2601:406:4100:34d:8f4:5ea7:30b2:b7e6) (Quit: Leaving)
[08:52:18] <Inst> it seems on the surface to be two different ways to do similar things
[08:52:28] <RandomReader> like writing the number 42 on a piece of paper: 42 is the value, but the piece of paper is the thing you work with, create, destroy, change, etc
[08:52:37] <RandomReader> C++ doesn't have monads, at least as a formal concept, so not sure that's relevant
[08:52:40] *** Joins: Jantz (~IceChat95@118-93-132-243.dsl.dyn.ihug.co.nz)
[08:52:49] *** Quits: Jantz (~IceChat95@118-93-132-243.dsl.dyn.ihug.co.nz) (Excess Flood)
[08:52:50] <Inst> because I get monads, not objects
[08:52:52] <Inst> which is hilarious
[08:52:52] <RandomReader> different arenas will define "object" differently
[08:53:07] *** Joins: don (~don@cpe-70-114-183-69.austin.res.rr.com)
[08:53:09] <RandomReader> it doesn't have a universal definition, even in programming
[08:53:25] <Inst> i'm trying to get Python monads, specifically
[08:53:30] <Inst> but I was trying to study C++ before Haskell
[08:53:42] <Inst> and will likely head back to C++ after I'm done, which is never, because you're never done learning Haskell
[08:53:56] <Inst> so I'm trying to get a C++ concept of object, then pass it back into a Python concept (which I assume is simplified)
[08:54:01] <Inst> erm, not Python monads
[08:54:03] <Inst> Python objects
[08:54:44] <Inst> an object is a memory value
[08:54:55] <Inst> which can contain data within itself, as well as have a bunch of methods to manipulate the data, no?
[08:54:55] <Garbanzo> https://bartoszmilewski.com/2014/10/28/category-theory-for-programmers-the-preface/
[08:55:25] *** Quits: mattallmill (~mattallmi@ip68-103-130-85.ks.ok.cox.net) (Ping timeout: 240 seconds)
[08:55:28] <RandomReader> a C++ object is just a conceptual container for a value
[08:55:30] <Garbanzo> that has a link for monads from a C++ (and Haskell) point of view
[08:55:34] *** Joins: Jantz (~IceChat95@118-93-132-243.dsl.dyn.ihug.co.nz)
[08:55:41] *** Quits: Jantz (~IceChat95@118-93-132-243.dsl.dyn.ihug.co.nz) (Excess Flood)
[08:55:49] <Inst> monads are a meme, mind you
[08:56:01] *** Joins: nostar (~nostar@2601:406:4100:34d:8f4:5ea7:30b2:b7e6)
[08:56:13] <RandomReader> a C++ object does have storage, but I wouldn't define it as "memory value", since that's too specific .. "methods" in the sense of "member function": no
[08:56:13] <Inst> i'd rather prefer the term FAM, except FAM in haskell land refers to the proposal to make monads a subclass of applicative, which would then be a subclass of functor
[08:56:33] <RandomReader> an int is an object in C++
[08:56:40] <Inst> at least you guys don't have the same problems as we do
[08:56:54] <Inst> monad pedagogy drove off a cliff and everyone's screaming "more cowbell" as it crashes into the sea
[08:57:24] <RandomReader> int is not a class type and has no members
[08:57:43] *** Joins: malloy (~jimery@116.30.220.175)
[08:57:45] <Inst> i see, so how is object in C++ dissimilar from a variable?
[09:00:11] <RandomReader> a variable is a name with a scope, if it is an object-type variable then it provides storage and lifetime for an object, if it is a reference-type variable then it attaches a name to some other object (that has a lifetime established some other way)
[09:00:15] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[09:00:27] <RandomReader> an object does not need to have a name
[09:00:37] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[09:01:03] <RandomReader> cout << (1 + 2);   // there's an int object containing the value 3 here, but it's not associated with a variable, or has a name at all
[09:01:07] <Inst> "the places in which we store data are called objects" from Stroustrup- Programming: Principles and Practices Using C++
[09:03:37] * enyc meows
[09:04:33] *** Joins: jehelset (~jeh@2001:4644:4144:0:e2d4:e8ff:fedf:f070)
[09:04:41] * Inst meows back
[09:05:08] <Inst> so it's similar to a concept of "value" in Haskell
[09:07:01] <RandomReader> I don't know Haskell, but skimming a bit, it looks somewhat similar
[09:07:25] <RandomReader> I'd say there's more to it in C++ because of the concepts of lifetime and identity, but that sort of falls out of it not being a pure-functional language
[09:08:04] *** Quits: T`aZ (~TaZ@user/taz/x-9470768) (Ping timeout: 256 seconds)
[09:08:47] <Inst> how useful is smalltalk objects as a way of understanding C++ / Java / etc objects?
[09:08:48] <RandomReader> it being the thing that's passed around, holds the "value" we care about, has a type that describes its behavior, etc .. that's all the same
[09:09:37] *** Quits: great_taste (~great_tas@user/great-taste/x-5798414) (Quit: Client closed)
[09:09:54] *** Joins: T`aZ (~TaZ@user/taz/x-9470768)
[09:10:00] <RandomReader> probably not at all for C++, maybe vaguely for Java, would be more applicable to something like Objective-C
[09:10:02] *** Quits: malloy (~jimery@116.30.220.175) (Ping timeout: 250 seconds)
[09:10:22] <RandomReader> even OOP is done differently in different arenas, the Smalltalk model is not the Java model
[09:11:00] <RandomReader> realistically you're probably going to need to spend a solid chunk of time on each language to absorb its model of things
[09:11:10] <Inst> yeah, similar to for us
[09:11:40] <Inst> well, not really
[09:11:41] <RandomReader> skipping around each quickly is probably going to make comparisons hard, since the surface level stuff doesn't really describe how it gets used in practice, which is where any differences really show up
[09:12:00] <Inst> you have to distinguish between object implementations per language
[09:12:22] <RandomReader> but you only have to distinguish that when you're trying to write some overview of Objects in all languages or something
[09:12:30] <Inst> monad at least has to distinguish between philosophical monads (Greek, Leibniz), category theory / mathematical monads, and Haskell / Programming Language monads
[09:12:34] <RandomReader> in practice, you're writing code according to the idioms of a particular language, and that's a very different thing
[09:12:40] <Inst> I'm just more scared that python objects will ruin me for C++ objects
[09:16:29] <Inst> also, quick monad tutorial: monads in Haskell are a product of the typeclass (interface) and type system. Anything you can instance into the interface (which can get pretty crazy, as in, function types are monads in haskell) is now a monad.
[09:18:22] <Inst> the interface basically says: allow a function to do something underneath the structure (fmap) / put another level of structure onto the value (pure/return) / let functions take multiple arguments of values if they're under a structure (ap / <*>) / combine two levels of structure into one
[09:18:42] <Inst> that's it, anything where you can have intelligible methods defined for the standard interface (obeying functor, applicative, and monad laws) is a monad
[09:19:01] <Inst> it's a product of type-centric programming, I guess
[09:19:56] <Inst> so as opposed to having classes and instancing objects out of the classes, you have typeclasses and instance types into the typeclasses so they're now FAM / FA / F
[09:20:43] <Inst> and you define custom logic (as long as they follow the applicable laws for the typeclass) onto the methods, which often have the job of doing your work for you, hence why they're used in programming
[09:21:25] *** Quits: mixfix41 (~homefame@user/mixfix41) (Ping timeout: 240 seconds)
[09:24:29] <Inst> so you use the same syntax to call very different methods of different types, but you can composite functions with these methods in the exact same way and get "predictable" results
[09:27:19] *** Joins: hiovoltage (~hiovoltag@78.186.68.182)
[09:27:22] *** Joins: malloy (~jimery@116.30.220.175)
[09:27:54] *** Quits: kit_ten (~u0_a391@cpe-76-190-178-139.neo.res.rr.com) (Ping timeout: 256 seconds)
[09:28:32] *** Joins: mixfix41 (~homefame@user/mixfix41)
[09:32:37] *** Quits: don (~don@cpe-70-114-183-69.austin.res.rr.com) (Ping timeout: 240 seconds)
[09:32:57] *** Joins: Jantz (~IceChat95@118-93-132-243.dsl.dyn.ihug.co.nz)
[09:33:06] *** Quits: Jantz (~IceChat95@118-93-132-243.dsl.dyn.ihug.co.nz) (Excess Flood)
[09:34:41] *** Joins: don (~don@89.45.90.240)
[09:38:37] *** Quits: hinata (~hinata@2409:4042:d98:f536:7120:a20:9229:980c) (Ping timeout: 240 seconds)
[09:40:46] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[09:40:54] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[09:40:54] *** ChanServ sets mode: +v npaperbot
[09:41:04] *** Joins: forgotmynick (uid24625@id-24625.hampstead.irccloud.com)
[09:50:17] *** Quits: T`aZ (~TaZ@user/taz/x-9470768) (Ping timeout: 240 seconds)
[09:50:36] *** Quits: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon) (Ping timeout: 276 seconds)
[09:52:09] *** Quits: pizdets (~pizdets@183.182.111.169) (Read error: Connection reset by peer)
[09:52:26] *** Joins: T`aZ (~TaZ@user/taz/x-9470768)
[09:52:31] *** Joins: pizdets (~pizdets@183.182.111.169)
[09:59:25] *** Quits: T`aZ (~TaZ@user/taz/x-9470768) (Ping timeout: 240 seconds)
[10:00:12] *** Quits: packet_lozenge (~packet_lo@user/packet-lozenge/x-7125090) (Read error: Connection reset by peer)
[10:01:10] *** Quits: llh (~llh@user/llh) (Quit: :::: ( UPP ) ::::)
[10:01:22] *** Joins: T`aZ (~TaZ@user/taz/x-9470768)
[10:03:17] *** Quits: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net) (Ping timeout: 240 seconds)
[10:03:31] *** Joins: packet_lozenge (~packet_lo@user/packet-lozenge/x-7125090)
[10:04:09] *** Joins: llh (~llh@user/llh)
[10:06:06] *** Joins: kit_ten (~u0_a391@cpe-76-190-178-139.neo.res.rr.com)
[10:11:13] *** Joins: ElectronApps (~ElectronA@user/electronapps)
[10:20:33] *** Joins: JohnMS_WORK (~kvirc@89-64-83-123.dynamic.chello.pl)
[10:22:16] *** Quits: chozorho (~chozorho@c-69-250-72-103.hsd1.md.comcast.net) (Quit: WeeChat 3.0)
[10:24:01] *** Joins: Jantz (~IceChat95@118-93-132-243.dsl.dyn.ihug.co.nz)
[10:24:07] *** Quits: Jantz (~IceChat95@118-93-132-243.dsl.dyn.ihug.co.nz) (Excess Flood)
[10:26:02] *** Joins: Jantz (~IceChat95@118-93-132-243.dsl.dyn.ihug.co.nz)
[10:26:17] *** Quits: Jantz (~IceChat95@118-93-132-243.dsl.dyn.ihug.co.nz) (Excess Flood)
[10:27:14] *** Quits: BluesBoy (~bboy@user/bluesboy) (Quit: leaving)
[10:27:37] *** Quits: kapil- (~kapil@2a01:4f9:c010:c9c3::1) (Read error: Connection reset by peer)
[10:29:01] *** Joins: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon)
[10:29:25] *** Quits: Fairy (~Fairy@2001:464a:4992:0:55d4:c070:9ca0:8896) (Ping timeout: 240 seconds)
[10:30:36] *** Quits: AbleBacon (~AbleBacon@user/AbleBacon) (Read error: Connection reset by peer)
[10:31:17] *** Quits: Garbanzo (~Garbanzo@2602:304:6eac:dc10::46) (Ping timeout: 240 seconds)
[10:33:21] *** Joins: Jantz (~IceChat95@118-93-132-243.dsl.dyn.ihug.co.nz)
[10:33:42] *** Quits: Jantz (~IceChat95@118-93-132-243.dsl.dyn.ihug.co.nz) (Excess Flood)
[10:35:54] *** Quits: bzyx (~quassel@89-69-20-238.dynamic.chello.pl) (Ping timeout: 256 seconds)
[10:38:57] *** Joins: bzyx (~quassel@89-69-20-238.dynamic.chello.pl)
[10:39:37] *** Quits: thad_the_man (~tlophd_be@2600:1700:3051:4370:21d:9ff:fe33:51f4) (Ping timeout: 240 seconds)
[10:43:57] *** Joins: BluesBoy (~bboy@user/bluesboy)
[10:49:39] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[10:53:06] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[10:53:22] *** Joins: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net)
[10:53:27] *** Joins: thad_the_man (~tlophd_be@2600:1700:3051:4370:21d:9ff:fe33:51f4)
[10:56:05] *** Joins: hinata (~hinata@2409:4042:d98:f536:1c6:56da:21b9:6c5b)
[10:57:56] *** Joins: Jantz (~IceChat95@118-93-132-243.dsl.dyn.ihug.co.nz)
[10:59:55] *** Quits: Jantz (~IceChat95@118-93-132-243.dsl.dyn.ihug.co.nz) (Excess Flood)
[11:00:27] *** Quits: caramel (~caramel@user/caramel) (Read error: Connection reset by peer)
[11:00:50] *** Joins: evelyette (~Eleanor@178.79.105.181)
[11:03:00] *** Joins: caramel (~caramel@user/caramel)
[11:03:22] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) ()
[11:04:41] *** A_Dragon is now known as RemoteHost
[11:05:38] *** Joins: Jantz (~IceChat95@118-93-132-243.dsl.dyn.ihug.co.nz)
[11:06:02] *** Joins: frost (~frost@user/frost)
[11:06:07] *** Quits: Jantz (~IceChat95@118-93-132-243.dsl.dyn.ihug.co.nz) (Excess Flood)
[11:06:37] *** Quits: jehelset (~jeh@2001:4644:4144:0:e2d4:e8ff:fedf:f070) (Ping timeout: 240 seconds)
[11:11:40] *** Joins: namo (~nomo@95.87.208.95)
[11:14:21] *** Joins: Jantz (~IceChat95@118-93-132-243.dsl.dyn.ihug.co.nz)
[11:14:35] *** Quits: Jantz (~IceChat95@118-93-132-243.dsl.dyn.ihug.co.nz) (Excess Flood)
[11:15:36] *** Joins: PlasmaHH (~PlasamaHH@user/plasmahh)
[11:16:22] *** Joins: Jantz (~IceChat95@118-93-132-243.dsl.dyn.ihug.co.nz)
[11:17:23] *** Quits: Jantz (~IceChat95@118-93-132-243.dsl.dyn.ihug.co.nz) (Excess Flood)
[11:17:59] *** Joins: jsbach (~jsbach@2a01:c22:b171:2800:661:8ac5:856b:c920)
[11:19:59] *** Joins: rayw (~ray@cpc83999-pool15-2-0-cust1.15-1.cable.virginm.net)
[11:20:06] *** Quits: don (~don@89.45.90.240) (Ping timeout: 256 seconds)
[11:21:55] *** Joins: don (~don@89.45.90.193)
[11:22:33] <sam113101> guys
[11:23:50] *** Joins: andreasbuhr (~quassel@p549db698.dip0.t-ipconnect.de)
[11:25:47] <sam113101> why are short functions sometimes defined directly in header files?
[11:26:23] *** Joins: Jantz (~IceChat95@118-93-132-243.dsl.dyn.ihug.co.nz)
[11:26:23] <TinoDidriksen> So that they are inlined and thus not incur a function call at all.
[11:26:48] *** Quits: Jantz (~IceChat95@118-93-132-243.dsl.dyn.ihug.co.nz) (Excess Flood)
[11:26:58] <sam113101> they're always inlined, so no need to specify it?
[11:27:10] <TinoDidriksen> The inline keyword is needed.
[11:27:17] <TinoDidriksen> Unless it's in a class body.
[11:31:46] <bpalmer>  also, sometimes the (member) functions are short enough that the implementation is trivial.
[11:35:51] <bpalmer> (whether that's enough to warrant being in the header/declaration is then a style question)
[11:39:30] *** Quits: don (~don@89.45.90.193) (*.net *.split)
[11:39:30] *** Quits: PlasmaHH (~PlasamaHH@user/plasmahh) (*.net *.split)
[11:39:30] *** Quits: frost (~frost@user/frost) (*.net *.split)
[11:39:30] *** Quits: BluesBoy (~bboy@user/bluesboy) (*.net *.split)
[11:39:30] *** Quits: bzyx (~quassel@89-69-20-238.dynamic.chello.pl) (*.net *.split)
[11:39:31] *** Quits: llh (~llh@user/llh) (*.net *.split)
[11:39:31] *** Quits: pizdets (~pizdets@183.182.111.169) (*.net *.split)
[11:39:31] *** Quits: Inst (~delicacie@c-98-208-218-119.hsd1.fl.comcast.net) (*.net *.split)
[11:39:31] *** Quits: lh_cat (~lh_mouse@mingw-w64/developer/lhmouse) (*.net *.split)
[11:39:31] *** Quits: Carbonflux (~Carbonflu@c-66-235-54-179.sea.wa.customer.broadstripe.net) (*.net *.split)
[11:39:31] *** Quits: _SKiTZO (~dark@64.89-10-146.nextgentel.com) (*.net *.split)
[11:39:31] *** Quits: Soni (~quassel@autistic.space) (*.net *.split)
[11:39:31] *** Quits: Betal (~Betal@user/betal) (*.net *.split)
[11:39:31] *** Quits: peacefulman (~paul@107-190-110-80.cpe.teksavvy.com) (*.net *.split)
[11:39:31] *** Quits: feldim2425 (~feldim242@dynamic-2jh5c12x2xq736zy5n-pd01.res.v6.highway.a1.net) (*.net *.split)
[11:39:31] *** Quits: TheCoffeMaker (~TheCoffeM@user/thecoffemaker) (*.net *.split)
[11:39:31] *** Quits: rvalue (~rvalue@user/rvalue) (*.net *.split)
[11:39:31] *** Quits: kaph (~kaph@net-2-38-107-19.cust.vodafonedsl.it) (*.net *.split)
[11:39:31] *** Quits: Cahaan (~Cahaan@user/cahaan) (*.net *.split)
[11:39:31] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (*.net *.split)
[11:39:31] *** Quits: letto (~letto@188.25.113.229) (*.net *.split)
[11:39:31] *** Quits: HvszrStykp (~X@81.171.62.86) (*.net *.split)
[11:39:31] *** Quits: karakedi (~eAC53C340@user/karakedi) (*.net *.split)
[11:39:31] *** Quits: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net) (*.net *.split)
[11:39:31] *** Quits: RandomReader (~RandomRea@user/randomreader) (*.net *.split)
[11:39:31] *** Quits: joast (~rick@cpe-98-146-112-4.natnow.res.rr.com) (*.net *.split)
[11:39:32] *** Quits: greenbagels (~gb@user/greenbagels) (*.net *.split)
[11:39:32] *** Quits: dongcarl (~dongcarl@70.107.207.192) (*.net *.split)
[11:39:32] *** Quits: Teukka (~teukka@user/Teukka) (*.net *.split)
[11:39:32] *** Quits: autark (~autark@ti0048a400-0869.bb.online.no) (*.net *.split)
[11:39:32] *** Quits: Munnu (~timo@81-197-121-83.elisa-laajakaista.fi) (*.net *.split)
[11:39:32] *** Quits: daswf852 (~daswf852@user/daswf852) (*.net *.split)
[11:39:32] *** Quits: Spirit532 (~Spirit532@user/Spirit532) (*.net *.split)
[11:39:32] *** Quits: IceMichael (~IceMichae@h2878436.stratoserver.net) (*.net *.split)
[11:39:32] *** Quits: traxex (traxex@user/traxex) (*.net *.split)
[11:39:32] *** Quits: cation (cation@user/cation) (*.net *.split)
[11:39:32] *** Quits: very_sneaky (~very_snea@user/very-sneaky/x-7432109) (*.net *.split)
[11:39:32] *** Quits: CarloWood (~LdK13@212-127-230-18.cable.dynamic.v4.ziggo.nl) (*.net *.split)
[11:39:32] *** Quits: randm (~randm@user/randm) (*.net *.split)
[11:39:32] *** Quits: henbruas (~henbruas@ti0003a400-4203.bb.online.no) (*.net *.split)
[11:39:32] *** Quits: manx (xuew@p200300e18f239d00022215fffe03cf97.dip0.t-ipconnect.de) (*.net *.split)
[11:39:32] *** Quits: Oxyd (~oxyd@user/oxyd) (*.net *.split)
[11:39:32] *** Quits: enyc (~enyc@user/enyc) (*.net *.split)
[11:39:32] *** Quits: Furai (~Furai@furai.pl) (*.net *.split)
[11:39:32] *** Quits: Byteflux (~byte@byteflux.net) (*.net *.split)
[11:39:32] *** Quits: markmarkmark (~mark@user/markmarkmark) (*.net *.split)
[11:39:32] *** Quits: qwedfg (~qwedfg@user/qwedfg) (*.net *.split)
[11:39:32] *** Quits: sonic1 (~sonic@user/sonic) (*.net *.split)
[11:39:32] *** Quits: geeknix (~pi@2001:e68:5432:307:f6b7:9845:4bce:2869) (*.net *.split)
[11:39:32] *** Quits: unyu (~pyon@user/pyon) (*.net *.split)
[11:39:32] *** Quits: leah2 (~leah@vuxu.org) (*.net *.split)
[11:39:32] *** Quits: ERROH (~mama@user/mama) (*.net *.split)
[11:39:32] *** Quits: syrius (syrius@titan.stormtek.net) (*.net *.split)
[11:39:32] *** Quits: zoraj (~zoraj@209.126.81.159) (*.net *.split)
[11:39:32] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (*.net *.split)
[11:39:32] *** Quits: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon) (*.net *.split)
[11:39:32] *** Quits: Atque (~Atque@user/atque) (*.net *.split)
[11:39:32] *** Quits: jdavfsxd (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (*.net *.split)
[11:39:32] *** Quits: Hello72 (~Hello71@wireguard/contributor/hello71) (*.net *.split)
[11:39:33] *** Quits: bindu (~bindu@user/bindu) (*.net *.split)
[11:39:33] *** Quits: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao) (*.net *.split)
[11:39:33] *** Quits: crabbedhaloablut (~crabbedha@user/crabbedhaloablut) (*.net *.split)
[11:39:33] *** Quits: chiselfuse (~chiselfus@user/chiselfuse) (*.net *.split)
[11:39:33] *** Quits: spithash (~spithash@user/spithash) (*.net *.split)
[11:39:33] *** Quits: teepee (~teepee@openscad/teepee) (*.net *.split)
[11:39:33] *** Quits: nlatp[m] (~nlatpmatr@2001:470:69fc:105::1:4d1f) (*.net *.split)
[11:39:33] *** Quits: scjg (~scjgmatri@2001:470:69fc:105::f5d6) (*.net *.split)
[11:39:33] *** Quits: equinox[m] (~momoshiki@2001:470:69fc:105::fe92) (*.net *.split)
[11:39:33] *** Quits: lpotter (~quassel@180-150-104-92.b49668.bne.static.aussiebb.net) (*.net *.split)
[11:39:33] *** Quits: hirish (~hirish@ip85.ip-137-74-20.eu) (*.net *.split)
[11:39:33] *** Quits: gothicserpent (~gothicser@2604:a880:4:1d0::176:6000) (*.net *.split)
[11:39:33] *** Quits: celphi (sid97751@user/celphi) (*.net *.split)
[11:39:33] *** Quits: pieguy12- (~pieguy128@bras-base-mtrlpq5031w-grc-48-67-70-102-17.dsl.bell.ca) (*.net *.split)
[11:39:33] *** Quits: mrec_ (~markus@sundtek.de) (*.net *.split)
[11:39:33] *** Quits: dexter0 (~dexter0@c-69-181-126-161.hsd1.ca.comcast.net) (*.net *.split)
[11:39:33] *** Quits: imMute (~immute@user/immute) (*.net *.split)
[11:39:33] *** Quits: xisop (~xisop@bnull.net) (*.net *.split)
[11:39:33] *** Quits: rochadt (~rochadt@24.148.29.135) (*.net *.split)
[11:39:33] *** Quits: jzsinatra (~jzsinatra@88-114-238-31.elisa-laajakaista.fi) (*.net *.split)
[11:39:33] *** Quits: jbalint_ (~jbalint@2600:6c44:117f:e98a:816a:9488:fb1:7b7) (*.net *.split)
[11:39:33] *** Quits: Jck_true (~jcktrue@user/jck-true/x-0200799) (*.net *.split)
[11:39:33] *** Quits: Svitkona (~Svitkona@157.245.38.135) (*.net *.split)
[11:39:33] *** Quits: mrkajetanp (~mrkajetan@88.98.245.28) (*.net *.split)
[11:39:33] *** Quits: dansan (~daniel@75.81.148.51) (*.net *.split)
[11:39:33] *** Quits: Flonk (~Flonk@vps-zap441517-1.zap-srv.com) (*.net *.split)
[11:39:33] *** Quits: urdh (~urdh@user/urdh) (*.net *.split)
[11:39:33] *** Quits: Telvana (~capo@user/telvana) (*.net *.split)
[11:39:33] *** Quits: Albright (~Albright@149.28.13.173) (*.net *.split)
[11:39:33] *** Quits: catern (~sbaugh@2604:2000:8fc0:b:a9c7:866a:bf36:3407) (*.net *.split)
[11:39:34] *** Quits: elemongw (~elemongw@20.107.36.50) (*.net *.split)
[11:39:34] *** Quits: [R] (~rs@genoce.org) (*.net *.split)
[11:39:34] *** Quits: riksteri (d20812115c@2604:bf00:561:2000::1e6) (*.net *.split)
[11:39:34] *** Quits: ws2k3 (znc@vps.freegamehosting.eu) (*.net *.split)
[11:39:34] *** Quits: computerquip (sid423484@user/computerquip) (*.net *.split)
[11:39:34] *** Quits: hyper_dave (~hyper_dav@2a01:4f9:4a:246c::2) (*.net *.split)
[11:39:34] *** Quits: xrj (~av@2a01:4f8:c17:7cba::1) (*.net *.split)
[11:39:34] *** Quits: andreyv (~andrey@user/andreyv) (*.net *.split)
[11:39:34] *** Quits: Hobbyboy (Hobbyboy@hobbyboy.co.uk) (*.net *.split)
[11:39:34] *** Quits: shenghi (~shenghi@chrysocolla.mutablevoid.org) (*.net *.split)
[11:39:34] *** Quits: hsiktas[m] (~hsiktasma@2001:470:69fc:105::30d4) (*.net *.split)
[11:39:34] *** Quits: zygonsisyphus[m] (~zygonsisy@2001:470:69fc:105::482) (*.net *.split)
[11:39:34] *** Quits: hnOsmium0001[m] (~hnosmium0@2001:470:69fc:105::15d4) (*.net *.split)
[11:39:34] *** Quits: Yamakaja (~yamakaja@user/yamakaja) (*.net *.split)
[11:39:34] *** Quits: whatsupboy (~whatsupbo@user/scobydoo) (*.net *.split)
[11:39:34] *** Quits: barometz (~dvanb@i117058.upc-i.chello.nl) (*.net *.split)
[11:39:34] *** Quits: Artea (~Lufia@artea.com.pt) (*.net *.split)
[11:39:34] *** Quits: aeplus (~steve@2603-8000-cf42-7ec1-162f-1996-0ae2-d7da.res6.spectrum.com) (*.net *.split)
[11:39:34] *** Quits: Argorok (sid195487@id-195487.hampstead.irccloud.com) (*.net *.split)
[11:39:34] *** Quits: buhman (sid411355@user/buhman) (*.net *.split)
[11:39:34] *** Quits: merry (~mary@user/merry) (*.net *.split)
[11:39:34] *** Quits: Learath2 (~learath2@user/learath2) (*.net *.split)
[11:39:34] *** Quits: ullbeking_ (sid5364@id-5364.ilkley.irccloud.com) (*.net *.split)
[11:39:34] *** Quits: blo (~blo@user/blo) (*.net *.split)
[11:39:35] *** Quits: taiyu (~taiyu@user/taiyu) (*.net *.split)
[11:39:35] *** Quits: drmeister (sid45147@id-45147.ilkley.irccloud.com) (*.net *.split)
[11:39:35] *** Quits: scruffyfurn (scruffyfur@turbous.xshellz.com) (*.net *.split)
[11:39:35] *** Quits: InPhase (~InPhase@openscad/inphase) (*.net *.split)
[11:39:35] *** Quits: Ara (~Ara@user/ara) (*.net *.split)
[11:39:35] *** Quits: pippijn (~pippijn@ra.xinutec.org) (*.net *.split)
[11:39:35] *** Quits: TingPing (sid2800@id-2800.helmsley.irccloud.com) (*.net *.split)
[11:39:35] *** Quits: Bodger1234_ (sid503511@id-503511.uxbridge.irccloud.com) (*.net *.split)
[11:39:35] *** Quits: glenfe (sid231748@user/glenfe) (*.net *.split)
[11:39:35] *** Quits: renopt (~renopt@lisp.us.to) (*.net *.split)
[11:39:35] *** Quits: jellie (~luv_panda@user/jellie) (*.net *.split)
[11:39:35] *** Quits: rayw (~ray@cpc83999-pool15-2-0-cust1.15-1.cable.virginm.net) (*.net *.split)
[11:39:35] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (*.net *.split)
[11:39:35] *** Quits: mixfix41 (~homefame@user/mixfix41) (*.net *.split)
[11:39:35] *** Quits: tbcr_ (~tbcr@107.13.189.161) (*.net *.split)
[11:39:35] *** Quits: leduyquang753 (~leduyquan@user/leduyquang753) (*.net *.split)
[11:39:35] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (*.net *.split)
[11:39:35] *** Quits: crankslider (~slidercra@user/slidercrank) (*.net *.split)
[11:39:35] *** Quits: noarb (~noarb@user/noarb) (*.net *.split)
[11:39:35] *** Quits: Brett[Air] (~Brett@124.148.79.4) (*.net *.split)
[11:39:35] *** Quits: millido (~millido@84.210.150.128) (*.net *.split)
[11:39:35] *** Quits: shailangsa (~shailangs@host86-185-98-37.range86-185.btcentralplus.com) (*.net *.split)
[11:39:35] *** Quits: alex88 (~alex88@ip72-207-140-105.lv.lv.cox.net) (*.net *.split)
[11:39:35] *** Quits: fbiagent_ (~fbiagent@user/fbiagent) (*.net *.split)
[11:39:35] *** Quits: causative (~halberd@user/causative) (*.net *.split)
[11:39:35] *** Quits: Linux77 (~LinuMage@186.233.182.173) (*.net *.split)
[11:39:35] *** Quits: rogorido (~rogorido@mail.georeligion.org) (*.net *.split)
[11:39:35] *** Quits: dzz007 (~dzz007@user/dzz007) (*.net *.split)
[11:39:35] *** Quits: edr (~edr@user/edr) (*.net *.split)
[11:39:35] *** Quits: ville (~ville@user/ville) (*.net *.split)
[11:39:35] *** Quits: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (*.net *.split)
[11:39:35] *** Quits: elb0w (~elb0w@pool-98-109-49-7.nwrknj.fios.verizon.net) (*.net *.split)
[11:39:35] *** Quits: hackkitten (~hackkitte@94.31.103.136) (*.net *.split)
[11:39:36] *** Quits: Inline (~Inline@aftr-37-201-240-204.unity-media.net) (*.net *.split)
[11:39:36] *** Quits: lloda (~user@11-206-127-185.static.world-connect.ch) (*.net *.split)
[11:39:36] *** Quits: ralu (~ralu@static.211.245.203.116.clients.your-server.de) (*.net *.split)
[11:39:36] *** Quits: pflanze (~pflanze@5-168-208-80.dyn.fiber.qlnet.ch) (*.net *.split)
[11:39:36] *** Quits: Kulrak (Kulrak@n122-109-158-59.rdl2.qld.optusnet.com.au) (*.net *.split)
[11:39:36] *** Quits: m_tadeu (~quassel@bl11-135-102.dsl.telepac.pt) (*.net *.split)
[11:39:36] *** Quits: GyrosGeier (~geier@185.27.255.155) (*.net *.split)
[11:39:36] *** Quits: judabuda (kowbunga@user/judabuda) (*.net *.split)
[11:39:36] *** Quits: Praise (~Fat@user/praise) (*.net *.split)
[11:39:36] *** Quits: useful_idiot (~useful_id@gateway/vpn/pia/usefulidiot/x-43226899) (*.net *.split)
[11:39:36] *** Quits: joo-_ (~joo-_@fsf/member/joo--) (*.net *.split)
[11:39:36] *** Quits: rb (~augh@theguntretort.com) (*.net *.split)
[11:39:36] *** Quits: ProperNoun (~holyShizn@user/propernoun) (*.net *.split)
[11:39:36] *** Quits: rnsanchez (~rnsanchez@179.233.249.52) (*.net *.split)
[11:39:36] *** Quits: LittleFox (littlefox@rondra.lf-net.org) (*.net *.split)
[11:39:36] *** Quits: foul_owl (~kerry@94.140.8.107) (*.net *.split)
[11:39:36] *** Quits: simpl_e (~user@user/simpl-e/x-8589812) (*.net *.split)
[11:39:36] *** Quits: osse (~osse@zsh/user/osse) (*.net *.split)
[11:39:36] *** Quits: nortoh (~nortoh@user/nortoh) (*.net *.split)
[11:39:36] *** Quits: Pajus (~Pajus@user/pajus) (*.net *.split)
[11:39:36] *** Quits: lru (~lru@240.ip-51-79-50.net) (*.net *.split)
[11:39:37] *** Quits: Dreg (~Dreg@fr33project.org) (*.net *.split)
[11:39:37] *** Quits: Green_ (~Green-@h-85-24-185-116.A189.priv.bahnhof.se) (*.net *.split)
[11:39:37] *** Quits: FergusL (~freenode4@user/fergusl) (*.net *.split)
[11:39:37] *** Quits: majors_ (~majors@user/majors) (*.net *.split)
[11:39:37] *** Quits: polyrob (~rob@user/polyrob) (*.net *.split)
[11:39:37] *** Quits: jkl1337 (~jkl@user/jkl) (*.net *.split)
[11:39:37] *** Quits: jaakkos_ (~jaakkos@88-113-244-153.elisa-laajakaista.fi) (*.net *.split)
[11:39:37] *** Quits: malinus_ (~malinus@172.245.158.16) (*.net *.split)
[11:39:37] *** Quits: sunyour (~sunyour@129.226.182.99) (*.net *.split)
[11:39:37] *** Quits: bdt (~bdt@155.51-174-24.customer.lyse.net) (*.net *.split)
[11:39:37] *** Quits: gnomesort (~gnomesort@user/gnomesort) (*.net *.split)
[11:39:37] *** Quits: Dijky (~Dijky@user/dijky) (*.net *.split)
[11:39:37] *** Quits: ZeroKnight (zeroknight@dimensionzero.net) (*.net *.split)
[11:39:37] *** Quits: aeg (~aeg@215-052-180-159.dynamic.caiway.nl) (*.net *.split)
[11:39:37] *** Quits: lockywolf (~lockywolf@public.lockywolf.net) (*.net *.split)
[11:39:38] *** Quits: testasty[m] (~testastym@2001:470:69fc:105::1:5b38) (*.net *.split)
[11:39:38] *** Quits: orkim (~orkim@user/orkim) (*.net *.split)
[11:39:38] *** Quits: bitonic (~bitonic@2001:470:69fc:105::1812) (*.net *.split)
[11:39:38] *** Quits: aesth[m] (~aesthmatr@2001:470:69fc:105::1:57c1) (*.net *.split)
[11:39:38] *** Quits: shtumf[m] (~shtumfmat@2001:470:69fc:105::1:1b21) (*.net *.split)
[11:39:38] *** Quits: termos (sid18647@id-18647.helmsley.irccloud.com) (*.net *.split)
[11:39:38] *** Quits: amiti (sid373138@id-373138.lymington.irccloud.com) (*.net *.split)
[11:39:38] *** Quits: dwt_ (~dwt_@c-98-198-103-176.hsd1.tx.comcast.net) (*.net *.split)
[11:39:39] *** Quits: kkd (~kkd@255.205.154.104.bc.googleusercontent.com) (*.net *.split)
[11:39:39] *** Quits: ruediger (~ruediger@user/ruediger) (*.net *.split)
[11:39:39] *** Quits: HeTo (henkka@beer.modeemi.fi) (*.net *.split)
[11:39:39] *** Quits: Exa (exa@irc.moe) (*.net *.split)
[11:39:39] *** Quits: dhch (~dhch@185.213.154.165) (*.net *.split)
[11:39:39] *** Quits: braxas (sid508886@id-508886.lymington.irccloud.com) (*.net *.split)
[11:39:39] *** Quits: introom (introom@2600:3c01::f03c:92ff:fea3:2cf) (*.net *.split)
[11:39:39] *** Quits: Benett (~Benett@xnetx.de) (*.net *.split)
[11:39:39] *** Quits: obiwahn (~heini@user/obiwahn) (*.net *.split)
[11:39:39] *** Quits: carrar (~tim@osburn.jp) (*.net *.split)
[11:39:39] *** Quits: Spydar007 (~spydar007@user/spydar007) (*.net *.split)
[11:39:39] *** Quits: Chaser (~Chaser@user/chaser) (*.net *.split)
[11:39:39] *** Quits: Pjerky (~Pjerky@81-234-143-135-no58.tbcn.telia.com) (*.net *.split)
[11:39:39] *** Quits: wielding (~wielding@user/wielding) (*.net *.split)
[11:39:39] *** Quits: milia[m] (~mlliarmma@2001:470:69fc:105::1:4631) (*.net *.split)
[11:39:40] *** Quits: ormaaj (~ormaaj@user/ormaaj) (*.net *.split)
[11:39:40] *** Quits: Guest8100 (~tinloaf@2a03:94e0:163c:57e:bc51:5c66:86e7:1) (*.net *.split)
[11:39:40] *** Quits: tafa (~tafa@user/tafa) (*.net *.split)
[11:39:40] *** Quits: gdd (~gdd@129.199.146.230) (*.net *.split)
[11:39:40] *** Quits: hfsoulz (~hfsoulz@user/hfsoulz) (*.net *.split)
[11:39:40] *** Quits: dme2 (~dme2@67.205.140.199) (*.net *.split)
[11:39:40] *** Quits: klys (~mdasoh@show.op8.us) (*.net *.split)
[11:39:40] *** Quits: akacrs (k7f@user/akacrs) (*.net *.split)
[11:39:40] *** Quits: wangledorf (sid505185@id-505185.ilkley.irccloud.com) (*.net *.split)
[11:39:40] *** Quits: mukti (mukti@bitcommit.io) (*.net *.split)
[11:39:40] *** Quits: cengiz_io (sid223191@id-223191.ilkley.irccloud.com) (*.net *.split)
[11:39:40] *** Quits: blackbeard420 (blackbeard@2600:3c03::f03c:91ff:fe92:3f2a) (*.net *.split)
[11:39:40] *** Quits: useretail (~useretail@185.132.19.151) (*.net *.split)
[11:39:40] *** Quits: susam (~susam@user/susam) (*.net *.split)
[11:39:41] *** Quits: Dragoon (~Dragoon@user/dragoon) (*.net *.split)
[11:39:41] *** Quits: Eelis (~Eelis@u.eel.is) (*.net *.split)
[11:39:41] *** Quits: JakeSays (~jake@c-67-182-197-230.hsd1.ut.comcast.net) (*.net *.split)
[11:39:41] *** Quits: Isthmusi (~Isthmus@user/isveni) (*.net *.split)
[11:39:41] *** Quits: m42e (~m42e@pb42.de) (*.net *.split)
[11:39:41] *** Quits: supernov1h (~supernova@mail.ijk.nz) (*.net *.split)
[11:39:41] *** Quits: tonitch (~tonitch@user/tonitch) (*.net *.split)
[11:39:41] *** Quits: Cienisty (Cienisty@user/cienisty) (*.net *.split)
[11:39:41] *** Quits: RemoteHost (A_D@libera/staff/dragon) (*.net *.split)
[11:39:41] *** Quits: vancz (~vancz@user/vancz) (*.net *.split)
[11:39:41] *** Quits: Xizor_ (~Xizor@151.ip-51-68-121.eu) (*.net *.split)
[11:39:41] *** Quits: epony (~epony@user/epony) (*.net *.split)
[11:39:41] *** Quits: LordKalma (~LordKalma@server.ruilvo.com) (*.net *.split)
[11:39:41] *** Quits: sielicki (~sielickim@2001:470:69fc:105::f45) (*.net *.split)
[11:39:41] *** Quits: writeback[m] (~writeback@2001:470:69fc:105::1:6118) (*.net *.split)
[11:39:41] *** Quits: Stewart (~stewart@2001:470:69fc:105::1:6cd) (*.net *.split)
[11:39:41] *** Quits: popocka[m] (~popockama@2001:470:69fc:105::1:546e) (*.net *.split)
[11:39:41] *** Quits: heiner_ (~heiner@2a00:6020:b006:a900:d250:99ff:fe34:8fd2) (*.net *.split)
[11:39:42] *** Quits: paulo (paulo@user/paulo/x-9032687) (*.net *.split)
[11:39:42] *** Quits: luna-is-here (~quassel@2a02:908:f761:2a3c::a) (*.net *.split)
[11:39:42] *** Quits: miklcct (~quassel@vps.miklcct.com) (*.net *.split)
[11:39:42] *** Quits: z8z (~x@ac255238.ppp.asahi-net.or.jp) (*.net *.split)
[11:39:42] *** Quits: yano (~yano@ircpuzzles/staff/yano) (*.net *.split)
[11:39:42] *** Quits: tbe_loki (~loki@loki.codes) (*.net *.split)
[11:39:42] *** Quits: lhtseng (sid15322@id-15322.helmsley.irccloud.com) (*.net *.split)
[11:39:42] *** Quits: stephe (sid14127@id-14127.lymington.irccloud.com) (*.net *.split)
[11:39:42] *** Quits: nolyc (~nolyc@tinodidriksen.com) (*.net *.split)
[11:39:42] *** Quits: hirion (~hirion@user/hirion) (*.net *.split)
[11:39:42] *** Quits: cncr04s (~cncr04s@afxr.net) (*.net *.split)
[11:39:42] *** Quits: nohit (sid334887@id-334887.tinside.irccloud.com) (*.net *.split)
[11:39:42] *** Quits: kalven (~calvin@2a02:470:84:102::24) (*.net *.split)
[11:39:42] *** Quits: deepy (deepy@user/deepy) (*.net *.split)
[11:39:42] *** Quits: GrecKo (~grecko@static.183.157.9.5.clients.your-server.de) (*.net *.split)
[11:39:42] *** Quits: tobs (~tobs@taboege.de) (*.net *.split)
[11:39:42] *** Quits: zinc_ (~zinc@163.ip-51-254-203.eu) (*.net *.split)
[11:39:42] *** Quits: e2 (e2@sponsored.by.bnc4you.xyz) (*.net *.split)
[11:39:42] *** Quits: manuels (~manuel@80.211.205.88) (*.net *.split)
[11:39:43] *** Quits: rdrg109 (~rdrg109@user/rdrg109) (*.net *.split)
[11:39:43] *** Quits: pikapika (~pikapika_@pika.powered.by.lunarbnc.net) (*.net *.split)
[11:39:43] *** Quits: MarcoAlvarez[m] (~surakgnom@2001:470:69fc:105::2dc) (*.net *.split)
[11:39:43] *** Quits: treeshateorcs[m] (~treeshate@2001:470:69fc:105::1:41c4) (*.net *.split)
[11:39:43] *** Quits: sideshowbarker[m (~sideshowb@2001:470:69fc:105::9a16) (*.net *.split)
[11:39:43] *** Quits: djinni (~djinni@static.38.6.217.95.clients.your-server.de) (*.net *.split)
[11:39:43] *** Quits: jaimelm (~jaimelm@deneb.emergentcommunitysystems.com) (*.net *.split)
[11:39:43] *** Quits: jancoow (~jancoow@user/jancoow) (*.net *.split)
[11:39:43] *** Quits: eck (~root@user/eck) (*.net *.split)
[11:39:43] *** Quits: b_jonas (~x@catv-176-63-3-122.catv.broadband.hu) (*.net *.split)
[11:39:43] *** Quits: krzych (krzych@nroot.pl) (*.net *.split)
[11:39:43] *** Quits: michaeli1 (~michaelis@193.183.209.17) (*.net *.split)
[11:39:43] *** Quits: Adrinael (adrinael@dsl-hkibng21-54f8c5-237.dhcp.inet.fi) (*.net *.split)
[11:39:43] *** Quits: tin- (~tin@209.250.245.227) (*.net *.split)
[11:39:43] *** Quits: zaratustra_ (~zaratustr@idlerpg/player/zaratustra) (*.net *.split)
[11:39:43] *** Quits: Khoyo (~khoyo@user/khoyo) (*.net *.split)
[11:39:44] *** Quits: ElementW (~tungsten@hoodie.elementw.net) (*.net *.split)
[11:39:44] *** Quits: les (znc@user/les) (*.net *.split)
[11:39:44] *** Quits: markand (~markand@markand.fr) (*.net *.split)
[11:39:44] *** Quits: theglass (~glass@user/theglass) (*.net *.split)
[11:39:44] *** Quits: Manouchehri (sid384576@id-384576.hampstead.irccloud.com) (*.net *.split)
[11:39:44] *** Quits: kornos_ (~kornos@2a04:ad80:0:fb::3b85) (*.net *.split)
[11:39:44] *** Quits: geordi (~geordi@tinodidriksen.com) (*.net *.split)
[11:39:44] *** Quits: mcfrdy (~mcfrdy@user/mcfrdy) (*.net *.split)
[11:39:44] *** Quits: chiptuner (~bobby@user/chiptuner) (*.net *.split)
[11:39:44] *** Quits: ollien (~ollien@ollien.com) (*.net *.split)
[11:39:44] *** Quits: MrC (Ben@mrbenc.net) (*.net *.split)
[11:39:44] *** Quits: bsffffff[m] (~bsffffffm@2001:470:69fc:105::1:4c49) (*.net *.split)
[11:39:44] *** Quits: Karyon (~Karyon@user/karyon) (*.net *.split)
[11:39:44] *** Quits: DrinkyBird (~drinkybir@idlerpg/player/DrinkyBird) (*.net *.split)
[11:39:44] *** Quits: gjvc (~gjvc@29.68.246.35.bc.googleusercontent.com) (*.net *.split)
[11:39:44] *** Quits: irc-open-up (bounce@bounce.nastycode.com) (*.net *.split)
[11:39:44] *** Quits: boreas (~Thunderbi@2a00:6020:b006:a900:d250:99ff:fe34:8fd2) (*.net *.split)
[11:39:44] *** Quits: tcsc (sid145321@id-145321.lymington.irccloud.com) (*.net *.split)
[11:39:44] *** Quits: preisi (~preisi@irc.prei.si) (*.net *.split)
[11:39:44] *** Quits: Pent (sid313808@id-313808.lymington.irccloud.com) (*.net *.split)
[11:39:44] *** Quits: mgot (~mgot@vps-35cddd71.vps.ovh.net) (*.net *.split)
[11:39:45] *** Quits: gendl (sid100083@id-100083.hampstead.irccloud.com) (*.net *.split)
[11:39:45] *** Quits: sujeet (sujeet@freeboson.org) (*.net *.split)
[11:39:45] *** Quits: BtbN (btbn@ffmpeg/developer/btbn) (*.net *.split)
[11:39:45] *** Quits: sa (sid1055@id-1055.tinside.irccloud.com) (*.net *.split)
[11:39:45] *** Quits: IUSR (sid348938@id-348938.hampstead.irccloud.com) (*.net *.split)
[11:39:45] *** Quits: reda_ (~reda@user/reda) (*.net *.split)
[11:39:45] *** Quits: bone (~bone@user/mbo) (*.net *.split)
[11:39:45] *** Quits: talisein (~talisein@user/talisein) (*.net *.split)
[11:39:45] *** Quits: hiovoltage (~hiovoltag@78.186.68.182) (*.net *.split)
[11:39:57] *** Quits: dyeplexer (~dyeplexer@user/dyeplexer) (Ping timeout: 240 seconds)
[11:40:17] *** Quits: chenqisu1 (~bhca7d@183.217.201.21) (Remote host closed the connection)
[11:40:28] *** Joins: rayw (~ray@cpc83999-pool15-2-0-cust1.15-1.cable.virginm.net)
[11:40:41] *** Joins: chenqisu1 (~bhca7d@183.217.201.21)
[11:41:38] *** Quits: biberu (~biberu@user/biberu) (Ping timeout: 256 seconds)
[11:48:31] *** Quits: ironman (~ironman@2405:201:1010:b033:bad0:8910:44c9:da61) (Quit: Leaving)
[11:50:38] *** Quits: forgotmynick (uid24625@id-24625.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[11:51:16] *** Quits: JohnMS_WORK (~kvirc@89-64-83-123.dynamic.chello.pl) (Ping timeout: 256 seconds)
[11:51:22] <sam113101> does operator!= get defined automatically when you define operator==
[11:51:44] *** Joins: JohnMS_WORK (~kvirc@user-5-173-136-94.play-internet.pl)
[11:51:44] *** Joins: NiD27 (~nid27@49.205.151.136)
[11:51:44] *** Joins: biberu (~biberu@user/biberu)
[11:51:44] *** Joins: chiselfuse (~chiselfus@user/chiselfuse)
[11:51:44] *** Joins: don (~don@89.45.90.193)
[11:51:44] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[11:51:44] *** Joins: BluesBoy (~bboy@user/bluesboy)
[11:51:44] *** Joins: bzyx (~quassel@89-69-20-238.dynamic.chello.pl)
[11:51:44] *** Joins: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon)
[11:51:44] *** Joins: llh (~llh@user/llh)
[11:51:44] *** Joins: pizdets (~pizdets@183.182.111.169)
[11:51:44] *** Joins: mixfix41 (~homefame@user/mixfix41)
[11:51:44] *** Joins: hiovoltage (~hiovoltag@78.186.68.182)
[11:51:44] *** Joins: Atque (~Atque@user/atque)
[11:51:44] *** Joins: Inst (~delicacie@c-98-208-218-119.hsd1.fl.comcast.net)
[11:51:44] *** Joins: tbcr_ (~tbcr@107.13.189.161)
[11:51:44] *** Joins: lh_cat (~lh_mouse@mingw-w64/developer/lhmouse)
[11:51:44] *** Joins: leduyquang753 (~leduyquan@user/leduyquang753)
[11:51:44] *** Joins: Carbonflux (~Carbonflu@c-66-235-54-179.sea.wa.customer.broadstripe.net)
[11:51:44] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[11:51:44] *** Joins: crankslider (~slidercra@user/slidercrank)
[11:51:44] *** Joins: _SKiTZO (~dark@64.89-10-146.nextgentel.com)
[11:51:44] *** Joins: Soni (~quassel@autistic.space)
[11:51:44] *** Joins: jdavfsxd (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[11:51:44] *** Joins: Betal (~Betal@user/betal)
[11:51:44] *** Joins: noarb (~noarb@user/noarb)
[11:51:44] *** Joins: aeg (~aeg@215-052-180-159.dynamic.caiway.nl)
[11:51:44] *** Joins: Brett[Air] (~Brett@124.148.79.4)
[11:51:44] *** Joins: peacefulman (~paul@107-190-110-80.cpe.teksavvy.com)
[11:51:44] *** Joins: feldim2425 (~feldim242@dynamic-2jh5c12x2xq736zy5n-pd01.res.v6.highway.a1.net)
[11:51:44] *** Joins: TheCoffeMaker (~TheCoffeM@user/thecoffemaker)
[11:51:44] *** Joins: pikapika (~pikapika_@pika.powered.by.lunarbnc.net)
[11:51:44] *** Joins: rvalue (~rvalue@user/rvalue)
[11:51:44] *** Joins: kaph (~kaph@net-2-38-107-19.cust.vodafonedsl.it)
[11:51:44] *** Joins: Cahaan (~Cahaan@user/cahaan)
[11:51:44] *** Joins: millido (~millido@84.210.150.128)
[11:51:44] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[11:51:44] *** Joins: lockywolf (~lockywolf@public.lockywolf.net)
[11:51:44] *** Joins: susam (~susam@user/susam)
[11:51:44] *** Joins: shailangsa (~shailangs@host86-185-98-37.range86-185.btcentralplus.com)
[11:51:44] *** Joins: alex88 (~alex88@ip72-207-140-105.lv.lv.cox.net)
[11:51:44] *** Joins: letto (~letto@188.25.113.229)
[11:51:44] *** Joins: fbiagent_ (~fbiagent@user/fbiagent)
[11:51:44] *** Joins: HvszrStykp (~X@81.171.62.86)
[11:51:44] *** Joins: karakedi (~eAC53C340@user/karakedi)
[11:51:44] *** Joins: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net)
[11:51:44] *** Joins: causative (~halberd@user/causative)
[11:51:44] *** Joins: RandomReader (~RandomRea@user/randomreader)
[11:51:44] *** Joins: Linux77 (~LinuMage@186.233.182.173)
[11:51:44] *** Joins: joast (~rick@cpe-98-146-112-4.natnow.res.rr.com)
[11:51:44] *** Joins: rogorido (~rogorido@mail.georeligion.org)
[11:51:44] *** Joins: greenbagels (~gb@user/greenbagels)
[11:51:44] *** Joins: dongcarl (~dongcarl@70.107.207.192)
[11:51:44] *** Joins: Teukka (~teukka@user/Teukka)
[11:51:44] *** Joins: autark (~autark@ti0048a400-0869.bb.online.no)
[11:51:44] *** Joins: dzz007 (~dzz007@user/dzz007)
[11:51:44] *** Joins: Munnu (~timo@81-197-121-83.elisa-laajakaista.fi)
[11:51:44] *** Joins: edr (~edr@user/edr)
[11:51:44] *** Joins: Hello72 (~Hello71@wireguard/contributor/hello71)
[11:51:44] *** Joins: daswf852 (~daswf852@user/daswf852)
[11:51:44] *** Joins: bindu (~bindu@user/bindu)
[11:51:44] *** Joins: ville (~ville@user/ville)
[11:51:44] *** Joins: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao)
[11:51:44] *** Joins: Spirit532 (~Spirit532@user/Spirit532)
[11:51:44] *** Joins: IceMichael (~IceMichae@h2878436.stratoserver.net)
[11:51:44] *** Joins: nlatp[m] (~nlatpmatr@2001:470:69fc:105::1:4d1f)
[11:51:44] *** Joins: scjg (~scjgmatri@2001:470:69fc:105::f5d6)
[11:51:44] *** Joins: crabbedhaloablut (~crabbedha@user/crabbedhaloablut)
[11:51:44] *** Joins: epony (~epony@user/epony)
[11:51:44] *** Joins: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[11:51:44] *** Joins: elb0w (~elb0w@pool-98-109-49-7.nwrknj.fios.verizon.net)
[11:51:44] *** Joins: traxex (traxex@user/traxex)
[11:51:44] *** Joins: cation (cation@user/cation)
[11:51:44] *** Joins: very_sneaky (~very_snea@user/very-sneaky/x-7432109)
[11:51:44] *** Joins: hackkitten (~hackkitte@94.31.103.136)
[11:51:44] *** Joins: LordKalma (~LordKalma@server.ruilvo.com)
[11:51:44] *** Joins: CarloWood (~LdK13@212-127-230-18.cable.dynamic.v4.ziggo.nl)
[11:51:44] *** Joins: randm (~randm@user/randm)
[11:51:44] *** Joins: henbruas (~henbruas@ti0003a400-4203.bb.online.no)
[11:51:44] *** Joins: Inline (~Inline@aftr-37-201-240-204.unity-media.net)
[11:51:44] *** Joins: manx (xuew@p200300e18f239d00022215fffe03cf97.dip0.t-ipconnect.de)
[11:51:44] *** Joins: lloda (~user@11-206-127-185.static.world-connect.ch)
[11:51:44] *** Joins: ralu (~ralu@static.211.245.203.116.clients.your-server.de)
[11:51:44] *** Joins: pflanze (~pflanze@5-168-208-80.dyn.fiber.qlnet.ch)
[11:51:44] *** Joins: Kulrak (Kulrak@n122-109-158-59.rdl2.qld.optusnet.com.au)
[11:51:44] *** Joins: m_tadeu (~quassel@bl11-135-102.dsl.telepac.pt)
[11:51:44] *** Joins: dme2 (~dme2@67.205.140.199)
[11:51:44] *** Joins: testasty[m] (~testastym@2001:470:69fc:105::1:5b38)
[11:51:44] *** Joins: sielicki (~sielickim@2001:470:69fc:105::f45)
[11:51:44] *** Joins: writeback[m] (~writeback@2001:470:69fc:105::1:6118)
[11:51:44] *** Joins: Stewart (~stewart@2001:470:69fc:105::1:6cd)
[11:51:44] *** Joins: hsiktas[m] (~hsiktasma@2001:470:69fc:105::30d4)
[11:51:44] *** Joins: wielding (~wielding@user/wielding)
[11:51:44] *** Joins: popocka[m] (~popockama@2001:470:69fc:105::1:546e)
[11:51:44] *** Joins: bsffffff[m] (~bsffffffm@2001:470:69fc:105::1:4c49)
[11:51:44] *** Joins: equinox[m] (~momoshiki@2001:470:69fc:105::fe92)
[11:51:44] *** Joins: orkim (~orkim@user/orkim)
[11:51:44] *** Joins: heiner_ (~heiner@2a00:6020:b006:a900:d250:99ff:fe34:8fd2)
[11:51:44] *** Joins: milia[m] (~mlliarmma@2001:470:69fc:105::1:4631)
[11:51:44] *** Joins: bitonic (~bitonic@2001:470:69fc:105::1812)
[11:51:44] *** Joins: MarcoAlvarez[m] (~surakgnom@2001:470:69fc:105::2dc)
[11:51:44] *** Joins: treeshateorcs[m] (~treeshate@2001:470:69fc:105::1:41c4)
[11:51:44] *** Joins: ormaaj (~ormaaj@user/ormaaj)
[11:51:44] *** Joins: zygonsisyphus[m] (~zygonsisy@2001:470:69fc:105::482)
[11:51:44] *** Joins: sideshowbarker[m (~sideshowb@2001:470:69fc:105::9a16)
[11:51:44] *** Joins: hnOsmium0001[m] (~hnosmium0@2001:470:69fc:105::15d4)
[11:51:44] *** Joins: aesth[m] (~aesthmatr@2001:470:69fc:105::1:57c1)
[11:51:44] *** Joins: shtumf[m] (~shtumfmat@2001:470:69fc:105::1:1b21)
[11:51:44] *** Joins: Oxyd (~oxyd@user/oxyd)
[11:51:44] *** Joins: GyrosGeier (~geier@185.27.255.155)
[11:51:44] *** Joins: Dijky (~Dijky@user/dijky)
[11:51:44] *** Joins: ZeroKnight (zeroknight@dimensionzero.net)
[11:51:44] *** Joins: gnomesort (~gnomesort@user/gnomesort)
[11:51:44] *** Joins: bdt (~bdt@155.51-174-24.customer.lyse.net)
[11:51:44] *** Joins: sunyour (~sunyour@129.226.182.99)
[11:51:44] *** Joins: malinus_ (~malinus@172.245.158.16)
[11:51:44] *** Joins: jaakkos_ (~jaakkos@88-113-244-153.elisa-laajakaista.fi)
[11:51:44] *** Joins: jkl1337 (~jkl@user/jkl)
[11:51:44] *** Joins: polyrob (~rob@user/polyrob)
[11:51:44] *** Joins: majors_ (~majors@user/majors)
[11:51:44] *** Joins: FergusL (~freenode4@user/fergusl)
[11:51:44] *** Joins: Green_ (~Green-@h-85-24-185-116.A189.priv.bahnhof.se)
[11:51:44] *** Joins: Dreg (~Dreg@fr33project.org)
[11:51:44] *** Joins: lru (~lru@240.ip-51-79-50.net)
[11:51:44] *** Joins: Pajus (~Pajus@user/pajus)
[11:51:44] *** Joins: nortoh (~nortoh@user/nortoh)
[11:51:44] *** Joins: osse (~osse@zsh/user/osse)
[11:51:44] *** Joins: simpl_e (~user@user/simpl-e/x-8589812)
[11:51:44] *** Joins: foul_owl (~kerry@94.140.8.107)
[11:51:44] *** Joins: LittleFox (littlefox@rondra.lf-net.org)
[11:51:44] *** Joins: rnsanchez (~rnsanchez@179.233.249.52)
[11:51:44] *** Joins: ProperNoun (~holyShizn@user/propernoun)
[11:51:44] *** Joins: rb (~augh@theguntretort.com)
[11:51:44] *** Joins: joo-_ (~joo-_@fsf/member/joo--)
[11:51:44] *** Joins: useful_idiot (~useful_id@gateway/vpn/pia/usefulidiot/x-43226899)
[11:51:44] *** Joins: Praise (~Fat@user/praise)
[11:51:44] *** Joins: shenghi (~shenghi@chrysocolla.mutablevoid.org)
[11:51:44] *** Joins: Hobbyboy (Hobbyboy@hobbyboy.co.uk)
[11:51:44] *** Joins: andreyv (~andrey@user/andreyv)
[11:51:44] *** Joins: xrj (~av@2a01:4f8:c17:7cba::1)
[11:51:44] *** Joins: hyper_dave (~hyper_dav@2a01:4f9:4a:246c::2)
[11:51:44] *** Joins: computerquip (sid423484@user/computerquip)
[11:51:44] *** Joins: ws2k3 (znc@vps.freegamehosting.eu)
[11:51:44] *** Joins: [R] (~rs@genoce.org)
[11:51:44] *** Joins: riksteri (d20812115c@2604:bf00:561:2000::1e6)
[11:51:44] *** Joins: elemongw (~elemongw@20.107.36.50)
[11:51:44] *** Joins: catern (~sbaugh@2604:2000:8fc0:b:a9c7:866a:bf36:3407)
[11:51:44] *** Joins: Albright (~Albright@149.28.13.173)
[11:51:44] *** Joins: Telvana (~capo@user/telvana)
[11:51:44] *** Joins: urdh (~urdh@user/urdh)
[11:51:44] *** Joins: Flonk (~Flonk@vps-zap441517-1.zap-srv.com)
[11:51:44] *** Joins: dansan (~daniel@75.81.148.51)
[11:51:44] *** Joins: mrkajetanp (~mrkajetan@88.98.245.28)
[11:51:44] *** Joins: Svitkona (~Svitkona@157.245.38.135)
[11:51:44] *** Joins: Jck_true (~jcktrue@user/jck-true/x-0200799)
[11:51:44] *** Joins: jbalint_ (~jbalint@2600:6c44:117f:e98a:816a:9488:fb1:7b7)
[11:51:44] *** Joins: jzsinatra (~jzsinatra@88-114-238-31.elisa-laajakaista.fi)
[11:51:44] *** Joins: rochadt (~rochadt@24.148.29.135)
[11:51:44] *** Joins: mrec_ (~markus@sundtek.de)
[11:51:44] *** Joins: dexter0 (~dexter0@c-69-181-126-161.hsd1.ca.comcast.net)
[11:51:44] *** Joins: xisop (~xisop@bnull.net)
[11:51:44] *** Joins: imMute (~immute@user/immute)
[11:51:44] *** Joins: celphi (sid97751@user/celphi)
[11:51:44] *** Joins: pieguy12- (~pieguy128@bras-base-mtrlpq5031w-grc-48-67-70-102-17.dsl.bell.ca)
[11:51:44] *** Joins: gothicserpent (~gothicser@2604:a880:4:1d0::176:6000)
[11:51:44] *** Joins: hirish (~hirish@ip85.ip-137-74-20.eu)
[11:51:44] *** Joins: lpotter (~quassel@180-150-104-92.b49668.bne.static.aussiebb.net)
[11:51:44] *** Joins: jellie (~luv_panda@user/jellie)
[11:51:44] *** Joins: renopt (~renopt@lisp.us.to)
[11:51:44] *** Joins: glenfe (sid231748@user/glenfe)
[11:51:44] *** Joins: Bodger1234_ (sid503511@id-503511.uxbridge.irccloud.com)
[11:51:44] *** Joins: TingPing (sid2800@id-2800.helmsley.irccloud.com)
[11:51:44] *** Joins: pippijn (~pippijn@ra.xinutec.org)
[11:51:44] *** Joins: Ara (~Ara@user/ara)
[11:51:44] *** Joins: InPhase (~InPhase@openscad/inphase)
[11:51:44] *** Joins: scruffyfurn (scruffyfur@turbous.xshellz.com)
[11:51:44] *** Joins: drmeister (sid45147@id-45147.ilkley.irccloud.com)
[11:51:44] *** Joins: taiyu (~taiyu@user/taiyu)
[11:51:44] *** Joins: blo (~blo@user/blo)
[11:51:44] *** Joins: ullbeking_ (sid5364@id-5364.ilkley.irccloud.com)
[11:51:44] *** Joins: Learath2 (~learath2@user/learath2)
[11:51:44] *** Joins: merry (~mary@user/merry)
[11:51:44] *** Joins: Argorok (sid195487@id-195487.hampstead.irccloud.com)
[11:51:44] *** Joins: buhman (sid411355@user/buhman)
[11:51:44] *** Joins: aeplus (~steve@2603-8000-cf42-7ec1-162f-1996-0ae2-d7da.res6.spectrum.com)
[11:51:44] *** Joins: Artea (~Lufia@artea.com.pt)
[11:51:44] *** Joins: barometz (~dvanb@i117058.upc-i.chello.nl)
[11:51:44] *** Joins: Yamakaja (~yamakaja@user/yamakaja)
[11:51:44] *** Joins: whatsupboy (~whatsupbo@user/scobydoo)
[11:51:44] *** Joins: enyc (~enyc@user/enyc)
[11:51:44] *** Joins: teepee (~teepee@openscad/teepee)
[11:51:44] *** Joins: spithash (~spithash@user/spithash)
[11:51:44] *** Joins: Pjerky (~Pjerky@81-234-143-135-no58.tbcn.telia.com)
[11:51:44] *** Joins: Chaser (~Chaser@user/chaser)
[11:51:44] *** Joins: Spydar007 (~spydar007@user/spydar007)
[11:51:44] *** Joins: carrar (~tim@osburn.jp)
[11:51:44] *** Joins: obiwahn (~heini@user/obiwahn)
[11:51:44] *** Joins: Benett (~Benett@xnetx.de)
[11:51:44] *** Joins: introom (introom@2600:3c01::f03c:92ff:fea3:2cf)
[11:51:44] *** Joins: braxas (sid508886@id-508886.lymington.irccloud.com)
[11:51:44] *** Joins: dhch (~dhch@185.213.154.165)
[11:51:44] *** Joins: Exa (exa@irc.moe)
[11:51:44] *** Joins: HeTo (henkka@beer.modeemi.fi)
[11:51:44] *** Joins: ruediger (~ruediger@user/ruediger)
[11:51:44] *** Joins: kkd (~kkd@255.205.154.104.bc.googleusercontent.com)
[11:51:44] *** Joins: dwt_ (~dwt_@c-98-198-103-176.hsd1.tx.comcast.net)
[11:51:44] *** Joins: amiti (sid373138@id-373138.lymington.irccloud.com)
[11:51:44] *** Joins: termos (sid18647@id-18647.helmsley.irccloud.com)
[11:51:44] *** Joins: Xizor_ (~Xizor@151.ip-51-68-121.eu)
[11:51:44] *** Joins: vancz (~vancz@user/vancz)
[11:51:44] *** Joins: RemoteHost (A_D@libera/staff/dragon)
[11:51:44] *** Joins: Cienisty (Cienisty@user/cienisty)
[11:51:44] *** Joins: tonitch (~tonitch@user/tonitch)
[11:51:44] *** Joins: supernov1h (~supernova@mail.ijk.nz)
[11:51:44] *** Joins: m42e (~m42e@pb42.de)
[11:51:44] *** Joins: Isthmusi (~Isthmus@user/isveni)
[11:51:44] *** Joins: JakeSays (~jake@c-67-182-197-230.hsd1.ut.comcast.net)
[11:51:44] *** Joins: Eelis (~Eelis@u.eel.is)
[11:51:44] *** Joins: Dragoon (~Dragoon@user/dragoon)
[11:51:44] *** Joins: useretail (~useretail@185.132.19.151)
[11:51:44] *** Joins: blackbeard420 (blackbeard@2600:3c03::f03c:91ff:fe92:3f2a)
[11:51:44] *** Joins: cengiz_io (sid223191@id-223191.ilkley.irccloud.com)
[11:51:44] *** Joins: mukti (mukti@bitcommit.io)
[11:51:44] *** Joins: wangledorf (sid505185@id-505185.ilkley.irccloud.com)
[11:51:44] *** Joins: akacrs (k7f@user/akacrs)
[11:51:44] *** Joins: klys (~mdasoh@show.op8.us)
[11:51:44] *** Joins: hfsoulz (~hfsoulz@user/hfsoulz)
[11:51:44] *** Joins: gdd (~gdd@129.199.146.230)
[11:51:44] *** Joins: tafa (~tafa@user/tafa)
[11:51:44] *** Joins: Guest8100 (~tinloaf@2a03:94e0:163c:57e:bc51:5c66:86e7:1)
[11:51:44] *** Joins: MrC (Ben@mrbenc.net)
[11:51:44] *** Joins: ollien (~ollien@ollien.com)
[11:51:44] *** Joins: chiptuner (~bobby@user/chiptuner)
[11:51:44] *** Joins: geordi (~geordi@tinodidriksen.com)
[11:51:44] *** Joins: mcfrdy (~mcfrdy@user/mcfrdy)
[11:51:44] *** molybdenum.libera.chat sets mode: +v geordi
[11:51:44] *** Joins: kornos_ (~kornos@2a04:ad80:0:fb::3b85)
[11:51:44] *** Joins: Manouchehri (sid384576@id-384576.hampstead.irccloud.com)
[11:51:44] *** Joins: theglass (~glass@user/theglass)
[11:51:44] *** Joins: markand (~markand@markand.fr)
[11:51:44] *** Joins: les (znc@user/les)
[11:51:44] *** Joins: ElementW (~tungsten@hoodie.elementw.net)
[11:51:44] *** Joins: Khoyo (~khoyo@user/khoyo)
[11:51:44] *** Joins: zaratustra_ (~zaratustr@idlerpg/player/zaratustra)
[11:51:44] *** Joins: tin- (~tin@209.250.245.227)
[11:51:44] *** Joins: Adrinael (adrinael@dsl-hkibng21-54f8c5-237.dhcp.inet.fi)
[11:51:44] *** Joins: michaeli1 (~michaelis@193.183.209.17)
[11:51:44] *** Joins: krzych (krzych@nroot.pl)
[11:51:44] *** Joins: b_jonas (~x@catv-176-63-3-122.catv.broadband.hu)
[11:51:44] *** Joins: eck (~root@user/eck)
[11:51:44] *** Joins: jancoow (~jancoow@user/jancoow)
[11:51:44] *** Joins: jaimelm (~jaimelm@deneb.emergentcommunitysystems.com)
[11:51:44] *** Joins: djinni (~djinni@static.38.6.217.95.clients.your-server.de)
[11:51:44] *** Joins: kalven (~calvin@2a02:470:84:102::24)
[11:51:44] *** Joins: nohit (sid334887@id-334887.tinside.irccloud.com)
[11:51:44] *** Joins: hirion (~hirion@user/hirion)
[11:51:44] *** Joins: cncr04s (~cncr04s@afxr.net)
[11:51:44] *** Joins: nolyc (~nolyc@tinodidriksen.com)
[11:51:44] *** Joins: stephe (sid14127@id-14127.lymington.irccloud.com)
[11:51:44] *** Joins: lhtseng (sid15322@id-15322.helmsley.irccloud.com)
[11:51:44] *** Joins: yano (~yano@ircpuzzles/staff/yano)
[11:51:44] *** Joins: z8z (~x@ac255238.ppp.asahi-net.or.jp)
[11:51:44] *** Joins: miklcct (~quassel@vps.miklcct.com)
[11:51:44] *** Joins: luna-is-here (~quassel@2a02:908:f761:2a3c::a)
[11:51:44] *** Joins: paulo (paulo@user/paulo/x-9032687)
[11:51:44] *** Joins: tbe_loki (~loki@loki.codes)
[11:51:44] *** Joins: rdrg109 (~rdrg109@user/rdrg109)
[11:51:44] *** Joins: manuels (~manuel@80.211.205.88)
[11:51:44] *** Joins: e2 (e2@sponsored.by.bnc4you.xyz)
[11:51:44] *** Joins: zinc_ (~zinc@163.ip-51-254-203.eu)
[11:51:44] *** Joins: GrecKo (~grecko@static.183.157.9.5.clients.your-server.de)
[11:51:44] *** Joins: tobs (~tobs@taboege.de)
[11:51:44] *** Joins: deepy (deepy@user/deepy)
[11:51:44] *** Joins: talisein (~talisein@user/talisein)
[11:51:44] *** Joins: bone (~bone@user/mbo)
[11:51:44] *** Joins: reda_ (~reda@user/reda)
[11:51:44] *** Joins: IUSR (sid348938@id-348938.hampstead.irccloud.com)
[11:51:44] *** Joins: sa (sid1055@id-1055.tinside.irccloud.com)
[11:51:44] *** Joins: BtbN (btbn@ffmpeg/developer/btbn)
[11:51:44] *** Joins: sujeet (sujeet@freeboson.org)
[11:51:44] *** Joins: mgot (~mgot@vps-35cddd71.vps.ovh.net)
[11:51:44] *** Joins: Pent (sid313808@id-313808.lymington.irccloud.com)
[11:51:44] *** Joins: preisi (~preisi@irc.prei.si)
[11:51:44] *** molybdenum.libera.chat sets mode: +v nolyc
[11:51:44] *** Joins: gendl (sid100083@id-100083.hampstead.irccloud.com)
[11:51:44] *** Joins: tcsc (sid145321@id-145321.lymington.irccloud.com)
[11:51:44] *** Joins: boreas (~Thunderbi@2a00:6020:b006:a900:d250:99ff:fe34:8fd2)
[11:51:44] *** Joins: irc-open-up (bounce@bounce.nastycode.com)
[11:51:44] *** Joins: gjvc (~gjvc@29.68.246.35.bc.googleusercontent.com)
[11:51:44] *** Joins: DrinkyBird (~drinkybir@idlerpg/player/DrinkyBird)
[11:51:44] *** Joins: Karyon (~Karyon@user/karyon)
[11:51:44] *** Joins: zoraj (~zoraj@209.126.81.159)
[11:51:44] *** Joins: syrius (syrius@titan.stormtek.net)
[11:51:44] *** Joins: ERROH (~mama@user/mama)
[11:51:44] *** Joins: leah2 (~leah@vuxu.org)
[11:51:44] *** Joins: unyu (~pyon@user/pyon)
[11:51:44] *** Joins: geeknix (~pi@2001:e68:5432:307:f6b7:9845:4bce:2869)
[11:51:44] *** Joins: sonic1 (~sonic@user/sonic)
[11:51:44] *** Joins: qwedfg (~qwedfg@user/qwedfg)
[11:51:44] *** Joins: markmarkmark (~mark@user/markmarkmark)
[11:51:44] *** Joins: Byteflux (~byte@byteflux.net)
[11:51:44] *** Joins: Furai (~Furai@furai.pl)
[11:51:45] *** Quits: Starfoxxes (~Starfoxxe@2a02:8070:5390:d00:12bf:48ff:feb8:38c8) (Max SendQ exceeded)
[11:51:47] *** Quits: andreasbuhr (~quassel@p549db698.dip0.t-ipconnect.de) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[11:52:05] *** JohnMS_WORK is now known as 073AAG789
[11:52:06] *** Quits: epony (~epony@user/epony) (Max SendQ exceeded)
[11:52:09] *** Quits: kaph (~kaph@net-2-38-107-19.cust.vodafonedsl.it) (Ping timeout: 240 seconds)
[11:52:10] *** Joins: epony (~epony@user/epony)
[11:52:11] *** Joins: Starfoxxes (~Starfoxxe@2a02:8070:5390:d00:12bf:48ff:feb8:38c8)
[11:52:26] *** Joins: JohnMS_WORK (~kvirc@185.73.229.242)
[11:54:20] *** Joins: judabuda (kowbunga@thunderirc.net)
[11:54:31] *** Quits: 073AAG789 (~kvirc@user-5-173-136-94.play-internet.pl) (Ping timeout: 256 seconds)
[11:54:31] *** Quits: rogorido (~rogorido@mail.georeligion.org) (Ping timeout: 256 seconds)
[11:54:57] *** Quits: anandn (~anandn@2601:600:a27f:d92d:d5cd:456:23f2:7291) (Ping timeout: 240 seconds)
[11:56:13] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Ping timeout: 256 seconds)
[11:56:35] *** Joins: JohnMS_AWAY (~kvirc@89-64-83-123.dynamic.chello.pl)
[11:56:38] *** Joins: andreasbuhr (~quassel@p549db698.dip0.t-ipconnect.de)
[11:56:38] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[11:56:41] *** Quits: JohnMS_WORK (~kvirc@185.73.229.242) (Read error: Connection reset by peer)
[11:57:33] *** Joins: LucaTM (~LucaTM@user/lucatm)
[11:58:15] *** Joins: rogorido (~rogorido@mail.georeligion.org)
[11:58:50] *** Joins: Jantz (~IceChat95@118-93-132-243.dsl.dyn.ihug.co.nz)
[11:58:55] *** Quits: Jantz (~IceChat95@118-93-132-243.dsl.dyn.ihug.co.nz) (Excess Flood)
[12:00:52] *** Joins: dyeplexer (~dyeplexer@user/dyeplexer)
[12:01:57] *** Quits: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net) (Ping timeout: 240 seconds)
[12:02:44] *** Quits: JohnMS_AWAY (~kvirc@89-64-83-123.dynamic.chello.pl) (Quit: KVIrc 5.0.1 Aria http://www.kvirc.net/)
[12:03:57] *** michaeli1 is now known as michaelis
[12:04:07] *** Joins: MajorBiscuit (~MajorBisc@c-001-032-022.client.tudelft.eduvpn.nl)
[12:04:15] *** Quits: michaelis (~michaelis@193.183.209.17) (Quit: leaving)
[12:04:50] *** Quits: hinata (~hinata@2409:4042:d98:f536:1c6:56da:21b9:6c5b) (Quit: Leaving)
[12:05:30] *** Joins: JohnMS_WORK (~kvirc@89-64-83-123.dynamic.chello.pl)
[12:11:03] <fiesh> sam113101: what happened when you tried it?
[12:11:31] *** Quits: dyeplexer (~dyeplexer@user/dyeplexer) (Ping timeout: 256 seconds)
[12:14:14] *** Quits: AmR (~AmREiSa@41.238.31.212) (Quit: Konversation terminated!)
[12:19:27] *** Quits: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon) (Ping timeout: 276 seconds)
[12:20:33] *** Joins: zen_coder (~zen_coder@2a02:8109:a280:2d8d:80b8:5f9c:24dd:6945)
[12:22:43] *** Joins: Brewster_ (~Brewster@104.145.226.5)
[12:22:57] *** Quits: Brewster (~Brewster@104.145.226.5) (Ping timeout: 240 seconds)
[12:22:59] *** Brewster_ is now known as Brewster
[12:23:14] *** Joins: frost (~frost@user/frost)
[12:23:37] *** Joins: rendar (~rendar@user/rendar)
[12:25:37] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[12:25:51] *** Joins: Fairy (~Fairy@2001:464a:4992:0:55d4:c070:9ca0:8896)
[12:26:47] *** Quits: lunix00 (~lunix00@2804:14c:6321:900d:59ed:78f6:d0f0:e463) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[12:28:13] *** Quits: Betal (~Betal@user/betal) (Quit: WeeChat 3.4)
[12:30:08] *** Quits: sideshowbarker[m (~sideshowb@2001:470:69fc:105::9a16) (Quit: You have been kicked for being idle)
[12:32:41] *** Joins: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon)
[12:39:42] *** Joins: dyeplexer (~dyeplexer@user/dyeplexer)
[12:41:12] *** Joins: stonkey (~stonkey@user/stonkey)
[12:41:22] *** Joins: ironman (~ironman@2405:201:1010:b033:bad0:8910:44c9:da61)
[12:42:40] <ville> sam113101: the explanation is bit of a chicken-and-egg. in the olden days, and even today if you don't pass the necessary flags, the compiler needs to see the function definition in order to do "inline the optimization"...
[12:43:54] <ville> ah nevermind leduyquang753 already expanded on it
[12:44:34] <ville> sam113101: well just keep in mind that there's "inline the keyword" and "inline the optimization"
[12:49:46] *** Joins: the_lanetly_052 (~the_lanet@185.30.88.55)
[13:01:12] *** Joins: lxsameer (~lxsameer@user/lxsameer)
[13:03:13] *** Joins: hinata (~hinata@2409:4042:d98:f536:1c6:56da:21b9:6c5b)
[13:04:29] *** Joins: arinov (~arinov@213.194.126.155)
[13:04:45] *** Quits: dyeplexer (~dyeplexer@user/dyeplexer) (Quit: Leaving)
[13:07:06] *** Joins: bebyx (~Thunderbi@user/bebyx)
[13:14:41] *** Joins: kaph (~kaph@net-2-38-107-19.cust.vodafonedsl.it)
[13:15:48] *** Joins: jehelset (~jeh@2001:4644:4144:0:e2d4:e8ff:fedf:f070)
[13:16:02] *** Quits: lhtseng (sid15322@id-15322.helmsley.irccloud.com) (Ping timeout: 240 seconds)
[13:17:38] *** Joins: lhtseng (sid15322@id-15322.helmsley.irccloud.com)
[13:19:06] *** Quits: frost (~frost@user/frost) (Ping timeout: 256 seconds)
[13:20:21] *** Joins: bigRoo (~user@73.181.dsl.syd.iprimus.net.au)
[13:21:15] *** Quits: NiD27 (~nid27@49.205.151.136) (Quit: Leaving)
[13:28:14] *** Joins: blackout69 (~blackout6@net-109-117-245-237.cust.vodafonedsl.it)
[13:29:42] *** Joins: plastico (~plastico@neomutt/plastico)
[13:33:31] *** Joins: seninha (~seninha@user/seninha)
[13:34:44] *** Quits: stonkey (~stonkey@user/stonkey) (Remote host closed the connection)
[13:38:22] *** Quits: proller (~p@80.240.216.69) (Ping timeout: 256 seconds)
[13:38:45] *** Quits: peacefulman (~paul@107-190-110-80.cpe.teksavvy.com) (Remote host closed the connection)
[13:39:03] *** Joins: peacefulman (~paul@107-190-110-80.cpe.teksavvy.com)
[13:40:55] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[13:40:55] *** ChanServ sets mode: +v npaperbot
[13:44:10] *** Joins: furrymcgee (~devuan@cgn-89-1-208-165.nc.de)
[13:53:35] *** Joins: Burgundy (~yomon@82.76.72.88)
[13:53:56] *** Joins: unknow (~i.am@user/marlboro)
[13:54:39] *** Quits: osse (~osse@zsh/user/osse) (Ping timeout: 256 seconds)
[13:55:21] *** Joins: osse (~osse@zsh/user/osse)
[13:57:04] *** Joins: GreenResponse (~tomek@r-45-155-148-237.gpon.bialnet.pl)
[13:58:02] *** Quits: bigRoo (~user@73.181.dsl.syd.iprimus.net.au) (Remote host closed the connection)
[13:58:04] *** Joins: walterwhip (~www@user/walterwhip)
[13:58:51] *** Quits: walterwhip (~www@user/walterwhip) (Client Quit)
[14:04:13] *** Quits: arinov (~arinov@213.194.126.155) (Ping timeout: 240 seconds)
[14:05:44] *** Quits: karakedi (~eAC53C340@user/karakedi) (Remote host closed the connection)
[14:11:44] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:65bb:c31d:f4b5:273e) (Quit: Textual IRC Client: www.textualapp.com)
[14:12:56] *** Quits: chenqisu1 (~bhca7d@183.217.201.21) (Ping timeout: 256 seconds)
[14:18:44] *** Joins: Schrostfutz_ (~Schrostfu@schettlerdck.tkn.tu-berlin.de)
[14:20:01] *** Joins: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net)
[14:26:00] *** Quits: judabuda (kowbunga@thunderirc.net) (Changing host)
[14:26:00] *** Joins: judabuda (kowbunga@user/judabuda)
[14:26:18] *** Joins: PureSine (~PureSine@109.162.172.197)
[14:28:37] *** Quits: Fairy (~Fairy@2001:464a:4992:0:55d4:c070:9ca0:8896) (Ping timeout: 240 seconds)
[14:29:25] *** Quits: lxsameer (~lxsameer@user/lxsameer) (Ping timeout: 240 seconds)
[14:29:35] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:2cdf:da3e:72d8:7f8f)
[14:29:37] *** Joins: the_lanetly_052_ (~the_lanet@194.135.153.29)
[14:30:33] *** Joins: frost (~frost@user/frost)
[14:32:01] *** Joins: proller (~p@2a02:6b8:0:40c:e4e9:dfa0:20d6:1961)
[14:32:03] *** Quits: the_lanetly_052 (~the_lanet@185.30.88.55) (Ping timeout: 256 seconds)
[14:32:40] *** Quits: cursey (~cursey@user/cursey) (Quit: bye)
[14:34:20] *** Joins: hasuTMK (~hasu@58x13x224x139.ap58.ftth.ucom.ne.jp)
[14:36:10] *** Quits: JohnMS_WORK (~kvirc@89-64-83-123.dynamic.chello.pl) (Ping timeout: 256 seconds)
[14:37:52] *** Quits: PureSine (~PureSine@109.162.172.197) (Changing host)
[14:37:52] *** Joins: PureSine (~PureSine@user/PureSine)
[14:38:10] *** Quits: PureSine (~PureSine@user/PureSine) (Quit: Leaving)
[14:38:54] *** Joins: PureSine (~PureSine@user/PureSine)
[14:40:17] *** Quits: PureSine (~PureSine@user/PureSine) (Remote host closed the connection)
[14:40:26] *** Joins: Zweimer (~Zweimer@2a02:908:d20:26e0:d9b1:490d:9d0f:b3ea)
[14:40:37] *** Joins: PureSine (~PureSine@user/PureSine)
[14:41:14] *** Joins: Zweimer62 (~Zweimer@2a02:908:d20:26e0:d9b1:490d:9d0f:b3ea)
[14:41:26] *** Quits: Zweimer62 (~Zweimer@2a02:908:d20:26e0:d9b1:490d:9d0f:b3ea) (Client Quit)
[14:44:59] *** Joins: cursey (~cursey@user/cursey)
[14:45:34] *** Joins: KimiaStat (~KimiaStat@user/KimiaStat)
[14:47:20] *** Quits: Carbonflux (~Carbonflu@c-66-235-54-179.sea.wa.customer.broadstripe.net) (Quit: When all you have are solutions, everything is a problem.)
[14:50:38] *** Quits: bindu (~bindu@user/bindu) (Remote host closed the connection)
[14:50:55] *** Joins: bindu (~bindu@user/bindu)
[14:54:09] *** Quits: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net) (Ping timeout: 256 seconds)
[14:55:17] *** Quits: frost (~frost@user/frost) (Ping timeout: 256 seconds)
[14:59:37] *** Joins: KimiaStat_ (~KimiaStat@static.205.212.40.188.clients.your-server.de)
[14:59:37] *** Joins: PureSine_ (~PureSine@static.205.212.40.188.clients.your-server.de)
[14:59:37] *** Quits: KimiaStat (~KimiaStat@user/KimiaStat) (Read error: Connection reset by peer)
[15:03:13] *** Quits: PureSine (~PureSine@user/PureSine) (Ping timeout: 256 seconds)
[15:09:25] *** Quits: MajorBiscuit (~MajorBisc@c-001-032-022.client.tudelft.eduvpn.nl) (Ping timeout: 240 seconds)
[15:14:28] <lockywolf> Can someone have a look at the solution with variadic Args in this question? https://stackoverflow.com/questions/3530771/passing-variable-arguments-to-another-function-that-accepts-a-variable-argument/3530807 ?
[15:14:49] <lockywolf> I am getting a linker (!) error, saying that the said template function is not found.
[15:15:09] <lockywolf> It links fine if template is removed.
[15:16:49] <bpalmer> you're using a c style variadic function, or a c++ template parameter pack?
[15:17:20] <bpalmer> (the latter looks like template<typename... Types> void f(Types... args); )
[15:17:49] *** Quits: jehelset (~jeh@2001:4644:4144:0:e2d4:e8ff:fedf:f070) (Ping timeout: 240 seconds)
[15:18:27] *** Joins: stonkey (~stonkey@user/stonkey)
[15:18:44] <lockywolf> c++ parameter pack
[15:18:45] *** Quits: Schrostfutz_ (~Schrostfu@schettlerdck.tkn.tu-berlin.de) (Read error: Connection reset by peer)
[15:19:02] <lockywolf> I mean... I am "kinda" understanding why this is happening.
[15:19:09] *** Joins: Schrostfutz_ (~Schrostfu@schettlerdck.tkn.tu-berlin.de)
[15:19:20] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[15:19:45] <lockywolf> The template is not expanded when the .a library is linked, and when the .a library is itself linked to the .o file, there is no specialization in it.
[15:20:30] <lockywolf> But I don't understand how to tell the compiler to expand the templates when .a is created.
[15:20:34] <bpalmer> so your code is literally the example in #71 from that stackoverflow post?
[15:20:41] <lockywolf> no, not really
[15:20:42] <lockywolf> sorry
[15:20:58] <bpalmer> see if that example works for you.
[15:21:04] <lockywolf> disregard my first question, please
[15:22:32] <bpalmer> templates should be expanded at compilation time, before the linker ever gets involved, so the premise is confusing me.
[15:24:21] <lockywolf> I have l.h, l.cpp, and e.cpp, which include's l.h. l.h and l.cpp are linked into an l.a , which does not end up having a template specialization that e.cpp needs.
[15:25:36] <lockywolf> because when l.cpp is compiled, calls to that template function are not found, and the template is never specialized
[15:26:08] <bpalmer> ah. You'll need to fix that , then, before it gets to the linker. This is why typically templates are often implemented inside the header that things will be including
[15:27:00] <bpalmer> see, for example, https://isocpp.org/wiki/faq/templates#templates-defn-vs-decl
[15:28:05] <bpalmer> (the next two questions in that are also relevant)
[15:28:51] <bpalmer> I've never actually used extern template.
[15:32:37] <bpalmer> although I realize now you wrote template specialization rather than template instantiation; template specialization means you are writing custom code for a particular type rather than rely on the generic template pattern.
[15:32:50] *** Quits: T`aZ (~TaZ@user/taz/x-9470768) (Ping timeout: 256 seconds)
[15:32:52] *** Joins: PJBoy (~PJBoy@user/pjboy)
[15:34:39] *** Joins: T`aZ (~TaZ@user/taz/x-9470768)
[15:35:37] *** Joins: KimiaStat (~KimiaStat@user/KimiaStat)
[15:35:38] *** Joins: PureSine (~PureSine@user/PureSine)
[15:37:22] *** Quits: KimiaStat_ (~KimiaStat@static.205.212.40.188.clients.your-server.de) (Ping timeout: 256 seconds)
[15:37:22] *** Quits: PureSine_ (~PureSine@static.205.212.40.188.clients.your-server.de) (Ping timeout: 256 seconds)
[15:48:56] *** Joins: lxsameer (~lxsameer@user/lxsameer)
[15:50:58] *** Joins: Yruama (~Yruama@2a01:cb15:8128:c100:8634:97ff:fe6e:86ac)
[15:54:22] *** Quits: osse (~osse@zsh/user/osse) (Ping timeout: 256 seconds)
[15:59:07] *** Joins: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz)
[16:00:14] *** Quits: Lazenca (~lazenca@user/lazenca) (Remote host closed the connection)
[16:00:21] *** Joins: osse (~osse@zsh/user/osse)
[16:01:43] *** Joins: Leone (~Leo@157.52.18.77)
[16:03:39] *** Quits: bpalmer (~user@user/bpalmer) (Remote host closed the connection)
[16:05:17] *** Quits: hinata (~hinata@2409:4042:d98:f536:1c6:56da:21b9:6c5b) (Ping timeout: 240 seconds)
[16:05:51] *** Joins: hinata (~hinata@2409:4042:d98:f536:9cb:7c09:99ce:f13f)
[16:07:49] *** Quits: Brett[Air] (~Brett@124.148.79.4) (Ping timeout: 256 seconds)
[16:08:45] *** Joins: constxd (~brad@142.134.38.68)
[16:15:01] *** Joins: kit-ten (~u0_a391@2600:380:a435:d1e6:8fe6:1d70:7462:c689)
[16:16:06] *** Joins: cmbengue (~Thunderbi@207.191.249.160)
[16:16:33] *** Quits: cmbengue (~Thunderbi@207.191.249.160) (Remote host closed the connection)
[16:17:57] *** Quits: kit_ten (~u0_a391@cpe-76-190-178-139.neo.res.rr.com) (Ping timeout: 240 seconds)
[16:18:58] *** Quits: Schrostfutz_ (~Schrostfu@schettlerdck.tkn.tu-berlin.de) (Read error: Connection reset by peer)
[16:19:44] *** Joins: Schrostfutz_ (~Schrostfu@schettlerdck.tkn.tu-berlin.de)
[16:20:37] *** Quits: fbiagent_ (~fbiagent@user/fbiagent) (Remote host closed the connection)
[16:22:54] *** Joins: fbiagent (~fbiagent@user/fbiagent)
[16:23:45] *** Parts: blackout69 (~blackout6@net-109-117-245-237.cust.vodafonedsl.it) ()
[16:24:02] *** Joins: tmm88 (~tmm88@2001:8a0:ff48:1500:b82a:6e08:74e1:6554)
[16:24:35] *** Quits: tmm88 (~tmm88@2001:8a0:ff48:1500:b82a:6e08:74e1:6554) (Changing host)
[16:24:35] *** Joins: tmm88 (~tmm88@user/tmm88)
[16:26:14] *** Joins: Fairy (~Fairy@2001:464a:4992:0:55d4:c070:9ca0:8896)
[16:29:17] *** Quits: emanuele6 (~emanuele6@user/emanuele6) (Remote host closed the connection)
[16:29:21] *** Joins: arinov (~arinov@213.194.126.155)
[16:30:29] *** Quits: kaph (~kaph@net-2-38-107-19.cust.vodafonedsl.it) (Ping timeout: 256 seconds)
[16:36:37] *** Quits: ironman (~ironman@2405:201:1010:b033:bad0:8910:44c9:da61) (Quit: Leaving)
[16:39:45] *** Quits: proller (~p@2a02:6b8:0:40c:e4e9:dfa0:20d6:1961) (Ping timeout: 268 seconds)
[16:40:47] *** Joins: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br)
[16:41:52] *** hasuTMK is now known as hasu
[16:41:59] *** Quits: zen_coder (~zen_coder@2a02:8109:a280:2d8d:80b8:5f9c:24dd:6945) (Quit: Konversation terminated!)
[16:43:05] *** Joins: Guest17 (~Guest17@wificampus-097061.grenet.fr)
[16:45:04] *** Quits: tmm88 (~tmm88@user/tmm88) (Quit: Client closed)
[16:45:32] *** Joins: xiongxin (~Thunderbi@113.116.34.15)
[16:52:41] *** Joins: proller (~p@2a02:6b8:0:40c:4efa:2971:68f2:8ad5)
[16:54:41] *** Joins: tmm88 (~tmm88@2001:8a0:ff48:1500:b82a:6e08:74e1:6554)
[16:54:48] *** Quits: tmm88 (~tmm88@2001:8a0:ff48:1500:b82a:6e08:74e1:6554) (Changing host)
[16:54:48] *** Joins: tmm88 (~tmm88@user/tmm88)
[17:00:21] *** Quits: KimiaStat (~KimiaStat@user/KimiaStat) (Quit: Leaving)
[17:00:22] *** Quits: PureSine (~PureSine@user/PureSine) (Quit: Leaving)
[17:01:28] *** Quits: hinata (~hinata@2409:4042:d98:f536:9cb:7c09:99ce:f13f) (Quit: Leaving)
[17:02:26] *** Quits: Guest17 (~Guest17@wificampus-097061.grenet.fr) (Quit: Client closed)
[17:05:52] *** Joins: MajorBiscuit (~MajorBisc@c-001-032-008.client.tudelft.eduvpn.nl)
[17:07:04] *** Joins: cmbengue (~Thunderbi@207.191.249.160)
[17:08:39] *** Quits: tmm88 (~tmm88@user/tmm88) (Quit: Client closed)
[17:10:34] *** Joins: bitmask (~bitmask@c-73-215-237-27.hsd1.nj.comcast.net)
[17:13:22] *** Quits: cmbengue (~Thunderbi@207.191.249.160) (Quit: Thanks, see you later.)
[17:14:01] *** Joins: cmbengue (~Thunderbi@207.191.249.160)
[17:14:53] *** Quits: Guest8100 (~tinloaf@2a03:94e0:163c:57e:bc51:5c66:86e7:1) (Ping timeout: 250 seconds)
[17:19:40] *** Quits: Schrostfutz_ (~Schrostfu@schettlerdck.tkn.tu-berlin.de) (Read error: Connection reset by peer)
[17:20:16] *** Joins: Schrostfutz_ (~Schrostfu@schettlerdck.tkn.tu-berlin.de)
[17:23:12] *** Joins: karakedi (~eAC53C340@user/karakedi)
[17:24:49] *** Joins: pulse (~pulse@user/pulse)
[17:26:31] *** Quits: the_lanetly_052_ (~the_lanet@194.135.153.29) (Remote host closed the connection)
[17:31:12] *** Joins: dsrt^ (~dsrt@wsip-98-188-246-242.mc.at.cox.net)
[17:32:25] *** Joins: mattallmill (~mattallmi@ip68-103-130-85.ks.ok.cox.net)
[17:33:47] *** Quits: cmbengue (~Thunderbi@207.191.249.160) (Remote host closed the connection)
[17:34:34] <norias> win 4
[17:34:37] <norias> oops
[17:38:57] *** Quits: proller (~p@2a02:6b8:0:40c:4efa:2971:68f2:8ad5) (Ping timeout: 240 seconds)
[17:40:19] *** Joins: Teth (~kvirc@cpe-71-79-34-84.cinci.res.rr.com)
[17:40:47] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[17:40:55] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[17:40:55] *** ChanServ sets mode: +v npaperbot
[17:41:34] *** Joins: jehelset (~jeh@2001:4644:4144:0:e2d4:e8ff:fedf:f070)
[17:43:10] *** Quits: Teth|3 (~kvirc@cpe-71-79-34-84.cinci.res.rr.com) (Ping timeout: 256 seconds)
[17:44:56] *** Joins: the_lanetly_052 (~the_lanet@194.135.153.29)
[17:45:17] *** Quits: crankslider (~slidercra@user/slidercrank) (Ping timeout: 256 seconds)
[17:45:39] *** Quits: the_lanetly_052 (~the_lanet@194.135.153.29) (Max SendQ exceeded)
[17:46:13] *** Joins: the_lanetly_052 (~the_lanet@194.135.153.29)
[17:48:50] *** Quits: arinov (~arinov@213.194.126.155) (Ping timeout: 256 seconds)
[17:52:10] *** Joins: proller (~p@2a02:6b8:0:408:eef4:bbff:fe62:69c8)
[17:52:10] *** Quits: proller (~p@2a02:6b8:0:408:eef4:bbff:fe62:69c8) (Remote host closed the connection)
[17:52:53] *** Quits: xsperry (~xs@user/xsperry) (Remote host closed the connection)
[17:52:58] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Remote host closed the connection)
[17:53:34] *** Joins: xsperry (~xs@user/xsperry)
[17:54:24] *** Joins: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net)
[17:58:51] *** Joins: arinov (~arinov@213.194.126.155)
[18:01:57] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Quit: Ex-Chat)
[18:02:55] *** Joins: cmbengue (~Thunderbi@207.191.249.160)
[18:03:07] *** Joins: wib_jonas (~wib_jonas@business-37-191-60-209.business.broadband.hu)
[18:03:27] *** Joins: smallvil_ (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[18:04:17] *** Quits: leduyquang753 (~leduyquan@user/leduyquang753) (Quit: Gotta go, see you guys later.)
[18:05:49] *** Quits: Inst (~delicacie@c-98-208-218-119.hsd1.fl.comcast.net) (Ping timeout: 240 seconds)
[18:06:49] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Ping timeout: 256 seconds)
[18:08:40] *** Quits: smallvil_ (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Ping timeout: 256 seconds)
[18:15:02] *** Joins: neure (~TimoSuora@dzpby7tkyyyyyyyyyyyyt-3.rev.dnainternet.fi)
[18:16:41] *** Quits: xiongxin (~Thunderbi@113.116.34.15) (Remote host closed the connection)
[18:17:00] *** Joins: xiongxin (~Thunderbi@113.116.35.64)
[18:17:54] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:2cdf:da3e:72d8:7f8f) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[18:19:48] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[18:20:18] *** Quits: Schrostfutz_ (~Schrostfu@schettlerdck.tkn.tu-berlin.de) (Read error: Connection reset by peer)
[18:20:44] *** Joins: Schrostfutz_ (~Schrostfu@schettlerdck.tkn.tu-berlin.de)
[18:22:45] *** Joins: sa02irc (~mbax@155-079-043-212.ip-addr.inexio.net)
[18:26:42] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 276 seconds)
[18:26:44] *** Quits: cmbengue (~Thunderbi@207.191.249.160) (Quit: Thanks, see you later.)
[18:26:50] *** Joins: RabidToaster (~Thunderbi@bras-base-otwaon234vw-grc-15-50-100-215-56.dsl.bell.ca)
[18:27:19] *** Quits: bitmask (~bitmask@c-73-215-237-27.hsd1.nj.comcast.net) (Read error: Connection reset by peer)
[18:31:42] *** Quits: hiovoltage (~hiovoltag@78.186.68.182) (Quit: Client closed)
[18:34:55] *** Joins: xkuru (~xkuru@user/xkuru)
[18:35:27] *** Joins: xiongxin1 (~Thunderbi@113.116.35.64)
[18:35:40] *** Joins: jkaye (~jkaye@2601:281:8300:7530:d171:6c14:e395:f91b)
[18:36:17] *** Quits: xiongxin (~Thunderbi@113.116.35.64) (Ping timeout: 256 seconds)
[18:36:17] *** xiongxin1 is now known as xiongxin
[18:38:34] *** Quits: Zweimer (~Zweimer@2a02:908:d20:26e0:d9b1:490d:9d0f:b3ea) (Ping timeout: 256 seconds)
[18:43:27] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[18:43:53] *** Quits: bebyx (~Thunderbi@user/bebyx) (Ping timeout: 252 seconds)
[18:50:02] *** Joins: CodeMouse92 (~CodeMouse@user/codemouse92)
[18:52:06] *** Joins: bebyx (~Thunderbi@user/bebyx)
[18:55:22] *** Quits: lh_cat (~lh_mouse@mingw-w64/developer/lhmouse) (Read error: Connection reset by peer)
[18:57:40] *** Joins: skapata (~Skapata@2804:14c:87b0:a6f9:35a5:a9fd:9975:e15)
[18:57:40] *** Quits: skapata (~Skapata@2804:14c:87b0:a6f9:35a5:a9fd:9975:e15) (Changing host)
[18:57:40] *** Joins: skapata (~Skapata@user/skapata)
[18:58:48] *** Joins: emanuele6 (~emanuele6@user/emanuele6)
[18:58:57] *** Quits: xiongxin (~Thunderbi@113.116.35.64) (Ping timeout: 256 seconds)
[19:00:23] *** Joins: xiongxin (~Thunderbi@119.123.103.1)
[19:03:13] *** Joins: RangerBobVA (~bmaddox@user/rangerbobva)
[19:03:55] *** Quits: ElectronApps (~ElectronA@user/electronapps) (Remote host closed the connection)
[19:13:23] *** Quits: xiongxin (~Thunderbi@119.123.103.1) (Remote host closed the connection)
[19:19:15] *** Joins: Dima[m] (~reddima10@2001:470:69fc:105::366)
[19:19:38] *** Joins: bitmask (~bitmask@c-73-215-237-27.hsd1.nj.comcast.net)
[19:20:35] *** Quits: Schrostfutz_ (~Schrostfu@schettlerdck.tkn.tu-berlin.de) (Read error: Connection reset by peer)
[19:21:14] *** Joins: Schrostfutz_ (~Schrostfu@schettlerdck.tkn.tu-berlin.de)
[19:21:19] *** don is now known as techsurvivor
[19:23:41] *** Joins: great_taste (~great_tas@user/great-taste/x-5798414)
[19:27:09] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 276 seconds)
[19:28:37] *** Quits: Fairy (~Fairy@2001:464a:4992:0:55d4:c070:9ca0:8896) (Ping timeout: 240 seconds)
[19:31:28] *** Quits: techsurvivor (~don@89.45.90.193) (Quit: WeeChat 3.3)
[19:33:26] *** Joins: techsurvivor (~don@89.45.90.193)
[19:43:55] *** Joins: ckdCreations (~ckdCreati@147.55.133.137)
[19:47:03] *** Joins: icedtea (~paul@141.217.247.7)
[19:49:25] *** Quits: peacefulman (~paul@107-190-110-80.cpe.teksavvy.com) (Ping timeout: 240 seconds)
[19:50:25] *** Joins: Tokamak (~Tokamak@172.58.188.35)
[19:53:50] *** Joins: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net)
[19:58:12] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[20:00:42] *** Joins: svm_invictvs (~svm_invic@user/svm-invictvs/x-6696469)
[20:03:07] *** Joins: Inst (~delicacie@c-98-208-218-119.hsd1.fl.comcast.net)
[20:03:33] *** Quits: unknow (~i.am@user/marlboro) (Ping timeout: 256 seconds)
[20:04:12] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 276 seconds)
[20:05:43] *** Quits: RangerBobVA (~bmaddox@user/rangerbobva) (Quit: Leaving)
[20:07:45] *** Joins: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net)
[20:14:01] *** Joins: Guest8100 (~tinloaf@virt-no01.mrvm.net)
[20:14:04] *** Joins: Figworm (~inoor@user/figworm)
[20:16:54] *** Joins: cmbengue (~Thunderbi@207.191.249.160)
[20:18:30] *** Quits: treble (~treble@user/treble) (Quit: WeeChat 3.4)
[20:18:33] *** Quits: cmbengue (~Thunderbi@207.191.249.160) (Client Quit)
[20:20:50] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[20:21:03] *** Quits: Schrostfutz_ (~Schrostfu@schettlerdck.tkn.tu-berlin.de) (Read error: Connection reset by peer)
[20:21:14] *** Joins: magla (~gelignite@55d483f5.access.ecotel.net)
[20:21:44] *** Joins: Schrostfutz_ (~Schrostfu@schettlerdck.tkn.tu-berlin.de)
[20:21:54] *** Joins: noise (~jkinross@h208-73-89-178.mdsnwi.tisp.static.tds.net)
[20:33:05] *** Joins: AbleBacon (~AbleBacon@user/AbleBacon)
[20:34:26] *** Joins: bauripalash (~bauripala@2401:4900:3825:7ad2:1:2:4472:87fa)
[20:35:19] *** Quits: bauripalash (~bauripala@2401:4900:3825:7ad2:1:2:4472:87fa) (Client Quit)
[20:37:31] *** Joins: kit_ten (~u0_a391@64.85.173.130)
[20:40:05] *** Joins: AmR (~AmREiSa@41.238.31.212)
[20:41:01] *** Quits: kit-ten (~u0_a391@2600:380:a435:d1e6:8fe6:1d70:7462:c689) (Ping timeout: 240 seconds)
[20:41:13] *** Joins: nicholaus04 (~nicholaus@2607:fb90:e589:e2b9:d5ee:56de:0:7ca)
[20:41:59] *** Joins: treble (~treble@75.76.29.142)
[20:41:59] *** Quits: treble (~treble@75.76.29.142) (Changing host)
[20:41:59] *** Joins: treble (~treble@user/treble)
[20:42:27] *** Quits: Forsaken87 (~quassel@2a02:908:1866:e360:88b0:2032:220f:3f73) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[20:42:32] *** Joins: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com)
[20:47:16] *** Quits: noise (~jkinross@h208-73-89-178.mdsnwi.tisp.static.tds.net) (Quit: Konversation terminated!)
[20:52:43] *** Joins: unknow (~i.am@user/marlboro)
[20:52:54] *** unknow is now known as jhms
[20:59:57] *** Quits: kit_ten (~u0_a391@64.85.173.130) (Read error: Connection reset by peer)
[21:00:15] *** Joins: kit_ten (~u0_a391@64.85.173.130)
[21:02:03] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Quit: varioust)
[21:04:11] *** Quits: lxsameer (~lxsameer@user/lxsameer) (Ping timeout: 256 seconds)
[21:04:35] *** Quits: mackal (~mackal@pool-96-237-249-63.bstnma.fios.verizon.net) (Quit: BE VIGILANT.)
[21:05:33] *** Joins: husixu (~husixu@137.132.119.2)
[21:07:23] *** Quits: Tokamak (~Tokamak@172.58.188.35) (Ping timeout: 268 seconds)
[21:07:25] *** Quits: treble (~treble@user/treble) (Ping timeout: 240 seconds)
[21:07:34] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[21:09:13] *** Joins: Tokamak (~Tokamak@172.58.188.35)
[21:10:08] *** Joins: mackal (~mackal@pool-96-237-249-63.bstnma.fios.verizon.net)
[21:10:17] *** Joins: kaph (~kaph@net-2-38-107-19.cust.vodafonedsl.it)
[21:13:49] *** Quits: stonkey (~stonkey@user/stonkey) (Ping timeout: 256 seconds)
[21:15:09] *** Joins: RangerBobVA (~bmaddox@user/rangerbobva)
[21:17:12] *** Joins: Tokamak_ (~Tokamak@172.58.188.35)
[21:18:34] *** Quits: Tokamak (~Tokamak@172.58.188.35) (Read error: Connection reset by peer)
[21:19:30] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[21:21:49] *** Quits: Schrostfutz_ (~Schrostfu@schettlerdck.tkn.tu-berlin.de) (Read error: Connection reset by peer)
[21:22:16] *** Joins: Schrostfutz_ (~Schrostfu@schettlerdck.tkn.tu-berlin.de)
[21:22:45] *** Quits: xcm_ (~xcm@user/xcm) (Remote host closed the connection)
[21:23:42] *** Joins: xcm_ (~xcm@user/xcm)
[21:26:29] *** Joins: Fairy (~Fairy@2001:464a:4992:0:55d4:c070:9ca0:8896)
[21:29:42] *** Quits: wib_jonas (~wib_jonas@business-37-191-60-209.business.broadband.hu) (Ping timeout: 256 seconds)
[21:31:14] *** Joins: Forsaken87 (~quassel@2a02:908:1866:e360:88b0:2032:220f:3f73)
[21:35:56] *** Quits: Tokamak_ (~Tokamak@172.58.188.35) (Read error: Connection reset by peer)
[21:36:45] *** Joins: Tokamak (~Tokamak@172.58.188.35)
[21:36:56] *** Parts: Dima[m] (~reddima10@2001:470:69fc:105::366) ()
[21:37:16] *** Quits: Forsaken87 (~quassel@2a02:908:1866:e360:88b0:2032:220f:3f73) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[21:38:54] *** Quits: the_lanetly_052 (~the_lanet@194.135.153.29) (Ping timeout: 256 seconds)
[21:39:15] *** Joins: Forsaken87 (~quassel@2a02:908:1866:e360:88b0:2032:220f:3f73)
[21:39:33] *** Quits: Forsaken87 (~quassel@2a02:908:1866:e360:88b0:2032:220f:3f73) (Client Quit)
[21:39:43] *** Joins: nejni-marji (~nejni-mar@user/nejni-marji)
[21:40:47] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[21:40:56] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[21:40:56] *** ChanServ sets mode: +v npaperbot
[21:41:17] *** Quits: sebbu (~sebbu@user/sebbu) (Ping timeout: 240 seconds)
[21:44:14] *** Joins: seninha (~seninha@user/seninha)
[21:46:40] *** Joins: King_DuckZ (~quassel@2a00:66c0:1:1::51)
[21:47:27] *** Joins: Forsaken87 (~quassel@2a02:908:1866:e360:88b0:2032:220f:3f73)
[21:47:33] <King_DuckZ> hi, I'm writing a class that, simplified to the bone, is more or less like this https://godbolt.org/z/sadjr5hnW and I want to implement the cast() method
[21:48:20] <King_DuckZ> do you think it's even possible? by adding whatever it takes to TypeInfoBase or anywhere else, or by changing the code in any other way?
[21:48:49] *** Quits: Forsaken87 (~quassel@2a02:908:1866:e360:88b0:2032:220f:3f73) (Client Quit)
[21:48:50] <Alipha> King_DuckZ: is there a reason you're not using std::any?
[21:48:50] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Quit: Ex-Chat)
[21:49:08] *** Joins: blackout69 (~blackout6@net-109-117-245-237.cust.vodafonedsl.it)
[21:49:40] *** Quits: namo (~nomo@95.87.208.95) (Ping timeout: 256 seconds)
[21:50:04] <Alipha> oh, hm. i said that before i looked too closely
[21:50:21] <King_DuckZ> well the real class is different, it's more like an array of run time structures
[21:50:34] <King_DuckZ> any doesn't do that
[21:51:23] <Alipha> King_DuckZ: you'd have to specify at compile time what possible types each type can convert to
[21:52:06] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 276 seconds)
[21:52:14] *** Joins: nejni-marji2 (~nejni-mar@user/nejni-marji)
[21:52:36] *** Quits: nejni-marji (~nejni-mar@user/nejni-marji) (Quit: nejni-marji)
[21:52:39] *** nejni-marji2 is now known as nejni-marji
[21:52:53] <King_DuckZ> ideally I'd have a static_cast somewhere at some point, so the build will fails if the cast is invalid
[21:53:51] *** Quits: MajorBiscuit (~MajorBisc@c-001-032-008.client.tudelft.eduvpn.nl) (Quit: WeeChat 3.3)
[21:54:04] *** Quits: RangerBobVA (~bmaddox@user/rangerbobva) (Quit: Leaving)
[21:54:06] <King_DuckZ> problem is all type info is lost in AnyType because of type erasure, and I can't add a virtual T casted() = 0; to TypeInfoBase because virtual+T = no can do
[21:54:10] <Alipha> King_DuckZ: are you doing this only for primitives? i see the std::copy, so this isn't going to work with any non-trivial types
[21:54:27] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[21:54:37] <King_DuckZ> Alipha: yes, real code has static_asserts to ensure only pods are used
[21:55:19] <Alipha> King_DuckZ: so by pod, you mean, any pod struct, and not just the primitive types (int, double, etc)
[21:55:50] <King_DuckZ> yes, anything that is trivially constructible and memcopyable, real code also uses std::copy
[21:55:56] *** Joins: rgrinberg (~textual@2806:265:5401:8cd:18b:fa2e:c948:1d68)
[21:56:20] <King_DuckZ> plus stores alignment, padding etc, but I simplified here and just stored the size
[21:58:43] *** Quits: nejni-marji (~nejni-mar@user/nejni-marji) (Quit: Client closed)
[21:59:15] <CarloWood> King_DuckZ: maybe like this? https://godbolt.org/z/33v6cvezn
[21:59:16] <CarloWood> ?
[22:00:25] *** Quits: Tokamak (~Tokamak@172.58.188.35) (Ping timeout: 268 seconds)
[22:01:21] <King_DuckZ> CarloWood: hmm nope, return code of the program is 154, I'd expect 1
[22:02:28] <CarloWood> Oh - you want to get an int that is assign to from a float?
[22:02:34] <CarloWood> assigned*
[22:02:51] <King_DuckZ> my best try involves a functor that gets passed down into a virtual function on TypeInfoBase, but it feels like there's this boundary between it not being able to accept a type T, and AnyType having no info on the source type, and I just can't bridge that gap
[22:03:20] <King_DuckZ> CarloWood: yes, not just a byte copy :) type safe assignment
[22:03:35] <CarloWood> I don't see the reason for a cast then. You just want back what you stored in it (the float) and then assign that to some other type.
[22:03:58] *** Joins: math9292 (~wellmathe@85.251.70.233.dyn.user.ono.com)
[22:04:34] <CarloWood> But I assume you can't do:
[22:04:37] <CarloWood> return any.cast<float>();
[22:04:39] *** Joins: Tokamak (~Tokamak@172.58.188.35)
[22:05:06] <King_DuckZ> that's what I *would like* to do :) or anything equivalent
[22:05:55] <King_DuckZ> well any.cast<int>(), but any.cast<float>() should also work
[22:06:11] <King_DuckZ> as well as any.cast<double>() and anything else that is a valid conversion
[22:06:38] <CarloWood> I used <float> because that is what you originally stored in any.
[22:08:00] *** Joins: Forsaken87 (~quassel@2a02:908:1866:e360:88b0:2032:220f:3f73)
[22:08:14] *** Joins: mathe9292 (~wellmathe@85.251.70.233.dyn.user.ono.com)
[22:08:19] <CarloWood> I think you have to store a pointer to the base class of an object that you new-ed, which has a virtual table a way to assign the value back to whatever you want it to be now.
[22:08:31] *** Quits: math9292 (~wellmathe@85.251.70.233.dyn.user.ono.com) (Client Quit)
[22:09:13] <CarloWood> Hmm
[22:09:33] <King_DuckZ> the point is to relieve the user from doing if any.is_type<float>() { ... } else if any.is_type<int>() { ... } when all they want is a fixed type regardless of conversions
[22:11:20] <kalven> Have you considered using a variant?
[22:11:36] *** Joins: Guest53 (~Guest53@89.254.133.167)
[22:13:38] *** Quits: neure (~TimoSuora@dzpby7tkyyyyyyyyyyyyt-3.rev.dnainternet.fi) (Quit: Leaving)
[22:13:48] <furrymcgee> there is no such thing as any cast in cpp
[22:14:26] <kalven> except for any_cast, of course
[22:16:48] *** Parts: mathe9292 (~wellmathe@85.251.70.233.dyn.user.ono.com) (Leaving)
[22:18:37] *** Quits: Schrostfutz_ (~Schrostfu@schettlerdck.tkn.tu-berlin.de) (Ping timeout: 240 seconds)
[22:19:51] <Alipha> King_DuckZ: https://godbolt.org/z/a4bT4GaP4
[22:20:03] *** Joins: math7878 (~wellmathe@85.251.70.233.dyn.user.ono.com)
[22:20:30] <Alipha> and yes, if std::variant would work, i'd use that
[22:21:32] *** Quits: Forsaken87 (~quassel@2a02:908:1866:e360:88b0:2032:220f:3f73) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[22:21:58] *** Quits: Tokamak (~Tokamak@172.58.188.35) (Ping timeout: 256 seconds)
[22:22:05] <furrymcgee> use appropriate data, copy that data to ofstream and throw this file into a compiler that does static_assert
[22:22:55] *** Joins: Tokamak (~Tokamak@172.58.188.35)
[22:23:21] *** Joins: Forsaken87 (~quassel@2a02:908:1866:e360:88b0:2032:220f:3f73)
[22:24:00] *** Joins: mathe8787 (~wellmathe@85.251.70.233.dyn.user.ono.com)
[22:24:11] *** Quits: math7878 (~wellmathe@85.251.70.233.dyn.user.ono.com) (Client Quit)
[22:25:25] *** Quits: Tokamak (~Tokamak@172.58.188.35) (Read error: Connection reset by peer)
[22:26:10] *** Joins: Tokamak (~Tokamak@172.58.188.35)
[22:27:13] *** Joins: vicfred (~vicfred@user/vicfred)
[22:29:51] <mathe8787> "
[22:29:51] <mathe8787> Here the signal 'example' has 4 bits for decimal part and 4 bits for fractional part.
[22:29:51] <mathe8787> example = 9.75 = "1001.1100" or simply example ="10011100"."
[22:30:00] <mathe8787> how can 75 be 1100?
[22:30:14] *** Joins: lunix00 (~lunix00@2804:14c:6321:900d:ecd5:589a:62ad:6273)
[22:30:27] <anyone> 0+1/2 + 0+1/4 + 0*1/8 + 0*1/16
[22:30:47] <anyone> eh, 1x1x0x0, with increasing powers of 2^-n
[22:30:50] *** Joins: Betal (~Betal@user/betal)
[22:31:03] <CarloWood> .75 = 3/4 = 1/2 + 1/4
[22:31:20] <mathe8787> ahhhh thanks anyone and CarloWood
[22:32:04] <anyone> a 4i4f format is kinda.. weird
[22:32:40] <mathe8787> doesnt the places to the right need to be bigger than the places to the left? i.e. 1234.23 or something anyone
[22:32:52] <mathe8787> to the left**
[22:32:59] <CarloWood> Not really - they just inserted a -heh- binary point.
[22:32:59] <mathe8787> i.e. before the decimal point
[22:33:30] <CarloWood> I keep forgetting how to input binary - that is possible these days no?
[22:33:44] <CarloWood> << 0b10011100
[22:33:44] <geordi> 156
[22:33:45] <anyone> 0b like everyone else
[22:33:47] <CarloWood> yeah
[22:33:58] <anyone> but we've had 0x for ages, and 0b is just fancy 0x
[22:34:10] <mathe8787> there is this python package that gives in an error if the bit words is greater than the fraction part: https://numfi.readthedocs.io/en/latest/class/ and https://numfi.readthedocs.io/en/latest/
[22:34:32] <anyone> mathe8787: are you saying that 10011100 isn't supposed to be 9.75?
[22:34:39] <CarloWood> { uint32_t input = 0b10011100;  cout << (input / 16.f); }
[22:34:40] <geordi> 9.75
[22:34:50] <mathe8787> so this "left places needs to be bigger than right places" isn't correct?
[22:34:56] <anyone> mathe8787: you tell us, it's your bits
[22:35:28] <CarloWood> Or even,
[22:35:55] <CarloWood> << 0b10011100 * 0.0625
[22:35:56] <geordi> 9.75
[22:36:05] <anyone> that's just /16.f with extra steps
[22:37:14] <mathe8787> https://imgur.com/a/VGeisya
[22:37:49] <anyone> what am I to do with that
[22:38:03] <mathe8787> i keep getting that the bits of words needs to be larger....is this something thats universal? im trying to learn how to properly make floating points into fixed points and then to binary
[22:38:27] <mathe8787> anyone, haha am trying to understand if you need to always have the # of bits large than to the left of the decimal point
[22:38:34] <mathe8787> or equal
[22:38:40] <anyone> you can do whatever you want
[22:38:54] *** Joins: Schrostfutz (~Schrostfu@55d4263e.access.ecotel.net)
[22:39:21] <anyone> like ieee754, which is a 1.11.53 format
[22:39:40] *** Quits: rendar (~rendar@user/rendar) (Quit: Leaving)
[22:40:04] *** Joins: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net)
[22:40:26] <mathe8787> ok good to know thank you
[22:48:35] <Alipha> mathe8787: I think "bits of word" is the number of bits of the whole floating point value (eg, 32 for float and 64 for double). Then "bits of fraction" is the size of the mantissa, and "w - f - s" would be the number of bits of the exponent.
[22:50:30] <mathe8787> Alipha, ahhhh you are correct. Thank you!! Would it be okay in general to use an arbitrary number of bits, say 23 for a fixed point?
[22:50:51] *** Joins: stonkey (~stonkey@user/stonkey)
[22:51:17] *** Quits: supernova (~quassel@2405:9800:ba11:6207:d922:7fa5:432:de05) (Ping timeout: 240 seconds)
[22:52:38] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Quit: Ex-Chat)
[22:52:50] <CarloWood> We need a float with a variable mantissa: if the exponent gets too big, it makes no sense anymore to be very accurate imho :P.
[22:53:33] *** Quits: RabidToaster (~Thunderbi@bras-base-otwaon234vw-grc-15-50-100-215-56.dsl.bell.ca) (Ping timeout: 256 seconds)
[22:53:36] *** Joins: Budd (~Budd@2001:470:8d44:1::5)
[22:53:39] <Alipha> mathe8787: if you're doing "fixed point", wouldn't you just use the whole word? Because you don't have an exponent? Or am I misunderstanding what you mean by "fixed point"?
[22:53:43] <CarloWood> Ie - who care if you have 1e67 or 1.1e67 ... it's both "infinite".
[22:53:49] <CarloWood> cares*
[22:54:18] <kalven> CarloWood: the "accuracy" decreases the bigger the number gets.
[22:55:08] <mathe8787> Alipha, why would i need to worry about mantissa or exponent when i am going from floating point to binary? I think that is a better question.
[22:55:27] <CarloWood> kalven: it does? I though the number of bits in the mantissa stayed the same?
[22:55:37] <Alipha> CarloWood: problem is, then storing how big the mantissa is would then take away from the space you're trying to save
[22:56:24] <kalven> CarloWood: yes, but the smallest step between two floats increase the larger the number gets
[22:56:50] <kalven> a quarter of all float values go to the range [0,1]
[22:57:00] <kalven> it sounds like you just want to bias it even more?
[22:57:51] <kalven> and fwiw, e67 is already out of range for float (but not double)
[22:58:03] <ville> CarloWood: it does. but the range those 23 bits covers doubles every power of 2
[22:58:03] <Budd> I'm experimenting with C++ on the rp2040 microcontroller (no OS, no threads, gcc 11.1.0). Can coroutines work without OS threading?
[22:58:16] <ville> CarloWood: https://fabiensanglard.net/floating_point_visually_explained/
[22:58:16] <Alipha> mathe8787: aren't you converting between fixed point and floating point?
[22:58:48] * CarloWood is glad that at least Alipha said something intelligent :/.  
[22:59:04] <kalven> oh no.. the jab, right to the heart
[22:59:19] <mathe8787> Alipha, well i have a real number and I want to convert it to an integer.
[22:59:20] <Budd> Specifically, I have device-driver functions that use a big switch() statement and get called repeatedly. I think coroutines would be more readable.
[22:59:26] *** Quits: Flonk (~Flonk@vps-zap441517-1.zap-srv.com) (Quit: The Lounge - https://thelounge.chat)
[23:00:06] <kalven> Budd: coroutines do not depend on threading
[23:00:30] <Budd> Great! Worth experimenting with, then.
[23:00:42] <ville> Budd: yeah really jam those dynamic allocations in there. that'll make it really clear what's happening
[23:01:30] <mathe8787> Alipha, and then the integer will be made into a signed binary
[23:01:54] <Alipha> CarloWood: I suppose you could sacrifice one bit for "large or small" exponent or something
[23:02:01] <ville> Budd: so far i've not been able to write a coroutine for which the compiler was able to elide the allocation. your mileage may vary
[23:02:19] *** Joins: Flonk (~Flonk@vps-zap441517-1.zap-srv.com)
[23:02:31] *** Joins: AmR| (~AmREiSa@156.207.253.69)
[23:02:37] *** Quits: AmR (~AmREiSa@41.238.31.212) (Ping timeout: 256 seconds)
[23:04:24] <Alipha> mathe8787: uint32_t dest; float src = 3.14; std::memcpy(&dest, &src, sizeof(dest)); // ? (waits for the objections from the channel)
[23:04:48] <Budd> ville: So a coroutine's stack is typically allocated on the heap, but possibly on the main stack if the compiler can be sure it's fixed-size?
[23:05:37] <CarloWood> Alipha: I was thinking something like, every time the exponent needs one more bit to store itself, that would be taken from the mantissa. Ideally, using 29 or 30 bits for the mantissa for floats between 0.5 and 1.0, but you can't know where the separation is except when you use (indeed) -say- 4 bits extra for just that.  Not worth it for a 32bit float.  I with a double however...
[23:05:38] <Budd> I do have heap available, though I try not to use it.
[23:05:40] <ville> Budd: yes it's dynamically allocated. couldn't even get a "noop" coroutine to elide the allocation
[23:05:48] <King_DuckZ> Alipha: I was on the phone, sorry! I'm reading your solution, it looks very interesting so far! thanks for taking the time to look into it!
[23:06:11] <ville> either the compilers don't implement any of that yet, or i just suck at it
[23:07:58] *** Joins: kit-ten (~u0_a391@2600:380:a435:d1e6:f902:eb98:9c0d:5b2e)
[23:08:17] <kalven> CarloWood: precision is already biased towards smaller numbers. it sounds like you just want to bias it *more*
[23:08:50] <Budd> ville: I don't need it to be pretty, just prettier than my mega-switch statement to enumerate 1-wire devices. The processor has a massive RAM bank of 240 kB, so I have some headroom.
[23:08:51] <kalven> (this is the whole point of floating vs fixed)
[23:10:33] *** Quits: dsrt^ (~dsrt@wsip-98-188-246-242.mc.at.cox.net) (Ping timeout: 256 seconds)
[23:11:38] *** Joins: dsrt^ (~dsrt@wsip-98-188-246-242.mc.at.cox.net)
[23:12:12] <CarloWood> kalven: well, when a float gets ridiculously small we don't need accuracy either - ie, the same number of mantissa bits for stuff around 1e30 as for stuff around 1e-30  (plus or minus an exponent shift).
[23:12:15] *** Quits: kit_ten (~u0_a391@64.85.173.130) (Ping timeout: 256 seconds)
[23:12:53] *** Joins: AliceMeows (~AliceMeow@user/alicemeows)
[23:12:58] <kalven> because?
[23:13:19] <CarloWood> To get more accuracy where it matters.
[23:13:41] <kalven> and where is that range?
[23:13:59] <King_DuckZ> Alipha: it looks like really good code mate! I love it
[23:16:54] <CarloWood> kalven: just saying - I am sure there are plenty of arguments against it.  But it seems that putting that range around numbers that are comprehensible to humans is something coders can work with. If you'd write a program that insists on doing astrological calculations, working with millions of light years - then you shouldn't store that in units of 1 meter of course; because then you'd be throwing away accuracy for nothing with
[23:16:54] <CarloWood> this proposal.
[23:17:27] <Alipha> kalven (and i) think that required accuracy is not a property of the number, but a property of the application. i'm sure scientists working on the nano level (or planetary level) want a lot of accuracy
[23:17:44] *** Quits: Tokamak (~Tokamak@172.58.188.35) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[23:18:00] <CarloWood> But if in general double's would be more accuracte around 1 (on a logarithmic scale; so to closer abs(log(n)) is to 1 to more accurate, then you could write programs that are just more accurate, using the same number of bits
[23:19:17] *** Quits: husixu (~husixu@137.132.119.2) (Remote host closed the connection)
[23:19:56] <CarloWood> Alipha: that's what I just said I think. You'd indeed have to take the range of accuracy into account and design your programs so they actually work with values that are still "understandable".
[23:20:01] <anyone> planetary level? rather demands range.
[23:20:25] <kalven> so you just want it biased around instead of 0?
[23:20:29] <Alipha> i meant to say astrological, but i couldn't think of the word :-)
[23:20:34] <kalven> around *1* instead of 0, that is
[23:20:48] <CarloWood> yes - it is logarithmic.
[23:21:10] <kalven> Alipha: astronomical, hopefully
[23:21:16] <kalven> unless you're into crystals and shit
[23:21:18] * enyc meows
[23:21:19] * enyc meeps
[23:21:24] * enyc purrs
[23:21:24] <Alipha> kalven: lol, yeah
[23:21:29] <enyc> wrong channel ;p
[23:21:30] <CarloWood> argh - astronomical :(
[23:21:32] <Alipha> !give enyc fun
[23:21:33] <nolyc> enyc: #C++ is a topical channel. There is No Fun Allowed in #C++.
[23:21:57] <enyc> C++ extension exercese I must deal with, hrrm ;p
[23:23:28] *** Joins: dextercd (~dexter@2a02-a450-f25d-1-76d4-35ff-fefe-34c.fixed6.kpn.net)
[23:24:44] *** Quits: Guest53 (~Guest53@89.254.133.167) (Ping timeout: 256 seconds)
[23:27:00] <AliceMeows> There doesn't happen to be a way to alias function calls without hacks, is there?
[23:28:08] <PJBoy> what does it mean to alias a function call?
[23:28:46] <anyone> what kind of problems requires that you need an alias anyway, just type the right name to begin with
[23:29:01] *** Quits: Fairy (~Fairy@2001:464a:4992:0:55d4:c070:9ca0:8896) (Ping timeout: 240 seconds)
[23:29:05] <AliceMeows> Its mostly readability
[23:29:17] <Alipha> AliceMeows: do you have an example?
[23:29:26] <PJBoy> like `auto func = otherFunc;`?
[23:29:49] <Alipha> { bar("hello"); } void print(const char *message) { std::cout << message << std::endl; } auto bar = print;
[23:29:49] *** Quits: ville (~ville@user/ville) (Read error: Connection reset by peer)
[23:29:49] <geordi> hello
[23:29:50] <AliceMeows> I don't want to alias the function itself by the expression itself
[23:30:01] <PJBoy> or `auto func = [](auto&&... args) { return otherFunc(forward<decltype(args)>(args)...); };`?
[23:30:12] *** Joins: ville (~ville@user/ville)
[23:30:39] <CarloWood> I guess you'd need 1 bit for the sign, 1 bit for the sign of the exponent - and then use E bits for the exponent and M bits for the mantissa, so that E+M = 62.  A number around 1 would have an exponent of 0 bits (E == 0) but you'll need 3 bits to store the size of the exponent; Lets say S is the this size (in the range [0, 7]) thus.  Then a double would have a mantissa of M bits with M = 64 - 1 - 1 - 3 - S, hence running from 59
[23:30:39] <CarloWood> bits to 52 bits.
[23:30:55] <PJBoy> so a lambda or bind expression?
[23:31:07] <AliceMeows> bind is runtime and I want it at compile time
[23:31:24] <PJBoy> my vote is lambda then
[23:31:36] <AliceMeows> lambda didn't solve it either sadly because I can't force inline it
[23:31:49] <PJBoy> can't force inline what?
[23:31:53] <AliceMeows> A lambda
[23:32:00] <PJBoy> inline in what sense?
[23:32:23] <Alipha> trust your compiler to optimize :-P
[23:32:30] <PJBoy> like `inline static auto func = [] { ... };`?
[23:32:58] <jkaye> You can't really force inline anything unless you define it in a header, even the inline keyword is just a suggestion to the compiler
[23:33:07] <AliceMeows> Yeah sadly so
[23:33:25] <PJBoy> or like you want lambda's operator() to be [[gnu::forceinline]]?
[23:33:34] <PJBoy> could craft your own class I guess
[23:34:00] <AliceMeows> I use msvc
[23:34:10] <PJBoy> could perhaps derive from the lambda and use [[msvc::forceinline]] on that operator()
[23:34:10] <Alipha> template<typename... Ts> [[gnu::forceinline]] auto func(Ts&&... args) { return otherFunc(forward<decltype(args)>(args)...); }
[23:34:49] <CarloWood> A current double stores 52 bits for the mantissa - but ok, its range would be larger too (11 bits for the exponent, or 10 without sign instead of 7). If it feels important to be able to store exponents of 10 bits accuracy - you could use 4 bits of S - then the mantissa would run from 58 bits to 43 bits (for the *ridiculous* large number like 1.23456..43bits accuracy.. E32768).
[23:35:10] <CarloWood> So a much much larger range - and 64 times more accurate around 1.
[23:35:11] *** Quits: lunix00 (~lunix00@2804:14c:6321:900d:ecd5:589a:62ad:6273) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[23:35:32] <AliceMeows> Alipha: that is an interesting solution
[23:36:07] <PJBoy> add a constexpr to that declaration for fun
[23:36:23] <CarloWood>  [[gnu::forceinline]] *still* needs the inline keyword as well
[23:36:43] <CarloWood> so: template<typename... Ts> [[gnu::forceinline]] inline auto func(Ts&&... args) { return otherFunc(forward<decltype(args)>(args)...); }
[23:36:52] <PJBoy> this is msvc anyway
[23:37:00] <PJBoy> so hopefully it doesn't apply
[23:37:05] *** Quits: jhms (~i.am@user/marlboro) (Quit: I come down here for a fat woman and that's what I'm havin.)
[23:38:04] <AliceMeows> It would've been a lot easier if C++ had a mechanism to alias expressions which could also be another step toward elimination of macros
[23:38:35] <PJBoy> it has `auto&& alias = expr;`
[23:39:00] <AliceMeows> That's new to me
[23:39:09] <kit-ten> is there any way to tell what functions are defined at compiletime based on what things are linked? or some other way to make a program "modular" so that you can add "modules" to it without modifying the program in question?
[23:39:16] <PJBoy> it's just an rvalue reference
[23:39:23] *** Joins: Tokamak (~Tokamak@172.58.188.35)
[23:39:34] *** Joins: sebbu (~sebbu@user/sebbu)
[23:39:41] <AliceMeows> That is not exactly what I had in mind
[23:40:18] <CarloWood> kit-ten: don't you mean at runtime then?
[23:40:55] <kit-ten> no?
[23:40:58] <PJBoy> it has lambdas and functions for partial expressions
[23:41:09] <PJBoy> I feel like C++ has the idea of expression alias covered
[23:41:27] <PJBoy> constexpr variable tempaltes
[23:41:34] <kit-ten> i mean by modfying it as in adding a reference to the function somewhere
[23:41:39] <kit-ten> so like
[23:41:48] <AliceMeows> The only way to do it in reliable way that is also portable are macros but they're far from ideal
[23:42:12] <PJBoy> what do you have in mind that's macro only?
[23:42:18] <kit-ten> i mean
[23:42:32] <kit-ten> i have a program
[23:42:43] <PJBoy> only examples I can think of related to creating string literals or requiring reflection
[23:42:48] <kit-ten> that has certain features
[23:43:29] <kit-ten> and you can choose which features you want to compile it with
[23:43:59] <kit-ten> and you can add features by linking against a .o file or something of the like
[23:44:06] <PJBoy> or you need stuff from the compiler invocation yeah
[23:44:24] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Quit: sord937)
[23:44:48] <kit-ten> it is ok if theyre shared objects too
[23:45:30] <kit-ten> because windows compatibly isnt really a important thing to me
[23:47:25] <AliceMeows> https://godbolt.org/z/c4r5dxda7
[23:48:28] <AliceMeows> Something like this but done without macros where it is guaranteed the code will be inlined and portable
[23:48:31] <T`aZ> kit-ten: configure your build system to generate a config.h like file with constexpr features being enabled or not, like constexpr bool with_feature_a = true;
[23:49:07] <PJBoy> that's not guaranteed to be inlined at all
[23:49:17] <PJBoy> the compiler's allowed to factor out expressions into functions
[23:49:24] <AliceMeows> I don't mean func being inlined but the call itself
[23:49:29] <PJBoy> either way
[23:49:37] <AliceMeows> Where if I were to use lambda to call func it may or may not be
[23:50:13] <kit-ten> t`az but then if i want to add a feature i need to add with_feature_xyz for every feature i add
[23:50:37] <PJBoy> that macro is no different than using a lambda for the same thing
[23:50:37] *** Joins: Pook (~Pook@2001:8a0:f996:1400:2d26:18c4:7a5f:9cd6)
[23:50:39] <AliceMeows> kit-ten: what are you trying to do exactly?
[23:51:01] *** Quits: jehelset (~jeh@2001:4644:4144:0:e2d4:e8ff:fedf:f070) (Ping timeout: 240 seconds)
[23:51:07] <PJBoy> except that it will choke on commas in non parentheses brackets
[23:51:14] <kit-ten> im making an irc bot and i want to be able to add new commands without having a huge `else if` chain
[23:51:16] <PJBoy> and evaluate arguments multiple times
[23:52:29] <AliceMeows> PJBoy: https://godbolt.org/z/Kxr84bf57 this illustrates the problem
[23:52:59] <AliceMeows> The lambda itself isn't inlined while the 'call' macro 'is'
[23:53:05] <Alipha> AliceMeows: fixed it for you: https://godbolt.org/z/hsTbr1jKW
[23:53:12] <PJBoy> yeah that's just a lack of optimisation
[23:53:22] *** Quits: Figworm (~inoor@user/figworm) (Quit: Figworm)
[23:53:41] <PJBoy> any high level feature is going to perform worse than a low level feature in lieu of optimisation
[23:53:47] <PJBoy> that's why we have optimisation
[23:54:08] <Alipha> inlining a function is one of the most trivial optimizations that a compiler can do. trust that the compiler will do it.
[23:54:20] <AliceMeows> Eh, I still think it'll be better if we had more control over it when needed
[23:54:42] <Alipha> code in assembly :-P
[23:54:44] <PJBoy> if you can't trust abstractions then yeah
[23:54:47] <PJBoy> C++ isn't for you
[23:55:13] <AliceMeows> Abstraction isn't the problem, its lack of better control
[23:56:34] <PJBoy> I don't understand
[23:56:45] *** Quits: Betal (~Betal@user/betal) (Quit: WeeChat 3.4)
[23:57:00] <T`aZ> kit-ten: are those command given at run time ? , im not sure how else you want to parse those commands then, except replacing the if else by an switch case, but that's really a detail, it's still at run time
[23:57:27] <PJBoy> AFAIK there's no directive that says "don't exact this expression into a function", is that an issue for you too?
[23:57:32] <PJBoy> *extract
[23:57:33] *** Quits: andreasbuhr (~quassel@p549db698.dip0.t-ipconnect.de) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[23:57:39] <PJBoy> and if there was, would you use it?
[23:58:13] <kit-ten> t`az no, the features are chosen at compile time, determining what commands are available
[23:58:15] <T`aZ> kit-ten: or do you just want to avoid writing manually the parsing done at run time ?
[23:58:35] <kit-ten> no i already have parsing done
[23:58:44] <AliceMeows> PJBoy: I'm not sure I understand
[23:58:54] *** Joins: RangerBobVA (~bmaddox@user/rangerbobva)
[23:59:05] <PJBoy> you want the control be being able to specify that a function is inlined right?
[23:59:15] <PJBoy> which is equivalent to being able to control when a function call isn't inlined
[23:59:16] <kit-ten> i want to fix this large else if chain
[23:59:26] *** Quits: rgrinberg (~textual@2806:265:5401:8cd:18b:fa2e:c948:1d68) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[23:59:31] <PJBoy> but then any expression or list of statements could potentially be extracted out into a function
[23:59:48] <T`aZ> kit-ten: so, still at run rime, but you dont want to write manually the if-else chain ?
