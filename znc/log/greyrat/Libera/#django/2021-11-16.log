[00:03:54] *** Quits: sidj (~sidj@user/sidj) (Ping timeout: 260 seconds)
[00:10:26] *** Quits: explore (uid233125@hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[00:17:02] *** Joins: audiobirb (~audio@user/audio)
[00:21:22] *** Quits: django-ticketbot (~django-ti@django/ops/ticketbot) (Remote host closed the connection)
[00:21:38] *** Joins: django-ticketbot (~django-ti@django/ops/ticketbot)
[00:29:04] *** Joins: sidj (~sidj@user/sidj)
[00:33:43] *** Joins: luischi (~luigi@80.30.201.209)
[00:42:08] *** Joins: la_croix_ (~la_croix@cpc117350-walt24-2-0-cust237.13-2.cable.virginm.net)
[00:44:03] <la_croix_> I'm trying to add a custom database type to postgres, along with a custom ModelField. I've defined a custom migration to create the field, and subclassed the db wrapper to extend the data_types dict, to map the ModelField to the db type. Is this the correct approach?
[00:44:16] *** Parts: rapha (~jrs@user/rapha) (WeeChat 2.3)
[00:44:29] *** Quits: derelict (~derelict@user/derelict) (Quit: bye)
[00:44:34] <la_croix_> (It does work, I just want to know if it's good practice)
[00:44:59] *** Joins: derelict (~derelict@user/derelict)
[00:45:25] *** Quits: GinFuyou (~GinFuyou@reya.cloud.tilaa.com) (Ping timeout: 268 seconds)
[00:45:45] *** Joins: GinFuyou (~GinFuyou@reya.cloud.tilaa.com)
[00:46:37] <FunkyBob> la_croix_: does it really require a whole custom DB adapter?
[00:46:50] <FunkyBob> am fairly sure other libs have added new field types without that
[00:47:01] <FunkyBob> [of course, it depends on how deeply it requires integration]
[00:48:43] *** Quits: sidj (~sidj@user/sidj) (Ping timeout: 250 seconds)
[00:49:33] <la_croix_> FunkyBob: well, it's only two lines. The main reason that I'm here (which possibly answers your last comment!) is that I need it to format `where` clauses differently, specifically, instead of "%s". I need "%s::customtype". I managed to cast the lhs by subclassing DatabaseOperations, but I can't cast the rhs
[00:51:29] <FunkyBob> so... which PG type are you trying to add support for?
[00:51:33] <la_croix_> And without subclassing the adapter, I'm not sure how django would understand that my CustomType(Field) should map to the custom_type db field
[00:52:23] <la_croix_> It's a custom composite type, defined as `CREATE TYPE CustomType as (foo int, bar int, baz int)`
[00:52:25] <FunkyBob> the field itself should contain that infomration
[00:52:32] <FunkyBob> AIUI
[00:53:46] <la_croix_> Oh, on the db_type function. That makes sense. I'll give it a go
[00:53:55] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[00:53:55] *** ChanServ sets mode: +v EvilDMP
[00:54:12] <FunkyBob> I'd ask schinckel ... but he wouldn't be online yet, I suspect
[00:54:54] <FunkyBob> iirc he was playing with range types support recently
[00:56:13] <la_croix_> Fair enough, thank you. The db_type already returns the name of the custom type, so I'll see if I can get away without the wrapper subclassing
[01:00:04] *** Joins: sidj (~sidj@user/sidj)
[01:01:47] *** Quits: la_croix_ (~la_croix@cpc117350-walt24-2-0-cust237.13-2.cable.virginm.net) (Remote host closed the connection)
[01:02:14] *** Quits: withered_wolf (~withered_@1437135-v103.1561-static.stchilaa.metronetinc.net) (Ping timeout: 260 seconds)
[01:03:01] <schinckel> You just need to register the composite type so psycogp2 knows how to convert it - and maybe add an adapter so it can convert from the python type to postgres.
[01:03:21] <schinckel> I'm taking my kids to school now - can chat to you about it later.
[01:04:16] <schinckel> I did plan to release my composite field handling stuff - but the sticky bit is around migrations.
[01:05:02] <schinckel> More recently I dealt with this by defining a model that is the composite type and using the fact postgres creates types for every table.
[01:05:53] <schinckel> Oh, they left.
[01:05:56] <schinckel> https://schinckel.net/2014/09/24/using-postgres-composite-types-in-django/
[01:06:51] *** Joins: la_croix_ (~la_croix@cpc117350-walt24-2-0-cust237.13-2.cable.virginm.net)
[01:09:36] <la_croix_> FunkyBob: You were right, of course, specifying the db_type works fine for the custom type. Do you know how to specify the casting for `where` clauses? I overrode field_cast_sql on the DatabaseOperations class, but that added the casting to the LHS, not the RHS.
[01:10:12] <la_croix_> Specifically for this field, I need `where COLUMN = %s` to come out as `where COLUMN = %s::custom_type`
[01:10:28] <schinckel> la_croix_: I posted a bunch of things while you were out.
[01:10:38] <schinckel> https://usercontent.irccloud-cdn.com/file/CnvbWCOd/image.png
[01:10:46] <schinckel> https://schinckel.net/2014/09/24/using-postgres-composite-types-in-django/
[01:10:54] <schinckel> There's an old post about how I did it.
[01:12:23] <la_croix_> schinckel: Great, thank you. I'd appreciate a chat when you have time - I understand the concepts, but not where to register these things with postgres in the context of django connection handling
[01:17:47] *** Quits: dkliban_ (~dkliban@99-3-68-61.lightspeed.rlghnc.sbcglobal.net) (Ping timeout: 264 seconds)
[01:25:05] *** Joins: ssb10 (~ssb10@ool-18bd347f.dyn.optonline.net)
[01:26:59] *** Quits: la_croix_ (~la_croix@cpc117350-walt24-2-0-cust237.13-2.cable.virginm.net) (Remote host closed the connection)
[01:31:43] *** Quits: luischi (~luigi@80.30.201.209) (Quit: WeeChat 3.3)
[01:37:18] *** Quits: Tas-sos (~Tas-sos@ppp046176221197.access.hol.gr) (Quit: Lost terminal)
[01:42:28] *** Quits: ssb10 (~ssb10@ool-18bd347f.dyn.optonline.net) (Quit: Client closed)
[01:44:35] *** Quits: Staunch (~Staunch@c-24-7-237-208.hsd1.mn.comcast.net) (Remote host closed the connection)
[01:50:41] *** Quits: mimmy (~mimmy@72.142.88.18) (Ping timeout: 250 seconds)
[01:57:31] *** Joins: la_croix_ (~la_croix@cpc117350-walt24-2-0-cust237.13-2.cable.virginm.net)
[02:01:25] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[02:07:02] *** Joins: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it)
[02:07:16] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 256 seconds)
[02:08:42] <schinckel> la_croix_: I'm currently registering the composite type using the `connection_created` signal. I hit the database to do this, because you need to get the OID of the type.
[02:09:04] *** Joins: fikran (~fikran@user/fikran)
[02:10:16] <la_croix_> schinckel: Is it possible to skip that and just create the type in a migration (since I've already done that?)
[02:10:29] <la_croix_> (manual migration)
[02:10:35] <schinckel> Yeah, I do that.
[02:11:14] *** Joins: mimmy (~mimmy@72.142.88.18)
[02:11:31] <schinckel> But you still need to register the type.
[02:11:43] <schinckel> If you can get the OID it is possible to do it without hitting the db.
[02:11:52] <schinckel> But the OID can change if you run it on a new db.
[02:13:26] <schinckel> With the extensions I was doing to support multirange types I grabbed the OIDs of the existing types (ie, datemultirange, etc), and put that into code, but custom types always have a db-dependent OID.
[02:13:36] <la_croix_> Ok, understood, no, hitting the db is fine
[02:14:20] <schinckel> I actually do a thing where I do a `SELECT NULL::composite_type` to see if the type exists - but I think that's a bit dirty.
[02:14:34] <schinckel> (That is a way to get a bunch of OIDs though)
[02:15:09] <schinckel> You could stick the OID for a type in an environment variable - but then if you have multiple databases the OID could differ.
[02:15:37] <la_croix_> Makes sense, but no, registering the type is fine
[02:15:59] *** Quits: mimmy (~mimmy@72.142.88.18) (Ping timeout: 265 seconds)
[02:16:07] <rconan> so this might be completely crazy... but I'm wondering if there's any way to migrate the primary key on my custom User model from using IntegerField to using UUIDField, given that I have third-party apps referencing this via a swappable dependency. The issue, as I see it, is that I would need to inject a temporary, additional field into the third-party app's table in order to hold the UUID while
[02:16:09] <rconan> the migration occurs
[02:16:39] <schinckel> It's probably possible, but could be messy.
[02:17:21] *** Joins: Matthias1 (~Matthias1@casewireless11.CWRU.Edu)
[02:17:33] <la_croix_> schinckel: This is looking promising - I'll hack away on it, and report back later. Thank you so much!
[02:19:08] <rconan> so I looked at two options for doing it... one was to just use RunSQL to do the required migrations on the third-party app's tables, for this I fell foul of not being able to easily predict the names of all the constraints on the table, the other was trying to use the schema_editor to inject an additional field in a RunPython, which just seemed really nasty
[02:19:53] <schinckel> rconan: You should be able to name your constraints.
[02:20:00] <rconan> notably, I think you don't really have access to a mutable ModelState for the model
[02:20:47] <rconan> they seem to have something that looks at least a bit random in them...  I suppose it could be some kind of hash
[02:21:13] <schinckel> When doing things that are _really_ tricky, I've been known to subclass django migration operations and make the database_forwards do nothing, and write the SQL manually.
[02:21:40] <schinckel> That way you can just change the models to match, generate the migrations, and replace the classes they use.
[02:21:47] <schinckel> Then django is happy, and it moves the problem to SQL
[02:22:06] <rconan> I'm wondering if all this is "not worth it" though, and I should just tolerate that this model will forever have an id that's an IntegerField and an additional UUID for places where I care about enumerability
[02:22:41] <schinckel> That's what we do - we add an additional UUID field when we need to expose it as a value without showing our users how many of a given thing we have.
[02:23:32] *** Quits: Matthias1 (~Matthias1@casewireless11.CWRU.Edu) (Remote host closed the connection)
[02:24:01] *** Joins: Matthias1 (~Matthias1@macbookgamma.STUDENT.CWRU.Edu)
[02:24:18] <schinckel> (I personally don't think that is as much of a security issue as some others do - having guessable object ids is fine as long as you ensure users can only access objects they should be able to access)
[02:24:23] *** Quits: la_croix_ (~la_croix@cpc117350-walt24-2-0-cust237.13-2.cable.virginm.net) (Remote host closed the connection)
[02:24:59] <rconan> there are just a few areas in this particular project where simply knowing "how many" could be seen as an issue
[02:33:01] *** Quits: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it) (Quit: Leaving.)
[02:43:24] *** Quits: GinFuyou (~GinFuyou@reya.cloud.tilaa.com) (Remote host closed the connection)
[02:43:33] *** Quits: audiobirb (~audio@user/audio) (Ping timeout: 250 seconds)
[02:44:46] *** Joins: GinFuyou (~GinFuyou@reya.cloud.tilaa.com)
[02:52:54] *** Joins: Kvothe (~weechat@user/elodin)
[03:00:44] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Quit: My MacBook Pro has gone to sleep. ZZZzzzâ€¦)
[03:12:18] *** Joins: mimmy (~mimmy@2607:fea8:6e0:7f90:d1ec:e4ac:744a:8e08)
[03:14:10] *** Joins: la_croix_ (~la_croix@cpc117350-walt24-2-0-cust237.13-2.cable.virginm.net)
[03:22:30] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[03:24:12] <la_croix_> schinckel: Reading the field is working well, but I can't write it. Writing is also works, but I feel like I'm abusing get_db_prep_value, and get_prep_value: https://dpaste.org/uUdS
[03:31:27] *** Quits: brsc2909 (~Thunderbi@109.255.244.60) (Quit: brsc2909)
[03:31:55] *** Quits: Kvothe (~weechat@user/elodin) (Ping timeout: 268 seconds)
[03:32:50] *** Quits: mimmy (~mimmy@2607:fea8:6e0:7f90:d1ec:e4ac:744a:8e08) (Ping timeout: 265 seconds)
[03:40:15] *** Joins: yanchai (~yanchai@222.127.97.162)
[03:43:14] *** Quits: Haudegen (~quassel@178.115.237.87.static.drei.at) (Ping timeout: 260 seconds)
[04:00:23] *** Quits: rje_ (~rje@65.141.156.170) (Remote host closed the connection)
[04:00:55] *** Joins: rje (~rje@65.141.156.170)
[04:02:06] *** Joins: mimmy (~mimmy@2607:fea8:6e0:7f90:e4cb:5a57:fd6e:e655)
[04:02:47] *** Joins: righthand (~righthand@2401:de00:f003:1044:a81a:67f4:a9dc:6e80)
[04:05:42] *** Quits: rje (~rje@65.141.156.170) (Ping timeout: 265 seconds)
[04:09:02] *** Joins: mimmy_ (~mimmy@2607:fea8:6e0:7f90:20d6:2b3a:ce41:e0b6)
[04:11:47] *** Quits: mimmy (~mimmy@2607:fea8:6e0:7f90:e4cb:5a57:fd6e:e655) (Ping timeout: 264 seconds)
[04:15:07] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[04:15:43] *** Joins: rpkilby (~rpkilby@ec2-34-252-84-235.eu-west-1.compute.amazonaws.com)
[04:16:17] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 250 seconds)
[04:16:53] *** Joins: mimmy (~mimmy@2607:fea8:6e0:7f90:fc41:a35f:792:b57c)
[04:18:26] *** Joins: fikran (~fikran@user/fikran)
[04:18:27] *** Quits: mimmy_ (~mimmy@2607:fea8:6e0:7f90:20d6:2b3a:ce41:e0b6) (Ping timeout: 250 seconds)
[04:22:37] *** Joins: PantelicGR (~PantelicG@user/pantelicgr)
[04:39:36] *** Quits: PantelicGR (~PantelicG@user/pantelicgr) (Quit: Leaving)
[04:40:47] *** Joins: djapo (~archangel@user/djapo)
[04:49:41] *** Quits: djapo (~archangel@user/djapo) (Ping timeout: 265 seconds)
[04:57:38] *** Parts: MrGlass (~mrglass@user/mrglass) (Leaving)
[05:14:55] <schinckel> la_croix_: That's where you can register a psycogp2 adapter.
[05:15:44] <schinckel> https://www.psycopg.org/docs/extensions.html#psycopg2.extensions.register_adapter
[05:16:32] *** Joins: rje (~rje@50.35.241.164)
[05:16:43] <la_croix_> schinckel: Is that not what we did in the snippet I sent (copied from your blog post)?
[05:16:49] <schinckel> la_croix_: Mine looks like https://dpaste.org/bSKP
[05:17:10] *** Joins: mimmy_ (~mimmy@2607:fea8:6e0:7f90:ec1e:7b74:9028:2102)
[05:17:29] <schinckel> Oh yeah, I missed that bit in your code.
[05:17:43] *** Quits: mimmy (~mimmy@2607:fea8:6e0:7f90:fc41:a35f:792:b57c) (Ping timeout: 265 seconds)
[05:17:48] <la_croix_> schinckel: Quite possible that I'm just escaping it wrong, though
[05:18:04] <schinckel> Can you see it sending data to postgres? Maybe check the pg logs.
[05:19:58] <la_croix_> Yes, it is, it's complaining that: malformed record literal: "ROW(1, 2, 3, NULL, NULL)::semanticversion" on insert/update
[05:20:42] <schinckel> Hmm. Maybe check that the adapter is being called? Drop into a breakpoint in https://dpaste.org/uUdS#L13
[05:21:01] <schinckel> Also, you may not want spaces after the commas in the record.
[05:21:37] <la_croix_> Done - the adapter is not being called
[05:21:56] <la_croix_> register_type etc is, bu the adapt_composite function is never called
[05:22:18] *** Quits: rje (~rje@50.35.241.164) (Quit: My computer has gone to sleep. ZZZzzzâ€¦)
[05:23:56] <schinckel> Oh wait, register_type is supposed to be a classmethod?
[05:24:03] <schinckel> How's that getting called?
[05:24:39] <schinckel> Oh, I see, just above.
[05:24:52] *** Joins: rje (~rje@50.35.241.164)
[05:25:29] <schinckel> Maybe something is happening in the register_adapter function.
[05:26:08] <la_croix_> One thing i'm confused by, and possibly a stupid question - the type being provided is a SemanticVersionm but the cls.python_type is 'pyscopg2.extras.semanticversion'. How does psycopg2 know that they are related?
[05:27:12] <schinckel> Oh, here we go, I have a newer thing, which _may_ help.
[05:27:44] <schinckel> It's a decorator you can add to a Model to register it as a composite type...oh, maybe it uses some of the older stuff too.
[05:28:28] <schinckel> Here's my whole generic composite type+model field+form field+widget stuff: https://dpaste.org/rQZh
[05:29:06] <schinckel> That may be helpul.
[05:33:51] *** Quits: Rikem (~mike@user/rikem) (Ping timeout: 250 seconds)
[05:34:41] <la_croix_> Hmm, that's going to take some reading. Thank you
[05:39:35] <la_croix_> The first thing is to figure out why adapt_composite is never called. register_adapter is definitely called, and returns cleanly, updating the _psycopg adapters dict
[05:39:47] *** Joins: stats4647 (~stats4647@ip174-67-220-13.oc.oc.cox.net)
[05:42:18] <la_croix_> schinckel: Ah, got it... Two mistakes, the first is that my get_prep_value was casting it as a string, so the adapt_composite was never called. The second was that register_adapter(cls.python_version, adapt_composite) needs to be register_adapter(SemanticVersion, adapt_composite)
[05:42:56] <schinckel> Ah, of course. You were bypassing the adapter mechanism because it was already a string...
[05:43:22] <la_croix_> Sorry, that was stupid of me.
[05:43:39] <la_croix_> Is it a problem that it doesn't like cls.python_type?
[05:44:15] *** Quits: stats4647 (~stats4647@ip174-67-220-13.oc.oc.cox.net) (Ping timeout: 250 seconds)
[05:46:26] *** Joins: nicode (~nic@2607:f2c0:94c5:4700:4dc5:64e1:feed:1c4c)
[05:49:05] *** Quits: righthand (~righthand@2401:de00:f003:1044:a81a:67f4:a9dc:6e80) (Quit: Client closed)
[05:50:43] *** Joins: Matthia__ (~Matthias1@casewireless11.CWRU.Edu)
[05:54:27] *** Quits: Matthias1 (~Matthias1@macbookgamma.STUDENT.CWRU.Edu) (Ping timeout: 265 seconds)
[06:01:23] *** Quits: la_croix_ (~la_croix@cpc117350-walt24-2-0-cust237.13-2.cable.virginm.net) (Remote host closed the connection)
[06:07:01] *** Quits: mimmy_ (~mimmy@2607:fea8:6e0:7f90:ec1e:7b74:9028:2102) (Ping timeout: 265 seconds)
[06:09:31] *** Joins: mimmy_ (~mimmy@185.244.215.86)
[06:11:47] *** Quits: kostkon (~kostkon@2a02:587:a108:5f73:9d4e:600e:327b:ee4a) (Ping timeout: 264 seconds)
[06:12:58] *** Joins: kostkon (~kostkon@2a02:587:a108:5f73:9d4e:600e:327b:ee4a)
[06:19:02] *** Quits: mimmy_ (~mimmy@185.244.215.86) (Ping timeout: 268 seconds)
[06:20:04] *** Quits: slav0nic (slav0nic@python.su) (Ping timeout: 265 seconds)
[06:24:13] *** Joins: mimmy_ (~mimmy@185.244.215.86)
[06:25:40] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 256 seconds)
[06:27:46] *** Joins: fikran (~fikran@user/fikran)
[07:12:29] *** Quits: mimmy_ (~mimmy@185.244.215.86) (Quit: WeeChat 3.3)
[07:15:31] *** Quits: xkuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[07:21:23] *** Quits: nicode (~nic@2607:f2c0:94c5:4700:4dc5:64e1:feed:1c4c) (Ping timeout: 264 seconds)
[07:25:23] *** Joins: nicode (~nic@2607:f2c0:9598:9800:8797:a1c4:b386:57ae)
[07:54:54] *** Quits: rpkilby (~rpkilby@ec2-34-252-84-235.eu-west-1.compute.amazonaws.com) (Remote host closed the connection)
[07:55:49] *** Joins: rpkilby (~rpkilby@ec2-34-252-84-235.eu-west-1.compute.amazonaws.com)
[08:00:12] *** Joins: thiras (~thiras@user/thiras)
[08:00:47] *** Quits: rpkilby (~rpkilby@ec2-34-252-84-235.eu-west-1.compute.amazonaws.com) (Ping timeout: 268 seconds)
[08:34:59] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 250 seconds)
[08:37:08] *** Joins: fikran (~fikran@user/fikran)
[09:10:09] *** Quits: Xaldafax (~xaldafax@cpe-198-72-160-101.socal.res.rr.com) (Quit: Bye...)
[09:10:25] *** Joins: chs77 (~chs@pool-100-14-50-138.phlapa.fios.verizon.net)
[09:13:20] *** Quits: jgee (~jgee@186.80.49.20) (Read error: Connection reset by peer)
[09:13:46] *** Joins: jgee (~jgee@186.80.49.20)
[09:14:28] <chs77> hey guys, I'm trying to POST a file with curl like: curl -sS http://localhost/transcoder/upload -F 'file=@/dev/testfile' and i'm running into SuspiciousFileOperation https://dpaste.org/UMeQ#L12 can anyone give me some advice?
[09:19:58] *** Joins: rpkilby (~rpkilby@ec2-34-252-84-235.eu-west-1.compute.amazonaws.com)
[09:24:23] *** Quits: rpkilby (~rpkilby@ec2-34-252-84-235.eu-west-1.compute.amazonaws.com) (Ping timeout: 250 seconds)
[09:39:32] *** Quits: jasonbraganza (jasonbraga@user/jasonbraganza) (Quit: Au revoir â€¦)
[09:41:05] *** Joins: jasonbraganza (jasonbraga@user/jasonbraganza)
[09:58:48] <FunkyBob> chs77: can you dpaste the code for your view?
[10:00:57] *** Quits: sidj (~sidj@user/sidj) (Ping timeout: 265 seconds)
[10:02:32] *** Joins: stats4647 (~stats4647@ip174-67-220-13.oc.oc.cox.net)
[10:09:53] *** Quits: stats4647 (~stats4647@ip174-67-220-13.oc.oc.cox.net) (Ping timeout: 250 seconds)
[10:27:24] *** Quits: henbruas (~henbruas@ti0003a400-4203.bb.online.no) (Quit: ZNC 1.8.2 - https://znc.in)
[10:27:43] *** Joins: henbruas (~henbruas@ti0003a400-4203.bb.online.no)
[10:44:38] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 256 seconds)
[10:46:29] *** Joins: fikran (~fikran@user/fikran)
[11:09:34] *** Joins: szymon (~ugh@185.244.214.60)
[11:10:24] *** Joins: luischi (~luigi@80.30.201.209)
[11:13:08] *** Joins: righthand (~righthand@2401:de00:f003:1044:a81a:67f4:a9dc:6e80)
[11:14:44] *** Quits: szymon (~ugh@185.244.214.60) (Remote host closed the connection)
[11:17:49] <serafeim> hello
[11:18:47] *** Quits: thiras (~thiras@user/thiras) (Ping timeout: 250 seconds)
[11:23:58] *** Joins: thiras (~thiras@user/thiras)
[11:24:18] *** Quits: yanchai (~yanchai@222.127.97.162) (Ping timeout: 256 seconds)
[11:24:49] *** Joins: lelouche22 (~lelouche2@h178.cornut.fr)
[11:27:38] *** Joins: pycode1 (~pycode@2001:b07:5d28:551:ed11:6218:98da:2eca)
[11:29:00] *** Joins: Tas-sos (~Tas-sos@ppp046176221197.access.hol.gr)
[11:33:05] *** Quits: thiras (~thiras@user/thiras) (Ping timeout: 250 seconds)
[11:47:31] *** Joins: VaniaPy (~VaniaPy@46.12.226.1.dsl.dyn.forthnet.gr)
[11:48:06] *** Parts: VaniaPy (~VaniaPy@46.12.226.1.dsl.dyn.forthnet.gr) ()
[11:48:37] *** Joins: mrwick (~mrwick@user/mrwick)
[11:51:42] *** Joins: slav0nic (slav0nic@python.su)
[12:00:16] *** Quits: luischi (~luigi@80.30.201.209) (Quit: WeeChat 3.3)
[12:03:03] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[12:03:03] *** ChanServ sets mode: +v EvilDMP
[12:05:21] *** Joins: luischi (~luigi@80.30.201.209)
[12:21:56] *** Quits: luischi (~luigi@80.30.201.209) (Quit: WeeChat 3.3)
[12:22:19] *** Joins: luischi (~luigi@80.30.201.209)
[12:24:17] *** luischi is now known as luigibu
[12:24:27] *** Quits: luigibu (~luigi@80.30.201.209) (Client Quit)
[12:24:45] *** Joins: luischi (~luigi@80.30.201.209)
[12:28:55] *** Joins: Ergo^ (~ergo@91.238.59.144)
[12:29:41] *** luischi is now known as luigibu
[12:37:12] *** Joins: Haudegen (~quassel@178.115.237.87.static.drei.at)
[12:44:18] *** Joins: mattil (~mattil@helsinki.portalify.com)
[12:45:23] *** Quits: twomoon (~twomoon@ip72-199-116-21.sd.sd.cox.net) (Quit: Leaving)
[12:53:50] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 256 seconds)
[12:55:32] *** Joins: DnzAtWrk (~DnzAtWrk@mobile-access-567343-143.dhcp.inet.fi)
[12:55:49] *** Joins: fikran (~fikran@user/fikran)
[13:02:06] *** Joins: mgauthier (~mgauthier@h178.cornut.fr)
[13:02:16] *** Joins: brsc2909 (~Thunderbi@109.255.244.60)
[13:07:49] *** Joins: Rikem (~mike@user/rikem)
[13:14:25] *** Quits: DnzAtWrk (~DnzAtWrk@mobile-access-567343-143.dhcp.inet.fi) (Read error: Connection reset by peer)
[13:15:53] *** Joins: DnzAtWrk (~DnzAtWrk@mobile-access-6df0c0-17.dhcp.inet.fi)
[13:20:31] *** Quits: DnzAtWrk (~DnzAtWrk@mobile-access-6df0c0-17.dhcp.inet.fi) (Read error: Connection reset by peer)
[13:21:47] *** Joins: DnzAtWrk (~DnzAtWrk@mobile-access-567343-143.dhcp.inet.fi)
[13:44:54] *** Quits: sisel4 (lysy@user/sisel4) (Ping timeout: 265 seconds)
[13:47:02] *** Quits: lelouche22 (~lelouche2@h178.cornut.fr) (Quit: Client closed)
[13:50:47] *** Joins: explore (uid233125@hampstead.irccloud.com)
[14:02:25] *** Joins: lelouche22 (~lelouche2@h178.cornut.fr)
[14:07:37] *** Joins: stats4647 (~stats4647@ip174-67-220-13.oc.oc.cox.net)
[14:12:17] *** Quits: stats4647 (~stats4647@ip174-67-220-13.oc.oc.cox.net) (Ping timeout: 265 seconds)
[14:28:38] *** Joins: Kvothe (~weechat@user/elodin)
[14:36:48] *** Joins: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it)
[14:37:33] *** Joins: timkofu (~timkofu@user/timkofu)
[14:37:34] *** Quits: righthand (~righthand@2401:de00:f003:1044:a81a:67f4:a9dc:6e80) (Ping timeout: 256 seconds)
[14:37:38] <timkofu> Hi
[14:38:23] *** Quits: lelouche22 (~lelouche2@h178.cornut.fr) (Quit: Client closed)
[14:42:15] *** Joins: Guddu (~Guddu@186.106.137.158)
[14:47:19] *** Quits: DnzAtWrk (~DnzAtWrk@mobile-access-567343-143.dhcp.inet.fi) (Read error: Connection reset by peer)
[14:48:33] *** Joins: DnzAtWrk (~DnzAtWrk@mobile-access-6df0c0-17.dhcp.inet.fi)
[14:52:49] *** Quits: DnzAtWrk (~DnzAtWrk@mobile-access-6df0c0-17.dhcp.inet.fi) (Read error: Connection reset by peer)
[14:54:04] *** Joins: DnzAtWrk (~DnzAtWrk@mobile-access-567343-143.dhcp.inet.fi)
[15:03:10] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 260 seconds)
[15:04:26] *** Quits: pycode1 (~pycode@2001:b07:5d28:551:ed11:6218:98da:2eca) (Ping timeout: 268 seconds)
[15:05:10] *** Joins: fikran (~fikran@user/fikran)
[15:08:30] <mad_moses> Is the per-view cache in URLconf or the per-site cache applicable for dynamic websites? (For example my menu and footer is dynamic. Depending on the logged in user.
[15:10:10] *** Quits: mgauthier (~mgauthier@h178.cornut.fr) (Ping timeout: 260 seconds)
[15:15:22] *** Quits: timkofu (~timkofu@user/timkofu) (Quit: Lost terminal)
[15:27:20] *** Joins: mgauthier (~mgauthier@h178.cornut.fr)
[15:30:36] *** Quits: cebor (~cebor@user/cebor) (Quit: bye!)
[15:30:55] *** Joins: cebor (~cebor@user/cebor)
[15:42:06] <GinFuyou>  mad_moses cache for static site wouldn't make any sense
[15:47:59] <mad_moses> GinFuyou: okay right. But how does the system know that the cached size is different for different user? path('foo/<int:code>/', cache_page(60 * 15)(my_view)), <= I guess I should tell the cache to also look at the Site and current User or is this happening magically automatically ?
[15:51:12] *** Quits: jeosol (~jeosol@76-238-186-228.lightspeed.hstntx.sbcglobal.net) (Ping timeout: 256 seconds)
[15:52:20] *** Quits: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it) (Ping timeout: 256 seconds)
[15:53:58] <GinFuyou> see https://docs.djangoproject.com/en/3.2/topics/cache/#using-vary-headers for example or part about template fragment caching
[16:04:18] *** Quits: luigibu (~luigi@80.30.201.209) (Ping timeout: 260 seconds)
[16:05:53] <mad_moses> GinFuyou: okay, but this kind of anotations can not be used in my urls.py? I need to add it to my views in my views.py?
[16:07:07] *** Joins: dez (uid92154@user/dez)
[16:09:18] *** Joins: lelouche22 (~lelouche2@h178.cornut.fr)
[16:12:02] *** Joins: la_croix_ (~la_croix@cpc117350-walt24-2-0-cust237.13-2.cable.virginm.net)
[16:12:42] *** Quits: cmbengue (~Thunderbi@207.191.249.160) (Ping timeout: 260 seconds)
[16:12:57] *** Joins: cmbengue (~Thunderbi@207.191.249.160)
[16:17:50] *** Quits: la_croix_ (~la_croix@cpc117350-walt24-2-0-cust237.13-2.cable.virginm.net) (Remote host closed the connection)
[16:22:02] *** Joins: la_croix_ (~la_croix@cpc117350-walt24-2-0-cust237.13-2.cable.virginm.net)
[16:25:44] *** Quits: svedrin (~quassel@tiamat.funzt-halt.net) (Quit: https://quassel-irc.org - Komfortabler Chat. Ãœberall.)
[16:25:58] *** Joins: svedrin (~quassel@tiamat.funzt-halt.net)
[16:27:12] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Ping timeout: 276 seconds)
[16:27:19] <GinFuyou> mad_moses, don't know, those are decorators, so I guess there is a way, but I generally don't use do that in urls
[16:27:20] <la_croix_> I have a fairly strange issue - I am registering a custom postgres adapter for a type in the __init__ method of a field's metaclass. This works perfectly in runserver, perfectly in shell, but the adapter does not get called in pytest (I've put a breakpoint in, and the __init__ method is called as normal, it just doesn't adapt the type when data is pulled from the db)
[16:27:54] *** Quits: Haudegen (~quassel@178.115.237.87.static.drei.at) (Quit: Bin weg.)
[16:32:24] *** Quits: DnzAtWrk (~DnzAtWrk@mobile-access-567343-143.dhcp.inet.fi) (Read error: Connection reset by peer)
[16:33:48] *** Joins: DnzAtWrk (~DnzAtWrk@mobile-access-6df0c0-17.dhcp.inet.fi)
[16:35:39] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[16:39:14] <la_croix_> schinckel: If you're around, this is the same thing we were discussing yesterday. It works perfectly, just not in pytest ^^
[16:39:18] *** Quits: DnzAtWrk (~DnzAtWrk@mobile-access-6df0c0-17.dhcp.inet.fi) (Read error: Connection reset by peer)
[16:40:39] *** Joins: DnzAtWrk (~DnzAtWrk@mobile-access-567343-143.dhcp.inet.fi)
[16:43:46] *** Joins: dkliban_ (~dkliban@99-3-68-61.lightspeed.rlghnc.sbcglobal.net)
[16:46:08] *** Quits: lelouche22 (~lelouche2@h178.cornut.fr) (Quit: Client closed)
[16:46:25] *** Joins: lelouche22 (~lelouche2@h178.cornut.fr)
[16:50:01] *** Quits: explore (uid233125@hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[16:53:10] *** Joins: VaniaPy (~VaniaPy@46.12.226.1.dsl.dyn.forthnet.gr)
[16:54:35] *** Quits: lelouche22 (~lelouche2@h178.cornut.fr) (Quit: Client closed)
[16:54:47] *** Joins: lelouche22 (~lelouche2@h178.cornut.fr)
[16:56:39] *** Joins: dor (~erg@78.11.12.207)
[16:59:10] *** Quits: chs77 (~chs@pool-100-14-50-138.phlapa.fios.verizon.net) (Quit: Client closed)
[16:59:23] *** Joins: rpkilby (~rpkilby@ec2-34-252-84-235.eu-west-1.compute.amazonaws.com)
[17:00:13] *** Joins: beancurd (~root@149.28.173.96)
[17:05:58] *** Quits: lelouche22 (~lelouche2@h178.cornut.fr) (Quit: Client closed)
[17:06:10] *** Joins: lelouche22 (~lelouche2@h178.cornut.fr)
[17:12:16] *** Quits: DnzAtWrk (~DnzAtWrk@mobile-access-567343-143.dhcp.inet.fi) (Read error: Connection reset by peer)
[17:12:45] *** Quits: lelouche22 (~lelouche2@h178.cornut.fr) (Quit: Client closed)
[17:12:59] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 264 seconds)
[17:13:06] *** Joins: lelouche229 (~lelouche2@h178.cornut.fr)
[17:13:36] *** Joins: DnzAtWrk (~DnzAtWrk@mobile-access-6df0c0-17.dhcp.inet.fi)
[17:14:00] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Ping timeout: 276 seconds)
[17:14:31] *** Joins: fikran (~fikran@user/fikran)
[17:15:47] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[17:19:16] *** Quits: DnzAtWrk (~DnzAtWrk@mobile-access-6df0c0-17.dhcp.inet.fi) (Read error: Connection reset by peer)
[17:20:31] *** Joins: DnzAtWrk (~DnzAtWrk@mobile-access-567343-143.dhcp.inet.fi)
[17:27:00] *** Quits: lelouche229 (~lelouche2@h178.cornut.fr) (Quit: Client closed)
[17:27:59] *** Joins: pycode1 (~pycode@2001:b07:5d28:551:b431:b752:5a32:803a)
[17:28:25] *** Quits: mattil (~mattil@helsinki.portalify.com) (Remote host closed the connection)
[17:28:59] *** Joins: mattil (~mattil@helsinki.portalify.com)
[17:30:43] *** Joins: lelouche22 (~lelouche2@h178.cornut.fr)
[17:33:37] *** Quits: mattil (~mattil@helsinki.portalify.com) (Ping timeout: 250 seconds)
[17:38:10] *** Joins: thiras (~thiras@user/thiras)
[17:39:01] *** Joins: rpkilby_ (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[17:40:57] *** Quits: pyrrhus (~pyrrhus@user/pyrrhus) (Quit: pyrrhus)
[17:41:50] *** Quits: rpkilby (~rpkilby@ec2-34-252-84-235.eu-west-1.compute.amazonaws.com) (Ping timeout: 260 seconds)
[17:42:20] *** Joins: ssb10 (~ssb10@ool-18bd347f.dyn.optonline.net)
[17:52:47] *** Quits: lelouche22 (~lelouche2@h178.cornut.fr) (Quit: Client closed)
[17:58:01] *** Joins: luigibu (~luigi@80.30.201.209)
[18:08:21] *** Quits: Matthia__ (~Matthias1@casewireless11.CWRU.Edu) (Remote host closed the connection)
[18:09:04] *** Joins: Matthias1 (~Matthias1@casewireless11.cwru.edu)
[18:13:57] *** Quits: Matthias1 (~Matthias1@casewireless11.cwru.edu) (Ping timeout: 265 seconds)
[18:15:59] *** Joins: Xaldafax (~xaldafax@cpe-198-72-160-101.socal.res.rr.com)
[18:18:49] *** Joins: dkliban__ (~dkliban@99-3-68-61.lightspeed.rlghnc.sbcglobal.net)
[18:21:22] *** Quits: dkliban_ (~dkliban@99-3-68-61.lightspeed.rlghnc.sbcglobal.net) (Ping timeout: 256 seconds)
[18:27:27] *** Joins: stats4647 (~stats4647@ip174-67-220-13.oc.oc.cox.net)
[18:40:56] *** Joins: mimmy (~mimmy@146.70.75.156)
[18:42:00] *** Quits: richbridger (~richbridg@089144202142.atnat0011.highway.a1.net) (Remote host closed the connection)
[18:42:24] *** Joins: richbridger (~richbridg@089144202142.atnat0011.highway.a1.net)
[18:54:04] <VaniaPy> Hello friends, i want to make a simple question-answer app with static answers and questions, i have built this one https://dpaste.org/fdAw
[18:54:17] <VaniaPy> is there a better way to optimize it?
[18:54:59] <VaniaPy> i mean, should i query the questions from the db? i don't need to store the answers btw
[19:00:09] <GinFuyou> if questions are static, using db is not optimal
[19:00:28] <GinFuyou> result calculation on other side is awkward
[19:04:18] <VaniaPy> GinFuyou i know,but i'm just doing what i'm told to do so :P  Regarding the models,then as i understand are not mandatory as well
[19:05:20] <GinFuyou> Don't listen to person who tells you do something so silly
[19:09:54] *** Quits: Ergo^ (~ergo@91.238.59.144) (Remote host closed the connection)
[19:21:57] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 250 seconds)
[19:23:52] *** Joins: fikran (~fikran@user/fikran)
[19:27:40] <LordKalma> VaniaPy, you could model the data differently, like, even without a database you could hae
[19:28:29] <LordKalma> [{"question": "bla?", "answers": ["ans1", ...], "correct_idx": 0}, ...]
[19:28:49] <LordKalma> which would simplify things
[19:32:20] <LordKalma> instead of those hardcoded `elif question == "Once used ..." and data['answer']  == "Yes"`
[19:32:39] <LordKalma> I still would use a DB though, even with a performance penalty, the fact you get django admin for free is amaziiiing
[19:33:24] <VaniaPy> LordKalma ok,thanks!
[19:34:43] <LordKalma> no problem
[19:40:24] *** Quits: rpkilby_ (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[19:40:59] *** Joins: rpkilby (~rpkilby@ec2-34-252-84-235.eu-west-1.compute.amazonaws.com)
[19:45:35] *** Quits: rje (~rje@50.35.241.164) (Quit: My computer has gone to sleep. ZZZzzzâ€¦)
[19:49:41] *** Quits: mgauthier (~mgauthier@h178.cornut.fr) (Ping timeout: 250 seconds)
[19:50:37] *** Joins: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it)
[19:53:03] *** Joins: xkuru (~xkuru@user/xkuru)
[19:58:05] *** Joins: Matthias1 (~Matthias1@casewireless02.CWRU.Edu)
[20:01:54] <LordKalma> what's it called when you have like a binary counter but with a higher basis?
[20:02:25] <LordKalma> as in, as I have X slots and N<X possibilities, and I want all combinations of selection an option of N for each X
[20:03:04] <LordKalma> like for [a,b,c,d] in 7 places I want [a,a,a,a,a,a,a], [a,a,a,a,a,a,b], [a,a,a,a,a,a,c], [a,a,a,a,a,b,a], .....
[20:03:11] *** Quits: la_croix_ (~la_croix@cpc117350-walt24-2-0-cust237.13-2.cable.virginm.net) (Remote host closed the connection)
[20:11:39] *** Joins: kostkon_ (~androirc@2.142.66.94.static.otenet.gr)
[20:12:12] <moldy> LordKalma: permutations?
[20:15:09] <LordKalma> https://docs.python.org/3/library/itertools.html#itertools.product
[20:15:10] <LordKalma> this
[20:15:26] <LordKalma> product(Xvec, repeat=N)
[20:15:44] *** Joins: Elzington (~Elzington@static-68-235-44-10.cust.tzulo.com)
[20:16:07] *** Quits: pycode1 (~pycode@2001:b07:5d28:551:b431:b752:5a32:803a) (Ping timeout: 250 seconds)
[20:16:43] *** Quits: GinFuyou (~GinFuyou@reya.cloud.tilaa.com) (Ping timeout: 265 seconds)
[20:22:43] *** Joins: rje (~rje@65.141.156.170)
[20:29:27] *** Joins: rje_ (~rje@65.141.156.170)
[20:31:17] *** Quits: rje (~rje@65.141.156.170) (Ping timeout: 250 seconds)
[20:39:02] *** Joins: explore (uid233125@hampstead.irccloud.com)
[20:41:47] *** Quits: mrwick (~mrwick@user/mrwick) (Ping timeout: 264 seconds)
[20:49:56] *** Quits: luigibu (~luigi@80.30.201.209) (Quit: WeeChat 3.3)
[20:53:33] *** Joins: Xof (~Xof@157-131-136-66.dedicated.static.sonic.net)
[21:00:48] *** Quits: kostkon_ (~androirc@2.142.66.94.static.otenet.gr) (Quit: AndroIRC - Android IRC Client ( http://www.androirc.com ))
[21:05:59] *** Joins: la_croix_ (~la_croix@cpc117350-walt24-2-0-cust237.13-2.cable.virginm.net)
[21:06:13] *** Quits: la_croix_ (~la_croix@cpc117350-walt24-2-0-cust237.13-2.cable.virginm.net) (Remote host closed the connection)
[21:10:18] *** Quits: VaniaPy (~VaniaPy@46.12.226.1.dsl.dyn.forthnet.gr) (Quit: Connection closed)
[21:28:15] *** Quits: DnzAtWrk (~DnzAtWrk@mobile-access-567343-143.dhcp.inet.fi) (Read error: Connection reset by peer)
[21:29:17] *** Parts: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it) ()
[21:31:35] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 264 seconds)
[21:33:13] *** Joins: fikran (~fikran@user/fikran)
[21:36:16] *** Quits: cmbengue (~Thunderbi@207.191.249.160) (Read error: Connection reset by peer)
[21:37:07] *** Quits: ssb10 (~ssb10@ool-18bd347f.dyn.optonline.net) (Quit: Client closed)
[21:41:23] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[21:43:15] *** Quits: Matthias1 (~Matthias1@casewireless02.CWRU.Edu) (Remote host closed the connection)
[21:47:11] *** Joins: Haudegen (~quassel@178.115.237.87.static.drei.at)
[21:48:51] *** Quits: daniel-k (~daniel-k@fsf/emeritus/daniel-k) (Quit: Ping timeout (120 seconds))
[21:49:04] *** Joins: daniel-k (~daniel-k@fsf/emeritus/daniel-k)
[21:50:47] *** Quits: jrabbit (~jack@user/jrabbit) (Ping timeout: 264 seconds)
[21:51:56] *** Joins: jrabbit (~jack@user/jrabbit)
[21:56:32] *** Joins: Matthias1 (~Matthias1@casewireless11.CWRU.Edu)
[21:57:05] *** Quits: mimmy (~mimmy@146.70.75.156) (Ping timeout: 250 seconds)
[22:00:15] *** Joins: twomoon (~twomoon@ip72-199-116-21.sd.sd.cox.net)
[22:03:03] *** Quits: dor (~erg@78.11.12.207) (Ping timeout: 265 seconds)
[22:09:44] *** Joins: dor (~erg@78.11.12.207)
[22:13:58] *** Joins: Staunch (~Staunch@c-24-7-237-208.hsd1.mn.comcast.net)
[22:18:50] *** Joins: rpkilby_ (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[22:19:35] *** Joins: BinarySavior (~BinarySav@idlerpg/player/BinarySavior)
[22:20:36] <BinarySavior> hi, when using django ORM, and more broadly, ORM in general, are there any downfalls as opposed to constructing the DB using SQL?
[22:22:13] *** Quits: rpkilby (~rpkilby@ec2-34-252-84-235.eu-west-1.compute.amazonaws.com) (Ping timeout: 250 seconds)
[22:24:16] *** Joins: mimmy (~mimmy@146.70.75.158)
[22:24:44] <dminuoso> BinarySavior: Depends on who you ask.
[22:25:06] <dminuoso> I personally greatly dislike ORMs because they force a non-working poorly documented mental model on you, where its hard to figure out how to achieve something.
[22:25:22] <dminuoso> For non-trivial queries you usually end up spending so much time figuring out how to make the ORM generate the exact SQL query you have in mind
[22:26:11] <dminuoso> Or the ORM generates poor queries and you cant do much about it. And furthermore, because ORM tend to provide multi-step processes, developers frequently spread code that influences SQL generation across many places
[22:26:27] <BinarySavior> interesting, i could definitely identify with that
[22:28:33] <dminuoso> Plus, SQL knowledge is portable irrespective of what programming language you work in, even odd management tasks or consulting the database directly can all be done in the same language.
[22:29:00] *** Quits: mimmy (~mimmy@146.70.75.158) (Ping timeout: 256 seconds)
[22:29:10] <dminuoso> Side note: I happen to work in problem domains with fairly limited numbers of tables, so writing raw SQL and providing simple handwritten object manager style interfaces is quite feasible for us.
[22:29:20] *** Joins: GJdan (~quassel@107-190-26-141.cpe.teksavvy.com)
[22:30:11] <bss> and I greatly appreciate ORMs for the abstraction they provide, especially when working with healthy catalogs of models, especially when those models are designed coherently
[22:31:48] *** Joins: pycode1 (~pycode@2001:b07:5d28:551:163a:ee6b:f1ce:a12)
[22:32:05] *** Joins: mgauthier (~mgauthier@82.66.23.42)
[22:32:36] *** Quits: mgauthier (~mgauthier@82.66.23.42) (Client Quit)
[22:38:46] *** Quits: pycode1 (~pycode@2001:b07:5d28:551:163a:ee6b:f1ce:a12) (Read error: Connection reset by peer)
[22:38:48] *** Joins: pycode (~pycode@2001:b07:5d28:551:163a:ee6b:f1ce:a12)
[22:44:10] *** Joins: mimmy (~mimmy@146.70.75.158)
[22:45:06] *** Joins: cmbengue (~Thunderbi@207.191.249.160)
[22:46:02] *** Joins: ednhmn (~ednhmn@200.173.176.121)
[23:04:56] *** Joins: defjam (~eb0t@90.209.246.132)
[23:12:03] *** Quits: pycode (~pycode@2001:b07:5d28:551:163a:ee6b:f1ce:a12) (Ping timeout: 250 seconds)
[23:13:15] *** Quits: rpkilby_ (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[23:13:28] *** Joins: ssb10 (~ssb10@ool-18bd347f.dyn.optonline.net)
[23:17:52] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[23:18:59] *** Quits: thiras (~thiras@user/thiras) (Ping timeout: 250 seconds)
[23:25:22] *** Quits: cebor (~cebor@user/cebor) (Quit: bye!)
[23:25:42] *** Joins: cebor (~cebor@user/cebor)
[23:31:20] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[23:40:41] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 265 seconds)
[23:42:34] *** Joins: fikran (~fikran@user/fikran)
[23:52:17] *** Quits: mimmy (~mimmy@146.70.75.158) (Ping timeout: 265 seconds)
[23:55:33] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[23:56:09] *** Joins: rpkilby (~rpkilby@ec2-34-252-84-235.eu-west-1.compute.amazonaws.com)
[23:57:47] <nbjoerg> dminuoso: raw SQL gets annoying when the filter conditions are variable or the list of fields is variable
[23:57:53] <nbjoerg> dminuoso: but I mostly agree with the sentiment
[23:58:03] *** Quits: ssb10 (~ssb10@ool-18bd347f.dyn.optonline.net) (Quit: Client closed)
