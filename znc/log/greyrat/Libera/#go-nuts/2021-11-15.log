[00:02:07] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[00:06:36] *** Joins: krux02 (~krux02@p200300e8172958000e9c089d099881c9.dip0.t-ipconnect.de)
[00:08:48] *** Quits: menace (~someone@user/menace) (Quit: menace)
[00:11:48] *** Quits: bindu (~bindu@user/bindu) (Ping timeout: 276 seconds)
[00:12:48] *** Quits: kupi (uid212005@hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[00:14:41] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 245 seconds)
[00:14:45] *** Joins: bindu (~bindu@user/bindu)
[00:16:54] *** Joins: fikran (~fikran@user/fikran)
[00:20:31] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 245 seconds)
[00:21:23] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[00:21:58] *** Quits: pmcnabb (~pmcnabb@user/pmcnabb) (Ping timeout: 256 seconds)
[00:25:18] *** Joins: shtirlic (~shtirlic@95-55-24-132.dynamic.avangarddsl.ru)
[00:26:06] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 265 seconds)
[00:29:41] <oliv3> https://www.reddit.com/r/ProgrammerHumor/comments/6s0wov/heaviest_objects_in_the_universe
[00:31:52] <ikke> old one
[00:31:55] *** Joins: bader (~Bader_Lej@freeshell.de)
[00:34:24] *** Quits: solitonmedic (~c0a80069@user/solitonmedic) (Ping timeout: 268 seconds)
[00:38:59] <oliv3> Sure, but still true :)
[00:39:28] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[00:40:51] <oliv3> I'm afraid packages.go.dev turns into this
[00:42:03] *** Quits: shka (~herr@83.175.151.96.piasta.pl) (Ping timeout: 265 seconds)
[00:43:54] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 260 seconds)
[00:48:36] *** Joins: moog (~moog@107.126.53.9)
[00:49:05] <mjanssen> go will not make a package out of strings.TrimSpace. Having a stdlib helps with package explosion
[00:49:52] *** Quits: bindu (~bindu@user/bindu) (Remote host closed the connection)
[00:50:08] *** Joins: bindu (~bindu@user/bindu)
[00:54:38] *** Quits: ahappydeath (~ahappydea@user/ahappydeath) (Ping timeout: 260 seconds)
[00:54:45] <DHowett> the creation of a package aggregation site is not going to turn an already-existent package ecosystem into nodeJS
[00:56:27] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[00:57:13] <rawtaz> so, is there any way to create a couple of int variables but initialize them to nil or similar to indicate they are not yet having a value? the value 0 is a valid/real value for me so initing them to that doesnt work. and using e.g. -1 is an ugly hack i think,
[00:57:34] <ikke> Only if they are pointers
[00:57:40] <ikke> if they are not pointers, they cannot be nil
[00:57:48] <rawtaz> i just need the two to be "nothing" until i assign a value to them. i think this is a pretty common thing to do, but im not sure how to do it or something equivalent in Go
[00:57:54] <rawtaz> whats the alternative :o
[00:58:00] <ikke> there is none
[00:58:01] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Ping timeout: 245 seconds)
[00:58:14] <b0nn> pointers or an explicit bool that holds a "IsSet" value
[00:58:26] <rawtaz> yeah but using pointers for this seems like quite a hack as well
[00:58:47] <rawtaz> oh my.
[00:59:05] <rawtaz> thats silly, honestly. a real wtf
[00:59:16] <rawtaz> but whatever. rob is the god etc.
[00:59:41] <b0nn> Go is protecting developers from unintialised memory, by setting every variable declared to its zero value, because devs are dumb and try to use uninitialised memory with resulting bugs
[00:59:58] <rawtaz> not all devs are dumb.
[01:00:18] <b0nn> just the ones that whine on IRC that a language doesn't see things their way
[01:00:22] <rawtaz> the problem is that there is no "empty" value in an int in many cases. 0 is just as valid as any other number
[01:00:31] <riv> in haskell you can make Maybe Int, which can be None, Just 3, Just 5 etc.
[01:00:37] <riv> maybe there's a way to do something like that in go?
[01:00:52] <rawtaz> b0nn: its not about me whining. it's about there being actual use cases for this and there not being a way to consider an int "empty", because 0 is seriously not empty in a lot of cases
[01:00:59] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 264 seconds)
[01:01:13] <riv> what i would maybe do is just have  bool isInitialized, int value
[01:01:22] <b0nn> ^
[01:01:31] <b0nn> 08:28 < b0nn> pointers or an explicit bool that holds a "IsSet" valu
[01:01:33] <rawtaz> riv: yeah, that is doable. but it's quite silly to have to create two additional flag variables just to keep track of two ints :D
[01:01:38] <ikke> The maybe monad is nice
[01:02:05] <rawtaz> i dont suppose i can just add an IsSet method on the Int type? :-)
[01:02:12] <ikke> nope
[01:02:14] <rawtaz> s/method/flag/whatever
[01:02:22] <rawtaz> ok that sed went haywire :P
[01:02:26] <rawtaz> alright
[01:02:27] <b0nn> struct Int { Value int; IsSet bool}
[01:02:30] <riv> the int has 64 bits, or whatever
[01:02:37] <riv> each parttern of bits represents a number
[01:02:49] <riv> there's no pattern of bits left over which you can use to represent 'uninitialized'
[01:02:49] <rawtaz> yeah
[01:02:49] <b0nn> struct Int? too much C ;\
[01:02:58] *** Quits: aniruddha (uid340443@ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[01:03:03] <riv> so you need to actually build a new structure up, like adding a bool or wrapping the object in a pointer
[01:03:20] *** Quits: X-Scale (~ARM@83.223.243.66) (Ping timeout: 256 seconds)
[01:03:25] *** Joins: X-Scale` (~ARM@165.201.137.78.rev.vodafone.pt)
[01:03:31] <riv> it's different with floats, I think there are a whole lot of NaN values in a float which can be (mis?)used for tagging
[01:03:48] *** Joins: pmcnabb (~pmcnabb@user/pmcnabb)
[01:03:53] <rawtaz> yeah, but "misusing" specific corner-case values isnt very clean
[01:04:02] <rawtaz> anyway it is what it is.
[01:04:18] <rawtaz> ill,, see what i do about it :o
[01:04:56] <fizzie> "database/sql" has one of those structs already. ;)
[01:05:00] *** X-Scale` is now known as X-Scale
[01:05:09] <fizzie> (I wouldn't use it in a non-SQL context. It's just there because SQL has the concept of null.)
[01:05:35] *** Quits: tane (~tane@user/tane) (Quit: Leaving)
[01:05:41] <b0nn> tri-state booleans :\
[01:06:12] <fizzie> Yeah, there's a `type NullBool struct { Bool bool; Valid bool }` as well.
[01:06:40] <b0nn> yes, DBs have this idea that a boolean, that can only be true or false also has the nil value
[01:06:49] <b0nn> which is the ugliest thing *evr*
[01:07:12] <riv> lol
[01:07:37] <b0nn> no matter how you go about it, having a isset bool, or a nil, means you have to check if the value is legit before using it
[01:10:12] <rawtaz> i think it makes sense that a column can have a value or not have a value. if it doesnt have a value, it's considered NULL. if it does have a value, which value it has depends on the type, be it a boolean true/false or something else.
[01:10:38] <b0nn> the reason AIUI that it'
[01:10:55] <rawtaz> but i agree it can become messy lol
[01:10:56] <b0nn> s done is DBs are reducing the write load when a bool is created but not used
[01:12:02] <b0nn> and there's reduced read load, because it doesn't have to go to memory when a bool hasn't been set (note: these are guesses)
[01:12:30] *** Joins: Torr (~Torr@user/torr)
[01:12:34] <rawtaz> i see
[01:12:42] <rawtaz> probably very important for those DBs
[01:13:03] <b0nn> they're optimised for ondisk storage and retrieval
[01:14:02] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[01:14:12] *** Joins: lofiguy (~lofiguy@87-207-104-205.dynamic.chello.pl)
[01:15:37] *** Joins: Jose_ (~Jose@2600:6c5e:157f:df79:f0a4:969c:c93d:b846)
[01:23:00] <ikke> zhttps://play.golang.org/p/e33IxK_BX-T
[01:23:06] <rawtaz> is there no way to return an int with ++, e.g. return i++ ?
[01:23:11] <rawtaz> doesnt seem like it, i get an error
[01:23:14] *** Quits: jla (~jordi@64.225.79.195) (Quit: Leaving.)
[01:23:55] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[01:24:00] <fizzie> `i++` is a statement, not an expression.
[01:24:50] <rawtaz> so in order to return i and also have it incremented the cleanest is to do like i++ and then return i-1 i guess
[01:25:04] <rawtaz> oh unless i can defer the increment :>
[01:25:27] <fizzie> I'd find `old := i; i++; return old` more readable than `i++; return i-1`.
[01:25:44] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[01:26:06] <rawtaz> it might be. but it feels very hacky. i mean youre creating an additional variable just to return what you want hm.
[01:26:10] <b0nn> yeah, it's all in the way you write it https://play.golang.org/p/_7PhDRAqF9m
[01:26:11] <rawtaz> oh well. theres plenty of ways
[01:26:43] <b0nn> note, the way I've done it doesn't actually increment i
[01:26:45] <rawtaz> b0nn: yeah but that returns i+1, i want to return i but also have i incremented
[01:26:48] <rawtaz> hmm ok
[01:26:51] * rawtaz looks closer
[01:26:53] <rawtaz> oh yeah
[01:27:00] *** Joins: jla (~jordi@64.225.79.195)
[01:27:00] <rawtaz> of course
[01:27:25] <fizzie> I don't think declaring a variable is "hacky" in any sense of the word, compared to compensating for the increment with a -1.
[01:27:55] <fizzie> You're just giving a name for the value it had before the increment.
[01:28:46] <rawtaz> i feel it's a bit spaghetti. but it doesnt matter what i think
[01:29:26] *** Quits: AquaL1te (~AquaL1te@user/aqual1te) (Quit: leaving)
[01:29:43] *** Quits: pmcnabb (~pmcnabb@user/pmcnabb) (Quit: The Lounge - https://thelounge.chat)
[01:30:01] <b0nn> gah, CORS is such a hack
[01:30:20] <b0nn> all it is is the browser checking if the server has set headers
[01:30:33] <b0nn> set certain headers*
[01:32:40] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[01:32:48] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 265 seconds)
[01:33:16] <rawtaz> how is it bad you think? i mean, it's similar to proving you own a domain, in a sense
[01:33:39] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[01:33:45] *** Joins: rcernin (~rcernin@124.190.139.235)
[01:34:11] <b0nn> Kind of, I can proxy via a domain I control
[01:34:33] <b0nn> I mean, I send the browser to my domain, and that triggers a curl to get the data..
[01:37:42] <mjanssen> rawtaz you could always make a map of ints and have the missing key be the "this value was not set"
[01:38:28] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 256 seconds)
[01:38:57] <mjanssen> so the couple of variables are map string keys. The key exists -> it is set. In that case the map[key] is the value
[01:39:09] *** Quits: _nuke (~nuke@50-193-103-211-static.hfc.comcastbusiness.net) (Ping timeout: 268 seconds)
[01:39:30] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[01:40:25] *** Joins: solitonmedic (~c0a80069@user/solitonmedic)
[01:44:05] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 268 seconds)
[01:45:22] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[01:46:51] <ikke> Anyone got an idea what I'm doing wrong here? https://gotipplay.golang.org/p/lvekOaRvE7q
[01:47:06] <rawtaz> mjanssen: thats indeed a workaround :)
[01:48:21] <mjanssen> rawtaz: wouldn't call it a workaround. I would say it's pretty idiomatic
[01:49:08] <ikke> https://github.com/golang/go/issues/41176
[01:49:44] *** Joins: _nuke (~nuke@50-193-103-211-static.hfc.comcastbusiness.net)
[01:49:48] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 256 seconds)
[01:49:51] <rawtaz> i hear you. i think im just used to more "flexible" or what to call it languages, and thats whats making me in part dislike some of these small details and also be uncomfy with some of the alternatives
[01:51:12] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[01:53:04] <b0nn> heh, a map will return the zero value if the value isn't set
[01:53:30] <b0nn> so... you will need to check the is set boolean ( _, ok := map[v])
[01:53:51] <mjanssen> b0nn: you should check for the actual key being set first
[01:53:54] <mjanssen> x-ed
[01:54:33] <b0nn> huh?
[01:54:55] <mjanssen> crossed. You said what I said
[01:55:19] <b0nn> :)
[01:55:41] <b0nn> https://play.golang.org/p/a_0B8JC5Qfe
[01:55:46] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 260 seconds)
[01:57:25] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[01:58:24] <mjanssen> https://play.golang.org/p/TOxH96neqUg
[01:58:36] <mjanssen> that would be the idiomatic way
[02:01:46] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 245 seconds)
[02:02:26] <fizzie> ikke: I think the problem there is, if you're passing an Either[int] to a function that takes a Maybe[T], there's no way to directly infer it must be a Maybe[int] that you're after. In the general case, Either[int] could implement Maybe[float64], or Maybe[string], or any other Maybe[T] interface. In actual fact it only implements Maybe[int], but there's no direct link between the type parameters.
[02:02:43] <fizzie> ikke: Your example does work if the value is explicitly converted in the call, as in `TestMaybe(Maybe[int](v))`: https://gotipplay.golang.org/p/rmvINU_I3YW -- well, except for the `go vet` warning on the %d conversion.
[02:02:54] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[02:07:24] <ikke> Changing %d to %v fixes that
[02:07:44] <ikke> Trying to follow what you are saying
[02:08:54] <b0nn> it read to me that he's saying what that issue you posted says - interfaces method sets would need to be checked to be able to make the inference
[02:09:38] <fizzie> Oh, and of course it also works with explicit type parameters, by making the call `TestMaybe[int](v)`: https://gotipplay.golang.org/p/KziaKS4CoYd
[02:10:18] <ikke> oh, this works as well: TestMaybe[string](v)
[02:10:25] <ikke> heh
[02:10:33] <ikke> (I changed it to a string to test that)
[02:10:50] <ikke> Was just reading that part here: https://go.googlesource.com/proposal/+/refs/heads/master/design/43651-type-parameters.md
[02:11:21] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Ping timeout: 245 seconds)
[02:12:32] <ikke> https://gotipplay.golang.org/p/5-LOm0eRn9n
[02:13:03] <ikke> Does work that nice because None needs to implement the interface as well
[02:13:24] <fizzie> I feel like there should also be some way of making it work by using Maybe as a constraint for the parameter, rather than the type of the parameter, but couldn't quite figure that out. I mean, https://gotipplay.golang.org/p/hPbZrX5Jljy does work but also involves an explicit type parameter, it still can't infer T from the type of `v` otherwise.
[02:15:28] <fizzie> Note the subtle difference: in that construction, the type of parameter `m` in the function is actually Either[int] directly, not the interface type Maybe[T]. That's why it needs the conversion to interface{} for the type switch.
[02:18:08] <ikke> Not sure what we're gaining with that
[02:18:13] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[02:19:49] *** Joins: ahappydeath (~ahappydea@user/ahappydeath)
[02:20:00] <ikke> But that issue basically indicates it's atm required to specify the type
[02:20:31] <fizzie> Nothing, really. Well, it avoids converting to an interface value, which might have efficiency consequences. But nothing in terms of type inference convenience, anyway. Guess the problem's fundamentally the same, between Either[int] and Maybe[T].
[02:21:31] <LambdaComplex> question about some code i found in the wild: *b = (*b)[n:]
[02:21:34] <LambdaComplex> does that cause any reallocation?
[02:21:42] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 268 seconds)
[02:22:10] <fizzie> No, it just updates a slice.
[02:22:54] <LambdaComplex> so, under the hood, would that just be updating the length of b and moving its start address to n?
[02:23:00] <fizzie> And the cap.
[02:23:00] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[02:23:39] <seebs> if you try hard enough you can construct a program in which it causes an allocation
[02:23:55] <seebs> not directly, but by being the thing that nudges something over a complexity threshold and eliminates an inlining opportunity and [...]
[02:24:14] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 260 seconds)
[02:24:30] <fizzie> A slice is basically a (pointer, len, cap) tuple, and that expression has the effect of incrementing the pointer by n*S and decrementing len and cap by n (where S is the element size). But yeah, it may have other effects of that kind of course.
[02:24:50] <b0nn> hrm, would the cap be updated, I wouldn't have expected that until an append call
[02:25:03] <fizzie> It has to be updated if the start position is moved.
[02:25:07] <seebs> the cap has to be updated, because it has to be n lower
[02:25:17] <LambdaComplex> yeah, what they said
[02:25:32] <b0nn> ah yeah, the cap is the start to end of existing assigned memory
[02:25:33] <LambdaComplex> because part of the old capacity is now behind the start address
[02:26:15] *** Joins: fikran (~fikran@user/fikran)
[02:26:48] <b0nn> so it would be all 3 items, the len, the cap, and the pointer to the start of the backing array
[02:26:55] *** Quits: Jose_ (~Jose@2600:6c5e:157f:df79:f0a4:969c:c93d:b846) (Quit: Leaving)
[02:27:52] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 268 seconds)
[02:28:42] <b0nn> and, because it's a pointer to the slice struct, it's an update, not the creation of a new copy
[02:28:43] *** Parts: jla (~jordi@64.225.79.195) ()
[02:28:51] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[02:29:52] <fizzie> Kind of an asymmetric thing arguably that s[:len(s)-n] doesn't change the cap -- and you can reslice to get those elements back -- but s[n:] does "permanently" lose track of the discarded elements. (Even though AIUI the actual storage of those elements is not in fact ever GC'd as long as that slice holds a reference into some chunk of the same backing array. Or that's the impression I got from
[02:29:54] <fizzie> somewhere, anyway.)
[02:30:05] *** Joins: brainfreeze (~brainfree@2a03:1b20:4:f011::20d)
[02:30:45] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: ZzzZ)
[02:31:33] *** Quits: danmurf (uid480399@user/danmurf) (Quit: Connection closed for inactivity)
[02:33:23] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 264 seconds)
[02:34:57] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[02:35:47] <dostoyevsky2> Is there a way to define a new function for []string?  I am getting `invalid receiver type' https://play.golang.org/p/UabNARboSLy
[02:36:28] <b0nn> https://play.golang.org/p/cP-F-WrStf2
[02:36:51] <fizzie> That's a new method on `A`, though, not on `[]string`. (There's no way to do the latter.)
[02:37:03] <LambdaComplex> using = in a type definition is basically always the wrong choice
[02:37:21] <b0nn> composition is the elixer of the OO gods IMO
[02:37:54] <dostoyevsky2> Could I convert []string to A somehow?  I guess it would mean to iterate over the []string and create a new A
[02:38:04] <LambdaComplex> A(stringSlice)
[02:38:23] *** Joins: lauraaah (uid156848@ilkley.irccloud.com)
[02:38:41] <dostoyevsky2> https://play.golang.org/p/s_YB3EYxaDy
[02:38:43] <dostoyevsky2> cool!
[02:39:16] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 245 seconds)
[02:40:48] <LambdaComplex> do i dare ask what you intend the grep() method to do? :P
[02:40:50] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[02:41:11] *** Quits: ahappydeath (~ahappydea@user/ahappydeath) (Ping timeout: 264 seconds)
[02:41:15] <rawtaz> hm so this might be a sillly quesiton but if you have a function that returns (int, error), and you want to return an error, what do you return as value for the int?
[02:41:19] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[02:41:27] <LambdaComplex> rawtaz: probably 0
[02:41:28] <b0nn> zero value
[02:41:34] <b0nn> or int{}
[02:41:40] <b0nn> which is the same thing
[02:41:43] <rawtaz> ok. yeah
[02:41:54] <LambdaComplex> or be an asshole and return a random value because anyone who uses the int when err != nil deserves whatever happens :P
[02:43:44] <ikke> Until someone starts using it as a random number generator :P
[02:43:50] <dostoyevsky2> LambdaComplex: I have a []struct and wanted want to have bunch of only_that_particular_type to make my code more readable because right now I am iterating over that array all the time and there is a lot of redundant code... So it's nice that I can implement what in java is called "fluent interfaces"
[02:43:57] <b0nn> oh, int{} is invalid :\
[02:44:41] *** Quits: adip (~adip@aejc92.neoplus.adsl.tpnet.pl) (Ping timeout: 245 seconds)
[02:44:55] <b0nn> ikke: We used to say that all of our functions were really just RNGs dressed up as business logic :)
[02:44:55] <dostoyevsky2> I could just write a normal func without a receiver but that doesn't look very readable usually
[02:45:20] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 256 seconds)
[02:45:34] <ikke> b0nn: heh
[02:46:27] <b0nn> dostoyevsky2: if it's private and in your package it's normally clear
[02:46:40] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[02:47:06] <rawtaz> LambdaComplex: i like how you think :D
[02:50:56] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 245 seconds)
[02:52:15] *** Quits: mosen (~mosen@159-196-125-15.9fc47d.syd.static.aussiebb.net) (Quit: Textual IRC Client: www.textualapp.com)
[02:52:32] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[02:57:22] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 260 seconds)
[02:58:23] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[03:14:23] *** Quits: batdog (batdog@lnsq.elkins.co) (Quit: Bye)
[03:15:39] *** Joins: batdog (~batdog@lnsq.elkins.co)
[03:16:05] *** Joins: acohn (~acohn@wikipedia/alex-cohn)
[03:16:55] <rawtaz> TIL https://datatracker.ietf.org/doc/html/rfc7807 exists
[03:17:35] *** Quits: alexcohn (~acohn@wikipedia/alex-cohn) (Ping timeout: 246 seconds)
[03:17:38] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 256 seconds)
[03:31:04] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[03:33:37] *** Joins: Atque (~Atque@user/atque)
[03:34:07] *** Joins: ahappydeath (~ahappydea@user/ahappydeath)
[03:35:18] *** Quits: jsrnop6 (~mark@user/jsrnop) (Quit: The Lounge - https://thelounge.chat)
[03:35:42] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 268 seconds)
[03:35:45] *** Joins: jsrnop6 (~mark@user/jsrnop)
[03:37:25] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[03:38:10] *** Quits: monoxane (~monoxane@user/monoxane) (Remote host closed the connection)
[03:39:29] *** Joins: monoxane (~monoxane@user/monoxane)
[03:47:36] *** Quits: GJdan (~quassel@107-190-25-70.cpe.teksavvy.com) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[03:58:35] *** Quits: moog (~moog@107.126.53.9) (Ping timeout: 264 seconds)
[04:04:26] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[04:07:52] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: sdfgsdfg)
[04:23:56] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 256 seconds)
[04:25:37] <snappy> Can you use the embed/filesystem stuff to dynamically create a filesystem entry for some []byte data that gets determined at runtime instead of compile time?
[04:26:53] <snappy> Hm, maybe I'm misunderstanding what embed.FS actually does
[04:28:22] *** Quits: Seirdy (~Seirdy@sourcehut/user/seirdy) (Quit: exiting 3.2)
[04:29:01] *** Joins: Seirdy (~Seirdy@sourcehut/user/seirdy)
[04:31:35] <seebs> i believe embed.FS is specifically intended for compile-time embedding, and if you are doing it at runtime, that's not really the same use case.
[04:33:40] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 268 seconds)
[04:33:55] <snappy> Yeah I think I've confused myself. I have an API that wants a pathname to a file - but the service is started without files and goes out to an external store to get the data needed, so i was hoping i could create a virtual filesystem with an entry containing that data so i can pass a filename to the API.
[04:35:10] <snappy> It seems like bad API design to require a pathname only to read the file on your behalf.
[04:35:36] *** Joins: fikran (~fikran@user/fikran)
[04:36:13] <fizzie> The io.FS interface is the "virtual filesystem" interface for code that needs a filesystem but you want to abstract what kind it is.
[04:36:57] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[04:37:07] <fizzie> Er, I mean, io/fs.FS.
[04:37:20] <fizzie> But more generally things that don't necessarily need paths tend to take `io.Reader`s instead of filenames.
[04:41:30] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 256 seconds)
[04:42:39] *** Quits: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl) (Quit: jaca122)
[04:44:17] *** Quits: lilgopher (~textual@2601:241:8000:38f0:f03f:654:e769:8104) (Quit: Textual IRC Client: www.textualapp.com)
[04:44:25] *** Joins: mikey__ (~mikey__@user/mikey/x-6463285)
[04:46:02] *** Quits: predmijat (~predmijat@mail.strogopro.com) (Quit: bye)
[04:47:40] *** Joins: predmijat (~predmijat@mail.strogopro.com)
[04:49:48] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[04:50:29] *** Quits: lauraaah (uid156848@ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[04:54:32] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 256 seconds)
[05:00:11] *** Quits: X-Scale (~ARM@165.201.137.78.rev.vodafone.pt) (Ping timeout: 268 seconds)
[05:00:49] *** Joins: X-Scale` (~ARM@31.22.167.45)
[05:02:29] *** X-Scale` is now known as X-Scale
[05:06:48] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[05:07:36] *** Quits: krux02 (~krux02@p200300e8172958000e9c089d099881c9.dip0.t-ipconnect.de) (Remote host closed the connection)
[05:08:07] *** Joins: freakazoid12345 (~matt@2603-9000-cf0f-80e3-0c95-5e78-2621-2637.inf6.spectrum.com)
[05:09:31] *** Quits: freakazoid12345 (~matt@2603-9000-cf0f-80e3-0c95-5e78-2621-2637.inf6.spectrum.com) (Read error: Connection reset by peer)
[05:10:18] *** Joins: freakazoid12345 (~matt@2603:9000:cf0f:80e3:c95:5e78:2621:2637)
[05:11:00] *** Quits: freakazoid343 (~matt@2603:9000:cf0f:80e3:c95:5e78:2621:2637) (Ping timeout: 260 seconds)
[05:15:00] *** Joins: jezebel (jezebel@user/jezebel)
[05:16:42] *** Joins: Guest64 (~Guest64@2a00:23c5:e086:d200:f936:966a:a2b5:4f9a)
[05:17:00] *** Parts: Guest64 (~Guest64@2a00:23c5:e086:d200:f936:966a:a2b5:4f9a) ()
[05:17:40] *** Joins: jezebel19 (~jezebel@user/jezebel)
[05:18:06] *** Quits: jezebel (jezebel@user/jezebel) (Remote host closed the connection)
[05:18:24] *** jezebel19 is now known as jezebel
[05:18:48] *** Quits: Torr (~Torr@user/torr) (Quit: leaving)
[05:21:04] <jezebel> Am I misusing the golang:latest container on docker hub? The working dir is /go/src is owned by 1000:1000 and has a chmod of 0755, yet the default login is root? Is it not meant to be used as a development environment?
[05:25:06] <jezebel> Ahhh nm
[05:25:18] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 260 seconds)
[05:26:28] *** Quits: brainfreeze (~brainfree@2a03:1b20:4:f011::20d) (Quit: Leaving)
[05:27:50] *** Joins: pmcnabb (~pmcnabb@user/pmcnabb)
[05:37:28] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[05:42:07] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 268 seconds)
[05:46:46] *** Joins: nickj (~nickj@60-242-108-250.static.tpgi.com.au)
[05:48:22] *** Quits: ahappydeath (~ahappydea@user/ahappydeath) (Ping timeout: 256 seconds)
[05:50:17] *** Joins: mud (~mud@user/kadoban)
[05:53:26] *** Quits: normen (~normen@p200300d71723fa00342487cb2194a84a.dip0.t-ipconnect.de) (Ping timeout: 245 seconds)
[05:54:12] *** Joins: mosen (~mosen@159-196-125-15.9fc47d.syd.static.aussiebb.net)
[05:56:14] *** Joins: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com)
[06:08:11] *** Quits: jezebel (~jezebel@user/jezebel) (Quit: Client closed)
[06:10:56] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[06:11:31] *** Quits: kiril (~kiril@85.91.153.163) (Quit: ZNC - https://znc.in)
[06:13:51] *** Joins: normen (~normen@p200300d71723fa00342487cb2194a84a.dip0.t-ipconnect.de)
[06:14:30] *** Joins: kiril (~kiril@85.91.153.163)
[06:15:48] *** Quits: bindu (~bindu@user/bindu) (Ping timeout: 276 seconds)
[06:17:17] *** Joins: furincleavagesit (~textual@47.203.181.175)
[06:17:52] *** Joins: bindu (~bindu@user/bindu)
[06:19:45] *** Quits: normen (~normen@p200300d71723fa00342487cb2194a84a.dip0.t-ipconnect.de) (Ping timeout: 268 seconds)
[06:23:48] *** Quits: furincleavagesit (~textual@47.203.181.175) (Quit: Textual IRC Client: www.textualapp.com)
[06:29:36] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 268 seconds)
[06:31:02] *** Quits: zaz\ (~zaz@poneybl.eu) (Quit: bye)
[06:31:27] *** Joins: zaz\ (~zaz@poneybl.eu)
[06:33:13] *** Joins: frost (~frost@user/frost)
[06:34:45] *** Quits: lemonsni- (~lemonsnic@cpc159519-perr18-2-0-cust114.19-1.cable.virginm.net) (Quit: ZNC 1.8.2 - https://znc.in)
[06:36:40] *** Joins: normen (~normen@p200300d71723fa00342487cb2194a84a.dip0.t-ipconnect.de)
[06:41:40] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[06:43:14] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 260 seconds)
[06:44:57] *** Joins: fikran (~fikran@user/fikran)
[06:45:40] *** Joins: lemonsnicks (~lemonsnic@cpc159519-perr18-2-0-cust114.19-1.cable.virginm.net)
[06:46:29] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 265 seconds)
[06:46:51] *** Quits: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com) (Quit: Leaving)
[06:59:30] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[07:04:13] *** Quits: alzgh (~alzgh@user/alzgh) (Remote host closed the connection)
[07:12:01] *** Quits: JPT (~jpt@classified.name) (Quit: Hoppla!)
[07:18:21] *** Joins: JPT (~jpt@classified.name)
[07:18:23] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 264 seconds)
[07:18:50] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[07:23:19] *** Joins: gggp (~gggp@li2010-23.members.linode.com)
[07:23:34] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 256 seconds)
[07:24:41] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[07:29:14] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 256 seconds)
[07:30:31] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[07:31:51] *** Quits: pjs (~pjs@user/pjs) (Read error: Connection reset by peer)
[07:32:06] *** Joins: pjs (~pjs@user/pjs)
[07:34:41] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 245 seconds)
[07:43:22] *** Joins: Jad (~Nashmi@user/jad)
[07:47:36] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[07:49:44] *** Quits: gggp (~gggp@li2010-23.members.linode.com) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[07:52:28] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 256 seconds)
[08:03:54] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[08:06:40] *** Joins: bitreverb (~bitcycle@174-21-103-142.tukw.qwest.net)
[08:22:30] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 256 seconds)
[08:27:44] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[08:32:08] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 256 seconds)
[08:32:58] <icy> if i understand struct tags correctly, this should work, right? https://play.golang.org/p/x1deGv-zaF7
[08:33:10] <icy> unless there's some way to specify nested fields...
[08:36:22] <icy> ah, looks like i have to write a nested struct for this to work.
[08:37:37] *** Joins: sagax (~sagax_nb@user/sagax)
[08:42:32] *** Quits: Compy_ (~compy@user/compy) (Quit: Going offline, see ya! (www.adiirc.com))
[08:45:58] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[08:46:36] *** Quits: veegee (~veegee@ipagstaticip-469c2903-2b07-6dc3-3bc2-98748da5ca77.sdsl.bell.ca) (Ping timeout: 260 seconds)
[08:50:49] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 268 seconds)
[08:51:37] *** Joins: jpw (~jpw@user/jpw)
[08:52:32] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 256 seconds)
[08:54:17] *** Joins: fikran (~fikran@user/fikran)
[08:56:52] *** Quits: nickj (~nickj@60-242-108-250.static.tpgi.com.au) ()
[09:02:19] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[09:04:40] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[09:07:07] *** Joins: sylvain31 (~sylvain@2a01:e0a:19b:d670:382e:5e57:d68e:e14)
[09:09:59] *** Quits: analoq (~yashi@user/dies) (Ping timeout: 264 seconds)
[09:11:42] *** Joins: analoq (~yashi@user/dies)
[09:12:20] <sylvain31> hi, I've copied a part of some remote code in my local go code. Now I get some compile errors: https://paste.gnome.org/ph9nihrvi how do I make the compiler happy? I would like to hack in the part of the code without copying all the code. Is there some cast feature to make the interface compatible?
[09:14:08] <b0nn> his type  *lexer_state.stateLexer does not have a method Lex(io.Reader) the RETURNS ("github.com/alecthomas/participle/lexer".Lexer, error)
[09:14:15] <b0nn> thie type*
[09:14:23] <b0nn> ugh this*
[09:14:53] <b0nn> the current Lex(io.Reader) on that type returns ("github.com/docopt/docopts/grammar/lexer".Lexer, error)
[09:15:14] <b0nn> so, most likely, the imports for that file where that is defined is wrong
[09:18:58] *** Joins: veegee (~veegee@ipagstaticip-469c2903-2b07-6dc3-3bc2-98748da5ca77.sdsl.bell.ca)
[09:21:02] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 268 seconds)
[09:22:43] *** Joins: aniruddha (uid340443@ilkley.irccloud.com)
[09:23:13] <b0nn> or the interface is mis-defined
[09:23:18] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[09:25:24] *** Quits: sudoforge (~sudoforge@wireguard/tunneler/sudoforge) (Ping timeout: 256 seconds)
[09:27:58] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 260 seconds)
[09:31:47] <sylvain31> b0nn: basically I want to add a new field in the structure Token to store more information. https://github.com/alecthomas/participle/blob/v0/lexer/lexer.go#L101 I though it could be accomplished by copying the minimal file and redefining the struct. but it happens that the resulting is not the name type seen by the complier.
[09:32:08] *** Joins: gggp (~gggp@li2010-23.members.linode.com)
[09:33:03] *** Quits: gggp (~gggp@li2010-23.members.linode.com) (Client Quit)
[09:34:41] *** Joins: gggp (~gggp@li2010-23.members.linode.com)
[09:34:50] <sylvain31> can I do some conversion to not copying the whole code, just the lexer? Or returning a modified Token struct but still compatible with the rest of the code?
[09:34:54] *** Quits: gggp (~gggp@li2010-23.members.linode.com) (Client Quit)
[09:36:01] <b0nn> I, honestly, am a lot confused on what you have, and what you are trying to do
[09:41:13] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[09:44:47] *** Quits: fling (~fling@user/fling) (Ping timeout: 264 seconds)
[09:45:42] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 260 seconds)
[09:48:40] *** darkapex_ is now known as darkapex
[09:52:21] <bitreverb> icy: yeah, that didn't work exactly.  Here's a working version:  https://play.golang.org/p/9uK340ZQtpk
[09:55:26] *** Quits: bindu (~bindu@user/bindu) (Quit: Leaving)
[09:55:32] <sylvain31> b0nn: no problem, I will read more about how to convert struct and/or the embed a struct into another and also how to implement interface. When I will have an smaller code to share I will come back, if I still have question. ;-)
[09:55:53] *** Joins: bindu (~bindu@user/bindu)
[09:58:13] *** Joins: leonthemisfit (~Leon@176.sub-174-198-207.myvzw.com)
[09:58:13] *** Quits: leonthemisfit (~Leon@176.sub-174-198-207.myvzw.com) (Changing host)
[09:58:13] *** Joins: leonthemisfit (~Leon@user/leonthemisfit)
[10:00:35] *** Quits: Guest5524 (~Leon@132.sub-174-198-211.myvzw.com) (Ping timeout: 250 seconds)
[10:01:50] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[10:03:09] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[10:05:41] *** Joins: shka (~herr@83.175.151.96.piasta.pl)
[10:13:04] *** Joins: gggp (~gggp@li2010-23.members.linode.com)
[10:14:22] *** Quits: gggp (~gggp@li2010-23.members.linode.com) (Client Quit)
[10:17:59] *** Parts: mikey__ (~mikey__@user/mikey/x-6463285) (WeeChat 3.3)
[10:18:22] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 260 seconds)
[10:26:16] *** Joins: Leon_ (~Leon@176.sub-174-198-207.myvzw.com)
[10:26:40] *** Leon_ is now known as Guest6873
[10:28:39] *** Quits: wim (~wim@42.be) (*.net *.split)
[10:28:39] *** Quits: baakeydow (~baake@163.172.145.178) (*.net *.split)
[10:28:39] *** Quits: Rhvs (~Rhys@help.lux.melted.me) (*.net *.split)
[10:28:39] *** Quits: PedroG1 (~android@45.77.216.181) (*.net *.split)
[10:28:39] *** Quits: seanBE (~seanBE@ec2-34-243-193-160.eu-west-1.compute.amazonaws.com) (*.net *.split)
[10:28:39] *** Quits: RayS (~raysl@sdf1.xen.prgmr.com) (*.net *.split)
[10:28:39] *** Quits: jsanford (~jsanford@user/jsanford) (*.net *.split)
[10:28:39] *** Quits: lux0r (~lux0r@65.56.68.34.bc.googleusercontent.com) (*.net *.split)
[10:28:39] *** Quits: Jmainguy (~Jmainguy@phy01.standouthost.com) (*.net *.split)
[10:28:39] *** Quits: snappy (~snappy@user/snappy) (*.net *.split)
[10:28:39] *** Quits: vhost- (~vhost@user/vhost-) (*.net *.split)
[10:28:39] *** Quits: jolan (~jolan@ec2.jolan.org) (*.net *.split)
[10:28:39] *** Quits: deniska (~denis@user/deniska) (*.net *.split)
[10:28:39] *** Quits: Byteflux (~byte@byteflux.net) (*.net *.split)
[10:28:39] *** Quits: eti (~eti@2a07:abc4::1:26e) (*.net *.split)
[10:28:39] *** Quits: espero (~espero@ucitelonline.pedf.cuni.cz) (*.net *.split)
[10:28:39] *** Quits: nj (nicholas@stop.disconnecting.me) (*.net *.split)
[10:28:39] *** Quits: Fish (~Fish@cartwheel.9grid.fr) (*.net *.split)
[10:28:39] *** Quits: paruh (~paruh@92.60.39.18) (*.net *.split)
[10:28:39] *** Quits: asm (~alexander@user/asm) (*.net *.split)
[10:28:40] *** Quits: sshow (~sshow@neo.hackeriet.no) (*.net *.split)
[10:28:40] *** Quits: dtman34 (~dtman34@c-73-62-246-247.hsd1.mn.comcast.net) (*.net *.split)
[10:28:40] *** Quits: nekron (~nekron@noordsee.de) (*.net *.split)
[10:28:40] *** Quits: Sam (b8f15a4bbd@golang/sam) (*.net *.split)
[10:28:40] *** Quits: cync (~blah@192.180.187.81.in-addr.arpa) (*.net *.split)
[10:28:40] *** Quits: rlankfo (~bob@bob.4kb.com) (*.net *.split)
[10:28:40] *** Quits: noonien (~noonien@user/noonien) (*.net *.split)
[10:28:40] *** Quits: jiqiren (~jiqiren@oh-hi.org) (*.net *.split)
[10:28:40] *** Quits: avemestr (~avemestr@2a01:4f8:212:2719::2) (*.net *.split)
[10:28:40] *** Quits: fizzie (irc@selene.zem.fi) (*.net *.split)
[10:28:46] *** Joins: nj (nicholas@stop.disconnecting.me)
[10:28:47] *** Joins: PedroG1 (~android@45.77.216.181)
[10:28:47] *** Joins: jsanford (~jsanford@lax.froop.com)
[10:28:49] *** Joins: jiqiren (~jiqiren@oh-hi.org)
[10:28:50] *** Joins: deniska (~denis@user/deniska)
[10:28:51] *** Joins: rlankfo (~bob@bob.4kb.com)
[10:28:51] *** Joins: cync (~blah@192.180.187.81.in-addr.arpa)
[10:28:54] *** Joins: sshow (~sshow@neo.hackeriet.no)
[10:28:54] *** Joins: Rhvs (Rhys@help.lux.melted.me)
[10:28:55] *** Joins: Jmainguy (~Jmainguy@phy01.standouthost.com)
[10:28:55] *** Quits: jsanford (~jsanford@lax.froop.com) (Changing host)
[10:28:55] *** Joins: jsanford (~jsanford@user/jsanford)
[10:28:56] *** Joins: vhost- (~vhost@65.102.48.134)
[10:29:04] *** Joins: asm (~alexander@burner.asm89.io)
[10:29:05] *** Joins: jolan (~jolan@ec2.jolan.org)
[10:29:11] *** Joins: snappy (~snappy@45.32.228.130)
[10:29:16] *** Quits: leonthemisfit (~Leon@user/leonthemisfit) (Ping timeout: 245 seconds)
[10:29:17] *** Joins: avemestr (~avemestr@2a01:4f8:212:2719::2)
[10:29:20] *** Quits: snappy (~snappy@45.32.228.130) (Signing in (snappy))
[10:29:20] *** Joins: snappy (~snappy@user/snappy)
[10:29:20] *** Joins: Fish (~Fish@cartwheel.9grid.fr)
[10:29:22] *** Joins: Byteflux (~byte@byteflux.net)
[10:29:22] *** Joins: eti (~eti@89.234.183.156)
[10:29:22] *** Joins: baakeydow (~baake@2001:bc8:65c:2601::1)
[10:29:25] *** Joins: noonien (~noonien@user/noonien)
[10:29:27] *** Joins: seanBE (~seanBE@ec2-34-243-193-160.eu-west-1.compute.amazonaws.com)
[10:29:38] *** Joins: RayS (~raysl@sdf1.xen.prgmr.com)
[10:29:40] *** Joins: fizzie (irc@selene.zem.fi)
[10:29:43] *** Joins: dtman34 (~dtman34@c-73-62-246-247.hsd1.mn.comcast.net)
[10:29:45] *** Joins: nekron (~nekron@noordsee.de)
[10:29:46] *** Joins: lux0r (~lux0r@65.56.68.34.bc.googleusercontent.com)
[10:29:51] *** Joins: espero (~espero@ucitelonline.pedf.cuni.cz)
[10:30:01] *** Joins: paruh (~paruh@92.60.39.18)
[10:30:51] *** Joins: wim (~wim@42.be)
[10:31:04] *** Quits: snappy (~snappy@user/snappy) (Client Quit)
[10:31:17] *** Joins: snappy (~snappy@user/snappy)
[10:31:49] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[10:34:22] *** Quits: jay_wild (~very@138.68.15.221) (*.net *.split)
[10:34:22] *** Quits: albertito (~nil@37.228.204.251) (*.net *.split)
[10:34:22] *** Quits: jesk (~jesk@stakka.errxtx.net) (*.net *.split)
[10:34:22] *** Quits: crowbar (~crowbar@user/crowbar) (*.net *.split)
[10:34:22] *** Quits: riverdc (river@2600:3c01::f03c:92ff:fed1:4643) (*.net *.split)
[10:34:23] *** Quits: xMopx (~xMopx-lib@192.95.23.134) (*.net *.split)
[10:34:23] *** Quits: mgubyt (u@mgub.yt) (*.net *.split)
[10:34:23] *** Quits: averell (~averell@user/averell) (*.net *.split)
[10:34:23] *** Quits: Daneel (~Daneel@15.ip-54-37-159.eu) (*.net *.split)
[10:34:23] *** Quits: ziofork (~ziofork@fr.worn.eu) (*.net *.split)
[10:34:23] *** Quits: DaGo (~dago@85.ip-37-59-103.eu) (*.net *.split)
[10:34:23] *** Quits: tpr (~tpr@user/tpr) (*.net *.split)
[10:34:23] *** Quits: pez (~pez@user/pez) (*.net *.split)
[10:34:23] *** Quits: earthbreaker (earthbreak@2600:3c03::f03c:91ff:fece:9070) (*.net *.split)
[10:34:29] *** Joins: jesk (~jesk@stakka.errxtx.net)
[10:34:34] *** Joins: jay_wild (~very@138.68.15.221)
[10:34:35] *** Joins: albertito (~nil@37.228.204.251)
[10:34:35] *** Joins: Daneel (~Daneel@15.ip-54-37-159.eu)
[10:34:38] *** Joins: averell (~averell@user/averell)
[10:34:39] *** Joins: mgubyt (u@mgub.yt)
[10:34:40] *** Joins: DaGo (~dago@85.ip-37-59-103.eu)
[10:34:44] *** Joins: pez (~pez@user/pez)
[10:34:46] *** Joins: riverdc (river@2600:3c01::f03c:92ff:fed1:4643)
[10:34:47] *** Joins: earthbre- (~earthbrea@li778-229.members.linode.com)
[10:34:48] *** Joins: crowbar (~crowbar@user/crowbar)
[10:34:48] *** Joins: ziofork (~ziofork@fr.worn.eu)
[10:35:10] *** Joins: xMopx (~xMopx-lib@192.95.23.134)
[10:35:27] *** Joins: tpr (~tpr@user/tpr)
[10:35:31] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[10:36:23] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 265 seconds)
[10:39:12] *** Joins: ajfriesen9 (~ajfriesen@cable-78-35-98-50.nc.de)
[10:40:18] *** Quits: ajfriesen (~ajfriesen@cable-78-35-98-50.nc.de) (Ping timeout: 260 seconds)
[10:40:18] *** ajfriesen9 is now known as ajfriesen
[10:48:26] *** Quits: sagax (~sagax_nb@user/sagax) (Read error: Connection reset by peer)
[10:48:50] *** Joins: mrig (~AdiIRC@user/mrig)
[10:49:29] *** Joins: AndyH (~andyh@cpc160881-lutn15-2-0-cust237.9-3.cable.virginm.net)
[10:50:01] *** Quits: AndyH (~andyh@cpc160881-lutn15-2-0-cust237.9-3.cable.virginm.net) (Client Quit)
[10:51:32] *** Quits: bitreverb (~bitcycle@174-21-103-142.tukw.qwest.net) (Ping timeout: 256 seconds)
[10:52:03] *** Quits: jpw (~jpw@user/jpw) (Remote host closed the connection)
[10:53:11] *** Quits: rcernin (~rcernin@124.190.139.235) (Ping timeout: 264 seconds)
[10:53:16] *** Joins: gggp (~gggp@li2010-23.members.linode.com)
[10:53:35] *** Joins: csknk (~csknk@88.87.164.26)
[10:53:50] *** Quits: gggp (~gggp@li2010-23.members.linode.com) (Client Quit)
[10:55:03] *** Joins: jla (~jordi@64.225.79.195)
[10:57:56] *** Joins: bitreverb (~bitcycle@174-21-103-142.tukw.qwest.net)
[10:58:06] *** Quits: bitreverb (~bitcycle@174-21-103-142.tukw.qwest.net) (Client Quit)
[10:58:47] *** Joins: gggp (~gggp@li2010-23.members.linode.com)
[11:01:22] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[11:01:46] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 260 seconds)
[11:02:45] *** Quits: gggp (~gggp@li2010-23.members.linode.com) (Client Quit)
[11:03:39] *** Joins: fikran (~fikran@user/fikran)
[11:04:43] *** Joins: sagax (~sagax_nb@user/sagax)
[11:05:44] *** Quits: mrig (~AdiIRC@user/mrig) (Remote host closed the connection)
[11:05:58] *** Joins: mrig (~AdiIRC@user/mrig)
[11:08:23] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[11:11:29] *** Joins: saschagrunert (~saschagru@46.128.124.46)
[11:14:16] *** Joins: rcernin (~rcernin@124.190.139.235)
[11:14:55] *** Quits: carlavilla (~carlavill@2a0c:5a84:3607:2f00:221:6bff:fe3b:cee4) (Remote host closed the connection)
[11:14:56] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[11:15:14] *** Quits: d4ve (~d4ve@user/d4ve) (Remote host closed the connection)
[11:15:43] *** Joins: d4ve (~d4ve@user/d4ve)
[11:17:43] *** Quits: Jad (~Nashmi@user/jad) (Remote host closed the connection)
[11:20:52] *** Quits: dsrt^ (~dsrt@h50.174.139.63.static.ip.windstream.net) (Remote host closed the connection)
[11:23:50] *** Quits: rcernin (~rcernin@124.190.139.235) (Ping timeout: 256 seconds)
[11:29:04] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 265 seconds)
[11:29:36] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[11:34:02] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 256 seconds)
[11:40:44] *** Joins: adip (~adip@aejc92.neoplus.adsl.tpnet.pl)
[11:43:22] *** Joins: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl)
[11:48:03] *** Joins: jcajka (~jcajka@89-24-144-111.customers.tmcz.cz)
[11:48:49] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[11:49:44] *** Joins: theoceaniscool (~theoceani@119.12.232.133)
[11:50:11] *** Quits: shka (~herr@83.175.151.96.piasta.pl) (Ping timeout: 264 seconds)
[11:50:20] *** Quits: mrig (~AdiIRC@user/mrig) (Read error: Connection reset by peer)
[11:50:34] *** Joins: mrig (~AdiIRC@user/mrig)
[11:53:29] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 250 seconds)
[11:57:34] *** Quits: saschagrunert (~saschagru@46.128.124.46) (Remote host closed the connection)
[11:58:17] *** Quits: normen (~normen@p200300d71723fa00342487cb2194a84a.dip0.t-ipconnect.de) (Ping timeout: 268 seconds)
[11:58:18] *** Joins: saschagrunert (~saschagru@46.128.124.46)
[12:06:40] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[12:08:07] *** Quits: Xjs (~jannis@user/xjs) (Quit: Bye.)
[12:08:30] *** Joins: Xjs (~jannis@user/xjs)
[12:09:05] *** Quits: girafe2 (~girafe@176-147-142-235.abo.bbox.fr) (Read error: Connection reset by peer)
[12:13:41] *** Joins: neurocyte0132889 (~neurocyte@94.16.67.223)
[12:13:42] *** Quits: neurocyte0132889 (~neurocyte@94.16.67.223) (Changing host)
[12:13:42] *** Joins: neurocyte0132889 (~neurocyte@user/neurocyte)
[12:13:46] *** Joins: normen (~normen@p54b35554.dip0.t-ipconnect.de)
[12:16:10] *** Joins: AquaL1te (~AquaL1te@user/aqual1te)
[12:24:10] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 265 seconds)
[12:26:07] *** Quits: neurocyte0132889 (~neurocyte@user/neurocyte) (Read error: Connection reset by peer)
[12:26:47] *** Joins: neurocyte0132889 (~neurocyte@94.16.67.223)
[12:26:47] *** Quits: neurocyte0132889 (~neurocyte@94.16.67.223) (Changing host)
[12:26:47] *** Joins: neurocyte0132889 (~neurocyte@user/neurocyte)
[12:30:17] *** Joins: rogersm (~rogersm@90.166.177.48)
[12:36:48] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[12:38:21] *** Quits: rogersm (~rogersm@90.166.177.48) (Read error: Connection reset by peer)
[12:38:22] *** Joins: __alex (~alex@ip5f5afef3.dynamic.kabel-deutschland.de)
[12:41:09] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 250 seconds)
[12:46:18] *** Joins: prologic (~prologic@mail.mills.io)
[12:46:26] <prologic> Can anyone help me with this? https://gist.github.com/prologic/40b8345e50323449fb5d1ca47318dc04
[12:46:37] <prologic> I don't get why this is complaining about the undefined variable, it's there there!
[12:46:49] <riv> panic: template: 401:150: undefined variable "$rootTwt"
[12:46:52] <riv> which line is 401?
[12:48:19] *** Quits: neurocyte0132889 (~neurocyte@user/neurocyte) (Quit: The Lounge - https://thelounge.chat)
[12:49:46] <prologic> Good question, I don't actually know
[12:49:50] <prologic> Because I split my templates up
[12:50:02] <prologic> So the line numbers are never helpful :/
[12:54:01] *** Joins: tofran7 (~tofran@37.189.158.134)
[12:55:38] *** Quits: tofran (~tofran@37.189.158.134) (Ping timeout: 268 seconds)
[12:55:39] *** tofran7 is now known as tofran
[12:57:51] <prologic> Found it!
[13:02:22] *** Quits: jackneilll (~jackneill@86FF47D8.dsl.pool.telekom.hu) (Read error: Connection reset by peer)
[13:02:35] *** Joins: jackneill (~jackneill@20014C4E181AEC002C291CD9283DEA90.dsl.pool.telekom.hu)
[13:02:40] *** Joins: fling (~fling@user/fling)
[13:10:50] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[13:10:56] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 256 seconds)
[13:12:32] <ikke> What was the issue?
[13:12:38] *** Quits: sylvain31 (~sylvain@2a01:e0a:19b:d670:382e:5e57:d68e:e14) (Quit: Leaving)
[13:12:59] *** Joins: fikran (~fikran@user/fikran)
[13:30:07] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 250 seconds)
[13:37:26] <prologic> I messed up the control structures
[13:37:26] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[13:37:36] <prologic> I actually did have $rootTwt referenced outside the blcok
[13:37:39] <prologic> Just didn't spot it :/
[13:41:04] *** Joins: krux02 (~krux02@194.8.199.29)
[13:43:38] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[13:48:27] *** Joins: dfip^ (~dfip@h50.174.139.63.static.ip.windstream.net)
[13:48:41] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 268 seconds)
[13:51:31] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[13:56:16] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[14:00:53] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 250 seconds)
[14:14:21] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[14:15:21] *** Joins: gggp (~gggp@li2010-23.members.linode.com)
[14:20:19] *** Joins: neurocyte0132889 (~neurocyte@94.16.67.223)
[14:20:19] *** Quits: neurocyte0132889 (~neurocyte@94.16.67.223) (Changing host)
[14:20:19] *** Joins: neurocyte0132889 (~neurocyte@user/neurocyte)
[14:31:45] *** Quits: DM430784214 (~DM4307@c-73-15-244-129.hsd1.ca.comcast.net) (Quit: The Lounge - https://thelounge.chat)
[14:32:44] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 265 seconds)
[14:33:54] *** Quits: gggp (~gggp@li2010-23.members.linode.com) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[14:34:42] *** Joins: gggp (~gggp@li2010-23.members.linode.com)
[14:35:41] *** Quits: gggp (~gggp@li2010-23.members.linode.com) (Client Quit)
[14:39:12] *** Quits: neurocyte0132889 (~neurocyte@user/neurocyte) (Quit: The Lounge - https://thelounge.chat)
[14:42:02] *** Joins: neurocyte0132889 (~neurocyte@94.16.67.223)
[14:42:02] *** Quits: neurocyte0132889 (~neurocyte@94.16.67.223) (Changing host)
[14:42:02] *** Joins: neurocyte0132889 (~neurocyte@user/neurocyte)
[14:44:34] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[14:48:07] *** Quits: AquaL1te (~AquaL1te@user/aqual1te) (Ping timeout: 250 seconds)
[14:51:00] *** Joins: DM430784214 (~DM4307@c-73-15-244-129.hsd1.ca.comcast.net)
[14:51:06] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 265 seconds)
[14:55:58] *** Quits: loggingbot (~loggingbo@user/loggingbot) (Ping timeout: 260 seconds)
[14:57:08] *** Quits: b0nn (~shane@user/b0nn) (Ping timeout: 268 seconds)
[15:02:08] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[15:02:55] *** Joins: b0nn (~shane@user/b0nn)
[15:04:51] *** Joins: llorllale (~llorllale@2607:9880:3a18:69:301e:cfcd:47ee:8af2)
[15:09:53] *** Joins: loggingbot (~loggingbo@user/loggingbot)
[15:20:11] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 250 seconds)
[15:20:34] *** Quits: lofiguy (~lofiguy@87-207-104-205.dynamic.chello.pl) (Remote host closed the connection)
[15:20:37] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 250 seconds)
[15:22:20] *** Joins: fikran (~fikran@user/fikran)
[15:25:35] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Ping timeout: 264 seconds)
[15:27:59] *** Joins: lofiguy (~lofiguy@87-207-104-205.dynamic.chello.pl)
[15:29:11] *** Joins: AquaL1te (~AquaL1te@user/aqual1te)
[15:31:13] *** Quits: csknk (~csknk@88.87.164.26) (Ping timeout: 265 seconds)
[15:32:30] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[15:37:08] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 256 seconds)
[15:37:44] *** Joins: neiluj (~neiluj@45.106.204.77.rev.sfr.net)
[15:38:35] <neiluj> Hello! Trying to implement a peer-to-peer protocol. The idea is to have an goroutine which receives incoming messages, and put them in an incoming messages pool for other functions to look at. The incoming messages pool should be garbage collected.
[15:38:51] <neiluj> Does that sound like a natural way to program this in Go?
[15:41:42] <bpalmer> what does it mean to put them in a pool?
[15:43:00] <neiluj> To store incoming messages in a cache, for instance in a list for later retrieval.
[15:44:11] <rawtaz> why is there a need for the  [T any]  part in  func Print[T any](s []T) {  ? i mean, why isnt it just e.g.  func Print(s []any) {  (any being a reserved keyword of course)?
[15:45:24] *** Joins: kupi (uid212005@hampstead.irccloud.com)
[15:49:56] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[15:54:04] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[15:54:42] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 256 seconds)
[15:56:12] <ikke> "With this approach, the first decision to make is: how should the type parameter T be declared? In a language like Go, we expect every identifier to be declared in some way."
[15:56:15] <ikke> https://go.googlesource.com/proposal/+/refs/heads/master/design/43651-type-parameters.md
[15:57:03] <ikke> "Here we make a design decision: type parameters are similar to ordinary non-type function parameters, and as such should be listed along with other parameters. However, type parameters are not the same as non-type parameters, so although they appear in the list of parameters we want to distinguish them."
[15:57:44] <ikke> rawtaz: note that any is not a type
[15:58:04] <siXy> neiluj: "incoming messages pool" sounds like it should be a channel.
[15:58:08] <rawtaz> but it could have been a keyword representing the generic type, im thinking. obviously they did what they did for $resons
[15:58:18] <rawtaz> reasons*
[15:58:27] <ikke> rawtaz: The idea is that everywhere you use T, it will have to be the same type
[15:59:16] *** Quits: markkuit (~markkuit@93-43-234-84.ip94.fastwebnet.it) (Quit: marqquit)
[15:59:29] <ikke> Any acts as a type constraint, not a type
[15:59:49] *** Joins: Atque (~Atque@user/atque)
[16:00:20] <ikke> In your proposal, it would be: func Foo(s []any) any { }
[16:00:36] <ikke> It's unspecified whether the return value has to be the same type as the type you passed
[16:00:47] <ikke> It could accept a bool and return a string
[16:00:48] *** Quits: bindu (~bindu@user/bindu) (Ping timeout: 276 seconds)
[16:01:24] <ikke> With func Foo[T any](s []T) T { }, the type you pass and the type that is returned have to be the same
[16:01:48] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[16:01:55] <fizzie> `any` is just a short word for `interface{}`.
[16:02:07] <ikke> fizzie: afaik the serve different purposes
[16:02:08] <neiluj> siXy: thanks, that's very useful as a callback mechanism!
[16:02:24] <fizzie> ikke: Now that https://github.com/golang/go/issues/33232 got accepted, it's literally that even outside type constraints.
[16:02:35] <fizzie> Well, going to be, rather.
[16:02:39] *** Joins: markkuit (~markkuit@93-43-234-84.ip94.fastwebnet.it)
[16:03:02] <siXy> the syntax is also quite similar to several other languages - e.g. c++ templates look fairly similar (<> instead of [], but still), which is nice.
[16:03:15] <ikke> fizzie: oh, that's contrary to what the proposal lists
[16:03:34] <ikke> fizzie: though, it does link to that issue
[16:04:27] <rawtaz> is the [..] syntax after the function name used for something else as well, besides generics?
[16:04:47] <fizzie> I think it makes sense insofar that other interfaces with methods can also be used both as constraints and non-constraints.
[16:04:47] <ikke> No, that's the idea
[16:04:57] <ikke> because it's not used, it's safe to use for generics
[16:05:05] <ikke> without leading to ambiguity
[16:05:30] <ikke> fizzie: right
[16:06:57] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[16:19:17] *** Quits: neurocyte0132889 (~neurocyte@user/neurocyte) (Quit: The Lounge - https://thelounge.chat)
[16:19:33] *** Quits: AquaL1te (~AquaL1te@user/aqual1te) (Ping timeout: 250 seconds)
[16:20:04] *** Joins: neurocyte0132889 (~neurocyte@94.16.67.223)
[16:20:04] *** Quits: neurocyte0132889 (~neurocyte@94.16.67.223) (Changing host)
[16:20:04] *** Joins: neurocyte0132889 (~neurocyte@user/neurocyte)
[16:23:46] *** Quits: neiluj (~neiluj@45.106.204.77.rev.sfr.net) (Quit: WeeChat 3.1)
[16:25:38] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 260 seconds)
[16:37:09] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[16:39:39] *** Quits: markkuit (~markkuit@93-43-234-84.ip94.fastwebnet.it) (Read error: Connection reset by peer)
[16:41:39] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 250 seconds)
[16:41:54] *** Joins: markkuit (~markkuit@93-43-234-84.ip94.fastwebnet.it)
[16:42:04] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[16:42:06] *** Joins: alzgh (~alzgh@user/alzgh)
[16:42:31] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[16:43:30] *** Joins: leitz (~LeamHall@cpe-173-172-58-72.tx.res.rr.com)
[16:44:25] <leitz> Is the best way to determine if a file/dir exists to use os.Stat and look for errors? This is what I found on the web:   if _,err := os.Stat(taskfilename); errors.Is(err, fs.ErrNotExist){
[16:44:41] <ikke> yes
[16:45:13] *** Joins: noord (~noord@user/noord)
[16:45:59] *** Joins: gggp (~gggp@li2010-23.members.linode.com)
[16:46:12] *** Joins: pepee (~pepee@user/pepee)
[16:46:29] *** Joins: paulgrmn_ (~paulgrmn@user/paulgrmn)
[16:50:00] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Remote host closed the connection)
[16:50:03] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[16:50:27] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[16:51:27] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Remote host closed the connection)
[16:51:29] *** Joins: mrozitron (~k@83.0.41.75.internetdsl.tpnet.pl)
[16:51:36] *** Quits: gggp (~gggp@li2010-23.members.linode.com) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[16:51:48] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[16:53:48] *** Quits: noord (~noord@user/noord) (Quit: noord)
[16:54:49] <fizzie> I feel like there was an official comment somewhere that says the reason why there's no dedicated check for existence is because most of the time it's just a bad idea, and inherently TOCTTOU-racy to boot.
[16:55:45] *** Joins: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com)
[16:56:49] *** Joins: csknk (~csknk@88.87.164.26)
[16:59:02] *** Quits: markkuit (~markkuit@93-43-234-84.ip94.fastwebnet.it) (Quit: marqquit)
[16:59:43] *** Joins: noord (~noord@user/noord)
[17:01:30] <siXy> leitz: if it's a specific thing you're searching for, yes. If you just want some temporary storage that's not currently in use, there are better ways.
[17:01:40] *** Joins: markkuit (~markkuit@93-43-234-84.ip94.fastwebnet.it)
[17:04:14] *** Quits: frost (~frost@user/frost) (Quit: Connection closed)
[17:08:02] <icy> how can i print irc escapes using fmt.Printf?
[17:08:59] <icy> ah nvm, i was using raw strings
[17:09:03] <icy> which ignored my escapes, heh
[17:12:34] *** Joins: Ergo^ (~ergo@91.238.59.144)
[17:18:31] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 265 seconds)
[17:21:19] *** Quits: jla (~jordi@64.225.79.195) (Quit: Leaving.)
[17:25:59] <rawtaz> wohoo! \o/
[17:26:17] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Ping timeout: 250 seconds)
[17:26:36] <rawtaz> i was just finishing a paste where i summed up a problem i had. and while looking at a piece of code in the library i was referencing i realized what i was doing wrong. so problem solved :D
[17:26:41] <leitz> siXy, more the "make sure the file path is valid before trying to use it".
[17:26:58] <leitz> rawtaz, welcome to my world.   :)
[17:26:59] <siXy> leitz: *nod* then yeah, that's about as good as you're gonna get
[17:27:49] <siXy> leitz: However... you're still going to need to check for that at time of use, as it might go away in the meantime. So the check might end up being a bit redundant.
[17:27:50] <rawtaz> leitz: haha
[17:28:14] <ikke> rubber ducking
[17:28:39] <ikke> trying to explain a problem makes you think about it deeper and sometimes you just realize the mistake
[17:29:37] <rawtaz> yeah
[17:30:03] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 268 seconds)
[17:30:12] *** Quits: lew (~lew@2a07:abc4::1:26e) (Ping timeout: 260 seconds)
[17:31:15] *** Quits: eti (~eti@89.234.183.156) (Ping timeout: 265 seconds)
[17:31:41] *** Joins: fikran (~fikran@user/fikran)
[17:33:10] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[17:33:28] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[17:36:28] *** Joins: bindu (~bindu@user/bindu)
[17:36:43] *** Joins: eti (~eti@2a07:abc4::1:26e)
[17:37:12] *** Joins: lew (~lew@2a07:abc4::1:26e)
[17:47:56] *** Joins: FunnyLookinHat (~FunnyLook@64.184.172.137)
[17:50:33] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Ping timeout: 250 seconds)
[18:03:47] *** Quits: bindu (~bindu@user/bindu) (Remote host closed the connection)
[18:04:29] *** Joins: bindu (~bindu@user/bindu)
[18:04:34] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[18:14:47] *** Joins: jespada (~jespada@252-155-231-201.fibertel.com.ar)
[18:22:48] *** Joins: Atque (~Atque@user/atque)
[18:24:50] *** Joins: tyson2 (~user@cpe688f2ec1f9b3-cm688f2ec1f9b0.cpe.net.cable.rogers.com)
[18:25:38] *** Joins: Maxattax (~max@50-195-160-193-static.hfc.comcastbusiness.net)
[18:37:21] *** Quits: alzgh (~alzgh@user/alzgh) (Remote host closed the connection)
[18:42:02] *** Quits: jespada (~jespada@252-155-231-201.fibertel.com.ar) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[18:43:51] *** Quits: Ergo^ (~ergo@91.238.59.144) (Remote host closed the connection)
[18:49:52] *** Joins: stealth[] (~stealth]@2001:9e8:36fb:7f00:8d30:acae:5df0:7de8)
[18:52:29] *** Quits: aniruddha (uid340443@ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[19:00:04] *** Joins: AquaL1te (~AquaL1te@user/aqual1te)
[19:01:26] *** Joins: arcatech (~arcatech@user/arcatech)
[19:02:04] *** Quits: kupi (uid212005@hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[19:04:49] *** Joins: aniruddha (uid340443@ilkley.irccloud.com)
[19:04:58] *** Quits: mrozitron (~k@83.0.41.75.internetdsl.tpnet.pl) (Changing host)
[19:04:58] *** Joins: mrozitron (~k@user/mrozitron)
[19:08:33] *** Quits: dfip^ (~dfip@h50.174.139.63.static.ip.windstream.net) (Remote host closed the connection)
[19:10:34] *** Joins: tane (~tane@dslb-002-201-234-197.002.201.pools.vodafone-ip.de)
[19:10:34] *** Quits: tane (~tane@dslb-002-201-234-197.002.201.pools.vodafone-ip.de) (Changing host)
[19:10:34] *** Joins: tane (~tane@user/tane)
[19:14:32] *** Quits: AquaL1te (~AquaL1te@user/aqual1te) (Quit: leaving)
[19:14:47] *** Joins: AquaL1te (~AquaL1te@user/aqual1te)
[19:20:22] *** Quits: bindu (~bindu@user/bindu) (Remote host closed the connection)
[19:20:47] *** Joins: bindu (~bindu@user/bindu)
[19:25:29] *** Joins: Guest77 (~Guest77@180.190.100.165)
[19:27:01] <rawtaz> does anyone have any idea why  Foo string `xml:"Envelope,innerxml"`  gives error  xml: invalid tag in field Foo of type struct { Foo string "xml:\"Envelope,innerxml\"" }: "Envelope,innerxml"  when  Foo string `xml:",innerxml"`  works just fine (the tag in the XML is indeed Envelope, albeit prefixed with soap: as namespace)?
[19:27:11] <rawtaz> this is in a struct used for unmarshalling
[19:29:00] *** Joins: sudoforge (~sudoforge@wireguard/tunneler/sudoforge)
[19:30:15] *** Joins: jla (~jordi@64.225.79.195)
[19:31:51] *** Parts: Guest77 (~Guest77@180.190.100.165) ()
[19:32:07] *** Quits: krux02 (~krux02@194.8.199.29) (Read error: Connection reset by peer)
[19:32:33] *** Joins: krux02 (~krux02@194.8.199.29)
[19:39:10] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 265 seconds)
[19:39:19] *** Joins: fef (~thedawn@user/thedawn)
[19:41:02] *** Joins: fikran (~fikran@user/fikran)
[19:42:01] *** Joins: shka (~herr@83.175.151.96.piasta.pl)
[19:42:47] <fizzie> I don't think "Tag,innerxml" is a thing, is all. The way "encoding/xml" works (at least as far as I could ever perceive it) is that at every point, it already has some element, which it's trying to unmarshal into a struct. The ",innerxml" tag on a []byte / string field of that struct is used to say "just put the raw XML content here". It isn't really meaningful to give it a name too.
[19:44:39] <fizzie> If you're designing a struct that the *parent* of the <Element> tag could be unmarshalled in, and you want to capture all XML data of that subelement, you'd make it a field that's   Foo struct { Data string `xml:",innerxml"` } `xml:"Envelope"`   instead.
[19:45:25] <rawtaz> yeah.. its like it's walking the xml, which it probably is. but you can define e.g.   Firstname string `xml:"theName"`  and that will put the stuff in the theName tag into the Firstname field. thats why i thought i could do this. but meh.
[19:46:53] <rawtaz> im just trying to unmarshal this, and all i need is the KEY:  https://kopy.io/Cl5bN
[19:47:24] <rawtaz> right i see what you mean
[19:47:57] <fizzie> Here's an illustration of what I meant, FTR: https://play.golang.org/p/WAJqFx-CQpB
[19:49:02] <rawtaz> gotcha
[19:49:36] <rawtaz> but hm, given that paste i linked to above, do you think i need to build a struct that matches the XML structure entirely, or is there some way to just get like a>b>c>d into one field?
[19:50:13] <fizzie> Yes, there's a way to skip fields.
[19:51:10] *** Quits: tyson2 (~user@cpe688f2ec1f9b3-cm688f2ec1f9b0.cpe.net.cable.rogers.com) (Remote host closed the connection)
[19:51:23] <fizzie> Here's an example for your paste: https://play.golang.org/p/C_oocZrTMj4
[19:51:40] <rawtaz> i got it: Foo string `xml:"Body>GetAuthKeyResponse>GetAuthKeyResult"`
[19:51:53] <rawtaz> i previously tried that but with Envelope> in the beginning and that didnt work
[19:52:55] <fizzie> Yeah, that's because it's mapping the top-level element into that struct that's a field of, and specifying `xml:"Envelope>Body>GetAuthKeyResponse>GetAuthKeyResult"` would require a /sub/-element called "Envelope" first.
[19:52:56] <rawtaz> hm interesting. how come you wrapped it in "two levels", i mean the Key and KeyResult, instead of just one of them (Seeing as you do use the > syntax)?
[19:53:00] *** Joins: Fingolfin (~leonard@87.118.126.66)
[19:53:18] <fizzie> My version's just basically a more explicit way of doing it.
[19:53:44] <rawtaz> yeah. hm is there always ONE starting element in XML? like, there cant be <foo>..</foo><foo>..</foo> at the root?
[19:53:46] <fizzie> I've asked it to unmarshal the GetAuthKeyResult into a struct, and within that struct to collect all character data into a string field.
[19:54:14] <fizzie> And that's strictly because I didn't remember it can unmarshal into a string directly, like you did.
[19:54:15] <rawtaz> ok yeah. so basically you skipped parts of the XML, and started extrating stuff from within the Body, one could say
[19:54:21] <rawtaz> oh ok :)
[19:54:24] *** Joins: lilgopher (~textual@2601:241:8000:38f0:edd5:dcfc:17ed:129)
[19:55:07] <rawtaz> i think the syntax for xml umharshaling takes some time getting used to, and i had a hard time finding some article that discusses how it works or how to use in a more overview-ish way. but im glad this works, and your comments help understand it better!
[19:55:16] *** Quits: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl) (Quit: jaca122)
[19:55:45] <fizzie> And yes, there's always just one document element in a XML document.
[19:56:04] <rawtaz> i also suspect that there's some other way, perhaps a lib or similar, whereby you can just to like an XPath query similar to  XPath("xml here", "xpath here")
[19:56:15] <rawtaz> cool. thanks so much fizzie :)
[19:57:00] <fizzie> Yeah, I think there's (third-party) XPath packages for Go, haven't used them though. I've been fortunate not to have to parse more than like three XML documents in Go ever.
[19:57:09] <rawtaz> haha :D
[19:59:58] *** Parts: roxlu (~roxlu@2a01:7c8:aac0:286:8c3a:b01c:3830:245b) (WeeChat 3.0)
[20:03:20] *** Quits: neurocyte0132889 (~neurocyte@user/neurocyte) (Ping timeout: 265 seconds)
[20:06:43] *** Quits: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com) (Ping timeout: 265 seconds)
[20:06:59] *** Joins: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com)
[20:07:58] <Fingolfin> hi
[20:08:05] <Fingolfin> I'm trying to track down and issue between go 1.17.2 1.17.3
[20:08:18] <Fingolfin> basically my fairly uncomplicated server running in k8s have suddenly started taking 100% CPU, even when idle
[20:08:24] <Fingolfin> using the CPU profiler I can see it's happening http2clientStream doRequest
[20:08:30] <Fingolfin> Anyone seen anything like it?
[20:08:53] <Fingolfin> when I do a CPU profile on the binary from an earlier version it looks quite different
[20:10:15] *** Quits: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com) (Client Quit)
[20:11:10] <rawtaz> Fingolfin: im not the one to answer that, but im thinking "did you investigate the code diff in that specific function between those versions? can you spot anything that seems fishy?
[20:12:34] *** Joins: chasmo77 (~chas77@71.63.241.168)
[20:19:24] <siXy> Fingolfin: I'm not immediately seeing any changes there which look suspicious. Are you able to produce a test case that repros the problem?
[20:19:43] *** Quits: andlabs (~andlabs@70.107.171.168) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[20:20:09] <Fingolfin> yeah, I'm going to try put one together
[20:21:46] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[20:23:00] *** Joins: andlabs (~andlabs@70.107.171.168)
[20:24:07] *** Quits: andlabs (~andlabs@70.107.171.168) (Client Quit)
[20:26:59] *** Quits: llorllale (~llorllale@2607:9880:3a18:69:301e:cfcd:47ee:8af2) (Ping timeout: 250 seconds)
[20:31:09] <siXy> For the record, these are the only two recent changes I can see in this code: https://cs.opensource.google/go/x/net/+/69340ce214a7fd75be3cd139d5b98a50536fbd1c https://cs.opensource.google/go/x/net/+/e13a2654a71e8d479c387f1c45c295c956910cf7 (this gets bundled and shoved into h2_bundle.go in net/http)
[20:31:53] *** Quits: lack (~lack@user/lack) (Read error: Connection reset by peer)
[20:31:54] <siXy> I can't find an easy way of seeing what point-release of 1.17.x they made it into, though
[20:32:05] *** Joins: freakazoid343 (~matt@2603:9000:cf0f:80e3:c95:5e78:2621:2637)
[20:33:23] <Fingolfin> yeah, thanks
[20:33:37] <Fingolfin> I will try to see if I can reproduce it with a simple example
[20:33:40] <siXy> Ah! https://github.com/golang/go/issues?q=milestone%3AGo1.17.3+label%3ACherryPickApproved+x%2Fnet%2Fhttp2 is clearer
[20:34:54] *** Joins: lack (~lack@user/lack)
[20:35:00] *** Quits: freakazoid12345 (~matt@2603:9000:cf0f:80e3:c95:5e78:2621:2637) (Ping timeout: 260 seconds)
[20:37:38] *** Quits: lux0r (~lux0r@65.56.68.34.bc.googleusercontent.com) (Ping timeout: 260 seconds)
[20:38:01] *** Joins: lux0r (~lux0r@65.56.68.34.bc.googleusercontent.com)
[20:49:57] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[20:52:17] *** Quits: saschagrunert (~saschagru@46.128.124.46) (Remote host closed the connection)
[20:52:59] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Ping timeout: 250 seconds)
[20:54:49] *** Quits: fef (~thedawn@user/thedawn) (Remote host closed the connection)
[21:02:07] *** Quits: mrig (~AdiIRC@user/mrig) (Quit: Going offline, see ya! (www.adiirc.com))
[21:05:26] *** Joins: andlabs (~andlabs@2604:ca00:17b:305:7490:583d:c5cf:3eb7)
[21:07:54] *** Joins: mrig (~mrig@user/mrig)
[21:08:12] *** Joins: andlabs_ (~andlabs@2604:ca00:17b:305:e14c:496e:db79:da31)
[21:08:51] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[21:08:55] *** Joins: neurocyte0132889 (~neurocyte@94.46.69.238)
[21:08:55] *** Quits: neurocyte0132889 (~neurocyte@94.46.69.238) (Changing host)
[21:08:55] *** Joins: neurocyte0132889 (~neurocyte@user/neurocyte)
[21:11:47] *** Quits: andlabs (~andlabs@2604:ca00:17b:305:7490:583d:c5cf:3eb7) (Ping timeout: 264 seconds)
[21:13:22] *** Quits: neurocyte0132889 (~neurocyte@user/neurocyte) (Read error: Connection reset by peer)
[21:13:59] *** Joins: neurocyte0132889 (~neurocyte@94.46.69.238)
[21:13:59] *** Quits: neurocyte0132889 (~neurocyte@94.46.69.238) (Changing host)
[21:13:59] *** Joins: neurocyte0132889 (~neurocyte@user/neurocyte)
[21:21:00] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Quit: elastic_dog)
[21:21:03] *** Joins: elastic_1 (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[21:21:05] *** Joins: fef (~thedawn@user/thedawn)
[21:21:14] *** Quits: elastic_1 (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Client Quit)
[21:21:47] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[21:22:23] *** Joins: andlabs (~andlabs@2604:ca00:17b:305:a83d:259d:7f84:448b)
[21:24:14] *** Joins: dalek-caan (~Thunderbi@109-252-124-86.nat.spd-mgts.ru)
[21:26:11] *** Quits: andlabs_ (~andlabs@2604:ca00:17b:305:e14c:496e:db79:da31) (Ping timeout: 264 seconds)
[21:27:47] *** Joins: kissen (~kissen@mail.hacks.moe)
[21:27:47] *** Quits: kissen (~kissen@mail.hacks.moe) (Changing host)
[21:27:47] *** Joins: kissen (~kissen@user/kissen)
[21:33:10] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[21:41:30] *** Quits: AquaL1te (~AquaL1te@user/aqual1te) (Ping timeout: 256 seconds)
[21:42:59] *** Joins: AquaL1te (~AquaL1te@user/aqual1te)
[21:44:50] *** Quits: __alex (~alex@ip5f5afef3.dynamic.kabel-deutschland.de) (Ping timeout: 265 seconds)
[21:44:51] *** Joins: andlabs_ (~andlabs@2604:ca00:17b:305:495a:643f:65b0:c886)
[21:48:23] *** Quits: andlabs (~andlabs@2604:ca00:17b:305:a83d:259d:7f84:448b) (Ping timeout: 264 seconds)
[21:48:27] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 250 seconds)
[21:50:23] *** Joins: fikran (~fikran@user/fikran)
[21:50:40] *** Joins: andlabs (~andlabs@2604:ca00:17b:305:90ce:6e5e:34e1:c6b5)
[21:52:14] *** Joins: tyson2 (~user@bras-base-toroon0628w-grc-46-142-112-141-177.dsl.bell.ca)
[21:53:59] *** Joins: andlabs__ (~andlabs@2604:ca00:17b:305:cdc0:d8c5:f2da:5919)
[21:54:31] *** Quits: andlabs_ (~andlabs@2604:ca00:17b:305:495a:643f:65b0:c886) (Ping timeout: 250 seconds)
[21:54:31] *** Joins: mickey85 (~user@user/mickey)
[21:55:23] *** Joins: andlabs_ (~andlabs@2604:ca00:17b:305:c0d4:d5e9:e084:49e3)
[21:55:42] *** Quits: mickey8 (~user@user/mickey) (Ping timeout: 276 seconds)
[21:55:43] *** mickey85 is now known as mickey8
[21:56:11] *** Quits: andlabs (~andlabs@2604:ca00:17b:305:90ce:6e5e:34e1:c6b5) (Ping timeout: 264 seconds)
[21:57:14] *** Joins: Tv_ (uid62079@user/tv/x-3144562)
[21:59:11] *** Quits: andlabs__ (~andlabs@2604:ca00:17b:305:cdc0:d8c5:f2da:5919) (Ping timeout: 264 seconds)
[22:06:23] *** Quits: andlabs_ (~andlabs@2604:ca00:17b:305:c0d4:d5e9:e084:49e3) (Ping timeout: 264 seconds)
[22:07:16] *** Quits: csknk (~csknk@88.87.164.26) (Quit: leaving)
[22:17:54] *** Joins: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl)
[22:21:00] *** Joins: girafe (~girafe@176-147-142-235.abo.bbox.fr)
[22:22:45] *** Quits: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl) (Client Quit)
[22:25:09] *** Joins: krux02_ (~krux02@p200300e8172958000e9c089d099881c9.dip0.t-ipconnect.de)
[22:30:28] *** Joins: rek2 (~ReK2@47.61.173.146)
[22:31:22] *** Quits: theoceaniscool (~theoceani@119.12.232.133) (Ping timeout: 256 seconds)
[22:34:48] *** Joins: be3uykpy (~be3uykpy@2a00:a040:19a:b060:1937:5740:9a75:d704)
[22:35:29] *** Joins: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl)
[22:36:13] *** Joins: jezebel (jezebel@user/jezebel)
[22:37:58] *** Quits: veegee (~veegee@ipagstaticip-469c2903-2b07-6dc3-3bc2-98748da5ca77.sdsl.bell.ca) (Read error: Connection reset by peer)
[22:39:07] *** Joins: veegee (~veegee@ipagstaticip-469c2903-2b07-6dc3-3bc2-98748da5ca77.sdsl.bell.ca)
[22:39:15] *** Quits: greatgatsby (~greatgats@bras-base-toroon0411w-grc-52-142-114-106-7.dsl.bell.ca) (Remote host closed the connection)
[22:39:17] *** Quits: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl) (Client Quit)
[22:39:40] *** Joins: greatgatsby (~greatgats@bras-base-toroon0411w-grc-52-142-114-106-7.dsl.bell.ca)
[22:40:34] *** Quits: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-48-67-70-102-17.dsl.bell.ca) (Quit: ZNC 1.8.2 - https://znc.in)
[22:41:25] *** Joins: pieguy128 (~pieguy128@bas1-quebec14-67-70-102-17.dsl.bell.ca)
[22:43:13] *** Quits: __Asgaroth__ (~Asgaroth@93.107.191.92) (Remote host closed the connection)
[22:43:38] *** Quits: CRThaze1 (~weechat@188.166.44.58) (Ping timeout: 260 seconds)
[22:43:58] *** Joins: CRThaze1 (~weechat@188.166.44.58)
[22:47:03] *** Quits: fef (~thedawn@user/thedawn) (Remote host closed the connection)
[22:47:47] *** Joins: saschagrunert (~saschagru@46.128.124.46)
[22:50:08] *** Joins: NCS_One (~NCS_One@bl11-90-133.dsl.telepac.pt)
[22:54:35] *** Joins: andlabs (~andlabs@2a00:79e1:abc:1a12:948f:1075:7e0e:7e97)
[22:57:44] *** Quits: jcajka (~jcajka@89-24-144-111.customers.tmcz.cz) (Quit: Leaving)
[22:59:26] *** Joins: danmurf (uid480399@user/danmurf)
[23:04:45] <rawtaz> so speaking about conventions.. if i have a couple of packages (in path /foo and /bar) in my module, and i need to share some data structures between these, what's a conventional place to put a file with that content, and whats a good name for the package and filename?
[23:04:51] <rawtaz> just looking for what's common
[23:07:16] <rawtaz> i can probablt find some good examples on the net
[23:07:21] <rawtaz> -t+y
[23:08:03] <rawtaz> https://golang.org/doc/code is helpful
[23:09:23] *** Quits: lofiguy (~lofiguy@87-207-104-205.dynamic.chello.pl) (Remote host closed the connection)
[23:10:51] <j416> rawtaz: I usually name that package like the service or program itself
[23:10:59] <j416> I find it tends to read well
[23:11:19] <rawtaz> not "global"? ive seen that now and then
[23:11:25] <rawtaz> yeah yours should work fine
[23:11:30] <j416> interesting. no, never done that.
[23:12:07] <j416> rawtaz: curious, are you in stockholm?
[23:12:20] <rawtaz> nope, near Gothenburg :) are you in stockholmia?
[23:12:41] <rawtaz> or "Tokholmen" as we sometimes say :-)
[23:12:52] <j416> yes; I noticed you were a fellow swede; thought maybe we'd run into each other at some meetup. but, likely no then. :)
[23:13:05] <rawtaz> oh nice to meet you, it's always nice with some local presence :)
[23:13:09] <j416> o/
[23:13:16] <j416> angenämt
[23:13:20] <rawtaz> ah yeah, probably not. but im glad to see meetups being in person again! i gotta attend some soon
[23:13:23] <rawtaz> :3
[23:13:29] <j416> :)
[23:13:44] <rawtaz> do you usually hit up Go meetups or many other ones as well?
[23:14:09] <j416> I usually attend the go stockholm meetups unless I have other plans
[23:15:04] <rawtaz> cool
[23:17:06] <j416> I don't think we've any planned meetups just yet; perhaps I'll hold off just in case even if there is one; but at least come next year I hope we'll be back to some kind of normal, knock on wood >.>
[23:17:08] * rawtaz settles on "common" for the subpackage name
[23:17:17] <rawtaz> yeah lets hope so!
[23:17:21] *** Quits: tyson2 (~user@bras-base-toroon0628w-grc-46-142-112-141-177.dsl.bell.ca) (Remote host closed the connection)
[23:18:52] <fizzie> The only "meaningful" convention about package names is that if you have a path like ".../x/internal/y", it can only be imported by other packages with the ".../x" prefix. Which might be something you want to do, if you want to share a thing between two packages but not expose it as a public API surface.
[23:20:42] <rawtaz> in this case i just need to use it within the same module/project
[23:20:43] <bpalmer> A substantial part of the time, when I want to share datastructures across packages foo and bar, I just pick one of foo and bar to "own" the type, and import it in the other.
[23:21:08] <bpalmer> types rarely stand apart from the code that works with them.
[23:21:26] <rawtaz> i see what you mean
[23:21:37] *** Quits: FunnyLookinHat (~FunnyLook@64.184.172.137) (Ping timeout: 250 seconds)
[23:22:41] <bpalmer> (when that doesn't work, I usually end up needing to refactor foo and bar to get the common subset out into a third package, with the types, and then foo and bar import it)
[23:25:23] <b0nn> I've been investigating the best way to pass data across boundaries (packages in this case)
[23:25:56] <b0nn> If you use a names type, then you create a dependency (one of the packages has to import the other in order to use the type)
[23:26:43] <b0nn> So I have been reaching for anaonymous structs (for mixed data types), but that leads to a lot of repetitive definition code
[23:27:21] <b0nn> eg. return struct{A int; B float32}{A:1, B:3.14}
[23:27:51] <b0nn> passing maps restricts the types - map [string]type
[23:28:16] <b0nn> I still don't have a solution that I am happy with
[23:28:44] <rawtaz> i was just thinking about that.. basically i want to create a "common" struct type, and use that in the other packages. but instead of them importing that themselves, cant i just provide it to them when i call their functions from the common (orchestrating) package, and have the packages' functions (that are being called) use have some generic struct type as their parameter? like func CallMe(article struct)
[23:28:57] <j416> I typically follow ben johnson's idea, for most things.
[23:29:00] <rawtaz> all those functions need to do is populate fields on the struct
[23:29:13] *** Joins: GJdan (~quassel@107-190-25-70.cpe.teksavvy.com)
[23:29:24] <rawtaz> so e.g. a central package calls foo.SyncStuff([]Article)
[23:29:54] <rawtaz> or maybe with a & of course..
[23:29:57] <b0nn> central packages with types defined have the ownership problem - who gets to change it, the writer of package A, or B
[23:30:09] <rawtaz> let me clarify a bit.
[23:30:30] <j416> the data doesn't live in a central package, just the definitions
[23:30:30] <b0nn> and, when it is changed, you have to go change all of the uses of it (eg. if a field is removed)
[23:31:35] <j416> you define the domain model carefully so that you don't need a lot of changes, but if/when you do, then I don't imagine it'd be more work than any other structure
[23:31:55] <b0nn> if the answer is, never remove a field, over time that baby is going to get FAT as, as people continually add to it
[23:31:56] <rawtaz> its simple. im making a program that syncs between two APIs, foo and bar. so i have package foo with GetArticles() and UpdateArticles(), then package bar with getQuantities(). also a third package now named sync that has a function that calls articles=foo.GetArticles(), bar.GetQuantities(&articles) and foo.updateArticles(articles).
[23:32:27] <rawtaz> so i figure, make the Article struct in the package named sync, similar to what bpalmer said earlier about making a package own common types.
[23:32:41] <b0nn> yeah, what is an article, a name, some text, a date
[23:32:54] <b0nn> but, now I want to add a comments reference field
[23:33:00] <b0nn> or author
[23:33:38] <b0nn> the problem isn't what is it doing now, it's how do I change it in the future when the product owner smokes some pot and decides it has to do X Y and Z
[23:33:42] <rawtaz> but instead of having e.g. bar.GetQuantities take an arg of the speciifc type &[]Article, is there a way to make it less dependant on that type and just do something like func GetQuantities(articles <whatever type that has fields with known names on them, that i can set values on>)
[23:34:07] <rawtaz> b0nn: in this case it'd be just  type Article struct { Number string, OldQuantity int, NewQuantity int }
[23:34:09] <b0nn> that's my anonymous struct solution
[23:34:25] <b0nn> which isn't complete
[23:35:01] <rawtaz> thats all i need for any foreseeable future. if more fields are added *and they belong in this struct*, i just modify that struct and make whatever code is supposed to set it set those values
[23:35:29] <rawtaz> it could also do instrospection or similar and set what it can find in that struct it doesnt know much about, out of the data it has
[23:35:31] <b0nn> it's fine when it's you; when it's two teams arguing over who can make changes
[23:35:35] <rawtaz> but thats not needed here
[23:35:43] *** Quits: saschagrunert (~saschagru@46.128.124.46) (Remote host closed the connection)
[23:35:55] <rawtaz> b0nn: well theyre both working in the same codebase, so theyll just have to agree, right?
[23:36:04] <b0nn> uhhh
[23:36:06] <rawtaz> they can argue all they want, at the end of the day they have to settle on what's right for the application
[23:36:07] <b0nn> I wish
[23:36:36] <rawtaz> anyway, i understand you are talking about real concerns in larger projects :)
[23:37:52] <b0nn> I had a job once supplying software to a Telco; the Telco said (and I quote) "Do NOT use RabbitMQ in your solution, our knowledge is in Kafka, and we do not want to support another tech"
[23:38:12] <b0nn> My boss said "F*ck them, we're going to use Rabbit MQ, and just not tell them"
[23:38:32] <b0nn> That's team work in Australia
[23:39:02] <rawtaz> lol. that didnt work out well i take it :)
[23:39:08] <rawtaz> at least not the relationship
[23:39:18] <b0nn> Dunno, I quit because I refused to lie to the client
[23:39:27] <rawtaz> +1 to that. well done
[23:40:13] <rawtaz> the client had a very valid reason for their request so it's not like it was just some stupid idea. i imagine they were big enough that things like that really matters.
[23:41:34] <znpy> does anyone parse emails for a living and can suggest a good library ? i'm trying net/email and github.com/DusanKasan/Parsemail but they both fail on malformed mime email bodies... but of course other software like mutt/thunderbird open the mails no problem
[23:42:29] *** Quits: aniruddha (uid340443@ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[23:42:31] *** Quits: eruditass (uid248673@uxbridge.irccloud.com) (Ping timeout: 268 seconds)
[23:42:59] *** Joins: eruditass (uid248673@uxbridge.irccloud.com)
[23:54:29] *** Quits: dalek-caan (~Thunderbi@109-252-124-86.nat.spd-mgts.ru) (Quit: dalek-caan)
[23:54:31] *** Joins: dfip^ (~dfip@h50.174.139.63.static.ip.windstream.net)
[23:57:35] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 250 seconds)
[23:59:44] *** Joins: fikran (~fikran@user/fikran)
