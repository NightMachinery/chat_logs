[00:00:34] <A_Dragon> cant you pass a byte array to the string builder in some way?
[00:01:56] <KirkMcDonald> Its initial size is zero.
[00:02:05] <alzgh> I don't think so. Although I'm very new to Go. Just trying to learn the syntax and some of the constructs.
[00:02:12] <A_Dragon> that would make the most sense KirkMcDonald
[00:02:15] <A_Dragon> as its just a []byte
[00:02:21] <alzgh> Oh, thanks.
[00:02:23] <A_Dragon> so strings.Builder{} should be zero bytes
[00:02:30] <A_Dragon> thus grow will be from zero if you dont write :P
[00:02:43] <b0nn> strings.Join just calls strings.Builder.Grow(len([]string))
[00:02:47] <alzgh> I was thinking of using a combination of `Cap` and `Grow`.
[00:03:25] <KirkMcDonald> I would think that overestimating the number you pass to Grow() would be preferable to underestimating.
[00:03:36] *** Joins: tyson2 (~user@bras-base-toroon0628w-grc-46-142-112-141-177.dsl.bell.ca)
[00:03:54] <b0nn> Well, as I said earlier, you know at runtime how many ints you are going to be converting, which is the number of strings, which is n
[00:04:21] <KirkMcDonald> Yeah. So if you know the maximum magnitude of the integers you're dealing with, you can make a maximum estimate of the size of the string.
[00:04:35] <alzgh> right
[00:04:35] <A_Dragon> yeah, definitely overestimate
[00:04:56] <A_Dragon> because when you write and its under, it'll use append, which will both double the size and cause a copy of half that size
[00:05:03] *** Joins: shka (~herr@83.175.151.96.piasta.pl)
[00:05:21] *** Joins: jespada (~jespada@190.7.36.46)
[00:08:25] *** Quits: sandro (~sandro@ip-37-201-176-92.hsi13.unitymediagroup.de) (Ping timeout: 250 seconds)
[00:11:44] <b0nn> https://jobs.netflix.com/jobs/140467951
[00:12:16] <b0nn> Am surprised that Netflix has to advertise on twitter for such a role, I thought that people were clamouring to work at a FAANG
[00:13:20] <KirkMcDonald> Or I guess it's MANGA now?
[00:13:43] <KirkMcDonald> Which might actually mean it's MAAAN, hmm.
[00:13:44] <b0nn> Well, GOOG is Alphabet, so MAAAN
[00:14:09] <b0nn> But AIUI FAANG is based on stock market symbols and FB haven't changed theirs
[00:14:39] <KirkMcDonald> Yes but that is not as amusing.
[00:15:03] <b0nn> And, given the gossip on a Trademark dispute, Facebook may not actually change to Meta
[00:17:04] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Quit: sord937)
[00:18:16] <b0nn> KirkMcDonald: Are you still with one of the FAANGs?
[00:18:54] *** Quits: tyson2 (~user@bras-base-toroon0628w-grc-46-142-112-141-177.dsl.bell.ca) (Remote host closed the connection)
[00:19:41] <KirkMcDonald> No.
[00:22:43] *** Quits: bkircher (~bkircher@2001:a61:25e1:a901:f7b9:7a2c:5cbb:7cb) (Ping timeout: 250 seconds)
[00:23:35] *** Quits: arcatech (~arcatech@user/arcatech) (Quit: Bye.)
[00:23:58] *** Quits: mrig (~AdiIRC@user/mrig) (Quit: Going offline, see ya! (www.adiirc.com))
[00:28:17] *** Joins: mrig (~mrig@user/mrig)
[00:28:45] *** Quits: vimal (~vimal@2a02:a210:9600:1600:3271:adb4:e3fb:289a) (Read error: Connection reset by peer)
[00:31:16] <Tykling> is it possible to know how many threads are waiting on a mutex unlock?
[00:36:07] *** Quits: alzgh (~alzgh@user/alzgh) (Remote host closed the connection)
[00:36:28] *** Joins: alzgh (~alzgh@user/alzgh)
[00:37:21] <b0nn> No, what you're asking for there is a semaphore
[00:38:59] <b0nn> WRT Mutexes there's no way to tell if a thread is waiting for it to unlock, because a thread /could/ conceivably say "Oh that resources is locked, I'll do something else instead"
[00:39:49] <b0nn> A semaphore is a queue, where a thread says "can I have a number and when my number comes up I will use that resource"
[00:40:23] <seebs> so, prior to future versions, nothing can say "oh that's locked i'll do something else instead" for a mutex because there's no trylock.
[00:40:44] <seebs> but eventually enough "you should try this or else do something else" happened that we're getting that, for better or worse.
[00:40:53] <b0nn> Although Go (and Java, and probably other languages) has the concept of a "weighted" queue in the semaphore, where a goroutine can have a higher priority and jump ahead in the queue
[00:41:45] <seebs> the typical way to do semaphores in go is with buffered channels, which don't actually put waiters in a queue exactly.
[00:42:24] <b0nn> https://pkg.go.dev/golang.org/x/sync/semaphore
[00:42:50] <b0nn> Using a channel as a semaphore is (IMO) smarter, though
[00:44:31] <seebs> yeah
[00:44:38] <seebs> the x/sync stuff isn't great i think
[00:44:51] <seebs> but the weighted implementation does a thing the others don't.
[00:45:59] <b0nn> I mean, weighted implementations can cause starvation if not done properly (ageing!)
[00:51:43] *** Quits: jespada (~jespada@190.7.36.46) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[00:53:35] *** Quits: edrocks (~Ed@user/edrocks) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[00:55:59] *** Joins: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl)
[00:56:31] *** Quits: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl) (Client Quit)
[00:56:36] *** Quits: alzgh (~alzgh@user/alzgh) (Remote host closed the connection)
[00:56:57] *** Joins: alzgh (~alzgh@user/alzgh)
[00:58:50] <Tykling> ok I thought since there is a queue and a fifo order it might be possible to get the length of that queue
[00:59:49] <b0nn> mutexes don't have a queue
[01:01:00] <Tykling> okay well then how does it decide who gets the lock next if multiple are waiting
[01:01:40] <b0nn> That's the problem with mutexes, it's a free for all on who can get it
[01:02:27] <b0nn> If you want a queue, then a semaphore is what you are looking for (or the buffered channel)
[01:02:39] <Tykling> I see
[01:03:45] <seebs> the buffered channel doesn't necessarily put people in a particular order. i would not default to assuming that a semaphor was first-in-first-out either.
[01:03:54] <b0nn> Hmm, the runq in the scheduler might be the proxy for a queue for a mutex too, but counting on that is... madness
[01:06:11] <seebs> the weighted implementation in x/sync does in fact put things in order, intentionall.y
[01:06:25] <seebs> so it won't let things jump the queue even if they can be satisfied and something else can't.
[01:06:33] <seebs> but other semaphore implementations may not agree.
[01:07:05] <b0nn> seebs: Channels act as first-in-first-out queues << from the spec
[01:07:20] <seebs> yes
[01:07:30] <seebs> but that's if you *get* a thing
[01:07:38] <b0nn> o.0
[01:08:02] <seebs> so a common way to do the semaphore is that you have a channel with buffer N, and you write to it when you start, and read from it when you leave
[01:08:05] <b0nn> Are you talking about a full queue?
[01:08:18] <seebs> if it's full, then you block waiting until someone reads before you can write
[01:08:34] <seebs> and any number of things can be blocked waiting to write, and they aren't being processed in an order
[01:09:11] <seebs> so with the x/sync semaphore, if a bunch of things do Acquire(1) and all block temporarily, they will unblock in the order they originally showed up. With the channel semaphore, if a bunch of things are blocked at acquire, the order in which they unblock is arbitrary.
[01:09:38] <Tykling> so if I use sem.Acquire(ctx, 1) how do I get the "queue size" ie the number of waiting ?
[01:10:37] <seebs> you don't, because it does not expose that information
[01:10:41] <b0nn> reflect - there's an unexported field
[01:10:52] <b0nn> https://cs.opensource.google/go/x/sync/+/036812b2:semaphore/semaphore.go;l=28
[01:10:57] <seebs> which is normally because it doesn't (usually) make sense to want to know the queue size.
[01:12:51] *** Quits: svedrin (~quassel@tiamat.funzt-halt.net) (Quit: https://quassel-irc.org - Komfortabler Chat. Überall.)
[01:12:52] <b0nn> the waiters firled is a list.List, which has a len attribute
[01:13:06] *** Joins: svedrin (~quassel@tiamat.funzt-halt.net)
[01:13:25] <b0nn> But, you're playing with fire on the grounds that, you have a lovely race condition unless you can stop others joining the queue whilst you look that value up
[01:13:41] <b0nn> which is probably why it's not exported
[01:14:06] <seebs> that is one of the other reasons it doesn't really make sense to ask how many things are waiting. all you can find out is how many were waiting back when you asked.
[01:14:21] <Tykling> that is good enough for an overview in grafana
[01:15:07] <b0nn> s/race condition/data race
[01:16:09] *** Joins: rcernin (~rcernin@124.190.139.235)
[01:16:24] *** Quits: zutto (~zutt@user/zutt) (Ping timeout: 260 seconds)
[01:17:17] *** Joins: zutt (~zutt@user/zutt)
[01:18:11] <b0nn> Tykling: You might be better with a value that you incr/decr when you join a semaphore
[01:19:05] <b0nn> atomic.AddUint64 or something
[01:20:04] <b0nn> but even that would be untrustworthy, if your thread dies between incrementing and joining the semaphore's queue, you'll end up with a value that doesn't reflect reality
[01:27:10] *** Quits: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be) (Ping timeout: 244 seconds)
[01:32:09] *** Quits: Church (~aleph@pool-98-116-232-112.nycmny.fios.verizon.net) (Quit: WeeChat info:version)
[01:33:05] *** Joins: Church (~aleph@pool-98-116-232-112.nycmny.fios.verizon.net)
[01:34:02] *** Quits: volt (~volt@67.197.6.215) (Ping timeout: 240 seconds)
[01:37:16] *** Quits: paulgrmn_ (~paulgrmn@user/paulgrmn) (Ping timeout: 250 seconds)
[01:46:08] *** Quits: Seirdy (~Seirdy@sourcehut/user/seirdy) (Quit: exiting 3.2)
[01:46:42] *** Joins: Seirdy (~Seirdy@sourcehut/user/seirdy)
[01:51:46] *** Joins: mikey__ (~mikey__@user/mikey/x-6463285)
[01:51:51] *** Joins: dmiserak (~dmiserak@c-73-126-10-81.hsd1.ma.comcast.net)
[01:53:05] *** Joins: FoodMan (~glucose@user/foodman)
[01:53:32] *** Quits: shka (~herr@83.175.151.96.piasta.pl) (Ping timeout: 240 seconds)
[01:55:16] *** Joins: gggpkm (~gggpkm@123.113.176.184)
[01:55:54] *** Joins: gggpkm_ (~gggpkm@123.113.176.184)
[01:56:19] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 250 seconds)
[01:57:57] *** Joins: gggpkm__ (~gggpkm@123.113.176.184)
[01:59:47] *** Quits: gggpkm (~gggpkm@123.113.176.184) (Ping timeout: 250 seconds)
[02:01:05] *** Quits: gggpkm_ (~gggpkm@123.113.176.184) (Ping timeout: 250 seconds)
[02:06:23] *** Quits: mikey__ (~mikey__@user/mikey/x-6463285) (Remote host closed the connection)
[02:06:45] *** Joins: mikey__ (~mikey__@user/mikey/x-6463285)
[02:08:28] *** Quits: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com) (Quit: Leaving)
[02:13:41] *** Joins: kupi (uid212005@id-212005.hampstead.irccloud.com)
[02:17:35] *** Quits: KirkMcDonald (~Kirk@python/site-packages/KirkMcDonald) (Ping timeout: 268 seconds)
[02:18:03] *** Quits: LtHummus (~lthummus@97.126.106.255) (Quit: ZNC 1.8.2 - https://znc.in)
[02:20:15] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[02:22:05] *** Joins: gggpkm_ (~gggpkm@60.10.194.43)
[02:22:26] *** Joins: LtHummus (~lthummus@97.126.106.255)
[02:24:04] *** Quits: The_Loko (~The_Loko@86.127.253.186) (Remote host closed the connection)
[02:24:20] *** Joins: KirkMcDonald (~Kirk@python/site-packages/KirkMcDonald)
[02:25:21] *** Quits: gggpkm__ (~gggpkm@123.113.176.184) (Ping timeout: 250 seconds)
[02:25:55] <alzgh> I have a string of digits and want to convert each digit to an int one by one to do some stuff with them individually. what would be the most sane way to do that?
[02:27:18] *** Joins: gggp (~gggp@111-251-148-239.dynamic-ip.hinet.net)
[02:27:19] *** Quits: gggp (~gggp@111-251-148-239.dynamic-ip.hinet.net) (Client Quit)
[02:28:57] <alzgh> I can take the byte and do a `b - '0'` but is that acceptable?
[02:29:11] <alzgh> I mean wouldn't someone say to me what is this ugly code?
[02:30:37] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[02:31:09] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Client Quit)
[02:31:42] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[02:32:59] <b0nn> parsInt, Atoi, or roll your own
[02:33:49] <b0nn> ugliness factor: if you roll your own, it has to be clear why you are doing that over the standard library (eg. performance, guarantee of input that the standard lib cannot assume)
[02:35:05] *** Quits: NCS_One (~NCS_One@bl11-90-133.dsl.telepac.pt) (Quit: Lost terminal)
[02:35:38] *** Joins: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl)
[02:36:49] *** Joins: gggpkm__ (~gggpkm@60.10.194.43)
[02:37:02] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 240 seconds)
[02:37:15] *** Quits: mrig (~mrig@user/mrig) (Quit: WeeChat 3.0)
[02:37:21] *** Quits: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl) (Client Quit)
[02:37:25] *** Quits: gggpkm__ (~gggpkm@60.10.194.43) (Max SendQ exceeded)
[02:37:57] *** Quits: jla (~jordi@64.225.79.195) (Ping timeout: 244 seconds)
[02:38:48] *** Joins: gggpkm (~gggpkm@111.63.44.13)
[02:38:59] *** Quits: gggpkm_ (~gggpkm@60.10.194.43) (Ping timeout: 244 seconds)
[02:40:16] *** Quits: dmiserak (~dmiserak@c-73-126-10-81.hsd1.ma.comcast.net) (Quit: Leaving)
[02:40:29] *** Joins: freakazoid12345 (~matt@2603:9000:cf0f:80e3:5c20:adb3:d75f:164)
[02:43:40] *** Quits: freakazoid343 (~matt@2603:9000:cf0f:80e3:5c20:adb3:d75f:164) (Ping timeout: 260 seconds)
[02:44:47] *** Joins: Asgaroth (~Asgaroth@93.107.191.92)
[02:44:47] *** Quits: nostalgia (~nostalgia@2601:243:c600:95f0:22f1:3efe:9b37:299c) (Remote host closed the connection)
[02:45:36] *** Joins: brainfreeze (~brainfree@2a03:1b20:4:f011::20d)
[02:51:32] *** Quits: lofiguy (~lofiguy@87-207-104-205.dynamic.chello.pl) (Remote host closed the connection)
[02:51:51] *** Quits: alzgh (~alzgh@user/alzgh) (Remote host closed the connection)
[02:52:11] *** Joins: alzgh (~alzgh@user/alzgh)
[02:53:39] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[02:58:02] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 240 seconds)
[03:14:39] *** Joins: nostalgia (~nostalgia@2601:243:c600:95f0:22f1:3efe:9b37:299c)
[03:17:16] *** Joins: gggpkm_ (~gggpkm@123.113.176.184)
[03:18:22] *** Quits: gggpkm_ (~gggpkm@123.113.176.184) (Remote host closed the connection)
[03:18:50] *** Joins: gggpkm_ (~gggpkm@123.113.176.184)
[03:19:32] *** Quits: gggpkm (~gggpkm@111.63.44.13) (Ping timeout: 240 seconds)
[03:20:22] *** Quits: gggpkm_ (~gggpkm@123.113.176.184) (Remote host closed the connection)
[03:28:13] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[03:28:26] *** Joins: rek2 (~ReK2@47.62.9.10)
[03:31:12] *** Quits: internut (~internut@2601:280:4e00:7b70:ac83:5f8b:da7e:d7b1) (Quit: Leaving...)
[03:31:56] <A_Dragon> Im working on a gopls modification, some of the ways these tests work are... interesting and Im not sure if I understand how to build them correctly; is there a place I can learn about how to write the tests?
[03:32:32] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 250 seconds)
[03:32:58] <A_Dragon> actually I found some other tests that appear to be straightforward, I think I can add them here
[03:34:41] *** Quits: arinov (~arinov@213.194.126.155) (Ping timeout: 250 seconds)
[03:35:58] *** Joins: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com)
[03:36:41] *** Quits: pjs (~pjs@user/pjs) (Ping timeout: 264 seconds)
[03:43:40] *** Quits: stmuk_ (~steve@15.43.187.81.in-addr.arpa) (Ping timeout: 260 seconds)
[03:55:58] *** Quits: normen (~normen@p54b35890.dip0.t-ipconnect.de) (Ping timeout: 244 seconds)
[04:02:53] *** Joins: normen (~normen@p200300d71739c00084de120d4cbf430b.dip0.t-ipconnect.de)
[04:03:24] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[04:05:06] *** Joins: vptr (~vptr@user/vptr)
[04:07:02] *** Quits: normen (~normen@p200300d71739c00084de120d4cbf430b.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[04:07:32] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 240 seconds)
[04:10:04] *** Joins: frost (~frost@user/frost)
[04:14:15] *** Quits: ugjka (~ugjka@ugjka.net) (Quit: Rabooting the server https://ugjka.net)
[04:14:49] *** Joins: ugjka (~ugjka@ugjka.net)
[04:21:05] *** Joins: normen (~normen@p200300d71739c00084de120d4cbf430b.dip0.t-ipconnect.de)
[04:23:26] *** Quits: kupi (uid212005@id-212005.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[04:28:20] *** Joins: burningserenity (~burningse@2603:9001:f01:ad99::100c)
[04:39:13] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[04:43:35] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 250 seconds)
[04:46:01] *** Quits: predmijat (~predmijat@mail.strogopro.com) (Quit: bye)
[04:47:38] *** Joins: predmijat (~predmijat@mail.strogopro.com)
[04:54:25] *** Quits: anticw (~anticw@157-131-246-230.fiber.dynamic.sonic.net) (Remote host closed the connection)
[04:56:43] *** Joins: anticw (~anticw@157-131-246-230.fiber.dynamic.sonic.net)
[05:00:29] *** Joins: gggpkm_ (~gggpkm@125.33.87.172)
[05:10:35] *** gggpkm_ is now known as gggpkm
[05:14:22] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[05:18:38] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 244 seconds)
[05:25:21] *** Quits: _nuke (~nuke@50-193-103-211-static.hfc.comcastbusiness.net) (Ping timeout: 268 seconds)
[05:29:54] *** Joins: freakazoid343 (~matt@2603:9000:cf0f:80e3:a5b1:905d:8e21:4dd9)
[05:31:02] *** Quits: normen (~normen@p200300d71739c00084de120d4cbf430b.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[05:31:39] *** Joins: _nuke (~nuke@50-193-103-211-static.hfc.comcastbusiness.net)
[05:32:39] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[05:33:02] *** Quits: freakazoid12345 (~matt@2603:9000:cf0f:80e3:5c20:adb3:d75f:164) (Ping timeout: 240 seconds)
[05:37:14] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 244 seconds)
[05:40:46] *** Quits: ghenry (~ghenry@ghenry.plus.com) (Ping timeout: 260 seconds)
[05:41:32] *** Quits: rcernin (~rcernin@124.190.139.235) (Ping timeout: 240 seconds)
[05:41:53] *** Joins: pjs (~pjs@user/pjs)
[05:44:05] *** Quits: burningserenity (~burningse@2603:9001:f01:ad99::100c) (Quit: ZNC 1.8.2 - https://znc.in)
[05:46:44] *** Quits: alzgh (~alzgh@user/alzgh) (Ping timeout: 256 seconds)
[05:48:38] *** Joins: gggpkm_ (~gggpkm@60.10.194.43)
[05:49:03] *** Quits: Kaivo (~quassel@user/kaivo) (Quit: No Ping reply in 180 seconds.)
[05:49:21] *** Quits: mikey__ (~mikey__@user/mikey/x-6463285) (Ping timeout: 276 seconds)
[05:50:29] *** Joins: Kaivo (~quassel@user/kaivo)
[05:51:37] *** Quits: gggpkm (~gggpkm@125.33.87.172) (Ping timeout: 250 seconds)
[05:51:58] *** Joins: mikey__ (~mikey__@user/mikey/x-6463285)
[05:53:11] *** Joins: rcernin (~rcernin@124.190.139.235)
[05:53:36] *** Joins: ghenry (~ghenry@ghenry.plus.com)
[05:53:38] *** Joins: alzgh (alzgh@user/alzgh)
[06:00:02] *** Quits: moldorcoder7 (~moldorcod@37.120.143.30) (Ping timeout: 240 seconds)
[06:02:52] *** Quits: emcconville (~emcconvil@c-98-222-200-8.hsd1.il.comcast.net) (Quit: WeeChat 3.2)
[06:03:51] *** Quits: krux02 (~krux02@p200300e817076e0044b6cdb56690220d.dip0.t-ipconnect.de) (Remote host closed the connection)
[06:04:45] *** Joins: normen (~normen@p54b35890.dip0.t-ipconnect.de)
[06:06:44] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[06:07:40] *** Joins: moldorcoder7 (~moldorcod@37.120.143.29)
[06:10:50] *** Joins: gggpkm__ (~gggpkm@123.113.176.184)
[06:11:10] *** Quits: kiril (~kiril@85.91.153.163) (Quit: ZNC - https://znc.in)
[06:11:20] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 244 seconds)
[06:11:21] *** Joins: kiril (~kiril@85.91.153.163)
[06:13:24] *** Quits: gggpkm_ (~gggpkm@60.10.194.43) (Ping timeout: 244 seconds)
[06:13:59] *** Joins: Guest1490 (~l@221.4.218.150)
[06:14:45] *** Quits: nolesswrong (~nolesswro@45.32.1.17) (Ping timeout: 260 seconds)
[06:16:44] *** Quits: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com) (Quit: Leaving)
[06:18:07] *** Quits: Guest1490 (~l@221.4.218.150) (Client Quit)
[06:18:22] *** Joins: rongzhj (~l@221.4.218.150)
[06:20:13] *** _koolazer is now known as koolazer
[06:20:27] *** Joins: bpalmer (~user@user/bpalmer)
[06:22:12] *** Quits: redquasar (~redquasar@redquasar.xyz) (Quit: redquasar.xyz)
[06:22:27] *** Joins: redquasar (~redquasar@redquasar.xyz)
[06:25:13] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[06:27:40] *** Quits: andlabs (~andlabs@2a00:79e1:abc:1a12:1d1:506b:5e67:7200) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[06:29:45] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 250 seconds)
[06:30:34] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[06:39:06] *** Joins: Fault (~Fault@152.70.112.168)
[06:39:06] *** Quits: Fault (~Fault@152.70.112.168) (Remote host closed the connection)
[06:40:09] *** Joins: Fault (~Fault@152.70.112.168)
[06:43:55] *** Quits: vptr (~vptr@user/vptr) (Quit: leaving)
[06:44:40] *** Joins: norbinaa (~be3uykpy@2a00:a040:19a:b060:20fa:2ef8:9ce:1906)
[06:44:59] *** Quits: Fault (~Fault@152.70.112.168) (Quit: Quit.)
[06:48:37] *** Quits: be3uykpy_ (~be3uykpy@2a00:a040:19a:b060:9197:a69e:2097:a1d5) (Ping timeout: 268 seconds)
[06:52:24] *** Quits: alzgh (alzgh@user/alzgh) (Remote host closed the connection)
[06:52:56] *** Joins: gggpkm_ (~gggpkm@111.63.44.13)
[06:53:03] *** Joins: Fault (~Fault@152.70.112.168)
[06:53:06] *** Quits: Fault (~Fault@152.70.112.168) (Client Quit)
[06:55:45] *** Quits: gggpkm__ (~gggpkm@123.113.176.184) (Ping timeout: 250 seconds)
[06:59:20] *** Joins: Fault (~Fault@152.70.112.168)
[06:59:21] *** Quits: Fault (~Fault@152.70.112.168) (Remote host closed the connection)
[06:59:27] *** Quits: rongzhj (~l@221.4.218.150) (Quit: WeeChat 3.0.1)
[07:01:15] *** Joins: andlabs (~andlabs@2604:ca00:17c:8818:4db6:a4bc:a4f9:9829)
[07:02:51] *** Joins: Fault (~Fault@152.70.112.168)
[07:02:52] *** Quits: Fault (~Fault@152.70.112.168) (Remote host closed the connection)
[07:09:08] *** Joins: stmuk_ (~steve@15.43.187.81.in-addr.arpa)
[07:10:14] *** Quits: normen (~normen@p54b35890.dip0.t-ipconnect.de) (Ping timeout: 244 seconds)
[07:13:21] *** Joins: Fault (~Fault@152.70.112.168)
[07:15:07] *** Quits: andlabs (~andlabs@2604:ca00:17c:8818:4db6:a4bc:a4f9:9829) (Ping timeout: 268 seconds)
[07:15:40] *** Joins: andlabs (~andlabs@2604:ca00:170:20a8:313c:8dae:95b4:af8)
[07:16:15] *** Quits: Fault (~Fault@152.70.112.168) (Quit: Quit.)
[07:18:14] *** Joins: Fault (~Fault@152.70.112.168)
[07:32:24] *** Joins: andlabs_ (~andlabs@2604:ca00:170:20a8:455a:1bee:2a2f:3c6d)
[07:34:47] *** Joins: gggpkm (~gggpkm@60.10.194.43)
[07:35:11] *** Quits: andlabs (~andlabs@2604:ca00:170:20a8:313c:8dae:95b4:af8) (Ping timeout: 250 seconds)
[07:36:31] *** Joins: andlabs (~andlabs@64.9.251.138)
[07:37:02] *** Quits: gggpkm_ (~gggpkm@111.63.44.13) (Ping timeout: 240 seconds)
[07:39:05] *** Quits: andlabs_ (~andlabs@2604:ca00:170:20a8:455a:1bee:2a2f:3c6d) (Ping timeout: 250 seconds)
[07:39:28] *** Quits: Fault (~Fault@152.70.112.168) (Quit: Quit.)
[07:45:51] *** Joins: Fault (~Fault@152.70.112.168)
[07:47:45] *** Quits: Tv_ (uid62079@user/tv/x-3144562) (Quit: Connection closed for inactivity)
[07:53:09] *** Joins: kupi (uid212005@id-212005.hampstead.irccloud.com)
[07:57:00] *** Quits: Fault (~Fault@152.70.112.168) (Quit: Quit.)
[07:58:06] *** Joins: Fault (~Fault@152.70.112.168)
[08:04:11] *** Quits: andlabs (~andlabs@64.9.251.138) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[08:05:31] *** Quits: chemsmith (~chemsmith@user/chemsmith) (Ping timeout: 245 seconds)
[08:06:46] *** Joins: chemsmith (~chemsmith@user/chemsmith)
[08:08:07] *** Joins: normen (~normen@p200300d71739c00084de120d4cbf430b.dip0.t-ipconnect.de)
[08:14:24] *** Quits: gggpkm (~gggpkm@60.10.194.43) (*.net *.split)
[08:14:24] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (*.net *.split)
[08:14:24] *** Quits: pjs (~pjs@user/pjs) (*.net *.split)
[08:14:24] *** Quits: _nuke (~nuke@50-193-103-211-static.hfc.comcastbusiness.net) (*.net *.split)
[08:14:24] *** Quits: anticw (~anticw@157-131-246-230.fiber.dynamic.sonic.net) (*.net *.split)
[08:14:24] *** Quits: predmijat (~predmijat@mail.strogopro.com) (*.net *.split)
[08:14:24] *** Quits: frost (~frost@user/frost) (*.net *.split)
[08:14:24] *** Quits: KirkMcDonald (~Kirk@python/site-packages/KirkMcDonald) (*.net *.split)
[08:14:24] *** Quits: LtHummus (~lthummus@97.126.106.255) (*.net *.split)
[08:14:24] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (*.net *.split)
[08:14:24] *** Quits: Church (~aleph@pool-98-116-232-112.nycmny.fios.verizon.net) (*.net *.split)
[08:14:24] *** Quits: dr0n (~nabromov@94.11.23.235) (*.net *.split)
[08:14:24] *** Quits: jpw (~jpw@user/jpw) (*.net *.split)
[08:14:24] *** Quits: sudoforge (~sudoforge@wireguard/tunneler/sudoforge) (*.net *.split)
[08:14:24] *** Quits: Led_Zeppelin2 (~user@cpe-68-172-241-89.nj.res.rr.com) (*.net *.split)
[08:14:24] *** Quits: AquaL1te (~AquaL1te@user/aqual1te) (*.net *.split)
[08:14:24] *** Quits: cnf (~cnf@d5152daf0.static.telenet.be) (*.net *.split)
[08:14:24] *** Quits: t0xicCode (~t0xicCode@user/t0xiccode) (*.net *.split)
[08:14:24] *** Quits: Xizor (~Xizor@151.ip-51-68-121.eu) (*.net *.split)
[08:14:24] *** Quits: kieren (~kieren@ec2-54-247-60-196.eu-west-1.compute.amazonaws.com) (*.net *.split)
[08:14:24] *** Quits: sneak (~sneak@datavi.be) (*.net *.split)
[08:14:24] *** Quits: kipukun (~kipukun@207.244.104.227) (*.net *.split)
[08:14:24] *** Quits: svip (~svip@user/svip) (*.net *.split)
[08:14:24] *** Quits: harley_l (~quassel@64.225.54.254) (*.net *.split)
[08:14:24] *** Quits: edr (~edr@user/edr) (*.net *.split)
[08:14:24] *** Quits: Jazzah (~jazz@user/jazzah) (*.net *.split)
[08:14:24] *** Quits: jaguar (~jag@li669-242.members.linode.com) (*.net *.split)
[08:14:24] *** Quits: dkeohane2 (~dkeohane@ec2-18-189-29-140.us-east-2.compute.amazonaws.com) (*.net *.split)
[08:14:24] *** Quits: thinkofher (~thinkofhe@user/thinkofher) (*.net *.split)
[08:14:24] *** Quits: pztrn (~pztrn@user/pztrn) (*.net *.split)
[08:14:24] *** Quits: hhes (sid420846@ilkley.irccloud.com) (*.net *.split)
[08:14:24] *** Quits: zaz\ (~zaz@poneybl.eu) (*.net *.split)
[08:14:24] *** Quits: obviyus (sid415299@user/obviyus) (*.net *.split)
[08:14:24] *** Quits: dreistadt (sid501648@lymington.irccloud.com) (*.net *.split)
[08:14:24] *** Quits: computerquip (sid423484@user/computerquip) (*.net *.split)
[08:14:24] *** Quits: wolfshappen (~waff@irc.furworks.de) (*.net *.split)
[08:14:24] *** Quits: jsrnop6 (~mark@user/jsrnop) (*.net *.split)
[08:14:24] *** Quits: gspbirel56 (~gspbirel5@c-73-214-199-7.hsd1.pa.comcast.net) (*.net *.split)
[08:14:24] *** Quits: GJdan (~quassel@107-190-25-70.cpe.teksavvy.com) (*.net *.split)
[08:14:24] *** Quits: novns (~novns@user/novns) (*.net *.split)
[08:15:12] *** Joins: gggpkm (~gggpkm@60.10.194.43)
[08:15:12] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[08:15:12] *** Joins: pjs (~pjs@user/pjs)
[08:15:12] *** Joins: _nuke (~nuke@50-193-103-211-static.hfc.comcastbusiness.net)
[08:15:12] *** Joins: anticw (~anticw@157-131-246-230.fiber.dynamic.sonic.net)
[08:15:12] *** Joins: predmijat (~predmijat@mail.strogopro.com)
[08:15:12] *** Joins: frost (~frost@user/frost)
[08:15:12] *** Joins: KirkMcDonald (~Kirk@python/site-packages/KirkMcDonald)
[08:15:12] *** Joins: LtHummus (~lthummus@97.126.106.255)
[08:15:12] *** Joins: Church (~aleph@pool-98-116-232-112.nycmny.fios.verizon.net)
[08:15:12] *** Joins: dr0n (~nabromov@94.11.23.235)
[08:15:12] *** Joins: jpw (~jpw@user/jpw)
[08:15:12] *** Joins: sudoforge (~sudoforge@wireguard/tunneler/sudoforge)
[08:15:12] *** Joins: Led_Zeppelin2 (~user@cpe-68-172-241-89.nj.res.rr.com)
[08:15:12] *** Joins: AquaL1te (~AquaL1te@user/aqual1te)
[08:15:12] *** Joins: t0xicCode (~t0xicCode@user/t0xiccode)
[08:15:12] *** Joins: Xizor (~Xizor@151.ip-51-68-121.eu)
[08:15:12] *** Joins: kieren (~kieren@ec2-54-247-60-196.eu-west-1.compute.amazonaws.com)
[08:15:12] *** Joins: sneak (~sneak@datavi.be)
[08:15:12] *** Joins: svip (~svip@user/svip)
[08:15:12] *** Joins: kipukun (~kipukun@207.244.104.227)
[08:15:12] *** Joins: harley_l (~quassel@64.225.54.254)
[08:15:12] *** Joins: edr (~edr@user/edr)
[08:15:12] *** Joins: Jazzah (~jazz@user/jazzah)
[08:15:12] *** Joins: jaguar (~jag@li669-242.members.linode.com)
[08:15:12] *** Joins: dkeohane2 (~dkeohane@ec2-18-189-29-140.us-east-2.compute.amazonaws.com)
[08:15:12] *** Joins: thinkofher (~thinkofhe@user/thinkofher)
[08:15:12] *** Joins: pztrn (~pztrn@user/pztrn)
[08:15:12] *** Joins: hhes (sid420846@ilkley.irccloud.com)
[08:15:12] *** Joins: zaz\ (~zaz@poneybl.eu)
[08:15:12] *** Joins: obviyus (sid415299@user/obviyus)
[08:15:12] *** Joins: dreistadt (sid501648@lymington.irccloud.com)
[08:15:12] *** Joins: computerquip (sid423484@user/computerquip)
[08:15:12] *** Joins: wolfshappen (~waff@irc.furworks.de)
[08:15:12] *** Joins: jsrnop6 (~mark@user/jsrnop)
[08:15:12] *** Joins: gspbirel56 (~gspbirel5@c-73-214-199-7.hsd1.pa.comcast.net)
[08:15:12] *** Joins: GJdan (~quassel@107-190-25-70.cpe.teksavvy.com)
[08:15:12] *** Joins: novns (~novns@user/novns)
[08:17:07] *** Quits: wolfshappen (~waff@irc.furworks.de) (Max SendQ exceeded)
[08:17:36] *** Joins: wolfshappen (~waff@irc.furworks.de)
[08:20:41] *** Quits: LiftLeft (~LiftLeft@gateway/vpn/pia/liftleft) (Ping timeout: 250 seconds)
[08:21:17] *** Joins: alzgh (~alzgh@user/alzgh)
[08:23:34] *** Joins: monchi_ (~joints@143.198.92.132)
[08:25:02] *** Quits: monchi (~joints@143.198.92.132) (Remote host closed the connection)
[08:27:35] *** Joins: gggpkm_ (~gggpkm@60.10.194.43)
[08:28:28] *** monchi_ is now known as monchi
[08:30:50] *** Quits: gggpkm (~gggpkm@60.10.194.43) (Ping timeout: 244 seconds)
[08:34:55] *** Quits: marcel (~marcel@user/marcel) (Quit: The Lounge - https://thelounge.chat)
[08:35:24] *** Joins: andlabs (~andlabs@70.107.171.168)
[08:36:05] *** Joins: marcel (~marcel@user/marcel)
[08:40:32] *** Quits: michele (~eraser@user/michele) (Quit: restart)
[08:40:54] *** Joins: michele (~eraser@user/michele)
[08:41:53] *** gggpkm_ is now known as gggpkm
[08:43:14] *** Quits: AquaL1te (~AquaL1te@user/aqual1te) (Ping timeout: 244 seconds)
[08:49:38] *** Joins: gggpkm_ (~gggpkm@111.63.44.13)
[08:50:10] *** Quits: gspbirel56 (~gspbirel5@c-73-214-199-7.hsd1.pa.comcast.net) (Quit: Ping timeout (120 seconds))
[08:50:54] *** Joins: gspbirel56 (~gspbirel5@c-73-214-199-7.hsd1.pa.comcast.net)
[08:53:07] *** Quits: gggpkm (~gggpkm@60.10.194.43) (Ping timeout: 256 seconds)
[09:01:06] *** Joins: gggpkm__ (~gggpkm@125.33.87.172)
[09:03:38] *** Quits: aml (~antoon_i@h-85-24-213-163.A392.priv.bahnhof.se) (Quit: ZNC - https://znc.in)
[09:04:02] *** Quits: gggpkm_ (~gggpkm@111.63.44.13) (Ping timeout: 240 seconds)
[09:05:48] *** Joins: aml (~antoon_i@h-85-24-213-163.A392.priv.bahnhof.se)
[09:06:29] *** Quits: edr (~edr@user/edr) (Ping timeout: 244 seconds)
[09:07:08] *** Joins: edr (~edr@enlo.co)
[09:07:08] *** Quits: edr (~edr@enlo.co) (Changing host)
[09:07:08] *** Joins: edr (~edr@user/edr)
[09:07:35] *** Joins: gggpkm_ (~gggpkm@123.113.176.184)
[09:10:57] *** Quits: gggpkm__ (~gggpkm@125.33.87.172) (Ping timeout: 250 seconds)
[09:15:52] *** Joins: Batzy (~Batzy@user/batzy)
[09:16:44] <Batzy> hey all, I'm using go-pg to try to connect to a postgres db that's hosted locally on a docker container. I'm getting a lot of "connection" refused, and I suspect it has something to do with the Addr I'm providing to it. Does anyone know how to make this work?
[09:17:47] *** Quits: n1000 (~n1000@user/n1000) (Ping timeout: 264 seconds)
[09:20:31] <b0nn> Batzy: If your postgres is in a container, the first thing to check is if you can access the port on that container from whereever your code is running
[09:21:18] *** Quits: DM430784214 (~DM4307@c-73-15-244-129.hsd1.ca.comcast.net) (Quit: Ping timeout (120 seconds))
[09:21:27] <ramrunner> Batzy: have you exposed that container port to the machine that you will be connecting from? you can try with netcat to just connect to it.
[09:21:32] <b0nn> Because docker runs in its own little network, so, 1) are you trying to access that container from within the same container; or in another container in the same network, os from your host
[09:25:59] <Batzy> b0nn: the go application is on the host os, the postgres is in a db
[09:26:02] *** Quits: normen (~normen@p200300d71739c00084de120d4cbf430b.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[09:26:09] <Batzy> i suppose i can tie them all up in docker
[09:27:32] <b0nn> When you start the postgres container you can open the port and make it accessible from outside the docker network
[09:28:56] *** Quits: zwr (~zwr@2804:d45:b966:fb00:32fc:7d91:84d3:8a74) (Ping timeout: 268 seconds)
[09:29:32] *** Joins: shka (~herr@83.175.151.96.piasta.pl)
[09:30:48] <Batzy> b0nn: i did
[09:31:24] <Batzy> it says it's listening on 0.0.0.0 port 5432?
[09:32:41] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[09:33:02] <bookworm> that's in the container, not on the host
[09:34:14] <bookworm> docker has the -p  flag https://docs.docker.com/config/containers/container-networking/#published-ports
[09:34:36] <Batzy> im using docker-compose, i guess there's a similar flag
[09:34:41] <bookworm> you need to forward some port on the host to 5432 in the container
[09:34:45] *** Joins: jsrnop67 (~mark@user/jsrnop)
[09:35:53] <bookworm> compose calls it expose https://docs.docker.com/compose/compose-file/compose-file-v3/#expose
[09:35:56] *** Quits: jsrnop6 (~mark@user/jsrnop) (Ping timeout: 244 seconds)
[09:35:56] *** jsrnop67 is now known as jsrnop6
[09:36:34] <bookworm> actually, no scratch that
[09:36:42] <Batzy> that looked right
[09:36:47] <bookworm> that only works for other containers
[09:36:48] *** Quits: alzgh (~alzgh@user/alzgh) (Ping timeout: 256 seconds)
[09:37:29] <bookworm> it's ports as well https://docs.docker.com/compose/compose-file/compose-file-v3/#ports
[09:37:55] <Batzy> i have ports defined
[09:38:15] <bookworm> what are they?
[09:39:31] *** Joins: normen (~normen@p54b35890.dip0.t-ipconnect.de)
[09:39:49] <Batzy> I think it worked
[09:39:51] <Batzy> hm
[09:39:53] <Batzy> i added expose
[09:40:25] *** Quits: engest (~engest@50.53.244.75) (Ping timeout: 250 seconds)
[09:41:07] <bookworm> expose doesn't expose the port to the host, only other containers
[09:41:16] <b0nn> 17:01 < Batzy> it says it's listening on 0.0.0.0 port 5432?  <<-- this means "Listen on all interfaces that this OS knows about, the catch is that it's referring to all the interfaces that the docker container knows about, not the host
[09:41:17] *** Joins: zwr (~zwr@2804:d45:b966:fb00:8492:8a46:6313:2e5a)
[09:41:47] <b0nn> Because cgroups and such
[09:41:50] <bookworm> (from the same compose file / linked networks)
[09:42:47] <Batzy> so should the ports option in docker-compose just fix this for me?
[09:42:50] *** Quits: finnb (~finnb@51.15.63.237) (Quit: The Lounge - https://thelounge.chat)
[09:43:01] <Batzy> and i can tell go to connect to 0.0.0.0 5432
[09:43:07] <bookworm> by some definition of fix, yes
[09:43:24] <Batzy> nice
[09:43:25] <b0nn> ports: - 5432:5432 IIRC
[09:43:31] <bookworm> and you tell go to connect to localhost, not 0.0.0.0
[09:43:34] *** Joins: finnb (~finnb@51.15.63.237)
[09:43:41] <Batzy> ok
[09:43:46] <bookworm> the all zero address just makes sense for a listener
[09:44:16] *** Joins: iateadonut (~dan@121.177.17.154)
[09:44:26] *** Parts: iateadonut (~dan@121.177.17.154) ()
[09:44:30] *** Joins: iateadonut (~dan@121.177.17.154)
[09:44:32] <bookworm> it's a request to the software to install a listener pn all network interfaces, say eth0, vpn1 etc
[09:44:47] <iateadonut> i wrote some stuff that relies on os.Getenv()... but now i'm moving it to a package.  i guess packages should never depend on os.Getenv() and instead should have those values passed into them...?
[09:45:00] <bookworm> yes
[09:45:15] <Batzy> ok thanks all, i have to run
[09:45:19] <Batzy> it looks like that worked
[09:45:44] <iateadonut> bookworm, you were responding to me?
[09:46:05] <bookworm> yes
[09:46:13] <iateadonut> also, should os.Getenv() really just always be in func main(), even when the function it is utlimately going to be used is in package main?
[09:47:30] <bookworm> doesn't have to be in the main function, but usually env vars should get pulled in by the top level package. How that's structured is up to them, might just be in a config subpackage
[09:47:53] <b0nn> https://pkg.go.dev/os#LookupEnv is better (it has a bool to tell you if the value was in the environment or not)
[09:48:22] <bookworm> but you have to consider that some applications might want to load the config from a file or db rather than setting env vars
[09:48:31] <bpalmer> iateadonut: I think there is a lot of value in packages that avoid relying on global values (which environment variables are)
[09:49:04] <bpalmer> iateadonut: for example, what happens if there are two use cases for the package inside a program?
[09:49:34] *** Quits: c10l (~c10l@user/c10l) (Quit: The Lounge - https://thelounge.chat)
[09:50:00] *** Joins: c10l (~c10l@user/c10l)
[09:51:51] <bpalmer> on the other hand, you could encourage programs to use the environment variables; e.g., 'package fancysort; func NewConfigFromEnvironment() *Config { return &Config { Lang: os.Getenv("LC_LANG"), ... }'
[09:53:30] *** Quits: frost (~frost@user/frost) (Ping timeout: 244 seconds)
[09:54:18] *** Quits: zkanda (~zkanda@box.makean.art) (Quit: The Lounge - https://thelounge.chat)
[09:54:49] *** Joins: zkanda (~zkanda@box.makean.art)
[09:57:45] <iateadonut> thanks, lads
[09:58:13] *** Quits: iateadonut (~dan@121.177.17.154) (Quit: Leaving.)
[10:02:49] *** Quits: mdel1 (~mdel@user/mdel) (Quit: The Lounge - https://thelounge.chat)
[10:06:07] *** Quits: LawnGnome (~LawnGnome@user/lawngnome) (Quit: ZNC 1.8.2 - https://znc.in)
[10:06:54] *** Joins: LawnGnome (~LawnGnome@user/lawngnome)
[10:07:27] *** Quits: sudoforge (~sudoforge@wireguard/tunneler/sudoforge) (Ping timeout: 244 seconds)
[10:08:17] *** Quits: brainfreeze (~brainfree@2a03:1b20:4:f011::20d) (Quit: Leaving)
[10:11:46] <mickey8> when i run go test, i get go: updates to go.mod needed; to update it: go mod tidy, but running go mod tidy doesn't really get rid of that message
[10:11:50] <mickey8> what am i missing
[10:12:03] *** Quits: normen (~normen@p54b35890.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[10:20:59] *** Quits: mooff (mooff@awful.cooking) (Quit: Quit)
[10:21:52] *** Joins: mooff (mooff@awful.cooking)
[10:22:02] *** Joins: bkircher (~bkircher@2001:a61:25e1:a901:f7b9:7a2c:5cbb:7cb)
[10:22:56] *** Quits: kupi (uid212005@id-212005.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[10:22:58] *** Joins: DM430784214 (~DM4307@c-73-15-244-129.hsd1.ca.comcast.net)
[10:23:32] *** Joins: AquaL1te (~AquaL1te@user/aqual1te)
[10:26:28] <novns> mickey8, go mod vendor?
[10:27:15] *** Parts: mikey__ (~mikey__@user/mikey/x-6463285) (WeeChat 3.3)
[10:28:37] <mickey8> novns nope
[10:29:11] <b0nn> mickey8: do you have indirect dependencies that haven't been downloaded/installed to your disk
[10:29:21] <b0nn> do you have replace directives
[10:29:30] <b0nn> can you paste your go.mod?
[10:30:19] <mickey8> i dont think any indirect dep is missing, i have 1 replace directive (replace github.com/sivchari/gotwtr => ./fork/gotwtr), and i could paste it if you still think it's needed
[10:31:00] <b0nn> `go list all` shows anything missing?
[10:31:51] <mickey8> if you mean whether it tells me that X is missing, then no it doesn't
[10:32:00] *** Joins: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl)
[10:32:48] *** Quits: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl) (Client Quit)
[10:32:57] <b0nn> and, just for my sanity - you run `go test ./...` right
[10:33:42] <mickey8> yes, go test ./... works fine but go test ... doesn't
[10:33:53] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[10:34:24] <b0nn> oh, so the issue is `go test ...` isn't working?
[10:34:32] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Client Quit)
[10:34:53] <mickey8> aaand i guess i missed something stupid about the ./... and ... syntax and wasted your time
[10:35:19] <b0nn> lol, not a complete waste, I learnt about `go list all` :)
[10:35:33] *** Joins: mic4ael (~mic4ael@kolodzie-pc.cern.ch)
[10:35:54] <mickey8> thanks for your time
[10:36:14] *** Joins: jcajka (~jcajka@ip-86-49-254-207.net.upcbroadband.cz)
[10:36:27] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[10:36:55] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Client Quit)
[10:38:08] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[10:40:51] *** Joins: n1000 (~n1000@user/n1000)
[10:46:46] *** Joins: normen (~normen@p200300d71739c00084de120d4cbf430b.dip0.t-ipconnect.de)
[10:49:48] *** Quits: bkircher (~bkircher@2001:a61:25e1:a901:f7b9:7a2c:5cbb:7cb) (Remote host closed the connection)
[10:49:57] *** Quits: jpw (~jpw@user/jpw) (Remote host closed the connection)
[10:50:02] *** Joins: bkircher (~bkircher@2001:a61:25e1:a901:f7b9:7a2c:5cbb:7cb)
[10:50:52] *** Joins: jla (~jordi@64.225.79.195)
[10:51:02] *** Quits: normen (~normen@p200300d71739c00084de120d4cbf430b.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[10:51:23] *** Joins: jpw (~jpw@user/jpw)
[10:54:56] *** Joins: Armanzor (~Armanzor@user/armanzor)
[10:59:05] *** Joins: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl)
[10:59:26] *** Joins: kupi (uid212005@id-212005.hampstead.irccloud.com)
[11:08:06] *** Joins: gggpkm__ (~gggpkm@111.63.44.13)
[11:11:25] *** Quits: gggpkm_ (~gggpkm@123.113.176.184) (Ping timeout: 250 seconds)
[11:23:00] *** Quits: Fault (~Fault@152.70.112.168) (Quit: Quit.)
[11:27:53] *** Joins: mrig (~AdiIRC@user/mrig)
[11:29:05] *** Joins: mikoto-chan (~mikoto-ch@esm-84-240-99-143.netplaza.fi)
[11:29:38] *** Joins: gggpkm_ (~gggpkm@221.219.68.130)
[11:31:45] *** Joins: gggpkm (~gggpkm@111.63.44.13)
[11:32:32] *** Quits: gggpkm__ (~gggpkm@111.63.44.13) (Ping timeout: 240 seconds)
[11:33:21] *** Joins: Fault (~Fault@152.70.112.168)
[11:33:36] *** Joins: gggpkm__ (~gggpkm@111.63.44.13)
[11:34:23] *** Quits: gggpkm_ (~gggpkm@221.219.68.130) (Ping timeout: 250 seconds)
[11:36:32] *** Quits: gggpkm (~gggpkm@111.63.44.13) (Ping timeout: 240 seconds)
[11:39:33] *** Joins: gggpkm_ (~gggpkm@60.10.194.43)
[11:40:29] *** Joins: freakazoid12345 (~matt@2603-9000-cf0f-80e3-a5b1-905d-8e21-4dd9.inf6.spectrum.com)
[11:40:38] *** Joins: saschagrunert (~saschagru@46.128.124.46)
[11:42:02] *** Quits: gggpkm__ (~gggpkm@111.63.44.13) (Ping timeout: 240 seconds)
[11:43:02] *** Quits: freakazoid343 (~matt@2603:9000:cf0f:80e3:a5b1:905d:8e21:4dd9) (Ping timeout: 240 seconds)
[11:46:29] *** Guest6709 is now known as xzr
[11:51:36] *** Joins: gggpkm__ (~gggpkm@123.113.176.184)
[11:54:14] *** Quits: anticw (~anticw@157-131-246-230.fiber.dynamic.sonic.net) (Remote host closed the connection)
[11:54:27] *** Joins: normen (~normen@p54b35890.dip0.t-ipconnect.de)
[11:54:29] *** Joins: anticw (~anticw@157-131-246-230.fiber.dynamic.sonic.net)
[11:55:01] *** Quits: gggpkm_ (~gggpkm@60.10.194.43) (Ping timeout: 256 seconds)
[11:57:27] *** Quits: Fault (~Fault@152.70.112.168) (Quit: Quit.)
[11:58:19] *** Quits: anticw (~anticw@157-131-246-230.fiber.dynamic.sonic.net) (Remote host closed the connection)
[11:58:33] *** Joins: Fault (~Fault@152.70.112.168)
[11:59:02] *** Quits: normen (~normen@p54b35890.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[12:04:34] *** Quits: HisShadow (~HisShadow@user/hisshadow) (Read error: Connection reset by peer)
[12:05:38] *** Joins: anticw (~anticw@157-131-246-230.fiber.dynamic.sonic.net)
[12:06:32] *** Joins: HisShadow (~HisShadow@user/hisshadow)
[12:09:05] *** Joins: gggpkm_ (~gggpkm@60.10.194.43)
[12:09:52] *** Joins: arinov (~arinov@213.194.126.155)
[12:12:05] *** Quits: gggpkm__ (~gggpkm@123.113.176.184) (Ping timeout: 250 seconds)
[12:12:39] *** Joins: gggpkm (~gggpkm@221.219.68.130)
[12:14:51] *** Quits: gggpkm_ (~gggpkm@60.10.194.43) (Ping timeout: 256 seconds)
[12:19:15] *** Joins: Atque (~Atque@user/atque)
[12:28:18] *** Joins: vimal (~vimal@2a02:a210:9600:1600:3271:adb4:e3fb:289a)
[12:30:05] *** Joins: gggpkm_ (~gggpkm@221.219.68.130)
[12:33:19] *** Quits: gggpkm (~gggpkm@221.219.68.130) (Ping timeout: 250 seconds)
[12:38:57] *** Quits: jla (~jordi@64.225.79.195) (Ping timeout: 250 seconds)
[12:52:41] *** Joins: gggpkm__ (~gggpkm@221.219.68.130)
[12:55:09] *** Joins: Ergo^ (~ergo@91.238.59.144)
[12:55:42] *** Quits: anticw (~anticw@157-131-246-230.fiber.dynamic.sonic.net) (Remote host closed the connection)
[12:55:51] *** Quits: gggpkm_ (~gggpkm@221.219.68.130) (Ping timeout: 250 seconds)
[12:57:05] *** Joins: anticw (~anticw@157-131-246-230.fiber.dynamic.sonic.net)
[12:58:59] *** Joins: gggp (~gggp@111-251-148-239.dynamic-ip.hinet.net)
[12:59:02] *** Quits: vimal (~vimal@2a02:a210:9600:1600:3271:adb4:e3fb:289a) (Ping timeout: 240 seconds)
[12:59:29] * Mattiaslndstrm Hello! This function is from The Go Programming Language. Why is it necessary to check if zcap < 2*len(x) on line 18? I can't see that ever being true. https://play.golang.org/p/G6kmJ_CFic7
[12:59:57] <Mattiaslndstrm> being false I mean
[13:00:11] *** Quits: AquaL1te (~AquaL1te@user/aqual1te) (Ping timeout: 256 seconds)
[13:00:37] *** Quits: rcernin (~rcernin@124.190.139.235) (Ping timeout: 250 seconds)
[13:01:39] *** Joins: AquaL1te (~AquaL1te@user/aqual1te)
[13:04:51] *** Quits: GJdan (~quassel@107-190-25-70.cpe.teksavvy.com) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[13:09:11] *** Quits: kupi (uid212005@id-212005.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[13:11:32] *** Joins: vimal (~vimal@2a02:a210:9600:1600:4fb4:e20f:72bc:9bf8)
[13:12:57] *** Quits: Fault (~Fault@152.70.112.168) (Quit: Quit.)
[13:14:46] <sztanpet> how can you be sure?
[13:15:10] <sztanpet> you are accepting slices as arguments, the function is not creating the x or y slices
[13:16:59] <sztanpet> the point of that logic is to not double the slice capacity if its not needed
[13:18:10] *** Joins: Modervomubel (~gnuman@c-76-104-144-218.hsd1.wa.comcast.net)
[13:18:34] *** Quits: LogicAside (~LogicAsid@user/logicaside) (Ping timeout: 260 seconds)
[13:19:02] *** Quits: Gnuman (~gnuman@user/gnuman) (Ping timeout: 260 seconds)
[13:20:23] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[13:21:43] *** Joins: LogicAside (~LogicAsid@user/logicaside)
[13:21:50] *** Quits: yelnah (~felix@110-175-211-64.static.tpgi.com.au) (Ping timeout: 260 seconds)
[13:21:58] *** Joins: rcernin (~rcernin@2001:8003:6803:db00:a917:ef6e:7da9:99ec)
[13:21:58] <sztanpet> and on why you double the capacity when you need to reallocate it: https://en.wikipedia.org/wiki/Dynamic_array#Geometric_expansion_and_amortized_cost
[13:24:05] *** Joins: gggpkm_ (~gggpkm@221.219.68.130)
[13:27:03] *** Quits: gggpkm__ (~gggpkm@221.219.68.130) (Ping timeout: 250 seconds)
[13:29:47] *** Joins: Fault (~Fault@152.70.112.168)
[13:30:35] *** Quits: anticw (~anticw@157-131-246-230.fiber.dynamic.sonic.net) (Remote host closed the connection)
[13:30:57] *** Joins: normen (~normen@p54b35890.dip0.t-ipconnect.de)
[13:31:57] *** Joins: alzgh (~alzgh@user/alzgh)
[13:32:02] *** Joins: anticw (~anticw@157-131-246-230.fiber.dynamic.sonic.net)
[13:32:28] <alzgh> is `int` normaly `int32`?
[13:32:52] *** Joins: jla (~jordi@64.225.79.195)
[13:33:37] <KirkMcDonald> alzgh: It depends on the architecture. It should normally match the word size of the system.
[13:33:53] <KirkMcDonald> So 64 bits on 64-bit systems, etc.
[13:34:19] <alzgh> OK, thank you.
[13:39:10] *** Joins: nuh^ (~nuh@h50.174.139.63.static.ip.windstream.net)
[13:45:02] *** Quits: rcernin (~rcernin@2001:8003:6803:db00:a917:ef6e:7da9:99ec) (Ping timeout: 240 seconds)
[13:45:38] *** Quits: gggp (~gggp@111-251-148-239.dynamic-ip.hinet.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[13:48:06] *** Joins: gggpkm__ (~gggpkm@111.63.44.13)
[13:50:32] *** Joins: yelnah (~felix@123-243-255-43.static.tpgi.com.au)
[13:51:19] *** Quits: gggpkm_ (~gggpkm@221.219.68.130) (Ping timeout: 250 seconds)
[13:52:16] *** Quits: anticw (~anticw@157-131-246-230.fiber.dynamic.sonic.net) (Remote host closed the connection)
[13:53:45] *** Joins: anticw (~anticw@157-131-246-230.fiber.dynamic.sonic.net)
[13:53:52] *** Joins: livingsilver94 (~livingsil@user/livingsilver94)
[13:54:01] *** Quits: HisShadow (~HisShadow@user/hisshadow) (Ping timeout: 256 seconds)
[13:55:47] *** Joins: HisShadow (~HisShadow@user/hisshadow)
[13:55:58] <livingsilver94> hi! simple question I believe: I have a struct, let's call it S, that reads an io.Reader field in chunks. S has an internal buffer. What's the mos common practice between: 1) returning the byte slice at every ReadChunk() call; 2) Return a copied chunk, so that it's owned by the caller ?
[13:58:02] *** Quits: yelnah (~felix@123-243-255-43.static.tpgi.com.au) (Quit: ZNC 1.8.2 - https://znc.in)
[14:00:24] *** Joins: yelnah (~felix@193-119-71-4.tpgi.com.au)
[14:06:17] *** Joins: theoceaniscool (~theoceani@119.12.232.133)
[14:14:55] *** Quits: mikoto-chan (~mikoto-ch@esm-84-240-99-143.netplaza.fi) (Quit: mikoto-chan)
[14:19:19] *** Quits: yelnah (~felix@193-119-71-4.tpgi.com.au) (Quit: ZNC 1.8.2 - https://znc.in)
[14:22:04] <fizzie> Probably 1, because it allows you to make copies when they're needed, while 2 doesn't give you the possibility to *not* make them.
[14:22:08] <fizzie> That's what bufio.Reader.ReadSlice and bufio.Scanner.Bytes do, at least.
[14:22:35] *** Joins: gggpkm_ (~gggpkm@60.10.194.43)
[14:24:26] *** Joins: yelnah (~felix@193-82-231-152.tpgi.com.au)
[14:25:32] *** Quits: gggpkm__ (~gggpkm@111.63.44.13) (Ping timeout: 240 seconds)
[14:27:42] *** Joins: gggpkm__ (~gggpkm@221.219.68.130)
[14:27:46] <fizzie> (Of course if you can't think of a circumstance where you'd call that method and not make a copy, that might be a sign you could do 2 instead.)
[14:28:42] *** Quits: thing (~thing@user/thing) (Ping timeout: 276 seconds)
[14:29:54] <livingsilver94> fizzie: fine, I'll stick with the standard library behavior for consistency :)
[14:30:51] *** Quits: gggpkm_ (~gggpkm@60.10.194.43) (Ping timeout: 256 seconds)
[14:32:35] *** Joins: gggpkm_ (~gggpkm@60.10.194.43)
[14:33:21] *** Quits: normen (~normen@p54b35890.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[14:35:57] *** Quits: gggpkm__ (~gggpkm@221.219.68.130) (Ping timeout: 250 seconds)
[14:36:27] *** Joins: neurocyte0132889 (~neurocyte@212.232.89.58)
[14:36:27] *** Quits: neurocyte0132889 (~neurocyte@212.232.89.58) (Changing host)
[14:36:27] *** Joins: neurocyte0132889 (~neurocyte@user/neurocyte)
[14:36:48] *** Quits: bkircher (~bkircher@2001:a61:25e1:a901:f7b9:7a2c:5cbb:7cb) (Remote host closed the connection)
[14:37:02] *** Joins: bkircher (~bkircher@2001:a61:25e1:a901:4c54:5233:455b:bb04)
[14:38:13] *** Quits: jpw (~jpw@user/jpw) (Ping timeout: 256 seconds)
[14:41:38] *** Joins: krux02 (~krux02@p200300e817076e0044b6cdb56690220d.dip0.t-ipconnect.de)
[14:42:18] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[14:42:36] *** Joins: gggpkm__ (~gggpkm@111.63.44.13)
[14:46:09] *** Quits: gggpkm_ (~gggpkm@60.10.194.43) (Ping timeout: 256 seconds)
[14:54:20] *** Joins: normen (~normen@p54b35890.dip0.t-ipconnect.de)
[14:55:11] *** Quits: arinov (~arinov@213.194.126.155) (Quit: WeeChat 3.3)
[14:55:24] *** Joins: thing (~thing@user/thing)
[14:56:28] *** Joins: gggp (~gggp@111-251-148-239.dynamic-ip.hinet.net)
[14:58:32] *** Quits: normen (~normen@p54b35890.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[14:59:07] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[14:59:40] *** Quits: bloony (~tjellomat@2001:470:69fc:105::3aac) (Quit: Reconnecting)
[14:59:53] *** Joins: bloony (~tjellomat@2001:470:69fc:105::3aac)
[15:00:48] *** Joins: voidnoir0_ (uid343973@id-343973.tinside.irccloud.com)
[15:01:21] *** Joins: sudoforge (~sudoforge@wireguard/tunneler/sudoforge)
[15:01:47] <bloony> My irc bridge was down so posting this again.. sorry to matrix users :/ Is there a way to know what interface was passed to MyFunc inside MyFunc here? https://play.golang.org/p/TDKANcxwp64
[15:02:59] <Sam> What do you mean by "what interface"? Ie. what would you want that to print?
[15:03:33] <bloony> Sam: I want it to print MyIFace
[15:03:55] <bloony> as that is the interface type I am sending in
[15:15:29] *** Quits: gggp (~gggp@111-251-148-239.dynamic-ip.hinet.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[15:16:41] *** Quits: AquaL1te (~AquaL1te@user/aqual1te) (Ping timeout: 250 seconds)
[15:17:54] <Sam> I don't believe that's possible, the underlying type will be passed in and the type that it was before will be elided by the empty interface. I could be wrong though, and I believe this would be implementation specific, so it may not be the same in the main Go compiler vs. GCC or something else.
[15:18:38] *** Joins: AquaL1te (~AquaL1te@user/aqual1te)
[15:19:38] <bloony> I see. I think I found a better way to solve what I am  trying to do anyway though :)
[15:19:44] <Sam> If you just want to check that a type implements that specific interface you could use https://pkg.go.dev/reflect#Type.Implements but actually getting the name is kind of contrary to how interfaces work
[15:20:11] <Sam> Oh nevermind, good, glad you figured it out. As a general rule of thumb if you're importing the "reflect" package, you're probably doing it wrong and it's not what you need :)
[15:23:37] *** Quits: jla (~jordi@64.225.79.195) (Ping timeout: 250 seconds)
[15:24:02] <bloony> yeah I am trying to avoid reflect.. this is for some cli output and I do use it there.. But this is from when I started using go.. maybe I can try to look at it again and see if I learned some new tricks so I can remove it.. :)
[15:24:55] *** Joins: iateadonut (~dan@121.177.17.154)
[15:25:02] *** Parts: iateadonut (~dan@121.177.17.154) ()
[15:25:37] *** Joins: gggpkm_ (~gggpkm@60.10.194.43)
[15:28:32] *** Quits: gggpkm__ (~gggpkm@111.63.44.13) (Ping timeout: 240 seconds)
[15:29:38] *** Quits: nuh^ (~nuh@h50.174.139.63.static.ip.windstream.net) (Remote host closed the connection)
[15:29:53] <fizzie> Yeah, I think the thing there is, when you convert a value of type `MyIface` to one of type `interface{}`, what you get is just the same (dynamic type = MyType, value) pair with the static type `interface{}`, *not* an `interface{}` that would have MyIface as its dynamic type. It's probably not even possible to construct an interface value like that.
[15:31:01] <bloony> it does run though?
[15:31:41] *** Quits: freakazoid12345 (~matt@2603-9000-cf0f-80e3-a5b1-905d-8e21-4dd9.inf6.spectrum.com) (Read error: Connection reset by peer)
[15:31:48] <fizzie> I mean, it's not possible to have an `interface{}` that would contain in the type descriptor field a reference to another interface type like MyIface.
[15:32:26] *** Joins: freakazoid12345 (~matt@2603:9000:cf0f:80e3:a5b1:905d:8e21:4dd9)
[15:32:29] <fizzie> (Which is what you'd need to make it possible for the function to pritn "MyIface".)
[15:33:05] <fizzie> https://go.dev/blog/laws-of-reflection "One important detail is that the pair inside an interface always has the form (value, concrete type) and cannot have the form (value, interface type). Interfaces do not hold interface values."
[15:33:23] *** Joins: iateadonut (~dan@121.177.17.154)
[15:33:46] <iateadonut> I'm trying to save a uuid as a Memo field on a Stellar transaction.   The memo field will take a string of 28 bytes or less; (as a string, a  uuid is 36 bytes, so that won't work).  It can also take a hash of 32  bytes.  As bytes a uuid is 16 bytes.  So I'm wondering if there's a way to convert/double my uuid into a byte type that is 32 bytes?
[15:35:27] <fizzie> Assuming it makes sense in the first place, surely you can just 0-pad the 16 bytes to 32.
[15:36:06] <fizzie> Other options: a base-64 encoding of 16 bytes takes 24 bytes, so would fit in a string of "28 bytes or less".
[15:37:05] *** Quits: bkircher (~bkircher@2001:a61:25e1:a901:4c54:5233:455b:bb04) (Ping timeout: 268 seconds)
[15:37:26] *** Joins: rcernin (~rcernin@2001:8003:6803:db00:a917:ef6e:7da9:99ec)
[15:37:28] <fizzie> (Or 22 with the padding omitted.)
[15:38:03] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[15:40:46] *** Joins: gggpkm__ (~gggpkm@60.10.194.43)
[15:41:56] <bloony> fizzie: aha right
[15:42:14] *** Joins: leitz (~LeamHall@cpe-173-172-58-72.tx.res.rr.com)
[15:43:52] *** Quits: rcernin (~rcernin@2001:8003:6803:db00:a917:ef6e:7da9:99ec) (Ping timeout: 268 seconds)
[15:43:57] *** Quits: gggpkm_ (~gggpkm@60.10.194.43) (Ping timeout: 256 seconds)
[15:45:38] *** Joins: rcernin (~rcernin@2001:8003:6803:db00:a917:ef6e:7da9:99ec)
[15:49:37] *** Quits: livingsilver94 (~livingsil@user/livingsilver94) (Ping timeout: 256 seconds)
[15:50:29] *** Quits: rcernin (~rcernin@2001:8003:6803:db00:a917:ef6e:7da9:99ec) (Ping timeout: 250 seconds)
[15:50:33] *** Joins: livingsilver94 (~livingsil@user/livingsilver94)
[15:51:49] *** Joins: gggpkm_ (~gggpkm@221.219.68.130)
[15:53:52] *** Quits: gggpkm_ (~gggpkm@221.219.68.130) (Remote host closed the connection)
[15:54:15] *** Joins: gggpkm_ (~gggpkm@111.63.44.13)
[15:54:30] *** Quits: gggpkm__ (~gggpkm@60.10.194.43) (Ping timeout: 260 seconds)
[15:55:07] *** Joins: strubbl891941988 (~strubbl@ipb21a9322.dynamic.kabel-deutschland.de)
[15:55:41] *** Joins: CoolerX (~CoolerX@user/coolerx)
[15:59:25] *** Joins: __alex (~alex@ip5f5afef3.dynamic.kabel-deutschland.de)
[16:00:04] *** Joins: orn (~orn@2a01:6f00:2:a51d:468a:5bff:fea5:bf9d)
[16:01:08] *** Joins: normen (~normen@p200300d71739c00084de120d4cbf430b.dip0.t-ipconnect.de)
[16:02:01] *** Joins: freakazoid343 (~matt@2603:9000:cf0f:80e3:a5b1:905d:8e21:4dd9)
[16:03:06] *** Joins: gggpkm__ (~gggpkm@60.10.194.43)
[16:04:32] *** Quits: freakazoid12345 (~matt@2603:9000:cf0f:80e3:a5b1:905d:8e21:4dd9) (Ping timeout: 240 seconds)
[16:04:41] *** Quits: freakazoid343 (~matt@2603:9000:cf0f:80e3:a5b1:905d:8e21:4dd9) (Read error: Connection reset by peer)
[16:04:51] *** Quits: jjonah (~jjonah@p200300d5d7058900dea632fffeb3342f.dip0.t-ipconnect.de) (Remote host closed the connection)
[16:04:58] *** Joins: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be)
[16:05:26] *** Joins: freakazoid343 (~matt@2603-9000-cf0f-80e3-a5b1-905d-8e21-4dd9.inf6.spectrum.com)
[16:06:02] *** Quits: gggpkm_ (~gggpkm@111.63.44.13) (Ping timeout: 240 seconds)
[16:06:23] *** Joins: bkircher (~bkircher@2001:a61:25e1:a901:4c54:5233:455b:bb04)
[16:07:10] *** gggpkm__ is now known as gggpkm
[16:10:51] *** Joins: esro (~esro@nat1.krakowskiinternet.pl)
[16:16:29] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[16:18:16] *** Quits: thing (~thing@user/thing) (Remote host closed the connection)
[16:18:36] *** Joins: thing (~thing@user/thing)
[16:20:07] *** Joins: mikoto-chan (~mikoto-ch@esm-84-240-99-143.netplaza.fi)
[16:26:05] *** Parts: livingsilver94 (~livingsil@user/livingsilver94) (Konversation terminated!)
[16:27:30] <bloony> hmm.. from Sam's answer before I realized I don't know how golang is compiled.. is it transpiled to c/c++ and then compiled? ref "main Go compiler vs. GCC"
[16:30:15] <siXy> No.
[16:31:10] <siXy> It's compiled directly. What that is referring to is that it is possible (though these days not generally useful) to compile it via gcc instead of the main go compiler
[16:31:41] <bloony> okay
[16:32:15] <bloony> so with gcc its go > c > binary?
[16:32:16] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[16:32:33] <siXy> No? I'm not sure why you think gcc is tied to C.
[16:33:06] <siXy> Just because the C frontend to GCC is perhaps the most well known, doesn't mean it's the only one, or that other frontends go via a C stage.
[16:33:56] *** Parts: thing (~thing@user/thing) (WeeChat 3.3)
[16:34:13] *** Joins: gggpkm_ (~gggpkm@221.219.68.130)
[16:34:48] <sztanpet> there are multiple C-s in gcc tho
[16:35:19] <bloony> aha okay I've been mixing up what gcc actually is.
[16:35:24] <siXy> sztanpet: I'm not sure what you're trying to get at there.
[16:35:38] <sztanpet> siXy joke :)
[16:35:46] <siXy> oh, sorry!
[16:37:11] *** Quits: schaeffer (~schaeffer@user/schaeffer) (Ping timeout: 245 seconds)
[16:37:13] *** Quits: gggpkm (~gggpkm@60.10.194.43) (Ping timeout: 256 seconds)
[16:37:24] *** Quits: _nuke (~nuke@50-193-103-211-static.hfc.comcastbusiness.net) (Read error: Connection reset by peer)
[16:38:37] <siXy> anyway, these days the pure go compiler is very good, and I can't think of a reason to ever use gcc anymore (there's probably something related to cross compiling on some wierd embedded arch, but that's not really my field)
[16:38:55] *** Joins: jla (~jordi@64.225.79.195)
[16:38:59] *** Quits: Maxattax (~max@50-195-160-193-static.hfc.comcastbusiness.net) (Ping timeout: 246 seconds)
[16:39:14] <bloony> I see
[16:43:20] *** Joins: bindu (~bindu@user/bindu)
[16:49:20] *** Joins: Xjs (~jannis@user/xjs)
[16:49:59] *** Quits: Wouter0100 (~Wouter010@entry.nbg.netvos.nl) (Remote host closed the connection)
[16:50:15] *** Joins: Wouter0100 (~Wouter010@entry.nbg.netvos.nl)
[16:51:12] *** Quits: _xor (~xor@72.49.199.147) (Quit: brb)
[16:52:10] *** Joins: gggpkm__ (~gggpkm@123.113.191.141)
[16:52:46] *** Joins: sleepingforest (~sleepingf@user/sleepingforest)
[16:54:54] <rawtaz> im looking at https://pkg.go.dev/golang.org/x/sys/windows/svc/eventlog for simply logging a piece of text to the event log in windows every now and then (the application is started, done in a minute, shuts down, about once an hour). it looks like you have to install the app as an event source, but i dont see a way to check if it's already been installed? it seems silly to install it every time you want to start sending stuff to the event log.
[16:55:03] *** Quits: gggpkm_ (~gggpkm@221.219.68.130) (Ping timeout: 250 seconds)
[16:55:25] <sleepingforest> anything similar to APScheduler from python? closest thing i found is go-quartz
[16:56:21] *** Quits: nostalgia (~nostalgia@2601:243:c600:95f0:22f1:3efe:9b37:299c) (Ping timeout: 245 seconds)
[16:57:25] <Sam> Apparently you can't have package foo_test with a TestMain function in it. I guess I've never tried this before; no idea how this is handled internally, but it starts complaining that two packages exist (foo and foo_test) if you do this. Has anyone run into this issue before, and what did you do?
[17:00:56] <siXy> Sam: Uh, normally foo_test.go would be package foo, if it's in the same directory as foo.go - what are you trying to do where this isn't the case anymore?
[17:01:13] <siXy> Or did I misunderstand your question?
[17:02:19] <siXy> If you want something integration test-y where you're writing a package foo_test, then I'd chuck that out to a /tests/ dir
[17:02:55] *** Joins: volt (~volt@67.197.6.215)
[17:02:59] <siXy> (I'm assuming that we're not using bazel or complex makefile hacks to have >1 package per dir in this scenario)
[17:07:56] *** Joins: schaeffer (~schaeffer@user/schaeffer)
[17:09:19] *** Joins: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com)
[17:13:59] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Remote host closed the connection)
[17:14:46] *** Joins: nostalgia (~nostalgia@2601:243:c600:95f0:22f1:3efe:9b37:299c)
[17:14:55] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[17:16:11] *** Joins: paulgrmn_ (~paulgrmn@user/paulgrmn)
[17:16:22] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[17:16:47] *** Quits: gggpkm__ (~gggpkm@123.113.191.141) (Ping timeout: 246 seconds)
[17:17:16] *** Joins: _nuke (~nuke@50-193-103-211-static.hfc.comcastbusiness.net)
[17:22:53] *** Quits: nostalgia (~nostalgia@2601:243:c600:95f0:22f1:3efe:9b37:299c) (Ping timeout: 264 seconds)
[17:23:09] *** Quits: _nuke (~nuke@50-193-103-211-static.hfc.comcastbusiness.net) (Ping timeout: 268 seconds)
[17:26:17] *** Joins: _xor (~xor@72.49.199.147)
[17:26:48] <fizzie> I feel like sometimes people use the `_test`-suffixed separate package name feature even when it's more of a unit test, just to enforce a "test the interface, not the implementation" kind of perspective.
[17:27:56] <fizzie> (go help test: "Test files that declare a package with the suffix "_test" will be compiled as a separate package, and then linked and run with the main test binary." No mention that using TestMain would make a difference, but then again a TestMain is already an exceptional case.)
[17:28:02] *** Quits: Teckla (~Teckla@user/teckla) (Quit: leaving)
[17:28:17] *** Joins: normen_ (~normen@p54b35890.dip0.t-ipconnect.de)
[17:29:17] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[17:29:36] <siXy> TestMain works fine in a separate _test package (there's some examples in stdlib if you need proof!) - so my guess is that Sam's doing something akin to go test *.go, which is picking up multiple packages in the same dir, and (not unreasonably) refusing to continue.
[17:29:45] *** Joins: nostalgia (~nostalgia@2601:243:c600:95f0:22f1:3efe:9b37:299c)
[17:29:50] *** Quits: voidnoir0_ (uid343973@id-343973.tinside.irccloud.com) (Quit: Connection closed for inactivity)
[17:30:11] <siXy> Hence my suggestion of bumping 'em out to /tests/ if you want to do that.
[17:30:33] *** Quits: normen (~normen@p200300d71739c00084de120d4cbf430b.dip0.t-ipconnect.de) (Ping timeout: 268 seconds)
[17:30:35] *** normen_ is now known as normen
[17:32:27] *** Joins: Teckla (~Teckla@user/teckla)
[17:37:11] *** Joins: rcernin (~rcernin@2001:8003:6803:db00:a917:ef6e:7da9:99ec)
[17:38:36] *** Joins: _nuke (~nuke@50-193-103-211-static.hfc.comcastbusiness.net)
[17:40:58] *** Quits: nostalgia (~nostalgia@2601:243:c600:95f0:22f1:3efe:9b37:299c) (Remote host closed the connection)
[17:41:25] *** Quits: esro (~esro@nat1.krakowskiinternet.pl) (Quit: Leaving)
[17:41:38] *** Quits: rcernin (~rcernin@2001:8003:6803:db00:a917:ef6e:7da9:99ec) (Ping timeout: 246 seconds)
[17:42:00] *** Joins: nostalgia (~nostalgia@2601:243:c600:95f0:22f1:3efe:9b37:299c)
[17:42:11] *** Quits: Scarecr0w (scarecr0w@user/scarecr0w) (Ping timeout: 245 seconds)
[17:42:31] *** Quits: _nuke (~nuke@50-193-103-211-static.hfc.comcastbusiness.net) (Client Quit)
[17:45:24] *** Joins: _nuke (~nuke@50-193-103-211-static.hfc.comcastbusiness.net)
[17:45:38] *** Quits: jla (~jordi@64.225.79.195) (Quit: Leaving.)
[17:46:42] *** Joins: Scarecr0w (scarecr0w@user/scarecr0w)
[17:46:47] *** ox is now known as oz
[17:53:53] *** Joins: arinov (~arinov@213.194.126.155)
[17:54:12] *** Joins: Maxattax (~max@50-195-160-193-static.hfc.comcastbusiness.net)
[17:58:45] *** Joins: edrocks (~Ed@user/edrocks)
[18:03:54] *** Joins: cnf (~cnf@d5152daf0.static.telenet.be)
[18:05:57] *** Joins: engest (~engest@50.53.244.183)
[18:12:18] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[18:15:14] *** Joins: jla (~jordi@64.225.79.195)
[18:19:25] *** Joins: esro (~esro@nat1.krakowskiinternet.pl)
[18:20:05] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[18:30:06] *** Joins: aniruddha (uid340443@id-340443.ilkley.irccloud.com)
[18:36:45] *** Joins: Tv_ (uid62079@user/tv/x-3144562)
[18:41:51] *** Quits: tristero (~nobody@user/tristero) (Quit: WeeChat 3.3)
[18:43:32] *** Joins: LiftLeft (~LiftLeft@gateway/vpn/pia/liftleft)
[18:54:42] *** Quits: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl) (Quit: jaca122)
[19:06:21] *** Joins: Aslandro (~aslandro@94-37-51-34.adsl-ull.clienti.tiscali.it)
[19:12:58] *** Joins: internut (~internut@2601:280:4e00:7b70:45b4:c9b0:362b:f2b0)
[19:21:50] *** Quits: edrocks (~Ed@user/edrocks) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[19:24:22] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[19:24:52] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Client Quit)
[19:30:32] *** Quits: CoolerX (~CoolerX@user/coolerx) (Ping timeout: 240 seconds)
[19:30:57] *** Quits: jla (~jordi@64.225.79.195) (Quit: Leaving.)
[19:31:20] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[19:31:53] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Client Quit)
[19:32:44] *** Joins: X-Scale` (~ARM@165.201.137.78.rev.vodafone.pt)
[19:33:02] *** Quits: X-Scale (~ARM@46.50.3.203) (Ping timeout: 240 seconds)
[19:34:31] *** X-Scale` is now known as X-Scale
[19:40:04] *** Joins: CoolerX (~CoolerX@user/coolerx)
[19:40:26] *** muirrum_ is now known as muirrum
[19:41:04] *** Quits: esro (~esro@nat1.krakowskiinternet.pl) (Quit: Leaving)
[19:42:26] *** Quits: saschagrunert (~saschagru@46.128.124.46) (Remote host closed the connection)
[19:50:11] *** Joins: independent56 (~independe@2.31.88.37)
[19:54:44] *** Joins: tyson2 (~user@bras-base-toroon0628w-grc-46-142-112-141-177.dsl.bell.ca)
[19:56:04] *** Quits: andlabs (~andlabs@70.107.171.168) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[19:56:40] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[20:08:38] *** Quits: alzgh (~alzgh@user/alzgh) (Ping timeout: 256 seconds)
[20:11:26] *** Quits: CoolerX (~CoolerX@user/coolerx) (Ping timeout: 246 seconds)
[20:12:15] *** Joins: freakazoid12345 (~matt@2603-9000-cf0f-80e3-381f-5f31-286f-e038.inf6.spectrum.com)
[20:12:59] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 244 seconds)
[20:15:15] *** Quits: freakazoid343 (~matt@2603-9000-cf0f-80e3-a5b1-905d-8e21-4dd9.inf6.spectrum.com) (Ping timeout: 250 seconds)
[20:15:32] *** Parts: iateadonut (~dan@121.177.17.154) ()
[20:18:23] *** Quits: Armanzor (~Armanzor@user/armanzor) (Quit: Leaving)
[20:20:50] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[20:22:02] *** Joins: CoolerX (~CoolerX@user/coolerx)
[20:22:07] *** Joins: andlabs (~andlabs@2604:ca00:170:20a8:f9bd:c554:65d9:7433)
[20:22:33] *** Quits: tyson2 (~user@bras-base-toroon0628w-grc-46-142-112-141-177.dsl.bell.ca) (Remote host closed the connection)
[20:22:33] *** Joins: alzgh (alzgh@user/alzgh)
[20:23:35] *** Quits: alzgh (alzgh@user/alzgh) (Remote host closed the connection)
[20:26:07] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[20:29:29] *** Quits: arinov (~arinov@213.194.126.155) (Ping timeout: 264 seconds)
[20:30:18] *** Joins: alzgh (~alzgh@user/alzgh)
[20:30:24] *** Joins: andlabs_ (~andlabs@2604:ca00:170:20a8:2df1:a2b2:e205:a349)
[20:30:52] *** Quits: bkircher (~bkircher@2001:a61:25e1:a901:4c54:5233:455b:bb04) (Ping timeout: 250 seconds)
[20:33:29] *** Quits: andlabs (~andlabs@2604:ca00:170:20a8:f9bd:c554:65d9:7433) (Ping timeout: 246 seconds)
[20:33:46] *** Quits: Aslandro (~aslandro@94-37-51-34.adsl-ull.clienti.tiscali.it) (Remote host closed the connection)
[20:34:11] *** Joins: Aslandro (~aslandro@94-37-51-34.adsl-ull.clienti.tiscali.it)
[20:35:48] *** Joins: andlabs (~andlabs@2604:ca00:170:20a8:ec5e:697e:851c:4825)
[20:36:25] *** Quits: engest (~engest@50.53.244.183) (Quit: Leaving)
[20:39:05] *** Quits: andlabs_ (~andlabs@2604:ca00:170:20a8:2df1:a2b2:e205:a349) (Ping timeout: 246 seconds)
[20:41:21] *** Joins: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl)
[20:43:36] *** Joins: andlabs_ (~andlabs@2604:ca00:170:20a8:e0da:1b6:3a4c:bd2d)
[20:47:02] *** Quits: andlabs (~andlabs@2604:ca00:170:20a8:ec5e:697e:851c:4825) (Ping timeout: 240 seconds)
[20:50:38] *** Joins: andlabs (~andlabs@2604:ca00:170:20a8:d514:8a56:a616:7e08)
[20:54:02] *** Quits: andlabs_ (~andlabs@2604:ca00:170:20a8:e0da:1b6:3a4c:bd2d) (Ping timeout: 240 seconds)
[20:56:43] *** Joins: andlabs_ (~andlabs@2604:ca00:170:20a8:a064:e38e:9f3d:82ac)
[20:59:32] *** Quits: andlabs (~andlabs@2604:ca00:170:20a8:d514:8a56:a616:7e08) (Ping timeout: 240 seconds)
[21:01:30] *** Quits: vhost- (~vhost@65.102.48.134) (Changing host)
[21:01:30] *** Joins: vhost- (~vhost@user/vhost-)
[21:04:39] *** Quits: independent56 (~independe@2.31.88.37) (Ping timeout: 250 seconds)
[21:07:52] *** Joins: jpw (~jpw@user/jpw)
[21:08:40] *** Joins: fikran (~fikran@user/fikran)
[21:08:41] *** Joins: andlabs (~andlabs@2604:ca00:170:20a8:b4bc:61a:6b45:31a7)
[21:09:01] *** Joins: edrocks (~Ed@user/edrocks)
[21:10:10] *** Joins: arinov (~arinov@176.89.7.184)
[21:12:02] *** Quits: andlabs_ (~andlabs@2604:ca00:170:20a8:a064:e38e:9f3d:82ac) (Ping timeout: 240 seconds)
[21:14:30] *** Joins: andlabs_ (~andlabs@2604:ca00:170:20a8:ccd3:5f35:52d4:7c89)
[21:14:53] *** Quits: X-Scale (~ARM@165.201.137.78.rev.vodafone.pt) (Ping timeout: 256 seconds)
[21:15:56] *** Joins: X-Scale` (~ARM@31.22.162.107)
[21:17:29] *** Quits: jpw (~jpw@user/jpw) (Ping timeout: 264 seconds)
[21:17:33] *** X-Scale` is now known as X-Scale
[21:17:56] *** Quits: andlabs (~andlabs@2604:ca00:170:20a8:b4bc:61a:6b45:31a7) (Ping timeout: 246 seconds)
[21:18:16] *** Joins: NCS_One (~NCS_One@bl11-90-133.dsl.telepac.pt)
[21:19:02] *** Quits: CoolerX (~CoolerX@user/coolerx) (Ping timeout: 240 seconds)
[21:19:35] *** Joins: andlabs (~andlabs@2604:ca00:170:20a8:e074:56e6:c6ac:e022)
[21:21:38] *** Joins: andlabs__ (~andlabs@209.107.182.146)
[21:22:50] *** Quits: andlabs_ (~andlabs@2604:ca00:170:20a8:ccd3:5f35:52d4:7c89) (Ping timeout: 246 seconds)
[21:23:07] *** Quits: andlabs__ (~andlabs@209.107.182.146) (Read error: Connection reset by peer)
[21:23:40] *** Joins: andlabs_ (~andlabs@2604:ca00:170:20a8:6d1a:3173:27e3:8101)
[21:24:22] *** Joins: rcernin (~rcernin@2001:8003:6803:db00:a917:ef6e:7da9:99ec)
[21:25:17] *** Quits: andlabs (~andlabs@2604:ca00:170:20a8:e074:56e6:c6ac:e022) (Ping timeout: 264 seconds)
[21:26:23] *** Quits: edrocks (~Ed@user/edrocks) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[21:26:58] *** Joins: tane (~tane@dslb-002-201-234-197.002.201.pools.vodafone-ip.de)
[21:26:58] *** Quits: tane (~tane@dslb-002-201-234-197.002.201.pools.vodafone-ip.de) (Changing host)
[21:26:58] *** Joins: tane (~tane@user/tane)
[21:27:01] *** Joins: andlabs__ (~andlabs@2604:ca00:170:20a8:20da:76e5:150a:659a)
[21:27:50] *** Joins: andlab___ (~andlabs@2604:ca00:170:20a8:2c23:1a83:dbb8:e3ce)
[21:27:56] *** Joins: sandro (~sandro@ip-37-201-176-92.hsi13.unitymediagroup.de)
[21:28:00] *** Quits: sandro (~sandro@ip-37-201-176-92.hsi13.unitymediagroup.de) (Remote host closed the connection)
[21:28:31] *** Joins: GJdan (~quassel@107-190-25-70.cpe.teksavvy.com)
[21:29:32] *** Quits: andlabs_ (~andlabs@2604:ca00:170:20a8:6d1a:3173:27e3:8101) (Ping timeout: 240 seconds)
[21:30:09] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[21:31:45] *** Quits: Fault (~Fault@152.70.112.168) (Quit: Quit.)
[21:31:53] *** Quits: andlabs__ (~andlabs@2604:ca00:170:20a8:20da:76e5:150a:659a) (Ping timeout: 264 seconds)
[21:33:01] *** Joins: Fault (~Fault@152.70.112.168)
[21:36:17] *** Joins: ttke (501@46-97-229-216.sr2.pon.net)
[21:37:32] *** Quits: andlab___ (~andlabs@2604:ca00:170:20a8:2c23:1a83:dbb8:e3ce) (Ping timeout: 246 seconds)
[21:40:41] *** Quits: rcernin (~rcernin@2001:8003:6803:db00:a917:ef6e:7da9:99ec) (Ping timeout: 246 seconds)
[21:42:34] *** Quits: vimal (~vimal@2a02:a210:9600:1600:4fb4:e20f:72bc:9bf8) (Ping timeout: 260 seconds)
[21:48:02] *** Quits: volt (~volt@67.197.6.215) (Ping timeout: 246 seconds)
[21:49:54] *** Quits: Aslandro (~aslandro@94-37-51-34.adsl-ull.clienti.tiscali.it) ()
[21:55:12] *** Quits: mei3 (~mei@user/mei) (Read error: Connection reset by peer)
[21:55:19] *** Joins: vimal (~vimal@2a02:a210:9600:1600:3271:adb4:e3fb:289a)
[21:57:49] *** Quits: markkuit (~markkuit@93-43-234-84.ip94.fastwebnet.it) (Quit: marqquit)
[21:58:39] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[21:58:57] *** Joins: mei3 (~mei@user/mei)
[21:59:02] *** Joins: Guest41 (~Guest41@79.106.179.149)
[22:00:50] *** Joins: markkuit (~markkuit@93-43-234-84.ip94.fastwebnet.it)
[22:00:57] *** Quits: Guest41 (~Guest41@79.106.179.149) (Quit: Client closed)
[22:03:09] *** Quits: Ergo^ (~ergo@91.238.59.144) (Ping timeout: 250 seconds)
[22:09:43] *** Quits: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl) (Quit: jaca122)
[22:11:11] *** Quits: freakazoid12345 (~matt@2603-9000-cf0f-80e3-381f-5f31-286f-e038.inf6.spectrum.com) (Read error: Connection reset by peer)
[22:11:56] *** Joins: freakazoid12345 (~matt@2603:9000:cf0f:80e3:381f:5f31:286f:e038)
[22:17:48] *** Quits: internut (~internut@2601:280:4e00:7b70:45b4:c9b0:362b:f2b0) (Remote host closed the connection)
[22:18:38] *** Quits: mickey8 (~user@user/mickey) (Quit: Ping timeout (120 seconds))
[22:18:54] *** Joins: mickey8 (~user@user/mickey)
[22:31:38] *** Joins: andlabs (~andlabs@2a00:79e1:abc:1a12:8d7f:a8b0:5dd0:a609)
[22:39:16] *** Joins: volt (~volt@67.197.6.215)
[22:40:41] *** Quits: mrig (~AdiIRC@user/mrig) (Quit: Going offline, see ya! (www.adiirc.com))
[22:46:04] *** Joins: mrig (~mrig@user/mrig)
[22:48:01] *** Joins: lungaro (~lungaro@99-117-118-33.lightspeed.sndgca.sbcglobal.net)
[22:48:01] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[22:48:15] *** Quits: mickey8 (~user@user/mickey) (Quit: Ping timeout (120 seconds))
[22:48:32] *** Joins: mickey8 (~user@user/mickey)
[22:48:53] *** Joins: dhmohrom^ (~dhmohrom@h50.174.139.63.static.ip.windstream.net)
[22:50:54] *** Quits: mickey8 (~user@user/mickey) (Client Quit)
[22:51:10] *** Joins: mickey8 (~user@user/mickey)
[22:51:47] *** Quits: arinov (~arinov@176.89.7.184) (Ping timeout: 256 seconds)
[22:53:50] *** Joins: internut (~internut@2601:280:4e00:7b70:45b4:c9b0:362b:f2b0)
[22:53:54] *** Quits: volt (~volt@67.197.6.215) (Quit: Lost terminal)
[22:54:13] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[22:59:29] *** Quits: internut (~internut@2601:280:4e00:7b70:45b4:c9b0:362b:f2b0) (Ping timeout: 250 seconds)
[23:05:27] *** Joins: internut (~internut@2601:280:4e00:7b70:383f:ec0b:a2b9:c5da)
[23:07:13] *** Quits: dhmohrom^ (~dhmohrom@h50.174.139.63.static.ip.windstream.net) (Remote host closed the connection)
[23:10:02] *** Quits: internut (~internut@2601:280:4e00:7b70:383f:ec0b:a2b9:c5da) (Ping timeout: 240 seconds)
[23:10:44] <b0nn> https://go.dev/blog/pkgsite-search-redesign
[23:10:51] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[23:11:25] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Client Quit)
[23:12:42] *** Quits: gspbirel56 (~gspbirel5@c-73-214-199-7.hsd1.pa.comcast.net) (Quit: The Lounge - https://thelounge.chat)
[23:13:25] *** Joins: gspbirel56 (~gspbirel5@c-73-214-199-7.hsd1.pa.comcast.net)
[23:16:17] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 264 seconds)
[23:16:51] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[23:17:40] *** Joins: CoolerX (~CoolerX@user/coolerx)
[23:18:03] *** Joins: fikran (~fikran@user/fikran)
[23:21:17] *** Joins: lungaro_ (~lungaro@99-117-118-33.lightspeed.sndgca.sbcglobal.net)
[23:21:34] *** Joins: michele_ (~eraser@user/michele)
[23:21:47] *** Joins: jbauer_ (~jbauer@146.71.11.98)
[23:22:05] *** Joins: Gnuman (~gnuman@user/gnuman)
[23:22:08] *** Joins: nickster8 (~nickster@67.207.91.6)
[23:22:11] *** Joins: zkanda1 (~zkanda@box.makean.art)
[23:22:12] *** Joins: muesli0 (~muesli@fribbledom.com)
[23:22:18] *** Joins: kn1001 (~kn100@wireguard/tunneler/kn100)
[23:22:18] *** Joins: Xu_R7 (~dev-dsk-x@user/xu-r/x-9187770)
[23:22:32] *** Joins: _nuke_ (~nuke@50-193-103-211-static.hfc.comcastbusiness.net)
[23:22:40] *** Joins: Balooga_ (sid407689@id-407689.lymington.irccloud.com)
[23:23:07] *** Joins: flynn4 (~mcbloch@user/flynn)
[23:23:10] *** Joins: dove_ (~jordan@li1158-85.members.linode.com)
[23:23:15] *** Joins: nitrix_ (~nitrix@user/nitrix)
[23:23:17] *** Joins: hjmcnew___ (sid86092@id-86092.tinside.irccloud.com)
[23:23:17] *** Joins: lunchd (launchd@bitbot/launchd)
[23:23:18] *** Joins: Wessie- (~Wessie@static.226.41.47.78.clients.your-server.de)
[23:23:18] *** Joins: mmk2410 (~mmk2410@user/mmk2410)
[23:23:20] *** Joins: alexcohn (~acohn@wikipedia/alex-cohn)
[23:23:20] *** Joins: lemonsni- (~lemonsnic@cpc159519-perr18-2-0-cust114.19-1.cable.virginm.net)
[23:23:21] *** Joins: mcfrd (~mcfrdy@user/mcfrdy)
[23:23:25] *** Joins: moldorcoder7_ (~moldorcod@37.120.143.29)
[23:23:27] *** Joins: bradp- (~bradp@cpe-70-92-7-182.wi.res.rr.com)
[23:24:10] *** Joins: qwedfg_ (~qwedfg@user/qwedfg)
[23:24:21] *** Joins: salem_ (~salem@pool-98-111-206-141.pitbpa.fios.verizon.net)
[23:25:15] *** Joins: alrs_ (alrs@tilde.team)
[23:25:22] *** Joins: wikro_ (~foo@hjkl.se)
[23:25:25] *** Joins: rawtaz_ (~rawtaz@rho.hobbyhotellet.se)
[23:25:34] *** Joins: HisShadow_ (~HisShadow@user/hisshadow)
[23:25:38] *** Joins: zanshin_ (~zanshin@ip24-255-217-102.ks.ks.cox.net)
[23:25:42] *** Joins: zunk_ (~zunk@user/zunk)
[23:25:43] *** Joins: mikoto-c1 (~mikoto-ch@esm-84-240-99-143.netplaza.fi)
[23:25:43] *** Joins: sudoforg1 (~sudoforge@wireguard/tunneler/sudoforge)
[23:26:02] *** Joins: ezzieygu1wuf (~Unknown@user/ezzieyguywuf)
[23:26:02] *** Joins: mohan43u (~mohan@user/mohan43u)
[23:26:06] *** Joins: transacid_ (~transacid@transacid.de)
[23:26:14] *** Joins: purpleid1a (~james@user/purpleidea)
[23:26:26] *** Joins: monchi_ (~joints@143.198.92.132)
[23:26:33] *** Joins: Echoz_ (~chris@user/echoz)
[23:26:47] *** Quits: rawtaz_ (~rawtaz@rho.hobbyhotellet.se) (Changing host)
[23:26:47] *** Joins: rawtaz_ (~rawtaz@user/rawtaz)
[23:27:06] *** Quits: rawtaz (~rawtaz@user/rawtaz) (Killed (NickServ (GHOST command used by rawtaz_)))
[23:27:14] *** Joins: arusso-alt (~arusso@nubsicle.aaron-russo.com)
[23:27:16] *** rawtaz_ is now known as rawtaz
[23:29:15] *** Joins: edro (~edr@enlo.co)
[23:29:15] *** Quits: edro (~edr@enlo.co) (Changing host)
[23:29:15] *** Joins: edro (~edr@user/edr)
[23:30:46] *** Quits: lungaro (~lungaro@99-117-118-33.lightspeed.sndgca.sbcglobal.net) (*.net *.split)
[23:30:46] *** Quits: Fault (~Fault@152.70.112.168) (*.net *.split)
[23:30:46] *** Quits: _nuke (~nuke@50-193-103-211-static.hfc.comcastbusiness.net) (*.net *.split)
[23:30:46] *** Quits: mikoto-chan (~mikoto-ch@esm-84-240-99-143.netplaza.fi) (*.net *.split)
[23:30:46] *** Quits: AquaL1te (~AquaL1te@user/aqual1te) (*.net *.split)
[23:30:46] *** Quits: sudoforge (~sudoforge@wireguard/tunneler/sudoforge) (*.net *.split)
[23:30:46] *** Quits: HisShadow (~HisShadow@user/hisshadow) (*.net *.split)
[23:30:46] *** Quits: Modervomubel (~gnuman@c-76-104-144-218.hsd1.wa.comcast.net) (*.net *.split)
[23:30:46] *** Quits: zkanda (~zkanda@box.makean.art) (*.net *.split)
[23:30:46] *** Quits: edr (~edr@user/edr) (*.net *.split)
[23:30:46] *** Quits: michele (~eraser@user/michele) (*.net *.split)
[23:30:46] *** Quits: monchi (~joints@143.198.92.132) (*.net *.split)
[23:30:46] *** Quits: moldorcoder7 (~moldorcod@37.120.143.29) (*.net *.split)
[23:30:46] *** Quits: mcfrdy (~mcfrdy@user/mcfrdy) (*.net *.split)
[23:30:46] *** Quits: LambdaComplex (~adam@wireguard/tunneler/lambdacomplex) (*.net *.split)
[23:30:46] *** Quits: Xu_R (~dev-dsk-x@user/xu-r/x-9187770) (*.net *.split)
[23:30:46] *** Quits: wikro (~foo@hjkl.se) (*.net *.split)
[23:30:46] *** Quits: zanshin (~zanshin@user/zanshin) (*.net *.split)
[23:30:46] *** Quits: arusso (~arusso@user/arusso) (*.net *.split)
[23:30:46] *** Quits: alrs (~alrs@tilde.team) (*.net *.split)
[23:30:46] *** Quits: launchd (~launchd@bitbot/launchd) (*.net *.split)
[23:30:46] *** Quits: bradp (~bradp@cpe-70-92-7-182.wi.res.rr.com) (*.net *.split)
[23:30:46] *** Quits: lemonsnicks (~lemonsnic@cpc159519-perr18-2-0-cust114.19-1.cable.virginm.net) (*.net *.split)
[23:30:46] *** Quits: Balooga (sid407689@lymington.irccloud.com) (*.net *.split)
[23:30:46] *** Quits: Echoz (~chris@user/echoz) (*.net *.split)
[23:30:46] *** Quits: xlei (~akans@pool-68-129-84-118.nycmny.fios.verizon.net) (*.net *.split)
[23:30:46] *** Quits: jbauer (~jbauer@146.71.11.98) (*.net *.split)
[23:30:46] *** Quits: qwedfg (~qwedfg@user/qwedfg) (*.net *.split)
[23:30:46] *** Quits: hjmcnew__ (sid86092@tinside.irccloud.com) (*.net *.split)
[23:30:46] *** Quits: rocketnine (~tee@li1169-147.members.linode.com) (*.net *.split)
[23:30:46] *** Quits: cs_0x6373 (~verdammt_@static.2.59.76.144.clients.your-server.de) (*.net *.split)
[23:30:46] *** Quits: purpleidea (~james@user/purpleidea) (*.net *.split)
[23:30:46] *** Quits: mohan43u_ (~mohan@user/mohan43u) (*.net *.split)
[23:30:46] *** Quits: koolazer (~koo@user/koolazer) (*.net *.split)
[23:30:46] *** Quits: kn100 (~kn100@wireguard/tunneler/kn100) (*.net *.split)
[23:30:46] *** Quits: flynn (~mcbloch@user/flynn) (*.net *.split)
[23:30:46] *** Quits: Wessie (~Wessie@static.226.41.47.78.clients.your-server.de) (*.net *.split)
[23:30:47] *** Quits: muesli (~muesli@fribbledom.com) (*.net *.split)
[23:30:47] *** Quits: mmk2410_ (~mmk2410@mmk2410.org) (*.net *.split)
[23:30:47] *** Quits: salem (~salem@pool-98-111-206-141.pitbpa.fios.verizon.net) (*.net *.split)
[23:30:47] *** Quits: acohn (~acohn@wikipedia/alex-cohn) (*.net *.split)
[23:30:47] *** Quits: dove (~jordan@li1158-85.members.linode.com) (*.net *.split)
[23:30:47] *** Quits: transacid (~transacid@transacid.de) (*.net *.split)
[23:30:47] *** Quits: zunk (~zunk@user/zunk) (*.net *.split)
[23:30:47] *** Quits: nickster (~nickster@67.207.91.6) (*.net *.split)
[23:30:47] *** Quits: nitrix (~nitrix@user/nitrix) (*.net *.split)
[23:30:47] *** Quits: MD87 (~MD87@user/md87) (*.net *.split)
[23:30:47] *** Quits: ezzieyguywuf (~Unknown@user/ezzieyguywuf) (*.net *.split)
[23:30:47] *** mcfrd is now known as mcfrdy
[23:30:47] *** Xu_R7 is now known as Xu_R
[23:30:47] *** flynn4 is now known as flynn
[23:30:47] *** nickster8 is now known as nickster
[23:30:47] *** nitrix_ is now known as nitrix
[23:30:47] *** kn1001 is now known as kn100
[23:30:47] *** muesli0 is now known as muesli
[23:30:47] *** zkanda1 is now known as zkanda
[23:30:47] *** Balooga_ is now known as Balooga
[23:31:21] *** monchi_ is now known as monchi
[23:31:22] *** Joins: cs_0x6373 (~verdammt_@static.2.59.76.144.clients.your-server.de)
[23:31:26] *** Joins: MD87 (~MD87@user/md87)
[23:31:33] *** Quits: CoolerX (~CoolerX@user/coolerx) (Remote host closed the connection)
[23:33:14] *** Joins: Fault (~Fault@152.70.112.168)
[23:36:10] *** Joins: xlei (znc@pool-68-129-84-118.nycmny.fios.verizon.net)
[23:37:15] *** Joins: koolazer (~koo@user/koolazer)
[23:37:21] *** Joins: LambdaComplex (~adam@wireguard/tunneler/lambdacomplex)
[23:39:15] *** purpleid1a is now known as purpleidea
[23:39:25] *** Quits: sudoforg1 (~sudoforge@wireguard/tunneler/sudoforge) (Quit: 404)
[23:39:40] *** Joins: sudoforge (~sudoforge@wireguard/tunneler/sudoforge)
[23:43:08] *** Quits: sdfgsdfg (sdfgsdfg@user/sdfgsdfg) (Quit: BNC by #bnc4you)
[23:44:56] *** Quits: mickey8 (~user@user/mickey) (Quit: Ping timeout (120 seconds))
[23:45:10] *** Joins: mickey8 (~user@user/mickey)
