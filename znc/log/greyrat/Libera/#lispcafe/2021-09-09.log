[00:19:27] *** Quits: robin (~robin@user/terpri) (Read error: Connection reset by peer)
[00:19:48] *** Joins: robin (~robin@user/terpri)
[00:34:17] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 245 seconds)
[00:36:03] *** Joins: aeth (~aeth@user/aeth)
[01:42:23] <hayley> gilberth: Quite the opposite, I get shat on by the media and retire at 24.
[01:53:39] <selwyn> it seems that there is no real 'hello world' program/circuit/algorithm in quantum computing
[01:55:34] <moon-child> cnot
[01:55:48] <moon-child> hadamard
[01:56:20] <selwyn> none of them really say 'hello' though
[02:00:22] *** Joins: lisp123 (~lisp123@5.30.23.247)
[02:00:43] <moon-child> generate the bitstring corresponding to ascii 'hello world'
[02:10:57] *** Quits: selwyn (selwyn@user/selwyn) (Quit: Connection closed)
[02:11:56] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 252 seconds)
[02:12:20] *** Joins: GreaseMonkey (greaser@user/greasemonkey)
[02:15:06] *** Joins: dec0d3r (~dec0d3r@2001:8003:4810:9600:7275:1afb:1707:8eaa)
[02:29:34] *** Quits: v3ga (~cyberocto@c-73-39-172-34.hsd1.md.comcast.net) (Ping timeout: 252 seconds)
[02:43:24] *** Joins: v3ga (~cyberocto@c-73-39-172-34.hsd1.md.comcast.net)
[02:47:17] *** Joins: chiselfuse (~chiselfus@user/chiselfuse)
[02:47:30] *** Joins: humasect (~humasect@2001:1970:57e0:4100::3675)
[02:48:38] *** Joins: lisp123 (~lisp123@5.30.23.247)
[02:51:19] *** Quits: humasect (~humasect@2001:1970:57e0:4100::3675) (Client Quit)
[02:51:53] <edgar-rft> on the quantum level one cannot be certain that a world exists
[02:59:37] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 265 seconds)
[02:59:59] <copec> 'hello world' just creates a world, doh!
[03:03:33] <moon-child> the world is a figment of your imagination!
[03:34:38] <hayley> https://www.youtube.com/watch?v=5w02O-XdsXE
[03:34:39] -ixelp- Metal Machine Music, Pt. 1 - YouTube
[03:35:08] *** Quits: robin (~robin@user/terpri) (Remote host closed the connection)
[03:36:57] *** Quits: ec_ (~ec@gateway/tor-sasl/ec) (Remote host closed the connection)
[03:37:00] <lotuseater> https://www.youtube.com/watch?v=BY1PX-peFJ8
[03:37:00] -ixelp- DOOM E1M1 - At Doom's Gate (Metal cover) - YouTube
[03:37:35] *** Joins: robin (~robin@user/terpri)
[03:39:44] *** Quits: Jacobis9000 (~josephash@host86-189-251-97.range86-189.btcentralplus.com) (Ping timeout: 265 seconds)
[04:00:20] <gilberth> I wish, I could write. Otherwise I could write a booklet "How to really build your own Lisp."
[04:01:29] <moon-child> I do kind of want to do the non-strawman version of byol.  Like, mccarthy to asm + maybe dumb gc
[04:02:47] <moon-child> but meh writing tutorials for people on the internet is a waste of time
[04:03:13] *** Joins: kakuhen (~kakuhen@user/kakuhen)
[04:08:13] <hayley> I'd write it in three parts, first would be basically SICP chapter 4 (reuse the reader, printer, and object representations from a host Lisp), then think about the reader, printer and representation (perhaps in some ML to pressure you to not cheat), then some compiler.
[04:08:31] <gilberth> moon-child: Indeed. My personal pet project however is compiling CL special forms down to just QUOTE, LAMBDA, SETQ, IF, CATCH/THROW.
[04:09:51] <hayley> Maybe I'll just write a book on the Zero Feet compiler.
[04:10:45] <hayley> Though that entails that I work on the VM spec, which requires a fair bit of juggling in one's head. And then we need a bootstrap implementation.
[04:11:21] <gilberth> Anyhow, I have some implementations in PostScript, C, MS-BASIC (sic!), Go, Common Lisp. I want to merge them. And it should be a compiler written in CL.
[04:12:01] *** Parts: lotuseater (~user@p200300e7870566004b01295534bb48e2.dip0.t-ipconnect.de) (ERC (IRC client for Emacs 27.2))
[04:12:22] <gilberth> hayley: QUOTE, LAMBDA, SETQ, IF, CATCH/THROW is my sort of VM. :)
[04:13:07] <hayley> SEND, SELF-SEND, RESEND, LEXICAL-RESEND with tail-call and APPLY variants.
[04:13:50] <gilberth> You'll need IF at some point.
[04:14:36] <moon-child> nah, just send a pair of thingies to a boolean
[04:15:31] <gilberth> Sure, but then this boolean is special in some way. You can't implement it in terms of the other.
[04:17:30] <hayley> Oh yes, MAKE-OBJECT is also necessary.
[04:17:41] <gilberth> You could implement cons cells and numbers in terms of just LAMBDA, if you wish. The only thing beyond my set, which you can't, is EQ. Which perhaps is why that is a primitive in Lisp-I.
[04:17:43] <hayley> blah ifTrue: blah False: blah
[04:18:13] <gilberth> hayley: You can't implement ifTrue in terms of your other primitives.
[04:18:54] <hayley> TRUE = \x.y.x FALSE = \x.y.y
[04:19:11] <hayley> Or \x y.x \x y.y idk
[04:19:57] <gilberth> This would entail lazy evaluation, wouldn't it?
[04:20:15] <hayley> Or a closure.
[04:20:32] <hayley> So blah ifTrue: [blah] False: blah
[04:21:08] * hayley uploaded an image: (27KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/NQxOMInUpSnWsZkzKJCRKdJB/has-science-gone-too-far.jpg >
[04:22:10] <gilberth> Rather (if test cons alt) = ((test (lambda () cons) (lambda () alt))). Yes, that would work. I stand corrected.
[04:22:50] *** Quits: random-nick (~random-ni@87.116.182.103) (Ping timeout: 252 seconds)
[04:23:00] <moon-child> ceci n'est pas un captcha
[04:24:55] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 260 seconds)
[04:26:55] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[04:48:18] <edgar-rft> gilberth: MS-BASIC is BASIC for masochists?
[04:49:47] <gilberth> edgar-rft: For CP/M-80 users, rather. Even comes with a compiler.
[04:56:49] *** Joins: lisp123 (~lisp123@5.30.23.247)
[05:12:32] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 265 seconds)
[06:14:29] *** Joins: ec_ (~ec@gateway/tor-sasl/ec)
[07:07:58] *** Joins: clothespin (~awolven@c-73-209-95-92.hsd1.il.comcast.net)
[07:08:34] <hayley> https://www.youtube.com/watch?v=k2kbpm4vcXc
[07:08:35] -ixelp- The Clash - Overpowered By Funk (Ney Faustini Re Edit) - YouTube
[07:25:44] *** Quits: dtman34 (~dtman34@c-73-62-246-247.hsd1.mn.comcast.net) (Ping timeout: 250 seconds)
[07:29:09] *** Joins: dtman34 (~dtman34@c-73-62-246-247.hsd1.mn.comcast.net)
[07:57:15] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 260 seconds)
[08:01:17] <hayley> gilberth: https://i.redd.it/5hq9tnnmxcm71.jpg
[08:45:40] *** Joins: lisp123 (~lisp123@5.30.23.247)
[08:50:10] *** Quits: chiselfuse (~chiselfus@user/chiselfuse) (Remote host closed the connection)
[08:59:13] *** Joins: dave0 (~davezero@069.d.003.ncl.iprimus.net.au)
[09:00:04] <hayley> https://www.youtube.com/watch?v=NwNENxFKSuY
[09:00:04] -ixelp- Uh-Oh, Love Comes to Town (2005 Remaster) - YouTube
[09:00:22] <dave0> maw
[09:01:47] <dave0> when love comes to town i'm gonna catch that train
[09:11:47] *** Quits: v3ga (~cyberocto@c-73-39-172-34.hsd1.md.comcast.net) (Ping timeout: 265 seconds)
[09:37:26] *** Quits: clothespin (~awolven@c-73-209-95-92.hsd1.il.comcast.net) (Ping timeout: 252 seconds)
[09:38:51] *** Joins: slyrus_ (~slyrus@192-184-223-165.static.sonic.net)
[09:39:10] *** Quits: slyrus (~slyrus@192-184-223-165.static.sonic.net) (Ping timeout: 240 seconds)
[09:49:14] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 260 seconds)
[09:58:22] *** Quits: molson (~michael@2001-48F8-704A-CA1-0-0-75F-100E-static.midco.net) (Ping timeout: 252 seconds)
[10:09:17] *** Quits: sm2n (~sm2n@user/sm2n) (Ping timeout: 245 seconds)
[10:23:28] *** Joins: shka (~herr@109.231.62.239)
[11:20:17] *** Quits: makomo_ (~makomo@user/makomo) (Ping timeout: 252 seconds)
[11:21:45] *** Joins: Duuqnd100 (~Duuqnd@185.201.174.78)
[11:21:53] *** Duuqnd100 is now known as duuqnd
[11:38:40] *** Joins: fedorafan (~fedorafan@user/fedorafan)
[11:41:06] <fedorafan> yo
[11:41:25] <hayley> Hi
[11:41:42] <fedorafan> what are your topics
[11:41:51] <fedorafan> girls/drugs?
[11:42:11] <shka> mostly drugs
[11:42:15] <shka> no girls 
[11:42:22] <shka> please
[11:43:04] <contrapunctus> shka: that's sexist. /s
[11:43:18] <fedorafan> what kind of drugs
[11:43:22] <fedorafan> why no girls
[11:43:39] <shka> contrapunctus: i can't contribute much to the topic 
[11:43:40] <shka> :P
[11:44:10] <contrapunctus> r/SadCringe
[11:44:16] <fedorafan> ok
[11:44:33] <contrapunctus> Correction - r/SuicideByWords
[11:45:27] <fedorafan> lisp is a functional language isnt it
[11:46:37] <shka> "functional language" is an extremely badly defined term
[11:46:47] <fedorafan> i dont care
[11:47:03] <contrapunctus> fedorafan: Common Lisp and Scheme are multi-paradigm.
[11:47:05] <shka> so the answer to your question is... MAYBE
[11:47:11] <contrapunctus> Not "functional".
[11:47:13] <fedorafan> so its a clear yes
[11:47:35] <fedorafan> well its fine isnt it an old language and not used that often
[11:47:44] *** Quits: dec0d3r (~dec0d3r@2001:8003:4810:9600:7275:1afb:1707:8eaa) (Remote host closed the connection)
[11:48:18] * contrapunctus puts fedorafan under a bridge
[11:48:25] <contrapunctus> üòè
[11:48:52] <fedorafan> wtf
[11:49:17] <fedorafan> fuck you i leave such super fuckers i didnt insult you personally idiots
[11:49:20] *** Parts: fedorafan (~fedorafan@user/fedorafan) (Textual IRC Client: www.textualapp.com)
[11:49:40] <contrapunctus> That escalated quickly. üò∂
[11:50:03] <shka> yeah
[11:58:08] <hayley> "I didn't insult you personally, idiot!"
[12:00:09] <dave0> i think it was the royal "you"
[12:00:41] <hayley> They couldn't even read the topic.
[12:01:08] <hayley> Anyone know how CPython represents an instance of a subclass of list, i.e. of class Blah(list): pass; Blah()
[12:19:02] <gilberth> I was waiting for the next question. "Why can Lisp only be interpreted?" *sigh*
[12:20:09] <gilberth> We could have pointed it to the glorious book. The bible of how to build a Lisp.
[12:21:52] <hayley> https://i.redd.it/a18jmq58avt31.jpg
[12:24:10] <shka> hayley: i can look it up for you
[12:24:19] <shka> are you interested?
[12:25:20] <hayley> Not that much.
[12:26:13] <shka> MOP in python is honestly stunted 
[12:26:40] <shka> not even useful in a way lisp is 
[12:27:57] <contrapunctus> gilberth: what book would that be?
[12:28:01] <hayley> Someone asked about the data layout, i.e. if a "list" looks like this in memory, but an object looks like this, what happens when you subclass list?
[12:28:13] <hayley> My bet is that objects have an additional slot for a list just in case.
[12:30:31] <hayley> Dumb question: does my writeup appear if you look up "build your own lisp" review?
[12:30:34] <shka> hayley: python lists are arrays
[12:30:46] <shka> and they have size somewhere
[12:30:50] <hayley> shka: I'm aware of that much.
[12:31:04] <shka> so my bet is that they have separate array pointer, and size in a separate slot
[12:31:29] <shka> and are essentially ordinary objects 
[12:31:34] <shka> with [] operator
[12:31:43] <hayley> Right.
[12:32:00] <gilberth> contrapunctus: hayley's favorite book "How to build your own Lisp" or some such.
[12:32:10] <shka> so i think that the premise of the question is erroneous 
[12:32:23] <contrapunctus> gilberth: oh, I was expecting SICP üòÑ
[12:32:58] <shka> hayley: i furthermore think that even in python, class must have clearly specified metaclass
[12:33:17] <shka> so you would not be able to inherit class of different metaclass 
[12:33:24] <hayley> Another dumb question: am I imagining it or do writeups I dislike seem to have more exclamation marks? Like...it's so boring and such a dumb idea that the only way to excite your reader is to do a funny voice! Like! This!
[12:33:30] <shka> but i may be wrong on that
[12:34:40] <gilberth> hayley: Not like "This!!!111eleven"?
[12:35:00] <hayley> gilberth: No, just a single exclamation mark like once every two sentences. Something like this!
[12:35:57] <hayley> Picture this:
[12:36:39] <gilberth> hayley: I believe that is an indicator for poor quality! You shouldn't overuse those precious exclamation marks! You really should not!
[12:36:53] *** Joins: hendursa1 (~weechat@user/hendursaga)
[12:36:54] <hayley> "So we have no integer type, but that is fine. We can instead implement Peano numerals using DEFSTRUCT! *code* Now run (plus (succ zero) (succ zero)) and observe the output! We correctly computed two!"
[12:38:04] <gilberth> I wonder hey everyone uses Peano! Instead of bi-n-ary! Would be way FASTER!!!
[12:38:17] <gilberth> * why
[12:38:43] <hayley> They move so slowly that they need exclamation marks to motivate the reader to continue reading.
[12:38:58] <hayley> Someone already mentioned a tendency to show off broken code, as if it helps you understand the final code better.
[12:39:21] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 276 seconds)
[12:39:22] <gilberth> hayley: Poor text. My German teacher would have asked: "Who is shouting?"
[12:39:34] <hayley> .oO( SILENCE IN THE STUDIO! )
[12:40:43] <hayley> gilberth: BYOL suffers from an exclamation mark overdose frequently. The other example is most of all Rust documentation.
[12:41:45] <hayley> beach sort of taught me that either your concluding remarks are obviously good, or you need to spell it out. If the latter, you explained it poorly.
[12:42:15] <gilberth> Well, when what I say isn't that clever, I need exclamation marks to give it more weight. THIS IS WHY PEOPLE SHOUT IF THEY LOSE AN ARGUMENT.
[12:42:58] <hayley> https://youtu.be/uUHb3cBvWMY?t=1142
[12:42:59] -ixelp- Atom Heart Mother Suite - YouTube
[12:43:45] <gilberth> Or don't have a valid argument in the first place.
[12:44:26] <gilberth> Or need someone else to blame for them being miserable. What ever, you get the idea.
[12:52:31] *** Quits: robin (~robin@user/terpri) (Remote host closed the connection)
[12:57:48] *** Joins: robin (~robin@user/terpri)
[13:01:49] <hayley> Still, tell me, does '"build your own lisp" review' come up with my writeup in the search results?
[13:03:06] <duuqnd> I'm not seeing it
[13:03:27] <hayley> Damn. It does here in a private window.
[13:03:44] * gilberth neither.
[13:04:00] <duuqnd> What should it look like? I haven't read it.
[13:04:03] *** Quits: ec_ (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[13:04:44] <gilberth> Holy shit. That is a real book? On dead trees?
[13:04:53] <hayley> This: https://gist.github.com/no-defun-allowed/7e3e238c959e27d4919bb4272487d7ad
[13:04:54] <hayley> Yes.
[13:04:54] -ixelp- Don't Build Your Own Lisp ¬∑ GitHub
[13:05:09] <hayley> The author has a PhD (in game development), because of course he does.
[13:05:30] <duuqnd> I got this different review in the search results: https://blog.journeyman.cc/2016/12/how-not-to-build-your-own-lisp.html
[13:05:31] -ixelp- The Fool on the Hill: How not to build your own Lisp
[13:05:43] <Gnuxie> did gilberth think it was just about poeople building gamer lisp interpreters in general ?
[13:06:41] <hayley> Arguably, EQ working on lists is not necessary for Lisp. And if there is no way to tell them apart (by mutating, c.f. Baker 199...something), it is irrelevant.
[13:07:00] <hayley> More interestingly, there is no working LET.
[13:07:37] <hayley> [Baker 199...something] Equal Rights for Functional Objects https://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.23.9999&rep=rep1&type=pdf
[13:08:27] <duuqnd> Funny how almost everything claiming to teach you how to make a Lisp is bad
[13:09:28] <gilberth> "This is a great book, it walks through the implementation in detail, useful for learning or refresher on C ; and explains the core of LISP very well." Sure.
[13:11:37] <gilberth> duuqnd: I would guess, those that know how to do it don't care to write about it.
[13:12:47] <duuqnd> Yeah, and those who do write about it usually write more than just how to implement one.
[13:12:50] <duuqnd> I learned more from watching the SICP lectures while half asleep than I ever did from those "make a lisp" articles.
[13:13:23] <duuqnd> (I was half asleep despite SICP, not because of it)
[13:15:19] <gilberth> Well, the point with hayley's and my favorite book is that the author demonstrates that he neither has a clue about C nor about Lisp. Nor about programming in general.
[13:16:40] <duuqnd> I think I ran across it once when I was very new to Lisp and even then I knew it was bad
[13:17:54] <gilberth> That is the dangerous part. People still needing to learn much may actually believe that (1) this is good C code and (2) it is Lisp the author writes about.
[13:18:16] <hayley> .oO( I never played any Ubisoft games, but if I disliked them, I would blame it on that guy. )
[13:19:25] <dave0> https://github.com/kanaka/mal/
[13:19:25] <gilberth> hayley: Well writing "IF KNOB.DEPRESSED THEN DOOR.OPEN();" is hardly hacking ;-)
[13:20:25] <hayley> https://blog.journeyman.cc/2017/01/post-scarcity-memory-threads-and.html "One benefit of getting really annoyed with Daniel Holden's book on how to Build Your Own Lisp is that I have finally started work on building software for my decade-old Post Scarcity Software idea."
[13:20:25] -ixelp- The Fool on the Hill: Post scarcity: Memory, threads and communication
[13:20:27] <hayley> I like this guy though.
[13:21:45] <duuqnd> Well, we went in to talk about trash, but ended up finding something good
[13:21:48] <duuqnd> I'm happy with that
[13:22:17] <hayley> Should I change my intro from "First, God help you if you do your first interpreter in C. Second, God can't help you if you read this book."? It is probably really rude to some people.
[13:22:53] <dave0> you could change it to Allah
[13:23:20] <duuqnd> I would change "if you read this book" to "if you follow this book's advice" or something similar
[13:24:20] <duuqnd> And maybe add something at the top mentioning that this is indeed a review of "Build Your Own Lisp"
[13:24:30] <duuqnd> But the rest is good as is in my opinion
[13:32:31] <hayley> OTOH there is nearly a place for mutation, which would be lexical closures. But there are no lexical closures, of course.
[13:34:53] <duuqnd> By the way, have you published that review on Reddit? That might help it show up on searches more often (I think it might also start some interesting discussions in the comments).
[13:35:49] <hayley> A couple of times in comments. I don't think it's nice enough to be posted standalone.
[13:36:18] <shka> "All C code is a bad code in the eyes of Allah!"
[13:37:00] <shka> or rather
[13:37:14] <shka> "Allah can help you, but he won't because you write in C"
[13:37:31] * hayley tries to test lexical closures, but gets stumped on which are () and which are {}. Good start.
[13:37:48] <hayley> (def {add-to} (\ {n} {\ {x} {+ n x}})) ;; FML
[13:38:15] <duuqnd> I honestly don't understand why so many Lisp-inspired languages feel the need to add more brackets
[13:38:16] *** Quits: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de) (Ping timeout: 252 seconds)
[13:38:17] <hayley> Yep, it uses dynamic scoping, as evidenced by the error "Unbound symbol n"
[13:39:00] *** Joins: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de)
[13:39:26] <hayley> The other one I wanted to try was how it "overwrites" variable bindings. So I need (let ((x 2)) (+ (let ((x 3)) x) x)) but with let-lambda conversion.
[13:41:08] <gilberth> duuqnd: I wonder when someone comes up with M-expressions and also puts the comma back into S-expressions.
[13:41:27] <hayley> Oh, that actually worked. So they don't really replace bindings?
[13:41:57] <hayley> Also, amusingly, ^D causes the program to segfault still.
[13:42:25] <gilberth> Aren't C programs supposed to crash?
[13:42:47] <hayley> https://www.youtube.com/watch?v=FTuVB5-19FE
[13:42:47] -ixelp- Crash - YouTube
[13:42:55] <duuqnd> I'm honestly surprised by how rarely C and C++ programs crash these days
[13:43:22] <shka> what?
[13:43:27] <shka> commas into sexps?
[13:43:27] <duuqnd> Still happens on occasion but I don't see it very often
[13:43:29] <shka> WHY?
[13:43:33] <shka> WHAT PURPOSE?
[13:43:38] <dave0> gilberth: they're supposed to make programs for remote code execution
[13:43:44] <duuqnd> shka: In jmc's original paper the S-expressions had commas
[13:43:49] <gilberth> Pure luck, the larger the address room, the smaller the chance that a dangling pointer would hit something.
[13:43:50] <hayley> https://www.reddit.com/r/programming/comments/pkf91v/rust_programs_written_entirely_in_rust/
[13:43:52] -ixelp- Rust programs written entirely in Rust : programming
[13:44:08] <hayley> I guess as SICL doesn't call any C functions...
[13:44:17] <shka> duuqnd: BUT WHY?
[13:44:19] <hayley> But then you still have the kernel written in C. So, CLOSOS?
[13:44:49] *** Quits: kakuhen (~kakuhen@user/kakuhen) (Quit: Leaving...)
[13:44:56] *** Quits: lad (~lad@user/lad) (Ping timeout: 252 seconds)
[13:45:41] <duuqnd> shka: Probably made sense when S-expressions were only meant for data
[13:46:14] <duuqnd> Code was meant to be written in M-expressions but IIRC the parser was never finished and people preferred writing their programs in S-expressions anyway
[13:46:25] <gilberth> shka: Yes, it was supposed to be (LAMBDA,(X),(FOO,X,42)) The Lisp-I manual says: "The commas in writing S-expressions may be omitted. This is an accident."
[13:46:39] *** Joins: lisp123 (~lisp123@5.30.23.247)
[13:47:50] <shka> ok
[13:48:05] *** Joins: lad (~lad@user/lad)
[13:48:40] <shka> damn, white keycaps looks so cool, but they also get dirty easily
[13:49:00] <shka> i need to clean my keyboard like every second week 
[13:49:46] <gilberth> But then it had no lexical closures either. The manual however mentions a FUNARG operator which would goo like (FUNARG,e,p) = evaluate 'e' with the environment 'p'. But it mentions that this is used internally without saying for what and how.
[13:50:44] <gilberth> And PROG is really messed up.
[13:51:38] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 265 seconds)
[13:51:47] <gilberth> A PROG written for the compiler won't work in the interpreter and vice versa.
[13:52:11] <shka> very unlispy
[13:53:19] <duuqnd> I think they didn't know what they had created yet
[13:54:03] <gilberth> Yes, the interpreter has computed GO. All subforms of PROG are either a tag, SETQ, or GO. So to conditionally branch, you'd say (GO (COND (test (QUOTE L1)) (T (QUOTE L2)))), while for the compiler GO is not computed and it would be (COND (test (GO L1)) (T (GO L2)))
[13:54:46] *** Quits: pjb (~pjb@user/pjb) (Ping timeout: 252 seconds)
[13:55:19] <gilberth> And GO may of course only appear in tail position in COND. Standard Lisp has the same restriction still.
[13:55:49] <gilberth> And btw as there are not side effects, there is no PROGN, neither implicit nor explicit.
[13:57:57] <gilberth> It really feels a bit like "Oh shit! This lambda calculus really is useful for hacking?! Let's kludge something to escape the pure functional domain to make it actually practical."
[13:58:13] <gilberth> And here we are. :)
[13:59:23] <gilberth> I'd really like to know more about the actual Lisp-I implementation.
[14:00:43] <hayley> https://www.youtube.com/watch?v=RLukUKA1khM
[14:00:43] -ixelp- Giles, Giles & Fripp - Erudite Eyes (1968) - YouTube
[14:00:51] <duuqnd> All I know is that it was for some IBM mainframe and that it was stored on punch cards. I think it's pretty likely that the implementation itself has been lost.
[14:01:22] <gilberth> Also I wonder why lexical closure are so late in the game? Standard Lisp doesn't have them. And elisp neither (unless you set some flag). Most other languages that claim to have closures often also have no real lexical closures.
[14:01:41] <hayley> It was a Scheme employed by MIT...
[14:02:31] <gilberth> duuqnd: I believe pjb knows more about it. And, yes, the machine was an IBM 704. This gave us CAR and CDR.
[14:03:27] <duuqnd> I have trouble remembering these numbers sometimes
[14:03:33] <duuqnd> Why couldn't IBM just name their computers?
[14:04:11] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.2)
[14:04:12] <gilberth> I am way better at remembering numbers than names. Especially with versions.
[14:05:03] <duuqnd> For versions of something numbers make sense, but for a whole product I feel a name is better, or at least a more memorable number.
[14:05:14] <dave0> 69
[14:05:21] <dave0> :-p
[14:06:02] <duuqnd> The Symbolics 3600 has a number for a name, but it's easier to remember since 36 is the name of the series and the 00s are swapped out in other models.
[14:06:11] <hayley> Whew, someone who knows CPython internals answered the question properly.
[14:07:18] <gilberth> duuqnd: I disagree. Can you from the top of the head enumerate me all macOS version names? Or Intel processor names in chronological order? It once was easy: 4004, 8080, 8086, 80186, 80286, 80386, 80486. And then 8085 (for 5V 8080) and 8088 (for 8-bit bus 8086).
[14:07:31] <hayley> https://www.youtube.com/watch?v=qzSVokSfg30
[14:07:31] -ixelp- Drafted Again - YouTube
[14:08:15] <hayley> Much to the dismay of gilberth, SBCL versions are now decade.year.month.
[14:08:24] <gilberth> What was earlier? The PDP-Blah or the PDP-Blup?
[14:08:35] <duuqnd> Okay, fair point
[14:08:38] *** Joins: pjb (~pjb@user/pjb)
[14:08:48] <duuqnd> I just prefer when numbers have some strong relation to the thing they belong to
[14:09:00] <gilberth> hayley: They are still numbers.
[14:09:05] <duuqnd> The 36 in the Symbolics 3600 for example is the word-size
[14:09:38] <hayley> The CSL versions are all just ISO 8601 dates.
[14:10:27] <gilberth> duuqnd: They have, the IBM 7xx were for science, the 14xx for finance, basically.
[14:10:45] <duuqnd> Makes sense, I guess I'm just not familiar enough with old IBM machines
[14:10:49] <gilberth> The Atari ST was sixteen bits, the TT thirty-two.
[14:11:05] <dave0> hayley: do you know nescafe blend 43? what happened to blends 1-42
[14:11:42] <gilberth> duuqnd: You can expect that the higher the number the newer the design. They weren't rolling dice.
[14:12:27] <gilberth> dave0: What happened to Chanel No 4? And btw 4711 is a trademark.
[14:12:35] <duuqnd> I haven't spent any time trying to memorize these. It's probably easier than I think.
[14:13:06] <dave0> gilberth: yeah! we miss a whole bunch of channel numbers < 10
[14:13:38] <dave0> oops
[14:13:44] <dave0> i misread as channel lol
[14:13:56] <dave0> you meant the fragrance
[14:14:30] <gilberth> duuqnd: I didn't memorize them either. That was my point. Without knowing the exact details, I could tell that the PDP-7 and earlier than the PDP-11. Though the format is 18-bit word oriented and the latter 16-bit byte-oriented.
[14:14:50] <gilberth> dave0: Yep.
[14:15:02] <duuqnd> Yeah, you're absolutely right. I'm just talking about me having trouble remembering IBM's model numbers.
[14:15:16] <duuqnd> I'll probably have an easier time if I try
[14:15:50] <dave0> maybe chanel 1 smelt like wet dog
[14:15:56] <gilberth> Fair enough. It just happens that I have some interest in early computers. Their ISA in particular.
[14:17:40] <gilberth> My 32-bit TTL design is somewhat modeled after 50s ISAs. In particular the EDVAC.
[14:18:35] <gilberth> I ought to find a nice name ending in -IAC :-)
[14:21:47] <hayley> https://github.com/vlang/vinix massively inferior CLOSOS
[14:22:23] <dave0> gilberth: GBIAC
[14:22:53] <duuqnd> hayley: It looks to have nothing in common with CLOSOS so yeah, it's inferior
[14:22:55] <dave0> gilberth: because it's you!
[14:23:13] <hayley> duuqnd: Every operating system that wasn't written in C is massively inferior CLOSOS
[14:24:18] <hayley> *Genera and Smalltalk are ok though
[14:24:22] <duuqnd> I wonder why people bother with making new Unix-likes
[14:24:25] <dave0> hayley: it's bloody mosquito season
[14:24:34] <hayley> Lack of imagination?
[14:24:40] <hayley> r/osdev makes me think lack of imagination.
[14:25:36] <hayley> Hm.
[14:25:55] <duuqnd> No new Unix-like is going to be more useful than Linux (or modern BSDs or whatever), so "compatibility" is pointless. Unix-likes won't come with new ideas for OS design either, so innovation is isn't a valid goal either.
[14:26:01] <hayley> So I booted Vinix, started the V repl, typed 1 + 1 and caused a kernel panic by running out of memory.
[14:26:34] <hayley> I guess it can have 2GB of RAM rather than 1GB to compute 1 + 1.
[14:27:26] <gilberth> dave0: No so nce to prnct. Naja, my first machine will be the B3210 or some such.
[14:28:04] <hayley> With 2GB, I typed 1 + 1 and it hung. Then I added a ;, still nothing. Then I wrote exit as the banner said, still nothing. ^C caused a page fault which caused a panic.
[14:28:08] <gilberth> hayley: Oh, another language of the kind "We copy everything around and thus GC less."
[14:28:29] <hayley> gilberth: Actually, they use Boehm on a real operating system.
[14:28:51] <hayley> There was supposed to be some auto-free analysis which never materialized of course.
[14:29:21] <duuqnd> Does it actually have graphics like the screenshot on github or is it text only?
[14:29:21] <gilberth> hayley: But the language mentions it uses immutable data type by default, so that the collector would be needed less. Thus copying.
[14:29:46] <hayley> gilberth: Not immutable, but a stupid value/reference distinction like C++.
[14:30:02] <hayley> duuqnd: Yes, but it is just a stupid wallpaper and you still only have a VT-100 lookalike.
[14:30:16] <duuqnd> lol, what's the point of it then?
[14:30:31] * hayley repeats pressing ^C and random keys a few times, and then it has a page fault again.
[14:30:32] <gilberth> Would I write an OS, I would aim headless and delegate a possible GUI to X11.
[14:30:42] <hayley> Guess you have to start the graphics driver from somewhere.
[14:30:57] <duuqnd> "Look at this beautiful image and forget about how we just made Unix again"
[14:31:12] * hayley uploaded an image: (10KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/ZOUzyTWlRzYsQRTYCRwvFqTv/quality-engineering.png >
[14:31:35] *** Quits: lad (~lad@user/lad) (Ping timeout: 260 seconds)
[14:33:18] <gilberth> I mean, my Linux box is headless, too. And you could abandon all hope to run a usable web browser in a Lisp OS. And besides there are more interesting things than writing a gazillion device drivers. I always mentioned that on the LispOS mailing list.
[14:34:21] <hayley> https://shipilev.net/jvm/diy-gc/
[14:34:22] -ixelp- Do It Yourself (OpenJDK) Garbage Collector
[14:34:26] <gilberth> hayley: But V is a safe language, isn't it? The web page says so.
[14:34:51] <duuqnd> How safe is safe?
[14:34:56] <hayley> To be fair, all bets are off when you use processor intrinsics and stuff not defined in the language model. Not that I think V has one.
[14:36:11] <gilberth> Really?
[14:37:16] <gilberth> I mean, the processor specific parts should be minimal and trivial. Just route me the interrupts and I am set.
[14:38:17] <hayley> Yes, as we died to a "page fault" while handling an exception...or two, which suggests someone messed with an alien pointer perhaps.
[14:39:21] <gilberth> duuqnd: V advertises itself as "simple, safe, fast, and compiled." *gasp* Compiled? Oh my god, it's, it's compiled? Can't believe that.
[14:41:09] <hayley> "fast"? Does it have NonBlockingHashMap?
[14:41:42] <hayley> gilberth: https://modules.vlang.io/regex.html
[14:41:43] -ixelp- regex | vdoc
[14:42:00] <hayley> Another RE standard?
[14:42:03] <gilberth> duuqnd: And the compiler attempts to solve the halting problem (sic!). No more: <https://www.youtube.com/watch?v=3vJWVyEBcdE&t=994s> ;/me still likes that scene.
[14:42:03] -ixelp- Garbage the Video - YouTube
[14:44:03] <hayley> Meanwhile, somewhere in the Netherlands, https://www.youtube.com/watch?v=2sUyk5zSbhM is being blasted loudly as someone invents concurrent mark-sweep.
[14:44:04] -ixelp- On The Run - YouTube
[14:44:42] <gilberth> hayley: Seem like "We hacked sth together and don't care whether it's POSIX or PCRE." And seriously? Alternation binds stronger than concatenation? Nuts.
[14:46:14] <gilberth> So in V 2*3+4 yields 7? Just because the author felt like it?
[14:46:43] <gilberth> Sorry that is over the top. Next, please.
[14:47:08] <hayley> Yes, it is simple (you even get to skip multiplication), and there is only one way to evaluate 2*3+4. Perfect solution by their principles.
[14:48:37] <gilberth> Sorry, I meant 9. But you get the point.
[14:49:33] <hayley> 2+3+4 = 9. Still no multiplication.
[14:49:47] <gilberth> See. This illustrates my point.
[14:50:54] <hayley> https://www.youtube.com/watch?v=PB1cEyy0fKs good electronic ambient
[14:50:55] -ixelp- Metal Machine Music - Lou Reed (1975) (Full Album) - YouTube
[14:51:16] <gilberth> Nah, in the V regex it's abc|def = (ab)(c|d)(ef) while everyone else has it the other way around.
[14:51:47] * hayley wonders what the shitty one-more-re-nightmare parser does.
[14:52:08] <gilberth> I bet it does the right thing.
[14:52:17] <hayley> It's funny that the language to input a RE is more complex than a RE.
[14:52:32] <hayley> Holy shit, you're right.
[14:52:36] <hayley> (abc) ‚à™ (def)
[14:53:01] *** Joins: random-nick (~random-ni@87.116.178.0)
[14:54:34] <gilberth> What I said. Concatenation binds stronger than alternation. Fit's well with abc + def, you see at times for REs. And r^* also makes perfect sense, it's not *r.
[14:55:10] <hayley> OTOH I parse ab* like (ab)* whereas I think it is meant to be a(b)*
[14:55:58] <gilberth> Yes.
[14:56:35] <gilberth> But indeed funny, that the language of regular languages is not regular.
[14:56:43] <hayley> Though, with the implementation of tags, my RE classes have become an IR and nothing usable too well by the user. So I may as well redo the parser when I make another format too.
[14:59:40] <hayley> https://news.ycombinator.com/item?id=28115267 Another of my projects made it into Hacker News comments.
[14:59:41] -ixelp- I agree that "C/C++" isn't a good sign, though it was more forgivable when C++ j... | Hacker News
[15:06:24] <gilberth> Honestly, I believe that saying "language X is fast" or slow, is technically not correct. Implementations are, not languages. It only happens in recent times that new languages are created every day with just a single implementation.
[15:07:13] <hayley> Honestly, I believe you CONS for today, and collect tomorrow. That's me.
[15:07:25] <pl> gilberth: well, the heaps of UB in C and C++ exist because of speed :)
[15:07:51] <gilberth> pl: The pile of UB in CL is even larger.
[15:08:07] <hayley> Makes me wonder, as LLVM likes to apply C UB to Rust, I wonder how Clasp fares.
[15:08:35] <pl> gilberth: you sure? Most of the time I don't see "oh, we will elide your whole defensive IF statement for speed"
[15:09:13] <gilberth> pl: Most UB in C is not there to make it fast, but portable.
[15:09:34] <pl> gilberth: a lot of it exists to make it fast, at least in somewhat last few standards
[15:09:40] <hayley> https://blog.regehr.org/archives/213
[15:09:41] -ixelp- A Guide to Undefined Behavior in C and C++, Part 1 ‚Äì Embedded in Academia
[15:10:05] <pl> the change to memory model also reduced portability for speed assumptions on subset of CPUs
[15:10:37] <gilberth> pl: Yes, I am sure. Read any function specification in the ANSI-CL. For starters. (typep x 'foo) may as well crash the whole system, or prepare coffee.
[15:10:57] *** Quits: Mandus (~aasmundo@0.51-175-33.customer.lyse.net) (Ping timeout: 245 seconds)
[15:11:22] *** Joins: Mandus (~aasmundo@0.51-175-33.customer.lyse.net)
[15:12:01] <hayley> gilberth: Mention it to someone writing WSCL?
[15:15:04] <hayley> Vaguely relevant: https://github.com/s-expressionists/wscl/blob/main/wscl-issues/proposed/array-upgrading-undecidable
[15:19:58] <gilberth> pl, hayley: (INT_MAX+1)<<0 may not prepare coffee. Unlike (typep 42 69)
[15:21:08] <gilberth> The result is undefined or an exception may be raised.
[15:21:35] *** Quits: notzmv (~zmv@user/notzmv) (Read error: Connection reset by peer)
[15:22:21] <gilberth> That's different from the consequences are undefined. And CL has the latter for almost every situation you would expect a run time error.
[15:22:39] <White_Flame> Consequences will never be the same
[15:23:12] <duuqnd> If I had the time and motivation I would make typep literally make coffee. Unfortunately I don't have a coffee machine.
[15:23:15] <gilberth> It's a difference whether I get some undefined bit-pattern or my machine crashes.
[15:23:44] * gilberth does have a coffee maker either.
[15:24:45] *** Joins: notzmv (~zmv@user/notzmv)
[15:28:07] <gilberth> And hence I keep my claim that those undefined results in C are there because of portability. Like e.g. one's-complement versus two's-complement. Or my favorite: trap representation of 'char', which guarantees that memcpy could be implemented in C, even when the host (think a C->CL compiler, or a tagged arch in general) really distinguished between pointers and bit-patterns.
[15:28:38] <hayley> gilberth: https://github.com/s-expressionists/wscl/commit/04bac03b10820036b8037cdd9730ea4557aa96a2
[15:28:39] -ixelp- New issue concerning invalid type specifiers ¬∑ s-expressionists/wscl@04bac03 ¬∑ GitHub
[15:29:40] <gilberth> Worse is: There is no way I could ask the system whether some object is a valid type specifier.
[15:30:54] <gilberth> Once you dig a little CL has holes in its capabilities of reflection.
[15:31:14] <duuqnd> Are there non-portable ways of checking if type specifiers are valid?
[15:31:30] *** Quits: Oddity (Oddity@user/oddity) (Ping timeout: 250 seconds)
[15:31:46] <gilberth> duuqnd: Of course there are, the compiler must know. But I am talking about the language.
[15:32:32] <duuqnd> Yeah, I'm just thinking that for practical reasons this could become a pseudo-standardized extension like package-local nicknames.
[15:33:14] <gilberth> I would vote for building on the lexical environment stuff, that didn't make it to the standard.
[15:33:51] <duuqnd> I don't know enough about the situation to really have an opinion
[15:33:56] <duuqnd> So I guess I'll agree
[15:34:10] <gilberth> duuqnd: This comes up with the following: Say you want to parse declarations. So, now, how to tell whether (declare (foo x)) is a type or a FOO declaration?
[15:35:08] <gilberth> There could be either a (DEFTYPE FOO ..) in place, or a (DECLAIM (DECLARATION FOO)) or neither. Bad, really bad.
[15:35:44] <gilberth> So you can't portably tell, what (declare (foo x)) should mean.
[15:36:27] <gilberth> There are more missing bits in this realm.
[15:36:56] * hayley uploaded an image: (314KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/aYUfjfNqaUgnCYAFSBTsXgxe/since-when-did-this.png >
[15:37:45] <hayley> As I already have a write barrier to ensure we don't break thread-locality, I wonder if a 3 generation system with thread-local nurseries, then global nursery, then global tenured space would work.
[15:39:19] <hayley> (Sadly IIRC I don't think Linux ever merged anything related to GC efficiency; at least the two cases of providing hints to paging and batching page table changes never happened.)
[15:39:35] *** Joins: Oddity (Oddity@user/oddity)
[15:39:37] <pjb> gilberth: well, portably you would have to load a (declaim (declaration foo)) to know it's a declaration, or a (deftype foo ‚Ä¶) to know it's a type. So you can still process it portably. But not interactively ,if you haven't processed the previous declaration or type declaration.
[15:40:50] <dave0> some guy on hackernews gave some advice to code a little bit each day
[15:40:56] <dave0> it works!
[15:41:10] <gilberth> pjb: Thus not at runtime. I would need to process all the sources, and then the sources of the implementation itself are sure not portable.
[15:41:35] <pjb> Yes, implementation extensions are the most problematic here.
[15:42:47] <gilberth> pjb, that is a crazy suggestion. It just is not practical that macro would need to find and grok all sources. I may even not have them.
[15:45:07] <gilberth> And that won't be portable either. Hence, there is no way to tell. This is bad, because you may want to call TYPEP at runtime, but cannot guard that call, which potentially may delete all the internet, or the universe, while it is at it.
[15:45:39] <hayley> https://lwn.net/2000/0907/kernel.php3 In which someone makes a web server faster by making it a Linux module.
[15:45:40] -ixelp- LWN - Kernel
[15:46:57] <gilberth> hayley: Fun part: Linus didn't believe in TLS at all. Imagine multithreading with no thread local store. Perhaps even no thread local registers?
[15:47:27] <dave0> he once complained that minix didn't have threads
[15:47:40] <gilberth> So you have your gazilion cores all computing the very same thing. :)
[15:48:49] <pjb> gilberth: but the fact is that you can ignore all declarations that you don't know. The only declarations you have to deal with, are the special declarations. cf 3.3.1 (the compiler must deal with declaration, notinline, safety and special).
[15:48:50] <gilberth> dave0: Linus was not happy and very late to implement clone(2). And the big lock in the kernel was there for how long?
[15:48:55] *** Quits: Aurora_v_kosmose (~LispyLigh@user/lispylights) (Remote host closed the connection)
[15:48:58] *** Joins: selwyn (~selwyn@user/selwyn)
[15:49:22] <pjb> gilberth: so  a macro can throw away all declarations but those four ones, and process only special.
[15:49:24] <gilberth> pjb: You're splitting hairs here.
[15:49:26] *** Joins: Aurora_v_kosmose (~LispyLigh@user/lispylights)
[15:49:47] <dave0> gilberth: sounds like he's got no taste
[15:50:14] <pjb> Granted, it would be nicer to have full introspection and retrospection, but CL was specifically designed to allow for simple and efficient (batch) compilers, in addition to sophisticated development environment, so it is not complete on several parts.
[15:51:08] <gilberth> pjb: How would I implement PARSE-MACRO? You need to pull all declarations applying to particular lexicals. How to tell?
[15:51:33] <pjb> the solutions are: 1- write or extend your own implementation to provide the required extensions. 2- document those extensions in a CDR, and push the other implementors to implement them (or export them under the specified API). 3- write portability libraries.
[15:51:46] <gilberth> pjb: With DEFTYPE being a NOP? Nah, that is not allowed for.
[15:52:49] <gilberth> pjb: I am talking about ANSI-CL as it is. Not how to solve the problem. I always could invoke implementation-defined behaviour, thanks.
[15:54:47] <gilberth> In general I would just prefer that as large parts of CL could in principle be implemented in conforming CL itself.
[15:55:16] <gilberth> * as large as possible.
[15:55:56] <selwyn> is sicl implemented with respect to that principle?
[15:56:08] <gilberth> The language itself, that is the set of special forms, already is small.
[15:56:40] <gilberth> selwyn: I would guess so. Age old idea.
[15:56:55] <selwyn> suppose sicl is more about clos than conforming cl though
[15:57:22] <hayley> In parts. But some are less metacircular, e.g. CATCH/THROW is more involved than a special variable and BLOCK/RETURN
[15:57:41] <gilberth> There was an earlier approach focusing more on CL in CL.
[15:58:06] <selwyn> hayley: i see thanks
[15:58:26] <hayley> Baker also documented metacircular specifications of CL special forms.
[15:58:27] <gilberth> And I brought forward and discussed the general idea with beach some decade ago.
[15:58:40] <hayley> https://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.46.9657&rep=rep1&type=pdf
[15:59:51] <gilberth> Well, I don't care about meta-circular too much. Rather the opposite: Hierarchical.
[16:00:53] <hayley> beach decided that was unmaintainable though.
[16:00:55] <gilberth> I mean, at one point you must break the circle. You can implement CATCH in terms of BLOCK. BLOCK could be implemented in terms of CATCH, which could be ...
[16:02:05] <gilberth> At one point, your compiler must know about one way non-local exit. Be it either CATCH, BLOCK, or TAGBODY.
[16:02:19] <hayley> Evidently so.
[16:02:46] <hayley> BLOCK and TAGBODY look the same to Cleavir, but CATCH is special as it changes the dynamic environment in another way.
[16:02:54] <dave0> doing a little bit of coding each day is good, my forth is coming along !
[16:03:26] * hayley scratches head figuring how they plan to do concurrent weak reference processing.
[16:04:06] <gilberth> My approach always was different: There are huge parts, that could implemented portably already, and once were. LOOP, PPRINT, heck CLOS itself. The package system, pathnames, all the sequence functions. And what not.
[16:05:06] <selwyn> loop isn't implemented portably?
[16:05:44] <gilberth> hayley: CATCH is only different, when you don't at the same time provide UNWIND-PROTECT and special variables. You can implement CATCH/UNWIND-PROTECT and PROGV just in terms of BLOCK or TAGBODY.
[16:05:54] <Gnuxie> OK, but does your approach actually exist? 
[16:06:06] <gilberth> selwyn: It is. There is the MIT implementations.
[16:06:32] <gilberth> Gnuxie: Mine? For the special forms: Yes.
[16:07:11] <hayley> OK, but I'm trying to focus on how you avoid the race between some thread deciding to read a weak reference and the GC not getting to it yet.
[16:07:13] <gilberth> And for a half of CLtL1 too.
[16:07:17] <pl> gilberth: AFAIK, the difference between "consequences are undefined" and the language used for UB in C/C++ is just linguistic choice. As in, any C/C++ code that has UB in it, allows compiler to do /whatever/, not just in "did you take this branch or not"
[16:10:09] <pjb> gilberth:  for example, https://gitlab.com/bocl/bocl/-/blob/master/sources/lisp/destructuring-bind.lisp#L43
[16:10:10] -ixelp- sources/lisp/destructuring-bind.lisp ¬∑ master ¬∑ BoCL / BoCL ¬∑ GitLab
[16:13:08] <gilberth> pl: No, ISO C makes fine distinctions here. A value may be unspecified in C. That does not imply that the computer may do what ever it wants. It might yield a result as it wishes, but it may not prepare coffee.
[16:14:18] <selwyn> :(  i want coffee
[16:14:47] <gilberth> pjb: My destructuring bind does not need to look at declarations.
[16:15:12] <duuqnd> Every time coffee is mentioned I get one step closer to buying a coffee machine so I can make TYPEP start it when getting an invalid type specifier
[16:15:30] <gilberth> What for? You just bind variables left to right in LET*, no need to pull declarations here.
[16:15:32] <hayley> Lovely, the Handbook basically copies the words from the Pauseless paper, and also doesn't mention how they handle weak references. Fine, it works with the not-marked-through bit. Now what does it do?
[16:18:15] <pl> gilberth: integer overflow apparently is full UB in C11, and thus there are no requirements by the standard on it
[16:18:48] <gilberth> pl: I read that differently.
[16:19:24] <pl> > undefined behavior - behavior, upon use of a nonportable or erroneous program construct or of erroneous data, for which this International Standard imposes no requirements
[16:19:33] <pl> integer overflow is given as an example
[16:19:48] <gilberth> I read INT_MAX+1 may either signal an exception or return something, not prepare coffee.
[16:20:10] <gilberth> pl: Do you have a page / section number?
[16:20:22] <pl> C11 3.4.3
[16:20:55] <pl> apparently there also exists "constrained undefined behaviour" which would be similar to your reading, but I'm not sure if it's part of C11
[16:21:28] <pl> also, if you have access to final version, please tell me if it differs - I have a late draft
[16:21:54] <selwyn> interesting phrase 'constrained undefined behaviour'
[16:22:06] <selwyn> sounds like partly defined behaviour to me
[16:23:22] <pl> selwyn: there's "unspecified behaviour", with example being the order of operation of function arguments
[16:24:09] <pl> ahhhh
[16:24:11] <gilberth> pl: Got it.
[16:24:26] <pl> C11 in analyzable variant (not default!) has bounded undefined behaviour
[16:25:12] <duuqnd> Getting GCC to make coffee seems like it would be harder than with a good Lisp implementation though
[16:25:33] *** Quits: Aurora_v_kosmose (~LispyLigh@user/lispylights) (Ping timeout: 276 seconds)
[16:28:12] *** Joins: Aurora_v_kosmose (~LispyLigh@user/lispylights)
[16:29:12] <pjb> pl: but the argument is that "allowing the compiler to do whatever" is not allowing it to do idiotic things, but to let the compiler to define a convenient and useful thing to do, which can be different from compiler to compiler.  Assuming that UB implies you can deadcode it is wrong ( Õ°¬∞ Õú ñ Õ°¬∞) clang
[16:30:07] <pjb> and of course, a lot of language lawyering in CL (irc and usenet) can also fall into that trap.
[16:30:17] <gilberth> pl: And now? I am confused. The section on arithmetic itself is pretty silent. And 6.3.1.3. says "Otherwise, the new type is signed and the value cannot be represented in it; either the result is implementation-defined or an implementation-defined signal is raised."
[16:31:15] <pjb> duuqnd: be nice to the planet! Instead of buying a coffee machine, hire a slave!
[16:31:37] <pjb> duuqnd: you should be able to find a lot of them in "woke ecologists".
[16:31:49] <duuqnd> I'm trying to save money. Besides, I wouldn't use it much since I don't drink coffee.
[16:31:56] <gilberth> pjb: Would the slave produce less CO_2 per coffee made?
[16:32:12] <pjb> gilberth: slaves are CO_2 neutral.
[16:32:26] <duuqnd> That would depend on how you get your electricity and what you feed the slave.
[16:32:43] <gilberth> pjb: How does the water get hot?
[16:33:27] <pjb> The only inconvenient, is that you need a lot of them. Currently, we're using at least 200 engines each 24/24 7/7; we'd need at least 1000 slaves each to replace not even 1% of the work made by engines, but at least functionally the convenience‚Ä¶
[16:33:55] <duuqnd> Yeah, using a slave doesn't seem very efficient. I'd rather connect TYPEP to a regular coffee maker.
[16:33:56] <pjb> gilberth: the slave can thread a bicycle->generator or mechanical water heating.
[16:34:19] <pjb> duuqnd: we're beyond efficiency, when you have countries covered of wind generators!
[16:34:34] *** Joins: dec0d3r (~dec0d3r@2001:8003:4810:9600:7275:1afb:1707:8eaa)
[16:34:49] <duuqnd> Also, how would I connect TYPEP to a human?
[16:35:06] <gilberth> Ok. I need somewhat like 800W of electrical power. How many slaves are that?
[16:35:09] <pl> my favourite UB is "use after free" apparently
[16:35:21] <pjb> duuqnd: that's yet another problem. I've estimated that I've got about 1 kg of silicum running computations for me in my house‚Ä¶
[16:35:33] <gilberth> Little use in slaves when they are free.
[16:36:11] <selwyn> psa: barista coffee machines are more trouble than they are worth
[16:36:49] <pjb> gilberth: well, if you can make them reach their consequences, they might be convinced at first to work for you willingly (it's that, or CO2 production!). But indeed, I guess after a few days, you will have to use force (or psychology) to keep them working.
[16:37:31] <gilberth> Anyhow, I once heard the theory that ancient Greek or Romans didn't bother to develop machines because slaves were cheap. I mean: They were so close to inventing the steam machine.
[16:37:51] <pjb> pl: gcc -fsanitize=signed-integer-overflow gives me quite well defined behavior (and sane enough).
[16:38:27] <gilberth> * steam engine
[16:38:29] <pjb> pl: what we may regret is that it's not the default behavior, but it's easy to write a gcc wrapper that adds all the required options.
[16:39:26] <pjb> gilberth: it's actually the opposite. They had slaves because they didn't know how to do machines on a large scale.  As soon as we mastered the energy sources and technology to make machines on a large scales, the slaves were emancipated because they are not efficient enough!
[16:39:51] <selwyn> it seems that british penal treadmills were never used to generate electricity
[16:40:02] <pjb> gilberth: nowadays, a single man can do the work of a million men, when he's in command of an Airbus, or of a industrial forge.
[16:40:58] <pjb> selwyn: At least the punishment wasn't totally in vain, but it wasn't efficient, with all the food you have to give them to have them keep producing so little electricity! You could put that food (or the energy used to produce it) to a better usage.
[16:46:14] <gilberth> pjb: So you say the ancient tried, but didn't succeed?
[16:48:27] *** Joins: lotuseater (~user@p200300e7870566004b01295534bb48e2.dip0.t-ipconnect.de)
[16:54:34] *** Joins: v3ga (~cyberocto@c-73-39-172-34.hsd1.md.comcast.net)
[16:55:21] <selwyn>  weird that 19th century britain did not care about wasted labour in prisons
[16:57:54] <selwyn> the country of four year old factory workers
[16:58:38] <pjb> gilberth: I'm saying that the advantange of machines eating oil or uranium or thorium to produce work are so big, compared to biology, that it's silly to want to go back.  Silly and impossible, without also reverting to the demography that we had 300 years ago.
[16:59:02] <pjb> So anybody who wants to reduce CO2 should commit suicide first.  We'll talk later.
[16:59:30] <pjb> (or we may talk about when we start to build nuclear power plants to replace oil).
[17:00:47] <duuqnd> The only advantage slaves bring is being human, but the problem there is that slavery is immoral, illegal, and really more trouble than it's worth.
[17:03:45] <pjb> duuqnd: how is that immoral?  It's a contract: you house, clothe and feed your slaves, and in exchange they work for you.  They can also buy back the contract and be freed.  Often freed slaves would keep working for you as domestic anyways.
[17:03:45] <selwyn> pjb: sounds like you wouldn't mind going back 300 years anyway
[17:03:45] <duuqnd> It's not slavery if the slaves choose to work
[17:03:45] <pjb> duuqnd: reticent salaried workers are also beaten by police force, so I still see no difference.
[17:03:52] <pjb> selwyn: also, mind that most intellectual workers were slaves too in Rome.
[17:03:59] <pjb> teachers, researchers, etc.
[17:04:48] <duuqnd> So slavery only means that the compensation is non-monetary?
[17:04:53] <duuqnd> That doesn't sound right
[17:05:31] <selwyn> indentured slavery leads to bitter, racialised conflict with the (non-slave) working class
[17:05:39] <selwyn> consider the chinese in california/australia
[17:05:53] <selwyn> of course, if you are a boss, it is not so bad
[17:05:55] <gilberth> One may argue that capitalism is also some form of slavery. I personally don't buy that argument, as nobody forces me to work.
[17:06:07] <pjb> Basically, yes.  Plus some more violent workforce control, perhaps.  But really if the work and living conditions you provided were so bad that your slaves were unsatisfied, the system wouldn't be sustainable. You cannot have 2 armed guard slaves to 1 working slave. And who would guard the guards?
[17:07:29] <pjb> Salaried people don't really have a better status than slaves.  It might have been for a while easier for salaried people to change owner^W employer, but since employers can easily organize an apparent job scarcity, nowadays employees cannot really change jobs any easier than slave could.
[17:07:53] <pjb> gilberth: your belly forces you to work. You can stop working for six month, and they die of hunger.
[17:07:59] <pjb> s/they/then/
[17:08:35] <gilberth> pjb: I am talking about a state which has welware.
[17:08:45] <pjb> At least, 2500 years ago, you could go to a forest, and eat berries while you would cultivate some food to survive by yourself.
[17:08:53] <selwyn> one can simply read about what happened when this system of labour was actually implemented https://chinamatters.blogspot.com/2007/01/coolie-quagmire-flogging-sodomy-and.html
[17:08:54] -ixelp- China Matters: The Coolie Quagmire: Flogging, Sodomy, and Imperial Overreach on the Rand
[17:09:21] <pjb> Nowadays, the whole continents are squared by the gendarmerie, and there's no free land.
[17:09:57] <pjb> selwyn: as I said, if you don't provide proper work and life conditions, too bad for you (as an owner).
[17:10:11] <gilberth> OTOH I am free to become an emplyer of myself.
[17:10:15] <pjb> There are idiots all the time, everywhere.
[17:10:28] <pjb> gilberth: some slaves owned slaves too in Rome :-)
[17:10:49] <gilberth> pjb: Heh.
[17:11:24] <gilberth> Honestly, I don't feel like a slave. Even not as a slave owning slave.
[17:12:26] <pjb> But the details don't matter. The only question is whether we accept the use of energy sources at our disposal and the engines required to use that energy to produce work, or not. If we don't then we'll have to go back to 500,000,000 slaves worldwide,  with 50,000 owners (the "1%").
[17:12:43] <pjb> gilberth: yes, you're provided good living conditions.
[17:12:58] <selwyn> unsure how i feel
[17:13:39] <selwyn> i don't feel like a slave but i feel that most of society is set up to extract rent from myself and others
[17:14:05] <selwyn> and this doesn't feel like freedom
[17:14:33] <gilberth> pjb: Sure. This is what the Green party here does not get: Prosperity is directly connected to energy use. So we should not use less, but more.
[17:14:44] <shka> selwyn: have you read "Killing the host"?
[17:14:52] <shka> https://www.amazon.com/Killing-Host-Financial-Parasites-Bondage/dp/3981484282
[17:15:13] <selwyn> oh i think you recommended it a while back
[17:15:13] <selwyn> no
[17:15:22] <selwyn> but i will read some hudson soon
[17:15:30] <shka> i might have
[17:15:46] <shka> it is pretty good book
[17:16:01] <gilberth> Is that book about banks? And how there scheme works?
[17:16:35] <gilberth> * their
[17:16:37] <shka> about how economic system functions in a way that promotes extracting value into the high finance sector
[17:17:01] <gilberth> So I take that as a yes.
[17:17:03] <shka> which is not just banks, but also the wall street for instance
[17:17:12] <shka> and insurance as well
[17:17:46] <gilberth> Wall street? They just trade stock.
[17:18:32] <selwyn> i am concerned to read about how most of europe has a housing crisis now, and not just the megacities
[17:18:38] <selwyn> feels like there is increasingly no escape
[17:18:50] <gilberth> Banks are the real criminals. They loan you money, which they make from thin air, and then want it back with interest. And what is the interest paid from? New money, also made from thin air.
[17:19:02] <shka> gilberth: yes, but the purpose of the stock market is supposed to be gathering money for investment
[17:19:08] <shka> and this does not happen
[17:19:31] <selwyn> bbl
[17:19:38] *** Quits: selwyn (~selwyn@user/selwyn) (Quit: Connection closed)
[17:19:48] <shka> anyhow, i think that "Superimperialism" is more interesting book
[17:20:06] <shka> but this one is more relevant for more people
[17:20:09] <gilberth> Well, the problem in Europe with the insane housing market is the low interest rate.
[17:20:19] <shka> mmm
[17:20:21] <shka> not really
[17:20:30] <pjb> gilberth: on the other hand, there's the question of demography.  I think European people having evolved in a land of varying scarcity (seasons, and ice ages), are naturally adjusting their demography to their ecosystem carrying capacity.  Unfortunately, the perceptions are distorted by 1- immigration, and 2- bad information (psychological warfare).  But mostly we're tracking it correctly.
[17:21:19] <shka> gilberth: it is that the price of real estates is dictated by how much banks will lend
[17:21:20] <gilberth> Sure. People would by a house on a 100yr credit for more than they would ever earn, because they pay that little interest, which in their miscalculation, seems less expensive than rent. That's the problem.
[17:21:32] <shka> and banks will lend depending on the prices of the real estates
[17:21:47] <shka> system has a positive feedback loop in it
[17:22:01] <pjb> gilberth: For example, I'm thinking that IVG and the pill are used too much due to that psychological warfare, but there's the argument that even without them we'd still wouldn't have a much different demography (we're just adjusting for immigration aka replacement). 
[17:22:32] <gilberth> shka: Yes, and banking lend money on the basis, how much you can pay per month. Low interest => Higher real estate prices. Easy.
[17:23:00] <shka> higher rate of growth
[17:23:04] <pjb> Unfortunately, other peoples having evolved on more lenient territories and having been used to a more "natural" way of population control are overshooting (it'll be self correcting of course, but with great dolor).
[17:23:37] <shka> but the prices are bound to grow regardless the interest rates 
[17:23:58] <gilberth> pjb: Also here: More engery => more prosperity => less children.
[17:24:05] <pjb> So even if we had all the energy we'd want available, we would stil have to control our demography.
[17:24:20] <pjb> gilberth: I object to the the last implication. 
[17:24:26] <gilberth> shka: Yes, but they exploded with low interest rates.
[17:24:37] <pjb> It's not a question of prosperity but of ecological niche carrying capacity.
[17:24:56] <hayley> Okay, enough debt, the real problem is we don't have concurrent weak reference processing.
[17:25:25] <pjb> Basically, when we'll get out of our ecological niche, eg. going to space or to Mars, with a mastery of energy allowing the carrying capacity (totally artificial there), to be demultiplied, then naturally demography will adjust.
[17:26:35] <pjb> A self-sustaining Mars  colony wil require at least 100,000,000 people. Starting with 1,000,000 Elon wants to send there, they'd need to be 90% women in age of procreation (at least) and 10% men, and they'd need to make babies as fast as the food and habitat production alows to grow to 100,000,000.
[17:26:59] <gilberth> shka: I mean I could "buy" a 500k house for about EUR 900 a month.
[17:27:36] <pjb> Since it may be difficult to convince 900,000 smart women to go to Mars to have babies, Elon decide to build Tesla bots to replace the men, and trying to do it with 1,000,000 human and 99 robots for each human‚Ä¶  Good luck with that.
[17:27:55] <pjb> At your age? They give you that loan?
[17:28:01] <pjb> That's crazy.
[17:28:25] <hayley> Is there going to be a computer planning the reproduction on bunkers on Mars?
[17:28:45] * hayley barely manages to get out of her office chair.
[17:28:56] <hayley> Mein F√ºhrer, I can walk!
[17:29:17] <gilberth> pjb: Sure. The crazy thing is that those loans are over 20years with only 1% of the credit repaid each month. So you only have less than 20% of that house after those 20 years.
[17:29:36] <pjb> I'll be dead in 20 years!
[17:29:54] <gilberth> I may very well be dead in 20.
[17:30:50] <gilberth> pjb: Almost every one is dead after 100 years. Still banks make this kind of loans. So people "buy" houses they probably never could fully pay.
[17:31:21] <gilberth> The bank does not care. It invents the money, and still have the house. It's not yours.
[17:33:04] <gilberth> And thus the prices are hugely inflated. Rents for house follow with some delay, that's the problem.
[17:35:31] <gilberth> Would the interest rates ever raise to 5%, 7% where they were most of the time, people will sit there with their only 20% paid for house and need a new credit for the remaining 80%, which they will never be able to afford. So when this happens, we get a huge real estate crisis. But before that we get inflation.
[17:36:16] <gilberth> I see it that way: It's not the houses being more expensive, but the money being less of a value. Thus I have almost no money.
[17:37:42] <gilberth> The "fun" starts when food also gets more expensive. Heating already gets more expensive, also because of taxes to save the climate. Brilliant.
[17:46:14] *** Joins: clothespin_ (~awolven@c-73-209-95-92.hsd1.il.comcast.net)
[17:48:24] *** Joins: lisp123 (~lisp123@5.30.23.247)
[17:49:22] *** Quits: hendursa1 (~weechat@user/hendursaga) (Quit: hendursa1)
[17:50:55] *** Joins: hendursaga (~weechat@user/hendursaga)
[17:53:25] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 260 seconds)
[18:07:51] *** Joins: rogersm (~rogersm@90.166.177.48)
[18:14:51] <pjb> gilberth: just put up a solar panel on your snow covered roof, you'll see, you'll be able to get heat from it!
[18:25:50] *** Quits: duuqnd (~Duuqnd@185.201.174.78) (Ping timeout: 260 seconds)
[18:28:26] *** Quits: dave0 (~davezero@069.d.003.ncl.iprimus.net.au) (Quit: dave's not here)
[18:42:49] *** Joins: ec_ (~ec@gateway/tor-sasl/ec)
[18:49:26] *** Joins: chiselfuse (~chiselfus@user/chiselfuse)
[18:49:51] *** Quits: ec_ (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[19:02:12] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[19:06:24] *** Joins: ec_ (~ec@gateway/tor-sasl/ec)
[19:10:01] *** Quits: v3ga (~cyberocto@c-73-39-172-34.hsd1.md.comcast.net) (Ping timeout: 252 seconds)
[19:11:36] *** Joins: Duuqnd (~Duuqnd@c80-217-225-86.bredband.tele2.se)
[19:13:53] *** Joins: v3ga (~cyberocto@c-73-39-172-34.hsd1.md.comcast.net)
[19:20:24] *** Quits: ec_ (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[19:23:39] *** Quits: chiselfuse (~chiselfus@user/chiselfuse) (Remote host closed the connection)
[19:23:54] *** Joins: chiselfuse (~chiselfus@user/chiselfuse)
[19:25:53] *** Quits: chiselfuse (~chiselfus@user/chiselfuse) (Client Quit)
[19:27:59] *** Joins: makomo_ (~makomo@user/makomo)
[19:28:23] *** Joins: chiselfuse (~chiselfus@user/chiselfuse)
[19:32:34] *** Quits: makomo_ (~makomo@user/makomo) (Ping timeout: 252 seconds)
[19:45:02] *** Joins: makomo_ (~makomo@user/makomo)
[20:02:21] *** Quits: v3ga (~cyberocto@c-73-39-172-34.hsd1.md.comcast.net) (Ping timeout: 265 seconds)
[20:34:56] *** Joins: molson (~molson@2001-48F8-704A-CA1-0-0-75F-1015-static.midco.net)
[20:40:41] *** Joins: ec_ (~ec@gateway/tor-sasl/ec)
[20:54:39] *** Quits: ec_ (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[21:01:29] *** Joins: ec_ (~ec@gateway/tor-sasl/ec)
[21:11:38] *** Joins: lad (~lad@user/lad)
[21:22:32] *** Quits: makomo_ (~makomo@user/makomo) (Ping timeout: 252 seconds)
[21:26:30] *** Quits: ec_ (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[21:33:32] *** Joins: ec_ (~ec@gateway/tor-sasl/ec)
[21:46:09] *** Quits: chiselfuse (~chiselfus@user/chiselfuse) (Remote host closed the connection)
[22:09:38] *** Joins: chiselfuse (~chiselfus@user/chiselfuse)
[22:10:16] *** Quits: chiselfuse (~chiselfus@user/chiselfuse) (Client Quit)
[22:10:39] *** Joins: chiselfuse (~chiselfus@user/chiselfuse)
[22:11:45] *** Quits: rogersm (~rogersm@90.166.177.48) (Quit: Leaving...)
[22:12:39] *** Quits: ec_ (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[22:13:44] *** Quits: chiselfuse (~chiselfus@user/chiselfuse) (Remote host closed the connection)
[22:14:45] *** Joins: chiselfuse (~chiselfus@user/chiselfuse)
[22:18:17] *** Quits: vats (~vats@103.70.83.191) (Read error: Connection reset by peer)
[22:19:44] *** Joins: ec_ (~ec@gateway/tor-sasl/ec)
[22:30:12] *** Quits: shka (~herr@109.231.62.239) (Quit: Konversation terminated!)
[22:36:35] *** Joins: selwyn (~selwyn@user/selwyn)
[22:39:35] *** Joins: shka (~herr@109.231.62.239)
[22:41:58] <shka> selwyn: https://www.youtube.com/watch?v=nTUKIg3sSpg what do you think?
[22:41:58] -ixelp- Primordial Black Holes Made From Fermi Balls, May Explain Dark Matter - YouTube
[22:42:16] <selwyn> let's have a watch :o
[22:42:40] <selwyn> i like anton
[22:43:23] <shka> i like him to
[22:43:41] <shka> but primordial black holes is a far fetched concept 
[22:49:36] <shka> heh
[22:50:09] <shka> so played a bit with the bios settings for the fan on my cpu cooler
[22:51:00] *** Quits: ec_ (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[22:51:14] <shka> now it idles at 50 degrees and tops at 75 but is completely silent
[22:51:33] <shka> i guess it is only the highest speed which makes it noisy
[22:51:39] <ck_> because the cooling grid is larger in volume than your case, right, I saw the link you posted don't deny it now
[22:52:10] <shka> cooling grid?
[22:52:53] <ck_> the heatsink, the radiator
[22:53:16] <shka> no?
[22:53:21] <shka> this is a compact cooler
[22:53:49] <shka> but again, just 3700X
[22:54:35] <shka> no the hottest cpu
[22:55:17] <ck_> maybe I made a mistake and am misremembering, but there's a memory of you posting an image looking something like this: https://cdn.wccftech.com/wp-content/uploads/2012/07/DeepCool-Aeolus-Big-Frost.jpg (<-- dramatic reenactment)
[22:57:32] <shka> haha, yeah, i considered it!
[22:57:50] *** Joins: ec_ (~ec@gateway/tor-sasl/ec)
[22:58:04] <selwyn> thats similar to the one i use
[22:58:06] <shka> but i bought this one instead https://www.bhphotovideo.com/c/product/1557433-REG/noctua_162483_nh_d9l_cpu_cooler.html
[22:58:17] <ck_> must keep the utility bill low in winter, selwyn 
[22:58:20] <ck_> aha, I see
[22:58:30] <selwyn> the concept is cute
[22:58:31] <shka> which is pretty tiny, but is dual tower
[22:58:52] <shka> which is pretty cool idea imho
[22:59:02] <ck_> I'm toying with this thing https://www.quietpc.com/sys-db4 , the idea of not using any fans feels very nice
[22:59:03] -ixelp- DB4i Silent Cube
[22:59:12] <selwyn> find it hard to believe that there could be primordial black holes everywhere, comprising 80% of the universe, but we haven't discovered any of their hawking radiation yet
[22:59:25] <selwyn> but i have not followed the relevant calculations
[22:59:27] <shka> selwyn: yeah 
[22:59:47] <shka> well, there are those gamma ray bursts coming out of nowhere so maybe, maybe?
[22:59:54] <selwyn> ?
[23:00:11] <selwyn> cosmic rays?
[23:00:18] <shka> gamma ray bursts
[23:00:31] <shka> https://en.wikipedia.org/wiki/Gamma-ray_burst
[23:00:37] <shka> you know about those, right?
[23:00:41] <selwyn> no
[23:00:43] <selwyn> how interesting
[23:00:47] <shka> oh
[23:00:50] <shka> really?
[23:01:01] <shka> read it up man
[23:01:04] <shka> it is mind blowing!
[23:01:15] <selwyn> reading
[23:01:49] <selwyn> fun origin story: discovered by the secret vela satellites
[23:03:16] <selwyn> so weird
[23:03:18] <lotuseater> and whoosh, all life on earth is gone
[23:03:31] <shka> lotuseater: nah, not ALL life
[23:03:41] <shka> but say goodbye to the ozone layer
[23:04:10] <selwyn> the ozone layer is doing well these days right?
[23:04:35] <shka> yeah, but you could destroy it with enough of xrays/gamma rays
[23:04:40] <lotuseater> right, the powerful living beings are robust
[23:05:35] <selwyn> protection of the ozone layer/ saving of whales give me hope
[23:05:43] <selwyn> but they were done in the 1980s
[23:06:28] <selwyn> another weird thatcher fact is that she took climate change seriously
[23:06:47] <shka> weird that you don't take it more seriously 
[23:06:55] <shka> i mean, you are an island
[23:07:16] <shka> selwyn: anyway, there is hypothesis that gamma ray bursts are the black holes going white
[23:07:29] <selwyn> now that i can't believe lol
[23:07:32] <Duuqnd> "thatcher fact" is the best combination of two words I've seen all day
[23:07:32] <selwyn> ok
[23:08:06] <lotuseater> Duuqnd: what about "Trump hypothesis"? :D
[23:08:40] <selwyn> aren't white holes unstable?
[23:09:37] <shka> selwyn: i meant: they are evaporating
[23:09:48] <selwyn> oh
[23:10:10] <shka> and because of how black holes evaporate, the process accelerates as the black hole becomes lighter
[23:10:21] <selwyn> yes
[23:10:26] <selwyn> oh and they go pop
[23:10:27] <selwyn> cute
[23:10:44] <shka> pop, leaving behind field of radiation
[23:11:29] <shka> there is even that idea 
[23:12:19] <shka> that civilization could produce an artificial small black hole, and feed it matter at the exact same rate as it evaporates to have ultra efficient energy source
[23:13:51] <selwyn> we need to know the green party position on this 
[23:14:11] *** Quits: lad (~lad@user/lad) (Quit: Leaving)
[23:14:13] <shka> ummm, we could throw the radioactive waste in...
[23:14:28] <selwyn> and get hawking radiation back out
[23:14:38] <selwyn> radiation = sounds like radioactive to me
[23:15:03] <lotuseater> or feed it whatever you like :D
[23:15:15] <shka> well, it is just solar power on steroids
[23:15:29] <shka> ;-)
[23:15:38] <selwyn> that would be a good marketing slogan for it
[23:16:04] <lotuseater> and in recent years i thought of why not throwing it into the sun but it's too dangerous
[23:17:19] <selwyn> nuclear waste?
[23:17:52] <lotuseater> yes
[23:18:10] <selwyn> can be fun
[23:19:02] <APic> üò∏
[23:26:05] <selwyn> https://nitter.net/Papyroskina/status/1435697273141334024#m
[23:26:05] -ixelp- –ú–∞–Ω—è (@Papyroskina): "–ø–∞—Å—Ç–æ—Ä–∞–ª—å–∫–∞" | nitter
[23:28:19] *** Joins: humasect (~humasect@2001:1970:57e0:4100::3675)
[23:30:19] <pjb> selwyn: imagine you only have 1 radioactive atom that will decay to stable elements. You put it in a box, wait for it to decay. Then in the box  there remain no radioactive elements, but it'll be full of radiation!
[23:31:57] <pjb> Also radiation can be emited by charged stable particules travelling fast dielectric materials aka Cherenkov radiation. No radioactivity there. https://en.wikipedia.org/wiki/Cherenkov_radiation
[23:32:17] <selwyn> https://nitter.net/CAPYBARA_MAN/status/1435594550140149764#m
[23:32:18] -ixelp- CAPYBARA MAN (@CAPYBARA_MAN): "Capybaras safely crossing the road." | nitter
[23:32:49] <pjb> selwyn: light emited when buring some wood is radiation, but no radioactivity, just normal chemistry.
[23:32:58] <selwyn> yes
[23:33:40] <humasect> pjb: does mutation run out ?
[23:33:59] <pjb> radioactive decaying indeed runs out. 
[23:34:07] <humasect> er that no chain reaction is perpetual
[23:34:14] <humasect> (other than The Great One)
[23:34:29] <pjb> yes, no perpetual motion.
[23:35:05] <pjb> The only thing is that some decay fast (short half lifes), and some decay slow (long half life).  There are advantages and inconvenient to both.
[23:35:13] <humasect> this something more ELI5 but. why don't mirrors add more light when reflecting say a candle? yet we can use reflectors to focus the light (as in headlights on car, or garden lights at home)
[23:35:19] <pjb> Fast decaying will soon become non-radiactive, but produce a lot of radiation.
[23:35:37] <pjb> Slow decaying won't become non-radiactive soon, but don't produce a lot of radiation.
[23:36:01] <humasect> ohhh. i was going to ask about half-life but i thought it was specific to pharma/biochem
[23:36:30] <edgar-rft> isn't the overall sum of radiation in both cases the same?
[23:36:42] <humasect> ohh
[23:36:45] <pjb> Well, in pharma and biochemistry, half-life might be how much a product kills half the test subjects. 
[23:37:02] <pjb> Here it's how much time is needed for half or the elements to decay.
[23:37:09] *** Quits: ec_ (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[23:37:10] <humasect> like half life of nicotine is 4hr or something (years ago) so like 8hr 
[23:37:22] <pjb> So after the half life, you're left only with half the radioactive material and half the radiation.
[23:37:48] <humasect> why measure in half-lives ? now i see the meaning of the video game title as well. but, is there something specific about subdivision/cutting in half ?
[23:37:48] <pjb> humasect: and this might also be the time a metabolism can process half the chemical.
[23:37:57] <edgar-rft> I know what you're talking about because I'm half-alive, too
[23:38:11] <pjb> humasect: because decaying is random, so it will never occur all at the same time, or within a given decay.
[23:38:16] <pjb> It's purely random.
[23:38:23] <humasect> pjb: ahh, figured. cool 
[23:38:27] <pjb> Hence the geiser counters used as pure randomness sources.
[23:38:39] <humasect> interesting
[23:38:53] <humasect> just that? any other source of pure random? 
[23:39:10] <pjb> any source of noise whatever it is, is often purely random.
[23:39:23] <pjb> Heath, sound noise, light noise, whatever.
[23:39:29] <pjb> s/Heath/Heat/
[23:39:38] <humasect> is that because it cant be predicted?
[23:39:48] <humasect> or not at a fine enough granularity
[23:40:15] <pjb> Yes, but not because we could not predict it, because its source is really chaotic. It's not deterministic on the long term (ie. on macroscopic scales).
[23:40:21] <pjb> Eg. the brownian movement.
[23:41:22] <pjb> We can compute the evolution of the states of a few particules, but for macroscopic systems, we will never have computers big and fast enough to do it: we need this universe to do it! Hence this universe is a computer computing its simulation.
[23:41:36] <selwyn> quantum rngs are more exciting
[23:42:22] <humasect> hmmm. i am thinking, for pure chaos, does that not require consciousness? that is, to know what previous choices have taken. for example almost every single thing i type on irc is something i have never ever have typed ever before and i make sure of it. if i was not aware, i could repeat the same Barks and Meows without knowing
[23:42:46] <humasect> pjb: yeah =) small computer cannot contain bigger computer
[23:43:07] <humasect> pjb: scary and cold as hell, but also warming and commfy being a nerd. =) 
[23:43:23] <pjb> :-)
[23:43:32] <selwyn> i don't think much of the simulation hypothesis, but if i am to entertain it, the computer in question should be a quantum computer
[23:43:40] <selwyn> and i am not sure what to think about this
[23:43:43] <White_Flame> humasect: chaos can repeat.  It's unpredictable
[23:44:02] *** Joins: ec_ (~ec@gateway/tor-sasl/ec)
[23:44:32] <pjb> Well not exacly. Since very small perturbation can have big different consequences.  It can seem to be repeating to eventually diverge dramatically from previous occurences.
[23:46:13] <selwyn> matrix trailer wtf
[23:46:30] <White_Flame> if the chaos is generative, in terms of RNG or IRC text or whatever, there's no reason it can't repeat even large streams of output it has output before
[23:47:18] <edgar-rft> every time I wake up it's still the same chaos
[23:47:22] <selwyn> return to 1999
[23:53:37] <humasect> White_Flame: hmm..
[23:53:53] <humasect> selwyn: but the computer itself is running itself. 
[23:54:01] <humasect> not exactly simulated. 
[23:54:06] <humasect> the hardware *is* the software
[23:54:26] <selwyn> iiuc the idea is that a computer is simulating the universe
[23:54:37] <humasect> White_Flame: but PI doesn't repeat?
[23:54:47] <White_Flame> it has sections that repeat
[23:54:48] <humasect> if chaos is infinite, there would be no wrap around kind of thing
[23:54:51] <humasect> ah
[23:54:55] <White_Flame> by "repeat" regarding a number, they mean that the whole thing is a repetition
[23:55:03] <humasect> yes
[23:55:07] <humasect> pattern
[23:55:22] <White_Flame> I really like the example of this non-repeating number: 0.101001000100001000001...
[23:55:29] <humasect> its not just pie that is special that was it it? err pi
[23:55:37] <White_Flame> even though it's infinite and non-repeating, you still will never find a "11" in there
[23:55:47] <humasect> yea
[23:56:09] <White_Flame> which is an example of the predictions you really can't make about "infinite and non-repeating"
[23:56:22] <lotuseater> there are also representations for eg pi that are regular
[23:56:58] <selwyn> the 'diagonal arguments' for the interval [0,1] being uncountable are fun
[23:57:21] <edgar-rft> what if the pattern repeats *after* infinity?
[23:57:39] <humasect> =p
[23:57:48] <humasect> i like the idea of Zero and Inf being thes ame
[23:57:51] <humasect> the same*
