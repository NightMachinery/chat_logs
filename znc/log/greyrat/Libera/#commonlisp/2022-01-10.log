[00:01:14] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 256 seconds)
[00:04:49] *** Joins: gaqwas (~john@dynamic-077-004-087-079.77.4.pool.telefonica.de)
[00:07:25] *** Joins: dra (~dra@2a04:4540:6400:2900:f9af:31e3:2a01:bf6b)
[00:08:10] *** Quits: victor (uid208353@user/victor) (Quit: Connection closed for inactivity)
[00:08:32] <rotateq> hey dra :) hope your lisp in assembly comes along well
[00:09:24] <dra> Hey rotateq! It's slowly yet steadily growing. :)
[00:09:50] <dra> But it's lightyears away from being Common Lisp.
[00:12:15] *** Joins: dre (~dre@2001:8003:c932:c301:4049:6b4e:9cfa:ed15)
[00:12:28] <dre> Good morning everyone
[00:12:52] <dra> Hi dre!
[00:12:58] *** Joins: VincentV` (~user@212.97.4.16)
[00:13:18] <dre> :D
[00:13:46] <rotateq> dra: so you can profit from the SICL modules some day too!
[00:14:20] <dre> 2 quick questions: 1. how do you get the "docstrings" from functions, is it implementation specific? I can't find anything for SBCL.
[00:14:41] *** Quits: VincentVega (~user@212.97.4.16) (Ping timeout: 256 seconds)
[00:14:52] <rotateq> maybe I can understand assembly some day a bit too. i restarted my MIX project now that i also have a better idea with using mixins
[00:15:37] <dre> 2. if I have a .lisp file; can I wrap all of its contents into a "(do *file-contents*)" form to evaluate? I'm writing a vim plugin and can only send a single form to the swank server (afaik)
[00:15:53] <rotateq> dre: hm with DOCUMENTATION ? :)
[00:15:58] <dre> unless anyone here is an expert with swank
[00:16:39] <rotateq> dre: you would use PROGN to wrap multiple forms into one
[00:17:18] <dre> rotateq, perfect, sorry; I was confusing myself
[00:17:31] <rotateq> I confuse myself all the time. :)
[00:17:37] *** Joins: varjag (~user@ti0040a400-5479.bb.online.no)
[00:19:15] <dre> (documentation foo) didn't seem to work tho :x
[00:19:23] *** Joins: mht-wtf (~mht@2a03:b0c0:3:e0::1e2:c001)
[00:19:26] <rotateq> hm and what is FOO ?
[00:19:35] <rotateq> which type of thing i mean
[00:19:49] <dre> (defun foo () "Some func" (print "bar") ())
[00:19:51] <rotateq> you can also use (SETF DOCUMENTATION) on things
[00:21:07] <White_Flame> (documentation 'foo 'function)
[00:21:52] <White_Flame> the 1st param can be a symbol, function, package, all sorts of things
[00:22:14] <White_Flame> since there are different namespaces by which named things are implemented & documented
[00:22:29] <White_Flame> http://www.lispworks.com/documentation/HyperSpec/Body/f_docume.htm
[00:22:33] <dre> neat! thanks, that make sense
[00:22:50] <dre> reminder to self: like always, read the docs
[00:24:31] *** Quits: varjag (~user@ti0040a400-5479.bb.online.no) (Read error: Connection reset by peer)
[00:24:51] *** Joins: _73 (~user@pool-96-233-64-53.bstnma.fios.verizon.net)
[00:25:30] <White_Flame> however, it is often more useful to do (describe 'foo) or #'foo, as it can give a lot broader information when interactively figuring things out
[00:25:59] *** Joins: varjag (~user@ti0040a400-5479.bb.online.no)
[00:28:34] <dre> thanks, that's much easier
[00:29:10] *** Parts: _73 (~user@pool-96-233-64-53.bstnma.fios.verizon.net) ()
[00:30:03] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[00:43:28] *** Joins: nature (~nature@45.32.235.173)
[00:43:49] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 240 seconds)
[00:47:08] *** Quits: rito_ (~rito_gh@45.112.243.149) (Quit: Leaving)
[00:47:50] <White_Flame> I'm finally making a bit more progress on Revivory, my Symbolics Ivory emulator written in CL
[00:48:55] <rotateq> sounds good
[00:48:56] <White_Flame> certainly have my face full of ASM stuff from a very different architecture
[00:49:33] <rotateq> ah it has 40bit architecture
[00:50:08] <White_Flame> I can compile the ivory functions into native CL functions, and execute them quite fast.  But the hardware model has some unknown missing bits still, and it crashes ~250k instructions into bootup with a (emulated) memory fault :-P
[00:50:30] <White_Flame> but at least I know what it is now, and can progress
[00:50:39] <rotateq> :D
[00:51:52] *** Joins: miique (~miique@181.46.139.166)
[00:54:47] *** Quits: superduperuser (uid389421@id-389421.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[00:55:59] <rotateq> I try to use as much CLOS for my MIX emulator as I can. (and what makes maybe sense)
[00:58:05] <rotateq> I remember, my first approach in summer 2020 was just with structs and jeez no, just no. :D
[00:58:25] *** Joins: bendersteed (~user@ppp141237131021.access.hol.gr)
[00:59:27] *** Quits: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[01:01:06] *** Joins: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[01:05:31] *** Quits: kevingal_ (~quassel@2a02:8084:4140:f300:49:20aa:b016:8bd7) (Remote host closed the connection)
[01:09:27] *** Quits: jstoddard (~Jeremiah@2607:fb90:4af3:abad:6e77:59c6:fcf:ce6c) (Quit: away from internet for a bit)
[01:10:06] <dre> https://github.com/Olical/conjure/pull/296 my common lisp client for vim conjure is just about up :D
[01:10:42] *** Quits: gaqwas (~john@dynamic-077-004-087-079.77.4.pool.telefonica.de) (Remote host closed the connection)
[01:10:43] *** Joins: BerntH (~BerntH@cpe0015172156ac-cm20f19e128374.cpe.net.cable.rogers.com)
[01:10:52] *** Quits: BerntH (~BerntH@cpe0015172156ac-cm20f19e128374.cpe.net.cable.rogers.com) (Client Quit)
[01:12:49] <phoe> nice! I see port 4005, does it use swank under the hood?
[01:14:32] <dre> yep
[01:14:54] <dre> unfortunately you have to start up swank in another terminal or something. I don't know how to make a simple script to load up swank
[01:14:57] <phoe> even better!
[01:15:26] *** Joins: akoana (~ah@user/akoana)
[01:15:45] <dre> I tried to do something like `sbcl --eval "(ql:quickload :swank)...."` -- but it can't find swank that early.
[01:16:01] <dre> I'll perhaps work on that another time
[01:22:37] *** Quits: nature (~nature@45.32.235.173) (Ping timeout: 240 seconds)
[01:33:49] *** Joins: rogersm (~rogersm@90.166.180.250)
[01:36:27] *** Joins: gaqwas (~john@dynamic-077-004-087-079.77.4.pool.telefonica.de)
[01:37:33] *** Quits: rogersm (~rogersm@90.166.180.250) (Client Quit)
[01:45:46] *** Joins: bedouin_ (sid523379@id-523379.hampstead.irccloud.com)
[01:52:09] *** Joins: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f)
[01:53:23] *** Quits: dra (~dra@2a04:4540:6400:2900:f9af:31e3:2a01:bf6b) (Quit: Leaving)
[01:53:48] *** Joins: lisp123 (~lisp123@5.30.23.247)
[01:54:13] *** Quits: pve (~pve@87-93-217-13.bb.dnainternet.fi) (Quit: leaving)
[01:56:41] *** Quits: rgherdt (~rgherdt@ip5f5af455.dynamic.kabel-deutschland.de) (Ping timeout: 256 seconds)
[01:58:32] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 256 seconds)
[02:10:51] *** Quits: gaqwas (~john@dynamic-077-004-087-079.77.4.pool.telefonica.de) (Remote host closed the connection)
[02:18:01] *** Joins: Algernon69 (~Algernon6@2a01:e0a:511:6ce0:9028:142b:ee15:4acf)
[02:20:57] *** Joins: Algernon91 (~Algernon6@2a04:cec0:10e8:5fa4:1976:6fd0:de35:966d)
[02:24:35] *** Quits: Algernon69 (~Algernon6@2a01:e0a:511:6ce0:9028:142b:ee15:4acf) (Ping timeout: 250 seconds)
[02:25:17] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[02:34:19] *** Quits: peterhil (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi) (Remote host closed the connection)
[02:34:37] *** Joins: peterhil (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi)
[02:36:20] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[02:37:01] *** Quits: azimut_ (~azimut@gateway/tor-sasl/azimut) (Remote host closed the connection)
[02:38:53] *** Quits: Algernon91 (~Algernon6@2a04:cec0:10e8:5fa4:1976:6fd0:de35:966d) (Read error: Connection reset by peer)
[02:42:47] *** Quits: varjag (~user@ti0040a400-5479.bb.online.no) (Remote host closed the connection)
[02:45:46] *** Quits: notzmv (~zmv@user/notzmv) (Read error: Connection reset by peer)
[02:48:20] *** Joins: notzmv (~zmv@user/notzmv)
[03:00:42] *** Joins: IPmonger (~IPmonger@c-69-242-83-226.hsd1.pa.comcast.net)
[03:01:02] *** Quits: IPmonger (~IPmonger@c-69-242-83-226.hsd1.pa.comcast.net) (Remote host closed the connection)
[03:05:58] *** Quits: amb007 (~a_bakic@102.215.76.86.rev.sfr.net) (Ping timeout: 256 seconds)
[03:07:25] <pjb> dre: perhaps:  sbcl --eval '(load #P"~/quicklisp/setup.lisp")' --eval '(ql:quickload :swank)'  --eval '(swank:create-server :interface "127.0.0.1" :port 4005)'
[03:10:41] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 268 seconds)
[03:13:20] *** Quits: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[03:15:31] *** Joins: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[03:18:02] <rotateq> reminds me I wanted to try building sbcl with the linkable-runtime feature
[03:21:49] *** Quits: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[03:23:52] *** Joins: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[03:23:52] <dre> pjb, nice, thanks, that does work.
[03:25:25] *** Quits: random-nick (~random-ni@87.116.167.125) (Ping timeout: 240 seconds)
[03:25:49] *** Joins: scruple (~scruple@107-202-104-162.lightspeed.irvnca.sbcglobal.net)
[03:29:57] *** Joins: s-liao (~s-liao@101.86.96.21)
[03:30:14] *** Quits: scruple (~scruple@107-202-104-162.lightspeed.irvnca.sbcglobal.net) (Quit: leaving)
[03:31:05] *** Quits: theothornhill (~user@2a01:799:159d:aa00:3085:8eab:86cd:42cb) (Remote host closed the connection)
[03:31:51] *** Joins: igemnace (~ian@user/igemnace)
[03:36:13] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[03:40:22] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[03:41:15] *** Joins: gaqwas (~john@dynamic-077-004-087-079.77.4.pool.telefonica.de)
[03:43:24] *** Joins: notzmv (~zmv@user/notzmv)
[03:45:51] *** Joins: jstoddard (~Jeremiah@2607:fb90:4a29:bce5:1619:e059:e988:c1fe)
[03:57:26] *** Joins: waku (~user@catv87040.tac-net.ne.jp)
[03:59:43] *** Parts: waku (~user@catv87040.tac-net.ne.jp) ()
[04:00:13] *** Quits: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[04:01:18] *** Joins: amb007 (~a_bakic@128.132.22.93.rev.sfr.net)
[04:01:18] *** Quits: amb007 (~a_bakic@128.132.22.93.rev.sfr.net) (Read error: Connection reset by peer)
[04:01:33] *** Joins: amb007 (~a_bakic@102.215.76.86.rev.sfr.net)
[04:02:14] *** Joins: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[04:02:36] *** Quits: igemnace (~ian@user/igemnace) (Remote host closed the connection)
[04:02:39] *** Joins: waku (~user@catv87040.tac-net.ne.jp)
[04:04:31] *** Joins: igemnace (~ian@user/igemnace)
[04:08:11] *** Joins: tanners (~tanners@pool-71-127-59-41.washdc.fios.verizon.net)
[04:18:30] *** Quits: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[04:20:20] *** Joins: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[04:25:17] *** Quits: gaqwas (~john@dynamic-077-004-087-079.77.4.pool.telefonica.de) (Ping timeout: 240 seconds)
[04:25:33] *** Quits: jstoddard (~Jeremiah@2607:fb90:4a29:bce5:1619:e059:e988:c1fe) (Quit: Leaving)
[04:28:24] *** Joins: jmhnsn (~jmhnsn@nat.frazmtn.com)
[04:33:13] *** Parts: jmhnsn (~jmhnsn@nat.frazmtn.com) (WeeChat 3.3)
[04:39:46] *** Quits: VincentV` (~user@212.97.4.16) (Remote host closed the connection)
[04:41:09] *** Quits: igemnace (~ian@user/igemnace) (Remote host closed the connection)
[04:43:02] *** Joins: igemnace (~ian@user/igemnace)
[04:44:00] *** Quits: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[04:45:41] *** Joins: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[04:46:55] *** Quits: kevingal (~quassel@2a02:8084:4140:f300:b923:8538:9f72:8140) (Remote host closed the connection)
[04:56:37] *** Quits: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[04:59:00] *** Joins: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[05:00:07] <jmercouris> I have another trivial problem I am struggling with, because a macro does not evaluate its arguments
[05:00:17] <jmercouris> http://dpaste.com/DKSX3VD5F
[05:00:28] <jmercouris> I'm trying to automatically generate a class definition, but I can't just do what I've written
[05:00:54] <jmercouris> because `(alexandria:hash-table-keys ps-format-flags)` will be literally passed into the macro
[05:01:58] <jmercouris> not sure how I should change my approach
[05:02:07] <moon-child> assuming ps-format-flags is lexical, I think you would need eval
[05:02:21] <jmercouris> :'(
[05:02:39] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 276 seconds)
[05:03:13] <moon-child> oh, wait, no
[05:04:11] <jmercouris> this feels like such a stupid problem, but after staring at it for 30 minutes, I decided to reach out
[05:04:55] <jmercouris> for your curiosity it is just: (defparameter ps-format-flags (make-hash-table))
[05:05:10] <moon-child> oh, so it's not lexical
[05:05:18] <jmercouris> correct
[05:05:27] <moon-child> you could eval-when and then actually read from the macro
[05:05:30] <moon-child> but there is a better way
[05:05:39] <moon-child> ditch the macro
[05:05:41] <moon-child> and instead, use
[05:05:53] <jmercouris> how could I do this without a macro?
[05:06:00] <moon-child> (make-instance 'standard-class :direct-slots ...)
[05:06:18] <jmercouris> ok I see
[05:06:31] <jmercouris> hm, does that do all of the things defclass does?
[05:06:48] <jmercouris> because I'm looking in SBCL
[05:06:55] <jmercouris> and it seems that defclass has many more effects
[05:07:41] <moon-child> (setf (find-class 'name) (make-instance 'standard-class :name 'name ...))
[05:08:45] <jmercouris> fair enough, that is probably the essentials
[05:11:58] <jmercouris> well, it still complains
[05:12:50] <moon-child> ah, right, apparently you need to specify :direct-superclasses () on ccl
[05:12:57] *** Quits: euandreh (~euandreh@2804:14c:33:9fe5:f755:55d9:216b:76f6) (Ping timeout: 240 seconds)
[05:14:17] <jmercouris> no, there is more to it than that
[05:14:23] <jmercouris> the format of direct slots is unexpected
[05:14:31] <jmercouris> I've provided: (make-instance 'standard-class :DIRECT-SLOTS '((STAT) (SESS)) :NAME 'POTATO)
[05:14:34] <jmercouris> but it doesn't like that
[05:14:52] <jmercouris> complains about odd number of keyword arguments
[05:14:58] <moon-child> :direct-slots '((:name stat) (:name sess))
[05:15:16] <jmercouris> I see
[05:15:28] <jmercouris> well, now it works
[05:15:32] <jmercouris>  would have never guessed it needs :name
[05:15:34] <jmercouris> how did you know that?
[05:17:01] <moon-child> http://metamodular.com/CLOS-MOP/initialization-of-class-metaobjects.html  example here
[05:17:30] <jmercouris> thats how you knew, I see
[05:17:35] <jmercouris> I haven't yet studied the MOP yet
[05:17:40] <jmercouris> s/yet//
[05:17:57] *** Joins: azimut_ (~azimut@gateway/tor-sasl/azimut)
[05:18:15] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Ping timeout: 276 seconds)
[05:21:09] *** Quits: igemnace (~ian@user/igemnace) (Remote host closed the connection)
[05:21:12] <jmercouris> thanks for your help moon-child
[05:21:18] <jmercouris> I will have to learn more about the MOP
[05:21:38] *** Joins: igemnace (~ian@user/igemnace)
[05:35:34] *** Quits: waku (~user@catv87040.tac-net.ne.jp) (Ping timeout: 256 seconds)
[05:42:12] *** Quits: xaltsc (~xaltsc@user/xaltsc) (Remote host closed the connection)
[05:44:37] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 240 seconds)
[05:46:35] *** Quits: igemnace (~ian@user/igemnace) (Remote host closed the connection)
[05:50:59] <Bike> jmercouris: ensure-class is the more direct function equivalent to defclass. it will take care of the (setf (find-class ...)) part for one
[05:55:57] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 240 seconds)
[05:56:22] *** Joins: waleee (~waleee@h-98-128-229-110.NA.cust.bahnhof.se)
[05:59:40] *** Quits: rotateq (~user@p200300e787097300818cd04b4ea1a4f3.dip0.t-ipconnect.de) (Quit: ERC (IRC client for Emacs 27.2))
[06:03:06] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Ping timeout: 276 seconds)
[06:03:23] *** Joins: igemnace (~ian@user/igemnace)
[06:08:26] *** Joins: waku (~user@catv87040.tac-net.ne.jp)
[06:09:08] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[06:12:45] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[06:12:49] *** Quits: waku (~user@catv87040.tac-net.ne.jp) (Ping timeout: 256 seconds)
[06:27:49] *** Quits: igemnace (~ian@user/igemnace) (Ping timeout: 240 seconds)
[06:36:54] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Ping timeout: 276 seconds)
[06:47:11] *** Joins: waku (~user@catv87040.tac-net.ne.jp)
[06:47:54] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[06:48:58] *** Joins: igemnace (~ian@user/igemnace)
[06:53:01] *** Quits: waku (~user@catv87040.tac-net.ne.jp) (Ping timeout: 240 seconds)
[06:58:29] *** Joins: IPmonger (~IPmonger@c-69-242-83-226.hsd1.pa.comcast.net)
[06:58:43] *** Quits: miique (~miique@181.46.139.166) (Ping timeout: 256 seconds)
[06:58:47] *** Quits: IPmonger (~IPmonger@c-69-242-83-226.hsd1.pa.comcast.net) (Remote host closed the connection)
[07:05:04] *** Joins: IPmonger (~IPmonger@c-69-242-83-226.hsd1.pa.comcast.net)
[07:05:21] *** Quits: IPmonger (~IPmonger@c-69-242-83-226.hsd1.pa.comcast.net) (Remote host closed the connection)
[07:07:09] *** Quits: tanners (~tanners@pool-71-127-59-41.washdc.fios.verizon.net) (Quit: Quit)
[07:08:21] *** Quits: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[07:10:21] *** Joins: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[07:14:29] *** Joins: x88x88x_ (~x88x88x@gateway/vpn/pia/x88x88x)
[07:16:20] *** Quits: x88x88x_ (~x88x88x@gateway/vpn/pia/x88x88x) (Client Quit)
[07:16:42] *** Joins: x88x88x_ (~x88x88x@gateway/vpn/pia/x88x88x)
[07:16:51] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[07:19:22] *** Joins: waku (~user@catv87040.tac-net.ne.jp)
[07:21:17] *** Quits: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[07:23:42] *** Joins: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[07:23:57] *** Quits: waku (~user@catv87040.tac-net.ne.jp) (Ping timeout: 240 seconds)
[07:30:16] <beach> Good morning everyone!
[07:34:10] *** Joins: s-liao (~s-liao@101.86.96.21)
[07:34:59] *** Quits: waleee (~waleee@h-98-128-229-110.NA.cust.bahnhof.se) (Ping timeout: 256 seconds)
[07:37:05] *** Quits: semz (~none@user/semz) (Ping timeout: 268 seconds)
[07:42:53] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[07:45:27] *** Joins: pillton (~user@14-203-212-8.tpgi.com.au)
[07:49:45] *** Joins: semz (~none@user/semz)
[07:52:34] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[07:58:05] *** Joins: miique (~miique@181.46.139.166)
[07:59:13] *** Joins: notzmv (~zmv@user/notzmv)
[08:04:33] <fe[nl]ix> morning beach :)
[08:06:44] <fe[nl]ix> is there an ASDF-based project that uses Github workflows to test on multiple implementations ?
[08:06:53] *** Quits: x88x88x_ (~x88x88x@gateway/vpn/pia/x88x88x) (Quit: leaving)
[08:07:21] <fe[nl]ix> I need to copy working workflow configs from someone because figuring out Github docs is not trivial
[08:09:17] *** Joins: x88x88x_ (~x88x88x@gateway/vpn/pia/x88x88x)
[08:12:00] *** Quits: x88x88x_ (~x88x88x@gateway/vpn/pia/x88x88x) (Client Quit)
[08:12:15] *** Joins: x88x88x_ (~x88x88x@gateway/vpn/pia/x88x88x)
[08:12:36] <etimmons> fe[nl]ix: probably worth looking at https://github.com/40ants/ci . But I can't speak to it's quality (I don't use GitHub Actions and even if I did, it looks too opinionated for my tastes)
[08:13:44] *** Quits: x88x88x_ (~x88x88x@gateway/vpn/pia/x88x88x) (Client Quit)
[08:13:58] *** Joins: x88x88x_ (~x88x88x@gateway/vpn/pia/x88x88x)
[08:19:59] *** Quits: x88x88x_ (~x88x88x@gateway/vpn/pia/x88x88x) (Quit: leaving)
[08:20:15] *** Joins: x88x88x_ (~x88x88x@gateway/vpn/pia/x88x88x)
[08:22:40] *** Quits: x88x88x_ (~x88x88x@gateway/vpn/pia/x88x88x) (Client Quit)
[08:22:54] *** Joins: x88x88x_ (~x88x88x@gateway/vpn/pia/x88x88x)
[08:26:12] *** Quits: x88x88x_ (~x88x88x@gateway/vpn/pia/x88x88x) (Client Quit)
[08:28:12] *** Joins: x88x88x_ (~x88x88x@gateway/vpn/pia/x88x88x)
[08:28:34] *** Quits: x88x88x_ (~x88x88x@gateway/vpn/pia/x88x88x) (Client Quit)
[08:28:59] *** Parts: pranavats (3fba1d1b34@jabberfr.org) (Error from remote client)
[08:29:47] *** Joins: pranavats (3fba1d1b34@jabberfr.org)
[08:31:40] *** Joins: waku (~user@catv87040.tac-net.ne.jp)
[08:39:13] <fe[nl]ix> wow, that's rather unreadable
[08:40:34] <fe[nl]ix> but it's a start
[08:43:55] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[08:45:30] *** Quits: waku (~user@catv87040.tac-net.ne.jp) (Remote host closed the connection)
[08:45:44] *** Joins: waku (~user@catv87040.tac-net.ne.jp)
[08:51:47] *** Quits: Bike (~Bike@71.69.170.70) (Quit: Connection closed)
[08:53:20] *** Quits: waku (~user@catv87040.tac-net.ne.jp) (Ping timeout: 256 seconds)
[08:55:53] *** Quits: Alfr (~Alfr@user/alfr) (Remote host closed the connection)
[08:57:13] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[08:58:49] *** Joins: antonv (~antonv@46.53.246.3)
[09:03:02] *** Joins: Alfr (~Alfr@user/alfr)
[09:03:22] *** Quits: Alfr (~Alfr@user/alfr) (Remote host closed the connection)
[09:07:38] *** Joins: Alfr (~Alfr@user/alfr)
[09:08:23] *** Quits: Alfr (~Alfr@user/alfr) (Remote host closed the connection)
[09:09:17] *** Joins: Jing (~hedgehog@240e:390:7c53:a7e1:15fa:c22e:b1fb:575a)
[09:11:12] *** Joins: waku (~user@catv87040.tac-net.ne.jp)
[09:13:39] <jmercouris> fe[nl]ix: take a look at Nyxt
[09:13:43] <jmercouris> We have that
[09:15:51] *** Joins: s-liao (~s-liao@101.86.96.21)
[09:28:07] *** Quits: akoana (~ah@user/akoana) (Quit: leaving)
[09:42:37] *** Quits: jealousmonk (~user@2804:431:e7c4:750a:e8f5:ebdf:f21a:128e) (Quit: ERC (IRC client for Emacs 27.1))
[09:47:37] *** Joins: beach` (~user@2a01:cb19:150:3400:a173:2cef:ba0f:9b68)
[09:48:28] *** Quits: beach (~user@2a01:cb19:150:3400:e578:7149:acf:a4d9) (Killed (NickServ (GHOST command used by beach`!~user@2a01:cb19:150:3400:a173:2cef:ba0f:9b68)))
[09:48:31] *** beach` is now known as beach
[09:50:17] *** Joins: karlosz (~karlosz@47.151.136.69)
[09:57:49] *** Quits: dre (~dre@2001:8003:c932:c301:4049:6b4e:9cfa:ed15) (Ping timeout: 240 seconds)
[09:58:53] *** Joins: rotateq (~user@p200300e787097300818cd04b4ea1a4f3.dip0.t-ipconnect.de)
[10:03:49] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 240 seconds)
[10:04:58] *** Joins: Oladon (~olad@98.43.81.226)
[10:05:19] *** Quits: karlosz (~karlosz@47.151.136.69) (Quit: karlosz)
[10:16:36] *** Joins: spiaggia (~user@2a01:cb19:150:3400:e98f:f392:7a54:9b4b)
[10:21:25] *** Quits: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[10:23:17] *** Quits: waku (~user@catv87040.tac-net.ne.jp) (Ping timeout: 240 seconds)
[10:25:03] *** Quits: triffid (~triffid@gateway/tor-sasl/triffid) (Ping timeout: 276 seconds)
[10:27:02] *** Joins: triffid (~triffid@gateway/tor-sasl/triffid)
[10:27:02] *** Quits: _whitelogger (~whitelogg@uruz.whitequark.org) (Remote host closed the connection)
[10:28:02] *** Joins: _whitelogger (~whitelogg@uruz.whitequark.org)
[10:29:02] *** Joins: rgherdt (~rgherdt@ip5f5af455.dynamic.kabel-deutschland.de)
[10:34:17] *** Quits: _whitelogger (~whitelogg@uruz.whitequark.org) (Ping timeout: 240 seconds)
[10:36:54] *** Quits: antonv (~antonv@46.53.246.3) (Ping timeout: 256 seconds)
[10:41:00] *** Quits: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f) (Quit: Leaving)
[10:43:03] *** Joins: _whitelogger (~whitelogg@uruz.whitequark.org)
[10:44:12] *** Joins: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[10:46:12] *** Quits: peterhil (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi) (Remote host closed the connection)
[10:52:12] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[10:52:41] *** Joins: waku (~user@catv87040.tac-net.ne.jp)
[10:57:26] *** Quits: waku (~user@catv87040.tac-net.ne.jp) (Ping timeout: 256 seconds)
[11:20:13] *** Quits: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[11:20:29] *** Joins: Algernon69 (~Algernon6@2a01:e0a:511:6ce0:e154:3656:f257:8169)
[11:20:58] *** Joins: Algernon91 (~Algernon6@2a04:cec0:10e8:5fa4:5553:fad9:4f4b:d3d)
[11:22:33] *** Joins: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[11:24:37] *** Quits: Algernon69 (~Algernon6@2a01:e0a:511:6ce0:e154:3656:f257:8169) (Ping timeout: 240 seconds)
[11:26:45] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[11:39:31] *** Quits: igemnace (~ian@user/igemnace) (*.net *.split)
[11:39:31] *** Quits: amb007 (~a_bakic@102.215.76.86.rev.sfr.net) (*.net *.split)
[11:39:31] *** Quits: makomo (~makomo@user/makomo) (*.net *.split)
[11:39:31] *** Quits: psf (~pi@206.55.172.18) (*.net *.split)
[11:39:31] *** Quits: x88x88x (~x88x88x@2001:19f0:5:39a8:5400:3ff:feb6:73cb) (*.net *.split)
[11:39:31] *** Quits: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz) (*.net *.split)
[11:39:31] *** Quits: joast (~rick@cpe-98-146-112-4.natnow.res.rr.com) (*.net *.split)
[11:39:32] *** Quits: z3t0 (~z3t0@146.71.14.98) (*.net *.split)
[11:39:32] *** Quits: _death (~death@adeht.org) (*.net *.split)
[11:39:32] *** Quits: Patternmaster (~georg@li1192-118.members.linode.com) (*.net *.split)
[11:39:32] *** Quits: Mrtn[m] (~mrtn@2001:470:69fc:105::1f44) (*.net *.split)
[11:39:32] *** Quits: frodef (~frode@46.212.93.4) (*.net *.split)
[11:39:32] *** Quits: Mandus (~aasmundo@0.51-175-33.customer.lyse.net) (*.net *.split)
[11:39:32] *** Quits: Spawns (~Spawns_Ca@user/spawns-carpeting/x-6969421) (*.net *.split)
[11:39:32] *** Quits: Posterdati (~posterdat@host-87-19-166-231.retail.telecomitalia.it) (*.net *.split)
[11:39:32] *** Quits: scymtym (~user@ip-94-114-248-79.unity-media.net) (*.net *.split)
[11:39:32] *** Quits: hineios (~hineios@a95-93-142-124.cpe.netcabo.pt) (*.net *.split)
[11:39:32] *** Quits: unyu (~pyon@user/pyon) (*.net *.split)
[11:39:32] *** Quits: sterni (~lukas@user/sterni) (*.net *.split)
[11:39:32] *** Quits: triffid (~triffid@gateway/tor-sasl/triffid) (*.net *.split)
[11:39:32] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (*.net *.split)
[11:39:32] *** Quits: azimut_ (~azimut@gateway/tor-sasl/azimut) (*.net *.split)
[11:39:32] *** Quits: gxt (~gxt@gateway/tor-sasl/gxt) (*.net *.split)
[11:39:33] *** Quits: anticomputer (~anticompu@gateway/tor-sasl/anticomputer) (*.net *.split)
[11:39:33] *** Quits: Gnuxie (~gnuxie@user/gnuxie) (*.net *.split)
[11:39:33] *** Quits: cgenie[m] (~cgeniemat@2001:470:69fc:105::5073) (*.net *.split)
[11:39:33] *** Quits: nworb (~zbrownm]@2001:470:69fc:105::1:33db) (*.net *.split)
[11:39:33] *** Quits: yitzi (~yitzi@2001:470:69fc:105::fafd) (*.net *.split)
[11:39:33] *** Quits: pieguy12- (~pieguy128@bras-base-mtrlpq5031w-grc-48-67-70-102-17.dsl.bell.ca) (*.net *.split)
[11:39:33] *** Quits: gabc (~gabc@user/gabc) (*.net *.split)
[11:39:33] *** Quits: dcx (~dcx@user/dac) (*.net *.split)
[11:39:33] *** Quits: amk (~amk@109.255.169.126) (*.net *.split)
[11:39:33] *** Quits: xantoz (~tewi_inab@c-c0bae255.013-124-73746f25.bbcust.telenor.se) (*.net *.split)
[11:39:34] *** Quits: even4void (even4void@came.here.for-some.fun) (*.net *.split)
[11:39:34] *** Quits: conjunctive (sid433686@id-433686.helmsley.irccloud.com) (*.net *.split)
[11:39:34] *** Quits: zups (~meow@2a01:4f9:c010:6036::1) (*.net *.split)
[11:39:34] *** Quits: lonjil (~quassel@user/lonjil) (*.net *.split)
[11:39:34] *** Quits: linjian (~linj@user/linj) (*.net *.split)
[11:39:34] *** Quits: edmrk[m] (~edmrkmatr@2001:470:69fc:105::1:5a63) (*.net *.split)
[11:39:34] *** Quits: rudi (~rudi@2001:470:69fc:105::dc4b) (*.net *.split)
[11:39:34] *** Quits: Colleen (~fermion@supersolid.equilibrium.tymoon.eu) (*.net *.split)
[11:39:34] *** Quits: iquites (sid77830@id-77830.lymington.irccloud.com) (*.net *.split)
[11:39:34] *** Quits: gko (~user@user/gko) (*.net *.split)
[11:39:34] *** Quits: ullbeking_ (sid5364@id-5364.ilkley.irccloud.com) (*.net *.split)
[11:39:35] *** Quits: drmeister (sid45147@id-45147.ilkley.irccloud.com) (*.net *.split)
[11:39:35] *** Quits: zephyr (~alandiper@ec2-34-230-252-114.compute-1.amazonaws.com) (*.net *.split)
[11:39:35] *** Quits: griffinmb (sid410590@id-410590.helmsley.irccloud.com) (*.net *.split)
[11:39:35] *** Quits: lisp123win (~user@80.227.170.170) (*.net *.split)
[11:39:35] *** Quits: aeth (~aeth@user/aeth) (*.net *.split)
[11:39:35] *** Quits: jgkamat (~jay@user/jay) (*.net *.split)
[11:39:35] *** Quits: paul0 (~paul0@user/paul0) (*.net *.split)
[11:39:35] *** Quits: frgo (~frgo@p548a30d7.dip0.t-ipconnect.de) (*.net *.split)
[11:39:36] *** Quits: alvaro121 (~aa@201.230.126.66) (*.net *.split)
[11:39:36] *** Quits: hisacro (~OBSD@my.displ.nl) (*.net *.split)
[11:39:36] *** Quits: Inline (~Inline@aftr-37-201-240-204.unity-media.net) (*.net *.split)
[11:39:36] *** Quits: contrapunctus (a75f5b1571@jabberfr.org) (*.net *.split)
[11:39:36] *** Quits: okflo (~okflo@lisa.diesenbacher.net) (*.net *.split)
[11:39:36] *** Quits: Noisytoot (~noisytoot@sourcehut/user/noisytoot) (*.net *.split)
[11:39:36] *** Quits: mister_m (~user@c-73-110-154-209.hsd1.il.comcast.net) (*.net *.split)
[11:39:36] *** Quits: srji (~srji@static.43.141.203.116.clients.your-server.de) (*.net *.split)
[11:39:36] *** Quits: bollu (~bollu@159.65.151.13) (*.net *.split)
[11:39:36] *** Quits: Shinmera (~shinmera@shirakumo/shinmera) (*.net *.split)
[11:39:36] *** Quits: utis (~utis@vpn-client281.uio.no) (*.net *.split)
[11:39:36] *** Quits: stack (~stack@ctrl-c.club) (*.net *.split)
[11:39:36] *** Quits: mfiano (~mfiano@li1282-157.members.linode.com) (*.net *.split)
[11:39:36] *** Quits: snits (~quassel@ip98-179-76-75.ph.ph.cox.net) (*.net *.split)
[11:39:37] *** Quits: dstein64 (~dstein64@dannyadam.com) (*.net *.split)
[11:39:37] *** Quits: mzan (~quassel@mail.asterisell.com) (*.net *.split)
[11:39:37] *** Quits: specbot (~specbot@common-lisp.net) (*.net *.split)
[11:39:37] *** Quits: minion (~minion@common-lisp.net) (*.net *.split)
[11:39:37] *** Quits: markasoftware (~quassel@107.161.26.124) (*.net *.split)
[11:39:37] *** Quits: Bi[m] (~bimatrixo@2001:470:69fc:105::109a) (*.net *.split)
[11:39:37] *** Quits: sp (~sp@user/susam) (*.net *.split)
[11:39:38] *** Quits: katco (~katco@2001:470:69fc:105::2b8) (*.net *.split)
[11:39:38] *** Quits: luis` (~luismboma@2001:470:69fc:105::cc7) (*.net *.split)
[11:39:38] *** Quits: loke[m] (~loke@2001:470:69fc:105::237) (*.net *.split)
[11:39:38] *** Quits: dieggsy (~dieggsy@2001:470:69fc:105::91f) (*.net *.split)
[11:39:38] *** Quits: shinohai[m] (~shinohaim@2001:470:69fc:105::1:55ef) (*.net *.split)
[11:39:38] *** Quits: ultera (~ultera@ec2-18-118-193-22.us-east-2.compute.amazonaws.com) (*.net *.split)
[11:39:39] *** Quits: sirufer (68f46fc7c3@user/sirufer) (*.net *.split)
[11:39:39] *** Quits: mht-wtf (~mht@2a03:b0c0:3:e0::1e2:c001) (*.net *.split)
[11:39:39] *** Quits: vegai (vegai@kapsi.fi) (*.net *.split)
[11:39:39] *** Quits: resttime (~rest@2604:a880:400:d0::1b48:d001) (*.net *.split)
[11:39:40] *** Quits: zbrown[m] (~zbrownsys@2001:470:69fc:105::1:4e81) (*.net *.split)
[11:39:40] *** Quits: jgart (16dd2205e4@irc.cheogram.com) (*.net *.split)
[11:39:40] *** Quits: saturn2 (~visitant@user/clone-of-saturn/x-1551297) (*.net *.split)
[11:39:40] *** Quits: spec (~spec@user/spec) (*.net *.split)
[11:39:40] *** Quits: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de) (*.net *.split)
[11:39:40] *** Quits: Kabriel (~Kabriel@user/kabriel) (*.net *.split)
[11:39:40] *** Quits: axvr (757f658d76@2604:bf00:561:2000::e1) (*.net *.split)
[11:39:40] *** Quits: sm2n (ae95cb1267@user/sm2n) (*.net *.split)
[11:39:40] *** Quits: dbotton (sid492350@id-492350.lymington.irccloud.com) (*.net *.split)
[11:39:40] *** Quits: easye (~user@oxi.slack.net) (*.net *.split)
[11:39:40] *** Quits: payphone (dd09ba4109@2604:bf00:561:2000::20b) (*.net *.split)
[11:39:40] *** Quits: susam (~susam@user/susam) (*.net *.split)
[11:39:41] *** Quits: borodust (~irc@user/borodust) (*.net *.split)
[11:39:41] *** Quits: fe[nl]ix (~quassel@2a01:4f8:200:2425::adda) (*.net *.split)
[11:39:41] *** Quits: froggey (froggey@2a01:7e00::f03c:92ff:fe7c:ec68) (*.net *.split)
[11:39:41] *** Quits: zacts (~zacts@user/zacts) (*.net *.split)
[11:39:41] *** Quits: epony (~epony@user/epony) (*.net *.split)
[11:39:41] *** Quits: kakuhen (~kakuhen@user/kakuhen) (*.net *.split)
[11:39:41] *** Quits: Spawns_Carpet[m] (~inceptor-@2001:470:69fc:105::1:298b) (*.net *.split)
[11:39:42] *** Quits: Arcsech (~arcsechma@2001:470:69fc:105::1:797) (*.net *.split)
[11:39:42] *** Quits: luna-is-here (~quassel@2a02:908:f761:2a3c::a) (*.net *.split)
[11:39:42] *** Quits: empwilli (~empwilli@faui48e.informatik.uni-erlangen.de) (*.net *.split)
[11:39:42] *** Quits: MetaYan (~MetaYan@c-7b5d235c.07-84-7462671.bbcust.telenor.se) (*.net *.split)
[11:39:42] *** Quits: fitzsim (~user@69-165-165-189.dsl.teksavvy.com) (*.net *.split)
[11:39:42] *** Quits: antoszka-r (~antoni@rozalia.antoszka.pl) (*.net *.split)
[11:39:42] *** Quits: dale (dale@user/dale) (*.net *.split)
[11:39:42] *** Quits: GreaseMonkey (greaser@user/greasemonkey) (*.net *.split)
[11:39:42] *** Quits: mmk2410 (~mmk2410@user/mmk2410) (*.net *.split)
[11:39:42] *** Quits: copec (~copec@schrodbox.unaen.org) (*.net *.split)
[11:39:42] *** Quits: lieven (~mal@ns2.wyrd.be) (*.net *.split)
[11:39:42] *** Quits: drakonis (drakonis@user/drakonis) (*.net *.split)
[11:39:42] *** Quits: hirez- (~hirez@2602:ffc5:20::1:512e) (*.net *.split)
[11:39:42] *** Quits: bldr (~bull@185.117.72.168) (*.net *.split)
[11:39:42] *** Quits: nckx (~nckx@tobias.gr) (*.net *.split)
[11:39:43] *** Quits: rdrg109 (~rdrg109@user/rdrg109) (*.net *.split)
[11:39:43] *** Quits: sepanko (~sepanko@user/sepanko) (*.net *.split)
[11:39:43] *** Quits: opalvaults[m] (~opalvault@2001:470:69fc:105::1:51f6) (*.net *.split)
[11:39:43] *** Quits: Duuqnd (~duuqnd@2001:470:69fc:105::e9c0) (*.net *.split)
[11:39:43] *** Quits: icepic1984[m] (~icepic198@2001:470:69fc:105::cd23) (*.net *.split)
[11:39:43] *** Quits: jaimelm (~jaimelm@deneb.emergentcommunitysystems.com) (*.net *.split)
[11:39:43] *** Quits: anddam (~anddam@user/anddam) (*.net *.split)
[11:39:43] *** Quits: theBlackDragon (~dragon@fvwm/admin) (*.net *.split)
[11:39:43] *** Quits: selwyn (~selwyn@user/selwyn) (*.net *.split)
[11:39:43] *** Quits: samebchase (~samebchas@51.15.68.182) (*.net *.split)
[11:39:43] *** Quits: jackdaniel (~jack@user/jackdaniel) (*.net *.split)
[11:39:44] *** Quits: les (znc@user/les) (*.net *.split)
[11:39:44] *** Quits: iisi (sid19824@id-19824.hampstead.irccloud.com) (*.net *.split)
[11:39:44] *** Quits: fiddlerwoaroof (~fiddlerwo@user/fiddlerwoaroof) (*.net *.split)
[11:39:44] *** Quits: Fade (fade@outrider.deepsky.com) (*.net *.split)
[11:39:44] *** Quits: krjst (~krjst@2604:a880:800:c1::16b:8001) (*.net *.split)
[11:39:44] *** Quits: madnificent (~madnifice@static.210.74.63.178.clients.your-server.de) (*.net *.split)
[11:39:44] *** Quits: thonkpod (~thonkpod@user/thonkpod) (*.net *.split)
[11:39:44] *** Quits: Algernon91 (~Algernon6@2a04:cec0:10e8:5fa4:5553:fad9:4f4b:d3d) (*.net *.split)
[11:39:44] *** Quits: akater[m] (~akatermat@2001:470:69fc:105::ccef) (*.net *.split)
[11:39:44] *** Quits: CodeBitCookie[m] (~code-bit-@2001:470:69fc:105::a2f) (*.net *.split)
[11:39:44] *** Quits: saltrocklamp[m] (~hexology@user/hexology) (*.net *.split)
[11:39:44] *** Quits: MatrixTravelerbo (~voyagert2@2001:470:69fc:105::22) (*.net *.split)
[11:39:44] *** Quits: opc0de (~nathan@user/opcode) (*.net *.split)
[11:39:44] *** Quits: sukaeto (~sukaeto@sharona.moonpearltech.com) (*.net *.split)
[11:39:44] *** Quits: alanz (sid110616@uxbridge.irccloud.com) (*.net *.split)
[11:39:44] *** Quits: sgithens (sid10659@id-10659.helmsley.irccloud.com) (*.net *.split)
[11:39:45] *** Quits: pok (~pok@user/pok) (*.net *.split)
[11:39:45] *** Quits: gendl (sid100083@id-100083.hampstead.irccloud.com) (*.net *.split)
[11:39:45] *** Quits: Schnouki (e7aa4cfb39@user/schnouki) (*.net *.split)
[11:39:45] *** Quits: IUSR (sid348938@id-348938.hampstead.irccloud.com) (*.net *.split)
[11:39:45] *** Quits: phoe (~phoe@user/phoe) (*.net *.split)
[11:39:45] *** Quits: skn (~znc@2001:19f0:5:701:5400:ff:fe7c:4e5c) (*.net *.split)
[11:39:45] *** Quits: jfb4 (~jfb4@178.62.2.68) (*.net *.split)
[11:39:45] *** Quits: jeosol (~jeosol@user/jeosol) (*.net *.split)
[11:39:45] *** Quits: ChanServ (ChanServ@services.libera.chat) (*.net *.split)
[11:42:13] *** Quits: spiaggia (~user@2a01:cb19:150:3400:e98f:f392:7a54:9b4b) (Quit: ERC (IRC client for Emacs 26.3))
[11:51:57] *** Joins: myrrh (~markus@user/poet)
[11:51:57] *** Joins: shka (~herr@109.231.0.226)
[11:51:57] *** Joins: s-liao (~s-liao@101.86.96.21)
[11:51:57] *** Joins: okflo (~okflo@lisa.diesenbacher.net)
[11:51:57] *** Joins: anticomputer (~anticompu@gateway/tor-sasl/anticomputer)
[11:51:57] *** Joins: Algernon91 (~Algernon6@2a04:cec0:10e8:5fa4:5553:fad9:4f4b:d3d)
[11:51:57] *** Joins: triffid (~triffid@gateway/tor-sasl/triffid)
[11:51:57] *** Joins: igemnace (~ian@user/igemnace)
[11:51:57] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[11:51:57] *** Joins: azimut_ (~azimut@gateway/tor-sasl/azimut)
[11:51:57] *** Joins: amb007 (~a_bakic@102.215.76.86.rev.sfr.net)
[11:51:57] *** Joins: mht-wtf (~mht@2a03:b0c0:3:e0::1e2:c001)
[11:51:57] *** Joins: gxt (~gxt@gateway/tor-sasl/gxt)
[11:51:57] *** Joins: psf (~pi@206.55.172.18)
[11:51:57] *** Joins: x88x88x (~x88x88x@2001:19f0:5:39a8:5400:3ff:feb6:73cb)
[11:51:57] *** Joins: lisp123win (~user@80.227.170.170)
[11:51:57] *** Joins: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz)
[11:51:57] *** Joins: joast (~rick@cpe-98-146-112-4.natnow.res.rr.com)
[11:51:57] *** Joins: z3t0 (~z3t0@146.71.14.98)
[11:51:57] *** Joins: aeth (~aeth@user/aeth)
[11:51:57] *** Joins: _death (~death@adeht.org)
[11:51:57] *** Joins: Patternmaster (~georg@li1192-118.members.linode.com)
[11:51:57] *** Joins: Gnuxie (~gnuxie@user/gnuxie)
[11:51:57] *** Joins: linjian (~linj@user/linj)
[11:51:57] *** Joins: Mrtn[m] (~mrtn@2001:470:69fc:105::1f44)
[11:51:57] *** Joins: Bi[m] (~bimatrixo@2001:470:69fc:105::109a)
[11:51:57] *** Joins: sp (~sp@user/susam)
[11:51:57] *** Joins: jgkamat (~jay@user/jay)
[11:51:57] *** Joins: epony (~epony@user/epony)
[11:51:57] *** Joins: contrapunctus (a75f5b1571@jabberfr.org)
[11:51:57] *** Joins: paul0 (~paul0@user/paul0)
[11:51:57] *** Joins: frgo (~frgo@p548a30d7.dip0.t-ipconnect.de)
[11:51:57] *** Joins: jeosol (~jeosol@user/jeosol)
[11:51:57] *** Joins: vegai (vegai@kapsi.fi)
[11:51:57] *** Joins: alvaro121 (~aa@201.230.126.66)
[11:51:57] *** Joins: frodef (~frode@46.212.93.4)
[11:51:57] *** Joins: hisacro (~OBSD@my.displ.nl)
[11:51:57] *** Joins: Inline (~Inline@aftr-37-201-240-204.unity-media.net)
[11:51:57] *** Joins: bollu (~bollu@159.65.151.13)
[11:51:57] *** Joins: katco (~katco@2001:470:69fc:105::2b8)
[11:51:57] *** Joins: kakuhen (~kakuhen@user/kakuhen)
[11:51:57] *** Joins: luis` (~luismboma@2001:470:69fc:105::cc7)
[11:51:57] *** Joins: akater[m] (~akatermat@2001:470:69fc:105::ccef)
[11:51:57] *** Joins: edmrk[m] (~edmrkmatr@2001:470:69fc:105::1:5a63)
[11:51:57] *** Joins: CodeBitCookie[m] (~code-bit-@2001:470:69fc:105::a2f)
[11:51:57] *** Joins: sepanko (~sepanko@user/sepanko)
[11:51:57] *** Joins: Spawns_Carpet[m] (~inceptor-@2001:470:69fc:105::1:298b)
[11:51:57] *** Joins: loke[m] (~loke@2001:470:69fc:105::237)
[11:51:57] *** Joins: saltrocklamp[m] (~hexology@user/hexology)
[11:51:57] *** Joins: opalvaults[m] (~opalvault@2001:470:69fc:105::1:51f6)
[11:51:57] *** Joins: cgenie[m] (~cgeniemat@2001:470:69fc:105::5073)
[11:51:57] *** Joins: MatrixTravelerbo (~voyagert2@2001:470:69fc:105::22)
[11:51:57] *** Joins: rudi (~rudi@2001:470:69fc:105::dc4b)
[11:51:57] *** Joins: nworb (~zbrownm]@2001:470:69fc:105::1:33db)
[11:51:57] *** Joins: dieggsy (~dieggsy@2001:470:69fc:105::91f)
[11:51:57] *** Joins: Duuqnd (~duuqnd@2001:470:69fc:105::e9c0)
[11:51:57] *** Joins: zbrown[m] (~zbrownsys@2001:470:69fc:105::1:4e81)
[11:51:57] *** Joins: shinohai[m] (~shinohaim@2001:470:69fc:105::1:55ef)
[11:51:57] *** Joins: icepic1984[m] (~icepic198@2001:470:69fc:105::cd23)
[11:51:57] *** Joins: Arcsech (~arcsechma@2001:470:69fc:105::1:797)
[11:51:57] *** Joins: yitzi (~yitzi@2001:470:69fc:105::fafd)
[11:51:57] *** Joins: Noisytoot (~noisytoot@sourcehut/user/noisytoot)
[11:51:57] *** Joins: markasoftware (~quassel@107.161.26.124)
[11:51:57] *** Joins: minion (~minion@common-lisp.net)
[11:51:57] *** Joins: specbot (~specbot@common-lisp.net)
[11:51:57] *** Joins: mzan (~quassel@mail.asterisell.com)
[11:51:57] *** Joins: dstein64 (~dstein64@dannyadam.com)
[11:51:57] *** Joins: snits (~quassel@ip98-179-76-75.ph.ph.cox.net)
[11:51:57] *** Joins: mfiano (~mfiano@li1282-157.members.linode.com)
[11:51:57] *** Joins: stack (~stack@ctrl-c.club)
[11:51:57] *** Joins: utis (~utis@vpn-client281.uio.no)
[11:51:57] *** Joins: Shinmera (~shinmera@shirakumo/shinmera)
[11:51:57] *** Joins: srji (~srji@static.43.141.203.116.clients.your-server.de)
[11:51:57] *** Joins: mister_m (~user@c-73-110-154-209.hsd1.il.comcast.net)
[11:51:57] *** Joins: lonjil (~quassel@user/lonjil)
[11:51:57] *** Joins: zups (~meow@2a01:4f9:c010:6036::1)
[11:51:57] *** Joins: conjunctive (sid433686@id-433686.helmsley.irccloud.com)
[11:51:57] *** Joins: even4void (even4void@came.here.for-some.fun)
[11:51:57] *** Joins: xantoz (~tewi_inab@c-c0bae255.013-124-73746f25.bbcust.telenor.se)
[11:51:57] *** Joins: amk (~amk@109.255.169.126)
[11:51:57] *** Joins: dcx (~dcx@user/dac)
[11:51:57] *** Joins: pieguy12- (~pieguy128@bras-base-mtrlpq5031w-grc-48-67-70-102-17.dsl.bell.ca)
[11:51:57] *** Joins: gabc (~gabc@user/gabc)
[11:51:57] *** Joins: griffinmb (sid410590@id-410590.helmsley.irccloud.com)
[11:51:57] *** Joins: zephyr (~alandiper@ec2-34-230-252-114.compute-1.amazonaws.com)
[11:51:57] *** Joins: drmeister (sid45147@id-45147.ilkley.irccloud.com)
[11:51:57] *** Joins: ullbeking_ (sid5364@id-5364.ilkley.irccloud.com)
[11:51:57] *** Joins: gko (~user@user/gko)
[11:51:57] *** Joins: iquites (sid77830@id-77830.lymington.irccloud.com)
[11:51:57] *** Joins: Colleen (~fermion@supersolid.equilibrium.tymoon.eu)
[11:51:57] *** Joins: resttime (~rest@2604:a880:400:d0::1b48:d001)
[11:51:57] *** Joins: sirufer (68f46fc7c3@user/sirufer)
[11:51:57] *** Joins: ultera (~ultera@ec2-18-118-193-22.us-east-2.compute.amazonaws.com)
[11:51:57] *** Joins: froggey (froggey@2a01:7e00::f03c:92ff:fe7c:ec68)
[11:51:57] *** Joins: fe[nl]ix (~quassel@2a01:4f8:200:2425::adda)
[11:51:57] *** Joins: borodust (~irc@user/borodust)
[11:51:57] *** Joins: susam (~susam@user/susam)
[11:51:57] *** Joins: zacts (~zacts@user/zacts)
[11:51:57] *** Joins: payphone (dd09ba4109@2604:bf00:561:2000::20b)
[11:51:57] *** Joins: dbotton (sid492350@id-492350.lymington.irccloud.com)
[11:51:57] *** Joins: sm2n (ae95cb1267@user/sm2n)
[11:51:57] *** Joins: axvr (757f658d76@2604:bf00:561:2000::e1)
[11:51:57] *** Joins: Kabriel (~Kabriel@user/kabriel)
[11:51:57] *** Joins: easye (~user@oxi.slack.net)
[11:51:57] *** Joins: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de)
[11:51:57] *** Joins: spec (~spec@user/spec)
[11:51:57] *** Joins: saturn2 (~visitant@user/clone-of-saturn/x-1551297)
[11:51:57] *** Joins: jgart (16dd2205e4@irc.cheogram.com)
[11:51:57] *** Joins: thonkpod (~thonkpod@user/thonkpod)
[11:51:57] *** Joins: madnificent (~madnifice@static.210.74.63.178.clients.your-server.de)
[11:51:57] *** Joins: krjst (~krjst@2604:a880:800:c1::16b:8001)
[11:51:57] *** Joins: Fade (fade@outrider.deepsky.com)
[11:51:57] *** Joins: fiddlerwoaroof (~fiddlerwo@user/fiddlerwoaroof)
[11:51:57] *** Joins: iisi (sid19824@id-19824.hampstead.irccloud.com)
[11:51:57] *** Joins: les (znc@user/les)
[11:51:57] *** Joins: jackdaniel (~jack@user/jackdaniel)
[11:51:57] *** Joins: samebchase (~samebchas@51.15.68.182)
[11:51:57] *** Joins: selwyn (~selwyn@user/selwyn)
[11:51:57] *** Joins: theBlackDragon (~dragon@fvwm/admin)
[11:51:57] *** Joins: anddam (~anddam@user/anddam)
[11:51:57] *** Joins: jaimelm (~jaimelm@deneb.emergentcommunitysystems.com)
[11:51:57] *** Joins: hirez- (~hirez@2602:ffc5:20::1:512e)
[11:51:57] *** Joins: lieven (~mal@ns2.wyrd.be)
[11:51:57] *** Joins: copec (~copec@schrodbox.unaen.org)
[11:51:57] *** Joins: drakonis (drakonis@user/drakonis)
[11:51:57] *** Joins: mmk2410 (~mmk2410@user/mmk2410)
[11:51:57] *** Joins: GreaseMonkey (greaser@user/greasemonkey)
[11:51:57] *** Joins: dale (dale@user/dale)
[11:51:57] *** Joins: antoszka-r (~antoni@rozalia.antoszka.pl)
[11:51:57] *** Joins: fitzsim (~user@69-165-165-189.dsl.teksavvy.com)
[11:51:57] *** Joins: MetaYan (~MetaYan@c-7b5d235c.07-84-7462671.bbcust.telenor.se)
[11:51:57] *** Joins: empwilli (~empwilli@faui48e.informatik.uni-erlangen.de)
[11:51:57] *** Joins: luna-is-here (~quassel@2a02:908:f761:2a3c::a)
[11:51:57] *** Joins: rdrg109 (~rdrg109@user/rdrg109)
[11:51:57] *** Joins: nckx (~nckx@tobias.gr)
[11:51:57] *** Joins: bldr (~bull@185.117.72.168)
[11:51:57] *** Joins: jfb4 (~jfb4@178.62.2.68)
[11:51:57] *** Joins: skn (~znc@2001:19f0:5:701:5400:ff:fe7c:4e5c)
[11:51:57] *** molybdenum.libera.chat sets mode: +oo fe[nl]ix jackdaniel
[11:51:57] *** Joins: phoe (~phoe@user/phoe)
[11:51:57] *** Joins: IUSR (sid348938@id-348938.hampstead.irccloud.com)
[11:51:57] *** Joins: pok (~pok@user/pok)
[11:51:57] *** Joins: Schnouki (e7aa4cfb39@user/schnouki)
[11:51:57] *** Joins: sgithens (sid10659@id-10659.helmsley.irccloud.com)
[11:51:57] *** Joins: gendl (sid100083@id-100083.hampstead.irccloud.com)
[11:51:57] *** Joins: alanz (sid110616@uxbridge.irccloud.com)
[11:51:57] *** Joins: sukaeto (~sukaeto@sharona.moonpearltech.com)
[11:51:57] *** Joins: opc0de (~nathan@user/opcode)
[11:51:57] *** Joins: sterni (~lukas@user/sterni)
[11:51:57] *** Joins: unyu (~pyon@user/pyon)
[11:51:57] *** Joins: hineios (~hineios@a95-93-142-124.cpe.netcabo.pt)
[11:51:57] *** Joins: scymtym (~user@ip-94-114-248-79.unity-media.net)
[11:51:57] *** Joins: Posterdati (~posterdat@host-87-19-166-231.retail.telecomitalia.it)
[11:51:57] *** Joins: Spawns (~Spawns_Ca@user/spawns-carpeting/x-6969421)
[11:51:57] *** Joins: Mandus (~aasmundo@0.51-175-33.customer.lyse.net)
[11:51:57] *** Joins: ChanServ (ChanServ@services.libera.chat)
[11:51:57] *** molybdenum.libera.chat sets mode: +o ChanServ
[11:52:06] *** Quits: epony (~epony@user/epony) (Max SendQ exceeded)
[11:52:10] *** Joins: epony (~epony@user/epony)
[11:55:05] *** Quits: myrrh (~markus@user/poet) (Ping timeout: 256 seconds)
[11:56:24] *** Joins: myrrh (~markus@172.58.196.113)
[12:05:21] *** Joins: MajorBiscuit (~MajorBisc@c-001-032-022.client.tudelft.eduvpn.nl)
[12:11:07] *** Joins: gaqwas (~john@dynamic-077-002-039-110.77.2.pool.telefonica.de)
[12:21:39] *** Joins: anticomputer_ (~anticompu@gateway/tor-sasl/anticomputer)
[12:22:42] *** Quits: anticomputer (~anticompu@gateway/tor-sasl/anticomputer) (Ping timeout: 276 seconds)
[12:37:05] <beach> mop direct-slot-definition-class
[12:37:05] <specbot> http://metamodular.com/CLOS-MOP/direct-slot-definition-class.html
[12:37:46] <beach> What would be a good collective name for functions like that one ^, which return a class based on the class of some other object?
[12:37:50] *** Quits: azimut_ (~azimut@gateway/tor-sasl/azimut) (Remote host closed the connection)
[12:38:09] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[12:38:30] <beach> I need a term so that I can name a file in which to put some such definitions.
[12:40:38] <pjb> beach: what kind of definitions?
[12:41:12] <moon-child> 'class mappings', perhaps?  Though that is not entirely unambiguous
[12:41:29] <beach> pjb: What I said a few minutes ago.
[12:41:36] <pjb> yes. Meta-slots?
[12:41:49] *** Joins: pve (~pve@176-93-118-10.bb.dnainternet.fi)
[12:41:52] <beach> Slots?  That doesn't sound right.
[12:42:23] <pjb> well, this is what you want to put in there, classes-of-slots.
[12:42:35] <moon-child> I think 'slots' is fine, but 'meta' is not.  I would assume a metaslot accessor accessed some slot of an object's metaclass
[12:42:39] <phoe> metaclass accessors
[12:43:14] <beach> It's a fairly common situation.  In Gsharp for instance, the kind of cluster that is allowed depends on the type of the staff.
[12:43:47] <rotateq> hm "meta" reversed is "Atem" and such also a German word which translates to "breath" :)
[12:43:48] <beach> In this case, it is for Trucler.  The kind of variable/function/etc-description depends on the CLIENT argument.
[12:44:07] <pjb> Oh, but slot-definition-class is not the class of an individual slot, right?  It's a class that will help define a set of slots for those instances?
[12:44:42] <pjb> beach: isn't slot-definition-class like a factory class?
[12:44:53] <pjb> so you could name the file factories.lisp
[12:45:12] <phoe> what's the difference between a factory and a metaclass though
[12:45:23] <phoe> standard-class is a factory of classes too if we think about it
[12:45:37] <pjb> Any object that can create new objects is a factory.
[12:45:43] <beach> In the case of the mop, it's the class of a class that determines the class of a slot-definition object.
[12:45:51] <beach> But that's just for the MOP.
[12:46:01] <rotateq> so with changing the slot-definition-class it's possible to change slot options and such?
[12:46:06] <beach> pjb: Yes, I guess it is like a factor.
[12:46:20] <beach> That's a good word for it.
[12:46:21] <pjb> beach: but as a class, the slot-definition-class can determine the class of all the slot-definition objects of an instance.
[12:46:38] <beach> Yes.
[12:46:51] <pjb> I assume there's a method on the slot-definition-class that takes a slot-definition argument to produce the class of the slot.
[12:47:08] <pjb> Perhaps slot-factories.
[12:47:40] <beach> Again, in general it is not about slots.  Not in Trucler, and not in Gsharp.
[12:48:06] <rotateq> saw some example last week how to adjust behavior if a slot is touched, but didn't really get it yet
[12:48:10] <phoe> dependent metaclasses? something like that
[12:48:39] <beach> Ah, so it's a "factory function", i.e. a function that produces a factory.
[12:48:53] <phoe> a factory factory? so, a metafactory?
[12:49:06] <beach> Well, either the factory is a class or it's a function.
[12:49:09] <beach> Which one is it?
[12:49:33] <rotateq> phoe: when I tell people about what SETF is, then also mostly a factory for setters ^^
[12:50:05] <loke[m]> phoe: it's not metaclasses anymore. It's facebookclasses
[12:50:28] <phoe> beach: in the Lisp world I'd rather call a function a factory - MAKE-INSTANCE is what actually produces new stuff whereas classes are blueprints
[12:50:39] <rotateq> noooo loke[m] not that :D
[12:50:48] <phoe> in the Java world factories are classes but that's only because Java is so dumb that everything is forced to be a class
[12:51:13] <beach> OK, so it's "blueprint factories".
[12:51:52] *** Quits: Jing (~hedgehog@240e:390:7c53:a7e1:15fa:c22e:b1fb:575a) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[12:51:53] <phoe> rotateq: might be my code, I was working on this recently
[12:52:06] <flip214> well, I've seen the word "blueprint" been used in javascript a lot... https://www.w3schools.com/js/js_object_constructors.asp
[12:52:16] <flip214> I don't think that applies to CLOS
[12:52:16] <beach> I'll just call the file factories.lisp.  Thanks to everyone.
[12:52:23] <pjb> good.
[12:52:28] <rotateq> phoe: and they call Java good for beginners
[12:52:56] <rotateq> flip214: and i've seen blueprint in factorio :D
[12:54:09] *** Quits: gxt (~gxt@gateway/tor-sasl/gxt) (Remote host closed the connection)
[12:54:41] *** Joins: gxt (~gxt@gateway/tor-sasl/gxt)
[13:11:22] *** Joins: rain3 (~rain3___@2a02:2f09:d405:a600:7f3e:4e48:ca3c:8857)
[13:19:57] *** Quits: OlCe`` (~user@lfbn-nic-1-449-101.w90-116.abo.wanadoo.fr) (Ping timeout: 240 seconds)
[13:21:20] <rotateq> and no phoe, was on another website when i searched for stuff about metaclasses
[13:21:27] <phoe> :D
[13:21:28] <phoe> nice
[13:21:47] <rotateq> hm not really, no explanation :D
[13:23:29] *** Quits: gaqwas (~john@dynamic-077-002-039-110.77.2.pool.telefonica.de) (Ping timeout: 256 seconds)
[13:23:33] <rotateq> it used C2MOP:SLOT-VALUE-USING-CLASS
[13:23:49] <phoe> standard stuff then
[13:24:17] <rotateq> for you ;) not for me yet so far
[13:25:52] *** Joins: treflip (~user@user/treflip)
[13:27:04] <rotateq> like when i would ask you what this program does ^^ https://trash.randomerror.de/r9s3j/apl_program.png but ok, not yet familiar with the ⍣ myself
[13:27:19] *** Joins: waku (~user@catv87040.tac-net.ne.jp)
[13:28:41] *** Joins: random-nick (~random-ni@87.116.181.150)
[13:32:08] *** Joins: Jing (~hedgehog@240e:390:7c53:a7e1:ede2:45ee:21e7:7941)
[13:34:24] *** Quits: waku (~user@catv87040.tac-net.ne.jp) (Ping timeout: 256 seconds)
[13:38:00] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Client closed)
[13:39:00] *** Joins: s-liao (~s-liao@101.86.96.21)
[13:48:32] *** Joins: OlCe``` (~user@lfbn-nic-1-109-134.w2-15.abo.wanadoo.fr)
[14:03:43] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[14:05:46] *** Joins: s-liao (~s-liao@101.86.96.21)
[14:06:42] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 256 seconds)
[14:07:22] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[14:07:28] *** Joins: rogersm (~rogersm@90.166.180.250)
[14:18:52] *** Joins: waku (~user@catv87040.tac-net.ne.jp)
[14:22:57] *** Quits: waku (~user@catv87040.tac-net.ne.jp) (Ping timeout: 240 seconds)
[14:32:23] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[14:32:24] *** Quits: rain3 (~rain3___@2a02:2f09:d405:a600:7f3e:4e48:ca3c:8857) (Remote host closed the connection)
[14:33:12] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[14:36:37] *** Quits: amb007 (~a_bakic@102.215.76.86.rev.sfr.net) (Ping timeout: 240 seconds)
[14:36:57] *** Joins: amb007 (~a_bakic@162.132.22.93.rev.sfr.net)
[14:40:00] *** Joins: VincentVega (~user@212.97.1.105)
[14:40:01] *** Quits: amb007 (~a_bakic@162.132.22.93.rev.sfr.net) (Read error: Connection reset by peer)
[14:41:12] *** Joins: amb007 (~a_bakic@102.215.76.86.rev.sfr.net)
[14:43:41] *** Quits: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Read error: Connection reset by peer)
[14:48:00] *** Joins: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[14:50:12] *** Joins: nature (~nature@45.32.235.173)
[14:54:17] *** Quits: iamFIREcracker (~iamFIREcr@user/iamfirecracker) (Ping timeout: 240 seconds)
[15:09:25] *** Quits: MajorBiscuit (~MajorBisc@c-001-032-022.client.tudelft.eduvpn.nl) (Ping timeout: 240 seconds)
[15:10:10] *** Quits: bendersteed (~user@ppp141237131021.access.hol.gr) (Ping timeout: 256 seconds)
[15:11:49] *** Quits: frodef (~frode@46.212.93.4) (Ping timeout: 240 seconds)
[15:13:25] *** Joins: frodef (~frode@46.212.93.4)
[15:20:09] *** Quits: pillton (~user@14-203-212-8.tpgi.com.au) (Quit: ERC (IRC client for Emacs 27.2))
[15:20:21] *** Joins: waku (~user@catv87040.tac-net.ne.jp)
[15:25:01] *** Quits: waku (~user@catv87040.tac-net.ne.jp) (Ping timeout: 240 seconds)
[15:30:17] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 240 seconds)
[15:38:58] *** Quits: igemnace (~ian@user/igemnace) (Remote host closed the connection)
[15:43:11] *** Joins: igemnace (~ian@user/igemnace)
[15:43:36] *** Joins: kevingal (~quassel@37.228.202.92)
[15:45:30] *** Quits: igemnace (~ian@user/igemnace) (Remote host closed the connection)
[15:46:29] *** Joins: bendersteed (~user@ppp141237131021.access.hol.gr)
[15:50:41] *** Joins: Alfr (~Alfr@user/alfr)
[15:52:28] *** Joins: igemnace (~ian@user/igemnace)
[16:04:28] *** Joins: mgl (~mgl@cpc87455-finc19-2-0-cust234.4-2.cable.virginm.net)
[16:04:34] *** Quits: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[16:06:27] *** Joins: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[16:09:56] *** Joins: s-liao (~s-liao@101.86.96.21)
[16:13:38] *** Quits: kevingal (~quassel@37.228.202.92) (Ping timeout: 256 seconds)
[16:17:07] *** Quits: igemnace (~ian@user/igemnace) (Read error: Connection reset by peer)
[16:20:26] *** Quits: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[16:22:33] *** Joins: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[16:22:43] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[16:29:41] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Ping timeout (120 seconds))
[16:30:11] *** Joins: s-liao (~s-liao@101.86.96.21)
[16:31:13] *** Joins: euandreh (~euandreh@2804:14c:33:9fe5:cb46:c04b:665a:c687)
[16:39:20] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[16:40:22] *** Joins: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f)
[16:48:45] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[16:49:15] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[16:53:10] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[16:55:25] *** Quits: amb007 (~a_bakic@102.215.76.86.rev.sfr.net) (Ping timeout: 256 seconds)
[16:58:14] *** Joins: amb007 (~a_bakic@102.215.76.86.rev.sfr.net)
[17:05:52] *** Joins: MajorBiscuit (~MajorBisc@c-001-032-008.client.tudelft.eduvpn.nl)
[17:08:02] *** Quits: amb007 (~a_bakic@102.215.76.86.rev.sfr.net) (Ping timeout: 256 seconds)
[17:08:16] *** Joins: waku (~user@catv87040.tac-net.ne.jp)
[17:08:21] *** Joins: amb007 (~a_bakic@102.215.76.86.rev.sfr.net)
[17:09:17] <ns12> In Hunchentoot, are session data stored on one server only?
[17:11:06] <ns12> For example, I have server A and server B serving a web app. If server A creates a session using Hunchentoot, will server B have access to the session data?
[17:12:20] <moon-child> ns12: I believe 'JWT' is a solution to this
[17:13:33] *** Quits: waku (~user@catv87040.tac-net.ne.jp) (Ping timeout: 256 seconds)
[17:16:43] <ns12> moon-child: So, the session data is saved on the client instead of being saved on the server? Isn't there a limit to the amount of data that can be saved on the client?
[17:17:17] <ns12> Is this solution widely-used?
[17:17:49] <moon-child> 'limit' sure.  How much data do you want to store?
[17:18:26] <moon-child> I am not sure how you expect two servers to be able to share data with each other without any manual configuration
[17:18:43] <ns12> I mean, cookies are limited to around 4000 bytes each.
[17:19:05] <moon-child> what do you want to store?
[17:19:10] <moon-child> are you looking for a database?
[17:20:03] *** Quits: myrrh (~markus@172.58.196.113) (Remote host closed the connection)
[17:20:47] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[17:20:55] <ns12> Okay, I am probably expecting too much from Hunchentoot. I probably need to customize Hunchentoot's sessions to store the session data in a database (https://edicl.github.io/hunchentoot/#session-behaviour).
[17:21:01] <flip214> A database or at least a common filesystem (like NFS) is needed
[17:21:39] *** Joins: dfluk (~Lucas@201-5-251-134.user3g.veloxzone.com.br)
[17:22:06] <moon-child> flip214: distributed consensus is a thing.  Probably not the right thing in this instance, but it is nevertheless a thing
[17:22:23] <ns12> Found a short guide: https://www.darkchestnut.com/2018/hunchentoot_custom_sessions/
[17:23:10] *** Joins: lottaquestions (~nick@2607:fa49:5041:a200:30c6:2766:a3ba:f574)
[17:23:13] <ns12> I am spoiled by web frameworks such as Django that have database-backed sessions by default. Thanks for the help.
[17:23:50] *** Joins: IPmonger (~IPmonger@c-69-242-83-226.hsd1.pa.comcast.net)
[17:24:03] <moon-child> I think fukamachi has some integrated web orm stuff
[17:24:05] *** Quits: IPmonger (~IPmonger@c-69-242-83-226.hsd1.pa.comcast.net) (Remote host closed the connection)
[17:25:24] <flip214> moon-child: much too complex. Or do you want to do a paxos for each user login?? NFS or a database is as simple as it gets.
[17:26:09] <moon-child> as I said: probably not the right thing in this instance
[17:28:30] *** Joins: Bike (~Glossina@71.69.170.70)
[17:28:30] *** ChanServ sets mode: +o Bike
[17:29:43] *** Quits: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Remote host closed the connection)
[17:31:29] *** Joins: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[17:41:52] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[17:42:02] *** Quits: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[17:42:14] *** Quits: aphextwin (~aphextwin@05408d85.skybroadband.com) ()
[17:44:39] *** Joins: notzmv (~zmv@user/notzmv)
[17:47:46] <ns12> In the REPL, I can use up to three asterisks (*, **, and ***) to get the previous return values. Is there a way to get return values older than *** in the SBCL REPL? **** (four asterisks) is not valid ...
[17:48:06] <pjb> ns12: yes, there is a way.
[17:48:28] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Remote host closed the connection)
[17:48:46] <pjb> ns12: https://github.com/informatimago/lisp/blob/master/common-lisp/interactive/interactive.lisp#L273
[17:48:53] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[17:49:29] <pjb> With this REPL, you can use !-254  for the 254th previous expression.
[17:49:57] <ns12> The only solution is to use a custom REPL implementation?
[17:50:46] <pjb> If the implementation doesn't provide hooks to implement it otherwise, yes.
[17:52:53] *** Quits: xsperry (~xs@user/xsperry) (Remote host closed the connection)
[17:53:34] *** Joins: xsperry (~xs@user/xsperry)
[17:53:49] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[17:56:16] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[18:00:37] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[18:02:36] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[18:03:27] <Bike> ns12: yeah, nothing standard.
[18:14:33] <mfiano> ns12: SLY has back-references, the feature that allows for referring to any previous value.
[18:16:21] <mfiano> In the REPL, a reader macro #v is available. #v0,1 means to retrieve the second return value of the first result in the REPL history.
[18:17:12] *** Joins: jealousmonk (~user@2804:431:e7c5:b880:889f:205:ed34:5b22)
[18:17:18] <mfiano> This also means that they are persistent, unlike the *'s.
[18:17:35] <mfiano> Up until you clear the REPL history that is, at which point the counters start from 0 again.
[18:19:17] *** Quits: nature (~nature@45.32.235.173) (Ping timeout: 240 seconds)
[18:19:48] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[18:22:04] *** Joins: epolanski (uid312403@id-312403.helmsley.irccloud.com)
[18:24:37] <flip214> I just store values that I might be interested via (defparameter ...); and as all forms are written down in a file somewhere (for documentation purposes), I can just go back and wrap a (defparameter) around an old form easily
[18:25:23] * phoe is now officially a SBCL contributor
[18:26:29] <moon-child> ;o
[18:26:42] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 276 seconds)
[18:26:47] <phoe> beach: the thing we talked about, regarding a rollback at a failed U-I-F-{R,D]-C, got merged into SBCL
[18:27:13] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[18:27:17] <beach> Congratulations!
[18:28:27] <ns12> mfiano: Is there similar functionality for SLIME?
[18:28:32] <mfiano> No
[18:28:58] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[18:29:30] <_death> I have some read/eval hooks for slime repl.. you can use the eval hook to store and retrieve references
[18:29:51] <_death> *real/eval hooks patch
[18:31:01] *** Joins: kevingal (~quassel@2a02:8084:4140:f300:4856:a4ca:ca7b:cdae)
[18:31:20] *** Quits: amb007 (~a_bakic@102.215.76.86.rev.sfr.net) (Ping timeout: 256 seconds)
[18:31:43] * edgar-rft wants a REPL reader macro for accessing values evaluated before 1958
[18:32:19] <phoe> you mean a macro for a punchcard reader?
[18:33:56] *** Joins: amb007 (~a_bakic@145.132.22.93.rev.sfr.net)
[18:39:22] <rotateq> maybe other intelligent species have this with their version of CL
[18:43:27] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[18:55:44] *** Joins: waku (~user@catv87040.tac-net.ne.jp)
[19:01:22] *** Quits: waku (~user@catv87040.tac-net.ne.jp) (Ping timeout: 256 seconds)
[19:11:49] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[19:11:55] *** Parts: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz) ()
[19:13:22] *** Joins: IPmonger (~IPmonger@c-69-242-83-226.hsd1.pa.comcast.net)
[19:13:36] *** Quits: IPmonger (~IPmonger@c-69-242-83-226.hsd1.pa.comcast.net) (Remote host closed the connection)
[19:14:07] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[19:19:24] *** Joins: morganw (~user@80.225.24.132)
[19:21:58] *** Joins: Dima[m] (~reddima10@2001:470:69fc:105::366)
[19:27:09] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 276 seconds)
[19:28:29] *** Quits: scymtym (~user@ip-94-114-248-79.unity-media.net) (Remote host closed the connection)
[19:33:54] *** Joins: lisp123 (~lisp123@5.30.23.247)
[19:34:04] *** Quits: lisp123 (~lisp123@5.30.23.247) (Read error: Connection reset by peer)
[19:34:55] *** Joins: scymtym (~user@ip-94-114-248-79.unity-media.net)
[19:44:57] *** Quits: Algernon91 (~Algernon6@2a04:cec0:10e8:5fa4:5553:fad9:4f4b:d3d) (Read error: Connection reset by peer)
[19:45:21] *** Joins: Algernon91 (~Algernon6@2a01:e0a:511:6ce0:81dd:70b:889e:9cac)
[19:45:54] *** Joins: Algernon666 (~Algernon6@2a01:e0a:511:6ce0:e0be:bc12:6cfb:52f3)
[19:49:49] *** Quits: Algernon91 (~Algernon6@2a01:e0a:511:6ce0:81dd:70b:889e:9cac) (Ping timeout: 240 seconds)
[19:51:57] *** Quits: kevingal (~quassel@2a02:8084:4140:f300:4856:a4ca:ca7b:cdae) (Ping timeout: 240 seconds)
[19:52:13] *** Quits: Algernon666 (~Algernon6@2a01:e0a:511:6ce0:e0be:bc12:6cfb:52f3) (Ping timeout: 240 seconds)
[19:54:21] *** Quits: scymtym (~user@ip-94-114-248-79.unity-media.net) (Remote host closed the connection)
[19:55:26] *** Joins: scymtym (~user@ip-94-114-248-79.unity-media.net)
[19:58:12] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[20:02:04] *** Quits: fitzsim (~user@69-165-165-189.dsl.teksavvy.com) (Read error: Connection reset by peer)
[20:04:12] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 276 seconds)
[20:10:31] *** Joins: Everything (~Everythin@37.115.210.35)
[20:10:55] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[20:12:33] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[20:20:50] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[20:24:35] *** Joins: Algernon666 (~Algernon6@2a01:e0a:511:6ce0:e0be:bc12:6cfb:52f3)
[20:25:56] *** Joins: Algernon91 (~Algernon6@2a04:cec0:10e8:5fa4:8478:c76:7fea:6fb5)
[20:29:37] *** Quits: loke (~loke@junk.nocrew.org) (Ping timeout: 240 seconds)
[20:29:39] *** Quits: Algernon666 (~Algernon6@2a01:e0a:511:6ce0:e0be:bc12:6cfb:52f3) (Ping timeout: 250 seconds)
[20:33:30] *** Quits: OlCe``` (~user@lfbn-nic-1-109-134.w2-15.abo.wanadoo.fr) ()
[20:33:34] *** Joins: jstoddard (~user@107-142-159-57.lightspeed.sndgca.sbcglobal.net)
[20:33:49] *** Quits: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f) (Quit: Leaving)
[20:33:53] *** Joins: OlCe (~user@lfbn-nic-1-109-134.w2-15.abo.wanadoo.fr)
[20:34:43] *** Joins: cage (~cage@dynamic-adsl-84-221-50-16.clienti.tiscali.it)
[20:35:28] *** Joins: bauripalash (~bauripala@2401:4900:3825:7ad2:1:2:4472:87fa)
[20:43:44] *** Joins: waku (~user@catv87040.tac-net.ne.jp)
[20:45:37] *** Joins: Algernon666 (~Algernon6@2a04:cec0:10fe:29e:8478:c76:7fea:6fb5)
[20:47:04] *** Quits: bauripalash (~bauripala@2401:4900:3825:7ad2:1:2:4472:87fa) (Quit: Quit)
[20:48:32] *** Quits: Algernon91 (~Algernon6@2a04:cec0:10e8:5fa4:8478:c76:7fea:6fb5) (Ping timeout: 240 seconds)
[20:48:34] *** Quits: amb007 (~a_bakic@145.132.22.93.rev.sfr.net) (Read error: Connection reset by peer)
[20:48:37] *** Quits: waku (~user@catv87040.tac-net.ne.jp) (Ping timeout: 240 seconds)
[20:49:40] *** Joins: amb007 (~a_bakic@102.215.76.86.rev.sfr.net)
[20:50:58] *** Joins: Oladon (~olad@98.43.81.226)
[20:53:37] *** Quits: amb007 (~a_bakic@102.215.76.86.rev.sfr.net) (Ping timeout: 240 seconds)
[20:54:35] *** Joins: amb007 (~a_bakic@102.215.76.86.rev.sfr.net)
[20:59:57] *** Quits: sander (~sander@user/sander) (Ping timeout: 240 seconds)
[21:01:39] *** Quits: bendersteed (~user@ppp141237131021.access.hol.gr) (Remote host closed the connection)
[21:02:03] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Quit: varioust)
[21:02:15] *** Joins: sander (~sander@user/sander)
[21:03:49] *** Joins: fitzsim (~user@69-165-165-189.dsl.teksavvy.com)
[21:08:09] *** Joins: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz)
[21:13:30] *** Parts: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz) ()
[21:13:49] *** Joins: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz)
[21:14:34] *** Joins: makomo (~makomo@user/makomo)
[21:31:55] *** Joins: dfluk_ (~Lucas@201-5-251-134.user3g.veloxzone.com.br)
[21:31:55] <bollu> Why does this use of let* not create a compiler error? When I write |(defgeneric errormsg (x)); (let* (x (errormsg nil)) x)| It compiles successfully and gives me the error  |style-warning: The variable ERRORMSG is defined but never used.| But this is nonsensical. let* need TWO parens, not one.
[21:31:55] <bollu> https://gist.github.com/bollu/f43a5a6889679d6cd848604b51393ced
[21:32:22] *** Quits: Jing (~hedgehog@240e:390:7c53:a7e1:ede2:45ee:21e7:7941) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[21:33:40] <jackdaniel> bollu: LET* takes two arguments - bindings and body
[21:34:02] <jackdaniel> each binding is either an atom (then it is implicitly initialized to nil) or a list, then the second argument is its value
[21:34:27] <jackdaniel> so (let* (x (errormsg nil)) x) is equivalent to (let* ((x nil) (errormsg nil)) x)
[21:34:37] *** Quits: dfluk (~Lucas@201-5-251-134.user3g.veloxzone.com.br) (Ping timeout: 240 seconds)
[21:35:03] <jackdaniel> or to (let* ((x) (errormsg)) …) but this style is very unusual
[21:35:04] *** Parts: Dima[m] (~reddima10@2001:470:69fc:105::366) ()
[21:35:36] <aeth> I love macros with syntactic sugar like that. I sometimes write my own just to get that convenience where the standard doesn't provide it
[21:35:39] <bollu> jackdaniel what does (errormsg nil) mean as a left hand side of a binding?
[21:35:45] <bollu> jackdaniel shouldn't that give an error?
[21:35:51] <aeth> bollu: think about how it's likely implemented
[21:36:14] <aeth> you have a list, you walk over the list, and you apply a simple rule to the contents of the list
[21:36:14] <jackdaniel> (errormsg nil) means that you bind a (most likely lexical) variable named errormsg to nil
[21:36:17] <bollu> aeth I would imagine it elaborates into a lambda, with the left hand sizes becoming formal arguments to a lambda
[21:36:32] <bollu> jackdaniel :O that is terrible. So I can dynamically generate names and pass them to let*?
[21:36:44] <jackdaniel> em, no?
[21:37:42] <jackdaniel> (LET* (binding1 binding2 … bindingn) …) ; (errormsg nil) is binding2 in this "template"
[21:37:46] <bollu> oh
[21:38:22] <aeth> (if (listp binding) (destructuring-bind (name &optional value) binding (values name value)) (values binding nil))
[21:38:26] <bollu> (let* (x  (y 1)) y) -> This translates to (let* ((x nil) (y 1)) y) I presume?
[21:38:33] <bollu> thanks, I now understand
[21:38:37] <aeth> my code is how you could parse the inside of a let*'s binding forms
[21:38:39] <jackdaniel> yes, that's what I've said earlier
[21:38:44] <bollu> yes, I misread :)
[21:38:55] <bollu> Is it possible to disable this implicit nil-ing?
[21:39:10] <jackdaniel> if you want some interesting things that you may find terrible you may look into progv
[21:39:19] <jackdaniel> no, you need to define your own macro
[21:39:24] <bollu> lol, okay, let me take a look
[21:39:34] <bollu> jackdaniel okay, I guess I shall learn how to do that now and ask questions.
[21:39:37] <bollu> thanks!
[21:39:59] *** Parts: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz) ()
[21:40:04] <jackdaniel> btw, I wonder why people so rarely use PROG - it is quite handy
[21:40:21] <jackdaniel> perhaps people don't like algol-derived operators that much
[21:40:24] <aeth> I think most Lisp programmers use PROG (because most Lisp programmers programmed in the '80s)
[21:41:27] <aeth> it's one of those things that I see all of the time in archaic code
[21:42:47] <edgar-rft> yes, I programmed in the 1980s, but in TurboPascal and not in Lisp :-)
[21:45:00] <bollu> Is it possible to get SBCL to treat warnings as errors?
[21:46:33] <aeth> iirc, that's something ASDF can do, not the implementation
[21:46:50] <jackdaniel> wrap your code in (handler-case (code) (warning (c) (error c))
[21:47:14] <aeth> oh, I was assuming compiler warnings
[21:47:14] <jackdaniel> two parens around the warning clause
[21:47:17] <bollu> aeth okay. Any idea what the correct option is?
[21:47:28] <bollu> aeth yeah, I wanted to treat SBCL compiler warnings as errors
[21:47:45] <jackdaniel> asdf already does that by default I think
[21:47:47] <aeth> asdf:*compile-file-warnings-behaviour*
[21:47:48] <aeth> I think
[21:47:53] <aeth> for me, it's :WARN right now
[21:48:25] <aeth> So it's not so much that the compiler fails, it's that once the file compiles with warnings, the build system will fail
[21:48:49] <jackdaniel> bollu: then (setf asdf:*compile-file-warnings-behaviour* :error)
[21:49:04] <aeth> if that applies to STYLE-WARNINGs and NOTEs, then it might be really inconvenient with third party dependenices, though
[21:49:09] <aeth> people just... ignore those
[21:49:24] <bollu> jackdaniel thank you. Can you point me to the ASDF reference manual? I was unable to google for it
[21:49:26] <aeth> every time I update quicklisp and then load a large project I get at least 1000 STYLE-WARNINGs
[21:49:36] <bollu> For whatever reason, google search quality as gotten way worse for me recently....
[21:49:47] <jackdaniel> bollu: I don't know whether this is documented
[21:50:12] <bollu> jackdaniel Does this live in my `.asd` file?
[21:50:30] <jackdaniel> this setf?, no this rather belongs to your lisp init file
[21:50:33] <jackdaniel> because it applies to all systems
[21:50:44] <yitzi> bollu: https://common-lisp.net/project/asdf/asdf.html
[21:50:47] <jackdaniel> unless you dynamically bind the variable for the time of compilation
[21:50:50] <aeth> or in your CI entry point if that's where you're doing it
[21:50:59] <aeth> could be useful for automated tests
[21:53:51] *** Quits: MajorBiscuit (~MajorBisc@c-001-032-008.client.tudelft.eduvpn.nl) (Quit: WeeChat 3.3)
[21:54:14] <bollu> jackdaniel it is doumented: https://common-lisp.net/project/asdf/asdf.html#index-_002acompile_002dfile_002dwarnings_002dbehaviour_002a
[21:54:25] <bollu> yitzi ty for the link. I'll remember to go hunt at the website for next time
[21:54:37] *** Quits: miique (~miique@181.46.139.166) (Ping timeout: 240 seconds)
[21:58:17] <etimmons> bollu: Note that _compile-file-warnings-behavior_ really only applies to style warnings
[21:58:35] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[21:58:45] <etimmons> warnings that are not style warnings are treated as failures
[21:59:34] <etimmons> The unfortunate naming comes from compile-file
[21:59:39] <etimmons> clhs compile-file
[21:59:40] <specbot> http://www.lispworks.com/reference/HyperSpec/Body/f_cmp_fi.htm
[22:12:27] *** Quits: treflip (~user@user/treflip) (Quit: ERC (IRC client for Emacs 27.2))
[22:13:39] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[22:17:32] *** Quits: Algernon666 (~Algernon6@2a04:cec0:10fe:29e:8478:c76:7fea:6fb5) (Ping timeout: 240 seconds)
[22:21:52] *** Quits: epolanski (uid312403@id-312403.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[22:24:50] *** Quits: dfluk_ (~Lucas@201-5-251-134.user3g.veloxzone.com.br) (Quit: Leaving)
[22:31:47] *** Joins: waku (~user@catv87040.tac-net.ne.jp)
[22:36:21] <bollu> etimmons how do I convert ALL types of warnings into errors?
[22:37:07] *** Quits: waku (~user@catv87040.tac-net.ne.jp) (Ping timeout: 256 seconds)
[22:40:45] <Josh_2> catch a warning then signal a condition?
[22:43:57] <White_Flame> bollu: if the problem is that QL muffles them, you can pass an option to it to let all the warnings display, I think :verbose t
[22:45:10] *** Joins: reb` (~brown@2603-7000-d93b-e900-f362-ec84-305b-45c1.res6.spectrum.com)
[22:46:31] <Josh_2> I am deploying my lisp image, then as it loads the condition "Don't know how to REQUIRE sb-posix."
[22:47:39] <White_Flame> you probably need to require it before building your image
[22:47:40] <Josh_2> bit odd
[22:47:46] <Josh_2> Alright let me try that
[22:48:08] <White_Flame> since once you deploy, it's (potentionally) dislocated from wherever sbcl's install was
[22:48:18] <White_Flame> *potentially
[22:48:55] <Josh_2> So I should require in the build function?
[22:49:34] <White_Flame> or toplevel or whatever init or wherever you want :-P
[22:49:40] <White_Flame> just as long as it executes before you build your image
[22:50:10] <Josh_2> Right
[22:51:04] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[22:53:01] <Josh_2> Okay I eval (require 'sb-posix) before the call to asdf:make but the deployed image still has the same problem
[22:54:41] <Josh_2> Alright
[22:54:47] <Josh_2> the problem seems to be with using clack
[22:55:09] <Josh_2> I commented out the code that starts the hunchentoot listener (using ningle) and the problem is now gone
[22:55:31] *** Joins: theothornhill (~user@2a01:799:159d:aa00:3085:8eab:86cd:42cb)
[22:55:43] *** Joins: Guest2560 (~Guest25@2601:647:5500:aaf0:94ab:357c:c6a7:bbba)
[22:56:19] *** Quits: Guest2560 (~Guest25@2601:647:5500:aaf0:94ab:357c:c6a7:bbba) (Client Quit)
[22:56:37] <White_Flame> yeah, some of those more frameworky libs do try to pull in libs lazily at runtime, and it's not good
[22:57:06] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[22:57:17] <White_Flame> it effectively makes them non-deployable
[22:58:16] <Josh_2> hmm
[22:58:32] <Josh_2> What is the solution? Quickloading clack?
[22:58:49] <Josh_2> That means I can no longer just distribute a binary but the target system will also need quicklisp installed
[22:58:57] *** Quits: theothornhill (~user@2a01:799:159d:aa00:3085:8eab:86cd:42cb) (Remote host closed the connection)
[22:59:19] *** Joins: theothornhill (~user@2a01:799:159d:aa00:3085:8eab:86cd:42cb)
[22:59:46] <White_Flame> correct
[22:59:47] <etimmons> Josh_2: Clack has helper systems like "clack-handler-hunchentoot" those are the ones you need to explicitly load before dumping, IIRC
[22:59:48] *** Quits: mgl (~mgl@cpc87455-finc19-2-0-cust234.4-2.cable.virginm.net) (Ping timeout: 256 seconds)
[22:59:56] <Josh_2> I see
[23:00:08] <White_Flame> it all depends on where the REQUIRE call is
[23:00:34] <White_Flame> it might be that at build time, you actually launch & shut down your server just to flex it in the build environment
[23:01:02] <Josh_2> Okay epic
[23:01:08] <Josh_2> that worked etimmons tyvm
[23:01:18] <etimmons> bollu: I'm confused about what you're actually trying to do. Do you want warnings while compiling to be treated as errors? ASDF already does this. If you want to do it not at compile time you need to wrap your code with a handler that resignals the warning as an error
[23:01:30] <Josh_2> White_Flame: Thanks for the info, I had not considered such things
[23:01:38] <etimmons> Josh_2: np. I've wrangled clack many times by now
[23:01:39] <White_Flame> I'm just spitballing :)
[23:01:54] <White_Flame> I gave up on clack pretty quickly :-P
[23:02:14] <etimmons> yeah, that's my current boat. I'm feed up with it and just using hunchentoot directly for the most part
[23:02:45] <White_Flame> someone else used the term "fukamachiware", and I think the label is meaningful
[23:02:50] <Josh_2> Yes
[23:03:19] <Josh_2> Although Woo is cool
[23:03:36] <jackdaniel> hunchentoot is a brilliant piece of software - its api is well thought and the code is very comprehensible
[23:04:09] <etimmons> agreed
[23:04:14] <Josh_2> if I want to be able to use Woo with my deployed app, I assume all the target system needs is libev?
[23:04:26] <Josh_2> Hunchentoot is great, but it is real slow :(
[23:04:37] <jackdaniel> is it though?
[23:04:49] <Josh_2> I like that with Ningle/Clack/Lack you can just swap between handlers
[23:05:10] <Josh_2> Yes it is. A blazing fast webserver written in CL would be quite the draw for many people
[23:05:14] <jackdaniel> I mean, you may of course run benchmarks and they will show that it is slower than say nginx or something, but do you have a load that makes it meaningful?
[23:05:21] <Josh_2> Right now tbnl is much slower than nodejs
[23:05:53] <Josh_2> https://github.com/fukamachi/woo If the benchmarks are to be believed then tbnl is also slower than a python webserver
[23:06:05] <mfiano> fukamachiware is not very good. Too many uses of #'ignore-errors and unresponsive maintainer. I just attributed it all to him being a lone wolf that moves quickly between his own interests, without caring about users.
[23:06:06] <Josh_2> I have run benchmarks on tbnl which come back similar on my machine
[23:06:12] <White_Flame> how fast do you need it?  what's the minimum usable throughput?
[23:06:29] <White_Flame> who cares if one system can serve 100,000x your current load vs 10,000x
[23:06:49] <jackdaniel> Josh_2: not my point, when you say "really slow" I'd expect that it doesn't meet some tangible need, not that it is slower than something else
[23:06:50] <Josh_2> mfiano: doesn't he work for a japanese company using CL? I assume he uses his own libraries at work
[23:07:26] <mfiano> Josh_2: I don't know. I have waited years for his input on several bug reports, and gave up a long time ago.
[23:07:46] <White_Flame> also there's no comments or documentation, and he does weird things with passing around package names instead of using generics
[23:08:14] <White_Flame> making M-.'ing through the code extremely difficult
[23:08:17] *** Quits: reb` (~brown@2603-7000-d93b-e900-f362-ec84-305b-45c1.res6.spectrum.com) (Ping timeout: 240 seconds)
[23:08:30] <jackdaniel> you may always shave plenty of ms by replacing classes with structures, declaring speed 3, using ffi and some obscure hand-inlined code
[23:08:33] <mfiano> Let's not forget deeply nested closures instead of standard-objects
[23:08:45] <Josh_2> tbnl is great but it would be even greater if it could go faster than python :facepalm:
[23:09:17] <jackdaniel> isn't the current name "hunchentoot"?
[23:09:48] <Josh_2> yeh
[23:10:03] <White_Flame> seems to be the case for about 16 years now :-P
[23:10:33] <Josh_2> some of us are pretty slow to catch up :joy:
[23:10:35] <jackdaniel> no point in using old names, unless we want to talk about LISP, and that defclass is a clever macro that is used in some of its dialects
[23:10:54] <Josh_2> tbnl is still a valid nickname in the package, so I will keep saying tbnl ;)
[23:11:51] <_death> so I should make the switch from araneida? ;)
[23:12:33] <Josh_2> I dont see why we couldnt have an extremely fast web server which also has a great interface
[23:13:30] * jackdaniel still is curious whether you have a workload that makes hunchentoot unfeasible
[23:13:31] <mfiano> "great" is too subjective, and may conflict with "fast" to some people, especially those that think "great" coincides with generic functions all the way down.
[23:13:37] <Shinmera> because there's only so many people and so many hours in the day
[23:13:45] <Josh_2> Shinmera: yes pretty much
[23:14:02] <Josh_2> Personally I have gone from Ningle -> Hunchentoot -> Ningle
[23:14:05] <_death> it's not "slow" because of generic functions or using classes or no declarations..
[23:14:34] <_death> it's more the "select vs. epoll" type
[23:14:46] *** Joins: dre (~dre@2001:8003:c932:c301:50d2:4546:b9eb:e49)
[23:28:57] *** Quits: cage (~cage@dynamic-adsl-84-221-50-16.clienti.tiscali.it) (Quit: rcirc on GNU Emacs 27.1)
[23:32:01] *** Joins: reb (~brown@2603-7000-d93b-e900-b63a-b62a-a1d1-b433.res6.spectrum.com)
[23:32:38] *** Joins: Kyuvi (~Kyuvi@dsl-hkibng31-58c38d-219.dhcp.inet.fi)
[23:43:57] *** Joins: kevingal (~quassel@2a02:8084:4140:f300:4856:a4ca:ca7b:cdae)
[23:46:34] *** Joins: Algernon666 (~Algernon6@2a04:cec0:10fe:29e:29d8:5b5e:f41b:9b27)
[23:50:17] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[23:51:01] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 240 seconds)
[23:52:41] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[23:57:07] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
