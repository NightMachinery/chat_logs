[00:05:40] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[00:05:42] <masinter> performance of X suffers because Lisp is so much faster now
[00:06:37] <masinter> with X, you have to send over the network every screen update, even if it's too fast for any display refresh
[00:17:40] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Remote host closed the connection)
[00:17:56] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[00:24:24] *** Joins: waleee (~waleee@h-98-128-229-110.NA.cust.bahnhof.se)
[00:29:38] *** Joins: mgl (~mgl@cpc87455-finc19-2-0-cust234.4-2.cable.virginm.net)
[00:31:01] *** Quits: pve (~pve@178-55-215-216.bb.dnainternet.fi) (Quit: leaving)
[00:37:49] *** Joins: karlosz (~karlosz@47.180.55.252)
[00:38:56] *** Joins: Oladon (~olad@98.43.81.226)
[00:53:15] *** Joins: jealousmonk (~user@user/jealousmonk)
[00:55:32] *** Joins: morganw (~user@80.225.24.132)
[00:56:22] *** Quits: Dynom (~niels@80-114-12-206.cable.dynamic.v4.ziggo.nl) (Quit: WeeChat 3.4)
[00:57:03] *** Joins: lisp123 (~lisp123@5.30.23.247)
[01:02:06] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 252 seconds)
[01:09:27] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca)
[01:33:25] *** Joins: scymtym (~user@ip-094-114-248-079.um31.pools.vodafone-ip.de)
[01:34:23] *** Joins: Brucio-61 (~Brucio-68@ip-094-114-248-079.um31.pools.vodafone-ip.de)
[01:45:00] *** Quits: shka (~herr@109.231.0.226) (Ping timeout: 252 seconds)
[01:49:24] *** Quits: Brucio-61 (~Brucio-68@ip-094-114-248-079.um31.pools.vodafone-ip.de) (Ping timeout: 252 seconds)
[01:50:15] *** Joins: hashfunc1aa5 (~user@162.254.115.155)
[01:54:04] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[01:54:57] *** Quits: wacki (~wacki@87.123.131.41) (Quit: Leaving.)
[01:57:04] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 272 seconds)
[01:57:38] *** Joins: aeth (~aeth@user/aeth)
[02:02:12] *** Joins: pillton (~user@203.221.110.253)
[02:04:01] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[02:08:13] *** Joins: Oladon (~olad@98.43.81.226)
[02:09:02] *** Joins: lisp123 (~lisp123@5.30.23.247)
[02:13:24] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 240 seconds)
[02:13:44] *** Joins: aartaka (~aartaka@176.59.192.16)
[02:13:49] *** Quits: aartaka (~aartaka@176.59.192.16) (Read error: Connection reset by peer)
[02:14:03] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[02:16:18] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[02:23:00] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 240 seconds)
[02:24:37] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Remote host closed the connection)
[02:30:12] *** Quits: cuz (~user@38.140.58.234) (Ping timeout: 240 seconds)
[02:49:45] *** Quits: mgl (~mgl@cpc87455-finc19-2-0-cust234.4-2.cable.virginm.net) (Ping timeout: 256 seconds)
[02:52:33] *** Quits: attila_lendvai (~alendvai@catv-89-132-245-188.catv.fixed.vodafone.hu) (Read error: Connection reset by peer)
[02:52:43] *** Joins: attila_lendvai (~alendvai@catv-89-132-245-188.catv.fixed.vodafone.hu)
[02:56:02] *** Quits: rgherdt_ (~rgherdt@83.236.30.76) (Remote host closed the connection)
[02:58:02] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[02:58:03] *** Quits: Oladon (~olad@98.43.81.226) (Read error: Connection reset by peer)
[02:59:48] *** Quits: yewscion (~yewscion@ec2-44-193-71-234.compute-1.amazonaws.com) (Ping timeout: 252 seconds)
[03:05:40] *** Quits: cjb (~cjb@user/cjb) (Ping timeout: 260 seconds)
[03:17:54] *** Quits: Inline (~Inline@2a02:908:1252:7a80::1aa) (Read error: Connection reset by peer)
[03:39:02] *** Quits: waleee (~waleee@h-98-128-229-110.NA.cust.bahnhof.se) (Ping timeout: 272 seconds)
[03:40:43] *** Joins: waleee (~waleee@h-98-128-229-110.NA.cust.bahnhof.se)
[03:41:14] *** Joins: Inline (~Inline@2a02:908:1252:7a80::1aa)
[03:44:05] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[04:03:44] *** Quits: lagash (lagash@lagash.shelltalk.net) (Ping timeout: 250 seconds)
[04:10:09] *** Quits: karlosz (~karlosz@47.180.55.252) (Quit: karlosz)
[04:10:51] *** Joins: lisp123 (~lisp123@5.30.23.247)
[04:13:37] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Quit: ec)
[04:15:09] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 252 seconds)
[04:25:27] *** Joins: lagash (lagash@lagash.shelltalk.net)
[04:34:08] *** Quits: random-nick (~random-ni@87.116.181.150) (Ping timeout: 272 seconds)
[04:35:15] *** Joins: cjb (~cjb@user/cjb)
[04:40:14] *** Quits: morganw (~user@80.225.24.132) (Remote host closed the connection)
[04:42:00] *** Quits: eugercek (~user@user/eugercek) (Remote host closed the connection)
[04:47:47] <qhong> Is there a way to develop distributed program using the usual image/repl-centric style?
[04:48:14] <qhong> I know there's cl-mpi, but it sounds like one have to compile static binary and run with mpiexec -- basically like developing C
[04:57:32] *** wmblathe_ is now known as wmblathers
[05:03:33] <pillton> qhong: I don't think so.  Your question is related to how do you serialize a closure?
[05:07:47] <qhong> pillton: yes, I see. I know that some work exists on serializable closures, but they don't seem to intersect with any projects on distributed computing, so guess we're out of luck.
[05:08:38] <White_Flame> obviously, pointers/references don't work over the network
[05:09:02] <White_Flame> but when you're doing pure functional work, that actually doesn't matter and you can send everything without bothering referring to stuff on a particular machien
[05:09:08] <pillton> qhong: I saw yesterday that Christian Queinnec looked at it. https://christian.queinnec.org/WWW/Distribution.html
[05:09:45] <White_Flame> also, SLIME/SWANK is already a distributed model, and you could repl through any node you want
[05:09:53] *** Quits: drakonis (drakonis@user/drakonis) (Quit: WeeChat 3.1)
[05:10:25] <White_Flame> I've done a lot of heterogeneous distributed programming in lisp, and haven't found any lisp-specific barriers
[05:11:00] <White_Flame> but distributed programming in general is much more difficult
[05:11:10] <White_Flame> (in the "multithreading programming is hard!" sense)
[05:11:54] <White_Flame> there's certain discipline & architectural design required to eliminate the problems.  trying to treat it like a single-address space machine isn't usually the best facade to build
[05:12:55] <pillton> White_Flame: I think "a great many" people would love to be able to do (slurm:start-batch (lambda () (format t "hello array job ~A.~%" slurm:*array-job*)) :array 1000).
[05:13:36] <White_Flame> sure, and that literal form is easily done ;)
[05:14:01] <White_Flame> since it doesn't close over anything
[05:15:01] <qhong> White_Flame: Yes I can see swank could work. One will need to write some administrative program on top of it to make it work more pleasantly (e.g. slurm:start-batch), but I guess this is true for anything that can send stuff over the network
[05:15:25] <qhong> And if given I have to invent some wheel, I'd prefer MPI because of performance benefit
[05:15:29] <White_Flame> there's tons of styles of distributed programming.  there's no silver bullet solution fo everyone
[05:15:46] <White_Flame> so you'd have to describe what sort of stuff you're doing in order to get anything more specific
[05:16:33] <pillton> White_Flame: Sure. I should have thought of a better example. Hopefully you get my point.
[05:16:36] <qhong> I need to run the same loop on multiple processors, and each processors communicate via asynchronous message passing
[05:16:54] <White_Flame> what does the loop need to reference?
[05:17:02] <qhong> Only local data
[05:17:05] <White_Flame> the loop body, specifically
[05:17:08] <White_Flame> well then that's easy
[05:17:33] <White_Flame> send a string with the lambda form to each node, read/compile it, and invoke it per parameter received over the wire
[05:17:37] <White_Flame> or for some numeric range
[05:17:51] <White_Flame> (as long as the parameters are simple, too)
[05:18:59] <qhong> Yes I agree in principle it is easy, and can be written without much hassle using sockets. Socket is quite slow however comparing to "dedicated" HPC stuff
[05:19:03] <White_Flame> if you can send the already-READ lambda s-expression across your networking, that'd be even more straightforward
[05:19:28] <White_Flame> of course
[05:19:50] <White_Flame> distributed computing only makes sense if the latency of issuing work is less than the computational time of the units of work
[05:20:13] <White_Flame> (in whatever aggregate)
[05:20:23] <qhong> Oh now I see, I can probably do this for MPI too. So the important idea is to broadcast S-expressions from the local REPL
[05:20:42] <qhong> Then interactive development can somewhat work
[05:21:09] <White_Flame> sure, you interact with the job dispatcher, and it deals with sending out messages to the compute farm slave boxes
[05:21:57] *** Joins: Guest74 (~Guest74@modemcable110.164-177-173.mc.videotron.ca)
[05:21:59] <White_Flame> and then there's a lot of load balancing, push vs pull, etc decisions there as well
[05:23:43] <qhong> I'm less worried about the "in production" optimizations, I know they can be done. I just want to improve development experience, because the documented way of using cl-mpi is too inconvinient.
[05:25:42] *** Joins: lottaquestions (~nick@2607:fa49:5041:a200:b555:2e8f:fe4f:2e3d)
[05:27:42] <Guest74> Sometimes I write stuff the way I want to, with the semantics I want, and then connect that to the underlying systems after.
[05:28:16] <hashfunc1aa5> how do you abort something in the slime repl? when I C-c C-C (`slime-interrupt`) it interrupts the process, but a new empty prompt isn't given
[05:32:57] <Guest74> that should pop up an sldb window.
[05:33:15] *** Quits: attila_lendvai (~alendvai@catv-89-132-245-188.catv.fixed.vodafone.hu) (Ping timeout: 252 seconds)
[05:37:02] <hashfunc1aa5> Guest74: C-c C-c does pop-up and sldb window. what i'm looking for is a way to start a new clean line in the repl
[05:37:18] <hashfunc1aa5> like the behavior that C-c has in a terminal
[05:37:29] <Guest74> Then you should read what's in the window.  Abort is an option.
[05:38:08] <hashfunc1aa5> Guest74: thanks
[05:38:45] <hashfunc1aa5> i didn't think it would be that simple
[05:38:56] *** Quits: xsperry (~xs@user/xsperry) (Remote host closed the connection)
[05:39:02] <Guest74> np, i don't think I read anything in that window for a while either!
[05:39:34] <Guest74> you can just press a and it will choose the closest abort, or something like that.
[05:39:37] <hashfunc1aa5> one last slime question for the day: is there a way in slime to quickly navigate past commands? like something akin to C-r in a terminal?
[05:40:06] <Guest74> M-p
[05:41:23] <Guest74> meta is most likely bound to alt if you didn't change it.
[05:41:28] <White_Flame> I always use q to dismiss sldb windows, whatever command that is
[05:41:52] <hashfunc1aa5> M-p and M-n do cycle between the previous and next in the history. what i'm looking for is a way to 'search' the previous commands.
[05:41:59] <hashfunc1aa5> like the behavior that C-r has in a terminal
[05:42:24] <Guest74> ah, sorry.  I misread that.  didn't know terminals work like that.
[05:42:35] <White_Flame> you can type a prefix and hit M-p, but you can also C-r in the repl to text seach, and hit enter on a previous command to bring it current
[05:43:02] <etimmons> It's been a while since I used slime, but I think you're looking for M-r
[05:43:34] <Guest74> that gives me a wrong type argument.
[05:45:25] <hashfunc1aa5> Guest74: White_Flame: etimmons: thanks
[05:45:44] <hashfunc1aa5> typing the prefix and issuing M-p is the best, i think
[05:46:39] <White_Flame> and you can M-p/M-n through the prefix-matching history, too
[05:47:23] <hashfunc1aa5> White_Flame: yeah, that's the feature i was looking for
[05:48:15] <White_Flame> I would be surprised if there is a full non-prefix searcher as well somewhere, though
[05:48:21] <White_Flame> *wouldn't
[05:49:37] <Guest74> The only thing I'd add to my repl is the ability to save/pin something in the history.  Though with emacs there's probably already something like that.
[05:51:23] *** Joins: occ (~occ@user/occ)
[05:53:10] <hashfunc1aa5> Guest74: actually... i'm still at a loss for aborting the current line
[05:53:40] <Guest74> do you mean just clearing it?
[05:53:49] <Guest74> like c-k?
[05:54:06] <Guest74> c-a c-k i mean.
[05:54:21] <Guest74> I'm not a big emacs user btw.
[05:54:23] <hashfunc1aa5> what i'm looking for isn't to clear it, but to just start a new prompt
[05:55:36] <Guest74> sorry, I don't understand.
[05:56:07] <White_Flame> yeah, I know what you mean.  You typed stuff you don't want to execute.  But just go to the home and C-k it away
[05:56:20] <White_Flame> (especially with paredit)
[05:56:59] <hashfunc1aa5> White_Flame: i typed stuff that i don't want to execute, but i don't want to clear it either.
[05:57:52] *** Joins: s-liao (~s-liao@101.86.96.21)
[06:01:04] <hashfunc1aa5> maybe i'm not making any sense?
[06:01:45] <Guest74> sometimes I want to keep some incomplete thing and I just press enter and abort whatever error pops up.  I'm not a sophisticated emacs user though.
[06:01:57] <hashfunc1aa5> in a terminal i do this all the time:
[06:02:08] <hashfunc1aa5> user@host:~$ asdf^C
[06:02:12] <hashfunc1aa5> user@host:~$
[06:05:59] <hashfunc1aa5> Guest74: that would work, but in the case where i want to avoid side-effects (be evaluating) and still keep what i typed that approach wouldn't work for me
[06:06:27] <hashfunc1aa5> i could just make an emacs function for this. but i'd be surprised if slime didn't have something like this already built-in
[06:07:31] *** Joins: karlosz (~karlosz@47.151.136.69)
[06:09:18] <hashfunc1aa5> i found it
[06:09:34] <hashfunc1aa5> give a prefix argument before you press RET
[06:09:59] *** Quits: Bike (~Glossina@71.69.170.70) (Quit: Lost terminal)
[06:10:09] <hashfunc1aa5> but that still doesn't eliminate the case where i want to avoid side-effects...
[06:10:29] <White_Flame> another dumb hack would be to quote your form before pressing return :-P
[06:11:14] <hashfunc1aa5> White_Flame: that right there is a good idea
[06:11:30] <White_Flame> clutters up the output, though, by repeating it back to you
[06:12:15] *** Joins: lisp123 (~lisp123@5.30.23.247)
[06:13:19] <hashfunc1aa5> issuing a C-c C-o could hack that output away
[06:13:35] <Guest74> so a repl should have a stash command.
[06:14:20] *** Joins: Bike (~Bike@71.69.170.70)
[06:14:30] <hashfunc1aa5> i'm probably just trying to over-optimize my workflow
[06:15:05] <hashfunc1aa5> i'll just leave it be. we figured it out enough
[06:17:22] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 272 seconds)
[06:28:40] *** Parts: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1) (Disconnected: Replaced by new connection)
[06:29:34] *** Joins: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1)
[06:41:53] *** Quits: specbot (~specbot@common-lisp.net) (Remote host closed the connection)
[06:41:53] *** Quits: minion (~minion@common-lisp.net) (Remote host closed the connection)
[06:42:15] *** Joins: minion (~minion@common-lisp.net)
[06:42:55] *** Joins: specbot (~specbot@common-lisp.net)
[06:44:44] *** Quits: karlosz (~karlosz@47.151.136.69) (Quit: karlosz)
[06:46:03] *** Joins: ammer (~ammer@113.247.176.9)
[06:47:33] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Client closed)
[07:17:31] *** Joins: s-liao (~s-liao@101.86.96.21)
[07:25:06] *** Quits: Bike (~Bike@71.69.170.70) (Quit: Connection closed)
[07:25:24] *** Quits: waleee (~waleee@h-98-128-229-110.NA.cust.bahnhof.se) (Ping timeout: 240 seconds)
[07:25:27] *** Quits: occ (~occ@user/occ) (Ping timeout: 252 seconds)
[07:30:31] <beach> Good morning everyone!
[07:31:44] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Client closed)
[07:32:12] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Remote host closed the connection)
[07:32:41] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[07:48:51] *** Joins: pingpongball (~pingpongb@27.34.47.113)
[07:54:22] *** Quits: pingpongball (~pingpongb@27.34.47.113) (Quit: Client closed)
[07:57:35] *** Quits: cjb (~cjb@user/cjb) (Quit: rcirc on GNU Emacs 29.0.50)
[07:58:42] *** Joins: lisp123 (~lisp123@5.30.23.247)
[07:59:40] *** Joins: s-liao (~s-liao@101.86.96.21)
[08:04:25] *** Joins: alvaro121_ (~aa@201.230.126.66)
[08:04:49] *** Quits: alvaro121 (~aa@201.230.126.66) (Ping timeout: 256 seconds)
[08:10:56] *** Joins: semz_ (~semz@user/semz)
[08:13:20] *** Quits: semz (~semz@user/semz) (Ping timeout: 250 seconds)
[08:33:05] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[08:36:14] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca) (Remote host closed the connection)
[08:39:27] *** Joins: lisp123 (~lisp123@5.30.23.247)
[08:43:00] *** Quits: lagash (lagash@lagash.shelltalk.net) (Ping timeout: 252 seconds)
[08:43:59] *** Joins: lagash (lagash@lagash.shelltalk.net)
[08:44:56] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 272 seconds)
[08:45:01] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[08:46:28] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Remote host closed the connection)
[08:46:46] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[08:55:42] *** semz_ is now known as semz
[09:14:59] *** Joins: occ (~occ@user/occ)
[09:34:06] *** Quits: Inline (~Inline@2a02:908:1252:7a80::1aa) (Remote host closed the connection)
[09:34:23] *** Joins: Inline (~Inline@2a02:908:1252:7a80::d7)
[09:47:21] *** Quits: occ (~occ@user/occ) (Ping timeout: 252 seconds)
[09:47:49] *** Quits: jealousmonk (~user@user/jealousmonk) (Quit: ERC 5.4.1 (IRC client for GNU Emacs 27.1))
[09:54:07] *** Joins: occ (~occ@user/occ)
[09:54:17] *** Quits: rotateq (~user@p200300e78706a00050f72feb644e2401.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[09:55:36] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 252 seconds)
[09:56:31] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[09:58:06] *** Joins: shka (~herr@109.231.0.226)
[09:59:27] *** Quits: frgo (~frgo@p548a3783.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[10:09:35] *** Joins: SR-71 (~user@user/SR-71)
[10:15:00] *** Quits: hashfunc1aa5 (~user@162.254.115.155) (Ping timeout: 240 seconds)
[10:18:36] *** Quits: occ (~occ@user/occ) (Ping timeout: 240 seconds)
[10:20:35] *** Joins: sloanr (~user@70-59-77-137.mpls.qwest.net)
[10:22:53] *** Joins: occ (~occ@user/occ)
[10:24:33] *** Joins: karlosz (~karlosz@47.151.136.69)
[10:27:30] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 252 seconds)
[10:28:03] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[10:28:48] *** Quits: sloanr (~user@70-59-77-137.mpls.qwest.net) (Ping timeout: 272 seconds)
[10:29:26] *** Quits: occ (~occ@user/occ) (Ping timeout: 272 seconds)
[10:32:54] *** Joins: taiju` (~user@240b:253:ec40:2400:b7d1:436e:2d61:e925)
[10:35:37] *** Joins: occ (~occ@user/occ)
[10:36:35] *** Joins: Cymew (~ante@c-0c87225c.023-1144-7570702.bbcust.telenor.se)
[10:41:08] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Client closed)
[10:41:09] *** Joins: lisp123 (~lisp123@5.30.23.247)
[10:45:48] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 240 seconds)
[10:49:24] *** Quits: ASau (~user@lmpc.drb.insel.de) (Remote host closed the connection)
[10:55:42] *** Joins: Algernon69 (~Algernon6@2a04:cec0:10e7:dc05:2180:3a97:1dd6:a138)
[10:57:24] *** Quits: taiju` (~user@240b:253:ec40:2400:b7d1:436e:2d61:e925) (Ping timeout: 240 seconds)
[11:06:49] *** Joins: wacki (~wacki@87.123.142.110)
[11:07:06] *** Quits: parjanya (~esb@2804:14c:1ad:9351:7fa0:acec:9caf:ed67) (Ping timeout: 252 seconds)
[11:12:30] *** Quits: rogersm (~rogersm@90.166.180.250) (Ping timeout: 272 seconds)
[11:24:01] *** Quits: karlosz (~karlosz@47.151.136.69) (Quit: karlosz)
[11:29:17] *** Joins: pingpongball (~pingpongb@27.34.47.113)
[11:29:59] *** Quits: pingpongball (~pingpongb@27.34.47.113) (Client Quit)
[11:30:20] *** Joins: blacked (~blacked@user/blacked)
[11:30:29] *** Joins: MajorBiscuit (~MajorBisc@2a02:a461:129d:1:193d:75d8:745d:e91e)
[11:31:32] *** blacked is now known as pingpongball
[11:31:52] *** Joins: rotateq (~user@ip-078-094-235-194.um19.pools.vodafone-ip.de)
[11:35:00] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 240 seconds)
[11:36:14] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[11:38:36] *** Quits: occ (~occ@user/occ) (Ping timeout: 240 seconds)
[11:39:57] *** yagamisa1o is now known as newblue
[11:42:32] *** Quits: pingpongball (~blacked@user/blacked) (Quit: Client closed)
[11:45:25] *** Joins: occ (~occ@user/occ)
[11:50:12] *** Quits: occ (~occ@user/occ) (Ping timeout: 240 seconds)
[11:52:05] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[11:55:23] *** Quits: ammer (~ammer@113.247.176.9) (Quit: WeeChat 2.8)
[11:59:22] *** Quits: amb007 (~a_bakic@102.215.76.86.rev.sfr.net) (Ping timeout: 272 seconds)
[11:59:40] *** Joins: amb007 (~a_bakic@21.39.22.93.rev.sfr.net)
[12:02:52] *** Joins: rogersm (~rogersm@90.166.180.250)
[12:03:37] *** Joins: occ (~occ@user/occ)
[12:07:22] *** Quits: newblue (~SingSong@120.197.255.246) (Changing host)
[12:07:22] *** Joins: newblue (~SingSong@user/yagamisato)
[12:11:34] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[12:15:00] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 240 seconds)
[12:17:13] *** Joins: aeth (~aeth@user/aeth)
[12:31:57] *** Joins: lisp123 (~lisp123@5.30.23.247)
[12:39:36] <phoe> morning
[12:39:57] <beach> Hello phoe.
[12:40:08] <phoe> hey hi
[12:42:26] *** Quits: amb007 (~a_bakic@21.39.22.93.rev.sfr.net) (Ping timeout: 272 seconds)
[12:43:10] *** Joins: amb007 (~a_bakic@9.38.22.93.rev.sfr.net)
[12:48:30] *** Quits: m5zs7k (aquares@web10.mydevil.net) (Read error: Connection reset by peer)
[12:48:48] *** Joins: m5zs7k_ (aquares@web10.mydevil.net)
[12:50:17] *** Joins: Dynom (~niels@80-114-12-206.cable.dynamic.v4.ziggo.nl)
[12:52:42] *** Quits: occ (~occ@user/occ) (Ping timeout: 252 seconds)
[12:52:42] *** Quits: MajorBiscuit (~MajorBisc@2a02:a461:129d:1:193d:75d8:745d:e91e) (Ping timeout: 252 seconds)
[12:54:43] *** Joins: MajorBiscuit (~MajorBisc@c-001-001-032.client.tudelft.eduvpn.nl)
[12:57:46] *** m5zs7k_ is now known as m5zs7k
[12:59:39] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[13:03:23] *** Joins: pve (~pve@176-93-111-24.bb.dnainternet.fi)
[13:05:30] *** Joins: frgo (~frgo@p548a3783.dip0.t-ipconnect.de)
[13:07:28] *** Joins: lisp123 (~lisp123@5.30.23.247)
[13:10:46] *** Quits: scymtym (~user@ip-094-114-248-079.um31.pools.vodafone-ip.de) (Remote host closed the connection)
[13:11:01] *** Joins: scymtym (~user@ip-094-114-248-079.um31.pools.vodafone-ip.de)
[13:12:12] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 240 seconds)
[13:14:04] *** Joins: eugercek (~user@user/eugercek)
[13:16:00] *** Quits: scymtym (~user@ip-094-114-248-079.um31.pools.vodafone-ip.de) (Ping timeout: 272 seconds)
[13:16:32] *** Joins: parjanya (~esb@2804:14c:1ad:9351:a9f4:2cf3:2d0f:3397)
[13:36:25] *** Joins: cosimone (~user@93-44-187-99.ip98.fastwebnet.it)
[13:42:29] *** Joins: scymtym (~user@2001:638:504:20e6:6ac3:87e0:e782:f3fc)
[13:57:37] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 240 seconds)
[14:12:17] <SR-71> So, what are you guys working on?
[14:17:50] * jackdaniel at the moment works on the motivation to do something productive :)
[14:18:47] <SR-71> Why not start a project for fun.
[14:19:21] <SR-71> You always learn something new.
[14:19:35] <jackdaniel> you should see my local-projects directory
[14:20:03] <moon-child> you should see mine
[14:20:17] <moon-child> :)
[14:20:18] <SR-71> I wish I orginized my local projects
[14:20:24] <SR-71> They are everywhere
[14:20:46] <mfiano> SR-71: There is #clprojects where a few of us talk about what we are working on.
[14:21:02] <SR-71> That's cool
[14:22:01] *** Joins: occ (~occ@user/occ)
[14:22:08] *** Joins: hobo_ (~hobo@2600:1700:8972:63f:3313:2d33:be9f:8246)
[14:22:47] <SR-71> While I was reading source of dogecoin, I had this idea.
[14:22:57] *** Quits: hobo (~hobo@2600:1700:8972:63f:3313:2d33:be9f:8246) (Ping timeout: 240 seconds)
[14:23:05] <SR-71> Why not implement a coin in Lisp, just for fun
[14:24:34] *** Quits: occ (~occ@user/occ) (Client Quit)
[14:27:01] <jackdaniel> (defun produce-coin (electricity) (values :pollution :fake-gold)) ;)
[14:27:55] <SR-71> That would be a blast
[14:28:20] <SR-71> At least I would have a reason to implement my own P2P network.
[14:29:28] <moon-child> SR-71: because cryptocurrencies tend to have detrimental effects on society, including extreme electricty use, vector for fascism, etc.
[14:29:42] <moon-child> this includes those which were made 'just for fun', such as dogecoin
[14:29:53] <moon-child> which, fwiw, has been disavowed by its creator for those exact reasons
[14:29:59] *** Quits: pillton (~user@203.221.110.253) (Quit: ERC (IRC client for Emacs 27.2))
[14:30:20] <jackdaniel> I've at least put a common lisp code to mask the political statement - some effort please
[14:30:31] <SR-71> moon-child: Not to mention laundering and theft.
[14:31:28] <SR-71> I was looking for a reason to implement my own P2P server and client... any reason.
[14:31:52] <moon-child> it's hardly p2p if there is a server and separately a client :)
[14:31:53] <jackdaniel> implement a torrent server, it will be useful for sharing data
[14:31:56] <moon-child> anyway make an irc server
[14:32:35] <SR-71> But, but there are already many.
[14:32:50] <moon-child> I guarantee you there are more cryptocurrencies than irc servers
[14:32:56] <moon-child> and none of the latter are in lisp
[14:33:03] <SR-71> Oh really
[14:33:09] <SR-71> That would be intresting
[14:34:16] <moon-child> *is
[14:35:31] <SR-71> An irc server in lisp, i wonder what would we call it?
[14:35:39] <jackdaniel> ircl
[14:35:40] <SR-71> ParenChat..
[14:37:57] <SR-71> Or maybe something recursive
[14:38:17] <SR-71> Like they did for Gnu and Linux
[14:39:24] <edgar-rft> probably INTERNET-RELAY-CHAT-SERVER :-)
[14:39:33] <SR-71> Yeah
[14:39:57] <SR-71> That sounds appropriate.
[14:40:26] <SR-71> But there should be some lispiness
[14:40:57] <SR-71> like, maybe *INTERNET-RELAY-CHAT-SERVER*
[14:41:37] <edgar-rft> that wold be more the name of a special variable
[14:41:47] <SR-71> Yeah, that would look ugly
[14:42:13] <SR-71> why not cl-irc
[14:42:22] <SR-71> Wait
[14:42:48] <SR-71> That's more like a channel name
[14:43:01] <rotateq> there is a system named cl-irc
[14:43:35] <SR-71> It's a IRC client liabrary
[14:44:30] <SR-71> *an
[14:44:36] *** Joins: attila_lendvai (~alendvai@catv-89-132-245-188.catv.fixed.vodafone.hu)
[14:48:39] *** Joins: random-nick (~random-ni@87.116.167.125)
[14:50:22] *** Quits: mepy (~mepy@37.100.156.164) (Ping timeout: 272 seconds)
[15:09:37] *** Joins: lisp123 (~lisp123@5.30.23.247)
[15:14:03] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 252 seconds)
[15:16:40] *** Joins: patrice (~patrice@user/patrice)
[15:21:12] *** Quits: cosimone (~user@93-44-187-99.ip98.fastwebnet.it) (Ping timeout: 252 seconds)
[15:22:26] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[16:01:53] *** Joins: blacked (~blacked@user/blacked)
[16:01:54] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 252 seconds)
[16:03:56] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[16:04:47] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca)
[16:07:49] <Shinmera> I'm working on a 3d animation library this week, so I can hopefully finally import rigged models and fun stuff like that.
[16:08:06] <Shinmera> or, maybe not library, but just a part of Trial.
[16:12:31] *** Joins: s-liao (~s-liao@101.86.96.21)
[16:15:55] <mfiano> Yeah, I think such a system would be too coupled to many other facets of an engine to be in any generally useful library form.
[16:16:32] <mfiano> Maybe it could be done with a lot of thought, but I don't think that is what you want to be spending your time on when you have a game to make :)
[16:16:43] <Shinmera> I'm on holidays
[16:17:19] <Shinmera> but I probably won't bother, not because it's a hard challenge, but because I estimate even if I did do it people wouldn't actually use it.
[16:17:33] *** Joins: Brucio-61 (~Brucio-67@2001:638:504:20e6:6ac3:87e0:e782:f3fc)
[16:17:42] * mfiano spent a good few months designing an animation system that didn't even try to be generally useful.
[16:20:31] <mfiano> Shinmera: I liked my "action list"-based animation system the best out of the few I tried. Have you looked into it before?
[16:20:40] <Shinmera> yeah
[16:21:20] <mfiano> Good, it just required a doubly-linked list and some creativity, instead of a full state machine with bugs galore.
[16:21:23] *** Quits: clos-encounters (user@2600:3c00::f03c:92ff:fe19:3350) (Remote host closed the connection)
[16:21:44] <Shinmera> to be clear I'm not talking about a system to handle transitions between animations or queueing and all that (yet). I'm talking about the low level stuff of getting a rigged model to work.
[16:22:31] <mfiano> Ah fair enough. Luckily glTF handles most of that
[16:22:41] <Shinmera> it "handles" storage
[16:22:47] <Shinmera> which is the small part.
[16:24:54] <mfiano> I see what you mean. Especially if you are integrating it with your physics subsystem.
[16:25:23] <Shinmera> Wish I had one of those
[16:28:35] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[16:30:09] *** Joins: notzmv (~zmv@user/notzmv)
[16:31:35] *** Joins: s-liao (~s-liao@101.86.96.21)
[16:49:46] *** blacked is now known as pingpongball
[17:07:21] *** Quits: MajorBiscuit (~MajorBisc@c-001-001-032.client.tudelft.eduvpn.nl) (Ping timeout: 252 seconds)
[17:11:38] *** Joins: MajorBiscuit (~MajorBisc@2a02:a461:129d:1:193d:75d8:745d:e91e)
[17:14:05] *** Quits: patrice (~patrice@user/patrice) (Quit: Leaving)
[17:14:59] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Ping timeout (120 seconds))
[17:15:00] *** Joins: yewscion (~yewscion@52.94.133.128)
[17:17:31] *** Joins: s-liao (~s-liao@101.86.96.21)
[17:18:50] *** Quits: s-liao (~s-liao@101.86.96.21) (Client Quit)
[17:19:47] *** Joins: s-liao (~s-liao@101.86.96.21)
[17:19:55] *** Quits: s-liao (~s-liao@101.86.96.21) (Client Quit)
[17:28:22] *** Quits: pingpongball (~blacked@user/blacked) (Quit: Client closed)
[17:39:45] *** Joins: lisp123 (~lisp123@91.74.79.178)
[17:43:34] *** Quits: lisp123 (~lisp123@91.74.79.178) (Client Quit)
[17:53:33] *** Quits: random-nick (~random-ni@87.116.167.125) (Ping timeout: 252 seconds)
[17:54:39] *** Joins: patrice (~patrice@user/patrice)
[17:55:20] *** hobo_ is now known as hobo
[17:58:20] <mfiano> If I set :adjustable t :fill-pointer t, is it mandated that implementations must set the fill pointer to the length of the array?
[17:58:43] <phoe> clhs make-array
[17:58:43] <specbot> http://www.lispworks.com/reference/HyperSpec/Body/f_mk_ar.htm
[17:58:51] <phoe> "If fill-pointer is t, the length of the vector is used to initialize the fill pointer."
[17:59:04] <phoe> seems that it is required, yes
[18:01:15] *** Quits: Brucio-61 (~Brucio-67@2001:638:504:20e6:6ac3:87e0:e782:f3fc) (Ping timeout: 252 seconds)
[18:01:43] <mfiano> Thank you
[18:03:48] *** Quits: MajorBiscuit (~MajorBisc@2a02:a461:129d:1:193d:75d8:745d:e91e) (Ping timeout: 240 seconds)
[18:05:43] *** Joins: random-nick (~random-ni@87.116.181.150)
[18:05:58] *** Joins: MajorBiscuit (~MajorBisc@c-001-001-032.client.tudelft.eduvpn.nl)
[18:06:12] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 252 seconds)
[18:08:35] *** Joins: mepy (~mepy@37.100.156.164)
[18:10:00] *** Joins: treflip (~user@user/treflip)
[18:11:04] *** Joins: pjb (~pjb@user/pjb)
[18:19:15] *** Quits: rotateq (~user@ip-078-094-235-194.um19.pools.vodafone-ip.de) (Remote host closed the connection)
[18:20:56] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[18:23:53] *** Quits: scymtym (~user@2001:638:504:20e6:6ac3:87e0:e782:f3fc) (Ping timeout: 250 seconds)
[18:24:12] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[18:24:45] *** Quits: attila_lendvai (~alendvai@catv-89-132-245-188.catv.fixed.vodafone.hu) (Ping timeout: 250 seconds)
[18:26:29] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[18:28:14] *** Quits: yewscion (~yewscion@52.94.133.128) (Ping timeout: 272 seconds)
[18:35:42] *** Joins: Bike (~Glossina@71.69.170.70)
[18:41:17] *** Quits: igemnace (~ian@user/igemnace) (Quit: WeeChat 3.4)
[18:50:31] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca) (Ping timeout: 256 seconds)
[18:51:13] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca)
[18:52:40] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca) (Remote host closed the connection)
[18:56:23] <dieggsy> I have an implementation/performance question: https://paste.dieggsy.com/2022-02-15T10:23:41 the first of these is *HEAPS* faster in allegro CL for a fairly expensive key-fn, even though they produce the same result. is allegro's implementation of remove-duplicates inefficient somehow, or am i missing a way in which these aren't equivalent
[18:57:05] *** Joins: scymtym (~user@ip-094-114-248-079.um31.pools.vodafone-ip.de)
[18:58:51] *** Joins: kevingal (~quassel@37.228.202.92)
[18:59:17] <phoe> dieggsy: could you post some benchmarks as well?
[19:01:25] <Guest74> they aren't equivalent in that one is working on a list where the function has already been applied.
[19:01:46] <Bike> let's see, it could optimize :key #'car, it could be inlining key-fn
[19:02:00] <Bike> i recently found out allegro has this feature that might help https://franz.com/support/documentation/10.0/doc/compiling.htm#decl-help-1
[19:02:53] <Bike> this being faster surprises me, though. i'd like to know how that is done
[19:03:00] <dieggsy> Guest74: right, i suppose i meant equivalent from a functional standpoint as in is fast-filter guaranteed to produce the same results as slow-filter
[19:03:45] <Bike> oh, or i guess it could just be remove-duplicates calling the key O(n2) times, if that's allowed
[19:04:12] <Bike> yeah, that could be it.
[19:04:27] <phoe> dieggsy: just a random question - you did COMPILE both functions, right?
[19:04:40] <phoe> asking because Allegro also has an interpreter, it seems
[19:04:52] *** Joins: Oladon (~olad@98.43.81.226)
[19:05:16] <dieggsy> phoe: I ran sly-compile-defun on both
[19:05:30] <Bike> yeah i just tried on sbcl, and for remove-duplicates on a nine-element list, the key is called forty times
[19:05:40] <Bike> something similar could be happening on allegro
[19:06:34] <dieggsy> phoe: here's a benchmark - real  results but the calls were replaced with my example  names https://paste.dieggsy.com/2022-02-15T10:35:40
[19:06:45] <Bike> you could check on allegro with something like (let ((count 0)) (remove-duplicates whatever :key (lambda (x) (incf count) x)) count)
[19:06:46] <Guest74> that's too bad. I kinda like key
[19:07:18] <Bike> i suppose the consideration is that usually, the key is something cheap like car, and to avoid calling the key too many times you kind of need to cons up some kind of intermediate structure
[19:07:25] <dieggsy> Bike: cool idea
[19:07:34] <Bike> and doing so is more expensive than repeatedly calling the key, for a cheap key
[19:08:27] <Guest74> makes note to always use cheap keys.
[19:08:44] *** Quits: Guest74 (~Guest74@modemcable110.164-177-173.mc.videotron.ca) (Quit: Connection closed)
[19:09:16] <dieggsy> Bike: yeah, called 123630 times on a 896-element list lol
[19:09:18] <Bike> i mean, look at what you're doing here - to avoid calling the key so many times, you cons up, what, three times the input list?
[19:09:31] <Bike> three more times, i mean
[19:09:51] <Bike> unless the key is pretty expensive, that's not going to be worthwhile
[19:09:59] <Bike> (in this case it obviously is worthwhile)
[19:10:02] <dieggsy> Oh, I see
[19:10:33] <dieggsy> so this is a memory/speed tradeoff?
[19:10:58] <phoe> yes
[19:11:09] <phoe> or rather, more like memory/time tradeoff
[19:11:21] <dieggsy> right
[19:11:22] <phoe> because "speed" is relative
[19:11:56] <dieggsy> absolutely
[19:11:57] <Bike> pretty much. remove-duplicates without consing means comparing every element against every other element, for O(n2) comparisons. if you cons up a cache or other structure you can reduce that, but then you're consing
[19:12:00] <phoe> for an expensive key function, you'll want to pre-cons the result list to avoid quadratic explosion in terms of calling the key function
[19:12:03] *** Joins: Guest74 (~Guest74@modemcable110.164-177-173.mc.videotron.ca)
[19:13:07] *** Joins: jealousmonk (~user@user/jealousmonk)
[19:13:11] <Bike> that said, i'm a little surprised allegro doesn't go to some other strategy
[19:13:47] <Bike> oh but i guess with a key it's hard to do that maybe
[19:13:48] <Bike> hrm
[19:14:03] <dieggsy> yeah, the real issue here is why my key is so darn expensive lmao
[19:14:14] <Bike> sbcl uses a hash table on long lists, but only with no key and a test that's a hash table test
[19:14:16] <phoe> what is your key?
[19:15:50] <dieggsy> phoe: it's bad, it does a (potentially very large) list lookup . i think we should probably implement that as a hash table in the first place but that's. maybe a bit out of my control ATM. .... maybe not. separate ticket in any case lol
[19:16:36] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[19:16:48] <phoe> oof
[19:18:50] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[19:24:15] <dieggsy> phoe: ha, nevermind, it's 100% my fault that it's a list lookup in the first place in this case (what idiot implemented this as a list? - oh)
[19:25:24] *** Quits: alvaro121_ (~aa@201.230.126.66) (Ping timeout: 252 seconds)
[19:26:25] *** Joins: alvaro121 (~aa@201.230.126.66)
[19:33:37] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca)
[19:36:38] *** Quits: hhdave (~hhdave@ip212.ip-193-70-71.eu) (Ping timeout: 272 seconds)
[19:39:46] *** Joins: hhdave (~hhdave@ip212.ip-193-70-71.eu)
[19:42:20] *** Quits: Cymew (~ante@c-0c87225c.023-1144-7570702.bbcust.telenor.se) (Ping timeout: 272 seconds)
[19:44:02] *** Quits: megeve (sid523379@id-523379.hampstead.irccloud.com) (Ping timeout: 240 seconds)
[19:46:17] *** Joins: megeve (sid523379@id-523379.hampstead.irccloud.com)
[19:57:30] *** Quits: patrice (~patrice@user/patrice) (Quit: Leaving)
[20:00:18] *** Joins: karlosz (~karlosz@47.151.136.69)
[20:16:04] *** Joins: attila_lendvai (~alendvai@2a02:ab88:3710:7c80:9130:5abf:96b3:dc0c)
[20:18:32] *** Joins: rotateq (~user@p200300e78706a00050f72feb644e2401.dip0.t-ipconnect.de)
[20:26:44] *** Quits: Algernon69 (~Algernon6@2a04:cec0:10e7:dc05:2180:3a97:1dd6:a138) (Read error: Connection reset by peer)
[20:26:49] *** Joins: Algernon91 (~Algernon6@2a01:e0a:511:6ce0:bda6:104a:ade:e341)
[20:36:54] *** Quits: karlosz (~karlosz@47.151.136.69) (Ping timeout: 252 seconds)
[20:38:35] *** Quits: Guest74 (~Guest74@modemcable110.164-177-173.mc.videotron.ca) (Quit: Connection closed)
[20:39:06] *** Quits: Algernon91 (~Algernon6@2a01:e0a:511:6ce0:bda6:104a:ade:e341) (Ping timeout: 252 seconds)
[20:45:23] *** Joins: silasfox (~sbv@p4fe8dbf5.dip0.t-ipconnect.de)
[20:52:37] *** Quits: SR-71 (~user@user/SR-71) (Remote host closed the connection)
[20:54:41] *** Joins: serbest (~ike@user/serbest)
[20:57:15] *** Quits: eugercek (~user@user/eugercek) (Ping timeout: 252 seconds)
[20:58:59] *** Joins: Algernon91 (~Algernon6@2a01:e0a:511:6ce0:bda6:104a:ade:e341)
[20:59:27] *** Joins: cage (~cage@94-39-220-187.adsl-ull.clienti.tiscali.it)
[21:01:39] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[21:01:43] *** Joins: Algernon666 (~Algernon6@2a04:cec0:10e7:dc05:9dc4:6bda:33eb:c5e)
[21:05:30] *** Quits: Algernon91 (~Algernon6@2a01:e0a:511:6ce0:bda6:104a:ade:e341) (Ping timeout: 252 seconds)
[21:14:07] *** Quits: MajorBiscuit (~MajorBisc@c-001-001-032.client.tudelft.eduvpn.nl) (Quit: WeeChat 3.4)
[21:18:44] *** Joins: alvaro121_ (~aa@201.230.126.66)
[21:19:42] *** Joins: Oladon (~olad@98.43.81.226)
[21:22:24] *** Quits: alvaro121 (~aa@201.230.126.66) (Ping timeout: 272 seconds)
[21:28:33] *** Joins: alvaro121 (~aa@201.230.126.66)
[21:29:42] *** Quits: alvaro121_ (~aa@201.230.126.66) (Ping timeout: 252 seconds)
[21:29:44] *** Quits: Catie (~user@user/catie) (Remote host closed the connection)
[21:31:51] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Remote host closed the connection)
[21:32:08] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[21:36:32] <ecraven> does anyone here know of any sort of study or comparison of what "big enough" is for fixnum size? is there an actual difference in practical applications between 50 bit fixnums and 62 bit fixnums, for example?
[21:43:31] *** Joins: VincentVega (~user@212.97.1.15)
[21:47:44] *** Quits: amb007 (~a_bakic@9.38.22.93.rev.sfr.net) (Ping timeout: 272 seconds)
[21:48:03] *** Joins: amb007 (~a_bakic@172.39.22.93.rev.sfr.net)
[21:52:01] *** Quits: serbest (~ike@user/serbest) (Quit: Konversation terminated!)
[21:53:20] *** Quits: mzan (~quassel@mail.asterisell.com) (Quit: No Ping reply in 180 seconds.)
[21:54:46] *** Joins: mzan (~quassel@mail.asterisell.com)
[21:55:46] *** Joins: alvaro121_ (~aa@201.230.126.66)
[21:56:36] *** Quits: alvaro121 (~aa@201.230.126.66) (Ping timeout: 240 seconds)
[22:01:56] <dieggsy> ecraven: i wouldn't have an answer anyway, but i don't understand the question
[22:02:10] <dieggsy> big enough for what
[22:02:37] *** Joins: lisp123 (~lisp123@87.201.179.114)
[22:03:00] *** Quits: treflip (~user@user/treflip) (Quit: good night)
[22:05:00] <ecraven> if I ran a few "typical" programs (yes, it's own problem) with 52 bit fixnums and then again with 62 bit fixnums, would there be a noticable difference?
[22:05:08] <ecraven> do programs actually *use* integers of the larger size?
[22:08:01] <jackdaniel> say that you simulate a population growth (let's assume that the planet is a tad bigger)
[22:08:24] <jackdaniel> then you pretty quickly hit the limit of the fixnum (if your simulation assumes an exponential growth)
[22:08:45] <jackdaniel> then you simulate n planets and then wars between these demi-aliens
[22:09:21] <ecraven> yea, but will that not hit bignums anyway?
[22:09:25] <jackdaniel> or, to scale it down, you may simulate some kind of molecule interactions, also quite a big numbers
[22:10:13] <jackdaniel> let's say that number of rabbits doubles each year
[22:10:21] <jackdaniel> how many rabits will you have after 1 century?
[22:10:25] <jackdaniel> (expt 2 100)
[22:10:30] <jackdaniel> (fixnump *) ; -> NIL
[22:11:26] <jackdaniel> dieggsy question was on point - that /depends on the application/
[22:11:57] <jackdaniel> you can't represent ipv6 in a fixnum
[22:12:25] *** Joins: ldb (~user@user/ldb)
[22:12:30] <Bike> also, it's probably not application dependent in a way that makes averaging over applications reasonable.
[22:12:59] <Bike> like maybe it matters a lot for one kind of program but not for another kind
[22:13:06] <ecraven> yea, the question probably makes no sense... so you either get immediate doubles (which is nice), or immediate larger fixnums (which is nice), but never both ;) [unless you have a good unboxing compiler] ;)
[22:13:08] *** Quits: Algernon666 (~Algernon6@2a04:cec0:10e7:dc05:9dc4:6bda:33eb:c5e) (Read error: Network is unreachable)
[22:13:14] <jackdaniel> right, if you count records in a database then a fixnum is plenty
[22:13:19] <jackdaniel> 62bit*
[22:13:40] <jackdaniel> it is hard to make a double immediate
[22:13:42] *** Joins: waleee (~waleee@h-98-128-229-110.NA.cust.bahnhof.se)
[22:13:45] <ecraven> with nan-boxing?
[22:13:57] <ecraven> wouldn't it be immediate by default?
[22:14:00] <jackdaniel> double-float has 64bit, single-float has 32bit
[22:14:30] <Bike> you'd still need a tag to differentiate doubles from pointers
[22:14:30] <jackdaniel> an immediate object requires a few bits shaved to annotate a type
[22:14:34] <ldb> common lisp "by default" uses single-float
[22:15:06] <jackdaniel> that's why fixnum usually is 61 or 62 bits
[22:15:12] <jackdaniel> (and not 64)
[22:15:14] <ecraven> jackdaniel: nan-boxing puts all non-double values into the NaN space (which gives you at most 51 bits, I think)
[22:15:25] <ecraven> but you have immediate doubles, as a trade-off ;)
[22:15:35] <jackdaniel> I see, I'll read about this -thanks
[22:15:43] <phoe> so that's 51 bits for both tag and address
[22:15:51] <Bike> even pointers, huh. well i guess you don't usually use the whole address space.
[22:16:17] <phoe> also your pointers can be always aligned, that saves a few bits
[22:16:39] <ecraven> phoe: that depends.. you have 52 bits (you lose 11 for the exponent and one for quiet/signaling). so you take 1 bit to signify fixnums.. then you have 50 bits left for pointers (which is enough, given virtual memory has 48 bits at most for now) and characters and everything else
[22:16:45] <jackdaniel> phoe: what do you mean?
[22:17:20] <ecraven> as far as I understand, on arm and x86_64 only 48 bits of virtual memory are only ever used (though there are 56 bit extensions, but nobody uses them so far, I think?)
[22:17:48] <phoe> jackdaniel: if your objects must be aligned to 8 bytes in RAM, then the three lower bits of your pointer must be always 0 - unless I misunderstand something, which is possible
[22:17:51] <phoe> I rarely go this low-level
[22:18:04] <phoe> you can use these always-zero bits for tags or something
[22:18:12] <jackdaniel> phoe: yes, that's what makes immediate types possible - but they are aligned without doing anything
[22:18:21] <jackdaniel> last few bits are simply zeroed
[22:18:44] <Bike> i think all phoe meant was that if you want to stuff your pointer into 51 bits, you at least don't need to store the last few bits, so it's only 61 bits into 51
[22:19:50] <phoe> if all pointers are is represented like #b...000, then you can shift it right by three and not lose information
[22:19:51] <jackdaniel> ah, but why would you stuff a pointer into a pointer? that would be actually explicitly indirect
[22:19:53] <phoe> so what Bike said
[22:21:21] <jackdaniel> i.e there is no need to make a pointer an immediate type because the pointer itself (when you have it) is by definition immediate
[22:22:01] <attila_lendvai> Xach, is there something that is holding back the cffi version in ql? it's almost 3 years old (unless i'm misreading something).
[22:23:04] <attila_lendvai> well, something must be off. i see cffi_0.24.1 on guicklisp.org
[22:23:51] *** Quits: amb007 (~a_bakic@172.39.22.93.rev.sfr.net) (Read error: Connection reset by peer)
[22:24:13] *** Joins: amb007 (~a_bakic@102.215.76.86.rev.sfr.net)
[22:26:01] *** Parts: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1) (Error from remote client)
[22:26:55] * jackdaniel also sees 0.24.1 in his (recently updated) dists
[22:28:15] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca) (Remote host closed the connection)
[22:29:34] *** Joins: Catie (~user@user/catie)
[22:33:08] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Remote host closed the connection)
[22:33:30] <attila_lendvai> FTR, i needed an even newer patch than that, and thus my local checkout was shadowing ql, which then didn't fetch anything recent
[22:33:43] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[22:34:10] *** Joins: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1)
[22:34:58] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[22:35:00] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[22:35:36] *** Joins: akoana (~ah@user/akoana)
[22:35:39] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[22:41:08] *** Quits: lisp123 (~lisp123@87.201.179.114) (Remote host closed the connection)
[22:59:56] *** Quits: ldb (~user@user/ldb) (Ping timeout: 272 seconds)
[23:01:41] *** Joins: ldb (~user@user/ldb)
[23:02:02] *** Joins: Algernon666 (~Algernon6@2a01:e0a:511:6ce0:fcb0:9ced:a8db:5d63)
[23:02:11] <jcowan> Bike: You don't, actually; you put the pointers in the range of signaling NaNs.
[23:02:26] <Bike> don't what
[23:02:49] <jcowan> Need a tag to discriminate pointers from double floats.
[23:02:59] <Bike> oh. yeah i figured that out a few lines past that
[23:03:11] <jcowan> woops, sorry
[23:03:16] <Bike> i'm slow sometimes
[23:04:32] <jcowan> However, it makes sense for pointer-heavy languages to rotate the results so that the pointers have all high bits 0.  YOu need to unrotate for floats, but that is cheap.  (In double-heavy languages like JS, you don't have that problem.)
[23:06:30] *** Quits: Algernon666 (~Algernon6@2a01:e0a:511:6ce0:fcb0:9ced:a8db:5d63) (Ping timeout: 252 seconds)
[23:09:46] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[23:10:54] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 252 seconds)
[23:12:27] *** Lord_of_Life_ is now known as Lord_of_Life
[23:12:59] *** Joins: iamFIREcracker (~iamFIREcr@user/iamfirecracker)
[23:14:45] *** Quits: iamFIREc1 (~iamFIREcr@user/iamfirecracker) (Ping timeout: 252 seconds)
[23:17:22] *** Quits: ldb (~user@user/ldb) (Quit: ERC (IRC client for Emacs 27.2))
[23:23:57] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca)
[23:24:13] *** Joins: kevingal_ (~quassel@2a02:8084:4140:f300:e526:add5:5095:49c1)
[23:25:18] *** Joins: ahlk (~user@2600:1700:31c0:3a10::43)
[23:41:47] *** Quits: waleee (~waleee@h-98-128-229-110.NA.cust.bahnhof.se) (Ping timeout: 256 seconds)
[23:44:41] *** Quits: specbot (~specbot@common-lisp.net) (Remote host closed the connection)
[23:44:42] *** Quits: minion (~minion@common-lisp.net) (Read error: Connection reset by peer)
[23:45:41] *** Joins: minion (~minion@common-lisp.net)
[23:45:45] *** Joins: specbot (~specbot@common-lisp.net)
[23:47:33] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Remote host closed the connection)
[23:47:49] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[23:48:48] <Xach> attila_lendvai: i use (ql:where-is-system "cffi") to discover such issues sometimes
[23:49:07] * attila_lendvai makes notes
[23:49:16] <Xach> it will show local-projects, or (even scarier) /usr/share/common-lisp-controller/..., or the quicklisp dist paths
[23:49:29] <ecraven> jcowan: so are lisps pointer-heavy or double-heavy? or should fixnums be favoured over either :-/
[23:50:24] <attila_lendvai> uhh, clc?! that monster is still around, terrorizing lispers? :)
[23:53:27] <Xach> a nightmare from the past
[23:54:08] *** Joins: waleee (~waleee@h-98-128-229-110.NA.cust.bahnhof.se)
[23:54:13] *** Joins: morganw (~user@80.225.24.132)
[23:55:00] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
