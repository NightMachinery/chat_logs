[00:01:18] *** Quits: amb007 (~a_bakic@80.196.204.77.rev.sfr.net) (Ping timeout: 260 seconds)
[00:01:20] *** Joins: ees-mobile (~ees-mobil@pool-108-18-30-46.washdc.fios.verizon.net)
[00:01:39] *** Joins: amb007 (~a_bakic@102.215.76.86.rev.sfr.net)
[00:03:45] *** Quits: GNUHacker (~foobar@fsf/member/GNUHacker) (Quit: q)
[00:14:11] *** Quits: shka (~herr@83.175.151.96.piasta.pl) (Ping timeout: 264 seconds)
[00:19:24] *** Quits: gxt (~gxt@gateway/tor-sasl/gxt) (Remote host closed the connection)
[00:19:53] *** Joins: gxt (~gxt@gateway/tor-sasl/gxt)
[00:27:00] *** Joins: X-Scale` (~ARM@165.201.137.78.rev.vodafone.pt)
[00:27:26] *** Quits: X-Scale (~ARM@46.50.4.208) (Ping timeout: 260 seconds)
[00:28:07] *** Joins: srhm (~srhm@user/srhm)
[00:28:38] *** X-Scale` is now known as X-Scale
[00:34:25] *** Quits: karlosz (~karlosz@47.151.136.69) (Quit: karlosz)
[00:35:11] *** Quits: ym (~ym@5.143.220.3) (Ping timeout: 264 seconds)
[00:40:13] *** Quits: tyson2 (~user@cpe3497f6b5e860-cmbc4dfbbe6670.sdns.net.rogers.com) (Remote host closed the connection)
[00:46:47] *** Quits: monkey_ (~user@190.104.116.153) (Remote host closed the connection)
[00:51:03] *** Quits: azimut_ (~azimut@gateway/tor-sasl/azimut) (Ping timeout: 276 seconds)
[00:52:22] *** Quits: srhm (~srhm@user/srhm) (Ping timeout: 268 seconds)
[00:53:59] *** Joins: monkey_ (~user@190.104.116.153)
[01:02:26] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[01:03:22] *** Quits: X-Scale (~ARM@165.201.137.78.rev.vodafone.pt) (Ping timeout: 260 seconds)
[01:05:51] *** Joins: MarsIronPI (~user@173-27-138-63.client.mchsi.com)
[01:07:23] *** Joins: X-Scale (~ARM@83.223.243.66)
[01:07:34] *** Quits: shidima (~shidima@84-104-108-90.cable.dynamic.v4.ziggo.nl) (Ping timeout: 260 seconds)
[01:24:32] *** Quits: z3t0 (~z3t0@146.71.14.98) (Ping timeout: 240 seconds)
[01:27:08] *** Joins: oxum (~oxum@122.172.47.114)
[01:28:26] *** Joins: AquaticBoy (~AquaticBo@li1424-88.members.linode.com)
[01:28:52] *** Quits: strajder (~strajder@user/strajder) (Quit: leaving)
[01:29:43] *** Joins: holycow (~rtaylor@69-172-184-139.cable.teksavvy.com)
[01:30:31] *** Joins: poselyqualityles (~poselyqua@user/poselyqualityles)
[01:32:11] *** Quits: oxum (~oxum@122.172.47.114) (Ping timeout: 264 seconds)
[01:32:42] *** Joins: z3t0 (~z3t0@146.71.14.98)
[01:32:51] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[01:38:50] *** Quits: deltab (~deltab@user/deltab) (Ping timeout: 260 seconds)
[01:39:46] *** Quits: shicz2 (~shicz@123.103.9.7) (Ping timeout: 260 seconds)
[01:40:09] *** Joins: shicz2 (~shicz@123.103.9.7)
[01:40:15] *** Quits: poselyqualityles (~poselyqua@user/poselyqualityles) (Ping timeout: 256 seconds)
[01:44:08] *** Quits: monkey_ (~user@190.104.116.153) (Quit: ERC (IRC client for Emacs 27.2))
[01:45:33] *** Quits: AquaticBoy (~AquaticBo@li1424-88.members.linode.com) (Quit: My MacBook Air has gone to sleep. ZZZzzzâ€¦)
[01:47:14] *** Quits: Mooncairn (~mooncairn@user/mooncairn) (Ping timeout: 260 seconds)
[01:49:34] *** Quits: mononote (~mononote@user/mononote) (Read error: Connection reset by peer)
[01:49:55] *** Joins: deltab (~deltab@user/deltab)
[01:50:33] *** Quits: theruran (uid11305@hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[02:08:39] *** Joins: tfeb (~tfb@88.98.95.237)
[02:09:39] *** tfeb is now known as tfb
[02:15:35] *** Quits: tfb (~tfb@88.98.95.237) (Quit: died)
[02:16:52] *** Joins: kadir (~kadir@78.178.105.36)
[02:17:47] *** Quits: sjl (~sjl@cpe-66-66-5-59.rochester.res.rr.com) (Quit: WeeChat 2.2-dev)
[02:20:10] *** Quits: peterhil_ (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi) (Quit: Leaving)
[02:20:22] *** Joins: peterhil (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi)
[02:20:44] *** Joins: Mooncairn (~mooncairn@user/mooncairn)
[02:26:47] *** Joins: xgqt_ (~user@static62133140007.ostnet.pl)
[02:31:02] *** Quits: xgqt (~user@static62133140007.ostnet.pl) (Ping timeout: 268 seconds)
[02:40:02] *** Quits: MarsIronPI (~user@173-27-138-63.client.mchsi.com) (Quit: ERC (IRC client for Emacs 27.1))
[02:43:25] *** Quits: kadir (~kadir@78.178.105.36) (Quit: WeeChat 3.3)
[02:52:27] *** Quits: cosimone (~user@2001:b07:ae5:db26:a7aa:8027:6b4e:2fb3) (Quit: ERC (IRC client for Emacs 27.1))
[03:07:56] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[03:17:02] *** Quits: Jing (~hedgehog@2604:a840:3::1049) (Remote host closed the connection)
[03:17:43] *** Joins: Jing (~hedgehog@2604:a840:3::1049)
[03:45:28] *** Joins: oxum (~oxum@122.172.47.114)
[03:48:51] *** Joins: mononote (~mononote@user/mononote)
[03:51:12] *** Quits: oxum (~oxum@122.172.47.114) (Ping timeout: 268 seconds)
[03:58:15] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[03:58:36] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[03:59:18] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 260 seconds)
[03:59:54] *** Lord_of_Life_ is now known as Lord_of_Life
[04:03:22] *** Quits: Alfr (~Alfr@user/alfr) (Remote host closed the connection)
[04:10:48] *** Joins: Alfr (~Alfr@user/alfr)
[04:11:16] *** Quits: Alfr (~Alfr@user/alfr) (Remote host closed the connection)
[04:14:22] *** Joins: masterbuilder (~user@user/masterbuilder)
[04:29:21] *** xgqt_ is now known as xgqtd
[04:29:31] *** xgqtd is now known as xgqt
[04:30:00] *** Quits: peterhil (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi) (Remote host closed the connection)
[04:30:31] *** Quits: taiju (~taiju@240b:253:ec40:2400:2cdc:1f32:d88a:fa10) (Ping timeout: 245 seconds)
[04:36:21] *** Quits: rgherdt (~rgherdt@2a02:8109:86c0:d8d:f999:7dbf:ab48:5803) (Ping timeout: 245 seconds)
[04:36:32] *** Joins: taiju (~taiju@M014013236064.v4.enabler.ne.jp)
[04:41:40] *** Joins: peterhil (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi)
[04:43:10] *** Quits: random-nick (~random-ni@87.116.176.55) (Ping timeout: 260 seconds)
[04:44:35] *** Joins: rgherdt (~rgherdt@2a02:8109:86c0:d8d:f999:7dbf:ab48:5803)
[04:46:54] *** Quits: taiju (~taiju@M014013236064.v4.enabler.ne.jp) (Ping timeout: 260 seconds)
[04:46:55] *** Quits: peterhil (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi) (Remote host closed the connection)
[04:47:36] *** Joins: peterhil (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi)
[04:50:05] *** Quits: peterhil (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi) (Remote host closed the connection)
[04:50:50] *** Joins: peterhil (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi)
[04:58:51] *** Quits: rgherdt (~rgherdt@2a02:8109:86c0:d8d:f999:7dbf:ab48:5803) (Ping timeout: 245 seconds)
[05:01:05] *** Joins: srhm (~srhm@user/srhm)
[05:18:59] *** Quits: shicz2 (~shicz@123.103.9.7) (Ping timeout: 264 seconds)
[05:20:49] *** Joins: shicz2 (~shicz@123.103.9.7)
[05:26:17] *** Quits: peterhil (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi) (Remote host closed the connection)
[05:38:28] *** Joins: oxum (~oxum@122.172.47.114)
[05:42:06] *** Joins: notzmv (~zmv@user/notzmv)
[05:44:14] *** Quits: oxum (~oxum@122.172.47.114) (Remote host closed the connection)
[05:45:16] *** Joins: oxum (~oxum@122.172.47.114)
[05:47:16] *** Quits: oxum (~oxum@122.172.47.114) (Remote host closed the connection)
[05:48:33] *** Joins: taiju (~taiju@M014013236064.v4.enabler.ne.jp)
[05:50:32] *** Joins: oxum (~oxum@122.172.47.114)
[05:59:59] *** Quits: oxum (~oxum@122.172.47.114) (Remote host closed the connection)
[06:01:04] *** Joins: oxum (~oxum@122.172.47.114)
[06:05:06] *** Quits: srhm (~srhm@user/srhm) (Ping timeout: 245 seconds)
[06:12:18] *** Quits: shicz2 (~shicz@123.103.9.7) (Ping timeout: 260 seconds)
[06:12:41] *** Joins: shicz2 (~shicz@123.103.9.7)
[06:13:03] *** Quits: sander (~sander@user/sander) (Quit: So long! :))
[06:13:38] *** Joins: Spawns_Carpet[m] (~inceptor-@2001:470:69fc:105::1:298b)
[06:15:39] *** Quits: Mooncairn (~mooncairn@user/mooncairn) (Ping timeout: 256 seconds)
[06:15:59] *** Quits: masterbuilder (~user@user/masterbuilder) (Remote host closed the connection)
[06:16:24] *** Joins: sander (~sander@user/sander)
[06:16:39] <Spawns_Carpet[m]> how is 'let' normally implemented by lisp interpreters?
[06:17:36] <moon-child> should an interpreter implement it differently than a compiler?
[06:18:23] *** Quits: ees-mobile (~ees-mobil@pool-108-18-30-46.washdc.fios.verizon.net) (Ping timeout: 264 seconds)
[06:18:24] <moon-child> one obvious expression is:  (defmacro let (bindings &body body) `((lambda ,(mapcar #'car bindings) ,@body) ,@(mapcar #'cadr bindings)))
[06:19:21] <Spawns_Carpet[m]> how are the variables actually stored though 
[06:19:51] <Spawns_Carpet[m]> i am curious if it's common to use stack storage like normal languages do, or late binding
[06:20:01] <Spawns_Carpet[m]> or maybe even something totally different 
[06:20:25] <moon-child> 'late binding' sounds like dynamic scope, which is not commonly used
[06:20:36] <moon-child> parameters are frequently stored in registers or on the stack, yes
[06:21:04] <moon-child> but the actual storage of variables bound in a let is arbitrary.  They may not be stored at all
[06:21:20] <mfiano> SBCL for example will stack allocate them if it can, or if you tell it to and provide enough type information that will allow it to, but SBCL will also register-allocate them, avoiding the stack altogether, if they don't spill that is
[06:21:24] <Spawns_Carpet[m]> that's another thing I was wondering about, I thought dynamic scope would be easier to implement but lexical scope seems to be more common and easier to reason about
[06:22:31] *** Quits: raeda (~raeda@74.215.157.51) (Quit: Leaving)
[06:25:18] <Spawns_Carpet[m]> i might check out SBCL's source code but it's probably going to be far too complex for me to make heads or tails of
[06:25:27] *** Joins: enzuru (~user@ool-45750508.dyn.optonline.net)
[06:25:50] *** Quits: waleee (~waleee@h-98-128-228-119.NA.cust.bahnhof.se) (Quit: WeeChat 3.3)
[06:26:03] *** Quits: oxum (~oxum@122.172.47.114) (Remote host closed the connection)
[06:26:06] <Spawns_Carpet[m]> i'm working on this little tiny lisp-line language and let bindings are the next thing I want to get working 
[06:26:06] <moon-child> terms to look up: closure conversion; lambda lifting; register allocation
[06:26:25] <Spawns_Carpet[m]> thank you for that, finding the right terms can be tough
[06:28:27] *** Joins: oxum (~oxum@122.172.47.114)
[06:30:01] *** Quits: Arwalk (~Arwalk@lfbn-dij-1-10-221.w90-62.abo.wanadoo.fr) (Quit: ZNC 1.8.2 - https://znc.in)
[06:32:06] <mfiano> if a dynamic-extent binding escapes a function, is that like use-after-free in C parlance, or what?
[06:35:54] *** Joins: Codaraxis (~Codaraxis@user/codaraxis)
[06:38:11] *** Joins: peterhil_ (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi)
[06:38:31] *** Quits: oxum (~oxum@122.172.47.114) (Remote host closed the connection)
[06:39:33] *** Joins: oxum (~oxum@122.172.47.114)
[06:44:58] *** Quits: oxum (~oxum@122.172.47.114) (Ping timeout: 260 seconds)
[06:46:33] *** Joins: ees-mobile (~ees-mobil@pool-108-18-30-46.washdc.fios.verizon.net)
[06:54:59] *** Quits: Inline (~Inline@2a02:908:1252:7a80:22ee:92f9:2a07:2e7) (Ping timeout: 264 seconds)
[07:17:10] *** Joins: Alfr (~Alfr@user/alfr)
[07:25:35] *** Quits: renzhi (~xp@2607:fa49:6500:b100::6e7f) (Ping timeout: 264 seconds)
[07:37:47] *** Joins: philb2 (~phil@2603-6011-8e00-012d-e0f2-c64f-5045-8a34.res6.spectrum.com)
[07:40:35] *** Quits: philb2 (~phil@2603-6011-8e00-012d-e0f2-c64f-5045-8a34.res6.spectrum.com) (Read error: Connection reset by peer)
[07:40:53] *** Joins: philb2 (~phil@2603-6011-8e00-012d-e0f2-c64f-5045-8a34.res6.spectrum.com)
[07:41:23] *** Quits: enzuru (~user@ool-45750508.dyn.optonline.net) (Read error: Connection reset by peer)
[07:43:23] *** Quits: philb2 (~phil@2603-6011-8e00-012d-e0f2-c64f-5045-8a34.res6.spectrum.com) (Read error: Connection reset by peer)
[07:43:48] *** Joins: enzuru (~user@ool-45750508.dyn.optonline.net)
[07:46:21] *** Quits: enzuru (~user@ool-45750508.dyn.optonline.net) (Read error: Connection reset by peer)
[07:48:45] *** Joins: enzuru (~user@ool-45750508.dyn.optonline.net)
[07:49:05] *** Joins: philb2 (~phil@2603-6011-8e00-012d-e0f2-c64f-5045-8a34.res6.spectrum.com)
[07:49:07] *** Quits: philb2 (~phil@2603-6011-8e00-012d-e0f2-c64f-5045-8a34.res6.spectrum.com) (Read error: Connection reset by peer)
[07:49:23] *** Joins: philb2 (~phil@2603-6011-8e00-012d-e0f2-c64f-5045-8a34.res6.spectrum.com)
[07:51:29] *** Quits: enzuru (~user@ool-45750508.dyn.optonline.net) (Read error: Connection reset by peer)
[07:51:29] *** Quits: philb2 (~phil@2603-6011-8e00-012d-e0f2-c64f-5045-8a34.res6.spectrum.com) (Read error: Connection reset by peer)
[07:52:23] *** Joins: oxum (~oxum@122.172.47.114)
[07:53:55] *** Joins: enzuru (~user@ool-45750508.dyn.optonline.net)
[07:54:16] *** Quits: enzuru (~user@ool-45750508.dyn.optonline.net) (Remote host closed the connection)
[07:54:19] *** Quits: cognemo (~cognemo@cpe-46-164-24-121.dynamic.amis.net) (Quit: ZNC 1.8.2 - https://znc.in)
[07:54:34] *** Joins: cognemo (~cognemo@cpe-46-164-24-121.dynamic.amis.net)
[07:57:18] *** Quits: oxum (~oxum@122.172.47.114) (Ping timeout: 260 seconds)
[08:15:01] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[08:39:39] *** Joins: oxum (~oxum@122.172.47.114)
[08:41:47] *** Quits: oxum (~oxum@122.172.47.114) (Remote host closed the connection)
[08:54:49] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[09:00:04] *** Parts: pranavats (3fba1d1b34@jabberfr.org) (Disconnected: Replaced by new connection)
[09:04:28] *** Joins: pranavats (3fba1d1b34@jabberfr.org)
[09:07:27] <Spawns_Carpet[m]> What would the something like `(1 2 ,(+ 1 2)) expand to internally by the reader macros?
[09:07:52] <Spawns_Carpet[m]> is there a special operator in lisps that allows for the interpolation in quasiquoted expressions?
[09:08:41] <Spawns_Carpet[m]> i don't think it's possible for it to eval it on the spot, since it might not know what certain symbols mean until the source file has ran
[09:09:44] <Spawns_Carpet[m]> or is it implemented by a macro somehow? somebody else mentioned that it may be possible to actually fully implement quasiquoting in lisp itself
[09:14:11] *** Quits: nature (~nature@45.32.235.173) (Ping timeout: 264 seconds)
[09:17:12] <moon-child> Spawns_Carpet[m]: yes, you might for instance read `x as (quasiquote x) and ,x as (unquote x); where 'quasiquote' is a macro, and 'unquote' is just a symbol that has special meaning to the aforementioned macro
[09:17:57] <Spawns_Carpet[m]> very cool!
[09:18:16] <Spawns_Carpet[m]> the things you can implement inside lisp itself just blows my mind the more I learn
[09:24:25] *** Quits: mattf (~mattf@li908-138.members.linode.com) (Ping timeout: 260 seconds)
[09:32:30] *** Joins: mattf (mattf@2600:3c03::f03c:92ff:fea6:56a4)
[09:34:40] *** Joins: andai (~andai@ip26-92-214-87.adsl2.static.versatel.nl)
[09:43:31] *** Joins: poselyqualityles (~poselyqua@user/poselyqualityles)
[09:58:55] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[10:02:05] *** Quits: peterhil_ (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi) (Remote host closed the connection)
[10:02:18] *** Quits: Jing (~hedgehog@2604:a840:3::1049) (Remote host closed the connection)
[10:02:56] *** Joins: Jing (~hedgehog@125.105.142.73)
[10:03:31] *** Joins: peterhil_ (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi)
[10:16:46] <White_Flame> Spawns_Carpet[m]: if you set *PRINT-PRETTY* to NIL, then you can type stuff at the repl like '`(1 2 ,(+ 1 2)) and see what it's actually made of
[10:16:56] <White_Flame> note quoting the quasiquote expression
[10:17:51] <White_Flame> the quote should retain anything that the reader returns
[10:31:13] *** Quits: jao (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net) (Ping timeout: 256 seconds)
[10:34:05] *** Joins: shidima (~shidima@84-104-108-90.cable.dynamic.v4.ziggo.nl)
[10:41:34] *** Quits: mononote (~mononote@user/mononote) (Ping timeout: 260 seconds)
[10:52:11] *** Quits: poselyqualityles (~poselyqua@user/poselyqualityles) (Ping timeout: 256 seconds)
[10:58:38] <pjb> eg. in CCL:  '`(1 2 ,(+ 1 2)) --> (list* 1 (list* 2 (list (+ 1 2))))
[11:03:18] *** Joins: shka (~herr@83.175.151.96.piasta.pl)
[11:09:59] *** Joins: oxum (~oxum@122.172.47.114)
[11:13:41] <moon-child> oh huh, it does that at read-time
[11:14:31] *** Quits: oxum (~oxum@122.172.47.114) (Remote host closed the connection)
[11:17:54] *** Joins: oxum (~oxum@122.172.47.114)
[11:20:08] *** Quits: oxum (~oxum@122.172.47.114) (Remote host closed the connection)
[11:23:03] *** Joins: oxum (~oxum@136.185.170.109)
[11:28:08] *** Joins: Inline (~Inline@2a02:908:1252:7a80:9763:cc0b:5eaf:ee4)
[11:28:09] *** Quits: oxum (~oxum@136.185.170.109) (Ping timeout: 268 seconds)
[11:28:40] *** Quits: Inline (~Inline@2a02:908:1252:7a80:9763:cc0b:5eaf:ee4) (Remote host closed the connection)
[11:30:14] *** Joins: Inline (~Inline@2a02:908:1252:7a80:9763:cc0b:5eaf:ee4)
[11:34:36] *** Quits: letto (~letto@86.120.85.133) (Quit: Konversation terminated!)
[11:35:13] *** Joins: oxum (~oxum@136.185.170.109)
[11:35:14] *** Joins: letto (~letto@86.120.85.133)
[11:39:16] *** Quits: shicz2 (~shicz@123.103.9.7) (Ping timeout: 245 seconds)
[11:39:33] *** Quits: oxum (~oxum@136.185.170.109) (Remote host closed the connection)
[11:39:47] *** Joins: shicz2 (~shicz@123.103.9.7)
[11:44:20] *** Joins: oxum (~oxum@136.185.170.109)
[11:46:56] *** Quits: letto (~letto@86.120.85.133) (Quit: Konversation terminated!)
[11:47:14] *** Quits: oxum (~oxum@136.185.170.109) (Remote host closed the connection)
[11:49:15] *** Joins: letto (~letto@86.120.85.133)
[11:54:19] *** Joins: ym (~ym@5.143.220.3)
[12:07:35] *** Quits: amk (~amk@109.255.169.126) (Ping timeout: 264 seconds)
[12:08:17] *** Quits: shidima (~shidima@84-104-108-90.cable.dynamic.v4.ziggo.nl) (Remote host closed the connection)
[12:09:59] *** Joins: amk (~amk@109.255.169.126)
[12:17:25] *** Joins: karlosz (~karlosz@47.151.136.69)
[12:18:44] *** Joins: oxum (~oxum@136.185.170.109)
[12:19:16] *** Joins: rain3 (~rain3___@2a02:2f09:d10a:400:9e2f:eb47:e2ae:761d)
[12:23:44] *** Quits: oxum (~oxum@136.185.170.109) (Remote host closed the connection)
[12:26:47] *** Quits: phantomics (~phantomic@71-218-252-43.hlrn.qwest.net) (Quit: Ex-Chat)
[12:29:00] *** Joins: oxum (~oxum@136.185.170.109)
[12:33:51] *** Quits: oxum (~oxum@136.185.170.109) (Ping timeout: 245 seconds)
[12:43:13] *** Quits: karlosz (~karlosz@47.151.136.69) (Quit: karlosz)
[12:48:25] *** Joins: mononote (~mononote@user/mononote)
[12:52:14] *** Joins: strajder (~strajder@user/strajder)
[12:58:38] *** Joins: rgherdt (~rgherdt@2a02:8109:86c0:d8d:f999:7dbf:ab48:5803)
[13:10:51] *** Joins: oxum (~oxum@136.185.170.109)
[13:11:54] *** Quits: Inline (~Inline@2a02:908:1252:7a80:9763:cc0b:5eaf:ee4) (Quit: Leaving)
[13:20:01] *** Quits: oxum (~oxum@136.185.170.109) (Remote host closed the connection)
[13:20:13] *** Joins: oxum (~oxum@136.185.170.109)
[13:30:28] *** Joins: AquaticBoy (~AquaticBo@li1424-88.members.linode.com)
[13:35:01] *** Quits: andreyorst (~andreyors@2.92.126.202) (Quit: WeeChat 3.2)
[13:46:03] *** Joins: Inline (~Inline@2a02:908:1252:7a80:b442:91f8:4666:206e)
[13:54:19] *** Quits: AquaticBoy (~AquaticBo@li1424-88.members.linode.com) (Quit: My MacBook Air has gone to sleep. ZZZzzzâ€¦)
[13:56:18] *** Joins: Arwalk (~Arwalk@lfbn-dij-1-10-221.w90-62.abo.wanadoo.fr)
[13:57:30] *** Quits: shicz2 (~shicz@123.103.9.7) (Ping timeout: 256 seconds)
[13:59:02] *** Joins: shicz2 (~shicz@123.103.9.7)
[14:01:41] *** Joins: fourier (~fourier@customer-89-255-226-149.stosn.net)
[14:02:46] *** Joins: AquaticBoy (~AquaticBo@li1424-88.members.linode.com)
[14:11:30] *** Quits: AquaticBoy (~AquaticBo@li1424-88.members.linode.com) (Quit: My MacBook Air has gone to sleep. ZZZzzzâ€¦)
[14:13:18] *** Joins: AquaticBoy (~AquaticBo@li1424-88.members.linode.com)
[14:31:16] *** Quits: AquaticBoy (~AquaticBo@li1424-88.members.linode.com) (Quit: My MacBook Air has gone to sleep. ZZZzzzâ€¦)
[14:37:44] *** Joins: random-nick (~random-ni@87.116.165.220)
[14:55:33] *** Joins: AquaticBoy (~AquaticBo@li1424-88.members.linode.com)
[14:58:41] *** Joins: xiews (~wxie@101.93.21.97)
[15:00:27] *** Quits: xiews (~wxie@101.93.21.97) (Remote host closed the connection)
[15:03:42] *** Joins: cosimone (~user@2001:b07:ae5:db26:a7aa:8027:6b4e:2fb3)
[15:20:14] *** Quits: shicz2 (~shicz@123.103.9.7) (Ping timeout: 256 seconds)
[15:23:58] *** Joins: shicz2 (~shicz@123.103.9.7)
[15:27:18] *** Quits: cosimone (~user@2001:b07:ae5:db26:a7aa:8027:6b4e:2fb3) (Quit: ERC (IRC client for Emacs 27.1))
[15:34:37] *** Quits: amb007 (~a_bakic@102.215.76.86.rev.sfr.net) (Read error: Connection reset by peer)
[15:34:58] *** Joins: amb007 (~a_bakic@102.215.76.86.rev.sfr.net)
[15:42:58] *** Quits: retropikzel (~retropikz@dsl-trebng22-54f932-93.dhcp.inet.fi) (Remote host closed the connection)
[15:43:24] *** Joins: retropikzel (~retropikz@dsl-trebng22-54f932-93.dhcp.inet.fi)
[15:44:09] *** Quits: AquaticBoy (~AquaticBo@li1424-88.members.linode.com) (Quit: My MacBook Air has gone to sleep. ZZZzzzâ€¦)
[15:48:38] *** Quits: amb007 (~a_bakic@102.215.76.86.rev.sfr.net) (Read error: Connection reset by peer)
[15:48:49] *** Joins: amb007 (~a_bakic@102.215.76.86.rev.sfr.net)
[15:53:05] *** Joins: zap (~zap@gateway/tor-sasl/zap)
[15:53:34] *** Quits: zap (~zap@gateway/tor-sasl/zap) (Client Quit)
[15:54:33] *** Quits: LoopMacro (~LoopMacro@c-24-22-157-127.hsd1.wa.comcast.net) (Ping timeout: 268 seconds)
[15:56:40] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[15:58:35] *** Quits: mtreis (~mtreis@ip68-9-89-162.ri.ri.cox.net) (Ping timeout: 264 seconds)
[15:59:37] *** Joins: Lycurgus (~juan@98.4.112.204)
[16:22:44] *** Quits: madage (~madage@user/madage) (Remote host closed the connection)
[16:24:24] *** Joins: AquaticBoy (~AquaticBo@li1424-88.members.linode.com)
[16:25:19] *** Quits: Lycurgus (~juan@98.4.112.204) (Quit: Exeunt)
[16:25:58] *** Quits: andai (~andai@ip26-92-214-87.adsl2.static.versatel.nl) (Ping timeout: 260 seconds)
[16:28:38] *** Quits: retropikzel (~retropikz@dsl-trebng22-54f932-93.dhcp.inet.fi) (Read error: Connection reset by peer)
[16:28:59] *** Joins: retropikzel (~retropikz@dsl-trebng22-54f932-93.dhcp.inet.fi)
[16:30:56] *** Quits: retropikzel (~retropikz@dsl-trebng22-54f932-93.dhcp.inet.fi) (Remote host closed the connection)
[16:31:08] *** Joins: retropikzel_ (~retropikz@dsl-trebng22-54f932-93.dhcp.inet.fi)
[16:31:13] *** Joins: madage (~madage@user/madage)
[16:31:31] *** Quits: strajder (~strajder@user/strajder) (Quit: leaving)
[16:33:56] *** Joins: poselyqualityles (~poselyqua@user/poselyqualityles)
[16:46:32] *** Joins: azimut_ (~azimut@gateway/tor-sasl/azimut)
[16:47:27] *** Joins: retropikzel__ (~retropikz@dsl-trebng22-54f932-93.dhcp.inet.fi)
[16:47:37] *** Quits: retropikzel_ (~retropikz@dsl-trebng22-54f932-93.dhcp.inet.fi) (Remote host closed the connection)
[16:50:27] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Ping timeout: 276 seconds)
[16:57:10] *** Joins: Nselm (~Nselm@p200300d56f24d76e1321613e2c885dc5.dip0.t-ipconnect.de)
[17:03:36] *** Quits: retropikzel__ (~retropikz@dsl-trebng22-54f932-93.dhcp.inet.fi) (Read error: Connection reset by peer)
[17:05:49] *** Joins: Everything (~Everythin@37.115.210.35)
[17:18:11] *** Joins: mtreis (~mtreis@ip68-9-89-162.ri.ri.cox.net)
[17:27:10] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 256 seconds)
[17:27:24] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[17:37:00] *** Joins: giammi_ (~giammi@62-167-236-20.static.adslpremium.ch)
[17:37:14] *** Quits: shicz2 (~shicz@123.103.9.7) (Remote host closed the connection)
[17:37:20] *** Joins: giammi (~giammi@62-167-236-20.static.adslpremium.ch)
[17:37:40] *** Joins: shicz2 (~shicz@123.103.9.7)
[17:43:36] *** Quits: giammi (~giammi@62-167-236-20.static.adslpremium.ch) (Ping timeout: 256 seconds)
[17:43:36] *** Quits: giammi_ (~giammi@62-167-236-20.static.adslpremium.ch) (Ping timeout: 256 seconds)
[17:49:40] *** Joins: jao (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net)
[17:50:25] *** Quits: AquaticBoy (~AquaticBo@li1424-88.members.linode.com) (Quit: My MacBook Air has gone to sleep. ZZZzzzâ€¦)
[17:53:00] *** Joins: AquaticBoy (~AquaticBo@li1424-88.members.linode.com)
[17:56:36] *** Joins: GNUHacker (~foobar@fsf/member/GNUHacker)
[17:59:37] *** Joins: xiews (~wxie@2409:891e:1802:6a:4ba5:6adf:b8c4:da55)
[18:04:44] *** Quits: gxt (~gxt@gateway/tor-sasl/gxt) (Quit: WeeChat 3.3)
[18:04:44] *** Quits: peterhil_ (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi) (Remote host closed the connection)
[18:06:16] *** Joins: gxt (~gxt@gateway/tor-sasl/gxt)
[18:07:47] *** Quits: xiews (~wxie@2409:891e:1802:6a:4ba5:6adf:b8c4:da55) (Read error: Connection reset by peer)
[18:08:41] *** Joins: xiews (~wxie@2409:891e:1802:6a:4ba5:6adf:b8c4:da55)
[18:09:02] *** Joins: makomo (~makomo@user/makomo)
[18:10:04] *** Quits: jao (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net) (Ping timeout: 265 seconds)
[18:20:09] *** Joins: peterhil_ (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi)
[18:22:17] *** Quits: amb007 (~a_bakic@102.215.76.86.rev.sfr.net) (Read error: Connection reset by peer)
[18:23:31] *** Joins: amb007 (~a_bakic@102.215.76.86.rev.sfr.net)
[18:27:46] *** Quits: taiju (~taiju@M014013236064.v4.enabler.ne.jp) (Ping timeout: 260 seconds)
[18:29:31] *** Joins: taiju (~taiju@M014013236064.v4.enabler.ne.jp)
[18:34:06] *** Quits: oxum (~oxum@136.185.170.109) (Remote host closed the connection)
[18:37:14] *** Quits: AquaticBoy (~AquaticBo@li1424-88.members.linode.com) (Quit: My MacBook Air has gone to sleep. ZZZzzzâ€¦)
[18:38:06] *** Joins: AquaticBoy (~AquaticBo@li1424-88.members.linode.com)
[18:38:37] *** Joins: oxum (~oxum@136.185.170.109)
[18:39:01] *** Quits: AquaticBoy (~AquaticBo@li1424-88.members.linode.com) (Client Quit)
[18:39:44] *** Joins: giammi_ (~giammi@62-167-236-20.static.adslpremium.ch)
[18:41:53] *** Joins: u0_a185 (~u0_a185@2001:ce8:131:5f61:10dc:1015:53d0:c1b3)
[18:43:10] *** Quits: oxum (~oxum@136.185.170.109) (Ping timeout: 260 seconds)
[18:43:41] *** Joins: Guest2 (~Guest2@2001:ce8:131:5f61:10dc:1015:53d0:c1b3)
[18:46:23] *** Joins: gproto23 (~gproto23@user/gproto23)
[18:48:43] *** Joins: Mooncairn (~mooncairn@user/mooncairn)
[18:52:04] *** Quits: Guest2 (~Guest2@2001:ce8:131:5f61:10dc:1015:53d0:c1b3) (Quit: Client closed)
[18:53:02] *** Quits: xiews (~wxie@2409:891e:1802:6a:4ba5:6adf:b8c4:da55) (Remote host closed the connection)
[19:05:34] *** Quits: johnjay (~pi@192.142.100.50) (Ping timeout: 260 seconds)
[19:07:01] *** Joins: johnjay (~pi@192.142.100.50)
[19:10:19] *** Quits: poselyqualityles (~poselyqua@user/poselyqualityles) (Read error: Connection reset by peer)
[19:20:40] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[19:22:21] *** Quits: Nselm (~Nselm@p200300d56f24d76e1321613e2c885dc5.dip0.t-ipconnect.de) (Quit: Client closed)
[19:26:44] *** Quits: johnjay (~pi@192.142.100.50) (Ping timeout: 256 seconds)
[19:27:58] *** Parts: u0_a185 (~u0_a185@2001:ce8:131:5f61:10dc:1015:53d0:c1b3) (WeeChat 3.0.1)
[19:30:29] *** Joins: johnjay (~pi@192.142.100.50)
[19:32:08] *** Joins: phantomics (~phantomic@71-218-252-43.hlrn.qwest.net)
[19:39:16] *** Joins: monkey_ (~user@190.104.116.153)
[19:42:33] *** Joins: tyson2 (~user@bras-base-toroon0628w-grc-46-142-112-141-177.dsl.bell.ca)
[19:42:35] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[19:45:24] *** Joins: robin__ (~robin@user/terpri)
[19:46:35] *** Quits: robin (~robin@user/terpri) (Ping timeout: 264 seconds)
[19:49:10] *** Quits: robin__ (~robin@user/terpri) (Client Quit)
[19:49:27] *** Joins: robin (~robin@user/terpri)
[19:58:01] *** Quits: johnjay (~pi@192.142.100.50) (Ping timeout: 245 seconds)
[20:00:01] *** Joins: johnjay (~pi@192.142.100.50)
[20:00:24] *** Quits: shka (~herr@83.175.151.96.piasta.pl) (Quit: Konversation terminated!)
[20:03:34] *** Joins: shka (~herr@83.175.151.96.piasta.pl)
[20:05:11] *** Quits: johnjay (~pi@192.142.100.50) (Ping timeout: 264 seconds)
[20:06:28] *** Joins: johnjay (~pi@192.142.100.50)
[20:06:52] *** Joins: cosimone (~user@2001:b07:ae5:db26:a7aa:8027:6b4e:2fb3)
[20:10:36] *** Joins: yewscion (~yewscion@72-21-196-65.amazon.com)
[20:15:08] *** Quits: monkey_ (~user@190.104.116.153) (Remote host closed the connection)
[20:17:57] *** Joins: monkey_ (~user@190.104.116.153)
[20:18:37] *** Joins: nature (~nature@45.32.235.173)
[20:18:51] <Spawns_Carpet[m]> another kind of stupid question. does the reader expand 'regular' looking syntax into longer formed dot notation? (1 2 3) vs (1 . (2 . (3 . nil)))
[20:19:51] <Spawns_Carpet[m]> i would like to keep my parser as simple as possible, and I thought expanding everything first would allow me do that
[20:24:20] <amazigh> well, you don't have to stick the spec, especially when it is the first time.
[20:24:58] *** Quits: monkey_ (~user@190.104.116.153) (Remote host closed the connection)
[20:25:16] <Spawns_Carpet[m]> yeah very true, I can always upgrade stuff later on down the line
[20:25:37] <amazigh> fwiw, I rely on an existing reader. The reader should be a simpler as possible but not less; imo, from a reader perspective (1 2 3) is the same as (1 . (2 . (3 . nil)))
[20:26:09] <amazigh> Spawns_Carpet[m]: what kind of lisp do you want to write?
[20:27:03] *** Joins: monkey_ (~user@190.104.116.153)
[20:27:44] *** Quits: Mooncairn (~mooncairn@user/mooncairn) (Ping timeout: 268 seconds)
[20:28:09] <Spawns_Carpet[m]> what reader do you use? I didn't realize there were standalone readers you could use 
[20:28:18] <amazigh> you need to make a difference between (1 2 3) and (1 . (2 . (3 . nil))) if you expect to reproduce the same file like with an automatic formatter.
[20:28:32] <amazigh> I use Chez Scheme reader, I target javascript.
[20:28:44] <amazigh> The compiler is written with Scheme.
[20:28:56] <amazigh> I read some people use json instead of writing a reader.
[20:29:52] <Spawns_Carpet[m]> I don't really have many ideas for what kind of lisp it will be. my main goal is to get all of the most basic features working and go from there
[20:30:03] <amazigh> btw '(1 2 3) is different from (1 2 3); the latter will not work in REPL.
[20:30:11] <Spawns_Carpet[m]> right now it's more of a lispy calculator 
[20:30:24] <amazigh> Did you look at MAL on github?
[20:30:30] <amazigh> what is the host language?
[20:30:54] <Spawns_Carpet[m]> the host language is rust right now, but I have considered moving to OCaml 
[20:31:00] <Spawns_Carpet[m]> what is MAL?
[20:31:12] <amazigh> is it an interpreter or compiler? if a compiler, what is the target?
[20:31:31] <amazigh> MAL is Make A LISP https://github.com/kanaka/mal
[20:31:45] <Spawns_Carpet[m]> interpreter, and it will target a custom bytecode interpreter that I also am working on in parallel 
[20:33:26] <amazigh> There is some decision you must make before starting the bytecode interpreter, such as whether you want a LISP-1 or LISP-2; and whether you want / need call/cc
[20:33:37] <amazigh> I think.
[20:34:09] <amazigh> I mean, elders have said you need a good knowledge of the target, but I add, you need good knowledge of the object language.
[20:34:52] <makomo> Spawns_Carpet[m]: what would "expand" mean in this context though?
[20:36:26] *** Quits: giammi_ (~giammi@62-167-236-20.static.adslpremium.ch) (Ping timeout: 256 seconds)
[20:36:26] <Spawns_Carpet[m]> i think I prefer lisp-1 style lisps
[20:37:02] <amazigh> the expander is one step after the reader.
[20:37:23] <makomo> exactly, hence my question
[20:38:16] <makomo> (1 2 3) and (1 . (2 . (3 . nil))) are 2 distinct syntactic forms, but they do both read into a list containing 1, 2 and 3
[20:40:12] <makomo> i guess the "expansion" you were thinking of was whether to somehow implement the 1st case by reducing it to the 2nd
[20:41:00] <makomo> but i don't think that will make it simpler really, since reading a list of forms is already simple by itself *shrug*
[20:41:47] *** Joins: bcasiello (~bcasiello@066-189-087-112.biz.spectrum.com)
[20:42:04] *** Joins: jao (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net)
[20:43:24] *** Quits: tyson2 (~user@bras-base-toroon0628w-grc-46-142-112-141-177.dsl.bell.ca) (Remote host closed the connection)
[20:43:33] <Spawns_Carpet[m]> yes exactly what I meant makomo  
[20:44:48] <Spawns_Carpet[m]> thanks for the information guys. I've learned quite a lot already
[20:45:06] <amazigh> Spawns_Carpet[m]: did you already code with lisp previously? Otherwise, I think there is a fantasy console with lisp
[20:45:10] <amazigh> I can't recall the name
[20:45:46] <Spawns_Carpet[m]> A little bit yeah, I do some light emacs programming and I write scripts with SBCL for various things 
[20:45:49] <amazigh> It is not PICO-8, but it looks like it; anyway, my point is: play with an existing lisp system a little
[20:45:52] <Spawns_Carpet[m]> but no heavy programming in it
[20:46:02] <amazigh> then that should be enough 
[20:46:21] <Spawns_Carpet[m]> woah a fantasy console with lisp? that sounds really cool
[20:48:10] <amazigh> In fact I can't recommend any
[20:52:33] *** Quits: GNUHacker (~foobar@fsf/member/GNUHacker) (Remote host closed the connection)
[20:53:13] <amazigh> fwiw there is that lisp fantasy console https://rxi.itch.io/cel7 
[20:54:23] *** Quits: peterhil_ (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi) (Ping timeout: 264 seconds)
[20:54:27] *** Joins: GNUHacker (~foobar@fsf/member/GNUHacker)
[20:56:41] *** Joins: peterhil_ (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi)
[20:56:47] *** Quits: shicz2 (~shicz@123.103.9.7) (Ping timeout: 264 seconds)
[20:57:12] *** Joins: shicz2 (~shicz@123.103.9.7)
[20:58:04] *** Quits: peterhil_ (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi) (Remote host closed the connection)
[20:58:17] *** Joins: peterhil_ (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi)
[21:01:02] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 268 seconds)
[21:02:54] *** Joins: waleee (~waleee@h-98-128-228-119.NA.cust.bahnhof.se)
[21:07:27] *** Quits: yewscion (~yewscion@72-21-196-65.amazon.com) (Quit: Connection closed)
[21:22:04] *** Joins: oxum (~oxum@136.185.170.109)
[21:22:06] *** Joins: alexshendi (~alexshend@2a00:20:901f:ed6c:48f:cf87:5754:b8c)
[21:22:11] *** Quits: krl (~krl@h-158-174-122-239.A357.priv.bahnhof.se) (Remote host closed the connection)
[21:22:58] *** Quits: oxum (~oxum@136.185.170.109) (Client Quit)
[21:24:21] *** Joins: masterbuilder (~user@user/masterbuilder)
[21:36:58] *** Joins: skapata (~Skapata@2804:14c:87b0:a6f9:b1d7:e14b:5957:fa7f)
[21:36:58] *** Quits: skapata (~Skapata@2804:14c:87b0:a6f9:b1d7:e14b:5957:fa7f) (Changing host)
[21:36:58] *** Joins: skapata (~Skapata@user/skapata)
[21:53:57] *** Joins: yewscion (~yewscion@72-21-196-65.amazon.com)
[21:55:43] *** Quits: Everything (~Everythin@37.115.210.35) (Quit: leaving)
[21:57:44] *** Joins: karlosz (~karlosz@47.151.136.69)
[22:02:33] *** Joins: tyson2 (~user@206-248-138-20.dsl.teksavvy.com)
[22:28:47] *** Quits: karlosz (~karlosz@47.151.136.69) (Quit: karlosz)
[22:37:11] *** Quits: Inline (~Inline@2a02:908:1252:7a80:b442:91f8:4666:206e) (Ping timeout: 245 seconds)
[22:38:50] *** Quits: ym (~ym@5.143.220.3) (Ping timeout: 256 seconds)
[22:41:13] *** Quits: mononote (~mononote@user/mononote) (Ping timeout: 265 seconds)
[22:44:46] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[22:45:04] *** Joins: skapata (~Skapata@2804:14c:87b0:a6f9:b1d7:e14b:5957:fa7f)
[22:45:04] *** Quits: skapata (~Skapata@2804:14c:87b0:a6f9:b1d7:e14b:5957:fa7f) (Changing host)
[22:45:05] *** Joins: skapata (~Skapata@user/skapata)
[23:04:36] *** Quits: gproto23 (~gproto23@user/gproto23) (Remote host closed the connection)
[23:16:17] *** Quits: tyson2 (~user@206-248-138-20.dsl.teksavvy.com) (Remote host closed the connection)
[23:22:47] *** Quits: rain3 (~rain3___@2a02:2f09:d10a:400:9e2f:eb47:e2ae:761d) (Ping timeout: 265 seconds)
[23:27:57] *** Quits: nature (~nature@45.32.235.173) (Read error: Connection reset by peer)
[23:32:01] *** Joins: Ilyu (~quassel@166.215.82.79.rev.sfr.net)
[23:36:36] *** Joins: alexshe32 (~alexshend@2a02:8070:8796:7600:8848:51c7:564f:485a)
[23:38:54] *** Quits: alexshendi (~alexshend@2a00:20:901f:ed6c:48f:cf87:5754:b8c) (Ping timeout: 268 seconds)
[23:39:46] *** Joins: theothornhill (~user@217.84-49-191.nextgentel.com)
[23:43:37] *** Joins: galex-713 (~quassel@portable.galex-713.eu)
[23:50:43] <Spawns_Carpet[m]> do most lisp interpreters parse source code into actual lisp objects that the interpreter knows how to work with, or into an intermediate 'AST' structure that happens to be very similar to lisp lists 
[23:52:04] <Spawns_Carpet[m]> I am wondering if my compiler should accept and scan over the same data structure that my interpreter can work with, or whether I should have a lisp_list_from_syntax.(syn) method 
[23:52:19] *** Joins: strajder (~strajder@user/strajder)
[23:52:30] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 256 seconds)
[23:54:04] *** Joins: Oshawott (~archenoth@2604:3d09:681:f00:987d:f829:9742:5ed4)
[23:57:11] *** Quits: archenoth (~archenoth@2604:3d09:681:f00:383d:caef:6750:9914) (Ping timeout: 245 seconds)
[23:57:37] *** Joins: lunarkitty (uid501895@user/pyra)
[23:58:32] <pjb> Spawns_Carpet[m]: think about it.
[23:58:49] <pjb> Spawns_Carpet[m]: how would those "actual lisp obejcts tha tthe interpreter knows" look like?
[23:58:59] *** Quits: GNUHacker (~foobar@fsf/member/GNUHacker) (Quit: ERC (IRC client for Emacs 27.2))
[23:59:06] <pjb> Spawns_Carpet[m]: tell, for example, for IF forms?
[23:59:24] <Spawns_Carpet[m]> For my project, it would be a tagged union of structs I wrote
[23:59:38] <pjb> What an horror.
