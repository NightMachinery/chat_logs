[00:00:02] <cbreak> Ronalds_Mazitis_: did you read https://cmake.org/cmake/help/latest/command/install.html?
[00:00:11] <Ronalds_Mazitis_> I installed IDE
[00:00:20] <Ronalds_Mazitis_> I want working compilation
[00:00:35] <rpav> RandomReader: but with position-independent code you don't need fixups.. you can e.g. call foo() at any address, and it runs correctly, so shared library code can be mapped into the process wherever; ASLR is inconsequential
[00:00:41] <Ronalds_Mazitis_> I don't have time to configure cmake learn it after I quit doing it for months
[00:00:53] <Ronalds_Mazitis_> problem is not in me
[00:01:01] <RandomReader> right, I'm agreeing with that, it's what I was calling "rewrites"
[00:01:02] <cbreak> Ronalds_Mazitis_: you don't need install
[00:01:06] <rpav> ah
[00:01:15] <cbreak> install is just for installing, not compiling
[00:01:28] <Ronalds_Mazitis_> what's good then
[00:01:29] <Ronalds_Mazitis_> it
[00:01:29] <rpav> but, damn security, makes everything complicated ;(
[00:01:52] <Ronalds_Mazitis_> how is that smart
[00:02:02] <cbreak> how is it not?
[00:02:05] <Ronalds_Mazitis_> it is not
[00:02:09] <cbreak> why not?
[00:02:10] <Ronalds_Mazitis_> I start project I run project
[00:02:13] <cbreak> so?
[00:02:14] <Ronalds_Mazitis_> that's it
[00:02:19] <Ronalds_Mazitis_> it does not work by default
[00:02:20] <cbreak> don't write pointless things then
[00:02:29] <cbreak> if you add junk, you obviously break things
[00:02:30] <Ronalds_Mazitis_> I did not write anything nothing works
[00:02:42] <cbreak> so you screwed up :)
[00:02:50] <Ronalds_Mazitis_> I did not do anything
[00:02:57] <Ronalds_Mazitis_> install - run
[00:03:00] <Ronalds_Mazitis_> does not
[00:03:01] <Ronalds_Mazitis_> work
[00:03:02] <RandomReader> rpav - yeah, I remember having some mental "fun" with this stuff while thinking about ways to play with an embedded project .. things I could do because it was fully controlled, and how that directly  conflicted with security concepts like ASLR
[00:03:12] <cbreak> so, why did your cmake lists file contain that junk?
[00:03:15] <Ronalds_Mazitis_> I]
[00:03:27] <RandomReader> I never ended up pursuing any of it, but it was great to think about, and seemed to be more complicated than I had expected
[00:03:38] <rpav> RandomReader: heh .. sounds like it could lead to 'dangerous' hacks though
[00:04:28] <cbreak> Ronalds_Mazitis_: if you want to learn programming, you'll have to also learn to read
[00:04:38] <cbreak> to read documentation, and error messages
[00:04:39] <Ronalds_Mazitis_> I don't have to program to start browser
[00:04:43] <Ronalds_Mazitis_> why this is different
[00:04:48] <Ronalds_Mazitis_> I start project I run
[00:04:51] <Ronalds_Mazitis_> fuck my time
[00:04:53] <Ronalds_Mazitis_> right?
[00:05:01] <cbreak> sure. If you screw up, you're in a bad spot
[00:05:01] <Ronalds_Mazitis_> I have to go over chicken egg situation
[00:05:11] <Ronalds_Mazitis_> yall screwed it up for humanity
[00:05:17] <cbreak> who is yall?
[00:05:17] <Ronalds_Mazitis_> please don't smoke crack
[00:05:18] <rpav> Ronalds_Mazitis_: why do you have `install` statements at all? what's your current error?
[00:05:26] <Ronalds_Mazitis_> it's all default
[00:05:39] <rpav> did something generate the cmake file?
[00:06:14] <rpav> i mean when i write a cmake file, the only thing that's default is a blinking cursor on a blank page
[00:06:21] <cbreak> I would expect it did. Unless Ronalds_Mazitis_ copied it from some random location
[00:06:35] <rpav> if something generated it, first, smack the something, then probably remove all the unnecessary things
[00:06:38] <cbreak> like an android example project :)
[00:06:43] <rpav> dunno
[00:06:44] <Ronalds_Mazitis_> Uploaded file: https://uploads.kiwiirc.com/files/5e7815417458d3634bd829615b94af23/pasted.txt
[00:06:49] <Ronalds_Mazitis_> example cmakelists
[00:07:04] <Ronalds_Mazitis_> :-1: warning: You need to add an install statement to your CMakeLists.txt file for deployment to work.
[00:07:05] <rpav> is this a default qt example cmake file?
[00:07:08] <Ronalds_Mazitis_> :-1: error: No rule to make target 'install'.  Stop.
[00:07:18] <Ronalds_Mazitis_> IT'S ALL DEFAULT
[00:07:21] <Ronalds_Mazitis_> FIX DEFAULT
[00:07:22] <cbreak> Ronalds_Mazitis_: so, don't use the install target
[00:07:24] <cbreak> easy.
[00:07:28] <rpav> did qtcreator make this
[00:07:32] <cbreak> don't be a baby :)
[00:07:38] <Ronalds_Mazitis_> there is not an install target
[00:07:40] <cbreak> you don't need to install software to compile it
[00:07:45] <cbreak> obviously there is not
[00:07:48] <cbreak> so don't try to use it
[00:07:49] <Ronalds_Mazitis_> it's all standart
[00:07:56] <Ronalds_Mazitis_> FIX DEFAULT
[00:08:06] <cbreak> it's your own fault for trying to use a non-existing default target
[00:08:08] <rpav> Ronalds_Mazitis_: what are you usuing/doing/typing/clicking such that you are seeing these errors
[00:08:22] <Ronalds_Mazitis_> I build
[00:08:23] <Ronalds_Mazitis_> works
[00:08:26] <Ronalds_Mazitis_> fun
[00:08:28] <Ronalds_Mazitis_> run - does not
[00:08:35] <cbreak> then fix the bugs
[00:08:36] <Ronalds_Mazitis_> I did not include extra code
[00:08:40] <Ronalds_Mazitis_> there bugs?
[00:08:44] <Ronalds_Mazitis_> I did not create them
[00:08:47] <rpav> Ronalds_Mazitis_: what are you running in?
[00:08:47] <cbreak> sure. if your code doesn't run
[00:08:49] <cbreak> then there are bugs
[00:08:55] <Ronalds_Mazitis_> IT'S THERE CODE
[00:09:04] <cbreak> the code is there? sure.
[00:09:10] <cbreak> if it wasn't there, you couldn't compile it
[00:09:12] <Ronalds_Mazitis_> gods sake
[00:09:27] <Ronalds_Mazitis_> CODE THEY INCLUDED DOES NOT WORK
[00:09:29] <CarloWood> where is the code?
[00:09:35] <cbreak> why do you think it doesn't work?
[00:09:37] <Ronalds_Mazitis_> in god damn qt creator
[00:09:49] <cbreak> did you try to start it?
[00:09:55] <cbreak> does it crash? spit an error at you?
[00:09:55] <Ronalds_Mazitis_> yall can make any normal person insane
[00:10:06] <cbreak> this yall person must be very powerful
[00:10:20] <Ronalds_Mazitis_> I don't care about this shizo power
[00:10:25] <Ronalds_Mazitis_> learn to be humans
[00:10:36] <cbreak> has it any benefits?
[00:10:38] <rpav> Ronalds_Mazitis_: you have to imagine we have no idea what you're doing, what you have done, what software you're using, or how you got to the point you're at, and just remember that we see "this cmake file this one guy posted" and "it doesn't work / some error"
[00:10:41] <Ronalds_Mazitis_> if this is about power to others yall don't have purpose
[00:10:52] *** Joins: wootehfoot (~wootehfoo@user/wootehfoot)
[00:11:17] <Ronalds_Mazitis_> I installed qt creator , started god damn project, configured project correctly, but files does not work
[00:11:19] *** Quits: wootehfoot (~wootehfoo@user/wootehfoot) (Read error: Connection reset by peer)
[00:11:19] <Ronalds_Mazitis_> nutshell
[00:11:27] <cbreak> Ronalds_Mazitis_: so you messed up.
[00:11:30] <cbreak> read the error message.
[00:11:34] <cbreak> find out what the problem is.
[00:11:38] <Ronalds_Mazitis_> dude they messed UP
[00:11:44] <cbreak> do some work yourself instead of crying around like a little baby
[00:11:45] <Ronalds_Mazitis_> :-1: warning: You need to add an install statement to your CMakeLists.txt file for deployment to work.
[00:11:50] *** Joins: wootehfoot (~wootehfoo@user/wootehfoot)
[00:11:51] <Ronalds_Mazitis_> :-1: error: No rule to make target 'install'.  Stop.
[00:11:53] <cbreak> so don't do deployment
[00:11:54] <cbreak> easy.
[00:11:54] <rpav> Ronalds_Mazitis_: is this an android project?
[00:11:55] <Ronalds_Mazitis_> WHY IS THAT NOT INCLUDED
[00:12:02] <cbreak> you don't need deployment
[00:12:11] <rpav> i.e. you're trying to build an APK and deploy it to an emulator or device
[00:12:27] <Ronalds_Mazitis_> so
[00:12:32] <Ronalds_Mazitis_> deployment differs
[00:12:37] <cbreak> just run your software
[00:12:45] <rpav> because this is different than 99.999% of everyone else's usage here, where we build native projects, have no need for deployment, nor are particularly familiar with android
[00:14:32] *** Joins: c4017w__ (~c4017@209.52.68.8)
[00:14:33] <CarloWood> I never used Qt.
[00:14:34] <cbreak> I get a feeling Ronalds_Mazitis_ created an android project and is now whining around because of some weird inability to read
[00:14:39] <rpav> none of the default Qt projects i see support anything but desktop, but i probably have an old-ass version of qt creator
[00:14:44] *** Quits: paul424 (~tom@ip-5-172-234-195.multi.internet.cyfrowypolsat.pl) (Remote host closed the connection)
[00:15:00] <Ronalds_Mazitis_> I won't need to read in normal IDE
[00:15:08] <Ronalds_Mazitis_> in beginning
[00:15:10] <rpav> ðŸ¤”
[00:15:18] <cbreak> Ronalds_Mazitis_: sure you do
[00:15:20] <Ronalds_Mazitis_> this is pseudo idiotic
[00:15:26] <johnny> who is forcing you to use qt creator ?
[00:15:28] <rpav> see, the real problem isn't IDEs, it was always the users ;)
[00:15:29] <cbreak> without reading, you don't know what kind of project you're creating
[00:15:47] <Ronalds_Mazitis_> dude IDE set DEFAULTS
[00:15:52] <Ronalds_Mazitis_> so make DEFAULTS work
[00:15:59] <cbreak> Ronalds_Mazitis_: well, read this: If you don't show at least some basic effort, you're not in the right place on IRC.
[00:16:05] <rpav> if defaults worked, why are they called de faults
[00:16:10] <johnny> just don't use qt creator right?
[00:16:12] <Ronalds_Mazitis_> .....
[00:16:13] <cbreak> rpav: ...
[00:16:17] <johnny> nobody is forcing you to
[00:16:34] <CarloWood> rpav: I blame germany too
[00:16:46] <Ronalds_Mazitis_> this is reason why violance goes up
[00:16:47] <rpav> heh
[00:16:57] <Ronalds_Mazitis_> you can't keep your dicks from keyboard
[00:17:14] <cbreak> Ronalds_Mazitis_: learn some manners.
[00:17:18] <cbreak> Ronalds_Mazitis_: and look at https://doc.qt.io/qtcreator/creator-project-creating.html
[00:17:28] <cbreak> do you see the new project wizzard?
[00:17:32] <cbreak> which template did you chose?
[00:17:50] <Ronalds_Mazitis_> widget
[00:17:52] <CarloWood> Nah, I'd help - but I have no idea what you want. I scrolled up, but don't see an error being posted, just CMakeLists.txt files that use stuff I never used (Qt, Android)...
[00:18:05] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 264 seconds)
[00:18:31] <cbreak> Ronalds_Mazitis_: and which platforms are supported for it?
[00:18:54] <Ronalds_Mazitis_> idnk linux?
[00:19:15] <cbreak> it should show you in that screen
[00:19:18] <cbreak> like in the screenshot
[00:19:37] *** Joins: ss4 (~wootehfoo@user/wootehfoot)
[00:20:14] <Ronalds_Mazitis_> Supported Platforms:
[00:20:15] <Ronalds_Mazitis_> Generic Linux Device
[00:21:21] <Ronalds_Mazitis_> Uploaded file: https://uploads.kiwiirc.com/files/470fe19f399f05fe957f5fd2b5420103/pasted.txt
[00:21:35] <Ronalds_Mazitis_> I started default
[00:21:37] <Ronalds_Mazitis_> untitled
[00:21:41] <Ronalds_Mazitis_> used working kit
[00:21:42] *** Quits: ravan (~ravan@user/ravan) (Ping timeout: 260 seconds)
[00:22:06] <Ronalds_Mazitis_> so my c++ broken
[00:22:07] <cbreak> what kit?
[00:22:38] *** Quits: wootehfoot (~wootehfoo@user/wootehfoot) (Ping timeout: 260 seconds)
[00:23:15] *** Joins: ravan (~ravan@42.201.198.151)
[00:23:25] <Ronalds_Mazitis_> https://ibb.co/2W8fmzJ
[00:23:50] *** Joins: RoKenn (~RoKenn@2001:a61:3505:d101:17fc:d7bc:5baf:d535)
[00:23:51] *** Quits: RoKenn (~RoKenn@2001:a61:3505:d101:17fc:d7bc:5baf:d535) (Changing host)
[00:23:51] *** Joins: RoKenn (~RoKenn@user/rokenn)
[00:24:08] <cbreak> why not use the desktop kit? Or auto detect?
[00:24:08] <Juliu> Try ++c, it's more efficient
[00:25:23] <Ronalds_Mazitis_> does not work
[00:25:40] <cbreak> https://doc.qt.io/qtcreator/creator-configuring-projects.html, hmm...
[00:27:35] <Ronalds_Mazitis_> why can't this be done defaulted
[00:27:43] <Ronalds_Mazitis_> yall really messing people time
[00:27:53] <cbreak> it probably can. You just didn't want to.
[00:28:20] <cbreak> instead you blindly ramble around here and expect us to decode your whining and solve your problems with our magical wands.
[00:28:25] <cbreak> this isn't how programming works.
[00:28:34] <Ronalds_Mazitis_> click click basic widget opens
[00:28:36] <Ronalds_Mazitis_> that it
[00:28:49] <Ronalds_Mazitis_> I DON'T have to build compiler
[00:28:50] <Ronalds_Mazitis_> now
[00:28:50] *** Joins: wootehfoot (~wootehfoo@user/wootehfoot)
[00:29:18] <Raziel> is today shitshow day? there seems to be a shitshow everywhere
[00:31:04] <Ronalds_Mazitis_> Uploaded file: https://uploads.kiwiirc.com/files/1e73bcb90bdf71c1e71c488b961b86c0/pasted.txt
[00:31:06] *** Quits: Leone (~Leo@45.72.233.136) ()
[00:31:14] <Ronalds_Mazitis_> started qt quick application
[00:31:21] <Ronalds_Mazitis_> still wont start
[00:31:30] *** Quits: ss4 (~wootehfoo@user/wootehfoot) (Ping timeout: 260 seconds)
[00:31:48] <Ronalds_Mazitis_> whatever they did with that IDE is to stop people from applying there logic in code in first place
[00:32:01] <johnny> then don't use qtcreator.. nobody is forcing you to
[00:32:35] <Ronalds_Mazitis_> dude don't drink water
[00:32:39] <Ronalds_Mazitis_> nobody forcing that
[00:32:41] <Ronalds_Mazitis_> etc
[00:32:49] <Ronalds_Mazitis_> ain't programmers stupid dicks
[00:32:51] <Raziel> hey, I don't use qt at all and I live a happy life
[00:32:52] <Raziel> :p
[00:32:53] <Ronalds_Mazitis_> what did this to you
[00:32:56] <cbreak> Ronalds_Mazitis_: manners. last warning.
[00:33:01] <RandomReader> Ronalds_Mazitis_ - People here are donating their own time to interact with you, it is not their job. I believe Qt has paid support or training options, so if your time is valuable, perhaps start there?
[00:34:18] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Ping timeout: 260 seconds)
[00:35:06] <cbreak> so, just installed qtcreator
[00:35:09] <johnny> i didn't say don't use qt though Raziel
[00:35:10] <cbreak> created a new project
[00:35:16] <cbreak> it built just fine and ran just fine too
[00:35:21] <Raziel> johnny, neither did I :^)
[00:35:24] <cbreak> no problem at all
[00:35:49] <cbreak> but oh my god, is qtcreator ugly
[00:35:51] <Ronalds_Mazitis_> computers are for 1)automatisation 2)creating content 3)storing information
[00:36:01] <Raziel> 4)pr0n
[00:36:12] <Ronalds_Mazitis_> already made stuff is still buggy
[00:36:20] <Ronalds_Mazitis_> and it's been few decades
[00:36:28] <Ronalds_Mazitis_> and it's all for what?
[00:36:49] <CarloWood> Ronalds_Mazitis_: https://stackoverflow.com/a/64908712/1487069
[00:36:53] <cbreak> Raziel: cat pictures.
[00:37:11] <Raziel> NFTs linking to jpgs of not-all-that-artistically-impressive-humanoid-apes
[00:37:31] <Raziel> well, I guess apes are rather humanoid to begin with, but...
[00:37:39] <cbreak> well, either way, Qt creator worked fine here
[00:37:50] <cbreak> Ronalds_Mazitis_: so you must have screwed up something in your system, or with your install
[00:38:06] <cbreak> I've also used the qt widget project, with the default desktop kit
[00:38:08] <Ronalds_Mazitis_> well yeah
[00:38:16] <Ronalds_Mazitis_> I just runned that qt quick
[00:38:24] <Ronalds_Mazitis_> it was far from quick
[00:38:29] <rpav> cbreak: to be fair the default look of qt is pretty bad a lot of the time
[00:38:41] <rpav> but that can only be improved so much too
[00:40:12] <cbreak> rpav: weird.
[00:40:31] <cbreak> I expected it to fit in much better with kde
[00:41:34] <Ronalds_Mazitis_> I wonder what makes yall dudes stay with this, I guess yall loving all these technical details
[00:41:58] *** Joins: varioust (~varioust@cpe-108-167-11-88.neb.res.rr.com)
[00:41:59] <Ronalds_Mazitis_> in nutshell things on some software still creates massive flaws for general population
[00:42:03] *** Joins: navidr (uid112413@id-112413.uxbridge.irccloud.com)
[00:42:09] <Raziel> ah yes, the technical details of installing an IDE on linux
[00:42:13] <Ronalds_Mazitis_> :D
[00:42:29] <Raziel> the general population isn't gonna touch linux in the first place :p
[00:42:33] *** Quits: cart_man (~rynot@host-78-144-127-199.as13285.net) (Quit: Konversation terminated!)
[00:42:36] <cbreak> if you don't like details, programming isn't for you
[00:42:38] <CarloWood> The general population is stupid. Like, REALLY stupid.
[00:42:49] <cbreak> programming is all about details.
[00:42:53] <Ronalds_Mazitis_> I did not had problems with that, but for some reason it did not had stuff in
[00:43:07] <cbreak> because you have to communicate with something that has not a single speck of intelligence. It will obey the rules blindly and without question.
[00:43:11] <cbreak> and the rules are dumb.
[00:43:11] <Ronalds_Mazitis_> CarloWood can You measure that?
[00:43:32] <Ronalds_Mazitis_> I mean, we have web statistics, which show stupidity level
[00:43:34] <Ronalds_Mazitis_> but
[00:43:36] <CarloWood> Well, um, read the news? Look on social media?
[00:43:50] <cbreak> don't answer that social media question, it's a trick question :D
[00:44:15] <Ronalds_Mazitis_> wait dude, yall are programmers, but outside in real reality, God knows what somebody that is smart enough might do
[00:44:22] <Ronalds_Mazitis_> so
[00:44:39] <Ronalds_Mazitis_> anybody that is stupid is stupid for there own way
[00:44:48] <Ronalds_Mazitis_> they are there own personalities
[00:44:58] <cbreak> doesn't help them program.
[00:45:07] <cbreak> to program, you have to think, and pay attention.
[00:45:12] <Ronalds_Mazitis_> if yall take away that, we could just create one basic human and clone him
[00:45:12] <cbreak> and deal with technical details.
[00:45:24] <cbreak> cloning is hard.
[00:45:41] <CarloWood> The world would look a LOT better if everyone were programmers.
[00:45:45] <Ronalds_Mazitis_> yeah but I am not really a programmer all the time, I come back to programming when I lack real life
[00:45:47] <cbreak> and the big problem with creating new humans is not the hardware, it's the software.
[00:45:55] <Ronalds_Mazitis_> :D
[00:46:05] <Raziel> oh shit, we lack real life
[00:46:07] <cbreak> CarloWood: yes. The world would look empty :D
[00:46:08] * Raziel commits sudoku
[00:46:19] <Ronalds_Mazitis_> if people would just give a try to concentrating and focusing and knowing stuff, yeah
[00:46:23] * cbreak commits go
[00:46:34] <Ronalds_Mazitis_> :D
[00:46:38] <CarloWood> I have a real life too: I am going to take a break now and play Mindustry!
[00:46:49] <johnny> CarloWood, i doubt that.. too many programmers have a god complex
[00:46:57] <Ronalds_Mazitis_> I don't lack real life, I lack that this dude made stupid soft called shotcut
[00:47:13] *** Quits: varioust (~varioust@cpe-108-167-11-88.neb.res.rr.com) (Ping timeout: 256 seconds)
[00:47:13] <Ronalds_Mazitis_> it really has stupid way to move videos in timeline
[00:47:18] <Ronalds_Mazitis_> makes You cut wrong
[00:47:28] <cbreak> CarloWood: you're not a real programmer, you should play factorio, or Shenzen.io
[00:47:31] <johnny> the world is better with folks doing a fair amount of different things
[00:47:43] *** Quits: ravan (~ravan@42.201.198.151) (Quit: Leaving)
[00:47:44] <Raziel> C++-irc modded factorio server when
[00:47:49] <johnny> i don't play factorio because i don't wanna do similiar things i already do for work
[00:47:50] <Ronalds_Mazitis_> I agree with johnny
[00:48:16] <cbreak> johnny: murder the natives to have space to establish your ever sprawling factory? :)
[00:48:16] <Ronalds_Mazitis_> but that comes with personality
[00:48:18] <Ronalds_Mazitis_> again
[00:48:40] <johnny> cbreak, i don't know much about the game beyond what i've seen people write about it
[00:48:45] <Ronalds_Mazitis_> these people are born with there own soul, and I doubt programmers can deny that
[00:48:53] <johnny> like why they play it, and the puzzle solving aspect of it
[00:48:57] <Ronalds_Mazitis_> You come from one place, You learn one thing
[00:48:58] <cbreak> johnny: I like it. It's addictive to a certain kind of people
[00:48:58] <johnny> resource management and whatnot
[00:49:11] <johnny> cbreak, i do believe it would be addictive to me, which is another reason i don't play it :)
[00:49:16] <cbreak> heh :D
[00:49:32] <cbreak> stay strong then, it'll save you days of your life
[00:49:42] <johnny> its ok, i'll use those days to play some other garbage
[00:51:38] <Ronalds_Mazitis_> this brings me thought that reality is as good as whole humanity makes it
[00:51:53] <Ronalds_Mazitis_> but things get outta hand
[00:52:06] <Raziel> I don't see how philosophy is gonna get your qt creator working tho
[00:52:12] <Raziel> huehue.
[00:52:13] <Ronalds_Mazitis_> it is working
[00:52:15] <Ronalds_Mazitis_> now
[00:52:28] <Ronalds_Mazitis_> I am already stepping into step where I try to modify it
[00:54:04] *** Joins: udet_ (~udet@ve603.venus.servdiscount-customer.com)
[00:54:04] <Ronalds_Mazitis_> well programming is a lot of details, I know this might be good for people minds,but it slows down a lot of things if we get stuck in these steps
[00:54:36] <Ronalds_Mazitis_> finished product such as shotcut really messed my mood
[00:54:40] *** Joins: manuels1 (~manuel@80.211.205.88)
[00:55:31] *** Joins: andreyv_ (~andrey@user/andreyv)
[00:56:01] *** Quits: RoKenn (~RoKenn@user/rokenn) (Remote host closed the connection)
[00:56:13] *** Joins: purplex_ (~purplex@user/purplex)
[00:56:23] *** Joins: RoKenn (~RoKenn@2001:a61:3505:d101:17fc:d7bc:5baf:d535)
[00:56:24] *** Quits: RoKenn (~RoKenn@2001:a61:3505:d101:17fc:d7bc:5baf:d535) (Changing host)
[00:56:24] *** Joins: RoKenn (~RoKenn@user/rokenn)
[00:56:35] *** Joins: segnior_ (segnior@user/segnior)
[00:56:36] *** Joins: m_tadeu_ (~quassel@bl5-182-86.dsl.telepac.pt)
[00:56:39] *** Joins: FuraiTHD (~Furai@cookiehoster.furai.pl)
[00:56:43] *** Quits: purplex (~purplex@user/purplex) (Ping timeout: 246 seconds)
[00:56:43] *** Quits: Cienisty (Cienisty@user/cienisty) (Killed (strontium.libera.chat (Nickname regained by services)))
[00:56:44] *** Quits: proller (~p@2002:50f0:d845:10:41a5:ca2e:e623:f4b4) (Ping timeout: 268 seconds)
[00:56:45] *** Joins: causative_ (~halberd@user/causative)
[00:56:48] *** Quits: scjg (~scjgmatri@2001:470:69fc:105::f5d6) (Ping timeout: 246 seconds)
[00:56:48] *** Quits: Furai (~Furai@cookiehoster.furai.pl) (Ping timeout: 246 seconds)
[00:56:48] *** Joins: Cienisty (Cienisty@user/cienisty)
[00:57:02] *** Joins: miklcct_ (quasselcor@miklcct.com)
[00:57:07] *** Quits: causative (~halberd@user/causative) (Remote host closed the connection)
[00:57:14] *** Joins: Maximus (~sevalecan@user/sevalecan)
[00:57:14] *** Joins: Adrinael_ (adrinael@dsl-hkibng21-54f8c5-237.dhcp.inet.fi)
[00:57:16] *** Quits: Sevalecan (~sevalecan@user/sevalecan) (Ping timeout: 268 seconds)
[00:57:16] *** Quits: miklcct (quasselcor@miklcct.com) (Ping timeout: 268 seconds)
[00:57:16] *** Quits: greenbagels (~gb@user/greenbagels) (Ping timeout: 268 seconds)
[00:57:16] *** Quits: antto (~pewpew@imightbe.antonsavov.net) (Ping timeout: 268 seconds)
[00:57:26] *** Maximus is now known as Sevalecan
[00:57:32] *** Joins: greenbagels_ (~gb@user/greenbagels)
[00:57:40] *** Joins: antto (~pewpew@imightbe.antonsavov.net)
[00:57:46] *** Quits: m_tadeu (~quassel@bl5-182-86.dsl.telepac.pt) (Ping timeout: 246 seconds)
[00:57:47] *** Quits: Adrinael (adrinael@dsl-hkibng21-54f8c5-237.dhcp.inet.fi) (Ping timeout: 246 seconds)
[00:58:04] *** Quits: prime (~prime@user/prime) (Ping timeout: 268 seconds)
[00:58:22] *** Quits: udet (~udet@ve603.venus.servdiscount-customer.com) (Read error: Connection reset by peer)
[00:58:23] *** Quits: manuels (~manuel@80.211.205.88) (Read error: Connection reset by peer)
[00:58:23] *** Quits: andreyv (~andrey@user/andreyv) (Ping timeout: 264 seconds)
[00:58:23] *** Quits: segnior (segnior@user/segnior) (Ping timeout: 264 seconds)
[00:58:23] *** manuels1 is now known as manuels
[00:58:23] *** Quits: hnOsmium0001[m] (~hnosmium0@2001:470:69fc:105::15d4) (Ping timeout: 264 seconds)
[00:58:23] *** andreyv_ is now known as andreyv
[00:59:38] *** Joins: prime (~prime@user/prime)
[00:59:48] *** Joins: scjg (~scjgmatri@2001:470:69fc:105::f5d6)
[01:01:08] *** Joins: Hokedli (~lasliedv@gateway/tor-sasl/hokedli)
[01:02:14] *** Quits: emerent (~quassel@p200300cd57485527ba27ebfffed28a59.dip0.t-ipconnect.de) (Ping timeout: 260 seconds)
[01:02:30] *** Joins: emerent (~quassel@p200300cd5748556aba27ebfffed28a59.dip0.t-ipconnect.de)
[01:03:37] *** Joins: chozorho (~chozorho@2601:146:300:c30::b4fc)
[01:08:28] *** Adrinael_ is now known as Adrinael
[01:09:31] *** Joins: proller (~p@2a02:6b8:b081:8812::1:1b)
[01:10:52] *** Quits: msk (~msk@185.124.240.174) (Remote host closed the connection)
[01:11:18] *** Quits: kraa (~kraa@107-190-7-216.cpe.teksavvy.com) (Quit: Leaving)
[01:11:27] *** Joins: msk (~msk@185.124.240.174)
[01:13:32] *** Joins: hnOsmium0001[m] (~hnosmium0@2001:470:69fc:105::15d4)
[01:13:55] *** Quits: m_ben (~m_ben@user/m-ben/x-7429725) (Quit: WeeChat 3.3)
[01:17:52] *** Quits: msk (~msk@185.124.240.174) (Remote host closed the connection)
[01:18:15] *** Joins: msk (~msk@185.124.240.174)
[01:18:23] *** Quits: Khoyo (~khoyo@user/khoyo) (Ping timeout: 256 seconds)
[01:21:08] *** Joins: Khoyo (~khoyo@user/khoyo)
[01:23:50] *** Joins: nikko77 (~nikko77@2001:1388:5ca0:7f8:28e7:da27:297:e7)
[01:26:43] *** Quits: Guest4615 (~Guest46@pool-108-7-37-172.bstnma.fios.verizon.net) (Quit: Connection closed)
[01:29:02] *** Quits: wootehfoot (~wootehfoo@user/wootehfoot) (Quit: Leaving)
[01:34:19] *** Joins: JeffH (~JeffH@49.sub-174-245-192.myvzw.com)
[01:37:37] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[01:37:44] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[01:37:44] *** ChanServ sets mode: +v npaperbot
[01:37:55] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[01:41:11] *** Quits: Ronalds_Mazitis_ (~Ronalds_M@46.109.76.104) (Quit: Connection closed)
[01:43:44] <JeffH> If I declare std::vector<int*> myVec(10) and Iâ€™m careful in my use of the vector. Will the constructor be the only place it calls new?
[01:44:52] <JeffH> Ideally Iâ€™d like to pre-allocate the vector so I donâ€™t get a lot of new/delete calls.
[01:46:23] *** Quits: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao) (Remote host closed the connection)
[01:46:27] <RandomReader> yes; vec.capacity() is your view of the current state, and every function (e.g. on cppreference) calls out when it when it would affect the capacity
[01:46:54] *** Quits: Hokedli (~lasliedv@gateway/tor-sasl/hokedli) (Remote host closed the connection)
[01:47:13] <RandomReader> so e.g. .push_back() and .insert() only will allocate if it would exceed the current capacity, .erase() never does, etc
[01:47:18] *** Joins: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao)
[01:47:32] *** Joins: Hokedli (~lasliedv@gateway/tor-sasl/hokedli)
[01:48:04] <RandomReader> so you can effectively pre-allocate and it won't unexpectedly change on you
[01:48:30] <RandomReader> however note that your constructor is not adjusting the capacity, but is setting the current size, meaning it will already contain 10 int* objects
[01:48:32] <traxex> you can also use reserve(10) after constructing an empty vector, if push_back() is more convenient than manually keeping track of how much is used
[01:48:54] <RandomReader> if you're going to have N objects, but expect a max of 10, then you want the pattern traxex mentioned
[01:48:55] <traxex> push_back() will not allocate if capacity() > size()
[01:49:07] *** Joins: arl (~arl@p200300cf1f1c4510fe9f5883b53b6f01.dip0.t-ipconnect.de)
[01:49:51] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.3)
[01:50:44] <JeffH> Thanks!
[01:51:08] *** Joins: plastico (~plastico@neomutt/plastico)
[01:54:04] <JeffH> Any advantage using a vector over a fixed (C-style) array if I know Iâ€™m not going to exceed capacity?
[01:54:54] <RandomReader> the vector is still variable-size, so if you have up-to-N objects and not exactly N all the time, there isn't really another option
[01:55:27] <RandomReader> so that goes to just general usage, working as a container in the rest of your code, e.g. you can range-for over it and get the correct N
[01:55:49] <traxex> you can return a vector from a function
[01:55:52] <RandomReader> for data where you have exactly N, I'd prefer the std::array container/wrapper over a bare array
[01:56:10] <RandomReader> well, static/compile-time N
[01:56:39] <JeffH> std:array is c++11 right?
[01:56:58] <cbreak> JeffH: yes.
[01:57:04] <RandomReader> oh, right, you're on 03
[01:57:09] <cbreak> there's boost::array :D
[01:57:17] <cbreak> probably..
[01:57:55] <cbreak> indeed: https://www.boost.org/doc/libs/1_77_0/doc/html/array.html
[01:58:07] *** Quits: JeffH (~JeffH@49.sub-174-245-192.myvzw.com) (Remote host closed the connection)
[01:58:11] <RandomReader> std::array's basic functionality is lightweight and doesn't require C++11 features, so I'd just write my own version if needed
[01:58:21] *** Joins: JeffH (~JeffH@49.sub-174-245-192.myvzw.com)
[01:58:26] <RandomReader> behaving like a container makes the usage of it a *lot* simpler/nicer
[01:58:54] <RandomReader> I think I remember you saying boost was also a no-go for this project?
[01:58:57] <cbreak> I'm not convinced by using raw pointers though. even in an std::array
[01:59:40] *** Quits: JeffH (~JeffH@49.sub-174-245-192.myvzw.com) (Remote host closed the connection)
[02:00:24] <RandomReader> anyway, aside from all that, a bare array is just fixed N and works just as ok as ever
[02:03:34] <RandomReader> if it's always N but N is a runtime value, it'd be a lot harder to make a case for new T[N] instead of vector, I'd almost always prefer vector
[02:05:19] <cbreak> same.
[02:06:19] *** Quits: kenanmarasli (~kenanmara@user/kenanmarasli) (Quit: Leaving)
[02:13:01] *** Quits: Khoyo (~khoyo@user/khoyo) (Ping timeout: 245 seconds)
[02:14:51] *** Joins: Khoyo (~khoyo@user/khoyo)
[02:19:44] *** Quits: AmR (~AmREiSa@156.199.92.40) (Quit: Konversation terminated!)
[02:21:14] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:29e4:7e50:3693:f0d7) (Ping timeout: 268 seconds)
[02:22:14] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:b584:1804:e93a:340a)
[02:26:15] *** Joins: lkor (~lionkor@beammp/staff/lionkor)
[02:27:24] *** Quits: lionkor (~lionkor@beammp/staff/lionkor) (Ping timeout: 268 seconds)
[02:30:32] *** Quits: Hokedli (~lasliedv@gateway/tor-sasl/hokedli) (Quit: Konversation terminated!)
[02:38:30] *** Quits: proller (~p@2a02:6b8:b081:8812::1:1b) (Ping timeout: 268 seconds)
[02:39:55] *** Joins: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it)
[02:51:02] *** Joins: proller (~p@2002:50f0:d845:10:4a51:b7ff:fe43:6e30)
[03:01:35] *** Quits: Khoyo (~khoyo@user/khoyo) (Ping timeout: 264 seconds)
[03:03:54] *** Quits: CaCode- (~CaCode@user/cacode) (Remote host closed the connection)
[03:05:40] <very_sneaky> RandomReader: not std::array?
[03:06:18] <very_sneaky> oh, derp. should've read up. disregard
[03:21:54] *** Joins: szutt (~szutt@116.37.2.145)
[03:30:33] *** Quits: RoKenn (~RoKenn@user/rokenn) (Quit: NSA proxy service interrupted)
[03:38:55] *** Joins: aegon (~mike@174.127.249.180)
[03:39:16] *** Quits: lkor (~lionkor@beammp/staff/lionkor) (Ping timeout: 260 seconds)
[03:40:13] <aegon> i'm trying to figure out how to take something that expects a write(const char*, std::size_t) (basic_ostream) operation and get it to shove bytes into memory that i can then move into an std::vector<std::byte_t> is there something inthe stdlib that will permit this? I'm chasing my tail down cppreference stream heirarchies right now
[03:41:18] <aegon> i would use std::basic_stringstream but i don't see any move semantics available for grabbing the data after
[03:49:25] <aegon> hmm, i cant tell if this is ub but std::move(stream.str()) maybe
[03:51:51] *** Quits: engest (~engest@50.39.188.0) (Quit: Leaving)
[03:53:35] <computerquip> std::move(stream).str()
[03:54:16] <computerquip> str() has an overload for handing an rvalue this. See overload 3 here: https://en.cppreference.com/w/cpp/io/basic_stringstream/str
[03:54:21] <computerquip> handling*
[03:56:11] *** Quits: magla (~gelignite@55d469ae.access.ecotel.net) (Quit: Stay safe!)
[03:56:13] <computerquip> That said... it's fairly trivial to write an ostream over a container.
[03:56:31] <computerquip> Boost iostream has them out of the box as well.
[03:57:26] *** Quits: zen_coder (~zen_coder@2a02:8109:a280:2d8d:b80b:fa5c:c6a4:6438) (Ping timeout: 268 seconds)
[04:00:53] <aegon> computerquip: for sake of understanding move semantics better, wouldn't this be the equivalent in c++20 to soing string s = stream.str() as the last reference to said stream or would string s = std::move(stream.str()) be required
[04:01:21] <computerquip> String s = stream.str() is a copy of the internal string.
[04:01:46] <aegon> woulst String s = std::move(stream.str()) be a move constructor, i'm confused by the std::move(stream).str()
[04:01:49] <computerquip> string s = std::move(stream.str()) is also a copy.
[04:02:02] <computerquip> std::move(stream).str() is not.
[04:03:08] <aegon> if stream.str() is a && why do you need to move the stream itself first
[04:03:11] <computerquip> See ref-qualified member functions here where it explains rvalue ref-qualifiers: https://en.cppreference.com/w/cpp/language/member_functions
[04:04:42] *** Quits: very_sneaky (~very_snea@user/very-sneaky/x-7432109) (Ping timeout: 260 seconds)
[04:04:59] <computerquip> aegon, because str() won't move the string unless the object it's called on is an rvalue. Calling str() as std::move(stream.str()) probably means that stream isn't an rvalue.
[04:06:02] <aegon> interesting so a member function with an explicit && indicates the memory owned by the calling object is moved after a call, if called on an rvalue object?
[04:06:04] <computerquip> i.e. std::move(stream.str()) is calling overload 1.
[04:06:08] <aegon> or am i still mixed up there
[04:06:34] *** Joins: very_sneaky (~very_snea@user/very-sneaky/x-7432109)
[04:09:07] <aegon> thanks for the insight, I need to ferry relatives around the city for a couple hours but I'm gonna leave irc on. The explanations help a lot in wrapping my head around the semantics
[04:09:45] <computerquip> I guess I can see why that's confusing... std::move doesn't necessarily mean an object is being moved, think of it more like a cast to an rvalue.
[04:11:35] <computerquip> So in the case of std::move(stream).str(), you're casting stream to an rvalue, then calling str() on the resulting rvalue. But just calling `std::move(stream)` doesn't do much by itself.
[04:12:43] *** Quits: navidr (uid112413@id-112413.uxbridge.irccloud.com) ()
[04:15:05] *** Quits: arl (~arl@p200300cf1f1c4510fe9f5883b53b6f01.dip0.t-ipconnect.de) (Remote host closed the connection)
[04:25:35] *** Quits: Burgundy (~yomon@86.127.194.72) (Ping timeout: 264 seconds)
[04:42:41] *** Joins: ferdna (~ferdna@user/ferdna)
[04:52:05] *** Joins: ARoxdale (~ARoxdale@109.76.17.40)
[04:52:58] <DSpider> if I have a vector, should I use "for (size_t i = 0; i < vec.size(); ++i) { ... }"?
[04:53:15] <DSpider> or should I first get it as a 'const' variable?
[04:53:28] <DSpider> 'const size_t size = vec.size();'
[04:53:49] <DSpider> then the loop would be: "for (size_t i = 0; i < size; ++i) { ... }"
[04:54:12] <DSpider> I ask because .size() is a function
[04:54:25] <DSpider> it would call that function for every loop iteration, right?
[04:54:53] <DSpider> getting it once should be faster, right?
[04:58:28] <computerquip> I wouldn't worry about it, 99% chance your compiler just does what's best.
[04:59:01] <computerquip> i.e. caching the size likely does nothing for you.
[05:00:13] <computerquip> As for "for (int i = 0; ...)", I would probably prefer iterators or for range if possible. Tends to be a bit more generic and easier to work with.
[05:00:43] <computerquip> It's not faster to use an index if that's what you're thinking.
[05:00:57] *** Parts: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it) ()
[05:02:08] <DSpider> I like range-based 'for' loops, but in this case it needs the 'i' index
[05:02:39] <DSpider> adding the index outside the loop is ugly
[05:03:23] <DSpider> might as well use a "classic" 'for' loop
[05:04:58] *** Quits: very_sneaky (~very_snea@user/very-sneaky/x-7432109) (Ping timeout: 260 seconds)
[05:06:12] <computerquip> Well, the advantage of using iterators over index is being generic. If you don't care about that, I don't think there's anything wrong with an index.
[05:06:21] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.3)
[05:06:48] *** Joins: very_sneaky (~very_snea@user/very-sneaky/x-7432109)
[05:14:20] <DSpider> all right, I'm off to bed. Thanks
[05:14:30] *** Quits: DSpider (DSpider@2a02:2f00:1ff:ffff::646c:63fc) (Quit: Leaving)
[05:17:51] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:b584:1804:e93a:340a) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[05:19:18] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[05:24:45] *** Joins: horribleprogram (~user@2607:fea8:7040:830:11bf:d2d3:8016:cbd1)
[05:24:58] *** Quits: horribleprogram (~user@2607:fea8:7040:830:11bf:d2d3:8016:cbd1) (Changing host)
[05:24:58] *** Joins: horribleprogram (~user@user/horribleprogram)
[05:25:40] <horribleprogram> ville: Did u write N3681?
[05:34:14] *** Quits: frost (~frost@user/frost) (Ping timeout: 268 seconds)
[05:37:37] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[05:37:45] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[05:37:45] *** ChanServ sets mode: +v npaperbot
[05:40:44] <kalven> horribleprogram: no
[05:41:44] <horribleprogram> http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n3922.html check acknowledgements
[05:42:17] <kalven> yes, different ville
[05:42:59] <horribleprogram> ahh
[05:43:06] <horribleprogram> kalven: omfg
[05:43:22] <horribleprogram> kalven: were u the one who discovered absolute zero?
[05:44:48] <kalven> yes
[05:45:21] <horribleprogram> big fan
[05:45:58] <Alipha> horribleprogram: like a windmill?
[05:46:19] <horribleprogram> how did u discover it... did u ask some girl if u were hot and she told u no and u said "well on a scale how hot am i?"
[05:48:00] <horribleprogram> lol
[05:48:14] <horribleprogram> i guess in a way, yes
[05:51:42] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:b1:3cd:1e41:a79b) (Quit: Quit)
[05:53:01] <horribleprogram> how u deduce std::map<std::string, int> for example from auto x {{"foo", 24}, {"bar", 25}};
[05:53:09] <horribleprogram> I forget but there's a way to do it
[05:53:13] *** Quits: anjali (~anjali@42.111.17.15) (Ping timeout: 256 seconds)
[05:53:47] <horribleprogram> , auto x {{std::string{"foo"}, int(24)}, {"bar", 25}};
[05:54:44] <kalven> why not std::multimap?
[05:54:48] *** Joins: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[05:54:57] <horribleprogram> no such thing
[05:55:52] <horribleprogram> and why would i want similar keys btw
[05:56:32] <horribleprogram> kinda defeats the purpose of a map... same with set... like wtf a set is literally a mathematical concept
[05:56:41] <horribleprogram> with no unique elements
[05:57:02] <kalven> it is a thing
[06:07:58] *** Quits: ARoxdale (~ARoxdale@109.76.17.40) (Ping timeout: 260 seconds)
[06:09:05] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 256 seconds)
[06:09:09] *** Joins: great_taste (~great_tas@190.32.235.20)
[06:16:53] *** Joins: AirstrikeIvanov (~ivanov@user/airstrikeivanov)
[06:19:48] <RandomReader> aegon - the qualifiers on member functions are more like overload matching: a const-qualified member function matches when called on a const object, an rvalue-qualified member function matches when called on an object that is an rvalue, etc
[06:25:35] <computerquip> https://godbolt.org/z/KdGahjMbM <- but he isn't here I guess
[06:34:40] *** Quits: proller (~p@2002:50f0:d845:10:4a51:b7ff:fe43:6e30) (Ping timeout: 268 seconds)
[06:57:48] *** Quits: nikko77 (~nikko77@2001:1388:5ca0:7f8:28e7:da27:297:e7) (Quit: WeeChat 3.3)
[06:58:06] *** Joins: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse)
[06:58:08] *** Joins: frost (~frost@user/frost)
[07:01:32] *** Joins: ferdna (~ferdna@user/ferdna)
[07:08:04] *** Joins: bluap (~bluap@cpc156931-stav19-2-0-cust147.17-3.cable.virginm.net)
[07:09:19] *** Quits: szutt (~szutt@116.37.2.145) (Quit: Client closed)
[07:13:38] *** Quits: horribleprogram (~user@user/horribleprogram) (Remote host closed the connection)
[07:27:00] *** Quits: nshire (~Neal@user/nshire) (Read error: Connection reset by peer)
[07:27:42] *** Quits: OnlineCop (~OnlineCop@user/onlinecop) (Ping timeout: 268 seconds)
[07:27:54] *** Joins: OnlineCop (~OnlineCop@user/onlinecop)
[07:32:27] *** Joins: gggpkm (~gggpkm@60.10.194.43)
[07:47:17] *** Quits: gggpkm (~gggpkm@60.10.194.43) (Read error: Connection reset by peer)
[07:47:35] *** Joins: gggpkm (~gggpkm@60.10.194.43)
[07:51:25] *** Joins: gggpkm_ (~gggpkm@60.10.194.43)
[07:53:41] *** Quits: gggpkm_ (~gggpkm@60.10.194.43) (Remote host closed the connection)
[07:54:08] *** Joins: gggpkm_ (~gggpkm@60.10.194.43)
[07:54:29] *** Quits: gggpkm (~gggpkm@60.10.194.43) (Ping timeout: 256 seconds)
[07:57:12] *** Quits: gggpkm_ (~gggpkm@60.10.194.43) (Remote host closed the connection)
[07:57:37] *** Joins: gggpkm_ (~gggpkm@60.10.194.43)
[07:58:41] *** Quits: gggpkm_ (~gggpkm@60.10.194.43) (Remote host closed the connection)
[07:59:06] *** Joins: gggpkm_ (~gggpkm@60.10.194.43)
[08:28:45] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Ping timeout: 268 seconds)
[08:28:59] *** Quits: great_taste (~great_tas@190.32.235.20) (Quit: Client closed)
[08:29:30] <hnOsmium0001[m]> I think you would want a std::multiset instead of multimap to replace std::map<key, int>
[08:30:17] *** Quits: KombuchaKip (~kip@192.252.230.5) (Quit: Leaving.)
[08:30:59] *** Quits: bluap (~bluap@cpc156931-stav19-2-0-cust147.17-3.cable.virginm.net) (Quit: bluap)
[08:34:06] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[08:34:09] *** Joins: KombuchaKip (~kip@192.252.230.5)
[08:38:07] *** Joins: gggpkm (~gggpkm@60.10.194.43)
[08:39:13] *** Quits: gggpkm (~gggpkm@60.10.194.43) (Remote host closed the connection)
[08:40:06] *** Quits: gggpkm_ (~gggpkm@60.10.194.43) (Ping timeout: 260 seconds)
[08:48:54] *** Quits: psb (sid500598@user/psb) (Ping timeout: 260 seconds)
[08:49:51] *** Quits: nightstrike (uid487@id-487.uxbridge.irccloud.com) (Ping timeout: 260 seconds)
[08:49:51] *** Quits: nojhan (uid443807@id-443807.lymington.irccloud.com) (Ping timeout: 260 seconds)
[08:50:04] *** Quits: computerquip (sid423484@user/computerquip) (Ping timeout: 260 seconds)
[08:50:04] *** Quits: lhtseng (sid15322@id-15322.helmsley.irccloud.com) (Ping timeout: 260 seconds)
[08:50:11] *** Quits: greyblue9 (sid500829@id-500829.ilkley.irccloud.com) (Ping timeout: 264 seconds)
[08:50:20] *** Quits: ullbeking (sid5364@user/ullbeking) (Ping timeout: 260 seconds)
[08:50:32] *** Quits: Argorok (sid195487@id-195487.hampstead.irccloud.com) (Ping timeout: 260 seconds)
[08:50:32] *** Quits: buhman (sid411355@user/buhman) (Ping timeout: 260 seconds)
[08:50:32] *** Quits: Youmu (uid129469@user/condy) (Ping timeout: 260 seconds)
[08:50:32] *** Quits: NiKaN (sid385034@id-385034.helmsley.irccloud.com) (Ping timeout: 260 seconds)
[08:51:00] *** Quits: bjs (sid190364@user/bjs) (Ping timeout: 260 seconds)
[08:51:19] *** Joins: bjs (sid190364@user/bjs)
[08:51:29] *** Joins: computerquip (sid423484@user/computerquip)
[08:51:55] *** Joins: greyblue9 (sid500829@2a03:5180:f:3::7:a45d)
[08:52:01] *** Joins: lhtseng (sid15322@2a03:5180:f:1::3bda)
[08:52:02] *** Joins: nojhan (uid443807@2a03:5180:f:2::6:c59f)
[08:52:06] *** Joins: buhman (sid411355@2a03:5180:f::6:46db)
[08:52:08] *** Quits: buhman (sid411355@2a03:5180:f::6:46db) (Changing host)
[08:52:08] *** Joins: buhman (sid411355@user/buhman)
[08:52:09] *** Joins: psb (sid500598@user/psb)
[08:52:14] *** Joins: Argorok (sid195487@2a03:5180:f:4::2:fb9f)
[08:52:23] *** Joins: ullbeking (sid5364@user/ullbeking)
[08:52:24] *** Joins: Youmu (uid129469@user/condy)
[08:52:25] *** Joins: nightstrike (uid487@2a03:5180:f:5::1e7)
[08:52:37] *** Joins: NiKaN (sid385034@2a03:5180:f:1::5:e00a)
[08:57:11] <kalven> wut
[09:00:04] *** Joins: nshire (~Neal@user/nshire)
[09:07:00] *** Joins: nikko77 (~nikko77@2001:1388:5ca0:7f8:3290:666a:f790:fbe7)
[09:12:34] <aegon> computerquip RandomReader: thanks that makes things a lot clearer! i'm playing around with the compiler explorer post
[09:14:29] <aegon> i never thought about qualifications on anything but constructors, the notation does seem confusing but thats really cool that you can further qualify member functions to do more / expose different parts of the stored data for move constructing
[09:19:40] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[09:25:33] *** Quits: nikko77 (~nikko77@2001:1388:5ca0:7f8:3290:666a:f790:fbe7) (Quit: Leaving)
[09:32:17] *** Quits: chozorho (~chozorho@2601:146:300:c30::b4fc) (Ping timeout: 268 seconds)
[09:32:51] *** Joins: chozorho (~chozorho@2601:146:300:c30::b683)
[09:32:57] *** Joins: causative (~halberd@user/causative)
[09:35:10] *** Quits: causative_ (~halberd@user/causative) (Ping timeout: 260 seconds)
[09:36:35] *** Quits: pulse (~pulse@user/pulse) (Ping timeout: 268 seconds)
[09:37:38] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[09:37:46] *** Joins: onizu (uid373383@id-373383.uxbridge.irccloud.com)
[09:37:46] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[09:37:46] *** ChanServ sets mode: +v npaperbot
[10:06:16] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[10:12:31] *** Quits: aegon (~mike@174.127.249.180) (Remote host closed the connection)
[10:20:00] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[10:33:19] *** Quits: peepsalot (~peepsalot@openscad/peepsalot) (Ping timeout: 268 seconds)
[10:36:44] *** Joins: peepsalot (~peepsalot@openscad/peepsalot)
[10:39:23] *** Joins: riksteri (riksteri@gateway/vpn/airvpn/riksteri)
[10:39:42] *** Quits: Dragoon (~Dragoon@user/dragoon) (Read error: Connection reset by peer)
[10:44:03] *** Joins: DSpider (~DSpider@82.79.237.43)
[11:02:15] *** Joins: Dragoon (~Dragoon@user/dragoon)
[11:18:58] *** Quits: letto (~letto@86.120.85.133) (Ping timeout: 268 seconds)
[11:25:50] <celphi> why am i getting a memory error? https://bpa.st/6XBA
[11:27:45] <celphi> im pretty sure my error is around lines 41-44
[11:27:58] <celphi> bc if i comment it out i dont get the error
[11:28:11] <celphi> *41-46*
[11:36:02] *** Joins: gggp (~gggp@111-251-142-222.dynamic-ip.hinet.net)
[11:39:30] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:cd8f:9ea1:9d86:93b2)
[11:47:06] *** Joins: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it)
[11:51:10] *** Quits: AirstrikeIvanov (~ivanov@user/airstrikeivanov) (Quit: Konversation terminated!)
[11:51:57] *** Joins: kenanmarasli (~kenanmara@user/kenanmarasli)
[12:00:26] <RandomReader> perhaps the capacity isn't ok
[12:01:31] <RandomReader> e.g. -1
[12:02:00] <RandomReader> oh, no, that wouldn't trigger it because the comparison is unsigned
[12:02:12] <RandomReader> run it under a debugger with some test data?
[12:02:27] <RandomReader> also what is the actual memory error? should be more details than that
[12:05:22] <celphi> @RandomReader https://bpa.st/PHTQ
[12:05:26] *** Joins: szutt (~szutt@116.37.2.145)
[12:09:02] *** greenbagels_ is now known as greenbagels
[12:09:11] <celphi> and i actually believe the error is on line 23 after [2,2],[1]
[12:09:41] <RandomReader> oh
[12:09:49] <RandomReader> I don't understand how you're using the list here, but they're not in sync
[12:10:05] <celphi> what do you mean
[12:10:36] <RandomReader> if you pop_back the list, how do you know that iterator is no longer referenced anywhere in the hashmap?
[12:10:41] <celphi> it's LRU cache so im using a list to track order and using unordered_map to do O(1) lookup
[12:11:04] <celphi> i erase it dont i?
[12:11:30] <celphi> int last = dq.back() is last element
[12:11:33] <RandomReader> you erase the key, not the iterator
[12:11:48] <celphi> would that delete both if i delete the key?
[12:12:36] <celphi> hashmap.erase(key) deletes both doest it?
[12:13:10] <RandomReader> no, I mean you're constantly adding and removing from the list
[12:13:23] <RandomReader> every time you erase from the list, that iterator is no longer valid
[12:13:29] <RandomReader> how do you know the hashmap no longer references it?
[12:14:36] <celphi> perhaps im misunderstading how hash map works in c++.. if i have a hash map with the key value 4 => anything, if i delete hash map[4] doest that delete it?
[12:14:47] <RandomReader> yes
[12:14:58] <celphi> so why would iterator be anything different
[12:15:37] <celphi> hashmap[1] => iterator to list
[12:15:50] <celphi> and i erase hashmap[1]
[12:15:57] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[12:16:04] <RandomReader> I'm not talking about the hashmap, I'm talking about the list
[12:16:28] <celphi> ok this is my assumption with the list
[12:16:42] <celphi> i have this input [[2],[1,0],[2,2],[1],[3,3],[2],[4,4],[1],[3],[4]]
[12:16:54] <celphi> [2] gets added to list
[12:17:03] <celphi> well actually no
[12:17:13] <celphi> 0 does
[12:17:18] <celphi> then 2
[12:17:28] <RandomReader> I don't know what the input means, it doesn't have anything to do wtih the code
[12:17:53] <celphi> [2] is get and [1,0] is put
[12:18:26] <celphi> the first [2] is for the constructor
[12:18:29] <celphi> for siz
[12:19:02] <celphi> so like ["LRUCache","put","put","get","put","get","put","get","get","get"] [[2],[1,0],[2,2],[1],[3,3],[2],[4,4],[1],[3],[4]]
[12:19:28] <celphi> is size 2, put [1,0], put [2,2], get [1] ect..
[12:19:59] <celphi> if i access an element i remove from list and put in front
[12:20:21] <celphi> i also update the iterator on hashmap
[12:22:01] <RandomReader> oh, ok, now I follow
[12:22:12] <RandomReader> (also with that test case you could run it through a debugger)
[12:22:37] <RandomReader> 33-36 looks like it will abandon entries in the list, which seems incorrect (but not the problem here)
[12:23:02] <RandomReader> but 45 looks like it's trying to treat a value as a key
[12:23:39] <RandomReader> (which will remove the wrong hashmap entry, leaving one that has an invalid list iterator)
[12:24:19] <mort> weird, just including <spdlog/spdlog.h> gives me a macro redefined warning
[12:24:32] <mort> SPDLOG_FMT_EXPERIMENTAL is apparently being defined twice by spdlog
[12:25:06] *** Quits: chozorho (~chozorho@2601:146:300:c30::b683) (Ping timeout: 245 seconds)
[12:25:42] <celphi> oh i see 45 is the issue i see it now
[12:26:37] <RandomReader> would have been caught if the keys and values were different types, unfortunate test setup
[12:28:03] *** Joins: letto (~letto@86.120.85.133)
[12:30:22] <RandomReader> and I realize I made a leap there I didn't explain: use-after-free is generally something immediately obvious (delete thing; *thing;) or repeated .. in this case nothing obvious, which leaves "repeated", and iterators are a good candidate for repeats
[12:30:54] <RandomReader> could also be implicit in .pop_front()ing an empty list or similar
[12:31:00] <celphi> k
[12:31:02] <RandomReader> but anyway, that's why I was focusing on the list and the sync to begin with
[12:31:21] <celphi> i think i may try list<pair<int,int>> then
[12:31:33] <celphi> since key/value can be different
[12:34:50] *** Quits: letto (~letto@86.120.85.133) (Ping timeout: 260 seconds)
[12:35:08] *** Quits: SuperNintendoSUX (~sjw@69.206.48.64) (Remote host closed the connection)
[12:36:20] *** Joins: SuperNintendoSUX (~sjw@69.206.48.64)
[12:38:13] *** Joins: spaceangel (~spaceange@ip-89-176-181-220.net.upcbroadband.cz)
[12:44:07] <mort> the dtor doesn't run when the ctor throws right?
[12:45:30] *** Quits: frost (~frost@user/frost) (Quit: Connection closed)
[12:45:57] *** Joins: frost (~frost@user/frost)
[12:52:32] <RandomReader> correct, unless it's delegated and the delegated-to one throws
[12:52:44] <RandomReader> or put another way: the destructor is only run if a constructor has completed
[12:53:15] <RandomReader> er, delegated-from one..
[12:53:37] *** Quits: gggp (~gggp@111-251-142-222.dynamic-ip.hinet.net) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[12:54:09] *** Joins: ravan (~ravan@user/ravan)
[13:03:23] *** Joins: gggp (~gggp@111-251-142-222.dynamic-ip.hinet.net)
[13:07:32] *** Joins: Leone (~Leo@45.72.233.136)
[13:14:30] *** Joins: meator (~meator@user/meator)
[13:14:59] <mort> what logging library do y'all read
[13:24:26] <comrad> you mean use?
[13:26:01] <mort> sorry, use yes
[13:26:13] <comrad> we have good results with spdlog
[13:26:26] <comrad> https://github.com/gabime/spdlog
[13:26:56] <mort> I tried out spdlog, but just including the header gives me macro redefinition warnings, which is pretty annoying
[13:27:19] <comrad> we used the sources
[13:27:38] *** Quits: gggp (~gggp@111-251-142-222.dynamic-ip.hinet.net) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[13:27:53] <comrad> it has lots of different sinks which is very useful
[13:27:54] <mort> actually this might possibly be a packaging issue from homebrew and not a spdlog issue
[13:28:22] <mort> the .pc file has `-DSPDLOG_FMT_EXTERNAL` in its cflags and the spdlog headers also contain `#define SPDLOG_FMT_EXTERNAL`
[13:28:55] <comrad> we use fmt as well and define our extrnal fmt as the one to use for spdlog
[13:29:09] <comrad> works fine with cmake
[13:29:22] <comrad> we use it on windows, linux and some arm linux thingy
[13:31:39] *** Quits: meator (~meator@user/meator) (Ping timeout: 256 seconds)
[13:37:38] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[13:37:46] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[13:37:46] *** ChanServ sets mode: +v npaperbot
[13:41:10] *** Joins: ravan_ (~ravan@user/ravan)
[13:43:26] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:cd8f:9ea1:9d86:93b2) (Ping timeout: 245 seconds)
[13:45:06] *** Quits: ravan (~ravan@user/ravan) (Ping timeout: 245 seconds)
[13:51:11] *** Joins: PJBoy (~PJBoy@user/pjboy)
[13:58:11] *** Quits: frost (~frost@user/frost) (Quit: Connection closed)
[13:59:55] *** Joins: zen_coder (~zen_coder@2a02:8109:a280:2d8d:b80b:fa5c:c6a4:6438)
[14:00:56] *** Quits: zen_coder (~zen_coder@2a02:8109:a280:2d8d:b80b:fa5c:c6a4:6438) (Client Quit)
[14:04:24] *** Joins: gggp (~gggp@111-251-142-222.dynamic-ip.hinet.net)
[14:08:37] *** Joins: frost (~frost@user/frost)
[14:09:57] *** Joins: Burgundy (~yomon@86.127.194.72)
[14:11:54] *** Quits: gggp (~gggp@111-251-142-222.dynamic-ip.hinet.net) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[14:13:09] *** Joins: paul424 (~tom@ip-5-172-237-254.multi.internet.cyfrowypolsat.pl)
[14:15:30] <paul424> Hello hello I have a choice : either to create another function TrapManager::buildTrapOnTilesNoFee from TrapManager::buildTrapOnTiles or add a boolean default flag to TrapManager::buildTrapOnTiles and modify it's code , which one is less ugly ?
[14:21:07] *** Joins: m_ben (~m_ben@user/m-ben/x-7429725)
[14:21:23] <comrad> its an option to a functionality, i would go with the boolean parameter
[14:21:33] <paul424> comrad, oki thanks
[14:21:48] <comrad> but i would not use a boolean but an enum, it is more expressive
[14:22:09] <comrad> buildTrapOnTiles(TrapOptions:NOFEE) for example
[14:34:51] *** Joins: gggp (~gggp@111-251-142-222.dynamic-ip.hinet.net)
[14:36:11] *** Quits: gggp (~gggp@111-251-142-222.dynamic-ip.hinet.net) (Client Quit)
[14:41:00] *** Quits: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it) (Quit: Leaving.)
[14:44:12] *** Joins: gggp (~gggp@111-251-142-222.dynamic-ip.hinet.net)
[14:49:34] <very_sneaky> can anybody recommend a good client/server library? Looking for ones with defined request/response protocols for inspiration
[14:52:48] *** Joins: rond_ (~rond_@2a02:a31a:a23c:f480:2fd7:e087:5546:a438)
[14:54:07] <rond_> Hi! I'm looking for a named tuple in c++. So far I can think only about struct. Is it a way to go? Is there a difference in performance/memory between std::pair<int, int>; int[2]; struct S{ int a; int b; };Â  ?
[14:54:38] <rond_> and, possibly, std::tuple<int, int>?
[14:57:24] <TinoDidriksen> There is no performance difference.
[14:57:41] <TinoDidriksen> It's all the same to the CPU. Names only exist at compile time.
[14:58:08] <rond_> cool. so defining custom structs for the sake of readability is no-overhead way to go
[14:58:09] <traxex> is the order of the elements specified in tuple?
[14:58:21] *** Joins: lkor (~lionkor@beammp/staff/lionkor)
[14:58:26] <traxex> istr they could be in reverse orde
[15:00:46] *** Joins: smallvil_ (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[15:01:40] *** Joins: Ronalds_Mazitis_ (~Ronalds_M@46.109.76.104)
[15:03:07] <PJBoy> they're ordered in the sense that std::get<n>(tup) for increasing n
[15:03:24] <PJBoy> s/that/of/
[15:03:25] *** Quits: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Ping timeout: 268 seconds)
[15:07:38] <m_ben> traxex: are you talking about order in memory?
[15:11:46] *** Joins: lionkor (~lionkor@beammp/staff/lionkor)
[15:12:30] *** Quits: lkor (~lionkor@beammp/staff/lionkor) (Ping timeout: 260 seconds)
[15:14:16] <m_ben> traxex: if you're asking about memory alignment, it depends on the implementation. iirc most tuple implementations use recursive inheritance which results in reversed order
[15:15:13] *** Joins: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it)
[15:23:02] *** Quits: paul424 (~tom@ip-5-172-237-254.multi.internet.cyfrowypolsat.pl) (Remote host closed the connection)
[15:27:39] <m_ben> looks like gcc still uses recursive inheritance, while clang changed its tuple implementation to multiple inheritance
[15:32:27] <PJBoy> idk why, but I like the multiple inheritance design a lot more
[15:33:28] <m_ben> it's also faster
[15:33:54] <m_ben> there was a talk about it a few years ago by the author of boost.hana
[15:34:02] <PJBoy> faster to compile?
[15:34:04] <rond_> for(int i =0; i<N; i++) vs for(int i=0; i<N; ++i)Â Â  - doesn't matter because reasonable compilers will optimize both to the same ASM anyway, right?
[15:34:10] <m_ben> PJBoy: yes
[15:34:16] <PJBoy> yeah that I can believe
[15:35:10] <m_ben> plus with multiple inheritance you don't get reverse memory alignment. I don't see a disadvantage either
[15:41:23] <PJBoy> there's also a compositional design
[15:42:00] <TinoDidriksen> rond_, correct.
[15:42:40] <PJBoy> where you have a `template<typename First, typename... Rest> class tuple { First first; tuple<Rest> rest; }`
[15:43:20] <PJBoy> that would get your memory order forwards, but would still be recursive
[15:43:54] <PJBoy> although in a sense, it's tail recursive
[15:45:12] *** Joins: letto (~letto@86.120.85.133)
[15:45:48] *** Joins: plastico (~plastico@neomutt/plastico)
[15:46:10] <rond_> int i; i += someBooleanValue;Â Â  is it safe to do it? will a boolean always be mapped true->1; false->0 ?
[15:46:42] *** Joins: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[15:47:26] <TinoDidriksen> rond_, https://eel.is/c++draft/conv.integral#2
[15:48:26] <rond_> so the answer is yes. cool!
[15:48:51] <rond_> TinoDidriksen so "https://eel.is/c++draft/" is a good source to look up for the answers, right?
[15:49:07] <TinoDidriksen> Eeh...if you know how to read the Standard, yes.
[15:49:18] <TinoDidriksen> https://cppreference.com/ is more readable.
[15:49:21] <rond_> yep, it's a skill on its own
[15:49:28] <PJBoy> the latest WIP of the standard nonetheless
[15:49:55] *** Quits: night_wulfe_ (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 256 seconds)
[15:50:00] <PJBoy> if you need knowledge of any particular C++ version, then you'd either need to read the older standards or cppreference
[15:50:03] *** Joins: nikko77 (~nikko77@2001:1388:5ca0:155f:2013:6e41:a4f5:70c8)
[15:50:41] <rond_> okay, thanks!
[15:55:14] <very_sneaky> handling messaging in c++ is really throwing me for a loop. How do you pass around messages with different data fields without serializing
[15:56:29] <very_sneaky> i can't find a pattern that does this nicely
[16:02:21] <TinoDidriksen> Common base class with the first member denoting the actual type?
[16:03:38] *** Quits: gggp (~gggp@111-251-142-222.dynamic-ip.hinet.net) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[16:05:48] <very_sneaky> yeah, i've got something approaching that now.. means i have to create a new datatype every time i want to send a new type of data though
[16:06:51] <very_sneaky> i guess that's just the nature of statically typed languages though
[16:15:01] *** Joins: kylese (~kylese@p548352b2.dip0.t-ipconnect.de)
[16:21:40] *** Quits: AbleBacon (~AbleBacon@user/AbleBacon) (Read error: Connection reset by peer)
[16:21:54] *** Parts: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it) ()
[16:27:12] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:58e:15a4:a761:e873)
[16:31:33] <rond_> sections doesn't return value, right? I'd like to do something like: auto a = { ... lots of code, but wouldn't like to introduce function/lambda }. Or even simple case: auto a = if ... else if ... else if ... else...
[16:31:40] <rond_> what's the nicest way?
[16:31:47] <TinoDidriksen> Lambda
[16:33:56] <rond_> is it cost-free ?
[16:34:10] <TinoDidriksen> Yes
[16:34:59] <TinoDidriksen> A function would also likely be, because it'd be simple enough to be inlined.
[16:36:12] <rond_> I need to pass 4 parameters to this lambda (4 ints). Should I 1) pass them as arguments 2) pass them by capture-by-value 3) pass them by capture-by-reference?
[16:36:33] <TinoDidriksen> Depends on whether you need to call the lambda later with other args.
[16:36:38] <rond_> I like capture-by-reference the most as it's the least verbose if I just use [&]
[16:36:53] <TinoDidriksen> If they're local to the call site, then just [&] and use the variables as-is.
[16:37:06] <rond_> TinoDidriksen auto a = [&](){some simple code}();
[16:37:06] <rond_> that
[16:37:09] <rond_> that's the use case
[16:37:17] <TinoDidriksen> Yeah, just [&] that.
[16:37:19] <rond_> cool
[16:37:21] <rond_> ty
[16:37:41] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[16:41:21] <rond_> https://godbolt.org/z/Mbv1aMx39Â Â Â  this seem to not work. 1) why 2) any elegant solution?
[16:41:36] *** Joins: gggp (~gggp@111-251-142-222.dynamic-ip.hinet.net)
[16:42:28] <PJBoy> structured bindings don't count as variables
[16:42:49] <rond_> =(
[16:42:54] <rond_> any elegant solution here?
[16:43:03] <PJBoy> that's a bad structured binding anyway
[16:43:05] <PJBoy> thanks to minmax
[16:43:15] <rond_> wdym?
[16:43:24] * PJBoy double checks quickly
[16:43:38] <PJBoy> yeah
[16:43:50] <PJBoy> minmax return references to those 1 and 2, which are temporaries
[16:43:55] <PJBoy> so l and r are dangling references
[16:44:01] <rond_> whaaat
[16:44:14] <PJBoy> note the note here https://en.cppreference.com/w/cpp/algorithm/minmax#Notes
[16:44:35] <rond_> what the hellll
[16:45:13] <PJBoy> I'd write https://godbolt.org/z/17T3bGqqx
[16:45:18] <very_sneaky> just for fun
[16:45:45] <rond_> PJBoy I thought that std::tie and structured bindings are mostly equivalent
[16:46:11] <PJBoy> the difference here is values vs references
[16:46:28] <PJBoy> tie assigns the result of minmax to real variables l and r
[16:46:47] <PJBoy> only after that assignment does the result of minmax dangle
[16:47:03] <PJBoy> whereas the structured bindings are giving you a reference, not doing any copying
[16:47:19] <rond_> and you know that about std::tie from this: "Return value: A std::tuple object containing lvalue references."Â  <- std::tie in cppreference.ccom
[16:47:28] <PJBoy> yeah
[16:47:40] <PJBoy> and we assign to that tuple
[16:47:49] <PJBoy> and the tuple assignment operator assigns to its elements element-wise
[16:48:03] <TinoDidriksen> "Structured bindings cannot be captured by lambda expressions. (until C++20)" - so I guess this changed.
[16:48:04] <rond_> any good rea about structureed binding vs std::tie?
[16:48:42] <rond_> TinoDidriksen ... hmm
[16:48:47] <PJBoy> not that I can think of
[16:48:58] <PJBoy> they are certainly similar in that they both operate on tuple-like objects
[16:49:54] <PJBoy> this is really just yet another incarnation of reference + lifetime gotchas
[16:50:22] <PJBoy> that said
[16:50:33] <PJBoy> `auto [l, r] = std::minmax({1, 2});` would be fine
[16:50:43] <PJBoy> because the initializer_list overload does return by value
[16:51:37] <rond_> std::vector<int> V; ....; auto [l, r] = std::minmax(V[0], V[1]);Â Â Â  <- is it good to?
[16:52:03] <PJBoy> for as long as V[0] and V[1] are alive, yeah
[16:52:29] *** Quits: dld (~dld@2601:197:600:1210:4005:8d20:87b1:8dd5) (Ping timeout: 265 seconds)
[16:52:46] *** Joins: meator (~meator@user/meator)
[16:53:20] <rond_> PJBoyÂ  https://godbolt.org/z/187EhjoexÂ Â  okay, thanks
[16:55:17] <PJBoy> those references will be invalidated if you resize the vector etc.
[16:55:22] <PJBoy> so gotta keep that in mind
[16:55:39] <rond_> I brutally got caught by it the other day
[16:55:52] *** Quits: LordKalma (~LordKalma@server.ruilvo.com) (Ping timeout: 260 seconds)
[16:56:00] <rond_> sometimes I praise c++, sometimes I hate it
[16:56:29] <TinoDidriksen> 's how I feel about Perl.
[16:59:34] *** Quits: rond_ (~rond_@2a02:a31a:a23c:f480:2fd7:e087:5546:a438) (Quit: Client closed)
[17:00:45] *** Joins: LordKalma (~LordKalma@server.ruilvo.com)
[17:02:43] *** Quits: meator (~meator@user/meator) (Quit: Leaving)
[17:03:15] *** Quits: kalven (~calvin@2a02:470:84:102::24) (Ping timeout: 260 seconds)
[17:04:38] *** Joins: gggp_ (~gggp@111-251-142-222.dynamic-ip.hinet.net)
[17:06:02] *** Quits: gggp_ (~gggp@111-251-142-222.dynamic-ip.hinet.net) (Remote host closed the connection)
[17:06:26] *** Quits: gggp (~gggp@111-251-142-222.dynamic-ip.hinet.net) (Ping timeout: 260 seconds)
[17:06:35] *** Joins: gggp_ (~gggp@111-251-128-35.dynamic-ip.hinet.net)
[17:13:35] *** Quits: gggp_ (~gggp@111-251-128-35.dynamic-ip.hinet.net) (Ping timeout: 264 seconds)
[17:16:16] *** Joins: kalven (~calvin@2a02:470:84:102::24)
[17:17:44] <onizu> Hi
[17:18:44] <onizu> what could be the reason that some members here are pointers: https://archicadapi.graphisoft.com/documentation/api_projectinfo  --- is it because they wanted to allow those values to be changeable by reference?
[17:19:58] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:fd32:61c3:2684:b130)
[17:22:53] *** Joins: lihora (~lihora@177.50.213.32)
[17:27:19] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[17:27:47] *** Joins: X-Scale` (~ARM@165.201.137.78.rev.vodafone.pt)
[17:28:21] *** Quits: X-Scale (~ARM@83.223.240.168) (Ping timeout: 268 seconds)
[17:29:50] *** X-Scale` is now known as X-Scale
[17:29:56] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[17:30:41] *** Quits: Hello71 (~Hello71@wireguard/contributor/hello71) (Remote host closed the connection)
[17:32:09] *** Quits: manuels (~manuel@80.211.205.88) (Quit: Ping timeout (120 seconds))
[17:32:17] *** Joins: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it)
[17:35:30] *** Joins: manuels (~manuel@80.211.205.88)
[17:37:35] *** Quits: smallvil_ (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Ping timeout: 268 seconds)
[17:37:39] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[17:37:47] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[17:37:47] *** ChanServ sets mode: +v npaperbot
[17:37:49] <Ronalds_Mazitis_> hey
[17:38:11] <Ronalds_Mazitis_> is there anybody interested in helping me make command line video merger editor?
[17:39:05] <Ronalds_Mazitis_> I have pseudo code that makes sense, it's just technical details by doing c++
[17:39:11] <Juliu> Ronalds_Mazitis_, isn't VirtualDub good enough for you?
[17:39:23] <Ronalds_Mazitis_> idnk what is that
[17:39:57] <Ronalds_Mazitis_> look what I got
[17:39:59] <Ronalds_Mazitis_> https://mytechservinginternetmeals.blogspot.com/2021/11/video-editor-console-pseudo-code-not.html
[17:40:00] <PJBoy> ffmpeg is the more command line option
[17:40:18] *** Joins: paule32 (~paule32@user/paule32)
[17:40:24] <Ronalds_Mazitis_> yeah I am making command line
[17:40:27] <Ronalds_Mazitis_> video editor
[17:41:17] <Ronalds_Mazitis_> idea is that it will ask which folder video files are stored, then You will be able to number video files, and then choose how to trim each, and then it renders
[17:41:26] <Ronalds_Mazitis_> 3 phases
[17:41:46] <Ronalds_Mazitis_> code is pretty simple but I am not really into c++ for few months
[17:42:48] <Ronalds_Mazitis_> also, final product should be rendered by nvidia hvec 264 + with maximum quality settings, but I could make version from vaapi or medium settings too
[17:43:26] <Ronalds_Mazitis_> if anybody helps me, I title Your name as a helper
[17:43:58] <Ronalds_Mazitis_> in fact, I don't do this for me only, I want this as sweet example people would be able to check out
[17:44:03] <Juliu> Ronalds_Mazitis_, it's a quite famous tool for video encoding, and I think it also supports command line operations. See   https://www.virtualdub.org/
[17:44:36] <Ronalds_Mazitis_> I need just command line that checks file system, gives inputs and ffmpeg does the work
[17:44:38] <CarloWood> Ronalds_Mazitis_: I wrote this documentation in 2007: http://carlowood.github.io/howto/encode.html
[17:45:08] <CarloWood> Commandline way to shrink large mkv files.  Perhaps the used tools work for you?
[17:45:09] *** Joins: pulse (~pulse@user/pulse)
[17:45:34] <Ronalds_Mazitis_> dude I want code not some software
[17:45:48] <Ronalds_Mazitis_> I have plenty of software, it does not match my idea
[17:45:51] <Ronalds_Mazitis_> thought
[17:45:55] <Ronalds_Mazitis_> tnx anyway
[17:46:40] <Juliu> How can anyone want to do video encoding and doesn't know about VirtualDub? I mean pretty much everybody in that scene knows about it or uses it
[17:46:41] <Ronalds_Mazitis_> I am merging and trimming files from selected directory in selected order by c++ input
[17:46:47] <Ronalds_Mazitis_> in nutshell
[17:47:06] <Ronalds_Mazitis_> I use ffmpeg with nvidia settings
[17:47:19] <Ronalds_Mazitis_> my problem is c++ part
[17:49:19] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[17:52:37] *** Quits: kylese (~kylese@p548352b2.dip0.t-ipconnect.de) (Quit: Leaving)
[17:52:46] *** Quits: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse) (Read error: Connection reset by peer)
[17:53:14] <CarloWood> Dude.. ok.  I'll take the job, but instead of being called helper I want you to call me slave.
[17:53:47] <Ronalds_Mazitis_> lmao why
[17:54:12] <PJBoy> and you'll call him daddy?
[17:54:22] <CarloWood> It is called sarcasm.
[17:54:31] <Ronalds_Mazitis_> yall not girls right?
[17:55:00] <Ronalds_Mazitis_> I do this for general public
[17:55:25] <Ronalds_Mazitis_> that's also for myself you me him
[17:56:26] <Ronalds_Mazitis_> check out
[17:56:28] <Ronalds_Mazitis_> https://mytechservinginternetmeals.blogspot.com/2021/11/video-editor-console-pseudo-code-not.html
[17:56:39] <Ronalds_Mazitis_> the code logic is given
[17:56:48] <Ronalds_Mazitis_> problem is language concept
[17:56:56] *** Quits: lihora (~lihora@177.50.213.32) (Quit: lihora)
[17:58:13] <Alipha> << sizeof(tuple<int, char, char, short>), sizeof(Foo), sizeof(Bar<int, char, char, short>); struct Foo { int x; char y, z; short s; }; template<typename T, typename... Rest> struct Bar { T first; Bar<Rest...> rest; }; template<typename T> struct Bar<T> { T x; }; // PJBoy
[17:58:14] <geordi> 8, 8, 12
[18:00:15] <PJBoy> interesting
[18:00:45] <PJBoy> oh I remember that result now
[18:01:35] *** Quits: jiffe (~jiffe@mail.nsab.us) (Ping timeout: 260 seconds)
[18:02:51] <Ronalds_Mazitis_> https://mytechservinginternetmeals.blogspot.com/2021/11/video-editor-console-pseudo-code-not.html
[18:02:55] <Ronalds_Mazitis_> bold commentaries
[18:03:15] *** Joins: jiffe (~jiffe@mail.nsab.us)
[18:03:29] <Ronalds_Mazitis_> CarloWood I understand software industry is literally last place these people will get money
[18:03:40] <Ronalds_Mazitis_> there is nothing left in the world to do
[18:03:49] <Ronalds_Mazitis_> and government trapped everyone
[18:03:59] <Ronalds_Mazitis_> turned them into corpses
[18:06:35] *** Joins: X-Scale` (~ARM@31.22.160.27)
[18:07:12] *** Quits: X-Scale (~ARM@165.201.137.78.rev.vodafone.pt) (Ping timeout: 268 seconds)
[18:08:52] *** X-Scale` is now known as X-Scale
[18:17:06] *** Joins: chozorho (~chozorho@2601:146:300:c30::b683)
[18:17:07] *** Quits: paule32 (~paule32@user/paule32) (Read error: Connection reset by peer)
[18:19:31] <Raziel> oh no, not the govmunt
[18:24:18] <celphi> got it to work-- any improvements? https://bpa.st/JESQ
[18:24:56] <Ronalds_Mazitis_> oh no stupid software that does not do simple thing
[18:25:07] *** Quits: TheCoffeMaker_ (~TheCoffeM@125-121-245-190.fibertel.com.ar) (Quit: So long and thanks for all the fish)
[18:26:06] <Ronalds_Mazitis_> 	std::array <int> arr; I need this array to expand itself
[18:26:25] <Raziel> then make it a std::vector instead
[18:27:03] *** Joins: TheCoffeMaker (~TheCoffeM@user/thecoffemaker)
[18:28:02] *** Joins: Hello71 (~Hello71@wireguard/contributor/hello71)
[18:39:02] *** Joins: AmR (~AmREiSa@156.199.218.104)
[18:39:22] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[18:41:00] *** Quits: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it) (Quit: Leaving.)
[18:45:12] *** Joins: meator (~meator@user/meator)
[18:47:13] *** Joins: lkor (~lionkor@beammp/staff/lionkor)
[18:48:31] *** Quits: lionkor (~lionkor@beammp/staff/lionkor) (Ping timeout: 268 seconds)
[18:52:42] *** Quits: Hello71 (~Hello71@wireguard/contributor/hello71) (Ping timeout: 276 seconds)
[18:53:47] *** Joins: Hello71 (~Hello71@wireguard/contributor/hello71)
[18:55:43] *** Quits: frost (~frost@user/frost) (Quit: Connection closed)
[18:56:13] *** Joins: ferdna (~ferdna@user/ferdna)
[18:56:30] *** Joins: proller (~p@80.240.216.69)
[18:57:17] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[18:57:44] *** Joins: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[19:02:35] *** Quits: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Ping timeout: 256 seconds)
[19:02:41] *** Quits: meator (~meator@user/meator) (Ping timeout: 268 seconds)
[19:07:18] *** Quits: pulse (~pulse@user/pulse) (Ping timeout: 260 seconds)
[19:11:31] *** Joins: z9z0b3t1c (z9z0b3t1c@gateway/vpn/protonvpn/z9z0b3t1c)
[19:19:09] *** Joins: pulse (~pulse@user/pulse)
[19:19:51] *** Quits: szutt (~szutt@116.37.2.145) (Quit: Client closed)
[19:21:31] *** Joins: bluap (~bluap@cpc156931-stav19-2-0-cust147.17-3.cable.virginm.net)
[19:30:12] *** Joins: skapata (~Skapata@2804:14c:87b0:a6f9:477:1061:59ab:6b1f)
[19:30:12] *** Quits: skapata (~Skapata@2804:14c:87b0:a6f9:477:1061:59ab:6b1f) (Changing host)
[19:30:12] *** Joins: skapata (~Skapata@user/skapata)
[19:31:39] *** Joins: lionkor (~lionkor@beammp/staff/lionkor)
[19:32:40] *** Quits: lkor (~lionkor@beammp/staff/lionkor) (Ping timeout: 260 seconds)
[19:35:26] <Ronalds_Mazitis_> invalid initialization of reference of type â€˜const std::vector<std::__cxx11::basic_string<char> >&â€™ from expression of type â€˜std::vector<char>â€™
[19:35:33] <Ronalds_Mazitis_> 	if (in_array(name, arr)) {
[19:35:40] <Ronalds_Mazitis_> 	std::vector <char> arr;
[19:35:59] <Ronalds_Mazitis_> 		std::string name;
[19:36:07] <Ronalds_Mazitis_> name should be char too?
[19:41:33] <traxex> either that, or arr should be vector<string>
[19:41:40] <traxex> that's what the error says
[19:43:22] <Ronalds_Mazitis_> error: â€˜stringâ€™ was not declared in this scope
[19:43:23] <Ronalds_Mazitis_>    52 |  std::vector <string> arr;
[19:43:38] <Ronalds_Mazitis_> the datatype definition is bullshit I can't learn it
[19:44:21] *** Joins: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[19:44:27] <Ronalds_Mazitis_> https://paste-bin.xyz/10839
[19:46:28] <Alipha> PJBoy: I think inheriting from a parameter pack is the only way to guarantee no excessive padding
[19:46:54] <PJBoy> I tried spamming [[no_unique_address]], and using class instead of struct
[19:46:56] <PJBoy> but to no avail
[19:47:37] <Ronalds_Mazitis_> can somebody make my code example to work
[19:48:02] <Ronalds_Mazitis_> I am not sure how to have right datatype for this algorithm to work
[19:48:46] *** Quits: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Read error: Connection reset by peer)
[19:53:41] *** Joins: kraa (~kraa@107-190-7-216.cpe.teksavvy.com)
[19:54:25] <Raziel> Ronalds_Mazitis_, you're trying to find a specific string (name) in an array/vector of strings (arr)?
[19:55:50] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[20:02:13] <Raziel> Ronalds_Mazitis_, https://wandbox.org/permlink/8B7SVIORW7JdQPUH
[20:02:38] <Raziel> by the way, are you using a compiler or an IDE or... anything? or are you just writing this on a piece of toilet paper then using OCR to transcribe it? cause jeez
[20:12:56] <Ronalds_Mazitis_> g++ -std=c++17 editor.cpp -o editor
[20:15:06] <Ronalds_Mazitis_> your wand does not have filesystem permissions
[20:15:28] <Ronalds_Mazitis_> Raziel yeah
[20:15:50] <Raziel> filesystem permission on whose filesystem?
[20:16:41] <Raziel> or were you expecting there to be a /home/ronalds on whatever wandbox is running the code on? v:
[20:17:04] <Ronalds_Mazitis_> I did not create that wand
[20:18:30] <Raziel> wandbox is like paste-bin or whatever else, except it can also compile and run code. but obviously it won't have or be able to find non-standard things, such as your own home dir which you hardcoded in there.
[20:21:12] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[20:21:14] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Client Quit)
[20:25:22] *** Joins: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[20:29:47] *** Quits: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Ping timeout: 264 seconds)
[20:35:18] *** Joins: night_wulfe_ (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[20:35:41] <LordKalma> whats up
[20:38:03] *** Quits: spaceangel (~spaceange@ip-89-176-181-220.net.upcbroadband.cz) (Remote host closed the connection)
[20:39:11] *** Quits: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 260 seconds)
[20:44:25] *** Joins: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[20:46:50] *** Quits: letto (~letto@86.120.85.133) (Quit: Konversation terminated!)
[20:48:46] *** Joins: letto (~letto@86.120.85.133)
[20:54:54] <Ronalds_Mazitis_> https://paste-bin.xyz/10850
[20:55:04] <Ronalds_Mazitis_> this up
[20:57:49] <yolo_> class X { int *ptr; void func(int *p) { ptr = p; }} -- Danglinglifetime: non-local variable ptr will use pointer to local variable 'p'? is this warning correct? ptr got a copy of p (both are pointers) and should be stack-destroy-safe?
[21:01:13] <jessicara> it's got a copy of the pointer but what it points to isn't copied
[21:03:50] <InPhase> yolo_: It does not follow good ownership rules.  There are times when you want to do that for low level components, but it is a bad idea in anything touching higher level logic.
[21:04:45] *** Joins: g0zart (~g0zart@gateway/vpn/pia/g0zart)
[21:04:49] <InPhase> yolo_: If objects of type X exceed the lifetime of whatever was passed to func, you have a disaster waiting to happen.
[21:06:37] <yolo_> it's pretty low level indeed, it's dangerous yes, but technically it's correct? it's different from return-a-ptr-to-local-variable from a function, because when the caller dereference the ptr its content might be gone and lead to UB.
[21:07:05] <yolo_> InPhase: that's true, it's from other 'famous' guys' code that I'm studying :)
[21:08:03] <InPhase> yolo_: There's no determination of "correct" out of context for this.  The warning is because it's a sign something dangerous could be happening based on larger code structure.
[21:08:20] <InPhase> Nothing UB has happened in the line of code shown.
[21:09:11] *** Joins: ravan__ (~ravan@user/ravan)
[21:09:44] <InPhase> Actually...  I see the exact text of the warning you quoted does not match the implementation shown.  Is that the real source code, or an example of it used to illustrate the point?
[21:10:23] <yolo_> https://github.com/dcblack/SystemC-Engine/blob/master/engine%2B.cpp  #line 34
[21:11:06] <yolo_> the code blows up my warning settings and I'm trying to clean it to 0
[21:11:25] <InPhase> Googling the warning shows me cppcheck, a static analyzer.  Is this what you're using?
[21:11:52] <InPhase> Also, I found it because googling that warning led to issue reports showing false positives on this very warning.
[21:11:54] *** Quits: ravan_ (~ravan@user/ravan) (Ping timeout: 260 seconds)
[21:13:19] <yolo_> yes i use cppcheck and clangtidy
[21:13:39] <InPhase> Sounds like you're getting another one of those false positives.  Maybe report it.
[21:14:49] <yolo_> u mean the code itself is actually safe here?
[21:15:29] <InPhase> No, the code looks very troubled.
[21:15:36] <InPhase> But not for that reason.
[21:16:12] <Raziel> when the code needs a psychiatrist, not a linter: "the code looks very troubled"
[21:16:20] <InPhase> Your first usage of Did_update me is checking an uninitialized bool.
[21:17:07] <yolo_> yes lots of warnings for that sort of things, but the Error level is the one I showed above
[21:17:14] <InPhase> You have a struct that you're not initializing with a public non-encapsulated pointer, and you're actually using its members uninitialized.
[21:17:53] <yolo_> I intend to fix them and send a PR
[21:17:54] <InPhase> Good strategy is to recognize this as a categorical error, and redesign it encapsulated so that it provides guarantees of correct defined behavior.
[21:19:29] <Raziel> to me, that looks a lot more like C than C++
[21:19:32] <InPhase> Note that me.update() uses counter without checking if it was ever set.
[21:19:41] <Raziel> and the Copyright: (c)2003-2006 is probably a hint as to why
[21:19:42] <Raziel> >_>
[21:20:01] <InPhase> Oh, 2003-2006.  So I guess this is not yolo's code.
[21:20:09] *** Quits: g0zart (~g0zart@gateway/vpn/pia/g0zart) (Quit: Leaving)
[21:20:25] *** Joins: g0zart (~g0zart@gateway/vpn/pia/g0zart)
[21:20:41] <yolo_> it's not my code, it's David's code who is one of the most famous systemc mentor, but, this is probably very old code
[21:20:57] <yolo_> he pointed me to this repo yesterday
[21:23:35] <Ronalds_Mazitis_> https://paste-bin.xyz/10850
[21:23:41] <Ronalds_Mazitis_> string and array of strings
[21:23:43] <Ronalds_Mazitis_> still there
[21:23:52] *** Joins: horribleprogram (~user@2607:fea8:7040:830:11bf:d2d3:8016:cbd1)
[21:23:58] *** Quits: horribleprogram (~user@2607:fea8:7040:830:11bf:d2d3:8016:cbd1) (Changing host)
[21:23:58] *** Joins: horribleprogram (~user@user/horribleprogram)
[21:24:04] <InPhase> I'm not familiar with systemc.  But it's no slight on him as I see it.  Write code long enough and you're going to write something that's both complicated and has troubled code in it.  This is one of them.  That struct appears to be wrong as-is in usage, and should be rewritten to guard it.
[21:24:06] <cbreak> Ronalds_Mazitis_: try a proper pastebin
[21:24:09] <horribleprogram> What's this conan build system thingty
[21:24:23] <cbreak> horribleprogram: isn't it some kind of dependency manager?
[21:24:27] <horribleprogram> yeah
[21:24:29] <cbreak> a build system is something like cmake
[21:24:39] <horribleprogram> well cmake isn't
[21:24:43] <Ronalds_Mazitis_> code is basic asf why do You need thing that can be executed if filesystem is needed
[21:24:45] <cbreak> it's so meta
[21:24:53] <horribleprogram> cmake is a build build system
[21:24:59] <horribleprogram> a build system build system
[21:25:08] <horribleprogram> yeah it sucks
[21:25:15] <cbreak> nah. cmake is great
[21:25:15] <horribleprogram> I'm trying to find a replacement
[21:25:21] <yolo_> InPhase: systemc is new to me, but frankly hardware folks writing c++ scares me a bit. Thanks for the pointers, I'm to 'revamp' this code
[21:25:22] <Ronalds_Mazitis_>  error: â€˜stringâ€™ was not declared in this scope
[21:25:23] <Ronalds_Mazitis_>    52 |  std::vector <string> arr;
[21:25:25] <cbreak> well. It's better than the alternatives
[21:25:30] <cbreak> Ronalds_Mazitis_: use std::string
[21:25:35] <m_ben> horribleprogram: it's a package manager
[21:25:42] <horribleprogram> m_ben: that makes no sense
[21:25:43] <InPhase> horribleprogram: Sometimes I use bash files to create CMakeLists files to help out.  This produces a build system build system build system.
[21:25:45] <cbreak> Ronalds_Mazitis_: you need to fully qualify names that aren't in scope or found via ADL
[21:25:52] <horribleprogram> InPhase: lolol
[21:25:53] <Raziel> why are we here? just to suffer?
[21:26:21] <m_ben> horribleprogram: are you asking about conan.io?
[21:26:22] <InPhase> yolo_: If you're going to thank me for pointers, at least thank me for smart pointers.  ;)
[21:26:26] <Raziel> Ronalds_Mazitis_, copypasting random shit from places isn't gonna help if you don't understand how that shit works at all
[21:26:29] <cbreak> horribleprogram: I'm not sure since I've not used it myself, but I think conan relies somewhat on cmake, but in really stupid ways
[21:26:33] <horribleprogram> thank you
[21:26:39] <horribleprogram> yeah trying to find it and this is it
[21:26:51] <m_ben> horribleprogram: Conan, the C/C++ Package Manager
[21:26:57] <horribleprogram> yes
[21:27:03] <LordKalma> cmake is great
[21:27:05] <LordKalma> conan is cool too
[21:27:26] <horribleprogram> so Cmake -> Ninja
[21:27:26] <cbreak> I prefer to let users manage dependencies how ever. via apt, brew, ...
[21:27:26] *** Quits: onizu (uid373383@id-373383.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[21:27:34] <yolo_> InPhase: I thank you for 'shared-ing' your smart pointers uniquely.
[21:27:37] <cbreak> mandating conan seems dumb
[21:27:44] <cbreak> but if users want to use conan, their choice
[21:27:47] <InPhase> yolo_: And yeah, in my experiences going over C++ code written by hardware-focused people, there are often deviations of exactly this type from good C++ practice.
[21:28:07] <LordKalma> I don't like "conan inside cmake" either too much. The problem is that some things, with conan, you get find_package files for them that don't exist elsewhere
[21:28:14] *** Quits: kraa (~kraa@107-190-7-216.cpe.teksavvy.com) (Ping timeout: 268 seconds)
[21:28:28] <LordKalma> Do not copy C++ from hardware people
[21:28:35] <LordKalma> it's BAD C with classes-type of code
[21:28:38] <horribleprogram> it's written in Python so yeah I'll look at it
[21:28:40] <LordKalma> (most of the type)
[21:28:45] <LordKalma> *time
[21:29:19] <cbreak> Ronalds_Mazitis_: also, using system to call a shell with cat inside is idiotic
[21:29:29] <Raziel> cbreak, are you implying manually downloading the dependency's source, building it, then manually linking it is not how people do it normally?
[21:29:30] <Raziel> fff
[21:29:33] <cbreak> Ronalds_Mazitis_: what were you thinking when you wrote that?
[21:29:39] <yolo_> can we all going back to old makefile? I tried various and now just use Makefiles, life is much simpler
[21:29:40] <cbreak> Raziel: it's how I do it
[21:29:47] <Raziel> woo, I am not alone
[21:29:47] <cbreak> sometimes
[21:29:57] <cbreak> but usually only once, before adding it as submodule
[21:30:01] <horribleprogram> yolo_: u should always avoid typedefs, typedef unsigned char *byte_pointer; for example, use #define BYTE_POINTER (unsigned char *)
[21:30:14] <cbreak> or as part of a docker file for some weirdo packaged system hack
[21:30:24] <InPhase> yolo_: Makefiles do not do a good job of finding system libraries in a cross-platform manner.
[21:30:31] <cbreak> I do prefer apt or similar if possible
[21:30:41] <InPhase> yolo_: Hence the original problem.
[21:30:45] <cbreak> yolo_: makefiles are terrible, unfortunately
[21:30:45] <horribleprogram> yolo_: also, you should never use "const"
[21:30:50] <LordKalma> horribleprogram, did you just suggest macros instead of language features?
[21:30:59] <LordKalma> okay, you're joking haha I get it now
[21:31:03] <cbreak> if you thought the cmake language was bad, make's even worse :(
[21:31:12] <cbreak> at least in cmake, whitespace / indentation isn't super significant
[21:31:16] <LordKalma> cmake language isn't horrible if you know it :D
[21:31:17] <yolo_> InPhase: yes cmake does it better but it brings in its own compexities and problems. I found write 3 Makefils(windows/linux/macos) faster than reading Cmake books
[21:31:18] <Raziel> LordKalma, he is named "horribleprogram" after all
[21:31:23] <LordKalma> they are*
[21:31:25] <cbreak> LordKalma: yes... yes it is.
[21:31:27] <m_ben> talking about bad languages, you all clearly have never used vimscript :D
[21:31:31] <cbreak> it's stringly-typed
[21:31:37] <horribleprogram> yolo_: always avoid unnecessary parentheses... 1 | 0xFF & 0x01 << 4 is clear enough
[21:32:07] <LordKalma> https://www.youtube.com/watch?v=YxortD9IxSc // Best troll cppcon talk :D
[21:32:21] <horribleprogram> lol
[21:32:32] <InPhase> yolo_: Yeah, cmake is fairly flawed, and documented poorly.  I just haven't found better.  Most niche things people suggest when you say "I haven't found better" aren't really much better.  But, I hold out hope that one will appear.
[21:32:34] *** Quits: ravan__ (~ravan@user/ravan) (Quit: Leaving)
[21:32:36] <horribleprogram> always assume little endian 64-bit
[21:32:57] <horribleprogram> sizeof(long) is always 8, sizeof(void *) is always 8
[21:32:57] <LordKalma> cmake is documented well. The problem it's reference documentation, not learning documentation
[21:33:00] <LordKalma> but they are improving
[21:33:03] <cbreak> I try to not assume things about hardware unless I have to.
[21:33:08] <LordKalma> now there is an official tutorial!
[21:33:27] <horribleprogram> LordKalma: dude CMake has the literally worst documentation
[21:33:37] <cbreak> heh
[21:33:42] <cbreak> horribleprogram: no :/
[21:33:44] <cbreak> I've seen worse.
[21:33:48] <yolo_> Makefile.Linux Makefile.windows Makefile.macos, plain and simple, for me that is
[21:33:55] <horribleprogram> bro wtf does target_link_libraries() do
[21:34:06] <horribleprogram> how do u set(CMAKE_CXX_STANDARD)
[21:34:06] <cbreak> that's documented nicely.
[21:34:08] <LordKalma> yolo_, hahaha no., like, NO
[21:34:09] <horribleprogram> no it's not
[21:34:19] <cbreak> yolo_: that'll break so hard
[21:34:37] <cbreak> if you need anything beyond basic system dependencies, and maybe bundled deps
[21:35:20] <cbreak> horribleprogram: https://cmake.org/cmake/help/latest/command/target_link_libraries.html
[21:35:28] <cbreak> I think the documentation isn't too bad.
[21:35:50] <cbreak> it's just not a good language
[21:35:53] <horribleprogram> cbreak: sure, kk let's go through it together... what's a target?
[21:36:05] <cbreak> you don't know that? :O
[21:36:06] <computerquip> You should really read the docs....
[21:36:08] <cbreak> the thing you build.
[21:36:22] <cbreak> targets are created by add_executable, add_library, ...
[21:36:23] <horribleprogram> it's not actually
[21:36:35] <horribleprogram> it's a "reference" to a thing u build...
[21:36:54] <computerquip> No.
[21:37:07] <cbreak> references are alternate names for objects :D they can be used interchangeably with the original object
[21:37:08] <horribleprogram> add_library(foo STATIC foo.c)
[21:37:22] <horribleprogram> foo is a target now
[21:37:32] <LordKalma> targets might now even be build things
[21:37:39] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[21:37:42] <LordKalma> add_library(foo INTERFACE) ;)
[21:37:47] <horribleprogram> exactly
[21:37:48] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[21:37:48] *** ChanServ sets mode: +v npaperbot
[21:38:14] <horribleprogram> trust me I've read CMake's entire documentation, I love build systems as a "programming domain of inquiry"
[21:38:31] <horribleprogram> I literally go from language to language studying the build systems
[21:38:42] <yolo_> what's your realization then
[21:38:53] <horribleprogram> package management, dependency management, segregation of different versions... it's a science
[21:38:55] <horribleprogram> Gradle is the best
[21:39:01] <InPhase> LordKalma: The same presenter, elsewhere demonstrating his broad understanding of the software field:  https://pbs.twimg.com/media/FCIyXy5WUAYA8Eu?format=jpg&name=orig
[21:39:02] <computerquip> dear lord
[21:39:09] <horribleprogram> it is, it's just slow
[21:39:25] <Ronalds_Mazitis_> 			  system("ffmpeg -i name2 -ss 00:03 -to 00:08 -c:v libx264 -crf 30 trim_opseek_/converts/name2.mp4")
[21:39:36] <Raziel> Ronalds_Mazitis_, stop using system
[21:39:40] <Ronalds_Mazitis_> I need to insert time variables and output file name
[21:39:42] <Raziel> make a bash script if that's what you're gonna do
[21:39:48] <horribleprogram> LOL
[21:39:50] <horribleprogram> LOLOL
[21:39:55] <horribleprogram> Ronalds_Mazitis_: WTF BRO LOLOL
[21:40:08] <Ronalds_Mazitis_> wut
[21:40:15] <yolo_> i used gradle when doing android, you need JVM
[21:40:16] <horribleprogram> dude... :/
[21:40:43] <LordKalma> InPhase, I LOLed
[21:40:51] <Ronalds_Mazitis_> I don't program c++ I like php for putting arguments in strings
[21:40:58] <horribleprogram> why are you even including ANY header files that start with c
[21:41:02] <Ronalds_Mazitis_> in fact php is so much more logical
[21:41:09] <Ronalds_Mazitis_> wut?
[21:41:14] <horribleprogram> if u do #include <cstdlib> ur not using C++ correctly
[21:41:17] <Ronalds_Mazitis_> where
[21:41:18] <Ronalds_Mazitis_> ?
[21:41:22] <computerquip> uh
[21:41:27] <computerquip> Can't agree with that one either
[21:41:31] <Ronalds_Mazitis_> where do you see that
[21:41:34] <horribleprogram> system
[21:41:37] <computerquip> cstdint is a fairly normal include
[21:41:41] <Ronalds_Mazitis_> I don't have that in my code
[21:41:56] *** Quits: nojhan (uid443807@2a03:5180:f:2::6:c59f) (Quit: Connection closed for inactivity)
[21:41:56] <horribleprogram> Ronalds_Mazitis_: ur code is literally
[21:42:10] <Ronalds_Mazitis_> dude I don't know wtf you talk about
[21:42:13] <Ronalds_Mazitis_> it's not there
[21:42:17] <yolo_> "Programming is easy. Idiots can learn it in 21 days, even if they are dummies."
[21:42:20] <Ronalds_Mazitis_> #include <string>
[21:42:21] <Ronalds_Mazitis_> #include <iostream>
[21:42:21] <Ronalds_Mazitis_> #include <filesystem>
[21:42:22] <Ronalds_Mazitis_> #include <algorithm>
[21:42:27] <Ronalds_Mazitis_> these are my includes
[21:42:46] <computerquip> Ronalds_Mazitis_, I would just ingore him, he's trolling or something.
[21:42:48] <horribleprogram> Ronalds_Mazitis_: std::string bash_script = R"( <shell-script> )"; system(bash_script);
[21:42:52] <LordKalma> wtf is going on on this chat today?
[21:43:22] <Ronalds_Mazitis_> horibleprogram is the dude that I dissed on twitter
[21:43:25] <InPhase> Ronalds_Mazitis_: While you can hack out a thing that calls system(), using system is not good idiomatic C++.  It also comes with specific hazards in that you need to sanitize everything that gets compiled into the text of a system() call carefully if you want to get reliable and secure behavior.  (If you are doing php which is web-focused without doing this sort of sanitization, you need to go back
[21:43:31] <InPhase> and fix those php scripts.)
[21:43:39] *** Quits: skapata (~Skapata@user/skapata) (Ping timeout: 268 seconds)
[21:43:41] <cbreak> Ronalds_Mazitis_: you should look up how std::stringstream works
[21:43:51] <cbreak> that's probably the best you can get in older C++
[21:43:52] <horribleprogram> Ronalds_Mazitis_: ^
[21:43:53] *** Quits: g0zart (~g0zart@gateway/vpn/pia/g0zart) (Quit: Leaving)
[21:44:00] <cbreak> but really, I recommend learning bash
[21:44:06] <cbreak> for this job, it's a better tool
[21:44:18] <horribleprogram> wait wait what environment is he on
[21:44:21] *** Joins: ravan (~ravan@user/ravan)
[21:44:29] <cbreak> when ever you want to call std::system, think hard about your choice of tools
[21:44:36] <InPhase> horribleprogram: Earlier was system("cat somefile");
[21:44:39] <horribleprogram> LOL
[21:44:48] <InPhase> So, Linux probably.  :)
[21:45:09] <xkoncek> is "void" a primitive data type?
[21:45:16] <cbreak> xkoncek: no
[21:45:21] <cbreak> it's an incomplete type
[21:45:23] <LordKalma> void is the lack of a data type :p
[21:45:24] <horribleprogram> xkoncek: technically it's incomplete
[21:45:27] <cbreak> ... but it's very special
[21:45:28] <LordKalma> haha
[21:46:04] <cbreak> << TYPE<void>()
[21:46:04] <geordi> error: no matching function for call to 'TYPE<void>()'
[21:46:21] <xkoncek> funny, i was just reading Java specs and it is not specified among primitives there as well
[21:46:34] <cbreak> it's not a primitive
[21:46:45] <cbreak> << sizeof(void)
[21:46:45] <geordi> error: invalid application of 'sizeof' to a void type
[21:46:51] <xkoncek> nor in Java
[21:47:13] <xkoncek> i am saying i am surprised how similar the languages wordings are in this case
[21:47:41] <cbreak> Java was probably written with knowledge of ancient C++
[21:47:42] <horribleprogram> xkoncek: I learned Java before C++ and it ruined my life
[21:48:01] <LordKalma> I learned a bit of C# after C++ and it ruined C++ :D
[21:48:08] <horribleprogram> lol
[21:48:11] <LordKalma> this language is shit in terms of its stdlib hahaha
[21:48:20] <cbreak> C# is so bad :/
[21:48:31] <cbreak> I had to use it for some projects on Unity 3D...
[21:48:32] <horribleprogram> eh I'm actually a fan, I'm reading C# 9 now
[21:48:38] <cbreak> everything in it is so inconvenient
[21:48:45] <cbreak> it's better than Java, but... that's a low bar
[21:48:46] <horribleprogram> it's Java
[21:48:52] <horribleprogram> exactly lol
[21:49:52] <cbreak> remind me: does C# have free functions?
[21:50:25] <LordKalma> no
[21:50:29] <horribleprogram> cbreak: that makes no sense
[21:50:34] <horribleprogram> cbreak: cuz everything is on the stack
[21:50:47] <xkoncek> huh?
[21:50:52] <LordKalma> wut?
[21:50:54] <cbreak> horribleprogram: so? :)
[21:50:59] <LordKalma> C#'s whole thing is reference semantics...
[21:50:59] <cbreak> c++ has free functions
[21:51:07] <LordKalma> it has static functions, not free functions
[21:51:28] <cbreak> LordKalma: lame :(
[21:51:35] <xkoncek> i honestly don't think free functions are something great
[21:51:41] <cbreak> I think they're useful.
[21:51:58] <cbreak> because not every function belongs to exactly one single type
[21:52:02] *** Joins: skapata (~Skapata@2804:14c:87b0:a6f9:a052:a7f8:c6e4:b537)
[21:52:02] *** Quits: skapata (~Skapata@2804:14c:87b0:a6f9:a052:a7f8:c6e4:b537) (Changing host)
[21:52:02] *** Joins: skapata (~Skapata@user/skapata)
[21:52:22] <xkoncek> yeah but still you would namespace them
[21:52:23] <InPhase> I don't use a lot of free functions in production, but it's nice to have them for certain purposes.
[21:52:34] <cbreak> xkoncek: sure. In the namespace of my library
[21:53:05] <vdamewood> The bonkers thing is that while C# doesn't have free functions. Visual Basic (.NET) does.
[21:53:37] <InPhase> Of course with the lack of free functions, you can just write class FreeFunctions.
[21:53:48] <xkoncek> visual basic is a totally different lang?
[21:53:59] <xkoncek> and .net is the VM?
[21:54:02] <vdamewood> xkoncek: It's implemented with the same runtime.
[21:54:45] <vdamewood> xkoncek: "These two programs compile to the same byte code" was one of the selling points on C# and VB.NET interoperability back in the day.
[21:55:23] <InPhase> vdamewood: That was the very thing that kept me away from C# for as long as I could.
[21:55:27] <horribleprogram> yeah LordKalma u were right about Conan, it's actually a pretty cool Python wrapper that provides a cool way to generate CMakeLists.txt
[21:55:39] <LordKalma> not cmakelists
[21:55:44] <LordKalma> but library-config.cmake :D
[21:55:51] <cbreak> what's that for?
[21:56:01] <LordKalma> for find_package(library) :D
[21:56:12] <cbreak> find_package works without that
[21:56:20] <xkoncek> make a build system to build configs for your build systems
[21:56:27] <computerquip> Conan can (and probably should) be used where your cmake script isn't aware of conan.
[21:56:34] <LordKalma> u guys really critice cmake and clearly don't understand it
[21:56:38] <LordKalma> not conan
[21:57:03] <cbreak> computerquip: yes.
[21:57:07] <LordKalma> *nor conan
[21:57:13] <vdamewood> InPhase: Yeah, when someone explained to me that C# had a bigger impact on VB.NET than VB had on C# or .NET overall, I gave it a shot.
[21:57:22] *** Joins: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it)
[21:57:40] <LordKalma> cbreak, no it doesn't
[21:57:48] <LordKalma> cmake actually ships a lot of those files internally
[21:57:57] <cbreak> LordKalma: cmake ships FindXXX.cmake
[21:58:00] <cbreak> find scripts
[21:58:03] <LordKalma> which is similar
[21:58:06] <LordKalma> but not the same
[21:58:10] <LordKalma> conan can generate either
[21:58:17] <cbreak> libraries can ship LibraryConfig.cmake files when they are built
[21:58:22] <horribleprogram> LordKalma: I'm reading the source code right now... :/ self._build(build_type=build_type, target=target) like it calls the cmake executable with a --config
[21:58:24] <cbreak> none of the two needs conan support
[21:58:42] <LordKalma> again, nobody talked about needing :)
[21:59:00] <cbreak> I did. I said cmake doesn't need that. It can work without.
[21:59:20] <LordKalma> well, there are lots of libraries with neither lib-config or findLib :D
[21:59:23] <cbreak> cmake can even use package config if you have stuff that uses it
[21:59:42] <LordKalma> my point is that with conan it sometimes happens that I use dependencies with the cmake generator
[21:59:45] <yolo_> c++ initialization order: is it still "mandatory" for c++17, google was unclear
[21:59:50] <LordKalma> and then have find_package that aren't elsewhere
[21:59:53] <LordKalma> for example
[21:59:56] <yolo_> got lots of -Wunorder warnings
[22:00:09] <LordKalma> [requires]\n doctest [generator]\n cmake_find_package
[22:00:17] <LordKalma> gives me a find_package(doctest)
[22:00:20] <yolo_> gosh, just use Makefile :)
[22:00:21] <cbreak> yolo_: initialization order is strict
[22:00:30] <cbreak> or what do you mean?
[22:00:31] <LordKalma> but there is no such files in doctest "official" crap
[22:00:37] <LordKalma> yolo_, no
[22:01:01] <LordKalma> again, I think y'all talk smack about cmake and tools like conan while totally and completely missing the point
[22:01:08] <LordKalma> btw, cmake-lang is shit, yeah
[22:01:33] <horribleprogram> yolo_: what the hell are u talking about yolo
[22:01:35] <computerquip> I don't really know where anyone was talking shit on cmake or conan
[22:01:36] <vdamewood> Oh, wow. Holy crap conan has a lot of dependencies.
[22:01:40] <Ronalds_Mazitis_>  system("ffmpeg -i name2 -ss" + (std::string(sakums)).c_str() + "to" + (std::string(beigas)).c_str() + "-c:v libx264 -crf 30 trim_opseek" +_(std::string(name2)).c_str())
[22:01:43] <yolo_> i had to fight with cmake (and some others), ever since switching back to makefile I actually had more time on the real coding side. It took a while to get first Makefile right for platforms, and after that it's trivial
[22:01:43] <cbreak> the order of initialization of objects within a class, or within a file, or within a function, are all clearly defined by the language
[22:01:49] <cbreak> Ronalds_Mazitis_: read what I wrote above
[22:01:54] <LordKalma> vdamewood, yes, I don't understand why it needs jinja2 but whatever
[22:01:55] <LordKalma> hahaha
[22:01:57] <horribleprogram> iight I'm fucken done with this
[22:01:59] <cbreak> Ronalds_Mazitis_: and learn to use variables. that code is junk
[22:02:06] <computerquip> It uses jinja2 for generation.
[22:02:12] <horribleprogram> Ronalds_Mazitis_: u actually got me to quit irc....
[22:02:14] <horribleprogram> take care bois
[22:02:15] <LordKalma> ahhhhhh smart
[22:02:17] *** Quits: horribleprogram (~user@user/horribleprogram) (Remote host closed the connection)
[22:02:18] <yolo_> cbreak: thanks, fixing that old code now
[22:02:23] *** Joins: lpapp_home (~lpapp_hom@90.242.131.156)
[22:02:27] <cbreak> Ronalds_Mazitis_: and don't use c_str(), you don't need it there
[22:02:30] *** Parts: lpapp_home (~lpapp_hom@90.242.131.156) ()
[22:02:37] <LordKalma> honestly, writing good cmake is an art
[22:03:01] <xkoncek> << std::string("dangle").c_str();
[22:03:02] <geordi> dangle
[22:03:05] <LordKalma> and after you learn how to do it nicely, 1) it's easy, and everything snaps together in place, 2) it's amazingly powerful, from testing to packaging, and 3) isn't that bad
[22:03:11] <cbreak> LordKalma: I think many people just copy bad ones instead of starting clean :/
[22:03:31] <LordKalma> the problem is that old Cmake (pre 3.0/2.8 depending on who you ask) was absolute shit
[22:03:38] <LordKalma> and people answer stack overflow questions with that old shit
[22:03:42] <LordKalma> then people copy paste that old shit
[22:03:45] <yolo_> with 100 red warning and lots of coding left undone, no time to study that one thounsand page of cmake doc
[22:03:54] <computerquip> Yeah, stackoverflow answers are actually the worst.
[22:03:59] <yolo_> shit can irc provide spellcheck
[22:04:10] <yolo_> or, even better, grammarly!
[22:04:14] <cbreak> yolo_: my most recent project I started with -Wall -pedantic -Werror :)
[22:04:23] <LordKalma> yolo_, if you let your code have 100 red lines, that's on you
[22:04:25] <cbreak> doing that saves a lot of annoyance later
[22:04:41] <LordKalma> I have clangd --clang-tidy with agressive linting levels
[22:04:43] <computerquip> Like, almost every single answer has a better more modern answer and even if it didn't, the answer is usually doing something like calling a linux-specific command or some dumb shit like that.
[22:04:54] <computerquip> It's really irritating.
[22:05:00] <cbreak> yes.
[22:05:04] <LordKalma> when I click build I rarely have any compiling bugs
[22:05:06] <LordKalma> semantics bugs, sure
[22:05:19] <LordKalma> but if you use a linter you have no excuse for build errors
[22:05:44] <LordKalma> yes, stack overflow info on cmake is *absolute shit*
[22:05:46] <LordKalma> like BAD
[22:06:05] <LordKalma> and sometimes I read some CMakeLists that make me want to bleach my eyes
[22:06:35] <yolo_> that's true, once my vim is silent, the only bug i saw is from GLIBCXX_DEBUG runtime errors, linters are really good along with cppcheck/clangtidy
[22:07:27] <yolo_> i'm sure those fancy gui IDE will make sure your code be bugfree, but old man don't use GUIs
[22:07:49] <cbreak> I like VSCode ... :/
[22:07:52] <LordKalma> vim/emacs/whatever the fuck all have LSP capability
[22:07:52] <cbreak> it's not that bad
[22:08:05] <LordKalma> vscode + clangd instead of official MS extensions = <3
[22:08:15] <cbreak> LordKalma: is that better?
[22:08:26] <cbreak> I never bothered going beyond the official ones, they worked ok enough
[22:08:28] <computerquip> My biggest issue with vscode is that it still manages to be slow in certain scenarios and that a lot of the officially support plugins are proprietary.
[22:08:31] <LordKalma> clangd is sooooo much better than intellisense, imgo
[22:08:38] <LordKalma> *imho
[22:08:41] <cbreak> of course
[22:08:50] <vdamewood> LordKalma: I recently read a cmake file thinking "Whoever wrote this didn't know what they were doing." The second line of that file was "Copyright 2019 vdamewood"
[22:09:09] <LordKalma> you just need the compile-commands.json
[22:09:11] <cbreak> but are they using actual MS intellisense? I thought they used something better
[22:09:16] <yolo_> i ended up ditch vscode and bought jetbrains full set, but I use vim 99% of the time, guess I just want to sponsor those Russia developers who wrote jetbrains
[22:09:20] <cbreak> since it was able to handle templates somewhat
[22:09:35] <computerquip> I was recently looking at some old cmake from like 2015 and it reminded me of a time where I was naive and thought people would give a shit if I write flexible robust cmake lol
[22:09:36] <LordKalma> yes, MS donated intellisense to vscode
[22:10:11] <LordKalma> computerquip, in the era of conan, they care
[22:10:14] <LordKalma> conan/vcpkg
[22:10:22] <LordKalma> also, it's a personal pride thing :) I love my clean cmake
[22:10:34] <LordKalma> https://github.com/librtlsdr/librtlsdr/blob/master/CMakeLists.txt
[22:10:41] <LordKalma> look at this fucking monstrousity
[22:10:48] <LordKalma> cmake 2.6, pre target-based
[22:11:11] <LordKalma> https://github.com/librtlsdr/librtlsdr/blob/master/cmake/Modules/FindThreads.cmake
[22:11:15] <vdamewood> CMake 2.x needs to be taken out to the back and shot.
[22:11:16] <LordKalma> this FindThreads is SOOOO BAD
[22:11:25] <LordKalma> Once I tried to package librtlsdr in conan
[22:11:32] <LordKalma> I gave up, this shit is so terrible
[22:11:45] <computerquip> On the upside, there isn't a mainstream distribution that supports CMake 2.8.
[22:11:56] <computerquip> Which sadly ended just fairly recently with CentOS 6 going EOL
[22:12:00] <LordKalma> any cmake version supports older cmake
[22:12:38] <LordKalma> For example, look at this shit:
[22:12:58] <LordKalma> https://github.com/librtlsdr/librtlsdr/blob/master/src/CMakeLists.txt#L189
[22:13:04] <LordKalma> if(UNIX) link with libm
[22:13:05] <LordKalma> but then
[22:13:08] <LordKalma> https://github.com/librtlsdr/librtlsdr/blob/master/src/CMakeLists.txt#L214
[22:13:12] <LordKalma> link with libm on windows
[22:13:23] <LordKalma> who wrote this was drunk as fuck
[22:15:05] <vdamewood> LordKalma: I like the way I do it better.
[22:16:02] <vdamewood> https://github.com/vdamewood/siliko/blob/master/lib/CMakeLists.txt#L61
[22:16:49] <LordKalma> at least that makes sense
[22:17:43] <vdamewood> LordKalma: By the way, On Apple platforms, linking with libm is a no-op. https://github.com/librtlsdr/librtlsdr/blob/master/src/CMakeLists.txt#L198
[22:18:08] <LordKalma> but on win32 is a build-time error
[22:18:17] <LordKalma> I didn't write that shit, it's completely horrible
[22:18:32] <LordKalma> I don't get why librtlsdr manages to have makefiles, autotools files and cmakelists and they are all terrible
[22:18:46] <LordKalma> One thing I notice is that C code/programmers are notoriously bad at build systems
[22:18:51] <LordKalma> have you notices that trend?
[22:19:06] <computerquip> lol yeah. It's one of my biggest pet peeves.
[22:19:10] <vdamewood> LordKalma: Seems to me to be all programmers.
[22:19:21] <computerquip> I know people who are totally competent in C++ but then have failing grades in the build scripts.
[22:19:40] <vdamewood> ... even me.
[22:20:25] <cbreak> Hmm... https://github.com/cbreak-black/ZFSWrapper/blob/master/CMakeLists.txt ... I'm not that bad...
[22:20:36] <cbreak> I'm sure that can be improved, but it should be rather easy to read
[22:23:59] <yolo_> except a very few, most c programmers(includig me) are trash. you learn real coding from java/c++ with OOD. it's hard to find solid c programmers due to its low entry requirements, anyone with a small brain dare to write C after one hour
[22:24:20] <yolo_> s/except a very few/except for very few/
[22:24:46] <LordKalma> cbreak, that's fine
[22:26:58] <yolo_> but if you can finish https://www.amazon.com/Extreme-Taking-Concurrency-advanced-capabilities-ebook/dp/B07XYX6FQL  then yeah you're golden C the programmer
[22:27:30] <vdamewood> LordKalma: Oh, bu the way, I figured you didn't write it. I just figured I'd add to you list of complaints about it.
[22:37:37] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[22:39:02] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[22:41:48] *** Quits: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Remote host closed the connection)
[22:50:16] <yolo_> http://ix.io/3EdR/cpp  -- only warning now is: line #38 : non-local variable 'counter' will use pointer to local variable 'count', counter is used by update() which needs a pointer to update the value passed, how do I fix this design
[22:53:33] <cbreak> yolo_: why not use a const pointer?
[22:53:39] <cbreak> the function is called "watch", not "change"
[22:55:01] <cbreak> yolo_: but it seems you want to keep a pointer to the outside of the class
[22:55:27] <yolo_> yes, unless there is a better way
[22:55:51] <cbreak> I'd probably use a reference there
[22:56:10] <cbreak> (given in the constructor)
[22:56:18] <cbreak> but pointers should work basically the same
[22:57:18] *** Quits: pakcjo (~pakcjo@user/pakcjo) (Ping timeout: 260 seconds)
[22:57:39] *** Joins: pakcjo (~pakcjo@user/pakcjo)
[22:58:07] <yolo_> is there a command tool to paste to wanderbox or godbelt, like those CLI pastebin tools
[22:58:28] <cbreak> curl? :D
[22:58:42] <yolo_> cbreak: thanks. I intend to paste them to wanderbox or godbelt via CLI, the curl-paste I know of is ix.io
[22:59:07] <cbreak> I mean, if there's some http thing you can post to, thencurl should be able to do it
[22:59:11] <cbreak> (I've never tried)
[22:59:36] *** Quits: m_ben (~m_ben@user/m-ben/x-7429725) (Quit: WeeChat 3.3)
[23:00:18] *** Joins: m_ben (~m_ben@user/m-ben/x-7429725)
[23:01:35] *** Quits: zmt00 (~zmt00@user/zmt00) (Ping timeout: 264 seconds)
[23:01:43] <yolo_> it will be verbose, for ix.io I do: cat whatever | curl  -F 'f:1=<-' ix.io
[23:02:08] <yolo_> you get a url, to get syntax highlight, you do: your-url/cpp
[23:02:58] *** Quits: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it) (Quit: Leaving.)
[23:03:45] *** Joins: zmt00 (~zmt00@user/zmt00)
[23:04:47] <cbreak> on macos I can do cat file | pbcopy
[23:05:02] <cbreak> and then just paste it in some pastesite :)
[23:06:28] <vdamewood> cbreak: pbcopy < file
[23:06:53] <cbreak> the flow must go to the right.
[23:07:00] <cbreak> everything else is ugly
[23:07:14] <m_ben> alias xcopy='xclip -selection clipboard'
[23:07:23] <m_ben> s/xcopy/pbcopy
[23:07:30] <cbreak> nice
[23:07:48] <vdamewood> Does that work in Wayland?
[23:08:33] <m_ben> vdamewood: no, xclip (or alternatively xsel) are x11 tools
[23:09:22] *** Quits: z9z0b3t1c (z9z0b3t1c@gateway/vpn/protonvpn/z9z0b3t1c) (Ping timeout: 268 seconds)
[23:11:39] <m_ben> yolo_: I use the following script http://ix.io/3Eec then I can just run "command | ix"
[23:11:52] <barix> wayland has wl-clipboard which is the xclip equivalent
[23:12:22] *** Joins: zmt01 (~zmt00@user/zmt00)
[23:15:31] *** Quits: zmt00 (~zmt00@user/zmt00) (Ping timeout: 245 seconds)
[23:17:11] *** Quits: zmt01 (~zmt00@user/zmt00) (Ping timeout: 245 seconds)
[23:17:12] *** Quits: mackal (~mackal@pool-96-237-249-63.bstnma.fios.verizon.net) (Quit: BE VIGILANT.)
[23:19:08] *** Joins: zmt00 (~zmt00@user/zmt00)
[23:19:25] *** Quits: riksteri (riksteri@gateway/vpn/airvpn/riksteri) (Read error: Connection reset by peer)
[23:19:53] *** Joins: mackal (~mackal@pool-96-237-249-63.bstnma.fios.verizon.net)
[23:22:12] *** Joins: riksteri (riksteri@gateway/vpn/airvpn/riksteri)
[23:26:24] *** Joins: Codaraxis (~Codaraxis@user/codaraxis)
[23:29:17] *** Quits: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao) (Quit: ZNC 1.8.2 - https://znc.in)
[23:29:41] *** Joins: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao)
[23:32:57] *** Joins: RoKenn (~RoKenn@2001:a61:3505:d101:5614:e8b5:af2f:f9af)
[23:32:58] *** Quits: RoKenn (~RoKenn@2001:a61:3505:d101:5614:e8b5:af2f:f9af) (Changing host)
[23:32:58] *** Joins: RoKenn (~RoKenn@user/rokenn)
[23:33:47] <KombuchaKip> I've tried asking in #glibc, but no one has an answer yet. This is really an inotify specific question, but someone here might have experience with it: If I want to create from within thread A an inotify and watch descriptor with inotify_init1(2) and inotify_add_watch(2) respectively to be monitored with select(2) or some other appropriate function in thread B, is there anything I need to do to either descriptor, or perhaps a specif
[23:33:47] <KombuchaKip> ic flag or flags to inotify_init1(2) to get this to work?
[23:35:33] <m_ben> KombuchaKip: have you tried asking in #linux?
[23:37:38] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[23:38:30] <KombuchaKip> m_ben: I thought about it, but figured it's more a glibc issue. But then it's actually not. That's just the interface. The implementation is in the kernel. So I might as well ask there too.
[23:39:03] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[23:39:18] <m_ben> KombuchaKip: it's definitively more #linux than #glibc :) plus, #linux has over 1800 users
[23:39:43] *** Joins: CppCon (~cppcon@104.132.34.90)
[23:39:52] * KombuchaKip nods
[23:41:48] *** Joins: LiaoTao_ (~LiaoTao@gateway/tor-sasl/liaotao)
[23:43:15] *** Quits: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao) (Ping timeout: 276 seconds)
[23:43:22] <LiaoTao_> KombuchaKip, I don't see why it should matter. Handles work on a per-process basis and the CLOEXEC stuff is to prevent malarky with forking. Are you experiencing problems?
[23:43:41] *** LiaoTao_ is now known as LiaoTao
[23:45:16] *** Joins: AbleBacon (~AbleBacon@user/AbleBacon)
[23:45:22] *** Joins: wootehfoot (~wootehfoo@user/wootehfoot)
[23:52:30] *** Joins: meator (~meator@user/meator)
[23:52:39] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Quit: My MacBook Pro has gone to sleep. ZZZzzzâ€¦)
[23:55:34] *** Quits: meator (~meator@user/meator) (Client Quit)
