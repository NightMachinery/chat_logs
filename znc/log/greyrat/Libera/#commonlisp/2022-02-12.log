[00:00:32] *** Quits: epony (epony@user/epony) (Ping timeout: 240 seconds)
[00:02:00] *** Quits: OlCe (~user@amontsouris-156-1-23-81.w92-151.abo.wanadoo.fr) (Ping timeout: 256 seconds)
[00:06:52] *** Quits: NotThatRPG_ (~NotThatRP@162-219-230-90.fttp.usinternet.com) (Read error: Connection reset by peer)
[00:07:24] *** Joins: NotThatRPG (~NotThatRP@162-219-230-90.fttp.usinternet.com)
[00:09:24] *** Quits: karlosz (~karlosz@47.151.136.69) (Ping timeout: 250 seconds)
[00:10:45] *** Joins: edgar-rft (~edgar-rft@ip-109-193-249-223.um39.pools.vodafone-ip.de)
[00:12:31] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[00:14:45] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[00:17:40] *** Joins: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1)
[00:19:19] *** Quits: cage (~cage@94-39-220-187.adsl-ull.clienti.tiscali.it) (Quit: rcirc on GNU Emacs 27.1)
[00:28:02] *** Quits: NotThatRPG (~NotThatRP@162-219-230-90.fttp.usinternet.com) (Read error: Connection reset by peer)
[00:28:08] *** Joins: NotThatRPG_ (~NotThatRP@162-219-230-90.fttp.usinternet.com)
[00:33:02] *** Joins: tfeb (~tfb@88.98.95.237)
[00:34:01] *** Quits: rogersm (~rogersm@90.166.180.250) (Quit: Leaving...)
[00:34:03] *** Quits: kpoeck (~kpoeck@2a01:598:92b7:6ea7:5066:804:f9a7:128c) (Ping timeout: 256 seconds)
[00:35:02] *** Quits: NotThatRPG_ (~NotThatRP@162-219-230-90.fttp.usinternet.com) (Read error: Connection reset by peer)
[00:35:09] *** Joins: NotThatRPG (~NotThatRP@162-219-230-90.fttp.usinternet.com)
[00:39:17] *** Quits: jeosol (~jeosol@user/jeosol) (Quit: Client closed)
[00:42:38] *** Quits: tfeb (~tfb@88.98.95.237) (Quit: died)
[00:51:01] *** Quits: cosimone (~user@93-47-230-95.ip115.fastwebnet.it) (Quit: ERC (IRC client for Emacs 27.1))
[00:52:44] *** Quits: Tallund (~Tallund@cbl-24-104-171-134.yyz.frontiernetworks.ca) (Quit: Client closed)
[00:54:40] *** Joins: kevingal (~quassel@2a02:8084:4140:f300:b4c5:b7b4:fceb:af93)
[00:59:54] *** Quits: Dynom (~niels@80-114-12-206.cable.dynamic.v4.ziggo.nl) (Quit: WeeChat 3.4)
[01:10:53] *** Quits: shka (~herr@109.231.0.226) (Ping timeout: 256 seconds)
[01:13:58] *** Quits: iamFIREcracker (~iamFIREcr@user/iamfirecracker) (Ping timeout: 256 seconds)
[01:14:26] *** Joins: iamFIREcracker (~iamFIREcr@user/iamfirecracker)
[01:19:08] *** moon-child is now known as bowl-of-petunias
[01:19:18] *** bowl-of-petunias is now known as moon-child
[01:26:55] *** Joins: alvaro121_ (~aa@201.230.126.66)
[01:27:16] *** Joins: lisp123 (~lisp123@5.30.23.247)
[01:28:08] *** Quits: alvaro121 (~aa@201.230.126.66) (Ping timeout: 256 seconds)
[01:31:49] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 240 seconds)
[01:44:44] *** Quits: pve (~pve@176-93-53-84.bb.dnainternet.fi) (Quit: leaving)
[01:49:10] *** Joins: OlCe (~user@amontsouris-156-1-23-81.w92-151.abo.wanadoo.fr)
[01:49:22] *** Parts: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1) (Error from remote client)
[01:49:44] *** Joins: vcarvalho (~vcarvalho@161.230.15.110)
[01:50:37] *** Joins: hhdave (~hhdave@ip212.ip-193-70-71.eu)
[01:53:20] *** Joins: epony (epony@user/epony)
[01:53:53] *** Quits: OlCe (~user@amontsouris-156-1-23-81.w92-151.abo.wanadoo.fr) (Remote host closed the connection)
[01:54:27] <skeemer> hello all i am new to slime and common lisp, how can i go to the previous/next command when using the slime repl?
[01:54:32] <skeemer> i am using evil also
[01:55:57] <Bike> slime-repl-previous-input. bound to Meta(Alt)-P by default
[01:55:58] <AeroNotix> skeemer: it's C-p / C-n .. not sure about evil tho
[01:56:07] <AeroNotix> sorry yeah M-p / M-n
[02:02:54] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 260 seconds)
[02:04:14] <skeemer> ok thanks AeroNotix
[02:04:27] <AeroNotix> well Bike gave you the actual correct information first
[02:04:40] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[02:05:47] *** Quits: sjl (~sjl@cpe-66-66-5-59.rochester.res.rr.com) (Quit: WeeChat 2.2-dev)
[02:10:04] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[02:12:02] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[02:12:45] *** Quits: hhdave (~hhdave@ip212.ip-193-70-71.eu) (Quit: hhdave)
[02:14:17] *** Quits: rgherdt (~rgherdt@port-92-195-61-212.dynamic.as20676.net) (Ping timeout: 240 seconds)
[02:15:29] <neominimum> Odd, mine are bound to C-p/C-n and I don't recall changing them, hmm...
[02:16:07] <neominimum> I'm using Doom Emacs though, that could explain it.
[02:16:51] *** Quits: NotThatRPG (~NotThatRP@162-219-230-90.fttp.usinternet.com) (Read error: Connection reset by peer)
[02:17:25] *** Joins: NotThatRPG (~NotThatRP@162-219-230-90.fttp.usinternet.com)
[02:18:44] <neominimum> Never mind, I forgot that I'm also using SLY too.
[02:25:15] *** Joins: OlCe (~user@amontsouris-156-1-23-81.w92-151.abo.wanadoo.fr)
[02:27:15] *** Joins: azimut_ (~azimut@gateway/tor-sasl/azimut)
[02:28:16] *** Joins: karlosz (~karlosz@47.151.136.69)
[02:29:39] *** Quits: OlCe (~user@amontsouris-156-1-23-81.w92-151.abo.wanadoo.fr) (Ping timeout: 256 seconds)
[02:29:47] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 250 seconds)
[02:31:24] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Ping timeout: 276 seconds)
[02:37:29] *** Joins: Tallund (~Tallund@cbl-24-104-171-134.yyz.frontiernetworks.ca)
[02:39:08] *** Joins: hashfunc1336 (~user@162.254.115.155)
[02:40:02] *** Joins: dre (~dre@2001:8003:c932:c301:880:1cdd:3f72:271d)
[02:51:35] *** Quits: azimut_ (~azimut@gateway/tor-sasl/azimut) (Remote host closed the connection)
[02:51:50] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[03:01:59] *** Joins: OlCe (~user@amontsouris-156-1-23-81.w92-151.abo.wanadoo.fr)
[03:08:21] *** Quits: NotThatRPG (~NotThatRP@162-219-230-90.fttp.usinternet.com) (Read error: Connection reset by peer)
[03:08:27] *** Joins: NotThatRPG_ (~NotThatRP@162-219-230-90.fttp.usinternet.com)
[03:13:40] *** Quits: wacki (~wacki@87.122.93.189) (Quit: Leaving.)
[03:16:34] *** Parts: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz) ()
[03:19:35] *** Joins: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz)
[03:20:33] *** Parts: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz) ()
[03:23:32] *** Quits: occ (~occ@user/occ) (Ping timeout: 240 seconds)
[03:29:01] *** Joins: lisp123 (~lisp123@5.30.23.247)
[03:29:50] *** Quits: kevingal (~quassel@2a02:8084:4140:f300:b4c5:b7b4:fceb:af93) (Remote host closed the connection)
[03:33:27] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 256 seconds)
[03:53:38] *** Quits: Bike (~Glossina@71.69.170.70) (Quit: Lost terminal)
[03:54:43] *** Joins: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz)
[03:58:06] *** Joins: Bike (~Bike@71.69.170.70)
[04:06:55] *** Quits: jmpeax_ (~jmpeax@host-68-169-157-168.VALOLT2.epbfi.com) (Quit: leaving)
[04:10:57] <White_Flame> skeemer: I'd also recommend being in #clschool
[04:11:52] <skeemer> thanks White_Flame !
[04:13:07] *** Quits: Oddity (~Oddity@user/oddity) (Ping timeout: 256 seconds)
[04:16:48] *** Joins: aeth_ (~aeth@user/aeth)
[04:16:54] *** Quits: aeth (~aeth@user/aeth) (Killed (NickServ (GHOST command used by aeth_)))
[04:16:59] *** aeth_ is now known as aeth
[04:19:50] *** Quits: OlCe (~user@amontsouris-156-1-23-81.w92-151.abo.wanadoo.fr) (Ping timeout: 256 seconds)
[04:27:25] *** Quits: morganw (~user@80.225.24.132) (Remote host closed the connection)
[04:30:30] *** Joins: Oddity (~Oddity@user/oddity)
[04:34:03] *** Quits: NotThatRPG_ (~NotThatRP@162-219-230-90.fttp.usinternet.com) (Read error: Connection reset by peer)
[04:34:27] *** Joins: NotThatRPG (~NotThatRP@162-219-230-90.fttp.usinternet.com)
[04:37:09] *** Quits: Tallund (~Tallund@cbl-24-104-171-134.yyz.frontiernetworks.ca) (Ping timeout: 256 seconds)
[04:40:40] *** Joins: akoana (~ah@user/akoana)
[04:46:47] *** Quits: vcarvalho (~vcarvalho@161.230.15.110) (Ping timeout: 256 seconds)
[04:49:44] *** Quits: VincentVega (~user@212.97.4.87) (Remote host closed the connection)
[04:54:40] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[05:04:04] *** Joins: occ (~occ@user/occ)
[05:07:12] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[05:12:47] *** Joins: igemnace (~ian@user/igemnace)
[05:21:03] *** Quits: hashfunc1336 (~user@162.254.115.155) (Remote host closed the connection)
[05:27:54] *** Joins: s-liao (~s-liao@101.86.96.21)
[05:29:58] *** Joins: lisp123 (~lisp123@5.30.23.247)
[05:34:37] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Client closed)
[05:34:38] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 256 seconds)
[05:34:38] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[05:36:50] *** Quits: xsperry (~xs@user/xsperry) (Remote host closed the connection)
[05:38:55] *** Quits: random-nick (~random-ni@87.116.167.125) (Ping timeout: 256 seconds)
[05:41:10] *** Joins: s-liao (~s-liao@101.86.96.21)
[05:41:23] *** Joins: lisp123 (~lisp123@5.30.23.247)
[05:41:55] *** Quits: lisp123 (~lisp123@5.30.23.247) (Client Quit)
[05:42:25] *** Joins: iamFIREc1 (~iamFIREcr@user/iamfirecracker)
[05:45:04] *** Joins: s-liao5 (~s-liao@101.86.96.21)
[05:45:09] *** Quits: iamFIREcracker (~iamFIREcr@user/iamfirecracker) (Ping timeout: 256 seconds)
[05:46:17] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[06:02:27] *** Quits: lambdart (~lambdart@189.4.76.230) (Remote host closed the connection)
[06:08:11] *** Quits: dre (~dre@2001:8003:c932:c301:880:1cdd:3f72:271d) (Ping timeout: 250 seconds)
[06:13:22] *** Joins: iamFIREcracker (~iamFIREcr@user/iamfirecracker)
[06:14:52] *** Quits: iamFIREc1 (~iamFIREcr@user/iamfirecracker) (Ping timeout: 256 seconds)
[06:15:45] *** Quits: s-liao5 (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[06:22:55] *** Joins: s-liao (~s-liao@101.86.96.21)
[06:44:38] *** Joins: lisper29 (~vibs29``@84-105-244-73.cable.dynamic.v4.ziggo.nl)
[06:49:21] <mfiano> Is there anything to be said about how conditions shall be named? I see it is somewhat common to name error conditions suffixed with "-ERROR", but this seems redundant to me. Are there any other arguably conventions regarding the hierarchy/structure/naming of conditions? This topic isn't talked about very much, and I'd like to provoke some sort of discussion on the matter for those (very few)
[06:49:22] <mfiano> of us that have experience with one of the most powerful features of the language.
[06:49:42] <mfiano> s/arguably/arguable/
[06:51:03] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Client closed)
[06:57:20] <Bike> i usually avoid the -error except for abstract classes. for example here's most of the conditions in cleavir https://github.com/s-expressionists/Cleavir/blob/main/CST-to-AST/conditions.lisp (beach wrote most of these, not me, mind)
[06:59:25] <Bike> this is also sort of the case with the standard, e.g. print-not-readable, undefined-function, floating-point-etc
[06:59:31] <mfiano> Bike: Thank you for the reference. I'll have a look in a few; just about to eat dinner.
[07:03:25] <edgar-rft> I'm always tempted to name conditions after human diseases :-)
[07:10:40] *** Joins: Oladon (~olad@98.43.81.226)
[07:10:43] *** Quits: waleee (~waleee@h-98-128-229-110.NA.cust.bahnhof.se) (Ping timeout: 256 seconds)
[07:10:52] *** Joins: s-liao (~s-liao@101.86.96.21)
[07:14:49] *** Quits: terrorjack (~terrorjac@2a01:4f8:1c1e:509a::1) (Quit: The Lounge - https://thelounge.chat)
[07:15:42] *** Joins: terrorjack (~terrorjac@2a01:4f8:1c1e:509a::1)
[07:30:32] <beach> Good morning everyone!
[07:36:17] *** Joins: lisp123 (~lisp123@5.30.23.247)
[07:38:26] *** Quits: igemnace (~ian@user/igemnace) (Quit: WeeChat 3.4)
[07:38:29] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[07:48:27] *** Joins: s-liao (~s-liao@101.86.96.21)
[07:54:21] *** Quits: Bike (~Bike@71.69.170.70) (Quit: sleep)
[07:58:19] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[08:01:48] *** Joins: IPmonger (~IPmonger@c-69-242-83-226.hsd1.pa.comcast.net)
[08:02:06] *** Quits: IPmonger (~IPmonger@c-69-242-83-226.hsd1.pa.comcast.net) (Remote host closed the connection)
[08:03:44] *** Quits: AeroNotix (~xeno@185.107.67.252) (Quit: WeeChat 3.4)
[08:03:48] *** Joins: lisp123_ (~lisp123@45.86.203.177)
[08:07:57] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 256 seconds)
[08:14:24] *** Joins: semz_ (~semz@user/semz)
[08:16:54] *** Quits: semz (~semz@user/semz) (Ping timeout: 250 seconds)
[08:24:12] *** semz_ is now known as semz
[08:24:49] *** Quits: lisp123_ (~lisp123@45.86.203.177) (Remote host closed the connection)
[08:27:19] *** Joins: lisp123_ (~lisp123@45.86.203.9)
[08:31:57] *** Quits: lisp123_ (~lisp123@45.86.203.9) (Ping timeout: 240 seconds)
[08:41:56] *** Quits: jealousmonk (~user@user/jealousmonk) (Quit: ERC 5.4.1 (IRC client for GNU Emacs 27.1))
[09:08:16] *** Joins: dre (~dre@2001:8003:c932:c301:1c5e:3f1c:f7a4:be5b)
[09:19:11] *** Joins: lisp123 (~lisp123@45.86.203.9)
[09:20:36] *** Quits: dre (~dre@2001:8003:c932:c301:1c5e:3f1c:f7a4:be5b) (Ping timeout: 250 seconds)
[09:25:10] *** Joins: jeosol (~jeosol@user/jeosol)
[09:36:56] *** Joins: lisp123_ (~lisp123@5.30.23.247)
[09:40:53] *** Quits: lisp123 (~lisp123@45.86.203.9) (Ping timeout: 256 seconds)
[09:46:53] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca) (Remote host closed the connection)
[09:48:26] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[10:05:35] *** Quits: occ (~occ@user/occ) (Ping timeout: 256 seconds)
[10:11:16] *** Joins: occ (~occ@user/occ)
[10:23:22] *** Joins: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1)
[10:34:52] *** Joins: shka (~herr@109.231.0.226)
[10:37:15] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[11:13:44] *** Joins: IPmonger (~IPmonger@c-69-242-83-226.hsd1.pa.comcast.net)
[11:13:59] *** Quits: IPmonger (~IPmonger@c-69-242-83-226.hsd1.pa.comcast.net) (Remote host closed the connection)
[11:17:08] <jackdaniel> mfiano: usually I'm defining abstract types: foo-warning, foo-error etc., and after that concrete conditions that are signaled inherit from them and are named like bar-doesnt-exist and such
[11:19:16] *** Joins: ogamita (~pjb@2a01:cb11:8036:90c2:828:5888:3c6b:3bf8)
[11:21:32] *** Quits: lisp123_ (~lisp123@5.30.23.247) (Remote host closed the connection)
[11:22:22] *** Joins: lisp123 (~lisp123@5.30.23.247)
[11:23:47] *** Joins: rgherdt (~rgherdt@port-92-195-61-212.dynamic.as20676.net)
[11:25:25] *** Joins: karlosz_ (~karlosz@47.151.136.69)
[11:26:57] *** Quits: ogamita (~pjb@2a01:cb11:8036:90c2:828:5888:3c6b:3bf8) (Ping timeout: 240 seconds)
[11:27:06] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 260 seconds)
[11:29:22] *** Quits: karlosz (~karlosz@47.151.136.69) (Ping timeout: 256 seconds)
[11:29:22] *** karlosz_ is now known as karlosz
[11:29:49] *** Joins: lisp123 (~lisp123@5.30.23.247)
[11:30:35] *** Joins: treflip (~user@user/treflip)
[11:41:05] *** ogamita`` is now known as ogamita
[11:46:01] *** Joins: blacked (~blacked@user/blacked)
[11:46:19] *** blacked is now known as pingpongball
[11:53:20] <pingpongball> !hi
[11:54:21] <beach> Hello pingpongball.
[11:55:38] <pingpongball> hello
[11:55:45] <pingpongball> beach :)
[11:57:15] <pingpongball> What gui library does that NYXT browser uses?
[11:57:24] <pingpongball> as it is made from common lisp.
[11:59:30] <moon-child> nyxt is a chrome over webkit
[12:00:33] <lisp123> Docs say GTK / Qt
[12:01:00] <lisp123> looks like GTK
[12:01:07] <lisp123> Re QT: "Qt is only required if you want to build Nyxt over the WebEngine renderer."
[12:01:38] <lisp123> I think its a very impressive project that seems to be getting more popular every day
[12:04:29] *** Joins: lisp123_ (~lisp123@45.86.203.9)
[12:06:16] <pingpongball> oh yeah
[12:07:00] <pingpongball> i was thinking as like javafx,swing - java, arent there native on common lisp?
[12:07:17] <moon-child> mcclim?
[12:07:19] <beach> Yes, CLIM.
[12:07:34] *** Quits: treflip (~user@user/treflip) (Remote host closed the connection)
[12:07:58] <beach> pingpongball: McCLIM is a free implementation of the Common Lisp Interface Manager (CLIM) specification.
[12:08:01] <jackdaniel> to beat the dead horse - nyxt doesn't use clim, it uses a foreign toolkit
[12:08:27] <pingpongball> if i compare with gui that popular languages provides , with CLIM what do you think?
[12:08:28] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 256 seconds)
[12:08:59] <beach> pingpongball: CLIM is way more impressive and way more adapted to Common Lisp.
[12:09:20] <beach> pingpongball: CLIM has the concept of "presentation types" which I understand is still unique.
[12:09:47] <pingpongball> oh :
[12:09:54] *** Joins: treflip (~user@user/treflip)
[12:11:29] *** Joins: lisp123 (~lisp123@5.30.23.247)
[12:14:37] *** Quits: lisp123_ (~lisp123@45.86.203.9) (Ping timeout: 240 seconds)
[12:24:14] *** Quits: pingpongball (~blacked@user/blacked) (Quit: Client closed)
[12:27:35] *** Joins: pve (~pve@37-33-90-31.bb.dnainternet.fi)
[12:27:37] *** Parts: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1) (Error from remote client)
[12:29:54] *** Joins: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1)
[12:30:22] *** Joins: cosimone (~user@93-44-184-23.ip98.fastwebnet.it)
[12:30:24] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[12:40:44] *** Joins: silasfox (~sbv@p200300cec74715008ae52312fa2e25de.dip0.t-ipconnect.de)
[12:42:04] *** Joins: s-liao (~s-liao@101.86.96.21)
[12:42:26] *** Joins: cage (~cage@94-39-220-187.adsl-ull.clienti.tiscali.it)
[12:51:50] *** Joins: Dynom (~niels@80-114-12-206.cable.dynamic.v4.ziggo.nl)
[12:53:25] *** Joins: tfeb (~tfb@88.98.95.237)
[12:56:26] *** Joins: lisp123 (~lisp123@5.30.23.247)
[12:57:51] <saturn2> i really wish i could use and recommend McCLIM over GTK, but unfortunately it seems to have too many rough edges
[12:58:31] *** Quits: tfeb (~tfb@88.98.95.237) (Quit: died)
[13:03:29] <ogamita> saturn2: use it, iron out the rough edges.
[13:03:58] <jackdaniel> well, it's still progress, the casual remark 3y ago was "it is a shame that McCLIM is dead in the water"
[13:04:21] *** Joins: wacki (~wacki@87.122.85.160)
[13:04:28] <jackdaniel> (similar 8y ago for ECL)
[13:04:38] *** Joins: attila_lendvai (~alendvai@2a02:ab88:3710:7c80:9130:5abf:96b3:dc0c)
[13:05:23] <jackdaniel> that said, I wouldn't recommend gtk either, last time I've used it it was confusing at best with its unstable api(s). I'd be more confident to recommend qt
[13:08:05] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 250 seconds)
[13:08:18] *** Joins: OlCe (~user@amontsouris-156-1-23-81.w92-151.abo.wanadoo.fr)
[13:17:58] *** Joins: xsperry (~xs@user/xsperry)
[13:18:39] *** Joins: Guest4425 (~Guest44@95.175.104.78)
[13:25:45] *** gjvc_ is now known as gjvc
[13:34:54] <mfiano> jackdaniel: Thank you.
[13:35:25] <mfiano> That seems to be the consensus
[13:35:37] <mfiano> and, I wasn't aware of that idiom
[13:46:01] <mfiano> I have another condition question. I have a design issue I have been deferring that I need to solve in a good enough way.
[13:48:31] *** Joins: lisp123 (~lisp123@5.30.23.247)
[13:48:33] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[13:48:45] *** Joins: lisp123 (~lisp123@5.30.23.247)
[13:53:21] <mfiano> I am developing an image processing library. So far, I have been working on the color package, manipulating invidividual pixels, rather than images as a whole or in part. One thing I can do is convert from one color space to another, or perform color correction algorithms. These can both go "out of gamut", resulting in a pixel's channel that is outside the [0, 1] range. When processing an image
[13:53:23] <mfiano> or region of one, I would like to handle a condition that was signaled. The actual behavior depends on what the user wants, but two possible choices will be "continue but clamp the channel", "error, and undo the entire history as to not leave the image in a partial, inconsistent state", and maybe some other strategies. I'm not sure what a good way to handle these would be. I'm thinking I would
[13:53:25] <mfiano> at least want the dynamic catch/throw, but I am unsure if I would need to keep a back-tracking history of events for the second solution, and other questions arising from these.
[13:53:38] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 260 seconds)
[13:59:54] *** Quits: karlosz (~karlosz@47.151.136.69) (Quit: karlosz)
[14:07:04] *** Joins: hhdave (~hhdave@ip212.ip-193-70-71.eu)
[14:11:39] <mfiano> The easiest solution sounds like to double-buffer, at the expense of much memory wasted for large images. I'm thinking keeping a history of previous pixel values to revert to, as out of gamut errors are likely to occur sooner than later.
[14:12:15] *** Joins: igemnace (~ian@user/igemnace)
[14:12:31] <mfiano> As for the best way to "signal" when to revert that, I'm still thinking throw/catch, unless someone has a better idea.
[14:15:20] <phoe> this looks like HANDLER-CASE to me
[14:15:21] <moon-child> double buffering seems quite reasonable
[14:15:33] <phoe> wait, not
[14:15:38] <phoe> RESTART-CASE over ERROR
[14:15:41] <moon-child> if you can hold one instance of the image in memory, it seems very likely that you can hold two without very much difficulty
[14:16:43] *** Quits: lottaquestions_ (~nick@2607:fa49:5041:a200:78c8:bb9f:f5b1:85aa) (Quit: Konversation terminated!)
[14:16:57] <phoe> something like (let ((new-value ...)) (when (wrongp new-value) (restart-case (error ...) ...)) ...)
[14:17:01] <mfiano> moon-child: That sounds wasteful, if I can hold one large image, it may not be very likely I can hold two.
[14:17:35] <phoe> where the first restart sets NEW-VALUE to something meaningful and continues
[14:17:36] <mfiano> Especially since out of gamut errors will happen likely much before the middle of the image...for photographs anyway.
[14:17:40] *** Quits: amb007 (~a_bakic@102.215.76.86.rev.sfr.net) (Ping timeout: 256 seconds)
[14:17:52] <phoe> and the second restart erases stuff and THROWs to prevent further processing
[14:18:46] <mfiano> It's the "erases stuff" I'm really trying to think about.
[14:18:47] <moon-child> say extreme case.  8kx8k image, 128bpp is 1gb
[14:19:07] <phoe> mfiano: what do you mean, think about
[14:19:16] <mfiano> moon-child: That is not so extreme for HDR panoramic images. 24K is common :)
[14:19:42] *** Joins: amb007 (~a_bakic@46.12.23.93.rev.sfr.net)
[14:19:43] <moon-child> sure.  So 10gb
[14:19:59] <moon-child> vs 20
[14:20:03] <phoe> at this point it's less a question about the condition system and more of a question about what would be meaningful to do algorithmically and UX-wise
[14:20:28] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 250 seconds)
[14:20:37] <phoe> if you want to undo the partial operation then you need to have an undo facility of some sort
[14:21:05] <mfiano> phoe: think about, as in, whether to keep a history or to double buffer, and what to do for image algorithms that already require double buffering...that would be triple buffering?
[14:21:05] *** Quits: igemnace (~ian@user/igemnace) (Remote host closed the connection)
[14:21:16] <phoe> yes
[14:21:29] <phoe> and, as I said, that's no longer a condition system question :D
[14:22:07] <mfiano> Yeah there are multiple questions here. Thanks for your input though :)
[14:22:32] *** Joins: aeth (~aeth@user/aeth)
[14:22:48] <phoe> I'd assume that if someone tries to work on huge images then they have enough RAM and swap space to back these attempts up
[14:23:18] <mfiano> Yes
[14:23:46] <mfiano> I mean, I don't plan on extremely huge images myself, but I can't discount them.
[14:24:29] <mfiano> The undo system sounds much more efficient, and easier to reason about wrt algorithms that already need to double buffer.
[14:24:37] <mfiano> To me, anyway.
[14:24:56] <phoe> well then, make a copy of your image before attempting to frob it
[14:25:00] <phoe> there, you have a one-step undo
[14:25:01] <mfiano> If the first scanline goes out of gamut, out of 16k scanlines, that's a huge memory and performance savings.
[14:28:19] *** Quits: amk (~amk@109.255.169.126) (Read error: Connection reset by peer)
[14:28:33] <mfiano> Ok, thanks for the suggestions everyone. I'll let it simmer a bit.
[14:29:26] <jackdaniel> mfiano: perhaps leave the descision to the user (with a sensible default - i.e having a "revert copy")
[14:30:00] <mfiano> jackdaniel: Yeah, I think I mentioned that in the long description above. Definitely.
[14:30:10] <jackdaniel> ah, sorry, I must have missed it
[14:30:13] <mfiano> and I haven't read phoe's condition system book yet, though I am quite familiar with the condition system already. I am looking forward to learning a thing or two though, as it's on my next to-read list.
[14:30:20] <phoe> jackdaniel: I think that's the idea wrt having multiple restarts - abort and revert to the image copy, continue and clamp the values, etc.. whatever is meaningful in the context
[14:30:52] <phoe> and that's doable with a (when invalid-state-p (restart-case (error ...) ...)) in a proper place
[14:31:02] <phoe> more restarts can be added along the way too
[14:31:19] <jackdaniel> I understand how restarts work but I don't understand how this refers to what I've said above
[14:32:43] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 256 seconds)
[14:33:28] *** Quits: attila_lendvai (~alendvai@2a02:ab88:3710:7c80:9130:5abf:96b3:dc0c) (Ping timeout: 250 seconds)
[14:34:04] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[14:34:34] *** Joins: amk (~amk@109.255.169.126)
[14:36:01] <phoe> "leave the decision to the user" - such a restart-case would be an implementation of that choice
[14:36:28] <jackdaniel> no, because you decide whether you copy the buffer before you perform any operation - erroneous or not
[14:37:00] <jackdaniel> as in (with-manipulation-buffer (buffer :save-copy *save-copy-default*) …)
[14:38:57] <mfiano> Right, you would have to decide before a restart was invoked.
[14:39:38] *** Quits: cosimone (~user@93-44-184-23.ip98.fastwebnet.it) (Remote host closed the connection)
[14:40:06] <mfiano> Or the condition was signaled rather.
[14:40:09] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[14:42:19] *** Quits: anticomputer (~anticompu@gateway/tor-sasl/anticomputer) (Remote host closed the connection)
[14:42:35] *** Joins: anticomputer (~anticompu@gateway/tor-sasl/anticomputer)
[14:43:11] <phoe> right, you need to decide whether you want to make the operation undoable every time before you make an operation
[14:43:24] <phoe> I assume that one copy is made before every operation and it's always possible to revert to it
[14:43:47] <phoe> if that's not the case then one restart needs to be moved elsewhere
[14:43:56] <phoe> (along with copying the image)
[14:44:13] *** Joins: iamFIREc1 (~iamFIREcr@user/iamfirecracker)
[14:44:21] <mfiano> So the undo system (partial history instead of full buffer) conflicts with this.
[14:44:33] <mfiano> It would have to be a user choice at program start
[14:44:42] <mfiano> For those low on RAM
[14:45:13] <moon-child> (I will add one more thing: I find snapshotting both more coherent and robust than diffing.  But I am going to bed now so can not argue this point!)
[14:46:53] *** Quits: iamFIREcracker (~iamFIREcr@user/iamfirecracker) (Ping timeout: 256 seconds)
[14:49:08] <mfiano> Yes, I found backtracking to be difficult to make robust in another image library of mine.
[14:49:17] <mfiano> THanks for the suggestions!
[14:53:22] *** Quits: OlCe (~user@amontsouris-156-1-23-81.w92-151.abo.wanadoo.fr) (Ping timeout: 256 seconds)
[15:15:27] *** Joins: iamFIREcracker (~iamFIREcr@user/iamfirecracker)
[15:16:55] *** Quits: iamFIREc1 (~iamFIREcr@user/iamfirecracker) (Ping timeout: 256 seconds)
[15:29:01] *** Quits: Dynom (~niels@80-114-12-206.cable.dynamic.v4.ziggo.nl) (Quit: WeeChat 3.4)
[15:29:06] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[15:31:05] *** Quits: shka (~herr@109.231.0.226) (Ping timeout: 256 seconds)
[15:34:16] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Client closed)
[15:42:06] *** Quits: amb007 (~a_bakic@46.12.23.93.rev.sfr.net) (Ping timeout: 256 seconds)
[15:42:53] *** Joins: lisp123 (~lisp123@5.30.23.247)
[15:42:57] *** Joins: amb007 (~a_bakic@117.38.22.93.rev.sfr.net)
[15:42:57] *** Quits: silasfox (~sbv@p200300cec74715008ae52312fa2e25de.dip0.t-ipconnect.de) (Quit: WeeChat 3.4)
[15:45:18] *** Parts: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1) (Error from remote client)
[15:47:31] *** Quits: amb007 (~a_bakic@117.38.22.93.rev.sfr.net) (Ping timeout: 256 seconds)
[15:47:47] *** Joins: iamFIREc1 (~iamFIREcr@user/iamfirecracker)
[15:48:07] *** Joins: amb007 (~a_bakic@38.134.22.93.rev.sfr.net)
[15:49:43] *** Quits: iamFIREcracker (~iamFIREcr@user/iamfirecracker) (Ping timeout: 250 seconds)
[15:49:54] <beach> mfiano: Do you know about the library "opticl"?
[15:49:59] *** Joins: Andrew (Andrew@user/AndrewYu)
[15:50:13] <mfiano> Of course. I contributed pngload to it.
[15:50:32] <beach> OK.  Just checking in case there might be some overlap with what you are working on.
[15:50:56] <mfiano> There might be some but not much, but thanks!
[15:51:14] <beach> Great!
[15:55:25] *** Joins: SR-71 (~user@user/SR-71)
[15:56:32] <SR-71> Is there a way I can get in touch with slime devs?
[16:06:00] <phoe> SR-71: slime-devel mailing list, or the slime issue tracker
[16:11:10] *** Joins: notzmv (~zmv@user/notzmv)
[16:14:27] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[16:15:52] *** Joins: random-nick (~random-ni@87.116.167.125)
[16:28:58] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Remote host closed the connection)
[16:29:47] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[16:30:36] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca)
[16:39:39] *** Quits: Guest4425 (~Guest44@95.175.104.78) (Ping timeout: 256 seconds)
[16:45:53] *** Quits: amb007 (~a_bakic@38.134.22.93.rev.sfr.net) (Ping timeout: 256 seconds)
[16:56:39] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[17:02:10] *** Joins: s-liao (~s-liao@101.86.96.21)
[17:04:04] *** Joins: amb007 (~a_bakic@248.132.22.93.rev.sfr.net)
[17:07:39] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Read error: Connection reset by peer)
[17:07:58] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[17:14:55] *** Joins: lisp123 (~lisp123@5.30.23.247)
[17:17:57] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[17:19:17] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 240 seconds)
[17:20:05] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[17:23:34] <beach> ASDF insists that operations be created with MAKE-OPERATION.  It also caches these operations so that each time MAKE-OPERATION is called with the same symbol, the same instance is returned.  Does anybody know why ASDF does it this way, as opposed to letting the user call MAKE-INSTANCE to create an operation?
[17:27:30] *** Quits: amb007 (~a_bakic@248.132.22.93.rev.sfr.net) (Ping timeout: 256 seconds)
[17:27:44] *** Joins: amb007 (~a_bakic@192.36.22.93.rev.sfr.net)
[17:32:17] <beach> I am asking because the operation instance would have been the ideal place to put things like options to the compiler/loader/whatever, to be applied for each component in a system.  But this caching technique makes that idea impossible.
[17:32:36] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[17:33:31] <phoe> I assume that in the ASDF way these options should go into system instances rather than operation instances
[17:33:56] <phoe> so you can specify things like around-compile-hook for compile-op, and so on
[17:34:34] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[17:35:08] <beach> But the system is not available to methods on PERFORM.
[17:36:25] *** Quits: Oddity (~Oddity@user/oddity) (Remote host closed the connection)
[17:37:42] <phoe> huh?
[17:38:03] <phoe> https://plaster.tymoon.eu/view/2941#2941
[17:38:08] <beach> PERFORM takes an operation and a component.
[17:38:28] <phoe> yes, and I see plenty of methods EQL-specialized on systems
[17:38:50] <phoe> TEST-OP first and foremost, since these invoke particular test suites
[17:39:07] <phoe> as in, the second argument (the component) is EQL to a particular system
[17:39:42] <beach> But if I want to specify in a method on PERFORM that it should call the compiler with particular options on a component that is a source file, the system is not available.
[17:40:11] <beach> Then the component is the source file, not the system.
[17:40:21] <phoe> yes, I see now
[17:40:51] <phoe> I think the ASDF solution is to define a different component class, either as a default for all source files or per-component
[17:42:06] <beach> But that would mean rewriting the system definition, no?
[17:42:39] <phoe> yes
[17:43:02] <beach> The thing I am after is not specific to a system definition, but to an invocation of operate-on-system.
[17:43:12] *** Joins: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1)
[17:44:07] <phoe> I see
[17:44:12] <beach> Plus, I can't rewrite ASDF system definitions for external libraries that I want to process with my own ONLY-COMPILE-OP.
[17:45:24] <beach> It would have been ideal to stick those options in the operation instance to be created by OPERATE-ON-SYSTEM.
[17:45:56] <beach> Anyway, thanks for listening, phoe.
[17:46:53] <phoe> it does not seem that ASDF swings that way - operations seem to be singletons
[17:46:59] <phoe> no idea why, but that's the way it is
[17:49:41] *** Quits: occ (~occ@user/occ) (Ping timeout: 256 seconds)
[17:50:42] <etimmons> That decision was made before I got really involved. But I suspect it was in large part the difficulty in synchronizing options with the dependency operations
[17:51:23] <etimmons> For example, forcing should require all its dependencies to force as well.
[17:52:45] *** Joins: waleee (~waleee@h-98-128-229-110.NA.cust.bahnhof.se)
[17:54:18] *** Joins: silasfox (~sbv@p4fe8daed.dip0.t-ipconnect.de)
[17:55:02] *** Joins: occ (~occ@user/occ)
[17:57:51] *** Quits: amb007 (~a_bakic@192.36.22.93.rev.sfr.net) (Ping timeout: 256 seconds)
[18:00:19] *** Joins: amb007 (~a_bakic@171.14.23.93.rev.sfr.net)
[18:06:00] <jackdaniel> speaking of GUI and Qt: https://www.reddit.com/r/lisp/comments/sqrdio/lqml_a_lightweight_ecl_binding_to_qml_both_qt5/
[18:07:01] <phoe> very nice!
[18:08:30] <beach> etimmons: Yes, I see.
[18:08:59] <beach> I guess I'll just bypass ASDF and just ask for a list of components in dependency order.
[18:09:08] <beach> Then I can do what I want with that list.
[18:10:05] <beach> It is sad though.  There is that OPERATION argument, and all it can be used for is generic dispatch.
[18:10:06] <etimmons> beach: I must be missing something in what you're trying to do. What options do you need to add in addition to your operation?
[18:10:38] <beach> I would like to store the compilation environment in the operation, so that I can pass it to the compiler.
[18:10:59] <etimmons> Ah. Makes sense
[18:11:07] <beach> That way, I could share the compilation environment with all components.
[18:12:09] <phoe> hm, would subclassing some existing operation work? you'd be able to put some slots in that singleton operation object thatn you can then use
[18:12:43] <phoe> like, (defclass my-load-op (asdf:load-op) (compilation-env)) and then some DEFMETHODs and then (asdf:oos 'my-load-op ...)
[18:12:46] <beach> But then I get the same singleton for each system that I compile.
[18:12:55] <phoe> yes, that's a pain
[18:13:06] <phoe> you'd need to put a hash table in that singleton or something
[18:13:15] <beach> I could define an operation subclass for each system I guess.
[18:13:38] <beach> phoe: Sure that's another possibility.
[18:14:39] <beach> I could put the environment in the operation, and assign to it before I call operate-on-system, but that's unappealing to me.
[18:15:08] <phoe> yes, that's ugly - hence me mentioning a hash table of some sort
[18:15:15] <beach> I understand.
[18:15:32] <phoe> where you can at least SETF GETHASH of some component as the key, so you don't have a single slot that you overwrite every time
[18:15:34] <etimmons> If you'll always pass your operation to OPERATE, you could shove it in a special variable bound around the rest of OPERATE
[18:15:48] <etimmons> That's basically how force works, IIRC
[18:15:52] <beach> That's what I do now.
[18:16:24] <etimmons> I see
[18:16:25] <beach> But then I got worried that ASDF might create a thread to do things in parallel.
[18:16:39] <beach> So then my special variable will no longer be bound.
[18:16:44] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Client closed)
[18:17:11] <beach> etimmons: I am not sure what "force" refers to.
[18:17:44] <etimmons> At the moment it does not use threads. And if it did, I think a lot of other things would break horribly as well
[18:17:53] <beach> I see.
[18:18:00] <phoe> beach: AFAIK it's "ignore the fact that some operations are already done/cached and re-do them"
[18:18:12] <etimmons> phoegot it
[18:18:13] <beach> Oh, OK.
[18:19:16] <phoe> so basically, IIUC, if :foo is loaded then (asdf:load-system :foo :force t) ignores the fact that it's loaded and re-loads it along with all dependencies, so compiling the files in full again, etc..
[18:19:28] <etimmons> Also, not sure how strict you want to be with compile only, but I imagine that any system with a :defsystem-depends-on actually needs to have those dependencies loaded
[18:20:16] <beach> phoe: Sure, but I don't see the relation between forcing and the necessity for a singleton operation.
[18:20:52] <phoe> beach: neither do I (yet)
[18:21:08] <phoe> but I assume it's a case of Chesterton's fence
[18:21:17] <beach> etimmons: I am willing to do some manual dependency management.  It doesn't have to be all automatic.
[18:21:59] <beach> But I think it is more work to convince ASDF to do what I want, than to just call the compiler on a list returned by ASDF.
[18:23:09] <etimmons> Forcing a load-op forces the compile-op as well. So the value of the force slot would need to be copied to every instance of compile-op.
[18:23:32] <etimmons> ASDF can probably make sure that happens for every operation and option it knows about
[18:23:37] <beach> Ah, yes, that makes sense.
[18:23:59] <etimmons> But I imagine extending that to arbitrary user defined ops and options was deemed too hard
[18:24:21] <beach> Sounds plausible.
[18:28:19] *** Joins: _73 (~user@pool-96-233-64-53.bstnma.fios.verizon.net)
[18:30:06] <_73> Is there a way that I can query for a current optimization level? For example say I set (DECLAIM (OPTIMIZE (DEBUG 3))) is there a function like GET-DEBUG-LEVEL that would return 3?
[18:33:20] <_death> not in the standard.. for sbcl you can look at sb-ext:describe-compiler-policy
[18:33:29] <phoe> _73: Serapeum has some tricks for that
[18:33:48] *** Quits: amb007 (~a_bakic@171.14.23.93.rev.sfr.net) (Ping timeout: 256 seconds)
[18:34:14] *** Quits: treflip (~user@user/treflip) (Quit: rebooting)
[18:34:18] <_73> _death: thanks I am using SBCL
[18:34:44] <phoe> _73: https://github.com/ruricolist/serapeum/blob/d13b9b8650c63dd6fd79e4e9cbd7ee92f73225ad/macro-tools.lisp#L419-L432
[18:36:18] <phoe> or, to avoid Serapeum, trivial-cltl2:declaration-information 'optimize
[18:49:06] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Remote host closed the connection)
[19:12:16] *** Joins: cosimone (~user@93-44-184-23.ip98.fastwebnet.it)
[19:16:13] *** Quits: silasfox (~sbv@p4fe8daed.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[19:23:56] *** Joins: lisp123 (~lisp123@5.30.23.247)
[19:26:30] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[19:28:33] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[19:28:51] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 256 seconds)
[19:29:25] *** Quits: occ (~occ@user/occ) (Ping timeout: 240 seconds)
[19:35:39] *** Joins: AeroNotix (~xeno@185.107.67.252)
[19:36:04] *** Joins: occ (~occ@user/occ)
[19:36:13] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[19:37:57] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[19:50:07] *** Joins: hobo (~hobo@69.218.33.204)
[19:50:18] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[19:51:44] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[19:56:17] *** Quits: raeda (~raeda@74.215.159.82) (Ping timeout: 256 seconds)
[20:00:15] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[20:02:16] *** Joins: amb007 (~a_bakic@220.39.22.93.rev.sfr.net)
[20:02:25] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[20:03:11] *** Joins: blacked (~blacked@user/blacked)
[20:05:05] *** blacked is now known as pingpongball
[20:09:53] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[20:11:48] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[20:23:56] *** Joins: raeda (~raeda@74.215.159.82)
[20:29:24] *** Joins: lisp123 (~lisp123@5.30.23.247)
[20:30:38] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[20:33:56] *** Quits: amb007 (~a_bakic@220.39.22.93.rev.sfr.net) (Ping timeout: 256 seconds)
[20:34:33] *** Joins: amb007 (~a_bakic@17.133.22.93.rev.sfr.net)
[20:35:51] *** Joins: morganw (~user@80.225.24.132)
[20:48:35] *** Quits: pingpongball (~blacked@user/blacked) (Quit: pingpongball)
[20:50:27] *** Quits: amb007 (~a_bakic@17.133.22.93.rev.sfr.net) (Ping timeout: 256 seconds)
[20:51:43] *** Joins: amb007 (~a_bakic@46.38.22.93.rev.sfr.net)
[21:03:24] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[21:05:29] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[21:11:17] *** Quits: SR-71 (~user@user/SR-71) (Remote host closed the connection)
[21:23:38] <phoe> is there a LOOP variant available as a library that is actually extensible by the end user?
[21:24:39] <phoe> suppose I'd like to add preorder/inorder/postorder traversals for binary trees and I'd like to (loop for x inorder-in tree ...) - is there a quickloadable library that provides its own LOOP that I can extend in this way?
[21:24:51] <phoe> and, no, I'm not interested in ITERATE
[21:25:21] *** Joins: Guest74 (~Guest74@modemcable110.164-177-173.mc.videotron.ca)
[21:25:22] <White_Flame> you mean one that's syntactically the same as LOOP as a basis?
[21:25:40] <phoe> yes - that's fully backwards-compatible with CL:LOOP but also extensible by the user
[21:31:07] *** Joins: lisp123 (~lisp123@5.30.23.247)
[21:32:31] <phoe> asking because MIT LOOP is clearly written in a way that is meant to be extensible, but that extensibility is not a part of ANSI CL
[21:36:15] <phoe> and I am tempted to explore this area
[21:36:22] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 272 seconds)
[21:39:28] <mfiano> phoe: Shinmera's "for"?
[21:39:38] <Shinmera> that ain't LOOP compatible
[21:39:44] <mfiano> Oh
[21:39:53] <Shinmera> phoe: Only thing I can think of is SICL's loop.
[21:39:56] <mfiano> I misread then, sorry
[21:40:00] <phoe> Shinmera: hmmm
[21:40:08] <phoe> that's an option, yes
[21:40:53] <Shinmera> I *do* wish CL loop had a keyword for sequences
[21:41:02] <Shinmera> because then it would also automatically work with extensible-sequences
[21:41:07] <phoe> I know, right?
[21:41:19] <Shinmera> Anyway, I just use FOR in those situations :^)
[21:42:18] *** Quits: amb007 (~a_bakic@46.38.22.93.rev.sfr.net) (Read error: Connection reset by peer)
[21:42:27] *** Joins: amb007 (~a_bakic@102.215.76.86.rev.sfr.net)
[21:43:20] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 250 seconds)
[21:45:11] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[21:48:22] <jackdaniel> fwiw mit loop derivatives have an unexported api for extensions
[21:48:31] <Guest74> anybody have any thoughts on what would be useful for an input api? I'm already set on per device bindings so my touchpad click would be different than mouse or pointer or touchscreen.
[21:48:38] *** Joins: hineios5 (~hineios@a95-93-142-124.cpe.netcabo.pt)
[21:48:50] <phoe> jackdaniel: yes, that is what I am thinking of
[21:49:10] *** Quits: hineios (~hineios@a95-93-142-124.cpe.netcabo.pt) (Ping timeout: 260 seconds)
[21:49:10] *** hineios5 is now known as hineios
[21:49:52] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[21:51:25] <Guest74> also thinking of user definable modifiers and locks for keyboards but nobody commented on that.
[21:51:33] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[21:51:46] <Guest74> per keyboard keymaps.
[21:54:14] *** Joins: OlCe (~user@amontsouris-156-1-23-81.w92-151.abo.wanadoo.fr)
[21:54:51] <jackdaniel> imo your questions are too vague
[21:55:49] <Guest74> They're general questions looking for general answers.
[21:56:22] <Guest74> like any thoughts on handling input whatsoever.
[21:56:58] <Guest74> anything you like/dislike about input apis. about how keyboards are handled, about anything input related.
[21:57:11] <Shinmera> I find it's more useful to design things to solve a particular problem rather than trying to design something that might solve some problems at some point.
[21:57:47] <Shinmera> I'll leave it at that
[21:57:59] <Guest74> Yes, I know what problems I'm trying to solve.
[21:58:06] <phoe> but we don't
[21:58:08] <Guest74> I'd like to know what others think as well.
[21:58:12] <phoe> hence the communication problem
[21:58:34] <Guest74> I don't know what others problems dealing with input are.  How else will I know without asking?
[21:59:03] <AeroNotix> Guest74: 'what are you problems with input' is such a vague and broad question though
[21:59:05] <AeroNotix> where to begin
[21:59:16] <Guest74> I think in general, it's nice to have a sense of what the general problems/wants are in an area before dealing with only my needs.
[21:59:21] <AeroNotix> and are the problems you're solving, even related or in-scope of the problems people will have
[21:59:39] <Guest74> How can I know without asking?
[22:00:10] <jackdaniel> input should have delightful api, correct implementation and that intangible something which makes it great
[22:00:50] <phoe> "input" is a topic that's pretty damn broad though - starting from "why cannot I input unicode characters on this ABCL" going through "why cannot I input several megabytes of Lisp code into an emacs buffer without it locking up" finishing on "how can I capture keyboard input on SBCL from the linux terminal"
[22:00:56] <AeroNotix> Guest74: what are your thoughts on libinput?
[22:01:10] <Guest74> jd: I would expect more from a clim person who gets complaints about input.
[22:01:35] <Guest74> aero: that it's foreign.
[22:01:43] <AeroNotix> Guest74: irrelevant
[22:01:53] <AeroNotix> Guest74: what are the issues in the past you've had with libinput?
[22:01:57] <jackdaniel> well, general answer to general question ;)
[22:01:58] <AeroNotix> You've _used_ it right?
[22:02:01] <phoe> Guest74: what is the problem that you are trying to solve?
[22:02:27] <Guest74> handling all inputs in linux from lisp.
[22:02:38] <AeroNotix> because it'd be interesting for someone to develop a brand new input library without first using the existing, well-tested, thoroughly implemented and widely-used libraries which are solving the exact same problem
[22:02:51] <AeroNotix> additionally, "it's foreign" is a poor reason to not use something from lisp
[22:03:09] <phoe> what do you mean by "all inputs"? network, filesystem, terminal, Unix signals, keyboard/mouse/touchpad in X, keyboard/mouse/touchpad in Wayland, what else?
[22:03:12] <AeroNotix> alien code is such a dream to work with from Lisp that it has practically zero developer overhead once the alien interface libraries are learned
[22:03:21] <Guest74> ok, forget I asked.
[22:03:25] <AeroNotix> ok
[22:03:27] <phoe> ok
[22:04:06] <Shinmera> AeroNotix: it's a nightmare to work with when your memory gets fucked on, which happens to happen a lot.
[22:04:07] <jackdaniel> ok
[22:04:14] <AeroNotix> Shinmera: get good
[22:04:22] <Shinmera> hilarious
[22:04:31] <Guest74> I also think it's stupid to suggest foreign libraries in a common lisp channel.
[22:04:32] <AeroNotix> it's all I can suggest.. it's C at the end of the day
[22:04:38] <AeroNotix> it's not particularly safe
[22:04:41] <Shinmera> no shit
[22:04:56] <AeroNotix> Guest74: there's millions of lines of code written in languages which aren't Lisp
[22:04:57] <phoe> Guest74: if all you have is a foreign library then it makes no sense to avoid suggesting it
[22:05:10] <AeroNotix> if you limit yourself to using only Lisp code you are doomed to rewrite a tonne of shit unnecessarily
[22:05:10] <Shinmera> "it's very easy to work with" "ok here's a reason why it's not" "oh you're just not good"
[22:05:12] <phoe> if there's something native, then sure; if the native solution is better, then it's even more so
[22:05:23] <Guest74> I have lisp.  What do I need a foreign library for?
[22:05:25] <AeroNotix> embrace foreign code and a whole world of libraries opens up to you
[22:05:26] <Shinmera> oh sod this I don't have time for dumb internet arguments.
[22:05:30] <AeroNotix> Guest74: to save your self time
[22:05:37] <phoe> Guest74: SSL
[22:05:48] <AeroNotix> Shinmera: it's easy to work with doesn't imply you don't need to be aware of a few things
[22:06:00] <mfiano> To save yourself time at the expense of even more future time
[22:06:01] <AeroNotix> Shinmera: it's why i added "when you're familiar with the interface libraries"
[22:06:07] <mfiano> This argument is pointless
[22:06:22] <phoe> there's no SSL library that's both pure-CL and good
[22:06:32] <Guest74> Imagine people dissuading others from building the ecosystem.  I don't get this guy.
[22:06:33] <phoe> s/pure-CL/pure-portable-CL/
[22:06:34] <Shinmera> AeroNotix: programming is super easy, just don't make any mistakes :)
[22:06:42] <AeroNotix> Shinmera: exactly
[22:06:47] <Shinmera> AeroNotix: fuck off
[22:06:51] <AeroNotix> ???
[22:07:18] <phoe> Guest74: "building the ecosystem" versus "using an existing library"
[22:07:35] <phoe> the former requires time to build and test and optimize the native CL solution, the latter doesn't
[22:07:46] <Guest74> using a foreign library.
[22:07:53] <Guest74> and I'm building the library.
[22:07:56] <phoe> Guest74: "building the ecosystem" versus "using an existing foreign library"
[22:08:00] <Guest74> So what's the problem??
[22:08:02] <phoe> no doubt that people prefer to go for the latter in order to save time
[22:08:20] <phoe> and if you're building the former, then
[22:08:35] <phoe> what do you mean by "all inputs"? network, filesystem, terminal, Unix signals, keyboard/mouse/touchpad in X, keyboard/mouse/touchpad in Wayland, what else?
[22:09:02] <phoe> I seriously want to know what do you consider to be "input"
[22:09:08] <Guest74> all evdev inputs
[22:09:35] <aeth> input -> program -> output
[22:09:40] <aeth> that's all you need to know :-p
[22:09:46] <phoe> Guest74: OK, that narrows it down a lot
[22:10:26] <Guest74> perhaps all user input would be better.
[22:10:33] <aeth> Guest74: I think if people need to use foreign libraries to handle input in a portable way, they prefer things like SDL to abstract over OS-specific interfaces.
[22:10:44] <aeth> This definitely skews towards certain kinds of applications, though.
[22:10:52] <phoe> I see some code at https://github.com/olewhalehunter/cl-uinput/blob/master/cl-uinput.lisp that handles a little bit of this stuff on Linux
[22:11:41] <phoe> it has a wee bit of C code though that calls ioctls and such
[22:11:59] <aeth> interfacing with C to interface with Linux feels like the wrong layer of abstraction unless you're going to write an elaborate set of libraries to also interface with Windows and macOS with the same API
[22:12:09] <phoe> ...oh, wait, it does not seem like this C layer is necessary
[22:13:13] <Guest74> That's just a basic reader.  It does not handle things like key/button bindings, languages, key macros, etc...
[22:13:20] <phoe> yes
[22:13:35] <phoe> I assume that's the part that would need to be written in CL
[22:14:48] <phoe> interface with /dev/input/eventX, parse the events that are received, write a higher-level layer for it
[22:15:15] <Guest74> and deal with things like gestures.  come up with a good gesture defining api.
[22:16:12] <phoe> like mouse gestures?
[22:16:24] <phoe> or multitouch touchpad gestures too?
[22:16:49] <Guest74> things i don't like about cl-evdev is creating a clos class for every single event, whether you're interested in it or not.
[22:17:18] <Guest74> there should be some common ground for touchpad/mouse/touchscreen/pen.
[22:17:48] <phoe> every single event? what do you mean
[22:17:49] <Guest74> though some gestures might be easier for touchpad as there are special events for how many fingers are touching.
[22:17:56] <phoe> https://github.com/jtgans/cl-evdev/blob/master/evdev.lisp seems like it only defines a bunch of classes
[22:17:56] *** Joins: alejandrozf (~user@190.191.153.68)
[22:18:47] <Guest74> all binary-class are clos classes.
[22:19:17] <AeroNotix> imho the propensity for Lisp programmers to treat Lisp as some kind of higher-plane, extraterrestrial platform which solves literally any and all problems is its biggest downfall. Some Lisp programmers tend eschew all alternatives preferring to re-implement.
[22:19:51] <AeroNotix> It's why (imho) we've ended up with a billion and one poorly implemented, single-maintainer re-implementations of trivial basic stuff which could've been wrapped or imported from elsewhere
[22:20:02] <AeroNotix> so this is why I brought up libinput
[22:20:23] <AeroNotix> if you are even talking about an input library, you should at least look at such a widely-used thing which solves the same problem
[22:20:47] <phoe> Guest74: I don't understand, BINARY-TYPES:DEFINE-BINARY-CLASS only expands into a single DEFCLASS
[22:20:54] <phoe> so, only one class defined too
[22:20:59] <AeroNotix> re-implementing things as a matter of course is fine from a pegagogical perspective - but it's just poor engineering practice if you want to solve real problems
[22:21:28] <phoe> I still don't know what you mean by "cl-evdev is creating a clos class for every single event"
[22:21:54] <Guest74> instance of a class.
[22:22:01] <phoe> oh, an instance
[22:22:03] <AeroNotix> Guest74: what should it be?
[22:22:13] <Guest74> though it seems possible it can go to structs.
[22:22:13] <phoe> oh, I think I know the problem
[22:22:34] <phoe> you want some sort of filtering? like, to ignore some events before they are even created?
[22:22:46] <Guest74> but then evdev in the reader they provide then makes an instance of another class.
[22:22:59] <phoe> asking because https://github.com/jtgans/cl-evdev/blob/master/evdev.lisp#L304-L335 unconditionally creates instances for every single event
[22:23:02] <Guest74> yes, that's what I do. allow filtering of events.
[22:23:27] <phoe> then what's the problem with forking cl-evdev and adding that filter? should be simple enough in there I think
[22:24:26] <Guest74> well I'm not sure why I would when I already have all that functionality?
[22:24:30] <phoe> add a test before L304 that checks if the event is filtered; if yes, silently drop the event and go back to READ-RAW-EVENT; if not, then proceed with creation
[22:24:40] <phoe> oh wait, you already have it written?
[22:25:19] <AeroNotix> 'why would i contribute something to the library if I have already paperd over it elsewhere' - eh?
[22:25:21] <phoe> no problem then, you've just NIHed another evdev accessor library
[22:26:56] <phoe> now that you can read evdev, what's the next sub-problem that's left to be tackled in the input library? gesture recognition and API?
[22:29:23] <Guest74> maybe format of state history.
[22:30:01] <Guest74> or format of intermediary events if different from end events served/accessible to clients.
[22:30:22] <Guest74> single server of events or allow clients to have their own listeners.
[22:30:49] <phoe> sure, I assume it would take a while to get these written in a performant way
[22:31:41] <Guest74> which is the problem with gestures.
[22:32:10] <Guest74> just having a cursor/pointer location and simple key press release isn't much of a problem.
[22:32:40] <phoe> so the real problem is some sort of algorithm for recognizing gestures, right?
[22:33:09] <AeroNotix> libinput
[22:33:19] <AeroNotix> at least take a look at it :)
[22:33:31] <Guest74> or how that should be exposed so people can write their own gestures.
[22:34:01] <Guest74> or maybe people aren't interested in that.
[22:34:14] <Guest74> and just the standard gestures are enough for them.
[22:35:16] <phoe> http://reports-archive.adm.cs.cmu.edu/anon/itc/CMU-ITC-099.pdf
[22:35:55] <Guest74> aeronotix: what makes you think I haven't? I even have an implementation of xinput2.
[22:36:05] <phoe> there are some simple shapes in there; I guess some lisp code could be written to try and recognize these based on a list of e.g. mouse events
[22:36:50] <phoe> and then provide some sort of hook mechanism, or GF dispatch, that decides what to do on what gesture in what context
[22:36:55] <Guest74> yes, I already have that pdf.
[22:37:01] <phoe> and make that specializable by the user so they can program the behavior
[22:37:35] *** Parts: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1) (Error from remote client)
[22:38:07] <phoe> like (defgeneric execute-gesture (gesture window start-pos end-pos)) and so on; I don't know what would be a good lambda list for that, maybe more parameters would be needed
[22:38:49] <phoe> but I think that the part that accepts a list of mouse positions/events and returns a recognized gesture is kind of a black box from the end user perspective
[22:38:53] <Guest74> I'm not sure how that would work with something like pieces of gestures.
[22:39:14] <Guest74> like line-east, curve-down, line-up.
[22:39:21] <phoe> oh, you also need to recognize pieces? what's the use case?
[22:39:28] <phoe> compositing a gesture from smaller sub-shapes?
[22:39:33] <Guest74> For building gestures.
[22:39:42] <phoe> yes, I see
[22:39:45] <Guest74> yes, at least that's my thinking.
[22:40:08] <phoe> have it return a list of sub-shapes, then, and have another part of the code accept a list of sub-shapes and return some sort of "final" gesture
[22:40:16] <phoe> and that can be specialized upon by the end user I guess
[22:40:19] <Guest74> it seems that would be an easier way to 'teach' the system gestures.
[22:41:15] <phoe> yes, and the user could (define-gesture square mid-line-south mid-line-east mid-line-north mid-line-west) or something
[22:41:27] <phoe> and then attach some meaning to the gesture SQUARE
[22:42:00] <phoe> and the MID- is line length relative to something like screen size or something
[22:42:05] <Guest74> I guess then I need some method of creating a signature for each unique combination.
[22:42:29] <phoe> an EQUAL hash table where keys are lists of symbols? :D
[22:42:35] <Guest74> or just dispatch on eql keyword-of-named-gesture.
[22:42:37] <phoe> e.g. (http://reports-archive.adm.cs.cmu.edu/anon/itc/CMU-ITC-099.pdf
[22:42:41] <phoe> oops, sorry
[22:42:48] <phoe> e.g. (mid-line-south mid-line-east mid-line-north mid-line-west)
[22:43:00] <phoe> where MID-LINE-SOUTH is a predefined gesture
[22:43:05] <phoe> most likely a library primitive
[22:43:32] <Guest74> I see, relative sizes might be necessary.
[22:43:36] <phoe> or yes, what you suggest, dispatch on SQUARE or (EQL 'SQUARE) or something
[22:43:41] <phoe> yes, relative sizes will be necessary
[22:43:48] <phoe> so you can tell apart a square from e.g. a spiral
[22:43:59] <Guest74> though relative to each other maybe?  Because a similiar size gesture on a touchpad would be made on a touchscreen.
[22:44:03] *** Joins: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1)
[22:44:07] <phoe> relative to each other makes sense, yes
[22:44:24] <phoe> and also you'll get to tell apart inwards spirals from outwards spirals and so on
[22:44:50] <phoe> concrete sizes shouldn't matter much in this case, unless it's something like "short line west" and "long line west"
[22:45:00] <Guest74> well, that's something to think about.
[22:45:09] <phoe> and I can imagine the user wanting to tell these apart
[22:45:23] <phoe> when they move the mouse a little versus when they make a wide swipe
[22:45:30] <phoe> that's what I meant by the MID- prefix
[22:45:51] <Guest74> yes, I can see side screen swipes being different from mid screen
[22:47:01] <Guest74> ok, thanks for bouncing some ideas phoe:  will give me some things to think about while I'm tying keymaps to user/system defined ones.
[22:47:02] <phoe> ultimately you could provide the absolute total size of each gesture
[22:47:15] <phoe> or sub-gesture
[22:47:27] <phoe> and let the user do the ratios themself
[22:47:28] <Guest74> I'm guessing I'll  just allow simple remapping using lisp chars.
[22:47:36] <phoe> no problem
[22:48:52] <Guest74> I'll certainly want to have a gui interface for that.  shouldn't need to build gestures at the repl. Will give some feedback as to if the sub gestures/fragments are recognized.
[22:49:42] <phoe> well, you can tell the user to draw their favorite gesture
[22:49:55] <phoe> and then show them how it was recognized and allow them to edit it
[22:50:11] <phoe> if you have the recognizer then you can use it after all :D
[22:50:47] <Guest74> I'm not sure what you mean by edit?  unless I transform the gestures into vectors?
[22:51:19] <phoe> make it easily editable by them in some way
[22:51:27] <phoe> turn it into a Lisp list or something
[22:51:34] <Guest74> I'll have to experiment with that.  Need to add that for my drawing app anyways.
[22:51:41] <phoe> ((line-south 10) (line-west 10) (line-north 10) (line-east 10))
[22:51:57] <phoe> if someone can draw a square and get something like that, it's already much easier than typing all that by hand
[22:52:19] <phoe> mostly because it takes 0.5s rather than 10s
[22:52:27] <Guest74> that's my thinking.
[22:52:50] <Guest74> while on the right side of the input box is an output list of the recognized fragments.
[22:52:52] *** Joins: Guest4414 (~Guest44@95.175.104.78)
[22:52:59] <phoe> I guess that gesture → printed list is a decent first approximation
[22:53:00] <phoe> yes
[22:53:14] <phoe> once you have something like that you can build something funkier
[22:54:58] <Guest74> that'll be the fun part.  I'm a little tired of writing basements.
[22:58:32] <phoe> :D
[22:58:35] <phoe> good luck
[22:59:06] <Guest74> I'll need it.
[23:02:21] *** Joins: lisp123 (~lisp123@5.30.23.247)
[23:08:17] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 240 seconds)
[23:08:52] *** Joins: lisp123 (~lisp123@5.30.23.247)
[23:12:41] *** Quits: parjanya (~esb@2804:14c:1ad:9351:eda3:e794:1704:f373) (Ping timeout: 256 seconds)
[23:13:10] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[23:15:19] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[23:23:56] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[23:25:44] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[23:28:23] *** Quits: cage (~cage@94-39-220-187.adsl-ull.clienti.tiscali.it) (Quit: rcirc on GNU Emacs 27.1)
[23:30:01] *** Joins: Nselm (~Nselm@p200300d56f4b3f232fdd2f2b08ee3842.dip0.t-ipconnect.de)
[23:33:50] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca) (Remote host closed the connection)
[23:37:09] *** Quits: alejandrozf (~user@190.191.153.68) (Remote host closed the connection)
[23:45:13] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[23:47:06] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[23:49:14] *** Quits: wacki (~wacki@87.122.85.160) (Quit: Leaving.)
[23:54:50] <mon_aaraj> hey, i am thinking of trying to use common lisp to interact with dbus, any idea how i should do it? I found 2 libraries, one with last activity being in 2010, another with latest activity in 2020, both unmaintained - or maybe libraries dont make interacting with dbus easier? what do you think?
[23:57:51] <scymtym> i'm pretty sure libraries make it much easier. _death's dbus library is pretty good but since it uses iolib, you may have to install "libfixposix" to use it. i can't comment on the other library
[23:59:03] <Guest74> the nice thing about death's, if you can get past the libfixposix is that it generates the interfaces.
