[00:23:51] <hayley> gilberth, White_Flame: https://www.youtube.com/watch?v=wRfSCSFSH0k
[00:23:52] -ixelp- Sauerkraut Sausage - YouTube
[00:26:42] <White_Flame> heh, not surprising result
[00:36:01] *** Joins: kevingal (~quassel@2a02:8084:4140:f300:e9b0:bb2c:cd30:98db)
[00:36:10] *** Joins: notzmv (~zmv@user/notzmv)
[00:37:17] <hayley> https://dl.acm.org/doi/10.5555/3489146.3489206 presented without context
[00:37:19] -ixelp- End the senseless killing | Proceedings of the 2020 USENIX Conference on Usenix Annual Technical Conference
[00:48:59] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[00:59:22] <shka> oh boy https://www.youtube.com/watch?v=brCQ1saxd6o
[00:59:22] -ixelp- Alps x Cherry MX: Teardown - ZealPC Clickiez switches! - YouTube
[01:02:37] <phoe> shit
[01:02:43] <White_Flame> *plop*
[01:02:47] <shka> hype is real
[01:02:49] <phoe> i step away for a moment and somebody posts my stuff on hacker news
[01:03:02] <shka> phoe: suffering from the success?
[01:03:20] <phoe> nah, more like "oh, so it's something that other people consider interesting"
[01:03:28] <phoe> unexpected
[01:04:37] *** Quits: euandreh (~euandreh@2804:14c:33:9fe5:4f29:e68c:50c9:fe2) (Ping timeout: 240 seconds)
[01:04:51] <shka> i read that blog post, it is somewhat similar to what was presented back in the ELS
[01:04:56] <shka> by beach actually 
[01:04:58] <phoe> beach's stuff
[01:04:58] <phoe> yes
[01:05:07] <shka> i can also add one SBCL specific trick
[01:05:08] <epony> "when you die, you will be famous"  --anonymous 'fortune' teller
[01:05:08] <phoe> except he doesn't use symbol-macrolet
[01:05:28] <phoe> AFAIK his example only does `(if foo ,body ,body)
[01:05:40] <phoe> and then the compiler is aware that in one branch FOO is true and in the other BAR is false
[01:05:45] <shka> phoe: try (if (eq key #'identity) (progn ,@body) (progn ,@body))
[01:05:45] <phoe> and it can optimize based on that
[01:06:01] <shka> i think that this will work only in sbcl sadly
[01:06:11] <White_Flame> andlook at that, PCIe 6.0 spec released
[01:06:13] <phoe> oh? in what context?
[01:06:41] <shka> phoe: sbcl can actually do your normal function call if it knows what is the exact function-object instance 
[01:06:47] <phoe> ooooh
[01:06:48] <phoe> I see
[01:06:58] <White_Flame> yeah, I've done (typecase (.. ,@body) (.. ,@body) ...) as well
[01:07:00] <shka> which is not super useful i am afraid
[01:07:15] <shka> but cool
[01:08:26] <phoe> yes, I see
[01:09:02] <shka> it could be more useful with that SICL call side optimization actually 
[01:10:19] <shka> then one could add handling for the most frequent combination of function and object type 
[01:11:49] <shka> i have high hopes for that honestly
[01:12:42] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[01:13:25] <shka> bigger even then for the first class envs, those would come in handy for that lisp os 
[01:13:33] <shka> or closos 
[01:13:41] <shka> that's how it is called actually 
[01:18:44] <shka> good night all
[01:18:59] <selwyn> where is this blog post
[01:19:24] <sm2n> <https://mov.im/?blog/phoe%40movim.eu/f76c3cd8-8d55-409a-9827-c1b345e8e3ad>
[01:19:25] -ixelp- Blog • Macroexpand-time branching
[01:21:00] <selwyn> nice
[01:22:33] *** Joins: euandreh (~euandreh@2804:14c:33:9fe5:4895:4e42:bd43:c273)
[01:33:16] *** Quits: White_Flame (~quassel@user/white-flame/x-6930243) (Remote host closed the connection)
[01:34:30] *** Joins: White_Flame (~quassel@user/white-flame/x-6930243)
[02:40:51] *** Quits: kevingal (~quassel@2a02:8084:4140:f300:e9b0:bb2c:cd30:98db) (Remote host closed the connection)
[02:51:38] *** Joins: Inline (~Inline@aftr-37-201-240-204.unity-media.net)
[02:53:46] <lagash> sm2n: is there another place where that blog is up?
[02:54:08] <sm2n> ask phoe 
[04:04:27] <moon-child> lagash: iirc the contents of that post are mostly the same as the text of the readme at https://github.com/phoe/with-branching
[04:04:28] -ixelp- GitHub - phoe/with-branching: An implementation of macroexpand-time conditionalization.
[04:52:43] *** Quits: random-nick (~random-ni@87.116.167.125) (Ping timeout: 256 seconds)
[05:03:26] *** Quits: Catie (~user@user/catie) (Remote host closed the connection)
[05:04:01] *** Joins: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f)
[05:04:12] *** Joins: Catie (~user@user/catie)
[05:08:37] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 240 seconds)
[05:10:49] *** Joins: waleee (~waleee@h-98-128-229-110.NA.cust.bahnhof.se)
[05:18:48] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[05:47:57] <mfiano> is there an recognized name that means copy the low octet into the high octet of a bit pattern?
[05:48:13] <mfiano> like, given an ub8, return a ub16 with the high bits copied from the low bits
[05:48:22] <mfiano> so #b10010110 looks like #b1001011010010110
[05:48:51] <White_Flame> not that I can think of, but multiplication can do that in 1 step
[05:49:14] <White_Flame> (* num #x101)
[05:49:15] <mfiano> it's just a (logior x (ash x 8)) afaik
[05:50:15] <White_Flame> I've used that in increasing the RGB bit width, and going from greyscale to RGB, as the single multiplication can turn 1 copy into 3, too
[05:51:08] <mfiano> Thanks
[05:56:24] <mfiano> Infact I'm using it for PMA
[05:57:04] <White_Flame> pma?
[05:57:25] <mfiano> RGB pre-multiplied alpha decoding
[05:57:30] <White_Flame> ah
[05:58:58] <mfiano> https://gist.github.com/mfiano/1d0d247552d0147654f1e79e4b9113ea
[05:58:59] -ixelp- 1.lisp · GitHub
[05:59:23] <mfiano> Too many #x101's but looks nicer anyway :)
[06:00:10] <mfiano> Now to decode all the other formats...
[06:02:45] <White_Flame> back in the day it took me quite some puzzling to figure out how to get from 8 bit to 16 bit without leaving the low bits just at 0 ;)
[06:02:52] <White_Flame> is that common knowledge now?
[06:03:43] <White_Flame> (though I believe I was expanding from 4bit to 8bit color channel values)
[06:05:09] <mfiano> Well I wouldn't say common knowledge as I would have to go look up how I did it 100 times over in my old code
[06:05:26] <mfiano> It's been a while since I had to do that
[06:07:08] <mfiano> Deciding if I even want to support 32bpc...don't think I have an immediate need for it. It comes in useful when decoding TIFF and some other formats...oh and most HDR formats are 32bpc floating-point values...
[06:07:22] <mfiano> The latter I may need...
[06:07:40] <mfiano> But putting it on the later pile
[06:11:42] <gilberth> It's custom to just duplicate the digits widing the bits per component. You go from #123 -> #112233 -> #111122223333
[06:11:58] <moon-child> mul: 3 cycles.  Or: 0.3cycle, shift: 0.3cycle, mov: 0.3cycle
[06:12:10] <moon-child> even accounting for dependencies, I think the latter wins
[06:12:18] <White_Flame> eh, I think #123 -> #123123 -> 123123123 probably scales better
[06:12:32] <White_Flame> note the most significant 3 digits
[06:12:33] <moon-child> yes, when bigger calculus changes (though you can still binary divide-and-conquor)
[06:12:48] <moon-child> mul hack is well known for e.g. memset.  I don't know how many people are in the habit of implementing memset, though :P
[06:12:55] <mfiano> moon-child: Depends on the compiler. SBCL is smart enough to be much less code for the former.
[06:13:04] <mfiano> Not sure about cycles though
[06:13:25] <moon-child> mfiano: you mean, sbcl is stupid enough to generate much more code for the latter?
[06:13:27] <moon-child> :)
[06:13:56] <gilberth> Nah. (format nil "~x" (round 1/15 1/255)) => "11"
[06:15:43] * White_Flame looks at the REQUIRE discussion in #commonlisp and thinks up the pun (reeeeee choir)
[06:16:48] <White_Flame> gilberth: that's only 1 digit
[06:17:57] <White_Flame> but in the 123 example, you bring the intensity from 123/fff to 112/fff to 111/fff
[06:18:01] <gilberth> Try for yourself: (loop for k below 255 do (assert (= (ldb (byte 8 8) (round (* k 1/255) 1/65535)) k)))
[06:19:08] <White_Flame> you're only verifying the top byte there
[06:19:17] <White_Flame> not that the lower bits are the same percentage fill-in
[06:19:34] <gilberth> s/(byte 8 8)/(byte 8 0)/
[06:19:55] <White_Flame> right, if you do both, then you see that it's basically 123 -> 123123, not 123 -> 112233
[06:20:22] <White_Flame> or, 7b -> 7b7b :-P
[06:20:30] <White_Flame> and not 77bb
[06:20:39] <gilberth> Yes.
[06:21:13] <White_Flame> ohhhhh, i think I read your initial statement wrong
[06:21:30] <gilberth> I was a bit unprecise in "digit".
[06:21:31] <White_Flame> you were using RGB triples of hex digits, not a single value of #x123/#xfff
[06:22:46] <gilberth> When you widen from n bits per component to 2n, you just concatenate the n bit components to each other.
[06:23:41] <gilberth> As I learned that, I was a bit surprised.
[06:24:06] <White_Flame> yep
[06:24:20] <White_Flame> but it makes sense, as the upper bits go from 0%->100%, so too do the lower ones
[06:24:34] <White_Flame> for the entire number to go smoothy across that range
[06:25:10] <White_Flame> I found it fascinating that going from x/15 to x/255 was an integer multiplier
[06:25:29] <White_Flame> since all the values involved are 2^n-1
[06:25:42] <White_Flame> it still (always?) divides evenly
[06:25:53] <White_Flame> (at least for the common bit widths)
[06:26:03] <gilberth> Well, 255/15 = 17 :)
[06:27:38] <gilberth> But it's not obvious from 2^(2n)-1 / 2^n-1. At least not to me.
[06:28:40] <White_Flame> right
[06:28:57] <White_Flame> but the bit pattern is generall #b10101, #b1001001 etc
[06:29:01] <White_Flame> *generally
[06:30:30] <gilberth> I mean, it works for every n>1. I would have my fun to prove that. But then I am not good at math.
[06:31:17] <White_Flame> or rather, the quotient ends up being 2^n+1
[06:31:39] <White_Flame> (for a different n probably)
[06:34:02] <gilberth> Hmm, it also seems to work for (2^(kn)-1) / (2^n-1) in general.
[06:35:08] <gilberth> Which makes sense and my head hurt.
[06:48:06] *** Quits: selwyn (~selwyn@user/selwyn) (Remote host closed the connection)
[06:55:28] *** Quits: Catie (~user@user/catie) (Quit: going home)
[07:05:00] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[07:34:06] <gilberth> White_Flame: Here is a proof: <http://clim.rocks/gilbert/widen.txt> ;that was easy
[07:42:32] <moon-child> gilberth: what happened to the ... between 2^n and 2^(kn-1)?
[07:43:06] <gilberth> I ate it. Fixed it a minute ago. Reload. Sorry.
[07:44:59] <gilberth> Dammit, I missed more ellipses. I just need punctuation! I am an addict.
[07:45:17] <moon-child> ahaha cute
[07:45:19] <moon-child> I like it
[07:48:02] <moon-child> (though, hm, I think it might be clearer if you reverse the order of the steps)
[07:48:12] <moon-child> (i.e. showing how you can get to n given n-1)
[07:49:02] <gilberth> You mean starting with the last equation? Top-down approach?
[07:49:25] <moon-child> yeahe
[07:49:27] <moon-child> yeah
[07:50:24] <gilberth> It might be more elegant. But this way is the way I came to the conclusion. I started to compute f(n,k) and then realized that f(n,k-1) hides in there.
[07:50:36] * moon-child nods
[07:56:37] *** Quits: euandreh (~euandreh@2804:14c:33:9fe5:4895:4e42:bd43:c273) (Ping timeout: 240 seconds)
[07:59:09] *** Quits: waleee (~waleee@h-98-128-229-110.NA.cust.bahnhof.se) (Ping timeout: 256 seconds)
[08:19:49] *** Joins: dave0 (~davezero@069.d.003.ncl.iprimus.net.au)
[08:20:29] <dave0> maw
[08:20:50] <gilberth> Hello dave0!
[08:21:31] <dave0> hey gilberth!
[08:21:34] <dave0> how are you?
[08:22:56] <gilberth> Heh, my wife is better, therefore I am not doing so well mentally. A recurring scheme, if she has her blues, I am fine and vice versa. But I am ok.
[08:23:26] <dave0> aw sorry to hear :-(
[08:24:00] <gilberth> I'm ok. I just find it funny that my wife and I never do well at the same time.
[08:26:25] <gilberth> And I have too many machines and somehow have different versions of my hacks on differed machines. A mess.
[08:26:53] <gilberth> Why can't I have a single /home on each?
[08:27:35] <moon-child> nfs time?
[08:28:00] <gilberth> moon-child: Over German DSL? Works, but is a pain.
[08:28:45] <moon-child> you can stream graphics, but not plain text? :)
[08:29:00] <dave0> shouldn't you connect them all and run plan 9 so they appear as one large computer?
[08:29:02] <gilberth> NFS is not made for high latency.
[08:29:19] <gilberth> X11 is.
[08:30:03] <moon-child> it is??
[08:30:14] <gilberth> moon-child: Actually I have my machine in my haunted house mounted with NFS.
[08:30:36] <gilberth> moon-child: There is little in the X11 protocol which actually needs a round-trip.
[08:31:36] <gilberth> Begins with, if you create a window, the client comes up with the window ID, no need to wait for an answer. NFS is not like that.
[08:32:25] *** Quits: semz (~none@user/semz) (Ping timeout: 268 seconds)
[08:34:52] <gilberth> More pain is Time Machine backups over DSL. This is very slow.
[08:45:27] *** Joins: semz (~none@user/semz)
[08:51:22] <White_Flame> gilberth: cool
[08:56:13] *** Joins: mrmr3 (~mrmr@user/mrmr)
[09:05:11] *** Quits: shka (~herr@109.231.0.226) (*.net *.split)
[09:05:11] *** Quits: OlCe (~user@lfbn-nic-1-109-134.w2-15.abo.wanadoo.fr) (*.net *.split)
[09:05:11] *** Quits: scymtym (~user@ip-94-114-248-79.unity-media.net) (*.net *.split)
[09:05:11] *** Quits: emacsomancer (~emacsoman@136.60.128.68) (*.net *.split)
[09:05:13] *** Quits: mrmr (~mrmr@user/mrmr) (*.net *.split)
[09:05:13] *** Quits: ixelp (~ixelp@p5b157756.dip0.t-ipconnect.de) (*.net *.split)
[09:05:14] *** mrmr3 is now known as mrmr
[09:07:42] *** Joins: shka (~herr@109.231.0.226)
[09:10:13] *** Joins: emacsomancer (~emacsoman@136.60.128.68)
[10:09:26] *** Joins: iamFIREcracker (~iamFIREcr@user/iamfirecracker)
[10:24:43] <hayley> gilberth: Apparently the RE pissing contest also exists in hardware <https://twitter.com/geofflangdale/status/1481155159648780291>
[10:39:10] <White_Flame> manually reversing these ivory functions is getting really tedious
[10:39:14] <White_Flame> I guess I am writing a decompiler now
[11:08:53] <hayley> My desktop has booted and decided that black should be magenta today. Bad start.
[11:09:20] * hayley reboots and it goes away. At least be confident about being broken.
[11:18:58] <dave0> hayley: how about some 90's ? https://youtu.be/tPgf_btTFlc
[11:31:17] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 240 seconds)
[11:33:21] <hayley> "I've lost count of the number of h/w systems I've seen that look great until the data starts matching some portion of the regex (often stuff from the front of the regex, or the strongest literal "factor" in the regex, or whatever), and then performance goes through the floor." Well, hopefully not our DFAs by such a large extent.
[12:04:34] <hayley> gilberth: https://github.com/deadpixi/ergex/ claims to do POSIX-compatible submatching. /me goes investigate
[12:04:45] *** Joins: treflip (~user@user/treflip)
[12:07:36] <hayley> I can't seem to find any evidence that there is submatching, somehow.
[12:12:08] <hayley> But the claim to O(n*m) matching is probably wrong, as they use a Pike VM apparently, and interpret a NFA. womp womp
[12:15:09] <gilberth> Well, we do O(m).
[12:15:54] <hayley> Sure. But I seriously wonder if they achieve O(nm) with a NFA. Not O(m*2^n)?
[12:17:50] <hayley> .oO(64 stars? For that crap? Man, I suck at advertising.)
[12:19:29] <hayley> dave0: I rather play https://www.youtube.com/watch?v=JqNcZQ7cVno today.
[12:19:34] <gilberth> Yes, someone didn't do their homework. O(mn) makes no sense at all.
[12:19:47] <hayley> "Common Lisp Hackers In A ML World"
[12:20:08] <hayley> And still I find nothing that suggests there is an implementation of submatching.
[12:23:14] <hayley> Had fun with a CS student meetup in the city today. Offered to throw out everyone's rubbish after lunch. Came back, and they were talking again. "Damned concurrent GC, you've started without me!"
[12:25:06] <hayley> Now beach wants to avoid any compacting in the GC, even for nurseries, because one can just throw more cores at GC. Doesn't seem like a clear win to me.
[12:26:16] <hayley> Locality is a pain in the ass, and so is memory bandwidth. You want to mutate and collect in cache ideally.
[12:35:04] <moon-child> my problems don't fit in cache
[12:35:38] <moon-child> (but yeah, I find his lack of faith in compaction disturbing)
[12:37:32] <hayley> Can any subproblem fit in cache? I highly doubt anything I do really fits in cache (except for matching tiny strings), yet collecting garbage that just resides in cache would be nice.
[12:38:14] <hayley> .oO(Is regex_syntax::hir even documented? I can't find it on docs.rs. Good start.)
[12:39:23] <moon-child> well, sure, any problem can be decomposed into binary compositions (proof: two-address isa is reasonable), but I still have to wait for memory sometimes
[12:39:31] <hayley> Ah, this regex engine emits "start" and "end" instructions upon encountering a capturing _group_.
[12:39:53] <moon-child> (alt proof: cons cells)
[12:39:59] <White_Flame> The next gen or two of AMD will get like 850+MB of cache
[12:40:09] <White_Flame> (on the top end obv)
[12:40:14] <hayley> "self.current_set.captures[thread_id][index].start = Some(offset);" lol, how much storage do we need per VM thread?
[12:40:28] <White_Flame> need to break the gigabyte of cache barrier soon
[12:41:04] <hayley> White_Flame: The other thing is that I _think_ the caches should be core-local, and not shared for the CPU. But it might not matter.
[12:41:22] <White_Flame> l1 is core-local
[12:41:23] <moon-child> bigger caches are slower to address though
[12:41:30] <White_Flame> faster than main memory
[12:41:37] <moon-child> I liked the ibm design where other cores' l1 is your l2
[12:42:01] <moon-child> time will tell if it's sensible, but either way it's super cute
[12:42:22] <White_Flame> I 100% agree with amd's notion that moar cache == moar performance
[12:42:36] <White_Flame> and keep piling it on
[12:43:15] <hayley> CDR coding in cache when
[12:43:21] <White_Flame> heh
[12:43:27] <hayley> Compressed cache lines when
[12:43:32] <White_Flame> also eh
[12:43:42] <White_Flame> the ivory overloads the cdr code bits for a ton of different uses, too
[12:44:33] <White_Flame> so that's a particular sort spot at the moment
[13:10:39] <dave0> hayley: i like the guitars in a disco world
[13:10:51] <dave0> air guitar
[13:11:20] <hayley> "Can we have JVM GC ergonomics?" "We already have ergonomics at home" The ergonomics at home: https://www.reddit.com/r/programming/comments/s21wti/how_we_saved_70k_cores_across_30_missioncritical/
[13:11:53] <moon-child> 'any sufficiently complicated manually memory managed program contains an ad-hoc, informally-specified, bug-ridden implementation of half of bdw'
[13:12:15] <hayley> Boehm and V came up during the meetup.
[13:12:33] <moon-child> please do not mention v
[13:12:38] <moon-child> unlike byol, it is not even funny
[13:12:40] <moon-child> just disappointing
[13:13:47] <hayley> "I use a lot of Nim, you heard of it?" "Yeah, not useful to me. It's supposed to be nice, but so is almost every language ever, so..." "What about V, which apparently has all those features?" "Like autofree, which doesn't work and people just use Boehm?" "Classic." "Hey, it's more likely to work than your average C programmer."
[13:14:24] <moon-child> nim ditched its tracer for a reference counter
[13:14:32] <moon-child> and now goes through all sorts of hell to collect cycles
[13:14:58] <hayley> "Nim's memory management is deterministic and customizable with destructors and move semantics, inspired by C++ and Rust. It is well-suited for embedded, hard-realtime systems." u wanna bet m8
[13:15:28] <hayley> https://i.redd.it/77dqctmegaq61.jpg
[13:16:32] * moon-child _really_ does not get what the big deal is with move semantics
[13:17:12] <dave0> hayley: i know a girl like this lol ... https://youtu.be/-8WLa6umgdw
[13:17:17] <hayley> Budget linear types?
[13:17:53] <hayley> But when ye move, you end up copying a "handle" which is by value, which contains a reference to some heap object, which isn't copied.
[13:18:00] <moon-child> but, like, why do I care about moving?  Is it just about copy constructors?  And why must I have a copy constructor in the first place?
[13:18:40] <hayley> IMO it's about unnecessarily copying to avoid GC, except without the copying part. So unnecessarily linearizing rather.
[13:18:44] <dave0> not quite as attractive as the girl in the video, but she gets what she wants lol
[13:18:56] <hayley> dave0: I'd have to play https://www.youtube.com/watch?v=WXvlzUCB74o for my ex.
[13:19:16] <moon-child> I thought a move is still semantically a copy, only it is a memcpy() type of copy rather than an = kind of copy?
[13:19:24] <moon-child> s/semantically//
[13:19:41] <hayley> Yeah, a shallow copy, rather than deep.
[13:19:59] <moon-child> oh
[13:20:07] <moon-child> so copy constructor is supposed to make a deep copy?
[13:20:14] <hayley> So a move kills what it moved from.
[13:20:19] <moon-child> ...why not just use a functional language??
[13:20:31] <hayley> I think so? All I know is it's supposed to do something like linear variables.
[13:20:34] <hayley> moon-child: cus GC
[13:21:38] <hayley> https://www.reddit.com/r/ProgrammingLanguages/comments/s20r3x/micropython_for_internet_of_things_operating/ "The MicroPython disaster: how to make a 100MHz ARM run like a 8MHz AVR"
[13:22:25] * moon-child does not get 'iot' either
[13:22:48] <hayley> All I know is that you connect your lightbulb to the Internet.
[13:22:57] <moon-child> my lightbulbs are shy
[13:23:09] * hayley doing an IoT course in semester 2, just to figure out what the requirements for embedded compiler hacking are.
[13:23:59] <hayley> But I still missed the funny in BYOL.
[13:24:09] <dave0> so you need an app to turn on your lights, now?
[13:24:33] <hayley> Yep.
[13:25:13] <dave0> it sends electrity usage to the manufacturer
[13:26:32] *** Joins: selwyn (~selwyn@user/selwyn)
[13:28:16] <semz> finally I can gaslight people remotely by hacking their lightbulbs
[13:29:49] <hayley> https://youtu.be/TQwGjhwPEik?t=31 Pictured: hayley sitting with only 72 stars for O(m) regular expression engine
[13:43:03] *** Joins: notzmv (~zmv@user/notzmv)
[13:53:06] <gilberth> I find it funny that while POSIX tries very hard to make any formulation of \epsion UB, like () is UB, or (|a) is UB, etc. $? is UB too, but ($)? is not. They missed that. They also missed the more obvious a{0,0}.
[13:54:13] <moon-child> wait, (|a) is UB??
[13:54:21] <gilberth> Yep.
[13:55:07] <moon-child> oh, I see
[13:55:39] <moon-child> can't you have epsilon with (a?) too?
[13:56:02] <gilberth> That would match "a", which is not \epsilon.
[13:56:10] <moon-child> but it would also match epsilon
[13:56:26] <gilberth> Yes, but it's a different language.
[13:56:44] <gilberth> It matches too much.
[13:57:09] <moon-child> well, isn't (|a) the same thing?
[13:57:31] <hayley> Yes, but that still gives you a / ε, not ε.
[13:57:37] <gilberth> Well, (?...) is UB too as well as (*...), which makes kind of sense and other RE syntaxes have clobbered that.
[13:57:41] <hayley> a \/ ε
[13:58:06] <gilberth> As hayley said.
[13:58:43] <moon-child> then, I don't understand the significance of the original mention of (|a)
[13:58:56] <hayley> .O("They make copy GCs, and a few make compacts, and the rest sell graphs to all the other Common Lisp hackers in a Unix world!)
[13:59:01] <hayley> " goes somewhere.
[13:59:25] <hayley> Having an empty string in alternation is also UB.
[14:01:33] <gilberth> moon-child: Well (|a) is the same as a? Right. I was rerferring to the empty part of (|a), not to having "a" optional. It's about the syntax having UB for a special case. Consider generating an RE automatically. You can't just join strings together with | you would need to special case for some of them being empty.
[14:02:01] <moon-child> ok
[14:02:57] <gilberth> The syntax just makes it hard to write \epsilon. You have to pull tricks ($)? is ok, but most implementations get that wrong. a{0,0} would be a safe bet, then. Funny way to write "".
[14:02:58] <moon-child> .oO(Why generare REs when we have clex2?)
[14:03:20] <moon-child> 'have'
[14:03:29] <gilberth> Yep, I have an s-expression syntax, too.
[14:04:02] <gilberth> moon-child: I just find it funny that POSIX tries very hard to make writing "" hard and misses a few loopholes.
[14:04:49] *** Joins: rogersm (~rogersm@90.166.180.250)
[14:04:53] <hayley> Racket has a "type system" on RE lengths, which is used to forbid repetition on possibly zero length REs.
[14:05:16] <gilberth> And (|a) is undefined behavior. Unlike e.g. BRE \(^\), which may not prepare coffee, but match either "^" or BOL. But no coffee.
[14:05:25] <hayley> https://docs.racket-lang.org/reference/regexp.html#(part._.Additional_.Syntactic_.Constraints) mucho texto
[14:05:51] <gilberth> hayley: I can't apply the Kleene-star to \epsilon? Why?
[14:06:17] <hayley> Do I look like I wrote Racket regex?
[14:06:54] <gilberth> Do I know how a Racket hacker looks?
[14:07:13] <hayley> A lot better than I do. But not a very high bar to clear.
[14:08:01] <gilberth> Ok, then.
[14:08:23] <hayley> Or at least they struggle to get along less than I do.
[14:10:31] * gilberth continues writing test cases.
[14:11:44] <hayley> But I prefer to not have a hopeless top-level, and look where that got me.
[14:12:25] <hayley> Cranky, can't find a job, and sitting on a half-okay regular expression engine.
[14:12:45] <moon-child> get intel to hire you.  Worked for the hyperscan guy
[14:13:01] <hayley> Who the fuck advertises "Thread-Safe, Lock-Free Matching"? "Multiple threads, each with their own scratch structures, can perform matching independently." No shit - let me tell you about having separate program counters too!
[14:13:14] <hayley> moon-child: Getting bought by Intel is overrated imo
[14:15:50] <hayley> I'll sell to AMD for a new computer and a large bottle of orange juice. Deal of the century
[14:18:40] <moon-child> give me half the juice and I'll be your pr guy
[14:19:15] <hayley> Deal.
[14:24:38] <moon-child> hmm, I vaguely remembered hearing mathml was a thing, turns out only firefox and safari support it
[14:24:49] <moon-child> was gonna say 'damn, guess I have to find some other way to typeset math'
[14:24:58] <moon-child> then I realised the situation is actually much better than that
[14:25:27] <hayley> KaTeX?
[14:25:27] <moon-child> I get to have a 'this site best viewed in firefox m+ or safari n+'
[14:25:40] <hayley> lol
[14:25:44] <moon-child> if that's not cosmic justice I don't know what is
[14:26:17] <hayley> Still, I have the same TeX in the HTML and LaTeX versions of the Netfarm book.
[14:27:26] <hayley> Just so that everyone can see my abuse of notation in their favorite medium.
[14:28:07] <moon-child> you use katex/mathjax?
[14:28:28] <moon-child> (alternately I could use apl syntax.  That's no less hipsterish in principle, but a _lot_ more hipsterish in practice)
[14:28:30] <hayley> Yup.
[14:30:00] <hayley> I use Racket Scribble to spit out HTML and LaTeX from the same markup at the moment. The results are decent.
[14:31:08] <hayley> Though I can't seem to get the sort of layout I want out of LaTeX, when I have some pretty messy and long transitions specified.
[14:33:44] <hayley> I'd like to line wrap an equation, while keeping it ragged-right. Doesn't seem like TeX can wrap equations unless I intervene with manual breaks (and adding indents sometimes), which is far too messy for my liking.
[14:34:07] <selwyn> ragged right = right align?
[14:34:14] <selwyn> i have never managed to do that without manual breaks
[14:34:24] <epony> just stick to Word's Equation Editor ;-)
[14:34:29] <selwyn> latex is messy unfortunately
[14:35:01] <epony> you know MathML?
[14:35:24] <hayley> Left align.
[14:35:26] <moon-child> imo it is a fool's errand to try to make a layout which will automatically look good at all sizes
[14:35:47] <moon-child> but also: latex is designed specifically to make output that looks good at _one_ size
[14:35:53] <hayley> Seems there is breqn for LaTeX though.
[14:36:37] <epony> if you target browsers, you end up targeted by them
[14:36:57] <hayley> I only really have three: A4, a desktop screen, and mobile screen (for shits and giggles mostly).
[14:37:48] <epony> https://en.wikipedia.org/wiki/MathML#Example_and_comparison_to_other_formats
[14:38:13] <hayley> Apparently KaTeX implements line breaking for inline but not display math.
[14:38:40] <epony> my notebook is A5 ;-)
[14:39:24] <hayley> Not really much of a pretty printer though, it won't flow e.g. A = B + C + [junk] + Z so that the sum is to the right of the =
[14:42:11] <hayley> I'd settle for the CL pretty printer and its blocks, but preferably with some heuristic for deciding which expressions to break, rather than being greedy.
[14:44:54] <selwyn> i am writing a whole damn thesis in latex
[14:45:16] <hayley> You can achieve something similar with CSS, though it is also too greedy, and only the most nested expressions will ever wrap.
[14:46:23] <selwyn> in the browser there are a great many targets
[14:46:33] <selwyn> but in typesetting, not really (a4 is always a4)
[14:46:56] <selwyn> which is why i find doing stuff by hand in latex tedious but not upsetting
[14:47:44] <epony> https://en.wikipedia.org/wiki/Eqn_(software) ; http://man.openbsd.org/eqn.7#SEE_ALSO
[14:48:23] <hayley> OTOH I have weird notation, like (bla, bla) -> (blah, foo) and ideally I'd typeset that as "[space] (bla, bla) [newline] -> (blah, foo)" if I had to.
[14:49:03] <hayley> Can I afford to yak shave a portable pretty printer? I wonder how the WASM spec handles this. Probably doesn't.
[14:50:03] <hayley> Indeed they just don't have many interesting instructions.
[14:50:55] <moon-child> my concept of ideal typesetting is highly inconsistent, and varies depending on what I have eaten recently, time of day, phase of moon, which football team is winning, etc., etc.
[14:51:13] <hayley> I stand corrected: https://webassembly.github.io/spec/core/exec/instructions.html#control-instructions
[14:51:38] <epony> org has some export.. too
[14:51:40] <hayley> But on my phone, the notation for IF spills out of its container.
[14:56:44] <selwyn> procrastination has no limits
[14:57:08] <selwyn> i've blocked the entire browser and now i am watching a starcraft stream on twitch
[14:58:41] <shka> selwyn: link?
[14:58:46] <shka> to the stream
[14:58:50] <selwyn> ecl_sc2 on twitch
[14:59:16] <selwyn> https://www.twitch.tv/esl_sc2
[14:59:26] <shka> oh, esl
[14:59:39] <selwyn> yeah they are seemingly always on
[15:00:00] <shka> solar vs showtime, cool
[15:00:08] <selwyn> is it a league?
[15:00:09] <moon-child> embedded common lisp starcraft 2?
[15:00:13] <moon-child> interesting...
[15:03:32] <epony> a battle of the Polish and Hungarian notations
[15:06:10] <epony> https://en.wikipedia.org/wiki/PascalCase#Computer_programming
[15:06:39] <epony> (typesetting day, you know)
[15:07:06] <moon-child> gilberth: btw, one thing I hate about markdown: I can not mark up code blocks.  I want to put links, emphasis, footnotes, subscripts...
[15:07:19] <moon-child> it is a part that does not compose.  And sapir-whorf applies
[15:07:29] <epony> org is the better LML
[15:07:57] <epony> (literate programming suitable)
[15:08:05] *** Joins: scymtym (~user@ip-94-114-248-79.unity-media.net)
[15:11:10] <epony> seems like we lost the child audience to twitchy streams ;-)
[15:12:06] <epony> vh-1 rocks!
[15:15:56] <selwyn> return to org mode
[15:17:32] <selwyn> 3
[15:25:56] *** Joins: random-nick (~random-ni@87.116.181.150)
[15:25:57] <ck_> C-c C-t C-C C-T  -> [DONE]
[15:28:13] <selwyn> a media coup is underway against boris johnson over covid parties
[15:28:39] <selwyn> it is difficult to think of other governments falling over covid, except maybe the most recent us election (ymmv)
[15:28:54] <selwyn> *parties that happened during covid lockdown
[15:29:06] <Gnuxie> really?
[15:29:34] <Gnuxie> where's headlines like "Boris partied while I was in a COVID COMA!"
[15:30:05] <selwyn> > is the party over for pm?
[15:30:07] <selwyn> daily mail
[15:30:38] <ck_> he thanked "Jenny from Porto" after he was in hospital, that's the rhetorical protective circle
[15:30:47] <selwyn> > fury as bojo dodges question over bash
[15:30:49] <selwyn> sun
[15:32:21] <selwyn> gnuxie: have to say that is a good headline
[15:32:28] <selwyn> you should work for the sunday sport
[15:32:51] <Gnuxie> cos it's real it's what Michael Rosen said 
[15:33:02] <Gnuxie> ahh ok
[15:33:08] <Gnuxie> those are fair enough then 
[15:33:11] <selwyn> oh lol
[15:34:27] <hayley> .oO("GC needs 6x more memory, look at the Hertz and Berger paper" "You just activated my trap card!!!1!")
[15:35:19] <hayley> https://old.reddit.com/r/programming/comments/s21wti/how_we_saved_70k_cores_across_30_missioncritical/hsc63s2/?context=3
[15:39:40] <selwyn> kieth railing against 'boozy parties'
[15:40:04] <selwyn> as opposed to the appropriate sober ones
[15:40:12] <hayley> "Figure 4 of the referenced paper PDF shows 6x to be the difference between GC and manual memory handling." "Yes, now read the rest of the paper to see how they decided on what represents manual memory management."
[15:40:19] <hayley> You see what you want to see, methinks.
[15:42:49] <hayley> https://i.redd.it/a8k7az85m5871.jpg
[15:46:06] <epony> you know memory is "cheap" they say, but it's a lie since they have so few of it and can't make new.. memory is VERY expensive
[15:48:16] <epony> (they just want you to spend more money on consumption computers and not be able to do that much as to compete with them)
[15:48:40] <epony> https://en.wikipedia.org/wiki/Commodity_computing#The_1980s_to_mid-1990s
[15:50:30] * moon-child wonders why firefox keep scrolling on its own when I switch tabs
[15:50:51] <moon-child> literally all I have to do is hold down ctrl and quickly alternate pressing pgup/pgdn
[15:51:02] <moon-child> it'll scroll a bit
[15:51:22] <moon-child> and it seems to be confused about the fact it's scrolled, as it only renders bg on the part it scrolled onto the screen
[15:51:55] <epony> webgl and such do become problems when the interface of the program is not "reliable" and "static"
[15:53:11] <epony> with "in program" compositing you can get trailing pointer problems and out of place button events and menu failures and what not
[15:56:00] <epony> "WebRender compositor" they call it env MOZ_WEBRENDER=1 and about:config gfx.webrender.enabled knob
[15:57:57] <epony> https://wiki.mozilla.org/Platform/GFX/Quantum_Render
[16:17:56] * edgar-rft doesn't know of any reliable program
[16:25:57] <selwyn> how is one to cite a math overflow reply?
[16:26:31] <selwyn> somewhat embarrassing, but i have not found a derivation in any academic work, and it is legit
[16:27:51] *** Quits: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f) (Quit: Leaving)
[16:30:41] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[16:33:41] <phoe> selwyn: https://www.theverge.com/2018/10/24/18019464/4chan-anon-anime-haruhi-math-mystery
[16:34:21] <phoe> that's a very related topic I think
[16:34:25] <shka> degeneracy used to solved the math problem
[16:34:27] <phoe> related to an even more ephemeral medium
[16:34:28] <shka> weird times
[16:35:50] <shka> i should watch Haruhi actually
[16:45:28] <selwyn> i can't open the link rn, but is it about that combinatorial problem that 4chan solved
[16:45:58] <shka> selwyn: yes
[16:46:05] <selwyn> that was impressive
[16:47:59] <selwyn> shka: i thought you meant degeneracy of an eigenspace or sth similar
[16:48:05] <selwyn> but you meant moral degeneracy lol
[16:48:15] <shka> i meant 4chan 
[16:48:15] <phoe> he meant 4chan I think
[16:48:49] <selwyn> indeed
[16:48:53] <shka> the only place worse then 4chan is 8chan
[16:49:01] <phoe> twice as bad
[16:49:26] <shka> which exists because there were users that even 4chan considered to be degenerates 
[16:49:32] <selwyn> i am not familiar with the ecosystem
[16:49:34] <selwyn> thank god
[16:49:38] <phoe> yes, thank god
[16:49:50] <phoe> I, not thank god, am familiar with it
[16:50:05] <shka> 8chan is nazis+pedophiles 
[16:50:08] <selwyn> i did search for something lisp related and one of the results was a very niche programming imageboard
[16:50:17] <selwyn> which was nice
[16:50:19] <phoe> remember the name?
[16:50:27] <selwyn> uh
[16:50:34] <selwyn> i will try
[16:51:29] <selwyn> i like imageboards as a medium
[16:51:49] <selwyn> its a shame they couldn't really be used positively
[16:51:53] <ck_> what exactly does that term mean, as opposed to say forums?
[16:51:57] <ck_> is it the anonymity?
[16:52:53] <selwyn> the anonymity combined with ease of posting means that imageboards at their best (imo) are like modern social media without the dopamine mill and ridiculous status games, pile-ons etc.
[16:53:04] <ck_> anyway I wouldn't say there is no positivity on places like 4chan
[16:57:59] <selwyn> many seem to believe that scrapping anonymity will cure social media of its ills
[16:58:04] <selwyn> which i have never ever understood
[16:58:31] <ck_> yeah that stance is not a result of deep thought in my opinion
[16:58:58] <selwyn> for a start: people are extremely happy to post abuse under their own name
[16:59:03] <ck_> yeah exactly
[16:59:15] <selwyn> any cursory glance at a facebook feed will show you that
[16:59:45] <ck_> it's like ministries for education and their edicts that feel like of a different world. As if they'd never stepped foot in a school recently or at all
[17:02:49] <selwyn> it is like they expect big tech to act as the omnipotent teacher that will shut the bad kids up and make the problem go away
[17:03:00] <selwyn> but this is a very naive understanding of social dynamics
[17:03:14] *** Joins: kevingal (~quassel@37.228.202.92)
[17:03:18] <ck_> not unique to politics of course
[17:04:24] <ck_> every story about bad bosses or managers or coworkers is an indication of the same thing, in my opinion anyway
[17:04:48] <ck_> understanding people is hard, even if you have empathy and try to do the right thing it can often fail
[17:34:40] <ck_> selwyn: it's now also a "hacker news" https://news.ycombinator.com/item?id=29905940
[17:45:16] <selwyn>  yes lol
[17:46:20] <shka> michael bay spaceship https://www.youtube.com/watch?v=dB91TJHa-NY
[17:46:27] <selwyn> the comments don't seem very interesting though
[17:51:18] <selwyn> an obvious thing to say but jwst really is something
[17:51:25] <selwyn> every detail i have seen about it is incredible
[17:52:38] *** Joins: OlCe (~user@lfbn-nic-1-109-134.w2-15.abo.wanadoo.fr)
[17:53:00] <pl> selwyn: even the JavaScript interpreter?
[17:53:45] <selwyn> well
[17:53:50] <selwyn> i suppose that is incredible in a different way
[17:54:06] <aeth> JS implementations are a marvel of modern engineering
[17:54:42] <aeth> JS should be as slow as Ruby, but instead it's probably only about twice as slow as SBCL, despite having less friendly semantics and not allowing the type declaration performance escape hatch
[17:54:54] <aeth> (Ruby's one of the slowest languages)
[17:55:21] <pl> Ruby really doesn't do much in terms of optimizations
[17:55:33] <aeth> right
[17:55:42] <pl> though its engine is still better than Python's after Ruby 1.9
[17:55:52] <aeth> Ruby 5 years ago (I think they started trying) is the baseline of what a "scripting language" would be without optimizations
[17:56:35] <aeth> but at this point, I woulod think that JS is the fastest interpreted language without an explicit compile-to-bytecode stage (unlike, say, Java or C#, which have you compile them to bytecode afaik)
[17:56:55] <aeth> (and Java and C# have it much easier because they have C-like semantics in a lot of ways, and manifest/static types)
[17:58:01] <moon-child> obligatory chambers quote about concrete types not helping optimization
[17:59:09] <pl> Ruby MRI before 1.9 ran directly on textual Ruby code
[17:59:20] <pl> JRuby is pretty fast, though
[17:59:29] <moon-child> I think the graal ruby is the fastest these days
[17:59:40] <sm2n> truffleruby, yeah
[18:00:06] <shka> if you are using ruby where performance matters your are doing it wrong
[18:00:22] <shka> but DAMN pokemon reborn is laggy
[18:00:40] <sm2n> shka: Ruby's shiny new JIT was explicitly designed just to speed up rails
[18:02:01] <selwyn> are the other ruby implementations actually usable? or is it like python which is basically limited to a reference impl
[18:02:08] <aeth> sm2n: doesn't sound too bad
[18:02:18] <aeth> selwyn: at least in the old days, JRuby used to be very popular
[18:02:43] <aeth> sm2n: most JITs are explicitly designed to speed up matrix multiplication and other things that people love to use in benchmarks, but that few people would do in those languages
[18:02:50] <sm2n> selwyn: it's like python, somewhat — other implementations are always behind on language features and aren't compatible with everything
[18:03:37] <sm2n> Ruby was standardized at one point
[18:04:10] <sm2n> But I guess they couldn't resist changing the language
[18:06:49] <aeth> can you blame them?
[18:06:52] <aeth> look at CL
[18:07:19] <aeth> hasn't gotten a new standard in ages, so it's out of sync with de facto standards by decades
[18:07:40] <aeth> Scheme regularly releases non-authoritative standards, as random PDFs on the internet, but implementations often ignore them
[18:08:07] <selwyn> changing cl would risk a schism
[18:08:11] <selwyn> which i don't think we can afford
[18:08:12] <moon-child> r7rs-large is coming Soon(tm)
[18:08:30] <moon-child> regardless, recently proposed in #sicl was a conservative standardization of popular extensions
[18:08:43] <moon-child> gray streams, package-local nicknames, threads ...
[18:08:58] <moon-child> with implementation feedback, and based on existing portability libraries which already have wide approval
[18:09:03] <moon-child> I think the situation is not so bad as all that
[18:09:08] <moon-child> though cl is unfortunately stuck with its strings
[18:09:30] <sm2n> What is wrong with CL strings?
[18:09:30] <selwyn> hm
[18:09:46] <selwyn> it ought to be possible to update cl in a backwards compatible way right
[18:10:01] <pl> selwyn: Ruby, unlike Python, handles multiple implementations well 
[18:10:14] <selwyn> if you limit yourself to interning new symbols in cl-user...
[18:10:16] <moon-child> sm2n: 'character' is not really a sensible way to slice up strings
[18:10:27] <sm2n> Also, if you read the ruby changelogs, they make many syntactical changes
[18:10:49] <moon-child> sm2n: random access requirements are also not really reasonable given the direction unicode has taken
[18:11:06] <moon-child> sm2n: I think raku pretty much got strings completely right
[18:11:37] <aeth> moon-child: UTF-32 character arrays is the *only* way to do strings and keep them as arrays instead of their own sequence type that's half-array half-list in the performance/behavior expectations
[18:11:46] <aeth> at the cost of RAM, obviously
[18:11:58] <moon-child> aeth: strings are _not_ sequences
[18:12:01] <moon-child> that's the problem
[18:12:12] <aeth> no, they still are
[18:12:16] <semz> only if you import Unicode :^)
[18:12:25] <aeth> you'd just need to make runtime UTF-8 the third fundamental type of sequence
[18:12:35] <aeth> as opposed to runtime UTF-32, UTF-8 at the boundaries
[18:12:35] <moon-child> they should not be sequences (I argue).  They should be scalars, on which can be projected various forms of sequence
[18:12:46] <aeth> well, that's the other issue
[18:12:52] <moon-child> such as: utf-8 code units, code points, characters, graphemes...
[18:12:55] <aeth> not being able to 'reinterpret' the representation of sequences like in C/C++
[18:13:03] <moon-child> those projections should also be independent of the underlying representation
[18:13:07] <aeth> where you can just take an uint32 array and read it as a uint8 array or whatever
[18:13:16] <aeth> saves you a lot of bit manipulation that is common in CL
[18:13:23] <moon-child> I don't see why that's relevant
[18:13:33] <aeth> "on which can be projected various forms of sequence"
[18:13:45] <moon-child> so?
[18:13:47] <aeth> when you're reading in binary data, you often have to treat it as two forms, e.g. uint32 and uint8
[18:13:49] <moon-child> you can't reinterpret a ucs-4 array and get a utf-8 array
[18:13:57] <moon-child> I speak of logical types, not representational ones
[18:14:32] <moon-child> I don't _care_ how my objects are represented.  I care that I should be able to get utf8 code units if I need them, unicode code points if I need them, graphemes if I need them...
[18:14:36] <moon-child> but that is an implementationd etail
[18:14:45] <semz> shka, keep in mind: That game gives you the tripple whammy of RPGM slowness, Ruby slowness, and bad game developer coding slowness
[18:19:43] <aeth> moon-child: that is an incredibly similar point
[18:20:05] <moon-child> is it?
[18:20:31] <moon-child> it seems to me that you argue for a type which is closely tied to its ucs-4 manifestation
[18:22:26] <aeth> what I was saying is that in C you can treat an uint32_t* as a uint8_t* without changing the runtime representation, and then read it as bytes, which helps when parsing binary files without having to do a bunch of bit operations (which you can just abstract over with a macro in CL, but still... you read in an (unsigned-byte 32) array and that's what it is and then you have to decompose it when working with 
[18:22:32] <aeth> a subset that's really semantically (unsigned-byte 8) or whatever)
[18:23:05] <aeth> it looks like you're arguing for something similar, except instead of treating a subarray as different parts of a byte, you'd treat a subarray as different parts of unicode, such as graphemes or code points
[18:23:22] <aeth> The main difference is that you couldn't start from the same point, unlike in C, where you don't have to decompose it before handing it off to the helper function
[18:23:37] <aeth> since you might be in the middle of something
[18:23:47] <aeth> although I guess, actually, that happens in C, too, if you go from ub8 to ub32
[18:24:04] <aeth> utf8 has variable length, though, so it's a bit messier
[18:24:06] <moon-child> I still don't understand.  Why is it useful in this context to treat some buffer as containing octets in one context and four-octets in another context?
[18:24:17] <moon-child> Why is the pointer-aliasing useful?
[18:24:20] <aeth> moon-child: reading files in a binary format
[18:24:37] <aeth> moon-child: they're usually specified as "this range is uint32, this range is uint8, this range is uint16" etc
[18:24:51] <moon-child> ok.  I am talking about strings
[18:25:20] <aeth> similar logic
[18:25:36] <sm2n> How is it similar?
[18:25:43] <moon-child> ^
[18:26:06] <aeth> taking a sequence that consists of one type, and treating a subsequence of it as another type, without any kind of runtime allocations, just "reinterpreting" it
[18:26:25] <moon-child> I don't think you understood what I said at all
[18:26:26] <semz> selwyn: I think my real analysis professor once cited a math overflow post, but now I can't find the paper :|
[18:26:31] <aeth> in this case, handling a unicode string as consisting of different things that could plausibly be "characters"
[18:26:33] <moon-child> (I will also note that aliasing pointers is not endian-safe, and is therefore not viable as a programming method, only an unspecified optimization procedure)
[18:26:44] <semz> If the Verge article didn't satisfy you, I could walk over and look up the title, lol
[18:26:56] <aeth> moon-child: binary files also specify the endianness, although I guess the C shortcut only works when it matches
[18:27:17] <sm2n> aeth: that's not safe, and I also don't know why you would want to do that when working with strings
[18:27:47] <moon-child> aeth: as I said, I am not interested in representations.  I am interested in _semantics_.  Having determined the optimal semantics, we can figure out how to implement them performantly
[18:28:00] <aeth> sm2n: it's not safe because it's an analogy to C
[18:28:13] <aeth> and C arrays aren't safe because they don't have a prefix
[18:28:28] <aeth> but if the language built in the behavior, they could make it safe
[18:28:29] <sm2n> It'd be nice if there was a version of subseq that returned a displaced array style thing
[18:29:10] <aeth> it's useful to see an idiom that people do in unsafe languages and to see if that particular useful subset can be made safe
[18:29:23] <aeth> since the general case just makes compilers, code, etc., unreliable messes
[18:29:35] <sm2n> aeth: No, I don't see how this would work. Let's say you have a unicode string encoded as ucs-4, if you suddenly interpret it as utf8 that is invalid
[18:29:44] <sm2n> I just don't see why this is useful
[18:29:52] <aeth> sm2n: no
[18:29:55] <sm2n> strings are for text, not arbitrary binary data
[18:29:59] <moon-child> aeth: as a general point, I expect the reason such functionality is elided is because implementations are not required to (say) use compact representations for arrays of (unsigned-byte 8), (unsigned-byte 32)
[18:29:59] <aeth> I didn't mean reinterpret utf-8 as other unicodes
[18:30:06] <moon-child> but, _again_, this feature is useless for strings
[18:30:14] <aeth> sm2n: I meant reinterpreting different things that could plausibly be "characters" as CHARs
[18:30:18] <ck_> semz, selwyn: https://terpconnect.umd.edu/~ylatau/files/Tausczik2016.pdf is on topic and very meta, and also has examples
[18:30:22] <sm2n> aeth: such as?
[18:30:38] <aeth> the different components of Unicode. graphemes and code points, for instance
[18:31:10] <aeth> you would need to know enough about the internal representation to make sure that you're starting from a valid point in the subsequence, which C doesn't guarantee you when you are taking a random middle of a uint32 array and treating it as a uint8 one
[18:31:15] *** Joins: euandreh (~euandreh@2804:14c:33:9fe5:567f:a71e:f346:c5f0)
[18:31:22] <aeth> should be doable, though
[18:31:51] <semz> selwyn: found it, page 3. https://arxiv.org/abs/1508.04039
[18:31:58] <selwyn> ty!
[18:32:14] <sm2n> I think that is morally similar to moon-child's proposal
[18:32:26] <aeth> I think it's similar to what moon-child is saying, but moon-child disagrees
[18:32:49] <moon-child> aeth: you imply that it is possible to sensibly alias graphemes using characters, and codepoints using characters.  That implies that their representation is the same, and hence that you can alias graphemes using codepoints.  How do you expect that to work?
[18:33:17] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[18:34:15] <sm2n> moon-child: not quite, I think
[18:34:26] <semz> fun fact: he offered an ounce of fine gold for the solution of this and also posed it to his RA course ("if you solve this, i'll just let you pass immediately")
[18:35:34] <sm2n> I interpreted that as saying you can slice an array of graphemes, and convert the result to an array of codepoints, without copying etc
[18:36:06] <sm2n> which does seem doable, but is confusing the abstract type with the underlying representation in terms of how it is phrased
[18:36:42] <moon-child> I still don't see how you can avoid copying unless you represent code points and graphemes the same wy
[18:36:56] <moon-child> (which--note that the main raku implementation does exactly that.  But it is an implementation detail)
[18:37:53] <sm2n> Right
[18:37:57] <selwyn> semz: and someone on math overflow was the first?
[18:38:46] <sm2n> At any rate, CL doesn't allow aliasing subarrays
[18:38:49] <semz> yeah
[18:38:56] <aeth> sm2n: right
[18:38:58] <semz> they ended up writing the paper together
[18:39:30] <semz> but the cited post contains the sketch of the solution
[18:39:41] <aeth> moon-child: OK, so you mean two different encodings, not different aspects of the same encoding, I guess
[18:40:11] <moon-child> sure
[18:40:42] <selwyn> fascinating
[18:41:44] <moon-child> (note that the character with codepoint n may not be represented in the same fashion as the character n.  An array of (unsigned-byte 32) will likely be packed, but it would be quite sensible for string or an array of characters to store its characters with their tags on)
[18:41:51] <selwyn> he made second author, well deserved
[18:42:14] <moon-child> (err, in the same fashion as integer n)
[18:42:26] <moon-child> (and, again, I don't think there should be characters in the first place)
[18:42:31] <sm2n> aeth: Wait, I am wrong. What have I been doing my entire life?
[18:42:35] <selwyn> that's the best way to do research - spend an idle day thinking about it, get others to fill in the details and actually write it up
[18:42:51] <sm2n> aeth: MAKE-ARRAY has a :displaced-index-offset keyword argument
[18:43:12] <semz> "if L'Hôpital can do it, why not me?" is what he said iirc
[18:43:24] <semz> funny guy, I enjoyed his courses
[18:43:29] <sm2n> combined with a fill-pointer, that's a full slice api
[18:43:35] <semz> although I didn't become an analyst so maybe he wasn't that good ;)
[18:43:45] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[18:44:22] <sm2n> moon-child: I think the point is that you could graft a decent string api on top of displaced arrays (just maybe don't look under the hood)
[18:44:35] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[18:45:33] <moon-child> I mean, cl as a language is sufficiently capable as to permit a sane string type to be defined
[18:45:47] <moon-child> and I can imagine arrays would be useful in implementing such a type
[18:46:33] <moon-child> but that doesn't change that cl is stuck with its strings, and if you want to talk to existing code, you will have to speak cl strings with it
[18:46:51] <sm2n> moon-child: I don't think we are stuck
[18:47:15] <sm2n> Such a proposal would give you a good string type but in a backwards-compatible way
[18:47:37] <selwyn> semz: i was tempted but chose a different path to analysis in the end
[18:47:41] <moon-child> sm2n: I want ropes
[18:47:57] <sm2n> moon-child: I see you have chosen death
[18:48:00] <moon-child> and immutability
[18:48:12] <sm2n> yeah, and I want a pony
[18:48:47] <selwyn> i still don't really know what analysts do? i guess this sort of thing
[18:49:05] <selwyn> or prove statements about solutions of pdes and such
[18:49:15] <moon-child> sm2n: so, I stand by my original point: cl is stuck in a place which keeps me from my ponies
[18:50:24] <sm2n> is there a reason for immutability? interning?
[18:50:30] <aeth> sm2n: (1) nobody uses those because they're not as performant as just having start/end in your API like all of the built-in functions (which is the idiomatic way to do that, anyway)
[18:50:39] <aeth> sm2n: (2) I thought you meant aliasing as in aliasing it as a different type
[18:50:46] <aeth> like one function reads it as ub32 and one as ub8
[18:50:49] <sm2n> aeth: It could be a different type
[18:51:01] <aeth> I mean, a different :element-type
[18:51:03] <sm2n> yes
[18:51:08] <moon-child> sm2n: I was thinking for sharing, as in ropes
[18:51:25] <sm2n> aeth: that would be the extension
[18:51:35] <aeth> but, see the points
[18:51:53] <aeth> everyone uses start/end keywords/optionals intead and everyone who doesn't should... faster and more idiomatic
[18:52:10] <aeth> (foo-bar a :start 3 :end 9) is just... the way people are used to doing things
[18:52:10] <sm2n> aeth: that doesn't compose well
[18:52:18] <sm2n> but yes, it is like that currently
[18:52:20] <aeth> it does
[18:52:51] <aeth> it works very well, you just determine the start/end
[18:52:56] <aeth> and then call the next function
[18:53:07] <moon-child> I guess immutability is not really that important.  But mainly I want to kill the random access requirement, and the presumption that characters are a thing, at all
[18:54:49] <moon-child> because as long as I can type #\á but not #\á, unicode support is only pretendery
[18:55:00] <aeth> moon-child: if you wanted immutability, you can just call it text and copy r7rs
[18:55:13] <sm2n> aeth: that works if you are fine with copying
[18:55:16] <moon-child> but you can not make characters stand for graphemes, because the latter have no CHAR-CODE
[18:55:29] <aeth> Scheme, like CL, calls its char arrays "strings", but Scheme calls its immutable and probably compact strings "text"
[18:56:35] <moon-child> aeth: the problem is not defining semantics, the problem is that it's too late to define new semantics :P
[18:56:55] <aeth> no
[18:57:08] <aeth> once you accept that it's another data structure instead of redefining string, then it doesn't have to be core
[18:57:28] <moon-child> sure.  But there _is_ a core data structure which is called string.  And that data structure is wrong
[18:57:33] <aeth> no
[18:57:45] <aeth> I mean, the string should be called character-buffer or something, especially when mutable
[18:58:00] <moon-child> the _character_ data structure is wrong also
[18:58:06] <aeth> no
[18:58:20] <aeth> I mean, few things are objectively wrong
[18:58:27] <aeth> take some math and philosophy classes, it's not too late :-p
[18:58:32] <aeth> It's just a different representation
[18:58:34] <moon-child> lol
[18:58:54] <aeth> It's wrong for your needs, but the only reason not to have it is because it bloats the language, but people absolutely can have a use for such things
[18:59:12] <aeth> You could even have the "text" use #%"foo" or whatever instead of "foo" and people won't notice or care much
[18:59:46] <moon-child> cl was specified in a different era.  It's not specified that two characters with EQL CHAR-CODES are EQL.  Because implementations commonly associated extra information--such as colour and styling--with characters
[19:00:10] <moon-child> today, the way text is represented and approached has shifted, and 'character' is no longer an appropriate abstraction
[19:01:14] <aeth> works for me
[19:03:13] <moon-child> people also do string processing in c.  And it 'works'.  Until it doesn't.  Under modern implementations, you can treat a character as a tagged codepoint; in that respect it does not _prevent_ you from doing what you need to, but you might as well say that brainfuck is turing-complete and hence does not prevent you from doing what you need to
[19:04:15] <moon-child> (perhaps not _as_ well, but you get the point)
[19:04:35] <aeth> right now
[19:04:50] <aeth> internal-UTF-32 Unicode strings works for 95% of cases
[19:04:59] <aeth> and when you need to be very specific, you just manually process octet arrays
[19:05:38] <aeth> C string processing doesn't work because they're NUL terminated, which means that you can easily mess up handling them and get invalid memory
[19:06:02] <aeth> this is the difference between having a passable but imperfect string representation and having a string representation that means you can't trust any input
[19:06:06] <moon-child> I feel like we are not getting anywhere.  I'm gonna go make some coffee
[19:06:23] * selwyn goes to return some videotapes
[19:06:46] <aeth> what year is this
[19:07:01] *** Joins: CrashTestDummy (~CrashTest@ool-ad020ec7.dyn.optonline.net)
[19:08:25] *** Quits: CrashTestDummy (~CrashTest@ool-ad020ec7.dyn.optonline.net) (Client Quit)
[19:09:20] <selwyn> actually, i had a ta who had started out as an analyst but pivoted to general relativity
[19:23:04] <mfiano> moon-child: Is there some bit shifting I can do instead of (* x #xffff) ? (ash x 16) is off by x.
[19:23:39] <mfiano> or wait, it was White_Flame that helped I think last night
[19:23:56] * mfiano has no memory left
[19:24:10] <moon-child> mfiano: (* x #xffff) is (* x (- #x10000 1))
[19:24:21] <moon-child> distribute, that is (- (* x #x10000) x)
[19:24:33] <mfiano> yeah wondering if i can get rid of the mul
[19:24:34] <pjb> (loop for x below 1000 always (= (* x #xffff)  (- (ash x 16) x))) #| --> t |# 
[19:24:53] <moon-child> so assuming x is positive, multiplication by a power of two is obviously doable as a shift
[19:25:06] <moon-child> (- (ash x 16) x)
[19:25:24] <mfiano> yeah that's what i have. i guess an add is fine
[19:25:32] <mfiano> was just curious if there was a better way
[19:25:35] <moon-child> an add isn't cheaper than a shift
[19:25:40] <mfiano> aha
[19:25:43] <moon-child> err, it's not more expensive
[19:27:15] <mfiano> Thanks
[19:28:13] <moon-child> cuz most of the work is figuring out what work you have to do, and how that relates to other work that you recently did, and what other work you have to, and whether you actually have to do that work, and what if it was a mistake and you shouldn't have done that work
[19:28:15] <moon-child> etc.
[19:28:26] <moon-child> 64 lil carries seem rather trivial by comparison
[19:28:37] <moon-child> even on the gameboy, an add took the same number of cycles as a shift
[19:31:59] <mfiano> https://gist.github.com/mfiano/fe5ac43a840db53831faa9c3f43d13c3
[19:32:08] <mfiano> this is my algorithm so far.
[19:32:17] <mfiano> wonder if that can be simplified
[19:34:38] <moon-child> well, it can definitely be simd'd
[19:35:16] <moon-child> repeated division by a may be slow.  You might try libdivide-like techniques to avoid that
[19:35:31] <mfiano> I don't care much about SIMD for this. I am valuing extensibility with generic functions
[19:36:07] <moon-child> I don't think packed/simd representation of colours is anti-extensible :P
[19:36:35] <moon-child> and it seems you are trying to optimize anyway...
[19:36:35] <mfiano> I am writing conforming CL though
[19:36:45] <mfiano> Without implementation assumptions or conditionalization
[19:36:50] <moon-child> ok
[19:37:38] <moon-child> (well, I also had another implementation-specific suggestion, guess I will skip that :P)
[19:38:42] <mfiano> I will keep it in mind for possible future constraint adjustments :)
[19:39:25] <mfiano> Right now I am trying to be conforming. It's too easy for me to go down the optimization time sinkhole. Just ask hayley 
[19:39:33] *** Quits: phantomics (~phantomic@97-118-136-125.hlrn.qwest.net) (Ping timeout: 256 seconds)
[19:39:42] <moon-child> well, then why are you asking for bithax in the first place? :P
[19:41:00] <mfiano> Because we can safely assume any sane implementation will favor functions that can be represented efficiently in machine code
[19:42:22] <aeth> moon-child: optimizations that can get you 80% of the way often aren't that much work... like just adding type declarations for numerical or array code
[19:42:45] <mfiano> For once I agree with aeth.
[19:42:46] <aeth> and optimizing the last 5% would take up 90% of the time, so it's a balancing act about how far you want to go
[19:43:31] <moon-child> aeth: I want autovectorizer
[19:43:37] <aeth> More than 90% of the work... you'd write your own BLAS implementation in implementation-specific inline assembly with a CL API and use those as building blocks or something.
[19:43:48] <aeth> If you really, really, really wanted to get the last bit of optimizations out
[19:43:52] <moon-child> actually, that's a lie.  I can vectorize my own loops.  But I want autovectorizer for other people :P
[19:46:06] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Remote host closed the connection)
[19:46:20] <aeth> SIMD is very lacking, even in CL
[19:47:49] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[19:49:32] <moon-child> petalisp?
[19:51:40] <moon-child> (actually somewhat irked petalisp is agpl'd.  I might have used it seriously and contributed else)
[20:02:29] <aeth> people used to think that AGPL would prevent commercial use by being so strict, but that doesn't seem to have worked.
[20:02:36] <aeth> at least, if it's popular enough
[20:02:46] <aeth> and for everything else, just start selling NFTs of their software and they can't stop you :-p
[20:03:41] <moon-child> if you would like to license non-commercially, license non-commercially.  Why beat about the bush?
[20:04:01] <aeth> because once you go NC, even the regular users don't like you anymore
[20:04:11] <aeth> and Linux distros won't include you etc
[20:05:15] <aeth> it's appealing to write something that megacorps avoid as a rule, while still being part of the FOSS club
[20:05:59] <moon-child> I suppose
[20:06:43] <moon-child> I think use of the GPL is more commonly motivated by ideas of software freedom, and what liberties which people should have wrt software
[20:07:12] <moon-child> ideas with which I disagree, but I do not think it is worth talking about here
[20:07:36] <moon-child> hayley: 'The idea is that dynamic dispatch is evil and no language feature should allow it'  pls comment
[20:08:07] *** Quits: Aurora_v_kosmose (~LispyLigh@user/lispylights) (Remote host closed the connection)
[20:08:33] <mfiano> Whoever wrote that is dumb
[20:08:36] *** Joins: Aurora_v_kosmose (~LispyLigh@user/lispylights)
[20:11:38] <edgar-rft> people who want to steal your work care a shit about licenses anyway
[20:27:12] <aeth> edgar-rft: I'm going to make an NFT out of your sentence
[20:29:08] *** Joins: Catie (~user@user/catie)
[20:30:14] <ck_> I will funge it
[20:36:15] <ck_> non-fungible lisp when
[20:36:24] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[20:36:43] <moon-child> befunge was ahead of the game, all these years
[20:46:25] <edgar-rft> I think one of the motivations behind the GPL and similar licenses is that in the USA a "manufacturer" (e.g a programmer of some piece of software) is *automatically* liable for all damages his work might produce. In practice this means that a programmer who gives away his work for free (public domain) still can be legally sued for damages.
[20:46:25] <edgar-rft> That's why the last paragraph of the GPL says in big letters YOU GOT IT AS-IS FOR FREE AND WE'RE NOT LIABLE FOR ANY DAMAGES. At least in the USA making this clear is probably more important than to protect your spwftware from abuse, what in reality still an happen no matter what license you choose.
[20:53:53] <epony> edgar-rft, reliable programs are.. supposedly, the ones that bring your computer to a state where you can interactively "play" and "work" with it
[20:54:17] <epony> by that definition, there would be quite amass of such
[20:54:47] <edgar-rft> reliable programs would continue to work after I switched the power off
[20:55:24] <epony> so electric utensils are then not it ;-)
[20:56:03] <epony> maybe it's "political programmes" or "economic programmes" then..
[20:56:16] <epony> but again is some form of machines doing work for people
[20:57:18] <epony> since there is no such thing without people creating the mechanisms about it so that it can carry the programming for that
[20:57:42] <edgar-rft> distributed pgramming (programs running on several computers in a network) tried to overcome this limitation, it is *not* unrealistic, but still such systems crash from time to time
[20:57:43] <epony> machines need power to convert into work
[20:58:26] <epony> if you power them off, there is no work, so.. the programms are not running
[20:59:17] <epony> reliability is achieved with correct hardware design and implementation, and fault tolerance and replacement of defects
[21:00:30] <dave0> nite all
[21:01:38] *** Quits: dave0 (~davezero@069.d.003.ncl.iprimus.net.au) (Quit: dave's not here)
[21:06:49] *** Quits: treflip (~user@user/treflip) (Ping timeout: 256 seconds)
[21:17:02] <epony> distributed systems have more points of failure, so are less reliable
[21:18:11] <epony> what you need is, more redundant systems
[21:19:02] <Gnuxie> if distributed systems have more points of failure, they're not distributed 
[21:19:15] <edgar-rft> let's waste even moar energy :-)
[21:19:34] <epony> I think you're quoting the wrong terminology for a particular set of goals, so better quote your goals ;-)
[21:19:43] <selwyn> gnuxie: https://pbs.twimg.com/media/FI60dyOXMAEn7xs.png:large
[21:20:07] <epony> decentralisation is not a thing, you need connectivity and coordination
[21:20:08] <Gnuxie> lmao
[21:20:40] <ck_> german news outlet said he offered a "heartfelt apology"
[21:23:20] <selwyn> he told some of his mps that he was 'bravely taking the blame for others'
[21:23:24] <selwyn> very heartfelt
[21:23:38] <Gnuxie> the report isn't out yet 
[21:23:55] <Gnuxie> there's more to come supposedly 
[21:24:27] <selwyn> what report
[21:24:47] <Gnuxie> the investigation into partying 
[21:24:58] <selwyn> police?
[21:25:12] <Gnuxie> naa just some bollocks idk 
[21:25:26] <Gnuxie> he referred to it when he said sorry today 
[21:25:33] <selwyn> well, its important who investigates it
[21:25:40] <selwyn> can't be a whole inquiry surely
[21:25:45] <epony> https://en.wikipedia.org/wiki/Distributed_computing#Examples
[21:25:46] <epony> https://en.wikipedia.org/wiki/Radiation_hardening#Logical
[21:26:02] <epony> https://en.wikipedia.org/wiki/Fault-tolerant_system#Redundancy
[21:26:06] <selwyn> https://pbs.twimg.com/media/FI64QyJXoAAJUEt.jpg:large
[21:26:38] <epony> https://en.wikipedia.org/wiki/Defensive_programming
[21:27:14] <selwyn> > It was also reported that she had advised staff on how to destroy emails with a "double-deletion" to stop information becoming public through Freedom of Information requests.
[21:27:27] <epony> https://en.wikipedia.org/wiki/Immunity-aware_programming#Possible_interferences_of_microcontroller-based_systems
[21:27:28] <selwyn> is this cleverly deleting emails from the trash folder after you have deleted them once
[21:27:38] <Gnuxie> must be 
[21:28:38] <selwyn> well, that is the person who is investigating the party
[21:28:49] <selwyn> clearly a top level intellect
[21:28:59] <ck_> oh man, I remember that presidential congratulations picture where we speculated it was 'erased' then re-written by a secretary
[21:29:00] <selwyn> one of the few people in britain to understand how email works
[21:29:03] <ck_> what was it again
[21:29:05] <Gnuxie> reply all to undo the delete 
[21:29:12] <selwyn> gnuxie: haha
[21:29:19] <selwyn> ck: that rings a bell
[21:29:25] <epony> https://en.wikipedia.org/wiki/BGP_hijacking#Public_incidents
[21:29:35] <ck_> I know you said "inclined to agree" in response
[21:29:56] <epony> https://en.wikipedia.org/wiki/Internet_outage#Management
[21:30:12] <ck_> it was 2020-11-10
[21:30:20] <epony> WTF "Modern society, especially in developed countries, depends heavily on the Internet not just for communication. There have been some measures taken and possibilities exist for managing and countering a large-scale Internet outage.[citation needed]"
[21:30:33] <selwyn> some of the trump tweets would use a word longer than usual and it was such a tell that it was ghostwritten
[21:31:26] <selwyn> ck: do you have a link?
[21:31:39] <epony> https://en.wikipedia.org/wiki/Critical_Internet_infrastructure
[21:32:09] <ck_> the link was https://twitter.com/BorisJohnson/status/1325133262075940864/photo/1
[21:32:26] <epony> you real goals:
[21:32:28] <epony> https://en.wikipedia.org/wiki/Decentralization#Criticism
[21:32:39] <epony> the rest of the above: "pretentious talk"
[21:32:50] <selwyn> oh that thing
[21:32:58] <selwyn> didn't they forget to erase some pixels
[21:33:49] <selwyn> always the problem with some of the pixels - you can tell
[21:34:12] <ck_> yes, exactly, you could see a previous text shine through
[21:34:40] <ck_> you can only tell if you saw some shoops in your time though
[21:34:46] <ck_> for the masses it is an invisible, perfect ruse
[21:35:15] <epony> just think for a moment, did not the British empire and the Dutch colonies not capture South Africa and India first?
[21:35:18] <epony> https://en.wikipedia.org/wiki/Zondo_Commission#Findings
[21:36:32] <epony> https://en.wikipedia.org/wiki/Lobbying_in_the_United_States#Corporations
[21:36:56] <epony> https://en.wikipedia.org/wiki/Military%E2%80%93industrial_complex#Current_applications
[21:36:59] <epony> ...
[21:37:11] <epony> now what are you trying to decentral-eyes exactly?
[21:37:15] <ck_> selwyn: did you hear back from california yet?
[21:37:42] <selwyn> i am waiting to book a careers appointment with my university for advice on improving my resume and cover letter
[21:37:50] <ck_> oh ol
[21:37:54] <ck_> ok*
[21:37:55] <selwyn> to be honest, i would rather not wait, but i have heard that it is worth it
[21:38:08] <selwyn> i am also not desperate to work immediately
[21:38:13] <ck_> understandable
[21:38:24] <ck_> does this office have experience with international applications?
[21:38:56] <ck_> I mean, have you seen what US tech cvs sometimes look like?
[21:39:01] <selwyn> about 10% of the employees, including much of the technical management, are from the uk
[21:39:59] <selwyn> uk work culture at least thinks of itself as close to being american
[21:40:04] <selwyn> idk what the mismatch will be
[21:40:17] <ck_> oh, interesting, wouldn't have thought that the case
[21:40:39] <selwyn> my cv is a cross between being a tech cv and an academic cv
[21:41:18] <ck_> best of both worlds then
[21:41:41] <selwyn> i toyed with the idea of putting in a 'skills' section but it is hard to think of appropriate things to put in there
[21:41:58] <ck_> 1) lisp. everything else follows from this
[21:42:32] <ck_> but seriously, I don't think I can give any kind of advice on this. I once put xfig on my list of skills just for fun
[21:42:38] <selwyn> in a tech cv you can put in 'sql, xml, js', whatever
[21:43:03] <selwyn> what can you put for a science cv? 'physics'? 'numerical simulations?
[21:43:06] <selwyn> '
[21:43:27] <selwyn> anyway hopefully i will get good advice on this
[21:43:53] <ck_> yes, absolutely, things like that. finite elements / neuronal net training, whatever
[21:44:03] <ck_> sounds like you will. good luck again!
[21:44:13] <selwyn> ty
[21:46:32] *** Quits: shka (~herr@109.231.0.226) (Quit: Konversation terminated!)
[21:46:50] *** Joins: shka (~herr@109.231.0.226)
[22:05:16] *** Quits: semz (~none@user/semz) (*.net *.split)
[22:05:16] *** Quits: White_Flame (~quassel@user/white-flame/x-6930243) (*.net *.split)
[22:05:16] *** Quits: pjb (~pjb@user/pjb) (*.net *.split)
[22:05:16] *** Quits: sunarch (uid526836@user/sunarch) (*.net *.split)
[22:05:16] *** Quits: v3ga (~v3ga@2603-6080-5204-3b35-0000-0000-0000-18ad.res6.spectrum.com) (*.net *.split)
[22:05:16] *** Quits: jasom (~aidenn@2600:8802:7fa0:500:f833:278f:1567:d354) (*.net *.split)
[22:05:16] *** Quits: hugo (znc@verdigris.lysator.liu.se) (*.net *.split)
[22:05:16] *** Quits: ryanbw (~ryanbw@mab.sdf.org) (*.net *.split)
[22:05:17] *** Quits: pl (sid98063@id-98063.helmsley.irccloud.com) (*.net *.split)
[22:05:17] *** Quits: derelict (derelict@user/derelict) (*.net *.split)
[22:05:17] *** Quits: moon-child (~moon-chil@cardinal.elronnd.net) (*.net *.split)
[22:05:17] *** Quits: |3b| (bbb@user/3b/x-2324788) (*.net *.split)
[22:05:18] *** Quits: micro (~micro@user/micro) (*.net *.split)
[22:05:18] *** Quits: cross (~cross@spitfire.i.gajendra.net) (*.net *.split)
[22:05:19] *** Quits: cpape (~user@2a01:4f9:c010:632d::1) (*.net *.split)
[22:05:19] *** Quits: Aurora_v_kosmose (~LispyLigh@user/lispylights) (*.net *.split)
[22:05:19] *** Quits: ec (~ec@gateway/tor-sasl/ec) (*.net *.split)
[22:05:19] *** Quits: chiselfuse (~chiselfus@user/chiselfuse) (*.net *.split)
[22:05:19] *** Quits: Gnuxie (~gnuxie@user/gnuxie) (*.net *.split)
[22:05:19] *** Quits: nworb (~zbrownm]@2001:470:69fc:105::1:33db) (*.net *.split)
[22:05:20] *** Quits: ratzkewatzke (~ec2-user@ec2-34-217-87-98.us-west-2.compute.amazonaws.com) (*.net *.split)
[22:05:21] *** Quits: lonjil (~quassel@user/lonjil) (*.net *.split)
[22:05:21] *** Quits: euandreh (~euandreh@2804:14c:33:9fe5:567f:a71e:f346:c5f0) (*.net *.split)
[22:05:21] *** Quits: notzmv (~zmv@user/notzmv) (*.net *.split)
[22:05:21] *** Quits: hayley (~theemacss@user/hayley) (*.net *.split)
[22:05:21] *** Quits: iquites (sid77830@id-77830.lymington.irccloud.com) (*.net *.split)
[22:05:21] *** Quits: gko (~user@user/gko) (*.net *.split)
[22:05:22] *** Quits: commandoline (~commandol@ubuntu/member/commandoline) (*.net *.split)
[22:05:22] *** Quits: shka (~herr@109.231.0.226) (*.net *.split)
[22:05:23] *** Quits: kevingal (~quassel@37.228.202.92) (*.net *.split)
[22:05:23] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (*.net *.split)
[22:05:23] *** Quits: rogersm (~rogersm@90.166.180.250) (*.net *.split)
[22:05:23] *** Quits: scymtym (~user@ip-94-114-248-79.unity-media.net) (*.net *.split)
[22:05:24] *** Quits: Posterdati (~posterdat@host-87-19-166-231.retail.telecomitalia.it) (*.net *.split)
[22:05:24] *** Quits: clothespin_ (~awolven@c-73-209-95-92.hsd1.il.comcast.net) (*.net *.split)
[22:05:24] *** Quits: elflng (~elflng@5.28.137.182) (*.net *.split)
[22:05:24] *** Quits: aeth (~aeth@user/aeth) (*.net *.split)
[22:05:24] *** Quits: contrapunctus (a75f5b1571@jabberfr.org) (*.net *.split)
[22:05:25] *** Quits: mfiano (~mfiano@li1282-157.members.linode.com) (*.net *.split)
[22:05:25] *** Quits: mzan (~quassel@mail.asterisell.com) (*.net *.split)
[22:05:25] *** Quits: minion (~minion@common-lisp.net) (*.net *.split)
[22:05:25] *** Quits: sham1 (~sham1@212-146-44-107.aboa.net) (*.net *.split)
[22:05:26] *** Quits: sp (~sp@user/susam) (*.net *.split)
[22:05:27] *** Quits: sirufer (68f46fc7c3@user/sirufer) (*.net *.split)
[22:05:27] *** Quits: mala (~mala@user/malaclyps) (*.net *.split)
[22:05:27] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (*.net *.split)
[22:05:28] *** Quits: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de) (*.net *.split)
[22:05:28] *** Quits: axvr (757f658d76@2604:bf00:561:2000::e1) (*.net *.split)
[22:05:28] *** Quits: sm2n (ae95cb1267@user/sm2n) (*.net *.split)
[22:05:28] *** Quits: easye (~user@oxi.slack.net) (*.net *.split)
[22:05:29] *** Quits: payphone (dd09ba4109@2604:bf00:561:2000::20b) (*.net *.split)
[22:05:29] *** Quits: susam (~susam@user/susam) (*.net *.split)
[22:05:29] *** Quits: Lulu (~meow@vyos/developer/Lulu) (*.net *.split)
[22:05:30] *** Quits: epony (~epony@user/epony) (*.net *.split)
[22:05:30] *** Quits: kakuhen (~kakuhen@user/kakuhen) (*.net *.split)
[22:05:30] *** Quits: gilberth (~gilberth@p5b157756.dip0.t-ipconnect.de) (*.net *.split)
[22:05:30] *** Quits: MetaYan (~MetaYan@c-7b5d235c.07-84-7462671.bbcust.telenor.se) (*.net *.split)
[22:05:31] *** Quits: GreaseMonkey (greaser@user/greasemonkey) (*.net *.split)
[22:05:31] *** Quits: APic (apic@apic.name) (*.net *.split)
[22:05:31] *** Quits: copec (~copec@schrodbox.unaen.org) (*.net *.split)
[22:05:31] *** Quits: drakonis (drakonis@user/drakonis) (*.net *.split)
[22:05:32] *** Quits: taeaad (~taeaad@user/taeaad) (*.net *.split)
[22:05:32] *** Quits: nckx (~nckx@tobias.gr) (*.net *.split)
[22:05:32] *** Quits: eschaton (~eschaton@li541-49.members.linode.com) (*.net *.split)
[22:05:32] *** Quits: sepanko (~sepanko@user/sepanko) (*.net *.split)
[22:05:32] *** Quits: Duuqnd (~duuqnd@2001:470:69fc:105::e9c0) (*.net *.split)
[22:05:34] *** Quits: fiddlerwoaroof (~fiddlerwo@user/fiddlerwoaroof) (*.net *.split)
[22:05:34] *** Quits: trn (jhj@sourcehut/user/trn) (*.net *.split)
[22:05:34] *** Quits: iamFIREcracker (~iamFIREcr@user/iamfirecracker) (*.net *.split)
[22:05:36] *** Quits: phoe (~phoe@user/phoe) (*.net *.split)
[22:05:37] *** Quits: mrmr (~mrmr@user/mrmr) (*.net *.split)
[22:05:38] *** Quits: Inline (~Inline@aftr-37-201-240-204.unity-media.net) (*.net *.split)
[22:05:38] *** Quits: amazigh (~amirouche@user/amirouche) (*.net *.split)
[22:05:38] *** Quits: x88x88x (~x88x88x@2001:19f0:5:39a8:5400:3ff:feb6:73cb) (*.net *.split)
[22:05:39] *** Quits: Mandus (~aasmundo@0.51-175-33.customer.lyse.net) (*.net *.split)
[22:05:39] *** Quits: ChanServ (ChanServ@services.libera.chat) (*.net *.split)
[22:10:18] *** Joins: derelict (~derelict@user/derelict)
[22:10:18] *** Joins: pl (sid98063@id-98063.helmsley.irccloud.com)
[22:10:18] *** Joins: cross_ (~cross@spitfire.i.gajendra.net)
[22:10:18] *** Joins: v3ga1 (~v3ga@2603-6080-5204-3b35-0000-0000-0000-18ad.res6.spectrum.com)
[22:10:18] *** Joins: White__Flame (~quassel@user/white-flame/x-6930243)
[22:10:18] *** Joins: semz_ (~none@user/semz)
[22:10:18] *** Joins: ryanbw1 (~ryanbw@mab.sdf.org)
[22:10:18] *** Joins: micro_ (~micro@user/micro)
[22:10:18] *** Joins: hugo- (znc@verdigris.lysator.liu.se)
[22:10:18] *** Joins: |3b|` (bbb@user/3b/x-2324788)
[22:10:18] *** Joins: sunarch (uid526836@user/sunarch)
[22:10:18] *** Joins: shka (~herr@109.231.0.226)
[22:10:18] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[22:10:18] *** Joins: Aurora_v_kosmose (~LispyLigh@user/lispylights)
[22:10:18] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[22:10:18] *** Joins: euandreh (~euandreh@2804:14c:33:9fe5:567f:a71e:f346:c5f0)
[22:10:18] *** Joins: kevingal (~quassel@37.228.202.92)
[22:10:18] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[22:10:18] *** Joins: scymtym (~user@ip-94-114-248-79.unity-media.net)
[22:10:18] *** Joins: rogersm (~rogersm@90.166.180.250)
[22:10:18] *** Joins: notzmv (~zmv@user/notzmv)
[22:10:18] *** Joins: iamFIREcracker (~iamFIREcr@user/iamfirecracker)
[22:10:18] *** Joins: mrmr (~mrmr@user/mrmr)
[22:10:18] *** Joins: Inline (~Inline@aftr-37-201-240-204.unity-media.net)
[22:10:18] *** Joins: Posterdati (~posterdat@host-87-19-166-231.retail.telecomitalia.it)
[22:10:18] *** Joins: clothespin_ (~awolven@c-73-209-95-92.hsd1.il.comcast.net)
[22:10:18] *** Joins: elflng (~elflng@5.28.137.182)
[22:10:18] *** Joins: x88x88x (~x88x88x@2001:19f0:5:39a8:5400:3ff:feb6:73cb)
[22:10:18] *** Joins: epony (~epony@user/epony)
[22:10:18] *** Joins: chiselfuse (~chiselfus@user/chiselfuse)
[22:10:18] *** Joins: amazigh (~amirouche@user/amirouche)
[22:10:18] *** Joins: aeth (~aeth@user/aeth)
[22:10:18] *** Joins: Gnuxie (~gnuxie@user/gnuxie)
[22:10:18] *** Joins: sp (~sp@user/susam)
[22:10:18] *** Joins: contrapunctus (a75f5b1571@jabberfr.org)
[22:10:18] *** Joins: hayley (~theemacss@user/hayley)
[22:10:18] *** Joins: kakuhen (~kakuhen@user/kakuhen)
[22:10:18] *** Joins: sepanko (~sepanko@user/sepanko)
[22:10:18] *** Joins: nworb (~zbrownm]@2001:470:69fc:105::1:33db)
[22:10:18] *** Joins: Duuqnd (~duuqnd@2001:470:69fc:105::e9c0)
[22:10:18] *** Joins: sham1 (~sham1@212-146-44-107.aboa.net)
[22:10:18] *** Joins: minion (~minion@common-lisp.net)
[22:10:18] *** Joins: mzan (~quassel@mail.asterisell.com)
[22:10:18] *** Joins: mfiano (~mfiano@li1282-157.members.linode.com)
[22:10:18] *** Joins: lonjil (~quassel@user/lonjil)
[22:10:18] *** Joins: ratzkewatzke (~ec2-user@ec2-34-217-87-98.us-west-2.compute.amazonaws.com)
[22:10:18] *** Joins: commandoline (~commandol@ubuntu/member/commandoline)
[22:10:18] *** Joins: gko (~user@user/gko)
[22:10:18] *** Joins: iquites (sid77830@id-77830.lymington.irccloud.com)
[22:10:18] *** Joins: mala (~mala@user/malaclyps)
[22:10:18] *** Joins: sirufer (68f46fc7c3@user/sirufer)
[22:10:18] *** Joins: Lulu (~meow@vyos/developer/Lulu)
[22:10:18] *** Joins: susam (~susam@user/susam)
[22:10:18] *** Joins: payphone (dd09ba4109@2604:bf00:561:2000::20b)
[22:10:18] *** Joins: sm2n (ae95cb1267@user/sm2n)
[22:10:18] *** Joins: axvr (757f658d76@2604:bf00:561:2000::e1)
[22:10:18] *** Joins: easye (~user@oxi.slack.net)
[22:10:18] *** Joins: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de)
[22:10:18] *** Joins: trn (jhj@sourcehut/user/trn)
[22:10:18] *** Joins: fiddlerwoaroof (~fiddlerwo@user/fiddlerwoaroof)
[22:10:18] *** Joins: taeaad (~taeaad@user/taeaad)
[22:10:18] *** Joins: copec (~copec@schrodbox.unaen.org)
[22:10:18] *** Joins: APic (apic@apic.name)
[22:10:18] *** Joins: GreaseMonkey (greaser@user/greasemonkey)
[22:10:18] *** Joins: drakonis (drakonis@user/drakonis)
[22:10:18] *** Joins: MetaYan (~MetaYan@c-7b5d235c.07-84-7462671.bbcust.telenor.se)
[22:10:18] *** Joins: gilberth (~gilberth@p5b157756.dip0.t-ipconnect.de)
[22:10:18] *** Joins: eschaton (~eschaton@li541-49.members.linode.com)
[22:10:18] *** Joins: nckx (~nckx@tobias.gr)
[22:10:18] *** Joins: phoe (~phoe@user/phoe)
[22:10:18] *** Joins: Mandus (~aasmundo@0.51-175-33.customer.lyse.net)
[22:10:18] *** Joins: ChanServ (ChanServ@services.libera.chat)
[22:10:18] *** molybdenum.libera.chat sets mode: +oo gilberth ChanServ
[22:10:34] <epony> "you're all going to die down there" --red queen
[22:11:16] <epony> https://en.wikipedia.org/wiki/List_of_Resident_Evil_film_characters#Red_Queen " She warns against entering the Hive, but they shut her down. She is later forced to help the survivors find a way out, since her main circuit breakers were disabled to prevent rebooting."
[22:11:49] <epony> game over: Jan12 1824<edgar-rft> reliable programs would continue to work after I switched the power off
[22:12:37] *** Joins: jasom (~aidenn@2600:8802:7fa0:500:f833:278f:1567:d354)
[22:13:37] <epony> you need not worry, it's just not realistic, a film plot / horror movie
[22:19:37] <epony> armies however are very real and are centralised and redundant, so are energy networks, transportation, communications, resources flow, not very distributed.. and have off switches, constant failure, and fault-tolerances everywhere.. you rely on these all the time, for a lot of services and goods you've started to consider commodity, how are you going to fragment and decentralise that?  it's not happening, just adding to the centralised system
[22:21:10] *** Joins: prite (~pritam@user/pritambaral)
[22:23:51] <epony> a state within the state is not possible, that creates internal civil warfare or separation and fragmentation through criminal and military fractures..
[22:23:53] <epony> https://en.wikipedia.org/wiki/Criticism_of_libertarianism#Pragmatic_criticism
[22:24:24] <epony> it results in state capture and centralised system again, immediately
[22:26:28] <epony> also, how is government distributed, there is only one capital per state / federation / union.. with a couple of administration teams, but no such thing as mesh government
[22:27:24] <epony> even ad-hoc networking elects a common network control / regulation and attachment at other network points
[22:30:09] <epony> just a series of "self-stabilising" problems, even machines internals, have organisation that is hierarchical, and external to the machines and nodes in a network, is the same, hierarchical connectivity (by physical properties of the energy and work transfer)
[22:31:48] <epony> how would you manage hierarchy in a distributed and would it be really at all by any metric a decentralised system?
[22:32:52] <epony> say, you got some perfect equality protocol, some sub-system runs the signalling ;-) is that equal or instruction (exection) and data (payload)
[22:33:29] <epony> what is a self-modifiable protocol for the lowest cost you can imagine..
[22:34:37] *** Quits: prite (~pritam@user/pritambaral) (Ping timeout: 250 seconds)
[22:34:40] *** Joins: pritambaral (~pritam@user/pritambaral)
[22:34:56] <epony> https://en.wikipedia.org/wiki/Software-defined_networking#Architectural_components
[22:35:49] <epony> how would a resilient system operate when the network is not in your control and can be reprogrammed and eliminate nodes dynamically, faster than you can modify your self-assembly and distribution protocol?
[22:49:27] *** Joins: pjb (~pjb@user/pjb)
[22:53:21] *** Quits: kevingal (~quassel@37.228.202.92) (Ping timeout: 256 seconds)
[23:15:04] *** Joins: tanners (~tanners@pool-71-127-59-41.washdc.fios.verizon.net)
[23:46:39] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[23:47:03] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[23:49:36] *** Quits: tanners (~tanners@pool-71-127-59-41.washdc.fios.verizon.net) (Ping timeout: 250 seconds)
[23:53:54] *** |3b|` is now known as |3b|
