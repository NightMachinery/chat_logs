[00:10:32] *** Joins: kylese (~kylese@p5dd8b9b1.dip0.t-ipconnect.de)
[00:30:40] *** Quits: linkable6 (lin-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[00:31:03] *** Joins: linkable6 (lin-able@2001:41d0:2:5eb5::)
[00:32:16] *** Quits: linkable6 (lin-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[00:32:58] *** Joins: linkable6 (lin-able@2001:41d0:2:5eb5::)
[00:49:25] *** Quits: kylese (~kylese@p5dd8b9b1.dip0.t-ipconnect.de) (Remote host closed the connection)
[01:06:44] <japhb> Ulti: Aside from arguably the last two tests (primes-naive-grep and primes-naive-parallel-grep), the runtimes for the various prime benchmarks are now all too short to be stable in the face of basic OS scheduling.
[01:10:20] *** Joins: wayland_ (~wayland@120.21.25.254)
[01:10:59] <wayland_> Hi all!  Is there a way to tell if there's more data waiting on an IO::Socket::INET without blocking?  
[01:14:57] <japhb> wayland_: Well, you could pull the native-descriptor and use it with select() or so.  Or maybe use IO::Socket::Async instead (https://docs.raku.org/type/IO::Socket::Async) if what you really want is an async API?  I guess the real question is -- why do you want to do this?
[01:15:20] *** Quits: vasko (~vasko@137.220.91.123) (Quit: The Lounge - https://thelounge.chat)
[01:30:40] *** Quits: euandreh (~euandreh@2804:14c:33:9fe5:299b:88e7:728b:a92) (Ping timeout: 260 seconds)
[01:30:42] *** Quits: wayland_ (~wayland@120.21.25.254) (Ping timeout: 260 seconds)
[01:38:21] *** Joins: vasko (~vasko@137.220.91.123)
[01:44:34] *** Quits: lichtkind (~lichtkind@p200300d0a704f00aecc23c3621873a17.dip0.t-ipconnect.de) (Quit: Leaving)
[01:51:23] *** Quits: pony (~ed@smol/hors) (Quit: WeeChat 3.3)
[01:54:29] *** Joins: pony (~ed@smol/hors)
[01:57:53] *** Quits: melezhik (~melezhik@c-73-32-143-85.hsd1.tx.comcast.net) (Quit: Connection closed)
[01:58:00] *** Joins: euandreh (~euandreh@2804:14c:33:9fe5:33f9:2578:2f6:368f)
[02:01:32] *** Quits: jess (~jess@libera/staff/jess) ()
[02:18:03] *** Quits: Xliff (~XliffDroi@pool-71-255-227-73.washdc.east.verizon.net) (Remote host closed the connection)
[02:18:25] *** Joins: Xliff (~XliffDroi@pool-71-255-227-73.washdc.east.verizon.net)
[02:19:59] *** Quits: djerius (~quassel@pool-108-20-43-199.bstnma.fios.verizon.net) (Quit: No Ping reply in 180 seconds.)
[02:20:14] *** Joins: djerius (~quassel@pool-108-20-43-199.bstnma.fios.verizon.net)
[02:23:35] *** Joins: Xliff_ (~XliffDroi@pool-71-255-227-73.washdc.east.verizon.net)
[02:25:56] *** Quits: Xliff (~XliffDroi@pool-71-255-227-73.washdc.east.verizon.net) (Ping timeout: 245 seconds)
[02:36:39] *** Quits: euandreh (~euandreh@2804:14c:33:9fe5:33f9:2578:2f6:368f) (Ping timeout: 260 seconds)
[02:59:18] *** Joins: euandreh (~euandreh@2804:14c:33:9fe5:b9d3:55ff:4c84:c8cf)
[03:32:40] *** Quits: reportable6 (rep-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[03:33:40] *** Joins: reportable6 (rep-able@2001:41d0:2:5eb5::)
[03:54:45] *** Quits: euandreh (~euandreh@2804:14c:33:9fe5:b9d3:55ff:4c84:c8cf) (Ping timeout: 260 seconds)
[05:13:00] *** Joins: frost (~frost@user/frost)
[05:58:12] *** Joins: euandreh (~euandreh@2804:14c:33:9fe5:fa59:2f99:edd:cd7b)
[06:05:48] <eof> is there a limit on heredoc sentinel length? I'm inclined to say there isn't.
[06:06:19] <eof> unfortunately for the purposes of an expirement I am doing with treesitter, I need to at least impose an artificial one for the parser...
[06:22:35] *** a3r0__ is now known as a3r0
[06:37:46] *** Joins: monkey_ (~user@190.104.116.134)
[07:02:16] *** Quits: monkey_ (~user@190.104.116.134) (Remote host closed the connection)
[08:02:17] *** Quits: linkable6 (lin-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[08:02:17] *** Quits: evalable6 (eva-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[08:02:17] *** Quits: reportable6 (rep-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[08:02:17] *** Quits: bloatable6 (blo-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[08:02:17] *** Quits: unicodable6 (uni-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[08:02:17] *** Quits: greppable6 (gre-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[08:02:17] *** Quits: tellable6 (tel-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[08:02:17] *** Quits: coverable6 (cov-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[08:02:17] *** Quits: squashable6 (squ-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[08:02:17] *** Quits: sourceable6 (sou-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[08:02:17] *** Quits: quotable6 (quo-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[08:02:17] *** Quits: notable6 (not-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[08:02:17] *** Quits: benchable6 (ben-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[08:02:17] *** Quits: nativecallable6 (nat-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[08:02:17] *** Quits: bisectable6 (bis-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[08:02:17] *** Quits: releasable6 (rel-able@2001:41d0:2:5eb5::) (Write error: Connection reset by peer)
[08:02:17] *** Quits: shareable6 (sha-able@2001:41d0:2:5eb5::) (Write error: Connection reset by peer)
[08:02:17] *** Quits: statisfiable6 (sta-able@2001:41d0:2:5eb5::) (Write error: Connection reset by peer)
[08:02:17] *** Quits: committable6 (com-able@2001:41d0:2:5eb5::) (Write error: Connection reset by peer)
[08:03:08] *** Joins: evalable6 (eva-able@2001:41d0:2:5eb5::)
[08:03:55] *** Joins: benchable6 (ben-able@2001:41d0:2:5eb5::)
[08:04:00] *** Joins: bloatable6 (blo-able@2001:41d0:2:5eb5::)
[08:04:20] *** Joins: quotable6 (quo-able@2001:41d0:2:5eb5::)
[08:04:48] *** Joins: coverable6 (cov-able@2001:41d0:2:5eb5::)
[08:05:15] *** Joins: shareable6 (sha-able@2001:41d0:2:5eb5::)
[08:05:28] *** Joins: tellable6 (tel-able@2001:41d0:2:5eb5::)
[09:02:37] *** Joins: unicodable6 (uni-able@2001:41d0:2:5eb5::)
[09:03:27] *** Joins: linkable6 (lin-able@2001:41d0:2:5eb5::)
[09:03:50] *** Joins: bisectable6 (bis-able@2001:41d0:2:5eb5::)
[09:04:51] *** Joins: nativecallable6 (nat-able@2001:41d0:2:5eb5::)
[09:05:04] *** Joins: committable6 (com-able@2001:41d0:2:5eb5::)
[09:21:04] *** Quits: holyghost_ (~shameen@2a02:a03f:64c8:9200:8105:b986:e088:50cc) (Ping timeout: 252 seconds)
[10:02:47] *** Joins: sourceable6 (sou-able@2001:41d0:2:5eb5::)
[10:04:16] *** Joins: notable6 (not-able@2001:41d0:2:5eb5::)
[10:34:27] *** Joins: reportable6 (rep-able@2001:41d0:2:5eb5::)
[10:41:23] *** Joins: wayland_ (~wayland@120.21.25.254)
[11:03:07] *** Joins: greppable6 (gre-able@2001:41d0:2:5eb5::)
[11:04:05] *** Joins: squashable6 (squ-able@2001:41d0:2:5eb5::)
[11:04:10] *** Quits: Sgeo (~Sgeo@user/sgeo) (Read error: Connection reset by peer)
[11:04:30] <MasterDuke> Xliff_: ping
[11:05:03] *** Joins: statisfiable6 (sta-able@2001:41d0:2:5eb5::)
[11:10:30] *** Quits: jmcgnh (~jmcgnh@wikipedia/jmcgnh) (Ping timeout: 260 seconds)
[11:17:15] *** Joins: jmcgnh (~jmcgnh@wikipedia/jmcgnh)
[11:26:55] *** Joins: holyghost_ (~shameen@2a02:a03f:64c8:9200:a167:60a8:acf1:bfa7)
[11:43:13] *** Quits: pony (~ed@smol/hors) (Quit: WeeChat 3.3)
[11:49:54] *** Joins: dakkar (~dakkar@home.thenautilus.net)
[12:02:59] *** Joins: pony (~ed@smol/hors)
[12:03:22] *** Quits: wayland_ (~wayland@120.21.25.254) (Remote host closed the connection)
[12:04:42] *** Joins: releasable6 (rel-able@2001:41d0:2:5eb5::)
[12:08:34] *** Quits: pony (~ed@smol/hors) (Quit: WeeChat 3.3)
[12:15:58] *** Joins: pony (~ed@smol/hors)
[12:20:06] *** Quits: pony (~ed@smol/hors) (Client Quit)
[12:30:20] *** Joins: patrickb (~patrickb@85-22-61-234.ip.dokom21.de)
[12:32:22] *** Quits: patrickb (~patrickb@85-22-61-234.ip.dokom21.de) (Remote host closed the connection)
[12:49:52] *** Joins: patrickb (~patrickb@55d4b736.access.ecotel.net)
[12:49:53] *** Joins: pony (~ed@smol/hors)
[12:50:23] <patrickb> m: say $NonExistent::var;
[12:50:24] <camelia> rakudo-moar d37b11186: OUTPUT: «(Any)␤»
[12:50:43] <patrickb> o/
[12:51:22] <patrickb> Is there an obvious way to make such variable accesses error?
[12:52:53] <lizmat> messing with the AT-KEY in a meta-class ?
[13:04:40] <patrickb> Hm. Thanks. I think I'll go a different route then.
[13:07:20] *** Quits: squashable6 (squ-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[13:23:15] *** Joins: abraxxa-home (~alex@2a01:100:2000:2500::22)
[13:30:58] *** Quits: patrickb (~patrickb@55d4b736.access.ecotel.net) (Ping timeout: 258 seconds)
[14:00:31] *** Quits: sena_kun (~koto@94.142.239.45) (Remote host closed the connection)
[14:00:41] *** Joins: sena_kun (~koto@94.142.239.45)
[14:13:04] *** Quits: abraxxa-home (~alex@2a01:100:2000:2500::22) (Remote host closed the connection)
[14:17:41] *** Quits: pony (~ed@smol/hors) (Quit: WeeChat 3.3)
[14:23:28] *** Quits: frost (~frost@user/frost) (Quit: Connection closed)
[14:33:39] *** Joins: frost (~frost@user/frost)
[15:10:06] *** Joins: squashable6 (squ-able@2001:41d0:2:5eb5::)
[15:18:56] *** Quits: linkable6 (lin-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[15:32:35] *** Quits: reportable6 (rep-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[16:32:35] *** Quits: evalable6 (eva-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[16:39:27] *** Quits: discord-raku-bot (~RakuIRC@ip5f5ab722.dynamic.kabel-deutschland.de) (Remote host closed the connection)
[16:40:42] *** Joins: discord-raku-bot (~RakuIRC@ip5f5ab722.dynamic.kabel-deutschland.de)
[17:17:34] *** Joins: Sgeo (~Sgeo@user/sgeo)
[17:33:29] *** Joins: evalable6 (eva-able@2001:41d0:2:5eb5::)
[18:15:58] <discord-raku-bot> <RaycatWhoDat#0001> Morning. I seem to be having trouble with inputs this morning.
[18:16:35] <discord-raku-bot> <RaycatWhoDat#0001> I'm doing something akin to `loop { my $name = prompt; redo unless $name ~~ $regex }`
[18:17:16] <discord-raku-bot> <RaycatWhoDat#0001> actually, no, it's not a `$regex`, it's a subset with a where clause that uses a regex
[18:18:32] <discord-raku-bot> <RaycatWhoDat#0001> So, closer to this: `subset Command of Str where * ~~ /:i ^ EXIT $ /; loop { my $command = prompt; redo unless $command ~~ Command; }`
[18:18:58] <discord-raku-bot> <RaycatWhoDat#0001> Said code only loops and doesn't ever break. What am I missing.
[18:21:32] *** Joins: linkable6 (lin-able@2001:41d0:2:5eb5::)
[18:23:03] <dakkar> RaycatWhoDat#0001: wild guess, a newline?
[18:23:59] <dakkar> oh, no, `prompt` removes the newline already
[18:31:54] <dakkar> RaycatWhoDat#0001: suggestion: replace that `prompt` with `prompt(">")` or something similar
[18:32:15] <dakkar> there's a *separate* bug in that loop, in that it doesn't detect EOF
[18:32:45] <dakkar> then, the real bug: `redo unless …` should probably be `last if ...`
[18:33:16] <dakkar> the loop will loop until you exit it, but you are never exiting, you're just looping in a different way
[18:33:17] *** Joins: reportable6 (rep-able@2001:41d0:2:5eb5::)
[18:34:15] <dakkar> RaycatWhoDat: subset Command of Str where * ~~ /:i ^ EXIT $ /; loop { my $command = prompt(">>") // last; last if $command ~~ Command; say "I will do <$command>" }
[18:34:17] <tellable6> dakkar, I'll pass your message to RaycatWhoDat
[18:34:39] <discord-raku-bot> <RaycatWhoDat#0001> I see it
[18:34:59] <dakkar> `re
[18:35:11] <dakkar> `redo` is pretty uncommon, in my experience
[18:36:17] <discord-raku-bot> <Nemokosch#9980> `redo` is basically continue, isn't it
[18:42:49] * Juerd loves redo for retries
[18:50:42] *** Quits: coleman-x (~coleman@2605:a601:5529:1e00:3f9e:cb1:df42:c6f3) (Quit: Leaving)
[18:55:52] *** Joins: MoC (~moc@user/moc)
[19:55:53] *** Quits: linkable6 (lin-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[19:55:53] *** Quits: evalable6 (eva-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[20:03:10] *** Joins: patrickb (~quassel@55d4b736.access.ecotel.net)
[20:08:20] *** Quits: dakkar (~dakkar@home.thenautilus.net) (Ping timeout: 260 seconds)
[20:19:06] *** Quits: xinming_ (~xinming@115.219.38.135) (Ping timeout: 260 seconds)
[20:20:46] *** Joins: xinming_ (~xinming@115.219.33.44)
[20:31:41] *** Quits: rypervenche (~rypervenc@user/rypervenche) (Quit: brb)
[20:40:26] *** Joins: rypervenche (~rypervenc@user/rypervenche)
[20:56:08] *** Joins: evalable6 (eva-able@2001:41d0:2:5eb5::)
[21:26:32] <discord-raku-bot> <Anton Antonov#7232> Hi! I plan to make a Raku package / repository that generates random data, like, vectors of random words or pet names, or random tabular datasets. Right now I am using the working name `Data::RandomDataGenerators`  and there are sub-modules like `Data::RandomDataGenerators::RandomWord`  and  `Data::RandomDataGenerators::RandomPretentiousJobTitle`. I think that maybe it would be better to use the more gen
[21:31:47] * lizmat clickbaits https://rakudoweekly.blog/2021/10/25/2021-43-thank-you/
[21:32:47] *** Quits: reportable6 (rep-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[22:32:46] *** Joins: melezhik (~melezhik@c-73-32-143-85.hsd1.tx.comcast.net)
[22:33:39] <melezhik> SmokeMachine you can announce the need of help with Red using "help wanted" comment on mybfio, as an example - https://mybf.io/project/mybfio/reviews
[22:34:03] <melezhik> the "raise hand" icon will stick to a project in the listing for a month 
[22:34:27] *** Joins: reportable6 (rep-able@2001:41d0:2:5eb5::)
[22:36:00] <SmokeMachine> melezhik: thanks! Good to know!
[22:43:13] <SmokeMachine> melezhik: fone! Thanks!
[22:45:28] <melezhik> mybfio might be slow at the moment, I am trying to fix that ...
[22:46:10] <melezhik> SmokeMachine++
[22:46:48] *** Quits: patrickb (~quassel@55d4b736.access.ecotel.net) (Quit: Quit.)
[22:56:54] <melezhik> I switched mybfio to `2021.10` version
[23:24:24] *** Joins: pony (~ed@smol/hors)
[23:33:10] <tbrowder> melezhic: have you thought about renaming your code site to something easier to remember?
[23:34:34] <tbrowder> i want to link to it on the Raku.org website if no one objects
[23:36:11] <tbrowder> melezhik: (sorry) ^^^
[23:44:24] *** Quits: MoC (~moc@user/moc) (Quit: Konversation terminated!)
[23:58:36] *** Joins: linkable6 (lin-able@2001:41d0:2:5eb5::)
