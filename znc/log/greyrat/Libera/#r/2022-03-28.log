[00:31:48] *** Joins: debianero (~debianero@60.132.134.77.rev.sfr.net)
[00:51:54] *** Joins: Colombo (~jmoravec@132.181.20.202)
[01:04:55] *** Joins: mefistofeles (~mefistofe@user/mefistofeles)
[01:19:34] *** Quits: Colombo (~jmoravec@132.181.20.202) (Quit: Leaving.)
[01:44:35] *** Quits: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon) (Ping timeout: 240 seconds)
[01:50:45] *** Joins: khonsu (~khonsu@102.132.244.100)
[01:50:51] *** khonsu is now known as luhann
[02:13:20] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Ping timeout: 272 seconds)
[02:25:16] *** Joins: Colombo (~jmoravec@202.36.179.112)
[02:26:18] *** Quits: rickyrick (~rickyrick@d23-16-13-108.bchsia.telus.net) (Quit: :^))
[02:29:50] *** Joins: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon)
[02:35:35] *** Quits: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon) (Remote host closed the connection)
[02:35:51] *** Joins: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon)
[03:20:26] <shrysr> why use a jupyter notebook to practice R? 
[03:20:41] <shrysr> :O
[03:20:49] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[03:31:15] <mefistofeles> shrysr: why not?
[03:39:50] *** Quits: flip214 (~marek@user/flip214) (Read error: Connection reset by peer)
[03:41:22] <shrysr> mefistofeles: i would presume an Rmarkdown notebook is a lot more friendly unless there is some constraint to use jupyter
[03:41:55] <mefistofeles> shrysr: i really depends on use case, jupyter notebooks can do a lot more
[03:42:08] <shrysr> such as?
[03:44:14] *** Joins: flip214 (~marek@user/flip214)
[03:45:58] *** Quits: hvitol (~hvitol@218-145-17-89.fiber.hringdu.is) (Quit: WeeChat 3.4)
[03:47:39] <shrysr> hmm i suppose I am biased against jupyter notebooks. Somehow always prefer it to be in .. some IDE. https://github.com/markusschanta/awesome-jupyter does have a bunch of good things.
[03:48:26] <mefistofeles> shrysr: yeah, it also has a huge community
[03:48:56] <mefistofeles> I also prefer an IDE, but that's because I do a lot of "real" programming, rather than prototyping or experimental/interactive computing
[03:49:11] * shrysr sharpening python skills. So I suppose.. i should get over such petty dislikes. Ploomber makes it possible to parameterise notebooks too. 
[03:49:39] <mefistofeles> I mean, jupyter lab is kinda a full-fledged IDE
[03:52:43] <shrysr> yea. Always preferred jupyterlab to the classic notebooks. I just been using pycharm for python since the last year, along with Emacs. But lol... all the code i develop it would seem I do it 'interactively'...
[03:54:13] <mefistofeles> I see, I also use pycharm a lot
[03:54:25] <mefistofeles> but I do a lot of "backend" stuff, so that makes sense
[03:55:35] <shrysr> in contrast, i've literally seen a senior dev, hack out an entire java class ... several 100 lines of code.. without 'prototyping'... The strongly typed thing about Java is awesome that way.
[03:56:50] <shrysr> yeaaa pycharm is good isnt it ? Well i pay for it. Being a python first environment.. it seems a lot better than the little I've seen of VS Code. 
[03:57:48] <mefistofeles> shrysr: yeah, it's a full IDE, whereas VS Code is more of an editor with some IDE capabilities
[03:58:07] <mefistofeles> VS /wg 15
[03:58:09] <mefistofeles> err
[03:59:57] <shrysr> Well I wouldnt distinguish it quite like that. VS Code is very very popular for full stack work, including python dev.Its just that in VS Code Python/R/etc would be a second class, plugin(s) developed by... buncha people. 
[04:01:19] <shrysr> Also fwiw- last i checked, VS Code had a better in-built jupyter notebook access than pycharm, though recently, pycharm have added a buncha jupyter related features.
[04:01:39] <mefistofeles> yeah, maybe... VS Code being basically a web browser helps
[04:01:55] <mefistofeles> with that, specifically
[04:02:53] *** Quits: debianero (~debianero@60.132.134.77.rev.sfr.net) (Quit: Leaving)
[04:05:27] <shrysr> mefistofeles: if I may ask, what kindda backend work do you do?
[04:05:51] <mefistofeles> shrysr: scientific software, computational biophysics
[04:06:26] <shrysr> does that include CFD simulations ?? 
[04:06:38] <shrysr> so you develop that software? Whaddya use?
[04:06:43] <mefistofeles> shrysr: not really, but it's not that far from that
[04:06:54] <mefistofeles> shrysr: yes, i develop software, I use pycharm as I mentioned
[04:09:47] <shrysr> So how do you generally share your jupyter reports and data stuff?  Do you use some platform? I guess I'm trying to get an idea of.. tools-workflow
[04:11:57] <mefistofeles> shrysr: hmm, I just share notebooks in some gist or similar if needed, everything is open so my work relies a lot on github. But the actual coding is done with Pycharm (the one that goes directly into the software's code base)
[04:12:22] <mefistofeles> sharing data is a bit tricky, since the files can be huge
[04:12:36] <mefistofeles> we have some mix of xml, netcdf and pickled serialized files
[04:35:32] <shrysr> ty mefistofeles. Interesting. I would have thought orgs would hesitate from putting their code on github. 
[04:37:29] <shrysr> mefistofeles: do you use stuff like streamlit , ploomber, pypr or is it using githubs CI/CD?
[04:37:30] <mefistofeles> shrysr: plenty of public open source code from org out there :P
[04:37:35] <mefistofeles> *orgs
[04:37:52] <mefistofeles> shrysr: it's almost all github workflows, yes
[04:38:18] <shrysr> if its open source, then I guess it does not make a difference yes.
[04:38:59] <shrysr> mefistofeles: whaddya use R for then? :) 
[04:39:46] <mefistofeles> shrysr: ah, almost nothing :)
[04:39:52] <mefistofeles> no real use for R at work
[04:41:47] <shrysr> ha. Nice. mefistofeles are you a software engg by education and work then?
[04:42:46] <mefistofeles> shrysr: not by education, I landed here by accident :P
[04:42:55] <shrysr> have a www ?
[04:42:59] <mefistofeles> no
[04:43:10] <mefistofeles> well, yes, but I prefer to remain anonymous
[04:58:57] *** Quits: luhann (~khonsu@102.132.244.100) (Ping timeout: 240 seconds)
[05:01:07] *** Joins: luhann (~khonsu@102.132.208.41)
[05:08:10] *** Quits: luhann (~khonsu@102.132.208.41) (Quit: WeeChat 3.4)
[05:18:15] *** Quits: Colombo (~jmoravec@202.36.179.112) (Quit: Leaving.)
[05:19:47] *** Quits: usr725635 (~User@cpe-45-47-86-32.twcny.res.rr.com) (Ping timeout: 260 seconds)
[05:29:53] *** Joins: khonsu (~khonsu@102.132.208.41)
[06:50:58] *** Joins: rickyrick (~rickyrick@d23-16-13-108.bchsia.telus.net)
[07:44:33] *** Joins: Colombo (~jmoravec@2406:e003:1df7:7601:cc5f:46c4:556e:88d0)
[07:46:10] *** Quits: redrum88 (~redrum88@user/redrum88) (Quit: Going offline, see ya! (www.adiirc.com))
[08:02:17] *** Quits: Origin (~Origin@d-69-161-70-214.nh.cpe.atlanticbb.net) (Quit: Leaving)
[08:02:41] *** Joins: monkey_ (~user@190.104.116.153)
[09:08:27] *** Quits: monkey_ (~user@190.104.116.153) (Ping timeout: 260 seconds)
[09:36:03] *** Quits: mefistofeles (~mefistofe@user/mefistofeles) (Remote host closed the connection)
[10:59:06] *** Joins: rickyrick_ (~rickyrick@d23-16-13-108.bchsia.telus.net)
[10:59:06] *** Quits: rickyrick (~rickyrick@d23-16-13-108.bchsia.telus.net) (Killed (NickServ (GHOST command used by rickyrick_)))
[11:22:23] *** Quits: px (~px@user/px) (Ping timeout: 260 seconds)
[11:23:15] *** Quits: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon) (Ping timeout: 240 seconds)
[11:29:52] *** Joins: Vojtaeus (~vojta@user/vojtaeus)
[11:39:42] *** Joins: palasso (~palasso@user/palasso)
[11:49:44] *** Joins: rickyrick (~rickyrick@d23-16-13-108.bchsia.telus.net)
[11:49:46] *** Quits: peddie (~peddie@2001:470:69fc:105::25d) (Quit: Bridge terminating on SIGTERM)
[11:52:12] *** Quits: rickyrick_ (~rickyrick@d23-16-13-108.bchsia.telus.net) (Ping timeout: 260 seconds)
[11:54:23] *** Joins: peddie (~peddie@2001:470:69fc:105::25d)
[12:08:14] *** Joins: rickyrick__ (~rickyrick@d23-16-13-108.bchsia.telus.net)
[12:08:14] *** Quits: rickyrick (~rickyrick@d23-16-13-108.bchsia.telus.net) (Killed (NickServ (GHOST command used by rickyrick__)))
[12:27:08] *** rickyrick__ is now known as rickyrick
[13:17:04] *** Quits: Colombo (~jmoravec@2406:e003:1df7:7601:cc5f:46c4:556e:88d0) (Quit: Leaving.)
[13:28:13] *** Quits: rickyrick (~rickyrick@d23-16-13-108.bchsia.telus.net) (Ping timeout: 246 seconds)
[14:09:05] *** Joins: debianero (~debianero@60.132.134.77.rev.sfr.net)
[14:44:24] *** Joins: usr725635 (~User@cpe-45-47-86-32.twcny.res.rr.com)
[15:35:05] *** Quits: peddie (~peddie@2001:470:69fc:105::25d) (Quit: User was banned)
[16:06:15] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:950:287b:c4be:ac00)
[16:09:27] *** Quits: sprout_ (~quassel@2a02:a467:ccd6:1:f9b9:c2d3:ad62:759d) (Ping timeout: 250 seconds)
[16:27:25] *** Quits: confuzeus (~h_m@186-149-117-154.bitcointernet.co.za) (Remote host closed the connection)
[16:32:00] *** Joins: confuzeus (~h_m@186-149-117-154.bitcointernet.co.za)
[16:57:36] *** Joins: rinzewind (~rinzewind@user/rinzewind)
[17:19:34] *** Joins: peddie (~peddie@2001:470:69fc:105::25d)
[18:03:19] *** Joins: mefistofeles (~mefistofe@user/mefistofeles)
[18:07:27] *** Quits: palasso (~palasso@user/palasso) (Ping timeout: 260 seconds)
[18:10:38] <Bayes> I landed here by accident
[18:10:50] <Bayes> ^ sounds like the Lost plot
[18:12:55] <fendur> such a great show
[18:13:05] <Bayes> havent' seen it actually
[18:13:13] <Bayes> I loved the walking dead for what is worth
[18:15:20] *** Joins: palasso (~palasso@user/palasso)
[18:56:30] *** Joins: px (~px@ool-457980ed.dyn.optonline.net)
[19:00:23] *** Quits: mefistofeles (~mefistofe@user/mefistofeles) (Ping timeout: 260 seconds)
[19:00:52] *** Joins: mefistofeles (~mefistofe@user/mefistofeles)
[19:38:46] *** Joins: triberio13 (~triberio1@195.53.32.158)
[19:58:40] <Bayes> I'm all in for having meaningful variable names but more often than not it's quite hard to come up with one
[20:04:00] <mefistofeles> yeah, naming is a hard and open problem
[20:07:21] *** Quits: triberio13 (~triberio1@195.53.32.158) (Quit: Konversation terminated!)
[20:22:12] *** Joins: rickyrick (~rickyrick@d23-16-13-108.bchsia.telus.net)
[20:39:01] *** Joins: mefistof1les (~mefistofe@user/mefistofeles)
[20:40:42] *** Quits: mefistofeles (~mefistofe@user/mefistofeles) (Ping timeout: 260 seconds)
[20:43:31] *** mefistof1les is now known as mefistofeles
[21:01:50] <shrysr> favorite variable name - rickyrick_farted_tbl
[21:02:11] *** Quits: Vojtaeus (~vojta@user/vojtaeus) (Quit: Odcházím...)
[21:08:27] <rickyrick> ( ͡° ͜ʖ ͡°)
[21:10:13] <shrysr> well the linux source code has been known to have curse words ...idk if that extends to variable names. 
[21:12:36] <Bayes> rickyrick is this what you meant with setting dims being faster than as.vector? http://ix.io/3TI1
[21:13:38] <Bayes> mefistofeles it is, right, especially cause some things have clear names but as soon as you start merging and aggregating them you end up with many things representing different aspects of the same thing
[21:14:12] <mefistofeles> Bayes: I'm lately going for long-ass variable names and trusting people use autocompletion, rather than saving keystrokes once in a while
[21:14:20] <mefistofeles> just for them to be explicit and readable
[21:14:41] <shrysr> me tooz ^
[21:15:00] <Bayes> and you're a pythonist so you deal with dynamic typing as well, do you add the type name to var?
[21:15:32] <Bayes> cause sometimes I have data representing the same thing in different formats, so I postpend the data type or format
[21:15:39] <Bayes> data type = object type
[21:15:40] <mefistofeles> Bayes: no, I don't add the type to var
[21:16:07] <rickyrick> Bayes: Try microbenchmark({H = as.vector(H)}, {dim(H) = N * N})
[21:16:08] <rickyrick> ( ͡° ͜ʖ ͡°)
[21:16:41] <shrysr> i have not seen much python proggies specifying type, but type i suppose is good to specify type for function  output.
[21:16:41] <mefistofeles> Bayes: well, I commonly don't, unless I do need to deal with different types for the same "information", but that's uncommon
[21:17:00] <Bayes> mefistofeles how does a long name look like for, say, merge(people, address)?
[21:17:09] <rickyrick> mefistofeles: Just use 8.3 convention for variable names too
[21:17:15] <mefistofeles> rickyrick: what's that?
[21:17:31] <rickyrick> Ask me how I know you're a zoomer
[21:17:49] <Bayes> peps8?
[21:17:56] <rickyrick> pepsi > coke
[21:18:06] <Bayes> what a
[21:18:08] <Bayes> ...
[21:18:13] <rickyrick> ( ͡° ͜ʖ ͡°)
[21:18:41] <Bayes> rickyrick ah, but I am copying the object after all
[21:18:53] <rickyrick> Yeah it's the copy that's expensive most of the time
[21:19:41] <Bayes> so you carry the expression `dim<-`(H, nrow(H)^2)) so that its evaluated down the line and not copied into a new obj?
[21:20:07] <rickyrick> Yep
[21:20:36] <mefistofeles> Bayes: so, it depends on the context... also, note that OOP is a thing in python, so it might get easier to deal with in it
[21:20:44] <rickyrick> Oops I think that benchmark is configured wrong
[21:20:44] <Bayes> rickyrick okay
[21:21:16] <Bayes> mefistofeles agh, I know, I kind of use name vars that are like... idk, they resemble namespaces or class names or things like that
[21:23:04] <Bayes> so I start with "radLs" which is a list with radiations (a list = data in raw format), radLDF when I transform to long format data frame, radWDF when I cast to wide, then radVgmLDF when I collect the summarizing statistics from a variogram in long format, etc
[21:23:09] <rickyrick> Bayes: https://i.ibb.co/ysCQ7Xc/KRIQIp-T7k23oth-A5-FXRI.png
[21:23:44] <Bayes> I carry `rad` as a sort of family name, which could be a list if it wasn't because they need not all live in the same scope
[21:25:52] <Bayes> rickyrick but is dim(H) = nrow(H)^2 returning the values as a vector tho?
[21:26:15] <shrysr> i like underscores... easier to delete
[21:26:19] <rickyrick> Technically dim<- has a return, but it's invisible and idk of a usecase where you need it
[21:26:33] <Bayes> ok gotcha
[21:26:35] <rickyrick> shrysr: I like . because I don't have to hold Shift to input them
[21:27:01] <Bayes> makes sense rickyrick
[21:27:05] <rickyrick> ( ͡° ͜ʖ ͡°)
[21:27:28] <rickyrick> The dim<- trick saved me a lot of headaches and performance loss in practice
[21:27:35] <rickyrick> At least, before I port the whole thing over to C++
[21:29:23] <shrysr> hmmm for /me primitive mind dot messes up python and the general approach of using dot for accessing methods? so stuck to underscore. but Yea. shift-holding sucks. 
[21:29:30] <Bayes> I typically need to refine a prototype so much after I get it 100% right, by that time I'm too burned out to port it
[21:30:21] <shrysr> so Bayes and rickyrick you guys regularly port your code to Cpp , i.e vectorise?
[21:30:57] <rickyrick> shrysr: R to prototype, C++ final implementation
[21:31:07] <rickyrick> I'm not running my simulation studies in R, that's for sure
[21:31:28] <rickyrick> Writing it functionally also lets me swap in a C++ implementation of an inner function to see if everything still works the same
[21:31:56] <rickyrick> Which is also where I use function.name for the R variant and function_name for the C++ variant
[21:32:01] <rickyrick> Just to boggle your mind more ( ͡° ͜ʖ ͡°)
[21:32:07] <shrysr> :D
[21:32:21] <shrysr> fascinating actually. and good to know.
[21:32:45] <rickyrick> Gotta Go Fast.R
[21:33:17] <rickyrick> Bayes: Have you considered migrating to C++ before you finalize the prototype
[21:33:35] <rickyrick> I used to tweak the absolute shit out of the R prototype, only for it all to go to waste during C++ because it wasn't beneficial there
[21:34:12] *** Quits: palasso (~palasso@user/palasso) (Remote host closed the connection)
[21:44:34] <Bayes> rickyrick that's the obvious answer, yep, I just sometimes feel like I want to be 99% comfortable with the (stats) methodology before migrating to C++
[21:45:11] <rickyrick> ( ͡° ͜ʖ ͡°)
[21:45:20] <Bayes> I do feel like my patience with R gets scarcer with time
[21:45:29] <Bayes> so at some point I'm gonna go full fuck it
[21:45:49] <rickyrick> Switch to Julia :^)
[21:45:59] <Bayes> heh
[21:46:21] <Bayes> by the way you phrased swapping R and C, I guess you're not doing full C but C via R
[21:46:34] <rickyrick> Yep
[21:47:15] <shrysr> Rcpp ?
[21:47:23] <rickyrick> Yep
[21:47:29] <Bayes> so you only write on C the bottlenecks and Amdahls
[21:47:38] <rickyrick> A handful of raw C imports, but I usually stick to C++
[21:47:40] <rickyrick> Yep
[21:47:43] <Bayes> k
[21:47:55] <rickyrick> I'm not going to redo CSV parsing and data janitor work in C++ lel
[21:48:36] <Bayes> do you modify R data objects in place from C then?
[21:48:44] <rickyrick> I tried that once
[21:48:59] <rickyrick> I thoroughly enjoyed inspecting the R Session Aborted message every few minutes
[21:49:02] <Bayes> cause passing data from R to C and vice versa is a real PITA
[21:49:36] <rickyrick> Most of my passthroughs are lists, so Rcpp sugar is pretty good
[21:49:50] <rickyrick> The contents are usually Armadillo vectors/matrices/cubes
[21:50:44] <Bayes> doesn't it bother you that every time you want to call C code you need to copy a large object from R to C and then all the way back?
[21:51:03] <Bayes> also go Eigen (｡◕‿‿◕｡)
[21:51:48] <rickyrick> const arma::mat&
[21:51:49] <rickyrick> ( ͡° ͜ʖ ͡°)
[21:52:08] <rickyrick> I really should try out Eigen at some point
[21:52:16] <Bayes> Eigen is a piece of art
[21:52:29] <shrysr> isnt Rcpp sugar for Cpp and R ? how does C come into the picture?
[21:52:38] <Bayes> the eigen discord is great also
[21:52:51] <rickyrick> I guess if you mean true C I've generally avoided that
[21:53:07] <rickyrick> Except for the cases where I need a BLAS function that isn't exposed via Armadillo
[21:53:08] <Bayes> shrysr idk I never decided whether Rcpp has any performance impact over R to C directly
[21:53:46] <rickyrick> I've found that calling an Rcpp function within an R loop is a lot slower than calling an Rcpp function with the loop builtin
[21:54:38] <Bayes> for sure, loops in R are slow
[21:54:54] <Bayes> it's not just that the inner code is slow, but the loop itself is
[21:54:56] <shrysr> hmm ^ that seems to make sense to me, considering the bottleneck is mostly with the R function calls no?
[21:55:19] <Bayes> yeah `[<-`, `for`, `:` etc are all function calls
[21:55:33] <rickyrick> R function call also has a notable overhead
[21:55:51] <Bayes> so even if you speed up the forand, the loop overhead is taxing
[21:56:19] <rickyrick> I had a case where you couldn'thave an Rcpp function with ... as a parameter
[21:56:37] <rickyrick> But I needed it as an argument for a package, so I wrapped it in a function with the same parameters but also ...
[21:56:55] <rickyrick> It was 2x slower than just editing the formals of the Rcpp generated function directly
[21:57:03] <rickyrick> Which is pretty significant
[22:00:27] <shrysr> So is there a way to find out which functions you are using are vectorised, and which are not?  Or is this a manual process or assessing performance and then replacing functions?
[22:01:13] <rickyrick> You can pretty much ignore going vectorised if you're going to port the function to C++
[22:01:49] <shrysr> ok
[22:02:50] <shrysr> for example, is it wrong to assume that 'many tidyverse functions are vectorised' or that common R libs have 'many vectorised functions'?
[22:04:14] <Bayes> shrysr https://luisdamiano.github.io/kbase/#org4530e5f not a comprehensive list btw
[22:04:53] <rickyrick> I guess I've always assumed tidyverse functions are vectorised by default
[22:05:01] <rickyrick> I usually find out they're not with unexpected output
[22:06:00] <Bayes> no idea re tidyverse, I avoid it like the pest, but if I had to guess they probably vectorize as much as it makes sense since vectorization is pretty much a core concept in R
[22:06:25] <rickyrick> shrysr: Are you working with computational code or just data wrangling
[22:06:31] <Bayes> also, tidyverse used not to care much about performance but lately they've been trying to catch up and I'm sure vectorization helps with that
[22:07:27] <shrysr> rickyrick: wrangling. my computation days are still in the past... :) 
[22:07:40] <rickyrick> Wrangling is probably still a hundred times easier to keep in R
[22:07:42] <rickyrick> ( ͡° ͜ʖ ͡°)
[22:08:26] <shrysr> Re vectorisaion of tidyverse - me too. and I would be Pissed if it aint... and the more i read about the C, RCpp, CPP soup.... the more i seem to wanna sympathise with people saying 'WTF R'.. which ahem.. there are many at $work :) 
[22:08:41] <rickyrick> ( ͡° ͜ʖ ͡°)
[22:09:14] <rickyrick> I wonder how the Python people do inline C++
[22:09:38] <tdsmith> i'm surprised by the tidyverse didn't care about performance take; one of the core value props for dplyr and readr was that they're vastly faster than base
[22:09:49] <shrysr> btw rickyrick ever considered stuff like Oracle's FastR and graalVM ?but that is JVM based and not Cpp
[22:10:02] <rickyrick> ¯\_(ツ)_/¯
[22:10:07] <Bayes> tdsmith I believe they didn't care until DT put all the heat on them
[22:10:15] <rickyrick> 2java4me
[22:10:29] <Bayes> also, didn't they start optimizing ggplot2 only a few years ago?
[22:10:45] <Bayes> DT = data.table
[22:11:02] <shrysr> rickyrick: fwiw graalVM is actually quite interesting. you would be able to write java/R/Julia/Python on the same JVM. i.e no porting of code for speed optimisation. 
[22:11:02] <tdsmith> yeah i think that's ahistorical for the core; they didn't care about beating data.table in benchmarks, i guess
[22:11:18] <rickyrick> shrysr: idk I've never used anything java
[22:11:34] <rickyrick> Except javascript back when it was just a replacement for <marquee>
[22:11:43] <Bayes> tdsmith hence why my take is they didn't really focus on performance
[22:11:51] <Bayes> I mean if it's a core value, you'd definitely want to keep an eye on data.table
[22:12:14] <Bayes> I always thought a core value was making programming look like english
[22:12:36] <Bayes> basically to help non-programmers jump into the R boat
[22:13:12] <Bayes> since python had already taken up the whole niche of data science by programmers
[22:13:36] <Bayes> and they went for something more approachable than python for, say, an ecologist, a social scientist, a soil scientist, etc
[22:13:40] <shrysr> I dont think core value was associated with programming looking like something, but more about standardising teh 'tidy' format and tools centered around a 'set' vocabulary. I would assume dplyr is vectorised... it usually takes a while to compile and install and looked like C/CPP stuff. but nfi. 
[22:14:18] <tdsmith> "vectorized" in R mostly means pushing your iteration into compiled code and dplyr definitely does that
[22:17:52] <rickyrick> ^
[22:27:45] <Bayes> rickyrick do you do sparse matrices with arma as well?
[22:28:33] <rickyrick> Haven't dealt much with sparse matrices
[22:28:53] <rickyrick> I think there's no nice conversion from R's usual sparse matrix packages to Armadillo sparse packages
[22:29:00] <rickyrick> Could be wrong
[22:34:09] <shrysr> "Could have been completely wrong about everything..." > potential candidate on my gravestone. 
[22:45:07] <rickyrick> ( ͡° ͜ʖ ͡°)
[22:59:18] <Bayes> I did it I found it
[22:59:34] <Bayes> the batman variogram! https://i.imgur.com/23zM0mk.png
[23:24:28] * rickyrick farts the bat signal
[23:26:18] <mefistofeles> that's why they call it vengeance
[23:52:22] *** Joins: joshisanonymous (~joshisano@2600:6c5a:457f:c4b5:4864:4440:e612:8308)
[23:52:24] *** Quits: joshisanonymous (~joshisano@2600:6c5a:457f:c4b5:4864:4440:e612:8308) (Remote host closed the connection)
