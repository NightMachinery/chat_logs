[00:00:04] *** Joins: amb007 (~a_bakic@102.215.76.86.rev.sfr.net)
[00:04:46] <Josh_2> Enforcing a minimum standard of documentation would aid in upping the quality of the ecosystem as a whole
[00:04:52] <Guest74> there's still a work on more than one implementation requirement as well right?
[00:06:50] *** Quits: Inline (~Inline@2a02:908:1252:7a80:dd3:2a50:6ae0:62a1) (Quit: Leaving)
[00:09:49] <Guest74> Josh_2: you fine with documentation in any language.  I think a better thing would be to organize and effort to document good libraries.  writing libraries and documenting libraries are two different skills.
[00:11:29] <Josh_2> Organize an effort? After you.
[00:12:25] <Josh_2> Also Guest74 did you write that library for the SANE network protocol?
[00:13:16] <Guest74> I did.  It's probably not well documented though :)   I think I'm also going to change it as pjb: suggested and have it work on streams.
[00:15:01] <Josh_2> Look at the requirements for adding a library to MELPA https://github.com/melpa/melpa/blob/master/CONTRIBUTING.org
[00:15:23] <Josh_2> Isn't it better to have less well documented libraries than many poorly documented ones?
[00:16:01] <Josh_2> Guest74:  Why do you use the nick Guest74 rather than JMC-Design (or something similar)?
[00:16:49] <Guest74> I'll get around to it eventually once I have a dedicated irc client.
[00:17:06] <Josh_2> I see, you are not an Emacs user?
[00:18:08] <Guest74> not really.  I've been trying to use everything i need in common lisp.
[00:18:28] <Josh_2> Wait what?
[00:18:38] <Josh_2> You are using something like climacs?
[00:19:03] <Guest74> no, sorry, I do use emacs, but only for writing CL.
[00:19:53] <Josh_2> Oh I see
[00:20:06] <Guest74> the goal is to have every tool written in cl and usable from the repl.
[00:20:14] <Josh_2> Emacs has ERC, thats what I use for IRC.
[00:21:20] <Guest74> yeah, trying not to get too comfortable in emacs as I think, perhaps erroneously that it will lead to less CL development.
[00:22:31] *** Quits: rogersm (~rogersm@90.166.177.48) (Quit: Leaving...)
[00:22:56] <Guest74> I'm not crazy though, I'm ok with using cl to wrap cli stuff.  Like I got a one function library that shells out to tesseract so I can ocr the stuff I scan with nsane.
[00:24:11] <Josh_2> I never used a lispmachine so I suppose when it comes to emacs + cl I dont know what I'm missing.
[00:25:26] *** Quits: tophullyte (tophullyte@gateway/vpn/protonvpn/tophullyte) (Remote host closed the connection)
[00:25:30] <Josh_2> Anyway gonna dash
[00:25:32] *** Quits: Josh_2 (~user@37.25.47.130) (Quit: ERC (IRC client for Emacs 27.1))
[00:25:49] *** Joins: tophullyte (tophullyte@gateway/vpn/protonvpn/tophullyte)
[00:27:12] *** Joins: tyson2 (~user@cpe688f2e1c83c3-cm688f2e1c83c0.cpe.net.cable.rogers.com)
[00:33:01] *** Quits: ebrasca (~user@librepanther.com) (Remote host closed the connection)
[00:39:31] *** Joins: X-Scale` (~ARM@83.223.249.106)
[00:40:41] *** Quits: X-Scale (~ARM@165.201.137.78.rev.vodafone.pt) (Ping timeout: 268 seconds)
[00:42:41] *** X-Scale` is now known as X-Scale
[00:43:51] *** Quits: tyson2 (~user@cpe688f2e1c83c3-cm688f2e1c83c0.cpe.net.cable.rogers.com) (Remote host closed the connection)
[00:46:14] *** Quits: cage (~cage@dynamic-adsl-94-34-16-50.clienti.tiscali.it) (Quit: rcirc on GNU Emacs 27.1)
[01:17:59] *** Joins: tyson2 (~user@cpe688f2e1c83c3-cm688f2e1c83c0.cpe.net.cable.rogers.com)
[01:19:28] *** Quits: tyson2 (~user@cpe688f2e1c83c3-cm688f2e1c83c0.cpe.net.cable.rogers.com) (Remote host closed the connection)
[01:20:21] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 256 seconds)
[01:20:59] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[01:26:44] *** Joins: tyson2 (~user@cpe688f2e1c83c3-cm688f2e1c83c0.cpe.net.cable.rogers.com)
[01:27:43] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 256 seconds)
[01:28:00] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[01:39:43] *** Joins: VincentVega (~user@212.241.24.160)
[01:45:55] *** Quits: peterhil (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi) (Remote host closed the connection)
[01:46:13] *** Joins: peterhil (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi)
[01:46:14] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 260 seconds)
[01:46:33] *** Joins: varjag (~user@ti0040a400-5479.bb.online.no)
[01:47:45] *** Quits: peterhil (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi) (Max SendQ exceeded)
[01:47:58] *** Joins: waleee (~waleee@h-82-196-111-63.NA.cust.bahnhof.se)
[01:48:14] *** Joins: peterhil (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi)
[01:52:00] *** Quits: peterhil (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi) (Remote host closed the connection)
[01:52:14] *** Joins: peterhil (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi)
[01:56:00] *** Quits: peterhil (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi) (Remote host closed the connection)
[01:56:14] *** Joins: peterhil (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi)
[02:00:25] *** Quits: peterhil (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi) (Remote host closed the connection)
[02:00:44] *** Joins: peterhil (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi)
[02:03:46] *** Quits: VincentVega (~user@212.241.24.160) (Remote host closed the connection)
[02:05:21] *** Quits: peterhil (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi) (Remote host closed the connection)
[02:08:13] *** Joins: notzmv (~zmv@user/notzmv)
[02:08:53] *** Quits: tophullyte (tophullyte@gateway/vpn/protonvpn/tophullyte) (Quit: Leaving)
[02:10:09] *** Joins: peterhil (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi)
[02:14:18] *** Quits: tyson2 (~user@cpe688f2e1c83c3-cm688f2e1c83c0.cpe.net.cable.rogers.com) (Remote host closed the connection)
[02:16:17] *** Quits: ym (~ym@95.106.10.166) (Ping timeout: 268 seconds)
[02:43:47] <anddam> howdy, https://lisp-journey.gitlab.io/blog/gui-programming-in-common-lisp-part-1-of-5-tk/ places emph on the interactive capability of Ltk but I was not able to find any example of that
[02:44:32] <anddam> a 4 yo reddit discussion specifically asked for Ltk got answered with many different framework, but nothing apropos interactive Ltk
[02:44:38] <anddam> can you suggest some resource for this?
[02:44:59] <anddam> case in point I am new to CL, can use a bit emacs, have sly and sbcl setup
[02:45:41] <anddam> oh, and I'd like to create small GUI programs, possibly bundling the graphic library and the CL program in an executable on win/lin/mac
[02:56:32] *** Joins: Inline (~Inline@2a02:908:1252:7a80:ff0f:1149:92da:8af0)
[02:58:04] *** Quits: pjb (~pjb@user/pjb) (Read error: Connection reset by peer)
[03:04:02] *** Quits: cosimone (~user@2001:b07:ae5:db26:a7aa:8027:6b4e:2fb3) (Ping timeout: 240 seconds)
[03:17:01] *** Quits: Jing (~hedgehog@2604:a840:3::1094) (Remote host closed the connection)
[03:17:34] *** Joins: Jing (~hedgehog@2604:a840:3::1094)
[03:58:27] <Guest74> anddam: I would think any tk tutorial would suit for the interactive part. ltk stuff to see how it's done in lisp.
[03:59:30] <Guest74> s/tk/tcl/tk/
[04:02:54] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[04:03:34] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 268 seconds)
[04:04:11] *** Lord_of_Life_ is now known as Lord_of_Life
[04:04:49] *** Joins: asarch (~asarch@2806:10ae:7:8f5d:f80c:bba4:e38d:e36)
[04:06:23] *** Quits: varjag (~user@ti0040a400-5479.bb.online.no) (Ping timeout: 256 seconds)
[04:10:23] *** Joins: varjag (~user@ti0040a400-5479.bb.online.no)
[04:12:29] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[04:15:23] *** Quits: varjag (~user@ti0040a400-5479.bb.online.no) (Ping timeout: 264 seconds)
[04:31:11] *** Joins: s-liao (~s-liao@101.86.101.64)
[04:57:06] <Guest74> actually the ltk documentation linked to in the above link seems better than most documentation. I wonder why more people don't use ltk?
[05:02:28] *** Quits: s-liao (~s-liao@101.86.101.64) (Ping timeout: 256 seconds)
[05:03:19] *** Joins: s-liao (~s-liao@101.86.101.64)
[05:13:35] *** Quits: taiju (~taiju@M014013236064.v4.enabler.ne.jp) (Ping timeout: 264 seconds)
[05:20:26] *** Quits: gaqwas (~john@dynamic-095-114-144-209.95.114.pool.telefonica.de) (Ping timeout: 260 seconds)
[05:22:49] *** Joins: notaprime (~notaprime@IGLD-80-230-0-120.inter.net.il)
[05:24:01] <notaprime> am I correct in my interpretation that #'COMMON-LISP:ED is permitted to exec() the editor?
[05:24:44] <notaprime> specifically, I got this impression from the fact that the return value is undefined, and that the implementation is allowed to reuse an existing session when such exists.
[05:25:32] <hayley> clhs ed
[05:25:32] <specbot> http://www.lispworks.com/reference/HyperSpec/Body/f_ed.htm
[05:26:31] <hayley> I'm not sure if it's allowed to diverge, but not having an editor is already UB.
[05:28:14] <notaprime> well, for example, SBCL's default was [and might still be] to run through SB-EXT:*ED-FUNCTIONS*, and I can see a sane swank backend simply putting some hook there for opening the desired file in a separate buffer
[05:28:59] <notaprime> my overarching concern in this little digression is to prevent excessive stack blowups
[05:29:33] *** Quits: notaprime (~notaprime@IGLD-80-230-0-120.inter.net.il) (Remote host closed the connection)
[05:29:45] *** Joins: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[05:29:58] *** Joins: paul0 (~paul0@user/paul0)
[05:32:59] *** Quits: CrashTestDummy (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 268 seconds)
[05:33:08] *** Joins: gruffcomposite (~gruffcomp@IGLD-80-230-0-120.inter.net.il)
[05:34:04] <gruffcomposite> Is tymoon.eu the only logbot that migrated? [I can't find the IRC log link in Clozure's sitemap.xml ...]
[05:34:45] *** Quits: asarch (~asarch@2806:10ae:7:8f5d:f80c:bba4:e38d:e36) (Quit: Leaving)
[05:35:11] *** gruffcomposite is now known as notaprime
[05:39:46] *** Joins: Oladon (~olad@98.43.81.226)
[05:44:19] <notaprime> looks like https://libera.irclog.whitequark.org/commonlisp/ could be included in the topic, too
[05:55:54] *** Quits: random-nick (~random-ni@87.116.180.220) (Ping timeout: 260 seconds)
[05:57:04] *** Joins: asarch (~asarch@2806:10ae:7:8f5d:f80c:bba4:e38d:e36)
[06:11:02] *** Quits: s-liao (~s-liao@101.86.101.64) (Ping timeout: 256 seconds)
[06:11:29] *** Joins: johnjay (~pi@192.142.100.50)
[06:12:05] <johnjay> if i want to load into quicklisp manually
[06:12:13] <johnjay> do I put the folder in quicklisp/local-projects?
[06:14:07] <notaprime> johnjay, correct; e.g. /home/johnjay/quicklisp/local-projects/your-local-fork
[06:14:47] <johnjay> ok
[06:15:02] <johnjay> the world of cl packaging is still quite mysterious to me
[06:15:17] <notaprime> this would be a reasonable location if #p"/home/johnjay/quicklisp/" is your installation root, and then the ASDF file would be at #p"/home/johnjay/quicklisp/local-projects/your-local-fork/your-local-fork.asd"
[06:15:45] <notaprime> well, keep asking questions, and read documentation; not necessarily in that order.
[06:16:11] <johnjay> right
[06:16:32] <notaprime> I used to recommend reading the fine sources, although not everyone thinks that life is short enough to become proficient at Common Lisp.
[06:16:38] <johnjay> i heard from a haskeller recently it helps to have a goal state to work toward
[06:16:49] <johnjay> so maybe i should always just have a certain project in mind. that i'm working to understand.
[06:17:06] <johnjay> so i download cl-tetris3d
[06:17:09] <johnjay> since it is pretty
[06:17:16] <notaprime> pause one moment
[06:17:57] <notaprime> if you are using quicklisp to download projects, then it's entirely possible to just edit the downloaded source code directly
[06:18:34] <notaprime> using the local-projects directory is a better idea when you have multiple versions of a project, or if you want to use version control and send patches to the upstream project
[06:19:12] *** Joins: taiju (~taiju@M014013236064.v4.enabler.ne.jp)
[06:19:12] <notaprime> if you are simply downloading a snapshot using QL:QUICKLOAD, and then making a few throwaway edits to experiment, then you don't need to have a duplicate directory
[06:20:02] <johnjay> well wait a second. so quicklisp isn't download binaries, but the actual code itself, then compiling it
[06:20:12] <notaprime> correct
[06:20:17] <johnjay> ok
[06:20:34] <johnjay> i'm using local-projects to install something not in quicklisp
[06:20:36] <notaprime> the only situation where quicklisp would download binaries is if one of the projects included them as static objects in their ASDF system, and this is not the typical situation.
[06:21:22] <notaprime> that is also a valid usecase for that directory
[06:21:39] <johnjay> what's the diff between asd and quicklisp?
[06:22:07] <johnjay> er asdf, uiop, and quicklisp
[06:23:37] <notaprime> quicklisp mainly handles obtaining code from other locations, and organizing where to place it within your local filesystem; ASDF and its components handle the compilation process for projects that contain multiple files
[06:24:43] <notaprime> theoretically you don't need to use ASDF if your entire project fits within one file, although such a statement is similar to ... "theoretically, you don't need multiprocessing if only one person uses your computer"
[06:24:44] <johnjay> right so quicklisp = apt and asdf = make or maybe autotools
[06:24:55] <notaprime> sure, that's a reasonable comparison.
[06:25:23] <johnjay> i find people in computing aren't very good at explaining things. or making reasonable comparisons
[06:25:25] <johnjay> so thanks
[06:25:45] <notaprime> they are too busy reimplementing word2vec instead of running idea2vec
[06:26:01] <johnjay> speaking of multiprocessing, installing this quicklisp package is only using 1 core. so that's unfortunate
[06:26:12] <johnjay> heh
[06:26:22] <johnjay> i have four whole cores on this device!
[06:26:40] <notaprime> much of common lisp is single-threaded, although various efforts have been made to parallelize things.
[06:26:48] <johnjay> ah.
[06:27:01] <johnjay> yeah multi-threading is kind of a thing. bordeaux-threads i think is the main one on cl?
[06:27:14] <johnjay> it seems to be fine on this arm device
[06:27:24] *** Quits: asarch (~asarch@2806:10ae:7:8f5d:f80c:bba4:e38d:e36) (Quit: Leaving)
[06:27:37] <notaprime> there is no "global interpreter lock", similar to what Python has [or at least, used to, a few years ago]; however, specific implementations, and many libraries, have large parts of their interfaces effectively single-threaded.
[06:28:10] <hayley> Handling multiple threads is slower if you only find yourself using one thread.
[06:28:28] <notaprime> consider that loading a system via quicklisp will almost always cause [re]definitions of object and method hierarchies, and these could have effects on the compilation of other systems.
[06:29:04] <johnjay> > Unfortunately, since the GIL exists, other features have grown to depend on the guarantees that it enforces. This makes it hard to remove the GIL without breaking many official and unofficial Python packages and modules.
[06:29:09] <hayley> Though, given that most improvements in CPU speed are either from 1. moar cache, 2. moar cores or 3. larger vector units (though only useful for numerics, or unless you're really clever about it), running just one thread looks slower over time.
[06:30:01] <notaprime> thus, the sane thing to do in the absence of explicit information about interdependencies, is to impose some sequence to the compilation.
[06:31:13] *** Joins: s-liao (~s-liao@101.86.101.64)
[06:31:18] <notaprime> if you optimistically assume that the absence of information is information of independence, then you can get lots of nondeterministic bugs, instead of deterministic ones. dunno what kind of hell you prefer, but one kind is more exciting, and that is not always a good thing.
[06:33:16] <johnjay> well that sdl game was pretty slow. i thought i had opengl on this thing....
[06:33:47] <johnjay> notaprime: in the context of quicklisp compilation?
[06:34:12] <notaprime> https://libera.irclog.whitequark.org/commonlisp/2021-11-21#31220505 << B-T is a portability layer, although it does not give you much expressive power
[06:34:51] <johnjay> actually i think any x11 thing i run in sbcl on this arm sys is slow
[06:35:03] <johnjay> idk if that's due to ssh x11 forwarding or a lack of 3d drivers or what
[06:35:17] <notaprime> if you want to design algorithms with parallelism in mind, you are probably better off using one of the higher-level abstractions, which will either have separate interfaces for various implementations, or just use BT itself.
[06:36:16] <hayley> I'm not sure how you make fork/join, locks and condition variables more expressive. But bordeaux-threads is quite bare of concurrent structures, yes.
[06:36:25] <notaprime> however, unless you are interested in how each implementation handles parallelism, you are probably better off thinking of BT as similar to UIOP, i.e., some internal component of libraries you use, instead of a library that you should be using directly yourself.
[06:37:57] *** Quits: specbot (~specbot@common-lisp.net) (Remote host closed the connection)
[06:37:57] *** Quits: minion (~minion@common-lisp.net) (Remote host closed the connection)
[06:38:20] *** Joins: minion (~minion@common-lisp.net)
[06:38:20] *** Joins: specbot (~specbot@common-lisp.net)
[06:38:45] <johnjay> i had the impression that commonlisp was full of multithreaded stuff
[06:38:50] <notaprime> hayley, what about atomic operations?
[06:38:52] <johnjay> at least from people talking
[06:39:51] <hayley> notaprime: Yes, those are also not present in bordeaux-threads. But you have my apologies if you need to get down to atomics for something.
[06:40:17] <notaprime> johnjay, there are several frameworks for parallel programming, although if you are unfamiliar with the field, you will probably need to choose a specific one, or at least look through the examples that the different libraries include.
[06:40:34] <notaprime> once you find which examples seem most intuitive to you, study that library.
[06:40:54] <hayley> https://github.com/Shinmera/atomics is portable "enough", though DON'T USE IT without good reason.
[06:41:19] <notaprime> why not?
[06:41:23] <hayley> (I mean, it's a good library, but don't use atomics if possible, okay?)
[06:42:17] <johnjay> ah ok. well i was going to ask for a recommendation to study
[06:42:29] <notaprime> I find that atomic operations are good when you are dealing with processes running within a single motherboard.
[06:42:51] <notaprime> if your parallelism is scattered across a dozen datacentres, then sure, you need a different paradigm.
[06:43:34] <hayley> Atomics, as well as fine grained locking, are somewhat of a pain to reason about from experience.
[06:44:35] *** Quits: lagash (lagash@lagash.freeirc.org) (Killed (calcium.libera.chat (Nickname regained by services)))
[06:44:41] <hayley> Not to say they're bad (again), but use coarser-grained locking to start with, until you find that locking is a problem.
[06:44:48] *** Joins: lagash_ (lagash@lagash.freeirc.org)
[06:45:01] <notaprime> johnjay, you can study these examples, too, although be warned that the library is almost unmaintained: https://github.com/adlai/chanl/tree/master/examples
[06:45:02] *** Quits: pve (~pve@37-33-50-50.bb.dnainternet.fi) (Ping timeout: 240 seconds)
[06:45:36] *** Quits: s-liao (~s-liao@101.86.101.64) (Ping timeout: 256 seconds)
[06:45:37] <hayley> Then, if you do use something finer grained, the logic, state machine, or any other thing you use to reason with, should fit on a page, else you should be writing up a model to be mechanically verified first.
[06:47:01] *** Joins: pve (~pve@87-93-196-132.bb.dnainternet.fi)
[06:48:50] <johnjay> ah ok thanks
[06:49:39] <hayley> Behold, slower sb-concurrency
[06:50:05] <Guest74> You want slow, I'll show you slow!
[06:50:47] <johnjay> by the way, does common lisp ecosystem have much in the way of packages and namespaces?
[06:50:55] <hayley> clhs package
[06:50:55] <specbot> http://www.lispworks.com/reference/HyperSpec/Body/t_pkg.htm
[06:50:57] <johnjay> like e.g. python has nice module names for regex,threads, math, etc
[06:51:31] <notaprime> the rule-of-thumb that will have you only erring on the side of excess verbosity is to use reverse-TLD naming
[06:51:34] <hayley> What I've used of Python's math module is just in the CL package.
[06:52:38] <hayley> Most things you use are just in the CL package, rather than having additional packages. Admittedly I like it that way, though I could have just internalised it from liking Common Lisp for other reasons.
[06:52:52] <notaprime> so if you have some johnjay.domain.biz, you dump your packages under (defpackage "biz.domain.johnjay.first-package" ...) etc
[06:53:11] <notaprime> and as you can read in the specbot link, you can define nicknames to abbreviate this.
[06:53:18] <johnjay> i've seen that weird naming before in java.
[06:53:24] <johnjay> like com.sun.string.thing.java....
[06:53:34] <johnjay> but i don't really know why they do that
[06:53:49] <notaprime> it is not unique to java, although I believe was popularized through java packages, or at least, during the same years that java became popular.
[06:53:56] *** Joins: s-liao (~s-liao@101.86.101.64)
[06:53:58] <Guest74> not so fun ways people like to torture themselves
[06:54:41] <hayley> My investment in using a .ge suffix for applied-langua.ge would be ruined with reverse TLD naming.
[06:54:45] <notaprime> the standard CL package system only has one global namespace for packages, thus the need for hierarchical nomenclature
[06:54:49] <hayley> Though, I didn't really pay for the domain...at all.
[06:55:27] <notaprime> if you have time to learn about yet another recent innovation, then there is one for alleviating this.
[06:55:33] <Guest74> not even a hypothetical cent?
[06:55:38] <hayley> Following the discussion in #lispcafe, I guess I need to update my wish list of things: thread local GC, hardware transactional memory, first class global environments, and a pony.
[06:56:43] <notaprime> pffft, can't you just use hash-consing with pools in a declared dynamic variable?
[06:56:53] <notaprime> and wtf would you do with a pony anyway... ride it to a stable where you can get a real horse?
[06:56:55] <hayley> Very funny.
[06:57:49] <notaprime> tbh ponies are probably intelligent enough to learn common lisp
[06:58:02] <notaprime> something something convergent evolution.
[06:58:10] <hayley> Can confirm, my favourite coauthor is a pony.
[07:01:10] <notaprime> I wonder what the lower bar for intelligence to being a CL programmer is.
[07:02:34] <johnjay> ah ok. well thanks for the tips.
[07:02:55] <johnjay> i like the cookbook linked in the topic as well, i find a lot of guides are outdated and don't talk about common sense things like regex or json
[07:03:08] <notaprime> e.g., Richard Feynman claimed that the bar for being a physicist was quite low, and gave himself as an example; he supposedly tested an IQ somewhere in the 120s due to having a really low "verbal intelligence", so maybe he'd prefer a Lisp-1 instead of CL.
[07:04:03] <notaprime> maybe my hypothesis is backwards; you'd need a higher "verbal intelligence" to use a Lisp-1, because you can't overload names and thus need to coin new words for each part of speech.
[07:04:05] <Guest74> many measurements of IQ have nothing to do with programming.
[07:04:27] <notaprime> johnjay, you're welcome
[07:04:33] <johnjay> isn't 120IQ equivalent to the average tv news anchor?
[07:04:59] <johnjay> yup
[07:05:32] <notaprime> I have no idea what their distributions are; all I remember about interpreting IQ scores is that each ten points are supposed to represent one standard deviation away from the mean score on the test... or was it the median?
[07:05:38] <Guest74> see, you can get a high score on 'facts' and zero critical thinking skills
[07:05:48] <Guest74> 15
[07:06:03] <notaprime> the whole original IQ score collapses like a house of cards once you sweep away the gaussian rug underneath it.
[07:06:09] <hayley> IIRC 15 per standard deviation. And as a normal distribution is symmetric, mean = median
[07:08:32] <notaprime> there is no reason to expect that human scores on an intelligence test would fall along a Gaussian distribution, unless your model human flips a coin before choosing whether to flip a coin for answering each question, instead of using their own brain.
[07:08:55] <notaprime> if that is your model human, then there are probably more fundamental issues that need to be addressed first.
[07:10:28] <notaprime> my guess is that the importance of "verbal intelligence" for programming in general [and specifically CL, just so things stay on-topic!] is vastly underestimated.
[07:13:14] <notaprime> its importance is made more intuitive by thinking of programming as a way of coping with the inferiority of a human mind's numerical intelligence when compared with the infinite superiority of mathematics itself; there will always be complicated problems, although at least a computer can help us feeble humans to extend our numerical grasp.
[07:15:51] <Guest74> meh, they're just symbols.  the fact they are usually words might mislead you.
[07:16:37] *** Quits: lagash_ (lagash@lagash.freeirc.org) (Quit: ZNC - https://znc.in)
[07:16:50] <notaprime> Guest74, what is the referent of "they're"?
[07:17:18] <Guest74> all those 'words' in lisp.  Not much verbal intelligence needed.
[07:18:44] <notaprime> Common Lisp allows overloading; symbols can be variables, and functions, and often have roles in additional namespaces. the situation is qualitatively different from languages where each token is either undefined, or has exactly one definition.
[07:19:50] <notaprime> 'overloading' is probably not the best word to use for describing Lisp-N vs Lisp-1, although I hope it gets my point across.
[07:19:51] <Guest74> can, doesn't have to be.  And then it's more about recognizing where they occur.
[07:20:40] <notaprime> are you familiar with word2vec ?
[07:21:10] <Guest74> there are pretty straightforward rules, not so in spoken languages where verbal intelligence is a totally different thing.
[07:21:28] <notaprime> if so - Lisp-N essentially consumes an additional basis element.
[07:22:10] <Guest74> lisp is a simple grammar, not a natural language.
[07:22:22] *** Joins: lagash (lagash@lagash.shelltalk.net)
[07:23:39] <notaprime> if not - word2vec is a project that eats a large body of text, and builds a representation of the words in that text as points within a vector space, ideally one with far fewer dimensions than the number of word roots, let alone the number of distinct words.
[07:24:07] <Guest74> natural language text
[07:24:35] <notaprime> then linguists have lots of fun searching for parallelograms in the vector space, and comparing them to "answers are to questions, as mistakes are to ______" prompts.
[07:24:37] <johnjay> as to IQ of programmers. I heard a quite black-pilled take the other day
[07:24:48] <johnjay> something like the real mathematicians do quant or PhD research
[07:24:56] <johnjay> the real writers become lawyers or writers
[07:25:17] <johnjay> and the real scientists become... scientists. so basically only people who are sub-par in all of these categories go into programming
[07:25:40] <notaprime> and imaginary mathematicians do ... quantum chemistry?
[07:26:34] <notaprime> well, "become writers" is incredibly general
[07:27:03] <johnjay> sure. the basic idea being programming is a collection of skills. but anybody excelling in one of those skills could make more money doing something else
[07:27:07] <johnjay> leading to a brain drain
[07:27:37] <Guest74> money?
[07:27:41] <notaprime> you, or the author of that quote, probably wasn't referring to journalists who are so forced to produce volumes of copy that they can't allow themselves to waste time editing.
[07:28:36] <notaprime> although arguably most writing is just that, high-volume journalism, blogging, etc; of course, it's important to remember Hunter S. Thompson's "that's not writing, that's typing" dismissal of those :->
[07:28:49] <notaprime> :-)
[07:29:11] <johnjay> yes i assume writing for high salary would be more like lawyers writing briefs than journalists
[07:29:35] * johnjay wonders if one day machine learning software will replace most reporters
[07:29:47] <lagash> nobody'd notice? :P
[07:30:00] <Guest74> um, news outlets don't want to lose their bias.
[07:30:08] <johnjay> well i've heard rumors of it happening for lawyers.
[07:30:16] <notaprime> Guest74, money is just speech; the fact that it's also symbolic beyond speech is often misleading.
[07:30:43] <beach> Good morning everyone!
[07:31:08] <Guest74> I want to write a lisp documentation system that would be good for reviewing laws and their constant referencing.
[07:31:49] <beach> Guest74: You may want to talk to splittist about that.
[07:32:40] <Guest74> aren't they working on some mcclim based thing?
[07:32:51] <beach> I don't remember.
[07:34:31] *** Quits: Guest74 (~Guest74@modemcable110.164-177-173.mc.videotron.ca) (Quit: Connection closed)
[07:34:32] <beach> I am not suggesting a collaboration.  Just that I am pretty sure that splittist is using Common Lisp to simplify legal work.
[07:35:00] *** Joins: Guest74 (~Guest74@modemcable110.164-177-173.mc.videotron.ca)
[07:35:36] <notaprime> common lisp makes legal work simple, illegal work complicated, and impossible work conceivable.
[07:36:46] <Guest74> I guess document display system is more accurate than documentation system.
[07:36:54] <notaprime> now here's a stupid question: this computer almost certainly has only two CPU cores, although it pretends to have four; is there any reason to ever use more than three threads in the lisp image?
[07:37:56] <notaprime> any fundamental reason, that is; obviously I don't include in this questions threads that my environment [e.g. swank] would already be starting.
[07:38:09] <beach> notaprime: Sure, you may want to use threads because of the independent control, and not just to boost performance.
[07:39:49] <notaprime> as far as the lisp implementation is concerned, such a computer would be indistinguishable from a four-core one?
[07:40:30] * notaprime is slightly peeved that (machine-version) simply returns NIL
[07:41:32] <notaprime> this is on ECL; I have not tried others, on this machine, yet.
[07:42:58] <beach> That's a valid return value.
[07:43:09] <beach> clhs machine-version
[07:43:10] <specbot> http://www.lispworks.com/reference/HyperSpec/Body/f_mach_v.htm
[07:43:38] <notaprime> as much as it peeves me, I suppose that printing the null return value does still give information.
[07:45:44] <notaprime> I haven't yet settled on a precise format string, although I like to include the return values from all five of the f_mach and f_impl functions in the startup message.
[07:46:49] <notaprime> clhs lisp-implementation-type
[07:46:49] <specbot> http://www.lispworks.com/reference/HyperSpec/Body/f_lisp_i.htm
[07:47:31] <notaprime> that being the correct link; strangely these are grouped, whereas f_mach_i and f_mach_t get their own entries?
[07:48:43] <beach> notaprime: It sounds like you are working on some Common Lisp implementation.  Is that so?
[07:49:05] <notaprime> no, just an initfile for a new setup.
[07:49:26] <beach> Ah, OK.
[07:50:19] <notaprime> it does greatly slow down work to do this all from scratch, instead of copying over a previous configuration; although I hope that this way I avoid accumulating cruft.
[07:51:42] <notaprime> I recall once writing code that tried all six combinations of instance,type,version and machine,lisp-implementation ... and am glad to report that this cruft has gotten forgotten by the proverbial bitrot.
[07:52:20] <Guest74> out of curiosity what do you put in your init file?
[07:52:33] <notaprime> lisp-implementation-instance should not exist outside of anything as pathological as a git-bisect hunting some bug across five years of SBCL development.
[07:52:49] <notaprime> er, not "as pathological as", but "less pathological then".
[07:54:00] <notaprime> Guest74, usually only this format statement, and either the quicklisp quickload snippet, or a direct ASDF setup
[07:54:29] <Guest74> ah, you made it sound like it was a lot of work.
[07:55:11] <notaprime> I think that on one computer where I was using several different compilers, I had that common stuff in one init file, and then a few init files for the different implementations, along with things for each one; e.g., at some point in the past, getting #P"~" to work right needed an additional form.
[07:55:44] <notaprime> I don't recall whether that was on SBCL or CCL.
[07:57:16] <notaprime> the bulk of the setup work is the OS cruft.
[07:59:12] <notaprime> I'll probably be setting up another workstation soon, and am strongly tempted to leave out all the extra work for a graphical environment, although to allocate space for installing it in the future in the mental accounting.
[07:59:33] *** Quits: amb007 (~a_bakic@102.215.76.86.rev.sfr.net) (Remote host closed the connection)
[07:59:54] <notaprime> there is also the question of whether to nuke a windows partition, or setup a development environment there instead.
[08:00:28] <notaprime> this is actually the first time in about a decade that I actually have a computer with windows installed on it!
[08:01:36] <notaprime> the reflex is to nuke the partition, although I don't urgently need the extra space.
[08:02:11] *** Joins: amb007 (~a_bakic@102.215.76.86.rev.sfr.net)
[08:03:41] <notaprime> is there a specific recommendation for CL on windows?
[08:04:02] <notaprime> search engine results suggest "Portacle", although I've not tried this myself in the past.
[08:04:07] *** Quits: amb007 (~a_bakic@102.215.76.86.rev.sfr.net) (Remote host closed the connection)
[08:05:27] <johnjay> i just use sbcl directly
[08:05:33] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[08:05:51] <johnjay> portacle is some kind of emacs/sbcl customization package. I think i installed it one time but didn't use it
[08:05:56] <beach> Portacle is SBCL+Emacs+SLIME, and I don't think Shinmera has had the time to keep up with its maintenance.
[08:06:11] <hayley> notaprime: Also consider that some threads might be busy doing IO work, rather than processing. So having more threads with more work to do can help there.
[08:06:13] <notaprime> sounds that it's going the way of Lispbox
[08:06:49] <beach> notaprime: Or, you can avoid Windows.
[08:07:13] <hayley> ...and it also shouldn't be too terrible to have more threads than cores (though your OS usually craps out on the order of thousands of threads).
[08:07:30] <notaprime> if it weren't for videogames, I'd have nuked the windows partition the same day that I bought the computer.
[08:08:41] <notaprime> fortunately I have found enough entertainment elsewhere to stay away from that partition recently.
[08:10:06] <notaprime> hayley, the rule of thumb that I learned is to limit the number of work threads between the number of cores, and a small constant multiple of the number of cores
[08:10:47] <hayley> Yes, but having more isn't disastrous, up to a point.
[08:10:53] <notaprime> e.g., at an extreme, have one more work thread than the number of cores, so that there is always a work thread available for scheduling, until work runs out.
[08:11:10] <beach> That rule of thumb seems to apply only for threads meant to boost performance.
[08:12:08] <hayley> Right, you want to follow that rule if you are completely compute-bound.
[08:12:27] <notaprime> the lisp implementations add their own overhead above the OS; even if there are no additional instructions at process switches, there are still additional data.
[08:12:42] <hayley> How do you know that?
[08:13:11] <notaprime> bits of poking at internals
[08:13:18] <hayley> A Lisp implementation has some execution overhead in some context, but it is completely uninvolved in process switching*.
[08:13:41] <hayley> *assuming that it solely uses OS threads and not some green threading, which all do today.
[08:13:47] <notaprime> even without reading sources, you can convince yourself that the implementation must duplicate certain structures with fresh copies per thread.
[08:14:10] <hayley> So? That's a cost associated with creating a thread, and not switching threads.
[08:14:32] <Guest74> I'd like a way to tell a thread to work on a certain core.
[08:15:14] <hayley> Does Windows let you do that? I know FreeBSD and Linux have setaffinity(), but I am not familiar with thread management in Windows.
[08:15:29] <notaprime> don't context switches involve making the thread-local memory accessible more readily than merely knowing how to compute its address? e.g., loading the relevant pages into one of the cache levels.
[08:15:58] <notaprime> (my question is at the level of what the OS does, not something that the lisp implementation would have to handle explicitly)
[08:16:26] <hayley> That occurs when a Lisp program has to read thread-local data, but sure.
[08:17:01] <hayley> But, to a zeroth approximation, you probably blow out all your cache when switching between processes.
[08:17:41] <notaprime> I like where this is going!
[08:18:01] <notaprime> ... to a first approximation, you blow out the L1-and-upwards caches when switching between processes.
[08:18:06] <notaprime> to a second, ...
[08:19:02] *** notaprime is now known as adlai
[08:19:42] <hayley> Don't forget translation lookaside buffers and branch prediction tables. Though I think the former is reduced as the TLB is "tagged" with each process, and you don't tend to have TLB pressure.
[08:20:09] <hayley> So the cache can sometimes cache lookups for multiple processes.
[08:21:00] *** Joins: amb007 (~a_bakic@102.215.76.86.rev.sfr.net)
[08:24:12] <adlai> I can't quite forget things that I never properly understood to begin with, can I?
[08:25:24] <adlai> blech, the _whitelogger appears to elide renames from the published log.
[08:26:49] <adlai> however, I find its web viewer better for a large screen than the one linked in the channel topic.
[08:29:36] <adlai> "Expiration times can be extended by staff for other reasons including account age to as much as 15 weeks past the last use." ... this is surprising; I'll have to take care to keep this registration alive.
[08:30:06] <adlai> for some reason I expected the tolerated default inactivity time to be on the order of half a year, not ten weeks.
[08:33:51] *** Quits: Guest74 (~Guest74@modemcable110.164-177-173.mc.videotron.ca) (Ping timeout: 256 seconds)
[08:34:55] *** Quits: amb007 (~a_bakic@102.215.76.86.rev.sfr.net) (Remote host closed the connection)
[08:35:01] <adlai> it appears that Clozure's logs haven't been updated in a while; this is unfortunate, as they published the actual IRC protocol messages.
[08:36:08] *** Joins: amb007 (~a_bakic@102.215.76.86.rev.sfr.net)
[08:38:09] *** Quits: amb007 (~a_bakic@102.215.76.86.rev.sfr.net) (Remote host closed the connection)
[08:39:50] <adlai> is there a published overview of the CL channels in this network?
[08:40:23] *** Joins: amb007 (~a_bakic@102.215.76.86.rev.sfr.net)
[08:40:32] <adlai> I ask humans, because I recall once running /list on freenode and then needing to kill my IRC client
[08:41:52] *** Quits: amb007 (~a_bakic@102.215.76.86.rev.sfr.net) (Remote host closed the connection)
[08:42:51] <adlai> ... and the /list syntax for this network doesn't appear to support a search query
[08:43:02] <Nilby> adlai:  /msg alis HELP LIST
[08:43:22] <adlai> thank you, Nilby
[08:43:46] <Nilby> adlai: You're welcome. I always forget about it too.
[08:44:33] <adlai> meanwhile I have enjoyed living dangerously, and discovered that their webchat has builtin idiotproofing
[08:44:55] <adlai> running /list with no arguments gets special-cased by the webchat :-)
[08:47:57] *** Joins: amb007 (~a_bakic@102.215.76.86.rev.sfr.net)
[08:53:19] *** Parts: lisp123w (~user@80.227.170.170) (ERC (IRC client for Emacs 26.3))
[09:01:31] *** Joins: holycow (~rtaylor@69-172-184-139.cable.teksavvy.com)
[09:02:49] *** Quits: waleee (~waleee@h-82-196-111-63.NA.cust.bahnhof.se) (Quit: WeeChat 3.3)
[09:03:44] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[09:08:45] *** Joins: akoana (~ah@user/akoana)
[09:22:01] *** Quits: Devon (~devon@pool-108-28-172-103.washdc.fios.verizon.net) (Ping timeout: 256 seconds)
[09:26:26] *** Joins: Devon (~devon@pool-108-28-172-103.washdc.fios.verizon.net)
[09:31:35] *** Quits: Devon (~devon@pool-108-28-172-103.washdc.fios.verizon.net) (Ping timeout: 264 seconds)
[09:56:18] *** Quits: taiju (~taiju@M014013236064.v4.enabler.ne.jp) (Ping timeout: 260 seconds)
[09:57:20] <fe[nl]ix> hayley: I welcome suggestions for concurrency primitives to add to B-T
[09:58:04] <hayley> I could think of a few, but I don't know how portable they are going to be.
[09:58:26] <hayley> Fence instructions would be nice, but I also don't know if those belong in bordeaux-threads or atomics.
[10:00:34] <fe[nl]ix> I can only add features which the implementations already expose to some extent
[10:01:04] <fe[nl]ix> so BT2 will have atomics, but fences are kind of useless because there's no memory model
[10:03:52] <hayley> Yes, we'd need a memory model. BT3 then? :)
[10:04:51] <hayley> And do atomics make sense without a memory model?
[10:06:55] <fe[nl]ix> they still do, they're just full barriers
[10:07:10] <hayley> Sure.
[10:12:59] *** Joins: taiju (~taiju@M014013236064.v4.enabler.ne.jp)
[10:33:25] *** Quits: holycow (~rtaylor@69-172-184-139.cable.teksavvy.com) (Quit: Lost terminal)
[10:39:12] *** Joins: lisp123w (~user@80.227.170.170)
[10:45:30] *** Parts: akoana (~ah@user/akoana) ()
[10:47:31] *** Joins: asarch (~asarch@2806:10ae:7:8f5d:f80c:bba4:e38d:e36)
[10:49:04] *** Joins: vats (~vats@103.158.91.169)
[10:53:19] *** Quits: adlai (~gruffcomp@IGLD-80-230-0-120.inter.net.il) (Quit: the inability to read does not make you a random oracle)
[10:59:15] *** Quits: MichaelRaskin (~MichaelRa@ipb21a9944.dynamic.kabel-deutschland.de) (Remote host closed the connection)
[11:13:26] *** Quits: Skyfire (~pyon@user/pyon) (Quit: brb)
[11:14:07] *** Parts: contrapunctus (a75f5b1571@jabberfr.org) ()
[11:15:08] *** Joins: igemnace (~ian@user/igemnace)
[11:15:36] *** Joins: contrapunctus (a75f5b1571@jabberfr.org)
[11:22:35] *** Quits: amb007 (~a_bakic@102.215.76.86.rev.sfr.net) (Read error: Connection reset by peer)
[11:22:39] *** Joins: Skyfire (~pyon@user/pyon)
[11:23:42] *** Joins: amb007 (~a_bakic@102.215.76.86.rev.sfr.net)
[11:24:04] *** Joins: MichaelRaskin (~MichaelRa@ipb21a9944.dynamic.kabel-deutschland.de)
[11:24:05] *** ChanServ sets mode: +o MichaelRaskin
[11:25:16] *** Quits: Skyfire (~pyon@user/pyon) (Client Quit)
[11:25:22] *** Quits: asarch (~asarch@2806:10ae:7:8f5d:f80c:bba4:e38d:e36) (Quit: Leaving)
[11:27:16] *** Joins: Skyfire (~pyon@user/pyon)
[11:28:20] *** Quits: dre (~dre@2001:8003:c932:c301:a745:514b:948f:a168) (Ping timeout: 265 seconds)
[11:28:59] *** Quits: amb007 (~a_bakic@102.215.76.86.rev.sfr.net) (Remote host closed the connection)
[11:30:01] *** Joins: ym (~ym@95.106.10.166)
[11:38:36] *** Joins: amb007 (~a_bakic@102.215.76.86.rev.sfr.net)
[11:43:13] *** Quits: paul0 (~paul0@user/paul0) (Read error: Connection reset by peer)
[11:44:51] *** Joins: paul0 (~paul0@user/paul0)
[11:44:55] *** Quits: amb007 (~a_bakic@102.215.76.86.rev.sfr.net) (Remote host closed the connection)
[11:47:08] *** Joins: amb007 (~a_bakic@102.215.76.86.rev.sfr.net)
[11:49:08] *** Quits: amb007 (~a_bakic@102.215.76.86.rev.sfr.net) (Remote host closed the connection)
[12:02:19] *** Joins: amb007 (~a_bakic@102.215.76.86.rev.sfr.net)
[12:03:51] *** Quits: amb007 (~a_bakic@102.215.76.86.rev.sfr.net) (Remote host closed the connection)
[12:10:07] *** Joins: Devon (~devon@pool-108-28-172-103.washdc.fios.verizon.net)
[12:12:53] *** Joins: pjb (~pjb@user/pjb)
[12:15:25] *** Quits: Devon (~devon@pool-108-28-172-103.washdc.fios.verizon.net) (Ping timeout: 256 seconds)
[12:18:30] *** Joins: amb007 (~a_bakic@102.215.76.86.rev.sfr.net)
[12:22:30] *** Quits: amb007 (~a_bakic@102.215.76.86.rev.sfr.net) (Remote host closed the connection)
[12:24:22] *** Joins: amb007 (~a_bakic@102.215.76.86.rev.sfr.net)
[12:29:43] *** Quits: pjb (~pjb@user/pjb) (Ping timeout: 265 seconds)
[12:31:56] *** Quits: vats (~vats@103.158.91.169) (Read error: Connection reset by peer)
[12:39:18] *** Joins: gaqwas (~john@dynamic-077-007-035-115.77.7.pool.telefonica.de)
[12:45:24] *** Joins: pjb (~pjb@user/pjb)
[12:58:28] *** Quits: s-liao (~s-liao@101.86.101.64) (Ping timeout: 256 seconds)
[13:09:57] *** Joins: s-liao (~s-liao@101.86.101.64)
[13:23:16] *** Joins: cage (~cage@dynamic-adsl-94-34-16-50.clienti.tiscali.it)
[13:25:40] *** Quits: s-liao (~s-liao@101.86.101.64) (Ping timeout: 256 seconds)
[13:27:13] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 268 seconds)
[13:32:40] *** Joins: theothornhill (~theothorn@217.84-49-191.nextgentel.com)
[13:36:14] <lisp123w> I was thinking Common Lisp is quite unique in being heavily based on images. Takes a while to get one's head around, but very powerful in that regard. Which other languages apart from Smalltalk and other lisps are reknown for image-based development?
[13:36:33] <lisp123w> (Or CL the mainstay of dynamic, image based systems - seems like it)
[13:38:04] <jackdaniel> incremental compilation is common, image based development is slightly different
[13:38:41] <jackdaniel> i.e common lisp standard doesn't define image or save image operations (some implementations have it though)
[13:39:28] <jackdaniel> as of incremental compilation, you may "habe it" even in C if you arr stubborn - just use dlopen.
[13:39:34] <jackdaniel> have it*
[13:43:46] <lisp123w> jackdaniel: Thanks
[13:43:48] <beach> The main difference between Common Lisp compilation and compilation in most other languages is that, for most languages, the compiler starts with an empty environment.  That's why you have all those #include things in C.
[13:44:45] <beach> In Common Lisp, the current run-time environment becomes the initial environment for the compiler, and that run-time environment is of course part of the current image.
[13:45:28] <lisp123w> beach: Yes, its a very useful feature to have that. Not sure if it falls under 'image based development'
[13:45:32] <beach> I think I explained this aspect in my first presentation on how to create a Common Lisp implementation.
[13:46:28] <beach> I don't think there is a widely agreed-upon definition of that term, so it seems futile to argue about it.
[13:46:48] <lisp123w> I was reading "Bootstrap Common Lisp using Common Lisp" which was quite useful, even for non-implementors
[13:47:05] <beach> Thanks.
[13:47:42] <hayley> Smalltalk implementations also write out a "transaction log" of all forms evaluated in the system, and can also "file out" entire classes.
[13:47:42] <beach> Right then, I was referring to my series of presentations for phoe's online Lisp meeting.
[13:48:22] <lisp123w> hayley: I started doing that too
[13:48:35] <lisp123w> beach: Thanks, I will google and have a read of those too
[13:48:48] <beach> They are videos.
[13:49:18] <hayley> Of the Smalltalk "derivatives": Self has a transporter, which is more like MAKE-LOAD-FORM, but is relevant as more things are plain objects and message passing in Self than Smalltalk. But I recall that Newspeak is much more shy with image-based development.
[13:50:00] <hayley> Reminds me that Squeak has a version control system called Monticello too.
[13:51:16] <pjb> and git connections.
[13:54:17] <lisp123w> A by product of an image-based approach, is that any application one writes automatically has a fully fledged 'scripting' language for users built in
[13:54:36] <lisp123w> As long as you give them the opportunity to evaluate lisp forms
[13:56:33] <lisp123w> I think that element is underappreciated by the broader developer community
[14:02:09] <hayley> Yes, most developers are over-confident and think that they can "just" provide a perfect program with nothing to poke at. Another funny mental model is that they think the user can't program, so don't bother providing any facilities for it. Looks like a catch-22 to me.
[14:03:35] <lisp123w> Definitely. In fact I was just thinking the success of Emacs was less to do with the original program itself but more that it was written in a lisp so that users had full access to modify / extend it (which they did)
[14:06:51] <pjb> lisp123w: more or less: you still need to provide a scripting API to the application. ie. entry points simple to use.
[14:09:35] <pjb> lisp123w: for example, to make a new X11 frame and populate it with some view, and have it displayed, you need about 50 LOC (whatever the language, it's the X11 API that's like that).  vs. (make-frame-on-display ":0.0") you'd want to use in a script!
[14:16:17] *** Quits: johnjay (~pi@192.142.100.50) (Ping timeout: 250 seconds)
[14:18:39] *** Joins: s-liao (~s-liao@101.86.101.64)
[14:20:43] *** Joins: johnjay (~pi@192.142.100.50)
[14:22:26] <lisp123w> pjb: Exactly!
[14:31:01] *** Quits: pjb (~pjb@user/pjb) (Ping timeout: 250 seconds)
[14:58:17] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[15:16:35] *** Quits: theothornhill (~theothorn@217.84-49-191.nextgentel.com) (Read error: Connection reset by peer)
[15:17:21] *** Joins: theothornhill (~theothorn@217.84-49-191.nextgentel.com)
[15:27:17] *** Joins: pjb (~pjb@user/pjb)
[15:31:30] *** Joins: jacek_ (~jacek@cpc94356-ward12-2-0-cust88.10-2.cable.virginm.net)
[15:33:11] <jacek_> Can I ask you opinion about pros and cons of having a separate package for fiveam tests?
[15:34:16] <beach> Separate from what?
[15:35:46] <jacek_> i eneded uf having 2 systems in asd file
[15:36:04] <jacek_> one is for normal code and the other for tests
[15:36:29] <beach> That's unrelated to the packages used, though, right?
[15:36:49] <jacek_> the tests system has a separate package-test and normal system has package
[15:37:23] <jacek_> both systems use different pathname
[15:38:04] <jacek_> i am asking because I have started from a very minimal setup where both systems and its files were in the same folder
[15:38:52] <jacek_> and I had some surprise with the packages for both source and tests being defined in the same package file
[15:39:23] <jacek_> which mean adding fiveam as dependency of the source system as well
[15:40:41] *** Joins: notzmv (~zmv@user/notzmv)
[15:40:48] <beach> I try to structure my code around "modules", where a module is implemented as an ASDF system definition and its own package.  The symbols exported from that package are then the protocol or interface to the module.  Typically, then, the tests should use only protocol functionality, so it would then be best for the tests to have a separate package.
[15:41:42] <beach> It is less important I guess whether the system for the module and the system for tests are in separate ASDF files or in the same one.
[15:43:19] <jacek_> i do not know who to pus defsystems in separate folders unless you mean to reuse the system in separate projexts
[15:44:01] <beach> What's the problem with systems in separate "folders"?
[15:44:19] <beach> You just have to make sure ASDF can find them.
[15:44:40] <jacek_> i never thought of using then that way, you gave me a surprise, despite years of trying i am still a lisp noob
[15:46:37] <beach> I tend to put each such module in a separate directory (or "folder" I guess).  Perhaps the test system is best put in a sub-directory then.
[15:47:07] <jacek_> I use quicklisp, i only started dipping my toes in asdf
[15:47:36] <jacek_> notmally i have my projects in Programming/Lisp folder and then do
[15:47:40] <beach> That's fine.  You can pretend it's all quicklisp.
[15:47:49] <jacek_>  (push "~/Programming/Lisp/lispy-experiments/minimal-fiveam/" asdf:*central-registry*)
[15:47:53] *** Quits: theothornhill (~theothorn@217.84-49-191.nextgentel.com) (Ping timeout: 265 seconds)
[15:47:59] <beach> Put a link to your project in ~/quicklisp/local_projects
[15:48:24] <jacek_> pushing does the same, am I right?
[15:48:44] <beach> I don't remember, but I think so.
[15:49:10] *** Joins: theothornhill (~theothorn@2a02:2121:6c2:6932:20dd:6314:ca20:75b1)
[15:49:32] <beach> I know in ~/quicklisp/local_projects, you need a link only to the root directory of your project.  The project can then contain as many ASDF system definition files as you like.
[15:49:44] <jacek_> I guess for me with my experiments this i better solution so I do not pollute my system with experimental projects unless I want it
[15:50:02] <beach> I don't remember whether that's also true for the central registry.
[15:51:16] <jacek_> pushing several systems in one go to *central-registry* is not a problem. and I suspect you have given me idea how to organise my next project :-)
[15:51:56] <beach> Great!  I hope it works out.
[15:54:03] <jacek_> I was wondering about the ways of organising the project into mudules and do my first attempt at doing architecture with Lisp. You have clarified my idea and with the same stroke you have given me idea how to reuse the code for several small projects that can share some of the functionality.
[15:54:38] <jacek_> thank you very much. Now I will dissappear for a cup of coffe and some rumination about the ideas
[15:54:40] <jacek_> :-D
[15:55:15] <beach> Take care!
[16:01:14] *** Quits: scymtym (~user@ip-94-114-248-79.unity-media.net) (Read error: Connection reset by peer)
[16:01:24] *** Quits: jacek_ (~jacek@cpc94356-ward12-2-0-cust88.10-2.cable.virginm.net) (Quit: Leaving)
[16:01:51] *** Quits: Brucio-18 (~Brucio-18@ip-94-114-248-79.unity-media.net) (Remote host closed the connection)
[16:02:38] *** Joins: random-nick (~random-ni@87.116.165.220)
[16:26:13] *** Joins: yewscion (~yewscion@72-21-196-67.amazon.com)
[16:36:00] *** Parts: lisp123w (~user@80.227.170.170) (ERC (IRC client for Emacs 26.3))
[16:36:06] *** Quits: yewscion (~yewscion@72-21-196-67.amazon.com) (Quit: Connection closed)
[16:36:19] *** Joins: yewscion (~yewscion@72-21-196-67.amazon.com)
[16:50:39] *** Joins: varjag (~user@ti0040a400-5479.bb.online.no)
[16:56:14] <Xach> beach: the path is "local-projects"
[16:56:15] *** Quits: pjb (~pjb@user/pjb) (Ping timeout: 268 seconds)
[16:58:12] <beach> Oops!  Thanks!
[16:58:19] <beach> I keep making that mistake.
[16:58:57] *** Joins: Brucio-66 (~Brucio-66@ip-94-114-248-79.unity-media.net)
[17:05:43] *** Joins: karlosz (~karlosz@47.151.136.69)
[17:06:00] *** Quits: theothornhill (~theothorn@2a02:2121:6c2:6932:20dd:6314:ca20:75b1) (Read error: Connection reset by peer)
[17:06:14] *** Joins: theothornhill (~theothorn@217.84-49-191.nextgentel.com)
[17:06:40] *** Quits: s-liao (~s-liao@101.86.101.64) (Ping timeout: 256 seconds)
[17:09:58] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[17:10:04] *** Joins: s-liao (~s-liao@101.86.101.64)
[17:17:17] <Jing> I am relatively new to Emacs, so I was thinking does Emacs (or Sly for that matter) offer this feature: Suppose A.lisp and B.lisp are in the same project. I am reading A.lisp, in which the macro `define-class` is used. Now I want to jump to its definition (in B.lisp), is there a function/key-map or package for this feature?
[17:18:50] <beach> M-.
[17:23:18] <beach> Jing: Hello?
[17:24:05] <Jing> You are right, beach :)
[17:24:14] <Jing> Didn't know it's that simple...
[17:25:56] *** Quits: s-liao (~s-liao@101.86.101.64) (Ping timeout: 256 seconds)
[17:26:10] *** Joins: Devon (~devon@pool-108-28-172-103.washdc.fios.verizon.net)
[17:29:40] *** Quits: Devon (~devon@pool-108-28-172-103.washdc.fios.verizon.net) (Read error: Connection reset by peer)
[17:30:09] *** Joins: Devon (~devon@pool-108-28-172-103.washdc.fios.verizon.net)
[17:36:59] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 264 seconds)
[17:38:39] *** Joins: waleee (~waleee@h-82-196-111-63.NA.cust.bahnhof.se)
[17:45:26] *** Quits: frgo (~frgo@p548a30d7.dip0.t-ipconnect.de) ()
[17:45:39] *** Joins: s-liao (~s-liao@101.86.101.64)
[17:46:02] *** Quits: s-liao (~s-liao@101.86.101.64) (Client Quit)
[17:49:16] *** Quits: karlosz (~karlosz@47.151.136.69) (Quit: karlosz)
[17:51:41] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[17:58:18] *** Joins: frgo (~frgo@p548a30d7.dip0.t-ipconnect.de)
[17:59:07] *** Joins: shka (~herr@83.175.151.96.piasta.pl)
[18:05:32] <phantomics> Question about ASDF: is there any way to require a system if and only if certain requirements are met? Particularly, there's a package I don't want to require if the system is being compiled with ABCL and Maven isn't present because it uses CFFI which requires Maven to load, else an error occurs
[18:11:05] <beach> Do you mean a "system" you don't want to require?  As in the :DEPENDS-ON list?
[18:12:28] <beach> I guess I don't know what it meant to "require a package".
[18:13:22] <phantomics> Yes, as in :depends-on
[18:14:34] <beach> Those are "systems".  Can this be determined at read time?  If so, then you can always do arbitrary computations in the form of #.(if ... :that-system ...)
[18:15:30] <beach> There is also a way in ASDF to use the *FEATURES* I think, but I don't remember how.
[18:17:27] <phantomics> Ok, I suppose it can be determined at read time, I need to run a command via (uiop:run-program) but no reason it can't be done then
[18:17:47] <phantomics> Thanks
[18:18:28] <beach> Sure.
[18:18:32] *** Quits: Colt (~Colt@user/colt) (Quit: Leaving)
[18:20:33] *** Joins: ahorse (~horse@corgi.boiled.dog)
[18:26:04] <random-nick> the ASDF manual recommends against writing .asd files which produce different system definitions under different implementations via reader conditionals
[18:26:56] <random-nick> for testing features it has the :feature specifier, but I don't remember reading about any that let you execute code to test
[18:27:24] <beach> Hmm.  I suppose that restriction includes the use of #. to determine a system to depend on.
[18:28:52] <random-nick> from the ASDF manual: This causes problems if, for example, one wished to design an archive-op that would create an archive file containing all the sources, since for example the file cffi-sbcl.lisp above would be invisible when running the archive-op on any implementation other than SBCL.
[18:29:26] <etimmons> When .asd files are loaded, they are LOADed, for better or worse
[18:29:26] <random-nick> I'm guessing it's probably fine for most usecases to use reader macros like that
[18:29:54] <etimmons> So you can have a form in there that runs your test and pushes the result to features
[18:46:06] *** Quits: peterhil (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi) (Remote host closed the connection)
[18:46:21] *** Joins: peterhil (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi)
[18:48:06] *** Joins: tyson2 (~user@bras-base-toroon0628w-grc-60-64-228-236-58.dsl.bell.ca)
[18:53:03] <phantomics> I can see the rationale, the issue is that the system will fail to compile under ABCL unless Maven is installed because it uses CFFI
[18:54:31] <phantomics> There's an alternative method for the small part of the code that uses CFFI, so this reader macro method could work in that case. What it means is that the theoretical archive-op would not include the CFFI-dependent system if the archive was done using ABCL without Maven
[19:04:00] *** Joins: pjb (~pjb@user/pjb)
[19:16:10] *** Joins: Guest74 (~Guest74@modemcable110.164-177-173.mc.videotron.ca)
[19:19:39] *** Joins: VincentVega (~user@212.241.24.160)
[19:23:04] *** Joins: beach` (~user@2a01:cb19:150:3400:185d:876f:56db:5be9)
[19:24:52] *** Quits: beach (~user@2a01:cb19:150:3400:19c5:3107:1bdf:7573) (Ping timeout: 268 seconds)
[19:27:20] *** beach` is now known as beach
[19:27:35] *** ChanServ sets mode: +o beach
[19:29:06] *** beach sets mode: -o beach
[19:29:32] <etimmons> phantomics: the hypothetical archive-op may not always need to see all possible dependencies, but a dependency extractor would (something I'm passionate about)
[19:31:14] <etimmons> You should be able to put something like (when (and abcl-p maven-installed-p) (pushnew :my-system-maven-installed features)) before your system definition (replacing the tests with something real)
[19:31:42] *** Quits: taiju (~taiju@M014013236064.v4.enabler.ne.jp) (Ping timeout: 260 seconds)
[19:32:08] *** Joins: taiju (~taiju@240b:253:ec40:2400:20e3:d321:f9f8:1864)
[19:32:43] <etimmons> And then in your system definition's depends-on list, (:feature (:and :abcl :my-system-maven-installed) "cffi")
[19:33:08] <etimmons> And an appropriate fallback for abcl without maven installed
[19:34:20] *** Joins: Lycurgus (~juan@98.4.112.204)
[19:34:49] *** Joins: engblom (~foo@user/engblom)
[19:34:59] <etimmons> Note you can also use :if-feature on component definitions to conditionally load modules or files as well
[19:35:54] *** Quits: peterhil (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi) (Ping timeout: 260 seconds)
[19:39:21] *** Joins: peterhil (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi)
[19:43:35] <phantomics> Ok, I'll see about that
[19:48:08] <engblom> How would you loop over a plist so you with each iteration get both the key and the value?
[19:48:50] <pjb> (loop for (key value) on plist by 'cddr)
[19:49:23] <engblom> pjb: Thanks!
[19:54:54] *** Quits: tyson2 (~user@bras-base-toroon0628w-grc-60-64-228-236-58.dsl.bell.ca) (Remote host closed the connection)
[19:58:59] <Nilby> phantomics: A pattern I use in .asd's is :defsystem-depends-on (:config) … :depends-on ((:feature :feature-added-in-config) …    I'm not sure if it's the best idea, but it works
[20:00:19] <Nilby> I think the danger with :defsystem-depends-on is if you make the rest of the system definition unreadable without it.
[20:02:57] *** Parts: pranavats (3fba1d1b34@jabberfr.org) ()
[20:04:02] <phantomics> Thanks Nilby, have any repos online with examples of this?
[20:13:50] *** Quits: peterhil (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi) (Quit: Leaving)
[20:13:55] *** Joins: peterhil_ (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi)
[20:17:36] *** Joins: makunbound (~user@2620:cc:8000:1c80:a11:96ff:fef3:2834)
[20:18:01] *** Parts: makunbound (~user@2620:cc:8000:1c80:a11:96ff:fef3:2834) ()
[20:24:25] *** Joins: dra (~dra@2a04:4540:6413:d500:cc20:68a7:2f44:5329)
[20:30:09] *** Quits: victor_ (sid208353@tinside.irccloud.com) (Remote host closed the connection)
[20:30:10] *** Quits: splittist (sid17737@tinside.irccloud.com) (Remote host closed the connection)
[20:30:10] *** Quits: hubvu (sid495858@user/hubvu) (Remote host closed the connection)
[20:34:17] *** Quits: Lycurgus (~juan@98.4.112.204) (Quit: Exeunt)
[20:37:25] *** Quits: drmeister (sid45147@ilkley.irccloud.com) (Remote host closed the connection)
[20:37:25] *** Quits: jcowan (sid325434@ilkley.irccloud.com) (Remote host closed the connection)
[20:37:25] *** Quits: ullbeking (sid5364@user/ullbeking) (Remote host closed the connection)
[20:37:58] *** Joins: cosimone (~user@2001:b07:ae5:db26:a7aa:8027:6b4e:2fb3)
[20:38:37] *** Quits: pjb (~pjb@user/pjb) (Ping timeout: 256 seconds)
[20:41:44] <engblom> What does this mean:   Lock on package COMMON-LISP violated when
[20:41:45] <engblom>   globally declaring the FTYPE of TYPE while in package GPON-LIB.
[20:41:51] *** Quits: alanz (sid110616@uxbridge.irccloud.com) (Remote host closed the connection)
[20:42:04] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[20:42:11] <beach> You seem to have a function named TYPE in that package.
[20:42:31] <beach> And that's a standard Common Lisp symbol, so it is not allowed.
[20:43:11] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 268 seconds)
[20:43:24] *** Lord_of_Life_ is now known as Lord_of_Life
[20:46:00] *** Joins: scymtym (~user@ip-94-114-248-79.unity-media.net)
[20:46:00] <engblom> beach: Thanks, I got it figured out now. In this case it was not very obvious. I tried to do some classes and one of them had a "type" slot.
[20:46:19] <beach> That would do it.
[20:46:37] <beach> Maybe not for the slot name, but for the accessor.
[20:47:46] <engblom> Yes, the accessor had that name too
[20:48:23] *** Quits: jsatk (sid304796@helmsley.irccloud.com) (Ping timeout: 246 seconds)
[20:48:24] *** Quits: travv0 (sid293381@user/travv0) (Ping timeout: 260 seconds)
[20:48:52] *** Quits: stylewarning (sid241636@helmsley.irccloud.com) (Ping timeout: 260 seconds)
[20:49:10] *** Quits: sgithens (sid10659@helmsley.irccloud.com) (Ping timeout: 260 seconds)
[20:49:58] *** Quits: conjunctive (sid433686@helmsley.irccloud.com) (Ping timeout: 250 seconds)
[20:49:59] *** Quits: griffinmb (sid410590@helmsley.irccloud.com) (Ping timeout: 268 seconds)
[20:50:16] *** Quits: pl (sid98063@helmsley.irccloud.com) (Ping timeout: 260 seconds)
[20:52:29] <beach> engblom: You can always SHADOW that name.
[20:52:36] *** Quits: iisi (sid19824@hampstead.irccloud.com) (Ping timeout: 260 seconds)
[20:52:56] <beach> I do that all the time when the most "natural" name that I want happens to be a standard Common Lisp symbol.
[20:52:56] *** Quits: jmercouris (sid438340@hampstead.irccloud.com) (Ping timeout: 246 seconds)
[20:53:00] *** Quits: gendl (sid100083@hampstead.irccloud.com) (Ping timeout: 250 seconds)
[20:53:22] *** Quits: d_run (sid83858@hampstead.irccloud.com) (Ping timeout: 260 seconds)
[20:53:25] *** Quits: dbotton (sid492350@lymington.irccloud.com) (Ping timeout: 250 seconds)
[20:53:25] *** Quits: IUSR (sid348938@hampstead.irccloud.com) (Ping timeout: 250 seconds)
[20:54:16] <engblom> beach: How do I do that?
[20:57:15] <varjag> clhs shadow
[20:57:15] <specbot> http://www.lispworks.com/reference/HyperSpec/Body/f_shadow.htm
[20:58:25] *** Joins: pranavats (3fba1d1b34@jabberfr.org)
[21:06:17] <engblom> Can I from (defpackage ...) export some constants, or is it possible to only export functions/macros?
[21:09:06] <random-nick> :EXPORT exports symbols, not functions
[21:09:46] <random-nick> so yes, you could export a symbol naming a constant or special variable
[21:09:56] <random-nick> or even a symbol not naming anything
[21:13:45] <engblom> Yes, it iseems to work. Thanks!
[21:25:16] *** Joins: pjb (~pjb@user/pjb)
[21:30:21] *** Quits: zephyr (~alandiper@ec2-34-230-252-114.compute-1.amazonaws.com) (Quit: The Lounge - https://thelounge.chat)
[21:34:56] *** Joins: tyson2 (~user@cpe00fc8d34ff03-cm00fc8d34ff00.sdns.net.rogers.com)
[21:40:03] <engblom> Assuming (setf test-plist '(1 '(:a 1 :b 2) 2 '(:a 3 :b 4))), why is not (getf (getf test-plist 1) :a) working?
[21:40:16] *** Quits: tyson2 (~user@cpe00fc8d34ff03-cm00fc8d34ff00.sdns.net.rogers.com) (Quit: ERC (IRC client for Emacs 27.2))
[21:44:16] <engblom> Nm, I noticed I had added ' to the inner plist, which of course should not be there
[21:46:54] <pjb> engblom: plists are restricted to EQ; since (eq 1 1) can return nil, it cannot work with numbers as keys.
[21:48:06] *** Parts: pranavats (3fba1d1b34@jabberfr.org) (Disconnected: Replaced by new connection)
[21:48:09] <pjb> engblom: Otherwise: (let ((test-plist '(one '(:a 1 :b 2) two '(:a 3 :b 4))))   (getf (second (getf test-plist 'one)) :a)) #| --> 1 |#
[21:48:39] <pjb> engblom: if you wan to use numbers and other strange keys, then use an alist.
[21:48:53] *** Joins: pranavats (3fba1d1b34@jabberfr.org)
[21:49:45] <pjb> (let ((test-alist '((1 . '(:a 1 :b 2)) (2 . '(:a 3 :b 4)))))   (getf (second (cdr (assoc 1 test-alist :test #'=))) :a)) #| --> 1 |#
[21:51:28] <engblom> I would actually want to create something like (get-nested-property plist key1, key2, key3 ...) where getf gets nested as many times as there are keys given. How should I do that?
[21:52:19] <engblom> With only two keys given it would be (getf (getf plist key1) key2)
[21:55:03] <engblom> (without the ',' I wrote by mistake)
[21:56:04] <engblom> I guess a macro is needed?
[21:57:44] <pjb> No, not a macro.
[22:00:30] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 260 seconds)
[22:00:43] <pjb> engblom: https://termbin.com/1fcy
[22:01:02] <phantomics> I have one more question about this ABCL thing. I have the ASDF system and package definition working properly, only loading the package if ABCL is set up correctly
[22:01:19] <phantomics> However, in the actual code, I'm having a problem. The code looks like this: #.(if (abcl-test) '(cl-cpus:get-number-of-processors) '(do-something-else))
[22:01:44] <pjb> Why not #+abcl (cl-cpus:get-number-of-processors) #-abcl (do-something-else) ?
[22:02:34] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[22:02:38] <phantomics> And I get this message: The package "CL-CPUS" can't be found. Despite the fact that that clause will only be part of the code if the (abcl-test) passes. It's the same qualifier I use to decide whether to :depend-on the system and require it for the package
[22:03:23] <phantomics> pjb: I'm doing more than testing for the presence of ABCL. The alternative path is only followed if 1) the implementation is ABCL, and 2) the Java utility Maven is not available
[22:03:51] <pjb> phantomics: #. is read-time evaluation. So the package needs to be loaded at read-time…
[22:04:38] <pjb> so cl-cpus should be a dependency to your system, so that it'd be loaded before your system is compiled/loaded.
[22:05:19] <phantomics> Ok, problem is that if Maven is not available loading cl-cpus causes an error, because it depends on CFFI which requires Maven under SBCL. A catch-22
[22:06:00] <pjb> Then use 1 or 2 instead…  Just until you can load it.
[22:06:26] *** Quits: z3t0 (~z3t0@146.71.14.98) (Read error: Connection reset by peer)
[22:06:38] <phantomics> Use 1 or 2? As in 1 or 2 cpus?
[22:06:44] *** Joins: z3t0 (~z3t0@146.71.14.98)
[22:07:03] <pjb> Yes.
[22:07:33] <pjb> 1 is the conservative value, but even on a mono-processor, 2 shouldn't break anything.
[22:08:25] *** Joins: rogersm (~rogersm@90.166.177.48)
[22:08:26] <phantomics> I can do that, problem is that the method used to find the number of CPUs should either use cl-cpus or not whether Maven is present. I can check whether Maven is present at read time, but I now understand I can't use #. to build code from symbols that don't exist under the given conditions
[22:11:16] <phantomics> Maybe I could do a minimal (defpackage #:cl-cpus) before the file gets read including a function called get-number-of-processors? Then that package definition would be overridden by the real cl-cpus if it's loaded but the #. should still work
[22:12:12] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[22:12:55] <pjb> phantomics: sysctl hw.physicalcpu_max # works on unix systems (Darwin, Linux).
[22:13:10] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 260 seconds)
[22:13:45] <phantomics> Yeah, I have a backup function with a set of commands to fetch the CPU count in different OSes, I could just ditch cl-cpus, it seems robust though
[22:14:28] *** Joins: ullbeking (sid5364@user/ullbeking)
[22:15:00] *** Lord_of_Life_ is now known as Lord_of_Life
[22:15:34] <engblom> pjb: Thanks!
[22:15:51] <pjb> (defun phys-procs () (let ((output (uiop:run-program "sysctl hw.physicalcpu_max" :output 'string))) (read-from-string (subseq output (1+ (position #\: output))))))
[22:16:33] <pjb> Well, I don't know about robust, I only know that cl-cpus has bugs that makes it non-functional on my systems…
[22:17:27] <pjb> https://github.com/muyinliu/cl-cpus/issues/4
[22:18:45] <engblom> pjb: You created apparently a recusive function called rgetf. I will have to try to create a rsetf, as I will need it too.
[22:19:24] *** Quits: ullbeking (sid5364@user/ullbeking) (Ping timeout: 260 seconds)
[22:20:21] <phantomics> cl-cpus is out
[22:21:05] *** Joins: alanz (sid110616@id-110616.uxbridge.irccloud.com)
[22:24:09] *** Joins: ullbeking_ (sid5364@id-5364.ilkley.irccloud.com)
[22:25:05] *** Joins: drmeister (sid45147@id-45147.ilkley.irccloud.com)
[22:26:58] *** Joins: sgithens (sid10659@id-10659.helmsley.irccloud.com)
[22:27:27] *** Joins: jcowan (sid325434@id-325434.ilkley.irccloud.com)
[22:27:57] *** Joins: pl (sid98063@id-98063.helmsley.irccloud.com)
[22:27:57] *** ChanServ sets mode: +o pl
[22:29:19] *** Joins: stylewarning (sid241636@id-241636.helmsley.irccloud.com)
[22:30:18] *** Joins: travv0 (sid293381@user/travv0)
[22:30:42] *** Joins: jsatk (sid304796@id-304796.helmsley.irccloud.com)
[22:32:01] <pjb> engblom: indeed.
[22:32:08] *** Joins: griffinmb (sid410590@id-410590.helmsley.irccloud.com)
[22:32:23] *** Joins: conjunctive (sid433686@id-433686.helmsley.irccloud.com)
[22:33:40] *** Joins: tophullyte (tophullyte@gateway/vpn/protonvpn/tophullyte)
[22:34:07] <pjb> engblom: there's the question with a (setf rgetf) or rsetf function, what to do when the plist is nil.
[22:34:17] *** Joins: iisi (sid19824@id-19824.hampstead.irccloud.com)
[22:34:37] <pjb> engblom: (let ((plist '())) (rsetf plist :a 42) plist) -> ???  with a function you cannot do anything, and plist will stay NIL.
[22:34:59] *** Joins: d_run (sid83858@id-83858.hampstead.irccloud.com)
[22:35:00] <pjb> engblom: for this case, you need a defsetf or define-setf-expander
[22:35:19] *** Joins: gendl (sid100083@id-100083.hampstead.irccloud.com)
[22:35:24] <pjb> engblom: for the case where the plist is not NIL, you can always mutate the cons cells.
[22:35:35] <engblom> pjb: It would be prefarable if the program would end up in debugger if that happens, as it is something unallowed.
[22:35:53] <engblom> So simply crashing
[22:36:46] *** Joins: splittist (sid17737@id-17737.tinside.irccloud.com)
[22:37:27] <Guest74> i'm a fan of crashing
[22:37:45] <lagash> Guest74: let me guess.. you use Erlang or Elixir? :P
[22:38:01] <Guest74> no, only lisp
[22:39:09] *** Joins: jmercouris (sid438340@id-438340.hampstead.irccloud.com)
[22:39:59] *** Joins: victor_ (sid208353@id-208353.tinside.irccloud.com)
[22:42:52] *** Joins: IUSR (sid348938@id-348938.hampstead.irccloud.com)
[22:45:20] *** Joins: hubvu (sid495858@user/hubvu)
[22:46:57] *** Joins: dbotton (sid492350@id-492350.lymington.irccloud.com)
[22:48:14] <engblom> pjb: Thinking about the problem for some time, I think it would need to create the lists so there is a way to add elements too. thus (let ((plist '())) (rsetf plist :a 42) plist) would give (:a 42)
[22:49:21] <engblom> pjb: (let ((plist '())) (rsetf plist :a :b 42) plist) would give (:a (:b 42))
[22:59:43] *** Quits: Devon (~devon@pool-108-28-172-103.washdc.fios.verizon.net) (Ping timeout: 256 seconds)
[23:04:51] <pjb> engblom: think more.
[23:06:14] <pjb> There are no lists in lisp.
[23:06:25] <pjb> Only the symbol NIL, which is immutable, and cons cells.
[23:06:54] <pjb> (rsetf plist :a :b 42) is the same thing as (rsetf nil :a :b 42)  there's no way for it to mutate plist.
[23:08:43] <pjb> to update a place like plist, you need to define a setf'er with defsetf or with define-setf-expander.  In simple case, you can also use a macro.
[23:10:49] *** Quits: theothornhill (~theothorn@217.84-49-191.nextgentel.com) (Quit: Quit)
[23:12:23] *** Quits: mrcom (~mrcom@2600:1700:c630:a570:65ec:6999:ef2f:76f2) (Read error: Connection reset by peer)
[23:13:53] *** Quits: varjag (~user@ti0040a400-5479.bb.online.no) (Ping timeout: 256 seconds)
[23:18:23] *** Quits: yewscion (~yewscion@72-21-196-67.amazon.com) (Ping timeout: 250 seconds)
[23:18:43] *** Quits: Inline (~Inline@2a02:908:1252:7a80:ff0f:1149:92da:8af0) (Quit: Leaving)
[23:26:55] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 256 seconds)
[23:33:39] *** Joins: karlosz (~karlosz@47.151.136.69)
[23:34:42] *** Quits: rogersm (~rogersm@90.166.177.48) (Quit: Leaving...)
[23:35:24] *** Joins: Inline (~Inline@2a02:908:1252:7a80:c1d7:63de:66b3:4892)
[23:36:20] *** Quits: pjb (~pjb@user/pjb) (Killed (lithium.libera.chat (Nickname regained by services)))
[23:36:26] *** Joins: pjb (~pjb@user/pjb)
[23:43:46] *** Quits: cage (~cage@dynamic-adsl-94-34-16-50.clienti.tiscali.it) (Quit: rcirc on GNU Emacs 27.1)
[23:44:32] *** Quits: paul0 (~paul0@user/paul0) (Remote host closed the connection)
[23:44:35] *** Joins: theothornhill (~user@217.84-49-191.nextgentel.com)
[23:44:44] *** Joins: paul0 (~paul0@user/paul0)
[23:54:48] *** Joins: aeth_ (~aeth@user/aeth)
[23:54:59] *** Quits: pjb (~pjb@user/pjb) (Ping timeout: 268 seconds)
[23:56:11] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 264 seconds)
[23:56:15] *** Joins: yewscion (~yewscion@72-21-196-67.amazon.com)
[23:59:29] *** aeth_ is now known as aeth
[23:59:41] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
