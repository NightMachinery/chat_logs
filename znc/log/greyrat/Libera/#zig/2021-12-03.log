[00:01:17] *** Quits: marler8997 (~marler899@24-116-126-185.cpe.sparklight.net) (Ping timeout: 252 seconds)
[00:06:24] *** Joins: marler8997 (~marler899@24-116-126-185.cpe.sparklight.net)
[00:09:43] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 252 seconds)
[00:10:49] *** Quits: marler8997 (~marler899@24-116-126-185.cpe.sparklight.net) (Ping timeout: 252 seconds)
[00:11:02] *** Quits: livoreno (~livoreno@user/notzmv) (Read error: Connection reset by peer)
[00:14:38] *** Quits: terminalpusher (~terminalp@2a01:586:a4a5:1:b882:42b4:f44e:9996) (Remote host closed the connection)
[00:45:37] *** Joins: pkap (~pkap@185.213.155.160)
[01:02:24] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[01:03:30] *** Quits: tane (~tane@user/tane) (Quit: Leaving)
[01:04:02] <Franciman> I feel dumb to ask this
[01:04:15] <Franciman> but does the stack have particular properties
[01:04:20] <Franciman> as opposed to the heap memory
[01:04:26] <Franciman> or is it just a piece of memory like the heap
[01:04:31] <Franciman> just handled by the language runtime?
[01:05:04] <andrewrk> it's virtual memory, the same as the heap. but typically there is a special register called the "stack pointer" that the language manages for you, which points at the top of the stack
[01:05:45] <Franciman> thanks andrew
[01:06:04] <devast8a> Also generally the allocation for the stack has a special flag in the OS so it knows if you go beyond the allocation that it should automatically extend it for you.
[01:06:55] <devast8a> You can replicate it with `mmap` and the `MAP_GROWSDOWN` flag.
[01:08:12] <andrewrk> devast8a, what OS's do that? in my experience on linux, you just get segfault if you hit the guard page
[01:09:18] <andrewrk> huh the man pages for MAP_GROWSDOWN agrees with you though
[01:09:22] <andrewrk> I should experiment with this
[01:09:48] <devast8a> You might be right though, it's totally possible that people decided this was a terrible idea with large memory spaces and don't do it anymore.
[01:10:21] <ifreund> I'm pretty sure you just segfault with a stack overflow on linux if you go past the 8 MiB or whatever it is
[01:10:35] <ifreund> if it grew infinitely, runaway recursion would OOM you commonly
[01:11:14] <devast8a> Does the mapping reserve the whole 8 MiB region?
[01:13:52] <devast8a> I was under the impression that `MAP_GROWSDOWN` was still in use with a guard page wherever you want it to end. Thinking about it now though, there's no way it works this way. You might as well just reserve the whole 8 MiB region.
[01:14:26] <Franciman> basically I wanted to use a stack for my language
[01:14:29] <Franciman> to get things going faster
[01:14:38] <Franciman> but I wanted it to be as fast as a real stack
[01:15:04] <andrewrk> I think the simple answer to your question is "no there is no difference"
[01:15:22] <andrewrk> if you need a stack with a runtime known capacity, ArrayList is an excellent tool for the job
[01:15:22] <ifreund> I'm pretty sure the main stack for processes and threads doesn't come from mmap and doesn't use MAP_GROWSDOWN
[01:15:24] <Franciman> so I just allocate a huge array of u8
[01:15:34] <Franciman> and define my allocator
[01:15:48] <Franciman> yeah ok
[01:15:57] <Franciman> tomorrow will be dedicated to this experiment, thanks ^^
[01:16:04] <Franciman> well now the second problem is cache
[01:16:07] <Franciman> lol
[01:16:12] <Franciman> I am enemy with my cache
[01:20:37] *** Joins: livoreno (~livoreno@user/notzmv)
[01:22:31] *** Quits: xackus (~xackus@9-225.w.knc.pl) (Ping timeout: 256 seconds)
[01:22:41] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 252 seconds)
[01:24:04] <Franciman> second step is having a GC
[01:24:39] <flux_control> Franciman: FWIW, I speak several of the languages you mentioned. 1) They are already required to use English because the keywords of the programming languages (if, for, while, ...) are in English. 2) They aren't required to use English for identifiers, but ascii (and therefore transliterated versions of words from their language are fine).
[01:25:02] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[01:25:06] <Franciman> ty
[01:25:11] <Franciman> curious to know what languages you speak
[01:25:13] <Franciman> :P
[01:26:47] <Franciman> i will probably create my standard coding which forces people to only use japanese
[01:26:49] <Franciman> :P
[01:26:53] <Franciman> and define the keywords in japanese
[01:32:13] <flux_control> Franciman: Japanese is one of them. ;)
[01:33:57] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 268 seconds)
[01:36:25] <Franciman> i need to get an high quality implementation
[01:36:50] <Franciman> this is too important
[01:37:24] <Arnavion> There was a lisp with Japanese keywords on the orange website a few months ago
[01:38:42] <Arnavion> (   https://news.ycombinator.com/item?id=28624483   )
[01:42:05] *** Joins: jokoon (~eio@2a01:e0a:542:e160:e955:5046:6194:4a14)
[01:45:55] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[01:47:14] *** Joins: paulgrmn__ (~paulgrmn@user/paulgrmn)
[01:49:19] *** Quits: ShockTohp (~kevin@155.138.224.160) (Read error: Connection reset by peer)
[02:08:48] *** Joins: marler8997 (~marler899@24-116-126-185.cpe.sparklight.net)
[02:20:15] *** Quits: paulgrmn__ (~paulgrmn@user/paulgrmn) (Ping timeout: 252 seconds)
[02:25:27] *** Quits: pkap (~pkap@185.213.155.160) (Quit: Client closed)
[02:28:01] *** Quits: orhun (~orhun@archlinux/trusteduser/orhun) (Ping timeout: 250 seconds)
[02:29:58] *** Joins: orhun (~orhun@archlinux/trusteduser/orhun)
[02:30:09] *** Quits: frmdstryr (~jrm@172.58.203.1) (Ping timeout: 252 seconds)
[02:31:26] *** Quits: tgschultz (UserNick@047-034-058-084.res.spectrum.com) (Quit: Going offline, see ya! (www.adiirc.com))
[02:31:55] *** Joins: tgschultz (UserNick@047-034-058-084.res.spectrum.com)
[02:34:53] *** Quits: jokoon (~eio@2a01:e0a:542:e160:e955:5046:6194:4a14) (Quit: Leaving)
[02:34:57] *** Joins: fengshaun (~fengshaun@S010680615f0c2c0a.cg.shawcable.net)
[02:35:37] *** Quits: Biolunar (~bio@2a02:908:4b24:5000:ba27:ebff:fee0:75a) (Ping timeout: 268 seconds)
[02:35:43] <fengshaun> I'm using zls with emacs+lsp, every time I save the document lsp disconnects. I don't have that issue with any other language server. *lsp-log* doesn't show anything. How can I debug what's going on with zls
[02:37:18] *** Joins: Biolunar (~bio@2a02:908:4b24:5000:ba27:ebff:fee0:75a)
[02:56:56] *** Joins: noeontheend (~noeonthee@12.205.205.130)
[03:03:20] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 252 seconds)
[03:04:58] *** Joins: frmdstryr (~jrm@172.58.203.1)
[03:05:33] *** Joins: waleee (~waleee@h-82-196-111-63.NA.cust.bahnhof.se)
[03:20:45] *** Quits: noeontheend (~noeonthee@12.205.205.130) (Ping timeout: 252 seconds)
[03:32:10] *** Quits: tgschultz (UserNick@047-034-058-084.res.spectrum.com) (Quit: Going offline, see ya! (www.adiirc.com))
[03:32:37] *** Joins: tgschultz (UserNick@047-034-058-084.res.spectrum.com)
[03:36:09] *** freshcoffee1 is now known as freshcoffee
[03:46:41] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.3)
[04:01:59] *** Quits: livoreno (~livoreno@user/notzmv) (Quit: Quit)
[04:02:16] *** Joins: livoreno (~livoreno@user/notzmv)
[04:25:28] <companion_cube> hey andrewrk, are you familiar with Apache Arrow? it's strikingly similar to what you describe in your recent talk
[04:31:28] *** Joins: Tekk_ (~tekk@cpe-76-182-45-53.nc.res.rr.com)
[04:34:05] *** Quits: Tekk (~tekk@static-198-54-128-101.cust.tzulo.com) (Ping timeout: 252 seconds)
[04:49:16] *** Quits: notzmv (~zmv@user/notzmv) (Read error: Connection reset by peer)
[04:53:36] *** Joins: notzmv (~zmv@user/notzmv)
[04:55:21] *** Quits: frmdstryr (~jrm@172.58.203.1) (Ping timeout: 252 seconds)
[05:14:51] *** Quits: earnest (~earnest@user/earnestly) (Ping timeout: 256 seconds)
[05:17:57] *** Joins: earnest (~earnest@user/earnestly)
[05:40:21] *** Quits: neurocyte0132889 (~neurocyte@user/neurocyte) (Ping timeout: 256 seconds)
[05:41:52] *** Joins: Tekk (~tekk@94.198.42.169)
[05:43:01] *** Quits: Tekk_ (~tekk@cpe-76-182-45-53.nc.res.rr.com) (Ping timeout: 252 seconds)
[05:51:00] <andrewrk> never heard of it
[05:52:00] <andrewrk> ifreund, re: main stack for processes and threads: https://github.com/ziglang/zig/blob/cbd653e1d678f0560f5ed3e93a41caa512d93443/lib/std/Thread.zig#L886
[05:52:23] <andrewrk> no MAP_GROWS_DOWN here but it is indeed mmap when creating a thread for the main stack
[05:52:49] <andrewrk> pretty sure it's what pthread_create does too. easy to check with strace
[05:53:29] *** Quits: nyah (~nyah@94.6.71.219) (Remote host closed the connection)
[05:53:49] *** Joins: neurocyte0132889 (~neurocyte@user/neurocyte)
[06:04:17] *** Quits: breavyn (~breavyn@user/breavyn) (Ping timeout: 252 seconds)
[06:04:50] *** Joins: breavyn (~breavyn@user/breavyn)
[06:15:42] *** Quits: livoreno (~livoreno@user/notzmv) (Read error: Connection reset by peer)
[06:15:58] *** Joins: livoreno (~livoreno@user/notzmv)
[06:16:14] *** Quits: livoreno (~livoreno@user/notzmv) (Read error: Connection reset by peer)
[06:16:34] *** Joins: Kiori (~Kiori@179.235.95.59)
[06:18:30] *** Joins: rgrinberg (~textual@187.251.13.114)
[06:19:31] *** Quits: Kiori (~Kiori@179.235.95.59) (Read error: Connection reset by peer)
[06:20:04] *** Joins: Kiori (~Kiori@179.235.95.59)
[06:22:52] *** Joins: livoreno (~livoreno@user/notzmv)
[06:36:31] *** Quits: paulgrmn_ (~paulgrmn@user/paulgrmn) (Ping timeout: 256 seconds)
[06:37:14] <companion_cube> https://arrow.apache.org/docs/format/Columnar.html it's basically aâ€¦ idk, format for data oriented in memory storage
[06:37:23] <companion_cube> found it via https://github.com/pola-rs/polars#blazingly-fast-dataframes-in-rust--python (pandas but in rust)
[06:37:54] <companion_cube> the thing has a lot of ways of arranging data in columnar format (struct of arrays) 
[06:37:58] <companion_cube> just a cool reference
[06:43:25] *** Quits: Kiori (~Kiori@179.235.95.59) (Quit: Leaving)
[06:45:18] *** Quits: rgrinberg (~textual@187.251.13.114) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[06:45:36] *** Quits: waleee (~waleee@h-82-196-111-63.NA.cust.bahnhof.se) (Quit: WeeChat 3.3)
[06:47:55] *** Quits: outfox (~outfox@user/outfox) (Ping timeout: 252 seconds)
[06:49:25] *** Joins: outfox (~outfox@213.144.147.16)
[06:49:25] *** Quits: outfox (~outfox@213.144.147.16) (Changing host)
[06:49:25] *** Joins: outfox (~outfox@user/outfox)
[06:52:24] *** Joins: rgrinberg (~textual@187.251.13.114)
[06:57:05] *** Quits: earnest (~earnest@user/earnestly) (Ping timeout: 252 seconds)
[07:06:19] *** Quits: rgrinberg (~textual@187.251.13.114) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[07:07:02] *** Joins: rgrinberg (~textual@187.251.13.114)
[07:07:46] *** Quits: rgrinberg (~textual@187.251.13.114) (Client Quit)
[07:09:18] *** Joins: rgrinberg (~textual@187.251.13.114)
[07:10:52] *** Quits: rgrinberg (~textual@187.251.13.114) (Client Quit)
[07:21:44] *** Quits: arkurious (~arkurious@user/arkurious) (Quit: Leaving)
[07:36:02] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.3)
[07:36:31] *** Joins: supakeen (~user@python/site-packages/supakeen)
[07:38:27] *** Joins: rgrinberg (~textual@187.251.13.114)
[07:43:35] *** Quits: rgrinberg (~textual@187.251.13.114) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[07:45:54] *** Joins: binarycat (~binarycat@35.24.192.117)
[07:58:53] *** Quits: tgschultz (UserNick@047-034-058-084.res.spectrum.com) (Quit: Going offline, see ya! (www.adiirc.com))
[07:59:23] *** Joins: tgschultz (UserNick@047-034-058-084.res.spectrum.com)
[08:04:52] *** Joins: noeontheend (~noeonthee@207.237.194.194)
[08:28:45] *** Joins: jfilling (~jfilling@136.36.67.80)
[08:55:00] *** Quits: livoreno (~livoreno@user/notzmv) (Remote host closed the connection)
[08:59:32] *** Quits: tgschultz (UserNick@047-034-058-084.res.spectrum.com) (Quit: Going offline, see ya! (www.adiirc.com))
[09:00:22] *** Joins: tgschultz (UserNick@047-034-058-084.res.spectrum.com)
[09:01:58] *** Joins: _wilsonk (~wilsonk@S0106001b11030a94.cg.shawcable.net)
[09:04:41] *** Quits: wilsonk (~wilsonk@S0106001b11030a94.cg.shawcable.net) (Ping timeout: 252 seconds)
[09:07:26] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 252 seconds)
[09:08:38] *** Joins: livoreno (~livoreno@user/notzmv)
[09:18:59] *** Quits: noeontheend (~noeonthee@207.237.194.194) (Ping timeout: 252 seconds)
[10:00:37] *** Quits: tgschultz (UserNick@047-034-058-084.res.spectrum.com) (Quit: Going offline, see ya! (www.adiirc.com))
[10:01:23] *** Joins: tgschultz (UserNick@047-034-058-084.res.spectrum.com)
[10:07:34] *** Joins: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl)
[10:18:47] *** Joins: rgrinberg (~textual@187.251.13.114)
[10:33:58] *** Quits: rgrinberg (~textual@187.251.13.114) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[10:59:05] *** Joins: rgrinberg (~textual@187.251.13.114)
[11:07:38] *** Joins: Maa83 (~Maa83@ip5f5aca91.dynamic.kabel-deutschland.de)
[11:09:11] *** Quits: rgrinberg (~textual@187.251.13.114) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[11:13:00] *** Quits: Maa83 (~Maa83@ip5f5aca91.dynamic.kabel-deutschland.de) (Ping timeout: 256 seconds)
[11:13:31] *** Joins: chgr (~ek@nat-91-137-30-14.net.encoline.de)
[11:16:15] <chgr> Hi there, I just looked into recursion and there is a builtin (@call) available to modify the compiler behaviour (`always_tail`, `never_tail`, ...). Is the compiler (current git master) able to automatically determine that a function is tail recursive or do I have to use the @call builtin?
[11:16:56] *** Joins: notzmv (~zmv@user/notzmv)
[11:17:56] *** Joins: zakora (~zakora@dzd6d6yg28-mdj8v8yggt-3.rev.dnainternet.fi)
[11:30:45] *** Quits: jfilling (~jfilling@136.36.67.80) (Quit: Client closed)
[11:41:05] <andrewrk> the optimizer is quite good at figuring out tail recursion
[11:41:14] <andrewrk> the @call builtin is for when you need guaranteed semantics
[11:42:55] *** Joins: cr1901_ (~cr1901@2601:8d:8600:911:3863:96e8:22ca:d681)
[11:43:05] *** Quits: cr1901 (~cr1901@2601:8d:8600:911:dd88:331f:ddb3:df09) (Read error: Connection reset by peer)
[11:44:56] *** Joins: Vexu (~Thunderbi@188.117.20.105)
[11:51:20] <chgr> cool, thanks!
[12:03:37] *** Quits: tgschultz (UserNick@047-034-058-084.res.spectrum.com) (Quit: Going offline, see ya! (www.adiirc.com))
[12:04:04] *** Joins: tgschultz (UserNick@047-034-058-084.res.spectrum.com)
[12:13:41] *** Quits: af (~af@awalgarg.me) (Ping timeout: 256 seconds)
[12:17:01] *** Quits: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl) (Ping timeout: 256 seconds)
[12:17:18] *** Joins: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl)
[12:39:21] *** Joins: earnest (~earnest@user/earnestly)
[12:48:19] *** Quits: zakora (~zakora@dzd6d6yg28-mdj8v8yggt-3.rev.dnainternet.fi) (Quit: Konversation terminated!)
[12:53:39] *** Joins: af (~af@awalgarg.me)
[13:04:19] *** Quits: tgschultz (UserNick@047-034-058-084.res.spectrum.com) (Quit: Going offline, see ya! (www.adiirc.com))
[13:04:47] *** Joins: tgschultz (UserNick@047-034-058-084.res.spectrum.com)
[13:27:00] *** Quits: toms (~foobar@pogostick.net) (Remote host closed the connection)
[13:36:25] *** Quits: binarycat (~binarycat@35.24.192.117) (Ping timeout: 256 seconds)
[13:50:01] *** Quits: Vexu (~Thunderbi@188.117.20.105) (Ping timeout: 256 seconds)
[13:54:15] *** Joins: toms (~foobar@pogostick.net)
[13:55:16] *** Quits: anthon (~Thunderbi@p2e52aa21.dip0.t-ipconnect.de) (Read error: Connection reset by peer)
[14:05:02] *** Quits: tgschultz (UserNick@047-034-058-084.res.spectrum.com) (Quit: Going offline, see ya! (www.adiirc.com))
[14:05:31] *** Joins: tgschultz (UserNick@047-034-058-084.res.spectrum.com)
[14:12:57] *** Joins: Swahili (~Swahili@a95-94-208-187.cpe.netcabo.pt)
[14:19:15] <ifreund> andrewrk: ah cool, I should have looked at the clone() man page 
[14:20:28] <ifreund> for processes it seems that pid 1 gets a stack from the kernel on boot and fork() then does its thing and duplicates this stack when creating new processes
[14:32:42] <Franciman> hello fantastic community
[14:38:48] <ifreund> _o7
[14:39:02] *** Joins: pkap (~pkap@185.209.196.177)
[14:39:15] <Franciman> ifreund: is this an emoticon of you at your desk sitting on a gaming chair?
[14:40:10] <ifreund> Franciman: the _ was a typo actually, o7 is a wave :D
[14:40:29] <Franciman> ahah
[14:40:31] <Franciman> \o
[14:41:54] <Franciman> i-i have a question, is there a zig way to tell the compiler and ultimately the CPU that a branch condition is unlikely to be true?
[14:42:08] <Franciman> like in gcc you have the unlikely() builtin
[14:42:20] <Franciman> I found setCold, but it applies to functions, it seems to me
[14:45:23] <ifreund> Franciman: right, it's not currently possible to control this at sub-function granularity but there is this accepted proposal: https://github.com/ziglang/zig/issues/5177
[14:45:55] <Franciman> I could always put the conditional in a function
[14:45:57] <Franciman> lol
[14:45:59] <Franciman> and set it cold
[14:46:05] <Franciman> does it work if the function is inline?
[14:46:09] <Franciman> btw thanks
[14:49:15] <Franciman> w-wait
[14:49:17] <Franciman> what is Zag?
[14:49:37] <Franciman> https://github.com/ziglang/zig/issues/5239 i was reading this and they reportedly say:
[14:49:46] <Franciman> Â«In the Nim sense. This'll be especially helpful when Zag comes in.Â»
[14:53:07] <ifreund> nothing officially afaik
[14:53:29] <ifreund> it's been floated as a name for a hypothetical post-1.0 unstable branch though
[14:53:34] <Franciman> :O
[14:53:36] <Franciman> awesome
[14:53:39] <ifreund> which I think is what that issue refers too
[14:54:05] *** Quits: pkap (~pkap@185.209.196.177) (Quit: Client closed)
[14:55:55] *** Joins: Vexu (~Thunderbi@188.117.20.105)
[15:05:45] *** Quits: tgschultz (UserNick@047-034-058-084.res.spectrum.com) (Quit: Going offline, see ya! (www.adiirc.com))
[15:06:12] *** Joins: tgschultz (UserNick@047-034-058-084.res.spectrum.com)
[15:08:43] *** Quits: outfox (~outfox@user/outfox) (Ping timeout: 256 seconds)
[15:10:18] *** Joins: outfox (~outfox@213.144.147.16)
[15:10:18] *** Quits: outfox (~outfox@213.144.147.16) (Changing host)
[15:10:19] *** Joins: outfox (~outfox@user/outfox)
[15:34:27] *** Quits: outfox (~outfox@user/outfox) (Ping timeout: 252 seconds)
[15:36:01] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.3)
[15:36:30] *** Joins: supakeen (~user@python/site-packages/supakeen)
[15:46:25] *** Joins: outfox (~outfox@213.144.147.16)
[15:46:26] *** Quits: outfox (~outfox@213.144.147.16) (Changing host)
[15:46:26] *** Joins: outfox (~outfox@user/outfox)
[15:51:19] *** Quits: outfox (~outfox@user/outfox) (Ping timeout: 252 seconds)
[15:53:10] *** Joins: pkap (~pkap@185.209.196.147)
[16:01:50] *** Quits: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl) (Read error: Connection reset by peer)
[16:02:34] *** Quits: pkap (~pkap@185.209.196.147) (Quit: Client closed)
[16:03:13] *** Joins: outfox (~outfox@213.144.147.16)
[16:03:13] *** Quits: outfox (~outfox@213.144.147.16) (Changing host)
[16:03:13] *** Joins: outfox (~outfox@user/outfox)
[16:03:31] *** Joins: paulgrmn__ (~paulgrmn@user/paulgrmn)
[16:04:43] *** Joins: anthon (~Thunderbi@p2e52aa21.dip0.t-ipconnect.de)
[16:04:46] *** Joins: frmdstryr (~jrm@172.58.203.1)
[16:07:49] *** Quits: paulgrmn__ (~paulgrmn@user/paulgrmn) (Ping timeout: 252 seconds)
[16:10:41] *** Joins: paulgrmn_ (~paulgrmn@user/paulgrmn)
[16:14:37] *** Joins: pkap (~pkap@185.209.196.177)
[16:37:45] *** Quits: outfox (~outfox@user/outfox) (Ping timeout: 256 seconds)
[16:41:29] *** Joins: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl)
[16:44:27] *** Joins: outfox (~outfox@213.144.147.16)
[16:44:27] *** Quits: outfox (~outfox@213.144.147.16) (Changing host)
[16:44:27] *** Joins: outfox (~outfox@user/outfox)
[16:58:44] <pkap> Is there something like `std.mem.copy` but for strings of unknown size? I allocated a bunch of memory and now I want to copy `[*:0]u8` strings in there.
[17:04:38] <ifreund> pkap: there probably should be, but there isn't yet. Either convert your 0 terminated pointers to slices and use mem.copy() or write your own thing
[17:04:55] <ifreund> but how would you know how much to allocate without knowing the length of the strings?
[17:10:12] <pkap> Couldn't you check with `std.mem.len`?
[17:13:07] <ifreund> pkap: sure, so just use that length to turn your pointers into slices 
[17:13:45] <pkap> Ok thanks I'll trye this.
[17:14:45] <ifreund> note that all mem.len() does is iterate looking for a 0
[17:16:04] <pkap> Is there maybe something like this https://github.com/JakubSzark/zig-string , but for `[*:0]` strings?
[17:16:47] *** Quits: marcj (~marc@205.175.215.25) (Ping timeout: 265 seconds)
[17:17:27] *** cr1901_ is now known as cr1901
[17:19:32] <ifreund> don't think so, any library like that is going to store the length as well
[17:19:51] <ifreund> why do you want to use [*:0] pointers instead of slices?
[17:21:37] <pkap> I don't necessarily want to, it's just that I get [*:0] from the program I am trying to work with (river).
[17:23:09] <ifreund> heh, so it's my fault I guess
[17:23:10] <pkap> On a higher level, what I'm trying to do is to concatenate a bunch of `[*:0]` strings and send it over the wayland protocoll. Maybe I need another approach, ifreund?
[17:23:31] <ifreund> pkap: which protocol and why?
[17:24:16] <pkap> river-output-status that I extended for this purpose.
[17:25:07] <pkap> To send the names of a bunch of views to a river status client.
[17:25:40] *** Quits: Vexu (~Thunderbi@188.117.20.105) (Quit: Vexu)
[17:27:01] <ifreund> pkap: are you stuffing a bunch of strings in an wl_array? sending each string in a separate event would be more idiomatic
[17:27:46] <ifreund> (also just to warn you, I probably won't merge new river-status features, I've decided that that approach is a dead end) 
[17:30:53] <pkap> I know. I don't think this will result in something good enough to merge. It's more that I wanted to try out some zig and just needed something I could work on...
[17:31:56] <ifreund> cool, yeah playing around with stuff is a great way to learn
[17:33:30] <ifreund> I'd recommend adding two new events to the protocol then, send_view_title which has a string argument and done event that is sent after all view titles have been sent
[17:34:51] <ifreund> then emit the send_view_title event multiple times in the same order as the view_tags array
[17:36:51] <pkap> Yeah that sounds easier than sending
[17:37:51] <pkap> than sending all titles together and split them after receiving.
[17:38:22] <pkap> Thanks ifreund, I'm going for that solution.
[17:38:25] *** Quits: livoreno (~livoreno@user/notzmv) (Ping timeout: 268 seconds)
[17:38:56] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 252 seconds)
[17:40:18] <ifreund> have fun!
[17:40:27] <pkap> In case you're wondering why I want to do this: I'm imagining something like the TreeTab Layout in Qtile https://docs.qtile.org/en/latest/manual/ref/layouts.html#treetab .
[17:40:43] <pkap> Thanks!
[17:43:47] <pkap> So after the protocol part I was planning to build something like river-tag-overlay but in zig.
[17:44:32] <ifreund> neat
[17:48:31] *** Quits: outfox (~outfox@user/outfox) (Ping timeout: 256 seconds)
[17:53:07] <novakane> pkap: if you want to make something like river-tag-overlay, I did make something which has still a lot of problem, but if you want to look at it https://git.sr.ht/~novakane/agertu
[17:55:08] <pkap> Thanks, this will be a create place to start!
[17:55:12] *** Joins: outfox (~outfox@213.144.147.16)
[17:55:12] *** Quits: outfox (~outfox@213.144.147.16) (Changing host)
[17:55:12] *** Joins: outfox (~outfox@user/outfox)
[17:55:22] <pkap> s/create/great
[17:59:39] *** Quits: dbuckley (~dbuckley@2601:182:c77f:c13b:82c4:80d:b7b3:7c79) (Ping timeout: 252 seconds)
[18:01:51] <pkap> Also you have incorporated fcft already, great. I'll need this as well
[18:02:49] *** Joins: dbuckley (~dbuckley@2601:182:c77f:c13b:b431:fd59:a48e:6cb8)
[18:05:01] *** Quits: Techcable (~Techcable@168.235.93.147) (Ping timeout: 256 seconds)
[18:05:18] <novakane> yes it was one of my goal with this project, the implementation is basic for now though
[18:11:00] *** Quits: chgr (~ek@nat-91-137-30-14.net.encoline.de) (Quit: WeeChat 3.3)
[18:14:35] *** Quits: outfox (~outfox@user/outfox) (Ping timeout: 256 seconds)
[18:16:53] *** Joins: arkurious (~arkurious@user/arkurious)
[18:21:11] *** Joins: outfox (~outfox@213.144.147.16)
[18:21:12] *** Quits: outfox (~outfox@213.144.147.16) (Changing host)
[18:21:12] *** Joins: outfox (~outfox@user/outfox)
[18:32:19] *** Joins: terminalpusher (~terminalp@2a01:586:a4a5:1:393:e590:b69b:2236)
[18:35:20] *** Quits: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl) (Read error: Connection reset by peer)
[18:52:51] *** Joins: notapenguin (~ryu@2804:14d:5680:8a2c:75cf:7f59:516a:b801)
[19:02:08] *** Quits: notapenguin (~ryu@2804:14d:5680:8a2c:75cf:7f59:516a:b801) (Quit: WeeChat 3.3)
[19:19:16] *** Joins: livoreno (~livoreno@user/notzmv)
[19:19:33] *** Quits: livoreno (~livoreno@user/notzmv) (Read error: Connection reset by peer)
[19:31:32] *** Quits: tgschultz (UserNick@047-034-058-084.res.spectrum.com) (Quit: Going offline, see ya! (www.adiirc.com))
[19:32:02] *** Joins: tgschultz (UserNick@047-034-058-084.res.spectrum.com)
[19:39:34] *** Joins: notzmv (~zmv@user/notzmv)
[19:49:17] *** Joins: notapenguin (~ryu@2804:14d:5680:8a2c::5)
[19:53:03] *** Quits: notapenguin (~ryu@2804:14d:5680:8a2c::5) (Client Quit)
[19:57:25] *** Joins: xackus (~xackus@9-225.w.knc.pl)
[20:03:15] *** Joins: Techcable (~Techcable@168.235.93.147)
[20:25:39] *** Joins: noeontheend (~noeonthee@12.205.205.130)
[20:30:03] *** Joins: marcj (~marc@205.175.215.25)
[20:37:54] *** Joins: d0p1 (~d0p1@gateway/tor-sasl/d0p1)
[20:50:14] *** Quits: pkap (~pkap@185.209.196.177) (Quit: Client closed)
[21:02:38] *** Joins: livoreno (~livoreno@user/notzmv)
[21:04:39] *** Quits: noeontheend (~noeonthee@12.205.205.130) (Ping timeout: 256 seconds)
[21:28:03] *** Joins: acairncross (~aiken@106.2.143.150.dyn.plus.net)
[21:38:05] *** Joins: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl)
[21:38:41] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[21:54:22] <dfrey> ./main.zig:49:44: error: expected type '[]const u8', found '[*:0]u8'
[21:54:25] <dfrey>         day = fmt.parseUnsigned(u8, os.argv[1], 10) catch |err| {
[21:54:27] <dfrey>                                            ^
[21:55:20] <dfrey> Shouldn't a `[*:0]u8` coerce to a `[]const u8`?
[21:58:47] *** Quits: tgschultz (UserNick@047-034-058-084.res.spectrum.com) (Quit: Going offline, see ya! (www.adiirc.com))
[21:59:19] *** Joins: tgschultz (UserNick@047-034-058-084.res.spectrum.com)
[22:05:28] *** Joins: asmwfi[m] (~repmovsb@2001:470:69fc:105::1:274e)
[22:14:51] *** Joins: [deleted] (~livoreno@user/notzmv)
[22:15:56] *** Quits: terminalpusher (~terminalp@2a01:586:a4a5:1:393:e590:b69b:2236) (Remote host closed the connection)
[22:15:57] *** Quits: livoreno (~livoreno@user/notzmv) (Ping timeout: 252 seconds)
[22:35:23] *** Quits: outfox (~outfox@user/outfox) (Ping timeout: 252 seconds)
[22:42:05] *** Joins: outfox (~outfox@213.144.147.16)
[22:42:05] *** Quits: outfox (~outfox@213.144.147.16) (Changing host)
[22:42:05] *** Joins: outfox (~outfox@user/outfox)
[22:45:33] *** Joins: rgrinberg (~textual@187.223.248.37)
[22:51:09] *** Quits: rgrinberg (~textual@187.223.248.37) (Ping timeout: 252 seconds)
[22:59:12] *** Joins: rgrinberg (~textual@187.223.144.204)
[22:59:34] *** Quits: tgschultz (UserNick@047-034-058-084.res.spectrum.com) (Quit: Going offline, see ya! (www.adiirc.com))
[23:00:16] *** Joins: tgschultz (UserNick@047-034-058-084.res.spectrum.com)
[23:02:32] *** Joins: tane (~tane@dslb-002-201-234-166.002.201.pools.vodafone-ip.de)
[23:02:33] *** Quits: tane (~tane@dslb-002-201-234-166.002.201.pools.vodafone-ip.de) (Changing host)
[23:02:33] *** Joins: tane (~tane@user/tane)
[23:11:19] *** Quits: frmdstryr (~jrm@172.58.203.1) (Ping timeout: 252 seconds)
[23:15:33] *** Quits: rgrinberg (~textual@187.223.144.204) (Ping timeout: 256 seconds)
[23:23:03] *** Joins: nvmd (~nvmd@user/nvmd)
[23:26:49] *** Quits: outfox (~outfox@user/outfox) (Ping timeout: 256 seconds)
[23:30:20] *** Quits: Swahili (~Swahili@a95-94-208-187.cpe.netcabo.pt) (Remote host closed the connection)
[23:30:52] *** Joins: Swahili (~Swahili@a95-94-208-187.cpe.netcabo.pt)
[23:30:59] <tgschultz> dfrey, how would that work? `[*:0]u8` has a length that can only be determined by finding the sentinel. `[]const u8` needs to know the length. coercion here would require the compiler to insert a hidden loop.
[23:33:33] *** Joins: outfox (~outfox@213.144.147.16)
[23:33:33] *** Quits: outfox (~outfox@213.144.147.16) (Changing host)
[23:33:33] *** Joins: outfox (~outfox@user/outfox)
[23:50:04] *** Parts: tom5760 (73d4025b14@user/tom5760) ()
[23:59:17] *** Joins: rgrinberg (~textual@187.223.144.204)
