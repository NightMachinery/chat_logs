[00:11:52] *** Quits: aspic (~shifty~~~@ppp121-44-121-164.syd-gls-har-bras39.tpg.internode.on.net) (Ping timeout: 260 seconds)
[00:12:14] *** Joins: aspic (~shifty~~~@ppp121-44-116-191.syd-gls-har-bras39.tpg.internode.on.net)
[00:17:11] * GumbyPAN CPAN Upload: URI-Fast-0.55 by JEFFOBER https://metacpan.org/release/JEFFOBER/URI-Fast-0.55
[00:25:45] *** Joins: meatbot (~meatbot@perlbot/bot/meatbot)
[00:26:16] *** Joins: metabot (~metabot@perlbot/bot/metabot)
[00:26:47] *** Joins: perlbot (~perlbot@perlbot/bot/simcop2387/perlbot)
[00:26:47] *** ChanServ sets mode: +v perlbot
[00:27:34] *** Joins: proller (~p@2a02:6b8:b081:8814::1:2d)
[00:27:47] *** Joins: perldoc (~perldoc@2603-6080-3108-088d-18fc-1230-0f1a-2f6b.res6.spectrum.com)
[00:28:15] *** Joins: kaitlyn (~kaitlyn@user/kaitlyn)
[00:29:01] *** Joins: simcop2387 (~simcop238@perlbot/patrician/simcop2387)
[00:29:36] *** Quits: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com) (Read error: Connection reset by peer)
[00:37:22] *** Quits: magla (~gelignite@55d46203.access.ecotel.net) (Quit: Stay safe!)
[00:37:45] *** Quits: ShorTie (~ShorTie@112.sub-72-108-77.myvzw.com) (Ping timeout: 265 seconds)
[00:38:23] *** Joins: ShorTie (~ShorTie@71.sub-72-108-78.myvzw.com)
[00:43:36] *** Joins: ircuser-1 (~Johnny@71.63.241.168)
[00:50:19] *** Joins: krismatrix (~krismatri@38.80.149.51)
[00:56:08] *** Joins: Vicissitude (~Vicissitu@user/vicissitude)
[00:58:04] *** Quits: aspic (~shifty~~~@ppp121-44-116-191.syd-gls-har-bras39.tpg.internode.on.net) (Ping timeout: 260 seconds)
[00:58:54] *** Joins: aspic (~shifty~~~@ppp121-44-125-63.syd-gls-har-bras39.tpg.internode.on.net)
[01:01:02] *** Quits: krismatrix (~krismatri@38.80.149.51) (Ping timeout: 268 seconds)
[01:09:26] *** Joins: pizdets_ (~pizdets@183.182.115.39)
[01:10:17] *** Quits: pizdets (~pizdets@183.182.111.39) (Ping timeout: 268 seconds)
[01:10:36] *** Quits: Vicissitude (~Vicissitu@user/vicissitude) (Quit: boom)
[01:18:18] *** Quits: vyv (~vyv@76.68.6.254) (Quit: Konversation terminated!)
[01:18:46] *** Joins: koo6 (~koo6@89-24-13-235.customers.tmcz.cz)
[01:19:19] *** Quits: proller (~p@2a02:6b8:b081:8814::1:2d) (Ping timeout: 268 seconds)
[01:21:22] *** Quits: aspic (~shifty~~~@ppp121-44-125-63.syd-gls-har-bras39.tpg.internode.on.net) (Ping timeout: 260 seconds)
[01:29:27] *** Joins: whynot (~whynot@37.73.32.24)
[01:31:58] *** Joins: proller (~p@2a02:6b8:b081:8802::1:1a)
[01:37:25] *** Quits: bit4bit (~bit4bit@190.128.123.78) (Ping timeout: 268 seconds)
[01:44:49] *** Quits: proller (~p@2a02:6b8:b081:8802::1:1a) (Ping timeout: 268 seconds)
[01:48:16] *** Joins: semeion (~semeion@user/semeion)
[01:57:43] *** Joins: proller (~p@2002:50f0:d845:10:4a51:b7ff:fe43:6e30)
[01:59:10] *** Quits: roflbot (~ah@147.12.35.98) (Quit: Lost terminal)
[02:03:34] *** Joins: vjuen_ (~Username@77.72.128.72)
[02:07:25] *** Quits: vjuen (~Username@leased-line-217-21-59-112.telecom.by) (Ping timeout: 268 seconds)
[02:07:28] *** vjuen_ is now known as vjuen
[02:10:30] *** Quits: anthk_ (~anthk_@92.176.105.30) (Ping timeout: 268 seconds)
[02:15:15] *** Joins: bit4bit (~bit4bit@190.128.123.78)
[02:26:25] * GumbyPAN CPAN Upload: Data-Text-0.03 by NHORNE https://metacpan.org/release/NHORNE/Data-Text-0.03
[02:27:18] <gordonfish> sweval: 123;
[02:27:20] <perlbot> gordonfish: 123
[02:27:28] <gordonfish> Ah, it's working now.
[02:41:54] *** xv8 is now known as XV8
[02:49:22] *** Joins: VoidNoir0 (~VoidNoir0@72.80.203.52)
[02:51:25] *** Quits: G_Sabino1ullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net) (Ping timeout: 268 seconds)
[02:51:25] *** Quits: G_SabinoMullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net) (Ping timeout: 268 seconds)
[02:51:28] * GumbyPAN CPAN Upload: Statistics-Descriptive-PDL-0.12 by SLAFFAN https://metacpan.org/release/SLAFFAN/Statistics-Descriptive-PDL-0.12
[03:00:03] *** Quits: humky (~humky@user/humky) (Ping timeout: 268 seconds)
[03:00:19] *** Joins: humky (~humky@user/humky)
[03:00:43] <unixcat64> Grinnz: thanks!
[03:03:29] <unixcat64> I have some HTML files and I want to remove lines containing the tag <span>. How could I do this with a script (i.e. not one-liner)?
[03:04:23] <unixcat64> basically I want the equivalent of sed -i '/span/d' "$file"
[03:04:41] <Grinnz> it's best to use an HTML parser rather than trying to shishkebab the html
[03:05:10] <unixcat64> I guess that would be easier
[03:05:48] <Grinnz> use Mojo::DOM; my $input = decode 'UTF-8', scalar readline; my $dom = Mojo::DOM->new($input); $_->remove for $dom->find('span')->each;
[03:05:56] <Grinnz> print encode 'UTF-8', $input;
[03:06:03] <unixcat64> awesome, thanks
[03:06:08] <Grinnz> er, print encode 'UTF-8', $dom->to_string;
[03:06:32] <Grinnz> encode and decode from either Encode or Mojo::Util
[03:11:30] * GumbyPAN CPAN Upload: Data-Record-Serialize-0.31 by DJERIUS https://metacpan.org/release/DJERIUS/Data-Record-Serialize-0.31
[03:11:33] *** Quits: proller (~p@2002:50f0:d845:10:4a51:b7ff:fe43:6e30) (Ping timeout: 268 seconds)
[03:11:55] *** Joins: proller (~p@2a02:6b8:b081:7206::1:14)
[03:13:02] <Grinnz> (or ideally, Encode::Simple)
[03:13:16] <Grinnz> (then you can just use encode_utf8 because it doesn't suck like the one in Encode)
[03:17:06] *** Quits: Pali (~pali@user/pali) (Ping timeout: 268 seconds)
[03:20:56] *** Quits: vjuen (~Username@77.72.128.72) (Quit: Going offline, see ya! (www.adiirc.com))
[03:23:42] *** Quits: TweetiePooh (~richard@cpc75386-sotn16-2-0-cust456.15-1.cable.virginm.net) (Quit: Konversation terminated!)
[03:25:27] *** Joins: aspic (~shifty~~~@ppp121-44-116-142.syd-gls-har-bras39.tpg.internode.on.net)
[03:26:40] *** Quits: Su-Shee (~Susanne@p4ffc734c.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[03:28:33] *** Joins: Su-Shee (~Susanne@p4ffc7d94.dip0.t-ipconnect.de)
[03:29:52] *** Joins: gggpkm (~gggpkm@111-251-126-187.dynamic-ip.hinet.net)
[03:31:27] *** Quits: aspic (~shifty~~~@ppp121-44-116-142.syd-gls-har-bras39.tpg.internode.on.net) (Ping timeout: 260 seconds)
[03:32:42] *** Quits: pizdets_ (~pizdets@183.182.115.39) (Ping timeout: 250 seconds)
[03:33:49] *** Joins: pizdets (~pizdets@183.182.114.182)
[03:34:48] *** Quits: bit4bit (~bit4bit@190.128.123.78) (Remote host closed the connection)
[03:36:34] *** Quits: kitsunenokenja (~kitsunech@68.91.220.96) (Ping timeout: 252 seconds)
[03:40:43] *** Joins: G_Sabino1ullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net)
[03:40:44] *** Joins: G_SabinoMullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net)
[03:43:29] *** Joins: N4buc0 (~N4buc0@2001:1284:f013:af60:3be7:3677:cfb7:cdf)
[03:46:08] *** Joins: CaptainSludge (~eric@69.8.162.13)
[03:48:30] *** XV8 is now known as xv8
[03:49:57] *** Parts: CaptainSludge (~eric@69.8.162.13) ()
[03:58:03] *** Joins: monkey_ (~user@190.104.116.134)
[03:58:12] *** Quits: N4buc0 (~N4buc0@2001:1284:f013:af60:3be7:3677:cfb7:cdf) (Quit: Leaving)
[04:07:35] *** Quits: choroba (~E_Choroba@89-101-243-80.cust.centrio.cz) (Quit: Leaving)
[04:09:10] *** Quits: xberry (~LSD@2.lsd.systems) (Ping timeout: 252 seconds)
[04:10:21] *** Quits: monkey_ (~user@190.104.116.134) (Ping timeout: 268 seconds)
[04:10:47] *** Joins: CaptainSludge (~CaptainSl@174.34.184.130)
[04:13:53] *** Joins: acidsys (~LSD@2.lsd.systems)
[04:21:37] * GumbyPAN CPAN Upload: Nasm-X86-20210914 by PRBRENAN https://metacpan.org/release/PRBRENAN/Nasm-X86-20210914
[04:25:52] <unixcat64> Grinnz: thanks. so if I iterate through the files in a foreach loop, do I still use the readline function?
[04:27:02] <Grinnz> depends how you are opening the files
[04:27:33] <Grinnz> if you're using Mojo::DOM, then you will also have Mojo::File available so you could use Mojo::File::path($filepath)->slurp instead of open/readline
[04:33:30] *** xv8 is now known as XV8
[04:41:21] *** Quits: G_Sabino1ullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net) (Ping timeout: 265 seconds)
[04:41:21] *** Quits: G_SabinoMullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net) (Ping timeout: 265 seconds)
[04:44:13] *** Quits: anikolov (~anikolov@80.72.92.226.coresnet.bg) (Ping timeout: 252 seconds)
[04:44:27] *** Quits: gloin (~gloin@user/gloin) (Remote host closed the connection)
[04:44:57] <unixcat64> Grinnz: what is the best way to download a file archive? e.g. I want to download file.tar.gz and save it to disk
[04:45:24] <unixcat64> LWP::Simple getstore seems to work for text only
[04:45:55] *** Joins: monkey_ (~user@190.104.116.134)
[04:46:18] <Grinnz> getstore should certainly work for any file, but LWP::Simple kind of sucks, try HTTP::Simple
[04:46:39] * GumbyPAN CPAN Upload: Nasm-X86-20210915 by PRBRENAN https://metacpan.org/release/PRBRENAN/Nasm-X86-20210915
[04:46:39] * GumbyPAN CPAN Upload: Unisyn-Parse-20210915 by PRBRENAN https://metacpan.org/release/PRBRENAN/Unisyn-Parse-20210915
[04:47:00] <Grinnz> you could also use Mojo::UserAgent which is one of the best and most featureful user agents, if slightly more verbose to use
[04:47:26] <unixcat64> Nice, I'll try HTTP::Simple
[04:47:59] <mst> unixcat64: have you tried http://p3rl.org/File::Fetch ?
[04:48:03] <Paperbot_> Link title(s): [ File::Fetch - A generic file fetching mechanism - Perldoc Browser <https://perldoc.perl.org/File::Fetch> ]
[04:48:13] <mst> it's far from perfect but it handles simple stuff very simply
[04:48:41] *** Joins: Ovid (~Ovid@laubervilliers-659-1-13-124.w80-11.abo.wanadoo.fr)
[04:53:31] *** Quits: Ovid (~Ovid@laubervilliers-659-1-13-124.w80-11.abo.wanadoo.fr) (Ping timeout: 268 seconds)
[04:54:53] *** Quits: monkey_ (~user@190.104.116.134) (Ping timeout: 265 seconds)
[04:54:56] *** Joins: G_SabinoMullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net)
[04:54:57] *** Joins: G_Sabino1ullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net)
[04:56:05] *** Joins: Ovid (~Ovid@laubervilliers-659-1-13-124.w80-11.abo.wanadoo.fr)
[05:01:56] *** Quits: Ovid (~Ovid@laubervilliers-659-1-13-124.w80-11.abo.wanadoo.fr) (Ping timeout: 268 seconds)
[05:03:37] *** Joins: Ovid (~Ovid@laubervilliers-659-1-13-124.w80-11.abo.wanadoo.fr)
[05:12:38] *** Quits: zln (~zln@c80-217-230-193.bredband.tele2.se) (Ping timeout: 268 seconds)
[05:19:24] *** Joins: chenxuezhao (~chenxuezh@106.39.157.10)
[05:26:46] *** Quits: haj (~haj@ip5f5beb42.dynamic.kabel-deutschland.de) (Quit: Leaving.)
[05:31:22] *** Quits: gggpkm (~gggpkm@111-251-126-187.dynamic-ip.hinet.net) (Ping timeout: 260 seconds)
[05:38:55] *** Quits: whynot (~whynot@37.73.32.24) (Quit: Lost terminal)
[05:39:05] *** Quits: gryphn (~gryphn@191.96.106.243) (Quit: kthxbye)
[05:51:55] *** Quits: arthurpbs (~arthurpbs@168.121.98.59) (Ping timeout: 260 seconds)
[05:52:30] *** Joins: krismatrix (~krismatri@38.80.149.51)
[06:03:12] *** Quits: omegatron (~some@p54849842.dip0.t-ipconnect.de) (Ping timeout: 268 seconds)
[06:12:19] *** Joins: monkey_ (~user@190.104.116.134)
[06:13:11] *** Quits: krismatrix (~krismatri@38.80.149.51) (Ping timeout: 265 seconds)
[06:16:08] *** Quits: judabuda (kowbunga@user/judabuda) (Quit: Gone.)
[06:17:32] *** Quits: Ovid (~Ovid@laubervilliers-659-1-13-124.w80-11.abo.wanadoo.fr) (Ping timeout: 265 seconds)
[06:18:10] *** Joins: krismatrix (~krismatri@38.80.149.51)
[06:18:59] *** Joins: Ovid (~Ovid@laubervilliers-659-1-13-124.w80-11.abo.wanadoo.fr)
[06:20:15] *** Quits: Su-Shee (~Susanne@p4ffc7d94.dip0.t-ipconnect.de) (Ping timeout: 268 seconds)
[06:21:23] *** Joins: Su-Shee (~Susanne@p4ff4949f.dip0.t-ipconnect.de)
[06:25:37] <unixcat64> mst: HTTP::Simple seems sufficient, thanks though
[06:26:50] * GumbyPAN CPAN Upload: Playwright-0.015 by TEODESIAN https://metacpan.org/release/TEODESIAN/Playwright-0.015
[06:36:36] *** Quits: krismatrix (~krismatri@38.80.149.51) (Read error: Connection reset by peer)
[06:38:45] *** Quits: proller (~p@2a02:6b8:b081:7206::1:14) (Ping timeout: 268 seconds)
[06:46:22] *** Quits: bmeneg (~bmeneg@2001:1284:f013:917a:660a:3846:a9f1:30e9) (Remote host closed the connection)
[06:53:40] *** Quits: chenxuezhao (~chenxuezh@106.39.157.10) (Quit: Leaving...)
[06:57:26] *** Quits: monkey_ (~user@190.104.116.134) (Quit: ERC (IRC client for Emacs 27.2))
[07:00:11] *** XV8 is now known as xv8
[07:11:42] *** Quits: aquanight (~aquanight@174-126-159-166.cpe.sparklight.net) (Ping timeout: 260 seconds)
[07:13:07] *** Quits: txtsd (~txtsd@user/txtsd) (Ping timeout: 265 seconds)
[07:29:54] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Ping timeout: 260 seconds)
[07:31:30] *** Joins: FinnElija (~finn_elij@user/finn-elija/x-0085643)
[07:45:21] *** Quits: G_Sabino1ullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net) (Ping timeout: 268 seconds)
[07:45:21] *** Quits: G_SabinoMullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net) (Ping timeout: 268 seconds)
[07:45:36] *** Joins: monkey_ (~user@190.104.116.134)
[07:52:23] *** Quits: monkey_ (~user@190.104.116.134) (Remote host closed the connection)
[07:53:28] *** Quits: fuzzix (~fuzzix@46.7.53.110) (Ping timeout: 252 seconds)
[07:54:54] *** Joins: fuzzix (~fuzzix@46.7.53.110)
[08:17:18] *** Joins: judabuda (kowbunga@thunderirc.net)
[08:23:24] *** Quits: xv8 (~xv8@2601:5cb:c001:50:1cc7:7365:d8fd:905d) (Quit: Konversation terminated!)
[08:29:37] *** Joins: Martchus (~martchus@2a01:c22:77ff:ed00:d250:99ff:fe49:3cce)
[08:30:35] *** Quits: Martchus_ (~martchus@2a01:c22:6fbd:cd00:d250:99ff:fe49:3cce) (Ping timeout: 260 seconds)
[08:36:55] *** Joins: shlomif (~shlomif@87.68.240.100.adsl.012.net.il)
[08:42:05] * GumbyPAN CPAN Upload: Mail-Milter-Authentication-3.20210914 by MBRADSHAW https://metacpan.org/release/MBRADSHAW/Mail-Milter-Authentication-3.20210914
[08:51:51] <vanfanel64> Is it possible with Mojo:UserAgent to set how many attempts/retries for a connection to make before giving up?
[08:52:50] <kiwiroy> vanfanel64: have a look at Mojo::UserAgent::Role::Resume
[08:52:53] <vanfanel64> I see in the documentation that there are settings for connection and request timeouts, but I do not see anything about retrying or attempt counts.
[08:53:08] <vanfanel64> kiwiroy, thank you, will look at that
[08:53:58] *** Quits: randir (~randir@95-25-59-33.broadband.corbina.ru) (Remote host closed the connection)
[08:54:44] *** Joins: xv8 (~xv8@2601:5cb:c001:50:b12c:b8d7:dc13:307b)
[08:58:01] <vanfanel64> kiwiroy, that looks perfect, thank you, sir
[08:58:21] <kiwiroy> no problem.
[08:59:54] <vanfanel64> kiwiroy, I assume this will work with regulr requests? The documentation is focused on file downloads.
[09:03:01] <kiwiroy> It appears to, though I've only used for file downloads.
[09:05:43] *** Quits: slowButPresent (~slowButPr@user/slowbutpresent) (Quit: leaving)
[09:10:00] <vanfanel64> Ok then. I will test it out.
[09:12:14] *** Joins: randir (~randir@93.159.239.42)
[09:15:54] *** Joins: mattil (~mattil@dzy2pz1nkzthlzsp0x8-4.rev.dnainternet.fi)
[09:19:10] *** xv8 is now known as XV8
[09:21:25] *** Quits: mattil (~mattil@dzy2pz1nkzthlzsp0x8-4.rev.dnainternet.fi) (Remote host closed the connection)
[09:23:00] *** Joins: mattil (~mattil@dzy2pz1nkzthlzsp0x8-4.rev.dnainternet.fi)
[09:23:33] *** Quits: mattil (~mattil@dzy2pz1nkzthlzsp0x8-4.rev.dnainternet.fi) (Remote host closed the connection)
[09:32:05] *** Joins: mattil (~mattil@dzy2pz1nkzthlzsp0x8-4.rev.dnainternet.fi)
[09:36:52] *** Quits: mattil (~mattil@dzy2pz1nkzthlzsp0x8-4.rev.dnainternet.fi) (Remote host closed the connection)
[09:46:52] *** Joins: mattil (~mattil@dzy2pz1nkzthlzsp0x8-4.rev.dnainternet.fi)
[09:47:30] *** Joins: mattil_ (~mattil@helsinki.portalify.com)
[09:50:42] *** Joins: MeowcatWoofWoofF (~rosefoxma@2001:470:69fc:105::c74e)
[09:51:22] *** Quits: mattil (~mattil@dzy2pz1nkzthlzsp0x8-4.rev.dnainternet.fi) (Ping timeout: 268 seconds)
[09:52:12] * GumbyPAN CPAN Upload: String-Random-0.32 by SHLOMIF https://metacpan.org/release/SHLOMIF/String-Random-0.32
[09:52:12] * GumbyPAN CPAN Upload: Mail-AuthenticationResults-2.20210914 by MBRADSHAW https://metacpan.org/release/MBRADSHAW/Mail-AuthenticationResults-2.20210914
[10:03:54] *** Quits: randir (~randir@93.159.239.42) (Ping timeout: 260 seconds)
[10:07:52] *** Joins: Sauvin (~sauvin@about/linux/staff/sauvin)
[10:13:20] *** Quits: mattil_ (~mattil@helsinki.portalify.com) (Read error: Connection reset by peer)
[10:13:52] *** Joins: mattil (~mattil@airio.portalify.com)
[10:24:20] *** Quits: R2robot (~R2robot@user/r2robot) (Ping timeout: 260 seconds)
[10:25:50] *** Quits: willthechill (~willthech@2600:1700:8c61:3ed0:4c15:d40c:52c8:5b34) (Ping timeout: 260 seconds)
[10:27:15] *** Joins: zln (~zln@c80-217-230-193.bredband.tele2.se)
[10:28:47] *** Joins: randir (~randir@93.159.239.42)
[10:36:12] *** Quits: gast0n (~g4570n@user/gast0n) (Quit: Bye, see you soon! 👋)
[10:43:32] *** Joins: jplesnik (jplesnik@nat-pool-brq-t.redhat.com)
[10:45:26] *** Joins: mattil_ (~mattil@helsinki.portalify.com)
[10:49:39] *** Quits: mattil (~mattil@airio.portalify.com) (Ping timeout: 265 seconds)
[11:00:40] *** Joins: tobybl (~tobybl@208.193.115.87.dyn.plus.net)
[11:34:47] *** Joins: art1 (~romeyke@p200300ccdf0a9d0076d5c930cd88268e.dip0.t-ipconnect.de)
[11:39:54] *** Quits: zln (~zln@c80-217-230-193.bredband.tele2.se) (Ping timeout: 268 seconds)
[11:43:28] *** Joins: Pali (~pali@user/pali)
[11:51:02] *** Quits: Pali (~pali@user/pali) (Ping timeout: 265 seconds)
[11:59:51] *** Joins: zln (~zln@c80-217-230-193.bredband.tele2.se)
[12:01:19] *** Joins: anthk_ (~anthk_@92.176.105.30)
[12:03:50] *** Joins: choroba (~E.Choroba@89-101-243-80.cust.centrio.cz)
[12:28:00] *** Joins: haj (~haj@ip5f5beb42.dynamic.kabel-deutschland.de)
[12:44:28] <Mandevil> Hm, completely clean system... cpan recommends installing Term::ReadLine::Perl ... so I try to install it... it fails.
[12:44:44] <Mandevil> I mean s/clean/new/
[12:44:57] <Mandevil> Oh, no make
[12:49:35] <Mandevil> At any rate, Debian 11 has Perl 5.32 :-)
[12:49:40] <Mandevil> That's reasonably recent
[12:50:03] *** Quits: voegelas (~voegelas@www.andreasvoegele.com) (Remote host closed the connection)
[12:51:40] *** Quits: anthk_ (~anthk_@92.176.105.30) (Ping timeout: 240 seconds)
[12:53:41] *** Joins: voegelas (~voegelas@www.andreasvoegele.com)
[13:00:47] <shlomif> Mandevil: yes \o/. do note that the debian packagers have neglected some of my bug reports - maybe they are understaffed
[13:01:29] *** Quits: semeion (~semeion@user/semeion) (Quit: WeeChat 3.2)
[13:12:38] *** Joins: EvanCarroll (~ecarroll@c-73-32-86-244.hsd1.tx.comcast.net)
[13:12:40] <EvanCarroll> well, that was fun
[13:12:47] <EvanCarroll> I just wrote a bunch of code that doesn't make any sense.
[13:16:47] <lopid> ok
[13:16:51] <vague> Now publish it to confuse the greater public
[13:17:52] <EvanCarroll> vague: yeah, my conclusion are numbers are weird.
[13:18:06] <EvanCarroll> I should help others learn this too.
[13:18:34] <shlomif> vague: EvanCarroll : my code makes insane sense...;)
[13:20:13] <EvanCarroll> shlomif: btw, your other bug you filed that was closed by dancer. that's really a bug in exeutils, or make::maker or something.
[13:20:53] <EvanCarroll> This is not something that happens outside of the Perl ecosystem much.
[13:21:37] <EvanCarroll> If you install X, and X installs Y, and then you uninstall Y, the right thing to do is not have all things that depend on X fail.
[13:22:44] <EvanCarroll> at the very least, it would be nice to know that things that depend on X are broken now, and even better would be to have a system of version locking or version pinning so you things that depend on X, could depend on X's dependencies too.
[13:25:10] <shlomif> EvanCarroll: i see
[13:30:01] <EvanCarroll> 0 is weird and unintuitive
[13:30:59] *** Joins: vjuen (~Username@77.72.128.72)
[13:31:21] <EvanCarroll> it's the first letter in a sequence 0-9 (no one says 1-0), and yet 9 doesn't roll over to 09, it rolls over to 10. If you take another sequence A-Z, and you ask how it should roll over everyone will tell you (including Perl) AA, but if A is 0, shouldn't that be BA?
[13:31:34] <EvanCarroll> ++Z = "BA" is based.
[13:33:23] *** Joins: EvanCarr1ll (~ecarroll@172.58.101.107)
[13:33:31] <EvanCarr1ll> I AM BACK
[13:33:39] <EvanCarr1ll> stupid ass hurricane is dumb.
[13:33:43] *** Joins: aspic (~shifty~~~@ppp121-44-99-39.syd-gls-har-bras38.tpg.internode.on.net)
[13:33:51] <EvanCarr1ll> did you see my rant about 0 before I lost internets.
[13:34:11] <Mandevil> ---last---> 11:01 < EvanCarroll> ++Z = "BA" is based.
[13:34:11] <shlomif> EvanCarr1ll: yes, we did
[13:34:21] <EvanCarr1ll> excellent.
[13:34:31] <EvanCarr1ll> I would hate for you to miss that.
[13:36:14] *** Quits: EvanCarroll (~ecarroll@c-73-32-86-244.hsd1.tx.comcast.net) (Ping timeout: 268 seconds)
[13:40:52] <Altreus> Hey I've previously had those thoughts too
[13:41:01] <Altreus> Then I realised A is not 0 so it doesn't follow
[13:43:27] <EvanCarr1ll> Well then we need a letter that can signify zero.. I nominate è that's not in use by any language that matters.
[13:44:20] <Altreus> Only if you believe it to be numbers, when in fact it's strings
[13:44:32] <Altreus> in strings, "00" is different from "0"
[13:58:20] *** XV8 is now known as xv8
[14:00:02] *** Quits: EvanCarr1ll (~ecarroll@172.58.101.107) (Read error: Connection reset by peer)
[14:02:16] <Mandevil> I am looking at old perl code written by someone not very skilled with it... And I see stuff like this:
[14:02:23] <Mandevil> my @TMP = split ('\n', $zabbix_msg);
[14:02:37] <Mandevil> And I am thinking how the hell is this working?
[14:02:58] <Mandevil> Does it really parse by newline? I don't think so.
[14:03:31] *** Joins: EvanCarroll (~ecarroll@172.58.101.107)
[14:04:53] <shlomif> perlbot: sweval: [split '\n', "f\ng\p"]
[14:05:00] <perlbot> shlomif: Unrecognized escape \p passed through at (IRC) line 1. ["f","gp"]
[14:05:08] <shlomif> perlbot: sweval: [split '\n', "f\ng\np"]
[14:05:10] <perlbot> shlomif: ["f","g","p"]
[14:05:14] <Mandevil> Huh?
[14:05:15] <Mandevil> How?
[14:05:37] <Mandevil> Or is \n regex for newline?
[14:05:53] <Mandevil> Yeah, it is.
[14:08:25] *** Joins: chenxuezhao (~chenxuezh@106.39.157.10)
[14:11:43] *** Quits: mattil_ (~mattil@helsinki.portalify.com) (Remote host closed the connection)
[14:12:08] *** Quits: chenxuezhao (~chenxuezh@106.39.157.10) (Client Quit)
[14:12:16] *** Joins: mattil (~mattil@helsinki.portalify.com)
[14:14:45] *** Quits: mattil (~mattil@helsinki.portalify.com) (Remote host closed the connection)
[14:14:57] *** Joins: mattil (~mattil@helsinki.portalify.com)
[14:26:40] *** Quits: mattil (~mattil@helsinki.portalify.com) (Remote host closed the connection)
[14:27:12] *** Joins: mattil (~mattil@airio.portalify.com)
[14:32:42] *** Joins: aquanight (~aquanight@174-126-159-166.cpe.sparklight.net)
[14:32:44] *** Quits: csrf (~csrf@user/csrf) (Quit: ZNC 1.7.2+deb3 - https://znc.in)
[14:33:29] *** Joins: csrf (~csrf@user/csrf)
[14:33:36] *** Joins: chenxuezhao (~chenxuezh@106.39.157.10)
[14:35:19] <Altreus> this is why you don't give split a string
[14:35:27] <Altreus> it lies to the reader
[14:44:19] <choroba> and to the writer, too, after a while
[14:44:44] <Altreus> we contain multitudes
[14:47:01] <huf> yeah but most of them are gut bacteria
[14:47:12] <huf> they dont really care all that much about perl
[14:48:32] *** Quits: chenxuezhao (~chenxuezh@106.39.157.10) (Quit: Leaving...)
[15:01:45] * GumbyPAN CPAN Upload: CtrlO-PDF-0.21 by ABEVERLEY https://metacpan.org/release/ABEVERLEY/CtrlO-PDF-0.21
[15:18:35] *** Joins: vjuen_ (~Username@leased-line-217-21-59-112.telecom.by)
[15:20:12] *** Joins: vjuen___ (~Username@leased-line-217-21-59-112.telecom.by)
[15:20:12] *** Quits: vjuen_ (~Username@leased-line-217-21-59-112.telecom.by) (Read error: Connection reset by peer)
[15:20:59] <daemon> Altreus, you know when we was messing about with OpenAPI, was Mojo the only option or did we find others?
[15:22:10] *** Quits: aquanight (~aquanight@174-126-159-166.cpe.sparklight.net) (Ping timeout: 260 seconds)
[15:22:14] *** Quits: vjuen (~Username@77.72.128.72) (Ping timeout: 265 seconds)
[15:22:24] *** vjuen___ is now known as vjuen
[15:24:44] <Altreus> the only thing I found a v3 plugin for
[15:24:50] <Altreus> didn't look too hard tho
[15:24:55] <daemon> hmm
[15:25:06] <daemon> would you have any idea what so ever how to use https://metacpan.org/pod/Mojo::Reactor::POE
[15:25:07] <Paperbot_> Link title(s): [ Mojo::Reactor::POE - POE backend for Mojo::Reactor - metacpan.org ]
[15:25:26] <daemon> that being said that might not help anyway
[15:25:39] <daemon> I have a POE application I would like an OpenAPI type interface for
[15:25:57] <daemon> but bearing in mind only mojo has a module for OpenAPI
[15:26:08] <daemon> how do I hand off connections between the two
[15:26:26] <shlomif> hmmm... i wonder what https://github.com/ctrlo/ do?
[15:26:27] <Paperbot_> Link title(s): [ ctrlo · GitHub ]
[15:26:46] <Altreus> mojo's openapi plugin is just a wrapper really
[15:26:58] <Altreus> around I forgot what
[15:27:01] <daemon> yep so the real question is 
[15:27:05] <Altreus> but nothing in it would be useful for a non-mojo app
[15:27:10] <Altreus> all that useful stuff is in what it wraps
[15:27:17] <daemon> how do I get mojo to handle all the web stuff, but when a controller is hit, post it off to a POE handler
[15:27:19] <batman> daemon: You can use https://metacpan.org/pod/JSON::Validator::Schema::OpenAPIv3#validate_request without using a Mojolicious app
[15:27:20] <Paperbot_> Link title(s): [ JSON::Validator::Schema::OpenAPIv3 - OpenAPI version 3 - metacpan.org ]
[15:27:20] <daemon> for the result
[15:27:26] *** Joins: R2robot (~R2robot@user/r2robot)
[15:28:11] <daemon> batman, it was not just the OpenAPI module mojo does, it was also handling all the other bumph that comes with HTTP request
[15:28:14] <Altreus> oh that's probably the async part yeah
[15:29:29] <batman> daemon: Do you have a Mojo::Transaction::HTTP object inside your POE application..?
[15:29:48] <daemon> batman, have not even written the POE application yet so I could do, I am thinking out how to write it now
[15:30:36] <daemon> even playing wit the idea of doing the unthinkable and using IO::Async or Reflect
[15:30:37] <batman> It sounds very strange to build a POE application instead of a Mojolicious application in that case
[15:30:40] <daemon> for a bit of spice
[15:30:57] *** Quits: WinterStar (~IceLight@user/icelight) (Ping timeout: 265 seconds)
[15:31:35] <Altreus> yeah if you've not written it yet then just use mojo in the first place
[15:31:40] <daemon> batman, on one side I am providing an API, so obviously going to use OpenAPI, on the other side I am dealing with unknown API's that could be ANYTHING could even ber over anything
[15:31:43] <Altreus> coding is spicy enough already
[15:31:55] <daemon> ipx,tcp,udp || json/xml/toml/'custom'
[15:32:23] <daemon> so on the side I know about I would like mojolicious on the side I do not know I would rather have POE
[15:32:27] <daemon> consider this a translation service
[15:32:36] *** Joins: WinterStar (~IceLight@user/icelight)
[15:33:15] <daemon> but given that is the case ... 
[15:33:53] <daemon> a request comes in on the openapi/mojo side, no matter what it is I send back an ID for the request, meanwhile I pass the request forwards to the POE engine that deals with the chaos side
[15:33:56] <daemon> then I can do what I like
[15:34:02] <daemon> that works I think
[15:34:16] <Ovid> daemon: it's not ready for prime-time yet (we don't yet have the JSON validation in place), but our company was working on Net::OpenAPI (https://github.com/Ovid/Net-OpenAPI). Throw a schema at it and it generates your server stubs code. (the sort of thing OpenAPI Generator should have for Perl, but doesn't)
[15:34:16] <Paperbot_> Link title(s): [ GitHub - Ovid/Net-OpenAPI: OpenAPI server stub generator ]
[15:34:51] <batman> I would create two servers in that case, where one of them translate anything to HTTP... Sounds a simpler design if you can isolate the tasks
[15:35:05] <Ovid> A Mojolicious solution will get you up and running faster, but I've found it requires a lot of fiddly work wiring the various bits together.
[15:35:36] <daemon> batman, yep my thoughts as well, because then clients of the openapi side can just query for the ID they was given to see if a response has been given, it might take minutes for that to happen
[15:35:41] <daemon> none of this will be instant on the chaos side
[15:37:07] <daemon> what's more I do not even need the engines to talk directly, I can shove a redis fifo or some fifo db in the middle, so the mojo can shove the entire request as a json object into it including the ID, and either fire off a notify of activity to the chaos side or alternatively have it just watch the queue
[15:37:10] <daemon> so there is no slow down
[15:37:29] <daemon> the chaos side when it has a response can just act as an openapi client and push what it got straight at mojo
[15:37:35] <daemon> well post what its got
[15:38:00] <batman> Ovid: Which wiring is needed?
[15:39:00] <batman> daemon: Maybe you want https://metacpan.org/pod/Minion or something similar?
[15:39:01] <Paperbot_> Link title(s): [ Minion - Job queue - metacpan.org ]
[15:39:33] <daemon> well who does'nt love having minions
[15:39:38] <daemon> looks interesting I will take a read :)
[15:41:08] *** Quits: Sleepy63 (~Sleepy63@user/sleepy63) (Read error: Connection reset by peer)
[15:41:28] *** Quits: judabuda (kowbunga@thunderirc.net) (Changing host)
[15:41:28] *** Joins: judabuda (kowbunga@user/judabuda)
[15:43:58] <Ovid> batman: it was having to annotate my Swagger file with things like `x-mojo-to` to get it to dispatch. Maybe it's changed since I last used it.
[15:44:27] <batman> Ovid: No, that's still the same.
[15:45:30] <daemon> that reminds me where is the openapi chhannel
[15:45:35] <daemon> is it mojo-openapi ?
[15:45:41] <batman> #perl-openapi
[15:45:42] <Ovid> I've had issues with teams with multiple languages sharing an OpenAPI doc (which makes sense) and when they're editing the doc, they have no idea what this wiring is for.
[15:45:49] <daemon> batman++ # ah cheers
[15:46:26] <batman> Ovid: They shouldn't have to care, since it's prefixed with "x-" though
[15:47:05] <daemon> yeah I think the prefix x- is quite literally meant for 'keyvals for apps' i.e. ignore
[15:47:18] <Altreus> I have reservations about doing that sort of thing from outside the app
[15:47:18] <batman> daemon: That is correct
[15:48:26] <batman> Altreus: You could add "x-mojo-to" inside your app if you want to. Doesn't have to be in the source file
[15:48:30] <Ovid> Net::OpenAPI says "just write your swagger and we'll dispatch correctly." Wish we had the time to finish it.
[15:48:53] <Altreus> oh you can? Perhaps I didn't grok it sufficiently under pressure :)
[15:49:32] <batman> Ovid: The reason I chose not to go with a code generator is that I change my specification quite often (adding endpoints and/or parameters), and I don't want to change the generated code on disk to handle that
[15:50:20] <Altreus> I would like a *source* generator but not a *behaviour* generator
[15:50:25] <Altreus> i.e.
[15:50:35] <Altreus> a dev tool to make the files, not a runtime tool to make the behaviour
[15:50:38] <Ovid> batman: our generated code uses https://metacpan.org/pod/CodeGen::Protection (conceptually similar to DBIx::Class::Schema::Loader's protection of it's generated code), so you can regenerate your code at will and not lose anything.
[15:50:38] <Paperbot_> Link title(s): [ CodeGen::Protection - Safely rewrite parts of generated code - metacpan.org ]
[15:50:56] <Altreus> yeah like that
[15:51:08] <batman> Altreus: $app->plugin("OpenAPI" => {spec => \%modified_spec_after_reading_it});
[15:51:34] <Altreus> although I would probably shy away from regenerating it - normally I've written a big spec and want an app to handle it, but changes after that I can do myself
[15:51:41] <Altreus> batman: right, I guess I hadn't considered that
[15:52:08] <Altreus> Feels a little hacky but I suppose the "not hacky" way would really just be to have a method on the plugin that did it for me
[15:52:16] <Altreus> which is the same amount of hacky but it's sanctioned now
[15:52:59] <batman> Altreus: I don't know of any way for the plugin to do that in a generic way. I'll add it right away if you have a solution
[15:53:02] <daemon> just keep making it more hacky until its genius 
[15:53:11] <batman> (Using operationId does not work)
[15:53:49] <daemon> batman, as a strange aside this minion module is awesome, cheers for that one
[15:53:50] *** Joins: bmeneg (~bmeneg@2001:1284:f013:917a:660a:3846:a9f1:30e9)
[15:53:55] <batman> Ovid: Cool. That's at least better than a lot of the other codegenerators out there :)
[15:54:33] <Altreus> batman: I'm just the ideas guy :D
[15:54:43] <batman> daemon: Glad you found it interesting :)
[15:56:15] <batman> Altreus: M::P::OpenAPI used to convert the "OperationId" value in the spec to generate controller#action combination, but the ruleset to do so got very complicated and almost impossible to understand. On top of that, it was very easy to get collisions and dispatching to the wrong controller if you loaded multiple specs into the same Mojolicious application
[15:57:32] <batman> One thing I have considered is to add a callback that can calculate "x-mojo-to" on the fly, but I'm not too keen on adding something I won't ever use myself... I'll take a PR though
[15:58:54] <batman> Something like $app->plugin("OpenAPI" => {spec => ..., route_to => sub { my $spec = shift; ... return "controller#action" }});
[15:59:43] <Altreus> well I was just thinking that last thing would be how I did it to begin with
[16:00:00] <Altreus> or at least just a simple hash of OpenAPI-name => mojo-name
[16:00:43] <Altreus> conversion is great for simple defaults but I've learned it should always be based on a thing the dev has full control over
[16:02:50] *** Joins: anthk_ (~anthk_@92.176.105.30)
[16:13:58] *** Joins: X-Scale` (~ARM@46.50.0.45)
[16:15:33] *** Quits: CaptainSludge (~CaptainSl@174.34.184.130) (Ping timeout: 268 seconds)
[16:15:57] *** Quits: X-Scale (~ARM@46.50.5.253) (Ping timeout: 268 seconds)
[16:15:59] *** X-Scale` is now known as X-Scale
[16:27:09] *** Joins: G_SabinoMullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net)
[16:27:10] *** Joins: G_Sabino1ullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net)
[16:32:46] <daemon> Altreus, YAML or TOML
[16:33:00] <Altreus> the heck is TOML
[16:33:06] *** Joins: mattil_ (~mattil@helsinki.portalify.com)
[16:33:13] <daemon> really :o
[16:33:22] <daemon> https://github.com/toml-lang/toml
[16:33:23] <Paperbot_> Link title(s): [ GitHub - toml-lang/toml: Tom's Obvious, Minimal Language ]
[16:34:25] <daemon> same as your cargo files in rust
[16:37:08] *** Quits: mattil (~mattil@airio.portalify.com) (Ping timeout: 268 seconds)
[16:39:32] <batman> Altreus, Ovid, daemon: No need for x-mojo-to anymore :P https://github.com/jhthorsen/mojolicious-plugin-openapi/commit/c74c3da6d442573863b86725ad55df331526f5d3
[16:39:33] <Paperbot_> Link title(s): [ Add support for adding $route->to(...) programmatically · jhthorsen/mojolicious-plugin-openapi@c7... ]
[16:39:48] <daemon> nice :)
[16:41:08] *** Quits: vjuen (~Username@leased-line-217-21-59-112.telecom.by) (Quit: Going offline, see ya! (www.adiirc.com))
[16:41:46] <batman> I guess "...but I'm not too keen on adding something I won't ever use myself" was wrong, hehe
[16:41:55] * GumbyPAN CPAN Upload: Mojolicious-Plugin-OpenAPI-4.06 by JHTHORSEN https://metacpan.org/release/JHTHORSEN/Mojolicious-Plugin-OpenAPI-4.06
[16:42:31] <Ovid> batman: sweet! 
[16:43:13] *** Quits: mattil_ (~mattil@helsinki.portalify.com) (Remote host closed the connection)
[16:43:42] <batman> Guess I should've asked for a code review (at least doc review) before releasing it... Next time :/
[16:43:46] *** Joins: mattil (~mattil@helsinki.portalify.com)
[16:51:57] *** Joins: vjuen (~Username@leased-line-217-21-59-112.telecom.by)
[16:52:20] *** Quits: mattil (~mattil@helsinki.portalify.com) (Ping timeout: 268 seconds)
[16:52:56] *** Joins: mattil (~mattil@helsinki.portalify.com)
[16:58:11] *** Joins: gryphn (~gryphn@191.96.106.243)
[16:59:27] <daemon> how do you 'use' modules if a particular scalar is set, there is some way to do it even in runtime
[17:01:58] * GumbyPAN CPAN Upload: Text-Minify-XS-v0.4.6 by RRWO https://metacpan.org/release/RRWO/Text-Minify-XS-v0.4.6
[17:02:12] <Altreus> use if
[17:02:18] <Altreus> perlbot: perldoc if
[17:02:19] <perlbot> Altreus: Your documentation is available at: https://perldoc.perl.org/if
[17:02:31] <daemon> suffix'ed if
[17:02:33] <daemon> eww
[17:02:35] <Altreus> no, if.pm
[17:02:48] <daemon> ah that might be better ;p
[17:02:52] <Altreus> it's infix if
[17:02:54] <Altreus> :))
[17:03:18] <daemon> it looks so wrong
[17:06:22] <ilmari> https://metacpan.org/pod/unless - even better!
[17:06:23] <Paperbot_> Link title(s): [ unless - use a Perl module unless a condition holds - metacpan.org ]
[17:07:27] *** Quits: bes_internal (~bes@leased-line-217-21-59-112.telecom.by) (Read error: Connection reset by peer)
[17:07:27] *** Quits: vjuen (~Username@leased-line-217-21-59-112.telecom.by) (Read error: Connection reset by peer)
[17:08:59] <EvanCarroll> oh god...
[17:11:10] *** Joins: vjuen (~Username@leased-line-217-21-59-112.telecom.by)
[17:11:41] *** Joins: bes_internal (~bes@leased-line-217-21-59-112.telecom.by)
[17:12:23] <daemon> I wanted to load Carp and Data::Dumper if DEBUG was in env I think I will just leave them in >.>
[17:13:38] <LeoNerd> I usually do that with  use constant DEBUG => $ENV{DEBUG};  and then things conditional on that
[17:13:46] <LeoNerd> It makes them compile away to nothing if not set
[17:13:58] <daemon> oooh that is a cool idea
[17:14:01] <daemon> LeoNerd++ # ta
[17:14:32] *** Quits: EvanCarroll (~ecarroll@172.58.101.107) (Ping timeout: 268 seconds)
[17:14:43] <daemon> wait though does that still mean I need to do
[17:14:50] <daemon> 'use Data::Dumper if $DEBUG'
[17:15:05] <daemon> 'use Data::Dumper if DEBUG'
[17:15:06] <daemon> even
[17:15:08] <LeoNerd> I just wouln't `use` those
[17:15:14] <LeoNerd> if(DEBUG) { require Data::Dumper }
[17:15:29] <daemon> will that bring data::dumper into the entire scope of the package 
[17:15:33] <LeoNerd> Then elsewhere   if(DEBUG) { Data::Dumper::Dump( ... ) }
[17:15:38] <LeoNerd> No it's a require. not a use
[17:15:52] <daemon> ok so it 'loads it' but does not import Dumper() into the global scope
[17:15:59] <LeoNerd> correct
[17:16:02] <daemon> so I can still use it by its object path Data::Dumper::...
[17:16:07] <daemon> right that is kind of cool
[17:16:07] <LeoNerd> use == BEGIN { require; import }
[17:16:09] *** Joins: EvanCarroll (~ecarroll@c-73-32-86-244.hsd1.tx.comcast.net)
[17:16:52] *** Quits: aspic (~shifty~~~@ppp121-44-99-39.syd-gls-har-bras38.tpg.internode.on.net) (Ping timeout: 260 seconds)
[17:16:58] <daemon> I bet you could then get away with: sub Dumper(@args) { if (DEBUG) { Data::Dumper::Dumper(@args) } }
[17:17:02] <daemon> to artificially put it in scope
[17:17:09] *** Joins: aspic (~shifty~~~@ppp121-44-123-188.syd-gls-har-bras39.tpg.internode.on.net)
[17:17:34] <LeoNerd> Yeah that would work, but then you have the entersub overhead of calling it every time evne if debugging is turned off
[17:18:02] <LeoNerd> I've sometimes pondered on a sub attribute that says to throw away callers to the sub, if its body is empty
[17:18:05] <daemon> true, but I would still have if (DEBUG) in the right places
[17:18:13] <LeoNerd> Dumper(thing) if DEBUG;
[17:18:18] <LeoNerd> isn't too hard to write
[17:18:36] <daemon> yeah I am trying my best to stay away from suffixed operators
[17:18:43] <daemon> but same thing either way
[17:18:59] <LeoNerd> Collective hivemind: find me a better name for    sub Dumper :Grapefruit (@args) { Data::Dumper::Dumper(@args) if DEBUG; }
[17:19:12] <LeoNerd> :DontBotherCallingThisSubAtAllIfItsBodyIsEmpty
[17:20:09] <daemon> what about doing something like allowing hints on the lhs of the sub name
[17:20:19] <daemon> sub ?blah(...) { }
[17:20:52] <daemon> mhmm its a little cryptic looking though
[17:21:02] <LeoNerd> Alternatively I could write something that is actually vaild Perl syntax and works just fine on every perl since 5.12 that I could put on CPAN *today*
[17:21:10] <vague> I usually write a sub verbose that then checks the debug flag and level, verbose(1, $obj, 'title') later to call it, ::Dump allows for setting the VAR name
[17:21:35] <vague> And the int is the minimum debuglevel 
[17:23:02] <ilmari> LeoNerd: :OmitIfEmpty?
[17:23:18] <ilmari> vague: the problem with that is that it still evaluates the arguments, which can be expensive
[17:23:29] <daemon> :NotNull ?
[17:23:44] <vague> ilmari, WFM :)
[17:24:18] <ilmari> presumably LeoNerd would add a call checker that eliminates the whole entersub op (including children) if the sub is empty
[17:24:51] <LeoNerd> That was my thinking
[17:25:00] <LeoNerd> And if you did  Dumper($x++);  then On Your Head Be It
[17:25:25] <LeoNerd> Hrm.. though maybe I could detect/warn that?
[17:26:39] *** Joins: slowButPresent (~slowButPr@user/slowbutpresent)
[17:30:23] *** Quits: mattil (~mattil@helsinki.portalify.com) (Remote host closed the connection)
[17:33:56] *** Quits: hethw (~heth@46.238.32.56) (Quit: Leaving)
[17:40:06] *** Joins: mattil (~mattil@dzy2p1qqlqb0lv7by3y-4.rev.dnainternet.fi)
[17:44:09] *** Quits: mattil (~mattil@dzy2p1qqlqb0lv7by3y-4.rev.dnainternet.fi) (Remote host closed the connection)
[17:51:02] *** Joins: mattil (~mattil@dzy2p1qqlqb0lv7by3y-4.rev.dnainternet.fi)
[18:02:44] *** Quits: Michelle (~michelle@203.206.128.220) (Quit: Leaving)
[18:03:19] *** Quits: mattil (~mattil@dzy2p1qqlqb0lv7by3y-4.rev.dnainternet.fi) (Remote host closed the connection)
[18:03:46] *** Joins: mattil (~mattil@dzy2p1qqlqb0lv7by3y-4.rev.dnainternet.fi)
[18:05:55] *** Quits: dotandimet (~dotandime@evomr2.evogene.com) (Read error: Connection reset by peer)
[18:08:48] *** Quits: mattil (~mattil@dzy2p1qqlqb0lv7by3y-4.rev.dnainternet.fi) (Ping timeout: 268 seconds)
[18:12:24] <daemon> how can I force warn and die to call longmess and confess instead
[18:12:30] <daemon> I have done it before but totally forgot how
[18:13:26] <Altreus> Carp::Always?
[18:14:26] <shlomif> daemon: %SIG?
[18:15:54] *** Joins: magla (~gelignite@55d4261d.access.ecotel.net)
[18:16:37] *** Joins: Michelle (~michelle@203.206.128.220)
[18:17:08] <daemon> Altreus, wanted to stay core, even though the source code for carp::always is tinty
[18:17:30] <daemon> shlomif, is all you have to do $SIG{__WARN__|__DIE__} = FUNC ?
[18:17:45] <daemon> I thought that but it seemed to get ignored 
[18:18:18] *** Joins: zakame (~zakame@user/zakame)
[18:18:49] <shlomif> daemon: strange - did you use "local"?
[18:19:07] <Altreus> can you really do __WARN__|__DIE__ tho
[18:19:30] <Altreus> daemon: just bloody install it and stop being a damn purist
[18:19:32] <Altreus> it's a dev tool
[18:19:49] <daemon> shlomif, https://i.imgur.com/TIHfm6D.png
[18:19:56] <daemon> might be that its within that { } scope
[18:20:00] <daemon> but I thought they was global anyway
[18:21:16] <shlomif> daemon: "= \&longmess;"
[18:21:27] <daemon> ah it has to be a ref of course it bloody does >.>
[18:21:32] <daemon> shlomif++ # cheers
[18:21:52] *** Quits: randir (~randir@93.159.239.42) (Remote host closed the connection)
[18:21:57] <shlomif> daemon: thanks!
[18:22:05] <Altreus> pretty sure you can give it the name of the func as a string
[18:22:27] <Altreus> obviously you can't give it the result of calling the func
[18:22:33] <Altreus> which is what you did
[18:22:36] <Altreus> Someone needs a holiday
[18:23:06] <daemon> everyone needs a holiday :P
[18:25:26] *** Joins: mattil (~mattil@helsinki.portalify.com)
[18:26:38] <Altreus> some of us actually take them
[18:26:40] <Altreus> :)
[18:27:11] * shlomif gives chanukkah to grandpa xmas
[18:27:14] <daemon> holiday is great time to catch up on personal projects
[18:27:15] <daemon> :D
[18:27:27] *** Quits: aspic (~shifty~~~@ppp121-44-123-188.syd-gls-har-bras39.tpg.internode.on.net) (Ping timeout: 260 seconds)
[18:28:30] <EvanCarroll> Devel::Confess > Carp::Always
[18:29:23] <daemon> perlbot core Devel::Confess
[18:29:24] <perlbot> daemon: Module Devel::Confess does not appear to be in core. Perhaps capitalization matters or try using the 'cpan' command to search for it.
[18:30:30] *** Joins: gast0n (~g4570n@user/gast0n)
[18:33:13] <Altreus> fuck core
[18:34:11] <daemon> could always remove it :D 
[18:34:54] <Altreus> things are being removed from core anyway
[18:36:07] *** Joins: mattil_ (~mattil@helsinki.portalify.com)
[18:36:09] <daemon> what has been removed (just out of curiosity)
[18:36:48] <Altreus> CGI!
[18:36:54] <LeoNerd> smartmatch!
[18:37:13] <LeoNerd> .. well, we wish. Can't really remove it any time soon, but it's now no longer enabled by the current versioned feature bundle
[18:37:28] <Altreus> can we have a different word for core and core?
[18:37:39] <daemon> core and base ?
[18:37:49] *** Joins: mattil___ (~mattil@helsinki.portalify.com)
[18:38:10] <Altreus> core can mean "stuff the interpreter does", and "stuff that happens to be installed for you" can be called ... pre-packaged modules?
[18:38:38] <daemon> well I say base from the os world, you have the kernel and the base package set
[18:40:02] *** Quits: mattil (~mattil@helsinki.portalify.com) (Ping timeout: 260 seconds)
[18:40:21] *** Joins: proller (~p@2a02:6b8:0:51e:2929:5f87:67f3:d43d)
[18:41:05] *** Quits: mattil_ (~mattil@helsinki.portalify.com) (Ping timeout: 268 seconds)
[18:42:43] *** Quits: mattil___ (~mattil@helsinki.portalify.com) (Ping timeout: 268 seconds)
[18:42:44] <Altreus> yeah if you like :)
[18:43:13] <Altreus> the problem with core has always been, in my mind, the implication that it is both sufficient and supported
[18:43:27] <Altreus> whereas it is barely sufficient to install useful modules, and contains crap
[18:44:08] *** Joins: randir (~randir@95-25-59-33.broadband.corbina.ru)
[18:51:09] *** Joins: merpaderp (~nobody@89.111.36.243)
[18:53:35] *** Quits: jetchisel (jetchisel@user/jetchisel) (Ping timeout: 260 seconds)
[18:53:49] *** Joins: YaoNai (~YaoNai@user/yaonai)
[18:55:01] *** Joins: jetchisel (jetchisel@user/jetchisel)
[18:56:17] *** Quits: Spiney (~Spiney@2604:a880:400:d0::1d82:b001) (Ping timeout: 245 seconds)
[18:57:09] * GumbyPAN CPAN Upload: Tickit-Widget-Term-0.005 by PEVANS https://metacpan.org/release/PEVANS/Tickit-Widget-Term-0.005
[18:58:01] *** Joins: Spiney (~Spiney@2604:a880:400:d0::1d82:b001)
[18:59:59] *** Quits: jetchisel (jetchisel@user/jetchisel) (Max SendQ exceeded)
[19:00:27] *** Quits: art1 (~romeyke@p200300ccdf0a9d0076d5c930cd88268e.dip0.t-ipconnect.de) (Quit: Leaving.)
[19:00:45] *** Joins: jetchisel (jetchisel@user/jetchisel)
[19:01:30] *** Joins: omegatron (~some@p54849842.dip0.t-ipconnect.de)
[19:10:00] *** Quits: zakame (~zakame@user/zakame) (Quit: WeeChat 2.9)
[19:12:32] *** Quits: proller (~p@2a02:6b8:0:51e:2929:5f87:67f3:d43d) (Ping timeout: 268 seconds)
[19:12:37] *** Quits: vjuen (~Username@leased-line-217-21-59-112.telecom.by) (Quit: Going offline, see ya! (www.adiirc.com))
[19:19:39] *** Joins: rpath (~rpath@gateway/tor-sasl/rpath)
[19:24:49] *** Joins: proller (~p@2a02:6b8:0:51e:ee7c:dd6c:6906:ce51)
[19:24:51] *** Joins: vjuen (~Username@leased-line-217-21-59-112.telecom.by)
[19:27:01] <daemon> Altreus, https://web.docker.com/index.php/email/emailWebview?md_id=1495
[19:27:02] <Paperbot_> Link title(s): [ Marketo ]
[19:27:11] <daemon> docker workshop not sure if interested
[19:28:09] <Altreus> probably not
[19:28:12] <Altreus> it says php in the url
[19:28:23] <daemon> lol
[19:29:26] <rewt> "This email is only viewable in the web viewer when clicking through the original email"
[19:30:04] <daemon> yes it was emailed to me
[19:30:18] <daemon> there is likely a non-email-id one on the main site somewhere 
[19:30:41] <rewt> which it doesn't link to, so that link is kinda useless outside your email
[19:30:50] <Altreus> dunno why they do that
[19:30:52] <Altreus> it's hardly private
[19:31:00] <Altreus> Just link to the public announcement in the email
[19:31:05] <rewt> tracking
[19:31:08] <daemon> yeah that is kind of what I thought it was :P
[19:31:14] <daemon> did not realise it was specifically to me
[19:32:07] <daemon> ah here we go, this is the de-emailed register link https://www.docker.com/event-community-all-hands
[19:32:07] <Paperbot_> Link title(s): [ Docker Community All-Hands | Docker ]
[19:32:13] * GumbyPAN CPAN Upload: Valiant-0.001008 by JJNAPIORK https://metacpan.org/release/JJNAPIORK/Valiant-0.001008
[19:36:49] *** Joins: thrig (~thrig@65.113.153.50)
[19:43:57] *** Quits: slowButPresent (~slowButPr@user/slowbutpresent) (Quit: leaving)
[19:48:16] *** Quits: YaoNai (~YaoNai@user/yaonai) (Quit: leaving)
[19:50:02] *** Joins: bit4bit (~bit4bit@190.128.123.78)
[19:51:10] *** Quits: akaWolf (~akaWolf@akawolf.org) (Ping timeout: 268 seconds)
[19:51:12] *** Joins: willthechill (~willthech@2600:1700:8c61:3ed0:4c15:d40c:52c8:5b34)
[19:52:25] *** Quits: diskin (~diskin@ec2-18-158-74-148.eu-central-1.compute.amazonaws.com) (Read error: Connection reset by peer)
[19:54:01] *** Joins: diskin (~diskin@46.41.127.26)
[19:57:36] <mjgardner> New blog post describing a simple web log analysis script: https://phoenixtrap.com/2021/09/14/a-good-old-fashioned-perl-log-analyzer/
[19:57:39] <Paperbot_> Link title(s): [ A good old-fashioned Perl log analyzer - The Phoenix Trap ]
[20:08:01] *** Joins: diskin_ (~diskin@ec2-18-158-74-148.eu-central-1.compute.amazonaws.com)
[20:08:01] *** Quits: diskin (~diskin@46.41.127.26) (Killed (molybdenum.libera.chat (Nickname regained by services)))
[20:08:01] *** diskin_ is now known as diskin
[20:19:04] *** Quits: R2robot (~R2robot@user/r2robot) (Quit: Pull the lever, Kronk.  Wrong leverrrrrrr!)
[20:19:38] *** Joins: zakame (~zakame@user/zakame)
[20:25:58] *** Quits: FastJack (~fastjack@b2b-78-94-22-14.unitymedia.biz) (Ping timeout: 252 seconds)
[20:27:08] *** Joins: FastJack (~fastjack@b2b-78-94-22-14.unitymedia.biz)
[20:27:48] *** Joins: slowButPresent (~slowButPr@user/slowbutpresent)
[20:28:36] *** Joins: tobybl_ (~tobybl@208.193.115.87.dyn.plus.net)
[20:29:20] <gordonfish> sweval: +{ +foo => 123 }; # Why exactly does the + in +foo disappear?
[20:29:22] <perlbot> gordonfish: {foo => 123}
[20:29:56] <ilmari> gordonfish: because the unary + operator is a no-op at runtime
[20:31:15] *** Quits: tobybl (~tobybl@208.193.115.87.dyn.plus.net) (Ping timeout: 268 seconds)
[20:31:31] <Altreus> it was never there :O
[20:31:34] <ilmari> it only affects the parser, forcing it to interpret what's next as an expression
[20:31:50] <Altreus> gordonfish: specifically, Dumper does not believe this hashref requires disambiguating
[20:31:57] <Altreus> I'm not sure if it ever thinks it does
[20:32:05] <gordonfish> ilmari: Oh, right
[20:32:40] <gordonfish> Thanks
[20:33:14] *** Joins: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com)
[20:34:39] <Altreus> gordonfish: the corresponding "this is a block" is {; }
[20:34:57] <Altreus> oh you asked about +foo :D
[20:35:03] <Altreus> same answer tbh
[20:35:16] <thrig> pretty sure the map docs cover the cases
[20:35:18] <Altreus> the equivalent for foo is foo() I suppose
[20:36:00] *** Quits: jplesnik (jplesnik@nat-pool-brq-t.redhat.com) (Quit: Leaving)
[20:37:51] *** xv8 is now known as XV8
[20:39:48] <gordonfish> Altreus: Yeah, it just didn't click for me right off that + on a key name was the same unary + I knew elsewhere, makes sense now. Guess I was just low on caffine.
[20:40:10] *** Joins: R2robot (~R2robot@user/r2robot)
[20:40:17] <Altreus> unary - upsets me at a philosophical level though
[20:40:26] <Altreus> sweval: { -foo => 'bar' }
[20:40:28] <perlbot> Altreus: Useless use of a constant ("-foo") in void context at (IRC) line 1. bar
[20:40:29] <gordonfish> I was also probably crossing it in my mind with -foo keys
[20:40:33] <Altreus> sweval: +{ -foo => 'bar' }
[20:40:35] <perlbot> Altreus: {"-foo" => "bar"}
[20:40:40] <Altreus> ah that's what dumper does
[20:40:48] <gordonfish> Heh, and you write an example at the same time I mention it ;p
[20:40:52] <Altreus> :)
[20:41:04] <Altreus> they upset me even more now I know they confuse the parser
[20:41:40] <LeoNerd> sweval: +{ -if => "hello" }
[20:41:42] <perlbot> LeoNerd: {"-if" => "hello"}
[20:41:47] <thrig> outlaw negative values, they aren't positive enough
[20:41:58] <LeoNerd> sweval: use Future::AsyncAwait; +{ -async => "hello" }
[20:42:00] <perlbot> LeoNerd: ERROR: Can't locate Future/AsyncAwait.pm in @INC (you may need to install the Future::AsyncAwait module) (@INC contains: $BLEAD/lib/site_perl/5.35.3/x86_64-linux $BLEAD/lib/site_perl/5.35.3 $BLEAD/lib/5.35.3/x86_64-linux $BLEAD/lib/5.35.3) at (IRC) line 1. BEGIN failed--compilation aborted at (IRC) line 1. 
[20:42:06] <LeoNerd> ... well, screwyou:/
[20:42:14] <LeoNerd> Anyway.. that confuses the F-AA parser :(
[20:42:35] <gordonfish> LeoNerd: Wouldn't -async => ... just be seen as a key ?
[20:42:48] <LeoNerd> You'd think, but no
[20:42:52] <gordonfish> That is, async is just a string
[20:43:07] <thrig> positive values would be a "better culture fit" and would have "good energy" on the job
[20:43:13] *** Quits: tobybl_ (~tobybl@208.193.115.87.dyn.plus.net) (Remote host closed the connection)
[20:43:20] <gordonfish> sweval: [ { +die => 123 } ];
[20:43:22] <perlbot> gordonfish: [{die => 123}]
[20:43:31] <LeoNerd> Ohhuh.. maybe it does.. hrm
[20:43:34] <gordonfish> LeoNerd: Why would it be any different?
[20:43:43] *** Quits: FastJack (~fastjack@b2b-78-94-22-14.unitymedia.biz) (Remote host closed the connection)
[20:43:50] <Altreus> F-AA looks like a plane or something
[20:44:04] *** Joins: FastJack (~fastjack@b2b-78-94-22-14.unitymedia.biz)
[20:44:17] *** Quits: R2robot (~R2robot@user/r2robot) (Client Quit)
[20:44:25] <Altreus> or a gun I suppose
[20:44:25] <LeoNerd> gordonfish: because PL_keyword_plugin has different rules
[20:44:34] <LeoNerd> I forget quite what does and doesn't work
[20:44:35] <gordonfish> Ah
[20:44:45] <thrig> Fighter Anti-Async?
[20:44:47] <LeoNerd> There was a problem with Mojo doing   use Mojo::Base -async;  in that it confused the parser
[20:44:58] <LeoNerd> They had to rename it  use Mojo::Base -async_await;  because of that
[20:47:17] <simcop2387> ok, deciding between books to reread, asimov's foundation or some heinlein
[20:48:10] <ilmari> simcop2387: welcome back!
[20:48:19] *** Joins: tirnanog (~tirnanog@user/tirnanog)
[20:48:40] <simcop2387> yeas some stupid vm crash i didnt notice.  need to get it autorestarting/
[20:49:31] <simcop2387> been too busy setting up new backups and prepping for a move
[20:53:20] <Altreus> LeoNerd: pretty much unary minus can go away
[20:53:31] <simcop2387> ilmari: i got an lto-8 tape drive for my servers :) rack mount kit arrives at the speed of customs from canada and then i just need to finish setting up all the backup jobs (doing a 24tb test right now)
[20:53:34] <LeoNerd> It's annoying either way, yeeah
[20:53:39] <Altreus> having to decide whether the bareword after it is already a function or not is silly
[20:53:51] <Altreus> all it does is make words look more command-line-switchy
[20:54:11] <Altreus> Plus, it has no inherent meaning
[20:54:26] <Altreus> what does "use Mojo::Base -async" actually do?
[20:54:31] <simcop2387> - readline
[20:54:41] <Altreus> I understand "use Mojo::Base '!async'" and "use Mojo::Base 'async'"
[20:54:51] <simcop2387> or :async
[20:54:55] <Altreus> right
[20:55:07] <Altreus> unary minus only means "negative" in any generally-understood sense
[20:55:13] <LeoNerd> UNIX's use of "-foo" to turn *on* a thing called foo has always annoyed me
[20:55:24] <Altreus> That's why I always set gnu_getopt
[20:55:36] <LeoNerd> I used a DOS program once that used +opt to turn on options, and -opt to turn them off
[20:55:42] <Altreus> I've used that myself
[20:55:46] <LeoNerd> It avoids needing that stupid  --no-thingy  convention
[20:55:48] <Altreus> in Perl
[20:55:51] <LeoNerd> It makes -soooo- much sense
[20:56:01] <Altreus> I'm OK to accept that there's a domain-specific meaning of -
[20:56:06] <Altreus> but that's shell, not perl
[20:56:16] <LeoNerd> It's not even shell. It's more UNIX commandline argument conventions
[20:56:20] <simcop2387> dos argument logic though is a horrid mess though
[20:56:22] <Altreus> and honestly I much prefer --no- if we have to be stuck with it
[20:56:24] <LeoNerd> shell doesn't care, it just passes opaque strings through
[20:56:35] <Altreus> shell doesn't care, but the knowledge is still within that domain
[20:56:41] <Altreus> as in, this is shell conventions
[20:57:05] <Altreus> I don't understand why it exists in Perl
[20:58:25] <LeoNerd> Very early perl
[20:58:40] <LeoNerd> Don't forget, very early perl was "eh, I would write a shell/awk/sed script but this is just a little bit neater"
[20:58:55] <gordonfish> Re: <LeoNerd> I used a DOS program once that used +opt to turn on options, and -opt to turn them off
[20:59:08] <gordonfish> I wish more programs would use that convension for their options. I remember that from way back in DOS as well.
[20:59:32] <gordonfish> Haven't seen it in a long time though, so nice blast from the past.
[21:00:30] <Altreus> can we deprecate it :D
[21:00:47] <Altreus> it could be gone by 5.48
[21:01:14] <LeoNerd> I'm hoping there'll never be a 5.48
[21:01:22] <LeoNerd> I fully aim to have bumped to 7 waaay before then
[21:01:25] <Altreus> it bothers me that windows apps still use /option
[21:01:32] <Altreus> ok can we remove it for 7
[21:01:43] <Altreus> point someting
[21:01:53] <Altreus> 5.48 is basically 7.8 or so, right?
[21:02:01] <Altreus> no that doesn't compute
[21:02:04] <Altreus> you get the idea
[21:02:04] <LeoNerd> Mmm.. probably somewhere around there
[21:02:05] <ilmari> gordonfish: you mean like (ba)sh's `set` command
[21:02:59] <ilmari> ah, no, that's the opposite
[21:03:09] <Altreus> LeoNerd: oh, just realised why you did -if
[21:03:13] <ilmari> «Using + rather than - causes these flags to be turned off.» - because double negation
[21:03:22] <Altreus> eval: use Data::Dumper -if;
[21:03:24] <gordonfish> Altreus: I believe most windows apps (or many that I am recalling) support both /foo and -foo forms
[21:03:24] <perlbot> Altreus: ERROR: syntax error at (IRC) line 1, near "-if" 
[21:03:43] <Altreus> LeoNerd: looks like you can't just arbitrarily use syntax keywords after unary minus
[21:03:47] <LeoNerd> Yah
[21:04:04] <Altreus> which means unary minus and custom keywords are incompatible
[21:04:07] <Altreus> which means it has to go
[21:04:09] <Altreus> :)
[21:04:11] <gordonfish> I believe it needs to be used like a hash:
[21:04:16] <gordonfish> eval: use Data::Dumper -if => 123;
[21:04:18] <perlbot> gordonfish: ERROR: Data::Dumper version 123 required--this is only version 2.183 at $BLEAD/lib/5.35.3/Exporter/Heavy.pm line 125. BEGIN failed--compilation aborted at (IRC) line 1. 
[21:04:29] <gordonfish> close 'nough
[21:04:30] <Altreus> gordonfish: Mojo::Base didn't require it
[21:04:35] <gordonfish> Oh
[21:04:38] <Altreus> it was `use Mojo::Base -async;`
[21:04:47] <gordonfish> sweval: use Mojo::Base -async;
[21:04:48] <Altreus> the problem is, if you can now introduce custom keywords, nothing is safe
[21:04:54] <perlbot> gordonfish: ERROR: Unsupported flag: -async at (IRC) line 1. BEGIN failed--compilation aborted at (IRC) line 1. 
[21:05:03] <Altreus> (it's async_await now)
[21:05:06] <Altreus> But even that's not safe
[21:05:11] <gordonfish> sweval: use Mojo::Base -async_await;
[21:05:13] <perlbot> gordonfish: ERROR: Future::AsyncAwait 0.36+ is required for async/await at (IRC) line 1. BEGIN failed--compilation aborted at (IRC) line 1. 
[21:05:13] <Altreus> someone could make a keyword async_await
[21:05:15] <gordonfish> Altreus: No one is safe
[21:05:26] <Altreus> the only safe way is not to use unary minus
[21:05:32] <LeoNerd> Or just quote the keys
[21:05:39] <Altreus> that's not unary minus
[21:05:42] <LeoNerd> Which kinda defeats the point of the hyphen then
[21:05:42] <Altreus> that's a string
[21:05:44] <LeoNerd> yah
[21:05:54] <Altreus> LeoNerd: where would one raise this concern?
[21:06:14] <LeoNerd> core or F-AA or maybe XS::Parse::Keyword
[21:06:32] <LeoNerd> It's -slightly- possible I can detect the situation if the parser helps me out
[21:07:11] <Altreus> no I mean
[21:07:28] <Altreus> Perl doesn't support unary minus before a keyword, and Perl is adding custom keywords
[21:07:36] <Altreus> This means Perl does not support unary minus any more
[21:07:41] <Altreus> Someone needs to make a decision
[21:07:57] <LeoNerd> It might support it
[21:08:03] <LeoNerd> I don't know yet. I',m writing code, give me 5 mins
[21:08:17] <Altreus> each syntax module would have to individually check for it, but perl itself doesn't allow it
[21:08:22] <Altreus> as evidenced by
[21:08:33] <Altreus> sweval: use Mojo::Base -if;
[21:08:34] <perlbot> Altreus: ERROR: syntax error at (IRC) line 1, near "-if" 
[21:08:48] *** Quits: bit4bit (~bit4bit@190.128.123.78) (Ping timeout: 265 seconds)
[21:08:51] <Altreus> this is a syntax error, so Perl already doesn't support this
[21:08:53] <ilmari> sweval: -foo
[21:08:55] <perlbot> ilmari: -foo
[21:08:56] <ilmari> sweval: -if
[21:08:58] <perlbot> ilmari: ERROR: syntax error at (IRC) line 1, near "-if" 
[21:09:01] <ilmari> sweval: -for
[21:09:03] <perlbot> ilmari: ERROR: syntax error at (IRC) line 1, near "-for" 
[21:09:09] <Altreus> ah, my example was overcomplicated
[21:09:22] <ilmari> sweval: [ -for => 42 ]
[21:09:24] <perlbot> ilmari: ["-for",42]
[21:09:54] <gordonfish> sweval: -if => -say => -what => 123;
[21:09:55] <perlbot> gordonfish: Useless use of a constant ("-if") in void context at (IRC) line 1. Useless use of a constant ("-say") in void context at (IRC) line 1. Useless use of a constant ("-what") in void context at (IRC) line 1. 123
[21:10:02] <gordonfish> sweval: [ -if => -say => -what => 123 ];
[21:10:03] <perlbot> gordonfish: ["-if","-say","-what",123]
[21:10:10] <gordonfish> sweval: [ -if ];
[21:10:10] <Altreus> yeah it understands it inside a data structure
[21:10:12] <perlbot> gordonfish: ERROR: syntax error at (IRC) line 1, near "-if" 
[21:10:18] <ilmari> so the fat comman defeats keywords, but unary minus doesn't
[21:10:24] <LeoNerd> Booo.. I don't think parser helps me
[21:10:28] <Altreus> oh yes, we already knew that
[21:10:30] <ilmari> sweval: [ -for , -if ]
[21:10:31] <perlbot> ilmari: ERROR: syntax error at (IRC) line 1, near "-for " 
[21:10:49] <LeoNerd> PL_parser->expect == XTERM during  use Mojo::Base -async;   but... it's also XTERM during  my $code = async sub {};
[21:10:52] <ilmari> Altreus: nothing to do with data structures. it's just that the fat comma is more powerful than unary minus
[21:10:54] <LeoNerd> So I can't just ban that:/
[21:11:05] <Altreus> ilmari: yeah I saw that after you tried a few more things :)
[21:11:07] <Altreus> so anyway
[21:11:18] <LeoNerd> unless there's some other parser field I haven't seen before
[21:11:28] <ilmari> fat comma > keywords > unary minus
[21:11:30] <Altreus> LeoNerd: it's a noble effort but perl core doesn't bother with it
[21:11:41] <Altreus> LeoNerd: that's probably why it's not helping you either
[21:11:43] <Altreus> :)
[21:12:22] <Altreus> The issue in my mind is that either Perl core needs to rank unary minus above keywords (and thus tell keyword authors about it) or it needs to drop unary minus
[21:12:51] <Altreus> My opinion on the matter is biased
[21:14:18] * LeoNerd reads perly.y
[21:14:47] * thrig prepares flotation device in event LeoNerd needs rescue
[21:14:54] <Altreus> what's a .y
[21:15:00] <thrig> yacc
[21:15:22] <Altreus> o
[21:15:31] <Altreus> don't talk bacc
[21:15:31] <vague> yaccaty-yacc-yacc
[21:15:35] <Altreus> :)
[21:15:49] <thrig> rhymes with smack
[21:16:05] <vague> https://www.youtube.com/watch?v=aJfgHSUlr-s
[21:16:06] <Paperbot_> YouTube video linked by vague: Yakety Yak - published by The Coasters - Topic
[21:16:31] <Grinnz> sweval: - - foo =>
[21:16:33] <perlbot> Grinnz: +foo
[21:16:39] <Altreus> thought it was called yackety sax
[21:16:48] <Altreus> Grinnz: what
[21:16:55] <Grinnz> :)
[21:17:22] <Grinnz> the => isnt actually needed, i just started to write more and didnt
[21:17:51] <LeoNerd> Ugh this is horrible :/
[21:18:51] <Grinnz> anyway i was answering gordonfish in how to keep the +, at least that's my story
[21:19:11] <LeoNerd> -bareword  is implemented simply as unary minus on a normal term expr... but there's some specialcasing that that particular termexpr is exempt from strictness checks
[21:19:34] <Grinnz> which leads to some great interactions that are suddenly not strict
[21:19:58] <Grinnz> i'm not sure if it breaks with unary minus but it does with sort
[21:20:04] <Altreus> LeoNerd: so we can deprecate it? :P
[21:20:08] <LeoNerd> Ohgod well sort can just FOAD
[21:22:33] <LeoNerd> sweval: my $code = -sub { print "How about this?" }; "$code"
[21:22:36] <perlbot> LeoNerd: -94563509442176
[21:23:09] <LeoNerd> Soyeah, nope. We can't do that :/
[21:23:22] <Altreus> is my case made yet
[21:23:41] <ilmari> sweval: use constant PI => 3; say -PI
[21:23:43] <perlbot> ilmari: -3 
[21:23:49] <ilmari> who needs negative numbers anyway?
[21:24:03] <LeoNerd> I take objection to your value of pi ;)
[21:25:53] <thrig> isn't that the Biblical definition?
[21:26:23] <LeoNerd> Righty... someone remind me what I was going to do before someone distracted me with  has $slot :accessor;
[21:26:29] <ilmari> yes, that some US state tried to impose in their schools
[21:27:32] <ilmari> LeoNerd: you mean 4½ hours ago?
[21:27:42] <LeoNerd> ... wow has it really been that long?
[21:27:46] * LeoNerd updates timesheets
[21:28:52] <ilmari> 13:30 < LeoNerd> Ugh that sounds messy
[21:29:47] <LeoNerd> wow
[21:30:49] *** Joins: rinkydink (~tirnanog@user/tirnanog)
[21:30:58] *** Quits: todd (~todd@gateway/tor-sasl/toddf) (Remote host closed the connection)
[21:33:35] <Altreus> LeoNerd: you were going to raise an issue with p5p about unary minus :halo:
[21:34:09] *** Quits: tirnanog (~tirnanog@user/tirnanog) (Ping timeout: 268 seconds)
[21:34:29] *** Joins: bit4bit (~bit4bit@190.128.123.78)
[21:35:44] *** Joins: todd (~todd@gateway/tor-sasl/toddf)
[21:37:06] *** Joins: vyv (~vyv@bras-vprn-nrbaon0452w-lp130-14-76-68-6-254.dsl.bell.ca)
[21:38:12] <Grinnz> what's the issue?
[21:38:18] <Grinnz> other than the parser being dumb as bricks
[21:38:31] <Altreus> the parser is the issue
[21:38:41] <Altreus> it prefers fat comma > keyword > unary minus
[21:38:45] <Grinnz> right but was there an example that was actually broken?
[21:38:48] <Grinnz> yes
[21:38:50] <Altreus> But "keyword" is becoming flexible
[21:38:52] <Grinnz> that's intentional
[21:38:59] <Grinnz> that's also intentional
[21:39:14] <Altreus> So you can break unary minus by including a keyword module
[21:39:35] <Grinnz> oh yeah, the -async import flag issue
[21:39:39] <Altreus> right
[21:39:51] <Grinnz> yeah, that needs to work, so the only solution is to not use import flags like that
[21:39:56] <Altreus> right
[21:40:19] <Altreus> The only other common use is with a fat comma anyway
[21:40:32] <Grinnz> hopefully nobody ever introduces a base keyword 
[21:40:35] <Altreus> And to add an opinion to the mix, it's stupid and I hate it
[21:41:17] <Altreus> less rude - I don't know what it's for
[21:41:33] <Altreus> It has no conventional meaning within Perl so it seems to just be a way of adding a character to a string for fun
[21:41:39] <Grinnz> it's for shell scripting
[21:41:58] <Altreus> not sure I follow
[21:42:06] <Grinnz> more practically, it's used in import args and function args
[21:42:27] <Grinnz> and both of those are stupid to use because of the parser issues, but it's not something we can really deprecate
[21:42:38] <Altreus> in 5 :)
[21:42:47] <Grinnz> in any language which uses CPAN
[21:42:58] <Altreus> well
[21:43:31] <Altreus> It seems to me that the correct answer to Mojo::Base -async was not to rename it to -async_wait, but to quote it
[21:43:36] <Altreus> await*
[21:43:42] <Grinnz> sure, but that's ugly
[21:44:09] <Grinnz> so since nobody is introducing an async_await keyword yet, it's fine
[21:44:14] <Altreus> yet!
[21:44:41] <Altreus> It's kicking the can down the road whether or not it gets kicked again - surely the preferable answer is the one that picks up the can?
[21:44:53] <Grinnz> the preferable answer is one that works
[21:44:54] <Altreus> every other module is happy with qw(async)
[21:45:04] <Grinnz> it would have to be qw(-async)
[21:45:10] *** Quits: vyv (~vyv@bras-vprn-nrbaon0452w-lp130-14-76-68-6-254.dsl.bell.ca) (Ping timeout: 240 seconds)
[21:45:16] <Grinnz> non-minus args to Mojo::Base are subclasses
[21:45:22] <Grinnz> or parent classes rather
[21:45:36] <Altreus> ah
[21:45:54] <Altreus> I was going to be dismissive because that's a design issue, but it's only a design issue if you knew unary minus was shit up front
[21:46:01] <Grinnz> indeed
[21:46:02] <Altreus> now it's just an issue
[21:46:05] <Altreus> still
[21:46:38] <Altreus> If the preferable answer is one that works, maybe whether or not it's ugly is immaterial
[21:46:52] <Grinnz> the non-ugly one works though
[21:47:12] <Altreus> I disagree that the can being further down the road is a working solution
[21:47:19] <Altreus> someone else's problem is still a problem
[21:47:28] <Grinnz> programming is a series of choosing the least painful cans to kick
[21:48:02] <Altreus> But quoting it is picking the can up
[21:48:10] <ilmari> i.e. not the concrete-filled ones
[21:48:30] <Altreus> nobody wants to be carrying a dead tin can, to stretch the metaphor
[21:48:35] <Altreus> but it's better than the litter
[21:48:47] <Altreus> anyway
[21:48:52] <Altreus> unary minus is shit
[21:48:58] <Altreus> p7p can remove it
[21:49:08] <Altreus> :P
[21:49:32] <Altreus> the concepts collide and hoping that nobody uses this particular keyword is a suboptimal answer unfortunately
[21:49:35] *** Joins: tobybl (~tobybl@208.193.115.87.dyn.plus.net)
[21:49:54] <Altreus> perl has that warning along the lines of "may collide with future reserved word"
[21:49:59] <Altreus> no idea how to cause it though
[21:50:41] <thrig> by "running a perl5 script through a perl4 interpreter" according to perldiag
[21:50:50] <Grinnz> https://perldoc.perl.org/perldiag#%22%25s%22-may-clash-with-future-reserved-word
[21:50:51] <Paperbot_> Link title(s): [ perldiag - various Perl diagnostics - Perldoc Browser ]
[21:51:02] <Grinnz> more commonly https://perldoc.perl.org/perldiag#%25s-package-attribute-may-clash-with-future-reserved-word:-%25s
[21:51:03] <Paperbot_> Link title(s): [ perldiag - various Perl diagnostics - Perldoc Browser ]
[21:51:13] <Grinnz> er, https://perldoc.perl.org/perldiag#Unquoted-string-%22%25s%22-may-clash-with-future-reserved-word
[21:51:14] <Paperbot_> Link title(s): [ perldiag - various Perl diagnostics - Perldoc Browser ]
[21:51:17] <Grinnz> that's the one
[21:51:57] <Grinnz> sweval: open fh, '<', 'example.html'
[21:51:59] <perlbot> Grinnz: Unquoted string "fh" may clash with future reserved word at (IRC) line 1. 1
[21:52:07] <Grinnz> that's one case i know of
[21:52:15] <Altreus> ah
[21:52:35] <Altreus> I brought it up to point out we already consider such unlikely situations worthy of complaint
[21:53:16] <Grinnz> it could be applied to unary minus strings, but it would be tedious that it would cause every mojolicious application in existence to emit a torrent of warnings
[21:54:16] <Altreus> yes, unfortunately Mojo has leant on a thing that is wobbly so we can't easily pull it out
[21:54:31] <Grinnz> it's far from the only one, just the most well used
[21:54:53] <Altreus> fair and reasonable
[21:55:07] <Altreus> I've noticed it used in several places but they all made me go "but why"
[21:55:22] <Altreus> mojo's the only one I know of now that actually uses it as an indicator
[21:55:36] <Grinnz> right, i forgot to expand on the shell scripting thing
[21:55:40] *** Quits: tobybl (~tobybl@208.193.115.87.dyn.plus.net) (Remote host closed the connection)
[21:55:42] <Grinnz> people use it because it looks like a commandline flag
[21:55:43] <Altreus> oh yeah
[21:55:50] <Grinnz> rather than a quoted string
[21:56:00] <Grinnz> at least, that was the reasoning 20 years ago
[21:56:27] *** Joins: kensanata (~user@user/kensanata)
[21:56:42] <Grinnz> outside of mojo and parent.pm it's most commonly used in function args
[21:57:04] <Altreus> yeah I've seen those modules - one of the Prompt modules does it
[21:57:25] <Altreus> mostly they are named args so they use a fat comma anyway
[21:57:50] *** Joins: Pali (~pali@user/pali)
[21:58:03] <Grinnz> yeah it's like taking a command `foo -bar=baz stuff` and mapping to a function call `foo(-bar => 'baz', 'stuff')`
[21:58:10] <Grinnz> this seemed sensible at one time
[21:58:15] *** Joins: tobybl (~tobybl@208.193.115.87.dyn.plus.net)
[21:59:16] *** Joins: jess (~jess@libera/staff/jess)
[21:59:21] <Grinnz> in the sense of looking at the options that start with - as flags
[21:59:40] <Grinnz> but i've probably seen one module ever that used it properly that way, and it still didn't really need to
[22:00:01] <Grinnz> but hey it was the era of timtowtdi
[22:01:10] *** Quits: bit4bit (~bit4bit@190.128.123.78) (Ping timeout: 240 seconds)
[22:06:03] *** Parts: aindilis (~aindilis@152-44-40-72.us-chi1.upcloud.host) (ERC (IRC client for Emacs 26.1))
[22:08:49] *** Joins: bit4bit (~bit4bit@190.128.123.78)
[22:10:11] *** Quits: shlomif (~shlomif@87.68.240.100.adsl.012.net.il) (Ping timeout: 265 seconds)
[22:15:05] *** Joins: robertas (~robertas@5.20.227.227)
[22:15:52] *** Quits: robertas (~robertas@5.20.227.227) (Client Quit)
[22:19:58] *** Quits: kensanata (~user@user/kensanata) (Remote host closed the connection)
[22:21:29] * GumbyPAN CPAN Upload: Alien-PortMidi-0.01-TRIAL by JBARRETT https://metacpan.org/release/JBARRETT/Alien-PortMidi-0.01-TRIAL
[22:26:30] * GumbyPAN CPAN Upload: Locale-Places-0.06 by NHORNE https://metacpan.org/release/NHORNE/Locale-Places-0.06
[22:32:20] *** Quits: anthk_ (~anthk_@92.176.105.30) (Read error: Connection reset by peer)
[22:32:41] *** Quits: humky (~humky@user/humky) (Remote host closed the connection)
[22:34:29] <daemon> is there anyway to return from within an if block, but not leave the function it belongs to?
[22:34:52] <daemon> without something evil like goto
[22:34:53] <Grinnz> no
[22:34:58] <daemon> eh fair do's
[22:35:16] <Grinnz> generally the answer is "fix your logic structure" but if nothing else, "refactor that if into its own function"
[22:37:52] *** Quits: tobybl (~tobybl@208.193.115.87.dyn.plus.net) (Remote host closed the connection)
[22:39:49] *** Joins: txtsd (~txtsd@user/txtsd)
[22:40:45] *** Quits: pizdets (~pizdets@183.182.114.182) (Ping timeout: 268 seconds)
[22:41:00] <daemon> perlbot paste
[22:41:01] *** Joins: pizdets_ (~pizdets@183.182.111.138)
[22:41:03] <perlbot> daemon: Paste your code to the new https://l.perl.bot/#perl or http://paste.scsys.co.uk/ or https://gist.github.com/ | see allowpaste plugin as an op to control the pastebin in your channel
[22:41:13] <daemon> simcop2387, l.perl.bot is dead
[22:42:01] <daemon> so is scsys 
[22:42:02] <daemon> interesting
[22:42:41] <daemon> Grinnz, https://gist.github.com/PaulGWebster/841bbacc7c9822740a0c7efb25fcc0ec 
[22:42:42] <Paperbot_> Link title(s): [ random perl · GitHub ]
[22:42:50] *** Quits: choroba (~E.Choroba@89-101-243-80.cust.centrio.cz) (Quit: Leaving)
[22:42:51] <daemon> I went with this, not to bad I don't think
[22:42:57] <haarg> { if (...) { ...; last; } }
[22:42:58] <LeoNerd> http://paste.scsys.co.uk/  looks fine to me
[22:42:58] <Paperbot_> Link title(s): [ pasting to magnet_web ]
[22:43:06] <daemon> LeoNerd, paste something
[22:43:13] <daemon> it will wait a moment then redirect to a page it cant find
[22:43:31] <LeoNerd> daemon: http://paste.scsys.co.uk/595874
[22:43:31] <Paperbot_> Link title(s): [ magnet_web paste from "LeoNerd" at 217.168.150.38... ]
[22:43:33] <Grinnz> that sub doesn't do anything
[22:43:44] <daemon> LeoNerd, it would not let me :|
[22:43:57] <LeoNerd> I think there is some amount of antispam on it
[22:44:48] <daemon> it was strange it let me paste it showed me the page, then said it is accessible <here>
[22:44:55] <daemon> redirected to the 'here' and then said it did not exist
[22:45:43] <daemon> Grinnz, it will have another couple of checks in it, but generally its just making sure 'valid' is set to something
[22:46:45] <Grinnz> you can just do that before the if block?
[22:46:53] <daemon> Grinnz, there is a lot more options to add yet
[22:46:59] <daemon> did not want to do it in every damn one of them :)
[22:47:08] <Grinnz> before the if block would be once
[22:47:46] <Grinnz> anyway, was just makign sure you didn't think it would affect how return happens, other than that it just seems inefficient
[22:47:56] <daemon> ah ok dokey
[22:48:46] *** Quits: koo6 (~koo6@89-24-13-235.customers.tmcz.cz) (Ping timeout: 268 seconds)
[22:50:20] *** Quits: Sauvin (~sauvin@about/linux/staff/sauvin) (Remote host closed the connection)
[22:50:27] *** Quits: lembron (~admin@user/lembron) (Remote host closed the connection)
[22:51:00] <haarg> \%{$captured_options} not sure what you are expecting this to do
[22:52:18] *** Quits: rpath (~rpath@gateway/tor-sasl/rpath) (Remote host closed the connection)
[22:52:42] *** Joins: rpath (~rpath@gateway/tor-sasl/rpath)
[22:56:45] *** Joins: horsepatat (~horsepata@80.89.77.126)
[23:02:12] *** Joins: YaoNai (~YaoNai@user/yaonai)
[23:09:38] *** Joins: semeion (~semeion@user/semeion)
[23:12:15] *** Quits: horsepatat (~horsepata@80.89.77.126) (Read error: Connection reset by peer)
[23:17:42] <gordonfish> { Re: <Grinnz> sweval: - - foo => } Nice
[23:17:58] *** Quits: proller (~p@2a02:6b8:0:51e:ee7c:dd6c:6906:ce51) (Ping timeout: 268 seconds)
[23:18:09] <gordonfish> sweval: [ - -foo ]; # TIL
[23:18:11] <perlbot> gordonfish: ["+foo"]
[23:18:44] <thrig> and C too!  printf("%d\n", - -42)
[23:19:05] <gordonfish> I hadn't realized that was a thing with strings. What is the original purpose of that?
[23:19:32] <gordonfish> basheval: c 'printf("%d", - -42);'
[23:19:33] <perlbot> gordonfish: 42
[23:19:46] <gordonfish> thrig: What was that meant to do?
[23:19:52] <gordonfish> "+42" ?
[23:20:11] <thrig> and lisp!  (let ((- 0)) (- - -))
[23:20:19] <thrig> well LISP2 anyways
[23:20:22] <gordonfish> sweval: [ - -"42" ];
[23:20:24] <perlbot> gordonfish: [42]
[23:21:34] <gordonfish> sweval: [ - - "~42" ];
[23:21:35] <perlbot> gordonfish: Argument "~42" isn't numeric in negation (-) at (IRC) line 1. [0]
[23:21:37] <gordonfish> sweval: [ - - "A42" ];
[23:21:38] <perlbot> gordonfish: ["+A42"]
[23:21:40] <gordonfish> Eh??
[23:21:52] <gordonfish> Neither are numeric..
[23:22:20] <Grinnz> sweval: -foo
[23:22:21] <thrig> in C, DBL_MIN > -DBL_MAX
[23:22:23] <perlbot> Grinnz: -foo
[23:22:27] <Grinnz> sweval: -'-foo'
[23:22:28] <perlbot> Grinnz: +foo
[23:22:39] <Grinnz> it's two different features
[23:23:07] <Grinnz> string unary minus either prepends a -, or turns it into a + if one already exists
[23:23:22] <gordonfish> Ah
[23:30:30] *** Joins: akaWolf (~akaWolf@akawolf.org)
[23:32:58] *** Quits: buZz (~buzz@sky.thebigblue.tk) (Ping timeout: 252 seconds)
[23:39:06] *** Quits: thrig (~thrig@65.113.153.50) (Remote host closed the connection)
[23:40:35] *** dilfridge is now known as devils_advocate
[23:41:09] *** devils_advocate is now known as dilfridge
[23:43:19] <gordonfish> { Re: <thrig> in C, DBL_MIN > -DBL_MAX } Perl too:
[23:43:24] <gordonfish> sweval: use Config; my ($dmax, $dmin) = $Config{cppsymbols} =~ /__DBL_M(?:AX|IN)__\Q=((double)\E([\d.e+-]+)/g; [$dmin > -$dmax];
[23:43:25] <perlbot> gordonfish: [1]
[23:46:13] *** Joins: chenxuezhao (~chenxuezh@120.244.238.69)
[23:48:00] <gordonfish> sweval: use Math::BigFloat; use Config; my ($dmax, $dmin) = $Config{cppsymbols} =~ /__DBL_M(?:AX|IN)__\Q=((double)\E([\d.e+-]+)/g; Math::BigFloat->new($dmin)->bstr;
[23:48:02] <perlbot> gordonfish: 0.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000222507385850720138309023271733240406
[23:48:09] <gordonfish> sweval: use Math::BigFloat; use Config; my ($dmax, $dmin) = $Config{cppsymbols} =~ /__DBL_M(?:AX|IN)__\Q=((double)\E([\d.e+-]+)/g; Math::BigFloat->new($dmax)->bmul(-1)->bstr;
[23:48:11] <perlbot> gordonfish: -179769313486231570814527423731704357000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
[23:51:32] <gordonfish> That's a nice visualization. 2.2250738585072e-308 is greator than -1.79769313486232e+308
[23:53:29] <LeoNerd> Ugh.. I've just annoyed myself... Or rather, I've just come to a realisation that something sucks, and that annoys me
[23:53:43] <LeoNerd> The thing that sucks is the POSIX (well, BSD sockets) API atop TCP sockets
[23:54:10] <LeoNerd> I can't see the ACKs. So I basically have to duplicate the concept of ACKs, in the application layer, i.e. more bytes of protocol over the top...
[23:54:33] <LeoNerd> I spent a while designing how to solve a problem, and the solution I have come up with is exactly like TCP's ACKs.. over TCP sockets. :(
[23:55:28] <LeoNerd> And prettymuch the entire thing would not be necessary if only I could get at the actual TCP-level ACKs from an open socket handle
[23:56:13] <xenu> well if you want to reimplement tcp, there's ucp
[23:56:25] <xenu> that's pretty much how QUIC was mde
[23:56:26] <xenu> made*
[23:58:37] <LeoNerd> The thought did occur to me
[23:58:58] <LeoNerd> But then I have to solve ordering and fragmentation and... ugh. Bah.
[23:59:03] <LeoNerd> Everything sucks
[23:59:28] *** Joins: humky (~humky@user/humky)
