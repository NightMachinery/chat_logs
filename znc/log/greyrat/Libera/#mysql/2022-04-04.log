[00:30:43] *** Joins: codebam (~codebam@user/codebam)
[00:40:22] *** Quits: palasso (~palasso@user/palasso) (Remote host closed the connection)
[01:06:35] *** Quits: nb (~nb@fedora/ansible.user.nb) (Ping timeout: 246 seconds)
[01:24:05] *** Joins: nb (~nb@fedora/ansible.user.nb)
[01:29:08] *** Quits: nb (~nb@fedora/ansible.user.nb) (Ping timeout: 272 seconds)
[01:32:25] *** Joins: nb (~nb@fedora/ansible.user.nb)
[02:14:43] *** Parts: Bushmaster (~Goondog@user/bushmaster) (later folks)
[02:25:45] *** Quits: shibboleth (~shibbolet@user/shibboleth) (Quit: shibboleth)
[03:30:44] *** Quits: masber (~masber@213.55.224.23) (Quit: Client closed)
[06:32:20] *** Joins: [sr]|2 (~kvirc@pal-213-228-163-73.netvisao.pt)
[06:34:53] *** Quits: [sr] (~kvirc@pal-213-228-163-73.netvisao.pt) (Ping timeout: 246 seconds)
[07:32:38] *** Quits: Vacuity (~Vacuity@user/vovo) (Ping timeout: 246 seconds)
[07:34:26] *** Joins: Vacuity (~Vacuity@user/vovo)
[08:25:29] *** Joins: Naktibalda (~Naktibald@88.135.22.17)
[09:18:50] *** Quits: cerill (~cerill@h-155-4-198-153.A785.priv.bahnhof.se) (Quit: Client closed)
[10:58:11] *** Joins: palasso (~palasso@user/palasso)
[11:09:27] *** Quits: Kilroy (Kilroy@user/Kilroy) (*.net *.split)
[11:09:27] *** Quits: Caterpillar (~caterpill@user/caterpillar) (*.net *.split)
[11:09:27] *** Quits: xMopx (~xMopx-lib@192.95.23.134) (*.net *.split)
[11:09:27] *** Quits: lord4163 (~lord4163@81-233-183-142-no86.tbcn.telia.com) (*.net *.split)
[11:09:27] *** Quits: genius3000 (g3k@user/genius3000) (*.net *.split)
[11:09:27] *** Quits: Azundris (azundris@user/azundris) (*.net *.split)
[11:09:27] *** Quits: DPA (~DPA@2a05:41c0:0:8104::a3c:10d) (*.net *.split)
[11:09:27] *** Quits: DCTWD (~dc@uz.utmappro.com) (*.net *.split)
[11:09:27] *** Quits: gothicserpent (~gothicser@2604:a880:4:1d0::176:6000) (*.net *.split)
[11:09:27] *** Quits: yang (~yang@fsf/member/yang) (*.net *.split)
[11:09:27] *** Quits: supercool (supercool@2600:3c01::f03c:91ff:fee5:c75e) (*.net *.split)
[11:09:27] *** Quits: void09 (~void@150.230.21.57) (*.net *.split)
[11:09:27] *** Quits: benl90 (benl90@stable.bnc.by.bnc4you.xyz) (*.net *.split)
[11:09:28] *** Quits: Lewix__ (sid158496@id-158496.tinside.irccloud.com) (*.net *.split)
[11:09:28] *** Quits: ThothCastel (sid78195@2a03:5180:f::1:3173) (*.net *.split)
[11:09:28] *** Quits: g0z (gauze@entropy.tmok.com) (*.net *.split)
[11:09:28] *** Quits: DLange (~DLange@about/linux/staff/DLange) (*.net *.split)
[11:09:36] *** Joins: genius3000 (g3k@user/genius3000)
[11:09:36] *** Joins: g0z (gauze@entropy.tmok.com)
[11:09:43] *** Joins: supercool (supercool@2600:3c01::f03c:91ff:fee5:c75e)
[11:09:47] *** Joins: ThothCastel (sid78195@id-78195.tinside.irccloud.com)
[11:09:55] *** Joins: yang (~yang@fsf/member/yang)
[11:10:00] *** Joins: DLange (~DLange@about/linux/staff/DLange)
[11:10:13] *** Joins: Lewix__ (sid158496@2a03:5180:f::2:6b20)
[11:11:00] *** Joins: DCTWD (~dc@uz.utmappro.com)
[11:11:02] *** Joins: Caterpillar (~caterpill@user/caterpillar)
[11:11:14] *** Joins: void09 (~void@150.230.21.57)
[11:11:24] *** Joins: gothicserpent (~gothicser@2604:a880:4:1d0::176:6000)
[11:11:25] *** Joins: Kilroy (Kilroy@user/Kilroy)
[11:11:28] *** Joins: lord4163 (~lord4163@81-233-183-142-no86.tbcn.telia.com)
[11:11:35] *** Joins: xMopx (~xMopx-lib@192.95.23.134)
[11:13:11] *** Quits: whitekidney (~wk@c7C8B5BC1.dhcp.as2116.net) (*.net *.split)
[11:13:11] *** Quits: NiKaN (sid385034@id-385034.helmsley.irccloud.com) (*.net *.split)
[11:13:11] *** Quits: Exa (exa@irc.moe) (*.net *.split)
[11:13:12] *** Quits: celphi (sid97751@user/celphi) (*.net *.split)
[11:13:12] *** Quits: ringo__ (~ringo@157.230.117.128) (*.net *.split)
[11:13:18] *** Joins: Azundris (~azundris@user/azundris)
[11:13:21] *** Joins: DPA (~DPA@75-128-16-94.static.cable.fcom.ch)
[11:13:24] *** Joins: whitekidney (~wk@c7C8B5BC1.dhcp.as2116.net)
[11:13:48] *** Joins: celphi (sid97751@user/celphi)
[11:13:59] *** Joins: Exa (exa@irc.moe)
[11:14:03] *** Joins: NiKaN (sid385034@id-385034.helmsley.irccloud.com)
[11:14:33] *** Joins: ringo__ (~ringo@157.230.117.128)
[11:21:24] *** Joins: benl90 (benl90@stable.bnc.by.bnc4you.xyz)
[11:33:35] *** Quits: palasso (~palasso@user/palasso) (Ping timeout: 260 seconds)
[12:09:42] *** Joins: palasso (~palasso@user/palasso)
[12:45:18] *** Quits: codebam (~codebam@user/codebam) (Ping timeout: 260 seconds)
[13:09:39] *** Joins: tercaL (~tercaL@user/tercal)
[13:10:35] *** Quits: tercaL (~tercaL@user/tercal) (Client Quit)
[13:11:13] *** Joins: tercaL (~tercaL@user/tercal)
[13:30:19] *** Joins: cerill (~cerill@h-155-4-198-153.A785.priv.bahnhof.se)
[13:34:12] *** Quits: benl90 (benl90@stable.bnc.by.bnc4you.xyz) (Ping timeout: 240 seconds)
[13:38:17] *** Joins: bytestream (~bytestrea@user/bytestream)
[14:11:43] *** Joins: David- (~none@host81-148-7-252.range81-148.btcentralplus.com)
[14:24:54] *** Quits: tercaL (~tercaL@user/tercal) (Remote host closed the connection)
[14:34:05] *** Joins: benl90 (benl90@stable.bnc.by.bnc4you.xyz)
[14:55:25] *** Joins: tercaL (~tercaL@user/tercal)
[16:02:06] *** Joins: magga (magga@ti0036a400-3577.bb.online.no)
[16:03:49] <Isotopp> I was trolled and wrote a rant, https://blog.koehntopp.info/2022/04/04/devops-meets-databases.html
[17:20:42] *** Quits: cerill (~cerill@h-155-4-198-153.A785.priv.bahnhof.se) (Quit: Client closed)
[17:50:44] *** Quits: ikwyl6 (~ikwyl6@195.206.105.22) (Read error: Connection reset by peer)
[17:55:44] *** Joins: ikwyl6 (~ikwyl6@195.206.105.22)
[18:15:12] <obviyus> > Only rarely, they write from a developer point of view
[18:15:20] <obviyus> Isotopp: this has been such a pain point
[18:15:35] <obviyus> in my experience, the way to get proficient is trial by fire
[18:28:11] <Isotopp> That was the reason for me to start the https://blog.koehntopp.info/tags/#mysqldev tag
[18:42:55] <obviyus> that's super cool, ty Isotopp
[19:15:14] *** Joins: doug16k (~doug16k@172-97-188-4.cpe.distributel.net)
[19:15:38] <doug16k> what is "The table '/rdsdbdata/tmp/#sql2392_5ddc3b_2' is full"
[19:15:49] <doug16k> how can a table be "full"
[19:16:04] <lopid> perhaps the partition that its on is
[19:16:07] <lopid> it's
[19:20:06] *** Quits: Naktibalda (~Naktibald@88.135.22.17) (Ping timeout: 272 seconds)
[19:21:45] <Isotopp> doug16k: what exact vendor and version of mysql are you on, and what is the table's engine?
[19:21:49] <Isotopp> are you using myisam tables?
[19:22:31] <Isotopp> i notice that the table name indicates a temporary table, and for mysql before relativeluy recent versions of oracle mysql 8 the temp table engine has been mysql
[19:23:42] <Isotopp> it looks like you are running into a limit for temporary table size, and that means the query you are trying to run produces a runaway intermediate result set that overflows memory buffers and needs to be materialized on disk, filling either the temporary table space or disk space for tmp tables, or exceeds maximum myisam table size (row pointer size)
[19:23:57] <doug16k> it's RDS on AWS. 8.0.23. is that what you mean?
[19:24:08] <Isotopp> yes
[19:24:21] <Isotopp> 8.0.23 -- is that aurora?
[19:25:13] <doug16k> yes
[19:25:29] <Isotopp> The Oracle MySQL documentation explains https://dev.mysql.com/doc/refman/8.0/en/full-table.html But Aurora uses a completely different underlying storage mechanism, which I do not have information to debug.
[19:25:41] <Isotopp> It still is a temp table.
[19:26:15] <Isotopp> I also have no idea how Aurora structures it's internal disk space, and if /rdsdbdata is a partition or what the size of that partition would be.
[19:26:30] <Isotopp> The manual says "Disk full" by another name.
[19:27:02] *** Joins: PTNapivoski (~PTNapivos@179.189.133.33)
[19:27:20] <Isotopp> I think you need to take this to your AWS support representative and ask them what the size of the partition in question is and if that can be changed. it is more likely that your query is doing something inefficient, tho
[19:28:38] <doug16k> how can I tell which query is causing it?
[19:29:44] <Isotopp> I don't know, but usually it's "the long running one", because filling the tmp partition takes time
[19:30:29] <Isotopp> at work, we run a variant of https://blog.koehntopp.info/2021/04/22/a-mysql-flight-recorder.html and that makes it easy to find such things
[19:59:33] *** Parts: uhu- (~uhu@static.101.168.216.95.clients.your-server.de) ()
[19:59:41] *** Joins: uhu (~uhu@static.101.168.216.95.clients.your-server.de)
[20:05:17] *** Quits: magga (magga@ti0036a400-3577.bb.online.no) (Remote host closed the connection)
[20:05:32] *** Joins: magga (magga@ti0036a400-3577.bb.online.no)
[20:11:11] *** Joins: Naktibalda (~Naktibald@88.135.22.17)
[20:12:13] <doug16k> rds mysql feels crippled. is it my imagination?
[20:12:52] <doug16k> seems like sql was faster when I wrote perl scripts that queried mysql on CGI
[20:13:08] <doug16k> and people ran netscape
[20:13:37] <doug16k> apache host sql was faster IIRC
[20:16:27] <doug16k> I have seen alter view take almost a minute
[20:16:44] <doug16k> you know what I mean. recreate
[20:17:36] <Xgc> A view takes time to recreate??
[20:17:46] <doug16k> yeah, pretty long sometimes
[20:17:56] <doug16k> should be instant every time, right?
[20:18:15] <Xgc> That's odd.  I'm sure there are ways to run into locks, even creating a view.
[20:18:24] <Xgc> But it's odd.
[20:21:04] <doug16k> thought crossed my mind to get it on OBS, since it is hard to believe :)
[20:46:48] <Isotopp> Xgc: mdl, other locks I cannot imagine here.
[21:46:25] *** Joins: codebam (~codebam@user/codebam)
[22:26:18] *** Quits: Naktibalda (~Naktibald@88.135.22.17) (Ping timeout: 260 seconds)
[23:01:50] *** Joins: autodev (~autodev@097-105-230-074.biz.spectrum.com)
[23:06:05] *** Quits: autodev (~autodev@097-105-230-074.biz.spectrum.com) (Ping timeout: 246 seconds)
[23:15:44] *** Joins: podeni (~podeni@188.27.130.66)
[23:16:55] <podeni> Hi everyone. Is it possible to create a JSON object from a field containing a JSON string? MySQL 8.
[23:18:05] <PTNapivoski> podeni, PHP?
[23:22:24] <podeni> No, pure MySQL. Here's the use case: I want to SELECT some data from a table INTO OUTFILE, encoded as JSON (one record per line). I'm good to go with SELECT JSON_OBJECT() for the regular table fields (containing strings, dates, and numbers), but I also have a particular field that's a JSON string, which I want to make into a nested object inside the main one. This is what I'm having trouble
[23:22:25] <podeni> with.
[23:23:18] *** Joins: autodev_ (~autodev@097-105-230-074.biz.spectrum.com)
[23:25:54] <podeni> I think JSON_EXTRACT is the way to go, the first parameter is the string, but it also requires a path (what fields you want from the object). And I want ...all of them
[23:29:49] <podeni> Looks like I'm getting closer: JSON_EXTRACT(my_json_string, '$.*') -- except this one returns an array, while I'm looking for a single value.
[23:33:47] <podeni> This seems to be it: JSON_EXTRACT(my_json_string, '$')
[23:35:40] *** Joins: cerill (~cerill@h-155-4-198-153.A785.priv.bahnhof.se)
