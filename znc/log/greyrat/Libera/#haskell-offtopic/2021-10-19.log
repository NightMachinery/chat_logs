[02:03:14] *** Joins: greyrat (~greyrat@ip202.ip-51-178-215.eu)
[02:03:14] *** Server sets mode: +nt 
[02:19:27] *** Quits: ph88 (~ph88@2a02:8109:9e00:7e5c::3d56) (Remote host closed the connection)
[02:19:51] *** Joins: ph88 (~ph88@2a02:8109:9e00:7e5c::3d56)
[02:26:10] *** Quits: Morrow (~Morrow@147.161.13.214) (Read error: Connection reset by peer)
[02:32:46] *** Quits: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Quit: WeeChat 3.3)
[02:54:38] *** Joins: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[02:58:51] *** Quits: Tuplanolla (~Tuplanoll@91-159-69-50.elisa-laajakaista.fi) (Quit: Leaving.)
[03:09:30] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[03:17:37] *** Quits: guydb89 (~guy@98.40.140.117) (Quit: leaving)
[03:21:33] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:39a4:166a:24e9:f255) (Remote host closed the connection)
[03:38:11] *** Quits: ph88 (~ph88@2a02:8109:9e00:7e5c::3d56) (Ping timeout: 264 seconds)
[03:41:19] *** Quits: Cajun (~Cajun@user/cajun) (Ping timeout: 256 seconds)
[03:44:11] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 264 seconds)
[03:45:39] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:39a4:166a:24e9:f255)
[03:48:01] *** Quits: meer (~delicacie@2601:6c4:4080:3f80:cc37:7f71:51d3:b41c) (Ping timeout: 245 seconds)
[03:48:10] *** Quits: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Ping timeout: 258 seconds)
[03:54:03] *** Joins: Cajun (~Cajun@user/cajun)
[03:57:33] *** Quits: Cajun (~Cajun@user/cajun) (Client Quit)
[03:59:52] *** Joins: Cajun (~Cajun@user/cajun)
[04:01:45] *** Quits: ruzui (~ruzu@107-179-252-71.cpe.teksavvy.com) (Remote host closed the connection)
[04:02:10] *** Joins: ruzu (~ruzu@107-179-252-71.cpe.teksavvy.com)
[04:29:34] *** Quits: segfaultfizzbuzz (~segfaultf@135-180-0-138.static.sonic.net) (Ping timeout: 258 seconds)
[04:33:27] *** Quits: ruzu (~ruzu@107-179-252-71.cpe.teksavvy.com) (Remote host closed the connection)
[04:33:45] *** Joins: ruzu (~ruzu@107-179-252-71.cpe.teksavvy.com)
[05:40:04] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[06:14:36] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 258 seconds)
[06:56:09] *** Joins: meer (~delicacie@c-98-208-218-119.hsd1.fl.comcast.net)
[07:03:26] *** Quits: meer (~delicacie@c-98-208-218-119.hsd1.fl.comcast.net) (Ping timeout: 265 seconds)
[07:13:03] *** Joins: meer (~delicacie@c-98-208-218-119.hsd1.fl.comcast.net)
[07:14:37] *** meer is now known as Inst
[07:16:42] *** Quits: sclv (sid39734@haskell/developer/sclv) (Ping timeout: 258 seconds)
[07:32:01] *** Joins: sclv (sid39734@haskell/developer/sclv)
[08:10:37] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[08:14:27] *** Quits: ruzu (~ruzu@107-179-252-71.cpe.teksavvy.com) (Remote host closed the connection)
[08:14:45] *** Joins: ruzu (~ruzu@107-179-252-71.cpe.teksavvy.com)
[08:14:47] *** Quits: Inst (~delicacie@c-98-208-218-119.hsd1.fl.comcast.net) (Ping timeout: 264 seconds)
[08:38:23] *** Joins: coot (~coot@37.30.48.91.nat.umts.dynamic.t-mobile.pl)
[08:43:04] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Remote host closed the connection)
[08:45:23] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 264 seconds)
[08:48:14] *** Joins: geekosaur (~geekosaur@xmonad/geekosaur)
[09:29:43] *** Joins: Inst (~delicacie@c-98-208-218-119.hsd1.fl.comcast.net)
[10:14:00] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[10:18:47] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 258 seconds)
[10:26:28] *** Joins: fendor (~fendor@77.119.169.61.wireless.dyn.drei.com)
[10:42:53] *** Quits: fendor (~fendor@77.119.169.61.wireless.dyn.drei.com) (Remote host closed the connection)
[11:00:10] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[11:00:29] *** Quits: Cajun (~Cajun@user/cajun) (Ping timeout: 256 seconds)
[11:04:07] *** Joins: Inst_ (~Inst@2601:6c4:4080:3f80:6134:7ceb:5f94:e843)
[11:04:08] <Inst_> so
[11:04:18] <Inst_> I just showed #C++ an attempt to write C++ functionally
[11:04:26] <Inst_> because I ended up with a weird bug
[11:04:37] <Inst_> this is one of the responses I got:
[11:04:38] <Inst_> Inst_: why the recursion? just makes it difficult to think about the problem for humans
[11:08:01] <Inst_> no idea. i stopped reading after i saw the recursion
[11:10:53] <arahael> Inst_: There's... Zero context there.  What recursion?
[11:11:52] <Inst_> <Inst_> https://pastebin.com/ipV7yjPw
[11:12:07] <Inst_> <Inst_> hi
[11:12:07] <Inst_> <Inst_> can i has help?
[11:12:07] <Inst_> <Inst_> https://pastebin.com/ipV7yjPw
[11:12:07] <Inst_> <Inst_> this is weirding me out
[11:12:07] <Inst_> <Inst_> see, the behavior when I activate the error-checking function
[11:12:08] <Inst_> <Inst_> on an incorrect string is that it loops back to the main function
[11:12:10] <Inst_> <Inst_> which is great
[11:12:12] <Inst_> <Inst_> that's the way it's supposed to be
[11:12:14] <Inst_> <Inst_> but when I activate the error-checking function on the double
[11:12:16] <Inst_> <Inst_> it gives me an infinet loop
[11:12:18] <Inst_> <Inst_> which is just really, really really weird
[11:13:39] <Inst_> i just thought it was funny because it shows imperative programming mindset, i.e, see something that looks functional, say it's bad
[11:13:44] <Inst_> and refuse to help
[11:19:56] <arahael> Inst_: That's likely to use more memory every time you recurse.
[11:20:31] <arahael> That's indeed somethign that would be better _not_ implemented using recursion in C++.
[11:20:49] <Inst_> i guess, i mean, i can do it imperatively
[11:21:12] <arahael> It would be faster, use less memory, and be clearer - for C++.
[11:22:07] <arahael> Inst_: Basically, in C++, every time you recurse, you're pushing up another stack frame, and allocating more memory.
[11:22:48] <Inst_> based on the language-compiler design, then, trying to skip for / while loops in C++ is dumb, then, right?
[11:23:58] <arahael> Not as such, but for that particular example there, I'd have done it using a loop.
[11:25:08] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:39a4:166a:24e9:f255) (Remote host closed the connection)
[11:29:35] <Inst_> thank you so much, arahael
[11:33:30] <arahael> Inst_: Btw, in C++, the more usual "functional" ways of doing things tend to have _some_ recursion, but they don't tend to be heavily recursive.  So you might do something like, I dunno...
[11:33:48] <Inst_> https://www.manning.com/books/functional-programming-in-c-plus-plus
[11:34:01] <Inst_> i'm a noob trying to learn how to program
[11:34:08] <Inst_> i'm trying to pick up c++ and haskell concurrently
[11:34:13] <arahael> someCollection.each([](x){ x * 2}), but you wouldn't implement a foldr in quite the same way as you'd do it in haskell.
[11:39:09] *** Joins: kuribas (~user@ptr-25vy0i72e2u2h548zvl.18120a2.ip6.access.telenet.be)
[11:39:14] <tdammers> note btw. that "functional" does not necessarily imply "use lots of recursion"
[11:39:27] <arahael> ^^ That.
[11:40:18] <tdammers> most "functional" languages opt to make recursion cheap (with TCO, or, like Haskell, with non-strict evaluation), but you can also just bake basic looping constructs and such into your language, so that you can write most stuff that would be recursive in Haskell using declarative loops
[11:41:44] <arahael> Yep.  And recursion is *not* cheap in C++.
[11:42:38] <arahael> GCC technically provides TCO with C, I think that might be optional, even there.  But I've never heard of a C++ compiler implementing TCO in any form.
[11:43:33] <tdammers> it does not *guarantee* TCO though, so you can't really rely on it
[11:43:39] <arahael> (You _might_ be able to achieve TCO with GCC in C++, if you don't allocate anything during the recursive call, and that includes temporaries, more or less)
[11:44:44] <tdammers> point is, TCO in C is an optimization; it can make your code more efficient, and when it does, you can rejoice, but you cannot actively depend on it happening - if you write an infinite recursion to implement, say, a long-running server, and the compiler fails to TCO, then you can't complain, because it's still a valid compile
[11:45:01] <arahael> Yep.
[11:45:07] <tdammers> whereas in, say, Scheme, TCO is mandatory as per the language standard, so you can actively depend on it
[11:45:26] <tdammers> and if it doesn't happen when the spec says it should, then the implementation is wrong
[11:45:28] <arahael> Yes, but the semantics of scheme allow it. The semantics in C++ almost explicitly forbid it.
[11:45:46] <tdammers> the semantics of scheme *require* it in many cases
[11:46:02] <arahael> Well, yes. :)
[11:46:10] <tdammers> and, yes, C++ exposes too much metal to make "TCO everywhere" feasible
[11:46:55] <arahael> I'm not sure how you'd implement TCO in the presence of stack-allocated values (temporaries or otherwise), that have a destructor of any form.
[11:47:25] <arahael> And that's before we even discuss stack unwinding for exceptions. :)
[11:47:29] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Remote host closed the connection)
[11:47:54] *** Joins: geekosaur (~geekosaur@xmonad/geekosaur)
[11:50:58] <tdammers> you could run the dtors and ctors without actually doing the stack pushing and popping, I think
[11:51:11] <tdammers> not sure whether I want to think about that any further though
[11:51:19] <merijn> [exa]: But wireless isn't ethernet and therefore not subject to the same limitations the ethernet standard is...
[11:55:32] <arahael> tdammers: I don't think you can, not correctly - C++ is very specific about the order and how the stacks should unwind in the presence of excemptions, etc, and it's very much tied to the scope and the stack, I believe.
[11:57:16] <tdammers> arahael: well, the idea is to still do all the ctors and dtors, so that the specified stuff runs, you just skip the actual pushes and pops
[11:57:36] <tdammers> although you're probably right
[11:57:59] <arahael> tdammers: So you've re-implemented the stack? ;)
[11:58:05] *** Quits: Inst (~delicacie@c-98-208-218-119.hsd1.fl.comcast.net) (Read error: Connection reset by peer)
[12:01:48] <arahael> If I remember correctly, the problem isthat in C++, those dtors end up in the tail position.
[12:02:07] <arahael> And you can't easily modify it so that the recursive call is in the tail position instead.
[12:10:06] <tdammers> you'd have to do the TCO one level up
[12:10:24] <tdammers> but, ugh, yeah, I think you're right
[12:10:45] <tdammers> you'd have to go recursive call, run dtors, return result of recursive call, and that doesn't TCO
[12:11:20] <arahael> Right.
[12:13:24] *** Joins: ph88 (~ph88@2a02:8109:9e00:7e5c::3d56)
[12:25:33] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:9105:355e:98db:81cc)
[12:29:41] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:9105:355e:98db:81cc) (Ping timeout: 245 seconds)
[12:34:14] *** Quits: Inst_ (~Inst@2601:6c4:4080:3f80:6134:7ceb:5f94:e843) (Read error: Connection reset by peer)
[12:34:33] *** Joins: Inst_ (~Inst@2601:6c4:4080:3f80:6134:7ceb:5f94:e843)
[13:03:00] *** Joins: __monty__ (~toonn@user/toonn)
[13:48:22] *** aplainze1akind is now known as aplainzetakind
[14:01:06] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 260 seconds)
[14:02:00] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[14:07:11] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 245 seconds)
[14:07:58] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[14:13:01] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 245 seconds)
[14:13:49] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[14:19:35] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 264 seconds)
[14:19:43] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[14:24:59] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 264 seconds)
[14:25:38] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[14:27:31] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:9105:355e:98db:81cc)
[14:30:58] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 260 seconds)
[14:31:50] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[14:32:11] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:9105:355e:98db:81cc) (Ping timeout: 264 seconds)
[14:36:11] *** Joins: Cajun (~Cajun@user/cajun)
[14:37:09] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 258 seconds)
[14:37:27] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[14:37:55] *** Joins: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[14:43:13] <ongy[m]> merijn: and the limits don't matter, when manufacturers just slap something on to go faster
[14:43:14] <ongy[m]> the amount of broken standards in networking....
[14:56:26] <merijn> ongy[m]: I thought there was a standard for jumbo frames, though
[15:37:45] <dminuoso> Why is it that browsers do not have intrinsic support for authenticating passwords *without* sending the passwords over in cleartext?
[15:38:06] <merijn> they do, though
[15:38:15] <merijn> Almost nobody supports that shit, though :p
[15:38:19] <dminuoso> They do? 
[15:38:40] <dminuoso> Is that just accessible via JS? Or is there some HTML mechanism?
[15:39:15] <merijn> dminuoso: You're thinking of "HTTP Basic Auth" which sends a password
[15:39:25] <dminuoso> No Im not.
[15:39:31] <merijn> dminuoso: There's been a spec/standard for "HTTP Digest Auth" for decades
[15:39:39] <merijn> Which sends a hash/digest of a password instead
[15:39:43] <merijn> But nobody uses it
[15:39:53] <dminuoso> Well that's sort of the same thing, really.
[15:40:04] <hpc> there's also gssapi
[15:40:16] <hpc> 401 auth is horrendously bad
[15:40:47] <dminuoso> merijn: heh, http digest auth is a lot of md5 sprinkling..
[15:40:59] <hpc> (also both of those have an awful UI)
[15:41:17] <merijn> Well, it was never improved/updated because no one uses it
[15:41:38] <dminuoso> I guess one major problem is that many asymmetric authentication schemes require special derived keys if you want to thwart attacks
[15:41:50] <dminuoso> So the mere password is not enough, the browser would have to hold some additional state
[15:42:19] <merijn> At this point you might as well give up and use client SSL certs
[15:45:39] <dminuoso> Bah I hate security.
[15:48:57] <merijn> dminuoso: Word
[15:53:06] *** Quits: ruzu (~ruzu@107-179-252-71.cpe.teksavvy.com) (Ping timeout: 260 seconds)
[16:29:11] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:9105:355e:98db:81cc)
[16:33:31] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:9105:355e:98db:81cc) (Ping timeout: 252 seconds)
[17:31:48] *** Joins: Midjak (~Midjak@82-65-111-221.subs.proxad.net)
[18:30:50] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:9105:355e:98db:81cc)
[18:35:47] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:9105:355e:98db:81cc) (Ping timeout: 264 seconds)
[18:47:24] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:9105:355e:98db:81cc)
[18:54:52] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 252 seconds)
[19:04:10] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:9105:355e:98db:81cc) (Remote host closed the connection)
[19:23:29] *** Quits: coot (~coot@37.30.48.91.nat.umts.dynamic.t-mobile.pl) (Quit: coot)
[19:23:53] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[19:28:35] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 264 seconds)
[19:35:00] *** Quits: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Ping timeout: 258 seconds)
[19:36:56] *** Joins: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[19:38:36] <DigitalKiwi> functional programming just means my code functions right?
[19:47:47] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:9105:355e:98db:81cc)
[19:59:12] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:9105:355e:98db:81cc) (Remote host closed the connection)
[19:59:33] *** Quits: ph88 (~ph88@2a02:8109:9e00:7e5c::3d56) (Remote host closed the connection)
[20:06:08] *** Joins: segfaultfizzbuzz (~segfaultf@135-180-0-138.static.sonic.net)
[20:06:35] *** Joins: fendor (~fendor@77.119.169.61.wireless.dyn.drei.com)
[20:07:36] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:9105:355e:98db:81cc)
[20:22:46] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[20:25:26] <[exa]> merijn: jumbo isn't really standardized either right?
[20:38:29] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Remote host closed the connection)
[20:38:54] *** Joins: geekosaur (~geekosaur@xmonad/geekosaur)
[20:56:07] *** Joins: fendor_ (~fendor@77.119.200.149.wireless.dyn.drei.com)
[20:56:26] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 260 seconds)
[20:58:18] *** Quits: fendor (~fendor@77.119.169.61.wireless.dyn.drei.com) (Ping timeout: 260 seconds)
[21:11:50] *** Quits: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Ping timeout: 260 seconds)
[21:11:56] *** Joins: fendor__ (~fendor@212095005159.public.telering.at)
[21:12:22] *** Quits: fendor_ (~fendor@77.119.200.149.wireless.dyn.drei.com) (Ping timeout: 258 seconds)
[21:13:45] *** Joins: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[21:16:26] *** Quits: kuribas (~user@ptr-25vy0i72e2u2h548zvl.18120a2.ip6.access.telenet.be) (Quit: ERC (IRC client for Emacs 26.3))
[21:20:11] *** Joins: coot (~coot@37.30.48.91.nat.umts.dynamic.t-mobile.pl)
[21:25:34] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:9105:355e:98db:81cc) (Remote host closed the connection)
[21:44:16] *** Joins: fendor_ (~fendor@178.115.49.60.wireless.dyn.drei.com)
[21:46:50] *** Quits: fendor__ (~fendor@212095005159.public.telering.at) (Ping timeout: 260 seconds)
[22:25:59] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:9105:355e:98db:81cc)
[22:27:20] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:9105:355e:98db:81cc) (Remote host closed the connection)
[22:27:29] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:9105:355e:98db:81cc)
[22:41:56] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:9105:355e:98db:81cc) (Remote host closed the connection)
[22:44:46] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:9105:355e:98db:81cc)
[22:53:41] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[23:27:10] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 260 seconds)
[23:36:20] *** Quits: Midjak (~Midjak@82-65-111-221.subs.proxad.net) (Quit: This computer has gone to sleep)
[23:37:24] *** Joins: Midjak (~Midjak@82-65-111-221.subs.proxad.net)
[23:39:35] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:9105:355e:98db:81cc) (Remote host closed the connection)
[23:59:09] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:9105:355e:98db:81cc)
