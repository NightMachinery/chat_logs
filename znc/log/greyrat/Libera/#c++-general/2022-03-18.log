[00:02:09] *** Joins: c4017w_ (~c4017@209.52.68.8)
[00:05:31] *** Quits: Tokamak (~Tokamak@172.58.188.132) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[00:05:32] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[00:08:55] *** Joins: Guest54 (~Guest54@2620:10d:c092:400::4:3275)
[00:09:23] *** Quits: m_ben (~m_ben@user/m-ben/x-7429725) (Quit: WeeChat 3.4)
[00:09:55] *** Joins: Tokamak (~Tokamak@172.58.188.132)
[00:11:43] <Raziel> xuxx, as opposed to C++ with lots of sleep(1000)l in it?
[00:12:27] <Alipha> xuxx: low latency in doing what?
[00:18:12] *** Quits: jsbach (~jsbach@2a02:810a:1440:4cec:3af3:abff:fe57:23d5) (Ping timeout: 240 seconds)
[00:19:37] *** Quits: Guest19 (~Guest19@2601:647:5280:2a50:f87e:42e6:dc86:d5cf) (Quit: Client closed)
[00:20:24] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:fcde:a8ca:a29e:9109) (Ping timeout: 250 seconds)
[00:25:57] *** Quits: xkuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[00:29:07] *** Joins: proller (~p@80.240.216.69)
[00:31:41] <xuxx> I always read that C++ is used for low latency trading
[00:31:51] <xuxx> So I though there are special techniques
[00:32:15] <Raziel> the special technique is to get access to a trader's API that doesn't suck donkey balls, probably
[00:33:14] <rpav> no unordered_map transparent comparators >:(
[00:33:50] *** Quits: proller (~p@80.240.216.69) (Ping timeout: 250 seconds)
[00:35:11] *** Quits: Guest54 (~Guest54@2620:10d:c092:400::4:3275) (Ping timeout: 256 seconds)
[00:42:46] *** Quits: malloy (~jimery@120.235.172.170) (Read error: Connection reset by peer)
[00:45:15] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[00:46:45] *** Joins: proller (~p@2a02:6b8:b081:26::1:39)
[00:48:07] *** Joins: zen_coder (~zen_coder@2a02:8109:a280:2d8d:11e0:bab1:2383:8658)
[00:48:44] *** Joins: malloy (~jimery@120.235.172.170)
[01:01:59] <cbreak> xuxx: the key I think is to understand the true cost of your primitives, both in complexity and actual time cost
[01:02:14] <cbreak> to think about worst case latency
[01:02:47] *** Joins: c4017w__ (~c4017@209.52.68.8)
[01:06:08] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 252 seconds)
[01:06:20] *** Joins: m_ben (~m_ben@user/m-ben/x-7429725)
[01:06:40] *** Joins: spaceangel_ (~spaceange@ip-78-102-216-202.net.upcbroadband.cz)
[01:07:37] *** Quits: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz) (Ping timeout: 240 seconds)
[01:12:10] <xuxx> cbreak: that's what I think too
[01:12:24] *** Quits: foul_owl (~kerry@23.82.193.89) (Ping timeout: 250 seconds)
[01:14:52] <nq> is there anything like overloading for functions, but in the case of structs ?
[01:14:52] <nq> and without using templates
[01:16:08] <nq> I want to have multiple "parametrizations" (so this means different ctors and also different internal representation) of the same geometrical shape, and want to overload the same struct identifier
[01:17:02] *** Quits: robod34 (~Username@79.113.243.73) (Quit: Goe offline! ( http://marius.sucan.ro/ ))
[01:17:11] *** Quits: rendar (~rendar@user/rendar) (Quit: Leaving)
[01:17:57] <nq> I thought of using something like inheriting from std::conditional_t and using an enum class to encode each kind of parametrization in there, then use an equality expression to drive the std::conditional_t; but I can't seem to access the members behind the std::conditional_t, so I guess it DOES NOT conditionally add atributes to the inheriting struct ?
[01:19:43] <cbreak> nq: structs are fully defined
[01:19:57] <cbreak> if you want to make them somehow parametrizable, you will have to use templates.
[01:20:19] <Raziel> sounds like you'd be better off using some manner of composition
[01:20:23] <cbreak> in particular, since you want different constructors and internal representations, you would use template specialization
[01:21:09] <cbreak> but again: this will require using templates
[01:21:13] <nq> hmmm, I kept thinking that I needed to conditionally define members, but probably that's partially specialized templates ?
[01:21:17] <cbreak> no way around templates.
[01:21:47] <cbreak> and of course, then you will get distinct types depending on parameters
[01:22:40] *** Quits: magla (~gelignite@d5364d83.access.ecotel.net) (Quit: Stay safe!)
[01:23:24] <nq> does partial specialization always make the tempalte parameter at least one parameter smaller ?
[01:23:52] <cbreak> no
[01:27:13] *** Joins: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr)
[01:28:00] <nq> ah, there seems to be a template parameter list and a template argument list, and the argument list can still use elements from the parameter list
[01:28:53] <cbreak> {} template<typename T> struct X {}; template<typename T, size_t N> struct X<T[N]> {};
[01:28:54] <geordi>  
[01:29:12] <cbreak> the specialization here had one parameter more than the base :)
[01:29:42] <nq> can your specialization be "further specialized" though ?
[01:30:02] *** Joins: Guest19 (~Guest19@2601:647:5280:2a50:f87e:42e6:dc86:d5cf)
[01:30:18] <cbreak> only base templates can be specialized I think
[01:30:59] <nq> hmm, so you can't interpose a template argument list over another template argument list
[01:31:33] <xkoncek> once a typename is bound to template parameter list, it must remain the same
[01:31:37] <cbreak> the user always sees the argument list of the base template
[01:31:51] *** Quits: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr) (Ping timeout: 256 seconds)
[01:32:09] <xkoncek> {template<auto..., typename...> struct S;}
[01:32:09] <geordi> error: a template declaration cannot appear at block scope
[01:32:26] <nq> what exactly do you associate with the notion of a typename ?
[01:32:36] *** Quits: Tokamak (~Tokamak@172.58.188.132) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[01:32:48] <nq> is it the identifier, is it the template parameter list, is it like a function prototype ?
[01:33:04] <xkoncek> name of a struct / class
[01:34:05] <xkoncek> once you declared template<typename> struct S; S can only ever be specialized on that one template typename parameter
[01:35:11] <nq> my take is that you can only specialize whatever has remained as a parameter
[01:35:34] <nq> but in a partial specialization, you still have parameters left, so further specialization can be done ?
[01:35:51] <cbreak> only base templates can be specialized I think
[01:36:06] <cbreak> specializations don't inherit from the base template
[01:36:14] <cbreak> they are distinct implementations
[01:36:26] <xkoncek> there is a thing called template template parameters, but even those have to be fully specified i think
[01:36:46] <cbreak> you can partially specialize a class template
[01:36:56] <cbreak> but you can not specialize a template specialization
[01:37:05] <cbreak> (not that that would be of any use)
[01:37:16] <cbreak> just specialize the base template a second time instead.
[01:38:07] <cbreak> and remember: you can combine specialization with inheritance. Specializations can inherit from base classes. Even templated ones, even via CRTP
[01:39:48] *** Quits: Burgundy (~NA@5-12-91-184.residential.rdsnet.ro) (Ping timeout: 240 seconds)
[01:40:01] <nq> then I presume that having one layer of partial specialization iss like 2-ary operations in arithmetic: they are "minimal and sufficient" for anything
[01:42:10] <nq> there are times when I want to take the sizeof() the component types in a parameter list, then compute the smallest multiple of the cacheline that would fit that
[01:42:50] <nq> template <int, double, float, float, double, char> -> somehow make the template "be aware" of the total sizeof() of that
[01:43:04] <cbreak> sizeof(*this)
[01:43:14] <cbreak> that will even include required padding
[01:43:51] *** Joins: nafen_ (~nafen@gateway/tor-sasl/nafen)
[01:43:55] <nq> ok, then I want a std::tuple <typename...> of all those types; will it work ?
[01:43:59] <cbreak> or if you don't want those to actually be your members, just make a tuple with those types and sizeof that tuple
[01:44:00] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[01:44:04] *** Quits: nafen (~nafen@gateway/tor-sasl/nafen) (Remote host closed the connection)
[01:44:08] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[01:44:08] *** ChanServ sets mode: +v npaperbot
[01:44:36] <xkoncek> can you make sizeof return a size of reference? or are they always "dereferenced" to the original type?
[01:44:38] <nq> the tuple will remain an internal aspect, the parametrization remains as an enumeration of the types
[01:44:57] <nq> only consider integral types for now
[01:45:03] <cbreak> xkoncek: sizeof is for objects / types of objects... not sure what it'd even do for references...
[01:45:09] <cbreak> << sizeof(int&);
[01:45:09] <geordi> 4
[01:45:19] <cbreak> looks like it gives the size of the thing it refers to
[01:45:32] <xkoncek> like when you are doing some decltype things
[01:46:11] <cbreak> nq: if you want to know only the actual data size, just write some recursive function object that sums them up
[01:46:14] <Guest19> hello, running into weird issue. My ld search_dir has /lib/x86_64-linux-gnu . I pass --sysroot = /home/mysysroot as an argument. When linking a file, it finds some shared libraries in /home/mysysroot/lib/x86_64-linux-gnu as expected but for some other shared library, ld isn't even checking that directory.
[01:46:16] <cbreak> (without padding)
[01:46:26] <Guest19> Why is that? Can someone help. I verified that my so is available in /home/mysysroot/lib/x86_64-linux-gnu but ld isn't checking there and throwing errors
[01:47:13] <cbreak> Guest19: use -L to add to the library search path with g++ or clang++
[01:47:37] <Guest19> cbreak : but sysroot option should work fine..
[01:48:01] *** Joins: Tokamak (~Tokamak@172.58.188.132)
[01:48:12] <xkoncek> i never played with custom sysroot, but what about lib64?
[01:48:29] <xkoncek> i did when compiling with mingw
[01:48:58] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[01:49:06] *** Quits: kraa (~kraa@107-190-7-216.cpe.teksavvy.com) (Ping timeout: 245 seconds)
[01:49:07] <xkoncek> don't remember if i was specifying custom libpath
[01:49:14] *** Joins: foul_owl (~kerry@23.82.193.89)
[01:49:27] <Guest19> xkoncek : that's the confusing part..ld is looking at sysroot/lib64 and even sysroot/lib/x86_64-linux-gnu but it's not looking at that path for lot of .so files
[01:49:54] <cbreak> Guest19: have you tried -print-search-dirs?
[01:50:37] <Guest19> cbreak : which option is that? I used -wl,--verbose which prints all paths ld looks at
[01:52:27] <nq> gcc -print-search-dirs works, but not with ld
[01:52:39] <Guest19> yeah I am stuck at linker error
[01:52:52] <Guest19> and can't figure out how to make progress from this error
[01:53:12] <Alipha> { cout << size_sum<int, double, float, float, double, char>(); } template<typename... Ts> int size_sum() { return (sizeof(Ts) + ...); } // nq, though sizeof(std::tuple<Ts...>) may be more appropriate
[01:53:13] <geordi> 29
[01:53:18] <Guest19> if ld never looked at my directory, I could understand but in my case, it's finding 3 .so but failing to find 10 others
[01:54:09] *** Joins: CodePoint (~jonathan@107-208-128-79.lightspeed.tukrga.sbcglobal.net)
[01:54:22] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:fcde:a8ca:a29e:9109)
[01:54:44] <nq> Alipha: I realized that my idea of what I want is still vague, so I'll try a type-less variant first and then come back to the type-system afterwards; I don't know what to say but, dealing with the type-system makes everything more vague for me :)
[01:55:34] <nq> Alipha: return (sizeof(Ts) + size_sum<Ts...>()); ??
[01:55:48] <nq> wait, I didn't take any element out of the induction..
[01:56:32] <cbreak> nq: if you're using a new version of c++, you can use fold expressions like Alipha did
[01:56:42] <Alipha> nq: if you're pre-c++17, sure, but c++17 has fold expressions
[01:56:48] <cbreak> you only need to use recursion if you want to be compatible to old-school c++
[01:56:49] <nq> aha
[01:57:14] <nq> well, it made "more sense" to me to specify how the induction evolves
[01:57:20] <cbreak> the ... in his example are actually part of the valid c++
[01:58:07] <nq> so the ... becomes the right-side / remainder of the induction and Ts is really the first left element ?
[01:58:25] <nq> like a "2 in 1"
[01:59:14] *** Joins: spaceangel__ (~spaceange@ip-78-102-216-202.net.upcbroadband.cz)
[02:01:53] *** Quits: spaceangel_ (~spaceange@ip-78-102-216-202.net.upcbroadband.cz) (Ping timeout: 256 seconds)
[02:03:28] *** Joins: c4017w_ (~c4017@209.52.68.8)
[02:03:37] *** Quits: imi (~imi@catv-89-132-115-236.catv.fixed.vodafone.hu) (Ping timeout: 240 seconds)
[02:03:39] <nq> what alignments / padding does a struct typically.. "suffer" ?
[02:03:49] <nq> what is it getting aligned to ?
[02:04:02] <nq> 8 bytes ? cacheline ? page-size ?
[02:05:42] <kalven> depends on the members
[02:06:09] <kalven> << alignof(foo); struct foo { char x; };
[02:06:10] <geordi> 1
[02:06:37] <CodePoint> geordi: align my shit.
[02:06:37] <geordi> error: 'align' does not name a type
[02:06:44] <CodePoint> geordi: help
[02:06:45] <geordi> Mini-manual:  http://www.eelis.net/geordi/
[02:07:00] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 250 seconds)
[02:08:12] <nq> << "bla";
[02:08:13] <geordi> bla
[02:08:16] <nq> ah..
[02:08:37] <kalven> << alignof(foo); struct foo { char x; double y; };
[02:08:37] <geordi> 8
[02:08:42] <CodePoint> << "<< blah"
[02:08:43] <geordi> << blah
[02:09:10] <nq> << struct foo { int a; }; alignof(foo);
[02:09:10] <geordi> error: expected unqualified-id before 'alignof'
[02:09:30] <nq> << struct foo { int a; }; << alignof(foo);
[02:09:30] <geordi> error: expected unqualified-id before '<<' token
[02:09:41] <nq> hmph, suit yourself
[02:09:55] <kalven> use the syntax I showed
[02:10:14] <nq> I saw, but it bothers me that forward declarations work.. without being declared
[02:10:24] <Alipha> nq: if you want to include alignment, you should just sizeof(std::tuple<Ts...>)
[02:10:26] <nq> lazily evaluated
[02:10:50] <nq> I think I'll use tuple indeed
[02:10:58] <kalven> it's a special geordi thing.. '<< blahblah; x'  means do x first, then cout << blahblah;
[02:11:17] <CodePoint> << alignof(food); sizeof(food); struct food{char x; double y;};
[02:11:17] <geordi> error: expected unqualified-id before 'sizeof'
[02:11:33] <kalven> << alignof(food), sizeof(food); struct food{char x; double y;};
[02:11:33] <geordi> 8, 16
[02:11:34] <nq> so it tolerates one instruction
[02:11:52] <nq> but works with "tuples of instructions"
[02:11:52] <CodePoint> << alignof(food); food f{'c', 1.0}; sizeof(food); struct food{char x; double y;};
[02:11:53] <geordi> error: 'food' does not name a type
[02:11:54] <kalven> { std::cout << "this also works; }
[02:11:55] <geordi> error: Unexpected end of request. Expected any symbol.
[02:12:06] <kalven> { std::cout << "this also works"; }
[02:12:07] <geordi> this also works
[02:12:25] <CodePoint> << alignof(food); struct food{char x; double y;}; food f{'c', 1.0}; sizeof(food);
[02:12:25] <geordi> error: expected unqualified-id before 'sizeof'
[02:12:35] <CodePoint> << alignof(food); struct food{char x; double y;}; food f{'c', 1.0}; sizeof(f);
[02:12:35] <geordi> Same error.
[02:12:43] <CodePoint> god dammit geordi ....
[02:12:46] <nq> lol, it has memory
[02:13:03] <CodePoint> You need to realign your power couples.
[02:13:41] <CodePoint> https://preview.redd.it/co5nj7t7yxl31.jpg?auto=webp&s=3b559ef95abd592a7f2b1a100ff4f0cb59966e93
[02:14:06] <nq> well, it's all part of the tech stack :))
[02:16:03] <nq> << { std::cout << "this also works"; }, sizeof(foo); struct foo { int a; double b; };
[02:16:03] <geordi> error: expected primary-expression before '{' token
[02:16:12] <nq> << std::cout << "this also works", sizeof(foo); struct foo { int a; double b; };
[02:16:12] <geordi> error: no match for 'operator<<' in 'cout << cout' (operand types are 'ostream' {aka 'ostream'} and 'ostream' {aka 'ostream'})
[02:16:21] <nq> so it won't take statements, just expressions ?
[02:16:27] <kalven> plz read the manual and then experiment in #geordi
[02:16:42] *** Joins: imi (~imi@catv-89-132-115-236.catv.fixed.vodafone.hu)
[02:16:42] <nq> kk
[02:17:32] <nq> can you turn IO into an expression form though ?
[02:17:42] <CodePoint> ( ͠° ͟ʖ ͡°)
[02:17:46] <kalven> { std::cout << "this also works: " << sizeof(foo); } struct foo { int a; double b; };
[02:17:47] <geordi> this also works: 16
[02:17:56] <nq> it's a single statement
[02:18:42] <nq> I meant if you could "tuple" multiple IO statements in the first.. thing
[02:18:58] <kalven> { for (int i = 0; i != 3; ++i) std::cout << "x"; }
[02:18:59] <geordi> xxx
[02:19:01] <kalven> not sure what you're after
[02:19:17] *** Quits: andreasbuhr (~quassel@p549db611.dip0.t-ipconnect.de) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[02:19:25] <CodePoint> { std::cout << "sz: " << sizeof(foo)<< "   align: "<< alignof(foo); } struct foo { int a; double b; };
[02:19:26] <geordi> sz: 16   align: 8
[02:19:30] <CodePoint> ... huh
[02:19:58] <CodePoint> so... alignment is the smallest size of the block to which it can align?
[02:20:15] <nq> well, it loses meaning now; I wanted something like "<< {this is the first statement; I am special}; {these are the rest of things}" => "<< {you}, {can}, {tuple}, {things}, {so}; {the other stuff}"
[02:20:43] *** Quits: badone (~badone@209.132.189.152) (Quit: ZNC 1.7.5 - https://znc.in)
[02:21:19] <nq> isn't that the size of the largest member attribute ?
[02:21:37] <nq> like, it would pad 4 bytes because of the int and the double
[02:21:38] <kalven> there are two simple forms.. "<< expr;"  and "{ statements }", both can optionally be followed by stuff that actually gets done first.
[02:22:07] <nq> kalven: yep, exactly; I thought I could make statements into expr just to fit the first form
[02:23:09] <nq> kalven: I had .. preocupations; one of them involves deciding where exactly is the boundary between what statements can express computation of and what expressions can compute, to the limits
[02:23:15] *** Joins: ferdna (~ferdna@user/ferdna)
[02:23:21] <nq> and this remained an unsolved one
[02:24:11] <kalven> in the end it all gets fed into gcc, compiled, executed and piped back to the channel
[02:25:11] <nq> quite nice actually
[02:25:51] <nq> ah yes, I wanted to ask about this as well: https://wandbox.org/permlink/jfw9uhSIGrV8TM54
[02:26:42] *** Quits: Spirit532 (~Spirit532@user/Spirit532) (Read error: Connection reset by peer)
[02:26:44] <nq> so, back to the size_sum thing, writing it in both the folding and non-folding way (what is "folding" actually ?); what interests me is that it says overloading is ambiguous, and yet those two things are both templates
[02:27:02] <nq> so it's essentially saying that both templates have been made into actual functions ?
[02:28:30] *** Joins: Spirit532 (~Spirit532@user/Spirit532)
[02:28:39] <kalven> both match?
[02:29:06] <nq> they are both "candidates" for matching the function call, but they have both matched the template and gotten instantiated, so yes
[02:29:21] <Alipha> nq: https://en.cppreference.com/w/cpp/language/fold
[02:29:48] *** Quits: evangeline (~Eleanor@178.79.105.181) (Ping timeout: 240 seconds)
[02:29:57] <nq> Alipha: so induction is treated as a 2-ary operation ?
[02:30:20] <nq> it's more like "inductive unpacking" then, this "folding"
[02:32:24] *** Quits: Guest19 (~Guest19@2601:647:5280:2a50:f87e:42e6:dc86:d5cf) (Quit: Client closed)
[02:32:37] *** Joins: Guest19 (~Guest19@2601:647:5280:2a50:f87e:42e6:dc86:d5cf)
[02:34:25] <Alipha> nq: https://wandbox.org/permlink/yPLc3f88ldoHmFHq
[02:34:45] *** Quits: kenanmarasli (~kenanmara@user/kenanmarasli) (Ping timeout: 256 seconds)
[02:35:03] <nq> how would you do this ? https://wandbox.org/permlink/3OKflgycgCbgAA5l
[02:35:03] *** Quits: lmat (~Lmat@c-73-102-193-68.hsd1.in.comcast.net) (Remote host closed the connection)
[02:35:23] <nq> I don't know how to get is to work "like an expression"; it doesn't seem to like statements
[02:35:32] <nq> or maybe it's something else
[02:35:48] <nq> I want to sum it all up in a string if cout doesn't work
[02:38:03] *** Quits: m_ben (~m_ben@user/m-ben/x-7429725) (Quit: WeeChat 3.4)
[02:38:15] <Alipha> nq: https://wandbox.org/permlink/HFlFsBWZlrMHHb6e
[02:39:05] <nq> oh, so it takes the whole left parentheses as a "template" for all of the Args
[02:39:30] *** Quits: CodePoint (~jonathan@107-208-128-79.lightspeed.tukrga.sbcglobal.net) (Ping timeout: 250 seconds)
[02:41:53] <nq> so, I don't see why in this case it seems to recurse indefinitely https://wandbox.org/permlink/AeWEOP3geC3GheLd
[02:42:02] <nq> or else I don't know what the error is
[02:42:59] *** Quits: Kakurady (~nekoyasha@bras-base-toroon63x9w-grc-18-76-68-53-51.dsl.bell.ca) (Quit: Konversation terminated!)
[02:43:10] <nq> oh, Args... can even be an empty list ?
[02:43:10] <Alipha> nq: the issue is that, for one template argument, both overloads are valid and therefore ambiguous
[02:44:04] <Alipha> nq: if you look at https://wandbox.org/permlink/yPLc3f88ldoHmFHq my second overload has a T2
[02:44:24] <nq> I saw that, you need it to ensure at least one element in Args... ?
[02:44:34] <Alipha> So the first overload only takes a T and the second overload takes a T, T2, plus zero or more arguments
[02:45:07] <Alipha> Yes, `Args...` can be a parameter pack of size 0
[02:45:19] <nq> I get that, it's like a regex; my regex was <1, {0, any}> and yours is <1, 1, {0, any}> = <2, {0, any}>
[02:45:37] <Alipha> Yes
[02:46:03] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.4)
[02:46:07] <nq> that Args... acting as a * wasn't expected
[02:46:15] <nq> I thought it would be a +
[02:49:24] *** Joins: Kakurady (~nekoyasha@bras-base-toroon63x9w-grc-18-76-68-53-51.dsl.bell.ca)
[02:50:28] <nq> I am trying to understand the type system, and especially with the templates being involved, from the perspective of a pattern matching mechanism; it's a little confusing
[02:52:10] <nq> it kind of double-functions, in part by matching and in the other part by code-generating - although I asume that code generation is really up to the AST's intermediary representation being in turn also pattern-matched with assembly instructions
[02:52:40] *** Quits: unixpro1970 (~unixpro19@c-67-168-1-124.hsd1.wa.comcast.net) (Remote host closed the connection)
[02:54:49] *** Quits: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it) (Read error: Connection reset by peer)
[02:56:08] *** Joins: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it)
[03:01:44] *** Quits: Kakurady (~nekoyasha@bras-base-toroon63x9w-grc-18-76-68-53-51.dsl.bell.ca) (Quit: Konversation terminated!)
[03:02:21] *** Joins: unixpro1970 (~unixpro19@c-67-168-1-124.hsd1.wa.comcast.net)
[03:03:51] *** Quits: imi (~imi@catv-89-132-115-236.catv.fixed.vodafone.hu) (Ping timeout: 252 seconds)
[03:03:54] *** Joins: c4017w__ (~c4017@209.52.68.8)
[03:04:05] *** Quits: kurfen_ (~kurfen@176.119.195.9) (Quit: ZNC 1.8.2 - https://znc.in)
[03:05:30] *** Quits: Codaraxis (~Codaraxis@user/codaraxis) (Ping timeout: 250 seconds)
[03:06:58] *** Joins: kurfen (~kurfen@176.119.195.9)
[03:07:02] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[03:16:06] *** Joins: imi (~imi@catv-89-132-115-236.catv.fixed.vodafone.hu)
[03:18:09] *** Quits: zen_coder (~zen_coder@2a02:8109:a280:2d8d:11e0:bab1:2383:8658) (Ping timeout: 252 seconds)
[03:24:42] *** Quits: DSpider (~DSpider@82.79.237.117) (Quit: Leaving)
[03:31:44] *** Joins: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz)
[03:32:57] *** Quits: spaceangel__ (~spaceange@ip-78-102-216-202.net.upcbroadband.cz) (Ping timeout: 240 seconds)
[03:49:40] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[03:50:02] *** Quits: xuxx (~xuxx@86.228.71.37.rev.sfr.net) (Ping timeout: 240 seconds)
[03:51:57] *** Joins: smallvil_ (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[03:54:02] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Ping timeout: 240 seconds)
[03:59:13] *** Joins: spaceangel_ (~spaceange@ip-78-102-216-202.net.upcbroadband.cz)
[04:01:37] *** Quits: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz) (Ping timeout: 240 seconds)
[04:02:58] <jbalint> how does name lookup work when I refer to main::sub2 from main::sub1 as sub2::symbol?
[04:04:29] *** Joins: c4017w_ (~c4017@209.52.68.8)
[04:08:12] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 252 seconds)
[04:15:57] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:ed8e:eff0:febb:d703) (Ping timeout: 240 seconds)
[04:16:05] *** Joins: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse)
[04:16:19] *** Quits: zmt01 (~zmt00@user/zmt00) (Ping timeout: 250 seconds)
[04:18:43] *** Quits: malloy (~jimery@120.235.172.170) (Read error: Connection reset by peer)
[04:20:21] *** Joins: zmt00 (~zmt00@user/zmt00)
[04:21:05] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:dcda:6ac0:7da0:73a8)
[04:21:15] *** Quits: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it) (Read error: Connection reset by peer)
[04:21:33] *** Joins: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it)
[04:24:02] *** Quits: RandomReader (~RandomRea@user/randomreader) (Remote host closed the connection)
[04:24:29] *** Joins: malloy (~jimery@120.235.172.170)
[04:25:26] *** Quits: Jupp_S (~quassel@ip-088-153-154-129.um27.pools.vodafone-ip.de) (Remote host closed the connection)
[04:29:43] <Alipha> sub2 is first looked for in the namespace you're currently in, main, and finds it
[04:30:44] *** Joins: great_taste (~great_tas@user/great-taste/x-5798414)
[04:30:51] *** Joins: Codaraxis (~Codaraxis@user/codaraxis)
[04:47:50] *** Quits: spaceangel_ (~spaceange@ip-78-102-216-202.net.upcbroadband.cz) (Remote host closed the connection)
[04:50:08] *** Joins: kraa (~kraa@107-190-7-216.cpe.teksavvy.com)
[04:51:34] *** Quits: pepperoni (~pepperoni@172.58.102.236) (Read error: Connection reset by peer)
[04:52:01] *** Joins: pepperoni (~pepperoni@172.58.102.236)
[04:59:12] *** Quits: pulse (~pulse@user/pulse) (Quit: Join us at https://indiedevs.net/)
[04:59:27] *** Joins: pulse (~pulse@user/pulse)
[05:02:22] *** Joins: RandomReader (~RandomRea@user/randomreader)
[05:04:59] *** Joins: c4017w__ (~c4017@209.52.68.8)
[05:07:37] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 240 seconds)
[05:08:19] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[05:27:10] *** Quits: Roughy (~mdaw45ns@user/roughy) (Quit: Meadow Fresh milk)
[05:28:45] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:dcda:6ac0:7da0:73a8) (Quit: Textual IRC Client: www.textualapp.com)
[05:39:16] *** Quits: kraa (~kraa@107-190-7-216.cpe.teksavvy.com) (Quit: Leaving)
[05:44:11] *** Joins: npaperbot2 (~npaperbot@dodecahedron.m-ou.se)
[05:44:35] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Ping timeout: 256 seconds)
[05:47:35] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[06:03:34] *** Quits: davidlowryduda (~davidlowr@2601:197:600:1210:b19d:d8f1:1756:fb98) (Ping timeout: 260 seconds)
[06:05:33] *** Joins: davidlowryduda (~davidlowr@73.61.8.157)
[06:05:42] *** Joins: c4017w_ (~c4017@209.52.68.8)
[06:08:02] *** Joins: Inline__ (~Inline@p200300cd470af600c32f3b3744c2844b.dip0.t-ipconnect.de)
[06:09:00] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[06:10:13] *** Quits: Inline (~Inline@p200300cd470bec006530e405655b2087.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[06:16:07] *** Joins: leduyquang753 (~leduyquan@user/leduyquang753)
[06:27:03] <jbalint> I'm not in main, but main::sub1. using unix paths as an analogy, it'
[06:27:21] <jbalint> s not ./sub2/symbol, it's ../sub2/symbol
[06:37:02] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[06:38:21] *** Quits: smallvil_ (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Ping timeout: 252 seconds)
[06:49:44] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[06:50:32] *** Quits: imi (~imi@catv-89-132-115-236.catv.fixed.vodafone.hu) (Ping timeout: 240 seconds)
[06:51:33] *** Quits: Alipha (~AliphaX@user/alipha) (Ping timeout: 252 seconds)
[07:02:53] *** Joins: imi (~imi@catv-89-132-115-236.catv.fixed.vodafone.hu)
[07:05:13] *** Joins: Alipha (~AliphaX@user/alipha)
[07:06:27] *** Joins: c4017w__ (~c4017@209.52.68.8)
[07:09:32] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[07:09:47] *** Joins: adeliktas8 (~adeliktas@i59F5FD1E.versanet.de)
[07:11:36] *** Joins: msk (~msk@103.213.213.65)
[07:12:25] *** Quits: adeliktas (~adeliktas@i59f527d7.versanet.de) (Ping timeout: 256 seconds)
[07:12:25] *** adeliktas8 is now known as adeliktas
[07:30:32] *** Quits: ARoxdale (~ARoxdale@93.107.214.80) (Ping timeout: 240 seconds)
[07:45:30] *** Quits: Hello71 (~Hello71@wireguard/contributor/hello71) (Remote host closed the connection)
[07:46:03] *** Joins: Hello71 (~Hello71@wireguard/contributor/hello71)
[07:46:28] *** Joins: SorryBeauty (~SorryBeau@103.76.184.42)
[07:46:30] *** Quits: ravan_ (~ravan@user/ravan) (Remote host closed the connection)
[07:48:23] *** Quits: pulse (~pulse@user/pulse) (Quit: Join us at https://indiedevs.net/)
[07:48:29] *** Joins: Kakurady (~nekoyasha@207.236.147.169)
[07:53:02] *** Quits: geranim0 (~geranim0@modemcable242.171-178-173.mc.videotron.ca) (Ping timeout: 240 seconds)
[08:05:32] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Ping timeout: 272 seconds)
[08:06:44] *** Joins: c4017w_ (~c4017@209.52.68.8)
[08:07:34] *** Quits: p-i- (~Ohmu@2403:6200:8978:d82d:89c0:e177:c2f7:c9a9) (Remote host closed the connection)
[08:08:06] *** Joins: p-i- (~Ohmu@2403:6200:8978:d82d:540d:8c68:2946:51e0)
[08:10:13] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[08:15:02] *** Quits: alex88 (~alex88@ip72-207-140-105.lv.lv.cox.net) (Ping timeout: 272 seconds)
[08:17:40] *** Joins: ravan (~ravan@user/ravan)
[08:19:49] *** Joins: Jupp_S (~quassel@ip-088-153-154-129.um27.pools.vodafone-ip.de)
[08:21:12] *** Quits: arch-angel (~arch-ange@user/arch-angel) (Remote host closed the connection)
[08:26:17] *** Quits: ville (~ville@user/ville) (Quit: ville)
[08:29:00] *** Joins: ville (~ville@user/ville)
[08:30:36] *** Quits: great_taste (~great_tas@user/great-taste/x-5798414) (Quit: Client closed)
[08:37:45] *** Joins: Burgundy (~NA@5-12-91-184.residential.rdsnet.ro)
[09:07:04] *** Joins: c4017w__ (~c4017@209.52.68.8)
[09:10:17] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[09:16:43] *** Joins: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr)
[09:26:16] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:fcde:a8ca:a29e:9109) (Quit: Quit)
[09:44:01] *** Quits: npaperbot2 (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[09:44:10] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Ping timeout: 250 seconds)
[09:44:10] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[09:44:10] *** ChanServ sets mode: +v npaperbot
[09:51:27] *** Joins: andreasbuhr (~quassel@p549db74d.dip0.t-ipconnect.de)
[09:53:02] *** Joins: callq (~callq@2409:4062:4e9a:a9bd:dc94:3973:cfd6:75e7)
[09:56:44] *** gentooclimax is now known as climax
[09:58:37] *** climax is now known as gentooclimax
[10:04:02] *** Quits: imi (~imi@catv-89-132-115-236.catv.fixed.vodafone.hu) (Ping timeout: 240 seconds)
[10:07:21] *** Joins: c4017w_ (~c4017@209.52.68.8)
[10:09:14] *** Quits: talisein (~talisein@user/talisein) (*.net *.split)
[10:09:14] *** Quits: obiwahn (~heini@user/obiwahn) (*.net *.split)
[10:09:14] *** Quits: ivan (~ivan@user/ivan) (*.net *.split)
[10:10:39] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 252 seconds)
[10:12:18] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[10:14:34] *** Joins: talisein (~talisein@user/talisein)
[10:14:34] *** Joins: obiwahn (~heini@user/obiwahn)
[10:14:34] *** Joins: ivan (~ivan@user/ivan)
[10:15:27] *** Quits: SorryBeauty (~SorryBeau@103.76.184.42) (Ping timeout: 256 seconds)
[10:16:23] *** Joins: imi (~imi@catv-89-132-115-236.catv.fixed.vodafone.hu)
[10:18:25] *** Joins: xkuru (~xkuru@user/xkuru)
[10:23:01] *** Joins: x_kuru (xkuru@user/xkuru)
[10:25:30] *** Quits: skapata (~Skapata@user/skapata) (Ping timeout: 252 seconds)
[10:26:47] *** Quits: xkuru (~xkuru@user/xkuru) (Ping timeout: 256 seconds)
[10:37:56] *** Joins: JohnMS_WORK (~kvirc@194.110.240.100)
[10:40:20] *** Joins: evangeline (~Eleanor@178.79.105.181)
[10:40:31] *** Quits: pepperoni (~pepperoni@172.58.102.236) (Read error: Connection reset by peer)
[10:41:06] *** Joins: emerent_ (~quassel@p200300cd5743c3f1ba27ebfffed28a59.dip0.t-ipconnect.de)
[10:41:06] *** Quits: emerent (~quassel@p200300cd5743c3ebba27ebfffed28a59.dip0.t-ipconnect.de) (Killed (erbium.libera.chat (Nickname regained by services)))
[10:41:06] *** emerent_ is now known as emerent
[10:41:19] *** Joins: pepperoni (~pepperoni@172.58.102.236)
[10:45:03] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[10:49:54] *** gentooclimax is now known as climax
[10:52:36] *** Quits: kurfen (~kurfen@176.119.195.9) (Ping timeout: 240 seconds)
[10:53:12] *** Joins: jsbach (~jsbach@2a02:810a:1440:4cec:3af3:abff:fe57:23d5)
[10:53:35] *** Joins: manjaro-user (~manjaro-u@199.119.235.168)
[10:54:45] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[10:56:47] *** Joins: kenanmarasli (~kenanmara@user/kenanmarasli)
[10:57:50] *** Quits: foul_owl (~kerry@23.82.193.89) (Ping timeout: 250 seconds)
[11:07:41] *** Joins: c4017w__ (~c4017@209.52.68.8)
[11:08:03] *** climax is now known as gentooclimax
[11:08:33] *** Quits: pepperoni (~pepperoni@172.58.102.236) (Read error: Connection reset by peer)
[11:09:22] *** Joins: pepperoni (~pepperoni@172.58.102.236)
[11:10:57] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[11:13:02] *** Quits: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr) (Quit: Konversation terminated!)
[11:13:24] *** Joins: foul_owl (~kerry@23.82.193.87)
[11:16:55] <manjaro-user> grrr. Http parsing is so annoying
[11:17:40] <manjaro-user> ` can exist to either start a string or to just act as an apostrophe. Either that or I missed a rule in the spec
[11:19:56] <mort> any particular reason you're parsing HTTP manually?
[11:20:50] <mort> there are good reasons to do so, just curious
[11:29:25] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Remote host closed the connection)
[11:30:06] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[11:32:09] *** Joins: sigma_ (~sigma@2.147.53.58)
[11:34:50] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Read error: Connection reset by peer)
[11:36:12] <TinoDidriksen> ` has no meaning in HTTP.
[11:40:03] *** Joins: arch-angel (~arch-ange@user/arch-angel)
[11:40:21] *** Quits: msim_ (~msim@2001:8003:d194:d000::d8d) (Ping timeout: 245 seconds)
[11:42:55] *** Joins: DSpider (DSpider@2a02:2f00:4ff:ffff::646c:65c2)
[11:43:43] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[11:44:39] <johnny> manjaro-user, you are testing your assumptions with an exiting http server or client right?
[11:44:50] <johnny> a known spec compliant one that is :)
[11:45:46] *** Joins: interop_madness (~interop_m@user/interop-madness/x-0950004)
[11:47:02] <sigma_> hi, i have problem in qtcreator. in main file the intellisens is good but in other source i have problem to include qt headers and when i put them i get an other error about file not found in that qtheader. how can i solve this ?
[11:52:07] *** Joins: msim_ (~msim@2001:8003:d194:d000::d8d)
[11:53:22] *** Joins: SorryBeauty (~SorryBeau@103.76.184.42)
[12:00:46] *** Quits: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it) (Read error: Connection reset by peer)
[12:02:53] *** Joins: x_kuru_ (~xkuru@user/xkuru)
[12:05:05] *** Joins: Haohmaru (~Haohmaru@195.24.53.110)
[12:06:04] *** Joins: bobb_ (~bobb_@dslb-092-074-230-090.092.074.pools.vodafone-ip.de)
[12:06:31] *** Quits: x_kuru (xkuru@user/xkuru) (Ping timeout: 256 seconds)
[12:07:30] <LordKalma> so have you seen the node.js nuke library?
[12:08:27] *** Joins: c4017w_ (~c4017@209.52.68.8)
[12:09:15] *** Joins: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it)
[12:10:32] *** Quits: msk (~msk@103.213.213.65) (Ping timeout: 240 seconds)
[12:11:14] *** Joins: undephin3d (~undephin3@158.181.75.6)
[12:12:11] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[12:15:27] *** Joins: zen_coder (~zen_coder@2a02:8109:a280:2d8d:d91b:267d:4123:397)
[12:15:30] *** Quits: jsbach (~jsbach@2a02:810a:1440:4cec:3af3:abff:fe57:23d5) (Ping timeout: 252 seconds)
[12:27:54] *** Joins: robod34 (~Username@79.113.243.73)
[12:30:18] *** Joins: jsbach (~jsbach@2a02:810a:1440:4cec:3af3:abff:fe57:23d5)
[12:35:22] *** Quits: baltazar (~baltazar@84-236-97-135.pool.digikabel.hu) (Remote host closed the connection)
[12:37:32] *** Quits: SorryBeauty (~SorryBeau@103.76.184.42) (Quit: Client closed)
[12:40:51] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Remote host closed the connection)
[12:41:28] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[12:48:24] *** Joins: soman (~soman@83.139.179.68)
[12:49:59] *** Joins: PJBoy (~PJBoy@user/pjboy)
[12:50:44] *** Quits: soman (~soman@83.139.179.68) (Client Quit)
[12:51:04] *** Quits: leduyquang753 (~leduyquan@user/leduyquang753) (Quit: Gotta go, see you guys later.)
[12:51:30] *** Joins: soman (~soman@83.139.179.68)
[12:51:42] *** Joins: mkoncek (Thunderbir@nat-pool-brq-t.redhat.com)
[12:52:14] <mkoncek> hmm... this is new info for me: "Because variadic parameters have the lowest rank for the purpose of overload resolution, they are commonly used as the catch-all fallbacks in SFINAE."
[12:52:41] *** Joins: baltazar (~baltazar@84-236-97-135.pool.digikabel.hu)
[12:58:22] *** manjaro-user is now known as Kill-Animals
[13:08:42] <LordKalma> !rq
[13:08:42] <nolyc> LordKalma: <Alipha> I use -w all the time because I know better than the compiler
[13:09:02] <LordKalma> dont tell me what to do biatch hahaha
[13:09:08] *** Joins: c4017w__ (~c4017@209.52.68.8)
[13:10:32] *** Quits: imi (~imi@catv-89-132-115-236.catv.fixed.vodafone.hu) (Ping timeout: 240 seconds)
[13:12:26] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 245 seconds)
[13:13:41] *** Joins: plastico (~plastico@neomutt/plastico)
[13:14:29] <mkoncek> of course combined with -fpermissive
[13:17:21] *** Quits: ville (~ville@user/ville) (Ping timeout: 256 seconds)
[13:20:20] *** Joins: ville (~ville@user/ville)
[13:21:30] *** Joins: SorryBeauty (~SorryBeau@103.25.241.127)
[13:22:55] *** Joins: imi (~imi@catv-89-132-115-236.catv.fixed.vodafone.hu)
[13:25:16] <cbreak> Seems like deep mind invented a noob programmer: https://www.youtube.com/watch?v=x_cxDgR1x-c ... so much potential UB due to missing error handling in there...
[13:29:11] *** Joins: paul424 (~tom@ip-5-172-234-57.multi.internet.cyfrowypolsat.pl)
[13:30:01] *** Quits: yolo (~xxiao@li1120-73.members.linode.com) (Quit: Lost terminal)
[13:30:11] *** Quits: zen_coder (~zen_coder@2a02:8109:a280:2d8d:d91b:267d:4123:397) (Quit: Konversation terminated!)
[13:36:22] <PJBoy> I assume it machine learns over everyone else's solutions to those puzzles
[13:39:43] *** Quits: nq (~nq@2a02:2f08:e015:a900:40da:1589:cc07:ab3) (Quit: Leaving)
[13:40:51] *** Quits: bobb_ (~bobb_@dslb-092-074-230-090.092.074.pools.vodafone-ip.de) (Quit: Client closed)
[13:44:02] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[13:44:10] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[13:44:10] *** ChanServ sets mode: +v npaperbot
[13:45:31] <ville> as a sidenote just recently found an addon that makes youtube usable: https://addons.mozilla.org/en-US/firefox/addon/youtube-recommended-videos/
[13:47:30] <ville> have the page show the actual video. it's incredible
[13:48:44] <PJBoy> I'm quite amazed that youtube of all things still supports my ancient firefox
[13:50:00] <PJBoy> so I get wanting to remove all the cruft from youtube
[13:50:09] <PJBoy> the recommended videos, the comments etc.
[13:50:11] <very_sneaky> ville: wat? youtube shows me recommendations all the time
[13:50:18] <very_sneaky> the trick is getting it not to
[13:50:42] <PJBoy> but the actual video is always there, the other stuff doesn't get in the way of that
[13:50:55] <PJBoy> very_sneaky, yeah that's what the addon does
[13:51:14] <PJBoy> > Hide YouTube related videos, comments, video suggestions wall, homepage recommendations, trending tab, and other distractions
[13:51:26] <very_sneaky> ah, gotcha
[13:52:12] <very_sneaky> sometimes i enjoy falling into the youtube rabbit hole of sea shanty's and irish folk music
[13:59:32] <mkoncek> i keep using RSS feeds for YT
[14:00:04] <mkoncek> got very pissed when i discovered that transferring my .local directory did not contain all the stored RSS entries
[14:00:59] *** Quits: SorryBeauty (~SorryBeau@103.25.241.127) (Ping timeout: 256 seconds)
[14:09:51] *** Joins: c4017w_ (~c4017@209.52.68.8)
[14:13:02] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[14:14:26] *** Joins: JohnMS_AWAY (~kvirc@89-64-70-205.dynamic.chello.pl)
[14:17:06] *** Joins: m_ben (~m_ben@user/m-ben/x-7429725)
[14:17:17] *** Quits: JohnMS_WORK (~kvirc@194.110.240.100) (Ping timeout: 240 seconds)
[14:18:07] *** Quits: soman (~soman@83.139.179.68) (Quit: Client closed)
[14:18:10] *** Quits: malloy (~jimery@120.235.172.170) (Ping timeout: 265 seconds)
[14:18:20] *** Quits: AbleBacon (~AbleBacon@user/AbleBacon) (Read error: Connection reset by peer)
[14:19:44] *** Joins: malloy (~jimery@120.235.172.170)
[14:26:32] *** Joins: blackout69 (~blackout6@37.183.198.248)
[14:30:17] *** Kill-Animals is now known as Hug-Animals
[14:31:00] *** Quits: sigma_ (~sigma@2.147.53.58) (Quit: Konversation terminated!)
[14:40:28] *** Quits: paul424 (~tom@ip-5-172-234-57.multi.internet.cyfrowypolsat.pl) (Remote host closed the connection)
[14:42:55] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[14:43:34] *** Quits: ivii (~ivan@user/ivii) (Remote host closed the connection)
[14:46:02] *** Quits: Haohmaru (~Haohmaru@195.24.53.110) (Ping timeout: 240 seconds)
[14:46:25] <ville> very_sneaky: try the addon, turn all the blocking on, enjoy
[14:49:20] *** Quits: Khoyo_ (~khoyo@user/khoyo) (Quit: ZNC 1.8.2 - https://znc.in)
[14:50:26] *** Joins: Khoyo (~khoyo@user/khoyo)
[14:54:00] *** Quits: x_kuru_ (~xkuru@user/xkuru) (Ping timeout: 250 seconds)
[14:54:21] *** Joins: xkuru (~xkuru@user/xkuru)
[14:58:28] *** Joins: ARoxdale (~ARoxdale@93.107.214.80)
[14:59:50] *** Joins: Roughy (~mdaw45ns@user/roughy)
[15:02:34] *** Quits: xkuru (~xkuru@user/xkuru) (Ping timeout: 260 seconds)
[15:02:57] *** Parts: blackout69 (~blackout6@37.183.198.248) ()
[15:03:02] *** Joins: kurfen (~kurfen@176.119.195.8)
[15:03:19] *** Quits: Hug-Animals (~manjaro-u@199.119.235.168) (Ping timeout: 256 seconds)
[15:03:44] <cbreak> ville: I like "Enhancer for Youtube(TM)", an other ff addon
[15:04:08] <cbreak> it adds some neat features, like a small hover window when I scroll down to look what nonsense people wrote in the comments
[15:04:21] <cbreak> or improved controls, or fixed default quality
[15:05:18] *** Joins: Hug-Animals (~manjaro-u@199.119.235.168)
[15:07:51] *** Quits: JohnMS_AWAY (~kvirc@89-64-70-205.dynamic.chello.pl) (Ping timeout: 256 seconds)
[15:10:37] *** Joins: c4017w__ (~c4017@209.52.68.8)
[15:12:10] <ville> cbreak: yeah i've looked at it, i just wanted to get rid off most of it
[15:12:36] *** Quits: proller (~p@2a02:6b8:b081:26::1:39) (Ping timeout: 252 seconds)
[15:13:39] *** Quits: Guest19 (~Guest19@2601:647:5280:2a50:f87e:42e6:dc86:d5cf) (Quit: Client closed)
[15:14:05] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[15:14:09] <PJBoy> I hate that floating miniplayer
[15:14:18] <PJBoy> it's a standard YT feature now
[15:14:28] <cbreak> nice
[15:18:18] <ville> the one at the bottom right? yeah it's on the list of things to get rid off
[15:20:43] *** Joins: Deneb (~johnch@128.82.159.143.dyn.plus.net)
[15:29:24] *** Joins: JohnMS_AWAY (~kvirc@194.110.240.100)
[15:31:47] *** Quits: davidlowryduda (~davidlowr@73.61.8.157) (Quit: WeeChat 3.0)
[15:33:35] <cbreak> with the enhancer thing, it can be resized / positioned. I like it, when reading comments
[15:33:58] *** Joins: JohnMS_WORK (~kvirc@89-64-70-205.dynamic.chello.pl)
[15:35:06] <ville> why would you ever read comments?
[15:36:28] <PJBoy> morbid curiosity
[15:36:33] <cbreak> to judge the average intelligence of my fellow humans
[15:36:50] *** Joins: lmat (~Lmat@c-73-102-193-68.hsd1.in.comcast.net)
[15:37:19] *** Joins: AmR (~AmREiSa@156.207.194.71)
[15:38:04] *** Quits: JohnMS_AWAY (~kvirc@194.110.240.100) (Ping timeout: 268 seconds)
[15:38:04] <PJBoy> YT comments are only the sample of people that would comment on a YT video though
[15:38:14] <PJBoy> so probably less than average
[15:39:25] <PJBoy> like I get mad at people on /r/cpp for spouting dogma or FUD or whatever, and I get disappointed with C++ devs
[15:39:39] <PJBoy> then I remember that they're just the kinds of people would would post reddit comments
[15:39:52] <PJBoy> and I feel a bit better
[15:39:59] *** Joins: xkuru (~xkuru@user/xkuru)
[15:46:55] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[15:48:45] <CarloWood> Isn't there a compiler option that warns me when I still have a namespace open at the end of a header file?
[15:49:09] <CarloWood> Thus:   foo.h:    namespace foo {   // end of file
[15:52:28] *** Quits: Hug-Animals (~manjaro-u@199.119.235.168) (Quit: Konversation terminated!)
[15:54:11] *** Joins: manjaro-user (~manjaro-u@199.119.235.168)
[15:59:48] *** Quits: imi (~imi@catv-89-132-115-236.catv.fixed.vodafone.hu) (Ping timeout: 240 seconds)
[16:08:58] *** Joins: darkbit (~db@152.32.100.99)
[16:11:21] *** Joins: c4017w_ (~c4017@209.52.68.8)
[16:12:39] *** Joins: imi (~imi@catv-89-132-115-236.catv.fixed.vodafone.hu)
[16:14:36] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[16:16:08] *** Joins: proller (~p@2a02:6b8:b081:6409::1:30)
[16:17:58] <ville> can't say i've noticed such a flag
[16:17:59] <PJBoy> what if there's another header file that closes that namespace?
[16:18:11] <ville> PJBoy: yes that's always the possibility, hence warning
[16:18:55] <ville> it'd be accurate 99.935% of the cases
[16:19:13] <PJBoy> that number looks precise enough to not be made up
[16:22:04] <ville> would be incredibly easy to implement as well
[16:24:36] <PJBoy> man I've never seen `read()` fail with a ETIMEDOUT before :/
[16:25:00] <PJBoy> I'm pretty sure there's no code anywhere that sets a timeout value either
[16:28:27] <ville> umm sockets?
[16:28:56] <PJBoy> probably
[16:29:06] <PJBoy> it times out immediately too
[16:29:20] <rpav> gcc errors are still shit
[16:29:44] <PJBoy> I guess that's just normal behaviour then
[16:29:45] <rpav> at least as of 10.1.0; i literally recompiled this with clang++ just so i wouldn't have to deduce what actually caused the error
[16:30:33] <PJBoy> yeah that sounds about right
[16:30:45] <PJBoy> that's why clang's always my goto on testcases
[16:30:59] <ville> rpav: it's very easy to find cases where it goes either way
[16:31:38] *** Joins: lh_cat (~lh_mouse@mingw-w64/developer/lhmouse)
[16:32:07] <mkoncek> CarloWood: that happened to me too and i even opened a bug on gcc
[16:32:38] *** Quits: _flood (flooded@gateway/vpn/protonvpn/flood/x-43489060) (Ping timeout: 260 seconds)
[16:33:44] *** Joins: flooded (flooded@gateway/vpn/protonvpn/flood/x-43489060)
[16:34:32] *** Quits: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse) (Ping timeout: 250 seconds)
[16:34:46] *** Joins: AliceMeows (~AliceMeow@user/alicemeows)
[16:35:13] *** Parts: AliceMeows (~AliceMeow@user/alicemeows) ()
[16:39:32] *** Quits: ravan (~ravan@user/ravan) (Read error: Connection reset by peer)
[16:39:52] *** Joins: ravan (~ravan@user/ravan)
[16:41:28] *** Quits: manjaro-user (~manjaro-u@199.119.235.168) (Ping timeout: 250 seconds)
[16:43:09] *** Quits: ravan (~ravan@user/ravan) (Read error: Connection reset by peer)
[16:43:54] *** Joins: ravan (~ravan@user/ravan)
[16:48:16] <rpav> ville: eh
[16:48:37] <rpav> the worst i've seen is clang not being much better than gcc, but in those cases it's usually ok enough
[16:49:14] <rpav> the one big exception is The Unfindable Error where no compiler i've seen actually tells you where the error originates
[16:49:34] <ville> anyone know of a listing of various common programming language grammars and what's their class/properties. LL(k) and such things
[16:49:53] <rpav> see wikipedia?
[16:51:59] <rpav> though afaik most big things aren't context-free and cheat to achieve context-sensitivity
[16:52:36] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[16:53:13] <rpav> and apparently both clang and gcc have hand-rolled recursive descent parsers
[16:54:23] <oj> It's funny how that works, because nearly every compiler textbook makes the claim that "production compilers are LALR"
[16:55:09] <rpav> gcc used to be flex/bison and its C compiler might still be, dunno
[16:55:25] <rpav> they probably should be, but the state of parser generators is kinda shit
[16:55:28] <ville> yes i've looked on wikipedia among other things, just can't seem to figure out the right words to search for apparently
[16:55:43] *** Joins: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz)
[16:56:42] <oj> Honestly, a pretty good argument against parser generators is how it makes writing context-specific parsing errors more difficult
[16:56:50] <rpav> ville: the most you can probably find is 1) where a language falls in the chomsky hierarchy, which isn't terribly specific and 2) what current implementations do
[16:57:03] <rpav> since any parser of a specific power can be rewritten as another
[16:57:08] <oj> But from a technical quality point of view, a hand rolled recursive descent parser is kind of insane
[16:57:15] <rpav> parser/grammar
[16:57:21] <ville> oj: they are great
[16:57:26] <rpav> oj: and maintenance
[16:57:38] <rpav> and performance for that matter
[16:57:44] <oj> Yup
[16:58:11] <rpav> probably parser performance is a tiny sliver of the total compilation time though so mostly maintenance
[16:58:20] <oj> You should be able to write a tree walk procedure that generates good parsing errors too
[16:58:30] <rpav> yeah you'd think
[16:58:36] <rpav> i mean that's what i do
[16:59:22] <oj> Or just rewrite generic parsing errors that are spat out by the parser
[16:59:32] <rpav> some parsers-generated kinda suck though and don't give you enough information on why parsing _failed_ at a point
[16:59:49] <oj> Write your own parser generator :P
[16:59:54] <rpav> _fuck_ no
[16:59:55] <oj> it's not that hard tbh
[17:00:00] <rpav> it is if you want a good one
[17:00:14] <rpav> i did that once in school and don't really feel like repeating
[17:00:19] <oj> just follow the dragon book, it's what I did
[17:00:23] <rpav> pfft
[17:00:27] <PJBoy> I wrote a parser in haskell for uni
[17:00:31] <PJBoy> that was a trip
[17:00:34] <rpav> the dragon book was decades out of date decades ago whne i used it to do such heh
[17:01:03] <oj> Just the general algorithm for LR parsing
[17:01:06] <rpav> actually coming up on 20 years since graduation this year 🤔
[17:01:15] <rpav> but i think that class was a few years prior
[17:01:42] <oj> I mean there's newer ideas like packrat, but if shift-refuce parsing ain't broke, why fix it?
[17:02:06] <rpav> oj: actually doing the parse isn't really hard, it's more dealing with the grammar, efficient parse table or better method, etc
[17:02:39] <oj> You're talking about parsing conflicts in the grammar I suppose?
[17:02:47] <ville> the main programmer behind zig recently showed some numbers and i think they could tokenize 8 MLOC/s
[17:02:51] <rpav> mostly it is broken .. other parsers are faster/more efficient/handle ambiguity better
[17:03:10] <ville> so that's not going to bottle neck you
[17:03:14] <rpav> ville: so what? tokenizing is trivial as fuck
[17:03:23] <oj> That's not parsing, that's lexing
[17:03:25] <rpav> ^
[17:03:42] <oj> (or scanning if you want to be academic about it)
[17:03:50] <rpav> even parsing should really not be a bottleneck .. except maintaining your language, and language evolution, rant rant
[17:03:50] <ville> ...and the rest of the frontend wasn't that much slower
[17:04:21] <rpav> afaict (and you can run clang metrics to find out) C++ slowness is mostly in codegen
[17:04:35] *** Quits: ravan (~ravan@user/ravan) (Ping timeout: 256 seconds)
[17:04:40] <oj> Parsing will always be a bottle neck, because semantic analysis usually requires a complete subtree, so you need to  block on the parser
[17:04:41] <rpav> every f(X, Y, Z, ...) varation generating a unique function
[17:05:23] <oj> But of course, it's only a bottleneck in the very limited technical "rate limiting process" sense
[17:05:48] <oj> It's not the biggest bottleneck
[17:06:05] *** Joins: ravan (~ravan@user/ravan)
[17:06:33] *** Joins: AbleBacon (~AbleBacon@user/AbleBacon)
[17:06:59] <oj> iirc, clang codegen goes through two IR representations: Parse tree -> IR -> machine IR -> machine code
[17:07:34] <rpav> 2-level IR probably not unusual
[17:08:05] <rpav> hrm i need to find something that actually takes time to compile, and not just link
[17:08:22] <oj> consteval :P
[17:08:40] <ville> ok it was 8.9 MLOC/s on his laptop for the frontend part. that is generating ast
[17:08:42] <rpav> i don't have any 20 stuff
[17:09:02] <oj> I wonder if all the compile time stuff is compiled to full C++ before it's evaluated at compile time
[17:09:28] <ville> https://player.vimeo.com/video/649009599 first half goes over the general idea, the compiler specific stuff is the second half
[17:09:28] <rpav> also zig is sortof trivial / who cares too isn't it? i mean gcc is pretty fast _at C_
[17:09:52] <rpav> i don't get the obsession with Zig; no one's going back to the glory days of C
[17:10:20] <oj> Some people love C, will always love C
[17:10:22] <ville> rpav: it's about finding a usable language with out all the c++ nonsense
[17:10:47] *** Quits: malloy (~jimery@120.235.172.170) (Read error: Connection reset by peer)
[17:11:05] <rpav> eh
[17:11:34] <rpav> anytime i hear that it's jsut "whine mommy i found C++ hard once and i hate it now it's all terrible nonsense"
[17:12:08] *** Joins: c4017w__ (~c4017@209.52.68.8)
[17:12:11] <Raziel> I also found C++ hard once, or perhaps even several times, and I still main it
[17:12:13] <oj> The fact that everyone wants to make a better C++ just means that C++ is the best thing we have
[17:12:13] <rpav> none of the things such people complain about are the actual problems with C++
[17:12:34] <rpav> Raziel: yeah i was a n00b once; not even that long ago for 11+
[17:12:58] *** Joins: ivii (~ivan@user/ivii)
[17:13:04] <Raziel> rpav, I mean, some of the things they complain about might be at least questionable, we can't pretend everything in C++ was a great idea or a great implementation
[17:13:14] <rpav> it was not too many years ago i could literally not read modern C++ to the extent that, doing the LLVM kaleidoscope tutorial, i read the _ocaml_ version because it was easier to read .. and i haven't written ocaml to speak of ever
[17:13:17] <ville> rpav: ...you learned ~1 month ago that you can't return an array by value from a function
[17:13:18] <oj> But idk, maybe something like Rust might be a challenger in the long run
[17:14:27] <rpav> Raziel: oh it's not .. don't get me wrong, the C++ standard is full of shit, poor choices, and a dubious standard library, but mostly the people who complain about the language are complaining about good features, not actual problems
[17:14:41] <Raziel> they are? oof
[17:14:55] <rpav> Raziel: well, any complaint about templates
[17:15:37] <rpav> ville: yeah, i think there was something WTF i encountered just a few days ago even; it's a language with numerous dusty corners that one rarely touches
[17:15:55] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[17:16:31] <Raziel> hey, I have complains about templates too. such as "I wish I could template namespaces, not just types" or "why are you using a macro here when a template would work"
[17:17:03] <rpav> and really you _can_ return an array by value, but anytime you would do so would likely not be as a raw array anyway
[17:17:08] *** Joins: malloy (~jimery@120.235.172.170)
[17:18:28] <PJBoy> can't return a raw array by value
[17:18:56] <rpav> i find there are lots of "well i've never really thought about that" because the mechanics are pretty composable .. e.g. the other day, i had never really thought whether you coudl declare some another class's specific member function as a friend, and you can
[17:19:20] <rpav> PJBoy: not by `int[3] foo();` but by `struct S { int[3] x; }; S foo();`
[17:19:30] <PJBoy> yeah so that's not a raw array
[17:19:52] <rpav> which is why i said you can't return a raw array by value, but you can still return an array by value
[17:19:59] <PJBoy> that's a poverty reimplementation of std::array<int, 3>
[17:20:38] *** Joins: smallvil_ (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[17:20:58] <rpav> i've never actually had reason to return an array by value, and thus it's a bit surprising to think about .. but in a number of years of code i've never had reason to
[17:21:12] <rpav> i actually rarely have reason to touch arrays like that at all
[17:21:26] <PJBoy> I return std::array from constexpr functions
[17:21:32] *** Joins: ravan_ (~ravan@user/ravan)
[17:21:33] <PJBoy> like for my lookup table generator
[17:21:36] <rpav> std::array is definitely preferable
[17:21:36] *** Quits: ravan (~ravan@user/ravan) (Ping timeout: 245 seconds)
[17:21:53] <rpav> the syntax sucks but that's more an annoyance
[17:22:07] <PJBoy> I wonder what happened to that proposal for upgrading raw arrays
[17:23:26] <PJBoy> [p1997]
[17:23:26] <npaperbot> P1997R1: [Evolution] Relaxing Restrictions on Arrays <https://wg21.link/p1997r1> (by Krystian Stasiowski, Theodoric Stier) (2020-01-13) (Related: https://wg21.link/p1997r1/github)
[17:23:45] <PJBoy> not dead yet
[17:23:55] <mkoncek> how is base64 encoding related to ascii?
[17:23:59] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Read error: Connection reset by peer)
[17:24:23] <PJBoy> ascii defines at least 64 characters?
[17:24:25] <mkoncek> i mean, is it defined for code points or for characters?
[17:24:38] <rpav> in ascii, those are the same
[17:24:57] <mkoncek> if you were on a platform where 'a' == some different number than ascii encoding
[17:25:14] *** Quits: smallvil_ (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Ping timeout: 250 seconds)
[17:25:19] <rpav> oh, you're asking is base64 defined in terms of ascii or not
[17:25:29] <mkoncek> yes probably
[17:25:37] *** Quits: Burgundy (~NA@5-12-91-184.residential.rdsnet.ro) (Ping timeout: 240 seconds)
[17:25:44] <mkoncek> asking that
[17:26:01] <PJBoy> the two characters that aren't 0-9 a-z A-Z are often different from base64 impl to base64 impl
[17:26:12] <rpav> the wikipedia summary doesn't seem to say and the rest is tldr ;)
[17:26:13] <PJBoy> so I wanna say that it doesn't really matter what characters you use
[17:26:35] <rpav> PJBoy: it would mostly matter whether the range was within the printable subset of whatever character set you're viewing
[17:27:03] <PJBoy> and even then, probably doesn't matter that much
[17:27:10] <rpav> well it would defeat the point if it _weren't_
[17:27:53] <PJBoy> yeah I can't even argue that
[17:28:30] *** Joins: evilpyro (~evilpyro@user/evilpyro)
[17:29:52] <rpav> so randomly, clang -ftime-report for some reasonably trivial code shows 0.1s spent and 0.08s of that was codegen, and a further 0.01s was LLVM IR gen
[17:34:13] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[17:34:16] <rpav> gcc has some actual parsing metrics and actually seems to take a fair chunk in parsing, but it's unclear how much overlap there is
[17:34:57] <PJBoy> probably spends some of that time making sure its warning messages aren't helpful
[17:35:49] <rpav> e.g. "phase parsing" seems to take 0.55s but the only way to get there seems to be to include template instantiation
[17:36:09] <rpav> PJBoy: "emitting maximal template names!@#"
[17:36:37] *** Quits: kkd (~kkd@255.205.154.104.bc.googleusercontent.com) (Remote host closed the connection)
[17:37:19] *** Joins: bobb_ (~bobb_@dslb-092-074-230-090.092.074.pools.vodafone-ip.de)
[17:37:23] *** Joins: Haohmaru (~Haohmaru@195.24.53.110)
[17:38:25] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Ping timeout: 250 seconds)
[17:41:13] <mkoncek> does anyone else think that good C libraries are most of the time better than libs that make use of c++?
[17:42:14] <PJBoy> good C versus average C++?
[17:42:25] <PJBoy> that's probably gonna be a point for C
[17:43:18] *** Quits: Jupp_S (~quassel@ip-088-153-154-129.um27.pools.vodafone-ip.de) (Ping timeout: 252 seconds)
[17:43:32] <mkoncek> the ones i have worked with were mostly convenient to wrap into my own wrappers
[17:43:45] <mkoncek> glfw, libevent, png, vorbis
[17:44:03] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[17:44:06] <PJBoy> libpng uses setjmp/longjmp error handling
[17:44:09] <PJBoy> very questionable
[17:44:12] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[17:44:12] *** ChanServ sets mode: +v npaperbot
[17:47:46] <oj> There's something to be said about maturity though
[17:47:57] <Alipha> There's certainly bad c++ libraries. Probably falls into two categories: a thin OOP wrapper which doesn't add any value over the c library it wraps. And on the other end, the super overengineered c++ library (looking at you, crypto++)
[17:48:24] <oj> And e.g. boost is weird, because parts of it is very good, and other parts are over-engineered as hell
[17:48:28] <mkoncek> also whoever advised me to use libsodium: great to use
[17:49:12] <PJBoy> almost certainly Alipha
[17:49:20] <PJBoy> though I would have recommended it in spirit
[17:49:27] <mkoncek> one of the 5 people that dwell here
[17:51:45] <Alipha> yes, almost certainly me
[17:53:28] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Remote host closed the connection)
[17:56:39] *** Joins: Jupp_S (~quassel@ip-088-153-154-129.um27.pools.vodafone-ip.de)
[17:56:40] *** Joins: TheHermann (~TheHerman@gateway/tor-sasl/thehermann)
[17:58:27] <rpav> even a thin wrapper would have a hard time _not_ adding value
[17:59:28] <rpav> not that it hasn't happened i'm sure, but even a thing that wraps init and fini into a single object lifetime is value-enough .. a lot of very-thin wrappers doing error checking is huge value-add too (e.g. sdlpp? or whatever it was)
[18:03:00] *** Quits: callq (~callq@2409:4062:4e9a:a9bd:dc94:3973:cfd6:75e7) (Ping timeout: 240 seconds)
[18:04:46] <rpav> c++ really ought to have a built-in polymorphic value variant ;/
[18:05:05] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[18:06:28] *** Inline__ is now known as Inline
[18:07:13] *** Quits: evilpyro (~evilpyro@user/evilpyro) (Quit: Leaving)
[18:08:32] *** Joins: CodePoint (~jonathan@107-208-128-79.lightspeed.tukrga.sbcglobal.net)
[18:12:40] <PJBoy> [P0201]
[18:12:40] <npaperbot> P0201R5: [Library Evolution, Library] A polymorphic value-type for C++ <https://wg21.link/p0201r5> (by Jonathan Coe, Sean Parent) (2019-03-11) (Related: https://wg21.link/lewg158, https://wg21.link/p0201r5/github)
[18:12:45] *** Joins: c4017w_ (~c4017@209.52.68.8)
[18:14:04] <Raziel> when I was asking for data polymorphism a couple months ago people said "that's dumb"
[18:14:07] <Raziel> I now feel vindicated
[18:14:13] <Raziel> :p
[18:14:29] <Alipha> *gasp*
[18:15:06] <rpav> PJBoy: that doesn't seem to be what it claims
[18:15:36] *** Joins: zen_coder (~zen_coder@2a02:8109:a280:2d8d:d91b:267d:4123:397)
[18:16:11] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 245 seconds)
[18:16:17] <Alipha> I wrote https://github.com/alipha/cpp/tree/master/poly_obj eons ago ;-)
[18:16:35] <Raziel> also, http://open-std.org/JTC1/SC22/WG21/docs/papers/2021/p2320r0.pdf
[18:16:48] <Raziel> I like this, can we have this?
[18:17:15] <rpav> Alipha: yeah the one above doesn't seem to actually provide anything for storage, it's unclear how it's supposed to work
[18:18:17] <rpav> i would be happy with `poly_variant<Base, DER1, DER2, DER3, ...>`
[18:18:23] *** Joins: skapata (~Skapata@2804:14c:87b0:9d2e:1192:1a3c:917b:5b02)
[18:18:23] *** Quits: skapata (~Skapata@2804:14c:87b0:9d2e:1192:1a3c:917b:5b02) (Changing host)
[18:18:23] *** Joins: skapata (~Skapata@user/skapata)
[18:18:39] <Alipha> Presumably it's like std::any but only allow types derived from a specified base
[18:18:54] <rpav> which would be basically like variant, except only hold Base and derivations of Base, and most importantly return a Base* regardless of the actual held-value
[18:19:15] <rpav> (at least, optionally return such; of course you could query/use the _actual_ type, like variant)
[18:19:28] *** Quits: JohnMS_WORK (~kvirc@89-64-70-205.dynamic.chello.pl) (Read error: Connection reset by peer)
[18:19:41] *** Joins: JohnMS_WORK (~kvirc@89-64-70-205.dynamic.chello.pl)
[18:21:25] <rpav> 🤔
[18:21:41] <Raziel> and they said we can't have :thonk: on irc
[18:23:57] <rpav> you're guaranteed execution order for the initializer-list of a constructor, right
[18:24:40] <Raziel> considering order is enforced, I'd hope so
[18:24:46] <rpav> this would be pretty critical in the case of `C(T0 a, T0 b) : x(fmt(a, b)), b(std::move(b)) {}`
[18:24:51] *** Joins: pulse (~pulse@user/pulse)
[18:25:12] <rpav> i would hope, but i hope a lot of things about C++
[18:25:19] *** Joins: great_taste (~great_tas@user/great-taste/x-5798414)
[18:26:43] *** Quits: lh_cat (~lh_mouse@mingw-w64/developer/lhmouse) (Read error: Connection reset by peer)
[18:32:54] <rpav> like, i can see where it's like, you're guaranteed A-B execution order if B is initialized from A, but all bets are off otherwise
[18:40:52] <LordKalma> still talking about C?
[18:40:53] <LordKalma> !C
[18:40:54] <nolyc> C is an old byte processing language without templates, exceptions, namespaces, constructors/destructors (and therefore RAII), virtual function polymorphism, references, operator/function overloading, reusable standard generic containers, or explicitly named casts.
[18:41:35] *** Quits: JohnMS_WORK (~kvirc@89-64-70-205.dynamic.chello.pl) (Quit: KVIrc 5.0.1 Aria http://www.kvirc.net/)
[18:41:53] <Raziel> wait, C doesn't have overloading?
[18:41:59] <LordKalma> hahahah
[18:42:00] <LordKalma> C has nothing
[18:42:04] <Raziel> ayy
[18:42:44] <LordKalma> that is why this header file has 100 line macros: https://github.com/jgaeddert/liquid-dsp/blob/master/include/liquid.h#L334
[18:42:46] <ville> would have had to have mangling then...
[18:42:46] <mkoncek> no overloading == symbol names always match the source form
[18:42:58] <LordKalma> LIQUID_AGC_DEFINE_API(LIQUID_AGC_MANGLE_CRCF, float, liquid_float_complex)  and LIQUID_AGC_DEFINE_API(LIQUID_AGC_MANGLE_RRRF, float, float)
[18:43:09] <mkoncek> function? you mean macro?
[18:43:09] <mkoncek> constant? you mean macro?
[18:43:11] <LordKalma> to create float/complex and float/float versions of the same API
[18:43:58] <LordKalma> speaking of, yesterday someone was on twitter explaining how on C, since symbol names dony' have the types on them and etc, you can have missmatching declarations and implementations
[18:44:01] <LordKalma> and the linker will eat it
[18:44:06] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[18:44:21] <Raziel> mmmmmmangle
[18:44:59] <mkoncek> "Mangler" is a good name for a 80s B-movie killer
[18:45:27] <LordKalma> https://twitter.com/__phantomderp/status/1504429206213734400
[18:45:55] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[18:47:20] <LordKalma> mkoncek, what? you don't #define max(a, b) ? pfft
[18:47:22] *** Quits: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl) (Read error: Connection reset by peer)
[18:47:23] *** Joins: kraa (~kraa@107-190-7-216.cpe.teksavvy.com)
[18:47:34] *** Quits: flooded (flooded@gateway/vpn/protonvpn/flood/x-43489060) (Ping timeout: 250 seconds)
[18:47:38] *** Joins: lispy (~lispy@user/lispy)
[18:48:05] <mkoncek> when you macro everything, your language starts resembling fortran
[18:48:08] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[18:48:34] <rpav> C has overloading, you can make foo(), foo_x(int x), foo_x_y(int x, int y), ...
[18:48:35] * rpav runs
[18:48:47] <LordKalma> that's pretty much how liquid does it
[18:48:56] <LordKalma> if you gcc -E that header file, it's hilariously bad
[18:49:01] <PJBoy> manual mangling, hooray
[18:49:06] <rpav> yeah .. i'm being facetious but in C if you want it, you can have it .. if you type it all out
[18:49:12] <rpav> manual mangling indeed
[18:49:14] <PJBoy> it's like automated mangling, except there's no convention
[18:49:53] <rpav> foo_x(int x); foo_x_f(float x); ... D:
[18:50:13] <LordKalma> like that agc functions: you have `liquid_agc_fc_create` and liquid_agc_ff_create` (_fc_ meaning float/complex and _ff_ meaning float/float), like the macros
[18:50:32] <LordKalma> there are things like the equalizerss that use 3 or 4 parameters
[18:50:42] <LordKalma> liquid_fir_ccfc_create()
[18:50:45] <LordKalma> stuff like that
[18:50:47] <LordKalma> hilariously bad
[18:52:50] *** Joins: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl)
[18:54:00] *** Quits: Jupp_S (~quassel@ip-088-153-154-129.um27.pools.vodafone-ip.de) (Remote host closed the connection)
[18:55:28] *** Quits: ullbeking_ (sid5364@id-5364.ilkley.irccloud.com) (Changing host)
[18:55:28] *** Joins: ullbeking_ (sid5364@user/ullbeking)
[18:55:29] *** Joins: flooded (flooded@gateway/vpn/protonvpn/flood/x-43489060)
[18:55:40] *** flooded is now known as _flood
[18:59:12] *** Joins: Jupp_S (~quassel@ip-088-153-154-129.um27.pools.vodafone-ip.de)
[18:59:15] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[18:59:17] *** ullbeking_ is now known as ullbeking
[19:01:43] *** Quits: unyu (~pyon@user/pyon) (Quit: brb)
[19:02:53] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[19:03:37] *** Quits: CodePoint (~jonathan@107-208-128-79.lightspeed.tukrga.sbcglobal.net) (Ping timeout: 240 seconds)
[19:07:55] *** Quits: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz) (Remote host closed the connection)
[19:09:14] *** Joins: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz)
[19:12:05] *** Joins: Guest54 (~Guest54@2620:10d:c092:400::4:d360)
[19:13:28] *** Joins: c4017w__ (~c4017@209.52.68.8)
[19:16:14] *** Quits: arch-angel (~arch-ange@user/arch-angel) (Ping timeout: 252 seconds)
[19:17:11] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[19:21:57] <Guest54> hey I want to check if the `pair.first` and `pair.second` when iterating though a `std::map` are const arguments? Where can I check that? I'm looking at this page https://www.cplusplus.com/reference/map/map/ but I can't quite find it. I would love a pointer in the right direction
[19:23:26] <Guest54> ah ok they just return T https://en.cppreference.com/w/cpp/utility/pair
[19:23:33] <mkoncek> if you obtain an iterator, you dereference it to obtain that pair: auto it = map.find("xxx"); it->first;
[19:27:49] *** Quits: Kakurady (~nekoyasha@207.236.147.169) (Quit: Konversation terminated!)
[19:27:53] <Guest54> hmm I see
[19:28:25] <Guest54> I'll provide a bit more context: https://ideone.com/06vvdk so I have this function, and the lint is complaining (in the comments). I'm basically wondering if there's a way to transfer the contents of the map without copying?
[19:29:14] *** Joins: Artea (~Lufia@artea.com.pt)
[19:29:57] *** Quits: mkoncek (Thunderbir@nat-pool-brq-t.redhat.com) (Ping timeout: 240 seconds)
[19:30:11] *** Quits: andreasbuhr (~quassel@p549db74d.dip0.t-ipconnect.de) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[19:31:53] <ville> if you look at https://en.cppreference.com/w/cpp/container/map and the value_type. the key is const
[19:34:04] <Guest54> ah I see
[19:35:43] <Guest54> so the key is const, but the value isn't. I guess there must be a way to avoid copying over the value then
[19:38:05] <Guest54> https://stackoverflow.com/questions/58839260/how-to-efficiently-move-some-items-from-one-stdmap-to-another seems interesting, but will look more
[19:39:45] *** Joins: peeps[zen] (~peepsalot@openscad/peepsalot)
[19:39:52] <ville> ...or just do the copy. move on. get the program running. you can come back to that bit of code if you measure it to be a problem
[19:40:26] <Guest54> ville actually it is a problem:(  the checkResult can be arbitarily large and that cause issue with service
[19:41:04] <ville> you have a problem if it can be arbitrarily large in the first place
[19:41:33] *** Quits: peepsalot (~peepsalot@openscad/peepsalot) (Ping timeout: 256 seconds)
[19:42:12] <ville> at any rate it seems like a very localized problem/change in case this ends up being an actual problem
[19:44:57] *** Quits: bobb_ (~bobb_@dslb-092-074-230-090.092.074.pools.vodafone-ip.de) (Ping timeout: 256 seconds)
[19:49:15] <Guest54> ok no wories
[19:57:15] *** Joins: CodePoint (~jonathan@107-208-128-79.lightspeed.tukrga.sbcglobal.net)
[20:04:52] *** Quits: interop_madness (~interop_m@user/interop-madness/x-0950004) (Quit: Leaving)
[20:05:02] *** Joins: p-i-_ (~Ohmu@2403:6200:8978:d82d:89c0:e177:c2f7:c9a9)
[20:06:29] *** Quits: Guest54 (~Guest54@2620:10d:c092:400::4:d360) (Ping timeout: 256 seconds)
[20:08:08] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[20:08:17] *** Quits: p-i- (~Ohmu@2403:6200:8978:d82d:540d:8c68:2946:51e0) (Ping timeout: 240 seconds)
[20:09:57] *** Quits: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz) (Remote host closed the connection)
[20:10:32] *** Quits: ivii (~ivan@user/ivii) (Remote host closed the connection)
[20:13:57] *** Joins: c4017w_ (~c4017@209.52.68.8)
[20:17:15] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[20:24:41] *** Joins: nq (~nq@2a02:2f08:e015:a900:af55:b21:1105:35cc)
[20:24:50] *** Joins: magla (~gelignite@55d49742.access.ecotel.net)
[20:49:53] *** Joins: Guest19 (~Guest19@2601:647:5280:2a50:a5ba:2fa3:99b1:4dae)
[20:58:00] *** Quits: Haohmaru (~Haohmaru@195.24.53.110) (Remote host closed the connection)
[21:03:21] *** Quits: kevr (~kevr@user/kevr) (Remote host closed the connection)
[21:03:39] *** Joins: kevr (~kevr@user/kevr)
[21:06:57] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:2181:1fae:1c0b:d04f)
[21:14:25] *** Joins: c4017w__ (~c4017@209.52.68.8)
[21:17:48] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 252 seconds)
[21:22:41] *** Quits: CodePoint (~jonathan@107-208-128-79.lightspeed.tukrga.sbcglobal.net) (Quit: CodePoint struts into the sunset on the beach.)
[21:27:23] *** Joins: markong (~kvirc@213.146.188.203)
[21:29:47] *** Quits: zen_coder (~zen_coder@2a02:8109:a280:2d8d:d91b:267d:4123:397) (Quit: Konversation terminated!)
[21:31:25] *** Joins: geranim0 (~geranim0@modemcable242.171-178-173.mc.videotron.ca)
[21:31:45] *** Joins: Burgundy (~NA@5-12-91-184.residential.rdsnet.ro)
[21:31:46] *** Joins: k8yun (~k8yun@user/k8yun)
[21:32:05] *** Quits: geranim0 (~geranim0@modemcable242.171-178-173.mc.videotron.ca) (Remote host closed the connection)
[21:44:03] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[21:44:12] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[21:44:12] *** ChanServ sets mode: +v npaperbot
[21:44:45] *** Quits: proller (~p@2a02:6b8:b081:6409::1:30) (Ping timeout: 252 seconds)
[21:46:58] *** Quits: k8yun (~k8yun@user/k8yun) (Ping timeout: 250 seconds)
[21:47:31] *** Joins: k8yun (~k8yun@user/k8yun)
[21:47:55] *** Quits: great_taste (~great_tas@user/great-taste/x-5798414) (Ping timeout: 256 seconds)
[21:52:01] *** Joins: KombuchaKip (~kip@192.252.230.5)
[21:56:45] *** Quits: markong (~kvirc@213.146.188.203) (Ping timeout: 256 seconds)
[21:56:56] *** Quits: slavfox (~slavfox@93.158.232.111) (Ping timeout: 250 seconds)
[21:57:16] *** Joins: slavfox (~slavfox@93.158.232.111)
[21:58:57] *** Joins: zen_coder (~zen_coder@2a02:8109:a280:2d8d:d91b:267d:4123:397)
[22:00:12] *** Quits: nq (~nq@2a02:2f08:e015:a900:af55:b21:1105:35cc) (Quit: Leaving)
[22:02:39] *** Quits: slavfox (~slavfox@93.158.232.111) (Ping timeout: 256 seconds)
[22:03:37] *** Quits: imi (~imi@catv-89-132-115-236.catv.fixed.vodafone.hu) (Ping timeout: 240 seconds)
[22:04:30] *** Joins: slavfox (~slavfox@93.158.232.111)
[22:11:57] *** Quits: slavfox (~slavfox@93.158.232.111) (Ping timeout: 240 seconds)
[22:12:28] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:2181:1fae:1c0b:d04f) (Quit: Quit)
[22:14:49] *** Joins: slavfox (~slavfox@93.158.232.111)
[22:15:03] *** Joins: c4017w_ (~c4017@209.52.68.8)
[22:15:05] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Quit: sord937)
[22:17:12] *** Joins: imi (~imi@catv-89-132-115-236.catv.fixed.vodafone.hu)
[22:17:15] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[22:18:31] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[22:20:09] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:7ced:662b:151f:9503)
[22:20:13] *** Quits: slavfox (~slavfox@93.158.232.111) (Ping timeout: 256 seconds)
[22:20:25] *** Joins: slavfox_ (~slavfox@93.158.232.111)
[22:20:33] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[22:21:43] *** Joins: paul424 (~tom@ip-5-172-239-82.multi.internet.cyfrowypolsat.pl)
[22:25:53] *** Quits: slavfox_ (~slavfox@93.158.232.111) (Ping timeout: 256 seconds)
[22:29:17] *** Quits: pulse (~pulse@user/pulse) (Ping timeout: 252 seconds)
[22:31:06] *** Joins: slavfox (~slavfox@93.158.232.111)
[22:34:58] *** Quits: Leone (~Leo@216.154.12.122) ()
[22:40:05] *** Joins: gehn (~gehn@user/gehn)
[22:46:18] *** Joins: pulse (~pulse@user/pulse)
[22:47:38] *** Joins: great_taste (~great_tas@user/great-taste/x-5798414)
[22:50:18] *** Quits: very_sneaky (~very_snea@user/very-sneaky/x-7432109) (Ping timeout: 272 seconds)
[22:56:15] *** Quits: jsbach (~jsbach@2a02:810a:1440:4cec:3af3:abff:fe57:23d5) (Ping timeout: 252 seconds)
[22:58:57] *** Quits: paul424 (~tom@ip-5-172-239-82.multi.internet.cyfrowypolsat.pl) (Quit: Leaving)
[23:07:54] *** Joins: CodePoint (~CodePoint@107-208-128-79.lightspeed.tukrga.sbcglobal.net)
[23:12:07] *** Joins: filename (~kilitary@188.242.105.134)
[23:15:30] *** Joins: c4017w__ (~c4017@209.52.68.8)
[23:19:09] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[23:20:26] *** Quits: lispy (~lispy@user/lispy) (Quit: Leaving)
[23:20:34] *** Joins: jsbach (~jsbach@2a02:810a:1440:4cec:a132:2b5b:ce74:5a64)
[23:21:00] *** Quits: CodePoint (~CodePoint@107-208-128-79.lightspeed.tukrga.sbcglobal.net) (Ping timeout: 240 seconds)
[23:21:25] *** Joins: CodePoint (~CodePoint@107-208-128-79.lightspeed.tukrga.sbcglobal.net)
[23:23:38] *** Joins: Ouster (Crucifery@shell.xshellz.com)
[23:38:51] *** Quits: pepperoni (~pepperoni@172.58.102.236) (Read error: Connection reset by peer)
[23:39:14] *** Joins: pepperoni (~pepperoni@172.58.102.236)
[23:40:02] <ashafq> can anyone point me to a blog or something about a ringbuffer implementation?
[23:41:55] <rpav> ashafq: https://en.wikipedia.org/wiki/Circular_buffer
[23:42:13] <rpav> not sure what else you want, they're pretty trivial really
[23:42:40] <cbreak> ashafq: there is an implementation in boost :)
[23:43:03] <rpav> a ringbuffer<T> that uses a vector<T> is nice because you can adjust its capacity .. though i actually implemented a dynarray<T> just for that, to avoid that one extra pointer
[23:43:04] <cbreak> but as usual, there are lots of details that you can decide on when implementing a data structure, and the ones in boost might not be what you need
[23:43:20] *** Joins: wootehfoot (~wootehfoo@user/wootehfoot)
[23:43:34] <cbreak> you could just use a std::deque and pretend it's a ring buffer for example
[23:43:46] <cbreak> and switch to a real one later on when you find out if you need it
[23:43:53] <rpav> err, how would you do that
[23:44:01] <ashafq> cbreak: https://gist.github.com/ashafq/8bde6aba97468f91cb5b992a89f6e596 I am curious if I did anything wrong there
[23:44:41] <rpav> ok i guess if you pop_front and push_back but that's sortof ew and multiple lines everytime you want to do something
[23:45:27] *** Quits: Deneb (~johnch@128.82.159.143.dyn.plus.net) (Remote host closed the connection)
[23:45:29] <ashafq> I guess I need a rubber duck to talk to
[23:47:28] <ashafq> Or I can have another variable to keep track of "overflow" case
[23:49:11] *** Joins: k8yun_ (~k8yun@user/k8yun)
[23:52:54] *** Quits: k8yun (~k8yun@user/k8yun) (Ping timeout: 252 seconds)
[23:55:16] <rpav> numeric_limits .. not in <numbers> or <numeric>, but <limits> .. at least it wasn't <inline>
[23:57:16] *** Joins: Leone (~Leo@216.154.12.122)
[23:57:18] *** Joins: nq (~nq@2a02:2f08:e015:a900:4c2b:6fcb:65:18e)
[23:57:22] *** Joins: nq_ (~nq@2a02:2f08:e015:a900:4c2b:6fcb:65:18e)
[23:57:28] *** Quits: nq_ (~nq@2a02:2f08:e015:a900:4c2b:6fcb:65:18e) (Remote host closed the connection)
[23:58:23] *** Joins: RoKenn (~RoKenn@2001:a61:35b1:ca01:2ed6:1eb0:fc62:3192)
[23:58:23] *** Quits: RoKenn (~RoKenn@2001:a61:35b1:ca01:2ed6:1eb0:fc62:3192) (Changing host)
[23:58:23] *** Joins: RoKenn (~RoKenn@user/rokenn)
