[00:12:50] *** Joins: lisp123 (~lisp123@5.30.23.247)
[00:17:58] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 265 seconds)
[00:20:22] *** Quits: shka (~herr@109.231.62.239) (Ping timeout: 252 seconds)
[00:20:50] <copec> The vsync for multiple monitors is usually fubar under linux
[00:21:01] <copec> regardless of wine
[00:49:46] *** Joins: lisp123 (~lisp123@5.30.23.247)
[00:58:26] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 252 seconds)
[01:00:04] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.2.1)
[01:21:48] *** Quits: hendursa1 (~weechat@user/hendursaga) (Quit: hendursa1)
[01:22:52] *** Joins: hendursaga (~weechat@user/hendursaga)
[01:25:16] *** Quits: Alfr (~Alfr@user/alfr) (Remote host closed the connection)
[01:25:46] *** Joins: Alfr (~Alfr@user/alfr)
[01:34:42] <kakuhen> vertical sync is overrated
[01:34:51] <kakuhen> screen tearing is something i notice for a split second and never again :^)
[01:48:25] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[02:01:08] *** Joins: lisp123 (~lisp123@5.30.23.247)
[02:09:13] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Remote host closed the connection)
[02:09:45] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[02:13:53] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 264 seconds)
[02:25:33] * hayley uploaded an image: (48KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/LoTCxqpBPWnJaJhpAasBBRyz/862a0d3116845161.jpeg >
[02:26:26] <Gnuxie> https://redd.it/ptckjh
[02:27:43] *** Joins: selwyn (~selwyn@user/selwyn)
[02:27:52] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Quit: ec)
[02:37:49] *** Quits: semz (~none@user/semz) (Quit: Leaving)
[02:40:13] *** Joins: semz (~none@user/semz)
[02:40:17] *** Quits: semz (~none@user/semz) (Remote host closed the connection)
[02:40:28] *** Joins: semz (~none@user/semz)
[02:41:37] <hayley> semz: The only implementation I know is that Azul machines could do it, but they found the GC was good enough and didn't bother to engineer it.
[02:56:35] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[03:03:59] *** Joins: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[03:07:08] *** Quits: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 252 seconds)
[03:07:51] <hayley> https://www.youtube.com/watch?v=gjVdF-AV9Qw
[03:07:51] -ixelp- {YTP} ~ Twice in a Pantime - YouTube
[03:13:42] <hayley> moon-child: FWIW https://plover.com/~mjd/misc/hbaker-archive/PrecSched.html also mentions that scheduling is a problem when compiling to a RISC, but nowadays that's also the case on CISC.
[03:13:43] -ixelp- ACM Computer Arch. News 19, 2 (December 1991), 4-8.
[03:14:50] *** Quits: random-nick (~random-ni@87.116.180.119) (Ping timeout: 252 seconds)
[03:15:25] <moon-child> at least it's not vliw!
[03:15:43] <hayley> Indeed.
[03:31:25] *** Joins: dec0d3r (~dec0d3r@2001:8003:4810:9600:7275:1afb:1707:8eaa)
[03:33:29] *** Joins: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[03:36:49] *** Joins: selwyn (~selwyn@user/selwyn)
[03:36:50] *** Quits: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 252 seconds)
[03:38:46] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[04:12:00] *** Joins: lisp123 (~lisp123@5.30.23.247)
[04:19:59] *** Joins: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[04:23:02] *** Quits: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 252 seconds)
[04:23:59] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 265 seconds)
[05:38:52] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 252 seconds)
[06:11:50] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.2.1)
[06:21:20] *** Joins: lisp123 (~lisp123@5.30.23.247)
[06:28:30] *** Quits: Alfr (~Alfr@user/alfr) (Remote host closed the connection)
[06:28:58] *** Joins: Alfr (~Alfr@user/alfr)
[06:30:05] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 264 seconds)
[07:09:41] *** Quits: semz (~none@user/semz) (Ping timeout: 246 seconds)
[07:21:50] * hayley uploaded an image: (440KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/dZqYmXaBzkaDcXQJOieywLRf/rip-bozo.png >
[07:22:43] *** Joins: semz (~none@user/semz)
[07:40:00] <hayley> https://www.youtube.com/watch?v=gIDKl1eGy8Y
[07:40:00] -ixelp- Something's In The House (Live 79) - YouTube
[07:46:05] <hayley> https://twitter.com/lonzowastaken/status/1440892200011792385 I have fans?
[08:01:19] <hayley> Okay, I have handled the totally stupid cases of trying to compile the empty set and the empty string. When I add linting, that should be the first thing it complains about IMO
[08:21:48] *** Joins: lisp123 (~lisp123@5.30.23.247)
[08:26:41] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 252 seconds)
[08:39:46] <hayley> https://twitter.com/memecrashes/status/1440831735051157511
[08:51:52] *** Joins: dave0 (~davezero@069.d.003.ncl.iprimus.net.au)
[08:52:10] <dave0> maw
[08:52:28] <hayley> Hey dave0
[08:52:54] <dave0> hi hayley, how's it going?
[08:53:08] <hayley> It goes. You?
[08:53:27] <dave0> alright
[08:53:59] <dave0> my neighbor gave me some rocky road chocolate :-)
[09:06:32] * hayley still wonders why the new compiler is faster than the slow one, even on this crappy benchmark where gilberth's grep[] machine doesn't really kick in.
[09:07:17] <hayley> 1.7ms rather than 2.6ms on SBCL. All I know is that I inline the success and failure transitions, i.e. there's no branch. And apparently at 4-6 cycles/character branches matter.
[09:14:25] <moon-child> apparently there is a limit to the number of branches that can be in flight at a given time
[09:19:38] <hayley> (asdf:defsystem :depends-on (... :dynamic-mixins :stealth-mixin) ...)
[09:19:42] <hayley> IMO needs more mixin systems
[09:28:44] <hayley> I'm pretty sure, by using gilberth's stealth mixins and DFA generation algorithm, it's basically his regex engine anyway.
[09:33:04] *** Joins: lisp123 (~lisp123@5.30.23.247)
[10:13:20] *** Joins: shka (~herr@109.231.62.239)
[10:13:59] <hayley> gilberth: https://github.com/telekons/one-more-re-nightmare/blob/two-more-re-nightmares/Code/Compiler/length-inference.lisp
[10:14:00] -ixelp- one-more-re-nightmare/length-inference.lisp at two-more-re-nightmares · telekons/one-more-re-nightmare · GitHub
[10:14:18] <hayley> "Can we have Kildall's algorithm?" "We have Kildall's algorithm at home." "Kildall's algorithm at home:"
[10:34:26] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 246 seconds)
[10:57:06] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[11:35:40] *** Joins: hendursa1 (~weechat@user/hendursaga)
[11:38:27] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 276 seconds)
[11:50:40] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 252 seconds)
[11:52:18] *** Joins: selwyn (~selwyn@user/selwyn)
[11:54:34] *** Quits: selwyn (~selwyn@user/selwyn) (Remote host closed the connection)
[11:54:59] *** Joins: selwyn (~selwyn@user/selwyn)
[12:21:13] *** Quits: kakuhen (~kakuhen@user/kakuhen) (Quit: Leaving...)
[12:31:31] <hayley> https://twitter.com/VicGovDH/status/1440816355343618048 6,666 active COVID cases.
[12:31:58] <dave0> the number of the beast!
[12:32:01] <dave0> plus 6,000
[12:32:05] <dave0> :-/
[12:32:15] <White_Flame> the number of the delta variant beast
[12:32:44] <shka> cool
[12:35:48] <shka> mood be like https://www.youtube.com/watch?v=6tZ_uwDlmPY
[12:35:49] -ixelp- Godspeed You Black Emperor - Providence - YouTube
[12:52:45] <hayley> I implemented bounds checking elision, but I can't tell if it's making anything faster.
[13:03:24] <hayley> If I remove the call to VECTOR which actually gives us a result (eventually I'll get to making it reuse a vector) then we're down to 2.7 cycles/character?
[13:17:55] *** Quits: elflng (~elflng@5.28.137.182) (Ping timeout: 250 seconds)
[13:19:27] <hayley> https://www.youtube.com/watch?v=sILbx5xbwPY
[13:19:28] -ixelp- Bauhaus - Third Uncle (1982) - YouTube
[13:27:09] *** Joins: random-nick (~random-ni@87.116.178.231)
[13:45:33] <hayley> gilberth: https://github.com/telekons/one-more-re-nightmare/wiki/Benchmarks The new compiler is way faster.
[13:45:33] -ixelp- Benchmarks · telekons/one-more-re-nightmare Wiki · GitHub
[13:47:39] <selwyn> what is the fastest regular expression engine out there?
[13:48:48] <hayley> Wouldn't be surprised if it was Intel Hyperscan.
[13:50:41] <hayley> Apparently cl-ppcre is some 12.6× as slow as the new compiler with submatching. The new compiler is also twice as fast as the old one.
[14:03:04] *** Joins: notzmv (~zmv@user/notzmv)
[14:23:52] *** Joins: Qwnavery (~Qwnavery@user/qwnavery)
[14:26:00] *** Joins: selwyn_ (~selwyn@user/selwyn)
[14:27:29] *** Quits: selwyn (~selwyn@user/selwyn) (Ping timeout: 252 seconds)
[14:28:16] <hayley> What other RE engines should I lay siege on^W^W^Wbenchmark against?
[14:34:26] *** Quits: selwyn_ (~selwyn@user/selwyn) (Ping timeout: 265 seconds)
[14:35:41] *** Joins: lisp123 (~lisp123@5.30.23.247)
[14:40:43] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 265 seconds)
[14:53:06] <hayley> https://hothardware.com/news/amd-patents-biglittle-core-task-transition-ryzen-8000-zen-5
[14:53:07] -ixelp- AMD Patents big.Little Core Task Transition Tech For Ryzen 8000 Zen 5 Processors | HotHardware
[14:54:51] *** Joins: selwyn (~selwyn@user/selwyn)
[14:59:16] <Gnuxie> that doesn't sound fun to program for 
[15:00:58] <hayley> The task switching is all done by metering, so you don't program for it.
[15:03:03] <Gnuxie> metering? 
[15:03:31] <Gnuxie> but muh predictable performance 🦀💢💢
[15:04:42] <hayley> https://www.youtube.com/watch?v=8TEAMHgrxi0
[15:04:42] -ixelp- JJ Burnel - Crabs - YouTube
[15:06:25] <hayley> Still, I take it that is a suggestion I test the Rust RE engine.
[15:08:30] <hayley> https://www.youtube.com/watch?v=ns-fw7a16Gw
[15:08:31] -ixelp- jean-jacques burnel - Freddie Laker - YouTube
[15:09:45] <gilberth> Good morning #lispcafe!
[15:10:12] <hayley> Good morning gilberth!
[15:10:18] <gilberth> hayley: I am impressed!
[15:10:42] <hayley> That was unexpected.
[15:10:59] <gilberth> Hugh?
[15:11:13] <hayley> Nothing.
[15:11:56] <gilberth> Milady, would you mind to give times in \tau? As I fear my machine is slower than yours. :)
[15:12:17] * hayley thinks
[15:12:45] <hayley> The turbo frequency is 3600MHz, and testing only uses one core, so it should hit turbo just fine. So I can estimate \tau from there.
[15:12:54] <Gnuxie> what's \tau?
[15:13:03] <gilberth> Cycle time.
[15:13:20] <Gnuxie> hmm oki
[15:13:56] <hayley> gilberth: [1066, 331, 356]\tau for the new compiler on the three benchmarks on that page.
[15:15:30] <hayley> 🎶 "Let Laurikari go and stew..." 🎶
[15:15:36] <gilberth> Do we have coffee?
[15:16:42] <gilberth> This is curious as my machine runs at 3.6GHz (no turbo).
[15:17:41] <hayley> Still, too many variables to do a proper test.
[15:17:52] <hayley> Maybe use cl-ppcre as a "baseline"?
[15:18:23] <gilberth> I would love to see results for libc and libtre.
[15:25:46] <hayley> I looked at libpcre and fainted while reading the setup code from C.
[15:26:35] <gilberth> Heh.
[15:26:59] <hayley> Hence why I wanted to test from Python, but somehow that segfaults.
[15:27:42] * hayley uploaded an image: (450KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/LpXXVFVWinMqgvXRyMTctvPA/rip-bozo2.png >
[15:33:42] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[15:34:37] <gilberth> hayley: We could use SEARCH with SBCL as a baseline. In your SEARCH bench: Are types of the argumentes to SEARCH declared?
[15:35:28] <hayley> No, but I use a LET form like (LET ((S "the string")) (SEARCH ...)) and so type inference should work.
[15:36:18] <hayley> Oh bullshit, SBCL constant folds the SEARCH. How did I do this?
[15:36:39] <gilberth> Yep, same thing happened to me.
[15:36:55] <hayley> Well...
[15:37:11] <hayley> (defun f (x) (declare (simple-string x)) (search "sun" x)) shows a pretty normal call to SEARCH.
[15:37:53] <hayley> 791 ns on my machine, which is close enough to...must have been using the TOUCH macro in the-cost-of-nothing which blocks inference.
[15:38:50] <hayley> Rather TOUCH is defined as (declaim (notinline touch)) (defun touch (object) object) ; look ma, no propagation.
[15:40:36] <gilberth> 704ns here. So the same ball park. And I thought your machine is faster than mine.
[15:41:39] *** Quits: Qwnavery (~Qwnavery@user/qwnavery) (Quit: WeeChat 3.3)
[15:41:58] <gilberth> Very well. I might bench libc (Apple and GNU) and perl.
[15:42:50] <hayley> Had to explain to a friend (who mostly went down the C route) about how I was indeed generating machine code (indirectly) on the fly from the SBCL REPL.
[15:43:48] <hayley> "Is this some kind of virtual machine?" "No, it's machine code, so five cycles per character is five CPU clock cycles...at 3600MHz that's 700Mchars/s or so..."
[15:44:06] <gilberth> Oh dear, that perhaps was fun.
[15:44:32] <gilberth> Yes, sir, we have a COMPILE function.
[15:44:51] <hayley> He's not stupid, just unaware.
[15:46:25] <gilberth> Yeah, happened to me in the 90s, too. My still friend is a brilliant hacker and was stunned at that time as I explained that very same thing.
[15:46:57] <hayley> Cool guy I knew since I was 10 or so. We both hacked in primary school.
[15:49:20] <hayley> gilberth: What's impressive is that adding submatches barely made scanning slower. Though it basically results in a couple more MOVs at the right time with linear tagged regular expressions.
[15:49:29] <gilberth> Another thing that happened was: At the uni we had an exercise to write a primitive parser for terms (just digits, '+', '-', '*', '/', and '('/')') in some pure functional language. I was done in minutes and he, although being a good hacker, was just thinking in state machines and didn't manage.
[15:50:46] <hayley> If you read the Rust regex documentation, they say "Pick the function which gives you the least information, as it goes the fastest." But here you could always get submatches with no noticeable loss in performance.
[15:51:33] <gilberth> hayley: Yes, same thing as with read barriers, which really stunned me. Seems like this kind of code really benefits from the multiple issue. The read barrier thing really made me rethink performance as I am olde and still used to in-order single-issuee execution.
[15:53:05] <gilberth> Despite being taught otherwise in a very good lecture about CPU design. ;)
[15:53:45] <gilberth> So I am supposed to know how CPUs work these days. *sigh*
[15:53:48] <hayley> We heard of superscalar execution, but apparently the textbook is a bit wonky.
[15:54:23] <hayley> According to the textbook, you execute one instruction per cycle on average. This is either a very low bar with superscalar pipelined machines, or very high with not-superscalar pipelined machines.
[15:55:07] <gilberth> Heh, get a time machine and visit Karlsruhe for study. I can't complain, we were taught all that in late 90s at which time that super-scalar thing was state of the art.
[15:55:11] <hayley> And I don't think they cover register renaming, as one question goes "Can the statements A = B + C; B = D + E be executed simultaneously?" As the Bs are independent (think SSA) you could after renaming.
[15:55:37] <gilberth> hayley: Oh dear! Is the text book from the 80s?
[15:55:52] <hayley> I haven't looked at the textbook.
[15:55:58] <gilberth> lol
[15:56:00] <hayley> Someone just brought the question up in class.
[15:56:25] <hayley> Most people seem to agree that I got the idea after hacking compilers for a while.
[15:56:51] <gilberth> Well, we essentially have dataflow machine these days.
[15:57:11] <hayley> I was going to say that a wise guy even said that, but never found the time for it.
[15:57:50] <hayley> Though the lecturer told us about his time writing code which used both the U and V pipes on the Pentium 4 or something.
[15:57:58] <gilberth> I always thing of the score board as a pool of SETFs thrown in with multiple execution units picking any SETF that has its arguments calculated.
[15:58:18] <gilberth> * think
[15:59:12] <gilberth> This really is how this works.
[16:00:32] <hayley> w.r.t the read barrier, I think the latency is basically just a TLB lookup. If the page isn't protected, then the memory read just wastes one in-flight op for a little while (I don't know how long). If it is protected, then you don't do a read, but obviously you wait for the machine to trap and all that.
[16:00:58] <gilberth> hayley: We never were taught about any particular CPU but rather in the general theory with a few hint of what kind CPUs are actually existing.
[16:01:06] <hayley> We use https://en.wikipedia.org/wiki/Memory-level_parallelism to cheat death, more or less.
[16:01:31] <hayley> Though the "Eliminating read barriers" paper from 2012 says they are pretty damn slow. Who knows.
[16:02:49] * gilberth shrugs.
[16:03:12] <hayley> But then, as Baker said (and as a stupid test I wrote confirms), that wasted memory read is more or less a prefetch.
[16:04:02] <gilberth> Well, things change. I mean, I am somewhat trapped in what we had in the 90s and never really did consider this kind of super-scalar behaviour.
[16:04:07] <hayley> "Zen has a 44-entry Load Queue and a 44-entry Store Queue. Taking the two 14-entry deep AGU schedulers into account, the processor can keep up to 72 out-of-order loads in flight (same as Intel's Skylake)."
[16:04:38] <gilberth> That's a lot!
[16:04:38] <hayley> Given that pointer chasing tends to lead to stalls anyway, that's just damn brilliant.
[16:05:52] <gilberth> Milady, BMH is Boyer-Moore-Something?
[16:06:01] <hayley> Horspool
[16:06:13] <gilberth> How did you fit that in?
[16:06:31] * hayley remembers "Two nqthm guys and a damn horse pool"
[16:06:53] <hayley> Constant string prefixes (or sometimes constant strings in entirety).
[16:07:22] <gilberth> You special case on that? First seek the constant prefix and then dive into the DFA as needed?
[16:07:44] <hayley> Precisely.
[16:08:18] <gilberth> You recognize prefixes by looking at the DFA?
[16:08:45] <hayley> I recognise prefixes by splitting the RE.
[16:08:53] <gilberth> I see.
[16:09:20] <hayley> This has the additional benefit that we don't crap up hash consing tables, but it forces you to only use exact string matching algorithms.
[16:11:31] <gilberth> Well, that is a technique I never considered as, again, my application is different.
[16:13:36] <gilberth> hayley: Anyhow, I am still impressed and delighted that what I found is working so well for you. That's just terrific.
[16:13:49] <hayley> Thanks!
[16:14:36] <hayley> Caches and GC bibliography: https://plover.com/~mjd/misc/hbaker-archive/CacheCGC.html and https://www.cs.purdue.edu/homes/suresh/papers/ismm12.pdf
[16:14:37] -ixelp- GC'91 Workshop on Garbage Collection in Object-Oriented Systems
[16:17:15] <hayley> Still, with the damn huge load queue and the observation that pointer-chasing programs don't do much else, I'd think that read barriers are pretty reasonable.
[16:19:44] <hayley> gilberth: BTW I haven't reimplemented BMH with the new compiler yet. And I admit that finding the right abstraction for prefix handling is tricky for me, but this compiler should work fine.
[16:24:25] <gilberth> hayley: I get 220ns for the "sun" benchmark (no BMH here). Which is curious as this includes the scanner generator boiler plate and infrastructure. Guess, that doesn't matter much.
[16:25:25] <hayley> Though I admit I'm itching to use a SIMD prefix scanner already.
[16:27:41] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[16:29:04] <hayley> gilberth: I'll have to figure out why I got a performance regression on only that test tomorrow.
[16:31:05] <gilberth> libc: 174ns for "sun" and 124ns for "[abc]+@[abc]+", which isn't that bad.
[16:37:03] <White_Flame> I just wrote an assembling/disassembling monitor for the C64 in 86 lines of BASIC.  What is wrong with me?
[16:37:42] <hayley> Do we know how libc does regexes?
[16:42:59] <dave0> nite all
[16:43:33] *** Quits: dave0 (~davezero@069.d.003.ncl.iprimus.net.au) (Quit: dave's not here)
[16:55:13] <hayley> http://www.gnu.org/software/libc/manual/html_node/POSIX-Regexp-Compilation.html suggests not machine code, which is odd.
[16:55:13] -ixelp- POSIX Regexp Compilation (The GNU C Library)
[17:08:29] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 264 seconds)
[17:09:49] *** Joins: lisp123 (~lisp123@5.30.23.247)
[17:10:27] *** Quits: hendursa1 (~weechat@user/hendursaga) (Quit: hendursa1)
[17:10:56] *** Joins: hendursaga (~weechat@user/hendursaga)
[17:11:24] <hayley> gilberth: It's a bit worrying to only have a 30% speedup over libc, then, no?
[17:14:34] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 252 seconds)
[17:35:02] *** Joins: elflng (~elflng@5.28.137.182)
[17:49:16] *** Quits: minion (~minion@common-lisp.net) (Remote host closed the connection)
[17:49:51] *** Joins: minion (~minion@common-lisp.net)
[18:27:44] <shka> we gonna play bauhaus to summon the gilberth
[18:29:00] <copec> Most regex libraries compile to an intermediate form similar to sql query compilation
[18:29:31] <shka> copec: hayley knows that
[18:29:53] <copec> I'm just thinking out loud
[18:30:03] <shka> though in that case, i think that hayley wants to compile to lisp, which can in turn can be compiled to machine code
[18:30:58] <shka> i mean, that's how cl-ppcre can run so fast 
[18:31:08] <copec> Things like this where parsing a data structure into lisp and compiling it are examples I use for coworkers
[18:31:08] <shka> hayley: got it right?
[18:32:38] <shka> heh
[18:32:57] <shka> at work i have decision tree -> sql function generator
[18:33:04] <shka> generates 6 megabytes of sql functions
[18:33:17] <shka> but that's how i managed to make it run fast 
[18:35:36] <copec> People like to compare peak optimized performance of compilers, but the average performance of everyday things is lightyears ahead in most CL implementations 
[18:38:00] <shka> i am under impression that a lot of those benchmarks are not reflective of the real world use cases 
[18:38:54] <shka> for instance, excessive inline can lead to the performance degradation because of the limited cache sizes  
[18:39:11] <shka> i don't have hard data on that, but this is a thing
[18:53:50] <shka> https://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.44.6957&rep=rep1&type=pdf
[18:53:59] <shka> well, they blame the registers instead
[18:54:07] <shka> but it makes sense as well
[18:56:58] <shka> and this thing may not show up in a isolated benchmark
[18:58:22] <gilberth> cl-ppcre isn't that fast actually, hayley and me beat it hands down. To begin with we use a DFA, which is the whole point of my algorithm.
[18:59:06] <shka> well, it is plenty fast compared to competitors
[18:59:38] <gilberth> Still not a DFA.
[19:01:43] <gilberth> And look at hayley's benchmarks, cl-ppcre is almost ten times slower. And that aren't even cases where backtracking is involved.
[19:05:27] <shka> https://www.youtube.com/watch?v=ETEg-SB01QY
[19:05:27] -ixelp- Little Dark Age - YouTube
[19:05:40] <shka> gilberth: well, that's good to know
[19:06:54] *** Quits: Mandus (~aasmundo@0.51-175-33.customer.lyse.net) (Remote host closed the connection)
[19:07:50] *** Joins: Mandus (~aasmundo@0.51-175-33.customer.lyse.net)
[19:32:09] *** Quits: hayley (~theemacss@user/hayley) (Read error: Connection reset by peer)
[19:32:12] *** Quits: Gnuxie (~gnuxie@user/gnuxie) (Write error: Connection reset by peer)
[19:32:14] *** Quits: Bi[m] (~bimatrixo@2001:470:69fc:105::109a) (Write error: Connection reset by peer)
[19:32:15] *** Quits: Duuqnd[m]1 (~duuqnd@2001:470:69fc:105::e9c0) (Remote host closed the connection)
[19:33:23] *** Joins: Gnuxie (~gnuxie@user/gnuxie)
[19:35:42] *** Joins: Duuqnd (~duuqnd@2001:470:69fc:105::e9c0)
[19:40:45] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 276 seconds)
[19:41:50] <gilberth> Hugh?! Isn't Windows 7 supposed to ask me for a license key, when I install it?
[19:42:16] *** Joins: hendursaga (~weechat@user/hendursaga)
[19:44:09] <gilberth> This copy somehow doesn't although I have a license key as this is a version I actually bought.
[19:48:08] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 246 seconds)
[19:57:29] <mfiano> Not OEM versions
[19:57:47] <gilberth> This isn't an OEM version.
[19:57:50] <mfiano> Also maybe some others. They will prompt you after installation
[19:57:53] <shka> you are not supposed to install oem yourself anyway
[19:59:22] <gilberth> This is a regular version I bought, not some version I just happened to have found somewhere. This is what makes me curious. Anyhow, it doesn't complain and works.
[19:59:24] <mfiano> Microsoft wants to associate your key with your computer hardware, for "reasons"
[19:59:39] <mfiano> So it makes sense to do so after drivers and everything have been installed
[19:59:54] <gilberth> Good luck then, I run it within Parallels.
[20:00:09] <pjb> Ah ah, Benny Hill, what a jester!  He plays a sketch where he's named Dr Octor, Psychiatrist.   Doctor Octor >:-)
[20:02:51] <gilberth> shka: Apropos inlining. I used ACL for a while in '00ish and in contrast to CMUCL it used very little inlining and thus was only 4MB in contrast to the 20MB of CMUCL. It never felt any slower.
[20:04:46] *** Quits: dec0d3r (~dec0d3r@2001:8003:4810:9600:7275:1afb:1707:8eaa) (Remote host closed the connection)
[20:17:21] <shka> gilberth: yeah, inline is really overrated 
[20:18:46] <shka> and templates force inline of everything
[20:23:52] *** Joins: notzmv (~zmv@user/notzmv)
[20:27:34] <gilberth> shka: Yes, this template business is silly at best.
[20:28:51] <gilberth> This, too, is curious. I installed a new version of Parallels on the other box and it offers me to install Windows 10 without a license key. Do Parallels and MS have some form of special license agreement?
[20:29:36] <shka> dunno but ms wants people to move away from the windows 7
[20:29:44] <shka> so mabye
[20:29:47] <shka> *maybe
[20:30:43] <gilberth> Heh, I still use Windows 7 for old games, because it just is more light weight and won't make my fan spin up for no apparent reason.
[20:32:02] <gilberth> I miss the jump and run browser game on modern.ie where you run around to kill copies of IE popping up.
[20:32:21] <ck_> what games do you play?
[20:32:32] <shka> well, most of games i care to play run on wine
[20:32:47] <shka> i still play heroes of might and magic 3 for instance
[20:32:57] <gilberth> Was a fine source of all kine of versions of Windows. The desktop background told you how to renew the 30-or-so-days time for using it without a license.
[20:34:42] <gilberth> shka: I tried Wine yesterday and it worked but vsync, which annoys me. But then I already owncopies of both Windows and Parallels. But then, this is with macOS, my Linux box has no display attached and sits 100km away.
[20:35:18] <shka> you can play Dusk instead https://www.youtube.com/watch?v=KiuC1DcgIMo :D
[20:35:19] -ixelp- BENEATH DUSK #1 - YouTube
[20:37:20] <gilberth> Is that Quake or Half-Life based?
[20:37:36] <shka> neither
[20:37:49] <gilberth> Anyhow, I liked the humor MS had as they really wanted to kill ancient IE.
[20:37:56] <shka> it is Unity game
[20:38:08] <gilberth> Doesn't ring a bell.
[20:38:21] <shka> it is a common game engine 
[20:38:28] <shka> the big competitor to the unreal engine
[20:39:43] <gilberth> I am not up to date with engines since the last one or two decades.
[20:39:44] <shka> amid evil is a pretty but pixelated game made on the unreal engine https://www.youtube.com/watch?v=UxCISDFGPaw
[20:39:45] -ixelp- CHAMPION OF EVIL - YouTube
[20:40:45] <shka> anyway, dusk feels more like quake 
[20:40:47] <gilberth> At times I believe my friend and I should have entered the game engine market in mid/late 90s. Anyhow, now he teaches computer graphics.
[20:51:44] <gilberth> Nah, this is great! This new Parallels and this particular version of macOS doesn't work for me. *sigh* so much for upgrading. Unfortunately that old version of Parallels I use on my other machine is no longer available. And now?
[20:53:35] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 252 seconds)
[20:53:45] * gilberth reboots the machine in the hope it would make a difference.
[20:55:37] *** Joins: aeth (~aeth@user/aeth)
[21:02:51] *** Joins: lisp123 (~lisp123@5.30.23.247)
[21:06:35] <gilberth> Now that Windows 10 is asking me for a product and the one I have doesn't work. Grrr.
[21:08:03] <gilberth> But the key I have is for a "Pro" version and this is a "Home" version. /me shrugs.
[21:15:43] <gilberth> I am not made for administering computers, I am a mere hacker.
[21:24:37] <Duuqnd> I find myself telling people "I'm a programmer, not a technician" frustratingly often
[21:28:21] <gilberth> Indeed, especially when people believe you could fix their Windows. Heck, all I use Windows for is to launch Steam, I don't use it otherwise. Still people believe I magically have more a clue about that particular OS just because I hack.
[21:29:39] <gilberth> "But you're good at computers, aren't you?"
[21:30:10] <gilberth> You have a hard time at time to convince them, that you unable to help and not unwilling.
[21:31:39] <Duuqnd> Printers are the thing that have tormented me the most
[21:32:30] <gilberth> Yep, especially when they have one of those glorious GDI printers.
[21:33:15] <gilberth> As I am used to printers just speaking PostScript. Over the network!
[21:34:39] <Duuqnd> My mom had a printer that refused to work on anything but Windows 7. Or at least I think that was it, I only had one Windows 7 computer to test with, it could've been magically bound to that one computer. Every other computer I tried simply refused to use the printer at all.
[21:35:02] <gilberth> Hmm, now this damn Windows is displaying "Searching for required files ..." for minutes. Hung apparently. All did was: Windows: "We need this and that, you like me to install it?" me: "Yes, go ahead!"
[21:35:54] <gilberth> Duuqnd: Now, that would be very impolite of the printer manufacturer.
[21:37:30] <gilberth> My cousin has an olde printer that would just work with his ancient MacBook with that ancient version of macOS. And that machine somehow forgot that it has WiFi, so for printing it's sneaker net here.
[21:38:18] * gilberth is stuck facing that hung progress bar.
[21:38:36] <gilberth> Reboot?
[21:39:40] <gilberth> I have little patience for that kind of things and the older I get the less patience I have.
[21:43:17] *** Quits: Mandus (~aasmundo@0.51-175-33.customer.lyse.net) (Ping timeout: 264 seconds)
[21:44:07] *** Joins: Mandus (~aasmundo@0.51-175-33.customer.lyse.net)
[21:44:57] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[21:45:36] *** Joins: lisp123 (~lisp123@5.30.23.247)
[21:46:23] <gilberth> "Getting Windows ready\nDon't turn off your computer" Stuck II. This is not funny anymore. I know why I don't use Windows.
[21:46:48] <gilberth> And "ready"? For what?
[21:47:29] <Duuqnd> "Getting Windows ready for disappointment"
[21:47:44] <gilberth> Or am I waiting for MS to get Windows ready for use?
[21:48:32] <gilberth> All I want to do is to play a game as I still lost my motivation to be productive and need a break.
[21:50:40] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 252 seconds)
[21:55:09] *** Joins: lisp123 (~lisp123@5.30.23.247)
[21:56:22] <shka> https://www.youtube.com/watch?v=3EPTfOTC4Jw
[21:56:23] -ixelp- The REAL Story On Why Space Cadet Pinball Was Removed (ft. Windows on Itanium) - YouTube
[21:59:35] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 252 seconds)
[22:04:38] <gilberth> shka: Curious, somehow your videos always have the closed captions on by default.
[22:04:55] <shka> youtube is weird like that
[22:05:06] <gilberth> I noticed.
[22:05:29] <shka> if you watch enough of starcaft on youtube google starts to think that you are korean
[22:05:42] <shka> and will turn on the korean captions for you
[22:06:35] <gilberth> Heh. Somehow YT still offers me German videos although I almost never watch those. But then at least I could understand them.
[22:09:40] <gilberth> At last! vsync! On the large display! The night is saved. I am heading for При́пять now.
[22:10:08] <shka> gilberth: have fun
[22:11:03] <gilberth> Thanks, I will. I still love that old S.T.A.L.K.E.R. game.
[22:11:49] <shka> this game is a legend
[22:11:57] <shka> it was in development forever 
[22:13:56] <gilberth> I remember. I read the developers actually were to При́пять. Some years after playing that game and watching a documentation about that disaster and that city I was stunned as I immediately recognized the places.
[22:16:42] <shka> gilberth: post-apocalyptic flavored games from the east are different from the western ones 
[22:17:36] <shka> mostly because you don't need to google on ruined building pictures to figure out how the collapse of the civilization looks up
[22:18:09] <shka> though Fallout 1/2 are to this day my favorite RPG games
[22:19:04] <gilberth> I was shot. Dead.
[22:19:22] <gilberth> shka: I never played Fallout.
[22:19:58] <shka> can be bought cheaply on gog
[22:20:12] <shka> also, thos game have my favorite soundtrack https://www.youtube.com/watch?v=_cLRP-QQxn4
[22:20:12] -ixelp- Mark Morgan - Vault Archives [Fallout music] - YouTube
[22:20:25] <gilberth> Is it old enough so that it would run on my poor HW?
[22:20:56] <shka> fallout 1997, fallout 2 1998
[22:20:58] <shka> so yes
[22:21:16] <gilberth> Yep, that should work :)
[22:21:27] <shka> https://www.gog.com/game/fallout
[22:21:28] -ixelp- Fallout auf GOG.COM
[22:21:41] <shka> and yeah, that soundtrack is just a classic
[22:21:50] <gilberth> Why is that German again? *sigh*
[22:22:28] <gilberth> I would appreciate when the language HTTP header would actually be used.
[22:23:11] <gilberth> Anyhow, I would need to find something to prepare for dinner. bbl.
[22:23:33] <mfiano> fallout 1 and 2 (and Tactics) were my favorite games
[22:24:47] <gilberth> My all time favorite is Half-Life 2
[22:24:49] <mfiano> Sadly Bethesda ruined it when they acquired it. But fear not, the original team revived it with Wasteland 2 and the recent Wasteland 3
[22:36:19] *** Joins: lisp123 (~lisp123@5.30.23.247)
[22:37:12] <gilberth> Looks like I shot all enemies but I still hear voices. /me doesn't like that.
[22:38:28] <shka> slav jank xD
[22:39:08] <gilberth> "slav jank"? What's that?
[22:39:38] <shka> Slav Jank is a specific type of video game made in Russia or former Soviet Union satellite states. Slav Jank is known for it's surreal atmosphere, low to moderate quality, and poor localization. Slav Jank often leaves it's players in a state of confusion or emotional disquiet.
[22:40:23] <shka> https://www.youtube.com/watch?v=Can4Ybh6YBs
[22:40:23] -ixelp- Civvie 11 Highlight - Slav Jank par Excellence - YouTube
[22:40:45] <pjb> gilberth: while you're not playing Final Fantasy, it's ok.
[22:42:42] <gilberth> pjb: I guess so, I still feel uncomfortable waiting to be shot every second.
[22:45:58] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 260 seconds)
[22:52:00] *** Quits: notzmv (~zmv@user/notzmv) (Remote host closed the connection)
[22:53:01] *** Quits: copec (~copec@schrodbox.unaen.org) (Read error: Connection reset by peer)
[22:53:19] *** Joins: copec (~copec@schrodbox.unaen.org)
[23:05:12] * gilberth is a coward and invests his money in medpacks.
[23:16:12] *** Quits: Aurora_v_kosmose (~LispyLigh@user/lispylights) (Remote host closed the connection)
[23:16:31] *** Joins: Aurora_v_kosmose (~LispyLigh@user/lispylights)
[23:21:35] <copec> Anyone here learned Prolog?
[23:22:39] <copec> implementing prolog in lisp is like a lisp book thing
[23:23:00] <mfiano> Can do it in like 10 lines of code with screamer
[23:23:50] <copec> screamer?
[23:24:11] <mfiano> nondeterministic programming library
[23:24:21] <copec> oh, okay
[23:25:35] <copec> Where does "screamer" come from?
[23:26:23] <copec> makes me think of a tracer bullet, because backtracing
[23:31:18] <mfiano> The paper was titled Screaming Yellow Zonkers, but I don't know more than that. _death may know. 
[23:31:51] <mfiano> He is a big fan of Screamer
[23:32:10] <mfiano> Me not so much into Prolog...more deductive databases that were inspired by it, like Datalog
[23:32:47] <copec> I like knowing the thing that makes people use a language
[23:36:28] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[23:43:21] <shka> prolog is interesting query language
[23:56:03] <pl> https://twitter.com/Foone/status/1441071633859420165?s=19
[23:57:01] *** Joins: molson__ (~molson@2001-48F8-704A-CA1-0-0-75F-104A-static.midco.net)
[23:59:47] *** Quits: molson_ (~molson@2001-48F8-704A-CA1-0-0-75F-1043-static.midco.net) (Ping timeout: 246 seconds)
