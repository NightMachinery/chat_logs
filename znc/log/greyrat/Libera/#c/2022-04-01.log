[00:00:24] *** Quits: Macbethwin (~chargen@D964062A.static.ziggozakelijk.nl) (Quit: Leaving)
[00:02:06] *** Quits: KinLux (~workspace@tmo-097-2.customers.d1-online.com) (Read error: Connection reset by peer)
[00:02:49] *** Quits: mahmutov (~mahmutov@5.176.42.164) (Ping timeout: 246 seconds)
[00:09:12] *** Quits: |darc| (darc@23-112-65-16.lightspeed.nworla.sbcglobal.net) (Quit: later)
[00:09:56] *** Quits: cuhela (~cuhela@188.119.45.227) (Quit: Leaving)
[00:10:38] *** Quits: kenanmarasli (~kenanmara@user/kenanmarasli) (Quit: Leaving)
[00:11:04] *** Joins: |darc| (darc@23-112-65-16.lightspeed.nworla.sbcglobal.net)
[00:11:13] *** Quits: perro (~perro@072-191-245-069.res.spectrum.com) (Ping timeout: 250 seconds)
[00:13:23] *** Quits: |darc| (darc@23-112-65-16.lightspeed.nworla.sbcglobal.net) (Client Quit)
[00:13:33] *** Joins: perro (~perro@072-191-245-069.res.spectrum.com)
[00:15:32] *** Joins: |darc| (darc@23-112-65-16.lightspeed.nworla.sbcglobal.net)
[00:16:29] *** Joins: b1101 (~b1101@pool-100-33-96-155.nycmny.fios.verizon.net)
[00:19:48] *** Quits: boB_K7IQ (~boB_K7IQ@152.44.147.180) (Ping timeout: 240 seconds)
[00:20:28] *** Joins: pulse (~pulse@user/pulse)
[00:22:02] *** Quits: |darc| (darc@23-112-65-16.lightspeed.nworla.sbcglobal.net) (Quit: later)
[00:22:39] *** Joins: |darc| (darc@23-112-65-16.lightspeed.nworla.sbcglobal.net)
[00:22:54] *** Joins: pucara (~i@host112.190-139-217.telecom.net.ar)
[00:29:15] *** Quits: rgrinberg (~textual@177.248.156.216) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[00:29:48] *** Joins: boB_K7IQ (~boB_K7IQ@152.44.147.180)
[00:30:29] *** Joins: rgrinberg (~textual@177.248.156.216)
[00:31:19] *** Quits: |darc| (darc@23-112-65-16.lightspeed.nworla.sbcglobal.net) (Quit: later)
[00:32:19] *** Quits: hanzo (uid532183@user/hanzo) (Quit: Connection closed for inactivity)
[00:32:42] *** Joins: davidlowryduda (~davidlowr@2601:197:600:1210:295d:ca2a:3a31:19f2)
[00:34:55] *** Quits: Optimus (~risto@87.227.227.147) (Remote host closed the connection)
[00:35:11] *** davidlowryduda is now known as dld
[00:36:52] *** Quits: rgrinberg (~textual@177.248.156.216) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[00:38:30] *** Quits: gh34 (~textual@cpe-184-58-181-106.wi.res.rr.com) (Quit: Textual IRC Client: www.textualapp.com)
[00:39:18] *** Joins: |darc| (darc@23-112-65-16.lightspeed.nworla.sbcglobal.net)
[00:42:04] *** Joins: cuhela (~cuhela@188.119.45.227)
[00:42:37] *** Quits: kaph (~kaph@net-93-67-57-97.cust.vodafonedsl.it) (Read error: Connection reset by peer)
[00:42:54] *** Joins: simpl_e (~user@user/simpl-e/x-8589812)
[00:42:55] *** Joins: kaph (~kaph@net-93-67-57-97.cust.vodafonedsl.it)
[00:44:50] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[00:45:35] *** Quits: magla (~gelignite@d5362fd7.access.ecotel.net) (Quit: Stay safe!)
[00:45:37] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 256 seconds)
[00:47:37] *** Lord_of_Life_ is now known as Lord_of_Life
[00:47:38] *** Quits: vysn (~vysn@user/vysn) (Ping timeout: 260 seconds)
[00:49:08] *** Joins: hiroshi_ (~freedom@151.37.65.224)
[01:03:59] *** Quits: MerrinX (~merrinx@ti0028a400-3686.bb.online.no) (Quit: WeeChat 3.4.1)
[01:04:36] *** Quits: caveman (~caveman@gateway/tor-sasl/caveman) (Quit: caveman)
[01:06:13] *** Joins: rgrinberg (~textual@177.248.156.216)
[01:12:17] *** Quits: CoderCharmander (~CoderChar@20014C4C12563000BCCDBFC417CDB7F0.catv.pool.telekom.hu) (Quit: Leaving)
[01:17:01] *** Quits: cuhela (~cuhela@188.119.45.227) (Ping timeout: 246 seconds)
[01:19:23] *** Quits: bertvvvs (~bertvvvs@user/bertvvvs) (Quit: Y'all have a nice day.)
[01:20:46] *** Quits: wardrunal (~goose@167.179.114.36) (Ping timeout: 245 seconds)
[01:21:35] <avar> Am I think-o-ing or is there nothing like a char *strdupl(const char *str, size_t *len_to) returns you the strlen, or does everyone just roll their own and call strndup() ?
[01:22:05] *** Joins: Macbethwin (~chargen@D964062A.static.ziggozakelijk.nl)
[01:24:36] *** Quits: mikoto-chan (~mikoto-ch@213.177.151.239) (Ping timeout: 240 seconds)
[01:25:08] *** Quits: Tang3nt-Man (~Tang3nt-M@92.40.179.157.threembb.co.uk) (Ping timeout: 252 seconds)
[01:26:04] <caze> avar: https://pubs.opengroup.org/onlinepubs/9699919799/functions/strdup.html
[01:27:33] *** Joins: Tangent-Man (~Tang3nt-M@92.40.179.55.threembb.co.uk)
[01:27:56] *** Quits: freakazoid343 (~matt@2603-9000-cf03-86c3-75b0-c9e4-045a-7058.inf6.spectrum.com) (Read error: Connection reset by peer)
[01:28:13] <caze> avar: Wait, misread your question.
[01:28:36] *** Joins: freakazoid343 (~matt@2603-9000-cf03-86c3-75b0-c9e4-045a-7058.inf6.spectrum.com)
[01:29:18] <avar> I mean just: char *xstrdupl(const char *str, size_t *len) { *len = strlen(len); return strndup(str, *len); }
[01:29:27] *** Joins: sebbu2 (~sebbu@user/sebbu)
[01:29:46] *** Joins: AbleBacon (~AbleBacon@user/AbleBacon)
[01:30:57] *** Quits: Enitin (~Enitin@82.180.145.223) (Ping timeout: 250 seconds)
[01:31:16] *** Quits: sonny (~sonny@bras-base-toroon0812w-grc-02-142-114-221-234.dsl.bell.ca) (Quit: Going offline, see ya! (www.adiirc.com))
[01:31:38] *** Quits: sebbu (~sebbu@user/sebbu) (Ping timeout: 268 seconds)
[01:33:07] *** Quits: kitsunenokenja (~kitsunech@68.91.220.96) (Ping timeout: 250 seconds)
[01:37:50] *** ElderMalaclypse is now known as apotheon
[01:44:56] *** Joins: Enitin (~Enitin@82.180.145.226)
[01:50:32] *** Quits: Akuli (~Akuli@87-94-108-217.bb.dnainternet.fi) (Quit: Akuli)
[01:52:19] *** Joins: seninha (~seninha@user/seninha)
[01:52:45] *** Joins: Optimus (~risto@87.227.227.147)
[01:52:58] *** Joins: g2anj (~v@58.228.230.4)
[01:53:50] *** Joins: Ox000 (~jy@74.215.12.46)
[02:02:12] *** Quits: Tangent-Man (~Tang3nt-M@92.40.179.55.threembb.co.uk) (Ping timeout: 240 seconds)
[02:02:24] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Quit: ERC (IRC client for Emacs 27.1))
[02:02:53] *** Joins: Tangent-Man (~Tang3nt-M@92.40.179.156.threembb.co.uk)
[02:04:00] *** Quits: rgrinberg (~textual@177.248.156.216) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[02:06:51] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:ec62:46e4:cbb2:6c14) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[02:06:59] *** Quits: brad_mssw|mac (~bhouse@2601:344:4100:b490:b4ce:bc:9380:895e) (Quit: This computer has gone to sleep)
[02:07:35] *** Quits: adip (~adip@dev80.neoplus.adsl.tpnet.pl) (Ping timeout: 260 seconds)
[02:08:29] *** Joins: seifeslimene (~seifeslim@102.158.105.22)
[02:09:09] *** Quits: byteskeptical (~amnesia@user/byteskeptical) (Quit: Lost terminal)
[02:10:05] <seifeslimene> #include<stdio.h>
[02:10:05] <seifeslimene> int main() {
[02:10:06] <seifeslimene>   int a = 10;
[02:10:06] <seifeslimene>   int *p;
[02:10:07] <seifeslimene>   p = &a;
[02:10:07] *** ChanServ sets mode: +o candide
[02:10:07] <seifeslimene>   printf("Address of p is %d\n", p);
[02:10:08] *** candide sets mode: +b *!~seifeslim@102.*
[02:10:26] *** Quits: hiroshi_ (~freedom@151.37.65.224) (Quit: hiroshi_)
[02:11:23] *** candide sets mode: -b *!~seifeslim@102.*
[02:11:41] <caze> ,cc int a; printf("Address of a is %p\n", &a);
[02:11:43] <candide> caze: [warning: format '%p' expects argument of type 'void *', but argument 2 has type 'int *' [-Wformat=]] Address of a is 0x7fffffffe30c
[02:13:58] *** Quits: TonyStone (~TonyStone@2603-7080-8607-c36a-25e7-2817-2baa-33e2.res6.spectrum.com) (Remote host closed the connection)
[02:14:08] *** Quits: Natch (~natch@c-67bae255.014-297-73746f25.bbcust.telenor.se) (Ping timeout: 272 seconds)
[02:15:43] *** Joins: TonyStone (~TonyStone@cpe-74-76-51-197.nycap.res.rr.com)
[02:15:46] *** Joins: freakazoid12345 (~matt@2603-9000-cf03-86c3-75b0-c9e4-045a-7058.inf6.spectrum.com)
[02:15:50] *** Joins: cart_ (~cart@2a01:4c8:1095:7707:cca8:fb77:dc1:6027)
[02:17:45] <caze> avar: But calling strlen twice on the same string probably isn't that expensive.
[02:17:50] *** Quits: aradesh (~aradesh@user/aradesh) (Quit: WeeChat 1.9.1)
[02:17:56] *** Quits: freakazoid343 (~matt@2603-9000-cf03-86c3-75b0-c9e4-045a-7058.inf6.spectrum.com) (Ping timeout: 252 seconds)
[02:18:10] <caze> The second call might be free.
[02:18:14] <avar> caze: Yes it's fine, I was just wondering if I'd missed a stdlib function, but in retrospect it doesn't really do functions you can trivially compose from two other ones..
[02:18:22] *** Quits: TonyStone (~TonyStone@cpe-74-76-51-197.nycap.res.rr.com) (Remote host closed the connection)
[02:18:47] *** Quits: blindguard (~blindguar@2a02:908:1864:c200::beb) (Quit: Konversation terminated!)
[02:19:35] <avar> caze: I hacked it up not for optimization, but just reduction in code verbosity, it was a common pattern in the codebase I was hacking, *shrug*
[02:20:07] <nitrix> seifeslimene, You're conflating the address of p (&p) with the address of a (&a), which is p.
[02:20:31] <nitrix> seifeslimene, Also, without paste site, candide will ban you for spam.
[02:21:57] *** Joins: Natch (~natch@c-67bae255.014-297-73746f25.bbcust.telenor.se)
[02:23:00] *** Joins: geowiesnot (~user@5-51-190-244.abo.bbox.fr)
[02:25:24] *** Joins: elastic_1 (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[02:25:58] <seifeslimene> My question is why printf("Value at address p+1 is %d\n", *(p+1)); output is strange?
[02:26:15] <seifeslimene> It should output some garbage value
[02:26:23] *** Joins: TonyStone (~TonyStone@cpe-74-76-51-197.nycap.res.rr.com)
[02:26:25] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Ping timeout: 250 seconds)
[02:26:38] <seifeslimene> But for me it output the same value as p
[02:28:49] *** Joins: nshirelaptop (~nshire@user/nshire)
[02:29:06] *** elastic_1 is now known as elastic_dog
[02:29:09] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Client Quit)
[02:29:30] <nitrix> *(p+1) is an obtuse way of writing p[1].
[02:29:35] <nshirelaptop> I'm dividing by zero and I get 'inf' returned. I obviously expected an error, but what does 'inf' exactly mean in this context?
[02:29:45] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[02:29:59] <fizzie> seifeslimene: Then there's a possibility that p+1 (aka &a+1) happens to be where `p` resides in memory. But you shouldn't expect "some garbage value" to be something you'd recognize as garbage.
[02:30:16] <nitrix> If `p` points at the object `a`, which is a single int, there no way you'll be able to access a "second element" after it in memory.
[02:31:28] *** Quits: strajder (~strajder@user/strajder) (Quit: good night.)
[02:31:43] <nitrix> The next object in memory is most likely `p`, yeah. Reading it in that manner is UB though.
[02:32:09] *** Quits: baltazar (~baltazar@188-143-106-228.pool.digikabel.hu) (Ping timeout: 256 seconds)
[02:32:19] <fizzie> ,cc -O2 -m32 int a = 10, *p = &a; printf("&a = %p, &p = %p, p = %p, p+1 = %p", (void *) &a, (void *) &p, (void *) p, (void *)(p + 1)); // as happened to be the case here, for example
[02:32:21] <candide> fizzie: &a = 0xffffd478, &p = 0xffffd47c, p = 0xffffd478, p+1 = 0xffffd47c
[02:33:38] <fizzie> That example didn't access p+1, so it's okay. But you can see that p equals &a (guaranteed), while p+1 equals &p (coincidence).
[02:33:39] <nshirelaptop> answered my own question, inf is just like NaN for positive infinity
[02:33:59] *** Joins: baltazar (~baltazar@178-164-251-249.pool.digikabel.hu)
[02:35:40] *** Quits: Optimus (~risto@87.227.227.147) (Ping timeout: 272 seconds)
[02:37:49] *** Quits: alch (~alch@ca-18-205-128.service.infuturo.it) (Read error: Connection reset by peer)
[02:37:53] *** Quits: hvitol (hvitol@gateway/vpn/protonvpn/hvitol) (Ping timeout: 260 seconds)
[02:40:13] *** Quits: ncrowl (~ncrowl@94-255-226-37.cust.bredband2.com) (Ping timeout: 240 seconds)
[02:41:12] *** Joins: Optimus (~risto@87.227.227.147)
[02:41:55] *** Joins: alch (~alch@bo-18-147-149.service.infuturo.it)
[02:42:23] *** Joins: ncrowl (~ncrowl@31-208-86-108.cust.bredband2.com)
[02:44:02] *** Joins: noteness_ (~noteness@user/noteness)
[02:44:15] *** Quits: noteness (~noteness@user/noteness) (Ping timeout: 240 seconds)
[02:47:15] *** Quits: unixpro1970 (~unixpro19@c-67-168-1-124.hsd1.wa.comcast.net) (Ping timeout: 260 seconds)
[02:50:59] *** Quits: cart_ (~cart@2a01:4c8:1095:7707:cca8:fb77:dc1:6027) (Quit: Konversation terminated!)
[02:51:11] *** Quits: geowiesnot (~user@5-51-190-244.abo.bbox.fr) (Ping timeout: 245 seconds)
[02:51:25] *** Quits: jmdaemon (~jmdaemon@user/jmdaemon) (Ping timeout: 240 seconds)
[02:53:20] *** Quits: orestarod (~orestarod@2a02:2149:8a3f:4a00:ac3e:fdb9:cec1:9bb9) (Ping timeout: 260 seconds)
[02:55:52] *** Joins: soapsudsxx (~soapsudsx@209.221.40.145)
[02:56:07] *** Joins: unixpro1970 (~unixpro19@c-67-168-1-124.hsd1.wa.comcast.net)
[02:56:38] *** Quits: LucaTM (~LucaTM@user/lucatm) (Quit: Textual IRC Client: www.textualapp.com)
[02:58:41] *** Joins: zacts (~zacts@user/zacts)
[03:02:46] *** Quits: ncrowl (~ncrowl@31-208-86-108.cust.bredband2.com) (Quit: leaving)
[03:03:01] *** Joins: cart_ (~cart@2a01:4c8:1095:7707:cca8:fb77:dc1:6027)
[03:03:02] *** Joins: ncrowl (~ncrowl@31-208-86-108.cust.bredband2.com)
[03:04:35] *** Quits: tejr (~tejr@user/tejr) (Ping timeout: 240 seconds)
[03:05:23] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.4)
[03:06:17] *** Quits: EtherNet (~ethernet@user/ethernet) (Ping timeout: 240 seconds)
[03:06:43] *** Joins: tejr (~tejr@user/tejr)
[03:08:53] *** Joins: EtherNet (~ethernet@user/ethernet)
[03:14:27] *** Joins: geowiesnot (~user@5-51-190-244.abo.bbox.fr)
[03:18:34] *** Joins: evrixol (~Vlad2580@user/vlad2580)
[03:18:38] *** Quits: Techcable (~Techcable@user/Techcable) (Remote host closed the connection)
[03:18:58] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[03:19:12] *** Joins: jmdaemon (~jmdaemon@user/jmdaemon)
[03:20:05] *** Joins: Techcable (~Techcable@user/Techcable)
[03:20:43] *** Quits: JanC (~janc@user/janc) (Remote host closed the connection)
[03:20:57] *** Joins: JanC (~janc@user/janc)
[03:23:34] *** Joins: MrFantastik (~f@2607:f598:bbda:220:b547:db6c:9b5e:9d59)
[03:23:42] *** Quits: Techcable (~Techcable@user/Techcable) (Remote host closed the connection)
[03:24:03] *** Joins: hashfunc159a (~user@2601:5c0:c280:7090:4533:6252:8e32:243)
[03:25:07] *** Quits: zacts (~zacts@user/zacts) (Quit: Client closed)
[03:25:16] *** Joins: Techcable (~Techcable@user/Techcable)
[03:28:01] *** Joins: dave0 (~dave0@069.d.003.ncl.iprimus.net.au)
[03:28:29] *** Quits: freakazoid12345 (~matt@2603-9000-cf03-86c3-75b0-c9e4-045a-7058.inf6.spectrum.com) (Read error: Connection reset by peer)
[03:28:38] *** Quits: cart_ (~cart@2a01:4c8:1095:7707:cca8:fb77:dc1:6027) (Ping timeout: 260 seconds)
[03:29:10] *** Joins: freakazoid12345 (~matt@2603-9000-cf03-86c3-75b0-c9e4-045a-7058.inf6.spectrum.com)
[03:32:40] *** Quits: gildasio1 (~gildasio@gateway/tor-sasl/gildasio) (Remote host closed the connection)
[03:33:31] *** Joins: wingsorc (~wingsorc@user/wingsorc)
[03:33:48] *** Joins: pizdets_ (~pizdets@183.182.111.109)
[03:34:16] *** Joins: gildasio1 (~gildasio@gateway/tor-sasl/gildasio)
[03:34:46] *** Quits: pizdets (~pizdets@183.182.114.101) (Ping timeout: 265 seconds)
[03:35:12] *** Quits: kurahaupo (~kurahaupo@115.69.27.211) (Ping timeout: 272 seconds)
[03:35:47] *** Quits: Wulf (~Wulf@user/wulf) (Ping timeout: 260 seconds)
[03:35:50] *** Quits: Tangent-Man (~Tang3nt-M@92.40.179.156.threembb.co.uk) (Ping timeout: 272 seconds)
[03:36:41] *** Quits: evrixol (~Vlad2580@user/vlad2580) (Quit: Leaving)
[03:37:17] *** Joins: Wulf (~Wulf@user/wulf)
[03:39:00] *** Quits: nshirelaptop (~nshire@user/nshire) (Ping timeout: 272 seconds)
[03:39:22] *** Quits: b1101 (~b1101@pool-100-33-96-155.nycmny.fios.verizon.net) (Quit: b1101)
[03:39:52] *** Quits: shivesh (~shivesh@user/shivesh) (Quit: leaving)
[03:42:43] *** Joins: reedrichards (~f@2607:f598:bbda:220:7e49:62e5:d9a5:6fe2)
[03:44:08] *** Quits: MrFantastik (~f@2607:f598:bbda:220:b547:db6c:9b5e:9d59) (Remote host closed the connection)
[03:44:22] *** Quits: Optimus (~risto@87.227.227.147) (Ping timeout: 246 seconds)
[03:45:09] *** Quits: ckdCreations (~ckdCreati@147.55.130.35) (Read error: Connection reset by peer)
[03:46:23] *** Quits: nyah (~nyah@05453449.skybroadband.com) (Ping timeout: 256 seconds)
[03:47:06] *** reedrichards is now known as MrFantastik
[03:50:40] *** Joins: ckdCreations (~ckdCreati@147.55.133.138)
[03:50:41] *** Quits: geowiesnot (~user@5-51-190-244.abo.bbox.fr) (Ping timeout: 256 seconds)
[03:54:34] <nomagno> Anyone have that C23 try/catch proposal link on hand?
[03:54:55] <nomagno> I want to revise an interesting rationale I remember reading
[03:56:06] *** Joins: epony (epony@user/epony)
[03:58:31] *** Quits: pucara (~i@host112.190-139-217.telecom.net.ar) (Quit: Lost terminal)
[04:00:50] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[04:00:51] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[04:00:51] *** Joins: wroathe (~wroathe@user/wroathe)
[04:02:58] *** Quits: zeenk (~zeenk@2a02:2f04:a313:d600:8d26:ec9f:3ff6:fc94) (Ping timeout: 260 seconds)
[04:03:03] *** Quits: Burgundy (~NA@5-12-91-184.residential.rdsnet.ro) (Ping timeout: 260 seconds)
[04:05:51] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:80cb:fbaa:9eb3:d23c)
[04:10:08] *** candide sets mode: -o candide
[04:10:14] <pragma-> http://www.open-std.org/jtc1/sc22/wg14/www/wg14_document_log.htm
[04:10:22] *** Quits: unlink2 (~unlink@p200300ebcf19f600f31648a859b660c5.dip0.t-ipconnect.de) (Remote host closed the connection)
[04:11:02] *** Quits: Klinda (~superleag@user/klinda) (Quit: Konversation terminated!)
[04:11:35] <nomagno> I've looked there but can't find it
[04:12:05] <BtbN> http://www.open-std.org/jtc1/sc22/wg14/www/docs/n1298.pdf this?
[04:12:54] <fizzie> Not a C23 one, though.
[04:13:13] <fizzie> There's also the OOB error signaling one, but it's not really a "try/catch proposal": http://www.open-std.org/jtc1/sc22/wg14/www/docs/n2361.pdf
[04:13:50] <BtbN> That N1298 thing looks really nice though. Would have loved to get that
[04:14:03] *** Quits: boB_K7IQ (~boB_K7IQ@152.44.147.180) (Ping timeout: 260 seconds)
[04:14:56] <nomagno> It talked about how a struct/union for signaling errors required more stack space or something, and then proposed a different mechanism
[04:15:15] <nomagno> Don't remember much more, but I do know it was shared here
[04:15:57] <fizzie> Then maybe it's the one I linked.
[04:16:10] *** Quits: bebyx (~Thunderbi@user/bebyx) (Remote host closed the connection)
[04:16:11] <fizzie> But it's really a low-level mechanism that could be used to build exceptions on top of.
[04:16:56] <nomagno> No no, it's not that one
[04:21:03] *** Quits: random-nick (~random-ni@87.116.167.125) (Ping timeout: 260 seconds)
[04:21:48] *** Joins: bebyx (~Thunderbi@user/bebyx)
[04:22:06] *** Joins: Optimus (~risto@87.227.227.147)
[04:24:42] *** Joins: kurahaupo (~kurahaupo@115.69.27.211)
[04:26:27] *** Quits: ckdCreations (~ckdCreati@147.55.133.138) (Read error: Connection reset by peer)
[04:27:13] *** Joins: ckdCreations (~ckdCreati@147.55.133.138)
[04:27:26] <nomagno> Is there any difference between {do_stuff;} and do_stuff; ?
[04:27:41] <fossforus> scope
[04:27:52] *** Joins: m25n (~m25n@67.142.235.252)
[04:27:58] <fossforus> if that's the only thing in there though, then no
[04:28:34] <fossforus> blocks like that are handy when cast against C99 compound declarations
[04:29:07] <nomagno> void a(void) { int f; { int g; f = 1; } g = 0; }
[04:29:10] <nomagno> Is this code fine?
[04:29:14] *** Joins: rgrinberg (~textual@177.248.156.216)
[04:29:20] <fizzie> No, `g` is not in scope for `g = 0;`.
[04:29:32] <fossforus> no, unless g is declared elsewhere
[04:29:40] <nomagno> Hm, guessed so.
[04:29:52] <fossforus> regardless you shouldn't do this thinking it's an optimization
[04:30:02] *** Quits: phaise (~phaise@gateway/tor-sasl/phaise) (Remote host closed the connection)
[04:30:12] <fossforus> compilers are smart enough to know the last time you use a variable
[04:30:36] <nomagno> It's not an optimization, it's just some preprocessor macros might naturally produce something like this depending of the context
[04:30:41] <nomagno> So its nice to know
[04:30:59] *** Joins: phaise (~phaise@gateway/tor-sasl/phaise)
[04:31:02] *** Quits: neunon (~neunon@user/neunon) (Quit: ZNC 1.8.2 - https://znc.in)
[04:31:21] <fossforus> s/variable/& in a given scope/
[04:31:34] *** Joins: neunon (~neunon@user/neunon)
[04:31:51] *** Joins: chenqisu1 (~chenqisu1@183.217.200.168)
[04:32:19] *** Quits: Wulf (~Wulf@user/wulf) (Ping timeout: 246 seconds)
[04:32:26] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.5)
[04:33:25] *** Quits: bebyx (~Thunderbi@user/bebyx) (Ping timeout: 256 seconds)
[04:33:43] <fizzie> Here's a random piece of trivia: selection statements (if, switch) and iteration statements (for, while, do-while) are always blocks, even if they don't involve a block statement as the body.
[04:33:59] *** Quits: m25n (~m25n@67.142.235.252) (Ping timeout: 256 seconds)
[04:34:14] *** Joins: Wulf (~Wulf@user/wulf)
[04:36:27] *** Quits: Vrganj_ (~Vrganj@93-138-11-26.adsl.net.t-com.hr) (Ping timeout: 260 seconds)
[04:37:23] *** Quits: Y4knotiS (~YaknotiS@cpc1-cmbg18-2-0-cust87.5-4.cable.virginm.net) (Ping timeout: 260 seconds)
[04:39:44] *** Quits: kurahaupo (~kurahaupo@115.69.27.211) (Ping timeout: 260 seconds)
[04:43:46] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[04:44:55] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 246 seconds)
[04:50:11] *** Quits: rgrinberg (~textual@177.248.156.216) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[04:51:16] *** Quits: geranim0 (~geranim0@modemcable242.171-178-173.mc.videotron.ca) (Remote host closed the connection)
[04:53:49] *** Joins: xiongxin (~Thunderbi@2409:8955:3894:25d6:2bd8:ade2:1163:8d53)
[04:54:11] <MrFantastik> what does it mean to be a block?
[04:54:56] *** Joins: geowiesnot (~user@5-51-190-244.abo.bbox.fr)
[04:56:00] <pragma-> I always thought a block meant it could accept more than 1 statement.
[04:56:02] *** Quits: xiongxin (~Thunderbi@2409:8955:3894:25d6:2bd8:ade2:1163:8d53) (Client Quit)
[04:57:23] *** Joins: xiongxin (~Thunderbi@117.136.33.222)
[05:00:05] <pragma-> If it wasn't fizzie, I'd suspect they were conflating blocks and scopes.
[05:00:27] *** Quits: Cyp (~cyp@213.237.84.236) (Remote host closed the connection)
[05:00:37] <fizzie> ,c11 6.8p3
[05:00:38] <candide> http://www.iso-9899.info/n1570.html#6.8p3 [Statements and blocks] A block allows a set of declarations and statements to be grouped into one syntactic unit. The initializers of objects that have automatic storage duration, and the variable length array declarators of ordinary identifiers with block scope, are evaluated and the values are stored in the objects (including storing an indeterminate value in o... <truncated; https://0x0.st/oq61.txt>
[05:00:51] *** Joins: Cyp (~cyp@213.237.84.236)
[05:00:53] <fizzie> ,c11 6.8.4p3
[05:00:54] <candide> http://www.iso-9899.info/n1570.html#6.8.4p3 [Selection statements] A selection statement is a block whose scope is a strict subset of the scope of its enclosing block. Each associated substatement is also a block whose scope is a strict subset of the scope of the selection statement.
[05:01:01] *** Quits: mixfix41 (~homefame@user/mixfix41) (Ping timeout: 246 seconds)
[05:01:13] *** Joins: reedrichards (~f@2607:f598:bbda:220:e66d:5163:80:e75e)
[05:01:17] <fizzie> (And an almost identical paragraph for iteration statements.)
[05:02:06] <fizzie> It doesn't _usually_ matter that it's a block, since you can't stick declarations in them without a block statement (well, except for the for-loop initial declaration, which people are familiar with). But has some implications when it comes to compound literal lifetimes.
[05:02:21] <fizzie> Makes code like `int *p; if (1) p = &(int){1}; printf("%d", *p);` undefined, for example.
[05:02:56] <fizzie> (Because the lifetime of the object `(int){1}` ends when execution leaves the if statement's block.)
[05:03:03] *** Quits: MrFantastik (~f@2607:f598:bbda:220:7e49:62e5:d9a5:6fe2) (Remote host closed the connection)
[05:03:18] *** Quits: xiongxin (~Thunderbi@117.136.33.222) (Read error: Connection reset by peer)
[05:03:21] <pragma-> I don't get it.
[05:03:32] <pragma-> ,cc if (0) int a; puts("hmm");
[05:03:33] <candide> pragma-: error: expected expression before 'int'
[05:03:38] <pragma-> ,cc if (0) { int a; } puts("hmm");
[05:03:40] <candide> pragma-: hmm
[05:03:48] <pragma-> Doesn't seem like a block to me without the {}'s
[05:04:00] <fizzie> "A selection statement is a block --"
[05:04:18] <fizzie> Just because it's a block doesn't mean you could stick a declaration in it.
[05:04:50] <pragma-> smh, english prose instead of mathematical formulas. imagine trying to understand C.
[05:05:16] <fizzie> The syntax part is still /selection-statement/: `if` `(` /expression/ `)` /statement/ -- and `int a;` isn't a /statement/.
[05:05:58] <pragma-> "allows a set of declarations and statements"
[05:06:43] <fizzie> Well, yeah, it's a bit unfortunate way of putting it.
[05:07:34] <fizzie> The first sentence of that definition makes it sound a lot more like a compound statement, which of course is a block too.
[05:07:39] <fizzie> ,c11 6.8.2p2
[05:07:39] <candide> http://www.iso-9899.info/n1570.html#6.8.2p2 [Compound statement] A compound statement is a block.
[05:07:45] *** Quits: constxd (~brad@142.134.78.128) (Ping timeout: 256 seconds)
[05:07:46] <pragma-> lol
[05:07:50] <fizzie> Nice short paragraph.
[05:08:16] *** Quits: nelgau_ (~nelgau@cpe-75-82-216-42.socal.res.rr.com) (Remote host closed the connection)
[05:08:32] *** Joins: nelgau (~nelgau@cpe-75-82-216-42.socal.res.rr.com)
[05:08:43] <fizzie> ,cc -O2 int *p, *q; if (1) p = &(int){1}; if (1) q = &(int){2}; printf("%d %d", *p, *q); // here's a demonstration that it *is* a block
[05:08:45] <candide> fizzie: 0 0
[05:08:58] <fizzie> ,cc -O2 int *p, *q; p = &(int){1}; q = &(int){2}; printf("%d %d", *p, *q); // with the `if` statements omitted
[05:09:00] <candide> fizzie: 1 2
[05:09:12] <pragma-> so, a block is not merely another way of saying compound statement? it's a deeper concept that compound statements are a subset of?
[05:09:49] <pragma-> I'm not seeing the block part of the selection statement.
[05:10:10] <fizzie> Yes. Well, it has to be: if only compound statements were blocks, `for (int i = 0; i < 10; i++) f(i);` couldn't have `i` scoped to the for statement.
[05:10:11] <pragma-> I see compound statements as a block, no problem. The if statement without {}? Where's the block there?
[05:10:34] <fizzie> There's two blocks there.
[05:11:09] <fizzie> The statement itself is a block, and its body is another block. `if (1) a; else b;` has *three* blocks.
[05:12:25] <fizzie> If you put something that's tied to its enclosing block (like the lifetime of a compound literal) in `a`, it will... be tied to just that one statement, not whatever {}s there are around the if.
[05:13:07] <pragma-> sounds like scope to me
[05:14:28] <pragma-> to me, blocks group multiple declarations and statements. scope is the duration things are tied to, which are typically blocks. hmm. weird terminology but ok.
[05:14:42] <fizzie> The lifetimes are distinct from scopes. Because there's no "holes" in them, while scopes can be non-contiguous. But of course block _scope_ is also a thing associated with a particular block.
[05:16:59] *** Joins: rgrinberg (~textual@177.248.156.216)
[05:17:26] <fizzie> I was trying to do another demonstration, but kept hitting time-outs.
[05:18:44] <pragma-> looking into it
[05:19:16] <fizzie> Well, anyway. In `if (1) (enum { red })0; printf("%d", red);` the scope of the identifier `red` is limited to the if statement's body (again, even without {}s), while `(enum { red }) 0; printf("%d", red);` should be valid. Hopefully. I think.
[05:20:38] *** Quits: geowiesnot (~user@5-51-190-244.abo.bbox.fr) (Ping timeout: 260 seconds)
[05:21:52] *** Joins: roger (~rogerx@user/roger)
[05:22:14] *** Joins: bertvvvs (~bertvvvs@user/bertvvvs)
[05:23:02] *** Quits: mimorek (~mimorek@2a02:a463:6d13:1:8a22:4d45:1db4:6da) (Quit: Leaving)
[05:26:58] *** Quits: rgrinberg (~textual@177.248.156.216) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[05:28:47] *** Quits: steve_ (~steve@ool-182c2b80.dyn.optonline.net) (Ping timeout: 252 seconds)
[05:29:00] *** Joins: gargus (~user@61.68.76.222)
[05:29:09] *** Joins: FlipFlop (~FlipFlop@user/fl1pfl0p)
[05:34:41] *** Quits: bertvvvs (~bertvvvs@user/bertvvvs) (Quit: Y'all have a nice day.)
[05:34:56] *** Joins: bertvvvs (~bertvvvs@user/bertvvvs)
[05:35:05] *** Joins: caveman (~caveman@gateway/tor-sasl/caveman)
[05:35:11] *** Quits: Rounin (~david@84.212.130.215) (Ping timeout: 256 seconds)
[05:37:44] *** Joins: kurahaupo (~kurahaupo@115.69.27.211)
[05:39:24] *** Joins: vysn (~vysn@user/vysn)
[05:43:07] *** Quits: Church (~aleph@68.161.207.188) (Ping timeout: 256 seconds)
[05:44:40] *** Quits: dave0 (~dave0@069.d.003.ncl.iprimus.net.au) (Read error: Connection reset by peer)
[05:46:30] *** Quits: coaxing (~coaxing@user/coaxing) (Quit: WeeChat 3.4.1)
[05:46:56] *** Joins: Akiva (~Akiva@user/Akiva)
[05:48:50] *** Quits: Optimus (~risto@87.227.227.147) (Ping timeout: 272 seconds)
[05:49:48] *** Quits: kurahaupo (~kurahaupo@115.69.27.211) (Ping timeout: 260 seconds)
[05:49:53] *** Joins: dave0 (~dave0@069.d.003.ncl.iprimus.net.au)
[05:54:35] *** Joins: coaxing (~coaxing@user/coaxing)
[05:57:07] *** Joins: dsrt^ (~dsrt@c-24-99-107-170.hsd1.ga.comcast.net)
[05:58:27] *** Joins: Church (~aleph@68.161.207.188)
[06:03:13] *** Quits: avar (~avar@vm.nix.is) (Quit: Lost terminal)
[06:04:13] *** Joins: avar (avar@vm.nix.is)
[06:07:08] *** Joins: boB_K7IQ (~boB_K7IQ@c-24-19-1-225.hsd1.wa.comcast.net)
[06:07:51] *** Quits: Enitin (~Enitin@82.180.145.226) (Ping timeout: 272 seconds)
[06:08:52] *** Joins: Enitin (~Enitin@82.180.145.228)
[06:09:30] *** Quits: that_guy_who_fig (~that_guy_@ool-182cdb24.dyn.optonline.net) (Remote host closed the connection)
[06:14:18] *** Joins: kurahaupo (~kurahaupo@115.69.27.211)
[06:17:07] *** Quits: dave0 (~dave0@069.d.003.ncl.iprimus.net.au) (Read error: Connection reset by peer)
[06:18:34] *** Joins: zessz (~IceChat95@2607:fb90:988a:9dd5:7168:28d:6143:ff13)
[06:20:05] *** Parts: zessz (~IceChat95@2607:fb90:988a:9dd5:7168:28d:6143:ff13) ()
[06:20:25] *** Quits: llh (~UPP@user/llh) (Quit: :::: ( UPP ) ::::)
[06:20:49] *** Joins: kitsunenokenja (~kitsunech@68.91.220.96)
[06:21:18] *** Joins: Inline__ (~Inline@p200300cd470b2600b0280ee525100d94.dip0.t-ipconnect.de)
[06:22:21] *** Joins: dave0 (~dave0@069.d.003.ncl.iprimus.net.au)
[06:23:40] *** Quits: jw4 (~jw4@user/jw4) (Ping timeout: 272 seconds)
[06:23:53] *** Quits: Inline (~Inline@p200300cd470e1300a84f1effc05ae732.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[06:25:05] *** Joins: jw4 (~jw4@user/jw4)
[06:28:52] *** Quits: unixpro1970 (~unixpro19@c-67-168-1-124.hsd1.wa.comcast.net) (Ping timeout: 246 seconds)
[06:29:45] *** Joins: f__ (~f@2607:f598:bbda:220:650b:ba3f:766b:61d4)
[06:30:01] *** Quits: smeso (~smeso@user/smeso) (Quit: smeso)
[06:30:02] *** Quits: nun (~nun@178.115.236.156.static.drei.at) (Quit: ZNC - http://znc.in)
[06:30:17] *** Quits: pizdets_ (~pizdets@183.182.111.109) (Ping timeout: 246 seconds)
[06:31:15] *** Quits: reedrichards (~f@2607:f598:bbda:220:e66d:5163:80:e75e) (Remote host closed the connection)
[06:31:53] *** Quits: aghast (~aghast@2607:fb91:bd0b:1329:a0d6:4979:f73c:e2ec) (Remote host closed the connection)
[06:32:05] *** Joins: aghast (~aghast@2607:fb91:bd0b:1329:a0d6:4979:f73c:e2ec)
[06:32:32] *** Joins: nun (~nun@178.115.236.156.static.drei.at)
[06:33:14] *** Joins: reedrichards (~f@2607:f598:bbda:220:d0a1:152d:dabf:66e6)
[06:33:34] *** Quits: f__ (~f@2607:f598:bbda:220:650b:ba3f:766b:61d4) (Remote host closed the connection)
[06:34:07] *** Quits: banc (banc@gateway/vpn/airvpn/banc) (Ping timeout: 256 seconds)
[06:37:42] *** Joins: unixpro1970 (~unixpro19@c-67-168-1-124.hsd1.wa.comcast.net)
[06:37:43] *** Quits: alch (~alch@bo-18-147-149.service.infuturo.it) (Read error: Connection reset by peer)
[06:37:46] *** Joins: f__ (~f@2607:f598:bbda:220:7e6e:9187:e1a9:9af3)
[06:37:51] *** Quits: euandreh (~euandreh@191.181.59.160) (Ping timeout: 256 seconds)
[06:38:13] *** Quits: reedrichards (~f@2607:f598:bbda:220:d0a1:152d:dabf:66e6) (Remote host closed the connection)
[06:39:11] *** Quits: kurahaupo (~kurahaupo@115.69.27.211) (Ping timeout: 260 seconds)
[06:40:07] *** Joins: pizdets (~pizdets@183.182.110.38)
[06:40:49] *** Joins: kurahaupo (~kurahaupo@115.69.27.211)
[06:42:18] *** Joins: alch (~alch@pa-18-172-83.service.infuturo.it)
[06:42:25] *** Joins: smeso (~smeso@user/smeso)
[06:44:55] *** Quits: bertvvvs (~bertvvvs@user/bertvvvs) (Quit: Y'all have a nice day.)
[06:48:16] *** Quits: hashfunc159a (~user@2601:5c0:c280:7090:4533:6252:8e32:243) (Remote host closed the connection)
[06:51:15] *** Joins: banc (banc@gateway/vpn/airvpn/banc)
[06:51:25] *** Quits: FluffyMask (~masque@user/fluffymask) (Quit: WeeChat 3.5)
[06:51:30] *** Joins: zer0x (~zer0x@1.55.14.27)
[06:52:57] *** Joins: xiongxin (~Thunderbi@117.136.33.222)
[06:57:03] *** Quits: fossforus (~stan@69-218-221-16.lightspeed.rlghnc.sbcglobal.net) (Quit: Leaving.)
[06:57:03] *** Quits: xiongxin (~Thunderbi@117.136.33.222) (Read error: Connection reset by peer)
[06:57:40] *** Quits: seifeslimene (~seifeslim@102.158.105.22) (Ping timeout: 250 seconds)
[06:57:52] *** Joins: fossforus (~stan@69-218-221-16.lightspeed.rlghnc.sbcglobal.net)
[06:58:03] *** Joins: xiongxin (~Thunderbi@2409:8955:3894:25d6:2bd8:ade2:1163:8d53)
[06:59:15] *** Quits: unixpro1970 (~unixpro19@c-67-168-1-124.hsd1.wa.comcast.net) (Ping timeout: 260 seconds)
[06:59:31] *** Quits: supajerm (~supajerm@gateway/vpn/pia/supajerm) (Remote host closed the connection)
[06:59:40] *** Quits: kurahaupo (~kurahaupo@115.69.27.211) (Ping timeout: 246 seconds)
[07:00:07] *** Joins: unixpro1970 (~unixpro19@c-67-168-1-124.hsd1.wa.comcast.net)
[07:01:16] *** Quits: xiongxin (~Thunderbi@2409:8955:3894:25d6:2bd8:ade2:1163:8d53) (Client Quit)
[07:01:35] *** Joins: xiongxin (~Thunderbi@2409:8955:3894:25d6:2bd8:ade2:1163:8d53)
[07:02:22] <pragma-> fizzie: fixed the time-outs
[07:03:53] *** Joins: kurahaupo (~kurahaupo@115.69.27.211)
[07:08:06] *** Quits: nostar (~nostar@68.51.221.108) (Quit: Leaving)
[07:08:33] *** Quits: kurahaupo (~kurahaupo@115.69.27.211) (Ping timeout: 260 seconds)
[07:10:25] *** Joins: euandreh (~euandreh@2804:14c:33:9fe5:ac31:7ac1:bab2:710d)
[07:15:13] <pragma-> smh
[07:15:19] <pragma-> it was such a simple thing too
[07:16:26] *** Quits: eroux (~eroux@102-65-72-61.ftth.web.africa) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[07:20:50] *** Joins: rawley (~rawley@216-197-141-102.nbfr.hsdb.sasknet.sk.ca)
[07:21:30] *** Quits: Ox000 (~jy@74.215.12.46) (Remote host closed the connection)
[07:27:46] *** Quits: pulse (~pulse@user/pulse) (Quit: rebootin)
[07:27:49] *** Quits: slidercrank (~slidercra@user/slidercrank) (Ping timeout: 250 seconds)
[07:28:45] *** Joins: wardrunal (~goose@167.179.114.36)
[07:29:11] *** Joins: pulse (~pulse@user/pulse)
[07:29:37] *** Joins: llh (~UPP@user/llh)
[07:30:16] *** Quits: Macbethwin (~chargen@D964062A.static.ziggozakelijk.nl) (Remote host closed the connection)
[07:30:37] *** Joins: Macbethwin (~chargen@D964062A.static.ziggozakelijk.nl)
[07:31:24] *** Quits: xiongxin (~Thunderbi@2409:8955:3894:25d6:2bd8:ade2:1163:8d53) (Quit: xiongxin)
[07:31:25] *** Joins: xiongxin1 (~Thunderbi@117.136.33.222)
[07:32:12] *** Joins: frost (~frost@user/frost)
[07:33:44] <pragma-> smh, "0" is false in Perl.
[07:33:45] *** xiongxin1 is now known as xiongxin
[07:33:53] <pragma-> A string literal of length 1. False.
[07:33:55] * pragma- mutters.
[07:34:10] <pragma-> I mean, I already knew that too, but yeah, that was the problem.
[07:34:51] *** Joins: mixfix41 (~homefame@user/mixfix41)
[07:36:28] <pragma-> If the vm output was "0" without a newline, it was treated as a false value and discarded. So it timed-out. But had it been `printf("%d\n", red)` instead, with the newline, the vm would have output "0\n", which is a true value and is happily passed along to IRC.
[07:36:30] * pragma- shakes his head.
[07:37:04] <pragma-> So now I just always add a final newline to all vm output. Bam, problem solved.
[07:37:05] * pragma- lazy.
[07:37:21] *** Quits: coaxing (~coaxing@user/coaxing) (Quit: WeeChat 3.4.1)
[07:37:43] *** Quits: SaltHilStroller_ (~SaltHillS@206.223.160.26) (Ping timeout: 260 seconds)
[07:41:09] *** Joins: eddybilley (~freddieti@2a02-a454-7f89-1-2c34-c506-64df-e969.fixed6.kpn.net)
[07:41:45] *** Joins: mahmutov (~mahmutov@5.176.5.211)
[07:41:45] *** Quits: xiongxin (~Thunderbi@117.136.33.222) (Read error: Connection reset by peer)
[07:42:03] <pragma-> It wasn't that obvious to track down. It wasn't actually a string literal "0", but the value "0" returned from the vm and stored in a variable. The code looked fine at a glance. Had to trace the data in a debugger to see what was going on. Fun times.
[07:42:14] *** Joins: kurahaupo (~kurahaupo@115.69.27.211)
[07:42:36] <pragma-> Dynamic languages, never again.
[07:43:04] <pragma-> I long for optional type annotations!
[07:43:05] *** Joins: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net)
[07:43:24] <Juliu> Types are useless
[07:43:29] <pragma-> lies
[07:43:41] <Juliu> You only think it's a lie because you don't understand it
[07:44:26] <pragma-> You only think they're useless because you don't understand it
[07:44:41] <Juliu> I understand types
[07:44:51] <pragma-> I understand types
[07:45:08] <Juliu> But they are not needed and actually counterproductive, only that most people can't see it yet
[07:45:38] <Juliu> Like how most people can't see that all programming languages are fundamentally wrong in the way we program
[07:45:52] *** Quits: eddybilley (~freddieti@2a02-a454-7f89-1-2c34-c506-64df-e969.fixed6.kpn.net) (Ping timeout: 260 seconds)
[07:46:16] <pragma-> So we should all use the untyped lambda calculus?
[07:46:34] *** Quits: mad_enz (~mad_enz@lnsm4-toronto12-50-101-118-206.internet.virginmobile.ca) (Ping timeout: 246 seconds)
[07:46:35] <Juliu> Yes, lambda calculus is way better
[07:46:52] <pragma-> typed lambda calculus is even better!
[07:46:57] <Juliu> But that only refers to my first sentence. My sencond sentence is not even solved by the lambda calculus
[07:47:30] <Juliu> Types might have a point if you store data, for convenience sake. But not when you pass variables around and such things
[07:47:42] <pragma-> (with lots of type inference, naturally)
[07:47:52] <pragma-> imagine not using type inference in 2022.
[07:48:17] <Juliu> Yes, that is what I imagine. But not 2022, but more like in 2035, when more people finally realized how dumb types are
[07:49:04] <nitrix> How do you add something like Triangle + 5 + "Hi!"?
[07:49:16] <Juliu> Types are a concept that was necessary before we had compilers that could figure out what type it is and what method I mean, without me telling the compiler explicitly by writing it in my code
[07:50:06] *** Joins: Trot9 (~Trot@107.147.149.155)
[07:50:13] <pragma-> You seem to be talking about explicit verbose type annotations rather than types themselves.
[07:50:36] <Juliu> nitrix, that would call the + operator on Triagle with parameter 5, and the definition of this operator depends on the type of Triabgle. Something the compiler is perfectly able to determine itself
[07:50:54] <pragma-> So types are necessary!
[07:51:29] *** Quits: kurahaupo (~kurahaupo@115.69.27.211) (Ping timeout: 246 seconds)
[07:51:40] <Juliu> pragma-, no, they are not. It's just a convenient way to organize things. When you pass a variable around, there is absolutely no need to tell the compiler what type it is
[07:51:45] *** Quits: Trot (~Trot@107.147.149.155) (Ping timeout: 256 seconds)
[07:51:45] *** Trot9 is now known as Trot
[07:52:04] <Juliu> You can also do it without types, as the lambda calculus proves, for example
[07:52:29] <pragma-> And you lose your sanity because you lose all error-checking and sane handling of values.
[07:52:35] *** Joins: kurahaupo (~kurahaupo@115.69.27.211)
[07:52:59] <Juliu> Why would I tell the compiler what type my variable is when I pass it to a function? I also do not tell the compiler what unit that variable is measuring in, for example. It's something that the programmer should know, for example by naming the variable in such a way that it is clear to him
[07:53:28] *** Joins: mzxtuelkl__ (~mzxtuelkl@user/mzxtuelkl)
[07:53:28] <Juliu> If you are too dumb to name your variables in a wise way, that's your problem
[07:53:40] <pragma-> Programmers are very mistake-prone, especially when multiple programmers are working on the same giant code base.
[07:54:06] <pragma-> Ah yes, Hungarian notation.
[07:54:31] <Juliu> I am not talking about hungarian notation. No one is using that anyway. I am talking about names that make sense in the context you're in
[07:55:36] <Juliu> And each time I tell this to people, they think I am talking about runtime type evaluation, which is totally not what I mean. All this can be done automatically at compile time
[07:55:53] <Juliu> Types are simply not needed
[07:56:00] <pragma-> Maybe you should use more vocabulary when you tell this to people.
[07:56:19] <Batzy> Juliu: but it makes error checking easier
[07:56:35] <Batzy> you can see errors at compile time more easily
[07:56:45] <Batzy> also if other people read your code, it makes that easier too
[07:57:05] *** Quits: mzxtuelkl_ (~mzxtuelkl@user/mzxtuelkl) (Ping timeout: 246 seconds)
[07:57:06] <Juliu> Batzy, how? You would get the exact same error messages even if you don't explicitly stated the types in your code
[07:57:08] *** Quits: f__ (~f@2607:f598:bbda:220:7e6e:9187:e1a9:9af3) (Remote host closed the connection)
[07:57:14] *** Joins: reedrichards (~f@2607:f598:bbda:220:e03d:1631:839e:8c70)
[07:57:17] <pragma-> but not until runtime
[07:57:22] <pragma-> and not until the code path finally gets hit
[07:57:24] *** Quits: kurahaupo (~kurahaupo@115.69.27.211) (Ping timeout: 272 seconds)
[07:57:33] <Juliu> pragma-, wrong. The type is evaaluated at compile time
[07:57:35] *** Joins: neshpion (~neshpion@gateway/tor-sasl/neshpion)
[07:57:47] <pragma-> if 99% of the time is spent in the happy path and it doesn't hit your sad path ... you won't run into the bug for a long time.
[07:57:52] <Batzy> Juliu: yeah im curious what PL you're using that has no types and gives you compile time error messaging in detail
[07:58:13] <dave0> happy paths makes happy programmers
[07:58:43] <Juliu> Batzy, I am mostly using C++ in a quite C like style, since then I have the best of both worlds. What I'm talking about is something else. I never said a good programming language would exist
[07:58:43] *** Joins: kurahaupo (~kurahaupo@115.69.27.211)
[07:59:15] <Batzy> those both make you say your type?
[07:59:23] <Juliu> Batzy, and as my second statement said, even if you had the types in such a way as I described, it would still not solve the problem that all current programming languages have, namely that they are all fundamentally wrong
[07:59:37] <pragma-> C++ has some inference capability, at least.
[07:59:38] <Batzy> what's wrong with programming languages?
[07:59:49] <Batzy> pragma-: it does
[07:59:57] <Batzy> for example the "auto" keyword
[08:00:02] <Juliu> Batzy, I am forced to use types in C++ (as long as I dont use lambda calculus for everything, which would ruin the point of C++ in the first place)
[08:00:14] <dave0> i think Juliu is doing an april fools day prank
[08:00:22] <Juliu> Batzy, yes, if auto would work in the definition of a method, then that's what I mean
[08:00:51] <Juliu> dave0, oh, I did not consider it's April 1st. Damn, you could have fooled me and I would not have noticed it
[08:00:51] <pragma-> Once again, I think you're confusing type annotations with types themselves.
[08:01:12] <Batzy> i want to know the whole "PLs are all wrong" argument though
[08:01:23] <Juliu> pragma-, well, both is not needed. As I said earlier, one of those has a point, one is completely useless and counter-productive
[08:01:35] *** Joins: Trot4 (~Trot@107.147.149.155)
[08:01:38] *** Quits: Trot (~Trot@107.147.149.155) (Ping timeout: 260 seconds)
[08:01:38] *** Trot4 is now known as Trot
[08:01:44] <pragma-> which is which, will we ever know?
[08:01:50] <Batzy> oh wtf this is the C channel, i thought this was math
[08:01:55] *** Quits: reedrichards (~f@2607:f598:bbda:220:e03d:1631:839e:8c70) (Remote host closed the connection)
[08:01:58] *** Quits: soapsudsxx (~soapsudsx@209.221.40.145) (Ping timeout: 246 seconds)
[08:02:13] *** Joins: reedrichards (~f@2607:f598:bbda:220:ec59:469f:c7e5:9ad4)
[08:02:24] <Juliu> Batzy, ok, but this has nothing to do with types. Here you go: All programming languages tell the computer in one way or the other what to do. But this is fundamentally wrong. What we really would want (and which is sadly not even known to most programers) is that we tell the computer what we want, not how to get it
[08:03:23] *** Joins: xiongxin (~Thunderbi@2409:8955:3894:25d6:2bd8:ade2:1163:8d53)
[08:04:07] *** Quits: rawley (~rawley@216-197-141-102.nbfr.hsdb.sasknet.sk.ca) (Remote host closed the connection)
[08:04:23] <Juliu> For example in my fictional but optimal programming language, a sorting algorithm would look like this (but in a formal way of course): Check that all input numbers are in the output, check that no more numbers are in the output than in the input, check that for each number the next number is larger or equal
[08:04:36] <Batzy> well i mean people are working on that
[08:04:41] <Batzy> but it's not how computing evolved
[08:04:41] <pragma-> Your language is verbose af.
[08:05:05] *** Joins: kurahaupo_ (~kurahaupo@pa49-182-76-6.pa.qld.optusnet.com.au)
[08:05:14] <pragma-> Juliu: so, what do you think of APL?
[08:05:28] <Juliu> Batzy, well, there is a slight (in fact gigantic so far) problem with my wish: It would require to solve NP-hard problems efficiently. BUT maybe one day we can do that, and then finally get better programming languages that are not fundamentally wrong
[08:06:12] <Juliu> But it's interesting how many programmers don't even notice that programming languages are fundamentally wrong so far
[08:06:14] <pragma-> https://computerhistory.org/blog/the-apl-programming-language-source-code/?key=the-apl-programming-language-source-code
[08:06:22] <Batzy> Juliu: maybe at the scope you're talking about. But the scope we implement those sorts of things today is much smaller
[08:06:30] <pragma-> https://computerhistory.org/wp-content/uploads/2012/10/APLSC_bubble_sort.jpg
[08:06:40] <Juliu> pragma-, what do you mean by verbose?
[08:07:01] <pragma-> I was jesting that your language was verbose English prose.
[08:07:05] <Juliu> Batzy, I do not quite know what you mean
[08:07:49] <Juliu> pragma-, I also don't understand what you mean. Like I said, my programming language would be formal, not English sentences. I just wrote the sentences so you guys know what the actual code would look like
[08:08:01] <pragma-> Yes, it was a lame jest.
[08:08:08] <Juliu> pragma-, I dont understand
[08:08:13] <pragma-> I amused myself, though, and that's what counts.
[08:08:22] <pragma-> Juliu: never-mind! I was amusing myself!
[08:08:32] <Juliu> pragma-, you confused me, but ok
[08:08:48] *** Quits: kurahaupo (~kurahaupo@115.69.27.211) (Ping timeout: 272 seconds)
[08:09:02] <Juliu> Anyway, as you guys can see, I am not doing an April fools joke, and what I say is actually true and makes sense. Only that we are not this far yet
[08:09:05] <pragma-> I was taking your English sentences as literal code examples of your language.
[08:09:34] <Juliu> pragma-, no, as I said, it would be formal for practical reasons
[08:09:45] <pragma-> Yes, I know that. That's why it was a lame jest, but it still entertained me.
[08:10:04] <Juliu> pragma-, but actually if it's formal or sentences is not the point here. The point is that current programming languages tackle programming from the wrong side
[08:10:14] <dave0> prolog it
[08:10:24] <Juliu> dave0, that's still not what I mean
[08:10:31] <Juliu> I think
[08:10:39] *** Quits: FlipFlop (~FlipFlop@user/fl1pfl0p) (Ping timeout: 260 seconds)
[08:10:49] <Juliu> Since prolog definitely does not solve NP-hard problems at compile time, or does it? I doubt that
[08:11:06] *** Joins: fe23 (~fe23@2409:8a34:466:6010:751a:4e06:5d2e:2a0f)
[08:11:25] <pragma-> So, have you looked at APL?
[08:11:49] <pragma-> I linked a pretty good article on it.
[08:12:03] *** Joins: ndut_ (~ndut@2001:448a:1082:fe6f:1573:3e90:c7b6:794a)
[08:12:34] <dave0> the only apl i can remember is  +/1 2 3 4 5
[08:12:51] <Juliu> pragma-, not yet
[08:13:21] <pragma-> Juliu: https://computerhistory.org/blog/the-apl-programming-language-source-code/
[08:13:27] *** Quits: kitsunenokenja (~kitsunech@68.91.220.96) (Ping timeout: 260 seconds)
[08:14:40] <Juliu> pragma-, instead of letting me read through the whole hisotry of APL, why not tell me what aspect you mean
[08:15:02] <pragma-> All of it.
[08:15:10] <pragma-> The whole language is unique.
[08:15:22] <pragma-> It might give you food for thought.
[08:16:03] <Juliu> Btw, I can easily prove that my desired programming language would have to solve NP-hard problems at compile time: If I write code that tells what I do NOT want and then expect the program to come up with an output, that would be the same as solving SAT, which is an NP-hard problem
[08:16:17] <Juliu> So I doubt that there is such a programming language yet
[08:16:31] <pragma-> So basically you interpreted the entire program as you compile it.
[08:17:03] <Juliu> No. I solve an NP-hard problem that converts what the programmer wants into what the computer should do to achieve that
[08:17:09] <pragma-> If it has a loop that does a billion iterations, your compiler has to do a billion iterations to make sure the "types" don't need to be there.
[08:17:31] <Juliu> pragma-, why are you still talking about types?
[08:17:47] <pragma-> I thought we all were.
[08:17:55] *** Quits: marcj (~marc@205.175.215.11) (Remote host closed the connection)
[08:18:17] <Juliu> What? I said several times that the later issue about all programming languages being fundamentally wrong has nothing to do with types or no types
[08:18:42] <pragma-> So what's wrong with them?
[08:18:57] <pragma-> With all programming languages.
[08:19:01] <pragma-> Even APL.
[08:19:04] <Juliu> pragma-, scroll up and read what I wrote
[08:19:08] <pragma-> Even languages you don't know anything about.
[08:19:16] *** Joins: marcj (~marc@205.175.215.11)
[08:19:30] <Juliu> Yes, even languages I do not know at all are fundamentally wrong, as I just proved
[08:20:41] *** Quits: dogbert2 (~Bill@ip70-170-79-7.lv.lv.cox.net) (Remote host closed the connection)
[08:20:56] *** Joins: dogbert2 (~Bill@ip70-170-79-7.lv.lv.cox.net)
[08:21:02] <roger> ... never to late to learn Assembly/ASM!
[08:21:18] <Juliu> roger, still fundamentally wrong
[08:21:55] <pragma-> roger that, roger. what's our vector, victor?
[08:22:16] *** Quits: reset (~reset@user/reset) (Quit: reset)
[08:22:19] <dave0> ham on 2, hold the mayo
[08:22:57] <Juliu> Why am I always the only one noticing such fundamental things? And why do most people not even understand it when you explain it?
[08:23:18] <dave0> you're ahead of your time
[08:23:52] <pragma-> If most people aren't understanding it, maybe you're not explaining it well enough.
[08:24:41] <pragma-> It wasn't clear to me if you were talking about types or type annotations. Apparently it was something else altogether!
[08:24:56] <Juliu> dave0, I know. There is a reason I invented an algorithm that no one so far was able to come up with
[08:25:31] *** Quits: xiongxin (~Thunderbi@2409:8955:3894:25d6:2bd8:ade2:1163:8d53) (Ping timeout: 256 seconds)
[08:25:41] <Juliu> pragma-, maybe. Or maybe they are so used to thinking the wrong way that it's really hard for them to understand that their thinking is already wrong at its very core
[08:26:07] *** Joins: nostar (~nostar@2601:406:4100:34d:8f4:5ea7:30b2:b7e6)
[08:26:09] <pragma-> Why not both?
[08:26:13] <Juliu> Btw, I'm sorry we got here, since this has clearly nothing to do with just C
[08:26:29] <Juliu> pragma-, I never said it can't be both :)
[08:26:58] <Juliu> But I actually think that I'm good at explaining, if people would just listen
[08:27:44] <Juliu> Anyway, since my language is fictional and does not work with out current abilities, it might just stay a dream
[08:27:51] <Juliu> *our
[08:28:32] <Juliu> I mean, yes, it would work of course even now. It would just take as long as the universe is old to compile a program
[08:28:42] *** Joins: cdman (~dcm@user/dmc/x-4369397)
[08:34:13] *** Joins: xiongxin (~Thunderbi@2409:8955:3894:25d6:2bd8:ade2:1163:8d53)
[08:34:25] *** Joins: ironman (~ironman@2405:201:1010:b051:9f16:af8b:1612:56e5)
[08:35:03] *** Quits: ndut_ (~ndut@2001:448a:1082:fe6f:1573:3e90:c7b6:794a) (Read error: Connection reset by peer)
[08:36:06] *** Joins: malina (~malina@user/malina)
[08:37:29] <dave0> tell it to write a compiler for itself
[08:38:41] <Juliu> Even if you do that, you would need a first compiler to compiler a new compiler that is written in this new language
[08:39:25] <nitrix> The few dynamic languages that would categorize as "not having a type system" are said to be Unityped, that is, it's not that there aren't any types, but that everything has the same broad union type.
[08:40:02] <nitrix> If you're familiar with universal quantification, this is the direct :: forall a. a.
[08:40:08] <Juliu> dave0, but yes, one you have found an algorithm to solve the NP-hard problems efficiently, you can indeed use this algorithm to come up with other algorithms that solve NP-hard problems, maybe even in a more efficient way
[08:40:22] <caze> You don't say.
[08:40:49] <Juliu> nitrix, if everything is the same, everything is nothing
[08:41:21] <pragma-> That's what I say.
[08:42:22] <pragma-> Imagine existing in perpetual whiteness. Yes, the color of nothing is white.
[08:42:36] <pragma-> Because nothing is everything.
[08:42:38] *** Quits: roger (~rogerx@user/roger) (Quit: leaving)
[08:42:42] <Juliu> pragma-, there is no color if everything has the same color
[08:42:58] <nitrix> Emphasis on the union type. While there is a single type, there's also something known as multiple/dynamic classification.
[08:43:27] <Juliu> nitrix, as long as that does not mean during runtime
[08:44:06] <Juliu> I mean, theoretically there is no drawback in calculating the type during runtime. It's equally fast. But in practice we all know it's way slower
[08:44:16] *** Quits: Trot (~Trot@107.147.149.155) (Ping timeout: 272 seconds)
[08:44:38] <pragma-> The draw back is that you don't find out about the error until the path is hit.
[08:45:12] <nitrix> The mechanism is tied to semantics. As long as the semantics are satisfied, it can be achieve either at compile time (with known static invariants) or a runtime (for the unknown variants).
[08:45:15] <Juliu> pragma-, as I said multiple times, I am not suggesting runtime type evaluation. But compile time type evaluation, as you are used to it
[08:45:31] <pragma-> We were just fucking talking about runtime.
[08:45:59] <Juliu> nitrix, yes, but so many people do not seem to understand that you can evaluate a dynamic type at compile time as well
[08:46:17] <Juliu> pragma-, I never talked about runtime, as I stated like 5 times already
[08:46:24] <pragma-> By including "drawback" in my response, I'm clearly replying to your statement claiming that there are no runtime drawbacks...
[08:47:17] <pragma-> That comma probably shouldn't be there.
[08:47:21] <Juliu> pragma-, I said there is no theoretical runtime drawback, which is true, since you can evaluate the type at runtime in O(1) simply by storing the type with each variable, as for example C++ does it for virtual types
[08:47:53] <pragma-> And I'm replying that performance isn't the only consideration.
[08:48:04] *** Quits: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br) (Ping timeout: 272 seconds)
[08:48:24] <Juliu> pragma-, that is correct. But since I never was intending to do anything at runtime, your concern does not hold for my no-type suggestion
[08:48:45] <pragma-> Well, I wasn't talking about that.
[08:48:50] <Juliu> ok
[08:49:01] <nitrix> Have you decided to start learning C, by the way?
[08:49:10] <Juliu> Who?
[08:49:31] <nitrix> Who has been stealing all the attention for the past hour?
[08:49:40] <Juliu> pragma- ?
[08:49:48] <dave0> busted!
[08:49:49] <pragma-> I lol'd irl, ngl.
[08:49:57] <nitrix> pragma- barely says one or two lines a day.
[08:50:07] <Juliu> nitrix, that's sad
[08:50:30] <pragma-> They make the lines more valuable!
[08:50:37] <nitrix> He's active on other channels. #c is a weird place to talk about your type delusions.
[08:50:53] <Juliu> I forced no one to give me any attention. And it also does not look like there was a different topic at the moment that I am distracting
[08:51:36] <Juliu> nitrix, well, he started to talk about types, so that I how we ended up here. And I already said that it has little to do with just C. And those are not delusions but facts
[08:52:21] <nitrix> Oh, sorry, I didn't see just how wrong I was. That really cleared things up now that you got the last word.
[08:52:41] *** Quits: neshpion (~neshpion@gateway/tor-sasl/neshpion) (Quit: neshpion)
[08:52:51] <fossforus> we already have this, it's called a forward declaration; though I guess that still resolves every code path to some type
[08:52:58] <fossforus> idk what usecase you're even trying to address at that point though
[08:52:59] <Juliu> nitrix, then maybe you should have paid attention during the last 30 minutes. I think you definitely do not want me to repeat everything again
[08:53:09] <nitrix> Entertain me.
[08:53:29] <nitrix> I feel like I have a pretty good grasp of category theory, type theory and compiler design.
[08:54:07] <Juliu> fossforus, resolving is not the problem. It's actually something I would also want since it has advantages (Of course besides virtual types which would still be evaluated at runtime, but that's a different topic)
[08:54:25] <fossforus> if the universe is deterministic nothing is determined at runtime anyways
[08:54:47] <Juliu> nitrix, my talk about how all existing programming languages are fundamentally wrong did not entertain you enough?
[08:55:07] <Juliu> fossforus, the universe might very well be deterministic
[08:55:35] <nitrix> Juliu, I'll admit I didn't listen to most of it, knowing your background and your little credibility you have left here.
[08:56:00] <Juliu> nitrix, just because you guys never understand me, doesn't mean it's my mistake
[08:56:10] <pragma-> It might, though.
[08:56:24] <Juliu> pragma-, you would be able to find out if you listened
[08:56:36] <Juliu> dave0 understood me, I think
[08:56:38] <caze> Juliu: pragma is deaf.
[08:56:43] <pragma-> If 90% of your audience is misunderstanding you, maybe you're not good at talking.
[08:56:45] *** Joins: f__ (~f@2607:f598:bbda:220:57fe:83b3:3d5e:6304)
[08:56:50] <Juliu> caze, literally?
[08:57:08] <caze> Juliu: Yes.
[08:57:10] <Juliu> pragma-, or maybe 90% of my audience is not really listening or just dumb
[08:57:25] <Juliu> caze, well, since I am not literally talking, that should not be a problem
[08:57:28] <pragma-> Why waste time talking to people who aren't listening to you?
[08:57:35] *** Quits: reedrichards (~f@2607:f598:bbda:220:ec59:469f:c7e5:9ad4) (Remote host closed the connection)
[08:57:58] <Juliu> pragma-, since you always replied, I assumed you would listen. Apparently it was my mistake to assume that you are not insane
[08:57:59] <fossforus> pragma optimizes the chat
[08:58:23] *** Quits: KimK (~KimK@2600:8803:740b:4700:4a5b:39ff:fe0b:57d2) (Ping timeout: 256 seconds)
[08:58:29] <pragma-> Wait, are you calling me insane now?
[08:58:33] * pragma- blinks.
[08:58:38] <pragma-> That escalated rapidly.
[08:58:51] <Juliu> pragma-, constantly replying to someone whom you are not listening to is not insane?
[08:59:32] *** Joins: ndut (~ndut@2001:448a:1082:fe6f:28ea:e1f8:1adb:bb6a)
[08:59:47] <pragma-> Well, I'm certainly losing my interest in listening now.
[08:59:55] <nitrix> I'm generally quite receptive with ideas that challenges the status quo, especially when the person is eager about them. After all, they had to convince themselves first to believe what they believe, so walking the same path of their thought process can be very educative.
[09:00:14] <Juliu> pragma-, well, you don't have to. It seems you did not listen much before anyway, so that's ok
[09:00:21] <nitrix> But I think the problem here is you're unable to have people walk your thought process. I don't even think you know what thought process lead your to your current beliefs.
[09:01:26] <Juliu> nitrix, well, the first problem seems to be that I talked about 2 completely different things at the same time, i.e. 1. types vs no types and 2. why programming languages are fundamentally wrong and how they really should be like
[09:01:31] <pragma-> He seems to be more interested in telling people that they're not listening to him instead of simply explaining himself more lucidly.
[09:01:52] <fossforus> Juliu: bruh we already have void though
[09:01:53] <pragma-> I wonder if he stamps his feet.
[09:02:15] *** Joins: adip (~adip@aedz200.neoplus.adsl.tpnet.pl)
[09:02:17] <Juliu> pragma-, I think I explained everything well enough and several times. I do not understand what you guys are not understanding. It's all so obvious to me
[09:02:55] <pragma-> I'm happy it's obvious for you. It must be so frustrating not being able to include others in your enlightenment.
[09:03:15] <pragma-> You must be so lonely.
[09:03:19] <Juliu> fossforus, and you can write something like  foo(void x) { x.dostruff(); }  and it will determine what type x is at compile time and call the right dostuff for each time you call foo ? I doubt that
[09:03:45] <fossforus> types are literally different quantities of bytes
[09:03:51] <Juliu> pragma-, yes, other people are frustrating me a lot, that's true
[09:03:54] <fossforus> unless you talk to js weirdos that tell you types are structs with function pointers
[09:04:00] <dave0> i understood nothing
[09:04:06] <nitrix> Juliu, We don't have the insights that you have. We did not come up with the same conclusions you did. You can't just say "my conclusion is right and yours is wrong" without expanding on them, that's not going to convince anyone.
[09:04:10] <pragma-> dave0: settle down Socrates
[09:04:11] <Juliu> dave0, liar
[09:04:27] <caze> Diogenes
[09:04:34] <fossforus> C deez nuts
[09:04:45] <Juliu> nitrix, sure. That is why I explained everything quite slowly for like an hour, and even proved some things
[09:05:34] <pragma-> in C, types are more or less bytes and stuff. in more interesting languages, types are more descriptive.
[09:05:46] <nitrix> Don't be ridiculous. That's not what a proof looks like. You didn't provide any axioms.
[09:06:14] <fossforus> pragma-: once post-modernism reaches programming is when I lose interest
[09:06:30] <pragma-> you've got to shift your paradigm every now and then!
[09:06:39] <fossforus> well, you are pragma
[09:06:49] <fossforus> your behavior varies by compiler
[09:06:58] <pragma-> ain't that the truth
[09:07:27] <Juliu> Ok, let me explain it again with example. First the type vs no type topic:  What I want is   foo(x) { x.dostuff(); }  main { TypeA a; TypeB b; foo(a); foo(b); }   and then the compiler should figure out at compile time(!) what type x is each time foo() is called in my code, and hence execute the right dostuff() on x
[09:07:34] <pragma-> hanging with my friends? i'm cool pragma-. hanging with my boss? i'm executive pragma-. hanging with my girl? i'm sexy pragma-.
[09:07:52] <nitrix> Juliu, That's called type inference.
[09:08:01] *** Quits: zsoltiv_ (~zsoltiv@85-235-95-111.naracom.hu) (Ping timeout: 256 seconds)
[09:08:28] <fossforus> C11 has _Generic, by the way
[09:08:39] <fossforus> sounds like you want that or a union
[09:08:52] <fossforus> va_args with a void pointer
[09:08:56] <fossforus> in the latter
[09:08:58] <Juliu> nitrix, as my example shows, except for making it more convenient to cluster how to store data into one package that we call a type, there is zero reason to tell in your code what type a variable is when you pass it to a function
[09:09:19] <nitrix> Juliu, One of the most studied and used algorithm in our field is the Hindley-Milner type inference, which seems to be what you're describing.
[09:09:27] <Juliu> fossforus, well, actually this is not just about C, but in general why types are pretty much useless and often even counter-productive
[09:09:51] <pragma-> Learn you a Haskell for Greater Good
[09:09:52] <fossforus> maybe, though types are sized to computer hardware typically
[09:09:53] *** Quits: mahmutov (~mahmutov@5.176.5.211) (Ping timeout: 260 seconds)
[09:09:58] <nitrix> Juliu, Variables begin with the most general type, `forall a. a` and gets constrained progressively, also monomorphized at the call sites.
[09:10:12] <fossforus> we could just set arbitrary byte sizes (we can with char), but types work the way they do because material reality
[09:10:16] <Juliu> nitrix, I just made the point why types are actually often a dumb idea, but since pragma- (first, and other later) did not understood it, it took like an hour to explain it
[09:10:21] *** Joins: zacts (~zacts@user/zacts)
[09:10:23] <fossforus> s/char/unsigned char/
[09:10:37] <nitrix> Juliu, Are you talking about type _annotations_ or types, period?
[09:10:47] <pragma-> More like took an hour to repeatedly say "As I've just proved" and "You're not listening to me".
[09:11:05] <Juliu> nitrix, I am not talking about C concepts, as I said, but in general
[09:11:11] <nitrix> Juliu, Maybe you aren't aware but nearly all of the functional languages don't require type annotations.
[09:11:40] <pragma-> Nearly all of the languages invented in the last 20 years use inference sensibly.
[09:11:47] <Juliu> nitrix, yes, I brought that up as an exaple for already existing languages that do not even have types, but even that was not understood
[09:11:51] <nitrix> You can literally write `add x y = x + y` and create a function that adds two numbers, whether they're int or double, or floats.
[09:12:01] *** Joins: KimK (~KimK@ip98-186-40-208.ks.ks.cox.net)
[09:12:37] <fossforus> inference rules are generally intuitive, or maybe I've just been using C too long
[09:12:38] <nitrix> It doesn't have type _annotations_, but it still gets a type inferred, because the compiler has to transform the polymorphic function into a monomorphic one.
[09:13:16] <Juliu> nitrix, my point just was that the compiler is able to determine the type of a variable that is passed to a function, even if you do not explicitly write the type in your code. So it's dumb to even require stating the type there
[09:13:31] <pragma-> Even someone as dumb as me could figure out inference in my toy languages.
[09:14:07] <nitrix> Juliu, Yeah, the compiler figuring out the type is called type inference.
[09:14:33] <nitrix> Juliu, It infers what the type is, based on what the body of the function contains and how the function is called.
[09:14:36] <Juliu> nitrix, and somehow I was not understood for over an hour, even though this is pretty easy to understand and as my example shows types are often a dumb idea
[09:14:53] <fossforus> how does that make types dumb
[09:14:59] <nitrix> Well, because that's very different than your previous claim. You claimed programming languages didn't need types.
[09:15:03] *** Quits: Trashlord (~trash@user/trashlord) (Ping timeout: 256 seconds)
[09:15:03] <pragma-> I'm not gonna repeat myself for the umpteenth time.
[09:15:05] <Juliu> So, that was the first topic. The second topic I talked about is why all existing programming languages are fundamentally wrong
[09:15:15] <nitrix> Not having types vs. type inference is completely different.
[09:15:24] <Juliu> fossforus, things that are not of any help and are actually counter-productive are dumb and should be dropped
[09:15:35] <fossforus> Juliu: and replaced with what
[09:16:11] <Juliu> fossforus, nothing. Types are simply not needed. Just cancel them completely, at least in the context I was talking about
[09:16:15] <fossforus> types exist because cpu architectures exist
[09:16:35] <nitrix> Juliu, In the context you just talked about, the types ARE there. Are you sure you understand type inference?
[09:17:04] <nitrix> Juliu, What you omitted (the TYPE ANNOTATIONS), the compiler has to infer (TYPE INFERENCE). Types ARE involved.
[09:17:28] <Juliu> nitrix, yes, the types are there. You just do not state them explicitly. BUT as I also said and as many functional languages show, you do not need types at all actually
[09:17:40] <fossforus> even if the compiler infers 4 bytes without an int specifier, it's still a type
[09:17:44] <fossforus> you just don't have control over it then
[09:17:50] <nitrix> Juliu, Except that you do. There always are types.
[09:17:51] <fossforus> typecasting is one of my favorite features of C
[09:18:01] <Juliu> nitrix, no, there aare not always types
[09:18:01] <fossforus> and weakly typed languages in general
[09:18:31] <pragma-> typepunning, surely
[09:18:47] <nitrix> Juliu, Describe to me the divide function. What arguments does it takes, what does it produces?
[09:19:28] <fossforus> also how do you handle things like bitwise safely if there are no types
[09:19:29] <nitrix> Juliu, Can I divide a chair by the color orange?
[09:19:34] <fossforus> and evaluating it an runtime, no less
[09:19:40] <pragma-> nitrix: with enough DMT
[09:19:47] <fossforus> beginning to sound like uh
[09:19:47] <fossforus> javascript
[09:19:47] *** Quits: pulse (~pulse@user/pulse) (Ping timeout: 260 seconds)
[09:19:50] <fossforus> stringly typed hell
[09:20:25] <fossforus> making computers slow for developer convenience is everything wrong with programming today lol
[09:20:40] <fossforus> well, more tackling patterns instead of how computers work
[09:20:47] <fossforus> post-modern programming
[09:20:54] <Juliu> nitrix, in my example every variable has a type specified at its declaration. So the compiler is perfectly able to tell which variable is of what type. So if I then write a function that operates on variables without me saying what type the variable is, the moment I call this function with a certain variable the compiler is able to easily determine which type this variable has and hence how it should be handles inside of my funciton
[09:21:11] <pragma-> it sure is a lot easier to debug and introspect programs where the types are strings instead of integers
[09:21:17] <nitrix> Yes, but this is type inference you're talking about.
[09:21:20] <Juliu> fossforus, javascript does it at runtime, as far as I know. That is totally not what I am talking about
[09:21:25] <fossforus> --s/comupters/software/
[09:21:28] <nitrix> The compiler finds out what the type is. There is still a type.
[09:21:54] <nitrix> Types are needed. You're saying they aren't which contradicts you.
[09:21:57] <Juliu> nitrix, I do not care how you call it, the comcept will stay the same. And it shows how dumb explicitly stating the type at certain locations is
[09:21:59] <fossforus> Juliu: there's still a type though, it still allocate X bytes for the variable at runtime
[09:22:06] <fossforus> even if you determine it at runtime
[09:22:15] <nitrix> Juliu, What do you mean you don't care? You're trying to be understood, no?
[09:22:21] <pragma-> lol
[09:22:34] <Juliu> fossforus, yes, in my example there still would be a type, correct. But you could also do it completely without types if you wanted to, as some functional programming languages demonstrate
[09:22:49] <pragma-> For the whole hour he was trying to explain that he wasn't confused about type annotations versus types...
[09:22:50] *** Joins: danielcamiel (~danielcam@user/danielcamiel)
[09:22:51] <fossforus> what is a type to you then
[09:23:07] <Juliu> nitrix, I do not care if you call a vacuum cleaner Asdasfkjaf instead. It would still be the same thing
[09:23:21] <pragma-> A rose by any other name would still smell as sweet.
[09:23:25] <nitrix> Juliu, Do you understand that what you're advocating is for not having to write explicitly the type of things with annotations and let a compiler inference what the type should be?
[09:24:29] <Juliu> pragma-, I am not. You guys are confusing two things: 1. Explicitly staing types at certain locations in your code, wich is often a very dumb idea and 2. needing types at all, since types are completely not needed at all if you really wanted to
[09:24:48] *** Joins: kurahaupo (~kurahaupo@115.69.27.211)
[09:24:54] <pragma-> don't forget 3. all programming languages are fundamentally wrong
[09:25:13] <Juliu> nitrix, yes
[09:25:15] <fossforus> objdump seems to indicate that types are in fact at objective locations in my code
[09:25:20] <nitrix> Type annotations are not necessary. Type delarations aren't necessary. Lot of things can be inferred.
[09:25:25] <nitrix> But you'll always have types.
[09:25:42] <Juliu> pragma-, as I said, the "all programming languages being fundamentally wrong" is a completely different topic that has nothing to do with types
[09:25:48] <Juliu> -being
[09:26:00] <Juliu> +being. Sorry, confused
[09:26:16] <nitrix> You claimed that there were no types and that types didn't need to exists, which programmatically and mathematically simply cannot work.
[09:26:40] <nitrix> That's why people couldn't understand you. Because you lack the vocabulary to discuss these things.
[09:26:41] <fossforus> Juliu: what is a type to you, I ask again
[09:26:52] <Juliu> nitrix, as I said like a million times already, if you really want to, then you can get rid of types completely, yes
[09:26:59] <nitrix> NO.
[09:27:10] <Juliu> nitrix, yes. Look at the lambda calculus
[09:27:12] <nitrix> You can get rid of user-defined types.
[09:27:26] <Juliu> You can get rid of the whole concept of types if you want to
[09:27:32] <Juliu> Types are not needed at all
[09:27:43] <nitrix> Structural typing and substructual typing, both don't have to be in the language. I'm familiar with lambda calculus.
[09:28:12] <fossforus> lambda calculus? that thing that is used in languages that are slower than C to fit a design pattern instead of how hardware works?
[09:28:28] <nitrix> Evaluating code requires expressions and values. Not every expression works on every value. There's necessarily a classification of the values necessary.
[09:28:36] <nitrix> A classification of inhabitants is called a type.
[09:28:36] <fossforus> and yes I know what lambda calculus is, it's not scary despite the name
[09:28:36] *** Quits: kurahaupo_ (~kurahaupo@pa49-182-76-6.pa.qld.optusnet.com.au) (Ping timeout: 272 seconds)
[09:28:44] <Juliu> But I was advocating for a milder form, having types (i.e. a destription of how data is stored and how methods operate on those types), but NOT explicitly stating types for parameters, since that can be done automatically and hence is useless and dumb
[09:28:57] <Juliu> fossforus, my last sentence answers your question
[09:29:25] *** Joins: SachieW (~SachieW@240e:47b:c40:3e04:5ac3:5340:9edb:1f5e)
[09:29:38] <caze> Now you're calling them types.
[09:30:09] <fossforus> methods? like a pointer to a function in a struct?
[09:30:20] <Juliu> nitrix, if you are familiar with the lambda calculus, how can you claim that types are necessary? That is simple not true. But I am not completely against types since they are convenient and I am lazy. I am just against explicitly stating types of parameters, since that is dumb
[09:30:55] <Juliu> fossforus, that is only necessary for virtual types
[09:31:12] *** Joins: unlink2 (~unlink@p200300ebcf19f600f31648a859b660c5.dip0.t-ipconnect.de)
[09:31:12] <fossforus> v-virtual types? google time
[09:31:32] <fossforus> oh this is some weird oop thing
[09:31:34] <nitrix> Juliu, Because as opposed to you, I've studied type theory because I was willing to learn about it.
[09:31:52] <pragma-> there is untyped lambda calculus and there is typed lambda calculus.
[09:32:03] <Juliu> fossforus, vitual, as in having one or more virtual methods so that it's decided during runtime which method implementation is called
[09:32:38] <Juliu> nitrix, good for you. Sad that you do not understand even the basics, or that we have do discuss about such simple things for an hour
[09:33:03] <nitrix> Are you familiar with the curry-howard correspondence?
[09:33:08] <Juliu> pragma-, yes, and the untyped lambda calculus proves that types are not needed at all
[09:33:14] <nitrix> It's not a proof.
[09:33:17] <nitrix> That's not what a proof is.
[09:33:23] <pragma-> it proves that it's very error-prone
[09:33:27] <fossforus> Juliu: oh right they talked about that at Saw Con
[09:33:40] *** Quits: SachieW (~SachieW@240e:47b:c40:3e04:5ac3:5340:9edb:1f5e) (Client Quit)
[09:33:49] <Juliu> nitrix, can we finally concluse this simple topic and come to the second topic of why all existing programming languages are fundamentally wrong? Why are we needed that much time for even the most obvious things?
[09:34:05] <nitrix> A proof has axioms and you prove by means of deduction, implication, or contradiction.
[09:35:08] <Juliu> fossforus, and as I (and also pragme-) meantioned several times, virtual types have drawbacks in practive. Which is why I am NOT advocating for that (unless it's needed), but simply for not explicitly stating the type of a parameter in your code and let the compiler at compile time figure out the type on its own
[09:36:07] <Juliu> nitrix, are you intentionally trying to annoy me? Untypes lambda calculus is an example of something that does not need types and hence is a proof for the obvious claim that types are not needed. What is there not to understand about that?
[09:36:14] <Juliu> *Untyped
[09:36:16] <nitrix> Juliu, Are you familiar with intuitionistic logic, simply typed combinatory logic?
[09:36:26] <nitrix> I'm trying to find what you know so we can begin there.
[09:36:51] <nitrix> The ski-combinator of lambda calculus maybe?
[09:37:00] <Juliu> nitrix, why? How is that even relevant? I already proved to you that you had been wrong. Can we please go on? It's annoying as fuck to have to repeat simple things several times
[09:37:20] <nitrix> Because if you did you would realize that not every term in lambda calculus can be applied onto other terms.
[09:37:59] <Juliu> nitrix, well, of course not. In what I suggested that would be called a compiler error. Wow, such a new concept. I bet you have never had that before, right?
[09:38:37] <nitrix> Aka, some are functions. Which, if you were to draw a category, you'd find that they're morphisms between objects.
[09:38:39] <Juliu> If you call x.dostuff() and x is of type TypeA, and TypeA has no dostuff() method, then you would of course get an error during the compilation. Wow, what a surprise
[09:38:51] <nitrix> Aka, a very rudimentary type system.
[09:39:14] *** Joins: reedrichards (~f@2607:f598:bbda:220:9e77:6280:5aba:4a78)
[09:39:16] <nitrix> Rudimentary, yet, very general.
[09:39:22] <Juliu> nitrix, still no reason to explicitly state the type anywhere
[09:39:26] *** Quits: f__ (~f@2607:f598:bbda:220:57fe:83b3:3d5e:6304) (Remote host closed the connection)
[09:40:00] *** Quits: zer0x (~zer0x@1.55.14.27) (Ping timeout: 272 seconds)
[09:40:02] <Juliu> And as my example shows, even in a C++ like programming language it would actually be better to drop the explicit stating of types at a lot of places
[09:40:25] <nitrix> That's fine. Many languages do that.
[09:40:33] <Juliu> So, do you guys finally understood what I was talking about? It's starting to piss me off
[09:40:52] <nitrix> Concatenative languages, functional languages, logic languages, array languages, they almost all drop type annotations.
[09:41:02] <fossforus> no, evaluating things at runtime is slow and harmful
[09:41:04] <fossforus> now have a cookie
[09:41:14] <fossforus> s/things/types
[09:41:22] <nitrix> Forth for example, `1 1 +` adds two numbers together. You don't need type annotations for that.
[09:41:24] <Juliu> nitrix, yes. Which is why I can't understand how it takes over 1 hour to A) understand that types are not needed at all and B) understand that even if you have types, often not explicitly stating them in your code would be better
[09:41:28] <nitrix> Types are still involved though.
[09:41:55] <nitrix> Because you said that were didn't need types and you gave for example lambda calculus.
[09:42:11] <Juliu> fossforus, I will definitely not repeat for the 9th time that I am not talking about runtime evaluation at all. I will just ignore your comments
[09:42:44] <Juliu> nitrix, no, there are no types in untyped lambda calculus, hence the name. Can we please go on, I'm losing my braincells in here
[09:43:37] <Juliu> So, since you hopefully not all understand how dumb types often are (in general or just stating them explicitly, whatever you prefer), can we come to the second topic now?
[09:43:41] <Juliu> *now all
[09:44:14] <Juliu> The second topic was that all programming lanuages are fundamentally wrong. And I just just repeat what I wrote before:
[09:44:22] <nitrix> There are, no user-defined types, in an untyped lambda calculus. It still, has, types.
[09:46:13] <nitrix> Any computable function has a domain and a codomain.
[09:46:27] <Juliu> Damn, I cant find it, so I have to type it again:
[09:46:49] <ndut> ooooooooooooooo
[09:46:56] <ndut> why not code in python
[09:47:00] <ndut> https://docs.google.com/document/d/1a8Iu7NEj6lMpPWmPLjd1coTcE-DxvRQN/edit?usp=sharing&ouid=115099719813834057978&rtpof=true&sd=true
[09:47:01] <candide> Title of ndut's link: Python.0day.xc.Our.doc - Google Docs
[09:47:01] <ndut> :)
[09:47:10] <Juliu> All existing programming languages tell the computer what to do in one way or the other. That is fundamentally wrong. What we actually would want as a programming language is to tell the computer what output we want, not how to get it
[09:47:12] <nitrix> Not every expression can produce valid domains to every possible functions, therefore, you get types.
[09:47:50] <nitrix> Juliu, Do you understand that the division function cannot divide by zero, for example? Its domain simply doesn't include 0.
[09:48:21] <Juliu> nitrix, I will not talk about the trivial type topic anymore. If you guys simply are unable to understand, then it's not my problem
[09:48:31] <fossforus> do you have a project that implements this idea?
[09:48:37] <ndut> you guys don' lik eit
[09:48:45] <ndut> ?
[09:49:11] *** Joins: floatcomplex (~floatcomp@wireguard/tunneler/floatcomplex)
[09:49:17] <nitrix> So the division function cannot accept the usual integers, but has to specifically accept non-zero integers. We're already starting to see domains being created.
[09:49:28] <Juliu> fossforus, what concept? The type thing, or the thing that would fix programming languages being fundamentally wrong?
[09:49:29] <nitrix> They might not have a proper names, but they're there, they exist.
[09:49:39] <ndut> ooooooooooo
[09:49:45] <ndut> what is variable than in C?
[09:49:52] <ndut> which mean ci
[09:50:05] <fossforus> Juliu: yes, surely you have any proof of concept
[09:50:12] <Juliu> fossforus, for what?
[09:50:14] *** Quits: zacts (~zacts@user/zacts) (Quit: Client closed)
[09:50:21] <fossforus> a programming language that isn't flawed in the way you describe
[09:50:28] <Juliu> fossforus, I asked if you mean either A or B, and your answer is Yes. That's not helpful
[09:50:46] <fossforus> a programming language that isn't flawed in the way you describe
[09:51:08] <fossforus> you did say all though, and presumably that means one you would have made as well
[09:52:02] <Juliu> fossforus, well, there are 2 problems with that concept. 1. It would require to solve a NP-hard problem at compile time, and 2. there might be the problem with the halting problem not being decidable.  But both these problems do not mean that existing programming languages are not fundamentally wrong
[09:52:09] *** Joins: ekathva (~ekathva@93-90-58-246.welcomnet.fi)
[09:52:16] *** Quits: ekathva (~ekathva@93-90-58-246.welcomnet.fi) (Remote host closed the connection)
[09:52:33] <Juliu> fossforus, I assume you are not talking about the discussion about types from before
[09:52:44] *** Joins: ekathva (~ekathva@93-90-58-246.welcomnet.fi)
[09:53:12] <Juliu> Great, first pragma- complains that I do not explain well enough, and each time I do he is not listening. Seems it was not my "bad" explanation for the beginning, but his bad listening
[09:55:03] <nitrix> So, out of curiosity, have you been learning C?
[09:55:09] <Juliu> Who?
[09:55:15] <fossforus> joe
[09:55:27] <Juliu> Who's Joe?
[09:55:29] <fossforus> joe mama
[09:55:32] <nitrix> You, Julius, have you been learning C since you last got banned on the channel?
[09:55:36] <Juliu> fossforus, lol
[09:55:47] <Juliu> My mother does not know C
[09:55:48] <nitrix> Last time you were pretty terrible at it and kept saying incorrect things.
[09:55:55] <Juliu> nitrix, I already know C
[09:56:10] <nitrix> All of it?
[09:56:19] <Juliu> nitrix, I do not care if slow-minded people ban me because they are unable to listen and understand
[09:56:46] <nitrix> Well, it's more that there's a topic and we'll have to keep it to C.
[09:57:00] <Juliu> nitrix, only C89/90. No one is using newer Cs anyway
[09:57:05] <nitrix> So if you know C, then perfect for you. Otherwise, ##programming is a better place to discuss your stuff.
[09:57:32] <Juliu> nitrix, well, you asked and I explained. Pretty unfair to complain now
[09:57:58] <jmdaemon> wait is this channel avalable for only discussing C & C concepts or for help with learning C?
[09:58:11] <Juliu> jmdaemon, both?
[09:58:13] <fossforus> both
[09:58:29] <fossforus> source: me seeing what does and doesn't get people banned here
[09:58:43] * Juliu does not care for banning
[09:58:54] *** Joins: mikoto-chan (~mikoto-ch@213.177.151.239)
[09:58:56] <fossforus> source: also hasn't seen anyone get banned here yet
[09:59:00] *** Quits: Enitin (~Enitin@82.180.145.228) (Ping timeout: 272 seconds)
[09:59:26] <Juliu> nitrix, let me ask you this: Now that I explained everything a second time on your demand, did you understand the 2 topics I was talking about?
[09:59:35] <nitrix> It's off-topic.
[09:59:43] * Juliu rolls eyes
[09:59:45] *** Joins: zacts (~zacts@user/zacts)
[09:59:57] <Juliu> Then why do you ask me in the first place to explain everything a second time?
[10:00:17] <Juliu> As i said before, insane
[10:00:18] <nitrix> We're indulgent, but there are 800 people on here, we can't keep being noisy like this. You and me both.
[10:00:47] <Juliu> nitrix, that might be true, but so far no one complained, and it's not as if there was a different topic we would disturb
[10:00:59] *** Joins: Enitin (~Enitin@82.180.145.230)
[10:01:16] <nitrix> People are sometimes hesitant to ask questions to avoid interrupting ongoing conversations.
[10:01:17] <Juliu> All I am asking is if you finally understood me after I put all that energy into explaining everything a second time
[10:01:31] <nitrix> It's irrelevant. Keep it to C please.
[10:01:41] <fossforus> I will read the backlog to the best of my ability
[10:01:45] <Juliu> Most nicknames in hear are dead anyway
[10:02:19] <Juliu> nitrix, first you ask me non C related questions, and when I answer you tell me to keep it to C ? Man, you're a born troll
[10:02:42] *** Quits: zacts (~zacts@user/zacts) (Client Quit)
[10:02:47] <Juliu> fossforus, do you have a C related question?
[10:03:06] <fossforus> sure
[10:03:13] <fossforus> why tf does macos not even support C11
[10:03:24] <Juliu> fossforus, ok, sorry. I didn't mean to keep you from asking your C questions
[10:03:37] <Juliu> Macros?
[10:03:44] <Juliu> or MacOS ?
[10:04:06] <fossforus> apple unix disasterpiece
[10:04:09] <fossforus> the second one
[10:04:12] <Juliu> Because Apple
[10:04:22] <Juliu> It's your own fault if you use Apple products
[10:04:34] <fossforus> I don't, I'm testing on someone else's device trying to make it portable
[10:04:56] <Juliu> Like I said, no one is using newer C versions than C89/90 anyway
[10:05:10] <fossforus> it's actually an opengl project, apparently opengl 3,2 was supposed to be compatible, but glfw won't work on it for the life of me
[10:05:16] <fossforus> I'm using C99
[10:05:23] <fossforus> it's got cool things like compound declarators
[10:05:29] <fossforus> and VLAs (don't use them)
[10:05:50] <Juliu> The people in here do not count. I was talking about acutal projects in the industry
[10:06:24] <nitrix> It used to support only OpenGL 3.2, since Mavericks we have 3.3, 4.0 and 4.1 now.
[10:06:32] <Juliu> What is glfw?
[10:07:02] <fossforus> a portable opengl (and vulkan) window framework
[10:07:19] <fossforus> basically you need it or SDL if you don't want to write ASM for drawing windows
[10:07:22] <ndut> //////////////////////////////////
[10:07:23] <Juliu> Why not use glu (or was it glut, I forgot)?
[10:07:32] <nitrix> fossforus, I personally went with 4.1 https://github.com/nitrix/layman/blob/master/src/window.c#L248-L249
[10:07:39] <ndut> ////////
[10:07:45] <fossforus> glu(t) is dead iirc
[10:07:46] <ndut> m
[10:07:47] <fossforus> maybe not though
[10:08:06] <Juliu> fossforus, well, it works and you would not have to worry about the window crap if you used it
[10:08:07] <ndut> /////////
[10:08:10] <ndut> ./
[10:08:15] <fossforus> nitrix: I actually reverted my project to 3.2 because I read it worked, but it actually works even less
[10:08:17] <pragma-> ,mute ndut
[10:08:17] *** ChanServ sets mode: +o candide
[10:08:18] *** candide sets mode: +q $a:ndut
[10:08:40] *** Quits: ndut (~ndut@2001:448a:1082:fe6f:28ea:e1f8:1adb:bb6a) (Quit: Leaving)
[10:08:50] <nitrix> fossforus, My newer engines are on 3.2 as well, better portability with OpenGL ES and WebGL.
[10:09:01] <Juliu> pragma-, why did you not listen? First you tell me I would explain badly, and when I explain everything again, you again did not listen
[10:09:17] <nitrix> Juliu, Please, stick to C.
[10:09:46] <Juliu> nitrix, I will. I just find it mean that you guys let me put in the work to explain everything again since you did not listen, and then again you would not listen
[10:10:07] <Juliu> fossforus, how about Qt ?
[10:10:08] <nitrix> We entertained you, we got nowhere, now it's time to move on.
[10:10:23] <Juliu> nitrix, you guys are annoying. Like little kids
[10:10:32] <fossforus> I admit it
[10:10:38] <fossforus> I'm just a little boy :(
[10:10:46] *** Parts: floatcomplex (~floatcomp@wireguard/tunneler/floatcomplex) (i tried)
[10:11:02] <fossforus> vomit brain
[10:11:24] <Juliu> fossforus, a little boy who is learning C. Not bad. Maybe a bit too masochistic for my taste, but to each their own
[10:11:52] <nitrix> Ageism isn't really tolerated either here.
[10:11:58] <Juliu> lol
[10:12:02] <Juliu> Troll harder
[10:13:03] <Juliu> fossforus, I suggest you use Glu or Qt
[10:13:10] <fossforus> I'm in my 20's, the individual who had succumbed to tomfoolery was you good sir
[10:13:17] <fossforus> the part about vomit brain was true though :(
[10:13:22] *** Joins: ndut (~ndut@2001:448a:1082:fe6f:28ea:e1f8:1adb:bb6a)
[10:13:52] <Juliu> sorry, I meant Glut
[10:14:20] <Juliu> fossforus, not sure if you're talking to me or nitrix, since I know that you are not a little boy
[10:15:47] *** Joins: ts (~ts@114.254.2.231)
[10:15:58] *** ts is now known as Guest506
[10:16:22] <fossforus> nitrix: either way 4.1 is too new for the crappy 2D game I want to make
[10:16:43] <fossforus> I'd sooner target GLES 2.0 (and by extension MoltenGL), which is what I think I'm going to do
[10:16:50] <Juliu> Use Glut. Don't know why I have to repeat this
[10:16:59] <fossforus> I don't think glut is the issue
[10:17:06] <fossforus> glfw*
[10:17:34] <Juliu> Glut would give you a window without you having to care much about the window crap, and it would probably work platform independent
[10:17:38] *** Quits: ndut (~ndut@2001:448a:1082:fe6f:28ea:e1f8:1adb:bb6a) (Client Quit)
[10:17:54] <Juliu> Otherwise people often use Qt
[10:18:08] *** Quits: llh (~UPP@user/llh) (Ping timeout: 260 seconds)
[10:18:59] *** Joins: llh (~UPP@user/llh)
[10:19:27] *** Quits: Enitin (~Enitin@82.180.145.230) (Ping timeout: 260 seconds)
[10:19:57] <fossforus> also 4.1 will likely just get killed in the next major MacOS release or two; would be better to target MoltenGL and by extension GLES 2.0
[10:20:24] <Juliu> You could use Vulkan
[10:20:34] <fossforus> kill opengl for vendor lockin, very cool apple
[10:20:45] <fossforus> if I don't want to target OpenGL 4.1 I definitely don't want to target vulkan lol
[10:20:48] <fossforus> unless I target both
[10:20:51] <fossforus> which I might
[10:21:18] <nitrix> fossforus, Sounds like a good plan. You can get really far on 3.2. You rarely play with the advanced things like texture lod. It's a lot easier for sure when you do PBR and do IBL lighting, the different illuminances at different roughness levels are stored into the texture lods, but you can emulate it without.
[10:21:25] <Juliu> You expect Apple to be nice and fair?
[10:21:25] *** Quits: reedrichards (~f@2607:f598:bbda:220:9e77:6280:5aba:4a78) (Remote host closed the connection)
[10:21:42] <nitrix> fossforus, It just complicates the GLSL code a little bit.
[10:21:43] *** Joins: reedrichards (~f@2607:f598:bbda:220:fbc4:22c3:1afd:7eab)
[10:22:14] *** Joins: hashfunc929 (~user@2601:5c0:c280:7090:4533:6252:8e32:243)
[10:22:17] <Juliu> Since when can't you play with texture mipmaps even in OpenGL 1.0 ?
[10:22:35] *** Joins: chomwitt (~chomwitt@2a02:587:dc0e:a100:8d19:188:687f:a348)
[10:23:14] *** Joins: Enitin (~Enitin@82.180.145.225)
[10:23:25] <nitrix> You can't sample at a specific level-of-detail earlier than 4.0, textureLod didn't exist.
[10:23:44] *** Quits: kurahaupo (~kurahaupo@115.69.27.211) (Ping timeout: 246 seconds)
[10:24:08] <nitrix> You end up having to bind the different levels to different texture units. It's more cumbersome.
[10:24:13] <Juliu> of course you can. You can calculate each mipmap level manually. You could even put completely different pictures into each mipmap level of a texture
[10:24:23] *** Joins: m4ho (~m4ho@81.20.119.6)
[10:24:44] <nitrix> Julius... this is literally my job.
[10:25:02] <Juliu> nitrix, and not mine as well?
[10:25:12] * nitrix sighs.
[10:25:26] <danielcamiel> perfect match!
[10:26:38] *** Joins: ndut (~ndut@2001:448a:1082:fe6f:28ea:e1f8:1adb:bb6a)
[10:27:24] *** Joins: eroux (~eroux@102-65-72-61.ftth.web.africa)
[10:27:38] <nitrix> You should join ##opengl then, lots of people in need of help frequently there.
[10:28:56] <fossforus> I should join, since finding answers to some things about older versions of opengl has proven to be very annoying
[10:29:20] <Juliu> fossforus, why do you want to sample for different mipmap levels?
[10:29:37] <fossforus> idk, I'm not doing that
[10:29:51] *** Quits: Enitin (~Enitin@82.180.145.225) (Ping timeout: 256 seconds)
[10:30:16] <nitrix> I have a friend BSVino that runs https://docs.gl It had issues, but is now pretty much on par with the official docs but I think it's a lot easier to find what you want.
[10:30:46] *** Joins: Enitin (~Enitin@82.180.145.224)
[10:30:47] <fossforus> oh yeah I use docs.gl all the time
[10:31:19] <fossforus> I wish there was a set of manpages to download
[10:31:29] <fossforus> webdocs are fine, but I'm more used to manpages
[10:32:26] *** Joins: ekathva_ (~ekathva@mobile-access-b04823-216.dhcp.inet.fi)
[10:32:30] <nitrix> fossforus, I mean, you can clone the repo and use it offline too. https://github.com/BSVino/docs.gl
[10:32:31] <candide> Title of nitrix's link: GitHub - BSVino/docs.gl: OpenGL Reference Documentation
[10:32:55] *** Quits: hashfunc929 (~user@2601:5c0:c280:7090:4533:6252:8e32:243) (Remote host closed the connection)
[10:33:50] *** Quits: ekathva_ (~ekathva@mobile-access-b04823-216.dhcp.inet.fi) (Read error: Connection reset by peer)
[10:34:02] <fossforus> yeah, but it outputs static html, not mandoc
[10:34:18] <fossforus> it's not the same if it's not in the hideous monospaced terminal font
[10:34:43] <fossforus> I guess I could configure the browser or html, but that's annoying
[10:34:57] *** Quits: Enitin (~Enitin@82.180.145.224) (Ping timeout: 256 seconds)
[10:35:03] *** Quits: ekathva (~ekathva@93-90-58-246.welcomnet.fi) (Ping timeout: 260 seconds)
[10:35:04] <fossforus> actually... maybe I could read them in w3m?
[10:35:46] <Juliu> nitrix, even GLSL 1.2 has an optional bias parameter for each texture lookup inside of a fragment shader
[10:36:50] <nitrix> My shaders gave me a lot of trouble.
[10:37:04] <Juliu> nitrix, YOUR shaders, yes :P
[10:37:13] *** Quits: alch (~alch@pa-18-172-83.service.infuturo.it) (Read error: Connection reset by peer)
[10:37:52] <Juliu> Anyway, I don't see how you would need to sample different mipmap levels anyway
[10:38:02] *** Joins: zer0x (~zer0x@1.55.14.27)
[10:40:40] <nitrix> That's how IBL works. The BRDF function uses a split-sum equation, the two parts are stored into two different textures. One of them requires a lookup table LUT which one axis tells you the roughness, and then you can sample the texture at the lod of that roughness and get really fast illuminance information.
[10:40:47] <Juliu> I would really like to code something again :(
[10:41:38] *** Joins: alch (~alch@151.36.197.138)
[10:41:50] <Juliu> nitrix, you could use a 3D texture instead, which would actually even have the same resolution at each simpulated mipmap level
[10:42:43] <nitrix> As the roughness increases, the specular reflection becomes more and more blurry, so keeping the resolution the same would be unnecessarily costly.
[10:42:47] *** Quits: aghast (~aghast@2607:fb91:bd0b:1329:a0d6:4979:f73c:e2ec) (Ping timeout: 260 seconds)
[10:43:21] <nitrix> You save quite at bit this way. It was inspired by the glTF reference shaders.
[10:43:41] *** Quits: eroux (~eroux@102-65-72-61.ftth.web.africa) (Ping timeout: 246 seconds)
[10:43:41] <Juliu> Well, since BRDFs were implemented long before OpenGL 4.0, there is definitely a way :)
[10:44:32] <nitrix> Yes.
[10:47:25] <Juliu> Well, the 3D texture would be of size   n^2 * log n   and a 2D texture with full anisotropy would be of size   (2*n - 1)^2, so the different is only a factor of approximately   log(n) / 4  , if I'm not mistaken
[10:48:28] <Juliu> No wait, the 2D texture would be larger. I forgot the mipmap levels for the 2D texture
[10:49:15] *** Joins: kurahaupo (~kurahaupo@115.69.27.211)
[10:49:26] *** Quits: xiongxin (~Thunderbi@2409:8955:3894:25d6:2bd8:ade2:1163:8d53) (Ping timeout: 252 seconds)
[10:49:56] *** Quits: Macbethwin (~chargen@D964062A.static.ziggozakelijk.nl) (Remote host closed the connection)
[10:50:18] *** Joins: Macbethwin (~chargen@D964062A.static.ziggozakelijk.nl)
[10:50:50] <nitrix> Time for me to go.
[10:51:21] *** Quits: Macbethwin (~chargen@D964062A.static.ziggozakelijk.nl) (Remote host closed the connection)
[10:53:32] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[10:55:32] <Juliu> Let's compare apples to apples and say the 3D texture and the 2D texture with mipmaps both dont use anisotropy. That would mean the 3D texture is of size  n^2 * log n  and the 2D texture with all it's mipmap levels is of size  1*1 + 2*2 + 4*4 + ... + n*n = 1/3 * (4^log2(n) - 1) = (n^2 - 1) / 3,   so the 3D texture would be only about   log(n) / 3  times larger
[10:55:46] *** Joins: savolla (~quassel@84.44.28.28)
[10:57:07] <Juliu> So for a texture of size 256 x 256 that would mean simulating it and all its mipmap levels with a 3D texture is only about 2.67 times larger
[11:00:22] <Juliu> Since BRDFs were implemented even before 3D textures were available, they probably did it differently. They probably simply had a constant roughness for each surface/texture
[11:00:39] *** Joins: mattil (~mattil@d5z9ccdfmyl1jmjj16z-4.rev.dnainternet.fi)
[11:02:17] *** Joins: xiongxin (~Thunderbi@117.136.33.222)
[11:06:55] *** Quits: savolla (~quassel@84.44.28.28) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[11:13:17] *** Joins: Enitin (~Enitin@82.180.145.230)
[11:13:42] *** Joins: HaMsTeRs (~Thunderbi@210.3.201.132)
[11:14:31] *** Joins: plastico (~plastico@neomutt/plastico)
[11:18:21] *** Quits: mattil (~mattil@d5z9ccdfmyl1jmjj16z-4.rev.dnainternet.fi) (Remote host closed the connection)
[11:19:15] *** Joins: f__ (~f@2607:f598:bbda:220:873a:b4dd:abdb:c027)
[11:19:22] *** Quits: reedrichards (~f@2607:f598:bbda:220:fbc4:22c3:1afd:7eab) (Remote host closed the connection)
[11:21:57] *** Quits: koo5_ (~quassel@51.140.155.227) (Quit: http://quassel-irc.org - Chat comfortably. Anywhere.)
[11:22:51] *** Joins: koo5_ (~quassel@51.140.155.227)
[11:23:03] *** Joins: Guest61 (~Guest61@24.42.157.116)
[11:24:33] *** Quits: Guest61 (~Guest61@24.42.157.116) (Client Quit)
[11:30:13] *** Joins: reedrichards (~f@2607:f598:bbda:220:e3ab:31a:8026:4bda)
[11:31:01] *** Quits: f__ (~f@2607:f598:bbda:220:873a:b4dd:abdb:c027) (Remote host closed the connection)
[11:31:13] *** Quits: danielcamiel (~danielcam@user/danielcamiel) (Quit: Leaving)
[11:32:51] *** Joins: jess (~jess@libera/staff/cat/jess)
[11:33:36] *** Joins: eddybilley (~freddieti@2a02-a454-7f89-1-2c34-c506-64df-e969.fixed6.kpn.net)
[11:34:50] *** Quits: msk (~Thunderbi@89.205.124.83) (Read error: Connection reset by peer)
[11:35:22] *** Joins: msk (~Thunderbi@89.205.124.39)
[11:37:07] *** Joins: iomari891 (~iomari891@105.112.138.38)
[11:37:27] *** Joins: loganlee[gnu] (~Thunderbi@user/loganlee)
[11:37:32] *** Joins: lukedashjr (~luke-jr@user/luke-jr)
[11:40:23] *** Quits: luke-jr (~luke-jr@user/luke-jr) (Ping timeout: 260 seconds)
[11:40:41] *** Quits: joev (~joev@user/joev) (Ping timeout: 256 seconds)
[11:40:46] *** lukedashjr is now known as luke-jr
[11:41:26] *** Quits: mikoto-chan (~mikoto-ch@213.177.151.239) (Ping timeout: 246 seconds)
[11:42:29] *** Joins: joev (~joev@user/joev)
[11:42:43] *** Quits: Akiva (~Akiva@user/Akiva) (Ping timeout: 256 seconds)
[11:44:24] *** Joins: aradesh (~aradesh@user/aradesh)
[11:44:51] *** Quits: clamiax (~clamiax@net-93-147-243-26.cust.vodafonedsl.it) (Ping timeout: 260 seconds)
[11:44:54] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:80cb:fbaa:9eb3:d23c) (Quit: Quit)
[11:45:28] *** Joins: mikoto-chan (~mikoto-ch@213.177.151.239)
[11:49:20] *** Joins: kenanmarasli (~kenanmara@user/kenanmarasli)
[11:50:51] *** Joins: hanzo (uid532183@user/hanzo)
[11:52:54] *** Joins: Rounin (~david@84.212.130.215)
[11:58:14] <jmdaemon> holy shit
[11:58:32] <jmdaemon> i love c interop so much it blows my mind
[11:58:34] <jmdaemon> that is all
[11:59:08] *** Joins: random-nick (~random-ni@87.116.167.125)
[12:01:28] *** Quits: haliucinas (~52b4903d@5.20.153.21) (Quit: haliucinas)
[12:01:50] *** Joins: mikoto-c1 (~mikoto-ch@213.177.151.239)
[12:01:52] *** Quits: mikoto-chan (~mikoto-ch@213.177.151.239) (Ping timeout: 272 seconds)
[12:02:45] *** Joins: haliucinas (~d5c5a67e@5.20.153.21)
[12:08:19] *** candide sets mode: -o candide
[12:12:23] *** Quits: mikoto-c1 (~mikoto-ch@213.177.151.239) (Read error: Connection reset by peer)
[12:16:46] *** Joins: Optimus (~risto@87.227.227.147)
[12:17:23] *** Quits: Optimus (~risto@87.227.227.147) (Client Quit)
[12:18:07] *** Joins: mikoto-c1 (~mikoto-ch@213.177.151.239)
[12:18:39] *** Joins: dacav (~dacav@h94-245-9-203.cust.a3fiber.se)
[12:20:01] *** Quits: eddybilley (~freddieti@2a02-a454-7f89-1-2c34-c506-64df-e969.fixed6.kpn.net) (Quit: WeeChat 3.4.1)
[12:20:04] *** Joins: Optimus (~risto@87.227.227.147)
[12:20:24] *** Quits: Optimus (~risto@87.227.227.147) (Client Quit)
[12:20:32] *** Joins: imm__ (~imm_@user/imm/x-3405860)
[12:22:02] *** Joins: Optimus (~risto@87.227.227.147)
[12:22:23] *** Quits: imm_ (~imm_@user/imm/x-3405860) (Ping timeout: 260 seconds)
[12:25:41] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:80cb:fbaa:9eb3:d23c)
[12:26:51] *** Quits: kurahaupo (~kurahaupo@115.69.27.211) (Ping timeout: 260 seconds)
[12:31:35] *** Quits: gildasio1 (~gildasio@gateway/tor-sasl/gildasio) (Ping timeout: 240 seconds)
[12:32:32] *** Quits: KimK (~KimK@ip98-186-40-208.ks.ks.cox.net) (Ping timeout: 246 seconds)
[12:33:58] *** Joins: bolovanos_ (~bolovanos@user/bolovanos)
[12:36:35] *** Quits: Atque (~Atque@user/atque) (Ping timeout: 240 seconds)
[12:38:21] *** Joins: kurahaupo (~kurahaupo@pa49-182-76-6.pa.qld.optusnet.com.au)
[12:38:50] *** Quits: noose (~noose@user/noose) (Quit: Bye)
[12:38:59] *** Joins: nyah (~nyah@05453449.skybroadband.com)
[12:39:13] *** Joins: noose (~noose@user/noose)
[12:40:26] *** Joins: kurahaupo_ (~kurahaupo@115.69.27.211)
[12:42:01] *** Quits: sokan (~sokan@2a02:587:9e1f:c900:227:eff:fe16:865d) (Quit: Reality.is.a.lie)
[12:42:45] *** Joins: Atque (~Atque@user/atque)
[12:42:48] *** Quits: kurahaupo (~kurahaupo@pa49-182-76-6.pa.qld.optusnet.com.au) (Ping timeout: 260 seconds)
[12:45:15] *** Quits: tejr (~tejr@user/tejr) (Ping timeout: 240 seconds)
[12:45:24] *** Joins: eddybilley (~freddieti@2a02:a454:7f89:1:b8b0:c86a:ab44:ceb)
[12:45:49] *** Joins: KimK (~KimK@ip98-186-40-208.ks.ks.cox.net)
[12:46:27] *** Quits: ironman (~ironman@2405:201:1010:b051:9f16:af8b:1612:56e5) (Quit: Leaving)
[12:46:35] *** Quits: chenqisu1 (~chenqisu1@183.217.200.168) (Quit: Leaving)
[12:46:40] *** Joins: tejr (~tejr@user/tejr)
[12:46:53] *** Joins: ironman (~ironman@2405:201:1010:b051:9f16:af8b:1612:56e5)
[12:51:14] *** Joins: f__ (~f@2607:f598:bbda:220:109:5bd7:ab3:ae6b)
[12:52:15] *** Quits: reedrichards (~f@2607:f598:bbda:220:e3ab:31a:8026:4bda) (Remote host closed the connection)
[12:53:11] *** Quits: Optimus (~risto@87.227.227.147) (Ping timeout: 246 seconds)
[12:53:26] *** Joins: LucaTM (~LucaTM@user/lucatm)
[12:57:23] *** Quits: mixfix41 (~homefame@user/mixfix41) (Ping timeout: 260 seconds)
[12:57:57] *** Quits: unixpro1970 (~unixpro19@c-67-168-1-124.hsd1.wa.comcast.net) (Ping timeout: 260 seconds)
[12:58:43] *** Quits: bolovanos_ (~bolovanos@user/bolovanos) (Remote host closed the connection)
[12:59:08] *** Joins: bolovanos_ (~bolovanos@user/bolovanos)
[12:59:43] *** Quits: iomari891 (~iomari891@105.112.138.38) (Ping timeout: 260 seconds)
[13:01:07] *** Joins: cart_ (~cart@213.205.194.120)
[13:06:04] *** Joins: unixpro1970 (~unixpro19@c-67-168-1-124.hsd1.wa.comcast.net)
[13:07:53] *** Joins: Trashlord (~trash@user/trashlord)
[13:10:30] *** Quits: xiongxin (~Thunderbi@117.136.33.222) (Read error: Connection reset by peer)
[13:11:10] *** Joins: xbkkd (~F0@user/xbkkd)
[13:11:57] *** Joins: Y4knotiS (~YaknotiS@cpc1-cmbg18-2-0-cust87.5-4.cable.virginm.net)
[13:15:14] *** Quits: kaph (~kaph@net-93-67-57-97.cust.vodafonedsl.it) (Read error: Connection reset by peer)
[13:20:12] *** Joins: dhch7 (~dhch@185.213.154.171)
[13:20:37] *** Joins: moog_ (~moog@107.126.53.130)
[13:21:24] *** Quits: Alhazred (~Alhazred@45.129.56.151) (Read error: Connection reset by peer)
[13:22:14] *** Quits: dhch (~dhch@185.213.154.171) (Ping timeout: 246 seconds)
[13:22:28] *** Joins: dhch (~dhch@185.213.154.171)
[13:22:56] *** Quits: malina (~malina@user/malina) (Ping timeout: 246 seconds)
[13:22:56] *** Quits: moog (~moog@98.97.85.1) (Ping timeout: 246 seconds)
[13:24:50] *** Quits: dhch7 (~dhch@185.213.154.171) (Ping timeout: 272 seconds)
[13:24:51] *** Quits: cart_ (~cart@213.205.194.120) (Ping timeout: 272 seconds)
[13:25:36] *** Joins: malina (~malina@user/malina)
[13:25:54] *** Joins: geowiesnot (~user@5-51-190-244.abo.bbox.fr)
[13:26:18] *** Joins: Alhazred (~Alhazred@s91904425.blix.com)
[13:26:23] <yosef[m]> 😕
[13:26:23] <yosef36> 👀
[13:26:35] *** Quits: Enitin (~Enitin@82.180.145.230) (Ping timeout: 260 seconds)
[13:30:04] *** Joins: MajorBiscuit (~MajorBisc@2a02:a461:129d:1:193d:75d8:745d:e91e)
[13:30:13] *** Quits: slact[m] (~slact@2001:470:69fc:105::1:5ee3) (Quit: You have been kicked for being idle)
[13:31:26] *** Joins: Optimus (~risto@87.227.227.147)
[13:37:49] *** Joins: xiongxin (~Thunderbi@2409:8955:3894:25d6:2bd8:ade2:1163:8d53)
[13:38:13] *** Quits: fe23 (~fe23@2409:8a34:466:6010:751a:4e06:5d2e:2a0f) (Ping timeout: 240 seconds)
[13:38:14] *** Joins: cart_ (~cart@2a01:4c8:418:24b8:51a2:f081:9378:1485)
[13:39:51] *** Joins: shivesh (~shivesh@user/shivesh)
[13:42:00] *** Quits: anshupatia_ (uid29854@id-29854.helmsley.irccloud.com) ()
[13:42:08] *** Quits: jmdaemon (~jmdaemon@user/jmdaemon) (Ping timeout: 252 seconds)
[13:42:17] *** Joins: anshupatia (uid29854@id-29854.helmsley.irccloud.com)
[13:42:24] *** Quits: wingsorc (~wingsorc@user/wingsorc) (Quit: Leaving)
[13:42:27] *** Quits: xiongxin (~Thunderbi@2409:8955:3894:25d6:2bd8:ade2:1163:8d53) (Ping timeout: 260 seconds)
[13:43:40] *** Joins: Klinda (~superleag@user/klinda)
[13:48:29] *** Joins: mzxtuelkl_ (~mzxtuelkl@user/mzxtuelkl)
[13:48:32] *** Joins: iomari891 (~iomari891@197.210.77.28)
[13:49:50] *** Quits: virmire (~Virmire@p200300cfc71981017ff3a2049d66781f.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[13:50:34] *** Quits: AbleBacon (~AbleBacon@user/AbleBacon) (Read error: Connection reset by peer)
[13:51:02] *** Joins: virmire (~Virmire@p200300cfc71981017ff3a2049d66781f.dip0.t-ipconnect.de)
[13:52:13] *** Quits: geowiesnot (~user@5-51-190-244.abo.bbox.fr) (Ping timeout: 260 seconds)
[13:52:13] *** Quits: mzxtuelkl__ (~mzxtuelkl@user/mzxtuelkl) (Ping timeout: 260 seconds)
[13:52:28] *** Quits: pizdets (~pizdets@183.182.110.38) (Ping timeout: 265 seconds)
[13:53:24] *** Quits: skapata (~Skapata@user/skapata) (Read error: Connection reset by peer)
[13:55:05] *** imm__ is now known as imm_
[13:57:49] *** ndut is now known as dodocrypto
[13:57:49] *** Quits: dodocrypto (~ndut@2001:448a:1082:fe6f:28ea:e1f8:1adb:bb6a) (K-Lined)
[13:58:47] *** Quits: mikoto-c1 (~mikoto-ch@213.177.151.239) (Ping timeout: 260 seconds)
[13:58:52] *** Quits: Guest506 (~ts@114.254.2.231) (Quit: Leaving)
[13:59:15] *** Joins: seifeslimene (~seifeslim@197.2.39.226)
[14:00:41] *** Quits: hanzo (uid532183@user/hanzo) (Quit: Connection closed for inactivity)
[14:04:06] *** Quits: qorg11 (~lain@user/qorg) (Ping timeout: 245 seconds)
[14:04:27] *** Joins: useretail (~useretail@213.55.243.238)
[14:05:33] <seifeslimene> http://codepad.org/OHBbNHr9#comment-kzyiDtez
[14:05:54] <seifeslimene> the result in my computer is different for printf("Value at address p+1 is %d\n", *(p+1));
[14:06:10] <seifeslimene> It outputs the same value as p
[14:06:11] *** Joins: mikoto-c1 (~mikoto-ch@213.177.151.239)
[14:06:37] *** Joins: qorg11 (~lain@user/qorg)
[14:06:42] <fizzie> Didn't we go over that already?
[14:06:43] <seifeslimene> means *(p+1) = p which is not logic at all!
[14:06:52] *** Joins: pizdets (~pizdets@183.182.110.250)
[14:07:00] <seifeslimene> I fall asleep yesterday sorry
[14:07:14] *** Joins: freddietilley (~freddieti@2a02-a454-7f89-1-fcae-1e26-3bb1-bec0.fixed6.kpn.net)
[14:07:26] <fizzie> It's a coincidence from the way the variables happened to get laid out in memory, most likely.
[14:07:48] *** Joins: xiongxin (~Thunderbi@2409:8955:3894:25d6:2bd8:ade2:1163:8d53)
[14:07:58] *** Quits: eddybilley (~freddieti@2a02:a454:7f89:1:b8b0:c86a:ab44:ceb) (Ping timeout: 260 seconds)
[14:08:00] <fizzie> ,cc -O2 -m32 int a = 10, *p = &a; printf("&a = %p, &p = %p, p = %p, p+1 = %p", (void *) &a, (void *) &p, (void *) p, (void *)(p + 1)); // as happened to be the case here, for example
[14:08:02] <candide> fizzie: &a = 0xffffd478, &p = 0xffffd47c, p = 0xffffd478, p+1 = 0xffffd47c
[14:08:21] <fizzie> That example didn't access p+1, so it's okay. But you can see that p equals &a (guaranteed), while p+1 equals &p (coincidence).
[14:10:04] <fizzie> Hence, when you do `*(p + 1)` (or p[1]) to access the memory right after the int that p is pointing at (a), you happen to get the value of p itself, because it's the next thing in memory.
[14:10:22] *** Parts: Amnesia (~Amnesia@user/amnesia) ()
[14:11:07] *** Quits: nq (~nq@82.79.141.40) (Quit: Leaving)
[14:12:44] *** Joins: reedrichards (~f@2607:f598:bbda:220:7ed5:5f3d:e91d:5aad)
[14:13:45] *** Quits: f__ (~f@2607:f598:bbda:220:109:5bd7:ab3:ae6b) (Remote host closed the connection)
[14:14:36] *** Quits: bolovanos_ (~bolovanos@user/bolovanos) (Ping timeout: 240 seconds)
[14:15:32] <fizzie> ,cc -O2 -m32 int a = 10, b = 123456, *p = &a; printf("&a = %p, &b = %p, *p = %d, *(p+1) = %d", (void *) &a, (void *) &b, *p, *(p+1)); // if you add another variable, the results will likely change
[14:15:34] <candide> fizzie: &a = 0xffffd478, &b = 0xffffd47c, *p = 10, *(p+1) = 123456
[14:16:25] <fizzie> Of course you should make no assumptions about the way unrelated variables are laid out in memory based on where they're declared, because it's up to the whims of the implementation.
[14:20:36] *** Joins: E3xPloit (~E3xPloit@2001:448a:1082:fe6f:cd1a:6fe6:ef2c:bd86)
[14:22:24] <seifeslimene> fizzie: implementation of what? compiler?
[14:24:36] *** Quits: Oddity (~Oddity@user/oddity) (Ping timeout: 240 seconds)
[14:25:28] *** Joins: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com)
[14:26:09] <seifeslimene> Can I look for how variables are laid out in memory at compile time?
[14:26:24] <seifeslimene> I need to understand this weird behavior
[14:26:26] *** Quits: unixpro1970 (~unixpro19@c-67-168-1-124.hsd1.wa.comcast.net) (Ping timeout: 260 seconds)
[14:26:34] <fizzie> Yes, with a debugger or by just printing out their addresses (like I did in that example).
[14:26:55] *** Joins: squid_game (~squid_gam@194-218-10-146.customer.telia.com)
[14:27:05] *** Quits: E3xPloit (~E3xPloit@2001:448a:1082:fe6f:cd1a:6fe6:ef2c:bd86) (Quit: Leaving)
[14:27:08] <fizzie> Of course (at least with optimizations on) just printing their addresses is likely to *change* how they're laid in memory, since it will affect things like whether the compiler decides to even put them *anywhere* in memory, as opposed to keeping them in registers only.
[14:27:38] *** Joins: E3xPloit (~E3xPloit@2001:448a:1082:fe6f:cd1a:6fe6:ef2c:bd86)
[14:27:47] *** Joins: gproto23 (~gproto23@user/gproto23)
[14:27:48] *** Quits: jw4 (~jw4@user/jw4) (Ping timeout: 260 seconds)
[14:28:16] *** Quits: loganlee[gnu] (~Thunderbi@user/loganlee) (Quit: loganlee[gnu])
[14:28:44] <fizzie> ,cc -O2 -m32 int a = 10, b = 123456, *p = &a; printf("*p = %d, *(p+1) = %d", *p, *(p+1)); // the behavior of this example changes too, if I don't print &a and &b
[14:28:46] <candide> fizzie: *p = 10, *(p+1) = 124424
[14:28:50] *** Quits: mikoto-c1 (~mikoto-ch@213.177.151.239) (Quit: mikoto-c1)
[14:28:52] *** Quits: xbkkd (~F0@user/xbkkd) (Remote host closed the connection)
[14:29:02] *** Joins: mikoto-chan (~mikoto-ch@213.177.151.239)
[14:29:06] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Quit: sord937)
[14:29:12] <fizzie> It no longer printed 123456 as *(p+1), like it did before. On that particular implementation, with those flags.
[14:29:35] *** Joins: jw4 (~jw4@user/jw4)
[14:31:26] *** Quits: epicout (~epicout@user/epicout) (Quit: ZNC - https://znc.in)
[14:31:39] *** Joins: epicout (~epicout@user/epicout)
[14:32:46] *** Joins: unknow (~i.am@user/marlboro)
[14:34:21] <fizzie> (I'm using the word "implementation" in the same sense the standard does, to mean the entire system consisting of -- usually -- a compiler, a runtime library, and whatever else it is that's needed to enable the translation and execution of a C program.)
[14:34:43] *** Quits: jw4 (~jw4@user/jw4) (Ping timeout: 260 seconds)
[14:35:23] <seifeslimene> Yes I can run the same program on other machine and see the that *(p + 1) is different.
[14:36:14] *** Joins: jw4 (~jw4@user/jw4)
[14:37:34] *** Joins: unixpro1970 (~unixpro19@c-67-168-1-124.hsd1.wa.comcast.net)
[14:37:58] *** Quits: epicout (~epicout@user/epicout) (Quit: ZNC - https://znc.in)
[14:38:02] *** Quits: alch (~alch@151.36.197.138) (Read error: Connection reset by peer)
[14:38:11] *** Joins: epicout (~epicout@user/epicout)
[14:38:26] *** Joins: nq (~nq@195.254.133.193)
[14:41:57] *** Joins: alch (~alch@151.38.177.226)
[14:42:35] *** Joins: cosimone (~user@93-47-230-184.ip115.fastwebnet.it)
[14:45:16] *** Quits: jw4 (~jw4@user/jw4) (Ping timeout: 272 seconds)
[14:47:00] *** Joins: jw4 (~jw4@user/jw4)
[14:47:19] *** Quits: E3xPloit (~E3xPloit@2001:448a:1082:fe6f:cd1a:6fe6:ef2c:bd86) (Quit: Leaving)
[14:52:18] *** Quits: jw4 (~jw4@user/jw4) (Ping timeout: 260 seconds)
[14:53:39] *** Joins: jw4 (~jw4@user/jw4)
[14:54:13] *** Joins: freakazoid343 (~matt@2603-9000-cf03-86c3-31a9-8adb-d18d-a939.inf6.spectrum.com)
[14:55:33] *** Joins: bolovanos_ (~bolovanos@user/bolovanos)
[14:56:57] <Bou> crazy how UB often produces "almost" the expected result. that 123456 was completely omitted from the program, since b is never used. still the output is close-ish to 123456.
[14:58:04] *** Joins: constxd (~brad@142.134.78.128)
[14:58:10] *** Quits: freakazoid12345 (~matt@2603-9000-cf03-86c3-75b0-c9e4-045a-7058.inf6.spectrum.com) (Ping timeout: 260 seconds)
[14:58:40] <seifeslimene> @bou: what do you mean by UB?
[14:59:12] *** Quits: jw4 (~jw4@user/jw4) (Ping timeout: 272 seconds)
[14:59:22] <Bou> undefined behaviour
[14:59:51] <gl> ,ub
[14:59:51] <candide> Undefined behavior is behavior for which the C standard does not impose any requirements. This is to allow C the freedom to be implemented on systems with different architectures. Programs invoking undefined behavior may appear to compile and even run without errors at first, only to fail on another system, or even at a later time. If you want to write reliable code, don't use such behaviors.
[15:02:40] *** Quits: gtlsgamr (~gtlsgamr@user/gtlsgamr) (Quit: Goodbye!)
[15:02:40] *** Quits: dakship_ (~dakship@2400:8904::f03c:92ff:feee:b97d) (Quit: Goodbye!)
[15:03:22] *** Quits: bolovanos_ (~bolovanos@user/bolovanos) (Ping timeout: 260 seconds)
[15:04:32] *** Joins: Enitin (~Enitin@82.180.145.227)
[15:05:36] <seifeslimene> gl: why you put a comma there before ub?
[15:05:38] *** Quits: seifeslimene (~seifeslim@197.2.39.226) (Quit: Ping timeout (120 seconds))
[15:05:45] *** Joins: fe23 (~fe23@2409:8a34:466:6010:751a:4e06:5d2e:2a0f)
[15:06:19] *** Joins: seifeslimene (~seifeslim@197.2.39.226)
[15:06:52] <dave0> seifeslimene: the robot recognizes it
[15:06:57] *** Quits: KimK (~KimK@ip98-186-40-208.ks.ks.cox.net) (Ping timeout: 256 seconds)
[15:07:11] <Bou> btw, is there a list of these candide factoids? I tried "factfind -channel #c -regex ." and got https://0x0.st/oqIC.txt, which is a list... but not very helpful
[15:09:56] <seifeslimene> dave0 is there any mention of this in the documentation? if so, could provide me a link, please?
[15:11:15] <dave0> seifeslimene: are you new to irc? you'll pick it up quickly
[15:11:40] <dave0> seifeslimene: /msg candide ,help
[15:11:56] *** Joins: Bandicoot (~bandicoot@45.154.88.240)
[15:12:06] *** Joins: E3xPloit (~E3xPloit@2001:448a:1082:fe6f:cd1a:6fe6:ef2c:bd86)
[15:12:12] *** Quits: mikoto-chan (~mikoto-ch@213.177.151.239) (Read error: No route to host)
[15:12:32] <dave0> /msg candide ,help help
[15:13:04] *** Quits: E3xPloit (~E3xPloit@2001:448a:1082:fe6f:cd1a:6fe6:ef2c:bd86) (Client Quit)
[15:13:10] <seifeslimene> dave0 yes I'm new to IRC.
[15:14:22] <dave0> it's a computer program connected to irc, rather than a person
[15:14:26] *** Quits: MajorBiscuit (~MajorBisc@2a02:a461:129d:1:193d:75d8:745d:e91e) (Quit: WeeChat 3.4)
[15:14:40] <dave0> lots of channels have them.. they provide services for the lazy lazy people in the channel
[15:15:16] <dave0> our "special" robot is candide and to get her attention you start the line with a comma
[15:15:36] <dave0> ! is probably the most common symbol to attract a robot's attention
[15:15:40] <dave0> !help
[15:15:42] <dave0> etc.
[15:16:48] *** Quits: m4ho (~m4ho@81.20.119.6) (Ping timeout: 260 seconds)
[15:17:52] <dave0> seifeslimene: /join #libera    and check out https://libera.chat/guides/basics
[15:17:53] <candide> Title of dave0's link: Basics of IRC | Libera Chat
[15:19:43] *** Joins: m4ho (~m4ho@81.20.119.6)
[15:21:27] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4.1)
[15:21:28] <constxd> Bou: there used to be, on the iso-9899.info website but it seems to be gone
[15:21:40] <constxd> as well as the list of quote grabs
[15:21:45] *** Quits: epicout (~epicout@user/epicout) (Quit: ZNC - https://znc.in)
[15:21:52] <constxd> i guess querying the bot is the only way to see them now
[15:21:54] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[15:22:12] *** Joins: epicout (~epicout@user/epicout)
[15:22:22] *** Joins: mikoto-chan (~mikoto-ch@213.177.151.239)
[15:22:45] *** Joins: f__ (~f@2607:f598:bbda:220:6df0:1818:3a68:48a2)
[15:22:49] *** Quits: epicout (~epicout@user/epicout) (Client Quit)
[15:23:13] *** Joins: epicout (~epicout@user/epicout)
[15:23:27] *** Quits: reedrichards (~f@2607:f598:bbda:220:7ed5:5f3d:e91d:5aad) (Remote host closed the connection)
[15:23:43] *** Quits: HaMsTeRs (~Thunderbi@210.3.201.132) (Ping timeout: 260 seconds)
[15:25:33] <seifeslimene> , is a factoid for #c, but I have no help text for it yet. To add help text, use the command `factset , help <text>`.
[15:25:37] <seifeslimene> Got it
[15:25:45] <candide> s﻿eifeslimene, That's slightly profound.
[15:26:35] *** Joins: HaMsTeRs (~Thunderbi@210.3.201.132)
[15:27:01] *** Joins: tech_exorcist (13203@user/tech-exorcist/x-0447479)
[15:27:26] *** Quits: HaMsTeRs (~Thunderbi@210.3.201.132) (Client Quit)
[15:27:31] *** Joins: gildasio1 (~gildasio@gateway/tor-sasl/gildasio)
[15:29:19] *** Quits: epicout (~epicout@user/epicout) (Quit: ZNC - https://znc.in)
[15:29:32] *** Joins: epicout (~epicout@user/epicout)
[15:29:38] *** Quits: kurahaupo_ (~kurahaupo@115.69.27.211) (Ping timeout: 260 seconds)
[15:30:07] *** Quits: Elladan (~elladan@user/elladan) (Quit: ZNC - http://znc.in)
[15:30:18] *** Quits: csrf (~csrf@user/csrf) (Quit: ZNC 1.7.2+deb3 - https://znc.in)
[15:31:02] *** Joins: csrf (~csrf@user/csrf)
[15:31:42] *** Joins: Elladan (~elladan@user/elladan)
[15:32:09] *** Quits: epicout (~epicout@user/epicout) (Client Quit)
[15:33:22] *** Joins: epicout (~epicout@user/epicout)
[15:34:50] *** Joins: joedoe47_ (~weechat@c-98-254-188-143.hsd1.fl.comcast.net)
[15:34:53] *** Quits: joedoe47 (~weechat@c-98-254-188-143.hsd1.fl.comcast.net) (Ping timeout: 260 seconds)
[15:41:59] *** Quits: freddietilley (~freddieti@2a02-a454-7f89-1-fcae-1e26-3bb1-bec0.fixed6.kpn.net) (Quit: WeeChat 3.4.1)
[15:43:03] *** Joins: bertvvvs (~bertvvvs@user/bertvvvs)
[15:45:16] *** Quits: ckdCreations (~ckdCreati@147.55.133.138) (Read error: Connection reset by peer)
[15:45:43] *** Joins: ckdCreations (~ckdCreati@c-73-140-151-116.hsd1.wa.comcast.net)
[15:46:00] *** Joins: Burgundy (~NA@5-12-91-184.residential.rdsnet.ro)
[15:49:11] *** Quits: xiongxin (~Thunderbi@2409:8955:3894:25d6:2bd8:ade2:1163:8d53) (Ping timeout: 252 seconds)
[15:50:05] *** Joins: cvmn (~caveman@gateway/tor-sasl/caveman)
[15:50:21] *** Quits: ckdCreations (~ckdCreati@c-73-140-151-116.hsd1.wa.comcast.net) (Ping timeout: 245 seconds)
[15:50:21] *** Joins: kurahaupo (~kurahaupo@pa49-182-76-6.pa.qld.optusnet.com.au)
[15:50:54] *** Joins: ckdCreations (~ckdCreati@147.55.133.134)
[15:51:31] *** Joins: coaxing (~coaxing@user/coaxing)
[15:52:05] *** Quits: Bandicoot (~bandicoot@45.154.88.240) (Quit: Leaving)
[15:52:23] *** Joins: aerysh (~aerysh@2a0a:b640:1:5b::a08d)
[15:54:03] *** Quits: Alhazred (~Alhazred@s91904425.blix.com) (Ping timeout: 260 seconds)
[15:54:22] *** Quits: epicout (~epicout@user/epicout) (Quit: ZNC - https://znc.in)
[15:55:53] *** Joins: epicout (~epicout@user/epicout)
[15:58:00] *** Joins: Bandicoot (~bandicoot@45.154.88.240)
[16:02:59] *** Joins: SGautam (uid286066@id-286066.ilkley.irccloud.com)
[16:03:14] *** Quits: yggdrasil (~yggdrasil@67-0-28-71.albq.qwest.net) (Ping timeout: 246 seconds)
[16:03:29] *** Joins: caveman_ (~caveman@gateway/tor-sasl/caveman)
[16:04:10] *** Quits: Xgc (~Xgc@user/xgc) (Quit: Leaving)
[16:05:14] *** Joins: yggdrasil (~yggdrasil@67-0-88-35.albq.qwest.net)
[16:06:15] *** Quits: cvmn (~caveman@gateway/tor-sasl/caveman) (Ping timeout: 240 seconds)
[16:06:58] *** Quits: freakazoid343 (~matt@2603-9000-cf03-86c3-31a9-8adb-d18d-a939.inf6.spectrum.com) (Read error: Connection reset by peer)
[16:07:25] *** Quits: caveman_ (~caveman@gateway/tor-sasl/caveman) (Client Quit)
[16:07:39] *** Joins: freakazoid343 (~matt@2603-9000-cf03-86c3-31a9-8adb-d18d-a939.inf6.spectrum.com)
[16:08:03] *** Quits: _flood (flooded@gateway/vpn/protonvpn/flood/x-43489060) (Remote host closed the connection)
[16:10:35] *** Quits: mikoto-chan (~mikoto-ch@213.177.151.239) (Ping timeout: 246 seconds)
[16:16:11] *** Joins: flooded (flooded@gateway/vpn/protonvpn/flood/x-43489060)
[16:16:34] *** Quits: flooded (flooded@gateway/vpn/protonvpn/flood/x-43489060) (Remote host closed the connection)
[16:22:35] *** Quits: epicout (~epicout@user/epicout) (Quit: ZNC - https://znc.in)
[16:24:24] *** Joins: cvmn (~caveman@gateway/tor-sasl/caveman)
[16:25:27] *** Joins: slidercrank (~slidercra@user/slidercrank)
[16:29:38] *** Quits: frost (~frost@user/frost) (Quit: Client closed)
[16:29:51] *** Quits: fe23 (~fe23@2409:8a34:466:6010:751a:4e06:5d2e:2a0f) (Remote host closed the connection)
[16:30:02] *** Joins: frost (~frost@user/frost)
[16:30:15] *** Joins: fe23 (~fe23@2409:8a34:466:6010:751a:4e06:5d2e:2a0f)
[16:30:44] *** Quits: nq (~nq@195.254.133.193) (Quit: Leaving)
[16:32:26] *** Quits: Epithium (~Epithium@2603-6080-3203-8d68-a9fe-010b-1d2d-81ea.res6.spectrum.com) (Remote host closed the connection)
[16:38:55] *** Joins: Ox000 (~jy@166.147.161.66.ded-dsl.fuse.net)
[16:40:47] *** Joins: freakazoid12345 (~matt@2603-9000-cf03-86c3-31a9-8adb-d18d-a939.inf6.spectrum.com)
[16:40:55] *** Quits: cvmn (~caveman@gateway/tor-sasl/caveman) (Ping timeout: 240 seconds)
[16:41:02] *** Joins: Ex0day (~Ex0day@user/Ex0day)
[16:41:19] *** Quits: emias (~holger@home.zedat.fu-berlin.de) (Quit: WeeChat 3.0)
[16:42:55] *** Quits: freakazoid343 (~matt@2603-9000-cf03-86c3-31a9-8adb-d18d-a939.inf6.spectrum.com) (Ping timeout: 250 seconds)
[16:44:33] *** Quits: user24037 (~user47239@user/user282069) (Quit: WeeChat 3.2.1)
[16:48:17] *** Quits: gargus (~user@61.68.76.222) (Quit: Leaving)
[16:50:43] *** Quits: Enitin (~Enitin@82.180.145.227) (Ping timeout: 260 seconds)
[16:50:52] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:d99d:3b0b:7662:bc00)
[16:52:58] *** Joins: ioxzev1z (~ioxzev1z@user/ioxzev1z)
[16:58:45] *** Joins: Trashlord__ (~trash@user/trashlord)
[17:00:12] *** Quits: Trashlord (~trash@user/trashlord) (Quit: "True ignorance is not the absence of knowledge, but the refusal to acquire it.")
[17:00:19] *** Quits: Trashlord__ (~trash@user/trashlord) (Client Quit)
[17:01:33] *** Joins: Trashlord (~trash@user/trashlord)
[17:02:55] *** Joins: Trashlord__ (~trash@user/trashlord)
[17:03:42] *** Joins: user24037 (~user47239@user/user282069)
[17:03:46] <user24037> #c-jeopardy
[17:04:47] *** Quits: Ex0day (~Ex0day@user/Ex0day) (Ping timeout: 250 seconds)
[17:08:38] *** Quits: gproto23 (~gproto23@user/gproto23) (Remote host closed the connection)
[17:09:32] *** Joins: brad_mssw (~bhouse@c-76-106-206-149.hsd1.fl.comcast.net)
[17:10:02] *** Joins: gproto23 (~gproto23@user/gproto23)
[17:11:54] *** Quits: zer0x (~zer0x@1.55.14.27) (Remote host closed the connection)
[17:12:16] *** Joins: zer0x (~zer0x@1.55.14.27)
[17:13:19] *** Joins: mikoto-chan (~mikoto-ch@213.177.151.239)
[17:16:46] *** Joins: Ex0day (~Ex0day@user/Ex0day)
[17:16:58] *** Quits: joev (~joev@user/joev) (Ping timeout: 260 seconds)
[17:17:48] *** Joins: joev (~joev@user/joev)
[17:18:29] *** Quits: m4v (~znc@ubuntu/member/m4v) (Ping timeout: 246 seconds)
[17:18:43] *** Quits: mikoto-chan (~mikoto-ch@213.177.151.239) (Ping timeout: 260 seconds)
[17:18:45] *** Joins: seninha (~seninha@user/seninha)
[17:18:53] *** Quits: Trashlord (~trash@user/trashlord) (Quit: "True ignorance is not the absence of knowledge, but the refusal to acquire it.")
[17:19:08] *** Trashlord__ is now known as Trashlord
[17:19:29] *** Joins: m4v (~znc@ubuntu/member/m4v)
[17:20:57] *** Quits: rany (~rany@user/rany) (Quit: The Lounge - https://thelounge.chat)
[17:21:11] *** Joins: rany (~rany@user/rany)
[17:21:35] *** Joins: lionkor (~lionkor@beammp/staff/lionkor)
[17:22:02] *** Quits: dogbert2 (~Bill@ip70-170-79-7.lv.lv.cox.net) (Remote host closed the connection)
[17:22:15] *** Joins: siesta (~siesta@112.207.33.219)
[17:22:19] *** Joins: dogbert2 (~Bill@ip70-170-79-7.lv.lv.cox.net)
[17:22:21] *** Quits: Ex0day (~Ex0day@user/Ex0day) (Ping timeout: 250 seconds)
[17:22:36] *** Parts: siesta (~siesta@112.207.33.219) ()
[17:23:00] *** Joins: MajorBiscuit (~MajorBisc@86-88-79-148.fixed.kpn.net)
[17:23:37] *** Joins: Ex0day (~Ex0day@2001:448a:1082:fe6f:9d30:400:bedf:2e80)
[17:24:41] *** Quits: Ex0day (~Ex0day@2001:448a:1082:fe6f:9d30:400:bedf:2e80) (Client Quit)
[17:26:12] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:d99d:3b0b:7662:bc00) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[17:29:38] *** Joins: fria (~siesta@112.207.33.219)
[17:30:14] <fria> hello
[17:30:56] <fria> is this the old freenode ##c?
[17:31:02] <fria> hmm
[17:31:28] <fria> ,help
[17:31:28] <candide> For general help, see <https://github.com/pragma-/pbot/tree/master/doc>. For help about a specific command or factoid, use `help <keyword> [channel]`.
[17:31:29] <dave0> pretty much
[17:31:45] *** Joins: pulse (~pulse@user/pulse)
[17:31:57] <dave0> maybe it's a little bit more cranky
[17:32:08] *** gildasio1 is now known as gildasio
[17:33:01] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:d99d:3b0b:7662:bc00)
[17:33:18] <fria> ,cc printf("%s",(char*[]){"eat","sleep","code"}[rand()%3]);
[17:33:20] <candide> fria: sleep
[17:33:23] *** Quits: vysn (~vysn@user/vysn) (Remote host closed the connection)
[17:33:41] *** Joins: Xgc (~Xgc@user/xgc)
[17:33:42] <fria> oww i miss you candide where have you been all my life
[17:36:03] *** Quits: ironman (~ironman@2405:201:1010:b051:9f16:af8b:1612:56e5) (Quit: Leaving)
[17:36:50] *** Quits: frost (~frost@user/frost) (Ping timeout: 250 seconds)
[17:37:03] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:d99d:3b0b:7662:bc00) (Client Quit)
[17:38:36] *** Joins: cvmn (~caveman@gateway/tor-sasl/caveman)
[17:39:42] <cehteh> ,cc printf("%s",(char*[]){"eat","sleep","code"}[rand()%6])
[17:39:44] <candide> cehteh: sleep
[17:40:07] <cehteh> fair chance :D
[17:41:14] <cehteh> ah no srand
[17:41:31] <cehteh> ,cc printf("%s",(char*[]){"eat","sleep","code"}[rand()%6])
[17:41:33] <candide> cehteh: sleep
[17:41:37] <cehteh> lol
[17:41:39] <dave0> it's rigged!
[17:41:55] *** Joins: mikoto-chan (~mikoto-ch@213.177.151.239)
[17:43:09] <cehteh> ,cc printf("%s",(char*[]){"eat","sleep","code"}[rand()%7])
[17:43:11] <candide> cehteh: sleep
[17:43:29] <cehteh> ,cc printf("%s",(char*[]){"eat","sleep","code"}[rand()%11])
[17:43:31] <candide> cehteh:  runtime error: index 6 out of bounds for type 'char *[3]'  runtime error: load of address 0x7fffffffe310 with insufficient space for an object of type 'char *'    Program received signal SIGSEGV, Segmentation fault in __strlen_sse2 () called by main (argc=1, argv=0x7fffffffe428) at statement: printf("%s", (char*[]) {
[17:43:35] <cehteh> finally :)
[17:44:31] <malina> :D
[17:45:04] <cehteh> now guess what the rand() value is when it is 1 on mod 3, mod 6 and mod 7, and 3 on mod 11
[17:45:49] *** Joins: fspax (~fspax@46.148.141.211)
[17:45:50] *** Joins: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net)
[17:46:50] *** Quits: tejr (~tejr@user/tejr) (Remote host closed the connection)
[17:47:10] *** Joins: tejr (~tejr@user/tejr)
[17:49:05] *** Quits: dsrt^ (~dsrt@c-24-99-107-170.hsd1.ga.comcast.net) (Remote host closed the connection)
[17:49:08] <malina>  y = ([3(7x + 11)]+7)*11  | mod 16 I was doing this yest in a script , then changed the mod to 42 and 111 *3x37) to look at emulated collisions in output. and at 16 it's bijective hehe. at 111 it repeated itself thrice and at 42 it just spat out 2 values
[17:49:41] <malina> I found it odd then went to sleep. I don't remember much prior on wakeups.
[17:50:03] *** Quits: wardrunal (~goose@167.179.114.36) (Quit: Leaving)
[17:50:48] *** Joins: bolovanos_ (~bolovanos@user/bolovanos)
[17:50:50] *** Quits: MajorBiscuit (~MajorBisc@86-88-79-148.fixed.kpn.net) (Ping timeout: 272 seconds)
[17:52:37] *** Quits: fria (~siesta@112.207.33.219) (Remote host closed the connection)
[17:53:16] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:80cb:fbaa:9eb3:d23c) (Ping timeout: 245 seconds)
[17:54:14] *** Joins: kurahaupo_ (~kurahaupo@115.69.27.211)
[17:55:44] *** Joins: LordJohn (~lordjohn@l37-194-102-53.novotelecom.ru)
[17:58:18] *** Quits: kurahaupo (~kurahaupo@pa49-182-76-6.pa.qld.optusnet.com.au) (Ping timeout: 260 seconds)
[18:02:02] *** Joins: MajorBiscuit (~MajorBisc@2a02:a461:129d:1:6d4c:38a4:18b7:4b48)
[18:02:21] *** sebbu2 is now known as sebbu
[18:02:28] *** Quits: mikoto-chan (~mikoto-ch@213.177.151.239) (Ping timeout: 260 seconds)
[18:04:07] *** Joins: mikoto-chan (~mikoto-ch@213.177.151.239)
[18:06:15] *** Quits: Bandicoot (~bandicoot@45.154.88.240) (Quit: Leaving)
[18:08:15] *** Quits: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[18:08:40] *** Joins: Ex0day (~Ex0day@2001:448a:1082:fe6f:9c1b:cab:1a67:7bc7)
[18:09:12] *** Quits: boB_K7IQ (~boB_K7IQ@c-24-19-1-225.hsd1.wa.comcast.net) (Ping timeout: 272 seconds)
[18:11:21] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[18:11:21] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[18:11:21] *** Joins: wroathe (~wroathe@user/wroathe)
[18:12:20] *** Quits: SGautam (uid286066@id-286066.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[18:16:12] *** Joins: gh34 (~textual@cpe-184-58-181-106.wi.res.rr.com)
[18:17:23] *** Quits: MajorBiscuit (~MajorBisc@2a02:a461:129d:1:6d4c:38a4:18b7:4b48) (Ping timeout: 250 seconds)
[18:17:46] *** Quits: Ex0day (~Ex0day@2001:448a:1082:fe6f:9c1b:cab:1a67:7bc7) (Quit: Leaving)
[18:19:43] *** Joins: reedrichards (~f@2607:f598:bbda:220:5ecb:c90f:2b2e:5278)
[18:19:53] *** Quits: f__ (~f@2607:f598:bbda:220:6df0:1818:3a68:48a2) (Remote host closed the connection)
[18:21:22] *** Joins: AstaraWorld (~AstaraWor@2001:448a:1082:fe6f:9c1b:cab:1a67:7bc7)
[18:25:15] *** Quits: vicfred (~vicfred@user/vicfred) (Quit: Leaving)
[18:26:01] *** AstaraWorld is now known as hackerworld
[18:26:11] *** Quits: APic (apic@apic.name) (Quit: [TLS] Client upgrade)
[18:26:15] <pragma-> Bou, constxd: https://www.iso-9899.info/candide/factoids.html
[18:26:39] *** Joins: APic (apic@apic.name)
[18:26:59] <pragma-> Bou, constxd: if you enable JavaScript for that page, there will be text fields just under each column heading that you can type text into to filter the tables.
[18:27:14] <pragma-> Bou, constxd: You can also click on the headings to sort them.
[18:27:34] *** Quits: hackerworld (~AstaraWor@2001:448a:1082:fe6f:9c1b:cab:1a67:7bc7) (Quit: Leaving)
[18:27:35] <pragma-> constxd: http://www.iso-9899.info/candide/quotegrabs.html also exists
[18:27:55] <pragma-> (both of those pages haven't been updated since 2019, but that's recent enough, innit?)
[18:27:56] *** Joins: AstaraWorld (~AstaraWor@2001:448a:1082:fe6f:9c1b:cab:1a67:7bc7)
[18:28:28] *** AstaraWorld is now known as ndut2
[18:28:34] *** Joins: the_lanetly_052 (~the_lanet@194.135.168.23)
[18:28:55] *** Joins: varaindemian (uid73404@id-73404.ilkley.irccloud.com)
[18:29:17] *** Joins: omegatron (~some@p54bd5280.dip0.t-ipconnect.de)
[18:29:28] *** Joins: kaph (~kaph@net-93-67-57-97.cust.vodafonedsl.it)
[18:30:12] *** Quits: LucaTM (~LucaTM@user/lucatm) (Ping timeout: 240 seconds)
[18:30:38] *** Quits: Tempesta (~Tempesta@user/tempesta) (Read error: Connection reset by peer)
[18:30:53] <Bou> so "my penis is defined as unsigned char" has been there for at least 3 years
[18:31:37] <constxd> i could not find those pages at all from the front page of the wiki
[18:31:41] <pragma-> 2012/04/03 19:51:39
[18:31:58] <pragma-> constxd: yeah, the candide main page on the wiki redirects to the github now
[18:32:08] <pragma-> ,factoids
[18:32:08] <candide> List of candide's factoids: http://www.iso-9899.info/candide/factoids.html
[18:32:10] <pragma-> ,quotegrabs
[18:32:10] <candide> For quotegrab commands: http://www.iso-9899.info/wiki/Candide#Quotegrabs -- For a table of grabbed quotes: http://www.iso-9899.info/candide/quotegrabs.html
[18:34:00] <pragma-> ,quotegrabs
[18:34:00] <candide> For quotegrab commands: https://github.com/pragma-/pbot/blob/master/doc/Plugins/Quotegrabs.md -- For a table of grabbed quotes: http://www.iso-9899.info/candide/quotegrabs.html
[18:34:01] * pragma- nods.
[18:34:06] <pragma-> (fixed link)
[18:35:25] <Bou> cool stuff, thanks
[18:35:29] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[18:35:32] *** Joins: machaddr (~machaddr@a79-168-74-18.cpe.netcabo.pt)
[18:36:17] *** Quits: machaddr (~machaddr@a79-168-74-18.cpe.netcabo.pt) (Client Quit)
[18:36:59] *** Joins: machaddr (~machaddr@a79-168-74-18.cpe.netcabo.pt)
[18:37:50] *** Joins: Tempesta (~Tempesta@user/tempesta)
[18:38:11] *** Quits: alch (~alch@151.38.177.226) (Read error: Connection reset by peer)
[18:38:32] *** Quits: machaddr (~machaddr@a79-168-74-18.cpe.netcabo.pt) (Client Quit)
[18:39:06] *** Joins: machaddr (~machaddr@a79-168-74-18.cpe.netcabo.pt)
[18:39:41] *** Quits: fspax (~fspax@46.148.141.211) (Ping timeout: 246 seconds)
[18:40:14] <constxd> ,rq 626
[18:40:14] <candide> No quotes grabbed for nick 626 in channel #c yet (Usage: rq [nick [channel [text]]] [-c <channel>] [-t <text>]).
[18:40:35] *** Joins: oxfuxxx (~oxfuxxx@193.9.112.237)
[18:40:39] <pragma-> `getq` gets by quote-id.
[18:40:56] <pragma-> `rq` is by nick/text.
[18:41:11] *** Joins: LucaTM (~LucaTM@user/lucatm)
[18:41:35] <constxd> ,getq 626
[18:41:36] <candide> 626: grabbed by marchelzo!~marchelzo@unaffiliated/marchelzo in #c on Sat Nov 19 12:05:21 2016 [5 years and 134 days ago] <takitus> The Bourne shell and Perl are on nearly equal levels of suck. <f﻿std> only outsucked by your mum
[18:41:37] <pragma-> `getq` shows more verbose data, including who grabbed it and when. `rq` shows just the quote itself.
[18:41:51] *** Joins: y0m0n (~NA@5-12-91-184.residential.rdsnet.ro)
[18:42:01] *** Quits: Burgundy (~NA@5-12-91-184.residential.rdsnet.ro) (Ping timeout: 245 seconds)
[18:42:05] *** Quits: tech_exorcist (13203@user/tech-exorcist/x-0447479) (Quit: See you later)
[18:42:16] <constxd> these are all dead now
[18:42:24] *** Joins: alch (~alch@151.36.201.101)
[18:42:24] <pragma-> There is a custom `qget` command that does `getq` and then strips the extra data... bit of a hack, but whatever!
[18:42:24] <constxd> ,ramblings-tias
[18:42:25] <candide> http://ramblings.implicit.net/posts/2014/4/20/c-is-not-a-try-it-and-see-language
[18:42:28] *** Joins: cosimone` (~user@93-47-230-184.ip115.fastwebnet.it)
[18:42:32] <pragma-> ,show qget
[18:42:32] <candide> [global] qget: /call getq $args | {sed s/.*?] //}
[18:42:39] <constxd> oh wait no that one didn't 404
[18:42:50] *** Quits: seifeslimene (~seifeslim@197.2.39.226) (Quit: Client closed)
[18:43:06] *** Joins: seifeslimene (~seifeslim@197.2.39.226)
[18:43:34] <pragma-> Yeah, I hate it when links die.
[18:43:46] <constxd> did Chris die
[18:43:59] <pragma-> There was a period in 2008 or so where I was wgetting all my favorite websites because I was afraid the links would 404 eventually.
[18:44:01] *** Quits: dave0 (~dave0@069.d.003.ncl.iprimus.net.au) (Quit: dave's not here)
[18:44:24] <pragma-> There are a lot of websites that I can no longer find now. :(
[18:44:31] *** Joins: clamiax (~clamiax@net-93-65-240-75.cust.vodafonedsl.it)
[18:44:51] *** Quits: cosimone (~user@93-47-230-184.ip115.fastwebnet.it) (Ping timeout: 260 seconds)
[18:44:58] <constxd> yeah thank god for archive.org it's not perfect but has saved me many times
[18:46:22] *** Joins: mad_enz (~mad_enz@lnsm4-toronto12-50-101-118-206.internet.virginmobile.ca)
[18:46:59] <Bou> ,cc for (int i=0;i<67;i++) putchar("earoe  e cet,pe latedps"[(17*i)%23]); // hm, somehow this doesn't work here, but it runs fine on my own system and godbolt?
[18:47:01] <candide> Bou: et,
[18:47:26] *** Joins: Akiva (~Akiva@user/Akiva)
[18:47:33] <pragma-> I see this in the log: et, \x00atesleop crde aepeet, \x00atesleop crde aepeet, \x00atesleop crde ae
[18:47:36] <Bou> my brain is fried today so it's probably a dumb mistake but I don't get it
[18:47:51] <pragma-> There are null bytes there.
[18:47:54] *** Quits: squid_game (~squid_gam@194-218-10-146.customer.telia.com) (Ping timeout: 250 seconds)
[18:48:55] *** Quits: cvmn (~caveman@gateway/tor-sasl/caveman) (Ping timeout: 240 seconds)
[18:49:08] *** Quits: jkotra (~jkotra@106.212.230.185) (Ping timeout: 260 seconds)
[18:49:16] <Bou> odd. the string is 23 chars and (17*i)%23 should always be 0-22 inclusive, no?
[18:49:54] <pragma-> It's 7:19 am for me. Too early for me to think about this!
[18:50:27] <Bou> looks like it changes the string somehow before compiling
[18:51:28] <pragma-> ,cc paste
[18:51:32] <candide> pragma-: https://0x0.st/oqUc.txt
[18:51:42] *** Joins: MajorBiscuit (~MajorBisc@2a02:a461:129d:1:6d4c:38a4:18b7:4b48)
[18:51:52] <Bou> see, the double space gets removed
[18:51:59] <pragma-> Hm.
[18:52:15] <pragma-> Interesting.
[18:52:23] <pragma-> ,cc -paste puts("hello      world");
[18:52:26] <candide> pragma-: https://0x0.st/oqUT.txt
[18:52:30] *** Quits: machaddr (~machaddr@a79-168-74-18.cpe.netcabo.pt) (Quit: Leaving)
[18:52:38] <constxd> ,cc print(sizeof "      ");
[18:52:40] <candide> constxd:  sizeof "      " = 7
[18:52:53] <constxd> very spooky
[18:53:16] <pragma-> ,cc puts("earoe  e cet,pe latedps");
[18:53:18] <candide> pragma-: earoe  e cet,pe latedps
[18:53:28] * pragma- squints at Bou suspiciously.
[18:53:47] *** Quits: y0m0n (~NA@5-12-91-184.residential.rdsnet.ro) (Ping timeout: 250 seconds)
[18:53:47] *** Joins: Burgundy (~NA@5-12-91-184.residential.rdsnet.ro)
[18:53:47] *** Inline__ is now known as Inline
[18:54:33] <pragma-> ,cc -paste putchar("earoe  e cet,pe latedps"[(17*2)%23]);
[18:54:37] <candide> pragma-: https://0x0.st/oqUm.txt
[18:54:50] <pragma-> Hm, it disappeared there.
[18:54:52] <Bou> rofl, how
[18:55:05] *** Joins: machaddr (~machaddr@a79-168-74-18.cpe.netcabo.pt)
[18:55:05] <pragma-> ,cc -paste putchar("earoe  e cet,pe latedps"[(17*2)%23]); 0;
[18:55:09] <candide> pragma-: https://0x0.st/oqUa.txt
[18:55:35] <pragma-> Hm. I guess I'll have to investigate that after I wake up a bit more!
[18:56:38] <ioxzev1z> I see ',' in output
[18:56:57] <pragma-> Yeah, print_last_statement() doesn't output anything if the program itself produces anything on stdout.
[18:57:58] *** Joins: mzxtuelkl__ (~mzxtuelkl@user/mzxtuelkl)
[18:58:06] <pragma-> https://github.com/pragma-/pbot/blob/master/applets/pbot-vm/guest/bin/guest-gdb#L435
[19:00:43] *** Joins: SaltHilStroller_ (~SaltHillS@206.223.160.26)
[19:01:23] *** Quits: mzxtuelkl_ (~mzxtuelkl@user/mzxtuelkl) (Ping timeout: 246 seconds)
[19:01:35] *** Quits: ioxzev1z (~ioxzev1z@user/ioxzev1z) (Quit: Leaving)
[19:02:18] <Bou> ,cc const char s[]="earoe  e cet,pe latedps"; for (int i=0;i<67;i++) putchar(s[(17*i)%23]); // ... this works
[19:02:20] <candide> Bou: eat sleep code repeat, eat sleep code repeat, eat sleep code repeat
[19:02:35] *** Quits: ndut2 (~AstaraWor@2001:448a:1082:fe6f:9c1b:cab:1a67:7bc7) (Quit: Leaving)
[19:03:22] *** Joins: tech_exorcist (13203@user/tech-exorcist/x-0447479)
[19:05:53] <pragma-> Bou: It's probably something really silly that I overlooked in a regex somewhere. Don't waste too much time on it. :) I'll fix it as soon as the fog clears from my head.
[19:06:30] <pragma-> I didn't sleep too well and I'm still quite tired.
[19:07:25] *** Quits: tech_exorcist (13203@user/tech-exorcist/x-0447479) (Client Quit)
[19:09:06] *** Quits: cart_ (~cart@2a01:4c8:418:24b8:51a2:f081:9378:1485) (Ping timeout: 245 seconds)
[19:09:14] <fizzie> ,cc for (int i=0;i<67;i++) putchar("earoe "" e cet,pe latedps"[(17*i)%23]); // just replace all multi-spaces with some kludgy workaround
[19:09:17] <candide> fizzie: eat sleep code repeat, eat sleep code repeat, eat sleep code repeat
[19:09:39] <pragma-> hmm
[19:10:15] *** Joins: ioxzev1z (~ioxzev1z@user/ioxzev1z)
[19:12:35] *** Quits: pulse (~pulse@user/pulse) (Ping timeout: 246 seconds)
[19:12:58] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Quit: Life beckons)
[19:13:02] *** Joins: Enitin (~Enitin@82.180.145.223)
[19:13:36] *** Quits: Ox000 (~jy@166.147.161.66.ded-dsl.fuse.net) (Remote host closed the connection)
[19:15:26] *** Joins: tech_exorcist (~tech_exor@user/tech-exorcist/x-0447479)
[19:15:38] *** Quits: s1b1 (~s1b1@user/s1b1) (Quit: ZNC 1.8.2+deb2+b1 - https://znc.in)
[19:15:40] *** Joins: pulse (~pulse@user/pulse)
[19:15:45] *** Quits: Murray7501 (~Murray@user/Murray7501) (Quit: leaving)
[19:15:48] <Bou> ,cc for (int i=0;i<67;i++) putchar( "earoe  e cet,pe latedps" [(17*i)%23]); // all it needs is a space between string and [
[19:15:50] <candide> Bou: eat sleep code repeat, eat sleep code repeat, eat sleep code repeat
[19:16:05] <pragma-> Yeah, I was starting to suspect that!
[19:16:27] <pragma-> Now to find the regex...
[19:16:34] <pragma-> In an hour or two!
[19:17:04] <pragma-> I need breakfast.
[19:17:36] <Bou> hah no rush, enjoy your brekkie
[19:17:50] *** Quits: cosimone` (~user@93-47-230-184.ip115.fastwebnet.it) (Ping timeout: 246 seconds)
[19:18:30] *** Joins: s1b1 (~s1b1@user/s1b1)
[19:19:26] *** Quits: sebn (~sebn@c90-142-43-192.bredband.tele2.se) (Remote host closed the connection)
[19:19:41] *** Joins: sebn (~sebn@c90-142-43-192.bredband.tele2.se)
[19:19:50] *** Quits: machaddr (~machaddr@a79-168-74-18.cpe.netcabo.pt) (Remote host closed the connection)
[19:19:52] *** Quits: APic (apic@apic.name) (Remote host closed the connection)
[19:21:30] *** Quits: cdman (~dcm@user/dmc/x-4369397) (Quit: Leaving)
[19:21:48] *** Joins: machaddr (~machaddr@a79-168-74-18.cpe.netcabo.pt)
[19:22:11] *** Quits: Enitin (~Enitin@82.180.145.223) (Ping timeout: 260 seconds)
[19:24:59] *** Quits: MajorBiscuit (~MajorBisc@2a02:a461:129d:1:6d4c:38a4:18b7:4b48) (Ping timeout: 260 seconds)
[19:25:56] *** Quits: slidercrank (~slidercra@user/slidercrank) (Ping timeout: 260 seconds)
[19:28:05] *** Joins: reset (~reset@user/reset)
[19:28:06] *** Joins: Enitin (~Enitin@82.102.22.86)
[19:28:22] *** Quits: kurahaupo_ (~kurahaupo@115.69.27.211) (Ping timeout: 272 seconds)
[19:31:37] *** Joins: Murray7501 (~Murray@user/Murray7501)
[19:32:13] *** Quits: malina (~malina@user/malina) (Quit: malina)
[19:32:27] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[19:33:52] *** Quits: Murray7501 (~Murray@user/Murray7501) (Client Quit)
[19:34:03] *** Quits: Enitin (~Enitin@82.102.22.86) (Ping timeout: 260 seconds)
[19:34:11] *** Joins: Murray7501 (~Murray@user/Murray7501)
[19:34:34] *** Joins: cosimone` (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[19:37:13] *** Quits: Murray7501 (~Murray@user/Murray7501) (Client Quit)
[19:37:48] *** Joins: Murray7501 (~Murray@user/Murray7501)
[19:38:08] *** Quits: zer0x (~zer0x@1.55.14.27) (Ping timeout: 260 seconds)
[19:38:59] *** Joins: Ox000 (~jy@166.147.161.66.ded-dsl.fuse.net)
[19:39:06] *** Quits: Murray7501 (~Murray@user/Murray7501) (Client Quit)
[19:39:21] *** Quits: Ox000 (~jy@166.147.161.66.ded-dsl.fuse.net) (Client Quit)
[19:39:43] *** Joins: Ox000 (~jy@166.147.161.66.ded-dsl.fuse.net)
[19:40:34] *** Joins: FluffyMask (~masque@user/fluffymask)
[19:40:39] *** Joins: Murray7501 (~Murray@user/Murray7501)
[19:41:38] <Murray7501> :)
[19:42:27] *** Quits: mrus (~mrus@gateway/tor-sasl/mrus) (Remote host closed the connection)
[19:42:48] *** Quits: cosimone` (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Ping timeout: 260 seconds)
[19:42:49] *** Joins: mrus (~mrus@gateway/tor-sasl/mrus)
[19:43:19] *** Joins: inlight (~n0ise@user/inlight)
[19:44:13] *** Joins: boB_K7IQ (~boB_K7IQ@152.44.147.180)
[19:45:16] <Inline> heyy
[19:47:08] *** Joins: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br)
[19:48:36] *** Joins: roger (~rogerx@user/roger)
[19:49:32] *** Joins: KimK (~KimK@ip98-186-40-208.ks.ks.cox.net)
[19:49:55] *** Quits: roger (~rogerx@user/roger) (Client Quit)
[19:50:51] *** Joins: MajorBiscuit (~MajorBisc@86-88-79-148.fixed.kpn.net)
[19:51:03] *** Quits: MajorBiscuit (~MajorBisc@86-88-79-148.fixed.kpn.net) (Client Quit)
[19:51:34] *** Joins: moog__ (~moog@98.97.85.156)
[19:52:51] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:d99d:3b0b:7662:bc00)
[19:53:29] *** Joins: malina (~malina@user/malina)
[19:54:23] *** Quits: moog_ (~moog@107.126.53.130) (Ping timeout: 260 seconds)
[19:55:10] *** Joins: Bandicoot (~bandicoot@45.154.88.240)
[19:58:07] *** Quits: bolovanos_ (~bolovanos@user/bolovanos) (Ping timeout: 260 seconds)
[19:58:45] *** Joins: f__ (~f@2607:f598:bbda:220:97e8:2278:b249:1e41)
[19:59:00] *** Joins: zer0x (~zer0x@1.55.14.27)
[19:59:44] *** Quits: reedrichards (~f@2607:f598:bbda:220:5ecb:c90f:2b2e:5278) (Remote host closed the connection)
[20:00:50] *** Joins: APic (apic@apic.name)
[20:04:53] *** Quits: machaddr (~machaddr@a79-168-74-18.cpe.netcabo.pt) (Quit: Leaving)
[20:07:25] *** Joins: fspax (~fspax@46.148.141.211)
[20:07:34] *** Quits: KimK (~KimK@ip98-186-40-208.ks.ks.cox.net) (Ping timeout: 260 seconds)
[20:07:36] *** Joins: machaddr (~machaddr@a79-168-74-18.cpe.netcabo.pt)
[20:09:56] *** Quits: seifeslimene (~seifeslim@197.2.39.226) (Quit: Client closed)
[20:13:56] *** Quits: Svitkona (~Svitkona@157.245.38.135) (Remote host closed the connection)
[20:14:04] *** Joins: Enitin (~Enitin@82.102.22.86)
[20:15:14] *** Quits: mniip (mniip@libera/staff/mniip) (Ping timeout: 604 seconds)
[20:17:00] *** Quits: seninha (~seninha@user/seninha) (Ping timeout: 240 seconds)
[20:19:29] *** Quits: oxfuxxx (~oxfuxxx@193.9.112.237) (Quit: [H]EAT ROX FUCK R0X SHIT BRIX.)
[20:19:39] *** Joins: meator (~meator@user/meator)
[20:20:05] *** Quits: trisk (~trisk@2601:196:4700:712:8:20ff:fe3e:890e) (Quit: WeeChat 3.4)
[20:20:30] *** Joins: trisk (~trisk@2601:196:4700:712:8:20ff:fe3e:890e)
[20:23:58] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:d99d:3b0b:7662:bc00) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[20:25:23] *** Quits: gh34 (~textual@cpe-184-58-181-106.wi.res.rr.com) (Quit: Textual IRC Client: www.textualapp.com)
[20:26:36] *** Joins: zeenk (~zeenk@2a02:2f04:a313:d600:8d26:ec9f:3ff6:fc94)
[20:26:59] *** Joins: MerrinX (~merrinx@ti0028a400-2319.bb.online.no)
[20:28:52] *** Joins: kuber (~kuber@75-172-6-223.tukw.qwest.net)
[20:31:03] *** Quits: fspax (~fspax@46.148.141.211) (Ping timeout: 250 seconds)
[20:34:56] *** Joins: MajorBiscuit (~MajorBisc@2a02:a461:129d:1:6d4c:38a4:18b7:4b48)
[20:34:57] *** Quits: meator (~meator@user/meator) (Ping timeout: 250 seconds)
[20:35:39] *** Joins: mniip (mniip@libera/staff/mniip)
[20:37:33] *** Quits: malina (~malina@user/malina) (Quit: malina)
[20:38:09] *** Quits: mzxtuelkl__ (~mzxtuelkl@user/mzxtuelkl) (Read error: Connection reset by peer)
[20:39:50] *** Joins: mzxtuelkl (~mzxtuelkl@user/mzxtuelkl)
[20:40:43] *** Joins: kurahaupo (~kurahaupo@115.69.27.211)
[20:41:58] *** Quits: tech_exorcist (~tech_exor@user/tech-exorcist/x-0447479) (Quit: Disconnecting)
[20:44:37] *** Joins: Svitkona (~Svitkona@157.245.38.135)
[20:46:13] *** Quits: machaddr (~machaddr@a79-168-74-18.cpe.netcabo.pt) (Remote host closed the connection)
[20:48:06] *** Joins: machaddr (~machaddr@a79-168-74-18.cpe.netcabo.pt)
[20:48:44] *** Quits: varaindemian (uid73404@id-73404.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[20:50:41] *** Joins: ddakx (~ddakx@user/ddakx)
[20:50:49] *** Quits: ddakx (~ddakx@user/ddakx) (Client Quit)
[20:53:02] *** Quits: zmt00 (~zmt00@user/zmt00) (Read error: Connection reset by peer)
[20:54:23] *** Joins: melty_cheese (~melty_che@70.58.57.135)
[20:54:55] *** Joins: zmt00 (~zmt00@user/zmt00)
[21:01:46] *** Quits: zeenk (~zeenk@2a02:2f04:a313:d600:8d26:ec9f:3ff6:fc94) (Quit: Konversation terminated!)
[21:04:22] *** Quits: jack_rabbit (~knusbaum@hpnd-dhcp-173-46-246-97.bloombb.net) (Quit: ZNC 1.8.2 - https://znc.in)
[21:04:31] <pragma-> A woman tells her husband "While you are at the store, pick up some eggs." He never returned.
[21:05:52] *** Quits: epony (epony@user/epony) (Read error: Connection reset by peer)
[21:06:28] <pragma-> An engineer, a biologist and a mathematician witness two people enter a building, and some time later three people exit. "My initial measurement must have been wrong" thinks the engineer. "They must have reproduced" thinks the biologist. "Now if one more person enters the building there will be no people inside" thinks the mathematician.
[21:06:50] *** Joins: epony (epony@user/epony)
[21:08:21] *** Quits: unlink2 (~unlink@p200300ebcf19f600f31648a859b660c5.dip0.t-ipconnect.de) (Remote host closed the connection)
[21:09:08] *** Joins: cosimone (~user@93-47-230-184.ip115.fastwebnet.it)
[21:09:18] *** Joins: knusbaum (~knusbaum@hpnd-dhcp-173-46-246-97.bloombb.net)
[21:15:28] *** Joins: byteskeptical (~amnesia@user/byteskeptical)
[21:15:34] *** Joins: bebyx (~Thunderbi@user/bebyx)
[21:16:19] *** Joins: rgrinberg (~textual@177.248.156.216)
[21:16:53] *** Quits: LordJohn (~lordjohn@l37-194-102-53.novotelecom.ru) (Read error: Connection reset by peer)
[21:18:10] *** Quits: alex11 (~alex11@user/alex11) (Read error: Connection reset by peer)
[21:19:50] *** Quits: knusbaum (~knusbaum@hpnd-dhcp-173-46-246-97.bloombb.net) (Quit: ZNC 1.8.2 - https://znc.in)
[21:19:56] *** Quits: Ox000 (~jy@166.147.161.66.ded-dsl.fuse.net) (Remote host closed the connection)
[21:22:52] *** Joins: alex11 (~alex11@user/alex11)
[21:23:28] *** Joins: knusbaum (~knusbaum@hpnd-dhcp-173-46-246-97.bloombb.net)
[21:23:46] *** Quits: Svitkona (~Svitkona@157.245.38.135) (Quit: The Lounge - https://thelounge.chat)
[21:28:26] *** Joins: Svitkona (~Svitkona@157.245.38.135)
[21:29:03] *** Joins: lkor (~lionkor@beammp/staff/lionkor)
[21:29:18] *** Joins: squid_game (~squid_gam@37.250.0.97.bredband.tre.se)
[21:29:33] *** Quits: lionkor (~lionkor@beammp/staff/lionkor) (Ping timeout: 260 seconds)
[21:31:55] *** Joins: oxfuxxx (~oxfuxxx@193.9.112.237)
[21:31:56] *** Joins: kor1 (~kor1@201.17.127.170)
[21:32:12] *** Quits: Svitkona (~Svitkona@157.245.38.135) (Client Quit)
[21:32:37] *** Joins: Svitkona (~Svitkona@157.245.38.135)
[21:33:34] *** Quits: Svitkona (~Svitkona@157.245.38.135) (Client Quit)
[21:33:36] *** Quits: knusbaum (~knusbaum@hpnd-dhcp-173-46-246-97.bloombb.net) (Quit: ZNC 1.8.2 - https://znc.in)
[21:34:02] *** Quits: kor1 (~kor1@201.17.127.170) (Client Quit)
[21:34:13] *** Joins: kor1 (~kor1@user/kor1)
[21:35:26] *** Joins: dsrt^ (~dsrt@c-24-99-107-170.hsd1.ga.comcast.net)
[21:35:43] *** Quits: squid_game (~squid_gam@37.250.0.97.bredband.tre.se) (Remote host closed the connection)
[21:36:52] *** Quits: kor1 (~kor1@user/kor1) (Client Quit)
[21:37:19] *** Joins: kor1 (~kor1@user/kor1)
[21:38:39] *** Joins: Svitkona (~Svitkona@157.245.38.135)
[21:41:49] *** Quits: kor1 (~kor1@user/kor1) (Ping timeout: 240 seconds)
[21:42:34] *** Joins: kor1 (~kor1@user/kor1)
[21:43:52] *** Quits: Thedarkb (~Thedarkb@92.40.196.0.threembb.co.uk) (Remote host closed the connection)
[21:44:02] *** Joins: knusbaum (~knusbaum@hpnd-dhcp-173-46-246-97.bloombb.net)
[21:45:41] *** Quits: oxfuxxx (~oxfuxxx@193.9.112.237) (Quit: [H]EAT ROX FUCK R0X SHIT BRIX.)
[21:46:17] *** Joins: oxfuxxx (~oxfuxxx@193.9.112.237)
[21:46:52] *** Quits: kor1 (~kor1@user/kor1) (Client Quit)
[21:47:18] *** Joins: kor1 (~kor1@user/kor1)
[21:47:27] *** Quits: melty_cheese (~melty_che@70.58.57.135) ()
[21:47:44] *** Quits: knusbaum (~knusbaum@hpnd-dhcp-173-46-246-97.bloombb.net) (Client Quit)
[21:48:41] *** Quits: iomari891 (~iomari891@197.210.77.28) (Ping timeout: 246 seconds)
[21:51:28] *** Quits: oxfuxxx (~oxfuxxx@193.9.112.237) (Quit: [H]EAT ROX FUCK R0X SHIT BRIX.)
[21:51:57] *** Joins: oxfuxxx (~oxfuxxx@193.9.112.237)
[21:52:41] *** Joins: kkd (~kkd@255.205.154.104.bc.googleusercontent.com)
[21:52:44] *** Joins: knusbaum (~knusbaum@hpnd-dhcp-173-46-246-97.bloombb.net)
[21:53:03] *** Quits: oxfuxxx (~oxfuxxx@193.9.112.237) (Client Quit)
[21:53:16] *** Quits: kor1 (~kor1@user/kor1) (Ping timeout: 245 seconds)
[21:53:22] *** Joins: jmdaemon (~jmdaemon@user/jmdaemon)
[21:54:02] *** Quits: kurahaupo (~kurahaupo@115.69.27.211) (Ping timeout: 272 seconds)
[21:56:07] *** Joins: neverfindme (~hayden@158.123.160.43)
[21:57:58] *** Joins: Ox000 (~jy@74.215.12.46)
[21:58:13] *** Quits: neverfindme (~hayden@158.123.160.43) (Remote host closed the connection)
[22:00:19] *** Quits: Bandicoot (~bandicoot@45.154.88.240) (Quit: Leaving)
[22:00:55] *** Quits: machaddr (~machaddr@a79-168-74-18.cpe.netcabo.pt) (Quit: Leaving)
[22:01:14] *** Joins: reedrichards (~f@2607:f598:bbda:220:514f:5d5b:c74f:811d)
[22:01:30] *** Joins: oxfuxxx (~oxfuxxx@193.9.112.237)
[22:02:17] *** Joins: machaddr (~machaddr@a79-168-74-18.cpe.netcabo.pt)
[22:02:46] *** Quits: knusbaum (~knusbaum@hpnd-dhcp-173-46-246-97.bloombb.net) (Quit: ZNC 1.8.2 - https://znc.in)
[22:02:57] *** Quits: f__ (~f@2607:f598:bbda:220:97e8:2278:b249:1e41) (Remote host closed the connection)
[22:03:58] *** Quits: inlight (~n0ise@user/inlight) (Ping timeout: 260 seconds)
[22:04:12] *** Quits: MajorBiscuit (~MajorBisc@2a02:a461:129d:1:6d4c:38a4:18b7:4b48) (Ping timeout: 240 seconds)
[22:06:43] *** Joins: knusbaum (~knusbaum@hpnd-dhcp-173-46-246-97.bloombb.net)
[22:09:10] *** Joins: strajder (~strajder@user/strajder)
[22:09:50] *** Quits: zer0x (~zer0x@1.55.14.27) (Ping timeout: 260 seconds)
[22:10:53] *** Quits: kkd (~kkd@255.205.154.104.bc.googleusercontent.com) (Remote host closed the connection)
[22:11:35] *** Joins: MajorBiscuit (~MajorBisc@86-88-79-148.fixed.kpn.net)
[22:14:06] *** Quits: gnoo (gnoo@user/gnoo) (Ping timeout: 245 seconds)
[22:14:49] <pragma-> https://youtu.be/i2Ld9YNUWls
[22:14:50] <candide> Title of pragma-'s link: Doom Classic: RAY TRACED - Trailer - YouTube
[22:17:36] *** Joins: kurahaupo (~kurahaupo@115.69.27.211)
[22:18:12] *** Quits: knusbaum (~knusbaum@hpnd-dhcp-173-46-246-97.bloombb.net) (Ping timeout: 240 seconds)
[22:19:33] *** Joins: inlight (~n0ise@user/inlight)
[22:19:49] *** Joins: knusbaum (knusbaum@gateway/vpn/protonvpn/knusbaum)
[22:20:07] *** Joins: Bandicoot (~bandicoot@45.154.88.240)
[22:22:09] *** Quits: kurahaupo (~kurahaupo@115.69.27.211) (Ping timeout: 256 seconds)
[22:22:22] *** Joins: emias (~holger@home.zedat.fu-berlin.de)
[22:22:33] *** Joins: Alhazred (~Alhazred@45.129.56.151)
[22:23:51] *** Quits: mniip (mniip@libera/staff/mniip) (Ping timeout: 606 seconds)
[22:24:17] *** Joins: mniip (mniip@libera/staff/mniip)
[22:24:50] <cehteh> raytracing mixed with textures that have lack of detail looks even crappier than the original imo
[22:25:04] *** Quits: yggdrasil (~yggdrasil@67-0-88-35.albq.qwest.net) (Ping timeout: 272 seconds)
[22:25:33] *** Quits: oxfuxxx (~oxfuxxx@193.9.112.237) (Quit: [H]EAT ROX FUCK R0X SHIT BRIX.)
[22:25:38] <koollman> it's really the kind of thing that requires HD textures or procedural textures
[22:25:59] <cehteh> is there a raytrace version of black mesa?
[22:26:07] *** Quits: MajorBiscuit (~MajorBisc@86-88-79-148.fixed.kpn.net) (Quit: WeeChat 3.4)
[22:26:11] <cehteh> https://www.youtube.com/watch?v=Ccv8No-suMs
[22:26:12] <candide> Title of cehteh's link: Black Mesa with Ray Tracing - YouTube
[22:26:28] <cehteh> now thats where it starts to work
[22:27:00] *** Joins: jkotra (~jkotra@106.212.230.185)
[22:31:32] *** Joins: yggdrasil (~yggdrasil@67-0-49-178.albq.qwest.net)
[22:37:48] *** Quits: Ox000 (~jy@74.215.12.46) (Ping timeout: 240 seconds)
[22:39:47] *** Quits: alch (~alch@151.36.201.101) (Ping timeout: 246 seconds)
[22:41:20] *** Joins: riskoir (~karaixx@user/riskoir)
[22:41:46] *** Joins: alch (~alch@151.38.188.138)
[22:45:04] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:d99d:3b0b:7662:bc00)
[22:46:44] *** Joins: Ox000 (~jy@74.215.12.46)
[22:49:12] <pragma-> I still play classic Doom with gzdoom and some mods like better particles and hd textures. I thought the ray tracing looked incredible, but needed a little tweaking in the light brightness values.
[22:49:16] *** Joins: kurahaupo (~kurahaupo@115.69.27.211)
[22:49:21] *** Quits: yggdrasil (~yggdrasil@67-0-49-178.albq.qwest.net) (Ping timeout: 256 seconds)
[22:49:30] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:d99d:3b0b:7662:bc00) (Client Quit)
[22:49:36] <pragma-> I was pretty sad that the video doesn't use my hd textures or better particles mod.
[22:49:45] *** Quits: fe23 (~fe23@2409:8a34:466:6010:751a:4e06:5d2e:2a0f) (Quit: fe23)
[22:50:53] *** Joins: yggdrasil (~yggdrasil@67-0-45-1.albq.qwest.net)
[22:51:46] *** Joins: crankslider (~slidercra@user/slidercrank)
[22:53:56] *** Joins: gnoo (gnoo@user/gnoo)
[22:57:26] *** Quits: kurahaupo (~kurahaupo@115.69.27.211) (Ping timeout: 260 seconds)
[22:57:40] <cehteh> thats minecraft raytracing mod looks even more crappy
[22:57:43] *** Joins: cation21 (cation@user/cation)
[22:59:16] *** Quits: cation (cation@user/cation) (Ping timeout: 272 seconds)
[23:00:07] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[23:00:07] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[23:00:07] *** Joins: wroathe (~wroathe@user/wroathe)
[23:00:14] *** Joins: f__ (~f@2607:f598:bbda:220:51f9:c50f:2d86:718c)
[23:00:59] *** Quits: reedrichards (~f@2607:f598:bbda:220:514f:5d5b:c74f:811d) (Remote host closed the connection)
[23:01:04] *** cation21 is now known as cation
[23:03:16] *** Quits: the_lanetly_052 (~the_lanet@194.135.168.23) (Ping timeout: 245 seconds)
[23:05:07] *** Quits: freakazoid12345 (~matt@2603-9000-cf03-86c3-31a9-8adb-d18d-a939.inf6.spectrum.com) (Read error: Connection reset by peer)
[23:05:44] *** Joins: freakazoid12345 (~matt@2603-9000-cf03-86c3-31a9-8adb-d18d-a939.inf6.spectrum.com)
[23:08:01] *** Quits: kuber (~kuber@75-172-6-223.tukw.qwest.net) (Quit: leaving)
[23:08:08] *** Quits: Inline (~Inline@p200300cd470b2600b0280ee525100d94.dip0.t-ipconnect.de) (Quit: Leaving)
[23:10:15] *** Joins: Inline (~Inline@p200300cd470b2600b0280ee525100d94.dip0.t-ipconnect.de)
[23:10:24] *** Quits: Bandicoot (~bandicoot@45.154.88.240) (Quit: Leaving)
[23:11:16] *** Quits: riskoir (~karaixx@user/riskoir) (Quit: Leaving)
[23:12:17] *** Joins: silkut42[m] (~silkutmat@2001:470:69fc:105::1:6530)
[23:14:26] *** Quits: machaddr (~machaddr@a79-168-74-18.cpe.netcabo.pt) (Quit: Leaving)
[23:15:11] *** Quits: chomwitt (~chomwitt@2a02:587:dc0e:a100:8d19:188:687f:a348) (Ping timeout: 256 seconds)
[23:16:22] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 272 seconds)
[23:16:48] *** Joins: machaddr (~machaddr@a79-168-74-18.cpe.netcabo.pt)
[23:19:45] *** Joins: skapata (~Skapata@2804:14c:87b0:9d2e:8be:80a5:9f91:16e)
[23:19:45] *** Quits: skapata (~Skapata@2804:14c:87b0:9d2e:8be:80a5:9f91:16e) (Changing host)
[23:19:45] *** Joins: skapata (~Skapata@user/skapata)
[23:22:59] *** Joins: kurahaupo (~kurahaupo@115.69.27.211)
[23:26:19] *** Joins: cuhela (~cuhela@188.119.45.227)
[23:27:08] *** Quits: suki (~jimery@116.30.222.11) (Ping timeout: 265 seconds)
[23:27:34] *** Quits: rgrinberg (~textual@177.248.156.216) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[23:28:54] *** Joins: suki (~jimery@116.30.222.11)
[23:31:20] *** Quits: wlemuel (~wlemuel@210.22.124.110) (Read error: Connection reset by peer)
[23:31:31] *** Joins: wlemuel (~wlemuel@210.22.124.110)
[23:32:22] *** Quits: wlemuel (~wlemuel@210.22.124.110) (Read error: Connection reset by peer)
[23:34:44] *** Quits: karakedi (~eAC53C340@user/karakedi) (Ping timeout: 246 seconds)
[23:36:32] *** Joins: wlemuel (~wlemuel@210.22.124.110)
[23:38:28] *** Joins: vicfred (~vicfred@user/vicfred)
[23:38:42] *** Quits: shivesh (~shivesh@user/shivesh) (Quit: leaving)
[23:38:43] *** Joins: cart_ (~cart@213.205.240.212)
[23:38:48] *** Joins: shivesh__ (~shivesh@user/shivesh)
[23:40:39] *** Joins: chomwitt (~chomwitt@ppp-94-67-69-112.home.otenet.gr)
[23:44:05] *** Joins: _ordos (~ordos@155.93.170.232)
[23:44:12] *** Parts: _ordos (~ordos@155.93.170.232) (Leaving)
[23:47:14] *** Joins: reedrichards (~f@2607:f598:bbda:220:c689:2d0c:f743:404a)
[23:47:26] *** Quits: f__ (~f@2607:f598:bbda:220:51f9:c50f:2d86:718c) (Remote host closed the connection)
[23:50:31] *** Quits: cuhela (~cuhela@188.119.45.227) (Ping timeout: 260 seconds)
[23:57:08] *** Quits: cart_ (~cart@213.205.240.212) (Ping timeout: 246 seconds)
[23:59:39] *** Joins: sokan (~sokan@2a02:587:9e1f:c900:227:eff:fe16:865d)
