[00:00:37] *** Quits: cage (~cage@dynamic-adsl-78-15-41-207.clienti.tiscali.it) (Quit: rcirc on GNU Emacs 27.1)
[00:00:58] <etimmons> Shinmera: congrats on the Forge progression! I'm trying to understand it, but am getting tripped up on the `([ 1 2))` in the dependency list of 3. What does that mean?
[00:02:02] *** Quits: jmercouris (sid438340@id-438340.stonehaven.irccloud.com) ()
[00:02:17] *** Joins: jmercouris (sid438340@id-438340.hampstead.irccloud.com)
[00:05:59] <Shinmera> It means the version must be in the interval of versions 1 and 2.
[00:07:04] <Shinmera> https://github.com/Shinmera/forge/blob/master/constraints.lisp#L183-L185
[00:11:29] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Ping timeout: 268 seconds)
[00:12:16] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[00:16:55] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Ping timeout: 252 seconds)
[00:17:06] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[00:19:24] <etimmons> Is that interval closed on both ends?
[00:19:36] <Shinmera> it's inclusive, yes.
[00:20:01] <Shinmera> for the open ended there's the <= or >= as shown in the linked source.
[00:20:46] <Shinmera> Don't have exclusive bounds, though it wouldn't be too hard to add.
[00:20:59] <etimmons> Ok. I think it just threw me for a loop that it was terminated with a closing paren
[00:21:06] <Xach> Shinmera: do you grok the FOR issue? I don't, really
[00:21:20] * Xach reports without grokking
[00:21:26] <etimmons> I'm used to seeing square brackets as closed, parens as open
[00:21:41] <Shinmera> Nope. I haven't looked at it much yet though.
[00:21:46] *** Joins: icer (eric@gateway/vpn/protonvpn/icer)
[00:22:10] <Shinmera> etimmons: It's not terminated with anything, heh. [ is just used for the indicator.
[00:22:19] <Xach> ok
[00:22:26] *** Quits: ln43 (~ln43@user/ln43) (Quit: Connection closed)
[00:22:33] <Shinmera> I'm technically on holidays, so I'm pushing it out a bit :)
[00:23:12] *** Quits: yitzi (~yitzi@173-27-106-188.client.mchsi.com) (Ping timeout: 268 seconds)
[00:23:28] *** Joins: yitzi (~yitzi@173-27-106-188.client.mchsi.com)
[00:25:27] <etimmons> Shinmera : Yeah, I just realized I was miscounting parens
[00:28:09] <Shinmera> I might rename that shorthand to [] to help with that at least
[00:33:45] <Shinmera> etimmons: Let me know if you have any other questions
[00:48:29] *** Quits: scymtym (~user@2001:638:504:20e6:6ac3:87e0:e782:f3fc) (Ping timeout: 268 seconds)
[00:51:05] *** Joins: joe_mad (~jmmanager@62-210-129-237.rev.poneytelecom.eu)
[00:53:03] <pjb> Guest92: have a look at http://informatimago.com/~pjb/files/lisp/common-lisp/flet-or-labels.png
[00:54:09] *** Joins: cosimone (~user@2001:b07:ae5:db26:a7aa:8027:6b4e:2fb3)
[00:55:52] *** Quits: joe_mad (~jmmanager@62-210-129-237.rev.poneytelecom.eu) (Quit: [TalkSoup] Get it today: http://talksoup.aeruder.net)
[01:07:14] *** Quits: gaqwas (~john@dynamic-077-009-164-187.77.9.pool.telefonica.de) (Ping timeout: 265 seconds)
[01:13:22] *** Quits: doyougnu (~user@c-73-25-202-122.hsd1.or.comcast.net) (Ping timeout: 268 seconds)
[01:13:46] *** Quits: peterhil (~peterhil@dsl-hkibng32-54fb52-57.dhcp.inet.fi) (Ping timeout: 260 seconds)
[01:21:23] *** Quits: shka (~herr@109.231.62.239) (Ping timeout: 268 seconds)
[01:30:25] *** Quits: icer (eric@gateway/vpn/protonvpn/icer) (Ping timeout: 268 seconds)
[01:30:59] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[01:31:10] *** Parts: seanw (~spwhitton@debian/spwhitton) ()
[01:31:46] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 252 seconds)
[01:33:20] *** Quits: vats (~vats@103.70.83.191) (Remote host closed the connection)
[01:33:42] *** Lord_of_Life_ is now known as Lord_of_Life
[01:37:53] *** Joins: Oladon (~olad@98.43.81.226)
[01:39:31] *** Quits: Guest92 (~Guest92@97-118-72-33.hlrn.qwest.net) (Ping timeout: 256 seconds)
[01:56:32] *** Quits: cosimone (~user@2001:b07:ae5:db26:a7aa:8027:6b4e:2fb3) (Ping timeout: 268 seconds)
[02:10:47] *** Joins: scymtym (~user@ip-94-114-248-79.unity-media.net)
[02:13:36] *** Quits: khrbt (~znc@user/khrbt) (Quit: ZNC 1.7.2+deb3 - https://znc.in)
[02:13:49] *** Joins: khrbt (~znc@user/khrbt)
[02:18:44] *** Quits: attila_lendvai (~alendvai@catv-213-222-131-28.catv.broadband.hu) (Ping timeout: 268 seconds)
[02:33:06] *** Quits: frgo (~frgo@p200300deef0cee00398daaa4f322e80b.dip0.t-ipconnect.de) (Remote host closed the connection)
[02:33:33] *** Joins: frgo (~frgo@p200300deef0cee0098fe35624283c586.dip0.t-ipconnect.de)
[02:53:42] *** Joins: cjb (~cjbayliss@user/cjb)
[02:56:33] *** Quits: jeosol (~jeosol@76-238-186-228.lightspeed.hstntx.sbcglobal.net) (Quit: Connection closed)
[02:57:47] *** Joins: sm2n_ (~sm2n@user/sm2n)
[03:00:10] *** Quits: sm2n (~sm2n@user/sm2n) (Ping timeout: 260 seconds)
[03:04:59] *** Quits: yitzi (~yitzi@173-27-106-188.client.mchsi.com) (Read error: Connection reset by peer)
[03:05:07] *** Joins: yitzi (~yitzi@173-27-106-188.client.mchsi.com)
[03:08:43] *** Quits: sm2n_ (~sm2n@user/sm2n) (Remote host closed the connection)
[03:09:10] *** Joins: sm2n_ (~sm2n@user/sm2n)
[03:10:13] *** Quits: sm2n_ (~sm2n@user/sm2n) (Remote host closed the connection)
[03:10:46] *** Joins: sm2n_ (~sm2n@user/sm2n)
[03:11:43] *** Quits: sm2n_ (~sm2n@user/sm2n) (Remote host closed the connection)
[03:11:58] *** Quits: hendursa1 (~weechat@user/hendursaga) (Quit: hendursa1)
[03:12:07] *** Joins: icer (eric@gateway/vpn/protonvpn/icer)
[03:12:58] *** Joins: hendursaga (~weechat@user/hendursaga)
[03:13:29] *** Quits: pve (~pve@178-55-14-237.bb.dnainternet.fi) (Quit: leaving)
[03:16:55] *** Quits: lottaquestions (~nick@2607:fa49:503f:6400:50c5:e99b:4101:c387) (Ping timeout: 252 seconds)
[03:22:22] *** Quits: srhm (~srhm@user/srhm) (Quit: Konversation terminated!)
[03:25:56] *** Quits: yitzi (~yitzi@173-27-106-188.client.mchsi.com) (Quit: Leaving)
[03:29:56] *** Joins: srhm (~srhm@user/srhm)
[03:43:53] *** Quits: srhm (~srhm@user/srhm) (Quit: Konversation terminated!)
[04:05:21] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Quit: ERC (IRC client for Emacs 27.2))
[04:07:07] *** Joins: Oladon1 (~olad@98.43.81.226)
[04:09:44] *** Quits: Oladon (~olad@98.43.81.226) (Ping timeout: 268 seconds)
[04:16:34] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.2)
[04:23:01] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[04:23:20] *** Quits: brettgilio (~brettgili@137.184.3.255) (Ping timeout: 256 seconds)
[04:28:31] *** Joins: Guest92 (~Guest92@97-118-72-33.hlrn.qwest.net)
[04:29:51] *** Joins: yitzi (~yitzi@173-27-106-188.client.mchsi.com)
[04:45:34] *** Joins: lisp123 (~lisp123@5.30.23.247)
[04:46:31] *** Quits: random-nick (~random-ni@87.116.183.93) (Ping timeout: 268 seconds)
[04:50:26] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 268 seconds)
[05:16:22] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.2)
[05:16:54] *** Joins: kakuhen (~kakuhen@user/kakuhen)
[05:29:46] *** Quits: Oladon1 (~olad@98.43.81.226) (Quit: Leaving.)
[05:38:51] *** Joins: abrantesasf (abrantesas@gateway/vpn/protonvpn/abrantesasf)
[05:52:23] *** Joins: karlosz (~karlosz@12.196.174.98)
[05:56:12] *** Quits: abrantesasf (abrantesas@gateway/vpn/protonvpn/abrantesasf) (Quit: Leaving)
[05:59:39] *** Quits: karlosz (~karlosz@12.196.174.98) (Ping timeout: 265 seconds)
[06:10:29] *** Joins: karlosz (~karlosz@12.196.174.98)
[06:17:23] *** Quits: amk (~amk@109.255.169.126) (Ping timeout: 268 seconds)
[06:18:21] *** Joins: amk (~amk@109.255.169.126)
[06:27:12] *** Quits: Mandus (~aasmundo@0.51-175-33.customer.lyse.net) (Ping timeout: 265 seconds)
[06:29:10] *** Joins: Mandus (~aasmundo@0.51-175-33.customer.lyse.net)
[06:31:39] *** Joins: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[06:35:16] *** Quits: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 268 seconds)
[07:02:36] *** Joins: sm2n (~sm2n@user/sm2n)
[07:14:05] *** Joins: igemnace (~ian@user/igemnace)
[07:26:44] *** Quits: kakuhen (~kakuhen@user/kakuhen) (Quit: Leaving...)
[07:31:12] <beach> Good morning everyone!
[07:33:33] *** Joins: pillton (~user@2405:b000:703:2::34:248)
[07:34:08] <beach> I admire everyone's patience with Guest92.  That's a very strange way of trying to learn a language.
[07:34:43] <Guest92> What's that?
[07:35:24] <Guest92> Trying to reconcile the differences between two seemingly similar primitive forms in a language by trying to rearticulate it in my own words?
[07:35:29] <Guest92> Seems rather socratic
[07:35:50] <beach> OK.
[07:36:10] <Guest92> You're saying you DON'T try to formulate your understanding in your own words?
[07:36:26] <Guest92> That's a strange way to learn <insert subject>
[07:36:31] <waleee> Guest92: you would love the main maintainer of the pony language
[07:37:00] <Guest92> Why is that? Also WHAT is that?
[07:37:28] <waleee> but you'd have to join their zulip since they jumped the irc-ship even pre freenode-calypse
[07:37:45] <waleee> https://www.ponylang.io/
[07:38:36] <waleee> one of the main maintainers is a huge fan of the socratic method when helping beginners
[07:39:24] *** Quits: Krystof (~user@81.174.155.115) (Ping timeout: 256 seconds)
[07:39:41] <Guest92> The point isn't to be pedantic. What is the main activity one engages in when attending college? Likely writing, which serves the purpose of forcing the student to formulate their understanding in their own terms.
[07:39:48] <Guest92> It reveals understanding, or the lack of understand
[07:39:51] <Guest92> *ing
[07:40:17] <Guest92> What I learned earlier is that my understanding of flet and labels is correct, but my formulation wasn't
[07:40:30] <waleee> sometimes you prefer a quick answer, not an interactive session
[07:40:42] <Guest92> Well I prefer the interaction
[07:41:00] <Guest92> It allows me to confront my assumptions directly, rather than concealing my assumptions until a later time when it becomes costly
[07:41:13] <hayley> I might be unable to navigate the documentation, but a thought I've found more evidence for is that it seems that the Common Lisp standard is unique in describing how you evaluate things, and not just describing the standard library.
[07:43:49] *** Joins: kakuhen (~kakuhen@user/kakuhen)
[07:46:01] <hayley> The exceptions that I can think of are Standard ML, Scheme, TLA+ with operational(?) semantics, and Smalltalk-80 with a metacircular interpreter. Otherwise, it's like you're supposed to get the syntax, evaluation order, and everything else.
[07:48:06] <hayley> Nah, you usually find a description for types and syntax. But evaluation order is often not mentioned, for example.
[07:48:25] <Bike> easier to do when you can write your language at least somewhat as reduction rules, i guess
[07:48:39] <Bike> C and C++ standards do describe evaluation order or lack thereof
[07:49:00] <jcowan> C and Scheme are emphatic that no evaluation order can be counted on
[07:49:32] <hayley> Right. But in languages without fancy standards, it seems that there is absolutely no discussion of evaluation order, not even that it is undefined.
[07:49:53] <Bike> oh, yeah, maybe
[07:49:53] <Guest92> Right, I describe it as user documentation vs implementation documentation
[07:50:34] <hayley> It's not implementation documentation; you couldn't write some classes of programs in that language if you don't know the evaluation order.
[07:50:38] <Guest92> Most language docs treat the user as someone who just wants to know "how do I do x in y language" not "in this context x is evaluated to an intermediate value..." Yeah yeah, but what's the behavior?
[07:50:42] <moon-child> hayley: so you are saying: cl is somewhat unique in that it is standardised at all?
[07:50:54] <Guest92> s/behavior/result/
[07:51:24] <hayley> moon-child: I guess.
[07:51:37] <Bike> understanding the evaluation semantics in detail is actually useful for writing programs correctly, not just for implementing the language
[07:52:02] <Bike> and for reading them
[07:52:34] <beach> Absolutely.
[07:52:49] <Bike> do it vaguely and it's like C compilers for microcontrollers that can't apply optimizations because people keep writing empty for loops to pause execution
[07:55:11] <hayley> With the Pony language website, for example, I only see a tutorial and standard library documentation, and tutorials don't tend to be normative.
[07:56:31] <beach> hayley: With most languages no documentation is normative, because there is no standard.  So, to me, there is then no "language" either.  Just a programming system the behavior of which can change arbitrarily.
[07:56:37] <waleee> they have https://patterns.ponylang.io/ and some lectures but there's sparse docs available
[07:56:37] <hayley> One of the first parts of the tutorial states you use a program called "ponyc" to compile the program. Is an implementation which calls the compiler "pony-compiler" not a correct implementation of Pony?
[07:57:38] <hayley> beach: Yes, I suppose I am indirectly stating that most programming languages are just the description of one programming system.
[07:57:54] <beach> Indeed.
[07:58:33] *** Quits: akoana (~ah@user/akoana) (Quit: leaving)
[07:58:35] <beach> I mean, one of the first sentences I read was that Pony is "open source".  I don't quite know how a programming language can be "open source".
[07:59:38] <hayley> But, even if the documentation is not normative, properties like eager or lazy evaluation are never explicitly mentioned. You're presumably expected to guess that is eagerly evaluated.
[07:59:54] <beach> Yeah, that's bad.
[08:00:51] <hayley> If I managed to teach someone programming only with Haskell and Prolog, for example, I am sure they would struggle to figure out any code in the tutorial, despite having "some experience programming already".
[08:04:12] <jcowan> moon-child: By bno means unique,  There are ISO standards for Ada, Algol 60, APL, Basic, C, C++, C#, Chill, Cobol, ECMAscript (JavaScript), Eiffel, Forth, Fortran, ISLisp, Modula-2, Mumps, Pascal, PL/I, Prolog, Ruby, and SQL.
[08:05:42] <hayley> But still, Smalltalk-80, Standard ML and TLA+ have useful specifications without having any official standards.
[08:05:53] <moon-child> jcowan: hence 'somewhat'.  I'm sure there are many more entries on this list https://en.wikipedia.org/wiki/List_of_programming_languages than languages that have been standardised
[08:06:54] <jcowan> There are also ANSI standards for APT, Common Lisp, Dibol, PL/B, Rexx, and Smalltalk (so there is an official standard for that).  Scheme has an IEEE standard.
[08:07:17] <moon-child> (also: I don't think the forth or apl specs have done anybody much good)
[08:10:08] *** Quits: karlosz (~karlosz@12.196.174.98) (Quit: karlosz)
[08:10:44] <jcowan> SML never went through an official standards org, but its standard is very high quality, including its formal semantics.
[08:10:59] *** Joins: karlosz (~karlosz@12.196.174.98)
[08:11:08] <jcowan> Scheme also has both operational and denotational formal semantics
[08:11:26] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 260 seconds)
[08:15:18] *** Quits: pillton (~user@2405:b000:703:2::34:248) (Quit: ERC (IRC client for Emacs 27.2))
[08:15:40] *** Joins: rain3 (~rain3___@2a02:2f09:d30b:1300:514:bcc7:8202:1798)
[08:18:54] *** Quits: semz (~none@user/semz) (Ping timeout: 260 seconds)
[08:20:52] *** Quits: Bike (~Glossina@71.69.170.70) (Quit: Lost terminal)
[08:30:39] *** Quits: karlosz (~karlosz@12.196.174.98) (Quit: karlosz)
[08:32:00] *** Joins: semz (~none@user/semz)
[08:32:17] *** Joins: karlosz (~karlosz@12.196.174.98)
[08:44:05] *** Joins: pillton (~user@2405:b000:703:2::35:28)
[08:45:47] *** Quits: nature (~nature@mail.blazebone.com) (Ping timeout: 268 seconds)
[08:59:03] *** Joins: fengshaun (~fengshaun@S010680615f0c2c0a.cg.shawcable.net)
[09:01:54] *** Quits: Inline (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431) (Quit: Leaving)
[09:08:52] *** Quits: karlosz (~karlosz@12.196.174.98) (Quit: karlosz)
[09:12:56] *** Joins: ln43 (~ln43@user/ln43)
[09:23:29] *** Joins: gaqwas (~john@dynamic-077-002-107-064.77.2.pool.telefonica.de)
[09:32:33] *** Quits: ln43 (~ln43@user/ln43) (Quit: Connection closed)
[09:33:03] *** Quits: pillton (~user@2405:b000:703:2::35:28) (Quit: ERC (IRC client for Emacs 27.2))
[09:45:33] *** Joins: cosimone (~user@2001:b07:ae5:db26:a7aa:8027:6b4e:2fb3)
[09:49:14] *** Quits: fengshaun (~fengshaun@S010680615f0c2c0a.cg.shawcable.net) (Ping timeout: 265 seconds)
[09:50:50] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Ping timeout: 260 seconds)
[09:52:01] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[10:07:24] *** Quits: cosimone (~user@2001:b07:ae5:db26:a7aa:8027:6b4e:2fb3) (Ping timeout: 268 seconds)
[10:16:30] *** Joins: fengshaun (~fengshaun@S010680615f0c2c0a.cg.shawcable.net)
[10:16:48] *** Joins: lisp123 (~lisp123@5.30.23.247)
[10:20:11] *** Joins: Cymew (~ante@c-e989225c.023-1144-7570702.bbcust.telenor.se)
[10:21:37] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 265 seconds)
[10:23:54] *** Joins: sm2n_ (~sm2n@user/sm2n)
[10:26:18] *** Quits: sm2n (~sm2n@user/sm2n) (Ping timeout: 268 seconds)
[10:26:41] *** Quits: cjb (~cjbayliss@user/cjb) ()
[10:34:42] *** Quits: gaqwas (~john@dynamic-077-002-107-064.77.2.pool.telefonica.de) (Ping timeout: 260 seconds)
[10:38:26] *** Quits: Guest92 (~Guest92@97-118-72-33.hlrn.qwest.net) (Ping timeout: 256 seconds)
[10:56:01] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Ping timeout: 252 seconds)
[10:56:26] *** Joins: amb007 (~a_bakic@1.15.23.93.rev.sfr.net)
[10:59:16] *** Joins: montxero (~user@149.167.149.74)
[10:59:32] *** Joins: shka (~herr@109.231.62.239)
[11:01:48] *** Quits: montxero (~user@149.167.149.74) (Read error: No route to host)
[11:02:23] *** Joins: montxero (~user@149.167.149.74)
[11:02:58] *** Quits: montxero (~user@149.167.149.74) (Read error: No route to host)
[11:04:04] *** Joins: montxero (~user@149.167.149.74)
[11:04:44] *** Quits: montxero (~user@149.167.149.74) (Remote host closed the connection)
[11:13:46] *** Joins: montxero (~user@149.167.149.74)
[11:20:36] *** Joins: silasfox (~user@2001-4dd1-68e2-0-286d-7bf4-8223-de6a.ipv6dyn.netcologne.de)
[11:23:50] *** Quits: montxero (~user@149.167.149.74) (Read error: Connection reset by peer)
[11:24:21] *** Joins: montxero (~user@149.167.149.74)
[11:25:19] <montxero> With cl-sqlite, is it possible to execute sql statements/queries that are already filled? I want to be able to do something akin to (sqlite:execute-non-query *db* "insert into USERS (user_name,age) values (joe,18)")
[11:26:12] <montxero> Currently, I get an error `no such column: joe'
[11:26:54] *** Quits: montxero (~user@149.167.149.74) (Read error: No route to host)
[11:27:10] <_death> you need to quote the string: 'joe'
[11:27:32] *** Joins: montxero (~user@149.167.149.74)
[11:28:19] *** Joins: pve (~pve@87-93-229-225.bb.dnainternet.fi)
[11:29:10] <flip214> montxero: or, even better, pass it in as an argument instead of inline, in the string
[11:32:51] <montxero> _death: thanks will try that
[11:33:05] <montxero> flip214: the query will be generated before hand
[11:33:44] <montxero> _death: Thank you sir!
[11:34:33] <akater[m]> Would it make sense for Common Lisp to have `compiler-macrolet`?
[11:37:28] <hayley> There was a compiler-let once.
[11:37:41] <hayley> Apparently it didn't make sense, so it was removed.
[11:38:11] <semz> what could you do with compiler-macrolet that you couldn't do with macrolet?
[11:40:04] <semz> if you want a local optimization you can just put it there, it's local after all
[11:40:28] <akater[m]> semz: compiler-macrolet could optimize (funcall f ..) or (apply f ..) for local f's
[11:42:18] <saturn2> it doesn't seem very useful, since the compiler would be compiling the local functions anyway
[11:45:14] *** Quits: amb007 (~a_bakic@1.15.23.93.rev.sfr.net) (Ping timeout: 265 seconds)
[11:45:37] *** Joins: amb007 (~a_bakic@8.36.22.93.rev.sfr.net)
[11:52:05] <flip214> hayley: http://www.lispworks.com/documentation/lw50/CLHS/Issues/iss066_w.htm Issue COMPILER-LET-CONFUSION Writeup
[11:52:38] <flip214> OTOH I've wanted to pass data to macros a few times, to modify the expansion behaviour
[11:53:20] <flip214> I think I went with (eval-when () (setf *flag* t)) (macro-invocations)
[11:53:20] <saturn2> several implementations have compiler-let even though it's not in the standard
[11:54:59] *** Quits: amb007 (~a_bakic@8.36.22.93.rev.sfr.net) (Read error: Connection reset by peer)
[11:57:04] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[11:57:07] *** Joins: ln43 (~ln43@user/ln43)
[12:07:10] *** Joins: silasfox` (~user@xdsl-84-44-182-29.nc.de)
[12:07:39] *** Quits: silasfox (~user@2001-4dd1-68e2-0-286d-7bf4-8223-de6a.ipv6dyn.netcologne.de) (Ping timeout: 268 seconds)
[12:10:46] *** Quits: abraham (~abraham@143.244.185.86) (Quit: The Lounge - https://thelounge.chat)
[12:11:48] *** Joins: abraham (~abraham@143.244.185.86)
[12:12:56] *** silasfox` is now known as silasfox
[12:17:32] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[12:21:41] *** Joins: asarch (~asarch@2806:10ae:7:200f:ea50:646f:997b:10ae)
[12:34:13] *** Quits: mfiano (~mfiano@li1282-157.members.linode.com) (Ping timeout: 250 seconds)
[12:36:03] *** Joins: hendursa1 (~weechat@user/hendursaga)
[12:36:16] *** Joins: Qwnavery (~Qwnavery@user/qwnavery)
[12:38:45] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 276 seconds)
[12:39:56] *** Quits: icer (eric@gateway/vpn/protonvpn/icer) (Quit: WeeChat 2.8)
[12:41:38] *** Joins: Everything (~Everythin@37.115.210.35)
[12:53:00] *** Quits: asarch (~asarch@2806:10ae:7:200f:ea50:646f:997b:10ae) (Quit: Leaving)
[12:53:17] *** Joins: l20dfx35jnkbfrn (~l20dfx35@2a00:23c4:ba88:fc01:e875:c59c:7201:9acd)
[13:01:46] *** Parts: l20dfx35jnkbfrn (~l20dfx35@2a00:23c4:ba88:fc01:e875:c59c:7201:9acd) (Leaving)
[13:16:04] *** Joins: makomo_ (~makomo@user/makomo)
[13:17:58] *** Quits: ahlk (~user@2600:1700:31c0:3a10::48) (Ping timeout: 252 seconds)
[13:19:40] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[13:22:54] *** Joins: attila_lendvai (~alendvai@catv-213-222-131-28.catv.broadband.hu)
[13:38:09] *** Joins: mfiano (~mfiano@li1282-157.members.linode.com)
[13:39:23] <mfiano> Anyone have AMOP handy?
[13:39:35] <mfiano> I'm curious if I found a typo, or if the program example is just wrong.
[13:39:43] <mfiano> Or my understanding is :)
[13:45:09] <beach> I have it.
[13:45:16] <mfiano> Oh good
[13:45:23] <mfiano> page 56
[13:45:39] <mfiano> One initform of the return value code is quoted
[13:45:42] *** Quits: kakuhen (~kakuhen@user/kakuhen) (Quit: Leaving...)
[13:46:54] <beach> I don't see anything like that on page 56.
[13:47:19] <mfiano> Hmm maybe edition difference. Section 2.2.3?
[13:47:39] <beach> OK, yes.
[13:48:31] <beach> I don't see any "return value code".
[13:48:38] <mfiano> The initform for clearp is quoted, unlike the others. The input in the beginning of the book obviously intends for this to be evaluated and is not quoted
[13:49:29] <mfiano> I guess we are looking at different books. I am referring to the result of the call: (display-defclass* 'color-rectangle)
[13:50:03] <beach> Ah, yes, I see it.
[13:50:39] <beach> That does look wrong.
[13:51:15] <mfiano> I'm unsure if the example code is wrong, or just the return value transcription has a typo
[13:51:53] <beach> Good question.
[13:52:12] *** Joins: selwyn (~selwyn@user/selwyn)
[13:55:37] <beach> The :initform in the class definition is not quoted.
[13:55:55] <mfiano> That's what I said above.
[13:56:26] <beach> Oh, right.
[13:56:42] <mfiano> Which leaves either the wrong slot-definition-initform function/glue macro, or a typo in the return value of the book
[13:58:34] <mfiano> I'm trying to study this book in detail, and I don't mind which one it is, but would be very nice to be aware of which :)
[13:58:48] <beach> It looks to me like the latter.
[13:59:05] <beach> But it's strange.  I mean, that code should be automatically generated.
[14:00:06] <mfiano> Hmm, I guess I can ignore it then.
[14:00:34] <mfiano> Thank you for looking
[14:01:30] <beach> Sure.
[14:06:51] *** Quits: yitzi (~yitzi@173-27-106-188.client.mchsi.com) (Remote host closed the connection)
[14:07:14] *** Joins: yitzi (~yitzi@173-27-106-188.client.mchsi.com)
[14:20:31] *** Quits: ln43 (~ln43@user/ln43) (Quit: Connection closed)
[14:33:04] *** Quits: frgo (~frgo@p200300deef0cee0098fe35624283c586.dip0.t-ipconnect.de) (Remote host closed the connection)
[14:33:32] *** Joins: frgo (~frgo@p200300deef0cee0098fe35624283c586.dip0.t-ipconnect.de)
[14:37:32] *** Joins: CrashTestDummy (~CrashTest@ool-ad02813b.dyn.optonline.net)
[14:40:38] *** Quits: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 260 seconds)
[14:45:31] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Remote host closed the connection)
[14:45:55] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[14:49:59] *** Joins: Krystof (~user@81.174.155.115)
[14:57:40] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Ping timeout: 240 seconds)
[14:57:54] *** Joins: amb007 (~a_bakic@8.36.22.93.rev.sfr.net)
[15:04:08] <pjb> Guest92: have you had a look at http://informatimago.com/~pjb/files/lisp/common-lisp/flet-or-labels.png
[15:13:22] *** Quits: montxero (~user@149.167.149.74) (Read error: Connection reset by peer)
[15:24:59] *** mfiano is now known as help
[15:25:06] *** help is now known as mfiano
[15:30:07] *** Joins: heisig (~heisig@109.190.253.14)
[15:32:25] *** Quits: amb007 (~a_bakic@8.36.22.93.rev.sfr.net) (Read error: Connection reset by peer)
[15:33:15] <Mrtn[m]> Did @mayuresh:libera.chat leave #commonlisp:libera.chat ? Autocomplete doesn't seem to catch his profile ID. I thought I had some advice to perse, that I am not sure was mentioned. I am mostly agreeing with what was said already though, so it's not a "Biggie". Ah, perse quit already because of 268 seconds of ping timeout. Oh well.
[15:33:36] *** Joins: random-nick (~random-ni@87.116.165.220)
[15:33:57] <mfiano> pjb: They are not here, and their account is not registered (it is a randomly selected guest nick)
[15:34:02] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[15:37:07] <Mrtn[m]> My answer came later in history. They left to eat.
[15:47:26] <Mrtn[m]> Is an effort being made to pick up the regulars, that was lost in transit to Libera?
[15:49:02] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Ping timeout: 268 seconds)
[15:50:57] *** Quits: heisig (~heisig@109.190.253.14) (Quit: Leaving)
[15:52:17] <pjb> mfiano: sometimes they select again the same?
[15:53:02] <mfiano> Sure if it is not already taken, and if it the same human.
[15:54:22] *** Quits: yitzi (~yitzi@173-27-106-188.client.mchsi.com) (Ping timeout: 268 seconds)
[15:58:06] *** Quits: attila_lendvai (~alendvai@catv-213-222-131-28.catv.broadband.hu) (Ping timeout: 260 seconds)
[15:58:11] *** Joins: VincentVega (~user@212.241.25.220)
[15:58:39] *** Parts: contrapunctus (a75f5b1571@2a00:c70:1:178:170:40:189:1) ()
[15:59:38] *** Joins: contrapunctus (a75f5b1571@2a00:c70:1:178:170:40:189:1)
[16:05:12] *** Joins: yitzi (~yitzi@97-64-230-163.client.mchsi.com)
[16:13:30] *** Joins: X-Scale` (~ARM@46.50.0.45)
[16:15:22] *** Quits: slyrus (~slyrus@192-184-223-165.static.sonic.net) (Ping timeout: 260 seconds)
[16:15:57] *** Quits: X-Scale (~ARM@46.50.5.253) (Ping timeout: 268 seconds)
[16:15:59] *** X-Scale` is now known as X-Scale
[16:26:22] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[16:31:33] *** Quits: santiagopim (~user@90.167.66.93) (Read error: Connection reset by peer)
[16:39:00] *** Joins: slyrus (~slyrus@192-184-223-165.static.sonic.net)
[16:46:33] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[16:51:09] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[17:04:48] *** Quits: markthom_ (~markthom_@2604:3d09:3e7e:e32e:3b:371e:5b3f:2887) (Quit: Client closed)
[17:13:29] *** Joins: Bike (~Glossina@71.69.170.70)
[17:13:29] *** ChanServ sets mode: +o Bike
[17:16:04] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Read error: Connection reset by peer)
[17:17:03] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[17:19:28] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Read error: Connection reset by peer)
[17:20:25] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[17:40:25] *** Joins: selwyn (~selwyn@user/selwyn)
[17:40:41] *** Quits: selwyn (~selwyn@user/selwyn) (Remote host closed the connection)
[17:41:05] *** Joins: selwyn (~selwyn@user/selwyn)
[17:45:29] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[17:47:35] *** Joins: selwyn (~selwyn@user/selwyn)
[17:52:50] *** Joins: doyougnu (~user@c-73-25-202-122.hsd1.or.comcast.net)
[17:56:11] *** Quits: hineios (~hineios@a95-93-142-124.cpe.netcabo.pt) (Excess Flood)
[17:56:31] *** Joins: hineios (~hineios@a95-93-142-124.cpe.netcabo.pt)
[18:16:14] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[18:17:34] *** Joins: selwyn (~selwyn@user/selwyn)
[18:18:15] *** Joins: nature (~nature@mail.blazebone.com)
[18:18:32] <mfiano> beach: Where was "Chapter 5: The concept of a protocol" extracted from?
[18:20:31] <beach> From an unfinished book of mine.
[18:20:54] <mfiano> Oh are any other parts complete? (can't help but notice it starts on page 33)
[18:21:16] <mfiano> It definitely has me intrigued
[18:21:46] <beach> I don't remember.  Let me check...
[18:25:28] <beach> The book is about CLOS programming, and there are some chapters containing examples that are close to finished.  For instance one chapter that describes Cluffer, more or less.
[18:26:20] <mfiano> Nice and thanks. Good luck on that, and all your other projects
[18:29:09] <beach> Thanks.  But my favorite coauthor kind of abandoned me, so most book projects are stalled.  Then phoe was going to help me with one of them, but he got very busy with projects for Apress.
[18:36:18] *** Joins: didi (~user@user/didi)
[18:37:24] *** Joins: ahlk (~user@2600:1700:31c0:3a10::48)
[18:37:50] <didi> I wonder if there is a builtin form for the idiom (let ((var (make-var))) (mutate-var var) ... var), i.e., create an object, mutate it, and return it.
[18:39:46] <mfiano> How would something built-in know how to create something, whatever semantics is intended by that?
[18:40:54] <didi> mfiano: No no, I want something like (prog1 (setf var (make-var)) (mutate-var var) ...).
[18:43:07] <_death> there is no "built-in" operator for that stylistic misstep.. probably a close one is anaphora:aprog1, but then you have two stylistic missteps
[18:43:31] <didi> Oh, well.
[18:43:32] <didi> Thank you.
[18:46:35] <shka> mfiano: i told you so... :P
[19:00:09] *** Joins: copec (~copec@schrodbox.unaen.org)
[19:13:13] *** Quits: makomo_ (~makomo@user/makomo) (Ping timeout: 252 seconds)
[19:21:01] *** Quits: Mandus (~aasmundo@0.51-175-33.customer.lyse.net) (Ping timeout: 265 seconds)
[19:21:44] *** Joins: Mandus (~aasmundo@0.51-175-33.customer.lyse.net)
[19:21:56] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[19:23:19] *** Joins: selwyn (~selwyn@user/selwyn)
[19:23:24] *** Quits: yitzi (~yitzi@97-64-230-163.client.mchsi.com) (Remote host closed the connection)
[19:24:51] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[19:26:12] *** Joins: selwyn (~selwyn@user/selwyn)
[19:31:10] *** Quits: Mandus (~aasmundo@0.51-175-33.customer.lyse.net) (Ping timeout: 265 seconds)
[19:33:36] *** Joins: Mandus (~aasmundo@0.51-175-33.customer.lyse.net)
[19:33:58] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[19:35:19] *** Joins: selwyn (~selwyn@user/selwyn)
[19:38:43] *** Joins: lisp123 (~lisp123@5.30.23.247)
[19:39:38] *** Joins: lisp123_ (~lisp123@45.130.83.212)
[19:43:44] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 265 seconds)
[19:51:23] *** Quits: Mandus (~aasmundo@0.51-175-33.customer.lyse.net) (Ping timeout: 268 seconds)
[19:52:56] *** Joins: makomo_ (~makomo@user/makomo)
[19:53:38] *** pjb is now known as Guest544
[19:54:22] *** Joins: pjb (~pjb@user/pjb)
[19:55:05] *** Quits: Guest544 (~pjb@user/pjb) (Ping timeout: 268 seconds)
[20:00:11] *** Joins: Mandus (~aasmundo@0.51-175-33.customer.lyse.net)
[20:02:10] *** Joins: lottaquestions (~nick@2607:fa49:503f:6400:dc11:b53c:b7cd:9869)
[20:02:21] *** Quits: lottaquestions (~nick@2607:fa49:503f:6400:dc11:b53c:b7cd:9869) (Client Quit)
[20:06:12] *** Quits: hendursa1 (~weechat@user/hendursaga) (Quit: hendursa1)
[20:06:38] *** Joins: hendursaga (~weechat@user/hendursaga)
[20:11:40] *** Quits: Devon (~devon@c-24-2-157-5.hsd1.ma.comcast.net) (Ping timeout: 252 seconds)
[20:15:21] *** Joins: srhm (~srhm@user/srhm)
[20:18:07] *** Quits: Mandus (~aasmundo@0.51-175-33.customer.lyse.net) (Ping timeout: 252 seconds)
[20:20:09] *** Quits: Qwnavery (~Qwnavery@user/qwnavery) (Ping timeout: 268 seconds)
[20:21:32] *** Joins: Qwnavery (~Qwnavery@118-211-25-83.tpgi.com.au)
[20:24:04] *** Joins: Mandus (~aasmundo@0.51-175-33.customer.lyse.net)
[20:30:09] <copec> Did anyone keep working on CL on Wasm?
[20:33:22] <jcowan> Running CLISP on WASM might be a straightforward (not zero-effort!) port.
[20:34:00] *** Quits: Mandus (~aasmundo@0.51-175-33.customer.lyse.net) (Ping timeout: 265 seconds)
[20:35:40] *** Joins: Mandus (~aasmundo@0.51-175-33.customer.lyse.net)
[20:36:54] *** Quits: nature (~nature@mail.blazebone.com) (Ping timeout: 265 seconds)
[20:39:03] <beach> I think phoe tried to convince the WASM people that Common Lisp needed control instruction and not exceptions.  I don't know how that went.
[20:45:29] *** Joins: jeosol (~jeosol@76-238-186-228.lightspeed.hstntx.sbcglobal.net)
[20:48:03] <jeosol> Good morning all!
[20:49:09] <beach> Hello jeosol.
[20:49:49] <jeosol> I have a question for those running some kind of "release engineering" workflow. I am looking to move some code and test on the cloud. I am thinking of having methodology to test and push code that can be automated as possible. code is in a huge mono-repo if that matters
[20:49:56] <jeosol> Hi beach, been a while. Hope you are well
[20:50:28] *** Quits: lisp123_ (~lisp123@45.130.83.212) (Remote host closed the connection)
[20:50:34] <jeosol> Still on my foray in the Algorithms course as a refresher - have two more weeks
[20:51:01] <beach> jeosol: Yes, thank you.  You too I hope.
[20:51:08] <jeosol> As per my question, I only use SBCL.
[20:51:40] <jeosol> @beach: yes, its going well
[20:52:56] <jeosol> @beach: Thanks to you and other here for useful pointers over the last several months (years perhaps), my project is stable now and I can do tests on my machine. Much stable now. I don't do any optimization on CL side for now because the  bottle neck is in a different external call
[20:54:49] <aeth> CL rarely needs optimization other than using something with better big-O than linked lists. Computers are fast.
[20:54:55] <beach> jeosol: Good to hear!
[20:55:04] <aeth> (I mean, CL code. Obviously Lisp itself needs linked lists)
[20:55:24] <jeosol> aeth: good point.
[20:56:22] *** Joins: yitzi (~yitzi@173-27-106-188.client.mchsi.com)
[20:56:46] <jeosol> I also like the stability - I can run the application now for weeks. Each run taking up to 4 weeks - no issues at all. I am also not using a lot of conditions at this time - if I get a bad input, I just give it a bad score (objective function)
[20:58:06] <jeosol> Obviously backward compatibility - I update SBCL monthly and I rarely get any issues (except ironclad related one some versions back)
[20:59:11] *** Joins: cage (~cage@dynamic-adsl-78-15-41-207.clienti.tiscali.it)
[21:02:34] *** Quits: random-nick (~random-ni@87.116.165.220) (Quit: quit)
[21:05:06] *** Quits: ec_ (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[21:07:16] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Read error: Connection reset by peer)
[21:07:33] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[21:07:54] *** Parts: didi (~user@user/didi) (O bella ciao bella ciao bella ciao, ciao, ciao.)
[21:08:14] *** Joins: random-nick (~random-ni@87.116.165.220)
[21:11:48] *** Quits: VincentVega (~user@212.241.25.220) (Remote host closed the connection)
[21:12:11] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Ping timeout: 265 seconds)
[21:13:04] *** Joins: amb007 (~a_bakic@8.36.22.93.rev.sfr.net)
[21:18:24] *** Quits: rain3 (~rain3___@2a02:2f09:d30b:1300:514:bcc7:8202:1798) (Remote host closed the connection)
[21:18:41] *** Joins: rain3 (~rain3___@2a02:2f09:d30b:1300:514:bcc7:8202:1798)
[21:31:26] <copec> beach: Yeah, I read the old discussions. It seems like if the wasm people were more on board to supporting higher language features it could become the runtime environment to rule them all
[21:32:57] <aeth> maybe native Wasm
[21:33:17] <aeth> but the web has an issue and it's that its security model (justifiably) can't support next-gen graphics APIs like Vulkan because those are too low-level
[21:35:26] <aeth> There are probably some other things you don't want to let a web browser do that you do want to let native apps do
[21:37:16] <copec> The trend with operating systems has been towards to settle on a single system with api to control virtualization extensions that software uses. With GPU's supporting SRV-IO I'm hoping some standard will evolve that parallels that
[21:37:55] <copec> not necessarily SRV-IO, but some per process security model for stuff like Vulkan
[21:39:32] <copec> aeth: There is work for wasm in dedicated client and server applications too
[21:41:34] <aeth> yes, wasm should aim to be a JVM replacement
[21:42:55] <copec> oh I see, you said "maybe native Wasm", so you were already there
[21:46:44] *** Joins: markthom_ (~markthom_@2604:3d09:3e7e:e32e:3b:371e:5b3f:2887)
[21:49:22] *** Quits: markthom_ (~markthom_@2604:3d09:3e7e:e32e:3b:371e:5b3f:2887) (Client Quit)
[21:52:09] *** Joins: vats (~vats@103.70.83.191)
[22:01:55] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Quit: ERC (IRC client for Emacs 27.2))
[22:05:50] *** Quits: amb007 (~a_bakic@8.36.22.93.rev.sfr.net) (Read error: Connection reset by peer)
[22:06:03] *** Joins: amb007 (~a_bakic@8.36.22.93.rev.sfr.net)
[22:13:05] *** Quits: amb007 (~a_bakic@8.36.22.93.rev.sfr.net) (Ping timeout: 265 seconds)
[22:13:53] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[22:14:43] *** Joins: lisp123 (~lisp123@45.130.83.212)
[22:20:00] *** Quits: lisp123 (~lisp123@45.130.83.212) (Ping timeout: 268 seconds)
[22:20:59] <beach> copec: The thing is, any system of conditions or exceptions can be implemented with the suggested control structures.  The other way around is way more difficult as the Clasp developers can tell you from implementing unwinding with C++ exceptions.
[22:27:36] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Remote host closed the connection)
[22:27:49] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[22:28:05] <lotuseater> Does Clasp also make use of "#define private public"? :)
[22:30:12] <Bike> at times, unfortunately.
[22:30:21] <Bike> though i don't know what that has to do with exceptions.
[22:30:32] <lotuseater> nothing
[22:32:15] *** Joins: ec_ (~ec@gateway/tor-sasl/ec)
[22:32:26] <Bike> but yes, i can say authoritatively that implementing lisp control structures through C++ exceptions is frustrating on every level
[22:33:26] *** Joins: akoana (~ah@user/akoana)
[22:39:08] *** Joins: gaqwas (~john@dynamic-077-002-107-064.77.2.pool.telefonica.de)
[22:40:51] <jcowan> I guess that's the downside of deep integration, where there is no single FFI point of control where you could catch a C++ exception and fire a Lisp one.
[22:41:54] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[22:42:15] <Bike> yeah, if you want to be able to interleave frames from both languages C++ pretty much forces you to play by its rules
[22:42:41] <Bike> the itanium exception ABI everyone uses nominally works with different languages, even ones with different models, but it's a lie
[22:43:00] <Bike> it is kind of interesting that they wanted it to be usable, though
[22:44:33] *** Quits: azimut_ (~azimut@gateway/tor-sasl/azimut) (Ping timeout: 276 seconds)
[22:46:59] <jcowan> Well, it probably works with everything except Lisp (broadly considered, including Dylan)
[22:49:14] <Bike> i'm not sure about that. non-C++ exceptions are kind of second class citizens. doing stuff like trying to rethrow them from a handler can cause the C++ runtime to give up and terminate
[22:51:17] <Bike> http://ix.io/3yRX i wrote a quick gloss of what implementing return-from with exceptions looks like. it's not great
[22:51:48] <Bike> c++ won't let you write return-or-control-error, since if throw doesn't find a handler it terminates
[22:53:07] *** Joins: VincentVega (~user@212.241.25.220)
[22:53:56] <jcowan> No wonder Google bans exceptions (except in Windows code)
[22:54:46] *** Joins: Inline (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431)
[22:56:13] <Bike> i think windows SEH is a little less dumb? at least it has finally blocks, which are sort of annoying to emulate
[22:58:20] <Bike> anyway, point is it's not a good abstraction for general control flow
[22:58:26] <Bike> scheme got that one figured out
[23:02:13] <Bike> although i recall some complaints that the details of continuations within dynamic-wind are ambiguous
[23:03:18] *** Quits: Everything (~Everythin@37.115.210.35) (Quit: leaving)
[23:04:18] <_death> h
[23:04:26] <_death> oops, wrong buffer
[23:08:30] *** Quits: rain3 (~rain3___@2a02:2f09:d30b:1300:514:bcc7:8202:1798) (Ping timeout: 268 seconds)
[23:12:42] *** Quits: derelict (derelict@user/derelict) (Quit: bye)
[23:12:56] *** Joins: derelict (derelict@user/derelict)
[23:15:06] *** Quits: ec_ (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[23:15:08] *** Quits: srhm (~srhm@user/srhm) (Read error: Connection reset by peer)
[23:15:09] *** Joins: attila_lendvai (~alendvai@catv-213-222-131-28.catv.broadband.hu)
[23:15:47] *** Joins: srhm (~srhm@user/srhm)
[23:16:37] *** Joins: ec_ (~ec@gateway/tor-sasl/ec)
[23:17:58] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Ping timeout: 268 seconds)
[23:22:03] *** Quits: Inline (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431) (Remote host closed the connection)
[23:22:23] <jcowan> Bike: I don't remember that, but it's possible
[23:22:50] *** Quits: Qwnavery (~Qwnavery@118-211-25-83.tpgi.com.au) (Quit: WeeChat 3.2.1)
[23:23:45] <jcowan> In addition, there is a mysterious discrepancy between Scheme and CL exception handlers: a Scheme handler exits when the exception is handled, and reraises when it needs  to pass the buck.
[23:23:56] *** Joins: Inline (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431)
[23:24:08] <jcowan> It's not a problem exactly, just hard to remember
[23:24:15] <jcowan> when switching gears
[23:25:05] <Bike> oh, you mean like if the handler function just returns further handlers aren't called?
[23:26:16] <jcowan> Right, and what the handler returns is what raise-continuably gets.  If you call raise instead, it will immediately raise another exception.
[23:26:42] <Bike> huh, i see
[23:27:22] <jcowan> So it's more like Java etc., although it does not rewind the stack unless an explicit non-local jump is done (which is implicit with guard, the analog of handler-case)
[23:29:13] *** Joins: tyson2 (~user@bras-base-toroon0628w-grc-46-142-112-141-177.dsl.bell.ca)
[23:36:54] *** Joins: rogersm (~rogersm@90.166.177.48)
[23:38:46] *** Quits: rogersm (~rogersm@90.166.177.48) (Client Quit)
[23:53:42] <copec> (Forgive the hopeful/ignorant questions) Bike: Could clasp be bootstrapped all under the wasm? Do the C++ exception semantics get mapped to Wasm, so that the work you've done in clasp would carry?
[23:54:08] <copec> s/the wasm/Wasm
[23:57:24] <Bike> we might have to disable the non-exception mechanisms, but it might be possible
[23:58:36] <copec> So it would probably become a bog.
[23:59:19] <copec> heh
