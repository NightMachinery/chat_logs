[00:00:24] <Alipha> ... note however, that full disk encryption can be done with authentication by storing the MACs somewhere else. and also note that Google's Adiantum is a full disk encryption algorithm which is a hybrid block/stream algorithm, which is much more resistant to modification than a typical block cipher
[00:06:38] *** Quits: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be) (Remote host closed the connection)
[00:12:38] *** Joins: cwebber (~user@user/cwebber)
[00:17:45] *** Quits: Choco (~Choco@host150.200-71-232.telecom.net.ar) (Quit: Client closed)
[00:21:00] *** Quits: Pythayr (~pither195@64.42.181.51) (Ping timeout: 256 seconds)
[00:25:50] *** Joins: soulisson (~soulisson@41.143.62.228)
[00:29:55] *** Quits: soulisson (~soulisson@41.143.62.228) (Client Quit)
[00:31:36] *** Quits: mei (~mei@user/mei) (Ping timeout: 268 seconds)
[00:34:35] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Ping timeout: 264 seconds)
[00:41:38] *** Joins: Pythayr (~pither195@2600:1700:82f0:2fe0:e755:1cf5:e439:4ada)
[00:42:39] *** Quits: tusko (~yeurt@copyfree/advocate/tusko) (Ping timeout: 276 seconds)
[00:43:00] *** Joins: tusko (~yeurt@copyfree/advocate/tusko)
[00:47:11] *** Quits: Pythayr (~pither195@2600:1700:82f0:2fe0:e755:1cf5:e439:4ada) (Ping timeout: 264 seconds)
[00:50:58] *** Joins: Choco (~Choco@host150.200-71-232.telecom.net.ar)
[00:59:27] *** Joins: Pythayr (~pither195@64.42.181.51)
[01:13:26] *** Quits: Seirdy (~Seirdy@sourcehut/user/seirdy) (Quit: exiting 3.3)
[01:14:24] *** Joins: Seirdy (~Seirdy@sourcehut/user/seirdy)
[01:22:18] *** Quits: drathir_tor (~drathir@wireguard/tunneler/drathir) (Ping timeout: 276 seconds)
[01:46:11] *** Joins: dna1 (~dna@47-220-190-100.gtwncmkt04.res.dyn.suddenlink.net)
[01:47:34] *** Joins: drathir_tor (~drathir@wireguard/tunneler/drathir)
[01:56:59] *** Quits: CryptoClub (~fafs@87.125.251.76) (Read error: Connection reset by peer)
[02:00:09] <int-e> hmm, will https://en.wikipedia.org/wiki/Advanced_Format ever come to consumer devices?
[02:00:37] *** Joins: CryptoClub (~fafs@87.125.251.76)
[02:02:37] <int-e> (in principle, external storage devices /could/ offer space for a MAC per block)
[02:03:00] *** Quits: dna1 (~dna@47-220-190-100.gtwncmkt04.res.dyn.suddenlink.net) (Ping timeout: 256 seconds)
[02:03:01] <int-e> Which is more relevant for HDDs than for SSDs I guess.
[02:22:47] *** Quits: bbear (~znc@21212.s.t4vps.eu) (Quit: ZNC 1.7.4 - https://znc.in)
[02:23:02] *** Joins: bbear (~znc@21212.s.t4vps.eu)
[02:23:19] *** Quits: Guyver2 (Guyver@guyver2.xs4all.nl) (Quit: Going offline, see ya! (www.adiirc.com))
[02:30:34] <spaceone> maroon: it is possible to control the complete ciphertext - see https://www.usenix.org/legacy/event/woot10/tech/full_papers/Rizzo.pdf page 5 section 4.1
[02:32:39] *** Joins: xenoterracide (~xenoterra@99-124-139-34.lightspeed.iplsin.sbcglobal.net)
[02:34:52] <sarnold> int-e: 4kn AF drives have been on the market for ages; my local fry's had signs up telling people who were buying new hard drives to make sure they either had a new enough windows or were buying the older 512n drives because people kept having problems
[02:35:45] *** Quits: System_Error (~SystemErr@user/systemerror) (Ping timeout: 276 seconds)
[02:36:24] *** Quits: kish` (~sid742412@user/aqua) (Ping timeout: 276 seconds)
[02:38:33] *** Joins: InternetManaging (~imjmatrix@2001:470:69fc:105::1:2ea5)
[02:39:00] *** Joins: System_Error (~SystemErr@user/systemerror)
[02:42:16] *** Joins: igemnace (~ian@user/igemnace)
[02:42:36] *** Quits: chomwitt (~chomwitt@2a02:587:dc12:3f00:12c3:7bff:fe6d:d374) (Ping timeout: 265 seconds)
[02:45:18] *** Joins: kurtthemaker (~kurt@S010644a56e3e0ee9.cn.shawcable.net)
[02:46:17] <Alipha> spaceone: oh, interesting. So to modify blocks n and n+1, you xor the appropriate diff into block n to set block n+1 to what you want. Then use a padding oracle attack to discover what plaintext the "corrupted" block n contains, which you then can use to create a diff to xor into block n-1 in order to set block n to what you want
[02:47:14] <Alipha> (where "diff" = actual_plaintext xor desired_plaintext)
[02:47:47] *** Quits: Guest7702 (~sav@177.12.48.155) (Ping timeout: 250 seconds)
[02:48:58] *** Joins: chomwitt (~chomwitt@2a02:587:dc12:3f00:12c3:7bff:fe6d:d374)
[02:49:12] *** Joins: kish` (~sid742412@user/aqua)
[02:50:55] *** Joins: Guest7702 (~sav@177.12.48.155)
[02:53:05] *** Joins: zamba (~marius@5.226.162.54)
[02:55:17] *** Quits: chomwitt (~chomwitt@2a02:587:dc12:3f00:12c3:7bff:fe6d:d374) (Ping timeout: 268 seconds)
[03:01:35] *** Quits: xenoterracide (~xenoterra@99-124-139-34.lightspeed.iplsin.sbcglobal.net) (Ping timeout: 264 seconds)
[03:06:15] *** Joins: rk4 (~r@user/rk4)
[03:09:26] <spaceone> Alipha: that was a great TLDR
[03:10:38] *** Quits: Guest7702 (~sav@177.12.48.155) (Quit: Leaving)
[03:10:49] *** Joins: sav (~savio@177.12.48.155)
[03:11:13] *** sav is now known as Guest2383
[03:14:32] *** Quits: Guest2383 (~savio@177.12.48.155) (Client Quit)
[03:16:08] *** Quits: dude12312414 (~test@gateway/tor-sasl/dude12312414) (Quit: THE RAM IS TOO DAMN HIGH)
[03:16:40] <Hash> I gotcha. Thanks
[03:30:25] *** Quits: System_Error (~SystemErr@user/systemerror) (Remote host closed the connection)
[03:30:50] *** Quits: byteskeptical (~amnesia@user/byteskeptical) (Ping timeout: 256 seconds)
[03:30:52] *** Joins: System_Error (~SystemErr@user/systemerror)
[03:36:33] *** Quits: ionface (~ionface@user/ionface) (Remote host closed the connection)
[03:41:57] *** Joins: sav_ (~savio@177.12.48.155)
[03:48:41] *** Quits: sav_ (~savio@177.12.48.155) (Quit: Leaving)
[04:01:26] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 256 seconds)
[04:01:35] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[04:02:52] *** Lord_of_Life_ is now known as Lord_of_Life
[04:07:20] *** Joins: SEP (~stephenle@71-135-151-245.lightspeed.frokca.sbcglobal.net)
[04:11:38] *** Quits: Wulf (~Wulf@user/wulf) (Ping timeout: 256 seconds)
[04:12:06] *** Joins: byteskeptical (~amnesia@user/byteskeptical)
[04:13:00] *** Joins: Wulf (~Wulf@user/wulf)
[04:24:01] *** Quits: kurtthemaker (~kurt@S010644a56e3e0ee9.cn.shawcable.net) (Quit: leaving)
[04:29:22] *** Quits: w4ld0 (w4ld0@gateway/vpn/protonvpn/w4ld0) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[04:30:40] *** Joins: sav (~savio@177.12.48.155)
[04:31:04] *** sav is now known as Guest2886
[04:36:23] *** Quits: byteskeptical (~amnesia@user/byteskeptical) (Ping timeout: 264 seconds)
[04:40:44] *** Quits: mononote (~mononote@user/mononote) (Ping timeout: 268 seconds)
[04:51:36] *** Quits: zulutango (~zulutango@static-n58-105-160-58.mas4.nsw.optusnet.com.au) (Remote host closed the connection)
[04:51:59] *** Joins: zulutango (~zulutango@static-n58-105-160-58.mas4.nsw.optusnet.com.au)
[04:53:00] *** Quits: machinedgod (~machinedg@24.105.81.50) (Ping timeout: 256 seconds)
[05:04:35] *** Quits: zro (~zro@user/zro) (Ping timeout: 264 seconds)
[05:23:13] *** Joins: machinedgod (~machinedg@24.105.81.50)
[05:25:30] *** Joins: frost (~frost@user/frost)
[05:31:46] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 265 seconds)
[05:40:36] *** Quits: ua_ (~ua@public-gprs210913.centertel.pl) (Ping timeout: 256 seconds)
[05:40:36] *** Joins: ua__ (~ua@public-gprs226691.centertel.pl)
[05:52:49] *** Quits: JimL (~quassel@89-162-2-132.fiber.signal.no) (Ping timeout: 250 seconds)
[05:54:34] *** Joins: JimL (~quassel@89-162-2-132.fiber.signal.no)
[06:05:26] *** Quits: Seirdy (~Seirdy@sourcehut/user/seirdy) (Quit: exiting 3.3)
[06:05:44] *** Joins: Seirdy (~Seirdy@sourcehut/user/seirdy)
[06:16:19] *** Quits: machinedgod (~machinedg@24.105.81.50) (Ping timeout: 268 seconds)
[06:46:47] *** Joins: zro (~zro@user/zro)
[06:48:22] *** Joins: mononote (~mononote@user/mononote)
[07:13:20] *** Joins: PJBoy (~PJBoy@user/pjboy)
[07:22:18] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 268 seconds)
[07:38:01] *** Joins: cvmn (~caveman@gateway/tor-sasl/caveman)
[07:38:05] *** Quits: mr_ab (~nobody@bnc.ab.hl9.net) (Quit: Upgrade.)
[07:38:11] *** Quits: zro (~zro@user/zro) (Ping timeout: 264 seconds)
[07:44:38] *** Quits: cvmn (~caveman@gateway/tor-sasl/caveman) (Remote host closed the connection)
[07:45:08] *** Joins: cvmn (~caveman@gateway/tor-sasl/caveman)
[07:59:06] *** Joins: Jail21 (~Jail21@190.171.113.56)
[08:04:24] *** Quits: rtypo (~alex@user/rtypo) (Read error: Connection reset by peer)
[08:04:32] *** Joins: _rtypo (~alex@user/rtypo)
[08:11:54] *** Quits: X-Scale (~ARM@46.50.7.119) (Ping timeout: 256 seconds)
[08:12:18] *** Joins: X-Scale` (~ARM@165.201.137.78.rev.vodafone.pt)
[08:13:47] *** Joins: exorcist (~exorcist@user/exorcist)
[08:13:53] *** X-Scale` is now known as X-Scale
[08:15:27] *** Quits: CryptoClub (~fafs@87.125.251.76) (Read error: Connection reset by peer)
[08:18:39] *** Parts: exorcist (~exorcist@user/exorcist) (Leaving)
[08:19:23] *** Joins: CryptoClub (~fafs@87.125.251.76)
[08:28:16] *** Joins: namkeles (~namkeles@101.179.132.178)
[08:31:12] <namkeles> Whats the best mode of action to retrieve event logs for suspect servers (We have been ransomwared by Conti)? I don't really want to recconect and RDP in. Also our NIC's have been disabled, and they are VM's so can get to the consoles without the network card
[08:33:26] *** Quits: Seirdy (~Seirdy@sourcehut/user/seirdy) (Ping timeout: 256 seconds)
[08:33:55] <rk4> rip the drives
[08:34:10] *** Joins: dude12312414 (~test@gateway/tor-sasl/dude12312414)
[08:34:17] <rk4> [...or virtual block devices in your case :]
[08:40:06] *** Joins: Seirdy (~Seirdy@sourcehut/user/seirdy)
[08:52:45] *** Quits: cvmn (~caveman@gateway/tor-sasl/caveman) (Ping timeout: 276 seconds)
[08:53:47] *** Quits: JimL (~quassel@89-162-2-132.fiber.signal.no) (Ping timeout: 264 seconds)
[08:57:18] *** Joins: JimL (~quassel@89-162-2-132.fiber.signal.no)
[09:03:13] *** Quits: dude12312414 (~test@gateway/tor-sasl/dude12312414) (Quit: THE RAM IS TOO DAMN HIGH)
[09:05:45] *** Joins: cvmn (~caveman@gateway/tor-sasl/caveman)
[09:07:36] *** Joins: byteskeptical (~amnesia@user/byteskeptical)
[09:08:31] *** Quits: jarthur (~jarthur@cpe-70-114-198-37.austin.res.rr.com) (Quit: jarthur)
[09:24:46] *** Joins: node1 (~node1@user/node1)
[09:25:18] *** Quits: node1 (~node1@user/node1) (Write error: Broken pipe)
[09:26:01] *** Joins: mei (~mei@user/mei)
[09:42:23] *** Quits: _rtypo (~alex@user/rtypo) (Ping timeout: 264 seconds)
[09:45:37] *** Quits: drathir_tor (~drathir@wireguard/tunneler/drathir) (Remote host closed the connection)
[09:45:57] *** Joins: drathir_tor (~drathir@wireguard/tunneler/drathir)
[09:53:06] *** Joins: chomwitt (~chomwitt@2a02:587:dc12:3f00:12c3:7bff:fe6d:d374)
[09:56:09] *** Quits: Gallomimia (~Gallomimi@node-1w7jra2a2gqpz7i5h5s5n74ww.ipv6.telus.net) (Remote host closed the connection)
[09:56:10] *** Quits: chomwitt (~chomwitt@2a02:587:dc12:3f00:12c3:7bff:fe6d:d374) (Remote host closed the connection)
[10:04:08] *** Joins: chomwitt (~chomwitt@2a02:587:dc12:3f00:12c3:7bff:fe6d:d374)
[10:11:58] *** Joins: BOKALDO (~BOKALDO@user/bokaldo)
[10:12:58] *** Quits: byteskeptical (~amnesia@user/byteskeptical) (Remote host closed the connection)
[10:13:33] *** Joins: qbt (~qbt@user/edun)
[10:17:53] <Wulf> namkeles: in my setup, I can easily access the VMs disks from the underlying host.
[10:18:27] <Wulf> namkeles: next time, make sure to send event logs to a central log server automatically ;-)
[10:23:17] *** Joins: node1 (~node1@user/node1)
[10:24:01] *** Quits: node1 (~node1@user/node1) (Client Quit)
[10:25:02] *** Joins: node1 (~node1@user/node1)
[10:29:22] *** Quits: Guest2886 (~savio@177.12.48.155) (Quit: Leaving)
[10:29:39] *** Quits: node1 (~node1@user/node1) (Client Quit)
[10:31:59] *** Joins: jdvr (~jdvr@user/jdvr)
[10:38:42] *** Quits: cvmn (~caveman@gateway/tor-sasl/caveman) (Ping timeout: 276 seconds)
[10:52:16] *** Joins: node1 (~node1@user/node1)
[10:58:46] *** Quits: qbt (~qbt@user/edun) (Quit: Leaving.)
[11:03:55] *** Joins: eson123 (~eson123@118.69.128.37)
[11:21:34] <eson123> if one-time pad encryption doesn't reach its maximum secrecy if the length of the key isn't as long as the length of the content then how about i try to add in the length of the key to itself repeatedly until it's the same, then XOR each bit, like if i have a message of "ABCD" and my key is "AB", how about adding in another "AB" -> "ABAB" then xor it, will it be safer ?
[11:21:42] <eson123> or there is still some defects in that way
[11:22:47] <eson123> it's just an example, of course A XOR with A is gonna be 0 always but i think i made it quite clear enough :P
[11:28:58] *** Quits: jdvr (~jdvr@user/jdvr) (Remote host closed the connection)
[11:32:32] *** Quits: node1 (~node1@user/node1) (Ping timeout: 256 seconds)
[11:37:21] *** Quits: frost (~frost@user/frost) (Quit: Connection closed)
[11:39:06] *** Joins: andreasbuhr (~quassel@p549db93c.dip0.t-ipconnect.de)
[11:39:50] <moose> eson123: Any predictability in the keystream makes it completely weak basically.
[11:40:08] <moose> Any repetition will make it vulnerable to frequency analysis, especially if the key is shorter than the data length by half or more.
[11:40:57] *** Quits: andreasbuhr (~quassel@p549db93c.dip0.t-ipconnect.de) (Client Quit)
[11:43:42] *** Quits: drathir_tor (~drathir@wireguard/tunneler/drathir) (Ping timeout: 276 seconds)
[11:46:36] *** Joins: node1 (~node1@user/node1)
[11:46:41] <maroon> eson123, it only works if it's the ONE time pad, 2-time won't work
[11:48:54] *** Joins: tempate (~alpha@user/tempate)
[11:49:38] <tempate> Hello. In the quadratic sieve algorithm, what value of B should I set?
[11:49:51] <maroon> it looks like you've encountered one of the big problems with one-time-pad, which is finding a way to communicate the key-as-long-as-message without running out of key
[11:49:57] *** Joins: frost (~frost@user/frost)
[11:51:00] *** Joins: Wintermute (~Wintermut@94.46.93.221)
[11:58:44] *** Joins: drathir_tor (~drathir@wireguard/tunneler/drathir)
[12:01:08] *** Joins: anonymeowo (~anonymeow@107.189.14.18)
[12:06:45] *** Joins: Haohmaru (~Haohmaru@195.24.53.110)
[12:15:59] *** Quits: eson123 (~eson123@118.69.128.37) (Ping timeout: 264 seconds)
[12:16:08] *** Quits: jess (~jess@libera/staff/jess) (Quit: Lost terminal)
[12:16:55] *** Joins: jess (~jess@libera/staff/jess)
[12:17:37] *** Joins: q1 (~q1@gateway/tor-sasl/nunux)
[12:17:43] <q1> yo
[12:17:48] <q1> signal or briar?
[12:18:17] *** Quits: tempate (~alpha@user/tempate) (Quit: Leaving.)
[12:20:44] *** Joins: zro (~zro@user/zro)
[12:23:27] *** Quits: tusko (~yeurt@copyfree/advocate/tusko) (Remote host closed the connection)
[12:23:57] *** Joins: tusko (~yeurt@copyfree/advocate/tusko)
[12:26:13] <Hash> Key whitening
[12:26:17] <Hash> What does this term mean exactly?
[12:26:30] <Hash> The most common form of key whitening is xor-encrypt-xor -- using a simple XOR before the first round and after the last round of encryption.
[12:26:41] <Hash> In cryptography, key whitening is a technique intended to increase the security of an iterated block cipher. It consists of steps that combine the data with portions of the key.
[12:27:06] <riv> I think the idea of whitening is to make something look more like white noise
[12:27:14] <Hash> Oh
[12:27:19] <Hash> Oh I see now.
[12:27:31] <Hash> I imagined whitening as like wiping away white out maybe.
[12:27:33] <q1> hmm
[12:27:49] <Hash> Thanks man, I appreciate you
[12:28:42] <q1> <3
[12:29:04] <q1> next step is encrypt initrd lol
[12:29:14] <Hash> Just XOR a key with the text either before the round function, after the round function, or both
[12:29:21] *** Quits: CryptoClub (~fafs@87.125.251.76) (Read error: Connection reset by peer)
[12:31:31] *** Joins: PJBoy (~PJBoy@user/pjboy)
[12:32:16] <ms7821> you shouldn't need to worry about it unless you're transported back to the 80s
[12:32:36] <q1> O_O
[12:32:50] *** Quits: node1 (~node1@user/node1) (Quit: Client closed)
[12:32:58] <Hash> encrypted init ramdisk?
[12:33:06] <q1> yep
[12:33:13] <Hash> You do have to decrypt in order to use it, and decryption happens in ram.
[12:33:19] <Hash> So... I don't follow.
[12:33:31] <Hash> Why encrypt it to begin with?
[12:33:37] <Hash> Just encrypt your boot volume.
[12:33:43] <Hash> Where initrd and your kernel image live.
[12:33:52] <q1> https://0pointer.net/blog/authenticated-boot-and-disk-encryption-on-linux.html
[12:34:04] *** Joins: CryptoClub (~fafs@87.125.251.76)
[12:34:13] <q1> I'm watching out all steps b4 going on
[12:34:29] <Hash> Sounds like a smart idea.
[12:35:18] <q1> basically be able to enable secure boot and TPM
[12:35:32] <q1> not only encrypted but authed
[12:39:33] <maroon> whitening is something that blowfish did. the expanded key had 18 32-bit values, with 16 of them being an input to one of the feistel rounds, and the other 2 subkeys were a whitening step at the beginning and the finish - the simple XOR isn't as strong as a 'round function', but for time/benefit it scores well
[12:40:16] <q1> i love openbsd and its RAID0 FDE
[12:40:20] <q1> <3
[12:42:10] *** Joins: tempate (~alpha@user/tempate)
[12:43:37] <Hash> The round function splits the 32-bit input into four eight-bit qurters, and uses the quarters as input to the S-boxes. The outputs are added modulo 232 and XORed to produce the final 32-bit output. 
[12:43:47] <Hash> quarters*
[12:44:59] <Hash> The first step is to break the original key into a set of subkeys. Specifically, a key of no more than 448 bits is separated into 4,168 bytes. There is a P-array and four 32-bit S-boxes. The P-array contains 18 32-bit subkeys, while each S-box contains 256 entries. 
[12:45:43] <Hash> Initialize P and S array and boxes
[12:45:59] <Hash> XOR P array with both key bits
[12:46:13] *** Quits: drathir_tor (~drathir@wireguard/tunneler/drathir) (Remote host closed the connection)
[12:46:21] <Hash> then encrypt both parts with modified subkeys
[12:47:58] <Hash> 16 rounds.
[12:48:04] <Hash> 18 32 bit sub keys.
[12:48:17] <Hash> I see what you mean. 2 additional keys were added to add white noise.
[12:48:35] <Hash> maroon: hey thanks a lot man
[12:48:40] <Hash> I appreciate you bruv
[12:49:19] <tempate> Is there a website or a tool to factorize big semi-prime numbers?
[12:50:22] <Hash> Now on to Serpent. I need a break.
[12:50:28] <Hash> STudying is hard.
[12:51:02] <Hash> So it's not fiestal. Like AES it's substitution and permuation
[12:51:57] <Hash> I wonder why it was not chosen 
[12:52:04] <Hash> I mean to replace DES
[12:52:36] *** Quits: caveman (~caveman@gateway/tor-sasl/caveman) (Ping timeout: 276 seconds)
[12:52:59] <Hash> Also, what's Bruce's thing with fish? :) Blowfish, Twofish etc. etc. 
[12:54:24] <q1> blowfish is openbsd
[12:54:49] <q1> afaik
[12:56:05] <ms7821> that's puffy
[12:57:01] *** Joins: caveman (~caveman@gateway/tor-sasl/caveman)
[12:57:18] <q1> lol
[12:58:15] <Hash> https://www.zmescience.com/ecology/animals-ecology/blowfish-dont-hold-breath-0665/
[12:58:29] <Hash> Next time I'm surprised with something, I'm going to post this image.
[12:58:47] <Hash> Kind of an angry surprised, this guy.
[12:59:25] <q1> that's an openbsd background lol
[12:59:35] <Hash> Really?
[12:59:44] <q1> yep :D
[12:59:49] <q1> i had it
[12:59:53] <Hash> Haha. 
[13:01:16] <Hash> Blowfish... 
[13:01:52] <Hash> SHARK
[13:01:53] <maroon> blowfish puffs itself larger to intimidate prey that's thinking about eating it
[13:01:54] <q1> that's OS is awesome, shame hardware compat
[13:02:01] <Hash> SHARK uses a 64-bit block with a 128-bit key and operates in six rounds. 
[13:02:15] <Hash> It has some similarities to the Rijndael cipher, including the use of S-boxes that are based on GF(28).
[13:02:18] <maroon> tempate how big and how semi-prime?
[13:02:41] <Hash> Lots of sea life in crypto
[13:03:08] <Hash> https://www.esat.kuleuven.be/cosic/publications/article-55.pdf
[13:03:17] <Hash> \The Cipher SHARK\
[13:05:32] *** Quits: d34dh0r53 (~d34dh0r53@2600:1700:10e0:ecf:5054:ff:fe7c:35f9) (Ping timeout: 246 seconds)
[13:05:56] *** Quits: yanmaani1 (~yanmaani@gateway/tor-sasl/yanmaani) (Remote host closed the connection)
[13:06:52] *** Joins: d34dh0r53 (~d34dh0r53@2600:1700:10e0:ecf:5054:ff:fe7c:35f9)
[13:06:54] *** Joins: yanmaani1 (~yanmaani@gateway/tor-sasl/yanmaani)
[13:07:23] <maroon> tiger was a hash in the 90s
[13:07:30] <maroon> but not sealife
[13:07:38] <Hash> Also Hash is a Tiger in 2021
[13:09:01] <Hash> So ECB came first, and each block with same key would produce same ciphertext
[13:09:24] <Hash> So that was no good. Then they said, ok we'll do chain the blocks using XOR one after another.
[13:09:50] <Hash> CBC cipher block chaining came after that one.
[13:10:22] <Hash> So you do block 1 cipher text, then take block 2 plaintext and XOR it with block 1's cipher text
[13:10:27] <Hash> Repeat for all blocks.
[13:10:41] <maroon> and then they said, hey let's make stream ciphers and put our trust in the users that they would never ever end up using the iv/salt/nonce/whatever more than 1 time
[13:10:49] <Hash> :)
[13:11:01] <Hash> Ok slowly I'm a noob and student.
[13:11:17] <Hash> So, after CBC, PCBC came. 
[13:11:26] <maroon> CFB
[13:11:40] <Hash> Also, in CBC, it takes care of the same ciphertext from same key problem of ECB riht?
[13:11:46] <maroon> that one doesn't need to even have a decryption routine
[13:11:56] <Hash> So what was wrong with CBC what we needed to make PCBC?
[13:12:03] <Hash> (going along with the course work here)
[13:12:06] *** Quits: yanmaani1 (~yanmaani@gateway/tor-sasl/yanmaani) (Ping timeout: 276 seconds)
[13:12:29] <Hash> Designed to cause small changes in the ciphertext to propagate indefinitely when decrypting, as well as when encrypting 
[13:12:39] <Hash> A variation on the CBC mode of operation
[13:13:19] <Hash> then after PCBC, the one you said, CFB, Cipher Feedback
[13:13:57] <Hash> I am confused with the wording here: In CFB mode the previous ciphertext block is encrypted
[13:14:03] *** Joins: yanmaani1 (~yanmaani@gateway/tor-sasl/yanmaani)
[13:14:12] <Hash> Isn't 'ciphertext' already encrypted/mangled text?
[13:14:25] <maroon> xor(current plaintext block, prior ciphertext block), now encrypt that
[13:14:41] <Hash> I aee.
[13:14:55] <Hash> The ciphertext produced is XOR'd back with the plaintext to produce the current ciphertext block
[13:14:58] <Hash> So hang on
[13:15:05] *** Joins: drathir_tor (~drathir@wireguard/tunneler/drathir)
[13:15:33] <maroon> in ecb you encrypt the current plaintext. in cbc you first xor that input against the prior ciphertext block
[13:16:03] <Hash> So you make data into blocks. Take block 1, create ciphertext out of plaintext. Then take that ciphertext, and XOR it back with the plaintext of block 2 to create block2's ciphertext?
[13:16:33] <maroon> the "IV" behaves as "let's pretend this is the prior block of ciphertext"
[13:16:54] <Hash> Where does the Vector come from?
[13:17:41] <maroon> so then you XOR the IV against plaintext block#1, and then you encrypt that - if you have unique IV, it's sorta like treating 2 identical files as if they're different, since the differences are coming from the ciphertext for block zero
[13:18:09] <Hash> plaintext for round x -> round function F -> ciphertext of round x * XOR
[13:18:10] <Hash> Hangon.
[13:18:54] <maroon> a block cipher works on chunks of data at a time, instead of like stream ciphers who handle it 1 byte at a time
[13:19:05] <Hash> I am confused with these words again.
[13:19:11] <Hash> Each block of plaintext is XORed with the previous ciphertext block before being encrypted
[13:19:29] <Hash> Ok. Can you tell me the diff in between 'ciphertext' and 'encrypted'?
[13:19:40] <Hash> Isn't ciphertext  plaintext that has already BEEN encrypted?
[13:19:43] <Hash> I'm confused.
[13:20:09] <maroon> plaintext is the input to the encryption, and ciphertext is the output
[13:20:14] <Hash> In cryptography, ciphertext or cyphertext is the result of encryption performed on plaintext using an algorithm, called a cipher.
[13:20:22] <Hash> The wording in this book for school is confusing.
[13:20:56] <Hash> encryption is the round functions/algorithm.
[13:21:14] <Hash> Plaintext, Encryption(algorithm/method/way), Ciphertext
[13:21:33] <maroon> encryption is everything that happens to the input before the output is given away
[13:21:42] <Hash> I gotcha
[13:22:43] <maroon> often, with a 'round function', you do something weak to the input. but if you repeat it often enough, then it's hard for someone without the key to figure out what the input was
[13:23:24] <Hash> In CFB mode the previous ciphertext block is encrypted <-- book has this sentence. Can you maybe explain what this means?
[13:23:47] <Hash> Ciphertext is already encrypted. I don't understand this.
[13:24:55] <Hash> The cipher feedback (CFB) mode, in its simplest form uses the entire output of the block cipher. In this variation, it is very similar to CBC, makes a block cipher into a self-synchronizing stream cipher. CFB decryption in this variation is almost identical to CBC encryption performed in reverse:
[13:25:14] <Hash> Wikipedia is better!
[13:25:18] <Hash> Got a nice diagram.
[13:31:14] *** Joins: qbt (~qbt@user/edun)
[13:35:27] <Hash> Where does the IV come from?
[13:35:41] <Hash> An initialization vector (IV) is a fixed-size input to a cryptographic primitive that is
[13:35:44] <Hash> random or pseudo-random. Some cryptographic methods require the IV only to be non-repeating, not truly random. In this case, the IV is commonly called a nonce (number used once). Basically, an initialization vector is added to a cryptographic algorithm and key in order to increase the randomness of the resultant cipher text.
[13:35:46] <Hash> However...
[13:36:14] <Hash> What I don't understand is if it's random, and you add random data to your encryption algorithm, what happens during decryption?
[13:37:26] <maroon> it does the same thing that encryption does - it pretends the IV is the ciphertext for a block that doesnt exist
[13:37:41] <Hash> Say you add a random 32bit IV and XOR the plaintext with it prior to encryption. 
[13:37:53] <Hash> It's random. That's the part that's bothering me.
[13:38:00] <Hash> Nonce makes sense, it's static value.
[13:38:23] <maroon> by being random, it's simulating a pretend ciphertext block, that also looks random
[13:38:27] <Hash> I can't imagine a dynamic value. How do you generate this random value?
[13:38:39] <Hash> So when encrypting, you add random data as an IV. I get that.
[13:38:50] <snappy> with a secure random number generator
[13:38:50] <Hash> When you decrypt, where do you get that exact IV from ?
[13:39:17] <Hash> I mean if you try to decrypt and don't have the IV, what do you do?
[13:39:21] <Hash> Where is the IV saved?
[13:39:22] <maroon> depending on how you implement it, the IV doesnt even need to be random, it could be a sequential IV that's different each time
[13:39:25] <tempate> maroon: 25-digits long. I managed to factor it using pari gp
[13:39:26] <Hash> How is the IV transported?
[13:39:36] <Hash> I see.
[13:39:38] <maroon> the purpose of the IV is to disguise when you have identical plaintext in 2 messages
[13:40:02] <Hash> Is the IV required for decryption?
[13:40:25] <maroon> for CBC which is self-correcting, if you lose the IV, you lose only the decryption of the 1st block
[13:40:39] <Hash> Hmm.
[13:40:43] <Hash> Ok I think I need to read more.
[13:41:08] *** Joins: yanmaani2 (~yanmaani@gateway/tor-sasl/yanmaani)
[13:41:38] <Hash> I need a break. I've been at it for 3+ hours now.
[13:41:41] <Hash> Long study session.
[13:42:00] *** Quits: yanmaani1 (~yanmaani@gateway/tor-sasl/yanmaani) (Ping timeout: 276 seconds)
[13:45:11] *** Joins: CryptoDavid (uid14990@uxbridge.irccloud.com)
[13:48:06] <tempate> Correct me if I'm wrong, but if I'm trying to factorize a 25-digit semiprime that's the product of two 12-digit primes, and assuming my computer can perform about 10M tests per second, trial division would only take about 3 hours.
[13:48:17] <tempate> That doesn't sound too bad, frankly
[13:49:15] <maroon> trial division of each and every odd number up thru sqrt(semiprime)?
[13:49:49] <tempate> I was considering the even numbers too
[13:50:49] <tempate> 100B tests / 10M t/s = 10k s ~= 3h
[13:51:55] <maroon> i can see maybe that speed if N is of the size you can hold in a cpu register, but you're dividing by a biginteger
[13:52:20] <maroon> er, a biginteger being divided by numbers that eventually are also bigints
[13:52:37] *** Quits: igemnace (~ian@user/igemnace) (Quit: WeeChat 3.3)
[13:53:53] <maroon> i just tested this, and it could factor rsa256 https://www.atelierweb.com/products/googol/
[13:54:50] <maroon> it used siqs, whatever that is
[13:55:32] <tempate> Interesting
[13:56:58] <maroon> it does seem really slow when it's searching for next-probable-safe-prime
[13:59:33] *** Quits: yanmaani2 (~yanmaani@gateway/tor-sasl/yanmaani) (Ping timeout: 276 seconds)
[14:04:06] *** Quits: drathir_tor (~drathir@wireguard/tunneler/drathir) (Ping timeout: 276 seconds)
[14:04:17] *** Joins: yanmaani2 (~yanmaani@gateway/tor-sasl/yanmaani)
[14:08:04] *** Quits: anonymeowo (~anonymeow@107.189.14.18) (Remote host closed the connection)
[14:09:08] *** Joins: drathir_tor (~drathir@wireguard/tunneler/drathir)
[14:26:56] *** Joins: Everything (~Everythin@37.115.210.35)
[14:32:20] *** Quits: Sofia (~sofia@gateway/tor-sasl/sofia) (Remote host closed the connection)
[14:33:16] *** Joins: Sofia (~sofia@gateway/tor-sasl/sofia)
[14:34:46] *** Quits: tempate (~alpha@user/tempate) (Quit: Leaving.)
[14:42:21] *** Joins: namkeles44 (~namkeles@101.179.132.178)
[14:42:36] *** Quits: namkeles (~namkeles@101.179.132.178) (Quit: Client closed)
[14:45:47] *** Quits: namkeles44 (~namkeles@101.179.132.178) (Client Quit)
[14:46:06] *** Joins: namkeleser (~namkelese@101.179.132.178)
[14:47:14] *** Joins: igemnace (~ian@user/igemnace)
[15:13:51] *** Quits: madage (~madage@user/madage) (Remote host closed the connection)
[15:14:08] *** Joins: madage (~madage@user/madage)
[15:24:47] *** Joins: andreasbuhr (~quassel@p549db93c.dip0.t-ipconnect.de)
[15:40:00] *** Quits: q1 (~q1@gateway/tor-sasl/nunux) (Changing host)
[15:40:00] *** Joins: q1 (~q1@user/nunux)
[15:49:13] *** Quits: drathir_tor (~drathir@wireguard/tunneler/drathir) (Remote host closed the connection)
[15:49:43] *** Joins: joo-_ (~joo-_@fsf/member/joo--)
[15:51:45] *** Quits: zro (~zro@user/zro) (Quit: WeeChat 3.3)
[15:55:19] *** Joins: machinedgod (~machinedg@24.105.81.50)
[15:58:35] *** Quits: Colti (Miramar-FL@user/host-pond) (Excess Flood)
[15:59:55] *** Joins: Colti (Miramar-FL@user/host-pond)
[16:00:01] *** Quits: Everything (~Everythin@37.115.210.35) (Quit: leaving)
[16:01:39] *** Joins: drathir_tor (~drathir@wireguard/tunneler/drathir)
[16:06:02] *** Quits: Wintermute (~Wintermut@94.46.93.221) (Ping timeout: 260 seconds)
[16:13:13] *** Joins: Wintermute (~Wintermut@94.46.93.221)
[16:14:04] *** Joins: w4ld0 (w4ld0@gateway/vpn/protonvpn/w4ld0)
[16:22:45] *** Joins: d1cor (~diego@179.63.242.100)
[16:24:25] *** Quits: CryptoDavid (uid14990@uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[16:34:06] *** Joins: tempate (~alpha@user/tempate)
[16:35:33] *** Quits: drathir_tor (~drathir@wireguard/tunneler/drathir) (Ping timeout: 276 seconds)
[16:37:56] *** Quits: mononote (~mononote@user/mononote) (Ping timeout: 256 seconds)
[16:40:06] *** Quits: yanmaani2 (~yanmaani@gateway/tor-sasl/yanmaani) (Ping timeout: 276 seconds)
[16:40:46] *** Quits: namkeleser (~namkelese@101.179.132.178) (Quit: Client closed)
[16:40:50] *** Quits: qbt (~qbt@user/edun) (Quit: Leaving.)
[16:40:58] *** Joins: yanmaani2 (~yanmaani@gateway/tor-sasl/yanmaani)
[16:42:23] *** Quits: Maxattax (~max@50-195-160-193-static.hfc.comcastbusiness.net) (Ping timeout: 250 seconds)
[16:43:45] *** Quits: CryptoClub (~fafs@87.125.251.76) (Read error: Connection reset by peer)
[16:44:03] *** Joins: llorllale (~llorllale@2607:9880:3a18:69:38b1:6c00:ef77:bdd5)
[16:46:56] *** Joins: CryptoClub (~fafs@87.125.251.76)
[16:48:30] *** Joins: drathir_tor (~drathir@wireguard/tunneler/drathir)
[16:51:21] *** Joins: zer0bitz (~zer0bitz@2001:2003:f6bc:f00:bde7:830:4cf1:2fa1)
[16:52:56] *** Quits: drathir_tor (~drathir@wireguard/tunneler/drathir) (Remote host closed the connection)
[16:54:28] *** Joins: drathir_tor (~drathir@wireguard/tunneler/drathir)
[16:56:48] *** Quits: yanmaani2 (~yanmaani@gateway/tor-sasl/yanmaani) (Remote host closed the connection)
[16:57:29] *** Joins: yanmaani2 (~yanmaani@gateway/tor-sasl/yanmaani)
[17:04:31] *** Joins: _rtypo (~alex@user/rtypo)
[17:09:06] *** Quits: Pythayr (~pither195@64.42.181.51) (Ping timeout: 256 seconds)
[17:15:47] *** Joins: Guyver2 (Guyver@guyver2.xs4all.nl)
[17:16:20] *** Parts: tempate (~alpha@user/tempate) ()
[17:27:13] *** Joins: dna1 (~dna@47-220-190-100.gtwncmkt04.res.dyn.suddenlink.net)
[17:27:22] *** Joins: dude12312414 (~test@gateway/tor-sasl/dude12312414)
[17:29:04] *** Quits: frost (~frost@user/frost) (Quit: Connection closed)
[17:31:06] *** Joins: tempate (~alpha@user/tempate)
[17:31:31] <tempate> What's the standard way of picking the smoothness bound in the quadratic sieve?
[17:32:24] *** Joins: byteskeptical (~amnesia@user/byteskeptical)
[17:34:31] *** Joins: B4ckBOne (~B4ckBOne@static.88-198-44-71.clients.your-server.de)
[17:42:14] *** Quits: dna1 (~dna@47-220-190-100.gtwncmkt04.res.dyn.suddenlink.net) (Ping timeout: 260 seconds)
[17:42:40] *** Joins: zro (~zro@user/zro)
[17:43:01] <MacGyver> Google.
[17:43:29] <MacGyver> (That was an attempt at a bad joke, not telling you to google.)
[17:43:54] <int-e> (Or was it)
[17:47:03] <tempate> I wouldn't ask without googling and not finding anything first
[17:48:10] <MacGyver> Yeah, I just meant the standard way of picking is googling what other people pick :P
[17:49:04] <int-e> I don't know. I'd expect a mix of digging into papers (to at least figure out what they use asymptotically) and actual trial runs to gauge the rate at which new relations are produced and the cost of the linear algebra step
[17:49:14] *** Quits: byteskeptical (~amnesia@user/byteskeptical) (Remote host closed the connection)
[17:50:36] <int-e> All the while wondering whether I should consider researching GNFS instead because if I'm worried about that parameter choice I might be at the point where GNFS is faster. Oh and then I'd realize that cado-nfs is a thing.
[17:50:48] <int-e> But I'm not into factoring so this is hypothetical.
[17:50:48] <tempate> Fair enough
[17:50:49] <Chouhartem> if I remember correctly, with some examples in sage, ~10-15 work up to quite large numbers (for some definition of large)
[17:51:19] <tempate> Yeah, that's the thing. I was just factoring 10-digit numbers with B=30
[17:51:34] <tempate> I'm just using trial and error at this point
[17:53:15] <int-e> Hmm, that's still in the trial division range. With 20, maybe 30 digits I'd use the Pollard rho thing. It really only gets interesting beyond that point.
[17:53:48] <tempate> I'm basically just making sure my code works right now
[17:53:58] <tempate> I have to factorize a 25-digit semiprime
[17:55:04] <tempate> My implementation is written in C++ and I'm trying to figure out how to go about having 25-digit numbers
[17:55:54] <int-e> gmpxx is servicable IME
[17:56:44] <tempate> I don't know what any of those words mean
[17:57:53] <int-e> `gmpxx` is google fodder, you'll see it's a C++ wrapper for gmp; "IME" is "in my experience"
[17:58:20] <tempate> Alright, thanks
[17:59:29] *** Quits: dude12312414 (~test@gateway/tor-sasl/dude12312414) (Quit: THE RAM IS TOO DAMN HIGH)
[18:00:50] *** Quits: llorllale (~llorllale@2607:9880:3a18:69:38b1:6c00:ef77:bdd5) (Ping timeout: 260 seconds)
[18:01:37] *** Quits: w4ld0 (w4ld0@gateway/vpn/protonvpn/w4ld0) (Quit: Textual IRC Client: www.textualapp.com)
[18:02:43] *** Quits: igemnace (~ian@user/igemnace) (Remote host closed the connection)
[18:10:52] *** Joins: igemnace (~ian@user/igemnace)
[18:19:19] *** Joins: Maxattax (~max@136.sub-174-202-46.myvzw.com)
[18:19:33] *** Quits: drathir_tor (~drathir@wireguard/tunneler/drathir) (Ping timeout: 276 seconds)
[18:25:45] *** Joins: byteskeptical (~amnesia@user/byteskeptical)
[18:26:02] *** Joins: Pythayr (~pither195@2600:1700:82f0:2fe0:22c1:42c2:611b:80d0)
[18:28:31] <riv> https://twitter.com/matthew_d_green/status/1433470109742518273 i had no idea duel ec rng was taken advantage of in this way (by APT 5)
[18:28:33] <riv> that's amazing
[18:29:35] *** Quits: byteskeptical (~amnesia@user/byteskeptical) (Remote host closed the connection)
[18:31:35] *** Quits: Pythayr (~pither195@2600:1700:82f0:2fe0:22c1:42c2:611b:80d0) (Ping timeout: 264 seconds)
[18:31:51] *** Joins: Pythayr (~pither195@64.42.181.51)
[18:32:38] *** Quits: Maxattax (~max@136.sub-174-202-46.myvzw.com) (Ping timeout: 260 seconds)
[18:33:14] *** Quits: Pythayr (~pither195@64.42.181.51) (Client Quit)
[18:34:44] *** Joins: Maxattax (~max@131.sub-174-202-44.myvzw.com)
[18:35:25] *** Joins: drathir_tor (~drathir@wireguard/tunneler/drathir)
[18:35:48] *** Joins: Pythayr (~pither195@64.42.181.51)
[18:37:37] *** Joins: byteskeptical (~amnesia@user/byteskeptical)
[18:37:50] *** Quits: zro (~zro@user/zro) (Ping timeout: 265 seconds)
[18:38:33] *** Joins: Gallomimia (~Gallomimi@node-1w7jra2a2gqpy3qflgc31kcwf.ipv6.telus.net)
[18:44:31] *** Joins: zer0bitz_ (~zer0bitz@2001:2003:f6bc:f00:93d:ef3a:ec37:e2db)
[18:44:43] *** Joins: mononote (~mononote@user/mononote)
[18:45:03] *** Joins: defiant (~defiant@user/defiant)
[18:46:11] *** Quits: zer0bitz (~zer0bitz@2001:2003:f6bc:f00:bde7:830:4cf1:2fa1) (Ping timeout: 268 seconds)
[18:56:56] *** Joins: eson123 (~eson123@118.69.128.37)
[18:59:00] *** Joins: yeirr (~yeirr@user/yeirr)
[18:59:14] *** Parts: eson123 (~eson123@118.69.128.37) ()
[19:09:33] <Alipha> <Hash> So what was wrong with CBC what we needed to make PCBC? PCBC is "more secure" because if an attacker attempts to modify the ciphertext, then the whole rest of the ciphertext from that point will become garbage, unlike in CBC where changes to the ciphertext only affect 2 blocks.
[19:10:28] <Alipha> Hash: the IV needs to be sent with the ciphertext. Typically, people just prepend the IV to the ciphertext.
[19:13:34] <Alipha> Hash: a nonce is NOT static. "nonce" stands for "number used once". You MUST use a unique nonce for every time you encrypt using the same key. A nonce does not need to be random (unlike an IV), so it's common to just increment the nonce value after every encryption.
[19:15:15] *** Joins: xenoterracide (~xenoterra@99-124-139-34.lightspeed.iplsin.sbcglobal.net)
[19:15:23] <ms7821> nonce doesn't stand for anything
[19:16:49] <iz> yeah, it means that, but it's referencing https://en.wikipedia.org/wiki/Nonce_word
[19:23:24] *** Quits: Maxattax (~max@131.sub-174-202-44.myvzw.com) (Ping timeout: 256 seconds)
[19:25:09] *** Joins: Maxattax (~max@15.sub-174-202-46.myvzw.com)
[19:25:45] *** Joins: mouseghost (~draco@user/mouseghost)
[19:25:51] *** Quits: drathir_tor (~drathir@wireguard/tunneler/drathir) (Ping timeout: 276 seconds)
[19:27:35] *** Quits: tempate (~alpha@user/tempate) (Quit: Leaving.)
[19:29:46] *** Quits: Maxattax (~max@15.sub-174-202-46.myvzw.com) (Read error: Connection reset by peer)
[19:32:51] *** Joins: qbt (~qbt@user/edun)
[19:34:58] *** Joins: zro (~zro@user/zro)
[19:34:58] *** Quits: qbt (~qbt@user/edun) (Client Quit)
[19:36:56] <ericonr> q1: you don't need to encrypt initrd to have it authenticated
[19:37:49] <q1>  ah lol yea
[19:37:57] <q1> only the parameters
[19:38:04] <q1> to keep them safe
[19:39:31] <ericonr> why would you have secret kernel parameters?
[19:41:14] *** Joins: Maxattax (~max@15.sub-174-202-46.myvzw.com)
[19:41:22] *** Quits: jtgd (~jtgd@user/jtgd) (Read error: Connection reset by peer)
[19:55:11] *** Joins: qbt (~qbt@user/edun)
[20:00:14] *** Quits: Wintermute (~Wintermut@94.46.93.221) (Ping timeout: 256 seconds)
[20:07:37] *** Quits: Maxattax (~max@15.sub-174-202-46.myvzw.com) (Read error: Connection reset by peer)
[20:11:35] *** Joins: cvmn (~caveman@gateway/tor-sasl/caveman)
[20:13:38] *** Joins: Maxattax (~max@15.sub-174-202-46.myvzw.com)
[20:18:26] *** Joins: drathir_tor (~drathir@wireguard/tunneler/drathir)
[20:19:02] *** Quits: Maxattax (~max@15.sub-174-202-46.myvzw.com) (Ping timeout: 240 seconds)
[20:20:58] *** Joins: Maxattax (~max@255.sub-174-202-39.myvzw.com)
[20:32:52] *** Quits: cvmn (~caveman@gateway/tor-sasl/caveman) (Remote host closed the connection)
[20:33:18] *** Joins: cvmn (~caveman@gateway/tor-sasl/caveman)
[20:50:41] *** Quits: xenoterracide (~xenoterra@99-124-139-34.lightspeed.iplsin.sbcglobal.net) (Ping timeout: 256 seconds)
[20:51:13] *** Joins: namkeleser (~namkelese@101.179.132.178)
[20:52:57] *** Quits: X-Scale (~ARM@165.201.137.78.rev.vodafone.pt) (Ping timeout: 256 seconds)
[20:52:59] *** Joins: X-Scale` (~ARM@83.223.248.137)
[20:54:37] *** X-Scale` is now known as X-Scale
[20:56:21] *** Quits: Maxattax (~max@255.sub-174-202-39.myvzw.com) (Ping timeout: 256 seconds)
[20:58:18] *** Joins: Maxattax (~max@50-195-160-193-static.hfc.comcastbusiness.net)
[21:03:21] *** Quits: namkeleser (~namkelese@101.179.132.178) (Quit: Client closed)
[21:09:42] *** Quits: Haohmaru (~Haohmaru@195.24.53.110) ()
[21:14:03] *** Parts: azonenberg (~azonenber@gw-ipv4.poulsbo.antikernel.net) ()
[21:14:29] *** Joins: xenoterracide (~xenoterra@2600:1700:71d4:810:7809:8396:63f0:6697)
[21:16:14] *** Joins: RickSanchez (~RickSanch@2607:fb90:1d67:afea:59b5:5819:f0d0:f91)
[21:32:56] *** Quits: Bonstra (~Bonstra@val.bonstra.fr.eu.org) (Quit: Pouf c'est tout !)
[21:36:29] *** Joins: Bonstra (~Bonstra@val.bonstra.fr.eu.org)
[21:44:36] *** Joins: namkeleser (~namkelese@101.179.132.178)
[21:51:39] <chomwitt> in a permissionless crypto eg: BCH or BTC if a have a full node and i validate every new block what would happen if my node doesnt accept a block, Where will that info goes? 
[21:53:51] *** Joins: aleck1 (~aleck@user/aleck)
[21:53:51] *** Quits: yeirr (~yeirr@user/yeirr) (Remote host closed the connection)
[21:54:13] *** Quits: namkeleser (~namkelese@101.179.132.178) (Quit: Client closed)
[21:56:26] *** Quits: aleck (~aleck@user/aleck) (Ping timeout: 256 seconds)
[21:58:05] <Alipha> chomwitt: the block just gets ignored
[21:58:59] <chomwitt> Alipha, thanks
[22:00:28] <Alipha> chomwitt: for a proof-of-stake (PoS) blockchain, there's some mechanism to report bad blocks and to take away the stake from the node which submitted the bad block
[22:00:49] <Alipha> i assume that info would be incorporated into the next block which is created
[22:02:56] *** Joins: dna1 (~dna@47-220-190-100.gtwncmkt04.res.dyn.suddenlink.net)
[22:04:55] <chomwitt> i see , but in PoW is just ignored
[22:07:39] *** Joins: Choco93 (~Choco@host150.200-71-232.telecom.net.ar)
[22:07:47] *** Quits: hqdruxn08_ (~hqdruxn08@cpe-66-68-166-214.austin.res.rr.com) (Ping timeout: 256 seconds)
[22:07:53] *** Joins: zer0bitz (~zer0bitz@dsl-hkibng31-54fabc-15.dhcp.inet.fi)
[22:08:20] *** Quits: Choco (~Choco@host150.200-71-232.telecom.net.ar) (Ping timeout: 256 seconds)
[22:08:31] *** Joins: tempate (~alpha@user/tempate)
[22:09:41] *** Quits: zer0bitz_ (~zer0bitz@2001:2003:f6bc:f00:93d:ef3a:ec37:e2db) (Ping timeout: 268 seconds)
[22:09:49] <Alipha> chomwitt: yep
[22:10:29] *** Parts: tempate (~alpha@user/tempate) ()
[22:15:15] *** Quits: dna1 (~dna@47-220-190-100.gtwncmkt04.res.dyn.suddenlink.net) (Ping timeout: 268 seconds)
[22:16:28] *** Joins: dna1 (~dna@47-220-190-100.gtwncmkt04.res.dyn.suddenlink.net)
[22:20:11] *** Joins: ioxzev1z (~ioxzev1z@user/ioxzev1z)
[22:23:18] *** Quits: cvmn (~caveman@gateway/tor-sasl/caveman) (Ping timeout: 276 seconds)
[22:25:35] *** Quits: dna1 (~dna@47-220-190-100.gtwncmkt04.res.dyn.suddenlink.net) (Ping timeout: 264 seconds)
[22:28:06] *** Quits: sm2n_ (~sm2n@user/sm2n) (Read error: Connection reset by peer)
[22:28:10] *** Joins: sm2n (~sm2n@user/sm2n)
[22:30:02] *** Joins: dna1 (~dna@47-220-190-100.gtwncmkt04.res.dyn.suddenlink.net)
[22:35:53] *** Quits: xenoterracide (~xenoterra@2600:1700:71d4:810:7809:8396:63f0:6697) (Remote host closed the connection)
[22:37:34] *** Joins: xenoterracide (~xenoterra@2600:1700:71d4:810:7809:8396:63f0:6697)
[22:38:40] *** Quits: dna1 (~dna@47-220-190-100.gtwncmkt04.res.dyn.suddenlink.net) (Remote host closed the connection)
[22:46:04] *** Quits: xenoterracide (~xenoterra@2600:1700:71d4:810:7809:8396:63f0:6697) (Ping timeout: 268 seconds)
[22:48:55] *** Joins: Killirse (~Killirse@146.120.222.5)
[22:52:51] *** Quits: byteskeptical (~amnesia@user/byteskeptical) (Remote host closed the connection)
[22:57:05] *** Quits: Falconer (~ronnyma@227.84-48-191.nextgentel.com) (Ping timeout: 256 seconds)
[23:03:24] *** Joins: Falconer (~ronnyma@227.84-48-191.nextgentel.com)
[23:07:52] *** Quits: Killirse (~Killirse@146.120.222.5) (Remote host closed the connection)
[23:11:00] *** Quits: RickSanchez (~RickSanch@2607:fb90:1d67:afea:59b5:5819:f0d0:f91) (Remote host closed the connection)
[23:11:34] *** Joins: RickSanchez (~RickSanch@2607:fb90:1d67:afea:59b5:5819:f0d0:f91)
[23:15:17] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[23:17:12] *** Quits: RickSanchez (~RickSanch@2607:fb90:1d67:afea:59b5:5819:f0d0:f91) (Ping timeout: 265 seconds)
[23:18:07] *** Joins: RickSanchez (~RickSanch@2607:fb90:1d67:afea:59b5:5819:f0d0:f91)
[23:19:16] *** Quits: BOKALDO (~BOKALDO@user/bokaldo) (Quit: Leaving)
[23:23:05] *** Quits: RickSanchez (~RickSanch@2607:fb90:1d67:afea:59b5:5819:f0d0:f91) (Ping timeout: 268 seconds)
[23:23:54] *** Joins: RickSanchez (~RickSanch@2607:fb90:1d67:afea:59b5:5819:f0d0:f91)
[23:28:37] *** Quits: RickSanchez (~RickSanch@2607:fb90:1d67:afea:59b5:5819:f0d0:f91) (Ping timeout: 268 seconds)
[23:29:25] <Hash> Alipha: thanks
[23:29:29] <Hash> Good morning
[23:35:53] *** Joins: xenoterracide (~xenoterra@2600:1700:71d4:810:7809:8396:63f0:6697)
[23:38:42] *** Quits: yanmaani2 (~yanmaani@gateway/tor-sasl/yanmaani) (Ping timeout: 276 seconds)
[23:41:23] *** Joins: yanmaani2 (~yanmaani@gateway/tor-sasl/yanmaani)
[23:46:20] *** Joins: namkeleser (~namkelese@101.179.132.178)
[23:54:06] *** Joins: dna1 (~dna@47-220-190-100.gtwncmkt04.res.dyn.suddenlink.net)
[23:57:36] *** Quits: xenoterracide (~xenoterra@2600:1700:71d4:810:7809:8396:63f0:6697) (Ping timeout: 268 seconds)
