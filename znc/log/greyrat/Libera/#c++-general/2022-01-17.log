[00:01:26] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:5984:7505:b3af:3ddb)
[00:08:39] *** Joins: xkoncek (xkoncek@lounge.fi.muni.cz)
[00:09:59] *** Quits: evocatus (~evocatus@62.182.77.224) (Quit: Leaving)
[00:19:20] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[00:25:36] *** Joins: Ivii (~Ivyy@2001:a62:4c3:8e01:35a0:e4d2:2738:3a6)
[00:27:10] *** Quits: jehelset (~jeh@2001:4644:4144:0:e2d4:e8ff:fedf:f070) (Ping timeout: 250 seconds)
[00:46:28] *** Joins: williampiv (~williampi@ip24-254-86-223.sb.sd.cox.net)
[00:47:31] *** Quits: williampiv (~williampi@ip24-254-86-223.sb.sd.cox.net) (Client Quit)
[00:48:27] *** Quits: kaph (~kaph@net-2-47-208-144.cust.vodafonedsl.it) (Read error: Connection reset by peer)
[00:57:14] *** Joins: kaph (~kaph@net-2-47-208-144.cust.vodafonedsl.it)
[00:57:15] *** Quits: kaph (~kaph@net-2-47-208-144.cust.vodafonedsl.it) (Remote host closed the connection)
[01:15:08] *** Quits: chozorho (~chozorho@2601:146:300:c30::719a) (Quit: WeeChat 3.0)
[01:18:59] *** Quits: magla (~gelignite@55d4ed71.access.ecotel.net) (Quit: Stay safe!)
[01:20:19] *** Joins: williampiv (~williampi@ip24-254-86-223.sb.sd.cox.net)
[01:20:26] *** Quits: RoKenn (~RoKenn@user/rokenn) (Quit: NSA proxy service interrupted)
[01:20:36] *** Quits: robod34 (~Username@79.113.195.239) (Quit: Goe offline! ( http://marius.sucan.ro/ ))
[01:21:20] *** Quits: williampiv (~williampi@ip24-254-86-223.sb.sd.cox.net) (Client Quit)
[01:23:25] <sprout> dabbling so far with c++20 module support to compile a small interpreter.  mscv has modules but cmake is lacking and cannot get it to compile with libicu,  gcc doesn't export constexpr and runs out of location markers,  now trying clang
[01:27:33] *** Joins: markong (~kvirc@213.146.188.203)
[01:28:13] *** Joins: pulse (~pulse@user/pulse)
[01:33:03] *** Joins: jkaye (~jkaye@2601:281:8300:7530:a42:be20:6ada:7861)
[01:40:32] *** Quits: Praise (~Fat@user/praise) (Ping timeout: 240 seconds)
[01:41:05] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[01:41:06] *** Joins: Praise (~Fat@user/praise)
[01:41:12] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[01:41:12] *** ChanServ sets mode: +v npaperbot
[01:43:57] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 276 seconds)
[01:45:35] *** Quits: jkaye (~jkaye@2601:281:8300:7530:a42:be20:6ada:7861) (Remote host closed the connection)
[01:46:07] *** Quits: kenanmarasli (~kenanmara@user/kenanmarasli) (Quit: Leaving)
[01:46:10] *** Joins: chozorho (~chozorho@2601:146:300:c30::304)
[01:51:54] *** Quits: TheGuestMovie (~TheGuestM@173.231.114.74) (Quit: Client closed)
[01:55:45] *** Quits: Simplar (~Simplar@188.163.93.76) (Quit: Going offline, see ya! (www.adiirc.com))
[02:05:58] *** Quits: proller (~p@2a02:6b8:b081:8014::1:4) (Ping timeout: 250 seconds)
[02:10:38] *** Joins: blackout69 (~blackout6@net-109-117-245-237.cust.vodafonedsl.it)
[02:19:19] *** Joins: proller (~p@80.240.216.69)
[02:31:05] *** Joins: jkaye (~jkaye@2601:281:8300:7530:4077:3f1e:888b:24b3)
[02:31:24] *** phoenix1 is now known as phoenix
[02:36:41] *** Joins: jehelset (~jeh@2001:4644:4144:0:e2d4:e8ff:fedf:f070)
[02:44:32] *** Quits: rayw (~ray@cpc83999-pool15-2-0-cust1.15-1.cable.virginm.net) (Ping timeout: 250 seconds)
[02:57:03] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[03:00:05] *** Quits: Brewster (~Brewster@104.145.226.5) (Changing host)
[03:00:05] *** Joins: Brewster (~Brewster@user/brewster)
[03:03:19] *** Parts: blackout69 (~blackout6@net-109-117-245-237.cust.vodafonedsl.it) ()
[03:06:03] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Remote host closed the connection)
[03:08:17] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.4)
[03:08:19] *** Quits: jkaye (~jkaye@2601:281:8300:7530:4077:3f1e:888b:24b3) (Remote host closed the connection)
[03:08:47] *** Joins: jkaye (~jkaye@2601:281:8300:7530:4077:3f1e:888b:24b3)
[03:10:58] *** Quits: oknenavin (~nomo@95.87.208.95) (Ping timeout: 250 seconds)
[03:11:31] *** Quits: jkaye (~jkaye@2601:281:8300:7530:4077:3f1e:888b:24b3) (Remote host closed the connection)
[03:12:14] *** Joins: jkaye (~jkaye@2601:281:8300:7530:4077:3f1e:888b:24b3)
[03:18:22] *** Quits: ashafq (~ashafq@pool-96-237-238-252.bstnma.fios.verizon.net) (Quit: Leaving)
[03:18:31] *** Joins: ashafq (~ashafq@pool-96-237-238-252.bstnma.fios.verizon.net)
[03:19:29] *** Quits: ashafq (~ashafq@pool-96-237-238-252.bstnma.fios.verizon.net) (Client Quit)
[03:19:38] *** Joins: ashafq (~ashafq@pool-96-237-238-252.bstnma.fios.verizon.net)
[03:23:06] *** Quits: markong (~kvirc@213.146.188.203) (Ping timeout: 250 seconds)
[03:27:18] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[03:28:00] *** Joins: CppCon (~cppcon@12.159.165.130)
[03:40:36] *** Quits: DSpider (~DSpider@82.79.237.32) (Quit: Leaving)
[03:46:04] *** Quits: zmt00 (~zmt00@user/zmt00) (Read error: Connection reset by peer)
[03:49:37] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[03:49:37] *** Quits: n3rdy1 (~n3rdy1@2600:1700:4570:3480:1b88:50f:dae0:9293) (Ping timeout: 240 seconds)
[04:10:25] *** Joins: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse)
[04:12:39] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:1d45:c0f8:56d9:c89f) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[04:13:16] <sprout> gcc outright kills the terminal when compiling clang
[04:13:24] <sprout> food,  not friends
[04:20:16] *** Joins: hexingb (~hexingb@2409:8902:78c7:73fb:257c:1ea7:1f1c:f784)
[04:24:37] *** Quits: jkaye (~jkaye@2601:281:8300:7530:4077:3f1e:888b:24b3) (Ping timeout: 240 seconds)
[04:25:27] *** Quits: Jupp_S (~quassel@ip-88-153-154-129.hsi04.unitymediagroup.de) (Remote host closed the connection)
[04:25:43] <CppCon> oO
[04:26:37] *** Quits: hexingb (~hexingb@2409:8902:78c7:73fb:257c:1ea7:1f1c:f784) (Ping timeout: 240 seconds)
[04:27:45] *** Joins: hexingb (~hexingb@111.32.64.41)
[04:29:07] *** Quits: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz) (Remote host closed the connection)
[04:30:36] *** Quits: Ivii (~Ivyy@2001:a62:4c3:8e01:35a0:e4d2:2738:3a6) (Remote host closed the connection)
[04:33:32] *** Quits: Burgundy (~yomon@82.76.72.88) (Ping timeout: 240 seconds)
[04:37:42] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[04:46:41] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:5984:7505:b3af:3ddb) (Quit: Quit)
[04:50:02] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 240 seconds)
[05:01:39] *** Joins: DrMax__ (~DrMax@node-1w7jra94757fyob8fnmfiiypq.ipv6.telus.net)
[05:02:10] *** Quits: johnny (~johnny@user/johnny) (Remote host closed the connection)
[05:02:42] *** Quits: DrMax__ (~DrMax@node-1w7jra94757fyob8fnmfiiypq.ipv6.telus.net) (Client Quit)
[05:03:07] *** Joins: malloy (~jimery@113.116.52.211)
[05:04:05] *** Joins: johnny (~johnny@user/johnny)
[05:18:04] *** Joins: seninha (~seninha@user/seninha)
[05:22:49] *** Quits: RabidToaster (~Thunderbi@bras-base-otwaon234vw-grc-15-50-100-215-56.dsl.bell.ca) (Ping timeout: 256 seconds)
[05:25:32] *** Joins: williampiv (~williampi@ip24-254-86-223.sb.sd.cox.net)
[05:26:38] *** Quits: malloy (~jimery@113.116.52.211) (Ping timeout: 250 seconds)
[05:28:48] *** Joins: malloy (~jimery@113.116.52.211)
[05:31:53] *** Quits: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-43-67-70-144-105.dsl.bell.ca) (Ping timeout: 256 seconds)
[05:39:40] *** Joins: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-35-70-24-248-134.dsl.bell.ca)
[05:41:05] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[05:41:13] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[05:41:13] *** ChanServ sets mode: +v npaperbot
[05:44:32] *** Quits: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-35-70-24-248-134.dsl.bell.ca) (Ping timeout: 240 seconds)
[05:44:43] *** Quits: williampiv (~williampi@ip24-254-86-223.sb.sd.cox.net) (Quit: williampiv)
[05:45:48] *** Joins: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-35-70-24-248-134.dsl.bell.ca)
[05:53:59] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[06:01:59] *** Joins: leduyquang753 (~leduyquan@user/leduyquang753)
[06:13:46] *** Joins: zmt00 (~zmt00@user/zmt00)
[06:17:29] *** Joins: packet_lozenge (~packet_lo@user/packet-lozenge/x-7125090)
[06:20:15] *** Joins: williampiv (~williampi@ip24-254-86-223.sb.sd.cox.net)
[06:24:47] *** Quits: EdFletcher (~PKD@user/edfletcher) (Quit: Quit.)
[06:27:30] *** Joins: EdFletcher (~PKD@user/edfletcher)
[06:33:39] *** Joins: arch-angel (~arch-ange@2001:e68:5400:628:98f4:a0ee:dd7:976f)
[06:44:10] *** Quits: jehelset (~jeh@2001:4644:4144:0:e2d4:e8ff:fedf:f070) (Ping timeout: 250 seconds)
[06:46:26] *** Quits: KombuchaKip (~kip@192.252.230.5) (Quit: Leaving.)
[06:47:02] *** Quits: radu242407821 (~radu242@pool-96-250-79-242.nycmny.fios.verizon.net) (Ping timeout: 240 seconds)
[06:57:29] *** Quits: CppCon (~cppcon@12.159.165.130) (Quit: This computer has gone to sleep)
[07:03:50] *** Quits: williampiv (~williampi@ip24-254-86-223.sb.sd.cox.net) (Quit: williampiv)
[07:05:02] *** Quits: skapata (~Skapata@user/skapata) (Ping timeout: 240 seconds)
[07:08:10] *** Joins: williampiv (~williampi@ip24-254-86-223.sb.sd.cox.net)
[07:09:44] *** Quits: AmR (~AmREiSa@41.36.185.103) (Quit: Konversation terminated!)
[07:12:38] *** Quits: williampiv (~williampi@ip24-254-86-223.sb.sd.cox.net) (Client Quit)
[07:15:25] *** Quits: zmt00 (~zmt00@user/zmt00) (Read error: Connection reset by peer)
[07:15:56] *** Joins: adeliktas6 (~adeliktas@i59F4A597.versanet.de)
[07:16:52] *** Joins: zmt00 (~zmt00@user/zmt00)
[07:17:22] *** Quits: Roughy (~mdaw45ns@user/roughy) (Quit: Meadow Fresh milk)
[07:18:01] *** Quits: adeliktas (~adeliktas@i59F52DAD.versanet.de) (Ping timeout: 256 seconds)
[07:18:01] *** adeliktas6 is now known as adeliktas
[07:23:06] *** Joins: jimmio92 (~jimmio92@pool-96-227-111-47.phlapa.fios.verizon.net)
[07:27:36] *** Joins: Jupp_S (~quassel@ip-88-153-154-129.hsi04.unitymediagroup.de)
[07:36:43] *** Joins: Leo_V (~Leo@157.52.18.77)
[07:39:12] *** Quits: Leone (~Leo@157.52.18.77) (Ping timeout: 250 seconds)
[07:49:15] *** Joins: skapata (~Skapata@2804:14c:87b0:a6f9:506e:821:1232:2e80)
[07:49:15] *** Quits: skapata (~Skapata@2804:14c:87b0:a6f9:506e:821:1232:2e80) (Changing host)
[07:49:15] *** Joins: skapata (~Skapata@user/skapata)
[08:05:05] *** Quits: cbreak (~cbreak@77-58-201-132.dclient.hispeed.ch) (Read error: Connection reset by peer)
[08:07:45] *** Joins: n3rdy1 (~n3rdy1@2600:1700:4570:3480::41)
[08:08:16] *** Joins: cbreak (~cbreak@77-58-201-132.dclient.hispeed.ch)
[08:08:21] *** Quits: xkuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[08:09:01] *** Quits: hexingb (~hexingb@111.32.64.41) (Ping timeout: 256 seconds)
[08:25:43] <Garbanzo_> boost::hana is pretty nice.  I just started playing with it and put up a RossettaCode solution with it at http://rosettacode.org/wiki/Amb.  Anyone ever use it?
[08:27:34] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[08:28:02] <ville> not beyond hello world-level
[08:36:13] *** Quits: geranim0 (~geranim0@modemcable242.171-178-173.mc.videotron.ca) (Ping timeout: 256 seconds)
[08:40:46] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[08:47:11] *** Parts: jimmio92 (~jimmio92@pool-96-227-111-47.phlapa.fios.verizon.net) ()
[08:53:29] *** Joins: jehelset (~jeh@2001:4644:4144:0:e2d4:e8ff:fedf:f070)
[08:57:57] *** Quits: n3rdy1 (~n3rdy1@2600:1700:4570:3480::41) (Ping timeout: 240 seconds)
[08:59:22] *** Joins: zmt01 (~zmt00@user/zmt00)
[09:02:17] *** Quits: zmt00 (~zmt00@user/zmt00) (Ping timeout: 240 seconds)
[09:07:17] *** Joins: radu242407821 (~radu242@pool-96-250-79-242.nycmny.fios.verizon.net)
[09:08:47] *** Joins: Burgundy (~yomon@82.76.72.88)
[09:11:23] *** Joins: n3rdy1 (~n3rdy1@2600:1700:4570:3480:1b88:50f:dae0:9293)
[09:12:50] *** Quits: malloy (~jimery@113.116.52.211) (Ping timeout: 250 seconds)
[09:14:45] *** Joins: malloy (~jimery@113.116.52.211)
[09:20:22] *** Joins: williampiv (~williampi@ip24-254-86-223.sb.sd.cox.net)
[09:23:15] *** Quits: HvszrStykp (~X@81.171.62.86) (Ping timeout: 256 seconds)
[09:24:50] *** Joins: jimmio92 (~jimmio92@pool-96-227-111-47.phlapa.fios.verizon.net)
[09:35:51] <ac_slater> opinions on dlang?
[09:36:19] * ac_slater hides
[09:37:17] *** Quits: zmt01 (~zmt00@user/zmt00) (Ping timeout: 240 seconds)
[09:40:14] <jimmio92> ac_slater it's like C++ but they think it's "better". Just like objective-c people think it's "better" than C++. Myself, I prefer C with methods.:P Â Off topic tho.
[09:40:24] <jimmio92> Asking here instead of #C++ since it's about a gcc extension afaict; should I avoid using nested-anon-types and gnu-anonymous-struct together like `struct Vec3 { union { float data[3]; struct { float x, y, z}; }; };`? Using it in this way improves usage dramatically without needing references, and also guarantees there is a contiguous location for
[09:40:24] <jimmio92> the data without having to ask the compiler to pack tightly. Seems to be a win-win, hence my asking folks who might know better. Thanks!
[09:41:06] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[09:41:14] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[09:41:14] *** ChanServ sets mode: +v npaperbot
[09:42:01] <kalven> why would it guarantee contiguous locations?
[09:47:03] <jimmio92> Arrays are packed tightly, where as `struct Foo { T x, y, z; }` likely has padding at the end; or possibly anywhere as it's up to the compiler. Casting a structure to an array type feels like a horrible decision, and unfortunately some APIs expect a pointer vs. X number of values separately. Am I mistaken in my understanding here?
[09:48:54] *** Quits: great_taste (~great_tas@user/great-taste/x-5798414) (Quit: Client closed)
[09:49:52] <kalven> when people use the above approach, they typically intend to be able to use .data[2] and .z interchangeably
[09:52:22] <ville> ac_slater: garbage collector
[09:53:06] <ville> jimmio92: sucks for debugging
[09:53:19] *** Joins: irrenhaus3 (~xenon@HSI-KBW-046-005-002-171.hsi8.kabel-badenwuerttemberg.de)
[09:53:35] <jimmio92> kalven Yeah, like... Vec3 obj_vel(0.0f, 0.0f, 0.0f); ... obj_vel.z -= 9.81*delta ... gfx_api_set_uniform("vel", obj_vel.data)
[09:54:02] <ac_slater> ville: yea. I know the feature set. Just curious what you feel about it. I'm looking at "BetterC" mode but running into some confusion about compilers. Might be time to finally get a handle on C++ support in some of my linker scripts instead of looking for a new ecosystem
[09:54:17] <ville> ac_slater: as such it's a non-starter
[09:54:19] *** Quits: williampiv (~williampi@ip24-254-86-223.sb.sd.cox.net) (Quit: williampiv)
[09:54:31] <kalven> jimmio92: right, which would mean that you already expect the struct to be contiguous..
[09:54:53] <ac_slater> ville: seems like `GC.disable;` is a first-class feature
[09:55:01] <ville> ac_slater: wrong default
[09:55:05] <ac_slater> yea
[09:59:47] *** Joins: williampiv (~williampi@ip24-254-86-223.sb.sd.cox.net)
[10:00:29] <jimmio92> kalven I need it to be contiguous, yes. C++ doesn't guarantee that a struct is contiguous and the compiler is free to pad it however it thinks is best AFAIK, though again I can specifically ask it for no padding, but `__attribute__((packed))` is fugly-hack imo. Using a union with an array as the first element guarantees this, as the other elements
[10:00:30] <jimmio92> must take the same size, and therefore occupy the same memory.
[10:01:21] <jimmio92> ville how do you figure it will suck to debug? Do you expect error messages will be horrible like old GCC template errors? :P
[10:01:26] <kalven> no, union doesn't guarantee that they take the same size
[10:02:10] *** Quits: williampiv (~williampi@ip24-254-86-223.sb.sd.cox.net) (Client Quit)
[10:04:01] *** Joins: williampiv (~williampi@ip24-254-86-223.sb.sd.cox.net)
[10:05:16] <ville> jimmio92: as in to view it in a debugger. it has additional garbage you print it in gdb, or you have to click little [+] icons in a graphical debuffer possibly
[10:05:27] <ville> err debugger
[10:07:20] <ville> it can be ok for the first few times, but spend hours debugging something and repeatedly clicking those [+] things open after you've restarted starts to get on one's nerves
[10:07:42] <ac_slater> (thinks we need a better debugger)
[10:07:52] <ac_slater> I think*
[10:08:00] <ac_slater> gdb causes me physical pain
[10:09:07] <jimmio92> Ah, that's a good point ville, I hadn't thought of the debugging side. I'll have to give that a go and see how gdb treats it.
[10:09:48] <kalven> << sizeof(u);  union u { char x; float y[10]; };
[10:09:48] <geordi> 40
[10:10:17] <ac_slater> << sizoef(u); union u { char x; float y[10]; } __attribute__((packed));
[10:10:18] <geordi> error: expected primary-expression before ')' token
[10:10:24] <ac_slater> fuuu
[10:10:39] <ville> umm what do you expect the compiler to pack there?
[10:10:45] <kalven> it's as packed as it can be
[10:11:41] <jimmio92> kalven I misspoke. Not that the sizes would match, rather the memory will be there for the largest size in the union, and memory is shared between both names.
[10:12:01] <ville> jimmio92: i once tried using glm, a popular math library for 3d graphics, and then had to debug something and immediately stopped fixing the bug and rather moved on to rip out glm from the project
[10:12:40] <kalven> jimmio92: right, but do you see the implication here? if you use data[2] and z interchangeably, you are *already* assuming that the struct has no padding
[10:12:43] <ville> jimmio92: it uses this kind of structural pattern extensively
[10:13:01] <kalven> side note: it's perfectly reasonable to assume that struct foo { float x,y,z; }; has no padding
[10:13:12] <jimmio92> Ohhh, sh*t, you're right.
[10:17:01] <jimmio92> uhh that was to kalven about using them interchangeably, lol. If it's safe to assume there's no padding between values, then I could just cast the struct to a pointer of type float and no longer depend on a GCC extension, which was half the reason I tried to write it like this :P
[10:17:45] <ville> safe in practice. not safe as far as the language is concerned
[10:18:13] <kalven> static_assert and move on
[10:18:18] *** Joins: rayw (~ray@cpc83999-pool15-2-0-cust1.15-1.cable.virginm.net)
[10:20:33] *** Joins: p-i- (~Ohmu@2403:6200:8978:2a76:dd5f:304c:a7ec:7c34)
[10:25:06] *** Joins: KombuchaKip (~kip@192.252.230.5)
[10:27:26] *** Quits: arch-angel (~arch-ange@2001:e68:5400:628:98f4:a0ee:dd7:976f) (Quit: Leaving)
[10:27:46] *** Joins: arch-angel (~arch-ange@2001:e68:5400:628:98f4:a0ee:dd7:976f)
[10:27:53] <jimmio92> geordi { struct Foo { union { float data[3]; struct { float x, y, z; }s; }; }; Foo foo; cout << sizeof(foo.data) << " = " << sizeof(foo.s) << " " << (&foo.data[2] == &foo.s.z); }
[10:27:53] <geordi> 12 = 12 true
[10:29:12] <jimmio92> (granted I named it there but whatever...) I assume you meant to static_assert that last bit and fail to compile if the memory locations don't match like I expect?
[10:30:53] *** Joins: JohnMS_WORK (~kvirc@89-64-83-123.dynamic.chello.pl)
[10:31:17] *** Quits: Garbanzo_ (~Garbanzo@2602:304:6eac:dc10::46) (Ping timeout: 240 seconds)
[10:33:33] <InPhase> jimmio92: Instead of undefined behavior, try using memcpy and trusting the optimizer...
[10:37:14] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:25c4:f0c4:39d4:7801)
[10:37:28] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:e9a6:1557:3796:678c)
[10:38:22] *** Quits: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl) (Read error: Connection reset by peer)
[10:40:04] *** Joins: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl)
[10:40:22] *** Quits: malloy (~jimery@113.116.52.211) (Ping timeout: 250 seconds)
[10:40:26] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[10:42:26] *** Joins: malloy (~jimery@113.116.52.211)
[10:44:14] *** Quits: pulse (~pulse@user/pulse) (Ping timeout: 250 seconds)
[10:53:12] <jimmio92> InPhase I do trust the optimizer; I even trust it will attempt to vectorize my naive vector math since I know I can't write performant code myself using MMX/SSE intrinsics as I'm totally unfamiliar with them. I am not sure what the undefined behavior you refer to is. I'm confused why you mentioned memcpy, as well.
[10:54:22] <Juliu> Use Eigen3
[10:54:33] *** Quits: williampiv (~williampi@ip24-254-86-223.sb.sd.cox.net) (Quit: williampiv)
[10:56:50] *** Quits: malloy (~jimery@113.116.52.211) (Ping timeout: 250 seconds)
[10:58:56] *** Joins: malloy (~jimery@113.116.52.211)
[10:58:56] *** Quits: Hello71 (~Hello71@wireguard/contributor/hello71) (Remote host closed the connection)
[10:59:12] *** Joins: Hello71 (~Hello71@wireguard/contributor/hello71)
[11:00:54] *** Quits: thad_the_man (~tlophd_be@2600:1700:3051:4370:21d:9ff:fe33:51f4) (Remote host closed the connection)
[11:04:05] *** Quits: chozorho (~chozorho@2601:146:300:c30::304) (Quit: WeeChat 3.0)
[11:04:46] *** Joins: williampiv (~williampi@ip24-254-86-223.sb.sd.cox.net)
[11:05:33] *** Joins: oknenavin (~nomo@95.87.208.95)
[11:07:18] <jimmio92> That's like me asking "my car is making this weird sound; should I do this to try and fix it?" and you tell me "Buy a Tesla Model 3". I realize libraries exist that do it better than naive-float-math. This project is intended to be as self-contained as possible and simple to work on (ie, I know it like the back of my hand because I wrote it). I
[11:07:19] <jimmio92> know I'm not going to write the quality that Eigen provides. I know I'm going to have bugs. I also know that nothing anyone is telling me here is helpful after ville and kalven helped, so I'm going to bed.
[11:07:42] *** Quits: jimmio92 (~jimmio92@pool-96-227-111-47.phlapa.fios.verizon.net) (Quit: Client closed)
[11:08:12] <ac_slater> night!
[11:08:22] <Juliu> I would never tell anyone to buy an EV
[11:09:17] <Juliu> And Eigen is headers-only, so you would keep your self-contrainment
[11:10:00] <Juliu> Too late, he left :/
[11:10:01] <ac_slater> I deal with a lot of scientists that want to "write their own code instead of use a library". They get like 20% "done" and give up. Having more software engineers maintain shit for them
[11:10:30] <ac_slater> I deal with 3 folks who all think "NASA is full of newbies"
[11:11:03] <Juliu> I always meat the opposite. People who can't code well and use foreign libraries/dependencies for every little functionality
[11:11:06] <Juliu> *meet
[11:16:14] <LordKalma> I don't see anything wrong with wanting no dependencies in this language haha
[11:16:24] *** Joins: nojhan (uid443807@id-443807.lymington.irccloud.com)
[11:16:49] <ac_slater> but with docker and static builds (even shared libraries), it's not hard to make it nice
[11:17:52] <ac_slater> if you're talking about the build of it all
[11:24:47] <LordKalma> shipping cross platform is still challenging
[11:24:53] <LordKalma> even with the cool package managers
[11:25:55] <kalven> docker is the "I give up" solution
[11:26:56] <LordKalma> I'm doing my web project in docker just because it makes sense because you deploy it as a docker thing also
[11:27:11] <LordKalma> and I mean, I see why you'd want to use a docker image to get like clang 13 on RHEL hahah
[11:27:21] *** Joins: lewisje (~lewisje@72.49.207.113)
[11:27:29] <LordKalma> but using docker as shipping mechanism for c++ applications.... that's bs
[11:27:41] <LordKalma> but I don't think that was that ac_slater meant anyway
[11:29:12] *** Joins: HvszrStykp (~X@81.171.62.86)
[11:30:11] <ac_slater> well I kinda did. Firing up a container to run a complex build to spit out some static binaries is OK. Even with binaries that need shared libraries, you have to know avoid rpath and shit and ldso and ldconfig will figure out paths.
[11:31:00] <ac_slater> I've been shipping embedded firmware, Qt applications, large C++ services ("web" and not-web") all using docker in my buildsystem
[11:32:18] <LordKalma> again, docker as build system isn't something i'd force in a repo, but I see how it can be useful
[11:32:25] <ac_slater> not directly in my buildsystem, I mean just the environment. Since I did this, I never had to fight with dependencies again, really. Sometimes you do but at least it's solveable
[11:32:30] <LordKalma> but I wouldn't tell a user to run docker-compose up to use an app haha
[11:32:38] <ac_slater> haha yea, fk that
[11:33:14] *** Joins: jsbach (~jsbach@2a01:c23:613f:6700:91c6:e70b:f7c4:5ea9)
[11:38:31] <ac_slater> the trick is to not force it ever. CFLAGS and LDFLAGS for each library (or use pkg-config/CMake) is the way to go. It is a pain to have to "reverse engineer" other people's build systems sometimes
[11:39:23] <ac_slater> ie - if someone uses autotools and your main system isn't autotools. You just have to run autotools then scrape the outputs. Sometimes its like `CFLAGS += -I<whatever>/src/.src/*.h` ... barf
[11:39:48] <ac_slater> you know what I mean... typoes to be ignored
[11:40:55] <LordKalma> autotools is the worst shit ever
[11:41:10] <LordKalma> I've used a library that hardcoded the extension of the output
[11:41:18] <ac_slater> -_-
[11:41:20] <LordKalma> that meant I had to rename .so to .dll on windows
[11:41:27] <LordKalma> and .so to .dylib on macos haha
[11:41:29] <ac_slater> ooff
[11:41:35] <lh_ideapad> 'I've used a library that hardcoded the extension of the output'
[11:41:46] <ac_slater> I love it's solution to testing for features ... just compile small programs and scrape the output/errors.
[11:41:52] <ac_slater> its *
[11:42:04] *** Quits: JohnMS_WORK (~kvirc@89-64-83-123.dynamic.chello.pl) (Read error: Connection reset by peer)
[11:42:07] <ac_slater> but, that doesn't work well when target!=host
[11:42:09] <lh_ideapad> -> I've used c++ to write a library that hardcoded the extension of the output.   So C++ is the worst s@#t ever.
[11:42:49] <lh_ideapad> yep, explanatory.
[11:42:49] <ac_slater> LordKalma: I think a good autotools project is nice... like gcc
[11:43:05] <ac_slater> but I can't bootstrap one or really debug one
[11:43:09] <LordKalma> ac_slater, hahah I dunno how you'd do x-builds with autotools, I assume its possible
[11:43:18] <fiesh> ac_slater: have you ever tried bisecting gcc?
[11:43:25] <ac_slater> it's made for cross compiling, I just don't get it
[11:43:30] <ac_slater> fiesh: sadly no
[11:43:33] *** Joins: JohnMS_WORK (~kvirc@89-64-83-123.dynamic.chello.pl)
[11:43:35] <fiesh> ac_slater: you have to *cleanly rebuild* each time, because that's how nice autotools is
[11:43:50] * ac_slater saddens
[11:44:22] <ac_slater> my makefiles can't clean artifacts that aren't needed anymore either. I don't know a buildsystem that does
[11:44:37] <lh_ideapad> `git clean -fdx` does that for you.
[11:44:45] <LordKalma> hahahah I love git clean -xdf
[11:45:17] <LordKalma> but I also don't do in-source builds, bah
[11:45:35] <LordKalma> and I now tend to also use sibling build dirs, not child build dirs
[11:46:32] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:25c4:f0c4:39d4:7801) (Ping timeout: 240 seconds)
[11:47:06] <ac_slater> you use cmake?
[11:47:19] <LordKalma> yes
[11:47:27] <TinoDidriksen> autotools also supports out-of-source builds.
[11:47:30] <ac_slater> it does make that part easy
[11:48:08] <oj> Do you guys use LSP's btw?
[11:48:18] <oj> Like clangd, ccls
[11:48:21] <LordKalma> clangd ftw
[11:48:41] <TinoDidriksen> Eh, VS works fine.
[11:48:42] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:25c4:f0c4:39d4:7801)
[11:48:43] <oj> I've noticed clangd only produces quickfixes for some errors, not all
[11:48:50] <ac_slater> not me, too much embedded stuff over hear with weird toolchains
[11:48:51] <ville> ac_slater: what does "aren't needed" mean?
[11:48:57] *** Joins: Haohmaru (~Haohmaru@195.24.53.110)
[11:49:03] <oj> like say I rename a thing in a header
[11:49:24] <LordKalma> yeah, vs's intellisense is decent enough
[11:49:27] <oj> depending on what the surrounding context is, clangd may or may not give me a renaming quickfix
[11:49:39] <TinoDidriksen> Don't just rename it. Refactor it so all the renaming is done for you.
[11:49:43] <oj> it depends on how it feels
[11:49:54] <ac_slater> ville: hmm. I guess my makefiles do work if you change which objects they build during bisect. My build dir will just be littered
[11:50:02] <LordKalma> it depends on what i can pick up with its heuristics
[11:50:13] <oj> right, what I did was do a renaming with clang/tidy using naming convention rules
[11:50:45] <ville> ac_slater: if you've a build directory where everything generated during a build goes, then it should be alright to have "stale" .o files there. those won't be linked in as they aren't hopefully manually listed as dependencies
[11:50:52] <oj> but for some reason it couldn't fix the names in files where the identifier was used but not defined
[11:51:06] <ac_slater> ville: yea exactly. There are some edge cases sometimes, like if you glob
[11:51:11] <oj> so I just ran it on the header and went through the rest of the codebase with my editor and clangd
[11:52:06] <LordKalma> protip: don't glob
[11:52:20] <ville> ac_slater: in make it's probably more fun to list your sources, then create the list of object files from those: object_files := $(subst $(source_dir)/, $(build_dir)/, $(source_files:.cxx=.o)) or so rather than glob
[11:52:22] <ac_slater> ville: oh right, I guess I was thinking in the case where I change top-level flags like CFLAGS or CXXFLAGS or LDFLAGS. I never tried to be make execution aware of makefile changes
[11:52:36] <ac_slater> ville: yea that's what I do.
[11:52:39] <oj> LordKalma: one example was that it proposed a quickfix to a name error in a normal member function, but not in an operator
[11:52:49] <ac_slater> ville: and dep files too via gcc's -MP -MMD
[11:52:53] <oj> doesn't seem like there should be a difference heuristic-wise
[11:52:56] <ville> ac_slater: ok you're covered there then
[11:53:18] <ac_slater> ville: it's when I change makefiles I have to do a clean, but that's expected I guess. Cmake handles that
[11:53:30] <ac_slater> at least for find-package or whatver
[11:53:35] <LordKalma> it does, if you don0't glob hhaha
[11:53:43] <ac_slater> ha, right
[12:06:11] <ville> ac_slater: you can get the flag stuff work as well to cause a rebuild
[12:06:56] <ac_slater> .EXTRA_PREREQS it seems
[12:08:35] *** Joins: aakashi2001 (~aakashi20@user/aakashi2001)
[12:10:45] <ville> right
[12:11:51] *** Quits: aakashi2001 (~aakashi20@user/aakashi2001) (Client Quit)
[12:12:17] *** Quits: slavfox (~slavfox@93.158.232.111) (Ping timeout: 240 seconds)
[12:14:18] *** Joins: slavfox (~slavfox@93.158.232.111)
[12:16:30] *** Joins: robod34 (~Username@79.113.195.239)
[12:37:27] *** Quits: HvszrStykp (~X@81.171.62.86) (Ping timeout: 256 seconds)
[12:41:52] *** Quits: williampiv (~williampi@ip24-254-86-223.sb.sd.cox.net) (Quit: williampiv)
[12:53:15] *** Joins: andreasbuhr (~quassel@p549db3a5.dip0.t-ipconnect.de)
[12:54:47] *** Quits: andreasbuhr (~quassel@p549db3a5.dip0.t-ipconnect.de) (Client Quit)
[12:54:52] *** Quits: AbleBacon (~AbleBacon@user/AbleBacon) (Read error: Connection reset by peer)
[13:00:14] *** Joins: riebers (~riebers@185.107.25.45)
[13:00:51] *** Joins: DSpider (~DSpider@82.79.237.35)
[13:04:36] *** Joins: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz)
[13:05:57] *** Quits: jackblasted (~quassel@45.131.194.21) (Ping timeout: 256 seconds)
[13:06:31] *** Joins: jackblasted (~quassel@45.131.194.40)
[13:08:37] *** Joins: dfkfs (~dfkfs@178.49.152.151)
[13:13:32] *** Joins: plastico (~plastico@neomutt/plastico)
[13:26:44] *** Quits: jehelset (~jeh@2001:4644:4144:0:e2d4:e8ff:fedf:f070) (Ping timeout: 250 seconds)
[13:35:38] *** Joins: rajkosto (~rajkosto@178.220.243.118)
[13:35:59] *** Joins: PJBoy (~PJBoy@user/pjboy)
[13:41:06] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[13:41:14] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[13:41:14] *** ChanServ sets mode: +v npaperbot
[13:49:01] *** Joins: andreasbuhr (~quassel@p549db3a5.dip0.t-ipconnect.de)
[13:49:01] *** Quits: andreasbuhr (~quassel@p549db3a5.dip0.t-ipconnect.de) (Client Quit)
[13:50:30] *** Joins: cart_man (~rynot@host-78-144-125-214.as13285.net)
[14:00:11] *** Quits: riebers (~riebers@185.107.25.45) (Ping timeout: 256 seconds)
[14:01:42] *** Joins: seninha (~seninha@user/seninha)
[14:04:01] *** Quits: cart_man (~rynot@host-78-144-125-214.as13285.net) (Quit: Konversation terminated!)
[14:10:36] <peeps[zen]> is it possible/valid to link an executable built with debug symbols, to a static library built without them?
[14:11:43] <Haohmaru> why not
[14:14:03] <peeps[zen]> i don't know, i understand next to nothing about details of ELF
[14:14:45] *** Joins: cart_man (~rynot@host-78-144-125-214.as13285.net)
[14:15:51] <Haohmaru> debug symbols are mostly for the debugger, if you're making proprietary closed-source stuff, they are the enemy
[14:17:47] <PJBoy> tell that to super mario 64
[14:19:45] <peeps[zen]> well, its not closed source or proprietary
[14:24:15] <jessicara> it is valid, just means have the debugging symbols limited to what is compiled with them
[14:24:47] <jessicara> some distros may or may not provide debug information as seperate packages for their libraries
[14:28:32] <LordKalma> yes, those are the two options
[14:28:39] <ville> PJBoy: not sure if the lack of names would have deterred these maniacs. they ended up producing bit-perfect compiles
[14:30:30] <PJBoy> after lots and lots of tweaking and some inline assembly
[14:31:09] <PJBoy> going for a bit perfect replication is definitely one of the stranger goals I've heard in ROM hacking
[14:31:19] <PJBoy> but seems to be all the rage in the N64 scene
[14:32:37] *** Quits: cursey (~cursey@user/cursey) (Quit: bye)
[14:36:32] *** Quits: proller (~p@80.240.216.69) (Ping timeout: 240 seconds)
[14:41:13] *** Quits: dfkfs (~dfkfs@178.49.152.151) (Quit: Client closed)
[14:45:19] *** Joins: pulse (~pulse@user/pulse)
[14:48:04] *** Joins: cursey (~cursey@user/cursey)
[14:50:26] * PJBoy disables clang-tidy check "readability-make-member-function-const"
[14:50:38] <LordKalma> why?
[14:50:50] <PJBoy> for my -fix config
[14:50:52] <LordKalma> that only annoys me in inheritance scenarios
[14:51:06] <PJBoy> it fails to find all of the definitions of the class
[14:51:13] <PJBoy> so it just causes build failures
[14:51:37] <PJBoy> also "readability" is a bit of a stretch
[14:53:14] <PJBoy> same complaint with "readability-convert-member-functions-to-static"
[14:53:21] <PJBoy> it's not readability, and it breaks my builds
[14:53:23] *** Joins: HvszrStykp (~X@81.171.62.86)
[14:54:46] <LordKalma> how scattered are your definitions?
[14:55:07] <PJBoy> classes often have stub implementations in unit tests
[14:55:24] <Haohmaru> <analog_TV_static_noise.gif>
[14:55:24] <PJBoy> and it's the unit test impls that it doesn't find
[14:55:42] <fiesh> performance-move-const-arg.CheckTriviallyCopyableMove defaulting to 1 is really annoying I think, since it tells you to make your code not-future-proof
[14:56:02] <LordKalma> what's that one?
[14:56:20] <fiesh> it'll warn you if you move a trivially copyable type instead of just copying it
[14:57:03] <PJBoy> that's weird
[14:57:12] <LordKalma> https://clang.llvm.org/extra/clang-tidy/checks/performance-move-const-arg.html
[14:57:19] <LordKalma> I agree with the checks...
[14:57:19] <PJBoy> who the hell cares if you redundantly move-cast
[14:58:45] <ville> fiesh: there is no future-proof code
[14:58:50] <PJBoy> the first and third check I agree with
[14:59:07] <PJBoy> but I don't see any reason to care about types that happen to be trivially copyable
[14:59:10] <fiesh> ville: there's more and less future-proof code however
[14:59:34] <PJBoy> even the third check I'm not too hot on
[15:00:00] <PJBoy> like ok you don't get your move semantics, but you still indicate that your object is being used for its last purpose
[15:00:14] <PJBoy> and there may be an rvalue reference or value overload down the line
[15:01:49] <PJBoy> I'm surprised clang-tidy doesn't have a check for member functions that override that aren't marked override
[15:04:30] *** Joins: dfkfs (~dfkfs@178.49.152.151)
[15:06:43] <PJBoy> :/
[15:06:47] <PJBoy> didn't notice cppcoreguidelines-pro-type-static-cast-downcast
[15:07:15] <PJBoy> unilterally wanted to replace static_cast with dynamic_cast for polymorphic class pointers
[15:10:02] *** Quits: jzsinatra (~jzsinatra@88-114-238-31.elisa-laajakaista.fi) (Quit: leaving)
[15:11:52] <PJBoy> clang-tidy's ignoring my disabling of the hicpp-vararg check...
[15:14:03] <PJBoy> ignoring my disabling of this downcast check too, huh
[15:26:46] *** Quits: JohnMS_WORK (~kvirc@89-64-83-123.dynamic.chello.pl) (Ping timeout: 250 seconds)
[15:28:41] *** Joins: NovumDXW (~NovumDXW@2409:8a28:3610:29b0:74d8:d16b:92b3:8d89)
[15:29:39] <very_sneaky> how do you guys deal with clang-tidy and gtest
[15:29:43] *** Joins: JohnMS_WORK (~kvirc@89-64-83-123.dynamic.chello.pl)
[15:29:44] <very_sneaky> it basically shits the bed for me
[15:30:55] <PJBoy> I've been assigned investigation work into LLVM tools ;)
[15:31:14] <very_sneaky> ah, are you me? lol
[15:31:22] <PJBoy> hahaha
[15:31:34] <PJBoy> it's giving me more happiness than sadness so far
[15:31:42] <very_sneaky> it's given me a truckload of joy
[15:31:53] <very_sneaky> all of the cppcoreguidelines checks are *mwah*
[15:32:19] <PJBoy> they're mostly good checks IMO
[15:32:22] <very_sneaky> i've learnt a lot from being pulled up on some bad practices so far
[15:32:39] <PJBoy> I've only disabled 5 of them >_>
[15:32:47] <very_sneaky> rule of 5 was a heinous infraction by me
[15:33:06] <very_sneaky> yeah, i disabled most of the fuschia ones
[15:33:09] <PJBoy> mostly the "use our gsl" checks
[15:33:19] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:25c4:f0c4:39d4:7801) (Quit: Quit)
[15:33:32] <PJBoy> I've disabled all the specific project ones
[15:33:47] <PJBoy> wish they fell under a `proj` namespace
[15:33:52] <very_sneaky> and I've also `// NOLINT`'d a bunch where i think especially variable naming inconsistencies are more consistent
[15:34:21] <very_sneaky> PJBoy: i actually ended up importing gsl so that i could tag a few raw pointers as owning the memory - i thought that was a good addition
[15:34:39] *** Joins: jehelset (~jeh@2001:4644:4144:0:e2d4:e8ff:fedf:f070)
[15:35:08] <PJBoy> blurgh
[15:35:15] <PJBoy> although yeah sounds like a nice thing to have
[15:35:42] <PJBoy> too hard a sell here
[15:35:47] <very_sneaky> why's that?
[15:36:03] <PJBoy> too much existing code for a start
[15:36:22] <PJBoy> lots of devs who don't care enough about code beauty
[15:36:24] <very_sneaky> yeah, we're probably in the same boat at work - upwards of 30 libraries, probably more than 1m loc
[15:36:37] <PJBoy> the burden of another dependency
[15:37:29] <very_sneaky> i wonder how much of a burden that actually is once everything is integrated
[15:38:49] <PJBoy> probably zero
[15:39:00] <PJBoy> although we have lots and lots of builds and build configurations
[15:39:22] <PJBoy> merely updating libcurl is something we have to assign a JIRA story for
[15:39:25] <very_sneaky> yeah, that's mostly a storage and compute question though
[15:39:41] <very_sneaky> and can all be offloaded to a CI to be done automatically
[15:40:18] <PJBoy> also
[15:40:19] <very_sneaky> PJBoy: is that because you're using a bespoke build system/package management solution atm? an uplift requires code to be written?
[15:40:41] <PJBoy> I can confirm that specifying --checks with clang-tidy disables the reading of .clang-tidy config file
[15:40:43] <very_sneaky> i mean, aside from interface changes, obviously
[15:40:49] <PJBoy> in spite of what the --help says
[15:40:55] <very_sneaky> huh. good to know
[15:41:17] <PJBoy> we're using a lot of bespoke buildy shit yeah
[15:41:37] <PJBoy> and a bespoke idea of common sense
[15:41:59] <very_sneaky> hahaha
[15:42:20] <very_sneaky> we just got a devops contractor on board to help with our migration
[15:42:37] <very_sneaky> he's all about collecting and measuring metrics to sell the difference which i really like
[15:42:50] <very_sneaky> steers away from the "but i think this is _better_" conversations
[15:44:02] <PJBoy> metrics are hard
[15:44:10] <very_sneaky> they are
[15:44:15] <PJBoy> but that's something I'm trying to approach with this -fix stuff
[15:44:29] <PJBoy> even if it's super experimental by nature
[15:44:41] <very_sneaky> doing bulk fixes?
[15:44:49] <PJBoy> if I can say "this crappy tool applied 10,000 fixes and the unit tests still pass"
[15:44:54] <PJBoy> yeah
[15:44:58] <very_sneaky> i hope you don't use gtest
[15:45:05] <PJBoy> bespoke -_-
[15:45:10] <very_sneaky> lmao
[15:45:24] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:25c4:f0c4:39d4:7801)
[15:45:32] <very_sneaky> well, fwiw, clang tidy tries to expand all of the gtest macro's in place
[15:45:56] <very_sneaky> so, they might pass, but it's certainly not an improvement to automatically apply those changes
[15:46:22] <very_sneaky> i've given fix a shortcut in vim, so i just review them in the editor and it's a quick change if it's sane
[15:47:18] <PJBoy> yeah, think that'll be the end result in practice
[15:47:29] <PJBoy> but I still want a relatively safe set of checks for our fix config
[15:47:52] <PJBoy> gonna upgrade from --checks to a separate config file now
[15:48:04] <very_sneaky> yeah that's an interesting idea - have a really conservative set of checks that you're comfortable applying indiscriminantly
[15:51:25] <very_sneaky> PJBoy: do you use clang-tidy to enforce variable naming conventions?
[15:51:58] *** Joins: Roughy (~mdaw45ns@user/roughy)
[15:52:00] <PJBoy> so far, yeah
[15:52:23] <PJBoy> although we have some __STYLE_MACROS_ that really make me cringe
[15:52:32] <PJBoy> that I'll probably have to add exceptions for
[15:53:03] <very_sneaky> the thing that i haven't been able to resolve so far is that i have different case requirements for functions and local variables
[15:53:08] <very_sneaky> but lambdas are both
[15:53:18] <very_sneaky> and so they default to local variable style, which is annoying
[15:54:06] <PJBoy> I always use the same naming style for variables and functions precisely because lambdas exist
[15:54:51] *** Joins: markong (~kvirc@213.146.188.203)
[15:56:26] <very_sneaky> interesting. our style guide dictates a prepended `v`
[15:56:32] <PJBoy> ouch
[15:56:48] <very_sneaky> `auto vLocalVariable = 0.0` and `someFunctionToCall()`
[15:56:50] <PJBoy> ouch ouch ouch
[15:57:11] <very_sneaky> yeah, the more i think about it the less necessary it is
[15:57:26] <PJBoy> do you have something different for constants?
[15:57:29] <very_sneaky> i guess it helps disambiguate from public data members which have no prefix
[15:58:16] <very_sneaky> `const auto THIS_IS_A_CONST;` and `static const auto gTHIS_IS_A_GLOBAL_CONST = 0.0`
[15:58:51] <very_sneaky> heh, actually i might've got that wrong
[15:58:58] <very_sneaky> it might even be an `sg` for prefix
[15:59:06] <very_sneaky> the prefii stack
[15:59:14] <PJBoy> the static there is redundant
[15:59:24] <PJBoy> also :(
[15:59:43] <very_sneaky> i included it just because that's normally where it's a global
[16:00:26] <PJBoy> as a static member of a class?
[16:00:54] <very_sneaky> so we have `g` for global, `v` for local var, `m` for private/protected member, `s` for static, `p` for pointer, `e` for enum
[16:01:08] <PJBoy> but static means so many things ;_;
[16:01:25] <very_sneaky> yeah, though i guess in that case it should only really be s - clang-tidy likes to put a g there though
[16:02:02] <PJBoy> any global const is static unless otherwise specified
[16:02:15] <very_sneaky> CamelCase for class/struct/enum/namespace names, camelBack for everything else if you include the prefix
[16:02:25] <PJBoy> would you include s for vars that are implicitly static?
[16:02:42] <very_sneaky> honestly i have no idea - i don't use static very often lol
[16:02:59] <PJBoy> fun stuff
[16:03:10] <PJBoy> naming conventions are hard
[16:03:13] <very_sneaky> yeah, which i guess is opposite to the intention of a style guide
[16:03:54] <very_sneaky> it's annoying too - i've created a chrono compatible clock, so i use snake_case for all of the naming to be consistent with that api
[16:04:08] <very_sneaky> but it's inconsistent with the rest of the code base
[16:06:04] <PJBoy> my stance is to always deviate from stdlib as early as possible
[16:06:28] <PJBoy> as if to say the stdlib naming is crap and should be relegated to the darkest regions of the codebase
[16:08:18] <very_sneaky> do you mean avoid using stdlib at all?
[16:08:34] <PJBoy> nah, just their naming conventions
[16:08:50] <PJBoy> I don't strive for any semblance of consistency with them
[16:08:55] *** Quits: mitch0 (~mitch@84-236-20-10.pool.digikabel.hu) (Quit: leaving)
[16:09:00] <very_sneaky> you're a bigger man than i am
[16:09:14] <very_sneaky> the consistency violations really bother me
[16:09:21] *** Joins: mitch0 (~mitch@84-236-20-10.pool.digikabel.hu)
[16:09:26] <very_sneaky> this is why i wish there was a pep8 equivalent in c++
[16:09:43] <very_sneaky> just some benevolent overlord to say - thou shalt use this style because i decree it
[16:09:52] <PJBoy> I feel like stdlib is intentionally designed to be bland and unlike everyone else's style
[16:09:55] <baltazar> hi! is there some nice way of using a function in the place of an output iterator? like back_inserter, but instead of inserting it into a container it would just call my function
[16:11:19] <very_sneaky> does it? boost seems pretty similar from my cursory understanding
[16:12:48] <PJBoy> I might not be right, but it sure seems that way
[16:13:00] <PJBoy> not many styles could write every identifier with snake_case
[16:14:34] <very_sneaky> yeah i guess that's true
[16:14:51] <very_sneaky> it's pretty one dimensional
[16:15:05] <very_sneaky> i feel like the linux kernel has everything in snake case too
[16:15:17] <ville> naming conventions are easy. snake_case
[16:15:21] <PJBoy> { auto f = [](int x) { cout << x << ' '; }; array data{1, 2, 3}; copy(begin(data), end(data), boost::make_function_output_iterator(f)); } #include <boost/function_output_iterator.hpp>
[16:15:22] <geordi> 1 2 3
[16:15:28] <PJBoy> baltazar, boost has that ^
[16:15:32] <LordKalma> naming conventions ate bike shedding. just name things right
[16:16:02] <PJBoy> which for some reason doesn't work with the ranges library
[16:16:15] <PJBoy> { auto f = [](int x) { cout << x << ' '; }; array data{1, 2, 3}; ranges::copy(data, boost::make_function_output_iterator(f)); } #include <boost/function_output_iterator.hpp>
[16:16:15] <geordi> error: no match for call to '(const ranges::__copy_fn) (array<int, 3>&, boost::iterators::function_output_iterator<main(int, char**)::<lambda(int)> >)'
[16:17:05] <LordKalma> probably not yet up to date
[16:17:17] <very_sneaky> i was surprised to learn that clang-tidy recommends the use of ranges where it can
[16:17:18] <LordKalma> sometimes I feel like boost is a bit laggy
[16:17:47] <very_sneaky> i changed a for each loop to match it, only to learn that apple-clang has literally 0 ranges support. rip
[16:17:50] <baltazar> PJBoy: meh
[16:18:08] <LordKalma> apple-clang is shit
[16:18:17] <very_sneaky> yep.
[16:18:30] <very_sneaky> it shits me that the apple-clang versions are tied to the operating system version
[16:18:37] <very_sneaky> because of course you can only get it through xcode
[16:19:00] <very_sneaky> having said that, it does have reasonably sane support for multiple co-installed xcode environments
[16:19:10] <very_sneaky> it's easy to switch versions
[16:19:13] <PJBoy> according to my test, that boost iterator doesn't satisfy std::weakly_incrementable
[16:22:05] <PJBoy> ah it's because its difference_type is void
[16:23:04] <PJBoy> a requirement added by C++20
[16:23:15] <PJBoy> that difference_type should be non-void
[16:23:48] <PJBoy> they even changed old stdlib iterators like back_insert_iterator to have a non-void difference_type for this
[16:24:14] *** Quits: dfkfs (~dfkfs@178.49.152.151) (Quit: Client closed)
[16:24:46] *** Joins: eng-guy (~eng-guy@dhcp-math-8.mobile.helsinki.fi)
[16:25:12] *** Quits: eng-guy (~eng-guy@dhcp-math-8.mobile.helsinki.fi) (Client Quit)
[16:30:38] *** Joins: lionkor (~lionkor@beammp/staff/lionkor)
[16:30:56] *** Quits: rajkosto (~rajkosto@178.220.243.118) (Quit: Leaving)
[16:31:57] *** Joins: JohnMS_AWAY (~kvirc@89-64-83-123.dynamic.chello.pl)
[16:32:43] *** sonic1 is now known as sonic
[16:33:45] *** Quits: rnsanchez (~rnsanchez@2804:14d:8a81:94a4:8ccf:d40:d4e6:2ebe) (Read error: Connection reset by peer)
[16:35:27] *** Quits: JohnMS_WORK (~kvirc@89-64-83-123.dynamic.chello.pl) (Ping timeout: 256 seconds)
[16:35:38] *** Joins: sigma_ (~sigma@164.215.224.240)
[16:36:20] <sigma_> hi, i have warn
[16:36:21] <sigma_> [{
[16:36:23] <sigma_> 	"resource": "/home/sigma/Documents/project/vscode/checkers/display_UI.cpp",
[16:36:24] <sigma_> 	"owner": "clang-tidy",
[16:36:26] <sigma_> 	"code": {
[16:36:27] <sigma_> 		"value": "clang-analyzer-core.UndefinedBinaryOperatorResult",
[16:36:29] <sigma_> 		"target": {
[16:36:30] <sigma_> 			"$mid": 1,
[16:36:32] <sigma_> 			"external": "https://releases.llvm.org/13.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/clang-analyzer-core.UndefinedBinaryOperatorResult.html",
[16:36:33] <sigma_> 			"path": "/13.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/clang-analyzer-core.UndefinedBinaryOperatorResult.html",
[16:36:35] <sigma_> 			"scheme": "https",
[16:36:36] <sigma_> 			"authority": "releases.llvm.org"
[16:36:38] <sigma_> 		}
[16:36:39] <sigma_> 	},
[16:36:41] <sigma_> 	"severity": 4,
[16:36:42] <sigma_> 	"message": "The left operand of '-' is a garbage value",
[16:36:44] <sigma_> 	"source": "C/C++",
[16:36:45] <sigma_> 	"startLineNumber": 167,
[16:36:46] <barometz> sigma_: please use wandbox.org for pasting more than a single line
[16:36:47] <sigma_> 	"startColumn": 52,
[16:36:48] <sigma_> 	"endLineNumber": 167,
[16:36:50] <sigma_> 	"endColumn": 52,
[16:36:51] <sigma_> 	"relatedInformation": [
[16:36:53] <sigma_> 		{
[16:36:54] <sigma_> 			"startLineNumber": 159,
[16:36:55] <barometz> bit late now but for future reference
[16:36:56] <sigma_> 			"startColumn": 10,
[16:36:57] <sigma_> 			"endLineNumber": 159,
[16:36:59] <sigma_> 			"endColumn": 10,
[16:37:01] <sigma_> 			"message": "Assuming the condition is true",
[16:37:02] <sigma_> 			"resource": "/home/sigma/Documents/project/vscode/checkers/display_UI.cpp"
[16:37:03] <sigma_> 		},
[16:37:05] <sigma_> 		{
[16:37:06] <sigma_> 			"startLineNumber": 159,
[16:37:08] <sigma_> 			"startColumn": 10,
[16:37:09] <sigma_> 			"endLineNumber": 159,
[16:37:11] <sigma_> 			"endColumn": 10,
[16:37:12] <barometz> feel like maybe this wasn't what they meant to paste either but who can say
[16:37:12] <sigma_> 			"message": "Left side of '&&' is true",
[16:37:14] <sigma_> 			"resource": "/home/sigma/Documents/project/vscode/checkers/display_UI.cpp"
[16:37:15] <sigma_> 		},
[16:37:17] <sigma_> 		{
[16:37:18] <sigma_> 			"startLineNumber": 159,
[16:37:20] <sigma_> 			"startColumn": 35,
[16:37:21] <sigma_> 			"endLineNumber": 159,
[16:37:23] <sigma_> 			"endColumn": 35,
[16:37:24] <sigma_> 			"message": "Assuming the condition is true",
[16:37:26] <sigma_> 			"resource": "/home/sigma/Documents/project/vscode/checkers/display_UI.cpp"
[16:37:27] <sigma_> 		},
[16:37:29] <sigma_> 		{
[16:37:30] <sigma_> 			"startLineNumber": 159,
[16:37:32] <sigma_> 			"startColumn": 5,
[16:37:33] <sigma_> 			"endLineNumber": 159,
[16:37:35] <sigma_> 			"endColumn": 5,
[16:37:36] <sigma_> 			"message": "Taking true branch",
[16:37:38] <sigma_> 			"resource": "/home/sigma/Documents/project/vscode/checkers/display_UI.cpp"
[16:37:39] <sigma_> 		},
[16:37:41] <sigma_> 		{
[16:37:42] <sigma_> 			"startLineNumber": 167,
[16:37:44] <sigma_> 			"startColumn": 52,
[16:37:45] <sigma_> 			"endLineNumber": 167,
[16:37:47] <sigma_> 			"endColumn": 52,
[16:37:48] <sigma_> 			"message": "The left operand of '-' is a garbage value",
[16:37:50] <sigma_> 			"resource": "/home/sigma/Documents/project/vscode/checkers/display_UI.cpp"
[16:37:51] <barometz> client-side rate limiting should be banned imo
[16:37:51] <sigma_> 		}
[16:37:53] <sigma_> 	]
[16:37:54] <sigma_> }]
[16:37:56] <sigma_> im sorry ,
[16:39:02] <barometz> it happens :) what's the warning you actually meant to share?
[16:40:08] <sigma_> i have warn in message": "The left operand of '-' is a garbage value", when i write array[ (x-1) ] and - is warn
[16:40:36] <sigma_> this is risky?
[16:40:41] <sigma_> what is say
[16:43:26] <LordKalma> holy shit
[16:43:30] <Shell> jfc
[16:43:45] <LordKalma> it happens hahah
[16:43:49] <LordKalma> I've been guilty of this myself
[16:44:33] <sigma_> and say sorry about that , in vscode just one line warn but i think it is more than i see
[16:45:01] *** Joins: JohnMS_WORK (~kvirc@89-64-83-123.dynamic.chello.pl)
[16:48:22] <sigma_> this warns from clang tidy
[16:48:39] *** Quits: JohnMS_AWAY (~kvirc@89-64-83-123.dynamic.chello.pl) (Ping timeout: 256 seconds)
[16:51:22] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Remote host closed the connection)
[16:54:11] *** Joins: proller (~p@2a00:1fa0:42aa:8316:680b:6634:a494:a395)
[16:56:20] <PJBoy> is it a garbage value?
[16:56:36] <PJBoy> if so then that's your problem
[16:58:30] <Haohmaru> dafuq
[16:58:32] *** Quits: proller (~p@2a00:1fa0:42aa:8316:680b:6634:a494:a395) (Ping timeout: 240 seconds)
[16:59:55] <LordKalma> garbage value was what my ex said :(
[17:00:53] *** Joins: rnsanchez (~rnsanchez@2804:14d:8a81:94a4:8ccf:d40:d4e6:2ebe)
[17:02:06] <sigma_> garbage value, it is just  " - " and i think it is not a value, thats a operator and if x-1 is garbage so sentence (x-1) is garbage !?
[17:02:41] <sigma_> not operator "-"
[17:03:07] <PJBoy> left operand of -
[17:03:11] <PJBoy> in this case `x`
[17:05:44] <sigma_> OK
[17:08:22] *** Joins: geranim0 (~geranim0@modemcable242.171-178-173.mc.videotron.ca)
[17:09:59] <PJBoy> god damn it
[17:10:07] <PJBoy> god damn these carriage return errors
[17:10:50] <PJBoy> they're record breaking levels of error message encryption
[17:11:25] <PJBoy> want a secure password? run your favourite colour through a unix tool with a CR
[17:11:31] <PJBoy> and use the error message
[17:12:15] *** Quits: Kerr (~Kerr@2601:602:ce01:1f0:aaf6:d7cf:bef:465d) (Quit: Client closed)
[17:15:08] <Juliu> Cryptography is a scam
[17:16:05] <Haohmaru> no, u
[17:16:24] <Juliu> I do exist. Cryptograph probably does not
[17:16:50] <PJBoy> sure it does
[17:16:54] <PJBoy> just run a photograph through aes
[17:17:17] <Juliu> PJBoy, there is no reason to assume that cryptography exists and also no proof for this claim
[17:17:47] * Haohmaru encrypts Juliu's filesystem
[17:18:10] <Juliu> Haohmaru, I run Windows. Good luck
[17:18:56] <Haohmaru> just the individual files then
[17:19:20] <Juliu> I bet it's still not very secure
[17:19:28] <Haohmaru> oh, wait, you mean, "you can't do any more damage to me"
[17:19:49] <Juliu> Haohmaru, I mean you wouldn't even touch my system out of disgust
[17:20:09] <Haohmaru> it's not like i'd do it with my bare hands
[17:20:21] <Juliu> PJBoy, in case you find anything to back up your claim, let me know
[17:20:36] *** Joins: proller (~p@2a02:6b8:0:40c:d672:80ce:1436:e46b)
[17:21:05] <PJBoy> what claim?
[17:21:15] <PJBoy> do you disagree that photos exist, or AES?
[17:21:23] <Juliu> PJBoy, that cryptography exists
[17:21:27] <Haohmaru> 31b3474b1094d24d1a4da818e65a2dea
[17:21:36] <Haohmaru> ^
[17:21:43] <PJBoy> well cryptographs exist, that was my claim
[17:21:53] <PJBoy> and cryptography would be the study of cryptographs
[17:21:56] <PJBoy> so there
[17:22:05] <Haohmaru> only those who believe would understand
[17:22:13] <Juliu> PJBoy, like I said, if you find a proof for the claim that cryptography exists, then let me know
[17:22:43] <Juliu> Crpytographs do not claim that cryptography exists. They know better
[17:23:02] <PJBoy> I'm letting you know
[17:23:14] <PJBoy> unless you think no one studies cryptographs
[17:23:28] <Juliu> PJBoy, that does not mean that cryptography exists
[17:23:59] <PJBoy> well you haven't disputed my claim that cryptographs exist
[17:24:08] <PJBoy> and clearly anything that exists can be studied
[17:24:15] <PJBoy> so QED
[17:24:23] <Haohmaru> echo i exist > ~/cryptography
[17:24:25] <Juliu> PJBoy, your logic is incorrect
[17:24:40] <Juliu> Just because people study something, does not mean it exists
[17:25:16] <PJBoy> of people study something, then that process studying of studying exists
[17:25:28] <PJBoy> and hence the noun form of that study exists
[17:25:44] <Juliu> PJBoy, you are incorrect
[17:25:48] <PJBoy> no u
[17:26:01] <Haohmaru> PJBoy +1
[17:26:02] <Juliu> People have also studied the ether, but the ether does not exist
[17:26:17] <PJBoy> I never claimed that ether exists
[17:26:21] <PJBoy> but the study does exist
[17:26:21] <Haohmaru> no idea what ether is, but it'd be called etherlogy
[17:26:32] <PJBoy> and cryptographs exist
[17:26:42] <Juliu> PJBoy, the question if one way functions exist or not is unsolved. So how you can claim cryptography exists? There is no proof for that claim
[17:26:46] <PJBoy> so cryptography doubly exists
[17:27:03] <Juliu> I do not think that cryptography exists
[17:27:05] <PJBoy> the fact that there's a question about one way functions implies that cryptography exists
[17:27:17] <Juliu> PJBoy, you're nuts
[17:27:19] <PJBoy> as we've discussing a study of cryptographs
[17:27:24] <PJBoy> which is the definition of cryptography
[17:27:38] <Juliu> Cryptographs are idiots that think what they do has a meaning
[17:27:46] <Haohmaru> can two unexistant things be equal?
[17:28:00] <Juliu> Haohmaru, good question
[17:28:11] <PJBoy> << (NAN == NAN)
[17:28:11] <geordi> false
[17:28:13] <PJBoy> nope
[17:28:32] <Juliu> Does NAN exist? I'd say yes
[17:28:59] <Haohmaru> Juliu i think you got up inverted from the bed this morning
[17:29:39] <Juliu> Haohmaru, unlikely
[17:31:55] <Juliu> It's interesting, you don't find anything about the existence of cryptography on the interent. Apparently people just assume it exists, without having a proof or reason to think so. Nuts
[17:32:38] <fiesh> lol
[17:32:49] <fiesh> how about santa?
[17:33:15] *** Quits: sigma_ (~sigma@164.215.224.240) (Ping timeout: 256 seconds)
[17:33:19] <Juliu> Santa might exist
[17:33:47] <Haohmaru> do YOU exist Juliu?
[17:33:50] <lionkor> I'd say it exists because we can describe it, and we can describe it because it exists <=>
[17:33:55] <Juliu> Haohmaru, who knows
[17:34:05] <Haohmaru> then why worry about cryptography
[17:34:14] <Juliu> lionkor, how do you describe cryptography?
[17:34:45] <Haohmaru> it brings cryptic graphs to the naughty bois
[17:35:05] <Juliu> Haohmaru, does this eventually end in the only real philosophical question about committing suicide or not? I have such a feeling
[17:35:33] <Haohmaru> that's up to you
[17:35:58] <lionkor> <unjerk>anything where you try to obfuscate information in a way that is reversible, to me, is cryptography</unjerk> that thing when i say #include <crypto.h>
[17:36:40] <Juliu> lionkor, everything where the reversing is much harder than the encryption is cryptography to me. And we do not know if such a thing exists
[17:37:20] <lionkor> well, i can make up a simple language in a few minutes, it may take you a few tens of minutes to find out enough to revert it! that
[17:37:29] <lionkor> .. would qualify, no?
[17:37:52] <Juliu> lionkor, I meant regarding the runtimes of algorithms of course
[17:38:45] <lionkor> i guess the issue with that is that you often can't be sure that there isn't some algorithm that can do the thing faster or not
[17:39:21] <Juliu> So it might turn out that all the fancy cryptographers and crypto algorithms and everything is all just complete bullshit
[17:40:15] <lionkor> that's fair, considering there's, as a crude example, a chance that i can sit down and find a SHA-256 collision
[17:41:07] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[17:41:13] <Juliu> With our current methods you can't find such a collision efficiently
[17:41:14] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[17:41:14] *** ChanServ sets mode: +v npaperbot
[17:43:43] <Haohmaru> every time you say that cryptography doesn't exist, someone somewhere cracks one of your passwords
[17:43:48] <lionkor> Of course not, but there's a chance I could - even if its near 0. Should be scary enough
[17:44:12] *** Joins: thad_the_man (~tlophd_be@2600:1700:3051:4370:21d:9ff:fe33:51f4)
[17:44:13] <Juliu> Haohmaru, that is becauese all my passwords are the same and they start with 123
[17:44:42] <Juliu> lionkor, of course you can, in all cases. The question is just how long it would take you
[17:44:44] <lionkor> mine is "hariestbeaver12", but IRC censors it so all good
[17:45:11] <Haohmaru> mine is "hunter2"
[17:45:22] <Juliu> lionkor, yes, don't worry. Even if not, we would never tell anyone your password is hariestbeaver12
[17:45:48] <lionkor> I love cryptography!
[17:45:57] <Juliu> Cryptography is a scam
[17:46:03] <Haohmaru> no, u
[17:46:07] *** Joins: great_taste (~great_tas@user/great-taste/x-5798414)
[17:46:08] <Juliu> No your mother
[17:46:23] <fiesh> lol
[17:46:34] <lionkor> 12 year old me encrypting his communications with base64 would like to disagree! as long as you believe in it and can sleep well with it, its probably good enough for what you're doing
[17:46:49] <fiesh> you can always make a fortune by proving it to be a scam instead of just being seen as a fool on irc, you know
[17:47:06] *** Joins: blackout69 (~blackout6@net-109-117-245-237.cust.vodafonedsl.it)
[17:47:09] <Haohmaru> true
[17:47:15] <Haohmaru> write a book about it, Juliu
[17:47:19] <Juliu> fiesh, working on it
[17:48:15] <Haohmaru> genre: sci-fi, misc
[17:48:44] <Juliu> Haohmaru, there is also a movie about it. It's called Travelling Salesman
[17:48:44] <fiesh> well I suppose you've already done that, or else your statement was just an assumption not in line with many a smart person, and everyone knows assume makes an ass out of you and me
[17:49:10] <Juliu> fiesh, smart people ar mostly idiots
[17:49:14] *** Joins: jkaye (~jkaye@2601:281:8300:7530:c6d6:7de6:6176:c300)
[17:49:15] <fiesh> how exactly is the TSP related to cryptography being a scam?  or is that knowledge reserved for the secretive elite lizard people?
[17:49:40] <PJBoy> there are some crypto algorithms that require TSP to be hard
[17:49:47] <Juliu> fiesh, really?
[17:50:20] <Juliu> PJBoy, some? Name one that doesn't require it
[17:50:21] <fiesh> PJBoy: most don't though, at least those in standard use
[17:50:27] <fiesh> Juliu: RSA
[17:50:46] <Juliu> fiesh, RSA is not an encryption mechanism
[17:50:48] <PJBoy> yeah barely any require it
[17:50:57] <fiesh> it's not even known if it's NP complete, so TSP might very well be hard and RSA still broken
[17:51:18] <Juliu> fiesh, also you are incorrect. If travelling salesman wasn't hard, it would also be easy to crack RSA
[17:51:37] <Juliu> fiesh, what is not known to be NP-complete?
[17:52:13] <PJBoy> how would you use a TSP solver to break RSA?
[17:52:15] <fiesh> Juliu: integer factorization
[17:52:41] <Juliu> PJBoy, if you can solve TSP efficiently, you can also solve prime factorization efficiently
[17:52:48] <PJBoy> how?
[17:53:21] <Juliu> PJBoy, what do you mean how? Integer factorization might not even be NP-complete. It's definitely NOT harder than TSP
[17:53:36] <PJBoy> how as in how would you do it?
[17:53:41] <fiesh> actually, that makes sense, integer factorization lies in NP
[17:53:49] <fiesh> it's just not NP complete
[17:54:04] <PJBoy> the fact that integer factorisation isn't known to be NP complete means we don't know how to solve it using other NP-hard solvers
[17:54:07] <fiesh> so solving any NP-complete problem in polynomial time would allow integer factorization in polynomail time
[17:54:10] <Juliu> PJBoy, you reduce integer factorization to a TSP problem and then solve this TSP problem with your efficient solver
[17:54:20] <PJBoy> how do you reduce integer factorisation to a TSP problem?
[17:54:51] <Juliu> fiesh, no one knows if integer factorization is NP-complete or not. Don't claim wrong things
[17:55:04] <fiesh> Juliu: lol try reading again
[17:55:20] <Juliu> PJBoy, there are publications about how that works. It's not that hard
[17:55:28] <PJBoy> cite one
[17:55:51] <Juliu> fiesh, "actually, that makes sense, integer factorization lies in NP"  "it's just not NP complete"     Wrong!
[17:55:57] <fiesh> PJBoy: integer factorization lies in NP, so indeed solving any np-complete problem solves it in polynomial time
[17:55:58] <Juliu> Or maybe wrong. No one knows
[17:56:05] <PJBoy> fiesh, how so?
[17:56:14] <fiesh> PJBoy: that's the definition of np-complete
[17:56:27] <rpav> i'm pretty sure we don't know that prime factorization is not in P
[17:56:28] <PJBoy> but integer factorisation may not be NP complete
[17:56:32] <Juliu> fiesh, again wrong
[17:56:37] <fiesh> PJBoy: it doesn't have to be
[17:56:52] <fiesh> PJBoy: the solution to any np-complete problem solves any problem in np in polynomial time
[17:57:03] <fiesh> PJBoy: not just other np-complete ones
[17:57:08] <PJBoy> only if there exists a reduction from the np problem to an np complete one
[17:57:21] <fiesh> Juliu: yeah I meant to write "it's just not known to be np-complete", congrats
[17:57:25] <PJBoy> which there may not be
[17:57:45] <fiesh> PJBoy: that's the definition of np-complete, that any np problem can be reduced to it
[17:57:52] <rpav> _np-complete_ .. you can basically rewrite any np-complete problem as any other
[17:57:57] <fiesh> PJBoy: thus solving 3sat solves all problems in np
[17:58:05] <Juliu> fiesh, wrong again. Solvers for NP-complete problems exist. They are very easy to implement
[17:58:06] <rpav> err np
[17:58:08] <rpav> but yeah
[17:58:21] *** Quits: pulse (~pulse@user/pulse) (Ping timeout: 256 seconds)
[17:58:34] <Juliu> fiesh, sorry for my smartassing :D
[17:58:37] <PJBoy> ah my mistake
[17:58:38] <rpav> that doesn't mean some problems we know are in NP are not also in P as i understand it
[17:58:44] <PJBoy> I thought it was the other way around
[17:59:02] *** Joins: pulse (~pulse@user/pulse)
[17:59:06] <PJBoy> but we still wouldn't know how to reduce integer factorisation to TSP
[17:59:15] <fiesh> the fact that there is one np-complete problem (3sat) is what's the interesting insight
[17:59:17] <PJBoy> we just know that it would be possible to do so
[17:59:21] <Juliu> PJBoy, we know that. There are papers about it
[17:59:39] <PJBoy> no there aren't
[17:59:51] <urdh> P is a subset of NP so obviously there are some problems in NP that are also in P
[17:59:55] <Juliu> fiesh, there are many NP-complete problems
[18:00:04] <urdh> whether there are problems in NP that are not also in P is an open question
[18:00:15] <urdh> famously, the P = NP problem
[18:00:17] <Juliu> urdh, correct
[18:01:17] <Juliu> Interestingly, P = NP would not necessarily imply that one-way functions do not exist. So even then cryptography might still exist
[18:01:33] <rpav> anyway .. can you not `using B::B;` from a multiply-inherited class to get parent ctors
[18:02:15] <Juliu> rpav, why don't you just try it?
[18:02:22] <very_sneaky> Juliu: so, your claim is that because many cryptography functions are computable, it doesn't exist?
[18:02:45] <Juliu> very_sneaky, no, my claim is more because I believe that P = NP
[18:02:49] <very_sneaky> most people would accept that if those functions are merely intractable they are functionally sufficient for x amount of time, dependeing on the degree of intractability
[18:03:06] <rpav> also do you get a "worse" vtable if you have `struct S : B, V` for some class `V` with virtuals, than `struct S : V`
[18:03:11] <lionkor> P=NP? P cancels out, leaving you with N=1. !next.
[18:03:12] <PJBoy> there's quantum crypto even if P = NP
[18:03:13] <very_sneaky> Juliu: isn't that the same as what i said? or are you saying intractable is fine, just nothing is intractable enough?
[18:03:20] <Juliu> lionkor, lol
[18:03:35] <rpav> it's monday and i am apparently asleep if i have to think about these things
[18:03:45] *** Quits: syrius (syrius@titan.stormtek.net) (Remote host closed the connection)
[18:03:51] <Juliu> lionkor, actually you did a small mistake here. P could be 0 and in that case there would be infinitely many solutions for N  :P
[18:04:11] * Juliu smartasses
[18:04:14] <Haohmaru> !fact
[18:04:15] <nolyc> Haohmaru: An empty-declaration has no effect.
[18:04:24] <Haohmaru> enough said ^
[18:04:25] <very_sneaky> 0/0 is undefined, not infinity
[18:04:44] <Haohmaru> << 0.0/0.0;
[18:04:45] <geordi> -nan
[18:04:59] <Juliu> PJBoy, quantum mechanics is a scam
[18:04:59] <lionkor> lol Math has UB
[18:05:17] <PJBoy> that's unfortunate
[18:05:18] <urdh> this is just hot take central today
[18:05:30] <urdh> "I believe P=NP"
[18:05:37] <urdh> "quantum mechanics is a scan"
[18:05:40] <PJBoy> I mean
[18:05:44] <very_sneaky> if you said as P tends to infinity, we would have a different question - but i think by the notation you would have to assume that they're infinities of the same scale, and would still resolve to 1
[18:05:47] <PJBoy> believing P = NP isn't that hot a take
[18:05:50] <Haohmaru> Juliu is a scam
[18:05:57] <Juliu> urdh, a scan? Lol. I know it, we're living in a simulation
[18:06:09] <Juliu> *knew
[18:06:24] <Juliu> Haohmaru, I'm a scientist
[18:06:32] <urdh> either that or my fingers are still trying to figure out this keyboard after the holidays
[18:06:34] <Haohmaru> [citation_needed]
[18:06:54] <Juliu> very_sneaky, sorry, what?
[18:07:19] <very_sneaky> P=NP for P->inf, P/P -> 1
[18:07:27] <very_sneaky> therefore N=1
[18:07:51] <Juliu> very_sneaky, yes, but for P=0 N=whateverthefuckyouwant
[18:09:16] <very_sneaky> it's undefined, N doesn't have a solution
[18:09:32] <Juliu> If P=1 and N it at most expontially times more, that would mean that N <= 2^P = 2^1 = 2
[18:09:48] <Juliu> very_sneaky, you're wrong. In that case N has infinitely many solutions
[18:10:24] <Juliu> 0*5 = 0,   0*Pi = 0,   0*(-17) = 0
[18:10:28] <very_sneaky> no, because that's P/P = N, for P=0 you get N=0/0 which is undefined
[18:10:33] <very_sneaky> there's no solutions, lol
[18:10:35] <Juliu> very_sneaky, you're just wrong
[18:10:42] <urdh> nah Juliu is correct, there are infinite solutions
[18:10:48] <Juliu> "The solution is a lie."
[18:10:53] <urdh> this is pretty basic calculus
[18:11:05] <Haohmaru> UNLESS
[18:11:07] <Juliu> urdh, actually it is, yes
[18:11:08] <Haohmaru> calculus is a scam?
[18:11:14] <urdh> lol
[18:11:15] <Juliu> Calculus is a scam!
[18:11:21] <Haohmaru> shaddap now
[18:11:34] <urdh> scams are a scam
[18:11:45] <Haohmaru> is there anything besides scams?
[18:11:49] <Juliu> No matter how many circles I calculate, I never got pie. A damn scam
[18:12:16] * Juliu nods to urdh 
[18:12:34] * lionkor nods in agreement
[18:12:56] * Haohmaru farts in principle
[18:12:58] <very_sneaky> the only way you can solve P=NP for N is by taking the limit of P, and the answer is 1
[18:13:20] <Juliu> very_sneaky, you're nuts
[18:13:27] <very_sneaky> which is "pretty basic calculus"
[18:13:37] <Juliu> Limits are not calculus
[18:13:53] <lionkor> calculus is pretty basic limits
[18:13:54] <Haohmaru> he said it in quotes
[18:14:11] <lionkor> now *that* is philosophy.
[18:14:12] <Juliu> Haohmaru, you're right
[18:14:18] <Haohmaru> i'm always right
[18:14:37] <Juliu> Haohmaru, you're wrong
[18:14:44] <Haohmaru> no, u
[18:14:51] <Juliu> No, your mother
[18:16:07] <PJBoy> limits are pretty simple applications of convergence of sequences with algebra
[18:16:08] <Juliu> Does C++ have a crypto library?
[18:16:54] *** Quits: leduyquang753 (~leduyquan@user/leduyquang753) (Quit: Gotta go, see you guys later.)
[18:16:59] <Haohmaru> did you just ask a slightly on-topic question?
[18:17:10] <Juliu> Fuck, I'm sorry
[18:17:24] <Juliu> I promise, I won't do it again
[18:17:33] <lionkor> >:(
[18:18:27] <Juliu> lionkor, it has to be >:():<
[18:19:12] <lionkor> whoa that is cursed
[18:19:16] <very_sneaky> usage of limits in calculus is, very definitely calculus
[18:19:33] <Juliu> lionkor, but otherwise there would be closing parenthesis missing
[18:19:55] <Juliu> very_sneaky, it's analysis
[18:20:23] <very_sneaky> Juliu: prove it
[18:20:47] <lionkor> </>:():</>
[18:21:13] <Juliu> https://en.wikipedia.org/wiki/Limit_(mathematics)
[18:21:31] <Juliu> "Limits are essential to calculus and mathematical analysis, [...]"
[18:21:38] <very_sneaky> This article is about the general notion of limit in calculus.
[18:22:25] *** Joins: skapata (~Skapata@2804:14c:87b0:a6f9:9048:56ad:c252:2add)
[18:22:25] *** Quits: skapata (~Skapata@2804:14c:87b0:a6f9:9048:56ad:c252:2add) (Changing host)
[18:22:25] *** Joins: skapata (~Skapata@user/skapata)
[18:22:51] <Juliu> lionkor, what's that?
[18:22:53] <very_sneaky> "Calculus, originally called infinitesimal calculus or "the calculus of infinitesimals" ... "and they make use of the fundamental notions of convergence of infinite sequences and infinite series to a well-defined limit." https://en.wikipedia.org/wiki/Calculus
[18:23:06] <very_sneaky> regardless, usage of limits in calculus is well defined
[18:23:09] <lionkor> Juliu: just closing the < >
[18:25:50] <Juliu> very_sneaky, seems you were right
[18:26:10] <Juliu> but not about the solutions for N
[18:27:13] *** Joins: Garbanzo_ (~Garbanzo@2602:304:6eac:dc10::46)
[18:28:11] <Juliu> Isn't it insane that we trust or money and safety to cryptography that might not even work?
[18:30:05] <Haohmaru> quick, swap your monies for gold bars
[18:30:51] <urdh> not really
[18:30:57] <jkaye> Society is built on trust that might not work
[18:30:58] <urdh> you also trust banks with your money
[18:31:07] <jkaye> It's more or less the foundation of everything
[18:31:08] <Juliu> Might not be the dumbest idea in the coming recession
[18:31:24] <urdh> (and therefore implicitly you trust 40-year-old Cobol systems with your money)
[18:31:32] <PJBoy> what else are you gonna trust your money with
[18:31:39] <Juliu> urdh, yes, and we know that banks don't work, right? :)
[18:31:58] <Haohmaru> are banks a scam?
[18:32:07] <Juliu> There are trustless cryptocurrencies
[18:32:16] <Juliu> Haohmaru, dude, banks are THE scam
[18:32:20] <urdh> lol here we go
[18:32:23] <Haohmaru> tell us, you're the scamologist here, Juliu
[18:32:26] <jkaye> Oh boy
[18:32:29] <jkaye> Unsubscribe
[18:32:47] <urdh> banks work until people decide they don't, which is mostly sufficient
[18:32:50] <Juliu> Scamology is a scam!
[18:32:59] <Haohmaru> does a Juliu who doesn't talk about scams exist, that's the ultimate question
[18:33:11] <urdh> i have yet to see anyone arguing convincingly that cryptocurrency is any different
[18:33:35] <Juliu> Haohmaru, that's an EXP-TIME hard problem
[18:33:37] *** Joins: sigma_ (~sigma@164.215.224.240)
[18:33:53] <Haohmaru> i know a way to speed that up
[18:33:54] <Haohmaru> >:)
[18:33:57] <Juliu> urdh, only time will tell
[18:34:17] <PJBoy> with cryptocurrency stuff, you have proof of work and whatnot, right?
[18:34:22] <PJBoy> fairly direct crypto guarantees
[18:34:33] <Juliu> Haohmaru, does it have to do with hookers, blackjack and cocain? If not, I don't wanna hear about it
[18:34:41] <Haohmaru> no
[18:34:58] <Haohmaru> it has to do with obtaining an op from, say, TinoDidriksen
[18:35:01] <PJBoy> with banks, your bank could theoretically lose all your money according to their terms and conditions
[18:35:01] *** Quits: proller (~p@2a02:6b8:0:40c:d672:80ce:1436:e46b) (Quit: Leaving)
[18:35:05] <Haohmaru> ;P~
[18:35:08] <PJBoy> or your account could get hacked or whatever
[18:35:09] <Juliu> PJBoy, proof of work, proof of stake, or a lot of other similar mechanisms
[18:35:14] *** Joins: proller (~p@2a02:6b8:0:40c:d672:80ce:1436:e46b)
[18:35:45] *** Quits: JohnMS_WORK (~kvirc@89-64-83-123.dynamic.chello.pl) (Ping timeout: 256 seconds)
[18:35:47] <urdh> PJBoy: sure the whole ledger/database part comes with cryptographic guarantees, but that's not the part you really need to trust when money is concerned (and you can generally trust banks with that part as well anyway)
[18:35:57] <PJBoy> doesn't amount to much if you just get scammed like most people that try crypto currencies seem to be
[18:36:14] <Juliu> PJBoy, or all the banks go bankrupt and the corrupt govrenment decides that they are relevant for the system and need to be saved with people's money
[18:36:28] <jkaye> Can we take the crypto bs to a crypto bs channel please
[18:36:34] <jkaye> #scamcoin or whatever
[18:36:43] <jkaye> #c++-generaly is not the place for this nonsense
[18:36:54] <Juliu> Crpto is nonsense?
[18:36:58] <Juliu> +y
[18:37:07] <jkaye> I don't care, talk about it somewhere else
[18:37:16] <urdh> also for the sake of argument we should distinguish banks (the kind you keep your money in) from banks (the kind that does complicated derivatives deals with sophisticated counterparties)
[18:37:24] <Juliu> Do you have anything more important to talk about at the moment?
[18:37:55] <jkaye> Yes, literally anything. What would it take to build an extensible effect system in C++?
[18:38:12] <PJBoy> I guess the corrupt government line is the most interesting line of reasoning
[18:38:19] <TinoDidriksen> Cryptocurrency and NFC is mostly nonsense, and finances are mostly unrelated to C++ anyway, so I agree that belongs in -social
[18:38:34] <Juliu> jkaye, heritance
[18:39:00] <jkaye> ?
[18:39:04] <Juliu> TinoDidriksen, NFC? You probably meant NFT
[18:39:05] <Haohmaru> what effects?
[18:39:14] <Haohmaru> NFC is bullsh*t too
[18:39:36] <Haohmaru> most 3-letter abbreviated things are bullsh*t ;P~
[18:39:59] <Juliu> You think cryptocurrencies are nonsense while your government will make use use a cryptocurreny in 3 years if you want or not? Wow, that's delusional
[18:40:08] <Juliu> *you use
[18:40:09] <Shell> can we have a systems language flamewar instead those are more fun than this nonsense *ducks*
[18:40:20] <jkaye> Shell, yes please
[18:40:47] <Juliu> Haohmaru, so C++ is bullshit?
[18:40:58] <jkaye> That's only one letter
[18:41:06] <Juliu> I cheated
[18:41:17] <Haohmaru> straight to jail!
[18:41:54] *** Quits: proller (~p@2a02:6b8:0:40c:d672:80ce:1436:e46b) (Quit: Leaving)
[18:42:14] *** Joins: proller (~p@2a02:6b8:0:40c:d672:80ce:1436:e46b)
[18:42:23] <PJBoy> do not pass go
[18:42:28] <Haohmaru> !fact
[18:42:30] <nolyc> Haohmaru: A function declaration with an inline specifier declares an inline function.
[18:42:46] <cbreak> NFC works ok. Not that I use it for more than paying for lunch
[18:42:47] <Haohmaru> look how wonderful that is ^
[18:43:02] <Juliu> NFC never worked well for me
[18:43:12] <PJBoy> it confirms that `inline static void f() {}` <-- is an inline function rather than a static function
[18:43:37] <Juliu> PJBoy, not true. It does not have to be an inline function
[18:43:46] <PJBoy> did you miss the fact?
[18:43:54] <Juliu> What fact?
[18:44:05] <lionkor> lets instead fight over whether to put `inline` or `static` first. `inline static` looks wack.
[18:44:08] <Haohmaru> NFC should be violating the pandemic measures
[18:44:10] <PJBoy> the one nolyc reponded to Haohmaru with
[18:44:26] <Juliu> Haohmaru, there is no pandemic
[18:44:27] <PJBoy> the static has no effect in that declaration
[18:44:31] <PJBoy> so it should just be `inline`
[18:44:43] <jkaye> I have a better idea. East/west const flame war
[18:44:47] <Juliu> PJBoy, the compiler is free to ignore your "inline"
[18:44:58] <PJBoy> why do you think that?
[18:45:02] <fiesh> lol
[18:45:05] <Haohmaru> is there also a east/west volatile?
[18:45:11] <Juliu> jkaye, west!
[18:45:25] <Juliu> Haohmaru, no one uses volatile anyway
[18:45:30] <cbreak> Juliu: no
[18:45:35] <PJBoy> { const int volatile x{}; } // woo
[18:45:36] <geordi>  
[18:45:36] <Haohmaru> false
[18:45:36] <Juliu> no what?
[18:45:43] <cbreak> if the compiler would ignore the inline, that'd result in linker errors
[18:45:57] <cbreak> well, potentially...
[18:46:23] <Juliu> cbreak, what are you talking about? "inline"s are always just suggestions. They can be ignored if the compiler decides so
[18:46:25] <Haohmaru> i mean, does it change the meaning like it does in a pointer with const involved?
[18:46:30] <fiesh> in a world where cryptography does not exist, the compiler is free to ignore inline
[18:46:35] <PJBoy> ahahaha
[18:46:37] <cbreak> and more importantly, function-local static variables would be duplicated
[18:46:43] <cbreak> Juliu: no
[18:46:51] <PJBoy> the principle of explosion strikes again
[18:46:59] <Juliu> cbreak, yes
[18:47:02] <cbreak> inline int foo() { static int i = 0; return i++; }
[18:47:14] <cbreak> replace inline with static, and call it from multiple files
[18:47:23] <cbreak> the result will be different
[18:47:41] <Haohmaru> the result is, Juliu is a scam
[18:47:42] <Juliu> cbreak, replace inline with empty space. I never said it's the same as static
[18:47:58] <cbreak> without inline, it'll not compile
[18:48:04] <cbreak> because you get linker errors
[18:48:39] <Juliu> cbreak, then maybe in this situation the compiler is not free to decide
[18:49:04] <Juliu> But when the compiler is free to decide, just because you write inline, doesn't mean it's inline
[18:49:08] <cbreak> it may never decide freely. inline always changes the ODR violation rules
[18:49:19] <Juliu> cbreak, you are wrong
[18:49:21] <cbreak> inline functions can be deduplicated
[18:49:23] <PJBoy> {} int g(); int foo() { static int i = 0; return i++; } void f() { SHOW(foo()); } \\ int foo() { static int i = 0; return i++; } void g() { SHOW(foo()); }
[18:49:23] <fiesh> lol
[18:49:24] <geordi> error: 1.o: multiple definition of 'foo()'
[18:49:30] <cbreak> normal functions collide
[18:49:31] <fiesh> PJBoy: you are wrong!
[18:49:53] <PJBoy> { f(); f(); g(); g(); } int g(); inline int foo() { static int i = 0; return i++; } void f() { SHOW(foo()); } \\ inline int foo() { static int i = 0; return i++; } void g() { SHOW(foo()); }
[18:49:54] <geordi> foo() = 0 foo() = 1 foo() = 2 foo() = 3
[18:50:01] <PJBoy> inline confirmed required
[18:50:01] <fiesh> wrong again
[18:50:05] <Juliu> cbreak, there are cases where you write inline and the compiler does not copy your function's body into your code, but keeps it as a real function
[18:50:15] <cbreak> Juliu: so? who cares about that?
[18:50:17] <fiesh> cbreak: therefore you're wrong
[18:50:22] <fiesh> I'm with Juliu on this one guys
[18:50:24] <Juliu> cbreak, so it's not inlined then
[18:50:28] <cbreak> copying the function somewhere doesn't matter
[18:50:45] <cbreak> the only thing inline has to do is allow you to define the same function multiple times
[18:50:52] <cbreak> (in multiple TUs)
[18:50:55] <Juliu> cbreak, it does something else than what you wrote, since the compiler decided against your decision to inline the function
[18:50:57] <fiesh> similarly, `auto` is superfluous in C++
[18:51:01] <fiesh> you never get an automobile
[18:51:04] <lionkor> quick question; why does MSVC allow `void main() {}`? the ISO standard @ 6.9.3.1 ([basic.start.main]) says that it needs to return int for non-freestanding implementations, yet MSVC compiles this without even a warning... Why is this?
[18:51:05] <fiesh> the compiler just ignores it
[18:51:15] <cbreak> Juliu: the inline keyword isn't related to inlining the function
[18:51:25] <Juliu> cbreak, that's what I am saying
[18:51:30] <cbreak> no
[18:51:35] <Juliu> no what?
[18:51:41] <PJBoy> lionkor, it warns for me
[18:51:42] <fiesh> and what the hell does `double` double?  nothing
[18:51:45] <cbreak> you're claiming I'm wrong, when I say that inline matters
[18:51:50] <cbreak> so you claim inline doesn't matter
[18:51:53] <cbreak> even though it clearly does
[18:51:57] *** Joins: RabidToaster (~Thunderbi@bras-base-otwaon234vw-grc-15-50-100-215-56.dsl.bell.ca)
[18:52:07] <lionkor> PJBoy: must be your flags, i don't see anything: https://godbolt.org/z/T933x9Kh6
[18:52:19] <Juliu> cbreak, I said that your function is not necessarily inlined just because you write inline
[18:52:21] <fiesh> cbreak: double doesn't double your code, and `double inline` is thus twice as broken
[18:52:26] <lionkor> in fact, it turns it into a int main with return 0
[18:52:53] <fiesh> Juliu: you pretty clearly said "you are wrong"
[18:52:58] <cbreak> Juliu: whether the function is inlined or not isn't related to the inline keyword
[18:53:10] <cbreak> I never claimed it had anything to do with it
[18:53:21] <PJBoy> lionkor, yeah you do need some flags
[18:53:31] <Juliu> fiesh, yes, because I understood him that way that he said that inline means that the compiler is forced to inline the function, which is incorrect
[18:53:36] <cbreak> but the inline keyword absolutely has a use
[18:53:40] <PJBoy> lionkor, for MSVC you want to specify /std:c++20 or /permissive-
[18:53:42] <cbreak> and the compiler is NOT ALLOWED TO IGNORE IT
[18:54:06] <cbreak> if you try the example I gave, you can find out that indeed, inline is significant
[18:54:15] <PJBoy> similar to how in gcc/clang I would specify --std=c++20 and -pedantic
[18:54:23] <Juliu> cbreak, that is also not correct. Wheather the function is inlined or not is related to the inline keyword, even though the compiler might decide against your suggestion
[18:54:49] <fiesh> better go on breaking cryptography, Juliu
[18:55:01] <cbreak> Juliu: not really.
[18:55:07] <Juliu> cbreak, yes really
[18:55:18] <lionkor> PJBoy: still not a sane default to not even warn, my prof did `void main` infront of 200+ people in a lecture 2 years ago.
[18:55:31] <PJBoy> I agree
[18:55:38] <lionkor> is it a legacy thing?
[18:55:39] <PJBoy> I would go on to say that none of the compilers have sane defaults
[18:55:49] <PJBoy> legacy up to C++20, yeah
[18:55:51] <Juliu> cbreak, there are cases where you write inline and it gets inline, and you don't write inline and it does not get inlined. So saying it does not depend if your write inline or not is not always correct
[18:56:03] <PJBoy> they finally decided to make /permissive- on by default in C++20 onwards
[18:56:09] <lionkor> oh, sweet
[18:56:21] <cbreak> compilers can inline without the keyword
[18:56:29] <cbreak> and they can decide to not inline with the keyword
[18:56:35] <lionkor> inline has other uses, too, like telling the compiler that multiple definitions are the same thing and for it not to worry - quite important
[18:56:51] <cbreak> lionkor: that's its primary use
[18:57:00] <Juliu> cbreak, yes, compilers can inline without the inline keyword, and they can also not inline even if you wrote the inline keyword. That is correct
[18:57:50] <lh_mouse> In reality `inline` does affect the decision about inlining.
[18:57:55] <Juliu> cbreak, but there are cases where the compiler does exactly what the inline/no inline keyword suggests, so it sometimes depends on this keyword
[18:58:19] <fiesh> lh_mouse: does it really though or just the visibility of the function definition?
[18:58:20] <Juliu> lh_mouse, yes. It's a suggestion to the compiler
[18:58:22] <PJBoy> any citation for whether the presence of inline affects codegen?
[18:58:34] <PJBoy> I'm skeptical
[18:58:53] <lh_mouse> fiesh, see https://gcc.gnu.org/onlinedocs/gcc-7.1.0/gcc/Optimize-Options.html
[18:58:54] <lh_mouse> -finline-functions
[18:58:54] <cbreak> if a function is only used in one place, then marking it as inline can enable the compiler to inline it, because that wouldn't duplicate code
[18:58:56] <Juliu> PJBoy, you can test it by comparing runtimes
[18:59:04] <lh_mouse> read the doc.
[18:59:12] <cbreak> but that's more a side effect
[18:59:24] <lh_mouse> `-finline-functions` wasn't default for `-O2` until GCC 8.
[18:59:37] <cbreak> in the same circumstance, enabling the compiler to see this in other ways (via lto, or marking the function as static), might do the same
[18:59:56] <Juliu> Who uses gcc anyway
[18:59:58] <PJBoy> it doesn't say functions aren't considered for inlining if they lack the inline specifier
[19:00:18] <fiesh> lh_mouse: oh indeed, but I guess gcc7 is historic now and doesn't count any more ;-)
[19:00:22] <lh_mouse> so with GCC 7 (and older) there is a difference about the probability whether a function is likely to get inlined or not.
[19:00:33] <PJBoy> and I'm quite sure they are considered for inlining even without inline
[19:00:39] <Juliu> PJBoy, because functions an or can not be inlines independant from the inline keyword
[19:00:44] <Juliu> *can
[19:00:56] <lh_mouse> afaict since GCC 8 they behave much the same.
[19:01:09] <lh_mouse> it only makes a difference in the case of `-O1`.
[19:01:35] <PJBoy> proof https://godbolt.org/z/KMTde6K37
[19:01:40] <PJBoy> unless they did add that flag to O1
[19:01:48] <Juliu> lh_mouse, what GCC does is not relevant for the spec
[19:02:05] <PJBoy> still inlined in 7.1 though
[19:02:06] <lh_mouse> there is also `-finline-small-functions` in addition to that option.
[19:02:10] <PJBoy> ah
[19:02:33] <PJBoy> gcc 7.1 with  -fno-inline-small-functions https://godbolt.org/z/GvhhWqYhn
[19:02:37] <Juliu> PJBoy, your "proof" is stupid since we said it could be inlined without the inline keyword, or not inlined even with the inline keyword
[19:03:32] <cbreak> https://gcc.godbolt.org/z/vv591W7We, go play around with this if you want
[19:03:50] <PJBoy> adding  -fno-inline-functions has no effect also
[19:03:55] <cbreak> note that I use -Os
[19:03:56] <Juliu> Deactivate the automatic inlining of small functions and write a normal member function in a class one time as inline and one time as not inline, and you'll see that likely the inlining depends on the keyword
[19:04:45] <PJBoy> ah -fno-inline-functions-called-once did prevent the inlining though
[19:06:12] <PJBoy> alrighty, inline specifier confirmed taken into account for codegen
[19:06:50] <Juliu> Wait, did I just convince PJBoy that inline is not a scam?
[19:07:06] <cbreak> says the Julius that claims that inline does nothing :D
[19:07:16] <PJBoy> provided the optimisation is sufficiently low
[19:07:19] <Juliu> cbreak, dude, I totally said something else
[19:07:33] <Juliu> cbreak, I was right from the beginning. Deal with it
[19:07:38] <cbreak> heh :D
[19:08:40] <PJBoy> what's the tldr of what you were claiming Juliu ?
[19:10:09] <cbreak> here, an other example: https://gcc.godbolt.org/z/74K9eWco3 you can clearly see that inline matters.
[19:10:17] <cbreak> and it is different from both static and nothing
[19:11:20] <Juliu> PJBoy, that in some instances the inlining of the function depends on the presence of the inline keyword
[19:11:50] <PJBoy> on code-gen, yeah
[19:12:20] <cbreak> Juliu said: "cbreak, what are you talking about? "inline"s are always just suggestions. They can be ignored if the compiler decides so".
[19:12:27] <Juliu> Anyway, let's not argue. Inline is a scam
[19:12:29] <PJBoy> language-wise it's a non-negotiable change to how ODR is applied on the function
[19:12:40] <cbreak> and that's obviously wrong.
[19:12:50] <Juliu> cbreak, yes, the "always" was incorrect
[19:13:20] <sprout> inline in C++ doesn't mean inline as in C
[19:13:29] <sprout> as far as I remember
[19:13:45] <Juliu> There is inline in C ? I don't even remember most C things
[19:13:49] <rpav> or as in the way basically anyone else means it, including the dictionary ;)
[19:13:58] <cbreak> the key point that has to be remembered about inline is: inline is about ODR, not inlining.
[19:14:24] <Juliu> cbreak, I disagree
[19:14:24] <cbreak> sprout: inline in C is #define? :D
[19:14:29] <sprout> https://en.cppreference.com/w/cpp/language/inline
[19:14:53] <PJBoy> C has the same inline
[19:15:02] <PJBoy> but they also have inline static, which is different than C++
[19:15:19] <rpav> what does theirs do
[19:15:33] <PJBoy> allows the function definitions to be written differently
[19:15:40] <PJBoy> provided they have the same behaviour
[19:15:46] <lionkor> inline in C is *only* a function specifier
[19:15:47] <sprout> inline in c++ says something about the declaration,  inline in C says that a function is meant to be 'inlined' at the call site.  not sure about c
[19:15:48] <rpav> ðŸ¤”
[19:16:00] <PJBoy> so different implementations of that function could get inlined to different parts of codegen
[19:16:28] <rpav> like hypothetically you could use `inline static` like that in C++ couldn't you
[19:16:41] <PJBoy> you could try
[19:16:45] <rpav> it wouldn't be an ODR violation because static void foo() in a.cpp is not static void foo() in b.cpp
[19:16:48] <Juliu> Somehow I'm always the only one who writes inline in code
[19:16:49] <PJBoy> not sure what the compilers would have to say about that
[19:17:00] <PJBoy> nah in C++ inline takes priority over static
[19:17:07] <PJBoy> the functions wouldn't be static at all
[19:17:08] <rpav> i'm mostly not sure why you _would_
[19:17:14] <rpav> oh, that would be a difference i guess
[19:17:20] <sprout> inline is decoupled from whatever it meant in c
[19:17:30] <rpav> though i thought i had a problem with that at some point
[19:17:51] <sprout> "The original intent of the inline keyword was to serve as an indicator to the optimizer"
[19:18:07] <sprout> that hasn't been true for a while now
[19:18:57] <LordKalma> "The inline specifier (contrary to the popular belief about inlining in the compiler sense), serves to mark that a function can be defined in many TUs (as long as the definitions are identical). This usually happens via multiple header includes, so this is the place to define them. The nuanced effect of this is making the definition available in the TUs the function is used, therefore indirectly helping compiler inlining."
[19:19:37] <rpav> yeah that's C++ .. "A-B Problem: The Language"
[19:22:01] <sprout> basically 'inline' allows you to move an implementation to a header at the expense of it being included in multiple translation units
[19:22:08] <LordKalma> we have this discussion so often I literally went to my chat log to pick that up
[19:22:21] <LordKalma> I wrote that Dec 26 16:22:57
[19:22:28] <LordKalma> (local time)
[19:22:36] <PJBoy> the most used parts of C++ are the least well understood
[19:22:38] <sprout> it has nothing to do anymore with the optimizer.  unless except for removing all copies
[19:23:05] <LordKalma> sprout, without LTO, the compiler can only inline what it knows about
[19:23:16] <LordKalma> so yes, it does have to do with the optimizer in the nuanced sense I described
[19:23:42] <PJBoy> it helps with inlining otherwise with the right compiler flags
[19:23:53] <rpav> but it doesn't
[19:23:55] <lh_mouse> [23:44:53] <PJBoy> C has the same inline  // `inline` in C is a totally different thing.
[19:24:00] <LordKalma> in the sense that you might want to write something as an inline function exactly for the multiple TU availability
[19:24:11] <PJBoy> I understand inline in C to act the same as C++
[19:24:12] <Juliu> sprout, couldn't you just instead have the implementation of a static function in your header file as well?
[19:24:12] *** Joins: ahlk (~user@2600:1700:31c0:3a10::43)
[19:24:20] <PJBoy> rpav, it does
[19:24:23] <LordKalma> rpav, in the "standards sense", yap, not really
[19:24:25] <PJBoy> I listed a godbolt link earlier
[19:24:27] <rpav> {} inline void foo();
[19:24:28] <geordi>  
[19:24:39] <rpav> PJBoy: it is orthogonal, and therefore adds nothing
[19:24:50] <sprout> Juliu: no.  even static functions need to go somewhere
[19:24:58] <PJBoy> what's orthogonal?
[19:25:04] <rpav> saying `inline` to actually-inlining
[19:25:11] <PJBoy> it's not though
[19:25:28] <rpav> it is neither necessary nor sufficient
[19:25:32] <Juliu> sprout, they would of course go to each cpp file that includes this header
[19:25:45] <PJBoy> it makes a difference to this codegen https://godbolt.org/z/bfcE4eEP3
[19:25:48] <sprout> right,  which would be problematic
[19:26:08] <Juliu> sprout, not really. But having larger functions in your header file is ugly anyway
[19:26:08] <rpav> PJBoy: but what compilers do is unspecified
[19:26:23] <PJBoy> this is #c++-general
[19:26:27] <Juliu> I mean, the whole concept of header files is ugly. But that's a different topic
[19:26:30] <rpav> i _have_ seen inline make a difference and make some bigger functions inlined, but that's not guaranteed
[19:26:57] <LordKalma> again, seems like having a nuanced understanding of a feature is too much to ask. Seems that nuanced discussion of anything is too much to ask these days anyway hahah
[19:26:58] <PJBoy> and what GCC does is somewhat specified
[19:27:05] <PJBoy> by their docs
[19:27:08] <rpav> thus discussing libraries and compilers is topical, but that doesn't make something standard-specific suddenly outside-the-standard
[19:27:20] <sprout> Juliu: yah.  I am moving header-only though for a small project while pending modules.
[19:27:33] <PJBoy> no one claimed the standard requires GCC to acknowledge inline for codegen purposes
[19:27:35] <lh_mouse> PJBoy, I happen to have an explanation about `inline` here: https://sourceforge.net/p/mingw-w64/mailman/message/37319453/
[19:27:36] <sprout> Juliu: closest I can get to complete single modules
[19:27:45] <LordKalma> in the standard sense the consequence of "inline" specifier is: "compiler, you'll see this symbol in many TUs. I promisse they are equal, don't freak out"
[19:27:58] <lh_mouse> AFAICT c++ `inline` should be equivalent to `extern
[19:27:58] <lh_mouse> __inline__ __attribute__((__weak__))` on Linux.
[19:28:05] <Juliu> sprout, not what I meant. I like header-only. But in general the concept of having a language that has header files in the first place is not good
[19:28:11] <LordKalma> in the pragmatic sense, as a programmer, it means "hey, compiler, watch this on all your TUs, and feel free to use that knowledge to optimize"
[19:28:13] <PJBoy> I don't know what any of those python keywords do
[19:28:14] <lh_mouse> On Windows we have `.linkonce` but it's more or less equivalent.
[19:28:46] <sprout> Juliu: oh sure,  I get that and agree.  just commenting on a recent thing I decided upon
[19:29:07] <lh_mouse> the C99 `inline` and `extern inline` have totally different semantics, while in C++ they are the same.
[19:29:13] <LordKalma> Juliu, what, you mean the separate compilation is shit? :o can't believe it
[19:29:26] <Juliu> sprout, I personally wouldn't put larger functions into header files. Although I like Eigen3 for example, a library that is completely headers only
[19:29:46] <PJBoy> that page claims that C's inline doesn't generate a function in codegen
[19:29:57] <LordKalma> isn't a library like Eigen3 mostly templates anyway?
[19:30:03] <LordKalma> maybe except for hand-written simd
[19:30:03] <sprout> Juliu: with classes it all becomes vague anyway
[19:30:17] <lh_mouse> C99 plain `inline` provides only the inline definition (so failure to inline the function ends up in undefined references), but `extern inline` provides a strong symbol (so if the function is declared `extern inline` in multiple TUs there could be multiple definitions).
[19:30:21] <Juliu> LordKalma, I mean that hand-crafting interfaces for your functions and classes is dumb, since a compiler can do that automaically. Java for example does that
[19:31:00] <sprout> Juliu: sure,  separating interface and implementation has always been seen as a good se practice.  but nobody really likes the overhead
[19:31:11] <lh_mouse> C++ solves this problem by providing weak symbols for `inline` functions (and implicit template specializations FWIW), so life has become simpler.
[19:31:15] * sprout *coughs* java
[19:31:28] <PJBoy> alright yeah, the C one is a bit different
[19:31:32] <PJBoy> cppreference confirms
[19:31:33] <LordKalma> C++ is old as fuck and is a mix of Simula, Algol, and C, on a C-ish interface, with god knows how many psycadelic drugs in the middle
[19:31:45] *** Quits: great_taste (~great_tas@user/great-taste/x-5798414) (Quit: Client closed)
[19:32:07] <PJBoy> people try to tell me that C is a simple language
[19:32:28] * PJBoy shakes head
[19:32:31] <LordKalma> C is a barebones language... by no means simple
[19:32:36] <Juliu> sprout, interfaces are defined by the implementations. It's the first line of each function :D So there is zero need to have the same code in a header file a second time. Actually, you might not even want anyone to have the change to modify a header (in cases those exist). Maybe you just want to give them your compiled code and a html file that describes the interfaces
[19:32:59] <lh_mouse> C is such a simple language that humans have to deal with the extra complexity.
[19:33:22] <LordKalma> C programmers say every experienced C programmer could write a C compiler as a "feature" of the language
[19:33:27] <Juliu> LordKalma, yes, C++ is pretty patchworky
[19:33:28] <LordKalma> I'd rather have smart people write smart compiler
[19:33:59] <PJBoy> so what's the difference between inline and static in C?
[19:34:01] <rpav> i'd rather have good people write a compiler that does the fuck what i tell it to, and can provide hints about other things i could tell it to improve performance
[19:34:13] *** Joins: Simplar (~Simplar@188.163.93.76)
[19:34:17] <LordKalma> The C fetish for individualism and almost byte-by-byte processing in C is so BS
[19:34:22] <lh_mouse> `static` affects the linkage.
[19:34:35] <LordKalma> doesn't static means a single symbol?
[19:34:39] <PJBoy> it has internal linkage either way from what I'm reading
[19:34:40] <Juliu> I like C++. I just think most people use way too many features that C++ offers just because they are there
[19:34:56] <LordKalma> features are there to be used
[19:35:05] <Juliu> LordKalma, I disagree
[19:35:12] <Juliu> Keep it simple stupid
[19:35:32] <LordKalma> I had this discussion the other day in the slack. I tend to agree with a fatter stdlib that actually helps application programming, but I seem to be in the minority
[19:35:40] <LordKalma> maybe I miss the point of C++ :D
[19:35:44] <Juliu> The mentality you describe is exactly why so many C++ projects end up becoming a complete mess
[19:35:53] *** Joins: zmt01 (~zmt00@user/zmt00)
[19:35:56] <rpav> a better stdlib is definitely better
[19:35:58] <Juliu> That's why so many C programmers hate C++
[19:36:02] <markand> simple is ambiguous term
[19:36:04] <PJBoy> people that one small stdlib are people that recognise that stdlib does everything poorly
[19:36:09] <PJBoy> s/one/want
[19:36:12] <LordKalma> hahahaha true
[19:36:20] <Juliu> markand, it takes some common sense, indeed
[19:36:33] <LordKalma> Juliu, I don't agree with that. I don't mean, of course, that features should be used for the sake of being used.
[19:36:36] <markand> C is simple as it's easy to implement and remember, simple to use, yes but only after you've hit the most common mistakes
[19:36:39] <LordKalma> I mean they should be leveraged
[19:36:43] <LordKalma> instead of reinventing the wheel
[19:36:46] <rpav> PJBoy: quite the opposite; the ones who want a small stdlib are the ones that _make_ it do everything poorly
[19:36:52] <PJBoy> C is most certainly not simple and easy to implement
[19:36:58] <PJBoy> just look at the inline keyword
[19:37:11] <rpav> one should have an stdlib that does all the _common_ things well, even if it excludes some reasonable but uncommon things
[19:37:25] <PJBoy> I've been using C for ages and I'm still finding all these gotchas in the nooks and crannies
[19:37:48] <markand> writing a C compiler is order of magnitude easier than writing a C++ one
[19:37:52] <PJBoy> C is deceptive
[19:37:55] <rpav> rather than make a useless std because it absolutely must hypothetically handle the case that one guy in antarctica thought about using once
[19:37:55] <Juliu> LordKalma, have you ever tried a map editor for a 3D engine/game? You learn to make different kinds of doors quite in the beginning, and then you use them all over your first levels. But does a level with 10 different kinds of door really make sense? To me it's a sign of immaturity to not discipline yourself
[19:38:06] <PJBoy> C++ is probably more complex, not denying that
[19:38:23] <LordKalma> like, for example, let's make a comparison every C programmer loves to make: operator overloading. do I want my_thing_add(a, b) or a+b? The latter allows really easily to have code that's more "changeable", where you can change types with less find/replace
[19:38:32] <LordKalma> Juliu, yes, but I'm *not* saying that
[19:38:36] <PJBoy> but both languages are a hell of a lot more complex than lua
[19:38:46] <rpav> LordKalma: i actually think neither one is precisely right
[19:38:51] <PJBoy> lua would be my watermark for simple
[19:38:58] <markand> lua :/
[19:39:00] <LordKalma> lua is 1-indexed. therefore it's an invalid language
[19:39:08] <PJBoy> urmom's 1-indexed
[19:39:16] <rpav> LordKalma: i.e., syntax sugar is UI, and API is "backend", and they should be separate
[19:39:20] *** Joins: great_taste (~great_tas@user/great-taste/x-5798414)
[19:39:32] *** Quits: lionkor (~lionkor@beammp/staff/lionkor) (Ping timeout: 240 seconds)
[19:39:34] <LordKalma> PJBoy, yes, but yours has a very large index. Body mass and count :p
[19:39:48] <Juliu> LordKalma, and then there are the typical C++ "experts" who waste so much time with finding the best solution to have something that could be extended in the future, while no one knows what the future might really bring. Instead of just implementing things in the most easy and robust way and get it done
[19:39:50] <markand> no continue keyword (but break and goto exists), stupid non-regex compatible syntax, authors don't accept patch, bizarre ~= operator, no switch-case/pattern matching, confusing table/array mix
[19:39:56] <rpav> like, you should _have_ add(a,b), and be able to say "ok i want + to use add() for <Ts> here"
[19:40:11] *** Quits: pulse (~pulse@user/pulse) (Ping timeout: 256 seconds)
[19:40:19] <PJBoy> lua has problems, but it's very simple
[19:40:33] <PJBoy> I actually didn't know that it has goto
[19:40:44] <markand> not mentioning the most painful issue: every eversion breaks both C and Lua API
[19:40:47] <LordKalma> Juliu, you mean Jason Turner? hahahah
[19:41:11] <markand> so you have to carry thousands of #ifdef in your host application if you want to support multiple lua version or... you stick to a fixed version and your users will complain
[19:41:13] <PJBoy> it also has the problem of not allowing code after a return statement
[19:41:24] <LordKalma> what? lua is a single-return language?
[19:41:26] <Juliu> LordKalma, I could argue that not just C++ but most imperative languages offer so many features (and potential problems) that there even is a trend in the industry to get rif of all this shit and use functional programming
[19:41:28] <LordKalma> fuck that shit
[19:41:34] <PJBoy> nah it can have multiple returns
[19:41:39] <PJBoy> it just can't have dead code
[19:41:59] <LordKalma> that's a very very weird limitation
[19:42:10] <PJBoy> yeah I agree
[19:42:17] *** Joins: magla (~gelignite@55d4381b.access.ecotel.net)
[19:42:37] <LordKalma> Juliu, don't you worry, people will make functional programming shit in 5 years
[19:42:37] <PJBoy> oh they added goto in lua 5.2
[19:42:45] <PJBoy> wow they had to *add* goto
[19:42:54] <LordKalma> just give it the same time trending as Java had :p
[19:42:55] <Juliu> LordKalma, lol. Honestly, that is likely :)
[19:43:21] <LordKalma> Juliu, F# is a "functional" language with classes
[19:43:26] <Juliu> LordKalma, to me all programming languages have the same ingerent error: They tell the computer what to do, and not what we want
[19:43:28] <LordKalma> so that already happened
[19:43:41] <Juliu> *inherent
[19:44:08] <LordKalma> Juliu, declarative programming is something I like indeed. And everybody's CMake would be better IF THEY USED THE GOD DAMN DECLARATIVE APIs
[19:44:17] <LordKalma> but that's a side rant
[19:44:28] <PJBoy> official motivation for not merging `continue` into lua http://lua-users.org/lists/lua-l/2008-02/msg01183.html
[19:45:08] <Juliu> To me a perfect programming language would look like this: sort( input, output ) { check that all numbers of input are in output; check that every number in output is <= the next number; }    (but in formal code of course)
[19:45:11] <PJBoy> tldr `goto` is good enough for the purposes of `continue`
[19:45:29] <LordKalma> https://dotnet.microsoft.com/en-us/languages/fsharp // click the "object support" pane. Seems pretty imperative to me
[19:45:34] <LordKalma> and F# is a "functional" language
[19:45:48] <LordKalma> but a functional language trying to plug into a .net runtime of course had to support objects hahah
[19:46:07] <LordKalma> PJBoy, so they are aggressively against redundancy
[19:46:19] <Juliu> LordKalma, C++ also has functional concepts now. They're called lambdas
[19:46:22] <PJBoy> they didn't like the cost of the extra complexity
[19:47:12] *** Quits: adeliktas (~adeliktas@i59F4A597.versanet.de) (Ping timeout: 250 seconds)
[19:47:19] <LordKalma> "now"
[19:47:25] <LordKalma> side rant #2: python lambdas are so shit
[19:47:28] <Juliu> LordKalma, do you see what I mean by my "perfect" programming language example?
[19:47:57] <PJBoy> nah python lambdas are good
[19:48:07] <Juliu> I don't like Python anyway
[19:48:08] <PJBoy> they're restricted in a way that promotes simplicity
[19:48:14] <LordKalma> fortunately for python lambdas you can write any program that doesn't throw inside a list comprehension
[19:48:18] <PJBoy> and for complex cases you can write a local function
[19:48:23] <LordKalma> and I do mean *any*
[19:49:02] <Juliu> Since C++ has lambdas, I'm using the std algorithms way more often
[19:49:09] <PJBoy> I would constantly complain about the use of lambdas in C++ if we had local functions
[19:49:22] <LordKalma> PJBoy, I gotta admit that doing this JS project, I became a fan of JS's () => because you can myarray.map((elem) => {/* transformation */});
[19:49:40] <Juliu> PJBoy, just wrap that "local" function in a struct and get it done
[19:49:42] <LordKalma> exaclty what Juliu said. A good anonymous function system is very convenient
[19:49:54] <PJBoy> nah they're not
[19:50:09] <LordKalma> honestly I enjoy the JS syntax
[19:50:12] <PJBoy> always better to move big bodies somewhere else and give them a name
[19:50:24] *** Joins: adeliktas (~adeliktas@i59F4DA04.versanet.de)
[19:50:32] *** Joins: kraa (~kraa@107-190-7-216.cpe.teksavvy.com)
[19:50:46] <imMute> LordKalma: C# has that same syntax and it is indeed great
[19:50:57] <sprout> right,  anonymous functions are very convenient.  doesn't really mean you're in the realm of functional programming but still,  convenient
[19:51:06] <Juliu> Most lambdas that I use are just comparing member variabes of a class
[19:51:11] <LordKalma> imMute, C# also has LINQ for when you feel declarative hahah
[19:51:17] *** Quits: NovumDXW (~NovumDXW@2409:8a28:3610:29b0:74d8:d16b:92b3:8d89) (Ping timeout: 240 seconds)
[19:51:27] <PJBoy> lambdas that are just pure functions are great
[19:51:32] <imMute> LordKalma: I only use the method syntax LINQ.  fuck that stuff that looks like SQL but where order matters
[19:51:32] <Juliu> imMute, only that it's Microsoft only
[19:51:37] <Haohmaru> i just want to say, poor Alipha .. x_x ^
[19:51:46] <imMute> Juliu: what?
[19:51:50] <LordKalma> Juliu, welcome to .net core 1,2,3 and .net 5/6
[19:51:55] <PJBoy> but lambdas that wouldn't work in python would be better suited as local named functions
[19:51:56] <LordKalma> and mono runtime
[19:52:00] <PJBoy> if only we had those
[19:52:01] <Juliu> imMute, not? I have no clue about C#. It's what I heard
[19:52:13] <LordKalma> no, the .net languages are x-platform since a while now
[19:52:19] <LordKalma> the ecosystem however, still not really :(
[19:52:28] <Juliu> LordKalma, I also have no clue about Linux, so :D
[19:52:46] <imMute> Juliu: you heard wrong.  C# and a lot of .NET is an ECMA standard.  and yeah, Core and .net 5 are explicitly cross platform.
[19:53:02] <LordKalma> I was recently seriously considering C# for x-platform application programming
[19:53:03] <Juliu> imMute, yeah, maybe that changes since a few years
[19:53:14] <Juliu> *changed
[19:53:15] <LordKalma> but I quickly noticed that most of the ecosystem hasn't caught up
[19:53:24] <PJBoy> we use a homegrown C# program at work and have done for several years
[19:53:24] *** Quits: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse) (Read error: Connection reset by peer)
[19:53:25] <LordKalma> many libraries are windows only still
[19:53:28] <PJBoy> and it works just fine on linux
[19:53:41] <LordKalma> PJBoy, under Mono runtime, of .net core/5/6?
[19:53:46] <Juliu> LordKalma, what would you use for web applications insead?
[19:53:47] <PJBoy> mono
[19:53:49] <LordKalma> also, fuck MS naming of things
[19:54:14] <LordKalma> Juliu, I was talking about desktop application programming
[19:54:28] <Juliu> LordKalma, fuck. Why would you use C# for that?
[19:54:41] <LordKalma> I'm also building a website, but for that I'm using a Django+Vue.js stack on docker :D
[19:54:48] <LordKalma> Juliu, because C++ is hell and fuck electron
[19:55:14] <PJBoy> what about python gui
[19:55:18] <Juliu> LordKalma, C++ is not hell. Only GUI management is
[19:55:29] <LordKalma> Python GUIs are either Qt or GTK in disguise
[19:55:51] <LordKalma> and you know my interests, PJBoy, you want I want things to run fast
[19:55:55] <PJBoy> python qt sounds nicer than C++ qt at least
[19:56:03] <PJBoy> :D
[19:56:07] <LordKalma> meh, not really
[19:56:15] <Juliu> I've used C++ with Qt before, but to me Qt never really had a professional feeling
[19:56:15] <PJBoy> I mean I *am* writing a windows API program with direct2d
[19:56:28] <PJBoy> so you could maybe argue that I care about speed
[19:56:29] <Haohmaru> my condolences PJBoy
[19:56:34] <LordKalma> for example, if you want to use a .ui file under python, you won't have the generated headers to help you
[19:56:42] <PJBoy> direct2d is honestly the best graphics API I've seen
[19:56:44] *** Quits: ezzieyguywuf (~Unknown@user/ezzieyguywuf) (Ping timeout: 250 seconds)
[19:56:46] <LordKalma> remember that with python you only have runtime errors
[19:57:03] <LordKalma> Juliu, Qt is pretty decent, and the APIs are pretty decent, albeit aged poorly
[19:57:04] <PJBoy> oh yeah that's a good point
[19:57:13] <Juliu> Python is shit for larger projects anyway
[19:57:14] <PJBoy> classic python
[19:57:22] <PJBoy> deferring errors to runtime
[19:57:50] <LordKalma> basically you have to trust you didn't make a typo on the named of the elements in the .ui file hahah
[19:57:54] <LordKalma> *names
[19:57:54] <Haohmaru> JIT errors
[19:57:55] <Juliu> LordKalma, I had no problems with Qt. But somehow I never couldn't imagine a real software company writing a larger application with it
[19:58:28] <LordKalma> there are large software stacks written with Qt. It's just that Qt... Man, don't get me started
[19:58:36] <LordKalma> I can rant all afternoon, and Alipha will ignore me :(
[19:58:47] *** Joins: ezzieyguywuf (~Unknown@user/ezzieyguywuf)
[19:59:02] <Juliu> LordKalma, if you load things from a .ui file in C++ and do not use the automatically created files from Qt-Designer, you also have to pay attention and make no typo
[19:59:16] <sigma_> hi , i have bug: else{ function(); return;} error_massage(); . if exit from else we have error but some time function has been called but return not worked and i get error you can say why?
[19:59:27] <Juliu> LordKalma, that's the point. I do not know a single software that uses Qt
[19:59:36] <LordKalma> I do
[19:59:40] <LordKalma> you do too
[19:59:48] <LordKalma> VLC, OBS come to mind quickly
[20:00:06] <Haohmaru> there's tons of cue-tea programs
[20:00:09] <LordKalma> VLC is an interesting one because while the UI is all Qt, the video window and audio is all custom in libvlc
[20:00:29] <Juliu> sigma_, I doubt that
[20:00:41] <LordKalma> the video bits on VLC are just a canvas for all Qt knows
[20:00:44] *** Joins: Crassus (~Crassus@user/crassus)
[20:01:11] <Juliu> sigma_, it's more likely you execute your code several times and the function call is NOT from the same execution than your error message
[20:02:29] <Juliu> Haohmaru, name a famous application that uses Qt ! I mean, to make it more easy: Does Qt-Designer even use Qt ?
[20:02:35] <LordKalma> yes, of course
[20:02:43] <Juliu> Why of course?
[20:02:48] <LordKalma> Juliu, plus, all the KDE stack is Qt
[20:03:02] <Juliu> LordKalma, linux, boo
[20:03:28] <Haohmaru> Juliu no idea about cue-tea-designer.. librecad, qpdfview
[20:03:41] <LordKalma> but the Qt company is quite focused on the embedded market for quite a while now
[20:03:49] <Haohmaru> wait, "famous"
[20:03:53] <Juliu> Wouldn't it be funny if Qt-Designer itself would not use Qt for the GUI ?
[20:03:53] <PJBoy> that's how my windows api + direct2d works too
[20:04:12] <PJBoy> I make a generic child window and direct2d draws onto it
[20:04:23] <PJBoy> windows has no idea what's going on in that canvas
[20:04:31] <kalven> https://resources.qt.io/customer-cases
[20:04:32] <LordKalma> Juliu, if you want to know, Qt has an "official" AUI API for docking windows but it's so shit Qt Creator used a third party library haha
[20:04:35] <Haohmaru> seems adobe, autodesk, among others are using it
[20:04:54] <Juliu> LordKalma, they worked together with Microsoft and Nokia on Windows phones ... until this was stopped
[20:04:56] <Haohmaru> Juliu https://en.wikipedia.org/wiki/Qt_(software)#Qt_in_use
[20:05:19] <Juliu> LordKalma, as I said, I've used Qt myself for projects
[20:05:37] <Juliu> But it never really felt as if real professionals would use it
[20:05:50] *** Quits: jehelset (~jeh@2001:4644:4144:0:e2d4:e8ff:fedf:f070) (Ping timeout: 250 seconds)
[20:05:55] <LordKalma> https://en.wikipedia.org/wiki/Qt_(software)#Organizations_using_Qt quite the big names
[20:06:12] <PJBoy> professionals would use something better if it existed
[20:06:22] *** Joins: pulse (~pulse@user/pulse)
[20:06:43] <Juliu> PJBoy, they probably use their own stuff to manage GUIs
[20:06:44] <cbreak> PJBoy: probably only if they start projects from scratch
[20:06:47] <LordKalma> yes, Qt is plenty shit, everything else is worse
[20:06:56] <LordKalma> that's just how it is
[20:07:19] *** Quits: Crassus (~Crassus@user/crassus) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[20:07:21] <PJBoy> GUI is too much work even for insane private source companies
[20:07:22] <Juliu> I always wondered that C++ does not natively have something for GUIs
[20:07:22] <cbreak> I see Qt software quite a bit, for software thats's expensive.
[20:07:24] <LordKalma> Or if you're windows only, use C#
[20:07:26] <rpav> unfortunate dirty-reality
[20:08:02] <LordKalma> Juliu, it's very hard to do x--platform guis
[20:08:03] <PJBoy> although we do have an insane private source GUI in my workplace
[20:08:06] <cbreak> Juliu: GUIs are a hard problem.
[20:08:08] <LordKalma> almost impossible really
[20:08:10] <LordKalma> yap
[20:08:28] <Juliu> cbreak, not really. Actually they should be quite easy. But apparently that's all so fucked up
[20:08:31] <LordKalma> the growing C# frameworks for x-platform GUIs basically use SKIA or something like that to draw on canvas
[20:08:32] <Haohmaru> UIs gets way too much into the human "taste"
[20:08:33] <PJBoy> unfortunately taking inspiration from MFC
[20:08:41] <kalven> :~)
[20:08:45] <PJBoy> I'm gonna destroy skia
[20:09:10] <LordKalma> actually some libraries like Uno platform are quite smart
[20:09:12] <Juliu> Haohmaru, what do you mean?
[20:09:18] <LordKalma> in the platforms that provide it, it uses "templated controls"
[20:09:26] <LordKalma> that means the buttons are real OS buttons
[20:09:35] <Haohmaru> Juliu people won't ever agree on the same thing
[20:09:37] <LordKalma> just rendered with whatever the framework rendered them with
[20:09:44] <PJBoy> I'm honestly surprised how many GUIs reinvent all the controls
[20:09:45] <LordKalma> while Qt is full on faking it
[20:09:45] <Haohmaru> how should a button look like?
[20:10:01] <Juliu> Haohmaru, they could simply have some kind of virtual machine running on every system for GUIs
[20:10:13] <kalven> "simply"
[20:10:37] <LordKalma> that's called Java
[20:10:39] <LordKalma> and still shit
[20:10:44] <Haohmaru> Juliu then someone will write a native GUI lib and someone else is gonna say "hah, you loosers, that lib is way faster"
[20:10:50] <Juliu> Common, buttons are buttons, windows are windows. There is actually not much to it
[20:11:05] <Haohmaru> sure there is
[20:11:07] <LordKalma> says the person with clearly no disabilities
[20:11:18] <Juliu> Haohmaru, is that why Java runs on millions of devices?
[20:11:18] <cbreak> if you want native look, then you better support the different button styles on MacOS
[20:11:31] <LordKalma> that's why templated or native controls are so important
[20:11:36] <Haohmaru> what dafuq do i know about java?!
[20:11:45] <cbreak> if you don't want native look, then you've just given up on solving one of the hard problems in cross-platform UI
[20:11:59] <Haohmaru> ^ what cbreak talks
[20:12:13] <Juliu> LordKalma, the disability helpers are part of the OS and work on every GUI, I suppose
[20:12:40] <rpav> and no one cares about native look anymore
[20:12:45] <Haohmaru> Juliu but you proposed to "just use some VM"
[20:12:47] <LordKalma> they do IF you use the native controls/templated controls from the OS
[20:12:50] <LordKalma> exactly
[20:12:51] <Juliu> cbreak, why would you not be able to get a native look just because it's cross platform
[20:13:15] <Haohmaru> Juliu look at cue-tea vs wxwidgets for example
[20:13:21] <Juliu> Haohmaru, doesn't have to be a real VM. Could be some kind of standard interface or whatever
[20:13:22] <cbreak> because native UIs have stupid ideas of how things should look like, which you either have to support, or ignore
[20:13:28] <LordKalma> wx wraps native controls when possible, Qt fakes everything
[20:13:29] <rpav> windows looks like all the things .. C#'s shit doesn't look "native", it looks much more "like a webpage" .. no one uses mac, and linux never really _had_ a native look, so
[20:14:05] <LordKalma> except if you're on Qt Quick. Then it's fuck all
[20:14:10] <Haohmaru> unfortunately, some folks use mac
[20:14:18] <rpav> in 2005 people cared about "native look" and then 15 years later, we have shit UI libraries and covid-19, so i'd say fuck those people and their native look
[20:14:33] <LordKalma> wtf is native look anyway? On windows particularly
[20:14:38] <PJBoy> C# stuff looks native
[20:14:40] <LordKalma> is it the winapi look, fluent design?
[20:14:41] <PJBoy> but doesn't act native
[20:14:42] <cbreak> windows has like 4 native looks.
[20:14:46] <Juliu> I hate applications that do not use the native Windows look. Everyone would be exactly the same, only look slightly different. Can't be that hard
[20:14:50] <LordKalma> or whatever win 11's guidelines are called?
[20:15:05] <Juliu> *Everything
[20:15:17] <rpav> windows "native look" is what you get when you open control panel or its dialogs mostly
[20:15:17] <LordKalma> cbreak, yes, winui, Fluent, whatever win11 has hahah
[20:15:19] <Haohmaru> https://www.pc-freak.net/images/windows-nmap-native-alternative-portqry-gui-ui-web-service-port-scan-screenshot.png
[20:15:24] <Shell> Juliu: yeah but every product manager wants their application to Stand Out so that customers Remember Them
[20:15:25] <rpav> win32 widgets
[20:15:41] <Juliu> LordKalma, the design can of course be modified in Windows, and the application shouold look accordingly. And not look the same all the time
[20:15:44] <LordKalma> win32 widgets is what I mean, not winui, sorry
[20:15:45] <Shell> the solution to this curse is to ban sales people
[20:15:50] <LordKalma> albeit winui is a wrapper for win32 ui
[20:16:05] <LordKalma> I want to write an application and I think I'll give up on having it look native as well
[20:16:05] <Juliu> Shell, yes. And I absolutely hate that. The best GUI elements are the native ones
[20:16:20] <Haohmaru> look at all the UI themes, every one has a "taste"
[20:16:26] <LordKalma> yah, true
[20:16:34] <Haohmaru> and still a ton of people ain't happy with their theme
[20:16:45] <Haohmaru> if they can, they will make more themes
[20:16:52] <cbreak> the true native windows look is the one you get in the old settings application, the new native windows look is the one you get in the new settings application
[20:16:55] <Haohmaru> when that's not enough - more theme engines
[20:17:01] <cbreak> and there are probably several in between
[20:17:11] <LordKalma> I was considering Avalonia or Uno Platform, but yeah, C# doesn't feel ready enough for good x-platform
[20:17:16] <LordKalma> so I'm back at looking at Qt...
[20:17:26] <Juliu> For example I'm currently using HexChat as IRC client on my Windows 7 system, and that looks perfectly natrive. So it can't be that hard, since I had HexChat on Linux as well
[20:17:37] <LordKalma> hahahahah hexchat is anything but native
[20:17:42] <LordKalma> I'm on hexchat, I know
[20:17:50] <LordKalma> hexchat is GTK, and a bad one
[20:17:55] <Juliu> LordKalma, it looks native to me
[20:18:14] <LordKalma> pretty bad eyesight then
[20:18:22] <Juliu> If you say so
[20:18:33] <PJBoy> native gui is whatever you can change with the theme dialog https://mcmw.abilitynet.org.uk/media/public/2021/09/MCMW_Change%20colours%20in%20Windows%207_fig3a-2.png
[20:18:34] <Juliu> Close enough for my taste
[20:18:40] <kalven> you've likely used qt applications without knowing it too
[20:19:00] <Juliu> PJBoy, I agree
[20:19:06] <Haohmaru> it seems hexchat uses gtk
[20:19:11] <LordKalma> yes, I said that
[20:19:27] <Haohmaru> i was busy checking it
[20:19:33] <Juliu> LordKalma, whatever you say, my HexChat looks 100% native to me
[20:19:37] <LordKalma> rant #3: hexchat is shit. Every time I reboot the computer, the first time I use hexchat it fucks up the keyboard
[20:19:48] * Haohmaru gives Juliu some 'o-o'
[20:19:49] <LordKalma> it puts ~ instead of spaces, or whatever, it's random and different
[20:20:06] <Haohmaru> Juliu try mIRC
[20:20:13] <Haohmaru> that's native
[20:20:15] <PJBoy> speaking of which, I think they've removed that colour changer tool in windows now?
[20:20:27] <PJBoy> :<
[20:20:34] <Juliu> LordKalma, I just changed my design in Windows and all HexChat elements changed accordingly. Tell me again it doesn't look native
[20:21:03] <PJBoy> that means we have to edit the .theme files directly now
[20:21:11] <cbreak> hexchat looked terrible on KDE Plasma
[20:21:18] <cbreak> like one of those gnome applications...
[20:21:18] <sigma_> yeh
[20:21:23] <Haohmaru> KDE is terrible
[20:21:24] * Haohmaru runs
[20:21:28] <cbreak> using Konversation now, much better :)
[20:21:37] <Juliu> cbreak, I had Linux Mint before, and it looked good on there as well
[20:21:49] <LordKalma> https://i.gyazo.com/fb0bc600ab68d35b505dd151dee6b19a.png // subtle, but different
[20:21:58] <LordKalma> and MiKTeX uses Qt also anyway
[20:22:42] <cbreak> LordKalma: doesn't even have the same font sizes :)
[20:22:56] <sigma_> Haohmaru: hey men kde is almost perfect
[20:23:29] <Haohmaru> it's perfect when it's not installed on my PC
[20:23:33] <LordKalma> in fact, most GTK applications have obvious tells that you can pick up if you're used to them
[20:23:52] <LordKalma> cough inkscape cough
[20:24:03] <Haohmaru> aww, inkscape
[20:24:18] <cbreak> LordKalma: try gimp... looks so foreign :(
[20:24:27] <Juliu> Haohmaru, I swear that the HexChat on my Windows looks completely native to me
[20:24:39] <Haohmaru> pics or it didn't happen
[20:25:03] <Juliu> lol
[20:25:08] <LordKalma> https://i.gyazo.com/6bc814f2a7bd5925aea23ab1c40630a3.png // Inkscape really has *that* GTK look
[20:25:09] <Juliu> Pics are a scam
[20:25:46] <Haohmaru> but gimp is a specialized program, same for inkscape
[20:25:53] <PJBoy> https://superuser.com/questions/949920/window-color-and-appearance-removed-in-win10 confirmed removed that dialog :(
[20:25:53] <Haohmaru> it's artsy
[20:26:05] <PJBoy> guess even microsoft have given up on native GUI
[20:26:22] <LordKalma> PJBoy, they did. Look at .net MAUI (ALSO FUCK MS FOR STEALING THE MAUI NAME)
[20:26:33] <LordKalma> .net MAUI is MS doing skia hahah
[20:26:43] <PJBoy> :( :( :(
[20:26:59] <Juliu> The GIMP on my Windows system also looks 100% native
[20:27:00] <LordKalma> MAUI uses templated controls iirc, but not native renderes
[20:27:26] <sigma_> Haohmaru: i think you need try other desktop like cinnamon, it was trash. you say wow looks good but 2 min later your ram is full. in linux we have many ram problem on ui
[20:27:27] <PJBoy> GIMP looks fake as shit on mine
[20:27:34] <LordKalma> Juliu, you clearly have poor eyesight, go haave that checked. Or you're a very non-nuanced user
[20:27:37] <kalven> Juliu: ok, what's your point?
[20:27:43] <PJBoy> with its excessive padding in menus
[20:27:46] <Haohmaru> sigma_ i tried most of them.. lxde ftw
[20:28:01] <Juliu> LordKalma, nope, it uses the original Windows menus and buttons and everything, I swear
[20:28:04] <PJBoy> better than most C# apps I've used though
[20:28:08] <Haohmaru> Juliu this is made with wx, so it mostly looks native: https://i.imgur.com/xP5arcD.png
[20:28:12] <Haohmaru> (the IDE)
[20:28:13] <Juliu> kalven, nothing, just saying it looks native
[20:28:14] <LordKalma> Juliu, it doesn't, because it's GTK also iirc
[20:28:35] <Juliu> Haohmaru, yes, looks native
[20:28:37] <PJBoy> now wx looks native
[20:28:45] <PJBoy> for the most part
[20:28:50] <LordKalma> wx IS native
[20:28:53] <LordKalma> (for the most part)
[20:29:01] <LordKalma> wx only fakes controls that a platform doesn't have
[20:29:06] <Juliu> LordKalma, don't know. It looks native to me and behave native and even applies to whatever style I choose in Windows
[20:29:51] <cbreak> LordKalma: last time I checked, wx looked terribly out of place on MacOS
[20:29:59] <cbreak> all the distances between widgets were wrong
[20:30:08] <LordKalma> distances aren't the widgets per-se
[20:30:10] <cbreak> (this was a long time ago... I'd hope they fixed that by now)
[20:30:11] <Haohmaru> cbreak because there are nearly zero mac devs
[20:30:14] <LordKalma> and might use an old library also
[20:30:23] <LordKalma> the latest macos is cocoa or whatever?
[20:30:28] <LordKalma> *macos UI lib
[20:30:34] <cbreak> UIKit? I think?
[20:30:53] <cbreak> I don't really do UI if I can avoid it
[20:30:55] <Haohmaru> cbreak and probably because if you had paid for mac sh*t, you'd probably have money to pay for cue-tea license
[20:31:09] <sigma_> if we have problem in c++ ui , we can't use other language?
[20:31:10] <cbreak> Qt's free
[20:31:16] <PJBoy> mac is always gonna be the bastard child of cross platform
[20:31:20] <cbreak> sigma_: sure you can
[20:31:26] <cbreak> write a C++ library, use from where ever you want
[20:31:27] <Haohmaru> cbreak for closed-source too?
[20:31:37] <cbreak> Haohmaru: sure. As long as you're LGPL compatible
[20:31:46] <Haohmaru> right.. cue-tea.dll
[20:31:50] <Haohmaru> meh
[20:32:12] <Haohmaru> still, very very few mac devs
[20:32:17] <sigma_> so you can make ui with python but in back you are using c++ lib
[20:32:19] <LordKalma> PJBoy, .net MAUI supports macos, but not linux...
[20:32:26] <PJBoy> oh yeah hahaha
[20:32:40] <PJBoy> that's one of the weirder cases
[20:32:55] <cbreak> on linux... what would you even support?
[20:33:00] <cbreak> x11? wayland?
[20:33:04] <cbreak> or qt? gtk?
[20:33:09] <PJBoy> yeah
[20:33:10] <LordKalma> I think there are unofficial bindings for GTK
[20:33:10] <cbreak> or maybe libadwaita?
[20:33:14] <LordKalma> that might be upstreamed
[20:33:28] <LordKalma> xamarin.forms (.net MAUI's parent) had a GTK version
[20:33:32] <cbreak> or ... just start a web server on port 8888 and let the browser deal with it?
[20:33:34] *** Quits: proller (~p@2a02:6b8:0:40c:d672:80ce:1436:e46b) (Ping timeout: 250 seconds)
[20:33:41] <kalven> comparing apples and oranges there
[20:33:42] *** Joins: dextercd (~dexter@2a02:a450:f25d:1:76d4:35ff:fefe:34c)
[20:33:46] <PJBoy> use windows api on windows and browser everywhere else
[20:33:52] <PJBoy> that would be fine by me
[20:34:05] <cbreak> why windows api?
[20:34:12] <PJBoy> because it's good
[20:34:20] <PJBoy> for all those native looks and functions
[20:34:22] <LordKalma> .net MAUI uses UiKit on MacOS, WinUI 3 on windows, not sure what they do on the phones
[20:34:33] <Haohmaru> PJBoy no
[20:34:35] <LordKalma> and there is a GTK unofficial backend
[20:34:36] <PJBoy> other platforms don't matter in that regard
[20:34:39] <Haohmaru> no browser UI sh*t pls
[20:35:01] <PJBoy> mac is expensive to develop for and linux is ugly by default
[20:35:09] <Haohmaru> no, u
[20:35:15] <cbreak> mac is expensive by design
[20:35:18] <Haohmaru> linux can be pimped
[20:35:21] <cbreak> linux is expensive by diversity
[20:35:32] <PJBoy> agreed x2
[20:35:36] <Haohmaru> crapdows is crap
[20:35:38] <LordKalma> +2
[20:36:21] *** Joins: JohnMS (~JohnMS@2a02:a311:a344:9b00:4ecc:6aff:fed0:fdf)
[20:36:33] <rpav> "i may be ugly but you're fat+closed-source and i can customize"
[20:36:50] *** Quits: Youmu (uid129469@user/condy) (Quit: Connection closed for inactivity)
[20:36:50] <Haohmaru> +1 rpav
[20:37:36] <rpav> of course right now i have a tiling wm with OS/2 2.1 colors, but i was feeling a bit nostalgic
[20:38:09] <sigma_> yeh, becuase that one i just use linux and android. i want change theme
[20:39:25] <LordKalma> I wish .net MAUI had the gtk target officially supported
[20:39:33] <LordKalma> MS <3 linux my ass
[20:39:51] *** Quits: kraa (~kraa@107-190-7-216.cpe.teksavvy.com) (Ping timeout: 256 seconds)
[20:43:04] *** Joins: kraa (~kraa@107-190-7-216.cpe.teksavvy.com)
[20:44:05] <Haohmaru> !fact
[20:44:06] <nolyc> Haohmaru: Virtual functions are provided for several numeric types.
[20:44:16] <Haohmaru> huh?
[20:44:20] <Juliu> Bye
[20:44:30] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:25c4:f0c4:39d4:7801) (Quit: Quit)
[20:44:44] <Haohmaru> <success.jpg>
[20:45:13] <Haohmaru> the word "scam" is forbidden
[20:46:32] <sprout> gnome2 had a lot of pretty eye-candy at the end of that release
[20:46:39] <sprout> uh?
[20:47:03] <sigma_> that was a fact?
[20:47:05] <sprout> or was that gnome1? we're on 3 now right?
[20:47:10] <sprout> unsure
[20:47:32] <Haohmaru> the current gnome is ugly, i figured it aims to look like crApple UIs
[20:47:35] <Haohmaru> that explains it
[20:47:58] <sprout> yah sure,  wobbly windows flexing in all directions and all kinds of eye candy when switching desktops
[20:48:04] <sprout> kind-of miss that
[20:48:38] <Haohmaru> when i was young, i liked to pimp-up the UIs, customize everything..
[20:49:00] <Haohmaru> when you have to actually use the computer for a real purpose - most of that sh*t gets in the way
[20:49:16] <Haohmaru> thus i turn it all off and go for something sane, simple, and fast
[20:49:18] <sprout> my mac has some wobbliness it seems.  just checked
[20:49:20] <LordKalma> everything sucks
[20:49:34] <Haohmaru> especially KDE
[20:49:57] <LordKalma> I think I'll use Qt Quick...
[20:50:03] <Haohmaru> but i mean.. what sux a lot is those gtk3 scrollbars
[20:50:27] <Haohmaru> they made their way into lxde
[20:52:00] <sigma_> LordKalm: the world is suck men, think we have bilion*bilion stars and planets in the world but we are born in earth and we fight for money :(
[20:52:08] <LordKalma> deep
[20:52:59] <Haohmaru> probably those other folks on that other planet are complaining about the same thing right now
[20:53:55] <LordKalma> idk what to do, it's like, I'm one of those people that get really paralyzed by the "this isn't perfect, literally unusable"
[20:54:35] <Haohmaru> example?
[20:54:54] <kalven> hexchat
[20:55:15] <LordKalma> Haohmaru, really like Qt, and that sort of stuff
[20:55:15] <sigma_> but im interesting , why ? i live for anwser this qusetion
[20:55:33] <LordKalma> I don't have very good mental health :)
[20:55:58] <sigma_> LordKalma: when your are programer
[20:56:01] <LordKalma> anxiety, prodigy child faced with mediocrity as college student, you know the deal hahah
[20:56:06] <LordKalma> sigma_, I'm a physicist
[20:56:45] <LordKalma> or telecom engineer, depending on if you're asking about my diploma or what I actually do haha
[20:56:46] <sigma_> that doesnt matter , you always slove problem like us
[20:56:56] *** Quits: Haohmaru (~Haohmaru@195.24.53.110) ()
[20:57:11] *** Joins: kaph (~kaph@net-2-47-208-144.cust.vodafonedsl.it)
[20:58:26] <PJBoy> http://www.eelis.net/c++draft/category.numeric.general btw
[20:58:44] <Alipha> LordKalma: the backlog is so long, I haven't even begun to read it :-(
[20:59:00] <PJBoy> keep it that way
[20:59:15] <LordKalma> Alipha, it's about the subjects you literally told me you ignore
[20:59:16] <LordKalma> so ignore it
[21:00:22] <rpav> `using` of ctors is apparently weird
[21:03:02] *** Joins: zen_coder (~zen_coder@2a02:8109:a280:2d8d:145:48aa:c4b6:f056)
[21:04:36] <PJBoy> would disagree
[21:09:07] <rpav> Â¯\_(ãƒ„)_/Â¯
[21:10:13] <rpav> <CRTP> struct S { int X; }; <T> struct F : S<F<T>> { using X = S<F<T>>; using X::X; };
[21:12:13] <PJBoy> at first that looks like a conversation between CRTP and T
[21:12:29] *** Joins: proller (~p@2a02:6b8:0:40c:881b:ea30:b0df:3b74)
[21:13:30] *** Quits: seninha (~seninha@user/seninha) (Remote host closed the connection)
[21:13:52] *** Quits: magla (~gelignite@55d4381b.access.ecotel.net) (Ping timeout: 250 seconds)
[21:13:58] *** Joins: geli (~gelignite@55d4fbf8.access.ecotel.net)
[21:16:02] *** Quits: sigma_ (~sigma@164.215.224.240) (Ping timeout: 240 seconds)
[21:20:27] <great_taste> I've got to the conclusion that certain problems are better solved by trial and error plus patience... if you try to actually understand it you go absolutely insane and get nothing done, lol
[21:21:05] <rpav> actually i guess the first `using` will always shadow the parent-thing anyway, so basically you hypothetically have a problem requiring guaranteed-unique symbols, but i'm not sure how likely it is to be encountered in practice
[21:21:45] <rpav> great_taste: experimenting to get a "sample" of the space is definitely helpful
[21:21:57] <rpav> at some point you want to achieve understanding or you're likely to be ongoingly-frustrated
[21:26:22] *** Joins: xkuru (~xkuru@user/xkuru)
[21:27:55] <PJBoy> not sure what kinds of C++ problems can be solved by trial and error
[21:29:42] <PJBoy> I reckon C++20 is the most code breaking release we've ever had
[21:30:01] *** Joins: utoneq (~utoneq@gateway/tor-sasl/utoneq)
[21:33:38] <cbreak> C++98
[21:35:19] <PJBoy> <_<
[21:37:34] <comrad> c++ needs a new release to break things?
[21:39:14] <JohnMS> That worked out well for Python. :/
[21:41:07] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[21:41:15] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[21:41:15] *** ChanServ sets mode: +v npaperbot
[21:46:15] *** Joins: kenanmarasli (~kenanmara@user/kenanmarasli)
[21:51:00] *** Quits: utoneq (~utoneq@gateway/tor-sasl/utoneq) (Ping timeout: 276 seconds)
[22:00:30] *** Quits: kenanmarasli (~kenanmara@user/kenanmarasli) (Remote host closed the connection)
[22:00:54] *** Joins: kenanmarasli (~kenanmara@user/kenanmarasli)
[22:01:59] *** Joins: Tokamak (~Tokamak@172.58.188.35)
[22:02:24] *** Quits: markong (~kvirc@213.146.188.203) (Ping timeout: 250 seconds)
[22:04:01] *** Quits: ashafq (~ashafq@pool-96-237-238-252.bstnma.fios.verizon.net) (Remote host closed the connection)
[22:04:18] *** Joins: ashafq (~ashafq@pool-96-237-238-252.bstnma.fios.verizon.net)
[22:04:39] *** Joins: seninha (~seninha@user/seninha)
[22:05:30] *** Joins: chozorho (~chozorho@2601:146:300:c30::29ed)
[22:08:17] *** Quits: proller (~p@2a02:6b8:0:40c:881b:ea30:b0df:3b74) (Ping timeout: 240 seconds)
[22:09:28] <LordKalma> I've watched a talk where basically the conclusion that breaking changed hinder adoption by more or less 10 eyars
[22:09:31] <LordKalma> years
[22:10:38] <JohnMS> Seems reasonably so.
[22:11:57] <LordKalma> breaking changes*
[22:14:19] *** Quits: ashafq (~ashafq@pool-96-237-238-252.bstnma.fios.verizon.net) (Ping timeout: 256 seconds)
[22:14:58] *** Joins: ashafq (~ashafq@pool-96-237-238-252.bstnma.fios.verizon.net)
[22:15:19] *** Quits: zen_coder (~zen_coder@2a02:8109:a280:2d8d:145:48aa:c4b6:f056) (Quit: Konversation terminated!)
[22:16:18] *** Joins: jehelset (~jeh@2001:4644:4144:0:e2d4:e8ff:fedf:f070)
[22:18:42] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:25c4:f0c4:39d4:7801)
[22:32:02] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:e9a6:1557:3796:678c) (Ping timeout: 240 seconds)
[22:38:58] *** Joins: elb0w (~elb0w@pool-98-109-49-7.nwrknj.fios.verizon.net)
[22:40:22] <elb0w> Hi, if I wanted to build a rest service in CPP is there a library thats popular?
[22:40:35] <PJBoy> bro
[22:40:43] <LordKalma> you're in for a world of pain
[22:40:46] <PJBoy> clang-tidy can convert iterator loops to range-for loops
[22:40:49] <PJBoy> that's top tier
[22:41:04] <LordKalma> haha recouped the faith you lost in the morning
[22:41:10] <PJBoy> hahaha
[22:41:25] <elb0w> LordKalma: Thats fine, im wanting to learn C++ better anyway
[22:41:28] <PJBoy> I'm impressed
[22:43:45] *** Quits: JohnMS (~JohnMS@2a02:a311:a344:9b00:4ecc:6aff:fed0:fdf) (Quit: Konversation terminated!)
[22:44:19] <PJBoy> for rest there's https://github.com/Stiffstream/restinio
[22:44:32] <elb0w> PJBoy: just found that one
[22:44:40] <PJBoy> seems decently popular and decently usable at a glance
[22:44:41] <elb0w> thanks guess ill take a look here
[22:44:57] <PJBoy> it's on conan and vcpkg, so it's not gonna be a complete pain to build
[22:45:19] <PJBoy> and it's BSD licensed
[22:45:24] <PJBoy> good stuff all round
[22:46:08] <elb0w> looks pretty nice from docs, thanks again
[22:46:49] <PJBoy> although note https://github.com/Stiffstream/restinio/issues/148
[22:47:34] <elb0w> ðŸ™ƒ
[22:49:28] *** Joins: williampiv (~williampi@ip24-254-86-223.sb.sd.cox.net)
[22:49:37] <elb0w> im trying hard to not do this in python so I can learn more c++ but maybe thats silly
[22:51:46] *** Joins: sbrothy (~sbrothy@192038134088.mbb.telenor.dk)
[22:51:57] <sbrothy> Hi. I'm a little rusty so bear with me please. I guess this is really a compiler-related question but again.... If I include a bunch of headers via a precompiled header I don't actually need to link against the APIs unless I actually call them do I?
[22:55:58] <rpav> right
[22:56:20] <rpav> (assuming including the headers doesn't do something that requires linkage)
[22:57:36] <CarloWood> sbrothy: it is unrelated to being precompiled. If you just include all those same headers at the start of the current TU, that's the same.
[22:59:50] <CarloWood> And like rpav said, it will work until the linker complains that it can't find something, which is will only do if you include *code* that calls undefined functions or uses undefined global/external variables (ugh). So one or more headers would have to cause your exe to grow (by "generating" code).
[22:59:53] <sbrothy> ok forget the pch thingy. if i include, say boost/asio.hpp but don't use it, do I still have to link against boost?
[23:00:36] <rpav> no idea, consult its docs and/or try and see? ;)
[23:00:41] <CarloWood> That is usually unlikely - for a header - but theoretically you could have an inline function that calls external API, which for some reason is instantiated (as not inlined) without that you actually call it....
[23:00:43] <rpav> if it links you should be good right
[23:02:02] <CarloWood> I can imagine there are compiler/linker flags to get it to work if it doesn't work. But this isn't anything that is guaranteed by the C++ standard or something like that.
[23:02:48] *** Joins: AmR (~AmREiSa@41.36.185.103)
[23:03:07] <CarloWood> Ie, if your header contains:  void lib_API();  inline void f() { lib_API(); }  and you never call f(), then you might or might not get generated code for f() somewhere. If you do, then I think it won't link.
[23:03:55] <rpav> i don't think that's an issue, but if you physically make an object that references something requiring linkage there might be
[23:04:17] <rpav> `struct V { V(); }; struct S { static inline V; };` maybe
[23:04:24] <CarloWood> But I am pretty sure (seems very logical anyway) that there is some compiler flag to tell it to never instantiate a function that isn't called.
[23:05:21] <rpav> well it's more that the linker won't ever look for it, becuase it's never actually referenced .. i'm not 100% sure how that would work, but i'm not sure i'd be surprised either way
[23:07:03] *** Joins: Msandoy (~Msandoy@telia-590873-165.connect.netcom.no)
[23:07:35] *** Quits: kaph (~kaph@net-2-47-208-144.cust.vodafonedsl.it) (Ping timeout: 256 seconds)
[23:08:02] *** Quits: Msandoy (~Msandoy@telia-590873-165.connect.netcom.no) (Quit: Leaving)
[23:08:25] *** Joins: Msandoy (~Msandoy@telia-590873-165.connect.netcom.no)
[23:09:10] *** Quits: williampiv (~williampi@ip24-254-86-223.sb.sd.cox.net) (Quit: williampiv)
[23:09:26] *** Quits: Msandoy (~Msandoy@telia-590873-165.connect.netcom.no) (Client Quit)
[23:10:04] *** Quits: great_taste (~great_tas@user/great-taste/x-5798414) (Quit: Client closed)
[23:10:20] *** Joins: Msandoy (~Msandoy@telia-590873-165.connect.netcom.no)
[23:14:23] *** Joins: great_taste (~great_tas@user/great-taste/x-5798414)
[23:15:10] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:e9a6:1557:3796:678c)
[23:15:33] *** Joins: AbleBacon (~AbleBacon@user/AbleBacon)
[23:17:28] *** Quits: Msandoy (~Msandoy@telia-590873-165.connect.netcom.no) (Read error: Connection reset by peer)
[23:22:29] *** Quits: elb0w (~elb0w@pool-98-109-49-7.nwrknj.fios.verizon.net) (Quit: leaving)
[23:22:32] *** Quits: sbrothy (~sbrothy@192038134088.mbb.telenor.dk) (Ping timeout: 240 seconds)
[23:23:18] *** Joins: kaph (~kaph@net-2-47-208-144.cust.vodafonedsl.it)
[23:26:09] *** Joins: proller (~p@2a02:6b8:b081:8014::1:1e)
[23:26:34] <veverak> is there soemthing like C++ jobs channel?
[23:32:12] <rpav> wasn't jobs more ObjC
[23:32:14] * rpav runs
[23:32:56] <rpav> veverak: if you're looking for a job, likely looking for postings on the major sites is your best bet, rather than obscure irc things, but i dunno .. maybe also the cpp slack
[23:33:50] *** Quits: jsbach (~jsbach@2a01:c23:613f:6700:91c6:e70b:f7c4:5ea9) (Ping timeout: 250 seconds)
[23:34:15] <veverak> well, I got my first job on irc
[23:34:17] <veverak> :D
[23:34:20] <rpav> nice
[23:34:22] <veverak> (just wanted to give it a try)
[23:34:25] <rpav> turn of the century?
[23:34:31] <veverak> 2014
[23:34:35] <rpav> damn
[23:34:59] <veverak> anyway, I am close friend with linkedin and reddit/cpp
[23:37:03] *** Joins: Kerr (~Kerr@2601:602:ce01:1f0:d0b9:9f3c:59d9:5e72)
[23:44:05] *** Joins: williampiv (~williampi@ip24-254-86-223.sb.sd.cox.net)
[23:45:55] *** Quits: cart_man (~rynot@host-78-144-125-214.as13285.net) (Quit: Konversation terminated!)
[23:47:54] *** Quits: williampiv (~williampi@ip24-254-86-223.sb.sd.cox.net) (Client Quit)
[23:50:38] *** Parts: blackout69 (~blackout6@net-109-117-245-237.cust.vodafonedsl.it) ()
[23:51:48] <PJBoy> I take back what I said about clang-tidy turning iterator loops into range-for loops D:
[23:52:19] <PJBoy> it worked in a few of the instances
[23:52:31] <PJBoy> but has failed to convert `*it` to `it` in others
[23:52:43] <PJBoy> also the name `it` doesn't make sense anymore
[23:53:03] <LordKalma> it's the placeholder it can come up with I guess
[23:53:11] <LordKalma> what version of clangd do you have, again?
[23:53:16] <PJBoy> well `it` was the previous name
[23:53:22] <PJBoy> completely fair that it keeps the same name and all
[23:53:46] <PJBoy> clang-tidy is v10.0.0
[23:53:51] <LordKalma> fuck that shit
[23:53:52] <LordKalma> get 13
[23:54:17] <PJBoy> I can't
[23:54:19] <PJBoy> I'm on linux
[23:55:39] <LordKalma> you can download binaries...
[23:56:04] <LordKalma> https://github.com/llvm/llvm-project/releases/tag/llvmorg-13.0.0
[23:56:13] <PJBoy> meh
[23:56:14] <LordKalma> clang-tools-extra-13.0.0.src.tar.xz // no binaries for this? weird
[23:56:22] <PJBoy> yeah of course
[23:56:24] <PJBoy> it's linux
[23:56:25] <LordKalma> PJBoy, don't complain about something so old then
[23:56:35] <PJBoy> hey man
[23:56:35] <LordKalma> really, you need a clag-tidy 13 binary
[23:56:55] <PJBoy> this ain't for personal use
[23:57:03] <LordKalma> but the clang-tools src package is 2mb and it has a cmake file...
[23:57:05] <PJBoy> I use whatever the latest version of whatever I have in the repos are
[23:57:06] <hnOsmium0001[m]> IIRC llvm's prebuilt binaries are available only on their website
[23:57:24] <LordKalma> hnOsmium0001[m], the releases pages tells you to go to GH
[23:57:36] <Hello71> 20:27 <LordKalma> but the clang-tools src package is 2mb and it has a cmake file...
[23:57:38] <PJBoy> I assume I don't want my clang-tidy to be ahead of my clang compiler
[23:57:40] <Hello71> it also won't build against llvm 10
[23:57:55] <PJBoy> ahaha
[23:57:59] <LordKalma> PJBoy, the analyzer should be standalone, no?
[23:58:06] <LordKalma> at least clangd you can download *just* clangd
[23:58:24] <LordKalma> https://github.com/clangd/clangd/releases/tag/13.0.0
[23:58:26] <PJBoy> it could try and fix my code in a way that produces code that clang 10 can't compile
[23:59:02] <PJBoy> although tbf lots of these fixes do cause the code not to compile
[23:59:02] *** Joins: jsbach (~jsbach@2a01:c23:613f:6700:1138:8625:6687:4d6c)
[23:59:04] <hnOsmium0001[m]> LordKalma: seems like they have changed it then
[23:59:16] <PJBoy> checking the code still builds would be a great QoL upgrade for clang-tidy
[23:59:27] <hnOsmium0001[m]> LordKalma: re clangd: I think it's also built against the whole LLVM, it just that the clangd people have bothered to make prebuilt bianries
[23:59:54] <LordKalma> since clangd has --tidy let me see if the binaries zip has -tidy on it
