[00:07:49] *** Joins: amahl (~amahl@dsl-jklbng12-54fbca-64.dhcp.inet.fi)
[00:09:29] *** Quits: tristero (~nobody@user/tristero) (Quit: WeeChat 3.0)
[00:12:27] *** Joins: dr0n (~nabromov@94.11.23.235)
[00:15:43] *** Quits: arinov_ (~arinov@95.70.154.214) (Ping timeout: 256 seconds)
[00:16:03] *** Joins: jjonah (~jjonah@p200300d5d723c400dea632fffeb3342f.dip0.t-ipconnect.de)
[00:19:35] *** Quits: arcatech (~arcatech@user/arcatech) (Remote host closed the connection)
[00:20:13] *** Joins: arcatech (~arcatech@user/arcatech)
[00:23:30] *** Quits: arcatech (~arcatech@user/arcatech) (Client Quit)
[00:23:49] *** Joins: mountolive (~mountoliv@188.240.132.112)
[00:27:53] *** Quits: be3uykpy (~be3uykpy@141.226.9.247) (Quit: Leaving)
[00:30:39] *** Joins: arcatech (~arcatech@user/arcatech)
[00:31:55] *** Quits: Snyp (~rksht@49.207.193.103) (Quit: WeeChat 3.2)
[00:34:19] *** Joins: s-video (~s-video@2601:196:4b00:e70:5198:971e:1589:d1d1)
[00:35:01] *** Quits: arcatech (~arcatech@user/arcatech) (Client Quit)
[00:43:20] *** Joins: mikoto-chan (~mikoto-ch@ip-213-49-189-31.dsl.scarlet.be)
[00:45:46] *** Joins: tristero (~nobody@user/tristero)
[00:51:32] *** Quits: shka (~herr@109.231.62.239) (Ping timeout: 265 seconds)
[00:56:05] *** Quits: mrig (~mrig@user/mrig) (Ping timeout: 268 seconds)
[00:56:16] *** Joins: mrig (~mrig@user/mrig)
[01:01:41] *** Joins: CoolerX (~CoolerX@user/coolerx)
[01:01:58] <CoolerX> Hi
[01:02:04] <CoolerX> is there a way to ignore the vendor directory?
[01:02:17] <CoolerX> there's a vendor directory from ruby and bundler
[01:02:48] <CoolerX> unfortunately golang picks it up
[01:03:02] <j416> don't put a go project inside a ruby project?
[01:03:10] <j416> subdirectory would work.
[01:03:34] <j416> iirc.
[01:03:34] <CoolerX> the ruby project is on a different branch (gh-pages)
[01:03:46] <j416> then what's the issue?
[01:04:09] <CoolerX> the vendor directory is not added to the repo, it's ignored using .gitignore
[01:04:28] <j416> delete it, problem solved?
[01:04:42] <ikke> GO111MODULE=on
[01:04:59] <j416> ikke: still would read the vendor dir, no?
[01:05:07] <CoolerX> ikke, do I add that to .bashrc?
[01:05:09] <ikke> not if it's set to on afaik
[01:05:27] <j416> go modules support vendoring.
[01:05:54] <CoolerX> I am trying to do this is in a way that will work for all the people working on the repo
[01:06:03] <j416> perhaps it ignores it if there's no vendor/modules.txt. never tried.
[01:06:15] <CoolerX> if I add GO111MODULE=on to .bashrc that would just affect me
[01:06:26] <CoolerX> it wouldn't work for others who are developing on it
[01:06:36] <j416> commit the vendor dir in the other branch?
[01:06:53] <CoolerX> j416, hmm I don't think you are supposed to do that
[01:06:59] <j416> ok
[01:07:06] <j416> then why vendor?
[01:07:07] <CoolerX> it's a large folder
[01:07:14] <CoolerX> j416, I didn't set it
[01:07:21] <CoolerX> it was like that
[01:07:31] <CoolerX> it was like that already when I started working on the repo
[01:11:16] <b0nn> CoolerX: curious, what problems is the vendor directory bringing ?
[01:11:37] <b0nn> I mean, is the go build trying to find stuff in there that's not existing?
[01:12:38] *** Joins: thriqon (~thriqon@HSI-KBW-46-223-162-105.hsi.kabel-badenwuerttemberg.de)
[01:12:50] *** Quits: pieguy128 (~pieguy128@bas1-montreal02-65-92-163-194.dsl.bell.ca) (Quit: ZNC 1.8.2 - https://znc.in)
[01:13:24] *** Joins: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-57-65-92-163-194.dsl.bell.ca)
[01:13:43] *** Joins: MrFantastik (~Thunderbi@rrcs-184-74-43-235.nys.biz.rr.com)
[01:23:36] *** Quits: b0rf (~shaun@121-44-16-32.tpgi.com.au) (Quit: Leaving)
[01:26:00] <CoolerX> b0nn, mainly vscode
[01:26:05] <CoolerX> it breaks intellisense
[01:26:16] <CoolerX> but also build fails
[01:26:26] <CoolerX> it says something like could not find module
[01:26:43] <CoolerX> after I delete the vendor directory everything works as expected
[01:26:56] <llorllale> Hello. I've got a tree structure made up of pure data. Nodes can be of different types. All nodes have common properties but some types have a few extra properties. What would be the "Golang way" of implementing this tree?
[01:27:54] <llorllale> Interfaces doesn't feel like a good fit for this use case (pure data).
[01:28:45] <llorllale> (which also means I'm not keen on adding methods)
[01:29:17] <llorllale> I'm currently leaning towards a single struct model with an `Extra map[string]interface{}` field. Wondering if others have any thoughts on this?
[01:29:33] *** Quits: Kane (~Kane@2a01:e34:ee89:5d90:1d6e:39d7:212d:b3b) (Quit: Leaving)
[01:31:25] <CoolerX> llorllale, yeah and alternatively you can embed
[01:31:40] <CoolerX> you can embed your common struct in derived structs
[01:36:44] *** Quits: andlabs (~andlabs@71.190.119.164) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[01:37:18] *** Quits: mikoto-chan (~mikoto-ch@ip-213-49-189-31.dsl.scarlet.be) (Ping timeout: 272 seconds)
[01:40:33] *** Joins: andlabs (~andlabs@71.190.119.164)
[01:40:37] <llorllale> CoolerX: the tree structure's declared type would then have to be `interface{}`...
[01:40:47] *** Quits: alm (~alm@user/alm) (Ping timeout: 252 seconds)
[01:41:46] <CoolerX> llorllale, yeah...
[01:42:19] *** Joins: alm (~alm@user/alm)
[01:43:08] <b0nn> well, no, Node struct{ embed; Data interface{}}
[01:43:27] <b0nn> hrm, that would exclude the extra methods though
[01:44:05] <b0nn> oh, no, the Data will be the type with the extra methods
[01:44:58] *** Quits: thriqon (~thriqon@HSI-KBW-46-223-162-105.hsi.kabel-badenwuerttemberg.de) (Ping timeout: 246 seconds)
[01:45:17] <b0nn> So it would be Node{ parent Node; ChildLeft Node; ChildRight Node; Data interface}
[01:46:27] <llorllale> b0nn: something like your second suggestion yes..
[01:47:10] <b0nn> That's how I've written trees thus far
[01:47:40] <b0nn> When generics come along Data will change to Data [any] I think
[01:49:25] <llorllale> Having `Data` be an `interface{}` is nice. The producer can guarantee that `Data` is of a certain type depending on the type of the node.
[01:49:37] <llorllale> Which adds a little more type safety than a map[string]interface{}
[01:53:46] *** Quits: MrFantastik (~Thunderbi@rrcs-184-74-43-235.nys.biz.rr.com) (Ping timeout: 272 seconds)
[01:55:09] *** Joins: dany74q1 (~dany74q@IGLD-84-229-190-86.inter.net.il)
[01:56:36] <b0nn> Having a Node struct means you can have fields like Colour (Red/Black trees) and Key (for sorting)
[01:56:56] *** Quits: dany74q1 (~dany74q@IGLD-84-229-190-86.inter.net.il) (Client Quit)
[01:57:58] <b0nn> I then (normally) have map[key]*Node indexes for O(1) search (rather than O(log n) but that adds to the memory consumption (O(n) for each 'index')
[02:03:52] *** Joins: kodah (~kodah@user/kodah)
[02:08:29] *** Quits: paulgrmn (~paulgrmn@user/paulgrmn) (Ping timeout: 256 seconds)
[02:10:03] *** Quits: __bluebell__ (~le@194.110.115.45) (Quit: Konversation terminated!)
[02:11:30] *** Quits: martinkennelly (~martinken@84.203.21.166) (Ping timeout: 272 seconds)
[02:12:38] <Tv_> llorllale: i would encourage a stronger type than interface{}. read examples of ASTs, they match what you're describing.
[02:13:17] <Tv_> e.g. https://pkg.go.dev/go/ast#Node
[02:13:34] *** Joins: martinkennelly (~martinken@84.203.21.166)
[02:22:43] *** Joins: Garb0 (~Garb0@user/garb0)
[02:24:47] *** Joins: Snyp (~rksht@49.207.193.103)
[02:26:27] *** Joins: arinov_ (~arinov@178.240.158.75)
[02:30:23] *** Joins: mud (~mud@user/kadoban)
[02:31:52] *** Quits: dany74q (~dany74q@IGLD-84-229-190-86.inter.net.il) (Ping timeout: 246 seconds)
[02:31:55] *** Joins: arcatech (~arcatech@user/arcatech)
[02:32:44] *** Joins: spudly[m] (~spudly@2001:470:69fc:105::18)
[02:34:35] *** Joins: meain (~meain@2001:470:69fc:105::2db)
[02:34:35] *** Joins: jai (~darkapex@user/darkapex)
[02:34:35] *** Joins: worr (~worr@2001:470:69fc:105::78c)
[02:34:35] *** Joins: mrjumper[m] (~mr-jumper@2001:470:69fc:105::7f1)
[02:34:35] *** Joins: archwizard (~archwizar@2001:470:69fc:105::929)
[02:34:35] *** Joins: phoenix[m] (~phoenixma@2001:470:69fc:105::f9b)
[02:34:35] *** Joins: kadoban (~kadoban@user/kadoban)
[02:34:35] *** Joins: mambang[m] (~mambang@user/mambang)
[02:34:35] *** Joins: blakeorwhatever[ (~blakeorwh@2001:470:69fc:105::340e)
[02:34:35] *** Joins: hsiktas[m] (~hsiktasma@2001:470:69fc:105::30d4)
[02:34:35] *** Joins: psydroid (~psydroid@user/psydroid)
[02:34:35] *** Joins: geoah (~geoah@2001:470:69fc:105::1d59)
[02:34:48] *** Joins: TcM1911 (~tcm1911@2001:470:69fc:105::3649)
[02:34:48] *** Joins: bat[m] (~batdice-t@2001:470:69fc:105::19b8)
[02:34:49] *** Joins: ubh (~ubh@2001:470:69fc:105::852)
[02:35:50] *** Quits: SincereFox (uid337158@user/sincerefox) (Quit: Connection closed for inactivity)
[02:41:29] *** Quits: psydroid (~psydroid@user/psydroid) (Quit: node-irc says goodbye)
[02:41:32] *** Quits: spudly[m] (~spudly@2001:470:69fc:105::18) (Quit: node-irc says goodbye)
[02:41:41] *** Quits: jai (~darkapex@user/darkapex) (Quit: node-irc says goodbye)
[02:41:43] *** Quits: meain (~meain@2001:470:69fc:105::2db) (Quit: node-irc says goodbye)
[02:41:44] *** Quits: hsiktas[m] (~hsiktasma@2001:470:69fc:105::30d4) (Quit: node-irc says goodbye)
[02:41:48] *** Quits: kadoban (~kadoban@user/kadoban) (Quit: node-irc says goodbye)
[02:41:50] <Anderson-D> Is it possible to populate `type Bar struct { A int; B int; C int; D int; E int }`  with values from some other `type Foo { A int; B int; C int }` without multiple assignments?
[02:41:51] *** Quits: worr (~worr@2001:470:69fc:105::78c) (Quit: node-irc says goodbye)
[02:42:01] *** Quits: archwizard (~archwizar@2001:470:69fc:105::929) (Quit: node-irc says goodbye)
[02:42:03] *** Joins: spudly[m] (~spudly@2001:470:69fc:105::18)
[02:42:13] *** Quits: mambang[m] (~mambang@user/mambang) (Quit: node-irc says goodbye)
[02:42:16] *** Quits: geoah (~geoah@2001:470:69fc:105::1d59) (Quit: node-irc says goodbye)
[02:42:17] *** Joins: meain (~meain@2001:470:69fc:105::2db)
[02:42:30] *** Joins: jai (~darkapex@user/darkapex)
[02:42:33] <Anderson-D> I find myself writing stuff like `var bar Bar = {A: foo.A, B: foo.B, C: foo.C}` etc
[02:42:45] *** Joins: worr (~worr@2001:470:69fc:105::78c)
[02:42:45] *** Joins: archwizard (~archwizar@2001:470:69fc:105::929)
[02:42:45] *** Joins: kadoban (~kadoban@user/kadoban)
[02:42:48] *** Quits: blakeorwhatever[ (~blakeorwh@2001:470:69fc:105::340e) (Quit: node-irc says goodbye)
[02:42:58] *** Joins: mambang[m] (~mambang@user/mambang)
[02:43:10] *** Joins: blakeorwhatever[ (~blakeorwh@2001:470:69fc:105::340e)
[02:43:10] *** Joins: hsiktas[m] (~hsiktasma@2001:470:69fc:105::30d4)
[02:43:10] *** Joins: psydroid (~psydroid@user/psydroid)
[02:43:25] *** Quits: phoenix[m] (~phoenixma@2001:470:69fc:105::f9b) (Quit: node-irc says goodbye)
[02:43:26] *** Quits: mrjumper[m] (~mr-jumper@2001:470:69fc:105::7f1) (Quit: node-irc says goodbye)
[02:43:29] *** Joins: geoah (~geoah@2001:470:69fc:105::1d59)
[02:44:16] *** Quits: TcM1911 (~tcm1911@2001:470:69fc:105::3649) (Quit: node-irc says goodbye)
[02:44:17] *** Quits: bat[m] (~batdice-t@2001:470:69fc:105::19b8) (Quit: node-irc says goodbye)
[02:44:17] *** Quits: ubh (~ubh@2001:470:69fc:105::852) (Quit: node-irc says goodbye)
[02:45:56] *** Quits: CoolerX (~CoolerX@user/coolerx) (Quit: Leaving)
[02:49:24] *** Joins: paulgrmn (~paulgrmn@user/paulgrmn)
[02:49:51] *** Quits: s-video (~s-video@2601:196:4b00:e70:5198:971e:1589:d1d1) (Ping timeout: 256 seconds)
[02:50:32] *** Joins: mrlemke (~mrlemke@208.74.105.200)
[02:50:47] *** Joins: s-video (~s-video@2601:196:4b00:e70:5198:971e:1589:d1d1)
[02:52:15] *** Joins: MrFantastik (~Thunderbi@cpe-69-204-101-67.buffalo.res.rr.com)
[02:52:25] *** Quits: jai (~darkapex@user/darkapex) (Read error: Connection reset by peer)
[02:52:25] *** Quits: psydroid (~psydroid@user/psydroid) (Read error: Connection reset by peer)
[02:52:26] *** Quits: hsiktas[m] (~hsiktasma@2001:470:69fc:105::30d4) (Remote host closed the connection)
[02:52:26] *** Quits: kadoban (~kadoban@user/kadoban) (Read error: Connection reset by peer)
[02:52:26] *** Quits: meain (~meain@2001:470:69fc:105::2db) (Read error: Connection reset by peer)
[02:52:26] *** Quits: geoah (~geoah@2001:470:69fc:105::1d59) (Remote host closed the connection)
[02:52:26] *** Quits: archwizard (~archwizar@2001:470:69fc:105::929) (Write error: Connection reset by peer)
[02:52:27] *** Quits: worr (~worr@2001:470:69fc:105::78c) (Remote host closed the connection)
[02:52:28] *** Quits: mambang[m] (~mambang@user/mambang) (Remote host closed the connection)
[02:52:29] *** Quits: spudly[m] (~spudly@2001:470:69fc:105::18) (Remote host closed the connection)
[02:52:36] *** Quits: blakeorwhatever[ (~blakeorwh@2001:470:69fc:105::340e) (Remote host closed the connection)
[02:54:23] *** Quits: paulgrmn (~paulgrmn@user/paulgrmn) (Ping timeout: 256 seconds)
[02:56:31] *** Quits: martinkennelly (~martinken@84.203.21.166) (Quit: Leaving)
[02:57:02] *** Quits: MrFantastik (~Thunderbi@cpe-69-204-101-67.buffalo.res.rr.com) (Remote host closed the connection)
[02:57:48] *** Joins: spudly[m] (~spudly@2001:470:69fc:105::18)
[02:57:59] <Tv_> Anderson-D: this is your clue to not have two near-identical but different data types...
[02:58:00] *** Joins: meain (~meain@2001:470:69fc:105::2db)
[02:58:16] <Tv_> i'm strongly in the "that *should* be a code smell" camp
[02:58:16] *** Joins: ubh (~ubh@2001:470:69fc:105::852)
[02:58:16] *** Joins: jai (~darkapex@user/darkapex)
[02:58:17] *** Joins: worr (~worr@2001:470:69fc:105::78c)
[02:58:29] *** Joins: mrjumper[m] (~mr-jumper@2001:470:69fc:105::7f1)
[02:58:29] *** Joins: archwizard (~archwizar@2001:470:69fc:105::929)
[02:58:31] <Anderson-D> Tv_: I get your point. But it's what gorm wants :]
[02:58:40] <Tv_> ah, yes, an ORM. enjoy.
[02:58:41] *** Joins: phoenix[m] (~phoenixma@2001:470:69fc:105::f9b)
[02:58:42] *** Joins: kadoban (~kadoban@user/kadoban)
[02:58:44] <Anderson-D> Haha
[02:58:55] *** Joins: TcM1911 (~tcm1911@2001:470:69fc:105::3649)
[02:59:09] *** Joins: bat[m] (~batdice-t@2001:470:69fc:105::19b8)
[02:59:09] *** Joins: mambang[m] (~mambang@user/mambang)
[02:59:09] *** Joins: blakeorwhatever[ (~blakeorwh@2001:470:69fc:105::340e)
[02:59:09] *** Joins: hsiktas[m] (~hsiktasma@2001:470:69fc:105::30d4)
[02:59:09] *** Joins: psydroid (~psydroid@user/psydroid)
[02:59:10] *** Joins: geoah (~geoah@2001:470:69fc:105::1d59)
[02:59:29] <Anderson-D> Anyway, I ended up simply listing all the fields during initialization. Not so pretty, but looks explicit and it works (c)
[03:01:34] *** Joins: MrFantastik (~Thunderbi@cpe-69-204-101-67.buffalo.res.rr.com)
[03:02:52] *** Quits: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com) (Remote host closed the connection)
[03:06:12] *** Joins: SincereFox (uid337158@user/sincerefox)
[03:06:56] *** Quits: mrig (~mrig@user/mrig) (Quit: WeeChat 3.2)
[03:12:46] <b0nn> Anderson-D: Transferring from DAO to DTO will always include "mapping" and I don't know of another way to do it (even if there was a way via struct tags it'd just be an under the hood implementation of what you are doing)
[03:17:23] *** Quits: micah (~micah@debian/micah) (Remote host closed the connection)
[03:20:24] *** Quits: jjonah (~jjonah@p200300d5d723c400dea632fffeb3342f.dip0.t-ipconnect.de) (Remote host closed the connection)
[03:20:54] *** Joins: Guest53 (~textual@170.250.221.149)
[03:31:13] *** Quits: s-video (~s-video@2601:196:4b00:e70:5198:971e:1589:d1d1) (Ping timeout: 256 seconds)
[03:31:27] *** Quits: jsrnop (~mark@user/jsrnop) (Quit: The Lounge - https://thelounge.chat)
[03:31:48] *** Joins: jsrnop (~mark@user/jsrnop)
[03:33:07] *** Quits: Guest53 (~textual@170.250.221.149) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[03:39:46] *** Joins: burningserenity (~burningse@142-196-178-216.res.spectrum.com)
[03:42:22] *** Quits: NCS_One (~NCS_One@bl11-90-133.dsl.telepac.pt) (Quit: Lost terminal)
[03:46:06] *** Joins: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au)
[03:46:48] *** Joins: sudoforge (~sudoforge@wireguard/tunneler/sudoforge)
[03:49:17] *** Joins: dansan (~daniel@75.81.148.51)
[03:53:53] *** Joins: s-video (~s-video@c-73-17-214-8.hsd1.ma.comcast.net)
[03:59:03] <kodah> Tv_: is it even possible to avoid? i find myself in this situation with protobuf as well.
[03:59:36] <Tv_> kodah: well, simple programs can get by without separating those two
[03:59:45] <kodah> fair enough
[04:00:05] <Tv_> but even then, who says your database access mechanism should get its own struct
[04:00:15] <Tv_> that might just be communally self-inflicted pain
[04:00:25] <kodah> it does make a number of operations quite nice
[04:00:31] <Tv_> case in point: database/sql sure ain't using such a struct
[04:02:20] *** Quits: burningserenity (~burningse@142-196-178-216.res.spectrum.com) (Ping timeout: 272 seconds)
[04:02:27] *** Joins: paulgrmn (~paulgrmn@user/paulgrmn)
[04:04:41] <kodah> i don't really think it makes sense to demonize orm's over the use of structs.
[04:04:59] <Tv_> no, that part is pretty common, and definitely not just "ORMy"
[04:05:09] <kodah> what part?
[04:05:16] <Tv_> gqlgen and sqlc both go out of their way to let you avoid that translation layer as long as possible, though
[04:05:30] <Tv_> having a struct to represent DB results
[04:05:37] <kodah> ah
[04:05:54] *** Quits: MrFantastik (~Thunderbi@cpe-69-204-101-67.buffalo.res.rr.com) (Ping timeout: 240 seconds)
[04:06:16] <kodah> what do they incentivize instead?
[04:06:25] <Tv_> so given that e.g. sqlc can perfectly nicely share the db layer struct with business logic for smaller apps, i do think gorm is still extra pain
[04:07:12] <Tv_> they both let you customize the struct enough / use a struct *you* define  to make it ok to reuse business domain objects for database/graphql data as long as possible/as often as possible
[04:07:16] <Tv_> keeps simple things simple
[04:07:35] <Tv_> e.g. your own types for struct fields, not just basic types
[04:08:34] <kodah> i believe gorm lets you do the same thing
[04:09:09] <kodah> i may be misunderstanding though
[04:10:14] <kodah> the situation i run into is when i have some competing configuration for struct tags, hence the "layers" end up getting split out
[04:10:30] <kodah> currently i've got grpc code in one place and a DTO in another.
[04:11:47] <Tv_> kodah: they shouldn't be using the same struct tags tho?
[04:13:34] <kodah> Tv_: they're not, it's more like, it's not appropriate for me to send certain fields over HTTP (json) but it is appropriate for me to store them in the db
[04:13:44] *** Quits: koo7 (~koo6@89-24-13-235.customers.tmcz.cz) (Ping timeout: 272 seconds)
[04:13:51] <kodah> that was a terrible example
[04:13:54] *** Quits: arinov_ (~arinov@178.240.158.75) (Ping timeout: 240 seconds)
[04:14:51] *** Quits: paulgrmn (~paulgrmn@user/paulgrmn) (Ping timeout: 256 seconds)
[04:15:15] <b0nn> If your DAO objects are in the BL, your BL is polluted and coupled to whatever the DAO is optimised for
[04:15:51] <b0nn> Oh, I see you were using SQL and now want to use a NoSQL cache for reading, best of luck with that we used the SQL structs/types in the wrong places
[04:16:26] <b0nn> the Github Code generation AI announcement has me thinking everything with the clippy voice :)
[04:16:44] <kodah> i think no matter what you do you're basically going to be copying structures a lot
[04:16:56] <kodah> Tv_ is kinda right
[04:17:06] <Tv_> for small things, the work of splitting business logic from other things later is less than the bureaucracy of doing everything on the first day
[04:17:39] <b0nn> When you move data across a boundary you have to make a choice, couple both sides to the abstraction of the data store, or couple both to the bl abstraction
[04:17:57] <Tv_> you speak of things as if code was permanent
[04:18:09] <b0nn> Me, I know the bl is going to change a LOT less than the datastore
[04:18:23] <Tv_> i'd rather take easy-to-edit easy-to-delete code than something with 17 layers of abstractions
[04:18:31] <b0nn> And if the BL changes, then the datastore will have to too
[04:18:48] <b0nn> If the datastore changes I will not care in the BL
[04:19:00] <b0nn> This has been well covered for almost two decades
[04:19:41] <kodah> interesting thoughts
[04:19:49] <Tv_> and OOP has been "well covered" for longer
[04:20:09] <Tv_> doesn't mean everything is always the thing to do every single time
[04:24:39] *** Joins: burningserenity (~burningse@142-196-178-216.res.spectrum.com)
[04:27:48] <b0nn> kodah: it's simple to work out - which piece of code will need the most maintenance
[04:28:19] <b0nn> And which code /should/ change when the other piece does
[04:28:58] <b0nn> With data stores, if you change the type of a field - then the datastore /has/ to change, but should the bl - only if the bl was driving that change
[04:29:23] <Tv_> starting from the assumption that those levels are separated, then they are separate
[04:29:31] <Tv_> circular logic is best because it's circular
[04:33:25] <b0nn> So, a slightly more concrete example: My BL defines a key as 1234, which I store in the db as int32; then my PM decides that, in fact, keys have to support other characters, the BL drives that change, so the datastore needs to react
[04:34:30] <b0nn> But, if the datastore was initially decided to store that as int8, then realised that values could go higher, to int32, then the datastore drives the change, and (crucially) the BL should never care
[04:35:13] <b0nn> So, if you coupled your BL to the datastores implementation, the second scenario would necessitate change in the BL, which could have far ranging effects
[04:36:38] *** Quits: amahl (~amahl@dsl-jklbng12-54fbca-64.dhcp.inet.fi) (Remote host closed the connection)
[04:38:34] <b0nn> The types aren't so important as who should be reacting to change
[04:43:27] *** Joins: sono (~sono@107-209-210-210.lightspeed.sntcca.sbcglobal.net)
[04:46:02] *** Quits: predmijat (~predmijat@mail.strogopro.com) (Quit: bye)
[04:47:34] *** Joins: predmijat (~predmijat@mail.strogopro.com)
[04:58:18] *** Quits: dr0n (~nabromov@94.11.23.235) (Ping timeout: 240 seconds)
[05:01:30] *** Quits: andlabs (~andlabs@71.190.119.164) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[05:09:25] *** Quits: omegatron (~some@p5b056bc7.dip0.t-ipconnect.de) (Quit: What happened? You quit!)
[05:10:54] *** Quits: jinie (~jimmy@188.114.173.37) (Quit: ZNC 1.8.2 - https://znc.in)
[05:11:24] *** Joins: gggpkm (~gggpkm@106.37.74.209)
[05:12:10] *** Joins: jinie (~jimmy@188.114.173.37)
[05:14:29] *** Joins: gggp (~textual@60.10.194.47)
[05:14:55] *** Joins: gggpkm_ (~gggpkm@60.10.194.47)
[05:15:23] *** Quits: jinie (~jimmy@188.114.173.37) (Client Quit)
[05:16:13] *** Joins: jinie (~jimmy@188.114.173.37)
[05:17:30] *** Quits: gggpkm (~gggpkm@106.37.74.209) (Ping timeout: 252 seconds)
[05:31:34] <b0nn> Not sure who needs/wants to hear this, but, just upgraded my vim-go (I'm on master) and *finally* rid of golint
[05:31:52] <b0nn> although now I have to //nolint: revive everywhere instead :)
[05:35:50] *** Quits: SincereFox (uid337158@user/sincerefox) (Quit: Connection closed for inactivity)
[05:38:36] *** Quits: gggp (~textual@60.10.194.47) (Ping timeout: 272 seconds)
[05:38:55] *** Joins: gggpkm (~gggpkm@60.10.23.171)
[05:39:11] *** Joins: gggp (~textual@60.10.194.47)
[05:40:30] *** Quits: gggpkm_ (~gggpkm@60.10.194.47) (Ping timeout: 272 seconds)
[05:41:30] <snappy> b0nn: what's wrong with golint, or is that the deprecated linter?
[05:41:46] <Tv_> randos don't get to deprecate other people's projects...
[05:43:57] *** Quits: KekSi (~KekSi@dynamic-077-012-141-250.77.12.pool.telefonica.de) (Ping timeout: 265 seconds)
[05:47:16] *** Quits: mud (~mud@user/kadoban) (Read error: Connection reset by peer)
[05:47:30] *** Joins: KekSi (~KekSi@x4db451d4.dyn.telefonica.de)
[05:47:42] *** Joins: mud (~mud@user/kadoban)
[05:49:29] *** Joins: elf_fortrez (~elf_fortr@adsl-72-50-4-48.prtc.net)
[05:49:59] <b0nn> snappy: yeah, it's been deprecated
[05:50:32] <b0nn> https://github.com/golang/go/issues/38968
[05:50:38] *** Quits: pepee (~user@user/pepee) (Read error: Connection reset by peer)
[05:53:10] *** Quits: gggp (~textual@60.10.194.47) (Ping timeout: 272 seconds)
[05:54:21] <snappy> yeah i think my ale setup still uses golint
[05:55:13] *** Joins: gggp (~textual@60.10.194.47)
[05:55:46] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:2132:cd52:1e4a:f46a) (Quit: elastic_dog)
[05:56:20] <snappy> maybe time to reconfigure to use golangci-lint or staticcheck
[05:56:34] <Tv_> oh huh, they actually deprecated it. the between the lines reading is that you don't need a replacement, though...
[05:56:49] <Tv_> staticcheck is great though
[05:56:53] <b0nn> vim-go was still using golint (deep in the code) before I upgraded
[05:57:32] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:2132:cd52:1e4a:f46a)
[05:57:36] <b0nn> I've replaced it with revive which covers a lot, but not all, og golint's functionality
[05:58:24] <b0nn> WRT golangci-lint/staticcheck it's my understanding that /most/ Go editors have dropped golangci-lint as the *default* meta-linter, in favour of staticcheck
[05:58:27] <snappy> oh neat, maybe i can use revive for ale instead of golint
[05:59:05] <b0nn> I know that vim-go has, and VSCode did too (actually that's a I think, I know I saw a major editor make the announcement but cannot remember who it was)
[05:59:32] <snappy> yeah everytime i try to get golangci-lint running, it's been a headache
[05:59:35] *** Quits: elf_fortrez (~elf_fortr@adsl-72-50-4-48.prtc.net) (Quit: Client closed)
[06:00:18] *** Joins: oxum (~oxum@136.185.148.86)
[06:00:40] *** Quits: treethought (treethou@138.68.49.251) (Remote host closed the connection)
[06:01:28] *** Joins: treethought (treethou@138.68.49.251)
[06:04:42] *** Quits: oxum (~oxum@136.185.148.86) (Ping timeout: 240 seconds)
[06:10:52] <gggpkm> Does ganache use geth
[06:12:42] *** Quits: burningserenity (~burningse@142-196-178-216.res.spectrum.com) (Ping timeout: 240 seconds)
[06:12:48] *** Joins: Maxattax97 (~max@2603-900a-1501-a7ca-0000-0000-0000-077a.inf6.spectrum.com)
[06:16:48] *** Joins: burningserenity (~burningse@2603:9001:f01:ad99::1000)
[06:22:09] *** Quits: Maxattax97 (~max@2603-900a-1501-a7ca-0000-0000-0000-077a.inf6.spectrum.com) (Quit: WeeChat 3.0.1)
[06:23:06] *** Joins: mrlemke_ (~mrlemke@208.74.105.200)
[06:24:12] *** Quits: s-video (~s-video@c-73-17-214-8.hsd1.ma.comcast.net) (Ping timeout: 272 seconds)
[06:25:42] *** Quits: Garb0 (~Garb0@user/garb0) (Quit: Garb0)
[06:26:44] *** Quits: mrlemke (~mrlemke@208.74.105.200) (Ping timeout: 272 seconds)
[06:29:31] *** Joins: s-video (~s-video@c-73-17-214-8.hsd1.ma.comcast.net)
[06:31:53] *** Joins: pepee (~user@user/pepee)
[06:36:09] *** Quits: mrlemke_ (~mrlemke@208.74.105.200) (Quit: Leaving)
[06:36:31] *** Quits: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au) (Ping timeout: 256 seconds)
[06:43:13] *** Joins: keiser0091075 (~keiser@83.25.198.9.ipv4.supernova.orange.pl)
[06:43:33] *** Joins: mrlemke (~mrlemke@208.74.105.200)
[06:44:01] *** Joins: gggpkm_ (~gggpkm@60.10.194.47)
[06:45:06] *** Quits: gggp (~textual@60.10.194.47) (Ping timeout: 272 seconds)
[06:45:44] *** Quits: keiser009107 (~keiser@83.25.191.2.ipv4.supernova.orange.pl) (Ping timeout: 272 seconds)
[06:46:19] *** Quits: gggpkm (~gggpkm@60.10.23.171) (Ping timeout: 246 seconds)
[06:46:50] *** Joins: gggp (~textual@60.10.23.171)
[06:47:50] <snappy> oh lame, staticcheck with ale in vim-go doesn't work since it operates on packages and not individual files :/
[06:48:51] *** Joins: oxum (~oxum@136.185.148.86)
[06:53:31] *** Quits: oxum (~oxum@136.185.148.86) (Ping timeout: 256 seconds)
[06:53:39] *** Joins: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au)
[07:03:30] *** Quits: burningserenity (~burningse@2603:9001:f01:ad99::1000) (Ping timeout: 240 seconds)
[07:10:14] *** Quits: davidkrauser (~davidkrau@user/davidkrauser) (Quit: Leaving)
[07:12:55] *** Joins: andlabs (~andlabs@71.190.119.164)
[07:21:32] *** Joins: MrFantastik (~Thunderbi@cpe-69-204-101-67.buffalo.res.rr.com)
[07:27:05] *** Quits: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au) (Quit: WeeChat 3.1)
[07:27:35] *** Quits: gggp (~textual@60.10.23.171) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[07:27:59] *** Joins: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au)
[07:31:40] *** Quits: vitalius (~vitaliy@97-115-70-114.ptld.qwest.net) (Ping timeout: 268 seconds)
[07:32:57] *** Joins: vitalius (~vitaliy@97.115.179.146)
[07:33:59] <bodhi> whats the best way to take user input like "press y to cotinue or n to abort"
[07:47:22] <s-video> fmt.Scan or a bufio.Reader on os.Stdin
[07:48:45] <s-video> s/Reader/Scanner
[07:53:00] *** Quits: qwedfg (~qwedfg@user/qwedfg) (Ping timeout: 265 seconds)
[07:55:47] *** Joins: Guest19 (~Guest19@2601:404:d300:5a0:e1ef:e298:8a2d:95d6)
[07:57:21] *** Joins: oxum (~oxum@136.185.148.86)
[08:00:48] *** Joins: qwedfg (~qwedfg@user/qwedfg)
[08:02:05] *** Quits: oxum (~oxum@136.185.148.86) (Ping timeout: 256 seconds)
[08:04:27] *** Joins: decartes (uid240036@id-240036.brockwell.irccloud.com)
[08:04:34] *** Joins: wpirc63 (~wpirc63@d-65-175-172-165.nh.cpe.atlanticbb.net)
[08:09:43] *** Quits: Guest19 (~Guest19@2601:404:d300:5a0:e1ef:e298:8a2d:95d6) (Ping timeout: 246 seconds)
[08:12:04] <kodah> i really wish the language server was done so i can use vscode
[08:12:30] *** Quits: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au) (Ping timeout: 272 seconds)
[08:12:34] <kodah> using intellij is like having a ferrari engine in a pinto
[08:12:57] <b0nn> wait, you cannot use gopls with vsacode?
[08:13:17] <b0nn> I thought that vscode was the first to get gopls (because lsp was a ms thing
[08:13:25] <kodah> you can, but it lacks features like cross package symbol renames
[08:13:25] <rewt> works for me
[08:13:39] <kodah> that gets real old, real quick
[08:13:51] <b0nn> in fact if you download and install gopls from src it tries to grap npm stuff /for/  vscode
[08:14:18] <b0nn> oh, it's lacking *feature*
[08:14:21] <b0nn> s
[08:14:47] <kodah> correct, probably could've worded it better, but that's why i said "done"
[08:15:30] *** Joins: Kane (~Kane@2a01:e34:ee89:5d90:c07d:7132:2854:e46a)
[08:16:59] <b0nn> lol, as a SWE you should /well/ know that software is never "done" :)
[08:18:27] *** gggpkm_ is now known as gggpkm
[08:19:02] <kodah> heh true. i'm just waiting for them to finish some nicetties like that
[08:25:01] *** Joins: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au)
[08:32:29] *** Quits: PedroG1 (~android@45.77.216.181) (Quit: Got you)
[08:35:09] *** Joins: PedroG1 (~android@45.77.216.181)
[08:35:18] *** Quits: s-video (~s-video@c-73-17-214-8.hsd1.ma.comcast.net) (Ping timeout: 272 seconds)
[08:45:14] <bodhi> but it would have been nice to have something that kept prompting the user until the user entered one of the options (y/n)
[08:51:08] *** Quits: treethought (treethou@138.68.49.251) (Ping timeout: 272 seconds)
[08:54:48] *** Quits: wpirc63 (~wpirc63@d-65-175-172-165.nh.cpe.atlanticbb.net) (Quit: Connection closed)
[08:57:12] *** Joins: LtHummus_ (~lthummus@97-126-113-251.tukw.qwest.net)
[08:58:36] *** Quits: LtHummus (~lthummus@174-21-28-50.tukw.qwest.net) (Ping timeout: 252 seconds)
[09:01:24] *** Joins: treethought (treethou@138.68.49.251)
[09:07:43] *** Quits: MrFantastik (~Thunderbi@cpe-69-204-101-67.buffalo.res.rr.com) (Quit: MrFantastik)
[09:07:54] *** Joins: gggp (~textual@60.10.23.171)
[09:08:02] *** Joins: MrFantastik (~Thunderbi@cpe-69-204-101-67.buffalo.res.rr.com)
[09:12:40] *** Quits: MrFantastik (~Thunderbi@cpe-69-204-101-67.buffalo.res.rr.com) (Ping timeout: 272 seconds)
[09:14:28] *** Joins: gggpkm_ (~gggpkm@60.10.194.47)
[09:17:06] *** Quits: gggpkm (~gggpkm@60.10.194.47) (Ping timeout: 272 seconds)
[09:30:09] *** Joins: veegee_ (~veegee@ipagstaticip-469c2903-2b07-6dc3-3bc2-98748da5ca77.sdsl.bell.ca)
[09:33:02] *** Quits: veegee (~veegee@ipagstaticip-469c2903-2b07-6dc3-3bc2-98748da5ca77.sdsl.bell.ca) (Ping timeout: 250 seconds)
[09:35:04] *** Quits: arcatech (~arcatech@user/arcatech) (Remote host closed the connection)
[09:44:56] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[09:51:12] *** Quits: cync (~blah@192.180.187.81.in-addr.arpa) (Quit: No Ping reply in 180 seconds.)
[09:52:35] *** Joins: cync (~blah@192.180.187.81.in-addr.arpa)
[09:53:12] *** Quits: gggpkm_ (~gggpkm@60.10.194.47) (Ping timeout: 272 seconds)
[09:54:46] *** Quits: gggp (~textual@60.10.23.171) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[09:55:10] *** Joins: gggpkm (~gggpkm@60.10.23.171)
[09:58:16] *** Quits: sudoforge (~sudoforge@wireguard/tunneler/sudoforge) (Ping timeout: 272 seconds)
[10:06:17] *** Joins: jcajka (~jcajka@89-24-144-111.customers.tmcz.cz)
[10:13:25] *** Joins: gggpkm_ (~gggpkm@60.10.194.47)
[10:14:00] <ac5tin> hi im trying retrieve some data from postgres using the library scany, and i got the error : scany: scan row into struct fields: can't scan into dest[32]: cannot assign NULL to *time.Time
[10:14:39] <ac5tin> doesnt *time.Time means it's nullable
[10:15:49] *** Quits: gggpkm (~gggpkm@60.10.23.171) (Ping timeout: 256 seconds)
[10:17:02] *** Joins: dany74q (~dany74q@IGLD-84-229-190-86.inter.net.il)
[10:22:51] <kodah> ac5tin: null in a database sense is different. database/sql has NullTime https://pkg.go.dev/database/sql#NullTime
[10:23:26] *** Quits: dany74q (~dany74q@IGLD-84-229-190-86.inter.net.il) (Remote host closed the connection)
[10:25:48] *** Joins: dany74q (~dany74q@IGLD-84-229-190-86.inter.net.il)
[10:25:53] <ac5tin> so i shouldn't use time.Time
[10:26:06] <kodah> nope, not if you want null as a value
[10:29:48] *** Quits: dany74q (~dany74q@IGLD-84-229-190-86.inter.net.il) (Remote host closed the connection)
[10:30:35] *** Quits: pepee (~user@user/pepee) (Quit: bye $IRC)
[10:30:35] *** Joins: dany74q (~dany74q@IGLD-84-229-190-86.inter.net.il)
[10:31:50] *** Quits: gggpkm_ (~gggpkm@60.10.194.47) (Ping timeout: 272 seconds)
[10:32:10] *** Joins: gggpkm (~gggpkm@60.10.194.47)
[10:33:28] *** Quits: AquaL1te (~AquaL1te@user/aqual1te) (Ping timeout: 246 seconds)
[10:45:45] *** Joins: dany74q1 (~dany74q@IGLD-84-229-190-86.inter.net.il)
[10:49:05] *** Quits: dany74q1 (~dany74q@IGLD-84-229-190-86.inter.net.il) (Client Quit)
[10:50:31] *** Quits: dany74q (~dany74q@IGLD-84-229-190-86.inter.net.il) (Remote host closed the connection)
[10:52:30] *** Joins: sysh (~sysh@212.237.182.120)
[10:52:30] *** Joins: dmathieu (~textual@78.203.212.55)
[10:53:09] *** Quits: sysh (~sysh@212.237.182.120) (Client Quit)
[10:53:24] *** Joins: sysh (~sysh@212.237.182.120)
[10:55:47] *** Quits: eck0 (~eck0@047-007-119-133.res.spectrum.com) (Ping timeout: 268 seconds)
[11:02:33] *** Joins: eck0 (~eck0@047-007-119-133.res.spectrum.com)
[11:05:44] *** Quits: andlabs (~andlabs@71.190.119.164) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[11:06:35] *** Joins: dany74q (~dany74q@IGLD-84-229-190-86.inter.net.il)
[11:08:01] *** Joins: shka (~herr@109.231.62.239)
[11:09:03] *** Quits: LiftLeft (~LiftLeft@154.21.114.30) (Ping timeout: 268 seconds)
[11:12:21] *** Joins: mrig (~mrig@user/mrig)
[11:13:26] *** Quits: mickey (~user@user/mickey) (Remote host closed the connection)
[11:13:46] *** Joins: mickey (~user@user/mickey)
[11:15:13] *** Joins: frost (~frost@59.71.241.179)
[11:18:23] *** Joins: absc (~absc@dynamic-adsl-94-34-217-240.clienti.tiscali.it)
[11:28:42] *** Joins: oxum (~oxum@136.185.148.86)
[11:29:17] *** Joins: mikoto-chan (~mikoto-ch@ip-213-49-189-31.dsl.scarlet.be)
[11:30:42] *** Quits: mrlemke (~mrlemke@208.74.105.200) (Ping timeout: 240 seconds)
[11:30:48] *** Joins: s-video (~s-video@c-73-17-214-8.hsd1.ma.comcast.net)
[11:31:55] *** Quits: Eddward (~Eddward@207.138.204.132) (Ping timeout: 246 seconds)
[11:33:20] *** Quits: oxum (~oxum@136.185.148.86) (Ping timeout: 252 seconds)
[11:34:43] *** Joins: Garb0 (~Garb0@user/garb0)
[11:35:10] *** Quits: s-video (~s-video@c-73-17-214-8.hsd1.ma.comcast.net) (Ping timeout: 252 seconds)
[11:39:40] *** Joins: AquaL1te (~AquaL1te@user/aqual1te)
[11:50:42] *** Joins: dr0n (~nabromov@92.40.255.115.threembb.co.uk)
[12:00:19] *** Joins: oxum (~oxum@136.185.148.86)
[12:04:52] *** Quits: oxum (~oxum@136.185.148.86) (Ping timeout: 252 seconds)
[12:06:20] *** Joins: koo7 (~koo6@89-24-13-235.customers.tmcz.cz)
[12:08:42] *** Quits: kupi (uid212005@id-212005.stonehaven.irccloud.com) (Quit: Connection closed for inactivity)
[12:10:57] *** Joins: gggpkm_ (~gggpkm@60.10.194.47)
[12:13:25] *** Quits: gggpkm (~gggpkm@60.10.194.47) (Ping timeout: 258 seconds)
[12:17:30] *** Quits: Snyp (~rksht@49.207.193.103) (Ping timeout: 240 seconds)
[12:18:23] *** Joins: foobaz212 (~foobaz212@cpc84737-aztw28-2-0-cust8.18-1.cable.virginm.net)
[12:20:22] *** Quits: cync (~blah@192.180.187.81.in-addr.arpa) (Quit: No Ping reply in 180 seconds.)
[12:21:45] *** Joins: cync (~blah@192.180.187.81.in-addr.arpa)
[12:37:48] *** Joins: jjonah (~jjonah@p200300d5d723c400dea632fffeb3342f.dip0.t-ipconnect.de)
[12:38:27] *** Quits: foobaz212 (~foobaz212@cpc84737-aztw28-2-0-cust8.18-1.cable.virginm.net) (Quit: Client closed)
[12:38:30] *** Quits: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au) (Ping timeout: 272 seconds)
[12:46:24] *** Quits: kiril (~kiril@85.91.153.163) (Quit: ZNC - http://znc.in)
[12:49:15] <dostoyevsky2> Does https://pkg.go.dev/github.com/thoas/go-funk have a function where I could funk.Map() a map instead of an array?  (It doesn't seem so...)
[12:49:32] *** Joins: oxum (~oxum@136.185.148.86)
[12:50:49] *** Joins: kiril (~kiril@85.91.153.163)
[12:51:39] <GinjaNinja32> dostoyevsky2, based on a quick glance at the code it should just work - did you try it?
[12:51:59] <dostoyevsky2> Yeah...
[12:52:48] <fizzie> Based on the documentation, too. "funk.Map: Manipulates an iteratee (map, slice) --"
[12:53:47] <fizzie> There's an example doing a Map on a map there as well.
[12:54:20] *** Joins: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au)
[12:54:29] *** Quits: oxum (~oxum@136.185.148.86) (Ping timeout: 256 seconds)
[12:54:57] <fizzie> (In fact, examples of all four cases: slice to slice, slice to map, map to slice, map to map.)
[12:56:52] *** Quits: mikoto-chan (~mikoto-ch@ip-213-49-189-31.dsl.scarlet.be) (Read error: Connection reset by peer)
[12:56:56] <dostoyevsky2> Ok, thanks for checking... :)  Will try harder to get it work or make it a playground excerpt
[12:57:33] *** Joins: mikoto-chan (~mikoto-ch@ip-213-49-189-31.dsl.scarlet.be)
[12:58:46] *** Quits: Garb0 (~Garb0@user/garb0) (Ping timeout: 252 seconds)
[12:59:01] *** Quits: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au) (Ping timeout: 256 seconds)
[12:59:11] *** Joins: Garb0 (~Garb0@user/garb0)
[12:59:29] *** Joins: pez (~pez@user/pez)
[13:00:10] *** Quits: Garb0 (~Garb0@user/garb0) (Client Quit)
[13:03:03] *** Joins: Ergo^ (~ergo@91.238.59.144)
[13:03:30] <kai> hi folks
[13:04:38] *** Joins: arinov_ (~arinov@95.70.154.195)
[13:04:53] *** Joins: amahl (~amahl@dsl-jklbng12-54fbca-64.dhcp.inet.fi)
[13:04:57] *** Quits: dmathieu (~textual@78.203.212.55) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[13:08:05] <kai> I've got an SQL query that returns a multi-dimensional array. As far as I understand pq doesn't support that natively. I've seen some suggestions on creating a custom class that implements the sql.Scanner and sql.Valuer interface itself for the inner array, but I'm a bit lost on how I'd do this
[13:09:34] *** Quits: acid (~acid@user/acid) (Ping timeout: 246 seconds)
[13:11:19] *** Joins: acid (~acid@user/acid)
[13:11:30] *** Quits: koo7 (~koo6@89-24-13-235.customers.tmcz.cz) (Ping timeout: 240 seconds)
[13:11:30] *** Joins: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au)
[13:11:41] *** Quits: gggpkm_ (~gggpkm@60.10.194.47) (Ping timeout: 258 seconds)
[13:11:56] *** Joins: gggpkm (~gggpkm@60.10.194.47)
[13:14:55] *** Joins: gggpkm_ (~gggpkm@36.112.128.143)
[13:16:18] *** Quits: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au) (Ping timeout: 240 seconds)
[13:17:48] *** Quits: gggpkm (~gggpkm@60.10.194.47) (Ping timeout: 265 seconds)
[13:21:41] <rk4> lib/pq suggests you use pgx, so you could see if pgx handles the situation more easily
[13:24:09] * rk4 suspects the situation is the same, but pgx seems nicer anyway ^_^
[13:25:30] *** Quits: bodhi (~bodhi@c-73-93-87-220.hsd1.ca.comcast.net) (Ping timeout: 240 seconds)
[13:25:32] *** Quits: arinov_ (~arinov@95.70.154.195) (Ping timeout: 265 seconds)
[13:26:00] *** Quits: art_vandelay (~art_vande@bras-base-toroon63x9w-grc-21-174-89-102-174.dsl.bell.ca) (Ping timeout: 272 seconds)
[13:26:37] <kai> I'm currently looking at the pgx docs, but they're a bit.. bare
[13:27:18] <kai> it's a bit like to "how to draw an owl" meme
[13:27:41] <kai> "here's a trivial case, and here's a link to the source code"
[13:27:56] *** Joins: art_vandelay (~art_vande@bras-base-toroon63x9w-grc-21-174-89-102-174.dsl.bell.ca)
[13:28:53] *** Joins: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au)
[13:30:41] <rk4> as an aside, array_to_json() in postgres can handle multidimensional arrays, i've seen this amusingly used to cut down hassle by having postgres serialize to json that you then can easily deserialize with encoding/json
[13:34:16] *** Quits: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au) (Ping timeout: 268 seconds)
[13:38:53] *** Joins: Garb0 (~Garb0@user/garb0)
[13:38:59] <sztanpet> does anybody know of an online tool that prints the tls information the client connected with? so for example whether there is tlsv1.2 and what ciphers were negotiated?
[13:39:35] *** gggpkm_ is now known as gggpkm
[13:40:24] <kai> rk4: the funky part is that the tables I'm working on are loaded from a deeply nested json struct, and the code I'm currently writing is trying to get stuff into proper SQL
[13:40:50] <kai> rk4: Deeply nested JSON is a pain to deal with in postgres
[13:44:11] <kai> but I guess this could in fact work
[13:44:27] <kai> I mean without being too ugly, code-wise
[13:55:05] *** Joins: oxum (~oxum@136.185.148.86)
[13:55:28] <dansan> How can I see my log output when running tests?  I'm running them from within vscodium right now
[13:56:04] <dansan> I'm expecting to see some debug logging output from the function I'm testing, so I'm not interested in t.Printf
[14:00:13] *** Quits: oxum (~oxum@136.185.148.86) (Ping timeout: 256 seconds)
[14:01:47] <dansan> Ahh, well I can get it from the debug console if I debug it
[14:03:32] *** Joins: Ohlov317 (~Ohlov3@dyndsl-085-016-106-080.ewe-ip-backbone.de)
[14:04:46] *** Joins: arinov_ (~arinov@95.70.154.195)
[14:04:58] *** Joins: koo7 (~koo6@89-24-13-235.customers.tmcz.cz)
[14:06:08] *** Quits: jannis (~jannis@user/xjs) (Ping timeout: 265 seconds)
[14:06:42] *** Quits: Ohlov31 (~Ohlov3@dyndsl-080-228-184-148.ewe-ip-backbone.de) (Ping timeout: 240 seconds)
[14:07:26] *** Joins: Xjs (~jannis@user/xjs)
[14:09:03] *** Joins: Crassus (~Crassus@user/crassus)
[14:10:32] *** Joins: mollerup (~nmm@customer-212-237-103-18.ip4.gigabit.dk)
[14:13:16] *** Quits: nmollerup (~nmm@customer-2a00-7660-1612-0168-cfa8-be86-5a22-ee27.ip6.gigabit.dk) (Ping timeout: 246 seconds)
[14:22:04] *** Quits: Garb0 (~Garb0@user/garb0) (Quit: Garb0)
[14:22:56] *** Quits: Deknos (~someone@user/menace) (Ping timeout: 250 seconds)
[14:26:50] *** Joins: omegatron (~some@p5b056bc7.dip0.t-ipconnect.de)
[14:41:04] *** Quits: arinov_ (~arinov@95.70.154.195) (Ping timeout: 252 seconds)
[14:43:30] *** Joins: arinov_ (~arinov@178.240.158.75)
[14:43:54] *** Quits: Xjs (~jannis@user/xjs) (Ping timeout: 240 seconds)
[14:45:29] *** Joins: Xjs (~jannis@user/xjs)
[14:51:16] *** Joins: kupi (uid212005@id-212005.stonehaven.irccloud.com)
[14:57:56] *** Quits: amahl (~amahl@dsl-jklbng12-54fbca-64.dhcp.inet.fi) (Remote host closed the connection)
[14:57:58] *** Quits: sono (~sono@107-209-210-210.lightspeed.sntcca.sbcglobal.net) (Quit: When You're Taught Through Feelings~â™ª)
[15:01:28] <j416> dansan: -v
[15:09:04] *** Joins: fef (~thedawn@user/thedawn)
[15:13:58] *** Joins: gggpkm_ (~gggpkm@60.10.194.47)
[15:16:16] *** Quits: gggpkm (~gggpkm@36.112.128.143) (Ping timeout: 252 seconds)
[15:18:28] *** Joins: gggpkm (~gggpkm@124.126.15.211)
[15:18:34] *** Quits: gggpkm_ (~gggpkm@60.10.194.47) (Ping timeout: 258 seconds)
[15:26:14] *** Joins: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au)
[15:27:12] *** Quits: ghenry (~ghenry@ghenry.plus.com) (Quit: SureVoIP: http://www.surevoip.co.uk)
[15:28:27] *** Joins: gggpkm_ (~gggpkm@60.10.194.47)
[15:30:25] *** Quits: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au) (Client Quit)
[15:30:41] *** Joins: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au)
[15:30:56] *** Quits: gggpkm (~gggpkm@124.126.15.211) (Ping timeout: 252 seconds)
[15:33:18] *** Quits: gggpkm_ (~gggpkm@60.10.194.47) (Ping timeout: 272 seconds)
[15:33:46] *** Joins: gggpkm (~gggpkm@60.10.194.47)
[15:38:15] *** Quits: fef (~thedawn@user/thedawn) (Quit: Leaving)
[15:39:06] *** Joins: dmathieu (~textual@laubervilliers-659-1-148-137.w92-154.abo.wanadoo.fr)
[15:44:49] *** Joins: gggp (~textual@60.10.194.47)
[15:50:00] *** Quits: bitshift (~jesse@107-179-164-219.cpe.teksavvy.com) (Ping timeout: 252 seconds)
[15:51:41] *** Quits: snappy (~snappy@user/snappy) (Ping timeout: 272 seconds)
[15:53:39] <sztanpet> and for the record, i have found https://www.howsmyssl.com/a/check for my problem, perfect
[15:55:17] *** Quits: Cyrus1 (~Cyrus@144.202.93.237) (Ping timeout: 272 seconds)
[15:57:58] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Ping timeout: 244 seconds)
[15:59:40] *** Quits: mountolive (~mountoliv@188.240.132.112) (Ping timeout: 246 seconds)
[16:01:10] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[16:02:08] *** Joins: bitshift (~jesse@107-179-164-219.cpe.teksavvy.com)
[16:04:32] *** Quits: cync (~blah@192.180.187.81.in-addr.arpa) (Quit: No Ping reply in 180 seconds.)
[16:10:24] *** Joins: cync (~blah@192.180.187.81.in-addr.arpa)
[16:14:57] *** Joins: gggpkm_ (~gggpkm@60.10.194.47)
[16:17:38] *** Quits: gggpkm (~gggpkm@60.10.194.47) (Ping timeout: 272 seconds)
[16:17:55] *** Joins: snappy (~snappy@user/snappy)
[16:21:38] *** Joins: Cyrus1 (~Cyrus@144.202.93.237)
[16:26:15] <bloony> Is there a way to do line 19 here? Would I need to do type assertion on them seperatly?  https://play.golang.org/p/vP-PsAxMW51
[16:27:57] *** Quits: gggp (~textual@60.10.194.47) (Ping timeout: 258 seconds)
[16:30:10] *** Joins: gggp (~textual@60.10.23.171)
[16:31:03] *** Joins: menace (~someone@2001:a61:3456:4d01:a440:6272:e74a:2fe)
[16:31:03] *** Quits: menace (~someone@2001:a61:3456:4d01:a440:6272:e74a:2fe) (Changing host)
[16:31:03] *** Joins: menace (~someone@user/menace)
[16:31:10] *** Quits: mikoto-chan (~mikoto-ch@ip-213-49-189-31.dsl.scarlet.be) (Read error: No route to host)
[16:31:40] *** menace is now known as Deknos
[16:32:06] *** Joins: mikoto-chan (~mikoto-ch@ip-213-49-189-31.dsl.scarlet.be)
[16:34:19] <bookworm> you need to split them. Also this smells like a structural problem
[16:34:46] <bookworm> you almost never want to have a function return an empty interface if you can avoid it
[16:35:13] <bookworm> you've got a type checker that prevents bugs, try to use it
[16:39:04] *** Joins: gggpkm (~gggpkm@60.10.23.171)
[16:39:06] *** Joins: foobaz212 (~foobaz212@cpc84737-aztw28-2-0-cust8.18-1.cable.virginm.net)
[16:40:41] <bloony> hmm right. its return values from a command dispatcher so the return values aren't always the same .. but I might be able to solve it with a interface type..
[16:40:42] *** Quits: cync (~blah@192.180.187.81.in-addr.arpa) (Quit: No Ping reply in 180 seconds.)
[16:40:58] <bloony> return types*
[16:41:04] *** Quits: gggpkm_ (~gggpkm@60.10.194.47) (Ping timeout: 272 seconds)
[16:42:04] *** Joins: cync (~blah@192.180.187.81.in-addr.arpa)
[16:42:44] *** Quits: frost (~frost@59.71.241.179) (Quit: Connection closed)
[16:44:37] *** Quits: foobaz212 (~foobaz212@cpc84737-aztw28-2-0-cust8.18-1.cable.virginm.net) (Quit: Client closed)
[16:47:22] *** Quits: dmathieu (~textual@laubervilliers-659-1-148-137.w92-154.abo.wanadoo.fr) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[16:51:49] *** Joins: yoonkn (~user@175.197.208.79)
[16:51:55] *** Quits: McQuestionable (uid505670@id-505670.highgate.irccloud.com) (Quit: Connection closed for inactivity)
[16:52:23] *** Joins: dmathieu (~textual@laubervilliers-659-1-148-137.w92-154.abo.wanadoo.fr)
[16:54:25] *** Joins: ntwk (~ntwk@user/ntwk)
[16:54:36] *** Parts: ntwk (~ntwk@user/ntwk) ()
[17:01:34] *** Joins: Snyp (~rksht@49.207.196.247)
[17:02:46] *** Quits: Crassus (~Crassus@user/crassus) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[17:02:50] *** Quits: jjonah (~jjonah@p200300d5d723c400dea632fffeb3342f.dip0.t-ipconnect.de) (Remote host closed the connection)
[17:05:17] *** Joins: Eddward (~Eddward@207.138.204.132)
[17:09:19] *** Quits: l2dy (~l2dy@user/l2dy) ()
[17:09:36] *** Joins: l2dy (~l2dy@user/l2dy)
[17:10:15] *** Quits: gggp (~textual@60.10.23.171) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[17:19:35] *** Joins: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com)
[17:20:44] *** Joins: gggpkm_ (~gggpkm@60.10.23.171)
[17:22:55] *** Quits: arinov_ (~arinov@178.240.158.75) (Quit: Konversation terminated!)
[17:23:05] *** Quits: gggpkm (~gggpkm@60.10.23.171) (Ping timeout: 256 seconds)
[17:23:10] *** Joins: arinov_ (~arinov@178.240.158.75)
[17:26:18] *** Joins: paulgrmn (~paulgrmn@user/paulgrmn)
[17:31:00] *** Joins: andlabs (~andlabs@71.190.119.164)
[17:34:30] *** Quits: arinov_ (~arinov@178.240.158.75) (Ping timeout: 252 seconds)
[17:39:13] *** Quits: Snyp (~rksht@49.207.196.247) (Quit: WeeChat 3.2)
[17:42:48] *** Joins: Guest53 (~textual@170.250.221.149)
[17:46:18] *** Quits: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au) (Ping timeout: 272 seconds)
[17:48:00] *** Quits: nimmen (~strangerf@78-61-239-159.static.zebra.lt) (Remote host closed the connection)
[17:54:05] *** Quits: Guest53 (~textual@170.250.221.149) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[18:03:35] *** Quits: andlabs (~andlabs@71.190.119.164) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[18:04:10] *** Quits: koo7 (~koo6@89-24-13-235.customers.tmcz.cz) (Ping timeout: 258 seconds)
[18:06:32] *** Joins: andlabs (~andlabs@71.190.119.164)
[18:06:41] *** Quits: halden (~halden@lden.im) (Quit: Bye)
[18:08:27] *** Joins: gggp (~textual@60.10.194.47)
[18:09:27] *** Quits: gggp (~textual@60.10.194.47) (Client Quit)
[18:09:48] *** Joins: Guest2024 (~ryan@75-109-154-192.nbrncmtk01.res.dyn.suddenlink.net)
[18:10:05] *** Joins: MrFantastik (~Thunderbi@cpe-69-204-101-67.buffalo.res.rr.com)
[18:10:53] *** Joins: edrocks (~Ed@user/edrocks)
[18:12:01] *** Joins: halden (~halden@lden.im)
[18:14:04] *** Joins: koo7 (~koo6@89-24-13-235.customers.tmcz.cz)
[18:16:45] *** Joins: gggpkm (~gggpkm@60.10.194.47)
[18:18:37] *** Quits: gggpkm_ (~gggpkm@60.10.23.171) (Ping timeout: 256 seconds)
[18:24:41] *** Quits: dmathieu (~textual@laubervilliers-659-1-148-137.w92-154.abo.wanadoo.fr) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[18:27:08] *** Joins: dmathieu (~textual@laubervilliers-659-1-148-137.w92-154.abo.wanadoo.fr)
[18:43:40] *** Joins: davidkrauser (~davidkrau@user/davidkrauser)
[18:43:44] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Remote host closed the connection)
[18:44:19] <mickey> hi, im building a plugin for some larger project and i need to query data from a geoip database (mmdb). the catch is i can't use any syscalls so i guess im kinda forced to build the database into my binary file
[18:44:23] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[18:44:26] <mickey> what would be the best approach to do that?
[18:45:41] <siXy> mickey: What do you mean you can't use any syscalls?
[18:46:28] *** Joins: mrlemke (~mrlemke@208.74.105.200)
[18:46:39] <mickey> the interpreter used in traefik blocks syscalls so i cant read data from the database on the fly
[18:46:48] <edrocks> there is a lib to read geoipdb2
[18:47:00] <edrocks> mickey can you open a file?
[18:47:28] <edrocks> github.com/oschwald/geoip2-golang
[18:48:57] <mickey> sure, im asking about incorporating the database itself into my binary file so i dont need to "open" the file
[18:49:14] <mickey> as that's a syscall that i cant do
[18:49:25] <edrocks> use go embed https://golang.org/pkg/embed/
[18:49:31] <mickey> thanks.
[18:49:45] <edrocks> fyi that geoip database file is pretty large
[18:50:00] <siXy> ^ that. But embedding something that big is going to have downsides, I'd have thought.
[18:50:28] <siXy> Especially for this application - if you need to invoke this per-request this could be infeasible
[18:50:36] <edrocks> ~60mb +
[18:50:53] <edrocks> could be too large to run
[18:51:01] <edrocks> thats for the city db
[18:51:22] <edrocks> there might be one that just gives rough country info iirc it may be smaller
[18:51:26] <edrocks> I was using the more detailed one
[18:51:29] <siXy> yeah the less fine-grained ones are smaller, but even so I'd have serious reservations about this.
[18:54:01] *** Joins: burningserenity (~burningse@2603:9001:f01:ad99::1000)
[18:54:24] *** Quits: burningserenity (~burningse@2603:9001:f01:ad99::1000) (Client Quit)
[18:55:31] *** Quits: kulak (~kulak@user/kulak) (Read error: Connection reset by peer)
[18:55:54] *** Joins: kulak (~kulak@user/kulak)
[18:56:02] *** Quits: andlabs (~andlabs@71.190.119.164) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[18:58:43] *** Joins: burningserenity (~burningse@2603:9001:f01:ad99::1000)
[19:00:19] <mickey> yeah, im only looking in the country one
[19:00:34] *** Joins: andlabs (~andlabs@2607:fb90:f801:a56b:a196:be8:1fd8:467c)
[19:00:50] <mickey> it should be about 5 mb
[19:02:07] <siXy> even so if this gets run per request, that's going to get pretty silly unless your traffic is extremely low
[19:02:52] <mickey> yup, it is low, but i'll go with whitelist to make it simpler
[19:03:32] <siXy> Most people prefer not to have to put 4TB of ram in their loadbalancers, and that's before we even start to think about numa latency...
[19:04:18] *** Joins: andlabs_ (~andlabs@172.58.227.61)
[19:05:06] *** Quits: arthur (~arthur@2a02:390:9151:0:1c94:e381:bf81:7129) (Ping timeout: 240 seconds)
[19:05:06] *** Joins: arcatech (~arcatech@user/arcatech)
[19:05:37] *** Joins: LiftLeft (~LiftLeft@154.21.28.239)
[19:06:04] *** Joins: Jmainguy (~Jmainguy@phy01.standouthost.com)
[19:06:07] *** Joins: andlabs__ (~andlabs@2607:fb90:f80f:dc0d:4888:e43d:81a1:9843)
[19:06:47] *** Quits: andlabs (~andlabs@2607:fb90:f801:a56b:a196:be8:1fd8:467c) (Ping timeout: 256 seconds)
[19:07:02] *** Joins: gggpkm_ (~gggpkm@60.10.194.47)
[19:07:46] *** Joins: Snyp (~rksht@49.207.196.247)
[19:09:25] *** Joins: HisShadow (~HisShadow@188.170.84.198)
[19:09:40] *** Quits: andlabs_ (~andlabs@172.58.227.61) (Ping timeout: 265 seconds)
[19:09:51] *** Joins: andlabs (~andlabs@172.58.227.95)
[19:09:54] *** Quits: gggpkm (~gggpkm@60.10.194.47) (Ping timeout: 272 seconds)
[19:10:35] <HisShadow> Can a net.Resolver receive parallel calls to it's methods? I don't think I've seen it mentioned in the docs.
[19:13:05] *** Joins: andlabs_ (~andlabs@2607:fb90:f802:65b7:c8df:df91:bfa0:516b)
[19:13:35] *** Quits: andlabs__ (~andlabs@2607:fb90:f80f:dc0d:4888:e43d:81a1:9843) (Ping timeout: 256 seconds)
[19:14:51] *** Joins: lilgopher (~textual@c-73-51-174-246.hsd1.il.comcast.net)
[19:16:08] *** Joins: andlabs__ (~andlabs@172.58.227.202)
[19:16:37] *** Quits: andlabs (~andlabs@172.58.227.95) (Ping timeout: 258 seconds)
[19:17:28] *** Joins: andlabs (~andlabs@2607:fb90:f807:3bfc:d547:a52e:c2f0:f457)
[19:18:07] *** Quits: andlabs_ (~andlabs@2607:fb90:f802:65b7:c8df:df91:bfa0:516b) (Ping timeout: 256 seconds)
[19:19:53] *** Joins: andlabs_ (~andlabs@172.58.230.229)
[19:20:50] *** Quits: andlabs__ (~andlabs@172.58.227.202) (Ping timeout: 258 seconds)
[19:21:54] *** Joins: andlabs__ (~andlabs@2607:fb90:f806:e38:590e:4682:7a72:f613)
[19:22:39] *** Quits: andlabs (~andlabs@2607:fb90:f807:3bfc:d547:a52e:c2f0:f457) (Ping timeout: 256 seconds)
[19:23:04] *** Quits: kulak (~kulak@user/kulak) (Read error: Connection reset by peer)
[19:23:24] *** gggpkm_ is now known as gggpkm
[19:24:43] *** Joins: kulak (~kulak@user/kulak)
[19:24:57] *** Joins: andlabs (~andlabs@172.58.227.50)
[19:25:44] *** Quits: andlabs_ (~andlabs@172.58.230.229) (Ping timeout: 272 seconds)
[19:27:11] *** Quits: andlabs__ (~andlabs@2607:fb90:f806:e38:590e:4682:7a72:f613) (Ping timeout: 256 seconds)
[19:27:57] <siXy> HisShadow: yes, it can.
[19:29:08] <HisShadow> thanks
[19:30:27] *** Quits: kulak (~kulak@user/kulak) (Ping timeout: 265 seconds)
[19:30:29] <siXy> HisShadow: note also that on linux there are two possible resolvers - one in cgo, that behaves the same way as "normal" os lookups, and a pure go implementation that doesn't respect nsswitch
[19:30:39] <siXy> (plus has other differences)
[19:33:15] <HisShadow> siXy: I want to use the go resolver, because cgo one blocks an OS thread instead of a go thread as said in the documentation
[19:36:02] *** Joins: kulak (~kulak@user/kulak)
[19:36:10] *** Quits: Xjs (~jannis@user/xjs) (Quit: Good night.)
[19:37:54] *** Joins: andlabs_ (~andlabs@2607:fb90:f80f:f08b:e981:56fe:cccf:3e8f)
[19:41:08] *** Joins: andlabs__ (~andlabs@172.58.227.107)
[19:41:34] *** Quits: andlabs (~andlabs@172.58.227.50) (Ping timeout: 272 seconds)
[19:43:22] *** Joins: andlabs (~andlabs@2607:fb90:f804:797a:3daf:bf18:e136:287a)
[19:44:45] *** Quits: andlabs_ (~andlabs@2607:fb90:f80f:f08b:e981:56fe:cccf:3e8f) (Ping timeout: 256 seconds)
[19:46:15] *** Quits: gggpkm (~gggpkm@60.10.194.47) (Remote host closed the connection)
[19:46:54] *** Quits: andlabs__ (~andlabs@172.58.227.107) (Ping timeout: 258 seconds)
[19:47:52] *** Quits: cync (~blah@192.180.187.81.in-addr.arpa) (Quit: No Ping reply in 180 seconds.)
[19:48:01] *** Joins: s-video (~s-video@c-73-17-214-8.hsd1.ma.comcast.net)
[19:49:14] *** Joins: cync (~blah@192.180.187.81.in-addr.arpa)
[19:50:59] *** Quits: andlabs (~andlabs@2607:fb90:f804:797a:3daf:bf18:e136:287a) (Ping timeout: 256 seconds)
[19:51:33] *** Joins: Xjs (~jannis@user/xjs)
[19:51:34] *** Quits: Xjs (~jannis@user/xjs) (Client Quit)
[19:51:54] *** Quits: krjst (~krjst@2604:a880:800:c1::16b:8001) (Quit: bye)
[19:52:31] *** Joins: krjst (~krjst@2604:a880:800:c1::16b:8001)
[20:05:22] *** Joins: _mrlemke_ (~mrlemke@208.74.105.200)
[20:07:56] *** Joins: mrlemke_ (~mrlemke@208.74.105.200)
[20:08:08] *** Quits: mrlemke (~mrlemke@208.74.105.200) (Ping timeout: 252 seconds)
[20:08:27] *** Joins: andlabs (~andlabs@ool-ad034a4d.dyn.optonline.net)
[20:10:04] *** Quits: _mrlemke_ (~mrlemke@208.74.105.200) (Ping timeout: 272 seconds)
[20:12:12] *** Quits: Snyp (~rksht@49.207.196.247) (Quit: WeeChat 3.2)
[20:13:04] *** Quits: dalan (~dalan@118.102.85.89) (Ping timeout: 246 seconds)
[20:13:34] *** Joins: bodhi (~bodhi@c-73-93-87-220.hsd1.ca.comcast.net)
[20:13:53] *** Quits: yoonkn (~user@175.197.208.79) (Read error: Connection reset by peer)
[20:21:30] *** Quits: s-video (~s-video@c-73-17-214-8.hsd1.ma.comcast.net) (Ping timeout: 240 seconds)
[20:24:18] *** Quits: unmanbearpig (~unmanbear@45.76.95.141) (Quit: unmanbearpig)
[20:26:22] *** Joins: Torr (~Torr@user/torr)
[20:33:29] *** Quits: yelnah (~felix@2001:44b8:30ae:d8:6f0:21ff:fe3c:d4d7) (Ping timeout: 256 seconds)
[20:34:17] *** Joins: yelnah (~felix@14-201-231-38.tpgi.com.au)
[20:40:41] *** Quits: dmathieu (~textual@laubervilliers-659-1-148-137.w92-154.abo.wanadoo.fr) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[20:43:26] *** Quits: novns (~novns@user/novns) (Quit: ZNC 1.8.2 - https://znc.in)
[20:44:02] *** Joins: novns (~novns@user/novns)
[20:50:16] *** Joins: s-video (~s-video@c-73-17-214-8.hsd1.ma.comcast.net)
[20:51:03] <mickey> what would be a good way to convert a csv file to a golang map, like not on the fly but actually write a map to a go file
[20:52:35] <Sam> Are you asking how to read in the CSV or how to write out a map in Go syntax to a file?
[20:53:17] <mickey> i know how to read the csv file. im asking about the second part, how to write what i read to a .go file that has a map with the data from the csv
[20:53:47] <ikke> https://golang.org/pkg/text/template/ for example
[20:54:10] <Sam> Depending on the types involved you can just use the %#v with fmt.Print functions: https://play.golang.org/p/K__s7GBVWFk
[20:54:49] <Sam> For non-primitive types you may have to implement fmt.GoStringer to make that work: https://pkg.go.dev/fmt#GoStringer
[21:00:07] *** Joins: atriix (~atriix@c83-254-2-32.bredband.tele2.se)
[21:00:07] *** Quits: burningserenity (~burningse@2603:9001:f01:ad99::1000) (Ping timeout: 256 seconds)
[21:00:18] *** Joins: burningserenity (~burningse@102.129.153.79)
[21:03:28] *** Joins: dmathieu (~textual@78.203.212.55)
[21:03:30] *** Quits: arcatech (~arcatech@user/arcatech) (Ping timeout: 240 seconds)
[21:04:57] *** Quits: davidkrauser (~davidkrau@user/davidkrauser) (Quit: Leaving)
[21:07:14] *** Joins: arcatech (~arcatech@user/arcatech)
[21:13:46] *** Quits: dmathieu (~textual@78.203.212.55) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[21:15:23] *** Quits: absc (~absc@dynamic-adsl-94-34-217-240.clienti.tiscali.it) (Quit: Leaving.)
[21:16:35] <bodhi> in viper is there a way to define a flag that is mandatory for most options but not for a couple. I have a --loader-file pflag that is mandatory but it does not need to be performed if the option is just "version"
[21:17:50] *** Quits: burningserenity (~burningse@102.129.153.79) (Ping timeout: 272 seconds)
[21:18:37] *** Joins: oxum (~oxum@136.185.148.86)
[21:18:58] <bodhi> hmm wrong question, this is a question about cobra.
[21:21:41] *** Joins: NCS_One (~NCS_One@bl11-90-133.dsl.telepac.pt)
[21:23:33] *** Quits: oxum (~oxum@136.185.148.86) (Ping timeout: 268 seconds)
[21:27:05] *** Quits: MrFantastik (~Thunderbi@cpe-69-204-101-67.buffalo.res.rr.com) (Quit: MrFantastik)
[21:27:31] *** Joins: MrFantastik (~Thunderbi@cpe-69-204-101-67.buffalo.res.rr.com)
[21:29:01] *** Quits: edrocks (~Ed@user/edrocks) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[21:30:19] *** Quits: OMGOMG (~bobrobert@poppy.ifi.uio.no) (Ping timeout: 272 seconds)
[21:31:15] *** Joins: OMGOMG (~bobrobert@poppy.ifi.uio.no)
[21:34:41] *** Joins: cuk (~cuk@176.92.161.207)
[21:36:27] *** Joins: pepee (~user@user/pepee)
[21:40:23] *** Joins: _rubik (~wgriggs@user/rubik/x-6853868)
[21:40:26] *** Joins: Guest86 (~Guest86@176.92.161.207)
[21:42:09] *** Quits: Guest86 (~Guest86@176.92.161.207) (Client Quit)
[21:43:03] *** Quits: pepee (~user@user/pepee) (Ping timeout: 258 seconds)
[21:47:24] *** Quits: cuk (~cuk@176.92.161.207) (Quit: leaving)
[21:48:32] *** Joins: cuk (~cuk@176.92.161.207)
[21:49:38] *** Quits: cuk (~cuk@176.92.161.207) (Client Quit)
[21:52:49] *** Quits: khyr0n (~khyr0n@2806:2f0:9140:1deb:3346:f463:745e:77a4) (Ping timeout: 246 seconds)
[21:54:34] *** Quits: Guest2024 (~ryan@75-109-154-192.nbrncmtk01.res.dyn.suddenlink.net) (Ping timeout: 272 seconds)
[21:55:12] *** Quits: dany74q (~dany74q@IGLD-84-229-190-86.inter.net.il) (Ping timeout: 272 seconds)
[21:56:29] *** Joins: pepee (~user@user/pepee)
[21:56:48] *** Quits: s-video (~s-video@c-73-17-214-8.hsd1.ma.comcast.net) (Ping timeout: 256 seconds)
[22:04:57] *** Quits: Ergo^ (~ergo@91.238.59.144) (Remote host closed the connection)
[22:06:29] <mickey> x := []string{"a","b"}; y := []string{"c"}; x = append(x,y); throws an error that cannot use y (map index expression of type []string) as string value in argument to append?
[22:06:36] <mickey> what am i missing here?
[22:06:50] *** Quits: andlabs (~andlabs@ool-ad034a4d.dyn.optonline.net) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[22:07:10] <ikke> mickey: append can only be used to add single elements, not other lists
[22:07:33] <_rubik> mickey: append(x,y...)
[22:07:43] <ikke> right
[22:08:01] <mickey> i would have never thought of that one. thanks.
[22:08:20] <mickey> ikke the manual says exactly that, but i didn't imagine "slice..." actually meant "..."
[22:10:44] *** Joins: andlabs (~andlabs@ool-ad034a4d.dyn.optonline.net)
[22:11:08] *** Joins: be3uykpy (~be3uykpy@141.226.9.247)
[22:12:23] *** Joins: oxum (~oxum@136.185.148.86)
[22:16:11] *** Quits: oxum (~oxum@136.185.148.86) (Remote host closed the connection)
[22:16:30] *** Quits: dr0n (~nabromov@92.40.255.115.threembb.co.uk) (Quit: WeeChat 2.8)
[22:16:54] *** Joins: dmathieu (~textual@78.203.212.55)
[22:17:50] *** Joins: dr0n (~nabromov@94.11.23.235)
[22:23:15] *** Quits: andlabs (~andlabs@ool-ad034a4d.dyn.optonline.net) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[22:24:59] *** Joins: zoey (~zoey@2a02:8084:a080:9e00:3fae:994c:3fdc:274d)
[22:27:30] *** Joins: andlabs (~andlabs@ool-ad034a4d.dyn.optonline.net)
[22:28:33] *** Joins: src (~src@user/src)
[22:29:25] *** Quits: src (~src@user/src) (Client Quit)
[22:29:26] *** Joins: sayo (~sayo@user/sayo)
[22:30:10] *** Joins: src (~src@user/src)
[22:30:27] *** Quits: src (~src@user/src) (Client Quit)
[22:30:51] *** Joins: src (~src@user/src)
[22:32:26] *** Quits: dmathieu (~textual@78.203.212.55) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[22:33:53] <mikoto-chan> what's the difference between methods and functions that take structs as input parameters?
[22:33:56] *** Quits: TFKyle (~kyle@64.201.205.70) (Quit: :q!)
[22:34:21] <foobaz> none, it's just syntax
[22:35:15] *** Joins: davidkrauser (~davidkrau@user/davidkrauser)
[22:36:21] <fizzie> While it's arguably still "just syntax", the fact that methods can be promoted by embedding while regular functions can't is maybe a bit of a difference.
[22:37:41] *** Joins: thriqon (~thriqon@HSI-KBW-46-223-162-105.hsi.kabel-badenwuerttemberg.de)
[22:39:26] *** Quits: dr0n (~nabromov@94.11.23.235) (Ping timeout: 265 seconds)
[22:39:49] *** Quits: be3uykpy (~be3uykpy@141.226.9.247) (Quit: Leaving)
[22:40:05] *** Joins: be3uykpy (~be3uykpy@141.226.9.247)
[22:43:58] <j416> also, types with methods can satisfy an interface; plain functions cannot.
[22:51:35] *** Joins: oxum (~oxum@136.185.148.86)
[22:51:36] <mikoto-chan> fizzie: what do you mean promoted ;-;
[22:52:49] *** Joins: dmathieu (~textual@78.203.212.55)
[22:52:53] *** Quits: mrlemke_ (~mrlemke@208.74.105.200) (Ping timeout: 256 seconds)
[22:52:56] <fizzie> When a struct type embeds another, fields and methods of the type being embedded may be /promoted/, meaning accessible as if they were fields/methods of the type doing the embedding.
[22:53:44] <fizzie> (The details are a little more subtle than that w.r.t. pointers, but roughly speaking.)
[22:54:13] <mikoto-chan> and what do you mean by embedding? I'm new to Go ...
[22:55:51] <fizzie> A struct field without a name is called an /embedded field/. There's probably better materials for learning the language than asking random questions in IRC, though. Like the Go Tour... well, except I don't remember if it covers embedding.
[22:56:22] *** Joins: currybullen (~curry@h-81-170-128-138.A258.priv.bahnhof.se)
[22:56:26] *** Quits: oxum (~oxum@136.185.148.86) (Ping timeout: 252 seconds)
[22:56:42] <foobaz> every go programmer should read the spec top to bottom: https://golang.org/ref/spec
[22:56:57] <foobaz> it doesn't take that long and it ensures there's nothing you're missing
[22:57:39] <fizzie> https://golang.org/doc/effective_go#embedding for a less-reference-material treatment of the topic; looks like the tour either skips it, or I just missed it.
[22:58:14] <mikoto-chan> fizzie: I went over the Go tour ._.
[22:58:36] <mikoto-chan> foobaz: interesting ... thanks
[22:59:33] *** Joins: mrlemke_ (~mrlemke@208.74.105.200)
[23:04:35] *** Joins: damasceno (~damasceno@2.155.39.93.dyn.user.ono.com)
[23:08:49] <davidkrauser> has anyone here spent much time with hash/maphash? I'd like to use a specified seed value so that I can have deterministic behavior when marshalling maps between processes (and to disk). It doesn't appear to let you use anything other than a random seed :-/
[23:09:41] <davidkrauser> maybe it's a bad idea to use this package for that
[23:10:39] *** Quits: damasceno (~damasceno@2.155.39.93.dyn.user.ono.com) (Quit: Client closed)
[23:12:14] <Tv_> davidkrauser: you're better off sorting the keys and marshaling in that order
[23:12:52] <Tv_> davidkrauser: maphash ain't gonna make any guarantees about changes over time, either
[23:13:55] <davidkrauser> Tv_: yeah, that's what I was thinking. It just feels like a bad idea to roll my own string -> array index hashing function
[23:14:17] <davidkrauser> but if I want determinism and guarantees about changes over time, that may be the best approach
[23:14:44] <Tv_> davidkrauser: what index hashing?
[23:15:09] <Tv_> davidkrauser: at marshal time, extract keys to slice. sort slice. iterate slice and marshal key and m[key]
[23:15:33] <foobaz> Tv_: ((string) -> (array index)) hashing
[23:15:47] <j416> and if your marshalling format happens to be json, json packages does just that for you
[23:15:54] <j416> fwiw.
[23:15:58] <Tv_> yeah
[23:16:00] <j416> s/packages/package/
[23:16:07] <Tv_> i don't see a reason to change how you store the data, just do the work at marshal time
[23:16:39] <Tv_> (if you were to marshal the same data very very often, then i'd suggest switching to a btree)
[23:16:50] *** Joins: s-video (~s-video@2601:196:4b00:e70:ecb7:b07a:13dc:1848)
[23:20:16] <davidkrauser> Tv_: ahh, sorry, I didn't explain clearly. I'm not storing a list of string keys anywhere - I have an array in memory, and when new data comes in, part of that data is used with maphash to find the right location in the array to store it. The input data is tossed.
[23:21:02] <davidkrauser> I could start storing the inputs to maphash, but that's a lot of data that I don't _really_ care about. Just working around how maphash works
[23:21:19] <Tv_> davidkrauser: okay, and then you rely on the array order to be stable across all kinds of things, so hash("foo") once and hash("foo") later just hit the same location
[23:21:30] <davidkrauser> yup :-)
[23:21:33] <Tv_> davidkrauser: and you're sure you can ignore collisions?
[23:21:38] <davidkrauser> yes
[23:21:47] <Tv_> davidkrauser: okay. i'd suggest making your own hash, then
[23:22:07] <Tv_> https://golang.org/pkg/hash/fnv/ or such would be very easy
[23:22:07] <davidkrauser> it's unfortunate, but I think that's the right approach
[23:22:14] <davidkrauser> thank you Tv_
[23:22:27] <Tv_> davidkrauser: maphash is *intentionally* underspecified
[23:23:12] <siXy> If you care about speed a lot, https://github.com/minio/highwayhash should be faster and roughly as secure
[23:24:08] <Tv_> yeah there's things better than fnv, but that's sort of not the tough part of that, they're all interchangeable once you have it going
[23:24:40] <Tv_> fnv is an easy recommendation for first step because it's in the stdlib
[23:24:55] <siXy> *nod* just throwing it out there as this stuff isn't super discoverable unless you already know what you're looking for
[23:25:22] <foobaz> wouldn't it be safer to use a cryptographic hash?
[23:25:33] *** Quits: dmathieu (~textual@78.203.212.55) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[23:25:51] *** Joins: Jonathan22 (jonathansc@pear.ircnow.org)
[23:26:14] <siXy> you generally don't need a crypto hash for this purpose. You only care about collision resistance, and with modern fast hashes, that's generally considered good enough for most purposes.
[23:26:14] <foobaz> they're slower, but protect you against hash collision attacks
[23:26:44] <Tv_> seeded hashing is more important than crypto-safe hashing, for attacker-induced collisions
[23:29:24] *** Joins: dr0n (~nabromov@94.11.23.235)
[23:30:10] <siXy> foobaz: You're getting confused. These hashes are all called PRFs, and serve a different purpose from a CHF - but that doesn't mean that they're less suitable for this purpose, nor that they're nessecarily any less collision resistant when used in this way.
[23:30:20] *** Quits: s-video (~s-video@2601:196:4b00:e70:ecb7:b07a:13dc:1848) (Quit: Leaving)
[23:33:32] <foobaz> so PRF is sufficient when the seed is kept secret from the attacker, and CHF is necessary when the attacker knows the salt, is that right?
[23:34:29] <Tv_> foobaz: if the attacker can run the same hash function as you (knowing all inputs), they can choose colliding keys, regardless of how crypto-safe it is
[23:34:48] <Tv_> well, i mean
[23:34:51] <Tv_> crypto-safe being a spectrum
[23:34:54] <Tv_> for md5, they can
[23:35:01] <foobaz> wouldn't that be too computationally expensive?
[23:35:42] <Tv_> foobaz: the thing about the collision mechanisms tends to be that you can produce new collisions once an attack exists, the real trade-off is they have to include "binary noise" in the input
[23:35:53] <Tv_> foobaz: and yes properly crypto-safe hash makes that much much more expensive
[23:36:03] <Tv_> foobaz: but the real trick is to not let the attacker know your seed
[23:36:26] <foobaz> how is the seed different than a salt?
[23:36:39] *** Parts: Jonathan22 (jonathansc@pear.ircnow.org) ()
[23:36:46] <foobaz> there's one seed for the entire hashmap, instead of one salt per entry?
[23:37:10] <Tv_> foobaz: i've never heard of per-item salt used for real...?
[23:37:21] <Tv_> i mean, you'd need to store *that* somewhere
[23:37:34] <foobaz> /etc/shadow does right?
[23:37:40] <Sam> I don't have original context, but one salt per-item is how literally every web login thing does it.
[23:37:43] <Sam> And /etc/shadow, yes.
[23:37:44] <davidkrauser> Tv_: that's a pretty common practice for user logins
[23:37:45] <Tv_> foobaz: that's not this kind of hashing though
[23:38:11] <Tv_> nobody stores user account data in a bucket decided by their password hash
[23:38:16] <foobaz> login hashing is the kind i'm familiar with, so i'm trying to draw mental connections between that and this seeded prf hashing you're talking about now
[23:38:35] <Tv_> foobaz: okay so imagine you have [100][]int
[23:39:01] <Tv_> foobaz: that's a simple but reasonably real-world way to implement a hash table (e.g. go map)
[23:39:20] <Tv_> foobaz: where is key k located? in the slice at item hash(k) % 100 of that array
[23:39:32] <siXy> foobaz: It's more that for this application, the only thing that matters is the collision resistance. All the algos mentioned so far are in some sense of the word "cryptographic" hashes, but hashing algorithms like sha-2, blake2b etc provide a lot of extra things (at the cost of significant slowness) that you don't need if all you want is a secure way of creating a map key.
[23:39:53] <Tv_> foobaz: without a seed, if k comes from an attacker, they can cause you to store 999999999 items, that all go in the same slice
[23:40:07] <Tv_> foobaz: and now your hashmap is just a slice, and your program slows down -> that's a denial of service attack
[23:40:22] <foobaz> i'm with you so far
[23:40:35] <Tv_> foobaz: good, because that's the end of the story ;)
[23:40:38] <foobaz> so is the seed hashed after the input data, like a password hash is?
[23:40:54] <foobaz> because if it was hashed before the input data, you could do a preimage attack
[23:41:02] <Tv_> foobaz: generally you use a special keyed-hash algorithm
[23:41:09] <foobaz> ah ok
[23:41:12] <Tv_> foobaz: but a dumb version would be to first hash the seed, then hash the input
[23:41:44] <foobaz> thanks for the explanation
[23:42:15] <Tv_> foobaz: any day. thanks for being a habitual learner, it's always nice to see.
[23:42:27] *** Joins: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au)
[23:43:58] <Tv_> so to re-summarize, yes a crypto-safe hash makes the attackers job a lot harder too, but 1) for older hashes like md5, not as much so as seeding and 2) you burn cpu unnecessarily, when a keyed hash can get you that protection much cheaper
[23:44:12] <Tv_> and a hash table implementation with a slow hash is just a weird thing ;)
[23:47:17] *** Quits: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au) (Ping timeout: 256 seconds)
[23:51:16] *** Joins: jjonah (~jjonah@p200300d5d723c400dea632fffeb3342f.dip0.t-ipconnect.de)
[23:51:31] *** Joins: dmathieu (~textual@78.203.212.55)
[23:57:48] *** Joins: noarb (~noarb@user/noarb)
