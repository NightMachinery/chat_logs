[00:06:19] *** Joins: white5moke (~white5mok@ip72-219-109-30.oc.oc.cox.net)
[00:11:00] *** Quits: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be) (Quit: The Lounge - https://thelounge.chat)
[00:11:15] *** Quits: white5moke (~white5mok@ip72-219-109-30.oc.oc.cox.net) (Ping timeout: 260 seconds)
[00:13:42] *** Joins: uros (~Thunderbi@2001:8a0:6074:ad00:9923:ba2e:9791:afeb)
[00:21:38] *** Quits: uros (~Thunderbi@2001:8a0:6074:ad00:9923:ba2e:9791:afeb) (Quit: uros)
[00:32:53] *** balrog_ is now known as balrog
[00:36:10] *** Quits: ablutor_ (~wasscher@145.131.24.183) (Ping timeout: 252 seconds)
[00:38:26] *** Joins: white5moke (~white5mok@ip72-219-109-30.oc.oc.cox.net)
[00:45:56] *** Quits: pcero (~pcero@187.135.226.136) (Ping timeout: 245 seconds)
[00:54:44] *** Joins: ablutor_ (~wasscher@145.131.24.183)
[01:24:06] *** Quits: white5moke (~white5mok@ip72-219-109-30.oc.oc.cox.net) (Remote host closed the connection)
[01:36:09] *** Joins: Guest3672 (~Guest36@2601:5c0:c280:8da0:e129:ad16:37d1:4461)
[01:39:05] <Guest3672> b'E\xa57d\xdc\xb6p\xc0\x17p\xb9\
[01:39:39] <Guest3672> I am seeing values as complex values (bytes) written as in this format. 
[01:40:18] <Guest3672> How do I see this in complex values format (a+bj), in python? 
[01:47:28] *** Joins: white5moke (~white5mok@ip72-219-109-30.oc.oc.cox.net)
[02:00:58] *** Quits: ptrkrysik (~piotr@109.95.143.27) (Quit: Leaving.)
[02:02:57] *** Quits: Guest3672 (~Guest36@2601:5c0:c280:8da0:e129:ad16:37d1:4461) (Ping timeout: 256 seconds)
[02:14:20] *** Quits: BrianG61UK (~BrianG61U@2a02:8010:66b7:dddd:4887:170f:cb6:7c60) (Ping timeout: 260 seconds)
[02:14:20] *** Quits: BrianG61UK_ (~BrianG61U@2a02:8010:66b7:dddd:fc6c:1e1:f3c:ef43) (Ping timeout: 260 seconds)
[02:18:16] *** Joins: BrianG61UK (~BrianG61U@2a02:8010:66b7:dddd:4887:170f:cb6:7c60)
[02:18:24] *** Joins: BrianG61UK_ (~BrianG61U@2a02:8010:66b7:dddd:fc6c:1e1:f3c:ef43)
[02:20:07] *** Quits: goldrak (~goldrak@bl16-27-108.dsl.telepac.pt) (Ping timeout: 260 seconds)
[02:22:00] *** Quits: Macuser (~Macuser@216.30.159.201) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[02:31:20] <[Sec]> import struct
[02:31:26] <[Sec]> struct.unpack('ff',b'E\xa57d\xdc\xb6p\xc0')
[03:01:19] <nickoe> willcode4[m]: ok
[03:25:51] *** Quits: white5moke (~white5mok@ip72-219-109-30.oc.oc.cox.net) (Quit: Leaving...)
[04:03:40] *** Quits: linext (~linext@pool-108-53-128-199.nwrknj.fios.verizon.net) (Read error: Connection reset by peer)
[04:19:56] *** Joins: pcero (~pcero@187.135.226.136)
[04:36:22] *** Joins: Macuser (~Macuser@216.30.159.201)
[05:10:58] <Hash[m]> Curious what other tools people use besides GNURadio? Matlab and others like that, and why?
[05:14:28] <Zero_Chaos> urh is pretty popular for reversing
[05:14:44] <Zero_Chaos> I mean, it uses gnuradio, like everything else :-)
[05:26:48] <muaddib[m]> Universal Radio Hacker
[05:26:49] <muaddib[m]> Inspectrum 
[05:26:49] <muaddib[m]> And I just learned about “Hobbits” for bit level stuff. 
[05:26:49] <muaddib[m]> I gave SigDigger a quick demo at the GRCON CTF last month but it wasn’t doing exactly what I wanted. Really URH is pretty powerful if you know what you’re after. Let’s you label but fields which is helpful. I’ve started on some smartmeters with it and it looks promising for that too. 
[05:32:29] <sammp[m]> What's "Hobbits"?
[05:33:34] <sammp[m]> sammp[m]: Found it! https://mahlet-inc.github.io/
[05:34:02] <sammp[m]> Initial searching just gets LOTR references :)
[05:34:50] <Hash[m]> I saw Hobbits on Twitter, it looked pretty cool but haven’t tried it yet
[05:40:48] <sammp[m]> https://github.com/Mahlet-Inc/hobbits has a "software-defined-radio" tag.  Is this widely used for SDR?
[05:41:33] *** Quits: Macuser (~Macuser@216.30.159.201) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[05:45:04] <sammp[m]> s/https://github.com/Mahlet-Inc/hobbits has a "software-defined-radio" tag.  Is this widely used for SDR?/https://github.com/Mahlet-Inc/hobbits has a "software-defined-radio" tag.  Is this widely used for/with SDRs?/
[07:26:08] *** Quits: pcero (~pcero@187.135.226.136) (Quit: Konversation terminated!)
[07:29:00] *** Joins: pcero (~pcero@187.135.226.136)
[07:52:51] *** Quits: pcero (~pcero@187.135.226.136) (Ping timeout: 260 seconds)
[09:07:34] *** Joins: white5moke (~white5mok@ip72-219-109-30.oc.oc.cox.net)
[10:08:21] *** Joins: jemius (~jemius@2a01:4f8:c0c:8564::1)
[10:08:22] *** Joins: ptrkrysik (~piotr@apn-37-249-14-15.dynamic.gprs.plus.pl)
[10:17:44] *** Quits: ptrkrysik (~piotr@apn-37-249-14-15.dynamic.gprs.plus.pl) (Ping timeout: 268 seconds)
[10:46:28] *** Joins: ptrkrysik (~piotr@194.29.160.241)
[10:46:45] *** Quits: white5moke (~white5mok@ip72-219-109-30.oc.oc.cox.net) (Quit: Leaving...)
[10:53:12] *** Joins: uros (~Thunderbi@2001:8a0:6074:ad00:9923:ba2e:9791:afeb)
[11:04:08] <linge93[m]> Hi,guys,I use ofdm_tx/ofdm_rx.grc to send and receive a text file via usrpb210, the content is "hello world", when I set the "file sink" on the sender to "no repeat", the receiver did not receive it correctly, but when I set When "file sink" is set to "yes repeat", you can see that many repeated "hello world" are displayed in the received file. I want to know why I can't receive it successfully when I set "no repeat"? (Of course, I open the
[11:04:08] <linge93[m]> receiving flow diagram first)
[11:08:44] <linge93[m]> Is there any way to solve it?
[11:19:37] *** Joins: goldrak (~goldrak@bl16-27-108.dsl.telepac.pt)
[11:26:44] <linge93[m]> The parameters of USRP are set as follows
[11:27:09] * linge93[m] uploaded an image: (22KiB) < https://libera.ems.host/_matrix/media/r0/download/gnuradio.org/912efb1c3b52264dcbbf62b36c23a50a6ace98ad/1.png >
[12:22:07] *** Joins: ns (~ns@cpe-45-49-13-246.socal.res.rr.com)
[12:22:27] *** Quits: ns (~ns@cpe-45-49-13-246.socal.res.rr.com) (Client Quit)
[12:22:41] *** Joins: nspuma (~nspuma@cpe-45-49-13-246.socal.res.rr.com)
[12:30:09] *** Quits: WalaaHamdiAl-Qwi (~walaaqwid@2001:470:69fc:105::1:41a) (Quit: You have been kicked for being idle)
[12:30:09] *** Quits: DaveCherkusN1AI[ (~dcherkusg@2001:470:69fc:105::fd17) (Quit: You have been kicked for being idle)
[12:30:09] *** Quits: rlmarlow[m] (~rlmarlowg@2001:470:69fc:105::ebe3) (Quit: You have been kicked for being idle)
[12:36:16] *** Quits: nspuma (~nspuma@cpe-45-49-13-246.socal.res.rr.com) ()
[13:06:57] *** Quits: koma (~koma@user/koma) (Quit: Arc)
[13:08:25] *** Joins: koma (~koma@user/koma)
[13:21:08] <rodrirq[m]> Does anyone know, in the QPSK example https://wiki.gnuradio.org/index.php/Guided_Tutorial_PSK_Demodulation, with which value of delay the input and output are equal?
[14:13:29] *** Joins: linext (~linext@pool-108-53-128-199.nwrknj.fios.verizon.net)
[14:50:09] *** Joins: __alex (~alex@ip5f5afef3.dynamic.kabel-deutschland.de)
[14:53:24] *** Quits: ptrkrysik (~piotr@194.29.160.241) (Quit: Leaving.)
[14:59:14] *** Joins: ptrkrysik (~piotr@194.29.160.241)
[15:04:03] *** Quits: ptrkrysik (~piotr@194.29.160.241) (Ping timeout: 260 seconds)
[15:06:20] *** Joins: ptrkrysik (~piotr@194.29.160.241)
[15:10:09] <BarryDuggan[m]> rodrirq: as I remember, it's 53, but I haven't run it in a while. you have to wait 2-3 seconds between each change of delay for things to settle.
[15:17:52] <rodrirq[m]> I am working with GNU Radio 3.8, so I had to use the CMA Equalizer instead of the Linear Equalizer
[15:18:10] <rodrirq[m]> I managed to get a good result, but with 53 of delay the do not match Barry Duggan 
[15:18:16] <rodrirq[m]> Maybe that is the reason
[15:32:19] *** Joins: AdamHorden (~adam.hord@host81-150-189-121.in-addr.btopenworld.com)
[15:50:15] *** Joins: Guest75 (~Guest75@103.152.127.66)
[15:50:49] *** Joins: arch3r- (~ben@185.66.194.79)
[15:51:39] *** Quits: arch3r (~ben@185.66.194.78) (Ping timeout: 260 seconds)
[15:52:13] *** arch3r- is now known as arch3r
[16:38:19] *** Quits: ptrkrysik (~piotr@194.29.160.241) (Ping timeout: 260 seconds)
[16:45:15] *** Quits: Guest75 (~Guest75@103.152.127.66) (Ping timeout: 256 seconds)
[17:02:59] *** Quits: BrianG61UK (~BrianG61U@2a02:8010:66b7:dddd:4887:170f:cb6:7c60) (Quit: Leaving)
[17:08:20] *** Joins: BrianG61UK (~BrianG61U@2a02:8010:66b7:dddd:4887:170f:cb6:7c60)
[17:18:52] *** Joins: Macuser (~Macuser@216.30.159.201)
[17:21:47] *** Joins: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be)
[17:22:37] *** Quits: superkuh (~superkuh@user/superkuh) (Ping timeout: 268 seconds)
[17:24:02] <Hash[m]> <linge93[m]> "Hi,guys,I use ofdm_tx/ofdm_rx...." <- Perhaps the transmitter hasn’t had time to settle when enabled for a single transmission but the subsequent ones make it through. I noticed something like that sending bursts and increased my preamble so everything had time to turn on and settle before the data part of the packet was transmitted 
[17:27:01] *** Joins: superkuh (~superkuh@user/superkuh)
[17:33:33] <Macuser> superkuh TI's equation for processing gain is whack.. it's 10*log10(complex sampling rate / filter_BW)
[17:33:45] <Macuser> that only gives me 3 dB assuming a filter bandwidth of half the sampling rate
[17:34:05] <Macuser> 10log10( sample_rate x integration_time ) seems more valid, but I don't know where it came from
[17:40:55] <funkylab[m]> 3 dB sounds correct
[17:41:10] <funkylab[m]> half bandwidth = half as much noise power
[17:41:24] <funkylab[m]> assuming all signal is within that half bandwidth = equal signal power
[17:41:41] <funkylab[m]> -> SNR_after = 2·SNR_before
[17:41:47] <Macuser> but... GPS has a 43dB processing gain
[17:41:47] <funkylab[m]> = 3dB improvement
[17:41:53] <funkylab[m]> yes
[17:42:10] <funkylab[m]> it also has a 10.23 MHz bandwidth, IIRC, and a few bits per second of data rate
[17:42:50] <funkylab[m]> it's just that the bandwidth here isn't a helpful measure, alone
[17:43:01] <funkylab[m]> because it's a spreading system
[17:43:13] <Macuser> yeah the equation is 10*log10(chipping_rate / data_rate) 
[17:43:25] <Macuser> so why the discrepancy? How do I achieve 43dB processing gain
[17:43:34] <Macuser> the actual bandpass bandwidth of GPS L1 is only 2.046 MHz
[17:43:34] <funkylab[m]> there's no discrepancy
[17:44:11] <funkylab[m]> you're applying a formula that assumes white noise and narrowband signal filtering to a system that assumes white signal 
[17:44:28] <funkylab[m]> so... not gonna give you the right number
[17:44:57] <Macuser> oh 
[17:45:00] <Macuser> true.
[17:45:59] <Macuser> so that's when I introduce this formula: 10*log10( sample_rate * integration_time )
[17:46:04] <Macuser> this can easily give me 43 dB
[17:46:14] <Macuser> using complex sampling rate and integration time in milliseconds
[17:46:24] *** Joins: jason[m]123 (~jasongnur@2001:470:69fc:105::1:2602)
[17:46:53] <Macuser> in fact, I need 8 ms of integration time
[17:46:55] *** Quits: drewlander (~drewlande@173-80-249-48.bklycmtk03.res.dyn.suddenlink.net) (Ping timeout: 260 seconds)
[17:46:57] <Macuser> to achieve 43dB
[17:48:20] *** Joins: drewlander (~drewlande@173-80-249-48.bklycmtk03.res.dyn.suddenlink.net)
[17:49:27] *** Joins: dionys (dionys@user/dionys)
[17:53:45] <Macuser> doable.. we'll see if I need a better clock or not.
[18:06:08] *** Joins: bquist[m] (~bquistmat@2001:470:69fc:105::1:2606)
[18:23:09] <muaddib[m]> <Hash[m]> "I saw Hobbits on Twitter, it..." <- I had problems installing it. It used “Conan”? I think it’s a package or dependency manager. Something like that. Anyways, I did it on my Ubuntu 18 machine, gonna try on my 20 machine soon. 
[18:23:50] *** Joins: Clinkz (~hi@37.231.200.252)
[18:25:13] <muaddib[m]> <sammp[m]> "https://github.com/Mahlet-Inc/..." <- I’ve only seen it used in post-demod bit visualization. It’s a good way to do pattern ident with your eyes. Sometimes you need to shift bits around after they come out of demod. You can look for commonalities like preambles/sync or other PDU similarities. 
[18:29:56] <bpadalino> Macuser: the bitrate is 50 bps .. so integration time is 1/50 = 20ms .. the chipping rate is 1.023e6 .. 10*log10( 20e-3 * 1.023e6 ) = 43.1 dB .. yes?
[18:30:19] <Macuser> yeah but my sample rate is 2.5 Msps
[18:30:21] <Macuser> complex
[18:30:31] <Macuser> because bandpass bandwidth of the signal is 2.046 MHz
[18:30:45] <Macuser> so I do 10*log10(8 ms * 2.5 MHz)
[18:30:58] <Macuser> to achieve 43dB
[18:31:08] <bpadalino> i don't think that's right
[18:33:21] <bpadalino> the processing gain is a function of the spreading done and how many chips you're integrating .. which doesn't have anything to do with the over the air bandwidth .. right ?
[18:41:57] <Macuser> well it's "processing" gain. it's gonna be dependent on how the signal gets sampled
[18:42:26] <bpadalino> that's absolutely incorrect
[18:42:42] <Macuser> your 1/50bps for 20 ms integration time makes sense.
[18:43:48] <bpadalino> processing gain is gain above the underlying base signaling, right? regardless of the system used underneath ?
[18:43:58] <Macuser> theoretically
[18:44:35] <bpadalino> so where is sample rate in that function ?
[18:47:52] <patchvonbraun[m]> Yeah processing gain is an inherent property of the signal itself. How it’s chipped etc. the degree of oversampling makes no difference to the processing gain calculation.
[18:49:10] *** Quits: jemius (~jemius@2a01:4f8:c0c:8564::1) (Quit: Leaving)
[19:12:38] <Macuser> yeah but you can't just assume I always get 43 dB of processing gain
[19:12:48] <Macuser> it depends on how much bandwidth I use, sampling rate
[19:12:49] *** Joins: ptrkrysik (~piotr@109.95.143.20)
[19:13:11] <Macuser> bpadalino I said complex sample rate = the bandwidth. 
[19:13:33] <funkylab[m]> Macuser: it doesn't depend on the bandwidth
[19:13:39] <Macuser> IF filter bandwidth
[19:13:44] <funkylab[m]> no
[19:13:46] <Macuser> but that's for narrowband signals
[19:13:50] <Macuser> GPS is spread spectrum (white)
[19:14:04] <bpadalino> Macuser: i think you have a fundamental misunderstanding of what processing gain is
[19:14:07] <Macuser> that's why I use sample rate * integration time
[19:14:18] <funkylab[m]> this whole "I filter out the spectrum so that I only see my signal only", that's done before
[19:14:23] <Macuser> ok so what you're telling me is I can assume I always have 43 dB of gain in my system
[19:14:30] <Macuser> that's definitely not right
[19:14:34] <funkylab[m]> it is
[19:14:57] <bpadalino> GPS was designed to have 43.1dB of processing gain in that part of the system, yes
[19:15:02] <funkylab[m]> if your spreading factor is fixed, you get a fixed processing gain 
[19:15:03] <Macuser> ok so let's say I sampled at 1 MHz... the bandpass signal of L1 is ~2 MHz
[19:15:31] <funkylab[m]> then you've violated nyquist and will probably not be getting a lock today.
[19:15:49] <Macuser> integration time indeed affects C/N0
[19:15:52] <bpadalino> Macuser: think of it like this .. do you get more processing gain if you sampled the same bandlimited signal at 10 MHz versus 1000 MHz ?
[19:16:21] *** Quits: ptrkrysik (~piotr@109.95.143.20) (Client Quit)
[19:17:03] <bpadalino> i have to go for now .. bbl
[19:22:28] <Macuser> yeah I see what you're saying
[19:22:41] <Macuser> but like you said... this assumes an integration time of 20 ms
[19:22:44] <Macuser> 1/50bps
[19:23:10] <Macuser> you better make sure your SDR system has this integration time
[19:23:23] <Macuser> most will not because of clock stability requirements
[19:23:36] <Macuser> that's my assumption anyway
[19:28:15] *** Joins: ptrkrysik (~piotr@109.95.143.20)
[19:30:08] *** Quits: joejoe[m] (~joejoegnu@2001:470:69fc:105::f89d) (Quit: You have been kicked for being idle)
[19:30:08] *** Quits: junagarhi[m] (~junagarhi@2001:470:69fc:105::eaca) (Quit: You have been kicked for being idle)
[19:43:45] <willcode4[m]> Clocks should be stable enough, but you need to do a search. Remember that real signals have Doppler on them.
[19:52:36] *** Quits: wolfshappen (~waff@irc.furworks.de) (Ping timeout: 245 seconds)
[19:53:19] <Macuser> yep
[19:54:01] <Macuser> i still think oversampling should increase processing gain from what I've read bpadalino 
[19:54:06] <Macuser> read it on stackexchange
[19:55:04] <Macuser> which is why I claim I can get the 43dB of processing gain in only 8 ms of integration time using a 2.5 Msps sampling rate
[19:56:19] *** Joins: wolfshappen (~waff@irc.furworks.de)
[19:58:04] *** Quits: ptrkrysik (~piotr@109.95.143.20) (Quit: Leaving.)
[20:05:14] <Macuser> Furthermore... do 10log10(1.023Msps x 20 ms). what do you get? 43.1 dB
[20:10:00] *** Quits: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[20:11:13] *** Joins: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be)
[20:11:31] *** Quits: wolfshappen (~waff@irc.furworks.de) (Ping timeout: 265 seconds)
[20:12:13] *** Joins: wolfshappen (~waff@irc.furworks.de)
[20:12:36] *** Quits: Macuser (~Macuser@216.30.159.201) (Quit: Textual IRC Client: www.textualapp.com)
[20:33:28] <willcode4[m]> Assuming good pre-filtering, oversampling can give you a little noise reduction. That is probably not called processing gain.
[20:46:39] *** Joins: white5moke (~white5mok@ip72-219-109-30.oc.oc.cox.net)
[20:48:55] *** Joins: pcero (~pcero@187.135.226.136)
[20:49:46] *** Joins: ptrkrysik (~piotr@109.95.143.20)
[20:55:09] <bob_n4hy[m]> It is processing gain and if you increase the size of the filter accumulator by a bit for every downsampling by four the dynamic range increases by 6 dB
[21:06:41] *** Quits: uros (~Thunderbi@2001:8a0:6074:ad00:9923:ba2e:9791:afeb) (Ping timeout: 264 seconds)
[21:10:12] <willcode4[m]> Right, it is processing gain, not coding gain. I read that wrong.
[21:12:56] <willcode4[m]> NVM, I have my definitions all mixed up 😀
[21:19:16] <bpadalino> the gain from the spreading is defined by the 43.1 dB number .. any SNR increase due to oversampling, or noise shaping/filtering is done on the base modulation
[21:20:01] <bpadalino> which is the part of the system in question .. and you won't get any extra processing in that area by just sampling faster
[21:27:26] *** Quits: pcero (~pcero@187.135.226.136) (Quit: Konversation terminated!)
[21:45:35] *** Quits: white5moke (~white5mok@ip72-219-109-30.oc.oc.cox.net) (Quit: Leaving...)
[22:25:08] *** Parts: rimpossible[m] (~rimpossib@2001:470:69fc:105::480e) ()
[22:28:48] *** Joins: jemius (~imperator@2001:16b8:2d7d:4b00:21eb:9e3d:79b3:8e6b)
[22:36:32] *** Quits: ptrkrysik (~piotr@109.95.143.20) (Quit: Leaving.)
[22:37:35] *** Joins: ptrkrysik (~piotr@109.95.143.20)
[22:41:02] *** Quits: cuoops (~cuoops@user/cuoops) (Ping timeout: 246 seconds)
[22:41:55] *** Joins: cuoops (~cuoops@user/cuoops)
[22:52:55] *** Quits: ptrkrysik (~piotr@109.95.143.20) (Ping timeout: 258 seconds)
[23:08:06] *** Joins: uros (~Thunderbi@bl5-152-18.dsl.telepac.pt)
[23:11:28] *** Joins: uros1 (~Thunderbi@2001:8a0:6074:ad00:9923:ba2e:9791:afeb)
[23:12:53] *** Quits: uros (~Thunderbi@bl5-152-18.dsl.telepac.pt) (Ping timeout: 246 seconds)
[23:12:53] *** uros1 is now known as uros
[23:15:10] *** Quits: uros (~Thunderbi@2001:8a0:6074:ad00:9923:ba2e:9791:afeb) (Client Quit)
[23:37:59] *** Joins: uros (~Thunderbi@2001:8a0:6074:ad00:9923:ba2e:9791:afeb)
