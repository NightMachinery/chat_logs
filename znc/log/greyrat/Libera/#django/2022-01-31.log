[00:00:22] *** Quits: pmb (~pmb@89-64-79-51.dynamic.chello.pl) (Quit: pmb)
[00:06:06] *** Joins: Kalov (~Thunderbi@181.226.96.240)
[00:13:29] *** Joins: slav0nic (slav0nic@python.su)
[01:16:58] *** Quits: ovnicraft (~ovnicraft@corp-179-49-44-28.uio.puntonet.ec) (Ping timeout: 260 seconds)
[01:17:55] *** Joins: ovnicraft (~ovnicraft@ftth-179-49-44-28.cue.celerity.ec)
[01:45:00] *** Joins: PantelicGR (~PantelicG@user/pantelicgr)
[01:51:52] *** Quits: urb4nm (~urb4nm@165.227.158.65) (Remote host closed the connection)
[01:52:11] *** Joins: urb4nm (~urb4nm@165.227.158.65)
[01:52:17] *** Quits: pepper (~pepper@user/pepper) (Ping timeout: 240 seconds)
[01:54:17] *** Quits: Spr0cket (sprocket@user/Spr0cket) (Quit: x)
[01:54:32] *** Joins: Spr0cket (sprocket@user/Spr0cket)
[02:05:50] *** Joins: pepper (~pepper@user/pepper)
[02:09:49] *** Quits: ovnicraft (~ovnicraft@ftth-179-49-44-28.cue.celerity.ec) (Ping timeout: 250 seconds)
[02:11:56] *** Joins: ovnicraft (~ovnicraft@ftth-179-49-44-28.cue.celerity.ec)
[02:19:43] *** Joins: blackout69 (~blackout6@net-109-117-245-237.cust.vodafonedsl.it)
[02:43:43] *** Joins: lumgwada (~lumgwada@user/lumgwada)
[02:47:09] *** Quits: Spr0cket (sprocket@user/Spr0cket) (Quit: x)
[02:57:34] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[03:03:45] *** Quits: ovnicraft (~ovnicraft@ftth-179-49-44-28.cue.celerity.ec) (Ping timeout: 250 seconds)
[03:07:00] *** Joins: ovnicraft (~ovnicraft@ftth-179-49-44-28.cue.celerity.ec)
[03:22:39] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Quit: My MacBook Pro has gone to sleep. ZZZzzzâ€¦)
[03:27:44] *** Quits: Haudegen (~quassel@178.115.237.87.static.drei.at) (Ping timeout: 256 seconds)
[03:34:51] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Ping timeout: 276 seconds)
[03:38:37] *** Parts: blackout69 (~blackout6@net-109-117-245-237.cust.vodafonedsl.it) ()
[03:45:27] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[03:47:47] *** Joins: audiobirb (~audio@user/audio)
[03:57:52] *** Joins: humanBird (~humanBird@2603-8001-7000-3642-5c1d-a0eb-1a0b-4e78.res6.spectrum.com)
[04:04:23] *** Joins: dodobrain (~dodobrain@user/dodobrain)
[04:13:20] *** Quits: slav0nic (slav0nic@python.su) (Ping timeout: 252 seconds)
[04:19:18] *** Quits: ovnicraft (~ovnicraft@ftth-179-49-44-28.cue.celerity.ec) (Ping timeout: 256 seconds)
[04:21:31] *** Joins: ovnicraft (~ovnicraft@corp-179-49-44-28.uio.puntonet.ec)
[05:06:20] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 256 seconds)
[05:08:06] *** Joins: fikran (~fikran@user/fikran)
[05:15:54] *** Quits: Kalov (~Thunderbi@181.226.96.240) (Quit: Kalov)
[06:02:17] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[06:14:52] *** Quits: PantelicGR (~PantelicG@user/pantelicgr) (Quit: Leaving)
[06:30:33] *** Quits: ovnicraft (~ovnicraft@corp-179-49-44-28.uio.puntonet.ec) (Ping timeout: 256 seconds)
[06:33:02] *** Joins: ovnicraft (~ovnicraft@ftth-179-49-44-28.cue.celerity.ec)
[06:36:46] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[06:37:59] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[06:43:02] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[06:55:08] *** Quits: ovnicraft (~ovnicraft@ftth-179-49-44-28.cue.celerity.ec) (Ping timeout: 256 seconds)
[06:56:34] *** Joins: ovnicraft (~ovnicraft@corp-179-49-44-28.uio.puntonet.ec)
[07:01:51] *** Quits: lumgwada (~lumgwada@user/lumgwada) (Quit: Lost terminal)
[07:07:39] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[07:13:51] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[07:15:23] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 252 seconds)
[07:17:27] *** Joins: fikran (~fikran@user/fikran)
[07:19:36] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[07:19:42] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Read error: Connection reset by peer)
[07:19:58] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[07:23:32] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[07:38:22] *** Joins: Spr0cket (sprocket@user/Spr0cket)
[07:39:06] *** Joins: lumgwada (~lumgwada@user/lumgwada)
[07:39:57] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[07:41:31] *** Quits: sreve (~quassel@p54a706dc.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[07:41:43] *** Joins: Atque (~Atque@user/atque)
[07:41:59] *** Joins: sreve (~quassel@p4ff44c8e.dip0.t-ipconnect.de)
[07:57:45] *** Quits: humanBird (~humanBird@2603-8001-7000-3642-5c1d-a0eb-1a0b-4e78.res6.spectrum.com) (Quit: Client closed)
[07:59:05] *** Quits: ovnicraft (~ovnicraft@corp-179-49-44-28.uio.puntonet.ec) (Ping timeout: 250 seconds)
[08:01:34] *** Joins: ovnicraft (~ovnicraft@corp-179-49-44-28.uio.puntonet.ec)
[08:02:23] *** Joins: pmb (~pmb@89-64-79-51.dynamic.chello.pl)
[08:09:32] *** Quits: pmb (~pmb@89-64-79-51.dynamic.chello.pl) (Quit: pmb)
[08:22:00] *** Quits: jgee (~jgee@186.80.49.20) (Remote host closed the connection)
[08:29:28] *** Joins: djapo (~archangel@user/djapo)
[08:37:04] *** Joins: jgee (~jgee@186.80.49.20)
[08:38:46] *** Joins: dongcarl1 (~dongcarl@pool-96-232-179-212.nycmny.fios.verizon.net)
[08:40:13] *** Quits: dongcarl (~dongcarl@70.107.207.192) (Ping timeout: 240 seconds)
[08:40:13] *** dongcarl1 is now known as dongcarl
[08:44:36] *** Quits: ovnicraft (~ovnicraft@corp-179-49-44-28.uio.puntonet.ec) (Ping timeout: 250 seconds)
[08:45:35] *** Joins: ovnicraft (~ovnicraft@ftth-179-49-44-28.cue.celerity.ec)
[08:47:28] *** Joins: beastDivision (~beastDivi@user/beastdivision)
[09:14:09] *** Quits: dodobrain (~dodobrain@user/dodobrain) (Remote host closed the connection)
[09:14:15] *** Quits: beastDivision (~beastDivi@user/beastdivision) (Quit: beastDivision)
[09:14:33] *** Joins: dodobrain (~dodobrain@user/dodobrain)
[09:17:01] *** Quits: waveclaw (~quassel@ip98-162-237-241.ok.ok.cox.net) (Ping timeout: 240 seconds)
[09:21:17] *** Quits: djapo (~archangel@user/djapo) (Ping timeout: 240 seconds)
[09:22:03] *** Joins: waveclaw (~quassel@ip98-162-237-241.ok.ok.cox.net)
[09:27:32] *** Joins: rusrushal13 (~rusrushal@2401:4900:447c:7aab:9569:ad9c:2bdf:6f6e)
[09:28:35] *** Joins: beastDivision (~beastDivi@user/beastdivision)
[09:28:37] *** Quits: beastDivision (~beastDivi@user/beastdivision) (Client Quit)
[09:29:02] *** Joins: beastDivision (~beastDivi@user/beastdivision)
[09:40:46] *** Quits: audiobirb (~audio@user/audio) (Ping timeout: 245 seconds)
[09:41:58] *** Joins: pmb (~pmb@89-64-79-51.dynamic.chello.pl)
[09:42:10] *** Joins: dor (~erg@188.147.35.248.nat.umts.dynamic.t-mobile.pl)
[10:01:21] *** Quits: rusrushal13 (~rusrushal@2401:4900:447c:7aab:9569:ad9c:2bdf:6f6e) (Ping timeout: 256 seconds)
[10:08:44] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[10:15:08] <serafeim> hello friends
[10:15:09] *** Joins: mambang[m] (~mambang@user/mambang)
[10:15:09] *** Joins: mattcen (~mattcen@2001:470:69fc:105::936)
[10:15:09] *** Joins: nmat[m] (~nmatm]@2001:470:69fc:105::1:5553)
[10:17:13] *** Quits: simple417238 (~simple417@2601:88:8002:6270:4845:b34d:49a9:12db) (Ping timeout: 256 seconds)
[10:27:56] *** Quits: dodobrain (~dodobrain@user/dodobrain) (Ping timeout: 260 seconds)
[10:28:14] *** Joins: sandeepk (~sandeepk@223.130.30.119)
[10:41:20] <serafeim> is anyvody using the pyodbc module ?
[10:49:51] *** Joins: Atque (~Atque@user/atque)
[11:06:45] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[11:10:50] *** Joins: luigibu (~luigi@61.red-79-159-77.dynamicip.rima-tde.net)
[11:18:38] *** Joins: iomari891 (~iomari891@105.112.138.38)
[11:22:52] *** Joins: Atque (~Atque@user/atque)
[11:23:59] *** Quits: sandeepk (~sandeepk@223.130.30.119) (Remote host closed the connection)
[11:24:24] *** Joins: sandeepk (~sandeepk@223.130.30.119)
[11:27:08] *** Quits: dor (~erg@188.147.35.248.nat.umts.dynamic.t-mobile.pl) (Ping timeout: 256 seconds)
[11:28:43] *** Joins: dor (~erg@188.147.35.248.nat.umts.dynamic.t-mobile.pl)
[11:55:39] *** Joins: Haudegen (~quassel@178.115.237.87.static.drei.at)
[12:02:57] *** Joins: kostkon_ (~kostkon@2a02:587:a116:f212:4d86:1980:f91d:1e03)
[12:04:13] *** Quits: oddish (~oddish@2a01:4f8:1c1c:a9da::1) (Ping timeout: 268 seconds)
[12:04:13] *** Quits: schinckel (uid38120@id-38120.ilkley.irccloud.com) (Ping timeout: 268 seconds)
[12:05:27] *** Quits: workingsea (~workingse@2001:470:69fc:105::418a) (Ping timeout: 268 seconds)
[12:05:28] *** Quits: brownan (~brownan@2001:470:69fc:105::e01b) (Ping timeout: 268 seconds)
[12:05:28] *** Quits: dnns01_ (~quassel@2a02:c207:3003:651::1) (Ping timeout: 268 seconds)
[12:06:04] *** Quits: mambang[m] (~mambang@user/mambang) (Ping timeout: 268 seconds)
[12:06:04] *** Quits: kostkon (~kostkon@2a02:587:a116:f212:4d86:1980:f91d:1e03) (Ping timeout: 268 seconds)
[12:06:15] *** Joins: dnns01 (~quassel@2a02:c207:3003:651::1)
[12:07:39] *** Joins: mrwick (~mrwick@user/mrwick)
[12:08:12] *** Joins: pycode1 (~pycode3@2001:b07:5d28:551:44de:2e0c:b099:837a)
[12:09:25] *** Quits: andrkavr (~any@cpe-31-15-207-213.cable.telemach.net) (Ping timeout: 240 seconds)
[12:13:45] *** Joins: lithammer (~lithammer@arch-vps.cloud.tilaa.com)
[12:17:35] *** Joins: workingsea (~workingse@2001:470:69fc:105::418a)
[12:18:40] *** Joins: brownan (~brownan@2001:470:69fc:105::e01b)
[12:18:53] *** Joins: schinckel (uid38120@id-38120.ilkley.irccloud.com)
[12:21:46] *** Joins: mambang[m] (~mambang@user/mambang)
[12:29:59] *** Quits: beastDivision (~beastDivi@user/beastdivision) (Quit: beastDivision)
[12:41:20] <pycode1> hello! can i put a giant matview creation inside a migration ?
[12:43:47] *** Joins: beastDivision (~beastDivi@user/beastdivision)
[12:43:48] *** Quits: beastDivision (~beastDivi@user/beastdivision) (Client Quit)
[12:45:59] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[12:46:30] *** Quits: optiz0r (~quassel@lenore.sihnon.net) (Quit: http://quassel-irc.org - Chat comfortably. Anywhere.)
[12:53:02] <apollo13> pycode1: assume that people in here don't know what matview is (I don't)
[12:53:23] <pycode1> materialized view in postgresql
[12:53:25] <apollo13> serafeim: I am sure someone isâ€¦ ;) do you have a concrete question?
[12:53:33] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Ping timeout: 268 seconds)
[12:53:34] <pycode1> the problem is that i have managed=False
[12:53:39] <pycode1> but i also would like to run an sql
[12:53:47] <pycode1> so i used RunSql in migration
[12:53:55] <pycode1> when i run manage.py migrate i see no migration to run
[12:54:11] <pycode1> so i suppose that managed=False does not run the migrations.RunSQL
[12:54:23] <apollo13> those two things are orthogonal
[12:54:30] <apollo13> sounds more likely your migration file is wrong
[12:54:39] *** Joins: Ilyu (~quassel@166.215.82.79.rev.sfr.net)
[12:55:06] <serafeim> i wanted to know how to configure connection poolign for pyodbc
[12:55:44] <apollo13> generally I'd say that depends on the backend you are using
[12:55:55] <serafeim> i'm using ms sql server
[12:56:12] <apollo13> so whatever ms sql server offers as connection pool?
[12:56:21] <pycode1> i get no error apollo13
[12:56:24] <serafeim> can't i configure this somehow ?
[12:56:37] <apollo13> serafeim: where? in django, that wouldn't make much sense
[12:56:58] <serafeim> and another one. i updated from django 3.2 to django 4.0. when i try to login with django i get a CSRF error. i didn't change anything else between the update.
[12:57:02] <apollo13> asume django is deployed over multiple machines and processes; the connection pool would have to be external there
[12:57:18] <serafeim> apollo13: hm yes... ok i understand
[12:57:28] <apollo13> serafeim: I think there was a change to CSRF that is backwards compatible but that should be documented in the release notes
[12:57:38] <apollo13> there is an interim setting that you can set to make it compatible
[12:57:53] <serafeim> ths one : CSRF protection now consults the Origin header, if present. To facilitate this, some changes to the CSRF_TRUSTED_ORIGINS setting are required. ?
[12:58:07] <apollo13> (oh I ment incompatible in the first sentence)
[12:58:25] <apollo13> no that should work ootb, but adjusting your setting should certainly be done at some point in the future
[12:59:22] <apollo13> I was thinking of CSRF_COOKIE_MASKED -- but apparently that is 4.1
[12:59:23] <serafeim> it doesn't work though
[12:59:59] <apollo13> as I said, that change shouldn't be your problem
[13:00:11] <serafeim> i needed to set the CSRF_TRUSTED_ORIGINS setting to wkr
[13:00:13] <apollo13> please make sure to save the currently rejected CSRF token so it can be reproduced later
[13:00:55] <apollo13> mhm I am not sure when exactly CSRF_TRUSTED_ORIGINS was introduced, but it had backwards compat code for the old domain setting
[13:01:32] <apollo13> how did you configure CSRF before?
[13:01:46] <serafeim> i did not use that setting at all
[13:02:00] <apollo13> well that is for sure, but the "old" CSRF settings?
[13:02:07] <apollo13> TRUSTED_DOMAIN or what it was called
[13:02:30] <apollo13> that said with trusted_origins I don't think your csrf cookie is used at all
[13:02:45] <apollo13> so you might just have sidestepped the issue which is why I'd save the cookie and debug that
[13:05:04] *** Quits: Spr0cket (sprocket@user/Spr0cket) (Quit: x)
[13:05:13] *** Quits: sa (sid1055@id-1055.tinside.irccloud.com) (Ping timeout: 250 seconds)
[13:05:22] *** Quits: coldmountain (sid484352@id-484352.helmsley.irccloud.com) (Ping timeout: 260 seconds)
[13:05:58] <serafeim> i didn't use that
[13:06:08] *** Joins: sa (sid1055@id-1055.tinside.irccloud.com)
[13:07:18] *** Joins: coldmountain (sid484352@id-484352.helmsley.irccloud.com)
[13:07:23] *** Quits: parst (sid30815@id-30815.helmsley.irccloud.com) (Ping timeout: 252 seconds)
[13:08:38] *** Quits: sidmitra (uid17533@2a03:5180:f::447d) (Ping timeout: 260 seconds)
[13:10:08] *** Joins: parst (sid30815@id-30815.helmsley.irccloud.com)
[13:10:25] *** Quits: debnet (sid330295@python/afpy/debnet) (Ping timeout: 250 seconds)
[13:11:36] *** Joins: debnet (sid330295@python/afpy/debnet)
[13:11:38] *** Joins: sidmitra (sid17533@id-17533.tinside.irccloud.com)
[13:12:56] <apollo13> serafeim: mhm then it would be very good to debug that
[13:13:06] <serafeim> i am not sure how to debug that
[13:13:17] <serafeim> also why mess with it if it's working now ?
[13:13:38] <apollo13> because your users will be affected depending on their browser?
[13:14:04] <apollo13> because you might have uncovered a bug and could help fixing it for others?
[13:14:53] *** Joins: Spr0cket (sprocket@user/Spr0cket)
[13:15:01] <serafeim> it's not easy for me to do that with our resources
[13:15:28] <apollo13> serafeim: well do you at least have the broken csrf token at hand? then I could eventually check myself
[13:15:45] <apollo13> and if it affects your website users you will have to put that time in anyways I fear
[13:16:02] <serafeim> yes if it ain't working i'll research it more but for now it seems to be ok
[13:16:32] <serafeim> and i have some java work for this pdf signinig project https://github.com/spapas/pdf-sign-check which is very difficult for me
[13:16:36] <apollo13> well yes for you and your browser
[13:17:03] <apollo13> the problem with CSRF is that every user has their own token, so just because it works for you is no indication it will work for others
[13:17:31] <serafeim> the good thing is that this is an internal app so i can request a particular browser from my users
[13:17:31] <apollo13> serafeim: funny you'd say that, I work in that area (digital signatures etc ;))
[13:18:17] <serafeim> we need this for my organization because our internal mail is all digitally signed
[13:18:29] <apollo13> there are plenty of ready tools to check a signature though, sure you wanna implement that on your own?
[13:18:40] <serafeim> apollo13: like?
[13:18:58] <apollo13> serafeim: depends, which signatures are we talking, eIDAS?
[13:19:06] <serafeim> apollo13: this project is working for years it's more or less complete. the checking./verifying part
[13:19:14] <apollo13> IC
[13:19:21] <serafeim> i'm implementing an "signing" part now
[13:19:32] <apollo13> mind a pm?
[13:19:33] <serafeim> use an organization cert and auto-sign your docs
[13:19:36] <serafeim> yes of course
[13:20:00] <serafeim> notice that the *django* project that had the problems before is this one https://github.com/spapas/etsd (i've open sourced it) if you wanna take a look at the settings
[13:20:23] *** Quits: dor (~erg@188.147.35.248.nat.umts.dynamic.t-mobile.pl) (Ping timeout: 250 seconds)
[13:22:33] *** Joins: edigiacomo (~edg@host-95-238-68-102.retail.telecomitalia.it)
[13:22:59] *** Joins: mad_moses (~ps@2a02:810b:f3f:f0d0:d250:99ff:fe86:b052)
[13:23:00] <mad_moses> hio
[13:23:02] *** Quits: edigiacomo (~edg@host-95-238-68-102.retail.telecomitalia.it) (Client Quit)
[13:29:25] *** Joins: mattil (~mattil@helsinki.portalify.com)
[13:29:26] *** Quits: mattil (~mattil@helsinki.portalify.com) (Remote host closed the connection)
[13:36:54] *** Quits: xkuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[13:54:43] *** Joins: optiz0r (~quassel@lenore.sihnon.net)
[13:57:10] *** Joins: mattil (~mattil@helsinki.portalify.com)
[14:03:53] *** Quits: Ilyu (~quassel@166.215.82.79.rev.sfr.net) (Ping timeout: 256 seconds)
[14:04:17] *** Joins: Ilyu (~quassel@166.215.82.79.rev.sfr.net)
[14:05:48] *** Quits: mattil (~mattil@helsinki.portalify.com) (Ping timeout: 256 seconds)
[14:13:16] *** Joins: llanhmod (~personnel@user/domhnall/x-2887755)
[14:18:13] *** Joins: mattil (~mattil@helsinki.portalify.com)
[14:18:13] *** Quits: mattil (~mattil@helsinki.portalify.com) (Read error: Connection reset by peer)
[14:23:14] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[14:31:03] <serafeim> https://twitter.com/HEPfeickert/status/1487918528250449925
[14:31:11] <serafeim> new pip looks really great even on windows !
[14:37:31] *** Joins: dor (~erg@188.147.35.248.nat.umts.dynamic.t-mobile.pl)
[14:37:47] <apollo13> uff are they vendoring the whole world now :D
[14:50:00] *** Quits: ovnicraft (~ovnicraft@ftth-179-49-44-28.cue.celerity.ec) (Ping timeout: 256 seconds)
[14:51:06] *** Joins: ovnicraft (~ovnicraft@corp-179-49-44-28.uio.puntonet.ec)
[15:05:16] *** Joins: pro_z_ (~pro_z@37.214.55.61)
[15:06:10] *** Joins: pmb_ (~pmb@89-64-79-51.dynamic.chello.pl)
[15:06:58] <serafeim> are you familiar with the glitchtip? this is an open source alternative to sentry: https://glitchtip.com/ i've self hosted in on our premises and works great!
[15:07:58] *** Joins: mattil (~mattil@helsinki.portalify.com)
[15:08:03] *** Quits: mattil (~mattil@helsinki.portalify.com) (Remote host closed the connection)
[15:10:11] *** Quits: pmb (~pmb@89-64-79-51.dynamic.chello.pl) (Ping timeout: 256 seconds)
[15:10:11] *** pmb_ is now known as pmb
[15:14:05] *** Quits: Haudegen (~quassel@178.115.237.87.static.drei.at) (Quit: Bin weg.)
[15:15:47] *** Quits: mad_moses (~ps@2a02:810b:f3f:f0d0:d250:99ff:fe86:b052) (Remote host closed the connection)
[15:19:39] <pycode1> pardon, should i add queryset methods, like, get_latest_products() etc...in the manager instead of the model class basically those methods are referring to the current user that has some associated products
[15:20:01] <pycode1> but i wonder if i have to put such method inside the User model or the UserManager
[15:20:16] <serafeim> pycode1: i don't use queryset methods. i have observed they make my code harder to follow
[15:20:21] <apollo13> glitchtip is an old sentry fork, no?
[15:20:24] <serafeim> i just write the queries where they are needed
[15:20:45] <pycode1> serafeim, yes but if you see that you use that query in many places where do you put such query?
[15:20:47] <serafeim> apollo13: yes it was forked before sentry changed its license. it's open source and supported (and works fine)
[15:21:00] <pycode1> do you not use a "centralized" class to handle such commond queries ?
[15:21:00] <apollo13> sentry is also opensource ;)
[15:21:03] <pycode1> common
[15:21:06] <serafeim> apollo13: not anymore :)
[15:21:18] <serafeim> https://github.com/getsentry/sentry/blob/master/LICENSE
[15:21:48] <serafeim> pycode1: it depends on the case. i usually create instance methods that would do what i need
[15:21:49] <apollo13> okay, not osi approved opensource; but afaik free for you to use
[15:22:00] <apollo13> as long as you don't sell sentry as a service
[15:22:08] <serafeim> apollo13: yes but i don't like using such solutions in our premises.
[15:22:19] <serafeim> apollo13: also self hosting sentry nowadays is more or less impossible
[15:22:24] <apollo13> *shrug* I honestly understand why they did it
[15:22:30] <serafeim> because it is a docker mess of dependencies
[15:22:46] <apollo13> well yes, it is the same codebase after all, sentry is massive nowadays
[15:22:50] <serafeim> if you want to self-host sentry you inhnerit all the cruft of the cloud sentry
[15:23:04] <serafeim> apollo13: correct. however i want to support 10 apps like 10 million apps
[15:23:19] <serafeim> sorry: i want to support 10 apps, *not* 10 million apps
[15:23:38] <apollo13> understood, but it is understandable that sentry doesn't want to maintain two sentry versions
[15:23:43] <serafeim> yes of course
[15:24:06] <apollo13> so if someone likes sentry and can host it, I'd still choose it over glitchtip probably
[15:24:20] <serafeim> also there's no reason for them since they want people to switch to cloud
[15:24:24] <serafeim> apollo13: yes but why  ?
[15:24:24] <pycode1> serafeim, ok
[15:24:34] <apollo13> serafeim: why what?
[15:24:42] <serafeim> apollo13: which use sentry over glitchtip ?
[15:24:52] <apollo13> better client compatibility and more features?
[15:25:00] <serafeim> glitchtip uses the sentry protocol so all your apps work as they are (you just change the dsn)
[15:25:16] <apollo13> sure but sentry does way more, doesn't it?
[15:25:16] <serafeim> also glitchtip is a *simple* django app. you can take a look at the code and understand everyything's happening
[15:25:24] <serafeim> i challenge you to do the same for sentry
[15:25:38] <apollo13> I can and I did ;)
[15:25:39] <serafeim> apollo13: yes definitely. but do you need that more ?
[15:25:51] <serafeim> apollo13: you can for the current vertion of sentry ?
[15:25:56] <serafeim> not the version from 5 years ago.
[15:26:27] <apollo13> I am not saying that I need more, I am just saying if someone needs/wants the sentry features and can afford to self-host it they are probably better off using sentry than hoping glitchtip would have all those features
[15:26:51] <apollo13> well it is a year or so ago when I had to fix some issues, but I give you that it is not straight forward as it was
[15:27:07] <serafeim> please take a look at the docker compose: https://github.com/getsentry/self-hosted/blob/master/docker-compose.yml
[15:27:26] <serafeim> do you even know what all this requirements are ?
[15:27:34] <serafeim> cause i don't nor i want to know
[15:27:51] <apollo13> I know them well enough to find my way around yes
[15:28:09] <apollo13> I am a system admin, it is my job to be able to work with such things
[15:28:13] <serafeim> kafka snuba clickhouse zookeper wtf ?
[15:28:31] <serafeim> apollo13: well i'm a programmer that because of lack of system admins does also admin jobs
[15:29:02] <apollo13> to be fair aside from snuba which is afaik sentry specific the rest are relatively well known tools
[15:29:21] <serafeim> maybe to people and companies using them
[15:29:37] <serafeim> i'm not familiar with any of these except clickhouse which i know is a time series db
[15:29:50] <apollo13> sure but isn't that the case for everything? if sentry where written in ruby you'd probably also have a hard time with the glitchtip fork
[15:30:07] <serafeim> yes definitely. i'm lucky it's in django :)
[15:30:27] <apollo13> I mean you could probably still host it easily but I for my life cannot figure out what ruby code does
[15:31:02] <serafeim> what i'm saying is that most sentry features are not useful to most installations. so why would you choose sentry (and inherit all these non-needed dependewncies) over glitchtip?
[15:32:20] <apollo13> Well if I had any say in it I would use the hosted version where possible anyways
[15:32:40] <hzm74> Hello, can somebody please help me with saving form-data to a database? I have setup a model (regular model, not modelform). Now i wanna save the data to my database.
[15:32:44] <apollo13> and sure glitchtip is fine, but if you want sentry features you don't have many options :)
[15:33:11] <hzm74> The data is data for 1 model and other foreignkey related models.
[15:33:32] <hzm74> This is my view, form and model: http://dpaste.org/5w3M
[15:33:41] *** Quits: pmb (~pmb@89-64-79-51.dynamic.chello.pl) (Quit: pmb)
[15:33:52] <hzm74> I have trouble saving the data to the foreignkey related models.
[15:34:13] <serafeim> yes definitely if you need the sentry features you'll have to use it
[15:34:24] <hzm74> I get ValueError: Cannot assign "'1'": "Person.hometown" must be a "City" instance.
[15:34:25] <apollo13> hzm74: you just get the ids, so you will probably set province_id=province
[15:34:30] <apollo13> same for hometown
[15:34:50] <hzm74> apollo13, thnx. Gonna try it out.
[15:34:57] <serafeim> hzm74: also you need to use the form.cleaned_data to get the values, not get it directly from POST
[15:35:13] <apollo13> oh yeah that would also help :D
[15:35:21] <serafeim> ii.e `firstname=request.POST['first_name']` has to be firstname = form.cleaned_data.get('first_name')
[15:35:33] <hzm74> serafeim: thnx, gonna change that.
[15:40:43] <hzm74> serafeim, i changed it to personform.cleaned_data.get(Â´first_nameÂ´). But now i get error:
[15:40:44] <hzm74> TypeError: 'builtin_function_or_method' object is not subscriptable
[15:42:32] <serafeim> use personform instead of form...
[15:48:30] <hzm74> did that: personform.cleaned_data.get(Â´first_nameÂ´)
[15:49:11] <serafeim> and ?
[15:55:55] <hzm74> TypeError: 'builtin_function_or_method' object is not subscriptable
[15:57:07] <nedbat> hzm74: are you sure you didn't do:  personform.cleaned_data.get["first_name"] ?
[15:57:34] *** Quits: pycode1 (~pycode3@2001:b07:5d28:551:44de:2e0c:b099:837a) (Ping timeout: 260 seconds)
[16:01:18] <hzm74> serafeim, nedbat: Sorry, you lost me ;) This is my view: http://dpaste.org/WfHc
[16:01:36] <hzm74> With that i get the given error .
[16:01:37] <serafeim> hzm74: lol nedbat is right
[16:01:46] <nedbat> hzm74: you are using square brackets with get.  you want get(), not get[]
[16:02:26] <hzm74> aha, i get it. Thank you very much!
[16:02:32] <serafeim> no prob
[16:03:34] *** Joins: mattil (~mattil@helsinki.portalify.com)
[16:07:37] <hzm74> hmm, not right there yet. When i try to add a FK-related modelfield i get error: ValueError: Cannot assign "<QuerySet []>": "Person.hometown" must be a "City" instance.
[16:08:10] <hzm74> I did: newperson = Person.objects.create(firstname="Sarah", lastname="Something", hometown=City.objects.filter(id=0))
[16:08:36] *** Quits: mattil (~mattil@helsinki.portalify.com) (Remote host closed the connection)
[16:08:36] <GinFuyou> .filter() doesn't return instance
[16:08:57] <GinFuyou> what that lookup was supposed to solve?
[16:10:33] <hzm74> Hello GinFuyou: was trying to solve saving form-data to a database. IÂ´m using a regular form, not modelform.
[16:11:31] <hzm74> I get the values from the form-fields with a POST request. Then iÂ´m trying to save these fields to the database.
[16:12:47] <GinFuyou> not sure why you are not using a model form looking at your models, but technically it doesn't matter, just more manual coding
[16:12:50] <hzm74> Problem is i get the idÂ´s from foreignkey related models (used ModelChoiceField).
[16:13:41] <GinFuyou> pretty sure form converts it to instances
[16:15:24] *** Joins: pmb (~pmb@89-64-79-51.dynamic.chello.pl)
[16:16:08] <hzm74> Using regular form now for learning purposes.
[16:17:33] <GinFuyou> sure it's good. But technically it doesn't matter. ModelForm is just more automated Form, basis is the same
[16:24:26] <hzm74> GinFuyou, it works now! Problem was a field what needed a value (not nullable)
[16:24:44] <hzm74> Working line: newperson = Person.objects.create(firstname="Sarah", lastname="Something", hometown=City.objects.get(id=1))
[16:26:08] <vancha112[m]> Hey everyone :) i'm trying to attach a user to a model instance to keep track of which user made the last change to it.  I tried:
[16:26:08] <vancha112[m]> attaching to a post_save signal, but that failed because you can't get access to the user that initiated the request from within a signal.
[16:26:08] <vancha112[m]> Then i tried overriding the models save method which failed, because there isn't a way to access the initiating user from there either.
[16:26:08] <vancha112[m]> Is there any other way to get a user upon making changes to a model? :(
[16:26:40] <GinFuyou> hzm74, well, it's technically correct, but where is form part in there?
[16:27:10] <GinFuyou> vancha112[m], that has to be in the view
[16:27:32] *** Quits: Ilyu (~quassel@166.215.82.79.rev.sfr.net) (Quit: No Ping reply in 180 seconds.)
[16:28:07] <hzm74> GinFuyou, hmm. Form-part not working i see now..
[16:28:08] <vancha112[m]> in the admin view then right? :o so by overriding "save_model" on the modeladmin view that displays my model in the admin panel?
[16:28:44] <hzm74> GinFuyou:  TypeError at /  :  cannot unpack non-iterable City object
[16:28:57] *** Joins: Ilyu (~quassel@166.215.82.79.rev.sfr.net)
[16:29:00] *** Joins: DnzAtWrk (~DnzAtWrk@mobile-access-6df0a8-31.dhcp.inet.fi)
[16:29:58] <GinFuyou> vancha112[m], if you meant admin, then sure admin view. I don't remember exact method but something like that
[16:31:14] <hzm74> What am i doing wrong in the view? Trying to add form-data to database:  http://dpaste.org/ayaa
[16:35:05] <GinFuyou> why are you doing City.objects.get(hometown) ?
[16:36:18] *** Quits: pepper (~pepper@user/pepper) (Ping timeout: 260 seconds)
[16:37:36] <hzm74> GinFuyou, that is for giving the newperson the City object which was chosen in the form.
[16:37:44] *** Joins: dez (uid92154@user/dez)
[16:38:52] <hzm74> hometown is giving me the id of the chosen City object in the form
[16:39:48] <hzm74> (as i believe it is.). Only when iÂ´m now debugging in VS i get error: from .models import Person   ImportError: attempted relative import with no known parent package
[16:45:11] <GinFuyou> hzm74, as I said I don't believe it
[16:46:20] <hzm74> Gonna try to debug it in VS and see what Â¨hometown=personform.cleaned_data.get('hometown')Â¨ is giving me.
[16:47:56] <hzm74> But now i get error: ImportError: attempted relative import with no known parent package
[16:48:32] <hzm74> What can that be? Error comes from: from .models import Person
[16:49:00] *** Quits: dor (~erg@188.147.35.248.nat.umts.dynamic.t-mobile.pl) (Ping timeout: 256 seconds)
[16:49:04] <GinFuyou> <app_name>.models is how i usually use it, should be safe
[16:52:25] *** Joins: pileatedx (~textual@cpe-67-241-68-204.twcny.res.rr.com)
[16:53:54] <hzm74> Something is going greatly wrong here?! The app-name is Â¨webbieÂ¨ ; when i do: from webbie.models import Person
[16:54:12] <hzm74> i get error: No module named Â´webbieÂ´
[17:04:26] *** Joins: dor (~erg@188.147.35.248.nat.umts.dynamic.t-mobile.pl)
[17:08:54] <hzm74> Aha: problem almost solved: i was running views.py as a standalone python-file in VS.
[17:09:49] <hzm74> In VS i have a launch.json file for running my django-project. It works well.
[17:09:50] *** Quits: pileatedx (~textual@cpe-67-241-68-204.twcny.res.rr.com) (Quit: pileatedx)
[17:10:17] <hzm74> But how do i set it up in VS so it is not only running but also i can debug?
[17:17:09] <hzm74> GinFuyou, I have VS setup correctly now! I managed to get the hometown-value in VS
[17:17:53] <hzm74> The field Â¨hometownÂ¨ in my form gives me a City: City object
[17:18:38] *** Joins: pycode1 (~pycode3@2001:b07:5d28:551:e0af:40d4:d2bc:6338)
[17:18:41] <hzm74> Can i pass that straight to the create-object codeline? :
[17:19:04] <hzm74> newperson = Person.objects.create(firstname="Sarah", lastname="Something", hometown=hometown)
[17:20:00] <GinFuyou> Yes, that's was the point. Form already did lookup for you
[17:22:39] <hzm74> GinFuyou, many thanx! My faith is back! (lost it the last couple days). Learned a lot...
[17:23:00] *** Quits: dor (~erg@188.147.35.248.nat.umts.dynamic.t-mobile.pl) (Ping timeout: 256 seconds)
[17:33:06] *** Quits: llanhmod (~personnel@user/domhnall/x-2887755) (Quit: leaving)
[17:38:21] *** Joins: dor (~erg@188.147.35.248.nat.umts.dynamic.t-mobile.pl)
[17:38:56] <vancha112[m]> Looks like I've solved my issue, thanks GinFuyou. It's doing *exactly* what i need it to do, but i'm not really happy with the code :(
[17:39:38] *** Joins: y04nn (~y04nn@92.223.89.196)
[17:39:44] <vancha112[m]> actually no, this would break if multiple formsets have changes :)
[17:39:55] <GinFuyou> What do you mean about the code?
[17:41:32] <vancha112[m]> https://pastebin.com/gs9tdf1H
[17:42:13] <vancha112[m]> so i loop over the forms in the formset, check for changes, and for any form with changes, i compare the previous value with the new value
[17:43:22] <vancha112[m]> if it was false and is now true, the foreign key of the user that made this change is saved as a property of the model that is being changed
[17:44:10] <vancha112[m]> I do think this is the way to go though ^^
[17:46:26] <GinFuyou> mmm, not sure why it would break on multiple formsets changing yet...
[17:47:40] <vancha112[m]> # old_value = Malfunction.objects.filter(id=changed_malfunctions.id)[0].is_solved
[17:48:08] <vancha112[m]> if i created a new object through that set, it tries to find an old value that doesn't exist, and would crash with a list index out of range exception right there
[17:48:38] <vancha112[m]> so i still need a better way of finding out if the form change is an update or a creation
[17:49:20] <GinFuyou> can't you safely assume that non-existing objects means creation?
[17:49:21] <vancha112[m]> I guess I could just count the queryset ^^ no results means no object exists
[17:49:55] <GinFuyou> also .first() doesn't throw exception on non-existing object unlike .get() iirc
[17:49:58] <vancha112[m]> yes, but in my case i don't want to assign a user upon creation, only upon updates :)
[17:50:16] <vancha112[m]> interesting :o
[17:50:33] <vancha112[m]> I'll try counting first, i guess that's the easiest to implement for me :)
[17:50:41] <GinFuyou> since same formset can be used for creating and updating I'm not sure there is a fundamentally better way
[17:50:58] <GinFuyou> well creating == object.pk is None
[17:51:09] <vancha112[m]> No worries ^^ I've been fighting this thing for days, i couldn't figure it out :)
[17:51:09] <vancha112[m]> looks like i have all i need now :)
[17:51:46] <vancha112[m]> i have access to the request object and the form data, so from this point on I will clean things up and make it pretty.
[17:51:57] *** Quits: DnzAtWrk (~DnzAtWrk@mobile-access-6df0a8-31.dhcp.inet.fi) (Quit: Leaving)
[17:52:08] <vancha112[m]> GinFuyou: thanks this is exactly what I'll use then ^^
[17:59:35] *** Joins: FreEm1nD (~FreEm1nD@mail.guarapari.store)
[18:08:47] *** Quits: mrwick (~mrwick@user/mrwick) (Ping timeout: 250 seconds)
[18:12:46] *** Quits: FreEm1nD (~FreEm1nD@mail.guarapari.store) (Quit: Leaving)
[18:20:39] *** Joins: sandeep (~sandeepk@223.130.30.79)
[18:23:38] *** Quits: sandeepk (~sandeepk@223.130.30.119) (Ping timeout: 256 seconds)
[18:35:59] *** Joins: DnzAtWrk (~DnzAtWrk@mobile-access-6df0a8-31.dhcp.inet.fi)
[18:38:40] *** Joins: rusrushal13 (~rusrushal@2409:4056:e82:6bda:bd0e:9743:fccb:b2a0)
[18:42:34] *** Quits: DnzAtWrk (~DnzAtWrk@mobile-access-6df0a8-31.dhcp.inet.fi) (Read error: Connection reset by peer)
[18:47:14] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[18:53:23] *** Quits: Ilyu (~quassel@166.215.82.79.rev.sfr.net) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[18:54:01] *** Joins: enkrypt (~enkrypt@user/enkrypt)
[18:56:15] *** Joins: LuxuryMode (uid91005@id-91005.ilkley.irccloud.com)
[18:57:25] *** Quits: rusrushal13 (~rusrushal@2409:4056:e82:6bda:bd0e:9743:fccb:b2a0) (Ping timeout: 256 seconds)
[19:01:02] *** Quits: sandeep (~sandeepk@223.130.30.79) (Ping timeout: 256 seconds)
[19:08:14] *** Joins: mrwick (~mrwick@user/mrwick)
[19:14:47] *** Joins: PantelicGR (~PantelicG@user/pantelicgr)
[19:28:48] <pycode1> i have to render a chart in my page this chart is very big it has around 100k points, i can see it correctly there are no big problem BUT...I noticed that if i return the list of points with a queryset then i need to loop over this giant list to create the chart. is there a "native" way to transform the giant list into a json to directly pass the point to javascripts?
[19:30:08] *** Joins: rusrushal13 (~rusrushal@2409:4056:e82:6bda:bd0e:9743:fccb:b2a0)
[19:32:07] <pycode1> try to exlain it a bit better... basically i have many points inside the database i need to get those points and put them inside a template to let javascript render the chart
[19:32:50] <pycode1> the query is not a problem because it is very fast, so i am asking how can i get all of those points and put them in the template in a manner that javascript can use it without doing anything special
[19:36:08] *** Joins: pepper (~pepper@user/pepper)
[19:38:19] *** Joins: Aleks (~Aleks@user/aleks)
[19:46:11] *** Quits: withered_wolf (~withered_@1437135-v103.1561-static.stchilaa.metronetinc.net) (Ping timeout: 245 seconds)
[19:53:39] *** Joins: withered_wolf (~withered_@1437135-v103.1561-static.stchilaa.metronetinc.net)
[19:57:49] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[19:57:50] <vlt> pycode1: > i need to loop over this giant list
[19:58:22] <vlt> pycode1: Who is "I" here? The view? The template? JS in the browser?
[19:58:22] <pycode1> vlt, yes because i have a queryset i need to "write" those points in the .html
[19:58:31] <pycode1> tempplate
[19:58:32] <pycode1> tempplate
[19:58:36] <pycode1> template
[19:58:38] <pycode1> :)
[19:59:11] *** Quits: Aleks (~Aleks@user/aleks) (Ping timeout: 256 seconds)
[19:59:34] <pycode1> what i am asking is how can i convert the queryset into json to let javascript read those points without slow down the entire process
[19:59:34] <vlt> pycode1: If you put json.dumps(list_of_points) in the view you have available in the template as JSON object.
[20:00:02] <pycode1> vlt, in my case list_pf_points is a queryset that i run with .all()
[20:00:07] <pycode1> each row as a point
[20:01:48] <vlt> pycode1: You could try if that works and if needed adapt maybe the query .values() and then ask again with a specific question ;-)
[20:06:55] *** Joins: DnzAtWrk (~DnzAtWrk@mobile-access-6df0a8-31.dhcp.inet.fi)
[20:15:41] *** Quits: pmb (~pmb@89-64-79-51.dynamic.chello.pl) (Read error: Connection reset by peer)
[20:16:03] *** Joins: pmb (~pmb@89-64-79-51.dynamic.chello.pl)
[20:18:52] *** Quits: luigibu (~luigi@61.red-79-159-77.dynamicip.rima-tde.net) (Quit: WeeChat 3.4)
[20:26:57] <pycode1> ok
[20:28:18] *** Quits: DnzAtWrk (~DnzAtWrk@mobile-access-6df0a8-31.dhcp.inet.fi) (Quit: Leaving)
[20:28:23] *** Joins: yusraDev (~yusraDev@37.17.152.219)
[20:43:09] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Ping timeout: 276 seconds)
[20:44:50] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[20:57:11] *** Joins: djapo (~archangel@user/djapo)
[21:13:04] *** Quits: djapo (~archangel@user/djapo) (Ping timeout: 256 seconds)
[21:28:16] *** Quits: pmb (~pmb@89-64-79-51.dynamic.chello.pl) (Quit: pmb)
[21:28:37] *** Joins: pmb (~pmb@89-64-79-51.dynamic.chello.pl)
[21:32:03] *** Joins: Xof (~Xof@157-131-136-66.dedicated.static.sonic.net)
[21:34:23] *** Quits: yusraDev (~yusraDev@37.17.152.219) (Ping timeout: 256 seconds)
[21:34:58] *** Joins: yusraDev (~yusraDev@37.17.151.228)
[21:42:52] *** Quits: pycode1 (~pycode3@2001:b07:5d28:551:e0af:40d4:d2bc:6338) (Ping timeout: 250 seconds)
[21:55:00] *** Quits: yusraDev (~yusraDev@37.17.151.228) (Quit: Client closed)
[22:00:15] *** Joins: blackout69 (~blackout6@net-109-117-245-237.cust.vodafonedsl.it)
[22:06:00] *** Quits: LuxuryMode (uid91005@id-91005.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[22:10:52] *** Joins: Haudegen (~quassel@178.115.237.87.static.drei.at)
[22:14:44] *** Quits: iomari891 (~iomari891@105.112.138.38) (Quit: WeeChat 3.3)
[22:19:19] *** Joins: FreEm1nD (~FreEm1nD@mail.guarapari.store)
[22:19:44] *** Joins: Atque (~Atque@user/atque)
[22:21:14] *** Joins: xkuru (~xkuru@user/xkuru)
[22:26:09] *** Quits: dor (~erg@188.147.35.248.nat.umts.dynamic.t-mobile.pl) (Remote host closed the connection)
[22:39:59] *** Joins: admin123 (~harrymore@ool-2f12f5b1.dyn.optonline.net)
[22:48:37] *** Quits: y04nn (~y04nn@92.223.89.196) (Ping timeout: 256 seconds)
[22:56:06] *** Joins: gopar (~gopar@c-67-164-79-22.hsd1.ca.comcast.net)
[23:05:30] *** Bitflux is now known as Byteflux
[23:10:23] *** Joins: djapo (~archangel@user/djapo)
[23:18:14] *** Quits: pro_z_ (~pro_z@37.214.55.61) (Ping timeout: 268 seconds)
[23:34:31] *** Quits: rusrushal13 (~rusrushal@2409:4056:e82:6bda:bd0e:9743:fccb:b2a0) (Ping timeout: 256 seconds)
[23:42:17] *** Quits: pmb (~pmb@89-64-79-51.dynamic.chello.pl) (Quit: pmb)
[23:42:32] *** Quits: blackout69 (~blackout6@net-109-117-245-237.cust.vodafonedsl.it) (Quit: Leaving.)
[23:42:36] *** Joins: y04nn (~y04nn@92.223.89.196)
[23:52:54] *** Joins: ekathva (~ekathva@2001:999:51:be01:2799:25be:c992:870)
[23:54:47] *** Quits: django-ticketbot (~django-ti@django/ops/ticketbot) (Remote host closed the connection)
[23:55:00] *** Joins: envisioned (~envisione@89.39.1.160)
[23:55:07] *** Joins: django-ticketbot (~django-ti@django/ops/ticketbot)
