[00:07:51] <dpk> is it just me, or is the precision notation for inexacts specified (somewhat ambiguously) in R7RS small section 6.2.5 not actually included in the formal grammar in section 7.1.1?
[00:08:07] * dpk makes sure she's looking at the version of the spec with errata corrected …
[00:10:11] <dpk> yeah, looks an error
[00:15:22] *** Quits: yewscion (~yewscion@72-21-196-64.amazon.com) (Ping timeout: 250 seconds)
[00:24:33] <Oxyd> That paragraph on the s, f, d, l exponent markers to me looks like someone's musings on potential non-standard extensions, not an actual part of the language.
[00:33:20] <dpk> hmm, it is introduced by an rfc2119:MAY
[00:33:46] <dpk> i'm not sure if there are other such permissive variations in the reader in small …
[00:35:07] *** Joins: yewscion (~yewscion@72-21-196-64.amazon.com)
[00:35:53] <Oxyd> Surely the reader can accept whatever it wants, so long as it accepts R7RS correctly.
[00:58:04] *** Quits: gproto23 (~gproto23@user/gproto23) (Ping timeout: 256 seconds)
[01:08:55] *** Quits: amerigo (~amerigo@89-75-36-150.dynamic.chello.pl) (Quit: Client closed)
[01:09:38] *** Quits: ouestbillie (~gallup@45.83.220.194) (Quit: leaving)
[01:09:52] *** Joins: ouestbillie (~gallup@45.83.220.194)
[01:24:32] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[01:39:39] *** Joins: cchristiansen (~user@n122-106-221-66.sbr1.nsw.optusnet.com.au)
[01:39:45] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[02:22:51] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[02:33:57] *** Quits: yewscion (~yewscion@72-21-196-64.amazon.com) (Ping timeout: 240 seconds)
[02:37:09] *** Quits: alMalsamo (~alMalsamo@gateway/tor-sasl/almalsamo) (Ping timeout: 276 seconds)
[02:47:37] *** Quits: ouestbillie (~gallup@45.83.220.194) (Ping timeout: 240 seconds)
[02:49:38] *** Joins: ouestbillie (~gallup@54.29.90.149.rev.vodafone.pt)
[02:50:35] *** Quits: szkl_ (uid110435@id-110435.uxbridge.irccloud.com) ()
[02:50:50] *** Joins: szkl_ (uid110435@id-110435.uxbridge.irccloud.com)
[02:51:25] *** Quits: szkl_ (uid110435@id-110435.uxbridge.irccloud.com) (Client Quit)
[02:51:42] *** Joins: szkl (uid110435@id-110435.uxbridge.irccloud.com)
[02:56:45] *** Joins: alMalsamo (~alMalsamo@gateway/tor-sasl/almalsamo)
[03:04:56] *** Quits: karlosz (~karlosz@47.151.136.69) (Quit: karlosz)
[03:06:19] *** Quits: confuzeus (~h_m@186-149-117-154.bitcointernet.co.za) (Remote host closed the connection)
[03:12:10] *** Joins: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net)
[03:12:11] *** Quits: civodul (~user@guix/contributor/civodul) (Ping timeout: 256 seconds)
[03:16:17] *** Quits: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net) (Ping timeout: 240 seconds)
[03:20:34] *** Joins: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net)
[03:28:05] *** Joins: ski (~ski@remote11.chalmers.se)
[03:30:37] *** Quits: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net) (Ping timeout: 240 seconds)
[03:32:02] *** Quits: xgqt (~xgqt@gentoo/developer/xgqt) (Ping timeout: 240 seconds)
[03:33:00] *** Joins: xgqt (~xgqt@gentoo/developer/xgqt)
[03:36:10] *** Joins: vats (~vats@180.149.226.41)
[04:06:18] <Spawns> I am curious how you guys would implement 'quote' in a scheme or lisp implementation. Right now I can just transform my syntax objects to interpreter friendly conses or whatever, but this causes my interpreter to have to copy the entire list every time you do `cdr` or any other list operation
[04:06:32] <Spawns> the exact details are a little too much to type out on here
[04:43:33] *** evdubs__ is now known as evdubs
[04:48:40] *** Joins: s-liao (~s-liao@101.86.96.21)
[05:16:23] *** Joins: notzmv (~zmv@user/notzmv)
[05:17:28] *** Quits: notzmv (~zmv@user/notzmv) (Read error: Connection reset by peer)
[05:17:58] *** Joins: livoreno (~livoreno@user/notzmv)
[05:17:58] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Client closed)
[05:19:30] *** Joins: Wezl (Wezl@grape.ircnow.org)
[05:21:32] <Wezl> do most schemes allow creating a macro that creates other macros?
[05:22:29] <Spawns> i think so Wezl but I am not 100% sure
[05:30:01] <Wezl> actually what's more important is do *any* schemes allow that and which :/
[05:34:09] *** Joins: notzmv (~zmv@user/notzmv)
[05:40:27] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Ping timeout: 276 seconds)
[05:41:32] <Spawns> what is a valid syntax for set-car! and set-cdr!
[05:41:56] <Spawns> the first argument doesn't have to be an ident right?
[05:42:03] <Spawns> but instead something that returns a cons
[05:46:30] *** Quits: schulze (~schulze@dynamic-095-116-224-191.95.116.pool.telefonica.de) (Ping timeout: 256 seconds)
[05:48:04] <Wezl> (begin (define a (cons 'x 'y)) (set-car! a 'z) a) => (z . y)
[05:51:25] <Spawns> is (set-car! (cdr list) _) valid?
[05:54:30] <Wezl> yes
[05:56:23] <Spawns> the reason I was confused is because (set! (car list) _) is not valid syntax
[05:56:46] <Spawns> little bit inconsistent 
[05:57:15] <Spawns> granted most impls seem to handle set! with an invalid argument alright
[06:00:04] *** Joins: karlosz (~karlosz@47.151.136.69)
[06:11:31] <Wezl> it's consistent with scheme's choice to use simple syntax and separate functions for separate types
[06:12:26] *** Quits: vats (~vats@180.149.226.41) (Ping timeout: 250 seconds)
[06:12:26] <Wezl> set-car! accepts any expression for the arguments. It's a function while set! is a statement
[06:13:49] *** Quits: livoreno (~livoreno@user/notzmv) (Read error: Connection reset by peer)
[06:14:23] <mdhughes> Some Schemes do allow getter-with-setter syntax, so you can (set! (Foo-bar x) y) and such.
[06:15:14] <mdhughes> https://srfi.schemers.org/srfi-17/srfi-17.html
[06:15:49] <mdhughes> I've used it some, but didn't like it longer-term, it's confusing.
[06:17:13] *** Joins: klovett_ (~klovett@166.205.90.179)
[06:19:37] *** Quits: klovett (~klovett@166.205.90.163) (Ping timeout: 240 seconds)
[06:21:19] *** Joins: frost (~frost@user/frost)
[06:24:19] *** Joins: brettgilio (~brettgili@x-node.gq)
[06:27:43] *** Quits: grettke (~grettke@cpe-65-29-228-30.wi.res.rr.com) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[06:56:48] *** Quits: skapata (~Skapata@user/skapata) (Ping timeout: 268 seconds)
[07:08:37] *** Joins: skapata (~Skapata@user/skapata)
[07:22:05] *** Quits: skapata (~Skapata@user/skapata) (Ping timeout: 268 seconds)
[07:29:28] *** Joins: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net)
[07:37:57] *** Quits: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net) (Ping timeout: 240 seconds)
[07:56:04] *** Quits: ouestbillie (~gallup@54.29.90.149.rev.vodafone.pt) (Remote host closed the connection)
[07:57:54] *** Joins: ouestbillie (~gallup@54.29.90.149.rev.vodafone.pt)
[08:11:52] *** Joins: s-liao (~s-liao@101.86.96.21)
[08:13:17] *** Quits: frost (~frost@user/frost) (Ping timeout: 240 seconds)
[08:35:01] *** Joins: frost (~frost@user/frost)
[09:01:23] *** Joins: livoreno (~livoreno@user/notzmv)
[09:11:04] *** Quits: frost (~frost@user/frost) (Ping timeout: 256 seconds)
[09:31:53] *** Joins: confuzeus (~h_m@186-149-117-154.bitcointernet.co.za)
[09:34:08] *** Joins: frost (~frost@user/frost)
[09:34:36] *** Quits: confuzeus (~h_m@186-149-117-154.bitcointernet.co.za) (Remote host closed the connection)
[09:34:53] *** Joins: skapata (~Skapata@2804:14c:87b0:a6f9:1cb:469c:e868:928d)
[09:34:53] *** Quits: skapata (~Skapata@2804:14c:87b0:a6f9:1cb:469c:e868:928d) (Changing host)
[09:34:53] *** Joins: skapata (~Skapata@user/skapata)
[10:21:09] *** Quits: jao (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net) (Ping timeout: 256 seconds)
[10:27:57] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[10:40:44] *** Quits: frost (~frost@user/frost) (Quit: Connection closed)
[10:50:55] <sham1> That's so very Common Lisp -like
[10:51:18] <sham1> Although I could imagine some ports of CLOS to Scheme to love this
[10:54:46] <sjamaan> It's also somewhat limited; in CHICKEN we have (file-position <fd-or-port>) and (set! (file-position <fd-or-port>) <new-offset>) but that doesn't allow setting the WHENCE argument to which the offset should apply
[10:55:09] <sjamaan> With set-file-position! there's an optional third argument indicating the "whence"
[10:56:56] <sham1> Well doing stuff like (set! (foo) val) should really be like for the most common idioms
[10:57:07] <sham1> Do people most of the time care about the whence?
[10:57:43] <sjamaan> Sometimes you want to use relative positioning, or go to the end of a file without calculating the file's length first
[10:59:52] <sham1> And for that one could then use set-file-position! of course
[11:00:03] <sjamaan> Indeed
[11:07:23] *** Joins: shawnw (~shawn_w@c-73-225-121-73.hsd1.wa.comcast.net)
[11:18:14] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[11:25:36] *** Quits: alMalsamo (~alMalsamo@gateway/tor-sasl/almalsamo) (Ping timeout: 276 seconds)
[11:28:10] *** Quits: cchristiansen (~user@n122-106-221-66.sbr1.nsw.optusnet.com.au) (Remote host closed the connection)
[11:29:28] *** Joins: civodul (~user@guix/contributor/civodul)
[11:44:27] *** Joins: sonny (~user@bras-base-london1483w-grc-28-70-48-35-173.dsl.bell.ca)
[11:45:15] <sonny> Are some symbols predefined for use with macros?
[11:48:04] <sham1> What do you mean by that
[11:50:20] <sonny> (define when (lambda (test . branch) (list 'if test (cons 'begin branch)))) -- How does it know what 'if and 'begin are?
[11:53:59] *** Joins: frost (~frost@user/frost)
[11:54:11] <sham1> Those are just symbols
[11:54:21] <sham1> So the answer is: it doesn't
[11:54:58] *** Joins: karlosz_ (~karlosz@47.151.136.69)
[11:56:49] <sham1> When you (eval) that list, during the possible compilation, those symbols get looked up in the compilation environment by the compiler. if is very likely a built in special form while begin may be a syntax-rules macro, but they get then expanded into more primitive forms if applicable by the compiler
[11:57:31] <sonny> ah
[11:57:45] <sonny> so there's nothing safe about them then
[11:58:48] *** Quits: karlosz (~karlosz@47.151.136.69) (Ping timeout: 256 seconds)
[11:58:48] *** karlosz_ is now known as karlosz
[12:13:27] *** Joins: s-liao (~s-liao@101.86.96.21)
[12:18:37] <amazigh> hello here
[12:22:55] <sham1> Hello there
[12:34:20] <s-liao> Hi
[12:36:39] *** Quits: sonny (~user@bras-base-london1483w-grc-28-70-48-35-173.dsl.bell.ca) (Remote host closed the connection)
[12:36:56] <sham1> Hi
[12:41:19] *** Quits: frost (~frost@user/frost) (Quit: Connection closed)
[12:50:22] *** Joins: alMalsamo (~alMalsamo@gateway/tor-sasl/almalsamo)
[12:51:36] *** Quits: karlosz (~karlosz@47.151.136.69) (Quit: karlosz)
[12:52:49] <ns12> Why do successive Scheme standards continue to specify "eval", although its use is considered bad style?
[12:53:00] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Ping timeout (120 seconds))
[12:53:13] *** Joins: s-liao (~s-liao@101.86.96.21)
[12:53:28] *** Joins: gproto23 (~gproto23@user/gproto23)
[12:53:31] <dpk> it is?
[12:54:10] <dpk> i guess it depends on the context
[12:54:47] <ns12> dpk: I thought so. I learned that "eval" should always be avoided if alternative approaches are available.
[12:55:06] <ns12> s/I thought so. //
[12:55:18] <wasamasa> that's like saying that goto should be always avoided
[12:55:38] <wasamasa> doesn't mean you can eradicate goto from C
[12:55:41] <wasamasa> far from it
[12:55:43] <wasamasa> it has its uses
[12:56:35] <ns12> Is "eval" discouraged because it produces big executables?
[12:56:43] <wasamasa> lol
[12:57:07] <wasamasa> that's a side effect of eval making reasoning about your program a lot harder
[12:57:45] *** Joins: seninha (~seninha@user/seninha)
[12:58:02] <ns12> Ah? I thought that "eval" would always need to include an entire Scheme interpreter, thus making the executable larger. Is my understanding incorrect?
[12:58:19] <wasamasa> the scheme interpreter can live in a runtime library
[12:58:25] <dpk> well, ‘an entire Scheme interpreter’ isn’t particularly big ;-)
[12:58:46] <wasamasa> doesn't change a thing about the executable size if it's dynamically linked against the runtime library anyway
[12:59:52] <ns12> wasamasa: Ah okay. That makes sense. I was thinking about the statically linked case.
[13:01:41] <sham1> (let loop () (write (eval (read))) (loop))
[13:01:54] <sham1> REWL
[13:02:04] <s-liao> What is this?
[13:02:05] <wasamasa> if only read worked like this
[13:02:12] <wasamasa> or does it
[13:02:31] <wasamasa> I'm so used to always calling it with a port
[13:03:06] <sham1> Well, one would also need (interaction-environment) but y'know
[13:03:22] <wasamasa> it actually does, wow
[13:03:39] <sham1> Yeah, read uses (current-input-port) by default
[13:04:15] <s-liao> eval has different level
[13:05:14] <sham1> But yeah, the size of shipping the compiler as a library isn't why eval is discouraged in other languages
[13:05:37] <s-liao> Like Python can eval binary code.
[13:05:56] <sham1> Mmhm
[13:06:41] <sham1> Python even used to use eval in their implementation of NamedTuple, so eval clearly has uses even in the languages where it's frowned upon
[13:16:53] <ns12> sham1: The use of "eval" is not frowned upon in Scheme?
[13:18:36] <s-liao> And also elisp in Emacs, eval is that executing the bytecode of Emacs.
[13:20:40] <ns12> sham1: "REPL" should be renamed to "REWL", simply because "REWL" is reality while "REPL" is fiction in Scheme.
[13:21:11] <Franciman> reading the r7rs small standard, iam confused by the rule that each identifier belongs to a library
[13:21:42] <Franciman> because import is an identifier belonging to (scheme base), so how do I import (scheme base) if import is defined in there?
[13:25:10] <sham1> Import isn't in (scheme base), is it
[13:25:14] <s-liao> Basically what I mean is that it dependence on how the implementation deal with  it.
[13:27:40] <s-liao> Import is like part of the module tool.
[13:28:24] <s-liao> Should see how standard define the module.
[13:28:48] <Franciman> ah wait
[13:28:54] <Franciman> i got mistaken with include
[13:28:58] <Franciman> sorry :(
[13:30:05] <Franciman> yes the standard says that a program is composed of imports
[13:30:25] <Franciman> and followed by expressions and definitions
[13:30:29] <Franciman> but here comes my second question
[13:30:38] <Franciman> if i don't import (scheme base) i can't do definitions, right?
[13:31:16] <sham1> define is a built-in IIRC
[13:31:53] <Franciman> the standard reports it's an identifier of (scheme base)
[13:31:55] <sham1> Oh, hm
[13:32:03] <amazigh> it depends
[13:32:09] <Franciman> page 73
[13:32:35] <sham1> Is the appendix A normative
[13:32:36] <amazigh> cyclone has some builtins, some like chez require to (import (chezscheme)) or (import (rnrs))
[13:32:51] <amazigh> guile has builtins too
[13:33:14] <sham1> Well I suppose you have to (import (scheme base)) at the top
[13:34:01] <Franciman> well i think that having builtins is not against the standard
[13:34:15] <Franciman> but you must also have the (scheme base) library export a define
[13:34:47] <Franciman> i read that (at page 5) all scheme implementations must provide the base library and all the identifiers exported from it
[13:36:28] <wasamasa> isn't this about how things behave inside a library?
[13:42:30] <Franciman> wasamasa: i am confused by the standard when it says (in paragraph 1.3.1): Every identifier defined in this report appears in one or more several /libraries/. Identifiers defined in the /base library/ are not marked specially in the body of the report.
[13:42:51] <Franciman> so what i gather is that each identifier belongs to a library
[13:43:18] <Franciman> and to use identifiers to a library, i need to import the library
[13:43:26] <Franciman> belonging to
[13:43:42] <Franciman> but then import is an identifier not belonging to any library, and i am confused :(
[13:46:19] <wasamasa> > A Scheme program consists of one or more import decla- rations followed by a sequence of expressions and defini- tions.
[13:46:30] <wasamasa> sneaky
[13:47:02] <wasamasa> so you need at the very least one import
[13:47:26] <wasamasa> it explains later on why
[13:47:34] <Franciman> wait, what page are you on?
[13:47:45] <wasamasa> section 5.1
[13:47:53] <wasamasa> page 25
[13:48:52] <Franciman> ah it says «the initial environment of a program is empty, so at least one import is needed»
[13:49:32] <Franciman> so import is the only identifier not belonging to any library
[13:50:11] *** Joins: rgherdt (~rgherdt@2a02:8109:86c0:d8d:35da:7bb3:e3f8:3a44)
[13:50:32] <wasamasa> if you look at this carefully, they only speak of identifiers belonging to the imported libraries
[13:52:22] <wasamasa> the details of identifiers are explained in section 3.1, page 9
[13:54:17] <wasamasa> perhaps it would have been more consistent to use something like #!import (scheme base) :P
[13:54:31] <wasamasa> just to make it excruciatingly clear that it's a declaration
[13:55:12] <Franciman> i need to learn about the environment of a program
[13:55:42] <Franciman> to make sense of the import thing, it's basically the only builtin
[13:57:59] <Franciman> ah ahh
[13:58:02] <Franciman> 7.1.3 helps
[13:58:28] <Oxyd> Speaking of import, there's an ambiguity there: Suppose you have a library (foo) that exports the identifier “import”. Now (import (foo)) (import (bar)) is ambiguous: Is the second import a library import, or does it refer to the import from (foo)?
[13:59:00] <Franciman> yes :P
[13:59:07] <sham1> import might be invalid as an identifier
[13:59:15] <Franciman> it is as if they want to treat import as a special form
[13:59:23] <Franciman> you can redefine lambda, for example
[13:59:27] <Franciman> in a different library
[13:59:31] <Franciman> but import is the building block
[13:59:33] <Franciman> a builtin
[14:03:13] *** Quits: gproto23 (~gproto23@user/gproto23) (Remote host closed the connection)
[14:04:38] *** Joins: Darkcoal (~user@130.164.146.159)
[14:04:38] <dpk>  Oxyd: it's not ambiguous in R7RS small because code and library declarations are separated
[14:04:55] <dpk> (import (bar)) in your example has to be the library declaration version
[14:05:18] <dpk> if it were (begin (import (bar))), the begin would signal the beginning of code, and it would be the imported import
[14:05:45] <Oxyd> I don't see why it would have to be the library import version.
[14:06:31] <dpk> because code in an R7RS library has to be inside a (begin …) or pulled in by include or include-ci
[14:06:51] <dpk> anything else inside (define-library …) is a library declaration, not code
[14:07:09] <Oxyd> Who cares?
[14:07:14] <Oxyd> We're talking about programs here, not libraries.
[14:07:26] <dpk> ?
[14:07:56] <Franciman> dpk: what page can i read this?
[14:08:04] <Franciman> i couldn't find it
[14:08:17] <dpk> oh, you mean (effectively): (begin (import (foo)) (import (bar)))
[14:08:21] <Oxyd> Specifically the grammar rule <program> → <import declaration>+ <command or definition>+. If import is imported, then (import …) can be either an <import declaration> or <command or definition>.
[14:09:03] <dpk> in that case the (import (foo)) is illegal if it imports an identifier called 'import' that doesn't refer to the same binding as in the base Scheme language
[14:09:25] <Oxyd> But the base Scheme language doesn't define any “import” identifier.
[14:09:27] <dpk> because duplicate imports under the same name not referring to the same binding are erroneous 
[14:09:42] <Franciman> x.x
[14:10:24] <Oxyd> It would make no sense for import to be in, say, (scheme base) because you wouldn't be able to import (scheme base) without importing (scheme base) first.
[14:10:34] <Franciman> this for sure
[14:10:50] <Franciman> in fact even if the standard says «every identifier in this report belongs to a library»
[14:10:53] <Franciman> import doesn't
[14:11:01] <Oxyd> Yup.
[14:11:06] <Franciman> and in fact in appendix A, it's explicitly not present
[14:11:10] <dpk> yes, you would, by using libraries which are outside of the library system
[14:11:11] <Franciman> in no library
[14:11:27] <Oxyd> There are no “libraries outside the library system” in R7RS.
[14:11:56] <dpk> err. that was not very well formulated. library declarations, including define-library and import and so on, are not identifiers
[14:12:04] <dpk> they are not imported from libraries
[14:12:12] <Oxyd> And that's the core of the issue here.
[14:12:37] <dpk> they are treated as symbol, matched with symbol=? not free-identifier=? (or bound-identifier=?)
[14:12:46] <Oxyd> It means you can happily export “import” and then you get that ambiguity.
[14:12:47] <Franciman> dpk: where can I read this in the standard?
[14:12:50] <dpk> oh, now i see what your problem is with program structure
[14:13:18] <dpk> that is admittedly a semantic ambiguity, but not a syntactic one
[14:14:34] <dpk> i think the spec would allow either interpretation, but in reality only one makes sense — everything that looks like (import …) at the head of a program is an import and not a use of an identifier called ‘import’, because import declarations are processed at a distinct stage of interpreting a program from resolving identifiers
[14:14:37] <Oxyd> I suppose if the program were (import (foo)) (import 4), it would be clear that the second import refers to the imported import because it wouldn't be a syntactically valid <import declaration>. I wonder how many implementations actually implement it this way. :P
[14:16:59] <dpk> Franciman: i don't think the standard is explicit about this, actually, but it's the only possible interpretation of the description of define-library in section 5.6
[14:17:42] <Oxyd> This ambiguity is also annoyingly pointless because the grammar could have easily been that a program starts with just one single import. You can import multiple things in one <import declaration> so there's no real need for several such declarations.
[14:17:59] <dpk> i mean, you can't rename define-library, for example
[14:18:34] <dpk> nor the library declarations, since, as has been pointed out, they're not part of libraries themselves
[14:24:27] *** Joins: frost (~frost@user/frost)
[14:34:24] <Franciman> hm so i am expected to be a scheme expert to learn from the standard
[14:38:57] <Franciman> i didn't think about it lol
[14:39:00] <Franciman> but it makes sense
[14:40:22] <Franciman> oh i am happy that r7rs recognizes the existence of srfi
[14:49:39] *** Quits: frost (~frost@user/frost) (Quit: Connection closed)
[14:58:54] *** Joins: jobol (~jobol@2a01:e34:ee5c:ee50:d6be:d9ff:fea3:db03)
[15:34:31] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[16:07:33] *** Joins: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net)
[16:09:51] *** Joins: s-liao (~s-liao@101.86.96.21)
[16:16:47] *** Joins: Avichi (~Avichi@2001:980:1b5c:1:4b4a:7d81:2fe3:79ac)
[16:42:26] *** Quits: jdevoo (~jdevoo@0.19.77.83.dynamic.wline.res.cust.swisscom.ch) (Quit: leaving)
[16:48:37] *** Quits: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net) (Ping timeout: 240 seconds)
[16:57:30] *** Joins: jackson99 (~bc8147f2@cerf.good1.com)
[16:57:30] *** Quits: jackson99 (~bc8147f2@cerf.good1.com) (Excess Flood)
[17:24:26] <amazigh> what is the expected behavior of quasiquote inside in a pattern of clause as part of SRFI-204 WCS match?
[17:24:46] <amazigh> e.g. (match-lambda (`(,@(a _ **1)) a))
[17:25:01] *** Quits: elflng (~elflng@5.28.137.182) (Ping timeout: 256 seconds)
[17:25:13] <amazigh> I am going through the tests, I can't understand.
[17:25:44] <amazigh> IIRC quasiquote is not supported by WCS matcher, but I wonder what is the expected behavior, maybe a syntax error or something else?
[17:29:48] *** Joins: skapata (~Skapata@2804:14c:87b0:a6f9:5cef:e512:2284:6d3c)
[17:29:48] *** Quits: skapata (~Skapata@2804:14c:87b0:a6f9:5cef:e512:2284:6d3c) (Changing host)
[17:29:48] *** Joins: skapata (~Skapata@user/skapata)
[17:33:22] *** Joins: elflng (~elflng@5.28.137.182)
[17:43:15] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Client closed)
[17:51:22] *** Parts: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1) ()
[17:55:01] *** Joins: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1)
[18:00:40] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[18:04:06] *** Joins: s-liao (~s-liao@101.86.96.21)
[18:06:23] *** Quits: ouestbillie (~gallup@54.29.90.149.rev.vodafone.pt) (Ping timeout: 256 seconds)
[18:21:37] *** Quits: shawnw (~shawn_w@c-73-225-121-73.hsd1.wa.comcast.net) (Ping timeout: 240 seconds)
[18:22:06] *** Joins: grettke (~grettke@cpe-65-29-228-30.wi.res.rr.com)
[18:29:37] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[18:34:24] *** Joins: frost (~frost@user/frost)
[18:34:34] *** Joins: s-liao (~s-liao@101.86.96.21)
[18:47:56] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Client closed)
[19:03:46] *** Joins: jao (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net)
[19:05:38] *** Quits: frost (~frost@user/frost) (Quit: Connection closed)
[19:11:23] *** Joins: ouestbillie (~gallup@54.29.90.149.rev.vodafone.pt)
[19:15:02] *** Quits: Avichi (~Avichi@2001:980:1b5c:1:4b4a:7d81:2fe3:79ac) (Quit: Client closed)
[19:20:02] <Franciman> so libraries are syntactic sugar over environments
[19:20:06] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[19:20:18] <Franciman> i like this point of view
[19:20:33] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[19:24:25] <tokie> wow, r7small's text on define-syntax is so much improved over r5rs
[19:24:31] <tokie> *syntax-rules
[19:33:34] *** Joins: Avichi (~Avichi@2001:980:1b5c:1:4b4a:7d81:2fe3:79ac)
[19:38:58] *** Joins: gproto23 (~gproto23@user/gproto23)
[19:43:56] *** Quits: ouestbillie (~gallup@54.29.90.149.rev.vodafone.pt) (Remote host closed the connection)
[19:47:51] *** Joins: ouestbillie (~gallup@54.29.90.149.rev.vodafone.pt)
[20:02:29] *** Joins: confuzeus (~h_m@186-149-117-154.bitcointernet.co.za)
[20:04:44] <gwatt> Is it? I thought the only change was the custom ellipsis.
[20:28:35] <dpk> R7 also got (... ...) and various forms of patterns allowed (like (pattern ... . tail-pattern)) from R6RS
[20:28:55] *** Quits: jao (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net) (Remote host closed the connection)
[20:29:03] <gwatt> ah, ok
[20:29:20] *** Quits: gproto23 (~gproto23@user/gproto23) (Quit: Leaving)
[20:33:42] *** Joins: jao (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net)
[20:40:35] *** Quits: jobol (~jobol@2a01:e34:ee5c:ee50:d6be:d9ff:fea3:db03) (Quit: Leaving)
[20:53:00] <tokie> gwatt: they rewrote the section, though
[20:53:32] <tokie> it's a lot more clear now
[20:53:44] <tokie> it's also clear that i'm not sure i care to implement macros, lol
[20:54:01] <tokie> or maybe i will implement a very thin subset to do what i need
[21:15:00] *** Quits: mdhughes (~mdhughes@user/mdhughes) (Remote host closed the connection)
[21:17:08] *** Joins: mdhughes (~mdhughes@user/mdhughes)
[21:25:27] *** Joins: karlosz (~karlosz@47.151.136.69)
[21:30:01] *** Quits: ns12 (~ns12@user/ns12) (Quit: bye)
[21:31:02] *** Quits: confuzeus (~h_m@186-149-117-154.bitcointernet.co.za) (Remote host closed the connection)
[21:31:10] *** Joins: ns12 (~ns12@user/ns12)
[21:31:58] *** Joins: wnklmnn (~wnklmnn@2a02:908:4e2:9740:2d8:61ff:fef9:b4c2)
[21:41:37] *** Quits: ouestbillie (~gallup@54.29.90.149.rev.vodafone.pt) (Ping timeout: 240 seconds)
[21:42:49] *** Quits: karlosz (~karlosz@47.151.136.69) (Quit: karlosz)
[21:43:41] *** Joins: ouestbillie (~gallup@185.213.154.231)
[22:05:36] *** Quits: deltab_ (~deltab@95.154.230.49) (Changing host)
[22:05:36] *** Joins: deltab_ (~deltab@user/deltab)
[22:06:12] *** deltab_ is now known as deltab
[22:31:44] *** Quits: livoreno (~livoreno@user/notzmv) (Read error: Connection reset by peer)
[22:39:43] *** Joins: karlosz (~karlosz@47.151.136.69)
[22:41:54] *** Quits: karlosz (~karlosz@47.151.136.69) (Client Quit)
[22:53:03] *** Joins: klovett (~klovett@166.205.90.179)
[22:54:57] *** Quits: klovett_ (~klovett@166.205.90.179) (Ping timeout: 240 seconds)
[23:36:05] *** Joins: johnjaye (~pi@173.209.65.233)
[23:46:57] *** Quits: ouestbillie (~gallup@185.213.154.231) (Ping timeout: 256 seconds)
[23:48:54] *** Joins: ouestbillie (~gallup@54.29.90.149.rev.vodafone.pt)
