[00:49:00] *** Joins: ur5us_ (~ur5us@2406:e002:6888:2f01:6b39:b2a:58ca:5636)
[05:05:17] *** Quits: ur5us_ (~ur5us@2406:e002:6888:2f01:6b39:b2a:58ca:5636) (Ping timeout: 240 seconds)
[06:11:00] *** Joins: ur5us_ (~ur5us@2406:e002:6888:2f01:d8fb:5ff2:7baf:1c2c)
[07:25:33] *** Quits: Unicorn_Princess (~Unicorn_P@46-54-248-191.static.kate-wing.si) (Remote host closed the connection)
[07:27:33] *** Joins: Unicorn_Princess (~Unicorn_P@46-54-248-191.static.kate-wing.si)
[07:47:58] *** Quits: ur5us_ (~ur5us@2406:e002:6888:2f01:d8fb:5ff2:7baf:1c2c) (Quit: Leaving)
[07:52:49] *** Joins: ur5us (~ur5us@2406:e002:6888:2f01:d8fb:5ff2:7baf:1c2c)
[08:07:10] *** Quits: Unicorn_Princess (~Unicorn_P@46-54-248-191.static.kate-wing.si) (Remote host closed the connection)
[08:43:17] *** Quits: ur5us (~ur5us@2406:e002:6888:2f01:d8fb:5ff2:7baf:1c2c) (Ping timeout: 240 seconds)
[09:07:14] <FromGitter> <crinklywrappr> hey guys quick question - i can use `set-leader-keys` to define a custom keybinding eg `(spacemacs/set-leader-keys "ogcr" 'comment-or-uncomment-region)` ‚èé how do i set a keybinding prefix eg `(spacemacs/??? "ogc" "comments")`
[09:12:37] <FromGitter> <lebensterben> declare-prefix
[09:14:37] <FromGitter> <lebensterben> (spacemacs/declare-prefix ‚èé   "ogc" "comments" ‚èé   "ogcr" '("toggle comment region" . comment-or-uncomment-region))
[09:14:44] <FromGitter> <lebensterben> something like this
[09:15:23] <FromGitter> <lebensterben> spacemacs/declare-prefix is more powerful
[09:20:08] <FromGitter> <crinklywrappr> thanks @lebensterben !
[09:20:18] <FromGitter> <bryce-carson> @lebensterben Do you know why Spacemacs isn't using `async-byte-recompile-directory`? Could you also explain what impacts native compilation will bring for Spacemacs in the future? ‚èé You said before that all of `core/` needs to be reviewed. ‚èé I'm reading through `core/`, and at the moment I'm jumping around many files because I have reached the `spacemacs/init` function.
[09:21:55] <FromGitter> <lebensterben> > why Spacemacs isn't using async-byte-recompile-directory ‚èé  ‚èé probably no one implemented it...
[09:22:15] <FromGitter> <lebensterben> native compilation will make it much faster
[09:22:47] <FromGitter> <bryce-carson> I've used pGTK+nativecomp before, it was pretty fast from the differences that I *could* notice.
[09:23:13] <FromGitter> <lebensterben> just as an example, spacemacs/set-leader-keys and spacemacs/declare-prefix are not documented correctly...
[09:23:45] <FromGitter> <bryce-carson> Yes, I have noticed a few things that aren't documented at all except in GitHub issues and commentary, other than a poor five word description.
[09:23:55] <FromGitter> <bryce-carson> For intance, the lock file has no real internal documentation.
[09:24:04] <FromGitter> <lebensterben> I probably am the only one who knows they support multiple arguments...
[09:25:00] <FromGitter> <lebensterben> the long term goal is to phase out these commands
[09:25:06] <FromGitter> <lebensterben> and use spacebind instead
[09:25:39] <FromGitter> <lebensterben> unfortunately the author of spacebind is the war refuge from Ukraine...
[09:26:08] <FromGitter> <bryce-carson> Differently so than the function documentation? ‚èé  ‚èé ```(spacemacs/set-leader-keys ‚èé    "a" ‚Äôcommand1 ‚èé    "C-c" ‚Äôcommand2 ‚èé    "bb" ‚Äôcommand3)``` [https://gitter.im/syl20bnr/spacemacs?at=623aa8679a09ab24f3b9581b]
[09:26:48] <FromGitter> <bryce-carson> That is unfortunate for them, and everyone else fleeing Ukraine or sheltering there as they try to survive. It's very sad.
[09:28:29] <FromGitter> <lebensterben> spacemacs/set-leader-keys is a thin wrapper of define-key
[09:29:37] <FromGitter> <lebensterben> spacemacs/declare-prefix is a wrapper for which-key-add-keymap-based-replacements
[09:30:09] <FromGitter> <lebensterben> the later can both add description strings and define key bindings
[09:30:25] <FromGitter> <lebensterben> so the former one is actually redundant...
[09:30:51] <FromGitter> <lebensterben> it exists because at first the later one can only add description string
[09:31:29] <FromGitter> <lebensterben> but these two are not really interchangeable...
[09:32:02] <FromGitter> <lebensterben> you want which-key always showing you descriptions even before a package is loaded
[09:32:29] *** Joins: Codaraxis_ (~Codaraxis@user/codaraxis)
[09:33:05] <FromGitter> <lebensterben> so spacemacs/declare-prefix should be added in :init section of use-package call
[09:33:49] *** Quits: Codaraxis (~Codaraxis@user/codaraxis) (Ping timeout: 240 seconds)
[09:34:13] <FromGitter> <lebensterben> on the other hand you don't always want commands being binded, not until the package is actually loaded
[09:34:17] *** Quits: pagurus (~user@i59F52492.versanet.de) (Ping timeout: 240 seconds)
[09:34:41] <FromGitter> <lebensterben> so spacemacs/set-leader-keys usually is added to :config section of use-package call
[09:38:45] <FromGitter> <bryce-carson> I see.
[09:45:11] <FromGitter> <bryce-carson> Are you documenting what you know about Spacemacs maintenance anywhere? It would be great if we had Projects on GitHub that wasn't just tracking old and closed issues from 2016. I haven't used Projects before, but it would be nice if there was a real mailing list. ‚èé  ‚èé Am I missing or overlooking something?
[09:53:43] <FromGitter> <lebensterben> > Are you documenting what you know about Spacemacs maintenance anywhere ‚èé  ‚èé Nope
[09:54:38] <FromGitter> <lebensterben> I expect people to read source code...
[10:02:54] *** Joins: ur5us (~ur5us@2406:e002:6888:2f01:6b39:b2a:58ca:5636)
[10:07:24] <FromGitter> <bryce-carson> Indeed, but I meant where the project is headed, who is working on what.
[10:07:58] <FromGitter> <bryce-carson> I've nevwr dealt with such a big project and I dont know if studying the git log would actually help to understand whats changing or being worked on.
[10:08:02] <FromGitter> <bryce-carson> Thats what i meant.
[10:08:44] <FromGitter> <bryce-carson> For instance, if a new contributor unknowingly spent time refactoring the set-leader-keys, when space-bind is being targeted as the replacement
[10:09:03] <FromGitter> <bryce-carson> Just "whats going on?"
[10:10:26] <FromGitter> <bryce-carson> I'm reading a *lot* of code right now haha
[10:10:38] <FromGitter> <bryce-carson> But have no idea whats going on with the project
[10:51:11] <FromGitter> <lebensterben> good question...
[11:14:09] *** Quits: ur5us (~ur5us@2406:e002:6888:2f01:6b39:b2a:58ca:5636) (Ping timeout: 256 seconds)
[11:50:38] *** Joins: fahrradToken (~fahrradTo@2a02:810b:149f:f0f4::3928)
[13:07:30] *** Joins: ur5us (~ur5us@2406:e002:6888:2f01:6b39:b2a:58ca:5636)
[13:27:01] *** Quits: ur5us (~ur5us@2406:e002:6888:2f01:6b39:b2a:58ca:5636) (Ping timeout: 245 seconds)
[13:50:04] *** Joins: ur5us (~ur5us@2406:e002:6888:2f01:6b39:b2a:58ca:5636)
[13:50:24] *** Joins: nemox (nemox@kvm6.telegraphics.com.au)
[14:13:55] *** Quits: ur5us (~ur5us@2406:e002:6888:2f01:6b39:b2a:58ca:5636) (Ping timeout: 250 seconds)
[15:50:16] *** Joins: Codaraxis__ (~Codaraxis@user/codaraxis)
[15:54:19] *** Quits: Codaraxis_ (~Codaraxis@user/codaraxis) (Ping timeout: 256 seconds)
[15:54:34] *** Joins: osfe (~lemaire@nanpc540.in2p3.fr)
[17:34:36] *** Quits: osfe (~lemaire@nanpc540.in2p3.fr) (Ping timeout: 260 seconds)
[17:44:33] *** Joins: osfe (~lemaire@nanpc540.in2p3.fr)
[17:56:12] *** Joins: Unicorn_Princess (~Unicorn_P@46-54-248-191.static.kate-wing.si)
[19:52:31] *** Quits: fahrradToken (~fahrradTo@2a02:810b:149f:f0f4::3928) (Ping timeout: 268 seconds)
[19:59:19] <FromGitter> <bryce-carson> One thing we could do is make an organization and put that in the development docs so we can use GH projects to track things
[19:59:51] <FromGitter> <bryce-carson> Since we can't with the main repo and a maintainer user account fork would go nowhere in the long run
[20:00:18] <FromGitter> <bryce-carson> Then we could at least track the code review of `core/*`
[20:01:26] <FromGitter> <bryce-carson> And also since `gh.com/Spacemacs/` is a dead place holder
[20:01:55] <FromGitter> <bryce-carson> Doom is using all the big features of GH to track their communcal work and that seems to be working very well for them
[20:04:15] <FromGitter> <bryce-carson> Up to you and the other current maintainers though
[20:04:33] <FromGitter> <bryce-carson> The BDFL if they are around somewhere
[20:17:30] <FromGitter> <lebensterben> > One thing we could do is make an organization ‚èé  ‚èé I cannot do that
[20:17:51] <FromGitter> <bryce-carson> A separate one.
[20:18:04] <FromGitter> <bryce-carson> Not transfer the repo to it
[20:18:24] <FromGitter> <lebensterben> I am the sole current maintainer recently...
[20:29:10] <FromGitter> <bryce-carson> I guess Issues could be used for project planning.
[20:29:34] <FromGitter> <bryce-carson> Can convert checkboxes to issues, right?
[20:36:07] *** Quits: osfe (~lemaire@nanpc540.in2p3.fr) (Ping timeout: 260 seconds)
[20:42:00] <FromGitter> <bryce-carson> I created a project development issue to track stuff.
[20:45:13] <FromGitter> <bryce-carson> I cant convert the task for the `core/*` code review to an issue at this time because of the GitHub outages, or perhaps a permission issue? The error just says "try again" so it's because of the outages.
[20:52:37] <FromGitter> <bryce-carson> Are you able to pin the issue, @lebensterben? https://docs.github.com/en/issues/tracking-your-work-with-issues/pinning-an-issue-to-your-repository
[20:53:15] <FromGitter> <bryce-carson> It does say, "your" repository, so I don't know if you'll have permissions for that.
[20:53:35] <FromGitter> <bryce-carson> If not it's okay. We can put it in the documentation.
[20:59:50] <FromGitter> <lebensterben> this is not necessary
[21:00:04] <FromGitter> <lebensterben> you can just make a tracking issue like these https://github.com/syl20bnr/spacemacs/search?q=tracking+issue&type=issues
[21:03:27] <FromGitter> <bryce-carson> I see. This one could be used to to tie all those together, maybe? Make it one place to look?
[21:06:44] <FromGitter> <lebensterben> the intent of this issue isn't clear
[21:06:55] <FromGitter> <lebensterben> what do you you want to include?
[21:24:54] <FromGitter> <bryce-carson> It's intended to track larger issues of project development. Code reviews, mile stones, breaking changes, deprecations, etc.
[21:25:07] <FromGitter> <bryce-carson> Things like tracking the eventual change to spacebind
[21:25:23] <FromGitter> <bryce-carson> But if theres already tracking issues for that, then they can be pointed to from this.
[21:40:51] <FromGitter> <bryce-carson> From what I see, "Tracking Issue" is just a loose convention that is making use of the same "convert task to issue" or adding tasks for existing issues. ‚èé  ‚èé How did you include the issues next to the tasks if they already existed, @lebensterben? I'm not familiar with the second case (adding tasks for existing issues). See this screenshot for what I'm asking about in this second case: ‚èé  ‚èé 
[21:40:51] <FromGitter> ... ((https://imgur.com/CacSK5J "Core Load Paths tracking issue screenshot")) ... [https://gitter.im/syl20bnr/spacemacs?at=623b549b9a09ab24f3bab492]
[21:41:52] <FromGitter> <bryce-carson> For the second case, was it *just* typing the issue number like normal and GitHub has made it richer? Normally when I mention an issue it has never rendered like that.
[21:42:39] <FromGitter> <lebensterben> > was it just typing the issue number like normal and GitHub has made it richer ‚èé  ‚èé yes
[21:43:37] <FromGitter> <bryce-carson> Ah, I see the difference. Now it's obvious, if it's a *task* it will render like that, but not if it's *only a mention* of an issue.
[21:44:06] <FromGitter> <bryce-carson> We should use the Project Management (https://github.com/syl20bnr/spacemacs/labels/Project%20Management) label as much as we can for those, however.
[21:47:51] <FromGitter> <lebensterben> but the label is doesn't contain any information on the issue
[21:48:22] *** Joins: Minvera (~Minvera@user/Minvera)
[21:48:26] <FromGitter> <bryce-carson> Not on its own, yes. It would be helpful for the larger changes going on in the project, however.
[21:49:29] <FromGitter> <lebensterben> there are projects
[21:49:46] <FromGitter> <lebensterben> https://github.com/syl20bnr/spacemacs/projects
[21:49:58] <FromGitter> <bryce-carson> A canonical label can bring each of these tracking issues together without using words in the title, but of course I think only people with push permission can assign labels to issues, so it's unnecessary work. ‚èé  ‚èé That's why #15422 would be helpful.
[21:50:02] <FromGitter> <lebensterben> https://github.com/syl20bnr/spacemacs/projects
[21:52:01] <FromGitter> <bryce-carson> As far as I can tell, only maintainers can add things to the project board as it is. :shrug: ‚èé  ‚èé I'm just trying to grasp *what* is going on throughout the project so I can set myself up, and other new contributors in the future, to contribute more meaningfully and easier without hurdling over these things like I am.
[21:52:41] <FromGitter> <bryce-carson> The project board does automatically add cards for things with certain labels, though, but that's not useful to the average contributor because they cannot assign labels.
[21:54:03] <FromGitter> <lebensterben> > I'm just trying to grasp what is going on throughout the project ‚èé  ‚èé You gotta read the source code...
[21:54:17] <FromGitter> <bryce-carson> > > I'm just trying to grasp what is going on throughout the project ‚èé >  ‚èé > You gotta read the source code... ‚èé  ‚èé I am. [https://gitter.im/syl20bnr/spacemacs?at=623b57c1f43b6d783f166481]
[21:54:45] <FromGitter> <bryce-carson> Reading source code is separate from working on a large project like Spacemacs with tens of other people.
[21:55:27] <FromGitter> <lebensterben> make a tracking issue when you have an idea for changes.
[21:55:38] <FromGitter> <lebensterben> after discussion you can make a PR
[21:55:45] <FromGitter> <lebensterben> simple as that
[21:55:53] <FromGitter> <bryce-carson> Alright.
[21:56:11] <FromGitter> <lebensterben> for small changes just make a PR directly
[21:57:55] <FromGitter> <lebensterben> there are plenty of eye-irritating stuffs all around
[21:58:06] <FromGitter> <lebensterben> it's really easy to find something to work on
[23:45:10] <FromGitter> <bryce-carson> How should we consume images in layer readmes? Should we define a size to use globally in all layer readmes for "layer" banners or language logos, that are separate from other images like screenshots displaying a feature?
