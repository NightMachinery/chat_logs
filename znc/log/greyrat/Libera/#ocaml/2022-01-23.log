[00:00:21] *** Joins: rgrinberg (~textual@187.223.115.174)
[00:17:30] <d_bot> <mk-fg> If you have or can have input stream/fd as pipe (e.g. stdin), might want to avoid dup2, as iirc that shouldn't duplicate actual data on these
[00:31:02] *** Quits: gravicappa (~gravicapp@178.214.248.83) (Ping timeout: 240 seconds)
[00:36:09] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Ping timeout: 276 seconds)
[00:38:03] *** Joins: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-37-70-24-250-33.dsl.bell.ca)
[01:18:32] *** Quits: jlrnick (~josephler@2a01cb040a1594006c3c30233d5dcb6a.ipv6.abo.wanadoo.fr) (Ping timeout: 250 seconds)
[01:28:17] *** Joins: mro (~mro@port-92-195-171-59.dynamic.as20676.net)
[01:33:08] *** Joins: olle (~olle@i5E866D86.versanet.de)
[01:33:16] <olle> Is Bolt still the goto unit test lib for OCaml?
[01:33:36] <olle> Oh no
[01:33:38] <olle> OUnit?
[01:35:40] *** Quits: vicfred (~vicfred@user/vicfred) (Quit: Leaving)
[01:40:28] <d_bot> <Valentin> I'd say Alcotest
[01:40:50] <olle> Yeah?
[01:41:52] <olle> Gonna read
[01:47:00] *** Quits: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl) (Remote host closed the connection)
[01:49:15] <olle> Hm, there's also https://github.com/janestreet/ppx_inline_test
[01:49:19] <olle> `let%test = ...`
[01:50:45] *** Quits: mro (~mro@port-92-195-171-59.dynamic.as20676.net) (Read error: Connection reset by peer)
[01:50:51] *** Joins: mro_ (~mro@2002:5cc3:ab3b:0:c9d6:5cde:e169:9b2a)
[02:06:21] *** Joins: Anarchos (~Anarchos@88.168.112.216)
[02:15:36] <olle> Maybe both alcotest and inline test is an idea...
[02:26:58] *** Quits: bartholin (~bartholin@158.110.70.210) (Quit: Leaving)
[02:28:10] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[02:28:50] *** Quits: Anarchos (~Anarchos@88.168.112.216) (Quit: Vision[]: i've been blurred!)
[02:41:00] <d_bot> <RegularSpatula> ppx_expect and cram tests are also awesome if you‚Äôre into that kind of testing
[02:46:29] *** Quits: mro_ (~mro@2002:5cc3:ab3b:0:c9d6:5cde:e169:9b2a) (Quit: Leaving...)
[03:10:19] <olle> Got stuck in dune config :(
[03:10:27] <olle> But it's late now, I'll continue next week. Thanks tho :)
[03:41:24] <d_bot> <Continuation Calculus> Can I assert to dune that a dependency exists?
[03:42:09] <d_bot> <Continuation Calculus> I have an .exe that has a target in a subfolder, but dune errors with `does not denote a file in the current directory`. So I was wondering if there was a way to just take care of the build order myself, and assert to dune that a given dep exists
[03:42:24] *** Quits: olle (~olle@i5E866D86.versanet.de) (Ping timeout: 250 seconds)
[03:49:06] <d_bot> <Continuation Calculus> TIL: `(no-infer <DSL>) to perform an action without inference of dependencies and targets. This is useful if you are generating dependencies in a way that Dune doesn‚Äôt know about, for instance by calling an external build system.`
[03:49:07] <d_bot> <Continuation Calculus> I guess that's recent because I've never heard of it, but this is üëå
[04:08:43] *** Quits: Tuplanolla (~Tuplanoll@91-159-68-166.elisa-laajakaista.fi) (Quit: Leaving.)
[04:08:49] <d_bot> <Continuation Calculus> Looks like it does not work with `diff` though üò¶
[04:09:58] *** Quits: rgrinberg (~textual@187.223.115.174) (Quit: My MacBook has gone to sleep. ZZZzzz‚Ä¶)
[04:11:32] *** Joins: rgrinberg (~textual@2806:101e:7:2b:c529:c1df:ee97:1d4c)
[04:11:41] *** Joins: zebrag (~chris@user/zebrag)
[04:14:00] <d_bot> <nsmmrs> I got Alcotest, inline tests, and MDX tests (tested docs) all working in this tiny project: https://github.com/nsmmrs/romanum
[04:14:48] <d_bot> <nsmmrs> I may have removed the inline tests - can't remember. But it was all very seamless, despite three testing tools being used at once.
[04:22:26] *** Quits: rgrinberg (~textual@2806:101e:7:2b:c529:c1df:ee97:1d4c) (Quit: My MacBook has gone to sleep. ZZZzzz‚Ä¶)
[04:23:54] *** Joins: rgrinberg (~textual@2806:101e:7:2b:c529:c1df:ee97:1d4c)
[04:24:18] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Ping timeout: 276 seconds)
[04:25:34] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[04:38:13] *** Quits: nfc_ (nfc@tilde.institute) (Ping timeout: 256 seconds)
[04:42:09] <d_bot> <monk> the people behind mdx unsurprisingly use it for also testing/keeping up to date their book RWOC
[04:42:24] <d_bot> <monk> so i'm guessing it would also be a good example case
[04:51:02] *** Quits: rgrinberg (~textual@2806:101e:7:2b:c529:c1df:ee97:1d4c) (Quit: My MacBook has gone to sleep. ZZZzzz‚Ä¶)
[04:55:12] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 250 seconds)
[04:55:40] *** Joins: rgrinberg (~textual@2806:101e:7:2b:c529:c1df:ee97:1d4c)
[04:59:26] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[05:01:27] *** Quits: Haudegen (~quassel@178.115.237.87.static.drei.at) (Ping timeout: 256 seconds)
[05:15:46] *** Quits: unyu (~pyon@user/pyon) (Quit: WeeChat 3.4)
[05:16:13] *** Joins: nfc_ (nfc@tilde.institute)
[05:17:35] *** Quits: rgrinberg (~textual@2806:101e:7:2b:c529:c1df:ee97:1d4c) (Quit: My MacBook has gone to sleep. ZZZzzz‚Ä¶)
[05:21:50] *** Joins: rgrinberg (~textual@2806:101e:7:2b:c529:c1df:ee97:1d4c)
[05:24:22] *** Joins: unyu (~pyon@user/pyon)
[06:26:15] *** Quits: zebrag (~chris@user/zebrag) (Quit: Konversation terminated!)
[06:38:57] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 240 seconds)
[06:41:08] *** Quits: chrisz (klsbommhjo@55d49a03.access.ecotel.net) (Ping timeout: 268 seconds)
[06:42:20] *** Joins: chrisz (w778b05blp@55d4db82.access.ecotel.net)
[06:55:40] <d_bot> <Inst> also
[06:55:50] <d_bot> <Inst> where's your memes channel?
[06:55:56] <d_bot> <Inst> If I post a picture of ocaml-tan, will I get banned?
[06:58:50] <companion_cube> I'm not aware of a meme channel
[07:01:21] *** Joins: mbuf (~Shakthi@223.184.116.99)
[07:01:23] <d_bot> <Inst> https://kakashi-nenpo.com/tan/src/1451388155521.jpg
[07:02:09] <companion_cube> is that a reference to the cigarette brand? :)
[07:12:32] *** Quits: terrorjack (~terrorjac@2a01:4f8:1c1e:509a::1) (Quit: The Lounge - https://thelounge.chat)
[07:14:35] *** Joins: terrorjack (~terrorjac@2a01:4f8:1c1e:509a::1)
[07:29:43] *** Quits: motherfsck (~motherfsc@user/motherfsck) (Ping timeout: 256 seconds)
[07:37:40] *** Joins: zebrag (~chris@user/zebrag)
[07:42:49] *** Joins: Colt (~Colt@user/colt)
[07:47:17] *** Quits: ralu (~ralu@static.211.245.203.116.clients.your-server.de) (Ping timeout: 256 seconds)
[08:16:45] *** Quits: bobo_ (~bobo@37.165.147.99) (Ping timeout: 256 seconds)
[08:16:50] *** Joins: spip (~bobo@37.164.224.196)
[08:24:35] <d_bot> <cemerick> üëç to that idea!
[08:35:58] <dh`> if I have a constructor with a large record type, is there a way to write: match e with | STUFF { elt; } -> let elt = foo in { e with elt; }
[08:36:25] <dh`> that is, not need to type in al the record fields in both the pattern and the result if I only want to muck with one of them?
[08:36:30] <dh`> s/al/all/
[08:40:16] <d_bot> <GNU Radio Shows> what exactly do you want to return?
[08:40:35] <d_bot> <GNU Radio Shows> a modified version of `e` (which is still `STUFF { ... }`?
[08:40:39] <d_bot> <GNU Radio Shows> or just the updated record
[08:41:44] <dh`> sorry, should have STUFF in the result
[08:42:16] <dh`> writing STUFF { e with elt; } says this isn't allowed because the type could escape (doesn't seem resonable)
[08:42:41] <dh`> but there's no obvious syntax for writing STUFF { e.STUFF with elt; } or whatnot
[08:42:51] <companion_cube> `match e with STUFF r -> let elt = foo in STUFF {r with elt}`
[08:43:17] *** Quits: zebrag (~chris@user/zebrag) (Quit: Konversation terminated!)
[08:43:44] <d_bot> <GNU Radio Shows> that only works if r is it's own record type, and not defined inline with the STUFF constructor, I think
[08:43:52] <companion_cube> `STUFF r` can also be spelled `STUFF ({elt; _} as r) -> ‚Ä¶`
[08:43:57] <companion_cube> no, it works with inline records :)
[08:44:08] <d_bot> <GNU Radio Shows> the compiler has an extension that lets you treat an inline record as a single value
[08:44:08] <companion_cube> you just can't return r, but you can use it in the branch.
[08:44:12] <d_bot> <GNU Radio Shows> and access properties
[08:44:21] <d_bot> <GNU Radio Shows> but you aren't allowed to let it escape yes
[08:45:38] <dh`> huh, I figured detaching the record like that would be specifically not allowed
[08:45:49] <companion_cube> it's locally allowed :)
[08:46:10] <companion_cube> (welcome to cryptic error messages about types "escaping" if you try to)
[08:47:33] <d_bot> <GNU Radio Shows> as an aside, why is this considered an extension if ocaml isn't standardized? isn't the language pretty much defined by what the main compiler supports
[08:48:47] <companion_cube> I had the same question recently, and octachron said that it's basically a historical quirk
[08:48:59] <companion_cube> as in, it's a part of the manual where "new stuff" tended to go
[08:49:10] <companion_cube> but it's going to slowly change, one hopes. It's part of the language.
[08:52:23] <dh`> not letting the type escape is reasonable, or at least, it's a reasonable design decision to not let it implicitly also be a standalone type
[08:52:52] <companion_cube> that's be quite complicated I think
[08:53:11] <companion_cube> if foo.STUFF becomes its own type, then it's probably a sub-type of foo
[08:53:11] <dh`> escape analyses aren't difficult
[08:53:16] <companion_cube> subtyping is tough and all that
[08:53:32] <dh`> oh, letting it escape? nah, the obvious thing is to just make it another type, with no explicit name
[08:53:59] <dh`> creates record disambiguation headaches though
[08:54:29] <dh`> one of the things I really don't like about type inference and records is how record field names kinda become global
[08:54:35] <dh`> (but I don't know a solution either)
[08:54:59] <companion_cube> it's become a lot cleaner
[08:55:05] <dh`> ocaml's become a lot smarter about it just in the past few years I've been using it
[08:55:06] <dh`> yeah
[08:55:21] <dh`> and it beats haskell where they _are_ global
[08:56:34] *** Joins: ralu (~ralu@static.211.245.203.116.clients.your-server.de)
[08:58:14] <d_bot> <GNU Radio Shows> I was going to say "why not have it be an anonymous record" and then I remembered OCaml doesn't have these
[08:59:03] <companion_cube> that'd break both the type inference, and the compilation scheme for records, I think :)
[09:00:31] <d_bot> <GNU Radio Shows> compilation scheme I can understand, but why would it break type inference? aren't polymorphic variants a similar problem
[09:01:44] <companion_cube> ah, well, then you have `object`
[09:01:52] <companion_cube> `object method x=1 end` and voil√†
[09:02:02] <companion_cube> it's just not at all the same as a record, underneath :)
[09:04:03] <d_bot> <GNU Radio Shows> that's true
[09:17:21] <dh`> making it anonymous doesn't break anything except user interaction with it, since you can always assign it an internal name
[09:17:54] <dh`> (and you could always give it the name foo.STUFF since that currently generates a parse error)
[09:18:17] <dh`> although I suppose then you have to worry about constructor and module names overlapping
[09:18:49] <companion_cube> I imagine that internally, foo.STUFF is indeed a record type :)
[09:18:52] <companion_cube> just one you can't name
[09:18:56] <dh`> (somewhat relatedly though it would be nice to be able to write foo.typename.field when you need it instead of writing an annotation where foo is bound
[09:19:00] <dh`> )
[09:19:01] <companion_cube> and bound to a lexical scope so it can't escape
[09:19:16] <companion_cube> foo.Module.field works!
[09:19:23] <companion_cube> if you put records in modules
[09:19:39] <dh`> doesn't help for common field names like "name"
[09:20:02] <dh`> unless you go overboard with modules and that seems likely to end badly
[09:20:37] <companion_cube> in some cases, i tend to put most types in their own module
[09:20:43] <companion_cube> name them Foo.t, and all that
[09:20:55] <companion_cube> then, foo.Foo.name works a-ok
[09:20:58] <dh`> doesn't work too well for interconnected AST types
[09:21:09] <companion_cube> yeah, agreed. that's one catch.
[09:21:16] <companion_cube> disambiguation or type annotation then :)
[09:25:40] <dh`> wait, is there a disambiguation syntax other than a type annotation?
[09:26:07] <dh`> (the reason I don't like adding type annotations much is that they have awkard precedence in declarations and you grow a lot of parens)
[09:27:25] <companion_cube> sorry, I meant adding a prefix to fields of each record
[09:27:35] <companion_cube> otherwise, it's type annotation indeed (which I personally like)
[09:28:04] <dh`> ah right
[09:30:34] <d_bot> <darrenldl> do people prefer namespacing via module or via prefix and suffixes?
[09:32:10] <companion_cube> I'd say modules are better, unless you have a lot of mutual recursion (like the AST case dh` mentions)
[09:32:18] <d_bot> <darrenldl> (im biased toward former since there are three groups of such functions, and lifting them up to the parent module seems to make it look very cluttered
[09:32:57] <d_bot> <darrenldl> companion_cube: aha cheers
[09:37:43] *** Joins: bobo_ (~bobo@37.164.224.196)
[09:37:47] *** Quits: spip (~bobo@37.164.224.196) (Ping timeout: 256 seconds)
[09:51:10] *** Joins: vijon (~vijon@8.45.41.39)
[09:51:42] *** Quits: vijon (~vijon@8.45.41.39) (Client Quit)
[09:54:55] *** Joins: gravicappa (~gravicapp@178.214.248.83)
[11:06:19] *** Quits: rgrinberg (~textual@2806:101e:7:2b:c529:c1df:ee97:1d4c) (Quit: My MacBook has gone to sleep. ZZZzzz‚Ä¶)
[11:16:53] *** Joins: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl)
[12:00:36] *** Joins: Haudegen (~quassel@178.115.237.87.static.drei.at)
[13:07:21] *** Joins: Tuplanolla (~Tuplanoll@91-159-68-166.elisa-laajakaista.fi)
[13:13:37] *** Joins: bgs (~bgs@cpe-212-85-160-171.cable.telemach.net)
[13:57:35] *** Joins: dalek-caan (~Thunderbi@109-252-124-86.nat.spd-mgts.ru)
[14:10:06] <gentauro> 06:25 < dh`> and it beats haskell where they _are_ global
[14:10:44] <gentauro> dh`: in Haskell, they are `syntactic-sugar` for `functios` taking the record and providing the `nth` value of the tuple
[14:11:45] * gentauro Example: `data Foo = Bar Int Char` => data Foo = Bar { foo :: Int, Bar :: Char }`
[14:12:04] <gentauro> that's why it's recommended to not created a mixture of sum and product types in Haskell
[14:13:06] * gentauro Example: `data FooBar = Foo Int | Bar { bar :: Char }` as the following will compile, but will break at runtime: `bar $ Foo 42`
[15:01:57] *** Quits: mbuf (~Shakthi@223.184.116.99) (Quit: Leaving)
[16:22:49] *** Joins: cedric (~cedric@2a01:cb11:821:7c00:5f71:4618:ad0a:42c5)
[16:52:25] *** Quits: gravicappa (~gravicapp@178.214.248.83) (Ping timeout: 256 seconds)
[16:55:47] *** Joins: olle (~olle@i5E866D9D.versanet.de)
[16:55:51] *** Joins: bartholin (~bartholin@109.53.5.10)
[17:49:57] *** Quits: bartholin (~bartholin@109.53.5.10) (Ping timeout: 240 seconds)
[18:03:54] *** Joins: bartholin (~bartholin@109.53.6.181)
[18:32:33] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Ping timeout: 276 seconds)
[18:38:05] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[18:40:49] *** Joins: gravicappa (~gravicapp@178.214.248.83)
[18:43:02] *** Joins: jlrnick (~josephler@2a01cb040a1594006c3c30233d5dcb6a.ipv6.abo.wanadoo.fr)
[18:52:44] *** Quits: epony (epony@user/epony) (Quit: QUIT)
[19:13:06] *** Joins: AeroNotix (~xeno@185.107.67.252)
[19:16:11] <AeroNotix> How can I follow the progress on multicore on Arm?
[19:16:35] <AeroNotix> e.g. with the progress, outstanding work, getting involved in testing (etc)
[19:18:02] *** Quits: jlrnick (~josephler@2a01cb040a1594006c3c30233d5dcb6a.ipv6.abo.wanadoo.fr) (Ping timeout: 240 seconds)
[19:22:50] *** Joins: mmohammadi9812 (~Mohammad@2.178.202.163)
[19:25:13] *** Joins: epony (epony@user/epony)
[19:31:03] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Ping timeout: 276 seconds)
[19:31:19] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[19:36:23] *** Joins: mro (~mro@port-92-195-241-21.dynamic.as20676.net)
[19:39:57] *** Joins: travv0 (sid293381@user/travv0)
[19:50:02] *** Quits: bartholin (~bartholin@109.53.6.181) (Ping timeout: 250 seconds)
[19:52:00] <sadiq> AeroNotix, good question. There isn't really a separate multicore anymore, so all development (issues and PRs) will happen against trunk.
[19:53:07] <sadiq> there's some work going on at the moment by a couple of developers on arm64. Once there's a build that passes the testsuite it'll go up on ocaml/ocaml as a PR, that's probably the best opportunity to grab it and do some testing.
[19:54:08] <sadiq> for timeline we're you're probably talking in the order of weeks rather than months though
[19:54:44] <sadiq> (though with any of this kind of stuff show-stopping and virtually impossible to debug problems are what causes things to slip)
[20:02:01] *** Joins: bartholin (~bartholin@109.53.2.247)
[20:05:06] <AeroNotix> sadiq: thanks!
[20:16:23] *** Joins: spip (~bobo@37.166.29.181)
[20:17:11] *** Quits: bobo_ (~bobo@37.164.224.196) (Ping timeout: 256 seconds)
[20:25:31] *** Quits: mro (~mro@port-92-195-241-21.dynamic.as20676.net) (Remote host closed the connection)
[20:27:38] *** Joins: mro (~mro@port-92-195-241-21.dynamic.as20676.net)
[20:34:57] *** Joins: motherfsck (~motherfsc@user/motherfsck)
[20:35:33] *** Quits: mro (~mro@port-92-195-241-21.dynamic.as20676.net) (Remote host closed the connection)
[20:40:13] *** Joins: mro (~mro@port-92-195-241-21.dynamic.as20676.net)
[20:43:43] *** Joins: zebrag (~chris@user/zebrag)
[20:46:57] *** Quits: mmohammadi9812 (~Mohammad@2.178.202.163) (Ping timeout: 240 seconds)
[21:23:23] *** Quits: mro (~mro@port-92-195-241-21.dynamic.as20676.net) (Remote host closed the connection)
[21:44:35] *** Joins: rgrinberg (~textual@2806:101e:7:2b:c529:c1df:ee97:1d4c)
[21:46:49] *** Joins: shawnw (~shawn_w@152.44.212.188)
[21:48:03] *** Quits: dalek-caan (~Thunderbi@109-252-124-86.nat.spd-mgts.ru) (Quit: dalek-caan)
[21:50:04] *** Quits: bartholin (~bartholin@109.53.2.247) (Ping timeout: 250 seconds)
[22:01:44] *** Joins: shawn (~shawn_w@152.44.212.188)
[22:03:45] *** Joins: bartholin (~bartholin@109.53.7.71)
[22:04:39] *** Quits: shawnw (~shawn_w@152.44.212.188) (Ping timeout: 256 seconds)
[22:13:50] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[22:34:07] *** Quits: kaph (~kaph@net-2-47-208-144.cust.vodafonedsl.it) (Ping timeout: 256 seconds)
[22:48:06] *** Joins: mmohammadi9812 (~Mohammad@188.210.110.121)
[22:59:03] *** Quits: mmohammadi9812 (~Mohammad@188.210.110.121) (Ping timeout: 256 seconds)
[22:59:03] *** Quits: motherfsck (~motherfsc@user/motherfsck) (Ping timeout: 256 seconds)
[22:59:44] *** Joins: motherfsck (~motherfsc@user/motherfsck)
[23:01:35] *** Joins: mro (~mro@port-92-195-241-21.dynamic.as20676.net)
[23:22:41] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Remote host closed the connection)
[23:25:34] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[23:35:19] *** Quits: motherfsck (~motherfsc@user/motherfsck) (Ping timeout: 256 seconds)
[23:47:51] *** Joins: motherfsck (~motherfsc@user/motherfsck)
[23:50:21] *** Quits: bartholin (~bartholin@109.53.7.71) (Ping timeout: 268 seconds)
[23:56:30] *** Quits: rgrinberg (~textual@2806:101e:7:2b:c529:c1df:ee97:1d4c) (Quit: My MacBook has gone to sleep. ZZZzzz‚Ä¶)
