[00:00:27] <maerwald> it doesn't fail, does it?
[00:01:00] <maerwald>     const installableHls = latestMetadataHls !== null ? latestMetadataHls : latestHlsVersion;
[00:01:10] <fendor[m]> wrapper would fail without any apparent error until https://github.com/haskell/haskell-language-server/pull/2591 lands
[00:01:21] <maerwald> it returns latestHlsVersion then yes
[00:01:27] <fendor[m]> yeah, ok
[00:01:43] <maerwald> don't know what to do there
[00:01:48] <maerwald> show popup?
[00:01:51] <maerwald> cry?
[00:02:23] <fendor[m]> yeah, popup and abort or something like that
[00:02:33] <fendor[m]> but crying is also fine
[00:03:20] <maerwald>             window.showErrorMessage(msg);
[00:03:22] <maerwald>             throw new Error(msg);
[00:03:24] <maerwald> sth like that
[00:04:13] <fendor[m]> yeah exactly
[00:07:02] <fendor[m]> Awesome, I have some code nitpicks, but other than that, everything should be fine, afaict
[00:07:43] <fendor[m]> I think we should merge, I do some project maintenance (e.g. npm audit, updating dependencies, etc...) and then we push it to users
[00:07:57] <fendor[m]> Maybe Ill do some more dogfooding tomorrow before the release
[00:08:47] <fendor[m]> maerwald, you are a hero ‚ù§Ô∏è thank you for basically rewriting the VsCode plugin üòÄ
[00:15:09] *** Quits: coot (~coot@213.134.190.95) (Quit: coot)
[00:15:50] *** Joins: coot (~coot@213.134.190.95)
[00:18:06] <maerwald> does it work?
[00:18:08] <maerwald> xD
[00:20:55] <fendor[m]> so far, stuff works!
[00:41:58] <fendor[m]> why are sometimes titles for the window progress for ghcup ommitted?  Does it happen too quickly and only annoys users?
[00:43:01] <maerwald> where
[00:44:24] <fendor[m]> for example `ghcup list -t hls -c available -r`
[00:44:46] <fendor[m]> 307 in hlsbinaries
[00:45:57] <maerwald> callGHCup has a title argument
[00:46:25] <fendor[m]> yeah, which is optional and not specified at that call-site, I am just wondering about the reason
[00:46:26] <maerwald> an optional
[00:46:32] <maerwald> I forgot
[00:46:44] <maerwald> not everything is interesting
[00:46:50] <maerwald> maybe hide the popup altogether?
[00:47:33] <fendor[m]> no, I believe it is great to have the feedback stuff is happening
[00:48:04] <fendor[m]> I wondered whether there is an explicit reason, we can play around with it later
[00:50:14] <maerwald> I find most of the popups annoying
[00:50:22] <maerwald> that's why I tried to reduce them, unless they are important
[00:51:31] <fendor[m]> popups that require no interaction are fine imo, especially when it involves long running processes. Reducing popups with interaction makes sense to me
[00:55:24] <fendor[m]> ok, error message on unsupported GHC is pushed
[00:55:24] <maerwald> oh god, my filepath tests are passing
[00:56:36] <fendor[m]> shouldn't they? 
[01:03:25] <maerwald> it's a huge mess of CPP 
[01:03:34] <maerwald> https://github.com/haskell/filepath/pull/103
[01:03:54] <maerwald> it generates 4 modules with different types
[01:04:57] <maerwald> and Neil wrote a witty test generator that parses comments and turnm them into tests 
[01:05:15] <maerwald> adjusting that for multiple types was a bit wild
[01:05:53] <maerwald> and all tests fail... looks great
[01:07:13] <fendor[m]> yeah that sounds wild 0.o 
[01:07:30] <fendor[m]> so many newlines
[01:08:00] <maerwald> cpphs does that
[01:08:02] <maerwald> I don't know why
[01:10:54] <maerwald> and github stopped building one of my PRs
[01:17:55] *** Quits: arrowd (~arr@78.107.6.128) ()
[01:22:55] <maerwald> fendor[m]: I can't approve on vscode-haskell
[01:23:02] <maerwald> probably access rights
[01:27:53] <fendor[m]> invited you
[01:27:59] <fendor[m]> but looks like I messed up CI
[01:29:23] <maerwald> I don't see anything
[01:30:41] <fendor[m]> I restarted CI, there was a timeout
[01:30:49] <maerwald> I mean wrt invitation
[01:31:24] <maerwald> ah
[01:31:28] <maerwald> I wrote the PR
[01:31:31] <maerwald> see, I forgot xD
[01:31:31] *** Quits: hololeap (~hololeap@user/hololeap) (Excess Flood)
[01:31:48] <maerwald> can't approve your own 
[01:32:11] <fendor[m]> that makes sense indeed
[01:32:20] <maerwald> does it?
[01:32:44] <fendor[m]> ok, I removed you from the repo and added you again, just to be sure
[01:32:53] *** Joins: hololeap (~hololeap@user/hololeap)
[01:33:16] <fendor[m]> superficially, yes, since you shouldn't be able to circumvent the at least one reviewer requirement
[01:33:37] <fendor[m]> practically speaking, in this particular case where two people worked on the PR... welp
[01:33:45] <maerwald> that's a different concern though... they can just fix that, but now I cannot signal to anyone "yes, I think my own PR is good to go"
[01:34:27] <maerwald> wouldn't be the first time someone merges my PR while it's not done :p
[01:34:38] <fendor[m]> I think the Draft feature is intended to express "not ready yet"
[01:35:01] <maerwald> Draft is when you haven't implemented all targets and it isn't ready for review yet
[01:35:14] <fendor[m]> haha, you just need to delete an important file, so they notice right away it can't be merged atm 
[01:37:44] <fendor[m]> then you can do: Draft -> Review, after review revert to Draft -> Review until you are finished. But that feels like a rather bolted on process, so I agree, the github process is not particularly thought through
[01:39:20] <maerwald> yeah, not gonna do scrum master here
[01:39:23] <fendor[m]> maerwald, maybe you wrote it somewhere, but why is this an empty array? https://github.com/haskell/ghcup-metadata/blob/master/hls-metadata-0.0.1.json#L357
[01:39:56] <maerwald> oh boy, good question
[01:40:20] <maerwald> that's a bug in my generator code I guess
[01:40:27] <maerwald> maybe because of .exe
[01:41:16] <fendor[m]> ouch. Welp, happens
[01:41:24] <maerwald> https://github.com/haskell/ghcup-metadata/blob/4c23f6a49ee5f33022c598b746c08878f4855822/ghcup-gen/Generate.hs#L86
[01:42:14] <fendor[m]> ah, no match on `.exe`
[02:01:17] <maerwald> fendor[m]: generating the list takes a while
[02:01:24] <maerwald> it has to look at all archives
[02:01:45] <maerwald> and tar.xz is not a very efficient format
[02:01:51] <fendor[m]> yeah, I noticed
[02:02:00] <fendor[m]> are you doing it or should I?
[02:02:22] <maerwald> i tried with mapConcurrently first, but that broke my terminal
[02:02:28] <maerwald> and then my ram
[02:03:45] <maerwald> also... the archive files list is generated via unsafePerformIO I think
[02:03:56] <fendor[m]> for me it mainly takes up a lot of network speed üòÄ 
[02:03:57] <maerwald> and the errors leak through the handler
[02:05:44] <maerwald> yeah
[02:05:46] <maerwald> https://github.com/vmchale/libarchive/blob/306e167eadd09482e8106d55a693f8bdc51622c3/src/Codec/Archive/Internal/Unpack/Lazy.hs#L51
[02:11:25] <fendor[m]> huh... Well... why though?
[02:11:53] <fendor[m]> why would you do that? performance?
[02:16:16] <maerwald> it's probably starting to produce the list while it's not clear whether there's an error yet... so the function is just wrong
[02:16:38] <maerwald> usually people do evaluate and force with unsafeDupale afair
[02:30:59] <maerwald> fendor[m]: maybe after I fix it we should test on windows
[02:41:45] *** Quits: fendor (~fendor@77.119.210.182.wireless.dyn.drei.com) (Remote host closed the connection)
[02:49:59] *** Quits: coot (~coot@213.134.190.95) (Quit: coot)
[03:10:30] <maerwald> works here
[07:13:49] *** Quits: terrorjack (~terrorjac@2a01:4f8:1c1e:509a::1) (Quit: The Lounge - https://thelounge.chat)
[07:15:15] *** Joins: terrorjack (~terrorjac@2a01:4f8:1c1e:509a::1)
[07:46:02] *** Joins: July541 (~July@218.70.255.195)
[09:27:40] *** Quits: shapr (~user@pool-173-73-44-186.washdc.fios.verizon.net) (Remote host closed the connection)
[09:27:54] *** Joins: shapr (~user@pool-173-73-44-186.washdc.fios.verizon.net)
[12:07:06] *** Joins: coot (~coot@213.134.190.95)
[12:32:46] *** Joins: fendor (~fendor@77.119.210.182.wireless.dyn.drei.com)
[12:46:53] <fendor[m]> yeah, CI is green again
[13:37:05] *** Joins: arrowd (~arr@78.107.6.128)
[13:44:54] <fendor[m]> merged
[13:57:10] *** Quits: coot (~coot@213.134.190.95) (Quit: coot)
[14:09:35] *** Joins: coot (~coot@213.134.190.95)
[14:27:42] *** Quits: July541 (~July@218.70.255.195) (Ping timeout: 272 seconds)
[14:28:15] <maerwald> fendor[m]: how do we release?
[14:28:34] *** Quits: libertyprime (~libertypr@118-92-82-225.dsl.dyn.ihug.co.nz) (Quit: leaving)
[14:32:33] <maerwald> I also haven't tested if we get a useful error popup if the correct HLS is available, but the corresponding GHC isn't
[14:41:59] <maerwald> https://imgur.com/nhFdDx7.png
[14:42:01] <maerwald> not very nice
[14:44:23] <maerwald> that is with no unqualified `ghc` in PATH
[14:47:58] *** Joins: fendor_ (~fendor@178.115.62.26.wireless.dyn.drei.com)
[14:48:13] <maerwald> ok, that's odd... `haskell-language-server-wrapper --project-ghc-version` returns whatever `ghc` is in PATH if the project set `with-compiler: 8.10.7`, but that one is not installed
[14:48:38] <maerwald> I'd argue that's a hie-bios bug
[14:50:16] *** Quits: fendor (~fendor@77.119.210.182.wireless.dyn.drei.com) (Ping timeout: 250 seconds)
[14:58:21] <maerwald> https://github.com/haskell/vscode-haskell/issues/541
[15:05:13] <fendor[m]> maerwald: jneira said just to tag the commit and push that tag. but let's fix the issues first üòÄ 
[15:06:02] <maerwald> https://github.com/haskell/hie-bios/issues/340
[15:08:56] <maerwald> hm, but I'm not sure I'm running the latest wrapper
[15:13:05] <fendor[m]> probably not
[15:13:12] <fendor[m]> unless you built from source
[15:13:54] <maerwald> I did, but I also played around with bindists 
[15:19:16] <maerwald> ok, the latest hie-bios has a different error
[15:27:41] *** Quits: coot (~coot@213.134.190.95) (Remote host closed the connection)
[15:31:03] *** Joins: coot (~coot@2a02:a310:e241:1b00:ec1a:e9df:79ac:66ba)
[15:47:04] <fendor[m]> nice
[15:47:06] <fendor[m]> a good one?
[15:50:53] <fendor[m]> maerwald, is your example just plain bytestring with `with-compiler`?
[15:51:05] <maerwald[m]> Yes
[15:51:28] <fendor[m]> and it should have failed but didn't?
[15:53:51] <maerwald[m]> Now it fails, but the extension is trying to restart it and then gives up
[15:53:53] <fendor[m]> looks good for me: https://paste.tomsmeding.com/1m54ZwqX#
[15:53:58] <fendor[m]>  * looks good for me: https://paste.tomsmeding.com/1m54ZwqX
[15:54:00] <maerwald[m]> I posted the error in the ticket
[15:54:23] <maerwald[m]> It's not really actionable by the user 
[15:54:25] <fendor[m]> oh yeah, well that looks fine?
[15:54:28] <fendor[m]> no it isn't
[15:54:44] <fendor[m]> that's why we started on https://github.com/haskell/haskell-language-server/pull/2591
[15:55:20] <fendor[m]> oh, I guess the vscode extension already throws the error
[15:55:26] <maerwald[m]> That's an extension problem imo. When it restarts, it should print the last error
[15:55:39] <maerwald[m]> It does only in the console log
[15:55:45] <fendor[m]> thanks to https://github.com/haskell/vscode-haskell/blob/master/src/hlsBinaries.ts#L316
[15:57:10] <maerwald[m]> That's not the error i get
[15:57:38] <maerwald[m]> See the ticket
[15:57:40] <maerwald[m]> https://github.com/haskell/vscode-haskell/issues/541#issuecomment-1066084838
[15:58:40] <fendor[m]> yeah that's exactly the issue we try to work-around with #2591
[15:58:51] <maerwald[m]> That's not necessary 
[15:58:58] <maerwald[m]> We have access to stderr
[15:59:08] <maerwald[m]> And can just print it to popup
[16:02:47] <fendor[m]> right but that's only a solution for vscode, while #2591 adresses it for all lsp-clients?
[16:03:56] <maerwald[m]> Yes
[16:05:06] <fendor[m]> so we should push for #2591 as a general solution, imo
[16:05:41] <fendor[m]> however, that will make https://github.com/haskell/vscode-haskell/pull/533/commits/82ae4c1656962ad4913814227aa294e2fb0e30f8 useless
[16:05:45] <maerwald[m]> Not before the next release 
[16:07:17] <fendor[m]> true, it is only a solution at the earliest after the next release
[16:11:45] <fendor[m]> ok, behaviour currently confuses me
[16:18:46] *** Quits: coot (~coot@2a02:a310:e241:1b00:ec1a:e9df:79ac:66ba) (Quit: coot)
[16:19:02] *** Joins: coot (~coot@2a02:a310:e241:1b00:ec1a:e9df:79ac:66ba)
[16:19:43] <fendor[m]> does ghcup re-use my haskell-language-server from source installation? Since I noticed ghcup copies hls binaries to vscode's storage location
[16:19:49] <fendor[m]> even when system ghcup is used
[16:21:47] *** Quits: coot (~coot@2a02:a310:e241:1b00:ec1a:e9df:79ac:66ba) (Client Quit)
[16:22:20] <fendor[m]> no because it is completely isolated, makes sense
[16:25:33] <maerwald[m]> https://github.com/haskell/vscode-haskell/issues/542
[16:26:00] <maerwald[m]> It doesn't copy, it symlinks.
[16:26:16] <maerwald[m]> But yeah, it should consider from source installations 
[16:27:33] <fendor[m]> if you use the system ghcup, yeah, I believe so
[16:28:16] <maerwald[m]> Usability is hard
[16:28:53] <fendor[m]> Indeed
[16:32:08] <maerwald[m]> Does vscode support a setting, which is an enum, where one constructor is an object?
[16:35:15] <maerwald[m]> So manageHLS could be an enum: 1. internal, 2. system, 3. serverExecutablePATH (string input), 4. PATH
[16:49:04] <fendor[m]> I don't think so
[16:53:26] <maerwald[m]> fendor: could be done with two popups then https://stackoverflow.com/questions/39481386/how-to-create-a-custom-dialog-in-vscode
[16:55:16] <fendor[m]> what are the semantics of PATH, compared to system? just look for everything on the PATH and don't install anything by ourselves while system uses ghcup on the PATH, but doesn't honour stuff installed with `ghcup compile ...`?
[16:56:10] <maerwald[m]> PATH looks stuff in PATH, ignorant of what installed it. It's just regex match
[16:56:38] <maerwald[m]> https://github.com/haskell/vscode-haskell/blob/f410497c46e563febc07427f7834399134116ea0/src/hlsBinaries.ts#L165
[16:57:42] <maerwald[m]> I think explicit configuration is best. No fallbacks
[16:58:05] <maerwald[m]> Eg the user set serverExecutablePATH but we start using some other random thing
[16:59:04] <maerwald[m]> If the method they picked fails we can show another popup asking iu they wanna try something else
[17:00:19] <fendor[m]> Looks like we will need to write one of these NPCs dialog decision trees üòÄ
[17:00:39] <maerwald[m]> Yeah, like morrowind
[17:05:32] <fendor[m]> My concern is that all the required interaction with the user might be too much
[17:05:50] <maerwald[m]> It's not required 
[17:06:13] <maerwald[m]> You can just press cancel/whatever
[17:08:12] <fendor[m]> well, new users aren't really going to do that, unless one of the options is literally "Default" or something like that
[17:08:26] <fendor[m]> cancel is for most users not a viable options, as they can't tell what's going to be influenced by what
[17:08:35] <maerwald[m]> Yeah, we can mark an option default 
[17:09:14] <maerwald[m]> cancel would be equivalent to using system PATH
[17:09:25] <maerwald[m]> I'd say thats expected 
[17:09:47] <fendor[m]> I promise you, some of the users don't understand what that entails
[17:09:55] <fendor[m]> s/of the//
[17:10:16] <maerwald[m]> Not sure the current situation is any better
[17:10:32] <fendor[m]> I am not claiming that
[17:10:38] <fendor[m]> I just want to get it right / noticeably better
[17:13:23] <fendor[m]> a table / interaction flow chart can be helpful to document the possible interactions, deciding on goals and then minimizing the required steps to end up in the required situation
[17:13:35] <fendor[m]> s/required/desired/
[17:14:25] <maerwald[m]> It's literally one decision popup (2 if you pick serverExecutablePATH)
[17:16:41] <fendor[m]> yeah, I understand, but you also proposed a more sophisticated system with fallbacks, etc..
[17:17:06] <fendor[m]> additionally, it would be nice to list the workflows that are currently supported
[17:17:18] <fendor[m]> making sure we don't forget anything
[17:20:04] <maerwald[m]> fendor[m]: Not fallback. The popup would just come up again if HLS cannot be found, unless you press "don't bother me again" or you exceeded a retry count
[17:20:56] <maerwald[m]> Naturally, the only methods that would be allowed to fail are PATH and serverExecutablePATH
[17:21:13] <maerwald[m]> Isn't really complicated imo
[17:25:17] <fendor[m]> It isn't trivial, either. So, expert users would probably prefer the PATH option? How about a pop up with three options [System Ghcup (only if found), Internal Ghcup (Easy - mode), PATH (I am an expert)]? 
[17:25:17] <fendor[m]> I don't think we have to ask anyone right away about serverExecutablePath
[17:31:28] <maerwald[m]> That would also remove the need for a specialized input popup i guess
[17:32:30] <fendor[m]> Yes... that might be one solution. Whether it is strictly better than the other... slightly complicated. Maybe ask for community input?
[20:43:02] *** Joins: coot (~coot@213.134.190.95)
[20:49:53] *** Joins: rmzs0711 (~rmzs0711@158.181.217.133)
[21:25:27] *** Quits: rmzs0711 (~rmzs0711@158.181.217.133) (Quit: Client closed)
[22:27:38] <maerwald> fendor[m]: do you know what 'super' does here: https://github.com/haskell/vscode-haskell/blob/70f6883af669ef176fe3cf8ec4963921de686f79/src/hlsBinaries.ts#L63
[22:28:41] <fendor[m]> probably invokes the constructor of Error, in that case it sets the msg that's going to be displayed when the exception is thrown
[22:31:34] <maerwald> and if you don't catch a promise, it throws implicitly?
[23:13:47] *** Quits: arrowd (~arr@78.107.6.128) ()
[23:19:27] <fendor[m]> Yeah, I believe so, but I am not a javascript expert
[23:43:44] <maerwald> Ok, I fixed the error handling
[23:44:08] <maerwald> fendor[m]: so the only caveat left is that if the user picks system ghcup and it isn't installed, they get an error with a link to ghcup homepage
[23:44:24] <maerwald> installing system ghcup from scratch correctly without the bootstrap script is non-trivial
[23:45:55] <maerwald> for an internal ghcup they don't need the full functionality, so it doesn't matter
[23:48:45] <fendor[m]> that sounds reasonable to me, so now we pick up stuff installed by ghcup, or everything from PATH?
[23:49:02] <maerwald> sec, I'll push to the PR in a minute
[23:51:01] <maerwald> https://github.com/haskell/vscode-haskell/pull/543
[23:52:53] <maerwald> https://imgur.com/U8OsXFJ.png
[23:58:34] <maerwald> fendor[m]: remaining question: what if the users sets manageHLS to `system-ghcup`, but also sets `serverExecutablePATH`?
[23:58:49] <maerwald> imo, serverExecutablePath should overwrite all others
