[00:02:12] *** Quits: theothornhill (~user@217.84-49-191.nextgentel.com) (Remote host closed the connection)
[00:12:52] *** Quits: Guest7476 (~Guest74@modemcable110.164-177-173.mc.videotron.ca) (Quit: Connection closed)
[00:16:01] *** Joins: FragmentedCurve (~FC@pool-100-2-232-17.nycmny.fios.verizon.net)
[00:17:34] *** Quits: bcasiello__ (~bcasiello@066-189-087-112.biz.spectrum.com) (Read error: Connection reset by peer)
[00:24:02] *** Joins: theothornhill (~user@217.84-49-191.nextgentel.com)
[00:32:48] *** Quits: NotThatRPG (~NotThatRP@mail.sift.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[00:34:17] *** Joins: NotThatRPG (~NotThatRP@mail.sift.net)
[00:34:54] *** Quits: tyson2 (~user@cpe00fc8d34ff03-cm00fc8d34ff00.sdns.net.rogers.com) (Remote host closed the connection)
[00:36:28] *** Quits: theothornhill (~user@217.84-49-191.nextgentel.com) (Remote host closed the connection)
[00:42:55] *** Quits: cage (~cage@dynamic-adsl-94-34-55-34.clienti.tiscali.it) (Quit: rcirc on GNU Emacs 27.1)
[00:45:39] *** Quits: sm2n (~sm2n@user/sm2n) (Read error: Connection reset by peer)
[00:46:06] *** Joins: sm2n (~sm2n@user/sm2n)
[00:51:34] *** Quits: Devon (~devon@pool-108-28-172-103.washdc.fios.verizon.net) (Ping timeout: 260 seconds)
[00:54:42] *** Joins: theothornhill (~user@217.84-49-191.nextgentel.com)
[00:58:55] *** jackass is now known as stacksmith
[01:03:59] *** Quits: ym (~ym@95.106.10.166) (Ping timeout: 264 seconds)
[01:10:34] *** Quits: sm2n (~sm2n@user/sm2n) (Read error: Connection reset by peer)
[01:11:36] *** Joins: sm2n (~sm2n@user/sm2n)
[01:18:47] *** Quits: NotThatRPG (~NotThatRP@mail.sift.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[01:22:22] *** Quits: shka (~herr@83.175.151.96.piasta.pl) (Ping timeout: 260 seconds)
[01:24:12] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[01:28:03] *** Quits: theothornhill (~user@217.84-49-191.nextgentel.com) (Remote host closed the connection)
[01:28:44] *** Quits: scymtym (~user@ip-94-114-248-79.unity-media.net) (Remote host closed the connection)
[01:29:13] *** Joins: scymtym (~user@ip-94-114-248-79.unity-media.net)
[01:31:04] *** Joins: shka (~herr@83.175.151.96.piasta.pl)
[01:43:40] *** Quits: shka (~herr@83.175.151.96.piasta.pl) (Ping timeout: 268 seconds)
[01:49:35] *** Quits: igemnace (~ian@user/igemnace) (Ping timeout: 264 seconds)
[01:53:01] *** Joins: Devon (~devon@pool-108-28-172-103.washdc.fios.verizon.net)
[02:09:34] *** Joins: Oladon (~olad@98.43.81.226)
[02:18:45] *** Quits: pve (~pve@37-136-99-25.rev.dnainternet.fi) (Quit: leaving)
[02:19:47] *** Joins: igemnace (~ian@user/igemnace)
[02:23:54] *** Joins: NotThatRPG (~NotThatRP@162-219-230-90.fttp.usinternet.com)
[02:30:46] *** Joins: Guest74 (~Guest74@modemcable110.164-177-173.mc.videotron.ca)
[02:33:23] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Quit: ERC (IRC client for Emacs 27.1))
[02:54:08] *** Quits: NotThatRPG (~NotThatRP@162-219-230-90.fttp.usinternet.com) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[02:59:17] *** Quits: Inline (~Inline@2a02:908:1252:7a80:4744:6074:ea58:ae8a) (Remote host closed the connection)
[03:09:16] *** Joins: kuao (uid504326@helmsley.irccloud.com)
[03:11:43] *** Quits: specbot (~specbot@common-lisp.net) (Remote host closed the connection)
[03:12:06] *** Joins: specbot (~specbot@common-lisp.net)
[03:12:45] *** Quits: minion (~minion@common-lisp.net) (Killed (NickServ (GHOST command used by minion1)))
[03:12:52] *** Joins: minion (~minion@common-lisp.net)
[03:15:15] *** Joins: leo_song (~leo_song@user/leo-song/x-7207016)
[03:17:01] *** Quits: Jing (~hedgehog@2604:a840:3::1094) (Remote host closed the connection)
[03:17:40] *** Joins: Jing (~hedgehog@2604:a840:3::1094)
[03:18:01] *** Quits: gaqwas (~john@dynamic-095-117-032-097.95.117.pool.telefonica.de) (Ping timeout: 268 seconds)
[03:20:54] *** Joins: ultera (~ultera@ec2-18-118-193-22.us-east-2.compute.amazonaws.com)
[03:30:43] *** Joins: NotThatRPG (~NotThatRP@162-219-230-90.fttp.usinternet.com)
[03:45:51] *** Joins: dre (~dre@2001:8003:c932:c301:a745:514b:948f:a168)
[03:46:06] *** Quits: taiju (~taiju@M014013236064.v4.enabler.ne.jp) (Ping timeout: 260 seconds)
[03:47:45] *** Quits: NotThatRPG (~NotThatRP@162-219-230-90.fttp.usinternet.com) (Quit: Textual IRC Client: www.textualapp.com)
[03:56:35] *** Quits: Catie (~user@user/catie) (Quit: heading home)
[04:00:02] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 240 seconds)
[04:01:35] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 264 seconds)
[04:02:18] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[04:29:01] *** Joins: Catie (~user@user/catie)
[04:33:52] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[04:45:57] *** Quits: Catie (~user@user/catie) (Remote host closed the connection)
[04:46:24] *** Joins: Catie (~user@user/catie)
[05:01:16] *** Joins: Inline (~Inline@2a02:908:1252:7a80:4744:6074:ea58:ae8a)
[05:09:57] *** Quits: random-nick (~random-ni@87.116.180.220) (Ping timeout: 256 seconds)
[05:24:16] *** Joins: pranavats (3fba1d1b34@jabberfr.org)
[05:38:28] <Guest74> anybody thinking of joining this jam? https://itch.io/jam/longgame-tech-innovation-jam-8-portals
[05:43:58] *** Joins: alvaro121_ (~aa@201.230.126.66)
[05:46:06] <alvaro121_> Hi, what's the difference between #:symbol and :symbol? I have been seeing them used in DEFPACKAGEs.
[05:46:53] <hayley> :symbol denotes the symbol named SYMBOL in the KEYWORD package (i.e. a keyword), whereas #:symbol denotes the symbol named SYMBOL in no package.
[05:50:20] <alvaro121_> Why is each one used in DEFPACKAGEs? I have seem both of them being used in the same places.
[05:50:23] *** Quits: mrcom_ (~mrcom@99-73-215-70.lightspeed.irvnca.sbcglobal.net) (Quit: Leaving)
[05:50:35] *** Joins: mrcom (~mrcom@2600:1700:c630:a570:65ec:6999:ef2f:76f2)
[05:50:48] <Catie> alvaro121_: Personal preference
[05:51:56] <alvaro121_> So it doesn't matter?
[05:52:40] <Catie> Not from a practical perspective. Using interned keyword symbols can cause duplicate symbols to exist in the Lisp image, but that doesn't really cause any problems in most cases
[05:54:24] <alvaro121_> Alright, it seems that #: is used more, I will use that too.
[06:05:59] *** Joins: Oladon (~olad@98.43.81.226)
[06:18:11] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[06:20:43] <jcowan> Using symbols interned in any random package will still work (although it's misleading to do so), as will strings.
[06:29:12] *** Quits: Bike (~Glossina@71.69.170.70) (Quit: Lost terminal)
[06:31:13] *** Joins: hefner (~hefner@user/hefner)
[06:31:59] *** Joins: s-liao (~s-liao@101.86.101.64)
[06:35:18] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[06:38:55] *** Quits: Devon (~devon@pool-108-28-172-103.washdc.fios.verizon.net) (Ping timeout: 256 seconds)
[06:59:48] *** Quits: waleee (~waleee@h-82-196-111-63.NA.cust.bahnhof.se) (Quit: WeeChat 3.3)
[07:23:11] *** Quits: Inline (~Inline@2a02:908:1252:7a80:4744:6074:ea58:ae8a) (Ping timeout: 264 seconds)
[07:31:07] <beach> Good morning everyone!
[07:42:50] *** Quits: Catie (~user@user/catie) (Quit: good)
[07:48:45] *** Quits: igemnace (~ian@user/igemnace) (Remote host closed the connection)
[07:53:15] <phantomics> Morning beach
[08:01:04] *** Joins: ym (~ym@95.106.10.166)
[08:11:25] *** Joins: akoana (~ah@user/akoana)
[08:15:46] *** Quits: mzan (~quassel@mail.asterisell.com) (Ping timeout: 260 seconds)
[08:26:11] *** Quits: Guest74 (~Guest74@modemcable110.164-177-173.mc.videotron.ca) (Ping timeout: 264 seconds)
[08:37:12] *** Joins: ori (~atdt@user/ori)
[08:46:07] *** Joins: mzan (~quassel@mail.asterisell.com)
[08:58:25] *** Quits: ym (~ym@95.106.10.166) (Ping timeout: 268 seconds)
[09:39:46] <hefner> moin moin
[09:40:11] <beach> Hello hefner.
[09:40:32] <beach> Long time no see.  If it's the same hefner I know, of course.
[09:40:38] <hefner> it is.
[09:40:45] <beach> Welcome back!!!
[09:41:28] <hefner> it's been a long time todo item to get back on IRC and it's good to see the old guard keeping the torch lit.
[09:41:59] <beach> Some of us, anyway. :)
[09:42:28] <beach> There is now a #clim IRC channel, and maintenance is regular and good.
[09:42:44] <beach> ... maintenance of McCLIM I mean.
[09:43:07] <hefner> Neat. I have a lot to catch up on.
[09:43:44] <beach> Indeed.
[09:44:25] <hefner> it's a lovely thing that there's a new wave of people still working on McCLIM.
[09:44:50] <hefner> I follow the progress loosely via twitter.
[09:44:56] <beach> Yes, and there are some great new applications.  scymtym rewrote Clouseau and it's much better now.
[09:45:09] <beach> Ah, OK.
[09:46:11] <beach> Progress on Second Climacs is very slow, though, because I am busy with other projects.
[09:49:03] <hefner> what is the distinguishing characteristic of Second Climacs? Original Climacs had some fascinating technology, like ESA and the incremental parser, but I was always afraid that the tight integration into mcclim would stall progress.
[09:50:11] <beach> The main thing is that Eclector (another scymtym project, a Common Lisp READer) is used to parse the contents of a Common Lisp code buffer.  Then the plan is to use even more analysis phases to give the programmer better feedback.
[09:50:41] <beach> It can be argued that READ is the only valid way to parse Common Lisp code.
[09:51:24] <beach> (First) Climacs used a technique similar to LALR parsing, but that's not good enough, even though it is better than regular expressions, of course.
[09:54:29] <beach> The main thing that is preventing progress on Second Climacs is that I don't know how to handle indentation.  I mean, I know the basic idea of course, but there are difficulties with the exact data structures to use.
[09:56:10] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 260 seconds)
[09:59:51] <hefner> my take on parsing code in an editor is very naive and basic, but particularly interesting the mid-edit cases where the block structure (or matching of parens..) is in flux and temporarily would send the parse of the whole rest of the buffer off into oblivion, where I can imagine some simple pushdown automaton style parsers where the PDA stack is the entire state and you can differentiate it concisely
[09:59:57] <hefner> and reconstitute it for each character in the buffer such that you can scan forward from the current point to where the parse diverges from the last valid parse of the buffer
[10:00:00] <hefner> etc. etc., blah blah blah
[10:00:11] <hefner> pretty sure everything having to do with parsing code in editors/IDEs is a solved problem
[10:00:55] <hefner> (of which I am ignorant of the solutions)
[10:01:05] <hefner> I'm curious what you mean about indentation, though.
[10:03:29] <hefner> (I did say at least one thing back there that makes no sense)
[10:08:34] <beach> Heh.
[10:09:48] <beach> We keep a cache of mappings from buffer positions to return value of READ.  It is entirely possible to keep things around so that when the closing parenthesis or double quote is supplied, the cached values could be reused.
[10:10:20] <beach> For a particular expression, we need to compute what the indentation ought to be and indicate that it is wrong, and also provide commands to fix it.
[10:10:55] <beach> But we need to take into account comments that are associated with code, and incorrect syntax.
[10:24:05] <hefner> I think that's what I'm getting at, lazily reparse, but have a principled way of knowing you can reuse a previous parse.
[10:24:38] <hefner> I always hated parsing, it's probably what drew me to Lisp in the first place.
[10:25:17] <hefner> talk about complex solutions to invented problems.
[10:27:48] <beach> Sure.
[10:28:50] <beach> The technique we use is that we have a pair of buffer positions that indicate that if a call to READ were to start at the first position, it would end at the second position, and it would contain the return value of the call.
[10:29:07] <beach> Then if no changes have been made to that interval, the cached value is still valid.
[10:29:50] <beach> And we use Eclector, so we generalize stuff that can be read to comments and other skipped material.
[10:31:50] <hefner> makes sense.
[10:31:52] <beach> And our cache is particularly efficient when editing is localized, in that it keeps the prefix and the suffix intact when the result of the parse does not change.
[10:32:19] <beach> That doesn't help when the user types a double quote or an opening parenthesis of course.
[10:33:14] <beach> Though it is probably more frequent to edit the end of a buffer than any other place, so then the entire prefix is typically intact.
[10:33:28] <hefner> this is tracked in terms of recursive calls to READ or just top-level forms?
[10:33:42] <beach> All calls.
[10:34:35] *** Quits: kuao (uid504326@helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[10:34:36] *** Joins: MichaelRaskin (~MichaelRa@ipb21a9944.dynamic.kabel-deutschland.de)
[10:34:36] *** ChanServ sets mode: +o MichaelRaskin
[10:39:04] <beach> http://metamodular.com/incremental-parsing.pdf is the paper we published about the technique.
[10:41:37] <beach> It has benchmarks for inserting left parentheses and double quotes too.
[10:43:54] <hefner> good, something to read.
[10:45:33] <beach> So did you quit writing Common Lisp code for a while?  And if so, are you planning to start again?  Any projects?
[10:45:39] <candlejack> hefner: re twitter - I've removed my account so there is no stream there anymore
[10:45:57] <candlejack> I've realized that I'm starting to refresh the same page mindlessy - so something is not right with their ux cognizance wise
[10:46:18] *** candlejack is now known as jackdaniel
[10:46:45] <hefner> I can't stand the place, I read it seldomly now. It used to burn an hour every time I opened it on my phone, and frequently made me angry.
[10:46:46] <jackdaniel> we haven't talked but I've worked with your code a lot - great work :)
[10:47:20] <hefner> Now I keep it logged in on one computer and only browse it once every few weeks.
[10:47:52] <beach> jackdaniel: You may have the opportunity to talk at ELS'22.
[10:49:13] <hefner> my primary contribution to mcclim was fixing legions of bugs, and there's some things I did that are really WTF moments in hindsight (particularly the gadget theme lookup logic)
[10:49:54] <hefner> keep the dream alive, though.
[10:50:04] <jackdaniel> hefner: there is also ttf renderer (which I have extensively modified to incorporate kerning without losing too much performance)
[10:50:30] <jackdaniel> either way #clim is low-volume irc channel where most talks take place, so I hope to see you there
[10:50:44] <jackdaniel> I need to go now (the parent duty calls! :) it was nice to see you!
[10:51:30] <hefner> was mcclim-truetype me? anyway xach and whoever (sorry!) wrote the underlying rasterization library deserves 99% of that credit.
[10:51:33] <hefner> good night.
[10:53:29] <beach> Good night hefner.  See you around.
[10:58:15] *** Joins: pve (~pve@37-33-50-50.bb.dnainternet.fi)
[11:03:52] *** Joins: Lycurgus (~juan@98.4.112.204)
[11:21:37] *** Quits: Colt (~Colt@user/colt) (Quit: Leaving)
[11:24:02] *** Joins: gaqwas (~john@dynamic-095-114-144-209.95.114.pool.telefonica.de)
[11:41:46] *** Joins: taiju (~taiju@M014013236064.v4.enabler.ne.jp)
[11:44:27] *** Joins: Colt (~Colt@user/colt)
[11:47:54] *** Joins: Inline (~Inline@2a02:908:1252:7a80:4744:6074:ea58:ae8a)
[11:52:32] *** Joins: shka (~herr@83.175.151.96.piasta.pl)
[11:57:00] *** Joins: VincentVega (~user@212.241.24.160)
[12:05:58] *** Quits: akoana (~ah@user/akoana) (Quit: leaving)
[12:08:10] *** Quits: frgo (~frgo@p548a30d7.dip0.t-ipconnect.de) (Ping timeout: 260 seconds)
[12:22:59] *** Joins: zxcvz (~tobias@h-98-128-228-142.NA.cust.bahnhof.se)
[12:31:38] *** Quits: Jach (~Jach@2601:600:8600:307:7e31:e7a7:f1f3:a96b) (Quit: Leaving.)
[12:33:24] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[12:37:38] *** Quits: Lycurgus (~juan@98.4.112.204) (Quit: Exeunt)
[13:02:20] *** Joins: Cymew (~ante@c-e989225c.023-1144-7570702.bbcust.telenor.se)
[13:31:32] *** Quits: Cymew (~ante@c-e989225c.023-1144-7570702.bbcust.telenor.se) (Ping timeout: 240 seconds)
[13:48:19] *** Joins: cage (~cage@dynamic-adsl-94-34-16-50.clienti.tiscali.it)
[13:57:30] *** Quits: s-liao (~s-liao@101.86.101.64) (Ping timeout: 256 seconds)
[14:17:00] *** Quits: karlosz (~karlosz@47.151.136.69) (Quit: karlosz)
[14:38:20] *** Joins: Devon (~devon@pool-108-28-172-103.washdc.fios.verizon.net)
[14:39:15] *** Joins: s-liao (~s-liao@101.86.101.64)
[14:48:13] *** Joins: random-nick (~random-ni@87.116.180.220)
[14:55:19] *** Quits: VincentVega (~user@212.241.24.160) (Read error: Connection reset by peer)
[14:57:06] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.3)
[14:58:47] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[15:06:02] *** Joins: cosimone (~user@2001:b07:ae5:db26:a7aa:8027:6b4e:2fb3)
[15:23:55] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[15:32:28] *** Quits: shka (~herr@83.175.151.96.piasta.pl) (Ping timeout: 268 seconds)
[15:40:33] <Xach> frederic jolliton!
[15:41:06] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 265 seconds)
[15:41:13] <beach> Xach: ?
[15:44:32] <Xach> beach: he wrote cl-vectors, upon which some useful rasterization things have been made
[15:44:42] <Xach> that is the name which escaped hefner earlier
[15:44:51] <beach> Ah, OK.
[15:45:42] <Xach> More properly Frédéric Jolliton
[15:45:58] <Xach> sometimes the dust is blown from letters on the long trip across the atlantic
[15:51:22] *** Quits: Inline (~Inline@2a02:908:1252:7a80:4744:6074:ea58:ae8a) (Quit: Leaving)
[15:54:38] *** Joins: Inline (~Inline@2a02:908:1252:7a80:4744:6074:ea58:ae8a)
[16:04:39] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[16:08:44] *** Joins: Everything (~Everythin@37.115.210.35)
[16:16:29] *** Quits: amk (~amk@109.255.169.126) (Remote host closed the connection)
[16:16:39] *** Joins: amk (~amk@109.255.169.126)
[16:48:07] *** Joins: frgo (~frgo@p548a30d7.dip0.t-ipconnect.de)
[16:52:35] *** Quits: Devon (~devon@pool-108-28-172-103.washdc.fios.verizon.net) (Ping timeout: 264 seconds)
[17:12:47] *** Joins: ebrasca (~user@librepanther.com)
[17:17:09] <contrapunctus> When I define a new system or rename an existing system, how do I get ASDF to see it without restarting the Lisp implementation?
[17:19:13] <beach> If you are using Quicklisp and you put a link in ~/quicklisp/local_projects, then you can do (ql:register-local-projects)
[17:24:52] <contrapunctus> beach: thanks, I hadn't made a link there...and looks like `asdf:initialize-source-registry` (possibly after `asdf:clear-source-registry`) might be what I was looking for 🤔️
[17:25:05] <scymtym> contrapunctus: when you evaluate (asdf:load-system "NAME-OF-NEW-SYSTEM"), an error should be signaled. a restart CLEAR-CONFIGURATION-AND-RETRY should be established in the context of the error. when you invoke that restart, ASDF re-scan the filesystem and should discover the new or renamed system. alternatively, you can open the system definition file and load it using C-c C-k (or evaluate (asdf:load-asd
[17:25:06] <scymtym> "FILENAME-OF-SYSTEM-DEFINITION-FILE"))
[17:25:36] <scymtym> or ASDF:INITIALIZE-SOURCE-REGISTRY, yes
[17:26:35] <contrapunctus> Oh, never thought of doing that. Thanks 😅️
[17:31:37] *** Quits: s-liao (~s-liao@101.86.101.64) (Quit: Client closed)
[17:35:28] *** Joins: s-liao (~s-liao@101.86.101.64)
[17:42:37] *** Quits: peterhil (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi) (Remote host closed the connection)
[17:50:01] *** Joins: notzmv (~zmv@user/notzmv)
[17:51:05] *** Joins: Lycurgus (~juan@98.4.112.204)
[18:01:37] *** Quits: Inline (~Inline@2a02:908:1252:7a80:4744:6074:ea58:ae8a) (Quit: Leaving)
[18:02:33] *** Joins: peterhil (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi)
[18:03:59] *** Joins: Inline (~Inline@2a02:908:1252:7a80:dd3:2a50:6ae0:62a1)
[18:12:49] *** Quits: ebrasca (~user@librepanther.com) (Ping timeout: 268 seconds)
[18:21:23] *** Quits: peterhil (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi) (Quit: Leaving)
[18:21:34] *** Joins: peterhil (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi)
[18:22:26] *** Joins: vats (~vats@103.158.91.169)
[18:24:24] *** Quits: terrorjack (~terrorjac@2a01:4f8:1c1e:509a::1) (Quit: The Lounge - https://thelounge.chat)
[18:25:30] *** Joins: terrorjack (~terrorjac@2a01:4f8:1c1e:509a::1)
[18:26:12] *** Joins: ym (~ym@95.106.10.166)
[18:30:57] *** Quits: s-liao (~s-liao@101.86.101.64) (Quit: Client closed)
[18:31:49] *** Joins: Guest74 (~Guest74@modemcable110.164-177-173.mc.videotron.ca)
[18:34:28] *** Joins: VincentVega (~user@212.241.24.160)
[18:35:11] *** Quits: amb007 (~a_bakic@102.215.76.86.rev.sfr.net) (Ping timeout: 264 seconds)
[18:35:53] *** Joins: amb007 (~a_bakic@73.146.204.77.rev.sfr.net)
[18:44:37] *** Joins: varjag (~user@ti0040a400-5479.bb.online.no)
[18:45:08] <varjag> had no idea OR is so tricky with multiple values
[18:47:22] <pjb> indeed.
[18:51:58] <Guest74> varjag:tricky?
[18:52:02] <Nilby> which hints at the somewhat suprising (eq (values) nil) => t and (type-of (values)) => null
[18:53:53] *** Quits: Lycurgus (~juan@98.4.112.204) (Quit: Exeunt)
[18:54:44] <beach> clhs or
[18:54:44] <specbot> http://www.lispworks.com/reference/HyperSpec/Body/a_or.htm
[18:56:05] <beach> Guest74: All values are returned only from the last form.
[18:58:21] <Guest74> that seems expected to me.
[18:59:07] <beach> Great!
[18:59:54] <yitzi> And probably a lot easier to implement then returning the values from the first form that has a non-nil primary value.
[19:00:04] <beach> Definitely.
[19:01:41] *** Joins: paule32 (~paule32@user/paule32)
[19:02:18] <_death> *efficiently
[19:05:12] <_death> it's also a popular use case to use a second value to indicate existence (e.g., GETHASH).. so in that case OR wouldn't be the right operator anyway
[19:10:33] <Guest74> do implementations keep the calculated hash around when supplying  a default value? it seems like they calc the hash twice.  or maybe I wrote something wrong.
[19:11:53] <Guest74> nevermind, i guess it would be the compiler seeing a setf after a gethash
[19:12:41] *** Joins: Devon (~devon@pool-108-28-172-103.washdc.fios.verizon.net)
[19:14:22] *** Joins: puke (~puke@user/puke)
[19:15:45] *** Quits: vats (~vats@103.158.91.169) (Remote host closed the connection)
[19:21:25] <_death> guess one could have (define-alt-tester gethash (nth 1)) (alt (foo x) (gethash x z) (bar y)) or (alt (foo x) (alt-nth-value 1 (gethash x z)) (bar y)) but inefficient
[19:27:07] *** Joins: vats (~vats@103.158.91.169)
[19:30:28] <mfiano> In trying to decide what compression scheme to use internal to my filesystem (ZFS), I did a bit of benchmarking today. Someone should really implement a pure CL ZSTD implementation. Line 99 looks amazing! And the nice thing about ZSTD is decompression rate remains near constant regardless of compression level: https://gist.github.com/mfiano/db0bf3048c466911773692c7684cda24
[19:30:40] <mfiano> I will probably have a try at it soon in CL :)
[19:31:54] <mfiano> (input was my 13GB home directory of varying files, because that's where the filesystem will be created)
[19:32:00] <mfiano> piped from TAR
[19:35:34] <Guest74> decompress time longer than lz4?
[19:35:42] *** Quits: VincentVega (~user@212.241.24.160) (Remote host closed the connection)
[19:37:22] <mfiano> Negligible, and a bit more space for LZ4. The thing about filesystem compression is, if you can find a good compression speed as to not affect writes too much, reads will equate to more than your device is capable of since there's less data.
[19:38:50] <Guest74> ah, for some reason i read line 91 and wondered why you weren't talking about the one after.  my eyes are crap today.
[19:39:40] <mfiano> Nono, XZ was just because I had it laying around. I knew it was both slow and memory hungry.
[19:39:54] *** Joins: McParen (~mcp@user/mcparen)
[19:39:57] <mfiano> It ate about 40GB of RAM compressing :)
[19:42:18] <Guest74> how do I copy a struct from slimes inspector to the repl?
[19:42:31] <mfiano> M-RET
[19:42:43] <Guest74> thanks
[19:49:06] <varjag> Guest74: problem is when you habitually use OR as impromptu IF, as i sometimes do
[19:51:18] <Guest74> in an m-v-b?
[19:58:09] *** Joins: Josh_2 (~user@37.25.47.130)
[19:59:13] <Josh_2> Hi hi
[19:59:13] <Colleen> Josh_2: contrapunctus said at 2021.11.14 19:40:38: I ran into some more Clack documentation today! :D https://jasom.github.io/clack-tutorial/posts/getting-started-with-clack
[20:00:12] <Josh_2> contrapunctus: Thanks
[20:04:30] <contrapunctus> 🙂
[20:05:03] *** Quits: vats (~vats@103.158.91.169) (Ping timeout: 268 seconds)
[20:16:51] *** Quits: MichaelRaskin (~MichaelRa@ipb21a9944.dynamic.kabel-deutschland.de) (Read error: No route to host)
[20:19:20] *** Quits: amb007 (~a_bakic@73.146.204.77.rev.sfr.net) (Read error: Connection reset by peer)
[20:19:23] *** Joins: MichaelRaskin (~MichaelRa@ipb21a9944.dynamic.kabel-deutschland.de)
[20:19:23] *** ChanServ sets mode: +o MichaelRaskin
[20:19:39] *** Joins: amb007 (~a_bakic@102.215.76.86.rev.sfr.net)
[20:21:08] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[20:23:14] *** Joins: lisp123 (~lisp123@5.30.23.247)
[20:23:58] <lisp123> Is it possible for ASDF system definitions to have nicknames?
[20:25:03] <mfiano> No, not built in anyway.
[20:25:12] <lisp123> mfiano: Thanks!
[20:26:43] *** Joins: Oladon (~olad@98.43.81.226)
[20:44:55] *** Joins: LordRishav (~LordRisha@user/lordrishav)
[20:45:49] <Josh_2> Wheres the #+ entry in clhs?
[20:47:26] <edgar-rft> 2.4.8.17 Sharpsign Plus
[20:47:37] <Josh_2> http://www.lispworks.com/documentation/HyperSpec/Body/02_dhq.htm
[20:47:41] <Josh_2> Thanks edgar-rft
[20:49:16] <Josh_2> https://plaster.tymoon.eu/view/2715#2715 is this correct?
[20:51:59] *** Joins: X-Scale` (~ARM@165.201.137.78.rev.vodafone.pt)
[20:52:27] <Guest74> mfiano: what do you think is a good amount of cells to propagate to after collapsing a cell?  doing it until there are no changes wants to set my laptop on fire.
[20:53:08] *** Quits: X-Scale (~ARM@83.223.248.137) (Ping timeout: 268 seconds)
[20:54:14] *** X-Scale` is now known as X-Scale
[21:03:39] *** Quits: amb007 (~a_bakic@102.215.76.86.rev.sfr.net) (Ping timeout: 256 seconds)
[21:04:21] *** Joins: amb007 (~a_bakic@121.146.204.77.rev.sfr.net)
[21:05:37] <mfiano> If you are asking that, then you don't understand the algorithm.
[21:09:29] *** Parts: LordRishav (~LordRisha@user/lordrishav) (Ight Imma Head out)
[21:11:40] <Guest74> great help there, thanks!
[21:12:10] *** Quits: Guest74 (~Guest74@modemcable110.164-177-173.mc.videotron.ca) (Quit: Connection closed)
[21:13:07] <Josh_2> :joy:
[21:16:02] *** Quits: amb007 (~a_bakic@121.146.204.77.rev.sfr.net) (Ping timeout: 240 seconds)
[21:17:01] <Josh_2> If I'm using #+ to define a different method depending on a feature does the defmethod form have to be on the same line as the #+ .. form?
[21:17:08] <Josh_2> Or can it be one below?
[21:17:59] <Josh_2> Okay I think it can go below
[21:21:01] <yitzi> Josh_2: common lisp doesn't care about newlines. They are treated the same as whitespace. Which why you can have a newline in a string literal.
[21:21:21] <Josh_2> I ask because I tried in the repl and obviously that didn't work
[21:21:42] <Josh_2> Thanks for the answer
[21:22:38] <yitzi> no prob
[21:23:35] *** Joins: amb007 (~a_bakic@159.104.204.77.rev.sfr.net)
[21:26:44] <Josh_2> https://i.imgur.com/73J7FMO.png emacs having a fit here
[21:28:54] <Josh_2> Before I make a PR can someone just double check I have used #+/-sbcl correctly please https://github.com/fukamachi/lack/commit/ade1774037ea716680058599c0010c831cd45b85
[21:31:54] <yitzi> You can do conditional compilation anywhere. Not just on top level forms if that is more convenient. For instance, you can add the conditional compilation inside the defmethods also.
[21:32:08] <Josh_2> contrapunctus: I made a thing on Ningle https://github.com/K1D77A/carlyle
[21:32:18] <Josh_2> yitzi: can you show me an example?
[21:32:53] <yitzi> https://plaster.tymoon.eu/view/2716#2716
[21:33:03] <Josh_2> Ah nice
[21:33:12] <Josh_2> I'll do that instead thanks yitzi
[21:33:13] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 268 seconds)
[21:33:35] <yitzi> You are welcome.
[21:34:03] <Josh_2> But what about with the defstruct? Can I do it in that?
[21:34:30] <contrapunctus> Josh_2: cool, congratulations. Mind, I'm just getting started with web dev, so I don't know much about what most of these web frameworks do 😅️
[21:35:13] <yitzi> Josh_2: Yes, you can do inside the defstruct.
[21:35:26] <Josh_2> It closes the form for me?
[21:36:05] <yitzi> No, it just makes the next form conditional.
[21:36:12] <yitzi> I make an example...
[21:36:14] *** Quits: lisp123 (~lisp123@5.30.23.247) (Quit: Leaving...)
[21:36:27] <Josh_2> https://plaster.tymoon.eu/view/2717#2717 like this?
[21:37:41] <Alfr> Josh_2, as long as it's processed by READ, the conditional is evaluated when reading and depending on the result the following form is either inserted or replaced by whitespace.
[21:38:05] <yitzi> Correct. You can put the conditionals in front of the keywords, but some might find that ugly. No idea what the preference of the maintainers over there is.
[21:38:23] <Josh_2> So basically in this case I have to drop a paren onto a newline?
[21:39:21] <yitzi> https://plaster.tymoon.eu/view/2718#2718
[21:39:34] <Josh_2> huh
[21:40:03] <Josh_2> the synchronized key exists on distributions that aren't sbcl?
[21:40:45] <yitzi> No. You have put the conditional in front of the key and in front of the value.
[21:40:57] <Josh_2> Yes I see sorry
[21:41:21] <Josh_2> also how does that form get closed then? You have a defmethod but it does not have all of its closing parents on sbcl
[21:41:23] <Josh_2> parens*
[21:42:18] <yitzi> Unless you do some funniness with a dotted list, I suppose.
[21:42:38] <yitzi> No worries.
[21:43:02] <yitzi> The closing paren is not part of the conditional form.
[21:43:12] <Josh_2> I see
[21:43:48] <Josh_2> so in the #-sbcl only the form immediately following the #-sbcl ie contained with the (lock ..) is conditional, meaning the paren after is added
[21:43:50] <yitzi> That is why #+(or) is better then comments for removing code temporarily.
[21:44:23] <yitzi> Correct
[21:44:39] <Josh_2> Okay I have to say the inline #+/- is horrific so I wont do that, but thanks for showing it to me :)
[21:46:04] <Alfr> Josh_2, maybe this is a bit more enlightening: (read-from-string "(cons #+abcl 'a #+ccl 'c #+sbcl 's #-(or abcl ccl sbcl) 'other 'whatever)")
[21:48:05] <Josh_2> https://github.com/fukamachi/lack/commit/cd96686fa8aa07907212afa77b3b96786dd598a3 okay how about that?
[21:49:02] <Josh_2> Alfr: thanks. I understand now I was just getting caught up on the trailing parens
[21:50:01] <yitzi> Josh_2: you are getting it!
[21:52:13] <Alfr> Josh_2, you may want to consolidate multiple consecutive #+X Y into #+X (progn Y1 Y2 ..) to make it easier to comprehend, as interspersed #+/- requires readers to mentally check the conditional.
[21:54:20] <Josh_2> So https://plaster.tymoon.eu/view/2717#2717 This?
[21:58:31] <Alfr> Josh_2, hey, I'm in no way a style guide, only told you what I thought when I saw the code above. But yes, somehow I like the last one better. ;)
[21:58:53] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[21:58:53] <Josh_2> Well I was just trying to make sure that the structure is correct
[21:59:36] <Josh_2> personally I prefer the former
[22:01:40] <Alfr> Josh_2, it's your code, don't mind me. Assuming the indentation isn't messed up, I'd say the same as yitzi: "you are getting it!"
[22:01:54] <Josh_2> Well its not my repo ;)
[22:02:08] <Josh_2> https://github.com/fukamachi/lack/pull/62 I think in all my years lisping this is my first pull request
[22:12:01] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[22:13:13] *** Quits: Everything (~Everythin@37.115.210.35) (Quit: leaving)
[22:27:54] *** Joins: ebrasca (~user@librepanther.com)
[22:27:56] *** Quits: ebrasca (~user@librepanther.com) (Remote host closed the connection)
[22:28:18] *** Joins: ebrasca (~user@librepanther.com)
[22:45:05] *** Quits: defb (~defb@user/defb) (Read error: Connection reset by peer)
[22:52:04] *** Quits: gaqwas (~john@dynamic-095-114-144-209.95.114.pool.telefonica.de) (Remote host closed the connection)
[22:53:43] *** Joins: gaqwas (~john@dynamic-095-114-144-209.95.114.pool.telefonica.de)
[22:56:11] *** Parts: McParen (~mcp@user/mcparen) ()
[22:56:40] *** Joins: karlosz (~karlosz@47.151.136.69)
[23:00:11] <Josh_2> Xach: have you thought about refusing to add libraries to quicklisp that have no documentation?
[23:04:00] *** Quits: gaqwas (~john@dynamic-095-114-144-209.95.114.pool.telefonica.de) (Remote host closed the connection)
[23:06:06] *** Quits: abrantesasf (~abrantesa@187.36.170.211) (Remote host closed the connection)
[23:08:50] *** Quits: karlosz (~karlosz@47.151.136.69) (Quit: karlosz)
[23:20:48] *** Joins: gaqwas (~john@dynamic-095-114-144-209.95.114.pool.telefonica.de)
[23:25:28] *** Quits: phossil (tophullyte@gateway/vpn/protonvpn/tophullyte) (Quit: Leaving)
[23:28:39] *** Joins: tophullyte (tophullyte@gateway/vpn/protonvpn/tophullyte)
[23:32:47] *** Quits: amb007 (~a_bakic@159.104.204.77.rev.sfr.net) (Ping timeout: 264 seconds)
[23:36:38] *** Quits: gaqwas (~john@dynamic-095-114-144-209.95.114.pool.telefonica.de) (Remote host closed the connection)
[23:37:44] *** Joins: gaqwas (~john@dynamic-095-114-144-209.95.114.pool.telefonica.de)
[23:40:14] *** Quits: gaqwas (~john@dynamic-095-114-144-209.95.114.pool.telefonica.de) (Remote host closed the connection)
[23:40:37] *** Joins: gaqwas (~john@dynamic-095-114-144-209.95.114.pool.telefonica.de)
[23:44:22] *** Joins: amb007 (~a_bakic@195.197.204.77.rev.sfr.net)
[23:48:54] *** Quits: varjag (~user@ti0040a400-5479.bb.online.no) (Ping timeout: 268 seconds)
[23:50:00] *** Joins: Guest74 (~Guest74@modemcable110.164-177-173.mc.videotron.ca)
[23:50:53] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 265 seconds)
[23:52:31] <Xach> Josh_2: no
[23:54:10] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[23:55:47] <Xach> no license is a problem
[23:58:46] *** Quits: amb007 (~a_bakic@195.197.204.77.rev.sfr.net) (Read error: Connection reset by peer)
