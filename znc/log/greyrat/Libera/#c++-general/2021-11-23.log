[00:00:49] *** Quits: proller (~p@80.240.216.69) (Ping timeout: 256 seconds)
[00:01:40] *** Quits: cm007magnum (~Rheanna@101.89.150.168) (Remote host closed the connection)
[00:04:21] *** Joins: cm007magnum (~Rheanna@218.78.109.69)
[00:05:50] <hnOsmium0001[m]> actually it's not really meh
[00:05:51] <hnOsmium0001[m]> unreal's GC works similarly, it does a collect in between each frame (or update or whatever unreal calls it)
[00:06:05] *** Joins: reumeth (~reumeth@user/reumeth)
[00:14:07] *** Joins: proller (~p@80.240.216.69)
[00:20:02] <MaddHatter> Is there a good way for a (constexpr) function to capture its arguments literally in the same way a #define foo(...) does?
[00:22:21] *** Quits: paul424 (~tom@ip-37-248-152-78.multi.internet.cyfrowypolsat.pl) (Quit: Leaving)
[00:23:09] <PJBoy> think you'll have to elaborate
[00:26:55] *** Quits: Deneb (~johnch@30.125.7.51.dyn.plus.net) (Quit: Leaving)
[00:29:43] *** Quits: meator (~meator@user/meator) (Quit: Leaving)
[00:31:43] <LordKalma> { foo(5); } constexpr auto foo(int a){return a/5;}
[00:31:43] <geordi>  
[00:31:46] <LordKalma> like that?
[00:31:57] <LordKalma> { foo(5); } consteval auto foo(int a){return a/5;}
[00:31:57] <geordi>  
[00:32:19] <LordKalma> what you can't do is #stringify and that sort of stuff
[00:32:29] <LordKalma> and ## whatever it did, I forget
[00:32:55] *** Joins: badone (~badone@209.132.189.136)
[00:35:08] *** Quits: sysctl (~user@88.215.77.255) (Quit: Konversation terminated!)
[00:35:13] *** Quits: SuperNintendoSUX (~sjw@69.206.48.64) (Remote host closed the connection)
[00:36:25] *** Joins: SuperNintendoSUX (~sjw@69.206.48.64)
[00:36:45] <Alipha> geordi: -w { int x = 0; cout << foo(++x); } #define foo(a) ((a) + (a))
[00:36:46] <geordi> 4
[00:36:49] <Alipha> Like that? heh
[00:36:57] *** Quits: pulse (~pulse@user/pulse) (Quit: Join a community of dragon tamers at https://indiedevs.net/)
[00:38:10] <LordKalma> I think maybe there were more in line with, like
[00:38:42] <LordKalma> {} #define MAGIC(funcname) (funcname) = reinterpret_cast<funcname##_t>(library_.resolve(#funcname));
[00:38:42] <geordi>  
[00:38:48] <LordKalma> from some code I actually wrote
[00:39:07] <LordKalma> funcname##_t and #funcname you can't get from constexpr
[00:39:19] <LordKalma> we'll need to wait for reflection (TM) haha
[00:40:04] *** Joins: uzer1 (~uzer@dsl-trebng11-54f912-114.dhcp.inet.fi)
[00:42:28] <LordKalma> https://gist.github.com/ruilvo/904006faf16cab656a4344e291b312c1#file-soapysdr_library-cpp-L19
[00:47:00] *** Joins: jokoon (~eio@2a01:e0a:542:e160:a836:e0c0:5a8c:7c64)
[00:47:14] <jokoon> any idea why quickwatch never works in visual studio?
[00:47:57] <MaddHatter> PJBoy: stringification, like #define FOO(x) foo("bar::"##x)
[00:48:07] <LordKalma> yeah, use a macro for that
[00:48:53] <MaddHatter> macros suck though. I really want to get away from that.
[00:49:05] <jokoon> adding namespace fixes it
[00:50:17] <MaddHatter> it would be a syntax change, but I was thinking maybe a user-defined literal suffix could do it
[00:51:27] *** Quits: night_wulfe_ (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 264 seconds)
[00:51:50] *** Quits: cm007magnum (~Rheanna@218.78.109.69) (Remote host closed the connection)
[00:53:41] <AmR> Can I build Boost with cmake from .zip file ?
[00:53:54] *** Joins: cm007magnum (~Rheanna@218.78.67.149)
[00:55:20] <Alipha> MaddHatter: literal suffixes don't work when you pass in a non-literal though (e.g., a variable)
[00:56:04] *** Quits: cm007magnum (~Rheanna@218.78.67.149) (Remote host closed the connection)
[00:56:09] <Alipha> and i'm still not sure what proposed syntax involving literal suffixes you think would work
[00:58:14] <PJBoy> MaddHatter, that's not stringification
[00:58:24] <PJBoy> that's token pasting
[00:59:08] <MaddHatter> yeah, that, then.
[00:59:08] *** Joins: cm007magnum (~Rheanna@218.78.67.149)
[00:59:43] *** Quits: TheGuestMovie (~TheGuestM@173.231.114.74) (Quit: Client closed)
[00:59:51] <MaddHatter> Alipha: I haven't thought very far about this yet. I'm just annoyed at how the preprocessor not understanding anything about the language (like scope) is making my life hard.
[01:01:30] <MaddHatter> I think in this particular usage, the argument always has to be a literal, otherwise the ## wouldn't work
[01:01:36] *** Quits: reumeth (~reumeth@user/reumeth) (Ping timeout: 245 seconds)
[01:02:48] <PJBoy> compile time string building is harder than it should be
[01:03:36] <PJBoy> what's the goal with this?
[01:06:09] <MaddHatter> to eliminate name conflicts between C++ variables and functions, and the same names used by the preprocessor, mostly
[01:07:49] <PJBoy> ah ok you can't possibly create new identifiers without macros
[01:08:00] <PJBoy> I thought we were doing string literals
[01:10:57] <MaddHatter> the string literals is why it can't just be an ordinary function in the first place
[01:12:03] <MaddHatter> foo(x) is a #define that takes (I'm pretty sure always) a string literal, and does some token-pasting with it. What it's doing is only relevant because that's why it has to be a #define instead of a function.
[01:13:28] <MaddHatter> if I could make it something the compiler understands (rather than the preprocessor), then warnings and errors would issue when there are conflicts and shadowing.
[01:14:57] *** Joins: X-Scale` (~ARM@165.201.137.78.rev.vodafone.pt)
[01:16:23] <johnny> AmR, why doy ou think you could do that?
[01:16:37] <johnny> i wouldn't imagine it would be true myself, but who knows
[01:16:44] <AmR> johnny: Offline build :-)
[01:16:51] *** Quits: X-Scale (~ARM@31.22.202.54) (Ping timeout: 250 seconds)
[01:17:09] <johnny> so do you mean via fetchcontent or someting?
[01:17:14] <AmR> It's only idea
[01:17:37] <AmR> johnny: https://github.com/drbenmorgan/BoostBuilder
[01:17:44] <johnny> so far i've managed to avoid both boost and cmake, so i can't tell you for sure, but perhaps fetchcontent can be used with boost
[01:17:55] <johnny> AmR, i'm not going to put any more cmake info in my brain thank you very much :)
[01:18:24] *** X-Scale` is now known as X-Scale
[01:18:50] <johnny> somehting about functions not returning values really gets my goat :(
[01:22:55] <PJBoy> I need to stop trying to work on my C++ project
[01:23:03] <PJBoy> every time I do something bad happens
[01:23:24] <PJBoy> in this case my AWS account got suspended >_>
[01:23:34] <johnny> lol
[01:23:52] <johnny> i've yet to have to deal with aws. that's always somebody else's job
[01:24:00] <kalven> justs switch to rust, they never have problems
[01:24:01] <johnny> i'd rather just pay the little bit for a DO droplet instead
[01:24:15] <johnny> since it's totally predictable
[01:24:22] <PJBoy> I was just using it for a basic web server
[01:24:26] <PJBoy> and it was terrible at it
[01:25:26] <PJBoy> (but I had accrued about $300 of credit by doing some AWS Educate crap_
[01:26:07] <PJBoy> but now they wanna charge me around Â£20/month
[01:26:19] <PJBoy> which I really don't think is reasonable
[01:26:40] <kalven> for.. ?
[01:26:57] <PJBoy> an EC2
[01:27:32] <PJBoy> I would check the exact type, but I can't get into my account
[01:27:47] <PJBoy> it was the most basic option
[01:28:00] <PJBoy> I didn't need any processing speed or disk space or anything
[01:28:24] <PJBoy> I was running my discord bot there
[01:28:33] <PJBoy> and some other random webtools
[01:29:27] <kalven> I have a digitalocean droplet for such things
[01:29:51] <PJBoy> that's a name I've heard before a few times
[01:29:54] *** Quits: robod34 (Username@79.113.195.239) (Quit: Goe offline! ( http://marius.sucan.ro/ ))
[01:31:41] <PJBoy> ngl I'd rather get away from this uncapped cost model
[01:31:48] <johnny> everything about AWS sounded too complicated, whether it be billing or tooling, so i just paid the $5/mo and let it go
[01:32:19] <PJBoy> yeah I found the AWS costs impossible to calculate
[01:32:39] <PJBoy> heaven forbid if I actually wanted to do something parallel
[01:32:40] <johnny> of course there are similiar providers out there to DO. i just happened to like the API and the tooling available
[01:33:02] <johnny> it's possible other providers have caught up API wise recently
[01:33:36] <johnny> i wonder if they all let you swtich the booted kernel separately from the OS nowadays
[01:33:37] <PJBoy> oh DO isn't an uncapped price model, nvm
[01:33:47] <PJBoy> I will almost certainly join in on the DO hype then
[01:33:55] *** Joins: chozorho (~chozorho@2601:146:300:c30::c72)
[01:34:14] <johnny> for a time on DO the kernel was controlled by them
[01:34:26] <johnny> i guess it's been a few years at this point tho :)
[01:34:40] <PJBoy> they're welcome to the kernel
[01:34:42] <johnny> you couldn't use custom isos or all sorts of things, but nowdays you can
[01:34:57] <kalven> been a happy DO customer since 2014
[01:35:12] <johnny> oh it wasn't a problem if all you wanted to do was just boot one of the existing options and run with it
[01:35:21] *** Quits: uzer1 (~uzer@dsl-trebng11-54f912-114.dhcp.inet.fi) (Ping timeout: 245 seconds)
[01:35:26] <johnny> which is indeed what most folks wanted to do :)
[01:36:29] <PJBoy> sounds good to me
[01:37:02] <MaddHatter> is linode still a thing?
[01:37:57] <johnny> last i heard yes
[01:38:11] <johnny> i used them first, but switched to DO due to the API that DO had but linode didn't
[01:38:26] <johnny> they did end up resolving that eventually tho
[01:38:27] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[01:38:34] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[01:38:34] *** ChanServ sets mode: +v npaperbot
[01:38:58] <johnny> although i guess i never did check to see if it was any good
[01:39:23] <PJBoy> possibly dumb question, am I good to set up HTTPS with them?
[01:41:47] <kalven> PJBoy: I don't use any of their managed services, just a basic VPS. That said, I do have a site (with https) running on it
[01:41:47] *** Quits: cm007magnum (~Rheanna@218.78.67.149) (Remote host closed the connection)
[01:42:14] <PJBoy> great
[01:43:52] *** Joins: cm007magnum (~Rheanna@218.78.99.237)
[01:44:55] <PJBoy> (I just need to serve a basic text file over https for godbolt)
[01:48:14] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Quit: My MacBook Pro has gone to sleep. ZZZzzzâ¦)
[01:54:06] *** Quits: proller (~p@80.240.216.69) (Ping timeout: 245 seconds)
[01:54:55] <johnny> well i think one can just let DO handle it, since they offer tls termination , but i've never used it
[01:55:25] <johnny> but basically you'd point your domain at the DO load balancer and then the DO load balancer would talk to your web server that just serves over regular http
[01:55:59] <johnny> or of course you could go the regular way with letsecncrypt cert and a cron/systemd timer script to auto renew it like you'd do anywhere else
[01:56:45] *** Joins: cq-work (~Z_Lund@user/cq-work)
[01:57:40] <kalven> I did the latter
[01:58:50] <johnny> the first way seems simpler
[01:59:51] <johnny> i didn't go that way myself bcause i was playing with tls 1.3 and they didn't offer it yet at the time
[02:00:06] <johnny> and i just haven't bothered changing it since then
[02:00:16] *** Quits: magla (~gelignite@55d4a3e3.access.ecotel.net) (Quit: Stay safe!)
[02:06:33] *** Joins: proller (~p@2a02:6b8:b081:8810::1:29)
[02:15:13] *** Quits: kenanmarasli (~kenanmara@user/kenanmarasli) (Quit: Leaving)
[02:19:11] *** Quits: jokoon (~eio@2a01:e0a:542:e160:a836:e0c0:5a8c:7c64) (Quit: Leaving)
[02:25:41] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[02:26:27] *** Joins: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be)
[02:31:36] *** Joins: vinleod (~vdamewood@fedora/vdamewood)
[02:31:37] *** Quits: cm007magnum (~Rheanna@218.78.99.237) (Remote host closed the connection)
[02:31:39] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Ping timeout: 264 seconds)
[02:33:05] *** Joins: cm007magnum (~Rheanna@218.78.94.61)
[02:39:25] *** Joins: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it)
[02:39:41] *** vinleod is now known as vdamewood
[02:48:41] *** Quits: Burgundy (~yomon@86.127.194.72) (Ping timeout: 245 seconds)
[02:50:32] *** Quits: spaceangel (~spaceange@ip-62-245-71-160.net.upcbroadband.cz) (Remote host closed the connection)
[02:51:19] *** Joins: mike18 (~geri@71-220-52-187.mpls.qwest.net)
[02:51:33] <mike18> hi what is lower bound of [5,7,7,8,8,10] searching for 6?
[02:52:25] *** Joins: grep_xtrange (~x@ac255238.ppp.asahi-net.or.jp)
[02:52:26] <kalven> that first 7
[02:53:24] <mike18> why 7?
[02:53:32] *** Joins: navidr (uid112413@id-112413.uxbridge.irccloud.com)
[02:53:58] <kalven> you can think of lower_bound finding the spot where the value should be inserted in order to keep the sequence sorted
[02:55:14] <kalven> { int a[] = {5,7,7,8,8,10}; cout << *lower_bound(begin(a), end(a), 6); }
[02:55:15] <geordi> 7
[02:55:34] *** Quits: z8z (~x@ac255238.ppp.asahi-net.or.jp) (Ping timeout: 260 seconds)
[02:55:43] <mike18> i need to get not found if i search for 6...
[02:56:44] <kalven> if you only need a true/false then use binary_search instead. if you actually need the location, then you'll need to check what the value is
[02:56:59] <mike18> both actually
[02:57:24] <kalven> then use lower_bound
[02:58:17] <mike18> it loooks like i need to implement my own binary searhc for that
[02:58:29] <kalven> why?
[02:58:57] <mike18> if lower_bound returns me an index for 6 - thats not what i look for
[02:59:10] <johnny> maybe describe what and why you're doing what you're doing
[02:59:39] <kalven> like I said, take the return value of lower_bound, first check if it's equal to end, if it isn't, then deref the iter and check if its value is what you're looking for
[02:59:42] <mike18> sorted array - get location of min, max index matching a num
[02:59:44] <kalven> no need to write your own binary search for that
[03:00:32] <kalven> oh, if that is what you need - then use std::upper_bound - if the value didn't exist then the two iterators will be equal.
[03:00:40] <kalven> sry
[03:00:42] <kalven> std::equal_range
[03:00:47] <kalven> mindfart
[03:01:13] <mike18> oh
[03:02:04] <mike18> [1] and search for 1 ... arent lower and upper bound equal?
[03:02:16] <kalven> no
[03:02:21] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.3)
[03:02:22] *** Quits: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it) (Quit: Leaving.)
[03:04:33] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[03:05:23] <Alipha> mike18: upper_bound returns an iterator to the first element greater than what you're searching for
[03:05:48] <mike18> [1] search for 1 - will it return index 2?
[03:05:55] <mike18> index 1
[03:06:22] <Alipha> mike18: yes
[03:07:19] <mike18> [1] search for 1 - lower_bound = index 0, upper_bound = index 1?
[03:07:34] <kalven> yes
[03:08:33] <Alipha> mike18: std::equal_range returns a half-open range of the elements that match n. Which is the same as [lower_bound, upper_bound)
[03:10:20] <Alipha> mike18: sorted array - get location of min, max index matching a num -- you want std::equal_range
[03:10:37] <mike18> ok
[03:12:44] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:5cca:96d9:7234:6761) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[03:14:28] *** Quits: Guest37__ (~textual@124.168.255.30) (Quit: My MacBook Air has gone to sleep. ZZZzzzâ¦)
[03:15:51] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[03:21:12] *** Quits: AmR (~AmREiSa@102.47.62.197) (Quit: Konversation terminated!)
[03:21:37] *** Quits: cm007magnum (~Rheanna@218.78.94.61) (Remote host closed the connection)
[03:22:57] *** Joins: cm007magnum (~Rheanna@61.171.38.68)
[03:33:09] *** Quits: Gaboradon (~Gaboradon@cpe-86-58-57-5.static.triera.net) (Quit: Shutdown)
[03:37:04] *** Parts: lpapp (~lpapp@ec2-15-161-137-233.eu-south-1.compute.amazonaws.com) ()
[04:03:22] *** Joins: luizfrds (~Luiz@152.250.243.147)
[04:07:44] *** Joins: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse)
[04:11:36] *** Quits: cm007magnum (~Rheanna@61.171.38.68) (Remote host closed the connection)
[04:11:41] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Quit: My MacBook Pro has gone to sleep. ZZZzzzâ¦)
[04:13:28] *** Joins: cm007magnum (~Rheanna@61.171.69.141)
[04:15:38] *** Quits: Tobbi__ (~Tobbi@2a02:8108:1240:48ec:91ed:5100:5834:6b0b) (Quit: My MacBook has gone to sleep. ZZZzzzâ¦)
[04:24:01] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[04:29:16] *** Joins: Guest37__ (~textual@124.168.255.30)
[04:43:01] *** Quits: tct (~tct@8.200.173.83.static.wline.lns.sme.cust.swisscom.ch) (Ping timeout: 256 seconds)
[04:43:57] *** Joins: tct (~tct@8.200.173.83.static.wline.lns.sme.cust.swisscom.ch)
[04:43:59] *** Joins: gehn (~gehn@user/gehn)
[04:45:50] *** Joins: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[04:46:36] *** Quits: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be) (Ping timeout: 245 seconds)
[05:00:27] <smallville7123> is it possible to get then when working with Raw strings when compiling a vertex shader in open gl?         ERROR: 0:13: 'R' : syntax error: syntax error
[05:01:44] *** Quits: cm007magnum (~Rheanna@61.171.69.141) (Remote host closed the connection)
[05:01:44] <smallville7123> this is the log https://gist.github.com/mgood7123/631debd1c8488c48568dd7cb2ef3c483
[05:04:27] *** Joins: cm007magnum (~Rheanna@218.78.99.237)
[05:08:33] <kalven> smallville7123: what does your c++ source look like?
[05:09:06] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 265 seconds)
[05:11:11] <smallville7123> https://gist.github.com/mgood7123/7c3a7b292f20d6d02e83a0f23c760fd8
[05:12:47] <kalven> get rid of that R at the end
[05:12:56] <kalven> on line 12
[05:18:51] <smallville7123> oh ok
[05:34:02] *** Quits: jkaye (~jkaye@2601:281:8300:7530:c25c:6460:bfbf:33d6) (Ping timeout: 240 seconds)
[05:38:27] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[05:38:34] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[05:38:34] *** ChanServ sets mode: +v npaperbot
[05:39:26] *** Quits: imMute (~immute@user/immute) (Ping timeout: 260 seconds)
[05:40:25] *** Joins: imMute (~immute@user/immute)
[05:48:16] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Ping timeout: 245 seconds)
[06:08:50] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[06:33:09] *** Quits: kapil (~kapil@o-k.website) (Quit: ZNC 1.7.5+deb4 - https://znc.in)
[06:33:40] *** Joins: kapil (~kapil@2a01:4f9:c010:c9c3::1)
[06:38:07] *** Quits: kapil (~kapil@2a01:4f9:c010:c9c3::1) (Client Quit)
[06:38:38] *** Joins: kapil (~kapil@2a01:4f9:c010:c9c3::1)
[06:42:27] *** Quits: kapil (~kapil@2a01:4f9:c010:c9c3::1) (Client Quit)
[06:42:27] *** Quits: cm007magnum (~Rheanna@218.78.99.237) (Remote host closed the connection)
[06:42:58] *** Joins: kapil (~kapil@o-k.website)
[06:43:46] *** Joins: cm007magnum (~Rheanna@218.78.53.13)
[06:50:48] *** Quits: malloy (~jimery@116.30.222.115) (Ping timeout: 250 seconds)
[06:52:48] *** Joins: malloy (~jimery@116.30.222.115)
[06:56:11] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Ping timeout: 245 seconds)
[06:56:36] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[07:05:20] *** Joins: pulse (~pulse@user/pulse)
[07:11:09] *** Quits: mike18 (~geri@71-220-52-187.mpls.qwest.net) (Remote host closed the connection)
[07:20:02] *** Quits: xkuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[07:24:37] *** Quits: xcm_ (~xcm@user/xcm) (Remote host closed the connection)
[07:24:55] *** Joins: xcm_ (~xcm@user/xcm)
[07:24:59] *** Quits: walkr (~walkr@177-7-165-171.user3p.brasiltelecom.net.br) (Quit: Leaving)
[07:39:35] *** Joins: Jupp_S (~quassel@ip-88-153-154-129.hsi04.unitymediagroup.de)
[07:55:02] *** Quits: smeso (~smeso@user/smeso) (Quit: smeso)
[08:00:54] *** Joins: smeso (~smeso@user/smeso)
[08:05:06] *** Joins: RandomRead3r (~RandomRea@user/randomreader)
[08:07:27] *** Quits: RandomReader (~RandomRea@user/randomreader) (Ping timeout: 250 seconds)
[08:07:32] *** RandomRead3r is now known as RandomReader
[08:14:10] *** Joins: Burgundy (~yomon@86.127.194.72)
[08:14:14] *** Quits: grep_xtrange (~x@ac255238.ppp.asahi-net.or.jp) (Quit: Quitting)
[08:14:31] *** Joins: z8z (~x@ac255238.ppp.asahi-net.or.jp)
[08:17:36] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:9068:8a61:ec13:3ab)
[08:20:51] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[08:22:24] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:9068:8a61:ec13:3ab) (Ping timeout: 268 seconds)
[08:22:25] *** Quits: cm007magnum (~Rheanna@218.78.53.13) (Remote host closed the connection)
[08:23:24] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Quit: My MacBook Pro has gone to sleep. ZZZzzzâ¦)
[08:24:21] *** Joins: cm007magnum (~Rheanna@218.78.94.61)
[08:25:40] *** Joins: nshire_ (~nshire@47.146.41.156)
[08:29:11] *** Quits: nshire (~nshire@user/nshire) (Ping timeout: 264 seconds)
[08:30:22] *** Joins: Codaraxis (~Codaraxis@user/codaraxis)
[08:32:37] *** Quits: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl) (Read error: Connection reset by peer)
[08:32:47] *** Joins: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl)
[08:39:54] *** Joins: givemeyourpies (givemeyour@c-66-235-2-202.sea.wa.customer.broadstripe.net)
[08:46:14] *** Quits: great_taste (~great_tas@190.32.235.20) (Quit: Client closed)
[09:01:57] *** Joins: reumeth (~reumeth@user/reumeth)
[09:02:46] *** Quits: badone (~badone@209.132.189.136) (Quit: ZNC 1.7.5 - https://znc.in)
[09:11:47] *** Quits: reumeth (~reumeth@user/reumeth) (Ping timeout: 250 seconds)
[09:11:48] *** Quits: cm007magnum (~Rheanna@218.78.94.61) (Remote host closed the connection)
[09:14:19] *** Joins: cm007magnum (~Rheanna@218.78.105.67)
[09:18:03] *** Joins: riksteri (riksteri@gateway/vpn/airvpn/riksteri)
[09:33:53] *** Joins: fluter (~fluter@user/fluter)
[09:34:12] <fluter> hi, i'm making a network client app, it needs to keep a queue of requests to the server, each request must be sent on a new connection, like connect->send->recv->disconnect,
[09:34:28] <fluter> how can i best make this work in good design? i'm not using boost asio
[09:38:28] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[09:38:35] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[09:38:35] *** ChanServ sets mode: +v npaperbot
[09:39:18] <RandomReader> that doesn't really describe enough, what kind of protocol is this and why does there need to be a queue?
[09:39:39] <RandomReader> and what are you using for a network api?
[09:40:55] <fluter> it's tcp based protocol, requests and responses are structs, because the client app get user input and input is keeps coming even there is a request ongoing, so i keep a queue
[09:41:12] <fluter> i'm using a basic eventloop reactor style api
[09:42:42] <RandomReader> I'm not sure I understand the question then, it sounds like you've already chosen a design?
[09:43:39] <fluter> not yet, the eventloop is very basic, like register a fd for read/write that's it, a wrapper around epoll
[09:43:52] <johnny> didn't folks use something like libuv for this? hmm
[09:43:58] <johnny> or was that not meant for servers?
[09:44:06] <RandomReader> so BSD sockets for your API?
[09:44:16] <RandomReader> that's what I was asking, since you said "not asio"
[09:44:20] <fluter> yes
[09:44:22] <fluter> socket
[09:44:32] <fluter> and i found it's a not of states to handle
[09:44:39] <fluter> a lot of states
[09:46:11] *** Quits: c4017 (~c4017@S0106c0943583f893.vf.shawcable.net) (Ping timeout: 256 seconds)
[09:47:10] <RandomReader> not so many with that flow description .. one logical operation is start connect, wait for result (via epoll): it either succeeded or failed .. if succeeded, start send of buffer, and either it sent everything or you need to wait for an event to try the remaining buffer until it completes
[09:47:35] <RandomReader> then recv, until you get the total amount of data you're expecting .. then close
[09:48:41] <RandomReader> the necessary data, including what you're currently doing (e.g. "connecting", "sending" etc) and the buffers can be packaged in a struct
[09:48:51] <fluter> RandomReader: but i can't send all of buffer, each time send only the earliest request,
[09:49:00] <RandomReader> if you need to have multiple in flight at a time, then it's just multiple requests
[09:49:11] <RandomReader> no, I mean the buffer for a single request
[09:49:15] <fluter> each requests requires a connection to be established and destroyed
[09:49:23] <fluter> oh
[09:49:57] <RandomReader> sorry, if you need to have multiple in flight, it's multiple *structs*
[09:50:42] <RandomReader> if you don't, then it's just one struct, and you only have the one fd to put into epoll, so no fancy stuff needed
[09:50:54] <fluter> multiple in queue, but must be sequencial in flight
[09:51:02] <RandomReader> ok so just one at a time then
[09:51:03] <ambasta> Isn't networking TS part of C++20 already?
[09:51:14] <RandomReader> your request queue is a separate thing, you use it to start this process
[09:52:09] <RandomReader> it boils down to a single callback for epoll, check the event for errors, then use your status info to determine what you're doing -> which api call you should be making
[09:52:25] <RandomReader> whether that's just an if block or you dispatch it to separate functions or whatever
[09:52:51] <RandomReader> having a state that flows from connecting -> sending -> receiving is nice in this case
[09:53:11] *** Quits: renopt (~renopt@user/renopt) (Ping timeout: 264 seconds)
[09:53:18] *** Quits: rnsanchez (~rnsanchez@179.233.246.221) (Ping timeout: 260 seconds)
[09:53:49] *** Joins: renopt (~renopt@lisp.us.to)
[09:53:49] <RandomReader> sorry, when I say "single callback", I mean single thing to do for this fd
[09:55:46] <RandomReader> ambasta - no, there's still discussion over the API design
[09:56:26] <ambasta> Wow, I thought it was already accepted, is it targeted for ++23?
[09:56:49] <ambasta> Unless you mean executors (which afaik are targeted for 23)
[09:57:48] <RandomReader> last I heard the discussion and subsequent poll meant it's unlikely until after 23
[09:58:04] <ambasta> Well, something is definitely there https://www.iso.org/standard/64030.html
[09:58:40] <RandomReader> that's just the published TS
[10:00:21] <RandomReader> https://old.reddit.com/r/cpp/comments/q6tgod
[10:00:54] <ambasta> Thank you (for old. and the link)
[10:01:12] <ambasta> Damn, consensus against still
[10:02:04] *** Quits: cm007magnum (~Rheanna@218.78.105.67) (Remote host closed the connection)
[10:03:15] <RandomReader> personally I don't think any of this is worth standardizing .. to me it just looks like trying to shove different people's individual use cases in, without any consideration for what actually makes sense on all of the hosted platforms C++ is used on
[10:03:39] *** Joins: cm007magnum (~Rheanna@218.78.99.237)
[10:03:46] <RandomReader> which is exactly why the real world has multiple networking APIs, both native and libraries, for various use cases
[10:04:12] <RandomReader> there's no genuine common subset because those use cases are wildly different
[10:04:55] *** Joins: CoderCharmander (~CoderChar@2A001110022143980000005BF4519501.mobile.pool.telekom.hu)
[10:05:00] <RandomReader> but something will probably land at some point
[10:05:10] *** Quits: AbleBacon (~AbleBacon@user/AbleBacon) (Read error: Connection reset by peer)
[10:05:24] *** Joins: rnsanchez (~rnsanchez@179.233.246.221)
[10:07:45] <ambasta> Well, I don't expect standards to work for all use cases, as long as they work for the most common ones
[10:08:23] <ambasta> First I've heard of sender/reciever model too
[10:08:28] *** Quits: ville (~ville@178-75-128-81.bb.dnainternet.fi) (Quit: Lost terminal)
[10:08:36] <RandomReader> that's my point though, I don't think there *are* common ones for something as broad as networking
[10:09:05] <RandomReader> some people need infrastructure for high performance event driven servers, some people need infrastructure to make a TLS request to a webserver
[10:09:37] <RandomReader> stdlib certainly can't bake in TLS, the response time is way too long for the security evolution there
[10:10:09] <RandomReader> and the various platforms and app frameworks already have serviceable APIs that fit in with the rest of their models, something stdlib will never be able to do
[10:11:40] <RandomReader> e.g. even just epoll being discussed here, fits in with all kinds of event-driven work on linux, including things like signalfd
[10:12:23] *** Joins: ville (~ville@178-75-128-81.bb.dnainternet.fi)
[10:12:23] <RandomReader> but you have to be at the center of that loop to make effective use of any of that .. and it's evolving, there's what, uring now I think?
[10:13:11] <RandomReader> something standard can't make use of that, and would just end up papering it over badly, since trying to be optimal for epoll means being suboptimal for other platforms
[10:13:38] <ambasta> I don't know the low level details to be able to comment otherwise, but it seems weird to be that something like python's httpilb isn't native to C++
[10:14:47] <RandomReader> what would possibly be the advantage of making it native though?
[10:15:11] <RandomReader> that's a whole pile of bulk and specific design that's now required on many "embedded" platforms
[10:15:24] <ambasta> Well, for one, having multiple third party deps means either I need to ship them, or detect all sort of build systems to build it w/ my own project
[10:15:28] <RandomReader> that makes sense for Python which doesn't even try to target the environments C++ does
[10:15:33] <ambasta> That's a ton of additional code I need to write
[10:15:41] <ambasta> As I said, the most common ones
[10:15:59] <ambasta> Have a separate model for high perf servers and TLS requests
[10:16:00] <RandomReader> those aren't "most common" at all
[10:16:04] <ambasta> But atleast ship something
[10:16:18] <johnny> http is pretty useless witout tls these days tho
[10:16:21] <RandomReader> there are more medical devices using C++ than there are internet-connected clients that would talk http
[10:16:36] <RandomReader> which is what I was getting at with my comments earlier: these are individual use cases, not common ones
[10:16:47] <johnny> isn't that only because c++ isn't used as much as it could be tho RandomReader ?
[10:16:54] <RandomReader> everyone thinks their particular niche is common, when it's simply "popular"
[10:17:14] <ambasta> One of the reasons C++ isn't common in webdev for example, is that doing basic HTTP request/response is a pain
[10:17:19] <RandomReader> that's fair, it's normal, but in the case of C++ it's important not to forget how *broad* it is and therefore what the standard needs to cover
[10:17:23] <ambasta> SerDe is a pain
[10:17:34] <ambasta> Common != common to C++
[10:17:41] <ambasta> Common here = Common to all projects
[10:17:44] <ambasta> In all languages
[10:17:51] <ambasta> Most dev is webdev anyways
[10:17:56] <RandomReader> that's even less true than you think
[10:18:04] <RandomReader> most development is definitely not webdev
[10:18:05] <johnny> ambasta, rust doesn't ship an http client either, but at least it's easy to get!
[10:18:07] <johnny> that's the real problem
[10:18:16] *** Quits: Burgundy (~yomon@86.127.194.72) (Remote host closed the connection)
[10:18:18] <Raziel> are we debating philosophy again?
[10:18:35] <Raziel> and is it a good time to put in my request for passing types around as objects, polymorphic data, and general reflection?
[10:18:54] <ambasta> johnny: Absolutely
[10:19:06] <johnny> some of those are actual language features though not just library features aren't they?
[10:19:46] <RandomReader> reflection is actively being worked on .. I think the other two are non-goals at the moment
[10:20:19] <Raziel> RandomReader, I assume passing types around is gonna logically come after reflection at some point, and polymorphic data is dumb anyway, if a fun concept :p
[10:20:20] <johnny> ambasta, that's what i'd like to see more than shipping a http lib.. i'd rather see something like "blessed librarys" over pulling more into the standard
[10:20:51] <ambasta> I'd be okay with that too
[10:21:23] <johnny> python's standard library is too big and the bignessis unnecessary in a world in which package managers exist
[10:21:26] <Raziel> I'd like to see a dependency managing system that makes sense and actually becomes relatively standardized. that would alleviate many woes.
[10:21:39] <Raziel> personally I don't much mind managing my libs manually, but :/
[10:22:23] <RandomReader> I know package management was part of a discussion, but I can't remember where that sits .. I think they're focusing on something else first
[10:22:28] <johnny> well Raziel i thnk the php community had an interesting answer there.. they got themselves one without any help or assistance (and even resistance) from the php team
[10:22:37] <RandomReader> might be the Modules guidelines I'm thinking of?  fuzzy memory and it's been a while
[10:22:41] <johnny> and it still ended up taking hold in the community
[10:22:52] <RandomReader> but I do remember there was at least interest in trying to make libraries easier to handle
[10:22:55] <Raziel> johnny, that would be perfectly fine by me as well. it just seems like it's not really happening, so far, even though there are a few attempts
[10:23:11] <Raziel> and I guess that begs the question of "why is it not happening?"
[10:23:23] <johnny> because C++ makes it really hard due to history for one
[10:23:27] <RandomReader> which is a bit weird for the standards environment, but it might eventually become something
[10:23:54] <johnny> everybody did their own thing for so long, with all these build systems and whatnot. that wasn't a thing that existed as much on php
[10:24:17] <johnny> and of course, there ws really only one implementation to be concerned with. so only native modules were a problem
[10:24:26] <RandomReader> the C++ standard currently doesn't prescribe tooling at all .. even compilers and linkers are historical artifacts and not covered
[10:25:06] <RandomReader> there's just stages of translation, and people commonly assume the way current tools do things and consider that when making changes to the language as a result, but the standard is careful to avoid defining anything there
[10:25:26] <RandomReader> so it'll be interesting to see what might come out of thinking about libraries, particularly related to Modules
[10:25:45] <ambasta> johnny: package managers as part of the language? Or do you mean distro/plat specific ones
[10:25:52] <johnny> ambasta, hmm?
[10:26:04] <ambasta> Because the latter means there is no simple way for me to pull in a dep
[10:26:13] <johnny> i meant pip, poetry, and things like that
[10:26:25] <ambasta> Ah yeah, that would be good as well
[10:26:40] <johnny> i prefer the pdm approach tho..
[10:26:44] <johnny> for python that i
[10:26:45] <Raziel> ambasta, there's already platform specific woes all over. there's several libraries I avoid simply because of how absolutely awful they are to build under windows. usually anything that starts with "you need mingw" is a no-go.
[10:26:46] <johnny> that is*
[10:26:50] <ambasta> Basically, something that either provides the functionality by default (via STL ot Tooling)
[10:26:57] <RandomReader> something else worth noting is many of the other languages are more like "platforms"
[10:27:04] <johnny> that's indeed true
[10:27:36] <RandomReader> (so they come with library and tooling assumptions, since people need those things for their intended use cases)
[10:27:50] *** Quits: renopt (~renopt@lisp.us.to) (Ping timeout: 260 seconds)
[10:28:25] *** Joins: renopt (~renopt@lisp.us.to)
[10:29:43] <johnny> ambasta, people talk about the memory safety, default immutability, and stuff like pattern matching when it comes to rust, but really.. the package manager is itself important enough!
[10:30:18] <ambasta> Yep, cargo/crates or godep or npm/yarn are de-facto for a reason
[10:30:21] <johnny> and the main reason i'd be using rust if i weren't forced to mess with C
[10:30:32] <johnny> ambasta, well those are more than defacto imo...
[10:30:46] <johnny> php's composer is indeed defacto
[10:31:11] <johnny> well i can't actually speak on godep, since i don't know enough about go's ecosystem
[10:31:37] <johnny> npm actually ships with node, while composer does not ship with php
[10:32:22] <ambasta> I don't know about composer, but what I am trying to signify here, is needing to use some library, doesn't require me to understand its build system
[10:32:46] *** Quits: Fairy97 (~Fairy@ti0004a400-3806.bb.online.no) (Ping timeout: 265 seconds)
[10:32:50] <ambasta> Additionally, it gives me a good repository to find common use libraries
[10:33:04] <ambasta> I understand why C++ cannot have that, but then it can't add those to STL either
[10:33:14] <ambasta> That just leaves it in a tedious state
[10:34:14] *** Joins: Fairy97 (~Fairy@ti0004a400-3806.bb.online.no)
[10:34:29] <johnny> you could try playing with conan right now o
[10:34:30] <johnny> though*
[10:34:50] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[10:35:00] <johnny> i'm just relying on meson and it's cmake usability plus a few wrap files
[10:35:29] <johnny> so far most of the libraries i've wanted to use have had cmake on the C++ side.. although i imagine that wouldn't be the case were i to use some C libs
[10:35:45] <RandomReader> I think vcpkg is growing too, although IIRC it's only 3-platform
[10:35:45] *** Quits: cm007magnum (~Rheanna@218.78.99.237) (Remote host closed the connection)
[10:36:22] <johnny> probably works on a fair amount of the bsds implicitly ...
[10:36:26] <Raziel> ambasta, I don't really agree that C++ cannot have that, per se
[10:36:28] <ambasta> I am relying on cmake myself, but meson or cmake, I need Find(), pkg_check_modules(), FetchProject etc
[10:36:41] <Raziel> it's just really hard to get the c++ "community" to really agree on anything. :p
[10:36:57] <johnny> like uhmm.. formatting
[10:37:11] <ambasta> Raziel: But why? If the solution is good enough, why not ship it
[10:37:17] <ambasta> Not like its breaking existing stuff
[10:37:28] <johnny> because people will bikeshed it to death
[10:37:51] <johnny> ambasta, the real solution for C++ seems to be.. get boost to use something.. and then evnetually it'll catch on
[10:37:57] <Raziel> there's been things considered good enough by the commitee before, that have shipped, that have been later taken out back and shot
[10:38:11] <ambasta> Which should be okay
[10:38:13] *** Joins: cm007magnum (~Rheanna@218.78.104.50)
[10:38:13] <Raziel> or, even if they've not been shot, people would shoot you for using them in certain circles
[10:38:20] <ambasta> Languages evolve over time
[10:38:25] <Raziel> not literally, hopefully, but
[10:38:59] <Raziel> it wasn't really over time. it was instant. people saw the thing, tried it for a hot few minutes, then said "it's shit" and refused to use it and added it to every bad practice list in existance
[10:39:04] <johnny> at least most of the C libs i might use do have meson support
[10:39:19] <Raziel> ...slightly exaggerating but v:
[10:39:25] <ambasta> johnny: any google project
[10:39:42] <johnny> well i can get google test and things like that at least
[10:40:01] <johnny> and if htey use cmake, it's fine anyways
[10:40:51] <johnny> i dun like cmake's fetchcontent approach at all
[10:41:03] <johnny> it should be a totally separate file with the metadata
[10:41:17] <Raziel> I don't even know how to approach findpackage on windows
[10:41:26] <Raziel> where in the balls is it even looking? and what is it looking for?!
[10:41:33] <ambasta> I ended up w/ cmake because I needed or-tools, librdkafka and mongocxx drivers
[10:41:36] <johnny> and that's why i just decided to bundle
[10:41:45] <johnny> well not literaly bundle.. but it is vendored
[10:41:57] <johnny> the only one i don't have a wrap for is Qt
[10:42:04] *** Quits: CoderCharmander (~CoderChar@2A001110022143980000005BF4519501.mobile.pool.telekom.hu) (Read error: Connection reset by peer)
[10:42:22] *** Joins: CoderCharmander (~CoderChar@2001:738:80c:5af3:85de:cd4f:21a7:17fc)
[10:42:29] <johnny> would be nice to hae a proper boost wrap, but it's also not simple :(
[10:42:31] <Raziel> there's one project I was trying to play around with that has "find_package(FFMPEG COMPONENTS avcodec avutil)" in its cmakelists
[10:42:44] <ambasta> Raziel: Well maybe, but something like asio has been use for a while now
[10:42:45] <Raziel> ffmpeg has never been a cmake project
[10:42:54] <Raziel> what am I supposed to provide and where am I supposed to put it?
[10:43:33] <johnny> i wish ffmpeg would go away :(
[10:43:46] <johnny> or they would modularize it at least
[10:43:55] <Raziel> yeah, a better/modern-er alternative would be nice
[10:44:02] <johnny> that's gstreamer isn't it?
[10:44:20] <Raziel> ambasta, so you're arguing that asio should just be part of the std? because, yes, it probably should be. lol
[10:44:37] <ambasta> Raziel: Yeah, that's how this whole discussion started
[10:44:38] <ville> it probably shouldn't
[10:44:46] <Raziel> aaaand that's what I mean. :p
[10:44:51] <ambasta> I was informed that while the TS is published, its not STL yet
[10:44:53] <Raziel> with the "community can't agree on anything"
[10:45:22] <ville> sure they can
[10:45:38] <ville> if you switch the community with committee
[10:45:54] <ville> it doesn't matter what the community thinks
[10:46:39] <Raziel> it does matter if no one using the language uses your fancy new feature or lib because everyone says it's shit, even though you (wherein you is the committee) thought it was the bee's knees
[10:47:08] <Raziel> it indicates either incompetence or extreme amounts of disconnect from the actual users of the language
[10:47:22] <ambasta> I think it just indicates self-preservation :D
[10:47:50] <johnny> the second is my impression already Raziel .. although perhaps more so about the future than the present
[10:48:39] <johnny> i don't think it's a goal of the committee to care about the future users of the language
[10:48:42] <Raziel> compared to the early 00s or so, I'd argue it's gotten better rather than worse, but it's still behind and slow
[10:49:21] <johnny> i'm only hear because i ended up helping out a project that happened to be written in C++.. i wouldn't have started it in C++
[10:49:50] <Raziel> right, and that makes sense to an extent. but, if they want C++ to still be "good" and "relevant" in the future, then they must also care about the future users.
[10:49:55] <ville> johnny: that's already false. teachability is brought up multiple times over the years in the committee
[10:50:10] <Raziel> that's definitely a good sign
[10:50:12] <johnny> "brought up"
[10:50:51] <johnny> i've seen a lot of folks talk about teachability in regards to not adding new features that would make the language easier to use
[10:51:09] <johnny> because they also can't remove anythign :)
[10:51:11] *** Quits: CoderCharmander (~CoderChar@2001:738:80c:5af3:85de:cd4f:21a7:17fc) (Ping timeout: 245 seconds)
[10:51:19] <johnny> if teachability was really a concern, then features would be CUT
[10:51:29] <johnny> or there'd be like a "epoch" feature
[10:51:40] *** Quits: cm007magnum (~Rheanna@218.78.104.50) (Remote host closed the connection)
[10:51:42] <Raziel> they can remove things, and they have. although it's been rare and very, how to put it, constipated
[10:52:00] <johnny> yeah like auto_ptr was removed
[10:52:12] *** Joins: CoderCharmander (~CoderChar@2A001110022143980000005BF4519501.mobile.pool.telekom.hu)
[10:53:06] *** Joins: cm007magnum (~Rheanna@218.78.79.129)
[10:53:12] <ambasta> I used to make fun of BufferedReader br = new BufferedReader(new InputStreamReader(System.in)); and then I am using = std::chrono::system_clock::now().time_since_epoch :D
[10:53:50] <johnny> i think the static methods of std::chrono aren't too bad
[10:54:02] <johnny> like that one in particular with retrning the object from now() is actually totally fine
[10:54:41] <ambasta> Its overly verbose, is all
[10:54:45] <johnny> i don't knwo what's wrong with that BufferedReader, i mean seems like a decent enough setup..  a regular stream reader you want buffered
[10:55:22] <ambasta> I think they added something like cin later, which is what should have been in the first place
[10:55:25] <Raziel> ambasta, ever properly initialized a std rng generator?
[10:55:32] <ambasta> Hahaha Yes
[10:55:45] <Raziel> inline std::random_device rd; inline std::seed_seq sseq{ static_cast<long unsigned int>(rd()), static_cast<long unsigned int>(std::chrono::high_resolution_clock::now().time_since_epoch().count()) }; inline std::mt19937_64 rng(sseq);
[10:55:47] <johnny> well it'd be nice if the committee considered libraries that were more like wrappers of existing apis
[10:55:48] <Raziel> beautiful. :p
[10:56:22] <johnny> like std::chrono_simple::now()  something to assume dealing with the system clock
[10:58:02] <Raziel> I don't think the verbosity itself is that big an issue in most cases, it's not like we're trying to save space on the .cpp filesize
[10:58:15] <Raziel> it becomes an issue when things are confusing or shitty to read
[10:58:20] <johnny> guess you need std::make_random_generator()
[10:58:55] <johnny> with the defaultarg of a generator that owrks best on the platform
[10:59:11] <ambasta> Yeah, which is why, common use cases
[10:59:49] <ambasta> Have the long winded forms for non-trivial scenarios, for the trivial ones, have simpler syntax, libraries etc
[11:00:00] <ambasta> Where you forgo some perf if needed to make the language more usable
[11:00:02] <johnny> teachability may have been "brough up" multiple times, but the api of both the random number generator and std::chrono both show that it's not a blocer
[11:00:21] <johnny> and until ti's a blocker, C++ will be like this
[11:01:18] <ambasta> I guess teachability is what I have an issue w/ as well
[11:01:37] <Raziel> I mean, the apis themselves do make sense. it's just a bit ugh. could definitely be improved, although I'm not sure if I could come up with improvements that make sense
[11:02:06] <Raziel> "higher-level" wrappers for ease of use could be nice, but then you'd potentially have to deal with two APIs instead.
[11:02:33] <ambasta> Well, users provide problems, the comittee should resolve them, when it looks like, the answer generally is WONTFIX
[11:03:07] <ambasta> Two APIs shoudl be fine? People use httplib/requests in python all the time, depending on what they need
[11:03:41] <Raziel> I suppose, as long as it doesn't go out of hand
[11:03:45] <johnny> heck.. why do designated initializers for structs require them to be in order of the struct definition? what's the technical reason for that?
[11:04:13] <Raziel> johnny, whaddaya mean?
[11:04:16] <ambasta> Was recently introduced to these when trying to understand boost::MPL
[11:04:29] <ville> johnny: order of initialization
[11:04:31] <ambasta> also, designated initializers are a hack :P Not a supported feature
[11:04:38] <johnny> huh?
[11:04:39] <ambasta> Raziel: https://www.cppstories.com/2021/designated-init-cpp20/
[11:04:49] <johnny> not a supported feature?
[11:05:07] <Raziel> o i c
[11:05:10] <johnny> ville, why can't compilers be smart enough to figure it out?
[11:05:40] <ambasta> johnny: Well, you shouldn't need a struct to implement it in the first place
[11:06:20] <ambasta> template <typename X, typename Y=.., typename Z=..> something; Something<X, Z=hello>
[11:06:27] <johnny> why said iwanted atemplate?
[11:06:42] <Raziel> I'm guessing it works on top of the previous list init, in which you need order for obvious reasons?
[11:07:09] <johnny> ambasta, i definitely do not want a template for a simple object
[11:08:06] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[11:08:41] <ambasta> Simple Object?
[11:08:49] <ville> http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0329r0.pdf "Evaluation and Initialization Orders"
[11:08:51] <johnny> struct Pixel {r,g,b} for example
[11:09:06] <ambasta> Oh sure, I was just giving an example
[11:09:18] <ambasta> A better example is Boost graph library
[11:09:44] <johnny> i i was writing a generic library, then sure i'd be using templates
[11:09:46] <ambasta> adj_list<vecS, vecS, directedS, graph_prop, vertex_prop, edge_prop> if you will
[11:11:01] <ambasta> Or more recently, been writing a base_n encoder for arbitrary data type
[11:11:51] <johnny> although right now i'm too busy tryin to learn win32 apis for wine stuff :(
[11:13:17] <ambasta> Ooh, you might know this. Is it possible to do what mingw does for win based libraries via a gcc and a windows library instead
[11:14:00] <ville> johnny: so there's your answer
[11:14:04] <ambasta> For example, dxvk needs mingw, would it be feasible to write a libwindows instead that dxvk could use to compile with gcc
[11:14:43] <johnny> libwindows that does what?
[11:15:05] <johnny> mingw has a gcc, so what exactly are you asking?
[11:15:22] <ambasta> I'm not sure what mingw does, but it provides headers such as windows.h
[11:15:50] <ambasta> Why does mingw fork gcc is what I am asking I think
[11:17:02] <johnny> so you're asking why things like #include "windows.h" aren't part of gcc itself?
[11:17:24] <johnny> or, that maybe #include "windows.h" could be completely outside of mingw, and thus be usable with a regular gcc?
[11:17:27] <ambasta> No, I'm asking if they can be shipped as a library, so i don't need mingw as a second compiler
[11:18:05] <ambasta> Yeah, that
[11:18:20] <johnny> i can't say i've looked into mingw enough to know, but you could easily prove it yourself by pointing a regular gcc at the headers for mingw
[11:18:39] <johnny> there's got to be a description of that somewhere
[11:18:40] <ville> ambasta: mingw is not just gcc. it's bunch of stuff on top of that
[11:18:42] <ambasta> So in dxvk, I could do somethign like find_package(windows) , target_compile(dxvk windows::windows)
[11:18:59] <johnny> but like Raziel does, i generally avoid things that depend on mingw
[11:19:24] <ville> top? in addition?
[11:19:30] <ambasta> ville: Could you please provide an example of what cannot be achived with a library based on gcc
[11:19:31] <Raziel> mingw's technical purpose is to provide more posix support and gcc on windows
[11:19:44] <ville> ambasta: i don't understand the question
[11:19:51] <Raziel> and people use it because it allows linux coders to put zero effort into adapting any of their code to a different platform
[11:19:53] <Raziel> >_>
[11:20:03] <johnny> unix coders* :)
[11:20:13] <Raziel> more or less
[11:20:32] <johnny> hmm.. what do folks do with clang in this regard i wonder.. did somebody ever build such a thing like mingw, but not gnu and not licensed like that?
[11:20:41] <ambasta> ville: well, if my objective is to say build a package like dxvk (which currently uses mingw on linux) using gcc, what does this work entail
[11:20:57] <johnny> now your'e talking about cross compiling?
[11:21:05] <johnny> the reason to use mingw on linux is to cross compile for windows
[11:21:16] <johnny> and there's no msvc available for unix
[11:21:55] <johnny> so it's basicaly saying.. here's a somewhat windowslike environment for you to build for
[11:22:38] <ambasta> I thought cross compile was to build for windows (say building an exe on linux)
[11:22:53] <ville> ambasta: the result of building dxvk needs to be in a format which windows programs understand. right? you would use the resulting library for programs that run under wine for example?
[11:23:27] <johnny> ambasta, yes. the dxvk folks use mingw to cross compile don't they?
[11:23:47] <johnny> that's how the dxvk builds work in wine
[11:24:24] <johnny> as to wehther the headers here https://github.com/jonasstrandstedt/MinGW/tree/master/MinGW/include coul be split out, the answer here is.. probably?
[11:24:52] <ambasta> I think I don't completely understand what dxvk does then
[11:25:29] <johnny> well the common case is that dxvk gets built as dlls to run under wine and proton
[11:25:37] <Raziel> dxvk is a library, no? normally a dyanmic library which overrides dx function signatures with stuff that calls vulkan equivalents instead
[11:25:40] <Raziel> basically.
[11:25:54] <johnny> and they replace existing windows dlls to map dx calls to vulkan
[11:26:10] <Raziel> ^
[11:26:27] <ville> ambasta: were you hoping to call DX functions from your linux program?
[11:26:49] <ambasta> No, I was hoping to build dxvk w/o needing mingw
[11:27:19] <johnny> well i'd like to be abe to build dxvk with msvc, but that doesn't seem feasible yet
[11:27:21] <ambasta> Basically, no-multilib system
[11:27:24] <Raziel> well dxvk makes no sense without windows stuff. specifically, directx.
[11:27:24] <Raziel> since its whole purpose is to replace directx calls with vulkan ones v:
[11:27:37] <Raziel> johnny, the feels are reals
[11:27:42] <ville> ambasta: well you seem to have some disconnect there then...
[11:27:50] <ambasta> I thought it was similar to wine
[11:28:07] <johnny> ambasta, multilib is unrelated to this (mostly, depending on what you mean by it)
[11:28:12] <ambasta> ville: Yep, I don't quite understand the wine/dxvk ecosystem (or cross compile for that matter)
[11:28:24] <ambasta> johnny: mingw won't build w/o multilib
[11:28:25] <johnny> most people refer to multilib in the context of 32bit libraries on 64bit systes
[11:28:56] <johnny> that's what i hear wheni hear multilib
[11:29:26] <johnny> does mingw have a different definition of multilib?
[11:29:40] <johnny> maybe thye mean providing the posix and windows apis
[11:29:54] *** Quits: chozorho (~chozorho@2601:146:300:c30::c72) (Quit: good night. peace and happiness to all.)
[11:30:21] <johnny> i'm way more into the linux distro side, so i almost always hear the first definition
[11:30:46] <RandomReader> ambasta - from quick skimming, the relationship is that dxvk is *for* wine, which provides a windows-ish binary environment
[11:30:55] <RandomReader> the gcc toolchain isn't capable of targeting that
[11:30:58] <ville> https://github.com/Joshua-Ashton/dxvk-native/
[11:31:08] <johnny> dxvk will run on windows and in fact somepeople use it to play old games on windows with it
[11:31:19] <johnny> i know somebody whouses to increase performance
[11:31:42] <RandomReader> (or, that, running on windows directly .. either way, that's the target binary environment)
[11:31:49] <ville> if you wish to see how arch packages it: https://aur.archlinux.org/cgit/aur.git/tree/PKGBUILD?h=libdxvk for clues how it may be built
[11:31:53] <Raziel> yeah, there's similar stuff for dx9 to dx12, for performance reasons
[11:32:27] <johnny> ambasta, that's acutally neat.. i wonder if i could use that in this unity project somehow :(
[11:32:33] <johnny> probably not.. i bet there's waay too much
[11:32:58] <johnny> another project requiring meson
[11:34:03] <johnny> who does joshua ashton work for anyways
[11:34:24] <johnny> him and tk glitch out there doing amazing work, but i have no idea who's paying them to do it
[11:34:35] <ambasta> Valve I presume
[11:35:08] <johnny> i figured it was valve it wouldn't be under his own github
[11:35:34] <ambasta> yeah, he works for valve under contracts
[11:36:02] <Raziel> why would valve contract people if they're not actually ever working on anything :thonk:
[11:36:04] <johnny> did'nt he just kinda show up out of nowhere doing amazing stuff and then boom?
[11:36:27] *** Quits: NiKaN (sid385034@helmsley.irccloud.com) (Ping timeout: 264 seconds)
[11:36:31] <ambasta> He did, and then valve kinda started paying him for doing his thing
[11:37:10] <johnny> windres = 'x86_64-w64-mingw32-windres'  this is certainly something gcc would never add
[11:37:40] <ville> ambasta: anyways there're two use cases for "dxvk". one where you use it under wine and that's when you use a toolchain that can produce "windows code". two where you use it under linux and use the regular toolchain
[11:38:09] <johnny> ambasta, i wanted you to clarify what you meant by multilib though though
[11:38:31] <ambasta> ville: Yeah, I think what you mentioed before helped.. until now .. I thought dxvk was something in wine that hijacked dll calls and converted that to vulkan
[11:38:32] <Raziel> ville, why would a usecase exist for using dxvk under linux, when any binaries that would use dx can't be ran under linux?
[11:38:37] <ambasta> Except this happens in the windows dll itself
[11:38:38] <Raziel> what am I missing there
[11:38:42] <ambasta> Not on the wine end
[11:39:01] <johnny> i do know at some point in the near future a 64bit wine will be able to run 32bit windows binaries with no 32bit libs installed on the host side
[11:39:15] <ville> ambasta: yes it is pretty much exactly that. to produce said dll you need a toolchain that is able to produce "windows code"
[11:39:30] <ville> i guess code is bad choice there. "windows binaries"
[11:39:47] <ambasta> Couldn't the same thing be done w/o needing windows binaries? i.e. wine itself emulate dx calls via vulkan
[11:39:58] <johnny> no, the dlls themselves are windows binaries
[11:40:03] *** Quits: TingPing (sid2800@helmsley.irccloud.com) (Ping timeout: 264 seconds)
[11:40:06] *** Joins: NiKaN (sid385034@helmsley.irccloud.com)
[11:40:11] <johnny> it's like ou said, it hijacks dll cals to converts them to vulkan
[11:40:27] <ville> Raziel: you may have a render engine that's already dx11 and don't want to use opengl or vulkan?
[11:40:30] <johnny> by replacing the dlls that windows code expects with ones that map to vulkan
[11:40:54] <johnny> ambasta, remember the anti-chet and other concerns here.
[11:40:57] <Raziel> ville, so... you'd frankenstein dxvk into it and build a linux binary, somehow?
[11:41:08] <Raziel> I suppose that could work v:
[11:41:16] <ville> Raziel: you would use the dxvk-native from above
[11:41:36] <ambasta> dxvk native is one of the easier ways for windows devs to port to linux
[11:41:39] *** Quits: cm007magnum (~Rheanna@218.78.79.129) (Remote host closed the connection)
[11:41:47] <johnny> ambasta, most dlls on wine these days are proper windows dlls. they are PE rather than linux style elf files
[11:42:14] <ville> Raziel: it's a regular-old elf dso. your program is regular old elf executable. get's loaded normally. no shenanigans
[11:42:17] <Raziel> I seeeee.
[11:42:27] *** Quits: psb_ (sid500598@ilkley.irccloud.com) (Ping timeout: 264 seconds)
[11:42:40] *** Joins: TingPing (sid2800@id-2800.helmsley.irccloud.com)
[11:42:44] <ambasta> johnny: on the multilib front, ignore.. I think I was just as confused there
[11:42:46] <Raziel> Somehow, I'd rather just use a crossplatform renderer in the first place, but I suppose if you already have it all there it's better than nothing
[11:44:10] *** Joins: cm007magnum (~Rheanna@218.78.109.69)
[11:44:15] *** Quits: nightstrike (uid487@id-487.uxbridge.irccloud.com) (Ping timeout: 264 seconds)
[11:44:26] *** Quits: cm007magnum (~Rheanna@218.78.109.69) (Remote host closed the connection)
[11:44:43] *** Joins: nightstrike (uid487@id-487.uxbridge.irccloud.com)
[11:44:54] <ville> Raziel: learning a new rendering api is not also something you do very quickly to a level where you can get good performance out of it
[11:45:00] *** Joins: cm007magnum (~Rheanna@218.78.67.149)
[11:45:26] <johnny> it sure does seem easier to write dx than pure vulkan from my untrained eye anwyays...
[11:45:28] <ambasta> ville: So wine used to translate DX calls to opengl, while DXVK converts DX to Vk, the former happens in a linux application, the latter in a windows binary
[11:45:35] <ambasta> Is that understanding correct?
[11:45:35] *** Joins: psb_ (sid500598@ilkley.irccloud.com)
[11:46:30] <Raziel> ville, oh, yes, not implying that at all
[11:46:48] <Raziel> then again, direct translation of calls won't necessarily get good performance either.
[11:46:58] <Raziel> otherwise people would just replace-all the damn calls >_>
[11:48:04] <ville> ambasta: i've not looked at how wine does its business in this regard. presumably the dx->opengl part is implemented similarly to what dxvk does. a dll that translates to "native" calls
[11:48:05] <johnny> omg. https://froggi.es/website/site/
[11:48:19] <Raziel> actually, that is a good point though. why is there no static equivalent to dxvk, which just rewrites the code, instead of doing translation on runtime
[11:48:28] <ambasta> But wine3d did not depend on mingw
[11:48:46] <ambasta> s/wine3d/wined3d
[11:49:00] <ambasta> Raziel: That I guess is what I wanted
[11:49:08] <ambasta> Again, still trying to understand how all of this works
[11:49:09] <Raziel> johnny, yes, they really do like shirts
[11:49:12] <johnny> Raziel, i don't know if there is or isn't, but it's not like it'd be as popular
[11:49:21] *** Joins: Haohmaru (~Haohmaru@195.24.53.110)
[11:49:56] <johnny> Raziel, well i just thought it was silly to see that 90s style page brought back as an image and used on josh's page (the same josh who did this dxvk stuff)
[11:50:13] <Raziel> johnny, yeah, I saw that was linked on his github too :p
[11:50:40] <johnny> ambasta, wine3d? do you mean d3d?
[11:50:41] *** Joins: interop_madness (~interop_m@user/interop-madness/x-0950004)
[11:50:59] <johnny> you know that it will in fact require mingw soonish right?
[11:51:01] <ambasta> Yeah, corrected above
[11:51:09] <johnny> well the windows half of it
[11:51:13] <ambasta> I did not know that :/
[11:51:46] <johnny> ambasta, the main effort going on in wine is to split it into 2 pieces, the unix side and the windows side.
[11:52:31] <johnny> wine recently started requring Faudio and other libraries to be built as real PE dlls and thus require something that will compile to PE dlls
[11:53:00] <johnny> and since there's no msvc on unix, mingw is your only choice
[11:54:23] <ambasta> So apparent, wine is already doing what I wanted, which is this https://www.winehq.org/pipermail/wine-devel/2019-January/138023.html
[11:57:25] <johnny> ambasta, they really want a) folks to be able to run 32bit win32 binaries on arm (especially now with the apple m1 stuff) b) folks to be able run 32bit applications without 32bit libaries on the host side on regular linux distros
[11:58:02] <johnny> and that's not gonna be able to happne until all of wine use real PE executables on the windows side
[11:58:05] <ambasta> Also the PE level changes are post wine 6.22?
[11:58:14] <johnny> PE level?
[11:58:26] <ambasta> Building faudio as PE dll
[11:58:34] <johnny> that was in wine 6.21 wasn't it?
[11:58:55] <johnny> or did they just import the source in preparation? i can't remember
[11:58:59] <ambasta> Well, can definitely build 6.22 w/o mingw
[11:59:55] <johnny> i'll have to read the configure.ac to be sure
[12:00:13] *** Joins: andreasbuhr (~quassel@p549db26c.dip0.t-ipconnect.de)
[12:00:32] <johnny> oh it's because of winegcc of course.. sorry
[12:00:51] <johnny> winegcc provides a mingw compatible compiler
[12:01:02] <johnny> i totally forgot about that
[12:02:26] <johnny> i still think you'll be ending up with mingw eventually tho
[12:02:46] <ambasta> winegcc must have shipped as part of wine itself
[12:02:54] <johnny> it is
[12:03:10] <ambasta> Hmm, might try building dxvk w/ winegcc then :D
[12:03:11] <johnny> it's been part of wine for almost as long as winelib
[12:03:56] <johnny> ambasta, if winegcc was a reasonable choice, wouldn't dxvk already be using it?
[12:04:21] <ambasta> I don't think I'll get it to work, but at least want to understand this ecosystem better
[12:05:30] <johnny> well first you should probably understand the differences between elf and pe , an hten also the differences in the available C libraires
[12:05:52] <johnny> like glibc vs the ms c runtime or whatever they call it
[12:06:23] <ambasta> Well, yes.. but easier to understand w/ handson vs reading in general
[12:06:23] <johnny> if the ms c runtime (or whatever it is) was open source under a reasonable license, then i bet most of mingw wouldn't exist
[12:07:15] *** Quits: andreasbuhr (~quassel@p549db26c.dip0.t-ipconnect.de) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[12:12:14] <johnny> i know way more about the linux side than the windows side (which is part of my problem atm)
[12:13:00] *** Quits: pulse (~pulse@user/pulse) (Quit: Join a tavern of elvish rogues at https://indiedevs.net/)
[12:15:51] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Ping timeout: 276 seconds)
[12:16:39] *** Joins: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it)
[12:18:50] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[12:25:29] <barix> it's not just the CRT, it's also the compiler and related tools (e.g. make). you can give a posix Makefile for a portable program to mingw make, and it will build. it will probably not build with microsoft's make.
[12:25:57] *** Joins: pulse (~pulse@user/pulse)
[12:26:34] *** Quits: kuler (~kulernil@gateway/tor-sasl/kuler) (Remote host closed the connection)
[12:26:35] *** Joins: smallvil_ (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[12:28:16] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Ping timeout: 245 seconds)
[12:31:19] *** Joins: uzer1 (~uzer@dsl-trebng11-54f912-114.dhcp.inet.fi)
[12:31:36] *** Quits: cm007magnum (~Rheanna@218.78.67.149) (Remote host closed the connection)
[12:32:53] *** Joins: cm007magnum (~Rheanna@218.78.99.237)
[12:34:04] *** Joins: robod34 (Username@79.113.195.239)
[12:34:06] *** Quits: smallvil_ (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Remote host closed the connection)
[12:37:47] *** Joins: DSpider (DSpider@2a02:2f00:1ff:ffff::646c:660a)
[12:37:47] *** Quits: DSpider (DSpider@2a02:2f00:1ff:ffff::646c:660a) (Client Quit)
[12:38:38] <LordKalma> https://i.gyazo.com/46914d76950e9826df2bcadf01a82785.png
[12:38:46] <LordKalma> the web ecosystem is... amazing (bootstrap's slack)
[12:39:17] *** Joins: lpapp (~lpapp@ec2-15-161-137-233.eu-south-1.compute.amazonaws.com)
[12:40:10] <lpapp> Alipha: exposing function pointers from a library will need the dllexport/import in the header?
[12:44:27] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Ping timeout: 276 seconds)
[12:46:07] <cbreak> dll export / import is about symbol visibility
[12:46:15] <cbreak> it doesn't affect pointers at all
[12:46:51] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[12:46:57] *** Quits: Guest37__ (~textual@124.168.255.30) (Quit: My MacBook Air has gone to sleep. ZZZzzzâ¦)
[12:47:05] <Haohmaru> is he exposing the pointers as symbols?
[12:47:07] <barix> LordKalma: i will never understand why public communities use slack, it combines the proprietaryness of discord with the usability of irc
[12:47:25] <lpapp> cbreak: not my question
[12:48:20] *** Quits: givemeyourpies (givemeyour@c-66-235-2-202.sea.wa.customer.broadstripe.net) (Quit: Going offline, see ya! (www.adiirc.com))
[12:49:22] *** Quits: jehelset (~jeh@ti0005q162-7332.bb.online.no) (Remote host closed the connection)
[12:49:29] *** Quits: CoderCharmander (~CoderChar@2A001110022143980000005BF4519501.mobile.pool.telekom.hu) (Read error: Connection reset by peer)
[12:49:50] *** Joins: CoderCharmander (~CoderChar@2001:738:80c:57fb:85de:cd4f:21a7:17fc)
[12:53:01] <ville> lpapp: i don't understand your question
[12:53:34] <Haohmaru> maybe he doesn't, as well ;P~
[12:53:34] <ville> lpapp: testcase code always goes a long way
[12:54:00] <lpapp> ville: I thought that was pretty clear... the question was whether dllexport/import has to be in the header.
[12:54:11] <ville> lpapp: on what exactly
[12:54:23] <lpapp> on everything
[12:54:50] <lpapp> I gave an example, but it is a generic question
[12:55:18] <ville> lpapp: the problem is that when you translated your code into english sentences you introduced uncertaintity to the readers. we don't have all the context
[12:55:57] <Haohmaru> so it smells like the current answer is "it depends."
[12:56:11] <ville> lpapp: what did you mean by "function pointer"? do you have a global variable that is of a type pointer-to-function?
[12:56:15] *** Quits: psb_ (sid500598@ilkley.irccloud.com) (Ping timeout: 264 seconds)
[12:56:32] <lpapp> yes, how else would you interpret that out of curiosity?
[12:57:02] *** Joins: jehelset (~jeh@ti0005q162-7332.bb.online.no)
[12:57:19] <ville> lpapp: the functions themselves that you then load with dlsym-like fashion, which result is the "function pointer"
[12:57:43] *** Joins: psb_ (sid500598@id-500598.ilkley.irccloud.com)
[12:58:04] <LordKalma> Yeha, I mean, I don't know why you'd have function pointer globals in a library
[12:58:08] <LordKalma> I'm as puzzled as the others
[12:58:16] *** Quits: CoderCharmander (~CoderChar@2001:738:80c:57fb:85de:cd4f:21a7:17fc) (Ping timeout: 245 seconds)
[12:59:02] *** Joins: CoderCharmander (~CoderChar@2A001110022143980000005BF4519501.mobile.pool.telekom.hu)
[12:59:37] <LordKalma> the thing is, since we don't exactly understand what you mean, it's easy to think - and I at least do - that maybe you're not asking what you really mean
[12:59:42] <LordKalma> thus let code speak for itself
[12:59:42] <lpapp> This answer seems to suggest that dllexport/import needs to be in both: https://coderedirect.com/questions/525222/exporting-global-variables-from-dll for variables
[12:59:57] <lpapp> with extern in the header.
[13:00:09] <cbreak> lpapp: if you expose function pointers directly, you don't need to deal with exported symbols
[13:00:27] <lpapp> cbreak: what do you mean directly?
[13:00:47] <cbreak> if your library gives function pointers to the host application via some plugin API for example
[13:01:01] <lpapp> function pointer is the plugin api
[13:01:05] <lpapp> so not sure what you mean
[13:01:42] <cbreak> let's imagine there's some plugin API in which you get to call setCallback(FP)
[13:01:59] <lpapp> that is no different to fp = myfp;
[13:02:02] <cbreak> you can pass function pointers there without regard for any symbols involved
[13:02:05] <lpapp> in terms of symbol visiblity
[13:02:11] <lpapp> not really
[13:02:24] <ville> lpapp: making a symbol visible from your dll doesn't depend on its pointer-to-function-ness
[13:02:24] <lpapp> of course, you must export setCallback
[13:02:28] <cbreak> those function pointers can easily point to functions that don't even have symbols
[13:02:37] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[13:02:40] <cbreak> lpapp: yeah, but that's not the question
[13:02:50] <lpapp> well, setCallback is not the question
[13:02:50] <cbreak> setCallback would be part of the host application's API
[13:02:57] <lpapp> that is a different topic
[13:03:20] <cbreak> the point is as I said above: function pointers are independent from symbols
[13:03:37] <ville> cbreak: not sure that translates well
[13:03:44] <lpapp> The application would have no visibility to the function pointer if it was not exposed.
[13:03:50] <LordKalma> they can be a syumbol or not be a symbol
[13:04:06] <lpapp> therefore, it has to be exposed
[13:04:08] <cbreak> no
[13:04:12] <lpapp> my question was the best way
[13:04:13] <cbreak> function pointers are values
[13:04:23] <cbreak> they can be given out via means different to a variable
[13:04:24] <lpapp> how would you use an unexported and unimported symbol from a dll?
[13:04:27] <Haohmaru> schroedinger's pointer
[13:04:34] <cbreak> lpapp: I gave you an example
[13:04:39] <lpapp> that is not an example
[13:04:41] <cbreak> via some registration function
[13:04:42] <LordKalma> and extern values must be exported, cbreak
[13:04:51] <lpapp> that is a difference scenario where you have a setCallback, which anyway would need to be exported and imported
[13:05:01] <lpapp> and in any case, we do not have that, and do not want to have that.
[13:05:01] <LordKalma> and cbreak you're thinking like app plugins, and I think we're talking about library development
[13:05:03] <cbreak> there are other options: via a custom symbol resolution API
[13:05:25] <cbreak> LordKalma: for library development you'd usually not use function pointers but functions though
[13:05:36] <LordKalma> yes
[13:05:43] <LordKalma> I don't understand the use case either, as I said
[13:05:46] <LordKalma> but hey
[13:05:47] <LordKalma> it's there
[13:06:08] <lpapp> cbreak: it is ok to say that you do not know how to expose a function pointer if you do not know :)
[13:06:16] <LordKalma> I mean, i've seen libraries with like `extern char mylib_version[];`
[13:06:19] <ville> cbreak: for opengl or vulkan you may possibly provide the pointer-to-function symbols though, as you're supposed to load them at runtime anyways.
[13:06:21] <lpapp> but there is no point in discussing a different topic for myself.
[13:06:40] <LordKalma> but with function pointers never saw it around I think, personally
[13:06:43] <LordKalma> but I guess you could
[13:07:16] <LordKalma> ville, well, for runtime loading of libraries, I've wrote code like this: https://gist.github.com/ruilvo/904006faf16cab656a4344e291b312c1
[13:07:18] <lpapp> "you would usually not use function pointers, but functions though" is of course personal taste.
[13:07:21] <LordKalma> well, not like this, that
[13:07:30] <lpapp> (not answering the question though :) )
[13:07:58] <LordKalma> https://gist.github.com/ruilvo/904006faf16cab656a4344e291b312c1#file-soapysdr_types-hpp-L40
[13:08:02] <LordKalma> function pointers galore
[13:08:30] <LordKalma> lpapp, don't be all cocky too, we can do without friction in the channel
[13:10:32] <ville> lpapp: are you the person i helped with exporting explicit specializations?
[13:11:44] *** Joins: plastico (~plastico@neomutt/plastico)
[13:11:55] <LordKalma> probably. I remember that discussion
[13:12:14] <ville> err instantiation
[13:17:15] *** Quits: bjs (sid190364@user/bjs) (Ping timeout: 264 seconds)
[13:17:36] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Ping timeout: 276 seconds)
[13:20:01] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[13:20:09] *** Joins: bjs (sid190364@user/bjs)
[13:21:43] *** Quits: cm007magnum (~Rheanna@218.78.99.237) (Remote host closed the connection)
[13:23:25] *** Joins: cm007magnum (~Rheanna@101.89.150.168)
[13:26:09] <lpapp> ville: yes
[13:26:40] <lpapp> so, this is what I am trying to do in the app: void foo() {}; foo::fp = foo;
[13:27:15] <lpapp> in the library, header: namespace foo { API extern void (*fp)(); }
[13:27:35] <lpapp> in the library, source: namespace foo { API void (*fp)(); }
[13:28:29] <lpapp> and I am getting: error C2373: 'foo::fp': redefinition; different type modifiers
[13:28:36] <LordKalma> in the library, source: namespace foo { API void (*fp)() = /* SOMETHING, I hope */ ; }
[13:28:42] <lpapp> note: see declaration of 'foo::fp'
[13:28:54] <cbreak> lpapp: ?
[13:28:54] <lpapp> it seems that it is not trying to use the exported symbol.
[13:29:01] <lpapp> cbreak: ?
[13:29:02] <cbreak> lpapp: I gave you two examples
[13:29:05] <cbreak> read them
[13:29:21] <lpapp> no, you did not give any examples for a function pointer from what I see.
[13:29:23] <cbreak> call a function and give the function pointers to the host
[13:29:29] <lpapp> You gave an example with an *extra* function, which is not what we want.
[13:29:35] <cbreak> or return the function pointers from a query function
[13:29:46] <lpapp> this is hijacking.
[13:29:47] <cbreak> both are options to provide function pointers without symbols
[13:29:57] <lpapp> but I *want* to provide a function pointer symbol
[13:30:04] <cbreak> if you want to provide function pointers without symbols, it's easily possible this way
[13:30:11] <lpapp> but I do not!
[13:30:13] <cbreak> well, if you want to do it, what's the problem?
[13:30:17] <cbreak> just do it then
[13:30:57] <lpapp> I literally gave the error message a few lines above... maybe, you need a coffee or something that keeps you awake.
[13:31:04] <cbreak> not really
[13:32:32] <cbreak> ville: OpenGL was what I was thinking of with the "alternate pointer lookup function"
[13:32:39] *** Joins: PJBoy (~PJBoy@user/pjboy)
[13:33:01] <cbreak> all those function pointers don't need to have any symbol, since they're queried from the outside
[13:33:22] <cbreak> the COM API is an other example
[13:34:25] <lpapp> it would be a bad idea to have 6 extra functions just to get access to the pointers
[13:34:29] <lpapp> or 12 extra
[13:34:35] <cbreak> maybe.
[13:34:36] <lpapp> let alone even more function pointers.
[13:34:39] <lpapp> definitely :)
[13:34:48] <cbreak> it's sometimes useful
[13:34:56] *** Quits: manuels (~manuel@80.211.205.88) (Quit: The Lounge - https://thelounge.chat)
[13:34:58] <lpapp> cargo cult programming
[13:35:04] <cbreak> no
[13:35:08] *** Joins: manuels (~manuel@80.211.205.88)
[13:35:23] <cbreak> it's for runtime dynamic plugin APIs with C APIs
[13:36:33] <lpapp> function pointers will be just fine
[13:36:40] <lpapp> they do not need extra functions just for the sake of having functions
[13:37:03] *** Quits: paule32 (~paule32@user/paule32) (Ping timeout: 264 seconds)
[13:37:08] <cbreak> it's more for the sake of not having public symbols
[13:37:20] <lpapp> but functions *are* public symbols that the dll exports
[13:37:26] <cbreak> not really
[13:37:39] <cbreak> they can be, but they don't have to be
[13:38:17] <lpapp> I am sorry, but you cannot use unexported ("non-public") functions.
[13:38:23] <cbreak> sure you can
[13:38:24] <lpapp> as the consumers of the dll
[13:38:27] <lpapp> this is winapi 101
[13:38:28] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[13:38:35] <cbreak> if you get a function pointer to them in some other way
[13:38:36] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[13:38:36] *** ChanServ sets mode: +v npaperbot
[13:38:51] <cbreak> that's the whole point of function pointers: you can use them to call functions without knowint their name
[13:38:59] <lpapp> yes, you can use the dlsym mechanism, but we are not talking about that here.
[13:39:02] <lpapp> and it is pretty horrid, too.
[13:39:14] <cbreak> COM has ways to get function pointers
[13:39:19] <cbreak> OpenGL has them
[13:39:24] <cbreak> many other APIs have them too
[13:39:43] <cbreak> if you chose to provide symbols to your function then that's your _choice_
[13:39:49] <cbreak> you're not forced to do it
[13:39:51] <lpapp> in any case, even with the dlsym mechanism, setCallback would add *nothing* to the equation
[13:40:03] <lpapp> you could equally just dlsym the function pointer directly without any further hodge-podge.
[13:40:53] <lpapp> in any case, this is not what I came here for to discuss :)
[13:41:02] <lpapp> I am trying to understand why I cannot export the function pointer.
[13:42:22] <malloy> hello, when i copy file via ifstream and >>, the new file has only oneline, why ?
[13:43:42] <malloy> https://paste.rs/9YY
[13:44:12] <lpapp> cbreak: do you have something to add to the actual issue, too?
[13:44:21] <lpapp> 10:58 < lpapp> and I am getting: error C2373: 'foo::fp': redefinition; different type modifiers
[13:44:32] <lpapp> it seems to recognise that it was defined, but it is trying to redine rather than using it.
[13:48:23] <PJBoy> malloy, operator>> ignores whitespace
[13:48:38] <PJBoy> by default
[13:49:35] <PJBoy> you can use std::noskipws to stop this, but since you're working with binary files, you most likely don't want to be using operator<< and operator>> at all
[13:49:45] <PJBoy> would recommend .read and .write
[13:50:49] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:5cca:96d9:7234:6761)
[13:52:04] <malloy> PJBoy:  i see
[14:06:14] <lpapp> ville: testbed you asked for, https://paste.ofcode.org/P3xQG6sszJvNR5E3eTJ8Hz
[14:06:38] <lpapp> ville: main.obj : error LNK2001: unresolved external symbol "void (__cdecl* foo::fp)(void)" (?fp@foo@@3P6AXXZEA)
[14:06:47] *** Joins: smallvil_ (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[14:08:11] <cbreak> lpapp: https://gcc.godbolt.org/z/h61bMT1ab ?
[14:09:37] <lpapp> cbreak: ?
[14:09:52] <cbreak> target_compile_definitions(lib PUBLIC DSO_BUILD=1) should be private I think
[14:09:59] *** Quits: CoderCharmander (~CoderChar@2A001110022143980000005BF4519501.mobile.pool.telekom.hu) (Read error: Connection reset by peer)
[14:09:59] <cbreak> after all, users don't want to set it to 1
[14:10:12] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Ping timeout: 268 seconds)
[14:10:17] <cbreak> lpapp: no redefinition error
[14:10:19] *** Joins: CoderCharmander (~CoderChar@gw.vaci-mk.sulinet.hu)
[14:10:26] <lpapp> cbreak: because you do not have an app consuming the lib?
[14:10:31] <cbreak> you must have done something different to get a redefinition error there
[14:10:35] <cbreak> possibly
[14:10:40] <lpapp> no, you have done something different
[14:10:48] <lpapp> you only took the lib part and export, but not the app and import.
[14:10:54] <lpapp> 11:36 < lpapp> ville: main.obj : error LNK2001: unresolved external symbol "void (__cdecl* foo::fp)(void)" (?fp@foo@@3P6AXXZEA)
[14:11:02] <lpapp> as you can see, main.obj, this happens in the app, not the library.
[14:11:09] <lpapp> so, I got no error with the library, but the app.
[14:11:14] <LordKalma> !rq
[14:11:14] <nolyc> LordKalma: <Juliu> Why the fuck does anyone need types? When you write x.foo(), simply execute foo, no matter what the fuck x is
[14:11:36] *** Quits: smallvil_ (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Read error: Connection reset by peer)
[14:11:37] *** Quits: cm007magnum (~Rheanna@101.89.150.168) (Remote host closed the connection)
[14:12:09] *** Joins: Guest37__ (~textual@124.168.255.30)
[14:12:23] <lpapp> cbreak: if you try to build the app, I assume you will see the same error.
[14:12:53] <cbreak> https://gcc.godbolt.org/z/68adfoPf4, also no redefinition error
[14:13:03] <lpapp> cbreak: regarding PRIVATE, it does not matter for a testbed, does it
[14:13:07] <lpapp> it is not a product to ship
[14:13:08] <cbreak> it does
[14:13:22] <cbreak> lpapp: if it's public, that definition will be given to users of the library too
[14:13:34] <cbreak> for example, the program you link the library to will inherit the definition
[14:13:41] *** Joins: cm007magnum (~Rheanna@218.78.99.237)
[14:14:07] *** Joins: paul424 (~tom@ip-5-172-236-218.multi.internet.cyfrowypolsat.pl)
[14:14:13] <cbreak> so while building the main application, your header will try to export instead of import the symbol
[14:14:21] <lpapp> ?
[14:14:29] <lpapp> no, I have a macro to manage dllexport/import.
[14:14:36] <cbreak> yes...
[14:14:39] <cbreak> you do target_link_libraries(main PRIVATE lib)
[14:14:44] <cbreak> so you link "lib" to main
[14:14:51] <cbreak> you have target_compile_definitions(lib PUBLIC DSO_BUILD=1)
[14:15:01] <cbreak> so lib exports a public definition DSO_BUILD
[14:15:10] <cbreak> that means that while building the library, that thing will be defined
[14:15:18] <cbreak> and WHILE USING the library it will ALSO be defined
[14:15:28] <lpapp> do you mean app?
[14:15:43] <cbreak> I copy & pasted from your pastebin
[14:16:03] <lpapp> no
[14:16:06] <lpapp> 11:44 < cbreak> and WHILE USING the library it will ALSO be defined
[14:16:09] <lpapp> here, did you mean app?
[14:16:45] <cbreak> no, I mean "while using the library like this: target_link_libraries(main PRIVATE lib)"
[14:16:47] <lpapp> cbreak: did you mean target_compile_definitions(lib PRIVATE DSO_BUILD=1)?
[14:16:50] <cbreak> linking to the library
[14:16:57] <cbreak> yes
[14:17:01] <cbreak> that'd avoid this issue
[14:17:57] <lpapp> yes, looks like it.
[14:18:08] <lpapp> but still, did you use the wrong word here?
[14:18:13] <lpapp> 11:44 < cbreak> and WHILE USING the library it will ALSO be defined
[14:18:25] <cbreak> no
[14:18:28] <lpapp> ah, using
[14:18:31] <lpapp> not building
[14:18:40] <lpapp> so, cmake screwed it up, thanks.
[14:18:41] <cbreak> it's defined for both if you use PUBLIC
[14:18:45] <lpapp> odd
[14:18:50] <cbreak> it's defined only for yourself if you use PRIVATE
[14:18:58] <cbreak> and it's defined only for users if you use INTERFACE
[14:19:12] <cbreak> I think that's one of the places where cmake is actually reasonable
[14:19:56] <lpapp> the problem with is that the app needs to be aware of how the library is built
[14:20:04] <lpapp> not really decoupled.
[14:22:34] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:4d7f:75e3:d6c:7d06)
[14:22:51] *** Quits: CoderCharmander (~CoderChar@gw.vaci-mk.sulinet.hu) (Ping timeout: 245 seconds)
[14:23:12] <cbreak> no?
[14:23:25] *** Joins: CoderCharmander (~CoderChar@2A001110022143980000005BF4519501.mobile.pool.telekom.hu)
[14:23:45] <cbreak> don't see what makes you come to this conclusion
[14:24:18] <lpapp> well, simple: if the library is built in this way with PUBLIC, the app would need to know to override that with 0
[14:24:53] <cbreak> no. that just means that who ever set up the library WANTS this definition to be used at link time
[14:25:15] <cbreak> you obviously would only use PUBLIC for definitions that are meant to be public
[14:25:57] <cbreak> for example things like MYLIB_USE_DEPENDENCY_X, MYLIB_MAX_PATH_LENGTH or similar things, that must be defined in the same way when building and using
[14:26:24] <cbreak> for your definition, which you only want to be defined while building, but not while using, you would use PRIVATE
[14:27:04] <lpapp> I do not think there should be a public for this
[14:27:15] *** Quits: uzer1 (~uzer@dsl-trebng11-54f912-114.dhcp.inet.fi) (Quit: WeeChat 3.3)
[14:27:17] <lpapp> if something is hard-coded to one value, it should be done in the code so.
[14:27:53] <cbreak> it's not hard-coded
[14:28:00] <cbreak> it's configurable via definitions
[14:28:01] <lpapp> that is the issue
[14:28:07] <lpapp> suddenly, the lib and the app are coupled.
[14:28:10] *** Joins: uzer1 (~uzer@dsl-trebng11-54f912-114.dhcp.inet.fi)
[14:28:16] <cbreak> they are obviously meant to be coupled
[14:28:20] <cbreak> one links to the other...
[14:28:26] <lpapp> not in this way.
[14:28:34] <cbreak> and if a library is compiled with feature X enabled, then users need to know about it
[14:28:40] <cbreak> if a library is compiled without it, then too
[14:28:59] <cbreak> for example, I recently made a library that does image processing, on float pixel by default
[14:29:09] <lpapp> In my opinion, the default compilation condition should be done in the code, not outside.
[14:29:14] <cbreak> but if enabled when compiling the library, I expose additional functions that support half
[14:29:31] <cbreak> this obviously requires macros to be controlled
[14:29:49] <cbreak> and the macros are controlled from cmake, since it is via cmake that the library is compiled
[14:30:14] <cbreak> if I enable the feature of "half support" in the library, this, among other things, defines a macro
[14:30:31] <cbreak> this macro must be defined when building the library, to enable the parts containing half support
[14:30:35] <LordKalma> ah I remember, lpapp is the person against build systems configuring stuff
[14:30:39] <cbreak> they also need to be defined when using the library
[14:31:03] <cbreak> because, obviously, the header contains function declarations for half support, which must be hidden when the feature is not enabled
[14:31:09] <cbreak> lpapp: as you see, there's no way around this
[14:31:14] <LordKalma> cbreak, lpapp was against https://cmake.org/cmake/help/latest/module/GenerateExportHeader.html iirc
[14:31:16] <LordKalma> so yeah...
[14:31:32] <cbreak> LordKalma: well, that's not really needed here
[14:31:42] <LordKalma> but you get the point
[14:31:44] <cbreak> all the definitions become part of the CMake exported target
[14:31:48] <cbreak> it's much more elegant :)
[14:33:18] <LordKalma> https://github.com/ruilvo/aether_dsp/blob/master/aether_dsp/CMakeLists.txt
[14:33:21] <LordKalma> this is pretty elegant
[14:52:37] <PJBoy> wow the eclipse marketplace is down
[14:52:51] <Haohmaru> the what
[14:53:09] <Haohmaru> the IDE has a "marketplace" ?
[14:53:14] <PJBoy> the place from where you install extensions
[14:53:39] <PJBoy> I wanted this one https://marketplace.eclipse.org/content/cmake4eclipse
[14:54:50] <ville> every piece of software now aspires to be assist people into breaking onto your machines
[14:55:15] <PJBoy> oh it's not that bad
[14:55:39] <Haohmaru> <innocent_telemetry.bin>
[14:56:04] <PJBoy> it's more like pypi.org
[14:56:10] <PJBoy> but for eclipse instead of python
[14:57:06] <Haohmaru> snek
[14:57:21] <cbreak> PJBoy: so... unsigned foreign code everyone can "contribute" to? :)
[14:57:39] <PJBoy> ...yes :(
[14:57:47] <Haohmaru> sounds wonderful
[14:57:48] <LordKalma> if we're going to be paranoid about all software and extensions
[14:57:50] <LordKalma> we're fucked
[14:57:58] <LordKalma> let's all use self-made notepads
[14:58:05] <Haohmaru> we're f*cked, didn't you know?
[14:58:24] <LordKalma> !grab Haohmaru
[14:58:25] <nolyc> LordKalma: The operation succeeded.
[15:00:18] <Haohmaru> !fact
[15:00:19] <nolyc> Haohmaru: Friend declarations shall not declare partial specializations.
[15:00:52] <PJBoy> huh
[15:01:14] <PJBoy> can you have template friend declarations?
[15:01:33] *** Quits: cm007magnum (~Rheanna@218.78.99.237) (Remote host closed the connection)
[15:01:47] <Haohmaru> *shrug*
[15:01:50] <very_sneaky> the fact seems to suggest so, except where you're friending only, say, the string specialisation
[15:01:51] <PJBoy> or is it like
[15:02:08] <LordKalma> {} class foo{template<typename T> friend bananas(vector<T>);};
[15:02:08] <geordi> error: ISO C++ forbids declaration of 'bananas' with no type
[15:02:13] <PJBoy> {} struct S { friend class unique_ptr<int[]>; };
[15:02:13] <geordi>  
[15:02:13] <LordKalma> {} class foo{template<typename T> friend void bananas(vector<T>);};
[15:02:14] <geordi>  
[15:02:44] <PJBoy> { S<int[]> x; } template<typename T> struct S { friend class unique_ptr<T>; };
[15:02:45] <geordi>  
[15:03:03] <PJBoy> I swear that's a friend declaration friending a partially specialised unique_ptr
[15:03:12] *** Joins: cm007magnum (~Rheanna@218.78.94.61)
[15:03:40] <PJBoy> unless it is what LordKalma wrote isih
[15:04:59] <PJBoy> nah it needs to be a class for partial specialisation
[15:05:04] <PJBoy> :/
[15:05:43] <PJBoy> can you define a nested class with a friend decl I wonder
[15:06:04] <PJBoy> {} struct S { friend struct T {}; };
[15:06:04] <geordi> error: class definition may not be declared a friend
[15:06:11] <PJBoy> weird
[15:07:14] <LordKalma> {} struct S {template<typename T> friend struct A; };
[15:07:15] <geordi>  
[15:10:30] <PJBoy> {} struct S {template<typename T> friend struct A; template<typename T> friend struct A<T*>; };
[15:10:30] <geordi> error: 'A' is not a class template
[15:10:38] <PJBoy> ...
[15:21:42] <ville> lpapp: did you get it sorted?
[15:27:04] *** Quits: CoderCharmander (~CoderChar@2A001110022143980000005BF4519501.mobile.pool.telekom.hu) (Read error: Connection reset by peer)
[15:28:29] *** Joins: CoderCharmander (~CoderChar@gw.vaci-mk.sulinet.hu)
[15:31:35] *** Parts: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it) ()
[15:34:56] *** Quits: CoderCharmander (~CoderChar@gw.vaci-mk.sulinet.hu) (Ping timeout: 245 seconds)
[15:36:28] *** Joins: CoderCharmander (~CoderChar@2A001110022143980000005BF4519501.mobile.pool.telekom.hu)
[15:50:40] *** Quits: Cienisty (Cienisty@user/cienisty) (Quit: Error 606 | Demon not found)
[15:51:02] *** Joins: Cienisty (Cienisty@user/cienisty)
[15:51:36] *** Quits: cm007magnum (~Rheanna@218.78.94.61) (Remote host closed the connection)
[15:52:25] *** Quits: proller (~p@2a02:6b8:b081:8810::1:29) (Ping timeout: 265 seconds)
[15:52:53] <lpapp> ville: in the testbed yes, not in my project, I have been trying to understand what the difference could be :(
[15:54:26] *** Joins: cm007magnum (~Rheanna@61.171.69.141)
[15:56:14] <lpapp> cbreak: I am confused.
[15:56:53] *** Quits: meicceli (meicceli@kapsi.fi) (Ping timeout: 268 seconds)
[15:58:26] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[15:59:02] *** Joins: meicceli (meicceli@kapsi.fi)
[16:07:09] <cbreak> lpapp: did you look at the output of make VERBOSE=1?
[16:08:52] <lpapp> cbreak: we use ninja
[16:09:38] <cbreak> might work for that too
[16:10:20] <lpapp> cbreak: let me know when you know
[16:10:42] <lpapp> error: C++ requires a type specifier for all declarations
[16:10:49] <lpapp> so, I guess, it does not recognise the symbol?
[16:11:28] <lpapp> ah, it happens even with the test bed if I put foo::fp outside main
[16:11:33] <lpapp> it works ok when it is inside, odd.
[16:11:56] <lpapp> I wonder what the reason for that is.
[16:12:19] <lpapp> an exported global symbol should be possible to set up from a global space?
[16:14:07] <ville> a good start could be to look at the preprocessed output
[16:15:08] <lpapp> see my comments in the main.cpp: https://paste.ofcode.org/35T7UQhKRwuGQBQrByfM9df
[16:15:13] <lpapp> this is the testbed reproducing the issue
[16:15:19] <lpapp> even on Mac or Linux, actually.
[16:15:43] <ville> lpapp: but as you see these things are really finicky. the odds of someone who doesn't understand the problem succesfully summarizes it in irc message are pretty low
[16:17:07] <lpapp> ville: can you repro the issue on your machine with that testbed?
[16:20:19] <lpapp> surprisingly, if I wrap it into a global / static struct ctor
[16:20:26] <lpapp> to set the fp, then it compiles
[16:20:36] <lpapp> but if I try to set fp in the same "global space", it does not.
[16:20:42] <lpapp> For some reason, it needs to be wrapped around or something.
[16:20:48] <lpapp> Not sure for the reasons behind it.
[16:22:07] <ville> lpapp: not quite sure what the directory structure is supposed to be. so have to fiddle around with the cmalelists.txt
[16:22:20] <lpapp> ville: no directory structure
[16:22:25] <lpapp> all four files next to each other
[16:22:57] <lpapp> this is not ok before main: foo::fp = myfunc;
[16:23:06] <lpapp> this is ok before main: struct FpStruct { FpStruct() { foo::fp = myfunc; } };
[16:24:01] <ville> ll
[16:24:59] *** Quits: Spirit532 (~Spirit532@mm-155-53-84-93.mgts.dynamic.pppoe.byfly.by) (Killed (NickServ (GHOST command used by Spirit5328!~Spirit532@mm-71-247-122-178.mgts.dynamic.pppoe.byfly.by)))
[16:25:00] *** Joins: Spirit532 (~Spirit532@mm-71-247-122-178.mgts.dynamic.pppoe.byfly.by)
[16:27:27] <ville> x = 0; is not ok as "top-level" statement
[16:27:40] <lpapp> no?
[16:27:48] <ville> imagining that you had: extern int x; somewhere for example
[16:28:22] <lpapp> yeah?
[16:28:57] <ville> i am not sure how to continue this conversation. definition and assignment are different things.
[16:29:46] <lpapp> Do you mean like I would need extern int x; in the app?
[16:29:49] <ville> no
[16:30:13] <lpapp> I am confused because you can invoke functions fine from a dll, so why cannot you use variables the same way?
[16:30:34] <ville> just that you can't have an assignment at that scope: http://coliru.stacked-crooked.com/a/49224c5f8153f71b
[16:30:44] <ville> nothing to do with dlls or anything like that. see above
[16:31:08] <lpapp> ok, thanks.
[16:31:17] *** Quits: interop_madness (~interop_m@user/interop-madness/x-0950004) (Read error: Connection reset by peer)
[16:31:23] <lpapp> so, we need a wrapper struct if I want to initialise it this way?
[16:31:28] <ville> you can initialize things at that scope. for example: int x = 0; but initialization and assignment are different things
[16:31:42] *** Joins: interop_madness (~interop_m@user/interop-madness/x-0950004)
[16:31:42] <ville> lpapp: ...or just a function to initialize the "lib"
[16:31:43] <lpapp> strictly speaking, this is initialised in the dll
[16:31:47] <lpapp> I want to reassign that
[16:31:58] <ville> lpapp: yes and initialization and assignment are different things
[16:32:05] <Haohmaru> is he having "x = 0;" in the global scope?!
[16:32:10] <ville> yes
[16:32:15] <Haohmaru> aww
[16:32:36] <Haohmaru> that's "code" .. you can't just put code in the global scope
[16:32:41] <Haohmaru> i mean that's an "operation"
[16:32:54] <Haohmaru> assignment operator
[16:33:05] <Haohmaru> it performs a write
[16:33:11] *** Quits: paul424 (~tom@ip-5-172-236-218.multi.internet.cyfrowypolsat.pl) (Remote host closed the connection)
[16:33:12] <Haohmaru> or whatever
[16:33:36] <ville> lpapp: you've probably seen c libraries with lib_init() functions?
[16:33:44] <Haohmaru> "int x = 0;" in the global scope is okay, it's not an operation, it's a definition with initial value
[16:34:19] <Haohmaru> i mean it's probably a declaration and definition and initialization
[16:34:37] <ville> Haohmaru: all definitions are declarations
[16:35:06] <Haohmaru> you could use a RAII object in the global scope to initializa your stuff btw
[16:35:12] *** Joins: cart_man (~rynot@host-78-144-121-71.as13285.net)
[16:35:24] <Haohmaru> whether that's a good idea in your case is another story
[16:35:46] <lpapp> yeah, I already did as mention above.
[16:35:53] <lpapp> mentioned*
[16:36:03] <Haohmaru> (i didn't read everything)
[16:36:11] <cart_man> About 3 months ago I did a Mutex that locked a certain variable until the entire mutex and variable went out of scope. Although I can not recall ths specifics of it. Anybody have an example of it?
[16:36:16] <ville> there's no need to go "oop" on this. if you're just assigning some pointer-to-functions and whatno just have an init function
[16:36:20] <lpapp> okay, thanks, I am glad that it was not yet another dllexport/import issue.
[16:36:39] <lpapp> ville: I do not think that is a good idea here
[16:36:55] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[16:36:59] <lpapp> ville: I have multiple pointers to initialise, it would be a bit of overhead
[16:37:14] <ville> lpapp: and what do you think your object's ctor does?
[16:37:33] <lpapp> there is a difference between the two
[16:38:23] <Haohmaru> if the same "init code" is in a constructor of an object, or in a function(), it wouldn't make much difference except that if it was a function - they user would have a choice when to call it, while if it was in a RAII object in the global scope - not much choice
[16:39:46] <lpapp> it is not really init though
[16:39:55] <lpapp> the app does not need to override the default behaviour
[16:40:03] <lpapp> it is more like a setting than init.
[16:40:18] <lpapp> But the point I am trying to make, I guess, is that it keeps the API simpler.
[16:40:38] <lpapp> whereas with an "init" (set) method for each pointer, you would add a bit of clutter.
[16:41:19] <PJBoy> cart_man, sounds like a basic usage of std::lock_guard
[16:41:29] <ville> lpapp: you do a single init() that does whatever your object's ctor would have
[16:41:34] *** Quits: cm007magnum (~Rheanna@61.171.69.141) (Remote host closed the connection)
[16:41:49] <ville> lpapp: not a init() function per pointer-to-function
[16:42:34] *** Quits: Cienisty (Cienisty@user/cienisty) (Quit: Error 606 | Demon not found)
[16:42:34] <Haohmaru> init_all_the_things();
[16:42:54] *** Joins: Cienisty (Cienisty@user/cienisty)
[16:42:58] <lpapp> with e.g. 6 parameters? would be a bit bad api imho
[16:43:00] <lpapp> but ymmv
[16:43:03] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Remote host closed the connection)
[16:43:39] <Haohmaru> iirc when you have too much params to a function, you could put them in a struct and then you'll have just one parameter (the struct)
[16:43:48] <ville> 6 parameters is hardly anything out of the ordinary
[16:43:50] *** Joins: cm007magnum (~Rheanna@101.89.150.168)
[16:43:59] <lpapp> yeah, but if I have to have a struct, how is it better than just having a struct? :D
[16:44:07] <Haohmaru> ville could be too much on very silly "MCUs" i think
[16:45:05] <Haohmaru> i'll stfu because i don't know the details
[16:45:27] <lpapp> it is ok, thanks.
[16:46:29] <lpapp> ville: the testbed boilerplate turned out to be reusable for these visibility issues though :D
[16:47:02] <smallville7123> https://github.com/matus-chochlik/eagine-all is a MASSIVE repo ;-;
[16:47:08] <smallville7123> https://gist.github.com/mgood7123/12ac9bad3c8af4b7594f5f3a3a1e7333 what kind of awefull structure is this ;-;
[16:47:13] <smallville7123> and it is STILL cloning, i wanna see how much space this repo takes up if the clone ever finishes
[16:47:34] <smallville7123> holy crap it finished cloning
[16:49:03] <lpapp> smallville7123: have you used lfs
[16:49:43] <Haohmaru> so it says 43% C++ and almost 27% "CMake"
[16:50:15] <smallville7123> oof.    1.8G    eagine-all
[16:50:33] <Haohmaru> wtf, is this boost?
[16:51:57] * smallville7123 executes $ rm -rf eagine-all
[16:52:09] *** Joins: skapata (~Skapata@2804:14c:87b0:a6f9:74cf:f40f:4ceb:1116)
[16:52:09] *** Quits: skapata (~Skapata@2804:14c:87b0:a6f9:74cf:f40f:4ceb:1116) (Changing host)
[16:52:09] *** Joins: skapata (~Skapata@user/skapata)
[16:52:17] *** Quits: jehelset (~jeh@ti0005q162-7332.bb.online.no) (Remote host closed the connection)
[16:52:35] *** Joins: proller (~p@2a02:6b8:0:40c:16c0:39b7:4644:974)
[16:53:52] <Haohmaru> ugh, what kind of syntax is this "auto main(int argc, char** argv) -> int { ... }
[16:53:59] <PJBoy> ikr
[16:54:07] <Haohmaru> particularly the -> int part
[16:54:08] <PJBoy> but it could be worse
[16:54:10] <LordKalma> trailing return type on main is so shit
[16:54:22] <PJBoy> there could be [[maybe_unused]] on both parameters
[16:54:23] <LordKalma> smallville7123, learn to do shallow clones
[16:54:32] <LordKalma> hey! I sometimes do do that!
[16:54:34] <Haohmaru> PJBoy i do have that in one of my apps
[16:54:40] <PJBoy> fuck you both
[16:54:49] <Haohmaru> otherwise i get warnings
[16:54:54] <Haohmaru> but it's temporary
[16:55:07] <Haohmaru> but why "-> int" ?!
[16:55:08] <LordKalma> you can silence the warning by writing main(int, char**)
[16:55:12] <PJBoy> it's not too bad, but it's insanely noisy
[16:55:25] <LordKalma> Haohmaru, sometimes trailing return type is important, and necessary in TMP
[16:55:29] <PJBoy> and the "maybe" part is usually a complete lie
[16:55:32] <LordKalma> but yeah in mind is just dumb fuckery
[16:56:07] <LordKalma> if I'd have to guess I'd say someone forgot to turn this off
[16:56:07] <LordKalma> https://clang.llvm.org/extra/clang-tidy/checks/modernize-use-trailing-return-type.html
[16:56:24] <LordKalma> but someone in #include<c++> discord was saying they always use trailing return
[16:56:27] <Haohmaru> LordKalma the reason i got warnings is because i conditionally don't use the arguments and inject hard-coded arguments because i'm testing the program with a few particular input files
[16:56:38] <Haohmaru> that shall all go away afterwards
[16:57:05] <PJBoy> { f(); } #define unused maybe_unused\ void f([[unused]] int x = {}) {}
[16:57:06] <geordi>  
[16:57:08] <PJBoy> that's more like it
[16:57:37] *** Quits: bjs (sid190364@user/bjs) (Ping timeout: 250 seconds)
[16:57:38] <LordKalma> Haohmaru, I was talking about trailing return in main
[16:57:46] <LordKalma> PJBoy, Qt has Q_UNUSED(x) macro
[16:57:50] <LordKalma> guess what it does
[16:57:56] <PJBoy> (void)! cast
[16:58:04] <LordKalma> obviously
[16:58:06] <Haohmaru> it causes a 12month delay?
[16:58:14] <PJBoy> hahaha
[16:58:18] <LordKalma>  #define Q_UNUSED(x) (void)x;
[16:58:20] *** Joins: bjs (sid190364@user/bjs)
[16:58:26] <PJBoy> yeah we use UNUSED macros at work
[16:58:29] <PJBoy> and I don't get it
[16:58:56] <PJBoy> I guess it clarifies the intent a bit better
[16:58:59] <LordKalma> it's to express intent
[16:59:20] <PJBoy> but idk man, void cast isn't really used for anything else
[16:59:37] *** Joins: AmR (~AmREiSa@102.47.62.197)
[16:59:54] <LordKalma> imagine is compilers didn't trim away void casts
[16:59:54] <LordKalma> hahah
[16:59:56] <LordKalma> *if
[17:00:54] *** Joins: smallvil_ (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[17:02:39] <PJBoy> trim away?
[17:03:08] <PJBoy> like if those unused variable warnings couldn't be silenced?
[17:03:13] <LordKalma> no
[17:03:21] <LordKalma> I mean making (void)x spit out assembly
[17:03:31] <PJBoy> well
[17:03:35] <PJBoy> it will if it needs to
[17:03:41] <PJBoy> same as `x;`
[17:03:57] <PJBoy> if x is volatile, both those statements generate code
[17:03:58] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Ping timeout: 260 seconds)
[17:04:22] <LordKalma> fair enough
[17:05:01] <PJBoy> there is this idea of a "discarded value expression" in the standard
[17:05:14] *** Quits: smallvil_ (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Read error: Connection reset by peer)
[17:05:17] <PJBoy> but I honestly haven't been able to work out if it means anything
[17:05:31] <Haohmaru> yeah (void)(x); for when you wanna read a volatile and you don't need its value
[17:10:28] <Haohmaru> !fact
[17:10:29] <nolyc> Haohmaru: As described in [class.bit], a reference cannot be bound directly to a bit-field.
[17:11:14] *** Quits: z9z0b3t1_ (~z9z0b3t1c@host86-142-233-89.range86-142.btcentralplus.com) ()
[17:13:20] <LordKalma> but what if I do auto& foo = *&bitfield?
[17:13:22] <cart_man> PJBoy: That was it yea... I kept on circle googling thread_scope ...ugh
[17:13:26] *** Parts: lpapp (~lpapp@ec2-15-161-137-233.eu-south-1.compute.amazonaws.com) ()
[17:13:47] <cart_man> Anyway it is really as simple as locking  it via -> 	const std::lock_guard<std::mutex> lock(unique_ptr_ResultSet_mutex);   and then it unlocks when the scope exits?
[17:14:06] <PJBoy> yeah
[17:14:13] <PJBoy> in fact it only supports that simple usage
[17:15:40] *** Quits: CoderCharmander (~CoderChar@2A001110022143980000005BF4519501.mobile.pool.telekom.hu) (Remote host closed the connection)
[17:16:25] *** Joins: CoderCharmander (~CoderChar@2A001110022143980000005BF4519501.mobile.pool.telekom.hu)
[17:19:18] <barix> LordKalma: As described in [class.bit], the address-of operator cannot be applied to a bit field.
[17:19:30] <barix> (but const references can?)
[17:20:10] <LordKalma> auto& foo = *&(void)bitfield?
[17:25:53] *** Quits: CoderCharmander (~CoderChar@2A001110022143980000005BF4519501.mobile.pool.telekom.hu) (Read error: Connection reset by peer)
[17:26:17] *** Joins: CoderCharmander (~CoderChar@2001:738:80c:5af3:85de:cd4f:21a7:17fc)
[17:28:19] *** Quits: Kebianizao (~Kebianiza@188.127.164.127) (Read error: Connection reset by peer)
[17:28:34] *** Joins: Kebianizao (~Kebianiza@188.127.164.127)
[17:29:31] <PJBoy> const references can probably be initialised from a bitfield, yeah
[17:31:03] <PJBoy> but notably
[17:31:04] <PJBoy> { S s{}; const unsigned& t = s.x; SHOW(t); s.x = 1; cout, ""; SHOW(t); } struct S { unsigned x : 1; };
[17:31:05] <geordi> t = 0, t = 0
[17:31:12] <PJBoy> it's a fake reference
[17:31:26] <Haohmaru> { A a; const uint32_t& ref = a.bf; } struct A { uint32_t bf : 32; };
[17:31:26] <geordi> warning: 'a.A::bf' is used uninitialized
[17:31:30] <PJBoy> aka a lifetime extended temporary
[17:31:44] *** Quits: cm007magnum (~Rheanna@101.89.150.168) (Remote host closed the connection)
[17:31:50] <Haohmaru> weird warning tho
[17:32:11] <PJBoy> it's not so weird
[17:32:17] <PJBoy> you're copying a.bf, which is uninitialised
[17:32:26] *** Quits: CoderCharmander (~CoderChar@2001:738:80c:5af3:85de:cd4f:21a7:17fc) (Ping timeout: 245 seconds)
[17:32:29] <Haohmaru> copying?!
[17:32:36] <PJBoy> yeah
[17:32:53] <Haohmaru> i thought i'm merely declaring a reference
[17:33:00] *** Joins: CoderCharmander (~CoderChar@2A001110022143980000005BF4519501.mobile.pool.telekom.hu)
[17:33:08] *** Joins: cm007magnum (~Rheanna@218.78.94.61)
[17:33:18] <PJBoy> const references will make copies if you bind something non bindable
[17:33:50] <Haohmaru> oh?
[17:33:57] <PJBoy> { double x = 1.0; const int& i = x; x = 0.0; SHOW(i); }
[17:33:57] <geordi> i = 1
[17:34:10] <Haohmaru> dafuq
[17:34:19] <PJBoy> i there binds to the temporary resulting from converting x from double to int
[17:34:23] <Haohmaru> what the actual fuq
[17:34:34] *** Quits: CoderCharmander (~CoderChar@2A001110022143980000005BF4519501.mobile.pool.telekom.hu) (Read error: Connection reset by peer)
[17:34:46] <PJBoy> same thing happens when you have a function taking a const ref parameter and you pass it a temporary
[17:34:59] *** Joins: CoderCharmander (~CoderChar@2A001110022143980000005BF4519501.mobile.pool.telekom.hu)
[17:35:02] <PJBoy> which is the motivation for this fake reference stuff
[17:38:28] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[17:38:36] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[17:38:36] *** ChanServ sets mode: +v npaperbot
[17:41:39] *** Joins: reumeth (~reumeth@user/reumeth)
[17:41:51] *** Quits: CoderCharmander (~CoderChar@2A001110022143980000005BF4519501.mobile.pool.telekom.hu) (Ping timeout: 264 seconds)
[17:41:59] *** Joins: CoderCharmander (~CoderChar@2A001110013AFB2D00000047D832F201.mobile.pool.telekom.hu)
[17:46:54] *** Quits: meicceli (meicceli@kapsi.fi) (Ping timeout: 260 seconds)
[17:48:05] *** Joins: meicceli (meicceli@kapsi.fi)
[17:50:00] *** Joins: jkaye (~jkaye@c-71-205-220-154.hsd1.co.comcast.net)
[17:53:16] *** Quits: meicceli (meicceli@kapsi.fi) (Ping timeout: 245 seconds)
[17:55:12] *** Joins: meicceli (meicceli@kapsi.fi)
[17:56:31] *** Quits: CoderCharmander (~CoderChar@2A001110013AFB2D00000047D832F201.mobile.pool.telekom.hu) (Ping timeout: 268 seconds)
[17:58:25] *** Joins: z9z0b3t1c (z9z0b3t1c@gateway/vpn/protonvpn/z9z0b3t1c)
[18:05:49] *** Quits: proller (~p@2a02:6b8:0:40c:16c0:39b7:4644:974) (Ping timeout: 265 seconds)
[18:06:32] *** Quits: kaichiuchu (~kaichiuch@user/kaichiuchu) (Quit: leaving)
[18:07:44] *** Quits: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse) (Read error: Connection reset by peer)
[18:10:06] *** Quits: pulse (~pulse@user/pulse) (Quit: Join a community of pixelated gnomes at https://indiedevs.net/)
[18:17:34] *** Joins: proller (~p@2a02:6b8:0:40c:c689:27bb:56b2:4cda)
[18:19:40] *** Joins: paule32 (~paule32@user/paule32)
[18:19:49] *** Joins: jehelset (~jeh@ti0005q162-7332.bb.online.no)
[18:21:52] *** Quits: cm007magnum (~Rheanna@218.78.94.61) (Remote host closed the connection)
[18:23:19] *** Joins: cm007magnum (~Rheanna@61.171.69.141)
[18:25:55] *** Joins: CoderCharmander (~CoderChar@54032703.catv.pool.telekom.hu)
[18:35:07] *** Joins: meator (~meator@user/meator)
[18:38:02] *** Joins: pulse (~pulse@user/pulse)
[18:45:42] *** Quits: proller (~p@2a02:6b8:0:40c:c689:27bb:56b2:4cda) (Ping timeout: 260 seconds)
[18:48:27] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:4d7f:75e3:d6c:7d06) (Ping timeout: 264 seconds)
[18:50:33] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:1c81:fe4:5f02:4108)
[18:54:52] *** Joins: Simplar (~quassel@188.163.92.225)
[18:54:52] *** Quits: Simplar (~quassel@188.163.92.225) (Client Quit)
[18:56:11] *** Joins: proller (~p@2a02:6b8:0:40c:e0ca:eca5:e1f6:215a)
[18:56:57] <PJBoy> what's up with this warning flag -Wbraced-scalar-init
[18:58:07] <Haohmaru> pics or it didn't happen
[18:59:15] <PJBoy> it's like
[18:59:40] <PJBoy> size_t n_bytes() { return {data.size()}; }
[18:59:45] <PJBoy> triggers it
[18:59:58] <TinoDidriksen> As it should? That's weird code.
[19:00:33] <PJBoy> it's pretty normal to have a function with non auto return type returning a braced arg list
[19:01:36] <PJBoy> bearing in mind that data.size() isn't necessarily a size_t
[19:01:52] <PJBoy> and so the braces prevent narrowing conversion
[19:03:32] <PJBoy> point is that it doesn't look like warnable code
[19:03:39] <PJBoy> just maybe a little uncommon
[19:04:02] <PJBoy> unless I'm missing something
[19:05:50] <Haohmaru> o_O
[19:06:36] *** Quits: ville (~ville@178-75-128-81.bb.dnainternet.fi) (Ping timeout: 245 seconds)
[19:06:44] *** Quits: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao) (Remote host closed the connection)
[19:07:09] *** Joins: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao)
[19:10:20] *** Joins: AbleBacon (~AbleBacon@user/AbleBacon)
[19:11:46] *** Quits: cm007magnum (~Rheanna@61.171.69.141) (Remote host closed the connection)
[19:13:45] *** Joins: cm007magnum (~Rheanna@218.78.105.67)
[19:13:47] *** Joins: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it)
[19:17:55] *** Joins: Simplar (~quassel@188.163.92.225)
[19:18:42] *** Quits: meator (~meator@user/meator) (Quit: Leaving)
[19:18:55] <Alipha> geordi: void foo(const std::string &x) { cout << x; } int main() { foo("Hello"); } // Haohmaru, you want code like this to work, right?
[19:18:56] <geordi> Hello
[19:19:29] <Haohmaru> uhm
[19:19:33] * Haohmaru scratches head
[19:20:39] <Alipha> Haohmaru: "Hello" is not a std::string, so a temporary std::string is created for the const reference to refer to. Just like PJBoy's int/double and bitfield examples
[19:21:16] <Haohmaru> okay, i will (as usual) blame my low coffee levels
[19:27:10] *** Quits: leonardus (sid358597@tinside.irccloud.com) (Ping timeout: 268 seconds)
[19:27:56] *** Joins: leonardus (sid358597@id-358597.tinside.irccloud.com)
[19:31:33] <ezzieyguywuf> not sure if this is a google-specific question or a c++ question: in the first example here (https://abseil.io/tips/10), `std::vector<absl::string_view> v = absl::StrSplit("a,b,c", ',');`, where is the data stored that the string view's are pointing to? what is the lifetime of the data? in other words, how long is the stored `v` valid?
[19:33:26] <ezzieyguywuf> ah, https://github.com/abseil/abseil-cpp/blob/master/absl/strings/str_split.h#L423-L424
[19:33:40] <ezzieyguywuf> I'm still confused though
[19:33:51] <ezzieyguywuf> b/c in this case a literal is being passed - isn't that temporary?
[19:34:28] <PJBoy> string literals have static storage
[19:34:32] *** Quits: psb_ (sid500598@id-500598.ilkley.irccloud.com) (Ping timeout: 245 seconds)
[19:34:34] <PJBoy> they exist for the entire lifetime of the program
[19:34:39] *** Quits: TingPing (sid2800@id-2800.helmsley.irccloud.com) (Ping timeout: 264 seconds)
[19:34:39] *** Quits: Bodger1234_ (sid503511@uxbridge.irccloud.com) (Ping timeout: 264 seconds)
[19:34:40] <ezzieyguywuf> oh snap
[19:34:41] *** Quits: riksteri (riksteri@gateway/vpn/airvpn/riksteri) (Read error: Connection reset by peer)
[19:34:44] <ezzieyguywuf> I didn't know that
[19:34:47] <ezzieyguywuf> (maybe I should have)
[19:35:22] <ezzieyguywuf> if the same string literal is used again, is a second instance created, or is the first reused?
[19:35:32] <TinoDidriksen> Usually reused.
[19:35:40] <TinoDidriksen> Suffixes are also usually reused.
[19:35:46] <ezzieyguywuf> i.e. `myFunc("a,b,c"); myFuncAgain("a,b,c");`
[19:35:51] *** Quits: lhtseng (sid15322@helmsley.irccloud.com) (Ping timeout: 264 seconds)
[19:35:51] <TinoDidriksen> E.g., "foobar" and "bar" share some storage.
[19:35:51] <ezzieyguywuf> TinoDidriksen: suffixes?
[19:35:57] <ezzieyguywuf> oh snap
[19:35:57] *** Quits: cm007magnum (~Rheanna@218.78.105.67) (Remote host closed the connection)
[19:35:58] <ezzieyguywuf> that's dope af
[19:35:59] <PJBoy> unspecified, but as Tino says
[19:36:04] <TinoDidriksen> But "foobar" and "foo" can't share storage.
[19:36:12] *** Joins: riksteri (riksteri@gateway/vpn/airvpn/riksteri)
[19:36:21] <ezzieyguywuf> is this like compiler-specific optimizations?
[19:36:48] <TinoDidriksen> It's pretty common literal deduplication.
[19:37:03] *** Joins: Bodger1234_ (sid503511@id-503511.uxbridge.irccloud.com)
[19:37:04] <TinoDidriksen> I think all compilers do it, because it's so easy.
[19:37:17] <ezzieyguywuf> so if I have a TON of string literals, or very large string literals, they are going to 'bloat' the size of my binary?
[19:37:34] <PJBoy> geordi -w << ("23" == "123" + 1)
[19:37:35] <geordi> false
[19:37:36] *** Joins: lhtseng (sid15322@id-15322.helmsley.irccloud.com)
[19:37:42] <TinoDidriksen> Sure, like any embedded resource.
[19:37:47] * ezzieyguywuf nods
[19:38:00] *** Joins: cm007magnum (~Rheanna@61.171.69.141)
[19:38:02] *** Joins: psb_ (sid500598@id-500598.ilkley.irccloud.com)
[19:38:11] <ezzieyguywuf> PJBoy: what are you trying to show here?
[19:38:20] <ezzieyguywuf> well, s/trying to show/showing/
[19:38:30] *** Joins: TingPing (sid2800@id-2800.helmsley.irccloud.com)
[19:38:31] <TinoDidriksen> geordi builds in debug mode, which apparently does not deduplicate strings.
[19:38:36] <ezzieyguywuf> ah
[19:38:41] <PJBoy> it doesn't dedup suffices anyway
[19:38:48] <PJBoy> geordi -w << ("123" == "123")
[19:38:49] <geordi> true
[19:38:52] <TinoDidriksen> Right
[19:38:58] <ezzieyguywuf> so the "+ 1" is intended to...find the "next" statically store string literal?
[19:39:10] <PJBoy> so that optimisation is apparently so easy that even with all optimisations disabled, it still happens
[19:39:38] <ezzieyguywuf> hrm, I'd expect "123" == "123" to always return true, regardless of any deduplication of things
[19:39:46] <PJBoy> you'd expect wrong
[19:39:49] <ezzieyguywuf> i.e. even if both were stored in distinct memory addresses
[19:40:04] <ezzieyguywuf> PJBoy: is the comparison checking memory addresses and not the actual content?
[19:40:08] <PJBoy> "123" is just a pointer to the string, comparison compares the pointers
[19:40:10] <PJBoy> yeah
[19:40:10] <cbreak> I think the standard requires them to be stored at the same address
[19:40:11] <imMute> ezzieyguywuf: of course, that's how pointers w ork
[19:40:13] <TinoDidriksen> == won't compare contents of C strings.
[19:40:19] <ezzieyguywuf> oh snap
[19:40:22] <ezzieyguywuf> footgun
[19:40:24] <cbreak> since they're in the same TU
[19:40:40] <PJBoy> I don't see why the standard would bother specifying that
[19:40:41] <cbreak> ezzieyguywuf: if you want intuitive operators, use std::string
[19:40:46] <cbreak> "intuitive" :D
[19:40:50] <PJBoy> plus gcc warns here
[19:40:50] * ezzieyguywuf nods
[19:40:56] <PJBoy> << ("123" == "123")
[19:40:57] <ezzieyguywuf> PJBoy: ahhhh thank goodness
[19:40:57] <geordi> warning: comparison with string literal results in unspecified behavior
[19:41:02] <cbreak> PJBoy: I don't know why I remember that, so it might not be correct
[19:41:31] <PJBoy> this is where string_view literals are super awesome cool
[19:41:43] <PJBoy> << ("123"sv == "123"sv)
[19:41:44] <geordi> true
[19:42:01] <ezzieyguywuf> hrm, but the google style guidelines says don't use user-defined literals
[19:42:02] <PJBoy> that's well defined and shouldn't cost any extra comparison time other than where needed for correctness
[19:42:18] <TinoDidriksen> Google guidelines are for Google, not anyone else.
[19:42:27] <PJBoy> ... do they?
[19:42:31] <ezzieyguywuf> but I guess that's equivalent to std::string_view("123") == std::string_view("123")
[19:42:42] <TinoDidriksen> Really, don't impose Google's styles on non-Google codebases. It's not good.
[19:42:46] <PJBoy> it's exactly equivalent, yeah
[19:42:50] <imMute> ezzieyguywuf: ev is not a user defined literal.  it's a standard defined literal.
[19:42:59] <PJBoy> semantics
[19:43:07] <ezzieyguywuf> PJBoy: https://google.github.io/styleguide/cppguide.html#Operator_Overloading
[19:43:10] <imMute> ezzieyguywuf: also Google's rules are stupid outside of the context of Google.
[19:43:17] <PJBoy> thanks
[19:43:20] <ezzieyguywuf> what if I want to work at google :-P
[19:43:30] <cbreak> tell them their styleguide is stupid.
[19:43:54] <ezzieyguywuf> PJBoy: specifically " Do not use any such literals provided by others (including the standard library)."
[19:44:02] <PJBoy> > Because they can't be namespace-qualified, uses of UDLs also require use of either using-directives (which we ban) or using-declarations (which we ban in header files except when the imported names are part of the interface exposed by the header file in question). Given that header files would have to avoid UDL suffixes, we prefer to avoid having conventions for literals differ between...
[19:44:03] <ezzieyguywuf> cbreak: I will, if I get a job there :-P
[19:44:03] <PJBoy> ...header files and source files
[19:44:07] <PJBoy> well
[19:44:16] <PJBoy> given that they ban using directives, it makes a bit of sense
[19:44:30] <PJBoy> and then it's just a case of disagreeing with banning using directives
[19:44:35] <ezzieyguywuf> PJBoy: why does that make it make more sense?
[19:44:52] <PJBoy> like that string_view UDL comes from namespace std::string_literals
[19:44:58] <PJBoy> you have to using that namespace
[19:45:09] <PJBoy> and namespacing UDLs does make sense
[19:45:15] <ezzieyguywuf> ohhhh yea
[19:45:27] <ezzieyguywuf> is there a way to use the literal _without_ the using directive?
[19:45:31] <cbreak> importing UDLs into the current scope also makes sense.
[19:45:33] <ezzieyguywuf> "123"std::sv or something?
[19:46:01] <PJBoy> `operator std::string_literals::sv("123")` probably
[19:46:02] <cbreak> using std::string_literals::sv or similar I think.
[19:46:22] <PJBoy> apparently not
[19:46:26] <PJBoy> yeah I dunno
[19:46:34] <ezzieyguywuf> `using sv = std::string_literals::sv` sounds kosher with their style guidelines if used in implementation file
[19:47:02] <ezzieyguywuf> i.e. 'using declaration' if I'm interpretting that correctly
[19:47:23] <ezzieyguywuf> but again, they explicitly say not to use the literals
[19:47:25] *** Quits: Simplar (~quassel@188.163.92.225) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[19:47:54] <PJBoy> << std::string_view_literals::operator"" sv("123", 4)
[19:47:54] <geordi> 123[\NUL]
[19:47:56] <PJBoy> there you go
[19:48:12] <ezzieyguywuf> PJBoy: lol, nice!
[19:48:24] <ezzieyguywuf> that's TOTALLY better than std::string_view("123")
[19:48:35] <PJBoy> if I were google I'd make an exception on the using-directive ban
[19:48:44] <ezzieyguywuf> if I get a job there, I'll bring it up
[19:48:50] <PJBoy> don't see any reason to deny a useful feature like UDLs
[19:49:14] <cbreak> google also denies even more useful c++ core language features like exceptions
[19:49:21] <ezzieyguywuf> I can see a reason for keeping using stuff out of headers, since it 'pollutes' the global namespace
[19:49:28] <ezzieyguywuf> but in an implementation file I think it should be alright
[19:49:29] <cbreak> ezzieyguywuf: nah
[19:49:37] <cbreak> it's not the "in header" part
[19:49:45] <cbreak> it's "in namespace scope"
[19:49:56] <ezzieyguywuf> cbreak: yea, but they also explicitly say something like "honestly we don't have a problem with exceptions but it'd be too much of a hassle for us to start using them now"
[19:50:24] <ezzieyguywuf> cbreak: is there a way to do it in the header that would not leak out to anyone that includes the header?
[19:50:29] <ezzieyguywuf> (I can't think of one)
[19:50:41] <PJBoy> modules
[19:50:44] <PJBoy> <_<
[19:51:05] <cbreak> ezzieyguywuf: inside functions
[19:51:09] <cbreak> inside classes
[19:51:16] <cbreak> inside impl namespaces
[19:51:21] <ezzieyguywuf> hm
[19:51:24] <ezzieyguywuf> point made
[19:51:36] <ezzieyguywuf> PJBoy: dude, I cannot _wait_ until modules are more widespread
[19:51:44] <ezzieyguywuf> one of my favourite features of languages like haskell and rust
[19:51:49] <ezzieyguywuf> (and javascript)
[19:52:00] <PJBoy> well it's not gonna be quite as good as those languages
[19:52:04] <PJBoy> but it's gonna be something
[19:52:11] <ezzieyguywuf> something is better than nothing
[19:52:19] <ezzieyguywuf> but also I lowkey think rust is going to take over the world
[19:52:27] <PJBoy> if they add exceptions maybe
[19:52:43] <PJBoy> and a shitload of libraries
[19:52:47] <PJBoy> a decent GUI
[19:53:04] <ezzieyguywuf> GUI is over-rated
[19:53:07] <PJBoy> I'm keeping my eyes on rust too though
[19:53:20] <ezzieyguywuf> but yea, it will be needed
[19:53:28] *** Joins: ville (~ville@178-75-128-81.bb.dnainternet.fi)
[19:53:34] <ezzieyguywuf> but from the handful of libraries I've seen, the community is strong/knowledgable/writing good stuff
[19:53:39] <ezzieyguywuf> so I'm optimistic
[19:54:01] <ezzieyguywuf> dunno about exceptions, I don't really have a strong opinion either way, but also I've never really had to write anything of a large enough scope/scale to care
[19:56:01] *** Quits: psb_ (sid500598@id-500598.ilkley.irccloud.com) (Ping timeout: 265 seconds)
[19:56:42] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:388c:b6ae:45f9:e74d)
[19:57:16] *** Joins: psb_ (sid500598@id-500598.ilkley.irccloud.com)
[20:01:44] *** Quits: cm007magnum (~Rheanna@61.171.69.141) (Remote host closed the connection)
[20:03:45] *** Joins: cm007magnum (~Rheanna@101.89.150.168)
[20:09:50] *** Joins: lpapp (~lpapp@ec2-15-161-137-233.eu-south-1.compute.amazonaws.com)
[20:10:10] <lpapp> so, clearly, after programming in C++ for 10-15 years, you can still learn new things :)
[20:10:45] <jessicara> never really stop learning new things it seems
[20:20:15] *** Quits: meicceli (meicceli@kapsi.fi) (Ping timeout: 264 seconds)
[20:21:19] *** Joins: meicceli (meicceli@kapsi.fi)
[20:23:05] <PJBoy> C++ develops faster than I can learn by itself
[20:23:42] *** Joins: msk_ (~msk@185.124.240.174)
[20:24:07] *** Quits: msk (~msk@185.124.240.174) (Read error: Connection reset by peer)
[20:24:52] *** Quits: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it) (Quit: Leaving.)
[20:25:54] *** Quits: mitch0 (~mitch@91-82-172-24.pool.digikabel.hu) (Quit: leaving)
[20:26:10] *** Quits: baltazar (~baltazar@91-82-172-24.pool.digikabel.hu) (Quit: reboot)
[20:26:11] *** Quits: proller (~p@2a02:6b8:0:40c:e0ca:eca5:e1f6:215a) (Ping timeout: 245 seconds)
[20:28:41] *** Quits: meicceli (meicceli@kapsi.fi) (Ping timeout: 245 seconds)
[20:29:07] *** Joins: baltazar (~baltazar@91-82-172-24.pool.digikabel.hu)
[20:30:06] *** Joins: meicceli (meicceli@kapsi.fi)
[20:32:35] *** Quits: interop_madness (~interop_m@user/interop-madness/x-0950004) (Quit: Leaving)
[20:38:02] <lpapp> Alipha: are you saying that when you have a friend declaration, you can dllexport/import there instead of having the usual function declaration, too?
[20:44:15] *** Quits: jehelset (~jeh@ti0005q162-7332.bb.online.no) (Ping timeout: 264 seconds)
[20:45:32] *** Joins: kenanmarasli (~kenanmara@user/kenanmarasli)
[20:47:33] <cart_man> Is there a way to see at which position a std::istream is currently at?
[20:47:51] <Alipha> lpapp: yes. and personally, i've never seen someone write separate function declarations apart from the friend function declaration, as it's redundant, e.g.: https://wandbox.org/permlink/Mr8srBmz8DHTNxmd ... though you say you've always seen a separate non-friend declaration?
[20:48:36] <Alipha> cart_man: if it's an ifstream opened in binary mode, you can use tellg()
[20:49:26] <Alipha> (and the "file" has positioning information. e.g., i don't think tellg() would tell you anything useful when opening "/dev/urandom")
[20:51:29] <cart_man> Alipha: Yea but I dont think its open in binary mode though unlesss ifstreams default is with binary mode
[20:51:50] *** Quits: cm007magnum (~Rheanna@101.89.150.168) (Remote host closed the connection)
[20:52:06] <Alipha> cart_man: nope. change it to open in binary mode then ;-)
[20:52:19] <lpapp> Alipha: I have not seen. But I thought friend is kind of silly to be the source of truth
[20:52:32] <lpapp> since it is such an unusual declaration and one would probably look for the "normal" declaration.
[20:52:41] <lpapp> So, I thought it would help avoiding the confusion.
[20:52:51] <PJBoy> tellg still has info in text mode
[20:53:15] <Alipha> whether or not it's meaningful in text mode is another question though
[20:53:43] <Alipha> though now i'm curious how gcc, clang, and vs behave in that regard
[20:53:47] <PJBoy> it doesn't give you the number of bytes into the file you are, sure
[20:54:06] <PJBoy> well on linux binary and text are the same
[20:54:10] <cart_man> Alipha: How can I reset the position back to 0 in a std::ifstream? seekg(0) ?
[20:54:19] <PJBoy> for char specialisations of istream
[20:54:29] *** Joins: cm007magnum (~Rheanna@218.78.104.50)
[20:54:59] <PJBoy> .seekg(0, std::ios::beg)
[20:56:42] *** Quits: Haohmaru (~Haohmaru@195.24.53.110) ()
[20:57:04] *** Joins: paul424 (~tom@ip-5-172-237-104.multi.internet.cyfrowypolsat.pl)
[20:59:03] <Alipha> unsurprisingly, gcc on linux, tellg returns the same for both text and binary. testing on vs now
[20:59:50] <PJBoy> it'll have to deal with \r\n -> \n translation in MSVC somehow
[20:59:55] <lpapp> Alipha: is this documented somewhere by the way?
[21:02:03] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[21:02:52] <PJBoy> > the 'b' is ignored on all POSIX conforming systems, including Linux https://man7.org/linux/man-pages/man3/fopen.3.html
[21:05:15] <PJBoy> that's just for ifstream ofc
[21:05:34] <PJBoy> wchar_t and charN_t specialisations will have to maintain character conversion state
[21:06:38] <Alipha> tellg returns the same for text and binary on VS too
[21:06:51] <Alipha> which is what i suspected it would do
[21:07:17] <PJBoy> :/
[21:11:34] <cart_man> How can I make sure my Mutex::lock_guard is actuallly locking the scope?
[21:11:53] <LordKalma> by not forgetting to give it a variable
[21:12:49] <LordKalma> a common bug is to write `const std::lock_guard(g_i_mutex);` instead of `const std::lock_guard lock(g_i_mutex);`
[21:12:53] <LordKalma> see the difference?
[21:14:12] *** Quits: baltazar (~baltazar@91-82-172-24.pool.digikabel.hu) (Quit: reboot)
[21:14:25] *** Joins: X-Scale` (~ARM@92.250.97.112)
[21:14:56] *** Quits: X-Scale (~ARM@165.201.137.78.rev.vodafone.pt) (Ping timeout: 245 seconds)
[21:15:08] *** Joins: baltazar (~baltazar@91-82-172-24.pool.digikabel.hu)
[21:15:45] <Alipha> why are people making their lock_guards const? heh
[21:15:48] <Alipha> !vex
[21:15:49] <nolyc> T x(); and T y(U(z)); declare functions named x and y, the latter with a parameter named z. Also, T(a); declares a variable called a.
[21:16:00] <LordKalma> idk, it's the example on cppref
[21:16:53] *** Joins: mitch0 (~mitch@91-82-172-24.pool.digikabel.hu)
[21:17:07] <LordKalma> the problem is that with lock_guard(g_i_mutex); it doesn't create a variable, so it's a temporary that goes away at the end of the statement
[21:17:10] <LordKalma> therefore locking nothing
[21:17:42] *** X-Scale` is now known as X-Scale
[21:18:45] <cart_man> PJBoy: Alipha How can I make sure that an ifstream is indeed reset to 0 ? Is ther some other flag I have to reset?
[21:19:51] <PJBoy> the line I posted is guaranteed to work
[21:19:55] <PJBoy> unless there's some error
[21:20:25] <Alipha> cart_man: is your stream in a fail state? do you need to .clear() it too? also, if you open your ifstream for append, you're not going to be able to seek. but all in all, i don't think there's any *guarantee* (e.g., non-file streams)
[21:20:29] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:388c:b6ae:45f9:e74d) (Quit: Leaving)
[21:21:01] <Alipha> interesting. lock_guard is "better" than scoped_guard:
[21:21:03] <Alipha> { const std::lock_guard<std::mutex>(g_i_mutex); } std::mutex g_i_mutex;
[21:21:03] <geordi> error: no matching function for call to 'lock_guard<mutex>::lock_guard()' (fix known)
[21:21:15] <Alipha> geordi: -w { const std::scoped_lock(g_i_mutex); } std::mutex g_i_mutex;
[21:21:16] <geordi>  
[21:21:26] <LordKalma> scoped_lock is the best option yeah
[21:21:35] <Alipha> { const std::scoped_lock(g_i_mutex); } std::mutex g_i_mutex;  // if you were curious about the warning
[21:21:36] <geordi> warning: declaration of 'g_i_mutex' shadows a global declaration (fix known)
[21:21:45] <Alipha> LordKalma: eh, you read my statement backwards
[21:21:54] <LordKalma> ah?
[21:21:55] <PJBoy> scoped_lock has a default ctor
[21:22:01] *** Quits: CoderCharmander (~CoderChar@54032703.catv.pool.telekom.hu) (Ping timeout: 245 seconds)
[21:22:02] <Alipha> PJBoy: indeed
[21:22:38] <PJBoy> LordKalma, recall that `T x` and `T(x)` are the same declaration
[21:22:50] <Alipha> LordKalma: `lock_guard(g_i_mutex);` doesn't compile. `std::scoped_lock(g_i_mutex);` does compile (and is not what you want)
[21:23:46] <LordKalma> ah yes, it's scoped lock the one you can miss the var name?
[21:24:17] <PJBoy> you can't miss any var names anywhere
[21:24:26] <LordKalma> "`std::scoped_lock(g_i_mutex);` does compile (and is not what you want)"
[21:24:34] <LordKalma> this is what I meant
[21:24:48] <LordKalma> it's a semantic bug, not a syntax error
[21:24:50] <PJBoy> you can miss the ctor argument in the scoped_lock case
[21:25:12] <cart_man> LordKalma: Oh shit IM Very glad I reread what you wrote there
[21:25:33] *** Joins: CoderCharmander (~CoderChar@54032703.catv.pool.telekom.hu)
[21:25:41] <PJBoy> I don't think it's a very evil bug though
[21:25:43] <LordKalma> https://stackoverflow.com/a/51963166/5168563
[21:25:45] <PJBoy> anything that isn't a temporary needs a name
[21:25:56] <LordKalma> it sure is easy to miss
[21:25:59] <PJBoy> ...except string literals
[21:28:53] <cart_man> LordKalma: But I have std::mutex unique_ptr_ResultSet_mutex; in my header file and then literally this in the function I want it to lock -> const std::lock_guard<std::mutex> lock(unique_ptr_ResultSet_mutex);     Thats it?
[21:28:58] *** Joins: Guest17 (~Guest17@wificampus-097109.grenet.fr)
[21:29:10] <LordKalma> you haave an unique ptr to a mutex?
[21:29:35] <LordKalma> ah, your mutex is meant to protect a unique ptr? haha
[21:29:41] <LordKalma> that name is a mouthful
[21:30:05] <LordKalma> but yes, that's it i think
[21:30:44] *** Joins: givemeyourpies (givemeyour@c-66-235-2-202.sea.wa.customer.broadstripe.net)
[21:31:04] <Alipha> cart_man: you can remove the const and, if c++17, remove the <std::mutex> to make it a little shorter
[21:31:11] <cart_man> LordKalma: Lol this code base is huge and spaghetti so I give my new stuff very descriptive names
[21:31:22] <LordKalma> but yeah, that
[21:31:23] <cart_man> Alipha: I am not there yet
[21:31:28] <LordKalma> I never put the template parameter on those haha
[21:31:33] <Alipha> I'm not sure if there's any practical benefit to making it const
[21:32:04] <LordKalma> BUt tHaT COnSt coRReCTEnss
[21:32:20] <cart_man> hahahaha
[21:35:49] <LordKalma> https://godbolt.org/z/7ExqbGaxf
[21:35:51] <LordKalma> literally the same
[21:37:07] <PJBoy> const correctness is cool
[21:37:29] <LordKalma> I try to do it too but I'm not religious about it
[21:38:24] <PJBoy> I use it wherever it doesn't sacrifice readability or move semantics
[21:38:29] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[21:38:37] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[21:38:37] *** ChanServ sets mode: +v npaperbot
[21:39:06] <PJBoy> and it usually doesn't sacrifice readability
[21:39:14] *** Parts: lpapp (~lpapp@ec2-15-161-137-233.eu-south-1.compute.amazonaws.com) ()
[21:41:48] *** Quits: cm007magnum (~Rheanna@218.78.104.50) (Remote host closed the connection)
[21:43:57] *** Joins: cm007magnum (~Rheanna@218.78.79.129)
[21:47:51] *** Quits: meicceli (meicceli@kapsi.fi) (Ping timeout: 264 seconds)
[21:50:45] <LordKalma> Alipha, cbreak this is the bug: https://godbolt.org/z/MPhhzsbrP
[21:53:10] <Alipha> LordKalma: oh, yeah, sure, {}. hm. yeah.... and i think you meant to tag cart_man and/or PJBoy, not cbreak, heh
[21:53:20] <LordKalma> cart_man, yes, corry
[21:53:22] <LordKalma> sorry*
[21:53:50] <cart_man> NPS ... I love the attention
[21:54:16] *** Joins: meicceli (meicceli@kapsi.fi)
[21:55:54] <Alipha> LordKalma: implementations should add [[nodiscard]] to scoped_lock, lock_guard, etc. constructors :-/
[21:56:37] *** Quits: CoderCharmander (~CoderChar@54032703.catv.pool.telekom.hu) (Ping timeout: 256 seconds)
[21:57:36] <PJBoy> parentheses win again
[21:57:36] *** Joins: CoderCharmander (~CoderChar@20014C4C1256300085DECD4F21A717FC.catv.pool.telekom.hu)
[21:58:40] <yolo> so swig provides language-binding for c/c++ libraries, what about just providing a json-rpc interface so any language can use the library as long as they send json-rpc requests? thus void all those bindings
[21:59:09] <LordKalma> that would imply an executable, and lots of data marshalling
[21:59:12] <LordKalma> so probably no
[21:59:16] <kalven> remove the stone of language bindings, attach the stone of rpc interface
[21:59:25] <PJBoy> bahahaha
[21:59:31] <PJBoy> a stonecutters reference
[21:59:52] <PJBoy> I see you are a man of culture
[22:00:37] <yolo> json-rpc marshall is not that heavy plus you can invoke the library remotely too, which language-binding can not. I do intend to make my little library remotely/locally consumable
[22:01:04] <LordKalma> an rpc interface involves an executable
[22:01:18] <kalven> if you introduce the possibility of making remote calls, you also introduce a lot of new and exciting failure modes
[22:01:31] *** Joins: Simplar (~quassel@188.163.92.225)
[22:02:40] <yolo> agree. LordKalma you're right this is more of an executable(a backend daemon) instead of pure library
[22:02:58] *** Quits: skapata (~Skapata@user/skapata) (Quit: Äis.)
[22:03:18] <yolo> i do want to have python/javascript/etc to control it, anyway keep playing with it.
[22:03:32] <yolo> something like https://kodi.wiki/view/JSON-RPC_API
[22:10:42] *** Quits: CoderCharmander (~CoderChar@20014C4C1256300085DECD4F21A717FC.catv.pool.telekom.hu) (Remote host closed the connection)
[22:18:50] <kalven> yolo: fwiw, it might be interesting to do some reading on "sidecar process"
[22:20:35] *** Joins: CoderCharmander (~CoderChar@20014C4C12563000BCCDBFC417CDB7F0.catv.pool.telekom.hu)
[22:22:47] <yolo> kalven: very interesting, thanks
[22:24:14] <yolo> not really a cloud person, last time  I read is that microservice is losing its steam to serverless, then I was told serverless is just the old fastcgi with a new name
[22:25:18] <kalven> these are all different, and not quite comparable
[22:32:17] *** Quits: cm007magnum (~Rheanna@218.78.79.129) (Remote host closed the connection)
[22:33:51] *** Joins: cm007magnum (~Rheanna@218.78.53.13)
[22:37:05] *** Quits: cart_man (~rynot@host-78-144-121-71.as13285.net) (Quit: Konversation terminated!)
[22:44:56] *** Quits: gehn (~gehn@user/gehn) (Ping timeout: 245 seconds)
[22:51:35] <paul424> template<> ODServer* Ogre::Singleton<ODServer>::msSingleton = nullptr; // I know what this means plus minus , question is
[22:51:58] <paul424> why it requires the template<> keyword ?
[22:52:03] *** Joins: jehelset (~jeh@ti0005q162-7332.bb.online.no)
[22:59:08] *** Joins: magla (~gelignite@55d416db.access.ecotel.net)
[23:03:13] <Alipha> paul424: it's specifying that you're creating a specialization
[23:03:57] <paul424> aha
[23:12:35] *** Quits: Tokamak (~Tokamak@172.58.191.55) (Read error: Connection reset by peer)
[23:13:20] *** Joins: elemongw (~elemongw@20.107.36.50)
[23:13:54] *** Parts: elemongw[m] (~elemongwk@2001:470:69fc:105::34ee) ()
[23:15:29] *** Joins: xkuru (~xkuru@user/xkuru)
[23:17:30] *** Joins: proller (~p@2a02:6b8:b081:8019::1:0)
[23:17:50] *** Joins: Tokamak (~Tokamak@172.58.191.55)
[23:18:35] <paul424> ODPacket::operator bool() const{    return mPacket;} // how taht's supposed to work ? I mean ... ahh it will try to call bool conversion operator of mPacket ? right ?
[23:21:35] *** Quits: cm007magnum (~Rheanna@218.78.53.13) (Remote host closed the connection)
[23:24:49] *** Joins: cm007magnum (~Rheanna@218.78.67.149)
[23:29:58] <Alipha> paul424: yeah
[23:33:15] <Simplar> Alipha: hello
[23:33:32] <Alipha> Simplar: hi?
[23:34:04] <Simplar> I've read about the approach to gcd in Knuth's TAOCP's chapter 4.2. It's... fascinating.
[23:34:17] <Simplar> The binary gcd algo is satisfying to me
[23:34:27] *** Joins: skapata (~Skapata@2804:14c:87b0:a6f9:cdde:7684:4b79:185)
[23:34:28] *** Quits: skapata (~Skapata@2804:14c:87b0:a6f9:cdde:7684:4b79:185) (Changing host)
[23:34:28] *** Joins: skapata (~Skapata@user/skapata)
[23:41:27] *** Quits: riksteri (riksteri@gateway/vpn/airvpn/riksteri) (Quit: riksteri)
[23:41:36] *** Joins: spaceangel (~spaceange@ip-62-245-71-160.net.upcbroadband.cz)
[23:43:16] *** Quits: meicceli (meicceli@kapsi.fi) (Ping timeout: 245 seconds)
[23:43:43] <CarloWood> I have a Source and a Destination; both refer to states, formats, ownership etc - not specifically location or memory.
[23:44:15] <CarloWood> Now I need a type that can be both.  What is a good english word that what can be a source or destination, or both if you make chain?
[23:44:51] *** Joins: meicceli (meicceli@kapsi.fi)
[23:47:29] *** Joins: gioyik (~gioyik@gateway/tor-sasl/gioyik)
[23:50:30] *** Quits: meicceli (meicceli@kapsi.fi) (Ping timeout: 268 seconds)
[23:50:49] <Alipha> CarloWood: before you said "or both", i would have said "Endpoint"
[23:51:13] <CarloWood> I thought of that, but it doesn't work here.
[23:52:10] <CarloWood> It's for a very specific use case, so you probably won't have enough information unless there is an english word that just has that meaning (source and destination).
[23:52:26] <CarloWood> I thought of "Address", or "Station". But no. To location-like.
[23:52:32] <CarloWood> It is more a State.
[23:52:46] *** Quits: Guest17 (~Guest17@wificampus-097109.grenet.fr) (Ping timeout: 256 seconds)
[23:54:12] <CarloWood> What I want to use it for is GPU synchronization (using vulkan). You can add barriers that demand the pipeline/image/whatever reached a certain state before it starts a transition/transfer which then in turn must have finished before the dst stage of the pipeline may continue.
[23:54:49] *** Joins: TheGuestMovie (~TheGuestM@173.231.114.74)
[23:55:12] *** Quits: Leone (~Leo@216.154.50.172) (Read error: Connection reset by peer)
[23:55:38] <CarloWood> The vulkan spec uses 'src' and 'dst', but always talks about three or four such variables (stage, access, layout, queue family ownership).
[23:56:01] <CarloWood> I want to put those four in a single struct; and then that struct can used as src or dst.
[23:56:10] <CarloWood> can be*
[23:57:41] <CarloWood> So, instead of "Station" I'd rather use "ResourceState" or "SynchronizationScope" :P
[23:58:01] *** Joins: meicceli (meicceli@kapsi.fi)
[23:58:36] *** Joins: Leone (~Leo@216.154.50.172)
