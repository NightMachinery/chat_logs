[00:13:50] *** Joins: gethuen (uid502979@id-502979.stonehaven.irccloud.com)
[00:17:30] <gethuen> I don't understand this definition of flatten: https://clojuredocs.org/clojure.core/tree-seq#example-56b25b6ee4b060004fc217b6
[00:18:34] <gethuen> specifically, I thought filter takes a function like #(even? x), I don't understand (complement sequential?)
[00:19:11] <gethuen> oh wait, I figured it out, it creates a new function
[00:20:04] *** Quits: v3ga (~cyberocto@c-73-39-172-34.hsd1.md.comcast.net) (Ping timeout: 252 seconds)
[00:23:39] <sobel> that flatten leans on tree-seq pretty hard
[00:25:22] <gethuen> tree-seq is so confusing to me, I have no clue what the purpose of it is
[00:26:11] <sobel> at some point, you'll be like, hmmm what i really need here is a lazy list of nodes in this tree via depth-first walk
[00:26:24] <sobel> then you'll be glad to have tree-seq
[00:27:23] <sobel> that's how it goes for me and lisp/higher-order programming. i have to design my way into needing a thing before it's obvious that i want it.
[00:27:35] <gethuen> so, if I had a game tree being generated for each possible chess move, I would use tree-seq to create that sort of lazy-tree, or to negotiate it?
[00:28:01] <gethuen> navigate, not negotiate, my bad
[00:28:17] <jeaye> gethuen: Imagine you want a list of all files, recursively, in a directory. Maybe you have a list of directories, each with a list of files and more directories.
[00:30:40] *** Quits: atw (~user@154.27.197.101) (Ping timeout: 240 seconds)
[00:30:57] <gethuen> jeaye: okay
[00:35:46] <gethuen> jeez, I wish leetcode supported clojure, they only do racket. I just want to get better at clojure.
[00:37:17] <gethuen> right now I am going through https://4clojure.oxal.org/ but the website is kind of buggy (I don't want to complain, just pointing it out). Have to refresh the page manually after being directed to the next page, and it doesn't seem to correctly remember that I finished problems.
[00:41:47] *** Quits: hendursaga (~weechat@user/hendursaga) (Remote host closed the connection)
[00:42:23] *** Joins: hendursaga (~weechat@user/hendursaga)
[00:53:52] <andreyorst> technomancy: oh yeah, I forgot how it's called, I'll try both tomorrow
[00:54:52] <technomancy> andreyorst: it's missing newer features like where/or
[01:09:02] *** Joins: atw (~user@154.27.197.101)
[01:24:40] *** Quits: mwnaylor (~user@2601:5ce:4300:5560::fc2b) (Ping timeout: 240 seconds)
[01:39:28] <jeaye> gethuen: https://github.com/PEZ/rich4clojure
[01:43:12] <gethuen> jeaye: thanks
[01:45:00] <jeaye> If you don't have a REPL set up yet, this is a good reason to do it.
[01:45:40] <jeaye> And by REPL, we don't just mean the terminal readline REPL, we mean editor integration so you can run code as you write it.
[01:56:20] <gethuen> thanks jeaye
[01:56:53] <gethuen> I really like this answer to creating a duplicated string #(interleave % %), but I was wondering how you could make it for 3, 4 variable duplications
[01:58:32] <gethuen> I want an inline macro I guess? something like #(interleave ~(somefunc ,%2 %1))
[01:59:06] <jeaye> No macro needed.
[01:59:28] <jeaye> In general, with Clojure, we prefer not to use macros when a function will do.
[02:00:28] <jeaye> interleave is variadic, so (interleave "foo" "bar") works, but so does (interleave "foo" "bar" "spam" "meow")
[02:04:07] <gethuen> jeaye: thank you
[02:40:00] <gethuen> what does %& mean here: #(reduce (fn [x y] (if (> x y) x y)) %&)
[02:40:41] <gethuen> is it a catch-all?
[02:41:17] <selfsymmetric-mu> gethuen: https://clojure.org/guides/weird_characters#_n_anonymous_function_arguments
[02:41:30] <selfsymmetric-mu> From the "Weird Characters" Clojure guide.
[02:42:05] <selfsymmetric-mu> It means "the rest of the arguments". You're defining an anonymous function here and passing all arguments to reduce.
[02:42:39] <gethuen> selfsymmetric-mu: thank you!
[02:43:16] <selfsymmetric-mu> gethuen: my pleasure!
[02:44:02] <gethuen> also, I don't get -> this  (#(reduce (fn [x y] (if (> x y) x y)) %&) '(1 2 3)) returns '(1 2 3), but (apply #(reduce (fn [x y] (if (> x y) x y)) %&) '(1 2 3 4)) spits out 4 properly
[02:44:40] <gethuen> at least in this online repl: https://clojurescript.io/
[02:44:54] <gethuen> but it apparently solves the 4clojure problem, which would be in the first format
[02:45:01] <gethuen> https://4clojure.oxal.org/#/problem/38
[02:53:04] <ridcully_> gethuen: if you remove the & in your first, failing example, this will work
[02:54:44] <ridcully_> the apply version works because this is the proper call for it; the anon-fn is basically variadic arguments.  with apply you turn the list into arguments.  and the %& turns them back into a seq
[02:55:30] <gethuen> so apply explodes the argument list into separate items? didn't know that
[02:55:41] <ridcully_> so the second version is needless complex in this example.  using %& often way more useful for humans
[02:56:10] <ridcully_> gethuen: pseudo code: (apply f [1 2 3]) -> (f 1 2 3)
[03:03:08] *** Joins: v3ga (~cyberocto@c-73-39-172-34.hsd1.md.comcast.net)
[03:05:19] *** Quits: seschwar (~seschwar@user/seschwar) (Quit: :wq)
[03:09:03] <gethuen> ridcully_: thanks!
[03:31:28] *** Quits: v3ga (~cyberocto@c-73-39-172-34.hsd1.md.comcast.net) (Ping timeout: 252 seconds)
[03:46:38] <hexology> i just asked this question on the #commonlisp channel and got some interesting discussion, and now i'm curious if/how clojure does things differently (i assume it will be VERY different). the question is: it's often convenient and relevant to write things like (reduce +' (map foo data)) -- is the compiler able to optimize away the double-looping, or does the generated code make 2 separate passes over the data? does this optimization
[03:46:38] <hexology>  happen sometimes? always? never?
[03:47:32] <hexology> s/relevant/semantically meaningful
[03:47:47] <technomancy> hexology: map doesn't do any looping; it just constructs a lazy seq for reduce to consume
[03:48:44] <hexology> right, so that will only apply foo "as needed", when the data point is "pulled" by reduce
[03:49:11] <technomancy> there are ways to reduce even that overhead but in practice it's very rare you need anything more
[03:49:20] <hexology> makes sense, i barely use clojure so i didn't realize map was lazy
[04:35:27] *** Quits: gpk (~gpk@90.247.89.78) (Ping timeout: 245 seconds)
[04:37:15] *** Joins: gpk (~gpk@90.243.62.232)
[04:38:25] *** Quits: xulfer (uid452788@id-452788.charlton.irccloud.com) (Quit: Connection closed for inactivity)
[05:23:35] *** Joins: v3ga (~cyberocto@c-73-39-172-34.hsd1.md.comcast.net)
[05:23:39] <michaelrose> speaking of which I this was the problem with my program hiredman the sequences produced by instaparse are lazy thus some of the values that ought to have been realized were not so since they weren't defined when the function that defined variables went ahead and defined one which was corrected later hiding the error save for the single instruction that had already been generated
[05:53:15] *** Quits: v3ga (~cyberocto@c-73-39-172-34.hsd1.md.comcast.net) (Ping timeout: 268 seconds)
[06:26:40] *** Quits: ChanServ (ChanServ@services.libera.chat) (*.net *.split)
[06:35:30] *** Joins: ChanServ (ChanServ@services.libera.chat)
[06:35:30] *** iridium.libera.chat sets mode: +o ChanServ
[06:50:13] *** Joins: meinside_ (uid24933@id-24933.brockwell.irccloud.com)
[08:29:17] *** Joins: v3ga (~cyberocto@c-73-39-172-34.hsd1.md.comcast.net)
[08:37:53] *** Quits: v3ga (~cyberocto@c-73-39-172-34.hsd1.md.comcast.net) (Remote host closed the connection)
[08:38:22] *** Joins: v3ga (~cyberocto@c-73-39-172-34.hsd1.md.comcast.net)
[08:44:26] *** Joins: zmt01 (~zmt00@user/zmt00)
[08:46:37] *** Quits: v3ga (~cyberocto@c-73-39-172-34.hsd1.md.comcast.net) (Ping timeout: 252 seconds)
[08:48:42] *** Quits: zmt00 (~zmt00@user/zmt00) (Ping timeout: 272 seconds)
[08:52:11] *** Joins: v3ga (~cyberocto@c-73-39-172-34.hsd1.md.comcast.net)
[08:58:52] *** Quits: v3ga (~cyberocto@c-73-39-172-34.hsd1.md.comcast.net) (Ping timeout: 268 seconds)
[09:03:33] *** Quits: gethuen (uid502979@id-502979.stonehaven.irccloud.com) (Quit: Connection closed for inactivity)
[09:06:34] *** Quits: flynn (~mcbloch@user/flynn) (Read error: Connection reset by peer)
[09:07:33] *** Joins: flynn (~mcbloch@user/flynn)
[09:22:50] *** Quits: hendursaga (~weechat@user/hendursaga) (Remote host closed the connection)
[09:23:17] *** Joins: hendursaga (~weechat@user/hendursaga)
[09:40:10] *** Joins: struchu (~struchu@staticline-31-183-185-162.toya.net.pl)
[10:35:44] *** Joins: previous (~current@c-68-81-231-102.hsd1.pa.comcast.net)
[10:52:05] *** Quits: previous (~current@c-68-81-231-102.hsd1.pa.comcast.net) (Quit: Leaving)
[11:00:52] *** Joins: silasfox (~sbv@xdsl-78-35-71-64.nc.de)
[11:23:27] *** Joins: v3ga (~cyberocto@c-73-39-172-34.hsd1.md.comcast.net)
[11:33:44] *** Joins: Harlin_ (~DonQixote@lsp-nmrx-178-219.lsp01.numerex.com)
[11:35:10] *** Joins: Harlin__ (~DonQixote@c-24-128-8-53.hsd1.co.comcast.net)
[11:36:10] *** Quits: Harlin (~DonQixote@2603:300b:663:e800:36b1:82a4:cb60:df91) (Ping timeout: 240 seconds)
[11:39:12] *** Quits: Harlin_ (~DonQixote@lsp-nmrx-178-219.lsp01.numerex.com) (Ping timeout: 245 seconds)
[11:52:40] *** Quits: v3ga (~cyberocto@c-73-39-172-34.hsd1.md.comcast.net) (Ping timeout: 240 seconds)
[11:53:37] *** Quits: Harlin__ (~DonQixote@c-24-128-8-53.hsd1.co.comcast.net) (Read error: Connection reset by peer)
[11:53:58] *** Joins: Harlin__ (~DonQixote@c-24-128-8-53.hsd1.co.comcast.net)
[12:09:53] *** Quits: totoro2021 (~totoro@173.82.187.126) (Quit: WeeChat 2.8)
[12:10:19] *** Joins: totoro2021 (~totoro@173.82.187.126)
[12:14:08] *** totoro2021 is now known as totoro
[12:14:42] *** Quits: totoro (~totoro@173.82.187.126) (Changing host)
[12:14:42] *** Joins: totoro (~totoro@user/totoro)
[12:20:44] *** Joins: libertyprime (~libertypr@124.197.60.232)
[12:35:25] *** Joins: hendursa1 (~weechat@user/hendursaga)
[12:37:35] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 244 seconds)
[13:02:31] *** Quits: oreoking[m] (~oreokingm@2001:470:69fc:105::d039) (Quit: Bridge terminating on SIGTERM)
[13:02:32] *** Quits: nivekuil (~nivekuilc@2001:470:69fc:105::d57e) (Quit: Bridge terminating on SIGTERM)
[13:02:33] *** Quits: golanv (~golanvtch@2001:470:69fc:105::54c) (Quit: Bridge terminating on SIGTERM)
[13:02:33] *** Quits: Asbjrn[m] (~asbjornol@2001:470:69fc:105::40b) (Quit: Bridge terminating on SIGTERM)
[13:02:33] *** Quits: Null_A[m] (~jasonjckn@2001:470:69fc:105::bb85) (Quit: Bridge terminating on SIGTERM)
[13:02:34] *** Quits: goodger[m] (~goodgerma@2001:470:69fc:105::30be) (Quit: Bridge terminating on SIGTERM)
[13:02:34] *** Quits: yeik-the-spik[m] (~yeik-the-@2001:470:69fc:105::6152) (Quit: Bridge terminating on SIGTERM)
[13:02:34] *** Quits: punnie (~punniemat@2001:470:69fc:105::1193) (Quit: Bridge terminating on SIGTERM)
[13:02:34] *** Quits: thmswu (~thmswu@user/thmswu) (Quit: Bridge terminating on SIGTERM)
[13:02:35] *** Quits: rommudoh[m] (~rommudoht@2001:470:69fc:105::d736) (Quit: Bridge terminating on SIGTERM)
[13:02:35] *** Quits: pinage404 (~pinage404@2001:470:69fc:105::25c) (Quit: Bridge terminating on SIGTERM)
[13:02:35] *** Quits: DK[m] (~xbclmatri@2001:470:69fc:105::ccca) (Quit: Bridge terminating on SIGTERM)
[13:02:35] *** Quits: alexeimatveev[m] (~alexeimat@2001:470:69fc:105::c84c) (Quit: Bridge terminating on SIGTERM)
[13:02:35] *** Quits: nazarii[m] (~nazariim]@2001:470:69fc:105::63a) (Quit: Bridge terminating on SIGTERM)
[13:02:37] *** Quits: ServerStatsDisco (~serversta@2001:470:69fc:105::1a) (Quit: Bridge terminating on SIGTERM)
[13:02:37] *** Quits: arichiardi[m] (~arichiard@2001:470:69fc:105::cf87) (Quit: Bridge terminating on SIGTERM)
[13:02:44] *** Quits: MatrixTravelerbo (~voyagert2@2001:470:69fc:105::22) (Quit: Bridge terminating on SIGTERM)
[13:05:04] *** Joins: rommudoh[m] (~rommudoht@2001:470:69fc:105::d736)
[13:09:22] *** Joins: thmswu (~thmswu@user/thmswu)
[13:09:22] *** Joins: pinage404 (~pinage404@2001:470:69fc:105::25c)
[13:09:22] *** Joins: punnie (~punniemat@2001:470:69fc:105::1193)
[13:09:22] *** Joins: Asbjrn[m] (~asbjornol@2001:470:69fc:105::40b)
[13:09:22] *** Joins: nazarii[m] (~nazariim]@2001:470:69fc:105::63a)
[13:09:22] *** Joins: golanv (~golanvtch@2001:470:69fc:105::54c)
[13:09:22] *** Joins: MatrixTravelerbo (~voyagert2@2001:470:69fc:105::22)
[13:09:22] *** Joins: ServerStatsDisco (~serversta@2001:470:69fc:105::1a)
[13:09:22] *** Joins: arichiardi[m] (~arichiard@2001:470:69fc:105::cf87)
[13:09:22] *** Joins: alexeimatveev[m] (~alexeimat@2001:470:69fc:105::c84c)
[13:09:22] *** Joins: goodger[m] (~goodgerma@2001:470:69fc:105::30be)
[13:09:22] *** Joins: nivekuil (~nivekuilc@2001:470:69fc:105::d57e)
[13:09:34] *** Joins: oreoking[m] (~oreokingm@2001:470:69fc:105::d039)
[13:09:34] *** Joins: Null_A[m] (~jasonjckn@2001:470:69fc:105::bb85)
[13:09:34] *** Joins: yeik-the-spik[m] (~yeik-the-@2001:470:69fc:105::6152)
[13:21:20] *** Joins: to-hu (~Thunderbi@p200300e9af21ee001f8abc46cb537206.dip0.t-ipconnect.de)
[13:22:27] *** Joins: olavfosse (~olavfosse@2001:464c:73bf:0:b6fa:6bb1:4338:462b)
[13:23:50] <olavfosse> how come (not (= nil ()))?
[13:25:26] <Para> Having an empty list (well, form in your example) is having _something_.
[13:26:16] <Para> Although since you have a form there, not '() I wonder if it evaluates weirdly in general :)
[13:28:00] <olavfosse> (= () '())
[13:28:13] <olavfosse> in my mind a list is either nil or some data and a link to another list
[13:28:21] <ridcully_> () is fine - it's the empty list
[13:28:28] <Para> Your mind needs adjustment :)
[13:28:31] <ridcully_> (seq ()) is usually used
[13:28:40] <olavfosse> Para: yes which is why i am here lol
[13:29:02] <Para> List is effectively something on its own; it's a container, so the "identity" of sorts is the container itself, not what it has.
[13:35:40] *** Joins: retropikzel (~retropikz@2001:999:200:4ae7:e4f6:828a:e4c3:7465)
[13:37:21] *** Joins: seschwar (~seschwar@user/seschwar)
[13:38:04] <olavfosse> so list is not a linked list?
[13:38:45] <Para> I think you're getting confused by the idea that "list" wouln't actually exist or that list is defined by its contents exclusively.
[13:40:00] <Para> Lists are just as concrete as maps or any other values. When you compare list to nil, you're comparing just the shallow top level reference to a value, "is this value nil, where value is list"
[13:52:16] *** Joins: opqdonut (opqdonut@pseudo.fixme.fi)
[14:03:32] <olavfosse> hmm so nil is just Java NULL whereas an empty list is an instance of class EmptyList
[14:03:44] <Para> You shouldn't care about the type tbh.
[14:04:12] <Para> https://clojuredocs.org/clojure.core/empty_q
[14:06:51] <Para> Existence, equality, containment are all separate concepts.
[14:08:53] *** Joins: silasfox_ (~sbv@xdsl-87-78-57-101.nc.de)
[14:09:51] <ridcully_> maybe relevant https://clojure.org/reference/lisps
[14:11:40] *** Quits: silasfox (~sbv@xdsl-78-35-71-64.nc.de) (Ping timeout: 240 seconds)
[14:14:15] <olavfosse> ty
[14:40:31] <andreyorst> olavfosse: I've found this video helpful to understand most differences https://www.youtube.com/watch?v=cPNkH-7PRTk
[14:40:41] <andreyorst> thought it is pretty damn LONG
[14:41:00] *** Quits: flynn (~mcbloch@user/flynn) (Read error: Connection reset by peer)
[14:41:58] *** Joins: flynn (~mcbloch@user/flynn)
[14:53:51] <olavfosse> ty
[14:53:52] *** Quits: olavfosse (~olavfosse@2001:464c:73bf:0:b6fa:6bb1:4338:462b) (Quit: Client closed)
[16:15:44] *** Quits: sandra (~snan@chicken/contributor/snan) (Remote host closed the connection)
[16:20:04] *** Joins: sandra (~snan@chicken/contributor/snan)
[16:20:42] *** Quits: turlando (~turlando@user/turlando) (Ping timeout: 258 seconds)
[16:29:46] *** Quits: alnr (~alnr@38.125.204.99) (Quit: Leaving)
[16:31:29] *** Quits: TheCoffeMaker (~TheCoffeM@user/thecoffemaker) (Ping timeout: 252 seconds)
[16:36:52] *** Quits: libertyprime (~libertypr@124.197.60.232) (Ping timeout: 252 seconds)
[16:42:53] *** Joins: TheCoffeMaker (~TheCoffeM@user/thecoffemaker)
[16:54:42] *** Quits: struchu (~struchu@staticline-31-183-185-162.toya.net.pl) (Quit: WeeChat 3.2)
[16:55:52] *** Joins: struchu (~struchu@staticline-31-183-185-162.toya.net.pl)
[17:01:03] *** Joins: nighcoder (~ciumbi@45.58.87.61)
[17:02:46] *** Joins: yoonkn (~user@175.197.208.79)
[17:16:02] *** Quits: xsperry (~as@user/xsperry) (Ping timeout: 256 seconds)
[17:38:10] *** Quits: struchu (~struchu@staticline-31-183-185-162.toya.net.pl) (Ping timeout: 240 seconds)
[17:54:41] *** Quits: to-hu (~Thunderbi@p200300e9af21ee001f8abc46cb537206.dip0.t-ipconnect.de) (Remote host closed the connection)
[18:32:26] *** glider_ is now known as glider
[18:34:40] *** Quits: silasfox_ (~sbv@xdsl-87-78-57-101.nc.de) (Ping timeout: 240 seconds)
[18:35:19] <sobel> any recommendations before i try to bolt-on cljs to an existing React project? this thing start as a CRA at some point before it got turned into the "Vuexy" admin template
[18:36:43] *** Joins: silasfox_ (~sbv@2001-4dd5-31cd-0-1ee-2d35-986d-3df7.ipv6dyn.netcologne.de)
[18:57:29] *** Quits: silasfox_ (~sbv@2001-4dd5-31cd-0-1ee-2d35-986d-3df7.ipv6dyn.netcologne.de) (Ping timeout: 258 seconds)
[18:58:22] *** Joins: silasfox_ (~sbv@xdsl-87-78-57-101.nc.de)
[19:00:17] *** Quits: Harlin__ (~DonQixote@c-24-128-8-53.hsd1.co.comcast.net) (Read error: Connection reset by peer)
[19:00:39] *** Joins: Harlin__ (~DonQixote@c-24-128-8-53.hsd1.co.comcast.net)
[19:05:34] *** Quits: retropikzel (~retropikz@2001:999:200:4ae7:e4f6:828a:e4c3:7465) (Quit: Leaving)
[19:06:49] *** Quits: silasfox_ (~sbv@xdsl-87-78-57-101.nc.de) (Quit: WeeChat 3.2)
[19:24:53] *** Quits: jespada (~jespada@90.254.247.46) (Quit: Textual IRC Client: www.textualapp.com)
[19:33:40] *** Quits: archenoth (~archenoth@2604:3d09:681:f00:bcc3:6a10:af0:ae25) (Ping timeout: 240 seconds)
[19:34:58] *** Joins: archenoth (~archenoth@2604:3d09:681:f00:ecd2:ceaa:e0b6:684)
[19:44:13] *** Joins: jespada (~jespada@90.254.247.46)
[19:47:18] *** Quits: michaelrose (~fuckyou@2601:600:c700:1bd:648c:1a1e:d902:b82d) (Remote host closed the connection)
[19:51:15] *** Quits: yoonkn (~user@175.197.208.79) (Remote host closed the connection)
[19:51:49] *** Joins: Oshawott (~archenoth@2604:3d09:681:f00:6593:77df:78ce:14be)
[19:52:40] *** Quits: archenoth (~archenoth@2604:3d09:681:f00:ecd2:ceaa:e0b6:684) (Ping timeout: 240 seconds)
[19:59:32] *** Quits: hendursa1 (~weechat@user/hendursaga) (Quit: hendursa1)
[20:00:01] *** Joins: hendursaga (~weechat@user/hendursaga)
[20:00:38] *** Quits: Harlin__ (~DonQixote@c-24-128-8-53.hsd1.co.comcast.net) (Read error: Connection reset by peer)
[20:01:00] *** Joins: Harlin__ (~DonQixote@c-24-128-8-53.hsd1.co.comcast.net)
[20:40:59] *** Joins: v3ga (~cyberocto@c-73-39-172-34.hsd1.md.comcast.net)
[20:57:12] *** Joins: retropikzel (~retropikz@2001:999:200:4ae7:e4f6:828a:e4c3:7465)
[21:01:28] *** Quits: Harlin__ (~DonQixote@c-24-128-8-53.hsd1.co.comcast.net) (Quit: Leaving)
[21:10:52] *** Quits: v3ga (~cyberocto@c-73-39-172-34.hsd1.md.comcast.net) (Ping timeout: 268 seconds)
[21:20:37] *** Joins: op2 (~op@user/op2)
[21:34:51] *** Joins: v3ga (~cyberocto@c-73-39-172-34.hsd1.md.comcast.net)
[21:39:10] *** Quits: v3ga (~cyberocto@c-73-39-172-34.hsd1.md.comcast.net) (Ping timeout: 240 seconds)
[21:41:16] *** Joins: xsperry (~as@user/xsperry)
[22:27:13] *** Quits: cmiles74 (~miles@068-184-030-013.res.spectrum.com) (Ping timeout: 252 seconds)
[22:37:37] *** Joins: v3ga (~cyberocto@c-73-39-172-34.hsd1.md.comcast.net)
[22:44:42] *** Joins: cmiles74 (~miles@068-184-030-013.res.spectrum.com)
[22:56:21] *** Joins: cmiles74_ (~miles@068-184-030-013.res.spectrum.com)
[22:58:40] *** Quits: cmiles74 (~miles@068-184-030-013.res.spectrum.com) (Ping timeout: 240 seconds)
[23:01:21] *** Joins: mwnaylor (~user@2601:5ce:4300:5560::fc2b)
[23:06:40] *** Quits: v3ga (~cyberocto@c-73-39-172-34.hsd1.md.comcast.net) (Ping timeout: 240 seconds)
[23:06:40] *** Quits: Oshawott (~archenoth@2604:3d09:681:f00:6593:77df:78ce:14be) (Ping timeout: 240 seconds)
[23:06:42] *** Quits: amk (~amk@176.61.106.150) (Ping timeout: 245 seconds)
[23:07:14] *** Quits: retropikzel (~retropikz@2001:999:200:4ae7:e4f6:828a:e4c3:7465) (Quit: Leaving)
[23:30:27] *** Quits: lunik1 (~lunik1@37.205.14.203) (*.net *.split)
[23:30:27] *** Quits: Lulu (~meow@vyos/developer/Lulu) (*.net *.split)
[23:30:27] *** Quits: andreyorst (~andreyors@2.92.124.61) (*.net *.split)
[23:30:27] *** Quits: gko (~user@user/gko) (*.net *.split)
[23:30:41] *** Joins: Lulu (~meow@vyos/developer/Lulu)
[23:31:27] *** Joins: gko (~user@user/gko)
[23:31:42] *** Joins: andreyorst (~andreyors@2.92.124.61)
[23:33:15] *** Joins: lunik1 (~lunik1@37.205.14.203)
[23:52:58] *** Joins: to-hu (~Thunderbi@p200300e9af21ee00e2adcfd9ad122104.dip0.t-ipconnect.de)
