[00:05:49] *** Quits: gravicappa (~gravicapp@178.214.253.129) (Ping timeout: 240 seconds)
[00:06:27] *** Quits: Guest1107 (~bobo@82.142.17.127) (Quit: Konversation terminated!)
[00:12:38] *** Joins: Anarchos (~Anarchos@88.168.112.216)
[00:17:48] *** Quits: smondet[m] (~smondetma@2001:470:69fc:105::b33) (Ping timeout: 250 seconds)
[00:19:32] *** Quits: mclovin (~zapashcan@2001:470:69fc:105::43) (Ping timeout: 250 seconds)
[00:19:39] *** Quits: tomku[m] (~tomkumozi@2001:470:69fc:105::1:2fcb) (Ping timeout: 260 seconds)
[00:19:39] *** Quits: CodeBitCookie[m] (~code-bit-@2001:470:69fc:105::a2f) (Ping timeout: 260 seconds)
[00:20:37] *** Quits: adibsaad[m] (~adibsaad@2001:470:69fc:105::2f65) (Ping timeout: 268 seconds)
[00:21:51] *** Quits: saltrocklamp[m] (~hexology@user/hexology) (Ping timeout: 268 seconds)
[00:23:25] *** Joins: rgrinberg (~textual@2806:101e:7:6946:f564:858f:8731:3b4c)
[00:26:59] *** Joins: saltrocklamp[m] (~hexology@user/hexology)
[00:35:13] *** Joins: mro (~mro@2002:5cc3:fea7:0:7960:1130:8ec6:c3ba)
[00:54:00] *** Quits: rgrinberg (~textual@2806:101e:7:6946:f564:858f:8731:3b4c) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[00:55:52] *** Joins: smondet[m] (~smondetma@2001:470:69fc:105::b33)
[01:02:04] *** Quits: mro (~mro@2002:5cc3:fea7:0:7960:1130:8ec6:c3ba) (Remote host closed the connection)
[01:04:28] *** Quits: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl) (Quit: leaving)
[01:04:37] *** Joins: mro (~mro@port-92-195-254-167.dynamic.as20676.net)
[01:20:42] *** Joins: adibsaad[m] (~adibsaad@2001:470:69fc:105::2f65)
[01:29:38] *** Joins: vicfred (~vicfred@user/vicfred)
[01:34:01] *** Joins: cedric (~cedric@2a01:cb11:821:7c00:12bf:e883:5a9e:e1c0)
[01:41:15] <d_bot> <Continuation Calculus> where can i find doc about the `expression option` in `Pexp_fun of Asttypes.arg_label * expression option * pattern * expression`? Can't find any thing that makes it not `None` with astexplorer
[01:42:53] <d_bot> <antron> <https://github.com/ocaml/ocaml/blob/759d667092f684cce696898193044c94387e9df1/parsing/parsetree.mli#L284-L294>
[01:43:23] *** Joins: rgrinberg (~textual@2806:101e:7:6946:a872:19a1:2e93:fad2)
[01:44:02] <d_bot> <Continuation Calculus> thx, google led me to https://ocaml.org/api/compilerlibref/Parsetree.html instead
[01:47:54] *** Quits: mro (~mro@port-92-195-254-167.dynamic.as20676.net) (Quit: Leaving...)
[01:52:06] *** Quits: adibsaad[m] (~adibsaad@2001:470:69fc:105::2f65) (Read error: Connection reset by peer)
[01:52:07] *** Quits: saltrocklamp[m] (~hexology@user/hexology) (Write error: Connection reset by peer)
[01:52:09] *** Quits: smondet[m] (~smondetma@2001:470:69fc:105::b33) (Write error: Connection reset by peer)
[01:54:10] *** Joins: mclovin (~zapashcan@2001:470:69fc:105::43)
[02:08:31] *** Quits: infinity0 (~infinity0@occupy.ecodis.net) (Ping timeout: 268 seconds)
[02:09:39] *** Joins: infinity0 (~infinity0@occupy.ecodis.net)
[02:12:57] <d_bot> <Continuation Calculus> let's say i already have a ppx deriving. what would be the most straightforward way to convert it to a ppx deriving that also rewrites the initial type?
[02:12:57] *** Joins: smondet[m] (~smondetma@2001:470:69fc:105::b33)
[02:12:57] *** Joins: saltrocklamp[m] (~hexology@user/hexology)
[02:12:58] *** Joins: CodeBitCookie[m] (~code-bit-@2001:470:69fc:105::a2f)
[02:12:58] *** Joins: adibsaad[m] (~adibsaad@2001:470:69fc:105::2f65)
[02:12:58] *** Joins: tomku[m] (~tomkumozi@2001:470:69fc:105::1:2fcb)
[02:16:44] *** Quits: mclovin (~zapashcan@2001:470:69fc:105::43) (Quit: Client limit exceeded: 20000)
[02:17:52] *** Quits: saltrocklamp[m] (~hexology@user/hexology) (Quit: Client limit exceeded: 20000)
[02:19:57] *** Quits: smondet[m] (~smondetma@2001:470:69fc:105::b33) (Quit: Client limit exceeded: 20000)
[02:20:17] *** Quits: tomku[m] (~tomkumozi@2001:470:69fc:105::1:2fcb) (Quit: Client limit exceeded: 20000)
[02:32:59] <d_bot> <rgrinberg> What is "the initial type"?
[02:33:08] <d_bot> <rgrinberg> The type holding the `[@@deriving ]` annotation?
[02:33:14] *** Joins: mclovin (~zapashcan@2001:470:69fc:105::43)
[02:33:14] *** Joins: smondet[m] (~smondetma@2001:470:69fc:105::b33)
[02:33:14] *** Joins: saltrocklamp[m] (~hexology@user/hexology)
[02:33:14] *** Joins: tomku[m] (~tomkumozi@2001:470:69fc:105::1:2fcb)
[02:44:25] *** Quits: CodeBitCookie[m] (~code-bit-@2001:470:69fc:105::a2f) (Quit: Client limit exceeded: 20000)
[02:55:47] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Quit: WeeChat 3.3)
[02:58:11] *** Quits: rgrinberg (~textual@2806:101e:7:6946:a872:19a1:2e93:fad2) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[03:22:02] *** Quits: Haudegen (~quassel@178.115.237.87.static.drei.at) (Ping timeout: 256 seconds)
[03:34:09] *** Quits: Tuplanolla (~Tuplanoll@91-159-69-50.elisa-laajakaista.fi) (Quit: Leaving.)
[03:59:14] *** Quits: Anarchos (~Anarchos@88.168.112.216) (Quit: Vision[]: i've been blurred!)
[04:11:34] *** Quits: vicfred (~vicfred@user/vicfred) (Quit: Leaving)
[04:32:04] *** Joins: rgrinberg (~textual@2806:101e:7:6946:a872:19a1:2e93:fad2)
[04:40:32] *** Quits: rgrinberg (~textual@2806:101e:7:6946:a872:19a1:2e93:fad2) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[05:03:43] *** Quits: cedric (~cedric@2a01:cb11:821:7c00:12bf:e883:5a9e:e1c0) (Quit: Konversation terminated!)
[05:35:33] *** Joins: rgrinberg (~textual@2806:101e:7:6946:a872:19a1:2e93:fad2)
[06:22:04] *** Joins: shawnw (~shawn_w@c-73-225-121-73.hsd1.wa.comcast.net)
[07:12:58] *** Quits: terrorjack (~terrorjac@2a01:4f8:1c1e:509a::1) (Quit: The Lounge - https://thelounge.chat)
[07:15:01] *** Joins: terrorjack (~terrorjac@2a01:4f8:1c1e:509a::1)
[07:49:01] *** Quits: zebrag (~chris@user/zebrag) (Ping timeout: 240 seconds)
[07:49:54] *** Joins: zebrag (~chris@user/zebrag)
[08:24:11] *** Quits: rgrinberg (~textual@2806:101e:7:6946:a872:19a1:2e93:fad2) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[08:38:36] *** Quits: zebrag (~chris@user/zebrag) (Quit: Konversation terminated!)
[08:54:35] *** Joins: rgrinberg (~textual@187.223.209.106)
[08:57:03] *** Joins: gravicappa (~gravicapp@178.214.253.129)
[09:51:49] *** Quits: Techcable (~Techcable@168.235.93.147) (Ping timeout: 240 seconds)
[10:09:58] *** Quits: gravicappa (~gravicapp@178.214.253.129) (Ping timeout: 260 seconds)
[10:27:39] *** Joins: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl)
[10:39:01] *** Quits: dwt_ (~dwt_@c-98-200-58-177.hsd1.tx.comcast.net) (Ping timeout: 240 seconds)
[11:11:37] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[11:20:14] *** Joins: mro (~mro@2002:5cc3:c11f:0:f8a8:fd87:f138:202a)
[11:21:30] *** Quits: _whitelogger (~whitelogg@uruz.whitequark.org) (Remote host closed the connection)
[11:21:43] *** Joins: _whitelogger (~whitelogg@uruz.whitequark.org)
[11:22:20] *** Quits: mro (~mro@2002:5cc3:c11f:0:f8a8:fd87:f138:202a) (Remote host closed the connection)
[11:26:03] *** Quits: x88x88x (~x88x88x@149.28.53.172) (Remote host closed the connection)
[11:27:11] *** Quits: rgrinberg (~textual@187.223.209.106) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[11:28:37] *** Joins: x88x88x (~x88x88x@2001:19f0:5:39a8:5400:3ff:feb6:73cb)
[11:35:55] *** Quits: x88x88x (~x88x88x@2001:19f0:5:39a8:5400:3ff:feb6:73cb) (Remote host closed the connection)
[11:40:37] *** Joins: x88x88x (~x88x88x@2001:19f0:5:39a8:5400:3ff:feb6:73cb)
[11:50:50] *** Joins: noze` (~uber@2001:41d0:a:21f1::1)
[11:52:12] *** noze` is now known as noze
[11:53:15] <noze> when running `opam remove xyz`, opam tries to upgrade packages
[11:53:16] *** Joins: CodeBitCookie[m] (~code-bit-@2001:470:69fc:105::a2f)
[11:53:18] <noze> why
[11:53:23] *** Joins: Techcable (~Techcable@168.235.93.147)
[11:53:44] *** Joins: dwt_ (~dwt_@c-98-198-103-176.hsd1.tx.comcast.net)
[11:53:50] <noze> (the reason opam is giving me is that it's because of "[upstream or system changes]")
[12:05:34] *** Joins: gravicappa (~gravicapp@178.214.253.129)
[12:08:47] *** Joins: jlrnick (~josephler@2a01cb069040cc028cc81eda061223a4.ipv6.abo.wanadoo.fr)
[12:09:01] *** Joins: Haudegen (~quassel@178.115.237.87.static.drei.at)
[12:10:58] <hackinghorn> how do I check if a list is empty?
[12:11:03] <hackinghorn> there is no List.empty
[12:11:24] <hackinghorn> length is 0 maybe
[12:11:31] <hackinghorn> oh there is is_empty
[12:12:25] <octachron> You should pattern match the list `match l with [] -> ...`
[12:12:54] <noze> `l = []`
[12:27:06] *** Joins: mro (~mro@port-92-195-193-31.dynamic.as20676.net)
[12:31:58] *** Quits: mro (~mro@port-92-195-193-31.dynamic.as20676.net) (Ping timeout: 268 seconds)
[12:35:07] *** Quits: jlrnick (~josephler@2a01cb069040cc028cc81eda061223a4.ipv6.abo.wanadoo.fr) (Ping timeout: 250 seconds)
[12:47:16] *** Joins: mro (~mro@port-92-195-193-31.dynamic.as20676.net)
[13:00:42] <d_bot> <Et7f3> if you do that you will compute length so if the list has many element you will get a long loop and technically 1, 2 or 1_000_000 we don't care
[13:11:58] *** Quits: mro (~mro@port-92-195-193-31.dynamic.as20676.net) (Remote host closed the connection)
[13:14:59] *** Joins: mro (~mro@2002:5cc3:c11f:0:f8a8:fd87:f138:202a)
[13:17:00] *** Quits: mro (~mro@2002:5cc3:c11f:0:f8a8:fd87:f138:202a) (Remote host closed the connection)
[13:20:17] *** Joins: mro (~mro@port-92-195-193-31.dynamic.as20676.net)
[13:22:54] *** Quits: mro (~mro@port-92-195-193-31.dynamic.as20676.net) (Remote host closed the connection)
[13:29:28] *** Joins: mro (~mro@port-92-195-193-31.dynamic.as20676.net)
[13:33:02] *** Joins: bartholin (~bartholin@158.110.70.215)
[15:06:51] *** Quits: mro (~mro@port-92-195-193-31.dynamic.as20676.net) (Remote host closed the connection)
[15:09:47] *** Joins: mro (~mro@port-92-195-193-31.dynamic.as20676.net)
[15:46:27] *** Joins: jlrnick (~josephler@gw.lipn.univ-paris13.fr)
[16:00:48] *** Quits: jlrnick (~josephler@gw.lipn.univ-paris13.fr) (Ping timeout: 256 seconds)
[16:04:44] *** Quits: mro (~mro@port-92-195-193-31.dynamic.as20676.net) (Ping timeout: 268 seconds)
[16:09:18] *** Quits: shawnw (~shawn_w@c-73-225-121-73.hsd1.wa.comcast.net) (Ping timeout: 260 seconds)
[16:22:26] *** Joins: xiongxin (~Thunderbi@119.123.101.55)
[16:51:27] *** Joins: Anarchos (~Anarchos@192.54.145.137)
[16:54:02] <d_bot> <Continuation Calculus> yes
[16:55:53] <Anarchos> where can i find some simple samples of colored pretty printing of tree structures ?
[16:57:03] *** Quits: Haudegen (~quassel@178.115.237.87.static.drei.at) (Quit: Bin weg.)
[17:00:53] *** Joins: romildo (~Romildo@ip-131-161-7-165.isp.valenet.com.br)
[17:10:35] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.3)
[17:10:58] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[17:18:11] *** Joins: sluigi (~sluigi@18.31.9.184)
[17:18:42] <sluigi> How do you check if two objects (which have type an ADT that I defined) are structurally equal in OCaml? I'm using Core
[17:19:07] <sluigi> I tried phys_equal but I created two identical objects and it's saying they're not the same :)
[17:19:10] <d_bot> <NULL> Using `(=)` ?
[17:19:35] <sluigi> I think (=) has type Int -> Int?
[17:19:44] <d_bot> <NULL> Ah right, Core
[17:20:02] <d_bot> <NULL> You define your own equality then, I think
[17:20:20] <d_bot> <NULL> Maybe there's a ppax to do that for you
[17:24:57] <sluigi> hmm probably this, yeah https://github.com/janestreet/ppx_compare
[17:25:06] <d_bot> <VPhantom> There are explicitly polymorphic operations in Core I think, but I'm not sure that would cover arbitrary objects because it uses the hashing function which has limits (like 10 items in lists I think?)
[17:25:36] <d_bot> <VPhantom> Oh, that PPX looks promising for saving on boilerplate!
[17:26:30] <sluigi> is there something special I have to do to get my compiler to recognize ppx's
[17:27:01] <d_bot> <NULL> Isn't Core's poly equality simply the Stdlib's ? In any case, they advise against polymorphic equality so it's better to write/generate your own
[17:27:37] <d_bot> <NULL> If you use dune, you have to add the ppx to the list of (preprocessor IIRC)
[17:27:50] <Leonidas> VPhantom: ppx_deriving comes with an implementation of `eq` which derives compare.
[17:28:17] *** Joins: mro (~mro@port-92-195-193-31.dynamic.as20676.net)
[17:28:26] <Leonidas> sluigi: normally you add it to dune and that's it. The OCaml compiler ignores PPX extension nodes by default.
[17:30:13] *** Quits: xiongxin (~Thunderbi@119.123.101.55) (Ping timeout: 250 seconds)
[17:30:31] *** Joins: xiongxin (~Thunderbi@119.123.103.34)
[17:31:58] *** Quits: sluigi (~sluigi@18.31.9.184) (Ping timeout: 256 seconds)
[17:38:35] <octachron> The compiler ignores attributes by default, it raises an error on extension nodes ([%ext ... ])
[17:41:45] <Leonidas> Is that new? I remember there was a dune warning about "left-over" extension nodes. Or am I misremembering things?
[17:47:28] <octachron> You probably are thinking of left-over attributes? Non-interpreted extension nodes cannot be interpreted by the compiler, it has no other choices than failing.
[17:57:28] *** Joins: Guest9603 (~bobo@2a01:e0a:8d3:a300:ca60:ff:fe98:ce57)
[17:58:50] *** Joins: Haudegen (~quassel@91.114.49.10)
[17:59:20] *** Quits: mro (~mro@port-92-195-193-31.dynamic.as20676.net) (Read error: Connection reset by peer)
[17:59:26] *** Joins: mro_ (~mro@port-92-195-193-31.dynamic.as20676.net)
[18:28:28] <companion_cube> o/
[18:35:28] *** Quits: romildo (~Romildo@ip-131-161-7-165.isp.valenet.com.br) (Quit: Leaving)
[18:38:48] *** Quits: mro_ (~mro@port-92-195-193-31.dynamic.as20676.net) (Remote host closed the connection)
[18:50:14] *** Quits: xiongxin (~Thunderbi@119.123.103.34) (Remote host closed the connection)
[18:59:36] <Anarchos> hello companion_cube. Where can i find examples on prettyprinting with color in terminal ?
[18:59:50] <companion_cube> in the documentation of Fmt or CCFormat
[19:00:46] <Anarchos> companion_cube thanks , i have troubles to see some gallereies of output samples
[19:01:13] <companion_cube> because you can just load it in utop and play with it?
[19:02:36] <Anarchos> i want to debug my formal verifier, and i need to dump proof terms with colors, either i can not understand the mess...
[19:07:17] <Leonidas> Fmt is clearly missing blink and marquee features
[19:07:44] <companion_cube> :D
[19:07:49] <companion_cube> not sure terminals offer that
[19:08:15] <Anarchos> i just need colors, but i have so bad taste, i need to copy log format of others...
[19:09:10] <companion_cube> http://vrac.cedeela.fr/2021-12-10-103901_536x228_scrot.png there you go
[19:11:02] <d_bot> <Et7f3> You forgot #ad 😂 but really cool does it work on windows also ?
[19:11:21] <Anarchos> companion_cube nice indeed
[19:11:59] <companion_cube> @Et7f3 I don't know, it works in terminals that support ANSI escape codes
[19:12:02] <d_bot> <Et7f3> There is also pastel https://github.com/reasonml/reason-native/tree/master/src/pastel
[19:12:06] *** Joins: aru (~aru@ip-86-49-27-241.net.upcbroadband.cz)
[19:12:25] <d_bot> <Et7f3> It work on cmd.exe IIRC
[19:12:44] <d_bot> <Et7f3> it provide color but with jsx syntax
[19:12:46] <companion_cube> it's super basic tbh
[19:13:11] *** Quits: kakadu (~kakadu@195.19.236.234) (Remote host closed the connection)
[19:27:10] <Anarchos> Et7f3 pastel has no screenshot on its page :/
[19:27:53] <companion_cube> I mean, it's colored text, you've seen it before, no?
[19:51:50] <Anarchos> companion_cube sure, i just need to see it in action to decide if it looks weel or not for my needs
[19:52:20] <companion_cube> all the libraries will give you the same colors, then your imagination is the limit!
[19:53:40] <Anarchos> i have no imagination for good looking logs :/
[19:53:45] *** Joins: mro (~mro@port-92-195-193-31.dynamic.as20676.net)
[19:55:31] <companion_cube> ah, you're looking for a log library? heh
[20:04:04] *** Quits: mro (~mro@port-92-195-193-31.dynamic.as20676.net) (Remote host closed the connection)
[20:06:08] <Leonidas> I heard log4j is all the rage today
[20:10:34] <d_bot> <VPhantom> ep
[20:13:43] <companion_cube> 🔥
[20:22:20] <companion_cube> so what's a good buffer size, anyway
[20:22:26] <companion_cube> 16kb? 64kb? so many choices
[20:24:26] *** Joins: mro (~mro@port-92-195-193-31.dynamic.as20676.net)
[20:27:39] *** Joins: rgrinberg (~textual@187.223.209.106)
[20:37:21] *** Quits: gravicappa (~gravicapp@178.214.253.129) (Ping timeout: 252 seconds)
[20:40:09] *** Quits: rgrinberg (~textual@187.223.209.106) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[20:46:57] <d_bot> <darrenldl> im still confused about how the log4j vulnerability works
[20:51:53] <d_bot> <Et7f3> The API https://github.com/esy-ocaml/hello-reason/blob/d5edfdaaa284620a493bea1451737a27e9308b4f/lib/Util.re#L2 if you come from the web you already see the color. If not you may get either one of those line.
[20:51:53] <d_bot> <Et7f3> https://cdn.discordapp.com/attachments/436568060288172044/918915437864046612/unknown.png
[20:52:41] <d_bot> <Et7f3> the jsx just generate a string you can dump with print_endline
[20:54:04] *** Quits: mro (~mro@port-92-195-193-31.dynamic.as20676.net) (Quit: Leaving...)
[20:56:11] *** Quits: Haudegen (~quassel@91.114.49.10) (Quit: Bin weg.)
[21:22:33] *** Joins: rgrinberg (~textual@2806:101e:7:6946:a872:19a1:2e93:fad2)
[21:34:12] *** Quits: Anarchos (~Anarchos@192.54.145.137) (Quit: Client closed)
[21:58:57] *** Quits: bartholin (~bartholin@158.110.70.215) (Quit: Leaving)
[22:07:42] *** Joins: kronicmage (user55138@neotame.csclub.uwaterloo.ca)
[22:08:34] <kronicmage> Hey folks, is there an equivalent of Haskell's `(>>) a b = a >>= fun _ -> b` in Jane street core or elsewhere?
[22:12:54] <zozozo> kronicmage: I don't think so, for the very good reason that since ocaml evaluates arguments before the function call, the b argument would not be "hidden"behind the function
[22:13:29] <zozozo> Plus, given the current order of evaluation of arguments, b would be evaluated before a, if I'm not mistaken
[22:14:19] *** Quits: rgrinberg (~textual@2806:101e:7:6946:a872:19a1:2e93:fad2) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[22:15:27] *** Joins: mro (~mro@port-92-195-193-31.dynamic.as20676.net)
[22:15:30] *** Joins: Haudegen (~quassel@178.115.237.87.static.drei.at)
[22:15:33] <d_bot> <arctumn> Lazy library wont help him?
[22:15:42] <kronicmage> Yeah I was just gonna say that
[22:16:08] <kronicmage> You think we can write `(>>) a b = a >>= \fun _ -> Lazy.force b` instead?
[22:16:43] <kronicmage> It would be less ergonomical then Haskell sure, but  maybe we can write a ppx similar to ppx_let for that
[22:17:37] <zozozo> Recent versions of ocaml have had monadic let* operators introduced for that kind of thing actually
[22:18:18] <zozozo> Cf https://ocaml.org/manual/bindingops.html
[22:18:29] <companion_cube> still kind of sad that `;*` isn't sugar for `let*() = … in`
[22:19:10] <d_bot> <antron> companion_cube: might be very amusing with all the string you can substitute for `*`
[22:19:16] *** Quits: mro (~mro@port-92-195-193-31.dynamic.as20676.net) (Remote host closed the connection)
[22:26:31] <companion_cube> do_a ;!??!?!?!? do_b
[22:26:59] <companion_cube> (gota get the right operator, not ;!??!!¿!?)
[22:27:14] <d_bot> <antron> RIP
[23:31:24] <d_bot> <VPhantom> I wasn't a fan of the chosen syntax for let bindings, but actually using them they quickly grew on me. It's as close as you can get to looking and feeling exactly like regular bindings, especially with the later addition of let punning.
[23:38:30] *** Joins: mro (~mro@port-92-195-193-31.dynamic.as20676.net)
