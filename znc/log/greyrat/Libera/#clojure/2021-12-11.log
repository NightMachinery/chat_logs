[00:03:05] *** Quits: darkstarx (~darkstard@50.39.115.145) (Read error: Connection reset by peer)
[00:05:57] *** Joins: darkstarx (~darkstard@50.39.115.145)
[00:06:53] *** Quits: darkstarx (~darkstard@50.39.115.145) (Remote host closed the connection)
[00:07:06] *** Joins: tatsumaru (~tatsumaru@78.83.244.47)
[00:07:20] *** Joins: darkstarx (~darkstard@50.39.115.145)
[00:15:03] *** Quits: azimut_ (~azimut@gateway/tor-sasl/azimut) (Ping timeout: 276 seconds)
[00:33:01] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[00:35:40] *** Quits: shiranaihito_ (~textual@123-192-192-149.dynamic.kbronet.com.tw) (Quit: My MacBook Air has gone to sleep. ZZZzzzâ€¦)
[00:38:07] *** Quits: uncleyear (~ian@pppoe.178-66-158-210.dynamic.avangarddsl.ru) (Remote host closed the connection)
[00:40:22] *** Joins: uncleyear (~ian@pppoe.178-66-158-210.dynamic.avangarddsl.ru)
[00:43:01] *** Joins: cmiles74 (~miles@068-184-030-013.res.spectrum.com)
[01:07:13] *** Quits: lagash (lagash@lagash.shelltalk.net) (Ping timeout: 252 seconds)
[01:15:49] <mwnaylor> Is there a way use merge-with so that it operates like update-in?
[01:18:08] <mwnaylor> I have nested maps, need to combine the values when the keys like [1 1] match. I'm using nested hash-maps to represent a sparse 2 dimensional grid.
[01:21:25] <ridcully> if you use [x y] as key, that would not be nested?  or did you mean you want to use [1 1] like in update-in?
[01:22:18] <mwnaylor> Like in update-in.
[01:22:49] <mwnaylor> Merging {0 {0 1}} and {0 {0 2}} would yield {0 {0 3}}
[01:25:29] <ridcully> something like this maybe: (merge-with (partial merge-with into) {1 {2 3}} {1 {3 4}})
[01:25:31] <mwnaylor> {[0 0] 4} would not be nested, as it is one level hash-map with a (slightly) complex structure as a key.
[01:26:26] <ridcully> i used the [x y] keys recently in aoc and last year, so i was confused, what you meant by that and being nested
[01:27:44] *** Quits: cmiles74 (~miles@068-184-030-013.res.spectrum.com) (Ping timeout: 268 seconds)
[01:28:01] <ridcully> (or rather + instead of into if you want to sum them up)
[01:32:56] <mwnaylor> I think I may have to go back to {[x y] val} vs {x {y val}} if I want my merge-with to do the job.
[01:42:18] <ridcully> have you tried (merge-with (partial merge-with +) ...)?
[01:42:52] *** Joins: schmudde (~schmudde@216.169.6.249)
[01:49:29] *** Joins: Ilyu (~quassel@166.215.82.79.rev.sfr.net)
[01:50:23] *** Joins: geenvoud (~geenvoud@user/geenvoud)
[01:52:36] *** Joins: peterhil_ (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi)
[01:53:21] *** Quits: peterhil_ (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi) (Remote host closed the connection)
[01:55:12] *** Quits: peterhil (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi) (Read error: Connection reset by peer)
[01:57:55] *** Joins: cmiles74 (~miles@068-184-030-013.res.spectrum.com)
[02:00:51] *** Joins: lagash (lagash@lagash.shelltalk.net)
[02:04:10] <mwnaylor> I did, got the same result as (merge-with + ...)
[02:15:04] *** Quits: schmudde (~schmudde@216.169.6.249) (Ping timeout: 256 seconds)
[02:20:55] <ridcully> that would give you an exception while the other version does not (at least for your example maps given)
[02:38:09] *** Quits: cmiles74 (~miles@068-184-030-013.res.spectrum.com) (Ping timeout: 250 seconds)
[02:58:26] *** Joins: libertyprime (~libertypr@125-239-52-43-fibre.sparkbb.co.nz)
[03:05:07] *** Joins: peterhil (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi)
[03:09:17] *** Joins: schmudde (~schmudde@216.169.6.249)
[03:09:38] *** Quits: geenvoud (~geenvoud@user/geenvoud) (Ping timeout: 260 seconds)
[03:16:50] *** Quits: uncleyear (~ian@pppoe.178-66-158-210.dynamic.avangarddsl.ru) (Ping timeout: 256 seconds)
[03:19:37] *** Quits: xulfer (uid452788@id-452788.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[03:25:05] *** Quits: libertyprime (~libertypr@125-239-52-43-fibre.sparkbb.co.nz) (Ping timeout: 252 seconds)
[03:25:08] *** Quits: to-hu (~Thunderbi@p200300e9af32e700ac10509dd529f8cc.dip0.t-ipconnect.de) (Remote host closed the connection)
[03:33:31] *** Quits: seschwar (~seschwar@user/seschwar) (Quit: :wq)
[03:35:30] *** Joins: geenvoud (~geenvoud@user/geenvoud)
[03:41:12] *** Quits: geenvoud (~geenvoud@user/geenvoud) (Ping timeout: 256 seconds)
[03:52:58] *** Joins: geenvoud (~geenvoud@user/geenvoud)
[03:53:56] *** Joins: libertyprime (~libertypr@114.23.138.49)
[03:57:43] *** Quits: geenvoud (~geenvoud@user/geenvoud) (Ping timeout: 252 seconds)
[04:10:38] *** Quits: tatsumaru (~tatsumaru@78.83.244.47) (Quit: Leaving.)
[04:13:35] <technomancy> this log4j thing has me wondering how long it's gonna be before someone gets their ass kicked by the catastrophically bad default *read-eval* settings
[04:14:09] <technomancy> I guess it's probably already happened and we just haven't heard about it
[04:15:54] *** Joins: AlaskanEmily (~AlaskanEm@user/alaskanemily)
[04:16:05] <technomancy> you get to thinking thoughts like "how could someone ever come up with such an unhinged idea as allowing logging an untrusted string to lead to loading a class file over the network" and then *read-eval* is waves to you and goes "sup"
[04:21:48] <v3ga> o_O 
[04:24:32] *** Quits: schmudde (~schmudde@216.169.6.249) (Ping timeout: 240 seconds)
[04:25:37] *** Quits: libertyprime (~libertypr@114.23.138.49) (Ping timeout: 250 seconds)
[04:25:45] <ridcully> tbf i did not know about this feature... i learned only last year about the horrible defaults that yaml force on me.  for *read-eval* i at least had the impression that the problem is known.  might be just a bubble thing though...
[04:26:15] <technomancy> it's roughly as bad as yaml
[04:27:02] <technomancy> I actually found someone at work calling clojure.core/read-string on an edn file, which is extremely ironic
[04:27:03] <ridcully> yeah.  same angle of attack... but it hit me just as bad - why would you make this the default?!
[04:27:07] <technomancy> (it was just in a test suite in this case)
[04:27:41] <ridcully> or maybe not even a default, but think that is a good feature
[04:28:17] <technomancy> ridcully: dunno but the ticket which suggested fixing the default got closed by telling the person who opened it that they don't know anything about the compiler and how dare they try to change code they don't understand
[04:29:40] <ridcully> i was talking about yaml/log4j - but it guess same rules apply here
[04:29:46] *** Joins: cmiles74 (~miles@068-184-030-013.res.spectrum.com)
[04:30:01] <technomancy> better not throw stones when you live in a glass house
[04:30:26] <ridcully> yeah
[04:48:04] *** Quits: cmiles74 (~miles@068-184-030-013.res.spectrum.com) (Ping timeout: 256 seconds)
[05:51:32] *** Quits: Techcable (~Techcable@168.235.93.147) (Ping timeout: 256 seconds)
[05:52:23] *** Joins: libertyprime (~libertypr@115-189-100-157.mobile.spark.co.nz)
[05:59:02] *** Quits: libertyprime (~libertypr@115-189-100-157.mobile.spark.co.nz) (Ping timeout: 260 seconds)
[06:26:56] *** Joins: libertyprime (~libertypr@115-189-100-157.mobile.spark.co.nz)
[06:27:46] *** Joins: cmiles74 (~miles@068-184-030-013.res.spectrum.com)
[06:31:15] *** Joins: matty_matt (~matt@135.129.244.71)
[06:34:30] *** Quits: libertyprime (~libertypr@115-189-100-157.mobile.spark.co.nz) (Ping timeout: 260 seconds)
[06:35:37] *** Joins: poselyqualityles (~poselyqua@user/poselyqualityles)
[06:41:59] *** Quits: mwnaylor (~user@2601:5ce:4300:5560::68b3) (Ping timeout: 252 seconds)
[06:45:22] *** Quits: cmiles74 (~miles@068-184-030-013.res.spectrum.com) (Ping timeout: 256 seconds)
[06:46:33] *** Joins: libertyprime (~libertypr@115-189-100-157.mobile.spark.co.nz)
[06:50:28] *** Quits: matty_matt (~matt@135.129.244.71) (Ping timeout: 256 seconds)
[06:57:18] *** Quits: libertyprime (~libertypr@115-189-100-157.mobile.spark.co.nz) (Quit: leaving)
[07:04:12] *** Joins: Pixel_Outlaw (~ryan@2600-6c67-5e3f-ed1c-80d2-ada4-af0a-ea0b.res6.spectrum.com)
[07:07:17] <Pixel_Outlaw> Hello all, if I want to define a bunch of methods programmatically can I specify a builder function with defmethod in the body or is that the kind of thing that should be in a macro?
[07:08:01] <Pixel_Outlaw> It's not really certain of defmethod is a toplevel type function. Coming from Common Lisp I'm not sure if it's legal to use in a function body.
[07:09:54] <jeaye> If the contents of the defmethod is dynamic, you need a macro. Otherwise, you're fine.
[07:11:11] <jeaye> Pixel_Outlaw: https://gist.github.com/jeaye/e7051d439f70bf23f8c5605f08a52a0f
[07:12:04] <jeaye> In clojure, you can def/defn/etc from anywhere and it affects the global scope.
[07:12:47] <Pixel_Outlaw> Ah, that's really good to know. Thanks jeaye.
[07:18:03] <Pixel_Outlaw> I saw a horrible "tutorial" video where a guy was using def inside functions as if it was let trying to make locally bound symbols. Pretty spooky people "helping' others before they get enough training themselves.
[07:21:12] *** Joins: libertyprime (~libertypr@118-92-70-226.dsl.dyn.ihug.co.nz)
[07:26:13] *** Quits: jespada (~jespada@87.74.33.157) (Ping timeout: 240 seconds)
[07:28:22] *** Joins: jespada (~jespada@87.74.33.157)
[07:39:55] *** Quits: RedNifre (~michael@dslb-002-206-121-223.002.206.pools.vodafone-ip.de) (Ping timeout: 252 seconds)
[07:41:41] *** Joins: RedNifre (~michael@dslb-002-206-109-165.002.206.pools.vodafone-ip.de)
[07:44:02] *** Quits: poselyqualityles (~poselyqua@user/poselyqualityles) (Ping timeout: 260 seconds)
[07:54:34] *** Joins: geenvoud (~geenvoud@user/geenvoud)
[07:59:21] *** Quits: geenvoud (~geenvoud@user/geenvoud) (Ping timeout: 252 seconds)
[08:00:57] *** Joins: Techcable (~Techcable@168.235.93.147)
[08:15:39] *** Quits: libertyprime (~libertypr@118-92-70-226.dsl.dyn.ihug.co.nz) (Quit: leaving)
[08:59:29] *** Joins: shiranaihito (~textual@123-192-192-149.dynamic.kbronet.com.tw)
[09:08:23] *** Joins: libertyprime (~libertypr@118-92-70-226.dsl.dyn.ihug.co.nz)
[09:18:04] *** Quits: Pixel_Outlaw (~ryan@2600-6c67-5e3f-ed1c-80d2-ada4-af0a-ea0b.res6.spectrum.com) (Quit: Leaving)
[09:28:00] *** Joins: mbuf (~Shakthi@122.178.201.137)
[09:48:44] *** Quits: AlaskanEmily (~AlaskanEm@user/alaskanemily) (Remote host closed the connection)
[09:55:22] *** Joins: geenvoud (~geenvoud@user/geenvoud)
[10:00:18] *** Quits: geenvoud (~geenvoud@user/geenvoud) (Ping timeout: 260 seconds)
[10:09:09] *** Quits: libertyprime (~libertypr@118-92-70-226.dsl.dyn.ihug.co.nz) (Quit: leaving)
[12:15:58] *** Quits: shiranaihito (~textual@123-192-192-149.dynamic.kbronet.com.tw) (Quit: My MacBook Air has gone to sleep. ZZZzzzâ€¦)
[12:41:40] *** Joins: shiranaihito (~textual@219.85.168.139)
[12:55:34] *** Quits: peterhil (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi) (Remote host closed the connection)
[12:55:48] *** Joins: peterhil (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi)
[13:06:19] *** Quits: Colt (~Colt@user/colt) (Remote host closed the connection)
[13:10:06] *** Quits: peterhil (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi) (Remote host closed the connection)
[13:10:09] *** Joins: peterhil_ (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi)
[13:11:50] *** Joins: peterhil__ (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi)
[13:15:22] *** Quits: peterhil_ (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi) (Ping timeout: 260 seconds)
[13:17:53] *** Joins: peterhil_ (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi)
[13:18:06] *** Quits: peterhil__ (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi) (Remote host closed the connection)
[13:22:03] *** Quits: peterhil_ (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi) (Remote host closed the connection)
[13:24:31] *** Joins: peterhil_ (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi)
[13:24:59] *** Quits: peterhil_ (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi) (Remote host closed the connection)
[13:25:17] *** Joins: peterhil_ (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi)
[13:43:17] *** Quits: jespada (~jespada@87.74.33.157) (Ping timeout: 252 seconds)
[13:45:46] *** Joins: jespada (~jespada@87.74.33.157)
[13:53:37] *** Joins: seschwar (~seschwar@user/seschwar)
[13:57:01] *** Joins: geenvoud (~geenvoud@user/geenvoud)
[13:57:34] *** Joins: to-hu (~Thunderbi@p200300e9af32e700803ae4b335dcad90.dip0.t-ipconnect.de)
[14:00:54] *** Joins: narendraj9 (~user@2a02:8109:b63f:ff7c::d8fb)
[14:01:56] *** Quits: geenvoud (~geenvoud@user/geenvoud) (Ping timeout: 268 seconds)
[14:06:23] *** Joins: uncleyear (~ian@pppoe.178-66-158-210.dynamic.avangarddsl.ru)
[14:42:06] *** Quits: shiranaihito (~textual@219.85.168.139) (Quit: My MacBook Air has gone to sleep. ZZZzzzâ€¦)
[14:55:59] *** Joins: tatsumaru (~tatsumaru@78.83.244.47)
[14:56:24] *** Joins: shiranaihito (~textual@2001-b011-4000-193c-3c10-a770-dacd-227d.dynamic-ip6.hinet.net)
[14:56:28] <tatsumaru> guys, super noob question, but when I do something lie (let [x 3] x) what is the second x actually doing? is it a function call?
[14:57:03] <tatsumaru> i know it returns the value that let has bound to x from the vector, but I am wondering why
[14:57:50] <tatsumaru> actually is [x 3] even a vector
[14:58:32] <croeso[m]> second x is just an expression which evaluates to the value the x is holding
[14:59:15] <tatsumaru> croeso[m]: but why can't I just type 'x' in the repl and get its value this way?
[15:00:00] <tatsumaru> oh i am dumb, it's because of let's scope right?
[15:00:18] <croeso[m]> because it is bound inside (let )
[15:00:40] <croeso[m]> and doesn't exist outside its scope
[15:01:30] <croeso[m]> if you want to have its value in repl just make (def x (let [x 3] x))
[15:28:53] *** Quits: narendraj9 (~user@2a02:8109:b63f:ff7c::d8fb) (Remote host closed the connection)
[15:31:25] *** Joins: narendraj9 (~user@2a02:8109:b63f:ff7c::62fc)
[15:34:06] *** Parts: pinage404 (~pinage404@2001:470:69fc:105::25c) ()
[15:56:32] *** Joins: mwnaylor (~user@2601:5ce:4300:5560::68b3)
[15:57:49] *** Joins: geenvoud (~geenvoud@user/geenvoud)
[16:02:13] *** Quits: son0p (~ff@2800:484:1d81:b700:d40b:900:b387:320) (Ping timeout: 250 seconds)
[16:06:22] *** Quits: geenvoud (~geenvoud@user/geenvoud) (Ping timeout: 256 seconds)
[16:19:50] *** Quits: narendraj9 (~user@2a02:8109:b63f:ff7c::62fc) (Remote host closed the connection)
[16:48:29] *** Joins: xulfer (uid452788@id-452788.ilkley.irccloud.com)
[17:36:26] *** Joins: schmudde (~schmudde@216.169.6.249)
[17:38:00] *** Joins: Colt (~Colt@user/colt)
[17:56:59] *** Quits: Colt (~Colt@user/colt) (Remote host closed the connection)
[17:57:32] *** Joins: Colt (~Colt@user/colt)
[18:00:39] *** Quits: Colt (~Colt@user/colt) (Remote host closed the connection)
[18:01:00] *** Joins: Colt (~Colt@user/colt)
[18:02:32] *** Quits: Colt (~Colt@user/colt) (Remote host closed the connection)
[18:03:08] *** Joins: geenvoud (~geenvoud@user/geenvoud)
[18:04:09] *** Joins: Colt (~Colt@user/colt)
[18:04:29] *** Quits: Colt (~Colt@user/colt) (Remote host closed the connection)
[18:04:56] *** Joins: Colt (~Colt@user/colt)
[18:05:10] *** Quits: Colt (~Colt@user/colt) (Remote host closed the connection)
[18:07:53] *** Quits: geenvoud (~geenvoud@user/geenvoud) (Ping timeout: 250 seconds)
[18:10:38] *** Quits: uncleyear (~ian@pppoe.178-66-158-210.dynamic.avangarddsl.ru) (Remote host closed the connection)
[18:18:32] *** Quits: opqdonut (opqdonut@pseudo.fixme.fi) (Ping timeout: 240 seconds)
[18:21:13] *** Joins: opqdonut (opqdonut@pseudo.fixme.fi)
[18:37:33] *** Joins: matty_matt (~matt@135.129.244.71)
[18:46:14] *** Joins: uncleyear (~ian@pppoe.178-66-158-210.dynamic.avangarddsl.ru)
[19:01:42] *** Quits: selfsymmetric-mu (~matt@c-73-10-148-139.hsd1.nj.comcast.net) (Remote host closed the connection)
[19:05:53] <tatsumaru> hey guys and clue how to do a new line in emacs cider repl? i tried shift+ enter, but it doesnt work
[19:07:10] *** Quits: matty_matt (~matt@135.129.244.71) (Ping timeout: 268 seconds)
[19:13:58] *** Quits: tatsumaru (~tatsumaru@78.83.244.47) (Quit: Leaving.)
[19:19:00] *** Joins: matty_matt (~matt@135.129.244.71)
[19:25:26] *** Quits: matty_matt (~matt@135.129.244.71) (Ping timeout: 260 seconds)
[19:30:35] *** Joins: selfsymmetric-mu (~matt@c-73-10-148-139.hsd1.nj.comcast.net)
[19:31:12] <selfsymmetric-mu> Hey, if anyone wants to debug their Advent of Code solutions today by rendering their octopus map as an image, I've cooked up some rendering code for that: https://pastie.io/raw/bchmqo
[19:31:54] <selfsymmetric-mu> In Emacs, if you `(setq cider-repl-use-pretty-printing nil)` and `(setq cider-repl-use-content-types t)`, then calling `(render example)` will show the map as an image in your REPL.
[19:32:14] *** Joins: vchepeli (~vchepeli@217.30.64.206)
[19:33:59] *** Quits: vchepeli (~vchepeli@217.30.64.206) (Client Quit)
[19:37:22] *** Joins: matty_matt (~matt@135.129.244.71)
[19:42:22] *** Joins: dfreeman (~dfreeman@user/dfreeman)
[20:03:25] <wink> I'm struggling to dynamiccally require a file. what works: (let [fun (resolve (symbol (str "aoc.day" (:day opt) "/run")))] (fun "foo")) - what doesn't work: (let [xns (resolve (symbol (str "aoc.day" (:day opt))))] (require xns)) - any idea?
[20:03:46] <wink> something like (require 'clojure.string) should work in a function, I guess
[20:03:55] *** Joins: geenvoud (~geenvoud@user/geenvoud)
[20:04:32] <technomancy> resolve won't load code that hasn't been required
[20:04:48] <technomancy> oh, that's not your question
[20:05:01] <technomancy> the second one is trying to resolve before it requires, I guess
[20:05:32] <wink> yeah but the error is not in th elet-form, but on calling require
[20:05:37] <wink> but good point, I will fix this first
[20:05:49] <technomancy> probably because resolve on that symbol will be nil
[20:06:44] <wink> I think that was it, thanks
[20:07:09] <technomancy> cool
[20:07:10] <wink> the first time I'm conditionally requiring methinks
[20:08:50] *** Quits: geenvoud (~geenvoud@user/geenvoud) (Ping timeout: 268 seconds)
[20:09:34] <technomancy> don't make it a habit =)
[20:13:10] *** Quits: matty_matt (~matt@135.129.244.71) (Ping timeout: 268 seconds)
[20:19:00] *** Joins: matty_matt (~matt@135.129.244.71)
[20:20:12] *** Joins: shiranaihito_ (~textual@123-192-192-149.dynamic.kbronet.com.tw)
[20:23:43] *** Quits: shiranaihito (~textual@2001-b011-4000-193c-3c10-a770-dacd-227d.dynamic-ip6.hinet.net) (Ping timeout: 250 seconds)
[20:58:12] *** Quits: matty_matt (~matt@135.129.244.71) (Ping timeout: 256 seconds)
[20:59:37] *** Joins: matty_matt (~matt@135.129.244.71)
[21:04:01] *** Quits: matty_matt (~matt@135.129.244.71) (Ping timeout: 252 seconds)
[21:09:53] *** Quits: schmudde (~schmudde@216.169.6.249) (Ping timeout: 252 seconds)
[21:13:30] *** Joins: cmiles74 (~miles@068-184-030-013.res.spectrum.com)
[21:24:05] *** Joins: matty_matt (~matt@135.129.244.71)
[21:25:54] *** Quits: mbuf (~Shakthi@122.178.201.137) (Quit: Leaving)
[21:48:39] *** Quits: cmiles74 (~miles@068-184-030-013.res.spectrum.com) (Ping timeout: 250 seconds)
[22:04:32] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.3)
[22:04:53] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[22:27:04] *** Joins: schmudde (~schmudde@216.169.6.249)
[22:29:46] *** Quits: matty_matt (~matt@135.129.244.71) (Ping timeout: 260 seconds)
[22:42:57] *** Joins: AlaskanEmily (~AlaskanEm@user/alaskanemily)
[22:54:11] *** Joins: Solid (~slot@xmonad/slotThe)
[22:54:39] *** Joins: tatsumaru (~tatsumaru@78.83.244.47)
[22:55:01] <tatsumaru> hey guys, can I ask a fn to be executed several times like this (* (fn-name) 10)
[22:55:10] <tatsumaru> i am getting some error that I can decipher
[22:55:24] <tatsumaru> can't*
[22:55:53] *** Joins: matty_matt (~matt@135.129.244.71)
[22:56:41] <ridcully> tatsumaru: like iterate?
[22:57:21] <ridcully> please share the code and the error via some paste-site
[23:03:11] *** Quits: matty_matt (~matt@135.129.244.71) (Ping timeout: 250 seconds)
[23:06:14] <tatsumaru> ridcully: https://paste.rs/web
[23:06:50] <tatsumaru> it's not iteration it's an exercise, it also includes a clj file I am loading at the beginning which is a few dozen lines
[23:07:02] <tatsumaru> sorry I didn't phrase this correctly
[23:07:21] <ridcully> i think this is the wrong link
[23:07:31] <tatsumaru> https://paste.rs/zhL
[23:07:33] <tatsumaru> sorry
[23:08:01] <tatsumaru> so the exercise is a robot that's making a cake, and I am trying to add 10 eggs at once this way
[23:08:32] <tatsumaru> and (add-egg) just executes several other function which constitute the adding of the egg
[23:08:33] <ridcully> add-egg seem to return a keyword
[23:08:43] <ridcully> so the question here is, what defines 10 eggs?
[23:09:04] <ridcully> a map where :egg is 10?  or a list of :egg ten times?
[23:09:17] <tatsumaru> i mean if I just type (add-egg) 10 times one after another it will work without an error
[23:09:40] <ridcully> then add-egg is not pure?
[23:10:07] *** Quits: dfreeman (~dfreeman@user/dfreeman) (Ping timeout: 250 seconds)
[23:10:21] <tatsumaru> does that mean side effects?
[23:10:51] <ridcully> yes
[23:11:07] <tatsumaru> I am not sure how to troubleshoot this
[23:11:52] <tatsumaru> this is the full robot code: https://paste.rs/Heh
[23:12:25] *** Joins: geenvoud (~geenvoud@user/geenvoud)
[23:12:39] <ridcully> if you really just want to call the function n times, you can use dotimes.  e.g. (dotimes [_ 10] (add-egg))
[23:13:18] <tatsumaru> so the error is due to incorrect syntaxis?
[23:15:19] <ridcully> correct.  `*` is just multiplication.  your add-egg returns a keyword and then you do (* :dunno 10)
[23:16:24] <tatsumaru> does this mean that the function needs to return (add-egg) in order for this to work with *
[23:17:02] *** Quits: geenvoud (~geenvoud@user/geenvoud) (Ping timeout: 256 seconds)
[23:17:13] <ridcully> (* (x) 10) does not run x 10 times.  it mulitplies the _result_ of x with 10.  if you want to execute x ten times, you can use dotimes
[23:17:41] <tatsumaru> I understand, I am just wondering if I could hack it to work with *
[23:18:18] <tatsumaru> is it possible to make a function which returns itself as a value?
[23:18:18] <ridcully> you can write your own `*`
[23:18:36] <jeaye> It would need to be a macro, though.
[23:18:53] <jeaye> And it would use `dotimes` ;)
[23:18:54] <ridcully> declare and then return it?
[23:19:31] <tatsumaru> that would just be recursion though right?
[23:19:49] <jeaye> No.
[23:20:28] <jeaye> Oh, yes to returning itself. No if you're asking about `dotimes`.
[23:20:55] <tatsumaru> (defn add-egg [] (grab :egg) (add-to-bowl) (add-egg)) could I use something like this to return (add-egg) as value so that * would work?
[23:21:20] <jeaye> Are you building a whole DSL or just trying to change the way you write Clojure?
[23:21:50] <jeaye> Because _any_ Clojure dev is going to think (* (x) 10) calls x and multiplies the result by 10. You shouldn't mess with that.
[23:22:17] <jeaye> That's how you end up with a hot mess like Common Lisp.
[23:22:19] * jeaye ducks.
[23:22:26] <tatsumaru> neither, I am just starting out with clojure and exploring what's possible
[23:22:41] <jeaye> This is possible. Do not do it.
[23:23:02] *** Joins: lnostdal (~lnostdal@host-90-235-13-20.mobileonline.telia.com)
[23:23:31] *** Quits: ToxicFrog (~ToxicFrog@198-200-100-178.cpe.distributel.net) (Ping timeout: 265 seconds)
[23:24:53] <jeaye> Also, it looks to me like the code you're writing isn't pure at all. Grabbing an egg, adding it to a boal, etc are all effects.
[23:24:55] <ridcully> tatsumaru: what about this: write a function `times`.  it takes another function to call n times.  then you can write (times add-egg 10)
[23:27:15] <jeaye> One might strive to describe the world you're creating in data, so grabbing an egg or putting it in a bowl is just doing pure data transfomations. That's what Clojure is all about. https://gist.github.com/jeaye/b20429027fd50a20b0727988d195129e
[23:27:44] <ridcully> (or put the number first and then allow passing of args to f work.  but if you want to use the "call" syntax like in your `*` attempt, you would have to write a macro
[23:29:22] <tatsumaru> jeaye: I don't want to change clojure I am still figuring out the logic. I understand now why the * thing doesn't make sense. there's no way for (add-egg) to return itself without being a recursion so therefore it's returning something else (probably (add-to-bowl) which is the last step so essentially it's (* (add-to-bowl) 10)
[23:30:46] <tatsumaru> ridcully: would that work with dotimes
[23:31:32] <jeaye> This is an introductory phase, where you're at right now. That whole program can be modeled without mutable state, which would be the idiomatic way in Clojure. Doing that would also solve these problems with composing your actions, since it's easy to describe them as data.
[23:32:01] <tatsumaru> jeaye: I am not sure if it's pure maybe the guy who's doing the tutorial has OOP background and is doing it in an impure way
[23:32:03] <ridcully> tatsumaru: yes dotimes or thing about other ways to do this eagerly (e.g. loop/recur would also work)
[23:32:08] <jeaye> But doing that would require a change in mindset (to think functionally and in terms of data) and that doesn't come automatically.
[23:32:21] <jeaye> tatsumaru: It's as impure as it gets. :)
[23:32:31] <tatsumaru> jeaye: actually I dont need to change my mindset because this is my first programming language lol
[23:32:42] <ridcully> tatsumaru: are you doing this to learn about ref/dosync?
[23:32:51] <jeaye> Oh. Who the hell is teaching you Clojure, man?
[23:32:56] <jeaye> Ditch that guy immediately.
[23:33:04] <tatsumaru> jeaye: just some course I found lol
[23:33:16] <jeaye> You're learning Python in Clojure syntax; it's a shame.
[23:33:47] <tatsumaru> alright, ditching the guy
[23:33:57] <jeaye> Have you read through Brave Clojure?
[23:34:21] <tatsumaru> yeah I started, but it was a bit difficult for me
[23:34:55] <tatsumaru> I guess I will just have to stick with it until I figure it out
[23:34:56] <jeaye> Ok, great. Press on with that. What was difficult? You can bring your questions in here.
[23:35:35] <jeaye> Working through that book and then figuring out your questions will result in you writing much better Clojure, I think.
[23:35:53] <ridcully> tatsumaru: the code you have shared shows the use of ref/dosync.  this is used to syncronize concurrent programs.  this not the stuff someone learning the language should learn about
[23:36:39] <jeaye> The guy teaching it probably doesn't know how to program without global, mutable state and also doesn't want to use an atom, for some reason.
[23:36:54] <ridcully> tatsumaru: so either you have picked an advanced topic or a horrible teacher
[23:37:49] <tatsumaru> the actual exercises are not advanced at all, a 5 year old can do them, so apparently it's not a good teacher
[23:37:51] *** Joins: geenvoud (~geenvoud@user/geenvoud)
[23:38:54] <tatsumaru> i guess I should do the hard thing and keep on with the brave book, it's probably how the brain learns best 
[23:39:35] <ridcully> the "call functions to program the robot" is the easy part.  the machinery used to allow you to do that might be not
[23:40:09] <tatsumaru> the teacher was some guy Eric Normand, is he popular?
[23:40:16] <jeaye> Once you have a repl set up, go through brave clj and tinker with each part you see in your repl. When something doesn't make sense, play around with it in the repl and see how it works. Come in here with your questions if you can't figure it out.
[23:40:39] <jeaye> Normand is popular and I'm surprised he's teaching clj like that.
[23:45:12] <ridcully> given the `(require...)` i'd assume, that this just loaded in the repl and you are supposed to "play with the bot" and by that learn a bit of syntax?  or what is the premise of this course?
[23:49:27] <Para> How new to programming are you in general? Or seasoned :)
[23:49:59] *** Quits: paddymahoney (~paddymaho@cpe9050ca207f83-cm9050ca207f80.cpe.net.cable.rogers.com) (Ping timeout: 265 seconds)
[23:50:10] <jeaye> Said it's his first lang.
[23:50:16] <Para> Ah, missed that.
[23:52:53] <jeaye> tatsumaru: How far are you into brave clj? Once you're at the point where you have the syntax down and you're trying to figure out how to write things functionally, ping me. We could set up a call and I'll walk you through some of the core philosophical points of data-oriented programming.
[23:53:15] <jeaye> Just gave that exact talk at work, to a new hire.
[23:56:34] <tatsumaru> ridcully: yes, you just play with the bot
[23:57:41] <tatsumaru> Para: I've played a little bit with other languages like C, Python, JS, and oddly enough with esoteric stuff like Prolog, Scheme, but I was mostly sampling never really delved too deep into anything.
[23:58:19] <ridcully> tatsumaru: from the beginning it was not clear, if this is your code.  so ignore that code you got there.  it's at best to teach about an advanced topic.
[23:58:19] <tatsumaru> jeaye: just finished chapter 3, now I am starting it from the beginning.
[23:58:38] <tatsumaru> of the chapter that is
[23:59:01] <jeaye> Chapter 3 is a big one, if I recall correctly.
[23:59:15] <jeaye> Make sure you grok all of that. Come into here with questions.
[23:59:41] <tatsumaru> sure
