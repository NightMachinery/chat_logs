[00:00:11] <sham1> typedef'ing structs just seems weird
[00:00:44] *** Joins: Crescendo (~Crescendo@user/crescendo)
[00:01:04] <nitrix> For opaque structs, I prefer declaring it and leaving it be an incomplete type.
[00:01:41] <khoa> fizzie: What is div_t ?
[00:01:50] <fizzie> The return type of the `div` function.
[00:01:59] <fizzie> ,c11 7.22.6.2p3
[00:02:00] <khoa> I mean what is the point of div_t ?
[00:02:00] <candide> http://www.iso-9899.info/n1570.html#7.22.6.2p3 [The div, ldiv, and lldiv functions] return a structure of type div_t, ldiv_t, and lldiv_t, respectively, comprising both the quotient and the remainder. The structures shall contain (in either order) the members quot (the quotient) and rem (the remainder), each of which has the same type as the arguments numer and denom. If either part of the result cannot b... <truncated; https://0x0.st/-d4G.txt>
[00:02:09] *** Parts: adwwad123 (~adwwad123@2a02:2698:182a:f21:c04d:48e5:6c83:6c63) ()
[00:02:15] <khoa> What's wrong with a / b and a % b ?
[00:02:33] <twkm> that's potentially two operations.
[00:02:42] <sham1> Well the point is that if you need both the quotient and the remainder, you don't need to have two operations
[00:03:02] <sham1> Many instruction sets have a "divmod" kinda deal, where the division instruction also gives you the remainder
[00:03:05] *** Quits: Macuser (~Macuser@216.30.159.201) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[00:03:21] <fizzie> I think the history is, back in olden days you couldn't expect a compiler to deal with that sort of thing.
[00:03:24] <sham1> A lot of compilers can optimise it, but sometimes it's nice to just use the div_t
[00:03:27] <nitrix> And since the type is incomplete, you're force to use it via a pointer, which doesn't require a declaration, so it's even simpler.
[00:04:09] <sham1> That's usually what I do with my APIs. The only sad part of it is that you might need to give the user a way to "override" any dynamic allocation functions, if they don't or can't use malloc or some such
[00:04:12] *** Quits: kuber (~kuber@97-113-74-6.tukw.qwest.net) (Quit: leaving)
[00:04:43] <sham1> Although to be honest, the amount of libraries that could have any usage in such a space would be somewhat small
[00:05:37] <twkm> let them register their own allocator, malloc being the default.
[00:06:44] <nitrix> I write initializers bool obj_init(struct obj *this), with the intention that the caller has an automatic variable. Stack-like memory management helps a lot with keeping track of the lifetime of things.
[00:08:13] <nitrix> For data structures that need to manage memory, the struct has a malloc/realloc/free function pointer on it that you can override after initializing it.
[00:08:59] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[00:08:59] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[00:08:59] *** Joins: wroathe (~wroathe@user/wroathe)
[00:09:03] <khoa> That seems a bit excessive isn't it ?
[00:09:24] <khoa> 3 addition pointers per struct instance
[00:09:42] <sham1> Could also have some kind of a `struct library_ctx` which has the allocator functions
[00:10:17] <nitrix> khoa, Those data structures stores a lot more entries, three function pointers is nothing.
[00:10:52] <nitrix> If your data structures have < 10 entries, you probably should not even have them. A simple linear search would be faster.
[00:11:38] *** Quits: cmbengue (~Thunderbi@207.191.249.160) (Quit: Thanks, see you later.)
[00:12:35] <nitrix> Either way, you could use thread_local or some other global mechanism, but I like having granular control of the allocator.
[00:13:27] <nitrix> The performance is irrelevant, it gets amortized by the asymptotic properties of the data structures.
[00:15:11] *** Quits: cation (cation@user/cation) (Quit: Leaving)
[00:21:46] *** Joins: vvlad (~vvlad@dslb-002-205-166-199.002.205.pools.vodafone-ip.de)
[00:26:31] *** Joins: owensjrw (~owensjrw1@2600:1700:b5b0:6380::41)
[00:29:34] <owensjrw> Hello all. I have another silly question. All the examples I see online and all the books I have looked through show int fun(){} if no arguments are passed to the function including main. A mentor had stated that this was a C++ idiom and that for C it should be int fun(void){} to include the main. Where would a newbie like myself learn such things like accepted syntax idioms?
[00:32:45] *** Joins: davidfetter_work (~davidfett@c-73-241-222-148.hsd1.ca.comcast.net)
[00:33:30] *** Quits: kurahaupo (~kurahaupo@220-245-23-126.static.tpgi.com.au) (Ping timeout: 244 seconds)
[00:34:45] *** Quits: johnnyreb (~tth@013-240-158-163.dynamic.caiway.nl) (Ping timeout: 260 seconds)
[00:36:11] *** Joins: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br)
[00:36:20] *** Joins: johnnyreb (~tth@user/johnnyreb)
[00:37:05] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 260 seconds)
[00:37:36] *** Quits: davidfetter_work (~davidfett@c-73-241-222-148.hsd1.ca.comcast.net) (Ping timeout: 245 seconds)
[00:38:30] <khoa> owensjrw: Don't sweat it too much
[00:39:32] <owensjrw> Thank you.
[00:39:46] <khoa> Just do fun(void) and forget about it
[00:40:09] *** Quits: aradesh (~aradesh@user/aradesh) (Quit: WeeChat 1.9.1)
[00:40:21] *** Quits: Darkcoal (~user@139.64.63.46) (Quit: Darkcoal)
[00:40:21] *** Joins: kurahaupo (~kurahaupo@220-245-23-126.static.tpgi.com.au)
[00:40:37] *** Joins: Darkcoal (~user@139.64.63.46)
[00:46:10] *** Quits: Wulf (~Wulf@user/wulf) (Ping timeout: 265 seconds)
[00:46:40] <vdamewood> owensjrw: Generally, you learn from well-written books on the subject.
[00:47:53] *** Joins: monkey_ (~user@190.104.116.134)
[00:48:28] *** Joins: Macuser (~Macuser@216.30.159.201)
[00:48:39] <owensjrw> K&R is a well respected book from what I can tell from the C Community however it is dated a bit, and all other books seem to have equal amount of good and bad press reviews. What would you, not the list above, recommend as a "good book" on the subject.
[00:50:49] <vdamewood> K&R.
[00:50:59] <rndusr> lol
[00:52:56] <vdamewood> With one minor exceptions it teaches a decent subset of the language, there are two extra features that should probably be added, and there's a statement in the first chapter that's no longer true.
[00:53:37] <owensjrw> Please share.
[00:54:05] <nitrix> owensjrw, If the prototype is omitted, the function accepts an arbitrary amount of arguments. With a `void` prototype, it accepts 0 arguments.
[00:55:06] <vdamewood> Oh, Make that only one extra feature that should be added.
[00:55:52] <vdamewood> The problem I have with K&R is that they never specify the return type of main. IN ANSI C (and C90) this would imply a return type of int. This was changed in C99.
[00:57:05] <vdamewood> The first chapter states that C doesn't have threads, as of C11 it does (optionally). And C++-style // comments were added in C99.
[00:57:16] *** Joins: Enitin (Enitin@gateway/vpn/protonvpn/enitin)
[00:59:12] <nitrix> owensjrw, "Arbitrary" in the sense that it isn't known yet, not that the function is variadic (that's stdarg.h and va_list).
[00:59:37] <owensjrw> nitrix: even if a user pushes arguments to the function if the function does not make a call to the argument what risk is there?
[00:59:45] *** Joins: Wulf (~Wulf@user/wulf)
[01:00:48] <nitrix> Pretty severe. The caller and the callee can be in two different libraries, compiled at different times. Depending on the calling convention, one of the two is responsible to cleanup the arguments and it'll do this incorrectly.
[01:00:53] *** Quits: johnnyreb (~tth@user/johnnyreb) (Ping timeout: 244 seconds)
[01:01:09] <owensjrw> vdamewood: interesting I never noticed the lack of return 0 and lack of int for main(){} in the first chapters. My first book was a much disliked "learn C ..... " I wont say it here.
[01:01:38] <vdamewood> in n timeperiods?
[01:01:56] <khoa> My final answer is "... the hard way"
[01:02:16] <nitrix> I personally end main with return EXIT_SUCCESS, to be consistent with the other error handling that uses EXIT_FAILURE.
[01:03:02] *** Joins: johnnyreb (~tth@user/johnnyreb)
[01:03:04] <nitrix> Even though EXIT_SUCCESS is always 0 and main is guaranteed to return zero implicitly when it's omitted.
[01:03:05] *** Joins: nvmd (~nvmd@user/nvmd)
[01:04:48] <khoa> nitrix: Too pragmatic for me
[01:05:13] <owensjrw> I still don't know the difference between return 0, the system call EXIT, and just leaving main with '}'. Is this just preference?
[01:05:18] *** Quits: Darkcoal (~user@139.64.63.46) (Quit: Darkcoal)
[01:05:43] *** Joins: davidfetter_work (~davidfett@2601:640:4100:7e0:78eb:1742:5e5c:c2bb)
[01:05:53] <owensjrw> They all do the same function. Is that a true statement?
[01:05:58] <vdamewood> Leaving main with } is a special case where the compiler adds an implicit return 0 at the end.
[01:05:59] <nitrix> They're all the same. C22 7.22.4.4p2 "The exit function causes normal program termination to occur."
[01:06:23] <pragma-> exit(1) isn't the same as exit(0)
[01:06:46] <khoa> pragma-: No shit
[01:07:06] <nitrix> ,tell owensjrw about c11 5.1.2.2.3p1
[01:07:08] <candide> owensjrw: http://www.iso-9899.info/n1570.html#5.1.2.2.3p1 [Program termination] If the return type of the main function is a type compatible with i​nt, a return from the initial call to the main function is equivalent to calling the exit function with the value returned by the main function as its argument;11) reaching the } that terminates the main function returns a value of 0. If the return type is n... <truncated; https://0x0.st/-dJD.txt>
[01:09:37] *** Quits: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl) (Quit: leaving)
[01:09:39] <owensjrw> I get that. What I am asking is if (2+2+2+2+2+2+2+2) and (2*8) are the same outcome I am sure one is optimized more efficently in the compiler. Is this true of the three ways to exit. Is there a more correct way of exiting the program between the three?
[01:10:35] <nitrix> They both return the code 16. The evaluation occurs first, operator precedence is involved and there are sequence points.
[01:10:40] *** Quits: davidfetter_work (~davidfett@2601:640:4100:7e0:78eb:1742:5e5c:c2bb) (Ping timeout: 252 seconds)
[01:11:23] <vdamewood> Odds are both of those expressions would just get optimized to an immediate constant.
[01:11:28] <nitrix> And of course that's also a very trivial constant optimization.
[01:11:52] <owensjrw> The 2's were just showing equality of different ways to do things.... 
[01:12:35] <owensjrw> Its is still a question of why return 0, or EXIT, or '}'
[01:13:20] *** Quits: Ard1t (~ard1t@user/ard1t) (Quit: Nettalk6 - www.ntalk.de)
[01:15:19] *** Joins: simpl_e (~user@user/simpl-e/x-8589812)
[01:16:00] <fizzie> Wasn't the quote from 5.1.2.2.3p1 an explicit enough answer to that? "-- a return from the initial call to the `main` function *is equivalent to* calling the `exit` function with the value returned --", emphasis added.
[01:16:53] <useretail> i have 32-bit shared library with lost source code. how can i use it from 64-bit app?
[01:17:25] <vdamewood> decompile and recompile.
[01:17:34] <sham1> It's a very difficult ordea
[01:17:44] <sham1> If not outright impossible
[01:17:46] <useretail> btw, i have all the prototypes
[01:18:21] <vdamewood> One big problem is that on most systems, the ABI is different between 32-bit and 64-bit code.
[01:18:24] <nitrix> Decompile+recompile or emulate.
[01:18:33] *** Quits: johnnyreb (~tth@user/johnnyreb) (Ping timeout: 265 seconds)
[01:19:08] <useretail> i was thinking to make simple 32-bit app that would write the output to some binary file, and then read the file from 64-bit app
[01:19:18] <useretail> but i would lose some performance
[01:19:22] <vdamewood> useretail: What OS and CPU family?
[01:19:28] <ioxzev1z> owensjrw, read "Modern C"
[01:19:50] <useretail> vdamewood, linux x86_64
[01:20:01] <vdamewood> I tried to read Modern A, but that was just a like a shot in the arm.
[01:20:14] <ioxzev1z> vdamewood, try Modern C
[01:20:30] *** Joins: johnnyreb (~tth@user/johnnyreb)
[01:20:41] <vdamewood> ioxzev1z: That was a COVID vaccine joke.
[01:20:51] <sham1> Oh wow
[01:20:53] <ioxzev1z> vdamewood, oic, didn't see it
[01:21:01] <ioxzev1z> Thought you mistyped A
[01:21:08] <sham1> The pun doesn't work in text
[01:21:27] <vdamewood> sham1: No, not as well as verbally.
[01:21:37] <khoa> vdamewood: Funny joke, but better when spoken
[01:23:29] <sham1> The only thing that joke might fall flat is by someone reading the A there as [eɪ]
[01:23:33] <owensjrw> Modern A was funny... I have not looked at the book Modern C. Ill look into it.
[01:25:15] <sham1> I've heard good things about Modern C. Of course while K&R is a bit dated, it still makes sense to read it, since it is part of the C lord. Another one would be the UNIX Programming Environment if one wants to read about UNIX stuff specifically
[01:25:27] <sham1> Lore*
[01:26:18] *** Joins: elkalamar (elkalamar@gateway/vpn/airvpn/elkalamar)
[01:27:31] <johnjay> isn't Modern C that bad book everyone hates
[01:27:35] <johnjay> or am i confusing it with the other one
[01:28:36] <nitrix> You're thinking of "Learn C the Hard Way".
[01:29:33] <vdamewood> Learn hard, the C way!
[01:32:07] <NRK[m]> whats bad about that book ? (never read it)
[01:32:33] <pragma-> ,lcthw
[01:32:33] <candide> Learn C The Hard Way is an online book that should be avoided. It does not teach you C, but rather shows how C might work on a specific implementation. It contains numerous errors, bad examples and absurd arguments. See http://hentenaar.com/dont-learn-c-the-wrong-way and https://kellett.im/a/hardway
[01:35:14] <sham1> Oh, it's Sex Shaw
[01:35:21] <sham1> Man
[01:35:26] <sham1> Autocorrect is weird
[01:35:34] <sham1> Zed Shaw
[01:35:51] <nitrix> I personally recommend Effective C instead. It doesn't waste your time. Just concise, pure information. The author (Robert Seacord) is on the committee.
[01:36:07] *** Quits: superboot (~agentgasm@user/superboot) (Quit: leaving)
[01:36:10] *** Quits: strajder (~strajder@user/strajder) (Quit: leaving)
[01:36:29] <nitrix> And maybe a fizzie or two.
[01:36:55] *** Joins: davidfetter_work (~davidfett@c-73-241-222-148.hsd1.ca.comcast.net)
[01:37:08] <sham1> Being here gives a +10 boost to one's C abilities by osmosis
[01:40:10] <sham1> But yeah, Shaw's books in general seem a bit meh. He is of course also known for once claiming that Python 3 isn't Turing-complete because it doesn't work with Python 2 code. Now granted, he did take back that statement, claiming bit as a joke, but it's still one of those things that reduce one's confidence in the author in question
[01:40:51] <sham1> And it seems like LCTHW is no different
[01:41:16] <nitrix> The classic "just joking" escape.
[01:41:45] *** Quits: davidfetter_work (~davidfett@c-73-241-222-148.hsd1.ca.comcast.net) (Ping timeout: 265 seconds)
[01:42:18] <johnjay> i was going to display the value of this memory location.... just kidding bro!
[01:44:53] <owensjrw> Really appreciate all the conversation everyone. Time to start thinking about dinner here. Probably salmon and salad.
[01:44:54] *** Quits: X-Scale (~ARM@31.22.163.11) (Excess Flood)
[01:45:02] <owensjrw> Talk with you all later.
[01:45:16] *** Quits: owensjrw (~owensjrw1@2600:1700:b5b0:6380::41) (Quit: Leaving)
[01:45:16] *** Quits: Akuli (~Akuli@87-94-109-157.bb.dnainternet.fi) (Quit: Leaving)
[01:45:19] <nitrix> I think one of my biggest pet peeve is people saying stupid things, then when you point it out to them, they claim that was the point, that it's all just a joke and you're the one that's the idiot for "not getting it".
[01:45:41] *** Joins: X-Scale (~ARM@31.22.163.11)
[01:45:52] <nitrix> From the point of view of a bystander, the person faking they're dumb and the person who's actually dumb look completely identical, so a point do they start realizing that that's they real behavior and they're just looking for an excuse.
[01:46:30] <nitrix> *at what point 
[01:49:20] <nitrix> "If it quacks like a duck..."
[01:53:05] *** Quits: johnjay (~pi@192.142.100.50) (Ping timeout: 244 seconds)
[01:53:47] <khoa> Modern C is nice
[01:53:50] *** Quits: nvmd (~nvmd@user/nvmd) (Ping timeout: 265 seconds)
[01:53:59] <khoa> Oh he quit already
[01:55:46] *** Joins: johnjay (~pi@192.142.100.50)
[01:55:58] *** Joins: Laurenceb (~Laurenceb@76.47.147.147.dyn.plus.net)
[01:58:48] *** Joins: aportnoy (~aportnoy@bras-base-toroon0628w-grc-22-174-95-160-240.dsl.bell.ca)
[01:59:00] *** Quits: aportnoy (~aportnoy@bras-base-toroon0628w-grc-22-174-95-160-240.dsl.bell.ca) (Changing host)
[01:59:00] *** Joins: aportnoy (~aportnoy@user/aportnoy)
[02:00:36] *** Quits: alch (~alch@151.68.100.228) (Ping timeout: 258 seconds)
[02:01:12] *** Quits: AmR (~AmREiSa@156.199.106.121) (Quit: Konversation terminated!)
[02:02:18] *** Joins: alch (~alch@pd-18-99-42.service.infuturo.it)
[02:05:32] <floatcomplex> i want salmon and salad
[02:07:15] *** Quits: aportnoy (~aportnoy@user/aportnoy) (Quit: Leaving)
[02:10:35] *** Joins: davidfetter_work (~davidfett@c-73-241-222-148.hsd1.ca.comcast.net)
[02:10:42] *** Joins: nehsou^ (~nehsou@wsip-68-227-92-38.mc.at.cox.net)
[02:11:52] *** Joins: aportnoy (~aportnoy@bras-base-toroon0628w-grc-22-174-95-160-240.dsl.bell.ca)
[02:15:18] *** Quits: davidfetter_work (~davidfett@c-73-241-222-148.hsd1.ca.comcast.net) (Ping timeout: 244 seconds)
[02:17:52] *** Quits: kenanmarasli (~kenanmara@user/kenanmarasli) (Quit: Leaving)
[02:18:41] <johnjay> error: unknown seafood type 'salmon'
[02:19:28] <klys> omnomnom
[02:19:49] <floatcomplex> remove some dams and stop being a git about irrigation and the situation will resolve itself
[02:25:11] *** Joins: g2anj (~v@58.227.244.56)
[02:27:11] *** Joins: oriba (~oriba@x4db74bc0.dyn.telefonica.de)
[02:28:05] <nitrix> git rebase --abort
[02:29:09] *** Quits: aportnoy (~aportnoy@bras-base-toroon0628w-grc-22-174-95-160-240.dsl.bell.ca) (Quit: Leaving)
[02:32:40] *** Quits: pizdets (~pizdets@183.182.114.206) (Ping timeout: 250 seconds)
[02:32:47] *** Quits: kadavul (~vazha@103.165.21.199) (Quit: Leaving)
[02:33:58] *** Joins: pizdets (~pizdets@183.182.110.93)
[02:35:55] *** Quits: Crescendo (~Crescendo@user/crescendo) (Ping timeout: 252 seconds)
[02:36:18] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[02:36:18] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[02:36:18] *** Joins: wroathe (~wroathe@user/wroathe)
[02:36:36] *** Joins: Crescendo (~Crescendo@user/crescendo)
[02:41:28] *** Joins: davidfetter_work (~davidfett@c-73-241-222-148.hsd1.ca.comcast.net)
[02:43:31] *** Joins: esselfe (~steph@user/esselfe)
[02:45:28] <johnjay> i imagine what it would be like to go to a restaurant and try to order food
[02:45:41] <johnjay> but the waiter is a c compiler
[02:45:58] <johnjay> "I'd like a drink"
[02:46:00] *** Quits: davidfetter_work (~davidfett@c-73-241-222-148.hsd1.ca.comcast.net) (Ping timeout: 260 seconds)
[02:46:10] <johnjay> "incomplete conversion to type 'beverage'"
[02:50:17] *** Quits: Crescendo (~Crescendo@user/crescendo) (Read error: Connection reset by peer)
[02:50:36] *** Joins: Crescendo (~Crescendo@user/crescendo)
[02:52:42] <nitrix> That's too declarative. You have to explain to the waiter how to make the drink.
[02:52:48] *** Quits: mahmutov (~mahmutov@37.155.35.85) (Ping timeout: 265 seconds)
[02:53:00] *** Quits: Wulf (~Wulf@user/wulf) (Ping timeout: 260 seconds)
[02:54:42] *** Joins: Wulf (~Wulf@user/wulf)
[02:57:38] <johnjay> you also have to specify the brand, glass size, and make sure the Manners API is handy
[02:57:56] <johnjay> because if you forgot to put the spoon on the right it causes the entire meal to reset
[03:02:33] *** Joins: evocatus (~evocatus@84.51.113.13)
[03:03:10] *** Quits: Macuser (~Macuser@216.30.159.201) (Remote host closed the connection)
[03:03:16] *** Joins: cloudbender (~cloudbend@user/cloudbender)
[03:04:30] *** Joins: Macuser (~Macuser@216.30.159.201)
[03:05:15] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 260 seconds)
[03:07:02] *** Quits: trisk (~trisk@c-73-253-10-38.hsd1.ma.comcast.net) (Ping timeout: 260 seconds)
[03:07:17] *** Joins: haise0 (~haise01@user/haise01)
[03:09:34] *** Joins: trisk (~trisk@2601:196:4700:1f14:8:20ff:fe3e:890e)
[03:11:48] *** Quits: pert (~pert@fsf/member/pert) (Quit: pert)
[03:13:10] *** wootehfoot is now known as Supersaiyan_IV
[03:13:40] *** Supersaiyan_IV is now known as wootehfoot
[03:14:10] *** Quits: LucaTM (~LucaTM@user/lucatm) (Quit: Textual IRC Client: www.textualapp.com)
[03:14:20] *** Joins: davidfetter_work (~davidfett@c-73-241-222-148.hsd1.ca.comcast.net)
[03:19:21] *** Quits: davidfetter_work (~davidfett@c-73-241-222-148.hsd1.ca.comcast.net) (Ping timeout: 244 seconds)
[03:22:26] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[03:22:26] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[03:22:26] *** Joins: wroathe (~wroathe@user/wroathe)
[03:22:36] *** Joins: quartz (~quartz@user/quartz)
[03:22:36] *** Joins: dangrenier83 (~pi@user/dangrenier83)
[03:22:42] *** Joins: Guest72 (~Guest72@2001:8a0:7b95:ca01:7036:3430:eac8:942b)
[03:24:23] *** Quits: monkey_ (~user@190.104.116.134) (Ping timeout: 264 seconds)
[03:24:46] *** Quits: Guest72 (~Guest72@2001:8a0:7b95:ca01:7036:3430:eac8:942b) (Client Quit)
[03:26:35] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 244 seconds)
[03:32:15] *** Joins: pucara (~i@host77.181-14-159.telecom.net.ar)
[03:35:39] *** Joins: uniquepointer (~uniquepoi@190.218.240.164)
[03:36:03] *** Quits: wootehfoot (~wootehfoo@user/wootehfoot) (Read error: Connection reset by peer)
[03:37:14] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[03:39:30] *** Quits: deavmi (~tbk@user/deavmi) (Ping timeout: 258 seconds)
[03:39:55] *** Quits: karakedi (~eAC53C340@user/karakedi) (Read error: Connection reset by peer)
[03:45:43] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 244 seconds)
[03:46:30] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[03:49:41] *** Joins: cloudbender61 (~cloudbend@user/cloudbender)
[03:52:55] *** Quits: cloudbender (~cloudbend@user/cloudbender) (Ping timeout: 252 seconds)
[03:53:27] *** Quits: Isonzo (~Isonzo@179.6.201.212) (Ping timeout: 244 seconds)
[03:53:42] *** Quits: nehsou^ (~nehsou@wsip-68-227-92-38.mc.at.cox.net) (Ping timeout: 260 seconds)
[03:53:46] *** presonic is now known as highrate
[03:54:20] *** Joins: nehsou^ (~nehsou@wsip-68-227-92-38.mc.at.cox.net)
[03:54:40] *** Quits: cloudbender61 (~cloudbend@user/cloudbender) (Ping timeout: 265 seconds)
[03:55:28] *** Joins: Isonzo (~Isonzo@179.6.201.212)
[03:58:48] *** Joins: davidfetter_work (~davidfett@c-73-241-222-148.hsd1.ca.comcast.net)
[03:59:24] *** Quits: NEYi (~NEYi@109.251.216.38) (Read error: Connection reset by peer)
[04:00:37] *** Joins: TonyStone (~TonyStone@2603-7080-8607-c36a-9cdb-69bc-753b-1e50.res6.spectrum.com)
[04:01:13] *** Quits: Laurenceb (~Laurenceb@76.47.147.147.dyn.plus.net) (Ping timeout: 256 seconds)
[04:03:51] *** Quits: davidfetter_work (~davidfett@c-73-241-222-148.hsd1.ca.comcast.net) (Ping timeout: 265 seconds)
[04:03:55] *** Joins: superboot (~agentgasm@user/superboot)
[04:06:23] *** Quits: nehsou^ (~nehsou@wsip-68-227-92-38.mc.at.cox.net) (Ping timeout: 264 seconds)
[04:06:52] *** Joins: nehsou^ (~nehsou@wsip-68-227-92-38.mc.at.cox.net)
[04:13:11] *** Joins: AbleBacon (~AbleBacon@user/AbleBacon)
[04:16:52] *** Joins: cation (cation@user/cation)
[04:20:27] <quartz> Is it possible to include .h files in godbolt?
[04:22:25] *** Quits: oriba (~oriba@x4db74bc0.dyn.telefonica.de) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[04:25:30] *** Quits: magla (~gelignite@55d43ee1.access.ecotel.net) (Quit: Stay safe!)
[04:27:11] *** Quits: Thedarkb-Desktop (~Thedarkb@2001:bb6:b403:e042:3c0f:41c:39e8:ecdc) (Remote host closed the connection)
[04:29:26] <quartz> Hi! I'm trying to create a singly-linked list in C. The interface for the list is here: https://bpa.st/UVJQ   I'm trying to write the first function, but gcc is giving me this warning that says: "warning: assignment from incompatible pointer type" on line 7 of my code: https://godbolt.org/z/cPYqz9rvd
[04:30:08] <quartz> I simply want to create a new node, and set the "next" element of that node to the "head" element of the list being passed in.
[04:30:55] *** Quits: Optimus (~risto@87.227.237.59) (Ping timeout: 265 seconds)
[04:32:56] *** Joins: davidfetter_work (~davidfett@c-73-241-222-148.hsd1.ca.comcast.net)
[04:34:49] <ioxzev1z> quartz, it's complaining because line 7 is wrong
[04:35:28] <ioxzev1z> head is a pointer of type node, you are assigning on 7 to next the address of the head pointer
[04:35:37] <ioxzev1z> What you want to be doing is assigning the pointer itself.
[04:35:57] <ioxzev1z> Also you need to malloc newHead
[04:36:12] <ioxzev1z> Otherwise all you have is a pointer to a Node
[04:36:19] *** Joins: Thedarkb-Desktop (~Thedarkb@2001:bb6:b403:e042:f505:4776:d072:55f4)
[04:36:37] <quartz> ioxzev1z: Did I at least declare the struct newHead correctly?
[04:36:44] <ioxzev1z> struct Node *new_head = malloc(sizeof *new_head);
[04:36:45] *** Quits: blindguard (~blindguar@2a02:908:1864:c200::2612) (Quit: Konversation terminated!)
[04:36:53] <quartz> Ahh
[04:37:26] <ioxzev1z> Then you can use ->next = list->head; ->data = data;
[04:37:38] <ioxzev1z> Also note that on line 8 you are taking the address of the data pointer, not the pointer itself.
[04:37:41] <ioxzev1z> Which is also wrong
[04:37:56] <quartz> Ahhhh
[04:38:01] <quartz> pointers :(
[04:38:02] *** Quits: davidfetter_work (~davidfett@c-73-241-222-148.hsd1.ca.comcast.net) (Ping timeout: 260 seconds)
[04:38:20] *** Joins: loganlee (~Thunderbi@user/loganlee)
[04:38:41] <ioxzev1z> quartz, when creating a pointer, you take the address of the (non-pointer, in most cases) variable to store in the pointer. If you have two pointers, such as int *p; and void *v; you can just assign the value (address) of the pointer such as p = v;
[04:39:18] <ioxzev1z> An rvalue void pointer will assign to any type, whereas an rvalue non-void pointer type should be cast.
[04:41:00] *** Quits: random-nick (~random-ni@87.116.165.220) (Ping timeout: 244 seconds)
[04:43:15] *** Quits: nyah (~nyah@bcdcb6e3.skybroadband.com) (Ping timeout: 260 seconds)
[04:43:42] <quartz> ioxzev1z: Thank you
[04:43:51] <ski> (of course no need to cast if it's the right type already)
[04:44:08] <quartz> Yeah everyone tells me not to cast malloc
[04:44:30] <ioxzev1z> quartz, what I mean is this: int *i = ...; float *f = ...; i = (int *) f;
[04:44:33] <ioxzev1z> Not i = f;
[04:44:45] <ski> (you should also really check the result of the `malloc' call)
[04:45:10] <quartz> ski: Yes, I'll do that
[04:45:29] <ioxzev1z> quartz, the reason you never cast malloc is that it returns void *, which can be assigned to any pointer type.
[04:45:46] <quartz> ioxzev1z: Exactly :)
[04:46:10] <ski> (data pointer, iiuc)
[04:46:25] <quartz> I don't dereference when I pass a pointer into sizeof right?
[04:46:42] <ski> depends on what you want the size of ?
[04:46:42] <ioxzev1z> Not in the above call, *new_head is not a dereference.
[04:46:43] <quartz> struct Node *new_head = malloc(sizeof(new_head));
[04:46:51] <ioxzev1z> quartz, that's wrong
[04:46:57] <quartz> :(
[04:47:04] <ioxzev1z> You want either sizeof(struct Node), or sizeof(*new_head)
[04:47:07] <ski> that would give you the size of a `struct Node *' (the size of a pointer)
[04:47:21] <ioxzev1z> Prefer the latter as it helps if you change types but forget to change the malloc call
[04:47:28] <ski> while what ioxzev1z said would give you the size of a `struct Node' object
[04:48:01] *** Quits: evocatus (~evocatus@84.51.113.13) (Quit: Leaving)
[04:48:14] <ski> so, yes, in `sizeof *new_head' you have a "dereference" .. but it'll not actually be performed (the dereferencing). it's just to specify which type you want the size of
[04:48:23] <ioxzev1z> It isn't a dereference
[04:48:28] <quartz> OK
[04:49:06] <ski> given `int i,*p = ...;' you wouldn't call `i = *p;' a dereference (of `p') ?
[04:49:25] <ioxzev1z> ski, that is a dereference, but sizeof(*new_head) is not.
[04:49:42] <ioxzev1z> The latter is an instruction to the compiler, which also happens at compile time.
[04:49:51] <ski> it is, syntactically, a dereference. but, as mentioned, it will not actually perform any dereference
[04:50:01] <ski> yes, we're agreeing, just using different terminology, i think
[04:50:35] *** Quits: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[04:50:37] <nitrix> There's no such thing as compile time.
[04:50:40] <ioxzev1z> ski, a dereference accesses the value in the address contained in the pointer and returns the value. sizeof(*new_head) tells the compiler that you want the type that new_head points to, not the value at that address.
[04:50:45] <ski> (just like `sizeof(i + 2)' won't perform that addition. but it's still, syntactically speaking, an addition)
[04:51:59] <ski> i was not talking about the operational semantics of the language construct, just about what syntactical construct was used
[04:52:18] <ioxzev1z> ski, int i = 5 * 2; is that a dereference?
[04:52:18] <nitrix> The sizeof operator is quite clear about that. Its operand is either an expression or a parenthesized type. So + and * are clearly addition and unary dereference.
[04:52:32] <nitrix> Whether or not they're evaluated is irrelevant, it's still a dereference.
[04:52:42] <ski> afaik, in the grammar, any expression is allowed as operand of `sizeof', no ? (obviously that expression will have to pass further tests, like variables in scope, type correctness, &c.)
[04:52:56] <ski> ioxzev1z : nope
[04:54:41] <ioxzev1z> ski, right, but it uses the "dereference" operator, hence as you said it must be a dereference.
[04:54:57] <nitrix> That's the multiplication operator. Dereference operator is unary.
[04:56:26] <Isonzo> The multiplication operator and the deference operator use the same representation, AFAIK it's context what differentiates them.
[04:57:01] <ski> dunno what you mean by "same representation" (same sequence of symbols used in the name ?)
[04:57:23] *** Quits: zwr (~zwr@2804:d45:b966:fb00:c559:3de9:7a37:317a) (Ping timeout: 264 seconds)
[04:57:37] *** Joins: zwr (~zwr@2804:d45:b966:fb00:ac0b:666b:acc0:2229)
[04:57:39] <Isonzo> I mean they both use *
[04:57:59] <ski> they correspond to different productions in the grammar, afaik
[04:59:07] <ski> so, would be different kinds of node in a parse tree, or in an abstract syntax tree, when using such a grammar to recognize a sequence of tokens as a phrase of the language, and to determine its nesting structure, according to the grammar, e.g. to determine subexpressions
[04:59:13] <nitrix> Be careful with the wording choice. The representation usually refers to bit patterns for values. Ones complement, twos complement, sign&magnitude, there are also trap representations and other ones.
[04:59:57] <nitrix> You're conflating the lexical grammar with the semantics.
[05:00:02] <Isonzo> I'll try to be more careful, english is my second language :'-)
[05:00:43] *** Joins: dld (~davidlowr@2601:197:600:1210:5db6:6f5a:3b6e:25f9)
[05:02:01] *** Joins: magic_ninja_work (~sparkie1@4.4.16.52)
[05:02:18] *** Joins: The_Jag_ (~The_Jag@host-87-15-17-212.retail.telecomitalia.it)
[05:03:07] *** Joins: kurahaupo_ (~kurahaupo@pa49-181-167-244.pa.nsw.optusnet.com.au)
[05:04:15] *** Quits: The_Jag (~The_Jag@host-87-17-20-218.retail.telecomitalia.it) (Ping timeout: 260 seconds)
[05:06:12] *** Joins: rgrinberg (~textual@201.182.226.118)
[05:06:35] *** Quits: kurahaupo (~kurahaupo@220-245-23-126.static.tpgi.com.au) (Ping timeout: 260 seconds)
[05:07:06] <nitrix> Here's a fun one for ioxzev1z; is (A)*(B) the multiplication of A and B, or B being dereferenced followed by a cast to the type A?
[05:08:46] <ioxzev1z> nitrix, I disputed the use of the word "dereference" for sizeof *x; not the operator itself
[05:09:20] <nitrix> I'm aware. I thought I corrected you and we were over that.
[05:09:24] *** sdfgsdfgs is now known as sdfgsdfg
[05:09:33] <nitrix> Try to answer this one, it'll surprise you.
[05:12:30] <nitrix> A little hint, this is what's known as a context-sensitive grammar and it makes writing parsers for a given language much more complicated.
[05:13:59] <quartz> When I try to compile my program for the linked list, I get an error in gcc that says "undefined reference to main". I have three files: the test file with a main() function, the interface/.h file with the fuction prototypes, and the implementation of the functions in a .c file.
[05:14:14] <quartz> I make a makefile and everything. I don't get what is wrong
[05:14:20] *** Quits: Nex8192 (~Nex8192@user/nex8192) (Quit: Don't watch me die)
[05:14:39] *** Joins: Nex8192 (~Nex8192@user/nex8192)
[05:14:59] <nitrix> quartz, Could you paste them somewhere, including the commands you've used to compile the problem?
[05:15:14] <quartz> Sure
[05:15:20] <nitrix> s/problem/program
[05:18:23] *** Joins: davidfetter_work (~davidfett@2601:640:4100:7e0:c5c1:88a5:ba5d:85c1)
[05:18:48] <quartz> This is the "mylist.h" file: https://bpa.st/UVJQ   This is the "tester.c" file: https://bpa.st/UFIQ and this is my Makefile: https://bpa.st/GFNQ
[05:19:10] <quartz> I assume I want to compile the tester.c file because that is where the main() function is stored.
[05:20:07] *** Joins: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f)
[05:20:35] <nitrix> quartz, Line #90 of the test file, you have the closing block of the main function missing its curly brace }
[05:21:35] <quartz> LOL
[05:23:17] <nitrix> The makefile is also wrong, for the .o targets we should be seeing compilating lines like $(CC) .c in there.
[05:23:30] *** Joins: paddymahoney (~paddymaho@cpe9050ca207f83-cm9050ca207f80.cpe.net.cable.rogers.com)
[05:23:30] *** Quits: davidfetter_work (~davidfett@2601:640:4100:7e0:c5c1:88a5:ba5d:85c1) (Ping timeout: 260 seconds)
[05:23:42] <quartz> OK I"ll fix those
[05:23:46] *** Quits: Rounin (~david@84.212.130.215) (Ping timeout: 260 seconds)
[05:23:48] *** Quits: movingtxt (~movingtxt@user/movingtxt) (Quit: leaving)
[05:23:57] <ski> `mylist-test.o' should also depend on `mylist.h'
[05:24:17] <ski> (assuming `mylist-test.c' is what you called `tester.c' above)
[05:25:00] <quartz> Yes
[05:25:12] <nitrix> I would try `gcc -g -Wall mylist.c mylist-test.c -o mylist-test` to see if the problem is reproducible, then improve the Makefile.
[05:25:51] <ski> (that `tester.c' `#include's `mylist.h'. if you e.g. change the definition of `struct Node' (perhaps reordering fields, ior adding/removing), you'd want to produce `tester.o'/`mylist-test.o' anew)
[05:26:49] <quartz> Yeah
[05:28:17] <quartz> I didn't think we had to list .c files in a makefile
[05:29:29] *** Quits: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f) (Remote host closed the connection)
[05:29:56] <nitrix> There are tricks like %.o : %.c to avoid repeating yourself.
[05:30:08] *** Joins: fengdaolong (~fengdaolo@183.93.98.36)
[05:31:34] <nitrix> I have a couple recommendations for the code after if you're interested.
[05:31:46] <quartz> Well I changed the makefile, but now it gives me: "undefined reference to addFront" which is the function I just implemented.
[05:31:57] <quartz> There is the new makefile: https://bpa.st/KK3Q
[05:32:57] *** Quits: Crescendo (~Crescendo@user/crescendo) (Read error: Connection reset by peer)
[05:33:09] *** Joins: Crescendo (~Crescendo@user/crescendo)
[05:33:10] *** Quits: banc (banc@gateway/vpn/airvpn/banc) (Ping timeout: 244 seconds)
[05:33:25] <nitrix> There are no definitions for addFront in the three files you showed us.
[05:33:26] <ski> (`mylist-test' should not depend on `mylist.h', but it should depend on `mylist.o')
[05:33:29] *** Quits: superboot (~agentgasm@user/superboot) (Quit: leaving)
[05:33:42] <nitrix> There's a declaration in mylist.h, that's all I can see.
[05:34:26] <quartz> mylist.c contains the implemented version of addFront
[05:34:51] <ski> `mylist.c' hasn't been shown
[05:35:06] *** Quits: earnestly (~earnest@user/earnestly) (Ping timeout: 245 seconds)
[05:35:16] <quartz> Oh sorry
[05:35:46] *** Quits: fengdaolong (~fengdaolo@183.93.98.36) (Ping timeout: 244 seconds)
[05:37:04] *** Quits: pulse (~pulse@user/pulse) (Read error: Connection reset by peer)
[05:37:28] *** Joins: fengdaolong (~fengdaolo@183.94.82.151)
[05:37:57] <quartz> Yeah it was just that one function. I implemented it here
[05:37:59] <quartz> https://godbolt.org/z/n43a9cEqn
[05:38:07] <quartz> Ahh forgot to test if malloc was successful
[05:39:39] <nitrix> It's going to need the #include "mylist.h", otherwise it wont know about the type `struct Node`.
[05:39:41] <ski> (i hope you actually `#include' that `mylist.h' in `mylist.c')
[05:41:29] <Thedarkb-Desktop> ,cc printf(argv[0]);
[05:41:33] <candide> Thedarkb-Desktop: prog
[05:42:12] <quartz> ski: I do yeah
[05:42:24] <nitrix> Thedarkb-Desktop, Implementation-defined whether that's the program name there. I think that's a POSIX thing.
[05:42:59] <ornxka> behead those who keep adding default compiler flags to gcc
[05:43:06] <ornxka> it worked yesterday, why the fuck shouldnt it work today
[05:43:36] * ski . o O ( "progress" ? )
[05:44:23] <ornxka> we are certainly going forward in a direction but i dont think its to a place anyone wants to go
[05:46:06] * ski . o O ( "We have to do something ! Let's do something." )
[05:46:29] <nitrix> You remind me of previous managers I had.
[05:48:11] *** Quits: shivesh (~shivesh@user/shivesh) (Quit: leaving)
[05:48:21] *** Joins: deavmi (~tbk@user/deavmi)
[05:48:28] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Quit: Ex-Chat)
[05:52:09] *** Joins: banc (banc@gateway/vpn/airvpn/banc)
[05:53:01] *** Joins: asdflkj_sh (asdflkj@bsdforall.org)
[05:53:55] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.3)
[05:57:48] *** Quits: ioxzev1z (~ioxzev1z@user/ioxzev1z) (Quit: Leaving)
[05:58:24] *** Quits: alch (~alch@pd-18-99-42.service.infuturo.it) (Read error: Connection reset by peer)
[05:58:38] <Thedarkb-Desktop> I'm linking libtcc, but I'm getting "undefined reference" to tcc_new
[05:58:39] <Thedarkb-Desktop> bleh
[06:02:42] *** Joins: alch (~alch@151.68.116.123)
[06:03:17] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.3)
[06:03:22] <quartz> nitrix: Thanks a lot, the makefile works now :)
[06:05:24] *** Joins: davidfetter_work (~davidfett@c-73-241-222-148.hsd1.ca.comcast.net)
[06:05:48] <nitrix> quartz, Is this a school assignment?
[06:06:07] <nitrix> I have a couple feedback to provide based on the code I've seen.
[06:06:10] <quartz> Yeah
[06:06:16] <quartz> Ok. 
[06:07:46] <nitrix> All of the functionst that are related to your list should share a common prefix. When the program grows large enough, addFront, removeAllNodes, reverseList, it's too inconsistent and will conflict with other things.
[06:08:27] <nitrix> You would much rather have list_init, list_append, list_reverse, list_foreach, list_empty, list_reset, etc.
[06:09:12] <nitrix> The prefix and the underscore acts like a namespace. When you see such function, it's very clear the first argument is going to be the list, it helps a lot with readability.
[06:10:22] *** Quits: davidfetter_work (~davidfett@c-73-241-222-148.hsd1.ca.comcast.net) (Ping timeout: 244 seconds)
[06:10:33] <quartz> Haha that's just how the instructor wrote the functions :)
[06:10:54] <nitrix> Mhm, I'm giving the tips mostly to you so you're not bad like your instructor.
[06:11:32] <quartz> hahaha!
[06:12:12] <nitrix> What's funny?
[06:12:44] <nitrix> Line #6, https://godbolt.org/z/n43a9cEqn, do you know that sizeof isn't a function?
[06:13:13] <nitrix> Seeing it again on line 20 here https://bpa.st/UFIQ#1L20
[06:13:48] <quartz> I thought it WAS a function.
[06:14:07] <quartz> I laugh because you're not the first person here to critizie my professor's code :P
[06:14:15] <nitrix> Functions cannot receive types for arguments, so how do you explain sizeof (int) ?
[06:14:31] <quartz> Uhhh
[06:14:45] <quartz> I don't know
[06:14:46] <nitrix> It's an operator. Its operand can be either an expression, or a parenthesized type.
[06:15:08] <nitrix> So it's written either `sizeof var` or `sizeof (type)`.
[06:15:14] *** Quits: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net) (Remote host closed the connection)
[06:15:36] *** Joins: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net)
[06:15:42] <nitrix> Your parentheses are redundant and make me do a double take, thinking there's a type involved but there isn't.
[06:15:56] <nitrix> We see the same crap with the return (x == 0), needless parentheses.
[06:16:07] <nitrix> Also functions that are inline, please no. Let the compiler do that.
[06:16:53] <nitrix> Lines 22-25, you have a bunch of variables declared ahead of time. Try to have them as close as possible to where they get used for the first time.
[06:17:02] <nitrix> for (i = 0; i < n; i++) {  can actually become
[06:17:05] <nitrix> for (int i = 0; i < n; i++) {
[06:18:11] <quartz> I mean, I'm not sure they want me to change that code, as I didn't write it, the teaching staff did, but I will take your suggestions into consideration. I take notes as I talk with everyone here :)
[06:18:26] <quartz> The suggestions given to me here are very helpful.
[06:18:32] <nitrix> I'm aware, just letting you know.
[06:19:01] <nitrix> Other than that, doing generic lists with void * is fairly common and the `const` usage looks correct.
[06:21:25] <nitrix> I'm not sure what flipSignDouble and compareDouble have anything to do with lists.
[06:21:31] *** Joins: davidfetter_work (~davidfett@c-73-241-222-148.hsd1.ca.comcast.net)
[06:22:47] <nitrix> All in all, it's not that bad. I hope the course does a deeper dive. Linked lists with a pointer in-between each node is the most naive way to implement a list.
[06:23:07] <quartz> Really? what is a better way?
[06:23:53] <nitrix> Usually they're chunks of memory, dynamic arrays so that they're contiguous in memory and much better cache locality.
[06:24:42] <quartz> I get what you mean.
[06:25:47] <nitrix> When processors read memory, they copy the surroundings of what you're reading into cache, preparing ahead of time so that if you continue reading further, they'll have the data immediately ready without having to do another roundtrip to the RAM.
[06:26:11] *** Quits: davidfetter_work (~davidfett@c-73-241-222-148.hsd1.ca.comcast.net) (Ping timeout: 264 seconds)
[06:26:40] <nitrix> In general, bouncing around like that, dereferencing pointers left and right isn't too great when you could just go to the next element if it was an array. arr[i++]
[06:26:59] <floatcomplex> arr[aye++]
[06:27:08] <floatcomplex> single letter variable names are bad
[06:27:56] <nitrix> Of course, that means you have to re-engineer how the list works, because the elements of an array are fixed. So insert/removing elements ends up being more tricky.
[06:28:08] <floatcomplex> generic linked lists are also bad
[06:28:12] <floatcomplex> :p
[06:28:50] *** Quits: fengdaolong (~fengdaolo@183.94.82.151) (Ping timeout: 260 seconds)
[06:28:53] <nitrix> Long store short, you end up with a list of used nodes and a list of unused nodes, sharing the same array. When you insert/delete things in your list, you just update pointers in the array so that nodes that belonged in one list moves to the other list.
[06:29:02] <nitrix> *story
[06:29:42] <quartz> Yeah I took a class in computer architecture, really good class.
[06:29:54] <quartz> Amazing how computers are built
[06:30:09] <nitrix> And when you run out of space, you use realloc. realloc sounds like it'd be bad if you have a lot of data, but it's the opposite. Modern systems uses virtual memory and the operating systems just flips a couple entries in the MMU table.
[06:30:29] <floatcomplex> that's a good technique (freelist) to know but you also need to know when not to use it
[06:30:41] <floatcomplex> and the answer is "usually"
[06:30:49] *** Joins: fengdaolong (~fengdaolo@183.93.98.239)
[06:31:17] <floatcomplex> there is so much you should learn before you worry about whether malloc/free are fast enough for your use case
[06:32:05] <nitrix> Hence why I said I hope the course does a deeper dive.
[06:32:26] <nitrix> Too many instructors teaches just the naive things without really explaining anything.
[06:32:26] <ski> ("single letter variable names are bad" -- depends on the scope of them, and of their relative "specificity" (in meaning/rôle))
[06:33:16] *** Quits: Macuser (~Macuser@216.30.159.201) (Quit: Textual IRC Client: www.textualapp.com)
[06:33:47] <nitrix> I definitely wouldn't want x,y,z,w in my 3D programs to have any other name.
[06:34:31] <nitrix> Or u,v, (for texturing) or s,t for that matter.
[06:36:43] <quartz> I tried to write the traverseList function. It compiles just fine, but when I run it, I get a segmentation dump. This is my function: https://godbolt.org/z/55TTn8MEK
[06:37:10] <nitrix> quartz, Are you on linux?
[06:37:14] <quartz> THe function they are passing in is in here: https://bpa.st/HJDQ
[06:37:17] <quartz> nitrix: yeah
[06:37:19] <quartz> Why?
[06:37:49] <nitrix> quartz, Can you add `-fsanitize=address,undefined` to your compiler flags and re-run the program?
[06:38:03] <quartz> OK
[06:38:50] <nitrix> Those are two sanitizers that will help you catch code that's manipulating memory incorrectly or things that you shouldn't be doing.
[06:39:03] *** Joins: ormaaj2 (~ormaaj2@user/ormaaj)
[06:39:10] <quartz> can I add that flag using make ?
[06:39:42] <quartz> Oh sorry dumb question
[06:39:54] <nitrix> It'd be inside the makefile, in the CGLAGS.
[06:39:59] <nitrix> CFLAGS.
[06:40:51] <quartz> Yeah it produces a lot of stuff that I don't udnerstand
[06:40:53] *** Quits: Sheilong (uid293653@id-293653.ilkley.irccloud.com) ()
[06:41:01] <quartz> undefined reference to...
[06:41:25] <nitrix> f((list->head->next)++->data); that's definitely wrong.
[06:41:38] *** Joins: Viewday7 (~Viewday@user/viewday)
[06:41:56] <nitrix> The `head` of your list has a field `next` that points to the first node (the first element) in the list.
[06:42:13] <quartz> Yeah..
[06:42:18] <nitrix> If you change this pointer, you'll lose track of where the list begins.
[06:42:48] *** Quits: Viewday (~Viewday@user/viewday) (Read error: Connection reset by peer)
[06:42:48] *** Viewday7 is now known as Viewday
[06:43:04] <nitrix> You'll be able to traverse the list only once, then after that, your list wont work (the head will point at the end of the list)
[06:43:15] <quartz> OH!
[06:43:23] <quartz> I need to make a new node than
[06:43:28] <nitrix> Not even.
[06:43:34] *** Quits: fengdaolong (~fengdaolo@183.93.98.239) (Ping timeout: 260 seconds)
[06:43:37] <quartz> Uhh
[06:43:37] <nitrix> You should instead copy the pointer to a variable inside of your function and increment that pointer.
[06:43:59] <quartz> Yeah, that's what I meant, like a node pointer
[06:44:06] <quartz> oh, it does not even have to be a node haha
[06:44:32] <nitrix> So at the beginning, you would have   struct Node *current = list->head->next; to copy the starting location.
[06:44:46] <nitrix> Then you don't touch list->head->next, otherwise that breaks the list for the future.
[06:45:05] <nitrix> So you use `current` instead and that's also `current` that you increment.
[06:45:17] *** Joins: fengdaolong (~fengdaolo@183.93.99.113)
[06:46:23] <quartz> Wont while(current) increment the pointer for me?
[06:46:50] <quartz> Or just simply test to see if it is not null
[06:46:58] <ski> why `list->head->next' rather than `list->head' ?
[06:47:08] <nitrix> while(current) will iterate as long as current is non-zero. That's not incrementing anything for you, you have to do that.
[06:47:38] <ski> (do you have a dummy initial node in the list ?)
[06:47:38] <nitrix> I also think it should be list->head, and not list->head->next.
[06:47:42] <quartz> ski: I think it's because list is a different tye
[06:47:51] <ski> no
[06:48:09] <quartz> Ohh
[06:48:10] <quartz> My bad yeah
[06:48:15] <quartz> You're right
[06:48:25] <nitrix> You should verify. I'm pretty sure you have a struct List and a struct Node, and the field `head` of the `struct List` points to the first node.
[06:48:35] <quartz> yeah
[06:48:44] * ski did check `mylist.h' for this
[06:48:46] <nitrix> So list->head->next is actually skipping the first one, and potentially also exploding in your face if that first one is NULL :P
[06:49:23] <ski> (is there in fact a need for having a wrapping `struct List' (with an indirection) at all ?)
[06:49:31] <nitrix> Just like you wouldn't do list->head->next->next->next, you have to check the head the first time and next the remaining times before continuing.
[06:50:02] <nitrix> ski, There is a benefit, it's a bit tricky to explain. It basically guarantees a stable pointer for the list itself, even when the list is empty.
[06:50:47] <ski> yea, just wondering whether quartz has any need for it, in this situation
[06:51:06] <nitrix> Maybe a bigger scheme the instructor has a mind, hard to tell.
[06:53:32] <ski> quartz : hmm .. i'd suggest that for `traverseList' and `findNode' (which accept callbacks) that you'd have an additional argument (a "context"/"environment"), of type `void *', that you pass on (as an addition argument) to the callback
[06:54:10] <nitrix> quartz, Spoiler of what I think it will end up looking like: https://godbolt.org/z/9cG38e8c3
[06:54:44] <nitrix> I think the prototypes were given to them.
[06:54:50] <quartz> Yes they were
[06:55:12] <quartz> ski: Not sure what a callback is
[06:55:16] <quartz> But I will look it up
[06:55:48] <nitrix> But yeah, ski raises a good point. Whenever you have callbacks in C, it's preferable to have an extra `void *` argument to let the users pass additional custom data along the call.
[06:55:51] *** Joins: danielcamiel (~danielcam@user/danielcamiel)
[06:56:05] <ski> often, a function that you pass as callback to such a higher-order function, will need to access some local data (meaning it can't really be stored in a single statically known location). that data could be of different type, for different calls to the higher-order function (making sure you pass a function pointer that expect data of the appropriate type)
[06:56:08] <nitrix> Essentially the void traverseList(struct List *list, void (*f)(void *data)) should look more liek
[06:56:23] <nitrix>  void traverseList(struct List *list, void *custom, void (*f)(void *data, void *custom))
[06:56:28] <ski> quartz : a callback is when you pass a function pointer, as an argument to another function
[06:56:49] <quartz> Oh, I should know what that is.
[06:57:13] <ski> when you don't care about this context, you can just pass `NULL', and have the passed function ignore that argument
[06:57:48] <nitrix> This way, when you call traverseList, you give it the list, the callback (the function that runs for every element), but also, custom additional data.
[06:58:20] <nitrix> And traverseList calls the callback with not only the element, but also provides the custom data back to you again.
[06:58:54] <quartz> I don't think I can change the function prototypes
[06:59:00] <quartz> As they wrote them
[06:59:47] <quartz> Weird... it compiles and runs, but it does not print the numbers stored in the linked list.
[07:00:41] <nitrix> Welcome to C, lol.
[07:01:10] <quartz> Hahah!
[07:02:41] *** Quits: slidercrank (~slidercra@user/slidercrank) (Ping timeout: 265 seconds)
[07:05:00] <quartz> I think it's something wrong with the addFront function
[07:06:55] <nitrix> If you work with small lists and use some debug lines like printf("%p %p %p \n", node, node->data, node->next), you can probably look at what happened during the execution.
[07:07:05] <nitrix> I'd personally use a debugger but there's a learning curve to it.
[07:08:25] <quartz> I should have implemented it correctly: https://godbolt.org/z/esfYveKs4
[07:08:41] <quartz> It literally just adds a new node to the front of a list
[07:09:21] *** Joins: davidfetter_work (~davidfett@2601:640:4100:7e0:78e7:d006:f763:f3f6)
[07:09:29] <nitrix> Almost.
[07:09:52] <nitrix> This creates a new node, puts the data in it, links it to the first node in the list, and then... something is missing :)
[07:09:56] <caze> You forgot something.
[07:10:06] <quartz> Don't tell me
[07:10:09] <nitrix> Where is the front of the list after all these operations?
[07:10:21] <quartz> new_head
[07:10:47] <caze> That's what you desire, but is that what actually happens in the code?
[07:10:55] <quartz> No
[07:11:37] <nitrix> `struct List` contains the field `head` which designates the first node. You made your new node point to that first node, but the new node itself didn't become the first node yet.
[07:11:45] <quartz> list->head = new_head
[07:11:50] <nitrix> Yep.
[07:11:54] <quartz> :)
[07:14:47] *** Quits: davidfetter_work (~davidfett@2601:640:4100:7e0:78e7:d006:f763:f3f6) (Ping timeout: 264 seconds)
[07:16:07] <caze> Of course if you used a double pointer, you might not need an explicit head.
[07:16:42] *** Quits: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net) (Ping timeout: 260 seconds)
[07:17:20] <quartz> a pointer to a list of pointers of type struct Node?
[07:18:48] *** Quits: nehsou^ (~nehsou@wsip-68-227-92-38.mc.at.cox.net) (Remote host closed the connection)
[07:19:21] <caze> A pointer to pointer to struct Node.
[07:19:21] <quartz> laptop battery is going to die BRB
[07:20:30] *** Joins: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net)
[07:20:32] *** Quits: quartz (~quartz@user/quartz) (Quit: WeeChat 3.3)
[07:22:13] <nitrix> To put you in the loop caze, school assignment, they were given the declarations.
[07:22:30] <caze> oic
[07:23:22] <nitrix> https://bpa.st/UVJQ
[07:23:38] *** Joins: caef^ (~caef@wsip-68-227-92-38.mc.at.cox.net)
[07:24:04] <nitrix> It's the naive one with a stable head.
[07:26:48] *** Joins: davidfetter_work (~davidfett@c-73-241-222-148.hsd1.ca.comcast.net)
[07:26:54] *** Joins: dave0 (~davezero@069.d.003.ncl.iprimus.net.au)
[07:27:17] *** Quits: Player001 (~Player001@user/player001) (Quit: Read Hegel and Lacan and Marx)
[07:27:42] *** Joins: missogra (~missogra@dynamic-077-000-252-049.77.0.pool.telefonica.de)
[07:28:12] *** Joins: larry87 (~quassel@98.40.245.193)
[07:31:12] *** Quits: davidfetter_work (~davidfett@c-73-241-222-148.hsd1.ca.comcast.net) (Ping timeout: 265 seconds)
[07:36:01] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.3)
[07:36:31] *** Joins: supakeen (~user@python/site-packages/supakeen)
[07:37:11] *** Quits: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net) (Ping timeout: 244 seconds)
[07:37:11] *** Quits: ormaaj2 (~ormaaj2@user/ormaaj) (Quit: Client closed)
[07:38:54] *** Joins: quartz (~quartz@user/quartz)
[07:38:59] *** Quits: uniquepointer (~uniquepoi@190.218.240.164) (Quit: Leaving)
[07:40:00] *** Quits: caef^ (~caef@wsip-68-227-92-38.mc.at.cox.net) (Ping timeout: 260 seconds)
[07:41:08] <quartz> nitrix: Thanks for your help
[07:44:25] *** Quits: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br) (Ping timeout: 244 seconds)
[07:44:38] *** Joins: caef^ (~caef@wsip-68-227-92-38.mc.at.cox.net)
[07:47:00] *** Quits: kurahaupo_ (~kurahaupo@pa49-181-167-244.pa.nsw.optusnet.com.au) (Ping timeout: 260 seconds)
[07:47:36] *** Joins: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net)
[07:49:34] *** Quits: danielcamiel (~danielcam@user/danielcamiel) (Ping timeout: 244 seconds)
[07:49:57] *** Quits: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net) (Remote host closed the connection)
[07:50:13] *** Joins: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net)
[07:51:27] *** Quits: missogra (~missogra@dynamic-077-000-252-049.77.0.pool.telefonica.de) (Quit: Leaving)
[07:52:49] *** Joins: kurahaupo (~kurahaupo@pa49-181-167-244.pa.nsw.optusnet.com.au)
[07:54:17] *** Joins: imm__ (~imm_@user/imm/x-3405860)
[07:56:20] *** Quits: imm_ (~imm_@user/imm/x-3405860) (Ping timeout: 260 seconds)
[07:58:02] *** Quits: larry87 (~quassel@98.40.245.193) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[07:58:27] *** Joins: larry87 (~quassel@98.40.245.193)
[07:59:50] *** Quits: magic_ninja_work (~sparkie1@4.4.16.52) (Ping timeout: 260 seconds)
[08:03:22] *** Joins: penguino (~mrpenguin@user/mrpenguin)
[08:03:31] * nitrix shares half of that with ski.
[08:05:37] *** Joins: LuKaRo_ (~LuKaRo@p4fc32190.dip0.t-ipconnect.de)
[08:05:47] *** Quits: LuKaRo (~LuKaRo@p5deda401.dip0.t-ipconnect.de) (Ping timeout: 264 seconds)
[08:07:09] <quartz> Yeah thanks as well ski :)
[08:07:30] <floatcomplex> quartz: your cs course is exacerbating the alcholism of like ten people at least
[08:09:05] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[08:09:05] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[08:09:05] *** Joins: wroathe (~wroathe@user/wroathe)
[08:10:12] <nitrix> You might be onto something. I had a small glass of gin, which is bigger than my usual no glass of gin.
[08:10:31] <quartz> floatcomplex: huh?
[08:13:07] *** Joins: davidfetter_work (~davidfett@c-73-241-222-148.hsd1.ca.comcast.net)
[08:16:05] *** Joins: Dunce (~Dunce@gateway/tor-sasl/dunce)
[08:17:50] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 260 seconds)
[08:18:05] *** Quits: davidfetter_work (~davidfett@c-73-241-222-148.hsd1.ca.comcast.net) (Ping timeout: 265 seconds)
[08:18:31] *** Quits: fengdaolong (~fengdaolo@183.93.99.113) (Ping timeout: 244 seconds)
[08:20:28] *** Joins: fengdaolong (~fengdaolo@183.94.82.204)
[08:27:19] *** Quits: Sadale (~Sadale@user/sadale) (Read error: Connection reset by peer)
[08:28:15] *** Joins: TheFatherMind (~TheFather@user/thefathermind)
[08:28:19] *** Parts: TheFatherMind (~TheFather@user/thefathermind) ()
[08:29:03] *** Joins: Daemonick (~Daemonick@77.49.243.254.dsl.dyn.forthnet.gr)
[08:29:48] <Daemonick> Hi programmers
[08:30:19] <Daemonick> Is there any simple and straigth method to compile and run a .c file with cli in Windows 10?
[08:31:21] <Daemonick> Visual Studio is really big tough with many options I haven't got familiar
[08:32:33] *** Joins: Sadale (~Sadale@user/sadale)
[08:33:08] *** Joins: frost (~frost@user/frost)
[08:34:01] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[08:34:01] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[08:34:01] *** Joins: wroathe (~wroathe@user/wroathe)
[08:35:42] *** Quits: Dunce (~Dunce@gateway/tor-sasl/dunce) (Remote host closed the connection)
[08:35:51] <floatcomplex> does windows still ship with notepad
[08:36:27] *** Quits: fengdaolong (~fengdaolo@183.94.82.204) (Ping timeout: 265 seconds)
[08:36:29] <nitrix> You can install LLVM and compile a .c file without trouble.
[08:37:11] <floatcomplex> the only thing i know about windows is it now ships with actual openssh and didn't before
[08:37:18] <nitrix> If it uses more POSIX/linux-y headers/libraries, then maybe go with MinGW or MSYS2 which provides an environment with the usual command-line utilities you'd have on linux.
[08:37:19] *** Joins: fengdaolong (~fengdaolo@183.93.99.65)
[08:38:23] <nitrix> Daemonick, https://www.msys2.org, you install it, launch it, then pacman -S clang and other libraries you need, then use compile as usual.
[08:38:45] <floatcomplex> so if it's ok to compile and run on some linux embedded board or aws instance or something rather than locally on windows, then windows doesn't hold you back
[08:38:55] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 260 seconds)
[08:39:19] *** Joins: mahmutov (~mahmutov@37.155.35.85)
[08:39:24] <floatcomplex> modulo, you know, dos line ending stuff that is still an issue in 2021
[08:39:53] <nitrix> floatcomplex, Fun fact, Notepad now recognizes \n line endings, not just \r\n.
[08:40:00] <floatcomplex> ok but
[08:40:40] <nitrix> On the other hand, bash still struggles with scripts that have \r\n in them.
[08:40:57] <floatcomplex> nitrix: within the past 60 days i have had to alter C code running purely under linux so that it could correctly ingest a .txt file generated on windows
[08:41:00] <floatcomplex> yeag
[08:41:21] <Daemonick> nitrix I am on Windows 10 not Linux Arch
[08:41:30] <floatcomplex> wtf is linux arch
[08:41:51] <Daemonick> OS
[08:41:52] <floatcomplex> that sounds like a bad arch tvh
[08:41:58] <floatcomplex> tbh
[08:42:09] <nitrix> Linux is the OS. Arch is the distro.
[08:42:47] <Daemonick> I thought that Windows 10 would have a built-in compiler like linux
[08:42:47] <floatcomplex> yeah i know, this irssi instance is currently running on arch. it's still bad
[08:43:30] <Daemonick> Now, I have opened Visual Studio and I cannot see 'compile' or 'run' anywhere in the menu buttons
[08:43:32] <nitrix> Daemonick, I'm aware. MSYS2 uses the pacman package manager.
[08:44:14] *** Quits: luizfrds (~Luiz@152.250.243.147) (Read error: Connection reset by peer)
[08:44:47] <Daemonick> nitrix I will give it a try
[08:44:57] *** Quits: penguino (~mrpenguin@user/mrpenguin) (Ping timeout: 276 seconds)
[08:45:06] <nitrix> You get to use the usual posix/linux things. pthread, curl, z, unix sockets instead of WSA, it all works.
[08:45:22] *** Joins: ravan (~ravan@user/ravan)
[08:45:35] <nitrix> ncurses too.
[08:46:25] *** Quits: fengdaolong (~fengdaolo@183.93.99.65) (Ping timeout: 244 seconds)
[08:46:25] *** Joins: penguino (~mrpenguin@user/mrpenguin)
[08:47:09] *** Joins: dmaroo (~dhruv@157.47.63.218)
[08:47:29] *** Joins: davidfetter_work (~davidfett@c-73-241-222-148.hsd1.ca.comcast.net)
[08:48:02] <nitrix> You can use cmake, makefiles, bash scripts, python, autoconf, wont be a problem.
[08:48:38] *** Joins: fengdaolong (~fengdaolo@183.93.98.36)
[08:48:47] <Daemonick> nitrix I am far beyond ignorant the most of these such terminologies 
[08:50:00] *** Quits: Sadale (~Sadale@user/sadale) (Read error: Connection reset by peer)
[08:50:03] <Daemonick> Is that Windows 10 have closed code and they do not provide built-in dev tools?
[08:50:09] *** Joins: Sadale_ (~Sadale@user/sadale)
[08:50:15] <floatcomplex> Daemonick: https://mobile.twitter.com/dalmaer/status/1449904534239678473
[08:50:16] <candide> Title of floatcomplex's link: Dion Almaer on Twitter: "You can both be happy that Bill is spending his money on good things for humanity AND remember what he was like to GET that money…… https://t.co/qPP6rE4TB5"
[08:51:50] <nitrix> I see. These tools are often used around C projects to automate building them because some of them are quite complex. Maybe a database needs to be setup, maybe assets need to be generated for a game, etc.
[08:52:33] <nitrix> Linux makes plumbing like this very easy and people tend to put all that into scripts, but without the tools needed on the machine, they wont work right.
[08:52:40] *** Quits: davidfetter_work (~davidfett@c-73-241-222-148.hsd1.ca.comcast.net) (Ping timeout: 252 seconds)
[08:53:18] <nitrix> So MSYS2 provides a bit of everything and helps a lot compiling more complicated projects on windows, when windows is a bit of a afterthought.
[08:53:38] *** Quits: fengdaolong (~fengdaolo@183.93.98.36) (Ping timeout: 244 seconds)
[08:54:41] <floatcomplex> cross platform zero-code-change compatibility is also not as worthy of a goal as many programmers would intuitively conclude
[08:55:32] *** Joins: fengdaolong (~fengdaolo@183.93.98.155)
[08:55:43] <dave0> there's some pretty awful code out there :-p
[08:55:56] <floatcomplex> as a user, by far my least favourite apps to use on either ios or android are apps that provide an identical UI on both, and do not follow the UX guidelines on either
[08:56:24] *** Joins: doa70 (~doa70@pool-72-76-156-214.nwrknj.east.verizon.net)
[08:57:00] <floatcomplex> code that works on posix and windows is probably crippled on both
[08:57:04] <nitrix> Well, I'm writing a 3D game and for me, it's either writing code to support all 3 major platforms, or I aim for a broader unix and compile with MSYS2 on windows.
[08:57:41] <nitrix> The winapi for the filesystem is just trash compared to the posix one.
[08:57:48] <floatcomplex> there's 3 platforms?
[08:57:55] <dave0> floatcomplex: the most portable program i know is info-zip
[08:58:22] <nitrix> floatcomplex, The three _major_ platforms. Windows, Linux and Mac.
[08:58:36] <floatcomplex> for 3d gaming?
[08:58:55] <floatcomplex> i would have said ios, android, windows
[08:58:58] <floatcomplex> in that order
[08:59:11] <floatcomplex> and windows is a stretch
[08:59:22] <dave0> write everything in javascript
[08:59:38] <nitrix> ios and android are very linux-like when you use native C.
[08:59:39] <dave0> web browser is the only platform
[09:00:06] *** Quits: zmt00 (~zmt00@user/zmt00) (Ping timeout: 245 seconds)
[09:00:22] *** Quits: doa70 (~doa70@pool-72-76-156-214.nwrknj.east.verizon.net) (Quit: leaving)
[09:01:18] <floatcomplex> can't even play portal 2 on a mac anymore
[09:01:18] <nitrix> My defines are literally #if __linux__ and somewhere down there, sometime there's an exception for __APPLE__ and ever more rarely, TARGET_OS_IPHONE...
[09:01:29] <floatcomplex> maybe an arm mac but not an intel mac
[09:03:07] <floatcomplex> kotor still works on mac because someone at whatever that company is called got off their ass and recompiled it for x86_64 a few years back
[09:03:08] *** Joins: soapsudsxx (~soapsudsx@209.221.40.137)
[09:03:17] <floatcomplex> but valve didn't for their own titles
[09:04:46] <nitrix> If you had to guess, what do you think will replace x86_64 as the mainstream architecture?
[09:05:13] <floatcomplex> aarch64
[09:05:31] *** Quits: ravan (~ravan@user/ravan) (Ping timeout: 244 seconds)
[09:05:52] <floatcomplex> riscv is sprinting in the wrong direction to be able to do that
[09:06:35] <nitrix> Please no, AArch64 is doing that crap with being compatible with AArch32, it's x86 all over again.
[09:06:46] <floatcomplex> no it works
[09:06:46] *** Joins: ravan (~ravan@42.201.198.151)
[09:06:49] *** Quits: ravan (~ravan@42.201.198.151) (Client Quit)
[09:07:03] *** Joins: davidfetter_work (~davidfett@c-73-241-222-148.hsd1.ca.comcast.net)
[09:07:04] <floatcomplex> it's much less invasive and annoying than x86 multilib
[09:07:17] <nitrix> True...
[09:07:24] <floatcomplex> if you compile statically, it just works, no os cooperstion required
[09:07:35] <nitrix> And I guess they don't have some of the same hacks x86 has, like the line A20 hack.
[09:08:02] <floatcomplex> my 64 bit userspace has absolutely nothing to say about me running 32 bit binaries, on arm
[09:08:22] <nitrix> That's cool.
[09:09:43] <floatcomplex> riscv is resurrecting the worst ideas from the cray area, and implementing them on paper but not in silicon you can buy, and then using their supposed existence to justify NOT doing conventional simd
[09:09:47] <nitrix> Are there massively multicores ARM cpus?
[09:09:56] <floatcomplex> nitrix: yeah
[09:10:38] <nitrix> I was doing a RISCV emulator for a while and thought the instruction set was very clean and it all made a lot of sense to me.
[09:11:06] <floatcomplex> so at the end of the day you have a sifive unobtained or whatever that draws as much power as a rpi4 but has the fp throughput as a pi 0
[09:11:12] *** Quits: davidfetter_work (~davidfett@c-73-241-222-148.hsd1.ca.comcast.net) (Ping timeout: 244 seconds)
[09:12:12] <floatcomplex> nitrix: riscv and aarch64 were the two easiest isa's to do my coroutines for, and very similar to each other
[09:12:27] <floatcomplex> out of like twelve isa's
[09:13:13] <nitrix> I thought you could do coroutines with just C.
[09:13:17] <floatcomplex> lol
[09:13:19] <nitrix> You ended up with assembly?
[09:13:23] <floatcomplex> yes
[09:14:16] <floatcomplex> C has no portable, non-UB way to express having multiple call stacks with overlapping temporal lifetimes
[09:15:06] *** Joins: V-T60 (~v@91.203.24.166)
[09:16:02] <nitrix> As in, having all the code mostly in C and the context switching is maybe a couple assembly lines at most.
[09:16:12] <floatcomplex> yes
[09:16:29] <floatcomplex> it's about 5-20 lines of asm depending on architecture
[09:16:29] <nitrix> Maybe you could even re-use swapcontext() or whatever it was, can't remember.
[09:16:52] <nitrix> I think I even saw code doing it with jmp_buf abuse.
[09:17:03] *** Quits: fengdaolong (~fengdaolo@183.93.98.155) (Ping timeout: 265 seconds)
[09:17:05] <floatcomplex> jmp_buf method is ub
[09:17:25] <floatcomplex> explicitly so
[09:17:52] <nitrix> Mkay. If it's that bad alright, but you're already in the weeds at this point.
[09:17:52] <floatcomplex> (i still did it that way for years before i learned to do it properly)
[09:18:24] <nitrix> Did you open-source it?
[09:18:31] <floatcomplex> yes
[09:18:54] *** Joins: fengdaolong (~fengdaolo@183.93.99.113)
[09:18:54] <floatcomplex> but i'd still refer people to libucontext just because it has more eyeballs
[09:19:47] <floatcomplex> nitrix: https://gist.github.com/rlcamp/f6efb0b1bab9a60de7e6323ea82641d8
[09:19:48] <candide> Title of floatcomplex's link: Coroutines for generator functions, sequential pipelines, state machines, and other uses in C · GitHub
[09:20:41] <floatcomplex> nitrix: basic idea is swap the pc, sp, fp, and lr if applicable, and clobber EVERYTHING else, in a macro
[09:21:07] <nitrix> Mhm. Oh it has channels too?
[09:21:39] <floatcomplex> so it's faster than ucontext because it only saves/restores state that is actually being used at that site, rather than everything the calling convention says must be saved
[09:22:27] <floatcomplex> nitrix: sort of. every new coroutine is coterminous with a channel between itself and its parent, it rigidly enforces structured concurrency
[09:22:32] <floatcomplex> it could be generalized
[09:22:46] <nitrix> That's what I'm realizing, it's very, ehm...
[09:22:51] *** Quits: skapate (~Skapata@user/skapata) (Remote host closed the connection)
[09:22:59] <floatcomplex> but i don't see the value in allowing people to yeet control flow between any two unrelated tasks
[09:23:06] <nitrix> Well yeah, structured concurrency, but it's interesting to see it as an API.
[09:23:53] <floatcomplex> the context switching macros merely enforce that a context has a matching one
[09:24:07] *** Quits: fengdaolong (~fengdaolo@183.93.99.113) (Ping timeout: 244 seconds)
[09:24:28] <floatcomplex> so you have to go A->B->C->B->A
[09:24:33] *** Joins: fengdaolong (~fengdaolo@183.93.98.239)
[09:24:48] <floatcomplex> can't return to A from anything other than B, having switched from A to B
[09:25:06] <nitrix> Make sense.
[09:25:14] <floatcomplex> it sounds severe
[09:25:33] <floatcomplex> but if you think about what guarantees you get in exchange for following that rule, it's a lot
[09:25:34] <nitrix> No I 100% understand it. I actually structure my C code exactly like this and people think I'm nuts.
[09:25:37] *** Quits: Nex8192 (~Nex8192@user/nex8192) (Quit: Don't watch me die)
[09:25:52] *** Joins: Nex8192 (~Nex8192@user/nex8192)
[09:26:17] <nitrix> I use almost only automatic storage, the caller is the owner and also responsible for the lifetime, the callee just receives it most of the time.
[09:26:24] <floatcomplex> yes
[09:26:35] <nitrix> bool obj_init(struct obj *this);
[09:26:58] <nitrix> Instead of the uglier struct obj *obj_create(void); that everyone does.
[09:28:08] <nitrix> It's unavoidable for dynamic data structures that manages their own memory though, so I'm trying to determine what that would translate to for your coroutines.
[09:28:11] <floatcomplex> if you scroll down in that gist, there are several other implementations of the same coroutines api, with different tredeoffs
[09:28:21] <floatcomplex> they are thousands of times slower
[09:29:26] <nitrix> What are your thoughts on Erlang?
[09:29:42] <floatcomplex> pure userspace asm macro context switching on x86_64 can be like 3 nanoseconds, compare to 30 for sjlj/swapcontext assuming sigprocmask
[09:29:46] <floatcomplex> is not involved
[09:29:58] <floatcomplex> 500 ns if it is
[09:30:09] <nitrix> Like, how do you feel about a coroutine..... sending the channel of one of its parent/children to other coroutines?
[09:30:20] <floatcomplex> not great
[09:30:48] <nitrix> Correct me if I'm wrong, your API cannot prevent this, right?
[09:30:52] <floatcomplex> if its own lifetime were ending then maybe but i'd have to think about what guarantees would be lost
[09:31:04] <floatcomplex> my api can't prevent anything, it can merely break :)
[09:31:57] <nitrix> Right. Okay. So it encourages a structure, but you can actually break that but handling over your communication channels to other coroutines. And then you have a great mess on your hands because the lifetimes don't correspond to what communications are possible.
[09:32:21] *** Quits: quartz (~quartz@user/quartz) (Quit: WeeChat 3.3)
[09:32:35] <nitrix> BUT I guess it could be useful, if it's just some kind of borrowing and you know you'll be handed the channel back later, passively waiting.
[09:32:54] <floatcomplex> actually, no. a parent could default on its ownership of a child to its own grandparent, but a child's lifetime is strictly coterminous with that channel, it can't yield its parent channel to one of its own children
[09:33:51] <nitrix> Why would it work in just one direction?
[09:34:10] *** Joins: Nautilus (~me2@d27-96-220-62.nap.wideopenwest.com)
[09:34:10] <dave0> what's the arm instruction for jump-with-link ?
[09:34:15] <floatcomplex> parents and children are symmetric at all other times but NOT at the start/end of child lifetime
[09:34:28] <dave0> you could jump-with-link to the link register ... viola! coroutine switch
[09:34:34] *** Joins: Senicar3 (~Senicar@gateway/tor-sasl/senicar)
[09:35:15] <floatcomplex> nitrix: the child's C call stack is literally the same allocation as the struct channel * to its parent
[09:36:05] <nitrix> Okay so that's where the directionality comes from.
[09:36:24] <floatcomplex> yeah
[09:36:42] <nitrix> If the stack lived "elsewhere", would that restriction still apply?
[09:36:54] <nitrix> I'm trying to think more semantics than implementation details right now.
[09:36:57] *** Quits: Senicar (~Senicar@gateway/tor-sasl/senicar) (Ping timeout: 276 seconds)
[09:36:58] *** Senicar3 is now known as Senicar
[09:37:29] *** Quits: Zambyte (~Zambyte@cpe-104-228-60-14.nycap.res.rr.com) (Quit: leaving)
[09:37:30] <floatcomplex> the yield symmetry requirement comes from there only being one buffer for the register state of the yielded coroutine, the active one and the inactive one trade use of it
[09:37:50] <nitrix> I feel like a coroutine could hand off their children to the parent, or parent to the children, it's "conceptually" the same if you're looking at a tree. You're just eliminating one node.
[09:37:53] <floatcomplex> as opposed to swapcontect which requires two ucontexts
[09:38:58] <nitrix> Mhm.
[09:39:35] <nitrix> I like it. Cool work. That explains a lot why I heard you bring up structured concurrency frequently :P
[09:39:38] <floatcomplex> nitrix: i supposed "handing off a connection-to-parent to an own child" is logically the same as just tail calling another coroutine, so this api would not have to make any special accommodations for it
[09:40:38] <floatcomplex> nitrix: yeah. but also use the principle when writing pthreads based code, and derive the same guarantees from having done so
[09:40:51] <floatcomplex> s/also/i also/
[09:42:53] <floatcomplex> one of the reasons this api is the way it is, is so it plays nice when mixed with pthreads or libdispatch or rtos threads or whatever else
[09:43:16] <nitrix> have you considering building a bigger system out of this that's more visual?
[09:43:23] <floatcomplex> it would be easy to simplify the api by using thread local storage but it would restrict the uses
[09:43:27] <floatcomplex> visual how
[09:43:42] <floatcomplex> i wrote a demo that uses it within sdl to generate tones
[09:43:50] <floatcomplex> in hard realtime, sample by sample
[09:44:03] <floatcomplex> which preemptive concurrency cannot so
[09:44:05] <nitrix> Flow-Based Programming, or vvvv, or like the node editors you find in game engines, shader editors, etc.
[09:44:05] <floatcomplex> do
[09:44:11] *** Joins: ckeshav (~keshavcha@user/ckeshav)
[09:44:27] *** Joins: smallvil_ (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[09:45:09] <floatcomplex> hmm
[09:45:23] *** Quits: FlipFlop (~FlipFlop@user/fl1pfl0p) (Ping timeout: 264 seconds)
[09:45:32] *** Joins: davidfetter_work (~davidfett@c-73-241-222-148.hsd1.ca.comcast.net)
[09:45:52] <floatcomplex> nitrix: i suppose i would just point people at that naughty dog engine talk and say it's like that but more prescriptive
[09:46:16] <floatcomplex> they use all different terminology but their underlying point is the same, and well presented
[09:48:02] <nitrix> I'm saying that because you're obviously very close to the "message passing" ideology, actually very close to actor model (as in Erlang), where you have concurrent processes communicating with one another, except the actor model allows the processes to communicate the address of other processes over their channel, so it's a very free-form kind of communication.
[09:48:16] <nitrix> They're just floating in some kind of soup and if you know where someone is, you can talk to them.
[09:48:42] <floatcomplex> yeah and that sounds to me like too much rope
[09:48:52] <floatcomplex> at the risk of mixing metaphors
[09:49:05] <nitrix> Yours is very structured and that matches exactly what I know as "Flow-Based Programming". It's a graph-like system where the nodes only talk to their parent or siblings. The edges are fixed and don't change.
[09:49:12] <Daemonick> nitrix I have some issues with MSYS2GW 64-bit
[09:49:16] <floatcomplex> this is a strict subset of the actor model i think
[09:49:22] <nitrix> floatcomplex, Indeed.
[09:49:32] <Daemonick> It cannot recognise 'gcc' command
[09:50:04] <floatcomplex> the edges can change but only when the set of running coroutines changes
[09:50:09] <Daemonick> I have run all the updates via pacman
[09:50:39] <floatcomplex> and wow i am gonna have some nightmares about what it would be like if the edges could change whenever
[09:50:40] *** Sadale_ is now known as Sadale
[09:50:44] <nitrix> Daemonick, Try `pacman -S gcc` or `pacman -S mingw-w64-x86_64-gcc`.
[09:50:53] *** Quits: davidfetter_work (~davidfett@c-73-241-222-148.hsd1.ca.comcast.net) (Ping timeout: 265 seconds)
[09:51:00] <nitrix> Then it should have gcc. Make sure you're in the MSYS2 terminal not the windows cmd.exe
[09:51:14] <Daemonick> nitrix thanks in advance
[09:51:42] <nitrix> Or, you could add "C:/MSYS2/mingw32/bin" (or something like that) to your PATH if you really want to use the linux utilities from your normal cmd terminal.
[09:52:28] <nitrix> floatcomplex, So basically yours is more like this https://repository-images.githubusercontent.com/159969526/aa663400-a2e4-11eb-82b8-f2c1d01dac22
[09:53:04] <nitrix> floatcomplex, Just nodes, connections between them, they stay in the same configuration. The nodes run all concurrently and messages are sent across the edges.
[09:54:20] <nitrix> floatcomplex, I had many conversations with Paul, the inventor of Flow-Based Programming, you guys would get along very well :P
[09:54:41] <nitrix> floatcomplex, This could interest you when you have some time https://www.youtube.com/watch?v=up2yhNTsaDs
[09:54:42] <floatcomplex> probably
[09:54:43] <candide> Title of nitrix's link: The origins of Flow Based Programming with J Paul Morrison - YouTube
[09:55:05] <floatcomplex> nitrix: this has a control flow that splits and recombines later
[09:55:23] <floatcomplex> i've done that too, but not with this api
[09:55:55] <floatcomplex> reasons to do that are usually to keep multiple physical cores doing useful work
[09:56:39] <floatcomplex> will watch when i can
[09:56:58] <nitrix> I implemented something similar a few years ago, it ended up being a work-stealing scheduler.
[09:57:41] *** Quits: alch (~alch@151.68.116.123) (Read error: Connection reset by peer)
[09:57:53] <nitrix> But the structure of the graph is, like you said, describing the control flow, so it's what ends up synchronizing everything at the right places.
[09:58:43] <floatcomplex> nitrix: in my framework, you can have a series of nested generator functions, where data flow is always from child to parent, but control flow of course originates at the uppermost parent, which kicks off its child and then accepts that child's output
[09:58:43] *** Quits: rgrinberg (~textual@201.182.226.118) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[09:58:47] <nitrix> It's a little different because the emphasis is put on the messages, data, coming in and out, rather than the computations. The boxes are the boring part, they're just black boxes.
[09:59:00] *** Parts: pi0 (~default@user/pi0) ()
[09:59:49] <floatcomplex> there's a place for each coroutine to do init before kicking off its own children, a place to do secondary init after getting the first output from the child, and a place to do cleanup
[09:59:59] <nitrix> I see. FBP keeps you honest in that sense. A box (with does some computation) cannot emit another box over a connection. Like, there aren't lambdas or higher-order functions here.
[10:01:07] <nitrix> It's JUST data between them. XML, JSON, binary if you prefer, but it's not meant to be runnable code. The structure of the graph is fixed.
[10:01:35] <floatcomplex> i think fixed is too severe of a word
[10:02:00] <floatcomplex> it can change as coroutines start and stop
[10:02:03] *** Joins: alch (~alch@pd-18-119-7.service.infuturo.it)
[10:02:22] <floatcomplex> but while a coroutine exists, it has a channel to its parent
[10:02:36] <floatcomplex> which implies that parent exists
[10:03:00] <nitrix> In Paul's book, he mentions his implementation allowed loading new parts of the network (the graph) as a dynamic library and connecting it during runtime.
[10:03:28] <nitrix> And there was a hint to spawning nodes dynamically too. So I guess you could have that a runtime, I just don't think it's a great idea.
[10:03:37] *** Quits: sysRPL (~sysRPL@ec2-3-131-36-133.us-east-2.compute.amazonaws.com) (Ping timeout: 252 seconds)
[10:03:41] <floatcomplex> yeah idk if i like that
[10:04:20] <floatcomplex> sounds like a good way to implement and hang your hat on something that is, by its nature, untestable
[10:04:33] *** Joins: sysRPL (~sysRPL@ec2-3-131-36-133.us-east-2.compute.amazonaws.com)
[10:04:50] <nitrix> In his model though, the nodes (which are your coroutines) cannot restart.
[10:04:59] <floatcomplex> or maybe i just don't have a very good imagination
[10:05:31] <nitrix> When the program starts, all nodes are active, most of them quickly go into a waiting state because they don't have the necessary inputs to do their work.
[10:05:50] <floatcomplex> yeah each of my coroutines is just a C function. it can call other functions, and it will return at some point
[10:06:03] <nitrix> The nodes stay active until all of their inputs have been closed (aka, their parent processes have terminated).
[10:06:15] <nitrix> Then they consume the remaining of the messages on the connections and, themselves, terminate.
[10:06:28] <nitrix> It creates a cascading effect from the root to the edges.
[10:06:32] <floatcomplex> yeah
[10:06:34] <nitrix> When everything has stopped, the program stops.
[10:06:46] <floatcomplex> i do that the other way around
[10:06:47] *** Joins: kurfen (~kurfen@45.152.181.134)
[10:07:08] <floatcomplex> data flows through the pipeline from child to parent
[10:07:12] <nitrix> AH!
[10:07:37] <floatcomplex> when a child exits, the parent gets that eof, and cleans up and exits in turn
[10:07:50] <nitrix> You have a strange bastard child with Functional Reactive Programming (FRP), they do that too.
[10:07:52] <floatcomplex> and the program eventually just returns from main() normally
[10:08:19] <nitrix> And I know why you do that, it's so that things like a timestamp generator don't just constantly emit messages.
[10:08:30] <nitrix> It produces a value when it's requested, lazily.
[10:08:40] <floatcomplex> i used to do it from parent to child because i had a hardon for libdispatch
[10:08:43] <sham1> How do you do the coroutine aspect with C functions? Do you just have some extra "state" parameter for your coroutine that stores the state when you suspend it and then you return from the function whether you're at the end of the process vs "suspending" it
[10:08:49] <nitrix> They're generators (they yield, like actual coroutines).
[10:08:50] <floatcomplex> but it made handling eof properly really hard
[10:10:03] <floatcomplex> sham1: when A yields to B, the suspended state of A is stored in the struct representing the channel between A and B
[10:10:16] <floatcomplex> B must, therefore, yield back to A at some point
[10:10:48] <floatcomplex> B can yield to other things in the meantime
[10:10:55] <sham1> And how does the yielding actually happen then? Like after B yields back to A, how does A begin executing again
[10:10:56] <floatcomplex> as long as they yield back
[10:11:32] <floatcomplex> sham1: literally the sp, pc, fp, and lr are restored to what they last were in A
[10:11:42] <sham1> Oh
[10:11:42] <nitrix> sham1, The CPU registers and the stack are saved and restored. One of the register, PC, is the program counter, it's the location in memory that the processor will execute the next instruction.
[10:12:22] <floatcomplex> sham1: it's the same as how setjmp and longjmp work but it's more symmetric
[10:12:29] <sham1> Yeah I know, I was just wondering if the "resume" is done by literally restoring CPU registers vs something more high-level
[10:12:31] <floatcomplex> and stores less unnecessary state
[10:12:51] <floatcomplex> all the way low level
[10:12:52] <nitrix> He ended up having to write assembly for it.
[10:14:06] <floatcomplex> same 32 bit arm assembly does same work on cortex-m microntrollers or arm linux. the kernel has no idea it's happening, in the latter case, and that's fine
[10:14:22] <nitrix> You can look at jmp_buf which would be the equivalent high-level way of doing things.
[10:14:23] <sham1> Well it doesn't need to
[10:15:24] <sham1> The kernel that is
[10:15:32] <floatcomplex> yeah it's jmp_buf is *defined* to be undefined in a way that specifically prevents it from being used symmetrically for this sort of thing
[10:15:59] <floatcomplex> glibc even enforces it, breaking many legacy coroutine impls
[10:15:59] <sham1> I wonder why
[10:16:26] <sham1> Like what is the rationale given by the standard
[10:16:34] <nitrix> Because if they don't people will use it and they'll have to support that.
[10:16:56] <floatcomplex> otoh, glibc implements ucontext, which was removed from posix for being unimplementable
[10:17:05] <floatcomplex> and it's a mess
[10:17:05] *** Quits: Isonzo (~Isonzo@179.6.201.212) (Quit: leaving)
[10:17:27] <floatcomplex> it's not much faster than switching between pthreads
[10:18:57] *** Joins: rgrinberg (~textual@ip152-195-159-186.ct.co.cr)
[10:19:25] *** Quits: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net) (Ping timeout: 244 seconds)
[10:19:50] <floatcomplex> libucontext does better but is unsafe for code compiled with gcc >= 9 on all platforms where fp regs must keep their values across a fn call, other than aarch64
[10:20:32] <floatcomplex> x86_64 gets a pass because it doesn't ever promise that property for fp regs
[10:20:56] <nitrix> floatcomplex, Fun chatting with you. Going to head to bed. Cheers.
[10:21:09] <floatcomplex> yeah same. very late
[10:21:31] *** Joins: ominionx (~ominionx@173-25-110-118.client.mchsi.com)
[10:24:40] *** Joins: boB_K7IQ (~boB_K7IQ@96.79.122.201)
[10:25:32] *** Joins: davidfetter_work (~davidfett@c-73-241-222-148.hsd1.ca.comcast.net)
[10:25:36] *** Quits: fengdaolong (~fengdaolo@183.93.98.239) (Ping timeout: 244 seconds)
[10:26:52] *** Joins: fengdaolong (~fengdaolo@183.93.99.6)
[10:27:00] *** Quits: penguino (~mrpenguin@user/mrpenguin) (Ping timeout: 276 seconds)
[10:28:05] *** Joins: missogra (~missogra@dynamic-077-000-252-049.77.0.pool.telefonica.de)
[10:28:53] *** Joins: extern (~archer@80.246.138.213)
[10:30:13] *** Joins: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net)
[10:30:59] *** Quits: davidfetter_work (~davidfett@c-73-241-222-148.hsd1.ca.comcast.net) (Ping timeout: 264 seconds)
[10:34:21] *** Quits: V-T60 (~v@91.203.24.166) (Quit: Leaving.)
[10:34:47] *** Joins: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f)
[10:34:59] *** Quits: extern (~archer@80.246.138.213) (Remote host closed the connection)
[10:35:30] *** Quits: fengdaolong (~fengdaolo@183.93.99.6) (Ping timeout: 260 seconds)
[10:37:41] *** Joins: fengdaolong (~fengdaolo@183.93.99.113)
[10:41:47] *** Joins: davidfetter_work (~davidfett@c-73-241-222-148.hsd1.ca.comcast.net)
[10:44:42] *** Joins: mrig (~AdiIRC@user/mrig)
[10:45:01] *** Quits: ckeshav (~keshavcha@user/ckeshav) (Ping timeout: 265 seconds)
[10:45:30] *** Quits: fengdaolong (~fengdaolo@183.93.99.113) (Ping timeout: 265 seconds)
[10:46:32] *** Quits: davidfetter_work (~davidfett@c-73-241-222-148.hsd1.ca.comcast.net) (Ping timeout: 258 seconds)
[10:46:50] *** Joins: NEYi (~NEYi@109.251.216.38)
[10:47:35] *** Joins: fengdaolong (~fengdaolo@183.93.98.27)
[10:48:16] *** Joins: aradesh (~aradesh@user/aradesh)
[10:51:13] *** Quits: meowray (~MaskRay@li683-166.members.linode.com) (Quit: ZNC 1.8.2 - https://znc.in)
[10:54:02] *** Joins: meowray (~MaskRay@li683-166.members.linode.com)
[10:57:53] *** Joins: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl)
[11:01:46] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[11:03:08] *** Quits: meowray (~MaskRay@li683-166.members.linode.com) (Changing host)
[11:03:08] *** Joins: meowray (~MaskRay@user/meowray)
[11:14:45] *** Joins: davidfetter_work (~davidfett@c-73-241-222-148.hsd1.ca.comcast.net)
[11:16:16] *** Joins: kadavul (~vazha@103.165.21.170)
[11:18:36] *** Quits: caef^ (~caef@wsip-68-227-92-38.mc.at.cox.net) (Remote host closed the connection)
[11:18:51] *** Joins: Ronalds_Mazitis_ (~Ronalds_M@46.109.76.104)
[11:19:50] *** Quits: davidfetter_work (~davidfett@c-73-241-222-148.hsd1.ca.comcast.net) (Ping timeout: 260 seconds)
[11:21:20] *** Quits: cursey (~cursey@user/cursey) (Quit: bye)
[11:21:48] *** Joins: diophantoz (~diophanto@user/diophantoz)
[11:21:51] *** Parts: diophantoz (~diophanto@user/diophantoz) (Leaving)
[11:21:55] *** Joins: cursey (~cursey@user/cursey)
[11:26:43] *** Quits: darkstarx (~darkstard@2601:1c2:300:c8a0::6c32) (Remote host closed the connection)
[11:27:06] *** Joins: darkstarx (~darkstard@2601:1c2:300:c8a0::6c32)
[11:27:18] *** Quits: Daemonick (~Daemonick@77.49.243.254.dsl.dyn.forthnet.gr) (Ping timeout: 260 seconds)
[11:29:11] *** Quits: fossforus (~stan@99-173-128-32.lightspeed.rlghnc.sbcglobal.net) (Ping timeout: 264 seconds)
[11:29:28] *** Joins: Atque (~Atque@user/atque)
[11:31:10] *** imm__ is now known as imm_
[11:31:45] *** Quits: kadavul (~vazha@103.165.21.170) (Ping timeout: 244 seconds)
[11:31:55] *** Joins: kadavul (~vazha@103.165.21.170)
[11:32:33] *** Joins: davidfetter_work (~davidfett@c-73-241-222-148.hsd1.ca.comcast.net)
[11:32:36] *** Joins: bitwiser (~dhruv@2409:4070:2e1b:c65d:acb5:3c04:828:2b94)
[11:32:43] *** Quits: dmaroo (~dhruv@157.47.63.218) (Ping timeout: 252 seconds)
[11:32:51] *** Joins: magla (~gelignite@55d4df94.access.ecotel.net)
[11:34:50] *** Joins: LucaTM (~LucaTM@user/lucatm)
[11:37:11] *** Quits: rgrinberg (~textual@ip152-195-159-186.ct.co.cr) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[11:37:25] *** Quits: davidfetter_work (~davidfett@c-73-241-222-148.hsd1.ca.comcast.net) (Ping timeout: 260 seconds)
[11:37:57] *** Quits: kadavul (~vazha@103.165.21.170) (Ping timeout: 244 seconds)
[11:40:35] *** Quits: missogra (~missogra@dynamic-077-000-252-049.77.0.pool.telefonica.de) (Ping timeout: 264 seconds)
[11:41:42] *** Joins: plainoldcheese (~plainoldc@user/plainoldcheese)
[11:42:17] *** Joins: ravan (~ravan@user/ravan)
[11:43:47] *** Joins: kenanmarasli (~kenanmara@user/kenanmarasli)
[11:44:06] *** Quits: fengdaolong (~fengdaolo@183.93.98.27) (Ping timeout: 260 seconds)
[11:45:34] *** Quits: pucara (~i@host77.181-14-159.telecom.net.ar) (Quit: Lost terminal)
[11:46:01] *** Joins: fengdaolong (~fengdaolo@183.93.98.36)
[11:48:24] *** Quits: ominionx (~ominionx@173-25-110-118.client.mchsi.com) (Quit: Leaving)
[11:56:18] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Remote host closed the connection)
[11:59:09] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[12:01:13] *** Quits: kts_ (~kts@103.73.237.174) (Quit: Konversation terminated!)
[12:01:20] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Remote host closed the connection)
[12:01:32] *** Joins: kts (~kts@103.73.237.174)
[12:02:30] *** Quits: fengdaolong (~fengdaolo@183.93.98.36) (Ping timeout: 260 seconds)
[12:02:30] *** Quits: kurahaupo (~kurahaupo@pa49-181-167-244.pa.nsw.optusnet.com.au) (Ping timeout: 260 seconds)
[12:04:28] *** Joins: fengdaolong (~fengdaolo@183.94.82.151)
[12:04:43] *** Joins: earnestly (~earnest@user/earnestly)
[12:13:08] *** Joins: kadavul (~vazha@103.165.21.170)
[12:16:42] *** Quits: fengdaolong (~fengdaolo@183.94.82.151) (Ping timeout: 244 seconds)
[12:18:50] *** Joins: fengdaolong (~fengdaolo@183.94.82.49)
[12:21:36] *** Joins: davidfetter_work (~davidfett@c-73-241-222-148.hsd1.ca.comcast.net)
[12:25:36] *** Quits: AbleBacon (~AbleBacon@user/AbleBacon) (Read error: Connection reset by peer)
[12:26:11] *** Quits: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net) (Ping timeout: 264 seconds)
[12:26:31] *** Quits: davidfetter_work (~davidfett@c-73-241-222-148.hsd1.ca.comcast.net) (Ping timeout: 265 seconds)
[12:28:51] *** Quits: fengdaolong (~fengdaolo@183.94.82.49) (Ping timeout: 245 seconds)
[12:30:07] *** Quits: MrLouis[m] (~lookneema@2001:470:69fc:105::c61a) (Quit: You have been kicked for being idle)
[12:30:39] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[12:30:59] *** Joins: fengdaolong (~fengdaolo@183.93.99.137)
[12:31:09] *** Quits: kadavul (~vazha@103.165.21.170) (Ping timeout: 244 seconds)
[12:32:50] *** Quits: gpanders (~gpanders@user/gpanders) (Ping timeout: 260 seconds)
[12:33:04] *** Joins: kadavul (~vazha@103.165.21.227)
[12:33:05] *** Joins: gpanders (~gpanders@user/gpanders)
[12:33:13] *** Joins: karakedi (~eAC53C340@user/karakedi)
[12:34:27] *** Joins: v4zha (~vazha@103.165.21.227)
[12:35:41] *** Quits: vvlad (~vvlad@dslb-002-205-166-199.002.205.pools.vodafone-ip.de) (Quit: Leaving)
[12:36:07] *** Joins: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net)
[12:37:35] *** Quits: kadavul (~vazha@103.165.21.227) (Ping timeout: 264 seconds)
[12:40:32] <johnjay> what's an example of a for loop that fails when going from 32 to 64 bit?
[12:40:41] <johnjay> i vaguely thought there was an example like that.
[12:40:59] *** Quits: fengdaolong (~fengdaolo@183.93.99.137) (Ping timeout: 244 seconds)
[12:41:08] <johnjay> it was like for(i=0; i != num; ++i) but it doesn't terminate if the size changes
[12:41:31] <johnjay> e.g. num is 64 bits instead of 32
[12:42:51] *** Joins: fengdaolong (~fengdaolo@183.94.82.244)
[12:43:06] <dave0> maybe if you mix the sizes in an expression
[12:43:59] <johnjay> it was something like the loop stops terminating with the wrong condition. idk have to go find it again
[12:44:39] *** Joins: V-T60 (~v@91.203.24.166)
[12:44:44] <dave0> if you mix a long with an int ... in usual setups long and int are 32 bits on i386 but long is 64 and int is 32 on amd64
[12:45:01] <johnjay> yes but i don't recall how a loop would stop working
[12:45:10] *** v4zha is now known as kadavul
[12:45:13] <johnjay> because if you just do i++ it should still terminate even if using long
[12:46:19] <johnjay> but yes it had something to do with int and long and promoting an int to a long
[12:46:37] <dave0> right shift can be a problem
[12:49:15] <dave0> (int)j >> 1   if j is a 32 bit negative number it might stay negative, but a 32bit negative as  (long)k >> 1   might just be a large positive number
[12:50:11] <dave0> int j=400000000; long k=400000000; j>>1 != k>>1
[12:50:20] <dave0> but it's contrived
[12:51:12] <johnjay> yeah no the example i was thinking of related to overflow
[12:51:27] <johnjay> i guess in the simplest case the loop might run for a lot more iterations as a long
[12:53:00] *** Joins: v4zha (~vazha@103.165.21.130)
[12:53:34] <dave0> as long as you're careful with the actual values, rather than the types, it should be easy (in theory!) to go from 32 to 64
[12:54:23] *** Quits: kadavul (~vazha@103.165.21.227) (Ping timeout: 264 seconds)
[12:54:36] *** Joins: gaspare (~gastel@151.63.119.74)
[12:55:37] *** Joins: davidfetter_work (~davidfett@c-73-241-222-148.hsd1.ca.comcast.net)
[12:56:34] *** Quits: gaspare (~gastel@151.63.119.74) (Client Quit)
[12:58:13] *** Quits: tafa (~tafa@2a04:52c0:101:85c::1) (Quit: ZNC - https://znc.in)
[13:00:10] *** Quits: v4zha (~vazha@103.165.21.130) (Ping timeout: 252 seconds)
[13:00:50] *** Quits: davidfetter_work (~davidfett@c-73-241-222-148.hsd1.ca.comcast.net) (Ping timeout: 260 seconds)
[13:00:50] *** Quits: jinsun (~quassel@user/jinsun) (Ping timeout: 260 seconds)
[13:01:13] *** Joins: jinsun (~quassel@user/jinsun)
[13:02:35] *** Joins: tafa (~tafa@5.2.76.31)
[13:03:10] *** Quits: zer0bitz (~zer0bitz@dsl-hkibng31-54fae3-116.dhcp.inet.fi) (Ping timeout: 260 seconds)
[13:04:37] *** Quits: de-facto (~de-facto@user/de-facto) (Quit: See you around. 💤)
[13:05:04] *** Joins: de-facto (~de-facto@user/de-facto)
[13:05:26] *** Joins: zer0bitz (~zer0bitz@dsl-hkibng31-54fae3-116.dhcp.inet.fi)
[13:05:41] *** Quits: Guest8099 (~Guest80@S01069050ca4e3573.cg.shawcable.net) (Quit: Connection closed)
[13:06:31] *** Quits: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f) (Remote host closed the connection)
[13:07:35] *** Joins: plastico (~plastico@neomutt/plastico)
[13:07:50] *** Quits: fengdaolong (~fengdaolo@183.94.82.244) (Ping timeout: 244 seconds)
[13:08:51] *** Quits: SecretFire (~secret-fi@75-164-146-104.ptld.qwest.net) (Quit: Konversation terminated!)
[13:09:12] *** Joins: SecretFire (~secret-fi@75-164-146-104.ptld.qwest.net)
[13:10:13] *** Joins: fengdaolong (~fengdaolo@183.94.82.220)
[13:11:06] *** Quits: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl) (Read error: Connection reset by peer)
[13:13:32] <johnjay> lol this is a funny c
[13:13:35] <johnjay> *c trap
[13:13:40] <johnjay> if(x < 0) x = -x
[13:15:06] *** Joins: kadavul (~vazha@103.165.21.130)
[13:18:36] *** Joins: v4zha (~vazha@103.165.20.129)
[13:19:56] *** Quits: kts (~kts@103.73.237.174) (Quit: Konversation terminated!)
[13:20:08] *** Joins: Optimus (~risto@87.227.237.59)
[13:20:56] *** Joins: msmhbd^ (~msmhbd@wsip-68-227-92-38.mc.at.cox.net)
[13:21:16] *** Quits: kadavul (~vazha@103.165.21.130) (Ping timeout: 244 seconds)
[13:23:37] *** Joins: dim[m] (~dlozevema@2001:470:69fc:105::1:1c58)
[13:26:33] *** Joins: kurahaupo (~kurahaupo@pa49-181-167-244.pa.nsw.optusnet.com.au)
[13:27:28] *** Quits: v4zha (~vazha@103.165.20.129) (Ping timeout: 244 seconds)
[13:27:41] <Bou> I like this one https://gcc.godbolt.org/z/WzTxs4Y5r
[13:28:48] *** Joins: Guest38 (~Guest38@eth-west-pareq2-46-193-4-100.wb.wifirst.net)
[13:30:14] <Guest38> Hello! I was wondering how does bash `echo "hello" > file | cat -` work even though the 1 fd should refer to at most one file description at a time (is this even true?)
[13:30:16] *** Quits: csrf (~csrf@user/csrf) (Quit: ZNC 1.7.2+deb3 - https://znc.in)
[13:30:47] <Guest38> meaning that I can see the string "hello" in `file` *and* in the terminal's stdout
[13:30:59] *** Quits: fengdaolong (~fengdaolo@183.94.82.220) (Ping timeout: 264 seconds)
[13:31:01] *** Joins: csrf (~csrf@user/csrf)
[13:31:48] *** Joins: cvmn (~caveman@gateway/tor-sasl/caveman)
[13:32:34] *** Joins: fengdaolong (~fengdaolo@183.93.99.65)
[13:33:10] *** Quits: mahmutov (~mahmutov@37.155.35.85) (Ping timeout: 244 seconds)
[13:34:22] *** Joins: blindguard (~blindguar@2a02:908:1864:c200::2612)
[13:37:14] <dave0> the robot doesn't do that
[13:37:20] <dave0> ,sh echo "hello" > file | cat -
[13:37:21] <candide> dave0: Success (no output).
[13:37:25] <dave0> ,sh cat file
[13:37:26] <candide> dave0: hello
[13:37:35] *** Quits: fengdaolong (~fengdaolo@183.93.99.65) (Ping timeout: 264 seconds)
[13:37:48] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[13:37:49] <dave0> ,sh sh --version
[13:37:50] <candide> dave0: GNU bash, version 5.1.8(1)-release (x86_64-redhat-linux-gnu) Copyright (C) 2020 Free Software Foundation, Inc. License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>  This is free software; you are free to change and redistribute it. There is NO WARRANTY, to the extent permitted by law.
[13:37:54] *** Quits: kurfen (~kurfen@45.152.181.134) (Quit: WeeChat 2.3)
[13:38:17] *** Joins: kurfen_ (~kurfen@45.152.181.134)
[13:38:19] <dave0> candide: good robot, have a treat
[13:38:23] <dave0> ,botsnack
[13:38:24] * candide excitedly gobbles its bacon panini.
[13:38:26] <candide> d​ave0, Are you a large Cro-Magnon?
[13:38:53] *** Joins: fengdaolong (~fengdaolo@183.94.153.72)
[13:39:27] *** Quits: cvmn (~caveman@gateway/tor-sasl/caveman) (Remote host closed the connection)
[13:39:55] *** Joins: cvmn (~caveman@gateway/tor-sasl/caveman)
[13:40:11] *** Quits: kurfen_ (~kurfen@45.152.181.134) (Client Quit)
[13:40:23] <Guest38> My bad! I ran this on zsh thinking it was bash
[13:40:50] <Guest38> I suppose POSIX shells aren't supposed to do this then?
[13:41:10] *** Joins: kurfen (~kurfen@45.152.181.134)
[13:41:44] *** Joins: mahmutov (~mahmutov@37.155.35.85)
[13:41:45] <dave0> the robot seems to have zsh
[13:41:49] <dave0> ,zsh --version
[13:41:50] <candide> dave0: zsh 5.8 (x86_64-redhat-linux-gnu)
[13:42:14] *** Quits: kurfen (~kurfen@45.152.181.134) (Client Quit)
[13:42:33] <dave0> dunno, the most i ever did with bash was rename some .mp3 files
[13:42:35] *** Joins: kurfen (~kurfen@45.152.181.134)
[13:42:39] *** Quits: kurfen (~kurfen@45.152.181.134) (Client Quit)
[13:42:46] *** Joins: Atque (~Atque@user/atque)
[13:43:37] *** Joins: kurfen (~kurfen@45.152.181.134)
[13:44:12] *** Joins: davidfetter_work (~davidfett@c-73-241-222-148.hsd1.ca.comcast.net)
[13:45:07] *** Quits: kurfen (~kurfen@45.152.181.134) (Client Quit)
[13:45:11] <Guest38> ,zsh echo "hello" > file | cat -
[13:45:12] <candide> Guest38: hello
[13:45:20] <Guest38> ,cat file
[13:45:21] <candide> cat is http://www.iso-9899.info/wiki/Cat
[13:45:26] *** Joins: kurfen (~kurfen@45.152.181.134)
[13:45:28] <Guest38> ,zsh cat file
[13:45:29] <candide> Guest38: hello
[13:47:28] *** Quits: Thedarkb-Desktop (~Thedarkb@2001:bb6:b403:e042:f505:4776:d072:55f4) (Ping timeout: 252 seconds)
[13:48:26] *** Quits: msmhbd^ (~msmhbd@wsip-68-227-92-38.mc.at.cox.net) (Ping timeout: 245 seconds)
[13:49:10] *** Quits: davidfetter_work (~davidfett@c-73-241-222-148.hsd1.ca.comcast.net) (Ping timeout: 260 seconds)
[13:51:28] *** Joins: msmhbd^ (~msmhbd@wsip-68-227-92-38.mc.at.cox.net)
[13:51:34] *** Joins: Rounin (~david@84.212.130.215)
[13:52:51] *** Quits: harveypwca (~harveypwc@2601:246:c180:a570:3828:d8:e523:3f67) (Quit: Leaving)
[13:56:52] *** Quits: kurfen (~kurfen@45.152.181.134) (Quit: WeeChat 2.3)
[13:57:12] *** Joins: meator (~meator@user/meator)
[13:58:23] *** Quits: alch (~alch@pd-18-119-7.service.infuturo.it) (Read error: Connection reset by peer)
[13:59:30] *** Joins: SGautam (uid286066@id-286066.ilkley.irccloud.com)
[14:00:25] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[14:01:16] *** Quits: fengdaolong (~fengdaolo@183.94.153.72) (Ping timeout: 258 seconds)
[14:02:16] *** Joins: davidfetter_work (~davidfett@c-73-241-222-148.hsd1.ca.comcast.net)
[14:02:26] *** Joins: alch (~alch@151.82.123.89)
[14:02:29] *** Joins: fengdaolong (~fengdaolo@183.93.99.113)
[14:07:03] *** Quits: davidfetter_work (~davidfett@c-73-241-222-148.hsd1.ca.comcast.net) (Ping timeout: 265 seconds)
[14:07:07] *** Quits: humky (~humky@user/humky) (Quit: Leaving)
[14:08:33] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[14:09:30] *** Joins: gabriele (~gabriele@user/gabriele)
[14:12:27] *** Quits: gabriele (~gabriele@user/gabriele) (Client Quit)
[14:13:58] *** Quits: rahl (~rahl@102.114.161.137) (Quit: leaving)
[14:17:51] *** Joins: lovelace (~Elspeth@2.24.23.175)
[14:22:30] <Xgc> Guest38: For that, we can use: echo "hello" | tee file
[14:22:49] *** Joins: marcello42 (~mp@p5dedb36a.dip0.t-ipconnect.de)
[14:22:58] <Xgc> Guest38: We could then | cat -  ... but it's no longer necessary.
[14:29:23] *** Joins: random-nick (~random-ni@87.116.183.63)
[14:30:25] *** Joins: kre10s (~maximilia@45.86.202.72)
[14:31:11] <kre10s> is it possible to define an array and dereference it in one go? like {10, 20, 30, 40, 50}[2] == 30?
[14:31:15] *** Joins: hexteex (~hexteex@gateway/tor-sasl/hexteex)
[14:35:09] *** Joins: kadavul (~vazha@103.165.21.208)
[14:37:46] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[14:37:46] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Client Quit)
[14:38:44] <tk> kre10s: yes, sort of, you can't use use an array initialiser anywhere, but you could use a compound literal if you're working with C99+
[14:39:08] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[14:39:35] <dave0> as a special case you might be able to use a string
[14:40:07] <tk> kre10s: depending on the type (I will assume int here) it would look like: (int []){ 10, 20, 30, 40, 50 }[2]
[14:40:09] <dave0> "\x0a\x14\x1e\x28\x32"[2] == 30
[14:41:01] <tk> also string literals too, but those are not the most readable option unless you intend to deal with chars (e.g. "0123456789abcdef"[n] in order to convert a value between 0 and 15 into its hex digit char)
[14:42:00] <tk> also, limited to the range of char, which portably can only be assumed to be between 0 and 127
[14:42:23] <tk> if you can use C99 then compound literals are by far the better choice
[14:42:39] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[14:45:14] *** Quits: fengdaolong (~fengdaolo@183.93.99.113) (Ping timeout: 265 seconds)
[14:45:46] *** Quits: mad_enz (~mad_enz@cpe00508b114c3e-cm788df7e75290.cpe.net.fido.ca) (Ping timeout: 252 seconds)
[14:46:52] *** Joins: fengdaolong (~fengdaolo@183.93.99.137)
[14:48:57] *** Quits: cvmn (~caveman@gateway/tor-sasl/caveman) (Ping timeout: 276 seconds)
[14:50:11] *** Joins: mad_enz (~mad_enz@cpe00508b114c3e-cm788df7e75290.cpe.net.fido.ca)
[14:50:31] *** Quits: Guest38 (~Guest38@eth-west-pareq2-46-193-4-100.wb.wifirst.net) (Quit: Client closed)
[14:50:48] *** Joins: davidfetter_work (~davidfett@c-73-241-222-148.hsd1.ca.comcast.net)
[14:53:47] *** Quits: Enitin (Enitin@gateway/vpn/protonvpn/enitin) (Ping timeout: 264 seconds)
[14:54:53] *** Joins: Enitin (Enitin@gateway/vpn/protonvpn/enitin)
[14:55:54] *** Quits: davidfetter_work (~davidfett@c-73-241-222-148.hsd1.ca.comcast.net) (Ping timeout: 260 seconds)
[14:57:31] *** Joins: v4zha (~vazha@103.165.20.239)
[14:59:11] *** Quits: kadavul (~vazha@103.165.21.208) (Ping timeout: 264 seconds)
[15:11:50] *** Joins: kucha (~kucha@188.163.84.183)
[15:16:07] *** Joins: pert (~pert@fsf/member/pert)
[15:21:36] *** Joins: gaspare (~gastel@151.63.119.74)
[15:22:41] *** Quits: fengdaolong (~fengdaolo@183.93.99.137) (Ping timeout: 244 seconds)
[15:22:44] *** Quits: loganlee (~Thunderbi@user/loganlee) (Quit: loganlee)
[15:24:57] *** Joins: fengdaolong (~fengdaolo@183.94.82.151)
[15:30:10] *** Quits: v4zha (~vazha@103.165.20.239) (Ping timeout: 260 seconds)
[15:32:00] *** Quits: mahmutov (~mahmutov@37.155.35.85) (Ping timeout: 244 seconds)
[15:34:26] *** Joins: nyah (~nyah@bcdcb6e3.skybroadband.com)
[15:35:36] *** Joins: Atque (~Atque@user/atque)
[15:36:02] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.3)
[15:36:31] *** Joins: supakeen (~user@python/site-packages/supakeen)
[15:38:21] *** Quits: gaspare (~gastel@151.63.119.74) (Quit: Going offline, see ya! (www.adiirc.com))
[15:40:22] *** Joins: pulse (~pulse@user/pulse)
[15:43:31] *** Joins: random-jellyfish (~random-je@user/random-jellyfish)
[15:44:58] *** Joins: kadavul (~vazha@103.165.20.239)
[15:49:33] *** Joins: mahmutov (~mahmutov@37.155.35.85)
[15:54:05] *** Joins: geeknix (~pi@2001:e68:5432:e7b4:9184:efe7:4bf4:a5de)
[15:54:27] *** Quits: gxt_ (~gxt@gateway/tor-sasl/gxt) (Remote host closed the connection)
[15:54:57] *** Joins: gxt_ (~gxt@gateway/tor-sasl/gxt)
[15:55:45] *** Quits: mahmutov (~mahmutov@37.155.35.85) (Ping timeout: 244 seconds)
[15:57:30] *** Quits: fengdaolong (~fengdaolo@183.94.82.151) (Ping timeout: 260 seconds)
[15:58:00] <kre10s> tk: Nice. I had forgotten about that feature. The produced assembly also looks acceptable XD. It literally creates a lookup table.
[15:59:23] *** Joins: fengdaolong (~fengdaolo@183.93.98.27)
[16:01:17] <tk> it can also be useful for situations where you are passing pointers to const structs to functions (as a potential performance cost saving measure) instead of whole stucts but have situations where you still want to pass literals
[16:01:51] <tk> e.g. struct s { ... }; void foo(const struct *s); foo(&(struct s){ ... });
[16:02:17] <tk> heck, it doesn't need to be const, you're perfectly safe writing to it too
[16:02:55] <tk> the scope is as if there was a normal variable declaration at that point. so you can even do something like: struct s *s = &(struct s){ ... };
[16:02:57] <tk> it's very versatile
[16:06:21] *** Joins: grep_xtrange (~x@ac255238.ppp.asahi-net.or.jp)
[16:07:47] <kre10s> Just isn't a very nice thing to do to anyone who will be reading your code hahaha.
[16:08:57] <kre10s> https://bpa.st/HWGA
[16:09:23] *** Quits: z8z (~x@ac255238.ppp.asahi-net.or.jp) (Ping timeout: 264 seconds)
[16:10:45] *** Quits: smallvil_ (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Ping timeout: 244 seconds)
[16:10:46] <kre10s> I've been getting this linker error. any idea what it could be? it's for an stm32f103 but im doing everything bare bones. and i can't alocate any non zero globals because of it.
[16:13:40] <tk> kre10s: C99 has been around for over 20 years, C doesn't really have that many features, if someone encounters compound literals in a source file and refuses to learn about them they probably have no place reading a C codebase
[16:15:56] <tk> kre10s: if you are doing bare metal then you can obviously memcpy your globals at startup
[16:16:04] <tk> that's kind of how it's supposed to work
[16:17:28] <tk> this isn't the best channel for linker script questions but I think I can see the problem, let me just remind myself how linker scripts work
[16:19:07] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[16:20:57] *** Joins: night_wulfe__ (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[16:20:59] <tk> kre10s: instead of assigning _sidata to . (indirectly) at the end of .text why not .data { ... } >RAM AT>FLASH and then _sidata = ADDR(.data) ?
[16:20:59] <kre10s> I expect the startup code to initialize variables located in ram using the data in the .init section. (0 initialized vars are in .bss) But in the linker script i see no mention of .init so i don't know where it is coming from...
[16:21:42] <tk> could you tell me where I can find STM32_SEC_FLASH.ld ?
[16:21:51] <tk> and the other one
[16:21:54] <tk> STM32_COMMON.ld
[16:22:06] <tk> SEC_FLASH is commented out actually, just the COMMON one
[16:22:06] *** Quits: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net) (Ping timeout: 244 seconds)
[16:23:15] *** Quits: meator (~meator@user/meator) (Ping timeout: 260 seconds)
[16:23:29] *** Quits: Atque (~Atque@user/atque) (Remote host closed the connection)
[16:23:57] <tk> kre10s: https://the-tk.com/cgit/fmk/tree/layout.ld - here's one of my linker scripts where I was doing bare metal, https://the-tk.com/cgit/fmk/tree/setup.c#n52 - this is the code which does the memory initialisation
[16:24:09] <candide> Title of tk's link: setup.c - fmk - USB Keyboard firmware for the MK20DX256 (WIP)
[16:24:10] <candide> Title of tk's link: layout.ld - fmk - USB Keyboard firmware for the MK20DX256 (WIP)
[16:24:18] *** Joins: Atque (~Atque@user/atque)
[16:24:19] *** Quits: night_wulfe_ (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 265 seconds)
[16:24:50] *** Joins: gr33n7007h (~gr33n7007@user/gr33n7007h)
[16:24:52] <kre10s> sec_flash.ld is in the paste no? all three files are in one paste... I marked them with -- FILE_NAME.ld
[16:25:34] <tk> oh, I see, the -- mark the sections, sorry
[16:26:00] <kre10s> It's a bit complicated. to be honest i don't remember where i ripped it from.
[16:26:42] *** Quits: magla (~gelignite@55d4df94.access.ecotel.net) (Quit: Stay safe!)
[16:27:23] *** Joins: meator (~meator@user/meator)
[16:28:01] *** Quits: Nitrousoxide (~msdos@user/nitrousoxide) (Ping timeout: 245 seconds)
[16:29:53] <kre10s> It uses an interesting approach where the base address of all the peripherals are provided by the linker script which i thought was neat. 
[16:31:33] <kre10s> there are allot of .debug and .stab sections that I don't see in your script. Are you still able to load debug symbols in gdb for instance?
[16:31:58] <tk> kre10s: is the fact that you don't pass -nostdlib intentional? are you using the compiler's CRT to do the initialisation?
[16:32:03] *** Joins: Nitrousoxide (~msdos@user/nitrousoxide)
[16:32:30] *** Joins: AmR (~AmREiSa@156.199.106.121)
[16:32:37] <tk> kre10s: all the debugging I did was remote and that seemed to work just fine even with line information because I think it got that out of the local elf file
[16:32:41] <tk> but I can't remember the details
[16:33:02] <tk> it was over SWD
[16:33:06] *** Quits: haniaF (~haniaF@79.191.104.229.ipv4.supernova.orange.pl) (Quit: ZNC 1.8.2 - https://znc.in)
[16:33:10] *** Quits: V-T60 (~v@91.203.24.166) (Ping timeout: 260 seconds)
[16:35:41] <kre10s> That was my next question. Since I don't pass -nostdlib It should use the compilers init code. Maybe I'm missing some assembly init code to go along with this linker script.
[16:36:20] <tk> I think if you use the compiler's init code then you may need to define an .init section and place it somewhere
[16:36:35] <tk> I really don't know how to use the compiler's init code as i've never bothered with that
[16:37:00] <tk> the code I linked you was fully freestanding and all the initialisation was done by me, let me try something though
[16:37:08] <tk> I can modify it to add a _start which I think is required to use the CRT
[16:37:48] <tk> actually, it has a _start, what was it it needed
[16:38:08] <tk> ah, it's not that it needs a start, it's that it doesn't need a start
[16:38:35] *** Joins: Daemonick (~Daemonick@77.49.243.254.dsl.dyn.forthnet.gr)
[16:39:47] <tk> ah, it auto-allocates the .debug_* sections, they just don't end up in flash
[16:39:57] <tk> I can't see an .init
[16:40:10] <tk> is there an .init in your code somewhere (something specifying it should go in an .init section) ?
[16:40:28] <kre10s> hmm. so just adding the -nostdlib doesn't help.
[16:40:46] <kre10s> I'll try to find something. maybe I need -nostartfiles as well
[16:41:15] *** Joins: haniaF (~haniaF@79.191.104.229.ipv4.supernova.orange.pl)
[16:41:57] <tk> -nostdlib implies -nostartfiles
[16:41:59] <tk> (iirc)
[16:43:28] <tk> I think some object must be putting things in .init
[16:44:47] <tk> I would strongly recommend having .data AT>FLASH rather than AT ( _sidata ) and then setting _sidata from ADDR(.data) because I think at the root the overlap is a conflict between the linker's auto-placement of .init after .text and the manual placement of .data after .text
[16:45:02] <tk> I could be wrong though
[16:45:28] <kre10s> I will try this.
[16:46:51] *** Joins: X-Scale` (~ARM@50.77.166.178.rev.vodafone.pt)
[16:48:36] <kre10s> ah... Now i found the start code.
[16:50:01] *** Quits: X-Scale (~ARM@31.22.163.11) (Ping timeout: 244 seconds)
[16:50:01] *** X-Scale` is now known as X-Scale
[16:50:13] <kre10s> a function locates at the reset vector that copies _sidata to _sdata and zero fills _sbss to _ebss
[16:51:19] *** Quits: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net) (Remote host closed the connection)
[16:51:35] *** Joins: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net)
[16:52:16] *** Joins: fuzzypixelz (~fuzzypixe@eth-west-pareq2-46-193-4-100.wb.wifirst.net)
[16:52:37] *** Quits: fuzzypixelz (~fuzzypixe@eth-west-pareq2-46-193-4-100.wb.wifirst.net) (Client Quit)
[16:53:41] <kre10s> Nice. I learned quite a bit about linker scripts :)
[16:54:11] <kre10s> althought i still don't know why the code worked without -nostdlib
[16:55:06] *** Quits: dave0 (~davezero@069.d.003.ncl.iprimus.net.au) (Quit: dave's not here)
[16:55:39] *** Joins: Guest88 (~Guest88@2001:8f8:1425:c6a3:109e:3872:b87:ae15)
[16:56:06] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Remote host closed the connection)
[16:58:05] <tk> it's possible the .init section was previously being placed somewhere non-conflicting or that the linker placed it after .text and then promptly overwrote it silently
[16:58:28] *** Joins: mcleuder (~mcleuder@gateway/tor-sasl/mcleuder)
[16:59:40] <kre10s> Ah. that explains why it only broke after adding some initialized globals.
[17:00:38] *** Parts: Guest88 (~Guest88@2001:8f8:1425:c6a3:109e:3872:b87:ae15) ()
[17:00:44] <kre10s> So you are making/have made a keyboard?
[17:00:56] <tk> i have replaced the firmware of a keyboard
[17:01:06] <tk> it's sitting right next to it
[17:01:09] <tk> s/it/me/
[17:01:24] <tk> I am currently using it for my work laptop
[17:02:02] <tk> the only issue is that it doesn't support USB resets (aside from the initial reset) I can't remember why that was difficult or why I didn't do it to begin with but it just means that sometimes I need to unplug it and plug it back in, but other than that it's fully functioning
[17:03:19] <kre10s> I have a devkit for the DA14691 I wanted to make a bluetooth keyboard with.
[17:04:25] *** Joins: kilolympus (~kilolympu@185.65.135.177)
[17:05:28] *** Quits: DarkTrick (~DarkTrick@pl-749-047.bunbun.ne.jp) (Ping timeout: 252 seconds)
[17:06:24] <kre10s> It has USB+BLE and battery charger stuff so it would be really usefull. I wanted to try having it run micropython to allow the user to confifure all kinds of crazy things.
[17:06:53] *** Joins: X-Scale` (~ARM@92.250.96.217)
[17:06:57] *** Joins: shivesh (~shivesh@user/shivesh)
[17:07:21] <kre10s> But i decided to do things the hard way and haven't finished getting the examples to work :P
[17:07:35] <tk> yeah, but you'll learn a lot and it will be fun
[17:07:59] <kre10s> the original gripe i have with keyboards can't be solved anyway.
[17:08:02] *** Joins: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[17:08:18] *** Quits: plainoldcheese (~plainoldc@user/plainoldcheese) (Ping timeout: 265 seconds)
[17:08:54] *** Quits: fengdaolong (~fengdaolo@183.93.98.27) (Ping timeout: 260 seconds)
[17:09:08] <kre10s> since the OS is in charge of translating scancodes the keyboard has no say in what you actually get. So there is no OS independent way of making a special character
[17:09:16] *** Quits: X-Scale (~ARM@50.77.166.178.rev.vodafone.pt) (Ping timeout: 265 seconds)
[17:09:21] *** Joins: fengdaolong (~fengdaolo@183.94.82.220)
[17:09:50] *** X-Scale` is now known as X-Scale
[17:11:01] <kre10s> I dreamt of an OS independent international keyboard where you can change the layout with a keystoke combination.
[17:11:33] *** Joins: strajder (~strajder@user/strajder)
[17:12:53] *** Quits: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Read error: Connection reset by peer)
[17:15:27] *** Joins: tsujp (~tsujp@sourcehut/user/tsujp)
[17:17:32] <kre10s> Just being able to switch seamlessly between USB and BLE would probably be worth it though
[17:28:12] *** Quits: hexteex (~hexteex@gateway/tor-sasl/hexteex) (Ping timeout: 276 seconds)
[17:32:34] *** Joins: slidercrank (~slidercra@user/slidercrank)
[17:35:50] *** Joins: Famine_ (~Famine@user/famine)
[17:38:35] *** Quits: kadavul (~vazha@103.165.20.239) (Ping timeout: 244 seconds)
[17:39:14] *** Quits: Famine- (~Famine@user/famine) (Ping timeout: 260 seconds)
[17:39:34] *** Quits: pert (~pert@fsf/member/pert) (Ping timeout: 252 seconds)
[17:43:26] *** Joins: superboot (~agentgasm@user/superboot)
[17:44:22] *** Quits: bitwiser (~dhruv@2409:4070:2e1b:c65d:acb5:3c04:828:2b94) (Ping timeout: 258 seconds)
[17:45:28] *** Joins: kadavul (~vazha@103.165.20.239)
[17:47:24] *** Joins: doa70 (~doa70@pool-72-76-156-214.nwrknj.east.verizon.net)
[17:51:56] *** Quits: ztx (~ztx@user/ztx) (Quit: ztx)
[17:54:42] *** Joins: plainoldcheese (~plainoldc@user/plainoldcheese)
[17:55:56] *** Joins: wladimir (~doforlove@user/doforlove33)
[17:56:03] *** Joins: magla (~gelignite@55d4df94.access.ecotel.net)
[17:56:38] *** Quits: wladimir (~doforlove@user/doforlove33) (Client Quit)
[17:56:43] *** Quits: mrig (~AdiIRC@user/mrig) (Quit: Going offline, see ya! (www.adiirc.com))
[17:57:14] *** Joins: wladimir (~doforlove@user/doforlove33)
[17:57:33] *** Quits: wladimir (~doforlove@user/doforlove33) (Client Quit)
[18:01:28] *** Quits: alch (~alch@151.82.123.89) (Ping timeout: 265 seconds)
[18:02:19] *** Joins: mahmutov (~mahmutov@37.155.35.85)
[18:02:50] *** Joins: mrig (~mrig@user/mrig)
[18:03:55] *** Joins: ethrl (uid524335@user/doforlove33)
[18:08:15] *** Quits: fengdaolong (~fengdaolo@183.94.82.220) (Ping timeout: 260 seconds)
[18:08:26] *** Quits: doa70 (~doa70@pool-72-76-156-214.nwrknj.east.verizon.net) (Quit: leaving)
[18:09:31] *** Joins: doa70 (~doa70@pool-72-76-156-214.nwrknj.east.verizon.net)
[18:10:02] *** Quits: doa70 (~doa70@pool-72-76-156-214.nwrknj.east.verizon.net) (Client Quit)
[18:10:45] *** Joins: fengdaolong (~fengdaolo@183.93.98.27)
[18:11:06] *** ElementW_ is now known as ElementW
[18:17:24] *** Joins: fossforus (~stan@99-173-128-32.lightspeed.rlghnc.sbcglobal.net)
[18:21:00] *** Parts: g0z (~gauze@entropy.tmok.com) ()
[18:21:05] *** Quits: khoa (~khoa@user/khoa) (Quit: leaving)
[18:28:21] *** Quits: mcleuder (~mcleuder@gateway/tor-sasl/mcleuder) (Remote host closed the connection)
[18:29:57] *** Joins: quartz (~quartz@user/quartz)
[18:30:39] *** Joins: skapata (~Skapata@2804:14c:87b0:a6f9:4465:42da:6a61:c596)
[18:30:39] *** Quits: skapata (~Skapata@2804:14c:87b0:a6f9:4465:42da:6a61:c596) (Changing host)
[18:30:39] *** Joins: skapata (~Skapata@user/skapata)
[18:37:56] *** Joins: LTCD (~LTCD@2a02:c7f:dd1c:b600:88b9:35fc:7cfe:4fea)
[18:38:05] *** Quits: EtherNet (~ethernet@user/ethernet) (Quit: WeeChat 3.4-dev)
[18:38:35] *** Joins: EtherNet (~ethernet@user/ethernet)
[18:38:49] *** Joins: davidfetter_work (~davidfett@2601:640:4100:c200:b4a7:e0bf:fb5e:c685)
[18:41:15] *** Quits: random-jellyfish (~random-je@user/random-jellyfish) (Ping timeout: 256 seconds)
[18:41:30] *** Joins: goepsilongo (~goepsilon@2603-7000-ab00-62ed-0d00-af10-da91-027d.res6.spectrum.com)
[18:43:35] *** Quits: kadavul (~vazha@103.165.20.239) (Ping timeout: 264 seconds)
[18:43:55] *** Quits: davidfetter_work (~davidfett@2601:640:4100:c200:b4a7:e0bf:fb5e:c685) (Ping timeout: 252 seconds)
[18:46:46] *** Quits: fengdaolong (~fengdaolo@183.93.98.27) (Ping timeout: 244 seconds)
[18:46:54] *** Joins: kadavul (~vazha@103.165.20.239)
[18:47:06] *** Joins: Guest9035 (~Guest90@69.166.185.81.rev.sfr.net)
[18:48:03] *** Quits: hentai (~hentai@user/hentai) (Read error: Connection reset by peer)
[18:48:16] *** Joins: fengdaolong (~fengdaolo@183.93.99.109)
[18:48:21] *** Joins: hentai (~hentai@2a01:e0a:a5c:a070:2e61:e501:448:948)
[18:48:21] *** Quits: hentai (~hentai@2a01:e0a:a5c:a070:2e61:e501:448:948) (Changing host)
[18:48:21] *** Joins: hentai (~hentai@user/hentai)
[18:48:59] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[18:50:19] *** Quits: fengdaolong (~fengdaolo@183.93.99.109) (Client Quit)
[18:51:28] *** Joins: owensjrw (~owensjrw1@2600:1700:b5b0:6380::41)
[18:51:31] <owensjrw> clear
[18:51:56] <owensjrw> Hello, and good morning everyone.
[18:52:26] *** Joins: seninha (~seninha@user/seninha)
[18:54:01] *** Joins: cadmio (~cadmio@151.25.149.251)
[18:54:14] <cadmio> Hello
[18:55:34] <cadmio> this searcString is always NULL https://paste.gnome.org/pxzjs0zsf#line-54
[18:55:35] *** Joins: zmt00 (~zmt00@user/zmt00)
[18:57:04] *** Joins: cmbengue (~Thunderbi@207.191.249.160)
[18:58:39] *** Quits: msmhbd^ (~msmhbd@wsip-68-227-92-38.mc.at.cox.net) (Remote host closed the connection)
[19:00:19] *** Quits: jan6 (jan6@tilde.team/user/jan6) (Quit: WeeChat 3.2)
[19:00:20] <ski> presumably you'd need to call `createFindPopover' to get it to have another value
[19:00:37] *** Joins: jan6 (jan6@tilde.team/user/jan6)
[19:00:59] <cadmio> right, I need to get the contents of the `GtkEntry` when pressing the "find" button
[19:03:59] *** Joins: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl)
[19:04:49] <owensjrw> I am reading about structs and unions. My understanding is very basic. I think from my limited knowledge on the subject a struct can use and store all of its members (fields, attributes, whichever is correct), but a union can only store and use one at a time. When and why would a union be used?
[19:05:00] *** Quits: cmbengue (~Thunderbi@207.191.249.160) (Quit: Thanks, see you later.)
[19:07:27] *** Quits: Daemonick (~Daemonick@77.49.243.254.dsl.dyn.forthnet.gr) (Ping timeout: 244 seconds)
[19:07:51] *** Joins: alch (~alch@151.36.114.149)
[19:09:31] *** Joins: davidfetter_work (~davidfett@c-73-252-148-184.hsd1.ca.comcast.net)
[19:10:02] *** Quits: jinsun (~quassel@user/jinsun) (Ping timeout: 244 seconds)
[19:10:04] *** Joins: jinsun__ (~quassel@user/jinsun)
[19:14:50] *** Quits: davidfetter_work (~davidfett@c-73-252-148-184.hsd1.ca.comcast.net) (Ping timeout: 258 seconds)
[19:18:38] *** Joins: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net)
[19:19:11] *** haise0 is now known as haise01
[19:19:22] *** jinsun__ is now known as jinsun
[19:19:30] *** Joins: magic_ninja_work (~sparkie1@4.4.16.52)
[19:19:57] *** Joins: mcleuder (~mcleuder@gateway/tor-sasl/mcleuder)
[19:20:32] *** Quits: cadmio (~cadmio@151.25.149.251) (Quit: WeeChat 3.0)
[19:21:39] <sham1> owensjrw: you'd use a union when you want to store multiple different types of objects within the same space
[19:23:35] *** Quits: meator (~meator@user/meator) (Quit: Leaving)
[19:23:41] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[19:23:42] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[19:23:42] *** Joins: wroathe (~wroathe@user/wroathe)
[19:25:10] *** Joins: hexteex (~hexteex@gateway/tor-sasl/hexteex)
[19:26:10] <owensjrw> So tell me if I am reading this right if I have union worker {char empl[50]; int hrPay;} I can only store and use empl or hrPay and cannot store both or use both at the same time.
[19:26:37] <sham1> Eh. Ish
[19:27:17] <sham1> Basically the hrPay and empl will be on-top of each other in memory, as one could say
[19:27:26] *** Quits: Guest9035 (~Guest90@69.166.185.81.rev.sfr.net) (Quit: Client closed)
[19:27:44] *** Joins: aportnoy (~aportnoy@bras-base-toroon0628w-grc-22-174-95-160-240.dsl.bell.ca)
[19:28:09] *** Quits: aportnoy (~aportnoy@bras-base-toroon0628w-grc-22-174-95-160-240.dsl.bell.ca) (Changing host)
[19:28:09] *** Joins: aportnoy (~aportnoy@user/aportnoy)
[19:28:17] <owensjrw> Are they used and useful? Should I study this?
[19:28:30] *** Joins: random-jellyfish (~random-je@user/random-jellyfish)
[19:28:36] <sham1> They are used, and they are useful. They're used in places like embedded
[19:29:30] <owensjrw> So maybe and adrino or rasberry project? Something like that.
[19:29:38] <sham1> Maybe
[19:29:58] *** Joins: rgrinberg (~textual@201.182.226.118)
[19:30:18] <owensjrw> Cool Thanks..
[19:32:50] *** Quits: kadavul (~vazha@103.165.20.239) (Ping timeout: 260 seconds)
[19:33:50] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[19:35:06] *** Quits: gcd (~gcd@104-9-69-236.lightspeed.nsvltn.sbcglobal.net) (Remote host closed the connection)
[19:36:06] <kre10s> owensjrw: I've seen them used in message passing systems. they are sometimes called taged unions.
[19:37:14] *** Joins: meator (~meator@user/meator)
[19:37:20] <owensjrw> Thank you. It seems an odd type to me.
[19:37:28] * kre10s still hasn't figured out the union between lessWork and morePay
[19:37:31] <sham1> Well a union is very much an untagged union
[19:38:59] <quartz> Hello. I have a function that takes in two const void pointers. The purpose of the function is to compare two pointers that will point to a double value. I wrote this code: https://bpa.st/Z6MA   but when I compile it gcc gives me a warning "initialization discards ‘const’ qualifier from pointer target type"
[19:39:14] *** Joins: Thedarkb-Desktop (~Thedarkb@2001:bb6:b403:e042:ec96:6a9f:a991:8dd6)
[19:39:33] <quartz> I can't figure out why. I'm not changing what data1 is pointing to, I'm just creating a new pointer that points to data1/2
[19:39:43] *** Quits: Thedarkb-Desktop (~Thedarkb@2001:bb6:b403:e042:ec96:6a9f:a991:8dd6) (Read error: Connection reset by peer)
[19:40:24] *** Joins: Thedarkb-Desktop (~Thedarkb@2001:bb6:b403:e042:ec96:6a9f:a991:8dd6)
[19:41:03] *** Joins: gcd (~gcd@104-9-69-236.lightspeed.nsvltn.sbcglobal.net)
[19:41:34] <kre10s> you may not be changing the data. but you could.
[19:42:43] <quartz> So how am I to compare the two values if I can't create a pointer that points to it? Besides, the two pointers are passed in as void, so I can't dereference them...
[19:43:17] *** Quits: Atque (~Atque@user/atque) (Remote host closed the connection)
[19:44:05] <kre10s> *d1 = 4.1; would change the data pointed to by data1.
[19:44:59] *** Joins: Atque (~Atque@user/atque)
[19:45:41] <kre10s> try const double *d1 = data1; and const double *d2 = data2
[19:45:46] <quartz> Ohh
[19:45:52] <quartz> Ahhh yeah how dumb of me
[19:46:00] *** Joins: kadavul (~vazha@103.165.20.239)
[19:46:22] <kre10s> re return ((const double *)data1) == ((const double *)data2);
[19:46:37] *** Joins: wootehfoot (~wootehfoo@user/wootehfoot)
[19:47:01] *** Quits: tsujp (~tsujp@sourcehut/user/tsujp) (Quit: Client closed)
[19:47:24] <kre10s> err. sorry. with an additional dereference...
[19:47:40] <kre10s> re return (*(const double *)data1) == (*(const double *)data2);
[19:48:42] <quartz> Why do I need to cast the two? did you mean d1 and d2 instead of data1/data2?
[19:50:10] <kre10s> You want to take two pointers data1 and data2 and compare the doubles they would point to if they were double pointers.
[19:50:32] <quartz> So I don't need the previous lines?
[19:50:51] <quartz> AHh
[19:51:00] <kre10s> its a replacement for the entire body of that function.
[19:51:28] <quartz> WOw fancy 1 liner :)
[19:52:40] <kre10s> lol. now the question is probably why you need a function for that ;)
[19:53:16] *** Quits: kilolympus (~kilolympu@185.65.135.177) (Remote host closed the connection)
[19:53:26] *** Quits: seninha (~seninha@user/seninha) (Ping timeout: 244 seconds)
[19:54:16] <ski> owensjrw : "tagged `union'" is a useful thing, yes. `struct { enum { empl,hrPay } tag; union { char empl[50]; int hrPay; } u; }'. aka disjoint/discriminated union type, sum type, variant record type
[19:55:08] *** Joins: seninha (~seninha@user/seninha)
[19:56:16] <quartz> kre10s: school assignment
[19:56:45] *** Joins: kilolympus (~kilolympu@185.65.135.177)
[19:56:46] <quartz> Oddly enough, the function should return a 0 if the two are the same, but 1 if they are not.
[19:56:47] *** Quits: Echoz (~chris@user/echoz) (Quit: WeeChat 3.0.1)
[19:58:17] *** Joins: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[19:59:15] <kre10s> Doesn't double have two binary representations for 0 like -0 and +0? are those still considered same?
[19:59:18] *** Joins: aportnoy1 (~aportnoy@2607:f720:1901:1060::100)
[19:59:26] *** Joins: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net)
[19:59:48] <fizzie> Positive and negative zeros are both equal in terms of the == operator.
[20:01:06] *** Quits: plainoldcheese (~plainoldc@user/plainoldcheese) (Ping timeout: 260 seconds)
[20:01:10] <fizzie> And comparison functions that return 0 for equal tend to return -1 and +1 (or more generally, any negative / positive value) to indicate the first argument is less than / greater than the other.
[20:01:42] *** Quits: aportnoy (~aportnoy@user/aportnoy) (Ping timeout: 244 seconds)
[20:01:42] *** Quits: night_wulfe__ (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 244 seconds)
[20:01:43] <fizzie> That's the convention expected by, e.g., qsort, and used by the likes of strcmp.
[20:03:03] *** Joins: plainoldcheese (~plainoldc@user/plainoldcheese)
[20:03:45] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 265 seconds)
[20:04:14] *** Joins: ferdna (~ferdna@user/ferdna)
[20:04:18] <fizzie> And regarding your earlier paste, the simple fix would have been to just retain the const qualifier. `const double *d1 = data1;` and so on. I think that looks neater than the cast.
[20:04:42] <fizzie> Oh, that was mentioned, I just missed it when scrolling, sorry.
[20:05:59] <quartz> Sorry I'm a bit confused. I should still do == in the return statement and not != right? If they two are equal, than data1 == data2 will return 1 for true, but the function wants me to return 0 if they are the same... 
[20:06:20] *** Joins: elkalamar_ (elkalamar@gateway/vpn/airvpn/elkalamar)
[20:07:11] *** Joins: dsrt^ (~dsrt@wsip-68-227-92-38.mc.at.cox.net)
[20:07:28] <fizzie> If you want to be really clear about the wonky return value convention, `d1 == d2 ? 0 : 1` is an option too.
[20:08:07] *** Quits: magic_ninja_work (~sparkie1@4.4.16.52) (Ping timeout: 258 seconds)
[20:08:12] <fizzie> But you could write it as `d1 != d2`, yes. Or `!(d1 == d2)`.
[20:08:15] <quartz> Haha yeah that works too. I feel like it should return 1 if they are the same, but 0 otherwise. that makes more sense
[20:08:20] <quartz> Yeah
[20:08:22] *** Joins: elkalamar__ (elkalamar@gateway/vpn/airvpn/elkalamar)
[20:08:37] <fizzie> Do check first that you're not supposed to return -1 / 0 / 1 though.
[20:08:53] *** Quits: elkalamar (elkalamar@gateway/vpn/airvpn/elkalamar) (Ping timeout: 258 seconds)
[20:09:23] *** Quits: Church (~aleph@pool-98-116-232-112.nycmny.fios.verizon.net) (Ping timeout: 264 seconds)
[20:09:23] <quartz> It says "return 0 if they are the same, 1 otherwise"
[20:09:45] *** Joins: ioxzev1z (~ioxzev1z@user/ioxzev1z)
[20:09:46] *** Quits: aportnoy1 (~aportnoy@2607:f720:1901:1060::100) (Read error: Connection reset by peer)
[20:10:55] <sham1> I'd think that in the case of having a comparator that returns either 0 or 1, it should be more like "if these should be swapped (wrong relative order), return 1, otherwise 0"
[20:10:57] *** Joins: davidfetter_work (~davidfett@c-73-252-148-184.hsd1.ca.comcast.net)
[20:11:25] *** Joins: aportnoy1 (~aportnoy@bras-base-toroon0628w-grc-22-174-95-160-240.dsl.bell.ca)
[20:11:29] *** Quits: elkalamar_ (elkalamar@gateway/vpn/airvpn/elkalamar) (Ping timeout: 265 seconds)
[20:11:50] *** Joins: elkalamar_ (elkalamar@gateway/vpn/airvpn/elkalamar)
[20:12:40] <quartz> Yeah I guess that's the safe way to do it.
[20:14:47] *** Quits: elkalamar__ (elkalamar@gateway/vpn/airvpn/elkalamar) (Ping timeout: 264 seconds)
[20:15:59] *** Quits: davidfetter_work (~davidfett@c-73-252-148-184.hsd1.ca.comcast.net) (Ping timeout: 264 seconds)
[20:18:08] *** Joins: cloudbender (~cloudbend@user/cloudbender)
[20:18:36] *** Joins: cmbengue (~Thunderbi@207.191.249.160)
[20:18:45] *** Parts: grawity (grawity@star.nullroute.lt) ()
[20:18:50] *** Joins: bogdomania (bogdomania@user/bogdomania)
[20:20:28] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[20:20:28] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[20:20:28] *** Joins: wroathe (~wroathe@user/wroathe)
[20:21:31] *** Quits: owensjrw (~owensjrw1@2600:1700:b5b0:6380::41) (Quit: Leaving)
[20:21:46] *** Quits: kurahaupo (~kurahaupo@pa49-181-167-244.pa.nsw.optusnet.com.au) (Ping timeout: 245 seconds)
[20:22:32] *** Quits: cloudbender (~cloudbend@user/cloudbender) (Client Quit)
[20:22:36] *** Quits: Thedarkb-Desktop (~Thedarkb@2001:bb6:b403:e042:ec96:6a9f:a991:8dd6) (Remote host closed the connection)
[20:25:22] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 260 seconds)
[20:26:36] *** Quits: random-jellyfish (~random-je@user/random-jellyfish) (Quit: Client closed)
[20:26:58] *** Joins: random-jellyfish (~random-je@user/random-jellyfish)
[20:27:40] *** Quits: cmbengue (~Thunderbi@207.191.249.160) (Quit: Thanks, see you later.)
[20:28:46] *** Quits: paddymahoney (~paddymaho@cpe9050ca207f83-cm9050ca207f80.cpe.net.cable.rogers.com) (Remote host closed the connection)
[20:28:47] *** Joins: Guest9016 (~Guest90@69.166.185.81.rev.sfr.net)
[20:29:23] <fizzie> IME, "normal" comparison functions (in terms of defining an order over some type; distinct from an equality predicate) are either "return negative, zero or positive if first argument is less than, equal or greater than the second" (C strcmp, qsort; Perl <=> operator; Python old-style `cmp` methods; Java Comparator interface; ...) or "return true if first argument is less than the second" (C++ std::less;
[20:29:25] <fizzie> Go sort package; ...).
[20:29:42] <fizzie> "Return 0 if equal, 1 if not" seems like an odd mix of things.
[20:30:44] *** Joins: paddymahoney (~paddymaho@cpe9050ca207f83-cm9050ca207f80.cpe.net.cable.rogers.com)
[20:31:23] *** Joins: elkalamar__ (elkalamar@gateway/vpn/airvpn/elkalamar)
[20:32:03] <sham1> Yeah, that one is weird
[20:32:46] *** Quits: meator (~meator@user/meator) (Quit: Leaving)
[20:32:59] *** Joins: night_wulfe_ (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[20:33:57] *** Joins: Church (~aleph@pool-98-116-232-112.nycmny.fios.verizon.net)
[20:33:59] *** Quits: elkalamar_ (elkalamar@gateway/vpn/airvpn/elkalamar) (Ping timeout: 264 seconds)
[20:34:57] *** Quits: lovelace (~Elspeth@2.24.23.175) (Ping timeout: 258 seconds)
[20:35:12] *** Quits: paddymahoney (~paddymaho@cpe9050ca207f83-cm9050ca207f80.cpe.net.cable.rogers.com) (Remote host closed the connection)
[20:35:55] <sham1> Speaking of comparisons and sorting, I wonder if there's a good implementation of some kind of a stable sort out there, preferably an STB-like thing so that stuff could work better
[20:36:16] <sham1> And there would be fewer libraries to link agaonst
[20:36:49] *** Quits: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 244 seconds)
[20:37:12] *** Quits: euandreh (~euandreh@2804:14c:33:9fe5:ed38:680c:308b:2321) (Ping timeout: 268 seconds)
[20:37:58] *** Joins: euandreh (~euandreh@2804:14c:33:9fe5:299b:88e7:728b:a92)
[20:39:50] *** Joins: elkalamar_ (elkalamar@gateway/vpn/airvpn/elkalamar)
[20:40:31] *** Joins: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[20:42:05] *** Quits: gnoo (gnoo@user/gnoo) (Ping timeout: 264 seconds)
[20:42:30] *** Quits: elkalamar__ (elkalamar@gateway/vpn/airvpn/elkalamar) (Ping timeout: 244 seconds)
[20:44:02] *** Quits: night_wulfe_ (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 260 seconds)
[20:44:10] *** Joins: gnoo (~gnoo@user/gnoo)
[20:44:49] *** Joins: lovelace (~Elspeth@2.24.23.175)
[20:45:09] *** Joins: Narrat (~omnius@p200300df5f49119906ea56fffe2e7cdc.dip0.t-ipconnect.de)
[20:46:04] *** Quits: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net) (Ping timeout: 258 seconds)
[20:50:25] *** Quits: Praise (~Fat@user/praise) (Ping timeout: 260 seconds)
[20:50:38] *** Quits: wootehfoot (~wootehfoo@user/wootehfoot) (Read error: Connection reset by peer)
[20:52:49] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[20:54:15] *** Joins: pucara (~i@181.95.207.85)
[20:55:01] *** Joins: V-T60 (~v@91.203.24.166)
[20:55:22] *** Quits: Rounin (~david@84.212.130.215) (Remote host closed the connection)
[20:56:50] *** Quits: zmt00 (~zmt00@user/zmt00) (Quit: Gone.)
[20:56:55] *** Joins: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net)
[20:57:32] *** Quits: lovelace (~Elspeth@2.24.23.175) (Quit: Konversation terminated!)
[20:57:38] *** Quits: rgrinberg (~textual@201.182.226.118) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[20:57:49] *** Joins: paddymahoney (~paddymaho@cpe9050ca207f83-cm9050ca207f80.cpe.net.cable.rogers.com)
[20:58:00] *** Quits: aportnoy1 (~aportnoy@bras-base-toroon0628w-grc-22-174-95-160-240.dsl.bell.ca) (Ping timeout: 244 seconds)
[20:58:07] *** Quits: haise01 (~haise01@user/haise01) (Ping timeout: 252 seconds)
[20:58:10] *** Joins: lovelace (~Elspeth@2.24.23.175)
[20:58:19] *** Joins: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br)
[20:58:28] <quartz> In this interface: https://bpa.st/V3DA   why are the addFront, findNode, popFront, and addAfter have a * before the name of the function, while the others don't.
[20:59:28] *** Joins: zmt00 (~zmt00@user/zmt00)
[20:59:43] *** Joins: regulate (~regulate@koduro.com)
[20:59:43] <lovelace> because those functions return int*
[21:00:01] *** Quits: paddymahoney (~paddymaho@cpe9050ca207f83-cm9050ca207f80.cpe.net.cable.rogers.com) (Read error: No route to host)
[21:00:14] <lovelace> the other functions return int
[21:00:18] *** Joins: Macuser (~Macuser@216.30.159.201)
[21:00:38] *** Joins: paddymahoney (~paddymaho@cpe9050ca207f83-cm9050ca207f80.cpe.net.cable.rogers.com)
[21:00:41] *** Quits: hentai (~hentai@user/hentai) (Read error: Connection reset by peer)
[21:01:01] *** Joins: hentai (~hentai@2a01:e0a:a5c:a070:2e61:e501:448:948)
[21:01:01] *** Quits: hentai (~hentai@2a01:e0a:a5c:a070:2e61:e501:448:948) (Changing host)
[21:01:01] *** Joins: hentai (~hentai@user/hentai)
[21:01:32] <quartz> lovelace: But popFront is void, so it returns nothing?
[21:01:42] <ski> it returns a `void *'
[21:02:03] *** Quits: teepee (~teepee@openscad/teepee) (Ping timeout: 276 seconds)
[21:02:11] <lovelace> no, it return void*
[21:02:39] *** dim[m] is now known as dlozeve[m]
[21:02:41] *** Joins: Daemonick (~Daemonick@77.49.243.254.dsl.dyn.forthnet.gr)
[21:03:09] <quartz> OH!
[21:03:24] <quartz> How stupid of me
[21:04:27] *** Joins: Praise (~Fat@user/praise)
[21:04:52] *** Joins: teepee (~teepee@openscad/teepee)
[21:05:11] *** Quits: random-jellyfish (~random-je@user/random-jellyfish) (Ping timeout: 256 seconds)
[21:07:19] *** Quits: plainoldcheese (~plainoldc@user/plainoldcheese) (Quit: WeeChat 3.3)
[21:07:30] *** Quits: shivesh (~shivesh@user/shivesh) (Read error: Connection reset by peer)
[21:07:59] *** Joins: shivesh (~shivesh@user/shivesh)
[21:08:52] *** Joins: bird_ (gnoo@user/gnoo)
[21:08:55] *** Joins: random-jellyfish (~random-je@user/random-jellyfish)
[21:09:21] *** Joins: davidfetter_work (~davidfett@c-73-252-148-184.hsd1.ca.comcast.net)
[21:09:31] *** Joins: penguino (~mrpenguin@user/mrpenguin)
[21:14:22] *** Quits: davidfetter_work (~davidfett@c-73-252-148-184.hsd1.ca.comcast.net) (Ping timeout: 260 seconds)
[21:14:23] *** Joins: elkalamar__ (elkalamar@gateway/vpn/airvpn/elkalamar)
[21:16:15] *** Quits: katnis (uid15849@id-15849.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[21:16:49] *** Quits: elkalamar_ (elkalamar@gateway/vpn/airvpn/elkalamar) (Ping timeout: 252 seconds)
[21:17:09] *** Quits: mven (~mven@ip70-173-103-41.lv.lv.cox.net) (Quit: ZNC 1.8.2 - https://znc.in)
[21:18:00] *** Joins: mven (~mven@ip70-173-103-41.lv.lv.cox.net)
[21:25:25] *** Quits: hentai (~hentai@user/hentai) (Ping timeout: 260 seconds)
[21:26:21] <Ckat> thats one case for newlining after the returning type I guess
[21:26:47] <Ckat> or for putting the * on the other side
[21:26:57] *** Joins: bitwiser (~dhruv@2409:4070:2284:3069:612e:c96a:5126:33b)
[21:29:04] *** Parts: LTCD (~LTCD@2a02:c7f:dd1c:b600:88b9:35fc:7cfe:4fea) ()
[21:29:18] *** Joins: hentai (~hentai@user/hentai)
[21:31:20] *** Quits: hentai (~hentai@user/hentai) (Read error: Connection reset by peer)
[21:31:38] *** Joins: hentai (~hentai@user/hentai)
[21:32:23] *** Joins: elkalamar_ (elkalamar@gateway/vpn/airvpn/elkalamar)
[21:33:46] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[21:35:11] *** Quits: elkalamar__ (elkalamar@gateway/vpn/airvpn/elkalamar) (Ping timeout: 264 seconds)
[21:37:38] <quartz> I wrote some code that is suppose to implement the popFront function for this interface: https://bpa.st/V3DA   but when I run it, it does nothing. I can't think of why, because it SHOULD work. https://bpa.st/OMRQ
[21:38:07] *** Joins: Echoz (~chris@user/echoz)
[21:39:01] *** Quits: Guest9016 (~Guest90@69.166.185.81.rev.sfr.net) (Quit: Client closed)
[21:42:33] <sham1> What does the debugger say
[21:43:11] <quartz> Never used one
[21:43:16] <quartz> I'll try it
[21:44:10] *** Quits: bitwiser (~dhruv@2409:4070:2284:3069:612e:c96a:5126:33b) (Quit: Konversation terminated!)
[21:49:30] *** Quits: hexteex (~hexteex@gateway/tor-sasl/hexteex) (Ping timeout: 276 seconds)
[21:50:51] <V-T60> Hi. Should I just print a length counter with the longest string here?
[21:50:51] <V-T60> Exercise 1-16. Revise the main routine of the longest-line program so it will correctly print the length of arbitrary long input lines, and as much as possible of the text
[21:50:59] *** Quits: mcleuder (~mcleuder@gateway/tor-sasl/mcleuder) (Quit: mcleuder)
[21:53:53] *** Quits: gnoo (~gnoo@user/gnoo) (Quit: gnoo)
[21:54:00] <ski> Ckat : how so ?
[21:56:24] <ski> quartz : how do you run it ?
[21:56:57] <quartz> ski: I'm using this main function: https://bpa.st/5DVA
[21:57:08] <quartz> Everything up till popFront() works fine
[21:58:23] *** Joins: davidfetter_work (~davidfett@c-73-252-148-184.hsd1.ca.comcast.net)
[21:59:19] <quartz> I made some changes but it still won't print anything.I just malloc'ed the data from the first node, that's really it. https://bpa.st/Z5YA
[22:00:43] *** Quits: random-jellyfish (~random-je@user/random-jellyfish) (Ping timeout: 256 seconds)
[22:02:28] *** Quits: pucara (~i@181.95.207.85) (Quit: Lost terminal)
[22:03:37] *** Quits: davidfetter_work (~davidfett@c-73-252-148-184.hsd1.ca.comcast.net) (Ping timeout: 265 seconds)
[22:04:01] <ski> `malloc(sizeof(*(current->data)))' looks like nonsense. `current->data' has type `void *'5~
[22:04:54] <ski> .. `void *'
[22:05:05] <quartz> So I don't need to malloc the data stored in the head node?
[22:05:19] *** Quits: alicef (~none@gentoo/developer/alicef) (Quit: install gentoo)
[22:05:26] <ski> the data isn't stored in `head'. a pointer to it is stored there
[22:05:40] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[22:06:03] *** Joins: alicef (~none@gentoo/developer/alicef)
[22:06:21] <quartz> Right
[22:06:34] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[22:06:35] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[22:06:35] *** Joins: wroathe (~wroathe@user/wroathe)
[22:07:35] <ski> you fixed `traverseList' to not modify the list structure, yes ?
[22:07:52] <ski> does `findNode' modify it ?
[22:09:02] <quartz> Neither of them change the pointer to the head of the list if that's what you're asking
[22:09:55] <quartz> These are both functions: https://bpa.st/ZG6A
[22:10:48] *** Quits: V-T60 (~v@91.203.24.166) (Quit: Leaving.)
[22:13:18] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[22:14:05] *** Joins: humky (~humky@user/humky)
[22:16:56] *** Joins: cmbengue (~Thunderbi@207.191.249.160)
[22:17:53] *** Quits: elkalamar_ (elkalamar@gateway/vpn/airvpn/elkalamar) (Read error: Connection reset by peer)
[22:17:55] *** Joins: rahl (~rahl@102.114.87.133)
[22:18:34] *** Quits: sake (~sake@130.255.78.161) (Remote host closed the connection)
[22:23:48] <Ckat> ski: if there was a newline after the void * returning functions it mightve been more clear that they return a void * and not just "theres a * infront of the function name what does it mean"
[22:23:52] <Ckat> but thats just all assumptions
[22:24:43] <ski> this seems like just a matter of learning how to read function declarations
[22:24:46] *** Quits: DrNick42 (~DrNick42@bastion.spikeyfishtech.uk) (Quit: ZNC 1.8.2 - https://znc.in)
[22:25:22] <quartz> Yeah sorry haha
[22:25:31] *** Joins: DrNick42 (~DrNick42@bastion.spikeyfishtech.uk)
[22:27:29] <ski> no need to be sorry, we've all been at that point
[22:27:52] <Ckat> is this assignment code?
[22:28:20] <quartz> for a class? yeah
[22:28:43] <Ckat> it has that destinct horrible assignment structure you'd never find when normally doing something
[22:28:46] <quartz> I'm stumped on the popFront function, I've changed it so many times, but it won't print anything when I run the main
[22:28:52] <quartz> haha!
[22:31:44] *** Joins: cvmn (~caveman@gateway/tor-sasl/caveman)
[22:33:05] *** Joins: night_wulfe_ (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[22:36:15] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[22:36:44] <quartz> I'll take a break and come back.
[22:37:27] *** Quits: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 265 seconds)
[22:37:39] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[22:37:43] *** Joins: Zambyte (~Zambyte@cpe-104-228-60-14.nycap.res.rr.com)
[22:38:07] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Client Quit)
[22:38:34] *** Joins: random-jellyfish (~random-je@user/random-jellyfish)
[22:39:29] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[22:39:46] *** Quits: quartz (~quartz@user/quartz) (Quit: WeeChat 3.3)
[22:44:13] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Ping timeout: 265 seconds)
[22:45:03] *** Quits: Haxxa (~Haxxa@89nnjg0xckz9ggn6r5xm.ip6.superloop.com) (Quit: Haxxa flies away.)
[22:45:14] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[22:46:38] *** Joins: davidfetter_work (~davidfett@c-73-252-148-184.hsd1.ca.comcast.net)
[22:47:08] *** Joins: Thedarkb-Desktop (~Thedarkb@2001:bb6:b403:e042:8:b68b:646f:f305)
[22:47:08] *** Joins: Haxxa (~Haxxa@89nnjg0xckz9ggn6r5xm.ip6.superloop.com)
[22:49:53] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[22:50:12] *** Quits: cmbengue (~Thunderbi@207.191.249.160) (Quit: Thanks, see you later.)
[22:51:23] *** Quits: davidfetter_work (~davidfett@c-73-252-148-184.hsd1.ca.comcast.net) (Ping timeout: 264 seconds)
[22:51:39] *** Joins: ztx (~ztx@user/ztx)
[22:52:00] *** Joins: davidfetter_work (~davidfett@c-73-252-148-184.hsd1.ca.comcast.net)
[22:53:25] *** Quits: Senicar (~Senicar@gateway/tor-sasl/senicar) (Quit: Ping timeout (120 seconds))
[22:53:48] *** Quits: ioxzev1z (~ioxzev1z@user/ioxzev1z) (Quit: Leaving)
[22:53:49] *** Joins: Senicar (~Senicar@gateway/tor-sasl/senicar)
[22:57:23] *** Quits: davidfetter_work (~davidfett@c-73-252-148-184.hsd1.ca.comcast.net) (Ping timeout: 264 seconds)
[22:57:35] *** Quits: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br) (Ping timeout: 260 seconds)
[22:57:47] *** Joins: davidfetter_work (~davidfett@c-73-252-148-184.hsd1.ca.comcast.net)
[22:58:23] *** Quits: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net) (Ping timeout: 244 seconds)
[22:59:04] *** Joins: pert (~pert@fsf/member/pert)
[23:02:31] *** Quits: davidfetter_work (~davidfett@c-73-252-148-184.hsd1.ca.comcast.net) (Ping timeout: 244 seconds)
[23:03:29] *** Joins: davidfetter_work (~davidfett@c-73-252-148-184.hsd1.ca.comcast.net)
[23:03:50] *** Joins: moefh (~MoeFH@189-18-52-137.dsl.telesp.net.br)
[23:03:56] *** Quits: moefh (~MoeFH@189-18-52-137.dsl.telesp.net.br) (Client Quit)
[23:04:18] *** Joins: moefh (~MoeFH@189-18-52-137.dsl.telesp.net.br)
[23:07:27] *** Quits: alch (~alch@151.36.114.149) (Read error: Connection reset by peer)
[23:08:12] *** Quits: davidfetter_work (~davidfett@c-73-252-148-184.hsd1.ca.comcast.net) (Ping timeout: 244 seconds)
[23:08:12] *** Joins: quartz (~quartz@user/quartz)
[23:08:33] *** Joins: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net)
[23:10:41] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
[23:11:17] *** Joins: alch (~alch@151.36.163.144)
[23:12:45] *** Joins: chickfilla (~lastc@modemcable058.200-162-184.mc.videotron.ca)
[23:12:52] *** Quits: mad_enz (~mad_enz@cpe00508b114c3e-cm788df7e75290.cpe.net.fido.ca) (Ping timeout: 244 seconds)
[23:13:12] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[23:13:20] *** Joins: Klinda (~superleag@user/klinda)
[23:14:04] *** Joins: hexteex (~hexteex@gateway/tor-sasl/hexteex)
[23:14:16] <Klinda> helo why is this unsafe char dst[(strlen(src) + 1) * sizeof(char)]; ?
[23:15:25] <Ckat> might go out of bounds of dst
[23:15:30] <Ckat> src might be null
[23:15:42] <Ckat> many segfault opertunities here
[23:16:01] *** Joins: rgrinberg (~textual@ip11-246-50-179.ct.co.cr)
[23:16:02] *** Joins: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[23:16:32] *** Joins: juliopcrj (~juliopcrj@177.44.227.40)
[23:17:03] <Klinda> what do you mean it doesn't allocated that space correctly'
[23:17:06] <APic> B-)
[23:17:14] * APic laughs magically.
[23:17:30] <Ckat> I dont know you've given no context
[23:17:54] *** Parts: gemelen (~gemelen@zooey.gemelen.net) (...)
[23:18:14] <Klinda> just a function what you in input char *src
[23:18:27] <Ckat> it'll die when src is null
[23:18:30] <pert> as long as src is known to be a legitimate null-terminated string, the only thing you have to worry about is if strlen(src) + 1 gets too big; then it can cause stack overflow
[23:18:40] <Ckat> or when its longer than dst
[23:19:06] <Ckat> whats the goal of this line anyway
[23:19:43] <pert> Ckat: I believe it's a declaration, so that the size of dst is always big enough to store a copy of src
[23:19:45] *** Quits: night_wulfe_ (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 260 seconds)
[23:19:51] <Ckat> ah wait I see that now
[23:20:13] <Klinda> so what is the general fix to this problem?
[23:20:19] *** Joins: magic_ninja_work (~sparkie1@4.4.16.52)
[23:20:22] <Ckat> just check src isnt null before doing it
[23:20:42] <Ckat> if (!src) return;
[23:20:48] <Klinda> I should not use malloc?
[23:20:55] <pert> Klinda: the solution to the potential stack overflow if strlen(src) + 1 is too big? if you know the string is always going to be less than some size, just use that, otherwise use malloc
[23:21:15] <Klinda> yes I was thinking about malloc
[23:21:40] *** Joins: Akuli (~Akuli@213.216.211.158)
[23:21:41] <Ckat> you will then have to free it, as opposed to the dst decleration as you posted it
[23:21:47] <Ckat> otherwise fine solution
[23:23:06] <APic> Contexts ♥
[23:23:25] <Ckat> contexts are up for interpretation
[23:23:37] <pert> Klinda: so what are you planning to do with dst after you declare it? if you're going to copy src into it and you're on a UNIX system, I suggest looking into the strdup() convenience function which will handle that for you
[23:25:20] <Klinda> I am doing it with strncpy
[23:26:11] <Klinda> I am just a newbie to C, I am trying to figure out these sort of things :)
[23:26:30] <pert> okay then, sounds like you're on the right track. have fun!
[23:27:14] <Klinda> so the problem of the first solution is that there is a problem if the input is null and also is not sure that you allocated that space?
[23:27:53] <pert> well, if you know the pointer is not null---you haven't told us if that's possible in the context of this code---then you don't have to worry about that
[23:28:21] <pert> the more serious problem is stack overflow: you're declaring a variable-length array, but if the size gets too big, your program will crash without any warning in practice
[23:28:36] *** Joins: mad_enz (~mad_enz@cpe00508b114c3e-cm788df7e75290.cpe.net.fido.ca)
[23:29:05] <pert> for handling stuff that can be arbitrary large, unless you have a good reason not to, malloc() is the way
[23:31:56] <APic> Good old UNIX.
[23:32:17] <Ckat> wait was strdup a unix only
[23:32:58] <pert> strdup is part of POSIX, but it's slated for inclusion in C23
[23:33:03] *** Quits: Optimus (~risto@87.227.237.59) (Quit: Konversation terminated!)
[23:33:25] <strajder> Klinda: sizeof(char) is 1
[23:33:31] <pert> it has also been part of the (mostly unimplemented) Dynamic Allocation Functions Technical Report
[23:33:32] <APic> yay
[23:33:41] <APic> Memory Leaks ♥
[23:34:03] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Ping timeout: 244 seconds)
[23:34:13] <pert> don't get too excited
[23:34:35] <Ckat> theres only as many memory leaks as you allow for yourself
[23:34:36] <APic> Do not worry.
[23:34:58] <APic> Well, with Overcommit, i allow for way many.
[23:35:31] <APic> Memory is cheap.
[23:36:12] <APic> Also, one can remove the Tops and use them as Photocameras.
[23:36:16] *** Joins: AbleBacon (~AbleBacon@user/AbleBacon)
[23:36:38] *** Quits: boB_K7IQ (~boB_K7IQ@96.79.122.201) (Ping timeout: 244 seconds)
[23:36:55] <Klinda> char *dst = (char *)malloc((strlen(src)+1)*sizeof(char)); is this the correctt way?
[23:37:11] <Ckat> no need to cast
[23:37:49] <APic> C > C++
[23:37:53] <kre10s> you can also drop the sizeof(char) if you are willing to assume a chat is 1 byte
[23:38:06] <pert> a char is always one byte; that's part of ISO C
[23:38:06] <APic> char
[23:38:11] <Klinda> why in some code there is the cast and ins ome not?
[23:38:14] <APic> A Chat are several Byts.
[23:38:15] <APic> +e
[23:38:22] <APic> Sorry for the Caps, candide.
[23:38:28] <pert> no, a char is one byte
[23:38:30] <Ckat> is candide dead
[23:38:30] <candide> A​Pic, It happens.
[23:38:32] <Ckat> ah
[23:38:32] <APic> *nod*
[23:38:41] <APic> Bots are always dead.
[23:38:43] <APic> Somehow.
[23:38:45] <APic> 😉
[23:38:50] <Ckat> he didnt complain about all the sizeof(char)'s, but maybe someone already reset it to 0 days before
[23:38:55] <pert> whether to cast malloc is often debated. it's necessary in C++ code, but you just really shouldn't in C
[23:38:59] *** Quits: SGautam (uid286066@id-286066.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[23:39:06] <pragma-> ot dpesm
[23:39:10] <APic> Gesundheit.
[23:39:17] <Ckat> nice perl pragma- 
[23:39:34] <APic> pragma-: Is that Bulgarian?
[23:39:46] <pragma-> It doesn't do those automated replies to sizeof(char) and casting malloc like it used to.
[23:39:53] <APic> The Bots, ok.
[23:39:54] <Ckat> :(
[23:39:58] <Ckat> downgraded
[23:40:01] <APic> 😉
[23:40:13] <Klinda> I think that malloc return void, so I need to cast it to be type safe
[23:40:25] *** Quits: juliopcrj (~juliopcrj@177.44.227.40) (Quit: Leaving)
[23:40:32] <Thedarkb-Desktop> ,candide malloc
[23:40:32] <candide> No such factoid 'c​andide'; Found 3 factoids containing 'c​andide': [#c] %b chanstats longlonglong
[23:40:33] <ski> no
[23:40:33] <pert> only in C++, void in C is designed so it can automagically be converted to and from any type without a cast.
[23:40:42] <Thedarkb-Desktop> ,malloc
[23:40:42] <candide> There is no need to cast the result of library functions that return void *; it makes your code hard to read, adds no value, and can hide a bug if you don't have a valid prototype in scope. See http://c-faq.com/malloc/mallocnocast.html
[23:40:43] <pert> that's the main use for it
[23:40:51] *** Joins: b1101 (~b1101@pool-100-37-115-53.nycmny.fios.verizon.net)
[23:40:59] <Ckat> ,char
[23:40:59] <candide> char is required to be able to represent (at least) the values inclusively between -127 and 127 (signed char), or 0 and 255 (unsigned char). The representation chosen is implementation-defined, meaning some compilers will treat a char as signed, others unsigned. sizeof (char) is always 1. See also: CHAR_BIT, CHAR_MIN, CHAR_MAX and byte
[23:41:03] <Ckat> uuuh
[23:41:06] <Ckat> ,sizeof
[23:41:07] <candide> The sizeof operator yields a size_t, that is the size (in bytes) of its operand, which may be an expression or the parenthesized name of a type. e.g. `sizeof expr` and `sizeof (i​nt)`. That expression is not evaluated unless it is a variable-length array. sizeof does not have function call semantics; don't confuse people by writing it with function call syntax.
[23:41:10] <pragma-> `void` isn't the same as `pointer to void`
[23:41:31] <Ckat> was there no sizeof(char) == 1 factoid
[23:41:41] <pragma-> ,sizeof(char)
[23:41:44] * pragma- shrugs.
[23:41:47] <pragma-> Make one!
[23:42:23] <Ckat> I dont know the syntax for that either
[23:43:40] <APic> Once pragma- was very pissed and removed the candides from here. Or was it himself?
[23:43:46] <APic> Both i guess. 😉
[23:43:51] <pragma-> ,factadd sizeof(char) /say The size of `char` is always 1, by definition. Multiplying by `sizeof (char)` is adds no value and makes the code noisier.
[23:43:51] <candide> sizeof(char) added to #c.
[23:43:54] * pragma- shrugs.
[23:44:04] <APic> But at least he can still ban you so hard…
[23:44:08] <pragma-> >is adds
[23:44:21] <pragma-> ,change sizeof(char) s/is adds/adds/
[23:44:21] <candide> Changed: sizeof(char) is /say The size of `char` is always 1, by definition. Multiplying by `sizeof (char)` adds no value and makes the code noisier.
[23:44:40] <APic> Regular expressions pwn. srsly.
[23:44:42] <Ckat> I wouldve just done /say 1
[23:44:44] <Ckat> but sure
[23:44:50] <APic> Or is it „Srsly“?
[23:44:54] <APic> Probably not.
[23:48:12] *** Quits: kre10s (~maximilia@45.86.202.72) (Quit: Lost terminal)
[23:48:18] <strajder> Ckat: re: sizeof: I mentioned that the other day; worth remembering that ,-command :)
[23:50:13] *** Quits: humky (~humky@user/humky) (Quit: Leaving)
[23:51:50] *** Quits: Crescendo (~Crescendo@user/crescendo) (Ping timeout: 260 seconds)
[23:51:56] <Klinda> char *dst =malloc((strlen(src)+1)*sizeof(char)); strncpy(dst, src, strlen(src)); in this way?
[23:52:24] *** Joins: Crescendo (~Crescendo@user/crescendo)
[23:52:51] <pert> Klinda: that usage of strncpy() does not null-terminate your string. since you know for a fact your destination buffer is big enough, you should just use plain strcpy()
[23:53:13] <pert> also, as others have already said, multiplying by sizeof(char) is unnecessary since it's guaranteed equal to one
[23:53:19] *** Joins: lionkor (~lionkor@200116b80f0aa8007285c2fffea63d72.dip.versatel-1u1.de)
[23:53:20] <pert> but yes, you've essentially got it
[23:53:40] <pert> just be sure to call free(dst) when you're done with it
[23:53:41] <Klinda> what do you mean with null-terminate your string?
[23:53:54] *** Quits: seninha (~seninha@user/seninha) (Ping timeout: 258 seconds)
[23:54:15] * pragma- stares.
[23:54:32] <pert> strings in C are given by pointers to where they start. that way, you start reading a string at the beginning, and just keep moving on to the next character. the null byte is a character that tells functions when they should stop reading
[23:54:36] <APic> Probably strncpy() is optimized to plain strcpy() automagically by now if the destination buffer is proven to be big enough.
[23:55:05] <Klinda> ah it is the \o
[23:55:06] <Klinda> ?
[23:55:10] <pert> APIc: probably not, because strncpy() also adds "excess" null bytes unlike strcpy
[23:55:14] * pragma- stares at \o
[23:55:15] <APic> Sort of like printf("Fnord\n") to puts("Fnord") ages ago ☺
[23:55:15] <pert> Klinda: yes, it's the '\0'
[23:55:42] <Klinda> how can I add it ?
[23:56:02] *** Quits: aradesh (~aradesh@user/aradesh) (Quit: WeeChat 1.9.1)
[23:56:05] <pert> in this case, since you know the destination is big enough, you don't need to use strncpy. just do strcpy(dst, src)
[23:56:25] <Klinda> strcpy isn't a bad function to use?
[23:56:28] <pert> if you're sure you want to use strncpy anyway, you need to do strncpy(dst, src, strlen(src) + 1) (notice the +1)
[23:56:39] <Klinda> you can easly buffer overlfow 
[23:56:46] * pragma- shakes his head.
[23:56:49] <pragma-> Look at this guy.
[23:56:58] <pert> not in this case. in this case, since we *know* we made the destination big enough, buffer overflow is impossible
[23:57:26] <APic> Good old off-by-ones.
[23:57:30] <lionkor> o/
[23:57:39] <Klinda> whu +1?
[23:57:40] <APic> Until they just automagically made all buffer one char larger. 😸
[23:57:43] <APic> +s
[23:57:52] <Klinda> why +1 ?
[23:57:59] <APic> Because \0
[23:58:07] <Klinda> ah ok
[23:58:10] <pert> because strlen(src) gives you the length of src *excluding* the terminating null ('\0') byte. we want to include that extra byte, so we add one
[23:58:19] *** Quits: magic_ninja_work (~sparkie1@4.4.16.52) (Ping timeout: 244 seconds)
[23:58:26] *** Quits: lionkor (~lionkor@200116b80f0aa8007285c2fffea63d72.dip.versatel-1u1.de) (Quit: quit)
[23:58:27] <Klinda> that is a 0 in case of strncpy not \0
[23:58:40] *** Joins: lionkor (~lionkor@200116b80f0aa8007285c2fffea63d72.dip.versatel-1u1.de)
[23:58:50] *** Quits: [R] (~rs@genoce.org) (Ping timeout: 244 seconds)
[23:58:51] <pert> they're actually equivalent: '\0' is equal to 0
[23:58:58] <strajder> ^
[23:59:01] <pert> they're just different notations to refer to the same thing
[23:59:01] <Klinda> ok thank you
