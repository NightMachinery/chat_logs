[00:00:43] <phantomics> jackdaniel: talk soon, I'll let you know what I find out
[00:01:18] *** Quits: amb007 (~a_bakic@80.196.204.77.rev.sfr.net) (Ping timeout: 260 seconds)
[00:01:39] *** Joins: amb007 (~a_bakic@102.215.76.86.rev.sfr.net)
[00:02:48] <jackdaniel> great, thanks (and good luck)
[00:06:26] *** Parts: McParen (~mcp@user/mcparen) ()
[00:14:11] *** Quits: shka (~herr@83.175.151.96.piasta.pl) (Ping timeout: 264 seconds)
[00:19:24] *** Quits: gxt (~gxt@gateway/tor-sasl/gxt) (Remote host closed the connection)
[00:19:53] *** Joins: gxt (~gxt@gateway/tor-sasl/gxt)
[00:26:24] *** Joins: X-Scale` (~ARM@165.201.137.78.rev.vodafone.pt)
[00:27:26] *** Quits: X-Scale (~ARM@46.50.4.208) (Ping timeout: 260 seconds)
[00:28:07] *** Joins: srhm (~srhm@user/srhm)
[00:28:38] *** X-Scale` is now known as X-Scale
[00:34:25] *** Quits: karlosz (~karlosz@47.151.136.69) (Quit: karlosz)
[00:35:11] *** Quits: ym (~ym@5.143.220.3) (Ping timeout: 264 seconds)
[00:40:13] *** Quits: tyson2 (~user@cpe3497f6b5e860-cmbc4dfbbe6670.sdns.net.rogers.com) (Remote host closed the connection)
[00:45:31] <jcowan> Floats are perfectly rational (modulo infs and NaN); it's just that the mapping is not unique.
[00:46:26] <jcowan> You get to pick, within a certain range, which rational number corresponds to a given float (obvs you do not want one that breaks ordering)
[00:49:11] *** Joins: gigamonkey (~user@192-184-131-110.fiber.dynamic.sonic.net)
[00:51:03] *** Quits: azimut_ (~azimut@gateway/tor-sasl/azimut) (Ping timeout: 276 seconds)
[00:51:43] *** Quits: vollcheck (~vollcheck@093105011126.gdansk.vectranet.pl) (Quit: Leaving)
[00:52:22] *** Quits: srhm (~srhm@user/srhm) (Ping timeout: 268 seconds)
[00:54:23] <jcowan> Scheme has IMO a better (though not drop-in) definition of rationalize: "The (rationalize x y) procedure returns the simplest rational number differing from x by no more than y. A rational number r1 is simpler than another rational number r2 if r1 = p1/q1 and r2 = p2/q2 (in lowest terms) and |p1| ≤ |p2| and |q1| ≤ |q2|.
[01:02:26] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[01:03:18] *** Joins: X-Scale` (~ARM@83.223.243.66)
[01:03:18] *** Quits: X-Scale` (~ARM@83.223.243.66) (Excess Flood)
[01:03:22] *** Quits: X-Scale (~ARM@165.201.137.78.rev.vodafone.pt) (Ping timeout: 260 seconds)
[01:06:43] *** Joins: X-Scale (~ARM@83.223.243.66)
[01:21:45] *** Joins: Devon (~devon@pool-108-28-172-103.washdc.fios.verizon.net)
[01:24:32] *** Quits: z3t0 (~z3t0@146.71.14.98) (Ping timeout: 240 seconds)
[01:32:42] *** Joins: z3t0 (~z3t0@146.71.14.98)
[01:32:51] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[01:48:23] *** Quits: gaqwas (~john@dynamic-077-007-156-064.77.7.pool.telefonica.de) (Ping timeout: 264 seconds)
[01:49:22] <lagash> Anyone use lake? This thing: https://github.com/takagi/lake Anyone know any alternatives? I think it's interesting it includes SSH remote execution ability..
[01:56:43] *** Quits: thmprover (~user@047-042-215-236.res.spectrum.com) (Remote host closed the connection)
[02:08:39] *** Joins: tfeb (~tfb@88.98.95.237)
[02:09:39] *** tfeb is now known as tfb
[02:15:35] *** Quits: tfb (~tfb@88.98.95.237) (Quit: died)
[02:16:40] *** Joins: kadir (~kadir@78.178.105.36)
[02:17:47] *** Quits: sjl (~sjl@cpe-66-66-5-59.rochester.res.rr.com) (Quit: WeeChat 2.2-dev)
[02:18:02] *** Joins: igemnace (~ian@user/igemnace)
[02:20:10] *** Quits: peterhil_ (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi) (Quit: Leaving)
[02:20:22] *** Joins: peterhil (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi)
[02:43:25] *** Quits: kadir (~kadir@78.178.105.36) (Quit: WeeChat 3.3)
[02:49:46] *** Quits: Krystof (~user@81.174.155.115) (Ping timeout: 260 seconds)
[02:52:27] *** Quits: cosimone (~user@2001:b07:ae5:db26:a7aa:8027:6b4e:2fb3) (Quit: ERC (IRC client for Emacs 27.1))
[02:55:07] *** Joins: asen (~asen@2408:821b:618:2ef0:ab85:814b:bf8f:a143)
[02:56:13] *** Quits: asen (~asen@2408:821b:618:2ef0:ab85:814b:bf8f:a143) (Read error: Connection reset by peer)
[02:56:26] *** Joins: asen (~asen@2408:821b:618:2ef0:ab85:814b:bf8f:a143)
[03:07:55] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[03:17:02] *** Quits: Jing (~hedgehog@2604:a840:3::1049) (Remote host closed the connection)
[03:17:48] *** Joins: Jing (~hedgehog@2604:a840:3::1049)
[03:20:56] *** Quits: pve (~pve@37-136-155-235.rev.dnainternet.fi) (Quit: leaving)
[03:42:09] *** Quits: Guest74 (~Guest74@modemcable110.164-177-173.mc.videotron.ca) (Quit: Connection closed)
[03:58:15] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[03:58:36] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[03:59:18] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 260 seconds)
[03:59:54] *** Lord_of_Life_ is now known as Lord_of_Life
[04:03:22] *** Quits: Alfr (~Alfr@user/alfr) (Remote host closed the connection)
[04:05:06] *** Quits: Devon (~devon@pool-108-28-172-103.washdc.fios.verizon.net) (Ping timeout: 245 seconds)
[04:10:30] *** Quits: jdz (~jdz@185.23.160.114) (Ping timeout: 260 seconds)
[04:10:48] *** Joins: Alfr (~Alfr@user/alfr)
[04:11:10] *** Joins: jdz (~jdz@185.23.160.114)
[04:11:16] *** Quits: Alfr (~Alfr@user/alfr) (Remote host closed the connection)
[04:19:30] *** Quits: asen (~asen@2408:821b:618:2ef0:ab85:814b:bf8f:a143) (Remote host closed the connection)
[04:19:44] *** Joins: asen (~asen@2408:821b:618:2ef0:ab85:814b:bf8f:a143)
[04:20:57] *** Quits: asen (~asen@2408:821b:618:2ef0:ab85:814b:bf8f:a143) (Read error: Connection reset by peer)
[04:21:11] *** Joins: asen (~asen@2408:821b:618:2ef0:ab85:814b:bf8f:a143)
[04:22:49] *** Quits: asen (~asen@2408:821b:618:2ef0:ab85:814b:bf8f:a143) (Client Quit)
[04:30:00] *** Quits: peterhil (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi) (Remote host closed the connection)
[04:30:31] *** Quits: taiju (~taiju@240b:253:ec40:2400:2cdc:1f32:d88a:fa10) (Ping timeout: 245 seconds)
[04:36:21] *** Quits: rgherdt (~rgherdt@2a02:8109:86c0:d8d:f999:7dbf:ab48:5803) (Ping timeout: 245 seconds)
[04:36:32] *** Joins: taiju (~taiju@M014013236064.v4.enabler.ne.jp)
[04:41:40] *** Joins: peterhil (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi)
[04:43:10] *** Quits: random-nick (~random-ni@87.116.176.55) (Ping timeout: 260 seconds)
[04:44:35] *** Joins: rgherdt (~rgherdt@2a02:8109:86c0:d8d:f999:7dbf:ab48:5803)
[04:46:54] *** Quits: taiju (~taiju@M014013236064.v4.enabler.ne.jp) (Ping timeout: 260 seconds)
[04:46:55] *** Quits: peterhil (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi) (Remote host closed the connection)
[04:47:36] *** Joins: peterhil (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi)
[04:50:05] *** Quits: peterhil (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi) (Remote host closed the connection)
[04:50:50] *** Joins: peterhil (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi)
[04:53:24] <lagash> I think I recall ultralisp used it..
[04:58:31] *** Joins: Devon (~devon@pool-108-28-172-103.washdc.fios.verizon.net)
[04:58:51] *** Quits: rgherdt (~rgherdt@2a02:8109:86c0:d8d:f999:7dbf:ab48:5803) (Ping timeout: 245 seconds)
[05:00:35] *** Joins: antonv (~antonv@46.53.245.92)
[05:00:45] <antonv> Hi
[05:01:05] *** Joins: srhm (~srhm@user/srhm)
[05:01:16] <antonv> How do you think, when accessing a CLOS object fields from multiple threads, is it necessary to synchronize on the object?
[05:01:33] <antonv> sorry
[05:02:09] <antonv> I mean, the application logic does not require synchronization.
[05:02:46] <antonv> But can a CLOS object be broken somehow if a field is set from one thread and another field is set from another thread
[05:07:34] <hayley> I don't believe so, but like most tricky parts of concurrency, don't count on it.
[05:09:25] <hayley> To my knowledge, Bike's draft for concurrency in WSCL specifies that you can have data races on slots, but the only action that can completely "break" an object is CHANGE-CLASS.
[05:21:49] <antonv> what is WSCL?
[05:26:17] *** Quits: peterhil (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi) (Remote host closed the connection)
[05:26:58] *** Quits: antonv (~antonv@46.53.245.92) (Ping timeout: 256 seconds)
[05:35:02] <hayley> Well Specified Common Lisp. I wonder if the bot knows about it...
[05:35:06] <hayley> minion: tell antonv about WSCL
[05:35:07] <minion> antonv: WSCL: Well-Specified Common Lisp. Pronounce it as "whistle". A project to revise the Common Lisp standard in a non-controversial way. See https://github.com/s-expressionists/wscl
[05:35:13] <hayley> Hoorah.
[05:42:34] *** Joins: notzmv (~zmv@user/notzmv)
[05:46:07] *** Joins: antonv (~antonv@46.53.245.92)
[05:48:33] *** Joins: taiju (~taiju@M014013236064.v4.enabler.ne.jp)
[05:49:17] *** Joins: Guest74 (~Guest74@modemcable110.164-177-173.mc.videotron.ca)
[06:00:24] *** Quits: antonv (~antonv@46.53.245.92) (Ping timeout: 256 seconds)
[06:00:29] *** Quits: Catie (~user@user/catie) (Quit: rcirc on GNU Emacs 29.0.50)
[06:01:57] *** Joins: antonv (~antonv@46.53.245.92)
[06:02:47] *** Quits: gigamonkey (~user@192-184-131-110.fiber.dynamic.sonic.net) (Ping timeout: 264 seconds)
[06:04:08] <antonv> hayley: that's interesting, although I can not find any concurrency info in the https://github.com/s-expressionists/wscl
[06:04:56] <antonv> Anyways, probably it is safer to use a lock...
[06:05:06] *** Quits: srhm (~srhm@user/srhm) (Ping timeout: 245 seconds)
[06:07:17] *** Joins: gigamonkey (~user@192-184-131-110.fiber.dynamic.sonic.net)
[06:11:37] *** Joins: Oladon (~olad@98.43.81.226)
[06:12:15] *** Quits: gigamonkey (~user@192-184-131-110.fiber.dynamic.sonic.net) (Ping timeout: 256 seconds)
[06:13:03] *** Quits: sander (~sander@user/sander) (Quit: So long! :))
[06:13:48] *** Joins: Spawns_Carpet[m] (~inceptor-@2001:470:69fc:105::1:298b)
[06:15:42] *** Quits: antonv (~antonv@46.53.245.92) (Ping timeout: 256 seconds)
[06:16:03] *** Parts: bitspook[m] (~bitspookm@2001:470:69fc:105::fcd4) ()
[06:16:24] *** Joins: sander (~sander@user/sander)
[06:22:31] *** Quits: raeda (~raeda@74.215.157.51) (Quit: Leaving)
[06:25:50] *** Quits: waleee (~waleee@h-98-128-228-119.NA.cust.bahnhof.se) (Quit: WeeChat 3.3)
[06:28:41] *** Joins: gigamonkey (~user@192-184-131-110.fiber.dynamic.sonic.net)
[06:36:34] *** Quits: gigamonkey (~user@192-184-131-110.fiber.dynamic.sonic.net) (Ping timeout: 260 seconds)
[06:37:19] *** Joins: gigamonkey (~user@192-184-131-110.fiber.dynamic.sonic.net)
[06:38:11] *** Joins: peterhil_ (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi)
[06:42:23] *** Quits: gigamonkey (~user@192-184-131-110.fiber.dynamic.sonic.net) (Ping timeout: 264 seconds)
[06:50:19] <hayley> Hm, I don't think it is in that repository.
[06:50:30] <hayley> So you want <https://gist.github.com/Bike/a89cbfda64ace273b12eed8675dda632> instead.
[06:54:59] *** Quits: Inline (~Inline@2a02:908:1252:7a80:22ee:92f9:2a07:2e7) (Ping timeout: 264 seconds)
[06:55:09] *** Joins: gigamonkey (~user@192-184-131-110.fiber.dynamic.sonic.net)
[06:58:48] *** Quits: gigamonkey (~user@192-184-131-110.fiber.dynamic.sonic.net) (Remote host closed the connection)
[06:59:22] *** Joins: gigamonkey (~user@192-184-131-110.fiber.dynamic.sonic.net)
[07:03:49] *** Quits: gigamonkey (~user@192-184-131-110.fiber.dynamic.sonic.net) (Ping timeout: 256 seconds)
[07:06:23] *** Joins: gigamonkey (~user@192-184-131-110.fiber.dynamic.sonic.net)
[07:12:11] *** Quits: gigamonkey (~user@192-184-131-110.fiber.dynamic.sonic.net) (Ping timeout: 245 seconds)
[07:17:17] *** Joins: Alfr (~Alfr@user/alfr)
[07:21:22] *** Joins: gigamonkey (~user@192-184-131-110.fiber.dynamic.sonic.net)
[07:30:11] <beach> Good morning everyone!
[07:35:54] <hayley> I should mention that no implementation of Common Lisp actually implements that concurrency specification, but I think that "NN.1.2 Conflicts and Data Races" describes what you can do without racing.
[07:37:25] *** Joins: philb2 (~phil@2603-6011-8e00-012d-e0f2-c64f-5045-8a34.res6.spectrum.com)
[07:40:35] *** Quits: Devon (~devon@pool-108-28-172-103.washdc.fios.verizon.net) (Ping timeout: 264 seconds)
[07:40:35] *** Quits: philb2 (~phil@2603-6011-8e00-012d-e0f2-c64f-5045-8a34.res6.spectrum.com) (Read error: Connection reset by peer)
[07:40:53] *** Joins: philb2 (~phil@2603-6011-8e00-012d-e0f2-c64f-5045-8a34.res6.spectrum.com)
[07:43:23] *** Quits: philb2 (~phil@2603-6011-8e00-012d-e0f2-c64f-5045-8a34.res6.spectrum.com) (Read error: Connection reset by peer)
[07:49:05] *** Joins: philb2 (~phil@2603-6011-8e00-012d-e0f2-c64f-5045-8a34.res6.spectrum.com)
[07:49:07] *** Quits: philb2 (~phil@2603-6011-8e00-012d-e0f2-c64f-5045-8a34.res6.spectrum.com) (Read error: Connection reset by peer)
[07:49:23] *** Joins: philb2 (~phil@2603-6011-8e00-012d-e0f2-c64f-5045-8a34.res6.spectrum.com)
[07:51:29] *** Quits: philb2 (~phil@2603-6011-8e00-012d-e0f2-c64f-5045-8a34.res6.spectrum.com) (Read error: Connection reset by peer)
[07:54:19] *** Quits: cognemo (~cognemo@cpe-46-164-24-121.dynamic.amis.net) (Quit: ZNC 1.8.2 - https://znc.in)
[07:54:34] *** Joins: cognemo (~cognemo@cpe-46-164-24-121.dynamic.amis.net)
[07:56:47] *** Quits: Guest74 (~Guest74@modemcable110.164-177-173.mc.videotron.ca) (Ping timeout: 264 seconds)
[08:03:09] *** Joins: s-liao (~s-liao@101.86.101.64)
[08:15:01] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[08:28:05] *** Quits: semz (~none@user/semz) (Ping timeout: 268 seconds)
[08:30:37] *** Quits: igemnace (~ian@user/igemnace) (Remote host closed the connection)
[08:41:04] *** Joins: semz (~none@user/semz)
[08:54:49] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[09:00:07] *** Parts: pranavats (3fba1d1b34@jabberfr.org) (Disconnected: Replaced by new connection)
[09:04:20] *** Joins: pranavats (3fba1d1b34@jabberfr.org)
[09:07:15] *** Quits: s-liao (~s-liao@101.86.101.64) (Quit: Client closed)
[09:14:11] *** Quits: nature (~nature@45.32.235.173) (Ping timeout: 264 seconds)
[09:37:43] *** Parts: akoana (~ah@user/akoana) ()
[09:54:45] *** Parts: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz) ()
[09:58:11] *** Joins: Volt (~Volt@c-73-145-161-51.hsd1.mi.comcast.net)
[10:02:05] *** Quits: peterhil_ (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi) (Remote host closed the connection)
[10:02:18] *** Quits: Jing (~hedgehog@2604:a840:3::1049) (Remote host closed the connection)
[10:02:54] *** Joins: Jing (~hedgehog@125.105.142.73)
[10:03:05] *** Joins: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz)
[10:03:31] *** Joins: peterhil_ (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi)
[10:05:57] *** Parts: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz) ()
[10:08:02] *** Joins: VincentVega (~user@212.241.28.158)
[10:08:11] *** Quits: gigamonkey (~user@192-184-131-110.fiber.dynamic.sonic.net) (Ping timeout: 264 seconds)
[10:32:04] *** Joins: s-liao (~s-liao@101.86.101.64)
[10:32:46] *** Joins: gigamonkey (~user@192-184-131-110.fiber.dynamic.sonic.net)
[10:38:00] *** Quits: gigamonkey (~user@192-184-131-110.fiber.dynamic.sonic.net) (Remote host closed the connection)
[10:38:43] *** Joins: gaqwas (~john@dynamic-095-118-081-178.95.118.pool.telefonica.de)
[11:03:18] *** Joins: shka (~herr@83.175.151.96.piasta.pl)
[11:04:14] *** Joins: attila_lendvai (~alendvai@catv-89-132-208-37.catv.broadband.hu)
[11:04:41] *** Joins: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz)
[11:07:26] *** Parts: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz) ()
[11:16:59] *** Joins: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz)
[11:17:30] *** Parts: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz) ()
[11:28:08] *** Joins: Inline (~Inline@2a02:908:1252:7a80:9763:cc0b:5eaf:ee4)
[11:28:40] *** Quits: Inline (~Inline@2a02:908:1252:7a80:9763:cc0b:5eaf:ee4) (Remote host closed the connection)
[11:29:00] *** Joins: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz)
[11:30:10] *** Parts: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz) ()
[11:30:14] *** Joins: Inline (~Inline@2a02:908:1252:7a80:9763:cc0b:5eaf:ee4)
[11:34:01] *** Joins: pve (~pve@178-55-169-23.bb.dnainternet.fi)
[11:46:50] *** Joins: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz)
[11:47:49] *** Parts: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz) ()
[11:54:19] *** Joins: ym (~ym@5.143.220.3)
[12:04:08] *** Quits: s-liao (~s-liao@101.86.101.64) (Quit: Client closed)
[12:07:35] *** Quits: amk (~amk@109.255.169.126) (Ping timeout: 264 seconds)
[12:09:59] *** Joins: amk (~amk@109.255.169.126)
[12:17:29] *** Joins: karlosz (~karlosz@47.151.136.69)
[12:19:16] *** Joins: rain3 (~rain3___@2a02:2f09:d10a:400:9e2f:eb47:e2ae:761d)
[12:26:47] *** Quits: phantomics (~phantomic@71-218-252-43.hlrn.qwest.net) (Quit: Ex-Chat)
[12:43:13] *** Quits: karlosz (~karlosz@47.151.136.69) (Quit: karlosz)
[12:48:26] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[12:58:38] *** Joins: rgherdt (~rgherdt@2a02:8109:86c0:d8d:f999:7dbf:ab48:5803)
[13:11:54] *** Quits: Inline (~Inline@2a02:908:1252:7a80:9763:cc0b:5eaf:ee4) (Quit: Leaving)
[13:15:30] *** Joins: s-liao (~s-liao@101.86.101.64)
[13:15:43] *** Quits: s-liao (~s-liao@101.86.101.64) (Client Quit)
[13:31:26] *** Joins: s-liao (~s-liao@101.86.101.64)
[13:37:00] *** Joins: Devon (~devon@pool-108-28-172-103.washdc.fios.verizon.net)
[13:38:56] *** Quits: VincentVega (~user@212.241.28.158) (Read error: Connection reset by peer)
[13:46:03] *** Joins: Inline (~Inline@2a02:908:1252:7a80:b442:91f8:4666:206e)
[13:48:43] *** Joins: Krystof (~user@81.174.155.115)
[13:50:12] *** Joins: lisp123_win (~user@80.227.170.170)
[13:52:12] <lisp123_win> Does anybody have a list of all the namespaces and their associated functions (e.g. (fdefinition symbol)) for symbols? E.g. classes have names, slots have names, macros have names, the list goes on
[13:55:00] <beach> I don't have a complete list, but if you are collecting one, I can give you more entries.  Also, there are namespaces without any accessors, like for types.
[13:55:41] <beach> And FDEFINITION is not for symbols, its for global functions.  They can also have names like (SETF <symbol>).
[13:57:13] <beach> A namespace that has an accessor only in the MOP is the one for method combinations.
[13:57:20] <beach> mop find-method-combination
[13:57:20] <specbot> http://metamodular.com/CLOS-MOP/find-method-combination.html
[13:58:24] <beach> Slots don't have a namespace like that.  They just have a name associated with each instance.
[14:10:12] *** Quits: Volt (~Volt@c-73-145-161-51.hsd1.mi.comcast.net) (Quit:  )
[14:10:50] <lisp123_win> Thanks Beach
[14:11:04] <beach> Sure.
[14:11:22] <lisp123_win> I will collate something and share back with some notes against them, like what you have above
[14:12:52] *** Quits: s-liao (~s-liao@101.86.101.64) (Quit: Client closed)
[14:13:04] *** Joins: s-liao (~s-liao@101.86.101.64)
[14:18:18] <beach> There is one for compiler macros, and the accessor is COMPILER-MACRO-FUNCTION.
[14:20:26] <beach> I suppose there is one for condition types that doesn't have an accessor unless the implementation uses classes for condition types.  But perhaps every implementation does use classes.
[14:21:55] <lisp123_win> I see - thanks
[14:22:44] <Nilby> I thought there was a namespace diagram, but I guess I was thinking of this: ttps://sellout.github.io/2012/03/03/common-lisp-type-hierarchy
[14:27:15] <Nilby> (s+ "h" *) ;(
[14:29:07] *** Quits: s-liao (~s-liao@101.86.101.64) (Quit: Client closed)
[14:29:25] *** Joins: s-liao (~s-liao@101.86.101.64)
[14:29:31] <lisp123_win> Nilby: what's that?
[14:29:51] <jackdaniel> add "h" in front of the url above
[14:30:08] <Nilby> yes
[14:31:33] <lisp123_win> Ah :)
[14:35:40] *** Joins: McParen (~mcp@user/mcparen)
[14:37:44] *** Joins: random-nick (~random-ni@87.116.165.220)
[15:03:27] *** Joins: cosimone (~user@2001:b07:ae5:db26:a7aa:8027:6b4e:2fb3)
[15:16:10] <lisp123_win> https://github.com/sbcl/sbcl/blob/00decfb738ef085a305bce7216a37969c35f3f21/contrib/sb-introspect/introspect.lisp#L206
[15:16:38] <lisp123_win> Hopefully that is a relatively complete list, I'll go and add all the accessors for these tonight / in the coming days
[15:17:26] *** Quits: s-liao (~s-liao@101.86.101.64) (Ping timeout: 256 seconds)
[15:17:55] <beach> It's not the same as what you asked about before.
[15:18:43] <beach> Ordinary functions, generic functions, macro functions, and special operators all share a namespace.
[15:19:09] <beach> And methods don't have a namespace like that.
[15:23:15] <lisp123_win> Yes, but its a good starting point
[15:24:02] <lisp123_win> But I will read through the CLHS to see what's missed
[15:27:18] *** Quits: cosimone (~user@2001:b07:ae5:db26:a7aa:8027:6b4e:2fb3) (Quit: ERC (IRC client for Emacs 27.1))
[15:29:51] <lisp123_win> For example, since macros and ordinary functions share a namespace, you have to search for macro-function first when accessing
[15:31:08] <lisp123_win> Fortunately classes and methods have excellent introspection (I'm loving the closer-mop library) :)
[15:34:37] *** Quits: amb007 (~a_bakic@102.215.76.86.rev.sfr.net) (Read error: Connection reset by peer)
[15:34:58] *** Joins: amb007 (~a_bakic@102.215.76.86.rev.sfr.net)
[15:48:38] *** Quits: amb007 (~a_bakic@102.215.76.86.rev.sfr.net) (Read error: Connection reset by peer)
[15:48:49] *** Joins: amb007 (~a_bakic@102.215.76.86.rev.sfr.net)
[15:52:09] *** Joins: s-liao (~s-liao@101.86.101.64)
[15:54:33] *** Quits: LoopMacro (~LoopMacro@c-24-22-157-127.hsd1.wa.comcast.net) (Ping timeout: 268 seconds)
[15:56:11] <shka> jackdaniel: i managed to get flamegraphs out of the metering, was pretty easy modification to be made
[15:56:29] <jackdaniel> shka: congrats!
[15:56:39] <shka> a simple example https://i.imgur.com/GGeBGQo.png
[15:56:41] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[15:56:51] <shka> are you sure that you are ok with a fork?
[15:57:28] <jackdaniel> yeah
[15:57:52] <shka> ok, i will do that then, but perhaps next week
[15:59:37] *** Joins: Lycurgus (~juan@98.4.112.204)
[16:02:12] *** Quits: s-liao (~s-liao@101.86.101.64) (Ping timeout: 256 seconds)
[16:19:22] *** Parts: lisp123_win (~user@80.227.170.170) (ERC (IRC client for Emacs 26.3))
[16:25:19] *** Quits: Lycurgus (~juan@98.4.112.204) (Quit: Exeunt)
[16:46:06] *** Joins: s-liao (~s-liao@101.86.101.64)
[16:46:32] *** Joins: azimut_ (~azimut@gateway/tor-sasl/azimut)
[16:49:08] *** Joins: VincentVega (~user@212.241.28.158)
[16:50:27] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Ping timeout: 276 seconds)
[16:57:15] *** Joins: Nselm (~Nselm@p200300d56f24d76e1321613e2c885dc5.dip0.t-ipconnect.de)
[16:59:09] *** Joins: lisp123w (~user@80.227.170.170)
[17:00:52] <lisp123w> beach: With Eclector, is there a way to get the top-level form number of a definition (e.g. the third form in the file was the defintion for ordinary function MY-FN)? I am assuming not
[17:01:56] <beach> No, that's not the purpose of Eclector.  It just reads.  You need to do the rest yourself.
[17:02:05] <lisp123w> That's what I thought. Thanks
[17:05:49] *** Joins: Everything (~Everythin@37.115.210.35)
[17:06:10] <yitzi> lisp123w: I use the source tracking of Eclector with a custom client to do that in common-lisp-jupyter. If understand your request.
[17:06:51] <lisp123w> yitzi: Yes, I do that as well (using SBCL). Wanted to make it more portable
[17:07:34] <lisp123w> SBCL returns the top-level form number when you introspect the symbol
[17:09:31] <yitzi> I dont use SBCL internals, just Eclector since I need it to work for CMUCL inspection also.
[17:10:53] <lisp123w> Oh nice. Could I re-use your code :)? Do you just read each line and determine whether its a function definition, macro definition etc.?
[17:12:56] *** Quits: gaqwas (~john@dynamic-095-118-081-178.95.118.pool.telefonica.de) (Remote host closed the connection)
[17:26:32] <yitzi> I make a complete source map. It does distinguish between what the forms are. It does subform number also. It is MIT licensed so do what you want! https://github.com/yitzchak/common-lisp-jupyter/blob/c5531f60da0ec288a187a55ba699e38548233819/src/cl-jupyter/utils.lisp#L147
[17:26:44] <yitzi> does not distinguish
[17:27:03] *** Quits: attila_lendvai (~alendvai@catv-89-132-208-37.catv.broadband.hu) (Ping timeout: 268 seconds)
[17:27:10] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 256 seconds)
[17:27:24] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[17:37:07] *** Parts: McParen (~mcp@user/mcparen) ()
[17:37:54] *** Joins: igemnace (~ian@user/igemnace)
[17:51:10] *** Quits: s-liao (~s-liao@101.86.101.64) (Quit: Client closed)
[17:52:28] <Xach> borodust: cl-flow update any time soon?
[17:52:39] *** Joins: s-liao (~s-liao@101.86.101.64)
[18:00:35] *** Joins: asen (~asen@2408:821b:618:2ef0:ab85:814b:bf8f:a143)
[18:02:19] *** Quits: asen (~asen@2408:821b:618:2ef0:ab85:814b:bf8f:a143) (Read error: Connection reset by peer)
[18:02:33] *** Joins: asen (~asen@2408:821b:618:2ef0:ab85:814b:bf8f:a143)
[18:03:50] *** Quits: asen (~asen@2408:821b:618:2ef0:ab85:814b:bf8f:a143) (Max SendQ exceeded)
[18:04:11] *** Joins: asen (~asen@2408:821b:618:2ef0:ab85:814b:bf8f:a143)
[18:04:44] *** Quits: gxt (~gxt@gateway/tor-sasl/gxt) (Quit: WeeChat 3.3)
[18:04:44] *** Quits: peterhil_ (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi) (Remote host closed the connection)
[18:06:16] *** Joins: gxt (~gxt@gateway/tor-sasl/gxt)
[18:06:21] *** Quits: asen (~asen@2408:821b:618:2ef0:ab85:814b:bf8f:a143) (Read error: Connection reset by peer)
[18:06:35] *** Joins: asen (~asen@2408:821b:618:2ef0:ab85:814b:bf8f:a143)
[18:07:46] *** Quits: asen (~asen@2408:821b:618:2ef0:ab85:814b:bf8f:a143) (Max SendQ exceeded)
[18:08:07] *** Joins: asen (~asen@2408:821b:618:2ef0:ab85:814b:bf8f:a143)
[18:09:02] *** Joins: makomo (~makomo@user/makomo)
[18:09:34] *** Quits: asen (~asen@2408:821b:618:2ef0:ab85:814b:bf8f:a143) (Max SendQ exceeded)
[18:10:10] *** Joins: asen (~asen@2408:821b:618:2ef0:ab85:814b:bf8f:a143)
[18:11:11] *** Quits: asen (~asen@2408:821b:618:2ef0:ab85:814b:bf8f:a143) (Max SendQ exceeded)
[18:11:33] *** Joins: asen (~asen@2408:821b:618:2ef0:ab85:814b:bf8f:a143)
[18:11:45] *** Quits: asen (~asen@2408:821b:618:2ef0:ab85:814b:bf8f:a143) (Client Quit)
[18:20:09] *** Joins: peterhil_ (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi)
[18:22:16] *** Quits: VincentVega (~user@212.241.28.158) (Quit: ERC (IRC client for Emacs 27.2))
[18:22:17] *** Quits: amb007 (~a_bakic@102.215.76.86.rev.sfr.net) (Read error: Connection reset by peer)
[18:23:08] *** Joins: VincentVega (~user@212.241.28.158)
[18:23:31] *** Joins: amb007 (~a_bakic@102.215.76.86.rev.sfr.net)
[18:27:46] *** Quits: taiju (~taiju@M014013236064.v4.enabler.ne.jp) (Ping timeout: 260 seconds)
[18:29:31] *** Joins: taiju (~taiju@M014013236064.v4.enabler.ne.jp)
[18:35:50] *** Quits: s-liao (~s-liao@101.86.101.64) (Quit: Client closed)
[18:37:10] *** Quits: VincentVega (~user@212.241.28.158) (Remote host closed the connection)
[18:39:24] *** Joins: VincentVega (~user@212.241.28.158)
[18:52:50] *** Joins: gaqwas (~john@dynamic-095-118-081-178.95.118.pool.telefonica.de)
[19:02:56] *** Joins: attila_lendvai (~alendvai@catv-89-132-208-37.catv.broadband.hu)
[19:20:40] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[19:22:21] *** Quits: Nselm (~Nselm@p200300d56f24d76e1321613e2c885dc5.dip0.t-ipconnect.de) (Quit: Client closed)
[19:32:08] *** Joins: phantomics (~phantomic@71-218-252-43.hlrn.qwest.net)
[19:35:48] *** Joins: Bike (~Bike@71.69.170.70)
[19:35:48] *** ChanServ sets mode: +o Bike
[19:40:02] *** Joins: lotuseater (~user@p200300e7871bd300c158d62dc7544d08.dip0.t-ipconnect.de)
[19:42:33] *** Joins: tyson2 (~user@bras-base-toroon0628w-grc-46-142-112-141-177.dsl.bell.ca)
[19:42:35] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[19:43:06] *** Joins: Guest7426 (~Guest74@modemcable110.164-177-173.mc.videotron.ca)
[19:45:24] *** Joins: robin__ (~robin@user/terpri)
[19:46:35] *** Quits: robin (~robin@user/terpri) (Ping timeout: 264 seconds)
[19:49:10] *** Quits: robin__ (~robin@user/terpri) (Client Quit)
[19:49:27] *** Joins: robin (~robin@user/terpri)
[20:00:24] *** Quits: shka (~herr@83.175.151.96.piasta.pl) (Quit: Konversation terminated!)
[20:03:34] *** Joins: shka (~herr@83.175.151.96.piasta.pl)
[20:06:37] *** Joins: cosimone (~user@2001:b07:ae5:db26:a7aa:8027:6b4e:2fb3)
[20:10:36] *** Joins: yewscion (~yewscion@72-21-196-65.amazon.com)
[20:18:37] *** Joins: nature (~nature@45.32.235.173)
[20:41:47] *** Joins: bcasiello (~bcasiello@066-189-087-112.biz.spectrum.com)
[20:43:24] *** Quits: tyson2 (~user@bras-base-toroon0628w-grc-46-142-112-141-177.dsl.bell.ca) (Remote host closed the connection)
[20:48:18] *** Quits: VincentVega (~user@212.241.28.158) (Read error: Connection reset by peer)
[20:54:23] *** Quits: peterhil_ (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi) (Ping timeout: 264 seconds)
[20:56:41] *** Joins: peterhil_ (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi)
[20:58:04] *** Quits: peterhil_ (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi) (Remote host closed the connection)
[20:58:17] *** Joins: peterhil_ (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi)
[21:01:02] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 268 seconds)
[21:02:54] *** Joins: waleee (~waleee@h-98-128-228-119.NA.cust.bahnhof.se)
[21:07:27] *** Quits: yewscion (~yewscion@72-21-196-65.amazon.com) (Quit: Connection closed)
[21:36:00] *** Joins: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz)
[21:37:00] *** Parts: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz) ()
[21:37:15] *** Joins: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz)
[21:41:44] *** Parts: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz) ()
[21:47:22] *** Joins: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz)
[21:50:18] *** Parts: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz) ()
[21:51:36] *** Joins: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz)
[21:53:57] *** Joins: yewscion (~yewscion@72-21-196-65.amazon.com)
[21:54:02] *** Parts: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz) ()
[21:55:13] *** Quits: Bike (~Bike@71.69.170.70) (Quit: Connection closed)
[21:55:43] *** Quits: Everything (~Everythin@37.115.210.35) (Quit: leaving)
[21:57:48] *** Joins: karlosz (~karlosz@47.151.136.69)
[22:02:32] *** Joins: tyson2 (~user@206-248-138-20.dsl.teksavvy.com)
[22:21:22] *** Joins: Bike (~Bike@71.69.170.70)
[22:21:22] *** ChanServ sets mode: +o Bike
[22:25:27] <shka> jackdaniel: one more thing, it seems that profiling overhead is calculated to be equal 0 in metering
[22:25:31] <shka> is that expected?
[22:28:47] *** Quits: karlosz (~karlosz@47.151.136.69) (Quit: karlosz)
[22:37:11] *** Quits: Inline (~Inline@2a02:908:1252:7a80:b442:91f8:4666:206e) (Ping timeout: 245 seconds)
[22:38:50] *** Quits: ym (~ym@5.143.220.3) (Ping timeout: 256 seconds)
[22:45:55] *** Joins: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz)
[22:46:35] <Guest7426> is there an easy way to tell how many bits are set in a bit array?
[22:47:42] *** Parts: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz) ()
[22:53:33] <shka> Guest7426: yes
[22:53:43] <shka> (reduce #'+ array)
[22:54:42] <Guest7426> maybe I should clarify, which bits are set. by easy I mean some built in function.
[22:55:39] <shka> i don't know any for this specific task, but reduce (or count) work fine
[22:58:30] <Bike> there is no built in equivalent to logbitp. hopefully implementations optimize count calls appropriately
[22:58:40] <Bike> er, logcount.
[22:59:43] <Guest7426> I'm starting to think an integer would be better than a bit array.
[23:00:03] <shka> i am looking for a system that implements reader macro for running shell programs
[23:00:07] <shka> i can't remember the name
[23:06:36] <shka> ok, got it
[23:06:40] <shka> CLESH
[23:06:47] <shka> https://github.com/Neronus/clesh
[23:10:39] <contrapunctus> ::notify Josh_2 I ran into some more Clack documentation today! :D https://jasom.github.io/clack-tutorial/posts/getting-started-with-clack
[23:10:39] <Colleen> contrapunctus: Got it. I'll let Josh_2 know as soon as possible.
[23:16:17] *** Quits: tyson2 (~user@206-248-138-20.dsl.teksavvy.com) (Remote host closed the connection)
[23:22:47] *** Quits: rain3 (~rain3___@2a02:2f09:d10a:400:9e2f:eb47:e2ae:761d) (Ping timeout: 265 seconds)
[23:23:06] <phantomics> Guest7426: are you asking for a function that would give #(1 3 6) in return for #(0 1 0 1 0 0 1)?
[23:27:57] *** Quits: nature (~nature@45.32.235.173) (Read error: Connection reset by peer)
[23:29:22] <Guest7426> sure, doesn't need to return an array though.
[23:30:04] <Guest7426> though for this use case I think I should probably just write something that short circuits as soon as it finds more than one element, since for this case I only need to know when there's 1 or less elements.
[23:30:41] <Guest7426> and then probably just use position.
[23:31:47] <Guest7426> though I'm not even sure if any implementation has given any love to performance for bit arrays.
[23:37:11] <phantomics> You can do this with the April library: (april-c "{⎕IO←0 ⋄ ⍸⍵}" #(0 1 0 1 0 0 1)) → #(1 3 6)
[23:38:21] <Guest7426> like i said, that's all gobbledygook to me with characters I can't type.
[23:39:05] <phantomics> Oh, you're the guy from yesterday, well that code snippet you can just paste in, it returns the indices of elements equal to 1
[23:39:07] <shka> Guest7426: sbcl bit arrays are pretty good
[23:39:41] <shka> BUT you should declare types
[23:39:49] *** Joins: theothornhill (~user@217.84-49-191.nextgentel.com)
[23:40:31] <Guest7426> shka: that's the plan once this basic refactoring is done.  Be interesting to see what the difference will be.
[23:40:55] <shka> you can check assembly code to make sure it does what you want
[23:41:08] <Guest7426> phantomics: I'm not going to add another dependency for something that just requires looping over an array and collecting indices.
[23:42:19] <Bike> https://github.com/sbcl/sbcl/blob/master/src/compiler/generic/vm-tran.lisp#L515-L532 sbcl transforms count on simple-bit-vector appropriately
[23:43:43] <phantomics> Then you could just do (let ((indices)) (loop :for i :across #(0 1 0 1 0 0 1) :for ix :from 0 :when (= 1 i) :do (push ix indices)) (reverse indices))
[23:45:11] <Guest7426> sigh
[23:45:48] <Guest7426> bike: that's interesting.  Should be better than integers since I'll be going past most-positive-fixnum
[23:46:29] <Bike> phantomics: i think guest just wants a count, not the positions. i'm sure that's even shorter in apl, of course
[23:47:20] <phantomics> He said that (reduce #'+ ...) wouldn't work,he wanted to know which were set
[23:47:56] *** Quits: gaqwas (~john@dynamic-095-118-081-178.95.118.pool.telefonica.de) (Remote host closed the connection)
[23:48:22] *** Joins: gaqwas (~john@dynamic-095-118-081-178.95.118.pool.telefonica.de)
[23:49:19] <jackdaniel> shka: that depends on the speed of your implementation/ machine :-)
[23:49:20] <Bike> oh. hm. well, which do you want, guest? a list of positions is going to more expensive since it involves consing.
[23:49:39] <shka> jackdaniel: oh, this is a fast computer i would say
[23:49:49] <shka> rather beefy CPU
[23:50:37] <Guest7426> if there was a built in function I'd use it and remember for next time.  For this use case I just need to know if there is 1 or less.
[23:51:03] <phantomics> So if just one is set, you want to know its position, otherwise return nil?
[23:51:59] <shka> well, there is FIND
[23:52:09] <shka> or POSITION
[23:52:23] <shka> which both would do the trick in this case
[23:52:30] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 256 seconds)
[23:52:38] <Guest7426> which will both work if there is more than one bit set.
[23:53:16] <phantomics> (let ((indices)) (loop :for i :across #(0 0 0 1 ) :for ix :from 0 :while (> 2 (length indices)) :when (= 1 i) :do (push ix indices)) (if (not (second indices)) indices))
[23:53:34] <phantomics> This will return the position of the only 1 value or nil if there are more than 1
[23:54:19] <Guest7426> i do not need you to write code for me.
[23:55:19] <jackdaniel> shka: then the overhead of these few instructions may be very close to
[23:55:20] <jackdaniel> 0
[23:55:42] <shka> well, that's great
[23:56:49] <phantomics> Not sure what you're asking for then, there's no inbuilt function I know of to get the first 1 index iff there's only one of them
[23:58:06] <shka> well, there is position which will sort of do that, but without checking if there is one or more
[23:59:04] <shka> Guest7426 said he wants to shortcircut some logic, and i think that simply calling POSITION or FIND is exactly what he wants in this case
[23:59:32] <Bike> those should both be computable efficiently on the machine. the position through count leading zeroes and the count through logcount. i would just do count and then position.
