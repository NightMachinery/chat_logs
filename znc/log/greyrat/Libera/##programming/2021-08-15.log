[00:00:22] <smallville7123> i can write it in one
[00:00:36] <smallville7123> State myStateMachine = new StateMachine
[00:00:38] <smallville7123> :)
[00:00:46] <jeaye> yep
[00:00:51] <jeaye> pyzozord: 80/20 rule.
[00:01:24] <pyzozord> jeaye: yeah, my favourite :)
[00:01:28] <smallville7123> also i have written a programable state machine in kotlin :)
[00:01:53] *** Joins: zaher_ (~zaher@37.48.148.154)
[00:01:59] *** Quits: SmokenatorZ (~Smokenato@177.62.67.199) (Quit: Screw you guys, im going home)
[00:02:19] <pyzozord> smallville7123: cool, would you share you code if it's not too long?
[00:02:59] *** Joins: Foritus (~buggery@cpc91316-watf11-2-0-cust68.15-2.cable.virginm.net)
[00:03:56] *** Quits: zaher (~zaher@37.48.145.187) (Ping timeout: 268 seconds)
[00:04:07] <pyzozord> I'm thinking about something like a function stateTransition(currentState, newStateName). And inside that function simply has a hashtable of with states as keys and array of strings as values. And it just simply checks if this state can transition to this other state
[00:04:28] <pyzozord> actually transitionState would be a better name
[00:04:37] <smallville7123> pyzozord: sure
[00:04:39] *** Quits: mci64 (~x@185.242.190.95) (Quit: Leaving)
[00:05:04] *** Joins: SmokenatorZ (~Smokenato@179.247.174.196)
[00:05:06] *** Quits: fweht (uid404746@id-404746.tooting.irccloud.com) (Quit: Connection closed for inactivity)
[00:05:31] <beaky> nice i love transiistionstate]
[00:05:32] <smallville7123> https://github.com/mgood7123/KotlinNativeTuringMachine
[00:06:16] <pyzozord> smallville7123: ah but that uses a library, thanks anyway. Indeed looks simple
[00:07:32] *** Quits: nekobyte (~based@user/nekobit) (Killed (NickServ (GHOST command used by nekodesu!~nano@user/nekobit)))
[00:08:11] <smallville7123> ?
[00:08:41] <smallville7123> it does not use a library
[00:08:53] *** Quits: Enitin (~Enitin@82.102.22.84) (Remote host closed the connection)
[00:09:11] <pyzozord> I mean it imports something, there is no code implementing the state machine
[00:09:22] <pyzozord> only code using one
[00:09:25] *** Joins: joshcom (~joshcom@2600:8800:a706:2b00:5be3:4224:17a3:9012)
[00:09:37] <smallville7123> -_-
[00:09:55] <smallville7123> https://github.com/mgood7123/KotlinNativeTuringMachine/blob/master/src/stateMachine/StateMachines.kt
[00:10:25] <pyzozord> oh sorry, i'm dumb, I didn't even notice it was github, I though it was a pastebin
[00:10:55] <pyzozord> oh wow that's a big one 700+ lines
[00:11:47] <pyzozord> smallville7123: what's "tape"?
[00:11:59] <smallville7123> alsoo https://github.com/mgood7123/KotlinNativeTuringMachine/blob/master/src/stateMachine/examples/examples.kt
[00:12:26] <smallville7123> pyzozord: read the readme for lots of details
[00:12:47] <pyzozord> oh wait, it's not just a state machine, it's a whole turing machine. It's a tape from a turing machine
[00:13:17] *** Quits: andrewSC (~andrewSC@archlinux/trusteduser/andrewSC) (Quit: WeeChat 3.2)
[00:17:45] *** Joins: snake (~snake@user/snake)
[00:17:52] *** Quits: GeDaMo (~GeDaMo@user/gedamo) (Quit: Leaving.)
[00:18:21] *** zaher_ is now known as zaher
[00:18:32] *** Quits: nupilios (~nupilios@178-191-85-128.adsl.highway.telekom.at) (Changing host)
[00:18:32] *** Joins: nupilios (~nupilios@user/nupilios)
[00:21:56] *** Quits: riff-IRC (~riff-IRC@user/riff-irc) (Ping timeout: 272 seconds)
[00:27:41] *** Parts: nupilios (~nupilios@user/nupilios) ()
[00:30:53] *** Quits: clarjon1 (~clarjon1@user/clarjon1) (Quit: clarjon1)
[00:34:09] *** Joins: Guest1 (~Guest1@184-14-199-60.dr03.chtn.wv.frontiernet.net)
[00:35:26] *** Quits: mx7ca (~max@user/mx7ca) (Remote host closed the connection)
[00:36:20] *** Quits: spynxic (~spynxic@spynxic.powered.by.lunarbnc.net) (Quit: Free ZNC ~ Powered by LunarBNC: https://LunarBNC.net)
[00:36:38] *** Joins: spynxic (~spynxic@spynxic.powered.by.lunarbnc.net)
[00:36:42] *** Quits: penguino (~mrpenguin@user/mrpenguin) (Quit: penguino)
[00:37:09] *** Joins: penguino (~mrpenguin@user/mrpenguin)
[00:37:22] *** Joins: nekobyte (~based@user/nekobit)
[00:38:30] * edgar-rft didn't know that turing machines were used by the natives
[00:39:30] <pulse> those are turning machines
[00:39:34] <pulse> they're used for turning things around
[00:41:21] <edgar-rft> on github?
[00:41:57] *** Quits: nekobyte (~based@user/nekobit) (Ping timeout: 258 seconds)
[00:42:03] <edgar-rft> let's cleanup our repositories with a caterpillar!
[00:42:27] *** Quits: soapsudsxx (~soapsudsx@141.193.188.144) (Remote host closed the connection)
[00:42:51] <smallville7123> pyzozord: a Turing Machine can be built using any type of State Machine
[00:43:02] * edgar-rft clones some rocks from github
[00:43:26] <smallville7123> pyzozord: :)
[00:43:48] <smallville7123> pulse: lmao
[00:44:23] *** Joins: soapsudsxx (~soapsudsx@141.193.188.144)
[00:44:25] <beaky> i love windows when i use windows i feel like im part of a global programming communit
[00:45:15] <pulse> https://www.youtube.com/watch?v=LFrdqQZ8FFc
[00:45:28] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[00:45:31] <pulse> isn't bayaz doing the yt titles :S
[00:45:41] <pulse> welp. "Monty Python Royal Society For Putting Things On Top of Other Things"
[00:46:31] <smallville7123> what is the minimum amount of information needed to recursively compute a child's absolute position? eg while(child != nullptr) { computeChildPosition(child, information); child = child->child; }
[00:48:03] *** Quits: joshcom (~joshcom@2600:8800:a706:2b00:5be3:4224:17a3:9012) (Quit: Leaving)
[00:48:18] *** Quits: webnet4 (~0x100@32.211.211.39) (Ping timeout: 240 seconds)
[00:49:16] <pulse> umm
[00:49:21] <pulse> all of it? i don't get the question :p
[00:49:42] <pulse> you need every child's relative position
[00:49:59] <smallville7123> like what things must i know about the child and the previous child
[00:50:12] <pulse> list of children and x, y
[00:50:35] <pulse> if you know those 3 then you can compute any particular element's absolute position
[00:50:37] <smallville7123> like what things must i know about the next child(child), the current child (current) and the previous child (parent)  *
[00:51:00] <pulse> i don't understand the question
[00:51:05] <smallville7123> pulse: hm ok
[00:51:13] <smallville7123> what would x y be
[00:51:24] <pulse> presumably some kind of Position
[00:51:31] <pulse> type
[00:52:41] *** Joins: nekobyte (~based@user/nekobit)
[00:55:52] *** Joins: webnet4 (~0x100@32.211.211.39)
[00:57:20] <beaky> hello what is the 2021 august most definitive guide to starting a new python project i thought it was just using virtualenv and pip but then i read online guides and they mention tons of other stuff like using poetry of pipenv or something else
[00:57:43] *** Joins: nekobased (~based@user/nekobit)
[00:58:01] *** Quits: nekobyte (~based@user/nekobit) (Killed (NickServ (GHOST command used by nekobased)))
[00:58:03] *** nekobased is now known as nekobyte
[00:58:10] *** Quits: ChromaCat248 (~ChromaCat@user/chromacat248) (Remote host closed the connection)
[00:58:41] <pulse> why would you use python for a project
[00:59:10] <pulse> python should be like, a side functionality to a project
[00:59:12] <pulse> like scripting :p
[01:00:10] *** Joins: ChromaCat248 (~ChromaCat@user/chromacat248)
[01:01:12] *** Quits: gitgood (~gitgood@80-44-12-89.dynamic.dsl.as9105.com) (Ping timeout: 256 seconds)
[01:01:47] <beaky> yes but all the sick deep learning projects use pythong
[01:01:59] <beaky> i cant use rust yet maybe in 5 years
[01:02:17] <beaky> and the worst part of python is getting started there's like 20 different package managers
[01:02:25] <beaky> whereas with rust there's just rustup and cargo and thats it
[01:02:34] <dodo> that's nonsense, pip is the standard
[01:02:35] <webnet4> python for AI?  sounds slow
[01:02:49] <beaky> with python there's pip and pipenv and poetry and egg and hatch and easy install and setup.py and ...
[01:02:53] <dodo> sounds uneducated. python has C libs
[01:02:54] *** Quits: Cleverness (~clevernes@pool-108-54-152-186.nycmny.fios.verizon.net) (Remote host closed the connection)
[01:03:05] <webnet4> so its C for AI
[01:03:08] <dodo> most of them use pip
[01:03:17] <dodo> with python bindings
[01:03:29] <pyzozord> So does this consitude a StateMachine? https://codesandbox.io/s/crazy-lederberg-p082m?file=/src/index.js
[01:03:31] <bayaz> Title: crazy-lederberg-p082m - CodeSandbox 
[01:03:37] <beaky> oh there's also pyenv
[01:03:38] <dodo> and use python for projects because you optimize time to develop first
[01:05:56] <webnet4> you could use a shell script too
[01:06:06] <webnet4> in that case
[01:06:19] <dodo> have you ever built a non-trivial shell script?
[01:10:41] <beaky> why must python be so pythonic
[01:11:04] <webnet4> have you ever tried to install a python program by hand?
[01:11:25] <beaky> no i always use my package manager or pip to do it
[01:11:39] <beaky> oh there's also conda which is like its whole world in itself
[01:11:46] <beaky> optimized for ai appareltny
[01:11:55] <beaky> how can python be so arghhhh
[01:13:03] <dodo> conda, "Package, dependency and environment management for any language—Python, R, Ruby, Lua, Scala, Java, JavaScript, C/ C++, FORTRAN, and more"
[01:13:09] <beaky> my whole life i thought just using the os package manager or pip was enough but then i cant just install packages globally need specific versions per project so now there's pip and virtualenv the ultimate combo but then reading online apparently i need conda and pipenv and pyenv and poetry and egg and easy install and ...
[01:13:20] <dodo> why can you use apt to install python packages. arghhhh
[01:16:15] <jinsun> those are all altternatives to each other, you can use pip+venv+setuptools for everything, or use poetry or conda instead of those, and egg and easy install are deprecated stuff
[01:17:26] <beaky> o okay
[01:17:32] <jinsun> you should ask #python also
[01:17:47] <beaky> i like pip and venv and setuptools because they are like preinstalled with the os python
[01:17:52] *** Joins: Andalu30 (~andalu30@84.232.74.231)
[01:18:05] <beaky> alright ill ask python
[01:19:35] *** Joins: Enitin (~Enitin@82.102.22.84)
[01:19:48] *** Quits: snake (~snake@user/snake) (Ping timeout: 268 seconds)
[01:19:54] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 258 seconds)
[01:20:12] *** Quits: art_vandelay (~art_vande@bras-base-toroon63x9w-grc-21-174-89-102-174.dsl.bell.ca) (Ping timeout: 272 seconds)
[01:21:24] *** Joins: va5c0 (~vasco.nun@95.148.139.46)
[01:22:08] *** Joins: art_vandelay (~art_vande@bras-base-toroon63x9w-grc-21-174-89-102-174.dsl.bell.ca)
[01:24:15] <beaky> nice so python agrees with me pip and venv are the way to go
[01:24:39] <beaky> at last python makes sense i can feel the zen of python
[01:28:14] *** Quits: gruuf (~gruuf@94.31.99.29) (Quit: WeeChat 3.1)
[01:31:22] *** Joins: Jabberwack (~Jabberwac@user/jabberwack)
[01:35:00] *** Quits: magla (~gelignite@55d4fb74.access.ecotel.net) (Quit: Stay safe!)
[01:36:23] *** Quits: elnavigator (~elnavigat@105.196.50.210) (Ping timeout: 258 seconds)
[01:37:08] *** Joins: elnavigator (~elnavigat@105.196.50.210)
[01:37:19] <beaky> i love prolog
[01:37:53] *** nekobyte is now known as katkot
[01:39:44] *** Joins: Gaboradon (~Gaboradon@cpe-86-58-57-5.static.triera.net)
[01:41:22] *** Quits: Andalu30 (~andalu30@84.232.74.231) (Ping timeout: 258 seconds)
[01:41:45] *** Quits: elnavigator (~elnavigat@105.196.50.210) (Ping timeout: 258 seconds)
[01:44:06] *** Joins: gitgood (~gitgood@80-44-12-89.dynamic.dsl.as9105.com)
[01:44:51] *** Quits: gitesh (uid423739@id-423739.charlton.irccloud.com) (Quit: Connection closed for inactivity)
[01:44:54] *** Joins: lunarkitty (uid501895@user/pyra)
[01:46:13] *** Quits: bayaz (~bayaz@user/jeaye/bot/bayaz) ()
[01:46:37] *** Joins: bayaz (~bayaz@user/jeaye/bot/bayaz)
[01:46:37] *** ChanServ sets mode: +o bayaz
[01:46:51] <jeaye> https://www.youtube.com/watch?v=LFrdqQZ8FFc
[01:46:55] <bayaz> Title: Monty Python Royal Society For Putting Things On Top of Other Things 
[01:47:53] *** Quits: nekodesu (~nano@user/nekobit) (Killed (NickServ (GHOST command used by katkot!~based@user/nekobit)))
[01:48:18] *** Joins: nekodesu (~nano@user/nekobit)
[01:48:34] *** Quits: katkot (~based@user/nekobit) (Killed (NickServ (GHOST command used by nekodesu!~nano@user/nekobit)))
[01:48:46] *** Quits: Enitin (~Enitin@82.102.22.84) (Ping timeout: 268 seconds)
[01:48:59] *** Joins: clarjon1 (~clarjon1@user/clarjon1)
[01:49:00] *** Quits: nekodesu (~nano@user/nekobit) (Client Quit)
[01:49:22] *** Joins: nekobyte (~based@user/nekobit)
[01:49:40] *** Joins: Enitin (~Enitin@82.102.22.84)
[01:50:36] *** Joins: srikavin (~srikavin@user/srikavin)
[01:52:26] <pyzozord> So is this a finate state machine? https://codesandbox.io/s/holy-surf-s12lb?file=/src/index.js
[01:52:27] <bayaz> Title: holy-surf-s12lb - CodeSandbox 
[01:54:20] <Julius__> pyzozord, does it have finitely many states and nothing else?
[01:54:48] *** Joins: droid3 (~fffd@024-177-015-135.res.spectrum.com)
[01:55:22] <pyzozord> Julius__: what do you mean by nothing else? just states and transitions in states are useless if the states don't do anything
[01:55:41] *** Joins: Joanna (uid57472@id-57472.tooting.irccloud.com)
[01:55:49] <droid3> curious arrays can be index greater then integer size aka 4 byte which make them only have 2147483647 possible max elements
[01:56:04] <Julius__> I mean a turing machine for example is also just a deterministic finite state machine, but it also has a memory band in addition
[01:56:30] <Julius__> Some machines might be finite state machines and have a stack in addition
[01:56:43] <Julius__> Those two are NOT what we call finite state machines
[01:56:48] <droid3> I am wondering is there any way to make arrays arbitrary long and not be limited to size of data types but of memory 
[01:57:15] <droid3> I know i know its not a huge issue seeing as we dont have most computers with that amount of memory
[01:57:29] <droid3> But someday might be useful
[01:57:31] *** Joins: elnavigator (~elnavigat@105.196.50.210)
[01:58:03] <Julius__> pyzozord, for a finite state machine, each state either is an accepting state or a non-accepting state, so once your program terminates, it will either end in an accepting or non-accepting state and hence accept the input word or not
[01:58:29] <beaky> nice i like state machines
[01:58:30] <droid3> The only way i can think of getting the illusion of unlimited array size is thru using a sequential file and read/writting it to it. However that sure slows down the accessing/writting to this data structure
[01:58:30] <pyzozord> Julius__: ah I see, so Finite State Machine changes it's capabilities exclusively based on the state, that's your point?
[01:59:17] <webnet4> droid3 what language
[01:59:38] *** Quits: va5c0 (~vasco.nun@95.148.139.46) (Quit: WeeChat 3.2)
[01:59:52] <webnet4> arrays could be way larger than pointer size if they wanted to be
[02:00:00] *** Joins: kurtthemaker (~kurt@S010644a56e3e0ee9.cn.shawcable.net)
[02:00:40] <beaky> yes to get an infinite array you can use functions 
[02:00:57] *** Quits: Twipply (~Twipply@user/twipply) (Read error: Connection reset by peer)
[02:02:06] <droid3> in what way where you thinking
[02:02:34] <droid3> webnet4 just in general but probably for popular languages like c/c++ , java , python ,...etc
[02:02:47] <Julius__> pyzozord, the set of all accepted words form the language that the machine recognizes (i.e. accepts). This language is a regular language (i.e. type 3 on the Chomsky hierarchy) for finite state automata, and this is why each such finite state automaton. All regular languages are precisely those languages that are accepted by finite state automata
[02:03:30] <Julius__> * without ", and this is why each such finite state automaton."
[02:03:35] *** Joins: Xaldafax (~xaldafax@cpe-198-72-160-101.socal.res.rr.com)
[02:03:36] <webnet4> maybe if you create a new array class/struct/package/module/etc
[02:03:38] <InPhase> droid3: You can write a random access array that takes a bigint.
[02:03:47] <droid3> I know i could cook up a data structure that just uses a sequential file as like an unlimited array only kind of limited by harddrive space and can be increased indefinitely sort of.
[02:04:11] <beaky> yes that kind of array exists as mmap()
[02:04:29] <webnet4> not larger than pointer size in the langs that require them to be fully contained in memory
[02:04:51] <webnet4> unless it can span multiple segments or has additional banks
[02:05:00] <beaky> the theoretical limit is in the size of the address space (and practical limit is its storage media if you fill them with data)
[02:05:05] <droid3> I am not talking about the array type that can be used i can make arrays that take as general as Objects , Structures ,whatever....etc i am getting at the index you use to access elements are kind of restricted to integer only data types which are restricted to a 4 byte size limit
[02:05:41] *** Joins: Twipply (~Twipply@user/twipply)
[02:05:43] <InPhase> droid3: In most modern systems this is 8 bytes.
[02:06:20] <Julius__> pyzozord, if you mark some of the states as accepting and other as non-accepting, this here is a deterministic finite state automaton:   https://www.ashishvishwakarma.com/GoF-Design-Patterns-by-Example/State-Pattern/assets/mario-finite-state-machine.jpg
[02:06:20] <bayaz> Type: image/jpeg Size: 183.5 kB 
[02:06:28] <droid3> O well maybe thats changed now but how i always remember it is integer for most languages int where 32 bit
[02:06:32] <droid3> 4bytes
[02:06:53] <droid3> is that not the case anymore with newer 64 bit machines ??? I still think it is
[02:06:53] <InPhase> droid3: But, you can make a class that uses a BigInt to handle your 20 million TB RAM computer.
[02:07:21] <InPhase> droid3: If you find something using a 32-bit int for array indexing, throw it out...  :-P
[02:07:42] <droid3> right the BigInt could be nearly indefinite size and that be like the index.
[02:07:44] <InPhase> droid3: Unless it's a tiny embedded system, then okay, but you won't have much RAM there anyway.
[02:08:11] <InPhase> droid3: Even phones are 64-bit now for some time.
[02:08:14] <droid3> However if i use a sequential file those usually use long data type for seeking ,and there restricted to long sizes
[02:08:28] <droid3> so its not as good as BigInt there are bottlenecks
[02:08:56] <Julius__> pyzozord, so in this example let's say only the cape Mario state is accepting, then the machine accepts all words (i.e. every sequence of toad, feather, fire flower, ...) that leads to a cape Mario state in the end, and all these words would form the cape Mario language :D
[02:09:55] <droid3> ya i guess BigInt would still be overkill for memory or file seeking and where still limited in file sizes of long data type sizes
[02:10:42] <InPhase> droid3: I cannot think of any file system that supports disk sizes over 64-bit in size though.
[02:10:43] <droid3> which is tons and tons but not really unlimited ....BigInt more gets closer to the illusion of infinite sizes
[02:11:46] <pyzozord> Julius__: dunno what is chomsky's type 3. From your descirption it sounds like it's just a set of words
[02:11:58] <Julius__> pyzozord, a different example of a deterministic finite state machine is a machine where the states are 0 to 6, and the input is a sequence of 0 to 9s (i.e. a positive integer number as a whole), and the transitions are new_state = (10 * old_state + current_input_symbol) modulo 7, and 0 being the only accepting stage. This machine would accept all positive integers that can be divided by 7
[02:12:07] <droid3> ok i have talked about this before ya that ok. I suppose then if i did create an array datatype that could do more then typical Object[int] size that are support limits of most languages
[02:12:23] <droid3> then i be stuck at the size limits for files themselves
[02:12:35] <bjs> pyzozord: "a set of words" is pretty much the definition of a formal language :P
[02:12:48] <droid3> so int or long is all i really got for indices 
[02:13:26] <InPhase> Oh there we go.  ZFS supports 128-bit volume size limits.
[02:13:31] <beaky> nice i like zfs
[02:13:44] <beaky> wonder who uses the full 128 bits
[02:13:49] <droid3> So for the slowness of on DISK for the size increase from int to long is kind of not worth it. Interms of a new cool array datatype not restricted so much from index size limits
[02:14:44] *** Quits: LucaTM (~LucaTM@user/lucatm) (Quit: Textual IRC Client: www.textualapp.com)
[02:14:46] *** Quits: webnet4 (~0x100@32.211.211.39) (Remote host closed the connection)
[02:14:52] <pyzozord> Julius__: you are making it less clear now. I'm not sure what inputs have to do at all. It sounds like what you are saying is "it's a deterministictic finate state machine when all inputs eventually get transformed to one of the accepted states"
[02:14:56] <beaky> disk is very slow but there's now flash memory and 3dxpoint aka optane 
[02:15:00] *** Joins: webnet4 (~0x100@32.211.211.39)
[02:15:05] <pyzozord> Julius__: which seems to be a given
[02:15:34] <Julius__> pyzozord, a language is a set of words. But there are different types of languages. Regular languages for example can be recognized with a finite state machine. But for more complex languages like the language of equally many opening and closing brackets ( i.e. (), (()), ((())), ...) you need a more complex machine, since finite state machine can not count (at least not arbitrarily far). Here you would need a so called 
[02:15:34] <Julius__> pushdown automata (which is basically a finite state machine with a stack), i.e. type 2 on the Chomsky hierarchy (compare https://en.wikipedia.org/wiki/Chomsky_hierarchy)
[02:15:40] <beaky> or just mount the cloud through FUSE and use it to back your array
[02:15:42] <InPhase> So if you ever need to strap a billion buildings with a billion racks with a billion 1TB drives in each together into a single file system, ZFS has your back.
[02:15:52] <pyzozord> bjs: yeah probably. I just meant no grammar what so ever, just one of the set of possible words
[02:15:52] <bjs> pyzozord: a finite state machine is a mathematical model of a computer that has no memory and a fixed program with finitely many states
[02:18:04] *** Quits: aradesh (~aradesh@user/aradesh) (Quit: WeeChat 1.9.1)
[02:18:22] <pyzozord> Julius__: oh i see so you are now describing what kind of language type 3 is, and it's a language that cannot remember a previous words at least not arbitrarily many
[02:18:23] <bjs> pyzozord: well I really meant it, a formal language is a (possibly infinite) set (of words), at least the mathematical model of a formal language is.
[02:18:34] <Julius__> pyzozord, a deterministic finite state automaton is a tuple consisting of a set of input symbols (so you know what your inputs can be), a set of finitely many states, one of them being the starting state, a finite number of transitions that tell you what state is the next state when you're at a certain state and read a certain input symbol, and a set of accepting states that tells you that the word should be accepted once 
[02:18:34] <Julius__> you end in such a state
[02:19:05] <pyzozord> bjs: yep I understood that :)
[02:19:16] <Julius__> pyzozord, yes, finite state machines have - as the name already tells us - just finitely many states and hence only have finite memory
[02:19:43] <bjs> pyzozord: there's some encoding of computer <-> language,  computation looks at how powerful a computer you need to parse particular languages.
[02:20:25] *** Quits: Enitin (~Enitin@82.102.22.84) (Ping timeout: 248 seconds)
[02:20:32] <Julius__> pyzozord, what I said earlier is that not every language can be recognized by a finite state machine. Those are very limited and hence can only recognize so called regular languages
[02:20:35] <pyzozord> Julius__: ok for me one does not imply the other, form my perspective I can put in one state an array with infintly many elements
[02:20:41] <bjs> pyzozord: regular languages need only finite state automata to parse them (that is, to accept/reject the program).  Matching brackets needs more.  Solving arbitrary problems requires even more
[02:21:03] <bjs> pyzozord: you could yes, but you can't have all infinitely many states of the array as states of your program
[02:21:24] <bjs> because then it wouldn't be a finite state machine as there could be infinitely many states the program could be in :)
[02:23:09] <Julius__> pyzozord, for the next most complex language, a so called context-free language, you need a pushdown machine (type 2), and for an even more complex language like the context-sensitive languages (type 1) you need an even more capable machine, ...
[02:23:10] <pyzozord> what does it mean when "fsm RECOGNIZES a language"?
[02:23:53] <pyzozord> I think you guys are talking about fsm that are used specifically for parsing text input, right?
[02:23:56] <bjs> pyzozord: I assume "parse" is another way to say what they mean
[02:24:18] <bjs> pyzozord: well "fsm" literally means "finite state machine", aka a machine/computer/program that can only be in finitely many states
[02:24:20] *** Quits: elnavigator (~elnavigat@105.196.50.210) (Ping timeout: 252 seconds)
[02:24:48] <bjs> Like I said, we model this mathematically by asking what languages such a machine/computer/program could parse, and what languages it cannot parse.
[02:24:59] <bjs> That's why you often have people switching between languages and machines
[02:25:11] <bjs> and machines are basically fixed programs
[02:25:19] <Julius__> pyzozord, a state is just a state. There is nothing in a state. All the finite state machine does is that it is at a certain stage, then reads 1 input symbol, then goes to a different state, and continues this until the end of the input word is reached. And the last state it is in decides if the input word is accepted (i.e. it is part of the accepted languages), or not accepted
[02:25:20] <bjs> they're all fairly interchangeable
[02:25:21] *** Quits: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl) (Quit: leaving)
[02:26:19] <pyzozord> ok so I think we jumped too far. I just wanted to make a CoffeMachine and now we are talking about parsers
[02:26:19] *** Quits: inom (~inom@176.59.119.1) (Read error: Connection reset by peer)
[02:26:25] <bjs> pyzozord: so it's sort of equivalent to say "finite state machine" or "regular language" because any machine/program that has finitely many states (and no cheating with memory etc) will be a parser for some kind of 'regular' language.
[02:26:39] <bjs> pyzozord: yes and no
[02:27:28] <bjs> pyzozord: a finite state machine is just a machine/program that can be in only 1 of finitely many states at once,  or rather it's a mathematical model of such machines.
[02:27:56] <pyzozord> at first when you guys mentioned that words/states that FSM accepts form a language, i thought you just mean abstractly that "machine please transition to state on. machine please transition to state brewing" etc
[02:27:59] <bjs> pyzozord: in Computer Science you will often have people seemingly "confuse" the idea of a machine with a language because (for the reasons given above) they are equivalent ideas and are interchangeable
[02:28:11] <Julius__> pyzozord, it means that the machine is able to decide if the input word is part of the language or not. For example if you have the language (^* )^*  (i.e. first opening brackets, then closing brackets, and equally many)  which is the language consisting of the words (), (()), ((())), ... you can NOT build a finite state machine that recognizes this language (i.e. tell you correctly for each word if it is accepted or 
[02:28:11] <Julius__> rejected), no matter how hard you try to build such a finite state machine
[02:28:12] *** Joins: andrewSC (~andrewSC@archlinux/trusteduser/andrewSC)
[02:28:21] *** Quits: poww0wmus1c (~poww0wmus@gateway/tor-sasl/poww0wmus1c) (Remote host closed the connection)
[02:28:35] <bjs> pyzozord: no, for computer science when we talk about machines and languages we really are talking about *the same thing*. It's a freaky idea at first and often is not made very clear.
[02:30:21] <pyzozord> bjs: what do you mean by "the same thing"?
[02:30:31] <bjs> pyzozord: uhm,  that they are the same thing
[02:30:36] <pyzozord> Julius__: got it, thanks for the extra info
[02:30:50] <pyzozord> bjs: I missed out on what do you mean is the the same thing as what
[02:30:56] <bjs> pyzozord: programs, parsers and languages
[02:31:46] <bjs> in terms of the mathematical models that we use in Computer Science,  there is a direct equivalence between these three things and people will often just substitute one for the other where it feels the most natural
[02:31:48] <pyzozord> I see, yeah I got that impression that the description was kind of about languages and programs at the same time
[02:32:48] <pyzozord> I don't see how they are the same, I guess I'll read about that in some theory of computation textbook
[02:33:01] *** Joins: juliaEnv (~juliaEnv@ip-86-49-241-245.net.upcbroadband.cz)
[02:33:23] <pyzozord> I mean maybe I see how they are the same but that would be very abstract and frankly kind of useless
[02:33:41] <pyzozord> but maybe I don't see how they are the same really
[02:33:44] <bjs> pyzozord: well, every program is a parser for some language
[02:34:34] *** Quits: dudek (~dudek@185.150.236.112) (Quit: Leaving)
[02:34:59] <bjs> programs which have finitely many states are really just parsers for a very simple 'regular' language. Obviously "real" programs that we actually write do more than just return true or false (accept/reject like a parser would)
[02:35:13] <pyzozord> scratch that, I don't think it would be kind of useless, just not useful for practise, probably very useful for theory
[02:35:37] <bjs> pyzozord: yeah I've tried to make it clear that this is the Computer Science (aka the mathematical theoretical model of it) side
[02:35:53] *** Joins: Mangy_Dog (Mange@user/mangy-dog/x-7397214)
[02:36:03] <bjs> pyzozord: nobody writes "finite state machines" like in your snippet like that, because it's very verbose and weird
[02:36:05] <bjs> at least I hope! :P
[02:36:08] *** Joins: Jacobis9000 (~josephash@host213-122-250-217.range213-122.btcentralplus.com)
[02:36:39] <pyzozord> bjs: oh? that's interesting
[02:36:54] <pyzozord> I was aiming for minimum amount of code
[02:37:03] <pyzozord> can this get much smaller?
[02:37:10] <Jacobis9000> Hello!
[02:37:22] <bjs> pyzozord: well I mean,  if you had a "finite state machine" that was a controller for a lightswitch or something you wouldn't build a "FiniteStateMachine" type and lay out an enum of states and then have transitions between them
[02:37:35] <Julius__> pyzozord, I think what bjs means is that the regular languages are precisely(!) those languages that can be decided by FSMs, and vice versa, meaning that the languages that can be decided by a FSM are the regular languages, not more languages and not less
[02:37:35] <bjs> pyzozord: you'd write a file with a global boolean "light_on" and two functions to turn it on/off
[02:38:08] <juliaEnv> Hi, are these two equivalent? https://i.imgur.com/IPsgQ3s.png and https://i.imgur.com/9tTLGQz.png ?
[02:38:08] <bayaz> Type: image/png Size: 36.9 kB 
[02:38:08] <bayaz> Type: image/png Size: 19.5 kB 
[02:38:15] <juliaEnv> (Java code)
[02:38:20] <Julius__> pyzozord, correction: "by FSMs", not "by a FSM"
[02:39:24] <pyzozord> Julius__: yep that's clearer now, interestingly I think that means I can write a regular expression engine with FSM
[02:39:38] <Julius__> pyzozord, but be aware: This does NOT mean that a regular language can only by accepted by only 1 FSM, since there can be many different FSMs accepting the same regular language. For example simply by renaming the states of the FSM
[02:40:07] <juliaEnv> is this equivalent as well? https://i.imgur.com/p3Pptow.png
[02:40:08] <bayaz> Type: image/png Size: 17.2 kB 
[02:40:11] *** Joins: Powerhouse6666 (~Powerhous@S01067898e83ba01c.vn.shawcable.net)
[02:40:14] <bjs> pyzozord: well, you can write a parser for a particular regular expression and that parser could be a program with only finitely many states yes
[02:40:30] <pyzozord> bjs: oh yeah that's clear that's clear. In that sense essentially all normal code is FSM code
[02:40:49] *** Quits: mrig (~mrig@user/mrig) (Quit: WeeChat 3.2)
[02:40:51] <Julius__> pyzozord, be careful. What people call regular expressions nowadays are often not really regular expressions but an extended version of regular expressions. And when you extend a regular expression by things like back-references and such, it is not really regular anymore, even though people still call it regular expression in everyday life
[02:41:15] *** Quits: Hanii (~textual@host86-138-112-34.range86-138.btcentralplus.com) (Quit: Textual IRC Client: www.textualapp.com)
[02:41:20] <bjs> pyzozord: actually no, because real code cheats with memory so the program can actually be in more states than you think
[02:42:22] <pyzozord> bjs: so what is way to write a FSM code that is not regular code that cheats and that is not a verbose code like in my snippet?
[02:42:48] <pyzozord> Julius__: oh, that's interesting trivia, thanks. Good to know extended regular expression is not technically a regular expression
[02:43:05] <Julius__> pyzozord, so yes, "classical" regular expressions ARE really regular and you can construct a FSM for such an expression (actually this construction can very simply be done automatically if you think about it), but you can NOT construct a FSM for those extended regular expressions that people simply call regular expressions even though they are not really regular anymore
[02:43:28] *** Quits: anon16 (~anon16@user/anon16) (Ping timeout: 258 seconds)
[02:43:40] <Julius__> pyzozord, it depends on the extension. There might be some extensions that keep the expression formally regular. But others don't, so be careful
[02:43:42] <bjs> pyzozord: well this "CoffeeStateMachine" why does it exist? why does it have "state" attributes/ it's all very verbose.  Like I said for the light switch you'd just have a boolean and two functions (or two methods)
[02:43:54] <pyzozord> Julius__: I assume those extended regular expressions are actuall pushdown automata? They use context free grammar?
[02:44:34] <Julius__> pyzozord, exressions are expressions and automata are automata :) But I know what you mean ;)
[02:44:36] *** Joins: smilingfrog (~smilingfr@S01061cabc06a4f03.no.shawcable.net)
[02:44:42] *** Joins: inom (~inom@176.59.116.194)
[02:45:17] *** Joins: anon16 (~anon16@user/anon16)
[02:45:17] <pyzozord> bjs: oh I see, so writing an FSM that is not verbose is simply just writing a system that can be at a single state at any time, and has finitly many of those states. Whatever simple code gets you there is good?
[02:45:24] <Julius__> pyzozord, honestly I am not sure what extensions to regular expressions are in use nowadays or what kind of automaton they require. Maybe context-free? Don't know
[02:46:12] <bjs> pyzozord: if you have a program and it can only be in one of finitely many states (and no cheating with stacks or lists of secret extra memory) then what you have is a "finite state machine" and can be modelled by our mathematical FSM idea yeah
[02:46:21] *** Quits: mjs2600 (~mjs2600@c-24-91-3-49.hsd1.vt.comcast.net) (Quit: ZNC 1.8.2 - https://znc.in)
[02:46:24] <pyzozord> Julius__: cool, thanks. BTW what's the difference between a "machine" and "automaton"?
[02:46:51] <pyzozord> bjs: got it, thanks!
[02:46:53] *** Quits: smilingfrog (~smilingfr@S01061cabc06a4f03.no.shawcable.net) (Client Quit)
[02:46:54] <Julius__> pyzozord, by they way, just to make your confusion complete: There are not only deterministic finite state automata but also non-deterministic finite state automata and even automata that just have finitely many states but operate on infinitely long input words :P
[02:47:19] <Julius__> pyzozord, I think there is no difference to be honest. Not sure. I think it's just a twist on words
[02:47:20] <pyzozord> Julius__: I've heard about those. Turing machine is one of those, right?
[02:47:44] *** Joins: mjs2600 (~mjs2600@c-24-91-3-49.hsd1.vt.comcast.net)
[02:47:51] <bjs> pyzozord: most people intercahgne state machine and state automata
[02:48:12] <Julius__> pyzozord, not really what I meant, since turing machines decide precisely the formal languages (type 0 languages). I was still talking about type 3
[02:48:25] <bjs> pyzozord: I guess outside of the theory an automata is supposed to be something you just press a button and it goes whereas a machine has more interaction and intermediate output and stuff, just like in casual non-technical speak
[02:48:31] <pyzozord> oh ok so machine and automaton are synonymis. Cool
[02:48:34] <bjs> pyzozord: but they're the same in theory
[02:48:53] <Julius__> pyzozord, I think so, yes. Not quite sure, but probably, yes
[02:49:21] <Julius__> ^ what bjs said
[02:49:44] <pyzozord> I see, cool. Thanks for the 101 of computation theory guys :)
[02:49:51] *** Joins: RenAdjest (~RenAdjest@user/renadjest)
[02:50:19] <bjs> pyzozord: well we're barely scratching the surface here,  this is after all the core theory behind computation
[02:51:51] <Julius__> pyzozord, a non-deterministic FSM can have a transitions to different states from the same state with the same input symbol, so it is not clear to what state the machine goes next. It just goes to all new states at the same time. And then you can have different criteria when you accept a word, for example when one or more accepting states are reached in the end, or when more than 50% of all states reached in the end are 
[02:51:51] <Julius__> accepting states, ...
[02:53:21] <edgar-rft> An automaton is a machine that is self-operating, a machine is a more general thing, it might need someone to operate it.
[02:53:55] <Julius__> I think in theory both words mean the same :)
[02:54:59] <bjs> Theoretically you can consider a program that waits for user input to be one that non-deterministically picks between different possible user inputs, and one that has output as being a language of n-tuples (traces) of output
[02:55:10] <bjs> So we don't need separate concepts mathematically for them
[02:55:54] *** Joins: ghostbuster (~admin@user/ghostbuster)
[02:56:54] <beaky> nice finally i know what apic timers are and why oses always spend a lot of time initializing apic timers https://zirblazer.github.io/htmlfiles/pc_evolution.html
[02:56:55] <Julius__> I still like the Super Mario FSM the best :D
[02:56:55] <bayaz> Title: History of the evolution of the x86 platform, from the IBM PC to the modern era 
[02:57:15] <droid3> curious is it more intense initializing every bit/byte in a file to zero or every bit in the file to 1 0xFF
[02:57:41] <Julius__> droid3, or is it the same?
[02:58:02] <droid3> I am curious when one creates a new file is it pre-initialized to all zeros are am i going to expect junk and have to zero or 0xFF everything out
[02:58:34] <Julius__> Why would you set everything to zeros if you write over it anyway later on?
[02:58:35] <droid3> I am writting a data structure that uses a file as its memory/junk of data
[02:59:04] <bjs> droid3: how do you create a new file that isn't empty?
[02:59:05] <pyzozord> so non deterministic FSA is just one that has randomness in it?
[02:59:14] <droid3> and like normal builtin data structures there usually by default in most languages pre-initalized to default to all zeros in the case of arrays if you dont initialize them
[02:59:34] <bjs> pyzozord: well aside from the discussion about non-determinism vs "random" but yes
[02:59:44] *** Quits: Akuli (~Akuli@87-94-111-5.bb.dnainternet.fi) (Quit: Leaving)
[03:00:02] <pyzozord> bjs: thanks, btw what's the gist of that discussion?
[03:00:20] <bjs> pyzozord: there's a machine in my office, it gives you tea or coffee depending what button you push
[03:00:34] <bjs> it's non-deterministic, but hopefully not random :)
[03:00:57] <pyzozord> that sounds like a deterministic machine, I push coffee button, I get coffee
[03:01:27] <bjs> pyzozord: well the pushing buttons is interacting with the machine, it's not really "input" to the machine but sure
[03:01:46] <pyzozord> pushing button is not input?
[03:01:48] <bjs> you get the idea of "output could be one of many choices" is not the same as "output is selected randomly"
[03:02:01] <bjs> pyzozord: in theory no
[03:02:05] *** Joins: riff-IRC (~riff-IRC@user/riff-irc)
[03:02:19] <Julius__> pyzozord, not really. At least non-deterministic does probably not mean what you think about when you think of randomness. It does NOT simply pick a random transition (depending on the current state and the current input symbol). It's more like it does ALL possible transitions at the same time, which is why non-deterministic machines do not exist in reality (unless you count quantum computers, which actually can NOT take 
[03:02:19] <Julius__> infinitely many different paths at the same time, as far as I know)
[03:02:36] <bjs> pyzozord: because it's interacting with the environment,  the machine doesn't know which button will be pressed, it cannot tell. 
[03:02:53] <edgar-rft> I think a coffee state machine will give you coffee or not depending on from what state you come.
[03:03:02] *** Quits: webnet4 (~0x100@32.211.211.39) (Remote host closed the connection)
[03:03:05] *** Quits: Jabberwack (~Jabberwac@user/jabberwack) (Ping timeout: 248 seconds)
[03:03:14] *** Joins: webnet4 (~0x100@32.211.211.39)
[03:03:41] <bjs> pyzozord: it depends on the state of the environment (you!).  Non-deterministic just means there are multiple possible outcomes. *once* you have pushed the button I think we can all agree the machine is deterministic from there
[03:03:48] <Julius__> I hate coffee
[03:03:49] <pyzozord> ah I see so that's more of a mathetmatical thing where it doesnt really "do" anything as much as it just describes what already "is" from changing viewpoints
[03:03:50] <bjs> but up until then...
[03:04:25] <Julius__> pyzozord, what a FSM does (as long as it terminates) is to accept or reject an input word. That's all
[03:04:38] *** Joins: whatsupdoc (uid509081@id-509081.stonehaven.irccloud.com)
[03:04:43] <droid3> bjs you can create a file that has a given length with setLength() randomaccess file of a certain size
[03:04:50] <droid3> ftruncate in c/c++ 
[03:04:57] <Julius__> And each time we write FSM I read that as Flying Spaghetti Monster. Strange :)
[03:05:09] <pyzozord> I mean the difference in meaning of equal sign in mathematics and assignment in programming. There is no assingments in mathematics really, you just pick somethink that already exists from predeterminet set of infinitly many things
[03:05:15] <droid3> the point is it seems its not defined on what the contents will be when you extend it
[03:05:25] <pyzozord> *something
[03:05:54] <droid3> I didnt know if there was away to extend /set a file size and in doing so tell it to zero it out or fill it all with a certain number/character
[03:06:23] <droid3> But if not then i can just go byte by byte writting what i want to initialize it out anyway.
[03:06:33] <Julius__> droid3, I still don't understand why anyone would need all zeros
[03:06:40] <bjs> pyzozord: well that's my point, you can forget "doing" stuff in the theory because a machine doing stuff is just the machine having non-deterministic choice between different outcomes (for "inputs") and the "outputs" are just part of the language it accepts
[03:06:49] <bjs> Julius__: it's very standard to zero everything, if for nothing else, security concerns
[03:07:00] <droid3> I was just trying to find out if when creating a file and accessing it if there was away that you could tell it to pre-initialize the file disk sectors
[03:07:01] <pyzozord> so from programmers point of view the detminism refers to kind of "at compile/design time" not "at execution time"
[03:07:10] <Julius__> bjs, fuck, I don't even do updates since years :D
[03:07:17] <bjs> and zeroing memory for example is going to be a highly optimised operation
[03:07:34] <webnet4> from my point of view its nitpicking
[03:07:48] <bjs> webnet4: zeroing memory?
[03:07:50] <droid3> its like using a file as an array when you create an array like int a[] =new int[6] it gets initalized by default to all zero elements
[03:08:02] <webnet4> no, the FSM deterministic machine argument
[03:08:10] <bjs> droid3: what is setLength ?
[03:08:15] <webnet4> only the simplist machines would ever be deterministic
[03:08:21] <bjs> webnet4: FSMs don't have to be deterministic
[03:08:27] <droid3> i was curious if creating a file of a certain size one had that ability or if he had to loop thru and write the bytes himself. Not a problem just curiousity 
[03:08:31] <bjs> and non-deterministic FSMs are equivalent to deterministic ones
[03:08:35] <Julius__> pyzozord, deterministic = there is no choise, it's crystal clear what happens next. Non-deterministic = there is a choice, there is more than 1 possibility what to do next
[03:08:39] <bjs> so we don't ever have to think about non-deterministic ones
[03:08:41] <droid3> and something to benifit performance for some problems i am considering 
[03:09:30] <Julius__> pyzozord, for example: "At A, when you read X, go to B" is deterministic. But "At A, when you read X, go to B or C" is non-deterministic
[03:09:35] <pyzozord> what's the input to a machine if it's not user's input?
[03:09:40] <webnet4> what if the user forgets to add water
[03:09:46] <webnet4> the outcome is not deterministic
[03:09:59] <bjs> pyzozord: in the theory a machine has an input, e.g. on the tape/in memory or whatever
[03:10:22] <bjs> but that input is fixed from the time the machine is run
[03:10:59] <Julius__> pyzozord, the input to a FSM is a word, i.e. a (probably finite) sequence of symbols, where each symbol is one of the symbols you defined as the set of input symbols for that FSM
[03:11:38] <bjs> pyzozord: My point was that you could model an interactive machine as one that had fixed start-of-time input with non-determinism,  then you can show that non-deterministic machines are equivalent to deterministic machines.  Therefore you don't need any distinction between "automata" and "machine" in the theoretical models
[03:11:41] <Julius__> pyzozord, for example if your only input symbols are 0 and 1, then the input is something like 001010010111 or 110111111111000
[03:12:24] <pyzozord> ooh i see so those conceptual machines have kind of embeded/hardcoded/builtin code/intsturctions that they execute, and that is the input
[03:12:41] <bjs> pyzozord: hence why I said it depends on your point of view, since you can think of it as deterministic or non-deterministic or with interactive user input or from some fixed input it's all the same really
[03:12:46] <pyzozord> they are single purpuse machines, same machine with different input is a different machine
[03:13:15] *** Quits: rubion (~rubion@cpc124316-ayle4-2-0-cust156.15-2.cable.virginm.net) (Ping timeout: 268 seconds)
[03:13:22] <bjs> pyzozord: the mathematical model is that a "machine" is a fixed program, and that fixed program gets given some fixed input.
[03:13:28] <Julius__> pyzozord, what? No. You can put in every input word you want into a FSM, as long as the input word only consists of symbols that are in the set of possible input symbols that you defined for this specific FSM
[03:13:44] <bjs> pyzozord: This might seem very restrictive at first, but for the reasons I laid out earlier you don't actually need any more than that.
[03:14:25] *** Quits: codingcampbell (~codingcam@user/codingcampbell) (Quit: Ping timeout (120 seconds))
[03:14:46] *** Joins: codingcampbell (~codingcam@user/codingcampbell)
[03:15:11] <Julius__> pyzozord, the same machine working on a different input is still the same machine
[03:15:11] *** Joins: wilz (~michel@modemcable036.177-131-66.mc.videotron.ca)
[03:15:39] <pyzozord> I see. So the machine is the machine, instructions/code/word is the input. Both are predetermined. Users interaction are not predetermined. If machine has user interactions it will be non-deterministic
[03:15:45] <bjs> pyzozord: mathematically you can think of a machine as a function `Input -> Bool` or whatever
[03:15:58] <bjs> where Input is really just "Word" or String
[03:16:07] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[03:16:18] <Julius__> pyzozord, the input is just a sequence of symbols (i.e. a so called word), nothing more
[03:16:25] *** Quits: Thedarkb (~Thedarkb@85.255.236.109) (Ping timeout: 248 seconds)
[03:16:35] <Julius__> pyzozord, sequence of symbols = word. Set of words = language
[03:16:44] *** Quits: webnet4 (~0x100@32.211.211.39) (Remote host closed the connection)
[03:16:57] *** Joins: webnet4 (~0x100@32.211.211.39)
[03:17:51] <pyzozord> set of all possible words? or just some words?
[03:18:00] <bjs> pyzozord: any set of words is a language
[03:18:01] *** Quits: gitgood (~gitgood@80-44-12-89.dynamic.dsl.as9105.com) (Ping timeout: 248 seconds)
[03:18:01] *** Joins: Thedarkb (~Thedarkb@85.255.232.58)
[03:18:10] <bjs> {"hello", "pyzozord"} is one language, for example
[03:18:41] <Julius__> pyzozord, not sure if the set of all possible words is actually a set, since the definition of "set" has some limits, because otherwise you end up getting paradoxons
[03:18:59] <webnet4> any CPU that uses interrupt vectors is non-deterministic?
[03:19:02] *** Quits: ixil (~ixil@82.197.178.137) (Remote host closed the connection)
[03:19:09] <bjs> This happens to be a 'regular' language, which means I can write a function `def parse_pyzozord_language(s: str) -> bool` that only ever needs to be in one state at a time (reading s one char at a time)
[03:19:16] <bjs> Julius__: the set of all words is a set yeah
[03:19:41] <Julius__> {"", "()", "(())", "((()))", ...} is another language (even a context-free one), even though it has infinitely many words
[03:20:04] <Julius__> {}    is also a language, the empty language
[03:20:27] *** Quits: inky_ (~inky@46.36.117.137) (Remote host closed the connection)
[03:21:17] <bjs> webnet4: I guess,  CPUs are pretty non-deterministic anyway haha
[03:22:37] <Julius__> pyzozord, {"0", "7", "14", "21", "28", "35", ...} is also a language. A regular language. So you can construct a FSM that decides this language, and I even told you how to earlier
[03:22:51] *** Quits: magellanicloud (~magellani@2a02:810b:c3bf:fc38:9ba3:b034:ec2b:39cb) (Remote host closed the connection)
[03:22:58] <Julius__> You only need 7 states for this FSM
[03:23:15] *** Joins: Tazmainian (~Tazmainia@41.193.169.28)
[03:23:19] <Julius__> So a short FSM can still do some quite impressive stuff
[03:23:26] <pyzozord> Julius__: whatdoes it mean "FSM that decides this language"
[03:23:40] <pyzozord> how do you "decide language"
[03:23:59] <Julius__> pyzozord, it means that when you put in any positive integer number that you want, the FSM tells you if the input word is accepted or not
[03:24:30] <pyzozord> oh ok, so "decideds if this word belongs to the language"
[03:24:39] <Julius__> Yes
[03:25:21] <Julius__> So a tiny machine with only 7 states can still decide if the input "3423535467575645645757568666675" is accepted or not, and it is only accepted in this case if it can be devided by 7
[03:25:33] *** Quits: MDP87900 (~AMP9190@189.34.140.159) (Remote host closed the connection)
[03:25:47] <Julius__> (Don't ask me if it is accepted or not since I have no clue and just made the input up!)
[03:26:12] <bjs> pyzozord: that's another annoying bit of language about decidability that comes from very old mathematical problems (infact decidability was the question that started computer science as a field itself)
[03:26:20] <webnet4> hmm ok, i mean i guess thats fine. all physical objects are non-deterministic. can't even measure their electron orbits
[03:26:27] <pyzozord> Julius__: why 7 states in particular? it seems to me that no states are required just modulo the number through 7
[03:26:31] <bjs> pyzozord: and like before, it turns out decidability is the same as parsing languages :P
[03:26:53] <Julius__> pyzozord, you can choose any other number, but 7 is a "nice" uneven number, even a prime, so I picked 7
[03:26:59] <bjs> pyzozord: and there are 7 different possibilities for the number modulo 7
[03:27:11] <bjs> so those are the states
[03:27:23] <pyzozord> bjs: that the question exactly I had :D I wanted to ask what is program alternataive to that decidibility because I don't see any use of it outside parsing
[03:27:37] <Julius__> pyzozord, actually deciding if a positive interger number in decimal representation is devidable by 5 is even way easier, since this equivalent to the question if the last symbol is either 0 or 5 or something else
[03:27:47] <Julius__> 7 is a bit more complex :D
[03:28:16] <pyzozord> Julius__: is it? why not just n % 7 == 0
[03:28:30] <bjs> pyzozord: (n % 7) is a sub-program with 7 possible states.
[03:29:02] *** Joins: gitgood (~gitgood@80-44-12-89.dynamic.dsl.as9105.com)
[03:29:14] <Julius__> pyzozord, you dont have n as input. You have a word (i.e. a string) as input where each symbol is either 0, 1, 2, ... or 9. And you can only operate on the current input symbol (i.e. only 1 digit at a time)
[03:29:27] *** Joins: Fluxx (~Fluxx@user/fluxx)
[03:29:56] *** Quits: anon16 (~anon16@user/anon16) (Quit: WeeChat 3.1)
[03:29:56] <pyzozord> ooh I see, so states are like possible values for a single variable
[03:30:17] *** Joins: anon16 (~anon16@user/anon16)
[03:30:22] <pyzozord> right I forgot, we are a state machine, we have single variable "state" that has x possible values
[03:31:07] <pyzozord> that does seem restrictive, I can imagine though, people came up with crazy things that can be done with it. Regular expressions (not extended) are one example
[03:31:28] <bjs> pyzozord: you can't do very much with regular expressions though,  although you can do lots of useful things.
[03:31:30] <Julius__> pyzozord, so for the number 168 you would basically have ('1', '6', '8') as input, and you can only operate on 1 input symbol at a time, and you had to construct a FSM that decides if the number represented by this input word is devidable by 7 or not
[03:32:19] <pyzozord> Julius__: that's pretty tough 
[03:33:14] <Julius__> pyzozord, actually it's quite easy: Pick {0,1,2,3,4,5,6} as your states, and have the transitions be new_state = ((10 * old_state + input_symbol_value) modulo 7)
[03:33:42] <Julius__> Pick 0 as the start state, and also 0 as the only accepting state
[03:33:58] <bjs> "easy" :)
[03:35:21] <Julius__> Try it: 168: State 0, read 1 as input, go to new state 1, read 6 as input, go to new state (10 * 1 + 6) % 7 = 16 % 7 = 2, read 8 as input, go to (10 * 2 + 8) % 7 = 28 % 7 = 0
[03:35:30] <pyzozord> lets see 1 is not divisible by seven so we can move on to one of the 1-9 "carry" state, next we have six, six + 1 * 10 is 16 divided by 7 is 2 rest 2 so we move to "carry" state, last is 8 + 2 * 10 is 28 divide by 7 gives us 4 no rest, since no rest we move on to state "accepted"
[03:35:51] <pyzozord> if we would move end up in one of the "carry" states when there was no more input that would be "unaccepted"
[03:36:38] <Julius__> So we end in state 0, and this is the accepting state, so we accept 168, and actually 168 is really dividable by 7 since 168 / 7 = 24
[03:38:05] <Julius__> pyzozord, no, you always move to   (10 * old_state + input_symbol_value) % 7   as the new state
[03:39:02] <pyzozord> i see yeah indeed that is more legant way, now I see how it needs 7 states
[03:39:05] <pyzozord> thanks
[03:40:21] <Julius__> All this does is multiply what was read so far by 10, since you read a new symbol so everything on the left of it is now 10 times as large, add the new symbol's value to the number, and do a modulo 7, since you only have to remember the modulo value (i.e. a value between 0 and 6) and not the whole number. This is the reason why you need only 7 states no matter how long your input is, so you can realize it as a FSM
[03:41:44] <pyzozord> so this code you wrote "(10 * old_state + input_symbol_value) % 7" does it sit in one of the states?
[03:42:00] <pyzozord> It's not input, input is the number we are deciding if it's part of the language
[03:42:09] <Julius__> So checking if a positive integer (represented in a certain, here decimal way) is devidable by 7 or any other fixed number can be done with a FSM. Checking if a number is a prime can probably NOT be done by a FSM
[03:43:14] <Julius__> This means (if true) that the set of all prime numbers (or more precisely their representations in a certain, given way) are NOT a reguar language!
[03:43:35] <Julius__> And I'm pretty sure it's true :D
[03:44:36] *** Quits: quartz (~quartz@2603-8001-7700-61a4-0000-0000-0000-0acb.res6.spectrum.com) (Quit: WeeChat 3.2)
[03:44:51] *** Joins: quartz (~quartz@2603-8001-7700-61a4-0000-0000-0000-0acb.res6.spectrum.com)
[03:45:01] <pyzozord> prime numbers can be found in O(n) time and O(1) space, I think O(1) space is a finate state machine
[03:45:14] <Julius__> pyzozord, the "code" I wrote represents all transitions, since writing out all (7 states * 10 different input symbols = ) 70 transitions by hand would suck
[03:45:22] *** Joins: Hanii (~textual@2a00:23c5:c587:6d00:8ce1:69c1:b612:d4f0)
[03:45:36] <pyzozord> I assume FSA can really have multiple variables not just one. The overall state is a unique combination of all values?
[03:46:25] <pyzozord> Julius__: ah ok so each state has it's own unique version of the computation
[03:46:42] <arahael> pyzozord: technically but it is very difficult to ensure that tge state machine is correct in that case
[03:47:01] <Julius__> pyzozord, FSM don't have any variables. They are just a mathematical construct, not more. If you wanted to implement them you'd of course need a variable to remember the current position in the input word and the current state you are in
[03:47:58] <pyzozord> ok seems like from implementation point of view a unique "state" can be represented by multiple variables. Just the space complexity must be constant
[03:48:01] <bjs> pyzozord: FSA/FSM are the mathematical model,  "variables" are a programming language construct.  Mathematically you just have a concept of "states", and there must be finitely many of them.
[03:48:27] <bjs> pyzozord: in a real program the "state" might be partly described by variables, and memory and perhaps some hidden state inside functions/operations etc
[03:48:36] <arahael> generally when you "implement a state machine", you want to ensure it is explicit and correct.  otherwise it is implicit and usually unknown.
[03:48:57] <Julius__> pyzozord, fuck no. My "code" simply describes the set of all transitions. It is the same as {(0,0,0), (0,1,1), ..., (1,7,2), ...} where (1,6,2) is a transition and means "If you are in state 1 and read a 6 then go to state 2"
[03:50:07] <pyzozord> Julius__: I think that's the same what I meant/said just in different words
[03:50:12] *** Joins: zaher_ (~zaher@37.48.178.128)
[03:50:21] <Julius__> pyzozord, in the case of the super mario FSM a transition would be "If you are in state 'Small Mario' and you read a 'Fire Flower' as input symbol, then go to state 'Fire Mario'"
[03:50:50] *** Joins: exvicesindaco (~exvicio@user/exvicesindaco)
[03:50:52] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 268 seconds)
[03:51:13] <Julius__> There is no code in a FSM. There is simply a set of transitions, which is basically just like a look up table for idiots, telling the machine what to do when
[03:51:29] *** Quits: trace987 (~trace@ip5f5a6a70.dynamic.kabel-deutschland.de) (Ping timeout: 268 seconds)
[03:51:43] <pyzozord> Julius__: I understsand that. I was talking about how to conceptualize that from a perspective of a programmer
[03:52:46] *** Quits: zaher (~zaher@37.48.148.154) (Ping timeout: 272 seconds)
[03:52:53] *** Parts: cis (cis@user/cis) ()
[03:52:57] *** Joins: cis (cis@user/cis)
[03:53:25] <Julius__> pyzozord, if you are "in" a programming language it doesnt make much sense to use a FSM since you have probably the full power of a turing machine (i.e. a normal computer) already that this programming language can use
[03:53:56] <arahael> pyzozord: as a dev i would use an explicit single variable wih an enum type defining all the possible states, and ideally, a single function that updates that var according to well defined transitions.
[03:54:14] <arahael> Julius__: it still makes sense to implement in some contexts.
[03:54:23] <Julius__> It makes more sense to formally define a FSM and then plug this into already existing things that simulate a FSM (i.e. execute what the FSM would do) in software or in hardware
[03:55:22] <arahael> perhaps, though the FSM could be a hard, formal requiremenr.
[03:55:37] * arahael switches to a real keyboard soon. ipad sucks.
[03:56:01] <Julius__> It's like writing a parser: Instead of hardcoding what the parser does in your code, define the language in a file (for example an XML file), and then plug this in into already existing things that can do the parsing of your language for you
[03:56:22] *** Joins: Guest73 (~Guest73@37.157.32.226)
[03:56:25] <Guest73> hello
[03:56:28] <Julius__> Hi
[03:56:30] <Guest73> how do you do?
[03:56:39] <Julius__> I'm ok, thx. You?
[03:56:49] <Guest73> i am fine
[03:56:53] <pyzozord> So now I want to take this contecept to the extreme to see if I can break my understanding of it: Finite State Machine can be implmented in software with multiple variables as long as that is constant space complexity. All variables together create single "state". Right? So if that's the case. I could create 1 bilion variables, each with values 0-255, right? All those variables still create single 
[03:57:00] <pyzozord> unique state, it's still Finate State too.
[03:57:01] <Guest73> was checking for some properties to rent
[03:57:02] <Guest73> :)
[03:57:36] <pyzozord> Than if all that is true, Aren't computers Non-Detemrinistic Finate State Machines really?
[03:57:41] <Julius__> pyzozord, bascially all you need is a variable for the current position on the input word, and another variable for your current state. That's all
[03:58:51] <Guest73> pyzozord I have seen some nice vacancies on upwork yesterday
[03:59:00] <Guest73> 35 to 50 usd per hr xd
[04:00:16] <PlanckWalk> pyzozord: They are finite state maxhines, yes.
[04:00:43] <pavonia> But FSMs stop eventually when all input is processed, real computers don't necessarily do that
[04:01:01] <pyzozord> PlanckWalk: nice! thanks
[04:01:03] <Julius__> pavonia, unless you get a bluescreen :D
[04:01:11] <PlanckWalk> pavonia: They don't have to
[04:01:31] <PlanckWalk> But in practice their input is finite.
[04:01:34] <pyzozord> pavonia: i think it just keeps looping between states
[04:02:04] <pavonia> PlanckWalk: You can't have an endless loop in a FSM
[04:02:05] <PlanckWalk> Of course in practice they also have multiple input channels not just one, and also multiple output channels.
[04:02:10] <PlanckWalk> pavonia: Sure you can
[04:02:20] <pavonia> ?
[04:02:24] <Julius__> pyzozord, computers are finite state machines if you concider all possible memory allocations as individual states, but that is more than there are atoms in the visible universe, I'd say, so it's bullshit
[04:03:02] <pyzozord> Julius__: I thought that's how mathematicians operate, in the abstract
[04:03:10] <Julius__> pyzozord, computers are actually more like turing machines, since they have some states and in additions some working memory
[04:03:46] <Guest73> computers are hardware
[04:04:02] <Guest73> memory cpu hd monitor
[04:04:05] <pyzozord> Julius__: my point is, Turing Machine has infinite tape. Computers have finite memory. All finite memory can be thought of as FSA states
[04:04:05] <PlanckWalk> FSM isn't a great abstraction for real computers, right
[04:04:25] <Guest73> then we use code and computer does itts job
[04:04:31] <PlanckWalk> While in practice they are, it's a poor model for thinking about their behaviour
[04:04:42] <Guest73> are there some chats where people co code?
[04:04:47] <Guest73> code together
[04:04:49] <Julius__> pyzozord, a finite state machine can NOT computate everything that is computable, but we say that a turing machine/ a computer can. At least that's our working hypothesis
[04:05:08] <Guest73> i dont like anti social people lol
[04:05:13] <pyzozord> Julius__: turing machine can, computer cannot, computer has limited memory
[04:05:44] <oldlaptop> pyzozord: Finite state machines have some fundamental limitations that our "real computers" don't. Real computers are more or less equivalent to linear bounded automatons - which in turn is more or less a Turing machine with a finite tape.
[04:05:46] <Julius__> pyzozord, yes, I know. But since computers only have a fixed amount of memory, everything can be computed in constant time. True in theory, bullshit in practice D:
[04:05:47] <pyzozord> my computer cannot even computer crysis
[04:05:48] <Julius__> :D
[04:06:16] <Guest73> why not to make irc for social programming
[04:06:27] <Guest73> where people program together
[04:06:29] <Guest73> faster to learn
[04:06:32] <PlanckWalk> Yes, O(1) isn't very useful when the constant is like 10^10^30
[04:06:34] <Julius__> pyzozord, we can practically neglect the differences, but yes, sure, if you want to be ultra precise then there is of course a difference
[04:06:37] <oldlaptop> Guest73: Anyone can start an IRC channel, why not try it?
[04:06:43] <Guest73> not channel
[04:06:49] <Guest73> social programming network
[04:06:54] <Guest73> spn
[04:07:04] <pyzozord> oldlaptop: isn't a turing machine with a finite tape a finite state machine? If all variables create unique state, can can create stack out of those states and heap memory too
[04:07:18] <Guest73> main emphasis on co programming, all who refuse are booted
[04:07:18] <Julius__> pyzozord, a turing machine can decide even Crysis :P
[04:07:51] <Guest73> in other words the only way to stay on that irc - you have to co write code with other irc users
[04:07:54] <Guest73> daily
[04:08:01] <Julius__> Imagine crysis running on a machine that works on a physical, sequential tape
[04:08:04] <PlanckWalk> Yes, a Turing machine with finite tape (e.g. a circular buffer) has computability equivalent to a FSM.
[04:08:49] <Julius__> PlanckWalk, true, at least in theory
[04:08:51] <PlanckWalk> The details below that in abstraction differ though.
[04:09:32] <Joanna> Guest73: that is interesting idea it sounds like an irc channel for a workplace.
[04:09:34] <pyzozord> PlanckWalk: do you mean "above that"? As in higher level abstractions?
[04:09:40] <PlanckWalk> E.g. the FSM state transition table will need a great deal more states than the bounded Turing machine in general.
[04:09:43] <PlanckWalk> No, below
[04:09:52] <PlanckWalk> As in implementation details, runtimes etc
[04:09:56] <pyzozord> PlanckWalk: isn't below FSM only "computational logic"
[04:10:08] <PlanckWalk> No
[04:10:26] *** Joins: snake (~snake@user/snake)
[04:10:27] <PlanckWalk> Below in *abstraction level*, i.e. closer to real devices.
[04:10:48] <Julius__> pyzozord, if you have K states and in addition N many memory cells and each can contain M different symbols, then you can simulate that by K * M^N many states and no additional memory at all
[04:10:49] *** Joins: TheAceOfHearts (~TheAceOfH@24.41.239.76)
[04:10:55] <pyzozord> I'd think of Turing Machine as a higher level abstraction thatn FSM
[04:11:05] <PlanckWalk> They're at the same level of abstraction
[04:11:18] <pyzozord> I'm basing this opinion on this https://en.wikipedia.org/wiki/Finite-state_machine
[04:11:20] <bayaz> Title: Finite-state machine - Wikipedia 
[04:11:21] <pyzozord> on the image
[04:11:30] <oldlaptop> PlanckWalk: I'd be interested to see the proof for this claim that LBAs are equivalent to FSMs, that is, capable only of deciding regular languages.
[04:11:42] <oldlaptop> intuitively I don't buy it
[04:11:48] <PlanckWalk> oldlaptop: It's more trivial and boring than you think.
[04:11:53] <Julius__> pyzozord, as you can see, machines can (sometimes) simulate each other, or let's better say emulate. But not always! A turing machine can emulate a FSM, but NOT vise versa
[04:12:44] <PlanckWalk> oldlaptop: Julius__ already outlined the proof.
[04:12:45] <pyzozord> Julius__: yep that's clear. With one exception that a turing machine with finite tape CAN be emulated by a FSM, right?
[04:13:06] <Julius__> pyzozord, yes
[04:13:21] <Guest73> Joanna xd
[04:13:31] <pyzozord> those are essentially different ways of looking at the same memory
[04:13:36] <Guest73> yes we live in a collaborative world
[04:13:45] <Guest73> so in 2021 coding is co coding
[04:13:55] <Julius__> pyzozord, but in this case the size of the memory is not allowed to be dependent on the input or input length of course. It has to be fixed no matter what the input is
[04:14:16] <pyzozord> Julius__: yes that is what I meant
[04:14:24] <Guest73> this way there is no argument between team member as to why someone wrote a bad code
[04:14:24] <pyzozord> it's fixed until I buy more ram
[04:14:28] <pyzozord> to run Crysis
[04:14:29] <Julius__> pyzozord, but this is not a turing machine then, so it's wrong to say that a turing machine can be emulated by a FSM. Just to make this clar
[04:14:30] <Julius__> clear
[04:14:35] <Guest73> team itself is responsible
[04:14:44] <Guest73> no one know who contributed what
[04:14:53] <Guest73> so there 0 harrasment
[04:14:55] <PlanckWalk> oldlaptop: map each of the K * M^N combined states of Turing machine and finite tape onto a FSM state.  Construct the state transition table according to the rules of the TM.
[04:15:07] <pyzozord> Julius__: yeah ok clear, maybe it has a different name when the tape is finite
[04:15:22] <pyzozord> Julius__: but then computers are not turing machines either
[04:15:57] <PlanckWalk> So yes, a FTM with 10 states and a tape of 80 binary symbols ends up being equivalent to a FSM with 10*2^80 states and an even larger state transition table.  Nobody said it was efficient.
[04:16:46] <Julius__> pyzozord, imagine you have 2 different FSMs A and B, that work on the same input alphabet (i.e. the same input symbols). You can even construct a FSM C that accepts a word only if A and B accept the word.  Or if neither A or B accept. Or if A accepts and B rejects. So 1 FSM can emulate 2 other FSM at the same time as well ;)
[04:16:51] <PlanckWalk> Efficiency is a fiddly detail concern below the level of abstraction of computability.
[04:16:53] <pyzozord> I think they are equivalently efficient, they are just different models of understanding the sam ething. Different ways of looking at bits flipping
[04:17:10] <Guest73> back
[04:17:19] <Guest73> guys ok add any code you like to https://codebunk.com/b/2981100327438/
[04:17:22] <bayaz> Title: CodeBunk: New Interview 
[04:17:23] <PlanckWalk> pyzozord: FSMs with state transition tables that large are *vastly* more capable.
[04:17:24] *** Quits: jamea (~jamea@200.95.170.71) (Ping timeout: 268 seconds)
[04:17:36] <Guest73> this is my live co coding session Joanna
[04:17:56] <PlanckWalk> It's mapping a tiny space of FTMs into a staggeringly immense space of FSMs
[04:18:09] <Julius__> pyzozord, you can also construct a FSM X that accpects a word if a different FSM Y rejects a word. So you can accpet precisely those words in your language that are NOT in a different language
[04:18:55] *** Quits: gry (~quassel@botters/gry) (Ping timeout: 258 seconds)
[04:18:58] *** Joins: RenAdjest2 (~RenAdjest@user/renadjest)
[04:19:07] *** Joins: jamea (~jamea@200.95.170.72)
[04:19:08] <Julius__> pyzozord, this means we can easily construct a FSM that accepts all numbers (i.e. their representations) that are NOT dividable by 7 for example, and you probably already know how :)
[04:19:13] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[04:19:23] <pyzozord> Julius__: I see so you are now talking about combining FSMs to create bigger FSMs?
[04:19:36] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Remote host closed the connection)
[04:19:56] <Guest73> opppppppppppppppppppps
[04:20:00] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[04:20:01] <Guest73> its not editable
[04:20:03] <Guest73> fixing it
[04:20:28] <pyzozord> cool today I learned few cool things
[04:20:33] <Julius__> pyzozord, formally this new FSM is a different FSM. It just emulated the 2 others and does not really contain them, since otherwise you might end up with 2 times the same state in case A and B have states with the same name
[04:21:20] <pyzozord> most imporantly that effectively any code I write is a finite state machine. And the explicist implementation of a simulation of FSM is just syntactic sugar
[04:21:28] <Julius__> pyzozord, do you know how to accept all numbers that are NOT dividable by 7 ?
[04:21:38] *** Quits: Tazmainian (~Tazmainia@41.193.169.28) (Read error: Connection reset by peer)
[04:22:00] <PlanckWalk> pyzozord: The code you write need not be equivalent to a FSM
[04:22:21] <PlanckWalk> The code that runs on an actual computer (approximately) is though.
[04:22:22] *** Quits: Burgundy (~yomon@5-12-93-72.residential.rdsnet.ro) (Ping timeout: 258 seconds)
[04:22:34] <Guest73> hmm most are paid
[04:22:35] *** Quits: RenAdjest (~RenAdjest@user/renadjest) (Ping timeout: 245 seconds)
[04:22:37] <Guest73> o well :)
[04:22:38] <Julius__> Code is not a FSM ! A FSM is a formal construct, or to be more precise a certain 5-tuple
[04:23:12] <PlanckWalk> (In terms of computability)
[04:23:38] <Guest73> code is a tool to make money
[04:23:40] *** RenAdjest2 is now known as RenAdjest
[04:23:54] <pyzozord> "certain 5-tuple" means "specific 5-element thingy" right?
[04:24:12] <Guest73> https://codebunk.com/
[04:24:13] <bayaz> Title: CodeBunk: Online Realtime Collaborative Editor and Compiler 
[04:24:15] <Guest73> :))))))))
[04:24:52] <PlanckWalk> A 5-tuple is one way of specifying a FSM
[04:25:07] <Guest73> do you all co code?
[04:25:16] <PlanckWalk> It's a bit redundant though.
[04:25:30] <Guest73> farm from it
[04:25:36] <Guest73> far xd
[04:26:21] <Guest73> https://codepen.io/fixturemedia/pen/CKvwi
[04:26:24] <Guest73> very nice tool
[04:26:36] <Guest73> can you share your code in codepen?
[04:27:25] <pyzozord> Julius__: PlanckWalk: bjs: arahael: and others, thanks very much for helpd
[04:27:33] <pyzozord> and for patience
[04:27:41] <pyzozord> it's 2am here so I'll better go now
[04:27:45] <Julius__> pyzozord, for example   ( {A, B},   A,   {0, 1},   {B},   {(A,0)->A, (A,1)->B, (B,0)->B, (B,1)->B} )   is a FSM. Can you tell me what language is accepted by this FSM ?
[04:27:49] <arahael> pyzozord: No worries.  It was mostly Julius__, though.  Almost completely, from what I gather. :)
[04:28:37] <Guest73> are there some programming irc rooms where you have to prove your skills before you can chat?>
[04:29:00] <Julius__> pyzozord, yes, a FSM is a tuple of 5 certain things that are defined precisely. As you can see, the FSM in my example is such a 5-tuple
[04:29:12] <Guest73> by writing software in real time xd
[04:29:36] *** Guest73 is now known as cocoding
[04:29:48] <Julius__> PlanckWalk, well, sure, we can use a different definition of FSM, but that would formally not be the same thing
[04:30:07] <arahael> Guest1: Such gatekeeping sounds horrible! :)
[04:30:47] <cocoding> wrong
[04:30:56] *** Joins: gry (~quassel@botters/gry)
[04:30:58] <cocoding> its good to ensure all who chat are coders
[04:30:59] <cocoding> https://www.ibm.com/garage/method/practices/culture/practice_social_coding/
[04:31:15] <cis> cocoding: and those who wish to learn?
[04:31:19] <Julius__> pyzozord, let me help you: My FSM has A and B as states, and the input consists of 0s and 1s. It starts in state A, and when it reads a 1 it transitions to state B and stays there. And only state B is accepting. So what words are accepted by this FSM ?
[04:31:36] <cocoding> cis they are obliged to learn via social coding 8 hrs each day
[04:31:42] <cis> cocoding: wrong.
[04:31:46] <cocoding> failure to do so results in ban
[04:32:04] *** Quits: nekobyte (~based@user/nekobit) (Quit: cute!!!!)
[04:32:21] *** Joins: nekobyte (~based@user/nekobit)
[04:32:26] <cocoding> this way social coding can easily give rise to new foss
[04:32:41] <cocoding> that will outsource the likes of fb, reddit and way more
[04:33:20] <RenAdjest> cocoding: It's called company's internal irc server. Can't code? Fired.
[04:33:44] <cocoding> flat hierarchy, decision what to code is taken by all members, 90% of members can vote to expulse those who wont co code 
[04:33:47] <Julius__> RenAdjest, not everyone needs to be able to code
[04:33:51] <cocoding> wrong
[04:34:01] *** Quits: Joanna (uid57472@id-57472.tooting.irccloud.com) ()
[04:34:03] <cocoding> refusal to code result in ban in co coding irc
[04:34:07] <Julius__> Flat hierarchy = no chance to get to a higher level
[04:34:19] <cocoding> must code while logged in xd
[04:34:27] <Julius__> cocoding, what is coding IRC and why would non-coders be there?
[04:34:33] <cocoding> correct no need to focus on power trips
[04:34:46] <RenAdjest> That was joke btw, dont take it seriously Julius__
[04:34:51] <arahael> cocoding: I don't intend to do coding here, already do anough coding in other places.
[04:34:56] <Julius__> RenAdjest, I am German. What is a joke?
[04:35:01] <RenAdjest> lol
[04:35:02] <cocoding> a co coding irc is a platform for people who like to code
[04:35:04] *** Quits: rany (~rany@user/rany) (Read error: Connection reset by peer)
[04:35:10] <cocoding> or want to learn in real time
[04:35:23] <cocoding> as simple as that xd
[04:35:31] <Julius__> pyzozord, still there?
[04:36:09] <cocoding> i have found some platforms that allow to code together in real time, yet to see which one also run code and show front end interaction
[04:36:18] *** Quits: Iryon (~Iryon@185-12-21-77.sigma.jaslo.pl) (Remote host closed the connection)
[04:36:29] <cocoding> arahael so you code 247?
[04:36:44] *** Joins: rany (~rany@user/rany)
[04:36:47] <arahael> cocoding: No, I'm not an idiot.
[04:37:16] <cocoding> also in a platform there could be an option to have a nick or not
[04:37:29] <cocoding> so people wont know who submitted bad code
[04:37:51] <Julius__> RenAdjest, why do I have to code? Why is there still no computer that I just can talk to and tell it what to code for me
[04:38:28] *** Quits: rany (~rany@user/rany) (Read error: Connection reset by peer)
[04:39:13] <InPhase> cocoding:  If you want a programmer-only chat service, change the data scrambling protocol every Friday night, and post the description of the new protocol to people upon joining.  Then give them an interface with which they can descramble it in the language of their choice.  Only people who succeed at each refresh (or have someone doing their homework for them) will be able to join in.  Of course, 
[04:39:19] <InPhase> you'll probably end up with a small circle of people who care enough to do it.  But maybe a tiny group of dedicated people would enjoy it.
[04:39:27] *** Joins: rany (~rany@user/rany)
[04:40:09] *** Quits: amahl (~amahl@dsl-jklbng12-54fbca-64.dhcp.inet.fi) (Ping timeout: 248 seconds)
[04:40:22] *** Quits: d[^u^]y (~d^u^]y@user/duy/x-5876947) (Remote host closed the connection)
[04:40:32] *** Quits: exvicesindaco (~exvicio@user/exvicesindaco) (Remote host closed the connection)
[04:40:47] <InPhase> cocoding: Calibrate the difficulty accordingly to how much people are willing to put into a challenge every Friday night or Saturday morning to participate.
[04:40:56] <Julius__> cocoding, if you want a hacker-only chat service, change the data scrambling protocol every Friday night, and don't post anything
[04:41:05] <InPhase> :)
[04:42:28] <arahael> It _would_ be an appropriate model for a competition or course.
[04:43:55] <cocoding> cocoding, if you want a hacker-only chat service, change the data scrambling protocol every Friday night, and don't post anything xd
[04:44:35] <cocoding> yes true some people code solely to get cash
[04:44:43] <oldlaptop> PlanckWalk: informally/intuitively, I don't see how that is possible for machines that are capable of 'self-modifying code', as LBAs are (think of universal TMs). Formally, the Internet tells me it's been known since 1964 (https://www.sciencedirect.com/science/article/pii/S0019995864901202?via%3Dihub - one of those papers that results in theorems named after the author) the languages accepted by LBAs are precisely the context-sensitive languages, 
[04:44:43] <oldlaptop> and that's a bigger class than the regular languages. I have to imagine a formal proof of the assertion that FSMs are actually capable of recognizing something more than the regular languages would be a big deal.
[04:46:57] <Julius__> oldlaptop, there is a proof that shows that FSMs precisely decide regular languages, you know that, right?
[04:47:43] *** Joins: trace987 (~trace@ip5f5a6a70.dynamic.kabel-deutschland.de)
[04:48:14] *** Quits: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Ping timeout: 268 seconds)
[04:49:31] <cocoding> who here have used https://codeshare.io/ ?
[04:49:41] <Julius__> Not me
[04:51:18] <cocoding> https://codebunk.com/ can compile and charges more lol
[04:51:20] <bayaz> Title: CodeBunk: Online Realtime Collaborative Editor and Compiler 
[04:52:25] <cocoding> i wonder if there is collaborative version of https://codepen.io/fixturemedia/pen/CKvwi where multiple people write code same time + chat feature :)
[04:52:47] <cocoding> so people can say hey lets fix that css a bit and do it instantly + see results
[04:53:04] <Julius__> I bet that would be a wise idea, like having 20 chefs preparing 1 meal at the same time
[04:53:17] <cocoding> that is how kitchens work
[04:53:27] <cis> cocoding: replit.com
[04:53:27] <cocoding> some do prep some stir some fry
[04:53:32] <cis> has multiplayer
[04:53:54] *** Quits: nekobyte (~based@user/nekobit) (Excess Flood)
[04:54:21] *** Joins: nekobyte (~based@user/nekobit)
[04:54:28] *** Joins: nekodesu (~nano@user/nekobit)
[04:55:53] *** Quits: jaysicks (~jaysicks@178-164-134-171.pool.digikabel.hu) (Remote host closed the connection)
[04:55:56] <cocoding> https://replit.com/join/lcfyxjxyrz-joe2424 ty
[04:55:57] <bayaz> Title: Invitation to collaborate on Replit 
[04:56:10] <cocoding> feel free to add any code no matter how insane
[04:56:41] *** Quits: trace987 (~trace@ip5f5a6a70.dynamic.kabel-deutschland.de) (Ping timeout: 248 seconds)
[04:57:03] *** Joins: Samian (~Sami@174.27.107.153)
[04:57:48] <cocoding> added saving calculator code xd
[04:57:51] *** Quits: kuku (~kuku@user/kuku) (Remote host closed the connection)
[04:58:42] *** Quits: nekobyte (~based@user/nekobit) (Excess Flood)
[04:59:07] *** Joins: nekobyte (~based@user/nekobit)
[05:00:20] <Julius__> Can someone help me to program something no one understands?
[05:00:32] *** Quits: Powerhouse6666 (~Powerhous@S01067898e83ba01c.vn.shawcable.net) (Ping timeout: 252 seconds)
[05:00:40] <cocoding> why xd
[05:01:06] <cocoding> go to our community replit and add code
[05:02:08] <cocoding> plus co coding is cost efficience
[05:02:37] <Julius__> I don't have code. I'm asking for code
[05:02:46] <cocoding> lets say a rate for A grade coder is x and B grade is x/3 - it takes 2 B coders to do the job
[05:02:52] <cocoding> co code them and save money
[05:03:24] <cocoding> each software project is defined in inputs - coders and output - software
[05:03:53] <Julius__> ?
[05:04:21] <[itchyjunk]> hello
[05:05:18] <Julius__> hello
[05:06:06] <Julius__> cocoding, seems you can't help me, although you came close
[05:06:23] <phogg> cocoding: and a coder is just a biological machine which transforms caffeine into software
[05:06:54] <Julius__> I hate coffee, so I will never be able to code :(
[05:07:05] *** Joins: RenAdjest2 (~RenAdjest@user/renadjest)
[05:07:17] <phogg> Julius__: if no one understands it the first step should be to understand it. A program you wrote which you don't understand while writing it is buggy.
[05:07:34] <phogg> Maybe try getting drunk first. I often don't understand what I write while drunk, so maybe the inverse is true.
[05:07:42] <cocoding> here new code https://replit.com/@joe2424/TintedEasyLoopfusion#index.html
[05:07:44] <bayaz> Title: TintedEasyLoopfusion 
[05:07:48] <cis> If you don't understand what it is or what it should do, then how can it have any bugs?
[05:07:55] <phogg> Julius__: caffeine is also in soda, soap, pills, and many other forms
[05:07:56] <Julius__> phogg, but then no one would not understand it
[05:08:03] <Julius__> I mean someone
[05:08:07] <Julius__> You understand?
[05:08:27] <phogg> Julius__: if this is a thought experiment and not a serious effort you should say so up fron
[05:08:29] <phogg> er, front
[05:08:30] <cocoding> jul if you join coding as nameless machine you can avail of entire group iq and lack of judgement
[05:08:32] <Julius__> I hate pills
[05:08:51] <phogg> Julius__: think of it like taking a vitamin supplement, only you are supplementing SLoC
[05:08:54] <Julius__> cocoding, entire group IQ ? So basically 35
[05:09:17] <Julius__> phogg, I don't supplement
[05:09:40] <Julius__> How do I learn to code?
[05:10:04] <phogg> Julius__: go play Human Resource Machine.
[05:10:30] *** Quits: RenAdjest (~RenAdjest@user/renadjest) (Ping timeout: 245 seconds)
[05:11:00] <Julius__> phogg, you think I will find someon who doesnt understand what he is coding, and no one else will understand it as well? I mean, that's a pretty big skill I'd say
[05:12:05] <phogg> Julius__: if you just want a person who is trying to write something, but he doesn't understand (pick one of) A. What it is, or B. what he is doing, then those are a dime a dozen
[05:12:12] <phogg> I've seen it many times.
[05:12:34] <Julius__> phogg, no, no one else should be able to understand the code as well
[05:12:40] <phogg> If you want to know how to solve a programming problem that *no one* can currently understand then that's different.
[05:12:44] *** RenAdjest2 is now known as RenAdjest
[05:13:06] <phogg> Julius__: ah, so you want an APL programmer
[05:13:07] <Julius__> phogg, I doubt there are any programming(!) problems that no one understands
[05:13:25] <Julius__> phogg, yeah, I dont know. Probably :) Thx
[05:13:28] * phogg hits the cymbals 
[05:13:55] <phogg> Julius__: this is what we in the community refer to as a joke
[05:14:06] <phogg> APL is the butt of many jokes, but APL is not a joke
[05:14:23] <Julius__> What are jokes?
[05:14:38] <phogg> philosophers have debated that for thousands of years
[05:14:41] <Julius__> I dont even know what APL and APL are
[05:15:11] <Julius__> Damn, those philosophers really got old
[05:15:17] <phogg> Julius__: https://en.wikipedia.org/wiki/APL_(programming_language)
[05:15:17] <bayaz> Title: APL (programming language) - Wikipedia 
[05:15:54] <Julius__> I see
[05:16:22] *** Quits: jarthur (~jarthur@2603-8080-1540-002d-b485-c402-7731-8036.res6.spectrum.com) (Quit: jarthur)
[05:18:42] *** Joins: kuku (~kuku@user/kuku)
[05:19:17] *** Joins: Izem (~rcg@bras-base-london1483w-grc-43-65-95-173-5.dsl.bell.ca)
[05:19:23] <Julius__> phogg, what unsolved programming problems did you mean?
[05:19:49] <cocoding> jul this is discrimation and harassment free zone 
[05:19:59] <cocoding> discrimination xd
[05:20:11] *** Joins: Jabberwack (~Jabberwac@user/jabberwack)
[05:20:28] <phogg> I didn't mention any unsolved programming problems.
[05:20:28] <Julius__> cocoding, what are you talking about?
[05:20:33] <cocoding> group iq 35
[05:20:55] <Julius__> <phogg> If you want to know how to solve a programming problem that *no one* can currently understand ...
[05:21:08] *** Quits: shibboleth (~shibbolet@user/shibboleth) (Quit: shibboleth)
[05:21:11] <Julius__> phogg, are you sure about what you said?
[05:21:26] <Julius__> cocoding, oh, that is what you mean :)
[05:21:28] <cocoding> team effort does not depend on individual iq
[05:21:28] <phogg> Julius__: I am not refering to an unsolved problem. I am speaking in the abstract: given that *you* have identified a programming problem that no one can understand, I provide an approach to begin attempting to solve it.
[05:21:36] <cocoding> as we all know
[05:21:57] <cocoding> it simply supplies co coders as inputs as per project manager or self management
[05:22:10] *** phenom is now known as phenom_
[05:22:18] <cocoding> each program function must be defined and operational in x amount of hours
[05:22:23] <Julius__> cocoding, I am pretty sure that 10 people of IQ 100 each have a combined IQ of 10
[05:22:36] <phogg> "none of us is as stupid as all of us"
[05:22:41] <cocoding> extra co coders are poured in to achieve it
[05:22:52] <phogg> cocoding: what is a "co coder"?
[05:22:53] <cocoding> it's like amazon cloud
[05:23:00] *** Quits: Auron (~Auron956@user/auron) (Remote host closed the connection)
[05:23:03] <cocoding> each co coder is a part of co coding cloud
[05:23:07] <Julius__> phogg, what do you mean by "programming problem" ?
[05:23:08] *** phenom_ is now known as plenum
[05:23:18] *** Joins: gggp_ (~gggp@114.243.61.163)
[05:23:24] <cocoding> phogg its a new way to produce software
[05:23:45] <Julius__> cocoding, I dont like the cloud. What if we get bad weather?
[05:23:45] *** Quits: foretastes (~sid289983@36.72.67.223) (Read error: Connection reset by peer)
[05:23:47] <phogg> cocoding: adding more programmers is not going to help. See the Tao of Programming 3.4
[05:23:57] <cocoding> it will
[05:24:03] <Julius__> Tao of Programming ?
[05:24:20] <cocoding> each coder writes x lines per min
[05:24:26] <phogg> Julius__: a text which may or may not be a joke, but which nevertheless every programmer should read--once
[05:24:30] <cis> "throw more coders at it" is usually the hallmark of a death march
[05:24:37] <phogg> cocoding: I think you don't know how programming works.
[05:24:42] <Julius__> cocoding, how about if you have n coders, each coder writes every n-th line?
[05:24:48] <cocoding> no need to go personal
[05:24:58] *** Joins: kedamono (~kedamono@67.sub-174-251-210.myvzw.com)
[05:24:59] <cocoding> its old paradigm
[05:25:11] <Julius__> phogg, I will google it. But will you answer my other question?
[05:25:12] <cocoding> in new paradigm only ideas are discussed
[05:25:27] <phogg> cocoding: It's an unworkable idea. You can't author a novel faster by adding more authors. What you get isn't the same, or even necessarily coherent.
[05:25:32] <cocoding> also co coders are nameless, no one knows who is who
[05:25:38] <cocoding> phogg sure can
[05:26:03] <cocoding> first co write a plot - then each person writes part of a plo
[05:26:18] <cocoding> same as software
[05:26:21] <phogg> cocoding: have you heard about this exciting new organizing technique for software production? It's called "waterfall."
[05:26:28] <Julius__> Is cocoding for real?
[05:26:34] <cocoding> yes
[05:26:41] <cocoding> phogg no
[05:26:42] <Julius__> cocoding, are you coreal as well?
[05:26:48] <cocoding> yes
[05:26:59] <RenAdjest> phogg: I hear mangers are loving it
[05:27:01] <cocoding> i note you keep defaulting to old paradigm
[05:27:10] <cocoding> which  is why you need co coding guys
[05:27:39] <phogg> cocoding: You seem to be the one suggesting a return to model that is known to be pretty useless.
[05:28:17] <cocoding> co coding was not used before enmasse
[05:28:26] <cocoding> same as cloud
[05:28:37] <Julius__> Developing/coding works in cycles, and this will never change
[05:28:38] <cocoding> we are moving from hardware cloud to skills cloud
[05:28:42] <phogg> you can break down programming work into small pieces and divide them up among a lot of people, but to make all the pieces on the output side fit together and work you need a lot of planning--this way lies waterfall
[05:28:47] <arahael> cocoding: Oh I hope not.
[05:29:07] <Julius__> cocoding, what if I have zero skill but a lot of clouds here?
[05:29:10] <phogg> if you don't spell out a lot of detail about at least the interfaces between components then you'll get a hopeless mess
[05:29:23] <arahael> cocoding: Could you also explain what the "cocoding" means? You're referring to the co-domain of coding?
[05:29:58] <Julius__> phogg, so, will you eventually tell me what you meant by "programming problem" ?
[05:30:04] <cocoding> it is an idea that people instead of coding on their own code with others together in real time, frequently updating all about what they do et
[05:30:09] <cocoding> makes coding more social
[05:30:20] <RenAdjest> Isn it another name for "Pair Programming"?
[05:30:25] <cocoding> maybe
[05:30:33] <phogg> Julius__: It means one of two things, but only you know which one.
[05:31:05] <cocoding> plus with cloud skills managers can buy extra skills billed per day in future
[05:31:14] <cocoding> skills clouds
[05:31:17] <Jabberwack> yes 10 brains will make a design or programming decision faster and more efficiently than one brain. without any fuss or argument
[05:31:32] <cocoding> Jabberwack yep
[05:31:32] <Julius__> phogg, the first one!
[05:31:39] <cis> it's a way of reducing programmer throughput and code quality simultaneously!
[05:31:42] <Julius__> phogg, amiright?
[05:31:53] *** Quits: Mangy_Dog (Mange@user/mangy-dog/x-7397214) (Ping timeout: 252 seconds)
[05:32:06] <phogg> Julius__: in that case a programming problem is a problem which a programmer solves by writing a program
[05:32:10] *** Quits: TechTest (uid283215@id-283215.tooting.irccloud.com) (Quit: Connection closed for inactivity)
[05:32:12] <Jabberwack> maybe we should also outsource this cloud, say to another country. and maybe the country should be somewhere labor is cheap, say for example india
[05:32:31] <cocoding> problem is not a neutral word
[05:32:32] <phogg> Jabberwack: works well until you need to pick the paint for the shed
[05:32:39] <cocoding> perhaps task
[05:32:46] <Julius__> phogg, by that definition there are no unsolved programming problems, since each of them has already been programmed by at least one programmer
[05:33:04] <Julius__> phogg, try again!
[05:33:07] <cocoding> tasks are poping in programmers screen together with timer
[05:33:12] <InPhase> Julius__: Excellent!  Time to retire.
[05:33:21] *** Joins: brabrax_ (~brabrax@user/brabrax)
[05:33:25] <Julius__> InPhase, I dont even have a job
[05:33:26] <Jabberwack> try picking paint with your wife or gf for a bathroom ceiling
[05:33:27] <phogg> Julius__: no, the *type* of problem requiring a program to be written to solve it is a programming problem. 
[05:33:51] <cocoding> if someone is late there is 0 blame, other co coders are quickly attached to co solve it
[05:33:56] <Julius__> phogg, but if the programmer already programmed it, it's already solved
[05:34:08] <phogg> Jabberwack: that's easy, you just need to know how to read between the lines and to be agreeable. 
[05:34:14] <Julius__> cocoding, then I would be late all the time
[05:34:21] <phogg> Julius__: I didn't say one already programmed it
[05:34:35] <Jabberwack> yes and now just do that for 10 ppl who are working on the same code and have their own egos
[05:34:40] *** Quits: lunarkitty (uid501895@user/pyra) (Quit: Connection closed for inactivity)
[05:34:49] <phogg> Julius__: say you have a problem and you think "I know, if there were a program that could do this then the problem would go away." You have identified a programming problem. That does not mean you wrote a program.
[05:34:52] <cocoding> Jabberwack tell them to co code
[05:34:55] <Julius__> phogg, do you have an example?
[05:34:58] <InPhase> cocoding: You do realize that in most real world programming problems, there's a huge ramp-up to train a new person on a new codebase, right?
[05:35:00] <cocoding> instead of bickering
[05:35:05] <phogg> Julius__: use your imagination
[05:35:07] <cocoding> InPhase yes
[05:35:10] <InPhase> cocoding: Adding people to a project usually SLOWS it down initially.
[05:35:30] <cocoding> it depends on code architecture
[05:35:30] <Jabberwack> cocode sounds like some kind of coconut based drink and or drug
[05:35:33] <Julius__> phogg, like a mathematical problem?
[05:35:42] *** Quits: brabrax (~brabrax@user/brabrax) (Ping timeout: 268 seconds)
[05:35:43] *** brabrax_ is now known as brabrax
[05:35:46] <phogg> cocoding: history has demonstrated that you are incorrect about that
[05:35:59] <phogg> Julius__: it could be, potentially, among many other things
[05:36:03] <cocoding> phogg why you say you instead of co coding is wrong?
[05:36:07] <cocoding> ;)
[05:36:12] <Julius__> phogg, and you can solve such problems?
[05:36:12] <InPhase> cocoding: It holds true very broadly, unless the problem being solved is fully within the existing experience set of the added programmer.
[05:36:15] <Jabberwack> the soviets disagree, everything is better shared
[05:36:36] *** Quits: RenAdjest (~RenAdjest@user/renadjest) (Remote host closed the connection)
[05:36:38] *** plenum is now known as phenom
[05:36:42] <Julius__> cocoding, imagine someone always writing shit in between your code
[05:36:55] <cocoding> they cant
[05:37:05] *** Joins: RenAdjest (~RenAdjest@user/renadjest)
[05:37:09] <cocoding> cause while they are anon for the team
[05:37:11] <phogg> cocoding: Several reasons. I am not interested in stooping to allowing you to set the narrative. It is not helpful in this kind of disagreement to say something which is most likely to result in an emotionally defensive reaction from the other party. It would not be accurate.
[05:37:21] <cocoding> ?
[05:37:49] <cocoding> people who write bad code and do not improve are fired
[05:37:59] <phogg> cocoding: Aha! Now we are getting somewhere
[05:38:03] <cocoding> its normal
[05:38:04] <phogg> cocoding: how do you know if their code is bad?
[05:38:11] <cocoding> very simple
[05:38:25] <phogg> If you can automate the answer to *that* problem you'll make millions.
[05:38:38] <Jabberwack> why fire them when you could sentence them to co coding for the next 10 years, which would be a greater punishment
[05:38:45] <InPhase> phogg: You ask someone more experienced...
[05:39:05] <phogg> InPhase: there's a pyramid shape involved in that which is going to cause a problem
[05:39:10] <cocoding> phogg define automate
[05:39:15] <phogg> InPhase: that's how we do it in the real world, of course
[05:39:16] <Julius__> Jabberwack, klingons do not release software. Klingon software escapes. Probably true for communist software as well
[05:39:48] *** Quits: cthulchu (~Cthulchu@193.194.107.250) (Ping timeout: 272 seconds)
[05:39:51] <phogg> cocoding: determine without requiring the input of more time by people who have better things to to than the time saved by having the other person attempt to write the code
[05:40:12] <cocoding> there have to be a commonly shared code architecture
[05:40:17] <cocoding> to which all adher
[05:40:18] <Jabberwack> true story, i know someone who had random russians write a platform 10yrs ago, which is still used today, but full of bugs and spaghetti code
[05:40:23] <Julius__> phogg, do you have a formal definition of bad software, since I bet I could easily automate it then
[05:40:30] <Jabberwack> they sold the platform for 200m or so
[05:40:37] <phogg> cocoding: sure would be nice of that were easy. Have you heard the expression "herding cats"?
[05:40:47] <cocoding> no
[05:40:57] <cocoding> force adherence
[05:41:03] <cocoding> those who dont, leave
[05:41:25] <Julius__> cocoding, your co coding sounds like - if it would really work - a machne could easily do the job as well
[05:41:35] <phogg> Julius__: the fact that there is no good way for a machine to determine if a piece of code is good or bad is one of the fundamental challenges of software engineering. There are attempts to estimate it, but none are entirely reliable.
[05:41:38] <cocoding> shift emphasis from me coder to output
[05:41:50] * phogg waits for the obvious objection
[05:41:56] <Julius__> phogg, if you have a formal definition, I could do it
[05:41:56] <cocoding> there is a very simple way to do it
[05:42:24] <phogg> Julius__: thank you for obliging
[05:42:27] <cocoding> a collective co coding collective knows who is often late and votes such person out
[05:42:35] <Julius__> phogg, hurry, I dont have all day
[05:42:40] *** Quits: webnet4 (~0x100@32.211.211.39) (Remote host closed the connection)
[05:42:47] <cocoding> replacing it with another human input
[05:42:58] *** Joins: webnet4 (~0x100@32.211.211.39)
[05:42:59] <phogg> Julius__: hurry with what?
[05:43:07] *** Quits: Crescendo (~Crescendo@user/crescendo) (Ping timeout: 268 seconds)
[05:43:08] <Julius__> cocoding, you would always vote people out who would you out if they could
[05:43:12] <cocoding> plus project manager can see if some inputs are delaying their tasks
[05:43:16] <phogg> cocoding: people are not interchangeable. This is doubly true of programmers.
[05:43:20] *** Joins: Crescendo (~Crescendo@user/crescendo)
[05:43:21] <Julius__> phogg, hurry with your formal definition
[05:43:23] <phogg> a programmer is not fungible
[05:43:28] <cocoding> jul you just say  nonsense
[05:43:41] <Julius__> cocoding, I never said "nonsense" so far
[05:43:43] <cocoding> or to be correct stuff you say  is nonsense
[05:43:50] <cis> cocoding: that's ironic coming from you...
[05:43:54] <Jabberwack> checkmate julius
[05:44:22] <Julius__> cocoding, how? I am just waiting for a formal definition of bad code. Or good code if you prefer. Shouldnt you have such a definition?
[05:44:31] <phogg> Julius__: I rather meant that whole "obvious objection" thing to imply that I am aware that the solution to the challenge I describe is nominally formal verification, and that I don't consider it sufficient.
[05:45:15] <[itchyjunk]> what are you favorate newbi exercises?
[05:45:17] <Julius__> phogg, I think you dont quite understand the overall problem, namely that a formal definition would still not mean that we could check it efficiently
[05:45:38] <phogg> If it was going to solve the problem we would have solved it in the 80s. No solution seems likely to be forthcoming. Static analysis, linters, and fuzzing are about as good as it gets.
[05:45:42] <Julius__> phogg, but since you didnt meantion the word efficiently and just said that it would make someone millions who could do it, I could
[05:46:09] <cocoding> start reading
[05:46:14] <Julius__> Because we didn't invent anything new after the 80s ?
[05:46:17] <cocoding> instead of arguing
[05:46:37] <phogg> Julius__: it would be kind of useless if it were not able to run in reasonable time, of course. I thought that went without saying
[05:46:43] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[05:46:55] <Julius__> phogg, I know, but you didnt meantion that. So where are my millions?
[05:46:57] <cocoding> time of individual programmig is gone
[05:47:28] <Julius__> cocoding, no wonder modern products are all just mediocre
[05:47:29] <cocoding> individual should be responsible for his code and code off all team members
[05:47:31] <phogg> Julius__: given the trajectory of the study of formal verification it *ought to* have gotten to the point of doing something useful by around then, but it didn't. I don't know much about it, but I suspect that means that it can't.
[05:47:52] <Jabberwack> now the time of cukoding is here
[05:48:01] <Julius__> phogg, I wouldnt say that
[05:48:05] <phogg> Julius__: you must earn them in the real world by providing a checker program that will tell the manager which programmers on his staff are writing good code. License it at a high fee.
[05:48:18] <cocoding> individual should be responsible for his code and code off all team members
[05:48:32] <cocoding> in samsung done for ages
[05:48:39] <Julius__> phogg, dude, if I could do that efficiently, we wouldnt need programmers or managers anymore
[05:48:43] <cocoding> no one goes home untill team finished
[05:48:50] <cocoding> managers are very imporant
[05:48:51] <phogg> cocoding: The individual ought to do a lot of things, but he often doesn't (and it's hard to make him). Perhaps I can interest you in the writings of Karl Marx?
[05:48:59] <webnet4> how can you  verify non-deterministicmachines
[05:49:08] <cocoding> fire and hire mechanism phogg
[05:49:11] <phogg> Julius__: Yes! *And* you would be rich!
[05:49:16] <cocoding> refusal to work - fire
[05:49:21] <Julius__> webnet4, non-deterministic machines do not exist
[05:49:32] <phogg> cocoding: oh, they'd never *refuse* to work. That would be too easy.
[05:49:36] <Julius__> phogg, just hand over my money
[05:49:42] <cocoding> programming as a conveyor assembly
[05:49:43] <webnet4> thats not what you  said earlier
[05:49:59] <cocoding> managers also could control speed
[05:50:00] <Julius__> webnet4, me?
[05:50:13] <phogg> cocoding: there are far less detectable passive-aggressive ways of not doing much that still looks like work
[05:50:17] <webnet4> the non-deterministic coffee machine
[05:50:22] <cocoding> phogg such as
[05:50:25] <Julius__> webnet4, that wasn't me
[05:50:36] <Julius__> I hate coffee
[05:50:37] <oldlaptop> phogg: As long as the bosses pretend to pay us...
[05:50:41] *** Quits: V (~v@anomalous.eu) (Remote host closed the connection)
[05:51:22] <phogg> cocoding: write something that works in 8 hours that could reasonably have been expected to take 8 minutes.
[05:51:45] <cocoding> phogg that is why in cocoding tasks have time limits
[05:51:47] <phogg> cocoding: write something that doesn't work in one hour and then wait for the review to point out some flaws so you can spend an hour fixing each of them
[05:51:54] <Julius__> phogg, that seems to be the standard for most people
[05:52:04] *** Quits: webnet4 (~0x100@32.211.211.39) (Remote host closed the connection)
[05:52:09] <phogg> cocoding: if you can do this several times and reintroduce the problems you previously removed after the third round
[05:52:17] *** Joins: webnet4 (~0x100@32.211.211.39)
[05:52:23] <Julius__> print("How do I learn to code?")
[05:52:40] <cocoding> jack welsh said promote A keep B and fire C, simple xd
[05:52:56] <phogg> cocoding: pretty much everything here: https://www.doc.ic.ac.uk/~susan/475/unmain.html
[05:52:59] <bayaz> Title: How To Write Unmaintainable Code 
[05:53:02] <cocoding> we can use windows for example
[05:53:12] <cocoding> if we were to make it from scratch
[05:53:13] <Jabberwack> sounds like software startup sim city simulator 
[05:53:19] <cocoding> new os task
[05:53:21] <phogg> there are many other examples, of course. If you've been involved in programming teams of any size you can likely think of a few
[05:53:28] <Julius__> Homer Simpson said: "Give up if it doesn't work on the first try."
[05:53:38] *** Quits: Twipply (~Twipply@user/twipply) (Quit: Leaving)
[05:53:48] <Jabberwack> you tried, and failed horribly, so the lesson is... never try
[05:53:51] <Julius__> cocoding, but I am using Windows !?
[05:54:05] <Julius__> Jabberwack, that is taoism I think
[05:54:09] <phogg> ah, here's a more complete reference: https://www.doc.ic.ac.uk/~susan/475/unmain.html
[05:54:10] <bayaz> Title: How To Write Unmaintainable Code 
[05:54:17] *** Quits: whatsupdoc (uid509081@id-509081.stonehaven.irccloud.com) (Quit: Connection closed for inactivity)
[05:54:25] <cocoding> new OS order received, team commonly decides upon software architecture
[05:54:32] <cocoding> then tasks are allocated
[05:54:34] <Jabberwack> maybe zen, not sure tho about those quasi religions
[05:54:37] <cocoding> co coding starts
[05:54:38] <Jabberwack> they all share similarities
[05:54:50] <phogg> cocoding: who does the allocation?
[05:55:01] <Julius__> Jabberwack, not sure what the difference is between religions and quasi religions
[05:55:04] <oldlaptop> phogg: aren't those the same link?
[05:55:20] <Jabberwack> one of my strategies is to write unreadable code to make it harder for hackers to decipher
[05:55:21] <cocoding> tasks can be allocated randomly
[05:55:25] <oldlaptop> not that there's anything wrong with the excellent reference material it points to
[05:55:29] <Julius__> I am still questioning if cocoding is for real or not
[05:55:32] <phogg> oldlaptop: so they are. Let me have a word with the X clipboard buffer, one moment please.
[05:55:35] <cocoding> to ensure 0 favoritism 
[05:55:45] <phogg> oldlaptop: there you go https://github.com/Droogans/unmaintainable-code (thanks for pointing it out)
[05:55:47] <bayaz> Title: GitHub - Droogans/unmaintainable-code: A more maintainable, easier to share version of the infamous http://mindprod.com/jgloss/unmain.html 
[05:55:48] <Julius__> Jabberwack, since when are hackers seeing code?
[05:55:48] <oldlaptop> ah, that old miscreant
[05:55:51] <cocoding> once tasks are defined they are randomly allocated
[05:56:10] <phogg> cocoding: LOL.
[05:56:24] <phogg> I have some career advice: quit your day job, becoming a stand up comic. This is good material.
[05:56:26] <Jabberwack> i guess i mean ppl who have your software, that you distributed
[05:56:37] <Jabberwack> and trying to reverse engineer its sweet sweet secrets
[05:56:48] <Julius__> Jabberwack, like coworkers?
[05:57:04] <Jabberwack> unless you have no coworkers
[05:57:16] <Jabberwack> one man coding team, i co-code myself
[05:57:17] <Julius__> Jabberwack, what about yourself in a year?
[05:57:46] <cocoding> if despite team dynamic resource re allocation progress is slower than expected - system automatically adds required extra coders
[05:57:55] <cocoding> there is a budget cap too
[05:57:56] <oldlaptop> Jabberwack: The only way to co-code
[05:58:01] <InPhase> cocoding: Have you actually programmed any large projects and then brought new people into those projects?
[05:58:08] <cocoding> my friend did
[05:58:09] <webnet4> wtf a budget!? why!!?
[05:58:16] <InPhase> cocoding: But you haven't yet?
[05:58:26] <cocoding> well about to start
[05:58:31] <cocoding> with co coding help
[05:58:47] <cocoding> i want my friend to try it too
[05:58:54] <InPhase> cocoding: Many of these things you are advocating fly in the face of the experiences of most people who have done that sort of thing already.
[05:58:54] <cocoding> in his company on a small scale
[05:59:13] <Jabberwack> we call this talking and no action
[05:59:19] <cocoding> InPhase well what went wrong
[05:59:30] <Jabberwack> in this country only results matter, go do something with your idea and show ppl
[05:59:45] <cocoding> yes doing is a key 
[05:59:54] <InPhase> cocoding: Programming on anything other than trivial repetitive code, is a task built around accumulated specific expertise.  When you bring people onboard a new project, you need to onboard them into the codebase, and get them familiar with the details of it.
[05:59:54] <Julius__> I hate doing
[06:00:29] <cocoding>  accumulated specific expertise replace  that with required stack
[06:00:31] <Julius__> Jabberwack, what do you code?
[06:00:33] <cocoding> standadize 
[06:00:40] <cocoding> standardize
[06:00:59] <InPhase> cocoding: So you're planning to do cookie-cutter code doing nothing outside of a standard framework?
[06:01:12] <cocoding>  onboard them into the codebase - minimize onboarding time via proper code architecture
[06:01:18] <Jabberwack> im working on my own project, details are private
[06:01:43] <Julius__> Jabberwack, wow, how secretive. I bet you work for the CIA
[06:01:52] <InPhase> cocoding: I take it then that what you are planning will be a web development project doing formulaic sites following a web framework?
[06:02:12] <Jabberwack> never show your work until you are finished, simple rule
[06:02:15] <cocoding> this system can be applied to any software development 
[06:02:20] <InPhase> cocoding: It really can't.
[06:02:23] <cocoding> be it automotive, etc
[06:02:28] <cocoding> InPhase cause?
[06:02:29] <InPhase> cocoding: Most programming does not look anything like that.
[06:02:35] <Julius__> Jabberwack, what if I dont make any progress since 3 years?
[06:03:13] <cocoding> InPhase I did run some smaller projects and it does work, you just have to tell people clearly who is doing what
[06:03:20] <Jabberwack> keep working at it until you are done or your original vision/idea is no longer valid
[06:03:34] <cocoding> software production is same as manufacturing
[06:03:44] <Julius__> Jabberwack, what if I cant do it?
[06:03:58] *** Joins: V (~v@anomalous.eu)
[06:04:11] <webnet4> nooooo
[06:04:13] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.2)
[06:04:16] <Jabberwack> what changed since you started?
[06:04:27] <Julius__> Jabberwack, nothing
[06:05:03] <Jabberwack> so you started something based on a belief or motivation, and if that didnt change you should be able to continue
[06:05:10] <webnet4> shipping costs are amounting to fractions of fractions of pennies
[06:05:16] <webnet4> for software
[06:05:22] <Julius__> Jabberwack, what if it is too hard?
[06:05:28] <Jabberwack> people ship software?
[06:05:38] <InPhase> cocoding: The project I'm working on at work involves a multi-threaded message-passing event-based architecture C++ program doing EEG acquisition and machine-learning based responses to brain signals triggering electrical stimulation, in network synchronization with a C# 3D spatial memory video game written in Unity.  You grab someone from the web framework team, put them onto my project, and expect 
[06:05:44] <InPhase> them to be onboard and working productively on this cocoding process in what time frame?
[06:06:09] <cocoding> i was reading a bit here
[06:06:13] <Jabberwack> watch a youtube video on whatever it is and copy them like a chimpanzeee
[06:06:18] <Jabberwack> thats what i do
[06:06:20] *** Quits: RenAdjest (~RenAdjest@user/renadjest) (Ping timeout: 245 seconds)
[06:06:22] <cocoding> from wikipedia In an online survey of pair programmers from 2000, 96% of programmers stated that they enjoyed work more while pair programming than programming alone. Furthermore, 95% said that they were more confident in their work when they pair programmed.[5]
[06:06:28] <webnet4> yeah you ship with either a 1 or a 0, sampled over the wire
[06:06:45] <webnet4> there are practically no materials costs for sofware
[06:06:56] <InPhase> cocoding: Did they survey how many people quit when pair programming started?  ;)
[06:07:08] <cocoding> , 96% of programmers stated that they enjoyed work more
[06:07:13] <cocoding> 4% did not enjoy
[06:07:14] <Julius__> Jabberwack, how can you watch youtube videos about things that do not exist yet?
[06:07:27] *** Joins: kedamono_ (~kedamono@67.sub-174-251-210.myvzw.com)
[06:07:40] *** Quits: kedamono (~kedamono@67.sub-174-251-210.myvzw.com) (Ping timeout: 272 seconds)
[06:07:44] <oldlaptop> InPhase: They weren't team players anyway!
[06:07:44] <Jabberwack> easy, you watch a tick tock video to find the latest and newest trends
[06:07:51] <InPhase> cocoding: I pair program at times for specific problems.  It is great for tricky bugs, and great for mentoring.  It is not a net positive in productivity overall however.
[06:08:04] <Julius__> Jabberwack, lol. Somehow that doesnt help me
[06:08:19] <Jabberwack> i cant tell if you are being serious or not so thats the best answer
[06:08:24] *** Joins: MDP87900 (~MDP87900@189.34.140.159)
[06:08:26] *** Joins: mcspud- (~mcspud@66.55.76.204)
[06:08:46] <Julius__> Jabberwack, I am serious. Do you think there are things that are too hard for anyone to code?
[06:09:25] <InPhase> Julius__: GAI, so far.
[06:09:38] <Jabberwack> i doubt it, the problem is that coders cant just have coding knowledge, they need to have knowledge in other fields
[06:09:40] <Julius__> InPhase, who is GAI ?
[06:09:48] <InPhase> Julius__: Generalized Artificial Intelligence.  :)
[06:09:48] <cocoding>  EEG acquisition and machine-learning based responses to brain signals triggering electrical stimulation, in network synchronization with a C# 3D spatial memory video game written in Unity - well it depends on how it is approached
[06:10:25] <Julius__> InPhase, maybe that's just a matter of computation speed
[06:10:41] <cocoding> ease on onboarding depends on simplicity of intended software architecture
[06:10:47] <Julius__> Jabberwack, then why are there things no one was able to code so far?
[06:10:50] <Jabberwack> did you spend the entire 3 years coding your project or did you have a job on the side?
[06:10:57] *** Quits: CrypticSquared (~CrypticS_@user/crypticsquared) (Read error: Connection reset by peer)
[06:11:08] <[itchyjunk]> AGI?
[06:11:18] <Jabberwack> well buddy, my opinion is they have to earn a living by doing boring software stuff and cant focus all their time and energy on what they want to achieve
[06:11:21] <cocoding> there can be an overall skeleton with flexible how to implement parts
[06:11:21] <Julius__> Jabberwack, I also played videogames, slept, ate, ...
[06:11:24] <Jabberwack> just my opinion tho
[06:11:35] <cocoding> as far as hand is a hand it works
[06:11:44] <cocoding> some code hand, some code leg
[06:11:53] <Julius__> Jabberwack, what if focusing all their time and energy is not enough?
[06:12:26] <Jabberwack> did you try it yet?>
[06:12:32] <Julius__> Jabberwack, since 3 years
[06:12:44] <Julius__> Jabberwack, and it's just a few pages of code
[06:12:46] <InPhase> cocoding: What is your estimate of the fastest someone can be onboarded to such a project?  Assume around 35k lines of total code in the two parts.
[06:12:55] *** Joins: CrypticSquared (~CrypticS_@user/crypticsquared)
[06:13:12] <Jabberwack>  what are you stuck on, an conceptual problem not related to coding or a coding problem
[06:13:30] <Julius__> Jabberwack, what is a coding problem?
[06:13:58] <Julius__> Jabberwack, I am mostly stuck on my brain not being capable enough I think
[06:14:07] <Jabberwack> if you dont know how to make the program do what you want it to do
[06:14:13] <Jabberwack> coding problem
[06:14:32] <Julius__> Jabberwack, the program always does what you tell it
[06:14:33] *** Quits: zaher_ (~zaher@37.48.178.128) (Ping timeout: 268 seconds)
[06:14:35] *** Quits: gitgood (~gitgood@80-44-12-89.dynamic.dsl.as9105.com) (Read error: Connection reset by peer)
[06:15:05] <Julius__> Almost always. I've had a case where it did something else, and a reboot solved the problem
[06:15:49] <Jabberwack> next time try putting it in a microwave
[06:16:13] <Julius__> Jabberwack, what if you fell that it's probably doable, but you lack the concentration to do it, no matter how hard you focus?
[06:16:28] <Julius__> I dont have a microwave
[06:16:36] <Julius__> *feel
[06:16:50] <Jabberwack> well first i would make sure you dont have ADD
[06:16:53] *** Joins: jjm (~Guest2@c-71-192-137-216.hsd1.nh.comcast.net)
[06:16:59] <Julius__> I dont
[06:17:16] <Jabberwack> and then i would delete your hard drive of games and porn 
[06:17:31] <Jabberwack> and then i would disable your internet and wifi
[06:17:32] <Julius__> There is no porn on my hard drive
[06:17:37] <Jabberwack> and then make you code 18 hrs a day
[06:17:44] <Julius__> Code what?
[06:18:00] <webnet4> the solution!
[06:18:04] <Jabberwack> then go dl some and then delete it
[06:18:09] <Julius__> How do I know the solution?
[06:18:39] <Julius__> :(
[06:18:47] <Julius__> It's that hard :(
[06:18:53] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.2)
[06:18:57] <Jabberwack> you know its easier just to get some welfare handouts from the government at this point
[06:19:09] <Julius__> I dont want to
[06:19:11] <Jabberwack> i think they wont care about the coding part
[06:19:22] <webnet4> depends where you live
[06:19:29] <Julius__> I could have gotten welfare since years
[06:19:52] <Jabberwack> im gonna guess hes eastern european so maybe welfare there means hard labor camp
[06:20:05] <Julius__> Germany, as I said before
[06:20:12] <Jabberwack> damn, close
[06:20:26] <Jabberwack> pretty sure germany has great welfare
[06:20:37] <Julius__> I dont want it
[06:20:50] *** Quits: xff0x (~xff0x@2001:1a81:52b4:6700:e48a:7334:5a0f:61a4) (Ping timeout: 252 seconds)
[06:20:51] <Jabberwack> good for you, then go and code your heart out!
[06:21:01] <Julius__> I dont know how :/
[06:21:02] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 272 seconds)
[06:21:04] <Jacobis9000> man python is just confusing
[06:21:12] <Julius__> I can concentrate. Thinking is that hard
[06:21:25] <Julius__> Jacobis9000, then dont use python
[06:21:34] <Julius__> *can't
[06:21:52] *** Quits: gggp_ (~gggp@114.243.61.163) (Remote host closed the connection)
[06:22:01] <Julius__> Jabberwack, have you ever had something where you felt that your brain is lacking computational power?
[06:22:17] *** Joins: gggp_ (~gggp@114.243.61.163)
[06:22:17] <Jacobis9000> how do I just return a dictionary key instead of its value?
[06:22:27] *** Quits: jjm (~Guest2@c-71-192-137-216.hsd1.nh.comcast.net) (Changing host)
[06:22:27] *** Joins: jjm (~Guest2@user/jjm)
[06:22:29] <Jacobis9000> if value == something return key
[06:22:35] <Julius__> Jacobis9000, ask Google
[06:22:41] <Jacobis9000> it hasn't helped
[06:22:49] *** Joins: xff0x (~xff0x@2001:1a81:52ed:2b00:c854:bd3b:6fb8:2f1e)
[06:22:55] <Julius__> Jacobis9000, what is a directional key and what is it's value?
[06:23:05] <Jabberwack> ask duck google will just steal your information and ideas
[06:23:07] <Julius__> *its
[06:23:24] <Jacobis9000> its value is 3 and the key is an integer
[06:23:32] <Julius__> Jabberwack, duck duck go or google?
[06:23:45] <Jabberwack> just duck 
[06:23:47] <cocoding> back 
[06:23:51] <Julius__> Jacobis9000, I dont know what you are talking about
[06:24:03] <Julius__> Jabberwack, I dont talk to ducks
[06:24:08] <Julius__> wb cocoding 
[06:24:17] <cocoding> phogg it depends if team is intentionally making themselves less replaceable 
[06:24:35] <cocoding> and on who drives the code artitecture
[06:24:35] <Jacobis9000> I have a dictionary of key value pairs. On a given if condition, precisely, if value % 2 != 0, then I want the function to return the key which has that value
[06:24:38] <Julius__> Jabberwack, have you ever worked on a really hard problem by yourself?
[06:25:11] <cocoding> i guess one way to find out is to invite me to join your company phogg 
[06:25:36] <Jabberwack> so everything you said was a scheme to get hired for a job?
[06:25:46] <InPhase> Jacobis9000: Language?
[06:25:49] <Julius__> Jacobis9000, you could just iterate over all key,value pairs and find the right one
[06:25:57] <Julius__> Jabberwack, what?
[06:26:09] <Jabberwack> read the line above me
[06:26:32] <Julius__> Jabberwack, ok. Will you answer my previous question?
[06:26:32] <cocoding> code architecture while agreed with a team can be managed by project managers
[06:26:43] <cocoding> it depends on so many factors
[06:26:47] <Jacobis9000> python
[06:26:55] <Jacobis9000> I don't know how to get it to return the key, not the value
[06:26:57] <InPhase> cocoding: You still keep dodging my question about how long you think the onboarding will take.  You do realize this is very important to the viability of the co-coding method you are advocating, right?  The question needs addressed.
[06:27:17] <Julius__> Jacobis9000, so your problem is that you just want to return the first entry of a tuble?
[06:27:18] <InPhase> Jacobis9000: for k,v in d.items(): if (v ... something): return k
[06:27:18] <Jabberwack> no need for onboarding, just waterboard the insubordinate programmers
[06:27:39] <cocoding> let's not get confused
[06:28:02] <cocoding> co coding improves detection of bad actors
[06:28:06] <Julius__> InPhase, you seem wise. How do I solve a problem that can't be divided into smaller sub-problems, or at least no one knows how?
[06:28:06] <InPhase> Jacobis9000: If you want to return all valid keys, then a similar logic with a return of a list comprehension with an if filter.  Let me know if that's what you want and you don't know what those words mean.
[06:28:15] <cocoding> and can be used during interviews
[06:28:40] <Jacobis9000> what exactly are you doing with k,v?
[06:28:47] <Jacobis9000> two variables in one for loop??
[06:29:00] <Jacobis9000> I need to sleep, I guess I'll give up on this kata
[06:29:14] <InPhase> Julius__: You either figure out how to break it into smaller sub-problems by spending time brain storming about the fundamental aspects of the problem, or you forget about trying to break it down and just hack away at it as a giant problem one piece at a time.
[06:29:22] <cocoding> yes
[06:29:30] <cocoding> simply start doing
[06:29:30] <InPhase> Julius__: Sometimes you can't climb a mountain in sub-problems, and you just need to keep walking.
[06:29:39] *** mcspud- is now known as mcspud
[06:29:39] <cocoding> correct
[06:29:43] <InPhase> Or, you know, pulling a piece at a time.
[06:29:53] <cocoding> plus that is when co coding helps
[06:29:57] <Julius__> InPhase, I cant do it in one piece since I dont know how, and I cant think clearly enough to break it down. Thinking is that hard
[06:30:01] <cocoding> quickly add more inputs
[06:30:11] <cocoding> if you dont know how you are fired
[06:30:19] <oldlaptop> Jacobis9000: It may be worth rethinking your approach if you think accessing a dict by value is the right thing to do. It looks awkward because it is; Python's dicts (and similar concepts in other languages) are designed to very quickly give you the value associated with a key, but not the other way around.
[06:30:23] <cocoding> and replaced with some who know
[06:30:28] <Julius__> InPhase, what if there are no pieces?
[06:30:49] <cocoding> jul more nonsense
[06:30:51] *** Joins: brabrax_ (~brabrax@user/brabrax)
[06:31:02] <cocoding> InPhase approach is correct
[06:31:08] <InPhase> Julius__: If you definitively cannot do it, then this is not a problem for you to solve now.  I've encountered many problems I want to solve that are out of my grasp, and no human knows how to solve.  If you're committed to solving one of those problems, move only in that direction, and build up your experience base in the general area.  Work on related problems, or problems with related skills that 
[06:31:10] <Julius__> cocoding, ?
[06:31:14] <InPhase> are applicable to it.
[06:31:20] <Jabberwack> what if there is only OnePiece and no piece's'
[06:31:33] <Julius__> InPhase, that is my problem. No one else knows
[06:31:39] <Jacobis9000> I will try it with the function returning the value and see if that passes the tests of the kata
[06:31:42] <cocoding> InPhase why would your company give you a task no human can solve...
[06:31:44] <cocoding> makes 0 sense
[06:31:49] <Jacobis9000> I don't even know what the kata is asking for, it is unclear
[06:32:03] <cocoding> usually tasks allocated are codeable
[06:32:08] <[itchyjunk]> Image recognition was a task no one could solve for good 40 years
[06:32:12] <cocoding> just co code get paid have fun
[06:32:13] <InPhase> Julius__: This is true for a lot of really important things.  All you can do is work on becoming an expert in that area, and try to move yourself and the field closer to what it takes to solve it.
[06:32:14] <[itchyjunk]> but 100's of people had that as their job
[06:32:29] <cocoding> itch then they performed as per requirement
[06:32:34] <Julius__> InPhase, I somehow managed to find a solution to a special case of my general problem, but I even find it hard to understand my own solution each time I look at it
[06:32:45] <Jabberwack> pretty sure china did the image recognition thing already
[06:32:57] <[itchyjunk]> everyone did.
[06:33:08] <[itchyjunk]> AlexNet in 2012 was considered a "solved" solution
[06:33:13] *** Quits: brabrax (~brabrax@user/brabrax) (Ping timeout: 248 seconds)
[06:33:13] *** brabrax_ is now known as brabrax
[06:33:13] <InPhase> cocoding: I'm a scientist.  I encounter problems all the time that no one has ever solved, as that's what research is all about.  I also encounter and discover problems that would be nice to solve, but which have so many dependent unknowns that they are not yet able to be even approached.
[06:33:23] <[itchyjunk]> But they had handwriting recognition back in 93 in banks
[06:33:46] <Julius__> InPhase, what type of scientist are you?
[06:33:53] <[itchyjunk]> physicists i think
[06:33:58] <cocoding> as to phogg people have to be onboarded yes and they can onboarded fast
[06:33:59] <[itchyjunk]> maybe doing biology these days?
[06:34:02] *** Quits: CodeMouse92 (~CodeMouse@user/codemouse92) (Ping timeout: 252 seconds)
[06:34:05] <Jacobis9000> yeah I can't solve this
[06:34:06] <cocoding> using os dev as example
[06:34:22] <cocoding> they can be assigned to some specific interfaces group
[06:34:35] *** Quits: snake (~snake@user/snake) (Quit: Leaving)
[06:34:36] <InPhase> Julius__: I'm a physics PhD who used to do microscopy method development, and is now working on the psychology and neuroscience of memory.
[06:34:50] <Jacobis9000> I was enjoying coding in C earlier
[06:35:01] <InPhase> Julius__: Me:  https://rcolyer.net/cv.php
[06:35:05] <bayaz> Title: Ryan A. Colyer - C.V. 
[06:35:06] <Julius__> InPhase, and what problem did you work on that no one else was able to solve with regards to coding?
[06:35:15] *** Quits: kedamono_ (~kedamono@67.sub-174-251-210.myvzw.com) (Quit: cya l8r!)
[06:35:19] <cocoding> yes ty back to coding xd
[06:35:47] <cocoding> i feel InPhase is a good at logic
[06:35:51] <cocoding> and may enjoy co coding
[06:36:06] <cocoding> its a matter of having little ego
[06:36:07] <Jabberwack> i think everyone enjoys cocoding at this point
[06:36:20] <Julius__> InPhase, impressive.   :(
[06:36:29] <Jabberwack> you are truely the shining example of the programming community
[06:36:54] <Julius__> Jabberwack, I still dont know if cocoding is for real or making this stuff up
[06:37:07] <Jabberwack> i dont know anything anymore
[06:37:11] <InPhase> Julius__: Well, for example, for my thesis I needed to be able to estimate the uncertainty of photon counting data that had been Fourier transformed based on their arrival times.  It turns out no one had ever solved this problem before.  The math didn't exist.
[06:37:18] <Jacobis9000> so here is what I am trying to do: there is an array of integers, I have to find the integer that appears an odd number of times. It is easy to do and just return the number of times the integer appears, but how do I get it to return the actual integer that appears an odd number of times? Obviously a dict of integer:value pairs is incorrect approach
[06:37:30] <Jabberwack> i whimper at your collective wisdoms and might
[06:37:54] <Julius__> InPhase, sounds interesting, although I have no clue about it
[06:38:12] <Julius__> InPhase, are you a professor now?
[06:38:16] <cocoding> photons are fun
[06:38:24] <Jacobis9000> ah bollocks to it
[06:38:24] <InPhase> Julius__: I was, then I resigned so I could focus more on research.
[06:38:28] <cocoding> mechanical data carriers 
[06:38:32] <[itchyjunk]> Jacobis9000, use pairs? (int, no of time they appear)
[06:38:36] <[itchyjunk]> and return pair?
[06:38:38] <[itchyjunk]> wild guess
[06:38:45] <Julius__> InPhase, at a company?
[06:38:48] <Jacobis9000> what are pairs?
[06:38:55] <cocoding> a lot depends on data interpretation by mind
[06:38:58] <Jacobis9000> I have to return just the integer, not the value
[06:39:02] <InPhase> Julius__: In a lab.
[06:39:11] <Julius__> InPhase, at a university?
[06:39:17] <cocoding> uncertainty of photon counting data  - degree of uncertainty? xd
[06:39:20] <InPhase> Julius__: It's on the CV.  :)
[06:39:23] <Jabberwack> a lab in wuhan duh
[06:39:36] <Julius__> InPhase, I was too tired to read everything :(
[06:39:57] <oldlaptop> Jacobis9000: Iterating over the whole dict once at the end probably is fine, then.
[06:39:57] <InPhase> Julius__: But yeah, I'm at UPenn now.
[06:40:01] <cocoding> Jabberwack imagine global foss co coding platform 
[06:40:14] <Julius__> InPhase, so you get paid I guess. Lucky you
[06:40:29] <Jabberwack> as long as i can co-code in my underwear, ill take whatever youre selling
[06:40:37] <cocoding> yes you can
[06:40:39] <InPhase> Julius__: Getting paid is an important part of employment.
[06:40:50] <Julius__> InPhase, I'm not employed
[06:40:55] <Jabberwack> sold
[06:41:14] <InPhase> Julius__: Do you have a degree?
[06:41:16] <Jabberwack> i wholeheartedly agree to join your cult
[06:41:17] <Julius__> InPhase, I doubt anyone would pay me for not making any progress since 3 years
[06:41:22] <Julius__> InPhase, yes
[06:41:33] <Jacobis9000> oh LOL
[06:41:35] <Julius__> Damn, I'm depressed :(
[06:41:37] <InPhase> Julius__: In which subject?
[06:41:45] <Julius__> InPhase, computer science
[06:42:00] <Jacobis9000> it was this: for key, value in counts.items(): if value % 2 != 0: return(key)
[06:42:04] <arahael> Julius__: In which country?
[06:42:06] <Jabberwack> you need a physics phd to go along with that cs 
[06:42:12] <Jacobis9000> how the hell does python know that value is the value and key is the key
[06:42:13] <Jabberwack> then you can code like the masters
[06:42:14] <InPhase> Julius__: That's typically pretty employable.  Were you looking?  Or did you just try to focus on this project that isn't working out?
[06:42:15] <Julius__> arahael, Germany
[06:42:18] <Jacobis9000> this language is a total mystery to me
[06:42:21] *** Joins: mhmd (~mhmd@37.48.90.208)
[06:42:52] <Julius__> InPhase, I did not apply for anything, no. So I think it's pretty logical that I don't have a job
[06:42:55] <arahael> Julius__: I would expect you to be able to find a job, somewhere, but quite possibly not in your immediate local neighbourhood.
[06:43:02] <InPhase> Julius__: That sounds self-fulfilling.
[06:43:05] <arahael> Heh.
[06:43:09] <oldlaptop> Jacobis9000: You may find it enlightening to try something like `list(your_dict.items()) at the console.
[06:43:16] <Julius__> InPhase, yes, I focused on that project. And I'm lazy as fuck
[06:43:17] <oldlaptop> (erm, without the stray `)
[06:44:02] <Julius__> InPhase, maybe I should try some drugs to be able to think
[06:44:25] <Jabberwack> let me know what those are cuz they sound pretty useful, asking for a friend
[06:44:38] <arahael> Julius__: I recommend the use of dihydrogen oxide as your preferred chemical.
[06:44:41] <cocoding> Jabberwack while InPhase may or may not be a master coder - imagine 1 guy who builds houses fast and have to build 10 houses and 100 guys who build slower however each is allocated to his strongest skill point and they act as one - co coding
[06:44:42] <Julius__> I love this "asking for a friend"
[06:44:47] <Jacobis9000> I'm sorry oldlaptop but I don't see how typing that into my terminal is going to do anything? is that what you mean by console?
[06:44:55] <oldlaptop> The Python console.
[06:45:05] <Jacobis9000> what is that?
[06:45:12] <oldlaptop> Oh dear.
[06:45:14] <Jabberwack> dude you dont need to oversell something to someone who already bought it 
[06:45:14] <Julius__> arahael, next you say crazy things like I should use soap as well
[06:45:23] <cocoding> also problem of laziness is solved as team members force each other do code lol
[06:45:37] <arahael> Julius__: That would indeed be crazy, I don't think soap has any impact on mental performance. ;)
[06:45:38] *** Joins: CodeMouse92 (~CodeMouse@user/codemouse92)
[06:45:45] <cocoding> once results are team results, there is a team spirit
[06:45:48] <Jabberwack> soap is bad for your skin, who needs it
[06:45:48] <InPhase> Julius__: You haven't described the details of the project that I saw.  But from your description it sounds like you simply bit off more than you can chew.  If it is a genuinely novel area like you're describing, then understand it takes a while to learn how to even structure a research project into a new area like that.  When people enroll in a PhD, they usually don't even have a clear idea how to 
[06:45:49] <Julius__> arahael, no, but on hygiene
[06:45:54] <InPhase> structure and organize their own projects in a novel area until about 5 years into the PhD.  That's how long it typically takes to learn that, with direct mentoring on this topic, AFTER a BS degree.
[06:45:59] <oldlaptop> When you start the Python interpreter (generally from a command-line window) without giving it a script file, it presents you with an interactive prompt, at which you can enter Python code, for example, an expression you would like to see evaluated.
[06:46:25] <Julius__> InPhase, ok :/
[06:46:38] <Jacobis9000> does it?
[06:46:43] <Jacobis9000> I didn't know that
[06:46:58] <Jacobis9000> I've only ever used python3 in conjunction with file.py
[06:46:59] <oldlaptop> That would indeed make it a fair bit more difficult to learn Python.
[06:47:04] <InPhase> Julius__: Some people just get lucky sometimes and hit on a good solution easy, so it ends up looking easy if you focus on the rare success stories.  But it's really not on average, even for the set of very smart people.
[06:47:13] <arahael> InPhase: With emphasis on "novel area".  For mundane programming tasks you can get going much, much quicker than that, provided you use appropriate examples and appropriate project structures.
[06:47:23] <InPhase> arahael: Exactly.
[06:47:28] <Jacobis9000> I find python exceedingly difficult
[06:47:34] <Julius__> InPhase, Im probably just as dumb as everyone else who isnt able to solve it
[06:47:45] <Jacobis9000> the people who invented python don't seem to think in the way I think
[06:47:51] <Julius__> Jacobis9000, then dont use python
[06:47:53] <Jacobis9000> I find C easy peasy
[06:47:58] <oldlaptop> It is also possible to pass it some flag (-i, I think?) to cause it to not exit immediately after processing your script file, so you can look around at the environment as it is after your script executes.
[06:48:01] <cocoding> InPhase as a scientist do you agree that most discoveries are made via instant flash?
[06:48:01] <Jacobis9000> I have to learn python I am doing a course
[06:48:10] <Jabberwack> only real men program without IDEs and use notepad
[06:48:27] <cocoding> nothing wrong with notepad
[06:48:33] <Julius__> InPhase, do you think that there are problems what a human mind is simply too dumb to solve?
[06:48:39] <cocoding> ide is more efficient :)
[06:48:39] <InPhase> cocoding: Many important discoveries come as a fast flash of inspiration, yes.  But, this point totally ignores the massive ramp-up to those flashes.
[06:48:45] <Julius__> InPhase, *that
[06:48:56] *** Joins: amigojapan (uid86330@id-86330.brockwell.irccloud.com)
[06:48:59] <cocoding> InPhase its a fact xd
[06:49:12] <arahael> InPhase: I actually suspect Computer Scientists and Data Scientists have a harder time with managing a long-lived software project, due to the differences in background and priorities - the data scientist imho tends to the adhoc approach.
[06:49:17] <InPhase> Julius__: At this point I have no reason to think that there are problems outside of human reach, assuming we can also use tools to help.
[06:49:23] <cocoding> Marie Curie, Tesla
[06:49:23] <Julius__> Actually most solutions don't come in a fast flash and this is very rare
[06:49:38] <Jacobis9000> I will just read the documentation for .items() method tomorrow and try and figure out how that insane for loop works
[06:49:46] <Julius__> InPhase, so far there dont seem to be appropriate tools for thinking
[06:49:58] <cocoding> jul nonsense continues xd
[06:50:06] <arahael> Jabberwack: Lets avoid the gatekeeping/NoTrueScotsMan stuff - I am a software developer, and I use IDE's heavily.
[06:50:11] <InPhase> arahael: There are notable differences in the training of computer scientists and data scientists.  It certainly results in different methodological approaches.
[06:50:12] <Julius__> cocoding, what are you talking about?
[06:50:17] <arahael> InPhase: For sure.
[06:50:21] <Jabberwack> yes everyone knows marie curie was an expert programmer, using her programming skills to discover the theory of evolution
[06:50:24] <oldlaptop> There are plenty of languages with goals similar to Python's that "think" differently which you might be interested in; Ruby, Tcl, and Lua all come to mind (though I'm given to understand the first is relatively similar to python - Lua is pretty different, and Tcl is truly fundamentally different - like lisp and the Unix shell at once)
[06:50:50] <arahael> InPhase: I (briefly) mentored a new Data Scientist who, as it turned out, had not even heard of unit testing frameworks. (She was a first year graduate, mind you).
[06:50:51] <oldlaptop> but of course most of those aren't as... 'commercially important'
[06:51:24] <oldlaptop> (still, plenty of call for lua in commercial game development, or tcl in electrical engineering circles)
[06:51:32] <Jabberwack> new grads are surprisingly lacking in technical and practical experience
[06:51:34] <Julius__> InPhase, each time I think about my problem, my thoughts drift away after a few seconds
[06:51:43] <Jabberwack> even for their level of education
[06:51:46] <InPhase> Julius__: There are actually lots of tools to help with thinking.  You just have to specify the problem, and that can guide the tool.  You can also, as a programmer, create the tools to help you reason about the problems you face.  One thing I learned during my first 5 years of learning how to approach problems is that one way to hack away at something that nobody understands is to start writing 
[06:51:52] <InPhase> code to analyze and simulate your problem, and from that gain more understanding that can point you in the right direction to start working.
[06:52:06] <Jacobis9000> I don't understand what the python inventers were trying to achieve. Like that for loop, it looks like magic, it obfuscates the process. you know where you are with for (int i = 0; i < number; i++)
[06:52:08] <oldlaptop> Jabberwack: Almost as though the universities aren't doing a particularly good job or something
[06:52:20] <Julius__> InPhase, maybe I am not at your level?
[06:52:28] <Jabberwack> i tried to hire a few new grads and none of them could pass phone interview
[06:52:33] <Jacobis9000> anyway nevermind
[06:52:35] <Jacobis9000> night 
[06:52:42] <oldlaptop> Jabberwack: Python `for` is fundamentally different from C `for`, you won't get far without understanding that.
[06:52:42] <Jabberwack> so i gave up
[06:52:48] <arahael> InPhase: Speaking of reasoning, that's probably a major difference.  In software there's two major directions in solving a problem: Business requirements and the Data you have to present.  But for a data scientist, the priority is: "What's the data, in the first place?".
[06:53:01] <CodeMouse92> Jacobis9000: actually, all that IS quite good...
[06:53:03] <InPhase> Jacobis9000: I came from a C/C++/Java modality long before Python, but I've come to appreciate the Python for loop structure.  It is easier to guarantee Python for loops are correct at a glance.
[06:53:04] *** Joins: trace987 (~trace@ip5f5a6a70.dynamic.kabel-deutschland.de)
[06:53:04] <oldlaptop> You may want to read about the idea of "iterables".
[06:53:07] <CodeMouse92> but it definitely needs a different mental model
[06:53:15] <arahael> InPhase: As a software dev, I'd say: "Problem is poorly specified.  Let me know when it's ready" ;)
[06:53:27] <CodeMouse92> Jacobis9000: And it doesn't hide anything. Look up "Loop LIke a Native" by Ned Batchelder. It'll make sense
[06:53:54] <InPhase> arahael: Sometimes your problems are internal, like if you have to understand the performance of various architectural choices.
[06:54:02] <Julius__> Jacobis9000, oldlaptop is right. Get a book on python and read
[06:54:09] <Jacobis9000> I have a book
[06:54:16] <InPhase> arahael: It can require test code to even start reasoning out how to approach evaluating the performance.
[06:54:32] <arahael> InPhase: Sort of, but in practice, the performance rarely honestly matters all that much.  You really do need to stop worrying about it, and learn to profile instead to identify your actual bottlenecks.
[06:54:36] <oldlaptop> CodeMouse92: This? https://nedbatchelder.com/text/iter.html
[06:54:36] <Julius__> Jacobis9000, so you havent read it yet?
[06:54:37] <bayaz> Title: Loop Like A Native 
[06:54:52] <InPhase> arahael: It depends on the task.
[06:55:16] <CodeMouse92> oldlaptop: Yep!!
[06:55:22] <arahael> InPhase: Indeed.  For applications software, it's overrated, imho.  And you can see the industry realising this as they shift to the extreme of "it really doesn't matter, so lets use Electron...".
[06:55:30] *** Joins: mci64 (~x@185.242.190.95)
[06:55:30] <CodeMouse92> Julius__: To be fair, quite a few Python books are actually terrible.
[06:55:38] <arahael> InPhase: And Electron is very tempting - I dislike Electron for various reasons, though.
[06:55:41] <oldlaptop> That seems like a good introduction to the idea of iterables.
[06:55:43] <Julius__> CodeMouse92, I dont know. I dont read books
[06:56:02] <Jabberwack> books are evil and thats why the dictators loved to burn them
[06:56:07] <oldlaptop> arahael: Why wouldn't you want to drag all of Chrome around with everything?
[06:56:10] <Jacobis9000> I think as soon as this course is over I'll learn C# and forget python forever
[06:56:23] <arahael> oldlaptop: From a business case, the tradeoffs are worth it.  Consider how popular VSCode is today.
[06:56:33] <Julius__> arahael, probably this Electron is just too negative for you
[06:56:34] <Jabberwack> yes you go spite that darned python 
[06:56:35] <arahael> oldlaptop: And that's a tool largely used by *developers*.
[06:56:43] <arahael> Julius__: How so?
[06:56:52] <Julius__> arahael, electron, negative, hello?
[06:57:11] <arahael> Julius__: Elaborate, please.
[06:57:20] <Julius__> arahael, it's a physics joke
[06:57:24] <CodeMouse92> Jacobis9000: Hahaha, I wouldn't do that. Based on what you're saying, the course is NOT doing it justice.
[06:57:35] <arahael> Julius__: Ah.  I'm not a physicist :)
[06:57:39] <CodeMouse92> Python written as Python is excellent...
[06:57:49] <CodeMouse92> Python written as something else is terrible, and needs to be burned with fire.
[06:57:50] <Julius__> arahael, electrons have a negative electric charge
[06:58:01] <arahael> Julius__: I realise. :)
[06:58:09] * Julius__ rolls eyes
[06:58:12] <InPhase> Jacobis9000: There are many great languages to choose from!  C# is not really one of them.  I use it when I need it, but it's not one that I really like.
[06:58:18] <oldlaptop> Jacobis9000: It's probably not a good idea to judge Python until you really understand how it's meant to work. (With that said, I don't like the way Python thinks either. That's fine, obviously some people do.)
[06:58:34] <Julius__> InPhase, thanks for your idea about writing stuff down, but I dont know what, or how that could help
[06:58:37] <arahael> C# is nice if you primarily intend to write Microsoft Software, imho, or are in an industry that makes heavy use of .NET
[06:58:42] <Jacobis9000> I can't divine what the creators of python were trying to do
[06:58:51] <CodeMouse92> Jacobis9000: That's the fault of the course.
[06:58:57] *** Quits: cocoding (~Guest73@37.157.32.226) (Quit: Client closed)
[06:59:05] <oldlaptop> Perhaps CodeMouse92 guesses correctly that your book and/or instructors also don't understand Python.
[06:59:14] <InPhase> Julius__: That wasn't write stuff down.  That line carried onto the next as "write code"
[06:59:17] <CodeMouse92> Most of this stuff, once it's explained decently, the response is almost universally, "Oh, well, SURE, why do it any other way??"
[06:59:19] <Jacobis9000> well the instruction for python was minimal
[06:59:26] <Jacobis9000> and we had a lot of instruction on C
[06:59:30] <Jacobis9000> so that is probably part of it
[06:59:33] <Julius__> InPhase, I am working on my code since 3 years
[06:59:41] <CodeMouse92> Jacobis9000: Okay. They're writing C-Style-Python. That is HORRIBLE.
[06:59:44] <Jacobis9000> I'm doing CS50 the harvard intro course
[06:59:58] <CodeMouse92> You cannot just up and use Python like a statically typed language with C paradigms. It was never meant to work like that.
[07:00:06] <InPhase> Julius__: Code to solve the problem?  Or code to examine aspects of the problem?
[07:00:07] <Julius__> InPhase, how old are you?
[07:00:13] <InPhase> Julius__: 41
[07:00:26] <CodeMouse92> Pro tip: As soon as someone says "for i in range(100)" or some such nonsense, ignore literally everything else they have to say about Python.
[07:00:32] <Julius__> InPhase, code to solve the problem or special cases of the general problem
[07:00:39] <Jacobis9000> writing python is like wading through mud to me, whereas writing C is like icing a cake
[07:00:46] <InPhase> CodeMouse92: Hey now.  Numerical loops have their place.
[07:00:48] <arahael> CodeMouse92: I disagree, `for i in range(100)` is perfectly fine.
[07:00:53] <CodeMouse92> (Well, I should qualify, for i in range in the context of looping over an array
[07:00:54] <CodeMouse92> Sorry
[07:00:57] <CodeMouse92> Incomplete thought
[07:00:58] <Julius__> InPhase, do you think a degree helps?
[07:01:01] <CodeMouse92> It's fine for the numbers
[07:01:03] <CodeMouse92> Julius__: It doesn't.
[07:01:10] <oldlaptop> Jacobis9000: Maybe that will get better when/if you understand it better. Maybe not - in which case you can look into other things.
[07:01:11] <Julius__> CodeMouse92, :(
[07:01:13] <InPhase> Julius__: Degrees help a lot, yes.
[07:01:13] <arahael> CodeMouse92: Sometimes you still need a numerical loop even if dealing with an array.
[07:01:18] <CodeMouse92> arahael: Nope. Never.
[07:01:22] <Julius__> InPhase, I mean with my problem
[07:01:30] <InPhase> Julius__: You haven't told me your problem.
[07:01:39] <CodeMouse92> Show me someone who uses a numerical loop with an array, and I'll show you someone who doesn't know itertools
[07:01:52] <Julius__> InPhase, it's an algorithmic problem
[07:01:52] <Jacobis9000> how do I understand it? what were the python people trying to do when they invented it? make a programming language for people who don't like programming, is all I can guess
[07:02:01] *** Quits: mci64 (~x@185.242.190.95) (Ping timeout: 248 seconds)
[07:02:01] <CodeMouse92> Jacobis9000: Nope.
[07:02:08] *** Quits: trace987 (~trace@ip5f5a6a70.dynamic.kabel-deutschland.de) (Ping timeout: 272 seconds)
[07:02:13] <arahael> CodeMouse92: Famously, Guido doesn't actually like itertools.
[07:02:20] <CodeMouse92> Guido van Rossum was implementing some specific patterns that were rare in languages at the time.
[07:02:25] *** Quits: webnet4 (~0x100@32.211.211.39) (Remote host closed the connection)
[07:02:41] *** Joins: webnet4 (~0x100@32.211.211.39)
[07:02:48] *** Parts: Izem (~rcg@bras-base-london1483w-grc-43-65-95-173-5.dsl.bell.ca) ()
[07:02:58] <InPhase> Julius__: But in general do degrees help with solving hard problems notably different from what anyone has ever solved before?  Yes, and the appropriate degree level for that sort of work is typically a PhD.  If you want to hire someone to do something like that, you typically aim to hire a PhD.
[07:03:04] <Julius__> InPhase, maybe I should get a physics PhD as well
[07:03:19] <CodeMouse92> Honestly, I wish my book was out NOW, and I could just hold it up.
[07:03:27] <oldlaptop> CodeMouse92: Honestly, that seems like only a moderately unfair description of the Python Way to me. (But, again, I don't particularly like python.)
[07:03:31] <CodeMouse92> But...meh, it's been pushed back until Spring 2022, so, GAAAH
[07:03:36] <Julius__> InPhase, I dont have money to hire anyone
[07:03:45] <Jacobis9000> I found my degree in the history of philosophy has helped me a lot
[07:03:57] <Jacobis9000> I mean, not with getting an actual job
[07:04:05] <CodeMouse92> oldlaptop: Heh, well, this is coming from someone who spent the better part of three years writing a book covering the entire core language from a "this is WHY we do it this way" perspective....
[07:04:11] <Julius__> InPhase, then why can no phd solve this problem?
[07:04:17] <InPhase> Julius__: I can't tell you if physics is the right subject for the particular problem class since you haven't said it, but physics is a great field for studying quantitative reasoning and the development of new ways to quantitatively relate, model, simulate, and describe things.
[07:04:26] <CodeMouse92> ...and then getting it shred-edited by a horde of extremely pedantic Python experts who spend all their time fielding questions in IRC>
[07:04:43] <InPhase> Julius__: Is anyone even trying?  We don't know what the problem is.
[07:04:47] <Julius__> InPhase, na, I wasnt quite serious. I suck at physics
[07:05:04] <Julius__> InPhase, who is we? I think people tried, yes
[07:05:19] <CodeMouse92> Jacobis9000: There's a lot to be said for degrees being helpful in more ways than resume glitter.
[07:05:30] <Julius__> InPhase, I mean I like cats, but I dont know if that is enough to study physics
[07:05:31] <InPhase> We in the channel.  Maybe you could describe the general area of the problem so that the conversation is less abstract.
[07:05:45] * CodeMouse92 glances meaningfully at his communication courses from college
[07:06:01] <Julius__> InPhase, somehow I doubt that anyone would understand if I discribed to problem to be honest
[07:06:08] <Julius__> *the
[07:06:18] <InPhase> Hard to know until you try.
[07:06:45] <Jacobis9000> well it gave me research and writing skills, teaching skills, the usual stuff, but being able to comprehend complex patterns of thought and conceptual constructs made learning, for example, Buddhist philosophy later in life very easy
[07:06:54] *** Joins: mci64 (~x@185.242.190.95)
[07:07:11] <Jacobis9000> and Buddhist philosophy helped me be a happy person
[07:07:50] <Julius__> InPhase, the problem is called STCON. It's about deciding if you can reach a given node T from a given node S in a given directed graph, but you only have very little working memory you can work with, and a limited amount of time
[07:07:53] <Jacobis9000> Western philosophy is pretty moribund in that regard, except perhaps Stoicism
[07:08:11] <jamea> hi all
[07:08:23] <Julius__> Hi jamea 
[07:08:26] *** Joins: jarthur (~jarthur@cpe-70-114-198-37.austin.res.rr.com)
[07:08:40] <Jacobis9000> but I found Taoist and Buddhist philosophy when put into practice made me happy
[07:08:56] <jamea> Java Question: i have this string: waux='ER, EE, EP' how to convert to: waux='ER', 'EE', 'EP'   ?
[07:09:52] <amigojapan> Jacobis9000: I have been attending a Buddhist temple for meditation lately
[07:09:59] <InPhase> Julius__: It looks to be heavily researched and understood.  What are you trying to do with it?
[07:10:03] <Caffeinated> jamea: ask in #java?
[07:10:06] <Julius__> jamea, yourString.split(", ")[index]
[07:10:07] <Jacobis9000> how are you finding it amigojapan?
[07:10:23] <Julius__> InPhase, it is not solved one bit
[07:11:22] <amigojapan> Jacobis9000: I guess ok. I had a dream that I was in my own funeral in that Buddhist temple and I was happy eventho I was dead
[07:11:37] <Jacobis9000> I am a Christian at heart, though. I find a lot of commonality (but a difference in terms) between the Bible and the Eastern religious texts I've read
[07:11:41] <InPhase> Julius__: What is unsatisfactory about this?  https://en.wikipedia.org/wiki/Savitch%27s_theorem
[07:11:42] <bayaz> Title: Savitch's theorem - Wikipedia 
[07:11:48] *** Quits: mei (~mei@user/mei) (Ping timeout: 258 seconds)
[07:11:56] <Jacobis9000> that is good amigojapan
[07:12:03] <Jacobis9000> meditating on our own death is good for us
[07:12:11] *** Quits: jjm (~Guest2@user/jjm) (Quit: Client closed)
[07:12:16] <Jacobis9000> we have to accept it, because it is the one inevitable fact of life
[07:12:18] <amigojapan> Jacobis9000: I am an agnostic
[07:12:22] <Jacobis9000> and not accept it flippantly
[07:12:34] *** Joins: Izem (~rcg@bras-base-london1483w-grc-43-65-95-173-5.dsl.bell.ca)
[07:12:34] <Jacobis9000> like "I don't care if I die!" kind of way
[07:12:35] <Julius__> InPhase, it runs in exponential time and needs O( (log(n))^2 ) memory
[07:13:26] <Jacobis9000> the existentialists are correct that a lot of anxiety in Western people is really death anxiety
[07:13:35] <amigojapan> Jacobis9000: maybe this is not the best channel to discuss this
[07:13:35] <InPhase> Julius__: Are you trying to prove NL == L?  I guess this is probably less studied than NP =?= P, but it might be equivalently hard/impossible to solve.
[07:13:42] <Jacobis9000> they put death out of mind, pretend death won't or doesn't happen, or will be cured by science or something
[07:13:49] *** Joins: lunarkitty (uid501895@user/pyra)
[07:13:55] <Jacobis9000> ok haha
[07:14:11] <Julius__> InPhase, that would be a nice result, yes, but I think that is too much in one step. A smaller step towards that would be good enough
[07:14:18] *** Quits: mci64 (~x@185.242.190.95) (Quit: Leaving)
[07:14:24] <amigojapan> Jacobis9000: maybe join me in ##philosophy 
[07:14:34] <Jacobis9000> ok I will join that chan
[07:14:37] *** Joins: mci64 (~x@185.242.190.95)
[07:14:38] <Jacobis9000> but I have to go to sleep now
[07:14:45] <Jacobis9000> so maybe see you soon amigojapan
[07:14:53] <amigojapan> Ok good night Jacobis9000 
[07:15:07] <Julius__> InPhase, and yes, it might be impossible. Who knows
[07:15:53] <InPhase> Julius__: Well NP =?= P has been shown to be undecidable within a standard set of mathematical axioms.  Which is a whole separate level of hard.
[07:15:58] <Julius__> InPhase, an algorithm that needs the same amount as Savitch's but only needs polynomial time would be nice
[07:16:29] <Julius__> InPhase, I am not working on a proof but on an algorithm
[07:17:01] <Julius__> *same amount of memory
[07:17:22] <InPhase> Julius__: The general consensus is that NP != P, but that our mathematical framework doesn't permit it.  It might also be that NL != L, but that our mathematical framework is not adequate to prove it.  In that case your task might be literally impossible, except that you can't prove it's impossible.
[07:17:42] <InPhase> s/doesn't permit it/doesn't permit showing it/
[07:18:16] <Julius__> InPhase, I know that my task might be impossible. And I don't agree with the general consensus
[07:18:55] <Jabberwack> schroedinger's algorithm
[07:19:06] <InPhase> Julius__: Do you have a reason to think it can be faster?
[07:20:09] <Julius__> InPhase, just a feeling
[07:20:40] <Julius__> InPhase, do you think there is anything more that I could study that would help with "my" problem?
[07:21:28] <Julius__> Jabberwack, non-determinism can indeed solve this problem faster
[07:21:43] *** Joins: RenAdjest (~RenAdjest@user/renadjest)
[07:21:46] *** Quits: Jacobis9000 (~josephash@host213-122-250-217.range213-122.btcentralplus.com) (Ping timeout: 272 seconds)
[07:21:57] <Jabberwack> i dunno anything about math, listen to inphase
[07:22:42] <Julius__> Jabberwack, mass is ... well, actually there are two different types of mass, even though most people are not aware of that
[07:22:57] <Jabberwack> i would advise in future activities to think your problem and solution as thoroughly as possible before embarking 
[07:23:24] <Julius__> Thinking is really hard
[07:23:43] <Jabberwack> thats why 99% of the people in the world work for a small wage
[07:23:55] <Julius__> True
[07:24:04] <InPhase> Julius__: It seems like it could be solved a lot faster with more storage.  But when you can't even leave breadcrumbs along the path, it appears tricky.
[07:24:38] <Julius__> InPhase, with more storage you can. Even with less, but not as many :D
[07:24:46] <Jabberwack> i am curious, would companies pay for such a solution or technology if you work it out?
[07:25:10] <Julius__> Jabberwack, dont know
[07:25:19] <InPhase> Julius__: Perhaps this class of problem has a quantum algorithm solution with a better runtime.  It has the feel of something that might.
[07:25:40] *** Quits: nekobyte (~based@user/nekobit) (Quit: zzzz)
[07:25:43] <webnet4> why pay, you could start a coding challenges website and expect site users to solve their problems
[07:26:13] <Jabberwack> im more trying to understand why someone spent 3 years to try to do it
[07:26:23] *** Joins: RenAdjest2 (~RenAdjest@user/renadjest)
[07:26:26] <Julius__> InPhase, maybe. It definitely can be solved quicker on a non-deterministic machine since it's NL-complete
[07:26:46] *** Quits: RenAdjest (~RenAdjest@user/renadjest) (Read error: Connection reset by peer)
[07:26:47] <webnet4> to do what
[07:27:05] <Jabberwack> solve the problem they are talking about
[07:27:11] <Julius__> InPhase, L = NL would be one step towards showing that quantum computers are not (at least theoretically) better
[07:27:19] <Jabberwack> something to do with computer theory 
[07:27:36] *** Joins: Yonle (~Yonle@user/yonle)
[07:29:03] *** Joins: whatsupdoc (uid509081@id-509081.stonehaven.irccloud.com)
[07:29:43] <whatsupdoc> Anyone have experience making chrome extensions?
[07:31:21] <whatsupdoc> I added an ""action" in chrome with a "default_popup" of an html page which has a button which runs a script. But the issue I'm running into is that the script never runs when the button is pressed
[07:31:45] <Julius__> InPhase, maybe I should study more?
[07:32:01] <d3x0r> they've been deprecating popups, not sure what kind you're using
[07:32:33] *** Joins: Yonle__ (~Yonle@user/yonle)
[07:32:44] <whatsupdoc> Really? it seems like every chrome extension uses them
[07:33:47] *** Quits: Yonle (~Yonle@user/yonle) (Read error: Connection reset by peer)
[07:33:57] <whatsupdoc> https://i.imgur.com/V1VKFDj_d.webp
[07:33:58] <bayaz> Type: image/webp Size: 3.0 kB 
[07:34:12] <whatsupdoc> https://i.imgur.com/V1VKFDj_d.webp?maxwidth=760&fidelity=grand
[07:34:12] <bayaz> Type: image/webp Size: 31.6 kB 
[07:34:17] <InPhase> Julius__: I'm pretty sure quantum computers are computationally better.  This question is heavily studied, and there are very good reasons to consider it true.
[07:34:33] <Julius__> InPhase, name one reason
[07:34:43] <InPhase> Julius__: More is computed at once?
[07:34:58] <Julius__> InPhase, lol. Is it?
[07:35:23] <InPhase> Julius__: Yes.  Local hidden variable theories were disproven long ago.  :)
[07:35:52] <Julius__> InPhase, I dont think that quantum computers are more than just polynomially better
[07:36:27] <whatsupdoc> I made an HTML menu similar to that. But I want to run a script
[07:36:29] <Julius__> If you have any reason to think differently, please explain
[07:38:01] <InPhase> Julius__: You prepare a superposition of all numbers in a qubit-backed integer.  Then you do this for another integer.  Then you multiply them.  You just multiplied every integer by every integer.  If these were 64-bit integers, you did something that would take 3e38 clock cycles on a classical computer.
[07:38:36] <Julius__> InPhase, what is the result you want?
[07:38:48] <Julius__> I mean the output
[07:38:53] *** RenAdjest2 is now known as RenAdjest
[07:38:56] <InPhase> Julius__: Now you don't get a 3e38 speed-up, because you have to manipulate the results into a form where your desired outcomes have higher probability of being measured.  But this is what the quantum algorithms are all about doing.
[07:39:44] <Julius__> InPhase, so you have two 64 bit integers as input, but what is the output that you want?
[07:42:52] <InPhase> Julius__: Nothing, in that example.  I picked a cartoon example to illustrate that more calculations are done.
[07:43:17] <Julius__> InPhase, do you know any example where you actually now what output you want?
[07:43:25] <Julius__> *know
[07:43:36] *** Joins: wildbill (wildbill@gateway/vpn/protonvpn/wildbill)
[07:43:39] <InPhase> Julius__: We can take the one that started it all:  https://en.wikipedia.org/wiki/Shor%27s_algorithm#Quantum_part:_period-finding_subroutine
[07:43:39] <bayaz> Title: Shor's algorithm - Wikipedia 
[07:43:48] <whatsupdoc> oh i was such an idiot
[07:43:52] <whatsupdoc> the script was running
[07:43:58] <InPhase> Julius__: The critical step is using quantum interference for period-finding.
[07:44:07] <whatsupdoc> i just needed to right click inspect element on my extension
[07:44:28] *** Joins: Codaraxis_ (~Codaraxis@user/codaraxis)
[07:44:36] <Julius__> InPhase, I dont see how Shor's algorithm is a good example. Maybe we can get the same output on a conventional computer in polynomial time as well
[07:45:19] <InPhase> Julius__: We can't, because it cannot do all the computations at once, and thus cannot do the interfering all at once, and thus cannot leap to the faster result.
[07:45:31] <Julius__> InPhase, you can not prove your claim
[07:45:43] <InPhase> Julius__: I mean, Peter Shor already did that part.
[07:45:49] <Julius__> InPhase, no he did not
[07:46:14] <InPhase> Julius__: It should be self-evident that you cannot do N computations at once with 1 classical computing core.
[07:46:20] *** Joins: Jacobis9000 (~josephash@host213-122-250-217.range213-122.btcentralplus.com)
[07:46:36] <Julius__> InPhase, what is N ?
[07:46:41] <InPhase> Julius__: A big number.
[07:46:45] <Julius__> How big?
[07:46:55] <InPhase> Julius__: As big as you want.
[07:47:08] <Julius__> In what relation is N to your input?
[07:47:09] <InPhase> Julius__: They are a different computational class, so there is not a fixed ratio here.
[07:47:32] <Julius__> What is "they" ?
[07:47:50] <InPhase> Quantum and classical computers.  They operate through fundamentally different physical mechanisms.
[07:48:01] <Julius__> How do you know that they are in different classes?
[07:48:04] <Julius__> No one knows that
[07:48:15] <InPhase> Because they can do different numbers of things at once.
[07:48:18] *** Quits: gggp_ (~gggp@114.243.61.163) (Ping timeout: 268 seconds)
[07:48:43] <Julius__> InPhase, there is not a single proof showing that a quantum computer can do anything better than a normal computer
[07:48:46] <InPhase> The quantum computer is literally evaluating the relationships between big piles of numbers.
[07:49:00] *** Quits: Codaraxis (~Codaraxis@user/codaraxis) (Ping timeout: 272 seconds)
[07:49:00] *** Joins: Joanna (uid57472@id-57472.tooting.irccloud.com)
[07:49:35] <Julius__> Your feeling that a quantum computer is better is as good as my feeling that a quantum computer is not better
[07:49:42] <Jabberwack> only a quantum computer could handle the amount of patience inphase has 
[07:50:00] <InPhase> Julius__: Formalizing the proof is trickier, because it runs into some limits of computational theory.  But it's pretty evident from just looking at what the two sets of machines actually do with each step.
[07:50:12] <CoJaBo> I don't want to get entangled in this conversation.
[07:50:26] <InPhase> CoJaBo: It's about to collapse soon anyway when I go to get a snack.  ;)
[07:50:28] <Julius__> InPhase, I dont think it's evident at all, and I think it's completely wrong
[07:51:43] <Julius__> InPhase, I dont see any reason why a normal computer couldnt do things almost as good as a quantum computer
[07:52:03] <InPhase> Julius__: Well, you are free to think it.  But, pretty much everybody who studies this topic seems to agree they are a different computational class.  The only serious rebuttal I've heard against quantum computing's future is the theory that perhaps a fundamental limit not yet discovered will prohibit larger scale entanglements in quantum computers.  But this doesn't seem to be the case so far.
[07:52:51] <Julius__> InPhase, even if they are the same class, that could still mean that a quantum computer is faster in practice once we developed it more
[07:53:12] *** Quits: jamea (~jamea@200.95.170.72) (Ping timeout: 258 seconds)
[07:53:15] <InPhase> Julius__: Do you agree that the quantum computer processes relationships between a whole set of values at once when variables are prepared in a superposition?
[07:53:51] *** Quits: Jacobis9000 (~josephash@host213-122-250-217.range213-122.btcentralplus.com) (Ping timeout: 268 seconds)
[07:54:03] <Julius__> InPhase, no
[07:54:17] <InPhase> Julius__: Well there's your problem.  So why do you think that doesn't happen?
[07:54:34] <Julius__> InPhase, you probably mean something else, namely that is works on a whole set of variable configurations at once
[07:55:50] <Julius__> InPhase, the point is not how good a quantum computer is, but how good a normal computer is. And I think it's way better than we know so far
[07:56:00] <InPhase> Julius__: Do you agree that when you take two variables in superpositions, and do an operation which combines them, that you've established a relationship between the inputs and the outputs of that operation on all the values at once?
[07:56:52] <Julius__> InPhase, not on a quantum computer as far as I know, but on a fully non-deterministic machine, yes
[07:57:09] <Julius__> Not quite sure about the differene to be honest
[07:57:23] <InPhase> Julius__: Well that does happen on a quantum computer, according to quantum mechanics.
[07:57:50] <Julius__> Not sure
[07:57:58] <Julius__> No one knows this stuff yet
[07:58:11] <Julius__> (or at least not the public)
[07:58:15] <InPhase> Which stuff?
[07:58:33] *** Quits: juliaEnv (~juliaEnv@ip-86-49-241-245.net.upcbroadband.cz) (Quit: Going offline, see ya! (www.adiirc.com))
[07:58:55] <Julius__> InPhase, if there is a difference between the computational power of a quantum computer, a non-deterministic turing machine, and/or a normal computer
[07:59:12] <Julius__> Those 3 might or might not be the same
[07:59:18] *** Quits: quartz (~quartz@2603-8001-7700-61a4-0000-0000-0000-0acb.res6.spectrum.com) (Quit: WeeChat 3.2)
[08:02:06] *** Quits: MDP87900 (~MDP87900@189.34.140.159) (Remote host closed the connection)
[08:02:58] <InPhase> Julius__: So the problem is, within quantum mechanics there's this whole set of interactions going on that have been proven to have real world observable effects, but which have no classical explanation or method.  If quantum computing does not end up operating in a higher computational class, then it pretty much throws a wrench into the entirety of quantum mechanics, undermining the theory that 
[08:03:04] <InPhase> describes all these operations.  Whether or not mathematicians can prove this with a computational theory proof is secondary.
[08:03:20] <Julius__> So other than saying that a quantum computer is able to do things (that we might not even need for our final result) faster, I dont see a reason why anyone would think that a quantum comuter is faster
[08:03:37] *** Joins: Nact (~l@host-85-27-122-107.dynamic.voo.be)
[08:04:03] <Julius__> InPhase, I dont think that quantum mechanics is correct to be honest
[08:04:34] <Julius__> And I dont see how a quantum computer not being better would say anything about quantum mechanics
[08:06:01] <InPhase> Julius__: The catch is, we have shown that we can use these entanglement "things" to do the calculations, which means we can actually make use of another level of concurrent computing, gifted automatically by the mechanisms of the universe, to solve real problems.  It should be pretty apparent that doing more things at once, in a way that has proven can be taken advantage of, makes things 
[08:06:07] <InPhase> definitively faster.
[08:06:08] <X-Scale> That's like saying in 1920 "I dont think that general relativity is correct to be honest"
[08:06:13] <Julius__> I think if quantum mechanics was correct, we would have the same effects in our macro world. But we dont. (Or at least we dont notice them, which doesnt mean they are not there :( )
[08:06:28] <InPhase> Julius__: And for the record, Shor's Algorithm has already been run in a quantum computer, as long ago as 20 years back, so it's not just a theory.
[08:07:28] <Julius__> InPhase, still, this doesnt mean that a normal computer cant get the same result equally fast
[08:07:42] <InPhase> Julius__: We've moved from the scale of "can this be done" to the scale of the NSA is hiring a massive number of quantum computing experts and assigning them to a project with a large budget.
[08:08:18] <Julius__> InPhase, doesnt mean they couldnt do the same with a normal computer if they knew how
[08:08:31] <InPhase> Julius__: It fundamentally does more at once.
[08:08:41] <InPhase> Julius__: How are you going to go equally fast doing less at once?
[08:08:46] <Julius__> InPhase, maybe. Maybe not. No one knows that
[08:09:03] <InPhase> Julius__: But we really do.  Entanglement shows more is happening at once, and it works.
[08:09:11] <Julius__> InPhase, maybe what you do is not required for the result
[08:09:17] *** Quits: buffet (~buffet@buffet.sh) (Ping timeout: 252 seconds)
[08:10:09] <InPhase> Julius__: So if you come up with a faster classical algorithm for a given problem, but the quantum computer can do more at once, there remains an opportunity to do it even faster.
[08:10:38] <InPhase> Julius__: Here...  Let's see you explain this superb algorithm:  https://en.wikipedia.org/wiki/Grover%27s_algorithm
[08:10:39] <bayaz> Title: Grover's algorithm - Wikipedia 
[08:10:40] <Julius__> InPhase, maybe by a polynomial amount, yes
[08:10:55] <arahael> Julius__: You misunderstand.
[08:11:09] <InPhase> Julius__: In summary, Grover's Search algorithm finds something in N things, in O(sqrt(N)) time.
[08:11:22] *** Parts: wildbill (wildbill@gateway/vpn/protonvpn/wildbill) (WeeChat 3.2)
[08:11:36] <arahael> Julius__: Quantum computing algorithms are so radically different you can't describe them with the same sort of bounds as a classic algorithm can.  Effectively you're looking at probabilities instead.
[08:11:42] <InPhase> Julius__: You cannot possibly go faster than O(N) in a classical computer.  You cannot even think of going faster, because you cannot possibly do more than one thing at once.
[08:11:45] <arahael> Though my quantum computing knowledge is...  A decade out of date.
[08:11:47] <Julius__> InPhase, yes, something in a black box. But your input is not a black box
[08:12:00] <Julius__> InPhase, actually you can go in O(1)
[08:12:37] <InPhase> No?
[08:13:06] <Julius__> arahael, the computational complexity of quantum computers might not be different at all
[08:13:27] <Julius__> InPhase, yes
[08:13:45] <InPhase> Julius__: You cannot check N things in 1 time classically.
[08:13:50] <Julius__> InPhase, want me to show you an algorithm that runs in O(1) ?
[08:14:00] <Julius__> I never said check N things
[08:14:01] <InPhase> Julius__: You're going to say hash table, but no.
[08:14:04] <arahael> InPhase: He's referring to the strawman when you simply give it a constant amount of time, say an hour.
[08:14:12] <Julius__> Hash table is not O(1)
[08:14:28] <Julius__> arahael, I am not
[08:15:23] <arahael> Julius__: Might be best to clarify which algorith you're talking about, then.
[08:15:35] <Julius__> InPhase, why would you be proud of being able to check black boxes very quicky when you dont have any black boxes ever in reality?
[08:15:49] <Julius__> arahael, I am talking about algorithms in general
[08:16:25] <arahael> Julius__: A quantum computer permits algorithms that actually *check* the entire problem space in less than linear time.
[08:16:44] <Julius__> For example I can write an algorithm that checks if a binary number is dividable by 2 in O(1)
[08:16:53] *** Joins: Metalsutton (~Metalsutt@101.100.153.131)
[08:17:02] <InPhase> Julius__: Because it means that it works on any function f(x).  It can evaluate f(x) across domain N, without any knowledge of what f(x) is, in less than N time.  That's huge.
[08:17:03] <arahael> Julius__: Ok, what about two binary numbers?
[08:17:20] <Julius__> arahael, actually, that is 1. not true, and 2. maybe we dont need to check the whole problem space
[08:17:21] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[08:17:36] <Julius__> arahael, what about two binary numbers?
[08:18:00] <arahael> Julius__: Lets assume for sake of argument that you do, infact, need to check the whole problem space.
[08:18:12] <Julius__> InPhase, that might be, but that doesnt mean it's an advantage
[08:18:25] <InPhase> Julius__: It's literally O(sqrt(N)) over O(N).
[08:18:38] <Julius__> arahael, do you know any problem where you can prove that you have to check the whole problem space?
[08:18:49] *** Quits: yaboiburner (~yaboiburn@c-69-180-160-103.hsd1.mn.comcast.net) (Ping timeout: 248 seconds)
[08:18:50] <Julius__> InPhase, not really
[08:18:53] *** Joins: Jacobis9000 (~josephash@host213-122-250-217.range213-122.btcentralplus.com)
[08:18:53] *** Quits: rany (~rany@user/rany) (Ping timeout: 258 seconds)
[08:19:22] <arahael> Julius__: Sure.  Decryption without knowing the key.
[08:19:35] *** Quits: zwr (~zwr@2804:d45:b966:fb00:b0b3:7f72:5851:b2a8) (Remote host closed the connection)
[08:19:44] <Julius__> arahael, how do you know we cant do it quickly on a normal computer? No one knows if we can or cant
[08:20:29] <arahael> Julius__: As InPhase pointed out, you can treat it as a black box, so you no-longer need to know if we can or can't know if it can be done quickly on a normal computer.
[08:20:30] <InPhase> Julius__: But the quantum computer already speeds it up because it does more at once, even without algorithmic advancements on the algorithm.  That's because it processes the algorithm in the forward direction at a different computational level.
[08:20:31] *** Quits: Yonle__ (~Yonle@user/yonle) (Read error: Connection reset by peer)
[08:20:54] *** Joins: Yonle (Yonle@user/yonle)
[08:21:22] <Julius__> arahael, you can treat it as a black box and then argue that for black boxes a quantum computer is faster, yes. But maybe we should not treat it as a black box and can do it equally fast with a normal computer
[08:21:43] <InPhase> Julius__: Then you're talking about a different scenario.
[08:21:45] <arahael> Julius__: Another example of where classic computers are an order of magnitude slower, is computing the square roots of a number.  Classic computers are awful at this, but with an analogue algorith, they can compute roots in real time for any input.
[08:21:58] <Julius__> InPhase, I dont know a problem with a normal output that is speed up by a quatum computer, do you?
[08:22:32] <InPhase> "normal output" meaning what?
[08:22:35] <Julius__> arahael, the square root of a number can be calculated quite efficiently with a normal computer
[08:22:36] <arahael> Julius__: You're missing the point entirely.  There is real research into this space right now, and yet, nobody in many *decades* have been able to crack current encryption on a classical computer in any reasonable time.
[08:23:02] <arahael> Julius__: "efficiently", no it can't, but you can speed it up drammatically for specific value ranges.
[08:23:07] <Julius__> arahael, yes, no one was able to show one side or the other, so both are possible
[08:23:28] <arahael> Julius__: You're too focused on what is possible, and ignoring that right now, it's not a *reality*.
[08:23:50] *** Quits: webnet4 (~0x100@32.211.211.39) (Remote host closed the connection)
[08:23:50] <Julius__> arahael, yes it can. I am sure that calculating the square root of a number can be done in polynomial time
[08:24:02] *** Joins: webnet4 (~0x100@32.211.211.39)
[08:24:09] *** Quits: Jacobis9000 (~josephash@host213-122-250-217.range213-122.btcentralplus.com) (Ping timeout: 248 seconds)
[08:24:14] <arahael> Julius__: Woah. Polynomial time? Analogue computers can do this *instantly* and in real time.
[08:24:25] <Julius__> arahael, it is also not a reality that quantum computers are faster for general purpose applications
[08:24:43] <Julius__> arahael, no they cant
[08:24:54] <arahael> Julius__: Nobody is using or proposing that quantum computers should replace normal general purpose applications.
[08:25:05] *** Joins: buffet (~buffet@buffet.sh)
[08:25:08] <arahael> Julius__: There are lots that quantum computers are poorly suited for, or unable to do. That's not the topic.
[08:25:28] <Julius__> arahael, I just said that so far quantum computers have not been shown to be faster in theory or in real life
[08:26:23] <Julius__> Quantum computers are at least as good as normal computers, so they are (at least in theory) as suitable for general purpose applications as normal computers
[08:26:43] *** Quits: webnet4 (~0x100@32.211.211.39) (Remote host closed the connection)
[08:26:55] <arahael> Julius__: Oops, my mistake, I meant integration, not square roots.  I can't actually find analogue square root algorithms wiht a google search.
[08:27:01] *** Joins: webnet4 (~0x100@32.211.211.39)
[08:27:02] <InPhase> Julius__: Really not...  Here is the holy grail of quantum computing, which will change the world far more than any of these early toy algorithms:  https://en.wikipedia.org/wiki/Quantum_simulator
[08:27:03] <bayaz> Title: Quantum simulator - Wikipedia 
[08:27:15] <Julius__> So whoever (yes Google, I'm looking at you) claims that he has proven quantum supremacy, is lying!
[08:27:31] <InPhase> Julius__: This will cause a revolution in things like drug development.
[08:27:32] <webnet4> lol google
[08:27:59] <Julius__> InPhase, it is hard to predict the future, so who knows what will happen
[08:28:29] <Julius__> Drug development? Sorry, Im already fed up with that after the covid hoax
[08:28:38] <X-Scale> haha
[08:28:44] <webnet4> i can predict the we b as we know it will be shattered
[08:28:57] <arahael> Aha!  Now we know that Julius__'s difficulties with the world.
[08:29:00] <Julius__> webnet4, :)
[08:29:17] <Julius__> arahael, not my fault Google is lying
[08:29:32] *** Joins: pandakekok9 (~job@wikimedia-commons/pandakekok9)
[08:29:35] <X-Scale> If it wasn't clear with the total misunderstanding of quantum computing, covid helped ranking the troll
[08:29:41] *** Joins: herjazz (~herjazz@p6758124-ipngn30801marunouchi.tokyo.ocn.ne.jp)
[08:29:57] <Julius__> X-Scale, what troll do you mean?
[08:30:00] <InPhase> Julius__: Well we could all die in a cosmic obliteration.  But barring such events, the massive classical computing inefficiencies of simulating quantum mechanics are resolved by quantum computers that actually operate at the same computational class as the systems being simulated, which means that all these chemical interactions that are nearly impossible to simulate become easily computable at 
[08:30:06] <InPhase> scale.  Suddenly we will be able to study chemistry, biophysics, and biochemistry problems with quantum simulations at a large scale, and understand and predict interactions that have been opaque to us for a very long time.
[08:30:38] <Julius__> InPhase, claiming that classical comuters are inefficient is just that, a claim. Might be true, or might not
[08:30:40] <arahael> InPhase: Thats going to be incredible.
[08:30:50] <arahael> Julius__: Classic computers *are* inefficient.
[08:30:51] <InPhase> Julius__: The problem with quantum simulation, is that all those extra interaction numbers we talked about??  To simulate quantum mechanics you have to classically go along and calculate them all, and it blows up on you.
[08:31:06] <Julius__> arahael, no one knows that. They might be as good as quantum computers
[08:31:52] <InPhase> Julius__: If you skip some of them, you're getting approximations that are progressively more wrong.  You simply can't avoid them, because they're part of how the universe really operates.
[08:32:00] <arahael> Julius__: Why do you think nobody knows this?  Maybe it's only you who don't know.
[08:32:04] <Julius__> InPhase, in case that a normal computer is as good as a quantum computer, all your "quantum simulations" could also be done on a normal computer
[08:32:13] <InPhase> Julius__: In exponential space and time.
[08:32:25] <Julius__> arahael, because there are certain things that no one knows so far?
[08:32:50] <arahael> Julius__: You seem pretty convinced that this is one of those things.
[08:33:03] <Julius__> InPhase, dont you understand that there is a possibility that normal computers are as good as quantum computers?
[08:33:16] <Julius__> arahael, I am. You can look it up
[08:33:40] <InPhase> Julius__: I understand that this is not possible, because they cannot operate on as many things at once.
[08:34:08] <InPhase> Julius__: All that's missing is figuring out how to formalize what that means in terms of computational theory proofs.
[08:34:20] <InPhase> Julius__: They definitively do different levels of things.
[08:34:21] <Julius__> arahael, compare P, BQP, and NP, and tell me what we know about them so far
[08:34:36] *** Quits: gambl0re (~gambl0re@104.247.245.205) (Ping timeout: 258 seconds)
[08:34:54] <Julius__> InPhase, then you understand something wrong, since if it was not possible we would know that P =/= BQP, but we dont know that
[08:35:18] <InPhase> See -->  Julius__: All that's missing is figuring out how to formalize what that means in terms of computational theory proofs.
[08:35:45] <InPhase> I'm geniunely not so worried about the formalism.  It might take another 30 years before someone figures out how to write it down convincingly.
[08:35:49] <Julius__> InPhase, all that is missing as an algorithm for a normal computer. See, I can argue like that as well
[08:37:09] <Julius__> *is an
[08:37:19] <arahael> Julius__: Regardless of what we know about P, BQP, NP, whatever, the fact remains that we do not have a current implementation for those problems, so as an applications developer, they might as well not be possible. I am not paid to research those problems. I'm paid to implement real solutions given the tools I have at hand.  Some of these solutions are an approximation, or a crude heuristic.
[08:37:20] <arahael>  That's often OK.  But sometimes it is not enough.
[08:37:36] <arahael> Julius__: Sometimes you need the actual solution, and I can't do this with classic computers with the current knowledge we have today.
[08:37:53] <InPhase> Julius__: This 20th century book contains a 360 page proof that 1+1=2.  I mean, excellent that someone worked that out.  But we could also look at two objects and count them.  ;)
[08:37:55] <arahael> Julius__: Please, go ahead and come up with that algorithm.
[08:38:00] <InPhase> Julius__: https://en.wikipedia.org/wiki/Principia_Mathematica
[08:38:02] <bayaz> Title: Principia Mathematica - Wikipedia 
[08:38:15] <Julius__> arahael, there are special problems where a quantum computer is currently faster since we dont know how to do it on a normal computer, yes
[08:38:41] <arahael> Julius__: Oh, wow, did you just agree with the entire discussion we've been spending ages on?
[08:38:54] <Julius__> arahael, but there are enough other examples where a normal computer is faster, so saying a quantum computer is better just because we found one case where it's true is a dumb argument
[08:38:56] <InPhase> Julius__: In multiple examples I showed there is zero reason to think a classical computer could do it faster, because it's up against the fundamental limit of doing one thing at a time.
[08:40:12] <Julius__> arahael, in 1 out of 100 problem cases a quantum computer is faster, in 99 ouf ot 100 problem cases a normal computer is faster at the moment. And then you argue that a quantum computer is faster? Thats really stupid, or just a lie to promote your company, like Google did
[08:40:35] <Julius__> InPhase, there is also little reason to think that a classical computer is not as fast
[08:40:36] <arahael> Julius__: Again, nobody is suggeseting that a quantum computer be used for all problems.
[08:40:47] <InPhase> Julius__: Except for the fact that it must do one thing at a time...
[08:41:14] <Julius__> arahael, they claimed quantum supremacy even though a quantum computer is almost always slower. That's just shilling for a hype, nothing more
[08:41:35] <Julius__> InPhase, who says that doing one thing at a time is slower?
[08:41:59] <InPhase> Julius__: Because you get less done!
[08:42:04] <arahael> Julius__: Why do you think a quantum computer is "almost always" slower for precisely those problems that they're suited for?
[08:42:11] <Julius__> InPhase, how do you know that you get less done?
[08:42:49] <Julius__> arahael, because for almost all problem cases a quantum computer does not have any advantage and hence is slower in the real world
[08:43:00] <arahael> Julius__: We're not talking about all problem cases.
[08:43:02] <InPhase> Julius__: Because if you have N things to do, it will take you N time.  If you can solve problems in a combinatoric parallel manner, as quantum computers do, then you can do it on a different timescale.  Which is exactly what all the algorithms take advantage of.
[08:43:12] *** Joins: RenAdjest2 (~RenAdjest@user/renadjest)
[08:43:13] <Julius__> arahael, so now you do cherry picking?
[08:43:16] <arahael> Julius__: We're talking about specific problem cases, where you have to handle the entire problem space.
[08:43:18] *** Quits: webnet4 (~0x100@32.211.211.39) (Remote host closed the connection)
[08:43:32] *** Joins: webnet4 (~0x100@32.211.211.39)
[08:43:36] *** Quits: RenAdjest (~RenAdjest@user/renadjest) (Read error: Connection reset by peer)
[08:43:49] <Julius__> InPhase, maybe that is not needed
[08:43:53] *** RenAdjest2 is now known as RenAdjest
[08:44:06] <arahael> Oh, I give up.
[08:44:36] <X-Scale> Julius__ is just disappointed he won't be able to run his windows millennium on a brand new quantum computer
[08:44:39] *** Joins: rany (~rany@user/rany)
[08:44:42] <Julius__> arahael, yes, there are very special cases were a quantum computer is faster at the moment. But in the majority of cases it's slower. So claiming general quantum supremacy is just a lie
[08:44:57] <Julius__> X-Scale, Windows 7 !
[08:45:15] <arahael> Julius__: Again, it was never claimed for the general case.
[08:45:36] <Julius__> arahael, with the same logic you use we should claim normal computer supremacy, since it's actually true more often
[08:45:58] <arahael> It's also irrelevant. I'm going gback to my game.
[08:46:35] <Julius__> arahael, so let's sum this up: In theory both might be equally fast, no one knows that. And in real life normal computers are almost always faster. I think I won :D
[08:46:46] <InPhase> Julius__: There are no cases where quantum computers are algorithmically slower.
[08:46:49] *** Joins: Jacobis9000 (~josephash@host213-122-250-217.range213-122.btcentralplus.com)
[08:46:59] <Julius__> InPhase, true. I never said otherwise
[08:47:28] <InPhase> Julius__: If you're faulting the constant run time of giant early-gen machines, that's a bit disingenuous.
[08:47:31] <Julius__> InPhase, there are also no cases where quantum computers are known to be significantly faster (in theory)
[08:47:56] <arahael> Julius__: How about in practice?  People _have_ done quantum algorithms in practice, on real systems.
[08:48:03] <X-Scale> https://www.amazon.com/Welcome-Trollandia-somewhat-guidebook-otherwise/dp/1642377368
[08:48:05] <X-Scale> *** Welcome to Trollandia: A somewhat useful guidebook about how to identify and deal with trolls online and otherwise
[08:48:06] <InPhase> Julius__: There really are.  There is just a loophole in classical computational theory where people can't prove any general lower bounds on stuff.
[08:48:12] <Julius__> arahael, in practice normal computers are almost always faster
[08:48:46] <Julius__> InPhase, no there are not. Name just one problem class where a quantum computer is significantly faster
[08:49:10] <arahael> InPhase: Funny, he's asking for one problem, when I already provided one, even though my understanding is a full decade out of date!!!
[08:49:40] <InPhase> Julius__: Quantum computers can find the maximum value in a list in O(sqrt(N)) time.
[08:49:46] <Julius__> arahael, you did not provide an example for a problem where we know that a quatnum comptuer is significantly faster in theory
[08:50:00] <arahael> Julius__: Decryption without knowing the key.
[08:50:00] <InPhase> Julius__: Challenge:  Find me a classical algorithm that can find the maximum value in a list on O(sqrt(N)) time, or concede the argument.
[08:50:31] <arahael> Julius__: ^^ To clarify that challenge, your classical algorithm must not be subject to falling into a local maxima. It must be the real maxima.
[08:50:45] <Julius__> InPhase, normal computers can find the maximum in O(N) or O(N * log(size_of_number)) to be more accurate, so it's no significant difference
[08:51:05] <InPhase> Julius__: That's literally a different algorithmic order.  What do you mean no difference?
[08:51:19] <InPhase> With a trillion elements, that's a million times faster.
[08:51:21] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 248 seconds)
[08:51:32] *** Joins: JennyB (~ircuser@S01069050ca4e3573.cg.shawcable.net)
[08:51:36] <Julius__> InPhase, it is the same. Both is polynomial. That's not a significant difference
[08:51:41] <InPhase> lol
[08:52:00] <arahael> Julius__: One is exponentially faster than the other, isn't it?
[08:52:03] <InPhase> It's a whole different algorithmic order which is impossible classically!
[08:52:03] <Julius__> InPhase, significant would mean one being polynomial and one being super-polynomial, for example exponential
[08:52:07] *** Joins: TechTest (uid283215@id-283215.tooting.irccloud.com)
[08:52:15] <X-Scale> You're just feeding the troll and he keeps dragging you into the mud of ignorance where he excels.
[08:52:16] <Julius__> arahael, no, the differene is just a polynomial
[08:52:56] <arahael> "just a polynomial", ha.
[08:52:57] <Julius__> (by difference I mean one divided by the other of course, not a subtraction)
[08:53:02] <InPhase> Julius__: Do you at least concede the point that it proves quantum computers are doing some operations that classical computers will never be able to equal regardless of algorithmic advancements?
[08:53:47] <Julius__> arahael, everything that is polynomial is concidered to be efficient, and like I said earlier, there can be polynomial differences. But no super-polynomial difference was proven so far
[08:54:10] <arahael> Julius__: No, they are not neccessarily considered efficient.
[08:54:10] <Julius__> InPhase, no, this has never been proven so far
[08:54:36] <InPhase> Julius__: lol.  Now you're just lying to yourself.  Go make a classical O(sqrt(N)) max finder.  I'm going to go get a snack.
[08:54:43] <Julius__> arahael, depends, true. But when you speak about polynomial vs super-polinomal or even exponential, they are
[08:54:54] *** Quits: Jacobis9000 (~josephash@host213-122-250-217.range213-122.btcentralplus.com) (Ping timeout: 268 seconds)
[08:55:11] <arahael> Julius__: But we're not. WE're talking about in comparison to Quantum computers who can do this an order of magnitude faster.
[08:55:18] <Julius__> InPhase, I can do a simple O(N * log(size_of_number)) finder. Just a for loop. Done
[08:55:28] <InPhase> Julius__: Which is slower.
[08:55:47] <Julius__> arahael, like I said earlier, I am talking about differences that are larger than just a polynomial
[08:55:49] <InPhase> Julius__: And, you're lying if you do not acknowledge that's algorithmically different.
[08:56:03] <Julius__> InPhase, not more slower than just a polynomial differene
[08:56:29] <Julius__> InPhase, it is algorithmically different, yes. But not more than a polynomial
[08:56:30] <InPhase> Julius__: Which is... algorithmically slower.  They are fundamentally capable of different things.
[08:56:37] <JennyB> I think there's one scenario that isn't captured big "big O"
[08:57:17] <Julius__> InPhase, yes, might be. But not more than a polynomial difference. Or at least I dont know a single case where this ever was proven
[08:58:48] <arahael> I'd say we're done.  Get a snack, talk about something different.
[08:59:01] <Joanna> X-Scale: is the book available as a pdf ?
[08:59:16] <Julius__> InPhase, somehow I doubt your example the longer I think about it. But anyway
[08:59:21] *** Quits: jarthur (~jarthur@cpe-70-114-198-37.austin.res.rr.com) (Ping timeout: 248 seconds)
[08:59:27] <JennyB> if you consider an upper bound on busy beaver function for an algorithm (I know no such is known for n>4) but lets call it C, then if algorithm is O(n^2) classical but O(n) quantum, it might be cause that quantum is still 'slow' if O(n) ~ n + C' where C' > C 
[09:00:16] <JennyB> in that case, the O(n) would have a constant required thats theoretically incomputable and thus O(n^2) would be 'faster' for all practical and theoretical purposes
[09:00:17] <Julius__> JennyB, we are talking about differences that are more than just a polynomial
[09:00:38] <Julius__> And there is no such known case so far
[09:00:47] <Julius__> (as far as I know)
[09:01:24] <arahael> JennyB: Yes, that's true.
[09:01:26] <Julius__> And claiming quantum supremacy is pure bullshit
[09:02:28] *** Joins: quartz (~nick@2603-8001-7700-61a4-0000-0000-0000-0eff.res6.spectrum.com)
[09:02:47] *** Joins: jarthur (~jarthur@2603-8080-1540-002d-519b-3f89-f896-0f8f.res6.spectrum.com)
[09:03:00] *** Quits: TheAceOfHearts (~TheAceOfH@24.41.239.76) (Quit: So long, and thanks for all the fish!)
[09:03:24] *** Joins: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[09:05:29] *** Quits: vicfred (~vicfred@user/vicfred) (Quit: Leaving)
[09:05:52] <Julius__> X-Scale, by the way, I was not trolling about covid being a scam
[09:06:16] *** Quits: Guest1 (~Guest1@184-14-199-60.dr03.chtn.wv.frontiernet.net) (Quit: Client closed)
[09:07:31] *** Quits: CodeMouse92 (~CodeMouse@user/codemouse92) (Quit: Oh freddled gruntbuggly | Thy micturations are to me | As plurdled gabbleblotchits | On a lurgid bee)
[09:07:51] *** Quits: pulse (~pulse@user/pulse) (Ping timeout: 268 seconds)
[09:08:34] <Julius__> Silence
[09:08:49] <X-Scale> Julius__: by the same token i presume men didn't land on the moon back in July 1969
[09:09:01] <Julius__> X-Scale, no, by science
[09:10:01] *** Quits: jinsun (~quassel@user/jinsun) (Ping timeout: 248 seconds)
[09:10:06] *** Joins: jinsun_ (~quassel@user/jinsun)
[09:10:11] <Julius__> Covid-19 is the disease you get from Sars-Cov-2. Can you prove Sars-Cov-2 exists? No you can't since there is no proof so far. Not even a Canadian court could
[09:10:36] <X-Scale> You're not even a very smart troll.
[09:10:48] <Julius__> By the way, you can win 1.2 million dollars for a proof, it does not even have to be your own. True fact
[09:10:50] <arahael> Julius__: If you continue with that argument I'm going to put you on a quiet.
[09:10:56] <dodo> what would be proof it exists?
[09:10:59] <X-Scale> You show all your ignorance too fast.
[09:11:11] <Julius__> dodo, a pure isolate of that "virus"
[09:11:19] <dodo> lol ok
[09:11:46] <Julius__> They can't find it since Sars-Cov-2 is just a computer model that was done without ever having seen the "virus". Also a fact
[09:11:52] <arahael> !q Julius__ 
[09:11:53] *** bayaz sets mode: +q *!*@2a02:810b:c640:514:2dea:fb86:5f87:9ab1
[09:12:09] <arahael> Lets talk about different topics.
[09:12:12] <Jabberwack> the existence of the virus isnt up for debate but where it came from is controversial
[09:12:18] <X-Scale> sigh
[09:12:26] <Jabberwack> you just silenced the only entertainment we had for the last 3 hours!
[09:12:34] <dodo> tabs > whitespace
[09:14:11] <jeaye> All our drinks go on your tab then.
[09:15:53] *** Quits: Samian (~Sami@174.27.107.153) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[09:17:14] <Izem> what does callee owned mean?
[09:17:55] <arahael> Izem: Means that the callee owns and is responsible for the lifetime of the resource. As opposed to the caller. (The caller calls the callee)
[09:18:35] <droid3> curious for arraylist , vectors ,...etc is there away to set exactly the size
[09:18:50] <droid3> what i mean by this is there is a method like  	ensureCapacity(int minCapacity)
[09:19:24] <droid3> that allows you to set the min size for the internal array
[09:20:11] <droid3> But what i am wondering is once you know that your not going to add anymore elements is there away to truncate the capacity down to the exact size()
[09:20:59] <droid3> because it would suck to have the capacity chewing up unwanted memory that you never use once you reach your max amount of element you where going to add.
[09:21:13] *** Quits: Inhahe (inhahe@107-213-219-122.lightspeed.miamfl.sbcglobal.net) (Ping timeout: 248 seconds)
[09:21:20] *** Joins: Jacobis9000 (~josephash@host213-122-250-217.range213-122.btcentralplus.com)
[09:21:34] <droid3> It doesnt seem like you can control this as capacity you can only insure the min not a max
[09:21:47] *** Quits: webnet4 (~0x100@32.211.211.39) (Remote host closed the connection)
[09:21:53] <X-Scale> droid3: you'd use realloc in C to achieve that
[09:22:04] *** Joins: webnet4 (~0x100@32.211.211.39)
[09:22:21] <Jabberwack> if youre populating the array with a loop just set a counter in the loop
[09:22:46] <droid3> yes X-Scale but i am talking about java 
[09:23:07] <Izem> pretty sure you can set the capacity
[09:23:10] <droid3> and i am talking about datastructures like vector ...etc not resizing blocks of memory
[09:24:00] <droid3> https://docs.oracle.com/javase/8/docs/api/java/util/ArrayList.html#ensureCapacity-int-
[09:24:01] <bayaz> Title: ArrayList (Java Platform SE 8 ) 
[09:24:30] <droid3> what i am getting at is how do you know internally that capacity == size 
[09:24:48] <droid3> and that internally its not taking up more space then the size
[09:26:00] <droid3> by the looks of it you can only insure a lower bound on the capacity allocated internally
[09:26:28] <droid3> it doesnt look like you can control if capacity is incremented exactly with the need size
[09:26:44] *** Quits: Jacobis9000 (~josephash@host213-122-250-217.range213-122.btcentralplus.com) (Ping timeout: 258 seconds)
[09:26:57] *** Joins: indiana-bones (~indignant@94.140.8.98)
[09:27:08] <droid3> or if its increasing it internally with some algorithm that if one was to add n element it would try to be smart and increase the capacity to 2n 
[09:28:01] <droid3> Which in most cases its ok for speed of expanding /adding more elements. But after you reach a point you want when your not going to add any more element to tell it to truncate it internally down to the exact size() 
[09:28:12] <droid3> I hope you get what i mean
[09:28:25] *** Quits: Xaldafax (~xaldafax@cpe-198-72-160-101.socal.res.rr.com) (Quit: Bye...)
[09:30:01] *** Quits: riff-IRC (~riff-IRC@user/riff-irc) (Remote host closed the connection)
[09:30:33] <Izem> you can do exactly that
[09:30:49] <Izem> at least I remember that functionality 
[09:31:13] <Izem> but a resize is going to cost you
[09:31:27] *** Joins: riff-IRC (~riff-IRC@user/riff-irc)
[09:32:17] <droid3> "The details of the growth policy are not specified beyond the fact that adding an element has constant amortized time cost. "
[09:32:24] <Izem> droid3: do you really need that extra space for the duration of your program?
[09:32:46] <droid3> So it seems to me amount of incremental reallocation cannt be fully controlled or known
[09:32:48] <Izem> it's twice the size iirc
[09:32:56] <Izem> I doubt that has changed
[09:33:39] <droid3> well in this calculation I like to squeeze everything tightly into a resizing data structure such as a vector , arraylist ,...etc
[09:33:59] <droid3> without having additional growth for capacity
[09:34:19] <droid3> aka capacity == size exactly  
[09:34:25] <Izem> use a list then
[09:34:43] <droid3> so no wasted space but sure most application i do ...this doesnt matter so much
[09:35:10] <Izem> if you use this data structure you agree to giving up space
[09:38:44] *** Quits: JavaBean (~JavaBean@user/javabean) (Remote host closed the connection)
[09:39:53] <droid3> well then if i use list i am giving up random accessing runtime of element so i dont have to give up internal resizing of space.
[09:40:31] <droid3> But if i go with arraylist , vector ...i am giving up the opposite aka sacrificing some space for random access runtime of elements
[09:41:13] <droid3> so i cannt win :(
[09:41:18] <droid3> fully
[09:41:30] <d3x0r> there's a compromise of a binary list
[09:41:35] <d3x0r> or even n-ary
[09:43:09] <Izem> lists still have random access, it just won't be as fast
[09:43:22] <droid3> that what i was getting at
[09:43:49] <Izem> last option is to figure out how much space you need and use an array
[09:43:56] <droid3> so its either reducing speed and saving space or saving speed and chewing up more space
[09:44:06] <Izem> ya
[09:44:06] *** Joins: jamea (~jamea@177.239.85.103)
[09:44:38] <droid3> Well i cannt figure out the exact space at a particular instance only after processing the data can i know i am done
[09:45:18] <droid3> and at that point i wanted away to say hey listen arraylist or vector i need you to shrink capacity == size now i am done.
[09:45:29] <Izem> you can
[09:45:30] <droid3> but there is no way to tell it that
[09:45:59] <Izem> I just said it seems pointless because that is a resize, but I guess it doesn't matter
[09:46:39] <droid3> how do you do it then Izem
[09:47:12] <Izem> if there isn't a resize() you can just convert it to an array
[09:47:53] *** Quits: LiftLeft (~LiftLeft@212.102.58.180) (Ping timeout: 248 seconds)
[09:47:54] <droid3> ya but now you got the vector take up space and you got the array exactly what you want
[09:48:10] <droid3> you need vector gone completely at that point
[09:48:18] <Izem> there is a garabage collector remember?
[09:48:38] *** Joins: Jacobis9000 (~josephash@host213-122-250-217.range213-122.btcentralplus.com)
[09:48:49] *** Quits: whatsupdoc (uid509081@id-509081.stonehaven.irccloud.com) (Quit: Connection closed for inactivity)
[09:49:24] <droid3> ya ok so i suppose just set vector = null ; and let gc do its magic
[09:49:38] <Izem> yeah, or you can reuse the vector variable name
[09:49:53] <Izem> I heard variable name reuse can cause bugs though
[09:50:07] *** Quits: Yonle (Yonle@user/yonle) (Remote host closed the connection)
[09:50:40] <droid3> ya ok that one way to do it just brainstorming it out
[09:50:43] <droid3> Ok thanks
[09:50:45] <Izem> np
[09:50:51] *** Joins: JavaBean (~JavaBean@user/javabean)
[09:53:28] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Remote host closed the connection)
[09:54:33] *** Joins: Yonle (~Yonle@user/yonle)
[09:55:11] *** Joins: Enitin (~Enitin@82.102.22.84)
[09:55:44] *** Quits: Jacobis9000 (~josephash@host213-122-250-217.range213-122.btcentralplus.com) (Ping timeout: 272 seconds)
[09:57:56] *** Joins: trace987 (~trace@ip5f5a6a70.dynamic.kabel-deutschland.de)
[09:59:22] *** Quits: Crescendo (~Crescendo@user/crescendo) (Read error: Connection reset by peer)
[10:01:45] *** Quits: penguino (~mrpenguin@user/mrpenguin) (Ping timeout: 244 seconds)
[10:02:28] *** Joins: Crescendo (~Crescendo@user/crescendo)
[10:07:00] *** Joins: TheAceOfHearts (~TheAceOfH@24.41.239.76)
[10:16:46] *** Joins: mei (~mei@user/mei)
[10:18:54] *** Quits: Metalsutton (~Metalsutt@101.100.153.131) (Quit: Leaving)
[10:19:55] *** Quits: b1101 (~b1101@ool-44c01641.dyn.optonline.net) (Quit: b1101)
[10:22:20] *** Quits: trace987 (~trace@ip5f5a6a70.dynamic.kabel-deutschland.de) (Ping timeout: 272 seconds)
[10:33:41] *** Quits: quartz (~nick@2603-8001-7700-61a4-0000-0000-0000-0eff.res6.spectrum.com) (Quit: WeeChat 3.2)
[10:37:18] *** Joins: wildbill (wildbill@gateway/vpn/protonvpn/wildbill)
[10:39:13] *** Parts: wildbill (wildbill@gateway/vpn/protonvpn/wildbill) ()
[10:41:30] *** Joins: tertullian_ (~tertullia@182.70.210.82)
[10:42:49] *** Quits: Enitin (~Enitin@82.102.22.84) (Ping timeout: 268 seconds)
[10:43:06] <tertullian_> is there any difference between passing an anonymous function inline in JavaScript compared to declaring the function elsewhere and passing the function by name?
[10:44:40] <webnet4> besides the obvious advantage of actually knowing which code it's going to run?
[10:45:18] <webnet4> wait you can pass it by name?
[10:45:47] <webnet4> javascript has so many little surprises
[10:45:50] <Izem>  yeah that's a variable
[10:45:58] <Izem> why is that a surprise?
[10:46:11] <webnet4> like a string-name?
[10:47:39] *** Joins: leduyquang753 (~leduyquan@user/leduyquang753)
[10:47:49] <tertullian_> Izem: i see that when i declare an anonymous function to pass inside a function which expects function argument, the anonymous function has total access to the outer functions variables (like a closure), but if i declare it outside, it would only have access to few variables which are required for it's declaration.
[10:47:59] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[10:49:13] *** Joins: elnavigator (~elnavigat@196.154.95.174)
[10:49:17] *** Joins: amamaable (~amamaable@c-76-108-122-204.hsd1.fl.comcast.net)
[10:51:10] *** Quits: tertullian_ (~tertullia@182.70.210.82) (Quit: leaving)
[10:51:18] *** Joins: Jacobis9000 (~josephash@host213-122-250-217.range213-122.btcentralplus.com)
[10:51:22] <Izem> what variables would be outside in a parameter list?
[10:51:36] <Izem> I suppose those in the larger scope yeah
[10:54:38] *** Quits: amamaable (~amamaable@c-76-108-122-204.hsd1.fl.comcast.net) (Remote host closed the connection)
[10:54:52] *** Joins: arm (~arm@c-76-108-122-204.hsd1.fl.comcast.net)
[10:56:07] *** Quits: img (~img@user/img) (Quit: ZNC 1.8.2 - https://znc.in)
[10:56:24] *** Joins: GeDaMo (~GeDaMo@82-69-2-253.dsl.in-addr.zen.co.uk)
[10:56:24] *** Quits: GeDaMo (~GeDaMo@82-69-2-253.dsl.in-addr.zen.co.uk) (Changing host)
[10:56:24] *** Joins: GeDaMo (~GeDaMo@user/gedamo)
[10:56:25] *** Joins: img (~img@user/img)
[10:56:41] *** Quits: Jacobis9000 (~josephash@host213-122-250-217.range213-122.btcentralplus.com) (Ping timeout: 248 seconds)
[10:58:32] *** bayaz sets mode: -q *!*@2a02:810b:c640:514:2dea:fb86:5f87:9ab1
[11:00:27] *** Quits: TheAceOfHearts (~TheAceOfH@24.41.239.76) (Quit: So long, and thanks for all the fish!)
[11:00:38] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[11:01:02] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 258 seconds)
[11:01:42] *** Quits: elnavigator (~elnavigat@196.154.95.174) (Read error: Connection reset by peer)
[11:01:52] *** Lord_of_Life_ is now known as Lord_of_Life
[11:06:58] *** Joins: exvicesindaco (~exvicio@user/exvicesindaco)
[11:11:58] *** Joins: TJ- (~root@2a01:7e00:e001:ee00:fa75:a4ff:fef3:42b4)
[11:12:50] *** Joins: whatsupdoc (uid509081@id-509081.stonehaven.irccloud.com)
[11:15:24] *** Quits: Joanna (uid57472@id-57472.tooting.irccloud.com) (Quit: Connection closed for inactivity)
[11:17:26] *** Quits: jamea (~jamea@177.239.85.103) (Ping timeout: 272 seconds)
[11:19:52] *** Joins: Enitin (~Enitin@82.102.22.84)
[11:21:43] *** Quits: TechTest (uid283215@id-283215.tooting.irccloud.com) (Quit: Connection closed for inactivity)
[11:22:17] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 248 seconds)
[11:25:27] *** Joins: mrig (~mrig@user/mrig)
[11:30:12] *** Joins: b1101 (~b1101@ool-44c01641.dyn.optonline.net)
[11:36:31] *** Quits: tccki (~tccki@2406:e001:2:5a60:250:56ff:fe9e:8795) (Quit: tccki)
[11:36:50] *** Joins: causative (~halberd@user/causative)
[11:38:06] *** Joins: gggp (~gggp@114.245.109.49)
[11:38:53] *** Joins: tccki (~tccki@box.webslate.co.nz)
[11:40:11] *** Quits: Julius__ (~Julius76@2a02:810b:c640:514:2dea:fb86:5f87:9ab1) (Quit: Quit)
[11:44:52] *** Quits: webnet4 (~0x100@32.211.211.39) (Remote host closed the connection)
[11:50:28] *** Joins: pulse (~pulse@user/pulse)
[11:50:37] *** Joins: usr123 (~usr123@124.253.5.172)
[11:52:23] *** Joins: One39Dev (LordShiva@user/one39dev)
[11:52:28] *** Joins: Jacobis9000 (~josephash@host213-122-250-217.range213-122.btcentralplus.com)
[11:53:14] *** Joins: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl)
[11:54:10] *** Quits: Enitin (~Enitin@82.102.22.84) (Ping timeout: 272 seconds)
[11:56:16] *** Joins: elnavigator (~elnavigat@196.151.76.104)
[11:56:52] *** Joins: bytecrawler (~bytecrawl@gateway/tor-sasl/bytecrawler)
[11:57:30] <beaky> hello my name is beaky
[11:58:32] *** Quits: Jacobis9000 (~josephash@host213-122-250-217.range213-122.btcentralplus.com) (Ping timeout: 272 seconds)
[11:59:06] <PlanckWalk> There is nobody called "my name is beaky" in here.
[11:59:21] <PlanckWalk> Also hello beaky.
[12:03:09] *** Quits: Jabberwack (~Jabberwac@user/jabberwack) (Quit: Leaving)
[12:03:42] <beaky> so i read about the illustrious history of x86 here and why its the best modern computer architecture design https://zirblazer.github.io/htmlfiles/pc_evolution.html but why havent they come up with a replacement architecture is backwards compatibility a big deal i thought all software was portable so easy to retarget a completely different platform as long as you just port things like the io
[12:03:45] <beaky> and drivers
[12:03:45] <bayaz> Title: History of the evolution of the x86 platform, from the IBM PC to the modern era 
[12:06:39] <beaky> like how in x86 it is a big deal to initialize the APIC timers but when i boot arm there's no such thing as apic timers and likewise with risc-v they are just cpus and not a whole platform the way x86 is 
[12:08:35] *** Joins: RenAdjest2 (~RenAdjest@user/renadjest)
[12:08:51] *** Quits: soapsudsxx (~soapsudsx@141.193.188.144) (Remote host closed the connection)
[12:09:15] *** Quits: RenAdjest (~RenAdjest@user/renadjest) (Ping timeout: 245 seconds)
[12:09:30] *** RenAdjest2 is now known as RenAdjest
[12:10:57] *** Joins: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net)
[12:13:19] *** Joins: Enitin (~Enitin@82.102.22.84)
[12:14:28] <Izem> beaky: another backwards compatible architecture would be torture
[12:14:35] <Izem> otherwise idk
[12:15:27] <beaky> yes maybe backwards compatibility is a bad idea
[12:15:52] <beaky> i will aim to design my tea database to be as backwards incompatible as possible
[12:16:02] <beaky> (starting with its query language of course)
[12:17:38] *** Joins: izak (~user@196.189.63.31)
[12:17:50] *** Quits: AbleBacon (~AbleBacon@user/AbleBacon) (Read error: Connection reset by peer)
[12:20:11] <pyzozord> beaky: you are saying that until some ritch tea philanthrope will buy an enterprise/custom license for your tea database
[12:21:27] <beaky> yes what if i need to import my teas from csv or sql
[12:24:46] *** Joins: aradesh (~aradesh@user/aradesh)
[12:33:14] *** Quits: izak (~user@196.189.63.31) (Remote host closed the connection)
[12:35:12] <smallville7123> if my root is {0, 0, 200, 200} and my child A is {50, 0, 150, 200} then its absolute is {50, 0, 150, 200} right? if so, if child A is drawing its child B at position half of A's position then B's relative position should be {0, 0, 75, 100} and its absolute {50, 0, 75, 100} right?
[12:36:42] <d3x0r> a+b
[12:36:51] <d3x0r> origin+a+b
[12:37:22] <d3x0r> and vectors add componet wise- and width/height subtract when added... 
[12:38:32] <d3x0r> I have all this math done to compute all sorts of alignments on a subimage class in C... it uses a copy of the parent's pitch (pwidth), and clips to its parents for convenicence.  Although - HTML <DIV> controls don'tclip to their parent, and that has other features.
[12:40:14] *** Joins: mjbatty_ (~mjbatty@82.2.17.205)
[12:41:04] *** Joins: jaysicks (~jaysicks@178-164-134-171.pool.digikabel.hu)
[12:43:13] *** Joins: sunbae (~euk@user/sunbae)
[12:44:05] *** Joins: Camilo (~hugh@host-92-20-143-244.as13285.net)
[12:44:27] *** Joins: amahl (~amahl@dsl-jklbng12-54fbca-64.dhcp.inet.fi)
[12:45:21] *** Joins: eXistenZ (~biskit@bzq-109-67-141-65.red.bezeqint.net)
[12:45:31] *** Quits: eXistenZ (~biskit@bzq-109-67-141-65.red.bezeqint.net) (Read error: Connection reset by peer)
[12:47:29] *** Quits: Enitin (~Enitin@82.102.22.84) (Ping timeout: 252 seconds)
[12:48:11] *** Joins: Enitin (~Enitin@82.102.22.84)
[12:50:14] *** Joins: TheAceOfHearts (~TheAceOfH@24.41.239.76)
[12:52:07] *** Quits: ugjka (~ugjka@ugjka.net) (Quit: ZNC 1.7.5+deb4 - https://znc.in)
[12:52:33] <Izem> how do I get started on computer graphics? are the classic texts still relevant like graphics gems 4?
[12:52:56] <GeDaMo> 3D graphics?
[12:53:20] *** Joins: ugjka (~ugjka@ugjka.net)
[12:53:37] <GeDaMo> http://www.realtimerendering.com/#intro
[12:53:38] *** Quits: twomoon (~twomoon@ip72-199-58-150.sd.sd.cox.net) (Quit: Leaving)
[12:53:39] <bayaz> Title: Real-Time Rendering Resources 
[12:54:08] *** Joins: Jacobis9000 (~josephash@host213-122-250-217.range213-122.btcentralplus.com)
[12:54:55] <Izem> oh great
[12:55:13] <Izem> but 2d first, eventually I want to get to 3d
[12:55:35] <Izem> also, is it possible to make a game like chess with an image manipulation library?
[12:55:39] <pulse> Izem, give SDL2 a whirl
[12:56:59] <Izem> pulse: I guess it's in sdl?
[12:57:14] <Izem> I just imagined I could make a game like this without drawing everything
[12:57:38] <Izem> in other words I don't need animation yet
[12:57:43] *** Quits: TheAceOfHearts (~TheAceOfH@24.41.239.76) (Quit: So long, and thanks for all the fish!)
[12:57:46] <pulse> just pick a graphic library and go through examples to see what's what
[12:58:01] <pulse> popular choices for 2D are SDL2, SFML and Allegro
[12:58:15] <pulse> there's others too if those aren't to your liking
[12:58:34] <GeDaMo> There are open source graphics available
[12:58:44] <GeDaMo> https://opengameart.org/
[12:58:44] *** Quits: exvicesindaco (~exvicio@user/exvicesindaco) (Remote host closed the connection)
[12:58:45] <bayaz> Title: OpenGameArt.org 
[12:59:08] <smallville7123> d3x0r: hmm ok
[13:00:16] <GeDaMo> There's also JS+canvas in the browser
[13:00:33] <Izem> yeah
[13:00:59] *** Joins: Inari (~Pinkishu@p4fd95809.dip0.t-ipconnect.de)
[13:01:09] *** Joins: gitesh (uid423739@id-423739.charlton.irccloud.com)
[13:01:33] *** Quits: Jacobis9000 (~josephash@host213-122-250-217.range213-122.btcentralplus.com) (Ping timeout: 268 seconds)
[13:01:37] *** Joins: wildbill (wildbill@gateway/vpn/protonvpn/wildbill)
[13:01:56] *** Joins: trace987 (~trace@ip5f5a6a70.dynamic.kabel-deutschland.de)
[13:03:27] *** Quits: Izem (~rcg@bras-base-london1483w-grc-43-65-95-173-5.dsl.bell.ca) (Quit: leaving)
[13:05:55] *** Quits: elnavigator (~elnavigat@196.151.76.104) (Read error: Connection reset by peer)
[13:06:47] *** Joins: ThePhilgrim (~ThePhilgr@78-69-18-227-no49.tbcn.telia.com)
[13:08:13] *** Joins: elnavigator (~elnavigat@196.151.76.104)
[13:08:23] <smallville7123> d3x0r: if i have a grid that draws in quaters, then child 1 should be at {50, 0, 75, 100} and child 2 should be at {75, 0, 150, 100} right?
[13:08:41] <smallville7123> in absolute coordinates
[13:10:07] *** Quits: kodah (~kodah@user/kodah) (Ping timeout: 245 seconds)
[13:12:20] *** Quits: ThePhilgrim (~ThePhilgr@78-69-18-227-no49.tbcn.telia.com) (Quit: Leaving)
[13:12:25] *** Joins: kodah (~kodah@user/kodah)
[13:12:39] *** Joins: ThePhilgrim (~ThePhilgr@78-69-18-227-no49.tbcn.telia.com)
[13:13:13] *** Joins: Jacobis9000 (~josephash@host213-122-250-217.range213-122.btcentralplus.com)
[13:13:42] <smallville7123> d3x0r: https://gist.github.com/mgood7123/68db59a30b205e1493f9e4c1764b766d the relative and absolute position of child 1 and child 2 are wrong, right?
[13:13:43] <bayaz> Title: a.txt 
[13:17:02] *** Joins: Andalu30 (~andalu30@84.232.74.231)
[13:18:19] *** Joins: Burgundy (~yomon@5-12-93-72.residential.rdsnet.ro)
[13:18:36] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[13:18:49] *** Quits: Jacobis9000 (~josephash@host213-122-250-217.range213-122.btcentralplus.com) (Ping timeout: 268 seconds)
[13:19:41] <smallville7123> as child 1's absolute location should be {75, 0, 150, 100} instead of {125, 0, 150, 100} right?
[13:19:50] *** Joins: magla (~gelignite@55d454e5.access.ecotel.net)
[13:19:50] <smallville7123> as child 2's absolute location should be {75, 0, 150, 100} instead of {125, 0, 150, 100} right?      *
[13:20:37] *** Quits: usr123 (~usr123@124.253.5.172) (Read error: Connection reset by peer)
[13:21:01] *** Joins: usr123 (~usr123@49.156.67.25)
[13:21:50] *** Quits: Enitin (~Enitin@82.102.22.84) (Ping timeout: 256 seconds)
[13:21:54] <smallville7123> unless the absolute width of child 1 is incorrect ;-;
[13:22:24] *** Joins: Enitin (~Enitin@82.102.22.84)
[13:24:06] *** Quits: ThePhilgrim (~ThePhilgr@78-69-18-227-no49.tbcn.telia.com) (Quit: Leaving)
[13:25:24] <pavonia> Maybe you should draw a sketch of how those elements should be aligned. It's ompletely unclear to me
[13:25:30] *** Joins: TechTest (uid283215@id-283215.tooting.irccloud.com)
[13:29:37] <smallville7123> ughh why does hit detection in google return simple 2D hit detection (collision detection between 2D objects) 
[13:30:02] <smallville7123> eg if A.intersects(B) and so on
[13:30:23] <smallville7123> pavonia: ok
[13:31:43] *** Joins: Jacobis9000 (~josephash@host213-122-250-217.range213-122.btcentralplus.com)
[13:31:43] *** Joins: rcg (~rcg@bras-base-london1483w-grc-43-65-95-173-5.dsl.bell.ca)
[13:32:03] *** rcg is now known as Izem
[13:32:25] <Izem> came back just to share this https://timhutton.github.io/sdl-canvas-wasm/
[13:32:36] <Izem> but I have to sleep soon
[13:32:42] *** Quits: Izem (~rcg@bras-base-london1483w-grc-43-65-95-173-5.dsl.bell.ca) (Client Quit)
[13:35:33] *** Joins: rubion (~rubion@cpc124316-ayle4-2-0-cust156.15-2.cable.virginm.net)
[13:35:36] *** Quits: wildbill (wildbill@gateway/vpn/protonvpn/wildbill) (Quit: WeeChat 3.2)
[13:36:06] *** Quits: elnavigator (~elnavigat@196.151.76.104) (Ping timeout: 268 seconds)
[13:36:21] *** Joins: wildbill (wildbill@gateway/vpn/protonvpn/wildbill)
[13:36:41] *** Quits: kodah (~kodah@user/kodah) (Ping timeout: 248 seconds)
[13:37:57] *** Quits: sunbae (~euk@user/sunbae) (Ping timeout: 268 seconds)
[13:39:11] *** Quits: Jacobis9000 (~josephash@host213-122-250-217.range213-122.btcentralplus.com) (Ping timeout: 268 seconds)
[13:44:07] *** Quits: droid3 (~fffd@024-177-015-135.res.spectrum.com) (Ping timeout: 268 seconds)
[13:44:18] *** Quits: rifl (~user@user/rifl) (Ping timeout: 272 seconds)
[13:45:02] *** Joins: kodah (~kodah@user/kodah)
[13:49:00] <CuriousErnestBro> hello friens
[13:50:42] *** Joins: Palgorithm (~Palgorith@46.204.81.131.nat.umts.dynamic.t-mobile.pl)
[13:50:42] *** Quits: Palgorithm (~Palgorith@46.204.81.131.nat.umts.dynamic.t-mobile.pl) (Changing host)
[13:50:42] *** Joins: Palgorithm (~Palgorith@user/palgorithm)
[13:52:41] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 248 seconds)
[13:52:44] *** Quits: rubion (~rubion@cpc124316-ayle4-2-0-cust156.15-2.cable.virginm.net) (Ping timeout: 268 seconds)
[13:54:28] *** Joins: Jacobis9000 (~josephash@host213-122-250-217.range213-122.btcentralplus.com)
[13:56:48] *** Joins: Pickchea (~private@user/pickchea)
[13:57:40] *** Joins: rifl (~user@user/rifl)
[13:58:58] *** Parts: wildbill (wildbill@gateway/vpn/protonvpn/wildbill) (WeeChat 3.2)
[14:01:54] <beaky> hello im beaky
[14:02:57] <Caffeinated> lol
[14:03:28] <beaky> today im excited for debian 11 debian is the most important linux distribution
[14:03:46] *** Quits: Jacobis9000 (~josephash@host213-122-250-217.range213-122.btcentralplus.com) (Ping timeout: 256 seconds)
[14:03:57] <pyzozord> what's new?
[14:04:02] <beaky> therefore i must identify all package versions in debian 11 and settle on those for example it has postgres 13 so i will standardize on that
[14:04:49] <Caffeinated> haha
[14:04:50] *** Joins: rubion (~rubion@cpc124306-ayle4-2-0-cust188.15-2.cable.virginm.net)
[14:05:08] <beaky> the release notes https://www.debian.org/releases/bullseye/amd64/release-notes/
[14:05:10] <bayaz> Title: Release Notes for Debian 11 (bullseye), 64-bit PC 
[14:05:43] <beaky> finally updating from gcc 8.3 to gcc 10.2
[14:06:08] <Caffeinated> you do know #debian has an official channel here
[14:06:13] <pyzozord> oh cool many things, arm64 support, I can install ubuntu on a raspberry pi now
[14:07:18] *** Joins: plastico (~plastico@neomutt/plastico)
[14:07:57] <mrig> Hi, If I have a set of elements, svg, and a set of attributes, if some attributes can be assigned to all elements but others only to certain elements; What would the Venn diagram look like?
[14:08:09] <pyzozord> what is "driverless" isn't that impossible? There always have to be some kind of driver, no?
[14:08:35] <mrig> pyzozord: you could use a server with net protocol instead.
[14:08:50] <pyzozord> ah
[14:08:59] <beaky> yes the idea of driverless is that rather than adhoc drivers you use something more standard like usb or ipp 
[14:09:23] *** Joins: RenAdjest2 (~RenAdjest@user/renadjest)
[14:09:51] *** Joins: zaher (~zaher@37.48.152.6)
[14:09:53] <mrig> dang I can not wrap my head around this for some reason and it seems as though it ought to be simple :|
[14:11:04] <mrig> I think perhaps it is not boolean and I'm trying to make it boolean.
[14:11:14] *** Joins: juliaEnv (~juliaEnv@ip-86-49-241-245.net.upcbroadband.cz)
[14:11:53] *** Joins: gitgood (~gitgood@80-44-12-89.dynamic.dsl.as9105.com)
[14:12:10] <pyzozord> maybe it can't be represented on a single venn diagram without loss of some information
[14:12:33] *** Quits: whatsupdoc (uid509081@id-509081.stonehaven.irccloud.com) (Quit: Connection closed for inactivity)
[14:12:45] <pyzozord> [elements ( common 
[14:12:50] *** Quits: RenAdjest (~RenAdjest@user/renadjest) (Ping timeout: 256 seconds)
[14:12:55] <pyzozord> [elements (common] properties)
[14:13:16] <pyzozord> but things that aren't common are not show what are relationships between them
[14:13:42] <GeDaMo> Why are you trying to use a Venn diagram for this?
[14:14:39] <GeDaMo> I don't even know what 'this' is :P
[14:15:23] <pyzozord> I assumed mrig is trying to create some kind of documentation for his svg parser
[14:15:33] *** Quits: kodah (~kodah@user/kodah) (Ping timeout: 268 seconds)
[14:16:04] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.2)
[14:17:14] *** Quits: Enitin (~Enitin@82.102.22.84) (Ping timeout: 272 seconds)
[14:17:55] *** Quits: amigojapan (uid86330@id-86330.brockwell.irccloud.com) (Quit: Connection closed for inactivity)
[14:18:06] *** Joins: Jacobis9000 (~josephash@host213-122-250-217.range213-122.btcentralplus.com)
[14:18:15] *** Joins: plastico (~plastico@neomutt/plastico)
[14:18:50] *** Quits: audiobirb (~audio@2603-8081-1800-00ad-2c12-98df-64de-3b19.res6.spectrum.com) (Ping timeout: 258 seconds)
[14:19:01] <mrig> GeDaMo: I am wanting to define different parsing patterns so that the correct one loads when required, probably using a map or maps. The cases are that all elements can have attributes, but that each element has its own specific subset of attributes.
[14:19:54] <GeDaMo> So what's in the circles in the Venn diagram?
[14:20:09] <mrig> so I have a set of elements, and also a set of attributes; I was wondering whether thinking about this in terms of a venn diagram could be a way to find a nice solution.
[14:20:35] <mrig> But suspect that it is the wrong approach as something seems out of kilter.
[14:20:42] <GeDaMo> I think the sets would be 'element1 attributes', 'element2 attributes'
[14:20:52] *** RenAdjest2 is now known as RenAdjest
[14:20:54] <GeDaMo> The overlap would then be the common attributes
[14:21:09] *** Joins: Enitin (~Enitin@82.102.22.84)
[14:22:02] <pyzozord> oh yeah I can see that. It would kind of look like a flower.
[14:22:17] <pyzozord> but each pad of the flower would be one element
[14:22:24] <mrig> Right that makes more sense, but does not solve the problem that I need to.
[14:23:02] *** Quits: Jacobis9000 (~josephash@host213-122-250-217.range213-122.btcentralplus.com) (Ping timeout: 256 seconds)
[14:23:22] *** Joins: LucaTM (~LucaTM@user/lucatm)
[14:23:47] <mrig> ah, so if I make elements and attributes the same 'type' as it were; then I could have a different way of displaying or drawing that?
[14:24:12] <mrig> oh that might be what GeDaMo has just said :|
[14:25:12] <mrig> right a set for each element, and its scope being the attributes.
[14:25:41] <mrig> Ok, thank you, I think that's got me in the right direction. :)
[14:26:34] <GeDaMo> If elements and attributes are two database tables, you'd have a third table connecting them together
[14:28:22] *** Quits: Inline (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431) (Quit: Leaving)
[14:28:28] <mrig> Right yes, for a database a linking table, for a Venn diagram would you use two diagrams and overlap them?
[14:28:55] <mrig> If this is a diagram of which attributes appear together it makes sense to me https://upload.wikimedia.org/wikipedia/commons/thumb/1/10/Symmetrical_5-set_Venn_diagram.svg/1200px-Symmetrical_5-set_Venn_diagram.svg.png
[14:28:55] <bayaz> Type: image/png Size: 199.7 kB 
[14:29:40] <mrig> But there is no information about the elements, I would have to increase the number of sets by an order of magnitude?
[14:29:57] <mrig> make doubles of data.
[14:30:14] *** Joins: Jacobis9000 (~josephash@host213-122-250-217.range213-122.btcentralplus.com)
[14:30:25] <GeDaMo> "A" in that diagram isn't an element, it's the set of attributes that a particular element can accept
[14:30:38] <pyzozord> I'd do for examle A list all properties for element A and just outside of the circle simply add label "element A"
[14:33:46] *** Joins: sunbae (~euk@82.85-87-220.dynamic.clientes.euskaltel.es)
[14:34:32] *** Quits: Yonle (~Yonle@user/yonle) (Read error: Connection reset by peer)
[14:35:13] <mrig> Oh, there is also the set of expressions that can be used to respond to a particular attribute.
[14:35:34] <mrig> Perhaps I need to think about a logic table or something like that to get my ideas straight.
[14:35:55] <smallville7123> pavonia: https://imgur.com/a/65aYc12 blue = root, green = grid, red = child 1, purple = child 2
[14:35:56] <bayaz> Title: imgur.com 
[14:35:57] <pyzozord> I think the expression would warrant a separate figure
[14:36:06] <pyzozord> *expressions
[14:36:10] *** Quits: sunbae (~euk@82.85-87-220.dynamic.clientes.euskaltel.es) (Changing host)
[14:36:10] *** Joins: sunbae (~euk@user/sunbae)
[14:36:55] <smallville7123> i suck at figuring out absolute coordinates even when simply providing them to my planeAt functions
[14:37:30] <pavonia> smallville7123: And how does the hierarchy looks like?
[14:38:18] <smallville7123> these are my absolute positions for a canvas of 200x200
[14:38:21] <smallville7123>     canvas.planeAt(0, 0, 200, 200, { 0, 0, 1, 1 }); // root
[14:38:22] <smallville7123>     canvas.planeAt(50, 0, 150, 200, { 0, 1, 0, 1 }); // grid
[14:38:22] <smallville7123>     canvas.planeAt(50, 0, 100, 100, { 1, 0, 0, 1 }); // child 1
[14:38:23] <smallville7123>     canvas.planeAt(100, 0, 150, 100, { 1, 0, 1, 1 }); // child 2
[14:38:41] *** Quits: sunbae (~euk@user/sunbae) (Quit: leaving)
[14:38:43] <smallville7123> pavonia: the hierarchy is root>grid>{child1, child2}
[14:39:01] *** Joins: Twipply (~Twipply@user/twipply)
[14:40:50] *** Quits: JennyB (~ircuser@S01069050ca4e3573.cg.shawcable.net) (Quit: Connection closed)
[14:41:28] <pavonia> So e.g. the width for grid is wrong then
[14:45:12] *** Joins: diamondbond (~diamondbo@175.157.123.42)
[14:45:13] <smallville7123> im trying to get this to look somewhat similar in my actual hierarchy
[14:45:14] *** Quits: Thedarkb-Desktop (~beno@2001:bb6:b404:188f:f46b:971d:efb4:c555) (Ping timeout: 250 seconds)
[14:45:21] <smallville7123> pavonia: possibly, but i am not sure
[14:46:03] *** Joins: Thedarkb-Desktop (~beno@2001:bb6:b404:188f:91bb:bd77:ba3e:76cd)
[14:46:18] <pavonia> If the whole thing has a width of 200 then the green element can't have width 150, it's half the size of the blue element
[14:46:22] *** Quits: pulse (~pulse@user/pulse) (Ping timeout: 272 seconds)
[14:46:34] *** Quits: diamondbond (~diamondbo@175.157.123.42) (Client Quit)
[14:47:02] <pavonia> But it's also unclear to me what your input and what the desired output is
[14:47:06] *** Joins: RenAdjest2 (~RenAdjest@user/renadjest)
[14:48:32] *** Joins: gggp_ (~gggp@125.33.82.254)
[14:49:14] <smallville7123> my input is 0, 0, 200, 200, and my output should be the above
[14:51:19] <smallville7123> https://bpa.st/33WA this is my hierarchy's current output
[14:51:19] *** Quits: RenAdjest (~RenAdjest@user/renadjest) (Ping timeout: 268 seconds)
[14:51:20] *** Quits: gggp (~gggp@114.245.109.49) (Ping timeout: 268 seconds)
[14:51:21] <bayaz> Title: View paste 33WA 
[14:51:53] <smallville7123> and `root window: w: 200, h: 200` is my input (with a x and y of 0 cus the window cannot be offset)
[14:55:34] *** Joins: elnavigator (~elnavigat@105.196.225.184)
[14:55:45] <smallville7123> https://bpa.st/7FGQ edited so it is aligned with above output of planeAt ... // NAME
[14:55:46] <bayaz> Title: View paste 7FGQ 
[14:55:59] *** Quits: Palgorithm (~Palgorith@user/palgorithm) (Read error: Connection reset by peer)
[14:57:24] <pavonia> Well, the thing is you seem to derive relative *and* absolute positions for those elements, but you need either of the as input to get the other one as output
[14:57:40] <pavonia> Should this layout be always the same? In that case you could just hardcode the results based on w/h
[14:58:26] <d3x0r> smallville7123 quaters are 50,100,150,... don't know where you're getting 25's from (a total of 16 square which aren't quaters)
[14:58:56] <smallville7123> the input itself is my window's frame size
[14:59:07] <smallville7123> (eg cocoa window)
[14:59:21] <d3x0r> some sorta drawable surface
[14:59:58] <d3x0r> so it's width/4 (*0,*1,*2,*3)
[15:01:25] <d3x0r> well probably don't want to draw the *0... (or *4)
[15:01:29] <smallville7123> https://bpa.st/HATA this is with the code if you do not have the previous paste that contained the code
[15:01:30] <bayaz> Title: View paste HATA 
[15:01:40] <pavonia> If your input is only width/height, your layout must be fixed. But then the hierarchy makes not really sense
[15:02:11] <pavonia> But in that case the positions can be easily hardcoded
[15:02:19] <d3x0r> ok so you're saying the child is 1/4 of the parent gotcha
[15:02:21] *** Joins: Yonle (~Yonle@user/yonle)
[15:03:10] <mrig> GeDaMo: right, the penny finally dropped, the diagram that I need to be imagining is of that linking table. :)
[15:03:53] *** Joins: ixil (~ixil@82.197.178.137)
[15:03:55] <GeDaMo> :)
[15:04:12] <smallville7123> pavonia: well, the rootView itself is just a wrapper for to translate the window size into virtual canvas so that my hierarchy is correct (eg stretch's to fit view)
[15:05:03] <pavonia> Yes, but if the layout is always the same, you can just give the positions/sizes based on the input
[15:05:31] <pavonia> e.g. green: x = width/4, y =0, w = width/2, h = height
[15:05:52] <mrig> pyzozord: Yes that makes sense now, need to be compartmentalising each part of the logic if considering it in this way; Am wondering about using bit vectors for this and am trying to see how to code it. But it makes sense that each lexical expression would have its own set of attributes to which they can be applied.
[15:06:11] <pavonia> Anyway, I have to go now. See you!
[15:06:12] <smallville7123> pavonia: like, if i will ALWAYS have a       root>grid>{c1,c2}     ?
[15:06:19] <pavonia> Yes
[15:06:22] <smallville7123> no i wont
[15:06:35] <smallville7123> i am just using this specific layout as an example
[15:06:38] <pavonia> See? So your input is not just a size, it's more complex
[15:07:42] <smallville7123> to be specific, my input is my parent's relative location
[15:07:47] *** Joins: Cleverness (~clevernes@pool-108-54-152-186.nycmny.fios.verizon.net)
[15:07:59] <smallville7123> to be specific, my input is my parent's computed child relative location. *
[15:08:22] <smallville7123> (which for a window, is always 0, 0, window_width, window_height)
[15:08:32] <pavonia> Think about what the *full* input for your example layout should be and what the desired output should be
[15:08:41] *** Quits: indiana-bones (~indignant@94.140.8.98) (Quit: Leaving)
[15:09:07] <smallville7123> but for a child, it is the parent's computed child location according to its own location and virtual canvas
[15:09:34] <pavonia> No, the input can't be the computed position, the computed position is the result
[15:09:49] <smallville7123> yes
[15:09:55] <pavonia> Whatever, back later ...
[15:09:59] *** Quits: pavonia (~user@user/siracusa) (Quit: Bye!)
[15:10:17] <smallville7123> qwq
[15:10:37] <smallville7123> d3x0r: can you help?
[15:11:14] <d3x0r> smallville7123 I'm still not sure what the scope of the problem is 
[15:11:18] <d3x0r> the...
[15:11:39] <d3x0r> what is it you're actually doing?
[15:11:57] <pyzozord> mrig: I hope I was a good rubber ducky :D
[15:12:27] <d3x0r> do you have a relative positioned rectangle you want in something?
[15:12:48] <smallville7123> im trying to compute the relative position and absolute position of my children
[15:12:49] <pyzozord> GeDaMo had actual suggestions though, but still glad if I could help even if just a bit :)
[15:13:21] <smallville7123> (absolute position is needed in order to hit detect for mouse input)
[15:13:32] *** Joins: Inline (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431)
[15:13:39] <smallville7123> (eg to figure out which child has been clicked on)
[15:14:24] <smallville7123> at the moment both my relative position and my absolute posiition is wrong
[15:14:36] <smallville7123> or rather half right and half wrong
[15:15:11] <smallville7123> as it seems to work until i get to computing child 1 which it breaks
[15:15:56] <smallville7123> the relative position for child 1 is {0, 0, 75, 100}, but the relative position i need is {0, 0, 100, 100}
[15:17:02] <smallville7123> wait no
[15:17:37] *** Joins: Rashad (~textual@149.200.255.57)
[15:17:42] <smallville7123> https://bpa.st/IOKQ
[15:17:43] <bayaz> Title: View paste IOKQ 
[15:17:52] <smallville7123> idk how to explain it :(
[15:18:19] <smallville7123> "20:42:27 d3x0r: do you have a relative positioned rectangle you want in something?" yes
[15:18:45] <d3x0r> why does the child have a position?
[15:18:53] <d3x0r> (how)
[15:19:04] <smallville7123> basically my input is relative position, and my output is relative position
[15:19:10] <d3x0r> relative is just the 0-1 scalar you have for percent
[15:19:38] <d3x0r> then just change the relative position :)
[15:20:25] <d3x0r> HTML's CSS has '%vh' and '%vw' like 55.43vh and 14.44vw - which gives you effectively 0-10000 (0.00 - 100.00) positioning
[15:20:40] *** Quits: usr123 (~usr123@49.156.67.25) (Read error: Connection reset by peer)
[15:20:48] <smallville7123> if GRID has a relative position of {50, 0, 150, 200}, and an absolute position of {50, 0, 150, 200}, and my grid splits its children up into quarters
[15:20:53] *** Quits: gitesh (uid423739@id-423739.charlton.irccloud.com) (Quit: Connection closed for inactivity)
[15:21:03] *** Joins: usr123 (~usr123@49.156.67.193)
[15:21:16] <d3x0r> but that is per display and you're against some parent, which is fine, it's still just converting it to the ratio of 0-1 (* some scalar) part of the parent
[15:21:17] *** Quits: BrianG61UK (~BrianG61U@2a02:8010:66b7:dddd:9882:5d69:12df:2a8c) (Read error: Connection reset by peer)
[15:21:34] <d3x0r> yes, it would
[15:21:41] <smallville7123> then would child 1 have a relative position of { 50, 0, 75, 0 } ?
[15:22:07] <d3x0r> oh the grid?
[15:22:12] <smallville7123> yes
[15:22:16] <d3x0r> on
[15:22:24] <smallville7123> yes
[15:22:31] <d3x0r> iis the grid some origin you can offset?
[15:22:34] <mrig> pyzozord: I'm still pondering the approach but yes, got me into the ball park as I was thinking in completely the wrong way before :)
[15:22:34] <smallville7123> eg the top left quadrent
[15:22:36] <d3x0r> like a hot-spot
[15:23:01] <smallville7123> what do you mean?
[15:23:03] <d3x0r> what does the grid actually have to do with the problem?
[15:23:19] <d3x0r> so what if you have a grid - why is that relavent?
[15:23:30] <smallville7123> the grid is my rectangle that i am trying to place other rectangles inside of
[15:23:51] <d3x0r> is this like puzzle peices/tetrisizing?
[15:24:15] <smallville7123> its more like layout
[15:24:43] <smallville7123> eg a grid lay's out its children according to rows and colums, for my grid i have 2 rows and 2 columns
[15:24:58] <smallville7123> which the rows and columns are fixed
[15:25:11] <smallville7123> (for simplicity)
[15:25:12] <d3x0r> ok - and somehow the child window is also relative within a cell on the grid?
[15:25:19] <d3x0r> or is the child window the cell?
[15:25:28] <smallville7123> the child is the cell
[15:25:59] <smallville7123> or rather, the child should fill up the cell
[15:27:51] <smallville7123> eg if the child has its own custom position then that position should be relative to the cell, and is allowed to overlap the cell (and even end up being outside of the cell entirely)
[15:28:47] <smallville7123> eg if the cell is 50 by 50, and the child has a position of 200, then the child will not be displayed inside the cell as it's position exceeds the cell's width or height
[15:29:17] *** Quits: elnavigator (~elnavigat@105.196.225.184) (Ping timeout: 245 seconds)
[15:32:57] *** Quits: jelly (jelly@user/jelly) (Ping timeout: 248 seconds)
[15:33:11] *** Joins: jelly-home (jelly@user/jelly)
[15:33:35] <smallville7123> but ignoring position and whatnot (as the position is currently intended to only be used as a virtual canvas offset thus is not directly computed as part of the relative location itself, but as a step to convert the virtual canvas into a relative position)
[15:33:49] <smallville7123> "20:55:13 d3x0r: ok - and somehow the child window is also relative within a cell on the grid?" yes
[15:34:35] <d3x0r> ok..
[15:34:52] <smallville7123> basically position in canvas = position in rectangle
[15:35:16] <d3x0r> ok
[15:36:20] *** Quits: Jacobis9000 (~josephash@host213-122-250-217.range213-122.btcentralplus.com) (Ping timeout: 268 seconds)
[15:36:29] <smallville7123> eg if the canvas is 100 wide, and the child is placed at x 0, width 50, then it's x percentage is 0%, and its width percentage is 50%, and so it should be positioned at x of 0% width and width of 50% width
[15:37:25] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[15:37:29] <smallville7123> eg if the rectangle's size is 200 wide, then x = 0% of 200, and width = 50% of 200
[15:38:12] *** Joins: elnavigator (~elnavigat@105.196.225.184)
[15:38:45] <smallville7123> does that help?
[15:42:19] *** jelly-home is now known as jelly
[15:44:41] <pyzozord> I heard that state machines are often used for animation systems in games. What does that mean? I learned yesterday that state machines in their simplest form are just normal computer code becase turing machine with tape limited n bits has computational power equvalent to a state machine with 2ⁿ states. So essentially all computer code can be viewed is state machine code. Anyway what do people 
[15:44:47] <pyzozord> mean when they talk About state machine in context of game animatin systems? Do they mean just normal code or do they mean explicitly simulated state machine with explicit states and transitions, or something in between like "normal code but it's 'modal', it pays a lot of attention to what state it is in"?
[15:45:10] *** Joins: Inhahe (inhahe@107-213-219-122.lightspeed.miamfl.sbcglobal.net)
[15:45:14] <smallville7123> if my grid's absolute position is `50, 0, 150, 200` then its child for top left quarter should have a relative position of {0, 0, 50, 100} right?
[15:45:38] <smallville7123> as mine has a relative position of {0, 0, 75, 100}
[15:46:49] <smallville7123> hmm could this be because i am not offsetting the width by x ? eg 150 - 50
[15:48:04] *** RenAdjest2 is now known as RenAdjest
[15:48:57] *** Joins: Mangy_Dog (~Mange@user/mangy-dog/x-7397214)
[15:49:00] *** Joins: Jacobis9000 (~josephash@host213-122-250-217.range213-122.btcentralplus.com)
[15:49:09] <mrig> pyzozord: I would think that a character at any one point in time has a state from which there is a set of possible next states for its animation and the games progression.
[15:49:12] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[15:49:21] *** Joins: Joanna (uid57472@id-57472.tooting.irccloud.com)
[15:50:30] <mrig> The actions reacquired to complete a game could probably be described as a string of characters that are either a regular expression within the set of expressions that complete the game, else it is failed attempt.
[15:50:30] <smallville7123> d3x0r: eg
[15:50:33] *** Joins: pulse (~pulse@user/pulse)
[15:50:35] <smallville7123> relativePosition = parentChildInfo->childRelativePosition; // use parent's computed relative position for this child
[15:50:35] <smallville7123> relativePosition.width -= relativePosition.x; relativePosition.x = 0;
[15:50:35] <smallville7123> relativePosition.height -= relativePosition.y; relativePosition.y = 0;
[15:51:08] <pyzozord> mrig: yeah it seems that way to me to. So when people talk about state machines in context of game animation systems I'm leaning towards the interpretation that "this code keeps track of just one current animation state, and it's transtions, but it does not necessarily simulate a state machine explicitly"
[15:51:14] <mrig> characters as in an expressing, each character would be a game state in this case.
[15:51:22] <mrig> expression rather
[15:51:51] <mrig> pyzozord: I think the state of play could also be seen or considered in this way.
[15:52:15] <mrig> which page you are on in the choose your own adventure bood.
[15:52:18] <mrig> book
[15:52:21] <pyzozord> mrig: meaning even the main game loop could be considered a state machine?
[15:53:02] <mrig> yes it could be, more likely running an analysis loop in parallel I would imagine, I am speculating though.
[15:53:34] *** Joins: gitesh (uid423739@id-423739.charlton.irccloud.com)
[15:53:40] <mrig> I'd do it like that I think, you might have several running that are interdependent too I suppose.
[15:53:49] <pyzozord> ah yes modern hames are parallel, I'm not sure how that corresponds to state machines
[15:54:12] *** Quits: Jacobis9000 (~josephash@host213-122-250-217.range213-122.btcentralplus.com) (Ping timeout: 272 seconds)
[15:54:27] <smallville7123> eg so that my relative positions are now
[15:54:36] <smallville7123> Diligent Engine: Info: TAG: GridView,       relative position  : {0, 0, 100, 200}
[15:54:36] <smallville7123> Diligent Engine: Info: TAG: GridView, child relative position  : {0, 0, 50, 100}
[15:54:39] <mrig> I'm running two at the moment simultaneously for my parser, one is lexing and the other is checking that the state is ok, doing analysis.
[15:54:59] <smallville7123> d3x0r: 
[15:55:03] <xeno> more important than intranasal; how to get the efficiency of the existing vaccines up? last numbers H heard were that pfizer was about 47% and moderna around 65%'ish efficient against delta infection? 
[15:55:43] *** Quits: Rashad (~textual@149.200.255.57) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[15:56:06] <mrig> they are communicating with each other, the lexing stops if the analysis says that something is wrong. Likewise you could have the analysis loop change the set of available animation routines.
[15:56:16] *** Joins: Rashad (~textual@2a01:9700:1bf8:4800:1186:96d6:2235:3f56)
[15:56:20] *** Joins: hard-drive (~hard-driv@cpe-24-163-84-4.nc.res.rr.com)
[15:56:57] *** Quits: Enitin (~Enitin@82.102.22.84) (Ping timeout: 248 seconds)
[15:57:06] <xeno> opps, wrong channel
[15:57:19] <pyzozord> mrig: wow your parsers sounds ever more impressing
[15:57:24] <mrig> the loop can be one long string if it is the scenario of the game, but it could well have lots of complete loops as paths from it that lead back to the main path.
[15:57:34] *** Joins: Enitin (~Enitin@82.102.22.84)
[15:57:36] <mrig> pyzozord: oh it is still pretty simple really.
[15:57:55] <mrig> I am just imagining what can be done with this once it becomes second nature :)
[15:58:19] <mrig> early stages, but it is a wonderful subject and tool.
[15:58:58] <pyzozord> I asked about the state machines in context of game animation systems because that guy mentions it here https://youtu.be/SBfZAVzbhCg?t=124
[15:59:00] <bayaz> Title: I Tried Making a 3D RPG Game in JavaScript 
[15:59:33] <mrig> for the time being I will be happy if it gives lucid error messages that enable the user to enter or access the correct data from command line use.
[15:59:58] *** Quits: Inhahe (inhahe@107-213-219-122.lightspeed.miamfl.sbcglobal.net) ()
[16:00:49] <mrig> another state loop, if the error message does not provide the relevant information for the user to be able to resolve the issue on the next one or two uses, then it has failed as a state machine, and the poor soul has to go off surfing the internet looking for horribly written documentation. :D
[16:00:51] <pyzozord> mrig: yeah parsers/compilers and (virtual) machines is one of the most interesting topics for me too
[16:00:53] *** Joins: zaher_ (~zaher@37.48.148.133)
[16:01:23] *** Joins: gggp__ (~gggp@114.243.61.163)
[16:01:30] <juliaEnv> why is that when coders work in a team, they always do things wrong, get upset and argue?
[16:01:58] <juliaEnv> could there be a correlation between doing things wrong and arguing?
[16:02:14] <mrig> juliaEnv: to many clever people together gum up the system with their love of complexity and confrontation.
[16:02:29] <mrig> no way around this :)
[16:02:36] <juliaEnv> but when they work solo, they do things wrong and they don't find out, and they don't argue
[16:02:45] <pyzozord> there is also eternal game for social status
[16:03:04] <mrig> teams are not well defined by controlling managers, they form naturally.
[16:03:06] *** Quits: zaher (~zaher@37.48.152.6) (Ping timeout: 258 seconds)
[16:03:12] <pyzozord> especially in professional environments where social status is intentionally tied up with incentives by the company
[16:03:19] *** Quits: lunarkitty (uid501895@user/pyra) (Quit: Connection closed for inactivity)
[16:03:23] <mrig> you cant force natures hand easily in this respect.
[16:03:47] <mrig> pyzozord: gets pretty toxic pretty fast I would imagine.
[16:03:55] <mrig> be like fermentation.
[16:04:07] *** Quits: Tempesta (~Tempesta@user/tempesta) (Quit: See ya!)
[16:04:09] <pyzozord> yep, only specific breed survives
[16:04:14] <juliaEnv> yes, it always gets toxic when multiple people point out each other's wrongs
[16:04:39] <juliaEnv> the moment somebody points out somebody else's mistake, the game is on
[16:04:42] *** Quits: gggp_ (~gggp@125.33.82.254) (Ping timeout: 268 seconds)
[16:04:57] <mrig> pyzozord: yes parsers are so cool, really looking forwards to going further with the study of them.
[16:05:16] <mrig> juliaEnv: sounds like you may have a poorly selected team.
[16:05:20] *** Quits: elnavigator (~elnavigat@105.196.225.184) (Ping timeout: 268 seconds)
[16:05:25] <pyzozord> that's kind of intentionall though, it's set up this way by the organization to extract as much performance from employees as possible without direct involvment
[16:05:32] *** Joins: Jacobis9000 (~josephash@host213-122-250-217.range213-122.btcentralplus.com)
[16:05:32] <mrig> not all people are like that, not when the dynamic forms naturally anyhow.
[16:05:46] *** Joins: Inhahe (inhahe@107-213-219-122.lightspeed.miamfl.sbcglobal.net)
[16:06:22] <mrig> pyzozord: suppose you are right, seems to be a case of cutting off your own nose though, doing this.
[16:06:55] <mrig> Big companies seem to adopt the personality of a psychopath, curious thing really.
[16:06:57] <pyzozord> and if you can't handle the mixed signals of competetive environment and synthetic politeness you are out of luck, you will be labled as unfit in the culture and ejected
[16:07:11] <juliaEnv> mrig I'm asking in general because when I work in a team, it happens a lot that they do many things wrong (I'm overqualified btw.) and they end up illogically arguing and firing me while falsely accusing me of doing my stuff wrong
[16:08:09] <pyzozord> juliaEnv: humans are not logicall nor rational
[16:08:24] <mrig> juliaEnv: Is there a wright and wrong way though?
[16:09:15] <juliaEnv> mrig an example: when I write a technical documentation (business analysis), I use the official templates from PMI. Others however are not well trained, in my opinion, when they do not use any template, and create a haphazard spaghetti document with sections that are not organized, and with content that is not ordered (not coherent)
[16:09:21] <mrig> juliaEnv: I think that it is so dependant upon individual characteristics, amongst many other complicated factors, that there is no one situation that is right here.
[16:09:46] <juliaEnv> mrig there are standards
[16:10:02] <mrig> juliaEnv: there are different approaches to standards too.
[16:10:09] <juliaEnv> mrig documents have standard templates, etc.
[16:10:24] <juliaEnv> mrig whichever standard template is OK with me
[16:10:38] <mrig> I think that most original companies emerge from the spaghetti, and then define standards retroactively.
[16:11:21] <juliaEnv> I have research to back up stanards compliance
[16:11:23] <mrig> the reality is that, however if you have to define those standards then sure it would be easier if there is a logical structure that everyone adhere to lined out.
[16:12:02] <mrig> pyzozord: I believe that humans are driven by an underlying higher order logic though.
[16:12:08] <juliaEnv> standards pretty much are like contracts that define what and how
[16:12:37] <mrig> If your standards resonate with that logic, then there will be less friction.
[16:12:44] *** Quits: Andalu30 (~andalu30@84.232.74.231) (Ping timeout: 268 seconds)
[16:12:48] *** Joins: Tempesta (~Tempesta@user/tempesta)
[16:12:51] <mrig> juliaEnv: not all standards are equal.
[16:12:57] *** Quits: Jacobis9000 (~josephash@host213-122-250-217.range213-122.btcentralplus.com) (Ping timeout: 248 seconds)
[16:12:58] *** Joins: zaher (~zaher@188.229.211.113)
[16:13:00] <mrig> some are down right dogma.
[16:13:12] <mrig> others are uplifting and reasonable.
[16:13:27] *** Joins: Jacobis9000 (~josephash@host213-122-250-217.range213-122.btcentralplus.com)
[16:13:31] *** Joins: Izem (~rcg@bras-base-london1483w-grc-43-65-95-173-5.dsl.bell.ca)
[16:13:38] <pyzozord> juliaEnv: https://xkcd.com/927/
[16:13:38] <bayaz> Title: Standards 
[16:13:49] *** Joins: joshcom (~joshcom@2600:8800:a706:2b00:3ee6:2580:650b:c8c2)
[16:14:01] *** Quits: zaher_ (~zaher@37.48.148.133) (Ping timeout: 248 seconds)
[16:14:10] *** Joins: elnavigator (~elnavigat@105.196.225.184)
[16:14:14] <mrig> pyzozord: standard 18 will prevail for some time, then 19 will wipe it from the face of the earth.
[16:14:29] *** Quits: Jacobis9000 (~josephash@host213-122-250-217.range213-122.btcentralplus.com) (Client Quit)
[16:14:35] <mrig> 19 is where its at, but will require a complete restart of the system.
[16:14:44] <mrig> now error handling ...
[16:14:49] <mrig> :D
[16:15:02] <juliaEnv> in software projects, there are 2 key approaches. plan-based (PMI is the authority for project management that offers document templates, and PM best practices) and Agile (various scrum standards bodies exist, incl. disciplined agile delivery, etc. - and documentation is still important and should be in Confluence based on standards). 
[16:15:02] <pyzozord> Assuming higher competency ground only based on the fact of following standards or not following standards sounds somewhat immature. There is a lot of context surrounding every situation.
[16:15:46] <mrig> It would also depend upon the logic of the standard, its flexibility and adaptability.
[16:15:53] <pyzozord> it's the difference between theory and practice. In theory everything works, in practice it doesn't
[16:16:13] <mrig> perhaps our logic is illogical?
[16:16:21] <juliaEnv> PM standards are actually pratitioner's standards
[16:16:22] *** Quits: Rashad (~textual@2a01:9700:1bf8:4800:1186:96d6:2235:3f56) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[16:16:47] <juliaEnv> project management is not a theoretical enterprise. It's practitioner's work.
[16:17:19] <pyzozord> juliaEnv: I don't know your specific situation, but the way you describe it is "I am right because I want to follow standards and they don't"
[16:17:19] <phogg> if by that you mean "a load of useless nonsense" then I think we can agree
[16:17:43] <mrig> Managing the projections of the business class.
[16:17:49] <pyzozord> juliaEnv: and I'm simply saying "life is more complicated than that"
[16:17:54] <juliaEnv> software engineering has an international recommended practice (ISOs, etc.)
[16:18:26] <juliaEnv> maybe a CTO is the guy who should fix this company-wide, isn't standardization of processes a CTO's job?
[16:18:30] <mrig> juliaEnv: Have you read 'The Cathedral and the Bazaar'?
[16:18:50] <juliaEnv> yes, many years ago, mrig. It was a great reading back then. :)
[16:18:55] *** Joins: zaher_ (~zaher@37.48.188.48)
[16:19:13] * mrig has an allergy of acronyms and all domains that use them.
[16:19:41] <mrig> Speaks to me of an inept language.
[16:20:14] <mrig> and a culture that is limiting its hierarchy to one type of person.
[16:20:22] <juliaEnv> pyzozord what evidence do you have that following standards company-wide isn't a higher competency?
[16:20:23] <pyzozord> CTO is common business speak. Chief Technology officer. Aka the manager of managers (of managers) in it department
[16:20:49] <juliaEnv> CTO is a chief technologist, that's the most senior technologist in the company
[16:22:03] <pyzozord> The C-suit are the "top level management" in company. Chief Executive Officer (boss in command) Chief Financial Officer (boss of accounting and budgets) Chief Technology Officer (boss of computers) and others
[16:22:22] *** Joins: rsx (~dummy@ppp-188-174-154-30.dynamic.mnet-online.de)
[16:23:02] *** Quits: zaher (~zaher@188.229.211.113) (Ping timeout: 258 seconds)
[16:23:58] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 272 seconds)
[16:24:01] * juliaEnv has realized the biggest companies, i.e. 10,000+ employees tend to have their processed based on standards
[16:24:03] <pyzozord> juliaEnv: say you have a client that is under time pressure and you have a team that can deliver mostly working product to that client on time, or take more time to follow the standards properly. If they follow the standards they might end up with (maybe) better software and for sure no client
[16:24:41] *** Quits: elnavigator (~elnavigat@105.196.225.184) (Ping timeout: 248 seconds)
[16:24:42] *** Joins: amigojapan (uid86330@id-86330.brockwell.irccloud.com)
[16:24:49] *** Joins: qu4nt1n (~qu4nt1n@78.198.214.34)
[16:25:01] <juliaEnv> you're providing a project management scenario where time is short, so you can change the cost or the scope. But you shouldn't compromise the quality.
[16:25:33] <pyzozord> the thing about the standards is that they are the best for everyone but not so great for anyone
[16:25:33] <mrig> Sure the larger the company the more regimented you would need to be, the standards chosen must have a large effect upon the atmosphere in a company.
[16:26:25] *** Joins: elnavigator (~elnavigat@105.196.225.184)
[16:26:39] <mrig> and the lifespan of the company, its behaviour in the world also.
[16:26:51] <pyzozord> juliaEnv: you missed the fact that client might not care about the quality as much as the deadline. Life is niuanced. All those standards are just a tool to help you to your goal, which in corporate world is just making money
[16:27:34] <juliaEnv> in project management, you only have time, cost, and scope. If time is short, you're only left with cost and scope. The quality cannot be compromised.
[16:28:05] <juliaEnv> if you compromise it here, you will then compromise it again, and before you know it it backfires
[16:28:54] <pyzozord> juliaEnv: besides you "lord" over your collegues with standards with ignorance for actual specific circumstances that shows that you can't handle nuanced situations (highly important in project management) and you can't handle being dypomatic with your peers
[16:29:05] <pyzozord> s/besides you/besides if you/
[16:29:07] <juliaEnv> ignorance is what you suggest
[16:29:29] *** Quits: Enitin (~Enitin@82.102.22.84) (Ping timeout: 248 seconds)
[16:29:44] *** Joins: Enitin (~Enitin@82.102.22.84)
[16:29:47] <pyzozord> also this discussion sounds like is going to wrong the wrong way and I have nothing to gain arguing so I'll stop here while I'm still in good mood :P
[16:29:49] *** Quits: Cleverness (~clevernes@pool-108-54-152-186.nycmny.fios.verizon.net) (Quit: Leaving)
[16:30:22] <juliaEnv> if you studied project management, you would be taught time, scope, cost and you would be taught never to compromise the quality when time is short.
[16:30:46] <juliaEnv> so at this point, you've wrongly accused me of ignorance
[16:31:07] <mrig> so you reduce the scope at that point.
[16:31:10] <juliaEnv> and you've wrongly accused me of causing the issues when a lack of good processes has been causing the issues
[16:31:25] <juliaEnv> good processes must remain under business pressures
[16:31:35] <juliaEnv> if they can't, find a new clinet
[16:31:38] <juliaEnv> * client
[16:31:52] <juliaEnv> let India have the bad client, etc.
[16:32:03] <mrig> you may loose your best coding assets that way.
[16:32:31] <mrig> what do you mean by that?
[16:34:05] *** Quits: Pickchea (~private@user/pickchea) (Ping timeout: 252 seconds)
[16:34:10] <juliaEnv> OK, this discussion appears to lack objectivity (it's turned subjective) and it appears to lack data from an objective research (it's based on community opinions). I've realized I can't reach an objective conclusion on this here. But, surely I'd be interested in meeting with some CTOs and asking them about the benefits of company-wide standardization of processes (using whichever framework these CTOs have deployed).
[16:34:30] <mrig> India produces some of the worlds top executives and engineers, always has.
[16:35:21] <mrig> You would do well to be mindful of your rhetoric, some of those CTO's SEO's may be indian. :D
[16:36:56] <juliaEnv> as this is no longer an objective discussion based on neutral data from an objective research, I am no longer able to you your feedback for the intended purposes. 
[16:37:08] <juliaEnv> Everyone, thank you very much for sharing your personal experiences, opinions, and your facts. 
[16:37:15] <smallville7123> d3x0r: 
[16:37:35] <juliaEnv> s/to you/to use/
[16:38:14] *** Quits: qu4nt1n (~qu4nt1n@78.198.214.34) (Quit: KVIrc 5.0.0 Aria http://www.kvirc.net/)
[16:42:24] <pyzozord> But there is a lesson for me here too. Even when I'm "right", I might not be "right right". Need to watch out for that more at my job
[16:43:30] <pyzozord> It's to easy to jump to conclusions. In most cases I'm probably missing context.
[16:43:59] <mercenary> There is no objective 'right'. There is a 'right under this set of constraints'. And this is where standards fail, they cannot always foresee all the constraints.
[16:44:54] *** Quits: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net) (Quit: Textual IRC Client: www.textualapp.com)
[16:46:33] *** Quits: mrig (~mrig@user/mrig) (Ping timeout: 248 seconds)
[16:48:11] *** Joins: mrig (~mrig@user/mrig)
[16:50:12] <mrig> mercenary: by the same logic there is no fail either, the logic is simply wrong.
[16:50:24] <mrig> illogical logic.
[16:50:34] *** Quits: Izem (~rcg@bras-base-london1483w-grc-43-65-95-173-5.dsl.bell.ca) (Quit: leaving)
[16:50:39] <mrig> pyzozord: yes context is so important.
[16:50:58] *** Quits: Fluxx (~Fluxx@user/fluxx) (Remote host closed the connection)
[16:52:38] <mercenary> mrig: meta. correct under one set of logic may be fail under different logic. Which logic to apply depends on the circumstances.
[16:52:42] *** Joins: Palgorithm (~Palgorith@46.204.81.131.nat.umts.dynamic.t-mobile.pl)
[16:52:42] *** Quits: Palgorithm (~Palgorith@46.204.81.131.nat.umts.dynamic.t-mobile.pl) (Changing host)
[16:52:42] *** Joins: Palgorithm (~Palgorith@user/palgorithm)
[16:52:45] *** Quits: Palgorithm (~Palgorith@user/palgorithm) (Remote host closed the connection)
[16:54:49] *** jinsun_ is now known as jinsun
[16:57:36] <smallville7123> if i have a view at { 0, 0, 208, 200 } and its child has a padding of 8, would the child's relative location be 8, 0, 192, 200 ?
[16:58:03] *** Joins: nekobyte (~based@user/nekobit)
[17:04:28] *** Quits: joshcom (~joshcom@2600:8800:a706:2b00:3ee6:2580:650b:c8c2) (Quit: Leaving)
[17:05:04] *** Joins: Palgorithm (~Palgorith@46.204.81.131.nat.umts.dynamic.t-mobile.pl)
[17:05:04] *** Quits: Palgorithm (~Palgorith@46.204.81.131.nat.umts.dynamic.t-mobile.pl) (Changing host)
[17:05:04] *** Joins: Palgorithm (~Palgorith@user/palgorithm)
[17:06:31] *** Joins: RougeR (~rougex250@user/rouger)
[17:07:00] *** Quits: RenAdjest (~RenAdjest@user/renadjest) (Ping timeout: 268 seconds)
[17:07:14] <mercenary> I'd say (8, 8, 192, 200) or (0, 0, 184, 192), depending on origin
[17:10:31] *** Quits: DushyantBaweja_c (uid510682@id-510682.charlton.irccloud.com) (Quit: Connection closed for inactivity)
[17:10:42] *** Joins: dudek (~dudek@185.150.236.112)
[17:16:05] *** Quits: nekodesu (~nano@user/nekobit) (Read error: Connection reset by peer)
[17:16:31] *** Joins: nekodesu (~nano@user/nekobit)
[17:18:44] *** Quits: usr123 (~usr123@49.156.67.193) (Remote host closed the connection)
[17:19:33] *** Quits: wilz (~michel@modemcable036.177-131-66.mc.videotron.ca) (Quit: WeeChat 2.8)
[17:19:50] *** Joins: wilz (~michel@modemcable036.177-131-66.mc.videotron.ca)
[17:20:38] <juliaEnv> when a scientific theory for an instance of a problem is properly identified, the scientific theory can be then properly applied to the problem
[17:21:04] *** Quits: riff-IRC (~riff-IRC@user/riff-irc) (Quit: PROTO-IRC v0.73a (C) 1988 NetSoft - Built on 11-13-1988 on AT&T System V)
[17:23:47] *** Quits: mci64 (~x@185.242.190.95) (Quit: Leaving)
[17:24:06] *** Joins: mci64 (~x@185.242.190.95)
[17:24:25] *** Quits: AsenMx (~AsenMx@78.90.248.234) (Ping timeout: 248 seconds)
[17:24:34] <juliaEnv> identifying the background theory (scientific theory, or scientific model) for an instance of a problem and then applying it to solve the problem is objectively the best way to be "right right"
[17:25:52] <juliaEnv> https://www.researchgate.net/publication/337327204_Approaches_to_Software_Process_Improvement_A_State-of-the-Art_Review
[17:25:53] <bayaz> Title: ResearchGate 
[17:26:38] *** Joins: Stefan26 (~Stefan26@78-67-218-242-no207.tbcn.telia.com)
[17:37:32] <mrig> does anyone know what the g stands for in vim when you use it instead of s for a replace type operation?
[17:39:07] <mrig> I just ran '<,'>g/\m^\s*$/d to remove empty lines, and was wondering what the g is here, goto perhaps?
[17:39:11] <juliaEnv> mrig https://vim.fandom.com/wiki/Using_g_instead_of_substitute
[17:39:11] <bayaz> Title: Using g instead of substitute 
[17:39:26] <nekobyte> hi hi
[17:39:40] <mercenary> g is a range. g/foo/ is any line containing foo
[17:41:12] *** Quits: zaher_ (~zaher@37.48.188.48) (Quit: Leaving)
[17:41:23] *** Joins: zaher_ (~zaher@37.48.188.48)
[17:42:50] *** Quits: Palgorithm (~Palgorith@user/palgorithm) (Quit: Have a nice day.)
[17:43:23] *** Quits: rubion (~rubion@cpc124306-ayle4-2-0-cust188.15-2.cable.virginm.net) (Ping timeout: 268 seconds)
[17:44:17] *** Quits: bluebird (~bluebird@user/bluebird) (Remote host closed the connection)
[17:44:36] *** Joins: rty (~rty@212.102.38.215)
[17:44:55] <mrig> oh that is really cool, thank you.
[17:45:04] <mrig> awesome command to know.
[17:45:25] *** Quits: Camilo (~hugh@host-92-20-143-244.as13285.net) (Quit: WeeChat 2.8)
[17:46:26] *** Joins: rubion (~rubion@cpc124316-ayle4-2-0-cust156.15-2.cable.virginm.net)
[17:46:26] <mercenary> removing empty lines is just g/^$/d
[17:48:02] *** Quits: lockywolf (~lockywolf@vultr-seoul-openbsd.lockywolf.net) (Ping timeout: 245 seconds)
[17:48:45] <mrig> I thought so initially but then couldn't get it to work, seems that I managed to confuse myself whilst trying to use s for this.
[17:48:57] <mrig> cool, makes sense now.
[17:50:08] <juliaEnv> I found that management is 1. planning (the process of choosing appropriate goals and actions to pursue and then determining what strategies, actions, and resources are needed to achieve those goals) 2. organizing (the process of establishing worker relationships to work together to achieve organizational goals) 3. leading (the function of articulating the vision, energizing employees, inspiring and motivating people using 
[17:50:08] <juliaEnv> vision, influence, persuasion, and effective communication skills) 4. staffing (recruiting and selecting employees for positions within the teams and departments) 5. controlling (evaluate how well you are achieving your goals, improving performance, taking actions. Put processes in place to help you establish standards, so you can measure, compare, and make decisions). Source: https://www.uagc.edu/blog/5-principles-of-great
[17:50:08] <juliaEnv> -management
[17:52:05] *** Joins: Guest45 (~Guest45@31.223.156.255)
[17:52:18] <Guest45> hellp
[17:52:20] <Guest45> hellp
[17:52:23] <Guest45> hello
[17:52:36] *** Parts: Guest45 (~Guest45@31.223.156.255) ()
[17:54:03] * juliaEnv didn't realize the need for identifying the scientific theory (background theory) for an instance of a problem he is solving. He didn't realize it was not just an academic exercise, but a practical real-world skill that's required daily in all software engineering
[17:55:09] *** Quits: rsx (~dummy@ppp-188-174-154-30.dynamic.mnet-online.de) (Quit: rsx)
[17:55:10] * juliaEnv didn't realize management was not a dirty word, but rather the above 5 principles
[17:55:43] *** Joins: tradar (~tradar@user/tradar)
[17:56:41] <mercenary> juliaEnv: again, theory and practice. In theory it is the above 5 rules. Practice appears to be rather different.
[17:58:08] * juliaEnv spent half a year creating his "knowledge base" (from opinions of others) without realizing that to solve an instance of a problem it is required to identify a scientific theory, or a mathematical model. It doesn't require opinions of others.
[17:58:33] <juliaEnv> software engineering is a practice of applying scientific theories
[17:58:42] <pulse> in theory, theory and practice are the same
[17:58:55] <juliaEnv> software engineering is practical
[17:59:09] <juliaEnv> we solve instances of problems
[17:59:23] <Caffeinated> you just contradicted yourself
[17:59:25] <Caffeinated> sigh
[17:59:36] *** Joins: terminalpusher (~terminalp@2a01:586:9790:1:e54c:14:ac68:2254)
[17:59:47] <juliaEnv> each instance of a problem we solve has some scientific theory (background theory) or a mathematical model and we need to identify it and use it to solve that instance of a problem
[18:00:20] <juliaEnv> Caffeinated I believe your misinterpretation of what I wrote has resulted in you contradicting yourself
[18:00:38] *** Joins: Pickchea (~private@user/pickchea)
[18:00:46] *** Quits: DasBrain (~DasBrain@user/dasbrain) (Killed (NickServ (GHOST command used by DasBrain_)))
[18:00:54] *** Joins: DasBrain_ (~DasBrain@user/dasbrain)
[18:01:09] *** DasBrain_ is now known as DasBrain
[18:02:05] <terminalpusher> does anyone remember what that list was called that lists all characters supported within the terminal of Windows?
[18:02:18] <terminalpusher> I think it was some code page
[18:03:40] <beaky> was it cp437 (but i think the modern Terminal for windows can display all unicode now) https://en.wikipedia.org/wiki/Code_page_437
[18:03:41] <bayaz> Title: Code page 437 - Wikipedia 
[18:04:35] <terminalpusher> Hmm yeah I think it was that although in my memory the wikipedia article looked differently when I looked at it last time
[18:08:03] *** Quits: Pickchea (~private@user/pickchea) (Ping timeout: 268 seconds)
[18:08:47] * juliaEnv has just learned that his knowledge base, made of opinions of others (and of his own as well) does not solve problems well because it goes like problem/solution, but it should go like an instance of a problem/scientific theory and why it is a good match for this intance of a problem/applied scientific theory from the previous step to solve this instance of a problem
[18:10:23] *** Quits: rustyshackleford (uid236774@brockwell.irccloud.com) (Quit: Connection closed for inactivity)
[18:10:23] <smallville7123> if rectangle A has a relative position of {0, 0, 208, 200} and rectangle A->B has a padding of 8, will A->B be located at position {8, 0, 200, 200} relative to A ? if so, if B has another rectangle B->C, could B consider its own relative position to be {0, 0, 192, 200} or {0, 0, 200, 200} ?
[18:13:47] <pulse> smallville7123, you might as well be asking if parrots can fly to the moon and back
[18:13:52] <pulse> without context it's impossible to answer that
[18:14:02] *** Joins: Andalu30 (~andalu30@84.232.74.231)
[18:14:05] <pulse> first explain in detail what you are doing or attempting to do :p
[18:14:29] <smallville7123> im trying to add padding to my hierarchy
[18:14:48] <pulse> so you're inventing some kind of visual component system?
[18:15:03] <smallville7123> yes
[18:15:08] <pulse> in that case _you_ are the one who gets to decide what padding does
[18:15:10] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[18:15:13] <pulse> you define it and you implement it
[18:15:32] <smallville7123> -_-
[18:15:34] <pulse> padding isn't some kind of well defined thing that everyone uses the same way
[18:15:42] <smallville7123> rip
[18:15:48] <pulse> it's a blanket term for "space around your component"
[18:15:55] <pulse> how that works is up to you
[18:16:07] <pulse> so asking as if someone has the authority on what padding does, is silly :p
[18:16:08] <mrig> except for the padding on the walls inside the rooms were they put GUI widget devs :D
[18:16:15] <pulse> lol
[18:16:42] *** Joins: lockywolf (~lockywolf@vultr-seoul-openbsd.lockywolf.net)
[18:16:59] <smallville7123> what ways are there to implement padding?
[18:17:01] <pulse> i mean just look at CSS, you think margin and padding have some kind of well defined meaning?
[18:17:13] <mrig> padding is the fence post problem in 2d instead of 1d :D
[18:17:19] <pulse> in CSS, margin is outside the border and padding is inside the border, that's it
[18:17:28] <pulse> but it's fully arbitrary, you could do it in any of countless ways
[18:17:50] <pulse> just pick a behavior that you find sane, and go with it
[18:17:56] <pulse> there is no authority on padding out there, trust me
[18:18:27] <pulse> you can study this if you really want to https://www.w3schools.com/css/css_boxmodel.asp
[18:18:28] <bayaz> Title: CSS Box Model 
[18:18:29] *** Joins: snake (~snake@user/snake)
[18:18:30] <smallville7123> so in CSS, padding is UB?
[18:18:39] <pulse> but i find CSS's model weird to begin with
[18:18:42] <pulse> no it's not UB
[18:18:45] <pulse> it's perfectly DB
[18:18:57] <pulse> but the behavior is silly
[18:19:24] <smallville7123> why is it silly?
[18:19:28] <mrig> CSS is silly, it is all global variables and everything inherits.
[18:19:33] <pulse> not to mention inconsistent. with something like <input type="text">, padding works differently
[18:19:35] *** Quits: Andalu30 (~andalu30@84.232.74.231) (Read error: Connection reset by peer)
[18:19:41] <pulse> or <select>
[18:19:44] <mrig> the two things that people warn you against doing.
[18:19:47] <smallville7123> oof
[18:20:07] *** Joins: Jacobis9000 (~josephash@79-67-35-231.dynamic.dsl.as9105.com)
[18:20:08] <pulse> mrig, the cascading model is an infinite source of bugs as well
[18:20:14] <pulse> it shouldn't have been cascading to begin with
[18:20:20] <pulse> single silliest thing about CSS
[18:20:23] <mrig> yes quite.
[18:20:24] <beaky> yes just 'style sheets'
[18:20:30] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[18:20:32] <beaky> elegant and minimal like a zen garden
[18:20:53] <pulse> that's why when you learn CSS they tell you again and again to just use a flat class structure
[18:20:55] <pulse> and avoid IDs
[18:20:55] <smallville7123> whats the cascading model
[18:21:08] <terminalpusher> #algorithms
[18:21:08] <pulse> smallville7123, it's what happens when people confuse theory for practice
[18:21:16] <[itchyjunk]> eh css
[18:21:20] <pulse> cascading model sounds like a great idea on paper
[18:21:28] <pulse> in practice it turns out to be abhorrent
[18:21:30] <[itchyjunk]> does that gave inheritence?
[18:21:30] <pyzozord> beaky: that reminded me of http://www.csszengarden.com/
[18:21:30] <bayaz> Title: CSS Zen Garden: The Beauty of CSS Design 
[18:22:12] <[itchyjunk]> have
[18:22:34] *** Joins: RenAdjest (~RenAdjest@user/renadjest)
[18:23:17] *** Quits: snake (~snake@user/snake) (Client Quit)
[18:23:20] <mrig> smallville7123: every child inherits from its attributes from its parent, but you can also override it too, to make matters worse. There are also ways to change the rules of that inheritance. And every client starts with different defaults and slightly different behaviour. What could possibly go wrong?
[18:23:59] <smallville7123> oof
[18:24:04] <[itchyjunk]> nothing
[18:24:10] <smallville7123> [itchyjunk]: lmao
[18:24:38] * edgar-rft wishes that most of the attributes he inherited from his parents were already overwritten
[18:24:59] <pulse> just write flat-structure CSS, save yourself some pain
[18:25:06] <[itchyjunk]> maybe you did that's why you're so messed up!
[18:25:10] <beaky> divs for everything
[18:25:15] *** Quits: JanC (~janc@user/janc) (Quit: 'k zien d'r mee weh zi)
[18:25:17] <pulse> nice, i like divs
[18:25:19] <mrig> Do not fear though, we have a super hero that can save the day!!! JavaScript that can rewrite anything anywhere whenever it likes!
[18:25:30] <smallville7123> mrig: lmao
[18:25:31] <mrig> That's the truthy!
[18:25:41] <pulse> nah, the final boss is frameworks like vue
[18:25:42] *** Joins: JanC (~janc@user/janc)
[18:25:45] *** Quits: NChief (~nchief@irc.nortv.net) (Ping timeout: 248 seconds)
[18:25:48] <Jacobis9000> I am learning CSS today
[18:25:49] <mrig> heh, did you get all that in your mental model?
[18:25:50] <smallville7123> mrig: javascript is neo in the matrix xP
[18:25:53] <pulse> now you can have semi-executable conditional classes as well
[18:25:56] <pulse> totally not confusing
[18:25:57] <beaky> i love javascript
[18:25:59] <edgar-rft> it's hard to write flat-structured cascades
[18:26:22] <pyzozord> mrig: a superhero we deserve anyway :D
[18:26:32] <mrig> smallville7123: that's perhaps more of a sticky spaghetti monster spiders web than a matrix XD
[18:26:41] <smallville7123> lmao
[18:26:52] <mrig> pyzozord: yes we did rather ask for it :D
[18:26:59] <smallville7123> what are types of padding that can be done?
[18:27:21] *** Quits: Yonle (~Yonle@user/yonle) (Ping timeout: 248 seconds)
[18:27:26] <pulse> wool, linen, spandex
[18:27:31] <mrig> thick squidgy padding that will not damage your head when you throw yourself madly against the walls.
[18:27:36] <smallville7123> lol
[18:27:39] <beaky> left padding, right padding, center padding, ...
[18:27:48] <mrig> Yes put it everywhere!
[18:27:52] <beaky> and full outer padding
[18:27:52] <mrig> :D
[18:28:07] <mrig> make the walls close in, when you put it on the outside :D
[18:28:10] <pyzozord> there is also negative padding
[18:28:24] * pyzozord whisperes worried
[18:28:28] <mrig> :D
[18:28:57] *** Joins: Yonle (~Yonle@user/yonle)
[18:29:15] *** zaher_ is now known as zaher
[18:29:16] <pyzozord> at least css made it possible, div { padding: -10px } I sperfectly logical if you css
[18:29:26] <pyzozord> s/I s/is /
[18:29:52] <smallville7123> if i have a 2D rectangular hierarchy based view system that operates purely on relative positions, how can i implement padding such as left, top, right, bottom
[18:30:28] *** Joins: snake (~snake@user/snake)
[18:30:34] <mrig> smallville7123: Will you be needing a border thickness?
[18:31:11] <smallville7123> no?
[18:31:14] *** Quits: xff0x (~xff0x@2001:1a81:52ed:2b00:c854:bd3b:6fb8:2f1e) (Ping timeout: 252 seconds)
[18:31:17] <mrig> are you sure?
[18:31:26] <smallville7123> no?
[18:31:31] <smallville7123> xP
[18:31:39] <smallville7123> idk
[18:31:54] <smallville7123> what is border thickness
[18:33:13] *** Quits: Enitin (~Enitin@82.102.22.84) (Ping timeout: 248 seconds)
[18:34:59] *** Joins: lockywolf_ (~lockywolf@vultr-seoul-openbsd.lockywolf.net)
[18:35:06] *** Quits: lockywolf (~lockywolf@vultr-seoul-openbsd.lockywolf.net) (Read error: Connection reset by peer)
[18:36:27] <smallville7123> oop you died
[18:36:32] <mrig> https://www.w3.org/TR/CSS22/box.html
[18:36:34] <bayaz> Title: Box model 
[18:36:36] <mercenary> that what changes an imaginary border into a visible border
[18:36:39] *** Joins: Enitin (~Enitin@82.102.22.84)
[18:37:14] <mrig> oop was never alive, it is a logical model that works well when formulating code.
[18:37:56] <mrig> the messaging aspect is going to become ever more important too, when concurrency is used.
[18:38:42] <juliaEnv> mrig what do you mean by "oop is a logical model"?
[18:39:01] <mrig> well you formulate your code structure with it in your minds eye.
[18:39:14] <[itchyjunk]> depressomg
[18:39:21] <mrig> I do anyhow.
[18:39:27] <[itchyjunk]> i have to learn OOP for next 5 months
[18:39:42] <juliaEnv> mrig I don't understand what you mean by formulating your structure in your minds eye
[18:39:50] <[itchyjunk]> and everyone seems to universally agree that this style of oop im about to learn is useless
[18:39:58] <juliaEnv> mrig software is structure and behavior
[18:40:02] <[itchyjunk]> maybe he means mental organization
[18:40:03] <mrig> languages that force you to use it when you are not thinking like that are a pain to use.
[18:40:37] <Caffeinated> lol
[18:40:40] <mrig> Yes mental organisation for reasoning.
[18:40:42] <juliaEnv> mrig how are you thinking then. In functions, or in procedures, or in declarations?
[18:40:48] <mrig> concepts
[18:41:31] <juliaEnv> are you thinking in concepts?
[18:41:39] <mrig> and streams 
[18:42:00] <mrig> a have this machine that will do that, and this other machine that will take those and do that to them.
[18:42:17] *** Quits: ixil (~ixil@82.197.178.137) (Ping timeout: 248 seconds)
[18:42:26] *** Joins: ixil_ (~ixil@net-2001-067c-10ec-574f-8000-0000-0000-008d.v6.ethz.ch)
[18:42:32] <mrig> this one has a tap that streams on demand, the other one makes the stream into concrete objects.
[18:43:28] <juliaEnv> when you're designing this software, is it data processing software?
[18:43:58] <[itchyjunk]> JMS stands for java message system?
[18:44:17] <juliaEnv> Java Message Service, [itchyjunk]
[18:44:28] <smallville7123> mrig: i do not have a border
[18:45:02] <juliaEnv> [itchyjunk] as in client/server, the server provides services for clients
[18:45:14] <mrig> smallville7123: I was just wondering if it was something that you might require?
[18:45:42] <smallville7123> i dont think i will require borders
[18:45:46] <mrig> All software ever does is process data.
[18:45:57] <juliaEnv> mrig are you saying you're thinking in concepts and streams instead of thinking in objects, and that's why for you oop is a logical model?
[18:46:43] <mrig> juliaEnv: objects to, but before that streams, and very much machines; Different logical units I suppose.
[18:46:54] *** Joins: death916_ (~death916@c-67-182-183-147.hsd1.ca.comcast.net)
[18:46:54] <[itchyjunk]> What does serilizable java object mean?
[18:46:57] <[itchyjunk]> "Object - An ObjectMessage object's message body contains a Serializable Java object."
[18:47:04] <juliaEnv> mrig some applications are however data processing applications, some are games, some are accounting, etc.
[18:47:09] <mrig> I cant remember what my code does if I dont have some logical model and sane narrative that goes with it.
[18:47:21] <smallville7123> [itchyjunk]: an object that extends Serializable
[18:47:22] <mrig> cant explain it either.
[18:47:27] <juliaEnv> mrig data processing applications are stream, batch, or hybrid
[18:47:34] <[itchyjunk]> oh idk what `Serializable` itself means
[18:47:39] <smallville7123> [itchyjunk]: an object that implements Serializable     *
[18:47:47] <juliaEnv> mrig OOP is a paradigm. It's not a logical model.
[18:47:49] *** Joins: NChief (~nchief@irc.nortv.net)
[18:47:50] <mrig> juliaEnv: it is all data processing at the end of the day.
[18:47:55] <[itchyjunk]> so Serializable is some type of class
[18:48:02] <mrig> juliaEnv: did you get that from a dictionary?
[18:48:03] <[itchyjunk]> wait implements
[18:48:05] <[itchyjunk]> so interface?
[18:48:09] <[itchyjunk]> i dont get it
[18:48:29] <juliaEnv> mrig while computing instructions operate on data, computing is not all about data processing
[18:48:30] <smallville7123> [itchyjunk]: it means convert this data into a stream
[18:48:48] <smallville7123> [itchyjunk]: and deserialize means convert this stream into data
[18:49:02] <[itchyjunk]> hmmmmmmm
[18:49:07] <[itchyjunk]> i thought stream was also data
[18:49:19] <smallville7123> it is
[18:49:20] <mrig> juliaEnv: those machines that are the program that is treating data at one level, are themselves made up of data.
[18:49:23] <[itchyjunk]> just read sequentially
[18:49:24] <juliaEnv> mrig we have abstractions for different things, some of them are web applications, some are games, some are stream processing programs, etc.
[18:49:28] <[itchyjunk]> as opposed to Map or somesuch
[18:49:29] *** Quits: death916 (UserNick@user/death916) (Quit: Going offline, see ya! (www.adiirc.com))
[18:49:52] <smallville7123> how the stream is encoded and decoded is implementation defined by the user
[18:50:09] <juliaEnv> mrig in electric engineering, machines are digital circuits that have electrons flowing through them
[18:50:23] *** Quits: Joanna (uid57472@id-57472.tooting.irccloud.com) (Quit: Connection closed for inactivity)
[18:50:51] <smallville7123> but basically it is equivilant to "store this object into a file" and "create a object from this file"
[18:51:16] <smallville7123> tho "file" can be any memory as long as it can be read somehow
[18:51:32] <smallville7123> eg images are basically serialized pixels
[18:52:05] <[itchyjunk]> hmm
[18:52:13] <mrig> juliaEnv: I find them to be a far better analogy for OOP than cats and dogs :)
[18:52:21] *** Quits: death916_ (~death916@c-67-182-183-147.hsd1.ca.comcast.net) (Changing host)
[18:52:21] *** Joins: death916_ (~death916@user/death916)
[18:52:25] <[itchyjunk]> i didn't know you could save and retrieve objects like that
[18:52:45] <[itchyjunk]> i can save all the state of that particular object at the time of save?
[18:52:54] <smallville7123> yes
[18:52:58] <[itchyjunk]> interesting
[18:52:59] <mrig> The stream and buffering are quintessential, fundamental.
[18:53:10] <[itchyjunk]> this must be like save a file when playing video games
[18:53:15] <smallville7123> but it largely depends on your ability to encode and decode the data
[18:53:16] <mrig> A matrices is basically that.
[18:53:19] <[itchyjunk]> you save state of things in the game
[18:53:29] *** Joins: xff0x (~xff0x@2001:1a81:52ed:2b00:c854:bd3b:6fb8:2f1e)
[18:53:30] <juliaEnv> mrig so are you coding a data processing app and are you unhappy with OOP while doing so?
[18:53:40] *** Quits: gggp__ (~gggp@114.243.61.163) (Ping timeout: 268 seconds)
[18:53:53] <mrig> I have said that I use OOP as a logical model for though and find it very useful.
[18:54:13] <juliaEnv> mrig for example in Java, you could be coding a program that reads via socket, computes some min,max,avg aggregations on data, and streams the results every second to a sink
[18:54:31] <mrig> whether coding C or go, both of which are capable of formulating such code.
[18:54:35] <[itchyjunk]> Well i wanted to learn about messages in java but reading this doc directly might not have been the smartest choice
[18:54:36] <juliaEnv> mrig for that, the declarative paradigm is easiest. 
[18:54:40] <smallville7123> for example, if your object is very complex and contains a large number of sub objects are arrays and such then it will be difficult to serialize since you may have trouble initializing a particular object's state or miss a variable and so on
[18:54:58] <mrig> juliaEnv: sure then that is one logical unit, a machine.
[18:55:11] <mrig> give it an appropriate name and away you go. :)
[18:55:30] <juliaEnv> mrig if you're coding a data processing app, the declarative paradigm comes with built-in functions and you don't have to code them, you only declare you want them used in your computation
[18:55:38] <[itchyjunk]> ah so i need to be able to sequentially load and object if i want to save it
[18:55:50] <[itchyjunk]> else i might not know what to load first in order to not break the object
[18:56:08] <mrig> juliaEnv: but the inside of an object is always declarative or procedural.
[18:56:19] <smallville7123> for example, if you are serializing an object that contains an image object, then it is best to store the path to the image and related values needed to load that image
[18:56:23] <mrig> The point is logical scope.
[18:56:30] <mrig> name spaces.
[18:57:07] <smallville7123> or you can serialize the image as well if you require the image to be restored regardless of if it exists on the file system or not
[18:57:55] <smallville7123> (if the image is part of your app's data than you do not need to serialize it and can instead just store the path to the image
[18:57:58] <[itchyjunk]> serialize means store it as 1's and 0's somewhere? But that means you are savivng the img somewhere right?
[18:58:02] <juliaEnv> mrig declarative programming, you declare your business logic without implementing the control flow. In OOP, you have to implement the control flow. So, in declarative programming you will not get inside an object.
[18:58:24] <smallville7123> serialize means store it as what ever format you like as long as it can be understood
[18:58:34] <[itchyjunk]> ah
[18:58:46] <smallville7123> eg int's, strings, mixed types, ect
[18:59:01] <smallville7123> eg TYPE_INT, 4, TYPE_STRING, "hello world"
[18:59:47] <mrig> juliaEnv: I could be confusing declarative and procedural then.
[18:59:48] <smallville7123> where the stream itself is usually the smallest available format (int8_t) required by your data
[19:01:02] *** Quits: Doffi (~doffi@91.132.197.188) (Ping timeout: 272 seconds)
[19:01:20] <smallville7123> note that this means that you also need to encode type size information as well to correctly read the types, eg int16_t cannot be stores in a single int8_t and requires to be stored inside of 2 int8_t objects
[19:01:23] <juliaEnv> mrig https://en.wikipedia.org/wiki/Declarative_programming this is popular for data processing applications. You describe the "what" should be computed without dealing with the "how" it should be computed (you will not implement algorithms, you will only declare business logic)
[19:01:24] <bayaz> Title: Declarative programming - Wikipedia 
[19:01:42] *** Joins: Doffi (~doffi@91.132.197.188)
[19:01:58] <[itchyjunk]> complicated
[19:02:05] <[itchyjunk]> but does make sense i think
[19:02:11] <smallville7123> for example, store(16); static_cast<int16_t*>(&stream[int8_t_pos])[0] = data; pos += 2;
[19:02:34] <smallville7123> for example, store(DATA_INT8_T); static_cast<int16_t*>(&stream[int8_t_pos])[0] = data; pos += 2;         *
[19:02:34] <mrig> declarative seems a little suspect to me though, I mean it is like deciding what you want to prove with statistics before you start then sculpting the data to fit.
[19:02:51] <smallville7123> for example, store(DATA_INT8_T); static_cast<int16_t*>(&stream[int8_t_pos])[0] = data; pos += int8_t_pos;         *
[19:02:52] <mrig> but I am the first to admit that I do not understand the concept.
[19:03:02] <smallville7123> i keep messing up ;-;
[19:03:11] <mrig> where as procedural with objects is very logical.
[19:03:15] <[itchyjunk]> what language is that?
[19:03:18] <smallville7123> note that this means that you also need to encode type size information as well to correctly read the types, eg int16_t cannot be stores in a single int8_t and requires to be stored inside of 2 int8_t objects, for example, store(DATA_INT8_T); static_cast<int16_t*>(&stream[int8_t_pos])[0] = data; int8_t_pos += 2;
[19:03:54] <smallville7123> [itchyjunk]: C/C++
[19:04:02] <smallville7123> but the same can be applied for java
[19:04:06] <[itchyjunk]> ive not come across different size int's. is this like 16bit computer vs 32bit?
[19:04:13] *** Quits: rany (~rany@user/rany) (Read error: Connection reset by peer)
[19:04:39] <smallville7123> int*_t is the storage length for piece of data
[19:05:01] <smallville7123> eg int8_t this_can_store_5_bytes_of_data_or_0_to_255;
[19:05:07] *** Quits: elnavigator (~elnavigat@105.196.225.184) (Ping timeout: 245 seconds)
[19:05:26] <GeDaMo> [itchyjunk]: In C, you have char, short, int, long int, long long int
[19:05:36] <juliaEnv> mrig no, declarative programing is just an abstraction that makes computation more high-level. You tell it the functions you want applied on data, and it will compile an algorithm for you and execute it
[19:05:40] <GeDaMo> int8_t is one byte
[19:06:20] *** Quits: Crescendo (~Crescendo@user/crescendo) (Ping timeout: 258 seconds)
[19:06:59] <mrig> juliaEnv: these paradigms appear to me to be abstractions applied on top of languages, which seems to be what you are saying also.
[19:07:08] *** Joins: elnavigator (~elnavigat@105.196.225.184)
[19:07:08] *** Joins: rany (~rany@user/rany)
[19:07:19] <mrig> I am interested by the logic, that which is in the language in these  cases.
[19:07:29] <juliaEnv> mrig consider that SQL is declarative programming, so you tell it to select foo, bar where for.name = "Johnny" AND bar.location="Gotham". Then it compiles a valid algorithm and executes it on your multicore CPU in a way that may utilize indexes, etc. and you get what you declared you wanted.
[19:07:35] <mrig> am more comfortable thinking like that.
[19:08:27] <juliaEnv> SQL is widely popular for data processing applications. When you require sequencing of computation steps, it however becomes cumbersome 
[19:08:56] <mrig> sure yes, because it is dealing in static sets and not a stream.
[19:09:06] <juliaEnv> another example of declarative programming is functional programming
[19:09:19] <smallville7123> eg uint8_t this_can_store_1_byte_of_data_or_0_to_255; uint16_t this_can_store_2_bytes_of_data_or_0_to_65535; uint32_t this_can_store_4_bytes_of_data_or_0_to_4294967295; uint64_t this_can_store_8_bytes_of_data_or_0_to_18446744073709551615; uint128_t this_can_store_16_bytes_of_data_or_0_to_340282366920938463463374607431768211356; 
[19:09:41] *** Joins: mambang (~mambang@user/mambang)
[19:09:55] <juliaEnv> mrig even a stream can have multiple processing steps
[19:10:05] *** Joins: Crescendo (~Crescendo@user/crescendo)
[19:10:12] <smallville7123> uint128_t is usually a compiler extention though
[19:10:14] <InPhase> smallville7123: Your variable names go too far.
[19:10:19] <smallville7123> XD
[19:10:35] <juliaEnv> mrig but you can identify a scientific theory or a mathematical model from literature and apply it to solve your computation well
[19:10:54] <InPhase> I know we're supposed to stick to within 80 characters, but that means line lengths, not variable lengths.  :)
[19:10:58] *** Joins: zoey (~zoey@2a02:8084:a080:9e00:7c8c:4b88:b1b8:70e1)
[19:11:10] *** Quits: Enitin (~Enitin@82.102.22.84) (Ping timeout: 272 seconds)
[19:11:16] <smallville7123> also, both float and double can be serialized and deserialized (i do not know what happens if you serialize NaN or INF
[19:11:28] <InPhase> Typically you get "nan" and "inf".
[19:11:33] <mrig> juliaEnv: logical models :)
[19:11:37] *** Quits: elnavigator (~elnavigat@105.196.225.184) (Ping timeout: 248 seconds)
[19:11:50] <smallville7123> yes but i meant like, the numarical values of such
[19:12:11] <juliaEnv> mrig they are not called logical models. They are called scientific models, or mathematical models
[19:12:13] <InPhase> nan does not have a numerical value.  inf's numerical value is the abstraction of infinity, or -inf for negative infinity.
[19:12:27] *** Joins: elnavigator (~elnavigat@105.196.225.184)
[19:12:36] <InPhase> inf is not a number, but an abstract concept, which is why it does not get represented with digits.  That's all there is to it.
[19:12:44] <juliaEnv> mrig conceptual, logical, physical, and other models are specific types of models in specific contexts
[19:12:54] <smallville7123> eg NaN serialized to uint64_t and INF serialized to uint64_t
[19:12:55] <mrig> juliaEnv: you are arguing semantics here.
[19:13:02] <mrig> they are logical models.
[19:13:10] <juliaEnv> mrig as well as terminology
[19:13:16] <juliaEnv> mrig they are not logical logical
[19:13:22] <juliaEnv> mrig they are just models
[19:13:29] *** Joins: BrianG61UK (~BrianG61U@2a02:8010:66b7:dddd:cfb:411f:8f95:89f9)
[19:13:29] <juliaEnv> mrig <any> models
[19:13:44] <smallville7123> you would probably need a boolean to check if the float is explicitly NAN or INF to correctly serialize and deserialize
[19:13:45] <InPhase> smallville7123: That's not serializing, that's casting.
[19:14:10] <InPhase> smallville7123: Attempting to convert nan to uint64_t is an error.  You can handle it by triggering an error, or by choosing a preferred default depending on purpose.
[19:14:22] <smallville7123> yea
[19:14:39] *** Quits: Crescendo (~Crescendo@user/crescendo) (Ping timeout: 268 seconds)
[19:14:45] <InPhase> smallville7123: Attempting to convert inf to uint64_t is an overflow error, the same as any other out of range value.  You can handle it by setting to the max value, or by triggering an error, depending on purpose.
[19:15:05] *** Quits: tradar (~tradar@user/tradar) (Quit: tradar)
[19:15:05] <InPhase> Negative infinity to uint64_t is sketchy, but can be 0 or an error.
[19:15:12] *** Quits: el_kevino (~mote@2604:a880:400:d1::901:5001) (Quit: WeeChat 3.2)
[19:15:30] *** Joins: BrianG61UK_ (~BrianG61U@2a02:8010:66b7:dddd:e5d0:36e1:dc57:f933)
[19:15:42] <smallville7123> eg bool nan = isnan(val); store(nan); if (!nan) store(val);
[19:15:58] <InPhase> For a value like 2^64+5 to uint64_t you have to choose between modulo arithmetic of 5, or 2^64-1 as max, or an error.  It depends on purpose.
[19:16:35] <smallville7123> if (load()) val = load();
[19:17:19] <smallville7123> (assuming correct serialization and deserialization order)
[19:17:57] <smallville7123> if (load<bool>()) val = load<float>();    *
[19:18:33] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 248 seconds)
[19:18:56] <smallville7123> tho i think float is normally 32 bits (eg 4 bytes)
[19:19:05] <smallville7123> and double is 8 bytes
[19:19:12] <smallville7123> (64 bits)
[19:19:16] <rty> according to boost.endian not all floating-point numbers are serializable. although I didn't find an elaborate explanation on why not exactly
[19:19:20] <smallville7123> depends on the system
[19:19:40] *** Quits: herjazz (~herjazz@p6758124-ipngn30801marunouchi.tokyo.ocn.ne.jp) (Quit: leaving)
[19:19:43] <smallville7123> anyway
[19:19:54] <InPhase> rty: Everything is serializable if you control the serialization.
[19:20:39] <smallville7123> if i have a 2D rectangular hierarchy based view system that operates purely on relative positions, how can i implement padding such as left, top, right, bottom
[19:20:39] <InPhase> rty: The only outstanding question is whether or not it is meaningful when you deserialize it.
[19:20:53] <InPhase> For example, if you serialize a pointer to disk, then load it back in another process, this is useless.
[19:21:01] <smallville7123> yup
[19:21:34] <smallville7123> unless it is a pointer from shared memory
[19:21:54] <smallville7123> tho in that case you can just store the pointer itself in shared memory instead
[19:22:36] <InPhase> For floats, one issue is that nan actually has multiple representations in the standard formats.  But most of these are meaningless differences, as all of them are not numbers.  So going to "nan" and back to a float does not always produce the same bit values, but those bit values never meant anything.  You could augment hex data after "nan" if you really cared, but no one does.
[19:23:03] <smallville7123> yup
[19:24:04] *** Quits: mambang (~mambang@user/mambang) (Quit: Leaving)
[19:25:58] <pulse> safest way is to serialize float is to extract mantissa and exponent and store as int
[19:26:45] *** Joins: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk)
[19:27:12] <InPhase> pulse: That only reproduces if you have the same float format.
[19:27:26] <InPhase> pulse: If you have the same float format, you can just store the bytes.
[19:27:39] *** Joins: Julius_ (~Julius76@2a02:810b:c640:514:64e8:2a3d:aa18:bae0)
[19:27:46] <pulse> technically yes
[19:28:04] *** Quits: Inhahe (inhahe@107-213-219-122.lightspeed.miamfl.sbcglobal.net) ()
[19:28:19] *** Joins: Crescendo (~Crescendo@user/crescendo)
[19:29:07] *** Quits: pandakekok9 (~job@wikimedia-commons/pandakekok9) (Remote host closed the connection)
[19:29:11] *** Joins: Enitin (~Enitin@82.102.22.84)
[19:29:40] *** Quits: leduyquang753 (~leduyquan@user/leduyquang753) (Quit: Gotta go, see you guys later.)
[19:30:57] <InPhase> You can get those same benefits by simply serializing as an ascii hex float.  This is as perfect as you can get for any standard float, and any reasonable variant of float.  Almost no one does this, and pretty much no floating point serialization library supports this, and the reasons for this are completely unclear.  Perhaps no one ever learned how to be comfortable with hex float values, but it 
[19:31:03] <InPhase> works just the same as decimal.
[19:31:17] *** Joins: Inhahe (inhahe@107-213-219-122.lightspeed.miamfl.sbcglobal.net)
[19:31:33] *** Joins: RenAdjest2 (~RenAdjest@user/renadjest)
[19:33:16] *** Quits: Yonle (~Yonle@user/yonle) (Read error: Connection reset by peer)
[19:34:17] *** Quits: rany (~rany@user/rany) (Ping timeout: 245 seconds)
[19:35:37] *** Quits: RenAdjest (~RenAdjest@user/renadjest) (Ping timeout: 268 seconds)
[19:35:44] *** Joins: rany (~rany@user/rany)
[19:36:12] *** Pixi_ is now known as Pixi
[19:36:47] *** Joins: cthulchu (~Cthulchu@194.44.110.194)
[19:37:01] *** Joins: Yonle (~Yonle@user/yonle)
[19:37:25] <juliaEnv> mrig you may find this useful. OOP is concerned mainly with the way that code is organized, such as grouping a code into units along with the state that is modified by the code. Declarative paradigm is when the programmer merely declares properties of the desired result, but not how to compute it. (i.e. SQL)
[19:38:20] *** Joins: Yonle__ (~Yonle@user/yonle)
[19:38:49] *** Quits: arm (~arm@c-76-108-122-204.hsd1.fl.comcast.net) (Remote host closed the connection)
[19:38:50] <juliaEnv> mrig programming paradigms are a way to classify programming languages based on their features. (so declaring properties of the desired result without coding an algorithm is a feature of a programming language in which you can declare it, for example it is a feature of SQL)
[19:38:55] *** Quits: Yonle__ (~Yonle@user/yonle) (Read error: Connection reset by peer)
[19:38:55] *** Quits: Yonle (~Yonle@user/yonle) (Read error: Connection reset by peer)
[19:38:59] <mrig> juliaEnv: logic here referring, I think, to the subset of models that have a functional purpose, such that they be of use. This utility leads to their eventual wider adoption or acceptance; This is essentially why i say that think in logical models when coding; If they do not work then they are not memorable.
[19:39:47] <juliaEnv> mrig every scientific model or mathematical model has some purpose for which it may be used
[19:39:48] *** RenAdjest2 is now known as RenAdjest
[19:40:04] <juliaEnv> mrig so, all valid models are created for some purpose
[19:40:10] <mrig> juliaEnv: I think I understand the paradigms now thank you, I am less familiar with declarative, but essentially see it as a displacement of the logic into the language to fit the thought pattern of the user.
[19:40:29] <mrig> juliaEnv: this is logic yes.
[19:40:38] <mrig> logos is used to construct it.
[19:40:49] <juliaEnv> mrig no, this is design
[19:40:53] *** Quits: gitesh (uid423739@id-423739.charlton.irccloud.com) (Quit: Connection closed for inactivity)
[19:41:09] <mrig> though logos might also be described by logic.
[19:41:19] <mrig> this is semantics.
[19:41:35] *** Joins: Blankspace (~androirc@user/blankspace)
[19:41:59] *** Quits: nekobyte (~based@user/nekobit) (Ping timeout: 258 seconds)
[19:42:08] <juliaEnv> mrig logos is an argument with a logical appeal (the other two are pathos, ethos)
[19:42:28] <Stefan26> pathos
[19:42:29] <pyzozord> mrig: I think just wants to argue for the sake of arguing
[19:42:42] <pyzozord> s/I think/I think this one/
[19:43:20] *** Joins: LiftLeft (~LiftLeft@154.21.28.123)
[19:43:22] <juliaEnv> mrig models are designed. See mathematical modeling if you want to design a mathematical model, for example. https://en.wikipedia.org/wiki/Mathematical_model
[19:43:23] <bayaz> Title: Mathematical model - Wikipedia 
[19:44:00] <mrig> juliaEnv: see bootstrapping compilers to understand my perspective.
[19:44:04] <juliaEnv> mrig scientific models are designed using the hypothetico deductive method (scientific method)
[19:44:19] <mrig> pyzozord: different people have very different perspectives. 
[19:44:19] *** Quits: nekodesu (~nano@user/nekobit) (Quit: free(neko);)
[19:44:51] <juliaEnv> mrig design models are designed from existing design concepts based on design requirements
[19:44:55] <juliaEnv> mrig that's design science
[19:45:22] <[itchyjunk]> not all scientific models would incorporate all the principles of scientific methods
[19:45:39] <[itchyjunk]> the string `theory` stuff is not testable
[19:45:46] <mrig> juliaEnv: the scientific method is to validate empirical evidence, sure; Wise discrimination is critical here.
[19:45:47] <juliaEnv> mrig I believe OOP is qualitative, hence design science while for example computing the shortest path is quantitative, hence a mathematical model
[19:45:52] <Stefan26> java string theory
[19:46:18] *** Joins: nekodesu (~nano@user/nekobit)
[19:46:19] <mrig> juliaEnv: oop just describes something that people do.
[19:46:31] <mrig> to organise logic when they code.
[19:47:01] <mrig> that people have chosen to hard code this into languages is another matter altogether.
[19:47:12] <juliaEnv> mrig software is both structure and behavior, so OOP describes both the behavior of software and the structure (which concepts it is constructed from, how they are organized, etc.)
[19:47:34] <mrig> when calculating your shortest path, you might traverse the graph with many objects :)
[19:47:44] <juliaEnv> mrig software behavior is the run time behavior
[19:47:57] *** Joins: RenAdjest2 (~RenAdjest@user/renadjest)
[19:48:14] <juliaEnv> mrig there is a mathematical model for different algorithms that do that. For example A* vs. Djikstra
[19:48:37] <juliaEnv> mrig their performance also differs.
[19:48:49] *** Quits: RenAdjest2 (~RenAdjest@user/renadjest) (Remote host closed the connection)
[19:49:04] <pulse> A* is just Dijkstra + heuristic
[19:49:40] <juliaEnv> mrig OOP is a concept where you group the part of the state with the operations that manage that part of the state
[19:49:49] <mrig> juliaEnv: :D
[19:50:03] <mrig> I have a fair idea of what OOP is by now.
[19:50:34] <juliaEnv> but languages do not hardcode how you organize your concepts into the language
[19:50:35] <mrig> it's that paradigm in which dogs inherit from cats and square from rectangles :D
[19:51:11] <juliaEnv> not if you do software engineering
[19:51:22] *** Joins: gitesh (uid423739@id-423739.charlton.irccloud.com)
[19:51:53] <juliaEnv> software engineering is a practice of applying scientific theories
[19:52:16] *** Quits: RenAdjest (~RenAdjest@user/renadjest) (Ping timeout: 268 seconds)
[19:52:20] <pulse> lol. no it's not
[19:52:33] <juliaEnv> surely a domain model where dogs inherit from cats is invalid
[19:52:36] <Stefan26> too many things are a practice of applying theories
[19:52:41] <mrig> pulse: it is if you partake in the religion of science.
[19:52:43] <juliaEnv> pulse what evidence do you have for your claim?
[19:52:45] <pulse> software engineering is a practice of juggling 10 different problems on an already missed deadlines
[19:53:17] <pulse> like i said in theory, theory & practice are equal :p
[19:53:39] <mrig> Some do enforce their logical models, these declarative languages for example, sound to me as thought they are doing exactly this.
[19:53:46] <mrig> juliaEnv: ^
[19:53:59] <pulse> real world software engineering is dirtier than a mechanic covered in oil from head to toe
[19:54:05] <pulse> i'm just sayin'
[19:54:17] *** Quits: mjbatty_ (~mjbatty@82.2.17.205) (Ping timeout: 248 seconds)
[19:54:23] <pulse> </jovial>
[19:55:10] <Stefan26> im employed as a software engineer, but all i do is sit in excel with error code mappings deciding what the 10000 error codes in sub-system X should be translated to in sub-system Y
[19:55:22] *** Joins: herme5 (~mote@2604:a880:400:d1::901:5001)
[19:55:33] <juliaEnv> OK, this discussion appears to lack objectivity (it's turned subjective) and it appears to lack data from an objective research (it's based on community opinions). I've realized I can't reach an objective conclusion on this here. But, surely I'd be interested in meeting with some OOP gurus and asking them about the benefits of saving time when applying a company-wide standardization of work processes (using whichever 
[19:55:33] <juliaEnv> framework these CTOs have deployed).
[19:55:38] *** herme5 is now known as el_kevino
[19:56:25] <mrig> juliaEnv: you said the exact same thing not an hour ago, are you getting your responses from a dictionary?
[19:56:27] <mrig> :P
[19:56:58] <juliaEnv> when time is too short, a project managemer has to reduce the scope or increase the cost. Comprosing quality is unacceptable.
[19:57:04] <mrig> not that there is anything wrong with so doing, I am very progressive when it comes to intelligence :D
[19:57:13] <Stefan26> unacceptable by whom?
[19:57:17] <pulse> Stefan26, i 100% believe you
[19:57:17] <juliaEnv> mrig no, but it's the exact same instance of a problem as an hour ago
[19:57:24] <smallville7123> is it normal for 24 / 100 to equal 0.239999995
[19:57:30] *** Joins: Xaldafax (~xaldafax@cpe-198-72-160-101.socal.res.rr.com)
[19:57:35] <pulse> smallville7123, yes
[19:57:54] <juliaEnv> mrig a scenario where the time is short, and so you have to reduce the scope or increase the cost. 
[19:57:59] *** Quits: Blankspace (~androirc@user/blankspace) (Remote host closed the connection)
[19:58:07] <mrig> smallville7123: if you do it by hand on paper, you will eventually run out of paper.
[19:58:10] <Stefan26> I maintain a legacy payment solution at a bank, it's sort of information architecture but no fancy algorithms 
[19:58:18] <smallville7123> hmm ok
[19:58:27] <pulse> i heard some banks still use floppies
[19:58:40] <pulse> smallville7123, you shoudl read https://docs.oracle.com/cd/E19957-01/806-3568/ncg_goldberg.html
[19:58:41] <bayaz> Title: What Every Computer Scientist Should Know About Floating-Point Arithmetic 
[19:58:44] <Caffeinated> juliaEnv: why do you keep posting the same thing over and over?  you can't control the chat on irc...accept it
[19:59:02] <Stefan26> do any of you do the kind of software engineering where you actually have algorithms problems on a day to the basis, e.g. searching and optimizing?
[19:59:05] <pulse> if that article's too heavy, read https://floating-point-gui.de/
[19:59:07] <bayaz> Title: The Floating-Point Guide - What Every Programmer Should Know About Floating-Point Arithmetic 
[19:59:28] <InPhase> smallville7123: This happens any time you divide by prime factors which are not shared by the representation base.  10 is composed of 2's and 5's.  binary is composed of only 2's.
[19:59:35] <juliaEnv> Caffeinated why can't I post the same answer twice, when the same problem instance occurs twice on IRC?
[19:59:40] <InPhase> smallville7123: So it is equivalent to 1/3 in decimal, or 1/7 in decimal.
[19:59:58] <Caffeinated> sigh
[20:00:17] * pulse performs the turing test on juliaEnv 
[20:00:26] <juliaEnv> well, how is what I answer supposed to be different when the problem instance is not different?
[20:00:27] <Caffeinated> pointless
[20:01:00] <pulse> same way you don't write two exact same sentences if you're writing a novel? :p
[20:01:03] <smallville7123> is it normal for roundf(1.223) to return 6.97714914E+30
[20:01:09] <pulse> it's more literary that way, har har
[20:01:11] <juliaEnv> no
[20:01:19] <InPhase> smallville7123: No, that's broken.
[20:01:27] <pulse> smallville7123, no, that's far away from normal
[20:01:30] <smallville7123> rip lldb
[20:01:39] <juliaEnv> in mathematics, the same 1+1 addition problem has the same 2 answer
[20:01:45] <smallville7123> (lldb) p (float)roundf(1.223)
[20:01:45] <smallville7123> (float) $33 = 6.97714914E+30
[20:01:46] *** death916_ is now known as death916
[20:01:47] <pulse> juliaEnv, english isn't mathematics
[20:01:52] <juliaEnv> sometimes it is, pulse
[20:01:57] <pulse> not really
[20:02:03] <Stefan26> the same symbols can mean different things
[20:02:15] <Stefan26> everything is vague
[20:02:22] <juliaEnv> I have a problem and I can't solve it. what is one plus one? That's English being mathematics.
[20:02:36] <juliaEnv> so you're wrong, pulse if you think that English isn't sometimes mathematics. It is.
[20:02:47] <pulse> any english sentence has many interpretations for example; in mathematics you generally want as few interpretations as possible, ideally 1
[20:02:58] <Stefan26> mathematics can be really fun
[20:03:04] <juliaEnv> that's your ability to decode a message, pulse. It's part of communication.
[20:04:09] <pulse> "i didn't say he stole the money" <- this sentence drastically changes meaning based on which word is emphasized :)
[20:04:22] <pulse> kinda fun
[20:04:32] <juliaEnv> but you can communicate a mathematical problem in English, as well as a non-mathematical problem.
[20:04:45] <smallville7123> would this be the correct way to scale padding ?    padding_x = roundf((childInfo->view->padding.x / drawTools_w) * w);
[20:04:53] <pulse> it's hard though, the reason we have math is so we don't have to use cumbersome english for mathematical problems
[20:04:59] <pulse> heck a single equation can express pages of text
[20:05:10] <pulse> even more so in physics
[20:05:27] <juliaEnv> that doesn't mean you can't use English to communicate accurately
[20:05:49] <pulse> it's much more difficult at the very least
[20:05:59] <juliaEnv> you code a message that its receivers decode
[20:06:24] <juliaEnv> it's called communication skills
[20:07:24] <mrig> ah the g in :g// in vim is for global :)
[20:07:46] <Stefan26> you like vim mrig?
[20:07:56] *** Quits: Nact (~l@host-85-27-122-107.dynamic.voo.be) (Quit: Konversation terminated!)
[20:07:56] <Stefan26> and awk?
[20:08:35] <mrig> vim is great yes, awk too but I've not used awk that much.
[20:09:00] <mrig> awk with bash is pretty powerful.
[20:09:15] <mrig> for formatting output mostly.
[20:10:37] <Stefan26> awk is fun, it's my goto tool
[20:12:37] *** Joins: gambl0re (~gambl0re@104.247.245.205)
[20:13:22] <mrig> You never stop learning new things with vim and it always stays relevant, which is awesome.
[20:13:48] *** Quits: Enitin (~Enitin@82.102.22.84) (Ping timeout: 258 seconds)
[20:15:05] *** Quits: Jacobis9000 (~josephash@79-67-35-231.dynamic.dsl.as9105.com) (Ping timeout: 268 seconds)
[20:16:47] <juliaEnv> since the problem of not having enough time has came up twice in 2 hours, it is worth mentioning that these are 2 instances of a general problem. And that the scientific theory to solve this problem is in the body of knowledge of management science.
[20:18:12] <juliaEnv> I've sent the 5 principles of management an hour ago, but I will highlight the 5th one. Controlling: evaluate how well you are achieving your goals, improving performance, taking actions. 
[20:18:12] <juliaEnv>  Put processes in place to help you establish standards, so you can measure, compare, and make decisions. 
[20:18:24] *** Joins: Enitin (~Enitin@82.102.22.84)
[20:18:35] <|smlckz|> smallville7123: try `(float)roundf((float)1.223)` or better `(float)roundf(1.223f)`
[20:19:16] <smallville7123> if i have a 2D rectangular hierarchy based view system that operates purely on relative positions, if i want to support padding (eg css box model) then do i need to store the padding seperately with my relative positions? as adding padding and storing it directly as part of the relative position (eg the relative position with padding applied to it) breaks my hierarchy ;-;
[20:19:57] <smallville7123> |smlckz|: that works in lldb :)
[20:20:13] <juliaEnv> this is what we can do today to improve processes, so that projects will perform better:https://www.researchgate.net/publication/337327204_Approaches_to_Software_Process_Improvement_A_State-of-the-Art_Review
[20:20:20] <[itchyjunk]> <juliaEnv> that doesn't mean you can't use English to communicate accurately
[20:20:23] <[itchyjunk]> for math, it does.
[20:20:41] <[itchyjunk]> some concepts only exists mathematically not in other nautral languages
[20:20:51] *** Joins: roent (~roent@user/roent)
[20:21:28] *** Quits: jaysicks (~jaysicks@178-164-134-171.pool.digikabel.hu) (Ping timeout: 258 seconds)
[20:22:06] <juliaEnv> no, you're wrong. You can use English to communicate accurately. One example is sufficient to prove this thesis. No amount of anti-examples will change that.
[20:22:17] <[itchyjunk]> No, you're wrong.
[20:22:21] <[itchyjunk]> Math is it's own language.
[20:22:21] <juliaEnv> no, you're wrong
[20:22:27] <[itchyjunk]> Doesn't have a 1:1 with english.
[20:22:31] <[itchyjunk]> No, you're wrong.
[20:22:33] <juliaEnv> no, you're wrong
[20:22:42] <[itchyjunk]> "one example is enough .."
[20:22:43] <[itchyjunk]> no
[20:22:49] <[itchyjunk]> Proof by example doesn't work.
[20:22:59] <[itchyjunk]> Infinite number of examples still doesn't count as proof.
[20:23:11] <[itchyjunk]> Take inf.
[20:23:18] <[itchyjunk]> inf exists in extended R.
[20:23:25] <[itchyjunk]> Makes perfect sense to use it.
[20:23:28] <juliaEnv> simply, itchy, you have not followed the scientific method and because of that your conclusions are invalid
[20:23:32] <[itchyjunk]> It wouldn't in english.
[20:23:38] <Julius_> No proof that something exists (like in the case of Covid-19) seems to work nowadays
[20:23:44] <[itchyjunk]> Math doesn't follow scientific method.
[20:23:48] <juliaEnv> it does
[20:23:51] <[itchyjunk]> No.
[20:23:59] <juliaEnv> science follows the scientific method
[20:24:03] <juliaEnv> yes
[20:24:04] <[itchyjunk]> Math and science is distinct.
[20:24:05] <[itchyjunk]> No.
[20:24:09] <juliaEnv> Math is a science
[20:24:10] <Julius_> Currently science is following the money
[20:24:18] <[itchyjunk]> Math and science is distinct.
[20:24:21] *** Joins: jaysicks (~jaysicks@91-83-5-150.pool.digikabel.hu)
[20:24:26] <juliaEnv> no, that's pseudoscience, Julius_
[20:24:28] <[itchyjunk]> Inf exists in extended R.
[20:24:43] <[itchyjunk]> Inf in common english doesn't make sense in the way it does in extended R.
[20:24:46] <juliaEnv> Mathematics is certainly a science in the broad sense of "systematic and formulated knowledge"
[20:24:53] <Julius_> juliaEnv, seems the whole world thinks that this corrupt science we have at the moment is the real science
[20:24:55] <[itchyjunk]> Claim that math can be completly explained in english is wrong.
[20:25:03] <[itchyjunk]> Now you're changing your tone.
[20:25:09] <[itchyjunk]> Math has aspects of science.
[20:25:11] <|smlckz|> smallville7123: i think sth like this happened: union f { float f32; double f64 } n = { .f64 = 1.223 }; and, you looked at (float)roundf(*(float*)&f);
[20:25:11] <[itchyjunk]> Math is not science.
[20:25:22] <|smlckz|> interesting conversation..
[20:25:33] <[itchyjunk]> It doesn't have the notion of taking a proof and testing it and adjusting.
[20:25:38] <Julius_> [itchyjunk], that's debatable
[20:25:39] <[itchyjunk]> A proof either works or doesn't.
[20:25:47] <[itchyjunk]> It's either a theorem or not.
[20:26:06] <[itchyjunk]> It can't be a theorem for lower accuracy and not a theorem for higher accuracy.
[20:26:14] <[itchyjunk]> This is simply not what math is.
[20:26:22] <[itchyjunk]> Math also has it's own language.
[20:26:26] <[itchyjunk]> Independent of english.
[20:26:35] <[itchyjunk]> Not everything in math translates to english.
[20:26:49] <juliaEnv> this has entirely subjective. I will not continue in this discussion. Objectively, I can accurately communicate mathematics in English and one example is enough to provide that I can (that it is possible) and I've already communicated whats one plus one? Two. (addition). I've communicated it accurately.
[20:26:52] <Julius_> smlckz, I doubt that your union trick will work
[20:26:58] <[itchyjunk]> No, nothing subjective about math.
[20:27:02] <juliaEnv> * this has gone entirely subjective
[20:27:08] <[itchyjunk]> You cannot translate all mathematical concepts into english.
[20:27:10] <Julius_> [itchyjunk], everything is subjective
[20:27:12] <juliaEnv> let's be objective
[20:27:18] <juliaEnv> science is not subjective
[20:27:25] *** Quits: cthulchu (~Cthulchu@194.44.110.194) (Ping timeout: 268 seconds)
[20:27:25] <[itchyjunk]> Science is subjective.
[20:27:26] <Julius_> Science is highly subjective
[20:27:34] <[itchyjunk]> Observer / observed.
[20:27:36] <juliaEnv> pseudoscience is subjective (meaning opinion-bsed)
[20:27:43] <juliaEnv> science is objective (meaning proof-based)
[20:27:44] <[itchyjunk]> No, science is subjective.
[20:27:46] <Julius_> Objectivity does not exist
[20:27:50] <|smlckz|> Julius_: see lldb problem smallville7123 was having..
[20:27:53] <[itchyjunk]> Take General Relativity and frame of refrences.
[20:27:59] <[itchyjunk]> A frame of refrence is subjective.
[20:28:08] <[itchyjunk]> You pick one arbitrarily.
[20:28:16] <Julius_> smlckz, all Im saying is that this is evil bit-hacking magic
[20:28:18] <juliaEnv> well, if you believe that, then you're not scientists
[20:28:25] <[itchyjunk]> Lol.
[20:28:32] <[itchyjunk]> Yes, tell me how i don't know math and sciences.
[20:28:50] <[itchyjunk]> You seem to just be posturing to appear as an erudite.
[20:28:54] <juliaEnv> surely, you don't know scientific research methods, [itchyjunk]
[20:28:54] * [itchyjunk] goes does something else
[20:28:59] <smallville7123> ok i think i know why
[20:29:05] <[itchyjunk]> Surely I don't.
[20:29:07] <Julius_> How come that the real scientists always have to hear things like "You a re not a real scientist" from people who are NOT scientists?
[20:29:10] <[itchyjunk]> Tell me more about math.
[20:29:18] <mrig> juliaEnv: science is about empirical evidence right?
[20:29:19] <|smlckz|> Julius_: i'm trying to imagine how else can it be => [[ <smallville7123> is it normal for roundf(1.223) to return 6.97714914E+30 ]]
[20:29:26] <[itchyjunk]> Julius_, people with access to internet think they know a lot more these days
[20:29:37] <juliaEnv> mrig https://en.wikipedia.org/wiki/Scientific_method
[20:29:38] <bayaz> Title: Scientific method - Wikipedia 
[20:29:39] <mrig> juliaEnv: now what does empirical mean?
[20:29:53] <[itchyjunk]> lol links to wiki page on scientific method
[20:29:54] <Julius_> smlckz, I was not saying that this problem doesnt result from what you meantioned
[20:30:01] <juliaEnv> mrig science is not only about empirical evidence
[20:30:08] <juliaEnv> mrig science is about an empirical method
[20:30:13] <pulse> juliaEnv, you realize many things that scientists framed as objective have been disproven over time right
[20:30:17] * mrig links juliaEnv to their senses.
[20:30:21] <juliaEnv> mrig a method for acquiring knowledge
[20:30:23] <smallville7123> if i store padding as PART of my relative position, then `child_absolute_position = parent_absolute_position + child_relative_position` will automatically become padded to the parent's padding right?
[20:30:24] <pulse> like, you know. newtonian physics :p
[20:30:32] <juliaEnv> mrig the method is called hypothetico deductive method
[20:30:39] <Julius_> [itchyjunk], maybe they do know a lot more. But all this "A real scientist would never ..." or "Intelligent people dont do ..." is so stupid
[20:30:41] <pulse> science isn't about 100% truth, it's about the closest approximation to truth that we can produce
[20:30:54] <[itchyjunk]> Julius_, some people in this situation might
[20:31:02] <[itchyjunk]> but here, it's quite evident that they don't
[20:31:07] *** Joins: nekobyte (~based@user/nekobit)
[20:31:22] <mrig> juliaEnv: yes based upon hypothetical situations, and things deduced from repeated patterns.
[20:31:22] <Julius_> pulse, truth is relative
[20:31:23] *** Joins: zaher_ (~zaher@37.48.189.227)
[20:31:24] <juliaEnv> I'm not too keen on subjective opinions about science, so please pardon me from your discussion. Objectively, there is something called philosophy of science with a discussion of science I'm keen on. Thanks for your understanding.
[20:31:26] *** Quits: juliaEnv (~juliaEnv@ip-86-49-241-245.net.upcbroadband.cz) (Quit: Going offline, see ya! (www.adiirc.com))
[20:31:34] <[itchyjunk]> Julius_, take for example Banach–Tarski paradox and try to explain it in english
[20:31:37] <[itchyjunk]> it doesn't translate
[20:31:45] <[itchyjunk]> but it makes perfect mathematical sense
[20:31:53] <Julius_> [itchyjunk], does it? Not sure
[20:31:53] <[itchyjunk]> end up as a "paradox" in english
[20:31:55] <Caffeinated> lol
[20:32:02] <[itchyjunk]> but isn't on in math itself
[20:32:10] <[itchyjunk]> Julius_, how do you explain it in english?
[20:32:24] <smallville7123> eg A child abs = {0 + 4, 0 + 0, 204 - 0, 200 - 0}; A->B child abs = { 0 + 4, 0 + 0, 204 - 100, 200 - 100}
[20:32:36] <Julius_> [itchyjunk], honestly I think we have a wrong understanding of what a paradox is. I dont see a reason why we think that a paradox means that something cant exist
[20:32:37] <mrig> JuliaEnv does not want to be contradicted by their subjects.
[20:32:41] <mrig> :D
[20:32:49] <Julius_> [itchyjunk], I dont explain math in English :)
[20:33:03] <[itchyjunk]> Julius_, how would a contradiction `exist`
[20:33:13] <[itchyjunk]> Julius_, anyone who studies math in any serious capacity wouldn't.
[20:33:22] <smallville7123> wait no
[20:33:28] <mrig> knowledge is awesome.
[20:33:32] <Julius_> [itchyjunk], that is the question most mathematics dont seem to understand, but the answer is very simple: Imaginary boolean logic
[20:33:35] *** Quits: zaher (~zaher@37.48.188.48) (Ping timeout: 268 seconds)
[20:33:39] <mrig> systems of knowledge are awesome.
[20:33:51] <Julius_> [itchyjunk], I dont study math
[20:34:06] <[itchyjunk]> you've hovered in the math channel once in a while
[20:34:12] <[itchyjunk]> you have interest in it, at least
[20:34:25] <Julius_> [itchyjunk], name a reason why the universe would stick to our everyday logic and hence a paradox couldnt exist. I dont see one
[20:34:40] *** Quits: LadyCailin (LadyCailin@user/ladycailin) (Quit: Bye bye!)
[20:34:48] <[itchyjunk]> We take the rules of the universe and build logic around it, not the other way around
[20:34:57] <[itchyjunk]> it's not that universe has to stick to our explanation of it
[20:34:58] *** Quits: roent (~roent@user/roent) (Quit: My client has gone to sleep. ZZZzzz…)
[20:35:05] *** Joins: soapsudsxx (~soapsudsx@141.193.188.144)
[20:35:05] <[itchyjunk]> it's that we are trying to explain what the universe does
[20:35:14] <Julius_> [itchyjunk], so you are god and can tell the universe how to behave? Somehow I doubt that
[20:35:18] <[itchyjunk]> and insofar as we can tell, universe doesn't seem to entertain certain things
[20:35:27] <[itchyjunk]> but this might change in future, sure. maybe we don't know something yet
[20:35:34] <[itchyjunk]> when did i say that?
[20:35:34] *** Joins: roent (~roent@user/roent)
[20:35:46] *** Quits: roent (~roent@user/roent) (Client Quit)
[20:35:59] <Julius_> [itchyjunk], I think things like quantum physics already have shown us that the universe doesnt give a fuck about our everyday logic
[20:36:10] <[itchyjunk]> mm idk about that.
[20:36:18] <[itchyjunk]> QM has shown some odd behaviors
[20:36:27] <[itchyjunk]> but it's still compatible mostly with "everyday logic"
[20:36:36] <Julius_> So far I dont see a reason why the universe would obey a set of made up axioms, and not a different set
[20:36:40] <[itchyjunk]> How often do you disappear from earth and pop up in mars?
[20:36:49] *** Joins: Optimus (~risto@87.227.237.59)
[20:36:52] <[itchyjunk]> It's a possibility in QFT as Q tunneling.
[20:36:54] <Julius_> Logic is relative as well, you know ;)
[20:37:08] <[itchyjunk]> Never said universe has to obey made up axioms.
[20:37:18] <[itchyjunk]> But it seems that the universe does obey some sort of axioms.
[20:37:25] <[itchyjunk]> Conversavtion laws seem universal.
[20:37:26] <smallville7123> if i store padding as PART of my relative position, then `child_absolute_position = parent_absolute_position + child_relative_position` will automatically become padded to the parent's padding right? eg assuming a padding of 4, A child abs = {0 + 4, 0 + 0, 204 - (204 - 204), 200 - (200 - 200) }; A->B child abs = { 0 + 4, 0 + 0, 204 - (204 - 100), 200 - (200 - 100) }
[20:37:30] <[itchyjunk]> QM doesn't invalidate that.
[20:37:39] <[itchyjunk]> So conversation seems to be fundamental.
[20:37:44] *** Quits: death916 (~death916@user/death916) (Ping timeout: 252 seconds)
[20:37:51] <[itchyjunk]> Regardless of the hypothesis you pick to explain the models you have.
[20:38:20] *** Quits: Optimus (~risto@87.227.237.59) (Client Quit)
[20:38:31] <Julius_> [itchyjunk], not even math obeys these axioms, since they lead to paradoxes
[20:38:42] <mrig> grammar has been shown to be emergent.
[20:38:48] <|smlckz|> hmm as i imagined http://ix.io/3w5L
[20:38:48] <bayaz> Type: text/plain; charset=utf-8 
[20:38:57] <[itchyjunk]> Convervation principles is obeyed it seems.
[20:39:04] <[itchyjunk]> Find me an example of where this gets broken.
[20:39:11] <[itchyjunk]> Create energy out of nothing, say.
[20:39:13] <mrig> in humans, well I'm not sure what that means in the field of linguistics, should investigate further really.
[20:39:19] <[itchyjunk]> And i'll believe in what you say.
[20:40:00] <Julius_> [itchyjunk], QM saying that things can exist and not exist at the same time is a pretty clear indicator that our everyday logic can be flushed down the toilet
[20:40:09] <[itchyjunk]> It doesn't say that.
[20:40:14] <[itchyjunk]> That's you translating it to english.
[20:40:26] <[itchyjunk]> It says a wave function exists
[20:40:29] <Julius_> If it says that or not is relative
[20:40:42] <[itchyjunk]> It may or maynot be relative but it's relevent here.
[20:40:48] <[itchyjunk]> Because that's now what QM says.
[20:40:54] <[itchyjunk]> That's what you are saying.
[20:40:58] <Julius_> The relativity is relative as well, true
[20:41:13] <[itchyjunk]> This is why not every scientific concept translates to english in a 1:1 way
[20:41:14] *** Joins: MDP87900 (~MDP87900@189.34.140.159)
[20:41:26] <[itchyjunk]> which is precisely what hte other person was saying they can do
[20:41:41] *** Joins: death916 (~death916@c-67-182-183-147.hsd1.ca.comcast.net)
[20:41:41] *** Quits: death916 (~death916@c-67-182-183-147.hsd1.ca.comcast.net) (Changing host)
[20:41:41] *** Joins: death916 (~death916@user/death916)
[20:42:50] <Julius_> I think excluding paradoxes in mathematics is a big problem, and it will take time until mathematics understand this
[20:43:02] <[itchyjunk]> math doesn't exclude them
[20:43:16] <[itchyjunk]> contradiction is a tool used in math
[20:43:19] <[itchyjunk]> to disprove things.
[20:43:27] <[itchyjunk]> see `proof by contradiction`
[20:43:31] <Julius_> We normally see tham as a sign of contradiction, i.e. a reason to believe that something can't be
[20:43:47] *** Joins: jamea (~jamea@177.239.85.103)
[20:43:55] <[itchyjunk]> find me a contradiction that exists, then.
[20:43:57] <Julius_> Just doing mathematics with the standard set of axioms is a big mistake
[20:44:03] <[itchyjunk]> lol.
[20:44:29] <Julius_> Honestly I think we are surrounded by contradictions that exist, but we are so used to them, that we dont see it
[20:44:40] <[itchyjunk]> Give an example.
[20:44:48] <Julius_> How? I dont see tham
[20:44:56] <smallville7123> if i store padding as PART of my relative position, then `child_absolute_position = parent_absolute_position + child_relative_position` will automatically become padded to the parent's padding right? eg assuming a padding of 4:
[20:44:56] <smallville7123> ROOT child abs = {0 + 4, 0 + 0, 208 - (208 - 204), 200 - (200 - 200) }; /* {4, 0, 204, 200} */
[20:44:56] <smallville7123> ROOT->GRID child abs = { 4 + 0, 0 + 0, 204 - (204 - 100), 200 - (200 - 100) }; /* {4, 0, 100, 100} */
[20:45:39] <[itchyjunk]> you're asking me to believe that contradiction exists out there in blind faith
[20:45:40] *** Joins: mjbatty_ (~mjbatty@82.2.17.205)
[20:45:53] <Julius_> [itchyjunk], I didnt ask you anything
[20:45:53] <[itchyjunk]> How is this any different than someone telling me to just believe god exists out there somewhere 
[20:45:54] <[itchyjunk]> ?
[20:46:12] <[itchyjunk]> you did, you said mathematicians should allow for contradiction in a fundamental sense.
[20:47:12] <Julius_> [itchyjunk], the point is, even if I showed you such a contradiction, you could always use a different kind of logic to explain it without a contradiction, since this is precisely what it means that even logic is relative
[20:47:14] *** Joins: Jacobis9000 (~josephash@79-67-35-231.dynamic.dsl.as9105.com)
[20:47:33] <[itchyjunk]> not sure what you are saying at this point.
[20:47:50] <[itchyjunk]> when i throw a ball up, you could explain it comming down via existence of god
[20:48:03] <[itchyjunk]> and i could claim the existence of a universeal force called gravity
[20:48:13] *** Joins: AbleBacon (~AbleBacon@user/AbleBacon)
[20:48:21] <[itchyjunk]> i should not be allowed to do that and believe in some contradictory explanation?
[20:48:24] <Julius_> [itchyjunk], it's like people who argue if the earth revolves around the sun or the sun around the earth. Both is equally true, it just depends on the point of view. The same is true for logic
[20:48:30] <[itchyjunk]> this is appeal to irrationality
[20:48:46] <[itchyjunk]> both is equally true?
[20:48:49] <[itchyjunk]> idk about that one.
[20:49:16] <Julius_> [itchyjunk], you say irrationality as if there would only be one true logic and everything else is not true. But all logics are equally valid at the same time
[20:49:28] <[itchyjunk]> No, i am not saying any of that.
[20:49:32] <[itchyjunk]> You're infering this.
[20:50:14] <[itchyjunk]> What you're saying is encapsulated in philosophy by "post modernsism"
[20:50:34] <[itchyjunk]> And a lot of principles there ends up in reductio ad absurdum.
[20:50:51] <Julius_> All I am saying is: If something results in a contradiction in one logic, and in a different logic it doesnt, we should continue to work with the contradiction in the first logic, since otherwise we wouldnt end up with the same reult in both logics
[20:50:59] <[itchyjunk]> And it's dealt with by saying absurdum is a valid framework for dealing with reality
[20:51:10] <[itchyjunk]> but take a rocket launch for example
[20:51:22] <[itchyjunk]> can you take an absurdists stance and consistantly launch a rocket?
[20:51:29] *** Quits: Jacobis9000 (~josephash@79-67-35-231.dynamic.dsl.as9105.com) (Client Quit)
[20:51:31] <[itchyjunk]> This is left as an exercise to the reader.
[20:52:10] <Julius_> [itchyjunk], yes, you can take any logic or point of view and use them to successfully launch a rocket. They are all equally valid
[20:52:26] *** Quits: kikijiki (~Thunderbi@user/kikijiki) (Quit: kikijiki)
[20:52:29] <[itchyjunk]> any view?
[20:52:33] <[itchyjunk]> think you missed the whole point
[20:52:50] <beaky> nice i like kerbal space program
[20:52:51] <[itchyjunk]> there are only very few frameworks even in modern science that allows for consistant launch of rockets
[20:52:51] <Julius_> The result is not dependant on the point of view
[20:53:00] <[itchyjunk]> hint: netwonian physics doesn't suffice.
[20:53:33] <Julius_> [itchyjunk], actually you can very well launch a rocket just with newtonian physics
[20:53:49] <[itchyjunk]> Julius_, you can launch projectiles
[20:53:54] <Julius_> Heck, even a bottle half full of water and some pressure is enough to lauch a rocket
[20:53:54] <[itchyjunk]> not every rocket is a projectile.
[20:53:58] <[itchyjunk]> Example: F9.
[20:54:09] <[itchyjunk]> you're confusing rockets with projectiles, it seems.
[20:54:17] <beaky> yes i thought the rocket equation was newtonian
[20:54:40] <Julius_> Depends how you define rocket. I would argue it is a rocket since not all energy is released in the beginning
[20:54:43] <[itchyjunk]> beaky, modern rockets account for relativity
[20:54:46] <[itchyjunk]> like modern satellites
[20:55:01] <[itchyjunk]> not all rockets is a projectile.
[20:55:08] <Julius_> beaky, an equal and opposite reaction. That's all you need for a rocket
[20:55:11] <[itchyjunk]> if you definition says all rockets is a projectile, it's a shitty definition.
[20:55:32] <Julius_> Every kid can build a rocket at home
[20:55:46] <[itchyjunk]> "equal and opposite reaction" is the principle that explains the momentum generated.
[20:55:58] <pulse> i saw a yt video about some kid building a fusion reactor in his bedroom
[20:56:03] <pulse> kids these days
[20:56:06] <[itchyjunk]> in garage?
[20:56:09] <pulse> can't even trust them not to solve world's energy problems anymore
[20:56:12] <[itchyjunk]> if so, that kid has a horrible future
[20:56:13] <Julius_> pulse, :)
[20:56:15] <[itchyjunk]> he got into meth
[20:56:23] <[itchyjunk]> he was featured in a ted talk once
[20:56:26] <beaky> nice wish i could build things in my bedroom
[20:56:35] <pulse> https://www.youtube.com/watch?v=Wh5TUlzBwLw
[20:56:37] <bayaz> Title: How a 12-year-old achieved nuclear fusion - Guinness World Records 
[20:56:45] <Julius_> Wish things would happen in my bedroom as well
[20:57:01] *** Quits: zaher_ (~zaher@37.48.189.227) (Ping timeout: 268 seconds)
[20:57:10] <pulse> err.. that's a different kind of fusion Julius_ :o
[20:57:20] <beaky> lol
[20:57:21] <Julius_> pulse, I would be careful. You never know how much work was actually done by his dad
[20:57:48] <pulse> idk, i think his dad probably gets physics lectures from him
[20:57:48] <smallville7123> xP
[20:57:57] <smallville7123> lmao
[20:58:12] *** Joins: Pickchea (~private@user/pickchea)
[20:58:24] <Julius_> And somehow you almost never hear about those prodigy kids again
[20:58:46] <smallville7123> next we will have 8 year old rocket scientists xP
[20:58:53] <[itchyjunk]> https://hardware.slashdot.org/story/16/11/14/0039257/radioactive-boy-scout-reportedly-passes-away-at-age-39
[20:58:54] <bayaz> Title: 'Radioactive Boy Scout' Reportedly Passes Away At Age 39 - Slashdot 
[20:58:57] <pulse> probably because puberty turns them into kirk hammett
[20:58:59] <[itchyjunk]> this guy
[20:59:02] <[itchyjunk]> EPA shut him down
[20:59:06] <Julius_> smallville7123, it#s not hard to build a small rocket with 8 years
[20:59:13] <[itchyjunk]> apparently, can't work with radioactive stuff in garage
[20:59:15] <pulse> before 12: fusion reactor after 12: DARKNESS IMPRISONING ME
[20:59:17] <smallville7123> haha
[20:59:33] <[itchyjunk]> Julius_, society has a tentency to overhype what kids do
[20:59:33] <Julius_> [itchyjunk], bananas are radioactive
[20:59:39] <pulse> nice, i like bananas
[20:59:50] <Julius_> [itchyjunk], yes, society is nuts
[21:00:04] <Julius_> pulse, I bet you like the glow
[21:00:13] <pulse> yes i love things that glow
[21:00:20] <pulse> you know if you pick up a glowing sword in a videogame
[21:00:27] <pulse> you instantly know it's better than all the non-glowing swords
[21:00:28] <Julius_> pulse, add some sprincles to it
[21:00:41] <pulse> that's why lightsabers are universally accepted as the coolest weapon
[21:00:50] <pulse> they're made of glow
[21:00:50] <[itchyjunk]> i dont accept that
[21:00:52] <Julius_> Makes sense
[21:00:58] <mrig> [itchyjunk]: lol, where did you find that article :D
[21:01:00] <[itchyjunk]> light saber seems mediocre to me
[21:01:20] <[itchyjunk]> mrig, id heard about some of these prodigy kids ending up in homeless shelters and such
[21:01:25] <[itchyjunk]> and had looked into it long time ago
[21:01:26] <Julius_> What happens if you drop a lightsaber with the tip facing down?
[21:01:46] <mrig> not laughing at the poor fellows premature demise, but more so that it be common knowledge.
[21:01:47] <[itchyjunk]> Julius_, why don't you use your newtonian laws to figure it out?
[21:02:02] <Julius_> [itchyjunk], I don't have kyber cristals :(
[21:02:19] <mrig> [itchyjunk]: sure yes, peaking early, not a good thing if not well managed.
[21:03:06] <[itchyjunk]> kids acheiving very little gets super hyped
[21:03:14] <[itchyjunk]> that one kid who made prosthetics hand
[21:03:22] *** Joins: menace (~someone@2001:a61:3403:7901:6541:b122:10d3:484f)
[21:03:29] <[itchyjunk]> standard ones cost like $12k and she figured out how to make one for $800
[21:03:32] <Julius_> Not just true for kids
[21:03:37] *** Quits: Neverloads (NeverLoad@freakshells.net) (Ping timeout: 248 seconds)
[21:03:37] <mrig> well it makes good short term journalist material.
[21:03:40] *** Quits: menace (~someone@2001:a61:3403:7901:6541:b122:10d3:484f) (Changing host)
[21:03:40] *** Joins: menace (~someone@user/menace)
[21:03:43] <[itchyjunk]> a few years later, she figured out why the other one cost so much
[21:04:21] <mrig> There was a kid who was doing some pretty influential stem cell work a while back, if memory serves.
[21:04:25] <pulse> to wield a light saber you must of course first master the force
[21:04:27] <Julius_> Always remember: Socienty is nuts!
[21:04:36] <mrig> Accredited their success to Aron Schwartz.
[21:04:43] <[itchyjunk]> pulse, netwon didn't really master it
[21:04:53] <[itchyjunk]> so newton wouldn't get a light saber i guess
[21:04:55] <Julius_> pulse, does the "light" of a light saber add momentum to the sword?
[21:05:04] <pulse> but newton invented calculus in his bedroom
[21:05:12] <[itchyjunk]> some of these `child prodigy` also get a lot of help from adults
[21:05:12] <pulse> Julius_, no
[21:05:15] <[itchyjunk]> the one working on cancer
[21:05:26] <[itchyjunk]> had like a team of 30 helping them
[21:05:37] <[itchyjunk]> when that fell apart, so did their carrer
[21:05:38] <Julius_> pulse, that is because there was nothing else going on in Newton's bedroom ... Damn, why didn't I invent anything yet
[21:05:56] <mrig> pulse: was he not at a sleepover with Leibniz?
[21:06:01] <pulse> lmao
[21:06:05] *** mci64 is now known as manin
[21:06:05] <[itchyjunk]> Newton was religious
[21:06:06] <pulse> those records are permanently sealed mrig 
[21:06:11] <mrig> ah!
[21:06:13] <[itchyjunk]> he thought bible was literal discription of things
[21:06:22] <Julius_> [itchyjunk], like Greta Thunberg is getting a lot of help from the evil globalist elite
[21:06:28] <[itchyjunk]> he probably only spend 20% of his time doing physics
[21:06:38] <[itchyjunk]> Julius_, idk who that is
[21:06:50] <Julius_> [itchyjunk], good for you!!
[21:07:46] <Julius_> Btw, I would argue that Leibniz invented calculus
[21:07:55] <[itchyjunk]> they both did
[21:08:01] <Julius_> I know :)
[21:08:03] <[itchyjunk]> convergent evolution
[21:08:11] <Julius_> But Leibniz was first
[21:08:21] <[itchyjunk]> just like "eyes" evolved independently at different times
[21:08:25] <[itchyjunk]> idk about that
[21:08:35] <[itchyjunk]> informal calculus existed before both of them
[21:08:43] <Julius_> Did they (eyes)? Interesting
[21:08:43] <[itchyjunk]> they both kinda formalized it a bit
[21:08:56] <[itchyjunk]> but cauchy was the one who actually formalized it
[21:08:56] * mrig has become a linguistic parser grammar nerd, it is now official.
[21:09:05] <[itchyjunk]> Julius_, yes i think it's called convergent evolution
[21:09:15] <Julius_> Yes, you said that
[21:09:24] <[itchyjunk]> "Biologists estimate the eye has evolved independently more than 50 times in species such as flies, flatworms, molluscs and vertebrates."
[21:09:30] <[itchyjunk]> https://cosmosmagazine.com/biology/all-eyes-on-the-prize/#:~:text=Biologists%20estimate%20the%20eye%20has,selection%20could%20have%20produced%20it.&text=It's%20called%20convergent%20evolution.
[21:09:31] <bayaz> Title: The mastery of convergent evolution 
[21:09:33] *** Quits: terminalpusher (~terminalp@2a01:586:9790:1:e54c:14:ac68:2254) (Remote host closed the connection)
[21:09:50] <[itchyjunk]> Wish i could learn more biology
[21:09:52] <[itchyjunk]> but shit's too hard
[21:10:08] *** Quits: manin (~x@185.242.190.95) (Quit: Leaving)
[21:10:36] *** Joins: manin (~x@185.242.190.95)
[21:10:59] *** manin is now known as Guest7976
[21:11:02] *** Joins: kurtthem1ker (~kurt@S010644a56e3e0ee9.cn.shawcable.net)
[21:11:19] <mrig> [itchyjunk]: phosphorus is a component of DNA, sensitivity to light is kind of inherent, inevitable.
[21:11:27] *** Joins: Auron (~Auron956@user/auron)
[21:11:43] *** Quits: kurtthemaker (~kurt@S010644a56e3e0ee9.cn.shawcable.net) (Quit: leaving)
[21:11:51] *** Joins: Akuli (~Akuli@82-203-165-39.bb.dnainternet.fi)
[21:11:56] *** Quits: Guest7976 (~x@185.242.190.95) (Client Quit)
[21:13:19] <mrig> considering the role that sunlight plays in photosynthesis too, can be no escaping eyes; Even sunflowers follow the sun.
[21:13:22] <[itchyjunk]> all molecules have some sensitivity to electromagnetic spectrum
[21:13:25] *** Quits: bytecrawler (~bytecrawl@gateway/tor-sasl/bytecrawler) (Ping timeout: 244 seconds)
[21:13:35] <mrig> The 'eye' in the tip of plant roots are very cool too.
[21:13:37] <[itchyjunk]> i don't think you can look at the properties of phophorous and make calims about evolution of eyes
[21:13:48] *** Joins: manin (~x@185.242.190.95)
[21:14:32] <Julius_> I think, I know what mrig meant
[21:15:00] <Julius_> It makes sense that some parts of the body become more sensitive to light if all DNA is sensitive to light anyway
[21:15:15] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[21:15:38] <[itchyjunk]> if dna is sensitive to light and that is the reason for eyes to exist
[21:15:45] <[itchyjunk]> why not the entire organism be photosensitive?
[21:15:53] <Julius_> Did you know that some humans can notic electromagnetic fields, like certain animals can (of course not as well) ?
[21:15:57] <[itchyjunk]> we're made of same genetic material everywhere, afterall
[21:16:22] <mrig> Julius_: all of biology and chemistry are explained using or based upon quantum electrodynamics, so it is kind of fundamental.
[21:16:30] <Julius_> [itchyjunk], because it had no evolutionary advantage for our species, probably
[21:16:34] <mrig> well molecular biology that is.
[21:16:54] <Julius_> mrig, yeah, unless we find a better theory
[21:17:07] <[itchyjunk]> physical chemistry uses QM to explain stuff
[21:17:08] <mrig> [itchyjunk]: I personally differ from a chimpanzee by only one or two percent :D
[21:17:12] <[itchyjunk]> biology hardly uses QM.
[21:17:29] <[itchyjunk]> mrig, that doesn't say much though
[21:17:34] *** Joins: Neverloads (NeverLoad@freakshells.net)
[21:17:43] <[itchyjunk]> you defer to another humans by a percent or so too
[21:17:47] * mrig peals a banana from the top of the ladder.
[21:18:11] *** Quits: inom (~inom@176.59.116.194) (Remote host closed the connection)
[21:18:13] <[itchyjunk]> Julius_, sure but that's doesn't explain the core mechanism
[21:18:14] * mrig looks about sheepishly to see if the police noticed.
[21:18:31] <Julius_> [itchyjunk], what core mechanism? Core mechanism of what?
[21:18:39] <[itchyjunk]> like you can't really know the properties of water by looking at hydrogen and oxygen independently, at least based on our current understanding
[21:18:48] <[itchyjunk]> Julius_, of convergent evolution
[21:19:18] <Julius_> Did you know that liquid water actually has 2 different states of matter?
[21:19:32] <mrig> [itchyjunk]: what does that tell you about the geometry of the electromagnetic particles that are giving you the very distinct impression of water?
[21:19:33] <[itchyjunk]> well, liquid is a state of matter
[21:19:46] <Julius_> [itchyjunk], no, there are 2 different state of liquid water
[21:19:53] <[itchyjunk]> idk what "electromagnetic particles" means
[21:20:18] <[itchyjunk]> "Particle" isn't a fundamental term 
[21:20:30] <[itchyjunk]> "fundamental particle" refer to some specific things in standard model
[21:20:32] <[itchyjunk]> QFT and such
[21:20:41] <[itchyjunk]> other than that, "particle" is not well defined
[21:20:44] <pyzozord> mrig: 🚨🚨🚨
[21:21:18] <Julius_> [itchyjunk], depending on the temperature, liquid water transitions from one liquid state of matter to a liquid different state of matter with distinct properties, and some researchers think this had been important in evolution since it used to be warmer
[21:21:19] <[itchyjunk]> Julius_, liquid is a state of matter
[21:21:40] <mrig> pyzozord: heh
[21:21:43] <Julius_> [itchyjunk], there are 2 different states of liquid for water, how often do I have to repeat that?
[21:21:44] <[itchyjunk]> https://en.wikipedia.org/wiki/State_of_matter
[21:21:45] <bayaz> Title: State of matter - Wikipedia 
[21:21:55] <[itchyjunk]> solid, liquid, gas and plasma
[21:22:02] *** Joins: whatsupdoc (uid509081@id-509081.stonehaven.irccloud.com)
[21:22:17] <Julius_> Actually there are 3 different states of matter that are all different kinds of plasma
[21:22:27] * pyzozord points at mrig to the nearest internet officer
[21:22:30] <[itchyjunk]> no
[21:22:34] <Julius_> And there is even superconducticity missing as a state of matter
[21:22:38] <[itchyjunk]> plasmas have ion disassociations
[21:22:41] <[itchyjunk]> gas doesn't
[21:22:56] <[itchyjunk]> superconductivity is a property of matter
[21:22:58] <[itchyjunk]> not a state
[21:23:22] <Julius_> So there are at least 7 different states of matter. And now we know that even water has 2 different liquid stated of matter, so there are at least 8 states of matter in total
[21:23:29] <[itchyjunk]> there are 4
[21:23:32] <Julius_> 8
[21:23:34] <mrig> [itchyjunk]: https://science.nasa.gov/ems/02_anatomy
[21:23:35] <bayaz> Title: Anatomy of an Electromagnetic Wave | Science Mission Directorate 
[21:23:36] <[itchyjunk]> solid, liquid, gas and plasma.
[21:23:43] <mrig> electromagnetic particles.
[21:23:47] <pyzozord> I can get rid of the thought whenever I hear people I don't know laughing on excited that it sounds and looks almost like chimps
[21:23:55] <pyzozord> s/on/or/
[21:24:09] *** Quits: Pickchea (~private@user/pickchea) (Ping timeout: 268 seconds)
[21:24:21] <[itchyjunk]> mrig, not sure what that link is supposed to tell me
[21:24:34] <[itchyjunk]> they use `particle-like` to refer to set of properties
[21:24:35] <Julius_> [itchyjunk], the state of superconductivity is a different state of matter. And there are at least 2 different liquid states of matter, and at least 3 differetn states of matter that are all plasmas
[21:24:43] <mrig> [itchyjunk]:  [itchyjunk+| idk what "electromagnetic particles" means
[21:25:03] <[itchyjunk]> where do they define that in your link?
[21:25:05] <pyzozord> anyhow, thanks to codility practice I know way more about prime numbers then I ever cared
[21:25:15] <mrig> I was clarifying my highlighting of the electromagnetic spectrum.
[21:25:23] *** Quits: snake (~snake@user/snake) (Ping timeout: 268 seconds)
[21:25:35] <[itchyjunk]> electromagnetic spectrum refers to the waves
[21:25:42] *** Joins: droid3 (~fffd@024-177-015-135.res.spectrum.com)
[21:25:45] <[itchyjunk]> still not sure about electromagnetic particles
[21:25:47] <mrig> they are one and the same thing.
[21:25:52] <[itchyjunk]> no.
[21:25:57] <Julius_> "Particles" lol
[21:26:35] <mrig> massless particles.
[21:26:40] * pyzozord swings on a string
[21:26:46] <[itchyjunk]> your link is talking about `fundamental particles` like photons, having wave-like and particle-like properties.
[21:26:50] <Julius_> The idea of particles is funny. That outdated
[21:27:02] <[itchyjunk]> idea of `fundamental particle` is not outdated.
[21:27:08] <mrig> sure it is, atoms date back to Rutherford too.
[21:27:09] <GeDaMo> A photon is an electromagnetic particle, is it not?
[21:27:10] <[itchyjunk]> idea of `particle` in general is a bit outdated
[21:27:23] <[itchyjunk]> a photon is a fundamental particle
[21:27:25] <Julius_> [itchyjunk], i meant in general. Thinking that there are particles is funny
[21:27:30] <[itchyjunk]> what's the def of electromagnetic particle?
[21:27:39] <Julius_> I am very certain that a photon does not exist
[21:27:47] *** Joins: entuland (~entuland@user/entuland)
[21:27:48] <mrig> well back further than that, but the heliocentric copy of the solar system being the model does.
[21:27:48] <[itchyjunk]> fundamental particles have certain sets of properties
[21:28:47] <Julius_> Why are there no particles we can see?
[21:29:02] <Julius_> Because the whole theory is bullshit
[21:29:04] <[itchyjunk]> define see
[21:29:07] <mrig> Because they are an element of a model.
[21:29:10] <[itchyjunk]> you can `see` it all 
[21:29:19] <Julius_> [itchyjunk], meant individual oney
[21:29:22] <Julius_> ones
[21:29:25] <[itchyjunk]> fundamental particles aren't elements
[21:29:26] <mrig> Julius_: it is particularly useful manure though.
[21:29:29] <Julius_> Just with your eyes
[21:29:34] <[itchyjunk]> Julius_, like 1 photon?
[21:29:38] <[itchyjunk]> you can, indirectly
[21:29:47] <Julius_> mrig, I agree. But still obviously wrong
[21:29:51] <[itchyjunk]> oh with eyes
[21:29:55] <mrig> you can prove them by way of hearsay yes.
[21:30:02] <[itchyjunk]> because you didn't evolve at that scale
[21:30:05] <Julius_> [itchyjunk], yes, why is there no electron the size of a planet that I can see?
[21:30:09] *** Joins: inom (~inom@176.59.116.194)
[21:30:16] <mrig> Julius_: oh, clearly wrong yes, I would agree.
[21:30:20] <[itchyjunk]> because you evolved at relativity scale
[21:30:23] <[itchyjunk]> and not QM scale
[21:30:24] <mrig> useful none the less.
[21:30:37] <mrig> be a fool to 'believe' that it is real though.
[21:30:43] <Julius_> [itchyjunk], that is my point. Why are there only electrons in a certain size range? Totally not logic
[21:30:55] <[itchyjunk]> ofcourse it's logical
[21:31:03] <Julius_> It's not logic at all
[21:31:09] <[itchyjunk]> "I don't understand hence it must be illogical" is a childish stance
[21:31:09] <mrig> filters are the future.
[21:31:21] <mrig> logic filters
[21:31:23] <pyzozord> different scales need different approaches if you'd just make a barn the size of skyscraper it would collapse
[21:31:34] <Julius_> It's only logic if you are brainwashed into thinking that different sizes have different rules
[21:31:46] <mrig> similar to grammars I suppose.
[21:32:04] <[itchyjunk]> again, a childish stance.
[21:32:20] <Julius_> pyzozord, I would argue that all scales need that same approach, or else we end up with bullshit
[21:32:24] <[itchyjunk]> That which i don't understand must be wrong.
[21:32:49] <pyzozord> Julius_: you don't seem to be able to handle the fact that life /is/ bullshit
[21:32:50] * mrig thanks the programming gods for the date range on google scholar search :D
[21:33:06] <Julius_> [itchyjunk], no, it is the opposite. Assuming that we find a universal law, and then it's not valid if you chance the scale? So scale now is not relative or what? How not logical
[21:33:18] <Julius_> pyzozord, :)
[21:33:22] <mrig> bullshit is very useful stuff for cultivation.
[21:33:25] <[itchyjunk]> if it's universal, it's valid within the scope
[21:33:35] <[itchyjunk]> you're still stuck in that same little trope
[21:33:50] <[itchyjunk]> where you try to justify something and the core reasoning is "i don't understand"
[21:34:06] <[itchyjunk]> No one is claiming there has to be universal laws
[21:34:07] <Julius_> [itchyjunk], if it's universal (no matter if we find this law or not) it is valid for all scopes
[21:34:14] <mrig> What does universal mean?
[21:34:14] <[itchyjunk]> Julius_, no shit.
[21:34:21] <pyzozord> or rather that we are not omnicient
[21:34:24] <[itchyjunk]> literally the definition of "universal"
[21:34:27] <Julius_> [itchyjunk], so why are there no electrons the size of a house?
[21:34:31] <mrig> which model of the universe are we to base that word upon?
[21:34:35] <[itchyjunk]> how is that even related?
[21:34:38] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Ping timeout: 268 seconds)
[21:34:42] <[itchyjunk]> this is getting dumb real quick.
[21:34:44] *** Joins: kodah (~kodah@user/kodah)
[21:34:50] <Julius_> [itchyjunk], I think you can't follow my thought process
[21:34:54] <mrig> no it is highly relevant.
[21:34:59] <pyzozord> *Omniscient
[21:35:11] <cis> Julius_: your thought process lacks clarity
[21:35:45] <Julius_> [itchyjunk], there are only 3 solutions to this question: 1.: A universal law does not exist. 2.: Electrons do not exist. 3.: There are electrons the size of a house but we don't notice them somehow
[21:36:04] <cis> nonsensical and absurd
[21:36:04] <mrig> If your underlying assumption is one expanding universe, you are basing your logic upon one single doctrine in a field in which there are at least four primary contenders.
[21:36:10] <Julius_> maybe 4.: The universe doesnt give a shit about logic
[21:36:32] <Julius_> cis, not absurd at all. Very logical. You are just not used to thinking that way
[21:36:50] <[itchyjunk]> Julius_, your premise doesn't lead to the conclusion you're drawing.
[21:37:02] <[itchyjunk]> 2+2 = 4 hence the chicken tastes like taco
[21:37:02] <Julius_> [itchyjunk], I think it does
[21:37:11] *** Joins: anon10455[m] (~anon10455@2001:470:69fc:105::da2d)
[21:37:13] <[itchyjunk]> well, stop thinking then? idk what to tell you at this point
[21:37:14] <pyzozord> Julius_: with perfectly rational humans posessing perfect understanding of the entire universe what you are thinking makes sense. But that's not the real world. You have to deal with this fact
[21:37:42] <Julius_> [itchyjunk], yes, because you are not aware of the fact for obviously wrong all our theories are, like most people
[21:37:44] *** Quits: manin (~x@185.242.190.95) (Quit: Leaving)
[21:37:47] * mrig thinks that the language being used to discuss the subject currently is inadequate.
[21:37:49] <Julius_> *how
[21:38:02] <[itchyjunk]> Yes, i am sure only you , the enlightened one, knows about how wrong all the theories are.
[21:38:03] <mrig> thus the circular arguments.
[21:38:15] <[itchyjunk]> it goes beyond the language, here.
[21:38:24] <Julius_> pyzozord, I am pretty sure this IS the real world, but we just don't perceive it that way
[21:38:28] <[itchyjunk]> The claim is special knowladge based on absurdism.
[21:38:29] <mrig> enlightened is a particularly silly English word.
[21:38:46] <[itchyjunk]> "Electron the size of house doesn't exist hence all this random crap i say must be true"
[21:38:55] <[itchyjunk]> the premise doesn't imply the conclusion.
[21:39:02] <Julius_> [itchyjunk], no, actually most physicists know that their theories are wrong and only halfway valid within a very limited scope
[21:39:10] <beaky> nice i like electron it is the premier platform of choice for cross platform applications
[21:39:10] <GeDaMo> # How can anybody be enlightened? Truth is, after all, so poorly lit # :P
[21:39:19] *** Joins: Hax0r (~Hax0r@87.101.193.195)
[21:39:19] <[itchyjunk]> Ofcourse it's valid within a scope.
[21:39:21] *** Quits: kodah (~kodah@user/kodah) (Ping timeout: 248 seconds)
[21:39:30] <[itchyjunk]> That doesn't mean the jibbrish you're saying is correct.
[21:39:31] *** Parts: anon10455[m] (~anon10455@2001:470:69fc:105::da2d) ()
[21:39:45] <cis> GeDaMo: people think enlightenment is about light vs dark, but it's really about light vs heavy ;)
[21:39:45] <pyzozord> Julius_: well, than you at least have to accept that people do not subscribe to that philosophy, otherwise you will always strugle working with others
[21:40:05] <Julius_> [itchyjunk], I am pretty sure that larger electrons (or what we call electrons) exist, but we just are unable to notice them because of other effects, like a different time scale at the same time as we change the length scale for example
[21:40:12] <[itchyjunk]> enlightenment is knowing OOP exists but not using it.
[21:40:21] <[itchyjunk]> if it's larger, it's not electron.
[21:40:23] *** Quits: rty (~rty@212.102.38.215) (Quit: rty)
[21:40:25] <GeDaMo> Rush - Turn the page https://www.youtube.com/watch?v=8nsQy-pvORU
[21:40:26] <mrig> Just shine some consciousness upon it that has no bias, without colouring it, and all will be reviled (pun intended).
[21:40:26] <Julius_> pyzozord, I dont work with others. Others are idiots
[21:40:27] <bayaz> Title: Turn The Page 
[21:40:28] <[itchyjunk]> Higher energy fundamental particles already exists.
[21:40:47] *** Quits: RougeR (~rougex250@user/rouger) (Ping timeout: 268 seconds)
[21:40:47] *** Quits: gitgood (~gitgood@80-44-12-89.dynamic.dsl.as9105.com) (Ping timeout: 268 seconds)
[21:40:52] <cis> throw away all that weighs you down - now you're "englightened"
[21:41:08] <Julius_> [itchyjunk], since what we call an electron is quite likely just an illusion like everything else we think exists, I would disagree
[21:41:28] <[itchyjunk]> https://www.sciencedirect.com/topics/physics-and-astronomy/high-energy-electrons
[21:41:29] <pyzozord> Julius_: your truth is just that, your truth, you need to learn to accept that it is no more and no less true than any other truth. And no you are not smarter than anyone else, you are just under false impression
[21:41:33] <[itchyjunk]> ah yes
[21:41:34] *** Quits: jaysicks (~jaysicks@91-83-5-150.pool.digikabel.hu) (Remote host closed the connection)
[21:41:37] <[itchyjunk]> science is an illusion
[21:41:46] * [itchyjunk] back away from this conversaiton
[21:42:28] *** Quits: rubion (~rubion@cpc124316-ayle4-2-0-cust156.15-2.cable.virginm.net) (Ping timeout: 272 seconds)
[21:42:32] <Julius_> [itchyjunk], let me make a guess: The distribution of the energies is 1 / e^energy  ?
[21:42:33] <pyzozord> Julius_: you may be quite clever and even briliant, but you are just a single person against the entire universe
[21:42:38] <[itchyjunk]> How come practice problems for beginners is not listed in topic?
[21:42:45] <[itchyjunk]> I vote that be added to topic
[21:42:59] <[itchyjunk]> Julius_, you do what you want, leave me out of it
[21:43:02] <pyzozord> Julius_: so you need to learn to operate in that environment if you ever wish to leave a mark
[21:43:03] <Julius_> pyzozord, Dr. Julius against the World
[21:43:38] <Julius_> pyzozord, why would I wish that? That would be pure ego
[21:43:48] <pyzozord> Julius_: here that was my best assesment and advice about your initial quesiton about your peers
[21:43:50] *** Joins: jaysicks (~jaysicks@91-83-5-150.pool.digikabel.hu)
[21:44:02] <Julius_> And I'm not doing physics. I'm just thinking about how obviously wrong our theories are
[21:44:09] <beaky> for individual practice problems there's already leetcode i think, and for practice projects i think there's a lot of common topics like a game or simple app (such as a todo list or perhaps an database for your personal tea inventory)
[21:44:24] <Julius_> pyzozord, what peers?
[21:44:31] <[itchyjunk]> beaky, i have to sign up to see problems in leetcode?
[21:45:12] <Julius_> I should do my programming instead of philophisizing about physics, but it's that hard to think :(
[21:45:22] <pyzozord> Julius_: dunno something you asked about how others couldn't do proper project analysis and they fired you but you were right
[21:45:41] <Julius_> pyzozord, I was never fired
[21:45:51] <beaky> you can see the problems leetcode is a sign up kind of deal to work on them and submit solutions
[21:46:09] <Julius_> pyzozord, I think you are confusing me with someone else. I don't remember talking about project analysis
[21:46:14] <beaky> similar websites are also like project euler (tho its really about maths challenges than programming challenges)
[21:46:20] *** Joins: thesemicolons (~thesemico@user/thesemicolons)
[21:46:52] <pyzozord> Julius_: oh damn, shit I'm sorry you are right. I confused you with juliaEnv
[21:47:03] <Julius_> beaky, is there any benefit in doing this work for free for a website just so that they can sell your solutions?
[21:47:11] <Julius_> pyzozord, no problem
[21:47:22] <pyzozord> Julius_: still, saying that all of science is wrong and you a right is kind out there
[21:47:29] <CuriousErnestBro> hello
[21:47:37] <CuriousErnestBro> who here was trying to get me to code in f#?
[21:47:38] <beaky> yes the idea is that they help you practice solving them
[21:47:41] *** Joins: manin (~x@185.242.190.95)
[21:47:59] <Julius_> pyzozord, "wrong" is relative. Wrong in general, yes. And they know it themselves. Wrong in terms of not being useful in everyday life? No
[21:48:38] *** Quits: manin (~x@185.242.190.95) (Read error: Connection reset by peer)
[21:49:08] <beaky> nice i like f#
[21:49:09] <Julius_> CuriousErnestBro, why the fuck do there have to be this many new programming languages lately? It's like the are intentionally doing it every year
[21:49:13] *** Joins: manin (~x@185.242.190.95)
[21:49:13] <beaky> i dont even use it but i like it
[21:49:14] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 252 seconds)
[21:49:19] <CuriousErnestBro> Julius_ they are
[21:49:30] <beaky> though of all the languagese i dont use (but would rather other people use most) i like rust the most
[21:49:31] <Julius_> CuriousErnestBro, planned obsolecense? :D
[21:49:46] <beaky> in rust i trust
[21:49:52] <CuriousErnestBro> in rust we trust
[21:50:14] <Julius_> I use C++. It's good enough for me, and it's just a tool, so the language doesn't matter much
[21:50:27] <bjs> Julius_: which "new" programming languages are you referring to?
[21:50:34] <Julius_> bjs, all of them
[21:50:53] <CuriousErnestBro> beaky I thought you write rust
[21:51:01] <CuriousErnestBro> I have been coding an API in rust 
[21:51:06] <CuriousErnestBro> now I need to write tests
[21:51:07] *** Quits: thesemicolons (~thesemico@user/thesemicolons) (Client Quit)
[21:51:08] * pyzozord can't wait to write a "new" language of his own
[21:51:15] <Julius_> bjs, it's like there is a new language every 2 years that people hype
[21:51:17] <CuriousErnestBro> even writing a simple API is very hard
[21:51:18] <beaky> no i code in agda
[21:51:25] <CuriousErnestBro> I code in deez
[21:51:38] *** Joins: thesemicolons (~thesemico@user/thesemicolons)
[21:51:50] <bjs> Julius_: yes,  I mean C++ does it too
[21:51:59] <BrkThruCopyWritr> off topic: need to lose 30-50 pounds. Low carb high fat?
[21:52:13] *** Quits: jaysicks (~jaysicks@91-83-5-150.pool.digikabel.hu) (Remote host closed the connection)
[21:52:14] <BrkThruCopyWritr> Detail your best long term nutrition plans
[21:52:30] *** Joins: vysn (~vysn@user/vysn)
[21:52:48] <Julius_> I code in COMEFROM. It uses COME FROM instead of GOTO   ( https://en.wikipedia.org/wiki/COMEFROM )
[21:52:49] <bayaz> Title: COMEFROM - Wikipedia 
[21:53:19] <beaky> but i like goto
[21:53:28] <Julius_> No one likes GOTO
[21:53:31] *** Joins: jaysicks (~jaysicks@91-83-5-150.pool.digikabel.hu)
[21:54:02] <mrig> I like goto, find it great for organising functions whilst refactoring.
[21:54:06] *** Joins: rubion (~rubion@cpc124316-ayle4-2-0-cust156.15-2.cable.virginm.net)
[21:54:17] <Julius_> Goto is mostly used by beginners
[21:54:27] <pyzozord> except when it's not
[21:54:31] <mrig> and serious professionals.
[21:54:42] <Julius_> True. But this is ofen a sign that your function is too long :)
[21:54:59] *** Quits: jaysicks (~jaysicks@91-83-5-150.pool.digikabel.hu) (Remote host closed the connection)
[21:55:02] <[itchyjunk]> apparently i have an account already
[21:55:09] <Julius_> You can always replace a GOTO with a sub-function and a return there
[21:55:10] <[itchyjunk]> looks like i did a few py stuff on it
[21:55:17] *** Joins: SmokenatorZ4 (~Smokenato@189.78.241.69)
[21:55:28] *** Joins: jaysicks (~jaysicks@91-83-5-150.pool.digikabel.hu)
[21:55:45] *** Joins: inky (~inky__@46.36.117.137)
[21:55:49] <CuriousErnestBro> ive never written a goto language
[21:55:51] <pyzozord> I'm sure Sieve of Eratosthenes will come very useful in my web programming career :D
[21:56:09] <CuriousErnestBro> I knew a fellow intern who did i = 0 instead of enumerate() in python 
[21:56:13] <CuriousErnestBro> he's at jp morgan now
[21:56:16] <CuriousErnestBro> (^:
[21:56:31] <Julius_> python is ugly either way
[21:56:59] <[itchyjunk]> i think i have
[21:57:03] <[itchyjunk]> in qbasic
[21:57:35] <Julius_> It's very common that beginners in programming do gotos all over the place in basic
[21:57:40] *** Quits: SmokenatorZ (~Smokenato@179.247.174.196) (Ping timeout: 272 seconds)
[21:57:40] *** SmokenatorZ4 is now known as SmokenatorZ
[21:57:50] <phogg> People like to talk bad about goto, but it has its uses. It's just rather easy to abuse.
[21:58:05] <Julius_> phogg, I agree
[21:58:09] <Julius_> Like C++
[21:58:13] <[itchyjunk]> do i not have to change my language to java or somesuch in leetcode?
[21:58:20] <[itchyjunk]> i click problem and randomly pick one?
[21:58:25] <phogg> sometimes it's the right choice, even if it may seem odd to use it 
[21:58:44] <Julius_> phogg, I agree again. But those cases are rare
[21:58:51] <phogg> maybe you could massively refactor some code to avoid a goto, but if the result is not as clear and concise you're not helping
[21:59:17] *** Quits: manin (~x@185.242.190.95) (Quit: Leaving)
[21:59:20] <Julius_> If you have to refactor your code to avoid a goto, your code almost always is already wrongly factored
[21:59:25] <phogg> the real test is this: if you aren't  dead certain a goto is the best thing to do, then it isn't
[21:59:38] *** Joins: manin (~x@185.242.190.95)
[21:59:59] <Julius_> Is it just me wondering why there is no LOOP, I mean without any conditions at all?
[22:00:02] <mrig> that's why it is good for refactoring.
[22:00:04] <mrig> :)
[22:00:24] <CuriousErnestBro> beaky I wrote auth flow https://paste.ubuntu.com/p/2ctzgvrnjV/
[22:00:25] <phogg> Julius_: I've been around that spiral a few times. Some of the time (maybe 70%?) I find that a place where I found I wanted a goto was actually a sub-optimal design and rewriting it to work another way was the better answer. 
[22:00:25] <bayaz> Title: Ubuntu Pastebin 
[22:00:27] <CuriousErnestBro> do you like it?
[22:01:12] <Julius_> phogg, it can get quite hard to get rid of a goto later on after the code expanded
[22:01:17] <phogg> Julius_: but 10-15% of the time there is no better option, and sometimes all other options are worse. It's rare, but given all of the universal anti-goto literature out there I like to occasionally mention that it's not blasphemy. 
[22:01:17] <beaky> nice i like auth
[22:01:33] <phogg> Julius_: use more, smaller functions
[22:01:40] <Julius_> phogg, I want a LOOP { ... }. Just loop. No condition, no nothing
[22:01:52] <phogg> Julius_: if you never make a *big* jump with your goto then it's pretty safe
[22:01:57] <phogg> Julius_: sounds like you want Raku
[22:02:06] <GeDaMo> #define LOOP while(1) 
[22:02:07] <Julius_> I mean in C / C++
[22:02:31] <Julius_> GeDaMo, sure, you can use while(true) or for(;;), but why is there no LOOP ?
[22:02:50] <phogg> because making your own is trivial
[22:02:53] <Julius_> Am I the only one that often prefers unconditional loops?
[22:02:54] <vysn> jjkjhkjhnb
[22:03:02] <vysn> oops. sorry
[22:03:04] <phogg> but I agree, trivial things which are useful should move to the standard library or the language
[22:03:08] <GeDaMo> vysn: are you a cat? :|
[22:03:11] <pyzozord> vysn: little to excited?
[22:03:39] <phogg> Julius_: I only use unconditional loops a small percentage of the time. 90% of loops are list iteration.
[22:03:44] <jamea> c# hi all, i have label1 in panel1, how to move to panel2? of course via coded?
[22:04:17] <Julius_> I always end up having the case where I need LOOP { do stuff; check and conditionally exist the loop; do other stuff; }. You can't do that well with a conditional loop
[22:04:23] <phogg> Julius_: after that most of the rest are tracking the state of some single thing (like a counter, or an object)
[22:04:46] <phogg> Julius_: you can if you hide the condition behind a function
[22:04:52] <jamea> winform
[22:05:10] <phogg> which, if it is attached to an object, looks like a state loop. while(!state.finished()){ ...; }
[22:05:17] <kzootech> https://www.youtube.com/watch?v=uCv5VRf8op0 https://www.youtube.com/watch?v=Fm0vygzVXeE decent look at the quake 3 inverse square root algorithm
[22:05:18] <bayaz> Title: Quake III FISR Algorithm [1/2] - The Amazing Story of the FISR 
[22:05:18] <bayaz> Title: Quake III FISR Algorithm [2/2] - How Floating Point Works 
[22:05:25] <kzootech> the second episode has a great intro
[22:05:28] <Julius_> phogg, I dont like having unnecessary functions. If the code is use used in one place, there is no good reason to have it in a function in my opinion
[22:05:43] <Julius_> *just used
[22:05:52] <phogg> Julius_: whether it's more obvious to do it that way vs loop { break if condition; [...]; } is a matter of circumstance and taste
[22:06:24] <phogg> Julius_: don't... like functions!?! the biggest sin of the high level programming world is not having enough functions. More functions. Smaller functions. More, smaller functions!
[22:06:46] <Julius_> phogg, functions are a bad idea when they are not needed. It just makes reading the code harder
[22:06:46] <pyzozord> phogg: lol :D
[22:06:54] *** Joins: rustyshackleford (uid236774@id-236774.brockwell.irccloud.com)
[22:07:02] <phogg> if you can't split your logic up into more, smaller functions *your design is probably wrong* anyway. Try a different approach.
[22:07:13] <phogg> Julius_: oh no, it makes it so much easier
[22:07:16] *** Quits: vysn (~vysn@user/vysn) (Quit: WeeChat 3.2)
[22:07:25] <Julius_> I hate code that is spattered over 20 functions instead having the main function be implemented in one page-sized block
[22:07:35] <phogg> write functions such that executing them to solve your problem will look like a linear description of what you're doing
[22:07:38] *** Joins: vysn (~vysn@user/vysn)
[22:07:46] <Julius_> Never write a function that is not needed!
[22:08:01] <phogg> Julius_: of course don't write functions that aren't *needed*
[22:08:03] <phogg> that would be stupid
[22:08:14] *** Quits: manin (~x@185.242.190.95) (Quit: Leaving)
[22:08:27] <Julius_> If code is only used at 1 position within your code, there is no need to put it in a function
[22:08:32] <phogg> but if you have a section of a main function which is doing some sub-task, why distract the reader with the details of how it works? Make a function, give it a good name, call it
[22:08:45] <phogg> Julius_: Strongly disagree
[22:08:52] <phogg> thinking like that leads to ever-expanding spaghetti
[22:09:15] <phogg> sure it *looks* simpler at first, because everything is "right there" in front of you, but it's super not long-term easier to read or understand
[22:09:33] <Julius_> I totally hate when people split up a simple algorithm that would requite just 1 page of code over 20 sub-functions. It's a nightmare to maintain this, or change it
[22:10:00] <phogg> break out *everything you can* break out, while preserving sense and reason, and the result will be smaller, clearer, and easier to modify. If you find that it isn't you divided at the wrong points.
[22:10:01] <Julius_> If you can code it in one block that doesnt get too large, do it
[22:10:29] <Julius_> There is zero reason to factor your code without the need to
[22:10:38] <phogg> Julius_: No. Just no. That way lies madness. If your program grows to any kind of size then it's insane to do that.
[22:11:04] <Julius_> The worst thing is when people start to write multiple classes just to solve something that you could solve in 30 lines of code as a block
[22:11:13] <phogg> you end up with things like a comment above a section of code saying "this section does X," which is essentially a function (a name together with a chunk of code), but not enforced by the compiler
[22:11:27] <phogg> so it's harder to safely modify it, and harder to understand the interaction between different pieces
[22:11:36] <Julius_> It's typical for C++ programmers to do such crap. Most people don't undersand that you have to keep things simple
[22:11:54] <phogg> more, smaller functions *is* simple. WHat you're describing is not.
[22:12:12] <Julius_> No, it's a nightmare. Especially if distributed over different classes
[22:12:18] <phogg> You keep saying things like "without need", but there is a need. The need is simplicity and *clarity*.
[22:12:37] <phogg> If it weren't a better idea leading to easier to maintain code I wouldn't advocate for it.
[22:13:10] <phogg> The hard part is knowing which pieces are *actually* good candidates for being functions and which are not
[22:13:13] <Julius_> No, there is no need. If you have something like   do X; do Y; do X;   then there is a need to put X into a function. If you have   do X; do Y; do Z;   then there is no need at all for sub-functions
[22:13:29] <phogg> it's easy to have no idea and to chunk your program into pieces randomly, resulting in a nightmare. Don't do that.
[22:13:44] <phogg> Julius_: yes there is!
[22:13:47] <amahl> been thinking about that myself recently. I got 1205 lines of C that produce slightly less than 4096 bytes of bytecode that I flash into a microcontroller. so its a pretty large amount of code vs compiled output
[22:13:57] <phogg> Julius_: write three functions, call each one in sequence from your main. Readers of your main will thank you
[22:14:09] <phogg> it will clearly describe the steps your program takes
[22:14:20] <phogg> if it *does not* clearly describe the steps you *divided it wrong*
[22:14:43] <Julius_> phogg, yes, I am sure they are happy they have to look at 3 different things in 3 different classes, instead of just having like 10 lines easily in sight at the same time
[22:14:49] <[itchyjunk]> broooo
[22:15:03] <[itchyjunk]> leetcode doesn't give me that public static void main() thing
[22:15:08] <[itchyjunk]> when i click java
[22:15:11] * [itchyjunk] sobs
[22:15:11] <phogg> Julius_: what you are saying is "don't do something stupid," which I agree with, but you're saying it in a way that will lead the unwary to make poor maintenance choices
[22:15:14] *** Joins: Pickchea (~private@user/pickchea)
[22:15:20] <Julius_> phogg, dude, I never use comments. If you need comments you almost always did something wrong
[22:15:37] <pyzozord> amahl: don't embeded devs use assembly alot?
[22:15:48] <phogg> Julius_: I am in complete agreement. I believe in self-documenting code. Comments are rarely needed.
[22:15:54] <Julius_> The only thing comments are good for is to understand whe overall picture
[22:16:00] <pulse> ugrh, i don't believe in self-documenting code
[22:16:05] <amahl> I don't, just avr-libc
[22:16:15] <pulse> i think that's some idealistic schmuckery
[22:16:21] <jinsun> [itchyjunk]: leetcode auto-writes the main function I think, you just have to make the solution class and submit
[22:16:28] <phogg> pulse: then you haven't read good code. Most of the time comments are just repeating what is literally said by the words used for the names of variables and functions
[22:16:29] <Julius_> phogg, and exactly those comments that you would need - that discribe the overall thing, not small details - are usually missing :/
[22:16:43] <pulse> phogg, good, i'd rather have them repeat what the code does, that deduce it myself
[22:17:00] <phogg> pulse: and then the code changes and the comment disagrees. Now who do you trust?
[22:17:13] <Julius_> phogg, and then you end up with having a million small comments in a class, but there is never a text explaining wha the whole class is meant to do as a whole :D
[22:17:13] <pulse> that's just bad practices then
[22:17:22] <phogg> amahl: this is the price for ease of understanding
[22:17:29] <pulse> self-documenting code is a buzzword if you ask me
[22:17:32] <pulse> but you do you :p
[22:17:34] <phogg> pulse: it's bad practice, but it happens a lot in the real world
[22:17:39] *** Quits: vysn (~vysn@user/vysn) (Quit: WeeChat 3.2)
[22:17:43] <[itchyjunk]> jinsun, oh i don't have to do the public static void main {String[] args} part?
[22:17:44] <phogg> pulse: it's not a buzz word, it's a design philosophy
[22:17:50] <[itchyjunk]> just write a class that deals with the problem?
[22:17:55] *** Quits: amigojapan (uid86330@id-86330.brockwell.irccloud.com) (Quit: Connection closed for inactivity)
[22:18:02] <pyzozord> amahl: well each bytecode is about 1 byte so it's actually more like 1k vs 4k instructions. Still very good job on the compilers part
[22:18:02] *** Joins: vysn (~vysn@user/vysn)
[22:18:06] <pulse> you know what also happens in the real world? schmucks get the idea of self-documenting code, then they produce some code, and years down the line someone has to actually work on that code and they go insane :p
[22:18:11] <phogg> Julius_: you pretty much always want a "big picture" explanation, for any class over a trivial size
[22:18:13] <Julius_> And (I know I'm probably the onle one, but) I FUCKING hate when people mix up ID and index !!!
[22:18:16] <pulse> comments provide valuable insight
[22:18:18] <Julius_> *only
[22:18:20] <[itchyjunk]> hmmmmmmmmmmmm
[22:18:32] <GeDaMo> [itchyjunk]: in Java, it's possible for every class to have a main method, they're often used for testing the individual classes
[22:18:32] <[itchyjunk]> will it pass the  array to my code when it calls my class?
[22:18:34] <phogg> pulse: *if* they provide valuable insight, *then* I add them
[22:18:35] <jinsun> [itchyjunk]: ya, main is probably pre-written on the leetcode server side
[22:18:45] <pulse> phogg, then we agree ;)
[22:18:51] <phogg> pulse: if they don't, I don't. Do you know how many kids I've seen adding comments *just because you're supposed to*?
[22:18:54] <pulse> i never said you need to do // this is bridge
[22:18:55] <[itchyjunk]> its supposed to give me an array and an int
[22:18:56] <Haxxa> Can anyone see what I am doing wrong? In C++, I have a int16_t register containing the current temperature as per: https://imgur.com/a/LkmW3Vn . When I convert it to a c_str, I use: "String((static_cast<float>(static_cast<int16_t>(regData))) / 100).c_str()" but I get 0.33 instead of the expected 16.10 (if the register contained 1610)? 
[22:18:56] <bayaz> Title: imgur.com 
[22:19:01] <GeDaMo> [itchyjunk]: but it's not necessary for the class to have a main as long as there is one which will instantiate your class
[22:19:03] <[itchyjunk]> class SumTwo { }
[22:19:07] <pulse> phogg, i'd rather have more comments rather than less. it provides context
[22:19:12] <[itchyjunk]> GeDaMo, right
[22:19:16] <pulse> avoiding comments serves no purpose
[22:19:27] <pulse> and code isn't english and can't provide the same context
[22:19:29] <phogg> pulse: i am in the "if you feel like you need to explain, something is wrong" camp
[22:19:30] <Julius_> phogg, yes, but people often dont write the general picture discription. They write bullshit like    for( const auto &car : cars )   // Iterate over all cars      as if that wouldnt be obvious from the code
[22:19:47] <pulse> phogg, one day you'll work on your own code and change your mind about that
[22:19:51] <[itchyjunk]> so when leetcode calls my SumTwo it will Sumtwo object = new Sumtwo(array, int) ; ?
[22:19:52] <phogg> pulse: write the code more clearly, explain only the big picture (or, for an interface, what it looks like from the outside)
[22:19:58] <[itchyjunk]> or how will it pass the shit i want to it?
[22:20:05] <pulse> real life code is rarely clear
[22:20:08] <phogg> pulse: I work on my own code *constantly*, as well as that of others
[22:20:09] <pulse> only trivial examples are clear
[22:20:15] <pulse> in the real world code is messy, oily, hairy
[22:20:21] <pulse> comments provide sanity in such an environment
[22:20:35] <phogg> pulse: what I am trying to explain is that real life code *can* be clear most of the time, if you take the care to make it so
[22:20:37] <Julius_> pulse, real life code is mostly written by idits
[22:20:39] <GeDaMo> Haxxa: why are you converting it to an int16_t then to a float?
[22:20:40] <Julius_> idiots
[22:20:51] <pulse> phogg, disagreed
[22:21:04] *** Quits: rubion (~rubion@cpc124316-ayle4-2-0-cust156.15-2.cable.virginm.net) (Ping timeout: 258 seconds)
[22:21:08] <pulse> phogg, i'd like to see you code a fully compliant zip library that uses no comments and is "self-documenting"
[22:21:11] <pulse> call me when you achieve that feat :p
[22:21:33] <Julius_> phogg, I should have added some high-level comments to my experiments. I have like 30 different versions of an algorithm, and I can't remember which one does what :D
[22:21:51] <Haxxa> GeDaMo because the register is read as a uint16_t by the modbus API but contains a signed number
[22:21:53] <phogg> pulse: you never have *no comments*, but you can usually have very few. For something relating to a standard like that I would expect more than average.
[22:22:12] <pulse> to me it's just some type of new-age insanity
[22:22:20] <pulse> like javascript programmers claiming you never need a for loop
[22:22:22] <pulse> in that same vein
[22:22:24] <pulse> like i said you do you
[22:22:42] <phogg> pulse: It's a battle-tested engineering principle. Because it produces pleasant results that are maintainable over the long term, therefore I do it.
[22:22:49] <pulse> no, it's not
[22:22:51] <Julius_> pulse, your code should be self-explaining, so that you dont need comments for most things
[22:22:52] *** Joins: cthulchu (~Cthulchu@194.44.110.194)
[22:23:05] <phogg> pulse: my experience has taught me the opposite
[22:23:16] <pulse> it's an ivory tower adage that very few real-world engineers would use
[22:23:21] <cis> pulse: comments explain why, code explains how
[22:23:32] <pyzozord> pulse: ugh I hate that. It's actually considered a best practice to use .forEach(callbackFn) instead for loops. And the callbacks are so much slower
[22:23:33] <pulse> cis, not entirely agreed
[22:23:42] <phogg> pulse: well, in JS *most of the time* you are only doing list iteration. And of course you never *need* a for loop, because a you only *need* a while loop. They sure are convenient, though.
[22:23:48] <pulse> pyzozord, i've seen some insane claims from javascript coders
[22:23:53] <jinsun> [itchyjunk]: yes it will pretty much do that when it is testing your code, it would have told you that your function should take two arguments, and when checking it will call your function by supplying two arguments
[22:23:58] <dodo> if a comment is faster to read than the code, write it
[22:24:09] <pulse> phogg, it's not about for vs. while, it's about for vs forEach
[22:24:15] <phogg> pulse: and of course for(key in objects) constructs are usually unwise, so for JS that's another reason to avoid them
[22:24:17] <pulse> dodo++ :)
[22:24:25] <[itchyjunk]> jinsun, it says it will give me a array and an int
[22:24:36] <phogg> pulse: but "you don't need for in JS" is like the "you don't need goto" argument. It's just meant as a rule of thumb for beginners.
[22:24:47] <pulse> phogg, that's true
[22:24:51] <[itchyjunk]> but when i am writing a class `class TwoSum {}` i should have `class TwoSum(a,b) {}` ?
[22:24:53] <Julius_> dodo, I disagree. If the code is understandable enough, dont write the comment. After 2 years it's very likely the code will do something else than the comment says otherwise
[22:25:00] <[itchyjunk]> I guess i've never coded where the class take in args
[22:25:03] <[itchyjunk]> but makes sense
[22:25:05] <pulse> the problem is when you try to convince a person with 20-something year experience that for loops are evil and never to be used
[22:25:08] <dodo> Julius_: that wouldn't pass a code review
[22:25:16] <Julius_> dodo, cute
[22:25:28] <Julius_> dodo, "This ship is unsinkable"
[22:25:33] <phogg> pulse: that's... what do you call it? A logical fallacy of some kind, I think?
[22:25:36] <pulse> Julius_, code should be separated into units that do things
[22:25:37] <GeDaMo> Haxxa: what do you get if you just do (regData / 100.0).c_str() ?
[22:25:46] <dodo> Julius_: "i don't care that this code will be read 20 times"
[22:25:48] <pulse> implementation might change, but typically the problem won't
[22:25:52] <[itchyjunk]> yeah i can't do what i tried to do
[22:26:00] <pyzozord> I just keep my head low and write whatever they want me to write. Easier to write .forEach than to have a whole argument in codereview
[22:26:04] <phogg> pulse: it happens whenever you take a guideline, follow it by rote, and then try and apply it uniformly everywhere without consideration.
[22:26:04] *** Quits: kurtthem1ker (~kurt@S010644a56e3e0ee9.cn.shawcable.net) (Quit: leaving)
[22:26:06] <Julius_> pulse, I agree. But only if those units are needed or are quite seperate from each other. Otherwise dont seperate the code
[22:26:08] <jinsun> [itchyjunk]: no the class doesn't take arguments, it should be something like `class Solution { public int TwoSum(int[] a, int b) { } }`
[22:26:12] <pulse> phogg, waste of time
[22:26:32] <pulse> comments at the end of the day are a time saving measure
[22:26:39] <pulse> not using them is insane, especially for ideologic reasons
[22:26:47] <pulse> but that's my opinion, i don't claim to be the authority
[22:26:54] <pulse> if you prefer other methods, do those
[22:26:55] <[itchyjunk]> jinsun, how do they know what function to call? they will call whatever is in my class?
[22:26:56] <jinsun> [itchyjunk]: leetcode already has a template for how the class and the function definition line should look, just use that and write the code within that, don't delete it
[22:27:05] <phogg> pulse: Nobody said not to use comments, just that you often don't need them.
[22:27:12] <[itchyjunk]> jinsun, it didn't give me a template
[22:27:12] <Julius_> dodo, I would only add comments that discribe the overall picture. For example how the algorithm works or what you are doing overall
[22:27:16] <pulse> i comment often and i comment a lot
[22:27:23] <[itchyjunk]> it gave me a C++ template and when i switched to java, it was blank
[22:27:32] <dodo> Julius_: sure, that makes sense
[22:27:43] <pulse> even if you don't need a comment, sometimes writing out your thought process will both document what you're doing, and help you figure out how to solve the problem efficiently
[22:27:45] <kzootech> comments should add something besides just bytes to the code
[22:27:45] <Julius_> pulse, I almost never comment
[22:27:49] <dodo> and when the code does something funny
[22:27:50] <pulse> comments can be used a sort of rubber duck too
[22:27:54] <gitesh> so every or any file is a string?
[22:27:55] <dodo> or "clever"
[22:27:58] <pyzozord> regarding comments I noticed something interesting that Jon Blow does is write those multiline, or even multiparagraph comments. Before I never saw that. But after I saw it I really liked it. And it kind of reminds me of literate programming but adapted for practical reasons
[22:28:00] <pulse> Julius_, that's your choice
[22:28:19] <phogg> pulse: that falls in to the category of the "big picture" comments we were discussing earlier. There's a big difference between that and line-by-line comments explaining specific statements
[22:28:23] <jinsun> [itchyjunk]: that's probably because you deleted the Java template somehow, there should be a reset button on the top
[22:28:34] <Julius_> dodo, I try to avoid funny things, side effects, strange things that only work in 1 perticular language ... everything that a beginner wouldnt understand as best as possible
[22:28:36] <cis> pyzozord: for is often marginally faster than forEach, despite what people want to you believe about the differences being compiled away
[22:28:43] <spynxic> How literate is literate programming
[22:28:46] *** Joins: kodah (~kodah@user/kodah)
[22:28:49] <phogg> pulse: the best rubber duck is writing out your design documentation in advance, or (if you prefer) your test case
[22:28:52] <pulse> cis, on modern browsers it's the same
[22:28:58] <pulse> they flatten forEach
[22:29:08] <cis> pulse: not always - run your own performance tests
[22:29:11] <Julius_> pulse, yes, it's my choice. // Declaring who's choice it is
[22:29:28] <pulse> still, for loop is sometimes idiomatic for certain kinds of problems, particularly any problem involving indices or numerical data
[22:29:33] <pyzozord> cis: I agree. And I don't think it's marginally. I think it's linearly slower because each iteration needs to perform a function call
[22:29:33] <[itchyjunk]> jinsun, yes found a reset button
[22:29:42] <Haxxa> GeDaMo I just shorted my microcontroller and I am giving up tonight, I will take a look at a later stage
[22:29:48] <Haxxa> sorry :/
[22:29:53] <GeDaMo> Haxxa: OK :(
[22:29:55] <kodah> good morning internet
[22:29:59] <kzootech> i tend to think of code as "paragraphs" and i usually comment at the beginning of each paragraph with just a few words about what the next set of lines dones
[22:30:11] <pyzozord> Haxxa: what does it mean to "short" your mcirocontroller? Did you fry it?
[22:30:18] <kzootech> /* initialize variables */ /* check boundaries */ etc
[22:30:21] <Haxxa> It's dead
[22:30:30] <Julius_> pulse, somehow I always have the feeling that my programs are basically just for loops and nothing else. Just linear code that is iterated for a bunch of items
[22:30:31] <GeDaMo> The magic smoke escaped :(
[22:30:34] <pulse> kzootech, same
[22:30:38] <pyzozord> oh yeah I see, sorry about that
[22:30:38] <pulse> comments separate code into logical units
[22:30:49] <pyzozord> I guess that's the tough part of embedded devs, their bugs cost actual money
[22:30:53] <phogg> kodah: and what's good about it?
[22:30:56] <pulse> idk about that Julius_ 
[22:30:58] <kzootech> code should be linearly "readable" as best as possible
[22:31:03] <kodah> phogg: i woke up alive
[22:31:10] <mhmd> in event driven design, is the data stored in the event itself? for example, when a user changes email, is event "email changed", "user x changed email" or "user x changed email to a@b.c"?
[22:31:17] <beaky> yes i think donald knuth likes the idea he called it literate programming
[22:31:25] <phogg> spynxic: real literate programming was invented by Knuth. I don't think it's nice at all. Ever tried reading a non-trivial program written in WEB?
[22:31:39] <Haxxa> pyzozord yes and the connected and the conneted RS485 module and the FPGA and its 4am and I want to cry now :/ bye for now
[22:31:40] <Julius_> pulse, I always have the feeling that everything outside of    for_loop { do_stuff; do_other stuff; }   is very rare
[22:31:49] <phogg> kodah: I take it we're counting that in the good column?
[22:31:51] <kodah> kzootech: i think similarly, do you do FP? that idea takes interesting mutations in FP
[22:32:01] <[itchyjunk]> if my array is called a, is a.length the same as the number of elements in a ?
[22:32:02] <kodah> phogg: typically
[22:32:07] <kzootech> idk much about knuth's  literate programming
[22:32:09] <beaky> yes you can store it in the event itself though alternatively the data is in the rest of the state
[22:32:11] <kzootech> fp?
[22:32:18] <kodah> kzootech: functional programming
[22:32:22] <phogg> kzootech: imagine if each paragraph was a function, and if the comment was the name of a function. Do you still need the comments?
[22:32:23] <beaky> alternatively the data can be stored in the rest of the state*
[22:32:34] <pyzozord> Haxxa: get some rest try again tomorrow, maybe not all is rip
[22:32:34] <phogg> kodah: well, good morning then
[22:32:38] <kzootech> phogg: i would say yes
[22:32:40] <Julius_> [itchyjunk], FUCK, I hate when people use names like    a, i, x, r, ... because what the fuck is 'i' ?
[22:32:41] <pulse> phogg, what is the reason for avoiding comments?
[22:32:49] <pulse> what do you intend to achieve
[22:32:49] <kodah> FP forces you into interesting document patterns, and i treat them much like what you described
[22:32:49] <kzootech> i do do much functional programming really
[22:32:50] <phogg> pulse: what's the reason for insisting on them?
[22:33:03] <phogg> pulse: I am trying to make the program easier to understand
[22:33:04] <Julius_> People who call variables 'i' should be stoned!
[22:33:04] <kzootech> i mean i learned scheme and like coding js with functional programming in mind
[22:33:04] <GeDaMo> [itchyjunk]: looks like, yes
[22:33:05] *** Joins: nekobased (~based@user/nekobit)
[22:33:10] <pulse> phogg, documentation your thought process, adding valuable context, adding explanations etc etc etc.
[22:33:13] <cis> Julius_: i is the current index of course
[22:33:17] <pulse> what is the reason for avoiding it?
[22:33:24] <pulse> phogg, your program is infinitely harder to understand if it's just code
[22:33:25] <phogg> Julius_: people who avoid i for a loop counter in the name of understandability aren't helping much
[22:33:28] <kodah> functions and objects get a general paragraph, the naming of functions and variables (and sometimes returns) plays into that too
[22:33:29] <Julius_> cis, index of what? See, it's already unclear
[22:33:43] <[itchyjunk]> Julius_, i don't care about what you hate or dont
[22:33:43] <cis> Julius_: of the iterable you're iterating!
[22:33:46] <pulse> nobody has the insight into your own thought process, even you lose it after a while (which is self evident if you look through your code you wrote 5 years ago)
[22:33:52] *** Quits: elnavigator (~elnavigat@105.196.225.184) (Ping timeout: 245 seconds)
[22:33:53] <Julius_> phogg, one letter names should be made illegal!
[22:33:57] <kodah> i write more comments than most folks, i think, though
[22:33:57] <phogg> pulse: if the context literally just *repeats the words* used in the *names of your variables, keywords, and functions* without adding anything more then it is noise at *best*
[22:33:58] <kzootech> but i tend to think of a function as an "algorithm", so there is a patter to a function, declare variables, early bound checks, initialize variables, late bound checks, algorithm, cleanup, return
[22:34:01] *** Quits: nekobyte (~based@user/nekobit) (Killed (NickServ (GHOST command used by nekobased)))
[22:34:03] *** nekobased is now known as nekobyte
[22:34:03] <pulse> comments serve a purpose. avoiding comments seems like some kind of fluffy ideology to me
[22:34:11] <Julius_> [itchyjunk], I dont care about what you care for or not
[22:34:11] <beaky> nice i like algorithms
[22:34:14] <pulse> phogg, what's wrong with noise?
[22:34:22] <pulse> comments are typically colored, you can easily ignore them
[22:34:29] <phogg> pulse: most comments I see fall in to the category of "you should have written a function with that name", or they're even less useful than that.
[22:34:34] <kzootech> the function name might tell you what the algorithm does, but it doesnt do enough to segment the code for me
[22:34:40] <kodah> to me, comments should cover what's not covered in naming, including ambiguity
[22:34:48] <Julius_> phogg, why the fuck would anyone name a variable 'i' instead of 'nodeIdx' or something? Those people should be shot!
[22:34:58] <pulse> phogg, i think you're viewing this from some kind of narrow perspective that only applies to beginners
[22:34:58] <phogg> pulse: noise increases cognitive load and reduces the amount of code I can have on screen at once, both of which are a negative to understanding
[22:35:01] <kzootech> Julius_: i always use i
[22:35:06] <kzootech> its an idiom 
[22:35:09] <pulse> no sane programmer will write comments such as // this is an integer
[22:35:11] * Julius_ shoots kzootech 
[22:35:20] <pulse> phogg, and comentless code isn't noisy?
[22:35:23] <pulse> heh :)
[22:35:25] * kzootech dodges
[22:35:31] <[itchyjunk]> Julius_, then stop hilighting me to say irrelevent things
[22:35:33] <pulse> i mean you do you, i won't try to convince you otherwise
[22:35:35] <phogg> Julius_: because it is a convention as strong as a bar of tungsten, so strong that it is now more harmful to understanding not to use it
[22:35:41] <Julius_> kzootech, no wonder you need comments if you call a variable 'i'
[22:35:51] <phogg> pulse: not *commentless* code, code in which the *useless* comments have been removed
[22:35:56] <Julius_> [itchyjunk], I would never highlight you
[22:35:58] <kodah> is someone actually saying "no comments"? usually people argue for more concise comments
[22:36:03] <kzootech> i dont comment what i does generally Julius_ 
[22:36:10] <Julius_> phogg, convention for idiots
[22:36:22] <phogg> pulse: *most* comments seen *inline with statements* are really *functions you forgot to write*.
[22:36:26] <kzootech> i definately believe in coding with idioms in mind
[22:36:33] <jinsun> most of the time it is clear what i means, it is stupid to use long names when short ones are clear enough
[22:36:40] <kodah> hmm
[22:36:44] <kzootech> i,j, and k  are all idiomatic variable names
[22:36:48] <phogg> pulse: or, they are "int i; //declares i" type stuff, literally repeating the statement in English without adding information.
[22:36:48] <Julius_> kzootech, I also believe in coding without idiots in mind
[22:37:02] <phogg> pulse: *all other comments* are fine
[22:37:02] <[itchyjunk]> i think we call all tell who the real idiot is
[22:37:05] <Julius_> People who use i, j, k should be shot!
[22:37:24] *** Joins: nekobased (~based@user/nekobit)
[22:37:33] <kzootech> phogg: i mean people starting off do that often but as a beginner i dont really see over commenting as a problem
[22:37:36] <phogg> Julius_: I agree for j and k, but not i. Long live the universal iteration counter.
[22:37:44] *** Quits: nekobyte (~based@user/nekobit) (Killed (NickServ (GHOST command used by nekobased)))
[22:37:46] *** nekobased is now known as nekobyte
[22:37:50] <cis> Julius_: for (let theCurrentIndexOfTheArrayWeAreIterating = theIndexAtWhichWeBeginTheIteration; theCurrentIndexOfTheArrayWeAreIterating < theIndexBeforeWhichWeWillStopIterating; theCurrentIndexOfTheArrayWeAreIterating += theNumberToIncreaseTheIndexByEachTime) { ... }
[22:37:55] <phogg> kzootech: as a maintainer I do
[22:37:55] <cis> Julius_: You're right, this is better.
[22:38:09] <kzootech> cis: you made it so clear, why havent i been doing this ;)
[22:38:25] <kodah> let's use a real world example
[22:38:26] <kzootech> honestly i spend way to much time naming an renaming variables
[22:38:29] <kodah> https://gist.github.com/kodah/e2ce6e06965654cb2d0c44808bce6215
[22:38:30] <bayaz> Title: Binary Search 
[22:38:35] <Julius_> phogg, in case you only have one index in your method, 'i' might be fine. But experience tells me that you will extend the method anyway in the future, and then no one knows that 'i' is. So there is no reason to not do it right from the beginning, and it would also be consistent that way
[22:38:40] <kodah> what would yall say about this?
[22:39:01] <Julius_> phogg, *what 'i' is
[22:39:05] <phogg> kodah: I am advocating for avoiding comments by instead making the code clear enough in and of itself. Some people keep thinking I am saying "never write a comment" even though I keep very carefully not saying that.
[22:39:29] <kodah> phogg: i know what you're saying
[22:39:35] <kodah> i agree
[22:39:43] <kodah> i'm just curious what others are really advocating for
[22:39:43] <phogg> Julius_: in a function with only one variable it really doesn't matter what you call it. In a sufficiently small scope anything is permissible, even if it's against all the best practices. 
[22:39:47] <Julius_> phogg, and PLEASE teach people that there is a difference between an ID and an Index. One is 0, 1, 2, ..., and the other (ID) could be unordered random numbers
[22:40:02] <phogg> kodah: the only other one talking from this side is Julius_, so ask him
[22:40:03] <kzootech> kodah: i never like to use // comments for permanent comments
[22:40:15] <kzootech> i use // for commenting out bits of code and such in debugging
[22:40:18] <phogg> Julius_: ID == UUID, problem solved.
[22:40:22] <Julius_> phogg, I dont see any good reason why I would chance the way I name things just because the method only has 1 and not 2 variables
[22:40:28] <kodah> tbh, i tend to use // for every line. i just like the look of it
[22:40:29] <kzootech> and /* */ for things i intend to keep in the final source
[22:40:42] <Julius_> phogg, yes, but people always do array[ID] and this fucks me up all the time
[22:40:47] <[itchyjunk]> hmmmmmmmmmmmmmmm
[22:40:53] <[itchyjunk]> look like i need to return an array
[22:40:57] <kzootech> that way i can quickly search for // to see if i left some debugging stuff around
[22:40:59] * [itchyjunk] scratches head
[22:41:02] <kodah> Julius_: that just seems like a misinterpretation of `i`
[22:41:10] <Julius_> kodah, ?
[22:41:23] <phogg> kzootech: I use block comments for comments exceeding 80 characters (including leading indentation). In other words, no multi-line line comments.
[22:41:27] <kzootech> i find // easier to search for in code and easier to add and remove compared to /* comments */
[22:41:27] <kodah> Julius_: you're talking about looping an array?
[22:41:34] <Julius_> Variables should not have 1 letter words, because the name should tell you what the variable is
[22:41:41] <GeDaMo> [itchyjunk]: public int[] example() { ... } ?
[22:41:42] *** Joins: elnavigator (~elnavigat@105.196.225.184)
[22:41:55] <kodah> Julius_: i use one letter variables for inconsequential things
[22:42:02] <kzootech> phogg: basically anytime i use // i try to put it at as the first two characters of a line in my code
[22:42:06] <Julius_> kodah, how should I know what people are talking about when they call their variable 'i', since 'i' does not tell me what it is
[22:42:10] <[itchyjunk]> GeDaMo, that part i have. i have if (condition) { return i and j}
[22:42:17] <[itchyjunk]> but i need to package i and j as an array i think
[22:42:21] <kodah> Julius_: `i` is a widely held convention
[22:42:29] <kodah> much like T
[22:42:35] <phogg> [itchyjunk]: what language?
[22:42:38] *** Quits: Enitin (~Enitin@82.102.22.84) (Ping timeout: 272 seconds)
[22:42:38] <[itchyjunk]> java
[22:42:39] <kzootech> and a and b and c 
[22:42:41] <Julius_> kodah, I am very sure that there is a special place in hell for people who use 1 letter variable names, and who confuse ID and index
[22:42:55] <phogg> [itchyjunk]: ah, there I cannot help you (-: But there are usually a few options for that.
[22:43:00] <GeDaMo> [itchyjunk]: I don't know if you can do return int[]{i, j} in Java
[22:43:02] <kzootech> idk i come from a math background where single letter variable names tend to have an implied meaning in a context
[22:43:03] <kodah> `i` always means index to me
[22:43:07] <Julius_> kodah, widely held convention = things idiots do
[22:43:15] <kodah> and indexes i would expect to be ordered
[22:43:15] <[itchyjunk]> oh that looks fancy
[22:43:15] <phogg> Julius_: no...
[22:43:20] <Julius_> Yes
[22:43:20] <kzootech> so i borrow those from mathematics i guess
[22:43:39] <phogg> kzootech: that's where computer science got its i, j, and k from
[22:43:41] <kodah> Julius_: conventions help us correlate complex actions quickly
[22:43:44] *** Joins: audiobirb (~audio@2603-8081-1800-00ad-3290-0c64-3212-0442.res6.spectrum.com)
[22:43:50] *** Joins: rubion (~rubion@cpc124316-ayle4-2-0-cust156.15-2.cable.virginm.net)
[22:43:58] <Julius_> phogg, I can guarantee you that the next guy will extend your method and add an inner loop and calls it k, and then no one knows what i and k are
[22:44:01] <kodah> for instance, i don't need to say, "i'm looping an ordered array sequentially"
[22:44:05] <cis> phogg: I thought those were on loan from Dijkstra
[22:44:10] <kzootech> a,b,c for integer type stuff; r,s,t for floating point stuff; etc
[22:44:21] <Julius_> kodah, convention is for idiots if there are better, clearer ways to do things
[22:44:25] <kzootech> though im not always shooting for a 1 letter variable name
[22:44:35] <kzootech> but for loop structures and such im likely to lean on them
[22:44:38] <phogg> Julius_: that would be worse than refactoring the code at that point, but reasonably understandable. I draw a hard line before j, though. Use it only when essential.
[22:45:00] <kodah> Julius_: why is convention for idiots when it's purpose is to speed up communication of complex ideas?
[22:45:10] <Julius_> kzootech, no one knows what 'a' is because there is almost zero information in that name
[22:45:24] <Julius_> kodah, since when is a for loop a complex idea?
[22:45:29] <phogg> kzootech: if your scope is *very  small* you can get away with that, otherwise please don't.
[22:45:36] *** Joins: manin (~x@185.242.190.95)
[22:45:36] <kodah> if everyone is taught `i` means index and T means generic, then have you not communicated two fairly complex ideas in one breath?
[22:45:40] <Julius_> phogg, just do it right from the beginning!
[22:46:09] *** Joins: Enitin (~Enitin@82.102.22.84)
[22:46:11] <phogg> kzootech: inside the context of a specific program, if you're always dealing with e.g. an class starting with the letter T (or whatever), you might develop a local convention of naming variables containing it just t. This is fine.
[22:46:13] <GeDaMo> [itchyjunk]: it might need to be return new int[] {i, j};
[22:46:22] <phogg> kzootech: to do it more generally is a bad idea
[22:46:33] <kzootech> i mean i tend not to use many single-character variable names, i just wont really shy away from them because i feel like i can usually write so that its clear in context
[22:46:41] <Julius_> kodah, what index? Imagine you have 4 arrays, called nodes, edges, colors and cars. How the fuck is anyone supposed to know what index 'i' is referring to? Call it nodeIdx and it is crystal clear
[22:46:56] <phogg> Julius_: from the beginning there was no need to structure for a nested loop, so it was already right. Although you are correct in that most of the time you don't actually need the counter to be bound to a local.
[22:46:57] <[itchyjunk]> hmm
[22:47:04] *** Quits: thesemicolons (~thesemico@user/thesemicolons) (Quit: leaving)
[22:47:06] <[itchyjunk]> i did int[] arr = {1,2}
[22:47:15] <kzootech> i dont think i write code that is unclear very often
[22:47:16] <[itchyjunk]> i am returning this array inside the if statement
[22:47:18] <kzootech> i try not to
[22:47:18] <[itchyjunk]> inside loops
[22:47:20] <Julius_> Why would anyone call an array arr? Fuck
[22:47:24] <kodah> Julius_: `i` is affected by scope in nearly every language i can think of
[22:47:25] *** Joins: thesemicolons (~thesemico@user/thesemicolons)
[22:47:26] <beaky> yes just call it a
[22:47:26] <GeDaMo> [itchyjunk]: that should work, I think
[22:47:29] <[itchyjunk]> but i am getting an error "missing return statement"
[22:47:32] <kzootech> but i find long variable names unclear 
[22:47:47] <kodah> Julius_: so if you're looping a variable called `nodeEdges` then `i` is clearly an edge
[22:47:51] *** Joins: kurtthemaker (~kurt@S010644a56e3e0ee9.cn.shawcable.net)
[22:47:53] <phogg> kzootech: I won't say I've never used "s" as the name of a variable containing a string inside a generic string manipulation routine. But, not if it's more than a handful of lines.
[22:47:55] <[itchyjunk]> can't i return at any point i find thesolution?
[22:47:56] <kzootech> i tend to like to use groups of words that are of the same length for variable names
[22:48:01] <GeDaMo> [itchyjunk]: it might need one at the end just in case the loop ends without returning
[22:48:02] <[itchyjunk]> or does return have to be in a specific place?
[22:48:11] <[itchyjunk]> ahhhhh
[22:48:13] <kodah> phogg: are we old programmers now?
[22:48:15] <[itchyjunk]> that makes ense
[22:48:15] <GeDaMo> You should be able to return inside a loop
[22:48:16] <InPhase> The reason to call an array arr, or an index i, is because generic programming beats specific programming.  If you can move your logic out into general reusable functions, then you use generic labels for the variables.
[22:48:17] <[itchyjunk]> sense*
[22:48:19] <Julius_> kodah, doesnt answer my question. If you have i, j, k, is i referring to nodes, j to edges, and k to colors, or is i referring to colors and k to cars and j to edges, or .... see, it's maximal confusion
[22:48:22] <phogg> kzootech: like I said above, if the scope is small enough you can do pretty much anything
[22:48:40] <phogg> kodah: ugh, I hope not
[22:48:45] <kodah> Julius_: you're not looping those things at the same time
[22:48:57] <kodah> even if you're doing it concurrently they're in different scopes
[22:49:05] <Julius_> kodah, you often have more than just 1 loop in a method
[22:49:13] <jeaye> I recommend not using i and j together. Visually, they're too similar. I go with i, k, m usually.
[22:49:15] <phogg> Julius_: not if you use more, smaller functions!
[22:49:16] <kodah> Julius_: sure, but scope impacts each of them
[22:49:31] <kzootech> phogg: honestly i think it really just comes down to actually reading your code after you wrote it and taking the time to edit further after it function for clarity 
[22:49:35] <kodah> all you need to do is look to the right to see what you're indexing
[22:49:36] <InPhase> If your function is so nested that you can't keep track of what loop index is in play, then you probably need to break that function down.
[22:49:45] <phogg> jeaye: Agreed. That's why I give a pass to i and k, but not j. By the time you need three you probably have other issues, too.
[22:49:46] <[itchyjunk]> hmm i added an else statement
[22:49:51] <Julius_> phogg, if you have a class and this class has a member variabe that has the index of a node, do you call this variable 'i' as well? If not, you are inconsistent
[22:49:54] <[itchyjunk]> shouldn't that take care of it?
[22:50:05] <phogg> Julius_: no, the scope is too wide by that point
[22:50:14] <kodah> in what language is `i` scoped beyond a for loop?
[22:50:15] <phogg> Julius_: it's not a simple loop counter in that context
[22:50:18] <Julius_> phogg, inconsistency detected
[22:50:20] <GeDaMo> [itchyjunk]: depends where you added it :P
[22:50:20] <kodah> Julius_: https://gist.github.com/kodah/e2ce6e06965654cb2d0c44808bce6215
[22:50:21] <bayaz> Title: Binary Search 
[22:50:24] <[itchyjunk]> https://bpa.st/YZHA
[22:50:25] <bayaz> Title: View paste YZHA 
[22:50:28] <kzootech> as in, dont just write the rough draft that does the thing, go back and revise it after you actually have it working and add comments and change variable names until you are satisifed what you are doing is clear
[22:50:35] <phogg> Julius_: I don't care about being inconsistent as long as I am sufficiently clear in each case.
[22:50:37] <kodah> oh nvm i use while loops there
[22:51:05] <phogg> kodah: Everything is while loops.
[22:51:07] <kzootech> good comments in the right place are just as valuable as the code itself
[22:51:16] <kodah> phogg: i know, i wasn't thinking
[22:51:16] <Julius_> phogg, your "clearness" will very very likely become unclear over time, since code changes, things are added, other things are removed, ...
[22:51:33] <GeDaMo> [itchyjunk]: it might not be able to determine that it will always return, I'd just put the 0 return outside the loops
[22:51:51] <[itchyjunk]> hmmmm
[22:51:55] <phogg> Julius_: not for a C-style for loop counter. It will be unlikely to be different for as long as there is a for loop
[22:51:55] <Julius_> People who use 1 letter variable names should be shot on almost all cases
[22:51:57] <[itchyjunk]> if i have two returns in one piece of code
[22:51:59] <[itchyjunk]> that is fine?
[22:52:01] <GeDaMo> Yes
[22:52:03] <kodah> i still don't see a reason for `i` to change, and if i find you using that convention in code review i will make you change it
[22:52:11] <[itchyjunk]> whichever one comes first will be the one that gets sent?
[22:52:14] <kzootech> Julius_: that again goes back to not publishing your 'rought draft' when you get it working
[22:52:18] *** Joins: SerialSmile (~SerialSmi@78.107.92.95)
[22:52:18] <beaky> yes that is why verbose variable names for indices is the wrong choice you gotta maximize concision to bring clarity to more important things than the indices (like the actual operations)
[22:52:27] <phogg> kodah: if I were inventing the discipline of programming today I wouldn't include i. But we have it, and it's too useful to throw out.
[22:52:28] <Julius_> phogg, it's very likely someone will add a second loop or an inner loop in the future
[22:52:28] *** Joins: lunarkitty (uid501895@user/pyra)
[22:52:47] <Julius_> kzootech, I am not publishing anything. What are you talking about?
[22:52:49] <kodah> phogg: what would you use instead?
[22:52:57] <GeDaMo> [itchyjunk]: your code, as written wouldn't execute the loops anyway, it would return at the first test
[22:52:57] <phogg> Julius_: it is the responsibility of that author to write the code that makes the most sense at that time, which would include doing something about the outer loop if it now harms clarity.
[22:53:10] *** Joins: webnet4 (~0x100@32.211.211.39)
[22:53:20] <phogg> kodah: idx, probably.
[22:53:26] <Julius_> phogg, do you call your other variables r, m, a or something like that as well to maximize the confusion? Might be a good idea
[22:53:34] <kzootech> Julius_: code isnt complete when you get it working, its complete when have made it cogent
[22:53:43] <phogg> Julius_: No, or only if it is sufficiently clear from context.
[22:53:56] <[itchyjunk]> oh no
[22:53:58] <Julius_> kzootech, do it right from the beginning. There is no excuse not to
[22:54:01] <[itchyjunk]> my code fails :P
[22:54:10] <GeDaMo> [itchyjunk]: did you take the else out?
[22:54:12] <phogg> Julius_: like I said before, if there is only one variable in a function the name for it is pretty unimportant and has little impact on readability one way or another
[22:54:23] <webnet4> noooOOooOOoOOoOoOoOOOoo
[22:54:24] <Julius_> phogg, it might have a purpose since no one else can understand your code then and you would keep your job
[22:54:32] * webnet4 slams the code failed buzzer
[22:54:34] <kzootech> Julius_: most authors of books dont publish their rough drafts even though the story "works"
[22:54:44] <phogg> Julius_: there are many reasons not to do it right from the beginning, including not knowing at the beginning what right is (or what right will be by the time you get to the end)
[22:54:50] <Julius_> [itchyjunk], your code does precisely what you wrote down
[22:54:50] <kzootech> unless you are like jack kerouc 
[22:55:06] *** Quits: Akuli (~Akuli@82-203-165-39.bb.dnainternet.fi) (Quit: Leaving)
[22:55:06] <kzootech> kerouac*
[22:55:10] <phogg> Julius_: if it would make the code easier to understand then you would use a better name, obviously. When it doesn't is when you don't have to.
[22:55:19] <kodah> phogg: oh, yeah i've seen people use idx
[22:55:26] <Julius_> phogg, there is no reason to make your naming convention dependent on if there is 1 or 2 loops
[22:55:29] <kzootech> but also, everyone has a slightly different process to getting to their best result, and thats fine
[22:55:43] <kodah> i guess my point is when looping you really only need a consistent representation
[22:55:53] *** Quits: SerialSmile (~SerialSmi@78.107.92.95) (Client Quit)
[22:55:58] <[itchyjunk]> Julius_, why don't you argue about how smart you are and how stupid everyone who uses `i` is with rest of the channel instead?
[22:56:03] <[itchyjunk]> maybe they value your comments more
[22:56:09] <kodah> whether that be `i` or `idx` the idea you're representing is an index, not a specific index membership
[22:56:09] <Julius_> phogg, I agree that too long names can also be a pain in the ass and make things even unclearer. But 1 letter names are fucking rediculous
[22:56:10] <kzootech> i think i tend to like short variable names because im really strick at sticking to 80 columns for code and comments
[22:56:35] <phogg> Julius_: Needing more than one C-style for is rare, more than 2 probably a design mistake. If you add a second, nested loop I am not saying you should rename i (far from it), I am saying you should refactor your construct to avoid the need for two nested C-style for loops.
[22:56:40] <Julius_> kodah, idx is not much better than i since no one knows what idx. Or is there only 1 array in your entire program?
[22:56:45] <webnet4> 1 letter is fine in many situations
[22:56:56] <beaky> yes the ide will tell you what the letter is for anyway
[22:56:56] <phogg> Julius_: for example, by having the inner one be in a function (where again the local loop counter is i). More, smaller functions!
[22:56:56] <webnet4> a, b params for a math function?
[22:57:01] *** Joins: snake (~snake@user/snake)
[22:57:01] <kodah> Julius_: when i have a function that's purpose built to do some mutation on the input i'll often use a one letter variable internally after the mutation has occurred on the input
[22:57:29] <Julius_> phogg, it's not a design mistake to have 3 loops inside each other in 1 method, because often there is no reason to seperate them into different methods
[22:57:30] <phogg> Julius_: there is usually one one array that you are addressing in any given loop scope, so it's clear from context
[22:57:45] *** Quits: jamea (~jamea@177.239.85.103) (Ping timeout: 248 seconds)
[22:57:51] <phogg> Julius_: Here I have identified a reason to do so.
[22:58:06] <kodah> Julius_: the cognitive load of three loops is decently high
[22:58:11] <phogg> Julius_: how many levels of indentation do you allow before you notice a code smell and make some functions?
[22:58:14] <Julius_> kodah, I sometimes use 1 letter names when I am lazy as fuck and can't come up with a good name. Which proves my point that 1 letter names are bad
[22:58:19] <kodah> if you dump them in their own method with a signficant name it reduces that load
[22:58:32] <phogg> kodah++
[22:58:49] <[itchyjunk]> hey
[22:58:50] <kzootech> phogg: its generally around 3/4 indents where i start to get pretty suspcicious
[22:58:51] <[itchyjunk]> i fixed it
[22:58:51] <phogg> kodah: you missed the part earlier where he was arguing against having a lot of functions
[22:58:56] <[itchyjunk]> it works
[22:59:01] <phogg> kzootech: that seems about right to me, too
[22:59:02] <Julius_> phogg, I told you that functions are only good if you need them at different locations in your code, or if they have just a few parameters and are really quite independent of the rest
[22:59:03] <GeDaMo> [itchyjunk]: :)
[22:59:04] <kodah> Julius_: you could easily argue that it proves the point that the variable wasn't significant enough to uniquely name
[22:59:06] <kzootech> some of it depends on the language you are working with though
[22:59:15] <[itchyjunk]> it says my code is better than 77.51% of other submitted java solution!
[22:59:18] <kzootech> and sometimes 4 or 5 is actually appropriate in some weird case
[22:59:22] <kzootech> but usually not
[22:59:30] <beaky> nice congrats on your java soltution
[22:59:35] <phogg> kzootech: I allow an extra level or two if inside a class, where you had to add some indentation just to get going
[22:59:39] <Julius_> phogg, I have code blocks that are over 3 pages long. Very easy to follow and understand ... since I dont call my variables 'i'
[22:59:42] <[itchyjunk]> thanks! i finished the first challange
[22:59:45] <kodah> like, a context object that just gets passed along -- why would i uniquely name something that is already of type context.Context?
[22:59:47] *** Joins: Akuli (~Akuli@82-203-165-39.bb.dnainternet.fi)
[22:59:47] <jeaye> [itchyjunk]: Nice work!
[23:00:03] <phogg> Julius_: *if* you have code blocks which are that long, *then* it makes sense to be more verbose and descriptive.
[23:00:03] <Julius_> [itchyjunk], what was the challenge?
[23:00:09] <kodah> i always call mine `ctx` but it could see someone calling it `c`
[23:00:12] <kzootech> phogg: when i write html i tend to just not indent for the opening <html> tag
[23:00:19] <phogg> Julius_: however, you could *likely* improve the readability by not having anything that long
[23:00:28] <kzootech> sometimes i use things like that in other languages, but im more hesitant about it
[23:00:31] <Julius_> phogg, even if the code blocks are smaller, there is no reason to adapt the naming convention
[23:00:34] <[itchyjunk]> https://bpa.st/HQOA
[23:00:35] <bayaz> Title: View paste HQOA 
[23:00:39] <kodah> phogg: less functions sounds like a nightmare. where does one put the logic? in a spaghetti bowl?
[23:00:40] <[itchyjunk]> the challange was to add 2 numbers
[23:00:42] <phogg> kzootech: Ugh. I indent one tab at each level, unless the tag opens and closes on the same like (like a simple <a>).
[23:00:48] <[itchyjunk]> jeaye, thanks
[23:00:48] <phogg> kodah: apparently
[23:01:16] <phogg> Julius_: there is no *need* to, but no need *not* to. If your scope is small you can type less and not harm clarity.
[23:01:17] *** Quits: freakazoid333 (~matt@2603:9000:cf0f:80e3:192a:1eb2:f711:9efa) (Ping timeout: 252 seconds)
[23:01:17] <Julius_> phogg, my variable names are not long. I dont use crap like complexNodeSubstitutionHandlerReference, where really no one knows that the fuck that is
[23:01:36] <beaky> yes just call it x
[23:01:40] <Julius_> lol
[23:01:54] <kodah> significant functions and significant variables are a thing imo
[23:02:11] <phogg> if it's important it should look important?
[23:02:14] <Julius_> Are you guys calling your functions just f as well?
[23:02:26] <kodah> when i was primarily in OOP this didn't occur to me as much, but my FP experience i think has made my OOP writing much better through use of better organized function calls
[23:02:30] <beaky> yes i call them f
[23:02:32] <phogg> Julius_: of course not
[23:02:39] <jeaye> f, fn, or fun
[23:02:42] <phogg> kodah: I noticed the same thing
[23:02:43] <Julius_> fuck
[23:02:46] <webnet4> omfg i HATE single letter function names
[23:02:47] <Julius_> foo
[23:02:49] <kodah> Julius_: not usually. anonymous functions can be named that though.
[23:02:51] <beaky> g if f is already taken
[23:02:52] <webnet4> why do they do it
[23:02:59] <jinsun> if it a math problem then I dont' see problem with using f, g, h either
[23:03:01] <Julius_> kodah, *rolls eyes*
[23:03:06] <phogg> kodah: after I wandered around in lisp country for a while I came back to Perl and JS writing much better data-driven code, too. Useful exercise.
[23:03:22] <Julius_> jinsun, yeah, ok, maybe. That's something else
[23:03:24] *** Joins: Izem (~rcg@bras-base-london1483w-grc-43-65-95-173-5.dsl.bell.ca)
[23:03:39] <jeaye> phogg :)
[23:03:50] <kodah> Julius_: some languages let you make functions an argument, and if my only purpose for giving a function a name is to drop some variables in then i'll call it `fn`
[23:03:52] <GeDaMo> [itchyjunk]: is the nums array ordered?
[23:04:01] <[itchyjunk]> oh idk
[23:04:08] <[itchyjunk]> i dont think it's ordered
[23:04:28] <kodah> phogg: oh yes, lispy languages are great for that imo
[23:04:34] <[itchyjunk]> i had <= originally
[23:04:39] <[itchyjunk]> so my index was out of bounds
[23:04:40] <Julius_> phogg, what does your mother call you? Did she say things like "P come down, diner is ready!" when you were a kid? Because "phogg" is too long and there is no one else in the appartment anyway?
[23:04:41] <phogg> All languages are object oriented. Also, all languages are functional. And procedural. Some of them just help you more than others with one or more of these things. Most languages which are not designed to help you be functional benefit from being used a little functionally.
[23:04:43] <GeDaMo> I was just wondering how you might speed it up
[23:04:46] <[itchyjunk]> but i used < in both and it solved it
[23:04:46] <kodah> you can always tell which devs have spent time in lispy territory
[23:04:56] <[itchyjunk]> ah
[23:04:59] <kodah> phogg++
[23:05:02] <[itchyjunk]> yeah speeding up programs sounds hard
[23:05:09] <phogg> Julius_: that would clearly be ridiculous, but it does not have any bearing on the argument here.
[23:05:11] <[itchyjunk]> loops are probably bad for that
[23:05:25] <Julius_> We should just call him p from now on, since it's clear that we mean him, right?
[23:05:27] <kodah> Julius_: some people actually do that if they have two people in the house named the same thing
[23:05:30] <jeaye> phogg: Done much procedural programming in Haskell?
[23:05:35] <jeaye> Or APL?
[23:05:39] <jeaye> Or Prolog?
[23:05:42] <Julius_> Whatever you say, p
[23:05:45] *** Quits: erica (~erica@user/erica) (Quit: The Lounge - https://thelounge.chat)
[23:05:52] <kodah> Julius_: my friends nickname was "M", pronounced "Em" for Mickey
[23:05:56] <[itchyjunk]> Parents do use nicks for their kids
[23:05:59] <[itchyjunk]> easier to use terms and such
[23:06:03] *** Joins: erica (~erica@user/erica)
[23:06:04] <[itchyjunk]> and they don't use full name each time
[23:06:07] <jeaye> phogg: General purpose, multi-paradigm languages fit your description. Not all languages are multi-paradigm, though.
[23:06:08] <kodah> His dad was Mickey the first
[23:06:08] <Julius_> kodah, m kay
[23:06:12] <[itchyjunk]> First. M . Last to refrence kids
[23:06:20] <jeaye> phogg: Some langs literally can't be used in a procedural way.
[23:06:20] <phogg> jeaye: In APL or prolog it would be... a challenge. I've never tried in Haskell, but I believe you could (after a fashion).
[23:06:44] <jeaye> phogg: In declarative, lazy langs, procedural programming just doesn't make sense.
[23:06:46] <phogg> jeaye: you can use whatever paradigm you like, but you may have to fight the language to do it
[23:06:47] <Julius_> We could just use the first letter of every word. Would be shorter
[23:07:07] <phogg> jeaye: I agree, it doesn't make sense and wouldn't add value. 
[23:07:09] *** Quits: erica (~erica@user/erica) (Client Quit)
[23:07:13] <jeaye> phogg: In Prolog, no matter how much you fight, you're not going to achieve procedural programming.
[23:07:24] <phogg> jeaye: you are definitely right about that
[23:07:26] <kodah> Julius_: i guess the point here may be that language semantic (in code but also spoken and written) are subject to conventions. some conventions improve clarity some improve speed for communication.
[23:07:29] <Julius_> phogg, when there are other people I will call you phogg, but when there is only you I will call you p. Does makes sense, doesnt it?
[23:07:29] *** Joins: erica (~erica@user/erica)
[23:07:51] <kodah> Julius_: as a SRE we used certain annunciations in our language that made communication during active incidents quick and concise
[23:07:52] <beaky> haskell is the world's finest imperative language https://www.microsoft.com/en-us/research/wp-content/uploads/2016/07/mark.pdf
[23:07:53] <bayaz> Type: application/pdf Size: 338.0 kB 
[23:07:57] <phogg> jeaye: I'll confess I've spent less than one day with prolog, so I usually don't think about it.
[23:08:03] <mrig> Julius_: To my mind variable naming is scope related. 
[23:08:05] <Julius_> kodah, tl;dr. Please only use the first letter of each word!
[23:08:17] <kodah> Julius_: not quite that extreme
[23:08:21] <phogg> Julius_: your commentary at this point is rather far afield and not germane
[23:08:25] <Julius_> mrig, get a new mind
[23:08:36] <jeaye> phogg: What you've said makes sense for most mainstream langs, since they're multi-paradigm. But it's a sweeping statement that is just too broad.
[23:08:36] <mrig> using any more than one letter for something that carries no information about the code is a waste of brain power to read.
[23:08:40] <Julius_> phogg, I am just making fun of you
[23:08:53] <jeaye> Julius_: Stop making fun of people, please.
[23:09:14] <jeaye> You were just quieted only several hours ago.
[23:09:15] <kzootech> idk i think it is also just kind of silly to assume there is only single practice that everyone sound adopt in terms of variable names, indenting, etc
[23:09:18] <Julius_> mrig, why use names at all? Sine your one letter names already have alost zero information in them
[23:09:19] <phogg> jeaye: I like sweeping statements. The reader requires some wit to know how much to disregard, which I think is a positive thing.
[23:09:25] <edgar-rft> people are not here for having fun?
[23:09:30] <Julius_> Ok, j
[23:09:32] <kzootech> i think code should be thought of not disimilar to any other form of writing, we have different styles
[23:09:49] <kzootech> you might not like one persons writing style but others will
[23:09:58] <kodah> Julius_: what you're doing is called being reductive
[23:09:59] <Julius_> jeaye, several hours ago I have not been here, so it's logic that I was quiet then
[23:10:08] <kzootech> consitency within a project is really the most improtant thing
[23:10:17] <kodah> Julius_: folks are saying: "signficant variable and function names matter, but sometimes they matter less"
[23:10:18] <phogg> kzootech: I thoroughly agree
[23:10:23] <kzootech> unless your style is to be inconsistent, which, okay then
[23:10:30] <[itchyjunk]> i dont even understand this problem lol
[23:10:36] <[itchyjunk]> idk why this is considered easy
[23:10:45] <jeaye> [itchyjunk]: You're still very new to programming.
[23:10:45] <phogg> [itchyjunk]: what problem?
[23:10:48] <Julius_> kodah, I think kids these days do what I demanded, only use the first letter of words. lol, rofl, brb, gg
[23:10:50] <kodah> [itchyjunk]: are you on leetcode?
[23:10:58] <[itchyjunk]> yes problem 2 on leetcode
[23:11:07] <[itchyjunk]> it wants me to reverse a given integer
[23:11:07] <kodah> Julius_: those are to quickly communicate ideas
[23:11:16] <mrig> Julius_: why do I need anything more in locally scoped function when the variable has no consequence out side of that scope, and the naming convention is the same through out the entire code base?
[23:11:18] *** Joins: jamea (~jamea@177.239.87.4)
[23:11:18] <[itchyjunk]> but it says stuff about signed 32 bit integer
[23:11:20] <[itchyjunk]> which i dont get
[23:11:22] <Julius_> kodah, i c
[23:11:23] <kodah> acronyms are nothing new
[23:11:25] <jeaye> [itchyjunk]: It will help to focus more on learning the language, and how to build programs, rather than learning algorithms.
[23:11:27] <webnet4> go complain to #math, they're the ones that started all this single variable junk, single letter variable
[23:11:33] <edgar-rft> I object, just because Im an object-oriented person.
[23:11:34] <kodah> Julius_: "i c" is different from "lmao"
[23:11:48] <[itchyjunk]> jeaye, i wanted to practice the language and someone suggested problems on leetcode
[23:11:51] <Julius_> mrig, because it is almost guaranteed that you code will be modified and/or extended in the future
[23:11:52] <kodah> one is an acronym the other is phonetically based
[23:11:58] <[itchyjunk]> not sure if what i am doing is algorithm or what
[23:11:58] <Julius_> kodah, k
[23:12:03] <kodah> Julius_: see
[23:12:06] <jeaye> [itchyjunk]: Leetcode challenges aren't very practical.
[23:12:07] <Julius_> kodah, c
[23:12:14] <[itchyjunk]> jeaye, oh :(
[23:12:14] <kodah> Julius_: do you not use "k"?
[23:12:26] <jeaye> [itchyjunk]: Writing practical programs in the lang you're learning is more practical.
[23:12:29] <Julius_> kodah, fuck no, I am not a braindead kid
[23:12:43] <[itchyjunk]> jeaye, what would be beginner friendly practical program?
[23:12:44] <kodah> Julius_: smart people shorten things too
[23:12:47] <mrig> Julius_: that makes no sense in this context.
[23:12:49] <kodah> Julius_: and i'm old
[23:12:56] <Julius_> kodah, smart people don't talk like kids
[23:13:00] <kzootech> javascript is unicode so i think we should all adopt the practice of only using non-ascii characters in variable names
[23:13:07] <pulse> there's nothing wrong with single-letter variables. i commonly use i,j,k as iterators, x, y, z for geometry, a, b, c for math etc.
[23:13:09] <pulse> z for z-index
[23:13:13] <Julius_> kodah, you can be old and still immature
[23:13:18] <edgar-rft> my bignums are bigger than yours
[23:13:23] <beaky> yes leetcode is not really about practicing design-oriented skills of programming (though there's some design skill involved when understanding a problem coming up with an algorithm implementation) 
[23:13:28] <mrig> there are logical conventions, and it is very readable.
[23:13:32] <kodah> Julius_: i don't think shortening things makes someone immature
[23:13:42] <beaky> since the problems provided are very narrow in scope
[23:13:46] <Julius_> pulse, if you have more than 1 array, how do you call the indices?
[23:13:52] <Julius_> kodah, I do
[23:13:54] <kodah> Julius_: anyway, this seems to be more about your superiority complex
[23:14:05] <pulse> Julius_, i0, i1, ... iN
[23:14:11] <jeaye> [itchyjunk]: It's common to start with simple games, like hi/lo. The program chooses a random number on startup and then prompts the user to enter a guess. The program says if the secret number is higher or lower than the guess and then prompts again. Repeat until the guess is correct.
[23:14:17] <Julius_> kodah, no, it is about being a degenerate or not
[23:14:18] <mrig> naming things well is hard, that includes knowing when you can shorten things and add clarity by doing so.
[23:14:31] <Julius_> pulse, what if your arrays are called cars and colors
[23:14:36] <[itchyjunk]> jeaye, ah, i'll work on that i guess
[23:14:43] <kodah> Julius_: "a degenerate"?
[23:14:45] <pulse> Julius_, why would that matter?
[23:14:56] <kzootech> mrig: a good porition of my time coding is just spent renaming variables until im satisifed 
[23:15:00] <jeaye> [itchyjunk]: All of the code necessary for that will carry over to other programs you're gonna build. Unlike leetcode challenges, where you're worrying about reversing 32bit integers. :P
[23:15:03] <Julius_> kodah, quite ligerally, yes. Using a degenerated language
[23:15:16] <kzootech> i can be extremely picky about variable names
[23:15:28] <kodah> ok
[23:15:31] <edgar-rft> we all know what happens when you're using programming languages with only one letter
[23:15:35] <beaky> yes there's more io involved in the hi-lo game for example
[23:15:52] <Julius_> pulse, I am asking? Do you use i for cars and k for colors, or k for cars and i for colors? And then later on in your code people always have look at the top of your code to find out which is which?
[23:15:58] <[itchyjunk]> i use f_n variable naming all the tine in math
[23:16:04] <beaky> whereas in leetcode challenges there's zero io involved its all given to you
[23:16:14] <pulse> Julius_, if anything i'd do car = cars[i] ;)
[23:16:15] <[itchyjunk]> where f is a function and {f_n} is a sequence of functions
[23:16:26] <kodah> Julius_: i'm guessing `n` is not significant to you?
[23:16:27] <Julius_> pulse, what if you have cars and colors, not just cars ?
[23:16:28] <[itchyjunk]> having a discriptive name in place of f changes nothing
[23:16:41] <Julius_> kodah, I dont use the n word
[23:16:42] <pulse> Julius_, i wouldn't code it so that that's any problem to begin with
[23:16:45] <kzootech> beaky: programming would be so much easier without io
[23:16:50] <kodah> uh
[23:17:08] <kodah> Julius_: do you have a background in maths?
[23:17:09] <Julius_> pulse, I think that's good, since it would end up in a total mess if you did
[23:17:18] <beaky> yes one challenge of programming is figuring out how to minimize the need for io
[23:17:18] * bayaz warns Julius_: Be respectful of others. No more warnings.
[23:17:19] <Julius_> kodah, I have a calculator
[23:17:29] <Julius_> bayaz, grow up
[23:17:33] <mrig> kzootech: yes me to, I'm a real stickler for getting naming right.
[23:17:34] <kodah> Julius_: i mean, do you have a background in mathematics
[23:17:45] *** bayaz sets mode: +q *!*@2a02:810b:c640:514:64e8:2a3d:aa18:bae0
[23:17:56] <kodah> well that question won't get answered
[23:18:29] <Izem> variable name documentation is an underated feature
[23:18:30] <kzootech> variable naming rules will get you in the ballpark, but the grass still needs to be mowed
[23:18:32] <edgar-rft> if you have a foreground in mathematics, why should there be no background?
[23:18:44] <beaky> and a step up in terms of io from the hi-lo game would be like a hangman style 'guess the word' game given a dictionary file for example 
[23:19:00] <jeaye> [itchyjunk]: ^^
[23:19:15] <jeaye> That's another great program to write, once you finish hi-lo.
[23:19:54] <jeaye> And keep these programs! They're gonna be good to have in the future. You can also go back and rewrite them to be better. The first time you implement something is very rarely gonna be the best implementation.
[23:20:08] <kzootech> then you can write a 3rd which combines high-low with hangman 
[23:20:23] <kzootech> you guess a word, and it tells you if it is alphabetically higher and lower than the word chosen
[23:20:29] *** Joins: gitgood (~gitgood@80-44-12-89.dynamic.dsl.as9105.com)
[23:20:44] <kzootech> and your goal is to find the right word by doing a manual binaary search of the dictionary essentially
[23:20:54] <phogg> you should also keep them because the thing you will find is that many real-world problems end up being solvable by variations on the same kinds of code you wrote to solve these simple examples
[23:21:20] *** Quits: tomgus1 (~tomgus1@90.208.15.36) (Quit: ZNC 1.7.2+deb3 - https://znc.in)
[23:21:22] <jeaye> Yeah. We write the same shit over and over, with slight variations.
[23:21:41] <Izem> interesting
[23:21:48] <Izem> what makes it hard to generalize?
[23:21:52] *** Joins: zwr (~zwr@2804:d45:b966:fb00:26a:9b67:c1dc:9ceb)
[23:21:52] <phogg> I learned to draw a pyramid of asterisks in a terminal for a C class, and that is probably the most useful thing I was taught formally
[23:21:58] <beaky> yes later on in your programming career you can rewrite everything in rust
[23:22:03] <phogg> because building a table is exactly the same thing, and there are a lot of tables
[23:22:16] *** Joins: tomgus1 (~tomgus1@2a02:c7f:d2b0:e600:ba27:ebff:fe5c:2dcd)
[23:22:24] <phogg> operating on any two dimensional grid is the same thing
[23:22:53] <kzootech> i never took any cs classes until way after i learned to program, i think the computer engineering classes were more valuable to me than computer science classes
[23:23:06] *** Quits: LucaTM (~LucaTM@user/lucatm) (Quit: Textual IRC Client: www.textualapp.com)
[23:23:15] *** Quits: nekodesu (~nano@user/nekobit) (Killed (NickServ (GHOST command used by nekobyte!~based@user/nekobit)))
[23:23:16] <kzootech> not because computer science classes were bad, just i knew much less electrical/computer engineering stuff when i was younger 
[23:23:23] <phogg> kzootech: likewise for me, which is why I didn't learn much. But still, some of the exercises taught me things I didn't realize I would need later.
[23:23:39] *** Joins: nekodesu (~nano@user/nekobit)
[23:23:59] *** Quits: nekobyte (~based@user/nekobit) (Killed (NickServ (GHOST command used by nekodesu!~nano@user/nekobit)))
[23:24:23] <jeaye> After hi/lo style games, I moved onto making my own text-based adventures. So I'd manage the player location, stats, health, and inventory, while running battles, having a town with a store, etc. Each of the features came one at a time, but every single one of those is very practical. You'll be designing systems which do similar things for most projects.
[23:24:25] *** Joins: nekobyte (~based@user/nekobit)
[23:24:26] <Izem> did you guys learn to design libraries?
[23:24:27] <phogg> young me "this is stupid, when will I ever need to draw a pyramid?" older me "yet another loop over a two dimensional array..."
[23:24:52] <phogg> Izem: eventually yes
[23:24:53] <beaky> nice i like for loops
[23:25:14] <phogg> Izem: library design is ridiculously hard. I think that's the hardest thing I've ever attempted to learn. I would not say that I am good at it even now.
[23:25:15] <GeDaMo> Print a histogram made of asterisks
[23:25:29] <Izem> yeah that's a good program
[23:25:35] <kzootech> Izem: as you make bigger projects i think you just start wanting to experiment with some of that
[23:25:43] <Izem> phogg: there does seem to be a lot of terrible apis around
[23:25:44] <GeDaMo> Give it some text and it prints letter frequencies
[23:26:05] *** Quits: nekodesu (~nano@user/nekobit) (Killed (NickServ (GHOST command used by nekobyte!~based@user/nekobit)))
[23:26:20] <phogg> Izem: what I discovered, eventually, is that this is because it's *really hard* to design a good one. When you find an API that's actually nice you should give some extra respect to its authors.
[23:26:56] <phogg> Izem: it's really easy to make something that is unusable, or not extensible, or looks nice from the inside but is awful from the outside, or fails to model the problem set properly, or all of these things
[23:27:00] *** Quits: nekobyte (~based@user/nekobit) (Excess Flood)
[23:27:04] <pulse> https://i.imgur.com/hD1ZfBH.jpg
[23:27:04] <bayaz> Type: image/jpeg Size: 89.6 kB 
[23:27:16] <phogg> not to mention leaking internal state when you really wish you hadn't
[23:27:28] *** Quits: thomas_25 (thomas_25@pls.just.stfu-kthx.bnc4you.xyz) (Remote host closed the connection)
[23:27:59] <pulse> i would replace "what i actually do" with a picture of a guy balancing a monkey on his shoulders, and the monkey is balancing a ball, and there's a cake on top of the ball
[23:27:59] *** Joins: nekodesu (~nano@user/nekobit)
[23:28:12] <pulse> to make it more accurate
[23:28:15] <kzootech> and the cake is on fire
[23:28:15] <GeDaMo> And the cake is on fire :P
[23:28:19] <GeDaMo> :D
[23:28:19] <pulse> lol
[23:28:19] <pulse> hivemind
[23:28:21] *** Joins: penguino (~mrpenguin@user/mrpenguin)
[23:28:22] <kzootech> lol
[23:28:43] <phogg> pulse: that sounds about right
[23:28:52] <paulo> hi, what's your favorite coffee bean?
[23:28:53] <edgar-rft> Library design is easy. You only need a shelve, a few books, and maybe some piece of paper to write down who has borrowed wich book and stuff like that.
[23:29:19] <phogg> edgar-rft: but making shelves is tricky. Joints are hard.
[23:29:20] <webnet4> `fixing API's is really annoying,  it takes forever just to update your old code that relies on it. i think most people just embrace the quirks instead of spending eons on a perfect design
[23:30:16] <edgar-rft> phogg: it's only hard for people who have never done anything other than computer programming :-)
[23:30:23] <phogg> One of the hard problems of computer science is naming things. This contributes to why API design is hard.
[23:30:27] <kzootech> webnet4: the other risk of changing your apis is that the users decide since they will have to put the work into updating their program they might just opt for a different library
[23:30:39] <Izem> what is vulkan? it's a graphics api but it's also a driver?
[23:31:04] <GeDaMo> You need GPU drivers which implement the Vulkan API
[23:31:10] <edgar-rft> a vulkan it's full of lava
[23:31:12] <jeaye> Vulkan is an API.
[23:31:17] <phogg> Izem: it's not a driver, but a driver may implement the interface
[23:31:47] <jeaye> The GPU drivers are needed for the OS to talk to the GPU to back the API (OpenGL, D3D, Metal, Vulkan, etc).
[23:32:08] *** Quits: webnet4 (~0x100@32.211.211.39) (Remote host closed the connection)
[23:32:20] *** Joins: webnet4 (~0x100@32.211.211.39)
[23:32:27] <phogg> Izem: you may hear people talk about a "vulkan driver" to either mean shared kernel-mode code related to vulkan that any drive might use, or a driver that includes vulkan support. It's basically OpenGL The Next Generation.
[23:32:50] <phogg> s/any drive/any graphics driver/
[23:33:06] *** Joins: freakazoid333 (~matt@2603:9000:cf0f:80e3:192a:1eb2:f711:9efa)
[23:33:19] <pulse> there's 2 hard problems in computer science. 1) naming things 2) cache invalidation and 3) off by one errors
[23:33:36] <webnet4> lol
[23:33:54] <phogg> pulse: There are four hard problems in computer science: 1) naming things, 2) cache invalidation, 3) too many layers of indirection, 4) off-by-one errors
[23:34:22] <pulse> hah
[23:34:50] <paulo> what's inderection?
[23:34:52] <edgar-rft> there are no  problems in computer science because computers are no science
[23:34:57] <phogg> I never hear it said that way, but since you can always solve a problem by adding a layer of indirection I think it should be
[23:35:04] <paulo> *indirection
[23:37:09] <phogg> Although I screwed it up two ways
[23:37:48] <phogg> "There are 3 hard problems of computer science: 0) naming things, 1) cache invalidation, 2) too many layers of indirection, 3) off by one errors."
[23:38:02] <phogg> the important part is that the count of problems has to be equal to the index of the last problem
[23:38:36] *** Quits: vysn (~vysn@user/vysn) (Quit: WeeChat 3.2)
[23:39:32] <phogg> paulo: it's where you use one thing to represent another thing, or to hide details about another thing.
[23:39:53] *** Quits: mei (~mei@user/mei) (Ping timeout: 248 seconds)
[23:40:49] <phogg> a filesystem is an indirection layer for bytes on disk (or rather several of them stacked together)
[23:40:50] *** Joins: vysn (~vysn@user/vysn)
[23:41:40] *** Quits: webnet4 (~0x100@32.211.211.39) (Remote host closed the connection)
[23:41:52] *** Joins: webnet4 (~0x100@32.211.211.39)
[23:42:41] <cis> bytes on a disk is just a layer of indirection for a physical array of stored charges
[23:43:15] *** Joins: twomoon (~twomoon@ip72-199-58-150.sd.sd.cox.net)
[23:43:49] <webnet4> magnets vs nand gates, fight!
[23:43:52] *** Joins: thomas_25 (thomas_25@pls.just.stfu-kthx.bnc4you.xyz)
[23:43:59] <phogg> two tin cans with a string adds a layer of indirection to voice communication, allowing the speakers to be at a greater distance
[23:44:01] <webnet4> magnetic dooomains
[23:44:09] *** Quits: elnavigator (~elnavigat@105.196.225.184) (Ping timeout: 248 seconds)
[23:45:55] <Izem> do computer graphics and bitmaps make an algebra?
[23:45:58] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[23:46:03] <Izem> imagine bitmap operators
[23:46:16] *** Joins: TheAceOfHearts (~TheAceOfH@24.41.239.76)
[23:46:26] <webnet4> you can blend images
[23:47:17] <beaky> programming what is the best way to teach it (and what is programming anwyway) https://youtu.be/g1ib43q3uXQ
[23:47:18] <bayaz> Title: "How to teach programming (and other things)?" by Felienne Hermans 
[23:47:29] *** Quits: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk) (Quit: Leaving)
[23:48:03] *** Joins: elnavigator (~elnavigat@105.196.225.184)
[23:48:57] *** Quits: gitgood (~gitgood@80-44-12-89.dynamic.dsl.as9105.com) (Ping timeout: 248 seconds)
[23:49:08] *** Quits: nekodesu (~nano@user/nekobit) (Ping timeout: 256 seconds)
[23:51:18] *** Quits: vysn (~vysn@user/vysn) (Quit: WeeChat 3.2)
[23:54:22] *** Quits: NEYi (~NEYi@109.251.216.38) (Quit: Leaving)
[23:55:10] *** Joins: gitgood (~gitgood@80-44-12-89.dynamic.dsl.as9105.com)
[23:55:14] *** Joins: vysn (~vysn@user/vysn)
[23:55:38] <webnet4> maybe ballmer was right all along about linux, https://www.zdnet.com/article/the-multifaceted-ebpf-linux-program-gets-its-own-foundation/
[23:55:38] <bayaz> Title: The multifaceted eBPF Linux program gets its own foundation | ZDNet 
[23:56:41] *** Quits: vysn (~vysn@user/vysn) (Client Quit)
[23:56:46] <webnet4> you guys remember when eBPF only allowed forward jumps, good times
[23:58:28] <Stefan26> good times?
[23:58:51] <webnet4> back in the before times
[23:59:19] <webnet4> it could be used to make simpel decisions, not much else
