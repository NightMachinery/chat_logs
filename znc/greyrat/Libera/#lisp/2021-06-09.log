[00:02:28] *** Joins: josemanuel (~josemanue@user/josemanuel)
[00:11:44] *** Quits: arca0 (tesuji@gateway/vpn/protonvpn/arca0) (Ping timeout: 245 seconds)
[00:13:47] *** Quits: analognoise (~analognoi@185.245.87.64) (Ping timeout: 252 seconds)
[00:15:48] *** Joins: mintsoup (~user@185.225.28.115)
[00:16:09] <mintsoup> Can anyone tell me the difference between '(a b c), #'(a b c) and #(a b c) in Scheme?
[00:18:29] <amirouche> join #schme :)
[00:18:35] <amirouche> join #scheme :)
[00:18:37] <amirouche> with an e
[00:19:02] <mintsoup> I did, it's kinda inactive
[00:19:07] <mintsoup> so I thought to ask here
[00:19:09] <amirouche> it is active just ask :)
[00:19:18] <amirouche> I do not know the answer.
[00:19:37] <amirouche> #' is for quoted syntax, but I do not know what it means in pratice
[00:19:48] <mfiano> 1) a list literal, 2) i forget, something with syntax objects, 3) a vector literal
[00:19:53] <amirouche> #(a b c) is vector but again not sure how it behaves.
[00:20:29] <jcowan> 2 is a syntax object whose content is the list (1 2 3)
[00:21:20] <mintsoup> I see, so #(a b c) is completely different from #'(a b c). How are syntax objects different from normal lists?
[00:22:08] <amirouche> it is a compile time object, it is not available at runtime.
[00:22:11] *** Quits: dieggsy (~dieggsy@2001:470:69fc:105::91f) (Quit: Reconnecting)
[00:22:23] <amirouche> #'(a b c) ^
[00:22:29] *** Joins: dieggsy (~dieggsy@2001:470:69fc:105::91f)
[00:22:55] <mintsoup> it's used for macros, right?
[00:22:55] <amirouche> it is necessarly inside a syntax-case macro IIRC..
[00:23:17] <mintsoup> wait
[00:23:28] *** Joins: Posterdati (~posterdat@host-95-250-213-187.retail.telecomitalia.it)
[00:23:32] *** Joins: _Posterdati_ (~posterdat@host-95-250-213-187.retail.telecomitalia.it)
[00:23:34] <amirouche> I am waiting :)
[00:23:45] <mintsoup> I think I read somewhere that macros also carry lexical scoping information, I think that's what syntax objects are for 
[00:23:48] <mintsoup> thank you
[00:23:57] *** Joins: karlosz (~karlosz@router.cloyne.org)
[00:24:27] <amirouche> I let some else answer better (but what you say is what I understand about syntax objects)
[00:26:48] *** Quits: Posterdati (~posterdat@host-95-250-213-187.retail.telecomitalia.it) (Client Quit)
[00:26:48] *** Quits: _Posterdati_ (~posterdat@host-95-250-213-187.retail.telecomitalia.it) (Client Quit)
[00:27:14] *** Joins: Posterdati (~posterdat@host-95-250-213-187.retail.telecomitalia.it)
[00:27:15] *** Joins: _Posterdati_ (~posterdat@host-95-250-213-187.retail.telecomitalia.it)
[00:28:07] *** Quits: Posterdati (~posterdat@host-95-250-213-187.retail.telecomitalia.it) (Client Quit)
[00:28:07] *** Quits: _Posterdati_ (~posterdat@host-95-250-213-187.retail.telecomitalia.it) (Read error: Connection reset by peer)
[00:28:08] *** Quits: selwyn (~selwyn@user/selwyn) (Remote host closed the connection)
[00:28:33] *** Joins: selwyn (~selwyn@user/selwyn)
[00:28:35] *** Joins: Posterdati (~posterdat@host-95-250-213-187.retail.telecomitalia.it)
[00:30:07] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Remote host closed the connection)
[00:31:03] <dpk> mintsoup: yes, exactly so. syntax objects contain lexical information about the place (and time) they were created so that they can be injected elsewhere by macros hygienically
[00:32:49] <mintsoup> dpk thanks
[00:34:14] *** Quits: silasfox (~sbv@2001-4dd5-1981-0-1d4e-a915-3158-66f5.ipv6dyn.netcologne.de) (Ping timeout: 245 seconds)
[00:34:32] *** Quits: rgherdt (~rgherdt@2a02:8109:86c0:d8d:b8d0:8128:692d:9688) (Ping timeout: 244 seconds)
[00:36:41] *** Joins: silasfox (~sbv@2001-4dd5-1981-0-1d4e-a915-3158-66f5.ipv6dyn.netcologne.de)
[00:38:27] *** Quits: nilof (~olofs@90-227-86-119-no542.tbcn.telia.com) (Ping timeout: 252 seconds)
[00:44:00] *** Joins: trocado (~trocado@188.83.243.251)
[00:45:00] *** Joins: nilof (~olofs@90-227-86-119-no542.tbcn.telia.com)
[00:52:43] *** Joins: lunarkitty (uid501895@user/pyra)
[00:57:09] *** Quits: zap (~zap@185.213.154.166) (Ping timeout: 252 seconds)
[00:59:02] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 258 seconds)
[01:07:26] *** Quits: silasfox (~sbv@2001-4dd5-1981-0-1d4e-a915-3158-66f5.ipv6dyn.netcologne.de) (Ping timeout: 268 seconds)
[01:24:20] *** Quits: TanoMarcelo (~TanoMarce@179.63.242.126) (Ping timeout: 258 seconds)
[01:24:46] *** Quits: kevingal (~quassel@2a02:8084:4140:f300:bd0a:a3e5:780f:162a) (Remote host closed the connection)
[01:26:44] *** Joins: TanoMarcelo (~TanoMarce@179.63.242.126)
[01:27:19] *** Quits: MrMobius (~MrMobius@208.58.206.154) (Read error: Connection reset by peer)
[01:33:12] *** Quits: karlosz (~karlosz@router.cloyne.org) (Quit: karlosz)
[01:33:30] *** Quits: josemanuel (~josemanue@user/josemanuel) (Quit: leaving)
[01:36:58] *** Joins: MrMobius (~MrMobius@208.58.206.154)
[01:39:59] *** Quits: xsperry (~as@user/xsperry) (Remote host closed the connection)
[01:47:59] *** Quits: krid- (~krid-@2607:fb90:4343:a83f:6531:1331:afae:d4c4) (Ping timeout: 245 seconds)
[01:49:16] *** Quits: wallymathieu (~wallymath@81-234-151-21-no94.tbcn.telia.com) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[01:49:44] *** Joins: wallymathieu (~wallymath@81-234-151-21-no94.tbcn.telia.com)
[01:50:57] *** jackhill_ is now known as KM4MBG
[01:51:03] *** KM4MBG is now known as jackhill[m]
[01:51:06] *** jackhill[m] is now known as jackhill
[01:51:56] *** Quits: shka (~herr@109.231.62.239) (Ping timeout: 258 seconds)
[01:54:14] *** Quits: wallymathieu (~wallymath@81-234-151-21-no94.tbcn.telia.com) (Ping timeout: 258 seconds)
[02:02:40] *** Joins: critbase (~critbase@138.88.198.71)
[02:05:38] *** Quits: critbase (~critbase@138.88.198.71) (Client Quit)
[02:10:14] *** Quits: mtm (~mtm@c-174-58-99-93.hsd1.fl.comcast.net) (Ping timeout: 272 seconds)
[02:10:54] *** Joins: karlosz (~karlosz@router.cloyne.org)
[02:15:31] *** Joins: giammi_ (~giammi@62-167-236-20.static.adslpremium.ch)
[02:16:54] *** Quits: Posterdati (~posterdat@host-95-250-213-187.retail.telecomitalia.it) (Ping timeout: 252 seconds)
[02:17:58] *** dTal is now known as Guest37
[02:18:09] *** Guest37 is now known as dTal
[02:27:35] *** Quits: aeth (~Michael@user/aeth) (Ping timeout: 258 seconds)
[02:27:35] *** Quits: ukari (~ukari@user/ukari) (Remote host closed the connection)
[02:27:54] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[02:27:58] *** Joins: ukari (~ukari@user/ukari)
[02:29:07] *** Quits: mintsoup (~user@185.225.28.115) (Ping timeout: 258 seconds)
[02:29:22] *** Joins: aeth (~Michael@user/aeth)
[02:30:49] *** Joins: Posterdati (~posterdat@host-95-250-213-187.retail.telecomitalia.it)
[02:38:52] *** Quits: giammi_ (~giammi@62-167-236-20.static.adslpremium.ch) (Ping timeout: 250 seconds)
[02:40:33] *** Joins: critbase (~critbase@138.88.198.71)
[02:52:51] *** Quits: Codaraxis (~Codaraxis@89.45.7.142) (Read error: Connection reset by peer)
[02:53:03] *** Joins: Codaraxis (~Codaraxis@89.45.7.142)
[02:53:13] *** Quits: hineios (~hineios@a95-93-142-124.cpe.netcabo.pt) (Quit: The Lounge - https://thelounge.chat)
[02:56:38] *** Joins: hineios (~hineios@a95-93-142-124.cpe.netcabo.pt)
[02:57:52] *** Joins: notzmv (~zmv@user/notzmv)
[02:59:56] *** Joins: anddam (~anddam@user/anddam)
[03:01:13] *** Joins: xsperry (~as@user/xsperry)
[03:10:30] *** Quits: mindCrime_ (~prhodes@cpe-98-27-55-10.nc.res.rr.com) (Ping timeout: 250 seconds)
[03:11:49] *** Joins: krid- (~krid-@2607:fb90:4343:a83f:f093:d59a:bf8a:762c)
[03:20:30] *** Joins: cchristiansen (~user@n122-106-221-66.sbr1.nsw.optusnet.com.au)
[03:28:47] *** Quits: MrMobius (~MrMobius@208.58.206.154) (Read error: Connection reset by peer)
[03:29:44] *** Joins: MrMobius (~MrMobius@208.58.206.154)
[03:30:09] *** Quits: ebrasca (~user@librepanther.com) (Remote host closed the connection)
[03:39:08] *** Quits: yitzi (~yitzi@173-27-106-188.client.mchsi.com) (Quit: Leaving)
[03:46:20] *** Joins: mindCrime_ (~prhodes@cpe-98-27-55-10.nc.res.rr.com)
[03:46:54] *** Quits: dhil (~dhil@195.213.192.47) (Ping timeout: 250 seconds)
[03:48:12] *** Quits: MrMobius (~MrMobius@208.58.206.154) (Ping timeout: 252 seconds)
[03:59:48] *** Quits: srhm (~ascii@user/srhm) (Quit: Konversation terminated!)
[04:00:07] *** Joins: MrMobius (~MrMobius@208.58.206.154)
[04:04:01] *** Quits: MrMobius (~MrMobius@208.58.206.154) (Read error: Connection reset by peer)
[04:04:40] *** Joins: MrMobius (~MrMobius@208.58.206.154)
[04:07:31] *** Quits: MrMobius (~MrMobius@208.58.206.154) (Read error: Connection reset by peer)
[04:07:36] *** Joins: mtm (~mtm@c-174-58-99-93.hsd1.fl.comcast.net)
[04:07:52] *** Joins: Lycurgus (~juan@cpe-45-46-140-49.buffalo.res.rr.com)
[04:08:04] *** Joins: MrMobius (~MrMobius@208.58.206.154)
[04:10:29] *** Joins: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[04:13:46] *** Quits: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 258 seconds)
[04:16:41] *** Quits: critbase (~critbase@138.88.198.71) (Remote host closed the connection)
[04:25:29] *** Quits: MrMobius (~MrMobius@208.58.206.154) (Read error: Connection reset by peer)
[04:30:18] *** Joins: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com)
[04:30:33] *** Quits: derelict (~winter@2603-6011-f901-9e5b-78b5-8b2f-cdb2-4171.res6.spectrum.com) (Quit: WeeChat 3.1)
[04:31:13] <mdhughes> Also there's '#(1 2 3) which is a literal vector. R6 and before need it quoted, R7 "cheats" and says #() is quoted, but doesn't equally say (1 2 3) is quoted.
[04:33:42] *** Quits: random-nick (~random-ni@87.116.165.220) (Ping timeout: 258 seconds)
[04:33:52] *** Quits: anticrisis (~anticrisi@user/anticrisis) (Read error: Connection reset by peer)
[04:34:12] <pjb> even #(1 2 3) is a literal vector.
[04:34:22] <pjb> (in CL).
[04:35:16] *** Quits: aap (~aap@yoshi.squoze.net) (Read error: Connection reset by peer)
[04:35:32] *** Joins: aap (~aap@yoshi.squoze.net)
[04:37:12] *** Joins: anticrisis (~anticrisi@user/anticrisis)
[04:38:03] <jcowan> R7 adopted the CL rules: every datum other than symbols and lists are self-evaluating.  In R6 they were all self-evaluating except vectors
[04:40:20] *** Quits: SAL9000 (~SAL9000@shirakumo/sal9000) (Ping timeout: 272 seconds)
[04:40:42] <jcowan> and the empty list:  () is treated as an ill-formed procedure/macro call
[04:41:02] <jcowan> s/list/list is not self-evaluating
[04:44:03] *** Joins: leo_song (~leo_song@1.156.61.81)
[04:46:22] *** Quits: krjli (~user@dsl-lprbng12-54f9b9-129.dhcp.inet.fi) (Read error: Connection reset by peer)
[04:46:32] *** Quits: trocado (~trocado@188.83.243.251) (Read error: Connection reset by peer)
[04:50:19] *** Joins: yewscion (~yewscion@c-24-131-220-23.hsd1.pa.comcast.net)
[04:59:35] *** Joins: zacts (~zak@user/zacts)
[04:59:41] *** Joins: derelict (~winter@2603-6011-f901-9e5b-78b5-8b2f-cdb2-4171.res6.spectrum.com)
[05:08:06] *** Joins: renzhi (~xp@2607:fa49:6500:bc00::e7b)
[05:10:29] *** Quits: zacts (~zak@user/zacts) (Ping timeout: 245 seconds)
[05:11:55] *** Quits: renzhi (~xp@2607:fa49:6500:bc00::e7b) (Client Quit)
[05:13:04] *** Joins: renzhi (~xp@2607:fa49:6500:bc00::e7b)
[05:14:02] *** Quits: arpunk (~arpunk@dynamic-186-31-185-38.dynamic.etb.net.co) (Remote host closed the connection)
[05:14:55] *** Joins: zacts (~zak@user/zacts)
[05:25:17] *** Joins: critbase (~critbase@138.88.198.71)
[05:26:51] <moon-child> according to https://ccrma.stanford.edu/software/snd/snd/s7.html (search for 'Schemes vary in their treatment of ()'), the spec is ambiguous on that count
[05:27:33] *** Quits: emacsomancer (~emacsoman@c-174-52-88-123.hsd1.ut.comcast.net) (Read error: Connection reset by peer)
[05:28:24] *** Joins: emacsomancer (~emacsoman@c-174-52-88-123.hsd1.ut.comcast.net)
[05:33:53] *** Quits: critbase (~critbase@138.88.198.71) (Ping timeout: 258 seconds)
[05:35:42] *** Joins: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[05:38:43] *** Quits: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 264 seconds)
[05:40:31] *** Quits: Lycurgus (~juan@cpe-45-46-140-49.buffalo.res.rr.com) (Ping timeout: 264 seconds)
[05:45:26] *** Quits: yewscion (~yewscion@c-24-131-220-23.hsd1.pa.comcast.net) (Remote host closed the connection)
[05:46:57] *** Joins: yewscion (~yewscion@2601:547:a01:2900::b46f)
[05:54:30] *** Quits: zacts (~zak@user/zacts) (Quit: bbl)
[05:54:50] *** Joins: dsk (~dsk@user/dsk)
[06:02:51] *** Joins: oxum (~oxum@106.201.113.95)
[06:06:28] *** Joins: nifl (~niflce@user/niflce)
[06:07:09] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 272 seconds)
[06:07:54] *** Quits: oxum (~oxum@106.201.113.95) (Ping timeout: 252 seconds)
[06:08:21] *** Joins: MrMobius (~MrMobius@208.58.206.154)
[06:08:48] *** Joins: waleee (~waleee@h-98-128-228-119.NA.cust.bahnhof.se)
[06:09:00] *** Quits: niflce (~niflce@user/niflce) (Ping timeout: 252 seconds)
[06:09:02] *** Joins: melonator (~melon@d75-159-225-7.abhsia.telus.net)
[06:15:03] *** Quits: waleee (~waleee@h-98-128-228-119.NA.cust.bahnhof.se) (Ping timeout: 252 seconds)
[06:16:10] *** Quits: lottaquestions (~nick@2607:fa49:5040:7500:8457:d454:836b:2a86) (Remote host closed the connection)
[06:16:36] *** Joins: lottaquestions (~nick@2607:fa49:5040:7500:ce1:2611:a255:72e2)
[06:30:42] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 250 seconds)
[06:32:22] *** Joins: frgo (~frgo@p200300deef27d7002d80b869b491859c.dip0.t-ipconnect.de)
[06:35:34] *** Joins: unyu (~pyon@user/pyon)
[06:36:24] *** Quits: frgo (~frgo@p200300deef27d7002d80b869b491859c.dip0.t-ipconnect.de) (Ping timeout: 244 seconds)
[06:45:54] *** Quits: krid- (~krid-@2607:fb90:4343:a83f:f093:d59a:bf8a:762c) (Ping timeout: 245 seconds)
[06:47:45] *** Joins: thmprover (~user@047-042-215-236.res.spectrum.com)
[06:54:36] *** Joins: prxq_ (~quassel@x4db5e2fb.dyn.telefonica.de)
[06:55:45] *** Quits: mindCrime_ (~prhodes@cpe-98-27-55-10.nc.res.rr.com) (Ping timeout: 252 seconds)
[06:57:59] *** Joins: oxum (~oxum@106.201.113.95)
[06:58:13] *** Quits: prxq (~quassel@x4db3db49.dyn.telefonica.de) (Ping timeout: 258 seconds)
[07:02:45] *** Quits: oxum (~oxum@106.201.113.95) (Ping timeout: 244 seconds)
[07:04:09] *** Quits: taiju (~taiju@240b:253:ec40:2400:c852:9b6:fdd4:de50) (Ping timeout: 272 seconds)
[07:07:25] *** Quits: nilof (~olofs@90-227-86-119-no542.tbcn.telia.com) (Ping timeout: 258 seconds)
[07:08:31] <mdhughes> rudybot: ()
[07:08:49] <mdhughes> OH. Sadly not here.
[07:09:30] <mdhughes> " probably originally (), which is an illegal empty application"
[07:10:01] <mdhughes> It's shockingly OK with #()
[07:10:58] * mdhughes is afk
[07:11:14] *** Joins: ad-absurdum (~ad-absurd@2600:100a:b102:33c0:955:441:17f0:df6f)
[07:11:49] *** Joins: taiju (~taiju@240b:253:ec40:2400:c852:9b6:fdd4:de50)
[07:17:12] *** Quits: peterhil (~peterhil@dsl-hkibng32-54f849-252.dhcp.inet.fi) (Ping timeout: 252 seconds)
[07:20:39] *** Quits: melonator (~melon@d75-159-225-7.abhsia.telus.net) (Quit: leaving)
[07:41:10] *** Joins: notzmv (~zmv@user/notzmv)
[07:44:41] *** Quits: Codaraxis (~Codaraxis@89.45.7.142) (Remote host closed the connection)
[07:44:59] *** Joins: Codaraxis (~Codaraxis@89.45.7.142)
[07:52:06] *** Quits: sp41 (~spal@70.241.120.35) (Remote host closed the connection)
[07:59:23] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[08:00:24] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 250 seconds)
[08:00:31] *** Joins: SAL9000 (~SAL9000@shirakumo/sal9000)
[08:00:37] *** Lord_of_Life_ is now known as Lord_of_Life
[08:06:19] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-221.dsl.bell.ca) (Remote host closed the connection)
[08:20:44] *** Quits: thmprover (~user@047-042-215-236.res.spectrum.com) (Quit: For He Was Great of Heart)
[08:21:31] *** Joins: oxum (~oxum@106.201.113.95)
[08:25:56] *** Quits: oxum (~oxum@106.201.113.95) (Ping timeout: 244 seconds)
[08:32:33] *** Quits: adip (~adip@did187.neoplus.adsl.tpnet.pl) (Ping timeout: 252 seconds)
[08:35:04] *** Quits: yewscion (~yewscion@2601:547:a01:2900::b46f) (Ping timeout: 245 seconds)
[08:37:00] *** Quits: radu242 (~radu242@pool-108-41-101-29.nycmny.fios.verizon.net) (Quit: The Lounge - https://thelounge.chat)
[08:39:47] *** Joins: radu242 (~radu242@pool-108-41-101-29.nycmny.fios.verizon.net)
[08:54:13] *** Joins: anticrisis_ (~anticrisi@user/anticrisis)
[08:54:13] *** Joins: niflce (~niflce@user/niflce)
[08:54:51] *** Joins: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[08:55:10] *** Joins: raeda_ (~raeda@72.49.219.33)
[08:55:54] *** Joins: radu2428 (~radu242@pool-108-41-101-29.nycmny.fios.verizon.net)
[08:56:17] *** Joins: aap_ (~aap@yoshi.squoze.net)
[08:56:50] *** Joins: ldb (~user@user/ldb)
[08:58:59] *** Joins: TanoMarc1 (~TanoMarce@179.63.242.126)
[08:59:07] *** Joins: nathan1 (~nathan@mars.nathan.pro)
[08:59:14] *** Joins: pok_ (~pok@castor.klingenberg.no)
[08:59:33] *** Joins: Nazral_ (~tyruiop@bb116-14-207-116.singnet.com.sg)
[09:00:22] *** Joins: SAL9000_ (~SAL9000@shirakumo/sal9000)
[09:00:41] *** Quits: derelict (~winter@2603-6011-f901-9e5b-78b5-8b2f-cdb2-4171.res6.spectrum.com) (Ping timeout: 272 seconds)
[09:01:22] <ldb> hello, any people have used Gerbil Scheme? https://cons.io
[09:02:40] *** Joins: TheCoffeMaker_ (~TheCoffeM@125-121-245-190.fibertel.com.ar)
[09:03:58] *** Quits: radu242 (~radu242@pool-108-41-101-29.nycmny.fios.verizon.net) (*.net *.split)
[09:03:58] *** Quits: SAL9000 (~SAL9000@shirakumo/sal9000) (*.net *.split)
[09:03:58] *** Quits: nifl (~niflce@user/niflce) (*.net *.split)
[09:03:58] *** Quits: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net) (*.net *.split)
[09:03:58] *** Quits: anticrisis (~anticrisi@user/anticrisis) (*.net *.split)
[09:03:58] *** Quits: aap (~aap@yoshi.squoze.net) (*.net *.split)
[09:03:58] *** Quits: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com) (*.net *.split)
[09:03:58] *** Quits: mtm (~mtm@c-174-58-99-93.hsd1.fl.comcast.net) (*.net *.split)
[09:03:58] *** Quits: xsperry (~as@user/xsperry) (*.net *.split)
[09:03:58] *** Quits: ukari (~ukari@user/ukari) (*.net *.split)
[09:03:58] *** Quits: karlosz (~karlosz@router.cloyne.org) (*.net *.split)
[09:03:58] *** Quits: TanoMarcelo (~TanoMarce@179.63.242.126) (*.net *.split)
[09:03:58] *** Quits: raeda (~raeda@72.49.219.33) (*.net *.split)
[09:03:58] *** Quits: opcode (~nathan@user/opcode) (*.net *.split)
[09:03:58] *** Quits: Nazral (~tyruiop@user/nazral) (*.net *.split)
[09:03:58] *** Quits: TheCoffeMaker (~TheCoffeM@user/thecoffemaker) (*.net *.split)
[09:03:58] *** Quits: pok (~pok@user/pok) (*.net *.split)
[09:03:59] *** radu2428 is now known as radu242
[09:04:02] *** pok_ is now known as pok
[09:04:02] *** Quits: pok (~pok@castor.klingenberg.no) (Changing host)
[09:04:02] *** Joins: pok (~pok@user/pok)
[09:07:52] <moon-child> ldb: no, though based on feature list it looks similar to s7 and picolisp
[09:08:19] *** Joins: tophullyte (~tophullyt@63.246.255.209)
[09:09:40] <moon-child> (picolisp for systems bits, s7 for metaprogramming and clos--latter implemented in userspace)
[09:10:18] <mfiano> Fare of ASDF fame migrated to Gerbil a few years ago
[09:10:49] *** Quits: jao (~mail@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net) (Read error: No route to host)
[09:11:15] *** Joins: ukari (~ukari@user/ukari)
[09:16:19] *** Quits: renzhi (~xp@2607:fa49:6500:bc00::e7b) (Ping timeout: 245 seconds)
[09:16:34] *** Joins: yewscion (~yewscion@2601:547:a01:2900::b46f)
[09:18:02] *** Joins: oxum (~oxum@106.201.113.95)
[09:19:09] *** Quits: ldb (~user@user/ldb) (Ping timeout: 244 seconds)
[09:20:05] *** Quits: sunarch (~x@user/sunarch) (Read error: Connection reset by peer)
[09:22:36] *** Quits: oxum (~oxum@106.201.113.95) (Ping timeout: 252 seconds)
[09:25:04] *** Quits: yewscion (~yewscion@2601:547:a01:2900::b46f) (Ping timeout: 245 seconds)
[09:27:12] *** Joins: Nilby (~Nilby@2601:603:1481:30a0:82fa:5bff:fe66:4b49)
[09:27:38] *** Joins: JoshYoshi (~user@154.57.3.101)
[09:27:42] *** Quits: JoshYoshi (~user@154.57.3.101) (Remote host closed the connection)
[09:27:47] *** Joins: ldb (~user@user/ldb)
[09:28:15] *** Quits: Josh_2 (~user@37.25.47.130) (Ping timeout: 244 seconds)
[09:30:45] <ldb> picked at picolisp: no macOS, really?
[09:31:55] <moon-child> eh, it has its own OS, who needs a host? :P
[09:36:20] *** Quits: threefjord (~brad@207.246.105.132) (Ping timeout: 264 seconds)
[09:40:07] *** Joins: derelict (~winter@2603-6011-f901-9e5b-78b5-8b2f-cdb2-4171.res6.spectrum.com)
[09:42:00] *** Quits: casual_friday (~casual_fr@216.71.110.168) (Ping timeout: 245 seconds)
[09:42:59] *** Joins: casual_friday (~casual_fr@216.71.110.168)
[09:53:45] *** Joins: ad_absurdum (~ad-absurd@2600:100a:b102:33c0:955:441:17f0:df6f)
[09:55:50] *** Quits: TanoMarc1 (~TanoMarce@179.63.242.126) (Quit: WeeChat 3.1)
[09:56:19] *** Quits: ad-absurdum (~ad-absurd@2600:100a:b102:33c0:955:441:17f0:df6f) (Ping timeout: 245 seconds)
[10:10:32] *** Joins: wallymathieu (~wallymath@81-234-151-21-no94.tbcn.telia.com)
[10:11:46] *** Joins: adabsurdum (~ad-absurd@2600:100a:b102:33c0:955:441:17f0:df6f)
[10:14:14] *** Quits: ad_absurdum (~ad-absurd@2600:100a:b102:33c0:955:441:17f0:df6f) (Ping timeout: 245 seconds)
[10:21:00] *** Joins: shka (~herr@109.231.62.239)
[10:26:35] *** Joins: PaigeParity (~paige@user/paigeparity)
[10:26:52] *** Joins: Codaraxis_ (~Codaraxis@89.45.7.142)
[10:27:06] *** Joins: MrMobius_ (~MrMobius@208.58.206.154)
[10:27:20] *** Quits: Codaraxis (~Codaraxis@89.45.7.142) (Read error: Connection reset by peer)
[10:27:34] *** Parts: PaigeParity (~paige@user/paigeparity) (WeeChat 3.1)
[10:28:21] *** Joins: thomasb06 (~thomasb06@leat141.unice.fr)
[10:30:15] *** Quits: MrMobius (~MrMobius@208.58.206.154) (Ping timeout: 252 seconds)
[10:33:55] *** Nazral_ is now known as Nazral
[10:34:03] *** Quits: Nazral (~tyruiop@bb116-14-207-116.singnet.com.sg) (Changing host)
[10:34:03] *** Joins: Nazral (~tyruiop@user/nazral)
[10:35:00] *** Quits: shka (~herr@109.231.62.239) (Quit: Konversation terminated!)
[10:38:26] *** Joins: shka (~herr@109.231.62.239)
[10:42:15] *** Joins: ad_absurdum (~ad-absurd@2600:100a:b102:33c0:955:441:17f0:df6f)
[10:44:39] *** Quits: adabsurdum (~ad-absurd@2600:100a:b102:33c0:955:441:17f0:df6f) (Ping timeout: 245 seconds)
[10:46:51] *** Quits: ad_absurdum (~ad-absurd@2600:100a:b102:33c0:955:441:17f0:df6f) (Client Quit)
[10:57:27] *** Joins: oxum (~oxum@106.201.113.95)
[10:58:26] *** Joins: Lycurgus (~juan@cpe-45-46-140-49.buffalo.res.rr.com)
[11:00:16] *** Quits: MrMobius_ (~MrMobius@208.58.206.154) (Read error: Connection reset by peer)
[11:01:58] *** Quits: oxum (~oxum@106.201.113.95) (Ping timeout: 244 seconds)
[11:03:31] *** Quits: Lycurgus (~juan@cpe-45-46-140-49.buffalo.res.rr.com) (Quit: Exeunt)
[11:04:36] *** Joins: mtm (~mtm@c-174-58-99-93.hsd1.fl.comcast.net)
[11:06:25] *** aap_ is now known as aap
[11:07:50] <wasamasa> ldb: there's some gerbil users on #scheme
[11:09:12] *** Quits: derelict (~winter@2603-6011-f901-9e5b-78b5-8b2f-cdb2-4171.res6.spectrum.com) (Ping timeout: 244 seconds)
[11:09:44] *** Joins: Duuqnd_ (~Duuqnd_@185.201.174.79)
[11:09:44] *** Duuqnd_ is now known as Duuqnd
[11:17:31] *** Joins: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[11:19:50] *** Joins: zap (~zap@79.175.1.154)
[11:20:36] *** Quits: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 250 seconds)
[11:21:57] *** Quits: imode (~imode@user/imode) (Ping timeout: 252 seconds)
[11:28:02] *** Joins: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[11:31:18] *** Quits: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 252 seconds)
[11:44:42] *** Quits: tophullyte (~tophullyt@63.246.255.209) (Quit: Leaving)
[11:46:13] *** Joins: even4void (even4void@2607:5300:203:3f52::12)
[11:48:55] *** Quits: ldb (~user@user/ldb) (Ping timeout: 264 seconds)
[11:53:12] *** Joins: ldb (~user@user/ldb)
[11:58:24] *** Quits: taiju (~taiju@240b:253:ec40:2400:c852:9b6:fdd4:de50) (Ping timeout: 245 seconds)
[12:02:46] *** Joins: taiju (~taiju@240b:253:ec40:2400:c852:9b6:fdd4:de50)
[12:02:53] *** Joins: adip (~adip@did187.neoplus.adsl.tpnet.pl)
[12:06:52] *** Joins: sunarch (~x@user/sunarch)
[12:18:45] *** SAL9000_ is now known as SAL9000
[12:19:27] *** Quits: ukari (~ukari@user/ukari) (Remote host closed the connection)
[12:21:04] *** Joins: frgo (~frgo@p200300deef27d7002d80b869b491859c.dip0.t-ipconnect.de)
[12:25:02] *** Joins: ukari (~ukari@user/ukari)
[12:27:25] *** Joins: peterhil (~peterhil@dsl-hkibng32-54f849-252.dhcp.inet.fi)
[12:27:25] *** Joins: selwyn (~selwyn@user/selwyn)
[12:32:19] *** Joins: simon-AS559 (~simon-AS5@2001:620:0:100e::12e)
[12:34:31] *** Joins: simon-AS5591 (~simon-AS5@130.59.4.14)
[12:36:44] *** Quits: simon-AS559 (~simon-AS5@2001:620:0:100e::12e) (Ping timeout: 245 seconds)
[12:37:42] *** Joins: hendursa1 (~weechat@user/hendursaga)
[12:40:04] <lukego> I know we're not supposed to talk about Design Patterns in Lisp, but today I'm seeing CLOS code resembling Smalltalk code written in "visitor" style.
[12:40:58] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 252 seconds)
[12:42:12] *** Quits: GIANTWORLDKEEPER (~pjetcetal@2.95.204.25) (Quit: EXIT)
[12:49:06] <lukego> for example, in defining where all the individual pads are on an integrated circuit's package, one approach is to make a list of e.g. (:GROUND (:RECT 10 10 50 50)) geometries, while the object-oriented approach is to take a "target" object parameter and invoke a method on it for each pad, like (rect-pad target :GROUND 10 10 50 50), and to reuse that control-flow dispatching for any different objects needed.
[12:50:07] *** Quits: hendursa1 (~weechat@user/hendursaga) (Remote host closed the connection)
[12:50:12] *** Joins: hendursaga (~weechat@user/hendursaga)
[12:50:38] *** Quits: anticrisis_ (~anticrisi@user/anticrisis) (Read error: Connection reset by peer)
[12:51:38] *** Joins: BosonCollider (~olofs@90-227-86-119-no542.tbcn.telia.com)
[12:51:51] <lukego> This also seems like a basic difference between drawing in CLIM, which is very much based on this object-oriented style, verses drawing in e.g. Racket's graphics library, which is more based on combinators for first-class geoemtry objects.
[12:54:43] <Nilby> lukego: I think the reaction to design patterns is mostly a clojure recation java, which is quite understandable, but of course design patterns occur in everything from enterprise infrastructure to assembly and logic gates, it's just that if your brush is only design patterns, you might paint a limited picture.
[12:55:07] <Nilby> I think both the CLIM style and the racket style are useful at different levels.
[13:00:29] <lukego> I don't quite have my head around the trade-offs. I think I've always written code in the data-oriented style rather than the OO style.
[13:00:39] *** Joins: GIANTWORLDKEEPER (~pjetcetal@2.95.204.25)
[13:03:24] <Nilby> One can also express complex geometry as remarkably succinct pixel/polygon expressions, but it makes it harder do certain things, like make all rectangles rounded.
[13:03:38] *** Joins: xsperry (~as@user/xsperry)
[13:05:10] *** Quits: niflce (~niflce@user/niflce) (Quit: WeeChat 3.1)
[13:05:18] *** Quits: dieggsy (~dieggsy@2001:470:69fc:105::91f) (Read error: Connection reset by peer)
[13:05:20] *** Quits: loke[m] (~loke@2001:470:69fc:105::237) (Write error: Connection reset by peer)
[13:05:20] *** Quits: artemon (~artemon@2001:470:69fc:105::87c) (Read error: Connection reset by peer)
[13:05:20] *** Quits: HDurer[m] (~hdurer@2001:470:69fc:105::cc4) (Read error: Connection reset by peer)
[13:05:20] *** Quits: siraben (~siraben@user/siraben) (Read error: Connection reset by peer)
[13:05:20] *** Quits: jjf[m] (~jjfmatrix@2001:470:69fc:105::678) (Read error: Connection reset by peer)
[13:05:20] *** Quits: infra_red[m] (~infraredm@2001:470:69fc:105::849) (Read error: Connection reset by peer)
[13:05:20] *** Quits: Irvise (~irvisemat@2001:470:69fc:105::84c) (Read error: Connection reset by peer)
[13:05:21] *** Joins: niflce (~niflce@user/niflce)
[13:06:41] *** Joins: artemon (~artemon@2001:470:69fc:105::87c)
[13:06:41] *** Joins: loke[m] (~loke@2001:470:69fc:105::237)
[13:06:41] *** Joins: Irvise (~irvisemat@2001:470:69fc:105::84c)
[13:06:41] *** Joins: HDurer[m] (~hdurer@2001:470:69fc:105::cc4)
[13:06:41] *** Joins: infra_red[m] (~infraredm@2001:470:69fc:105::849)
[13:06:48] *** Joins: dieggsy (~dieggsy@2001:470:69fc:105::91f)
[13:06:52] *** Joins: jjf[m] (~jjfmatrix@2001:470:69fc:105::678)
[13:08:10] *** Quits: cchristiansen (~user@n122-106-221-66.sbr1.nsw.optusnet.com.au) (Remote host closed the connection)
[13:18:31] *** Joins: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[13:21:28] *** Quits: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 244 seconds)
[13:24:34] *** Joins: krjli (~user@dsl-lprbng12-54f9b9-129.dhcp.inet.fi)
[13:26:42] *** Joins: dhil (~dhil@195.213.192.47)
[13:28:35] *** Joins: cchristiansen (~user@n122-106-221-66.sbr1.nsw.optusnet.com.au)
[13:31:17] *** Quits: ldb (~user@user/ldb) (Ping timeout: 244 seconds)
[13:33:25] <Inline> bottom up and top down choicing ?
[13:33:25] *** Joins: siraben (~siraben@user/siraben)
[13:34:54] <Inline> and another class of choicing exists which is neither bottom up nor top down
[13:35:07] <Inline> truly alternative
[13:37:09] *** Joins: ldb (~user@user/ldb)
[13:39:22] *** Joins: TanoMarcelo (~TanoMarce@179.63.242.126)
[13:41:53] *** Quits: ldb (~user@user/ldb) (Ping timeout: 272 seconds)
[13:45:12] *** Joins: ldb (~user@user/ldb)
[13:50:25] *** Joins: silasfox (~sbv@2001-4dd5-1981-0-1d4e-a915-3158-66f5.ipv6dyn.netcologne.de)
[13:50:51] *** Quits: ldb (~user@user/ldb) (Quit: ERC (IRC client for Emacs 27.2))
[13:57:03] *** Quits: zap (~zap@79.175.1.154) (Ping timeout: 252 seconds)
[14:02:59] *** Quits: teiresias (~chris@blvuug/founder/teiresias) (Ping timeout: 245 seconds)
[14:05:53] *** Joins: teiresias (~chris@blvuug/founder/teiresias)
[14:08:08] *** Quits: silasfox (~sbv@2001-4dd5-1981-0-1d4e-a915-3158-66f5.ipv6dyn.netcologne.de) (Ping timeout: 268 seconds)
[14:09:29] *** Joins: zap (~zap@79.175.1.154)
[14:09:47] *** Joins: silasfox (~sbv@2001-4dd6-b649-0-3776-c633-9f4d-bfc9.ipv6dyn.netcologne.de)
[14:09:48] *** Quits: silasfox (~sbv@2001-4dd6-b649-0-3776-c633-9f4d-bfc9.ipv6dyn.netcologne.de) (Client Quit)
[14:14:39] *** Quits: zap (~zap@79.175.1.154) (Ping timeout: 252 seconds)
[14:14:57] *** Joins: zap (~zap@185.213.154.168)
[14:16:52] *** Joins: ebrasca (~user@librepanther.com)
[14:17:37] *** Joins: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[14:19:54] *** Quits: TanoMarcelo (~TanoMarce@179.63.242.126) (Quit: WeeChat 3.1)
[14:21:06] *** Quits: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 272 seconds)
[14:21:13] *** Parts: trokotech (~user@237.red-81-40-102.staticip.rima-tde.net) (ERC (IRC client for Emacs 28.0.50))
[14:23:06] *** Joins: trokotech (~user@237.red-81-40-102.staticip.rima-tde.net)
[14:24:20] *** Joins: cranium (~cranium@user/cranium)
[14:25:30] *** Joins: ceblan (~user@237.red-81-40-102.staticip.rima-tde.net)
[14:25:51] *** Joins: simon-AS559 (~simon-AS5@2001:620:0:45:ae:7e61:a1e9:e948)
[14:26:01] *** Quits: simon-AS559 (~simon-AS5@2001:620:0:45:ae:7e61:a1e9:e948) (Client Quit)
[14:28:57] *** Quits: simon-AS5591 (~simon-AS5@130.59.4.14) (Ping timeout: 252 seconds)
[14:34:27] *** Joins: karlosz (~karlosz@router.cloyne.org)
[14:37:02] *** Joins: abraham (~abraham@173.239.198.148)
[14:37:26] *** Joins: TanoMarcelo (~TanoMarce@179.63.242.126)
[14:40:56] *** Joins: random-nick (~random-ni@87.116.179.85)
[14:46:29] *** Quits: cchristiansen (~user@n122-106-221-66.sbr1.nsw.optusnet.com.au) (Ping timeout: 272 seconds)
[14:46:38] *** Quits: deltab_ (~deltab@95.154.230.49) (Ping timeout: 252 seconds)
[14:46:56] *** Quits: abraham (~abraham@173.239.198.148) (Quit: Textual IRC Client: www.textualapp.com)
[14:55:38] *** Joins: deltab (~deltab@95.154.230.49)
[15:03:21] *** Joins: poldy (~dbane@78.18.29.18)
[15:11:12] *** Quits: ebrasca (~user@librepanther.com) (Remote host closed the connection)
[15:16:07] *** Quits: frgo (~frgo@p200300deef27d7002d80b869b491859c.dip0.t-ipconnect.de) (Remote host closed the connection)
[15:16:34] *** Joins: frgo (~frgo@p200300deef27d7002d80b869b491859c.dip0.t-ipconnect.de)
[15:17:20] *** Joins: kevingal (~quassel@2a02:8084:4140:f300:ed7f:3670:2cf7:6ab9)
[15:28:56] <lukego> I don't quite have my head around the CLIM approach either which seems a bit more powerful. for example in (with-output-to-output-record ...) it allows you to capture the result of some drawing operations into a data structure, and inspect that e.g. to see what it drew or how big is its bounding box, then "replay" that in a different context e.g. translated/scaled/rotated once you decide where you want to put it.
[15:29:00] *** Quits: varjag (~user@188.95.247.249) (Quit: ERC (IRC client for Emacs 26.3))
[15:35:12] *** Joins: hendursa1 (~weechat@user/hendursaga)
[15:35:19] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 252 seconds)
[15:38:54] <splittist> With CLIM it's indirection all the way down... I don't really understand the CLIM is-a vs has-a relationships, either.
[15:51:14] <lukego> Just at the moment my ever-shifting mood is quite positive on this aspect of CLIM i.e. seeming to be able to move between verb-oriented and noun-oriented manipulation at will e.g. to "prerender" a drawing into an output record before deciding where to position it
[15:52:55] <lukego> So far it's feeling pretty okay to use CLIM objects to represent CAD-type geometry. they are convenient enough to construct, to manipulate, and to scavenge information out of.
[15:54:48] <jackdaniel> common lisp instant messaging?
[15:55:19] *** Joins: Guest63 (~Guest63@bba454352.alshamil.net.ae)
[15:55:37] <Guest63> Hi
[15:56:24] <jackdaniel> hey
[15:56:26] <Guest63> Archaic question here - I am trying to use infix.cl, which parses something like  #I( sqrt('a^^2 + 'b^^2) ) to a lisp form
[15:56:49] <Guest63> Do you know how I can extract the resulting form from a reader macro without evaluating it?
[15:57:34] <jackdaniel> Guest63: how about (read-from-string "#I( â€¦ )")
[15:57:36] <jackdaniel> ?
[15:58:15] <jackdaniel> alternatively (read '(#I(â€¦))) I suppose
[15:59:34] <_death> a simple quote will do, no?
[15:59:55] <jackdaniel> you are right
[16:00:15] <Guest63> jackdaniel: Thanks! Read-string works, just testing out a bit more
[16:00:23] <Guest63> (read '...) didn't work
[16:00:33] *** niflce is now known as Guest532
[16:00:33] *** Quits: Guest532 (~niflce@user/niflce) (Killed (sodium.libera.chat (Nickname regained by services)))
[16:00:47] <Guest63> _death: thanks! quote works
[16:00:57] *** Joins: Guest532 (~niflce@user/niflce)
[16:00:57] <jackdaniel> you forgot parens I presume, but what _death said
[16:01:19] <Guest63> what's interesting is in  (car '#I( sqrt(a^^2 + b^^2) ))
[16:01:23] <jackdaniel> nvm, read takes the stream as first argument. I need to finish my coffee
[16:02:20] <Guest63> I read online there is only one nameable for reader macro? sounds like an oversight
[16:02:42] *** Quits: poldy (~dbane@78.18.29.18) (Ping timeout: 250 seconds)
[16:02:45] <Guest63> > what's interesting is in  (car '#I( sqrt(a^^2 + b^^2) )) >> please ignore this
[16:03:04] <jackdaniel> Guest63: that's not true, you may have any number of readtables
[16:03:13] <jackdaniel> there is a library that makes them manageable like packages
[16:03:17] <jackdaniel> it is called named-readtables
[16:03:27] <Guest63> jackdaniel: ah okay. that's an extension to ANSI?
[16:03:39] <jackdaniel> no, it is a normal library
[16:04:09] <Guest63> oh cool
[16:07:20] <Guest63> by the way, is there anything Lisp can't do?
[16:07:58] <_death> it can't do what other turing equivalent languages can't do
[16:08:10] <amirouche> ^^
[16:09:55] <pjb> lukego: design patterns exist formally in lisp as macros!
[16:10:21] <pjb> lukego: http://groups.google.com/group/comp.lang.lisp/msg/ee09f8475bc7b2a0 http://groups.google.com/group/comp.programming/msg/9e7b8aaec1794126
[16:10:21] <wasamasa> that's the most useless answer though
[16:10:31] *** Joins: yoonkn (~user@175.197.208.79)
[16:11:21] <wasamasa> Guest63: do you mean CL?
[16:13:09] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-221.dsl.bell.ca)
[16:13:21] *** Quits: Irvise (~irvisemat@2001:470:69fc:105::84c) (Quit: Reconnecting)
[16:13:23] <lukego> pjb: yeah. I guess I'm just starting to wonder if that's mostly a superficial aspect of design patterns, i.e. a nice formulation of the "how" but less significant than the what/why/when. in the sense that I'm looking at Lisp code and trying to understand it and my brain is going "oh hey that's the Visitor pattern that you read about in the GoF book about 25 years ago"
[16:13:27] <Guest63> wasamasa: yes
[16:13:32] <wasamasa> CL is not good at playing along with others
[16:13:39] *** Joins: Irvise (~irvisemat@2001:470:69fc:105::84c)
[16:13:49] <Guest63> _death: fair :)
[16:13:54] <wasamasa> it's not good as a systems programming language
[16:13:55] <_death> lukego: but in CLOS we don't need to implement visitors
[16:14:26] <lukego> _death: right. you don't need to implement them, but that doesn't mean they aren't there, nor that recognising them isn't useful
[16:14:29] <wasamasa> because it's the opposite of small and comprehensible or pay for what you use
[16:14:35] <pjb> lukego: one thing that OO is conducive to, is to reify operations.  But it's really the same as with combinators, and even writing code in assembler (think QuickDraw). What I mean here is that the results of receiving messages, the application of operators, or the call of subroutines can, instead of performing the operation, build or record a data structure representing the operations.
[16:15:00] <pjb> lukego: which, in the case of graphics is nice, since this data structure is a "picture".
[16:15:08] <_death> lukego: but they aren't there?
[16:15:12] <pjb> lukego: that can then further be manipulated. 
[16:15:27] <wasamasa> for example you may discover that you cannot generate acceptably small binaries with it
[16:15:50] <wasamasa> even the smallest implementation you choose is still generating bigger stuff than anything else you ran into so far
[16:15:54] <Guest63> wasamasa: so you can't implement C within Lisp?
[16:16:07] <wasamasa> you can, but it has none of C's qualities
[16:17:07] <jackdaniel> wasamasa: fasls are usually fairly small and the core could be compared to a standard library
[16:17:23] <wasamasa> the answer to the problem is to use a tree shaker which is a commercial option
[16:17:28] <jackdaniel> (not to mention, that i.e ECL has whole runtime and compiler fitting in 16MB)
[16:17:29] <wasamasa> so pay to play nicely with the rest
[16:17:50] <pjb> lukego: Well, design patterns are only coarser briks.  You can work with fundamentals, or you can work with "higher-level" components.  It's always the same work. And if what you build from fundamentals ressembles a component, even if you don't have a name for it, it doesn't mean that your code is not well structured.
[16:19:04] <wasamasa> another problem is that the community behind it cannot compete with that of more popular languages
[16:19:14] *** Joins: yewscion (~yewscion@2601:547:a01:2900::7467)
[16:19:21] <wasamasa> so if you expect something like go's painless cross compilation, nope
[16:19:44] <wasamasa> but this is less of a CL problem and something affecting all lisp dialects and implementations
[16:19:55] <pjb> lukego: always remember that objects are just closures. The only difference, is that usually in OO, we build big closures piecemeal, with little chunks of code spread all over the files (a class definition here, methods there, etc), while closures are usually built in a single place, with a single lexical scope.
[16:19:56] <wasamasa> where it's not unusual to write your own libraries
[16:20:16] *** Quits: thomasb06 (~thomasb06@leat141.unice.fr) (Remote host closed the connection)
[16:22:02] <wasamasa> lol: https://github.com/Shinmera/cl-graphql
[16:22:05] <wasamasa> > DON'T LOOK, AAAAAAAAAAAAAAAAAAAAAAAAAAAA
[16:22:06] <Guest63> wasmase: understood
[16:22:27] <wasamasa> I wanted to name graphql as an example of being on your own
[16:23:08] *** Quits: Natch (~natch@c-e070e255.014-297-73746f25.bbcust.telenor.se) (Ping timeout: 264 seconds)
[16:23:20] <pjb> lukego: The notion of design pattern comes from architecture, where the idea is to build houses and towns using *a* *small* *set* *of* *building* *patterns*, instead of using the whole palettes.
[16:23:29] *** Joins: yitzi (~yitzi@172.98.105.250)
[16:24:01] <pjb> lukego: in a way, it's antagonistic to what we do in lisp, were we have freedom and use it, to mix and match different programming styles, different DSLs, different libraries, etc.
[16:24:33] <_death> Guest63: Lisp has a long history with many problems solved, though not all are nicely packaged and and ready for use today.. so I would take whatever someone says about its "limitations" with a grain of salt
[16:24:40] <pjb> lukego: A forgotten part is the restricted set of design pattern.  Nowadays, there are so many design patterns, it doesn't help much.  
[16:24:40] <amirouche> still they are patterns in lisp... 
[16:24:49] <pjb> amirouche: yes, they're called macros.
[16:24:55] <pjb> amirouche: read my links.
[16:24:59] *** Joins: Natch (~natch@c-e070e255.014-297-73746f25.bbcust.telenor.se)
[16:25:37] *** Joins: nifl (~nifl@user/niflce)
[16:26:03] <wasamasa> Guest63: what I'd strongly recommend you to do is think hard about your problem domain and implement a small example version using all of its traits in a few languages
[16:26:18] <wasamasa> Guest63: that will show you whether any of them are particularly suitable/unsuitable for the task
[16:26:53] <wasamasa> here's an example of such a playground answering the question whether something is suitable to implement a lisp in: https://depp.brause.cc/mal-candidates/
[16:27:05] <Nilby> Hmmm. I guess I'll have to throw out all my systems programs in CL now that I know they must be bad.
[16:27:05] <pjb> lukego: Also, a lot of "design patterns" are idiotic.  They are just ways to circumvents the defects of the programming language at hand.  For example, the "visitor pattern": "is a way of separating an algorithm from an object structure on which it operates".  DUH MEGA DUH!  In lisp you have functions and data structure, they are already separated! Even with CLOS, the methods are attached to the generic functions, not to the class!
[16:27:05] <pjb> Idiots!
[16:27:58] <wasamasa> http://mishadoff.com/blog/clojure-design-patterns/ drives that point home
[16:28:30] <wasamasa> functions everywhere
[16:29:24] <pjb> lukego: which doesn't prevent us to have functions such as mapcar, map or maphash, and to provide our own such data structure walking operations on our custom data structures, often along with an iterating macros such as dolist (loor for x = the hash-key in ht), etc.
[16:29:58] *** Quits: yewscion (~yewscion@2601:547:a01:2900::7467) (Ping timeout: 268 seconds)
[16:30:03] *** Joins: renzhi (~xp@2607:fa49:6500:bc00::e7b)
[16:34:01] <pjb> With design patterns, you have wood boards; you want to build a ship, so you build a ship with wood boards.   With lisp, since you have fundamentals and you can combine as you want, you want to build a ship, then you design it, and perhaps you make a mould and you die cast it in aluminium or in plastic in one piece, or you use composite materials, or whatever comes handy to do the job.  You ship can have different features and
[16:34:01] <pjb> performance requirements, and you adapt the build depending on that.
[16:34:29] <pjb> If you restrict yourself to design patterns, then you will have NICE ships, all made of wood.  But all with the limitations of wood ships.
[16:35:14] <pjb> note: this can go from the raft to the arch, so you can still do good.  But perhaps with wood you'll be limited to water ships, while with CL, you can build a spaceship in ironâ€¦
[16:35:53] <Guest63> _death: from a commercial perspective, I understand its limitations in terms of lack of packages / documentation. However as I'm interested in symbolic manipulation and my own research, I'm fine with this
[16:36:00] <pjb> That said, like early typed programming language corsets, I'd say that design patterns are an important learning device for newbie programmers.
[16:36:38] <pjb> But eventually, they should grow, learn lisp, the fundamentals, and read sicp and geb.
[16:37:05] <Guest63> wasamasa: yes, I wouldn't use Lisp for certain other problems I may have (e.g. I do web dev outside of Lisp, iOS dev in Swift, etc.), but I'm fortunate that I don't need to rely on too many packages for my current sphere so Lisp is working ok
[16:38:25] <Guest63> pjb: sicp seems like so much of an investment. I'm learning a lot by trial by error (for example, I now realise the importance of exporting functions to not overwhelm myself when reading some old code and recalling which were the important functions // using CLOS to abstract away complexities), which I don't think I'd get purely from a textbook
[16:38:59] <_death> Guest63: any programming language is raw material, so you can't expect to have all the missing bits for your programs.. if we had them, we would no longer be programmers but a kind of bricklayers (something that many who have a very narrow view of the software world believe already happened)
[16:39:46] <Guest63> _death: looks like programming is becoming very much bricklaying with all the micro management by product managers etc.
[16:40:29] <wasamasa> yes, it is
[16:40:36] <wasamasa> scheme programming is my refuge from that
[16:42:19] <_death> most software has not yet been written
[16:44:26] <amirouche> The Software World.
[16:44:31] <amirouche> +1 _death 
[16:44:44] <ChoHag> Why are formals called that?
[16:44:44] <amirouche> +1 Brick Layering and Scheme is my refuge
[16:45:05] <Guest63> _death: true, but to pay the bills, it helps considerably to just plug and play with popular packages. I think with the time I invested in Common Lisp, I would have become an expert in Python or TypeScript or some other trending language and get a better job. Would be good to get a programming job in Lisp one day - hope there is a renewed interest
[16:45:05] *** Quits: TanoMarcelo (~TanoMarce@179.63.242.126) (Quit: WeeChat 3.1)
[16:45:06] <Guest63> in the industry
[16:45:18] <prxq_> sometimes it really is just plugging stuff together.
[16:46:24] <prxq_> Guest63: if you are good in CL you will get Python in a breeze. I have no experience with TypeScript but from what I've seen it's also pretty easy to grasp conceptwise.
[16:47:04] <ChoHag> If you're just plugging stuff together it's only a bit of syntax anyway.
[16:47:30] <jackdaniel> as Eric Raymond says in the essay "How to become a Hacker" learning Lisp widens your understanding of programming. After learning it I agree with that statement.
[16:47:39] <Guest63> prxq_: the problem with going CL first is that I want to avoid all other languages :D
[16:48:16] *** Joins: MrMobius (~MrMobius@208.58.206.154)
[16:48:33] <prxq_> Guest63: money is a pretty good motivator for all kinds of things :)
[16:48:56] <Guest63> prxq_: that is true :)
[16:48:57] <_death> Guest63: well, I'm not one for giving job advice :)
[16:49:52] <Guest63> _death: :)  I was just ranting :)
[16:49:56] <jackdaniel> if you want to find a good job then learn salesforce and forget about fancy stuff like lisp
[16:50:23] <amirouche> re ESR, it is not only about the language but also the community
[16:50:23] <jackdaniel> (or in general, programming)
[16:51:11] <amirouche> There is also a lot of inverse-of-buzz with lisp, like you do not need hundred HTTP parser to create a webapp.
[16:51:13] <Guest63> jackdaniel: yeah the money is in marketing, office politics and real "business". as a programmer we are subject to the whims of the hiring manager / company
[16:51:35] <amirouche> So even if there is not a readily useable HTTP or only one, you can put things together.
[16:51:50] <jackdaniel> there is certainly money in programming; but if your only criteria is finding a good paying job then go for it
[16:52:31] <jackdaniel> because creating a software product or working on one is both stressing and non-trivial (disregarding the language)
[16:53:20] <Guest63> jackdaniel: yeah producing a "final" product is a much different affair than a prototype
[16:53:28] <pjb> ChoHag: do you mean the formal arguments?
[16:53:41] <flatwhatson> you can play a fun game of sneaking lispy ideas into non-lisp projects
[16:54:05] <pjb> ChoHag: in lisp we call them parameters, to distinguish them from effective arguments that are just called arguments.
[16:54:08] <ChoHag> Are there informal arguments?
[16:54:16] <pjb> ChoHag: effective arguments.
[16:54:45] <Nilby> no amount of money can get back years working on useless software that's thrown away, but a few hours of work on great timeless software might last beyond one's lifetime
[16:54:46] <pjb> ChoHag: parameters = formal arguments are the variables that receive the value of the effective argument (or simply argument) expressions.
[16:55:14] <pjb> (defun foo (a b) ...)  A and B are parameters = "formal arguments".
[16:55:42] <ChoHag> Sounds like someone had a good day with a thesaurus...
[16:56:08] <pjb> (let ((x 1)) (foo x (* 3 x))  X and (* 3 X) are the arguments (= "effective arguments") of the call to FOO.    Their values will be bound to A and B in FOO.
[16:56:20] <_death> Nilby: a big reason why I'm using Lisp is that I can trust that my stuff will continue running in 20 years
[16:56:38] <ChoHag> I'm wondering because I keep throwing around the phrase "the formals" in my documentation with a growing sense that I'm misusing it.
[16:56:45] <Nilby> _death: Exactly, and even be useful to future lispers
[16:57:17] <pjb> ChoHag: in early computing, there was no internet, mail was slow, and telephone was VERY expensive.  So there were island communities around computers, who developped different cultures and vocabularies with different languages.
[16:57:18] *** Quits: Duuqnd (~Duuqnd_@185.201.174.79) (Ping timeout: 250 seconds)
[16:57:37] <_death> Nilby: right, so I can also use stuff from 40 years ago
[16:57:41] <ChoHag> Yeah my memory hasn't started going yet thanks :P
[16:58:11] <pjb> ChoHag: if you work with lisp, just use arguments and parameters to distinguish them.
[16:59:20] <pjb> argument n. 1. (of a function) an object which is offered as data to the function when it is called.
[16:59:20] <pjb> parameter n. 1. (of a function) a variable in the definition of a function which takes on the value of a corresponding argument (or of a list of corresponding arguments) to that function when it is called, or which in some cases is given a default value because there is no corresponding argument. 
[16:59:38] <pjb> ChoHag: http://www.lispworks.com/documentation/HyperSpec/Body/26_a.htm
[17:27:42] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-221.dsl.bell.ca) (Ping timeout: 252 seconds)
[17:34:02] *** Joins: mikeliuk (~mikeliuk@213.205.198.26)
[17:38:43] <Guest63> offtopic
[17:39:09] <Guest63> what's the best irc client for Mac? I tried erc on emacs for a while and want a more point and click interface
[17:39:24] <Guest63> kiwirc keeps dropping out
[17:39:46] <dpk> there are no really good ones
[17:39:56] <dpk> Colloquy, LimeChat, and Textual are all sort of okay-ish
[17:41:47] <Guest63> thanks, trying out now
[17:43:04] *** Joins: Guest64 (~guest64@bba454352.alshamil.net.ae)
[17:43:26] *** Quits: Guest64 (~guest64@bba454352.alshamil.net.ae) (Client Quit)
[17:45:25] <wasamasa> I'd try the latter two
[17:45:32] <wasamasa> no libpurple
[17:47:48] <wasamasa> I remember using macirssi
[17:51:04] *** Quits: hendursa1 (~weechat@user/hendursaga) (Quit: hendursa1)
[17:56:00] *** Quits: prxq_ (~quassel@x4db5e2fb.dyn.telefonica.de) (Quit: http://quassel-irc.org - Chat comfortably. Anywhere.)
[17:57:58] *** Quits: Guest63 (~Guest63@bba454352.alshamil.net.ae) (Ping timeout: 250 seconds)
[17:59:14] *** Quits: mtreis (~mtreis@ip68-9-89-162.ri.ri.cox.net) (Ping timeout: 245 seconds)
[17:59:38] *** Joins: Guest63 (~Guest63@bba454352.alshamil.net.ae)
[18:00:12] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[18:10:01] *** Joins: hendursaga (~weechat@user/hendursaga)
[18:12:34] *** Joins: sp41 (~spal@70.241.120.35)
[18:21:36] *** Quits: Guest63 (~Guest63@bba454352.alshamil.net.ae) (Quit: Ping timeout (120 seconds))
[18:27:32] *** Joins: mtreis (~mtreis@024-181-180-008.res.spectrum.com)
[18:27:46] <pjb> I wonder what there is to click on in ircâ€¦
[18:28:48] *** Joins: srhm (~ascii@user/srhm)
[18:29:26] <jackdaniel> joing, quit, nick details etc
[18:30:59] <wasamasa> back then I wasn't aware I could just build irssi via brew
[18:32:09] *** Quits: mtreis (~mtreis@024-181-180-008.res.spectrum.com) (Ping timeout: 272 seconds)
[18:33:41] *** Joins: acolarh_ (~niels@3e6be663.rev.stofanet.dk)
[18:33:55] *** Joins: jm (~jm@pool-72-70-34-7.bstnma.fios.verizon.net)
[18:33:56] *** Joins: samebchase6 (~samebchas@51.15.68.182)
[18:35:33] *** Joins: hjudt_ (~hjudt@62-178-177-178.cable.dynamic.surfer.at)
[18:35:35] *** Joins: sp41_ (~spal@70.241.120.35)
[18:35:54] *** Joins: Woodi_ (~Woodi@n8236h162.sprintdatacenter.net)
[18:36:03] *** Joins: dtman34_ (~dtman34@c-73-62-246-247.hsd1.mn.comcast.net)
[18:37:01] *** Joins: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[18:37:50] *** Joins: utis_ (~utis@cm-84.214.179.98.getinternet.no)
[18:39:04] *** Joins: gladiolu1 (~egoist@107.191.99.49)
[18:40:18] *** Quits: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 252 seconds)
[18:40:34] *** Quits: sp41 (~spal@70.241.120.35) (*.net *.split)
[18:40:34] *** Quits: yoonkn (~user@175.197.208.79) (*.net *.split)
[18:40:34] *** Quits: jeosol (~jeosol@76-238-186-228.lightspeed.hstntx.sbcglobal.net) (*.net *.split)
[18:40:34] *** Quits: hjudt (~hjudt@62-178-177-178.cable.dynamic.surfer.at) (*.net *.split)
[18:40:34] *** Quits: jmorrison_ (~jm@pool-72-70-34-7.bstnma.fios.verizon.net) (*.net *.split)
[18:40:34] *** Quits: Woodi (~Woodi@n8236h162.sprintdatacenter.net) (*.net *.split)
[18:40:34] *** Quits: MetaYan_ (~MetaYan@c-7b5d235c.07-84-7462671.bbcust.telenor.se) (*.net *.split)
[18:40:34] *** Quits: Oshawott (~archenoth@S0106889e6827f474.cg.shawcable.net) (*.net *.split)
[18:40:34] *** Quits: utis (~utis@cm-84.214.179.98.getinternet.no) (*.net *.split)
[18:40:34] *** Quits: acolarh (~niels@3e6be663.rev.stofanet.dk) (*.net *.split)
[18:40:34] *** Quits: samebchase (~samebchas@51.15.68.182) (*.net *.split)
[18:40:34] *** Quits: gladiolus (~egoist@user/egoist) (*.net *.split)
[18:40:35] *** Quits: dtman34 (~dtman34@c-73-62-246-247.hsd1.mn.comcast.net) (*.net *.split)
[18:40:35] *** Quits: spacebat1 (spacebat@spot.ubermonkey.net) (*.net *.split)
[18:40:35] *** Quits: lucerne (~thelounge@ip202.ip-51-178-215.eu) (*.net *.split)
[18:41:53] *** Joins: Oshawott (~archenoth@S0106889e6827f474.cg.shawcable.net)
[18:43:09] *** Quits: Inline (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431) (Ping timeout: 244 seconds)
[18:46:53] *** Joins: MetaYan (~MetaYan@c-7b5d235c.07-84-7462671.bbcust.telenor.se)
[18:46:54] *** Quits: Codaraxis_ (~Codaraxis@89.45.7.142) (Remote host closed the connection)
[18:47:42] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 264 seconds)
[18:49:15] *** Joins: waleee (~waleee@h-98-128-228-119.NA.cust.bahnhof.se)
[18:49:25] *** Joins: spacebat1 (spacebat@spot.ubermonkey.net)
[18:50:25] *** Quits: gwefnn (~gwefnn@user/gwefnn) (Quit: ZNC 1.8.1 - https://znc.in)
[18:51:02] *** Joins: derelict (~winter@2603-6011-f901-9e5b-78b5-8b2f-cdb2-4171.res6.spectrum.com)
[18:51:39] *** Joins: gwefnn (~gwefnn@user/gwefnn)
[18:54:02] *** Joins: jao (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net)
[18:54:52] *** Joins: Inline (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431)
[18:55:08] *** Quits: yitzi (~yitzi@172.98.105.250) (Remote host closed the connection)
[19:01:26] *** Joins: prxq (~quassel@x4db5e2fb.dyn.telefonica.de)
[19:01:56] <aeth> I mean, I wouldn't be surprised if mIRC is probably still unironically the best graphical IRC client besides the probable exploits (while being closed source) and the horrible scripting language and the need to run it through wine on Unix (which you can do), etc., etc.
[19:02:27] <aeth> Mainly because I think > 95% of IRC users these days use it through (1) emacs (but only really in the Lisp community), (2) a terminal in tmux/screen, or (3) a web interface
[19:09:46] *** Joins: sunarch_ (~x@catv-80-98-113-21.catv.broadband.hu)
[19:09:46] *** Quits: sunarch_ (~x@catv-80-98-113-21.catv.broadband.hu) (Changing host)
[19:09:46] *** Joins: sunarch_ (~x@user/sunarch)
[19:12:56] <SAL9000> or (4) a web interface to a bouncer (matrix, irccloud, etc.)
[19:13:10] <SAL9000> as opposed to an ephemeral web interface which is only connected when they are.
[19:13:18] *** Quits: sunarch (~x@user/sunarch) (Ping timeout: 252 seconds)
[19:14:22] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-221.dsl.bell.ca)
[19:14:54] *** Quits: srhm (~ascii@user/srhm) (Quit: Konversation terminated!)
[19:15:35] *** Joins: srhm (~ascii@user/srhm)
[19:25:05] *** Quits: cranium (~cranium@user/cranium) (Quit: Leaving)
[19:29:32] *** Joins: Lycurgus (~juan@cpe-45-46-140-49.buffalo.res.rr.com)
[19:31:08] *** Quits: aap (~aap@yoshi.squoze.net) (Ping timeout: 250 seconds)
[19:32:12] *** Joins: aeth_ (~Michael@user/aeth)
[19:32:24] *** Joins: simon-AS559 (~simon-AS5@2001:620:0:45:4882:7bec:7c0e:1f72)
[19:33:18] *** Quits: aeth (~Michael@user/aeth) (Killed (NickServ (GHOST command used by aeth_)))
[19:33:23] *** aeth_ is now known as aeth
[19:35:49] *** Joins: aap (~aap@yoshi.squoze.net)
[19:43:56] *** Joins: selwyn_ (~selwyn@user/selwyn)
[19:44:13] *** Quits: raeda_ (~raeda@72.49.219.33) (Remote host closed the connection)
[19:44:17] *** Quits: Colleen (~fermion@supersolid.equilibrium.tymoon.eu) (Read error: Connection reset by peer)
[19:44:17] *** Joins: raeda__ (~raeda@72.49.219.33)
[19:44:24] *** Joins: Colleen (~fermion@supersolid.equilibrium.tymoon.eu)
[19:45:17] *** Joins: nilof (~olofs@90-227-86-119-no542.tbcn.telia.com)
[19:45:18] *** Joins: Guest63 (~Guest63@bba454352.alshamil.net.ae)
[19:45:25] *** Joins: niflce (~nifl@user/niflce)
[19:45:35] *** Joins: aeth_ (~Michael@user/aeth)
[19:46:09] *** Quits: aeth (~Michael@user/aeth) (Killed (NickServ (GHOST command used by aeth_)))
[19:46:14] *** aeth_ is now known as aeth
[19:46:22] *** Joins: slyrus__ (~slyrus@135.180.166.51)
[19:47:02] *** Joins: mtm- (~mtm@c-174-58-99-93.hsd1.fl.comcast.net)
[19:47:05] *** Joins: radu2422 (~radu242@pool-108-41-101-29.nycmny.fios.verizon.net)
[19:47:39] *** Joins: sobel_ (~matt@66.219.34.76)
[19:47:40] *** Quits: Lycurgus (~juan@cpe-45-46-140-49.buffalo.res.rr.com) (Quit: Exeunt)
[19:47:48] *** Joins: leo_song_ (~leo_song@1.156.61.81)
[19:47:50] *** Joins: gwefnn_ (~gwefnn@user/gwefnn)
[19:48:25] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-221.dsl.bell.ca) (Remote host closed the connection)
[19:48:47] *** Joins: trokotec` (~user@237.red-81-40-102.staticip.rima-tde.net)
[19:48:56] *** Joins: krjli` (~user@dsl-lprbng12-54f9b9-129.dhcp.inet.fi)
[19:49:26] <Guest63> If I have a list, (1 2 3 (4 5 (6 7)) and want to extract the nested lists (e.g. (4 5 (6 7)) and (6 7))
[19:49:55] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[19:50:08] *** Joins: sunarch (~x@catv-80-98-113-21.catv.broadband.hu)
[19:50:08] *** Quits: sunarch (~x@catv-80-98-113-21.catv.broadband.hu) (Changing host)
[19:50:08] *** Joins: sunarch (~x@user/sunarch)
[19:50:10] *** Joins: jackhill_ (~jackhill@kalessin.dragonsnail.net)
[19:50:28] *** Joins: srji_ (~srji@static.43.141.203.116.clients.your-server.de)
[19:50:29] *** Joins: n3t1 (n3t@s45.mydevil.net)
[19:50:30] <Guest63> Is it best for me to traverse element by element, e.g. (nth 4 **) and test for length > 1?
[19:50:45] <Guest63> and then recursively go into each nested list to get. its nested lists?
[19:50:51] <Guest63> or is there a more canonical way
[19:51:22] *** Quits: mtm (~mtm@c-174-58-99-93.hsd1.fl.comcast.net) (Killed (NickServ (GHOST command used by mtm-)))
[19:51:44] *** mtm- is now known as mtm
[19:51:58] *** Joins: pieguy128_ (~pieguy128@bas1-montreal02-65-92-163-194.dsl.bell.ca)
[19:52:08] *** Joins: imode (~imode@user/imode)
[19:52:14] <wasamasa> more like, test whether it's a cons or not
[19:52:18] <wasamasa> if it's a cons, go down
[19:52:36] <Guest63> gotcha - thanks
[19:52:53] <wasamasa> that will catch ()/nil though
[19:54:13] <Guest63> what do you mean? 
[19:54:20] <Guest63> (consp nil) returns nil
[19:54:24] <wasamasa> oh
[19:54:24] <Guest63> do you mean (nil)?
[19:54:29] <wasamasa> I was thinking of listp
[19:54:38] <wasamasa> then it's fine
[19:54:53] <Guest63> thanks!
[19:55:00] *** Quits: srhm (~ascii@user/srhm) (*.net *.split)
[19:55:02] *** Quits: sunarch_ (~x@user/sunarch) (*.net *.split)
[19:55:03] *** Quits: gwefnn (~gwefnn@user/gwefnn) (*.net *.split)
[19:55:05] *** Quits: MetaYan (~MetaYan@c-7b5d235c.07-84-7462671.bbcust.telenor.se) (*.net *.split)
[19:55:09] *** Quits: Natch (~natch@c-e070e255.014-297-73746f25.bbcust.telenor.se) (*.net *.split)
[19:55:10] *** Quits: nifl (~nifl@user/niflce) (*.net *.split)
[19:55:12] *** Quits: random-nick (~random-ni@87.116.179.85) (*.net *.split)
[19:55:12] *** Quits: karlosz (~karlosz@router.cloyne.org) (*.net *.split)
[19:55:12] *** Quits: trokotech (~user@237.red-81-40-102.staticip.rima-tde.net) (*.net *.split)
[19:55:13] *** Quits: dhil (~dhil@195.213.192.47) (*.net *.split)
[19:55:13] *** Quits: krjli (~user@dsl-lprbng12-54f9b9-129.dhcp.inet.fi) (*.net *.split)
[19:55:14] *** Quits: BosonCollider (~olofs@90-227-86-119-no542.tbcn.telia.com) (*.net *.split)
[19:55:14] *** Quits: selwyn (~selwyn@user/selwyn) (*.net *.split)
[19:55:14] *** Quits: peterhil (~peterhil@dsl-hkibng32-54f849-252.dhcp.inet.fi) (*.net *.split)
[19:55:20] *** Quits: radu242 (~radu242@pool-108-41-101-29.nycmny.fios.verizon.net) (*.net *.split)
[19:55:22] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (*.net *.split)
[19:55:24] *** Quits: leo_song (~leo_song@1.156.61.81) (*.net *.split)
[19:55:25] *** Quits: anddam (~anddam@user/anddam) (*.net *.split)
[19:55:26] *** Quits: pieguy128 (~pieguy128@bas1-montreal02-65-92-163-194.dsl.bell.ca) (*.net *.split)
[19:55:26] *** Quits: swflint_ (~swflint@45.32.153.16) (*.net *.split)
[19:55:26] *** Quits: n3t (n3t@s45.mydevil.net) (*.net *.split)
[19:55:27] *** Quits: mfiano (~mfiano@li1282-157.members.linode.com) (*.net *.split)
[19:55:27] *** Quits: sobel (~matt@66.219.34.76) (*.net *.split)
[19:55:27] *** Quits: jackhill (~jackhill@kalessin.dragonsnail.net) (*.net *.split)
[19:55:29] *** Quits: srji (~srji@static.43.141.203.116.clients.your-server.de) (*.net *.split)
[19:55:33] *** Quits: pranavats (3fba1d1b34@jabberfr.org) (*.net *.split)
[19:55:33] *** Quits: slyrus_ (~slyrus@135.180.166.51) (*.net *.split)
[19:55:33] *** radu2422 is now known as radu242
[19:55:33] *** Lord_of_Life_ is now known as Lord_of_Life
[19:55:33] *** Joins: swflint (~swflint@45.32.153.16)
[19:55:54] *** Quits: taiju (~taiju@240b:253:ec40:2400:c852:9b6:fdd4:de50) (Ping timeout: 245 seconds)
[19:55:56] <Nilby> Guest63: Using nth in iteration is slow becuase it has to go from the start. Better to use some other iteration method, like (loop for item in list ..) or dolist, or cdr walking.
[19:57:22] *** Joins: taiju (~taiju@M014013236064.v4.enabler.ne.jp)
[19:57:44] *** Joins: Natch (~natch@c-e070e255.014-297-73746f25.bbcust.telenor.se)
[19:57:46] <Guest63> Nilby: Yes, I guess I should do loop for - I need to know the index position also, so hopefully it will still be fast if I do (loop for item in list for index in (- (length list) 1)?
[19:57:48] *** Joins: peterhil (~peterhil@dsl-hkibng32-54f849-252.dhcp.inet.fi)
[19:58:06] *** Joins: poldy (~dbane@78.19.111.79)
[19:58:26] <Guest63> thanks for the tip - I have to do this piece of code 1,000 to 10,000 minimum, so it will add up!
[19:58:37] <Guest63> times minimum*
[19:58:40] <_death> for index upfrom 0
[19:59:00] <Guest63> _death: thanks, yes typo on my end
[20:00:41] *** Quits: krjli` (~user@dsl-lprbng12-54f9b9-129.dhcp.inet.fi) (Read error: Connection reset by peer)
[20:01:07] *** Joins: random-nick (~random-ni@87.116.165.220)
[20:01:39] *** Joins: mfiano (~mfiano@li1282-157.members.linode.com)
[20:02:24] *** Joins: MetaYan (~MetaYan@c-7b5d235c.07-84-7462671.bbcust.telenor.se)
[20:02:30] *** Joins: anddam (~anddam@user/anddam)
[20:02:34] *** Joins: dhil (~dhil@195.213.192.47)
[20:03:00] *** Quits: waleee (~waleee@h-98-128-228-119.NA.cust.bahnhof.se) (Quit: WeeChat 3.1)
[20:03:10] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-221.dsl.bell.ca)
[20:08:27] *** Quits: wallymathieu (~wallymath@81-234-151-21-no94.tbcn.telia.com) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[20:16:20] *** Quits: Guest63 (~Guest63@bba454352.alshamil.net.ae) (Quit: Connection closed)
[20:24:48] *** Joins: lucerne (~lucerne@ip202.ip-51-178-215.eu)
[20:26:00] *** sobel_ is now known as sobel
[20:26:28] *** Joins: Josh_2 (~user@37.25.47.130)
[20:28:21] *** Joins: pranavats (3fba1d1b34@jabberfr.org)
[20:28:52] <pjb> Guest63: (defun collect-sublists (list) (let ((sublists '())) (labels ((walk (list) (dolist (element list) (when (consp element)  (push  element sublists) (walk element))))) (walk list)) (nreverse sublists))) (collect-sublists '(a b (c d (e f)))) #| --> ((c d (e f)) (e f)) |# 
[20:43:34] *** samebchase6 is now known as samebchase
[20:52:15] *** Joins: aeth_ (~Michael@user/aeth)
[20:53:03] *** Quits: aeth (~Michael@user/aeth) (Killed (NickServ (GHOST command used by aeth_)))
[20:53:08] *** aeth_ is now known as aeth
[20:54:13] *** Joins: analognoise (~analognoi@91.196.220.21)
[21:01:44] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-221.dsl.bell.ca) (Ping timeout: 252 seconds)
[21:01:54] *** pan is now known as jaimelm
[21:03:40] *** Joins: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com)
[21:09:21] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Ping timeout: 252 seconds)
[21:10:09] *** Joins: mtreis (~mtreis@024-181-180-008.res.spectrum.com)
[21:10:20] *** Joins: amb007 (~a_bakic@207.106.204.77.rev.sfr.net)
[21:11:41] *** Joins: taurinus (~taurinus@user/taurinus)
[21:13:39] *** Joins: yitzi (~yitzi@173-27-106-188.client.mchsi.com)
[21:17:44] *** Quits: simon-AS559 (~simon-AS5@2001:620:0:45:4882:7bec:7c0e:1f72) (Quit: Leaving.)
[21:18:00] *** Joins: simon-AS559 (~simon-AS5@2001:620:0:45:4882:7bec:7c0e:1f72)
[21:18:35] *** Quits: simon-AS559 (~simon-AS5@2001:620:0:45:4882:7bec:7c0e:1f72) (Client Quit)
[21:20:25] *** Quits: mtreis (~mtreis@024-181-180-008.res.spectrum.com) (Ping timeout: 244 seconds)
[21:21:46] *** Joins: mtreis (~mtreis@024-181-180-008.res.spectrum.com)
[21:25:03] *** Quits: Guest532 (~niflce@user/niflce) (Read error: Connection reset by peer)
[21:26:41] *** Joins: wallymathieu (~wallymath@81-234-151-21-no94.tbcn.telia.com)
[21:27:18] *** Quits: mtreis (~mtreis@024-181-180-008.res.spectrum.com) (Ping timeout: 264 seconds)
[21:28:54] *** Joins: ozzymcduff (~mathieu@81-234-151-21-no94.tbcn.telia.com)
[21:29:40] *** Quits: renzhi (~xp@2607:fa49:6500:bc00::e7b) (Ping timeout: 268 seconds)
[21:31:12] <em> I recall reading somewhere that in lisp data and the program are the same thing is that true?
[21:34:21] <jackdaniel> em: in common lisp (and in numerous other lisps) the program text is represented as a list
[21:34:29] <jackdaniel> you may manipulate that least by means of macros
[21:34:38] <jackdaniel> s/that least/these lists/
[21:34:54] <jackdaniel> and by other means too. so in this sense you may treat a "program" like data
[21:35:35] <jackdaniel> many parts of lisp image may be introspectable and return first class objects that are data (i.e a function may be such an object), but not necessarily possible to modify these objects directly
[21:36:28] <jackdaniel> incremental compilation allows you to modify a running program (so it behaves like a mutable data in this regard)
[21:36:53] <jackdaniel> em: does this answer your question? or you have some specific notion of data and program?
[21:41:34] *** Joins: simon-AS559 (~simon-AS5@2a02:168:ffe7:0:5523:8873:d256:dce0)
[21:43:38] <jackdaniel> f/whois em 
[21:43:41] <jackdaniel> ops
[21:46:12] *** Joins: aeth_ (~Michael@user/aeth)
[21:46:15] <wasamasa> lol
[21:46:19] *** Quits: aeth (~Michael@user/aeth) (Ping timeout: 268 seconds)
[21:46:23] <wasamasa> code is plain old data
[21:46:33] <wasamasa> it's not represented using some funny AST class or whatever
[21:47:00] <wasamasa> a function call for example is a list
[21:47:13] <jackdaniel> wasamasa: that is only a surface syntax
[21:47:32] <wasamasa> sure, deconstruct your whole argument, lol
[21:47:44] <jackdaniel> no, I was very careful with words I've used
[21:48:56] <jackdaniel> usually textual representation is first read into "plain old data", that is cons cells, then it is macroexpanded, then it is converted to "funny ast class or whatever", then to internal representation and finally some kind of binary artifact is produced (i.e assembly or a bytecode)
[21:49:03] *** Quits: jao (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net) (Read error: Connection reset by peer)
[21:49:25] <wasamasa> now you've lost them
[21:49:28] <jackdaniel> that last part may be often introspected but rarely modified
[21:49:43] *** aeth_ is now known as aeth
[21:49:57] <wasamasa> meanwhile the rest of the world doesn't even understand what a s-expression is: https://rdoc.info/gems/ast/AST/Sexp
[21:50:38] <wasamasa> I mean, come on, if you're smart enough to use ragel for lexing ruby, certainly you can figure out what a s-expression is
[21:52:20] *** Joins: mtreis (~mtreis@024-181-180-008.res.spectrum.com)
[21:52:31] <johnjay> you may have overestimated the human capacity for intelligence
[21:52:37] <johnjay> aka MPAI.
[21:52:39] <jackdaniel> em: traditionally there were a few interpreters that walked a list and evaluated it, but usually lisps are compiled
[21:52:53] <wasamasa> I expect a ping timeout any moment
[21:53:08] *** Joins: jao (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net)
[21:53:15] <jackdaniel> (even when the expression is typed in the repl there is a high chance that the minimal compilation is going on)
[21:54:46] <jackdaniel> some people may get things wrong, but assuming that they will get it wrong so we should fed them with factually incorrect information is getting above oneself imo
[21:58:56] *** Quits: amb007 (~a_bakic@207.106.204.77.rev.sfr.net) (Read error: Connection reset by peer)
[21:59:07] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[22:02:24] *** Quits: analognoise (~analognoi@91.196.220.21) (Quit: Leaving)
[22:04:07] *** Joins: analognoise (~analognoi@91.196.220.21)
[22:18:23] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Ping timeout: 268 seconds)
[22:18:46] *** Joins: amb007 (~a_bakic@255.106.204.77.rev.sfr.net)
[22:22:25] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 244 seconds)
[22:24:18] *** Quits: niflce (~nifl@user/niflce) (Quit: Leaving)
[22:26:33] *** Quits: kevingal (~quassel@2a02:8084:4140:f300:ed7f:3670:2cf7:6ab9) (Remote host closed the connection)
[22:30:10] *** Quits: mtreis (~mtreis@024-181-180-008.res.spectrum.com) (Ping timeout: 244 seconds)
[22:35:04] *** Quits: poldy (~dbane@78.19.111.79) (Remote host closed the connection)
[22:37:44] *** Joins: aeth_ (~Michael@user/aeth)
[22:38:32] *** Quits: amb007 (~a_bakic@255.106.204.77.rev.sfr.net) (Ping timeout: 252 seconds)
[22:39:11] *** Quits: aeth (~Michael@user/aeth) (Killed (NickServ (GHOST command used by aeth_)))
[22:39:16] *** aeth_ is now known as aeth
[22:39:34] *** Joins: amb007 (~a_bakic@179.199.204.77.rev.sfr.net)
[22:41:49] *** Quits: amb007 (~a_bakic@179.199.204.77.rev.sfr.net) (Read error: Connection reset by peer)
[22:42:21] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[22:46:10] *** Joins: cactinoob (~cactinoob@adsl-64-237-237-9.prtc.net)
[22:47:09] *** Quits: dsk (~dsk@user/dsk) (Ping timeout: 245 seconds)
[22:48:54] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Ping timeout: 252 seconds)
[22:49:15] *** Joins: HDurer[mx] (~HDurermx]@p200300f6e70c5100a288b4fffec20aac.dip0.t-ipconnect.de)
[22:49:40] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[22:53:56] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Ping timeout: 244 seconds)
[22:54:11] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[22:55:58] <pjb> Interpreting direct sexps would be hard.  I would even assume more than just minimal compilation, that involves only macroexpansion.
[22:57:23] <pjb> hard or very slow.
[22:57:40] *** Quits: HDurer[mx] (~HDurermx]@p200300f6e70c5100a288b4fffec20aac.dip0.t-ipconnect.de) (Quit: Client closed)
[22:58:40] *** Joins: niflce (~niflce@user/niflce)
[23:04:09] *** Joins: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[23:04:25] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[23:07:27] *** Quits: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 272 seconds)
[23:09:42] *** Joins: TanoMarcelo (~TanoMarce@179.63.242.126)
[23:19:27] *** Quits: mikeliuk (~mikeliuk@213.205.198.26) (Quit: Connection closed)
[23:20:11] *** Parts: cactinoob (~cactinoob@adsl-64-237-237-9.prtc.net) ()
[23:21:38] *** Joins: krjli (~user@dsl-lprbng12-54f9b9-129.dhcp.inet.fi)
[23:27:22] *** Joins: mtreis (~mtreis@ip68-9-89-162.ri.ri.cox.net)
[23:30:20] *** n3t1 is now known as n3t
[23:36:57] *** Quits: TanoMarcelo (~TanoMarce@179.63.242.126) (Quit: WeeChat 3.1)
[23:40:29] *** Quits: Nilby (~Nilby@2601:603:1481:30a0:82fa:5bff:fe66:4b49) (Ping timeout: 245 seconds)
[23:40:33] *** Joins: jeosol (~jeosol@76-238-186-228.lightspeed.hstntx.sbcglobal.net)
[23:41:01] *** Joins: anticrisis (~anticrisi@user/anticrisis)
[23:50:11] *** Joins: TanoMarcelo (~TanoMarce@179.63.242.126)
[23:55:32] *** Joins: jimpjorps (~jimpjorps@ool-18bbd91e.static.optonline.net)
