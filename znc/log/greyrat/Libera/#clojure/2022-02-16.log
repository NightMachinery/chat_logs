[00:09:15] *** Quits: shiranaihito (~textual@123-192-192-149.dynamic.kbronet.com.tw) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[00:11:38] *** Quits: uncleyear (~ian@pppoe.178-66-157-18.dynamic.avangarddsl.ru) (Remote host closed the connection)
[00:15:02] *** Joins: uncleyear (~ian@pppoe.178-66-157-18.dynamic.avangarddsl.ru)
[00:23:20] <seebs> hey, so, technomancy, i would appreciate an explanation of your war crimes here: (-> [a 1 x 99] (let (+ a x)))
[00:23:48] <Para> seebs: macroexpand-1 repeatedly :)
[00:23:49] <seebs> oh wait i think i get it
[00:24:04] <seebs> is the [] in let optional?
[00:24:19] <seebs> what does "macroexpand-1" mean?
[00:24:38] <Para> https://clojuredocs.org/clojure.core/macroexpand-1
[00:24:42] <ridcully_> `->` is a macro
[00:24:43] <Para> It's like macroexpand but does only one step.
[00:24:52] <seebs> ohh
[00:24:52] <ridcully_> check out what it does
[00:24:53] <seebs> okay so
[00:24:58] <seebs> => (clojure.core/let [user/a 1 user/x 99] (clojure.core/+ user/a user/x))
[00:25:02] *** Joins: Null_A (~null_a@2601:645:8700:2290:a4fb:481a:7fa9:b909)
[00:25:10] <technomancy> man we really need that bot to come back
[00:25:16] <seebs> i don't understand what happened to the inner "let"
[00:25:40] <Para> well, like ridcully_ said, check out what the -> macro does :)
[00:25:55] <technomancy> the let form was the argument to the -> macro, which spliced in the vector into its first argument
[00:26:04] <ridcully_> the `->` macro only transforms the syntax here.  this usually leads to readable code.  but in the end it is just a macro.  it can do silly things
[00:26:43] <seebs> ohhhhhh.
[00:26:46] <ridcully_> e.g. like giving names to function literals: (-> lol #(+ 1 %))
[00:27:19] <seebs> aaa
[00:27:23] <Para> Speaking of silly things, has anyone found use for `as->`?
[00:27:29] <seebs> that's beautiful and i hate it
[00:27:37] <technomancy> seebs: now you understand
[00:27:42] <technomancy> it's like a koan
[00:28:09] <technomancy> everyone's always like "oh, the arrow macros, they're so great; I love to use them all the time" but they don't understand they have a dark side
[00:28:26] <seebs> there is no dark side of the -> macro really, as a matter of fact it's all dark
[00:29:02] <technomancy> the one thing I really think it shines in is clj-time
[00:29:09] <technomancy> (-> 1 t/hours t/ago) is p nice
[00:30:07] <technomancy> well, ok, that one is not so nice because of english plural rules
[00:30:14] <technomancy> (-> 2 t/hours t/ago) on the other hand ...
[00:30:31] <Para> quick, add an-hour function
[00:31:46] <seebs> so (-> form1 form2 form3) is translating form2 and form3 by inserting form1 after their names. and in the case where you use it with a reader macro in one of those places... i assume reader macros have to happen before regular macros?
[00:32:03] <aphyr> I use -> for math all the time. Feels more like what I'd do with a calculator or pen/paper.
[00:32:19] <seebs> user=> (macroexpand-1 `(-> lol #(+ 1 %)))
[00:32:19] <seebs> (fn* user/lol [p1__221__222__auto__] (clojure.core/+ 1 p1__221__222__auto__))
[00:32:31] <technomancy> seebs: the first thing you have to understand is that (-> form1 form2 form3) is actually (-> form1 (form2) (form3))
[00:32:45] <Para> Threading macros are probably the most commonly used of all Clojure's macros. I have no facts to prove this but it at least feels like it.
[00:32:48] <technomancy> the optional parens are kind of bullshit since they obscure what's really going on but we're stuck with them
[00:32:48] <seebs> so it parenthesizes them if they're not already parenthesized?
[00:33:09] <seebs> so, if i understood what #( did, it would make that behavior make more sense, probably
[00:33:27] <technomancy> yeah for some reason it was considered a good idea for parentheses to be optional even for lispers ¯\_(ツ)_/¯
[00:33:44] <ridcully_> hour⟨s⟩
[00:33:57] *** Quits: uncleyear (~ian@pppoe.178-66-157-18.dynamic.avangarddsl.ru) (Ping timeout: 250 seconds)
[00:34:49] <seebs> i'm gonna bounce off this a few times before i really understand it
[00:35:12] <technomancy> you gotta get comfortable with viewing macroexpansions to understand what's really going on
[00:35:43] <seebs> oh hey
[00:35:47] <seebs> i can just (source ->)
[00:35:56] <seebs> oh right i had a question about source
[00:36:02] <ridcully_> not having to use parens saves some typing when you drill down data: (-> (request) :body :result :id)
[00:36:05] <goodger> technomancy: I'm sorry, my client somehow failed to log it, how did you describe x86_64 assembly code the other day?
[00:36:22] <seebs> (source source) said [...] (source-fn '~n) [...]
[00:36:35] <technomancy> goodger: hm that might not have been me
[00:36:58] <seebs> so actually that name is clojure.repl/source-fn, so if i do (source clojure.repl/source-fn), it works
[00:37:20] <technomancy> source has to be a macro or it won't work on macro arguments
[00:37:25] <seebs> but if i try to call (clojure.repl/source-fn ...) on things, it...
[00:37:26] <seebs> ahh
[00:37:52] <seebs> ah-hah! so (clojure.repl/source-fn 'clojure.repl/source-fn) works
[00:38:09] *** Quits: Null_A (~null_a@2601:645:8700:2290:a4fb:481a:7fa9:b909) (Remote host closed the connection)
[00:38:16] <seebs> and the ' there is corresponding to the ' in '~n
[00:38:28] <seebs> thank you that makes sense now
[00:38:57] *** Joins: Null_A (~null_a@2601:645:8700:2290:a4fb:481a:7fa9:b909)
[00:39:25] <technomancy> I'm glad you're having fun with macros because I know a lot of people get frustrated with this unnecessarily and it doesn't have *that* much to do with normal "learning to write clojure"
[00:40:25] <technomancy> but if it piques your intellectual curiosity, more power to ya
[00:40:26] <seebs> i have never found a programming language i did not enjoy more if i was committing atrocities in it
[00:40:39] <technomancy> hehe
[00:41:08] <technomancy> one interesting thing we did with Fennel was to make it so that macros are literally written using `fn` which I think emphasizes their "function of AST->AST" nature
[00:41:35] <ToxicFrog> > i have never found a programming language i did not enjoy more if i was committing atrocities in it
[00:41:36] <ToxicFrog> highly relatable
[00:42:11] <seebs> i wrote a thing in GNU make which, given a macro and a list of words, expands the macro once for each of the words, just like $(foreach)... except that it does xargs to it, and causes newline splits in the expansion at intervals to avoid shell command length limits, while still doing at least dozens of things per shell command line.
[00:44:03] <technomancy> my blog consists entirely of gnu m4 macros including one particularly hideous one implementing recursion since m4 doesn't have native iteration
[00:44:12] <seebs> you know what bugs me about m4?
[00:44:22] <technomancy> haha, uh. probably a lot?
[00:44:28] <seebs> it was probably 15-20 years of seeing it around before i realized the name is m4 like i18n
[00:44:33] <seebs> it's a count of omitted letters
[00:44:39] <technomancy> ...!!
[00:44:56] <technomancy> what are the secret letters??
[00:44:59] <seebs> acro
[00:45:05] <technomancy> lmaooooooo
[00:45:17] <technomancy> this is like when I was 18 and I realized why they were called "movies"
[00:45:19] <seebs> heh
[00:45:56] <seebs> anyway, i always like to do horrible things with languages, because the more comfortable i am with how horribly they go wrong, the better i do at writing reasonably clean code most of the time.
[00:46:07] <seebs> and also, like. every so often i *do* need to do something unreasonable.
[00:46:35] <technomancy> it's like you approach a new language and you start by asserting your dominance
[00:47:36] <technomancy> cf https://icosahedron.website/system/cache/media_attachments/files/107/804/078/992/533/758/original/ed3c8708cd45533b.jpg
[00:47:39] <seebs> yeah pretty much
[00:48:24] <seebs> also, just... you gotta explore the nooks and crannies on purpose when you're watching them, because otherwise, you run into them by accident and don't have any clue what's wrong
[00:48:37] <technomancy> you're not wrong
[00:48:37] <seebs> although by-accident can be cool if you enjoy debugging
[00:49:05] <seebs> i think my best ever "how the FUCK did i do THAT" was the time i accidentally broke a machine badly enough that `telnet 127.0.0.1` got me a *working* login prompt from a different machine
[00:49:24] <technomancy> https://p.hagelb.org/mal.gif
[00:50:09] <seebs> really amazed at the quality of the acting there. he sold it.
[00:53:12] <seebs> (for the curious: was trying to strip a kernel because 68k hardware and small memory, accidentally stripped lo0. without a loopback interface, 127.0.0.1 tried to use the default route, and then the router, also running unix, got packets for 127.0.0.1, said "hey that's me", and happily accepted them and responded.)
[00:53:56] *** Quits: kipz (~kipz@home.kipz.org) (Remote host closed the connection)
[00:54:07] *** Joins: kipz (~kipz@home.kipz.org)
[01:04:45] *** Quits: schmudde (~schmudde@2001:b07:ae6:7d19:f0c6:e281:36c1:5577) (Ping timeout: 252 seconds)
[01:12:25] *** Joins: struchu (~struchu@staticline-31-183-168-145.toya.net.pl)
[01:21:22] *** Quits: struchu (~struchu@staticline-31-183-168-145.toya.net.pl) (Quit: WeeChat 3.3)
[01:22:19] <TimMc> There's so much going on in his body language and facial expression in just a second or so.
[01:22:50] <TimMc> even just the eye movements
[01:23:41] <TimMc> seebs: I think I've mentioned swearjure a few times recently but I'm not sure I've actually linked to hypirion's writeup yet: https://hypirion.com/musings/swearjure
[01:23:58] <technomancy> oh yeah if you're looking for atrocities, look no further
[01:26:32] <TimMc> I learned a ton about Clojure while doing that shit.
[01:26:56] <TimMc> (and finally got to use some knowledge from my college CS classes!)
[01:36:45] *** Quits: Null_A (~null_a@2601:645:8700:2290:a4fb:481a:7fa9:b909) (Remote host closed the connection)
[01:37:01] *** Joins: Null_A (~null_a@2601:645:8700:2290:a4fb:481a:7fa9:b909)
[01:42:36] *** Quits: Vaelatern (~Vaelatern@voidlinux/maintainer/Vaelatern) (Ping timeout: 240 seconds)
[01:46:47] *** Quits: Null_A (~null_a@2601:645:8700:2290:a4fb:481a:7fa9:b909) (Remote host closed the connection)
[01:47:35] *** Joins: Null_A (~null_a@2601:645:8700:2290:a4fb:481a:7fa9:b909)
[01:53:40] *** Joins: Vaelatern (~Vaelatern@cpe-76-183-97-243.tx.res.rr.com)
[01:53:40] *** Quits: Vaelatern (~Vaelatern@cpe-76-183-97-243.tx.res.rr.com) (Changing host)
[01:53:40] *** Joins: Vaelatern (~Vaelatern@voidlinux/maintainer/Vaelatern)
[01:58:39] *** Quits: seschwar (~seschwar@user/seschwar) (Quit: :wq)
[02:27:24] *** Joins: azimut_ (~azimut@gateway/tor-sasl/azimut)
[02:29:35] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Ping timeout: 240 seconds)
[02:30:06] *** Joins: TonyStone (~TonyStone@2603-7080-8607-c36a-3d94-4d23-dc7c-c228.res6.spectrum.com)
[02:50:28] *** Quits: cmiles74 (~miles@068-184-030-013.res.spectrum.com) (Ping timeout: 272 seconds)
[02:51:28] *** Quits: maskd (~eu@user/maskd) (*.net *.split)
[02:51:28] *** Quits: cespare (sid330206@2a03:5180:f:4::5:9de) (*.net *.split)
[02:51:28] *** Quits: szkl (uid110435@id-110435.uxbridge.irccloud.com) (*.net *.split)
[02:51:28] *** Quits: fluxit (~fluxit@techsmix.net) (*.net *.split)
[02:51:28] *** Quits: Lulu (~meow@vyos/developer/Lulu) (*.net *.split)
[02:51:28] *** Quits: jsn- (~jason@scw.ice-9.eu) (*.net *.split)
[02:51:28] *** Quits: benoitj (~benoitj@user/benoitj) (*.net *.split)
[02:53:47] *** Joins: fluxit (~fluxit@techsmix.net)
[02:53:47] *** Joins: maskd (~eu@user/maskd)
[02:53:47] *** Joins: cespare (sid330206@2a03:5180:f:4::5:9de)
[02:53:47] *** Joins: szkl (uid110435@id-110435.uxbridge.irccloud.com)
[02:53:47] *** Joins: Lulu (~meow@vyos/developer/Lulu)
[02:53:47] *** Joins: jsn- (~jason@scw.ice-9.eu)
[02:53:47] *** Joins: benoitj (~benoitj@user/benoitj)
[02:56:57] *** Quits: szkl (uid110435@id-110435.uxbridge.irccloud.com) (Ping timeout: 250 seconds)
[02:57:41] <seebs> aww
[02:57:46] <seebs> (as-> (prn x) v (let [x 2] v)) <-- does not work
[02:57:52] *** Joins: szkl (uid110435@id-110435.uxbridge.irccloud.com)
[02:57:59] <seebs> oh right
[02:58:13] <seebs> hmm
[02:58:28] <seebs> clearly my model of this is not quite complex enough
[03:00:16] <seebs> (-> [a 1 b 2] (let (prn a b))) <-- this does what i expected, though.
[03:01:17] <seebs> user=> (macroexpand-1 `(as-> [a 1 b 2] v (let v (prn a b))))
[03:01:18] <seebs> (clojure.core/let [user/v [user/a 1 user/b 2]] (clojure.core/let user/v (clojure.core/prn user/a user/b)))
[03:03:50] *** Joins: tatsumaru (~tatsumaru@82.147.131.155)
[03:04:17] <seebs> ohh, i see. it's not textually-substituting v in on each line. it's using a let with the individual exprs as the assigned values for multiple let pairs with user/v, which it's doing so that an expression that uses v more than once will work.
[03:04:46] <tatsumaru> hey guys, I don't know enough about clojure yet, but I am curious how does clojurescript achieve something like JS's eventlistening for example? 
[03:09:34] *** Quits: Null_A (~null_a@2601:645:8700:2290:a4fb:481a:7fa9:b909) (Remote host closed the connection)
[03:09:49] *** Joins: Null_A (~null_a@2601:645:8700:2290:a4fb:481a:7fa9:b909)
[03:13:16] *** Joins: AlaskanEmily (~AlaskanEm@user/alaskanemily)
[03:13:37] <aphyr> seebs: it might help to think of -> and ->> as *strictly* textual transformations
[03:14:25] <seebs> that was actually what threw me off, i was expecting (-> [a 1 b 2] (let (prn a b))) to textually substitute to (let [a 1 b 2] (prn a b)) 
[03:14:35] <seebs> er wait
[03:14:37] <seebs> that one does
[03:14:40] <seebs> but the as-> doesn't
[03:14:49] <technomancy> I'd s/textual/data structure/
[03:14:52] <aphyr> Are you sure it wasn't side effects?
[03:14:55] <seebs> no
[03:14:59] <seebs> well wait yes
[03:15:35] <seebs> because the expansion of as-> does in fact reveal that it's doing its own let, which isn't my inner let, to set v, and then calling my let with just v as its first form, rather than with the text i wanted it set to.
[03:15:45] <aphyr> oh wait, wow, yeah, that *is* neat
[03:15:48] <aphyr> user=> (-> (as-> (prn x) v (let [x 2] v)) quote macroexpand pprint)
[03:15:48] <aphyr> (let* [v (prn x)] (let [x 2] v))
[03:15:51] *** Quits: tatsumaru (~tatsumaru@82.147.131.155) (Quit: Leaving.)
[03:16:27] <aphyr> Oh, no, this looks fine
[03:17:02] <aphyr> That enclosing let* is from as->
[03:17:37] <seebs> user=> (as-> let v (v [a 1 b 2] (prn a b)))
[03:17:42] <seebs> Can't take value of a macro: #'clojure.core/let
[03:17:44] <seebs> coward
[03:17:49] <technomancy> lol
[03:18:12] <technomancy> personally I'm really not a fan of as-> but I could see its value since your stated goal is atrocities
[03:18:12] <TimMc> s/can't/won't/
[03:18:13] <seebs> so i think -> is more purely-textual and ->as is smarter
[03:18:22] <TimMc> because you totally can
[03:18:23] <TimMc> @#'clojure.core/let
[03:18:33] <aphyr> TimMc: monster
[03:18:58] <aphyr> seebs: all macros are (barring weird things with &env) strictly "textual"
[03:19:12] <technomancy> well hang on
[03:19:13] <aphyr> and by textual I mean data structures
[03:19:15] <technomancy> C macros are textual
[03:19:26] <technomancy> ok, carry on =)
[03:19:31] <seebs> yeah, but like. -> seems to be a lot more like Naive Text Substitution to me than ->as is
[03:19:38] <aphyr> but like, the structure as written in text, not as its *evaluated*
[03:19:59] <technomancy> "pertaining to data which *can* be represented as text" I will accept
[03:20:04] <TimMc> Macros are functions of ASTs to ASTs.
[03:20:08] <TimMc> (for some value of AST)
[03:20:42] <aphyr> Yes, yes, thank you, all very correct haha
[03:20:51] <seebs> i'm still trying to understand the (-> (as-> ...) thing.
[03:20:52] <aphyr> But what I'm getting at here is the separation of text and meaning
[03:20:56] *** Quits: AlaskanEmily (~AlaskanEm@user/alaskanemily) (Remote host closed the connection)
[03:21:25] <aphyr> When you see a macro, it *has no access* to the evaluation context, and can only operate purely on what's actually "written on the page", so to speak
[03:21:47] <technomancy> maybe "purely syntactic"?
[03:21:50] <technomancy> purely notational?
[03:22:07] <seebs> so, with as->, it looks to me like the handling of the following forms changes; all but one of them get put in a very long let clause, iterating on pairs of [user/v (expr-involving-v)], and then the last one just goes outside the [].
[03:22:15] <aphyr> look seebs is just starting out I'm going for "understandable metaphors" here ;-)
[03:22:30] * technomancy nods =)
[03:22:49] <seebs> so you could do it as (let [v inputs] (let [v expr1] (let [v expr2] expr3)))
[03:23:03] <seebs> but instead it compresses the v expr1 v expr2 into the initial let's [...]
[03:23:19] <aphyr> yeah--let bindings can use earlier bindings in the same binding vector
[03:23:37] <aphyr> (let [x 1, x (inc x), x (inc x)] x) => 3
[03:23:42] <seebs> so, when i wrote (as-> (prn x) v (let [x 2] v))
[03:23:55] <seebs> i was sort of expecting it to expand into (let [x 2] (prn x))
[03:24:39] <aphyr> Yeah, the expansion they do is basically equivalent in terms of evaluation, but as-> finds it simpler to generate let bindings
[03:25:02] <seebs> but instead, it does (let [v (prn x)] (let [x 2] v))
[03:25:15] <technomancy> because it's assuming you're not doing anything *too* heinous
[03:25:27] <technomancy> clearly an unwarranted assumption in this case!
[03:26:18] <seebs> but for instance, this breaks (as-> [a 1 b 2] v (let v (prn a b)))
[03:26:44] <seebs> because it doesn't actually substute the [a 1 b 2] in that position, it tries to assign that to v, which doesn't work.
[03:26:52] <seebs> er, s/assign/bind/
[03:27:08] <technomancy> exactly
[03:27:11] <seebs> hmm
[03:27:32] <technomancy> you could write a version that worked like -> and didn't bind, but it would be vulnerable to the double-evaluation problem
[03:30:15] <seebs> well that's weird
[03:30:26] <seebs> user=> (macroexpand-1 `(let [x 0] (-> (inc x) prn prn prn)))
[03:30:38] <seebs> Syntax error macroexpanding clojure.core/let at (REPL:1:1).
[03:31:07] *** Joins: meinside (uid24933@id-24933.helmsley.irccloud.com)
[03:31:20] <seebs> i was expecting more 1s and fewer nils than i got from running that, but apparently asking how it got there is a crime
[03:32:07] <technomancy> use ' instead of `
[03:32:30] <technomancy> otherwise you're using user/x as the name of the local where you want just x
[03:33:31] <seebs> hmm, but if i use ', i don't get any actual expansion?
[03:33:55] *** Joins: AlaskanEmily (~AlaskanEm@user/alaskanemily)
[03:34:32] <technomancy> "note neither macroexpand-1 nor macroexpand expand macros in subforms"
[03:34:38] <technomancy> they do top-level expansion only
[03:36:34] <seebs> user=> (macroexpand-1 '(-> (inc x) prn prn prn))
[03:36:34] <seebs> (prn (prn (prn (inc x))))
[03:36:52] <seebs> ah-hah. so -> is just literal-nesting, because it doesn't need to worry about double-invocations.
[03:37:05] <technomancy> yep, because no form is repeated
[03:37:17] <seebs> which is why it's not coming out as (do (prn (inc x)) (prn (inc x)) ...)
[03:37:35] <technomancy> on the other hand, (doto (inc x) prn prn prn)
[03:41:13] *** Quits: Null_A (~null_a@2601:645:8700:2290:a4fb:481a:7fa9:b909) (Remote host closed the connection)
[03:57:25] *** Joins: Null_A (~null_a@c-98-210-133-39.hsd1.ca.comcast.net)
[04:02:24] *** Quits: Null_A (~null_a@c-98-210-133-39.hsd1.ca.comcast.net) (Ping timeout: 252 seconds)
[04:18:23] *** Quits: szkl (uid110435@id-110435.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[04:27:38] *** Quits: AlaskanEmily (~AlaskanEm@user/alaskanemily) (Quit: Leaving)
[04:29:30] *** Joins: AlaskanEmily (~AlaskanEm@user/alaskanemily)
[04:32:11] *** Joins: Null_A (~null_a@2601:645:8700:2290:a4fb:481a:7fa9:b909)
[04:35:09] *** Joins: szkl (uid110435@id-110435.uxbridge.irccloud.com)
[04:36:36] *** Quits: Null_A (~null_a@2601:645:8700:2290:a4fb:481a:7fa9:b909) (Ping timeout: 240 seconds)
[05:06:13] *** Joins: Null_A (~null_a@2601:645:8700:2290:a4fb:481a:7fa9:b909)
[05:10:36] *** Quits: Null_A (~null_a@2601:645:8700:2290:a4fb:481a:7fa9:b909) (Ping timeout: 240 seconds)
[05:39:28] *** Quits: yazi (~yazi@user/yazi) (Quit: asdlfsadgspasnbpaeb)
[06:55:06] *** Quits: silasfox (~sbv@p4fe8dbf5.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[06:55:48] *** Quits: op2 (~op2@user/op2) (Ping timeout: 240 seconds)
[06:57:11] *** Joins: silasfox (~sbv@p200300cec7165400792cbb9734838e19.dip0.t-ipconnect.de)
[07:02:08] *** Quits: manicennui (uid349235@id-349235.tinside.irccloud.com) (Quit: Connection closed for inactivity)
[07:24:21] *** Quits: mzan (~quassel@mail.asterisell.com) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[07:32:31] *** Quits: azimut_ (~azimut@gateway/tor-sasl/azimut) (Remote host closed the connection)
[07:32:49] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[07:59:19] *** Joins: mbuf (~Shakthi@122.162.72.100)
[08:09:50] *** Joins: shiranaihito (~textual@123-192-192-149.dynamic.kbronet.com.tw)
[08:30:10] *** Joins: Null_A (~null_a@2601:645:8700:2290:a4fb:481a:7fa9:b909)
[08:34:36] *** Quits: Null_A (~null_a@2601:645:8700:2290:a4fb:481a:7fa9:b909) (Ping timeout: 240 seconds)
[08:43:00] *** Quits: yauhsien (~Yau-Hsien@61-231-32-166.dynamic-ip.hinet.net) (Quit: Leaving)
[09:02:48] *** Joins: cmiles74 (~miles@068-184-030-013.res.spectrum.com)
[09:07:18] *** Quits: cmiles74 (~miles@068-184-030-013.res.spectrum.com) (Ping timeout: 272 seconds)
[09:14:13] *** Joins: uncleyear (~ian@pppoe.178-66-157-18.dynamic.avangarddsl.ru)
[09:16:00] *** Quits: uncleyear (~ian@pppoe.178-66-157-18.dynamic.avangarddsl.ru) (Read error: Connection reset by peer)
[09:16:27] *** Joins: uncleyear (~ian@pppoe.178-66-157-18.dynamic.avangarddsl.ru)
[09:33:00] *** Quits: silasfox (~sbv@p200300cec7165400792cbb9734838e19.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[09:33:18] *** Joins: silasfox (~sbv@p548d1123.dip0.t-ipconnect.de)
[10:05:24] *** Quits: turlando (~turlando@user/turlando) (Ping timeout: 252 seconds)
[10:17:15] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Ping timeout: 240 seconds)
[10:18:57] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[10:32:10] *** Quits: samuelbernardo (~samuelber@nata02.lip.pt) (Ping timeout: 272 seconds)
[10:32:59] *** Joins: samuelbernardo (~samuelber@nata02.lip.pt)
[10:50:48] *** Joins: struchu (~struchu@staticline-31-183-186-82.toya.net.pl)
[10:56:32] *** Quits: struchu (~struchu@staticline-31-183-186-82.toya.net.pl) (Quit: WeeChat 3.3)
[10:59:36] *** Joins: struchu (~struchu@staticline-31-183-186-82.toya.net.pl)
[11:17:47] *** Joins: mzan (~quassel@mail.asterisell.com)
[11:18:31] *** Joins: turlando (~turlando@93-42-250-112.ip89.fastwebnet.it)
[11:18:31] *** Quits: turlando (~turlando@93-42-250-112.ip89.fastwebnet.it) (Changing host)
[11:18:31] *** Joins: turlando (~turlando@user/turlando)
[11:30:43] *** Joins: puchka (~marius@196.240.128.14)
[11:32:14] *** Joins: yauhsien (~Yau-Hsien@61-231-32-166.dynamic-ip.hinet.net)
[11:32:31] *** Joins: schmudde (~schmudde@2001:b07:ae6:7d19:f456:c298:ea16:21c9)
[11:35:38] *** Quits: lagash (lagash@lagash.shelltalk.net) (Quit: ZNC - https://znc.in)
[11:37:05] *** Joins: lagash (lagash@lagash.shelltalk.net)
[11:38:23] *** Quits: szkl (uid110435@id-110435.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[11:41:39] *** Quits: schmudde (~schmudde@2001:b07:ae6:7d19:f456:c298:ea16:21c9) (Ping timeout: 252 seconds)
[11:51:09] *** Joins: sakalli (~user@88-115-213-143.elisa-laajakaista.fi)
[11:52:20] *** Joins: op2 (~op2@user/op2)
[11:53:32] *** Quits: silasfox (~sbv@p548d1123.dip0.t-ipconnect.de) (Quit: WeeChat 3.4)
[11:55:45] *** Joins: silasfox (~silasfox@p200300cec71654004c832f63ad77a19f.dip0.t-ipconnect.de)
[12:00:44] *** Quits: nivag (~gavin@103-76-144-176.ip.cis.gen.nz) (Remote host closed the connection)
[12:11:27] *** Quits: mzan (~quassel@mail.asterisell.com) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[12:13:00] *** Joins: nivag (~gavin@103-76-144-176.ip.cis.gen.nz)
[12:15:05] *** Joins: mzan (~quassel@mail.asterisell.com)
[12:27:58] *** Joins: stardiviner (~stardivin@39.170.215.0)
[12:42:36] *** Joins: schmudde (~schmudde@public.toolboxoffice.it)
[12:49:27] *** Quits: kipz (~kipz@home.kipz.org) (Remote host closed the connection)
[12:49:39] *** Joins: kipz (~kipz@home.kipz.org)
[12:52:26] *** Quits: turlando (~turlando@user/turlando) (Quit: turlando)
[12:52:41] *** Joins: turlando (~turlando@93-42-250-112.ip89.fastwebnet.it)
[12:52:41] *** Quits: turlando (~turlando@93-42-250-112.ip89.fastwebnet.it) (Changing host)
[12:52:41] *** Joins: turlando (~turlando@user/turlando)
[12:53:43] *** Quits: turlando (~turlando@user/turlando) (Client Quit)
[12:54:12] *** Joins: turlando (~turlando@user/turlando)
[13:07:59] *** Joins: MajorBiscuit (~MajorBisc@wlan-145-94-218-48.wlan.tudelft.nl)
[13:14:27] *** Quits: silasfox (~silasfox@p200300cec71654004c832f63ad77a19f.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[13:16:00] *** Joins: Ilyu (~quassel@gateway/vpn/pia/ilyu)
[13:24:51] *** Quits: kipz (~kipz@home.kipz.org) (Ping timeout: 250 seconds)
[13:26:50] *** Joins: silasfox (~silasfox@p548d1123.dip0.t-ipconnect.de)
[13:29:47] *** Joins: kipz (~kipz@home.kipz.org)
[13:33:01] *** Quits: AlaskanEmily (~AlaskanEm@user/alaskanemily) (Remote host closed the connection)
[13:41:07] <rovanion> Does anyone have a test.check generator for LocalDateTime lying around? (which I think is what's used in Malli).
[13:48:10] <rovanion> May have found one here: https://github.com/metosin/metosin-common/blob/master/src/clj/metosin/dates/generators.clj
[13:52:14] *** Joins: iomonad (~whoami@user/iomonad)
[14:01:48] *** Quits: silasfox (~silasfox@p548d1123.dip0.t-ipconnect.de) (Ping timeout: 272 seconds)
[14:18:15] *** Quits: Ilyu (~quassel@gateway/vpn/pia/ilyu) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[14:21:24] *** Quits: struchu (~struchu@staticline-31-183-186-82.toya.net.pl) (Quit: WeeChat 3.3)
[14:21:45] *** Joins: struchu (~struchu@staticline-31-183-186-82.toya.net.pl)
[14:32:12] *** Quits: puchka (~marius@196.240.128.14) (Ping timeout: 240 seconds)
[14:34:27] *** Joins: puchka (~marius@196.240.128.13)
[14:44:17] *** Quits: unyu (~pyon@user/pyon) (Ping timeout: 240 seconds)
[14:58:54] *** Quits: stardiviner (~stardivin@39.170.215.0) (Remote host closed the connection)
[15:04:27] *** Joins: silasfox (~silasfox@p548d1123.dip0.t-ipconnect.de)
[15:08:16] *** Joins: unyu (~pyon@user/pyon)
[15:30:08] <rovanion> I adapted it for cljc. https://gist.github.com/Rovanion/0a609839a1944a201fbd4e4bbc330992
[15:46:59] *** Quits: schmudde (~schmudde@public.toolboxoffice.it) (Ping timeout: 250 seconds)
[15:48:53] *** Joins: schmudde (~schmudde@public.toolboxoffice.it)
[16:07:48] *** Quits: silasfox (~silasfox@p548d1123.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[16:09:53] *** Joins: silasfox (~silasfox@p548d1123.dip0.t-ipconnect.de)
[16:21:44] <Para> To keep up with the recent multiweek trend, I _just_ spotted a `contains?` bug in code base I'm working on. From early 2018.
[16:22:27] <Para> Basically "if user belongs to group", where its done as `(contains? groups group)`...
[16:41:24] *** Quits: schmudde (~schmudde@public.toolboxoffice.it) (Ping timeout: 272 seconds)
[16:55:28] *** Joins: cmiles74 (~miles@068-184-030-013.res.spectrum.com)
[17:04:36] *** Quits: puchka (~marius@196.240.128.13) (Ping timeout: 240 seconds)
[17:06:44] *** Joins: puchka (~marius@196.240.128.14)
[17:12:01] *** Quits: henry40408 (~henry4040@175.181.177.116) (Quit: The Lounge - https://thelounge.chat)
[17:14:01] *** Joins: henry40408 (~henry4040@175.181.177.116)
[17:15:23] *** Joins: Null_A (~null_a@2601:645:8700:2290:a4fb:481a:7fa9:b909)
[17:18:34] *** Quits: henry40408 (~henry4040@175.181.177.116) (Read error: Connection reset by peer)
[17:19:33] *** Joins: henry40408 (~henry4040@175.181.177.116)
[17:27:04] *** Quits: henry40408 (~henry4040@175.181.177.116) (Quit: The Lounge - https://thelounge.chat)
[17:31:24] *** Quits: Null_A (~null_a@2601:645:8700:2290:a4fb:481a:7fa9:b909) (Ping timeout: 240 seconds)
[17:36:12] *** Quits: silasfox (~silasfox@p548d1123.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[17:39:08] *** Joins: wonko (~wjc@user/wonko)
[17:45:59] *** Joins: silasfox (~silasfox@p548d1123.dip0.t-ipconnect.de)
[17:48:51] *** Quits: wonko (~wjc@user/wonko) (Remote host closed the connection)
[17:49:44] *** Joins: wonko (~wjc@user/wonko)
[17:50:41] *** Joins: schmudde (~schmudde@public.toolboxoffice.it)
[17:52:52] *** Quits: wonko (~wjc@user/wonko) (Remote host closed the connection)
[17:53:13] *** Joins: wonko (~wjc@user/wonko)
[17:53:53] *** Quits: wonko (~wjc@user/wonko) (Remote host closed the connection)
[17:54:46] *** Joins: wonko (~wjc@user/wonko)
[17:59:29] *** Quits: v3gajerusalem (~v3ga@2603-6080-5204-3b35-0000-0000-0000-18ad.res6.spectrum.com) (Ping timeout: 256 seconds)
[18:00:17] *** Joins: v3gajerusalem (~v3ga@2603-6080-5204-3b35-0000-0000-0000-18ad.res6.spectrum.com)
[18:05:50] *** Joins: zmt01 (~zmt00@user/zmt00)
[18:07:00] *** Quits: meinside (uid24933@id-24933.helmsley.irccloud.com) (Ping timeout: 240 seconds)
[18:07:48] *** Quits: v3gajerusalem (~v3ga@2603-6080-5204-3b35-0000-0000-0000-18ad.res6.spectrum.com) (Ping timeout: 240 seconds)
[18:08:12] *** Quits: unyu (~pyon@user/pyon) (Ping timeout: 240 seconds)
[18:08:12] *** Quits: TonyStone (~TonyStone@2603-7080-8607-c36a-3d94-4d23-dc7c-c228.res6.spectrum.com) (Ping timeout: 240 seconds)
[18:08:36] *** Quits: mwnaylor (~user@2601:5ce:4300:5560::68b3) (Ping timeout: 240 seconds)
[18:08:36] *** Quits: zmt00 (~zmt00@user/zmt00) (Ping timeout: 240 seconds)
[18:09:55] *** Joins: v3gajerusalem (~v3ga@2603-6080-5204-3b35-0000-0000-0000-18ad.res6.spectrum.com)
[18:09:58] *** Joins: meinside (uid24933@id-24933.helmsley.irccloud.com)
[18:09:58] *** Joins: kaisyu (uid37155@id-37155.ilkley.irccloud.com)
[18:10:29] *** Joins: unyu (~pyon@user/pyon)
[18:16:07] *** Joins: Null_A (~null_a@2601:645:8700:2290:a4fb:481a:7fa9:b909)
[18:20:37] *** Quits: Null_A (~null_a@2601:645:8700:2290:a4fb:481a:7fa9:b909) (Ping timeout: 240 seconds)
[18:20:48] *** Joins: TonyStone (~TonyStone@2603-7080-8607-c36a-4424-fc06-167e-bc32.res6.spectrum.com)
[18:21:15] *** Quits: v3gajerusalem (~v3ga@2603-6080-5204-3b35-0000-0000-0000-18ad.res6.spectrum.com) (Ping timeout: 250 seconds)
[18:22:05] *** Quits: silasfox (~silasfox@p548d1123.dip0.t-ipconnect.de) (Ping timeout: 256 seconds)
[18:22:13] *** Joins: v3gajerusalem (~v3ga@2603-6080-5204-3b35-0000-0000-0000-18ad.res6.spectrum.com)
[18:38:00] *** Quits: wonko (~wjc@user/wonko) (Ping timeout: 252 seconds)
[18:49:56] *** Joins: Null_A (~null_a@2601:645:8700:2290:a4fb:481a:7fa9:b909)
[18:54:37] *** Quits: Null_A (~null_a@2601:645:8700:2290:a4fb:481a:7fa9:b909) (Ping timeout: 240 seconds)
[18:55:09] *** Joins: seschwar (~seschwar@user/seschwar)
[18:56:50] *** Quits: seschwar (~seschwar@user/seschwar) (Client Quit)
[19:06:12] *** Quits: AdmiralBumbleBee (~AdmiralBu@47.203.174.105) (Ping timeout: 240 seconds)
[19:07:01] *** Joins: henry40408 (~henry4040@175.181.177.116)
[19:09:33] *** Joins: AdmiralBumbleBee (~AdmiralBu@47.203.174.105)
[19:13:35] *** Quits: struchu (~struchu@staticline-31-183-186-82.toya.net.pl) (Quit: WeeChat 3.3)
[19:23:45] *** Joins: seschwar (~seschwar@user/seschwar)
[19:23:53] <seebs> curious: why does cond in clojure not parenthesize pairs?
[19:25:08] *** Joins: Null_A (~null_a@2601:645:8700:2290:a4fb:481a:7fa9:b909)
[19:25:53] <Para> Why would it? What semantic value would the parentheses add?
[19:29:48] *** Quits: Null_A (~null_a@2601:645:8700:2290:a4fb:481a:7fa9:b909) (Ping timeout: 240 seconds)
[19:30:05] *** Quits: schmudde (~schmudde@public.toolboxoffice.it) (Ping timeout: 256 seconds)
[19:32:00] *** Joins: schmudde (~schmudde@public.toolboxoffice.it)
[19:33:12] <seebs> some other lisps do, i don't know why. racketeer friend seems to think it's less error-prone.
[19:34:57] *** Joins: manicennui (uid349235@id-349235.tinside.irccloud.com)
[19:37:08] *** Joins: silasfox (~silasfox@p548d1123.dip0.t-ipconnect.de)
[19:37:26] <logiz> I kinda liked the way clojure did cond, but I also kinda like the way scheme does cond, so I'm condnostic
[19:39:17] *** Quits: silasfox (~silasfox@p548d1123.dip0.t-ipconnect.de) (Client Quit)
[19:43:07] <Para> I guess if Clojure had a tendency to highlight tuples more, then it would make more sense.
[19:51:07] *** Joins: mwnaylor (~user@2601:5ce:4300:5560::68b3)
[19:53:19] <seebs> hmm
[19:53:29] <seebs> you know that'd be a neat feature for a syntax highlighter to have
[19:53:46] <seebs> structure awareness for things that it knows about, so it could in some way mark the pairs in a cond
[19:55:45] <Para> I've been thinking lately if I should take something like lighttable as base and create a structural purist editor.
[19:56:31] <Para> Something so strict about the structure that it become impossible to just write stuff, instead the editing loop would be intent -> input -> insert -> format.
[19:57:05] <Para> "add param to function" -> "select function by ns/name" -> "add param name" -> rejiggle the entire source.
[19:57:09] <Para> and so on
[19:58:30] *** Quits: mbuf (~Shakthi@122.162.72.100) (Quit: Leaving)
[20:03:14] *** Joins: patrice (~patrice@user/patrice)
[20:04:09] *** Joins: wonko (~wjc@user/wonko)
[20:04:40] <yeik-the-spik[m]> i say do it! from then you could build a whole gui based programming experience
[20:05:23] <ToxicFrog> This is how writing scripts for X2 works and it is quite possibly the most miserable programming environment I have ever experienced
[20:05:58] <seebs> consider a thing like typing, but where you can't type a partial word, and also you can't type an adjective until you have a noun for it to modify
[20:06:53] <seebs> so instead of typing "i don't like this", you'd have to select "noun transitive-verb object" from a pop-up, then right-click your verb and add "prefix-adverb" to enter "don't"
[20:07:09] <seebs> i'm not sure whether this is fixable. it might be!
[20:13:29] <Para> You jest, but I raise - as a Finn my native language is all about conjugation and prefixing so that looks totally fine to me >:)
[20:13:54] <Para> Hmm, for this hypothetical horror IDE the main prompt in fact could be >:)
[20:16:25] <TimMc> Para: Seems like you'd have to learn a lot of commands.
[20:17:06] <TimMc> ("now what was the command for adding a parameter to the function again... C-M-x S-y 2 3?")
[20:17:39] <yeik-the-spik[m]> wait? commands? I thought it would all be pop-up / drop-down driven
[20:17:58] <Para> I'd probably aim for something structural. Clojure at least has a few high level patterns, eg. optionally named definitions, binding vectors, parameter lists etc.
[20:18:11] <TimMc> Or maybe it's autocomplete based: Shift Shift a d d p a r a m Enter
[20:18:14] <Para> But of course this would be meant to be used primarly with the dual touch pads of Steam Deck
[20:18:17] <Para> So two radial menus.
[20:19:00] *** Quits: kaisyu (uid37155@id-37155.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[20:19:04] <Para> I'm sort of half serious. Thankfully I'm not productive enough outside work to make stuff like this a reality :D
[20:19:23] *** Quits: schmudde (~schmudde@public.toolboxoffice.it) (Ping timeout: 256 seconds)
[20:19:29] <TimMc> truly we are all blessed
[20:20:23] <yeik-the-spik[m]> xD Finally I can program while laying on my couch with my console joystick!
[20:20:27] <TimMc> I mean, I could see it working, with the right set of keybindings and whatnot.
[20:20:56] <TimMc> Some unholy hybrid of paredit and ace-jump-mode to navigate structurally, perhaps.
[20:22:00] <Para> autocomplete/fuzzy search could be a good start
[20:22:55] <Para> start typing -> assumption is you want to do something, so do fuzzy search -> if I type "add param" it shows relevant potential actions -> allow selecting from shown with arrow keys and enter, esc first empties, then cancels
[20:24:05] <Para> And the actions would be further autocompleted based on caret context, so within function it would show "add param to function", inside let it would also show "add binding to let" etc...hmmh.
[20:28:10] <seebs> all i know about Finnish is people making heroic efforts to translate fingerpori, and a phrase which means something like "six pieces", "the spruce is on fire", or "your moon returns"
[20:29:21] <Para> kuusi palaa, indeed
[20:29:39] <seebs> i'd make fun of this more but English has "fuck" which is at least four different parts of speech
[20:29:51] *** Joins: Frozenlock (~user@modemcable251.64-203-24.mc.videotron.ca)
[20:30:14] <seebs> that said i seriously admire the person who does fingerpori, that is some *amazing* comedic writing
[20:30:59] <Para> Some years ago we had this meme called kuhajutut, literally translated "just zander things", which is terrible puns based entirely on the fact that in Helsinki slang "kunhan" (as long as, provided, once) is often abbreviated to "kuha", which also happens to be zander, one of our most common sweetwater fish which is absolutely delicious as well.
[20:31:14] <Para> We had some great efforts translating those to our international colleagues at the time.
[20:31:34] <Para> https://depressingfinland.tumblr.com/post/130804966833/would-you-like-to-explain-the-kuha-on-varaani
[20:32:44] *** Joins: Null_A (~null_a@c-98-210-133-39.hsd1.ca.comcast.net)
[20:33:06] *** Joins: dalek_caan (~Thunderbi@109-252-124-86.nat.spd-mgts.ru)
[20:33:22] *** Quits: dalek_caan (~Thunderbi@109-252-124-86.nat.spd-mgts.ru) (Client Quit)
[20:33:27] <Para> And yeah, Pertti Jarla isn't wired normally, even for a Finn. I suspect he's from Savo.
[20:35:16] *** Joins: schmudde (~schmudde@public.toolboxoffice.it)
[20:35:16] *** Joins: dalek_caan (~Thunderbi@109-252-124-86.nat.spd-mgts.ru)
[20:39:27] <seebs> i pick up weird things about various languages. i understand a few words of spoken Polish but would have no idea what they'd look like, because i only know it as "the language the kid uses to talk to cats and grandparents"
[20:39:50] <seebs> but i can emulate it well enough that if i call the cats in emulated-Polish, they completely ignore me, which is exactly what they do when called in native-speaker Polish
[20:42:51] *** Quits: uncleyear (~ian@pppoe.178-66-157-18.dynamic.avangarddsl.ru) (Remote host closed the connection)
[20:43:49] *** Joins: uncleyear (~ian@pppoe.178-66-157-18.dynamic.avangarddsl.ru)
[20:44:07] <Para> So there's actually two Finns in Disney's Star Wars movies; Chewbacca is Joonas Suotamo, but lesser known is Sara Maria Forsberg, who created the pseudolanguages for the new movies. She became famous because of this https://www.youtube.com/watch?v=ybcvlxivscw
[20:44:23] <Para> That video is 100% gibberish.
[20:45:20] <technomancy> neither of those is the Finn that I know from Star Wars
[20:45:52] <Para> Who am I forgetting? Or what? Of course Teräs Käsi.
[20:46:41] <technomancy> https://starwars.fandom.com/wiki/Finn
[20:47:18] <Para> Ota yläveneesi ja häivy.
[20:48:51] *** Quits: schmudde (~schmudde@public.toolboxoffice.it) (Ping timeout: 256 seconds)
[20:51:35] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Ping timeout: 240 seconds)
[20:52:12] *** Quits: wonko (~wjc@user/wonko) (Ping timeout: 252 seconds)
[21:08:55] *** Quits: Null_A (~null_a@c-98-210-133-39.hsd1.ca.comcast.net) (Remote host closed the connection)
[21:21:27] *** Joins: schmudde (~schmudde@5.171.241.64)
[21:24:48] *** Joins: Null_A (~null_a@2601:645:8700:2290:a4fb:481a:7fa9:b909)
[21:29:24] *** Quits: Null_A (~null_a@2601:645:8700:2290:a4fb:481a:7fa9:b909) (Ping timeout: 240 seconds)
[21:44:43] <seebs> > as commas are whitespace in Clojure
[21:44:53] <seebs> [record scratch sound effect]
[21:47:41] <Para> It's a convenience thing.
[21:47:51] <Para> [:a, :b, :c]
[21:48:34] <seebs> hmm
[21:48:36] <logiz> just replace all that white space with commas [:a,,,:b,,,:c]
[21:49:06] <seebs> this has amazing implications
[21:49:16] <seebs> for one thing, i think there's a lot more room for crying emoji in swearjure than i realized
[21:50:27] <ridcully_> i used ,, as linebreak for rlwrap for the repl back in the days
[21:50:53] <Para> ;_; is of course just a comment
[21:50:56] <ridcully_> i think it's still used to battle quoting/shell problems with some clj-cli stuff
[21:51:50] <Para> oh no, `(keyword "-)")` is valid
[21:52:02] <seebs> do macros see whitespace or only the forms separated by it?
[21:52:19] <ridcully_> you confuse "valid" with "input keyword accepts" ;P
[21:52:31] <ridcully_> seebs: only the forms
[21:54:08] <seebs> hmm. so i see that # dispatches reader macros, can i make reader macros or put things in the read table
[21:54:33] <Para> Nope, that is one thing Clojure explicitly has decided against.
[21:54:33] <seebs> i'm aware the answer might be changed if i asked "should i..."
[21:54:37] <seebs> ahh, okay
[21:54:57] <Para> Ah, there is one exception, what's the name...
[21:54:59] <seebs> as a former IOCCC judge, i'm horrified. as a person who sometimes wants a program to work, i'm relieved.
[21:55:07] *** Joins: blei (~blei@c-73-153-189-5.hsd1.co.comcast.net)
[21:55:37] <seebs> https://stackoverflow.com/questions/20677055/define-my-own-reader-macro-in-clojure
[21:55:53] <seebs> oooh so i can make magic tagged literals but that's it
[21:55:58] <Para> Yeah that, tagged literals can be added.
[21:56:38] <seebs> also according to a thing i ran into but can't now find, there *are* cases in which keywords actually have namespace-flavored properties that aren't just a convention of prefixing them with namespaces
[21:56:56] <seebs> but now i forgot where it was or what exactly it was.
[21:57:00] <Para> :foo/bar or ::baz
[21:57:19] <Para> latter being equivalent to `(keyword *ns* "baz")`
[21:58:00] <Para> And then I think it was 1.10 which added the syntax for marking all keys as belonging to common namespace.
[21:58:08] <Para> I really can't remember that syntax at all, never used it.
[21:59:23] <Para> https://gist.github.com/mprokopov/93a581cdbafa1ed910afbfb44938a73e
[22:00:50] <Para> Also this guy has written something as well https://blog.jeaye.com/2017/10/31/clojure-keywords/
[22:07:03] *** Quits: schmudde (~schmudde@5.171.241.64) (Ping timeout: 256 seconds)
[22:09:51] *** Joins: Pixel_Outlaw (~user@2600-6c67-5e3f-ed1c-ac00-a943-f496-c9ed.res6.spectrum.com)
[22:14:50] <Pixel_Outlaw> Hello all, I'm still somewhat new to Clojure, can anyone explain why introducing an uncalled future affects the printout of an atom twice as seen here? https://pastebin.com/GwBXy8CF
[22:15:15] <Pixel_Outlaw> If run multiple times things get interleaved. 
[22:19:12] <ridcully_> are you confused why the output is interleaved or why the future materializes although no one ever asked for the result?
[22:20:00] <Pixel_Outlaw> Maybe I have a misunderstood definition of futures, I thought they defer a computation but they really just start it in a new thread...
[22:20:37] <Para> surprisingly, `future` documentation is pretty clear for once https://clojuredocs.org/clojure.core/future
[22:21:34] <Para> But yes, `future` just kicks up a thread to run whatever and starts it immediately.
[22:21:45] * jeaye looks at Para.
[22:22:10] <Para> *finger guns*
[22:22:13] <Pixel_Outlaw> Maybe my mind is pulling something in from CL or Scheme. And got confused. I span a few dialects.
[22:22:26] <ridcully_> there is also delay if you really want to only start work once derefed
[22:24:12] *** Quits: MajorBiscuit (~MajorBisc@wlan-145-94-218-48.wlan.tudelft.nl) (Ping timeout: 240 seconds)
[22:24:57] <Pixel_Outlaw> Gotcha, I was thinking it was like a promise from Scheme.
[22:25:15] <Pixel_Outlaw> All clear, thanks all.
[22:26:13] <Para> Clojure has promise as well, of course - https://clojuredocs.org/clojure.core/promise
[22:27:09] <Para> That one is meant to be delivered separately, idea being that you can have a heavily asynchronous process wherein the final result is delivered through the promise. This allows the main thread to do other things and finally stop to wait for result.
[22:27:31] <Para> In general no two language seem to agree on the semantics and names for futures/promises etc :)
[22:30:28] <Pixel_Outlaw> It's ok, I've aready adapted to stuff like [progn, begin, do] between 3 languages.
[22:32:34] <Para> oh and of course libraries mix this up even more, like https://github.com/funcool/promesa https://github.com/ane/task and of course core.async
[22:33:35] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Ping timeout: 240 seconds)
[22:35:11] <Para> Hmm, at work we discussed recently what's the semantic meaning of task vs issue. Maybe next time I write concurrency stuff I'll call my primitive issue.
[22:35:31] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[22:36:33] <aphyr> Pixel_Outlaw: You might want (delay) for lazy evaluation
[22:37:39] <aphyr> (future :x) and (delay :x) both return :x when deref'ed, but future evaluates it in a new thread immediately, and delay defers evaluation to call time and does it on the caller's thread.
[22:37:53] <aphyr> Er, defers evaluation to deref time.
[22:39:43] <seebs> efers devaluation to eref dtime
[22:41:16] <Pixel_Outlaw> Makes sense, thanks. Yeah I've had the luxuury of writing single threaded programs for a long time. I'm forcing myself to begin programming like it's not 1998 anymore. :)
[22:41:43] <Para> seebs: bondulance
[22:48:44] *** Joins: analogsalad (~analogsal@user/analogsalad)
[22:49:50] *** Parts: analogsalad (~analogsal@user/analogsalad) ()
[22:55:34] *** Parts: Pixel_Outlaw (~user@2600-6c67-5e3f-ed1c-ac00-a943-f496-c9ed.res6.spectrum.com) (ERC (IRC client for Emacs 27.2))
[23:01:05] *** Quits: dalek_caan (~Thunderbi@109-252-124-86.nat.spd-mgts.ru) (Quit: dalek_caan)
[23:26:50] *** Joins: Null_A (~null_a@2601:645:8700:2290:a4fb:481a:7fa9:b909)
[23:28:33] *** Quits: puchka (~marius@196.240.128.14) (Quit: leaving)
[23:39:24] *** Quits: cmiles74 (~miles@068-184-030-013.res.spectrum.com) (Ping timeout: 240 seconds)
[23:46:09] *** Quits: shiranaihito (~textual@123-192-192-149.dynamic.kbronet.com.tw) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[23:49:48] *** Quits: Null_A (~null_a@2601:645:8700:2290:a4fb:481a:7fa9:b909) (Ping timeout: 240 seconds)
