[01:17:59] *** Joins: wuseman (~wuseman@81-231-55-224-no68.tbcn.telia.com)
[01:17:59] *** Quits: wuseman (~wuseman@81-231-55-224-no68.tbcn.telia.com) (Changing host)
[01:17:59] *** Joins: wuseman (~wuseman@user/wuseman)
[01:17:59] *** Quits: wuseman (~wuseman@user/wuseman) (Excess Flood)
[01:21:11] *** Joins: wuseman (~wuseman@81-231-55-224-no68.tbcn.telia.com)
[01:21:12] *** Quits: wuseman (~wuseman@81-231-55-224-no68.tbcn.telia.com) (Excess Flood)
[01:22:32] *** Joins: wuseman (~wuseman@81-231-55-224-no68.tbcn.telia.com)
[01:22:33] *** Quits: wuseman (~wuseman@81-231-55-224-no68.tbcn.telia.com) (Changing host)
[01:22:33] *** Joins: wuseman (~wuseman@user/wuseman)
[01:22:33] *** Quits: wuseman (~wuseman@user/wuseman) (Excess Flood)
[01:25:03] *** Joins: wuseman (~wuseman@81-231-55-224-no68.tbcn.telia.com)
[01:25:04] *** Quits: wuseman (~wuseman@81-231-55-224-no68.tbcn.telia.com) (Changing host)
[01:25:04] *** Joins: wuseman (~wuseman@user/wuseman)
[01:25:04] *** Quits: wuseman (~wuseman@user/wuseman) (Excess Flood)
[01:25:44] *** Joins: wuseman (~wuseman@81-231-55-224-no68.tbcn.telia.com)
[01:25:44] *** Quits: wuseman (~wuseman@81-231-55-224-no68.tbcn.telia.com) (Excess Flood)
[01:27:39] *** Joins: wuseman (~wuseman@81-231-55-224-no68.tbcn.telia.com)
[01:27:39] *** Quits: wuseman (~wuseman@81-231-55-224-no68.tbcn.telia.com) (Excess Flood)
[01:28:51] *** Joins: wuseman (~wuseman@81-231-55-224-no68.tbcn.telia.com)
[01:28:51] *** Quits: wuseman (~wuseman@81-231-55-224-no68.tbcn.telia.com) (Excess Flood)
[01:29:22] *** Joins: wuseman (~wuseman@81-231-55-224-no68.tbcn.telia.com)
[01:29:22] *** Quits: wuseman (~wuseman@81-231-55-224-no68.tbcn.telia.com) (Excess Flood)
[01:32:18] *** Joins: wuseman (~wuseman@81-231-55-224-no68.tbcn.telia.com)
[01:32:19] *** Quits: wuseman (~wuseman@81-231-55-224-no68.tbcn.telia.com) (Changing host)
[01:32:19] *** Joins: wuseman (~wuseman@user/wuseman)
[01:32:19] *** Quits: wuseman (~wuseman@user/wuseman) (Excess Flood)
[01:32:59] *** Joins: wuseman (~wuseman@81-231-55-224-no68.tbcn.telia.com)
[01:32:59] *** Quits: wuseman (~wuseman@81-231-55-224-no68.tbcn.telia.com) (Excess Flood)
[01:40:47] *** Quits: tech_exorcist (txrcst@user/tech-exorcist/x-0447479) (Quit: Goodbye)
[01:51:05] *** Joins: wuseman (~wuseman@81-231-55-224-no68.tbcn.telia.com)
[01:51:05] *** Quits: wuseman (~wuseman@81-231-55-224-no68.tbcn.telia.com) (Excess Flood)
[01:55:19] *** Joins: wuseman (~wuseman@81-231-55-224-no68.tbcn.telia.com)
[02:01:08] *** Quits: wuseman (~wuseman@81-231-55-224-no68.tbcn.telia.com) (Changing host)
[02:01:08] *** Joins: wuseman (~wuseman@user/wuseman)
[02:42:04] *** Joins: ferdna (~ferdna@user/ferdna)
[02:52:52] *** Quits: [diablo] (~diablo]@user/diablo/x-9068044) (Quit: Ping timeout (120 seconds))
[02:53:42] *** Joins: [diablo] (~diablo]@user/diablo/x-9068044)
[03:07:55] *** Joins: tirnanog (~tirnanog@user/tirnanog)
[03:23:32] *** Quits: OpenBDSM (~FreeBDSM@user/freebdsm) (Ping timeout: 240 seconds)
[03:26:23] *** Joins: nitro__ (~nitro_@c-73-165-183-88.hsd1.pa.comcast.net)
[03:26:38] *** Quits: nitro_ (~nitro_@c-73-165-183-88.hsd1.pa.comcast.net) (Read error: Connection reset by peer)
[03:32:13] *** Quits: [R] (~rs@genoce.org) (Ping timeout: 240 seconds)
[03:33:20] *** Quits: treble (~treble@user/treble) (Quit: WeeChat 3.3)
[03:37:34] *** Joins: [R] (~rs@genoce.org)
[04:02:55] *** Quits: nvmd (~nvmd@user/nvmd) (Quit: Later, nerds.)
[04:32:41] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[05:10:41] *** Joins: [diablo]5 (~diablo]@user/diablo/x-9068044)
[05:12:22] *** Quits: [diablo] (~diablo]@user/diablo/x-9068044) (Ping timeout: 260 seconds)
[05:12:22] *** [diablo]5 is now known as [diablo]
[05:28:48] *** Quits: wuseman (~wuseman@user/wuseman) (Excess Flood)
[05:29:04] *** Joins: wuseman (~wuseman@81-231-55-224-no68.tbcn.telia.com)
[05:35:42] *** Quits: wuseman (~wuseman@81-231-55-224-no68.tbcn.telia.com) (Ping timeout: 260 seconds)
[05:43:04] *** Joins: wuseman (~wuseman@81-231-55-224-no68.tbcn.telia.com)
[05:43:19] *** Quits: wuseman (~wuseman@81-231-55-224-no68.tbcn.telia.com) (Changing host)
[05:43:19] *** Joins: wuseman (~wuseman@user/wuseman)
[06:08:15] *** Joins: jmdaemon (~jmdaemon@142.207.63.60)
[06:41:24] *** Quits: earnestly (~earnest@user/earnestly) (Ping timeout: 256 seconds)
[07:19:03] *** Joins: treble (~treble@user/treble)
[07:22:06] *** Quits: fcr (~fran@r167-60-116-180.dialup.adsl.anteldata.net.uy) (Read error: Connection reset by peer)
[07:29:38] *** Joins: fcr (~fran@r167-60-118-66.dialup.adsl.anteldata.net.uy)
[07:34:00] *** Quits: jmdaemon (~jmdaemon@142.207.63.60) (Quit: WeeChat 3.3)
[07:34:17] *** Joins: jmd (~jmdaemon@142.207.63.60)
[07:34:48] *** Quits: jmd (~jmdaemon@142.207.63.60) (Client Quit)
[07:35:02] *** Joins: jmdaemon (~jmdaemon@142.207.63.60)
[07:36:28] *** Quits: jmdaemon (~jmdaemon@142.207.63.60) (Client Quit)
[07:36:42] *** Joins: jmdaemon (~jmdaemon@142.207.63.60)
[07:38:17] *** Quits: jmdaemon (~jmdaemon@142.207.63.60) (Client Quit)
[07:38:34] *** Joins: jmdaemon (~jmdaemon@142.207.63.60)
[07:52:45] *** Quits: jmdaemon (~jmdaemon@142.207.63.60) (Ping timeout: 252 seconds)
[08:11:56] *** Joins: jmdaemon (~jmdaemon@142.207.77.89)
[08:55:18] *** Joins: earnestly (~earnest@user/earnestly)
[09:55:23] *** Quits: jmdaemon (~jmdaemon@142.207.77.89) (Ping timeout: 250 seconds)
[10:01:31] *** Joins: lgc (~lgc@user/lgc)
[10:04:13] *** Quits: lgc (~lgc@user/lgc) (Client Quit)
[10:09:44] *** Joins: jmdaemon (~jmdaemon@142.207.63.60)
[11:18:47] *** Joins: nerozero (~nerozero@87.253.63.54)
[13:15:49] *** Joins: bomb-on (~bomb-on@194.144.47.113)
[15:15:04] *** Joins: tech_exorcist (txrcst@user/tech-exorcist/x-0447479)
[16:08:22] *** Quits: jmdaemon (~jmdaemon@142.207.63.60) (Quit: WeeChat 3.3)
[16:10:16] *** Quits: bn_work (uid268505@id-268505.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[16:42:15] *** Joins: vlm (~vlm@user/vlm)
[17:42:57] *** Quits: tirnanog (~tirnanog@user/tirnanog) (Quit: = "")
[17:55:04] *** Quits: tech_exorcist (txrcst@user/tech-exorcist/x-0447479) (Remote host closed the connection)
[18:00:39] *** Quits: defjam (~eb0t@90.202.255.10) (Ping timeout: 265 seconds)
[18:02:27] *** Joins: defjam (~eb0t@90.210.94.161)
[18:37:08] *** Joins: tech_exorcist (txrcst@user/tech-exorcist/x-0447479)
[18:47:57] *** Quits: treble (~treble@user/treble) (Ping timeout: 250 seconds)
[19:27:02] *** Quits: fcr (~fran@r167-60-118-66.dialup.adsl.anteldata.net.uy) (Ping timeout: 240 seconds)
[19:32:07] *** Joins: fcr (~fran@r167-60-102-210.dialup.adsl.anteldata.net.uy)
[19:36:53] *** Joins: jmdaemon (~jmdaemon@142.207.63.60)
[19:40:47] *** Quits: jmdaemon (~jmdaemon@142.207.63.60) (Client Quit)
[19:41:20] *** Joins: jmdaemon (~jmdaemon@142.207.63.60)
[19:41:31] *** Quits: jmdaemon (~jmdaemon@142.207.63.60) (Client Quit)
[20:33:35] *** Quits: nerozero (~nerozero@87.253.63.54) (Ping timeout: 252 seconds)
[20:46:16] *** Quits: tech_exorcist (txrcst@user/tech-exorcist/x-0447479) (Remote host closed the connection)
[20:48:32] *** Joins: tech_exorcist (txrcst@user/tech-exorcist/x-0447479)
[21:00:46] *** Quits: edlou (uid413273@id-413273.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[21:08:26] *** Quits: tech_exorcist (txrcst@user/tech-exorcist/x-0447479) (Remote host closed the connection)
[21:08:47] *** Joins: tech_exorcist (txrcst@user/tech-exorcist/x-0447479)
[21:14:07] *** Quits: tech_exorcist (txrcst@user/tech-exorcist/x-0447479) (Remote host closed the connection)
[21:16:33] *** Joins: tech_exorcist (txrcst@user/tech-exorcist/x-0447479)
[21:45:31] *** Joins: acidsys (~LSD@2.lsd.systems)
[21:47:24] <acidsys> hello! I am unsure if this is a shell or sed question - I try to replace a string with a literal ` \t ` - however sh replaces this with a tab. I tried double backlsashes, single quoting and a $'\\t' syntax, but it always inserts a tab instead of the literal \t. does someone know how to escape this?
[21:48:08] <emanuele6> you didn't show us the command you used
[21:49:40] <acidsys> apologies! this is the full command with the double backslash attempt:
[21:49:42] <acidsys> sed -e "s?<!-- SCRIPT ENTRY -->?\n<tr>\t<td>Application $INDEX</td><td>$NAME</td><td>$HOST</td><td><a href=\"$URL\">Go</a></td><td>LIVE</td>\n<\\tr>\n<!-- SCRIPT ENTRY -->?g"
[21:49:57] <acidsys> where "<\\tr>" is where the literal \t should be
[21:50:26] <emanuele6> "\\" is just one \
[21:50:34] <emanuele6> # echo "\\"
[21:50:35] <shbot> emanuele6: \
[21:50:54] <acidsys> I realized - it was just one of the attempts
[21:51:13] <emanuele6> so you should be writing every literal backslash as \\
[21:51:44] <emanuele6> sed -e "s?<!-- SCRIPT ENTRY -->?\\n<tr>\\t<td>Application $INDEX</td><td>$NAME</td><td>$HOST</td><td><a href=\"$URL\">Go</a></td><td>LIVE</td>\\n<\\\\tr>\\n<!-- SCRIPT ENTRY -->?g"
[21:52:12] <emanuele6> that is how double quoting ("") is supposed to work in the shell language
[21:54:34] <acidsys> Ah! I did not think of that. Thank you so much, also for the example!! 
[21:55:41] <emanuele6> by the way, \t, \n, etc. matching tab, lf, and \t, \n being replaced by tab, lf is a non-portable extension
[21:56:25] <emanuele6> you should write literal tabs and literal newlines (the literal newlines need to be preceded by a literal \)
[21:57:20] <emanuele6> and really you should not inject variables ($URL $INDEX $NAME) into sed, code since that is a code injection.
[21:58:48] <emanuele6> for example, one can easily truncate a file by injecting a w command
[21:59:19] <acidsys> oh! that's good to know - I will try to replace those the newlines/tabs. what about the variables however, is there a cleaner way to insert changing values in a script?
[22:00:19] <acidsys> it was designed for a user to feed the values in a dialog and then for sed to take them, but I think parsing the input on a dialog level to not contain sed commands would be quite complex
[22:00:50] <emanuele6> something like this would make the script portable between sed versions (using bash's $'' syntax): sed -e 's?<!-- SCRIPT ENTRY -->?\'$'\n<tr>\t<td>Application '"$INDEX</td><td>$NAME</td><td>$HOST</td><td><a href=\"$URL\">Go</a></td><td>LIVE</td>\\"$'\n''<\\tr>\'$'\n<!-- SCRIPT ENTRY -->?g'
[22:01:28] <emanuele6> but does not solve the code injection problem
[22:01:43] <emanuele6> acidsys: what does this sed script edit?
[22:01:49] <acidsys> is that bash specific? I have some bourne shell systems 
[22:01:55] <acidsys> it edits html/php
[22:02:14] <emanuele6> acidsys: bourne shell? do you mean posix shell?
[22:02:18] <acidsys> yes
[22:02:34] <emanuele6> that is not bourne :) bourne is a very old kind of shell
[22:02:49] <acidsys> ohh I was misinformed 
[22:03:08] <emanuele6> acidsys: i understand it edits html/php, but where does it get it from, and where does the output go?
[22:03:41] <acidsys> ah, it gets it from user input using `read` and then feeds it into another (temporary) html/php file
[22:04:04] <emanuele6> the user inputs html?
[22:04:14] <acidsys> just the variable values
[22:04:25] <emanuele6> but where does the html come from?
[22:04:25] <acidsys> which the script then feeds into the html file using sed
[22:04:50] <acidsys> from an existing html file, it has a <!-- SCRIPT ENTRY --> line, which sed replaces every time the user feeds a new entry using the script
[22:05:00] <acidsys> sed adds new table rows
[22:05:15] <acidsys> I know...
[22:06:24] <emanuele6> that does not seem like a good design to be honest
[22:07:16] <acidsys> I agree.. it's just for an intranet portal for a few people and I'm not good at webdesign :]
[22:07:35] <emanuele6> anyway, you can avoid injecting the variables inside of the sed code, by using awk instead of sed
[22:08:05] <acidsys> oh! would I make the full replacement with awk instead of sed or just the variable parts?
[22:11:17] <emanuele6> awk -vname="$name" -vhost="$host" -vind="$index" -vurl="$URL" '{ gsub("<!-- SCRIPT ENTRY" -->", "\n<tr>\t<td>Application " ind "</td><td>" name "</td><td>" host "</td><td><a href=\"" URL "\">Go ... etc
[22:11:55] <emanuele6> note ind instead of index, because index is the name of default function in awk
[22:12:56] <emanuele6> or really, a better option seeing what the script is actually doing would be just
[22:14:25] <emanuele6> awk -vname="$name" -vhost="$host" -vind="$index" -vurl="$url" '/<!-- SCRIPT ENTRY -->/ { print ""; printf "<td>Application %s</td>\n", ind ; ....} 1'
[22:14:59] <emanuele6> just print the extra stuff when you match that /<!-- SCRIPT ENTRY -->/ without any substitution overcomplication
[22:15:47] <emanuele6> could have done the same in sed script (using the `i' command combined with the /<!-- SCRIPT ENTRY -->/ range), but you would still need awk to prevent code injections
[22:15:53] <acidsys> oh wow, interesting! I forgot one could specify variables like that in awk.. that does indeed look safer 
[22:16:11] <acidsys> thank you so much for the explanations and samples! really appreciate it
[22:16:15] <acidsys> will give the awk ones a try
[22:17:12] <emanuele6> yeah, so basically if you match /<!-- SCRIPT ENTRY -->/ print the extra stuff before, and after that print every line regardless `1'
[22:18:16] *** Quits: tech_exorcist (txrcst@user/tech-exorcist/x-0447479) (Remote host closed the connection)
[22:18:49] <emanuele6> you could have done the same in sed, hey: sed '/<!-- SCRIPT ENTRY -->/i\'$'\n''<tr>\'$'\n\t'<td>Application app1</td>'
[22:19:08] <emanuele6> (using actual newlines even to make the command more readable)
[22:19:25] <emanuele6> but since you need to use the content of variable, it is better to use awk
[22:20:28] <emanuele6> i didn't notice you were replacing `<!-- SCRIPT ENTRY -->' with `stuff\nstuff\n<!-- SCRIPT ENTRY -->' initially so i didn't tell you
[22:20:39] <emanuele6> that is much simpler than a complex substitution
[22:22:47] <acidsys> got it.. I guess the awk way is safer.. also gives me a reason to learn a bit more awk ;-) yes.. basically the script entry comment at the end allows for the next script run to work if that was confusing 
[22:23:37] <earnestly> code injection
[22:24:02] <earnestly> Unfortunately only solution is html encoding
[22:24:13] <emanuele6> actually, re-reading your question
[22:24:16] <acidsys> one more thing, sorry if I missed it - am I using literal new lines and tabs in awk too?
[22:24:19] <acidsys> oh?
[22:24:22] <emanuele6> why do you need a literal \t there?
[22:24:29] <emanuele6> don't you need a /t?
[22:24:51] <acidsys> that's a good question
[22:25:07] <acidsys> ...
[22:25:30] <acidsys> I think I got mixed up between html and some other language
[22:26:12] <acidsys> you are a genious, I would have likely spent a long time figuring out why it renders wrongly
[22:26:35] *** Joins: tech_exorcist (txrcst@user/tech-exorcist/x-0447479)
[22:32:28] *** Joins: treble (~treble@user/treble)
[22:43:05] <emanuele6> acidsys: anyway, to make sure you understand and to be fair to sed, sed could have done the same exact thing, s is not the only command in sed, there are many others https://0x0.st/-FLF.txt
[22:43:56] <emanuele6> the reason you use awk over sed in this case is that it lets you avoid sed code injections ran on your machine
[22:44:37] <emanuele6> but as earnestly pointed out that is still vulnerable to html (or worse, php) injections on the output
[22:45:18] <earnestly> Problem with html injection is that you get javascript injection for free
[22:45:32] <emanuele6> plus that is a php file so it's even worse
[22:45:53] <earnestly> double plus ungood
[22:46:12] <acidsys> oh wow that's really appreciated! thanks a lot for the elaboration
[22:46:18] <acidsys> I'm aware it's not ideal..
[22:46:26] <acidsys> but the alternative would I guess be some proper webapp
[22:46:41] <earnestly> 'html' could be represented as a type where certain characters are unrepresentible, but besides things like recode(1) or xmlstarlet(1), I'm not sure what you can use
[22:46:58] <acidsys> I guess my excuse is that it's not on the internet :]
[22:47:05] <earnestly> And much of the html encoders tend to produce byte codes rather than named entities, and encode everything
[22:47:48] <acidsys> I have some vague rememberance of xmlstarlet but I didn't know I could use it to encode html
[22:49:19] <earnestly> `xml esc'
[22:50:19] <emanuele6> if you write the script in python (since all the script it does is find a line that contains "SCRIPT ENTRY" and print stuff, any programming language could do that, not just sed or awk), you get html encoding for free
[22:50:25] <emanuele6> i would just use python
[22:51:17] <earnestly> acidsys: Worth reading: https://www.more-magic.net/posts/structurally-fixing-injection-bugs.html
[22:51:30] <earnestly> Changes the entire mentality when thinking about this problem
[22:52:00] <acidsys> hmm good idea, it continues to insert virtual hosts into apache and send diff's via email though.. so I'd need to port a bit more than just the html insertion 
[22:52:03] <acidsys> thanks! will give that a read
[23:09:11] *** Quits: tech_exorcist (txrcst@user/tech-exorcist/x-0447479) (Remote host closed the connection)
[23:13:15] <emanuele6> but even something as trivial as https://0x0.st/-F9-.txt (python3 script) would avoid html injections
[23:16:39] <emanuele6> actually, i just realised that try: except: is useless, so it is even more simple
[23:21:06] <earnestly> emanuele6: Doesn't the html module allow you to insert nodes like td without having to manually interpolate?
[23:21:15] <earnestly> (Also see article)
[23:21:51] <emanuele6> i don't know much about python, but afaict html module only contains escape() and unescape()
[23:22:06] <earnestly> lol
[23:22:07] <emanuele6> maybe there are some submodules that allow you do that too
[23:22:08] <earnestly> So it does
[23:22:33] <earnestly> python is so frequently a disappointment specifically because it is so often very good
[23:24:39] <emanuele6> no, there does not seem to be a default python module that allows you to create html elements
[23:25:13] <emanuele6> there is xml.dom.minidom, but that is generally for xml and xml is quite different from html
[23:26:39] <earnestly> emanuele6: See article for what I mean, not in the same sense as createElement(...) type APIs from javascript
[23:26:52] <emanuele6> ok, i will read it
[23:26:57] <earnestly> But yeah, interpolation with escaping will have to do
[23:27:06] <earnestly> Although I like to call it 'encoding'
[23:27:47] <earnestly> Having the possibility for contract enforcement to ensure illegal bytes cannot be present makes it more type-like
[23:30:45] <emanuele6> yes, i understood what you meant before reading the page
[23:31:47] <emanuele6> load the html code as a dom; modify the loaded dom; write the modified dom
[23:33:05] <emanuele6> standard python can't do that afaik, but if i recall correctly modern java versions can do it with standard libraries
[23:33:40] <emanuele6> though that would not have worked in this case since the file is a php file, not a "simple" html file
[23:42:25] *** Joins: tech_exorcist (txrcst@user/tech-exorcist/x-0447479)
