[00:00:02] <FromDiscord> <tandy> im trying to create a func to create a new object which has discriminant fields
[00:00:03] <FromDiscord> <⃟⃟> maybe that should be a compile error or warning
[00:00:26] <FromDiscord> <carpal> sent a code paste, see https://play.nim-lang.org/#ix=3wA1
[00:00:44] <FromDiscord> <haxscramper> okay, so in simple constructor you just need to assign when creating object `result = Obj(kind: <input>)`
[00:00:50] <FromDiscord> <carpal> something:↵xxxx
[00:00:52] <FromDiscord> <carpal> xxxx
[00:00:59] <FromDiscord> <Yardanico> In reply to @carpal "xxxx": it's different
[00:01:01] <FromDiscord> <haxscramper> this ia a language feature called MCS↵(@⃟⃟)
[00:01:03] <FromDiscord> <Yardanico> spaces before f vs no spaces
[00:01:09] <FromDiscord> <carpal> In reply to @Yardanico "it's different": yes
[00:01:24] <FromDiscord> <carpal> but it was a bit funny to see
[00:01:45] <FromDiscord> <Yardanico> In reply to @haxscramper "this ia a language": is it in this case? he's talking about how f without a space binds stronger than f with a space
[00:02:17] <FromDiscord> <haxscramper> whatever this bs is called, mcs/ufcs
[00:02:20] <FromDiscord> <haxscramper> command syntax
[00:02:22] <FromDiscord> <haxscramper> method call syntax
[00:02:27] <FromDiscord> <haxscramper> regular proc call syntax
[00:02:50] <FromDiscord> <haxscramper> command call syntax yes
[00:02:55] <FromDiscord> <⃟⃟> i would want the nim compiler to detect cases like the one i showed
[00:03:18] <FromDiscord> <haxscramper> it is not possible to do since it is not a "case" that can be detected
[00:03:20] <FromDiscord> <haxscramper> both are valid usages
[00:03:36] <FromDiscord> <haxscramper> `echo (12, 2)` is just as justified as `echo(12, 2)`
[00:03:47] <FromDiscord> <haxscramper> or whatewher infix operator you might have added in
[00:04:06] <FromDiscord> <⃟⃟> is that a tuple?
[00:04:09] <FromDiscord> <⃟⃟> vs normal call
[00:04:14] <FromDiscord> <haxscramper> yes
[00:04:30] <FromDiscord> <⃟⃟> so its even more confusing than i thought
[00:04:40] <FromDiscord> <Yardanico> it's more consistent :)
[00:04:46] <FromDiscord> <haxscramper> has space - tuple↵no space - call
[00:05:00] <FromDiscord> <⃟⃟> ok what about this
[00:05:07] <FromDiscord> <⃟⃟> `f (1+2) + 3`
[00:05:13] <FromDiscord> <⃟⃟> is that a tuple with 3 in it
[00:05:25] <FromDiscord> <⃟⃟> or the math `()~
[00:05:26] <FromDiscord> <⃟⃟> (edit) "`()~" => "`()`"
[00:06:33] <FromDiscord> <konsumlamm> that's `f` applied to `(1+2) + 3`
[00:06:57] <FromDiscord> <konsumlamm> command syntax doesn't magically turn everything into tuples
[00:07:15] <FromDiscord> <konsumlamm> but `(a, b)` happens to be the syntax for tuples
[00:07:21] <FromDiscord> <Yardanico> @⃟⃟ have you read https://nim-lang.org/docs/manual.html#procedures-command-invocation-syntax ?
[00:07:31] <FromDiscord> <⃟⃟> i think nim should have it syntax reworked
[00:07:53] <FromDiscord> <konsumlamm> command syntax is very unlikely to change
[00:07:56] <FromDiscord> <Yardanico> In reply to @⃟⃟ "i think nim should": create a forum thread, see if other people agree with you
[00:07:59] <FromDiscord> <Yardanico> (edit) "In reply to @⃟⃟ "i think nim should": create a forum thread, see if other people agree with you ... " 03added "or not"
[00:08:16] <FromDiscord> <haxscramper> I think command syntax is one of the best things in nim
[00:08:20] <pro> evening lads
[00:08:25] <FromDiscord> <haxscramper> no break-the-language-by-making-print-an-operator
[00:08:39] <FromDiscord> <haxscramper> aka python
[00:08:46] <FromDiscord> <haxscramper> eveything is consistent and can be used uniformly
[00:08:49] <FromDiscord> <Yardanico> also await
[00:08:54] <FromDiscord> <haxscramper> echo
[00:09:00] <FromDiscord> <Yardanico> they had to make it a keyword as well
[00:09:30] <FromDiscord> <haxscramper> In reply to @Yardanico "also await": yes, things like await & other stuff that looks and feels like a keyword but does not have to have a special language support
[00:10:43] <FromDiscord> <konsumlamm> ~~and also works worse than if it was builtin, from what i've heard~~
[00:10:49] <FromDiscord> <Yardanico> how so?
[00:11:40] <FromDiscord> <haxscramper> In reply to @konsumlamm "~~and also works worse": it is related to the internal implementation and not syntax but yeah, there were some talks about making async not a macro transform
[00:11:50] <FromDiscord> <haxscramper> but a built-in language feature
[00:12:03] <FromDiscord> <haxscramper> but there are like trillion opinons on that one
[00:12:04] <FromDiscord> <dain> doesnt async pose problems for the garbage collector
[00:12:16] <FromDiscord> <Yardanico> no
[00:12:19] <FromDiscord> <haxscramper> IIRC it creates lots of cycles?
[00:12:27] <FromDiscord> <haxscramper> but that's as far as it goes
[00:12:30] <FromDiscord> <Yardanico> well yes, but i don't think this can be considered a real "problem"
[00:12:40] <FromDiscord> <Yardanico> In reply to @dain "doesnt async pose problems": maybe you read that from people talking about async + orc
[00:12:46] <FromDiscord> <Yardanico> this has been already fixed
[00:12:49] <FromDiscord> <tandy> just if statement?
[00:12:50] <FromDiscord> <tandy> depending on the kind I need to pass in different input though, how would i do that?
[00:12:50] <FromDiscord> <dain> yeah that must have been it
[00:12:50] <FromDiscord> <Yardanico> async doesn't leak with orc
[00:13:41] <FromDiscord> <dain> i want to use nim in something bc it seems so comfy but none of the stuff i work on would benefit from it :S
[00:13:46] <FromDiscord> <enthus1ast> do you know of a ready to use parseStr that parses a nim str but respects simple escaping like\: "
[00:13:53] <FromDiscord> <enthus1ast> \\"
[00:14:00] <FromDiscord> <haxscramper> sent a code paste, see https://play.nim-lang.org/#ix=3wAC
[00:14:12] <FromDiscord> <tandy> ahh
[00:14:12] <FromDiscord> <dain> i just do simple scripting that is almost entirely IO bound, so the extra speed vs python means nothing
[00:14:52] <FromDiscord> <haxscramper> You want to parse simple string literal, or this is related to nim code parsing?
[00:16:40] <FromDiscord> <enthus1ast> i must rewrite the nimja lexer, and it uses constructs like {% extends "fooBaaBaz" %} or {{ """ }}
[00:16:59] <FromDiscord> <enthus1ast> but it should follow the same rules nim uses
[00:17:15] <FromDiscord> <enthus1ast> [Edit](https://discord.com/channels/371759389889003530/371759389889003532/878364434035245057): i must rewrite the nimja lexer, and it uses constructs like {% extends "fooBaaBaz" %} or {{ "\\"" }}
[00:17:34] <FromDiscord> <enthus1ast> at least "foo \\"baa\\" baz"
[00:17:51] <FromDiscord> <enthus1ast> before i roll my own i though i ask you guys \:)
[00:17:58] <FromDiscord> <haxscramper> You can copy one from `compiler/lexer.getStr():~757`
[00:18:22] <FromDiscord> <haxscramper> but I'm not aware of any built-in stdlib implementation that does the same
[00:18:52] <FromDiscord> <haxscramper> I think copying nim lexer part would be the best idea, since you want to reproduce it anyway
[00:19:02] <FromDiscord> <enthus1ast> yeah i must have written 4 or 5 of them all are half assed
[00:19:59] <FromDiscord> <enthus1ast> yeah
[00:20:16] <FromDiscord> <tandy> https://pastebin.com/NqsKFfj8
[00:20:24] <FromDiscord> <tandy> \`Error\: unhandled exception\: 'apiKey' is not accessible using discriminant 'service' of type 'ServiceUser' [FieldDefect]\`
[00:20:36] <FromDiscord> <tandy> i get this error \:(
[00:21:54] <FromDiscord> <Yardanico> show the code?
[00:22:28] <FromDiscord> <tandy> i sent it in the pastebin https://pastebin.com/NqsKFfj8↵(@Yardanico)
[00:22:33] <FromDiscord> <tandy> didnt wanna spam chat
[00:23:02] <FromDiscord> <Yardanico> that should work just fine
[00:23:51] <FromDiscord> <Yardanico> and your pastebin example does indeed compile fine for me
[00:23:53] <FromDiscord> <tandy> strange
[00:24:09] <FromDiscord> <tandy> maybe its somewhere else, il take a look
[00:24:48] <FromDiscord> <Yardanico> you are probably assigning to .apiKey somewhere else without checking if the branch is correct
[00:25:05] <FromDiscord> <Yardanico> well, not assigning, just accessing
[00:25:13] <FromDiscord> <Yardanico> try to search for ".apiKey" in your codebase
[00:26:21] <FromDiscord> <tandy> \`newUser(services = [lastFmUser, listenBrainzUser]).services[lastFm].apiKey\`
[00:26:37] <FromDiscord> <Yardanico> eh what does .services[lastFm] even mean?
[00:26:50] <FromDiscord> <tandy> i missed out some other code
[00:27:04] *** Quits: xxov (~xxov@37.170.239.13) (Ping timeout: 246 seconds)
[00:27:23] <FromDiscord> <tandy> \`\`\`   User\ = ref object     services\\: array[Service, ServiceUser]     playingNow\\: Option[Track]     listenHistory\\: seq[Track]   func newUser\(   services\: array[Service, ServiceUser],   playingNow\: Option[Track] = none(Track),   listenHistory\: seq[Track] = @[])\: User =   ## Create new User object   new(result)   result.services = services   result.playingNow = playingNow   result.listenHistory = listenHistory \`\`\`
[00:28:02] <FromDiscord> <tandy> https://pastebin.com/vkKfVh2E
[00:29:08] <FromDiscord> <Yardanico> uhh, do your Users always have both services?
[00:29:16] <FromDiscord> <tandy> \`listenBrainzUser = newServiceUser(service = listenBrainz,  username = "tandy1000")\`
[00:30:32] <FromDiscord> <Yardanico> but your newUser proc from that pastebin doesn't take a services array
[00:30:44] <FromDiscord> <Yardanico> can you post more code, I'm still quite confused
[00:30:54] <FromDiscord> <Yardanico> i understand that you want to have a single user with one or more ServiceUsers attached to it
[00:40:00] <FromDiscord> <tandy> im post the github repo↵(@Yardanico)
[00:41:05] <FromDiscord> <tandy> https://github.com/Listen2gether/website
[00:41:08] <nrds> <04prestigebot99> 4GitHub: 7"Sync your listens on Last.fm and ListenBrainz with other people."
[00:41:30] <FromDiscord> <tandy> \`nim c -r src/listentogether.nim\`
[00:41:43] <FromDiscord> <tandy> oh shit leme push actualy
[00:43:43] *** Quits: pro (~pro@user/pro) (Quit: WeeChat 3.2)
[00:44:44] <FromDiscord> <Yardanico> have you pushed yet?
[00:46:53] <FromDiscord> <tandy> done↵(@Yardanico)
[00:47:36] <FromDiscord> <Yardanico> and where does the error happen?
[00:48:17] <FromDiscord> <Yardanico> i mean file and line
[00:48:24] <FromDiscord> <tandy> \`nim c -r src/listentogether.nim\`↵(@Yardanico)
[00:50:10] *** Quits: flynn (~mcbloch@user/flynn) (Read error: Connection reset by peer)
[00:50:27] <FromDiscord> <Yardanico> newUser(services = [listenBrainzUser])
[00:51:13] <FromDiscord> <Yardanico> you have array[Service, ServiceUser] argument in your newUser which means that it can only accepts an array with two values both at the same time
[00:51:18] *** Joins: flynn (~mcbloch@user/flynn)
[00:51:23] <FromDiscord> <Yardanico> you can't pass an array with only one value to it
[00:51:35] <FromDiscord> <tandy> oh
[00:51:47] <FromDiscord> <Yardanico> you can for example make it a seq instead of an array
[00:52:10] <FromDiscord> <Yardanico> also, do you only need two of these services or plan to expand it to more services later on?
[00:52:47] <FromDiscord> <tandy> oh it somehow started compiling
[00:53:20] <FromDiscord> <tandy> this, i dont think i will need to, because there arent really other services, but i want to design it to be expandable↵(@Yardanico)
[00:53:38] <FromDiscord> <Yardanico> ah okay, then you can just keep it as a seq
[00:53:43] <FromDiscord> <Yardanico> is this spam or not? 🤔 https://media.discordapp.net/attachments/371759389889003532/878373753661308968/unknown.png
[00:53:45] <FromDiscord> <Yardanico> seems like it's not
[00:54:23] <FromDiscord> <tandy> but then i cant index it by service↵(@Yardanico)
[00:55:25] <FromDiscord> <tandy> wait the error is back
[00:55:35] <FromDiscord> <tandy> its the indexing issue, i pushed it
[00:58:22] <FromDiscord> <Yardanico> because you're missing an argument
[00:58:31] <FromDiscord> <Yardanico> newSyncLastFM expects two string arguments at minimum, you're only passing one
[00:59:12] <FromDiscord> <tandy> this is the error though \`Error\: unhandled exception\: 'apiKey' is not accessible using discriminant 'service' of type 'ServiceUser' [FieldDefect]\`
[00:59:53] <FromDiscord> <tandy> also, the other args are optional↵(@Yardanico)
[00:59:57] <FromDiscord> <Yardanico> no
[01:00:03] <FromDiscord> <Yardanico> your first two are required
[01:00:16] <FromDiscord> <tandy> oh you might need to update to head
[01:00:16] <FromDiscord> <Yardanico> apiKey, apiSecret: string; sessionKey: string = "" means that first two are required
[01:00:24] <FromDiscord> <Yardanico> as to your issue, you actually don't create the array correctly
[01:00:55] <FromDiscord> <tandy> ohh
[01:01:02] <FromDiscord> <tandy> il look into that
[01:02:07] <FromDiscord> <Yardanico> @tandy in mirroredUser you should pass services as [listenBrainz: listenBrainzUser, lastFm: lastFmUser]
[01:02:39] <FromDiscord> <Yardanico> and IMO a "cleaner" way would be to have newUser accept services as a seq and then add them to an array inside of a loop with a case, but that's not needed in your case since I doubt you'll be actually calling newUser in a lot of places
[01:03:09] <FromDiscord> <Yardanico> array[Service, ServiceUser] means that your array is indexed by Service, and the first value here is listenBrainz
[01:03:36] <FromDiscord> <Yardanico> so when you did services[lastFm] before you actually accessed the listenBrain'z ServiceUser since you had [lastFmUser, listenBrainzUser]
[01:05:22] <FromDiscord> <tandy> oh thats a good idea↵(@Yardanico)
[01:05:38] *** Quits: max22- (~maxime@2a01cb0883359800cbecd55f609f62e2.ipv6.abo.wanadoo.fr) (Quit: Leaving)
[01:05:42] <FromDiscord> <Yardanico> but as I said, that'll be be cleanliness for the sake of cleanliness :)
[01:06:09] <FromDiscord> <Yardanico> since your listen2gether isn't a library so you'll only have it a few times in the code at max
[01:06:17] <FromDiscord> <tandy> true
[01:06:56] <FromDiscord> <tandy> thanks for your help
[01:16:23] <FromDiscord> <tandy> i wish a library like https://github.com/gruns/icecream for nim
[01:16:26] <nrds> <04prestigebot99> 4GitHub: 7"🍦 Never use print() to debug again."
[01:16:35] <FromDiscord> <tandy> i wish there was\
[01:18:41] <nrds> <06Prestige99> You could make it ;)
[01:19:18] <FromDiscord> <InventorMatt> That would be pretty trivial to implement in nim with a macro
[01:19:30] <nrds> <06Prestige99> ^^^
[01:19:33] <FromDiscord> <Elegantbeef> Seems like a lot of work for something that exists
[01:19:35] <nrds> <06Prestige99> Looks neat, too
[01:19:40] <FromDiscord> <Elegantbeef> https://github.com/treeform/print
[01:19:43] <nrds> <04prestigebot99> 4GitHub: 7"Print is a set of pretty print macros, useful for print-debugging."
[01:21:26] <FromDiscord> <tandy> looks good, does it support json pretty printing?
[01:22:42] <FromDiscord> <Elegantbeef> I dont know i'm not a  jsonologis
[01:23:17] <FromDiscord> <tandy> lol
[01:23:26] <FromDiscord> <tandy> it doesnt sadly
[01:23:44] <FromDiscord> <Yardanico> In reply to @tandy "looks good, does it": nim's json module can pretty-format json
[01:23:58] <FromDiscord> <Yardanico> https://nim-lang.org/docs/json.html#pretty%2CJsonNode%2Cint
[01:41:43] *** Joins: max22- (~maxime@2a01cb0883359800d7aef926ed8068bd.ipv6.abo.wanadoo.fr)
[01:44:07] *** Quits: max22- (~maxime@2a01cb0883359800d7aef926ed8068bd.ipv6.abo.wanadoo.fr) (Client Quit)
[01:53:09] *** Joins: max22- (~maxime@2a01cb0883359800fb3e1b3ddb98b238.ipv6.abo.wanadoo.fr)
[01:59:17] *** Quits: max22- (~maxime@2a01cb0883359800fb3e1b3ddb98b238.ipv6.abo.wanadoo.fr) (Quit: Leaving)
[02:00:26] <FromDiscord> <rishavs (Rishav Sharan)> @treeform does https://github.com/treeform/pg being maintained?
[02:00:28] <nrds> <04prestigebot99> 4GitHub: 7"Very simple PostgreSQL async api for nim."
[02:10:36] *** Joins: max22- (~maxime@2a01cb0883359800036e890ebcdf772b.ipv6.abo.wanadoo.fr)
[02:11:45] <FromDiscord> <tandy> how can i test if my jsony hooks are working?
[02:11:59] *** Quits: max22- (~maxime@2a01cb0883359800036e890ebcdf772b.ipv6.abo.wanadoo.fr) (Client Quit)
[02:12:15] <FromDiscord> <tandy> some object in object json isnt being parsed
[02:18:48] *** Quits: Vladar (~Vladar@46.162.2.53) (Quit: Leaving)
[02:25:36] <FromDiscord> <Fractal> @Fractal happy Bday
[02:27:54] <FromDiscord> <Yardanico> wat
[02:30:59] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:a540:64ec:8bf6:ef78) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[02:32:36] <madprops> is creating procs inside a proc a bad idea, performance wise?
[02:33:32] <FromDiscord> <Elegantbeef> Should be the same regardless
[02:34:14] <madprops> I just have a short one like
[02:34:17] <madprops> proc cs(s: string): string = capitalizer(s, string_mode)
[02:34:42] <madprops> but it's inside a proc that could be called a lot
[02:35:22] <madprops> so I'm just wondering if the process of building procs is expensive
[02:35:25] <madprops> but I guess not
[02:37:42] <FromDiscord> <Elegantbeef> Well you may want to add `{.inline.}` to that proc definition to increase the likelyhood of being inlined, or even make it a `template` instead
[02:40:29] *** Joins: max22- (~maxime@2a01cb0883359800eed07df83c56ed19.ipv6.abo.wanadoo.fr)
[03:18:40] *** Quits: cyraxjoe (~joe@201.150.5.24) (Quit: No Ping reply in 210 seconds.)
[03:20:01] *** Joins: cyraxjoe (~joe@201.159.98.32)
[03:32:13] *** Quits: flynn (~mcbloch@user/flynn) (Read error: Connection reset by peer)
[03:33:20] *** Joins: flynn (~mcbloch@user/flynn)
[03:41:53] *** Quits: max22- (~maxime@2a01cb0883359800eed07df83c56ed19.ipv6.abo.wanadoo.fr) (Remote host closed the connection)
[05:06:17] *** Quits: pch (~pch@66.49.131.33) (Ping timeout: 248 seconds)
[05:07:22] <FromDiscord> <codic> it would almost definitely be inlined in release build
[05:07:25] <FromDiscord> <codic> builds
[05:07:43] *** Joins: pch (~pch@66.49.131.33)
[06:17:33] *** Quits: Jjp137 (~Jjp137@2603-8000-2a01-3406-92fb-a6ff-fee2-6861.res6.spectrum.com) (Quit: Leaving)
[06:17:41] *** Joins: Jjp137 (~Jjp137@2603-8000-2a01-3406-92fb-a6ff-fee2-6861.res6.spectrum.com)
[06:22:00] <FromDiscord> <Ricky Spanish> Anyone know if you can use a in memory file descriptor as a full file input to a command u want to execute? I have a binary that requires a - f flag so requires a full path and can't pipe input, is it possible to pass it a memfd instead?
[06:31:00] *** Quits: arkurious (~arkurious@user/arkurious) (Quit: Leaving)
[06:36:30] *** Quits: ecs (~ecs@user/ecs) (Ping timeout: 245 seconds)
[06:36:30] *** Quits: blackbeard420 (~blackbear@blackbeard420.me) (Ping timeout: 245 seconds)
[06:36:33] *** Joins: blackbeard420 (~blackbear@2600:3c03:e000:297::)
[06:37:12] *** Quits: lucerne (~lucerne@ip202.ip-51-178-215.eu) (Ping timeout: 245 seconds)
[06:37:28] *** Joins: ecs (ecs@user/ecs)
[06:38:10] *** Joins: lucerne (~lucerne@ip202.ip-51-178-215.eu)
[06:38:32] <FromDiscord> <deech> Aside from the Nim forum are there any publicly accessible sites that use the js backend?
[06:39:20] <FromDiscord> <deech> Trying to get a feel for payload size and what the resulting JS looks like.
[06:40:49] <FromDiscord> <Elegantbeef> It's not too bad, it's not minified though
[06:41:08] <FromDiscord> <Elegantbeef> You can make a relatively simple nim program and then `nim js -d:release` on it
[06:42:10] <FromDiscord> <deech> I've done that for small things. Just wondered if there were any in the wild I could explore.
[06:43:26] <FromDiscord> <Elegantbeef> Could checkout impbox and my games
[06:43:30] <FromDiscord> <Elegantbeef> But aside from that idk
[06:45:33] <FromDiscord> <deech> Cool! Can you link some of your stuff?
[06:46:10] <FromDiscord> <Elegantbeef> https://itch.io/c/1064082/games-made-with-nico dont know if burger stack uses wasm or js, but most of the stuff here is going to be js
[06:46:59] <FromDiscord> <Elegantbeef> Some of impbox's games are open source so you could see the non itch minified code
[06:47:02] <FromDiscord> <Elegantbeef> Forgot it minified it
[07:03:14] <FromDiscord> <xflywind> see also https://stardust.dev/play/client.js?t=1627224317
[07:03:27] <FromDiscord> <xflywind> nim js + closure compiler
[07:40:09] <FromDiscord> <impbox [ftsf]> The js output is not particularly readable, but you can debug it in browser easily
[08:05:07] *** Joins: pch_ (~pch@66.49.131.33)
[08:05:08] *** Quits: pch (~pch@66.49.131.33) (Read error: Connection reset by peer)
[08:36:01] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.2)
[08:36:30] *** Joins: supakeen (~user@python/site-packages/supakeen)
[09:50:14] *** Joins: pro (~pro@user/pro)
[10:02:25] *** pch_ is now known as pch
[10:38:11] <FromDiscord> <treeform> In reply to @Sorrow "Just a basic script": If you are on windows and only using http client to make simple http calls and don't want dll dependencies on the libssl.dll and the libeay64.dll try out my library https://github.com/treeform/puppy which just uses the windows API to fetch stuff from URLs. It does not require any external dlls.
[10:38:14] <nrds> <04prestigebot99> 4GitHub: 7"Puppy fetches HTML pages for Nim."
[10:40:33] <FromDiscord> <treeform> In reply to @rishavs (Rishav Sharan) "@treeform does https://github.com/treeform/pg being": I use it in production. Did you find a bug?
[10:40:34] <nrds> <04prestigebot99> 4GitHub: 7"Very simple PostgreSQL async api for nim."
[10:40:53] <FromDiscord> <treeform> In reply to @tandy "it doesnt sadly": I should add that.
[10:42:23] <FromDiscord> <treeform> In reply to @tandy "how can i test": I usually add print statements into the hooks, if its rough tough I also throw a quit() in there.
[10:44:04] <FromDiscord> <treeform> sent a code paste, see https://play.nim-lang.org/#ix=3wBq
[10:46:35] <FromDiscord> <treeform> In reply to @Chiggy "looks like jsony doesnt": You right it does not, I could make that better.
[10:50:56] *** Joins: beshr (~beshr@user/beshr)
[11:02:16] <FromDiscord> <Chiggy> In reply to @treeform "You right it does": That would be pretty sweet. Currently I am just using the dump hook and manually appending data to string. It doesnt matter much tho
[11:04:28] *** Joins: xxov (~xxov@37.172.140.16)
[11:17:57] <FromDiscord> <JSONBash> @treeform does jsony have equivalents to the std/json JsonNode types? Use case is explicit conversion in a case statement
[11:21:19] <FromDiscord> <treeform> jsony uses the std/json JsonNode types, so they are interchangeable.
[11:22:37] <FromDiscord> <treeform> jsony's fromJson() will give you a JsonNode, same as std/json parseJson will.
[11:23:42] <FromDiscord> <JSONBash> Ohhh sweeeeet thanks !
[11:24:42] <FromDiscord> <treeform> See https://github.com/treeform/jsony#full-support-for-json-in-json you can parse the parts that are regular (or that you know about as objects) but parse things that are strange, hard to parse or unknown as JsonNode.
[11:24:43] <nrds> <04prestigebot99> 4GitHub: 7"A loose, direct to object json parser with hooks."
[11:26:11] <FromDiscord> <JSONBash> If I understand, toJson return JsonNode and I could do .getStr()?
[11:27:41] <FromDiscord> <JSONBash> Yeah I obviously can, once it’s a JsonNode it’s a JsonNode
[11:28:39] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:a540:64ec:8bf6:ef78)
[11:49:01] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:a540:64ec:8bf6:ef78) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[11:56:36] <FromDiscord> <treeform> Yep
[12:09:22] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:a540:64ec:8bf6:ef78)
[12:16:26] *** Joins: max22- (~maxime@2a01cb08833598004c5850084f100c42.ipv6.abo.wanadoo.fr)
[12:19:07] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:a540:64ec:8bf6:ef78) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[12:26:40] *** Quits: xxov (~xxov@37.172.140.16) (Ping timeout: 246 seconds)
[12:28:26] *** Joins: xxov (~xxov@37.164.174.190)
[12:46:21] *** Quits: xet7 (~xet7@user/xet7) (Remote host closed the connection)
[12:47:11] *** Joins: xet7 (~xet7@user/xet7)
[13:04:00] *** Parts: KurtGodel (~AdiIRC@180.150.11.50) (Closing Window)
[13:21:02] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:a540:64ec:8bf6:ef78)
[13:31:50] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:a540:64ec:8bf6:ef78) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[13:56:37] <FromDiscord> <rishavs (Rishav Sharan)> > I use it in production. Did you find a bug?↵No bug @treeform . I had added the nim stdlib test to techempower but the performance, mainly due to a lack of async drivers, was bad. Wondering if your pg drivers have better perf than db\_postgres and if you have benchmarked the two
[14:02:40] *** Quits: kayabaNerve (~kayabaNer@user/kayabanerve) (Ping timeout: 252 seconds)
[14:23:20] *** Joins: kayabaNerve (~kayabaNer@user/kayabanerve)
[14:24:28] *** Quits: flynn (~mcbloch@user/flynn) (Read error: Connection reset by peer)
[14:25:35] *** Joins: flynn (~mcbloch@user/flynn)
[14:36:13] *** Quits: xxov (~xxov@37.164.174.190) (Quit: Client closed)
[15:22:14] <FromDiscord> <PsychoClay> sent a code paste, see https://paste.rs/Z2v
[15:45:04] <FromDiscord> <Rika> repr of a channel?
[15:45:21] <FromDiscord> <Rika> did you mean recv?
[15:45:26] <FromDiscord> <PsychoClay> no
[15:45:41] <FromDiscord> <Rika> what do you expect to get from repr of a channel?
[15:45:45] <FromDiscord> <PsychoClay> if its a Channel[string] or Channel[int] it works
[15:45:55] <FromDiscord> <PsychoClay> just not Channel[SomeObject]
[15:46:00] <FromDiscord> <Rika> In reply to @Rika "what do you expect": .
[15:46:08] <FromDiscord> <PsychoClay> idk some text
[15:46:20] <FromDiscord> <PsychoClay> i just dont understand why it would crash
[15:47:01] <FromDiscord> <PsychoClay> also if u dont call send first it doesnt crash
[15:48:53] <FromDiscord> <Rika> perhaps a bug with repr, but i dont think this would be classified as high priority
[15:49:10] *** Quits: flynn (~mcbloch@user/flynn) (Read error: Connection reset by peer)
[15:50:06] <FromDiscord> <Rika> no segfault if i remove the `id` field
[15:50:26] *** Joins: flynn (~mcbloch@user/flynn)
[15:50:28] <FromDiscord> <Rika> or the `target` field
[15:50:49] <FromDiscord> <Rika> ah wait i think that has to do with the single-field object optimisation or something
[15:58:25] <FromDiscord> <PsychoClay> maybe i should just make my own channel implementation
[15:58:47] <FromDiscord> <Rika> i dont see how getting the repr of a channel is important
[15:58:59] <FromDiscord> <Rika> and it's hard to get channels right i'm led to believe
[15:59:24] <FromDiscord> <PsychoClay> its just a queue with a lock right?
[16:17:29] *** Joins: Vladar (~Vladar@46.162.2.53)
[16:22:44] <FromDiscord> <dain> https://nim-lang.org/docs/manual.html#methods↵↵can someone explain the purpose of this? I don't understand why we need to use dynamic dispatch here. surely all the types are known in the code snippet? why couldn't eval just be defined as a number of procs with different signatures?
[16:23:26] <FromDiscord> <Rika> its just an example
[16:25:02] *** Quits: max22- (~maxime@2a01cb08833598004c5850084f100c42.ipv6.abo.wanadoo.fr) (Ping timeout: 245 seconds)
[16:25:57] <FromDiscord> <dain> oh
[16:26:01] <FromDiscord> <dain> so where would you use it
[16:28:47] <FromDiscord> <haxscramper> eval on `seq[Expression]` or something like that
[16:28:47] <FromDiscord> <haxscramper> Or `parse(): Expresssion`
[16:36:02] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.2)
[16:36:31] *** Joins: supakeen (~user@python/site-packages/supakeen)
[17:25:15] *** Joins: arkurious (~arkurious@user/arkurious)
[17:45:42] <NimEventer> New thread by Alexeypetrushin: Nim stability problem, change imports slightly, and you program is broken, see https://forum.nim-lang.org/t/8347
[18:01:51] <FromDiscord> <planetis> i feel his pain thats also my most annoying nim bug
[18:05:11] <FromDiscord> <planetis> i was trying to overload supportsCopyMem the other day, still havent figured it out
[18:19:49] <NimEventer> New thread by Kalbhairab: Recursive function not working, see https://forum.nim-lang.org/t/8348
[18:38:55] *** Joins: jjido (~Denis@2a01:4b00:80e2:7100:94f3:a79f:8eb9:c547)
[18:51:37] *** Quits: jjido (~Denis@2a01:4b00:80e2:7100:94f3:a79f:8eb9:c547) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[19:25:18] *** Joins: jjido (~Denis@2a01:4b00:80e2:7100:94f3:a79f:8eb9:c547)
[19:32:40] *** Joins: max22- (~maxime@2a01cb08833598005d2c299cc1335a53.ipv6.abo.wanadoo.fr)
[19:37:15] <FromDiscord> <dankrad> sent a code paste, see https://play.nim-lang.org/#ix=3wBF
[19:48:24] <FromDiscord> <dankrad> well, i got it working
[20:21:28] <FromDiscord> <xflywind> what does "wrt" mean in Nim docs? Does it mean "with regard to"?
[20:22:09] <FromDiscord> <xflywind> For instance: `brOpen,              ## open wrt overloaded symbols`
[20:22:22] <FromDiscord> <xflywind> How to understand it?
[20:23:14] <FromDiscord> <xflywind> (edit) "understand" => "explain"
[20:28:26] *** Joins: Vladar_ (~Vladar@46.162.2.53)
[20:28:35] *** Quits: Vladar_ (~Vladar@46.162.2.53) (Client Quit)
[20:35:04] <FromDiscord> <Sorrow> In reply to @treeform "If you are on": Will check it out soon, thanks.
[20:49:32] <FromDiscord> <treeform> In reply to @rishavs (Rishav Sharan) "> I use it": I have not bench marked my `pg` lib vs std `db_postgres`. `pg` is just a simple wrapper around the std `db_postgres` lib that ads async (its just 100 lines https://github.com/treeform/pg/blob/master/src/pg.nim ). I don't think it will be faster in absolute sense. PostgreSQL has a complex story with parallelism usually its the bottleneck. I would use PostgreSQL perf tools increase perfo
[21:16:07] <FromDiscord> <⃟⃟> i feel this language should have some major changes
[21:16:13] <FromDiscord> <⃟⃟> perhaps a major version 2
[21:16:59] <FromDiscord> <⃟⃟> i would rework the syntax and standard library
[21:18:44] <FromDiscord> <konsumlamm> feel free to write an RFC about what you think should be changed
[21:18:49] <FromDiscord> <Rika> You are free to fork the language and work on your improvements
[21:19:01] <FromDiscord> <konsumlamm> there definitely will be a version 2, but it likely won't have any huge changes
[21:19:05] <FromDiscord> <⃟⃟> if i did it alone it would take me too long
[21:19:12] <FromDiscord> <⃟⃟> how do i make that thing you said
[21:19:36] <FromDiscord> <konsumlamm> you open an issue here: https://github.com/nim-lang/RFCs
[21:19:39] <nrds> <04prestigebot99> 4GitHub: 7"A repository for your Nim proposals."
[21:19:42] <FromDiscord> <⃟⃟> i dont use that website
[21:19:55] <FromDiscord> <konsumlamm> that website called github?
[21:19:57] <FromDiscord> <⃟⃟> yes
[21:20:11] <FromDiscord> <konsumlamm> you'll have trouble changing anything about Nim then
[21:20:26] <FromDiscord> <haxscramper> what is wrong with the syntax reaally
[21:20:43] <FromDiscord> <haxscramper> just couple things that you need get used to, like `f (a, b)` vs `f(a, b)`
[21:20:53] <FromDiscord> <Rika> You can try using the forum
[21:20:59] <FromDiscord> <⃟⃟> and also `f (a)`
[21:21:05] <FromDiscord> <⃟⃟> knowing that this is not a tuple
[21:21:20] <FromDiscord> <haxscramper> and reworking of the standard library (certain modules) has already been discussed in seveal placed and it is a known problem
[21:21:23] <FromDiscord> <Rika> Why would  it be?
[21:21:26] <FromDiscord> <haxscramper> specifically os/json modules
[21:21:35] <FromDiscord> <⃟⃟> because `f (a, b)` is
[21:21:36] <FromDiscord> <konsumlamm> why on earth should `(a)` be a tuple
[21:21:44] <FromDiscord> <konsumlamm> that's not the logic behind this
[21:21:46] <FromDiscord> <Rika> The comma makes the tuple
[21:21:51] <FromDiscord> <Rika> Not the parentheses
[21:21:59] <FromDiscord> <konsumlamm> ^ the space doesn't magically turn arguments into a tuple
[21:22:11] <FromDiscord> <⃟⃟> so the comma is some kind of operator?
[21:22:11] <FromDiscord> <konsumlamm> it just happens to be the same syntax as for function calls
[21:22:14] <FromDiscord> <Rika> No
[21:22:29] <FromDiscord> <Rika> Well you can treat it like such if you want
[21:22:40] <FromDiscord> <⃟⃟> `f a,b` does this work?↵`f a,` this?
[21:23:04] <FromDiscord> <konsumlamm> first yes, but it means `f(a, b)`
[21:23:08] <FromDiscord> <konsumlamm> second idk, try it
[21:23:14] <FromDiscord> <haxscramper> second is a syntax error
[21:23:19] <FromDiscord> <haxscramper> !eval f a,
[21:23:22] <NimBot> Compile failed: /usercode/in.nim(1, 5) Error: invalid indentation
[21:23:27] <FromDiscord> <⃟⃟> all these rules are reminding me of c++
[21:23:39] <FromDiscord> <Rika> The rules are the same in Python
[21:23:45] <FromDiscord> <⃟⃟> i dont like python
[21:23:50] <FromDiscord> <Rika> Save for the function call syntax
[21:23:58] <FromDiscord> <Rika> Then you are using the wrong language I would be led to believe
[21:23:58] <FromDiscord> <haxscramper> except you have magic `print` "operator" and other things that don't work like this
[21:24:40] <FromDiscord> <⃟⃟> pythons (3) syntax is confusing in other ways
[21:24:50] <FromDiscord> <Rika> If you want to make really radical changes to Nim, either do them yourself or somehow convince everyone else working with it to implement the changes
[21:24:54] <FromDiscord> <⃟⃟> nim seems to have avoided those but now introduced other problems
[21:25:12] <FromDiscord> <Rika> Striving for perfection is tedious
[21:26:42] <FromDiscord> <haxscramper> sent a code paste, see https://play.nim-lang.org/#ix=3wC2
[21:27:05] <FromDiscord> <⃟⃟> the last two are doing different things
[21:27:13] <FromDiscord> <Rika> They aren’t, try it
[21:27:16] <FromDiscord> <haxscramper> the last two are doing the same thing
[21:27:52] <FromDiscord> <haxscramper> it just shows that you can pass arguments to the `.echo` the same way
[21:27:58] <FromDiscord> <haxscramper> as any regular proc invocation
[21:28:06] <FromDiscord> <⃟⃟> so that isnt calling echo with 2 strings instead of 1 ?
[21:28:24] <FromDiscord> <Rika> Ah
[21:28:35] <FromDiscord> <Rika> That’s what you mean
[21:28:48] <FromDiscord> <Rika> That is right, it is with two parameters instead of one
[21:28:50] <FromDiscord> <haxscramper> it shows that you can pass arguments to the proc using dot sntax
[21:29:09] <FromDiscord> <haxscramper> `echo("hello", " world")` `echo "hello", " world"`
[21:29:09] <FromDiscord> <⃟⃟> im already familiar with this ufcs feature cause of D
[21:29:21] <FromDiscord> <haxscramper> so what is the problem then?
[21:29:38] <FromDiscord> <⃟⃟> just because i know how it works dosent meant i like it
[21:29:41] <FromDiscord> <Rika> The command syntax is probably his issue
[21:29:50] <FromDiscord> <haxscramper> command syntax and tuples
[21:30:05] <FromDiscord> <Rika> I don’t understand, no language fits your liking perfectly unless you make it yourself
[21:30:33] <FromDiscord> <konsumlamm> it probably won't even fit then
[21:31:13] <FromDiscord> <haxscramper> sent a code paste, see https://play.nim-lang.org/#ix=3wC7
[21:31:43] <FromDiscord> <⃟⃟> from what i understand nim dosent have methods so ufcs is probably not that big of a concern actually
[21:31:47] <FromDiscord> <⃟⃟> but the tuple thing
[21:31:51] <FromDiscord> <⃟⃟> and the omitting ()
[21:32:03] <FromDiscord> <haxscramper> it is super useful
[21:32:11] <FromDiscord> <Rika> Just don’t use the syntax if you don’t like it
[21:32:21] <FromDiscord> <⃟⃟> thats not a valid response
[21:32:25] <FromDiscord> <Rika> Why not
[21:32:40] <FromDiscord> <haxscramper> what is problematic? you personally don't like this feature while everyone else seemsm to like it very mych
[21:32:45] <FromDiscord> <⃟⃟> do you think im not going to be reading code that uses it?
[21:32:54] <FromDiscord> <Rika> Then do not use Nim.
[21:33:09] <FromDiscord> <⃟⃟> id rather just have them fix the problems than ditch the language
[21:33:19] <FromDiscord> <haxscramper> that is not a problem
[21:33:24] <FromDiscord> <Rika> They are YOUR PERSONAL PROBLEMS
[21:33:28] <FromDiscord> <haxscramper> ^
[21:33:39] <FromDiscord> <Rika> I will no longer entertain you, goodbye
[21:33:45] <FromDiscord> <konsumlamm> if you really want this to change, write an RFC
[21:33:59] <FromDiscord> <konsumlamm> if you don't want to write an RFC because github bad, then you're out of luck, i'm sorry
[21:34:37] <FromDiscord> <haxscramper> idk it is really annoying when someone comes around and starts throwing suggestions/talks about nim being "broken", "weird syntax", having "latent bugs" and "weird semantics" and points out exact parts of the language(
[21:34:50] <FromDiscord> <haxscramper> that are really the foundation of a syntax etc
[21:34:51] <FromDiscord> <Rika> In reply to @Rika "I will no longer": Because I’ve gotten too mad, if you wonder why
[21:35:02] <FromDiscord> <haxscramper> like style insensetivity, indentiation, ufcs, variable shadowing
[21:35:36] <FromDiscord> <haxscramper> i understand when people shit on async, threading and error messages
[21:35:36] <FromDiscord> <konsumlamm> yo guys, i think we should change Nim to have C like syntax, instead of this indentation sensitive crap /s
[21:35:42] <FromDiscord> <⃟⃟> please no
[21:35:48] <FromDiscord> <⃟⃟> C syntax is
[21:35:51] <FromDiscord> <⃟⃟> :|
[21:36:13] <FromDiscord> <codic> c syntax is awesome
[21:36:13] <FromDiscord> <haxscramper> but I like curly delimiters more
[21:36:15] <arkanoid> I'm dealing with an XmlNode.items that returns a nil. I think that this might be a bug in xmltree
[21:36:19] <FromDiscord> <codic> but if you don't like what nim is, use another language
[21:36:29] <FromDiscord> <codic> or propose the changes to fix it for you
[21:36:29] <FromDiscord> <⃟⃟> i would like `{}` too
[21:36:30] <FromDiscord> <haxscramper> like seriously, and it makes easier to write pretty-printers
[21:36:46] <FromDiscord> <haxscramper> and parse with tree-sitter etc. as well
[21:36:48] <FromDiscord> <⃟⃟> makes you think more about the structure of the code
[21:37:05] <FromDiscord> <konsumlamm> btw, since you apparently know D, what made you try out Nim?
[21:37:41] <FromDiscord> <⃟⃟> because D has so much it confuses me
[21:38:14] <FromDiscord> <⃟⃟> if i start looking into it i learn some new feature or something
[21:38:21] <FromDiscord> <⃟⃟> started feeling like c++
[21:38:52] <FromDiscord> <Rika> I’ve cooled down
[21:38:53] <FromDiscord> <haxscramper> nim has a lot of features too, though they don't fell like "lets dump together everything at once"
[21:39:05] <FromDiscord> <haxscramper> macros ...
[21:39:08] <FromDiscord> <Rika> If you really want, the best you can do is to make a tool to enforce styles
[21:39:26] <FromDiscord> <⃟⃟> does it have a spec i can read?
[21:39:35] <FromDiscord> <Rika> But then don’t expect people to follow you in fixing the “problems”
[21:39:38] <FromDiscord> <dom96> In reply to @haxscramper "i understand when people": We shouldn't "shit on" anything, instead have constructive arguments for how things could be better
[21:39:59] <FromDiscord> <haxscramper> ye, of course everyone should be good, and all, etc etc.
[21:40:21] <FromDiscord> <haxscramper> nobody should ever get emotional over anything
[21:40:24] <FromDiscord> <haxscramper> but it happens sometimes
[21:40:49] <FromDiscord> <dom96> true
[21:41:00] <FromDiscord> <haxscramper> In reply to @⃟⃟ "does it have a": nim https://nim-lang.org/docs/manual.html is closes to the spec you can get
[21:41:11] <FromDiscord> <haxscramper> also compiler test suite and unit tests
[21:41:27] <FromDiscord> <haxscramper> don't have C++ level of spec right now
[21:41:47] *** Quits: jjido (~Denis@2a01:4b00:80e2:7100:94f3:a79f:8eb9:c547) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[21:41:54] <FromDiscord> <Rika> In reply to @Rika "If you really want,": Perhaps we should make the tool to appease this audience, but then that may spawn many unwarranted issues and whatsoever
[21:42:09] <FromDiscord> <haxscramper> `import compiler/`
[21:42:13] <FromDiscord> <Rika> So far we only have one for NEP
[21:42:57] <FromDiscord> <haxscramper> In reply to @haxscramper "`import compiler/`": https://github.com/haxscramper/hack/blob/master/testing/nim/compilerapi/pattern_linter.nim @⃟⃟  if you want to write own compiler-based tools for syntax
[21:44:33] <FromDiscord> <haxscramper> Good thing about nim is that you can actually use compiler API without begin CS professor
[21:46:13] <FromDiscord> <⃟⃟> looking at this manual there are alot of things i like and some i dont like
[21:46:27] <FromDiscord> <haxscramper> well, that is expected
[21:46:39] <FromDiscord> <haxscramper> I think everyone could say this
[21:46:46] <FromDiscord> <Rika> Yes
[21:47:03] <FromDiscord> <haxscramper> I'm not a big fan of `Defect` existing
[21:47:39] <FromDiscord> <⃟⃟> for some things they just give you the algorithm instead of explaining it in words (and they also say its pseudo code...)
[21:48:25] <FromDiscord> <Rika> Docs are plenty lacking yes
[21:48:39] <FromDiscord> <⃟⃟> also what is `{a,b,c}`
[21:48:54] <FromDiscord> <Rika> Set
[21:50:22] <FromDiscord> <haxscramper> In reply to @⃟⃟ "for some things they": Actually it is problematic because people who write manual can't really know if it is simple enough
[21:50:48] <FromDiscord> <haxscramper> Sadly you don't use github, but you can at least make a forum post and ask for clarifications for example
[21:51:16] <FromDiscord> <haxscramper> Not "this part is bad" but something ... I'm sure I don';t need to explain in detail how to ask questions
[21:51:16] <FromDiscord> <⃟⃟> the docs also use `{| |}` for scopes
[21:51:21] <FromDiscord> <⃟⃟> confused me
[21:51:29] <FromDiscord> <⃟⃟> not sure if thats even valid syntax or what
[21:51:45] <FromDiscord> <haxscramper> This is not a valid syntax
[21:52:03] <FromDiscord> <haxscramper> It does it for if statement only,
[21:52:25] <FromDiscord> <⃟⃟> should be removed
[21:52:35] <FromDiscord> <haxscramper> and replaced with?
[21:53:01] <FromDiscord> <⃟⃟> why does it need to be there ?
[21:53:28] <FromDiscord> <haxscramper> well, because if statement introduces new scope, and some templates like `=~` from re module make use of that feature
[21:53:53] <FromDiscord> <haxscramper> it is more like - it could be moved to separate section that also includes shadow stack
[21:53:59] <FromDiscord> <haxscramper> and how it interacts with things
[21:54:14] <FromDiscord> <haxscramper> and use something more distinctive, and not `{|`
[21:54:46] <FromDiscord> <⃟⃟> by this point of the manual i dont think you would need that, but if they really want to have it they should just use something else like comments or whatever thats valid code
[21:55:13] <FromDiscord> <⃟⃟> that part confused me more than it did help me understand it
[21:55:33] <FromDiscord> <haxscramper> ?
[21:55:40] <FromDiscord> <haxscramper> well, accounting for discord highlighting
[21:56:06] <FromDiscord> <⃟⃟> also
[21:56:20] <FromDiscord> <⃟⃟> according to the manual `nimvm` is used to determine if something is being run at compile time
[21:56:25] <FromDiscord> <⃟⃟> why is it called `nimvm` then?
[21:56:41] <FromDiscord> <haxscramper> because nim executes compile-time code in vm
[21:57:08] <FromDiscord> <⃟⃟> sure but what does that have to do with this symbols purpose
[21:57:17] <FromDiscord> <⃟⃟> `compileTime` or whatever would have been much clearer
[21:57:42] <FromDiscord> <haxscramper> `compiletime` is already used for variables and procs that are declared to be used only for compile-time
[21:57:49] <FromDiscord> <⃟⃟> or maybe `isCompileTime` to follow the naming of `isMainModule`
[21:57:57] <FromDiscord> <haxscramper> ^ that one would be good
[21:58:15] <FromDiscord> <haxscramper> though there is no `nimvm` symbol IIRC, `when nimvm` is a special magic
[21:58:25] <FromDiscord> <haxscramper> due to some implementation details
[21:58:43] <FromDiscord> <haxscramper> it is even put in separate manual section because of that
[21:59:10] <FromDiscord> <haxscramper> though manual says it is a symbol
[22:00:52] <FromDiscord> <⃟⃟> how does 'A' .. 'Z' work
[22:01:46] <FromDiscord> <haxscramper> range of characters from `'A'` to `'Z'`, inclusive on both ends
[22:01:58] <FromDiscord> <⃟⃟> but like
[22:02:00] <FromDiscord> <haxscramper> sent a code paste, see https://paste.rs/a5e
[22:02:07] <FromDiscord> <haxscramper> in set it is a special syntax to shorthand A,B,C,D ...
[22:02:19] <FromDiscord> <⃟⃟> would `'A' .. 5000` work
[22:02:29] <FromDiscord> <haxscramper> !eval echo 'A' .. 5000
[22:02:33] <NimBot> A .. 5000
[22:02:39] <FromDiscord> <⃟⃟> hmm
[22:02:49] <FromDiscord> <haxscramper> `..` is special only in context of set
[22:02:54] <FromDiscord> <haxscramper> otherwise it is just a user-defined operator
[22:03:02] <FromDiscord> <⃟⃟> !eval {'A' .. 500}
[22:03:02] <FromDiscord> <haxscramper> that returns `HSlice[char, int]``
[22:03:05] <NimBot> Compile failed: /usercode/in.nim(1, 6) Error: type mismatch: got <int literal(500)> but expected 'char'
[22:03:22] <FromDiscord> <haxscramper> https://nim-lang.org/docs/system.html#..%2CsinkT%2CsinkU
[22:04:02] <FromDiscord> <haxscramper> In loops it uses `..` iterator https://nim-lang.org/docs/system.html#...i%2CT%2CT
[22:04:35] <FromDiscord> <haxscramper> !eval for i in 'a' .. 'c': echo i
[22:04:39] <NimBot> a↵b↵c
[22:04:49] <FromDiscord> <haxscramper> !for i in 'a' .. 500: echo i
[22:04:55] <FromDiscord> <haxscramper> !eval for i in 'a' .. 500: echo i
[22:04:58] <NimBot> Compile failed: /usercode/in.nim(1, 14) Error: type mismatch: got <HSlice[system.char, system.int]>
[22:05:29] <FromDiscord> <haxscramper> but this won't work because there is no `..` iterator, so it uses proc that returns hslice, but hslice does not have an implicit items iterator defined so it fails
[22:06:10] <FromDiscord> <⃟⃟> i dont like the `;` and `,` thing
[22:06:18] <FromDiscord> <haxscramper> for argument separation?
[22:06:21] <FromDiscord> <⃟⃟> the manual also dosent seem to use them consistently
[22:06:22] <FromDiscord> <⃟⃟> yes
[22:06:28] <FromDiscord> <haxscramper> they are different
[22:06:46] <FromDiscord> <haxscramper> `;` is used to separate arguments that have types omitted because of "using statement"
[22:06:51] <FromDiscord> <⃟⃟> sent a code paste, see https://paste.rs/MPb
[22:07:13] <FromDiscord> <⃟⃟> wait what
[22:07:39] <FromDiscord> <haxscramper> Yes, but that part is more like legacy, because some people prefer this
[22:07:48] <FromDiscord> <haxscramper> someone called it like "dark mode" for proc arguments
[22:08:04] <FromDiscord> <⃟⃟> now i see  `;` used too when not using multiple arguments for same type
[22:10:24] <FromDiscord> <⃟⃟> it also says there is `typeof` and `type` but suggests not to use `type` why isnt it just removed
[22:11:08] <FromDiscord> <⃟⃟> and it seems they made the same mistake as python did with `import`
[22:11:37] <FromDiscord> <haxscramper> In reply to @⃟⃟ "do you think im": for this reason
[22:11:50] <FromDiscord> <haxscramper> In reply to @⃟⃟ "and it seems they": what mistake?
[22:11:56] <FromDiscord> <⃟⃟> `import X`
[22:12:10] <FromDiscord> <⃟⃟> what this means depends on if `from Y` is infront of it
[22:12:26] <FromDiscord> <haxscramper> In reply to @haxscramper "for this reason": manual contains full description of the language, tutorial is an introduction, Though I would not be surprisied that tutorial also shows both
[22:12:41] <FromDiscord> <⃟⃟> i also dont get what youre trying to say
[22:12:58] <FromDiscord> <⃟⃟> it would be better if theres just one function instead of two that seemingly work the same
[22:13:14] *** Quits: xet7 (~xet7@user/xet7) (Remote host closed the connection)
[22:13:26] <FromDiscord> <haxscramper> ah, you meant to completely remove from the language, not just manual
[22:13:35] <FromDiscord> <⃟⃟> yes
[22:13:43] <FromDiscord> <haxscramper> well, it would break existing code
[22:14:04] <FromDiscord> <⃟⃟> when was typeof added
[22:14:13] <FromDiscord> <haxscramper> For not reason other than "there should be only one way", which is not strong enough of a justufucation
[22:14:15] *** Joins: xet7 (~xet7@user/xet7)
[22:15:54] <FromDiscord> <haxscramper> In reply to @⃟⃟ "when was typeof added": it was added to docs two years ago https://github.com/nim-lang/Nim/commit/fcd3b0c4d8f266ca60aa0b2afe1f00bb68b4a9a4
[22:16:13] <FromDiscord> <haxscramper> So I would assume the feature itself was added not too long ago
[22:16:48] <FromDiscord> <⃟⃟> i would also move the section above threads higher
[22:18:40] <FromDiscord> <dom96> In reply to @⃟⃟ "i dont like the": Fwiw I dislike it too. Or at least that ; is default.
[22:19:40] <FromDiscord> <haxscramper> In reply to @haxscramper "So I would assume": can't tell exactly, seems like typeof() and type() magic share part of the implementation, but ~3 years ago and ~7-8
[22:26:29] <FromDiscord> <deech> How do I pass a qualified `typedesc` to a template? eg. if I have `template t(typ: typedesc ...)` and I call `t(someModule.SomeType)`, the `someModule` part gets stripped when `typ` is used in the template.
[22:26:55] <FromDiscord> <haxscramper> you need to do this for `getAst()`?
[22:27:06] <FromDiscord> <haxscramper> (edit) "`getAst()`?" => "`getAstStr()`?"
[22:28:03] <FromDiscord> <haxscramper> `typedesc` only contains type symbol - you can resolve it by fully qualifying module, but I don't think you can add it to typedesc
[22:28:20] <FromDiscord> <haxscramper> (edit) "`typedesc` only contains type symbol - you can resolve it by fully qualifying module, but I don't think you can add it ... to" 03added "[module name]"
[22:29:03] <FromDiscord> <deech> I see. This would be a nice feature.
[22:29:42] <FromDiscord> <deech> I guess I could convert `someModule.SomeType` to a `NimNode` and it may work?
[22:30:31] <FromDiscord> <haxscramper> depends on what exactly you want to do
[22:33:09] <FromDiscord> <deech> In the template I'm doing something like `let x : <backtick>typ<backtick>` , `<backtick>` is an actual backtick. 🙂
[22:36:27] <FromDiscord> <haxscramper> sent a code paste, see https://paste.rs/F4X
[22:36:33] <FromDiscord> <haxscramper> Like this?
[22:38:18] <FromDiscord> <deech> yes
[22:40:48] <FromDiscord> <haxscramper> sent a code paste, see https://paste.rs/30Y
[22:43:32] <FromDiscord> <deech> That's odd. It doesn't seem to work for my project modules,  does it still work if you try it with `from system import nil` and if the template is in a separate module?
[22:46:24] <FromDiscord> <haxscramper> https://wandbox.org/permlink/dDJ8726fEu6FIwwR it can't `echo` anything
[22:47:16] <FromDiscord> <haxscramper> but that's not really surpirsing, considering `from system import nil`
[22:48:48] <FromDiscord> <haxscramper> yes, `from system import nil` even breaks `proc echo(s: system.string) = system.echo(s)`
[22:49:10] <FromDiscord> <haxscramper> and `system.echo("str")`
[22:49:42] <FromDiscord> <haxscramper> and even `system.echo(system.string("str"))`
[22:51:51] *** Joins: jjido (~Denis@2a01:4b00:80e2:7100:94f3:a79f:8eb9:c547)
[23:05:45] *** Quits: byanka (~byanka@78.137.43.40) (Ping timeout: 248 seconds)
[23:52:27] *** Quits: supakeen (~user@python/site-packages/supakeen) (Remote host closed the connection)
[23:52:52] *** Joins: supakeen (~user@python/site-packages/supakeen)
