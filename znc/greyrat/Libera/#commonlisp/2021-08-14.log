[00:00:23] <jmercouris> also what Bike said, good luck saving compiled functions
[00:00:37] <jmercouris> I believe beach said something about it existing for commercial Lisps or something
[00:00:59] <nij-> Then I'm curious what hayley meant..
[00:01:01] <lisp123> Josh_2: Elephant or BKNR? From my understanding, Postmodern is pretty much perfect for db solutions (if one is willing to go with PSQL)
[00:01:05] <jmercouris> s/existing/not existing
[00:01:08] <Bike> so you save the source form. i see
[00:01:09] <jmercouris> nij-: don't worry about it
[00:01:12] <nij-> https://irclog.tymoon.eu/libera/%23commonlisp?around=1628863135#1628863135
[00:01:17] <jmercouris> Bike: I N D E E D
[00:01:21] <mariari> oh no
[00:01:29] <mariari> wrong channel, sorry
[00:01:41] <nij-> mariari: good job. we're friendly so you're ok:)
[00:02:12] <nij-> so apparently hayley suggested there are black magics that help persistentize functions and closures https://irclog.tymoon.eu/libera/%23commonlisp?around=1628863135#1628863135
[00:02:17] *** Quits: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 248 seconds)
[00:02:18] <Bike> nij-: hayley seems to be referring to something more like dumping an image
[00:02:19] <nij-> which lib does hayley use?
[00:02:29] <nij-> oh
[00:02:29] <Bike> but i am not sure of the details
[00:02:44] <edgar-rft> mfiano: the HyperSpec AREF page says that AREF ignores fill-pointers, but I still have found nothing in the LOOP chapter what that means for : ACROSS -> http://www.lispworks.com/documentation/HyperSpec/Body/f_aref.htm
[00:03:48] <nij-> I've been lisping too much lately.
[00:03:59] <nij-> Wife isn't happy.
[00:04:13] * nij- slightly pushes hmslef to #lispcafe
[00:04:40] <nij-> Bike: Yeah.. I should ask hayley  again.
[00:04:52] <Bike> that would probably be the most informative course of action
[00:04:57] <lisp123> nij-: I have been trying to get my gf into lisp, at least she's been telling all her IT friends that they should program in lisp if they want to be successful :S It's a start
[00:05:52] <Bike> i would think that loop-as-across respects the fill pointer, but i don't see any explicit language either way
[00:06:16] <nij-> lisp123: lol yeah I need to cook up some tricks to get people in
[00:06:20] <nij-> at least they need to try
[00:06:23] <nij-> I always failed..
[00:06:37] <nij-> It's great to start with emacs. But that alone scares many people alway.
[00:08:13] *** Joins: zos (~zosthegoa@ool-457a8044.dyn.optonline.net)
[00:09:51] <contrapunctus> nij-: how's the Lisp support in other IDEs?
[00:09:58] <mfiano> edgar-rft: Right, that was the bit in CLtL2 about aref being an exception. I don't see anywhere where it specifies what loop uses
[00:10:24] <mfiano> Bike: Ah I missed what you had said. Yeah, I think this is undefined.
[00:10:26] <nij-> contrapunctus: come over here at #lispcafe
[00:11:02] <edgar-rft> mfiano: CLHS 6.1.2.1.5 "The for-as-across subclause" says "Iteration stops when there are no more elements in the supplied array that can be referenced" but AREF ignores fill-pointers, so elements after the fill-pointer *can* be referenced. I don't think that's what's meant but the explanation indeed is somewhat ambiguous.
[00:11:25] <Bike> i would say it should read "active elements"
[00:11:30] <Bike> might be something to toss into wscl actually
[00:11:39] <jmercouris> or elements before the fill pointer
[00:11:48] <Bike> that is what "active" means.
[00:11:56] <jmercouris> is that a defined term?
[00:11:58] <mfiano> Bike: Yes that would be a good addition.
[00:12:02] <Bike> yeah it's in the glossary
[00:12:05] <jmercouris> I see, OK
[00:12:05] <Bike> it's pretty obscure though
[00:12:18] <Bike> i only know it because i was trying to figure out if this loop thing was defined
[00:12:30] <jmercouris> then perhaps it is not a good idea to use this term
[00:12:36] <jmercouris> or to use it, and then immediately define it
[00:13:05] <Bike> there'd be like, a link to the glossary.
[00:13:10] <jmercouris> right
[00:13:10] *** Quits: Steeve (~steve@user/steeve) (Quit: end)
[00:13:24] <Bike> since otherwise yeah you read that and go what the heck does that mean.
[00:18:58] <edgar-rft> I often think the glossary only exists because the committee folks permanently lost track of what they were talking about :-)
[00:19:11] <Inline> lol
[00:21:55] <edgar-rft> don't laugh too loud, the ANSI Spec is a pretty much complex thing, andif I had been member of the committee the glossary would probably be bigger than the internet
[00:22:16] <Inline> right
[00:22:40] <Bike> i figure that's why glossaries exist in general
[00:23:25] <edgar-rft> if I had been member of the committee the glossary would need its own internet :-)
[00:24:59] *** Joins: hafat (~hafat@159.146.87.68)
[00:33:17] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-14F5-dynamic.midco.net) (Quit: Using Circe, the loveliest of all IRC clients)
[00:40:40] <jcowan> If I had been a member of the committee, the glossary would be stored in its own universe: gets you another 10^79 bits to play with.
[00:40:58] <jcowan> "Every word she says is a lie, including 'and' and 'the'."
[00:43:37] *** Joins: attila_lendvai (~alendvai@2a02:ab88:3707:bb00:5ee0:c5ff:feb2:29e2)
[00:44:51] *** Joins: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[00:48:16] *** Quits: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 256 seconds)
[00:52:13] <Alfr> jcowan, might be impractical if that universe should become inaccessible from the one where the spec is in use.
[00:52:33] <jcowan> So keep a copy in this universe.  :-)
[00:52:35] *** Quits: amb007 (~a_bakic@cable-94-189-181-220.dynamic.sbb.rs) (Ping timeout: 252 seconds)
[00:53:13] *** Joins: amb007 (~a_bakic@net219-37-245-109.mbb.telenor.rs)
[00:54:18] <Alfr> Do we have enough spare state?
[00:54:54] *** Joins: dsk (~dsk@user/dsk)
[01:00:37] *** Quits: yitzi (~yitzi@173-27-106-188.client.mchsi.com) (Quit: Leaving)
[01:00:37] *** Quits: amb007 (~a_bakic@net219-37-245-109.mbb.telenor.rs) (Read error: Connection reset by peer)
[01:01:22] *** Joins: amb007 (~a_bakic@cable-94-189-181-220.dynamic.sbb.rs)
[01:07:29] *** Joins: cosimone (~user@2001:b07:ae5:db26:a7aa:8027:6b4e:2fb3)
[01:08:53] *** Quits: krjst (~krjst@2604:a880:800:c1::16b:8001) (Ping timeout: 250 seconds)
[01:08:57] *** Quits: jeosol (~jeosol@76-238-186-228.lightspeed.hstntx.sbcglobal.net) (Ping timeout: 248 seconds)
[01:09:14] *** Quits: Vultyre (~vultyre@user/vultyre) (Ping timeout: 256 seconds)
[01:09:48] *** Quits: energizer (~energizer@user/energizer) (Ping timeout: 272 seconds)
[01:11:40] *** Joins: krjst (~krjst@2604:a880:800:c1::16b:8001)
[01:12:44] *** Quits: cage (~cage@dynamic-adsl-78-15-36-212.clienti.tiscali.it) (Quit: rcirc on GNU Emacs 27.1)
[01:17:25] *** Joins: Vultyre_ (~vultyre@user/vultyre)
[01:18:52] *** Vultyre_ is now known as Vultyre
[01:21:54] *** Quits: lisp123 (~lisp123@45.130.83.200) (Remote host closed the connection)
[01:22:26] *** Joins: lisp123 (~lisp123@45.130.83.200)
[01:23:12] *** Joins: jeosol (~jeosol@76-238-186-228.lightspeed.hstntx.sbcglobal.net)
[01:23:17] *** Joins: energizer (~energizer@user/energizer)
[01:24:19] *** Quits: amb007 (~a_bakic@cable-94-189-181-220.dynamic.sbb.rs) (Ping timeout: 258 seconds)
[01:24:27] *** Joins: amb007 (~a_bakic@cable-94-189-181-220.dynamic.sbb.rs)
[01:27:05] *** Quits: lisp123 (~lisp123@45.130.83.200) (Ping timeout: 248 seconds)
[01:39:44] *** Joins: makomo_ (~makomo@user/makomo)
[01:39:55] *** Quits: makomo_ (~makomo@user/makomo) (Client Quit)
[01:40:04] *** Joins: makomo_ (~makomo@user/makomo)
[01:42:37] *** Quits: makomo (~makomo@user/makomo) (Ping timeout: 245 seconds)
[01:42:41] *** Quits: makomo_ (~makomo@user/makomo) (Client Quit)
[01:42:49] *** Joins: makomo (~makomo@user/makomo)
[01:44:17] <edgar-rft> my glossary would have it's own glossary...
[01:50:48] *** Quits: Lord_Nightmare (Lord_Night@user/lord-nightmare/x-3657113) (Quit: ZNC - http://znc.in)
[01:54:29] *** Joins: Lord_Nightmare (Lord_Night@user/lord-nightmare/x-3657113)
[01:58:41] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[02:02:17] *** Joins: santiagopim (~user@90.166.59.254)
[02:02:37] *** Quits: attila_lendvai (~alendvai@2a02:ab88:3707:bb00:5ee0:c5ff:feb2:29e2) (Ping timeout: 245 seconds)
[02:02:49] *** Joins: lisp123 (~lisp123@45.130.83.200)
[02:12:53] *** Quits: lisp123 (~lisp123@45.130.83.200) (Read error: Connection reset by peer)
[02:19:42] *** Quits: shka (~herr@109.231.62.239) (Ping timeout: 268 seconds)
[02:35:53] *** Quits: sander (~sander@user/sander) (Ping timeout: 248 seconds)
[02:41:59] *** Joins: lisp123 (~lisp123@45.130.83.200)
[02:43:45] *** Quits: santiagopim (~user@90.166.59.254) (Ping timeout: 268 seconds)
[02:47:55] *** Quits: pve (~pve@37-33-27-4.bb.dnainternet.fi) (Quit: leaving)
[02:50:30] *** Quits: lisp123 (~lisp123@45.130.83.200) (Read error: Connection reset by peer)
[02:54:01] *** Quits: zos (~zosthegoa@ool-457a8044.dyn.optonline.net) (Ping timeout: 248 seconds)
[02:55:36] *** Joins: zos (~zosthegoa@ool-457a8044.dyn.optonline.net)
[03:07:06] *** Joins: pegaso (~reis-r@177.107.24.202)
[03:07:07] *** Quits: frgo (~frgo@p200300deef0cee000dc27aed655f6be3.dip0.t-ipconnect.de) (Read error: Connection reset by peer)
[03:07:34] *** Joins: frgo (~frgo@p200300deef0cee000dc27aed655f6be3.dip0.t-ipconnect.de)
[03:14:03] *** Joins: santiagopim (~user@90.166.59.254)
[03:28:08] *** Quits: gaqwas (~john@dynamic-077-007-108-005.77.7.pool.telefonica.de) (Ping timeout: 258 seconds)
[03:28:57] *** Joins: gaqwas (~john@dynamic-095-114-051-138.95.114.pool.telefonica.de)
[03:32:27] *** Quits: pegaso (~reis-r@177.107.24.202) (Quit: Leaving)
[03:34:17] *** Quits: cosimone (~user@2001:b07:ae5:db26:a7aa:8027:6b4e:2fb3) (Ping timeout: 252 seconds)
[03:37:54] *** Joins: Qwnavery (~Qwnavery@user/qwnavery)
[03:46:49] *** Quits: amb007 (~a_bakic@cable-94-189-181-220.dynamic.sbb.rs) (Ping timeout: 248 seconds)
[03:46:55] *** Quits: makomo (~makomo@user/makomo) (Ping timeout: 258 seconds)
[03:49:22] *** Joins: mister_m` (~user@c-73-110-154-209.hsd1.il.comcast.net)
[03:50:14] *** Joins: Noisytoot_ (~noisytoot@sourcehut/user/noisytoot)
[03:50:47] *** Quits: mister_m (~user@c-73-110-154-209.hsd1.il.comcast.net) (Remote host closed the connection)
[03:50:47] *** Quits: Noisytoot (~noisytoot@sourcehut/user/noisytoot) (Remote host closed the connection)
[03:52:32] <mfiano> Is there a convenient way to debug print-object not invoking the debugger when it errors?
[03:53:02] <mfiano> <<error printing object>> in the object printed rep is not very convenient :/
[03:53:29] <hayley> nij-: 🆑🅾🆘
[04:00:18] <lotuseater> hayley: :D
[04:01:22] *** Joins: akoana (~ah@user/akoana)
[04:06:07] *** Noisytoot_ is now known as Noisytoot
[04:08:10] *** Joins: kakuhen (~kakuhen@user/kakuhen)
[04:12:48] *** Joins: karlosz (~karlosz@router.cloyne.org)
[04:17:26] *** Quits: karlosz (~karlosz@router.cloyne.org) (Client Quit)
[04:19:02] *** Joins: seanw (spwhitton@debian/spwhitton)
[04:27:16] *** Joins: Qwnavery_ (~Qwnavery@193-116-69-60.tpgi.com.au)
[04:27:29] *** Quits: Qwnavery_ (~Qwnavery@193-116-69-60.tpgi.com.au) (Client Quit)
[04:28:19] *** Quits: Qwnavery (~Qwnavery@user/qwnavery) (Ping timeout: 258 seconds)
[04:28:37] *** Joins: Qwnavery (~Qwnavery@user/qwnavery)
[04:43:00] *** eta is now known as etb
[04:43:03] *** etb is now known as eta
[04:49:42] *** Quits: zos (~zosthegoa@ool-457a8044.dyn.optonline.net) (Ping timeout: 245 seconds)
[04:51:02] *** Joins: zos (~zosthegoa@ool-457a8044.dyn.optonline.net)
[05:05:45] *** Quits: random-nick (~random-ni@87.116.177.79) (Ping timeout: 248 seconds)
[05:13:32] *** Quits: Fare (~fare@2601:184:4a7f:995c::871) (Quit: Leaving)
[05:38:03] <akater[m]> mfiano: “Setting *print-pretty* to true [just] causes the functions contained
[05:38:03] <akater[m]> in the current pprint dispatch table to have priority over normal print-object method” — CLHS on `*PRINT-PPRINT-DISPATCH*`.  But I don't know how to make it work.
[05:39:51] <akater[m]> phoe: Possibly a good topic for Common Lisp Recipes 2nd Edition — debugging pretty-printer.  However it might be covered in the current edition; I can't check now.
[05:55:07] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 245 seconds)
[06:00:36] *** Joins: notzmv (~zmv@user/notzmv)
[06:05:07] *** Quits: igemnace (~ian@user/igemnace) (Quit: WeeChat 3.2)
[06:34:49] *** Quits: gaqwas (~john@dynamic-095-114-051-138.95.114.pool.telefonica.de) (Ping timeout: 248 seconds)
[06:35:05] *** Joins: gaqwas (~john@dynamic-077-002-098-033.77.2.pool.telefonica.de)
[06:49:05] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 244 seconds)
[06:51:37] *** Joins: hendursaga (~weechat@user/hendursaga)
[06:53:23] *** Quits: hendursaga (~weechat@user/hendursaga) (Client Quit)
[07:02:40] *** Joins: hendursaga (~weechat@user/hendursaga)
[07:07:42] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[07:20:02] *** Parts: kulernil (~kulernil@gateway/tor-sasl/kuler) (Leaving)
[07:20:50] *** Joins: prxq_ (~quassel@x4db3fbdd.dyn.telefonica.de)
[07:24:25] *** Quits: prxq (~quassel@x4db90fef.dyn.telefonica.de) (Ping timeout: 248 seconds)
[07:31:40] <beach> Good morning everyone!
[07:32:57] *** Quits: gaqwas (~john@dynamic-077-002-098-033.77.2.pool.telefonica.de) (Ping timeout: 248 seconds)
[07:33:51] *** Joins: gaqwas (~john@dynamic-095-118-127-244.95.118.pool.telefonica.de)
[07:37:25] <Josh_2> Mornin' beach
[07:40:22] *** Quits: dsk (~dsk@user/dsk) (Ping timeout: 258 seconds)
[07:54:55] *** Quits: esb (~esb@2804:14c:1ad:8b70::1000) (Remote host closed the connection)
[08:03:12] *** Quits: zos (~zosthegoa@ool-457a8044.dyn.optonline.net) (Quit: WeeChat 2.8)
[08:13:40] *** Quits: taiju (~taiju@240b:253:ec40:2400:701e:19b4:5e8d:19b0) (Ping timeout: 256 seconds)
[08:15:27] *** Joins: taiju (~taiju@240b:253:ec40:2400:e1d1:588c:bc3f:1887)
[08:27:33] *** Joins: amb007 (~a_bakic@net219-37-245-109.mbb.telenor.rs)
[08:27:34] *** Quits: amb007 (~a_bakic@net219-37-245-109.mbb.telenor.rs) (Read error: Connection reset by peer)
[08:27:49] *** Joins: amb007 (~a_bakic@cable-94-189-181-220.dynamic.sbb.rs)
[08:42:17] *** Quits: rain3 (~rain3___@2a02:2f09:d30b:1300:514:bcc7:8202:1798) (Remote host closed the connection)
[08:42:45] *** Joins: rain3 (~rain3___@2a02:2f09:d30b:1300:514:bcc7:8202:1798)
[09:02:01] *** Quits: taiju (~taiju@240b:253:ec40:2400:e1d1:588c:bc3f:1887) (Ping timeout: 258 seconds)
[09:02:18] *** Joins: selwyn (~selwyn@user/selwyn)
[09:06:30] *** Quits: Bike (~Glossina@71.69.170.70) (Quit: Lost terminal)
[09:19:22] *** Joins: taiju (~taiju@61.127.163.30)
[09:23:53] *** Quits: taiju (~taiju@61.127.163.30) (Ping timeout: 248 seconds)
[09:26:36] *** Joins: lisp123 (~lisp123@45.130.83.200)
[09:34:00] *** Joins: lisp123_ (~lisp123@45.86.200.59)
[09:35:40] *** Quits: lisp123 (~lisp123@45.130.83.200) (Read error: Connection reset by peer)
[09:44:10] *** Joins: fizbin (~dtm@2601:82:c380:87a:3c14:855f:b6b5:5115)
[09:44:13] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[09:44:44] *** Quits: fizbin (~dtm@2601:82:c380:87a:3c14:855f:b6b5:5115) (Client Quit)
[10:01:09] *** Quits: lisp123_ (~lisp123@45.86.200.59) (Remote host closed the connection)
[10:03:18] *** Joins: lisp123 (~lisp123@5.30.23.247)
[10:09:33] *** Quits: akoana (~ah@user/akoana) (Quit: leaving)
[10:19:53] *** Quits: lad (~lad@user/lad) (Ping timeout: 248 seconds)
[10:35:38] *** Joins: sander (~sander@user/sander)
[10:42:40] *** Joins: taiju (~taiju@240b:253:ec40:2400:e1d1:588c:bc3f:1887)
[10:48:39] *** Joins: jans1 (~Thunderbi@193.138.218.216)
[10:52:25] *** Quits: jans (~Thunderbi@193.138.218.211) (Ping timeout: 248 seconds)
[10:52:25] *** jans1 is now known as jans
[10:52:43] *** Joins: dsk (~dsk@user/dsk)
[10:58:25] *** Quits: lotuseater (~user@p200300e7871b3f008a69ffac690ca7c7.dip0.t-ipconnect.de) (Quit: ERC (IRC client for Emacs 27.2))
[10:59:45] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[11:01:37] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 258 seconds)
[11:01:38] *** Lord_of_Life_ is now known as Lord_of_Life
[11:04:30] *** Joins: makomo (~makomo@user/makomo)
[11:07:51] *** Joins: pve (~pve@87-93-216-118.bb.dnainternet.fi)
[11:34:30] *** Quits: d4ryus (~d4ryus@ppp-188-174-54-240.dynamic.mnet-online.de) (Quit: WeeChat 3.2)
[11:52:03] *** Joins: d4ryus (~d4ryus@ppp-188-174-54-240.dynamic.mnet-online.de)
[11:53:02] *** Quits: amb007 (~a_bakic@cable-94-189-181-220.dynamic.sbb.rs) (Ping timeout: 245 seconds)
[11:53:27] *** Joins: amb007 (~a_bakic@net219-37-245-109.mbb.telenor.rs)
[12:08:20] *** Quits: amb007 (~a_bakic@net219-37-245-109.mbb.telenor.rs) (Read error: Connection reset by peer)
[12:08:27] *** Quits: dsk (~dsk@user/dsk) (Ping timeout: 245 seconds)
[12:09:02] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[12:09:36] *** Joins: lisp123 (~lisp123@5.30.23.247)
[12:10:44] *** Joins: amb007 (~a_bakic@net219-37-245-109.mbb.telenor.rs)
[12:15:05] *** Quits: sm2n (~sm2n@user/sm2n) (Ping timeout: 248 seconds)
[12:15:24] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 268 seconds)
[12:18:17] *** Quits: amb007 (~a_bakic@net219-37-245-109.mbb.telenor.rs) (Read error: Connection reset by peer)
[12:19:24] *** Joins: amb007 (~a_bakic@net219-37-245-109.mbb.telenor.rs)
[12:27:32] *** Joins: lisp123 (~lisp123@5.30.23.247)
[12:35:36] *** Joins: hendursa1 (~weechat@user/hendursaga)
[12:38:27] *** Quits: amb007 (~a_bakic@net219-37-245-109.mbb.telenor.rs) (Read error: Connection reset by peer)
[12:38:40] *** Joins: amb007 (~a_bakic@net219-37-245-109.mbb.telenor.rs)
[12:38:52] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 244 seconds)
[12:41:10] <pjb> mfiano: debugging without the debugger usually involves printing.  So debugging print-object without the debugger will be quite delicate…
[12:41:39] <pjb> mfiano: add forms to test and validate each object before you print it.
[12:42:19] <pjb> use slot-boundp etc.
[12:43:35] *** Joins: selwyn (~selwyn@user/selwyn)
[12:47:37] *** Quits: amb007 (~a_bakic@net219-37-245-109.mbb.telenor.rs) (Read error: Connection reset by peer)
[12:50:09] *** Joins: amb007 (~a_bakic@79.101.103.197)
[12:50:19] <rain3> (describe object) is occasionally useful
[12:52:50] <rain3> (defmethod print-object ((obj class) stream) (describe obj stream))
[12:54:27] *** Joins: elf_fortrez (~elf_fortr@adsl-72-50-6-221.prtc.net)
[12:55:25] <pjb> rain3: most probably an infinite recursion.
[12:56:30] <mfiano> Thanks it was due to a bug in a library that elided bounds checking of aref calls used in the print method
[12:56:54] <mfiano> So memory was likely corrupt
[13:01:18] *** Joins: cage (~cage@dynamic-adsl-78-15-36-212.clienti.tiscali.it)
[13:01:50] <rain3> pjb: yes
[13:02:27] <rain3> fatal error encountered in SBCL pid 2941141 tid 182023:control_stack_guard_page_protected not NIL
[13:09:31] <lisp123> Is this a common error when running older code: STYLE WARNING using deprecated EVAL-WHEN situation names EVAL LOAD COMPILE?
[13:12:04] <lisp123> Is there an alternative to (eval-when (compile load eval) ... )?
[13:12:50] <beach> clhs eval-when
[13:12:51] <specbot> http://www.lispworks.com/reference/HyperSpec/Body/s_eval_w.htm
[13:12:57] <beach> lisp123: See that page.
[13:14:49] *** Quits: amb007 (~a_bakic@79.101.103.197) (Read error: Connection reset by peer)
[13:15:02] *** Joins: amb007 (~a_bakic@79.101.103.197)
[13:28:58] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[13:29:38] *** Joins: lisp123 (~lisp123@5.30.23.247)
[13:31:21] *** Quits: sander (~sander@user/sander) (Ping timeout: 248 seconds)
[13:31:58] *** Joins: sander (~sander@user/sander)
[13:34:56] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 268 seconds)
[13:39:10] *** Joins: lisp123 (~lisp123@5.30.23.247)
[13:41:00] <lisp123> beach: Thanks, I am on that page. Is there a 1:1 correspondence between :compile-toplevel & compile, :load-toplevel & load and :execute & eval?
[13:42:28] <beach> Yes.
[13:42:38] <lisp123> Thanks!
[13:42:52] <beach> Sure.
[13:50:26] *** Quits: sander (~sander@user/sander) (Quit: So long! :))
[13:50:39] *** Joins: sm2n (~sm2n@user/sm2n)
[13:51:02] *** Joins: sander (~sander@user/sander)
[13:59:34] *** Quits: sander (~sander@user/sander) (Quit: So long! :))
[14:01:10] *** Joins: sander (~sander@user/sander)
[14:04:02] *** Quits: amb007 (~a_bakic@79.101.103.197) (Ping timeout: 252 seconds)
[14:05:28] *** Joins: sndr (~sander@user/sander)
[14:06:08] *** Quits: sander (~sander@user/sander) (Ping timeout: 256 seconds)
[14:06:15] *** sndr is now known as sander
[14:07:05] <rain3> pjb: what about this https://termbin.com/zzch
[14:07:49] *** Joins: amb007 (~a_bakic@79.101.103.197)
[14:08:00] <kakuhen> Is there a point to sharp-quoting lambda expressions? From what I've read online, it seems like LAMBDA already macroexpands to what sharp-quote would've done for us, i.e. give us (function (lambda ...))
[14:08:32] <beach> There is no point.
[14:08:40] <mfiano> sharp quote is a reader macro that expands to (function ...), so it can only hurt
[14:08:58] <mfiano> Hurt in that it is more to type, and there are certain parts of the standard that require a lambda expression, not a function
[14:08:59] <beach> And sometimes you are not allowed to use #' on lambda expressions.
[14:09:44] <mfiano> The report of a condition for example cannot be a function, only a lambda expression.
[14:09:47] <beach> And other times doing so is not what you mean.
[14:10:26] <beach> I am thinking 1. ((lambda (x y) (+ x y)) 1 2)
[14:10:36] <rain3> pjb: or using stealth-mixin and defining describe-object :around for our avoid-circular-printing-mixin
[14:10:36] <beach> and 2. (compile nil '(lambda ...))
[14:10:58] <kakuhen> I see. Thanks for the explanations, beach and mfiano
[14:11:05] <mfiano> report-name::= string | symbol | lambda expression
[14:11:15] <mfiano> Nowhere is a function accepted for a condition
[14:11:22] <beach> That's interesting.
[14:11:27] <beach> Never thought about that.
[14:13:53] *** Joins: nij- (~jin@2001-48F8-9021-806-0-0-0-14F5-dynamic.midco.net)
[14:14:30] *** Quits: hafat (~hafat@159.146.87.68) (Ping timeout: 272 seconds)
[14:14:41] <nij-> hayley: :)
[14:14:57] <hayley> I seem to have invented a new code organisation problem. A few days ago, I started writing a model and proof that some fine-grained locking code would not race, as part of some internal design documents for what I considered to be a module with "subtle" properties.
[14:15:28] <nij-> morning.
[14:15:51] <nij-> hayley: good to know you're here. I was wondering which persistent memory method you'd recommend.
[14:16:15] <hayley> So, in the directory for that model, I made another directory Design/ which contains those documents. Now I wrote another model, but don't have any more documents (yet). Where should I put that model file?
[14:17:59] <hayley> nij-: Page 35 of the CLOSOS book <http://metamodular.com/closos.pdf> describes a logging mechanism. Loosely speaking, after enough memory is changed, the changes are saved to disk, and it is possible to "work backwards" and find the most recent copy of some memory.
[14:23:36] <scymtym> mfiano: you can open the object for which the error to print occurs in the (SLIME) inspector and press "p". that should invoke a debugger with the error you are interested in
[14:23:40] *** Quits: amb007 (~a_bakic@79.101.103.197) (Ping timeout: 268 seconds)
[14:24:41] *** Joins: amb007 (~a_bakic@net219-37-245-109.mbb.telenor.rs)
[14:24:45] <nij-> hayley: theoretical but not implemented yet!?
[14:25:02] <hayley> Another problem is whether to make a Design/ directory for each module, or another tree which has parallel structure to the code, or another directory without nesting (assuming there are fewer files, so nesting is unnecessary).
[14:25:03] <hayley> nij-: Yes.
[14:25:59] <nij-> Lemme think how this is possible to persist functions and closures.
[14:26:54] <kakuhen> What is the difference between c2cl and c2mop when I make use of the metaobject protocol?
[14:27:40] <hayley> nij-: Again, the mechanism literally copies the contents of memory to disk and back.
[14:28:39] <hayley> It would be like saving a Lisp image, except that you are constantly incrementally writing the image. And the working set of the Lisp system can be larger than primary memory, so really you are incrementally reading and caching the image from disk.
[14:36:44] <hayley> Well, I suppose my problem is not unlike figuring where to put tests. And I put them in a /Tests/ directory without any nesting as there are few enough files for it to work.
[14:38:27] *** Quits: sander (~sander@user/sander) (Quit: So long! :))
[14:39:51] *** Joins: sander (~sander@user/sander)
[14:46:56] *** Quits: Qwnavery (~Qwnavery@user/qwnavery) (Quit: WeeChat 3.2)
[14:52:04] *** Joins: random-nick (~random-ni@87.116.165.220)
[14:55:58] *** Quits: kakuhen (~kakuhen@user/kakuhen) (Read error: Connection reset by peer)
[14:58:25] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[15:01:17] *** Quits: amb007 (~a_bakic@net219-37-245-109.mbb.telenor.rs) (Read error: Connection reset by peer)
[15:03:07] *** Joins: amb007 (~a_bakic@cable-94-189-181-220.dynamic.sbb.rs)
[15:04:41] *** Quits: MetaYan_ (~MetaYan@c-7b5d235c.07-84-7462671.bbcust.telenor.se) (Ping timeout: 248 seconds)
[15:05:00] <nij-> Can CLOSOS be implemented over UNIX?
[15:05:12] <nij-> Starting it over is better of course, but it seems a whole lot of work.
[15:05:35] *** Quits: amb007 (~a_bakic@cable-94-189-181-220.dynamic.sbb.rs) (Read error: Connection reset by peer)
[15:06:02] <hayley> Yes, but I would argue you don't get all the benefits.
[15:06:41] *** Joins: amb007 (~a_bakic@cable-94-189-181-220.dynamic.sbb.rs)
[15:07:03] *** Quits: frgo (~frgo@p200300deef0cee000dc27aed655f6be3.dip0.t-ipconnect.de) (Remote host closed the connection)
[15:07:30] *** Joins: frgo (~frgo@p200300deef0cee00a4df60854a3f6667.dip0.t-ipconnect.de)
[15:09:55] *** Quits: sander (~sander@user/sander) (Ping timeout: 268 seconds)
[15:11:30] *** Joins: MetaYan (~MetaYan@c-7b5d235c.07-84-7462671.bbcust.telenor.se)
[15:18:28] *** Joins: sander (~sander@user/sander)
[15:25:57] <nij-> But at least we can "write to core incrementally"?
[15:38:35] <hayley> Sure.
[15:51:19] *** Joins: Qwnavery (~Qwnavery@user/qwnavery)
[15:52:04] *** Quits: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Quit: Leaving)
[15:55:15] *** Quits: Alfr (~Alfr@user/alfr) (Remote host closed the connection)
[15:55:39] *** Joins: Alfr (~Alfr@user/alfr)
[15:55:52] *** Quits: Alfr (~Alfr@user/alfr) (Remote host closed the connection)
[16:05:04] *** Joins: CrashTestDummy (~CrashTest@ool-ad02813b.dyn.optonline.net)
[16:15:00] <nij-> Sounds very nice..
[16:17:05] <hayley> Indeed. Would save a lot of hair-pulling.
[16:19:18] *** Joins: dsk (~dsk@user/dsk)
[16:26:10] <beach> nij-: Unix could not be turned into CLOSOS by any incremental process.  But what would perhaps be possible would be to reuse Unix device drivers.
[16:28:52] <hayley> 1.4 of The Book suggests a reasonable process. Even the single-user system would allow for a persistent memory abstraction.
[16:29:49] <beach> Yes, but I don't think that's what nij- had in mind.
[16:29:53] <hayley> Of course, one is still subject to, say, attacks of the killer microseconds, for example. But (more recently) I can appreciate what is gained from the intermediate steps.
[16:31:36] <hayley> Right, the last question "Can CLOSOS be implemented over UNIX?" is best answered with "no". But the initial supposed question, something like "Can we have persistent memory on Unix?" can be answered with "yes".
[16:32:08] <beach> Right, I think I read something about that.
[16:36:46] *** Joins: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[16:39:37] *** Quits: CrashTestDummy (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 248 seconds)
[16:46:29] *** Quits: Qwnavery (~Qwnavery@user/qwnavery) (Quit: WeeChat 3.2)
[16:46:47] *** Quits: dsk (~dsk@user/dsk) (Ping timeout: 245 seconds)
[17:02:10] <lisp123> Does anybody have the source code for CONCORDIA and/or Symbolic Graphics Editor?
[17:02:47] <rain3> hayley: "Another problem is whether to make a Design/ directory for each module, or another tree which has parallel structure to the code"  the 2nd one is not good, in my experience
[17:03:08] <hayley> I wouldn't be surprised if the only legal avenue was to buy a Genera license.
[17:03:34] <lisp123> Would that be likely to have the source code?
[17:03:51] <beach> lisp123: I believe that code is proprietary.
[17:03:56] <hayley> Yes.
[17:04:25] <lisp123> beach: Thanks
[17:04:59] <lisp123> I guess its not currently possible to buy a genera license (please don't get my hopes up)?
[17:05:48] <hayley> It is possible, but it would cost a lot of money.
[17:05:51] <rain3> hayley: "Well, I suppose my problem is not unlike figuring where to put tests." https://codeburst.io/https-medium-com-databases-bfore-computers-6d57be7db9c5
[17:06:41] <lisp123> hayley: Thanks. Looks like $5,000 based on google
[17:07:32] <rain3> haylay: if that guy is right then tests for a module should be attached to that module, they should not be somewhere far away in a parallel directory
[17:08:06] <hayley> I thought this guy was just trying to sell me a graph database.
[17:08:10] <beach> lisp123: What would you do with it?
[17:08:56] <lisp123> beach: Nothing except to read the source code for CONCORDIA. But $5,000 is too much for just that, a couple of hundred might have been okay
[17:09:11] <beach> Yes, I see.
[17:09:24] <lisp123> I am curious if it did anything particularly different vs. other editors
[17:09:54] <hayley> Maybe I am too dense to get it, but there isn't anything about testing modules in that article.
[17:10:35] <rain3> the article is about organizing data
[17:11:35] <hayley> Right.
[17:13:25] <hayley> A lot of the article reminds me of <https://plover.com/~mjd/misc/hbaker-archive/letters/CACM-RelationalDatabases.html> for what it's worth.
[17:13:41] *** Joins: lisp123_ (~lisp123@45.86.200.16)
[17:16:14] <hayley> But the issue is that I cannot create arbitrary links with a filesystem, so I have to pick what comes "closer" in the directory hierarchy.
[17:16:25] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 248 seconds)
[17:16:56] <hayley> The tests are also another module, for example, so it looks weird to have two modules sharing the same directory hierarchy.
[17:20:27] <phantomics> beach: I recall there was a proposal once for a CL-based init system as part of the discussions that led to systemd. That wouldn't be a CL-based Unix but it could catalyze the replacement of significant GNU/Linux system facilities with CL-based software; something like that could ease adoption of a CL-based OS, with portions of the init system ported over. Would be much better than systemd at any rate.
[17:21:09] <hayley> It'd still be a Unix.
[17:22:02] <hayley> An analogy would be that I don't think the existence of Ltk makes it easier to adopt CLIM.
[17:22:18] *** Quits: sander (~sander@user/sander) (Quit: So long! :))
[17:22:27] *** Joins: lisp123 (~lisp123@5.30.23.247)
[17:26:24] *** Quits: lisp123_ (~lisp123@45.86.200.16) (Ping timeout: 272 seconds)
[17:28:57] <Gnuxie> uhh
[17:29:05] <Gnuxie> someone just showed me this https://exercism.io/tracks/common-lisp
[17:29:07] *** Joins: sander (~sander@user/sander)
[17:30:02] <Gnuxie> i'm not exactly sure what it is or what to make of it yet, but i am relaying this because we should probably know about this as a community considering newbies are going to be put through this program
[17:32:02] *** Joins: hisacro (~OBSD@my.displ.nl)
[17:39:48] <Gnuxie> ok it's not as bad as i thought, it's some non profit with community contributions, they've only had 2000 people click the button to start the program
[17:39:53] <hayley> The example DISTANCE function already violates the LUV rules.
[17:51:14] <akater[m]> phantomics: I often think that init system is a very suitable target for a CL project.  And systemd made the idea of a rich init more acceptable or even mainstream.  If I knew how to turn it into a startup, it would be a very interesting one.
[17:53:31] <hayley> I guess all the code is that of the students, and I couldn't tell how good the mentors are. The exercises seem...underdescribed from what I can see without signing up or anything. The solutions produced are decent enough, so the course should be okay at least.
[17:54:57] <beach> phantomics: I don't know much about init systems, but any Unix code written in an unsafe language without automatic memory management would be a good candidate for a Common Lisp replacement.  Whether that will facilitate adoption of a Lisp OS I don't know.
[17:55:32] <beach> phantomics: Some widely used applications would be good candidates as well, like `evince', for instance.
[17:56:29] <hayley> The main issue I remember from flicking though the solutions was the use of WHEN to return NIL or some value. Otherwise, nothing bad.
[17:58:37] <hayley> Oh, the description of Common Lisp mentions CLOS and macros but there are no exercises utilising either. And don't tell beach that they use the wrong binary search algorithm.
[18:05:17] *** Joins: lotuseater (~user@p200300e7871b3f008a69ffac690ca7c7.dip0.t-ipconnect.de)
[18:07:19] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[18:09:40] <lisp123> hayley: do you have a copy of the 'right' binary search algorithm?
[18:09:53] <lisp123> seems useful to have on file
[18:11:06] *** Joins: cosimone (~user@2001:b07:ae5:db26:a7aa:8027:6b4e:2fb3)
[18:11:38] <hayley> The right search algorithm only checks equality when the range has been narrowed down to one element, from memory.
[18:11:47] <beach> Correct.
[18:12:00] <phantomics> akater[m] and beach: there is the Guile Scheme-based GNU Shepherd for Guix, so Lisp-based init systems already have some history
[18:12:06] <beach> The wrong one makes two tests per iteration, so it takes twice the time.
[18:12:22] <hayley> See the "alternative procedure" in https://en.wikipedia.org/wiki/Binary_search_algorithm
[18:12:26] <lisp123> Thanks!
[18:13:16] <beach> phantomics: Thanks.
[18:16:56] <akater[m]> phantomics: I'm aware of Guix.  I don't know how dynamic Guile is; I see the value in an interactive and likely image-based init, Common Lisp style.
[18:17:43] <phantomics> Certainly, and with CL you could do something much more modular than systemd
[18:18:28] <phantomics> The old init systems had their problems, but replacing them with an opaque monolith was not the way to go
[18:18:52] <nij-> I was on Guix for a week, and couldn't figure out how to compile a package. Thus ducked out.
[18:19:09] <beach> I should watch that YouTube video that keeps popping up, entitled "The Tragedy of systemd".
[18:19:26] <nij-> IIRC that's not really bashing systemd @@
[18:19:31] <nij-> despite its name
[18:19:45] <beach> Oh!
[18:22:01] <akater[m]> Meanwhile, I find myself using the Info version of ANSI Common Lisp draft instead of CLHS quite often.  Faster full-text search does make a difference, and for helm users, there's auto-generated `helm-info-ansicl` and while it does have its drawbacks compared to `hyperspec-` family, it's not bad and likely could be improved.  And ansicl draft sources are public domain.
[18:24:36] <random-nick> guile is reasonably dynamic afaik, they even have a clos-like system called goops and I think shepherd uses it
[18:25:07] <random-nick> but I think they made class redefinition disabled by default in guile 3
[18:25:50] *** Joins: cosimone` (~user@5.170.240.54)
[18:27:50] *** Quits: cosimone (~user@2001:b07:ae5:db26:a7aa:8027:6b4e:2fb3) (Ping timeout: 272 seconds)
[18:31:37] *** Quits: cosimone` (~user@5.170.240.54) (Ping timeout: 248 seconds)
[18:41:25] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[18:42:02] *** Joins: lisp123 (~lisp123@5.30.23.247)
[18:47:36] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 268 seconds)
[18:57:58] *** Quits: elf_fortrez (~elf_fortr@adsl-72-50-6-221.prtc.net) (Ping timeout: 246 seconds)
[19:06:53] *** Joins: lisp123 (~lisp123@5.30.23.247)
[19:13:06] *** Quits: cross (~cross@spitfire.i.gajendra.net) (Ping timeout: 240 seconds)
[19:14:49] *** Joins: cross (~cross@spitfire.i.gajendra.net)
[19:16:24] *** Joins: attila_lendvai (~alendvai@2a02:ab88:3707:bb00:5ee0:c5ff:feb2:29e2)
[19:21:24] *** Joins: gethuen (uid502979@id-502979.stonehaven.irccloud.com)
[19:23:40] *** Quits: Oddity (Oddity@user/oddity) (Remote host closed the connection)
[19:26:39] <pjb> rain3: yes, I suppose using print-unreadable-object without a body is safe. That should work.
[19:28:19] <pjb> mfiano: You could define a funcallable object that mixins with a condition ;-)
[19:28:56] <mfiano> As mentioned, the problem was about reading out of bounds in unsafe code. At that point, all bets are off.
[19:30:45] *** Quits: amb007 (~a_bakic@cable-94-189-181-220.dynamic.sbb.rs) (Ping timeout: 268 seconds)
[19:31:30] <pjb> hayley: I think I tend to adopt a flatter directory structure. I have subdirectories for specifications, analysis, design and documentation in addition to sources in the toplevel directory of the project, but rarely subdirectories in there.  I assume that the structure of the software can change without notice (refactoring, etc).  A design for a module would just be a chapter in the design document, so perhaps an included file if it's a
[19:31:30] <pjb> big document, but more probably just a org-mode section…
[19:32:11] <pjb> hayley: if you adopt a more "modular" directory structure, then keep doing it systematically (even if empty subdirectories are optional).
[19:32:58] <rain3> pjb: "You could define a funcallable object that mixins with a condition" I don't know this technique, how does it work ?
[19:33:25] <pjb> hayley: module_x/{specifications/,design/,sources/,submodules/submodule_y/{specifications/,design/,sources/}} etc.
[19:34:32] <pjb> rain3: I've never done it, ask beach. I just know there's a funcallable-standard-object class in MOP, and you can subclass it like any other class, and its instances can be called like normal functions.
[19:34:50] <pjb> You probably have to implement a special method to implement the "function" call.
[19:35:19] <rain3> yeah, and what about the 'mixing in with a condition ' part
[19:35:43] <rain3> I've seen funcallable objects here https://www.youtube.com/watch?v=nTI_d-jS6dI&list=PLXE4t-K0jFrrQHq4pahlQCSpi8yLcyQLV
[19:37:26] <pjb> this is just multiple-inheritance: (defclass my-function-condition (c2mop:funcallable-standard-object condition) ())  (handler-case (signal 'my-function-condition) (my-function-condition (funcond) (funcall funcond) (signal funcond)))
[19:37:48] *** Joins: jfrent (~josiah@user/jfrent)
[19:39:47] <rain3> and how to use it for debugging objects with unbound slots <<error printing object>>
[19:42:14] *** Joins: psycomic (~psycomic@2a01cb0588c5e400f4f85b0ac9afcceb.ipv6.abo.wanadoo.fr)
[19:42:32] <pjb> I don't know. I just responded to: <11:41:15><mfiano> Nowhere is a function accepted for a condition
[19:42:52] *** Joins: amb007 (~a_bakic@cable-94-189-181-220.dynamic.sbb.rs)
[19:42:56] <mfiano> Oh that.
[19:43:45] <rain3> oh
[19:43:49] <rain3> Okay
[19:43:50] *** Joins: Krystof (~user@81.174.155.115)
[19:44:57] <mfiano> pjb: How would you mixin with a condition if conditions are not specified to be CLOS objects?
[19:46:36] <mfiano> I didn't know you could do that, given condition is a direct subtype of T
[19:46:51] <mfiano> and not, say, standard-object
[19:49:38] <mfiano> and then there's also the conformance rules: "define-condition, not defclass, must be used to define new condition types." and "make-condition, not make-instance, must be used to create condition objects explicitly."
[19:52:35] <pjb> mfiano: I don't think it's a problem.
[19:53:30] <mfiano> I don't agree given those rules.
[19:53:52] <pjb> but you're right, you'd have to give a meta-class that's compatible with both.
[19:54:20] <mfiano> You cannot create a condition with standard class machinery.
[19:54:38] <mfiano> To be conforming you MUST use define-condition
[19:54:39] <pjb> Yes, it's not possible conformingly (already, funcallable objects is a MOP extension anyways).
[19:55:56] *** Joins: char (~charles@cpe-76-186-124-165.tx.res.rr.com)
[19:56:57] *** Joins: selwyn (~selwyn@user/selwyn)
[20:04:25] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[20:04:58] *** Joins: lisp123 (~lisp123@5.30.23.247)
[20:10:14] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 268 seconds)
[20:12:15] *** Joins: heretical_crypte (~heretical@2001:470:69fc:105::8054)
[20:32:56] <char> is there a portable way to rename bordeaux threads?
[20:34:15] *** Joins: robin (~robin@user/terpri)
[20:34:30] <random-nick> bordeaux-threads has the nickname bt
[20:35:25] <fe[nl]ix> char: why do you ask ?
[20:35:51] <char> random-nick: I mean rename a bordaux thread
[20:36:37] <char> fe[nl]ix: when a thread is started by the usocket server it names it "usocket client". I would like to name it something else.
[20:38:57] <fe[nl]ix> you need to fix usocket
[20:38:59] <random-nick> char: doesn't seem like bordeaux-threads has support for renaming
[20:39:20] *** Joins: bothillinois (~twi@191.101.31.62)
[20:39:50] <char> fe[nl]ix: what do you mean by that?
[20:40:03] <random-nick> and to implement renaming you'd have to implement it on all the supported implementations, since the implementations usually give that name to the OS
[20:40:09] *** Quits: jeosol (~jeosol@76-238-186-228.lightspeed.hstntx.sbcglobal.net) (Ping timeout: 248 seconds)
[20:40:56] <fe[nl]ix> there's no concept of thread name on Unix, maybe on Windows
[20:41:00] *** Joins: Bike (~Bike@71.69.170.70)
[20:41:00] *** ChanServ sets mode: +o Bike
[20:43:34] *** Joins: lisp123 (~lisp123@5.30.23.247)
[20:47:23] <random-nick> fe[nl]ix: linux, freebsd, netbsd, openbsd and darwin all seem to have thread names as an extension to pthreads https://github.com/sbcl/sbcl/blob/master/src/runtime/thread.c#L512
[20:49:03] *** Quits: d4ryus (~d4ryus@ppp-188-174-54-240.dynamic.mnet-online.de) (Quit: WeeChat 3.2)
[20:57:05] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 252 seconds)
[20:59:24] <fe[nl]ix> my bad, I forgot about that
[21:00:49] <char> I guess the best solution would be to add some configuration option to usocket?
[21:00:49] <fe[nl]ix> I created this issue https://github.com/sionescu/bordeaux-threads/issues/94
[21:03:09] <char> super cool
[21:03:20] *** Joins: d4ryus (~d4ryus@ppp-188-174-54-240.dynamic.mnet-online.de)
[21:05:15] <fe[nl]ix> it's pretty low priority for the moment, so the best way to see this done is for somebody else to do the reasearch and write the code
[21:05:44] <fe[nl]ix> might require requesting the implementations to add the setter
[21:09:05] <char> I've found that sbcl and ccl have ways to rename threads
[21:09:44] <char> ccl requres a setf slot-value, so I'm not sure how good that is
[21:10:57] *** Joins: lad (~lad@user/lad)
[21:13:02] *** Joins: jeosol (~jeosol@76-238-186-228.lightspeed.hstntx.sbcglobal.net)
[21:14:56] <random-nick> sbcl does have a setter but it doesn't tell the OS about the new name
[21:16:27] <random-nick> seems like it's only set in thread creation
[21:21:51] *** Joins: lisp123 (~lisp123@5.30.23.247)
[21:21:58] *** Quits: SAL9000 (~SAL9000@shirakumo/sal9000) (Quit: Rebooting)
[21:22:19] *** Joins: pve_ (~pve@87-93-221-142.bb.dnainternet.fi)
[21:23:05] *** Joins: hafat (~hafat@159.146.87.68)
[21:24:52] *** Joins: SAL9000 (~SAL9000@shirakumo/sal9000)
[21:25:29] *** Quits: pve (~pve@87-93-216-118.bb.dnainternet.fi) (Ping timeout: 248 seconds)
[21:27:08] *** Quits: pve_ (~pve@87-93-221-142.bb.dnainternet.fi) (Ping timeout: 272 seconds)
[21:27:12] *** Joins: pve (~pve@178-55-250-142.bb.dnainternet.fi)
[21:31:16] <char> I'm not super familar with threads; how important is it that the OS knows about the name?
[21:32:10] *** Quits: robin (~robin@user/terpri) (Remote host closed the connection)
[21:32:44] *** Joins: robin (~robin@user/terpri)
[21:33:37] <moon-child> does bt let you get a 'native thread handle'?  You could probably fanangle that into some cffi
[21:33:42] *** Quits: robin (~robin@user/terpri) (Remote host closed the connection)
[21:34:07] <random-nick> well I don't think the OS itself does much with the name, but other programs can read it
[21:34:11] *** Joins: robin (~robin@user/terpri)
[21:34:25] *** Quits: hafat (~hafat@159.146.87.68) (Quit: Leaving)
[21:35:41] *** Quits: robin (~robin@user/terpri) (Remote host closed the connection)
[21:36:12] *** Joins: robin (~robin@user/terpri)
[21:37:40] *** Quits: robin (~robin@user/terpri) (Remote host closed the connection)
[21:38:11] *** Joins: robin (~robin@user/terpri)
[21:38:28] *** Quits: robin (~robin@user/terpri) (Remote host closed the connection)
[21:45:35] <pjb> char: you could put threads in a hash-table mapping them to name or vice-versa.
[21:47:08] <char> pjb that is a good work around for now. thanks
[21:50:37] *** Quits: gethuen (uid502979@id-502979.stonehaven.irccloud.com) (Quit: Connection closed for inactivity)
[22:00:56] <fe[nl]ix> char: make sure it's a weak hash table or bad things will happen if threads are not allowed to be collected
[22:01:20] *** Joins: selwyn_ (~selwyn@user/selwyn)
[22:01:56] <pjb> char: see for example: https://github.com/informatimago/lisp/blob/master/clext/telnet/bt-patch.lisp
[22:02:23] <pjb> char: and: https://github.com/informatimago/lisp/blob/master/clext/telnet/bt-ccl-debug.lisp
[22:03:21] *** Quits: selwyn (~selwyn@user/selwyn) (Ping timeout: 248 seconds)
[22:05:56] <char> pjb. I'm not sure what a weak hashtable is, but a plain linked list will do for my purposes
[22:06:14] <char> I dont need to actually have unique names, I just need to keep track of all the threads I create
[22:06:38] <char> fe[nl]ix ^
[22:10:29] *** Quits: amb007 (~a_bakic@cable-94-189-181-220.dynamic.sbb.rs) (Ping timeout: 268 seconds)
[22:11:02] *** Joins: amb007 (~a_bakic@cable-94-189-181-220.dynamic.sbb.rs)
[22:11:08] *** Quits: hexology (~hexology@user/hexology) (Quit: hex on you ...)
[22:14:06] <random-nick> a weak hashtable is a hashtable where the keys and/or the values are weak references (they don't count as keeping the object alive)
[22:14:07] <pjb> char: a weak hashtable is a hashtable that doesn't keep the objects it references alive.
[22:15:57] <char> That sounds pretty epic
[22:16:22] *** Joins: kuler (~kulernil@gateway/tor-sasl/kuler)
[22:16:30] <char> I guess there is no such thing as a weak linked list?
[22:16:39] *** Quits: svillemot (~sebastien@rama.villemot.name) (Quit: WeeChat 3.0)
[22:18:17] <pjb> char: there are "weak-pointers".
[22:18:38] <pjb> char: see https://github.com/informatimago/lisp/blob/master/clext/closer-weak.lisp
[22:19:51] <char> thanks a ton
[22:21:33] <lotuseater> pjb: aren't there also smart pointer in C++?
[22:22:30] <pjb> Yes :-)
[22:23:24] <lotuseater> smart ^^
[22:25:57] <lotuseater> so objects in a non weak hash table aren't touch by the garbage collector?
[22:27:01] *** Quits: amb007 (~a_bakic@cable-94-189-181-220.dynamic.sbb.rs) (Ping timeout: 258 seconds)
[22:27:23] *** Joins: amb007 (~a_bakic@net219-37-245-109.mbb.telenor.rs)
[22:35:45] <char> lotuseater: I think it is the opposite
[22:36:45] <lotuseater> hmm
[22:37:42] <lotuseater> ah wait, so if a weak hash table gets garbage collected all elements it references will too
[22:38:46] <Bike> a "weak" reference is basically one the garbage collector doesn't follow. So if an object is not referenced by anything except a weak reference it can be collected.
[22:39:17] <Bike> The hash table itself works under normal collection rules. It won't be collected unless nothing refers to it, and its keys and values won't be collected when it is unless there are no other references to them.
[22:40:23] <Bike> In a normal, non-weak hash table, the garbage collector will follow the references in the hash table, so the keys and values can't be collected unless the hash table is. At that point, they can be collected if the hash table was the only thing referencing them, and otherwise can't be.
[22:41:36] <random-nick> there's also the added requirement where objects which are collected will disappear from weak hashtables and weak-pointers pointing to them will become empty
[22:42:15] <random-nick> that prevents the existence of invalid weak references
[22:43:40] *** Quits: amb007 (~a_bakic@net219-37-245-109.mbb.telenor.rs) (Read error: Connection reset by peer)
[22:45:00] *** Joins: amb007 (~a_bakic@87.116.175.2)
[22:51:11] *** Quits: amb007 (~a_bakic@87.116.175.2) (Ping timeout: 268 seconds)
[22:51:36] *** Joins: amb007 (~a_bakic@net219-37-245-109.mbb.telenor.rs)
[22:54:33] *** Quits: amb007 (~a_bakic@net219-37-245-109.mbb.telenor.rs) (Read error: Connection reset by peer)
[22:54:43] *** Joins: amb007 (~a_bakic@net219-37-245-109.mbb.telenor.rs)
[22:58:28] <moon-child> am I allowed to mutate &rest parameters?
[23:02:10] <Bike> no. implementations are allowed to skip copying them when a function is applied
[23:02:25] <Bike> "Because a function can neither detect whether it was called via apply nor whether (if so) the last argument to apply was a constant, conforming programs must neither rely on the list structure of a rest list to be freshly consed, nor modify that list structure."
[23:02:40] <Bike> i mean, you can mutate the variable itself
[23:02:50] <Bike> (lambda (&rest r) (setf r ...)) is fine
[23:04:07] <moon-child> hmm so
[23:04:34] <moon-child> if I only ever call the function directly, or apply to a _non-constant_ argument list, it's ok to mutate?
[23:04:45] <mfiano> (lambda (&rest r) (nreverse r)) is not
[23:06:41] <mfiano> moon-child: no
[23:07:07] <mfiano> conforming programs means all programs, regardless of these functions' access patterns
[23:21:27] <White_Flame> mutating the values in a &rest list should be fine, though, right?
[23:21:41] <White_Flame> s/values/elements/
[23:23:52] *** Quits: gendl (sid100083@id-100083.stonehaven.irccloud.com) (Ping timeout: 245 seconds)
[23:24:02] *** Quits: jmercouris (sid438340@id-438340.stonehaven.irccloud.com) (Ping timeout: 252 seconds)
[23:24:18] *** Quits: stylewarning (sid241636@id-241636.brockwell.irccloud.com) (Ping timeout: 240 seconds)
[23:24:56] *** Quits: IUSR (sid348938@id-348938.stonehaven.irccloud.com) (Ping timeout: 272 seconds)
[23:25:08] *** Quits: d_run (sid83858@id-83858.stonehaven.irccloud.com) (Ping timeout: 252 seconds)
[23:25:41] *** Quits: jcowan (sid325434@id-325434.charlton.irccloud.com) (Ping timeout: 252 seconds)
[23:25:53] <moon-child> (let ((x '(1 2))) (eq x (apply (lambda (&rest x) x) x)))
[23:25:57] *** Quits: jsatk (sid304796@id-304796.brockwell.irccloud.com) (Ping timeout: 245 seconds)
[23:26:03] *** Quits: conjunctive (sid433686@id-433686.brockwell.irccloud.com) (Ping timeout: 258 seconds)
[23:26:06] <Bike> White_Flame: yes
[23:26:12] *** Quits: iisi (sid19824@id-19824.stonehaven.irccloud.com) (Ping timeout: 272 seconds)
[23:26:18] *** Quits: jhi (sid81469@id-81469.tooting.irccloud.com) (Ping timeout: 240 seconds)
[23:26:20] <Bike> moon-child: an implementation could rewrite "direct" calls into some other form
[23:26:34] *** Quits: palter (sid27521@id-27521.brockwell.irccloud.com) (Ping timeout: 256 seconds)
[23:26:44] <Bike> if you really want to mutate, just copy-list first and you're fine
[23:26:57] <moon-child> ah, so ((lambda (&rest x) ...) 1 2) could be rewritten into ((lambda (x) ...) '(1 2))?
[23:27:00] *** Joins: jcowan (sid325434@id-325434.charlton.irccloud.com)
[23:27:04] <moon-child> Bike: I was just curious; don't have a practical application for this
[23:27:18] <mariari> I've had some weird beahviors from mapcan due to the mutation aspect of it
[23:27:22] <Bike> that is something that could happen, yes.
[23:27:34] *** Quits: travv0 (sid293381@user/travv0) (Read error: Connection reset by peer)
[23:27:54] *** Quits: alanz (sid110616@id-110616.highgate.irccloud.com) (Ping timeout: 240 seconds)
[23:27:57] *** Joins: conjunctive (sid433686@brockwell.irccloud.com)
[23:28:22] *** Quits: drmeister (sid45147@id-45147.charlton.irccloud.com) (Ping timeout: 258 seconds)
[23:28:22] *** Quits: ullbeking (sid5364@id-5364.charlton.irccloud.com) (Ping timeout: 258 seconds)
[23:28:40] *** Joins: jhi (sid81469@tooting.irccloud.com)
[23:29:15] *** Joins: travv0 (sid293381@user/travv0)
[23:29:52] *** Joins: palter (sid27521@brockwell.irccloud.com)
[23:29:58] *** Joins: ullbeking (sid5364@id-5364.charlton.irccloud.com)
[23:29:59] *** Joins: jsatk (sid304796@id-304796.brockwell.irccloud.com)
[23:30:03] *** Joins: drmeister (sid45147@id-45147.charlton.irccloud.com)
[23:30:14] *** Joins: alanz (sid110616@id-110616.highgate.irccloud.com)
[23:30:17] <Bike> implementations can do pretty exotic optimizations. for example on sbcl, if you don't use a rest list as conses (e.g. you only iterate over it and/or use it for more apply calls) it won't allocate a list at all
[23:30:18] *** Joins: stylewarning (sid241636@id-241636.brockwell.irccloud.com)
[23:30:36] <White_Flame> moon-child: in sbcl, the &rest list itself might not be a cons-based list at all, but just directly accessing/iterating over stack slots.  The devs finding that optimization opportunity does preclude any cons cell-based mutation
[23:30:58] <White_Flame> (missed it by *that* much)
[23:32:20] *** Joins: Guest54 (~Guest54@190.193.92.32)
[23:32:47] *** Quits: hendursa1 (~weechat@user/hendursaga) (Remote host closed the connection)
[23:33:13] *** Joins: hendursa1 (~weechat@user/hendursaga)
[23:34:03] <pl> SBCL will happily let you mutate things that shouldn't be mutated if you do safety 0 speed 3
[23:35:18] *** Joins: iisi (sid19824@id-19824.stonehaven.irccloud.com)
[23:35:59] *** Joins: IUSR (sid348938@id-348938.stonehaven.irccloud.com)
[23:36:21] *** Joins: d_run (sid83858@id-83858.stonehaven.irccloud.com)
[23:36:24] *** Joins: jmercouris (sid438340@id-438340.stonehaven.irccloud.com)
[23:36:47] *** Quits: Guest54 (~Guest54@190.193.92.32) (Client Quit)
[23:37:40] *** Joins: gendl (sid100083@id-100083.stonehaven.irccloud.com)
[23:47:46] *** Quits: amb007 (~a_bakic@net219-37-245-109.mbb.telenor.rs) (Read error: Connection reset by peer)
[23:48:24] *** Joins: amb007 (~a_bakic@net219-37-245-109.mbb.telenor.rs)
[23:48:25] *** Quits: amb007 (~a_bakic@net219-37-245-109.mbb.telenor.rs) (Read error: Connection reset by peer)
[23:49:03] *** Joins: amb007 (~a_bakic@net219-37-245-109.mbb.telenor.rs)
[23:59:36] *** Quits: frgo (~frgo@p200300deef0cee00a4df60854a3f6667.dip0.t-ipconnect.de) (Quit: Leaving...)
