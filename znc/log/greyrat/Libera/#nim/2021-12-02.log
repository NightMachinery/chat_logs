[00:00:07] <FromDiscord> <Yardanico> In reply to @DaiChimpo "earlier got stuck on": https://nim-lang.org/docs/system.html#system-module-numbers :)
[00:00:18] <FromDiscord> <Yardanico> specifically the "Also known as (in other languages)" for comparison
[00:00:31] <FromDiscord> <DaiChimpo> I tried % and it was giving me errors!
[00:00:37] <FromDiscord> <Yardanico> yes, because as I linked it
[00:00:39] <FromDiscord> <DaiChimpo> whatever, it's done now and I've learned from it
[00:00:41] <FromDiscord> <Yardanico> % is not how it is written in Nim
[00:00:50] <FromDiscord> <DaiChimpo> why can't I read table headers
[00:00:52] <FromDiscord> <Yardanico> "usage" is nim, third column is other languages https://media.discordapp.net/attachments/371759389889003532/915701503380054047/unknown.png
[00:01:28] <FromDiscord> <DaiChimpo> oh yeah I did try to use | earlier in this program too. it's rough.
[00:07:37] *** Quits: lumo_e (~enrico@151.29.48.90) (Ping timeout: 252 seconds)
[00:22:25] <PMunch> @DaiChimpo, sounds like you and I solved AoC about the same way :P
[00:22:32] <PMunch> I used mod 3 though :)
[00:23:18] <FromDiscord> <DaiChimpo> ah yeah I did mine a little inefficiently to get an answer quick haha
[00:23:28] <FromDiscord> <Yardanico> yeah @PMunch i'll admit i solved it the dumb way with the seq for part 2 :)
[00:23:53] <FromDiscord> <DaiChimpo> Mine was an array of 4 values, the ABCD registers, and the loop kept track of which was the dead spot, essentially
[00:24:18] <FromDiscord> <DaiChimpo> got some points in a private leaderboard though :happy:
[00:25:13] <FromDiscord> <Yardanico> yeah, you can use aoc for "speed programming" to solve tasks fast, and then use it for "clever code" by changing code you made
[00:26:49] <FromDiscord> <DaiChimpo> sent a code paste, see https://play.nim-lang.org/#ix=3GIf
[00:26:51] <PMunch> @DaiChimpo, aah I see, I kept a rolling window which just had a small array of the window size so I could subtract values as they left the sum
[00:27:40] <FromDiscord> <Yardanico> In reply to @DaiChimpo "I saw someone solve": i think it's because it fit _their_ puzzle input
[00:27:51] <PMunch> Yeah, that doesn't look correct :P
[00:27:59] <FromDiscord> <DaiChimpo> fit mine too, must've been a coincidence lol
[00:28:14] <FromDiscord> <Yardanico> mine too :D
[00:28:19] <FromDiscord> <DaiChimpo> lolll
[00:28:20] <FromDiscord> <Yardanico> yeah, maybe an oversight in the puzzle input
[00:28:37] <FromDiscord> <Yardanico> they exploited an edge case :P
[00:28:44] <FromDiscord> <DaiChimpo> there's too many counterexamples in my head, gotta be coincedences
[00:28:54] <FromDiscord> <DaiChimpo> BUT it is a lesson in algorithm optimization
[00:28:55] <FromDiscord> <Yardanico> this is clever, but it's kind of cheating and not on the point :P
[00:29:08] <FromDiscord> <DaiChimpo> why do more when less do right
[00:29:09] <FromDiscord> <Yardanico> it's just solving the task with _specific_ input, not generic-for-anything
[00:29:55] <FromDiscord> <DaiChimpo> yeah I think this mainly works because the trend was very steep. if the differences in group sums was like, +/- 5, this would be less likely
[00:30:09] <FromDiscord> <DaiChimpo> now I'm gonna be looking for a similar cheat on day 2
[00:34:22] *** Joins: lumo_e (~enrico@151.29.48.90)
[00:35:49] <PMunch> Damn it.. Works for my input as well..
[00:36:41] <FromDiscord> <Yardanico> actual aoc exploit :P
[00:36:50] <FromDiscord> <Yardanico> In reply to @DaiChimpo "I saw someone solve": did they post it as a reddit thread?
[00:40:29] <FromDiscord> <Zoom> I've finally bent std/pegs to my will for the 18th day of 2020. Made it a challenge to not use 3d party libs
[00:41:20] <FromDiscord> <Yardanico> ===restarting the discord-irc bridge, expect a <1 minute downtime===
[00:41:21] <FromDiscord> <dain> it isn't a nedge case
[00:41:24] <FromDiscord> <Zoom> That `eventParser` in pegs looks a bit clumsy but it gets the job done
[00:41:26] <FromDiscord> <dain> (edit) "a nedge" => "an edge"
[00:41:28] *** Quits: FromDiscord (~FromDisco@mail.nim-lang.org) (Remote host closed the connection)
[00:42:03] *** Joins: FromDiscord (~FromDisco@mail.nim-lang.org)
[00:42:26] <FromDiscord> <Yardanico> restarted the bridge
[00:42:26] <FromDiscord> <dain> sent a code paste, see https://play.nim-lang.org/#ix=3GIk
[00:42:41] <PMunch> @Zoom, haha why oh why :P
[00:42:48] <PMunch> npeg is such a nice fit for AoC
[00:42:59] <PMunch> Here's my repo by the way: https://github.com/PMunch/aoc2021
[00:42:59] <FromDiscord> <dain> so for comparing (a + b + c) to (b + c + d), the b + c is shared between them
[00:43:00] <nrds> <12R2D299> 4GitHub: 7"Advent of Code 2021 solutions in Nim"
[00:43:02] <FromDiscord> <dain> so they cancel out
[00:43:06] <FromDiscord> <dain> and you only have to compare a with d
[00:43:08] <FromDiscord> <Yardanico> In reply to @dain "so they cancel out": oh, okay
[00:43:13] <FromDiscord> <Yardanico> so they made a really clever solution, nice
[00:43:32] <FromDiscord> <Zoom> Even this fact barely explains that sub 30s result on the graph
[00:44:18] <Yardanico> oh so R2D2 has been writing this stuff in colours since forever
[00:44:25] <FromDiscord> <Zoom> I'd say they made a really clever task so all who rushed would be punished for not taking their time to think↵(@Yardanico)
[00:44:25] <Yardanico> guess ircord irc color stripping works after all
[00:44:47] <FromDiscord> <Yardanico> In reply to @Zoom "I'd say they made": well, not exactly "punished"
[00:44:57] <FromDiscord> <Yardanico> default aoc rules and leaderboard are made for speed programming
[00:45:13] <FromDiscord> <Yardanico> generally not caring how code is implemented
[00:45:19] <FromDiscord> <Yardanico> of course there are exceptions where things like bruteforce won't work
[00:45:22] <FromDiscord> <Yardanico> but not on the starting days
[00:45:22] <PMunch> Why strip them :P
[00:45:33] <FromDiscord> <Yardanico> @PMunch discord doesn't have colours :(
[00:45:40] <FromDiscord> <Yardanico> for text formatting
[00:45:45] <FromDiscord> <Zoom> Feeling real dumb is a fine punishment↵(@Yardanico)
[00:46:07] <FromDiscord> <dain> sent a code paste, see https://play.nim-lang.org/#ix=3GIl
[00:46:15] <FromDiscord> <Recruit_main707> spoilers!
[00:46:19] <FromDiscord> <Yardanico> yep
[00:46:22] <PMunch> 10W11h12a13t02?03!04 05N06o07 08c09o10l11o12u13r02s03!
[00:46:25] <FromDiscord> <dain> oh sorry
[00:46:26] <FromDiscord> <Yardanico> also we have #aoc
[00:46:29] <FromDiscord> <Yardanico> but it's not bridged to matrix
[00:46:40] <FromDiscord> <dain> deleted :x
[00:46:44] <FromDiscord> <Yardanico> too late
[00:46:47] <FromDiscord> <dain> ;-;
[00:47:30] <FromDiscord> <Yardanico> irc doesn't have a way to delete messages, so your message is left for everyone to see
[00:47:36] <FromDiscord> <Recruit_main707> hehe, well tbh i already have a pretty clear idea of what needs to be done, the problem is im using a stack language and im not used to it at all lol, its been over an hour of thinking how to do something i perfectly know how
[00:47:43] <FromDiscord> <Yardanico> although it's a link to a code paste on play.nim-lang.org, so if ix.io goes down your code will disappear
[00:51:18] <Zevv> PMunch: last year there were a few natural  fits for npeg, like https://github.com/zevv/aoc2020/tree/master/04
[00:52:02] <FromDiscord> <Zoom> Does anyone here share their nvim `.vimrc`s? Looking for inspiration, preferably with minimal plugins.
[00:52:59] <FromDiscord> <Zoom> Is the nimlsp the way to go?
[00:53:22] <FromDiscord> <Yardanico> i've never used nvim but doesn't https://github.com/alaviss/nim.nvim work fine with it?
[00:53:24] <nrds> <12R2D299> 4GitHub: 7"Nim plugin for NeoVim"
[00:53:35] <FromDiscord> <Yardanico> it's a "native" nimsuggest nvim plugin, so it doesn't use nimlsp
[00:55:24] <FromDiscord> <Smarc> Hello Guys, I did not found a specialized code review room, so I'm going to try it in here. I'd like to know what I could improve in my code (not in particular linewise, more like the whole lot) and make more the nim way https://github.com/Smarcy/nim_chess
[00:55:25] <nrds> <12R2D299> 4GitHub: 7"<No Description>"
[00:55:49] <FromDiscord> <Yardanico> In reply to @Smarc "Hello Guys, I did": sure, it's fine to post it here, but for more exposure you might also post it on the forum
[00:56:03] <FromDiscord> <Smarc> Noted :)
[00:56:37] <FromDiscord> <Zoom> It does and that's what I'm using currently↵(@Yardanico)
[00:56:52] <FromDiscord> <Yardanico> already a small note - did you do "Board = object of RootObj" because you want to create some objects that will inherit from Board in the future?
[00:56:57] <PMunch> Zevv, I had four days I used it for. 7, 16, 19, and 21
[00:56:59] <FromDiscord> <Yardanico> "of RootObj" is only needed for that
[00:57:09] <FromDiscord> <Yardanico> otherwise you can just have "Board = object" and fields below
[00:57:35] <FromDiscord> <Smarc> Maybe that was an idea in the beginning, but not anymore. Thank you for the catch
[00:58:47] <FromDiscord> <Yardanico> Also, instead of having `Piece` as `ref object` you can have it as `object`, I see you inherit Piece but it'll work the same with `object`. You might want to keep it a `ref` if you plan on using `method`s in the future though (dynamic dispatch)
[00:59:12] *** Quits: Jjp137 (~Jjp137@2603-8000-2a01-3406-92fb-a6ff-fee2-6861.res6.spectrum.com) (Quit: Leaving)
[00:59:23] *** Joins: Jjp137 (~Jjp137@2603-8000-2a01-3406-92fb-a6ff-fee2-6861.res6.spectrum.com)
[01:00:52] <FromDiscord> <Smarc> That is crashing for me, the compiler does not allow inheritance if the base class is not ref of `ref of RootObj`
[01:01:10] <FromDiscord> <Yardanico> inheritance will work with `of RootObj` without a ref
[01:01:40] <FromDiscord> <Smarc> Ah, I see. What about the several Pieces? Should they be refs for any reason?
[01:01:41] <FromDiscord> <Yardanico> ah, right, you're also using `ref` objects for easier mutability
[01:02:03] <FromDiscord> <Smarc> I never were really sure if I should use ref or not actually
[01:02:05] <FromDiscord> <Yardanico> ooh, also you should never cast like `cast[Rook](sourcePiece)`
[01:02:13] <FromDiscord> <Yardanico> this is unsafe, you should use a type-safe conversion instead
[01:02:15] <FromDiscord> <Yardanico> like Rook(sourcePiece)
[01:02:15] <FromDiscord> <Michal58> In reply to @DaiChimpo "I saw someone solve": Huh, here I am wondering why so many people didn't do it this way..
[01:02:24] <FromDiscord> <Yardanico> `cast` is just treating the same bytes as a different type
[01:02:48] <FromDiscord> <Smarc> I figured that that would be smelly :D Gonna try it out
[01:04:02] <FromDiscord> <Yardanico> hmm
[01:04:58] <FromDiscord> <Smarc> I'm getting an error if I change it to `Rook(sourcePiece)`. type mismatch: got queen instead of (rook|bishop) .. huh?
[01:05:20] <FromDiscord> <Yardanico> well, because it's kind of unsafe actually
[01:05:32] <FromDiscord> <Yardanico> i think that you can convert between the subtype and its parent type
[01:05:35] <FromDiscord> <Yardanico> but not between subtypes
[01:06:07] <FromDiscord> <Smarc> Okay so the unsafe `cast` is maybe the only sane solution? I mean it should work every time there, I still feel its unsafe
[01:06:19] <FromDiscord> <Yardanico> well, it might work every time but it'll remain unsafe
[01:06:23] <FromDiscord> <Yardanico> I can easily show you how it's unsafe
[01:06:56] <FromDiscord> <Smarc> Thank you, I'm more interested in a code review :)
[01:07:25] <FromDiscord> <Yardanico> well, this is kind of a part of the code review :P
[01:07:49] <FromDiscord> <Yardanico> ahh i understand why you used casting
[01:08:01] <FromDiscord> <Yardanico> you wanted queen code to reuse the same code for bishop and rook
[01:08:03] <FromDiscord> <Yardanico> it does make sense, yeah
[01:08:16] <FromDiscord> <Smarc> should work every time :s
[01:09:52] <FromDiscord> <DaiChimpo> In reply to @dain "so for comparing (a": THANK you. I'm on fifty hours no sleep, this cause was elusive
[01:10:09] <FromDiscord> <Yardanico> In reply to @Smarc "should work every time": it will, but it's actually undefined behaviour
[01:10:11] <FromDiscord> <Yardanico> "/home/dian/Projects/NimExperiments/nim_chess/src/model/pieces.nim:36:29: runtime error: load of value 49, which is not a valid value for type 'bool'"
[01:10:25] <FromDiscord> <Yardanico> because you're reaching memory you actually might not have access to
[01:10:35] <FromDiscord> <Smarc> I was able to change the cast into a type-safe variant. I just reassigned sourcePiece to (Piece)sourcePiece beforehand
[01:10:49] <FromDiscord> <Smarc> oh, how did you provoke that?
[01:11:14] <FromDiscord> <Yardanico> In reply to @Smarc "I was able to": yes, that'll work if you don't need to mutate it in those can move procs
[01:11:18] <FromDiscord> <Yardanico> In reply to @Smarc "oh, how did you": I used clang's UBSAN
[01:11:57] <FromDiscord> <Yardanico> it won't show that error on your tests because you didn't test for it though
[01:12:52] <FromDiscord> <Smarc> yeah, I just started testing in nim a few days ago and am adding some step by step
[01:13:52] <FromDiscord> <Yardanico> sent a long message, see http://ix.io/3GIs
[01:14:13] <FromDiscord> <Yardanico> so if you access `canCastle` of a `Rook` casted from Queen you might get an access violating, a sigsegv, or something else
[01:14:42] <FromDiscord> <Smarc> Does this behaviour happen when I use type-safe casting?
[01:14:44] <FromDiscord> <Michal58> I have  a quite simple lichens bot written Nim, we can let them play some time. https://github.com/MichalMarsalek/nimbochromis
[01:14:44] <FromDiscord> <Yardanico> and in your case that can actually be dangerous because you do `  sourcePiece.canCastle = false` in Rook's checking proc
[01:14:45] <nrds> <12R2D299> 4GitHub: 7"<No Description>"
[01:14:51] <FromDiscord> <Yardanico> In reply to @Smarc "Does this behaviour happen": no, then it'll be safe
[01:14:56] <FromDiscord> <Michal58> (edit) "lichens" => "lichess"
[01:15:32] <FromDiscord> <Smarc> Okay great, then you already fixed that and thanks a lot for the explanation!
[01:15:56] <FromDiscord> <Yardanico> i remember there being a malloc implementation that was specifically crafted to find all sorts of memory-related bugs, can't remember the name
[01:16:23] <FromDiscord> <Smarc> Why does a Piece have 32 Bytes, but a Queen only 8, though? And the Rook has one byte more?
[01:16:23] <FromDiscord> <Yardanico> but clang's UBSAN also works for most cases
[01:16:31] <FromDiscord> <Yardanico> In reply to @Smarc "Why does a Piece": nonon, I meant that data inside the Piece has 32 bytes
[01:16:41] <FromDiscord> <Yardanico> piece itself is 8 bytes since it's a reference to that data (on 64-bit)
[01:16:45] <FromDiscord> <Yardanico> Queen is the same
[01:16:45] <FromDiscord> <iffy (Matt Haggard)> This program's segfault is not a true segfault, right? It's a Nim-emitted "segfault"? https://play.nim-lang.org/#ix=3GIt
[01:16:52] <FromDiscord> <Yardanico> and Rook has 8 bytes more because it has an additional field
[01:17:00] <FromDiscord> <Smarc> Ahhh, I see
[01:17:04] <FromDiscord> <Yardanico> even if it's `bool` objects are aligned by default on most platforms
[01:17:09] <FromDiscord> <Yardanico> so 1 byte is aligned to 8 bytes
[01:17:19] <FromDiscord> <Yardanico> because that's the native machine word "size" for 64-bit
[01:17:27] <FromDiscord> <Smarc> okay, understood
[01:19:04] <FromDiscord> <Yardanico> @Smarc about the code itself - I can see a way to make piece_factory code much shorter by using loops
[01:19:19] <FromDiscord> <Yardanico> it'll be a tiny bit less efficient, but it doesn't really matter since it's only executed once at the start as I understand
[01:19:45] <FromDiscord> <iffy (Matt Haggard)> And same with this "segfault"? https://play.nim-lang.org/#ix=3GIu
[01:20:24] <FromDiscord> <Yardanico> In reply to @iffy (Matt Haggard) "This program's segfault is": this just fails because JsonNode is a ref object
[01:20:29] <FromDiscord> <Yardanico> and dereferencing a nil ref object is a SIGSEGV
[01:20:46] <FromDiscord> <Yardanico> In reply to @iffy (Matt Haggard) "And same with this": same here, Future[T] is a ref object
[01:20:46] <FromDiscord> <iffy (Matt Haggard)> But it's Nim that's catching that, right? Not the OS
[01:20:56] <FromDiscord> <Smarc> In reply to @Yardanico "it'll be a tiny": I thought about that, just lazyness kept me from refactor it tbh. But is there anything in this code that you would call an anti-nim-pattern or something?
[01:21:01] <FromDiscord> <Yardanico> In reply to @iffy (Matt Haggard) "But it's Nim that's": it's OS catching that and reporting it to Nim since Nim has a default signal handler for SIGSEGV
[01:21:14] <FromDiscord> <iffy (Matt Haggard)> oh, okay
[01:22:28] <FromDiscord> <Yardanico> In reply to @Smarc "I thought about that,": hmm, don't think so, can't see anything bad in the nim code itself
[01:22:46] <FromDiscord> <iffy (Matt Haggard)> I'd be interested in adding a compile mode that fails for possible nils during compilation or maybe that disables nils altogether. No, I haven't thought it all the way through \:) I'm just tired of getting those errors.
[01:23:01] <FromDiscord> <Yardanico> there's the "return" vs "result" thing, and Nim code usually leans to the "result" side more, but you can use return just as fine
[01:23:19] <FromDiscord> <Yardanico> also, @Smarc if you were to use methods you wouldn't need this proc at all https://media.discordapp.net/attachments/371759389889003532/915722248839630869/unknown.png
[01:23:37] <FromDiscord> <Yardanico> you'll just have isValidMovePattern for each piece type and since they're methods they'll be dynamically dispatched
[01:24:03] <FromDiscord> <Yardanico> but OOP is "kind of" less popular in Nim since it leans towards composition
[01:24:36] <FromDiscord> <Yardanico> In reply to @iffy (Matt Haggard) "I'd be interested in": there was an experimental notNil feature that was never finished really
[01:24:43] <FromDiscord> <Yardanico> it might get finished for 2.0 though :) https://github.com/nim-lang/RFCs/issues/437
[01:24:59] <FromDiscord> <Yardanico> https://nim-lang.org/docs/manual_experimental.html#not-nil-annotation
[01:25:16] <FromDiscord> <Smarc> Well, I'm coming from Java, I think you can see that from some structural attributes. :)↵What do you mean by using method? I don't really understood what it differs from proc yet
[01:25:18] <FromDiscord> <Yardanico> it's an experimental feature though, so it might break anywhere or crash your compiler
[01:25:29] <FromDiscord> <Yardanico> In reply to @Smarc "Well, I'm coming from": basically nim `proc`s are static dispatch
[01:25:37] <FromDiscord> <Yardanico> the compiler figures out which proc you are actually calling at compile time
[01:25:43] <FromDiscord> <Yardanico> by checking the (static) type of the variable
[01:26:09] <FromDiscord> <Yardanico> with methods it uses runtime dispatch - it finds the best suited method to call for that type and calls it
[01:26:23] <FromDiscord> <Yardanico> so basically runtime dispatch is the java way
[01:26:44] <FromDiscord> <Yardanico> you might've seen "static" methods in java - those are actually static dispatch
[01:28:02] <FromDiscord> <Yardanico> @Smarc see https://nim-lang.org/docs/manual.html#methods for some documentation on methods
[01:28:25] <FromDiscord> <Yardanico> also https://nim-lang.org/docs/tut2.html#object-oriented-programming
[01:29:13] <FromDiscord> <Smarc> Hm, I'm getting an error if I remove the cast and change the proc to method. I shall add {.base.} to the method, which results in a `this method is not a base`
[01:29:30] <FromDiscord> <Yardanico> In reply to @Smarc "Hm, I'm getting an": you need to define a base method for the `Piece`
[01:29:37] <FromDiscord> <Yardanico> base methods are the ones that are defined on the base type
[01:30:04] <FromDiscord> <Yardanico> and in that method you can write an error or something if you don't intend to actually have that logic implemented for `Piece`
[01:32:36] <FromDiscord> <iffy (Matt Haggard)> Maybe `notnil` doesn't work with inheritance? https://play.nim-lang.org/#ix=3GIA
[01:33:58] <FromDiscord> <Yardanico> In reply to @iffy (Matt Haggard) "Maybe `notnil` doesn't work": it emits a warning though
[01:33:59] <FromDiscord> <Yardanico> `/home/dian/Projects/NimExperiments/aoc/2021/what.nim(4, 29) Warning: Cannot prove that 'result' is initialized. This will become a compile time error in the future. [ProveInit]`
[01:34:15] <FromDiscord> <Yardanico> did you maybe miss it?
[01:34:45] <FromDiscord> <iffy (Matt Haggard)> oh, the playground doesn't show compile warnings \:)
[01:35:11] <FromDiscord> <iffy (Matt Haggard)> Unless you click that button. Okay, yes, I see it. That's great! This is what I want
[01:35:41] <FromDiscord> <Elegantbeef> @apahl\: did i say they were copied passing to a proc, that seems very wrong and i must've been dumb in that minute 😜
[01:36:02] <FromDiscord> <iffy (Matt Haggard)> Well, I want a way to add a `not nil` annotation to JsonNode and Future, too (enabled with a flag is fine). Maybe that's the part I can contribute
[01:36:40] <FromDiscord> <Yardanico> the thing is that the patch won't get accepted
[01:36:47] <FromDiscord> <Yardanico> precisely because not nil is an experimental feature
[01:36:58] <FromDiscord> <bananahead> Hi all, are there any good docs explaining differences between procs and funcs? Not sure I understand the difference.
[01:37:07] <FromDiscord> <iffy (Matt Haggard)> Even if it's only enabled explicitly?
[01:37:08] <FromDiscord> <Yardanico> there's actually a different implementation of notnil in nim that's newer and also experimental - https://nim-lang.github.io/Nim/manual_experimental_strictnotnil.html
[01:37:24] <FromDiscord> <Yardanico> In reply to @bananahead "Hi all, are there": funcs are just `proc`s with `{.noSideEffect.}`
[01:37:38] <FromDiscord> <Yardanico> https://nim-lang.org/docs/manual.html#procedures-func, and for the noSideEffect itself - https://nim-lang.org/docs/manual.html#effect-system-side-effects
[01:37:43] <FromDiscord> <Elegantbeef> No side effect means the procedure cannot touch global state
[01:38:42] <FromDiscord> <Yardanico> so if you use `func` you tell the compiler that the routine doesn't access global state, and if that's not the case, it'll show you an error
[01:38:45] <FromDiscord> <Yardanico> and refuse to compile the code
[01:39:23] <FromDiscord> <Elegantbeef> There's also the lovely experimental `strictFuncs` which prevents mutation of even `ref T` without `var`
[01:39:38] <FromDiscord> <iffy (Matt Haggard)> So if a patch won't be accepted, is my only option at this point to `type MyJsonNode = JsonNode not nil` in my own code and convert from `MyJsonNode` back to `JsonNode` for other things to use?
[01:39:48] <FromDiscord> <iffy (Matt Haggard)> And same with `Future`s?
[01:40:10] <FromDiscord> <iffy (Matt Haggard)> I think Futures are too invasive for it to be practical to have my own `not nil` version
[01:40:37] <FromDiscord> <bananahead> Oh thats good. So funcs are analogous to pure functions in a way, only modifying the function input .
[01:41:25] <FromDiscord> <Elegantbeef> Yea that's their goal
[01:41:34] <FromDiscord> <Elegantbeef> hence `func` instead of \`proc1
[01:41:43] <FromDiscord> <iffy (Matt Haggard)> gtg, but thanks for pointing me in the right direction, Yardanico. Good luck with AoC \:)
[01:41:55] <FromDiscord> <Yardanico> thanks :P
[01:42:23] <PMunch> I think maybe proc and func needs to be documented a bit better. Seems multiple people are confused about them
[01:43:14] <FromDiscord> <Elegantbeef> Be the change you want to see in the world pmunch 😛
[01:43:20] <FromDiscord> <bananahead> In reply to @Elegantbeef "hence `func` instead of": Yeah so generally funcs should be preffered over procs I guess.
[01:44:26] <FromDiscord> <Elegantbeef> Yep, Nim also will implicitly mark procs as `noSideEffect` if they dont have any side effect
[01:45:37] <FromDiscord> <Elegantbeef> Which might seem pointless but if you do someting like `var someEvent = somePureProc` you cannot reassign `someEvent` to a proc with a side effect
[01:45:42] <FromDiscord> <Elegantbeef> Without type conversions of course
[01:45:53] *** Quits: neurocyte0132889 (~neurocyte@user/neurocyte) (Ping timeout: 252 seconds)
[01:47:19] <FromDiscord> <bananahead> Ahh that's good to know. Thank you @ElegantBeef
[01:47:46] <PMunch> @Elegantbeef, hmm I guess
[01:49:36] <FromDiscord> <Elegantbeef> Hey if i dont make shitty jokes what'll get done?!
[01:52:02] <FromDiscord> <Yardanico> [Zoom](https://matrix.to/#/@Zoom:matrix.org)\: AoC is now bridged to #nim-aoc\:matrix.org
[01:52:09] <FromDiscord> <Yardanico> feel free to join it for AoC discussions
[01:52:44] <FromDiscord> <Yardanico> (us mere mortals in Discord already have #aoc if anyone missed it)
[01:53:19] <anddam> Yardanico: thanks for the info earlier. I got the cimgui dynamic lib working, so I can use nim with C backend and nimgl/imgui
[01:53:26] <FromDiscord> <Yardanico> nice
[01:53:44] <anddam> Yardanico: not really clear how to statically link the lib, I placed libcimgui.a near test.nim then ran
[01:54:03] <anddam> nim c --dynlibOverride:cimgui --passC:libcimgui.a --passL:-L. --passL:-lcimgui test.nim
[01:54:19] <PMunch> Hmm, just to figure out where to put it..
[01:54:33] <anddam> actually I am not even sure I should pass -L -l for a static lib, rather than just passing the archive to the compiler
[01:54:39] <PMunch> @bananahead, where would you have expected to find the proc/func difference definition
[01:54:41] <anddam> so just --passC in my case
[01:54:43] <Yardanico> anddam: you don't need passC and -L here
[01:54:45] <Yardanico> just the last passL 
[01:54:49] <Yardanico> and did it error out or work?
[02:08:27] <PMunch> Hmm, my dunst config finally borked out. Might be time to replace it with notifishower/-catcher
[02:09:41] <anddam> Yardanico: https://termbin.com/9aib
[02:09:49] <anddam> errored
[02:10:00] <Yardanico> aha
[02:10:06] <Yardanico> that looks like an actual bug in the wrapper, but it should be easy to fix
[02:10:27] <anddam> like a mismatch between nimgl/imgui and the imgui I used in cimgui repo?
[02:10:44] <Yardanico> hmm, maybe that, or more likely a wrong type used in nimgl/imgui for a cimgui function signature
[02:10:52] <anddam> btw I checked the difference between cimgui/cimgui and nimgl/cimgui, the latter has its own imgui version bump
[02:11:00] <anddam> so I'll have a try at its master
[02:11:17] <anddam> its == nimgl/cimgui's
[02:16:48] <anddam> btw the error only happens with the static lib, it works fine with the dynamic lib 
[02:17:04] *** Quits: src (~src@user/src) (Quit: Leaving)
[02:19:25] <FromDiscord> <Yardanico> yeah because types aren't strictly checked for dynamic library :)
[02:19:46] <FromDiscord> <Yardanico> But with a static library the C compiler has access to both definition and can compare them
[02:20:00] <PMunch> Type mismatches in a wrapper? Haaave you tried Futhark?
[02:20:05] <FromDiscord> <Yardanico> I'll check out the error soon
[02:24:38] <anddam> PMunch: I haven't, considering I had to look for it on the web three times just to find it
[02:25:04] <PMunch> Three times? It should be the top result for "Nim futhark"
[02:25:26] <anddam> ah I did not use nim
[02:26:01] <anddam> oh lol https://github.com/PMunch/futhark
[02:26:03] <nrds> <12R2D299> 4GitHub: 7"Automatic wrapping of C headers in Nim"
[02:26:10] <PMunch> Once you've used Nim long enough you don't have to :)
[02:26:14] <anddam> the title says it all
[02:26:23] <anddam> yeah this is my second night
[02:26:49] <PMunch> Tried to make it as easy as possible
[02:27:08] <PMunch> Starting out with wrapping C, brave!
[02:28:57] <anddam> no, I really would just like to statically link dear imgui
[02:29:32] <FromDiscord> <Yardanico> yeah I get the same error as you @anddam, will try to see how to fix it now
[02:32:17] <anddam> I am reading those errors
[02:32:40] <anddam> the igBegin definition seems alike, although not the same
[02:32:59] <anddam> it is    N_CDECL(NIM_BOOL, igBegin)    with    #    define N_CDECL(rettype, name) rettype name    macro
[02:33:09] <anddam> so NIM_BOOL igBegin
[02:33:15] <FromDiscord> <Yardanico> nonono, the latter is not a definition
[02:33:29] <anddam> I figured that was another macro defining a bool type
[02:33:40] <FromDiscord> <Yardanico> you're comparing wrong lines
[02:33:48] <FromDiscord> <Yardanico> its N_CDECL(NIM_BOOL, igBegin)(NCSTRING name, NIM_BOOL p_open, tyEnum_ImGuiWindowFlagslvrkR9a8PwSfwRiBZ19bRNCw flags); and CIMGUI_API bool igBegin(const char name,bool p_open,ImGuiWindowFlags flags);
[02:33:52] <FromDiscord> <Yardanico> for the first mismatch
[02:34:29] <anddam> and that's the part I copied
[02:34:42] <anddam> the error is at the igBegin symbol, isn't it?
[02:36:32] <FromDiscord> <Yardanico> no, the error seems to be with  `bool` vs `NIM_BOOL`
[02:37:53] <anddam> yes, that's where I was going
[02:40:37] <FromDiscord> <Yardanico> oh, actually it can be because of  `const char ` vs `char ` which is treated as separate types in C++
[02:43:00] <PMunch> Hmm, accessing a global `let` from a func is an error. Should it be?
[02:43:04] <FromDiscord> <Yardanico> yes
[02:43:22] <FromDiscord> <Yardanico> i think the logic is that let is initialized in runtime
[02:43:22] <PMunch> Why? It's immutable
[02:43:40] <FromDiscord> <Yardanico> @PMunch not always, let refs are mutable  (but strictFuncs deals with all mutable refs anyway)
[02:43:43] <PMunch> But if it's defined before the func it is initialised
[02:50:09] <FromDiscord> <Yardanico> so @anddam static linking works if you compile with the C++ backend
[02:50:33] <FromDiscord> <Yardanico> i think the problem is that cimgui itself is a C++ library, and the definitions don't match with nim cimgui, and I'm not sure how to fix that really
[02:50:44] <FromDiscord> <Yardanico> i don't understand why is it checking for C++ rules when compiling with the C backend
[02:51:14] <FromDiscord> <Yardanico> well there is one way to fix that
[02:51:22] <FromDiscord> <Yardanico> by changing all const char  to char in cimgui.h :D
[02:52:13] <FromDiscord> <Yardanico> oof https://media.discordapp.net/attachments/371759389889003532/915744624507777074/unknown.png
[02:54:13] <FromDiscord> <Yardanico> @anddam after changing all const char  to char this issue appears, and I can fix it by the last comment in https://github.com/cimgui/cimgui/issues/183
[02:55:15] *** Quits: lumo_e (~enrico@151.29.48.90) (Remote host closed the connection)
[02:55:48] <FromDiscord> <Yardanico> yeah now it works
[02:56:19] <FromDiscord> <Yardanico> so @anddam to build it you:↵1) rename all `const char ` in imgui.h to `char `
[02:56:29] <FromDiscord> <Yardanico> 2) add ` -fno-threadsafe-statics` to CXXFLAGS in Makefile
[02:56:38] <FromDiscord> <Yardanico> then just build with `make -j8 static` and use that library with nim's C backend
[02:56:58] <FromDiscord> <Yardanico> and it works https://media.discordapp.net/attachments/371759389889003532/915745817569136680/unknown.png
[02:58:02] <FromDiscord> <Yardanico> 1.3mb binary with arc and -d:release after stripping
[03:01:10] <anddam> still quite big
[03:01:31] <anddam> but I guess it's still a full-featured GUI lib
[03:01:59] <PMunch> Happy now @Elegantbeef? https://github.com/nim-lang/Nim/pull/19207
[03:02:15] <FromDiscord> <Yardanico> In reply to @anddam "still quite big": yeah i think it should be smaller
[03:04:27] <NimEventer> New thread by Dom96: Nim at FOSDEM 2022 - CfP is open!, see https://forum.nim-lang.org/t/8671
[03:06:53] <anddam> Yardanico: is that replacement supposed to have the space?
[03:07:00] <FromDiscord> <Yardanico> doesn't matter
[03:07:06] <anddam> i.e. 'const char' but not 'const char*'
[03:07:21] <FromDiscord> <Yardanico> yeah for easier replacement just replace `const char` with `char`
[03:07:21] <FromDiscord> <evoalg> In reply to @PMunch "Happy now <@145405730571288577>? https://github.com": but what's a method
[03:07:32] <anddam> well it matters here, replacing all const char* to char* yields a huge amount of errors while building cimgui
[03:08:10] <anddam> cimgui.cpp:4569:22: error: invalid conversion from 'const char*' to 'char*' [-fpermissive]
[03:09:28] <anddam> can you pastebin your patched imgui.h?
[03:09:44] <FromDiscord> <bananahead> In reply to @PMunch "<@451387344109568011>, where would you": I followed this to begin with - https://nim-lang.org/docs/tut1.html#procedures It could mention there the difference between func and proc. As I started to see func more when I was reading random nim code
[03:10:11] <FromDiscord> <Yardanico> In reply to @anddam "cimgui.cpp:4569:22: error: invalid conversion": ah yeah there are two replacements that are different
[03:10:24] <FromDiscord> <Yardanico> search for CIMGUI_API void ImGuiTextBuffer_appendf in cimgui.h
[03:10:44] <FromDiscord> <Yardanico> and igLogText above it too
[03:10:52] <PMunch> @evoalg, methods are already defined there? @bananahead so my PR looks good? https://github.com/nim-lang/Nim/pull/19207
[03:11:51] <anddam> https://termbin.com/gpq2
[03:12:49] <FromDiscord> <Yardanico> just add -fpermissive then I guess
[03:13:16] <FromDiscord> <Yardanico> anyway, my cimgui.h
[03:13:27] <FromDiscord> <Yardanico> http://ix.io/3GIP
[03:13:33] <FromDiscord> <Yardanico> works without fpermissive
[03:15:01] <anddam> wait what was your imgui basis?
[03:15:19] <FromDiscord> <Yardanico> the nimgui one
[03:15:25] <anddam> I was editing the imgui/imgui.h file, not the one generated 
[03:15:33] <FromDiscord> <Yardanico> oh yeah that's not the right one
[03:15:36] <FromDiscord> <Yardanico> you must edit cimgui.h
[03:15:59] <anddam> oh I took the previous "imgui.h" literally
[03:16:04] <anddam> so restoring this
[03:16:26] <FromDiscord> <Yardanico> i said cimgui.h previously too btw :P
[03:16:46] <FromDiscord> <Yardanico> ah nvm i see where i said imgui.h
[03:16:47] <FromDiscord> <Yardanico> sorry
[03:18:22] <anddam> np
[03:18:26] <anddam> you are more than helpfule
[03:18:52] <FromDiscord> <Yardanico> but yeah, seems like cimgui wasn't really developed for static linkage with C
[03:19:21] *** Quits: PMunch (~PMunch@user/pmunch) (Quit: leaving)
[03:24:34] <anddam> semi-different topic, willing to make a very small executable that just displays a splash screen on win/lin/mac
[03:24:53] <anddam> what would be a good approach? size is the main metric here
[03:25:04] <anddam> using native API on three systems?
[03:25:27] <anddam> so win32|MFC|whatever windows use/Xlib/Cocoa?
[03:25:55] <FromDiscord> <ynfle (ynfle)> Is it a bug that math isn't reported as unused?https://play.nim-lang.org/#ix=3GIR
[03:26:00] <FromDiscord> <Elegantbeef> The easiest and most memory conscious would probably be statically linked sdl, but idk
[03:26:28] <anddam> this is partially related to this imgui interest, I want to create a full GUI app so I am going with that, but at the same time I hoped it would fit the bill for the small splash screen app too 
[03:26:33] <FromDiscord> <Yardanico> In reply to @Elegantbeef "The easiest and most": yeah, although it's a bit wasteful for runtime resources since it uses OpenGL
[03:26:43] <FromDiscord> <Yardanico> for a simple splash screen
[03:26:51] <FromDiscord> <Elegantbeef> What are you talking about?
[03:26:54] <FromDiscord> <Yardanico> sdl2
[03:27:02] <FromDiscord> <Elegantbeef> Why would sdl2 use opengl?
[03:27:04] <FromDiscord> <Yardanico> what
[03:27:17] <FromDiscord> <Elegantbeef> You can write directly to the window context without opengl
[03:27:31] *** Quits: krux02 (~krux02@p200300e8170c11004db6e8013ca32c23.dip0.t-ipconnect.de) (Remote host closed the connection)
[03:27:47] <FromDiscord> <Yardanico> any examples? never heard of that
[03:28:00] <FromDiscord> <Elegantbeef> I mean Nico doesnt use opengl for drawing
[03:28:22] <FromDiscord> <Elegantbeef> It's rendered without an graphics API context
[03:29:10] <FromDiscord> <ynfle (ynfle)> Is it a bug that the math package isn't reported as unused here https://play.nim-lang.org/#ix=3GIR?
[03:29:33] <FromDiscord> <Elegantbeef> I swear i've seen this question before 😛
[03:30:09] <FromDiscord> <Elegantbeef> Probably a bug
[03:31:11] <anddam> Yardanico: I have to drop it, I tried to patch the mismatches in imgui.cpp as well since the declaration and definitions where different
[03:31:14] <anddam> but I get a bunch of 
[03:31:27] <FromDiscord> <Yardanico> i didn't have to patch imgui.cpp at all
[03:31:28] <FromDiscord> <Yardanico> only cimgui.h
[03:31:42] <anddam> https://termbin.com/d1ih
[03:32:07] <FromDiscord> <Yardanico> you seem to be compiling with the cpp backend now?
[03:32:17] <FromDiscord> <Yardanico> so the way I did it
[03:32:19] <anddam> I am just doing make in cimgui
[03:32:32] <FromDiscord> <Yardanico> 1) build cimgui with default header↵2) modify cimgui.h header↵3) build the example with imgui
[03:33:38] <anddam> wait the build is done with default header?
[03:33:49] <FromDiscord> <Yardanico> yes, sorry, forgot to tell about that
[03:34:03] <FromDiscord> <Yardanico> i figured it all out on-the-go so forgot I used the default header for cimgui.h
[03:34:25] <anddam> I am unsure how editing the header file then affects the nimgl/imgui example building
[03:34:44] <FromDiscord> <Yardanico> it uses the header directly
[03:34:49] <FromDiscord> <Yardanico> for some type definitions and stuff
[03:35:01] <anddam> shouldn't that header be in ~/.nimble/pkg/imgui/someplace/here ?
[03:35:09] <FromDiscord> <Yardanico> well yes if you have that installed here
[03:36:11] <anddam> I have the static lib and the patched header
[03:38:05] <anddam> I see both imgui and nimgl are installed in ~/.nimble
[03:38:12] <anddam> both have a copy of cimgui.h
[03:40:31] <anddam> ok, now     nim c --dynlibOverride:cimgui --passL:-lcimgui test.nim    errors with   /bin/ld: cannot find -lcimgui
[03:40:36] <anddam> maybe a -L. ?
[03:41:00] <anddam> I honestly thought a static archive would just be passed as object to the compiler, not via the linker
[03:41:36] <anddam> working
[03:41:48] <anddam> with -d:release 1.8 MB
[03:42:09] <anddam> can I cross compile for windows target using linux host with nim?
[03:43:19] <anddam> Yardanico: thanks so much again
[03:43:22] <anddam> I have to call it a night
[03:43:29] <FromDiscord> <Yardanico> good night :)
[03:43:34] <anddam> too bad it's not a weekend
[03:43:38] <FromDiscord> <Yardanico> :(
[03:43:41] <FromDiscord> <Yardanico> :()
[03:44:11] <anddam> btw is that Xlib thing viable? can I build a very small executable with nim linking per each platform a native graphical API?
[03:49:18] <nrds> <06Prestige99> Xlib wouldn't work for Windows if that's what you're asking? Well maybe with WSL, idk about that
[03:59:32] *** Quits: pch (~pch@66.49.131.33) (Ping timeout: 240 seconds)
[04:30:20] *** Quits: Zevv (~Zevvvvv@not.connected.by.freedominter.net) (Ping timeout: 260 seconds)
[04:36:47] *** Joins: Zevv (~Zevvvvv@185.238.131.12)
[04:36:53] *** Joins: lumo_e (~enrico@151.29.48.90)
[04:43:05] <NimEventer> New Nimble package! cliche - AutoMagic CLI argument parsing is Cliche, see https://github.com/juancarlospaco/cliche
[04:43:07] <nrds> <12R2D299> 4GitHub: 7"AutoMagic CLI argument parsing is cliche"
[05:10:39] <FromDiscord> <huantian> is there a way to get the vscode plugin do suggestions and such with -d:ssl?
[05:11:19] <FromDiscord> <Elegantbeef> make a `config.nims` and add `--d:ssl` or `switch("define", "ssl")` then it should work fine
[05:14:01] <FromDiscord> <huantian> cool thx
[05:17:16] <FromDiscord> <huantian> I should put this in my root directory right
[05:17:25] <FromDiscord> <huantian> (edit) "I should put this in my ... root" 03added "project"
[05:17:34] <FromDiscord> <Elegantbeef> Yep
[05:19:53] <nrds> <06Prestige99> Can't we initialize a const array? I can't seem to find the right syntax to init an array with default values (e.g. const foo: array[0..3, int])
[05:20:27] <FromDiscord> <Elegantbeef> `const foo = [0, 3, 4, 5]`
[05:21:08] <nrds> <06Prestige99> is there an array fill to make it all the default int value?
[05:21:16] <FromDiscord> <Yardanico> In reply to @nrds "<Prestige> Can't we initialize": you can probably use `static` block with fill from algorithm
[05:21:23] <FromDiscord> <Yardanico> but that'll look ugly
[05:21:31] <nrds> <06Prestige99> hm
[05:21:46] <FromDiscord> <Elegantbeef> Yea a block is the way
[05:21:54] <nrds> <06Prestige99> Cool, thanks
[05:22:10] *** Joins: noeontheend (~noeonthee@207.237.194.194)
[05:22:13] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3GJd
[05:41:32] *** Quits: lumo_e (~enrico@151.29.48.90) (Remote host closed the connection)
[05:43:08] <nrds> <06Prestige99> Anyone else doing AoC btw? I just finished
[05:43:28] <FromDiscord> <Elegantbeef> I'm
[05:43:41] <FromDiscord> <Yardanico> In reply to @nrds "<Prestige> Anyone else doing": check the private nim leaderboard
[05:43:47] <FromDiscord> <Yardanico> you can join it, it's not yet full
[05:43:48] <FromDiscord> <Yardanico> iirc
[05:48:55] <nrds> <06Prestige99> Thanks, just joined
[05:49:35] <FromDiscord> <Yardanico> also we have #nim-aoc on irc
[05:50:13] *** Quits: nrds (~NimBot@ns501209.ip-142-4-210.net) (Remote host closed the connection)
[05:50:44] *** Joins: nrds (~NimBot@ns501209.ip-142-4-210.net)
[06:18:23] <FromDiscord> <gogolxdong (liuxiaodong)> Does async leaks with --gc\:arc?
[06:30:04] <FromDiscord> <Rika> Yes
[06:48:34] <FromDiscord> <ajusa> sent a code paste, see https://play.nim-lang.org/#ix=3GJT
[06:50:46] <FromDiscord> <Yardanico> try with seq[proc(value: string): string {.closure.}]
[06:51:15] <FromDiscord> <Yardanico> nim assumed that you want to keep normal nim procs (nimcall) in your sequence - closure procedures are different from that because they can capture their environment
[06:51:38] <FromDiscord> <Yardanico> usually nim infers anonymous procedures to be closures unless you explicitly say that they're normal nim procs
[06:59:04] <FromDiscord> <ajusa> In reply to @Yardanico "try with seq[proc(value: string):": That worked, thanks! Explanation makes sense as well, in my case I do want closures
[07:07:23] <FromDiscord> <messiahbooks> Secret Knowledge Wisdom That Will Help You Become God Again, Active Super Power, Live Forever https://eternalsacredbooks.wordpress.com/2021/12/01/secret-knowledge-wisdom-that-will-help-you-become-god-again-active-super-power-live-forever/
[07:08:53] <FromDiscord> <Alea> might be missing some basic math here, but how do I calculate inverse tangent?
[07:09:10] <FromDiscord> <Alea> math module doesn't seem to have a func
[07:10:05] <FromDiscord> <Yardanico> aaa what's with those matrix spammers
[07:10:13] <FromDiscord> <Yardanico> discord spammers are at least simple, they just spam cryptospam
[07:33:47] *** Quits: rockcavera (~rc@user/rockcavera) (Remote host closed the connection)
[07:36:01] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.3)
[07:36:30] *** Joins: supakeen (~user@python/site-packages/supakeen)
[08:03:03] *** Quits: arkurious (~arkurious@user/arkurious) (Quit: Leaving)
[08:05:30] <arkanoid> I need more articles like https://arhamjain.com/2021/11/22/nim-webdev.html
[08:09:51] <FromDiscord> <ajusa> https://arhamjain.com/2021/11/22/nim-simple-chat.html
[08:11:34] <FromDiscord> <ajusa> But yes, Nim has a bit of a knowledge/domain issue where a few people know all the stuff (frameworks, language features, std library) but it isn't as visible. That's where articles and external writeups come in. Glad you liked it though, I'll be doing my best to write a bit more in the near future!
[08:11:52] <FromDiscord> <ajusa> (edit) 04removed "bit"
[08:12:51] <arkanoid> You described very well the problem. Reading articles that compares libs and their history/direction is very refreshing
[08:14:26] <arkanoid> Also loving the "explain the code" rather than tutorial approach.
[08:55:59] *** Quits: noeontheend (~noeonthee@207.237.194.194) (Ping timeout: 252 seconds)
[10:19:27] <FromDiscord> <apahl> In reply to @Elegantbeef "<@732968123745042443>\: did i say": At least that was my understanding of the ongoing discussion, but we cleared it all up, all good. Thanks a lot for being so friendly, active and helpful here!
[10:42:21] *** Joins: neurocyte0132889 (~neurocyte@45.128.181.202)
[10:42:22] *** Quits: neurocyte0132889 (~neurocyte@45.128.181.202) (Changing host)
[10:42:22] *** Joins: neurocyte0132889 (~neurocyte@user/neurocyte)
[11:31:47] *** Joins: pch (~pch@66.49.131.33)
[11:32:12] *** Joins: PMunch (~PMunch@user/pmunch)
[11:51:15] *** Quits: neurocyte0132889 (~neurocyte@user/neurocyte) (Ping timeout: 252 seconds)
[12:11:34] <FromDiscord> <Michal58> When does a call with omitted argument that is not last work?
[12:12:57] <FromDiscord> <Rika> That is not last work?
[12:13:11] <FromDiscord> <Rika> I don’t know of any case where that would work
[12:13:37] <FromDiscord> <Rika> Arguments are filled in from left to right afaik no matter type or if it has a default
[12:15:57] <FromDiscord> <Michal58> sent a code paste, see https://play.nim-lang.org/#ix=3GKU
[12:18:09] *** Joins: neurocyte0132889 (~neurocyte@46.243.81.73)
[12:18:09] *** Quits: neurocyte0132889 (~neurocyte@46.243.81.73) (Changing host)
[12:18:09] *** Joins: neurocyte0132889 (~neurocyte@user/neurocyte)
[12:32:38] <FromDiscord> <apahl> In reply to @PMunch "Have you seen my": Hi @PMunch , could you post the link to the article, again? Thanks a lot.
[12:34:08] <PMunch> Sorry, when you reply to stuff I only see the first part of the message on IRC. Which article is it that you want me to link?
[12:41:59] <PMunch> @apahl ^
[12:43:53] <FromDiscord> <apahl> You mentioned an article from you about async.
[12:47:46] <PMunch> Oh right, this one: https://peterme.net/asynchronous-programming-in-nim.html
[12:48:18] <FromDiscord> <apahl> Thanks a lot.
[13:23:27] <FromDiscord> <Michal58> sent a code paste, see https://play.nim-lang.org/#ix=3GL9
[13:23:49] <FromDiscord> <Michal58> (edit) "https://play.nim-lang.org/#ix=3GL9" => "https://play.nim-lang.org/#ix=3GLa"
[13:26:59] <FromDiscord> <Rika> Ah that has different semantics, I forgot about that
[13:27:12] <FromDiscord> <Rika> Anything passed with : or do is right to left
[13:27:41] <FromDiscord> <Rika> Well I guess “semi” right to left
[13:59:04] <FromDiscord> <Michal58> How exactly is it parsed then?
[14:02:01] <FromDiscord> <Elegantbeef> It's left to right and moves optional params after non optional
[14:27:33] <FromDiscord> <Michal58> Why is it doing that? Is to enable templates that take the last argument an untyped block to take optional arguments before the block?
[14:33:22] <FromDiscord> <Rika> Yes
[14:34:46] <FromDiscord> <Michal58> Cool. I'm glad I accidentally discovered that. 🙂
[14:55:07] <PMunch> I'm going to chalk that up as another piece of cursed syntax :P
[15:22:17] <FromDiscord> <gogolxdong (liuxiaodong)> what is  the default path of metadata file of nimble packages?
[15:27:51] *** Quits: pch (~pch@66.49.131.33) (Remote host closed the connection)
[15:36:02] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.3)
[15:36:32] *** Joins: supakeen (~user@python/site-packages/supakeen)
[15:51:49] *** Joins: pch (~pch@66.49.131.33)
[15:52:16] *** Quits: pch (~pch@66.49.131.33) (Remote host closed the connection)
[15:53:43] *** Joins: pch (~pch@66.49.131.33)
[15:54:51] <NimEventer> New thread by Freeflow: Order of execution: where to find understanding, see https://forum.nim-lang.org/t/8672
[15:54:58] <PMunch> @apahl, did the article help at all?
[16:01:03] *** Quits: pch (~pch@66.49.131.33) (Remote host closed the connection)
[16:02:33] *** Joins: pch (~pch@66.49.131.33)
[16:29:58] *** Quits: pch (~pch@66.49.131.33) (Remote host closed the connection)
[16:31:00] *** Joins: pch (~pch@66.49.131.33)
[16:35:09] *** Joins: src (~src@user/src)
[16:42:06] *** Quits: pch (~pch@66.49.131.33) (Remote host closed the connection)
[16:43:09] *** Joins: pch (~pch@66.49.131.33)
[16:46:11] *** Quits: xet7 (~xet7@user/xet7) (Ping timeout: 245 seconds)
[17:01:24] <FromDiscord> <tbrekalo> Is there something as GNU readline or libedit for nim?
[17:07:58] <FromDiscord> <enthus1ast> @treeform\: what could it be that suddenly netty does not let clients connect?↵Or any tip i could debug this?
[17:08:54] <FromDiscord> <enthus1ast> (i know broad question)
[17:10:26] <FromDiscord> <enthus1ast> could this be when there are messages in transit?
[17:10:40] <FromDiscord> <enthus1ast> but the clients are not there any more?
[17:11:04] <FromDiscord> <enthus1ast> to me it does seem to happen randomly
[17:11:17] <FromDiscord> <enthus1ast> restarting the server (not the client) helps
[17:20:07] *** Joins: noeontheend (~noeonthee@12.205.205.130)
[17:46:21] *** Quits: dtomato (~dtomato@82-64-189-70.subs.proxad.net) (Quit: The Lounge - https://thelounge.chat)
[17:47:03] *** Joins: dtomato (~dtomato@82-64-189-70.subs.proxad.net)
[17:52:05] *** Quits: noeontheend (~noeonthee@12.205.205.130) (Ping timeout: 256 seconds)
[17:58:03] *** Joins: arkurious (~arkurious@user/arkurious)
[18:04:13] <FromDiscord> <apahl> @PMunch Sorry, will read it later, am at work rn.
[18:05:14] <PMunch> Oh no worries, just wanted to help you out if you had come across anything that confused you
[18:08:41] <FromDiscord> <apahl> Thanks a lot, much appreciated.
[18:15:04] *** Quits: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com) (Quit: WeeChat 3.0.1)
[18:17:40] *** Joins: rockcavera (~rc@192.12.112.100)
[18:17:40] *** Quits: rockcavera (~rc@192.12.112.100) (Changing host)
[18:17:40] *** Joins: rockcavera (~rc@user/rockcavera)
[18:40:09] *** Joins: xet7 (~xet7@user/xet7)
[19:19:40] <arkanoid> I'm developing a python project due to scientific stuff, but I'm considering using nim to replace slow functions. So far, the slowest guy in the room is a function that does reading and parsing and is similar to: https://play.nim-lang.org/#ix=3FZM , do you think nim would be faster than python here?
[19:27:05] *** Quits: pch (~pch@66.49.131.33) (Remote host closed the connection)
[19:27:40] *** Joins: pch (~pch@66.49.131.33)
[19:30:56] <perro> interesting quesiton, that's definitelty a place that python optimizes for
[19:31:24] <FromDiscord> <Rika> https://play.nim-lang.org/#ix=3GN2
[19:31:24] <FromDiscord> <Rika> ?
[19:31:33] <FromDiscord> <Rika> now you can test it 😛
[19:32:16] <FromDiscord> <Rika> (of course, i use stdlib sequtils which most likely is slower, maybe would be better to use zerofunc or similar)
[19:32:47] <FromDiscord> <Rika> also lines on python `for line in [ll for ll in data.splitlines() if ll and ll.strip()]:` would prolly work better as generators `for line in (ll for ll in data.splitlines() if ll and ll.strip()):`
[19:33:54] <FromDiscord> <Rika> i apologise but i will have to go now
[19:34:08] <FromDiscord> <Rika> hopefully someone else can help if you have further issues or questions
[19:35:00] <perro> I'm interested if you ever get results
[19:36:34] <FromDiscord> <Rika> https://github.com/zero-functional/zero-functional/ (if you need a link to what zerofunc is)
[19:36:48] <FromDiscord> <Rika> i shall go now
[19:55:55] *** Quits: xet7 (~xet7@user/xet7) (Remote host closed the connection)
[19:59:11] <FromDiscord> <ajusa> What's the best "wrapperless" Nim interop program? Futhark, c2nim, nimline, nimterop, cinterop...↵Which one would I probably be able to use to make bindings for C libraries that use macros? Which one have folks found easy to use?
[20:01:44] <arkanoid> Rika: thanks! I've been cought in a phone call in the meanwhile. I'll test this out. Also thanks for the list -> generator hint
[20:06:04] <arkanoid> ajusa, I've experience with just c2nim and nimterop. They both works but at the end I had to deal with edge cases (nested string rewriting macros on C side) and c2nim ended up being more flexible to fix the 90%. Still had to complete the last 10% manually
[20:07:32] <arkanoid> Rika: I went 28s to 26.5s thanks to that generator. Thanks!
[20:08:59] *** Joins: Pyautogui (~Pyautogui@136.228.204.250)
[20:15:54] <FromDiscord> <haxscramper> Probably furthark
[20:16:08] <FromDiscord> <haxscramper> At least this one is maintained and has proper parser
[20:17:48] <FromDiscord> <ajusa> In reply to @haxscramper "Probably furthark": Got it, it seems like less wrapping is required with it. I'll try it out I guess
[20:18:30] <arkanoid> haxscramper how is you C++ impressive project going?
[20:20:08] <FromDiscord> <haxscramper> Spent a week figuring out how to do proper reproducible CI for it and use Conan with nim
[20:20:48] <FromDiscord> <haxscramper> There is a progress, but it is slow, if you want to see an example wrapper generated there is a hlibgit2 now
[20:20:53] <arkanoid> you mean conan.io? never used it, just head about it
[20:21:14] <FromDiscord> <haxscramper> And libssh2 wrapper, we needed them to migrate from nimterop in some nimskull tooling
[20:21:27] <FromDiscord> <haxscramper> Yes, Conan the c++ package manager
[20:22:06] <FromDiscord> <haxscramper> My experience with it was surprisingly good, especially considering it is a c++ thing
[20:22:16] <FromDiscord> <treeform> In reply to @enthus1ast "<@107140179025735680>\: what could it": Could your server be getting stuck some place else? Do clients that connect before work?
[20:24:31] <FromDiscord> <haxscramper> But there is a reason I usually tend to recommend PMunch's futhark now, mainly because there is a lot of stuff I would need to fix and polish before it is ready in a way I want it
[20:24:40] <FromDiscord> <haxscramper> The issue tracker is full of unanswered questions
[20:26:47] <PMunch> The Futhark issue tracker?
[20:27:12] <PMunch> @ajusa, I obviously also recommends Futhark. Although I might be slightly biased
[20:27:15] <arkanoid> it is a project that requires a lot of knowledge and attention to details. Not really yet sure how can a single person tackle it. Lot's of gratitute from the guy who wants to escape the python bubble
[20:28:14] <FromDiscord> <haxscramper> No, mine issue tracker↵(<@709044657232936960_=50=4dunch=5b=49=52=43=5d>)
[20:28:57] <PMunch> Ah right, cause there isn't a single issue in the Futhark tracker
[20:29:05] <PMunch> Who's up for some AoC? https://www.twitch.tv/pmunche
[20:29:31] <FromDiscord> <haxscramper> Probably the only paradigm shift that I had in recent memory is understanding how I can properly infer API provided by a specific header files
[20:29:59] <arkanoid> "nimble install --passl:-L<path to libclang.lib> futhark" it's the first time I see --passL in nimble install
[20:30:02] <FromDiscord> <haxscramper> Because you can't include string for example, you will also get iterators API
[20:30:03] <FromDiscord> <haxscramper> Because that's how headers work
[20:30:35] <FromDiscord> <haxscramper> Ah, and also I've come to hate dynlib
[20:30:45] <FromDiscord> <haxscramper> So annoying
[20:30:59] <FromDiscord> <haxscramper> And not integrated with anything at that
[20:31:42] <FromDiscord> <haxscramper> Like the conan integration - how do you use conan libs from nim?
[20:31:54] <FromDiscord> <haxscramper> `--passL:"@$(pwd)/conanbuildinfo.gcc" --passC:"@$(pwd)/conanbuildinfo.gcc"`
[20:32:07] <FromDiscord> <haxscramper> don't forget to run `conan install . --build=missing` and here you go
[20:32:39] <FromDiscord> <haxscramper> how do you use conan libs if you wrapped via dynlib?
[20:33:05] <FromDiscord> <haxscramper> the library has to support user-override for `dynlib`, or you have to use this weird `--dynlibOverride` or `--dynlibOverrideAll` and pass flags
[20:35:35] <FromDiscord> <haxscramper> Talking about hcparse still feels really depressing
[20:36:14] <arkanoid> the complex disorder of the C++ world is depressing, not hcparse
[20:43:20] *** Quits: Pyautogui (~Pyautogui@136.228.204.250) (Quit: Connection closed)
[20:46:40] *** Joins: Vladar (~Vladar@46.162.2.53)
[21:08:38] *** Quits: kayabaNerve (~kayabaNer@user/kayabanerve) (Remote host closed the connection)
[21:09:01] *** Joins: kayabaNerve (~kayabaNer@user/kayabanerve)
[21:12:00] *** Joins: kayabaNerve_ (~kayabaNer@user/kayabanerve)
[21:12:21] <FromDiscord> <TryAngle> sent a code paste, see https://play.nim-lang.org/#ix=3GNC
[21:12:57] <FromDiscord> <TryAngle> (edit) "https://play.nim-lang.org/#ix=3GNC" => "https://play.nim-lang.org/#ix=3GND"
[21:13:21] *** Quits: kayabaNerve (~kayabaNer@user/kayabanerve) (Ping timeout: 252 seconds)
[21:14:28] *** Quits: pch (~pch@66.49.131.33) (Remote host closed the connection)
[21:16:14] *** Joins: pch (~pch@66.49.131.33)
[21:19:54] *** Joins: noeontheend (~noeonthee@12.205.205.130)
[21:32:54] <Amun-Ra> how can I pass tagged union's kind in "new result"?
[21:33:01] *** Quits: neurocyte0132889 (~neurocyte@user/neurocyte) (Ping timeout: 256 seconds)
[21:33:50] <FromDiscord> <leorize> you can't
[21:34:34] <FromDiscord> <leorize> construct it with the `Type(field: value)` syntax instead
[21:35:28] *** Joins: neurocyte0132889 (~neurocyte@46.243.81.73)
[21:35:28] *** Quits: neurocyte0132889 (~neurocyte@46.243.81.73) (Changing host)
[21:35:28] *** Joins: neurocyte0132889 (~neurocyte@user/neurocyte)
[21:37:31] <Amun-Ra> ah, right, thanks
[21:40:38] *** Joins: tiorock (~rc@192.12.112.100)
[21:40:38] *** Quits: tiorock (~rc@192.12.112.100) (Changing host)
[21:40:38] *** Joins: tiorock (~rc@user/rockcavera)
[21:40:38] *** Quits: rockcavera (~rc@user/rockcavera) (Killed (molybdenum.libera.chat (Nickname regained by services)))
[21:40:38] *** tiorock is now known as rockcavera
[21:41:13] *** Quits: neurocyte0132889 (~neurocyte@user/neurocyte) (Ping timeout: 252 seconds)
[21:41:26] *** Joins: neurocyte0132889 (~neurocyte@46.243.81.73)
[21:41:26] *** Quits: neurocyte0132889 (~neurocyte@46.243.81.73) (Changing host)
[21:41:26] *** Joins: neurocyte0132889 (~neurocyte@user/neurocyte)
[22:00:48] <FromDiscord> <enthus1ast> @treeform\: the issue is not easily reproducable, i thought at first it happens when the server runs longer (and it indeed can cause the issue), but after several connection attempts it works again...
[22:02:10] <FromDiscord> <enthus1ast> but sure, can be cause in my code, ill play with it and try a few things
[22:18:03] *** Quits: neurocyte0132889 (~neurocyte@user/neurocyte) (Read error: Connection reset by peer)
[22:18:31] *** Joins: neurocyte0132889 (~neurocyte@46.243.81.73)
[22:18:31] *** Quits: neurocyte0132889 (~neurocyte@46.243.81.73) (Changing host)
[22:18:31] *** Joins: neurocyte0132889 (~neurocyte@user/neurocyte)
[22:22:16] <FromDiscord> <5271> how do i get a single char from user?
[22:22:25] <FromDiscord> <5271> so i just click a key and it continues
[22:24:37] <FromDiscord> <5271> does anyone know?
[22:34:26] <FromDiscord> <hmmm> import terminal -> getch()
[22:35:43] <FromDiscord> <TryAngle> when compiling is there a way to remove the produced binary right after automatically?
[22:41:03] <FromDiscord> <leorize> use `nim r`
[22:42:16] <FromDiscord> <TryAngle> works, thanks!
[22:49:28] *** Joins: xet7 (~xet7@user/xet7)
[22:52:25] *** Quits: noeontheend (~noeonthee@12.205.205.130) (Ping timeout: 256 seconds)
[22:52:31] <FromDiscord> <5271> In reply to @hmmm "import terminal -> getch()": thanks
[22:56:49] <FromDiscord> <fumamatar> hey, im having a bit trouble with async sockets in nim. i am trying to write a basic port scanner with banner grabing. problem is that if a port is open and does not send any bytes, my socket waits forever until a line is received. what would be the best way to implement this ? a timeout on `await s.recvLine()`? Code snippet following in a second
[22:57:24] <FromDiscord> <fumamatar> sent a code paste, see https://play.nim-lang.org/#ix=3GO8
[22:58:09] <FromDiscord> <fumamatar> sent a code paste, see https://play.nim-lang.org/#ix=3GO9
[22:58:51] <FromDiscord> <Yardanico> In reply to @fumamatar "hey, im having a": a timeout would be good, yes, check out withTimeout proc
[22:59:50] <FromDiscord> <fumamatar> Thanks. I thought maybe there would be a more elegant version though, I am not sure which value I should set the timeout to :/ 1 second might be too short and I could miss ports, too many seconds would slow down the scan
[23:16:50] <FromDiscord> <treeform> In reply to @enthus1ast "<@107140179025735680>\: the issue is": If you can make a small test case that can show the bug that would be great. I need some thing that I can put into tests.
[23:17:39] <FromDiscord> <treeform> Here is test case that tests many clients connecting: https://github.com/treeform/netty/blob/master/tests/test.nim#L149
[23:19:08] <FromDiscord> <treeform> Try modifying that case to make it be more like your case and see if it breaks.
[23:22:59] <NimEventer> New thread by Cobbycobby: Dynamic usage of arithmetic operators in nim, see https://forum.nim-lang.org/t/8673
[23:27:32] *** kayabaNerve_ is now known as kayabaNerve
[23:40:46] *** Joins: terminalpusher (~terminalp@2a01:586:a4a5:1:b882:42b4:f44e:9996)
[23:45:35] <FromDiscord> <lantos> In reply to @PMunch "Who's up for some": missed it but looking real comfy with that fire
[23:49:14] <FromDiscord> <dom96> In reply to @fumamatar "Thanks. I thought maybe": timeouts won't slow down the scan, you're running the other scans concurrently so they'll continue to run
[23:49:46] <FromDiscord> <fumamatar> In reply to @dom96 "timeouts won't slow down": Yea I meant that a 10s timeout means a runtime of at least 10 seconds in the case that a port sends no bytes on connecting
[23:50:20] <FromDiscord> <fumamatar> still fast enough though
[23:52:47] <FromDiscord> <zidsal> Easy solution on timeout value is make it configuration
