[00:02:02] *** Joins: jmdaemon (~jmdaemon@user/jmdaemon)
[00:08:18] *** Joins: akaWolf (~akaWolf@akawolf.org)
[00:08:27] *** Joins: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl)
[00:08:38] *** Quits: martinus__ (~martin@92.29.201.77.rev.sfr.net) (Ping timeout: 250 seconds)
[00:14:03] *** Joins: todo75 (~todo75@user/todo75)
[00:20:20] *** Quits: willthechill (~willthech@67-198-50-210.static.grandenetworks.net) (Ping timeout: 250 seconds)
[00:22:06] * GumbyPAN CPAN Upload: Sodium-FFI-0.006 by CAPOEIRAB https://metacpan.org/release/CAPOEIRAB/Sodium-FFI-0.006
[00:29:04] *** Quits: Adoi (~Adoi@user/adoi) (Quit: Leaving)
[00:31:31] *** Quits: zer0bitz_ (~zer0bitz@2001:2003:f74d:b800:c486:dc7e:8ce4:e6c9) (Read error: Connection reset by peer)
[00:33:19] *** Joins: pucara (~i@host14.181-1-101.telecom.net.ar)
[00:33:33] *** Joins: krismatrix (~krismatri@c-73-212-30-17.hsd1.md.comcast.net)
[00:34:57] <krismatrix> https://l.perl.bot/p/52vr51 Does anyone know what this error is?
[00:34:58] <Paperbot> Link title(s): [ Perlbot Pastebin ]
[00:41:16] *** Quits: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl) (Ping timeout: 272 seconds)
[00:52:09] * GumbyPAN CPAN Upload: Google-RestApi-1.0.1 by MVSJES https://metacpan.org/release/MVSJES/Google-RestApi-1.0.1
[00:52:43] <dansan> Hello!  Is there a command in the perl base to convert a string with non-printable characters ("\n" and such) into an escaped string without using eval?
[00:56:26] *** Joins: Sauvin (~sauvin@about/linux/staff/sauvin)
[00:57:10] * GumbyPAN CPAN Upload: IPC-Shareable-1.09 by STEVEB https://metacpan.org/release/STEVEB/IPC-Shareable-1.09
[00:58:35] *** Joins: kensanata (~user@user/kensanata)
[01:02:52] <buu> Ok
[01:02:56] <buu> Why is perltidy doubling my tabs?
[01:03:06] <rewt> dansan, `$str =~ s/([^[:print:]])/sprintf"\\x%02x",ord$1/ge;` could do it, depending on what you mean by without using eval
[01:03:22] <buu> dansan: do you mean 'escaped by backslashes' ?
[01:04:33] <buu> eval: use Data::Dumper; $Data::Dumper::Useqq=1; Dumper("hello\nboys")
[01:04:35] <perlbot> buu: $VAR1 = "hello\nboys"; 
[01:04:44] <buu> dansan: ^
[01:05:10] <buu> krismatrix: oh my god what have you done
[01:05:36] <krismatrix> lol. No freaking clue.
[01:06:27] <krismatrix> I am not sure where the problem is. Whether in Link.pm or somewhere else.
[01:07:00] <buu> krismatrix: paste link.pm
[01:07:09] *** Joins: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk)
[01:08:15] <krismatrix> This is my_app/lib/MyApp.pm https://l.perl.bot/p/5qi5uf
[01:08:15] <Paperbot> Link title(s): [ Perlbot Pastebin ]
[01:09:20] <krismatrix> taking a moment for pastbin to do link.pm hold on.
[01:09:31] <krismatrix> There we go Link.pm https://l.perl.bot/p/gbz632
[01:09:31] <Paperbot> Link title(s): [ Perlbot Pastebin ]
[01:12:00] <buu> krismatrix: Why are you exporting things?
[01:12:43] <krismatrix> you mean at the beginning on Link.pm?
[01:12:53] <krismatrix> Because I want those function available in other modules.
[01:13:03] <genio> Windows--
[01:15:07] <buu> krismatrix: But sign_up is an object method, you can't export those
[01:15:10] <buu> Or at least, you really shouldn't
[01:15:24] <krismatrix> why not?
[01:16:59] <buu> krismatrix: Because they assume they'll be called on an object
[01:17:04] <rewt> exporting means adding that function to the namespace that's importing it... you don't have to do that for object methods
[01:17:12] * GumbyPAN CPAN Upload: Win32-Mechanize-NotepadPlusPlus-0.009 by PETERCJ https://metacpan.org/release/PETERCJ/Win32-Mechanize-NotepadPlusPlus-0.009
[01:17:42] <rewt> when a method is called on an object, perl looks in the obj's package for the method
[01:17:49] <krismatrix> If you mean that I must pass an object to the function, then yes..that is what will happen.
[01:18:10] <buu> krismatrix: You should be doing $object->method()
[01:18:22] <buu> Or in this case, not even that
[01:18:54] <buu>   $r->get('/signup')->to(controller => "Link", action => "sign_up");
[01:19:45] <buu> This causes mojolicious to internally do something like: my $c = Myapp::Controller::Link->new; $c->sign_up($app);
[01:19:56] <genio> https://github.com/genio/sodium-ffi/runs/5440688326?check_suite_focus=true#step:7:9812
[01:19:57] <Paperbot> Link title(s): [ Try fixing some prereqs and test on Windows · genio/sodium-ffi@bc65535 · GitHub ]
[01:20:03] <daemon> hey all what would I use to calculate ipv6 ranges (from CIDR) for me, say I had 2a00:23c7:5530:6700::1/56 and I wanted to know the last assignable ip would be 2a00:23c7:5530:67ff:ffff:ffff:ffff:ffff
[01:21:08] <krismatrix> ok...that is getting complicated for me to follow. Let's see if we can simplify it. Say I have two controller files Link.pm and Form.pm
[01:21:31] <krismatrix> If in Form.pm, I want to call $self->some_func_in_link(); how do i do that?
[01:21:40] <rewt> daemon, there's IPv6::Address with $ipv6->last_address;
[01:22:07] <daemon> rewt, cool cheers
[01:22:53] <genio> I don't know why you'd call a different controller method from your current controller. that doesn't sound like a pattern that's laid out well
[01:23:00] <buu> Yeah..
[01:23:18] <buu> But uh
[01:23:38] <krismatrix> well..i have some functions that are useful in multiple areas. How do you suggest I do that then?
[01:23:46] <buu> There's a $controller->internal_redirect type function though
[01:23:47] <genio> call the model functions, sure. call helper functions, absolutely.
[01:23:54] <genio> helpers
[01:24:23] <krismatrix> ah
[01:24:31] *** Quits: EvanCarroll (~ecarroll@12.216.92.144) (Ping timeout: 245 seconds)
[01:24:32] <krismatrix> You mean create helpers in MyApp.pm?
[01:24:39] <buu> Sure
[01:24:48] <buu> Hmm, maybe mojo doesn't have internal redirects
[01:25:06] <buu> In any case, you can do Foo::Controller::Bar::method($c) if you really want
[01:25:13] <buu> krismatrix: Does removing the exporter fix the C3 error?
[01:25:31] <krismatrix> hmmm...i did not try that explicitly.
[01:25:37] <buu> more importantly
[01:26:37] <genio> Plugins is the more correct word for Mojo. Sorry, been in a different MVC world for a while at work and used that terminology
[01:29:01] <genio> Controller methods usually return rendered data for the user. That's not likely something you want as a result from your own other controller.
[01:29:39] <genio> Abstract out whatever part of the code would be duplicated into a plugin or make it part of your model method rather than calling another controller method
[01:30:26] <krismatrix> I removed the exported code from Link. Still didn't solve it. 
[01:31:10] <krismatrix> genio...are you saying I should use plugin and not helper?
[01:31:34] <krismatrix> I have used helpers but not used plugins before. Not sure what they do.
[01:31:39] <genio> request made, router determines controller and method to call, controller method gathers data from models, makes changes via models, etc. and returns it in the desired format after whatever functions it should complete have been completed. A plugin can be used to accomplish things that don't make sense as part of a model
[01:32:25] <genio> krismatrix: I'm saying Mojo calls a plugin what I was referring to as a "helper". Same concept, I was just using different terminology because I've been working in a different framework at work that calls them Helpers and not Plugins
[01:33:01] <krismatrix> ok..well...i'll clean it up...but that is apparently not the fundamental problem.
[01:39:09] <buu> krismatrix: Including deleting 'use exporter' ?
[01:39:30] <krismatrix> yeah.
[01:39:40] <krismatrix> LEt me provide a more simplified Link.pm
[01:39:52] *** Quits: mowcat (~mowcat@2a00:23c5:d190:1901:f22f:74ff:fe77:1e1c) (Remote host closed the connection)
[01:40:17] <krismatrix> https://l.perl.bot/p/ywk95p
[01:40:17] <Paperbot> Link title(s): [ Perlbot Pastebin ]
[01:40:50] <krismatrix> I only removed Exporter in Link.pm.
[01:40:59] <krismatrix> There are a bunch of other controller files that have them.
[01:48:46] <krismatrix> do youu have any other thoughts?
[01:51:40] *** Joins: G_SabinoMullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net)
[01:51:50] *** Quits: todo75 (~todo75@user/todo75) (Quit: todo75)
[01:52:02] *** Quits: magla (~gelignite@55d44ff4.access.ecotel.net) (Quit: Stay safe!)
[01:57:18] *** Quits: kensanata (~user@user/kensanata) (Ping timeout: 252 seconds)
[02:00:02] <buu> krismatrix: Are you still getting the exact same error?
[02:01:32] *** Quits: SergeiZhmylev (~zhmylove@146.120.76.72) (Ping timeout: 240 seconds)
[02:01:51] <buu> Why is perltidy -et so incredbly broken
[02:02:02] <buu> Is there a better formatter this is stupid
[02:03:00] <LeoNerd> I don't imagine it's possible, no
[02:03:19] <LeoNerd> Detecting the end of statements is impossible in the presence of interesting syntax modules
[02:03:36] <LeoNerd> So given that, it's basically not clear how to indent or reshape anything
[02:03:49] <LeoNerd> I think most people just write the code properly by hand and don't bother with such tooling
[02:04:40] <buu> But I'm lazy
[02:04:45] <buu> I don't want to indent my own code
[02:05:11] <LeoNerd> I find nvim mostly gets it right anyway; and those rare times it doesn't are just a Ctrl-T or Ctrl-D away
[02:05:14] <LeoNerd> So I mostly don't think about it
[02:05:34] <buu> LeoNerd: Eh? How does nvim format it?
[02:05:49] <LeoNerd> indents after {, dedents after a }, give or take
[02:05:54] <buu> And what the heck is ctrl-t
[02:06:04] <LeoNerd> indent/dedent the current line by one count
[02:06:17] * GumbyPAN CPAN Upload: File-TypeCategories-v0.8.2 by IVANWILLS https://metacpan.org/release/IVANWILLS/File-TypeCategories-v0.8.2
[02:06:17] * GumbyPAN CPAN Upload: WebService-SmartRow-0.004 by LANCEW https://metacpan.org/release/LANCEW/WebService-SmartRow-0.004
[02:06:19] <buu> CTRL-T                  Jump to [count] older entry in the tag stack
[02:06:28] <LeoNerd> ctrl-t in insert mode. it's like >>
[02:06:42] <buu> oh
[02:06:47] <buu> How do I get to that help?
[02:06:55] <LeoNerd> :he i_ctrl-t
[02:07:14] <buu> I see
[02:07:19] <buu> How utterly opaque
[02:07:58] <LeoNerd> Ideally it'd be nice to have put it on some handed-pair keys, but there really aren't any that work on 1970s terminals with Ctrl, so... boo
[02:08:04] <buu> Anywaysssssssssss, so to start with perltidy is so dumb it doesn't use tabs by default, but you can enable tabs with -t, but then if you add -et=2 it turns one tab into two
[02:08:08] <LeoNerd> A modern terminal would perhaps use Ctrl-[] or Ctrl-<>
[02:08:12] <LeoNerd> But 1970s. :(
[02:08:13] <genio> I don't mind perltidy so much for most things
[02:08:29] <buu> "This flag causes each n initial space characters to be replaced by one tab character.
[02:08:36] <krismatrix> buu: yes i get the same error
[02:08:39] <genio> a clean-ish perltidyrc makes life nice
[02:08:48] <buu> genio: Yeah I really like prettier
[02:08:58] <buu> Once I got used to it it was hard to go back to non formatted languages
[02:09:00] <genio> yeah, that's nice too
[02:09:25] <buu> genio: So I have: sub foo {\n\tprint "hello world";\n}
[02:09:53] <buu> Want to guess what -et=2 does?
[02:10:32] <buu> krismatrix: LeoNerd: will be happy to help you with your mro errors
[02:11:05] <genio> buu: I don't use -et.   https://github.com/genio/sodium-ffi/blob/master/.perltidyrc is what I typicallt do
[02:11:06] <Paperbot> Link title(s): [ sodium-ffi/.perltidyrc at master · genio/sodium-ffi · GitHub ]
[02:11:52] <buu> genio: -iob, really?
[02:11:56] <buu> I see that show up a lot
[02:12:28] <LeoNerd> Iwhat?
[02:12:45] <buu> lol
[02:13:22] <buu> He's managed to come up with a rather odd error https://l.perl.bot/p/52vr51
[02:13:23] <Paperbot> Link title(s): [ Perlbot Pastebin ]
[02:14:31] <LeoNerd> Hah. Oh whoknows..?
[02:16:49] <buu> yeah
[02:20:44] <krismatrix> :(
[02:21:31] <buu> Oh god that's what perltidy is doing
[02:21:49] <buu> It's converting tabs to spaces then trying to fit it to -i
[02:21:55] <buu> then back to tabs
[02:24:20] <genio> I don't use tabs, so I never run into that problem. I'm of absolutely no help
[02:25:24] *** Quits: Darkcoal (~user@user/Darkcoal) (Quit: Darkcoal)
[02:31:12] <buu> https://github.com/perltidy/perltidy/issues/90
[02:31:12] <Paperbot> Link title(s): [ -et (entab) uses erroneously reads the -i setting when inserting tabs · Issue #90 · perltidy/perl... ]
[02:31:13] <buu> eesh
[02:31:55] <buu> genio: Our programs are so heavily organized around the concept of indentation and yet we have a character specifically for indenting
[02:32:10] <buu> It just makes everything better
[02:33:07] <buu> krismatrix: Anyway, that error is because you have something weird going on in your inheritance chains but from here I can't possibly guess what. All I would do if I had the code is delete files until the error went away and then look at the last thing I deleted.
[02:33:22] <genio> most people don't even see the difference in their editors and I'm not claiming one is better than the other. we jsut use spaces
[02:33:24] *** Quits: pizdets (~pizdets@183.182.114.199) (Ping timeout: 240 seconds)
[02:33:37] *** Joins: pizdets_ (~pizdets@183.182.110.37)
[02:34:39] <buu> genio: Yeah but what about people with poor eye sight who need to mess with indent levels to make it easier to read
[02:36:08] <genio> we use 4 spaces. but again, I'm not arguing the merits of one over the other. I'll use either, we just use spaces at work
[02:37:48] *** Quits: jmdaemon (~jmdaemon@user/jmdaemon) (Ping timeout: 272 seconds)
[02:38:54] *** Joins: tirnanog (~tirnanog@user/tirnanog)
[02:41:06] <genio> I won't complain so long as it's consistent without a terrible bracing format
[02:41:49] <krismatrix> buu: ok
[02:42:56] <genio> php has the worst prettier setup ever
[02:44:12] <genio> strange bracing setups and weird things like spaces before a semicolon bother me more than anything though
[02:46:22] *** Quits: krismatrix (~krismatri@c-73-212-30-17.hsd1.md.comcast.net) (Ping timeout: 256 seconds)
[02:48:26] *** Quits: pucara (~i@host14.181-1-101.telecom.net.ar) (Quit: Lost terminal)
[02:51:59] *** Joins: SergeiZhmylev (~zhmylove@178.252.127.211)
[02:52:06] *** Quits: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk) (Quit: Leaving)
[02:52:20] *** Joins: monkey_ (~user@190.104.116.153)
[02:53:44] <buu> genio: I find it real hard to get past foo\bar\function
[02:54:18] <genio> heh. same
[02:55:39] *** Joins: jmdaemon (~jmdaemon@user/jmdaemon)
[02:57:40] <genio> I also hope the tooling has gotten better. When I was looking into options to do prettying of PHP, they didn't have a way to make it per-project. You could only setup a global set of options and they were in XML for the config.
[02:57:41] <buu> Ok so anyways, long digression into the world of perltidy behind me
[02:57:57] <buu> This is pretty good https://github.com/FractalBoy/perl-language-server
[02:57:58] <Paperbot> Link title(s): [ GitHub - FractalBoy/perl-language-server ]
[02:58:25] <buu> xml.. config
[02:58:58] <genio> a sort of fun "let's make all of the worst design choices for this!" 
[02:59:10] *** Quits: jmdaemon (~jmdaemon@user/jmdaemon) (Client Quit)
[02:59:12] <buu> Yeah, php's ability to steal the *worst* parts of everything is truly astounding
[02:59:20] <buu> It's like bizarro amazo
[03:00:20] <buu> It's probably a form of stockholm syndrome but I'm still awfully fond of apache's config format
[03:02:00] *** Joins: jmdaemon (~jmdaemon@user/jmdaemon)
[03:04:31] *** Joins: EvanCarroll (~ecarroll@68-78-105-35.lightspeed.hstntx.sbcglobal.net)
[03:05:03] *** Quits: TonyStone (~TonyStone@2603-7080-8607-c36a-543d-a065-e6d9-3062.res6.spectrum.com) (Remote host closed the connection)
[03:06:56] *** Joins: TonyStone (~TonyStone@cpe-74-76-51-197.nycap.res.rr.com)
[03:08:43] *** Quits: TonyStone (~TonyStone@cpe-74-76-51-197.nycap.res.rr.com) (Remote host closed the connection)
[03:15:17] *** Quits: G_SabinoMullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net) (Ping timeout: 240 seconds)
[03:25:28] *** Quits: EvanCarroll (~ecarroll@68-78-105-35.lightspeed.hstntx.sbcglobal.net) (Ping timeout: 256 seconds)
[03:37:35] *** Joins: whynot (~whynot@37.73.65.143)
[03:41:12] *** Joins: rgrinberg (~textual@2806:101e:7:134:4c27:f276:4d75:f0f0)
[03:55:57] *** Joins: G_SabinoMullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net)
[03:59:33] *** Quits: rgrinberg (~textual@2806:101e:7:134:4c27:f276:4d75:f0f0) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[04:01:17] *** Quits: proller (~p@2a02:6b8:b081:31::1:27) (Ping timeout: 240 seconds)
[04:01:53] *** Joins: krismatrix (~krismatri@c-73-212-30-17.hsd1.md.comcast.net)
[04:04:08] *** Joins: sh0ne (~sh0ne@2a06:5b00:6fb:2a00:f9d5:fa75:afb0:4e06)
[04:07:24] *** Quits: Pali (~pali@user/pali) (Ping timeout: 256 seconds)
[04:11:55] *** Joins: ovid_ (~ovid@laubervilliers-659-1-13-124.w80-11.abo.wanadoo.fr)
[04:12:32] *** Quits: TweetiePooh (~richard@cpc75386-sotn16-2-0-cust456.15-1.cable.virginm.net) (Quit: Konversation terminated!)
[04:15:02] *** Joins: proller (~p@80.240.216.69)
[04:16:12] *** Quits: ovid_ (~ovid@laubervilliers-659-1-13-124.w80-11.abo.wanadoo.fr) (Ping timeout: 240 seconds)
[04:16:51] *** Joins: rgrinberg (~textual@2806:101e:7:134:4c27:f276:4d75:f0f0)
[04:20:24] *** Quits: proller (~p@80.240.216.69) (Ping timeout: 272 seconds)
[04:20:47] *** Joins: proller (~p@2a02:6b8:b081:8009::1:b)
[04:23:31] *** Quits: Sauvin (~sauvin@about/linux/staff/sauvin) (Ping timeout: 256 seconds)
[04:33:55] *** Joins: Sauvin (~sauvin@about/linux/staff/sauvin)
[04:43:11] <krismatrix> ok..i managed to fix the problem. Basically my Stripe.pm controller file had package name as Link.pm.
[04:43:41] <krismatrix> Ok...NOW..let's see. You guys said to fix my object function to use either helpers or plugins.
[04:44:07] <krismatrix> First question: Which file do you keep plugin functions?
[04:52:35] *** Quits: krismatrix (~krismatri@c-73-212-30-17.hsd1.md.comcast.net) (Quit: Leaving)
[04:57:58] *** Joins: frost (~frost@user/frost)
[04:58:54] *** Quits: dextercd (~dexter@2a02-a450-f25d-1-76d4-35ff-fefe-34c.fixed6.kpn.net) (Quit: WeeChat 3.4)
[05:02:59] *** Joins: willthechill (~willthech@2600:1700:8c61:3ed0:e08a:e9f6:1551:f2d7)
[05:03:15] <ology> https://docs.mojolicious.org/Mojolicious/Plugin
[05:03:15] <Paperbot> Link title(s): [ Mojolicious::Plugin - Plugin base class ]
[05:04:10] *** Quits: G_SabinoMullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net) (Ping timeout: 250 seconds)
[05:04:28] <ology> So that would be lib/Mojolicious/Plugin/MyPlugin.pm :)
[05:06:24] <ology> https://docs.mojolicious.org/Mojolicious/Guides/Tutorial#Plugins is handy
[05:06:24] <Paperbot> Link title(s): [ Mojolicious::Guides::Tutorial - Get started with Mojolicious ]
[05:12:49] *** Joins: TonyStone (~TonyStone@2603-7080-8607-c36a-1c52-7a09-75d4-5be2.res6.spectrum.com)
[05:14:47] *** Quits: mogad0n (~mogad0n@user/mogad0n) (Remote host closed the connection)
[05:17:24] *** Quits: frost (~frost@user/frost) (Ping timeout: 272 seconds)
[05:20:57] *** Joins: frost (~frost@user/frost)
[05:34:44] <ether> lib/MyApp/Plugin/MyPlugin.pm
[05:36:24] *** Quits: frost (~frost@user/frost) (Ping timeout: 272 seconds)
[05:38:34] *** Joins: frost (~frost@user/frost)
[05:40:11] *** Quits: alex11 (~alex11@user/alex11) (Read error: Connection reset by peer)
[05:42:26] *** Joins: alex11 (~alex11@user/alex11)
[05:43:10] *** Quits: frost (~frost@user/frost) (Ping timeout: 256 seconds)
[05:45:17] *** Quits: monkey_ (~user@190.104.116.153) (Ping timeout: 240 seconds)
[05:45:43] *** Joins: Trigon (~Thunderbi@144.39.114.115)
[05:49:29] *** Joins: monkey_ (~user@190.104.116.153)
[05:49:58] *** Quits: Trigon (~Thunderbi@144.39.114.115) (Client Quit)
[05:51:02] *** Quits: Trigon_ (~reuben@144.39.114.115) (Quit: WeeChat 3.4)
[05:51:20] *** Joins: Trigon (~reuben@144.39.114.115)
[06:00:21] *** Quits: jmdaemon (~jmdaemon@user/jmdaemon) (Ping timeout: 245 seconds)
[06:06:42] * GumbyPAN CPAN Upload: App-Greple-wordle-0.07 by UTASHIRO https://metacpan.org/release/UTASHIRO/App-Greple-wordle-0.07
[06:14:27] <rindolf> ether: oh my... ;]
[06:21:36] *** Quits: Su-Shee (~Susanne@p4ffc7426.dip0.t-ipconnect.de) (Ping timeout: 245 seconds)
[06:23:24] *** Joins: Su-Shee (~Susanne@p5089422a.dip0.t-ipconnect.de)
[06:29:07] *** Joins: frost (~frost@user/frost)
[06:33:10] *** Quits: whynot (~whynot@37.73.65.143) (Quit: leaving)
[06:34:28] *** Joins: jmdaemon (~jmdaemon@user/jmdaemon)
[06:38:53] *** Quits: proller (~p@2a02:6b8:b081:8009::1:b) (Ping timeout: 252 seconds)
[06:42:41] *** Quits: sh0ne (~sh0ne@2a06:5b00:6fb:2a00:f9d5:fa75:afb0:4e06) (Quit: Textual IRC Client: www.textualapp.com)
[06:45:33] *** Joins: G_SabinoMullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net)
[07:01:17] <buu> WHO'S BRAIN WORKS LIKE THIS OH MY GOD https://clbin.com/9G47u
[07:03:23] <buu> It's like a fractal of illogic
[07:03:24] <rindolf> buu: hmmm...
[07:03:46] <rindolf> buu: sup, cowboy?
[07:04:30] <buu> rindolf: illogical pain
[07:05:44] <rindolf> buu: https://shlomifish.livejournal.com/1747.html
[07:05:45] <Paperbot> Link title(s): [ The Stoic Road to Peace of Mind - Unarmed but still Dangerous — LiveJournal ]
[07:06:55] <buu> Yeah but the stoics all died
[07:08:35] <rindolf> buu: they did not. ;]
[07:09:15] *** Joins: deadmarshal_ (~deadmarsh@95.38.115.166)
[07:09:16] *** Quits: SergeiZhmylev (~zhmylove@178.252.127.211) (Read error: Connection reset by peer)
[07:09:56] *** Quits: Nahra` (~user@static.161.95.99.88.clients.your-server.de) (Remote host closed the connection)
[07:10:14] *** Joins: zhmylove (~zhmylove@178.252.127.211)
[07:10:30] *** Quits: monkey_ (~user@190.104.116.153) (Remote host closed the connection)
[07:11:22] <rindolf> buu: and so did https://www.shlomifish.org/philosophy/philosophy/putting-cards-on-the-table-2019-2020/indiv-nodes/notable-hacker-monarchs.xhtml
[07:11:22] <Paperbot> Link title(s): [ Putting Cards on the Table (2019-2022) - Some notable hacker monarchs ]
[07:13:24] *** Quits: deadmarshal_ (~deadmarsh@95.38.115.166) (Ping timeout: 240 seconds)
[07:27:36] *** Joins: fstd_ (~fstd@xdsl-87-79-45-162.nc.de)
[07:30:31] *** Joins: monkey_ (~user@190.104.116.153)
[07:30:50] *** Quits: fstd (~fstd@xdsl-78-34-125-135.nc.de) (Ping timeout: 256 seconds)
[07:40:54] *** Joins: Martchus_ (~martchus@dynamic-095-114-015-033.95.114.pool.telefonica.de)
[07:42:11] *** Quits: Martchus (~martchus@dynamic-077-009-038-030.77.9.pool.telefonica.de) (Ping timeout: 256 seconds)
[07:47:37] *** Quits: G_SabinoMullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net) (Ping timeout: 240 seconds)
[07:57:13] *** Quits: emanuele6 (~emanuele6@user/emanuele6) (Quit: WeeChat 3.4)
[08:00:18] *** Quits: rindolf (~shlomif@inkscape/dev/shlomif) (Read error: Connection reset by peer)
[08:06:04] *** Joins: semeion (~semeion@user/semeion)
[08:08:52] *** Joins: rindolf (~shlomif@inkscape/dev/shlomif)
[08:14:16] *** Joins: geowiesnot (~user@5-51-190-244.abo.bbox.fr)
[08:16:48] *** Joins: deadmarshal_ (~deadmarsh@95.38.115.166)
[08:27:48] *** Quits: slowButPresent (~slowButPr@user/slowbutpresent) (Quit: leaving)
[08:27:53] *** Quits: monkey_ (~user@190.104.116.153) (Remote host closed the connection)
[08:30:12] *** Joins: ovid_ (~ovid@laubervilliers-659-1-13-124.w80-11.abo.wanadoo.fr)
[08:34:59] *** Joins: sbodin (~sbodin@185.12.224.76)
[08:35:00] *** Quits: ovid_ (~ovid@laubervilliers-659-1-13-124.w80-11.abo.wanadoo.fr) (Ping timeout: 272 seconds)
[08:36:34] *** Quits: sbodin (~sbodin@185.12.224.76) (Client Quit)
[08:48:57] *** Quits: geowiesnot (~user@5-51-190-244.abo.bbox.fr) (Ping timeout: 240 seconds)
[08:53:55] *** Quits: arcanez (~arcanez@warpedreality.org) (Remote host closed the connection)
[08:54:19] *** Joins: arcanez (~arcanez@warpedreality.org)
[09:00:45] *** Joins: EvanCarroll (~ecarroll@68-78-105-35.lightspeed.hstntx.sbcglobal.net)
[09:03:32] *** Quits: rgrinberg (~textual@2806:101e:7:134:4c27:f276:4d75:f0f0) (Ping timeout: 252 seconds)
[09:04:57] *** Quits: willthechill (~willthech@2600:1700:8c61:3ed0:e08a:e9f6:1551:f2d7) (Ping timeout: 240 seconds)
[09:10:19] *** Quits: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net) (Quit: Textual IRC Client: www.textualapp.com)
[09:16:14] *** Quits: wootehfoot (~wootehfoo@user/wootehfoot) (Ping timeout: 256 seconds)
[09:18:17] *** Quits: deadmarshal_ (~deadmarsh@95.38.115.166) (Ping timeout: 240 seconds)
[09:26:14] *** Joins: deadmarshal_ (~deadmarsh@95.38.115.166)
[09:34:55] *** Quits: tejr (~tejr@user/tejr) (Ping timeout: 240 seconds)
[09:35:58] *** Joins: tejr (~tejr@user/tejr)
[09:41:04] *** Joins: mexen (uid495612@user/mexen)
[09:46:35] *** Joins: rgrinberg (~textual@2806:101e:7:134:b8e9:103c:7bf9:67b)
[09:47:50] *** Quits: rgrinberg (~textual@2806:101e:7:134:b8e9:103c:7bf9:67b) (Client Quit)
[09:52:07] * GumbyPAN CPAN Upload: Text-Balanced-2.04_01 by ETJ https://metacpan.org/release/ETJ/Text-Balanced-2.04_01
[10:00:07] *** Quits: deadmarshal_ (~deadmarsh@95.38.115.166) (Ping timeout: 256 seconds)
[10:02:16] *** Joins: mattil (~mattil@helsinki.portalify.com)
[10:06:36] *** Joins: ovid_ (~ovid@laubervilliers-659-1-13-124.w80-11.abo.wanadoo.fr)
[10:08:54] *** Joins: ekathva (~ekathva@n14jq7u7k2ywvrb09-1.v6.elisa-mobile.fi)
[10:10:44] *** Joins: rgrinberg (~textual@2806:101e:7:134:b8e9:103c:7bf9:67b)
[10:29:06] *** Joins: deadmarshal_ (~deadmarsh@95.38.115.166)
[10:33:09] *** Quits: tejr (~tejr@user/tejr) (Remote host closed the connection)
[10:33:26] *** Joins: tejr (~tejr@user/tejr)
[10:33:52] *** Quits: deadmarshal_ (~deadmarsh@95.38.115.166) (Ping timeout: 256 seconds)
[10:39:24] *** Quits: zakame (~zakame@user/zakame) (Ping timeout: 240 seconds)
[10:41:57] *** Joins: zakame (~zakame@user/zakame)
[10:42:55] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Ping timeout: 240 seconds)
[10:43:37] *** Joins: FinnElija (~finn_elij@user/finn-elija/x-0085643)
[10:57:13] *** Joins: emanuele6 (~emanuele6@user/emanuele6)
[11:06:22] *** Quits: jmdaemon (~jmdaemon@user/jmdaemon) (Ping timeout: 272 seconds)
[11:06:36] *** Quits: ircuser-1 (~Johnny@c-71-193-246-4.hsd1.or.comcast.net) (Quit: because)
[11:07:50] *** Joins: jmdaemon (~jmdaemon@user/jmdaemon)
[11:13:49] *** Joins: art1 (~romeyke@p200300ccdf03f9003577c94f3764dff1.dip0.t-ipconnect.de)
[11:27:31] *** Joins: sh0ne (~sh0ne@2a06:5b00:6fb:2a00:8035:5627:13f2:2efa)
[11:29:06] *** Quits: rgrinberg (~textual@2806:101e:7:134:b8e9:103c:7bf9:67b) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[11:29:58] *** Joins: tobybl (~tobybl@227.192.115.87.dyn.plus.net)
[11:34:47] *** Quits: tirnanog (~tirnanog@user/tirnanog) (Quit: = "")
[11:41:41] *** Joins: krychu (~krychu@static.152.151.251.148.clients.your-server.de)
[11:41:49] *** Quits: krychu_ (~krychu@static.152.151.251.148.clients.your-server.de) (Ping timeout: 240 seconds)
[11:42:41] *** Quits: emanuele6 (~emanuele6@user/emanuele6) (Ping timeout: 256 seconds)
[11:48:27] *** Joins: Darkcoal (~user@user/Darkcoal)
[11:48:31] *** Joins: randir (~randir@95-25-111-216.broadband.corbina.ru)
[11:51:58] *** Joins: emanuele6 (~emanuele6@user/emanuele6)
[11:55:34] *** Quits: randir (~randir@95-25-111-216.broadband.corbina.ru) (Remote host closed the connection)
[12:01:00] *** Joins: Pali (~pali@user/pali)
[12:09:53] *** Joins: randir (~randir@95-25-111-216.broadband.corbina.ru)
[12:17:49] *** Quits: randir (~randir@95-25-111-216.broadband.corbina.ru) (Remote host closed the connection)
[12:19:01] *** Quits: ProperN[out] (~holyShizn@user/propernoun) (Ping timeout: 240 seconds)
[12:19:40] *** Joins: ProperNoun (~holyShizn@user/propernoun)
[12:24:45] *** Joins: TweetiePooh (~richard@cpc75386-sotn16-2-0-cust456.15-1.cable.virginm.net)
[12:29:08] *** Quits: pizdets_ (~pizdets@183.182.110.37) (Quit: pizdets)
[12:29:47] *** Joins: pizdets (~pizdets@183.182.110.37)
[12:31:42] *** Joins: Manderson (manderson@gateway/vpn/protonvpn/manderson)
[12:34:24] *** Quits: Manderson_ (manderson@gateway/vpn/protonvpn/manderson) (Ping timeout: 272 seconds)
[12:50:37] *** Quits: Paladin (~paladin@S0106c0eae42a785d.vc.shawcable.net) (Ping timeout: 240 seconds)
[12:55:37] *** Joins: Paladin (~paladin@S0106c0eae42a785d.vc.shawcable.net)
[13:09:31] *** Quits: pflanze (~pflanze@61-41-178-139.dyn.fiber.qlnet.ch) (Remote host closed the connection)
[13:09:52] *** Joins: pflanze (~pflanze@61-41-178-139.dyn.fiber.qlnet.ch)
[13:12:37] *** Joins: mowcat (~mowcat@2a00:23c5:d190:1901:f22f:74ff:fe77:1e1c)
[13:18:08] *** Quits: epony (epony@user/epony) (Read error: Connection reset by peer)
[13:26:34] *** Joins: proller (~p@2a02:6b8:b081:b646::1:9)
[13:33:44] <Altreus> o/
[13:34:07] *** Joins: r3m (~launch@user/r3m)
[13:40:53] *** Joins: polettix (~polettix@93-34-90-92.ip49.fastwebnet.it)
[13:42:10] *** Quits: Trigon (~reuben@144.39.114.115) (Ping timeout: 272 seconds)
[13:51:33] * GumbyPAN CPAN Upload: CPAN-Perl-Releases-5.20220306 by BINGOS https://metacpan.org/release/BINGOS/CPAN-Perl-Releases-5.20220306
[13:52:27] *** Quits: polettix (~polettix@93-34-90-92.ip49.fastwebnet.it) (Quit: polettix)
[13:57:22] *** Joins: SergeiZhmylev (~zhmylove@178.252.127.211)
[14:00:42] *** Quits: zhmylove (~zhmylove@178.252.127.211) (Ping timeout: 256 seconds)
[14:09:35] <depesz> Hi, I have string like: ((projet = 10317) AND (section = 29) AND (zone = 4)) - these are generally sql conditions, in somewhat normalized form. To match single condition I use: qr{\((?<column>"[^"]+"|[a-z0-9_]+) = (?<value>\d+)\)} (this is a bit simplified, but the whole regexp is not all that important.
[14:10:06] <depesz> the question I have - is there any way I can make regexp that will match multi-part AND expression, and store somewhere, in one pass, column names, and values these are compared to ?
[14:10:43] <depesz> cuirrently I check if it matches, and then I extract matching parts, and then for each part (simple, single-column condition) i match to get column_name/column_value.
[14:13:08] <depesz> this is exact part of my program: https://l.perl.bot/p/qr4a2e - the question is, at the end, is there any simple way to get lists of: 'projet', 'section', 'zone', and separately [ 10317, 29, 4] ?
[14:13:08] <Paperbot> Link title(s): [ Perlbot Pastebin ]
[14:16:26] *** Joins: KnoP (~KnoP@p4ff56db6.dip0.t-ipconnect.de)
[14:16:59] *** Joins: ccntrq (~Thunderbi@2a01:c22:8df3:2600:efac:1374:1f51:a914)
[14:19:24] <vague> Use Parser::MGC
[14:20:32] <LeoNerd> :)
[14:20:37] <depesz> I very much want to avoid building parsers.
[14:20:48] <depesz> I know that regexp solution is not perfect, and I'm VERY happy with it.
[14:20:58] <LeoNerd> That's a shame. It sounds like you're verymuch -needing- a parser. For that clearly parsing problem
[14:21:02] <depesz> I'm just looking for a way to capture all groups, and not just some.
[14:21:49] <depesz> I understand. There is reasoning, but last time I tried to explain my reasoning discussion took over 3 hours. I don't have that time now. If you can't help me, that's perfectly understandale, and 100% ok.
[14:22:04] <depesz> it is possible that what I want is simply not possible with regexps.
[14:23:30] <Altreus> depesz: would List::Gather be an appropriate solution
[14:23:32] <Altreus> ?
[14:23:44] <depesz> not sure, never heard about it. checking ....
[14:24:23] <Altreus> you'd basically do gather { while regex { take $1, $2 } } -- except properly
[14:24:55] <Altreus> I suppose you'd then have a paired list, but then it's easy to separate
[14:25:01] <LeoNerd> push @captures, [ $1, $2 ] while m/.../gc;
[14:25:06] <LeoNerd> Or you could use Parser::MGC.
[14:25:08] <tm604> presumably the $-{column}, $-{value} arrayrefs aren't enough here?
[14:25:08] <LeoNerd> Clue's in the name ;)
[14:26:08] <depesz> tm604: for some reason $-{column} has only projet and zone. 
[14:26:14] <depesz> and $-{value} hjas only 10317 and 4
[14:26:20] <depesz> section/29 is missing.
[14:27:32] <Altreus> I think /o is deprecated by the way
[14:27:38] <depesz> Altreus / LeoNerd: this gives me an idea...
[14:27:42] <Altreus> citation needed
[14:28:13] <vague> Something like map {+{split ' = '}} split ' AND ', $str; ?
[14:28:27] * LeoNerd waits while depesz reïnvents Parser::MGC but without the 5 years of accumulated features and bugfixes
[14:28:30] <Altreus> I guess that would work
[14:28:36] <Altreus> assuming they're all =
[14:28:55] <Altreus> I guess split takes a regex
[14:29:00] <depesz> Altreus: the idea for now is that they are all =, but both column name and value *can* contain = (and this is accounted for in the regexp I use)
[14:29:04] <Altreus> don't forget split takes a regex :)
[14:29:19] <Altreus> I don't think ' = ' is regex-broken but you might add something that is
[14:29:42] <tm604> so yes, %- probably isn't going to work unless you construct a regex with the same number of $single_condition entries as clauses in the string
[14:31:53] *** Quits: sh0ne (~sh0ne@2a06:5b00:6fb:2a00:8035:5627:13f2:2efa) (Quit: Textual IRC Client: www.textualapp.com)
[14:36:14] *** Quits: emanuele6 (~emanuele6@user/emanuele6) (Quit: Client closed)
[14:41:38] * GumbyPAN CPAN Upload: Hustle-Table-v0.4.1 by DRCLAW https://metacpan.org/release/DRCLAW/Hustle-Table-v0.4.1
[14:41:38] * GumbyPAN CPAN Upload: Test-File-Cmp-0.02 by AAHAZRED https://metacpan.org/release/AAHAZRED/Test-File-Cmp-0.02
[14:46:05] <Altreus> presumably the + doesn't have that effect?
[14:47:50] *** Joins: deadmarshal_ (~deadmarsh@95.38.115.166)
[14:48:55] *** Quits: semeion (~semeion@user/semeion) (Quit: WeeChat 3.4)
[14:50:19] *** Joins: CRCinAU (~CRCinAU@user/crcinau)
[14:50:31] <CRCinAU> I seek the wisdom of the gurus......
[14:51:19] <CRCinAU> I'm using `use Apache2::ServerRec qw(warn);` in my CGI stuff - but B::Lint keeps giving me errors saying: "Undefined subroutine 'warn' called"
[14:51:30] <CRCinAU> yet the code works fine when pushed to the web server.
[14:51:43] <CRCinAU> What an I missing that makes this bit work? :|
[14:51:58] <LeoNerd> That's the basic problem with B::Lint
[14:52:15] <LeoNerd> It complains about things being missing at compiletime. But AUTOLOAD can perfectly well create them at runtime
[14:52:46] <CRCinAU> hmmmmm
[14:52:47] <Altreus> surely warn always exists at compile time
[14:53:04] <LeoNerd> The core -op- of warn does. An imported function will overwrite it
[14:53:29] <LeoNerd> An import will replace it, even if the target of that glob doesn't yet have a code slot and won't until runtime
[14:53:39] <Altreus> so what is the linter even looking at?
[14:54:50] <CRCinAU> So would I be better using something like: Apache2::ServerRec::warn("message goes here");
[14:55:00] <CRCinAU> instead of the qw(warn) part?
[14:56:07] <aquanight> mod_perl yikes
[14:56:33] <LeoNerd> I don't think that makes any difference
[14:56:50] <CRCinAU> well, that gives me: Undefined subroutine 'Apache2::ServerRec::warn' called
[14:56:52] <CRCinAU> which is interesting.
[14:57:31] *** Joins: G_SabinoMullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net)
[14:58:36] *** michelle_ is now known as Michelle
[14:58:54] <CRCinAU> yeah - mod_perl is damn quick for the stuff I do lol
[14:59:08] <CRCinAU> and I'm not really down with mojo etc for the use cases I have
[14:59:33] <aquanight> I've been cruising around the source just trying to find where this 'warn' is even defined and good grief their sourcetree is confusing
[15:00:04] <aquanight> because right now my guess is that you're probably missing a 'use' that's needed to actually bring in the definition of 'warn'
[15:00:36] <CRCinAU> I wonder if I should be using Apache2::Log instead - and I've just had it wrong all this time
[15:00:43] <CRCinAU> ie: https://metacpan.org/dist/mod_perl/view/docs/api/Apache2/Log.pod
[15:00:44] <Paperbot> Link title(s): [ Apache2::Log - Perl API for Apache Logging Methods - metacpan.org ]
[15:03:23] <CRCinAU> to be honest, I was just using the perl inbuilt warn - but when you do apache vhosts, the warn from perl doesn't go into the vhost logs, it ends up in the generic apache logs
[15:03:33] <CRCinAU> so error logging etc is kinda useless at that part
[15:04:10] <CRCinAU> that's when I threw in: `use Apache2::ServerRec qw(warn);` - and then warns ended up in the vhost logs instead of the main apache log
[15:04:55] <CRCinAU> however, then when I'm coding on my desktop - using Atom + B::Lint, it always throws errors on that.
[15:07:41] *** Quits: fling (~fling@user/fling) (Ping timeout: 272 seconds)
[15:11:48] *** Quits: Sleepy63 (~Sleepy63@user/sleepy63) (Ping timeout: 240 seconds)
[15:13:07] *** Joins: Sleepy63 (~Sleepy63@user/sleepy63)
[15:13:24] *** Joins: mattil_ (~mattil@helsinki.portalify.com)
[15:15:17] *** Quits: mattil (~mattil@helsinki.portalify.com) (Ping timeout: 240 seconds)
[15:17:12] *** Joins: randir (~randir@95-25-111-216.broadband.corbina.ru)
[15:23:39] <aquanight> so what I'm thinking is that since B::Lint is processing the perl outside the apache environment it's not getting the 'warn' definition.
[15:24:03] <aquanight> my guess is that something apache does during mod_perl preloads some stuff
[15:27:36] *** Quits: Tempesta (~Tempesta@user/tempesta) (Quit: See ya!)
[15:30:14] *** Quits: jmdaemon (~jmdaemon@user/jmdaemon) (Ping timeout: 256 seconds)
[15:30:17] *** Quits: csrf (~csrf@user/csrf) (Quit: ZNC 1.7.2+deb3 - https://znc.in)
[15:31:02] *** Joins: csrf (~csrf@user/csrf)
[15:34:11] *** Joins: Tempesta (~Tempesta@user/tempesta)
[15:34:35] <CRCinAU> Could be......
[15:34:43] <CRCinAU> Maybe I'll just have to keep living with it hahahah
[15:38:36] <Altreus> Getting hung up on what a linter says is not the correct use of a linter :)
[15:39:16] <CRCinAU> yeah, I know - but it means it gives me annoying red squiggles that hide real problems :P
[15:39:48] <Botje> CRCinAU: is the error that Apache2::Log does not exist?
[15:39:54] <Altreus> turn it off and run your tests instead ;)
[15:39:59] <Botje> or, uh, Apache2::ServerRec.
[15:40:44] <CRCinAU> it doesn't error on: use Apache2::ServerRec qw(warn);
[15:40:57] <CRCinAU> but it errors on the: warn("blah");
[15:42:51] *** Joins: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl)
[15:45:52] *** Joins: jmdaemon (~jmdaemon@user/jmdaemon)
[15:46:17] *** Quits: art1 (~romeyke@p200300ccdf03f9003577c94f3764dff1.dip0.t-ipconnect.de) (Read error: Connection reset by peer)
[15:46:28] *** Joins: art1 (~romeyke@p200300ccdf03f9003577c94f3764dff1.dip0.t-ipconnect.de)
[15:47:38] *** Joins: The_Blode_ (~Blode@user/the-blode/x-7164444)
[15:48:22] *** Quits: The_Blode (~Blode@user/the-blode/x-7164444) (Ping timeout: 256 seconds)
[15:51:30] *** Quits: randir (~randir@95-25-111-216.broadband.corbina.ru) (Remote host closed the connection)
[15:51:45] * GumbyPAN CPAN Upload: Pg-Explain-2.1 by DEPESZ https://metacpan.org/release/DEPESZ/Pg-Explain-2.1
[15:53:09] *** Quits: jmdaemon (~jmdaemon@user/jmdaemon) (Ping timeout: 256 seconds)
[16:05:58] *** Quits: G_SabinoMullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net) (Ping timeout: 260 seconds)
[16:16:12] *** Quits: phryk (~totallyno@user/phryk) (Read error: Connection reset by peer)
[16:16:31] *** Joins: phryk (~totallyno@user/phryk)
[16:16:48] * GumbyPAN CPAN Upload: CLASS-v1.1.7 by JDEGUEST https://metacpan.org/release/JDEGUEST/CLASS-v1.1.7
[16:21:38] *** Joins: haj (~haj@ip5f5beb98.dynamic.kabel-deutschland.de)
[16:22:03] <aquanight> CRCinAU: BEGIN { defined(&Apache2::ServerRec::warn) or *Apache2::ServerRec::warn = sub { CORE::warn @_; } }
[16:22:15] <aquanight> this should solve your squiggles
[16:22:38] <aquanight> place it after your 'use' statements
[16:24:53] <ilmari> you can assign \&CORE::warn directly, no need to wrap it
[16:25:10] <Botje> it's A2::SR::warn that's being overwritten
[16:25:32] <Botje> oh, wrap like that
[16:25:34] <Botje> nevermind
[16:26:57] *** Quits: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl) (Ping timeout: 240 seconds)
[16:28:52] *** Joins: ekathva_ (~ekathva@mobile-access-b04863-163.dhcp.inet.fi)
[16:29:46] *** Joins: ekathva__ (~ekathva@mobile-access-b0486a-162.dhcp.inet.fi)
[16:30:34] *** Quits: ekathva (~ekathva@n14jq7u7k2ywvrb09-1.v6.elisa-mobile.fi) (Ping timeout: 250 seconds)
[16:33:42] *** Quits: ekathva_ (~ekathva@mobile-access-b04863-163.dhcp.inet.fi) (Ping timeout: 256 seconds)
[16:34:16] *** Quits: Woodzy (~quassel@198.204.246.228) (Ping timeout: 256 seconds)
[16:34:47] *** Joins: Woodzy (~quassel@198.204.246.228)
[16:40:12] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:84ab:e3a9:1ea3:da7a) (Ping timeout: 240 seconds)
[16:40:14] <Altreus> aquanight: won't that break it at runtime when AUTOLOAD or whatever comes to make it work correctly?
[16:40:45] <aquanight> Altreus: oh maybe. I was under the assumption apache just preloads it rather than AUTOLOADing
[16:41:01] <LeoNerd> Suffix it with   if !time
[16:41:17] <LeoNerd> Most static analysers won't go anywhere near far enough to work out that it won't ever actually run
[16:41:30] <aquanight> LeoNerd: I think B::Lint does actually compile
[16:41:41] <LeoNerd> Ah
[16:41:48] <LeoNerd> Well, all bets are off then
[16:41:49] <aquanight> it then analyzes main_cv
[16:42:02] <LeoNerd> Oh well there's your problem
[16:42:17] <aquanight> or whatever it's run against I guess
[16:42:26] <aquanight> as I imagine it's -MO= compatible
[16:42:34] <aquanight> like B::Deparse and B::Concise
[16:43:08] <aquanight> and I've yet to find where tf in mod_perl this 'warn' is actually defined
[16:45:06] <aquanight> there's a ModPerl::Util::untaint
[16:45:15] <aquanight> I now officially hate everything about mod_perl and its existence
[16:45:19] <aquanight> it needs to die with fire
[16:45:27] <Botje> only now?
[16:47:09] <aquanight> I mean
[16:47:15] <aquanight> no but definitely now yes
[16:47:35] <Botje> aquanight: https://github.com/apache/mod_perl/blob/0537fc994f27c6b655fe27dc78bda13bda1f6664/xs/maps/modperl_functions.map#L154
[16:47:36] <Paperbot> Link title(s): [ mod_perl/modperl_functions.map at 0537fc994f27c6b655fe27dc78bda13bda1f6664 · apache/mod_perl · Gi... ]
[16:47:42] <aquanight> like before it was sorta "okay maybe people just don't want to migrate" or whatever
[16:48:03] <aquanight> but now I see they have done an unforgivable sin
[16:48:24] <LeoNerd> Perl culture does have a very deep-seated "don't break old stuff" mentality, but sometimes I feel it goes a bit too far. mod_perl is one of those times
[16:48:31] <LeoNerd> It was always a bad idea
[16:48:32] <Botje> found by cross-referencing from https://github.com/apache/mod_perl/blob/0537fc994f27c6b655fe27dc78bda13bda1f6664/xs/Apache2/Log/Apache2__Log.h#L284
[16:48:33] <Paperbot> Link title(s): [ mod_perl/Apache2__Log.h at 0537fc994f27c6b655fe27dc78bda13bda1f6664 · apache/mod_perl · GitHub ]
[16:48:59] <aquanight> Botje: ... what the hell *is* that?
[16:49:04] *** Quits: alex11 (~alex11@user/alex11) (Read error: Connection reset by peer)
[16:51:13] <Botje> aquanight: why, it's a DSL eaten by the code at https://github.com/apache/mod_perl/blob/0537fc994f27c6b655fe27dc78bda13bda1f6664/lib/ModPerl/MapUtil.pm#L92 of course!
[16:51:14] <Paperbot> Link title(s): [ mod_perl/MapUtil.pm at 0537fc994f27c6b655fe27dc78bda13bda1f6664 · apache/mod_perl · GitHub ]
[16:51:28] <Botje> (i have no clue, i'm just following the code)
[16:51:54] <aquanight> > sub readline
[16:52:03] *** Joins: polettix (~polettix@93-34-90-92.ip49.fastwebnet.it)
[16:52:11] <aquanight> wtf is wrong with these people?
[16:54:31] <Botje> DEFINE_ seems to end up in a call to ModPerl::WrapXS::make_prefix
[16:54:41] <Botje> let's see where that ends up! whee!
[16:55:24] <Botje> ah, NOW we're getting somehwere
[16:55:25] <Botje> https://github.com/apache/mod_perl/blob/0537fc994f27c6b655fe27dc78bda13bda1f6664/lib/ModPerl/WrapXS.pm#L73-L178
[16:55:26] <Paperbot> Link title(s): [ mod_perl/WrapXS.pm at 0537fc994f27c6b655fe27dc78bda13bda1f6664 · apache/mod_perl · GitHub ]
[16:55:39] <Botje> that one DEFINE_ line ends up as a block of generated XS 
[16:55:54] <CRCinAU> aquanight: ooooo interesting :)
[16:56:00] <Botje> by carefully taping together strings of course, why would you use a templating language :D
[16:56:31] <aquanight> Botje: so ultimately, it is *not* AUTOLOADed?
[16:57:13] <Botje> I do not see any indication that it could be
[16:57:25] <aquanight> (does metacpan do source searching? I don't want to contaminate my hard drive with downloading this insanity just to grep through it)
[16:57:40] <CRCinAU> aquanight: if I now use Apache2::ServerRec::warn("blah"); - then yeah - the undefined warnings go away :)
[16:58:08] <Botje> I just sourcedived with github
[16:58:16] <aquanight> coo
[16:59:01] <aquanight> of course
[16:59:23] <aquanight> because exporting is not a proper symbol alias you probably won't get the warnings removed from 'warn'
[16:59:51] <Botje> there is an AUTOLOAD handler in Apache2::porting though (https://github.com/apache/mod_perl/blob/0537fc994f27c6b655fe27dc78bda13bda1f6664/lib/Apache2/porting.pm)
[16:59:51] <Paperbot> Link title(s): [ mod_perl/porting.pm at 0537fc994f27c6b655fe27dc78bda13bda1f6664 · apache/mod_perl · GitHub ]
[16:59:58] <aquanight> (I think you have to ask for a proper alias with use Thing '*whatever';
[16:59:58] <Botje> but I have no clue what it does or what it is porting from
[17:00:14] <aquanight> and then Thing has to have EXPORT_OK'd *whatever of course)
[17:00:17] <CRCinAU> let me upload those changes to the apache server and see if it dies :P
[17:00:19] <Botje> oh wait, it "ports" from mod_perl 1 to mod_perl 2
[17:00:30] <aquanight> which A2::SR:: does not do for 'warn'
[17:00:33] <Botje> ah yes, that EXPORT_OK is in place, but no definition for warn.
[17:01:01] <Botje> also also: # XXX: unfortunately it doesn't seem to be possible to install *UNIVERSAL::AUTOLOAD at the server startup, httpd segfaults, child_init seems to be the first stage where it works.
[17:01:05] <aquanight> Botje: but it's as I thought. Pulling in A2::SR.pm does not pull in the full mod_perl XS code
[17:01:10] <aquanight> which is why B::Lint bitches about warn
[17:01:17] <Botje> correct
[17:01:21] <aquanight> ...
[17:01:28] <aquanight> UNIVERSAL::AUTOLOAD ??
[17:01:29] <Botje> importing Apache2::Log loads the .so with all the definitions 
[17:01:54] <Botje> aquanight: I have the idea I am doing permannet damage to your SAN score by reporting what I found :D
[17:01:57] <aquanight> (╯°□°)╯︵ ┻━┻
[17:02:02] <Botje> *permanent
[17:02:28] <aquanight> Botje: oh weird because the SR pm does in fact load Apache2::Log
[17:03:05] <CRCinAU> So, without me wanting to learn another language, if people don't want to use mod_perl these days, what else is there?
[17:03:07] <Botje> doesn't that just kick off loading the XS ?
[17:03:08] <aquanight> look I could forgive a few weird things. UNIVERSAL::AUTOLOAD is not one of them
[17:03:17] <CRCinAU> I mean, Mojo doesn't reall do what I want in my use case, but yeah...
[17:03:24] <LeoNerd> What is your usecase?
[17:03:28] <aquanight> CRCinAU: what exactly is "what I want"
[17:03:31] <LeoNerd> If you are "being a webapp" then any of the web systems are fine
[17:03:50] <LeoNerd> If your usecase is "I want to tweak and alter subtle parts of the apache webserver from the inside", then that might still be a job for mod_perl
[17:04:15] <CRCinAU> well, its basically parsing text, then outputting HTML forms via Template::Toolkit.... ie read file, regex the hell out of it, then print it to HTML
[17:04:15] <aquanight> I believe the usual setup for Mojo is to set apache as a proxy and run the perl stuff as a local webservice via Mojo
[17:04:23] <LeoNerd> So, being a webapp then
[17:04:31] <LeoNerd> There's about a billion ways to do that
[17:04:43] <Botje> CRCinAU: if you're a masochist you can do the same in Plack
[17:04:44] <LeoNerd> All of my small ones use mst's... is it Web::Simple? I forget the name
[17:04:54] <Botje> it has the same low-level interface as mod_perl but is not tied to any one web server
[17:04:57] <aquanight> at which point you probably actually have *more* flexibility than with mod_perl
[17:05:02] <CRCinAU> I mean, before I moved to mod_perl, I was doing ExecCGI - but that's slooooooowww
[17:05:15] <LeoNerd> Yes, don't do that
[17:05:23] <LeoNerd> I run all of mine as FastCGI responders via plackup
[17:05:41] <LeoNerd> But the point of writing your thing as a PSGI app, means you don't have to decide that. You can run it as FastCGI or httpd or whatever
[17:05:47] <aquanight> can apache be rigged to boot the perl/Mojo part ondemand? Or do you have to rig it up with a cron/systemd-unit/whatever? I'm not as familiar with that part.
[17:05:56] <LeoNerd> Basically: You need to move beyond 1990s technology ;)
[17:06:08] <Botje> aquanight: mod_fastcgi can spawn processes for you
[17:06:21] <CRCinAU> yeah - but what I have gives me sub-200ms response times, and most of that is in SSL neg
[17:06:27] <Botje> but you might as well set up a systemd service or  socket activation 
[17:06:30] <aquanight> Botje: ah it's done through fastcgi?
[17:06:40] <Botje> *mod_fcgid
[17:06:50] <LeoNerd> I have all of my responders started outside of httpd, because all of the in-httpd starting mechanisms I've found are terrrrrrible
[17:06:59] <LeoNerd> Apart from ZWS's one but.. it's not 2002 any more so.. booo :(
[17:07:00] <Botje> aquanight: assuming we're talking about fastcgi and not still about mod_perl
[17:07:23] <aquanight> Botje: I was thinking about when you set up Mojo stuff
[17:07:43] <aquanight> so as I understand it the point is you setup apache as a proxy and perl just gets the HTTP requests directly (which mojo handles)
[17:07:56] <Botje> CRCinAU: you still get that with the non-(mod_perl or CGI) options.
[17:08:37] <aquanight> maybe some day I should really figure out how all that shit works. I've been too annoyed by how "webified" everything in the SW world has been getting these days.
[17:08:47] <aquanight> every damn thing and its cat is a webservice
[17:08:54] <LeoNerd> Be prepared for disappointment
[17:08:56] <aquanight> and it's all "node this" and "json that"
[17:08:57] <LeoNerd> (most things are terrible)
[17:09:05] <CRCinAU> yeah, I mean, I'm going to be running apache anyway - as there's other vhosts, but I hate running daemons everywhere and proxying shit up the wahzoo
[17:09:28] <LeoNerd> So run it fastcgi and have apache manage the process for you
[17:09:34] <LeoNerd> It's good at that. Has been since the late-90s
[17:10:03] <CRCinAU> well, I just use mod_perl - and that runs it ok..... I don't understand what benefit using fastcgi would give?
[17:10:15] <Botje> CRCinAU: note there's also https://metacpan.org/pod/Plack::Handler::Apache2
[17:10:22] <Paperbot> Link title(s): [ Plack::Handler::Apache2 - Apache 2.0 mod_perl handler to run PSGI application - metacpan.org ]
[17:10:44] <Botje> CRCinAU: that allows you to take Plack applications (which basically every web framework compiles to or you can write one yourself) and deploy it as mod_perl
[17:10:57] <Botje> CRCinAU: BUT you can test it locally with a simple standalone webserver
[17:11:06] <LeoNerd> CRCinAU: it gives you the benefit of not being batshit insane
[17:11:17] <CRCinAU> .... but I am batshit insane ;)
[17:11:23] <LeoNerd> mod_perl runs a perl interpreter _inside_ the apache server. it's very weird, very apache-specific, and lots and lots and lots of things Do Not Work Properly
[17:11:24] <Botje> CRCinAU: and if you ever decide to use a different deployment method, you only have to change a couple of lines.
[17:11:37] <LeoNerd> Running it outofprocess makes it run as a perfectly normal perl process where all the normal perl rules apply
[17:11:38] <Botje> aquanight: final response to you before I go back to actually working
[17:11:44] <LeoNerd> And you don't have -really weird- things like your "warn" problem
[17:12:14] <Botje> aquanight: you can run your perl app as fastcgi and have apache connect to it (or spawn and manage), OR you set up a small webserver and reverse mod_proxy to it
[17:12:34] <LeoNerd> Oh, and that too. Being anything other than mod_perl based means you're not _specific_ to apache
[17:12:39] *** Quits: polettix (~polettix@93-34-90-92.ip49.fastwebnet.it) (Quit: polettix)
[17:12:47] <LeoNerd> You can trivially decide one day to run the lot via nginx or lighttpd or whatever and all remains absolutely fine
[17:13:16] <LeoNerd> Plus things like selfcontained httpd responders mean you can run it on your development box and point a web browser at  http://localhost:somerandomport  and not even need a "webserver" at all
[17:13:27] <LeoNerd> That's really handy for lightweight local testing
[17:13:53] <CRCinAU> but why would I randomly decide to change web servers? I'm not trying to be a prick, but it just seems to be a contrived argument? Unless I'm missing something.... :|
[17:14:14] <aquanight> you may someday find apache no longer meets your needs
[17:14:15] <Botje> CRCinAU: resource consumption, for one.
[17:14:16] <LeoNerd> Loose coupling is *good* in systems design
[17:14:34] <aquanight> being able to actually consider other options is a good thing
[17:14:38] <LeoNerd> If A can talk to B without A knowing what B is nor B knowing what A is, it gives you a lot more flexibility for future changes
[17:14:51] <aquanight> your ability to consider other options is constrained if you tie yourself to a dependant implementation
[17:14:58] <aquanight> as it increases the amount of work needed to change
[17:15:07] <CRCinAU> true, but for a 1 man project, the likelihood of that to happen is pretty minimal.
[17:15:24] <CRCinAU> I mean, I've been running perl CGI through apache since the 90s - so I don't see that suddenly changing.
[17:15:32] <aquanight> if you're willing to commit yourself to a LAMP setup long-term, no one's going to stop you.
[17:15:45] <CRCinAU> well, its already been 20+ years.....
[17:16:11] <aquanight> there's something to be said for being able to look at what you (or someone else!) might do 10 years from now
[17:16:11] <LeoNerd> *shrug* then don't change it
[17:16:22] <CRCinAU> I mean, before template toolkit, we were slurping in from _DATA_ and regexing stuff hahaha
[17:16:23] <LeoNerd> I'm not going to waste time arguing something you don't want to do
[17:16:25] <aquanight> and if the answer is still LAMP then sure stick with LAMP
[17:16:26] <LeoNerd> I just won't bother supporting it
[17:16:31] <LeoNerd> GL;HF
[17:16:54] * GumbyPAN CPAN Upload: Unicode-ICU-0.04_01 by CPANEL https://metacpan.org/release/CPANEL/Unicode-ICU-0.04_01
[17:17:04] *** Joins: ekathva_ (~ekathva@n14jpfd4dnmq637eu-1.v6.elisa-mobile.fi)
[17:17:46] <aquanight> there are up- and downsides to any option. mod_perl might seem fast for many reasons. It also makes you heavily dependant on apache, and has a number of weird quirks that can limit what you might do in a particular webapp
[17:18:21] <aquanight> it's also made a few design choices I personally find offensive (ModPerl::Util::untaint existing, for one). But if you don't find those problematic and you have something that works
[17:18:25] <aquanight> then it's like the old sayin
[17:18:29] <CRCinAU> Look, I'm not trying to be argumentative - but I'm just curious about the reasoning - as unless I'm missing something major, the problems are hypothetical - so I'm confused by it....
[17:18:31] <aquanight> "if it ain't broke, you're not trying"
[17:18:40] <Botje> it also leads to discussions like these because we hate mod_perl with a passion :)
[17:18:55] <ology> Reasoning for not using mod_perl anymore? Or reasoning for using a modern framework?
[17:19:19] <CRCinAU> I guess for me, part of it is that I never really got on board with the whole microservice trend and mod_proxy everywhere to everything running its own http server
[17:19:32] *** Quits: ekathva__ (~ekathva@mobile-access-b0486a-162.dhcp.inet.fi) (Ping timeout: 250 seconds)
[17:19:32] <LeoNerd> mod_perl is a _very_ weird place to be running perl
[17:19:49] <LeoNerd> It has to do a huge amount of weird trickery to pretend that toplevel is a fresh perl for every request, when in fact it isn't
[17:19:50] <aquanight> converting old, stable mod_perl code that's still working for no other reason than "mod_perl bad" is a bit of silly reasoning
[17:19:57] <LeoNerd> Any of the modern replacements don't bother doing that weirdness
[17:20:11] <LeoNerd> As a result: lots of code finding itself running inside mod_perl just Does Not Behave Properly
[17:20:16] <aquanight> it'd be different if it was something like "mod_perl has really bad performance/security implications I want to eliminate" which I don't think is true (so far)
[17:20:19] *** Joins: emanuele6 (~emanuele6@net-37-179-33-111.cust.vodafonedsl.it)
[17:20:27] <CRCinAU> aquanight: now that I 100% agree with
[17:20:50] <aquanight> but certainly nobody is going to suggest using mod_perl for *new* development
[17:21:21] <CRCinAU> well, this particular project is only ~2 years old..... but it was more of a case of using perl most days in my old job, so I might as well do it here too
[17:21:40] <Botje> here's one: the mod_perl execution model is fundamentally incompatible with streaming/eventing technology.
[17:22:00] <Botje> you want websockets or SSEs? have fun reserving one mod_perl process per client.
[17:22:04] <CRCinAU> then it got popular enough with users, and I went from ExecCGI -> mod_perl for the additional performance
[17:22:14] *** Joins: bit4bit (~bit4bit@190.128.123.78)
[17:22:24] <CRCinAU> Botje: you might be right there - but I don't use any of that kinda stuff.
[17:22:30] <ology> CRCinAU: I'd go with what you know. Fuck 20+ years of improvements.
[17:22:44] <LeoNerd> "I happen to like my horses"
[17:23:11] <CRCinAU> more like, it makes me over $100k a year, I don't want to funamentally break what's working hahahah
[17:24:06] <CRCinAU> but my old job was maintaining a credit card payment gateway - and that was still running in apache + ExecCGI.
[17:24:10] <LeoNerd> Then don't. But accept that whenever you run into a problem it will likely be down to "mod_perl weirdness" and people here won't be inclined to help you
[17:24:14] *** Quits: frost (~frost@user/frost) (Quit: Connection closed)
[17:24:15] <LeoNerd> That's the tradeoff you make
[17:24:35] <aquanight> I mean to be fair
[17:24:42] <aquanight> this one was less mod_perl and more B::Lint
[17:24:54] <CRCinAU> but then again, it was still needing to convert to BCD to transmit over an SSL wrapped TCP socket hahahah
[17:24:58] <aquanight> I'd say it's about a 20%/80% split in favor of B::Lint
[17:25:21] <CRCinAU> I mean, how many people have done wire transmission in BCD? :P
[17:25:22] <LeoNerd> Heh.. B::Lint was coming to the correct conclusion about the code. The code was "correct" for a weird environment
[17:25:53] <LeoNerd> CRCinAU: About 6 times a second, sending digit updates to my SPI-attached 7segment clock display. ;)
[17:26:20] <CRCinAU> now that's weird lol
[17:26:34] <aquanight> I see "BCD" and can't help but think of "binary coded decimal" which is a really fuckin weird encoding
[17:26:37] <LeoNerd> (because, 6 digits, once per second)
[17:26:44] <CRCinAU> but yeah, most people don't even know what it is..... 
[17:26:58] <LeoNerd> Core perl maintainers are not "most people" ;)
[17:27:10] <aquanight> I'm really hoping it's not ...
[17:27:13] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:fc09:57a0:d89c:b417)
[17:27:14] <Botje> Neither are mod_perl devs *ducks*
[17:27:15] <CRCinAU> aquanight: yeah - its binary coded decimal - which we had to send into the banks system - as it was direct into the internal network....
[17:27:24] <deadmarshal> Hi. How can i make List::Util's tail also give me a list of 0 element? I did push 0 to the @A array here, but it seems lame :d. https://paste.c-net.org/SizedHelmets
[17:27:28] <aquanight> yikes
[17:28:05] <CRCinAU> but that was the same kind of thing - the core of a lot of MUST NOT FAIL stuff is just so ugly lol
[17:28:06] <kjetilho> Z80 had/has hardware support for BCD arithmetic.  good times.
[17:28:22] <LeoNerd> eval: use List::Util 'tail'; [ tail 0, qw( some items here ) ]
[17:28:27] <perlbot> LeoNerd: []
[17:28:29] <Botje> deadmarshal: what answer do you expect for tail of an empty string?
[17:28:32] <LeoNerd> deadmarshal: ^-- zero items
[17:28:36] <Botje> *array
[17:28:57] <LeoNerd> Ah; your bug is using 'sum'. You wanted 'sum0'
[17:29:16] <LeoNerd> eval: use List::Util qw( sum sum0 );  { sum => sum(), sum0 => sum0() }
[17:29:18] <perlbot> LeoNerd: {sum0 => 0,sum => undef}
[17:29:31] <deadmarshal> LeoNerd: thank you
[17:29:34] <LeoNerd> sum0 correctly returns 0 when given an empty list. sum() incorrectly returns undef, but lots of people relied on that
[17:29:37] <LeoNerd> Which was a shame :(
[17:30:28] <Botje> sum(tail ...) // 0 ?
[17:30:34] <Botje> but if sum0 exists, sure
[17:30:44] <aquanight> also: @sums = map { List::Util::sum0 @A[$_ .. $#A] } keys @A; can replace that entire loop.
[17:31:24] <deadmarshal> aquanight: nice ;)
[17:31:43] *** Joins: morte_ (~user@190.104.116.153)
[17:31:48] <aquanight> that is, if I'm correctly understanding that $sum[N] is meant to be the sum of every element from N to the end
[17:31:57] <LeoNerd> Hah, aquanight is one of those weirdoes who uses `keys ARRAY`
[17:32:19] <LeoNerd> Oh also the code you wrote has quadratic speed.. not very fast
[17:32:26] *** Quits: emanuele6 (~emanuele6@net-37-179-33-111.cust.vodafonedsl.it) (Changing host)
[17:32:26] *** Joins: emanuele6 (~emanuele6@user/emanuele6)
[17:32:31] <LeoNerd> You can write it much faster with  @partial_sums = reductions { $a + $b } 0, @A;
[17:32:43] <LeoNerd> Which is linear :)
[17:32:44] <simcop2387> hrm, i think i've still got one or two test failures in the builds for the containers.  interestintg
[17:33:11] <aquanight> LeoNerd: needs to go backwards
[17:33:28] <aquanight> @sums = reverse reductions { $a + $b } 0, reverse(@A)
[17:33:28] <LeoNerd> You can write it much faster with  @partial_sums = reverse reductions { $a + $b } 0, reverse @A;
[17:33:39] <LeoNerd> Hrm... I should peephole that
[17:33:44] <CRCinAU> aquanight: interestingly, if I add that BEGIN line to my library .pm file, it seems to fix all the B::Lint fails in every single script that calls it in....
[17:33:45] <aquanight> actually
[17:33:49] <aquanight> won't that 0 add an extra element?
[17:33:58] <LeoNerd> Maybe. But you can easily shift/pop it
[17:34:17] <LeoNerd> Not strictly required if you know @A will never be empty
[17:34:23] <Botje> @ret = (0); unshift @ret, $ret[0] + $_ for reverse @input
[17:34:36] <aquanight> for no List::Util dependancy whatsofuckingever my $sum; for (reverse 0 .. $#A) { $sums[$_] = ($sum += $A[$_]); }
[17:34:47] <LeoNerd> perlbot: corelist List::Util
[17:34:49] <perlbot> LeoNerd: List::Util Added to perl core as of 5.007003
[17:34:52] <LeoNerd> *ahem*
[17:35:04] <aquanight> sure
[17:35:20] <aquanight> but this just wouldn't be perl if there wasn't like 700 ways to do one thing
[17:35:45] <CRCinAU> aquanight++ ;)
[17:36:02] <CRCinAU> next, someone will do ascii art that does the same thing.
[17:36:12] <LeoNerd> Hrm.. I wonder if  for (reverse 0 .. N)  gets optimised to FOREACH_LAZY_IV like it woudl without the reverse
[17:36:16] *** Joins: slowButPresent (~slowButPr@user/slowbutpresent)
[17:36:22] <aquanight> probably not
[17:36:31] *** Quits: mattil_ (~mattil@helsinki.portalify.com) (Remote host closed the connection)
[17:36:49] <LeoNerd> There's still time to slip that in before 5.36  ;)
[17:37:03] *** Joins: mattil (~mattil@helsinki.portalify.com)
[17:37:08] *** Quits: mattil (~mattil@helsinki.portalify.com) (Remote host closed the connection)
[17:37:20] *** Joins: mattil (~mattil@helsinki.portalify.com)
[17:37:24] <CRCinAU> shit, on that note, its past 1am, gotta head to sleep - work in 6 hours :|
[17:37:24] *** Quits: mattil (~mattil@helsinki.portalify.com) (Read error: Connection reset by peer)
[17:37:28] <rindolf> LeoNerd: roar! sup?
[17:37:32] <aquanight> looking at -MO=Concise for -E 'for my $x (0..10) { say $x }'
[17:37:40] <CRCinAU> thanks for the discussion and thanks aquanight for that one liner :)
[17:37:56] <aquanight> oh this is interesting
[17:39:29] <aquanight> LeoNerd: (0..10) is done as: leaveloop { enteriter[$x] { null(pushmark), null(list) { pushmark, const(0), const(10) } } which looks like the LAZY_IV pattern you're talking about
[17:39:44] <aquanight> I'm not seeing any flags to say it's LAZY_IV
[17:39:59] <LeoNerd> Yeah I don't offhand know how that's marked. Hrm
[17:40:05] <aquanight> so I'm very curious how it knows
[17:40:14] <LeoNerd> To pp_ctl.c!
[17:40:16] <aquanight> but what's interesting is (reverse 0..10)
[17:40:53] <LeoNerd> Oh, OPf_STACKED expects either a single AV or two SVs
[17:40:53] *** Parts: CRCinAU (~CRCinAU@user/crcinau) ()
[17:41:23] <LeoNerd> OHGOD
[17:41:25] <aquanight> that is: enteriter[$x] with REVERSED flag { null(pushmark), null(list) { pushmark, nulL(reverse) { null(pushmark), rv2av { const 
[17:41:31] <LeoNerd> The way it detects numerical vs. stringy iteration!
[17:41:43] <aquanight> it nulls out the reverse op and puts a REVERSED flag on enteriter
[17:41:45] <Altreus> oh don't
[17:41:52] <LeoNerd> The RANGE_IS_NUMERIC macro
[17:41:53] <aquanight> the range itself is a normal rv2av/const list-constant
[17:41:56] * GumbyPAN CPAN Upload: Alien-Build-2.47 by PLICEASE https://metacpan.org/release/PLICEASE/Alien-Build-2.47
[17:42:06] <Altreus> Is this gonna be another unary minus type rabbit hole
[17:42:30] <aquanight> the same thing perl uses for constant ranges
[17:42:51] <aquanight> so what that tells me is it's using list-for and not lazy-iv-for
[17:43:21] <aquanight> I feel like it should be possible to use lazy-iv and flag enteriter with REVERSED
[17:43:26] <LeoNerd> Yeah
[17:43:52] <aquanight> I just found it amusing that it nulls out the reverse opcode and puts it on enteriter to do it
[17:44:02] <aquanight> I bet that's specifically so it doesn't have to rebuild the constant range
[17:44:11] <aquanight> but instead just tell enteriter to go backward
[17:44:16] *** Joins: gizmomathboy (~gizmomath@206.127.53.107)
[17:44:45] <aquanight> adding a list assignment inside the () spoils it
[17:45:07] <aquanight> no more REVERSED flag, reverse is not nulled out, and of course all the AASSIGN stuff
[17:45:19] <aquanight> but of course "uh DUH"
[17:45:36] <aquanight> you can't optimize away creating the reversed list when the code apparently wants to actually have the reversed list
[17:46:38] <simcop2387> ah i ran out of disk space that's why
[17:47:22] <aquanight> sweval: my @q = 0 .. 4_000_000_000;
[17:47:24] <perlbot> aquanight: Out of memory during request for 31999995920 bytes, total sbrk() is 1474560 bytes! [Exited 1]
[17:47:41] <aquanight> sometimes
[17:47:50] *** Joins: G_SabinoMullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net)
[17:47:54] <aquanight> I wonder why it's not possible to "optimize" things like this
[17:48:05] <LeoNerd> It probably is...
[17:48:10] <aquanight> like a sort of "psuedo-AV*"
[17:48:19] <LeoNerd> Oh -those- it isn't
[17:48:22] <LeoNerd> Perl doesn't have lazy arrays
[17:48:30] <Botje> at the expense of making AVs more complex, yes.
[17:48:33] <aquanight> I mean certainly I could
[17:48:39] <huf> cant you do them with tie?
[17:48:43] <simcop2387> i kinda wish it did, but i have no idea how you'd actually implement them
[17:48:47] <simcop2387> huf: kind of sort of maybe
[17:48:50] <huf> i think i saw mst do one once
[17:48:52] <aquanight> tie @x, "FakeArray::Range";
[17:48:53] <huf> possibly as a joke
[17:49:16] <simcop2387> they get fully asked for during list assignments, for loops, etc. though which is the problem
[17:49:24] <Altreus> I think we call that a generator
[17:49:30] <huf> yeah, but a fake one
[17:49:32] <Botje> Python has the right idea there. a `range` function that is only ever an iterator.
[17:49:35] <LeoNerd> AvARRAY is backed by a plain C array. C arrays are not lazy
[17:49:39] <LeoNerd> Ergo Perl ones -cannot- be
[17:49:51] <aquanight> but yeah like simcop2387 said
[17:49:55] <LeoNerd> Not without changing the fundamental nature of AvARRAY, and thus breaking basically every XS module ever
[17:49:58] <aquanight> any time the array appears in the list
[17:49:58] <kjetilho> closest is each, I guess
[17:50:01] <aquanight> it gets de-lazified
[17:50:13] <simcop2387> LeoNerd: could introduce a new Av-like but it'd still break stuff
[17:50:17] <aquanight> perl would need not only lazy arrays
[17:50:21] <aquanight> but lazy *lists*
[17:50:28] <LeoNerd> XS code was supposed to be calling av_fetch() and not using AvARRAY directly but every programmer was lazy, and thus, every module cannot be.
[17:50:29] <simcop2387> aquanight: and lazy hashes too
[17:50:30] <LeoNerd> Irony
[17:51:10] <Altreus> What if Perl arrays could be either a real array or a fake one, and existing XS code would therefore only ever accept real ones
[17:51:40] <aquanight> simcop2387: true
[17:51:45] <LeoNerd> I don't think that would work. We'd need a new data type I suspect...
[17:51:52] <Altreus> Which would transparently turn into an AvARRAY whenever one is expected
[17:51:57] * GumbyPAN CPAN Upload: Class-Generic-v0.1.0 by JDEGUEST https://metacpan.org/release/JDEGUEST/Class-Generic-v0.1.0
[17:51:58] <LeoNerd> A "lazy list"
[17:51:59] <Altreus> That's probably the hard bit
[17:52:01] <kjetilho> Altreus: all tied hashes are lazy...
[17:52:12] *** Joins: alex11 (~alex11@user/alex11)
[17:52:15] <Altreus> what happens if you pass one to XS code?
[17:52:17] <simcop2387> Altreus: problem is that C doesn't let you do that kind of high level type shenanigans easily
[17:52:26] <aquanight> simcop2387: also lazy globs, (we already have lazy subs of sorts)
[17:52:42] <Altreus> simcop2387: rewrite Perl in Rust
[17:53:24] *** Joins: vanessa (~vanessa@103.160.128.7)
[17:53:34] <aquanight> the only thing I think I'd want to do with a "lazy array" tie class, is I'd want to detect when iteration/list incorporation is about to occur
[17:54:01] <aquanight> and in that situation, just cut right into the array, delazy it myself, remove the tie and now it's just a normal array
[17:54:06] <simcop2387> looks like the last of the container issues are all from the compiler segfaulting during linking of miniperl.  don't think i can easily solve that issue
[17:54:15] <aquanight> but you can't get the tied-to array inside a tie class
[17:54:29] <aquanight> a tie class never actually knows about the scalar/array/hash it's tied to
[17:54:40] <Altreus> tie is the weirdest mechanicm
[17:54:42] <Altreus> mechanism
[17:54:44] <aquanight> (magic on the C side I think can do this)
[17:55:10] <Altreus> It feels like "Array and Hash should have been classes but now they're not so you can't subclass them so here's tie instead"
[17:55:20] <simcop2387> -DDEBUGGING -Dusequadmath -Dusethreads seems to break gcc
[17:55:27] <LeoNerd> OHyeah tie is terrible
[17:55:31] <simcop2387> at least with 5.22
[17:55:33] <aquanight> Altreus: tie I think basically existed for DBM or something like that
[17:55:53] <LeoNerd> tie is basically the backwards step of "oops we made our core ops into language primitives, not methods on objects, so now we have to have ways to make objects pretend to be variables", rather than vice-versa
[17:56:08] <LeoNerd> tie is probably #1 on my list of "Things I wish perl had never had"
[17:56:20] <LeoNerd> *sooooo* many nice optimisations could be hugely improved if they didn't exist
[17:56:21] <Altreus> And yet, Raku made them methods on objects and it's still not right :(
[17:57:02] <aquanight> LeoNerd: to be fair... approximately when did "objects" and "methods" even exist?
[17:57:05] *** Joins: mattil (~mattil@d5xrr1myx5-vg7g5g0t-4.rev.dnainternet.fi)
[17:57:58] <LeoNerd> 5.000
[17:58:02] *** Quits: yano (~yano@ircpuzzles/staff/yano) (Quit: WeeChat, the better IRC client, https://weechat.org/)
[17:58:03] <Altreus> 1972
[17:58:34] <LeoNerd> I think objects were one of the main "new things" in 5.0, along with references and lexicals and basically perl stopped being "awk on steroids" and started showing glimmers of being a real language
[18:00:22] *** Joins: yano (~yano@ircpuzzles/staff/yano)
[18:00:53] *** Quits: yano (~yano@ircpuzzles/staff/yano) (Client Quit)
[18:01:20] *** Joins: yano (~yano@ircpuzzles/staff/yano)
[18:01:33] *** Quits: mattil (~mattil@d5xrr1myx5-vg7g5g0t-4.rev.dnainternet.fi) (Remote host closed the connection)
[18:01:39] *** Quits: yano (~yano@ircpuzzles/staff/yano) (Client Quit)
[18:04:00] *** Joins: mattil (~mattil@d5xrr1myx5-vg7g5g0t-4.rev.dnainternet.fi)
[18:04:13] *** Joins: yano (~yano@ircpuzzles/staff/yano)
[18:04:17] *** Quits: mattil (~mattil@d5xrr1myx5-vg7g5g0t-4.rev.dnainternet.fi) (Remote host closed the connection)
[18:04:53] *** Joins: mattil (~mattil@d5xrr1myx5-vg7g5g0t-4.rev.dnainternet.fi)
[18:04:53] *** Parts: art1 (~romeyke@p200300ccdf03f9003577c94f3764dff1.dip0.t-ipconnect.de) ()
[18:06:45] <simcop2387> wow https://dirtypipe.cm4all.com/
[18:06:45] <Paperbot> Link title(s): [ The Dirty Pipe Vulnerability — The Dirty Pipe Vulnerability  documentation ]
[18:06:53] <simcop2387> basheval: uname -a
[18:06:54] <perlbot> simcop2387: Linux simcop2387.info 5.16.2 #1 SMP PREEMPT Mon Jan 24 14:04:31 EST 2022 x86_64 GNU/Linux␤
[18:07:06] <simcop2387> alright time to kernel upgrade...
[18:08:47] *** Quits: speskk (~speskk@user/speskk) (Read error: Connection reset by peer)
[18:08:47] *** Quits: Kimmono (~Kimmono@56.81-166-244.customer.lyse.net) (Read error: Connection reset by peer)
[18:08:55] <zgu> Linux bajor 5.15.25-gentoo #1 SMP PREEMPT Wed Mar 2 17:50:42 EST 2022 x86_64 AMD Ryzen 5 3600 6-Core Processor AuthenticAMD GNU/Linux
[18:10:18] *** Joins: Kimmono (~Kimmono@56.81-166-244.customer.lyse.net)
[18:16:43] *** Joins: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk)
[18:18:19] *** Parts: steve (~steven@li677-71.members.linode.com) ()
[18:18:35] <Altreus> I was expecting something from 1994 but no!
[18:18:37] <simcop2387> i'm far less worried about that bug as an exploit and far more worried about it as silent corruption
[18:18:47] *** Quits: deadmarshal_ (~deadmarsh@95.38.115.166) (Ping timeout: 256 seconds)
[18:21:49] *** Quits: mattil (~mattil@d5xrr1myx5-vg7g5g0t-4.rev.dnainternet.fi) (Remote host closed the connection)
[18:22:17] *** Joins: mattil (~mattil@d5xrr1myx5-vg7g5g0t-4.rev.dnainternet.fi)
[18:23:08] *** Joins: polettix (~polettix@93-34-90-92.ip49.fastwebnet.it)
[18:27:01] * GumbyPAN CPAN Upload: Net-OpenNebula-0.317.0 by STDWEIRD https://metacpan.org/release/STDWEIRD/Net-OpenNebula-0.317.0
[18:27:03] *** Quits: mattil (~mattil@d5xrr1myx5-vg7g5g0t-4.rev.dnainternet.fi) (Ping timeout: 256 seconds)
[18:28:56] *** Joins: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl)
[18:29:54] *** Quits: garo (~garo@ptr-1pln5puxqxmejxq9kws.18120a2.ip6.access.telenet.be) (Remote host closed the connection)
[18:33:02] <rindolf> zgu: bajor! https://twitter.com/shlomif/status/1482599505975463943
[18:33:02] <Paperbot> Shlomi Fish (@shlomif) 50d9h ago: https://memory-alpha.fandom.com/wiki/Bajor is a cool planet where mechanics meets UFP/etc. tech. Each Internet end node has a wooden lever where the lowest bandwidth is Terran [10 Mbps?] Ethernet and usuly kept this way. if a webpage loads slowly ,the author was sloppy: https://www.shlomifish.org/meta/FAQ/site_loads_quickly.xhtml
[18:34:37] *** Quits: polettix (~polettix@93-34-90-92.ip49.fastwebnet.it) (Quit: polettix)
[18:38:45] * rindolf used2watch tng->ds9 on cable after work
[18:40:42] <veesh> curious legal question: if someone hires you to write code, and doesn't stipulate anything explicit about it, who owns that code?
[18:41:49] <rindolf> i was paid near-minimum wage as a dev
[18:42:00] <kjetilho> veesh: what jurisdiction?
[18:42:25] <rindolf> veesh: https://mygeekwisdom.com/2011/09/12/be-excellent-to-each-other/
[18:42:26] <Paperbot> Link title(s): [ “Be excellent to each other.” – My Geek Wisdom ]
[18:42:50] <veesh> in israel, though i'm curious in general
[18:43:13] <veesh> i may have not understood your question, though
[18:43:37] *** Quits: vanessa (~vanessa@103.160.128.7) (Ping timeout: 240 seconds)
[18:44:17] <kjetilho> well, this is a very tricky question.  if you are writing code from scratch, here in Norway you will generally own it.  unless you are an employee.
[18:45:39] <kjetilho> by "from scratch" I mean standalone code.
[18:45:48] *** Joins: vanessa (~vanessa@103.160.128.7)
[18:47:17] <kjetilho> but the real answer is: make an agreement before you start your contract.
[18:47:35] <rindolf> veesh: I have been doing software development commissions where I give a rough estimate of the time it will take me <link xlink:href="https://www.shlomifish.org/humour/fortunes/show.cgi?id=shlomif-multiply-by-pi">by multiplying my estimate by 3</link> and charge 50 USD / hour (which is a good rate in Israel) and I do not charge if the customer is unhappy with my deliverables. This is because I'd rather be 
[18:47:35] <rindolf> considered a <link xlink:href="https://www.shlomifish.org/philosophy/computers/open-source/gpl-bsd-and-suckerism/">"sucker"</link> than acquire a new enemy.
[18:47:36] <Paperbot> Link title(s): [ The GPL, the BSD Licence, and Being a Sucker - Shlomi Fish’s Homesite ]
[18:47:36] <Paperbot> Link title(s): [ Multiply by Pi - Fortune ]
[18:48:29] <simcop2387> veesh: depends a lot on the jurisdiction.  in the US it can mean either depending on the language of the contract.  it's possible that the contractor owns it because they were hired to create a product for the business to use.  but if the person was an employee then by default it'd be owned by the business.  it gets weirder from there
[18:49:00] *** Joins: gast0n (~g4570n@user/gast0n)
[18:49:34] <simcop2387> veesh: in english the phrase to search for is "work for hire" generally.  probably something similar for other jurisdictions in the local language
[18:49:40] *** Joins: deadmarshal_ (~deadmarsh@95.38.115.166)
[18:50:47] <furrymcgee> no i dont think you can claim that, ghostwriters dont have ownership of their work right?
[18:50:56] <furrymcgee> they may pay you for a license if you are owner of the work
[18:53:48] *** Quits: deadmarshal_ (~deadmarsh@95.38.115.166) (Ping timeout: 240 seconds)
[18:57:04] * GumbyPAN CPAN Upload: Hash-Typed-0.03 by LNATION https://metacpan.org/release/LNATION/Hash-Typed-0.03
[18:57:53] *** Quits: morte_ (~user@190.104.116.153) (Ping timeout: 256 seconds)
[18:58:45] <simcop2387> furrymcgee: ghost-writers specifically require that work for hire bit, otherwise the person who hires them can't legally publish the work because of copyright law
[18:59:47] <simcop2387> they need that work for hire or copyright assignment (there's a few ways it can go) see also the lawsuits ongoing between the Dikta and other early marvel writers from back in the day that are ongoing now too
[18:59:57] *** Joins: garo (~garo@ptr-1pln5puxqxmejxq9kws.18120a2.ip6.access.telenet.be)
[19:00:09] <simcop2387> quit low effort article about it, https://www.theverge.com/2021/9/24/22691842/disney-marvel-sues-comic-artist-iron-man-avengers
[19:00:11] <Paperbot> Link title(s): [ Disney sues for control of key Marvel characters - The Verge ]
[19:02:14] <simcop2387> there's a weird situation where ditko and others weren't work for hire, and gave a license to the characters to marvel because they were contractors and then after some number of years later copyright law allows them to revoke that license unconditionally
[19:03:50] <simcop2387> Henry VI, Part 2, Act IV, Scene 2. --- "The first thing we do, let's kill all the lawyers".
[19:07:33] <simcop2387> https://www.youtube.com/watch?v=OBFUPQohCsk # overview of the craziness and what's going on with that from a lawyer
[19:07:33] <Paperbot> YouTube video linked by simcop2387: Made for Hire? Understanding the "Marvel Method" Copyright Controversy (VL547) - published by Hoeg Law
[19:11:06] *** Joins: magla (~gelignite@55d48440.access.ecotel.net)
[19:12:05] * GumbyPAN CPAN Upload: Alien-libmaxminddb-1.004 by VOEGELAS https://metacpan.org/release/VOEGELAS/Alien-libmaxminddb-1.004
[19:19:57] *** Joins: mattil (~mattil@87-92-100-143.bb.dnainternet.fi)
[19:20:27] <aquanight> I think typically a lot of "for-hire" contracts will specifically call out that you will assign copyright ownership to your employer.
[19:20:36] <aquanight> (including employment contracts)
[19:21:57] *** Quits: fuzzix (~fuzzix@188-141-87-139.dynamic.upc.ie) (Remote host closed the connection)
[19:22:05] *** Joins: mattil_ (~mattil@helsinki.portalify.com)
[19:24:30] *** Quits: mattil_ (~mattil@helsinki.portalify.com) (Remote host closed the connection)
[19:25:39] *** Quits: mattil (~mattil@87-92-100-143.bb.dnainternet.fi) (Ping timeout: 256 seconds)
[19:25:56] *** Quits: noctuks (7vrDyCK6LH@user/noctux) (Quit: WeeChat 3.3)
[19:30:20] <bkhl> Where I am that is common for programmers but less so for writing/drawing/&c.
[19:30:34] <bkhl> I imagine it might vary along the same line in some other markets as well.
[19:30:55] <bkhl> Though I'd assume the big comics companies in the US would be among the ones that would claim copyright of their employees creations when they can.
[19:32:41] <simcop2387> bkhl: that's the rub, they did but in the early days they didn't have employees, they had contractors that would bring them the stories they made to publish.  you know like a publishing house for books.  which leads to some weird situations later because it wasn't for hire, and wasn't by an employee, and there were no exclusivity contracts either usually but they still operated as if there were...
[19:33:05] <bkhl> Here in Sweden it's a bit tricky in that you can't actually assign copyright through a contract, it always belongs to the actual creator.
[19:33:11] <bkhl> You can only sell licenses basically.
[19:33:30] *** Joins: noctuks (pS9vLLhgiV@user/noctux)
[19:33:31] <bkhl> _However_, employers can hold copyright for things people create on the job "as is normal in their business"
[19:33:47] <bkhl> So basically there are different norms for publishing and programming for example.
[19:34:08] *** Quits: vanessa (~vanessa@103.160.128.7) (Quit: WeeChat 3.4)
[19:34:09] <simcop2387> i repeat, Henry VI, Part 2, Act IV, Scene 2. --- "The first thing we do, let's kill all the lawyers".
[19:34:38] <bkhl> I can't decide if our system here is completely messed up, or kind of good.
[19:34:55] <bkhl> In a way, since copyright makes no sense, you might as well go with "whatever works in that particular business".
[19:36:02] *** Joins: polettix (~polettix@93-34-90-92.ip49.fastwebnet.it)
[19:40:00] <gordonfish> Shower thought: The (lost) ark of the covenant: the original (blingtastic) tablet case
[19:42:43] <LeoNerd> Plot twist: Turns out to have been a huge mistake in translation. They were really looking for the lost arc of the covenant... But they recreated it with a pair of compasses
[19:44:44] *** Joins: Trigon (~reuben@144.39.114.115)
[19:45:04] <huf> it's a box
[19:45:13] <huf> dont know why you people insist on using a ye olde word for it
[19:45:17] <huf> a weddingbox
[19:45:54] <LeoNerd> This is a language that has specific nouns for collections of, or baby versions of, or males or females of most kinds of farm-ish animals
[19:46:03] <LeoNerd> Of course we have a special word for a specific kind of box
[19:46:06] <huf> everyone has that
[19:46:44] <huf> the noah story doesnt help
[19:46:48] <huf> him floating about in a box
[19:56:01] *** Joins: willthechill (~willthech@2600:1700:8c61:3ed0:e08a:e9f6:1551:f2d7)
[20:00:43] *** Joins: FlorianBad (~FlorianBa@cpe-67-49-107-16.dc.res.rr.com)
[20:02:11] * GumbyPAN CPAN Upload: CGI-Ex-2.51 by CCM https://metacpan.org/release/CCM/CGI-Ex-2.51
[20:06:53] *** Quits: polettix (~polettix@93-34-90-92.ip49.fastwebnet.it) (Quit: polettix)
[20:08:53] <rindolf> https://www.youtube.com/watch?v=0APF3SO9tqE
[20:08:53] <Paperbot> YouTube video linked by rindolf: Raiders of the Lost Ark - The opening of the Ark - The LORD's vengeance!! - published by janie166
[20:13:29] *** Joins: todo75 (~todo75@user/todo75)
[20:21:06] *** Quits: ccntrq (~Thunderbi@2a01:c22:8df3:2600:efac:1374:1f51:a914) (Quit: ccntrq)
[20:33:06] *** Quits: tobybl (~tobybl@227.192.115.87.dyn.plus.net) (Remote host closed the connection)
[20:33:30] *** Joins: yuesbeez (uid458354@id-458354.tinside.irccloud.com)
[20:39:35] *** Joins: martinus__ (~martin@92.29.201.77.rev.sfr.net)
[20:50:29] <Kobaz> weeeeeeird
[20:50:30] <Kobaz> okay so
[20:51:05] <Kobaz> if i do this: use Net::DNS;  then it breaks my postgres dbd:pg -- Select query error:  SSL SYSCALL error: EOF detected
[20:51:17] <Kobaz> if i remove 'use Net::DNS' my query works just fine
[20:51:46] *** Quits: gce108 (~gce@user/gce108) (Remote host closed the connection)
[20:52:19] *** Joins: The_Blode (~Blode@user/the-blode/x-7164444)
[20:53:32] *** Quits: mexen (uid495612@user/mexen) (Quit: Connection closed for inactivity)
[20:53:34] *** Quits: The_Blode_ (~Blode@user/the-blode/x-7164444) (Quit: ZNC 1.7.2+deb3 - https://znc.in)
[20:53:48] *** Quits: martinus__ (~martin@92.29.201.77.rev.sfr.net) (Ping timeout: 256 seconds)
[20:54:26] *** Joins: gce108 (~gce@user/gce108)
[20:59:12] *** Joins: deadmarshal_ (~deadmarsh@95.38.115.166)
[21:00:02] *** Quits: The_Blode (~Blode@user/the-blode/x-7164444) (Ping timeout: 240 seconds)
[21:01:36] *** Joins: k8yun (~k8yun@user/k8yun)
[21:01:49] *** Joins: e1f (~user@141.117.1.173)
[21:03:04] *** Joins: The_Blode (~Blode@user/the-blode/x-7164444)
[21:07:30] *** Joins: polettix (~polettix@93-34-90-92.ip49.fastwebnet.it)
[21:21:19] * GumbyPAN CPAN Upload: Object-Pad-0.63 by PEVANS https://metacpan.org/release/PEVANS/Object-Pad-0.63
[21:22:45] *** Quits: polettix (~polettix@93-34-90-92.ip49.fastwebnet.it) (Quit: polettix)
[21:23:22] <simcop2387> Kobaz: very weird
[21:23:52] <simcop2387> Kobaz: try use Net::DNS qw//;
[21:23:57] <simcop2387> to make it not export anything
[21:24:19] <LeoNerd> You must be the only person I've ever seen to use '/' on the qw quotes
[21:25:00] <simcop2387> LeoNerd: i do it all the time, it's just right there for my pinky to hit.  no shifting, no using two different chars, no spaces, etc.
[21:25:11] <simcop2387> and qw'' looks weirder
[21:25:23] <simcop2387> eval: [qw,foo bar baz,]
[21:25:24] <LeoNerd> For some reason I always use qw( parens )
[21:25:29] <perlbot> simcop2387: ["foo","bar","baz"]
[21:25:39] <ilmari> a contractor I worked with at a previous job did all sorts of weird shit, including qw## and qw!! and qw~~
[21:25:43] <simcop2387> oh wow qw,, could end up making some fun looking obfuscations
[21:25:50] <ilmari> the # was particuarly egregious
[21:26:03] <simcop2387> qw!! i could see if you need some of the other ones, qw## would throw stuff off for me
[21:26:13] <simcop2387> qw#list goes here##comment here
[21:26:41] * ilmari uses parens for everything except eval string and regexes with x and/or e modifiers
[21:26:47] <ilmari> then it's curlies
[21:27:40] <simcop2387> i use parens except where i'll be lazy and use //.  curlies when needed for regex and such though.  like m{https://www.startof.url/here} to find something
[21:28:11] <ilmari> // is fine for regexes without e/x
[21:28:24] <simcop2387> i don't see anything in Net::DNS that jumps out at being something that should impact dbd pg... very odd kobaz
[21:28:56] <simcop2387> maybe something with the localizing of $SIG{__DIE__}?
[21:29:19] <simcop2387> https://metacpan.org/dist/Net-DNS/source/lib/Net/DNS.pm#L40 I don't think that'd cause anything since it should be gone by the time you call dbd pg
[21:29:20] <Paperbot> Link title(s): [ lib/Net/DNS.pm - metacpan.org ]
[21:29:24] <ilmari> all DNS resolution in DBD::Pg happens via libpq
[21:29:46] <ilmari> Kobaz: does whether you load Net::DNS before or after DBD::Pg make any difference?
[21:30:41] <ilmari> Kobaz: could you post a complete minimal reproducing example and its output?
[21:31:06] <simcop2387> Kobaz: you've succesfully nerd sniped a few of us with such a weird situation
[21:31:25] <alh> (Also what version of Net::DNS, what OS)
[21:32:23] <Kobaz> hehe
[21:32:29] <Kobaz> i have a habit of doing that
[21:32:41] <Kobaz> i think it has to do with the ssl library it's built against?
[21:34:44] <ilmari> Net::DNS doesn't seem to depend on anything SSLy
[21:35:17] <ilmari> but something deep down in its dependency tree might, and if that's a different version of openssl than what libpq is built against, that might cause issues
[21:36:24] <ilmari> hm, the only non-core module it depends on is Digest::HMAC
[21:41:24] *** Quits: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl) (Ping timeout: 256 seconds)
[21:43:25] *** Quits: djerius (~quassel@pool-108-20-43-199.bstnma.fios.verizon.net) (Ping timeout: 240 seconds)
[21:44:46] *** Quits: G_SabinoMullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net) (Ping timeout: 272 seconds)
[21:44:59] *** Joins: G_SabinoMullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net)
[21:46:45] *** Joins: djerius (~quassel@pool-108-20-43-199.bstnma.fios.verizon.net)
[21:48:31] <rindolf> perlbot: sweval: [qwא h yk jl א]
[21:48:34] <perlbot> rindolf: Bareword found where operator expected at (IRC) line 1, near "qwא h" 	(Do you need to predeclare qwא?) Bareword found where operator expected at (IRC) line 1, near "h yk" 	(Do you need to predeclare h?) Bareword found where operator expected at (IRC) line 1, near "yk jl" 	(Do you need to predeclare yk?) Bareword found where operator expected at (IR... [Output truncated. http://perl.bot/p/1w98yc ]
[21:48:47] *** Joins: geowiesnot (~user@5-51-190-244.abo.bbox.fr)
[21:49:10] <ilmari> perlbot: sweval: use utf8; [qwא h yk jl א]
[21:49:12] <perlbot> ilmari: Bareword found where operator expected at (IRC) line 1, near "qwא h" 	(Do you need to predeclare qwא?) Bareword found where operator expected at (IRC) line 1, near "h yk" 	(Do you need to predeclare h?) Bareword found where operator expected at (IRC) line 1, near "yk jl" 	(Do you need to predeclare yk?) Bareword found where operator expected at (IR... [Output truncated. http://perl.bot/p/m7n88x ]
[21:50:16] <ilmari> perlbot: sweval: [qw א h yk jl א]
[21:50:17] <perlbot> ilmari: ["h","yk","jl"]
[21:50:50] <ilmari> א is a valid identifier character, so space is required
[21:52:44] *** Quits: The_Blode (~Blode@user/the-blode/x-7164444) (Ping timeout: 256 seconds)
[22:02:29] *** Joins: The_Blode (~Blode@user/the-blode/x-7164444)
[22:06:25] *** Joins: gareppa (~gareppa@user/gareppa)
[22:08:24] *** Quits: gareppa (~gareppa@user/gareppa) (Remote host closed the connection)
[22:08:47] *** Quits: FlorianBad (~FlorianBa@cpe-67-49-107-16.dc.res.rr.com) (Quit: Client closed)
[22:09:07] *** Joins: FlorianBad (~FlorianBa@cpe-67-49-107-16.dc.res.rr.com)
[22:14:02] *** Quits: Manderson (manderson@gateway/vpn/protonvpn/manderson) (Remote host closed the connection)
[22:16:24] * GumbyPAN CPAN Upload: Net-Twitch-API-0.10 by CLIPLAND https://metacpan.org/release/CLIPLAND/Net-Twitch-API-0.10
[22:17:21] *** Joins: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl)
[22:19:46] *** Joins: rgrinberg (~textual@2806:101e:7:5086:c127:9b59:bd2c:b6b3)
[22:19:51] *** Joins: Markow (~Markow@176.122.215.103)
[22:20:05] *** Joins: randir (~randir@95-25-111-216.broadband.corbina.ru)
[22:22:14] <simcop2387> this is perhaps one of the most terrifying and incredible pieces of software i've seen recently.  https://github.com/maharmstone/ntfs2btrfs
[22:22:15] <Paperbot> Link title(s): [ GitHub - maharmstone/ntfs2btrfs ]
[22:22:23] <simcop2387> in place ntfs to btrfs conversion
[22:25:41] <huf> ah yeah, stuff you cant undo
[22:25:43] <huf> always great
[22:27:29] *** Quits: Sauvin (~sauvin@about/linux/staff/sauvin) (Remote host closed the connection)
[22:29:31] *** Quits: ekathva_ (~ekathva@n14jpfd4dnmq637eu-1.v6.elisa-mobile.fi) (Ping timeout: 245 seconds)
[22:31:26] * GumbyPAN CPAN Upload: Number-Phone-3.8004 by DCANTRELL https://metacpan.org/release/DCANTRELL/Number-Phone-3.8004
[22:39:32] *** Quits: splatt990 (4b25e29db1@198.108.77.17) (Quit: Gateway shutdown)
[22:41:09] *** Quits: x5c30 (~x5c30@user/x5c30) (Ping timeout: 256 seconds)
[22:41:58] *** Joins: donofrio (~donofrio@c-68-40-123-74.hsd1.mi.comcast.net)
[22:42:02] *** Quits: FlorianBad (~FlorianBa@cpe-67-49-107-16.dc.res.rr.com) (Quit: Client closed)
[22:43:25] *** Quits: deadmarshal_ (~deadmarsh@95.38.115.166) (Ping timeout: 256 seconds)
[22:45:41] *** Joins: FlorianBad (~FlorianBa@cpe-67-49-107-16.dc.res.rr.com)
[22:47:50] *** Quits: diskin (~diskin@ec2-18-158-88-195.eu-central-1.compute.amazonaws.com) (Read error: Connection reset by peer)
[22:49:26] *** Joins: diskin (~diskin@31.23.45.31)
[22:49:56] *** Quits: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl) (Ping timeout: 245 seconds)
[22:50:53] <pragma-> perlbot: eval: [qw x y z x]
[22:50:54] <perlbot> pragma-: ["y","z"]
[22:51:20] <pragma-> horrif^Winteresting.
[22:51:28] * GumbyPAN CPAN Upload: Net-Twitch-API-0.11 by CLIPLAND https://metacpan.org/release/CLIPLAND/Net-Twitch-API-0.11
[22:52:04] *** Joins: tirnanog (~tirnanog@user/tirnanog)
[22:52:08] <pragma-> perlbot: eval: [qw x y z]
[22:52:09] <perlbot> pragma-: ERROR: Can't find string terminator "x" anywhere before EOF at (IRC) line 1. 
[22:52:44] <pragma-> string terminator "x"
[22:53:33] <simcop2387> hmm, i wonder if non-breaking space works
[22:53:55] <pragma-> perlbot: eval: [qw xx y z xx]
[22:53:57] <perlbot> pragma-: ERROR: Transliteration pattern not terminated at (IRC) line 1. 
[22:54:47] <pragma-> perlbot: eval: [qw t800 y z] # just curious
[22:54:49] <perlbot> pragma-: Possible attempt to put comments in qw() list at (IRC) line 1. Bareword found where operator expected at (IRC) line 1, near "qw t800 y z] # just curious" 	(Do you need to predeclare qw?) Unquoted string "curious" may clash with future reserved word at (IRC) line 1. ERROR: syntax error at (IRC) line 1, near "qw t800 y z] # just curious" Missing righ... [Output truncated. http://perl.bot/p/htqey5 ]
[22:54:59] <simcop2387> eval: use utf8; eval "[qw \N{NBSP} test boo \N{NBSP}]"
[22:55:01] <perlbot> simcop2387: ["test","boo"]
[22:55:05] <simcop2387> oh god
[22:55:24] <simcop2387> pragma-: there's your worst case scenario
[22:55:44] <simcop2387> eval: use utf8; eval "[qw\N{NBSP}test boo\N{NBSP}]"
[22:55:46] <perlbot> simcop2387: ["test","boo"]
[22:55:50] <fizzie> U+2063 INVISIBLE SEPARATOR is the best choice, because it doesn't get in the way of the reader but isn't whitespace either. /s
[22:56:01] <simcop2387> fizzie++
[22:56:11] <simcop2387> eval: use utf8; eval "[qw\N{ZWJ}test boo\N{ZWJ}]"
[22:56:13] <perlbot> simcop2387: No output.
[22:56:21] <simcop2387> darn, no zero width joiners
[22:56:49] <simcop2387> eval: use utf8; eval "[qw\N{INVISIBLE SEPARATOR}test boo\N{INVISIBLE SEPARATOR}]"
[22:56:50] <perlbot> simcop2387: ["test","boo"]
[22:57:15] <simcop2387> i wonder how fucked up of a script can you do with using those things
[23:07:18] *** Quits: Trigon (~reuben@144.39.114.115) (Ping timeout: 268 seconds)
[23:08:40] *** Quits: geowiesnot (~user@5-51-190-244.abo.bbox.fr) (Ping timeout: 256 seconds)
[23:09:42] *** Quits: rgrinberg (~textual@2806:101e:7:5086:c127:9b59:bd2c:b6b3) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[23:13:04] *** Joins: x5c30 (~x5c30@user/x5c30)
[23:13:23] *** Quits: Darkcoal (~user@user/Darkcoal) (Quit: Darkcoal)
[23:15:42] <simcop2387> oh geeze, "
[23:15:43] <simcop2387> From the same person that made WinBtrfs and Quibble, a Windows NT Btrfs installable filesystem and bootloader. And yes, with all of that one can boot and run Windows natively on Btrfs, at least in theory.
[23:15:59] <simcop2387> bah paste fail.  but that ntfs2btrfs has a "purpose"
[23:17:08] *** Quits: proller (~p@2a02:6b8:b081:b646::1:9) (Ping timeout: 252 seconds)
[23:20:33] <veesh> i love government websites
[23:20:48] <veesh> had to manually edit the html attributes to make chrome suggest me a password
[23:20:58] <veesh> b/c obviously password fields shoudl be `type="text"`
[23:21:02] <veesh> passwords are text, right?
[23:21:37] <simcop2387> i love it when they go out of their way to make the field unable to be used for copy paste, for autofill, and undetectable for password managers
[23:21:55] <simcop2387> and then email you your password when you hit forgot password
[23:21:56] <veesh> i think i'd get arrested in missouri for this kind of hijinx
[23:23:02] <simcop2387> veesh: only if you emarrass the governor with it
[23:26:33] <veesh> now i'm waiting 20 minutes already for a text with my login code
[23:27:28] *** Joins: diskin_ (~diskin@ec2-18-158-88-195.eu-central-1.compute.amazonaws.com)
[23:27:28] *** diskin is now known as Guest7846
[23:27:28] *** diskin_ is now known as diskin
[23:28:27] *** Quits: Markow (~Markow@176.122.215.103) (Quit: Linux 5.17.0-rc6-git-38f80f4-Pogorze-Karpackie-CUSTOM-KERNEL)
[23:28:44] *** Quits: Peppard (~quassel@2001:470:1f0b:751:176c:78ce:bb59:4c28) (Ping timeout: 250 seconds)
[23:28:56] *** Joins: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl)
[23:29:31] *** Joins: Peppard (~quassel@2001:470:1f0b:751:1b52:d4ba:80a5:3faa)
[23:29:38] <simcop2387> veesh: the code is only valid for 10 minutes
[23:29:47] <veesh> at least it's valid for 30 minutes
[23:29:51] <veesh> but there's no signs of it coming
[23:29:54] *** Joins: proller (~p@2a02:6b8:b081:b583::1:33)
[23:30:07] *** Quits: mowcat (~mowcat@2a00:23c5:d190:1901:f22f:74ff:fe77:1e1c) (Remote host closed the connection)
[23:30:32] *** Quits: Guest7846 (~diskin@31.23.45.31) (Ping timeout: 272 seconds)
[23:37:23] *** Quits: rorx (~rorx@cpe-65-24-161-82.columbus.res.rr.com) (Ping timeout: 250 seconds)
[23:37:34] <simcop2387> veesh: the code also contains potassium benzoate
[23:38:42] *** Joins: Trigon (~reuben@144.39.114.115)
[23:39:11] <Botje> that's bad
[23:46:01] <veesh> i had to restart the whole signup process, making sure to check "call me" instead of "text me"
[23:46:04] <veesh> the call came right away
[23:46:48] <simcop2387> figures
[23:47:42] <veesh> i thought israel was high-tech central
[23:50:50] *** Joins: jmdaemon (~jmdaemon@user/jmdaemon)
[23:51:48] <Botje> "text me"
[23:51:49] <Botje> ?
[23:52:02] <Botje> as in "send me a trivially intercepted text message"?
[23:52:35] *** Joins: krismatrix (~krismatri@c-73-212-30-17.hsd1.md.comcast.net)
[23:53:24] *** Joins: deadmarshal_ (~deadmarsh@95.38.115.166)
[23:54:19] *** Joins: Adoi (~Adoi@user/adoi)
[23:54:31] *** Joins: rorx (~rorx@cpe-65-24-161-82.columbus.res.rr.com)
[23:57:58] *** Quits: deadmarshal_ (~deadmarsh@95.38.115.166) (Ping timeout: 256 seconds)
