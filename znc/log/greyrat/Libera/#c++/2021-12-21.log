[00:00:02] *** Quits: MajorBiscuit (~MajorBisc@62-52-102.netrun.cytanet.com.cy) (Ping timeout: 240 seconds)
[00:00:04] *** Quits: Hax0r (~Hax0r@46.38.81.225) (Remote host closed the connection)
[00:00:22] *** Joins: Hax0r (~Hax0r@46.38.81.225)
[00:00:45] *** Joins: badone (~badone@209.132.189.152)
[00:01:10] *** Quits: Guest64 (~Guest64@cpc73670-dals20-2-0-cust965.20-2.cable.virginm.net) (Quit: Client closed)
[00:01:42] *** Quits: sysctl (~sysctl@88.215.77.255) (Quit: leaving)
[00:04:54] *** Quits: Green_ (~Green-@h-85-24-185-116.A189.priv.bahnhof.se) (Ping timeout: 256 seconds)
[00:09:42] *** Joins: Green_ (~Green-@h-85-24-185-116.A189.priv.bahnhof.se)
[00:09:50] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:1116:7911:5ad7:44c3) (Ping timeout: 268 seconds)
[00:13:52] <CarloWood> This is not useful though :/
[00:14:00] <CarloWood> (gdb) p m_presentation_attachment
[00:14:00] <CarloWood> $7 = std::optional<vulkan::rendergraph::Attachment> = {[contained value] = {m_image_view_kind = @0x7fffeffed200, m_id = {m_id = 1}, m_name = "swapchain"}}
[00:14:12] <CarloWood> (gdb) p m_presentation_attachment.value()
[00:14:12] <CarloWood> Cannot evaluate function -- may be inlined
[00:14:44] <CarloWood> I tried 10 more things, but can't seem to access m_image_view_kind (the reference) from gdb.
[00:14:57] *** Quits: Tokamak_ (~Tokamak@172.58.191.77) (Ping timeout: 240 seconds)
[00:17:53] *** Joins: dongcarl (~dongcarl@70.107.207.192)
[00:18:35] <bpalmer> just to make sure, 'p *m_presentation_attachment' also fails?
[00:18:43] <CarloWood> it does
[00:19:01] <CarloWood> (gdb) p *m_presentation_attachment
[00:19:01] <CarloWood> Could not find operator*.
[00:19:36] *** Joins: Tokamak (~Tokamak@107.116.82.97)
[00:20:50] <CarloWood> The problem that I am trying to debug is that my program crashes before the referenced object contains nonsense.
[00:21:11] <CarloWood> uninitialized data it seems
[00:23:18] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:d0f9:15ce:3995:401b)
[00:24:44] *** Quits: slidercrank (~slidercra@user/slidercrank) (Ping timeout: 256 seconds)
[00:27:15] *** Joins: bolovanos_ (~bolovanos@user/bolovanos)
[00:27:43] *** Joins: RangerBobVA (~bmaddox@user/rangerbobva)
[00:27:50] *** Quits: nostar (~nostar@2601:406:4100:34d:8f4:5ea7:30b2:b7e6) (Quit: Leaving)
[00:28:09] *** Quits: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon) (Ping timeout: 276 seconds)
[00:28:31] *** Quits: seninha (~seninha@user/seninha) (Remote host closed the connection)
[00:33:10] <jdavfsxd> in case you wondered you opted for zero cost abstraction -> https://godbolt.org/z/Kx3dKKzb5
[00:33:22] <jdavfsxd> fail
[00:33:53] *** Quits: sa02irc (~mbax@155-079-043-212.ip-addr.inexio.net) (Remote host closed the connection)
[00:34:35] <Alipha> std::optional<int*> is silly in the vast majority of situations
[00:35:17] <PJBoy> could argue that rust's references are needlessly large
[00:36:11] <kalven> jdavfsxd: that's not what zero cost abstraction refers to
[00:36:35] <jdavfsxd> kalven: it is
[00:37:33] <jdavfsxd> they're the ones that handed an abstraction that can't be optimized further, not c++
[00:38:15] <kalven> no, it's about whether using a higher level construct (in this case optional) has a cost vs "doing it manually" (like manually tracking a bool and handling construction/destruction)
[00:38:51] *** Joins: Franciman (~Franciman@mx1.fracta.dev)
[00:39:18] <jdavfsxd> Alipha: agreed it's silly, but it's just a trivial illustration, &i32 can be replaced by &Foo if you will.
[00:39:53] <PJBoy> just shows that pointer+bool is larger than pointer
[00:39:57] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:d0f9:15ce:3995:401b) (Ping timeout: 240 seconds)
[00:40:06] <Alipha> jdavfsxd: more broadly, std::optional<T*> is silly, i mean
[00:40:13] <PJBoy> has no relevance to the overhead of optional
[00:40:44] <PJBoy> unless rust references are pointers?
[00:40:45] <jdavfsxd> kalven: guess what, that's how null value of pointer is used.
[00:41:21] <kalven> jdavfsxd: yes, and optional<int*> isn't comparable, it has more states
[00:41:58] <PJBoy> https://godbolt.org/z/EPW1eMWb5 there
[00:42:00] <Alipha> std::optional<int*> can std::nullopt, nullptr, or a pointer to a valid int object
[00:42:17] *** Quits: RabidToaster (~Thunderbi@bras-base-otwaon234vw-grc-15-50-100-215-56.dsl.bell.ca) (Ping timeout: 240 seconds)
[00:42:43] <kalven> std::optional doesn't support references. if it did, it could also be the same size as a pointerl, like boost::optional<int&> is: https://wandbox.org/permlink/sYN8qeMsZ4e2jpVb
[00:42:51] <PJBoy> and for a little fun, this one compares references to references https://godbolt.org/z/asjqMMzhe
[00:43:01] *** Joins: seninha (~seninha@user/seninha)
[00:44:21] *** Quits: Tokamak (~Tokamak@107.116.82.97) (Ping timeout: 268 seconds)
[00:45:36] <Alipha> the analog of Option::<&i32> would be int*
[00:46:21] *** Quits: LuksNuke (~LuksNuke@gateway/tor-sasl/luksnuke) (Ping timeout: 276 seconds)
[00:46:30] <jdavfsxd> Alipha: which is an awesome abstraction :)
[00:46:55] <PJBoy> I somewhat like the idea of optional references
[00:47:03] <PJBoy> but the name "option" is a blunder
[00:47:28] <Alipha> https://github.com/alipha/cpp/blob/master/optional/optional.hpp
[00:47:44] <PJBoy> yet another optional
[00:47:48] <Alipha> :-)
[00:47:56] <jdavfsxd> too many options?
[00:48:17] <jdavfsxd> in any case, it's optional.
[00:49:05] <PJBoy> does it work for rvalue references?
[00:49:22] <PJBoy> probably not if you're taking pointers
[00:49:24] *** Joins: lxsameer (~lxsameer@user/lxsameer)
[00:49:40] *** Quits: stonkey (~stonkey@user/stonkey) (Ping timeout: 256 seconds)
[00:50:00] <jdavfsxd> fwiw, rust has C pointer and an Option for it doesn't get coalesced -> ttps://godbolt.org/z/K1hx8oEe5
[00:50:04] <jdavfsxd> ops
[00:50:07] <jdavfsxd> https://godbolt.org/z/K1hx8oEe5
[00:50:22] <PJBoy> yeah I posted that one already :p
[00:50:26] *** Joins: Tokamak (~Tokamak@107.116.82.97)
[00:50:33] <jdavfsxd> oh, sorry, didn't notice
[00:51:19] *** Quits: Viewday11 (~Viewday@user/viewday) (Read error: Connection reset by peer)
[00:51:58] <jdavfsxd> anyway, pointers are not that into the vocab of daily use, refs are, so you benefit from that small optimization all the time, contrary to what happens in c++, where std::optional is fat all over.
[00:52:30] *** Quits: rendar (~rendar@user/rendar) (Quit: Leaving)
[00:52:46] <PJBoy> think it would be more accurate to say that rust options support reference types
[00:53:17] <Alipha> raw pointers are an important part of c++ and you shouldn't be afraid to use them in your daily code
[00:53:23] <PJBoy> optional is only ever as fat as it needs to be
[00:53:27] <jdavfsxd> that optimization is more pervasive than that actually.
[00:53:32] *** Joins: Viewday11 (~Viewday@user/viewday)
[00:53:52] <RandomReader> don't they model different concepts in the languages anyway though?
[00:54:01] <Alipha> the only thing about raw pointers is that you should "never" have to use `delete p;` or `delete[] p;`
[00:54:08] <RandomReader> so not quite comparable, with the different decisions made
[00:54:35] <PJBoy> can you rebind rust references to different variables?
[00:54:47] *** Quits: CaCode (~CaCode@user/cacode) (Quit: Leaving)
[00:55:18] <PJBoy> a la `auto x = &a; x = &b;` modulo syntax
[00:56:29] <RandomReader> I believe so
[00:57:00] <RandomReader> which is one aspect that makes optional<ref> be conceptually a unique thing in Rust
[00:57:26] *** namo is now known as nomo
[00:57:39] *** nomo is now known as namo
[00:58:10] *** Quits: jplejacq (~jplejacq@24.224.90.176) (Ping timeout: 256 seconds)
[01:01:32] *** Quits: plastico (~plastico@neomutt/plastico) (Ping timeout: 240 seconds)
[01:01:49] <jdavfsxd> okay boyz, forget about pointers that, let's remove it out of the question -> https://godbolt.org/z/hqjdnoMd1
[01:01:56] <jdavfsxd> hmmm
[01:02:05] <jdavfsxd> fail, again, c plus plus
[01:02:13] <jdavfsxd> beat that kalven
[01:02:41] *** Quits: user334 (~user@p200300cdb7070300c528c51e94837680.dip0.t-ipconnect.de) (Quit: Konversation terminated!)
[01:02:52] <kalven> so does that mean you concede that optional<int*> and Optiona::<&i32> aren't comparable?
[01:03:16] *** Joins: plastico (~plastico@neomutt/plastico)
[01:04:41] <jdavfsxd> I don't because they actually are, in some sense. The first is what you can get (say, express) at this, in C++ jargon, same for the latter, in rust.
[01:04:59] <kalven> okay.
[01:05:20] <RandomReader> even this new example doesn't track, you're trying to make things equivalent that aren't
[01:05:29] <jdavfsxd> ?
[01:05:34] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:d0f9:15ce:3995:401b)
[01:06:08] <Alipha> Option::<bool> isn't a tristate? rust is an odd language, heh
[01:06:14] <RandomReader> it's fine to say you don't *like* one of these, but it's a result of intentional design decisions with each language, not some arbitrary choice for the hell of it
[01:06:15] <jdavfsxd> it's the bool and the option of both language combined in the way each language can combine those?
[01:06:16] <Alipha> std::optional<bool> is a tristate
[01:06:25] <jdavfsxd> sounds silly to say, oh, it's not the same.
[01:06:30] <kalven> Alipha: a byte can store more than that
[01:06:39] <Alipha> oh, blah
[01:06:44] <jdavfsxd> heh
[01:06:59] <PJBoy> the case of bool is interesting
[01:07:06] <RandomReader> std::optional is a generic container that allows direct object access to what it contains
[01:07:19] <jdavfsxd> PJBoy: it's why I said it's more general.
[01:07:20] <RandomReader> it can't optimize that without violating the generic interface, which is partly chosen by C++'s object semantics
[01:07:29] <RandomReader> Rust doesn't make the same decisions or have the same interfaces
[01:07:34] <PJBoy> in C++ the bool needs its own byte so you can change it via pointer/reference without affecting the optional flag
[01:07:59] <PJBoy> and I guess rust has an answer to that
[01:08:30] <jdavfsxd> fwiw, rust landed that zero cost juice here https://github.com/rust-lang/rust/pull/45225
[01:08:39] <PJBoy> or doesn't provide pointerable/referenceable access to the stored object?
[01:08:59] <Alipha> PJBoy: not necessarily. values {0, 1, 2} could be used for {false, true, std::nullopt} and still have a bool& to that byte, since 2 isn't a valid bool representation
[01:09:10] <jdavfsxd> if wanna check what it's actually doing, and why.
[01:09:10] <RandomReader> bool representation is unspecified
[01:09:20] <RandomReader> (and in practice, it's a lot looser than you'd expect .. the compilers do weird things)
[01:09:22] <PJBoy> Alipha, you can still memset it
[01:09:27] *** Joins: rond_ (~rond_@100.42.200.146.dyn.plus.net)
[01:09:33] <PJBoy> remember that anything can be aliased with char*
[01:10:26] <RandomReader> one of the most bizarre bugs I had to track down was due to a "violated" bool .. it appeared simultaneously true and false
[01:10:29] <PJBoy> here's one where C++ wins https://godbolt.org/z/x894GPz15
[01:11:02] <kalven> there are various "compact optional" libs out there
[01:11:04] <RandomReader> I also don't think it's required to be size 1, but that's neither here nor there
[01:11:34] *** Quits: Hax0r (~Hax0r@46.38.81.225) (Remote host closed the connection)
[01:11:37] <PJBoy> unlike your violated bool, which was both here *and* there
[01:11:42] <kalven> RandomReader: I saw sizeof(bool) = 8 on an openbsd/sparc machine...
[01:11:55] <RandomReader> Rust char is 4 bytes, so they're actually compacting that too
[01:12:22] <RandomReader> must be range-limited to Unicode?
[01:12:34] <PJBoy> does that mean rust chars are utf-32?
[01:12:37] *** Quits: Tokamak (~Tokamak@107.116.82.97) (Ping timeout: 240 seconds)
[01:12:44] <RandomReader> interesting re: openbsd/sparc
[01:12:48] <jdavfsxd> PJBoy: C++ is actually losing at that, because rust's char is about unicode, and c++'s is about ascii
[01:12:59] *** Quits: majors_ (~majors@user/majors) (Quit: ZNC 1.7.5+deb4 - https://znc.in)
[01:13:07] <PJBoy> jdavfsxd, but they're each language's respective char and optional
[01:13:11] <RandomReader> wonder what led to that, been a while since I was looking at sparc innards .. something with the registers I imagine
[01:13:32] <jdavfsxd> PJBoy: your comparison is more silly than my own.
[01:13:33] *** Quits: rond_ (~rond_@100.42.200.146.dyn.plus.net) (Client Quit)
[01:13:46] <PJBoy> :D
[01:14:05] <PJBoy> rust chars are utf-32 though?
[01:14:08] <Alipha> PJBoy: seems std::memset(&mybool, 2, 1); is UB, as conversion from bool to int should result in 1 if the bool is true: https://wandbox.org/permlink/PJTuMS4aK5QjX2Xf
[01:14:14] <PJBoy> utf-32 is like universally considered the worst utf
[01:14:47] *** Joins: majors (~majors@user/majors)
[01:15:14] <jdavfsxd> PJBoy: char is not same as string
[01:15:20] <PJBoy> Alipha, yeah it is UB to do that
[01:15:26] *** Joins: Tokamak (~Tokamak@172.58.191.77)
[01:15:33] <PJBoy> but it's not UB to memset it to 0
[01:15:42] <PJBoy> which would clear the optional flag if it shared the same byte
[01:15:45] <RandomReader> hm, I suppose a specific implementation could do like std::string SSO and still maintain the std::optional interface
[01:16:03] <jdavfsxd> string can have utf-8, but not chars can't represent all of unicode with just one byte.
[01:16:16] <PJBoy> so what's char in rust?
[01:16:19] <PJBoy> a whole string?
[01:16:39] <jdavfsxd> no
[01:16:40] <jdavfsxd> https://doc.rust-lang.org/std/primitive.char.html
[01:16:46] <Alipha> PJBoy: nah, there doesn't need to be an actual optional flag. just false=0, true=1, and std::nullopt=2
[01:17:06] *** Joins: MajorBiscuit (~MajorBisc@62-52-102.netrun.cytanet.com.cy)
[01:17:12] <PJBoy> but it should be possible to clear the bool with memset 0
[01:17:17] <PJBoy> oh uh
[01:17:22] <Alipha> PJBoy: which it is :-)
[01:17:33] <PJBoy> uhhhhhhh
[01:17:43] *** Joins: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon)
[01:18:03] <RandomReader> I'm not sure memsetting the bool it 0 is defined
[01:18:07] <PJBoy> ok that technically works
[01:18:11] <bpalmer> jdavfsxd: well, sure it can, as long as you're using at least 23-bit bytes.
[01:18:15] * Alipha submits a bug to the gcc project to specialize std::optional<bool> to take up 1 byte
[01:18:16] <PJBoy> the only problem there is you're pessimising that bool
[01:18:18] <RandomReader> I think that's only defined for char and related types
[01:18:31] <PJBoy> implementations can't assume that non-zero = true anymore
[01:18:32] <jdavfsxd> bpalmer: heh, okay
[01:18:43] <jdavfsxd> that's funny
[01:19:08] <bpalmer> there's a reason C++ has CHAR_BIT
[01:19:13] <Alipha> PJBoy: sure they can. because accessing the std::optional's value when it's std::nullopt is UB :-)
[01:19:23] <PJBoy> oh yeah
[01:19:35] <jdavfsxd> bpalmer: still funny though.
[01:19:37] <jdavfsxd> :D
[01:19:45] <PJBoy> ok but it pessimises *writes* to the bool
[01:19:45] *** Joins: Tokamak_ (~Tokamak@107.116.82.115)
[01:19:58] <PJBoy> as you can't write some non-zero value for true anymore
[01:20:09] <Alipha> PJBoy: you couldn't anyway
[01:20:17] <PJBoy> the programmer can't, but the compiler can
[01:20:41] *** Quits: Dreg (~Dreg@fr33project.org) (Read error: Connection reset by peer)
[01:20:44] *** Quits: Tokamak (~Tokamak@172.58.191.77) (Ping timeout: 268 seconds)
[01:20:45] *** Joins: sbrothy (~sbrothy@23.102.41.137)
[01:20:47] *** Joins: Dreg- (~Dreg@fr33project.org)
[01:21:06] <jdavfsxd> :)
[01:21:09] *** Joins: Tokamak (~Tokamak@172.58.191.77)
[01:21:11] <Alipha> PJBoy: no, take my example. you're saying that `bool x = 2;` could write 2 to x, but that's the same as `bool x; std::memset(&x, 2, 1);`
[01:21:18] *** Quits: proller (~p@2a02:6b8:b081:7212::1:5) (Ping timeout: 260 seconds)
[01:21:35] <PJBoy> I'm saying it's not OK for you to do either of those things
[01:21:57] <PJBoy> but the compiler can choose to generate code such that bool object representation for true = 2 is OK
[01:22:08] <jdavfsxd> zero costly
[01:22:10] *** Joins: neshpion (~neshpion@gateway/tor-sasl/neshpion)
[01:22:24] <jdavfsxd> as in... hmmm
[01:22:31] <PJBoy> also the expression is zero-overhead
[01:22:35] <PJBoy> nothing is zero cost
[01:22:37] <PJBoy> literally
[01:22:42] <jdavfsxd> defeat
[01:22:54] <Alipha> PJBoy: only if it's aware of the complete access to that bool.. and which case, it could do the same thing with std::optional<bool>
[01:23:15] *** Quits: Tokamak (~Tokamak@172.58.191.77) (Read error: Connection reset by peer)
[01:23:18] <PJBoy> I don't think there's any guarantee that memcpy from a bool to something else generates a 1
[01:23:27] <BurumaSerafuku> yup
[01:23:37] <PJBoy> and for non memcpy access, the loading of that bool can force conversion to 0/1
[01:24:10] *** Quits: gh34 (~textual@cpe-184-58-181-106.wi.res.rr.com) (Quit: Textual IRC Client: www.textualapp.com)
[01:24:14] *** Joins: nostar (~nostar@2601:406:4100:34d:8f4:5ea7:30b2:b7e6)
[01:24:14] *** Quits: Tokamak_ (~Tokamak@107.116.82.115) (Ping timeout: 256 seconds)
[01:24:54] <Alipha> PJBoy: from what i understand of your argument, you're arguing that foo could have the same asm as bar: https://godbolt.org/z/ondbKW5EM
[01:25:08] <PJBoy> { char x(2); bool b; memcpy(&b, &x, 1); cout << b, bool(b), +b, +bit_cast<char>(b); }
[01:25:08] <geordi> true, true, 2, 2
[01:25:38] <PJBoy> I'm a little surprised at that +b case
[01:26:11] *** Joins: Tokamak (~Tokamak@172.58.191.77)
[01:26:32] <PJBoy> yeah that's what I'm saying
[01:26:37] *** Joins: jplejacq (~jplejacq@24.224.100.40)
[01:26:51] <Alipha> PJBoy: then why doesn't it? :-)
[01:26:58] <PJBoy> so long as anything that loads that bool converts the value to 0/1
[01:27:18] <PJBoy> which isn't what seems to happen in GCC
[01:27:53] <PJBoy> { char x(2); bool b; memcpy(&b, &x, 1); cout << noboolalpha << b, bool(b), +b, +bit_cast<char>(b); }
[01:27:53] <geordi> 2, 2, 2, 2
[01:27:59] <PJBoy> look at that, even bool(b) generates a 2
[01:28:06] <RandomReader> jdavfsxd - this gives more context and some sources for what you've been trying to quote: https://en.cppreference.com/w/cpp/language/Zero-overhead_principle
[01:28:12] <PJBoy> UB is a hell of a drug
[01:29:27] <zz> { bool b = 1; cout << TYPE(+b); }
[01:29:28] <geordi> prvalue int
[01:30:15] <BurumaSerafuku> zz top
[01:30:16] *** Quits: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon) (Remote host closed the connection)
[01:30:41] *** Joins: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon)
[01:30:43] *** Quits: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon) (Remote host closed the connection)
[01:31:00] *** Joins: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon)
[01:36:14] <Franciman> hi, when dealing with functions that return a boolean to indicate failure
[01:36:19] *** Quits: pulse (~pulse@user/pulse) (Quit: Join a gamedev community https://indiedevs.net/)
[01:36:28] <Franciman> is there any idiom to avoid doing a lot of if(res == false) cleanup
[01:36:30] <Franciman> ?
[01:36:49] <bpalmer> if(!res) ?
[01:37:18] <kalven> I think they are talking about what goes into the true clause rather than the test itself
[01:37:31] <RandomReader> jdavfsxd - there's also this clip that goes into much more detail and nuance about the intent: https://www.youtube.com/watch?v=G5zCGY0tkq8&t=187s
[01:37:50] <bpalmer> you could, I suppose, do 'auto check = [](bool result) { if(!result) { throw something(); } } ;   try { check(foo()); check(bar()); ... } catch(const whatever& w) { ... }
[01:37:51] <jdavfsxd> RandomReader: I have better quoted stroustrup than cppref. Another fail.
[01:37:57] <InPhase> Franciman: You can look for a RAII structure to make the cleanup automatic.
[01:38:11] <Franciman> thanks InPhase
[01:38:16] <InPhase> Franciman: Think carefully about your contents and how they could be made resources with destructors.
[01:38:31] <bpalmer> Oh, thought the cleanup was related to code structure, not resources.
[01:38:34] *** Joins: CaCode (~CaCode@user/cacode)
[01:38:45] <InPhase> bpalmer: It is.  But one can become the other usually.
[01:38:58] <InPhase> It's a matter of perspective.  :)
[01:39:00] <RandomReader> jdavfsxd - uh ... cppref links to some of Stroustrup's published material, and I just linked to an interview with him, so not sure what you mean?
[01:39:35] *** Joins: chozorho (~chozorho@2601:146:300:c30::d1a0)
[01:39:48] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[01:39:51] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:d0f9:15ce:3995:401b) (Ping timeout: 268 seconds)
[01:39:54] <RandomReader> or are you saying you *don't* want information from the originator of that principle?
[01:39:56] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[01:39:56] *** ChanServ sets mode: +v npaperbot
[01:40:50] <RandomReader> Franciman - depends on the APIs, but sometimes I just end up having higher-level functions that have all that stuff inside, and only use those functions in the rest of the code
[01:41:32] <RandomReader> (this is along with looking into RAII containers for the resources, etc .. it's a combination of things, not a single pattern that fits most cases)
[01:41:42] <Franciman> many thanks people
[01:41:44] <jdavfsxd> RandomReader: because what's written upfront is not the content in the links: "In general, C++ implementations obey the zero-overhead principle: What you don’t use, you don’t pay for [BS94]. And further: What you do use, you couldn’t hand code any better."
[01:42:37] <jdavfsxd> my wording above has wisely picked from those words exactly, as in, "handing code any better", etc.
[01:42:45] <jdavfsxd> very wisely, btw.
[01:43:46] <kalven> optional provides a specific interface. crucially it allows direct access to the stored object. if you *dont* need that, then you can of course do better (like using 3 states from a char)
[01:44:00] <RandomReader> jdavfsxd - you're gonna have to clarify, because so far the only thing I've seen from you is the phrase "zero cost abstraction"
[01:44:56] <jdavfsxd> RandomReader: 2021-12-20 18:07:33 jdavfsxd they're the ones that handed an abstraction that can't be optimized further, not c++
[01:45:31] <RandomReader> and how does that relate to any the conversation about resources in the last 18 minutes?
[01:46:07] <RandomReader> even your last 4 lines seem to be throwing words at me rather than saying something coherent
[01:46:11] <jdavfsxd> good abstraction + less resources == better
[01:46:28] <RandomReader> (I'm assuming you're making a good-faith effort to communicate and this is just some language barrier)
[01:46:51] <RandomReader> oh, sorry, by "resources" I mean the links to the zero-overhead principle
[01:47:19] <jdavfsxd> well, I've started the long discussion, which I mostly didn't take part, just gave the food for thought, it seemed fruitful.
[01:47:56] <jdavfsxd> RandomReader: okay, reading back what you said then.
[01:48:04] *** Quits: magla (~gelignite@55d4e80d.access.ecotel.net) (Quit: Stay safe!)
[01:48:32] <jdavfsxd> hard to get what you meant..
[01:48:45] *** Quits: sbrothy (~sbrothy@23.102.41.137) (Quit: leaving)
[01:50:06] <RandomReader> oh, ok, to expand a bit: "zero cost abstraction" is not the original phrase I can find anywhere, since that means something else .. it's always been about "zero overhead abstraction" compared to what you would do manually with the existing tools
[01:50:28] <RandomReader> so I was linking to the sources of that, so you could see for yourself, which I think is important for this discussion
[01:51:04] <RandomReader> even Rust seems to be following it somewhat, but there are different choices about the "existing tools", which also changes the result
[01:51:09] *** Joins: sbrothy (~sbrothy@23.102.41.137)
[01:51:37] <jdavfsxd> ok, no problem, even though "zero cost abstraction" isn't literally current bjarn words, it's a term well used in rust-land, that actually is just a reference to that.
[01:51:52] <jdavfsxd> it just refer to the same principle.
[01:51:53] <RandomReader> ah ok
[01:52:48] *** Joins: vqueiroz (uid340368@id-340368.hampstead.irccloud.com)
[01:53:33] *** Quits: calm-steam (~calm-stea@user/calm-steam) (Remote host closed the connection)
[01:53:35] *** Quits: kaph (~kaph@net-2-47-236-216.cust.vodafonedsl.it) (Read error: Connection reset by peer)
[01:53:53] *** Joins: calm-steam (~calm-stea@user/calm-steam)
[01:54:16] *** Joins: kaph (~kaph@net-2-47-236-216.cust.vodafonedsl.it)
[01:54:34] <RandomReader> I think many programmers naturally try to follow it anyway, at least once they reach a certain level of understanding, but I wish a lot more did :D
[01:55:54] <jdavfsxd> even better when embedded into builtin tooling 😉
[01:56:26] <InPhase> RandomReader: It's a fair distinction, as there sure are some heavy costs to some of the "zero overhead" abstractions in C++.  :)
[01:57:37] <RandomReader> yup
[01:57:45] *** Quits: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net) (Ping timeout: 268 seconds)
[01:58:36] *** Quits: Tokamak (~Tokamak@172.58.191.77) (Read error: Connection reset by peer)
[01:59:29] <bpalmer> I think too many people stress way too much about cheap but not zero costs
[01:59:44] <jdavfsxd> I have no standard knowledge to whether c++'s bool byte contents can be taken advantage or not beyond the two states it's used for. IF that's possible, then, optional specialization could have taken advantage of that, in principle.
[01:59:52] <bpalmer> e.g., how much collective time to do template programming to figure std::forwarding
[02:00:35] <jdavfsxd> just like a hand-made aplication of that.
[02:01:45] *** Joins: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[02:01:57] <RandomReader> I don't think there's anything on the *language* level that could do better, even in C
[02:02:34] <RandomReader> but knowledge of the platform's representations for bool could provide options, so compiler-level traits
[02:02:40] *** Quits: RangerBobVA (~bmaddox@user/rangerbobva) (Quit: Leaving)
[02:03:53] <RandomReader> we see that already with std::string SSO, and I don't think there's anything that would limit std::optional, but it'd only apply to individual cases like optional<bool> (at which point one wonders what makes optional<bool> so common it deserves this effort)
[02:04:17] <RandomReader> I think Rust's ABI decisions involve some larger concepts, rather than just one-off decisions, but I'm much less familiar with it
[02:04:24] *** Joins: masterbuilder (~user@user/masterbuilder)
[02:04:37] *** Joins: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it)
[02:04:37] *** Quits: night_wulfe_ (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 240 seconds)
[02:07:05] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:d0f9:15ce:3995:401b)
[02:07:48] <jdavfsxd> indeed, rust's decision (as in ref PR) is more pervasive/generic than hand picking specializations.
[02:08:04] *** Joins: Tokamak (~Tokamak@172.58.191.77)
[02:09:16] <Alipha> std::optional<T*> could potentially be optimized too, to say (T*)-1 or such is std::nullopt. at least, i think that would be allowed, if there's a pointer value besides nullptr that's guaranteed to not be valid on a given implementation
[02:09:32] <jdavfsxd> it's hand picking in some sense, but not equally as it would be for optional<bool> I guess.
[02:09:43] *** Joins: CaCode_ (~CaCode@user/cacode)
[02:10:37] *** Quits: pnill_ (~pnill@ip170.ip-54-39-37.net) (Ping timeout: 240 seconds)
[02:10:48] <RandomReader> T's alignment would allow options on several platforms, and x64 is full of unused bits currently
[02:11:12] <RandomReader> although Rust *doesn't* optimize that case right? which is interesting in context
[02:11:42] <RandomReader> although I think all pointers are "unsafe" so less interesting anyway
[02:12:24] *** Quits: CaCode (~CaCode@user/cacode) (Ping timeout: 256 seconds)
[02:12:35] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:d0f9:15ce:3995:401b) (Ping timeout: 252 seconds)
[02:13:09] *** Joins: rgrinberg (~textual@187.223.23.238)
[02:13:38] *** Joins: deviantfero (~deviantfe@190.150.27.58)
[02:13:54] *** Joins: stonkey (~stonkey@user/stonkey)
[02:14:45] <jdavfsxd> yes, I think it's maybe just not worth the effort to cover that for unsafe-land.
[02:15:02] *** Quits: Tokamak (~Tokamak@172.58.191.77) (Read error: Connection reset by peer)
[02:16:21] *** Quits: deviantfero (~deviantfe@190.150.27.58) (Client Quit)
[02:22:11] *** Quits: teepee (~teepee@openscad/teepee) (Remote host closed the connection)
[02:23:29] *** Joins: teepee (~teepee@openscad/teepee)
[02:24:11] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:d0f9:15ce:3995:401b)
[02:25:05] *** Joins: UsbSick (~UsbSick@2600:6c48:757f:e654:217f:9d34:6545:b1a6)
[02:26:33] *** Joins: Tokamak (~Tokamak@172.58.191.77)
[02:27:09] *** Joins: Zogatribe (Zogatribe@user/zogatribe)
[02:28:32] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:d0f9:15ce:3995:401b) (Ping timeout: 240 seconds)
[02:30:12] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:d0f9:15ce:3995:401b)
[02:30:32] *** Joins: Tokamak_ (~Tokamak@166.205.152.147)
[02:30:44] *** Quits: teepee (~teepee@openscad/teepee) (Remote host closed the connection)
[02:31:39] *** Quits: Tokamak (~Tokamak@172.58.191.77) (Ping timeout: 268 seconds)
[02:32:59] *** Joins: teepee (~teepee@openscad/teepee)
[02:33:46] *** Quits: pizdets (~pizdets@183.182.111.2) (Ping timeout: 250 seconds)
[02:33:54] *** Joins: pizdets_ (~pizdets@183.182.110.80)
[02:35:30] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:d0f9:15ce:3995:401b) (Ping timeout: 260 seconds)
[02:35:32] *** Quits: jdavfsxd (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Quit: jdavfsxd)
[02:40:41] *** Quits: highrate (~presonic@111-22-237-24.gci.net) (Read error: Connection reset by peer)
[02:41:02] *** Joins: highrate (~presonic@111-22-237-24.gci.net)
[02:44:12] *** Quits: GreenResponse (~tomek@r-45-155-148-237.gpon.bialnet.pl) (Quit: Leaving)
[02:45:57] *** Quits: zer0bitz (~zer0bitz@2001:2003:f444:a000:81c1:fdbc:2b2:4c4a) (Read error: Connection reset by peer)
[02:49:04] *** Joins: ferdna (~ferdna@user/ferdna)
[02:51:24] *** Quits: stonkey (~stonkey@user/stonkey) (Quit: Leaving)
[02:53:00] *** Quits: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it) (Quit: Leaving.)
[02:53:51] *** Quits: Zogatribe (Zogatribe@user/zogatribe) (Read error: Connection reset by peer)
[02:55:42] *** Quits: Tokamak_ (~Tokamak@166.205.152.147) (Ping timeout: 268 seconds)
[02:58:19] *** Joins: Tokamak (~Tokamak@166.205.152.147)
[02:59:23] *** Joins: forgotmynick (uid24625@id-24625.hampstead.irccloud.com)
[03:00:19] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.3)
[03:03:32] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:d0f9:15ce:3995:401b)
[03:03:48] *** Quits: smach (~savio@177.12.49.3) (Read error: Connection reset by peer)
[03:03:54] *** Joins: Hokedli (~laslie@gateway/tor-sasl/hokedli)
[03:07:45] *** Quits: LucaTM (~LucaTM@user/lucatm) (Quit: Textual IRC Client: www.textualapp.com)
[03:08:22] *** Quits: rgrinberg (~textual@187.223.23.238) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[03:09:17] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:d0f9:15ce:3995:401b) (Ping timeout: 268 seconds)
[03:11:57] *** Quits: namo (~nomo@95.87.208.95) (Ping timeout: 240 seconds)
[03:19:06] *** Quits: Hokedli (~laslie@gateway/tor-sasl/hokedli) (Ping timeout: 276 seconds)
[03:21:02] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:d0f9:15ce:3995:401b)
[03:21:17] *** Quits: MajorBiscuit (~MajorBisc@62-52-102.netrun.cytanet.com.cy) (Ping timeout: 240 seconds)
[03:22:44] *** Joins: __dev (sys@user/dev/x-7984917)
[03:23:48] *** Quits: rahl (~rahl@102.114.76.77) (Ping timeout: 256 seconds)
[03:24:03] *** Joins: AbleBacon_ (~AbleBacon@user/AbleBacon)
[03:25:17] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:d0f9:15ce:3995:401b) (Ping timeout: 240 seconds)
[03:25:32] *** Joins: rahl (~rahl@102.114.28.121)
[03:26:37] *** Quits: AbleBacon (~AbleBacon@user/AbleBacon) (Ping timeout: 240 seconds)
[03:29:02] *** Quits: lxsameer (~lxsameer@user/lxsameer) (Ping timeout: 252 seconds)
[03:31:02] *** Quits: evangeline (~Eleanor@178.79.105.181) (Ping timeout: 260 seconds)
[03:31:46] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:b9b9:658d:369d:1685) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[03:34:58] *** Parts: __dev (sys@user/dev/x-7984917) (It`s time to go...)
[03:36:57] *** Quits: Tokamak (~Tokamak@166.205.152.147) (Ping timeout: 240 seconds)
[03:38:49] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:d0f9:15ce:3995:401b)
[03:39:20] *** Joins: Tokamak (~Tokamak@172.58.188.156)
[03:41:29] *** Quits: Tokamak (~Tokamak@172.58.188.156) (Read error: Connection reset by peer)
[03:42:25] *** AbleBacon_ is now known as AbleBacon
[03:42:56] *** Joins: Tokamak (~Tokamak@172.58.188.156)
[03:43:48] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:d0f9:15ce:3995:401b) (Ping timeout: 268 seconds)
[03:46:01] *** Joins: Tokamak_ (~Tokamak@107.116.82.132)
[03:48:10] *** Quits: Tokamak (~Tokamak@172.58.188.156) (Ping timeout: 256 seconds)
[03:51:50] *** Quits: zen_coder (~zen_coder@2a02:8109:a280:2d8d:961:e816:8c8d:54a1) (Ping timeout: 268 seconds)
[03:52:11] *** Joins: rgrinberg (~textual@187.223.23.238)
[03:59:27] *** Joins: chenqisu1 (~bhca7d@183.217.201.63)
[04:08:41] *** Joins: blyat-73 (~hjgkjhgkj@46.235.96.249)
[04:09:07] *** Joins: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse)
[04:09:12] *** Joins: RabidToaster (~Thunderbi@bras-base-otwaon234vw-grc-15-50-100-215-56.dsl.bell.ca)
[04:12:07] *** Joins: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[04:12:15] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:d0f9:15ce:3995:401b)
[04:14:57] *** Quits: blyat-73 (~hjgkjhgkj@46.235.96.249) (Ping timeout: 240 seconds)
[04:17:26] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:d0f9:15ce:3995:401b) (Ping timeout: 252 seconds)
[04:18:35] *** Joins: night_wulfe_ (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[04:21:17] *** Quits: bolovanos_ (~bolovanos@user/bolovanos) (Ping timeout: 240 seconds)
[04:21:36] *** Quits: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 256 seconds)
[04:29:17] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:d0f9:15ce:3995:401b)
[04:30:37] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 240 seconds)
[04:31:14] *** Quits: CaCode_ (~CaCode@user/cacode) (Ping timeout: 256 seconds)
[04:33:32] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:d0f9:15ce:3995:401b) (Ping timeout: 240 seconds)
[04:34:09] *** Quits: seninha (~seninha@user/seninha) (Remote host closed the connection)
[04:36:22] *** Quits: bindu (~bindu@user/bindu) (Remote host closed the connection)
[04:37:06] *** Joins: bindu (~bindu@user/bindu)
[04:39:01] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[04:42:35] *** Joins: msk (~msk@103.213.213.70)
[04:43:57] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:d0f9:15ce:3995:401b)
[04:45:30] *** Quits: cmbengue (~Thunderbi@207.191.249.160) (Read error: Connection reset by peer)
[04:48:17] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:d0f9:15ce:3995:401b) (Ping timeout: 240 seconds)
[04:51:38] *** Quits: jplejacq (~jplejacq@24.224.100.40) (Ping timeout: 268 seconds)
[04:59:40] *** Quits: Sazhen86 (~Sazhen86@125-236-239-93.adsl.xtra.co.nz) (Quit: I'm out of here)
[05:00:47] *** Quits: vqueiroz (uid340368@id-340368.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[05:02:32] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:d0f9:15ce:3995:401b)
[05:04:17] *** Quits: rgrinberg (~textual@187.223.23.238) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[05:08:18] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:d0f9:15ce:3995:401b) (Ping timeout: 268 seconds)
[05:15:08] *** Joins: smallvil_ (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[05:17:42] *** Quits: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Ping timeout: 256 seconds)
[05:18:42] *** Quits: forgotmynick (uid24625@id-24625.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[05:19:31] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:d0f9:15ce:3995:401b)
[05:23:57] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:d0f9:15ce:3995:401b) (Ping timeout: 240 seconds)
[05:26:32] *** Quits: msk (~msk@103.213.213.70) (Ping timeout: 240 seconds)
[05:28:47] *** Joins: leduyquang753 (~leduyquan@user/leduyquang753)
[05:31:43] *** Quits: lockywolf (~lockywolf@vultr-seoul-openbsd.lockywolf.net) (Excess Flood)
[05:33:42] *** Joins: lockywolf (~lockywolf@vultr-seoul-openbsd.lockywolf.net)
[05:36:18] *** Joins: smach (~savio@177.12.49.3)
[05:36:40] *** Quits: pikapika (~pikapika_@pika.powered.by.lunarbnc.net) (Ping timeout: 268 seconds)
[05:36:41] *** Quits: smach (~savio@177.12.49.3) (Remote host closed the connection)
[05:37:07] *** Joins: smach (~savio@177.12.49.3)
[05:37:14] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:d0f9:15ce:3995:401b)
[05:37:28] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.4)
[05:38:03] *** Joins: Sazhen86 (~Sazhen86@125-236-239-93.adsl.xtra.co.nz)
[05:38:07] *** Quits: chenqisu1 (~bhca7d@183.217.201.63) (Quit: Leaving)
[05:38:26] *** Quits: smach (~savio@177.12.49.3) (Client Quit)
[05:39:48] *** Quits: phoenix (~phoenix@user/phoenix) (Ping timeout: 256 seconds)
[05:39:49] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[05:39:49] *** Quits: Pook (~Pook@2001:8a0:f996:1400:4c3:84d2:e243:90cb) (Quit: Leaving)
[05:39:57] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[05:39:57] *** ChanServ sets mode: +v npaperbot
[05:40:52] *** Joins: phoenix (~phoenix@user/phoenix)
[05:41:42] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:d0f9:15ce:3995:401b) (Ping timeout: 260 seconds)
[05:44:16] *** Joins: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[05:45:26] *** Quits: RabidToaster (~Thunderbi@bras-base-otwaon234vw-grc-15-50-100-215-56.dsl.bell.ca) (Ping timeout: 252 seconds)
[05:46:36] *** Quits: smallvil_ (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Ping timeout: 256 seconds)
[05:52:11] *** Quits: Yruama (~Yruama@2a01:cb15:8139:9400:8634:97ff:fe6e:86ac) (Remote host closed the connection)
[06:02:17] *** Joins: chenqisu1 (~bhca7d@183.217.201.63)
[06:02:42] *** Quits: chenqisu1 (~bhca7d@183.217.201.63) (Remote host closed the connection)
[06:03:01] *** Joins: chenqisu1 (~bhca7d@183.217.201.63)
[06:03:17] *** Quits: jkaye (~jkaye@2601:281:8300:7530:bdb2:1444:46f4:adc7) (Ping timeout: 240 seconds)
[06:05:02] *** Quits: bebyx (~Thunderbi@user/bebyx) (Ping timeout: 268 seconds)
[06:10:59] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:d0f9:15ce:3995:401b)
[06:15:37] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:d0f9:15ce:3995:401b) (Ping timeout: 240 seconds)
[06:15:38] *** Quits: malloy (~jimery@116.30.221.255) (Ping timeout: 250 seconds)
[06:17:30] *** Joins: malloy (~jimery@116.30.221.255)
[06:17:58] *** Quits: Linux77 (~LinuMage@186.233.183.58) (Ping timeout: 268 seconds)
[06:22:06] *** Joins: halkony (~halkony@199.58.86.204)
[06:23:10] *** Joins: Guest36 (~Guest36@205.251.233.51)
[06:27:21] *** Quits: millido (~millido@84.210.150.128) (Quit: ZNC 1.8.2 - https://znc.in)
[06:28:02] <Guest36> folks, i have this unique problem https://godbolt.org/z/s35ff13bc where I am trying to do simplify a weird logic where someone has overloaded new and delete operators to achieve something in DSP which I don't understand well. So, I am wondering if folks here can help me. If you uncomment line 7 then constructor for "abc" is called only once whereas
[06:28:02] <Guest36> in the current case it is called 32 times. How can I make the two versions same i.e. with or without that macro? https://godbolt.org/z/1ddTbbcrd
[06:29:41] <Guest36> disregard the first link that I posted. please use https://godbolt.org/z/1ddTbbcrd
[06:30:23] <RandomReader> those two lines will never be equivalent, multiple constructor calls is correct language behavior
[06:30:33] *** Quits: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br) (Quit: leaving)
[06:30:37] <RandomReader> what's the actual problem/confusion that led to this?
[06:31:42] *** Joins: pikapika (~pikapika_@pika.powered.by.lunarbnc.net)
[06:31:52] <Guest36> RandomReader valgrind is complaining and also some static checkers are barking a ton. So, I am planning to get rid of these overloaded operators and replace with explicit calls to aligned malloc and free.
[06:32:13] <RandomReader> that would be incorrect and will likely lead to very difficult to diagnose problems
[06:32:38] <RandomReader> C++ and C are different languages with different object models, and in this case attempting to use malloc directly is a bad idea
[06:32:58] <RandomReader> I would focus on what the checkers are *actually* complaining about
[06:33:10] <Guest36> RandomReader but overloading basic new and delete operators is equally bad no?
[06:33:29] <RandomReader> why?
[06:34:27] <Guest36> https://chromium.googlesource.com/chromium/src/+/refs/heads/main/base/memory/aligned_memory.cc see here...even in chromium project they do the same instead of this hackery.
[06:35:00] <RandomReader> the allocation operators are specifically user-replaceable to provide a standard way to deal with particular environments or desires, and in this case it appears to be about a minimum desired alignment
[06:35:06] *** Joins: Linux77 (~LinuMage@186.233.183.58)
[06:35:17] <RandomReader> that part of chrome is a replacement for malloc, not new
[06:35:40] <Guest36> RandomReader but it is in cpp code.
[06:35:49] <RandomReader> and?
[06:36:07] <RandomReader> (I'm not being rude, it's just difficult for me to tell which concepts you don't understand yet)
[06:37:34] <Guest36> the code where someone is doing the new and delete overloading is internally using c calls instead of standard cpp aligned functions. So, what is the point of this twisted code of overloading new and delete.
[06:38:15] <RandomReader> what would you call "standard cpp aligned functions" in this case?
[06:38:20] <Guest36> also, in my enviroment we just cpp just for abstraction and nothing else so our code is 90% c and only 10% cpp.
[06:38:56] <RandomReader> that doesn't make much difference, each language's respective object models still apply to its own code
[06:38:58] <Guest36> https://en.cppreference.com/w/cpp/memory/align
[06:39:15] <RandomReader> that's an adjustment function (pointer math, basically), not an allocator
[06:40:12] <RandomReader> maybe it'll help if I describe the flow a bit
[06:40:22] <Guest36> hmm, i just googled and pasted but I am sure there are some standard functions for that.
[06:41:01] <Guest36> static checkers are complaining about free as it is not able to see the definition of that because of this overloading...
[06:41:37] <Guest36> also I remember seeing somewhere to not overload basic new and delete.
[06:41:44] *** Joins: millido (~millido@84.210.150.128)
[06:42:48] <RandomReader> posix_memalign is POSIX-specific and would be used with free(), which would need to be abstracted by similar operator delete overloads in this situation
[06:43:09] <RandomReader> if the tools can't match posix_memalign and free, that's a problem with the tools
[06:43:36] <RandomReader> (to be fair this is outside the C++ standard, since posix_memalign is .. well .. POSIX, but still a tool issue on that platform)
[06:44:24] <RandomReader> anyway, in C++ terms, an object needs to be created in order to exist .. that happens in two parts: first storage is acquired for the object, then the object is created and initialized inside that storage
[06:44:40] *** Joins: Viewday113 (~Viewday@user/viewday)
[06:44:47] <RandomReader> initialization is when the constructor is called, so for an array of 32 objects, that means 32 distinct constructor calls
[06:44:55] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:d0f9:15ce:3995:401b)
[06:45:06] <RandomReader> the *expression* new[] does two things: acquires storage, and creates the objects
[06:45:31] <RandomReader> to acquire storage, it calls the *operator* new[], which is what two of these overloads are for
[06:46:08] <RandomReader> this is a user-replaceable function, and it is basically the lowest level of the C++ stack here: if you provide your own, you get storage from "somewhere", there's nothing else within C++ available
[06:46:15] *** Quits: Viewday11 (~Viewday@user/viewday) (Read error: Connection reset by peer)
[06:46:16] *** Viewday113 is now known as Viewday11
[06:46:49] <RandomReader> so in this case, these overloads are doing exactly what they're supposed to: acquiring storage, using a platform-specific method here
[06:47:10] <Guest36> RandomReader understood, so there is absolutely no way to make those two parts of ifdef similar atleast in c++ way. Got it.
[06:47:42] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[06:48:19] <RandomReader> right .. in C++ terms, using the result of malloc_aligned directly inside Array would be undefined behavior: no objects have been created
[06:48:45] <RandomReader> consequences would be visible if the T constructor does anything important .. if not then it's a bit of a tossup whether you'd notice
[06:49:19] <RandomReader> so it does need the new[] usage there, which is what the above covers for it
[06:49:47] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:d0f9:15ce:3995:401b) (Ping timeout: 252 seconds)
[06:49:50] <Guest36> RandomReader can't we construct them manually by using a for loop and calling the default constructor for all of them. Somehow I feel there is a way. However, I agree with you.
[06:50:18] <RandomReader> well, you could, with some extra care: "placement new" lets you construct an object inside of storage you already have
[06:50:57] <RandomReader> but in general, you'd have to do that everywhere, and provide matching manual destruction, tracking how many were successfully constructed in case of error, etc
[06:51:27] <RandomReader> so the new[] overload is less error-prone if you need to cover all of the program
[06:51:52] <RandomReader> (if it were just a one-off, then the overloads would probably not be so useful)
[06:57:24] <RandomReader> here's placement new in practice: https://en.cppreference.com/w/cpp/language/new#Placement_new
[07:00:36] <RandomReader> and here's a limited-vector like thing, which isn't too far off Array, if it helps: https://en.cppreference.com/w/cpp/types/aligned_storage#Example
[07:02:26] <Guest36> going through the links
[07:03:04] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:d0f9:15ce:3995:401b)
[07:04:23] *** Quits: Leone (~Leo@69-165-148-197.dsl.teksavvy.com) (Read error: Connection reset by peer)
[07:05:14] *** Joins: Viewday117 (~Viewday@user/viewday)
[07:07:37] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:d0f9:15ce:3995:401b) (Ping timeout: 240 seconds)
[07:07:38] *** Quits: Viewday11 (~Viewday@user/viewday) (Ping timeout: 256 seconds)
[07:07:38] *** Viewday117 is now known as Viewday11
[07:08:39] *** Joins: smallvil_ (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[07:10:55] *** Joins: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net)
[07:10:57] *** Quits: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Read error: Connection reset by peer)
[07:11:34] *** Quits: masterbuilder (~user@user/masterbuilder) (Remote host closed the connection)
[07:12:20] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Client Quit)
[07:14:17] *** Quits: kaph (~kaph@net-2-47-236-216.cust.vodafonedsl.it) (Read error: Connection reset by peer)
[07:17:21] *** Quits: ckdCreations (~ckdCreati@147.55.133.131) (Read error: Connection reset by peer)
[07:17:22] *** Quits: halkony (~halkony@199.58.86.204) (Remote host closed the connection)
[07:17:38] *** Quits: bindu (~bindu@user/bindu) (Quit: Leaving)
[07:17:39] *** Quits: fluter (~fluter@user/fluter) (Quit: WeeChat 3.3)
[07:17:56] *** Joins: ckdCreations (~ckdCreati@2607:fb90:8357:35f0:5094:958:f5f3:5548)
[07:18:15] *** Joins: bindu (~bindu@user/bindu)
[07:20:20] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:d0f9:15ce:3995:401b)
[07:21:37] *** Quits: rahl (~rahl@102.114.28.121) (Ping timeout: 240 seconds)
[07:25:12] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:d0f9:15ce:3995:401b) (Ping timeout: 268 seconds)
[07:26:06] *** Quits: bindu (~bindu@user/bindu) (Ping timeout: 276 seconds)
[07:26:25] *** Joins: nostart (~nostar@107.175.102.75)
[07:27:51] *** Joins: bindu (~bindu@user/bindu)
[07:27:59] *** Joins: Carbonflux (~Carbonflu@c-66-235-54-179.sea.wa.customer.broadstripe.net)
[07:28:37] *** Quits: nostar (~nostar@2601:406:4100:34d:8f4:5ea7:30b2:b7e6) (Ping timeout: 240 seconds)
[07:32:17] *** Quits: Sazhen86 (~Sazhen86@125-236-239-93.adsl.xtra.co.nz) (Quit: I'm out of here)
[07:32:34] *** Quits: bitmask (~bitmask@c-73-215-237-27.hsd1.nj.comcast.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[07:33:49] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:1946:a1aa:47c7:df0a)
[07:37:53] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:d0f9:15ce:3995:401b)
[07:38:17] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:1946:a1aa:47c7:df0a) (Ping timeout: 240 seconds)
[07:40:18] *** Quits: NEYi (~NEYi@109.251.216.38) (Quit: Leaving)
[07:42:52] *** Joins: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[07:43:25] *** Joins: fluter (~fluter@user/fluter)
[07:45:32] *** Quits: smallvil_ (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Ping timeout: 268 seconds)
[07:53:44] *** Joins: kashyaprushi (~kashyapru@2405:201:1010:b033:b90c:86ca:3fd:ed2a)
[07:55:04] *** Quits: smeso (~smeso@user/smeso) (Quit: smeso)
[07:56:29] *** Quits: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon) (Remote host closed the connection)
[08:03:24] *** Joins: smeso (~smeso@user/smeso)
[08:04:04] *** Quits: reset (~reset@user/reset) (Quit: reset)
[08:04:50] *** Joins: bindu_ (~bindu@user/bindu)
[08:05:27] *** Quits: bindu (~bindu@user/bindu) (Quit: Leaving)
[08:05:54] *** Joins: reset (~reset@user/reset)
[08:05:54] *** Joins: Jck_true8 (~jcktrue@user/jck-true/x-0200799)
[08:06:36] *** bindu_ is now known as bindu
[08:06:37] *** Quits: Jck_true (~jcktrue@user/jck-true/x-0200799) (Ping timeout: 240 seconds)
[08:06:37] *** Jck_true8 is now known as Jck_true
[08:07:08] *** Quits: chenqisu1 (~bhca7d@183.217.201.63) (Ping timeout: 256 seconds)
[08:13:24] *** Quits: traxex (~traxex@user/traxex) (Remote host closed the connection)
[08:14:51] *** Joins: Viewday115 (~Viewday@user/viewday)
[08:15:05] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[08:15:21] *** Quits: Viewday11 (~Viewday@user/viewday) (Read error: Connection reset by peer)
[08:15:21] *** Viewday115 is now known as Viewday11
[08:20:10] *** Quits: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl) (Read error: Connection reset by peer)
[08:20:26] *** Joins: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl)
[08:24:03] *** Joins: rgrinberg (~textual@187.223.23.238)
[08:26:50] *** Joins: smallvil_ (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[08:29:05] *** Joins: blyat-73 (~hjgkjhgkj@46.235.96.249)
[08:29:14] *** Quits: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Ping timeout: 256 seconds)
[08:41:57] *** Quits: badone (~badone@209.132.189.152) (Quit: ZNC 1.7.5 - https://znc.in)
[08:44:32] *** Joins: Viewday111 (~Viewday@user/viewday)
[08:44:37] *** Joins: ElectronApps (~ElectronA@user/electronapps)
[08:46:14] *** Quits: Viewday11 (~Viewday@user/viewday) (Ping timeout: 256 seconds)
[08:46:15] *** Viewday111 is now known as Viewday11
[08:47:08] *** Joins: pnill (~pnill@ip170.ip-54-39-37.net)
[08:52:10] *** Quits: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[08:55:14] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Read error: Connection timed out)
[08:55:29] *** Quits: notEVIL (~notevil@user/notevil) (Quit: ZNC 1.8.2 - https://znc.in)
[08:56:06] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[08:56:33] *** Joins: notevil (~notevil@user/notevil)
[08:57:25] *** Joins: bauripalash (~bauripala@2401:4900:382e:8809:1:1:e2e2:7d11)
[08:58:54] *** Quits: mattallmill (~mattallmi@ip68-103-130-85.ks.ok.cox.net) (Remote host closed the connection)
[08:59:21] *** Quits: bauripalash (~bauripala@2401:4900:382e:8809:1:1:e2e2:7d11) (Remote host closed the connection)
[08:59:32] *** Joins: bauripalash (~bauripala@2401:4900:382e:8809:1:1:e2e2:7d11)
[09:00:36] *** Joins: mattallmill (~mattallmi@ip68-103-130-85.ks.ok.cox.net)
[09:01:30] <shugo> if ` int (*p)[3]; int b[3] = {6, 1, 9}; p = &b; ` wants me to **p to get the value of b[0], why so ?
[09:02:51] <shugo> also i cannot initialize p = b even though writing only b is supposed to give address of of the first element right, why is it necessary to write p = &b
[09:03:25] *** Quits: bauripalash (~bauripala@2401:4900:382e:8809:1:1:e2e2:7d11) (Read error: Connection reset by peer)
[09:04:44] *** Joins: chenqisu1 (~bhca7d@183.217.201.63)
[09:04:56] *** Quits: nostart (~nostar@107.175.102.75) (Quit: Leaving)
[09:05:02] *** Joins: bauripalash (~bauripala@2401:4900:382e:8809:1:1:e2e2:7d11)
[09:05:12] *** Joins: Viewday113 (~Viewday@user/viewday)
[09:05:13] *** Quits: bauripalash (~bauripala@2401:4900:382e:8809:1:1:e2e2:7d11) (Client Quit)
[09:07:12] *** Quits: Viewday11 (~Viewday@user/viewday) (Ping timeout: 256 seconds)
[09:07:47] *** Joins: Viewday11 (~Viewday@user/viewday)
[09:09:22] *** Quits: Viewday113 (~Viewday@user/viewday) (Read error: Connection reset by peer)
[09:09:28] *** Quits: mattallmill (~mattallmi@ip68-103-130-85.ks.ok.cox.net) (Ping timeout: 256 seconds)
[09:27:43] *** Joins: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[09:29:51] *** Joins: tryte (~nelg@183.17.124.167)
[09:29:57] *** Quits: smallvil_ (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Ping timeout: 240 seconds)
[09:30:07] *** Quits: tryte (~nelg@183.17.124.167) (Quit: leaving)
[09:35:26] *** Quits: Guest36 (~Guest36@205.251.233.51) (Quit: Client closed)
[09:36:41] *** Joins: Viewday111 (~Viewday@user/viewday)
[09:38:22] *** Quits: Viewday11 (~Viewday@user/viewday) (Ping timeout: 256 seconds)
[09:38:23] *** Viewday111 is now known as Viewday11
[09:39:49] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[09:39:57] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[09:39:57] *** ChanServ sets mode: +v npaperbot
[09:55:34] *** Quits: teepee (~teepee@openscad/teepee) (Remote host closed the connection)
[09:55:59] *** Joins: rahl (~rahl@102.114.134.73)
[10:09:37] *** Quits: Enitin (~Enitin@82.102.22.84) (Ping timeout: 240 seconds)
[10:10:25] *** Joins: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net)
[10:10:55] *** Joins: Enitin (~Enitin@82.102.22.86)
[10:13:52] *** Joins: Viewday115 (~Viewday@user/viewday)
[10:15:12] *** Quits: Viewday11 (~Viewday@user/viewday) (Ping timeout: 256 seconds)
[10:15:13] *** Viewday115 is now known as Viewday11
[10:17:42] *** Joins: nostar (~nostar@68.51.221.108)
[10:23:30] *** Quits: blyat-73 (~hjgkjhgkj@46.235.96.249) (Remote host closed the connection)
[10:23:53] *** Joins: blyat-73 (~hjgkjhgkj@46.235.96.249)
[10:27:22] *** Quits: blyat-73 (~hjgkjhgkj@46.235.96.249) (Remote host closed the connection)
[10:27:44] *** Joins: blyat-73 (~hjgkjhgkj@46.235.96.249)
[10:29:50] *** Quits: Dizidentu (~aresg@modemcable151.154-19-135.mc.videotron.ca) (Quit: WeeChat 3.2)
[10:30:11] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:d0f9:15ce:3995:401b) (Ping timeout: 268 seconds)
[10:30:29] *** Joins: Dizidentu (~aresg@modemcable151.154-19-135.mc.videotron.ca)
[10:30:57] *** Quits: Enitin (~Enitin@82.102.22.86) (Ping timeout: 240 seconds)
[10:31:17] *** Quits: blyat-73 (~hjgkjhgkj@46.235.96.249) (Remote host closed the connection)
[10:31:40] *** Joins: blyat-73 (~hjgkjhgkj@46.235.96.249)
[10:33:13] *** Joins: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com)
[10:33:20] *** Quits: T`aZ (~TaZ@user/taz/x-9470768) (Ping timeout: 256 seconds)
[10:34:57] *** Joins: T`aZ (~TaZ@user/taz/x-9470768)
[10:35:19] *** Quits: neshpion (~neshpion@gateway/tor-sasl/neshpion) (Quit: my cats are fighting)
[10:35:49] *** Quits: great_taste (~great_tas@user/great-taste/x-5798414) (Quit: Client closed)
[10:40:51] *** Joins: smallvil_ (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[10:42:57] *** Quits: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Ping timeout: 240 seconds)
[10:46:41] *** Joins: peeps (~peepsalot@openscad/peepsalot)
[10:47:32] *** Quits: peeps[zen] (~peepsalot@openscad/peepsalot) (Ping timeout: 240 seconds)
[10:50:46] *** Joins: Enitin (~Enitin@82.102.22.85)
[10:54:31] *** Joins: slidercrank (~slidercra@user/slidercrank)
[10:55:17] *** Joins: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[10:55:31] *** Joins: furrymcgee (~devuan@cgn-89-1-208-9.nc.de)
[10:56:36] *** Quits: AbleBacon (~AbleBacon@user/AbleBacon) (Read error: Connection reset by peer)
[10:57:21] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:d0f9:15ce:3995:401b)
[10:58:16] *** Quits: smallvil_ (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Ping timeout: 256 seconds)
[11:00:25] *** Joins: rendar (~rendar@user/rendar)
[11:05:08] *** Joins: Viewday110 (~Viewday@user/viewday)
[11:07:20] *** Quits: Viewday11 (~Viewday@user/viewday) (Ping timeout: 256 seconds)
[11:07:20] *** Viewday110 is now known as Viewday11
[11:11:51] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[11:13:58] <RandomReader> shugo - different types, combined with the way the language handles bare arrays
[11:14:17] *** Quits: constxo (~brad@142.134.38.68) (Ping timeout: 240 seconds)
[11:15:07] <RandomReader> the variable b has type int[3], array-of-3-ints .. however the expression "b" can be implicitly converted into a pointer to the first element, type int*
[11:15:55] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[11:15:57] <RandomReader> that conversion is actually what happens for indexing, in the expression "b[0]": first it is converted into a pointer to the first element, int*, and then the index operator is applied to that pointer
[11:16:06] <RandomReader> (subscript operator, I should say)
[11:16:39] *** Joins: namo (~nomo@95.87.208.95)
[11:16:58] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[11:17:20] <RandomReader> the expression "&b" on the other hand is asking for the location of b, which has an array type .. therefore the type of that location is a pointer-to-array-3, which is int(*)[3]
[11:17:23] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[11:18:00] <RandomReader> so the implicit conversion of the the expression "b" is a pointer to the first element, but the result of the expression "&b" is a pointer to the array itself
[11:18:55] <RandomReader> that's why p is declared the way it is (pointer-to-array-of-3-int), and also why you can apply operator * twice to get the first element
[11:20:18] <RandomReader> the expression "*p" reaches the object array-of-int-3 .. that result can implicitly convert it to a pointer to the first element, int*, so applying operator* to it reaches the first element itself
[11:21:23] <RandomReader> the expression "*b" would also work .. as would "(*p)[0]"
[11:21:55] <RandomReader> { int (*p)[3]; int b[3] = {6, 1, 9}; p = &b; cout << TYPE_DESC(b), TYPE_DESC(p), TYPE_DESC(*p); }
[11:21:56] <geordi> lvalue array of 3 integers, lvalue pointer to an array of 3 integers, lvalue array of 3 integers
[11:23:10] *** Quits: rvalue (~rvalue@user/rvalue) (Quit: ZNC - https://znc.in)
[11:26:12] *** Quits: namo (~nomo@95.87.208.95) (Quit: Leaving)
[11:26:25] *** Joins: namo (~nomo@95.87.208.95)
[11:27:43] <RandomReader> all of that is worth knowing since you'll encounter it anyway, but in code I write, I prefer to use the library type std::array instead, because it behaves more like any other value type without the weird implicit pointer conversions
[11:28:33] *** Joins: interop_madness (~interop_m@user/interop-madness/x-0950004)
[11:28:35] *** Joins: sa02irc (~mbax@155-079-043-212.ip-addr.inexio.net)
[11:28:49] <RandomReader> std::array<int, 3> foo;    "foo" is that array object, not a pointer .. "foo[0]" gets me the first element .. "&foo" is a pointer to the entire array, or std::array<int, 3>*
[11:29:31] *** Joins: evangeline (~Eleanor@178.79.105.181)
[11:34:26] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Read error: Connection timed out)
[11:34:54] *** Joins: rcoote (~rcoote@2a02:908:69a:58a0:96c4:319a:a3f9:e211)
[11:35:51] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[11:36:31] *** Joins: Viewday116 (~Viewday@user/viewday)
[11:37:06] *** Joins: MajorBiscuit (~MajorBisc@62-52-102.netrun.cytanet.com.cy)
[11:38:30] *** Quits: Viewday11 (~Viewday@user/viewday) (Ping timeout: 256 seconds)
[11:38:30] *** Viewday116 is now known as Viewday11
[11:38:37] *** Quits: kashyaprushi (~kashyapru@2405:201:1010:b033:b90c:86ca:3fd:ed2a) (Ping timeout: 240 seconds)
[11:39:04] *** Quits: sa02irc (~mbax@155-079-043-212.ip-addr.inexio.net) (Remote host closed the connection)
[11:39:39] *** Quits: gothicserpent (~gothicser@89.45.90.225) (Quit: Leaving)
[11:42:28] *** Quits: MajorBiscuit (~MajorBisc@62-52-102.netrun.cytanet.com.cy) (Ping timeout: 256 seconds)
[11:44:23] *** Joins: MajorBiscuit (~MajorBisc@c-001-015-014.client.tudelft.eduvpn.nl)
[11:44:44] *** Quits: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Ping timeout: 256 seconds)
[11:46:13] *** Quits: sbrothy (~sbrothy@23.102.41.137) (Remote host closed the connection)
[11:51:41] *** Joins: rvalue (~rvalue@user/rvalue)
[11:52:08] *** Joins: gothicserpent (~gothicser@2604:a880:2:d0::2204:b001)
[11:56:58] *** Quits: xkuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[12:01:38] *** Quits: Compy (compy@2600:3c00::f03c:91ff:fe83:6d49) (Remote host closed the connection)
[12:03:37] *** Quits: Enitin (~Enitin@82.102.22.85) (Ping timeout: 240 seconds)
[12:04:13] *** Joins: Enitin (~Enitin@82.102.22.84)
[12:05:32] *** Joins: zen_coder (~zen_coder@2a02:8109:a280:2d8d:2d1a:ba44:ae3c:70ae)
[12:06:58] *** Joins: kashyaprushi (~kashyapru@2405:201:1010:b033:b90c:86ca:3fd:ed2a)
[12:08:17] *** Quits: Enitin (~Enitin@82.102.22.84) (Ping timeout: 240 seconds)
[12:09:01] *** Joins: Enitin (~Enitin@82.102.22.86)
[12:13:17] *** Quits: Enitin (~Enitin@82.102.22.86) (Ping timeout: 240 seconds)
[12:14:00] *** Joins: Viewday114 (~Viewday@user/viewday)
[12:15:34] *** Quits: Viewday11 (~Viewday@user/viewday) (Read error: Connection reset by peer)
[12:15:35] *** Viewday114 is now known as Viewday11
[12:15:57] *** Joins: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[12:16:28] *** Joins: Enitin (~Enitin@82.102.22.84)
[12:17:42] *** Joins: popocka[m] (~popockama@2001:470:69fc:105::1:546e)
[12:20:27] *** Joins: PJBoy (~PJBoy@user/pjboy)
[12:29:58] *** Quits: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Remote host closed the connection)
[12:31:00] *** Quits: blyat-73 (~hjgkjhgkj@46.235.96.249) (Remote host closed the connection)
[12:31:25] *** Joins: blyat-73 (~hjgkjhgkj@46.235.96.249)
[12:34:38] *** Quits: BurumaSerafuku (~sjw@69.206.48.64) (Remote host closed the connection)
[12:35:50] *** Joins: BurumaSerafuku (~sjw@69.206.48.64)
[12:36:11] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Read error: Connection timed out)
[12:36:49] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[12:40:15] *** Joins: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[12:44:53] *** Joins: Viewday119 (~Viewday@user/viewday)
[12:46:17] *** Joins: plastico (~plastico@neomutt/plastico)
[12:46:24] *** Quits: Viewday11 (~Viewday@user/viewday) (Read error: Connection reset by peer)
[12:46:24] *** Viewday119 is now known as Viewday11
[12:46:57] *** Joins: LucaTM (~LucaTM@user/lucatm)
[12:51:56] *** Quits: Betal (~Betal@user/betal) (Quit: WeeChat 3.4)
[12:52:29] *** Quits: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz) (Remote host closed the connection)
[12:53:12] *** Quits: henbruas (~henbruas@ti0003a400-4203.bb.online.no) (Quit: ZNC 1.8.2 - https://znc.in)
[12:53:26] *** Joins: nicholaus04 (~nicholaus@2607:fb90:e570:ba57:54e7:4c10:0:281)
[12:53:31] *** Joins: henbruas (~henbruas@ti0003a400-4203.bb.online.no)
[12:57:36] *** Joins: lxsameer (~lxsameer@user/lxsameer)
[12:59:54] *** Quits: rgrinberg (~textual@187.223.23.238) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[13:03:57] *** Quits: chozorho (~chozorho@2601:146:300:c30::d1a0) (Ping timeout: 240 seconds)
[13:05:04] *** Joins: Viewday118 (~Viewday@user/viewday)
[13:05:05] *** Joins: chozorho (~chozorho@2601:146:300:c30::d1a0)
[13:06:36] *** Quits: Viewday11 (~Viewday@user/viewday) (Read error: Connection reset by peer)
[13:06:36] *** Viewday118 is now known as Viewday11
[13:10:18] *** Quits: chenqisu1 (~bhca7d@183.217.201.63) (Ping timeout: 256 seconds)
[13:12:03] *** Joins: bolovanos_ (~bolovanos@user/bolovanos)
[13:13:35] *** Quits: Linux77 (~LinuMage@186.233.183.58) (Quit: KVIrc 5.0.1 Aria http://www.kvirc.net/)
[13:16:23] *** Joins: |7| (~seachdamh@user/seachdamh)
[13:17:12] *** Joins: bauripalash (~bauripala@2401:4900:382e:8809:1:1:e2e2:7d11)
[13:19:06] *** Joins: dyeplexer (~dyeplexer@user/dyeplexer)
[13:20:37] *** Quits: |7| (~seachdamh@user/seachdamh) (Client Quit)
[13:21:05] *** Joins: |7| (~seachdamh@user/seachdamh)
[13:22:49] *** Quits: Teukka (~teukka@user/Teukka) (Read error: Connection reset by peer)
[13:23:41] *** alanjian85[m] is now known as CyKid128[m]
[13:24:00] *** Quits: bauripalash (~bauripala@2401:4900:382e:8809:1:1:e2e2:7d11) (Quit: Quit)
[13:24:17] *** Quits: Carbonflux (~Carbonflu@c-66-235-54-179.sea.wa.customer.broadstripe.net) (Ping timeout: 240 seconds)
[13:25:50] *** Joins: Teukka (~teukka@84-216-41-232.customers.ownit.se)
[13:25:50] *** Quits: Teukka (~teukka@84-216-41-232.customers.ownit.se) (Changing host)
[13:25:50] *** Joins: Teukka (~teukka@user/Teukka)
[13:32:15] *** Joins: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it)
[13:33:32] *** Quits: T`aZ (~TaZ@user/taz/x-9470768) (Ping timeout: 240 seconds)
[13:35:42] *** Joins: T`aZ (~TaZ@user/taz/x-9470768)
[13:36:39] *** Joins: Viewday110 (~Viewday@user/viewday)
[13:38:04] *** Quits: Viewday11 (~Viewday@user/viewday) (Ping timeout: 256 seconds)
[13:38:05] *** Viewday110 is now known as Viewday11
[13:39:50] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[13:39:58] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[13:39:58] *** ChanServ sets mode: +v npaperbot
[13:46:19] *** Joins: smallvil_ (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[13:48:02] *** Joins: rgrinberg (~textual@2806:101e:1:83af:8095:9213:668b:97a8)
[13:48:17] *** Quits: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Ping timeout: 240 seconds)
[13:53:32] *** Quits: calm-steam (~calm-stea@user/calm-steam) (Remote host closed the connection)
[13:53:52] *** Joins: calm-steam (~calm-stea@user/calm-steam)
[13:55:45] *** Joins: MarcoFe (~marcofe@5.170.16.125)
[14:00:31] *** Quits: MarcoFe (~marcofe@5.170.16.125) (Client Quit)
[14:01:00] *** Joins: stonkey (~stonkey@user/stonkey)
[14:02:10] *** Quits: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[14:03:30] *** Joins: ko (~i.am@user/marlboro)
[14:07:57] *** Quits: bolovanos_ (~bolovanos@user/bolovanos) (Ping timeout: 240 seconds)
[14:08:11] *** Quits: rgrinberg (~textual@2806:101e:1:83af:8095:9213:668b:97a8) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[14:09:06] *** Joins: r-g (~r-g@51.159.55.86)
[14:09:16] *** Joins: jplejacq (~jplejacq@24.224.90.176)
[14:12:17] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Ping timeout: 240 seconds)
[14:13:28] *** Joins: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon)
[14:15:31] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[14:25:29] *** Joins: toastloop (toastloop@user/toastloop)
[14:31:17] *** Quits: Enitin (~Enitin@82.102.22.84) (Ping timeout: 240 seconds)
[14:31:29] *** Joins: Enitin (~Enitin@82.102.22.86)
[14:33:42] <Franciman> hi is there any compiler already supporting C++20 modules?
[14:33:50] *** Quits: nortoh (~nortoh@user/nortoh) (Quit: this is not importent)
[14:34:23] <PJBoy> visual studio
[14:34:42] *** Joins: nortoh (~nortoh@bishop.xerrero.com)
[14:34:42] *** Quits: nortoh (~nortoh@bishop.xerrero.com) (Changing host)
[14:34:42] *** Joins: nortoh (~nortoh@user/nortoh)
[14:34:58] <Franciman> nice
[14:35:00] <Franciman> ty
[14:37:39] *** Joins: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[14:38:13] *** Quits: eck (~root@user/eck) (Quit: PIRCH98:WIN 95/98/WIN NT:1.0 (build 1.0.1.1190))
[14:38:43] *** Joins: eck (~root@user/eck)
[14:39:47] *** Quits: smallvil_ (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Read error: Connection reset by peer)
[14:40:22] *** Quits: nshire (~nshire@user/nshire) (Read error: Connection reset by peer)
[14:40:55] *** Joins: nshire (~nshire@user/nshire)
[14:42:46] *** Quits: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon) (Remote host closed the connection)
[14:43:16] *** Joins: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon)
[14:44:46] *** Joins: Viewday114 (~Viewday@user/viewday)
[14:44:54] <CyKid128[m]> Visual Studio is not a compiler xDD
[14:45:09] <CyKid128[m]> say Microsoft Visual C++(MSVC)
[14:45:27] <CyKid128[m]> it's almost supported the whole C++20
[14:45:38] <PJBoy>  it compiles code
[14:46:04] <PJBoy> if that doesn't make it a compiler, I don't know what does
[14:46:18] *** Quits: Viewday11 (~Viewday@user/viewday) (Read error: Connection reset by peer)
[14:46:19] *** Viewday114 is now known as Viewday11
[14:46:34] <CyKid128[m]> Visual Studio is an Editor, or IDE
[14:46:57] <CyKid128[m]> it does only pass your arguments to the compiler or CMake
[14:47:24] <CyKid128[m]> then MSVC/Clang do compile
[14:47:38] <PJBoy> also intellisense
[14:47:48] <PJBoy> but that's besides the point
[14:47:56] <PJBoy> it compiles the code
[14:47:59] *** Joins: pulse (~pulse@user/pulse)
[14:48:15] <PJBoy> that's like saying a carpenter doesn't install carpets, hammers and nails do
[14:48:33] <PJBoy> or gcc isn't a compiler, cc1 is
[14:49:00] <PJBoy> it's neither pedantically correct, nor apedantically correct
[14:49:33] *** Quits: calm-steam (~calm-stea@user/calm-steam) (Quit: Leaving)
[14:50:10] <Franciman> is there a supported way to attain flexible array memebers in C++?
[14:50:35] <Franciman> i think that putting `mytype flex_array[1];` as last member can lead to UB
[14:50:48] <Franciman> when I access a data outside the boundaries of the struct
[14:51:10] <PJBoy> C++ has no support for flexible array members
[14:51:32] <Franciman> i know
[14:51:36] <Franciman> that's why I said attain
[14:51:40] <PJBoy> you'd have to manage a char buffer
[14:51:50] <Franciman> holy cringe
[14:51:50] <PJBoy> and view it as a more sophisticated object
[14:51:52] <Franciman> ok thanks
[14:52:06] <Franciman> this is impossible I think
[14:52:14] <PJBoy> or maybe there's some kind of library out there that makes this easy
[14:52:15] <Franciman> it's very hard, you also have to know about the padding and stuff
[14:52:28] <Franciman> this changes everything
[14:52:32] <Franciman> rip
[14:52:35] <Franciman> thanks
[14:57:31] *** Joins: toastloopex (toastloop@user/toastloop)
[14:58:51] *** Joins: bolovanos_ (~bolovanos@user/bolovanos)
[15:00:50] *** Quits: toastloopex (toastloop@user/toastloop) (Remote host closed the connection)
[15:00:54] *** Quits: toastloop (toastloop@user/toastloop) (Ping timeout: 268 seconds)
[15:02:56] *** Joins: Viewday117 (~Viewday@user/viewday)
[15:04:46] *** Quits: Viewday11 (~Viewday@user/viewday) (Ping timeout: 256 seconds)
[15:04:47] *** Viewday117 is now known as Viewday11
[15:04:56] *** Quits: T`aZ (~TaZ@user/taz/x-9470768) (Ping timeout: 245 seconds)
[15:06:30] *** Joins: seninha (~seninha@user/seninha)
[15:07:01] *** Joins: T`aZ (~TaZ@user/taz/x-9470768)
[15:07:17] *** Quits: bolovanos_ (~bolovanos@user/bolovanos) (Ping timeout: 240 seconds)
[15:11:36] *** Joins: smallvil_ (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[15:13:50] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Ping timeout: 260 seconds)
[15:14:28] *** Quits: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Ping timeout: 268 seconds)
[15:19:37] *** Quits: Enitin (~Enitin@82.102.22.86) (Ping timeout: 240 seconds)
[15:20:17] *** Joins: Enitin (~Enitin@82.102.22.86)
[15:26:52] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[15:28:40] *** Joins: cmbengue (~Thunderbi@207.191.249.160)
[15:29:38] <Learath2> Um, carpenters don't install carpets, carpenters build :P
[15:32:52] *** Joins: Viewday116 (~Viewday@user/viewday)
[15:34:48] *** Quits: Viewday11 (~Viewday@user/viewday) (Ping timeout: 256 seconds)
[15:34:49] *** Viewday116 is now known as Viewday11
[15:34:54] *** Joins: skapata (~Skapata@2804:14c:87b0:a6f9:c545:211c:aaf8:e74)
[15:34:54] *** Quits: skapata (~Skapata@2804:14c:87b0:a6f9:c545:211c:aaf8:e74) (Changing host)
[15:34:54] *** Joins: skapata (~Skapata@user/skapata)
[15:35:11] <PJBoy> what makes you think they don't lay carpets?
[15:41:28] <Learath2> Well at the very least it's not part of their job definition where I live, maybe it's a different case where you live :P
[15:42:29] <Learath2> The state a carpenter leaves the house in would be way too early early to lay carpets
[15:43:10] *** Quits: nicholaus04 (~nicholaus@2607:fb90:e570:ba57:54e7:4c10:0:281) (Remote host closed the connection)
[15:45:11] <Franciman> how would you clear the high bits (i.e. those at a position greater than a fixed n) in a bitset?
[15:45:56] *** Quits: seninha (~seninha@user/seninha) (Ping timeout: 268 seconds)
[15:46:59] <PJBoy> Learath2, I have to admit error here, I didn't realise that wasn't part of their trade D:
[15:47:36] <PJBoy> Franciman, x &= ~((1 << n) - 1)
[15:48:00] <Franciman> PJBoy: in a bitset
[15:48:01] <PJBoy> oh sorry, *clear* the bits
[15:48:02] <Franciman> std::bitset
[15:48:05] <PJBoy> oh uh
[15:48:14] <Franciman> i can't subtract
[15:48:16] <Franciman> T.T
[15:48:39] <PJBoy> same kind of thing probably
[15:48:43] <PJBoy> depending on how big the bitset is
[15:48:53] <Franciman> 256bit
[15:49:13] <Franciman> so it's bigger than any builtin value
[15:49:20] <PJBoy> in that case
[15:49:40] <Learath2> You can loop through the bits and use .reset(), you can also create another bitset with 0s at the bits you want to reset and use &=
[15:49:57] <Learath2> I'm not actually sure which of those results in better assembly though :/
[15:50:03] <Franciman> ehe
[15:50:17] <PJBoy> I was gonna propose `bits = bits << n >> n;`
[15:50:41] <Learath2> That is also good, but you might want to just put it in godbolt and see what the compiler does with each :P
[15:50:45] *** Joins: calm-steam (~calm-stea@user/calm-steam)
[15:50:51] <Franciman> nice idea Learath2 lol
[15:50:55] <PJBoy> I concur
[15:52:01] <Learath2> Oh, btw on the earlier discussion you had, I think I disagree that calling VS a compiler is a good idea. While traditionally VS used MSVC as it's compiler it also supports clang nowadays. Might be confusing PJBoy
[15:52:51] <PJBoy> well visual studio has its EDG based intellisense compiler, its cl compiler and now the clang-cl compiler
[15:53:05] <PJBoy> AFAIK MSVC literally just refers to visual studio
[15:53:24] <PJBoy> but I really don't think it matters what tool it calls out to to compile the code
[15:53:38] <PJBoy> same way no one cares what tool gcc calls out to to compile code
[15:53:51] *** Joins: seninha (~seninha@user/seninha)
[15:56:29] <Learath2> Well you can install MSVC without VS. But I do see your point, unless builtins and/or compiler bugs are involved, it's usually irrelevant whether cl or clang-cl is invoked
[15:56:37] <CyKid128[m]> then u must say IntelliSense is a compiler
[15:56:38] <CyKid128[m]> not Visual Studio is a compiler
[15:56:44] <CyKid128[m]> IntelliSense can live without Visual Studio
[15:57:11] *** Joins: meandrain (~meandrain@86.123.72.102)
[15:57:12] <PJBoy> I think it's completely fair to say both things are compilers
[15:57:36] <CyKid128[m]> it works fine in Visual Studio Code
[15:57:48] <PJBoy> so does MSVC really not refer to visual studio?
[15:59:08] <CyKid128[m]> Visual Studio can use Clang instead of MSVC iirc
[15:59:48] <PJBoy> that just sounds silly though
[16:00:08] <PJBoy> I've always called the compiler bit of the compile "cl"
[16:00:44] *** Quits: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it) (Quit: Leaving.)
[16:00:49] *** Joins: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br)
[16:01:07] *** Quits: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br) (Client Quit)
[16:01:33] *** Joins: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br)
[16:01:55] <CyKid128[m]> there are another tools exist in Visual Studio kit, e.g. NMake
[16:02:00] <PJBoy> "cl.exe is a tool that controls the Microsoft C++ (MSVC) C and C++ compilers and linker"
[16:02:02] *** Quits: chozorho (~chozorho@2601:146:300:c30::d1a0) (Ping timeout: 240 seconds)
[16:02:19] <PJBoy> not exactly sure how to interpret that
[16:02:29] *** Joins: murphy_ (~murphy_@cpe-104-162-115-128.nyc.res.rr.com)
[16:02:34] <CyKid128[m]> yeah, cl is MSVC
[16:02:47] <PJBoy> it controls tools of MSVC
[16:03:20] <CyKid128[m]> <PJBoy> "so does MSVC really not refer to..." <- umm, as u can see
[16:03:20] <CyKid128[m]> Visual Studio is not only a C++ IDE
[16:03:26] *** Joins: chozorho (~chozorho@2601:146:300:c30::d1a0)
[16:03:27] <CyKid128[m]> u can install Visual Studio without any compilers
[16:03:42] <PJBoy> that's true
[16:03:51] <PJBoy> you can install gcc without any compilers too
[16:03:57] <CyKid128[m]> and u can install MSVC without Visual Studio
[16:04:03] <CyKid128[m]> since Visual Studio is also a C# IDE
[16:04:05] <PJBoy> can you?
[16:04:06] <CyKid128[m]> PJBoy: gcc is compiler.
[16:04:27] <PJBoy> it's a collection of compilers
[16:04:36] <PJBoy> and you can make that collection empty if you want
[16:04:40] <PJBoy> same with visual studio
[16:04:54] <Learath2> You can indeed get MSVC sans VS
[16:05:06] <PJBoy> but is it still called MSVC in that case?
[16:05:16] <CyKid128[m]> PJBoy: ok, call it g++ might be more exactly
[16:05:28] <PJBoy> g++ is just a wrapper around gcc
[16:05:40] <PJBoy> cc1plus is the compiler
[16:05:58] <Learath2> I think they technically call it C++ Build Tools officially
[16:06:09] <PJBoy> or rather cc1plus is the gcc analogy to MSVC's cl
[16:06:46] <Franciman> ok ppl I am dumb
[16:06:49] <PJBoy> idk man MS have table branding
[16:06:51] <Franciman> it was enough to do
[16:06:55] <PJBoy> *terrible branding
[16:07:02] <Franciman> (bitset << 256 - n).count();
[16:07:04] <Franciman> lol
[16:07:08] <Franciman> i just remove the top bits
[16:07:10] <Franciman> by shifting
[16:07:12] <Franciman> ahah
[16:07:20] <PJBoy> that's what I suggested :)
[16:07:36] <Franciman> i was so dumb then, that I didn't even understand
[16:07:40] <Franciman> so thanks :D
[16:08:02] <PJBoy> it's a shame bitset doesn't expose begin/end iterators
[16:08:21] <PJBoy> and a iterator pair ctor
[16:20:25] *** Joins: CaCode (~CaCode@user/cacode)
[16:28:00] *** Joins: CaCode_ (~CaCode@user/cacode)
[16:30:54] *** Quits: CaCode (~CaCode@user/cacode) (Ping timeout: 256 seconds)
[16:32:33] *** Joins: Leone (~Leo@69-165-148-197.dsl.teksavvy.com)
[16:33:09] *** Joins: Viewday112 (~Viewday@user/viewday)
[16:33:28] *** Quits: boreas (~heiner@2a00:6020:b006:a900:d250:99ff:fe34:8fd2) (Remote host closed the connection)
[16:34:52] *** Quits: Viewday11 (~Viewday@user/viewday) (Ping timeout: 256 seconds)
[16:34:52] *** Viewday112 is now known as Viewday11
[16:34:57] *** Joins: bebyx (~Thunderbi@user/bebyx)
[16:38:37] *** Quits: chozorho (~chozorho@2601:146:300:c30::d1a0) (Ping timeout: 240 seconds)
[16:39:44] *** Joins: chozorho (~chozorho@2601:146:300:c30::d1a0)
[16:44:41] *** Joins: PlasmaHH (~PlasamaHH@user/plasmahh)
[16:45:04] *** Joins: Viewday117 (~Viewday@user/viewday)
[16:46:23] *** Joins: jokoon (~jokoon@185.61.188.186)
[16:46:46] *** Quits: Viewday11 (~Viewday@user/viewday) (Ping timeout: 256 seconds)
[16:46:47] *** Viewday117 is now known as Viewday11
[16:54:50] *** Joins: constxo (~brad@142.134.38.68)
[17:01:05] *** Joins: Pook (~Pook@2001:8a0:f996:1400:ec96:5741:29f5:3f05)
[17:02:25] *** Joins: bolovanos_ (~bolovanos@user/bolovanos)
[17:03:47] *** Quits: kashyaprushi (~kashyapru@2405:201:1010:b033:b90c:86ca:3fd:ed2a) (Quit: Leaving)
[17:05:10] *** Joins: Viewday113 (~Viewday@user/viewday)
[17:06:20] *** Joins: dg_dg (~dg_dg@gateway/vpn/pia/dgdg/x-00698222)
[17:06:57] *** Quits: Enitin (~Enitin@82.102.22.86) (Ping timeout: 240 seconds)
[17:07:10] *** Quits: Viewday11 (~Viewday@user/viewday) (Ping timeout: 256 seconds)
[17:07:11] *** Viewday113 is now known as Viewday11
[17:07:31] *** Joins: jdavfsxd (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[17:08:08] *** Joins: jkaye (~jkaye@2601:281:8300:7530:fd05:1ba8:c481:f305)
[17:09:48] *** Parts: jokoon (~jokoon@185.61.188.186) ()
[17:12:38] *** Joins: Linux77 (~LinuMage@186.233.183.58)
[17:14:17] *** Quits: Tokamak_ (~Tokamak@107.116.82.132) (Ping timeout: 240 seconds)
[17:16:08] *** Joins: Tokamak (~Tokamak@172.58.188.122)
[17:17:19] *** Joins: teepee (~teepee@openscad/teepee)
[17:30:24] *** Joins: vqueiroz (uid340368@id-340368.hampstead.irccloud.com)
[17:33:17] *** Quits: |7| (~seachdamh@user/seachdamh) (Quit: KVIrc 5.0.0 Aria http://www.kvirc.net/)
[17:33:21] *** Joins: Enitin (~Enitin@82.102.22.85)
[17:34:56] *** Joins: mattallmill (~mattallmi@ip68-103-130-85.ks.ok.cox.net)
[17:36:21] *** Joins: Viewday116 (~Viewday@user/viewday)
[17:36:27] *** Quits: jdavfsxd (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Ping timeout: 276 seconds)
[17:36:28] *** Joins: LuksNuke (~LuksNuke@gateway/tor-sasl/luksnuke)
[17:36:58] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Remote host closed the connection)
[17:37:09] *** Joins: rajkosto (~rajkosto@93-86-163-111.static.isp.telekom.rs)
[17:38:20] *** Quits: Viewday11 (~Viewday@user/viewday) (Ping timeout: 256 seconds)
[17:38:21] *** Viewday116 is now known as Viewday11
[17:38:47] *** Joins: jdavfsxd (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[17:39:50] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[17:39:58] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[17:39:58] *** ChanServ sets mode: +v npaperbot
[17:40:17] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[17:40:32] *** Joins: bitmask (~bitmask@c-73-215-237-27.hsd1.nj.comcast.net)
[17:41:36] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Remote host closed the connection)
[17:43:09] *** Joins: heiner_ (~heiner@2a00:6020:b006:a900:d250:99ff:fe34:8fd2)
[17:45:52] *** Quits: CaCode_ (~CaCode@user/cacode) (Quit: Leaving)
[17:48:57] *** Quits: Enitin (~Enitin@82.102.22.85) (Ping timeout: 240 seconds)
[17:50:13] *** Quits: rajkosto (~rajkosto@93-86-163-111.static.isp.telekom.rs) (Quit: Leaving)
[17:50:23] *** Joins: Enitin (~Enitin@82.102.22.84)
[17:54:43] *** Quits: Tempesta (~Tempesta@user/tempesta) (Quit: See ya!)
[17:56:03] *** Quits: calm-steam (~calm-stea@user/calm-steam) (Remote host closed the connection)
[17:56:25] *** Joins: calm-steam (~calm-stea@user/calm-steam)
[17:59:18] *** Joins: Tempesta (~Tempesta@user/tempesta)
[18:05:57] *** Quits: constxo (~brad@142.134.38.68) (Ping timeout: 240 seconds)
[18:06:29] *** Joins: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[18:07:07] <Franciman> is std::copy equivalent to memcpy when applied to pointers?
[18:07:27] <Franciman> maybe it's better to use memcpy
[18:07:32] <Franciman> i don't trust the stl
[18:07:56] <PJBoy> std::copy is a well know exploit
[18:08:20] <PJBoy> there's like a couple thousand CVEs due to usage of std::copy instead of memcpy
[18:08:32] <Franciman> lol
[18:08:33] <Franciman> thanks
[18:08:33] <PJBoy> with hundreds added every year
[18:08:33] *** Quits: heiner_ (~heiner@2a00:6020:b006:a900:d250:99ff:fe34:8fd2) (Remote host closed the connection)
[18:08:49] <PJBoy> std::move is even worse
[18:08:56] *** Quits: smallvil_ (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Ping timeout: 256 seconds)
[18:09:05] <PJBoy> if you use std::move it actually hacks your webcam and broadcasts it to your family
[18:09:08] <Franciman> why is this happening to us?
[18:09:27] <Franciman> btw PJBoy
[18:09:28] <Franciman> i meant
[18:09:39] <Franciman> i don't trust the stl because i don't know how things get implemented
[18:09:43] <Franciman> they can vary
[18:09:45] <Franciman> it was speed wise
[18:09:52] <Franciman> no need to be so sarcastic
[18:10:04] <PJBoy> you don't know how memcpy works either
[18:10:10] <PJBoy> and it also has variations
[18:10:14] <leduyquang753> ^
[18:10:24] <PJBoy> you probably know std::copy much better than memcpy
[18:10:28] *** Quits: zen_coder (~zen_coder@2a02:8109:a280:2d8d:2d1a:ba44:ae3c:70ae) (Quit: Konversation terminated!)
[18:10:36] <leduyquang753> You can count on decent compilers to know that is best for each platform they are developed on.
[18:10:40] <leduyquang753> what is best
[18:11:07] <leduyquang753> If you don't trust the compiler altogether maybe you should be writing hardcore assembly.
[18:11:12] <Franciman> PJBoy: i know that it is specially geared towards a contiguous chunk of memory
[18:11:13] *** Joins: constxo (~brad@142.134.38.68)
[18:11:22] <Franciman> while copy works for generic input iterators
[18:11:25] <Franciman> that's a huge difference
[18:11:27] <Franciman> tbf
[18:12:15] <leduyquang753> Containers can specialize standard functions to do the more optimized version you know.
[18:12:26] <Franciman> still it is implementation dependent
[18:12:40] <Franciman> while memcpy is _meant_ to only work with contigous memory
[18:12:54] <PJBoy> copy is meant to work with contiguous memory too
[18:13:04] <PJBoy> there's no reason to think memcpy does that any better
[18:13:10] <leduyquang753> If you repeat that I also repeat my responses above.
[18:13:18] <Franciman> https://www.cplusplus.com/reference/algorithm/copy/
[18:13:23] <Franciman> InputIterator
[18:13:30] <Franciman> is not guaranteed to be contiguous memory
[18:13:38] <PJBoy> yeah it can do even more than memcpy can
[18:13:42] *** Joins: Viewday116 (~Viewday@user/viewday)
[18:13:51] <PJBoy> there's no reason to assume it does what memcpy does any worse than memcpy
[18:14:26] <Franciman> the point is that I can't safely assume it does at least what memcpy does
[18:14:37] *** Quits: shailangsa (~shailangs@host86-186-127-224.range86-186.btcentralplus.com) (Ping timeout: 240 seconds)
[18:14:40] <PJBoy> you can't safely assume memcpy does at least what copy does
[18:14:56] <Franciman> i can assume that memcpy know the data is contiguous
[18:15:00] <Franciman> then i don't know how it is implemented
[18:15:05] <Franciman> while for copy it is implementation dependent
[18:15:08] <Franciman> as far as I udnerstand
[18:15:11] <PJBoy> you can assume that memcpy can't do as much as copy can, sure
[18:15:17] *** Quits: rcoote (~rcoote@2a02:908:69a:58a0:96c4:319a:a3f9:e211) (Ping timeout: 240 seconds)
[18:15:25] <PJBoy> that has no bearing on how well either of them perform on that limited type of data
[18:15:36] *** Joins: neure (~TimoSuora@dzpyd0gyyyyyyyyyyyyyt-3.rev.dnainternet.fi)
[18:15:44] *** Quits: Viewday11 (~Viewday@user/viewday) (Ping timeout: 256 seconds)
[18:15:45] *** Viewday116 is now known as Viewday11
[18:15:57] <Franciman> ok
[18:15:59] <Franciman> let's see
[18:16:08] <Franciman> now I write my own copy
[18:16:17] <Franciman> that works well with the standard definition
[18:16:18] *** Quits: slidercrank (~slidercra@user/slidercrank) (Ping timeout: 256 seconds)
[18:16:27] <Franciman> let's see if it is faster than memcpy
[18:16:30] <Franciman> since it can do mre
[18:16:32] <PJBoy> I could write a memcpy that does random sleep(3) in it
[18:16:32] <Franciman> more
[18:16:38] <Franciman> sure
[18:16:42] <PJBoy> we can all write bad implementations of things
[18:16:48] <Franciman> but it still assumes the data is contiguous in memory
[18:16:52] <Franciman> while copy DOES NOT
[18:16:54] <PJBoy> that assumption means nothing
[18:17:01] <Franciman> it's important for me
[18:17:04] <Franciman> for my use case
[18:17:13] <Franciman> i need to keep contiguous data contiguous
[18:17:22] <PJBoy> by all means keep your data contiguous
[18:17:29] <PJBoy> it has no bearing on which of copy or memcpy performs better
[18:17:29] <Franciman> can copy guarantee it?
[18:17:48] <PJBoy> copy copies data however you've specified it
[18:17:56] <Franciman> this doesn't answer
[18:17:59] <Franciman> my question
[18:18:12] *** Joins: shailangsa_ (~shailangs@host109-159-108-207.range109-159.btcentralplus.com)
[18:18:19] <PJBoy> is your question "does copy randomly scatter my data when I don't tell it to"?
[18:18:29] <PJBoy> the answer to that would be no
[18:19:01] <PJBoy> if you give it pointers a la memcpy, it will have the effect of memcpy
[18:19:02] <Franciman> is this written in the standard somewhere?
[18:19:29] <PJBoy> if you asked a clearer question, then yeah
[18:19:38] <PJBoy> there's a formalisation of contiguousness
[18:19:48] <Franciman> the thing is, I don't see it on cppreference
[18:19:50] <smallville7123> how do i implement macro rescan without infinite recursion?
[18:19:59] <PJBoy> but it's easier to talk about pointers if you're using pointers
[18:20:17] *** Quits: LucaTM (~LucaTM@user/lucatm) (Ping timeout: 240 seconds)
[18:20:26] <PJBoy> copy is specified in terms of preincrement and deference
[18:20:41] <PJBoy> and pointer incrementation models contiguous data
[18:20:42] <Franciman> i can only read that "In practice"
[18:20:48] <Franciman> this is vastly different from, the standard dictates so
[18:20:50] <leduyquang753> You can write a program using `std::copy` to say `std::vector` and step your debugger to it to see how it can recognize and properly work with contiguous memory.
[18:21:23] <Franciman> still implementation dependent
[18:21:49] <PJBoy> what implementation detail of copy are you afraid of?
[18:21:51] <Franciman> but sorry, I'll restate what I meant by faster. THe thing is that if I can assume the input is contiguous, and it gets copied in contiguous memory
[18:22:03] <leduyquang753> Then `std::memcpy` is also implementation dependent.
[18:22:05] <Franciman> it works better with cache
[18:22:18] <leduyquang753> Nothing stops someone from writing `std::memcpy` to copy byte by byte instead.
[18:22:19] <PJBoy> the output iterator of copy is what decides where the data is copied to
[18:22:33] <PJBoy> if you specify a pointer, then your output will be written contiguously
[18:22:59] <Franciman> can I get a pointer to the standard please?
[18:23:05] <leduyquang753> If you are pedantic about one side then you need to treat the other side the same way, otherwise it's not fair or you are having double standards.
[18:23:16] <PJBoy> alrighty
[18:23:44] <PJBoy> so here's std::copy http://eel.is/c++draft/alg.copy
[18:23:55] <PJBoy> "performs *(result + n) = *(first + n)"
[18:24:36] <PJBoy> if `result` is a pointer, then you get that `*(result+n)` is equivalent to `result[n]`
[18:24:41] <PJBoy> which is the definition of contiguous
[18:24:45] <Franciman> good, thanks
[18:24:49] <Franciman> was it so hard?
[18:24:54] <Franciman> holy hell
[18:24:58] <PJBoy> hard enough that you couldn't do it yourself
[18:25:09] <Franciman> that's why I am here
[18:25:14] <Franciman> to ask about your wonderful C++
[18:25:18] <Franciman> i don't understand anything abou tit
[18:25:19] <Franciman> it's too hard
[18:25:21] <Franciman> and complicated
[18:25:37] <Franciman> ty
[18:25:42] *** Joins: LucaTM (~LucaTM@user/lucatm)
[18:25:46] <PJBoy> I mean std::copy is pretty simple
[18:26:33] <PJBoy> there aren't many ways to misinterpret what a copy does
[18:28:01] <Franciman> here is an example: Complexity: Exactly last - first assignments.
[18:28:18] <Franciman> how to interpret this complexity assesment?
[18:28:20] <Franciman> assessment*
[18:28:31] <PJBoy> it's O(n) where n = last - first
[18:28:37] <Franciman> nono
[18:28:40] <Franciman> it's EXACTLY
[18:28:48] <PJBoy> even better
[18:28:56] <Franciman> lol
[18:28:58] <Franciman> ok
[18:29:00] <PJBoy> it does exactly n assignments
[18:29:05] <PJBoy> as you would imagine
[18:29:18] <Franciman> so if there is an optimization on my cpy to copy arrays in one operation
[18:29:20] <Franciman> it is non standard
[18:29:22] <PJBoy> basically the synopsis of std::copy is "it does what you think"
[18:29:22] <leduyquang753> Before you get too excited: Memory copy is not O(1).
[18:29:25] *** Joins: RabidToaster (~Thunderbi@bras-base-otwaon234vw-grc-15-50-100-215-56.dsl.bell.ca)
[18:29:38] <Franciman> exactly is worse than O(n) in a way
[18:29:45] <Franciman> because it means you can't get under O(n)
[18:30:06] <Franciman> it's best and worst case
[18:30:57] *** Quits: Enitin (~Enitin@82.102.22.84) (Ping timeout: 240 seconds)
[18:30:58] <PJBoy> well
[18:31:12] <PJBoy> if you can do n assignments in a single operation
[18:31:12] <Franciman> so it's not _so_ easy to read the C++ standard as you are trying to state
[18:31:21] <Franciman> because there are many implications
[18:31:24] <PJBoy> then good good, you've done your assignments in one operation
[18:31:31] <Franciman> that would be non standard
[18:31:31] <PJBoy> now tell me
[18:31:35] <PJBoy> what's the complexity of memcpy?
[18:31:46] <Franciman> i'm trying to state a different point
[18:31:51] <PJBoy> oh that's right
[18:31:53] <PJBoy> it's unspecified
[18:31:55] <Franciman> that the c++ standard is hard to understand
[18:32:01] <PJBoy> it could take O(n^3) time
[18:32:40] <Franciman> yes
[18:32:46] <PJBoy> memcpy is more complex that copy
[18:32:50] *** Joins: Viewday116 (~Viewday@user/viewday)
[18:33:09] <Franciman> so what does this mean regarding the statement: the C++ standard is not straighforward to interpret?
[18:33:17] <leduyquang753> Yes.
[18:33:25] <leduyquang753> We mere mortals only look at it as a little reference.
[18:33:53] <PJBoy> the C++ standard is definitely hard to interpret at times
[18:33:59] <PJBoy> I hope I didn't claim otherwise
[18:34:09] <PJBoy> but comparing copy to memcpy
[18:34:19] <PJBoy> they're both common sense
[18:34:22] *** Joins: Enitin (~Enitin@82.102.22.86)
[18:34:29] <leduyquang753> Final verdict: You can count on the compiler to be able to do what is best in most cases. If you don't trust anything then have fun designing your very computer from scratch.
[18:34:42] *** Quits: Viewday11 (~Viewday@user/viewday) (Read error: Connection reset by peer)
[18:34:42] *** Viewday116 is now known as Viewday11
[18:34:44] <PJBoy> with memcpy just edging out to be slightly more complex due to its requiring of sizeof(T)
[18:34:55] <PJBoy> and the implicit lifetime generation that comes with C++20
[18:35:02] <Franciman> the what?
[18:35:02] <PJBoy> also its lack of complexity guarantee
[18:35:09] <furrymcgee> the complexity of the standard is about O(n4902)
[18:35:12] <zz> I think most of the time, things need to say not O(n) but \omega(n)
[18:35:12] <Franciman> holy hell, this language is always becoming more complex
[18:35:23] <Franciman> +1 zz
[18:35:51] <PJBoy> omega(n) isn't as useful in most situations
[18:35:55] <Franciman> lol
[18:36:00] *** Quits: leduyquang753 (~leduyquan@user/leduyquang753) (Quit: Gotta go, see you guys later.)
[18:36:04] <Franciman> when you say exactly n-m ops
[18:36:07] <Franciman> it's Omega(n)
[18:36:09] <Franciman> not O(n)
[18:36:11] <PJBoy> not really
[18:36:20] <PJBoy> I mean it's as much one as it is the other
[18:36:21] <Franciman> it's neither O(n) as you stated
[18:36:28] <Alipha> Franciman: you don't need to know how to build a car in order to use it. The C++ standard is written in a formal language, not written to be learning material
[18:36:33] <PJBoy> exactly n operations is still O(n)
[18:36:44] <PJBoy> it's also Omega(n)
[18:36:45] <Franciman> PJBoy: different context
[18:36:58] <PJBoy> and it's also Theta(n)
[18:37:01] <Franciman> requiring copy to be O(n) is different for it to be required to be _exactly_ n-m
[18:37:12] <PJBoy> sure
[18:37:19] <PJBoy> but it's no more Omega than it is O
[18:37:34] <Franciman> and it also entails that I can't use SIMD operations
[18:37:37] <Franciman> ggwp
[18:38:24] <PJBoy> how so?
[18:38:36] <PJBoy> I thought SIMD could do assignments
[18:38:41] <PJBoy> even multiple assignments
[18:38:46] <Franciman> at once
[18:38:50] <Franciman> so it performs less operations
[18:38:56] <Franciman> than n-m
[18:38:59] <Franciman> so it's non standard
[18:39:05] <PJBoy> the standard doesn't say "performs n assignments, only one assignment per operation"
[18:39:10] <PJBoy> it says "n assignments"
[18:39:16] <Franciman> what does assignment mean then?
[18:39:17] <PJBoy> all of which could potentially be done in one step
[18:39:28] <PJBoy> assignment is when you assign a value to an object
[18:39:43] <PJBoy> so that the value of that object now takes the value that was assigned to it
[18:39:56] <PJBoy> for classes, this means using the assignment operator
[18:40:16] <PJBoy> for scalars it's whatever the C standard says
[18:40:17] <Alipha> C++ also has the "as if" rule
[18:40:29] <Franciman> so using xor and doing bit stuff is not an assignment operation for the C*+ standard?
[18:40:37] <PJBoy> why not?
[18:40:44] <PJBoy> I don't recall reading that anywhere
[18:40:45] <Franciman> because you don't call the assignment operator for classes
[18:40:52] <Franciman> so you miss an opportunity to run code
[18:41:01] <Franciman> it's a different operation
[18:41:12] <Franciman> you are just copying bits, not calling the assignment function
[18:41:13] <PJBoy> well you'd certainly expect the assignment operator to be run
[18:41:14] *** Quits: jplejacq (~jplejacq@24.224.90.176) (Ping timeout: 256 seconds)
[18:41:22] <Franciman> hm that's a though one
[18:41:24] <Franciman> i see
[18:41:33] <PJBoy> otherwise making an assignment operator would be pointless
[18:41:47] <PJBoy> but that assignment operator can be optimised in various ways
[18:41:53] <PJBoy> and those optimisations can depend on the context
[18:42:15] <Alipha> Franciman: the compiler is allowed to do anything it wants for optimization as long as the observable effects are the same.
[18:42:36] <Franciman> i see
[18:42:43] <PJBoy> memcpy and copy can both be optimised out entirely if the circumstances allow for it
[18:43:54] *** Joins: proller (~p@2a02:6b8:b081:1214::1:1d)
[18:44:41] *** Joins: Viewday116 (~Viewday@user/viewday)
[18:46:13] * Alipha adds no-ops to his code just so the optimizer has something to do
[18:46:20] *** Quits: Viewday11 (~Viewday@user/viewday) (Ping timeout: 256 seconds)
[18:46:21] *** Viewday116 is now known as Viewday11
[18:46:55] <Franciman> sure ty
[18:47:21] *** Quits: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse) (Read error: Connection reset by peer)
[18:49:36] *** Quits: ElectronApps (~ElectronA@user/electronapps) (Remote host closed the connection)
[18:51:01] *** Joins: gh34 (~textual@cpe-184-58-181-106.wi.res.rr.com)
[18:53:00] *** Joins: rajkosto (~rajkosto@77-46-243-198.dynamic.isp.telekom.rs)
[18:54:43] *** Quits: nostar (~nostar@68.51.221.108) (Remote host closed the connection)
[18:56:11] *** Quits: rajkosto (~rajkosto@77-46-243-198.dynamic.isp.telekom.rs) (Client Quit)
[18:56:33] *** Joins: TheHermann (~TheHerman@gateway/tor-sasl/thehermann)
[18:58:17] *** Joins: nostar (~nostar@2601:406:4100:34d:8f4:5ea7:30b2:b7e6)
[18:58:56] *** Quits: proller (~p@2a02:6b8:b081:1214::1:1d) (Ping timeout: 268 seconds)
[18:59:28] *** Joins: rcoote (~rcoote@ip-176-198-113-232.hsi05.unitymediagroup.de)
[19:00:10] *** Quits: Tokamak (~Tokamak@172.58.188.122) (Ping timeout: 268 seconds)
[19:02:25] *** Joins: bolovanos__ (~bolovanos@user/bolovanos)
[19:03:15] *** Joins: Tokamak (~Tokamak@107.116.82.84)
[19:06:10] *** Quits: bolovanos_ (~bolovanos@user/bolovanos) (Ping timeout: 256 seconds)
[19:07:50] *** Joins: Viewday115 (~Viewday@user/viewday)
[19:10:08] *** Quits: Viewday11 (~Viewday@user/viewday) (Ping timeout: 256 seconds)
[19:10:12] *** Viewday115 is now known as Viewday11
[19:12:46] *** Quits: blyat-73 (~hjgkjhgkj@46.235.96.249) (Quit: Leaving)
[19:14:54] *** Joins: Yruama (~Yruama@2a01:cb15:8139:9400:8634:97ff:fe6e:86ac)
[19:31:45] *** Joins: GreenResponse (~tomek@r-45-155-148-237.gpon.bialnet.pl)
[19:36:35] *** Joins: Viewday112 (~Viewday@user/viewday)
[19:38:28] *** Quits: Viewday11 (~Viewday@user/viewday) (Ping timeout: 256 seconds)
[19:39:04] *** Joins: Viewday11 (~Viewday@user/viewday)
[19:41:18] *** Quits: Viewday112 (~Viewday@user/viewday) (Ping timeout: 256 seconds)
[19:45:13] *** Joins: Moosadee (~Moosadee@136.32.155.193)
[19:46:24] *** Quits: constxo (~brad@142.134.38.68) (Ping timeout: 256 seconds)
[19:53:28] *** Joins: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net)
[19:54:37] *** Quits: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Ping timeout: 240 seconds)
[19:55:31] *** Quits: bebyx (~Thunderbi@user/bebyx) (Remote host closed the connection)
[19:56:07] *** Joins: constxo (~brad@142.134.38.68)
[20:03:24] *** Quits: rahl (~rahl@102.114.134.73) (Ping timeout: 256 seconds)
[20:03:38] *** Joins: tmm88 (~tmm88@user/tmm88)
[20:05:05] *** Joins: rahl (~rahl@102.114.167.205)
[20:08:12] *** Joins: nitrowheels (~nitrowhee@151.95.83.100)
[20:11:13] *** Joins: NEYi (~NEYi@109.251.216.38)
[20:11:31] *** Joins: john99 (~john99@158.246.103.34.bc.googleusercontent.com)
[20:13:02] <john99> Hi, i have a couple of question about how i can improbe the code and C++17 https://godbolt.org/z/4ajr4bhfn
[20:13:31] <PJBoy> :|
[20:13:42] <john99> exist some way to "declare the parameters for a template in advance?
[20:14:10] <john99> is very dificult implement is_same_v but with type_info?
[20:15:07] <Alipha> is_same_v is compile-time, whereas type_info is runtime
[20:16:23] <john99> yes but if consexpr( std::is_same_is(K,V) || ...) this is a expansion -> std::is_same_is(K,V) || std::is_same_is(K,V2) || std::is_same_is(K,V3) no?
[20:16:47] <john99> i can do the same with typeinfo? the unpack
[20:18:01] <PJBoy> why not just return `static_cast<Kint>(this);`?
[20:18:14] *** Joins: zer0bitz (~zer0bitz@2001:2003:f444:a000:499c:186d:f10d:6a24)
[20:19:04] <john99> yup, but is only for curiosity if is posible
[20:19:11] <PJBoy> or just return `this`
[20:19:20] <PJBoy> as whatever you return gets cast to TypeEngine* anyway
[20:19:56] *** Joins: Viewday114 (~Viewday@user/viewday)
[20:20:18] *** Quits: Viewday11 (~Viewday@user/viewday) (Read error: Connection reset by peer)
[20:20:18] *** Viewday114 is now known as Viewday11
[20:20:23] <john99> but i want choos at tun time wich cast is done
[20:20:29] <john99> run*
[20:20:32] <john99> if A or B
[20:21:11] <john99> in base of the coerce_function
[20:21:16] <john99> coerce_type
[20:21:17] <PJBoy> it'll just get cast to TypeEngine* anyway
[20:21:20] <PJBoy> so what's the point
[20:21:56] <Alipha> apparently the `operator A()` or `operator B()` has complex logic in it..
[20:22:12] <john99> yup
[20:23:01] <john99> may be i am worng but th idea is call the implicit operator
[20:24:11] <john99> well, probably i am doing a lot of things wrong XD
[20:25:09] <john99> i want implement a factory pattern base in the virtual method of coarce_type
[20:25:46] <PJBoy> idk this code looks batshit insane to me
[20:25:52] <john99> one derived class of TypeFactory must implement how can transform itself to the  class A or B
[20:27:00] <john99> XD
[20:27:17] *** Quits: constxo (~brad@142.134.38.68) (Ping timeout: 240 seconds)
[20:29:06] <john99> well, for curiosity, ts posible declare a template in advance and pass its type to other?
[20:29:07] <john99> foo<T, U, V>() -> foo<???>()
[20:30:01] <john99> for not put <T, U, V< in every place
[20:33:34] <Alipha> john99: i agree with PJBoy's sentiment that this is "batshit insane", but here's what i got: https://godbolt.org/z/vxvMf76Gf ... but you have the fundamental problem that you have conversion operators to A or B _objects_, but you're trying to return a pointer... and you can't just take the address of the resulting A or B object because that's taking the address of a temporary
[20:33:54] *** Quits: karakedi (~eAC53C340@user/karakedi) (Ping timeout: 268 seconds)
[20:34:34] *** Joins: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net)
[20:34:41] <Alipha> having `operator unique_ptr<A>()` instead may make sense
[20:35:46] <john99> yes
[20:35:55] <john99> I didnt thought in thas
[20:36:53] *** Joins: karakedi (~eAC53C340@user/karakedi)
[20:38:14] *** Quits: interop_madness (~interop_m@user/interop-madness/x-0950004) (Quit: Leaving)
[20:39:47] <Alipha> and `|| ...` doesn't work in this case because you want to then do something with the type that matches
[20:41:44] *** Joins: jplejacq (~jplejacq@24.224.90.176)
[20:46:09] <john99> am,, okay i thought that constexpr simple expanded the ( somthing ==  other) ||
[20:48:51] *** Joins: constxo (~brad@142.134.38.68)
[20:48:57] *** Joins: kspalaiologos (~kspalaiol@user/kspalaiologos)
[20:52:30] <Alipha> john99: the issue is that the fold expression `(coerced_type() == typeid(k)) || ...` doesn't contain any "parameter packs" (i.e., variable-argument template parameters). `k` nor `Kind` is a parameter pack. `Kinds...` is a parameter pack.
[20:53:12] <Alipha> john99: you could do this: https://godbolt.org/z/vo8nWMW6E but as i indicate on line 29, which Kind should you then cast to?
[20:54:09] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[20:54:12] <john99> i am rewritting the example, for try yo explain what i tried ot do in less shitty way
[20:54:16] *** Quits: RabidToaster (~Thunderbi@bras-base-otwaon234vw-grc-15-50-100-215-56.dsl.bell.ca) (Ping timeout: 268 seconds)
[20:54:22] <john99> try to*
[20:56:11] <Alipha> https://godbolt.org/z/v1c3h1Wzb -- has the same problem of "which kind?"
[20:56:53] *** Joins: tewrvd^ (~tewrvd@64.253.22.77)
[20:57:56] *** Quits: flynn (~mcbloch@user/flynn) (Quit: The Lounge - https://thelounge.chat)
[20:59:12] *** Joins: flynn (~mcbloch@user/flynn)
[21:01:45] *** Joins: boreas (~heiner@2a00:6020:b006:a900:d250:99ff:fe34:8fd2)
[21:04:48] *** Joins: Viewday113 (~Viewday@user/viewday)
[21:05:14] <john99> ok, this is too complex for be correct (ty for the parameters pack hint)
[21:05:21] *** Quits: cmbengue (~Thunderbi@207.191.249.160) (Remote host closed the connection)
[21:05:24] <john99> i have to think better how express waht i want
[21:06:52] *** Quits: Viewday11 (~Viewday@user/viewday) (Ping timeout: 256 seconds)
[21:06:53] *** Viewday113 is now known as Viewday11
[21:07:41] *** Quits: kspalaiologos (~kspalaiol@user/kspalaiologos) (Quit: Leaving)
[21:10:15] *** Joins: AbleBacon (~AbleBacon@user/AbleBacon)
[21:16:05] *** Quits: tmm88 (~tmm88@user/tmm88) (Quit: Lost terminal)
[21:18:01] *** Quits: boreas (~heiner@2a00:6020:b006:a900:d250:99ff:fe34:8fd2) (Remote host closed the connection)
[21:18:33] <john99> https://godbolt.org/z/a1ff1bqMW
[21:19:18] <john99> i am looking some way (like ...) of avoid write a lot of if else
[21:20:16] <zz> "polimorfic", oof.
[21:20:49] <malinus> john99: visitor pattern :3?
[21:20:56] <neure> john99, to avoid typing a lot of if else you can write some code to do it for you :P
[21:20:58] * malinus hides
[21:24:04] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:11b2:2f3a:e95:308)
[21:24:29] <john99> yes, seem like is a visitor pattern
[21:24:46] <john99> ok, i didnt know that pattern
[21:25:30] *** Joins: blackout69 (~blackout6@net-109-117-245-237.cust.vodafonedsl.it)
[21:30:04] *** Quits: vqueiroz (uid340368@id-340368.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[21:35:28] *** Joins: nvmd (~nvmd@user/nvmd)
[21:35:34] *** Quits: MajorBiscuit (~MajorBisc@c-001-015-014.client.tudelft.eduvpn.nl) (Ping timeout: 268 seconds)
[21:36:27] *** Joins: Viewday116 (~Viewday@user/viewday)
[21:38:02] *** Quits: Viewday11 (~Viewday@user/viewday) (Ping timeout: 256 seconds)
[21:38:03] *** Viewday116 is now known as Viewday11
[21:39:20] *** Joins: Betal (~Betal@user/betal)
[21:39:51] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[21:39:59] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[21:39:59] *** ChanServ sets mode: +v npaperbot
[21:41:10] *** Parts: blackout69 (~blackout6@net-109-117-245-237.cust.vodafonedsl.it) ()
[21:42:26] *** Joins: magla (~gelignite@55d4a813.access.ecotel.net)
[21:43:45] <Alipha> john99: how about we take a step back and you describe what your application is that you're writing, and why you want this "TypeFactory"? because maybe we can provide a completely different solution
[21:44:04] <john99> one second
[21:48:04] *** Joins: blackout69 (~blackout6@net-109-117-245-237.cust.vodafonedsl.it)
[21:52:39] *** Quits: neure (~TimoSuora@dzpyd0gyyyyyyyyyyyyyt-3.rev.dnainternet.fi) (Quit: Leaving)
[21:54:37] *** Quits: ko (~i.am@user/marlboro) (Ping timeout: 240 seconds)
[21:56:34] *** Joins: ko (~i.am@177.40.115.71)
[21:56:34] *** Quits: ko (~i.am@177.40.115.71) (Changing host)
[21:56:34] *** Joins: ko (~i.am@user/marlboro)
[21:57:33] *** Joins: kspalaiologos (~kspalaiol@user/kspalaiologos)
[21:58:17] *** Quits: stonkey (~stonkey@user/stonkey) (Ping timeout: 240 seconds)
[22:01:35] *** Joins: findiggle (~user@2601:601:9f00:5c60:dfe7:ec34:7bba:73c5)
[22:02:37] *** Quits: Tokamak (~Tokamak@107.116.82.84) (Ping timeout: 240 seconds)
[22:03:42] *** Quits: dyeplexer (~dyeplexer@user/dyeplexer) (Remote host closed the connection)
[22:04:46] *** Joins: Tokamak (~Tokamak@107.116.82.84)
[22:05:01] *** Joins: Viewday114 (~Viewday@user/viewday)
[22:06:56] *** Quits: Viewday11 (~Viewday@user/viewday) (Ping timeout: 256 seconds)
[22:06:57] *** Viewday114 is now known as Viewday11
[22:07:42] *** Quits: jdavfsxd (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Remote host closed the connection)
[22:08:15] *** Quits: tewrvd^ (~tewrvd@64.253.22.77) (Remote host closed the connection)
[22:08:42] *** Joins: jdavfsxd (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[22:09:43] *** Joins: boreas (~heiner@2a00:6020:b006:a900:d250:99ff:fe34:8fd2)
[22:10:03] <john99> Alipha https://godbolt.org/z/WvExxe564
[22:10:44] <john99> basically a ORM skeleton
[22:11:04] <zz> ugh
[22:11:39] <john99> and inspired (copied) from the structure of sqlalchemy
[22:12:56] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[22:16:37] <Alipha> john99: fyi, std::unique_ptr<char> is a pointer to a single char. you want std::unique_ptr<char[]> or preferably probably std::string or std::vector<char>
[22:16:43] *** Joins: elb0w (~elb0w@pool-98-109-49-7.nwrknj.fios.verizon.net)
[22:16:56] <john99> yes, i still didnt arrive to taht part
[22:17:40] <john99> i am blocked mostly trying to decide the best approach
[22:18:26] <elb0w> Hi, I am trying to sort out a test after moving to a new system. I am looking at the sizeof a struct that has two members std::string & size_t, the current system is doing std::string -> 24 + 8padding + 8size_t == 40. I dont want to just hard code 40, id like to be able to explicitly test based on `something (playform?)` Is there anything I can safely use to drive the test?
[22:19:31] <john99> elb0w is mandatory that the size between systems is constant?
[22:19:31] <kalven> what is the test testing?
[22:19:41] <Alipha> elb0w: what specifically are you trying to test? and why not use sizeof(mystruct) instead of 40?
[22:20:13] <elb0w> john99: no, dont need it to be constant just need to be able to say On this platform its X
[22:20:25] <john99> static_assert?
[22:20:37] <kalven> but why
[22:20:49] <john99> sizeof(struct)
[22:20:55] <john99> (forgot about stati)
[22:21:17] <elb0w> so the lib does a lot of preallocated buffers and new placement at low levels
[22:21:46] <john99> size_t buffer_len = sizeof(struct)
[22:22:22] <elb0w> yeah I will end up with that, I was curious if there is a way to figure out how its going to get sized though based on the platform
[22:22:36] <kalven> yeah, it's called sizeof :)
[22:22:46] <elb0w> haha :)
[22:22:51] <john99> elb0w, are you tryin to cross compile?
[22:23:15] <elb0w> we are migrating to a newer linux distro
[22:23:34] <elb0w> so I wanted to just have the test say if im in this guy its X otherwise Y
[22:23:45] *** Quits: jdavfsxd (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Ping timeout: 276 seconds)
[22:23:49] <elb0w> otherwise im testing sizeof(struct) == sizeof(struct)
[22:23:56] <john99> you will have a lot of PRAGMAS and maxcros for that
[22:24:07] <elb0w> (partially im asking for my own understanding)
[22:24:13] <elb0w> I may end up tossing the test
[22:24:19] <Alipha> elb0w: why does it matter what the size is? why can't you just use sizeof(struct) everywhere?
[22:24:37] <john99> Alipha, his question is more basic than taht i suppose
[22:24:51] <elb0w> yeah I agree sizeof is what does get used in the code
[22:24:53] <john99> you have to finc wich macros are defined in your platform
[22:25:09] <john99> usually _linux is the standart if you come from other OS
[22:25:21] <john99> find*
[22:25:46] <elb0w> john99: where would I look these up (havent done this before) any good resources?
[22:26:12] *** Joins: jdavfsxd (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[22:26:22] <john99> the compiler usually define that for you
[22:26:51] <elb0w> ah cool yeah just found that
[22:26:54] <elb0w> thanks a lot!
[22:30:48] *** Joins: MajorBiscuit (~MajorBisc@62-52-102.netrun.cytanet.com.cy)
[22:31:17] *** Quits: jkaye (~jkaye@2601:281:8300:7530:fd05:1ba8:c481:f305) (Ping timeout: 240 seconds)
[22:31:37] *** Quits: plantman (~plantman@2601:405:4680:1b0::f) (Ping timeout: 240 seconds)
[22:32:49] *** Joins: Viewday119 (~Viewday@user/viewday)
[22:34:42] *** Quits: Viewday11 (~Viewday@user/viewday) (Ping timeout: 256 seconds)
[22:34:43] *** Viewday119 is now known as Viewday11
[22:36:58] *** Quits: Tokamak (~Tokamak@107.116.82.84) (Ping timeout: 256 seconds)
[22:37:02] *** Joins: great_taste (~great_tas@user/great-taste/x-5798414)
[22:38:37] *** Joins: Tokamak (~Tokamak@107.116.82.84)
[22:40:42] *** Joins: xkuru (~xkuru@user/xkuru)
[22:41:06] *** Quits: Inline (~Inline@aftr-37-201-240-204.unity-media.net) (Quit: Leaving)
[22:42:13] <john99> Alipha the link is not owrking:(  can you send me one more time how did you unpack TCoerceTypes<A, B>
[22:42:15] <john99> ?
[22:42:30] *** Quits: Tokamak (~Tokamak@107.116.82.84) (Client Quit)
[22:42:43] <john99> or is owrking i dedited and now i cannot back
[22:42:51] <john99> working*
[22:43:17] *** Joins: x_kuru (~xkuru@user/xkuru)
[22:45:34] *** Joins: rgrinberg (~textual@2806:101e:1:83af:8095:9213:668b:97a8)
[22:45:53] *** Quits: xkuru (~xkuru@user/xkuru) (Ping timeout: 268 seconds)
[22:46:08] <Alipha> john99: https://godbolt.org/z/vxvMf76Gf
[22:46:28] *** Quits: rcoote (~rcoote@ip-176-198-113-232.hsi05.unitymediagroup.de) (Read error: No route to host)
[22:46:38] <john99> ty :)
[22:46:39] *** Joins: rcoote (~rcoote@ip-176-198-113-232.hsi05.unitymediagroup.de)
[22:48:20] *** Quits: nvmd (~nvmd@user/nvmd) (Ping timeout: 268 seconds)
[22:49:29] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[22:49:41] *** Joins: nvmd (~nvmd@user/nvmd)
[22:51:52] *** Quits: blackout69 (~blackout6@net-109-117-245-237.cust.vodafonedsl.it) (Quit: Leaving.)
[22:52:26] *** Joins: slidercrank (~slidercra@user/slidercrank)
[22:53:05] *** Quits: bolovanos__ (~bolovanos@user/bolovanos) (Quit: Leaving)
[22:54:17] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 240 seconds)
[22:55:57] *** Quits: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net) (Quit: Textual IRC Client: www.textualapp.com)
[23:00:18] *** Joins: andreasbuhr (~quassel@p549db7a9.dip0.t-ipconnect.de)
[23:00:30] *** Quits: andreasbuhr (~quassel@p549db7a9.dip0.t-ipconnect.de) (Client Quit)
[23:05:17] *** Joins: Viewday115 (~Viewday@user/viewday)
[23:05:57] *** Joins: jkaye (~jkaye@2601:281:8300:7530:e0f7:dc28:dd0d:f0d5)
[23:07:00] *** Quits: Viewday11 (~Viewday@user/viewday) (Ping timeout: 256 seconds)
[23:07:01] *** Viewday115 is now known as Viewday11
[23:08:03] *** Quits: obby303 (~Guest26@65.207.90.10) (Quit: Client closed)
[23:08:49] <Alipha> john99: so, you want to be able to read in data from and write out data to a database, where the types may not exactly match, and you want the data to implicitly convert if possible?
[23:11:25] <john99> yes i want conver that heterogeneous list of types (every backend have one ) to a list of "my abstract String/INTEGER/implementacion of SQL" asuming that i have a function coerce_type taht know the map between the database_type and my generic type
[23:11:55] <john99> i can do that pretty easy with a if else
[23:12:21] <john99> but i am doing the project most for learn new things
[23:12:39] <john99> and i dont know if exist some way
[23:13:17] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:11b2:2f3a:e95:308) (Ping timeout: 240 seconds)
[23:14:56] <john99> if constexpr (coerced_type() == typeid(k) || ( typeid(kinds)...)) {
[23:14:56] <john99>               return string(); // i am looking some way of select this: based in type_info
[23:16:45] *** Joins: Tokamak (~Tokamak@107.116.82.84)
[23:17:26] *** Quits: Tokamak (~Tokamak@107.116.82.84) (Read error: Connection reset by peer)
[23:18:09] *** Joins: Tokamak (~Tokamak@107.116.82.84)
[23:18:42] *** Joins: Inline (~Inline@aftr-37-201-240-204.unity-media.net)
[23:24:00] *** Joins: proller (~p@2a02:6b8:b081:8814::1:24)
[23:25:05] *** Joins: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz)
[23:26:04] *** Quits: rendar (~rendar@user/rendar) (Quit: Leaving)
[23:28:01] *** Joins: bebyx (~Thunderbi@user/bebyx)
[23:28:36] *** Quits: nitrowheels (~nitrowhee@151.95.83.100) (Quit: Leaving)
[23:29:00] *** Joins: DWD (~daniel@host-78-149-70-69.as13285.net)
[23:29:01] *** Quits: DWD (~daniel@host-78-149-70-69.as13285.net) (Changing host)
[23:29:01] *** Joins: DWD (~daniel@user/dwd)
[23:31:50] <Alipha> john99: i'm not sure if templates are adding any value here. maybe you should just stick with polymorphism. and yes, the visitor pattern (aka, "double dispatch") would probably be useful here
[23:32:48] <john99> yes, seem the way, that or complitly rewrite the logic (not discarted)
[23:32:56] <john99> but a lot of thanks for your time :)
[23:34:08] *** Quits: jdavfsxd (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Quit: jdavfsxd)
[23:34:28] *** Joins: cmbengue (~Thunderbi@207.191.249.160)
[23:34:38] *** Quits: great_taste (~great_tas@user/great-taste/x-5798414) (Quit: Client closed)
[23:34:50] *** Joins: great_taste (~great_tas@user/great-taste/x-5798414)
[23:36:24] *** Quits: namo (~nomo@95.87.208.95) (Quit: Leaving)
[23:36:34] *** Joins: Viewday111 (~Viewday@user/viewday)
[23:36:37] *** Joins: namo (~nomo@95.87.208.95)
[23:37:42] *** Quits: john99 (~john99@158.246.103.34.bc.googleusercontent.com) (Quit: Client closed)
[23:38:44] *** Quits: Viewday11 (~Viewday@user/viewday) (Ping timeout: 256 seconds)
[23:38:45] *** Viewday111 is now known as Viewday11
[23:43:17] *** Quits: Tokamak (~Tokamak@107.116.82.84) (Ping timeout: 240 seconds)
[23:46:06] *** Quits: PlasmaHH (~PlasamaHH@user/plasmahh) (Ping timeout: 256 seconds)
[23:50:04] *** Quits: Dizidentu (~aresg@modemcable151.154-19-135.mc.videotron.ca) (Read error: Connection reset by peer)
[23:50:56] *** Joins: jwillikers (~jwilliker@2604:2800:2:a401:45e7:7e6b:1111:1b5c)
[23:51:11] *** Quits: kspalaiologos (~kspalaiol@user/kspalaiologos) (Quit: Leaving)
[23:55:41] <furrymcgee> a dynamic linker is the best method to cast a string to library objects
[23:56:18] <furrymcgee> unfortnatly there is no standard to do this
[23:56:46] *** Quits: froggyc (~froggy@2.235.241.212) (Remote host closed the connection)
[23:56:55] *** Joins: froggyc (~froggy@2.235.241.212)
[23:56:56] <furrymcgee> besides posix
[23:57:06] *** Joins: john99 (~john99@158.246.103.34.bc.googleusercontent.com)
[23:57:21] <john99> polimorfism, polimorfism every place https://godbolt.org/z/sa8dT841r XD
[23:57:43] <john99> umm, this disconected
[23:58:16] <john99> Alipha, i think is solved :)
[23:59:06] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[23:59:17] *** Quits: jwillikers (~jwilliker@2604:2800:2:a401:45e7:7e6b:1111:1b5c) (Remote host closed the connection)
