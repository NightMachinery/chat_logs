[00:08:18] *** Joins: schmudde (~schmudde@216.169.6.249)
[00:11:00] *** Joins: matty_ma1 (~matt@129.222.239.110)
[00:17:55] *** Quits: matty_ma1 (~matt@129.222.239.110) (Ping timeout: 250 seconds)
[00:19:24] *** Quits: matty_matt (~matt@129.222.239.110) (Ping timeout: 240 seconds)
[00:21:03] *** Joins: eddof13 (~textual@2600:4040:4029:5000:c0a8:564b:8784:8bee)
[00:23:59] *** Joins: matty_matt (~matt@129.222.239.110)
[00:31:49] <jeaye> Sounds like you're missing leiningen. :)
[00:32:20] <seabass> jeaye: haha true; this is my first time using deps.edn :)
[00:32:38] <seabass> I think tools.namespace.find mind help me here with automatically requiring all my namespaces
[00:32:52] <jeaye> It's an excersize in masochism, deps.edn
[00:33:04] <jeaye> I'd rather just build the project I'm building.
[00:35:55] <jeaye> I always spell exercise wrong. Such a weird word for my brain.
[00:37:45] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[00:38:03] <seabass> jeaye, certainly Leiningen is easier!
[00:38:40] <seabass> however, I think it's probably a good learning exercise for me :) lol now I'm double-checking my spellings xD
[00:38:51] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[00:42:33] <seabass> OK, I got it working by adding org.clojure/tools.namespace {:mvn/version "1.2.0"} to my :extra-deps in my ~/.clojure/deps.edn file
[00:42:43] <seabass> and then using (require '[clojure.tools.namespace.repl :refer [refresh]]) (refresh) in the REPL :)
[00:46:51] *** Joins: matty_ma1 (~matt@129.222.239.110)
[00:47:57] *** Quits: jespada (~jespada@87.74.33.157) (Ping timeout: 240 seconds)
[00:50:52] *** Joins: jespada (~jespada@87.74.33.157)
[00:51:25] *** Quits: matty_ma1 (~matt@129.222.239.110) (Ping timeout: 256 seconds)
[00:56:37] *** Quits: Techcable (~Techcable@168.235.93.147) (Ping timeout: 240 seconds)
[01:01:10] *** Joins: atw (~user@2601:5c2:c500:76b0::6e9b)
[01:17:57] *** Quits: euandreh (~euandreh@2804:14c:33:9fe5:d365:2d3d:255:f608) (Ping timeout: 250 seconds)
[01:25:17] *** Quits: matty_matt (~matt@129.222.239.110) (Ping timeout: 240 seconds)
[01:26:11] *** Joins: matty_matt (~matt@129.222.239.110)
[01:30:35] *** Joins: matty_ma1 (~matt@129.222.239.110)
[01:30:36] *** Joins: Techcable (~Techcable@168.235.93.147)
[01:31:51] *** Quits: Techcable (~Techcable@168.235.93.147) (Remote host closed the connection)
[01:32:57] *** Joins: Techcable (~Techcable@168.235.93.147)
[01:34:51] *** Quits: Techcable (~Techcable@168.235.93.147) (Client Quit)
[01:35:02] *** Quits: matty_ma1 (~matt@129.222.239.110) (Ping timeout: 240 seconds)
[01:35:57] *** Joins: Techcable (~Techcable@168.235.93.147)
[01:38:50] *** Quits: Techcable (~Techcable@168.235.93.147) (Client Quit)
[01:39:05] *** Joins: Techcable (~Techcable@168.235.93.147)
[01:44:29] *** Quits: matty_matt (~matt@129.222.239.110) (Ping timeout: 268 seconds)
[01:47:02] <mwnaylor> jeaye: Are you an emacs user? If so, you could write an abbrev to solve your "exercise" problem. üòú
[01:51:40] *** Quits: tatsumaru (~tatsumaru@82.147.131.155) (Quit: Leaving.)
[01:56:07] *** Joins: matty_matt (~matt@129.222.239.110)
[01:59:41] <jeaye> mwnaylor: Vim user. IRC is in weechat.
[01:59:57] <Para> Dependency, pronounciation.
[02:00:22] *** Joins: euandreh (~euandreh@2804:14c:33:9fe5:d903:d876:1354:7b4c)
[02:02:57] <mwnaylor> jeaye: You write Clojure code in vim?
[02:03:06] <jeaye> Yep.
[02:03:27] <mwnaylor> How do you tie into a lein repl?
[02:03:43] <jeaye> Been using vim for 12 years. Clojure for around 7.
[02:03:57] <jeaye> mwnaylor: https://github.com/Olical/conjure
[02:04:28] <jeaye> In short, just using nrepl.
[02:05:26] <jeaye> There are other options than conjure, like fireplace, but I like the way conjure does things.
[02:06:22] <mwnaylor> I was a diehard vim user for 12 to 14 years. Was able to backdoor cygwin onto my MS work box. Wrote a lot of code tthat would have taken me far longer with MS tools.
[02:07:56] <jeaye> :)
[02:08:57] *** Quits: atw (~user@2601:5c2:c500:76b0::6e9b) (Ping timeout: 240 seconds)
[02:09:51] <mwnaylor> About 10 years ago bit the bullet and went total submersion to emacs. emacs suits ùòÆùò¶ better. But, I like lisp. Found it was easier to extend the editor in emacs than vim. Now, Clojure is my favorite language. That goes hand-in-glove with elisp experience. Also, the cider package gives me great interaction w/ repl.
[02:11:26] <jeaye> Yep, the road is definitely more trodden with clj + emacs.
[02:11:56] <mwnaylor> I don't flame vim vs emacs. Have repect for both. Thats said, I'm personally opposed to evil. I could have kept my im training wheels in transistion, but think I learned more with the hard change-over.
[02:12:00] <jeaye> Before conjure came along, I wasn't happy with the repl experience compared to what my emacs-using peers had. Conjure changed all of that, fortunatley.
[02:13:28] *** Quits: matty_matt (~matt@129.222.239.110) (Ping timeout: 268 seconds)
[02:14:21] *** Joins: matty_matt (~matt@129.222.239.110)
[02:16:05] <jeaye> I tried emacs + evil for a while, in 2015. Summarized some notes on it: https://blog.jeaye.com/2015/10/24/emacs-vim/
[02:17:37] <jeaye> Emacs just doesn't fit my mental model. It's like someone knowing KDE inside and out and me switching from my i3wm configs to try it. It can do all the same stuff, and even more, but its approach doesn't match everyone's intuition or mental models.
[02:19:53] <jeaye> One example is that Emacs like to have one instance open. If you want to work on separate projects, you switch between them in Emacs. But that defeats the whole purpose of my tiling window manager with different workspaces. I want different editor windows open in each workspace so I can switch between all of them with a single key combo. Sure, if I replace my tiling wm with Emacs, I can do it all
[02:19:55] <jeaye> in one, but then I have a separation between how I'm managing my editor+terminal windows and how I'm managing the rest of my windows (firefox, signal, clementine, etc).
[02:23:50] <mwnaylor> I tend to have two emacs daemons running. One for general stuff, like this erc, w3m browsing, tweaking .emacs, etc. Second for dev work. I don't want an infinite loop screw-up in my Clojure environment to lock up irc chat.
[02:25:02] <jeaye> Makes sense. :)
[02:25:15] <seabass> jeaye: I must go now, but tomorrow I can tell you about how I made a little function to override the 'create window' function in Emacs to 'create frame', which allows me to manipulate stuff with Bspwm (a titling window manager :))
[02:25:26] <jeaye> My irc and email (neomutt) runs on a VPS in tmux, so it's separate from everything else.
[02:25:51] *** Quits: seabass (~seabass@user/seabass) (Quit: leaving)
[02:29:18] <mwnaylor> hah. I have tmux running in a urxvt term. To manage my wicd-curses, htop, and alsam mixer. That uxrvt gets shoved to virtual desktop 9 in my xmonad window mananager. Don't we all have weird ways of managing our operating environments?
[02:29:50] <mwnaylor> s/alsam mixer/alsamixer/
[02:31:05] <jeaye> That's what people like us love most about GNU/Linux, usually. Control.
[02:32:50] <mwnaylor> Don't forget the BSDs. FreeBSD would probably be my ideal OS. BUT, there are a few things I can do now in Linux that would take time to relearn in FreeBSD.
[02:33:26] *** Joins: matty_ma1 (~matt@129.222.239.110)
[02:33:42] <mwnaylor> Time I can't justify now, much as I'd like to switch.
[02:34:31] <jeaye> Yep.
[02:37:09] <mwnaylor> For those using emacs for Clojure, who's using yasnippets to enhance coding experience? This is more of a comparing notes question, nothing specific.
[02:38:35] *** Joins: res0nat0r0 (~Fletch@dia.whatbox.ca)
[02:38:36] *** Joins: lunik15 (~lunik1@37.205.14.203)
[02:38:37] *** Quits: matty_ma1 (~matt@129.222.239.110) (Ping timeout: 240 seconds)
[02:38:59] *** Quits: matty_matt (~matt@129.222.239.110) (Ping timeout: 252 seconds)
[02:39:24] *** Joins: paul_j` (~user@67.26.169.217.in-addr.arpa)
[02:39:40] <mwnaylor> FWIW, my snippets setup was a bit borked. #emacs associates helped me unbreak my system. Things sometimes get in the weeds on that channel, but when getting back to topic, get tips get shared.
[02:40:06] *** Joins: sailorTheCat (~sailorCat@mail2.gajsin.name)
[02:41:00] *** Joins: samuelb (~samuelber@nata01.lip.pt)
[02:41:17] *** Joins: turlando_ (~turlando@93-42-250-112.ip89.fastwebnet.it)
[02:41:45] *** Joins: snits_ (~quassel@ip98-179-76-75.ph.ph.cox.net)
[02:42:10] *** Joins: opqdonut_ (opqdonut@pseudo.fixme.fi)
[02:42:43] *** Joins: HDurer_ (~hdurer@104.132.45.86)
[02:42:44] *** Quits: seschwar (~seschwar@user/seschwar) (Killed (NickServ (GHOST command used by seschwar1)))
[02:42:49] *** Joins: seschwar1 (~seschwar@user/seschwar)
[02:46:41] *** Joins: In0perable (~PLAYER_1@fancydata.science)
[02:47:28] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (*.net *.split)
[02:47:28] *** Quits: lunik1 (~lunik1@37.205.14.203) (*.net *.split)
[02:47:28] *** Quits: AdmiralBumbleBee (~AdmiralBu@47.203.174.105) (*.net *.split)
[02:47:28] *** Quits: zmt00 (~zmt00@user/zmt00) (*.net *.split)
[02:47:28] *** Quits: tomku (~tomku@user/tomku) (*.net *.split)
[02:47:28] *** Quits: paul_j (~user@67.26.169.217.in-addr.arpa) (*.net *.split)
[02:47:28] *** Quits: MetaYan (~MetaYan@c-7b5d235c.07-84-7462671.bbcust.telenor.se) (*.net *.split)
[02:47:28] *** Quits: turlando (~turlando@user/turlando) (*.net *.split)
[02:47:28] *** Quits: Inoperable (~PLAYER_1@fancydata.science) (*.net *.split)
[02:47:28] *** Quits: snits (~quassel@ip98-179-76-75.ph.ph.cox.net) (*.net *.split)
[02:47:28] *** Quits: sailorCat (~sailorCat@mail2.gajsin.name) (*.net *.split)
[02:47:28] *** Quits: chujev (~chujev@198.20.115.180) (*.net *.split)
[02:47:28] *** Quits: wink (fhtagn@user/wink) (*.net *.split)
[02:47:28] *** Quits: samuelbernardo (~samuelber@nata01.lip.pt) (*.net *.split)
[02:47:29] *** Quits: HDurer (~hdurer@104.132.45.86) (*.net *.split)
[02:47:29] *** Quits: opqdonut (~opqdonut@91.105.251.154) (*.net *.split)
[02:47:29] *** Quits: res0nat0r (~Fletch@dia.whatbox.ca) (*.net *.split)
[02:47:29] *** Quits: markmarkmark (~mark@user/markmarkmark) (*.net *.split)
[02:47:29] *** Quits: wht (~wht@havoc.proulx.com) (*.net *.split)
[02:47:29] *** lunik15 is now known as lunik1
[02:50:25] *** Joins: matty_ma2 (~matt@129.222.239.110)
[02:50:25] *** Joins: tomku (~tomku@user/tomku)
[02:50:25] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[02:50:25] *** Joins: zmt00 (~zmt00@user/zmt00)
[02:50:25] *** Joins: chujev (~chujev@198.20.115.180)
[02:50:25] *** Joins: wink (fhtagn@user/wink)
[02:50:25] *** Joins: markmarkmark (~mark@user/markmarkmark)
[02:50:25] *** Joins: wht (~wht@havoc.proulx.com)
[02:53:49] *** Quits: matty_ma2 (~matt@129.222.239.110) (Ping timeout: 256 seconds)
[02:54:09] *** Joins: MetaYan (~MetaYan@c-7b5d235c.07-84-7462671.bbcust.telenor.se)
[02:54:15] *** Joins: matty_ma2 (~matt@129.222.239.110)
[02:56:12] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Ping timeout: 276 seconds)
[03:05:26] <mwnaylor> ‚ÄúPremature optimization is the root of all evil‚Äù
[03:11:11] *** Joins: AlaskanEmily (~AlaskanEm@user/alaskanemily)
[03:15:32] <mwnaylor> I ùòµùò©ùò∞ùò∂ùò®ùò©ùòµ I was being lazy be using core Clojure functions to transform my data. Chaining multiple transformations and map functions. Decided to write one function to do the work using the native data type (long). Dumped both of them into a yasnippet bench form. Turns out native functions take 20% of the time.
[03:27:32] *** Quits: eddof13 (~textual@2600:4040:4029:5000:c0a8:564b:8784:8bee) (Quit: My MacBook has gone to sleep. ZZZzzz‚Ä¶)
[03:34:04] <ridcully> native as in non-immutable?
[03:34:17] <ridcully> have you benched it with transducers?
[03:50:04] *** Quits: seschwar1 (~seschwar@user/seschwar) (Quit: :wq)
[03:56:06] <sobel> mwnaylor: FreeBSD also has my heart but I worry it would be too backwater for my actual needs these days even if my Linux-fu hadn't long-eclipsed my old FreeBSD skills
[03:56:47] <sobel> and i'll counterpoint my own position, too: FreeBSD was always easier to use. it probably still is. i can see that transition being comfortable.
[03:58:18] <sobel> if security weren't job #3 for me, i'd probably be facing a mixture of openbsd and freebsd in my VPC
[03:59:46] <sobel> alas, my security work lasts years, but the GUIs and databases get outdated pretty fast
[04:00:28] *** Joins: atw (~user@2601:5c2:c500:76b0::a163)
[04:12:24] <mwnaylor> Also, I did a few Android tutorials. Not sure if Android development possible w/o Linux emulation. Minor issue, but still an issue.
[04:27:24] *** Quits: chujev (~chujev@198.20.115.180) (Quit: leaving)
[04:28:00] *** Joins: duke__ (~duke@198.20.115.180)
[04:34:31] *** Quits: atw (~user@2601:5c2:c500:76b0::a163) (Ping timeout: 245 seconds)
[04:49:08] <jeaye> And what about Rocket League? :)
[04:49:22] <jeaye> Not sure the state of Steam and Proton on FreeBSd.
[05:12:19] *** Quits: TheCoffeMaker (~TheCoffeM@user/thecoffemaker) (Ping timeout: 268 seconds)
[05:15:00] *** Joins: TheCoffeMaker (~TheCoffeM@user/thecoffemaker)
[05:22:40] *** Joins: tricklynch (~tricklync@216-180-94-57.starry-inc.net)
[05:24:14] *** Joins: matty_ma1 (~matt@129.222.239.110)
[05:28:51] *** Quits: matty_ma1 (~matt@129.222.239.110) (Ping timeout: 250 seconds)
[05:31:01] *** Joins: matty_ma1 (~matt@129.222.239.110)
[05:32:13] *** Quits: lxsameer (~lxsameer@user/lxsameer) (Ping timeout: 240 seconds)
[05:32:37] *** Quits: TheCoffeMaker (~TheCoffeM@user/thecoffemaker) (Ping timeout: 240 seconds)
[05:42:43] *** Quits: matty_ma1 (~matt@129.222.239.110) (Ping timeout: 250 seconds)
[05:55:56] *** Joins: matty_ma1 (~matt@129.222.239.110)
[06:01:11] *** Quits: matty_ma1 (~matt@129.222.239.110) (Ping timeout: 245 seconds)
[06:02:42] *** Joins: matty_ma1 (~matt@129.222.239.110)
[06:14:00] *** Quits: xulfer (uid452788@id-452788.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[06:39:06] *** Quits: matty_ma1 (~matt@129.222.239.110) (Ping timeout: 245 seconds)
[06:40:19] *** Joins: eddof13 (~textual@2600:4040:4029:5000:c0a8:564b:8784:8bee)
[06:49:51] *** Joins: matty_ma1 (~matt@129.222.239.110)
[06:58:03] *** Quits: matty_ma1 (~matt@129.222.239.110) (Ping timeout: 256 seconds)
[07:09:42] *** Quits: neirac (~neirac@pc-122-191-45-190.cm.vtr.net) (Quit: ZNC 1.8.2 - https://znc.in)
[07:13:03] *** Joins: mbuf (~Shakthi@223.184.115.117)
[07:13:37] *** Quits: neirac_ (~neirac@pc-122-191-45-190.cm.vtr.net) (Ping timeout: 240 seconds)
[07:24:38] *** Joins: matty_ma1 (~matt@129.222.239.110)
[07:28:50] *** Quits: matty_ma1 (~matt@129.222.239.110) (Ping timeout: 252 seconds)
[07:48:45] *** Joins: shiranaihito (~textual@2001-b011-4000-1fe6-0cab-a54b-90ea-6d78.dynamic-ip6.hinet.net)
[07:52:03] *** Joins: atw (~user@2601:5c2:c500:76b0::96f0)
[07:56:35] *** Joins: matty_ma1 (~matt@129.222.239.110)
[08:00:39] *** Quits: ToxicFrog (~ToxicFrog@198-200-100-178.cpe.distributel.net) (Ping timeout: 268 seconds)
[08:05:29] *** Quits: matty_ma2 (~matt@129.222.239.110) (Ping timeout: 250 seconds)
[08:12:52] *** Joins: matty_ma2 (~matt@129.222.239.110)
[08:17:02] *** Quits: matty_ma2 (~matt@129.222.239.110) (Ping timeout: 240 seconds)
[08:30:42] *** Joins: matty_ma2 (~matt@129.222.239.110)
[08:31:01] *** Quits: atw (~user@2601:5c2:c500:76b0::96f0) (Ping timeout: 240 seconds)
[08:36:39] *** Quits: eddof13 (~textual@2600:4040:4029:5000:c0a8:564b:8784:8bee) (Quit: My MacBook has gone to sleep. ZZZzzz‚Ä¶)
[08:37:37] *** Joins: atw (~user@2601:5c2:c500:76b0::d65f)
[08:43:19] *** Joins: ToxicFrog (~ToxicFrog@198-200-100-178.cpe.distributel.net)
[08:57:55] *** Quits: atw (~user@2601:5c2:c500:76b0::d65f) (Ping timeout: 250 seconds)
[08:58:42] *** Joins: atw (~user@2601:5c2:c500:76b0::d65f)
[09:33:01] *** Quits: schmudde (~schmudde@216.169.6.249) (Ping timeout: 250 seconds)
[09:48:35] *** Joins: schmudde (~schmudde@216.169.6.249)
[09:56:47] *** Quits: atw (~user@2601:5c2:c500:76b0::d65f) (Ping timeout: 252 seconds)
[10:22:09] *** Joins: atw (~user@2601:5c2:c500:76b0::ec8c)
[10:36:31] *** Quits: atw (~user@2601:5c2:c500:76b0::ec8c) (Ping timeout: 250 seconds)
[10:42:27] *** Quits: matty_ma1 (~matt@129.222.239.110) (Ping timeout: 256 seconds)
[10:49:48] *** Joins: matty_ma1 (~matt@129.222.239.110)
[10:57:39] *** Quits: matty_ma1 (~matt@129.222.239.110) (Ping timeout: 268 seconds)
[11:37:00] *** Joins: dalek-caan (~Thunderbi@109.252.124.86)
[11:48:19] *** Joins: joe_colben (~joe____co@185.190.112.211)
[11:51:01] *** Quits: schmudde (~schmudde@216.169.6.249) (Ping timeout: 256 seconds)
[12:10:17] *** Quits: joe_colben (~joe____co@185.190.112.211) (Ping timeout: 240 seconds)
[12:18:31] *** Joins: joe_colben (~joe____co@185.190.112.211)
[12:19:28] *** Quits: joe_colben (~joe____co@185.190.112.211) (Remote host closed the connection)
[12:21:42] *** Joins: joe_colben (~joe____co@185.190.112.211)
[13:15:33] *** Quits: dharrigan (~dharrigan@user/dharrigan) (Quit: ZNC - https://znc.in)
[13:16:24] *** Joins: dharrigan (~dharrigan@user/dharrigan)
[13:19:29] *** Quits: joe_colben (~joe____co@185.190.112.211) (Ping timeout: 268 seconds)
[13:47:19] *** Joins: uncleyear (~ian@pppoe.178-66-158-61.dynamic.avangarddsl.ru)
[13:51:04] *** Joins: Ilyu (~quassel@gateway/vpn/pia/ilyu)
[13:59:58] *** Joins: joe_colben (~joe____co@185.190.112.211)
[14:08:17] *** Quits: joe_colben (~joe____co@185.190.112.211) (Ping timeout: 240 seconds)
[14:10:55] *** Quits: mbuf (~Shakthi@223.184.115.117) (Read error: Connection reset by peer)
[14:11:12] *** Joins: mbuf (~Shakthi@223.184.115.117)
[14:16:49] *** Joins: tatsumaru (~tatsumaru@82.147.131.155)
[14:17:24] <tatsumaru> hello, may I ask why special forms like if statements can't be used as arguments to functions?
[14:17:26] *** Quits: Ilyu (~quassel@gateway/vpn/pia/ilyu) (Ping timeout: 245 seconds)
[14:17:46] *** Joins: Ilyu (~quassel@gateway/vpn/pia/ilyu)
[14:18:02] *** Joins: lxsameer (~lxsameer@user/lxsameer)
[14:38:49] *** Joins: matty_ma1 (~matt@129.222.239.110)
[14:42:09] *** Quits: Ilyu (~quassel@gateway/vpn/pia/ilyu) (Ping timeout: 256 seconds)
[14:42:57] *** Quits: matty_ma1 (~matt@129.222.239.110) (Ping timeout: 240 seconds)
[14:59:58] *** Quits: AlaskanEmily (~AlaskanEm@user/alaskanemily) (Remote host closed the connection)
[15:00:03] *** Joins: joe_colben (~joe____co@185.190.112.211)
[15:07:50] *** Quits: joe_colben (~joe____co@185.190.112.211) (Ping timeout: 260 seconds)
[15:24:37] *** Joins: joe_colben (~joe____co@185.190.112.211)
[15:29:35] *** Joins: seschwar (~seschwar@user/seschwar)
[15:34:58] *** Quits: joe_colben (~joe____co@185.190.112.211) (Remote host closed the connection)
[15:35:21] *** Joins: joe_colben (~joe____co@185.190.112.211)
[15:50:52] <sobel> jeaye: Rocket League withdrew Linux support months ago
[15:52:24] <ridcully> that's why proton is needed
[15:53:20] <ridcully> it is basically wine (windows emulation layer) built in into steam with some games officially supported
[15:55:26] <sobel> ah ok. i'm far from caught up on current emulation tech.
[15:55:43] <ridcully> tatsumaru: i'd say, that they are special _forms_, not functions.  so they can not be passed around acting as some.  they are used to do very code specific things.  e.g. how would you like to use a single `if` as a function?
[15:56:53] <tatsumaru> sobel: if you are not a steam user there's a linux app called lutris which manages wine versions and game libraries for you and supports installation scripts. quite handy.
[15:58:05] <sobel> tatsumaru: i'm a steam user but i have a windows machine that runs most my games. i just like to have a few games on my linux machine to see the state of things is from time to time
[15:58:37] <sobel> but i'd play rocketleague on linux if i could
[15:59:33] *** Joins: Ilyu (~quassel@gateway/vpn/pia/ilyu)
[15:59:55] <tatsumaru> ridcully: I was thinking about passing the output of an if statement to a function. let's say I have a function that prints x concert tickets and the if statement checks if it's artist 1 coming to town or artist 2 coming to town and returns the artist name to the ticket printing function.
[16:00:16] <ridcully> in the settings of your linux steam you can force the use of proton for all games.  so in theory you can run anything there.  in practice there are problems.  from my experience this is with 1 in 10 games.  another 1/9 just needs just some coercing
[16:00:34] <ridcully> tatsumaru: this works
[16:00:57] <ridcully> tatsumaru: e.g. (map (if nil inc dec) [1])
[16:02:14] <ridcully> tatsumaru: if you can share the code/error via some paste site, we can have a look at it
[16:02:37] <tatsumaru> ridcully: no code/error, just read in a book that you can't pass special forms as arguments to functions.
[16:02:58] <tatsumaru> but there's isn't much of an explanation why
[16:05:50] <ridcully> you actually can not even get hold of the special form on it's own (e.g. if you just write `if` in your repl)
[16:06:33] <tatsumaru> does that mean that special forms aren't really functions?
[16:06:50] <ridcully> it is a form (so it's inside () with other things most likely).  it does something, that is really needed at the bottom of the language and it must be some via special means
[16:07:08] <ridcully> e.g. `if` is short-circuting.  you can not do this with regular syntax
[16:07:52] <tatsumaru> so it's like an ugly hack basically allowing critical functionality that the functional paradigm doesn't support?
[16:08:02] <ridcully> correct, `if` is not a function (at least not from our vantage point).  it sure looks like one, because we write it just the same
[16:08:15] <sobel> s/ugly hack/implementation
[16:08:17] <ridcully> it's not an hack
[16:08:28] <ridcully> it is the way the language is implemented
[16:09:15] <tatsumaru> is it technically possible to implement if as a function?
[16:09:32] <sobel> what are you trying to do?
[16:09:42] <tatsumaru> just being curious
[16:09:48] <ridcully> tatsumaru: yes, but not using that syntax
[16:10:29] <ridcully> you would have to pass functions for both then and else branch to make it short-circuting and that might even miss nuanches
[16:11:24] <sobel> when you pass a function there are generally some assumptions made or required about its arity and return type
[16:11:46] <ridcully> yeah, that would be no-arg closures to get anything done
[16:12:00] <ridcully> and then who knows, that implications that would have (e.g. bindings)
[16:12:30] <sobel> aaaaaaand we're basically back to passing the output of the equivalent of (if ...)
[16:12:45] <ridcully> if you want, you could say, that special forms do things, that are impossible to do with the language alone.  if you want to know all of them, they are listed here: https://clojure.org/reference/special_forms
[16:13:06] *** Quits: joe_colben (~joe____co@185.190.112.211) (Remote host closed the connection)
[16:13:29] *** Joins: joe_colben (~joe____co@185.190.112.211)
[16:13:29] <ridcully> lisps (?) tend to have just a few of those to actually make the whole language work
[16:14:24] <tatsumaru> hmm interesting, looks like a lot of operations are special forms
[16:14:36] <sobel> i view special forms as the things the language does /for/ you so you don't have to write more code to do it
[16:15:30] <sobel> but also things the language does for you because they can't be expressed in clojure
[16:18:32] <tatsumaru> sobel: does that mean that special forms aren't really clojure?
[16:18:54] <sobel> tatsumaru: quite the opposite
[16:19:10] <sobel> tatsumaru: special forms are clojure before you add any of your own code
[16:19:28] <sobel> clojure is a java library
[16:21:01] <tatsumaru> sobel: lol that's the most extreme definition i've heard so far.
[16:21:41] *** Quits: uncleyear (~ian@pppoe.178-66-158-61.dynamic.avangarddsl.ru) (Remote host closed the connection)
[16:22:30] <sobel> it's the plain truth. i add it to a project with this artifact https://mvnrepository.com/artifact/org.clojure/clojure/1.10.3
[16:23:43] *** Joins: matty_ma1 (~matt@129.222.239.110)
[16:24:00] <sobel> (of course, as we're delving into the implementation of clojure, we start to exclude clojurescript from the discussion because its special forms are not written in java
[16:24:03] <sobel> )
[16:25:01] <sobel> i guess this is where definitions and standards bind clojure-jvm and clojurescript as one language
[16:29:24] <tatsumaru> interesting, thanks for the insights
[16:35:43] *** Joins: uncleyear (~ian@pppoe.178-66-158-61.dynamic.avangarddsl.ru)
[16:44:56] *** Quits: matty_ma1 (~matt@129.222.239.110) (Ping timeout: 245 seconds)
[16:45:37] <tatsumaru> i wrote this little function: https://paste.rs/yYD but when I call it like this '(my-first ["oven" "bike" "war-axe"])' I only get "bike" and I was hoping to get "oven" "bike" or something like that. what I am not getting?
[16:47:06] <sobel> the last value of your function is returned
[16:47:59] <tatsumaru> so I need to explicitly print both values if I want to see both of them?
[16:48:03] <ridcully> if you add a line break before the last things, this will be come more clear
[16:48:27] <sobel> yes, referring to the values in a function like did will not print them
[16:48:48] <ridcully> you can not return multiple things.  you would have to put the multiple things into a container to return that one value
[16:48:55] <sobel> you want something like: (println (my-first [ ["oven" "bike" "war-axe"]))
[16:49:20] <sobel> better: (println (my-first ["oven" "bike" "war-axe"]))
[16:50:18] <tatsumaru> sobel: that still returns 'bike' and 'nil' only.
[16:51:02] <sobel> tatsumaru: yeah, i hadn't figured out you were trying to return multiple values.
[16:51:07] *** Joins: matty_ma1 (~matt@129.222.239.110)
[16:51:11] <ridcully> your my-first is actually my-second
[16:51:19] <sobel> hehe
[16:51:31] <tatsumaru> ridcully: because it's only returning 'second-thing' ?
[16:51:36] <ridcully> you destructure a container and return the second element
[16:52:23] <sobel> tatsumaru: try this function; (defn my-elements [[first-thing second-thing]] [first-thing second-thing])
[16:52:45] *** Quits: turlando_ (~turlando@93-42-250-112.ip89.fastwebnet.it) (Read error: Connection reset by peer)
[16:52:57] <ridcully> correct.  this `first-thing second-thing` in your function is basically `(do first-thing second-thing)` - then `first-thing` is just a no-op and `second-thing` gets returned
[16:52:59] <sobel> your my-first returns second-thing because second-thing is the last value in the function
[16:52:59] *** Joins: turlando (~turlando@93-42-250-112.ip89.fastwebnet.it)
[16:52:59] *** Quits: turlando (~turlando@93-42-250-112.ip89.fastwebnet.it) (Changing host)
[16:52:59] *** Joins: turlando (~turlando@user/turlando)
[16:54:43] <tatsumaru> sobel: yeah returning a vector works. is a vector considered a single value in that context?
[16:55:03] <sobel> yes
[16:55:10] <sobel> a vector is a value
[16:55:26] <sobel> it is a collection type
[16:55:52] <tatsumaru> yeah, that makes sense, thanks 
[16:58:24] <sobel> specifically https://github.com/clojure/clojure/blob/master/src/jvm/clojure/lang/PersistentVector.java
[16:59:07] <tatsumaru> is this the source for a clojure vector?
[16:59:19] <sobel> yes
[16:59:54] <sobel> i don't read clojure's java imple fluently, but interfaces implemented are informative to me as a clojure user
[17:00:43] <sobel> that i've seen the java impl is based on some core interfaces that are fairly unsurprising in nature
[17:01:05] *** Quits: Ilyu (~quassel@gateway/vpn/pia/ilyu) (Ping timeout: 250 seconds)
[17:02:00] <sobel> (also walk the interfaces implemented by its parent class, APersistentVector)
[17:03:27] <sobel> welp, maybe i shouldn't shortchange my clojure source reading. it's clean.
[17:06:05] *** Quits: turlando (~turlando@user/turlando) (Ping timeout: 256 seconds)
[17:06:19] *** Quits: sailorTheCat (~sailorCat@mail2.gajsin.name) (Quit: ZNC 1.8.2 - https://znc.in)
[17:06:49] *** Joins: Ilyu (~quassel@gateway/vpn/pia/ilyu)
[17:07:46] *** Quits: joe_colben (~joe____co@185.190.112.211) (Remote host closed the connection)
[17:08:07] *** Joins: joe_colben (~joe____co@185.190.112.211)
[17:09:06] <sobel> tatsumaru: have you used (type {}) or (type []) yet? that's a good one for building some implementation-awareness
[17:17:32] *** Quits: joe_colben (~joe____co@185.190.112.211) (Ping timeout: 240 seconds)
[17:17:38] *** Joins: sailorCat (~sailorCat@mail2.gajsin.name)
[17:33:26] <tatsumaru> sobel: yeah, type is fun
[17:35:17] *** Quits: matty_ma1 (~matt@129.222.239.110) (Ping timeout: 240 seconds)
[18:10:20] <TimMc> although usually you want class
[18:35:23] *** Joins: matty_ma1 (~matt@129.222.239.110)
[18:40:09] *** Quits: matty_ma1 (~matt@129.222.239.110) (Ping timeout: 256 seconds)
[18:57:17] *** Quits: son0p (~ff@181.136.122.143) (Remote host closed the connection)
[19:10:42] *** Joins: TheCoffeMaker (~TheCoffeM@user/thecoffemaker)
[19:23:17] *** Quits: TheCoffeMaker (~TheCoffeM@user/thecoffemaker) (Ping timeout: 240 seconds)
[19:24:47] *** Joins: son0p (~ff@181.136.122.143)
[19:26:39] *** Joins: TheCoffeMaker (~TheCoffeM@user/thecoffemaker)
[19:35:58] *** Quits: tricklynch (~tricklync@216-180-94-57.starry-inc.net) (Quit: Quit)
[19:36:13] *** Joins: tricklynch (~tricklync@216-180-94-57.starry-inc.net)
[19:42:43] *** Quits: matty_ma2 (~matt@129.222.239.110) (Ping timeout: 250 seconds)
[19:43:16] *** Joins: matty_ma2 (~matt@129.222.239.110)
[19:48:55] *** Quits: tricklynch (~tricklync@216-180-94-57.starry-inc.net) (Quit: Quit)
[19:51:52] <tatsumaru> why is destructuring called this way, what is actually being destructured?
[19:53:19] <Para> structures into their parts
[19:53:41] <Para> structure being a collection of "somethings"; a list of numbers, map of keys and values etc.
[19:53:52] <Para> Another less fancy word could be unpacking.
[19:55:25] <tatsumaru> Para: so for example passing the function a vector and only taking one of the values in that vector as an argument. is it this "less than the whole collection" why it's considered destructuring?
[19:56:00] <tatsumaru> or is it simply because it's operating on parts of a whole collection
[19:56:32] <Para> Destructuring is an explicit operation you perform; https://clojure.org/guides/destructuring
[19:56:55] <Para> You don't always have to destructure, but it improves readability. And in some cases kills performance, but that's why you can always benchmark... :)
[19:58:00] <Para> It's more of a syntactic sugar thing than anything more fundamental than that. A way to say in a concise way that you're not interested of the whole structure, just a specific part of it.
[19:59:29] <tatsumaru> what is the syntactic part that actually qualifies it as destructuring? is the [[v]] parameter?
[20:00:18] <tatsumaru> saying "i'm going to pass you part of a collection as an argument"
[20:02:06] <Para> Whenever it's not just a symbol.
[20:03:55] <Para> So in `(let [a 1]..)` a is obviously a symbol and that's it; if it was `(let [[a] 1]..)` it's a vector, so a vector destructuring is attempted (and it fails, of course, since 1 isn't a collection)
[20:04:29] <Para> Now I'm not sure about the semantics of whether `a` here is actually a symbol, value or whatever, but the idea probably is sound :)
[20:06:46] <tatsumaru> when you are saying (let [[a] 1]) aren't you saying 'bind 1 to [a]'
[20:07:00] <Para> Effectively, yes.
[20:08:51] <tatsumaru> is this a form of pattern matching?
[20:09:01] <Para> No.
[20:09:07] <Para> Rich Hickey hates pattern matching.
[20:09:18] <Para> (well, maybe not "hate" but ah well...)
[20:09:18] *** Quits: uncleyear (~ian@pppoe.178-66-158-61.dynamic.avangarddsl.ru) (Ping timeout: 260 seconds)
[20:09:43] <Para> It _could_ be made with pattern matching, but isn't :)
[20:10:01] <Para> Closest to pattern matching Clojure has is https://github.com/clojure/core.match
[20:10:49] <tatsumaru> why does he hate pattern matching
[20:11:06] <Para> He doesn't hate it, but doesn't see enough value in adding it to Clojure.
[20:11:33] <Para> technomancy could tell you all about this topic, it's one of the sort of repeating things on this channel... :D
[20:12:18] <tatsumaru> i am still trying to grasp the concept of destructuring but it feels like binding a longer vector to a shorter vector to produce a shorter vector, which feels like pattern matching, but I am still a novice.
[20:15:18] *** Joins: jonys (~jonys@user/jonys)
[20:16:50] <Para> You're probably overthinking it.
[20:17:47] <Para> A good idea for novices is to just take things at face value, they'll click eventually :) It keeps the mind open, instead of preloads your thought process with something incorrect.
[20:18:46] <ridcully> it's used to quickly get things from containers.  e.g. you can write (let [[fst snd & rest] xs] ...) which saves you roughly three let-bindings
[20:18:57] <ToxicFrog> > which feels like pattern matching
[20:18:59] <ToxicFrog> It is very similar to pattern matching in other languages, but used as a binding form rather than flow control
[20:19:38] <tatsumaru> ok so why doesn't this work? (let [[a] [a b v]])
[20:19:39] <ridcully> pattern _matching_ also does things conditionally - destructuring does not
[20:20:20] <ridcully> e.g. in pattern-matching you ask for "is it empty", "has it exactly one", "at least one"...
[20:20:37] *** Quits: mwnaylor (~user@2601:5ce:4300:5560::68b3) (Ping timeout: 240 seconds)
[20:21:17] *** Joins: schmudde (~schmudde@216.169.6.249)
[20:21:20] <Para> tatsumaru: that works just fine, `(let [[a] [:a :b :c]] a) ;=> :a`
[20:21:33] <ridcully> destructuring in my above example just takes the things apart.  if xs is empty, fst is nil.
[20:21:40] <Para> Destructuring is about picking the values you care about, not _matching_
[20:21:58] <Solid> seems like a strictly less powerful concept to me
[20:22:12] <Para> It is.
[20:22:24] <Para> Still, quite useful.
[20:23:34] <tatsumaru> Para: ah yes, a mistake on my part, I didn't call the value at the end. I keep expecting final eval to be the result of the operation 
[20:23:38] <Solid> makes me wonder why including proper pattern matching into the language is apparently met with resistence
[20:24:35] <Solid> s/ence/ance/
[20:25:10] <Para> To my understanding its seen as too much complexity, might be an implementation difficulty thing as well.
[20:25:20] <Para> The whitepaper for efficient paper matching is newer than Clojure IIRC.
[20:25:27] <Para> So it could be just timing.
[20:25:43] <tatsumaru> lol paper matching
[20:26:03] <Para> oh, whatever :)
[20:26:05] <ridcully> my guess would have been, that on argument level, that would be quite some dance around what the jvm has to offer
[20:26:23] <Para> Although I could now imagine academics doing some paper matching to estimate who's the smartest/most acclaimed.
[20:26:34] <ridcully> or would end up as defmulti on steroids
[20:27:14] <Para> for which we have https://github.com/camsaul/methodical if somehow you're not happy with native multimethods
[20:29:08] <tatsumaru> is this still considered destructuring: (let [[a b c] [1 2 3]] a)
[20:29:19] <Para> Yes.
[20:29:22] <ridcully> tatsumaru: yes
[20:29:38] <tatsumaru> ok I think i am starting to get it, it's just easy binding
[20:29:49] <ridcully> whenever the left side of that let binding is not just a symbol, you are destructuring
[20:29:54] <Para> Yeah, it's nothing fancy, don't overthink it :)
[20:51:52] *** Joins: Guest20 (~Guest20@2601:645:8400:5510:b100:2f7c:41cf:1436)
[20:58:18] *** Joins: mwnaylor (~user@2601:5ce:4300:5560::68b3)
[21:09:51] *** Joins: hexology (~hexology@user/hexology)
[21:18:25] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[21:28:26] *** Quits: mbuf (~Shakthi@223.184.115.117) (Quit: Leaving)
[21:34:04] *** Quits: Guest20 (~Guest20@2601:645:8400:5510:b100:2f7c:41cf:1436) (Quit: Client closed)
[21:40:37] *** Joins: AlaskanEmily (~AlaskanEm@user/alaskanemily)
[21:50:17] *** Joins: joe_colben (~joe____co@185.190.112.211)
[21:55:36] <wink> does anyone know of any benchmarks that a simple clojure app would run better on newer JVMs than 8?
[21:55:49] <wink> like.. I've been using 8 ever since and it works :P
[22:02:16] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[22:06:33] <leah2> i think 11 has a better GC, but i dont have numbers
[22:06:34] <Para> wink: pretty much every new GC is better than whatever JDK8 has
[22:06:37] <jonys> For me, most of the benefit of newer JVMs comes from improved GC. It makes a large difference in one of my projects, although that project is not small (or simple) by any means.
[22:06:49] <jonys> :-)
[22:07:09] <wink> yeah we're talking requests per day and not per second, I don't think just the GC will help
[22:07:16] <Para> Hmm, I sense a theme :) But, there's some stack specific tests which look at the overall picture between last three LTSes and there are overall improvements as well.
[22:23:16] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[22:25:39] *** Quits: schmudde (~schmudde@216.169.6.249) (Ping timeout: 250 seconds)
[22:27:04] <jeaye> sobel: RL works very well through Proton. Max settings, 144 FPS (could do more), without issue.
[22:28:40] <jeaye> It actually runs better through Proton than it ever did natively. Workshop maps never worked for me, with the native build, due to my GPU. Also, things like controller vibration (which you shouldn't use anyway) work now. Lots of small things.
[22:32:20] *** Quits: joe_colben (~joe____co@185.190.112.211) (Remote host closed the connection)
[22:32:44] *** Joins: joe_colben (~joe____co@185.190.112.211)
[22:33:15] *** Quits: dalek-caan (~Thunderbi@109.252.124.86) (Quit: dalek-caan)
[22:41:17] *** Quits: matty_ma2 (~matt@129.222.239.110) (Ping timeout: 252 seconds)
[22:42:58] *** Quits: joe_colben (~joe____co@185.190.112.211) (Remote host closed the connection)
[22:43:22] *** Joins: joe_colben (~joe____co@185.190.112.211)
[22:50:46] *** Joins: matty_ma2 (~matt@129.222.239.110)
[22:52:20] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[23:06:53] *** Quits: shiranaihito (~textual@2001-b011-4000-1fe6-0cab-a54b-90ea-6d78.dynamic-ip6.hinet.net) (Quit: My MacBook Air has gone to sleep. ZZZzzz‚Ä¶)
[23:15:25] <karthik> I'm new to Clojure and had a question about its tooling. To find a way to do something (http requests, json parsing etc), I'm currently checking https://www.clojure-toolbox.com/, picking one of the choices, navigating to its homepage, copying the leiningen string (with the exact version) into my project.clj file, running `lein deps' from the command line, and quitting and restarting CIDER. Is this how the process works?
[23:16:12] <karthik> I was wondering if there's a more streamlined way to find and install libraries.
[23:19:22] *** Joins: supremesorcerer (~ss@181.99.195.65)
[23:19:27] *** Parts: supremesorcerer (~ss@181.99.195.65) ()
[23:28:09] <jeaye> karthik: There's no need to run `lein deps`. It'll run for you when starting a repl or building your project.
[23:28:34] <jeaye> i.e. `lein repl` will make sure you have all deps.
[23:29:09] *** Quits: matty_ma2 (~matt@129.222.239.110) (Ping timeout: 256 seconds)
[23:30:03] <jeaye> But yeah, find the project you want, read its docs, add it as a dep, and then have lein pull it (maybe by just restarting your repl). That's the process.
[23:30:05] *** Joins: matty_ma2 (~matt@129.222.239.110)
[23:35:45] *** Joins: seabass (~seabass@user/seabass)
[23:36:58] *** Quits: joe_colben (~joe____co@185.190.112.211) (Remote host closed the connection)
[23:37:22] *** Joins: joe_colben (~joe____co@185.190.112.211)
[23:45:03] <karthik> jeaye: Usually I'm already running a CIDER (n)repl when I add to project.clj.
[23:45:34] *** Joins: schmudde (~schmudde@216.169.6.249)
[23:45:38] <karthik> So I still need to restart CIDER?
[23:46:47] <karthik> CIDER question: Currently I run C-c C-q in the CIDER repl, then M-x cider-jack-in. Is there a simpler way to restart CIDER? There are too many CIDER commands so I couldn't find the right one.
[23:47:40] <seabass> karthik: hmm, I just run cider-connect again
[23:48:01] <seabass> M-x cider-connect RET localhost RET 2000 RET
[23:49:06] <karthik> seabass: Got it, thank you. 
[23:50:10] <seabass> karthik: no problem :)
[23:50:18] <karthik> I was working through some of the code in Clojure for the Brave and True, but I couldn't run it in CIDER. It refused to start because the Clojure version specified in the project file was incompatible with my CIDER install. 
[23:51:00] <seabass> hmm, interesting - where are you installing Clojure and CIDER from?
[23:51:22] <seabass> I'm using the latest Clojure binary from a container, and the latest CIDER release on MELPA.
[23:51:51] <karthik> Clojure from the Arch repos, CIDER from MELPA. I believe CIDER complained that the Clojure version specified in the deps was too old and incompatible with the nrepl middleware version it uses
[23:51:54] *** Quits: matty_ma2 (~matt@129.222.239.110) (Ping timeout: 260 seconds)
[23:52:28] <karthik> I've had this problem with a lot of older Clojure code. The Core.async demo file from a 2014 talk had a similar problem
[23:52:38] <seabass> 1.10.3.1040-1 is the version in Arch Community
[23:53:01] <seabass> so that's the same version as I'm using
[23:53:02] <karthik> 1.10.3.1040 is my installed version.
[23:53:17] *** Joins: matty_ma2 (~matt@129.222.239.110)
[23:53:19] <seabass> oh, you're using nrepl middleware? I'm not using that lol
[23:53:33] <seabass> it seems to work fine without it :D
[23:53:38] <karthik> I haven't configured anything, it's whatever CIDER runs by default
[23:54:15] <seabass> I thought the middleware is what the nrepl runs; maybe I'm wrong there
[23:55:36] <karthik> Here's the error: As of 2.8.2, the repl task is incompatible with Clojure versions older than 1.7.0. 
[23:55:37] <karthik> You can downgrade to 2.8.1 or use `lein trampoline run -m clojure.main` for a simpler fallback repl.
[23:55:37] <karthik> Subprocess failed (exit code: 1)
[23:55:47] *** Quits: Ilyu (~quassel@gateway/vpn/pia/ilyu) (Ping timeout: 256 seconds)
[23:56:15] <karthik> This is for a core.async demo project from 2013 that lists [org.clojure/clojure "1.5.1"] as a dependency
[23:56:39] <seabass> ah, so that dependency will override your installed Clojure version
[23:56:45] *** Joins: Ilyu (~quassel@gateway/vpn/pia/ilyu)
[23:56:53] <seabass> it downloads the specific JAR for that version when it starts
[23:57:15] <seabass> I'd just update and that [org.clojure/clojure "1.10.3"] and see if it just works
[23:57:40] <ridcully> ramp up the version in the project.clj file there.  if you are unsure, only go up to 1.8.  but i'd rather update all deps then
[23:59:14] <karthik> Here's the error when I try 1.10.3: https://0x0.st/osxc.txt
