[00:00:03] <nomagno> I have `int myfunc(BORING_ARGUMENTS, int arr[4])`
[00:00:08] <rcf> Can you post a test case where this actually breaks 
[00:00:14] <nomagno> I'll try
[00:00:43] <Kit> segmentation fault my beloved
[00:00:49] <rcf> Without that all I can really say is Works For Me™
[00:01:00] *** Joins: Viewday11 (~Viewday@user/viewday)
[00:03:41] *** Quits: dacav (~dacav@h94-245-9-199.cust.a3fiber.se) (Remote host closed the connection)
[00:05:01] <nomagno> ,sh cat https://termbin.com/medo > l; cc l; ./a.out
[00:05:02] <candide> nomagno: cat: 'https://termbin.com/medo': No such file or directory /usr/bin/ld: /usr/lib/gcc/x86_64-redhat-linux/11/../../../../lib64/crt1.o: in function `_start': (.text+0x1b): undefined reference to `main' collect2: error: ld returned 1 exit status prog.sh: line 1: ./a.out: No such file or directory
[00:05:12] <nomagno> ,sh curl https://termbin.com/medo > l; cc l; ./a.out
[00:05:15] *** Quits: bruda (~bruda@172.58.59.79) (Quit: leaving)
[00:05:15] <candide> nomagno:   % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current                                  Dload  Upload   Total   Spent    Left  Speed    0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0curl: (6) Could not resolve host: termbin.com /usr/bin/ld: /usr/lib/gcc/x86_64-redhat-linux/11/../../../../lib64/crt1.o: in function `_start': (.text+0x1b): undef... <truncated; https://0x0.st/-hPN.txt>
[00:05:31] <nomagno> No network access, my bad
[00:05:35] <nomagno> well That link
[00:05:43] <nomagno> Just want to check there's no major UB in what I posted
[00:05:47] <nomagno> I can't find any.
[00:05:59] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-bc7b-beb0-653c-822c.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[00:06:32] <floatcomplex> wtf are you trying to do
[00:06:55] <nomagno> I'm trying to figure out why this specific action is giving me garbage.
[00:06:59] <floatcomplex> use godbolt
[00:07:25] <nomagno> thanks for being so understanding
[00:07:28] <nomagno> smh
[00:07:51] *** Joins: bolovanos_ (~bolovanos@user/bolovanos)
[00:08:23] <floatcomplex> nomagno: well you're trying to do something to candeed that would be rather alarming, if it worked
[00:08:31] <nomagno> https://godbolt.org/z/WvME3zPqG
[00:08:42] *** Joins: Y4knotiS (~YaknotiS@cpc1-cmbg18-2-0-cust87.5-4.cable.virginm.net)
[00:08:49] <nomagno> floatcomplex: I was talking about the C code, not the network access restriction
[00:09:31] *** Joins: The_Jag (~The_Jag@host-79-13-66-68.retail.telecomitalia.it)
[00:09:36] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Quit: sord937)
[00:09:44] <nomagno> I'm basically doing this exact thing in my program, and the result of that same printf seems to be 65532
[00:09:55] <Bou> "basically"
[00:10:08] <floatcomplex> on godbolt, -fsanitize=address,undefined is not alarmed by that code. it prints 7
[00:10:33] <nomagno> Bou: I can't actually provide a minimal reproducible example AND provide code that isn't "basically" what I am doing
[00:10:36] <nomagno> at the same time
[00:11:03] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-bc7b-beb0-653c-822c.res6.spectrum.com)
[00:11:33] *** Joins: KillerWasp (KillerWasp@user/killerwasp)
[00:11:35] <KillerWasp> hello
[00:11:44] <Bou> except you removed the part that made it not work
[00:11:46] <nomagno> Uhm, you see, it was working
[00:11:53] <KillerWasp> about of begin directories: 1) /a/b/c/d - from the root directory. 2) a/b/c/d - from the actual directory. 3) ./a/b/c/d - from the actual directory. It's all correct? the point 2 seem don't work with open() function.
[00:12:06] <nomagno> I was just looking at the wrong line, because I forgot how I structured my own code
[00:12:08] <nomagno> ba dum tsss
[00:12:16] *** Quits: bolovanos__ (~bolovanos@user/bolovanos) (Ping timeout: 264 seconds)
[00:12:52] *** Joins: vmcs (~vmcs@194.135.154.137)
[00:13:41] <cehteh> KillerWasp: what OS? what error code do you get? .. note that std C doesnt know about directories (but it is somewhat agnostic, still works with them)
[00:14:09] <nomagno> KillerWasp: If you're on a POSIX-compliant platform, that should work.
[00:14:17] <cehteh> eh open() is posix anyway or?
[00:14:23] <nomagno> At least, points 2 and 3 should be equivalent
[00:14:32] <nomagno> cehteh: open() is POSIX, indeed
[00:14:47] *** Joins: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[00:14:55] *** Joins: nuxil (~nuxil@141.195.51.213)
[00:14:57] <cehteh> i mean he could be on a non posix os that provides open()
[00:16:48] <KillerWasp> cehteh: It's Archlinux32, no error, only wrong behavior. It's supposed to work on any operating system, the OS is irrelevant. :/
[00:17:01] <cehteh> its not
[00:17:13] <cehteh> and what is 'wrong behaviour' 
[00:17:24] <KillerWasp> cehteh: that don't open with the point 2.
[00:17:39] *** Joins: jrpat (~jrpat@75-166-59-108.hlrn.qwest.net)
[00:17:39] <cehteh> that means it returns an error?
[00:17:51] <KillerWasp> well, i don't check it...
[00:17:57] <cehteh> tada
[00:18:21] <KillerWasp> i only check that with ./ work fine. ;
[00:18:23] <KillerWasp> ;)
[00:18:29] <floatcomplex> can't see an error if you shut your eyes :)
[00:18:36] <KillerWasp> you can try by yourself...
[00:18:45] <cehteh> "my program is 100% error free" :)
[00:18:52] <trenka> by yourself it works fine
[00:19:15] *** Quits: vmcs (~vmcs@194.135.154.137) (Ping timeout: 256 seconds)
[00:19:49] <cehteh> handle errors then you know the reason
[00:20:43] <floatcomplex> #define NOPE(...) do { fprintf(stderr, "error: " __VA_ARGS__); exit(EXIT_FAILURE); } while(0)
[00:21:13] <phox> someone implementing path handling stuff?  just post your code on mitre.org it's easier that way.
[00:21:29] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[00:22:08] <floatcomplex> if (-1 == pipe(fd)) NOPE("%s: pipe(): %s\n", __func__, strerror(errno));
[00:22:19] <floatcomplex> #define SHIT NOPE
[00:22:23] <floatcomplex> all the error handling you need
[00:23:34] <KillerWasp> well, now work fine for me. maybe is with archlinux 64 bits the problem.
[00:23:41] <KillerWasp> i don't remember.
[00:24:00] <trenka> no it's not
[00:25:04] *** Quits: jrpat (~jrpat@75-166-59-108.hlrn.qwest.net) (Quit: Leaving)
[00:25:34] <KillerWasp> floatcomplex: for handling the error you need error.h
[00:25:44] <KillerWasp> and errno.h
[00:26:20] <floatcomplex> is that a problem
[00:27:01] <KillerWasp> or %m for printf
[00:27:03] *** Quits: rainmanj_ (~rainmanja@216.161.85.62) (Quit: Leaving...)
[00:27:42] <floatcomplex> for bonus points, make it print "error: " in bold and red using ansi escape sequences when appropriate, and not when not
[00:27:53] <KillerWasp> but I never use them, if it gives an error I just keep on not knowing anything.
[00:28:09] <asd> to conserve memory, is there a way to make a array of bits in C rather than `char set[BIGNUMBER];` ?
[00:28:40] <floatcomplex> asd: of course, it just depends on how abstract and dumb you want to get with it
[00:28:54] <asd> floatcomplex: as simple as possible
[00:29:04] <nomagno> The dumb question earlier was because of a (actually nonexistant) bug in my assembler. I can actually write code for my VM now!
[00:29:06] <floatcomplex> that word doesn't mean the same thing to any two people
[00:30:22] <KillerWasp> I was making a string directory system for a class. But since point 2 usually fails I was thinking of excluding it.
[00:30:44] <asd> floatcomplex: well preferably that i could access it with `foo[x]` and set it with `foo[x]=z;`i though maybe `struct foo{ int x : 1; }` struct foo bar[20]; will this be a bit array?
[00:31:33] <floatcomplex> don't think it's that simple
[00:31:40] * pragma- daydreams about his custom language that lets you declare bitsets as an array and access them like bit[i] and it would compile to the appropriate bitmask operations.
[00:32:07] <pragma-> I'm probably not the first to have that idea and I'm sure several existing languages already do it.
[00:32:13] <floatcomplex> the problem with that sort of syntax is it tricks the reader into thinking the implementation doesn't have to do an RMW on many of the bits
[00:32:14] <pragma-> Probably a feature of Zig or Nim.
[00:32:16] <floatcomplex> in order to change one of them
[00:33:03] <floatcomplex> most struct bit field manipulation has the same problem actually
[00:33:37] <floatcomplex> the c compiler does such a shitty job of it that chip manufacturers actually have to work around it at the hardware level
[00:33:59] <floatcomplex> "reading from this bit always returns zero. writing zero to this bit has no effect. writing one to this bit sets it"
[00:34:02] <floatcomplex> that sort of thing
[00:34:07] <pragma-> hmm https://nim-lang.org/docs/bitops.html
[00:34:09] <floatcomplex> in order to make the RMWs that the c compiler generates harmless
[00:34:33] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Ping timeout: 256 seconds)
[00:35:17] *** Joins: Guest007 (~Guest007@c-24-30-27-91.hsd1.ga.comcast.net)
[00:36:23] *** Joins: fabs (~fabs@wrls-249-137-11.wrls-client.fas.harvard.edu)
[00:36:48] *** Joins: maroloccio (~marolocci@151.53.155.184)
[00:37:13] *** Quits: Guest007 (~Guest007@c-24-30-27-91.hsd1.ga.comcast.net) (Quit: Client closed)
[00:38:07] *** Joins: cool6502 (~cool333@bzq-79-176-139-177.red.bezeqint.net)
[00:38:28] *** Quits: pulse (~pulse@user/pulse) (Quit: Join a community of haunted house decorators at https://indiedevs.net/)
[00:39:04] *** Joins: SpringSprocket (~srv@hobby.esselfe.ca)
[00:40:41] *** Joins: u0_a391 (~u0_a391@2603-6010-a141-6fa3-c4fd-876a-2db9-8bd1.res6.spectrum.com)
[00:40:50] *** Joins: hecanjog (~hecanjog@2a01:4f9:6a:5326::2)
[00:41:21] *** Quits: cool2077 (~cool333@bzq-79-176-139-177.red.bezeqint.net) (Ping timeout: 256 seconds)
[00:44:23] *** Quits: alch (~alch@bo-18-143-62.service.infuturo.it) (Read error: Connection reset by peer)
[00:44:56] *** Quits: Kit (~u0_a391@2600:380:5e22:c647:c579:6a65:2348:94a4) (Ping timeout: 252 seconds)
[00:45:51] *** Joins: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net)
[00:46:28] *** Joins: scalablecory (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net)
[00:48:12] *** Joins: alch (~alch@151.68.36.172)
[00:49:40] *** Joins: Kit-ten (~NotApplic@2603-6010-a141-6fa3-fb6b-93b0-0580-4e13.res6.spectrum.com)
[00:50:18] *** Parts: pony (sid524992@smol/hors) ()
[00:50:26] *** Quits: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net) (Ping timeout: 252 seconds)
[00:51:15] *** Joins: Guest17 (~Guest17@eth-west-pareq2-46-193-4-100.wb.wifirst.net)
[00:52:00] *** Quits: gxt (~gxt@gateway/tor-sasl/gxt) (Ping timeout: 276 seconds)
[00:52:35] *** Joins: gxt (~gxt@gateway/tor-sasl/gxt)
[00:53:21] *** Joins: lightningwright (~lightning@user/lightningwright)
[00:53:40] *** Quits: constxd (~brad@192.75.101.164) (Ping timeout: 264 seconds)
[00:56:34] *** Joins: hxx (~hxx@c-24-30-27-91.hsd1.ga.comcast.net)
[00:58:52] *** Joins: beard_ (~beard@h94-245-9-198.cust.a3fiber.se)
[00:58:52] *** Quits: beard_ (~beard@h94-245-9-198.cust.a3fiber.se) (Client Quit)
[00:59:25] *** Joins: beard_ (~beard@h94-245-9-198.cust.a3fiber.se)
[00:59:31] *** Quits: singularity00 (~singulari@85.187.64.126.client.entry.bg) (Quit: The true sign of intelligence is not knowledge but imagination.)
[00:59:32] <hxx> What is better C practice: Using nothing as arguments if there are none or (void)? Example - int example() vs int example(void).
[00:59:49] <floatcomplex> void
[01:00:09] <hxx> Why though?
[01:00:12] *** Quits: beard_ (~beard@h94-245-9-198.cust.a3fiber.se) (Client Quit)
[01:00:14] <Kit-ten> looks nicer
[01:00:22] <pragma-> because int example() means unspecified arguments, not zero arguments.
[01:00:30] <Kit-ten> oh
[01:00:31] <Kit-ten> TIL
[01:00:39] *** Quits: Betal (~Betal@user/betal) (Quit: WeeChat 3.3)
[01:00:53] <hxx> What could happen if I have unspecified arguments in the function declaration and definition?
[01:01:17] <Kit-ten> im assuming you can pass args to it
[01:01:25] <Kit-ten> when youre not supposed to
[01:01:26] *** Quits: reumeth (~reumeth@user/reumeth) (Ping timeout: 252 seconds)
[01:01:37] <Kit-ten> which may or may not cause a stack overflow somewhere, eventually
[01:01:47] <Kit-ten> however i have no idea what im talking about
[01:01:54] <Kit-ten> so dont quote me
[01:02:44] *** Joins: Betal (~Betal@user/betal)
[01:07:15] *** Quits: hxx (~hxx@c-24-30-27-91.hsd1.ga.comcast.net) (Quit: Leaving)
[01:08:41] *** Joins: bolovanos__ (~bolovanos@user/bolovanos)
[01:11:17] *** Quits: NEYi (~NEYi@109.251.216.38) (Read error: Connection reset by peer)
[01:11:19] *** Quits: Guest17 (~Guest17@eth-west-pareq2-46-193-4-100.wb.wifirst.net) (Quit: Client closed)
[01:11:57] *** Quits: bolovanos_ (~bolovanos@user/bolovanos) (Ping timeout: 256 seconds)
[01:14:57] *** Joins: ChromaCat248 (~ChromaCat@user/chromacat248)
[01:15:27] *** Joins: cmbengue (~Thunderbi@207.191.249.160)
[01:17:20] *** Joins: BSaboia (~bsaboia@187.18.140.125)
[01:18:47] *** Quits: akahs (~Shaka@user/shaka) (Quit: .)
[01:21:04] *** Quits: Nistar (~Nistar@188.241.177.237) (Ping timeout: 256 seconds)
[01:22:56] *** Joins: Nistar (Nistar@gateway/vpn/protonvpn/nistar)
[01:25:02] *** Joins: arandomcomrade (~arandomco@user/arandomcomrade)
[01:26:32] *** Joins: PortableDave (~portabled@118.210.59.27)
[01:27:08] *** Joins: vysn (~vysn@user/vysn)
[01:30:01] *** Quits: gproto23 (~gproto23@user/gproto23) (Read error: Connection reset by peer)
[01:30:01] *** Joins: gproto23_ (~gproto23@user/gproto23)
[01:30:02] *** Quits: chomwitt (~chomwitt@2a02:587:dc16:f200:12c3:7bff:fe6d:d374) (Ping timeout: 252 seconds)
[01:30:35] *** Quits: mahmutov (~mahmutov@5.176.7.214) (Ping timeout: 252 seconds)
[01:30:39] *** Quits: Inline (~Inline@aftr-37-201-240-100.unity-media.net) (Quit: Leaving)
[01:33:01] *** Quits: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Remote host closed the connection)
[01:36:02] *** Joins: kexec (~kexec@user/kexec)
[01:39:17] *** Joins: bindu_ (~bindu@user/bindu)
[01:40:13] *** Quits: brad_mssw (~bhouse@2601:344:4100:b490:e01b:fa9f:cf6:5559) (Quit: This computer has gone to sleep)
[01:40:20] *** Quits: Y4knotiS (~YaknotiS@cpc1-cmbg18-2-0-cust87.5-4.cable.virginm.net) (Ping timeout: 256 seconds)
[01:40:22] <fizzie> Empty pair of parentheses does "mean" zero arguments in a _definition_ (but still does not constitute a prototype, meaning calling the function with some arguments is not a constraint violation); in a non-definition declaration, it means the unspecified amount of arguments as mentioned.
[01:40:45] *** Quits: bindu (~bindu@user/bindu) (Ping timeout: 276 seconds)
[01:41:08] *** bindu_ is now known as bindu
[01:42:01] <fizzie> C11 6.7.6.3p14: "An empty [identifier] list in a function declarator that is part of a definition of that function specifies that the function has no parameters. The empty list in a function declarator that is not part of a definition of that function specifies that no information about the number or types of the parameters is supplied."
[01:42:10] <fizzie> (6.11.6p1: "The use of function delcarators with empty parentheses (not prototype-format parameter type declarators) is an obsolescent feature.")
[01:44:40] *** Quits: neiluj (~neiluj@2a01:e0a:1f2:d960:f2f0:dd4:de5f:b8c0) (Quit: WeeChat 3.1)
[01:44:52] *** Joins: terminalpusher (~terminalp@2a01:586:a4a5:1:a8d0:5524:e423:6127)
[01:46:09] *** Joins: brad_mssw (~bhouse@2601:344:4100:b490:350f:846:1d6e:2b21)
[01:47:33] *** Quits: gproto23_ (~gproto23@user/gproto23) (Remote host closed the connection)
[01:49:48] <pragma-> True. I used to argue that point but lately I don't find that an interesting point worth distincting over any longer.
[01:50:09] <pragma-> It used to come up in here often with regards to `main()`.
[01:50:25] <pragma-> I was on the side of "ah, ah, ah, but in a *definition*!" but lately it's not an interesting argument.
[01:50:37] *** Joins: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br)
[01:51:01] <pragma-> At least, not to me.
[01:51:03] *** Quits: PortableDave (~portabled@118.210.59.27) (Ping timeout: 256 seconds)
[01:51:06] *** Quits: dreamcat4 (uid157427@id-157427.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[01:51:37] <pragma-> Usually the conversation is related to API prototypes in headers anyway.
[01:51:53] *** Joins: PortableDave (~portabled@pa49-199-242-25.pa.vic.optusnet.com.au)
[01:53:08] *** Quits: blindguard (~blindguar@2a02:908:1864:c200::12) (Quit: Konversation terminated!)
[01:53:24] <pragma-> I mean, "But if the function is a definition, you don't have to use void there." isn't a helpful statement, really.
[01:53:59] <pragma-> The best practice is to explicitly use void.
[01:55:06] *** Quits: arandomcomrade (~arandomco@user/arandomcomrade) (Read error: Connection reset by peer)
[01:55:28] *** Quits: gh34 (~textual@cpe-184-58-181-106.wi.res.rr.com) (Quit: Textual IRC Client: www.textualapp.com)
[01:57:29] *** Quits: shivesh (~shivesh@user/shivesh) (Quit: leaving)
[01:59:02] *** Joins: prpldmn (~prpldmn@2806:102e:e:234f:d97d:3c36:466f:e9c6)
[01:59:15] *** Joins: cart_man (~rynot@host-78-144-121-71.as13285.net)
[02:00:01] *** Parts: KillerWasp (KillerWasp@user/killerwasp) (YOU KIDDING ME?? YOU KIDDING MEEE???? (PC drinking beer) *kernel panic!*)
[02:00:56] *** Parts: prpldmn (~prpldmn@2806:102e:e:234f:d97d:3c36:466f:e9c6) ()
[02:02:44] *** Quits: aradesh (~aradesh@user/aradesh) (Quit: WeeChat 1.9.1)
[02:07:14] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: ZzzZ)
[02:08:39] *** Quits: lightningwright (~lightning@user/lightningwright) (Quit: Leaving)
[02:10:56] *** Quits: cmbengue (~Thunderbi@207.191.249.160) (Ping timeout: 256 seconds)
[02:14:35] *** Quits: WilliamLeara (~wdl@cpe-76-185-2-28.tx.res.rr.com) (Ping timeout: 252 seconds)
[02:15:32] *** Quits: terminalpusher (~terminalp@2a01:586:a4a5:1:a8d0:5524:e423:6127) (Remote host closed the connection)
[02:15:54] *** Joins: terminalpusher (~terminalp@2a01:586:a4a5:1:a8d0:5524:e423:6127)
[02:16:11] *** Quits: Zenton (~user@user/zenton) (Ping timeout: 245 seconds)
[02:17:27] <phox> pragma-: I mean, yeah, it's already effectively (partially) defined as such elsewhere...
[02:17:42] <phox> yer implementation gots a pro-tee-tahp
[02:18:31] <pragma-> I've been racking my brain trying to think of an actually "good" scenario where it'd be okay to pass arguments to a function and silently have the arguments be disregard.
[02:19:18] *** Quits: nicholaus04 (~nicholaus@2607:fb90:e58c:fb6a:2920:4094:8818:7c51) (Quit: Joined Game)
[02:19:32] *** Quits: boB_K7IQ (~boB_K7IQ@ip98-177-87-213.ph.ph.cox.net) (Ping timeout: 265 seconds)
[02:19:51] <phox> fizzie: that's a change as of C11 innit?  I believe prior Standards were both in alignment with the latter, for both uses...?
[02:19:56] *** cust_ is now known as cust
[02:20:40] <pragma-> ,cc void f() {}  f(42, "this is a very important string");
[02:20:43] <candide> pragma-: Success (no output).
[02:20:49] <pragma-> Hrm.
[02:21:24] <pragma-> No warning, weird.
[02:21:34] <pragma-> ,clang void f() {}  f(42, "this is a very important string");
[02:21:37] <candide> pragma-: [warning: too many arguments in call to 'f']  Success (no output).
[02:21:40] * pragma- nods.
[02:21:46] * pragma- gestures at the absolute state of gcc.
[02:22:02] <phox> ^
[02:22:07] <pragma-> ,clang void f(void) {}  f(42, "this is a very important string");
[02:22:09] <candide> pragma-:  fatal error: too many arguments to function call, expected 0, have 2  note: 'f' declared here
[02:22:13] <pragma-> ,cc void f(void) {}  f(42, "this is a very important string");
[02:22:14] <candide> pragma-: error: too many arguments to function 'f'
[02:22:42] <phox> pragma-: maybe it was busy eating something off its toe
[02:22:43] <phox> :l
[02:22:47] <phox> (gcc)
[02:23:03] <pragma-> Walrus gumboot and toejam football.
[02:26:41] *** Quits: wootz (~wootz@2806:1000:8000:afa9:9c90:e742:8894:a4fe) (Ping timeout: 252 seconds)
[02:26:45] *** Quits: random-nick (~random-ni@87.116.165.83) (Read error: Connection reset by peer)
[02:27:00] *** Quits: sham1 (~sham1@212-146-44-107.aboa.net) (Ping timeout: 260 seconds)
[02:28:56] *** Quits: Akuli (~Akuli@82-203-165-211.bb.dnainternet.fi) (Quit: Akuli)
[02:32:28] *** Quits: Nistar (Nistar@gateway/vpn/protonvpn/nistar) (Ping timeout: 256 seconds)
[02:33:19] *** Quits: highrate (~presonic@111-22-237-24.gci.net) (Remote host closed the connection)
[02:33:40] *** Joins: highrate (~presonic@111-22-237-24.gci.net)
[02:36:46] *** Quits: rgrinberg (~textual@200.5.63.76) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[02:37:34] *** Joins: sham1 (~sham1@212-146-44-107.aboa.net)
[02:38:04] *** Quits: Libero (~Libero@130.43.23.56.dsl.dyn.forthnet.gr) (Read error: Connection reset by peer)
[02:38:29] *** Quits: brad_mssw (~bhouse@2601:344:4100:b490:350f:846:1d6e:2b21) (Quit: Leaving)
[02:38:48] *** Joins: Libero (~Libero@130.43.23.56.dsl.dyn.forthnet.gr)
[02:42:07] *** Quits: PortableDave (~portabled@pa49-199-242-25.pa.vic.optusnet.com.au) (Read error: Connection reset by peer)
[02:42:47] *** Quits: terminalpusher (~terminalp@2a01:586:a4a5:1:a8d0:5524:e423:6127) (Remote host closed the connection)
[02:43:14] *** Joins: Atque (~Atque@user/atque)
[02:44:08] *** Joins: PortableDave (~portabled@118.208.121.162)
[02:45:30] *** Quits: sham1 (~sham1@212-146-44-107.aboa.net) (Quit: ZNC 1.8.2 - https://znc.in)
[02:45:38] *** Joins: vim_fans (~pi@user/vim-fans/x-3284168)
[02:46:18] <vim_fans> hi, there. I just tackling with an assignment, but can't understand it . here is the url, please check it out https://ibb.co/SV1TByC
[02:46:20] <vim_fans> https://ibb.co/ZmFQw36
[02:47:02] *** Joins: semeion (~semeion@user/semeion)
[02:47:16] <vim_fans> what confused me  is that how could I put the smallest number in the smallest memory . I know how to sort numbers. like bubble sort 
[02:48:25] <pragma-> That is a strange non-contiguous "array".
[02:48:51] *** Quits: bolovanos__ (~bolovanos@user/bolovanos) (Ping timeout: 256 seconds)
[02:49:58] *** Joins: sham1 (~sham1@212-146-44-107.aboa.net)
[02:50:52] *** Quits: PortableDave (~portabled@118.208.121.162) (Quit: WeeChat 3.3)
[02:51:39] *** Joins: soapsudsxx (~soapsudsx@209.221.40.158)
[02:51:52] *** Quits: vysn (~vysn@user/vysn) (Ping timeout: 264 seconds)
[02:52:48] <pragma-> what are those, 16 bit bytes or something? why is the list of addresses not in order?
[02:53:21] *** Quits: LucaTM (~LucaTM@user/lucatm) (Quit: Textual IRC Client: www.textualapp.com)
[02:53:22] <vim_fans> pragma-: puzzled . that is what confused me 
[02:53:23] <pragma-> why are there gaps
[02:53:59] <pragma-> I do not like this question. I do not like it one bit.
[02:54:31] <vim_fans> pragma-: If i sorted numbers according to the memory address, then the numbers in array wouldn't sorted numbers 
[02:54:44] *** Joins: VincentValentine (~VincentVa@79.126.106.250)
[02:54:53] <pragma-> "the C variable called Array, which is an array of type int"
[02:54:54] *** Quits: Sheilong (uid293653@id-293653.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[02:54:59] * pragma- stares the fuck at "array of type int"
[02:55:14] <pragma-> int is not an array type.
[02:55:16] <pragma-> int[3] is.
[02:55:35] <pragma-> "an array with elements of type int" would make more sense than "an array of type int"
[02:55:52] <pragma-> What book is this question from?
[02:56:30] *** Quits: mrig (~mrig@user/mrig) (Quit: WeeChat 3.0)
[02:56:56] *** Joins: Macuser (~Macuser@216.30.159.201)
[02:57:26] *** phryk_ is now known as phryk
[02:57:27] <vim_fans> computer organization and designer 
[02:57:37] <vim_fans> pragma-: I figure out ... it was typo  
[02:57:54] <vim_fans> it give 38 instead of 28 :D
[02:58:07] <vim_fans> pragma-: hate this kind of typo 
[02:58:09] <pragma-> oh
[02:58:14] <phox> vim_fans: PSA those guys are assholes :)
[02:58:19] <phox> I talked with them
[02:58:26] <phox> Hennessy + Patterson or whoever
[02:58:31] *** Joins: callen92 (~callen92@172.92.89.49)
[02:58:40] <phox> (and the book is pretty bad and has lots of errors)
[02:59:09] <vim_fans> phox:  I encountered twice 
[02:59:13] <pragma-> vim_fans: Well spotted.
[02:59:20] *** semeion is now known as mnemonic
[02:59:23] <vim_fans> phox: drive me craze 
[02:59:34] <phox> I returned the book
[02:59:35] <phox> lol
[02:59:43] <vim_fans> phox: by the way , what do you mean by PSA?
[02:59:44] <phox> "sorry this is garbage, I paid for facts not this disaster"
[02:59:50] <phox> public service announcement :)
[02:59:54] <phox> heh
[03:00:21] <vim_fans> phox:  I get it . . I am not native English speaker  , so some times need some explanation 
[03:00:26] <phox> np
[03:00:40] <pragma-> I don't know. Do people really say "array of type float?"  "array of floats."  Ehhh. 
[03:00:57] <floatcomplex> bag of floats
[03:00:58] <phox> cdecl says "array of float"
[03:01:06] <pragma-> I guess "which is an array of type int" is okay...ish?
[03:01:09] <phox> floatcomplex: pref box of floats
[03:01:24] <pragma-> ,english int a[];
[03:01:26] <phox> pragma-: I mean that's not ambiguous or weird so sure
[03:01:26] <candide> pragma-: error: array size missing in 'a'
[03:01:32] <pragma-> ,english int a[42];
[03:01:32] <candide> pragma-: Declare `a` as an array of 42 elements of i​nt.
[03:01:40] <phox> "i nt"
[03:01:51] <phox> candide: toying with that UB are ya
[03:01:56] <pragma-> That's a zero-width space!
[03:01:56] <callen92> Hi, if I have a "#define VAR 'text'", and I use it in a function, for some reason the compiler thinks it's an integer
[03:01:59] <pragma-> You're not supposed to see it!
[03:02:09] <pragma-> There's a guy named int here!
[03:02:12] <vim_fans> phox:  be honest with you , I did learn lots things from this book even though there are lots of typos here
[03:02:13] <phox> pragma-: "go FWF yourself"
[03:02:15] <pragma-> The bot is dehilighting his name!
[03:02:17] <phox> pragma-: hahahaha
[03:02:19] <pragma-> Your client is broken!
[03:02:21] * pragma- points at you.
[03:02:31] <phox> pragma-: can you put control codes around it or does his client catch that?
[03:02:55] <phox> I would honestly hope a good client would highlight that but eh
[03:03:13] <pragma-> The bot dehilights all nicks that do not appear at the start of its messages.
[03:03:22] <phox> heh
[03:03:25] <floatcomplex> ,english int
[03:03:25] <candide> floatcomplex: error: useless type name in empty declaration
[03:03:52] <floatcomplex> ,english int candide = 4;
[03:03:53] <candide> floatcomplex: Declare `c​andide` as an i​nt initialized to 4.
[03:03:53] <phox> pragma-: but I mean honestly who IRCs with VWF =/
[03:04:02] <phox> lol including itself
[03:04:28] <pragma-> This is what you should be seeing! https://i.imgur.com/vLivjni.png
[03:04:51] <phox> fancy.  well, irssi doesn't understand that yet.
[03:04:56] <pragma-> smh.
[03:04:58] <phox> probably not itself, probably whatever lib it's using.
[03:05:01] <floatcomplex> phox: i am using irssi
[03:05:04] <pragma-> its the zwsp character!
[03:05:07] <floatcomplex> and it looks like pragma's screenshot
[03:05:07] <phox> it has bigger problems but I have bigger problems than using it.
[03:05:12] <phox> could be my terminal
[03:05:17] <pragma-> it's the terminal, yeah
[03:05:20] <phox> of course then how does ncurses know how to wrap it etc
[03:05:35] <phox> hey at least I got utc-8 working properly across the whole stack so that's a start
[03:05:39] <floatcomplex> pragma-: but tbf it seems random whether the spaces candide inserts in nicks are visible or not
[03:05:42] <floatcomplex> idk if it's consistrnt
[03:05:50] <pragma-> utf-8 you mean?
[03:05:58] <phox> yes, I can type, really
[03:06:13] <pragma-> zwsp is utf8, innit?
[03:06:14] <phox> not like all of the crap around making tmux correctly deal with utc-8 where it breaks on reconnect because you need special flags to do the obvious thing :l  sigh
[03:06:17] <phox> ok back to code
[03:07:09] <pragma-> floatcomplex: yeah there are some cases that bypass the dehilighter
[03:07:18] <pragma-> i really ought to fix those
[03:07:41] <pragma-> some of the plugins use send_message directly 
[03:07:56] <phox> I ought to go defang this code and deploy it, but our TPM is being a TPM today so I don't really feel like it lol
[03:07:58] <pragma-> bypassing pbot's output process
[03:08:16] <pragma-> i need to redirect send_message through the dehilighter someday.
[03:08:18] * pragma- puts it on the todo.
[03:08:31] <phox> "life goals:  build the perfect IRC bot"
[03:08:35] <pragma-> ikr
[03:08:37] <tusko> I feel like I'm in a valley of C.
[03:08:49] <floatcomplex> phox: what does ţ̴̰̹̭̉̓̔͝h̴̬̽̽i̸̧̯͕̺̪̠̾͗̿͆͒͘s̷͕̞͕͐͠ look like
[03:08:49] <pragma-> been tinkering on this thing for 15+ years
[03:09:06] <phox> floatcomplex: valign/etc all correct and it overlaps adjacent lines
[03:09:31] <phox> speaking of valley of C, the heck happened to Z?
[03:09:42] <phox> seems to have been MIA for .... ages now
[03:09:57] <floatcomplex> weird, i have one terminal in which i can see the glitch text but also see the spaces candide adds to nicks, and another in which i can see neither. emojis work in both
[03:10:13] <pragma-> floatcomplex: lol
[03:10:22] <pragma-> floatcomplex: here it is in 3 different terminals: https://i.imgur.com/DJMp0R1.png
[03:10:30] <phox> terminal charset support became such a shitshow once there were non-normal-sized characters
[03:10:59] <pragma-> phox: you mean Zhivago?
[03:11:11] <phox> yessir
[03:11:23] *** Quits: |smlckz| (smlckz@user/smlckz) (Quit: WeeChat 3.2)
[03:11:38] <pragma-> He actually reappeared on this very network a few months ago. He hung around for a few weeks.
[03:11:45] <phox> oh cute
[03:11:56] <phox> yeah last I remember he was on some small % of the time, so makes sense
[03:11:58] <pragma-> Or a very good impersonator.
[03:12:13] <floatcomplex> pragma-: https://imgur.com/a/vghJoOY
[03:12:14] * phox looks at his "proved Zhivago wrong one time" trophy
[03:12:15] <phox> :P
[03:12:25] <pragma-> zalgo comes!
[03:12:29] <floatcomplex> none of your three look like that
[03:12:48] <floatcomplex> but in my other terminal, it just looks like "what does this look like"
[03:14:23] <pragma-> floatcomplex: what terminal/editor is that
[03:14:33] <pragma-> the screenshot you sent me
[03:14:38] *** Quits: Brewster (~Brewster@104.145.226.5) (Ping timeout: 265 seconds)
[03:16:07] <floatcomplex> macos
[03:16:27] <floatcomplex> connected to a screen session running on linux
[03:16:33] <floatcomplex> with -tt and -U
[03:17:02] <pragma-> here, i increased the font of my primary terminal (the bottom one in my screenshot): https://i.imgur.com/4hKT3sK.png
[03:17:34] *** Joins: rgrinberg (~textual@200.5.63.76)
[03:17:38] <pragma-> it doesn't zalgo
[03:17:44] <pragma-> but at least now it's readable :)
[03:18:04] <pragma-> instead of looking like a squashed bug at my normal font size: https://i.imgur.com/54jUd9D.png
[03:18:43] <Bou> mine is closest to floatcomplex's https://usercontent.irccloud-cdn.com/file/oWIVrhKn/this.png
[03:18:59] <pragma-> what client is that?
[03:19:00] <energizer> why does this hang after printing "0" once instead of printing many times? https://bpa.st/KJ7A
[03:19:33] <pragma-> irccloud
[03:19:43] <Bou> yeah just irccloud on Firefox / Windows 10
[03:19:56] <pragma-> Bou: zalgo lurks between lines
[03:19:56] <floatcomplex> lol cloud
[03:20:04] *** Quits: vim_fans (~pi@user/vim-fans/x-3284168) (Ping timeout: 256 seconds)
[03:20:31] *** Quits: mnemonic (~semeion@user/semeion) (Quit: WeeChat 3.3)
[03:20:49] <pragma-> ooh ooh, Bou screenshot this:
[03:20:59] <floatcomplex> it's blank
[03:20:59] <pragma-> ,echo int 
[03:20:59] <candide> i​nt
[03:21:06] <pragma-> that has the space in it right?
[03:21:26] <floatcomplex> it has the space in it on the terminal that fully zalgo's across multiple lines
[03:21:45] <pragma-> what, "i nt"?
[03:21:48] <floatcomplex> yes
[03:21:50] <pragma-> wack
[03:21:52] *** Joins: Brewster (~Brewster@104.145.226.5)
[03:22:00] <pragma-> outrageous
[03:22:06] <pragma-> zalgo works in it but zwsp doesn't?
[03:22:09] <floatcomplex> yeah
[03:22:14] <pragma-> sheer nonsense
[03:23:12] <pragma-> well screw that. they'll just have to eventually fix their terminals.
[03:23:15] *** Quits: Klinda (~superleag@user/klinda) (Quit: Konversation terminated!)
[03:23:16] <floatcomplex> lol
[03:23:18] <pragma-> zwsp is supposed to be invisible.
[03:23:29] <floatcomplex> what if, and hear me out
[03:23:30] *** Joins: justache (~justache@user/justache)
[03:23:35] <pragma-> IT'S ZERO WIDTH!
[03:23:37] <pragma-> NO WIDTH!
[03:23:37] <Bou> no space here, I can detect the zwsp by selecting the text
[03:23:51] <floatcomplex> what if you didn't try to accomodate people who choose to use a c keyword as their nick
[03:23:56] *** Quits: dld (~dld@2601:197:600:1210:4c8f:59ca:20e7:8c51) (Quit: WeeChat 3.0)
[03:24:01] <pragma-> its not just them. it's anybody.
[03:24:07] <pragma-> it doesn't ping and beep people who aren't addressed.
[03:24:10] *** Joins: davidlowryduda (~dld@2601:197:600:1210:4c8f:59ca:20e7:8c51)
[03:24:24] <pragma-> zero width spaces should not be visible.
[03:24:24] *** davidlowryduda is now known as dld
[03:24:28] <pragma-> sorry but not sorry.
[03:24:30] * pragma- stamps foot.
[03:24:55] <floatcomplex> i don't get pung and booped by irc, ever
[03:24:58] <floatcomplex> that sounds horrifying
[03:25:11] <pragma-> but your client's channel text/number turns a different color
[03:25:15] <pragma-> you look into the channel
[03:25:22] <pragma-> "oh its the fucking bot noise again"
[03:25:51] <Bou> pasted it into PowerShell, now it's i?nt lol https://usercontent.irccloud-cdn.com/file/OOcKI92F/i_nt.png
[03:26:28] <pragma-> ,echo int
[03:26:28] <candide> i​nt
[03:26:35] <pragma-> yeah
[03:26:41] <pragma-> it's doing it in windows terminal and windows terminal preview too
[03:26:46] <pragma-> the visible space
[03:26:49] <pragma-> smh
[03:26:53] <pragma-> ffs
[03:26:57] <floatcomplex> bbw
[03:26:59] <floatcomplex> bbq
[03:27:00] * pragma- considers opening an issue
[03:27:14] * pragma- does the 3 screenshot thing
[03:27:21] * pragma- draws red borders again
[03:27:29] * pragma- opens a github issue with windows terminal
[03:27:46] <floatcomplex> the only reasonable takeaway from this conversation is that no number of screenshots is sufficient to fully describe the range of interpretations
[03:27:54] *** Quits: BSaboia (~bsaboia@187.18.140.125) (Quit: This computer has gone to sleep)
[03:28:17] *** Joins: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net)
[03:28:36] <asd> when implementing intcmp() for qsort and what not. is it a bad idea to `return left-right;` or is it safer to `if (left>right) return 1; else (left<right) return -1; return 0;` ? considering overflow issues
[03:29:05] *** Quits: The_Jag (~The_Jag@host-79-13-66-68.retail.telecomitalia.it) (Quit: The_Jag)
[03:29:20] <floatcomplex> asd: i think you know the answer already
[03:29:42] <asd> floatcomplex: im guessing the long series of if statements considering our last convo
[03:29:44] *** Joins: bruda (~bruda@172.58.59.79)
[03:29:53] <asd> but iirc i frequently run into code using return left-right;
[03:29:53] *** Joins: jinsun (~quassel@user/jinsun)
[03:30:02] *** Quits: zopsi_ (zopsi@2600:3c00::f03c:91ff:fe14:551f) (Quit: Oops)
[03:30:03] *** Quits: jinsun (~quassel@user/jinsun) (*.net *.split)
[03:30:03] *** Quits: bruda (~bruda@172.58.59.79) (*.net *.split)
[03:30:03] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (*.net *.split)
[03:30:03] *** Quits: dld (~dld@2601:197:600:1210:4c8f:59ca:20e7:8c51) (*.net *.split)
[03:30:03] *** Quits: cart_man (~rynot@host-78-144-121-71.as13285.net) (*.net *.split)
[03:30:03] *** Quits: ChromaCat248 (~ChromaCat@user/chromacat248) (*.net *.split)
[03:30:03] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-bc7b-beb0-653c-822c.res6.spectrum.com) (*.net *.split)
[03:30:03] *** Quits: makersmasher (~makersmas@2600:6c40:5b00:158d:62a4:4cff:feb5:d54a) (*.net *.split)
[03:30:03] *** Quits: AbleBacon (~AbleBacon@user/AbleBacon) (*.net *.split)
[03:30:03] *** Quits: neunon (~neunon@user/neunon) (*.net *.split)
[03:30:03] *** Quits: voirnox (~voirnox@xor.moe) (*.net *.split)
[03:30:03] *** Quits: mrec (~markus@sundtek.de) (*.net *.split)
[03:30:03] *** Quits: SpringSprocket (~srv@hobby.esselfe.ca) (*.net *.split)
[03:30:03] *** Quits: Teacup_ (~teacup@user/teacup) (*.net *.split)
[03:30:03] *** Quits: phryk (~totallyno@user/phryk) (*.net *.split)
[03:30:03] *** Quits: dexter0 (~dexter0@c-69-181-126-161.hsd1.ca.comcast.net) (*.net *.split)
[03:30:03] *** Quits: kaichiuc1u (~kaichiuch@user/kaichiuchu) (*.net *.split)
[03:30:03] *** Quits: pflanze_ (~pflanze@5-168-208-80-pool.fiber.fcom.ch) (*.net *.split)
[03:30:03] *** Quits: kurahaupo (~kurahaupo@pa49-180-186-164.pa.nsw.optusnet.com.au) (*.net *.split)
[03:30:03] *** Quits: Enitin (~Enitin@82.102.22.84) (*.net *.split)
[03:30:03] *** Quits: nyah (~nyah@94.6.71.219) (*.net *.split)
[03:30:03] *** Quits: AmR (~AmREiSa@156.199.223.24) (*.net *.split)
[03:30:03] *** Quits: nostar (~nostar@2601:406:4100:34d:8f4:5ea7:30b2:b7e6) (*.net *.split)
[03:30:03] *** Quits: zsoltiv_ (~zsoltiv@fibhost-67-12-35.fibernet.hu) (*.net *.split)
[03:30:03] *** Quits: arinov (~arinov@213.194.126.155) (*.net *.split)
[03:30:03] *** Quits: Teckla (~Teckla@user/teckla) (*.net *.split)
[03:30:03] *** Quits: supakeen (~user@python/site-packages/supakeen) (*.net *.split)
[03:30:03] *** Quits: steve_ (~steve@ool-182c2b80.dyn.optonline.net) (*.net *.split)
[03:30:03] *** Quits: masterbuilder (~user@user/masterbuilder) (*.net *.split)
[03:30:03] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (*.net *.split)
[03:30:03] *** Quits: rahl (~rahl@102.114.219.142) (*.net *.split)
[03:30:03] *** Quits: Burgundy (~yomon@79.115.213.171) (*.net *.split)
[03:30:03] *** Quits: Furai (~Furai@cookiehoster.furai.pl) (*.net *.split)
[03:30:03] *** Quits: natechan (~nate@108-233-125-227.lightspeed.sntcca.sbcglobal.net) (*.net *.split)
[03:30:03] *** Quits: Lazenca (~lazenca@user/lazenca) (*.net *.split)
[03:30:03] *** Quits: thickrocks (e46ff6ac16@2604:bf00:561:2000::13d) (*.net *.split)
[03:30:03] *** Quits: rsarson (~rsarson@2607:fea8:29e1:b000::2baf) (*.net *.split)
[03:30:03] *** Quits: m4v (~znc@ubuntu/member/m4v) (*.net *.split)
[03:30:03] *** Quits: smeso (~smeso@user/smeso) (*.net *.split)
[03:30:03] *** Quits: banc (banc@gateway/vpn/airvpn/banc) (*.net *.split)
[03:30:03] *** Quits: FragByte (~christian@user/fragbyte) (*.net *.split)
[03:30:03] *** Quits: TonyStone (~TonyStone@cpe-74-76-51-197.nycap.res.rr.com) (*.net *.split)
[03:30:03] *** Quits: Kit-ten (~NotApplic@2603-6010-a141-6fa3-fb6b-93b0-0580-4e13.res6.spectrum.com) (*.net *.split)
[03:30:03] *** Quits: mcf (~mforney@netbsd/developer/mcf) (*.net *.split)
[03:30:03] *** Quits: glider (~glider@user/glider) (*.net *.split)
[03:30:03] *** Quits: plantman (~plantman@2601:405:4680:1b0::2) (*.net *.split)
[03:30:03] *** Quits: sm2n (ae95cb1267@user/sm2n) (*.net *.split)
[03:30:03] *** Quits: geeknix (~pi@2001:e68:5432:abd2:b9e4:e37d:3d09:4004) (*.net *.split)
[03:30:03] *** Quits: eXeC64 (5ff8a84e19@2604:bf00:561:2000::f9) (*.net *.split)
[03:30:03] *** Quits: zmt00 (~zmt00@user/zmt00) (*.net *.split)
[03:30:03] *** Quits: dooba (35c4732bbc@2604:bf00:561:2000::9d) (*.net *.split)
[03:30:03] *** Quits: aosync (~aws@mx1.aosync.me) (*.net *.split)
[03:30:03] *** Quits: sauce (~sauce@omae.wa.mou.shindei.ru) (*.net *.split)
[03:30:03] *** Quits: soul-d (~uknown@user/soul-d) (*.net *.split)
[03:30:04] *** Quits: dan_berg_pub (2c6463a49d@2604:bf00:561:2000::1c) (*.net *.split)
[03:30:04] *** Quits: fmac (bf93f83905@2604:bf00:561:2000::26) (*.net *.split)
[03:30:04] *** Quits: imm_ (~imm_@user/imm/x-3405860) (*.net *.split)
[03:30:04] *** Quits: davros (~davros@host86-185-99-134.range86-185.btcentralplus.com) (*.net *.split)
[03:30:04] *** Quits: swinnenb (~swinnenb@user/swinnenb) (*.net *.split)
[03:30:04] *** Quits: travankor (travankor@user/travankor) (*.net *.split)
[03:30:04] *** Quits: reset (~reset@user/reset) (*.net *.split)
[03:30:04] *** Quits: DLange (~DLange@about/linux/staff/DLange) (*.net *.split)
[03:30:04] *** Quits: mattgirv (quassel@apps.fossgalaxy.com) (*.net *.split)
[03:30:04] *** Quits: hirish (~hirish@ip85.ip-137-74-20.eu) (*.net *.split)
[03:30:04] *** Quits: user282069 (user@2a01:7e00::f03c:92ff:fe7f:456d) (*.net *.split)
[03:30:04] *** Quits: hpyc9 (~yc9@2600:3c03:e000:297:af:af:af:3) (*.net *.split)
[03:30:04] *** Quits: Xeha (~Xeha@dynamic-82-220-88-142.ftth.solnet.ch) (*.net *.split)
[03:30:11] <phox> rollover bro
[03:30:11] *** Joins: fmac (bf93f83905@2604:bf00:561:2000::26)
[03:30:11] *** Joins: dan_berg_pub (2c6463a49d@2604:bf00:561:2000::1c)
[03:30:19] *** Joins: nyah (~nyah@94.6.71.219)
[03:30:19] *** Joins: mrec (~markus@sundtek.de)
[03:30:23] *** Joins: dooba (35c4732bbc@2604:bf00:561:2000::9d)
[03:30:23] *** Joins: sm2n (ae95cb1267@user/sm2n)
[03:30:24] *** Joins: kaichiuchu (~kaichiuch@144.202.8.127)
[03:30:26] *** Joins: pflanze_ (~pflanze@5-168-208-80-pool.fiber.fcom.ch)
[03:30:26] *** Joins: steve_ (~steve@ool-182c2b80.dyn.optonline.net)
[03:30:28] *** Joins: FragByte (~christian@p579d2134.dip0.t-ipconnect.de)
[03:30:29] *** Joins: cart_man (~rynot@host-78-144-121-71.as13285.net)
[03:30:32] *** Quits: kaichiuchu (~kaichiuch@144.202.8.127) (Changing host)
[03:30:32] *** Joins: kaichiuchu (~kaichiuch@user/kaichiuchu)
[03:30:33] *** Joins: davros (~davros@host86-185-99-134.range86-185.btcentralplus.com)
[03:30:36] *** Joins: Furai (~Furai@cookiehoster.furai.pl)
[03:30:39] *** Quits: FragByte (~christian@p579d2134.dip0.t-ipconnect.de) (Changing host)
[03:30:39] *** Joins: FragByte (~christian@user/fragbyte)
[03:30:40] *** Joins: dld (~dld@2601:197:600:1210:4c8f:59ca:20e7:8c51)
[03:30:40] <floatcomplex> asd: return left < right ? -1 : 1
[03:30:43] *** Joins: hpyc9 (~yc9@2600:3c03:e000:297:af:af:af:3)
[03:30:46] *** Joins: plantman (~plantman@2601:405:4680:1b0::2)
[03:30:46] <floatcomplex> or if you want to be complete
[03:30:47] *** Joins: Teacup (~teacup@user/teacup)
[03:30:53] *** Joins: dexter0 (~dexter0@c-69-181-126-161.hsd1.ca.comcast.net)
[03:30:53] *** Quits: Colt (~Colt@user/colt) (Remote host closed the connection)
[03:30:55] <floatcomplex> asd: return left < right ? -1 : left > right ? 1 : 0
[03:30:55] *** Joins: smeso (~smeso@user/smeso)
[03:30:56] *** Joins: Burgundy (~yomon@79.115.213.171)
[03:30:56] *** Joins: mattgirv (quassel@apps.fossgalaxy.com)
[03:30:59] *** Joins: soul-d (~uknown@2a02-a456-85ad-1-5d07-c234-d305-6bc2.fixed6.kpn.net)
[03:31:01] *** Joins: zopsi (~zopsi@irc.dir.ac)
[03:31:12] *** Joins: geeknix (~pi@180.74.190.212)
[03:31:18] *** Joins: natechan (~nate@108-233-125-227.lightspeed.sntcca.sbcglobal.net)
[03:31:22] *** Quits: soul-d (~uknown@2a02-a456-85ad-1-5d07-c234-d305-6bc2.fixed6.kpn.net) (Changing host)
[03:31:22] *** Joins: soul-d (~uknown@user/soul-d)
[03:31:24] <asd> alright thanks
[03:31:34] *** Joins: user282069 (user@2a01:7e00::f03c:92ff:fe7f:456d)
[03:31:54] *** Joins: m4v (~znc@ubuntu/member/m4v)
[03:31:54] *** Joins: aosync (~aws@mx1.aosync.me)
[03:32:02] *** Joins: neunon (~neunon@user/neunon)
[03:32:05] *** Joins: Lazenca (Lazenca@user/lazenca)
[03:32:14] *** Joins: zsoltiv_ (~zsoltiv@fibhost-67-12-35.fibernet.hu)
[03:32:14] *** Joins: Colt (~Colt@user/colt)
[03:32:15] *** Joins: DLange (~DLange@about/linux/staff/DLange)
[03:32:15] *** Joins: hirish (~hirish@ip85.ip-137-74-20.eu)
[03:32:18] *** Joins: jinsun (~quassel@user/jinsun)
[03:32:18] *** Joins: voirnox (~voirnox@xor.moe)
[03:32:21] *** Joins: thickrocks (e46ff6ac16@2604:bf00:561:2000::13d)
[03:32:23] *** Joins: eXeC64 (5ff8a84e19@2604:bf00:561:2000::f9)
[03:32:23] *** Joins: supakeen (~user@python/site-packages/supakeen)
[03:32:24] *** Joins: mcf (~mforney@netbsd/developer/mcf)
[03:32:26] *** Joins: banc (banc@gateway/vpn/airvpn/banc)
[03:32:27] *** Joins: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net)
[03:32:33] *** Joins: nostar (~nostar@2601:406:4100:34d:8f4:5ea7:30b2:b7e6)
[03:32:35] *** Joins: phryk (~totallyno@user/phryk)
[03:32:40] *** Joins: Xeha (~Xeha@dynamic-82-220-88-142.ftth.solnet.ch)
[03:32:41] *** Joins: swinnenb (~swinnenb@user/swinnenb)
[03:32:47] *** Joins: rsarson (~rsarson@2607:fea8:29e1:b000::2baf)
[03:32:50] *** Joins: kurahaupo (~kurahaupo@pa49-180-186-164.pa.nsw.optusnet.com.au)
[03:33:00] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Remote host closed the connection)
[03:33:12] *** Joins: sauce (~sauce@omae.wa.mou.shindei.ru)
[03:33:14] *** Joins: arinov (~arinov@213.194.126.155)
[03:33:29] *** Joins: AmR (~AmREiSa@156.199.223.24)
[03:33:33] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[03:33:58] <floatcomplex> tbh i really don't know if returning 0 when things compare equal gives you any guarantees at all when used with qsort
[03:34:15] *** Joins: glider (~glider@user/glider)
[03:34:44] *** Joins: bruda (~bruda@172.58.59.79)
[03:35:20] *** Joins: Teckla (~Teckla@user/teckla)
[03:35:22] *** Joins: imm_ (~imm_@user/imm/x-3405860)
[03:35:25] *** Joins: rahl (~rahl@102.114.219.142)
[03:35:54] <asd> with qsort no, but qsort_r iirc or w/e it does 
[03:36:06] <pragma-> https://github.com/microsoft/terminal/issues/11850 should do it.
[03:36:08] <candide> Title of pragma-'s link: Zero width space characters should not show up as visible spaces · Issue #11850 · microsoft/terminal · GitHub
[03:37:00] *** Joins: ARoxdale (~ARoxdale@84.203.26.40)
[03:37:10] * pragma- heartily recommends anybody seeing spaces to open similar issues with their terminal developers.
[03:37:52] *** Quits: kurahaupo (~kurahaupo@pa49-180-186-164.pa.nsw.optusnet.com.au) (Quit: Quit)
[03:38:15] <pragma-> Is it a terminal issue or a font issue?
[03:38:18] *** Joins: kurahaupo (~kurahaupo@pa49-180-186-164.pa.nsw.optusnet.com.au)
[03:38:19] * pragma- squints.
[03:38:23] * pragma- sweats.
[03:38:29] <Bou> energizer: it does print 0-999 for me, but I'm on Windows atm
[03:38:31] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[03:38:32] *** Quits: sheb (~sheb@31.223.228.71) (Ping timeout: 240 seconds)
[03:38:33] *** Quits: bruda (~bruda@172.58.59.79) (Client Quit)
[03:38:44] *** Joins: TonyStone (~TonyStone@2603-7080-8607-c36a-9cdb-69bc-753b-1e50.res6.spectrum.com)
[03:38:56] *** Joins: bruda (~bruda@172.58.59.79)
[03:38:58] <pragma-> Bou: irccloud/firefox has no visible space, right?
[03:38:59] <floatcomplex> pragma-: did you inadvertently reveal via a bug report that you are using a weird bird fetish font
[03:39:25] <Bou> i'mprettysureitdoesotherwiseeverythingwouldlooklikethis
[03:39:34] <pragma-> i mean for the zwsp character!
[03:39:44] <Bou> oh, no, that one was invisible
[03:39:46] * pragma- nods.
[03:39:50] <pragma-> on linux?
[03:40:16] <Bou> neither
[03:40:44] <pragma-> excellent
[03:41:18] <fizzie> phox: No, the thing with empty parentheses is not a C11 change. It was the same back all the way to C89. C89 draft: "An empty list in a function declarator that is part of a function definition specifies that the function has no parameters. The empty list in a function declarator that is not part of a function definition specifies that no information about the number or types of the parameters is
[03:41:20] <fizzie> supplied."
[03:41:32] <fizzie> (But as was mentioned, the distinction *is* pretty subtle.)
[03:43:12] *** Quits: DarthGandalf (user@znc/developer/DarthGandalf) (Remote host closed the connection)
[03:43:49] <pragma-> I expected to need to provide a `void f();` prototype before `void f() {}` for gcc and clang both to treat the function as unspecified. Just `void f() {} f(42, "a very important string");` without the prototype should have errored with "expected 0 arguments", que no?
[03:43:49] <fizzie> The current C23 draft changes it a little, in that it makes `()` actually equivalent to `(void)` for the definition, but still maintains the same definition/non-definition difference.
[03:43:57] *** Quits: bruda (~bruda@172.58.59.79) (Quit: leaving)
[03:44:06] *** Quits: dutch (~DutchIngr@user/dutch) (Quit: WeeChat 3.3)
[03:45:00] <pragma-> clang warns, gcc doesn't, both happily accept the code. they only error if there's an explicit void.
[03:45:11] <fizzie> Well, "should have" yes, in terms of what would make sense (you have a definition that specifies it takes no parameters), but it's not *required* to produce a diagnostic (the declarator has no prototype).
[03:45:37] <fizzie> From C23 onwards it would require a diagnostic.
[03:45:48] <pragma-> progress
[03:45:58] <fizzie> ,cc -std=c2x -pedantic void f() {} f(42, "a very important string");
[03:45:59] <candide> fizzie: error: too many arguments to function 'f'  note: declared here
[03:46:01] * pragma- stares at the people still clinging to C89.
[03:46:43] <pragma-> that's an error, not a warning
[03:46:53] <pragma-> clang merely warns
[03:47:05] <pragma-> (for c11)
[03:47:08] *** Joins: random-nick (~random-ni@87.116.180.220)
[03:47:13] <fizzie> N2731 6.7.6.3p13 for reference: "For a function declarator without a parameter type list: if it is part of the definition of that function the function has no parameters and the effect is as if it were declared with a parameter type list consisting of the keyword `void`; otherwise it specifies that no information about the number or types of the parameters is supplied."
[03:47:48] <pragma-> omitting -pedantic produces the same result
[03:47:49] *** Joins: dutch (~DutchIngr@user/dutch)
[03:48:35] <pragma-> clang is still only a warning even with -std=c2x
[03:49:23] *** Joins: chenqisu12 (~03cia7d@183.217.200.156)
[03:50:10] *** Quits: chenqisu12 (~03cia7d@183.217.200.156) (Client Quit)
[03:50:24] *** Joins: chenqisu12 (~03cia7d@183.217.200.156)
[03:50:33] *** Joins: SpringSprocket (~srv@hobby.esselfe.ca)
[03:52:44] *** Joins: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net)
[03:52:59] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[03:53:23] *** Joins: anon16_ (~anon16_@user/anon16)
[03:56:12] *** Joins: DarthGandalf (user@znc/developer/DarthGandalf)
[03:58:20] <zwr> nice, I hope they're more agressive with removing obsolescent features in the future. like the div_t, ldiv_t, lldiv_t and so on types, and their associated functions
[03:58:32] *** Quits: Wulf (~Wulf@user/wulf) (Ping timeout: 252 seconds)
[03:58:35] <pragma-> They actually removed K&R function initializer lists.
[03:58:47] <pragma-> I'm still in shock.
[03:59:37] <phox> floatcomplex: sorry had $job to deal with, if you're curious https://www.dropbox.com/s/nqfgm9jden86lso/Screen%20Shot%202021-11-30%20at%203.42.40%20PM.png?dl=0
[04:00:00] *** Joins: Wulf (~Wulf@user/wulf)
[04:00:31] <phox> pragma-: I mean I suppose you can have a rolling deprecation window that assumes people who learned to do things one way should be retired by now
[04:00:34] <phox> :P
[04:00:37] <phox> this works
[04:01:39] <zwr> I think keeping older things that have been done better in newer standards around just means a new generation learns to use the bad old stuff
[04:02:21] <zwr> I removed a getopt implementation from an active project a few months ago, someone pasted in the source code of GNU getopt from a late 90s copy, with K&R function declarations and all
[04:02:24] *** Joins: Kit-ten (~NotApplic@2603-6010-a141-6fa3-b1d8-76bd-778e-3165.res6.spectrum.com)
[04:02:41] <floatcomplex> lol
[04:03:12] <floatcomplex> duff's device still turns up in pros
[04:03:13] <floatcomplex> prod
[04:03:30] *** justache is now known as totallynotjustac
[04:03:39] <Kit-ten> hmm
[04:03:43] <Kit-ten> sussy
[04:04:00] <Kit-ten> i wonder if theyre justache
[04:04:10] *** totallynotjustac is now known as justache
[04:04:21] <Kit-ten> oh i guess they werent
[04:04:25] <Kit-ten> false alarm
[04:07:49] <justache> ;P
[04:09:01] *** Quits: cart_man (~rynot@host-78-144-121-71.as13285.net) (Quit: Konversation terminated!)
[04:09:03] <kurahaupo> phox: Hey I started learning K&R v1 C, including the old =+ operators, and I'm still coding, still learning. The time to retire is when learning is too hard - which for some people is when the leave school. The rest of us can be productive for decades.
[04:09:15] <phox> zwr: this is why good implementations warn you on valid but crufty code
[04:09:32] <phox> kurahaupo: :P
[04:09:38] <phox> s/some/most/ IMX
[04:09:46] <Bou> does having a `div_t` around really hurt anyone?
[04:10:30] <Bou> it becomes a bit of a namespace pollution, and the symbol takes up, idk, 20 bytes in your libc
[04:10:49] <phox> please, think of the libc
[04:11:17] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[04:11:18] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[04:11:18] *** Joins: wroathe (~wroathe@user/wroathe)
[04:11:19] <phox> "this one time I reached inside a crt and touched something and everything went black for a few minutes"  #cjokes
[04:11:23] <kurahaupo> I like the idea of writing (dividend, remainder) = numerator /% divisor;
[04:11:55] <zwr> well I started programming C about a year and a few months ago and I ran into it and I thought I was supposed to use it, so yes
[04:12:30] <kurahaupo> (That's not yet a thing in C, btw; just my wish list)
[04:12:43] <phox> kurahaupo: and here I am trying to get Python to support a variant of filter (more-itertools.partition) that I can unpack like that
[04:12:51] <phox> some dreams are obviously beyond grasp :)
[04:17:14] *** Joins: Drin (~Geezabisc@user/geezabiscuit)
[04:19:31] *** Quits: Burgundy (~yomon@79.115.213.171) (Ping timeout: 256 seconds)
[04:22:54] <kurahaupo> floatcomplex: apropos your testing of -fsanitize on signed integer overflow, I believe the newest standard requires 2's complement as the storage representation (or something functionality equivalent), so it's not surprising that the compiler regards the overflow behaviour as "defined to be 2's complement" 
[04:26:11] <floatcomplex> nope
[04:26:14] <floatcomplex> it's still UB
[04:26:38] <floatcomplex> and good thing, because that's a requirement for operations on signed integers to be considered monotonic
[04:26:45] <floatcomplex> the unsigned integers are not monotonic
[04:27:04] <floatcomplex> merely knowing the representation is not sufficient
[04:27:10] *** justache is now known as zoite
[04:28:05] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.3)
[04:28:18] <floatcomplex> iirc zig gets around this by defining integer wraparound to be a property of the operation rather than the operand type
[04:28:43] <floatcomplex> but does not eliminate the concept of UB
[04:29:11] *** zoite is now known as z0ite
[04:29:18] *** Quits: highrate (~presonic@111-22-237-24.gci.net) (Remote host closed the connection)
[04:29:38] <floatcomplex> it merely makes it easier to apply a big hammer to signed integer wraparound if you're not interested in the other properties
[04:29:39] *** Joins: highrate (~presonic@111-22-237-24.gci.net)
[04:30:16] *** Quits: Libero (~Libero@130.43.23.56.dsl.dyn.forthnet.gr) (Read error: Connection reset by peer)
[04:30:26] *** Quits: slidercrank (~slidercra@user/slidercrank) (Ping timeout: 252 seconds)
[04:33:50] *** Joins: ferdna (~ferdna@user/ferdna)
[04:34:54] <rcf> The problem with such a justification is that UB ruins the entire program; a specific monotonic type would allow the optimization while yielding predictable behavior (if a bit slower) should someone not use it. 
[04:35:21] *** Quits: lionkor (~lionkor@beammp/staff/lionkor) (Ping timeout: 245 seconds)
[04:35:26] *** Quits: scalablecory (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net) (Ping timeout: 256 seconds)
[04:36:19] *** Quits: soul-d (~uknown@user/soul-d) (Read error: Connection reset by peer)
[04:38:14] <rcf> Which is better than applying semantics that can't be justified (monotonicity with fixed-width integers) to arbitrary types because muh speed 
[04:38:58] <phox> C is syntactic sugar for your assembler, QED
[04:39:14] <rcf> It is not, by any means. 
[04:39:29] *** Joins: joedoe47 (~weechat@c-98-254-188-143.hsd1.fl.comcast.net)
[04:44:15] <phox> rcf: I have an e-mail from dmr, neener
[04:45:50] *** Quits: alch (~alch@151.68.36.172) (Ping timeout: 252 seconds)
[04:46:12] <floatcomplex> rcf: any runtime invocation of UB is a bug that can be fixed
[04:46:47] <phox> floatcomplex: incompleteness theorem says there are things you cannot write without UB
[04:46:50] <phox> lol
[04:46:55] <floatcomplex> it is always possible to pre-sanitize the inputs to an operation that can invoke UB, such that the UB cannot be encountered
[04:46:57] *** Quits: joedoe47 (~weechat@c-98-254-188-143.hsd1.fl.comcast.net) (Quit: Leaving)
[04:47:12] <floatcomplex> it is almost always possible to coalesce such checks well upstream of the operation, such that they have almost no runtime cost
[04:47:19] <floatcomplex> the compiler cannot be depended upon to do this
[04:47:20] <phox> the inputs can be sufficiently complex
[04:47:22] *** Joins: joedoe47 (~weechat@c-98-254-188-143.hsd1.fl.comcast.net)
[04:47:32] *** Joins: alch (~alch@151.68.59.223)
[04:47:51] *** Quits: kexec (~kexec@user/kexec) (Quit: Client closed)
[04:48:48] *** Joins: vim_fans (~pi@user/vim-fans/x-3284168)
[04:49:48] *** Quits: DarthGandalf (user@znc/developer/DarthGandalf) (Remote host closed the connection)
[04:50:04] *** Joins: DarthGandalf (user@znc/developer/DarthGandalf)
[04:53:26] <kurahaupo> floatcomplex: pre sanitizing is possible (though potentially expensive) when dealing with numeric calculations. However that's not true of UB generally, especially where object lifetimes are the crux point
[04:54:15] *** Quits: joedoe47 (~weechat@c-98-254-188-143.hsd1.fl.comcast.net) (Quit: Leaving)
[04:54:30] <kurahaupo> And all it really means is "this implementation adds definitions for these things that the standard does not define"
[04:55:09] *** Joins: BSaboia (~bsaboia@201-29-126-99.user3p.veloxzone.com.br)
[04:57:23] *** Quits: u0_a391 (~u0_a391@2603-6010-a141-6fa3-c4fd-876a-2db9-8bd1.res6.spectrum.com) (Read error: No route to host)
[04:59:47] *** Joins: nicholaus04 (~nicholaus@172.58.17.115)
[05:00:02] *** Joins: u0_a391 (~u0_a391@2603-6010-a141-6fa3-c4fd-876a-2db9-8bd1.res6.spectrum.com)
[05:01:23] *** Joins: Zambyte (~Zambyte@cpe-104-228-60-14.nycap.res.rr.com)
[05:01:30] <floatcomplex> no, you're thinking of implementation-defined or unspecified
[05:02:46] *** Joins: vim_fans_ (~pi@user/vim-fans/x-3284168)
[05:03:59] *** Quits: random-nick (~random-ni@87.116.180.220) (Ping timeout: 252 seconds)
[05:05:28] *** Quits: vim_fans (~pi@user/vim-fans/x-3284168) (Ping timeout: 256 seconds)
[05:06:34] *** Quits: Atque (~Atque@user/atque) (Remote host closed the connection)
[05:08:18] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[05:09:34] *** Joins: freakazoid343 (~matt@2603:9000:cf0f:80e3:ca4:2f26:b042:b2f1)
[05:16:51] *** Quits: BSaboia (~bsaboia@201-29-126-99.user3p.veloxzone.com.br) (Quit: This computer has gone to sleep)
[05:17:48] *** Joins: BSaboia (~bsaboia@201-29-126-99.user3p.veloxzone.com.br)
[05:18:10] *** Joins: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[05:18:33] <rcf> UB can be defined and then mandated by implementations if they really want to, see dlsym
[05:19:23] <Kit-ten> what is the dumbest UB in C
[05:19:25] <Kit-ten> like
[05:19:34] <Kit-ten> what is UB when it really shouldnt be
[05:19:36] <rcf> phox: whatever he wanted it to be, dead men can’t speak of what currently is.
[05:20:41] *** Quits: Macuser (~Macuser@216.30.159.201) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[05:21:45] *** Quits: vim_fans_ (~pi@user/vim-fans/x-3284168) (Read error: Connection reset by peer)
[05:23:05] *** Joins: LaptopZombie (~LaptopZom@2001:1970:4884:2700::b9d6)
[05:23:51] <oldlaptop> unstandardized C as it existed on early unix is a different thing from ANSI/ISO C
[05:24:07] <rcf> Kit-ten: unmatched “ and ‘ by far.
[05:24:39] *** u0_a391 is now known as Ki6
[05:24:41] *** Ki6 is now known as Kit
[05:24:54] <Kit> wait, thats UB?
[05:24:57] <Kit> wha
[05:25:02] <rcf> Yes.
[05:25:45] <Kit> w0t
[05:26:03] <oldlaptop> floatcomplex: Would you call the behavior of gcc -ftrapv or -fwrapv something other than gcc "adding [a definition] for [this thing] that the standard does not define"?
[05:27:33] <fizzie> The triad, from the glossary: undefined - the standard imposes no requirements; unspecified - the standard provides two or more possibilities, but does not specify how to choose, and the implementation need not either; implementation-defined - exactly the same as unspecified, except the implementation is required to document how it chooses what to do.
[05:28:16] <fizzie> And the rationale expands on that, too: https://0x0.st/-hZR.txt
[05:28:26] <rcf> ,c11 6.4p3
[05:28:27] <candide> http://www.iso-9899.info/n1570.html#6.4p3 [Lexical elements] A token is the minimal lexical element of the language in translation phases 7 and 8. The categories of tokens are: keywords, identifiers, constants, string literals, and punctuators. A preprocessing token is the minimal lexical element of the language in translation phases 3 through 6. The categories of preprocessing tokens are: header names, i... <truncated; https://0x0.st/-hZ7.txt>
[05:28:40] <rcf> Kit: ^
[05:28:54] <oldlaptop> it's not as though the implementation is required to make demons come out your nose: it can make it wrap around instead, and document that, if it wants
[05:29:07] <Kit> TIL
[05:29:53] <fizzie> Along the same lines, if a nonempty source file does not end in a new-line character, that's undefined too.
[05:30:01] <oldlaptop> rcf: Is any rationale for that decision known?
[05:30:04] <rcf> It is so unbelievably dumb that no combination of drugs or sleep deprivation or both have ever convinced me it makes even the slightest bit of sense.
[05:30:41] <rcf> oldlaptop: my assumption is that it made processing more straightforward on ancient hardware too anemic to run a visual editor even 
[05:30:49] *** Quits: BSaboia (~bsaboia@201-29-126-99.user3p.veloxzone.com.br) (Quit: This computer has gone to sleep)
[05:30:55] <oldlaptop> :(
[05:32:09] *** Quits: superdupond (~Kev@2a01cb0400149f004945d532820e8dbd.ipv6.abo.wanadoo.fr) (Ping timeout: 268 seconds)
[05:37:41] *** Joins: penguino (~mrpenguin@user/mrpenguin)
[05:38:05] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 252 seconds)
[05:39:01] *** Joins: BSaboia (~bsaboia@201-29-126-99.user3p.veloxzone.com.br)
[05:40:12] *** Quits: BSaboia (~bsaboia@201-29-126-99.user3p.veloxzone.com.br) (Max SendQ exceeded)
[05:40:16] *** Joins: pilyn (~pilyn@user/pilyn)
[05:41:16] *** Joins: BSaboia (~bsaboia@201-29-126-99.user3p.veloxzone.com.br)
[05:41:53] *** Joins: sheb (~sheb@31.223.228.71)
[05:41:59] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.3)
[05:44:04] *** Quits: sheb (~sheb@31.223.228.71) (Remote host closed the connection)
[05:44:14] *** Quits: superboot (~agentgasm@user/superboot) (Quit: leaving)
[05:44:20] *** Joins: sheb (~sheb@31.223.228.71)
[05:46:07] <fizzie> For the "silly undefined things" list, I'd like to propose the explicit list of allowed contexts for the `setjmp` function.
[05:46:18] <fizzie> Maybe it gets a pass for being so special-purpose. But it's still a bit wonky that `if (setjmp(...) == 0) ...` is defined but `if (setjmp(...) + 1 == 1) ...` is not.
[05:47:24] <Kit> wha
[05:47:35] <fizzie> Or that `if (!setjmp(...))` is defined but `if (!!setjmp(...))` is not.
[05:47:52] <fizzie> ,c11 7.13.1.1p4
[05:47:54] <candide> http://www.iso-9899.info/n1570.html#7.13.1.1p4 [The setjmp macro] An invocation of the setjmp macro shall appear only in one of the following contexts: -- the entire controlling expression of a selection or iteration statement; -- one operand of a relational or equality operator with the other operand an integer constant expression, with the resulting expression being the entire controlling expression of ... <truncated; https://0x0.st/-hNz.txt>
[05:48:00] <Kit> and the standard explicitly says thats ub
[05:48:16] <Kit> ????
[05:48:20] <Kit> wow
[05:48:22] <fizzie> Yes. (p5: "If the invocation appears in any other context, the behavior is undefined.")
[05:50:48] *** Quits: steve_ (~steve@ool-182c2b80.dyn.optonline.net) (Ping timeout: 256 seconds)
[05:52:09] *** Quits: LaptopZombie (~LaptopZom@2001:1970:4884:2700::b9d6) (Remote host closed the connection)
[05:52:38] *** Joins: LaptopZombie (~LaptopZom@2001:1970:4884:2700::b9d6)
[05:53:21] *** Joins: simon323 (~simon323@2409:8a34:468:83d0:793b:4721:5b34:60ac)
[05:55:17] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[05:55:17] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[05:55:17] *** Joins: wroathe (~wroathe@user/wroathe)
[05:55:39] *** Quits: BSaboia (~bsaboia@201-29-126-99.user3p.veloxzone.com.br) (Quit: This computer has gone to sleep)
[05:56:41] *** Joins: pnbeast (~pnbeast@2601:140:4200:b500::1)
[05:58:51] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[05:59:43] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 252 seconds)
[05:59:46] *** Joins: BSaboia (~bsaboia@201-29-126-99.user3p.veloxzone.com.br)
[06:00:59] *** Quits: BSaboia (~bsaboia@201-29-126-99.user3p.veloxzone.com.br) (Max SendQ exceeded)
[06:01:03] *** Joins: Macuser (~Macuser@216.30.159.201)
[06:01:25] *** Joins: CygniX_ (~CygniX@2a01:8740:1:727:4e:80:7f:2d)
[06:01:28] *** Joins: BSaboia (~bsaboia@201-29-126-99.user3p.veloxzone.com.br)
[06:01:38] *** Quits: BSaboia (~bsaboia@201-29-126-99.user3p.veloxzone.com.br) (Client Quit)
[06:03:06] *** Joins: tom5760 (73d4025b14@user/tom5760)
[06:03:08] *** Joins: Retr0id2 (~Retr0id@user/retr0id)
[06:03:29] *** Quits: Retr0id (~Retr0id@user/retr0id) (Read error: Connection reset by peer)
[06:03:30] *** Retr0id2 is now known as Retr0id
[06:05:48] *** Quits: highrate (~presonic@111-22-237-24.gci.net) (Remote host closed the connection)
[06:06:10] *** Joins: highrate (~presonic@111-22-237-24.gci.net)
[06:09:01] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[06:09:01] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[06:09:01] *** Joins: wroathe (~wroathe@user/wroathe)
[06:09:39] *** Joins: |smlckz| (smlckz@user/smlckz)
[06:10:43] *** Quits: CygniX_ (~CygniX@2a01:8740:1:727:4e:80:7f:2d) (Quit: ZNC 1.8.2+deb2+b1 - https://znc.in)
[06:11:10] *** Joins: CygniX_ (~CygniX@2a01:8740:1:727:4e:80:7f:2d)
[06:12:01] *** Joins: frost (~frost@user/frost)
[06:15:04] *** Quits: CygniX_ (~CygniX@2a01:8740:1:727:4e:80:7f:2d) (Client Quit)
[06:15:19] *** Quits: CygniX (~CygniX@2605:6400:30:fdc6:68:f4:4e:78) (Remote host closed the connection)
[06:17:59] *** Joins: CygniX (~CygniX@2a01:8740:1:727:4e:80:7f:2d)
[06:19:31] *** Parts: CygniX (~CygniX@2a01:8740:1:727:4e:80:7f:2d) ()
[06:23:54] *** Joins: CygniX (~CygniX@2a01:8740:1:727:4e:80:7f:2d)
[06:29:53] *** Parts: CygniX (~CygniX@2a01:8740:1:727:4e:80:7f:2d) (Konversation terminated!)
[06:30:01] *** Quits: smeso (~smeso@user/smeso) (Quit: smeso)
[06:30:03] *** Quits: llh (~llh@user/llh) (Quit: :::: ( UPP ) ::::)
[06:32:44] *** Quits: banc (banc@gateway/vpn/airvpn/banc) (Ping timeout: 256 seconds)
[06:33:56] *** Joins: llh (~llh@user/llh)
[06:35:21] *** Joins: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net)
[06:36:29] *** Joins: scalablecory (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net)
[06:36:38] *** Joins: kitsunenokenja (~kitsunech@68.91.220.96)
[06:36:56] *** Joins: CygniX (~CygniX@2a01:8740:1:727:4e:80:7f:2d)
[06:40:03] *** Quits: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net) (Ping timeout: 256 seconds)
[06:40:37] *** Quits: earnest (~earnest@user/earnestly) (Ping timeout: 256 seconds)
[06:44:55] *** Joins: smeso (~smeso@user/smeso)
[06:45:23] *** Quits: Macuser (~Macuser@216.30.159.201) (Quit: Textual IRC Client: www.textualapp.com)
[06:46:40] *** Quits: LaptopZombie (~LaptopZom@2001:1970:4884:2700::b9d6) (Quit: Konversation terminated!)
[06:49:56] *** Quits: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net) (Quit: Textual IRC Client: www.textualapp.com)
[06:50:59] *** Joins: dave0 (~davezero@069.d.003.ncl.iprimus.net.au)
[06:52:53] *** Quits: ARoxdale (~ARoxdale@84.203.26.40) (Ping timeout: 252 seconds)
[06:54:01] *** Joins: banc (banc@gateway/vpn/airvpn/banc)
[06:54:21] *** Joins: PortableDave (~portabled@14-201-65-57.static.tpgi.com.au)
[06:58:52] *** Joins: last1 (last1@modemcable039.93-160-184.mc.videotron.ca)
[07:00:39] <phox> rcf: ... yet they often do.
[07:00:51] *** Quits: vin (~vin@user/crash) (Quit: WeeChat 2.8)
[07:01:08] *** Joins: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net)
[07:01:53] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Remote host closed the connection)
[07:02:53] <last1> I am trying to debug a random bug I most likely introduced in a log function for my program, I compiled using -g and generated a core dump file
[07:03:15] <phox> so it's crashing
[07:03:53] <phox> CDA is... often more difficult than just spotting the bug, but...
[07:04:00] <last1> https://pastebin.com/nTM4EBAC
[07:04:06] <last1> this is my log.c program and the gdb bt
[07:04:20] <dave0> i was expecting you to paste the core file :-p
[07:04:50] <last1> I can't figure out why it says line 25 ? l_printf is not on that line and the crashes are random, can't make sense of what's happening
[07:05:44] <last1> dave0: not yet :)
[07:05:46] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: ZzzZ)
[07:05:59] *** Quits: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net) (Remote host closed the connection)
[07:06:15] *** Joins: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net)
[07:06:41] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[07:06:54] <phox> unrelated PSA but use strtol, atoi doesn't handle errors properly
[07:07:02] <dave0> last1: check the result of fopen
[07:07:47] <last1> I didn't bother to check, thought it can't really go wrong..maybe it does ?
[07:08:13] <dave0> last1: fptr=fopen(log_file,"a"); if(fptr == NULL) { perror("open error"); } else { fprintf(fptr, "%s", b); if(fclose(fptr) != 0) perror("close error"); }
[07:08:22] <phox> so notably you're not checking the return value of fopen
[07:08:48] <last1> it's true, I added this in there temporarily, didn't write all those cases. I'll add them in now
[07:08:58] <phox> or idiomatically if (!(fptr = fopen(log_file,"a"))) {
[07:09:08] *** Joins: vmcs (~vmcs@194.135.154.137)
[07:09:24] <last1> you think that's what's causing the core dump ?
[07:09:45] <dave0> i'd bet on it
[07:09:48] <last1> I mean, I imagine fprintf calls fputs behind the scenes
[07:10:09] <phox> so the symbols are dropping the include lines, so -11 lines, thus your function on line 36 seems to be on 25 in the stack trace (fwiw)
[07:10:20] <phox> last1: or is just a macro, nothing says it can't be lol
[07:10:20] <dave0> yep it might have compiled  printf(.., "%s", ..)  to fputs
[07:10:51] <phox> actually more likely a compiler optimization to go "oh you're using "%s" so that's fputs
[07:10:54] <phox> but faster.
[07:10:58] <dave0> anyways it's always a good idea to check fopen
[07:11:19] <phox> if you get really bored, print the args before you call the thing to stderr or something
[07:11:28] <phox> welcome to printf debugging, the best of us use it <3
[07:11:33] <last1> :)
[07:11:47] <last1> really weird, this program does run in parallel I wonder if there's an fopen collision on the same filename.pid
[07:11:54] <last1> maybe I need to generate a more unique filename too
[07:12:02] <last1> right now it's just getpid
[07:12:26] <phox> well regardless of why, check what's going on, and yeah as above perror
[07:15:27] <dave0> did that fix it?
[07:15:53] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[07:15:53] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[07:15:53] *** Joins: wroathe (~wroathe@user/wroathe)
[07:15:59] <last1> I want to fix the potential file name collision too
[07:16:09] <dave0> one thing at a time
[07:16:21] <last1> ok, let me see then
[07:16:32] *** Quits: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br) (Ping timeout: 252 seconds)
[07:17:02] <dave0> just put in    if(fptr == NULL) perror("open error");   it's not much typing, and even though it'll probably still crash you'll know if it was fopen
[07:18:58] <last1> I added this:    if(fp == NULL)   {        return;   }
[07:19:02] <last1> err, fptr
[07:19:58] <last1> I'd rather not log in case it can't open the file, this program is called from another program so nobody would see the perror anyawys
[07:20:31] <dave0> you're debugging it
[07:21:13] <dave0> test your changes
[07:21:33] <last1> ok, it went live, let's see if it happens again, it might take 10-15 minutes
[07:23:18] <last1> so if two instances of my program run at the same time and they try to open a file for append, it could cause this crash ?
[07:24:13] <dave0> we don't know what made it crash
[07:24:30] <dave0> write some code to test that function
[07:25:49] <dave0> is there a file in   /var/log/remote/
[07:25:55] <dave0> does /var/log/remote/ even exist?
[07:26:17] <dave0> did you write this code?
[07:27:50] <last1> oh yes, plenty of files get generated
[07:27:56] <last1> everything is fine so far
[07:27:58] <last1> no crash
[07:28:37] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[07:28:42] *** Quits: Thymo (~Thymo@NASSP/developer/Thymo) (Ping timeout: 268 seconds)
[07:28:46] <last1> ls -la | wc -l      53
[07:30:10] *** Joins: Thymo (~Thymo@NASSP/developer/Thymo)
[07:30:29] *** Quits: bliminse (~bliminse@host86-188-36-178.range86-188.btcentralplus.com) (Ping timeout: 256 seconds)
[07:30:52] *** Joins: katnis (uid15849@id-15849.helmsley.irccloud.com)
[07:31:57] *** Quits: Thymo (~Thymo@NASSP/developer/Thymo) (Read error: Connection reset by peer)
[07:32:07] *** Joins: bliminse (~bliminse@host86-162-147-196.range86-162.btcentralplus.com)
[07:32:28] *** Joins: kdc (~kdc@196.211.197.159)
[07:33:02] *** Quits: Dotz0cat (~Dotz0cat@h14.95.187.173.dynamic.ip.windstream.net) (Ping timeout: 268 seconds)
[07:35:14] *** Joins: Thymo (~Thymo@NASSP/developer/Thymo)
[07:36:02] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.3)
[07:36:31] *** Joins: supakeen (~user@python/site-packages/supakeen)
[07:37:30] <last1> ok, I fixed the file name collision too
[07:39:13] <last1> https://pastebin.com/VxGatVX4
[07:39:31] <last1> I am generating a random number in my main function then re-using it in log.c 
[07:39:34] <last1> does this seem right ?
[07:40:33] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 252 seconds)
[07:41:23] *** Quits: vmcs (~vmcs@194.135.154.137) (Quit: leaving)
[07:44:08] *** Quits: nyah (~nyah@94.6.71.219) (Ping timeout: 256 seconds)
[07:47:59] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[07:47:59] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[07:47:59] *** Joins: wroathe (~wroathe@user/wroathe)
[07:48:04] *** Joins: SGautam (uid286066@id-286066.ilkley.irccloud.com)
[07:49:45] *** Quits: nuxil (~nuxil@141.195.51.213) (Ping timeout: 256 seconds)
[07:50:19] *** Quits: kitsunenokenja (~kitsunech@68.91.220.96) (Ping timeout: 256 seconds)
[07:54:28] *** Quits: maroloccio (~marolocci@151.53.155.184) (Quit: WeeChat 3.0)
[08:01:27] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 252 seconds)
[08:02:48] *** Joins: zlg (~zlg@user/zlg)
[08:03:54] *** Joins: sjkfasc (~03cia7d@183.217.200.156)
[08:06:06] *** Quits: chenqisu12 (~03cia7d@183.217.200.156) (Read error: Connection reset by peer)
[08:07:05] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[08:07:06] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[08:07:06] *** Joins: wroathe (~wroathe@user/wroathe)
[08:10:01] *** Quits: stevelitt (~stevelitt@2603:9001:70d:6d00:2ef0:5dff:fe7a:5c1d) (Ping timeout: 268 seconds)
[08:11:43] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 252 seconds)
[08:16:26] *** Quits: Zambyte (~Zambyte@cpe-104-228-60-14.nycap.res.rr.com) (Quit: leaving)
[08:20:08] *** Joins: kashyaprushi (~kashyapru@2405:201:1010:b033:b20e:bbc0:d690:ab28)
[08:22:55] *** Joins: stevelitt (~stevelitt@2603:9001:70d:6d00:2ef0:5dff:fe7a:5c1d)
[08:27:57] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[08:27:57] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[08:27:57] *** Joins: wroathe (~wroathe@user/wroathe)
[08:32:49] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[08:33:33] *** z0ite is now known as justache
[08:37:24] *** Quits: taru9 (~realTaru9@user/taru9) (Quit: %xD%)
[08:42:52] *** Quits: ferdna (~ferdna@user/ferdna) (Remote host closed the connection)
[08:43:12] *** Quits: alch (~alch@151.68.59.223) (Read error: Connection reset by peer)
[08:47:57] *** Joins: alch (~alch@151.34.87.186)
[08:53:14] *** Joins: taru9 (~realTaru9@user/taru9)
[09:02:02] *** Joins: AbleBacon (~AbleBacon@user/AbleBacon)
[09:05:41] *** Wandering_Glitch is now known as WanderingGlitch
[09:06:51] *** Quits: WanderingGlitch (~Wandering@li555-207.members.linode.com) (Changing host)
[09:06:51] *** Joins: WanderingGlitch (~Wandering@aha/hacker/wanderingglitch)
[09:12:48] *** Quits: novns (~novns@user/novns) (Quit: ZNC 1.8.2 - https://znc.in)
[09:13:18] *** Joins: novns (~novns@user/novns)
[09:15:48] *** Joins: Dotz0cat (~Dotz0cat@h118.199.117.75.dynamic.ip.windstream.net)
[09:17:01] *** Quits: charadon (~charadon@155.138.164.183) (Ping timeout: 256 seconds)
[09:21:44] *** Quits: asdflkj_sh (asdflkj@bsdforall.org) (Changing host)
[09:21:44] *** Joins: asdflkj_sh (asdflkj@user/asdflkj-sh/x-6013523)
[09:23:49] *** Quits: rahl (~rahl@102.114.219.142) (Ping timeout: 256 seconds)
[09:25:17] *** Joins: rahl (~rahl@102.114.75.94)
[09:28:59] *** Joins: doofenshmirtz (~farawayas@103.160.128.7)
[09:33:09] <caze> last1: tmpnam
[09:36:39] *** Joins: LordJohn (~lordjohn@l37-192-203-250.novotelecom.ru)
[09:36:57] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: ZzzZ)
[09:37:48] *** Joins: puke (~puke@user/puke)
[09:41:56] *** Joins: xqt (~xqt@user/xqt)
[09:42:07] *** Quits: taru9 (~realTaru9@user/taru9) (Quit: %xD%)
[09:42:24] *** Quits: penguino (~mrpenguin@user/mrpenguin) (Ping timeout: 276 seconds)
[09:42:36] *** Quits: soapsudsxx (~soapsudsx@209.221.40.158) (Remote host closed the connection)
[09:43:11] *** Joins: taru9 (~realTaru9@user/taru9)
[09:47:40] *** Quits: arinov (~arinov@213.194.126.155) (Ping timeout: 256 seconds)
[09:49:26] *** Joins: arinov (~arinov@213.194.126.155)
[09:49:28] *** Joins: chomwitt (~chomwitt@2a02:587:dc16:f200:12c3:7bff:fe6d:d374)
[10:03:40] *** Joins: vysn (~vysn@user/vysn)
[10:03:44] *** Quits: arinov (~arinov@213.194.126.155) (Ping timeout: 252 seconds)
[10:03:44] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[10:05:39] *** Joins: arinov (~arinov@213.194.126.155)
[10:09:38] *** Joins: osp (~osp@84.19.72.107)
[10:09:57] *** Joins: pizdets (~pizdets@183.182.110.245)
[10:11:25] *** Joins: Libero (~Libero@130.43.23.56.dsl.dyn.forthnet.gr)
[10:12:19] *** Quits: xcm_ (~xcm@user/xcm) (Remote host closed the connection)
[10:12:35] *** Joins: xcm_ (~xcm@user/xcm)
[10:15:17] *** Joins: ABedsideBaccalau (~DictatorK@2001:e68:542d:4420:b047:cb5f:cfe0:ca88)
[10:16:53] *** Quits: ABedsideBaccalau (~DictatorK@2001:e68:542d:4420:b047:cb5f:cfe0:ca88) (Quit: Leaving)
[10:21:09] *** Quits: PortableDave (~portabled@14-201-65-57.static.tpgi.com.au) (Ping timeout: 252 seconds)
[10:21:17] *** Quits: z8z (~x@ac255238.ppp.asahi-net.or.jp) (Remote host closed the connection)
[10:23:49] *** Quits: callen92 (~callen92@172.92.89.49) (Quit: Leaving)
[10:25:11] *** Quits: xqt (~xqt@user/xqt) (Ping timeout: 252 seconds)
[10:26:26] *** Joins: slidercrank (~slidercra@user/slidercrank)
[10:27:21] *** Quits: SGautam (uid286066@id-286066.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[10:27:40] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[10:27:54] *** Quits: anon16_ (~anon16_@user/anon16) (Ping timeout: 256 seconds)
[10:28:04] *** Joins: z8z (~x@ac255238.ppp.asahi-net.or.jp)
[10:32:52] *** Quits: kdc (~kdc@196.211.197.159) (Quit: Leaving)
[10:34:00] *** Quits: magic_ninja (~sparkie1@ip24-255-219-188.ks.ks.cox.net) (Remote host closed the connection)
[10:34:53] *** Joins: mattil (~mattil@helsinki.portalify.com)
[10:36:04] *** Joins: magic_ninja (~sparkie1@ip24-255-219-188.ks.ks.cox.net)
[10:38:06] *** Quits: davros (~davros@host86-185-99-134.range86-185.btcentralplus.com) (Remote host closed the connection)
[10:38:44] <smallville7123> if i have a serialized stream of data lengths [2, 3, 2] , and i want to convert it to a serialized stream of of data lengths [3, 3, 2],    how would i do so?
[10:39:25] <smallville7123> as i cant seem to find much info online about how to rewrite serialized data
[10:40:33] *** Quits: magic_ninja (~sparkie1@ip24-255-219-188.ks.ks.cox.net) (Client Quit)
[10:40:59] *** Joins: magic_ninja (~sparkie1@ip24-255-219-188.ks.ks.cox.net)
[10:42:35] *** Quits: pnbeast (~pnbeast@2601:140:4200:b500::1) (Quit: WeeChat 2.7.1)
[10:42:42] *** Quits: AbleBacon (~AbleBacon@user/AbleBacon) (Read error: Connection reset by peer)
[10:44:14] <smallville7123> im basically trying to get it to look like this https://gist.github.com/mgood7123/68d6b013985fe54407b0f4904151b302
[10:45:37] *** Joins: Burgundy (~yomon@79.115.213.171)
[10:48:40] *** Joins: bzng (~bzng4@91-115-29-1.adsl.highway.telekom.at)
[10:52:57] <dave0> smallville7123: not real sure what you're doing there... what is   Map   ?
[10:53:31] <smallville7123> Map is a data structure specifying the data map for the serialized data
[10:53:45] <dave0> doesn't help me
[10:54:36] <smallville7123> eg,        Struct Mapping { int positionInArray, length; }; struct Map { Mapping position, color, tex; };
[10:55:07] <dave0> oh you're trying to serialize some arrays
[10:55:18] <smallville7123> yea
[10:55:47] <smallville7123> specifically im trying to convert a serialized array from one format to another
[10:56:08] *** Joins: xqt (~xqt@user/xqt)
[11:00:05] <dave0> first thing is i would do it line by line
[11:01:33] <dave0> is it always 4 rows? top right, bottom right, bottom left, top left ?
[11:05:43] <smallville7123> the rows can be of arbitary length
[11:06:15] <smallville7123> and there can be arbitary amount of rows
[11:06:20] <dave0> okay that's not too bad
[11:07:07] <dave0> then i would calculate the length of an "out" row, by finding the largest of (index position+length) in mappingOut
[11:08:29] <dave0> you have index 6 length 2, so the maximum length of a row is 8 ... multiply that by the number of rows and malloc it
[11:08:31] *** Quits: ckdCreations (~ckdCreati@147.55.130.33) (Read error: Connection reset by peer)
[11:08:51] <dave0> so you know how big "out" is
[11:09:06] <dave0> fill it with 0.0 or whatever it should be
[11:09:54] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Ping timeout: 260 seconds)
[11:11:21] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[11:13:20] <dave0> then write a function that copies a Mapping from in to out .. something like    void copy(struct Mapping mapin, struct Mapping mapout) { int a; for(a = 0; a < min(mapin.length, mapout.length); a++) { out[mapout.positionInArray + a] = in[mapin.positionInArray + a]; } }
[11:14:00] *** Joins: ckdCreations (~ckdCreati@147.55.133.139)
[11:14:11] <dave0> then you can use   copy()   to copy the position, color, tex's
[11:15:01] <dave0> copy(mappingIn->position, mappingOut->position); copy(mappingIn->color, mappingOut->color); copy(mappingIn->tex, mappingOut->tex);
[11:15:05] <dave0> and do that for each row
[11:15:47] <dave0> you'll have to keep track of which row you're on, and pass around in and out but that's not hard
[11:17:22] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[11:17:58] <dave0> in your paste you have lots of   mappingIn.position = {0, 2};    you can use compound literals there...    mappingIn.position = (struct Mapping){0, 2}; mappingIn.color = (struct Mapping){2, 3};   etc.
[11:20:48] *** Quits: Betal (~Betal@user/betal) (Quit: WeeChat 3.3)
[11:22:48] *** Joins: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com)
[11:22:51] <dave0> the length of an "out" row would be    int size(struct Mapping m) { return m.positionInArray + m.length; } int cols = 0; cols = max(cols, size(mappingOut.position)); cols = max(cols, size(mappingOut.color)); cols = max(cols, size(mappingOut.tex)); *out = malloc(sizeof(float) * cols * rows);
[11:25:30] *** Quits: karakedi (~eAC53C340@user/karakedi) (Remote host closed the connection)
[11:25:53] *** Joins: Guest76 (~Guest76@120.236.75.55)
[11:27:34] *** Quits: rgrinberg (~textual@200.5.63.76) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[11:30:00] *** Quits: Hexmind (~Hexmind@modemcable049.25-131-66.mc.videotron.ca) (Quit: Leaving)
[11:30:33] *** Joins: karakedi (~eAC53C340@user/karakedi)
[11:32:48] *** Guest76 is now known as CallMeAj
[11:36:00] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: ZzzZ)
[11:36:01] <smallville7123> i keep messing it up somehow ;-;
[11:38:37] <dave0> start with calculating the dimensions of your float arrays
[11:39:23] *** Joins: leo__ (~leo@31-161-230-76.mobile.kpn.net)
[11:39:26] *** Quits: leo__ (~leo@31-161-230-76.mobile.kpn.net) (Remote host closed the connection)
[11:39:30] *** Joins: jusski (~user@78-63-85-123.static.zebra.lt)
[11:40:27] *** Joins: LucaTM (~LucaTM@user/lucatm)
[11:42:29] *** Joins: tessio (~weechat@141.226.73.54)
[11:42:42] <tessio> hi.. is there a way to use meson without root priviliges ?
[11:42:58] <tessio> it tr
[11:43:47] *** Joins: lleo (~leo@31-161-230-76.mobile.kpn.net)
[11:44:28] *** Quits: Furai (~Furai@cookiehoster.furai.pl) (Quit: WeeChat 3.3)
[11:44:52] *** Joins: mrig (~AdiIRC@user/mrig)
[11:44:58] *** Joins: Furai (~Furai@cookiehoster.furai.pl)
[11:48:09] *** Joins: kktk (~kktk@51.15.9.205)
[11:48:21] *** Quits: xqt (~xqt@user/xqt) (Quit: WeeChat 3.3)
[11:51:35] *** Parts: kktk (~kktk@51.15.9.205) ()
[11:52:02] *** Joins: pulse (~pulse@user/pulse)
[12:02:03] *** Quits: lleo (~leo@31-161-230-76.mobile.kpn.net) (Remote host closed the connection)
[12:02:26] *** Joins: lleo (~leo@31-161-230-76.mobile.kpn.net)
[12:06:43] *** Quits: mrig (~AdiIRC@user/mrig) (Remote host closed the connection)
[12:06:57] *** Joins: mrig (~AdiIRC@user/mrig)
[12:09:54] *** Joins: plainoldcheese (~plainoldc@user/plainoldcheese)
[12:11:17] *** Quits: chomwitt (~chomwitt@2a02:587:dc16:f200:12c3:7bff:fe6d:d374) (Quit: Leaving)
[12:16:23] *** Joins: gproto23 (~gproto23@user/gproto23)
[12:17:30] *** Joins: beard_ (~beard@h94-245-9-198.cust.a3fiber.se)
[12:17:34] *** Quits: beard_ (~beard@h94-245-9-198.cust.a3fiber.se) (Client Quit)
[12:18:03] *** Joins: dacav (~dacav@h94-245-9-198.cust.a3fiber.se)
[12:19:09] *** Quits: LordJohn (~lordjohn@l37-192-203-250.novotelecom.ru) (Read error: Connection reset by peer)
[12:20:06] *** Quits: sereg (~sereg@37.120.205.197) (Remote host closed the connection)
[12:21:57] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[12:25:20] *** Joins: aradesh (~aradesh@user/aradesh)
[12:27:56] <mort> meson shouldn't require root privileges
[12:29:15] *** Joins: travankor (travankor@user/travankor)
[12:30:16] *** Joins: reset (~reset@user/reset)
[12:30:47] *** Quits: doofenshmirtz (~farawayas@103.160.128.7) (Read error: Connection reset by peer)
[12:32:33] *** Joins: alioui (~medeva293@102.156.155.135)
[12:32:33] *** Joins: the_lanetly_052 (~the_lanet@185.30.89.222)
[12:32:46] *** Quits: sjkfasc (~03cia7d@183.217.200.156) (Remote host closed the connection)
[12:33:09] *** Quits: jusski (~user@78-63-85-123.static.zebra.lt) (Ping timeout: 252 seconds)
[12:33:16] *** Quits: the_lanetly_052 (~the_lanet@185.30.89.222) (Max SendQ exceeded)
[12:33:46] *** Joins: the_lanetly_052 (~the_lanet@185.30.89.222)
[12:34:31] *** Quits: the_lanetly_052 (~the_lanet@185.30.89.222) (Max SendQ exceeded)
[12:35:01] *** Joins: the_lanetly_052 (~the_lanet@185.30.89.222)
[12:35:42] *** Quits: the_lanetly_052 (~the_lanet@185.30.89.222) (Max SendQ exceeded)
[12:36:15] *** Joins: the_lanetly_052 (~the_lanet@185.30.89.222)
[12:37:09] *** Quits: the_lanetly_052 (~the_lanet@185.30.89.222) (Max SendQ exceeded)
[12:37:29] *** Quits: nrl^ (~nrl@68.101.58.90) (Remote host closed the connection)
[12:38:26] <smallville7123> ok i simplified it to this https://wandbox.org/permlink/deGZO7bjL6jlkwgP
[12:38:53] <smallville7123> dave0: 
[12:40:42] <tessio> im trying to build a C project wth ninja install
[12:40:51] *** Quits: arinov (~arinov@213.194.126.155) (Ping timeout: 252 seconds)
[12:40:53] <tessio> why it requires root password ?
[12:41:26] <tessio> the authentication agent says that ninja install tries to run /usr/bin/python3 which have r-x permissions for other users
[12:41:32] *** Quits: clamiax (~clamiax@net-37-182-97-22.cust.vodafonedsl.it) (Ping timeout: 240 seconds)
[12:41:39] <tessio> any suggestions ? 
[12:46:41] *** Quits: alch (~alch@151.34.87.186) (Ping timeout: 256 seconds)
[12:48:13] *** Joins: alch (~alch@151.34.8.195)
[12:49:20] *** Joins: dsrt^ (~dsrt@68.101.58.90)
[12:51:56] <smallville7123> dave0: something like this?     out.data = calloc(inRows, outStride * sizeof(float)); out.length = outStride * inRows;
[12:53:11] <dave0> smallville7123: yep, looks good
[12:53:17] <smallville7123> :)
[12:53:19] *** Quits: lleo (~leo@31-161-230-76.mobile.kpn.net) (Ping timeout: 252 seconds)
[12:55:56] *** Quits: mattil (~mattil@helsinki.portalify.com) (Remote host closed the connection)
[12:58:03] <smallville7123> tessio: root password is almost always required to install anything
[12:58:12] *** Quits: plainoldcheese (~plainoldc@user/plainoldcheese) (Quit: WeeChat 3.3)
[12:58:24] <smallville7123> since it often installs to / or /usr
[12:58:38] <smallville7123> dave0: what now?
[12:58:41] <tessio> smallville7123: even with ninja install ? i installed ninja through pip3 install --user
[12:58:50] <smallville7123> yea
[12:59:00] <smallville7123> also with `make install`
[12:59:01] <tessio> so it's normal  ?
[12:59:04] <smallville7123> yes
[12:59:09] <tessio> ok thanks
[12:59:23] <smallville7123> unless you use a custom install prefix
[12:59:32] <smallville7123> and the build supports this prefix
[12:59:45] <smallville7123> (eg the build does not hardcode it's install location)
[13:00:01] <smallville7123> dave0: https://wandbox.org/permlink/uxrHLMqbJgb38Qcn
[13:01:12] *** Joins: loganlee (~Thunderbi@user/loganlee)
[13:01:57] <tessio> smallville7123: sudo --preserve-env=PATH 'ninja install' 
[13:02:04] <tessio> ninja install command not found
[13:02:23] <smallville7123> no
[13:02:33] <dave0> smallville7123: ah i see, it's getting there
[13:02:45] <smallville7123> tessio: remove PATH
[13:03:10] <tessio> same
[13:03:24] <smallville7123> "sudo ninja install"
[13:03:25] <dave0> smallville7123: so now you have inStride and outStride and inRows
[13:03:36] <smallville7123> dave0: yea
[13:04:19] <smallville7123> and int outRows = inRows; cus why not :)
[13:04:30] <dave0> smallville7123: write a function that copies 1 Map from in to out
[13:04:51] <tessio> smallville7123: sudo ninja install --> ninja command not found
[13:05:47] *** Joins: The_Jag (~The_Jag@host-79-36-38-58.retail.telecomitalia.it)
[13:06:19] <smallville7123> "ninja --help"
[13:06:32] *** Joins: the_lanetly_052 (~the_lanet@194.135.152.219)
[13:08:14] *** Quits: CallMeAj (~Guest76@120.236.75.55) (Ping timeout: 256 seconds)
[13:08:43] *** Quits: dacav (~dacav@h94-245-9-198.cust.a3fiber.se) (Quit: leaving)
[13:08:52] *** Joins: dacav (~dacav@h94-245-9-202.cust.a3fiber.se)
[13:10:47] <dave0> smallville7123: it'll look like    void copymap(struct Data in, struct Data out, struct Map inmap, struct Map outmap, int row) { float *indata = &in.data[row * inStride]; float *outdata = &out.data[row * outStride]; int count = min(inmap.length, outmap.length); int a; for(a = 0; a < count; a++) { outdata[outmap.position + a] = indata[inmap.position + a]; } }
[13:12:16] <dave0> smallville7123: then you can use   copymap(Mapping.position); copymap(Mapping.color); copymap(Mapping.texture);
[13:12:25] <tessio> smallville7123: there's no usefull information regarding this in --help
[13:12:51] <smallville7123> so this? https://gist.github.com/mgood7123/63f0104acee628f09e67e9d35c838013
[13:12:52] <candide> Title of smallville7123's link: tools.h · GitHub
[13:13:23] <dave0> smallville7123: ah yes
[13:13:23] <smallville7123> tessio: if "ninja --help" works then sudo should be able to locate ninja in PATH
[13:13:39] <tessio> no
[13:13:48] <smallville7123> "sudo ninja --help"
[13:14:03] <dave0> smallville7123: multiply by sizeof(float)    memcpy(out, in, outMap.length * sizeof(float))   and same for other memcpy
[13:14:03] <tessio> sudo don't inherit user's environment
[13:14:08] <tessio> not without -E
[13:14:16] <tessio> and even so it doesn't work
[13:14:26] <smallville7123> "su
[13:14:41] <smallville7123> "$ su" "# ninja --help"
[13:15:00] <smallville7123> otherwise seek help in ##linux
[13:15:13] <smallville7123> dave0: ok
[13:17:36] *** Joins: Y4knotiS (~YaknotiS@cpc1-cmbg18-2-0-cust87.5-4.cable.virginm.net)
[13:20:57] *** Joins: riksteri (riksteri@gateway/vpn/airvpn/riksteri)
[13:22:06] <smallville7123> dave0: now i get this https://wandbox.org/permlink/JeonuosufzCszr1h
[13:23:24] <dave0> smallville7123: tools.h looks fine
[13:23:46] *** Joins: lionkor (~lionkor@beammp/staff/lionkor)
[13:24:26] <dave0> smallville7123: it looks like you got it all there
[13:24:42] <dave0> smallville7123: does it work?
[13:26:06] <smallville7123> kinda
[13:26:28] <dave0> it copies some numbers, but they are in the wrong position?
[13:26:48] *** Joins: doofenshmirtz (~farawayas@103.160.128.7)
[13:27:00] <smallville7123> this is the output that i want https://gist.github.com/mgood7123/68d6b013985fe54407b0f4904151b302
[13:27:56] <dave0> smallville7123: what output do you get?
[13:28:58] <smallville7123> https://wandbox.org/permlink/dQyEyqyKQZ5STOpY
[13:30:26] <dave0> smallville7123: ok
[13:31:03] <dave0> smallville7123: in tools.h ... insert this between line 8 and 9... (in the function but before the if)
[13:31:26] <dave0> smallville7123: put    in += inMap.position; out += outMap.position;
[13:31:58] <smallville7123> yea i realized that
[13:32:00] <smallville7123> out + outMap.position, in + inMap.position
[13:32:08] <dave0> yep
[13:32:11] <smallville7123> :)
[13:32:17] <dave0> then its finished
[13:32:21] <smallville7123> https://wandbox.org/permlink/7fccLNdrRnqTEv8F :)
[13:33:02] <dave0> smallville7123: sweet
[13:33:05] <dave0> smallville7123: done!
[13:33:21] <dave0> lets take a 5 minute break... smoke 'em if you got 'em
[13:34:11] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[13:35:29] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 252 seconds)
[13:36:28] *** Joins: Mindiell (~Mindiell@python/afpy/mindiell)
[13:37:03] *** Lord_of_Life_ is now known as Lord_of_Life
[13:37:11] <smallville7123> thanks
[13:37:39] <Mindiell> hi there, I got a strange problem on an old program I didn't write. The problem seems to be on a strtok call raising a segmentation fault.
[13:37:52] <Mindiell> The beginning of the function is here : https://wyz.fr/3M-0J
[13:37:54] <candide> Title of Mindiell's link: no title - WYZ
[13:38:22] <Mindiell> Even if I read some things about string literals, I don't think I'm in this case.
[13:39:04] <Mindiell> the last command done is the strotk, if I put some other printf after this one I don't get any to be printed (yes, old debugging strategy)
[13:39:11] <Mindiell> I'm clearly not an expert
[13:39:26] *** Quits: bindu (~bindu@user/bindu) (Remote host closed the connection)
[13:39:45] *** Joins: bindu (~bindu@user/bindu)
[13:39:46] <Mindiell> hmmm
[13:40:18] <Mindiell> ok, I did ty something new : I printed buf after the strtok command and get something, so it's not the strotok which is carashing, but the use of fnp
[13:41:32] *** Joins: freakazoid12345 (~matt@2603-9000-cf0f-80e3-0ca4-2f26-b042-b2f1.inf6.spectrum.com)
[13:42:14] *** Quits: The_Blode (~Blode@user/the-blode/x-7164444) (Read error: No route to host)
[13:42:57] *** Joins: bolovanos__ (~bolovanos@user/bolovanos)
[13:43:47] *** Joins: bolovanos_ (~bolovanos@user/bolovanos)
[13:43:59] *** Parts: alioui (~medeva293@102.156.155.135) ()
[13:44:02] *** Quits: freakazoid343 (~matt@2603:9000:cf0f:80e3:ca4:2f26:b042:b2f1) (Ping timeout: 240 seconds)
[13:44:43] *** Joins: jusski (~user@78-63-85-123.static.zebra.lt)
[13:47:35] *** Quits: bolovanos__ (~bolovanos@user/bolovanos) (Ping timeout: 252 seconds)
[13:52:48] *** Joins: Klinda (~superleag@user/klinda)
[13:54:00] *** Joins: gucci (~i.am@189.58.156.81.dynamic.adsl.gvt.net.br)
[13:57:36] *** Joins: earnest (~earnest@user/earnestly)
[14:01:44] <dave0> Mindiell: i had a quick look, it should work
[14:02:08] <Mindiell> dave0: this doesn't help me :D
[14:02:12] <dave0> hmm maybe
[14:02:21] <Mindiell> but thx for showing me it's not "clear"
[14:02:26] <dave0> are you fixing this code?
[14:02:33] <Mindiell> I'm just trying to compile it
[14:02:38] <Mindiell> it's a very old game
[14:02:52] <smallville7123> https://wandbox.org/permlink/kkHh8E1JoXXhWzIy yay
[14:03:06] <smallville7123> (i think lol)
[14:03:58] <dave0> Mindiell: did you put in the printf's ?
[14:04:09] <Mindiell> dave0: yes, for debugging
[14:05:13] <dave0> Mindiell: and it still crashes?
[14:05:19] <Mindiell> yup
[14:05:41] <Mindiell> I tried to use strotk_s instead of strtok, but it seems too much for me :D
[14:06:13] <dave0> Mindiell: try changing the first line from    char buf[128];   to    char buf[128] = {0};
[14:06:43] <Mindiell> with this :  https://wyz.fr/3N-K9   I can print the buf content "after" strotk.
[14:07:13] <Mindiell> same error with {0}
[14:07:30] <Mindiell> I'm under debian sid if this can help
[14:07:46] <Mindiell> gcc (Debian 11.2.0-12) 11.2.0  
[14:08:24] <Bou> and the strlen() gave something sensible? (>1 and <128)
[14:09:24] *** Joins: danieln (~danieln@erebor.danieln.de)
[14:09:52] <Mindiell> Bou: strlen(buf) is returning 20
[14:10:46] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: ZzzZ)
[14:11:04] <Mindiell> exactly this => https://wyz.fr/6K-BV
[14:11:06] <candide> Title of Mindiell's link: no title - WYZ
[14:11:09] <Bou> and your buf[] string doesn't start with @ or #
[14:11:22] <Mindiell> so there is a \n at the end of buf, I don't know if it's important ?
[14:11:54] <Bou> that `## size 1 buildings` appears to be a comment though, and that `*fnp == '#'` skips it
[14:11:55] <Mindiell> Bou: yes, it's start with "#" clearly, but printing fnp is causing the crash (or testing it)
[14:13:22] <Bou> is buf nonzero?
[14:13:33] <Bou> because if buf is NULL then strtok will resume where it left off the first time
[14:13:44] *** Joins: mihaiadrian (~Thunderbi@82.76.223.244)
[14:13:53] <mihaiadrian> hi, can someone help me compile a c program?
[14:14:01] <mihaiadrian> https://github.com/kenorb-contrib/tg
[14:14:03] <mihaiadrian> this program
[14:14:03] <Bou> I mean, the return value of fgets
[14:14:03] <candide> Title of mihaiadrian's link: GitHub - kenorb-contrib/tg: `telegram-cli` for Telegram IM
[14:14:26] <mihaiadrian> i'm on ubuntu, when i run `make` on it, i'm faced with these errors:
[14:14:35] <mihaiadrian> https://pastebin.com/raw/0YeMKbvG
[14:14:39] *** Quits: pilyn (~pilyn@user/pilyn) (Quit: Leaving)
[14:16:46] <danieln> hey, I have this ebpf program thats working great, but occasionally I'm getting 'lost samples' from the BPF_MAP_TYPE_PERF_EVENT_ARRAY I am using... how can I increase the buffer here? or should I be using some other kind of map (to dump select packet header data to userspace basically)? I usually do Go and thats been my first piece of C since university,  so I'd appreciate any pointers (heh) to orient
[14:16:48] <danieln> myself better in this ebpf env
[14:16:51] <Mindiell> buf is 20 length containing "## size 1 buildings"
[14:17:30] <Mindiell> Bou: the program crashes just after the first strtok, so there is no more fgets
[14:17:48] <Mindiell> I tried to pass the strtok call, and file is getting read normally
[14:19:49] <Mindiell> Wow !!
[14:20:02] <trenka> danieln: check #xdp channel on oftc. jolsa is not there at the moment, but should be 
[14:21:39] <Mindiell> omg it passed !
[14:21:57] <Mindiell> I just printed fnp before the call to strtok and it passed
[14:22:11] <Mindiell> but now, I reversed everythong I did and it does not anymore :o(
[14:24:11] *** Joins: bbju (~bbju@103.144.148.219)
[14:25:32] <Mindiell> omg, I'm back to nothing working :'o(
[14:27:02] <Bou> your error is somewhere else, either in the way it calls the function, or opens the file, or maybe there's memory corruption elsewhere
[14:27:13] *** Joins: bbju33 (~bbju@103.144.148.219)
[14:27:41] <Bou> are you compiling with -fsanitize=address ?
[14:28:33] <Mindiell> Bou: I absolutely don't know, I'm just typing "make" ;o)
[14:28:46] <Mindiell> the file is opened correctly as I can read it completely
[14:29:14] *** Joins: halabund (~halabund@192.55.244.3)
[14:29:37] *** Quits: halabund (~halabund@192.55.244.3) (Client Quit)
[14:29:50] *** Quits: bbju (~bbju@103.144.148.219) (Ping timeout: 256 seconds)
[14:32:46] *** Joins: blindguard (~blindguar@2a02:908:1864:c200::12)
[14:33:25] *** Quits: ^tinyweasel^ (~weasel@user/tinyweasel/x-0495158) (Quit: quit)
[14:34:10] *** Quits: loganlee (~Thunderbi@user/loganlee) (Quit: loganlee)
[14:34:16] *** Joins: stonkey (~stonkey@user/stonkey)
[14:39:08] *** Joins: soul-d (~uknown@user/soul-d)
[14:39:19] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[14:40:01] *** Quits: Libero (~Libero@130.43.23.56.dsl.dyn.forthnet.gr) (Ping timeout: 252 seconds)
[14:40:49] *** Joins: Libero (~Libero@130.43.23.56.dsl.dyn.forthnet.gr)
[14:41:28] *** Quits: mihaiadrian (~Thunderbi@82.76.223.244) (Quit: mihaiadrian)
[14:56:09] <Mindiell> ok, life is getting on me, i'll be back. Thx for everything
[14:59:50] *** Joins: satanist|hell (~satanist@bureaucracy.bureaucracy.de)
[15:00:02] *** Quits: satanist (~satanist@bureaucracy.bureaucracy.de) (Ping timeout: 240 seconds)
[15:00:59] *** Quits: jusski (~user@78-63-85-123.static.zebra.lt) (Ping timeout: 256 seconds)
[15:02:56] *** Quits: banc (banc@gateway/vpn/airvpn/banc) (Ping timeout: 252 seconds)
[15:04:08] <danieln> trenka: thanks for the hint!
[15:06:11] *** Joins: tech_exorcist (txrcst@user/tech-exorcist/x-0447479)
[15:06:47] *** Joins: banc (banc@gateway/vpn/airvpn/banc)
[15:07:53] *** Quits: zwr (~zwr@2804:d45:b966:fb00:3e37:1000:411e:c48c) (Ping timeout: 252 seconds)
[15:09:57] *** Joins: hxztnxt (~hxztnxt@145.red-80-59-28.staticip.rima-tde.net)
[15:11:02] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[15:12:33] <hxztnxt> I want to read a file with multiple threads. To do so, I am mmapping a whole file (once) and giving each thread a chunk. mmaping like this  mmap(NULL, file_size, PROT_READ, MAP_PRIVATE, fd,0)
[15:12:39] <hxztnxt> is that right?
[15:13:14] <dave0> i'd have to look up the manual
[15:14:47] <hxztnxt> since I am reading a whole file, I am guessing offset should be 0, right?
[15:15:02] <dave0> yeah it looks good so far
[15:15:03] *** Joins: random-nick (~random-ni@87.116.165.83)
[15:15:09] <dave0> i'm up to flags
[15:15:13] *** Quits: bolovanos_ (~bolovanos@user/bolovanos) (Ping timeout: 252 seconds)
[15:15:41] <hxztnxt> in the manual there's something about the offset being multiple of the pagesize that makes me doubt
[15:16:58] <dave0> it looks okay
[15:17:07] <dave0> just check the return code
[15:17:57] <dave0> void *pa = mmap(...); if(pa == MAP_FAILED) perror("mmap error");
[15:19:35] <dave0> your mmap is virtually identical to the example here: https://pubs.opengroup.org/onlinepubs/9699919799/functions/mmap.html
[15:19:58] <dave0> i would say you're very safe with your code working
[15:21:37] *** Joins: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br)
[15:25:02] <hxztnxt> my idea was to give each thread a chunk of 1kB of the file, and after reading that it will be given another chunk of 1KB
[15:26:01] <dave0> you can write simple code for that
[15:26:44] <hxztnxt> so i was thinking, to do so I could use an array of n+1 slots, where n are all the 1KB chunks the file can be divided into. slot nth+1 would be the last offset
[15:27:24] <dave0> you don't need an array
[15:27:32] <hxztnxt> so every thread could access chunk[i] where they would start reading and end whenever they arrive at chunk[i+1]
[15:27:45] <dave0> hang on i'll try and cruft up some code
[15:27:52] <hxztnxt> okay, ty!
[15:28:24] *** Joins: The_Blode (~Blode@user/the-blode/x-7164444)
[15:30:06] *** Quits: Elladan (~elladan@user/elladan) (Quit: ZNC - http://znc.in)
[15:30:30] *** Joins: PortableDave (~portabled@14-201-65-57.static.tpgi.com.au)
[15:30:30] *** Quits: Falconer1 (~ronnyma@227.84-48-191.nextgentel.com) (Read error: Connection reset by peer)
[15:31:51] *** Joins: Elladan (~elladan@user/elladan)
[15:32:07] *** Quits: bbju33 (~bbju@103.144.148.219) (Quit: Client closed)
[15:32:17] *** gucci is now known as nOfx
[15:32:49] *** Joins: Falconer_ (~ronnyma@227.84-48-191.nextgentel.com)
[15:34:59] *** Quits: PortableDave (~portabled@14-201-65-57.static.tpgi.com.au) (Ping timeout: 256 seconds)
[15:35:54] *** satanist|hell is now known as satanist
[15:36:01] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.3)
[15:36:31] *** Joins: supakeen (~user@python/site-packages/supakeen)
[15:36:32] *** Joins: dreamcat4 (uid157427@id-157427.hampstead.irccloud.com)
[15:37:13] *** Quits: frost (~frost@user/frost) (Quit: Connection closed)
[15:37:54] <dave0> https://termbin.com/zsu6
[15:38:00] <hxztnxt> ty
[15:38:11] <dave0> it's pretty rough and a fair bit of code, but i write it like this
[15:39:58] <hxztnxt> why the unsigned in unsigned char*
[15:40:03] <hxztnxt> w?
[15:40:17] <dave0> just a habit of mine
[15:40:30] <dave0> use whatever type you need
[15:41:48] <hxztnxt> no, I mean i dont know the difference between char signed and unsigned
[15:42:12] *** Joins: cmbengue (~Thunderbi@207.191.249.160)
[15:42:26] <hxztnxt> ty for the code btw, it's much cleaner solution than what I was thinking on
[15:43:03] <dave0> signed char can hold the values (assuming 2's complement) -128 to 127 and if they overflow it's undefined behaviour which is bad
[15:43:31] <dave0> unsigned char holds the values 0-255 and there is no overflow.. it's a much safer thing to use
[15:44:38] <hxztnxt> what if 256, does it go back to 0?
[15:44:41] <dave0> char can have either meaning but it's separate from both of them.. because of the uncertainty it's got the badness of both signed and unsigned char
[15:44:55] <dave0> yeah 256 into an unsigned char goes to 0
[15:45:06] <dave0> you are reading some arbitrary file
[15:45:09] <dave0> stick to unsigned char
[15:45:36] <dave0> if it was text, you could make a case to use char
[15:46:22] <dave0> i forgot to initialize the mutex..   pthread_mutex_t mutex = PTHREAD_MUTEX_INITIALIZER:
[15:46:49] *** Joins: u0_a391 (~u0_a391@2600:380:5e44:9b10:bf2c:9e7e:af48:1823)
[15:47:11] <dave0> hxztnxt: for general binary files, you're always better with unsigned char
[15:47:29] <dave0> same as sockets
[15:48:26] <hxztnxt> is it good practice to have wrapper functions, like an Mmap function that asserts if MAP_ERROR?
[15:48:52] <dave0> i personally dont do that
[15:49:15] <dave0> but there is nothing wrong with doing it
[15:49:41] *** Quits: Kit (~u0_a391@2603-6010-a141-6fa3-c4fd-876a-2db9-8bd1.res6.spectrum.com) (Ping timeout: 252 seconds)
[15:49:59] <hxztnxt> what if you have to, for example, malloc many times. Do you check for errors every time?
[15:50:30] <hxztnxt> wouldnt that make the code harder to read?
[15:50:47] <dave0> it's a style thing
[15:51:36] <dave0> usually if i need to malloc something, it's because it's part of some data structure
[15:52:15] <dave0> so i put the malloc into a function that allocates a struct that goes in the data structure
[15:53:04] *** Joins: cart_man (~rynot@host-78-144-121-71.as13285.net)
[15:53:12] <dave0> so like     struct node { struct node *next; int age; }; struct node *alloc_node(void) { struct node *n = malloc(sizeof(*n)); if(n == 0) perror("malloc error"); return n; }
[15:53:15] *** Joins: mrig_ (~AdiIRC@amarseille-658-1-164-72.w86-198.abo.wanadoo.fr)
[15:53:31] <dave0> so there i put the malloc in a function, but the function itself does more than just malloc
[15:54:12] <dave0> i guess if it saved a lot of typing i might make a special function just for malloc
[15:54:39] <dave0> c doesn't really work very well for such things
[15:54:46] <dave0> lots of boilerplate
[15:55:13] *** Quits: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[15:55:57] *** Quits: mrig (~AdiIRC@user/mrig) (Ping timeout: 256 seconds)
[15:55:59] *** Quits: Lazenca (Lazenca@user/lazenca) (Remote host closed the connection)
[16:06:53] *** Quits: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net) (Remote host closed the connection)
[16:07:09] *** Joins: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net)
[16:08:14] *** Quits: immibis (~hexchat@62.156.144.218) (Remote host closed the connection)
[16:08:37] *** Joins: immibis (~hexchat@62.156.144.218)
[16:09:30] *** Quits: mrig_ (~AdiIRC@amarseille-658-1-164-72.w86-198.abo.wanadoo.fr) (Quit: Going offline, see ya! (www.adiirc.com))
[16:10:15] *** Joins: mrig (~AdiIRC@user/mrig)
[16:10:53] *** Joins: chomwitt (~chomwitt@2a02:587:dc0d:6d00:12c3:7bff:fe6d:d374)
[16:10:59] *** Quits: doofenshmirtz (~farawayas@103.160.128.7) (Remote host closed the connection)
[16:15:43] *** Quits: chomwitt (~chomwitt@2a02:587:dc0d:6d00:12c3:7bff:fe6d:d374) (Ping timeout: 252 seconds)
[16:15:59] *** Quits: gproto23 (~gproto23@user/gproto23) (Remote host closed the connection)
[16:17:54] *** Joins: chomwitt (~chomwitt@2a02:587:dc0d:6d00:12c3:7bff:fe6d:d374)
[16:19:16] <Bou> I think I may have a bug in my code, https://bpa.st/QJEA
[16:19:24] *** Joins: kdc (~kdc@196.211.197.159)
[16:19:30] *** Quits: hxztnxt (~hxztnxt@145.red-80-59-28.staticip.rima-tde.net) (Remote host closed the connection)
[16:20:43] *** u0_a391 is now known as Kit
[16:21:02] <Kit> Bou: abra cadabra its now a feature
[16:21:43] *** Joins: oxymoron93 (~oxymoron9@212.62.38.106)
[16:23:51] *** Joins: plastico (~plastico@neomutt/plastico)
[16:26:10] <dave0> is it fizzbuzz?
[16:27:01] <Bou> nah https://adventofcode.com/2021/day/1
[16:27:02] <candide> Title of Bou's link: Day 1 - Advent of Code 2021
[16:29:29] <oxymoron93> didn't see the question
[16:30:48] <Bou> the only thing in question is my sanity
[16:31:04] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: ZzzZ)
[16:31:22] <oxymoron93> a single for loop, for both tasks.
[16:32:33] <oxymoron93> pay attention whether you initialized your variables, whether you access out of array bounds and other
[16:32:55] <Bou> I had two loops, https://bpa.st/RURQ
[16:33:21] *** Quits: Elladan (~elladan@user/elladan) (Ping timeout: 256 seconds)
[16:33:41] *** Quits: scalablecory (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net) (Ping timeout: 252 seconds)
[16:35:37] *** Joins: Elladan (~elladan@user/elladan)
[16:37:16] <oxymoron93> that 2nd line in `main` doesn't look like C at all, twist it a lil' bit.
[16:39:39] *** Joins: zwr (~zwr@2804:d45:b966:fb00:e8f3:9015:4194:f553)
[16:39:42] <Bou> 2nd line in main, that's the `fopen`?
[16:45:03] *** Joins: ^tinyweasel^ (~weasel@user/tinyweasel/x-0495158)
[16:45:49] *** Quits: alch (~alch@151.34.8.195) (Ping timeout: 256 seconds)
[16:47:36] *** Joins: alch (~alch@151.34.0.50)
[16:51:05] *** Joins: pulse_ (~pulse@user/pulse)
[16:52:25] <tk> Bou: are you trying to answer AOC puzzles with IOCCC candidate code?
[16:54:12] <riv> can you even do $ in C like that
[16:54:23] *** Quits: pulse (~pulse@user/pulse) (Ping timeout: 256 seconds)
[16:54:40] *** pulse_ is now known as pulse
[16:56:51] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[16:57:25] *** Joins: constxd (~brad@192.75.101.164)
[16:57:42] <Bou> depends on your flavor of C
[16:59:02] <tk> I learned something today, I didn't know that allowing $ in variables was a gcc extension
[16:59:10] <tk> I will help debug this in a moment, just eating some lunch
[16:59:12] *** Quits: kashyaprushi (~kashyapru@2405:201:1010:b033:b20e:bbc0:d690:ab28) (Quit: Leaving)
[16:59:32] <riv> amazing
[16:59:33] <Bou> there's no bug, it works (...on my input, anyway)
[16:59:40] <riv> I like your approach Bou
[16:59:40] *** Joins: Sheilong (uid293653@id-293653.ilkley.irccloud.com)
[17:02:28] <tk> oh, you said there was a bug
[17:02:32] <tk> or there might be one
[17:02:34] <tk> let me try it
[17:02:49] <tk> Bou: nice
[17:02:52] <tk> it does work
[17:03:39] <tk> does GCC allow for main to return float? as in, does it handle that somehow or are you just relying on it not complaining too hard (I am aware that non-int returns are allowed by the standard as implementation defined)
[17:04:24] <tk> Bou: even in C99+ I don't think there's any implementation which allows not returning from main if the return type isn't int though
[17:05:15] <tk> as in, it's unspecified if the return type is int, but I don't think gcc specifies it
[17:05:28] <tk> s/is/isn't/
[17:05:49] <dave0> ,cc char main[]={0xc3};
[17:05:52] *** Joins: WilliamLeara (~wdl@cpe-76-185-2-28.tx.res.rr.com)
[17:05:52] <candide> dave0: [warning: overflow in conversion from 'i​nt' to 'char' changes value from '195' to '-61' [-Woverflow]] no output: main = <incomplete sequence \303>
[17:06:14] <dave0> aw it didn't execute it
[17:06:31] <fizzie> ,cc paste
[17:06:35] <candide> fizzie: https://0x0.st/-hcI.txt
[17:07:26] <dave0> aha
[17:08:02] <fizzie> And with -nomain (or whatever that flag is), it also gets rid of the array. Been trying it before.
[17:08:11] <tk> okay, the EOF check is funny
[17:08:43] <tk> ,cc 0x0.501p5
[17:09:32] <tk> it's 10
[17:09:40] <tk> after the cast
[17:10:15] <Bou> yeah that cast was unnecessary, I removed it later: https://bpa.st/RURQ
[17:10:53] <riv> much clearer
[17:10:54] <tk> so that's testing for linefeeds
[17:10:58] <Bou> '\n' is 10 and 10 happens to be representable as a float so it works
[17:11:39] <tk> and then after that you're doing some interesting str to int conversion
[17:12:14] <tk> ah, and you rely on 0xBADC0DE being bigger than any initial value in any input
[17:12:21] *** Joins: jusski (~user@78-63-85-123.static.zebra.lt)
[17:13:41] <tk> you wrote 10 with 3 different floats
[17:15:06] *** Joins: brad_mssw (~bhouse@c-76-106-206-149.hsd1.fl.comcast.net)
[17:15:29] <Bou> my apologies
[17:17:15] <Bou> it will also fail if the result isn't 4 digits, maybe a putchar in the loop would have been better
[17:17:29] <tk> yeah
[17:17:39] <tk> you know, the most amazing part is this is almost portable
[17:19:53] *** ChanServ sets mode: +o candide
[17:19:53] *** candide sets mode: -b *!~juliu@2a02:810b:*
[17:20:44] *** Joins: nyah (~nyah@94.6.71.219)
[17:25:11] *** Joins: bolovanos_ (~bolovanos@user/bolovanos)
[17:30:30] <Bou> I made a terrible mistake. I want the first part to execute if and only if `(_-0x14p-1)` is nonzero, and the second part if it's zero
[17:30:55] <clarity> that's terrible
[17:30:58] <Bou> so `a&&b, a||c`... but I know that b is always true
[17:31:16] <Bou> so you can write a&&b||c and you only need one expression
[17:31:51] <Bou> https://bpa.st/KSGQ and it works :)
[17:33:18] *** Quits: dave0 (~davezero@069.d.003.ncl.iprimus.net.au) (Quit: dave's not here)
[17:36:38] *** Quits: swinnenb (~swinnenb@user/swinnenb) (Quit: This is the hidden truth, the world between the lines.)
[17:37:46] <fizzie> Is there any need for the second loop to repeatedly set __ anyway? It doesn't look as if it was being modified anywhere.
[17:38:02] *** Quits: Geezabiscuit (~Geezabisc@user/geezabiscuit) (Quit: ZNC 1.8.2 - https://znc.in)
[17:38:37] *** Joins: brad_mssw|mac (~bhouse@2601:344:4100:b490:181c:9950:8708:b1f)
[17:39:39] *** Quits: brad_mssw (~bhouse@c-76-106-206-149.hsd1.fl.comcast.net) (Ping timeout: 256 seconds)
[17:40:47] <pragma-> silly overzealous -nomain
[17:41:24] <Bou> fizzie: well... it's modified in the while condition
[17:41:41] <Bou> (to exactly the same value)
[17:42:41] *** Joins: ARoxdale (~ARoxdale@84.203.26.40)
[17:43:54] *** Quits: cmbengue (~Thunderbi@207.191.249.160) (Remote host closed the connection)
[17:44:12] *** Joins: cmbengue (~Thunderbi@207.191.249.160)
[17:47:02] *** Joins: neiluj (~neiluj@2a01:e0a:1f2:d960:3591:6358:5367:6bcd)
[17:47:50] <neiluj> Hi! How do you locate missing free's? I used the Valgrind options: --tack-origins=yes --leak-check=full -s
[17:49:16] *** Joins: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net)
[17:49:24] *** Joins: gh34 (~textual@cpe-184-58-181-106.wi.res.rr.com)
[17:49:33] <Kit> wait, nailuj24 is that you
[17:50:21] <neiluj> no
[17:50:24] <Kit> oh
[17:50:27] <Kit> nvm
[17:50:32] <Kit> sorry
[17:50:32] *** Joins: bbju (~bbju@103.144.148.218)
[17:50:36] <neiluj> np :)
[17:51:23] <constxd> neiluj: read the output
[17:51:35] <fizzie> Bou: Yeah, just saying; "because it looks funnier that way" is a perfectly acceptable reason, but since seemed to be preferring simplicity based on that `a&&b, a||c` -> `a&&b||c` comment...
[17:51:40] <constxd> you can't locate something that doesn't exist
[17:51:58] *** Joins: skapata (~Skapata@2804:14c:87b0:a6f9:6583:37c0:ab84:8d52)
[17:51:58] *** Quits: skapata (~Skapata@2804:14c:87b0:a6f9:6583:37c0:ab84:8d52) (Changing host)
[17:51:58] *** Joins: skapata (~Skapata@user/skapata)
[17:52:08] <neiluj> constxd: thanks, but Valgrind's output only shows the free's count.
[17:52:37] <constxd> did you compile your program with debugging symbols enabled?
[17:52:47] <neiluj> With -g
[17:55:38] *** Quits: Dotz0cat (~Dotz0cat@h118.199.117.75.dynamic.ip.windstream.net) (Ping timeout: 252 seconds)
[17:56:44] *** Quits: lionkor (~lionkor@beammp/staff/lionkor) (Ping timeout: 252 seconds)
[17:58:47] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Quit: Ex-Chat)
[17:59:05] *** Joins: Dotz0cat (~Dotz0cat@h171.88.213.151.dynamic.ip.windstream.net)
[18:00:30] <fizzie> It's supposed to say something like https://0x0.st/-hT8.txt where the middle section tells you where any blocks that were never free'd were allocated.
[18:01:12] <fizzie> Obviously it can't tell you where exactly your missing `free` should be, that'd be an AI-complete problem.
[18:01:18] <neiluj> sure
[18:01:50] <neiluj> in the heap summary section I only get the count though
[18:02:02] <fizzie> Yes, because it's a _summary_.
[18:02:32] <fizzie> It's followed by the detailed records that, together, make up the counts.
[18:04:00] <neiluj> Yeah, the detailed records are missing.
[18:04:51] *** Joins: smallvil_ (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[18:05:43] *** Quits: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Ping timeout: 256 seconds)
[18:07:14] <fizzie> Well, what's your leak summary look like? Are there any blocks that are definitely/possibly lost? 
[18:08:28] *** Quits: dsrt^ (~dsrt@68.101.58.90) (Remote host closed the connection)
[18:08:34] <neiluj> Here it is: https://tpaste.us/zlX9 
[18:08:43] *** Joins: fputs2 (~fputs@67.59.83.166)
[18:09:22] <fizzie> Hmm. "Rerun with --leak-check=full to see details of leaked memory" suggests it doesn't _think_ it was called with --leak-check=full.
[18:09:25] <neiluj> oh
[18:09:50] <fizzie> Because it doesn't print that message when it is.
[18:09:53] <neiluj> somehow  valgrind ./a.out --leak-check=full --show-leak-kinds=all  doesn't parse the options
[18:10:01] <neiluj> but  valgrind --leak-check=full --show-leak-kinds=all  ./a.out does
[18:10:04] <fizzie> Yes, those are arguments for the command.
[18:10:16] <fizzie> Otherwise you couldn't pass command-line arguments to the program you want to execute.
[18:10:40] <neiluj> Damn, I've been debugging C programs for 3 years with only the count x)
[18:10:51] <neiluj> good, thanks!
[18:11:02] *** Quits: fputs (~fputs@67.59.83.166) (Ping timeout: 252 seconds)
[18:11:02] *** fputs2 is now known as fputs
[18:11:10] <fizzie> (Well, without some special syntax for it, anyway, like `gdb --args foo -x -y` and such.)
[18:13:07] <neiluj> okay, it's fixed. Glad that it shows the incorrect line, wouldn't have found otherwise
[18:17:02] *** Quits: bzng (~bzng4@91-115-29-1.adsl.highway.telekom.at) (Read error: Connection reset by peer)
[18:17:50] *** Quits: nOfx (~i.am@189.58.156.81.dynamic.adsl.gvt.net.br) (Quit: I come down here for a fat woman and that's what I'm havin.)
[18:18:48] *** Quits: jusski (~user@78-63-85-123.static.zebra.lt) (Ping timeout: 256 seconds)
[18:22:07] *** Joins: remon (~remon@103.161.68.192)
[18:23:20] *** Joins: nuxil (~nuxil@141.195.51.213)
[18:24:18] *** Joins: abip20 (~abdullah@user/abip20)
[18:24:47] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[18:24:47] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[18:24:47] *** Joins: wroathe (~wroathe@user/wroathe)
[18:30:17] *** Quits: freakazoid12345 (~matt@2603-9000-cf0f-80e3-0ca4-2f26-b042-b2f1.inf6.spectrum.com) (Read error: Connection reset by peer)
[18:31:02] *** Joins: freakazoid12345 (~matt@2603:9000:cf0f:80e3:ca4:2f26:b042:b2f1)
[18:37:07] *** Joins: meator (~meator@user/meator)
[18:38:35] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[18:38:35] *** Quits: justache (~justache@user/justache) (Ping timeout: 256 seconds)
[18:39:38] <asd> ,cc long long l = INT_MAX+1; int i = l;
[18:39:41] <candide> asd: [warning: integer overflow in expression of type 'i​nt' results in '-2147483648' [-Woverflow]] no output: l = -2147483648; i = -2147483648
[18:39:59] <asd> ,cc long long l = INT_MAX; int i = l;
[18:40:01] <candide> asd: no output: l = 2147483647; i = 2147483647
[18:41:13] *** Joins: penguino (~mrpenguin@user/mrpenguin)
[18:41:25] <asd> hmm, so what would be the safe way to move a long long to a int? int i = l > INT_MAX ? INT_MAX : l; ?
[18:42:03] <bparker> depending on the value it may never be safe to do so
[18:42:55] *** Quits: bliminse (~bliminse@host86-162-147-196.range86-162.btcentralplus.com) (Quit: leaving)
[18:48:08] <NRK[m]> why not use another 64bit type?
[18:48:57] <NRK[m]> also what you wrote is just rounding the value down, it's not a "correct" conversion
[18:49:32] <Bou> fizzie: you were right, the extra __ assignment shouldn't have been there, https://bpa.st/IT3A
[18:49:45] *** Joins: justache (~justache@user/justache)
[18:50:42] <asd> NRK[m]: because of the expected return type that I don't control, i need the value from long long to be returned as a int if it can fit inside a int
[18:51:55] *** Quits: penguino (~mrpenguin@user/mrpenguin) (Remote host closed the connection)
[18:52:05] <asd> NRK[m]: what would a correct conversion look like if I need to get a long long inside an int. i dont mind defaulting to INT_MAX or some other value
[18:52:54] <NRK[m]> i don't think there's a correct way to put a long that's >INT_MAX into an int
[18:53:08] *** Quits: Dreg- (~Dreg@fr33project.org) (Read error: Connection reset by peer)
[18:53:13] *** Joins: Dreg (~Dreg@fr33project.org)
[18:53:18] <NRK[m]> if you don't mind it being rounded to INT_MAX then what you posted is fien
[18:53:24] <NRK[m]> s/fien/fine/
[18:54:30] *** Quits: justache (~justache@user/justache) (Ping timeout: 256 seconds)
[18:54:39] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[18:54:39] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[18:54:39] *** Joins: wroathe (~wroathe@user/wroathe)
[18:55:04] <asd> alright ill stick to `int i = l > INT_MAX ? INT_MAX : 0;` the shouldn't be negative in my case
[18:55:05] *** Joins: quartz (~quartz@user/quartz)
[18:55:23] *** Quits: sheb (~sheb@31.223.228.71) (Quit: Leaving)
[18:56:04] <NRK[m]> why not use `unsigned i` if you're sure there won't be any negatives
[18:57:06] <asd> because i cannot change the return type of the function
[18:57:37] <asd> it's not my decision. i'd rather have it return a long long considering the numbers can get ridicilous
[18:58:02] *** Joins: bliminse (~bliminse@host86-162-147-196.range86-162.btcentralplus.com)
[18:58:05] <NRK[m]> hmm...
[18:58:49] *** Joins: justache (~justache@user/justache)
[18:58:56] <asd> its cool, soon it will become someone elses problem
[18:59:33] *** Quits: slidercrank (~slidercra@user/slidercrank) (Ping timeout: 256 seconds)
[18:59:36] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[19:00:38] *** Quits: avar (avar@vm.nix.is) (Quit: Lost terminal)
[19:00:55] *** Joins: Burger (~textual@user/burger)
[19:05:19] *** Joins: cation21 (cation@user/cation)
[19:05:20] *** Joins: Zenton (~user@user/zenton)
[19:05:22] *** Quits: dermato (~dermatobr@cpe-70-114-219-76.austin.res.rr.com) (Quit: WeeChat 3.1)
[19:05:50] *** Quits: cation (cation@user/cation) (Ping timeout: 256 seconds)
[19:08:02] *** Joins: rgrinberg (~textual@200.5.63.76)
[19:08:42] *** cation21 is now known as cation
[19:09:18] *** Joins: lightningwright (~lightning@user/lightningwright)
[19:11:51] *** Quits: justache (~justache@user/justache) (Read error: Connection reset by peer)
[19:12:32] *** Joins: justache (~justache@user/justache)
[19:14:01] *** Joins: penguino (~mrpenguin@user/mrpenguin)
[19:18:54] *** Quits: oxymoron93 (~oxymoron9@212.62.38.106) (Quit: Client closed)
[19:20:02] *** candide sets mode: -o candide
[19:20:10] *** Joins: jusski (~user@78-63-85-123.static.zebra.lt)
[19:21:21] *** Joins: avar (avar@vm.nix.is)
[19:22:08] *** Joins: FFY00_ (~FFY00@archlinux/trusteduser/ffy00)
[19:22:13] *** Quits: avar (avar@vm.nix.is) (Client Quit)
[19:23:02] <quartz> Hello. I'm designing a simple program that accesses a database of text messages. The program asks the user for input, and prints any matching lines of text from the database. This is what I wrote: https://bpa.st/LBEQ however, the output should print one line per entry in the database, and sadly, I'm getting output like this: https://bpa.st/2RLA
[19:23:36] *** Joins: avar (avar@vm.nix.is)
[19:23:51] <quartz> Line 3 for example prints entry 8 and 116 on the same line, which is wrong. I think the problem lies in the while loop at line 103 of my code, but I can't figure out why it does not print the \n at some lines....
[19:23:57] *** Joins: zer0bitz (~zer0bitz@dsl-hkibng32-54fbfb-173.dhcp.inet.fi)
[19:23:58] <quartz> I feel I'm doing everything correctly....
[19:24:44] *** Quits: FFY00 (~FFY00@archlinux/trusteduser/ffy00) (Ping timeout: 252 seconds)
[19:24:55] *** Quits: rgrinberg (~textual@200.5.63.76) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[19:25:06] *** Quits: remon (~remon@103.161.68.192) (Quit: Leaving)
[19:27:58] <Bou> Isn't 40 bytes simply too small for the string? 
[19:28:19] *** Parts: Thedarkb1-Deskto (~Thedarkb@2001:bb6:b403:e042:50c0:a5a0:d348:3603) (Leaving)
[19:28:23] *** Joins: hxztnxt (~hxztnxt@ceduroam31.us.es)
[19:28:23] *** Joins: Thedarkb1-Deskto (~Thedarkb@2001:bb6:b403:e042:50c0:a5a0:d348:3603)
[19:28:26] <Thedarkb1-Deskto> misclick
[19:28:35] <quartz> Bou: Oh yeah...
[19:28:37] <quartz> wow
[19:28:44] <hxztnxt> dave0: u still around?
[19:28:51] <hxztnxt> dave0:u still around?
[19:28:56] <quartz> Let me try to make it 57 bytes
[19:29:11] *** Joins: stow4ke (~kzn@143.44.164.87)
[19:29:22] <fizzie> Also, `snprintf` returns the size of the string it would have written, not the size it actually wrote.
[19:29:32] <fizzie> You could just make it `sizeof buffer`, since the buffer's declared right above.
[19:30:03] <Bou> that's causing the � character on line 11
[19:30:52] *** Joins: AbleBacon (~AbleBacon@user/AbleBacon)
[19:31:14] *** Joins: rgrinberg (~textual@200.5.63.76)
[19:31:32] <quartz> fizzie: Oh yeah 
[19:31:33] *** Joins: hxx (~hxx@c-24-30-27-91.hsd1.ga.comcast.net)
[19:31:37] <quartz> OK let me try that
[19:32:34] *** justache is now known as justSleigh
[19:33:36] <quartz> I can't believe I didn't get that error
[19:33:45] <quartz> But now it works. Thanks guys
[19:34:53] *** Joins: nvmd (~nvmd@user/nvmd)
[19:37:11] *** Quits: Sheilong (uid293653@id-293653.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[19:39:31] *** Quits: g0z (gauze@entropy.tmok.com) (Ping timeout: 245 seconds)
[19:40:06] *** Joins: g0z (gauze@entropy.tmok.com)
[19:40:42] <hxztnxt> I have to read a file in parallel using multiple threads. Every thread is given a 1kB chunk to process and then is given another 1kB chunk. Then the result has to be printed, but take into account that it has to be done in order (first chunk, then second...). So my question is, what approach should I follow in order to make the threads keep working whenever they're finished? Should I create a private buffer for each thread and stash there the chunk after 
[19:40:42] <hxztnxt> it has been processed so it can keep processing new chunks? 
[19:40:43] *** Quits: Burger (~textual@user/burger) (Quit: Textual IRC Client: www.textualapp.com)
[19:41:42] <hxztnxt> or should I take a different approach?
[19:42:29] <hxztnxt> like creating many threads, so it doesnt matter whether some a sleeping because there are many more working?
[19:42:47] *** Joins: monkey_ (~user@181.114.17.106)
[19:45:18] <riv> is this some kind of exercise?
[19:45:40] *** Joins: NEYi (~NEYi@109.251.216.38)
[19:45:43] <hxztnxt> like college related you say?
[19:47:16] <hxztnxt> im doing this in my free time
[19:50:26] *** Joins: LordJohn (~lordjohn@l37-192-203-250.novotelecom.ru)
[19:51:17] <Bou> does the processing take longer than printing the result?
[19:51:27] *** Quits: penguino (~mrpenguin@user/mrpenguin) (Ping timeout: 276 seconds)
[19:51:32] <hxztnxt> yes
[19:52:43] <riv> oh youre processing it too, I misunderstood that you were just reading and printing
[19:52:54] <riv> (for which threads would be pointless)
[19:53:29] <hxztnxt> you have to print the processed result
[19:53:40] <hxztnxt> (in order)
[19:54:28] <Bou> so, a global variable "int last_printed" and have the threads wait until it's their time to print?
[19:55:04] <hxztnxt> that's the thing, we dont want them to wait, they have to keep working!
[19:55:33] <hxztnxt> so probably we should stash the processed chunk and go on with next one
[19:56:31] <Bou> but if you have more threads than logical cores, assuming processing takes longer than printing, there will always be data ready
[19:57:11] *** Joins: reumeth (~reumeth@user/reumeth)
[19:57:35] <hxztnxt> maybe one thread is slower than others
[19:58:26] <hxztnxt> so chunks 2,3 have finished, but they have to wait for 1 to finish before they can print
[19:59:36] <riv> you can use a queue to store results
[20:00:16] *** Quits: tusko (~yeurt@copyfree/advocate/tusko) (Remote host closed the connection)
[20:00:29] <riv> and print result 1 2 3 etc. from the queue when they arrive
[20:00:32] *** Joins: tusko (~yeurt@copyfree/advocate/tusko)
[20:00:51] <hxztnxt> are queues implemented in c?
[20:00:54] <riv> maybe queue  is the wrong name, it's really just a dumping ground
[20:01:15] <riv> no, and it could be done as a list or anything else. queue was not the important part sorry
[20:02:35] <Twix> hxztnxt, which operating system do you use? Usually your operating system has some constructs for synchronization. Like queues
[20:02:51] <hxztnxt> POSIX based
[20:03:16] <hxztnxt> im using conditional variables and mutexs
[20:04:10] *** Quits: quartz (~quartz@user/quartz) (Quit: WeeChat 3.3)
[20:04:46] <Bou> hm `pthread_t threads[10];` and assign each block N to threads[N%10]
[20:05:28] <Bou> when N is up for printing it will have 10 "iterations" to process it, so one being a bit slower than the other won't hurt I think
[20:05:46] <Twix> hmm, a queue is not that complicated. You could build your own
[20:06:25] *** Quits: jusski (~user@78-63-85-123.static.zebra.lt) (Ping timeout: 256 seconds)
[20:07:45] <riv> the ideal would be a tuple space
[20:08:00] <riv> because you just want to put numbered results in: (1, result_1) 
[20:08:12] <riv> and blocking pull results out by index
[20:12:41] *** Joins: jscottb_ (~jscottb@2600:1700:2063:35d0:e12d:6d38:88ee:cace)
[20:15:32] *** Quits: jscottb__ (~jscottb@cpe-173-92-212-35.carolina.res.rr.com) (Ping timeout: 256 seconds)
[20:15:58] *** Quits: nvmd (~nvmd@user/nvmd) (Quit: Later, nerds.)
[20:20:10] *** Quits: hxx (~hxx@c-24-30-27-91.hsd1.ga.comcast.net) (Quit: Leaving)
[20:22:36] *** Quits: stow4ke (~kzn@143.44.164.87) (Quit: leaving)
[20:22:52] <phox> yeah if you want a queue discover ringbuffers probably
[20:22:57] <phox> lockless queue
[20:23:05] <phox> fixed size though
[20:23:38] <phox> and 1 reader 1 writer but you can have a thread handle that if needed, or just switch to a locking multi-reader/writer queue, whichever
[20:25:11] *** Quits: simon323 (~simon323@2409:8a34:468:83d0:793b:4721:5b34:60ac) (Quit: simon323)
[20:25:41] <riv> 1 reader multiple writers
[20:25:43] <riv> is the situation here
[20:26:20] *** Joins: Betal (~Betal@user/betal)
[20:26:51] *** Joins: strajder (~strajder@user/strajder)
[20:28:12] *** Joins: monkey_` (~user@181.114.17.106)
[20:28:40] <phox> then yeah, locking or a thread that coalesces other 1:1 queues
[20:28:57] *** Joins: tolog (~tolog@89.36.78.165)
[20:29:02] <phox> and it has to spin if it's a thread, so locking is less wasteful
[20:29:38] *** Quits: monkey_ (~user@181.114.17.106) (Ping timeout: 252 seconds)
[20:29:47] <riv> threaded stuff is so fun to design and implement from scratch
[20:29:50] <riv> but horrible to maintain :P
[20:30:02] <riv> and debug
[20:30:32] *** Joins: Alhazred (~Alhazred@s91904425.blix.com)
[20:33:10] *** Joins: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net)
[20:34:00] *** Joins: mhmd_ (~mhmd@85.96.71.179)
[20:35:30] *** Quits: mhmd_ (~mhmd@85.96.71.179) (Client Quit)
[20:36:35] *** Joins: mahmutov (~mahmutov@5.176.7.214)
[20:37:10] *** Joins: seninha (~seninha@user/seninha)
[20:42:43] *** Techcable_ is now known as Techcable
[20:42:44] *** Quits: rgrinberg (~textual@200.5.63.76) (Ping timeout: 256 seconds)
[20:43:08] *** Joins: charadon (~charadon@155.138.164.183)
[20:43:14] *** Joins: boB_K7IQ (~boB_K7IQ@ip98-177-87-213.ph.ph.cox.net)
[20:43:46] *** Quits: alch (~alch@151.34.0.50) (Read error: Connection reset by peer)
[20:43:52] *** Joins: arinov (~arinov@178.240.181.140)
[20:45:20] *** Quits: LordJohn (~lordjohn@l37-192-203-250.novotelecom.ru) (Read error: Connection reset by peer)
[20:45:36] *** Joins: Macuser (~Macuser@216.30.159.201)
[20:47:02] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Quit: Ex-Chat)
[20:47:54] *** Joins: alch (~alch@151.68.44.64)
[20:50:32] *** Quits: stonkey (~stonkey@user/stonkey) (Ping timeout: 252 seconds)
[20:53:06] *** Quits: tom5760 (73d4025b14@user/tom5760) (Remote host closed the connection)
[20:53:13] *** Joins: tom5760 (73d4025b14@user/tom5760)
[20:53:17] *** Quits: the_lanetly_052 (~the_lanet@194.135.152.219) (Ping timeout: 252 seconds)
[20:53:46] *** Quits: bbju (~bbju@103.144.148.218) (Quit: Client closed)
[20:56:35] *** Quits: smallvil_ (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Ping timeout: 252 seconds)
[21:01:01] *** Joins: stow4ke (~root@157.245.144.252)
[21:01:43] *** Quits: arinov (~arinov@178.240.181.140) (Ping timeout: 252 seconds)
[21:03:01] *** Joins: _kimchi (~kimchi@87.247.123.112)
[21:06:41] *** Joins: nuxil_ (~nuxil@141.195.51.213)
[21:09:05] *** Joins: arinov (~arinov@178.240.181.140)
[21:09:32] *** monkey_` is now known as monkey_
[21:09:47] *** Quits: nuxil (~nuxil@141.195.51.213) (Ping timeout: 252 seconds)
[21:10:23] *** Joins: hxx (~hxx@c-24-30-27-91.hsd1.ga.comcast.net)
[21:12:24] *** Joins: Sheilong (uid293653@id-293653.ilkley.irccloud.com)
[21:12:53] <hxx> Is it true malloc is a risky function to use? Or am I mistaken?
[21:13:15] <edk> depends on your value of "risky" i guess
[21:14:15] <edk> manual memory management is risky in that things will go badly if you make a mistake but it's also the only way to solve some problems in C
[21:15:04] <hxx> Do you recommend a checker other than cppcheck? Better be safe than sorry.
[21:16:15] <floatcomplex> what are you trying to check
[21:16:16] <edk> i think coverity is widely considered to be the best one but it's not cheap
[21:16:35] <edk> none of these tools will catch everything, though
[21:16:48] <floatcomplex> you should use all of the tools built into your compiler. when writing and testing new code, compile with, at a minimum, -Wall -Wextra -Wshadow -g -fsanitize=address,undefined
[21:17:09] <floatcomplex> assuming it passes all of that, compile it again with -Wall -Wextra -Wshadow -Os
[21:17:29] <edk> you make some very strange choices
[21:17:31] <floatcomplex> (there are some warnings that cannot be issued at the default -O0)
[21:17:50] <floatcomplex> edk: elaboraet?
[21:18:06] <edk> unrelatedly: address sanitizer is very nice, but it obviously won't catch problems that you don't hit in your testing
[21:18:07] *** Quits: monkey_ (~user@181.114.17.106) (Killed (tantalum.libera.chat (Nickname regained by services)))
[21:18:23] <zwr> link time optimization also allows for more warnings
[21:18:44] *** Joins: Guest4115 (~user@181.114.17.106)
[21:18:57] *** Quits: Guest4115 (~user@181.114.17.106) (Remote host closed the connection)
[21:19:29] <edk> -Wextra includes some pretty stupid warnings like -Wunused-parameter and -Wmissing-field-initializers
[21:20:13] <floatcomplex> edk: i pretty much only use designated initializers so that doesn't bother me
[21:20:24] *** Quits: arinov (~arinov@178.240.181.140) (Quit: WeeChat 3.3)
[21:20:43] *** Quits: stow4ke (~root@157.245.144.252) (Quit: Lost terminal)
[21:22:13] <edk> yeah fair enough, though it's also not doing any good then
[21:22:58] *** Joins: Akuli (~Akuli@213.216.211.96)
[21:23:03] *** Quits: ProperN[out] (~holyShizn@user/propernoun) (Ping timeout: 268 seconds)
[21:23:32] <floatcomplex> anyway, it would be a shame to jump straight to something like coverity having not used any of the stuff built into your c compiler
[21:24:16] *** Joins: arinov (~arinov@178.240.181.140)
[21:24:24] <floatcomplex> aiui both gcc and clang have builtin static analysis tools now too, although idk if the maturity level of gcc's is anywhere near clang's 
[21:25:06] *** Joins: bolovanos__ (~bolovanos@user/bolovanos)
[21:26:27] <zwr> oohh I didn't know GCC had a static analyzer now, I will check it out
[21:28:06] *** Joins: Inline (~Inline@aftr-37-201-240-100.unity-media.net)
[21:28:35] *** Quits: The_Blode (~Blode@user/the-blode/x-7164444) (Ping timeout: 256 seconds)
[21:28:51] *** Quits: bolovanos_ (~bolovanos@user/bolovanos) (Ping timeout: 252 seconds)
[21:29:10] <zwr> I quite like the new tools we got in programming in the last decade
[21:31:10] *** Joins: PortableDave (~portabled@14-201-65-57.static.tpgi.com.au)
[21:31:32] *** Joins: liiix (~liiix@user/liiix)
[21:32:19] *** Joins: cyphics (~cyphix@user/cyphics)
[21:33:20] *** Joins: The_Blode (~Blode@user/the-blode/x-7164444)
[21:35:05] *** Quits: vysn (~vysn@user/vysn) (Ping timeout: 252 seconds)
[21:35:23] *** Quits: PortableDave (~portabled@14-201-65-57.static.tpgi.com.au) (Ping timeout: 256 seconds)
[21:35:46] *** Quits: kdc (~kdc@196.211.197.159) (Quit: Leaving)
[21:37:01] *** Joins: liiix88 (~liiix@user/liiix)
[21:39:07] *** Joins: gabriel_sevecek (~gabriel@188-167-229-200.dynamic.chello.sk)
[21:40:30] *** Quits: liiix (~liiix@user/liiix) (Ping timeout: 256 seconds)
[21:40:58] <pragma-> Maybe it's just me but it feels like there's been a renewed resurgence in interest in creating programming languages lately.
[21:41:13] <hxx> What gives you that idea pragma?
[21:43:02] <pragma-> hxx: Well, by lately, I mean in the last decade. Since 2010 or so. By the emergence of new languages like Zig, Nim, Julia, etc, and the increase of postings on forums about writing parsers and compilers, the publication of various new books and tutorials about creating languages (e.g. Crafting Interpreters, etc).
[21:43:35] *** Quits: gabriel_sevecek (~gabriel@188-167-229-200.dynamic.chello.sk) (Quit: WeeChat 3.3)
[21:43:57] *** Joins: gabriel (~gabriel@188-167-229-200.dynamic.chello.sk)
[21:44:07] *** gabriel is now known as gabriel_sevecek
[21:44:24] <hxx> Well I see this as a good thing to make new languages, I might even make my own in C.
[21:44:38] <hxx> In the end, it's all running on x86 processors.
[21:45:06] *** Joins: acerbic (~acerbic@cs-xdata-50-86-51-12.cspire.com)
[21:45:33] <pragma-> Oh, I forgot about Go and Kotlin too.
[21:45:59] <perro> yeah there's been a resurgence
[21:46:08] <perro> it's much much easier to make a language than it was in 2005 or so
[21:46:13] <pragma-> Haskell isn't new, but I've been reading a few Haskell books recently.
[21:46:52] <hxx> But this trend in so called memory safe languages feels like trendy buzzwords by a marketing team.
[21:46:56] <zwr> already found a false positive on the gcc static analyzer https://paste.debian.net/plainh/4d40b068
[21:47:11] *** Quits: boB_K7IQ (~boB_K7IQ@ip98-177-87-213.ph.ph.cox.net) (Ping timeout: 252 seconds)
[21:47:19] *** Joins: vimart (~vimart@62.60.60.193)
[21:47:27] *** Quits: cart_man (~rynot@host-78-144-121-71.as13285.net) (Quit: Konversation terminated!)
[21:47:28] <pragma-> hxx: oh that reminds me, how could I have forgotten Rust
[21:47:35] *** Quits: nuxil_ (~nuxil@141.195.51.213) (Read error: Connection reset by peer)
[21:47:40] <phox> <3 Rust, mostly
[21:47:50] <phox> could do with less willy-nilly standard library naming
[21:47:52] *** Joins: nuxil_ (~nuxil@141.195.51.213)
[21:47:53] <perro> it activates my ocd
[21:47:56] <phox> otherwise <3 <3
[21:47:59] *** Joins: lleo (~leo@31-161-230-76.mobile.kpn.net)
[21:48:11] <phox> perro: that's a survival mechanism
[21:48:12] <perro> there are so many things to think about in rust, if you want to
[21:48:15] <phox> no OCD, no survive Rust
[21:48:17] *** Joins: boB_K7IQ (~boB_K7IQ@ip98-177-87-213.ph.ph.cox.net)
[21:48:28] <hxx> I was told by /g/ rust bad because mozilla bad and something something SJWs. 
[21:48:33] <zwr> I've been liking C, Scheme. I tried Lua, Python, Perl, Ruby many years before and hated them all
[21:48:47] <pragma-> I used to be deeply in love with Perl.
[21:48:56] <fizzie> "In the end, it's all running on x86" is an odd comment, given that there's probably more computing happening on ARM than x86 chips. At least in terms of sales volume, according to a random article.
[21:49:08] <phox> Perl you can legit write good code in, but back out in reality other people write code in it too and then everything goes sideways
[21:49:19] <phox> tbh other people writing C can be a big problem, but less so and in less creative ways
[21:49:21] <zwr> also shell is good unless you actually try to write scripts with it instead of using it as a command line
[21:49:40] <phox> zwr: you can write some pretty solid stuff in shell there are just limits
[21:50:00] <pragma-> But lately I hate that it lacks type annotations (optional/gradual of course) and that it doesn't have an internal AST. "Only perl can parse Perl." Too many special variables named after punctuation instead of words. Etc.
[21:50:03] <phox> it's still my preferred application glue language, although I really should start using Py there but that's ANOTHER dependency
[21:50:15] <hxx> I'm going to make a C with classes language, but not the monstrosity that C++ became. Not really D either.
[21:50:17] <zwr> yeah, I've tried my best and learned some caveats and best practices from tools like shellshock, but they scripts I write still come out horrible
[21:50:17] <phox> pragma-: I mean, C++ too, more or less :D
[21:50:26] <phox> hxx: tried ObjC?
[21:50:35] <zwr> the scripts*
[21:50:36] <hxx> No I actually haven't really done much ObjC.
[21:50:45] <phox> I kinda hate the call syntax but it's basically what you said
[21:50:50] <phox> and a proper superset of C unlike C++
[21:50:55] <phox> valid C is valid ObjC
[21:51:01] *** Joins: monkey_ (~user@181.114.17.106)
[21:51:33] <pragma-> Oh, and it really irks me how Perl is starting to use and accept the use of the unary + operator for parsing disambiguations.
[21:51:38] <pragma-> It really irks me.
[21:53:07] *** Joins: Guest1723 (~Guest17@eth-west-pareq2-46-193-4-100.wb.wifirst.net)
[21:53:39] <perro> py has been more useful than perl for as long as I've been doing this (05)
[21:53:49] <perro> py just as so many useful ibraries and that gap gets wider every dya
[21:54:16] <perro> esp with the scientific stack
[21:54:50] *** Quits: hxztnxt (~hxztnxt@ceduroam31.us.es) (Remote host closed the connection)
[21:55:22] <pragma-> It's a shame Perl6/Raku collapsed under in-fighting.
[21:56:34] <pragma-> Nim does look interesting.
[21:56:51] <perro> the nim team is smart
[21:57:07] <perro> it's a goodd language, I think they are already getting eclipsed by newer languages like zig that are doing similar things
[21:57:24] <perro> nim is very pascal influenced iirc
[21:57:26] <hxx> Nim is kinda cheating to call itself its own language when it just transpiles nim code into C code.
[21:57:39] <hxx> perro, Nim was originally written in Object Pascal.
[21:57:39] <perro> that's what's nice about it
[21:57:41] <Techcable> Zig looks interesting. Only problem I had using it was that it's very unstable.
[21:57:50] <perro> yeah
[21:57:53] <Techcable> Stuff breaks constantly :(
[21:57:55] <perro> give zig a few years
[21:58:03] <Techcable> And no standard librrary
[21:58:18] <Techcable> s/no/poor
[21:59:18] <Techcable> Yeah, a few years from now I definitely foresee Zig replacing many uses of C
[21:59:27] <Techcable> Rust is just too heavyweight for many applications :(
[21:59:36] <perro> yeah it's too much
[21:59:39] <perro> tries to do too much
[21:59:41] *** Joins: singularity00 (~singulari@85.187.64.126.client.entry.bg)
[22:00:05] <Techcable> I mean I love Rust but sometimes zero-cost abstractions aren't really zero-cost
[22:00:15] <perro> no there's a pretty constant mental cost
[22:00:22] <Techcable> oh yeah
[22:00:32] <Techcable> but also an indirect runtime cost
[22:00:44] <Techcable> Big tax on binary size and a bunch of stuff the compiler has to optimize
[22:00:53] <Techcable> Rust is really a replacement for C++, not a replacement for C
[22:01:03] <floatcomplex> if the wonderful new tooling we have at our disposal for C in the last ten years had arrived just a bit sooner, and was more widely known, a lot of these other languages-of-the-day wouldn't exist
[22:01:29] <floatcomplex> meh, who am i kidding, people don't have the discipline to improve an existing thing rather than try to replace it with something shiny
[22:01:47] <perro> I wonder how much those newer languages pushd that progress
[22:01:55] <Techcable> floatcomplex: What tooling specifically makes the quirks of C more palatable?
[22:02:02] *** Quits: Zenton (~user@user/zenton) (Ping timeout: 252 seconds)
[22:02:03] <floatcomplex> Techcable: -fsanitize=address,undefined for one
[22:02:06] <Techcable> Is there a build system or something tat makes it nicer
[22:02:15] <Techcable> floatcomplex: Oh yeah AddressSanitizer is great
[22:02:21] <floatcomplex> but also just the general huge improvement in warnings that compilers emit
[22:02:26] <Techcable> Yes
[22:02:33] *** Quits: nuxil_ (~nuxil@141.195.51.213) (Read error: Connection reset by peer)
[22:02:36] <floatcomplex> gcc had stagnated for decades before clang came along and lit a fire under their ass, now they're both way better
[22:02:46] <perro> competition++
[22:02:54] <Thedarkb1-Deskto> They occasionally pick up issues with system libraries though, and there's no way of making them ignore them.
[22:02:59] *** Joins: treble (~treble@75.76.29.142)
[22:03:08] <Thedarkb1-Deskto> Link Libtcl? Enjoy your double free warning.
[22:03:16] *** Quits: treble (~treble@75.76.29.142) (Changing host)
[22:03:16] *** Joins: treble (~treble@user/treble)
[22:03:25] <floatcomplex> submit a bug report
[22:03:31] <zwr> I like Meson as a build system, it's like CMake done right
[22:03:43] <floatcomplex> if you are using libtcl and getting a double free warning, that's not not your problem
[22:03:44] <Techcable> Certainly warnings and safety C/C++ has improved, but I would argue in many cases, it's better to build safety into the design (like Rust) then try and patch it on later
[22:04:06] <hxx> I find pascal to be a legitimate language in its own right. Anyone who thinks it's a toy or hobbyist language like it's still 1990 can put a sock in it.
[22:04:12] <floatcomplex> Techcable: complexity breeds bugs, and expressing simple ideas in rust is very complex 
[22:04:17] *** Quits: boB_K7IQ (~boB_K7IQ@ip98-177-87-213.ph.ph.cox.net) (Ping timeout: 256 seconds)
[22:04:18] <Techcable> I agree
[22:04:19] <floatcomplex> not all bugs are memory bugs
[22:04:22] <perro> wirth was a genius
[22:04:23] <perro> is?
[22:04:37] <Techcable> Pascal is amazing
[22:04:42] <Techcable> zwr: Thanks for the suggestion! Do you have any good resources to learn it (Meson)?
[22:05:01] *** Joins: slidercrank (~slidercra@user/slidercrank)
[22:05:03] <perro> (wirth is still alive)
[22:05:08] *** Joins: boB_K7IQ (~boB_K7IQ@ip98-177-87-213.ph.ph.cox.net)
[22:05:11] <hxx> Though it's kinda weird seeing begin end used rather than {}, but that's just me.
[22:05:11] *** Joins: nuxil (~nuxil@141.195.51.213)
[22:05:13] <tessio> hi all
[22:05:13] <Techcable> I would totally agree Rust programs tend to be more complex then their C counterparts
[22:05:23] <Techcable> but that's really a fault of C++ too :/
[22:05:43] <Techcable> And often times memory safety bugs are more dangerous than other bugs
[22:05:46] <floatcomplex> well yes, the value in the existence of rust is that it shuts down any discussions about c++ ever being allowed in the linux kernel
[22:05:51] <floatcomplex> because it's a better alternative than c++
[22:05:54] * Techcable laughs
[22:06:03] <floatcomplex> but that's not the same thing as saying all c code should be rust code instead
[22:06:06] <Techcable> Oh no
[22:06:18] <Techcable> I totally agree, Rust replaces C++ but it is not a replacement for C
[22:06:31] *** Joins: john99 (~johnny@138.62.221.87.dynamic.jazztel.es)
[22:06:46] <Techcable> Minimum rust binary size is 1MB, it's almost impossible to build without panics/hidden control flow
[22:06:49] <hxx> You think a C compiler can be written in just pascal?
[22:06:56] <floatcomplex> hxx: do it
[22:07:07] <Techcable> In fact Rust still aborts on OOM *laughs*
[22:07:12] <zwr> Techcable: the entire user documentation takes 2 days to read through https://mesonbuild.com/Tutorial.html https://mesonbuild.com/Manual.html . After you read through that and can write a meson definition for a simple library or program you'll be using the reference manual for anything you forget or exact details not covered by the user manual
[22:07:19] <Techcable> Thanks!
[22:07:31] <Techcable> Honestly I'm just kind of scarred by my CMake/Makefile experience
[22:07:44] <hxx> I find CMake to be better than traditional make.
[22:07:50] <john99> Makefiles are nice
[22:07:55] <floatcomplex> Techcable: i bet you can build a smaller rust binary if musl is the underlying libc
[22:07:57] *** Joins: cvmn (~caveman@gateway/tor-sasl/caveman)
[22:08:11] <Techcable> Sometimes. It's still very large
[22:08:11] <zwr> yes I used to be afraid of stuff like using convenient extensions because I knew making them portable would be painful
[22:08:27] <zwr> now meson makes it a pleasant experience
[22:08:39] <Techcable> One of the design decisions Rust made is to almost always use generics for polymorphism
[22:08:50] *** Quits: liiix88 (~liiix@user/liiix) (Quit: Client closed)
[22:09:31] <Techcable> Combined with an implementation guarentee that each instantiation of a generic function is compiled seperately, you end up with massive bloat
[22:10:11] <zwr> john99: Make is actually okay for trivial programs but you'll pretty much write your own build system from scratch with it if you try to do anything more
[22:10:50] <zwr> when I was reading APUE the book got into testing and I was still using Make, and of course I wrote my own testing framework in shell
[22:11:11] <Techcable> It's basically the same problem as bloat from C++ templates (of course Rust generics are implemented in a sane way without silly header/impl distinctions)
[22:11:19] *** Joins: kenanmarasli (~kenanmara@user/kenanmarasli)
[22:11:48] <floatcomplex> any new build system that still requires any sort of project-specific configuration file at all, other than just a directory of source code, is a missed opportunity
[22:12:16] *** Joins: zyweo (~Svew@user/zyweo)
[22:12:33] *** Joins: Hexmind (~Hexmind@modemcable049.25-131-66.mc.videotron.ca)
[22:12:34] <floatcomplex> the logic for how a "correct" makefile should be built from a directory of C source code is damn near scriptable in a project-agnostic way, and is in fact scriptable if some prerequisites are met by the project's layout
[22:13:18] <Techcable> Agreed.
[22:13:34] <Techcable> Also I would not use Make directly ;)
[22:13:42] <floatcomplex> well i do
[22:13:45] <floatcomplex> and it serves me well
[22:14:10] <floatcomplex> but for the most part the makefiles i write by hand are the same ones that a script would write, given a look at the code directory
[22:14:33] <floatcomplex> it's just that my version of that script is in bash and doesn't scale well :)
[22:15:11] <floatcomplex> point is, something as complicated as CMake or Meson should just...figure it out, without having to be told anything
[22:15:26] <floatcomplex> if a bash script can do an ok job at it, a more ambitious project should be able to do a good job
[22:15:42] <john99> well, i touched the limit of makefiles when i began a old complex proyect with multiple libraries and sorta of a depency tree, but i ended compiling the things in separated steps and after a bit of refactor fit well in the makefile
[22:15:47] *** Quits: lleo (~leo@31-161-230-76.mobile.kpn.net) (Ping timeout: 252 seconds)
[22:17:50] <asd> https://git.zx2c4.com/wireguard-tools/tree/src/wincompat/include/hashtable.h # what would be a appropriate way hash and store a int rather than char*?
[22:18:21] <zx2c4> asd: ill rewrite it for you
[22:18:24] <zx2c4> int? not unsigned int?
[22:18:44] <john99> uintXXX_t better no?
[22:18:59] <zx2c4> are the ints randomly distributed? or do you need them actually be hashed
[22:19:00] <asd> yes `int` is fine. is it that much work to rewrite it?
[22:19:25] <asd> the ints are random
[22:19:25] <john99> no
[22:19:33] <john99> no much rework to rewrite
[22:19:33] <floatcomplex> the code would be a lot simpler i imagine
[22:19:43] <floatcomplex> (and it's already simple)
[22:20:08] <asd> floatcomplex: my concern was that hashing algorithms are fit for certain types of data
[22:20:36] <asd> my goal is to have the desired int to be looked up in O(n) time
[22:21:09] <hxx> Is it mandatory writing the C standard library *MUST* be written in C?
[22:21:17] <floatcomplex> hxx: no
[22:21:30] <floatcomplex> hxx: but i'm only aware of one attempt to write it in c++ and it's not going well
[22:21:41] <hxx> I'll pull a MacOS and write on in pascal for shits and giggles.
[22:21:58] <floatcomplex> hxx: i thought you were writing a compiler, that's not the same as writing a libc
[22:22:00] <floatcomplex> don't write a libc
[22:23:00] *** Joins: mjbatty (~mjbatty@82.2.17.205)
[22:23:27] <hxx> Why is writing a libc bad?
[22:23:51] <john99> write a libc and fix all functions that handle char* (strcat/printf and etc)
[22:24:37] <floatcomplex> hxx: write a compiler first. then, if you're still alive, write a libc. don't commit to doing both at once, there's no reason to do that
[22:24:56] *** Quits: john99 (~johnny@138.62.221.87.dynamic.jazztel.es) (Remote host closed the connection)
[22:25:16] *** Quits: Guest1723 (~Guest17@eth-west-pareq2-46-193-4-100.wb.wifirst.net) (Ping timeout: 256 seconds)
[22:25:41] <hxx> I only wanted to write my own libc because I was thinking of doing an OS as a hobby, and figured it would be less work to make a libc from scratch then port glibc.
[22:26:02] <floatcomplex> well glibc would be a bad choice yeah
[22:26:04] *** Joins: bolovanos (~bolovanos@user/bolovanos)
[22:26:12] <floatcomplex> porting musl would be easier-ish, porting newlib is kinda trivially easy
[22:26:55] <floatcomplex> (i only say ish because musl assumes linux)
[22:28:59] *** Quits: bolovanos__ (~bolovanos@user/bolovanos) (Ping timeout: 252 seconds)
[22:29:21] *** Quits: boB_K7IQ (~boB_K7IQ@ip98-177-87-213.ph.ph.cox.net) (Ping timeout: 252 seconds)
[22:30:40] *** Joins: quartz (~quartz@user/quartz)
[22:31:04] *** Joins: boB_K7IQ (~boB_K7IQ@ip98-177-87-213.ph.ph.cox.net)
[22:33:39] <hxx> Anyways. The root reason of why I want to write my own compiler and own libc is because I am doing hobbyist OS dev stuff for fun in my spare time. I figured that I might as well make both of them myself in either C or pascal.
[22:34:44] *** Quits: mrig (~AdiIRC@user/mrig) (Quit: Going offline, see ya! (www.adiirc.com))
[22:34:49] *** Joins: nvmd (~nvmd@user/nvmd)
[22:34:51] <floatcomplex> that's a fairly significant undertaking, have you considered instead making a *checks notes* arduino dog walking coffee maker
[22:35:08] *** Quits: boB_K7IQ (~boB_K7IQ@ip98-177-87-213.ph.ph.cox.net) (Remote host closed the connection)
[22:35:28] <zwr> I've been reading The Standard C Library, you might want to read it to help with writing your own libc, I'm reading it primarily because already in the first chapter it's teaching me new techniques to write stuff that I didn't know
[22:35:29] *** Joins: boB_K7IQ (~boB_K7IQ@ip98-177-87-213.ph.ph.cox.net)
[22:35:45] <hxx> I'll keep that in mind zwr. Thanks.
[22:36:16] <Techcable> hxx: Consider looking at how musl works
[22:36:29] <Techcable> I find it very enlightening and readable
[22:36:30] *** Quits: riksteri (riksteri@gateway/vpn/airvpn/riksteri) (Quit: riksteri)
[22:37:03] *** Quits: zyweo (~Svew@user/zyweo) (Ping timeout: 252 seconds)
[22:37:14] <hxx> Will do.
[22:37:25] *** Joins: mrig (~mrig@user/mrig)
[22:37:58] *** Quits: nuxil (~nuxil@141.195.51.213) (Remote host closed the connection)
[22:38:01] *** Joins: nuxil_ (~nuxil@141.195.51.213)
[22:38:04] <floatcomplex> just don't try to wrap your head around the musl strcspn before your morning coffee
[22:38:14] <Techcable> Also writing compilers is fun, you may want to consider looking at this: https://c9x.me/compile/
[22:38:33] *** Joins: john99 (~johnny@138.62.221.87.dynamic.jazztel.es)
[22:38:52] *** Quits: tessio (~weechat@141.226.73.54) (Remote host closed the connection)
[22:39:00] <Techcable> And for a compiler book I would highly recommend "modern compiler implementation in ml (Andrew Appel)" - it's an excellent book
[22:39:05] *** Joins: liiix (~liiix@user/liiix)
[22:39:09] <Techcable> I have read many many books on compilers and I find that's the best
[22:39:29] *** Joins: zyweo (~Svew@user/zyweo)
[22:39:57] <Techcable> Actually I'd put Crafting Interpreters as the best (although a little more introductory and designed at dynamic languages not C): https://craftinginterpreters.com/
[22:41:08] <Techcable> If you know nothing about compilers, I would recommend you start with Crafting Interpreters and work through that first (that teaches how to write Python/Lua like interpreters). If you want to jump write into C-style compilers use Modern Compiler Implementation
[22:41:18] <Techcable> Sorry for the rant. I like compilers!
[22:41:27] <hxx> Nothing wrong with loving compilers.
[22:44:31] *** Quits: arinov (~arinov@178.240.181.140) (Ping timeout: 256 seconds)
[22:45:06] *** Quits: Haxxa (~Haxxa@125-63-20-105.ip4.superloop.com) (Quit: Haxxa flies away.)
[22:46:00] <zwr> that's a good rant I haven't started with compilers but I will soon, thanks for the recs
[22:46:05] *** Joins: arinov (~arinov@178.240.181.140)
[22:47:18] *** Joins: Haxxa (~Haxxa@89nnjg0xckz9ggn6r5xm.ip6.superloop.com)
[22:47:44] <Techcable> You're welcome. I actually think Crafting Interpreters (part 2) is a pretty good introduction to C too.
[22:48:07] <Techcable> (I mean introduction to C in general)
[22:48:54] <hxx> What makes something "unix-like"? Does it have to explicitly follow POSIX standards for directory structure?
[22:49:26] *** Quits: liiix (~liiix@user/liiix) (Quit: Client closed)
[22:50:24] <Techcable> Yeah I think POSIX compliance is the general litmus test.
[22:51:06] <Techcable> But I think it's also informal philosophy too. For example, preferring file-based configuration in /etc versus something like the windows Registry.
[22:51:32] *** Quits: arinov (~arinov@178.240.181.140) (Ping timeout: 252 seconds)
[22:52:21] <Techcable> Directory structure really varies from system to system. For example, Mac is considered UNIX-like but it puts home directories in /Users/<home> and uses a bunch of other non-standard directories
[22:53:27] <Techcable> I think really the only non-POSIX system I know of is Windows.
[22:53:40] <Techcable> Then for super-unix like there's Plan 9: https://en.wikipedia.org/wiki/Plan_9_from_Bell_Labs
[22:53:54] *** Joins: Satin (uid193953@id-193953.ilkley.irccloud.com)
[22:53:58] <Techcable> If you're interested in super elegant operating system design Plan 9 is interesting (along with microkernels and stuff)
[22:54:10] <hxx> POSIX doesn't seem to really require paths to be in a certain direction.
[22:56:54] *** Joins: liiix (~liiix@user/liiix)
[22:57:11] <hxx> Though \ is used for escape characters and \\ looks kinda ugly.
[22:58:37] <quartz> Hello. I'm trying to simply send a newline character using the "send" function in the sockets API for C. When I use this code: https://bpa.st/QX3Q  gcc tells me: warning: cast to pointer from integer of different size
[22:58:49] *** Quits: _kimchi (~kimchi@87.247.123.112) (Quit: Leaving)
[22:58:51] <quartz> But the newline character should be 1 byte yes? So why doe sit say this?
[22:59:13] <fizzie> You need a pointer.
[22:59:19] <fizzie> As in, `&newLine`, for example.
[22:59:49] <fizzie> `(const char *) newLine` is just the integer value of the character (usually 10) converted to a pointer in an implementation-defined manner, which isn't what you want.
[23:01:14] <quartz> fizzie: But I did send(clntsock, (const char *) buffer, numCharPrinted, 0) where I have char buffer[57];
[23:01:16] <quartz> And it works fine
[23:01:25] *** Joins: superdupond (~Kev@2a01cb0400149f00f03b899acc615d4e.ipv6.abo.wanadoo.fr)
[23:01:44] <fizzie> Yes, because that was an array.
[23:01:50] <fizzie> It doesn't need a cast, by the way.
[23:02:10] *** Quits: meator (~meator@user/meator) (Quit: Leaving)
[23:02:27] <fizzie> The expression `buffer` is (in most contexts) converted to a pointer to the array's first element, so it's more or less as if you had written `send(clntsock, &buffer[0], numCharPrinted, 0)`.
[23:02:39] <fizzie> But `newLine` is not an array, it's a single character, so that doesn't apply.
[23:03:10] <quartz> So, & is just a pointer to the memory address of 'newLine'?
[23:03:22] <fizzie> Unary & is the address-of operator, yes.
[23:03:40] <fizzie> And since the type of the result is `char *`, you don't need a cast there either.
[23:03:48] <fizzie> ,cc char x = 'x'; fwrite(&x, 1, 1, stdout); // valid way to write a single character
[23:03:50] <candide> fizzie: x
[23:04:04] <fizzie> ,cc char x = 'x'; fwrite((const char *) x, 1, 1, stdout); // not what you want
[23:04:07] <candide> fizzie: [warning: cast to pointer from integer of different size [-Wint-to-pointer-cast]] no output: x = 120 'x'
[23:04:35] <fizzie> Hmm, I fear candide's magic sort of ruined that latter example.
[23:04:45] <quartz> Hahaha
[23:05:07] <quartz> fizzie: OK thanks so much
[23:05:08] <NRK[m]> hxx: "unix-like" to me means something that follows the unix philosophy
[23:05:18] <NRK[m]> doesn't have to be POSIX compliant, but is a bonus
[23:06:03] *** Quits: monkey_ (~user@181.114.17.106) (Ping timeout: 256 seconds)
[23:06:08] *** Joins: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net)
[23:06:51] <Mindiell> well, thx again dave0 and Bou : the solution was just to add an include to <string.h>, I totally ignored what the compiler said to me until now and retrieved how to compile it correctly ! <3
[23:07:08] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Remote host closed the connection)
[23:07:50] *** Joins: lionkor (~lionkor@beammp/staff/lionkor)
[23:08:26] *** Quits: hxx (~hxx@c-24-30-27-91.hsd1.ga.comcast.net) (Quit: Leaving)
[23:08:45] *** Quits: ckdCreations (~ckdCreati@147.55.133.139) (Read error: Connection reset by peer)
[23:08:59] *** Joins: ckdCreations (~ckdCreati@147.55.133.133)
[23:09:14] *** Quits: mjbatty (~mjbatty@82.2.17.205) (Quit: Leaving)
[23:09:28] *** Quits: liiix (~liiix@user/liiix) (Ping timeout: 256 seconds)
[23:10:34] *** Quits: osp (~osp@84.19.72.107) (Quit: Leaving)
[23:12:18] *** Quits: cvmn (~caveman@gateway/tor-sasl/caveman) (Ping timeout: 276 seconds)
[23:12:56] *** Quits: vimart (~vimart@62.60.60.193) (Quit: WeeChat 2.8)
[23:13:39] *** Quits: lightningwright (~lightning@user/lightningwright) (Remote host closed the connection)
[23:15:59] *** Joins: jscottb (~jscottb@2600:1700:2063:35d0:e12d:6d38:88ee:cace)
[23:16:17] *** Quits: jscottb_ (~jscottb@2600:1700:2063:35d0:e12d:6d38:88ee:cace) (Ping timeout: 252 seconds)
[23:20:46] *** Quits: jscottb (~jscottb@2600:1700:2063:35d0:e12d:6d38:88ee:cace) (Read error: Connection reset by peer)
[23:22:18] *** Quits: katnis (uid15849@id-15849.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[23:23:02] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
[23:23:45] *** Joins: Thedarkb-Desktop (~Thedarkb@2001:bb6:b403:e042:880d:65a8:d656:32cc)
[23:24:11] *** Quits: Thedarkb1-Deskto (~Thedarkb@2001:bb6:b403:e042:50c0:a5a0:d348:3603) (Read error: Connection reset by peer)
[23:25:57] *** Joins: kuber (~kuber@97-126-3-32.tukw.qwest.net)
[23:29:01] *** Quits: noarb- (~noarb@user/noarb) (Read error: Connection reset by peer)
[23:33:07] *** Joins: BSaboia (~bsaboia@177.37.198.35)
[23:35:40] *** Joins: Feuermagier_ (~Feuermagi@2a02:2488:4211:3400:b6fd:ec18:acf6:f1a8)
[23:36:23] *** Joins: monkey_ (~user@181.114.17.106)
[23:39:23] *** Joins: odoood (~odoood@pool-71-251-227-104.rcmdva.fios.verizon.net)
[23:39:53] <Bou> Mindiell: yeah, that shouldn't even have compiled without the include
[23:41:17] *** Joins: rgrinberg (~textual@152.231.136.22)
[23:42:43] <Bou> ,cc int main() { foo(); } void foo() {}
[23:42:45] <candide> Bou: [warning: implicit declaration of function 'foo' [-Wimplicit-function-declaration]  At top level:  warning: conflicting types for 'foo'; have 'void()'  note: previous implicit declaration of 'foo' with type 'void()']  Success (no output).
[23:42:58] <Bou> ,clang int main() { foo(); } void foo() {}
[23:43:00] <candide> Bou:  warning: implicit declaration of function 'foo' is invalid in C99 [-Wimplicit-function-declaration]  fatal error: conflicting types for 'foo'  note: previous implicit declaration is here
[23:43:48] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Quit: Leaving)
[23:43:56] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[23:44:37] *** Joins: lightningwright (~lightning@user/lightningwright)
[23:46:09] *** Joins: liiix (~liiix@user/liiix)
[23:47:25] *** Quits: rgrinberg (~textual@152.231.136.22) (Ping timeout: 256 seconds)
[23:47:47] *** Joins: cvmn (~caveman@gateway/tor-sasl/caveman)
[23:49:46] <Mindiell> Bou: this is what it said :
[23:49:48] <Mindiell> readpng.c:575:15: warning: implicit declaration of function ‘strtok’; did you mean ‘strtoq’? [-Wimplicit-function-declaration]
[23:49:51] <Mindiell>   575 |         fnp = strtok(buf," \t");
[23:49:54] <Mindiell>       |               ^~~~~~
[23:49:56] <Mindiell>       |               strtoq
[23:50:10] <Mindiell> did the compiler replaced strtok by strtoq (which I even don't know) ?
[23:50:36] <Mindiell> but this would explain much things :D
[23:50:39] <Bou> haha, even better. that's just a suggestion, but still
[23:50:50] *** Quits: liiix (~liiix@user/liiix) (Ping timeout: 256 seconds)
[23:51:09] <Mindiell> ell, later it told the same thing with strcmp and suggests to add string.H
[23:51:50] <Mindiell> from there, I got no more message for this specific file. The good point is now, I can play again <3
[23:52:02] <Mindiell> I did no C for so looong !
[23:52:41] <asd> zx2c4: i didnt hear from you. if you dont have time i can adjust the hashtable for ints myself im just unsure on what a correct implementation would be
[23:53:48] <floatcomplex> put ints in buckets
[23:54:16] *** Joins: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net)
[23:55:31] <asd> floatcomplex: https://git.zx2c4.com/wireguard-tools/tree/src/wincompat/include/hashtable.h # seems be setup for hashing `char *str` and doing some weird magic maths. how would i apply that to ints?
[23:58:06] *** Joins: hxx (~hxx@c-24-30-27-91.hsd1.ga.comcast.net)
[23:58:06] *** Joins: markb1 (~markb1@2600:1700:eb40:7ecf:f1ed:6887:90f:533)
[23:58:15] <hxx> Is using static in the header files a bad idea?
