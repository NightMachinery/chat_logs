[00:05:40] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[00:06:00] *** Quits: jlrnick (~josephler@2a01cb040a15940054ec4eb0b34c0e67.ipv6.abo.wanadoo.fr) (Ping timeout: 252 seconds)
[00:12:21] <d_bot> <hegz> I'm really loving ocaml as my first functional lang, been trying 99Problems as practice but I'm yet to wrap my head about recursion and TCO properly.
[00:24:24] *** Joins: waleee (~waleee@h-98-128-229-110.NA.cust.bahnhof.se)
[00:25:53] *** Joins: Johann (~johann@user/johann)
[01:03:01] *** Joins: rgrinberg (~textual@2806:101e:7:5da4:5a6:fa3c:5451:e16b)
[01:54:04] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[02:10:17] *** Quits: jonasbits_ (~quassel@185-97-32-58.cust.tranquillity.se) (Ping timeout: 240 seconds)
[02:12:38] *** Joins: jonasbits (~quassel@2a00:66c0:1:1::58)
[02:14:32] *** Quits: dh` (~dholland@netbsd/developer/dholland) (Ping timeout: 240 seconds)
[02:16:18] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[02:30:33] *** Quits: mro (~mro@2002:5cc3:cc11:0:594e:5d09:9565:378f) (Quit: Leaving...)
[02:40:50] *** Joins: random-jellyfish (~random-je@user/random-jellyfish)
[02:51:27] *** Quits: random-jellyfish (~random-je@user/random-jellyfish) (Ping timeout: 256 seconds)
[02:58:02] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[03:28:36] *** Quits: Haudegen (~quassel@178.115.237.87.static.drei.at) (Ping timeout: 240 seconds)
[03:39:02] *** Quits: waleee (~waleee@h-98-128-229-110.NA.cust.bahnhof.se) (Ping timeout: 272 seconds)
[03:40:43] *** Joins: waleee (~waleee@h-98-128-229-110.NA.cust.bahnhof.se)
[03:44:05] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[04:06:25] *** Quits: rgrinberg (~textual@2806:101e:7:5da4:5a6:fa3c:5451:e16b) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[04:11:21] *** Joins: rgrinberg (~textual@2806:101e:7:5da4:5a6:fa3c:5451:e16b)
[04:19:31] *** Quits: sleepydog (~sleepydog@pool-100-33-241-236.nycmny.fios.verizon.net) (Quit: ZNC 1.8.2 - https://znc.in)
[04:44:26] *** Joins: sleepydog (03e7eaddce@2604:bf00:561:2000::3c6)
[04:56:46] <sleepydog> ah nice, dbuenzli updated Gg. I was just using it to write a ray tracer :)
[04:58:47] *** Joins: YukiSou (~YukiSou@116.6.232.251)
[05:10:15] *** Joins: drakonis (~drakonis@user/drakonis)
[05:10:35] *** Parts: drakonis (~drakonis@user/drakonis) ()
[05:55:14] *** Quits: chrisz (u194qhomkl@55d49b74.access.ecotel.net) (Ping timeout: 260 seconds)
[05:56:49] *** Joins: chrisz (qju1gl910l@d53635c3.access.ecotel.net)
[06:01:14] *** Quits: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl) (Read error: Connection reset by peer)
[06:01:28] *** Joins: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl)
[06:12:35] *** Quits: wingsorc (~wingsorc@user/wingsorc) (Remote host closed the connection)
[06:12:55] *** Joins: wingsorc (~wingsorc@user/wingsorc)
[06:22:21] *** Quits: wingsorc (~wingsorc@user/wingsorc) (Quit: Leaving)
[06:41:27] *** Joins: mbuf (~Shakthi@117.96.195.201)
[06:48:29] *** Joins: omegatron (~some@p5b056cb8.dip0.t-ipconnect.de)
[06:53:00] *** Quits: jonasbits (~quassel@2a00:66c0:1:1::58) (Ping timeout: 252 seconds)
[06:57:46] *** Joins: jonasbits (~quassel@2a00:66c0:1:1::58)
[07:03:19] *** Joins: bobo (~bobo@37.170.160.64)
[07:03:27] *** Quits: spip (~bobo@37.168.43.70) (Ping timeout: 252 seconds)
[07:06:02] *** Quits: zebrag (~chris@user/zebrag) (Quit: Konversation terminated!)
[07:11:24] *** Quits: rgrinberg (~textual@2806:101e:7:5da4:5a6:fa3c:5451:e16b) (Ping timeout: 240 seconds)
[07:12:59] *** Joins: rgrinberg (~textual@2806:101e:7:5da4:5cbe:f31d:a30b:eccd)
[07:16:46] *** Joins: zebrag (~chris@user/zebrag)
[07:25:24] *** Quits: waleee (~waleee@h-98-128-229-110.NA.cust.bahnhof.se) (Ping timeout: 240 seconds)
[07:25:58] *** Quits: zebrag (~chris@user/zebrag) (Quit: Konversation terminated!)
[07:32:12] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Remote host closed the connection)
[07:32:41] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[07:35:08] *** Joins: zebrag (~chris@user/zebrag)
[07:44:59] *** Quits: ralu (~ralu@static.211.245.203.116.clients.your-server.de) (Ping timeout: 256 seconds)
[07:49:40] *** Joins: wingsorc (~wingsorc@user/wingsorc)
[08:03:28] <omegatron> hm, strange, i'm trying to build and install base (0.14.3), DESTDIR-based as outlined in https://github.com/archlinux/svntogit-community/blob/packages/ocaml-base/trunk/PKGBUILD ...
[08:03:37] <omegatron> .. and, it throws two errors while building (about sexplib0 and dune-configurator not found) and fails while installing with "Error: The following <package>.install are missing: - _build/default/base.install"
[08:04:02] <omegatron> but sexplib0 and dune-configurator are installed (verified it twice)
[08:08:11] *** Joins: ornxka (~ornxka@user/ornxka)
[08:08:14] <ornxka> hi
[08:08:51] <ornxka> opam install coq-vst.2.9 <- i do this and then in ~/.opam i dont see any .vo files associated with coq-vst
[08:09:33] <ornxka> i see the .v files in .opam/default/.opam-switch/sources/coq-vst.2.9 and i see a folder .opam/default/.opam-switch/packages/coq-vst.2.9
[08:09:51] <ornxka> but i dont see any .vo files
[08:11:01] <ornxka> i also see .opam/default/lib/coq/user-contrib/VST but there are no .vo files in there either.. am i missing something?
[08:15:04] *** Quits: YukiSou (~YukiSou@116.6.232.251) (Quit: Client closed)
[08:32:09] *** Joins: Haudegen (~quassel@178.115.237.87.static.drei.at)
[08:35:44] *** Joins: gravicappa (~gravicapp@178.214.246.212)
[08:40:39] *** Quits: zebrag (~chris@user/zebrag) (Quit: Konversation terminated!)
[08:46:28] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Remote host closed the connection)
[08:46:46] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[08:48:57] *** Quits: rgrinberg (~textual@2806:101e:7:5da4:5cbe:f31d:a30b:eccd) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[08:59:31] *** Joins: rgrinberg (~textual@2806:101e:7:5da4:b88f:75a6:8a:951)
[09:05:24] *** Joins: ralu (~ralu@static.211.245.203.116.clients.your-server.de)
[09:36:45] *** Joins: jlrnick (~josephler@2a01cb040a15940054ec4eb0b34c0e67.ipv6.abo.wanadoo.fr)
[09:42:04] *** Quits: rgrinberg (~textual@2806:101e:7:5da4:b88f:75a6:8a:951) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[09:46:15] *** Quits: jlrnick (~josephler@2a01cb040a15940054ec4eb0b34c0e67.ipv6.abo.wanadoo.fr) (Ping timeout: 252 seconds)
[10:35:28] *** Joins: jlrnick (~josephler@2a01cb09e0253a28452d0fbd701ee1f4.ipv6.abo.wanadoo.fr)
[10:58:55] *** Quits: jlrnick (~josephler@2a01cb09e0253a28452d0fbd701ee1f4.ipv6.abo.wanadoo.fr) (Read error: Connection reset by peer)
[11:09:12] *** Quits: mbuf (~Shakthi@117.96.195.201) (Quit: Leaving)
[11:35:10] *** Joins: mro (~mro@port-92-195-142-11.dynamic.as20676.net)
[11:48:15] *** Quits: wingsorc (~wingsorc@user/wingsorc) (Ping timeout: 250 seconds)
[11:52:05] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[12:11:34] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[12:48:30] *** Quits: m5zs7k (aquares@web10.mydevil.net) (Read error: Connection reset by peer)
[12:48:30] *** Quits: oisota (~oisota@user/oisota) (Quit: Ping timeout (120 seconds))
[12:48:48] *** Joins: m5zs7k_ (aquares@web10.mydevil.net)
[12:48:48] *** Joins: oisota (~oisota@user/oisota)
[12:57:46] *** m5zs7k_ is now known as m5zs7k
[13:48:41] <ns12> Regarding Unix.write, the docs say " write repeats the writing operation until all bytes have been written or an error occurs". What happens when the write is interrupted by a signal? Will Unix.write automatically deal with the interruption and continue writing from where it left off?
[14:01:21] *** Quits: mro (~mro@port-92-195-142-11.dynamic.as20676.net) (Remote host closed the connection)
[14:05:10] *** Joins: mro (~mro@port-92-195-142-11.dynamic.as20676.net)
[14:10:14] <sadiq> ns12, https://github.com/ocaml/ocaml/blob/trunk/otherlibs/unix/write.c#L40
[14:10:29] <sadiq> EINTR will cause it to continue writing
[14:18:17] *** Quits: troydm (~troydm@host-176-37-124-197.b025.la.net.ua) (Ping timeout: 240 seconds)
[14:19:19] *** Joins: troydm (~troydm@host-176-37-124-197.b025.la.net.ua)
[15:03:27] *** Quits: mro (~mro@port-92-195-142-11.dynamic.as20676.net) (Remote host closed the connection)
[15:11:12] *** Joins: bartholin (~bartholin@158.110.71.2)
[15:57:12] *** Joins: mro (~mro@port-92-195-142-11.dynamic.as20676.net)
[15:58:17] <ns12> sadiq: Thank you.
[16:01:54] *** Quits: mro (~mro@port-92-195-142-11.dynamic.as20676.net) (Ping timeout: 252 seconds)
[16:04:06] *** Quits: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl) (Read error: Connection reset by peer)
[16:06:12] *** Joins: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl)
[16:07:00] *** Joins: jlrnick (~josephler@gw-wifi.lipn.univ-paris13.fr)
[16:17:46] *** Quits: bartholin (~bartholin@158.110.71.2) (Ping timeout: 272 seconds)
[16:19:37] *** Joins: mro (~mro@2002:5cc3:8e0b:0:14dd:6803:224c:ffd3)
[16:30:31] *** Joins: bartholin (~bartholin@158.110.71.2)
[16:32:20] *** Quits: jlrnick (~josephler@gw-wifi.lipn.univ-paris13.fr) (Ping timeout: 272 seconds)
[16:33:23] *** Quits: mro (~mro@2002:5cc3:8e0b:0:14dd:6803:224c:ffd3) (Ping timeout: 250 seconds)
[17:19:48] *** Quits: Haudegen (~quassel@178.115.237.87.static.drei.at) (Quit: Bin weg.)
[17:30:56] <d_bot> <darrenldl> i am confused by the thread on eio and capabilities on forum: so does capability represent a bound or is it merely a means to passing things around?
[17:58:25] <haesbaert> sadiq: I don't understand why it doesn't continue if errno==EAGAIN and written==0, in that case you throw a an exception of EAGAIN ?
[18:03:35] <haesbaert> well ok it just doesn't want to automatically restart it, nvm sorry for the noise
[18:05:21] *** Joins: mro (~mro@port-92-195-142-11.dynamic.as20676.net)
[18:05:45] <hannes> one persons noise is another persons signal ;)
[18:06:13] <ns12> sadiq: The docs say "write repeats the writing operation until all bytes have been written or an error occurs". What kind of error could occur during a write?
[18:06:50] <ns12> Is it some kind of Unix.Unix_error exception?
[18:09:03] <ns12> Is it all of the errors listed at https://pubs.opengroup.org/onlinepubs/007904975/functions/write.html including EINTR?
[18:10:05] <haesbaert> ns12: man 2 write
[18:10:23] <haesbaert> that should list the values of errno
[18:12:30] <ns12> haesbaert: Yes, but OCaml's Unix.write doesn't behave exactly like POSIX write(). As the docs say: "write repeats the writing operation until all bytes have been written or an error occurs". To my knowledge, POSIX write() does not automatically repeat the writing operation. That is why I am asking.
[18:12:45] <haesbaert> ns12: the thing is that it's valid to return short counts on write, so write(fd, 1024) can return < 1024 and > 0, normally you have to manually write the remainder in a loop, that's what ocaml is already doing for you, in case you get EAGAIN after having at least one sucessfull write, errno is not thrown and you get a partial count
[18:13:00] <haesbaert> ns12: you're correct, it behaves differently.
[18:13:20] <haesbaert> I still think it's kinda odd you can get a partial count if you get a signal during the second+ write.
[18:14:29] <haesbaert> I'd set SA_RESTART so you can escape EAGAIN semantics
[18:19:37] *** Joins: Haudegen (~quassel@91.114.49.10)
[18:20:49] <ns12> If I am reading the OCaml source code correctly, Unix.write will always retry the writing operation. The only errors that could occur are EAGAIN and EWOULDBLOCK, which only occur when the file descriptor is a socket that is marked as nonblocking. Is my understanding correct?
[18:21:22] <haesbaert> oh jesus, I'm reading EAGAIN as EINTR, forget all I wrote, my brain is tricking me
[18:22:53] <ns12> From my understanding, this means that it is perfectly safe to ignore the return value of Unix.write if the file descriptor is not that of a nonblocking socket.
[18:23:04] <companion_cube> there's `Unix.single_write`
[18:23:32] <haesbaert> ns12: it will always retry as long as you get a partial (non error case), or EAGAIN/EWOULDBLOCK as long as you haven't written anything
[18:24:04] <d_bot> <antron> i imagine it's supposed to represent a bound, but that depends on how the rest of the api interprets these objects, of course
[18:24:23] <haesbaert> so write(fd, 10) -> error=0,wrote=5, automatically calls a write(fd, 5).
[18:24:45] <haesbaert> but also write(fd, 10) -> error=0,wrote=5, automatically calls a write(fd, 5) -> error=-1,errno=EAGAIN,wrote=5 -> returns 5
[18:25:11] <haesbaert> "if subsequent writes get a EAGAIN, you *still* return a non-error shortcount"
[18:25:49] <companion_cube> tl;dr it's designed to be convenient? :)
[18:26:19] <haesbaert> I guess it makes sense, veyr common for people to only test against -1 in the wild and ignore shortcounts.
[18:26:21] <ns12> EAGAIN only occurs for nonblocking file descriptors, so if I am only using blocking file descriptors, I don't need to deal with that. I think.
[18:26:53] <haesbaert> yeah, unless you have a weird device that uses EAGAIN to signal something else even in blocking mode :P
[18:27:23] <ns12> Okay. Thank you. I think I am satisfied with the explanations.
[18:27:33] <haesbaert> my apologies, I was reading EAGAIN as EINTR
[18:27:49] <companion_cube> is EINTR the one that's triggered by signals?
[18:27:55] <haesbaert> yes
[18:28:00] *** Joins: rgrinberg (~textual@2806:101e:7:5da4:b88f:75a6:8a:951)
[18:28:12] <haesbaert> and the nyou depend if syscalls are automatically restarted or not, bsd vs linux semantics
[18:29:00] <companion_cube> well I'm glad OCaml takes care of that for me
[18:30:36] <haesbaert> now I'm curious, gotta open the stevens can't remember who did/does what
[18:43:18] <haesbaert> solaris 9 (didn't/doesn't) restart, 4.2BSD always restarted, from 4.3BSD and modern stuff (linux,freebsd,os x), default is to always restart
[18:43:46] <sleepydog> there's a group of syscalls that don't restart, right?
[18:45:07] <haesbaert> yeah, it's divided into "slow and fast", and then select/poll is kinda like a special case
[18:46:18] <sleepydog> ah, signal(7) spells it out
[18:46:25] *** Quits: rgrinberg (~textual@2806:101e:7:5da4:b88f:75a6:8a:951) (Remote host closed the connection)
[18:46:35] *** Quits: mro (~mro@port-92-195-142-11.dynamic.as20676.net) (Remote host closed the connection)
[18:47:06] <haesbaert> I got the habit of if (n == -1 && errno == EAGAIN) goto again;
[18:47:18] <haesbaert> cause I can never remember them
[18:47:19] *** Joins: rgrinberg (~textual@2806:101e:7:5da4:b88f:75a6:8a:951)
[18:47:43] <sleepydog> i would have preferred that Unix.single_write was Unix.write, and Unix.write were something else like write_all or 'really_write' (borrowing from Stdlib's really_input)
[18:48:24] <haesbaert> I see merit in that, but honesly silently fixing 90% of short counts might actually be the right thing
[18:49:08] *** Joins: mro (~mro@port-92-195-142-11.dynamic.as20676.net)
[18:51:02] *** Joins: olle (~olle@213.61.81.133)
[18:51:06] <d_bot> <VPhantom> I was pleasantly surprised to discover that behavior being standard. One less thing to worry about.
[18:51:43] *** Quits: mro (~mro@port-92-195-142-11.dynamic.as20676.net) (Remote host closed the connection)
[18:52:01] <haesbaert> IIRC bsd had a counter in netstat ip for write short counts on ip sockets
[18:53:20] *** Joins: mro (~mro@port-92-195-142-11.dynamic.as20676.net)
[18:56:58] *** Quits: mro (~mro@port-92-195-142-11.dynamic.as20676.net) (Remote host closed the connection)
[19:01:11] <d_bot> <darrenldl> antron: then yeah i don't think there is much merit from security point of view as you've pointed out
[19:03:48] *** Joins: spip (~bobo@37.171.43.217)
[19:03:57] *** Quits: bobo (~bobo@37.170.160.64) (Ping timeout: 252 seconds)
[19:04:37] <d_bot> <antron> im not sure if i misunderstood you, since i understood bounds to be the option with the greater merit 🙂
[19:05:32] <d_bot> <darrenldl> as in i don't think they provide a meaningful bound if that was the intention
[19:06:06] <d_bot> <darrenldl> since we lack a "monitor" of sorts to constrain the process anyway
[19:06:54] <d_bot> <antron> however either way i think there is ultimately no real merit. even emily (iirc), the system cited from 2006, consisted of a restriction of ocaml to a very specific set of apis, together with a static analyzer for enforcing this restriction. an ocap system in ocaml without a static analyzer is largely meaningless from the point of view of security, in that while it might seem to add "safety" in an empty theoretical setting, you wou
[19:06:55] <d_bot> <antron> yep
[19:07:28] <d_bot> <antron> and on the other hand ocaml could not get emily's static analyzer since as i had always understood it, that analyzer simply disallowed most "real" ocaml code
[19:07:29] <companion_cube> maybe we should also resurrect jocaml 🤔
[19:07:40] <d_bot> <darrenldl> in face of RCE, input injection, logical error, the static analyzer needs to be ridiculously smart
[19:08:12] <d_bot> <antron> so if ocaml were equipped with some kind of static analyzer, it would have to be something different from emily's, unless we are planning some very radical changes to the ecosystem 🙂
[19:08:46] <d_bot> <antron> that's why my question about actual future plans on this front was important, and i was very disappointed that the answer was just to point to emily since the emily work is an interesting PoC but does not actually apply or have much relevance for the real ocaml situation
[19:08:59] <d_bot> <antron> and is not a future plan but a past academic project
[19:09:59] <d_bot> <antron> since there are no such plans around to my knowledge, that means paying costs of ocap, while only getting ocap's extremely minimal incremental benefit, and even if there were such plans, the question is how many years until they are implemented. it might still not be worth paying for that long
[19:13:46] <companion_cube> I'd hate to get to OCaml 5.0 just to be told "a few more years and we'll be there"
[19:17:30] <d_bot> <antron> Thomas did appear to concede that ocap programming is pleasant (an opinion i don't share) and it is easier to verify correct programs, but the latter benefit is so minimal compared to just the pervasive oppression of systematic mandatory ocap, including to beginners
[19:18:10] <companion_cube> I'm baffled that people want access to directories to be painful
[19:18:12] <d_bot> <antron> even the README concedes that ocap is not that useful without some kind of language change, but then waves Emily to dismiss that
[19:18:32] <d_bot> <darrenldl> one immediate problem that popped into my head when reading the thread where a whitelisted directory is passed in an example, is that ocaml would not have means to understand aliases of resources at the system level (soft/hard links for instance)
[19:18:33] <d_bot> <darrenldl>
[19:18:34] <d_bot> <darrenldl> this is often the major source of headache for sandboxing, and i don't know how Eio handles that
[19:18:57] <companion_cube> you can't sandbox from within OCaml
[19:19:13] <companion_cube> the one good example of capabilities we've discussed is capsicum, afaict
[19:19:15] <d_bot> <darrenldl> i mean that's the issue with the supposed bounds
[19:19:18] <companion_cube> and it does it at the syscall level
[19:19:25] <d_bot> <antron> that's in line with my argument that for any useful properties, the ocaml function and module boundary is the wrong boundary to look at. it should be the OS process or sandbox boundary
[19:19:26] <d_bot> <darrenldl> if they are not bounds then why are they called bounds
[19:19:38] <d_bot> <darrenldl> yep 100%
[19:19:41] <companion_cube> @antron probably the mirage people are used to both being the same
[19:19:47] <companion_cube> 1 process, 1 kernel, 1 program
[19:19:52] <d_bot> <antron> yeah
[19:20:07] <d_bot> <antron> in a very different language and ecosystem you may be able to get useful properties with function boundary reasoning
[19:20:29] <d_bot> <darrenldl> i mean function is the only boundary in mirage : D
[19:20:33] <d_bot> <antron> completely agree hence why this is really not about any of the other properties, those are red herrings. this is really about mirage, from mirage, for mirage
[19:20:37] <companion_cube> honestly? I don't think any language will do that
[19:21:07] <companion_cube> *maybe* deno, because it has capabilities from the start, adn V8 is actually talking via RPC to the part that does sycalls
[19:21:18] <companion_cube> so V8 is isolated from the system in a very real way
[19:21:25] <companion_cube> but OCaml, with C externals, unix, etc.? lol
[19:22:03] <d_bot> <antron> ocap feels good and function-y and that attracts people naturally (including me) but those benefits go away when you consider the facts in more detail, including the existence of containers, the actual Emily report and its static analyzer, the actual statements made, and you are left only with the engineering reality that this is about mirage
[19:23:39] <d_bot> <darrenldl> companion_cube: as a digression, a security policy generating library similar to how capsicum works (if my memory serves), where ocaml code nominates access to give up, could be interesting
[19:24:55] <companion_cube> just give us pledge()
[19:24:59] <d_bot> <Bluddy> it makes no sense to suggest something that the whole community desires, only to use it to force the community to accept a controversial addition few actually want
[19:25:15] <d_bot> <Bluddy> unless you just want this piece of code to sit in a museum
[19:26:22] <d_bot> <Bluddy> companion_cube: your suggestion to define some common effects is spot on. we have a potentially infinite "monad stack" in effects, and we need to pin down the "monads"
[19:28:55] <companion_cube> yes
[19:29:05] <companion_cube> that's what the fucking stdlib should be for
[19:29:20] *** Joins: mro (~mro@port-92-195-142-11.dynamic.as20676.net)
[19:29:29] <companion_cube> define common grammar, let people build on that
[19:31:16] <d_bot> <darrenldl> companion_cube: if epbf and pledge share enough of the features, perhaps a crossplatform pledge of sorts can be made into a package hmmm
[19:33:15] <d_bot> <Kakadu> opam-related question. Do I understand right that these versions should be ordered like this: "0.3~" <= "0.3~alpha1" <= "0.3" ?
[19:33:41] <d_bot> <antron> i can confirm the right-most inequality
[19:33:47] <d_bot> <antron> (which is strict, <)
[19:34:51] *** Joins: zebrag (~chris@user/zebrag)
[19:35:56] <haesbaert> companion_cube: are you talking openbsd's pledge ?
[19:36:22] <companion_cube> in the interest of transparency, I know of it only because of serenityOS :D
[19:37:03] <haesbaert> oh cool, didn't know they had it, seems the same thing
[19:37:05] <d_bot> <darrenldl> i was surprised to find serenity adding it when i googled : D
[19:37:29] <haesbaert> I remember when we started moving the openbsd base to use pledge
[19:38:35] <companion_cube> they added it after being gently pwned :D
[19:38:35] <haesbaert> it's really well designed imho
[19:38:59] <haesbaert> ? you mean the opensmtpd bug ?
[19:39:38] <companion_cube> no, just, serenityOS added that after a conference pointed out they had a lot of security issues iirc
[19:39:43] <companion_cube> https://awesomekling.github.io/pledge-and-unveil-in-SerenityOS/
[19:40:03] <haesbaert> ahh, I thought you were referring to openbsd :)
[19:40:11] <companion_cube> I don't know much about openBSD, sorry :(
[19:40:29] <haesbaert> it's fun and slow, that's all there is to know :)
[19:40:40] <d_bot> <VPhantom> If anyone's familiar with `Printf`: is there an elegant way to specify the _maximum_ length of a float conversion? …or do I have to figure out the size of the integer part to and generate a format string that has an explicit number of decimals?
[19:40:51] <companion_cube> %.2f
[19:40:58] <d_bot> <VPhantom> Nope.
[19:41:01] <haesbaert> companion_cube: I used to be @openbsd.org
[19:41:05] <d_bot> <VPhantom> Nice try, though. 😉
[19:41:11] <companion_cube> what do you want exactly?
[19:41:19] <companion_cube> %.2f does work to limit to 2 decimals
[19:41:41] <sleepydog> you want it to be potentially less than 2 decimals when applicable?
[19:41:43] <d_bot> <antron> %2f
[19:41:46] <d_bot> <antron> does that work?
[19:41:48] <d_bot> <VPhantom> Suppose I have a maximum length of `6` and the number `123.66666667` I want `"123.67"`.
[19:41:58] <sleepydog> oh, gosh. i don't think so
[19:41:59] <d_bot> <antron> %6f
[19:41:59] <companion_cube> oh, all included. I'm not sure
[19:42:13] <companion_cube> what if you have 123456789.1 ?
[19:42:14] <d_bot> <antron> ah it's minimal width
[19:42:24] <companion_cube> would you want scientific notation then?
[19:42:39] <d_bot> <VPhantom> Thought so. So I'll have to extract the integer part to get its size, then do `max - that - 1` and that's my decimal width for the format string.
[19:42:51] <d_bot> <VPhantom> Nope, this is a format from the 1970s, only digits and a possible period.
[19:43:22] <sleepydog> Fmt module might have something
[19:43:29] <d_bot> <antron> do opam and ocaml run on serenity?
[19:43:30] <companion_cube> it's the same formatting for floats, sleepydog
[19:43:37] <companion_cube> @antron I doubt so :s
[19:43:47] <companion_cube> someone would need to do the work of porting at least ocamlrun
[19:44:02] *** Quits: megeve (sid523379@id-523379.hampstead.irccloud.com) (Ping timeout: 240 seconds)
[19:45:53] <d_bot> <idnes> anything for time-series analysis?
[19:46:06] <d_bot> <idnes> i mean, any lib
[19:46:17] *** Joins: megeve (sid523379@id-523379.hampstead.irccloud.com)
[19:46:49] <sleepydog> Fmt.float_dsig -- won't this do it?
[19:47:02] <d_bot> <VPhantom> (Ah, the standard technically supports exponential notation, but only "recent'y (1998).
[19:49:02] *** Quits: mro (~mro@port-92-195-142-11.dynamic.as20676.net) (Remote host closed the connection)
[19:50:55] *** Joins: mro (~mro@port-92-195-142-11.dynamic.as20676.net)
[19:53:30] <d_bot> <octachron> `%.6g` will restrict the number of significant digits but it will switch to scientific notation when needed.
[19:54:40] <companion_cube> @octachron I'm impressed with your knowledge of such fine details
[19:54:52] <companion_cube> also fun, btw: %h for hexadecimal float notation :)
[19:55:34] *** Quits: mro (~mro@port-92-195-142-11.dynamic.as20676.net) (Remote host closed the connection)
[19:56:01] *** Joins: mro (~mro@port-92-195-142-11.dynamic.as20676.net)
[19:58:57] <d_bot> <VPhantom> Yeah I thought of `g` but I'd be one short when there's no decimal period.
[19:59:21] <d_bot> <octachron> Well, that's the format used by the toplevel printer (with a twist).
[19:59:29] *** Quits: zebrag (~chris@user/zebrag) (Quit: Konversation terminated!)
[19:59:50] *** Joins: zebrag (~chris@user/zebrag)
[20:33:01] *** Quits: rgrinberg (~textual@2806:101e:7:5da4:b88f:75a6:8a:951) (Ping timeout: 250 seconds)
[20:33:21] *** Quits: Haudegen (~quassel@91.114.49.10) (Quit: Bin weg.)
[20:45:18] *** Quits: bartholin (~bartholin@158.110.71.2) (Quit: Leaving)
[20:46:35] *** Quits: mro (~mro@port-92-195-142-11.dynamic.as20676.net) (Remote host closed the connection)
[20:47:31] *** Joins: sagax (~sagax_nb@user/sagax)
[20:52:33] *** Joins: rgrinberg (~textual@187.194.14.9)
[21:02:09] *** Quits: rgrinberg (~textual@187.194.14.9) (Read error: Connection reset by peer)
[21:02:48] *** Joins: rgrinberg (~textual@2806:101e:7:5da4:a506:183a:7675:98e5)
[21:06:03] <d_bot> <RegularSpatula> Is there a way to restrict the tests that are run by default on opam repo CI?  I wonder because of this: https://discuss.ocaml.org/t/ann-cmdliner-1-1-0/9295/2
[21:08:26] <d_bot> <RegularSpatula> For example, I have cram tests that check that my CLI apps handle files that don't exists properly...but when using cmdliner, doing triggers an error message generated by cmdliner, which Daniel has asked to avoid
[21:16:59] <d_bot> <RegularSpatula> I was thinking of making a dune alias that runs most of the tests (but not the ones that depend on cmdliner output), then using the `*.opam.template` file to make sure that opam builds and tests the package using the custom test alias rather than the default `@runtest` one...but is that the best way to do it?
[21:19:52] <d_bot> <darrenldl> use return code instead?
[21:19:57] <OCamlPro[m]> <léo> you could just check the exit code instead of the message, no ?
[21:20:36] <companion_cube> do cram tests allow for `...` ellipsis, like mdx does?
[21:22:17] <rgrinberg> What's ... in mdx?
[21:22:33] <companion_cube> it skips any number of lines
[21:22:38] <companion_cube> so you can skip some parts of the output
[21:22:53] <companion_cube> and only match the relevant/fixed parts
[21:24:13] <d_bot> <RegularSpatula> I generally process output with `sed` or whatever unix commands...I thought of doing this, but I think the idea is to avoid depending on any text output of cmdliner since it could change version to version which leads to troubles for the CI people
[21:24:56] <d_bot> <RegularSpatula> Returns codes could work i suppose, but then I would need to be disciplined about actually returning useful return codes rather than 1 for every failure...
[21:24:57] <d_bot> <darrenldl> is it triggered cause of runtest stanza?
[21:25:31] <d_bot> <RegularSpatula> you mean the cram tests that depend on cmdliner error output?
[21:25:44] <d_bot> <darrenldl> yep
[21:25:56] <d_bot> <darrenldl> (im very rusty on how opam ci works
[21:27:30] <Corbin> darrenldl, antron: In general, retrofitting languages for capability-safety doesn't work. It's painful. There's a great analogy to memory-safety, which also can't just be a retrofit.
[21:27:41] <Corbin> companion_cube: It's not about pain. It's about structured access to authority.
[21:28:04] <companion_cube> it's very much about pain
[21:29:08] <d_bot> <RegularSpatula> darrenldl:   the `runtest` alias gets run inside the `build` section of the opam file, and that is the part that tells opam how to build it...so i assume (maybe incorrectly) that that is also how the CI will try to build it
[21:30:26] <d_bot> <darrenldl> oh right - had to remind myself of opam file structure
[21:31:13] <d_bot> <darrenldl> i thought dune buils doesnt trigger runtest though
[21:31:18] <d_bot> <darrenldl> build*
[21:31:28] <companion_cube> it's because opam-ci runs tests, too
[21:31:42] <d_bot> <darrenldl> oh
[21:31:43] <companion_cube> they install packages with various versions of the dependencies, with -t, with doc enabled, etc.
[21:32:14] <d_bot> <darrenldl> (notes that down to make sure i dont define runtest...)
[21:32:26] *** Parts: olle (~olle@213.61.81.133) ()
[21:32:32] <d_bot> <darrenldl> TIL
[21:34:38] <d_bot> <darrenldl> Corbin: asking from a different angle - is there a language designed from ground up with capability safety in mind that has seen at least some non-trivial uses?
[21:35:00] <companion_cube> I was going to say Pony, but… serious uses? oops
[21:36:26] <rgrinberg> companion_cube no, you must use sed,awk,cut etc
[21:36:41] <companion_cube> ah I see.
[21:37:44] <Corbin> darrenldl: I can respond along companion_cube's lines, but I want to point out that the simply-typed lambda calculi are all capability-safe *by default*. They lose the safety when we add features that break encapsulation, taming, etc.
[21:38:13] <companion_cube> we don't write code in lambda calculus
[21:38:38] <Corbin> And that's why you don't get capability-safety by default~
[21:39:39] <companion_cube> or at all
[21:40:05] <d_bot> <darrenldl> re pony: oh right it does capability, i only remember it for the concurrency
[21:40:20] *** Joins: Haudegen (~quassel@178.115.237.87.static.drei.at)
[21:40:22] <companion_cube> it's also immensely complex
[21:41:06] <d_bot> <darrenldl> yeah i dont know, it reads nice when you dont make explicit the threat model at least i guess
[21:41:11] <Corbin> companion_cube: I want to highlight the things that you say are painful. Here's an entrypoint for an IRC bot in Monte, a modern flavor of E: https://github.com/MostAwesomeDude/airbrus/blob/master/airbrus.mt#L102-L107
[21:41:50] <Corbin> Monte was explicitly designed to have entrypoint capabilities gathered into a single point for each application. As a result, we can directly read what dangerous things it can do from its source code.
[21:42:00] <companion_cube> I'm glad for you
[21:42:03] <Corbin> Unlike pledge(), this is a *positive* enumeration, not a negative.
[21:42:27] <companion_cube> I also notice that this forces you to write the rest of the code in the scope of `main`
[21:43:05] <companion_cube> not exactly what I'd do in a larger program
[21:43:16] <companion_cube> and the point is moot, we're talking about OCaml which is *not* safe
[21:43:23] <Corbin> Nah, I was just lazy. Monte modules must be DeepFrozen, or transitively immutable at top level; they can't hold mutable state.
[21:44:33] <Corbin> OCaml's not that unsafe, though. It's mostly builtin stuff that isn't tamed. There's objects, I guess, but few folks use objects.
[21:45:26] <companion_cube> there's C bindings, globals, mutation
[21:46:16] <Corbin> Mutation can be okay! It just requires a lot of careful design. Like, you can't have mutation, coroutines, and reentrancy-safety all at once. Erlang got rid of mutation, which is a viable path too.
[21:46:59] <Corbin> Globals gotta go, though. Ditto with user-controllable C bindings. You can pre-bind useful C libraries (e.g. Monte binds libsodium), but every C library increases the TCB.
[21:47:13] *** Parts: Armael (~Armael@macaron.isomorphis.me) (WeeChat 3.0)
[21:47:24] *** Joins: Armael (~Armael@macaron.isomorphis.me)
[21:47:38] *** Parts: Armael (~Armael@macaron.isomorphis.me) (WeeChat 3.0)
[21:48:09] <pgiarrusso> Corbin: why do you object to mutation with the other stuff? What next, will you object to mutation + backtracking? :-)
[21:48:55] <pgiarrusso> Coq mixes them “just fine” without any bugs </s>
[21:49:20] <Corbin> pgiarrusso: Plan interference, as explained in http://www.erights.org/talks/promises/paper/tgc05.pdf, requires some sort of mutation. Pony has some sort of coroutine subsystem which limits mutation, and they claim to have fixed the reentrancy and interference problems too.
[21:50:28] <pgiarrusso> Sorry, I was mostly confirming OCaml’s unsafety via a joke on Coq
[21:51:21] <companion_cube> Corbin: I'm sorry but what are you talking about
[21:51:27] <companion_cube> you can't get rid of mutation of C bindings in OCaml
[21:51:35] <companion_cube> that ship sailed decades ago, it's a no-go
[21:52:24] <Corbin> companion_cube: Dream a little bigger. Sure, we can't change OCaml *and* force the community to use the changed language. So don't do that! Nonetheless, it's important to understand exactly which mistakes were made in OCaml's design, so that we don't make them again.
[21:54:12] *** Quits: gravicappa (~gravicapp@178.214.246.212) (Ping timeout: 240 seconds)
[21:56:17] *** Quits: rgrinberg (~textual@2806:101e:7:5da4:a506:183a:7675:98e5) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[21:59:22] *** Joins: rgrinberg (~textual@2806:101e:7:5da4:a506:183a:7675:98e5)
[22:01:25] <companion_cube> I don't care
[22:02:02] <companion_cube> if  you want to build a new ML from scratch and improve its design, go for it. There's 30 years of lessons learnt.
[22:02:38] *** Joins: mro (~mro@port-92-195-142-11.dynamic.as20676.net)
[22:02:38] <companion_cube> but OCaml 5.0 should be about what we can do pragmatically, with OCaml, without breaking existing code, and ideally while providing sensible upgrade paths for everybody over the course of several years
[22:02:54] <d_bot> <monk> hey everyone. i've been working on my ocaml hackerrank solutions again and i'm hitting a resource/runtime limit. for some integers `a` and `b`, i'm need to get the inclusive range of `[a, b]` where `1 <= a <= b <= 10^9`.
[22:02:54] <d_bot> <monk>
[22:02:56] <d_bot> <monk> it's very clear that `List.range` doesn't deal with very large values of a and b. is there a simple optimization for this sort of problem? or is this where i should look to things like sequences?
[22:03:28] <companion_cube> are you going to iterate on each integer afterward?
[22:04:01] <d_bot> <monk> well, i guess to illuminate the full problem, all i want to do is check for squared values between `a` and `b`. i have that part right, it's just a matter of generating those values.
[22:04:39] <d_bot> <monk> so i think the answer to your question is yes?
[22:06:03] <d_bot> <octachron> If you only need to iterate once, you can use either a for-loop, or equivalently an iterator `(int -> unit) -> unit`.
[22:06:15] <companion_cube> if you mean `x*x`, then you probably want to iterate on [1, 10^(9/2)] instead
[22:06:28] <companion_cube> and square _that_
[22:07:04] <d_bot> <VPhantom> Ah, the first argument to `Printf.sprintf` is _not_ a string I can create from a few parts. 😕
[22:07:48] <d_bot> <monk> it's the other way, i want to know if for some value `x` within the range `[a, b]` whether `sqrt x - floor ( sqrt x)) = 0`
[22:08:06] <d_bot> <monk> though, i am guessing there is a way of generating the range of roots and using that as the solution too
[22:08:06] <d_bot> <octachron> It is indeed a format string and not a string, but you can concatenate format strings with `^^`.
[22:08:08] <d_bot> <RegularSpatula> VPhantom: i remember hitting that problem
[22:08:32] <d_bot> <monk> kind of like a sieve of erosthenes
[22:08:47] <d_bot> <monk> eratosthenes
[22:08:47] <d_bot> <octachron> (And there are more complicated tricks with formats and `%(...%)`)
[22:09:03] <d_bot> <VPhantom> Looking into `format_of_string` as a possible work-around.
[22:09:45] <d_bot> <octachron> @VPhantom , this is not the right direction, `format_of_string` is the identity.
[22:10:05] <d_bot> <VPhantom> Yeah it's not "of string" at all, it expects a format too! What a confusing name.
[22:12:09] <d_bot> <octachron> Yes, the name is meant `of_string(literal)`. Like I said earlier, you can either use `^^` (or `%(...%)`), or a `bprintf` to print into a buffer.
[22:12:51] <d_bot> <VPhantom> I don't understand that `%()` reference.
[22:13:15] <d_bot> <VPhantom> (More precisely: I don't see that in the man page.)
[22:13:42] *** Joins: waleee (~waleee@h-98-128-229-110.NA.cust.bahnhof.se)
[22:13:59] <d_bot> <octachron> It is part of `Format` and not `Printf` (and it is one of the worst part of Format in term of complexity).
[22:14:00] <d_bot> <VPhantom> If technically I just want a variable containing the precision size, I bet there's a simpler way to achieve this. 🤔 I know there's something of a "reference" concept in there, but without examples I couldn't decipher it.
[22:14:15] *** Quits: mro (~mro@port-92-195-142-11.dynamic.as20676.net) (Ping timeout: 252 seconds)
[22:14:48] <d_bot> <VPhantom> Ah hes `*`
[22:15:05] <d_bot> <octachron> Much simpler: `Printf.printf "%.*g" 1 10.2`
[22:15:07] <d_bot> <VPhantom> I couldn't quite figure out what the docs mean by "specified as `*`"
[22:15:28] <d_bot> <VPhantom> Ah that's what they mean with "precedes"! Okay thank you!
[22:16:30] <d_bot> <VPhantom> (This is where my previous experiences with JS and Perl tended to have OCaml beat: they weren't shy with examples.)
[22:17:07] <companion_cube> @Vphantom just write a function for printing floats
[22:17:10] <companion_cube> and use %a along with it
[22:17:40] <d_bot> <VPhantom> Oh, interesting but `%.*f` here will work fine.
[22:22:46] <d_bot> <VPhantom> (Thanks for bringing `out_channel` to my attention. I haven't played with that yet and will explore.)
[22:30:19] <pgiarrusso> 5:38 AM <ornxka> opam install coq-vst.2.9 <- i do this and then in ~/.opam i dont see any .vo files associated with coq-vst
[22:30:52] *** Joins: mro (~mro@port-92-195-142-11.dynamic.as20676.net)
[22:30:56] <pgiarrusso> ornxka: any chance your default switch is another one? Else it's strange indeed (but #coq might be more helpful)
[22:31:15] *** Quits: mro (~mro@port-92-195-142-11.dynamic.as20676.net) (Read error: Connection reset by peer)
[22:31:24] *** Joins: mro (~mro@port-92-195-142-11.dynamic.as20676.net)
[22:33:08] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Remote host closed the connection)
[22:33:43] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[22:36:38] <d_bot> <VPhantom> Fun anecdote: does the X12 standard, which "recently" added UTF-8 support, mean _bytes_ or _characters_ now with its maximum field lengths? 😛 I bet it's still bytes for backwards compatibility. Who knows, though.
[22:37:12] *** Quits: mro (~mro@port-92-195-142-11.dynamic.as20676.net) (Remote host closed the connection)
[22:53:33] *** Joins: jlrnick (~josephler@2a01cb040a15940040f41e6f55014ce7.ipv6.abo.wanadoo.fr)
[22:58:23] *** Joins: andreypopp_ (uid22726@id-22726.ilkley.irccloud.com)
[23:06:00] <d_bot> <VPhantom> Followup: anybody familiar with `Uutf`? It _seems_ to be what I need (already using it for something else), but I'm not sure. I have a string which may contain UTF-8. I want to enforce a maximum length _in bytes_, without breaking grapheme clusters so I can't just `String.sub`. I guess I'd need to remove entire grapheme clusters from the end until the new length satisfies the maximum. There's `Uutf.String` but I think that just 
[23:07:51] <d_bot> <VPhantom> I want `Uuseg`, I think.
[23:17:10] <companion_cube> I think so too
[23:17:18] <companion_cube> uutf will not do grapheme clusters on its own
[23:17:59] <d_bot> <VPhantom> Funny how Uutf says that String and Buffer now have the ability to iterate over UTF-8 characters but I couldn't find that in the online docs. 🤔
[23:18:18] <d_bot> <VPhantom> (Ah, the online manual is still 4.13.)
[23:20:26] <d_bot> <VPhantom> Wow, seeing the 4.14 changelog I think I'll wait for that.
[23:24:30] *** Quits: adanwan (~adanwan@gateway/tor-sasl/adanwan) (Remote host closed the connection)
[23:32:17] <companion_cube> or just use uutf
[23:32:22] <companion_cube> (or containers :p)
[23:37:59] <d_bot> <VPhantom> Uutf's API is um… I don't come from an intensely FP background and I have to invest a lot of time to try to understand his modules. I _think_ that the "folding" would be a way to iterate through a string with some callbacks, although that would still split graphemes (i.e. 🇨🇦 which is two UTF-8 characters). — Hm `CCUtf8_string.iter` could be a solution indeed. I could copy each character to a buffer and stop when the ne
[23:38:24] <d_bot> <VPhantom> Still the grapheme split issue though.
[23:41:47] *** Quits: waleee (~waleee@h-98-128-229-110.NA.cust.bahnhof.se) (Ping timeout: 256 seconds)
[23:46:50] *** Joins: dextaa_ (~dextaa@cpc142174-lewi20-2-0-cust34.2-4.cable.virginm.net)
[23:51:56] <companion_cube> probably can't avoid uuseg
[23:52:08] *** Quits: v0idpwn (sid483136@helmsley.irccloud.com) (Ping timeout: 268 seconds)
[23:52:09] <d_bot> <Anurag> do you want to iterate over graphemes? If so you will need uuseg
[23:52:24] *** Joins: adanwan (~adanwan@gateway/tor-sasl/adanwan)
[23:52:52] <d_bot> <VPhantom> I think so; ultimately I just want to trim strings which are too long without breaking anything, so I think that breaking a grapheme in two would be Bad™.
[23:54:08] *** Joins: waleee (~waleee@h-98-128-229-110.NA.cust.bahnhof.se)
[23:55:40] *** Joins: mro (~mro@port-92-195-142-11.dynamic.as20676.net)
[23:55:57] *** Joins: v0idpwn (sid483136@id-483136.helmsley.irccloud.com)
[23:56:51] *** Quits: rgrinberg (~textual@2806:101e:7:5da4:a506:183a:7675:98e5) (Quit: My MacBook has gone to sleep. ZZZzzz…)
