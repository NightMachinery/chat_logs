[00:00:30] <enebo[m]> So if we read a bigger string 'this is a test' and we store that as a primitive array of byte[]s
[00:00:56] <enebo[m]> We then hand that off to multiple bytelist instances which will save the reference with an offset and a length
[00:01:16] <enebo[m]> then one bytelist might refer to 'this' with offset of 0 and a length of 4
[00:01:31] <enebo[m]> 'a' will be whatever that offset is with a length of 1
[00:02:17] <enebo[m]> so the codePoint and codeLength calls in the old code gets the actual character (codepoint) but then has to calculate how many bytes long that is
[00:03:33] <enebo[m]> The solution to your PR is to do exactly what is in the old code but this is a useful thing to get wrong because it uncovers a lot of details about how strings work in a multiple encoding world
[00:04:13] <puritylake[m]> Perfect I'll look into it
[00:04:42] <enebo[m]> most programmers just get to get the result (a character) so this is a nice look under the hood
[01:02:59] <puritylake[m]> Well seems that fixed the failing tests
[01:04:03] <puritylake[m]> Anyway added a new commit if you want to check it out enebo 
[17:30:25] <enebo[m]> puritylake: was this error there before your changes: "TestSprintf#test_named_untyped [/home/travis/build/jruby/jruby/test/mri/ruby/test_sprintf.rb:459]:"
[17:30:34] <enebo[m]> Seems like it would be but I thought I had all of these resolved
[17:31:47] <puritylake[m]> For me there were no errors
[17:32:26] <enebo[m]> yeah I see errors in both MRI and spec/ruby but I will look back at previous run.
[17:33:45] <enebo[m]> ok this was me but I am pretty confused because I thought they were green locally
[17:33:58] <enebo[m]> I even put a statement about last failing test
[17:34:18] <enebo[m]> but the errors do not look like they would be your stuff since none of them are %c that I see
[17:34:58] <enebo[m]> I think perhaps it is that I was running those individual commands like in my gist and not the full test suite runs maybe
[17:35:08] <enebo[m]> I will try and straighten this out
[17:35:57] <puritylake[m]> I run the tests the way they are in the gist and they all pass
[17:36:13] <puritylake[m]> At least on the commit I'm on
[17:36:22] <puritylake[m]> Just double checked the there
[17:36:29] <puritylake[m]> s/the/them/
[17:37:46] <enebo[m]> ./bin/jruby -S rake spec:ruby:fast and ./bin/jruby -S rake test:mri are the full runs 
[17:38:08] <enebo[m]> They take longer but test many more things
[17:38:28] <enebo[m]> but for hacking on just a single thing like sprintf it is faster to use the other command lines
[17:39:18] <enebo[m]> sprintf is used incidentally in things like String#succ and Marshall#dump so it is possible our changes might break other parts
[17:39:28] <enebo[m]> but we have CI for catching this
[17:39:43] <puritylake[m]> I'll give the full tests a quick run
[17:40:21] <enebo[m]> I think you will see the same failures we see on CI
[17:40:59] <enebo[m]> You may even see a couple of other issues pop up (like I have seen some errors involving IPV6 which seems to just be environmental issue with my laptop)
[17:41:33] <puritylake[m]> I'll leave it then, my laptop isn't the fastest
[17:42:02] <puritylake[m]> I use it as I have it running Linux
[17:42:31] <puritylake[m]> Was like a snail with Windows
[17:42:38] <enebo[m]> heh
[17:44:00] <enebo[m]> yeah I will make this all green but your current PR is fine.  You can work on next one which I think p/s
[17:44:38] <enebo[m]> looks like only difference between the two is with 'p' we call inspect on the object so it can be they both can be shared
[17:44:46] <enebo[m]> 1 if stmt is fine
[17:45:46] <puritylake[m]> Very good, I'll get to it in a little bit
[17:46:00] <enebo[m]> I will merge the PR you submitted after I get things green
[17:46:31] <puritylake[m]> Brilliant
[18:45:19] <enebo[m]> puritylake: ok I realized what happened.  we run CI without the new sprintf enabled and I had removed tags/tests because the new code runs them now.
[18:45:39] <enebo[m]> So I reversed what the env variable SPRINTF means in the commit I just pushed
[18:45:55] <enebo[m]> SPRINTF=1 will run old sprintf on this branch
[18:46:19] <enebo[m]> This makes more sense since we want to see failures in CI when running with the new code
[18:46:40] <puritylake[m]> Awesome, I'll pull that commit now
[18:47:07] <enebo[m]> It is possible there are still failing tests but I definitely untagged some specs which were passing with the new code so most of these should be from that
[18:47:18] <enebo[m]> https://app.travis-ci.com/github/jruby/jruby/builds/240402971
[18:47:25] <enebo[m]> we will see how this run goes
[18:47:29] <headius> Good morning!
[18:51:00] <puritylake[m]> Morning or more like good afternoon here
[18:51:58] <puritylake[m]> How are you today headius?
[18:55:03] <puritylake[m]> First time I've had to merge from upstream, same command for adding origin so nothing too taxing
[18:55:46] <enebo[m]> puritylake: you can git pull --rebase too 
[18:56:08] <enebo[m]> then it will not cause a merge commit it will just replay your commits on the new head
[18:57:06] <puritylake[m]> Why thank you good sir
[18:57:13] <enebo[m]> Sometimes you want to do a merge especially when you hit conflicts but rebase ends up not showing any merging to us so for like my last commit that probably is better to rebase
[18:58:15] <enebo[m]> don't worry about it though if you did a merge.  It is not a big deal
[18:58:41] <puritylake[m]> I had added a merge but it seams rebase got rid of that commit
[18:58:46] <puritylake[m]> s/seams/seems/
[19:00:32] <puritylake[m]> Yup `git --oneline` just shows your commit messages
[19:03:16] <headius> Rebase should collapse merges since it reapplies the commits at head
[19:04:03] <headius> Oh enebo  just said that
[19:04:09] <headius> üëç
[20:29:31] <puritylake[m]> enebo:  `f.hasWidth` isn't being set correctly, using a workaround that tests if `f.width > 0`
[20:29:44] <puritylake[m]> f being a FormatToken
[20:34:19] <puritylake[m]> Other than that, the only test failing is the named parameters
[20:35:20] <puritylake[m]> Is that part of the parser working?
[20:44:29] <puritylake[m]> Ok I have confirmed it works, just need to checkout what is causing the fail
[20:46:12] * puritylake[m] uploaded an image: (50KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/TJUKZqLvlodOjcLLDaJCbRNh/errors.png >
[21:16:32] <puritylake[m]> I fixed one where width was made negative using `%*s`
