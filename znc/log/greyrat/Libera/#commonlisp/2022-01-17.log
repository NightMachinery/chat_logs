[00:00:07] <frodef> I see
[00:02:35] <foxfromabyss> i see, thanks! (for both shadowing and SLIME :)  )
[00:07:15] *** Joins: karlosz (~karlosz@47.151.136.69)
[00:08:38] *** Quits: biog (~user1@static.39.160.132.142.clients.your-server.de) (Quit: ZZZzzz…)
[00:09:37] *** Joins: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz)
[00:09:51] *** Parts: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz) ()
[00:11:44] *** Quits: mgl (~mgl@cpc87455-finc19-2-0-cust234.4-2.cable.virginm.net) (Ping timeout: 256 seconds)
[00:14:23] *** Parts: masinter (~masinter@c-73-158-116-21.hsd1.ca.comcast.net) ()
[00:14:25] *** Joins: rogersm (~rogersm@90.166.180.250)
[00:15:19] *** Quits: cage (~cage@dynamic-adsl-84-221-50-16.clienti.tiscali.it) (Quit: rcirc on GNU Emacs 27.1)
[00:15:39] <moon-child> huh, apparently at one point read-time eval was #,
[00:15:42] <moon-child> that is cute
[00:15:49] <moon-child> (analogous to regular ,)
[00:16:31] <_death> no, it was for load-time evaluation
[00:17:28] <moon-child> ah!
[00:21:00] <_death> "let me tell you a story, from back when #* was #" and compile-file was comfile..."
[00:35:32] *** Quits: Lord_Nightmare (Lord_Night@user/lord-nightmare/x-3657113) (Ping timeout: 240 seconds)
[00:37:53] *** Joins: Lord_Nightmare (Lord_Night@user/lord-nightmare/x-3657113)
[00:38:00] *** Quits: attila_lendvai (~alendvai@2a02:ab88:3710:7c80:9130:5abf:96b3:dc0c) (Ping timeout: 250 seconds)
[00:39:57] *** Quits: jstoddard (~Jeremiah@2600:8801:a400:5a00::ba77) (Ping timeout: 240 seconds)
[00:45:48] *** Quits: rogersm (~rogersm@90.166.180.250) (Quit: Leaving...)
[00:50:31] *** Quits: gaqwas (~john@dynamic-095-115-117-182.95.115.pool.telefonica.de) (Remote host closed the connection)
[00:51:41] *** Joins: rgherdt (~rgherdt@2a02:8109:86c0:d8d:64a1:44d0:686a:3280)
[00:54:01] *** Quits: karlosz (~karlosz@47.151.136.69) (Quit: karlosz)
[01:01:24] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 250 seconds)
[01:03:02] *** Joins: karlosz (~karlosz@47.151.136.69)
[01:12:33] *** Joins: akoana (~ah@user/akoana)
[01:16:44] *** Joins: thomp (~thomp@c-98-239-97-121.hsd1.ca.comcast.net)
[01:23:42] *** Quits: foxfromabyss (~foxfromab@2a01:c22:a808:6300:39f6:c597:7ce:76e0) (Ping timeout: 256 seconds)
[01:29:21] *** Joins: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz)
[01:31:29] <yottabyte> why would one use flat instead of let? you can define functions (lambdas) with let, no?
[01:33:03] <semz> If you define a function with (let ((f (lambda ...))) ...) you have to call it with (funcall f ...) rather than being able to use (f ...)
[01:33:38] <thomp> Two different namespaces...
[01:37:46] *** Parts: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz) ()
[01:41:18] <yottabyte> gotcha
[01:45:29] *** Joins: gaqwas (~john@dynamic-095-115-117-182.95.115.pool.telefonica.de)
[01:46:15] *** Joins: john__ (~john@dynamic-095-115-117-182.95.115.pool.telefonica.de)
[01:46:55] *** Joins: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz)
[01:48:17] *** Parts: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz) ()
[01:54:42] *** Joins: dre (~dre@2001:8003:c932:c301:2a14:8300:3b99:1684)
[01:54:57] *** Quits: john__ (~john@dynamic-095-115-117-182.95.115.pool.telefonica.de) (Quit: Leaving)
[02:13:01] *** Quits: shka (~herr@109.231.0.226) (Quit: Konversation terminated!)
[02:13:13] *** Joins: shka (~herr@109.231.0.226)
[02:13:32] *** Quits: gaqwas (~john@dynamic-095-115-117-182.95.115.pool.telefonica.de) (Remote host closed the connection)
[02:21:24] *** Quits: Lord_Nightmare (Lord_Night@user/lord-nightmare/x-3657113) (Read error: Connection reset by peer)
[02:22:22] *** Joins: Lord_Nightmare (Lord_Night@user/lord-nightmare/x-3657113)
[02:22:52] *** Joins: Common-Lisp (~eric@2600:1700:94cc:c0::44)
[02:23:21] *** Quits: occ (~occ@user/occ) (Ping timeout: 256 seconds)
[02:29:32] *** Quits: rgherdt (~rgherdt@2a02:8109:86c0:d8d:64a1:44d0:686a:3280) (Ping timeout: 240 seconds)
[03:03:03] *** Quits: kevingal (~quassel@37.228.202.92) (Remote host closed the connection)
[03:04:43] *** Quits: cosimone (~user@93-47-231-31.ip115.fastwebnet.it) (Ping timeout: 256 seconds)
[03:25:57] *** Quits: Common-Lisp (~eric@2600:1700:94cc:c0::44) (Ping timeout: 240 seconds)
[03:27:33] *** Quits: karlosz (~karlosz@47.151.136.69) (Quit: karlosz)
[03:28:18] *** Joins: gaqwas (~john@dynamic-095-115-117-182.95.115.pool.telefonica.de)
[03:33:32] *** Quits: gaqwas (~john@dynamic-095-115-117-182.95.115.pool.telefonica.de) (Ping timeout: 240 seconds)
[03:41:54] *** Joins: taiju (~user@240b:253:ec40:2400:b7d1:436e:2d61:e925)
[03:55:51] *** Joins: occ (~occ@user/occ)
[03:56:47] *** Joins: jealousmonk (~user@2804:431:e7c5:b880:889f:205:ed34:5b22)
[03:59:03] *** Quits: morganw (~user@80.225.24.132) (Remote host closed the connection)
[04:08:35] *** Quits: Everything (~Everythin@37.115.210.35) (Quit: leaving)
[04:25:57] *** Quits: thomp (~thomp@c-98-239-97-121.hsd1.ca.comcast.net) (Ping timeout: 240 seconds)
[04:32:25] *** Joins: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz)
[04:32:39] *** Joins: szkl (uid110435@id-110435.uxbridge.irccloud.com)
[04:33:21] *** Parts: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz) ()
[04:33:58] *** Joins: seragold[m] (~seragoldm@2001:470:69fc:105::1:6b7f)
[04:37:35] *** Joins: s-liao (~s-liao@101.86.96.21)
[04:42:59] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Client closed)
[04:45:02] *** Quits: Lord_Nightmare (Lord_Night@user/lord-nightmare/x-3657113) (Ping timeout: 240 seconds)
[04:46:03] *** Joins: s-liao (~s-liao@101.86.96.21)
[04:52:12] <Bike> https://plaster.tymoon.eu/view/2874#2874 can i get a sanity check here? sbcl gives me a type warning about this, but I don't see the problem
[04:52:16] *** Joins: Lord_Nightmare (~Lord_Nigh@user/lord-nightmare/x-3657113)
[05:01:03] <moon-child> perhaps it is assuming that CONS might be nil?  Obviously that can never happen, but
[05:04:17] *** Quits: random-nick (~random-ni@87.116.181.150) (Ping timeout: 256 seconds)
[05:04:41] *** Joins: thomp (~thomp@c-98-239-97-121.hsd1.ca.comcast.net)
[05:09:35] *** Joins: peterhil (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi)
[05:11:31] <Bike> yeah i mean what it says is "This is not a CONS: NIL" and points out the loop.
[05:12:45] *** Joins: IPmonger (~IPmonger@c-69-242-83-226.hsd1.pa.comcast.net)
[05:12:59] *** Quits: IPmonger (~IPmonger@c-69-242-83-226.hsd1.pa.comcast.net) (Remote host closed the connection)
[05:20:46] *** Joins: gamaliel (~gamaliel@24.171.221.75)
[05:22:16] *** Quits: thomp (~thomp@c-98-239-97-121.hsd1.ca.comcast.net) (Ping timeout: 250 seconds)
[05:26:42] <lagash> What do folks here use for a linter/code formatter for CL, particularly as a pre-commit hook?
[05:27:22] <lagash> So far I've tried trivial-formatter, but I'm not impressed really
[05:27:24] <moon-child> pre-commit hooked autoformat is dumb.  Formatting can not always be applied automatically
[05:27:31] *** Quits: Lord_Nightmare (~Lord_Nigh@user/lord-nightmare/x-3657113) (Ping timeout: 256 seconds)
[05:27:33] <mfiano> That is a bad idea.
[05:27:37] <moon-child> hence it should be an editor command, to be used at the editor's discretion
[05:27:44] *** Joins: karlosz (~karlosz@47.151.136.69)
[05:27:59] <mfiano> Use SLIME or Sly. Formatting code correctly depends on the state of the Lisp image.
[05:29:13] <moon-child> mfiano: it also depends on the smarts of the formatter.  Slime still can not indent moderately complex loops
[05:29:32] <mfiano> It also has a concept of "lossage"
[05:30:03] <lagash> mfiano: I have been using Sly, although come to think of it, not every time I've formatted my CL code, was Sly running.. that might be the issue?
[05:30:19] <mfiano> Stemming from its piggy-backing off of emacs-lisp, which does not have the concept of packages.
[05:31:25] <mfiano> Sly can indent moderately complex LOOPs just fine though, so I'm not sure about SLIME in this regard.
[05:31:47] <moon-child> sly, slime, same thing
[05:31:50] <moon-child> I had the same problem with both
[05:31:53] *** Quits: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-43-67-70-144-105.dsl.bell.ca) (Ping timeout: 256 seconds)
[05:31:56] <EdLangley[m]> Prettier makes a huge difference in JavaScript projects
[05:32:13] <mfiano> I have written hundreds of line loops before, and indentation has never been an issue.
[05:32:18] <EdLangley[m]> Because, even if the formatting isn’t always great, it reduces diffs if you apply it consistently
[05:32:26] <lagash> It's just that Emacs and/or Sly can't seem to make up its mind when I, say, format an entire file..
[05:32:37] <lagash> EdLangley[m]: yes! that's what's bugging me
[05:33:08] <EdLangley[m]> I’ve always just used aggressive-indent-mode for CL
[05:33:23] <lagash> Hmmmm... I wonder if I have that on..
[05:33:26] <EdLangley[m]> And, if slime is running, it works pretty wel
[05:33:30] <EdLangley[m]> s/wel/well/
[05:34:04] <EdLangley[m]> I’ve never had an issue with the indentation of LOOP either
[05:34:25] <mfiano> I also use aggressive-indent-mode, but should point out that the code and its dependencies should also be loaded; it isn't enough to just have SLIME/SLY running due to macro definitions.
[05:34:42] <moon-child> mfiano: https://0x0.st/o-Dq.txt
[05:34:44] <mfiano> EdLangley[m]: Yeah I suspect user error/misconfiguration
[05:34:52] <moon-child> mfiano: does that loop indent differently for you?
[05:35:19] <lagash> mfiano: so depending on if I had Sly running or had the code loaded or whatnot, Emacs might format things differently?
[05:35:48] <mfiano> moon-child: That is how it should be indented.
[05:35:56] <moon-child> no it isn't
[05:36:07] <mfiano> IF is a synonym
[05:36:08] <moon-child> the first else is contained within the first if
[05:36:42] <EdLangley[m]> SLIME/Sly indentation is based on introspection of function and macro information
[05:36:48] <lagash> Huh. So I haven't actually been using aggressive indent.
[05:36:58] <EdLangley[m]> You can’t reliably indent CL code unless it’s been loaded once
[05:37:10] <moon-child> https://0x0.st/o-Db.txt  this is correct indentation
[05:37:14] <EdLangley[m]> Because macro definitions affect indentation.
[05:39:40] *** Joins: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-35-70-24-248-134.dsl.bell.ca)
[05:44:32] *** Quits: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-35-70-24-248-134.dsl.bell.ca) (Ping timeout: 240 seconds)
[05:44:34] *** Joins: masinter (~masinter@c-73-158-116-21.hsd1.ca.comcast.net)
[05:45:42] *** Joins: thomp (~thomp@c-98-239-97-121.hsd1.ca.comcast.net)
[05:45:48] *** Joins: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-35-70-24-248-134.dsl.bell.ca)
[05:49:09] *** Quits: triffid (~triffid@gateway/tor-sasl/triffid) (Remote host closed the connection)
[05:55:23] *** Quits: karlosz (~karlosz@47.151.136.69) (Quit: karlosz)
[06:10:01] *** Quits: waleee (~waleee@h-98-128-229-110.NA.cust.bahnhof.se) (Ping timeout: 256 seconds)
[06:37:08] *** Joins: karlosz (~karlosz@47.151.136.69)
[06:40:16] *** Quits: karlosz (~karlosz@47.151.136.69) (Client Quit)
[06:45:36] *** Joins: unixlisp (~unixlisp@2409:8a3c:5400:9ff0:fe08:4aff:fe66:ec11)
[06:47:17] <unixlisp> What will happen, when you redefine a function?
[06:48:11] <EdLangley[m]> It mostly will just work
[06:49:01] <unixlisp> Is there some weird things? (other than inline, system function)
[06:49:04] <EdLangley[m]> Unless it was declared inline or you have other saved references to the old definition (e.g. `(funcall #'foo …)`)
[06:49:39] <EdLangley[m]> If you always refer to the function by name rather than with #', it should just work.
[06:50:18] *** Joins: kingofcsu (~kingofcsu@114.249.133.203)
[06:51:24] <unixlisp> But redefining function is surely a undefined behavior.
[06:54:29] <Bike> redefining a function is undefined if it was part of a compilation unit. otherwise it's fine
[06:58:58] <unixlisp> I think redefining function  is always  undefined, though impl. should support it.
[07:00:51] *** Quits: jeosol (~jeosol@user/jeosol) (Ping timeout: 256 seconds)
[07:01:02] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[07:01:57] *** Quits: thomp (~thomp@c-98-239-97-121.hsd1.ca.comcast.net) (Ping timeout: 240 seconds)
[07:09:04] <seragold[m]> If in CL redefining CLOS class just works across existing instances it would be weird if redefining a normal function did not IMHO
[07:11:43] *** Joins: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f)
[07:13:05] <Alfr> unixlisp, it's defined quite in detail, it replaces the function binding in the global environment; mostly subject to the constraints listed in
[07:13:08] <Bike> oh wait, you're the fella i kicked before, aren't you
[07:13:14] <Alfr> clhs 3.2.2.3
[07:13:15] <specbot> Semantic Constraints: http://www.lispworks.com/reference/HyperSpec/Body/03_bbc.htm
[07:14:07] <Bike> if you continue this routine of insisting everything is undefined despite all reason i'll ban you, alright?
[07:14:40] <Alfr> unixlisp, 3.2.2.3 also says that, apart form the listed exceptions the new definition takes precedence.
[07:16:42] *** Joins: karlosz (~karlosz@47.151.136.69)
[07:20:17] *** Quits: occ (~occ@user/occ) (Ping timeout: 256 seconds)
[07:21:20] <unixlisp> Alfr: yeah, that is a good place about redefining function.
[07:22:24] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[07:24:24] *** Quits: mzan (~quassel@mail.asterisell.com) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[07:25:31] *** Joins: mzan (~quassel@mail.asterisell.com)
[07:26:05] *** Joins: lisp123 (~lisp123@5.30.23.247)
[07:28:03] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[07:30:17] <beach> Good morning everyone!
[07:30:51] <beach> unixlisp: Why do you think that?  I.e., that redefining a function is always undefined.  I mean, is that an opinion of yours?  Or something you concluded from reading the standard?
[07:33:42] <unixlisp> beach: I should carefully read 3.2.2.3, redefining function is not always undefined.
[07:35:15] *** opc0de is now known as opcode
[07:35:20] <beach> That section is mostly unrelated to the issue.
[07:36:49] <beach> unixlisp: So let me ask you again.  When you said "I think redefining function  is always  undefined", was that an opinion of yours, or something you concluded form reading the standards document?
[07:37:08] <beach> unixlisp: "think" in English can mean either, which is why I am asking.
[07:39:33] *** Quits: karlosz (~karlosz@47.151.136.69) (Quit: karlosz)
[07:39:55] <unixlisp> Oh, I said the reading is not complete, so the conclusion is wrong. (that is my opinion from read spec.)
[07:42:05] <unixlisp> In general, I always wonder redefining is a defined behavior or not. uch as defparameter, etc.
[07:42:14] <unixlisp> such as
[07:43:39] <beach> It would be very strange for a language to include operators that always have undefined consequences.
[07:44:08] <Bike> the definition of defparameter literally describes the redefinition behavior
[07:44:26] *** Joins: thomp (~thomp@c-98-239-97-121.hsd1.ca.comcast.net)
[07:47:15] *** Joins: s-liao (~s-liao@101.86.96.21)
[07:48:03] <EdLangley[m]> As a rule, Common Lisp is defined for a workflow that involves building up a program incrementally.
[07:48:54] <EdLangley[m]> There are exceptions (defstruct, defconstant), but it would be strange for most of the fundamental operations not to have well-defined redefinition semantics.
[07:49:42] <unixlisp> oh, redefining defstruct is really undefined.
[07:50:59] <beach> unixlisp: So here is a suggestion.  The next time you "think" something like that, maybe phrase it as a question instead, like "Is redefining a function always undefined behavior"?
[07:53:02] <unixlisp> beach: ok.
[07:53:56] *** Quits: thomp (~thomp@c-98-239-97-121.hsd1.ca.comcast.net) (Ping timeout: 250 seconds)
[07:56:47] *** Quits: kingofcsu (~kingofcsu@114.249.133.203) (Quit: kingofcsu)
[07:57:22] *** Quits: lisp123 (~lisp123@5.30.23.247) (Quit: Leaving...)
[07:58:18] *** Joins: pillton (~user@2405:b000:703:2::35:28)
[07:59:24] *** Joins: lisp123 (~lisp123@5.30.23.247)
[07:59:54] *** Quits: lisp123 (~lisp123@5.30.23.247) (Client Quit)
[08:02:22] *** Joins: occ (~occ@user/occ)
[08:05:26] <masinter> What else would (setf (symbol-function 'foo) newdef) do besides redefine foo?
[08:06:34] <beach> masinter: It could be defined behavior only if the function is currently undefined.  Also, consider SYMBOL-FUNCTION obsolete in favor of FDEFINITION.
[08:07:25] *** Joins: thomp (~thomp@c-98-239-97-121.hsd1.ca.comcast.net)
[08:07:54] <beach> masinter: DEFSTRUCT is pretty much like that.  The first time you use it, it is defined behavior.
[08:14:32] *** Quits: gamaliel (~gamaliel@24.171.221.75) (Ping timeout: 256 seconds)
[08:14:37] *** Joins: domovod (~domovod@176.196.122.197)
[08:21:32] <beach> But the behavior of DEFSTRUCT is very strange for a dynamic language (which by definition is a language with semantics defined as a sequence of incremental modifications to the environment).
[08:22:18] *** Quits: occ (~occ@user/occ) (Remote host closed the connection)
[08:22:31] <beach> And that's why I advocate using standard classes instead of structure classes.
[08:23:40] <EdLangley[m]> Does uninterning the symbol first make a DEFSTRUCT with the same name defined behavior?
[08:24:20] <unixlisp> there is a performance considering about defstruct.
[08:24:30] *** Joins: semz_ (~semz@2001:9e8:4bc9:9400:9e11:32f1:2a24:8d38)
[08:24:30] *** Quits: semz_ (~semz@2001:9e8:4bc9:9400:9e11:32f1:2a24:8d38) (Changing host)
[08:24:30] *** Joins: semz_ (~semz@user/semz)
[08:24:31] <beach> EdLangley[m]: Good question.
[08:27:18] *** Quits: semz (~semz@user/semz) (Ping timeout: 250 seconds)
[08:27:35] *** Joins: jeosol (~jeosol@user/jeosol)
[08:28:24] <beach> unixlisp: Structure classes are defined so that the implementation can represent their instances in a very efficient way if it chooses to do so.  Standard classes require instances to have some indirection that allows for instances to be altered when a class is modified.
[08:29:59] <mfiano> Note that if you are familiar with the MOP, you can make standard classes just as efficient as structure classes. IIRC, phoe is going to talk about my technique for doing so in the new revision of Common Lisp Recipes.
[08:31:55] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[08:32:23] <mfiano> One nice thing about Common Lisp is its extensibility. Just as macros extend syntax to form new language constructs by the user, the MOP extends CLOS to alter semantics of CLOS OOP.
[08:38:12] <mfiano> I really wouldn't recommend trying to make standard classes like structure classes though. They become less and less useful for iterative programming the more you do so, as beach mentioned.
[08:39:08] <mfiano> And a sufficiently smart compiler should be able to dispatch fast to an accessor/other method.
[08:39:53] *** Quits: Bike (~Bike@71.69.170.70) (Quit: Connection closed)
[08:40:24] <beach> That is partly why in SICL, instances of structure classes have the same structure as instances of standard classes.
[08:42:43] <mfiano> I recently started programming in Lisp again (after like 6 months!), and after using standard classes, I switched to structure classes, because a concise memory footprint and tagging of numeric fields was needed. I now realize that was foolish, and I should instead tag fixnums and unpack the individual bits I need.
[08:43:57] *** Joins: Guest8330 (~Guest83@116-251-60-165.pool.activ8me.net.au)
[08:44:24] <mfiano> These structure objects with 2-6 numerical fields were to be stored in very large arrays. My plan now is to just bitwise or/shift the values together into a single fixnum, with a tag header to distinguish the different "classes"
[08:44:30] <EdLangley[m]> It’d be interesting if there was a way to “finalize” a class for performance
[08:45:03] <EdLangley[m]> Ideally in a reversible way where use-sites are tracked for recompilation.
[08:45:25] <beach> EdLangley[m]: You may be interested in heisig's work on fast generic functions and sealing.
[08:45:28] <mfiano> That is referred to as sealing a class
[08:45:37] <EdLangley[m]> Yeah, that’s sort of what I was thinking about.
[08:46:04] <mfiano> It is used in other languages to prevent monkey patching, but in CL, heisig's work, uses it for performance.
[08:46:45] <EdLangley[m]> Yeah, performance is where this makes sense to me.
[08:46:49] <mfiano> I can't stand behind semantics-altering generic function libraries anymore though. I think it too, goes too much against the interactive development style I like, and leads to very surprising behavior.
[08:47:17] <EdLangley[m]> My thought would be “sealing” would only happen in non-development situations.
[08:47:44] <EdLangley[m]> E.g. when I’m deploying a server, I’m often going to replace it by spinning up a second server in parallel and cutting over
[08:48:09] <EdLangley[m]> In this situation, sealing makes sense because you’re never going to encounter a redefinition in production.
[08:50:01] <mfiano> I mean it's not impossible.
[08:50:54] <Guest8330> Hey, is there an errata for the ANSI Common Lisp Spec?
[08:50:57] <unixlisp> It is good of "fast generic function", but it has a cost: "Once a fast generic function has been sealed, it is not possible to add, remove, or redefine methods within the sealed domain"
[08:51:05] <mfiano> One thing you could do is write a macro wrapper over defclass that expands to cl:defclass in development, and a custom metaclass that defines inlined regular function accessors that use c2mop:standard-instance-access in production.
[08:51:18] <EdLangley[m]> Yeah.
[08:51:27] <mfiano> Well that made more sense in my head, but maybe you get the idea
[08:52:50] <mfiano> Also fast generic functions has issues optimizing structure class specializers in my experience, so I wouldn't start there.
[08:52:57] <mfiano> f-g-f that is
[08:53:09] <beach> Guest8330: I think there is on on cliki.
[08:53:13] <unixlisp> in clx, *def-clx-class-use-defclass* default is nil. xlib::buffer is a structure.
[08:53:22] <Guest8330> nevermind I found it :)
[08:53:38] <Guest8330> Oh thanks beach
[08:53:41] <beach> Sure.
[08:55:03] <mfiano> About my idea above to use tagged fixnums though. I'm not sure if it is a good idea yet, as I may need methods dispatching on the type that is encoded in the MSB tag bits
[08:55:45] <mfiano> Which, would need a lot of MOP support for little gain. I'm not sure if a CASE jump table would be efficient enough for the number of types.
[08:57:20] <EdLangley[m]> Doesn’t beach’s generic functions paper use some sort of trick with numbers to make dispatch efficient? It’s been a while since I read it.
[08:57:27] <mfiano> My other thought is usually these arrays will be homogeneous, and if I can constrain that to _always_ be the case, the type can be encoded in the class wrapping the array
[08:58:02] <beach> EdLangley[m]: The essence of the paper is that register operations can be used where traditionally memory operations were.
[08:58:16] <beach> EdLangley[m]: It doesn't do anything about the indirection.
[08:59:07] <mfiano> I'm just rubber ducking here; prob can ignore me. I have been thinking about this all day while I do system administration.
[09:01:23] <beach> EdLangley[m]: There is still a lot of work to be done in the domain of language implementation, where in the past it was assumed that memory operations were roughly as fast as register operations, whereas that is no longer the case.
[09:01:52] <beach> C++ vtables would be interesting to examine for instance.
[09:08:12] <mfiano> So I can't pack any type tag into my integers anyway, so that idea is out. It turns out, the largest integer requires 64 bits of data without the type tag, and I surely don't want most implementations to upgrade the simple-array element type to T.
[09:09:07] <mfiano> It looks like my only option is indirection.
[09:12:20] *** Quits: akoana (~ah@user/akoana) (Quit: leaving)
[09:12:32] *** Quits: shka (~herr@109.231.0.226) (Ping timeout: 240 seconds)
[09:17:04] *** Quits: domovod (~domovod@176.196.122.197) (Quit: WeeChat 3.4)
[09:20:47] *** Joins: shka (~herr@109.231.0.226)
[09:23:13] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[09:24:51] <masinter> changing a defstruct both changes some defuns / compiler macros and the type name of existing data
[09:27:20] *** Quits: jealousmonk (~user@2804:431:e7c5:b880:889f:205:ed34:5b22) (Quit: ERC (IRC client for Emacs 27.1))
[09:27:38] <beach> But the point is that existing instances are now obsolete, and attempting to access some slots in such an obsolete instance may give some arbitrary result.
[09:28:09] *** Joins: gamaliel (~gamaliel@24.171.221.75)
[09:31:47] *** Quits: masinter (~masinter@c-73-158-116-21.hsd1.ca.comcast.net) (Quit: ~ Trillian - www.trillian.im ~)
[09:35:40] *** Quits: Guest8330 (~Guest83@116-251-60-165.pool.activ8me.net.au) (Quit: Client closed)
[09:38:32] <EdLangley[m]> Has much thought been put into using the GC to optimize memory access?
[09:39:14] <EdLangley[m]> If you have a moving GC, in theory you could track the probability that two objects are accessed in order and then arrange them so they can be read more efficiently
[09:39:30] <beach> The GC literature discusses locality.
[09:40:15] <EdLangley[m]> In relational databases, for example, if you have an index on a column, you can tell the DB to use that index to sort the data on disk.
[09:43:07] <unixlisp> If GC is written completely by lisp, it is easer to custum.
[09:43:56] <lisp123win> I wanted to ask, if I have a collection of objects that I want to add to multiple hash tables (each hash table basically being an index of sorts)
[09:44:26] <lisp123win> I am right in my assumption the overall memory cost is not too big because all the hash tables will share the same objects (to the extent I am placing the same object in multiple hash tables and not re-creating them)
[09:44:28] <lisp123win> ?
[09:50:00] <jackdaniel> yes
[09:50:40] <lisp123win> jackdaniel: Thanks!
[09:58:11] <jackdaniel> np
[09:59:17] *** Joins: Doraemon (~NeoCron@p200300c4cf146c0091a78f8614b30205.dip0.t-ipconnect.de)
[10:01:46] *** Quits: NeoCron (~NeoCron@p200300c4cf4baa00766f97a7a0c56948.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[10:03:19] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[10:03:43] *** Quits: gamaliel (~gamaliel@24.171.221.75) (Quit: Client closed)
[10:05:17] *** Joins: Jing (~hedgehog@240e:390:7c53:a7e1:fd8d:5488:d800:7443)
[10:13:02] *** Quits: bollu (~bollu@159.65.151.13) (Ping timeout: 250 seconds)
[10:13:34] *** Joins: bollu (~bollu@159.65.151.13)
[10:16:56] *** Quits: thomp (~thomp@c-98-239-97-121.hsd1.ca.comcast.net) (Quit: Konversation terminated!)
[10:17:20] *** Quits: bollu (~bollu@159.65.151.13) (Client Quit)
[10:17:39] *** Joins: bollu (~bollu@159.65.151.13)
[10:20:50] *** Quits: dre (~dre@2001:8003:c932:c301:2a14:8300:3b99:1684) (Ping timeout: 250 seconds)
[10:35:00] *** Joins: s-liao (~s-liao@101.86.96.21)
[10:43:45] *** Quits: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f) (Quit: Leaving)
[10:46:26] *** Joins: gaqwas (~john@dynamic-077-009-092-247.77.9.pool.telefonica.de)
[10:51:00] *** Joins: Cymew (~ante@c-e989225c.023-1144-7570702.bbcust.telenor.se)
[10:55:13] *** Parts: unixlisp (~unixlisp@2409:8a3c:5400:9ff0:fe08:4aff:fe66:ec11) ()
[10:56:17] *** Joins: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz)
[11:01:52] *** Joins: Algernon69 (~Algernon6@88.124.69.179)
[11:03:15] *** Joins: Algernon91 (~Algernon6@2a04:cec0:10fd:2e9d:a484:8794:e84d:9e60)
[11:03:50] *** Joins: Algernon666 (~Algernon6@2a04:cec0:10fd:2e9d:4418:6bcd:21ed:c287)
[11:04:07] *** Quits: Algernon91 (~Algernon6@2a04:cec0:10fd:2e9d:a484:8794:e84d:9e60) (Read error: No route to host)
[11:05:00] *** Parts: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz) ()
[11:05:36] *** Joins: osp (~osp@84.19.72.107)
[11:06:32] *** Quits: Algernon69 (~Algernon6@88.124.69.179) (Ping timeout: 240 seconds)
[11:07:02] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[11:12:04] *** Quits: pillton (~user@2405:b000:703:2::35:28) (Quit: ERC (IRC client for Emacs 27.2))
[11:13:29] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Client closed)
[11:14:34] *** Joins: azimut_ (~azimut@gateway/tor-sasl/azimut)
[11:16:01] <White_Flame> Bike: it can't prove that the LOOP will always find a match, and so could return NIL
[11:17:14] <White_Flame> you'd have to declare that dat is a recursing list and thus would never terminate (if that's the intent)
[11:17:28] <White_Flame> which isn't a possible declaration
[11:18:01] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[11:18:04] <empwilli> EdLangley[m]: I'm toying with this idea for compiled languages: Instead of having the class description in, let's say, c++ dictate how data is placed in memory, let is shuffle around (or do even fancier stuff, e.g. the things that databases do, in games terminology, this would be entity component systems)
[11:18:17] <empwilli> to optimize how they are accessed
[11:18:30] <White_Flame> (oh, Bike's gone :-P)
[11:18:33] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Ping timeout: 276 seconds)
[11:19:45] <White_Flame> empwilli: I've had plenty of ideas similar to that as well.  My notion would be that data tracks where it was allocated from, and usage feeds back into how it should be initially allocated/generated
[11:26:52] *** Joins: rgherdt (~rgherdt@ip5f5af1b0.dynamic.kabel-deutschland.de)
[11:27:43] <EdLangley[m]> So, what got me down this road was thinking about how, if the MMU were designed for the languages people like to program in (ones with lots of pointer chasing), it could use access patterns to transparently move data around in physical memory for better locality (sort of like how SSDs move data around on disk for wear leveling)
[11:27:48] *** Quits: shka (~herr@109.231.0.226) (Quit: Konversation terminated!)
[11:28:23] <EdLangley[m]> Then, I realized that the GC already walks all the objects periodically, so if you had some sort of statistics about access patterns, a moving GC could take those into account when it compacts the heap
[11:28:23] <empwilli> The term that you're looking for is "page migration"
[11:28:43] <empwilli> I'm not too deep in this literature but I think it has been shown to be too expensive to bring a benefit
[11:28:58] <EdLangley[m]> The simple case here would be, if you have a list that's iterated over frequently, to move all the cells together
[11:29:00] <empwilli> the other issue is, that, generally speaking, the granularity of 4k pages is too big
[11:29:09] *** Joins: biog (~user1@static.39.160.132.142.clients.your-server.de)
[11:29:16] <EdLangley[m]> It might be too expensive to do all the time, but maybe there's some sort of profile-guided optimization you could do?
[11:29:36] <EdLangley[m]> e.g. run a bit of code with a profiler and store statistics about the actual observed access patterns
[11:29:45] <EdLangley[m]> And then pin that, sort of like pinning a query plan.
[11:30:12] <EdLangley[m]> (talking about a language runtime now)
[11:30:14] <empwilli> I'd have to think about this for a moment but work >.>
[11:31:10] *** Joins: shka (~herr@109.231.0.226)
[11:31:29] <EdLangley[m]> So, a naive way to do this would be to attach a counter to every member of a class
[11:31:50] <EdLangley[m]> And increment it every time you follow the pointer from the instance -> the actual member
[11:32:14] <EdLangley[m]> Then, the gc picks a threshold and moves members close to the instance in memory, if the counter is above the threshold
[11:32:56] <EdLangley[m]> This probably has a bunch of disadvantages (turning reads into writes, etc.) but it'd improve the locality of instances and commonly used members.
[11:34:19] <empwilli> So what I can point you to is literature on NUMA systems where this is frequently a problem (at least from the perspective where to allocate memory to/from)
[11:47:45] *** Joins: mgl (~mgl@cpc87455-finc19-2-0-cust234.4-2.cable.virginm.net)
[11:54:24] *** Joins: lewisje (~lewisje@72.49.207.113)
[11:55:01] *** Quits: peterhil (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi) (Read error: Connection reset by peer)
[11:56:30] *** Joins: peterhil (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi)
[11:59:57] *** Joins: MajorBiscuit (~MajorBisc@c-001-020-016.client.tudelft.eduvpn.nl)
[12:00:06] *** Quits: peterhil (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi) (Read error: Connection reset by peer)
[12:00:37] *** Joins: peterhil (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi)
[12:01:39] *** Joins: karlosz (~karlosz@47.151.136.69)
[12:02:34] *** Joins: treflip (~user@user/treflip)
[12:07:04] *** Joins: attila_lendvai (~alendvai@catv-89-132-245-188.catv.broadband.hu)
[12:15:56] *** Joins: pve (~pve@87-93-187-85.bb.dnainternet.fi)
[12:24:12] *** Quits: Algernon666 (~Algernon6@2a04:cec0:10fd:2e9d:4418:6bcd:21ed:c287) (Read error: Connection reset by peer)
[12:24:29] *** Joins: Algernon666 (~Algernon6@2a04:cec0:10fd:2e9d:4418:6bcd:21ed:c287)
[12:34:39] *** Joins: dre (~dre@2001:8003:c932:c301:1533:19c3:8abd:b2d5)
[12:39:32] *** Quits: xaltsc (~xaltsc@user/xaltsc) (Remote host closed the connection)
[12:52:16] *** Joins: unixlisp (~unixlisp@111.37.113.212)
[12:53:29] *** Quits: amb007 (~a_bakic@102.215.76.86.rev.sfr.net) (Ping timeout: 256 seconds)
[12:53:39] *** Joins: amb007 (~a_bakic@102.215.76.86.rev.sfr.net)
[12:55:29] *** Joins: asarch (~asarch@2806:10ae:7:9368:d6a5:a45a:93c6:c233)
[12:57:03] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[13:05:13] *** Quits: karlosz (~karlosz@47.151.136.69) (Ping timeout: 256 seconds)
[13:10:16] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 250 seconds)
[13:19:33] *** Quits: treflip (~user@user/treflip) (Remote host closed the connection)
[13:20:47] *** Joins: s-liao (~s-liao@101.86.96.21)
[13:22:17] <unixlisp> Alfr: "3.2.2.3 also says that, apart form the listed exceptions the new definition takes precedence"  That is "about minimize the observable differences between compiled and interpreted programs".
[13:24:06] <Alfr> unixlisp, I don't understand what you want to express with ^.
[13:24:46] <unixlisp> new definition is run-time, old is compile-time.
[13:28:04] <Alfr> I still don't get what you're trying to tell.
[13:28:18] <unixlisp> it is not about redefining a function at run-time.
[13:28:29] *** Joins: kingofcsu (~kingofcsu@114.249.133.203)
[13:29:05] *** Quits: asarch (~asarch@2806:10ae:7:9368:d6a5:a45a:93c6:c233) (Quit: Leaving)
[13:30:19] <beach> Alfr: Frequently unixlisp seems to make statements without any context, and sometimes without any stated purpose.  I think you need to get used to it.
[13:32:01] <Alfr> beach, I think the context is that question form earlier this morning.
[13:33:27] <Alfr> unixlisp, but what are you trying to say with those quotes? Or what's the problem/question?
[13:34:24] <beach> I think unixlisp now realizes that the page that was cited before as being about redefining functions, in fact is not.  But I already said that.
[13:35:44] <Alfr> beach, I cited that, and I still think it's relevant. As it defines what conforming programs can expect, thus conforming implementations must arrange for.
[13:36:12] <unixlisp> beach: you said that. but I did not understand it at that time.
[13:37:55] <empwilli> EdLangley[m]: hm, given that GCs really are notorious sources for performance bottlenecs  (at least my understanding, I mostly don't do GC programming, so please correct me): Moving around members in memory would really add a large amount of overheads
[13:41:03] <Alfr> beach, (okay for the other case where it simply happens during runtime, DEFUN's documentation already specifies the behavior as replacing.)
[13:43:41] <beach> empwilli: malloc()/free() are more expensive than a tracing GC in general.
[13:43:59] <beach> empwilli: So if you are avoiding GC for performance reasons, you may be doing the wrong thing.
[13:44:32] <empwilli> no worries there :) I'm avoiding it just for the convenience of the languages I feel comfortable in
[13:44:42] <empwilli> (and that I have to work in, for that matter)
[13:44:55] <beach> So not Common Lisp?
[13:45:22] <empwilli> I'm currently working on adding common lisp to my repertoire, but I'm far from fluent in it
[13:45:35] <beach> I see.
[13:52:34] *** Quits: taiju (~user@240b:253:ec40:2400:b7d1:436e:2d61:e925) (Remote host closed the connection)
[13:54:32] *** Quits: kingofcsu (~kingofcsu@114.249.133.203) (Ping timeout: 240 seconds)
[13:54:56] <beach> empwilli: It is too bad, though, that people seem to think that automatic memory management is a "notorious source for performance bottlenecks".  They are then doomed to program in a way that makes it extremely hard to get both performance and modularity in their code.
[13:56:20] <beach> I wonder where such rumors come from.
[13:56:40] <beach> Maybe from the garbage collectors we had half a century ago.
[13:57:51] <empwilli> this sounds as if there were design patterns to program in favour of the GC. Is this the case? Can you point me to some resources?
[14:00:17] <beach> I had no design pattern in mind.  I am just making a general observation that "liveness is a global property" [from Paul Wilson], so not a "modular" property.  If your program is modular, you either need to copy all your objects, or use reference counters if you don't have automatic memory management.
[14:00:39] <seragold[m]> I think it was David Ungar back in early nights who showed that no sort of reference counting and its variants overall performed as well as state of art GC then.  So why would you want such in your way of whatever the most efficient and elegant patterns are it is possible to come up with in a language that gives you all the power?
[14:02:19] <beach> Right, and reference counters are very very expensive.
[14:02:32] *** Quits: biog (~user1@static.39.160.132.142.clients.your-server.de) (Ping timeout: 240 seconds)
[14:02:45] <empwilli> Ah, then I misunderstood you :)
[14:11:32] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 240 seconds)
[14:12:43] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[14:16:36] *** Joins: tfb (~tfb@88.98.95.237)
[14:20:56] *** Quits: skeemer (~skeemer@h-158-174-23-219.NA.cust.bahnhof.se) (Quit: Leaving)
[14:33:01] *** Quits: tfb (~tfb@88.98.95.237) (Remote host closed the connection)
[14:33:12] *** Joins: tfb (~tfb@88.98.95.237)
[14:33:23] *** Quits: tfb (~tfb@88.98.95.237) (Remote host closed the connection)
[14:33:33] *** Joins: tfb (~tfb@88.98.95.237)
[14:33:44] *** Quits: tfb (~tfb@88.98.95.237) (Remote host closed the connection)
[14:33:54] *** Joins: tfb (~tfb@88.98.95.237)
[14:34:05] *** Quits: tfb (~tfb@88.98.95.237) (Remote host closed the connection)
[14:34:15] *** Joins: tfb (~tfb@88.98.95.237)
[14:34:26] *** Quits: tfb (~tfb@88.98.95.237) (Remote host closed the connection)
[14:34:36] *** Joins: tfb (~tfb@88.98.95.237)
[14:34:48] *** Quits: tfb (~tfb@88.98.95.237) (Remote host closed the connection)
[14:34:58] *** Joins: tfb (~tfb@88.98.95.237)
[14:35:09] *** Quits: tfb (~tfb@88.98.95.237) (Remote host closed the connection)
[14:35:20] *** Joins: tfb (~tfb@88.98.95.237)
[14:35:31] *** Quits: tfb (~tfb@88.98.95.237) (Remote host closed the connection)
[14:35:41] *** Joins: tfb (~tfb@88.98.95.237)
[14:35:52] *** Quits: tfb (~tfb@88.98.95.237) (Remote host closed the connection)
[14:36:02] *** Joins: tfb (~tfb@88.98.95.237)
[14:36:13] *** Quits: tfb (~tfb@88.98.95.237) (Remote host closed the connection)
[14:36:22] <unixlisp> beach: early about (setf (symbol-function 'foo) newdef), you said "It could be defined behavior only if the function is currently undefined".  but in clhs about symbol-function entry, "setf may be used with symbol-function to replace a global function definition"
[14:36:23] *** Joins: tfb (~tfb@88.98.95.237)
[14:36:34] *** Quits: tfb (~tfb@88.98.95.237) (Remote host closed the connection)
[14:36:44] *** Joins: tfb (~tfb@88.98.95.237)
[14:36:55] *** Quits: tfb (~tfb@88.98.95.237) (Remote host closed the connection)
[14:37:07] *** Joins: tfb (~tfb@88.98.95.237)
[14:37:17] *** Quits: tfb (~tfb@88.98.95.237) (Remote host closed the connection)
[14:37:27] *** Joins: tfb (~tfb@88.98.95.237)
[14:37:38] *** Quits: tfb (~tfb@88.98.95.237) (Remote host closed the connection)
[14:37:48] *** Joins: tfb (~tfb@88.98.95.237)
[14:37:59] *** Quits: tfb (~tfb@88.98.95.237) (Remote host closed the connection)
[14:38:10] *** Joins: tfb (~tfb@88.98.95.237)
[14:38:21] *** Quits: tfb (~tfb@88.98.95.237) (Remote host closed the connection)
[14:38:31] *** Joins: tfb (~tfb@88.98.95.237)
[14:38:42] *** Quits: tfb (~tfb@88.98.95.237) (Remote host closed the connection)
[14:38:53] *** Joins: tfb (~tfb@88.98.95.237)
[14:39:04] *** Quits: tfb (~tfb@88.98.95.237) (Remote host closed the connection)
[14:39:04] *** Joins: asarch (~asarch@2806:10ae:7:9368:d6a5:a45a:93c6:c233)
[14:39:14] *** Joins: tfb (~tfb@88.98.95.237)
[14:39:25] *** Quits: tfb (~tfb@88.98.95.237) (Remote host closed the connection)
[14:39:36] *** Joins: tfb (~tfb@88.98.95.237)
[14:39:46] *** Quits: tfb (~tfb@88.98.95.237) (Remote host closed the connection)
[14:39:57] *** Joins: tfb (~tfb@88.98.95.237)
[14:40:09] *** Quits: tfb (~tfb@88.98.95.237) (Remote host closed the connection)
[14:40:19] *** Joins: tfb (~tfb@88.98.95.237)
[14:40:30] *** Quits: tfb (~tfb@88.98.95.237) (Remote host closed the connection)
[14:40:40] *** Joins: tfb (~tfb@88.98.95.237)
[14:40:51] *** Quits: tfb (~tfb@88.98.95.237) (Remote host closed the connection)
[14:41:01] *** Joins: tfb (~tfb@88.98.95.237)
[14:41:13] *** Quits: tfb (~tfb@88.98.95.237) (Remote host closed the connection)
[14:41:23] *** Joins: tfb (~tfb@88.98.95.237)
[14:41:34] *** Quits: tfb (~tfb@88.98.95.237) (Remote host closed the connection)
[14:41:44] *** Joins: tfb (~tfb@88.98.95.237)
[14:41:55] *** Quits: tfb (~tfb@88.98.95.237) (Remote host closed the connection)
[14:42:05] *** Joins: tfb (~tfb@88.98.95.237)
[14:42:16] *** Quits: tfb (~tfb@88.98.95.237) (Remote host closed the connection)
[14:42:26] *** Joins: tfb (~tfb@88.98.95.237)
[14:42:37] *** Quits: tfb (~tfb@88.98.95.237) (Remote host closed the connection)
[14:42:47] *** Joins: tfb (~tfb@88.98.95.237)
[14:42:58] *** Quits: tfb (~tfb@88.98.95.237) (Remote host closed the connection)
[14:43:08] *** Joins: tfb (~tfb@88.98.95.237)
[14:43:20] *** Quits: tfb (~tfb@88.98.95.237) (Remote host closed the connection)
[14:43:30] *** Joins: tfb (~tfb@88.98.95.237)
[14:43:41] *** Quits: tfb (~tfb@88.98.95.237) (Remote host closed the connection)
[14:43:51] *** Joins: tfb (~tfb@88.98.95.237)
[14:44:02] *** Quits: tfb (~tfb@88.98.95.237) (Remote host closed the connection)
[14:44:13] *** Joins: tfb (~tfb@88.98.95.237)
[14:44:24] *** Quits: tfb (~tfb@88.98.95.237) (Remote host closed the connection)
[14:44:34] *** Joins: tfb (~tfb@88.98.95.237)
[14:44:45] *** Quits: tfb (~tfb@88.98.95.237) (Remote host closed the connection)
[14:44:55] *** Joins: tfb (~tfb@88.98.95.237)
[14:45:06] *** Quits: tfb (~tfb@88.98.95.237) (Remote host closed the connection)
[14:45:16] *** Joins: tfb (~tfb@88.98.95.237)
[14:45:27] *** Quits: tfb (~tfb@88.98.95.237) (Remote host closed the connection)
[14:45:38] *** Joins: tfb (~tfb@88.98.95.237)
[14:45:46] *** Joins: ldb (~user@user/ldb)
[14:45:49] *** Quits: tfb (~tfb@88.98.95.237) (Remote host closed the connection)
[14:45:58] *** Joins: tfb (~tfb@88.98.95.237)
[14:46:10] *** Quits: tfb (~tfb@88.98.95.237) (Remote host closed the connection)
[14:46:20] *** Joins: tfb (~tfb@88.98.95.237)
[14:46:31] *** Quits: tfb (~tfb@88.98.95.237) (Remote host closed the connection)
[14:46:42] *** Joins: tfb (~tfb@88.98.95.237)
[14:46:53] *** Quits: tfb (~tfb@88.98.95.237) (Remote host closed the connection)
[14:47:03] *** Joins: tfb (~tfb@88.98.95.237)
[14:47:14] *** Quits: tfb (~tfb@88.98.95.237) (Remote host closed the connection)
[14:47:24] *** Joins: tfb (~tfb@88.98.95.237)
[14:47:35] *** Quits: tfb (~tfb@88.98.95.237) (Remote host closed the connection)
[14:47:45] *** Joins: tfb (~tfb@88.98.95.237)
[14:47:56] *** Quits: tfb (~tfb@88.98.95.237) (Remote host closed the connection)
[14:48:06] *** Joins: tfb (~tfb@88.98.95.237)
[14:48:18] *** Quits: tfb (~tfb@88.98.95.237) (Remote host closed the connection)
[14:48:46] *** Joins: tfb (~tfb@88.98.95.237)
[14:49:15] *** Quits: jeosol (~jeosol@user/jeosol) (Quit: Client closed)
[14:53:02] *** Quits: tfb (~tfb@88.98.95.237) (Ping timeout: 240 seconds)
[15:01:02] *** Quits: Algernon666 (~Algernon6@2a04:cec0:10fd:2e9d:4418:6bcd:21ed:c287) (Ping timeout: 240 seconds)
[15:01:24] *** Quits: ldb (~user@user/ldb) (Quit: ERC (IRC client for Emacs 27.2))
[15:07:16] *** Quits: mgl (~mgl@cpc87455-finc19-2-0-cust234.4-2.cable.virginm.net) (Quit: Client closed)
[15:14:18] <beach> unixlisp: Yes, notice the word "could" in order to explain to masinter that the existence of that operator doesn't necessarily mean that the behavior is always defined.  But as it turn out, it is.
[15:18:33] <loke[m]> beach: to answer your question, I think the answer is even simpler.
[15:20:02] <loke[m]> beach: Take your average C programmer: malloc and free "feels" free in terms of performance impact. So when someone suggests that a GC will run automatically and search for all the memory to be released, that feels "obviously" slower, since now it has to do stuff when before it didn't have to.
[15:20:59] <unixlisp> beach: I noticed the word "could". In clhs defun entry: "defun can be used to ... redefine an already-defined function", that word is "can".
[15:21:03] <loke[m]> Any argument that malloc/free are actually slow falls of deaf ears since their microbenchmarks all use stack allocation, which indeed is free.
[15:24:58] <flip214> loke[m]: not in terms of cache misses... alloca()te a few KB and you're out of your L1
[15:25:56] <loke[m]> flip214: Well sure, but that applies to all allocations, regardless of whether they are heap or stack. Unless I misunderstand your point?
[15:26:25] *** Parts: pranavats (3fba1d1b34@jabberfr.org) (Error from remote client)
[15:27:16] <beach> loke[m]: Yeah, but it's disturbing to me that so many decisions in the software industry are based on "gut feeling" rather than research.  And I can only imagine the amount of money wasted that way.
[15:27:35] <flip214> empwilli: one example favoring a GC: https://people.eecs.berkeley.edu/~fateman/papers/cachelisp.pdf
[15:27:39] <beach> unixlisp: The word "could" was in my phrase, not the Common Lisp HyperSpec.
[15:28:11] <flip214> loke[m]: no, you're understanding me correctly. My point is that stack allocation is not completely free either.
[15:28:28] <flip214> empwilli: "Faster list processing via automatically rearranging memory"
[15:28:33] <flip214> is the above paper
[15:31:24] <flip214> empwilli: and ELS2018 (https://www.european-lisp-symposium.org/2018/#programme) had "Dynamic Optimizations for SBCL Garbage Collection" which would switch a load balancer around before doing GC, so the equivalent to free() would be free here
[15:31:32] *** Quits: Cymew (~ante@c-e989225c.023-1144-7570702.bbcust.telenor.se) (Ping timeout: 240 seconds)
[15:31:51] <beach> unixlisp: Do I really have to spell this out to you?  I mean to say "masinter, you are right that there is an operator (setf symbol-function), but you say that its existence is proof that redefining functions is defined behavior.  However, it COULD very well be the case [but it isn't] that this operator is defined only when the symbol does not already have a function defined, in which case definition is OK, but REdefinition is not
[15:31:56] <beach> unixlisp: ... So the existence itself does not guarantee that redefining a function is defined behavior.  However, redefining a function IS defined behavior, as the Common Lisp HyperSpec specifies".
[15:32:08] <beach> unixlisp: Is it clear now?
[15:32:15] * beach guesses probably not.
[15:33:07] <empwilli> flip214: thanks, gonna dig into that
[15:33:30] <phoe> beach: DEFCONSTANT would be a better example I think
[15:33:37] <phoe> DEFCONSTANT exists but redefining a constant is UB
[15:35:29] <beach> I give up.
[15:35:48] <unixlisp> beach: oh. "redefining a function IS defined behavior", acording to "defun can be used to ... redefine an already-defined function"?
[15:35:54] <beach> phoe: I didn't come up with the examples.
[15:36:02] <phoe> oh, okay
[15:36:27] *** Joins: tfb (~tfb@88.98.95.237)
[15:37:42] *** semz_ is now known as semz
[15:38:21] *** Joins: treflip (~user@user/treflip)
[15:40:13] *** Joins: mgl (~mgl@cpc87455-finc19-2-0-cust234.4-2.cable.virginm.net)
[15:44:27] <unixlisp> beach: I understand your meaning of the masinter case. don't give up :)
[15:50:50] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[15:51:38] *** Joins: kingofcsu (~kingofcsu@114.249.133.203)
[15:51:43] *** Joins: random-nick (~random-ni@87.116.167.125)
[15:52:19] *** Quits: kingofcsu (~kingofcsu@114.249.133.203) (Client Quit)
[15:55:52] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[15:56:50] *** Joins: Algernon666 (~Algernon6@2a04:cec0:10fd:2e9d:4418:6bcd:21ed:c287)
[15:59:03] *** Quits: peterhil (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi) (Remote host closed the connection)
[15:59:20] *** Joins: kingofcsu (~kingofcsu@114.249.133.203)
[16:01:01] *** Quits: Algernon666 (~Algernon6@2a04:cec0:10fd:2e9d:4418:6bcd:21ed:c287) (Ping timeout: 240 seconds)
[16:01:21] *** Quits: kingofcsu (~kingofcsu@114.249.133.203) (Client Quit)
[16:03:42] *** Quits: mgl (~mgl@cpc87455-finc19-2-0-cust234.4-2.cable.virginm.net) (Quit: Client closed)
[16:04:01] *** Joins: Algernon666 (~Algernon6@2a04:cec0:10fd:2e9d:4418:6bcd:21ed:c287)
[16:05:29] *** Joins: kingofcsu (~kingofcsu@114.249.133.203)
[16:05:35] *** Quits: kingofcsu (~kingofcsu@114.249.133.203) (Remote host closed the connection)
[16:07:07] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[16:07:35] *** Joins: igemnace (~ian@user/igemnace)
[16:14:15] *** Quits: unixlisp (~unixlisp@111.37.113.212) (Remote host closed the connection)
[16:14:43] *** Joins: unixlisp (~unixlisp@2409:8a3c:5400:9ff0:fe08:4aff:fe66:ec11)
[16:16:28] *** Quits: unixlisp (~unixlisp@2409:8a3c:5400:9ff0:fe08:4aff:fe66:ec11) (Remote host closed the connection)
[16:16:55] *** Joins: unixlisp (~unixlisp@2409:8a3c:5400:9ff0:fe08:4aff:fe66:ec11)
[16:18:30] *** Joins: jeosol (~jeosol@user/jeosol)
[16:20:42] *** Quits: unixlisp (~unixlisp@2409:8a3c:5400:9ff0:fe08:4aff:fe66:ec11) (Remote host closed the connection)
[16:26:38] *** Joins: varjag (~user@188.95.247.247)
[16:27:21] *** Joins: unixlisp (~unixlisp@111.37.113.212)
[16:28:27] *** Joins: mepy (~mepy@62.98.26.19)
[16:29:38] *** Joins: pranavats (3fba1d1b34@jabberfr.org)
[16:29:58] *** Joins: s-liao (~s-liao@101.86.96.21)
[16:31:38] *** Quits: unixlisp (~unixlisp@111.37.113.212) (Remote host closed the connection)
[16:32:13] *** Joins: unixlisp (~unixlisp@2409:8a3c:5400:9ff0:fe08:4aff:fe66:ec11)
[16:33:53] *** Quits: unixlisp (~unixlisp@2409:8a3c:5400:9ff0:fe08:4aff:fe66:ec11) (Remote host closed the connection)
[16:34:20] *** Joins: unixlisp (~unixlisp@2409:8a3c:5400:9ff0:fe08:4aff:fe66:ec11)
[16:38:16] *** Quits: unixlisp (~unixlisp@2409:8a3c:5400:9ff0:fe08:4aff:fe66:ec11) (Remote host closed the connection)
[16:38:42] *** Joins: unixlisp (~unixlisp@2409:8a3c:5400:9ff0:fe08:4aff:fe66:ec11)
[16:40:34] *** Quits: unixlisp (~unixlisp@2409:8a3c:5400:9ff0:fe08:4aff:fe66:ec11) (Remote host closed the connection)
[16:41:00] *** Joins: unixlisp (~unixlisp@2409:8a3c:5400:9ff0:fe08:4aff:fe66:ec11)
[16:45:04] *** Quits: unixlisp (~unixlisp@2409:8a3c:5400:9ff0:fe08:4aff:fe66:ec11) (Remote host closed the connection)
[16:45:28] *** Joins: unixlisp (~unixlisp@2409:8a3c:5400:9ff0:fe08:4aff:fe66:ec11)
[16:47:09] *** Quits: unixlisp (~unixlisp@2409:8a3c:5400:9ff0:fe08:4aff:fe66:ec11) (Remote host closed the connection)
[16:50:21] *** Quits: beach (~user@lfbn-bor-1-623-116.w86-213.abo.wanadoo.fr) (Ping timeout: 256 seconds)
[16:55:59] *** Joins: unixlisp (~unixlisp@2409:8a3c:5400:9ff0:fe08:4aff:fe66:ec11)
[16:58:36] *** Parts: pranavats (3fba1d1b34@jabberfr.org) (Error from remote client)
[17:00:16] *** Quits: unixlisp (~unixlisp@2409:8a3c:5400:9ff0:fe08:4aff:fe66:ec11) (Remote host closed the connection)
[17:00:48] *** Joins: unixlisp (~unixlisp@2409:8a3c:5400:9ff0:fe08:4aff:fe66:ec11)
[17:01:28] *** Parts: unixlisp (~unixlisp@2409:8a3c:5400:9ff0:fe08:4aff:fe66:ec11) ()
[17:04:06] *** Joins: pranavats (3fba1d1b34@jabberfr.org)
[17:04:07] *** Joins: mgl (~mgl@cpc87455-finc19-2-0-cust234.4-2.cable.virginm.net)
[17:18:05] *** Quits: tfb (~tfb@88.98.95.237) (Remote host closed the connection)
[17:18:15] *** Joins: tfb (~tfb@88.98.95.237)
[17:18:32] *** Quits: tfb (~tfb@88.98.95.237) (Client Quit)
[17:23:00] *** Joins: kevingal (~quassel@149.157.101.196)
[17:25:23] *** Joins: beach (~user@2a01:cb19:150:3400:ae66:f55f:4595:b209)
[17:27:40] *** Quits: kevingal (~quassel@149.157.101.196) (Ping timeout: 250 seconds)
[17:27:47] *** Joins: kevingal (~quassel@hamilton-nat.nuim.ie)
[17:32:26] *** Quits: kevingal (~quassel@hamilton-nat.nuim.ie) (Ping timeout: 250 seconds)
[17:32:44] *** Joins: kevingal (~quassel@2001:770:c0:401:29cd:58b4:2e08:bebe)
[17:32:59] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[17:45:47] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[17:48:53] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[17:53:06] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[17:56:58] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[17:58:18] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Ping timeout: 276 seconds)
[18:02:39] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[18:03:37] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[18:06:58] *** Joins: treflip` (~user@95.79.32.99)
[18:06:59] *** Joins: s-liao (~s-liao@101.86.96.21)
[18:07:12] *** Quits: treflip` (~user@95.79.32.99) (Remote host closed the connection)
[18:08:00] *** Joins: VincentVega (~user@212.97.1.64)
[18:08:32] *** Quits: treflip (~user@user/treflip) (Ping timeout: 240 seconds)
[18:14:16] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Client closed)
[18:16:19] *** Quits: X-Scale (~ARM@218.92.108.93.rev.vodafone.pt) (Ping timeout: 256 seconds)
[18:28:48] *** Joins: biog (~user1@159.224.42.85)
[18:29:19] *** Joins: Bike (~Glossina@71.69.170.70)
[18:29:19] *** ChanServ sets mode: +o Bike
[18:33:29] *** Quits: amb007 (~a_bakic@102.215.76.86.rev.sfr.net) (Ping timeout: 256 seconds)
[18:34:35] *** Joins: amb007 (~a_bakic@102.215.76.86.rev.sfr.net)
[18:35:43] *** Joins: treflip (~user@user/treflip)
[18:50:36] *** Quits: Alfr (~Alfr@user/alfr) (Killed (erbium.libera.chat (Nickname regained by services)))
[18:50:40] *** Joins: Alfr (~Alfr@user/alfr)
[18:50:42] *** Joins: john__ (~john@dynamic-077-009-092-247.77.9.pool.telefonica.de)
[18:50:46] *** Quits: gaqwas (~john@dynamic-077-009-092-247.77.9.pool.telefonica.de) (Read error: Connection reset by peer)
[18:52:45] *** Quits: light (~light@user/light) (Ping timeout: 256 seconds)
[19:01:54] *** Joins: light (~light@user/light)
[19:03:45] *** Quits: jeosol (~jeosol@user/jeosol) (Quit: Client closed)
[19:08:37] *** Quits: light (~light@user/light) (Ping timeout: 256 seconds)
[19:20:51] *** Quits: Algernon666 (~Algernon6@2a04:cec0:10fd:2e9d:4418:6bcd:21ed:c287) (Read error: Connection reset by peer)
[19:20:55] *** Joins: Algernon91 (~Algernon6@2a01:e0a:511:6ce0:359b:ef20:8303:bcba)
[19:24:00] *** Joins: ahlk (~user@2600:1700:31c0:3a10::43)
[19:28:16] *** Quits: Algernon91 (~Algernon6@2a01:e0a:511:6ce0:359b:ef20:8303:bcba) (Ping timeout: 245 seconds)
[19:38:56] *** Joins: alvaro121_ (~aa@201.230.126.66)
[19:40:11] *** Quits: alvaro121 (~aa@201.230.126.66) (Ping timeout: 256 seconds)
[19:52:59] <Josh_2> hineios:
[19:53:02] <Josh_2> oops
[19:53:16] <Josh_2> Meant to just write Hi
[19:54:03] *** Joins: wacki (~wacki@87.123.132.123)
[19:54:23] *** Joins: Algernon91 (~Algernon6@2a01:e0a:511:6ce0:359b:ef20:8303:bcba)
[19:54:23] *** Joins: lucerne (~lucerne@ip202.ip-51-178-215.eu)
[19:54:54] <edgar-rft> Common Lisp is a great language for oops-oriented programming :-)
[19:54:55] *** Joins: Algernon666 (~Algernon6@2a04:cec0:10fd:2e9d:55a2:57c6:2850:4dcb)
[19:57:48] <phoe> In case of (loop for sym being the symbols of :bar collect sym) - is it possible that the list will contain duplicates?
[19:58:41] *** Quits: Algernon91 (~Algernon6@2a01:e0a:511:6ce0:359b:ef20:8303:bcba) (Ping timeout: 245 seconds)
[19:59:49] <moon-child> maybe some interaction with unintern?
[19:59:54] <Josh_2> edgar-rft: exactly :)
[20:00:11] <phoe> hm, weird, I can't reproduce what I saw moments ago
[20:00:12] <phoe> oh well
[20:02:18] <phoe> okay, I can reproduce it
[20:02:49] <phoe> but still - is it expected to contain duplicates?
[20:03:21] <phoe> I know that DO-SYMBOLS can do that, but I wonder about LOOP FOR-AS-PACKAGE
[20:03:28] <Bike> phoe: do-symbols can hit symbols multiple times if they're inherited from multiple pa- right.
[20:03:42] <phoe> yes - so, just a question about LOOP in this case
[20:04:09] <phoe> clhs 6.1.2.1.7
[20:04:09] <specbot> The for-as-package subclause: http://www.lispworks.com/reference/HyperSpec/Body/06_abag.htm
[20:04:17] <Bike> well, according to the description in 6.1.2.1.7, "the symbols" means it will iterate over symbols accessible in the package
[20:04:22] <Bike> which is exactly what do-symbols does
[20:04:26] <Bike> so, i'd say yes, there can be duplicates
[20:04:27] <phoe> yes
[20:04:32] <phoe> OK - thanks
[20:04:55] <phoe> using present-symbols fixes this, too, so there's my full answer
[20:05:41] <Bike> i didn't even know present-symbols was a thing lol
[20:07:10] * Xach neither
[20:07:24] *** Joins: jealousmonk (~user@2804:431:e7c5:b880:889f:205:ed34:5b22)
[20:16:50] * mfiano wonders if alexandria has a type specifier for "non-nil symbol"
[20:18:49] <phoe> you mean (and symbol (not null))?
[20:19:01] <mfiano> Yes
[20:19:33] <phoe> doesn't seem like it
[20:19:42] <mfiano> It has things like positive-fixnum, non-negative-fixnum, etc. Seems like it should have that
[20:20:51] <phoe> it won't
[20:21:09] <phoe> too many people :use it to risk changing its export list
[20:21:25] <EdLangley[m]> It has a versioning scheme for that, though
[20:21:43] <EdLangley[m]> There's now a alexandria-2 package
[20:21:44] <phoe> yes, but you need to know about it to be able to use alexandria's other package :D
[20:22:34] <mfiano> Seems it only has 10 type definitions, all in alexandria-1
[20:22:40] <jackdaniel> the fact that ql prints "alexandria-2...........>" makes it quite noticeable
[20:22:55] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[20:23:07] <phoe> but only during compilation! and it usually happens in between tons of other packages too, so it's possible to miss it
[20:23:29] <EdLangley[m]> Also, if you do alex:dim-in-bounds<TAB> for complete, like I do, SLIME will put in the -2
[20:23:48] <EdLangley[m]> I find a lot of packages this way :)
[20:23:53] <EdLangley[m]> Or through APROPOS
[20:23:56] <phoe> :D
[20:24:03] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[20:24:47] <dim> (ahah always fun to get an alert/highlight for things like this) ;-)
[20:24:56] <phoe> :D²
[20:25:39] <phoe> (let ((dim (array-dimension array 0))) ...)
[20:25:46] <EdLangley[m]> dim: are you in-bounds?
[20:25:48] <dim> BTW has anyone tried shipping a software built with ECL: a C-core and some APIs exposed to a Lisp part of the application? -- I am thinking about doing that for pgloader, allowing me to use the existing C drivers for database sources etc
[20:25:49] *** Quits: Catie (~user@user/catie) (Quit: sQuit)
[20:26:00] *** Joins: Catie (~user@user/catie)
[20:26:02] <dim> EdLangley[m]: I can't say publicly that I am or that I am not ;-)
[20:27:32] <jackdaniel> dim: I've shipped a C application linked against ECL that allowed connecting via swank medling with a running C application (i.e recompiling functions), the api was available to the lisp world to test things out
[20:27:46] <jackdaniel> (can't share the source code though)
[20:28:18] <EdLangley[m]> There's an iOS app that embeds ECL in a Qt app
[20:28:29] <EdLangley[m]> and lets you design UIs on the fly
[20:29:07] <jackdaniel> right, eql5 is a very cool project
[20:29:10] <EdLangley[m]> https://gitlab.com/eql/eql5-ios
[20:29:25] <dim> jackdaniel: sounds a good starting point ; in the case of pgloader I would do the basic boring stuff in C (copy data around) and the interesting bits in Lisp (merge catalogs, parse commands, all the advanced / user-friendly stuff) ; would you have an opinion?
[20:29:45] <jackdaniel> btw pls works on qt6 continuation that qt-core and qt-widgets dependency
[20:30:07] <dim> I mean I would like to both simplify the build process and also have an eye to better perfs for the inner loops when written with the official database drivers in C
[20:30:47] <jackdaniel> dim: core written in C and linked against ECL sounds like a good fit for that, yes
[20:31:01] <dim> more important than perfs is also full protocol support even with new versions, including auth and encryption
[20:31:16] <dim> jackdaniel: awesome, I might look into how to implement that later then ;-)
[20:31:23] <jackdaniel> you could also write your own lisp libraries and compile them to shared objects (you may inline C code in Lisp functions too)
[20:31:43] <EdLangley[m]> It would be nice to keep postmodern up to date here
[20:31:55] <dim> it's either that or porting to Clojure to benefit from all those JDBC drivers out-there
[20:32:15] <jackdaniel> the only limitation is that if you want to recompile functions that have inline c code, then a c compiler must be available on the system
[20:32:24] <dim> maintaining qmynd for MySQL and patching Postmodern for Postgres SCRAM authentication and all those things, I believe it's too hard an ask for just maintaining pgloader
[20:32:32] <jackdaniel> (dynamic ffi works without that, also precompiling things works)
[20:33:00] <dim> yeah well I would like to ship a copy of pgloader that's all static built in the ideal world
[20:33:25] <dim> I like the dynamic aspects, but I prefer the “just works” story for end-users that don't even know lisp is involved in pgloader, and when they do, don't understand why
[20:33:27] <jackdaniel> ecl may be linked in statically, but you need to keep in mind that the license of the implementation is lgpl-2.1+
[20:34:02] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[20:34:08] <dim> well I mean I can also build dynamically, my focus is easy-to-build, easy-to-ship, easy-to-use, don't need to know anything about lisp
[20:34:17] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[20:34:23] <jackdaniel> sure; the application I've mentioned earlier had ecl mostly for debugging, live patching and such, the end user was not concerned with any programming languages
[20:34:36] <dim> and to be fair the current pgloader story doesn't provide these when using either SBCL or CCL
[20:34:39] *** Quits: kevingal (~quassel@2001:770:c0:401:29cd:58b4:2e08:bebe) (Remote host closed the connection)
[20:34:55] <jackdaniel> deployment is a hard problem disregarding the language
[20:35:23] <jackdaniel> even if you have a C application linked only against libc
[20:35:48] <dim> I have no problem getting a debian package included in debian and apt.postgresql.org for pg_auto_failover and the latest tool I wrote, pgcopydb, that are written 100% in C...
[20:35:55] <EdLangley[m]> You can also link the native driver into the application statically
[20:36:36] <dim> I have tons of problems with pgloader where I bailed out and the current maintainers each time want to orphan it and find a way to update bits here and there and continue to maintain it but spend hours and hours on the package building and maintenance
[20:36:54] <jackdaniel> I need to go now, I'll read the log later
[20:37:10] <dim> thanks for your help already jackdaniel , I know I want to try with ECL now ;-)
[20:40:00] <etimmons> dim: ECL is probably great for this, but you can also link C code into the SBCL runtime. You can even deliver a fully static executable (I've got some patches floating around for that. I really need to work on getting them upstreamed)
[20:40:20] *** Joins: kotshie (~kotshie@68.72.208.140)
[20:41:16] <dim> I have heard and keep hearing about that capability each time I bring the topic up, but I never got a clear documentation using maintained APIs to do that in pgloader myself, unfortunately
[20:41:30] <dim> think embedding OpenSSL and libpq, maybe, to get started
[20:41:48] <EdLangley[m]> CFFI has documentation for this
[20:41:50] <dim> rewriting the inner core of pgloader in C looks the easiest way around for me nowadays :/
[20:42:23] <EdLangley[m]> https://common-lisp.net/project/cffi/manual/cffi-manual.html#Static-Linking
[20:45:21] <dim> Thanks. someday I should try and understand CFFI. It has only been problems to me.
[20:45:43] *** Joins: Algernon91 (~Algernon6@2a04:cec0:10e7:994e:55a2:57c6:2850:4dcb)
[20:48:37] <mgl> jackdaniel: In ECL, (let ((*print-pretty* nil)) (princ '(function foo)))  prints  #'FOO. Is this compliant? Is there a way around this?
[20:49:31] *** Quits: Algernon666 (~Algernon6@2a04:cec0:10fd:2e9d:55a2:57c6:2850:4dcb) (Ping timeout: 245 seconds)
[20:52:11] <etimmons> I actually don't think CFFI's manual is great here. That static linking it talks about is really only for CFFI generated wrappers, not system libraries like OpenSSL
[20:53:39] <etimmons> I use a homebrewed system to build my static executables. But it's definitely not fit for others to use at the moment
[20:55:13] <etimmons> The current best (and I believe supported) way is to build SBCL with :sb-linkable-runtime option. Then link your libraries with sbcl.o to make a new runtime that has all your C libs already present
[20:55:23] <EdLangley[m]> I've used it for system libraries
[20:55:33] <etimmons> But, alas, I don't know of clear documentation that lays it out
[20:55:37] <etimmons> EdLangley[m]: How?
[20:55:38] <EdLangley[m]> But, it's a bit annoying.
[20:55:58] <EdLangley[m]> I forget, I'd need to find an old project
[20:58:24] *** Quits: mgl (~mgl@cpc87455-finc19-2-0-cust234.4-2.cable.virginm.net) (Ping timeout: 256 seconds)
[20:59:51] <etimmons> Let me know if you do, I'd be interested in seeing it
[21:01:41] <dim> remember that I need something that builds on machine I have never seen and will never see, it needs to be built in debian systems and by users when they want to, most of them using a Docker image of some sorts...
[21:01:52] <fitzsim> etimmons: with that sbcl.o approach, is it possible to get a REPL on the running binary?
[21:02:44] <dim> anyway a C application that uses ECL to implement some of the higher form logic (decision making, etc) in Common Lisp sounds a good approach for my delivery needs here
[21:02:56] <etimmons> fitzsim: Definitely!
[21:03:21] <fitzsim> so SBCL can be used to provide Common Lisp as an extension language then
[21:03:58] <Shinmera> Not really, SBCL has quite specific requirements about the runtime (such as catching a bunch of signals)
[21:04:41] <etimmons> fitzsim: Shinmera's right. It sounds like you want the relatively recent additions to SBCL for producing a dynamic library
[21:05:50] <fitzsim> ah, yeah, I see
[21:06:10] <phoe> goodness
[21:06:24] <phoe> working on CLR2 really has me chasing some funny edge cases
[21:06:25] <fitzsim> SBCL is "in charge" in the current iteration, but the idea is to create a linkable libsbcl.so so that the C-based runtime can be in charge
[21:06:28] <EdLangley[m]> Setting CFLAGS during the build should let you link in additional libraries
[21:06:28] <fitzsim> something like that?
[21:06:49] <EdLangley[m]> I haven’t tried this, but I’ve done similar things manually
[21:06:55] <etimmons> fitzsim: I don't know, I haven't been following it closely
[21:13:18] *** Joins: light (~light@user/light)
[21:17:35] *** Joins: mgl (~mgl@cpc87455-finc19-2-0-cust234.4-2.cable.virginm.net)
[21:26:59] *** Joins: Lord_Nightmare (Lord_Night@user/lord-nightmare/x-3657113)
[21:33:57] *** Joins: cage (~cage@dynamic-adsl-84-221-50-16.clienti.tiscali.it)
[21:39:10] *** Quits: Jing (~hedgehog@240e:390:7c53:a7e1:fd8d:5488:d800:7443) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[21:43:27] *** Joins: EsoAlgo (~EsoAlgo@152.70.142.52)
[21:44:08] <seragold[m]> <dim> "remember that I need something..." <- I am confused. If it is run from docker image then the OS environment is already controlled by that image regardless of environment of machine the image in run on, right?
[21:45:44] <seragold[m]> <jackdaniel> "right, eql5 is a very cool..." <- I don't trust the Qt company folks enough to invest much here.  Starting to look at CLOG
[21:52:35] *** Quits: treflip (~user@user/treflip) (Remote host closed the connection)
[21:52:57] *** Quits: MajorBiscuit (~MajorBisc@c-001-020-016.client.tudelft.eduvpn.nl) (Ping timeout: 240 seconds)
[21:53:22] *** Joins: varjagg (~user@ti0040a400-5479.bb.online.no)
[21:53:59] <tyson2> seragold[m]: what do you think of Clog so far?
[21:55:28] *** Quits: varjag (~user@188.95.247.247) (Ping timeout: 250 seconds)
[21:56:24] <seragold[m]> tyson2: too early in my journey to say so far as day job eating too much energy. more to say in about a month.
[21:59:12] <tyson2> ok thanks seragold[m] , same here, hope to look at it again shortly
[22:07:23] <White_Flame> I had built a few flash & html based GUIs, but not a general library yet.  I tend to believe that having a desktop metaphor _inside_ a webpage isn't necessarily the most useful
[22:08:04] <White_Flame> but having multiple tabs/windows be part of the same lisp application (or server) context is quite important
[22:11:15] *** Quits: kotshie (~kotshie@68.72.208.140) (Remote host closed the connection)
[22:11:35] <Shinmera> I'm sad that Clog is completely useless for my purposes :(
[22:11:40] <Shinmera> It looks really neat
[22:13:10] <Shinmera> I'm *also* sad that I've so far been unable to procure any real contributors for Alloy
[22:13:21] <Shinmera> Or had much time to work on it myself beyond emergency fixes
[22:13:28] <moon-child> alloy?
[22:13:30] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[22:13:38] <Shinmera> https://github.com/shirakumo/alloy
[22:13:49] <Shinmera> The toolkit I've been building and using for games
[22:14:03] <EdLangley[m]> I’ve been meaning to look into it, but my work schedule is a bit crazy
[22:14:12] <Shinmera> Isn't everyone's
[22:16:23] <White_Flame> hmm, how does it do layout without having any standard renderer?
[22:16:39] <White_Flame> or is everything of specified size instead of by flow?
[22:16:48] <Shinmera> It just does it. You only need the renderer once you enter text.
[22:17:03] <Shinmera> the interaction between that is one of the parts that's still a bit shakey.
[22:17:40] <Shinmera> Shakey as in I'm not happy with the protocol, not that it doesn't work at all.
[22:18:55] <Shinmera> Ime most elements are positioned in a way that does not require feedback from the text renderer.
[22:20:24] <dim> seragold[m]: I mean I have seen too many recipes/how-tos with manual fiddling or worse interactive adjustments along the years, and finding the so files for cffi and more generally in common lisp has always been a problem when I had to
[22:24:27] <seragold[m]> <Shinmera> "I'm sad that Clog is completely..." <- So what makes it so?  Might be good information for the fond dreams of many of us.
[22:24:32] *** Quits: Algernon91 (~Algernon6@2a04:cec0:10e7:994e:55a2:57c6:2850:4dcb) (Ping timeout: 240 seconds)
[22:24:37] <Shinmera> it requires a browser.
[22:27:21] <White_Flame> a browser is a huge heavy-lifting UI library :)
[22:27:27] <Shinmera> It is.
[22:38:28] <White_Flame> the other thing is that a browser-based frontend means you automatically have remote access and multi-user
[22:38:36] <White_Flame> so I tend to consider all those things positives
[22:39:06] <White_Flame> the browsers tend to have nicer looking rendering for plain fonts & layout, and easier "make it look good" options than native UIs
[22:39:48] <White_Flame> but their legacy-laden languages are kinda clunky and beg for a nice declarative lisp abstraction on top of them
[22:40:54] <EdLangley[m]> The downside is there’s a whole class of side-channel attacks that are ubiquitous now
[22:40:55] <Shinmera> I also just don't want to ship browsers.
[22:41:20] <EdLangley[m]> Because browser apps have to communicate any persistent data over the network.
[22:41:48] <EdLangley[m]> https://www.microsoft.com/en-us/research/publication/side-channel-leaks-in-web-applications-a-reality-today-a-challenge-tomorrow/
[22:42:32] <moon-child> they were always ubiquitous
[22:42:37] <moon-child> they just get more press now
[22:46:45] <White_Flame> EdLangley[m]: sure, and if somebody is snooping on your local machine, who knows what they can find
[22:47:01] <White_Flame> but those sorts of leaks in that link seem to be around centralized services where lots of statistics can be gleaned
[22:47:12] <White_Flame> as opposed to using it as a local termianl to your own applications
[22:47:23] <EdLangley[m]> They’re timing attacks on SSL connections
[22:48:17] <White_Flame> any time you hit the public net, you risk that
[22:48:24] <White_Flame> especially centralized services
[22:48:31] <White_Flame> I don't think you need to worry abotu that for private use
[22:48:31] <EdLangley[m]> By observing things like packet size and timings you can essentially decrypt information about a specific user
[22:48:50] <EdLangley[m]> With a local app, I can firewall data exfiltration
[22:49:20] <EdLangley[m]> And I don’t have to think at all about whether the middle boxes can run this sort of attack against me.
[22:49:53] <White_Flame> and that local app can use browser technologies to offload tons of really nice rendering & interactivity features
[22:50:04] <White_Flame> and there are no "middle boxes"
[22:50:30] <EdLangley[m]> Sure
[22:50:39] <White_Flame> and if using SSH tunnels to your own applications elsewhere, someone would have to be severely intimate with what you're doing on both ends to be able to gain anything, assuming you're not pouring multiple links of thnigs over such channels
[22:51:15] <White_Flame> meaning, using a single tunnel for more than 1 application at a time
[22:51:22] <EdLangley[m]> But, my main issue with non-native toolkits is that it ruins the cohesiveness of my desktop
[22:51:48] <EdLangley[m]> Cocoa on macOS has all sorts of nice stuff built in that the developers of these apps don’t know and/or care about
[22:52:02] <White_Flame> there isn't that much cohesiveness anyway. copy/paste/drag is basically just used for text and files across applications for the most part, and browsers support that
[22:52:21] <EdLangley[m]> And being forced to use Electron and stuff makes life bad
[22:52:36] <White_Flame> yeah, electron is a bad packaging model
[22:52:58] *** Joins: masinter (~masinter@c-73-158-116-21.hsd1.ca.comcast.net)
[22:53:13] <seragold[m]> Can I do electron like things with CLOG.  I thought I saw that in some post I can't put my finger on.  If so it might close some of the browser objections.
[22:54:29] <EdLangley[m]> You can bundle a web server in your electron app
[22:54:48] <seragold[m]> yeah it is heavy but to get something that looks runs the same everywhere I am not sure I have a strong objection.
[22:54:49] <EdLangley[m]> But my issue is that web tech has bad UX in my preferred desktop environments
[22:55:04] <EdLangley[m]> Because it doesn’t work like the native widgets
[22:55:37] <White_Flame> native widgets change between OS releases, too, so there really isn't a singular goal for a portable system
[22:55:42] <EdLangley[m]> This is also an issue with Qt, but less so with react-native
[22:55:46] <seragold[m]> I am sad desktop UX has largely been greatly lost to web and mobile UX today compared to a couple of decades ago.
[22:55:51] <White_Flame> yep
[22:56:23] <EdLangley[m]> The solution to this is to stop using technologies that increase fragmentation
[22:58:01] <EdLangley[m]> CAPI is nice here
[22:58:04] <seragold[m]> even my recent Mac OS desktop looks like candy colored mobile BS to a degree I find offensive
[22:58:14] <Shinmera> Cohesive LAF is overrated. It's really not important to users, and it's not like it ever really was very cohesive at all. There's always been tons of apps on any platform that break LAF either in small ways by using other icon sets, or in big ways by using completely custom styling.
[22:58:19] <EdLangley[m]> Because it uses real cocoa widgets
[22:58:25] <White_Flame> I, for one, like reusing solutions for complex problems, instead of reimlementing simpler hacks
[22:58:50] <White_Flame> and what a browser offers is some very complex stuff to reimplement
[22:59:04] <EdLangley[m]> Shinmera: I just want my keyboard shortcuts to work as expected
[22:59:26] <EdLangley[m]> There are a ton of them in macOS that don’t reliably work in non-cocoa UI toolkits
[22:59:45] <seragold[m]> along with a whole lot of constraints on kinds of UX you can even consider and constraints based on browser security needs that leak through
[22:59:52] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[23:00:26] *** Quits: rgherdt (~rgherdt@ip5f5af1b0.dynamic.kabel-deutschland.de) (Read error: Connection reset by peer)
[23:00:43] <EdLangley[m]> Also, the other issue I have with browsers is that the development model prioritizes what the developer wants the app to look like over the user
[23:00:44] <seragold[m]> yeah you can open a Canvas and do whatever but still
[23:01:18] <EdLangley[m]> By having all these advanced layout features, etc. it takes LAF out of the hands of users and the desktop developers
[23:01:26] <EdLangley[m]> Which is the opposite of what I want
[23:01:45] <EdLangley[m]> The complexity supports a goal that is completely at odds with what I want
[23:01:56] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[23:03:54] * seragold[m] misses Smalltalk bitblt graphics and UIs
[23:08:41] <seragold[m]> Used to dream the good dream of "objects" that included how to render them in some generic rendering language that any machine with graphics capabilities would do the right thing with.  Instead of the extraction of data from logical objects and separate creation of some rendering stuff in something completely different to talk to quite primitive base web browser tech.  SIGH.   Cohesiveness of data/code bodies lost. Local to data/code
[23:08:41] <seragold[m]> body rendering control not possible.  Endless ugly hacks and specializations of wasted imho effort to make it sort of work.
[23:09:57] <seragold[m]> Vanity, Vanity. Verily there is nothing new under the Sun.
[23:10:43] <White_Flame> of course, that's the opposite of EdLangley[m]'s wish, too, if the rendering is encapsulated in the ojbect instead of controllable by the user, I think
[23:11:28] <White_Flame> and the OO model of tightly coupling code & data is not very appropriate for managing complexity, IMO
[23:11:44] <White_Flame> it can do very well when data is only in simple hierarchies
[23:12:41] <EdLangley[m]> It would depend on who’s providing the objects
[23:13:09] <EdLangley[m]> If the view-layer objects are provided by the OS, it would be fine
[23:13:19] <EdLangley[m]> (Or are based on OS widgets)
[23:14:23] *** Quits: Lord_Nightmare (Lord_Night@user/lord-nightmare/x-3657113) (Ping timeout: 256 seconds)
[23:19:10] <seragold[m]> OS should not own widget sets imho.  If you think about WIMP non-multi-touch UI there aren't that terribly many fundamental concepts and visual bits.  Make a good base DSL for that (no, HTML + CSS + JS in NOT that).  HLL composes UI rendering/interaction using that.  HLL language if serializable (like Lisp) is send between servers and clients and indeed P2P.  Yes some OS renders the base DSL more prettily than others.
[23:22:45] *** Quits: mgl (~mgl@cpc87455-finc19-2-0-cust234.4-2.cable.virginm.net) (Quit: Client closed)
[23:22:56] <seragold[m]> Mac GUI programming btw contains some of the worst spaghetti coded travesties I have run across.
[23:23:31] <EdLangley[m]> The OS (or desktop environment) should own the widget set because that way all the applications will use the same widgets
[23:23:37] *** Quits: frodef (~frode@46.212.93.4) (Ping timeout: 256 seconds)
[23:23:49] <EdLangley[m]> And what you learn about interaction in one app will automatically transfer to the next app.
[23:24:04] <moon-child> seragold[m]: you have invented arcan
[23:24:19] <moon-child> EdLangley[m]: ui paradigm is different from widget set
[23:24:59] <seragold[m]> And why the heck is it OK for OS to dictate what widgets you can and cannot use? Why is it that this making portable rendering across devices and OSes impossible a good thing?  This has been a plague on application development for decades.
[23:25:27] <seragold[m]> and on UI/UX innovation imho
[23:25:40] *** Joins: frodef (~frode@46.212.93.4)
[23:26:59] <EdLangley[m]> Because the user picks the OS or Desktop Environment based on the experience they want
[23:27:26] <EdLangley[m]> I use a Mac, because I like a certain UI/UX model
[23:27:42] <moon-child> seragold[m]: the premise is not that the os dictates what widgets may be used, the premise is that it provides certain widgets.  You are not required to use those widgets, and you may mix those widgets with widgets of your own devising
[23:27:56] * moon-child thinks the widget model should die, but will keep quiet about that
[23:28:14] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[23:28:18] <EdLangley[m]> The thing I dislike the most about web apps is that every app developer thinks they can reinvent "dropdown list" or "button"
[23:28:34] <EdLangley[m]> And force whatever idiosyncratic styling they come up with on me.
[23:28:58] <seragold[m]> but I am a heretic.  I think UI/UX is just a face/exposure/manifestation of some computational/world subparts.  Hell I think appliacations are just a temporary grouping and interaction paradigm on some subparts that may be parts of very different "applications" as well.    So many artificial boundaries that are less porous than I dream of
[23:29:16] <White_Flame> EdLangley[m]: yes, hard agree
[23:29:42] <White_Flame> the base model of the browser doesn't have enough vocabulary of elements, so people have to invent trees etc, and thus end up inventing the base ones, too
[23:29:48] <seragold[m]> True,  CSS makes it trivial to change the style in whole or part on such things.
[23:30:32] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 240 seconds)
[23:32:34] <seragold[m]> nothing against libraries of effective widgets as long as they are not a trap for thinking about and implementing best UI/UX possible or proprietary to one OS.
[23:33:20] <EdLangley[m]> "best UI/UX possible" is relative to an enviroment
[23:33:56] <EdLangley[m]> A UI/UX that works well on Windows or Linux doesn't necessarily work on macOS
[23:33:57] <seragold[m]> to some degree yes but preferably not to some artificial degree as it is today
[23:34:41] <seragold[m]> Then that seems a fault of the walled garden platforms to some degree and a fault of how we look at these things.
[23:36:11] <seragold[m]> and generally it would work but not necessarily look "native"
[23:39:25] <jackdaniel> what was this channel irc name again?
[23:39:36] <Shinmera> #ui-opinions
[23:39:41] <jackdaniel> right
[23:40:48] <jackdaniel> mgl: probably a bug
[23:41:40] <masinter> the browsers have managed to be consistent with the platform and users expectations
[23:42:28] <masinter> application/common-lisp
[23:45:58] *** Quits: alvaro121_ (~aa@201.230.126.66) (Ping timeout: 250 seconds)
[23:46:06] <jackdaniel> nothing beats good old pen and paper for ui, who cares about computers anyway :)
[23:46:42] <masinter> i'm looking for some help with common lisp in Medley Interlisp.org
[23:46:43] *** Joins: alvaro121 (~aa@201.230.126.66)
[23:47:16] <masinter> In particular, consistent keystrokes -- what do 'modern' users expect
[23:47:28] <White_Flame> EdLangley[m]: I would say the best UI/UX is relative to the application itself
[23:47:35] <moon-child> masinter: what do you mean by keystrokes?
[23:47:40] <moon-child> as in, keybindings, or ?
[23:47:44] <masinter> emacs, linux, windows, mac  yes
[23:48:05] <masinter> that control-V control-T control-E control-x meta / alt etc
[23:48:29] <moon-child> can't help there, I have no idea what people expect :P
[23:48:36] <masinter> keybindings are especially hard because they are intercepted at too many levens
[23:48:49] <masinter> levels
[23:49:40] *** Quits: cage (~cage@dynamic-adsl-84-221-50-16.clienti.tiscali.it) (Quit: rcirc on GNU Emacs 27.1)
[23:50:45] <masinter> the hardware, firmware, driver, OS, (browser), emulator, lisp "terminal table", readtable
[23:52:06] <masinter> oh, the X server / client and VNC gateway too
[23:52:21] *** Quits: xsperry (~xs@user/xsperry) (Ping timeout: 256 seconds)
[23:52:50] <moon-child> well, some of those you can't do much about
[23:52:54] <moon-child> readtable is a language feature
[23:52:56] *** Joins: alvaro121_ (~aa@201.230.126.66)
[23:53:07] <jackdaniel> whether this is #ui-opinions or #commonlisp this gets offtopic, please move to #lisp or #lispcafe
[23:53:31] <mfiano> ^
[23:53:32] *** Quits: alvaro121 (~aa@201.230.126.66) (Ping timeout: 240 seconds)
[23:53:52] <moon-child> jackdaniel: hey, readtable is explicitly a common lisp language feature!
[23:54:02] <jackdaniel> moon-child: don't play dumb.
