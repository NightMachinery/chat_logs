[00:02:08] *** Quits: Kyuvi (~Kyuvi@dsl-hkibng31-58c38d-219.dhcp.inet.fi) (Ping timeout: 256 seconds)
[00:06:12] <rotateq> Hm when such a ROTATEF form expands like that, how does it know which #:NEW1 is which? ^^ https://plaster.tymoon.eu/view/2852#2852
[00:07:21] <White_Flame> which "it"?  the macro holds each in a separate local variable
[00:07:40] <White_Flame> to the compiler, it's just 3 different symbol instances, doesn't matter what their symbol-name field holds
[00:08:13] *** Quits: dre (~dre@2001:8003:c932:c301:50d2:4546:b9eb:e49) (Ping timeout: 240 seconds)
[00:08:32] <White_Flame> it's only the textual printout that doesn't distinguish them
[00:11:50] *** Quits: nexeq (~nexeq@user/nexeq) (Read error: Connection reset by peer)
[00:12:05] *** Joins: nexeq (~nexeq@user/nexeq)
[00:12:08] <mfiano> rotateq: Uninterned symbols are always unique objects, since they aren't uhh, interned into a table for subsequent lookups.
[00:13:07] <mfiano> (eq '#:new1 '#:new1)
[00:14:42] <White_Flame> while (let ((sym '#:foo)) (eq sym sym)) is obviously true
[00:15:00] <White_Flame> which is how the macros hold them to put the same symbol instance in multiple places
[00:16:31] <mfiano> To actually compare, you'd need to hold a reference to that address in memory. One way: (progn #1='#:new1 (eq #1# #1#))
[00:16:40] <mfiano> Or yeah the above too
[00:21:53] *** Quits: nexeq (~nexeq@user/nexeq) (Read error: Connection reset by peer)
[00:22:31] *** Joins: nexeq (~nexeq@user/nexeq)
[00:25:42] *** Joins: dre (~dre@2001:8003:c932:c301:2a8:19cc:bc04:bd69)
[00:33:21] *** Quits: dre (~dre@2001:8003:c932:c301:2a8:19cc:bc04:bd69) (Ping timeout: 268 seconds)
[00:38:40] <rotateq> Okay thx.
[00:40:04] <rotateq> but for a human reader that look at such macroexpand it's not so obvious first :)
[00:45:52] <White_Flame> IMO, the printer really should use #1= syntax any time uninterned symbols are used.  That would make it clear
[00:46:28] <White_Flame> *print-circle* does default to NIL, so try enabling that
[00:48:06] <White_Flame> https://plaster.tymoon.eu/view/2853#2853
[00:50:42] *** Joins: dre (~dre@2001:8003:c932:c301:c69e:ead4:d381:5280)
[00:52:24] <rotateq> yes I'll do :)
[00:53:08] <rotateq> but better would be #:NEW1 #:NEW2 #:NEW3 ^^
[00:53:45] <rotateq> okay yes, now it's more clear from reading it
[00:54:07] <rotateq> referencing in the SETQ forms by lable
[01:02:20] *** Quits: nexeq (~nexeq@user/nexeq) (Read error: Connection reset by peer)
[01:30:41] *** Joins: brandflake11 (~user@2601:5c0:c380:83e0:779a:eb64:5e4b:dff3)
[01:37:49] *** Quits: shka (~herr@109.231.0.226) (Ping timeout: 240 seconds)
[02:22:29] *** Joins: dra (~dra@2a04:4540:640f:9400:e533:1ee:7186:242a)
[02:24:52] *** Quits: makomo (~makomo@user/makomo) (Quit: WeeChat 3.3)
[02:32:04] *** Quits: artchad (~user@public-gprs230031.centertel.pl) (Read error: Connection reset by peer)
[02:37:32] *** Quits: random-nick (~random-ni@87.116.181.150) (Ping timeout: 256 seconds)
[03:06:55] *** Quits: dra (~dra@2a04:4540:640f:9400:e533:1ee:7186:242a) (Remote host closed the connection)
[03:34:07] *** Joins: nexeq (~nexeq@user/nexeq)
[03:40:30] *** Joins: Oladon (~olad@98.43.81.226)
[03:49:56] *** Joins: nexeq-pc (~nexeq-pc@user/nexeq)
[03:50:28] *** Quits: nexeq-pc (~nexeq-pc@user/nexeq) (Client Quit)
[04:05:09] *** Quits: nexeq (~nexeq@user/nexeq) (Read error: Connection reset by peer)
[04:06:01] *** Joins: nexeq (~nexeq@user/nexeq)
[04:15:00] *** Quits: nexeq (~nexeq@user/nexeq) (Ping timeout: 256 seconds)
[04:15:21] *** Joins: Demosthenex (~Demosthen@user/demosthenex)
[04:15:31] *** Joins: nexeq (~nexeq@user/nexeq)
[04:15:57] <Demosthenex> could someone point me at some open code to learn from regarding parsing large volumes of text in CL? i've been buried in manuals on trivia, streams, cl-ppcre, typing, etc all day
[04:16:38] <Demosthenex> when learning something, read good code ;]
[04:18:57] <Demosthenex> i guess finally, i'm trying to stick to functional practices. so loop feels awkward, so i'm doing some recursion atm. trivia is awesome. couldn't figure out peek on streams... but i have memory to spare
[04:24:28] <rotateq> The code of the SICL project modules is also very readable and enjoyable.
[04:25:51] <Demosthenex> do you have a link? my google-fu over the last 6 hours has hit so many dead ends
[04:25:59] <Demosthenex> lots of dead repos, dead links. nebulous search terms, etc.
[04:26:31] <rotateq> Yes of course it's one of the most important and promising projects I know: https://github.com/robert-strandh/SICL
[04:26:52] <rotateq> The first module that was done was the one for LOOP. ^^
[04:28:05] <rotateq> And yes, trivia is great too, I should make more use of it, or also in macros that generate methods to the matched patterns.
[04:37:26] <Demosthenex> yeah, i think that's one of my stumbling blocks. i spent a few hours trying to read directly from files through recursion instead of just bulk loading everything into a giant list in memory. applying my limited knowledge of conditions, some typing through structures, and learning trivia.
[04:37:40] <Demosthenex> i was avoiding loop because it reads like python in a pair of ()s
[04:38:26] <rotateq> Ah no I wouldn't say it that way. :)
[04:38:53] <Demosthenex> i looked at iterate, but i'm really cozy with manipulating lists with map. data just had to be loaded to work that way
[04:39:00] <rotateq> Do you already know the WITH-OPEN-FILE macro?
[04:39:07] <Demosthenex> i feel like i hit a lack of best practices.
[04:39:10] <Demosthenex> yep, using that
[04:39:16] <rotateq> Or alexandria:read-file-into-string.
[04:39:22] <Demosthenex> wrapping the recursive entry point to my parser
[04:39:47] <Demosthenex> some of my prior programs i had issues with mixed lists of data, so i'm keen to do typing. even if i just wrap everything in a defstruct
[04:39:58] <rotateq> And what do you try to parse?
[04:40:13] <Demosthenex> its all text data from vendors.
[04:40:22] <rotateq> Hm what's vendors?
[04:40:41] <Demosthenex> because i work with them often, it's my favorite data to work with. doing string and text file manipulation is my fav way to learn new languages.
[04:41:06] <rotateq> Better use DEFCLASS, way more flexible, but maybe too much for now to bring on top.
[04:41:12] <Demosthenex> ever look at python's TTP (template text parser) and how they apply to network switch dumps?
[04:41:34] <Demosthenex> ha, yeah, i've done OOP in several languages, i didn't want to go full OOP for basic data management :P
[04:41:41] <rotateq> So do you already know what a readmacro is? That would be for you.
[04:41:51] <rotateq> No, I didn't.
[04:41:58] <Demosthenex> anyway, i get dumps of stuff from brocade, cisco, etc, and i normally tally the data up into spreadsheets for me
[04:42:24] <Demosthenex> https://dmitrygolovach.com/python-ttp-template-text-parser/
[04:42:29] <Demosthenex> that shows an example
[04:42:38] <rotateq> What they call OOP in other languages is fairly different than CLOS, and even if you want or not, it backs you up all the time.
[04:42:39] <Demosthenex> then take the output and throw it into whatever sql i'm learning today
[04:43:15] <Demosthenex> true, i've read alot on it. i should have used oop before when i did my recursive recipe solver against the gw2 rest api's to look for trading post money
[04:43:24] <rotateq> Okay, maybe you can also make a use of learning the powerful parsing technique with parser combinators.
[04:44:00] <Demosthenex> recently i've been reading more into lexing (token splitting) and parsing, but nothing follows a grammer. i'm doing "Structured text parsing"
[04:44:15] <Demosthenex> and the outputs change alot by version :P
[04:44:34] <Demosthenex> i've also been using TXR which is pretty slick, but i'm frustrated with the debugging and some of the side effects
[04:44:45] <Demosthenex> that could just be how i'm managing my codebase
[04:44:57] <rotateq> Those Python thing you gave would be bringable from this form by a readmacro directly to structured data.
[04:45:10] <Demosthenex> do you have some recommended reading?
[04:45:17] <Demosthenex> i've got emacs and sly all geared up ;]
[04:45:19] <rotateq> Yes sounds as a classical approach.
[04:45:37] <rotateq> Nice, all you need.
[04:48:42] <Demosthenex> so, i'm doing some looking at read macros. that python example is k/v one per line. that's very much not the routine case
[04:49:02] <rotateq> Maybe that: https://gist.github.com/chaitanyagupta/9324402
[04:49:19] <Demosthenex> that's the one where he shows how to do json
[04:49:35] <rotateq> Yes as an example.
[04:49:54] <rotateq> If it makes sense, it's a powerful add-on to have in a DSL.
[04:50:14] <Demosthenex> that is interesting. i just have a hard time seeing how i fit it to my data
[04:50:41] <Demosthenex> i was trying to break up things and use trivia to extract them. trivia.ppcre works *great* with per-line extraction
[04:50:51] <rotateq> Cool.
[04:51:16] <Demosthenex> not all records are line oriented though. some are like... paper forms gone digital, or stack traces. not as obvious
[04:51:23] <rotateq> Maybe start with small and good to cover (by mind) things.
[04:51:41] <rotateq> No problem.
[04:51:52] <Demosthenex> before i stopped for dinner, i was working on how to peek ahead in my input stream and got flummoxed. peek-char isn't enough
[04:52:09] <Demosthenex> thus, i may just ingest it all into lists so i can work on it
[04:52:51] <rotateq> Oh yes I also have to get better at much of this. Or still to look into clsql.
[04:53:01] <Demosthenex> postmodern is *awesome*
[04:53:17] <Demosthenex> i never want to write sql again, i wans s-sql!
[04:53:22] <rotateq> Is this a library?
[04:53:33] <Demosthenex> yes, common lisp wrapper for postgres SQL
[04:54:17] <rotateq> Ah okay. There's also this pg-loader if you ever have to migrate another database in one click to postgre.
[04:54:25] <Demosthenex> that was a thrill to use. i used that for data mining in both league of legends match histories and guildwars 2 trading post. caching data i downloaded from rest apis, using the json/jsonb data types in postgres to store these "document" records
[04:55:00] <Demosthenex> funny, sql and network io was a breeze, but reading a file in parts instead of one big piece ate my lunch
[04:55:08] <Demosthenex> maybe because i insist on not using loop with read-line ;]
[04:56:27] <Demosthenex> maybe one of the streams libraries has a method for resetting the current file pointer, or random access by byte
[04:56:39] <rotateq> So maybe you're just not yet ready for the power of LOOP. :) I'm not sure if even now or in future versions, that the SICL LOOP will be extensible. It also uses the technique of parser combinators coming from Haskell to parse its body.
[04:57:52] <rotateq> Ah now, typically if something is read in then that's it for this object. But maybe eclector gives more capabilities to also read "back" when needed.
[04:58:11] <Demosthenex> i've spent many hours in the lisp ecosystem trying to move to map, functional programming, and think in s-exps. loop just feels like a step backware, like i missed something
[04:59:02] <rotateq> It's not for me, but additional power. :) But a complex beast like FORMAT.
[04:59:17] <Demosthenex> format *rocks*. love the array unrolling.
[04:59:37] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[05:00:05] <Demosthenex> i recently bought an ebook on the conditional system, i was hoping to have an FP parser to just load data packets and signal up if there were a problem
[05:00:23] <rotateq> So that's also a parser on the control-string within it surely. :P
[05:00:41] <rotateq> Ah maybe the newer book by phoe_.
[05:01:23] <rotateq> The condition system is another of those big points that stand a difference.
[05:01:25] <Demosthenex> yes, but parsing things like loop macro and control string have a regular grammar, where i'm basically doing a reverse printf with large records :P
[05:01:52] <rotateq> And your records have no grammar?
[05:02:25] <rotateq> "reverse printf" ^^
[05:02:37] <Demosthenex> they have fairly static layouts and text cues, but i don't control how they change. sometimes they add new lines in the middle, sometimes at the end, i need to report if it changes so i can gather those values too
[05:03:18] <Demosthenex> waaaay long time ago i tried multiline matching regexps in perl with named outputs. completely unsupportable and impossible to debug if there's an issue
[05:03:23] <rotateq> But that shouldn't be a problem to cover at all as long as some other restrictions are made.
[05:04:02] <Demosthenex> atm i'm leaning toward a lexing solution, reading in everything into structs or small objs with type sensing and overriding eql checks with trivia
[05:04:41] <rotateq> Yes maybe. And maybe I should use less 'maybe'.
[05:04:47] <Demosthenex> heh
[05:04:54] <Demosthenex> anyway, the idea of reader macros is new, i'll go read that again
[05:04:54] <rotateq> :D
[05:05:22] <rotateq> I could cut you out the chapter in 'On Lisp' about it.
[05:05:28] <Demosthenex> i don't expect to find copy paste code, i'm looking for programs that do similar things with file io in an FP way to try and grok some best practices
[05:06:17] <rotateq> Surely no copy paste, we teach and learn magic here.
[05:06:23] <Demosthenex> absolutely.
[05:06:39] <Demosthenex> unfortunately my paper copy of gigamonkey's practical CL is in storage :P
[05:06:59] <Demosthenex> i'll look some of these up tomorrow, ty for the ideas. more reading to do
[05:07:44] <rotateq> https://trash.randomerror.de/gq8cr/readmacros.pdf
[05:07:58] <rotateq> Oh nice.
[05:08:26] <Demosthenex> am i wrong in pigeonholing reader macros into the "syntatic sugar" category?
[05:08:39] <rotateq> Yes as I'm also a sorcerer's apprentice, having to study hard and much.
[05:08:52] <Demosthenex> i'd rate myself moderate novice ;]
[05:09:07] <rotateq> No you aren't but that doesn't mean they aren't powerful abtractions.
[05:09:10] <Demosthenex> i dabble in all kinds of languages to learn new ideas. wish i'd started lisp in college though
[05:09:40] <rotateq> Yes something that doesn't give me real new insights doesn't interest me too.
[05:10:11] <rotateq> I wish I would have known and been showed 15 years ago or more.
[05:11:13] <rotateq> Or here, a very simple small example hack I made some weeks ago for fun: https://trash.randomerror.de/p5hna/read-magic.png
[05:11:27] <rotateq> Also with {1;2;3}.
[05:11:39] <rotateq> Your imagination is the limit.
[05:13:46] <rotateq> One of my first real self-made readmacros around 2 years ago was a #q one like #c, but not for reading in complex numbers but quaternions. As #q is free by default ...
[05:16:41] <GreaseMonkey> i tend to not use reader macros, but i did manage to do a set as a joke where i shoehorned a subset of javascript syntax into the language
[05:17:01] <rotateq> you use them all the time
[05:17:16] <GreaseMonkey> i tend to not write them that is
[05:17:58] <rotateq> Ah okay, fair enough. Yes, it's way rarer to do it really than writing normal macros.
[05:17:59] <GreaseMonkey> a more useful set i did was to replace the ` , ,@ implementations with ones that followed how Scheme handled them, and that made it more transparent to traverse than the usual implementation-specific stuff
[05:18:09] <GreaseMonkey> that also involved messing with the printer
[05:18:17] <GreaseMonkey> unfortunately i no longer have that code
[05:18:45] <rotateq> Oh sorry GreaseMonkey, I'm tired and just now I realize you're another instance of class person.
[05:19:10] <rotateq> Sad.
[05:19:27] <GreaseMonkey> if i say beep boop enough times will that make you feel better?
[05:19:50] <rotateq> In CLtL2 Steele gives a possible outcome for backquote macros. Or using now a SICL module.
[05:20:10] <rotateq> No you already passed my Turing Test. ^^
[05:20:37] <rotateq> Now nearly 2am here, don't know where you two people come from.
[05:23:42] <rotateq> And yes GreaseMonkey, as most people look on things just superficially (like with over-optimized "performance" in the first place, graphics of a GUI application and such) they can be tricked easily by having used-to syntax.
[05:24:09] <rotateq> "It might not work correct but it's fasta."
[05:25:20] <GreaseMonkey> and of course what's fast today may be slower than the correct way in 10 years
[05:25:49] <rotateq> Right, and too monolithic.
[05:25:57] <GreaseMonkey> autovectorisation can happen nowadays
[05:26:39] <rotateq> Or distributed computing, but all of course very non-trivial tasks.
[05:26:45] <GreaseMonkey> not sure how widespread that is in CL implementations, i'm more familiar with C compilers... familiar enough to know that gcc's Thumb-1 optimiser is beyond a joke
[05:27:03] <rotateq> haha :D and such a big thingy
[05:28:15] <rotateq> There's petalisp by heisig, then cl-mpi, sb-simd and the April compiler by phantomics.
[05:28:28] <rotateq> To name a few newer examples.
[05:29:00] <GreaseMonkey> my experience with optimising CL (specifically using SBCL) has generally been that one can get a good speedup by forcing fixnum in the right places and using disassemble to work out which generic calls still need to be eliminated
[05:29:18] <GreaseMonkey> admittedly this isn't great for portability as i use a 64-bit SBCL but stuff may break on a 32-bit one
[05:29:36] <rotateq> ah yes the optimizing for generic-functions too
[05:30:01] <GreaseMonkey> still way nicer than optimising Python for speed: you basically do what a compiler would normally be doing
[05:30:16] <rotateq> and if you give extra options with #+ and #- ?
[05:31:12] <GreaseMonkey> are you thinking in terms of implementation-specific switches, or adding feature flags such that #+ and #- can be used for configuration?
[05:31:22] <rotateq> yes
[05:31:38] <rotateq> for different platforms/architectures too
[05:32:42] <GreaseMonkey> ah yeah... i have a rv64gc machine but couldn't get SBCL working on it at the time... the biggest optimisation tip i can give for that particular machine (a HiFive Unmatched) is "never, ever, ever use unaligned memory accesses"
[05:32:46] <rotateq> I mostly stick trying to write ANSI compliant code.
[05:32:50] <GreaseMonkey> fair enough
[05:33:04] <rotateq> does ecl run on it?
[05:33:26] <GreaseMonkey> haven't tried, i really should look into ecl some time
[05:33:32] <rotateq> haha i'll keep in mind
[05:33:41] <rotateq> yes me too
[05:34:08] <rotateq> wanted to ask jackdaniel in #ecl if i can also use tcc instead of heavy gcc with it but i would bet so
[05:34:41] <GreaseMonkey> but yeah, the unaligned memory access thing? well, the highest privilege mode is M mode, Linux runs in S mode, and the userland is U mode. whenever you do an unaligned memory access it defers to OpenSBI to access one byte at a time, by switching between M mode and U mode repeatedly
[05:35:18] <rotateq> sounds exhausting all this switching
[05:35:29] <GreaseMonkey> i don't remember the factor it explodes out to in terms of how slow it is, but for a 64-bit load i think it was something like 70x the number of cycles
[05:36:09] <rotateq> phew
[05:38:31] <rotateq> and maybe when ecl runs on your machine you could bootstrap sbcl, or with clisp ..
[05:39:58] <rotateq> GreaseMonkey: https://trash.randomerror.de/jpgxb/clisp_bootstrap.jpg
[05:42:41] <GreaseMonkey> yeah that sounds about right
[05:43:18] <rotateq> :D
[05:43:43] <rotateq> it got me laughing so much the first time i saw it some days ago
[05:58:11] <rotateq> http://christophe.rhodes.io/notes/blog/posts/2018/beginning_an_sbcl_port/
[07:30:55] *** Quits: sts-q (~sts-q@212.53.219.246) (Ping timeout: 256 seconds)
[07:30:55] <beach> Good morning everyone! 
[07:36:48] *** Joins: Jing (~hedgehog@240e:390:7c53:a7e1:69b8:e285:4414:d6cb)
[07:42:14] *** Joins: sts-q (~sts-q@212.53.219.162)
[07:53:17] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 240 seconds)
[08:26:26] *** Quits: Jing (~hedgehog@240e:390:7c53:a7e1:69b8:e285:4414:d6cb) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[08:43:37] *** Quits: brandflake11 (~user@2601:5c0:c380:83e0:779a:eb64:5e4b:dff3) (Remote host closed the connection)
[08:54:09] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[10:23:10] *** Joins: Harag (~user@105.243.9.173)
[10:24:46] <Harag> I am trying to align indent-region behaviour between team members using slime vs sly
[10:26:16] <Harag> the last thing I have left is that calls to a macro like cl-who:with-html indents 4 in sly and 2 in slime and I cant figure out how to get sly to use a 2 indent 
[10:26:20] <Harag> any suggestions
[10:45:21] *** Joins: shka (~herr@109.231.0.226)
[10:49:46] *** Quits: seok (~Seok@n114-73-75-18.bla3.nsw.optusnet.com.au) (Read error: Connection reset by peer)
[10:50:12] *** Joins: seok (~Seok@n114-73-75-18.bla3.nsw.optusnet.com.au)
[10:58:36] *** Joins: Jing (~hedgehog@240e:390:7c53:a7e1:2c67:7cfa:cdb8:6538)
[12:19:21] *** Joins: artchad (~user@public-gprs230031.centertel.pl)
[12:27:26] <beach> You can program Emacs to indent specific form types the way you like.
[12:28:09] <beach> However, one of the great SLIME modules is slime-indentation which I don't know whether it is available for SLY.  Without it, LOOP clauses are not indented correctly. 
[12:28:24] <artchad> SLIME master race
[12:28:36] <beach> artchad: What?
[12:28:58] <artchad> it's a joke that people who use SLIME are superior to the ones who use sly
[12:29:05] <artchad> lol
[12:29:31] <beach> First time I hear such a thing, which is why I didn't get the joke.
[12:30:58] <beach> Anyone with an attitude that suggests that they are superior human beings for using a particular tool need to think again. 
[12:34:22] <artchad> but a tool a man uses is indeed his defining characteristic, neither his body, nor his mind, but the lifeless object dedicated to completing earthly tasks.
[12:38:35] *** Joins: Kyuvi (~Kyuvi@dsl-hkibng31-58c38d-219.dhcp.inet.fi)
[12:50:50] *** Joins: lisp123 (~lisp123@5.30.23.247)
[13:27:35] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[15:12:11] *** Quits: Kyuvi (~Kyuvi@dsl-hkibng31-58c38d-219.dhcp.inet.fi) (Ping timeout: 256 seconds)
[16:06:30] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[16:10:18] *** Quits: artchad (~user@public-gprs230031.centertel.pl) (Read error: Connection reset by peer)
[16:17:52] *** Joins: random-nick (~random-ni@87.116.167.125)
[16:58:58] *** Joins: artchad (~user@public-gprs230031.centertel.pl)
[17:22:12] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[17:28:17] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 240 seconds)
[17:31:00] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[17:54:13] *** Quits: seok (~Seok@n114-73-75-18.bla3.nsw.optusnet.com.au) (Ping timeout: 240 seconds)
[18:03:01] *** Joins: seok (~Seok@n114-73-75-18.bla3.nsw.optusnet.com.au)
[18:26:13] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 240 seconds)
[18:50:13] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[18:51:46] *** Joins: Kyuvi (~Kyuvi@dsl-hkibng31-58c38d-219.dhcp.inet.fi)
[19:13:27] *** Joins: treflip (~user@user/treflip)
[19:14:35] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 252 seconds)
[19:35:40] *** Joins: domovod (~domovod@ec2-35-165-86-158.us-west-2.compute.amazonaws.com)
[19:41:03] *** Quits: domovod (~domovod@ec2-35-165-86-158.us-west-2.compute.amazonaws.com) (Quit: WeeChat 3.4)
[19:41:20] *** Joins: domovod (~domovod@ec2-35-165-86-158.us-west-2.compute.amazonaws.com)
[19:44:52] *** Parts: rotateq (~user@p200300e787097300818cd04b4ea1a4f3.dip0.t-ipconnect.de) (ERC (IRC client for Emacs 27.2))
[20:27:01] *** Quits: domovod (~domovod@ec2-35-165-86-158.us-west-2.compute.amazonaws.com) (Ping timeout: 240 seconds)
[20:28:18] *** Joins: domovod (~domovod@176.196.122.197)
[20:39:28] *** Quits: Kyuvi (~Kyuvi@dsl-hkibng31-58c38d-219.dhcp.inet.fi) (Quit: Client closed)
[20:55:45] *** Quits: Jing (~hedgehog@240e:390:7c53:a7e1:2c67:7cfa:cdb8:6538) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[21:13:39] *** Joins: lisp123 (~lisp123@5.30.23.247)
[21:16:01] *** Quits: domovod (~domovod@176.196.122.197) (Quit: WeeChat 3.4)
[21:26:50] *** Joins: rotateq (~user@p200300e787097300818cd04b4ea1a4f3.dip0.t-ipconnect.de)
[21:33:49] *** Quits: pjb (~pjb@user/pjb) (Ping timeout: 268 seconds)
[21:59:45] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[22:14:30] *** Joins: Oladon (~olad@98.43.81.226)
[22:16:28] *** Joins: pjb (~pjb@user/pjb)
[22:29:14] *** Quits: seok (~Seok@n114-73-75-18.bla3.nsw.optusnet.com.au) (Ping timeout: 256 seconds)
[22:34:46] *** Quits: treflip (~user@user/treflip) (Quit: ERC (IRC client for Emacs 27.2))
[22:43:05] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[23:00:13] *** Joins: lisp123 (~lisp123@5.30.23.247)
[23:01:08] *** Quits: nexeq (~nexeq@user/nexeq) (Read error: Connection reset by peer)
[23:04:47] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 256 seconds)
[23:10:50] *** Joins: nexeq (~nexeq@user/nexeq)
[23:22:54] *** Quits: nexeq (~nexeq@user/nexeq) (Read error: Connection reset by peer)
[23:23:09] *** Joins: nexeq (~nexeq@user/nexeq)
[23:32:39] *** Quits: nexeq (~nexeq@user/nexeq) (Read error: Connection reset by peer)
[23:33:41] *** Joins: nexeq (~nexeq@user/nexeq)
[23:34:31] *** Joins: Kyuvi (~Kyuvi@dsl-hkibng31-58c38d-219.dhcp.inet.fi)
[23:48:07] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
