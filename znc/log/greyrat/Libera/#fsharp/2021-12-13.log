[03:24:13] *** Joins: jinsun__ (~quassel@user/jinsun)
[03:27:05] *** Quits: jinsun (~quassel@user/jinsun) (Ping timeout: 252 seconds)
[09:04:08] *** jinsun__ is now known as jinsun
[11:31:31] *** Quits: stenno (~stenno@user/stenno) (Ping timeout: 250 seconds)
[11:56:14] *** Joins: kuribas (~user@ptr-25vy0i9k5aujcskch0c.18120a2.ip6.access.telenet.be)
[11:59:24] <xeno> hi, to generate a grid of coordinates  {(x,y) | x in {0..X}, y in {0..Y}} , I'm doing the following: {0..Y} |> Seq.map (fun y -> {0..X} |> Seq.map (fun x -> (x,y))) |> Seq.concat |> Seq.toList - there must be a cleaner way? 
[11:59:50] <xeno> same with parsing a one character digit - where I'm doing let i = (int c) - (int '0') 
[12:01:30] *** Joins: stenno (~stenno@user/stenno)
[12:06:06] *** Quits: stenno (~stenno@user/stenno) (Ping timeout: 260 seconds)
[12:25:47] <biberu> xeno: you can replace the first Seq.map with Seq.collect (which is like bind for sequences) and get rid of the Seq.concat step
[12:26:03] *** Joins: stenno (~stenno@user/stenno)
[12:30:49] <xeno> ah ok
[12:32:30] <biberu> xeno: {0..Y} |> Seq.collect (fun y -> {0..X} |> Seq.map (fun x -> (x,y))) |> Seq.toList
[12:33:25] <xeno> oh, when I look at Seq now, I can also do Seq.allPairs {0..X} {0..Y} 
[12:33:33] <biberu> oh, nice
[12:33:36] <biberu> til :)
[12:35:14] <xeno> now I just saved 2-5 minutes from half of the remaining AOC's :)
[20:55:37] *** Quits: kuribas (~user@ptr-25vy0i9k5aujcskch0c.18120a2.ip6.access.telenet.be) (Quit: ERC (IRC client for Emacs 26.3))
