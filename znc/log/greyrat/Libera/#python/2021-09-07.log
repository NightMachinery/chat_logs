[00:00:04] *** Quits: shlomif (~shlomif@87.68.240.100.adsl.012.net.il) (Ping timeout: 252 seconds)
[00:01:15] *** Joins: ferz (~ferz@93-39-142-17.ip76.fastwebnet.it)
[00:02:10] <Samian> ah it looks like there's the term "packaging and distribution"
[00:03:22] *** Quits: pyeveryt_ (~pyeveryth@c-66-31-107-137.hsd1.ma.comcast.net) (Ping timeout: 256 seconds)
[00:04:21] <BrenBarn> yeah
[00:05:41] <Samian> BrenBarn  I've see some packagers that copy the python files into a package directory under conda. But I've seen packages that link the python files in the folder created by git clone
[00:05:48] <Samian> Is there a name for the difference?
[00:06:37] *** Quits: milosz_ (~milosz@user/milosz) (Ping timeout: 252 seconds)
[00:06:44] <Samian> by link, I mean if I type "import foo", it'll show the full path to the directory made by git cloning the project
[00:08:27] <BrenBarn> there's something called an "editable" install that links in-place to files that are already somewhere on the disk
[00:08:41] <BrenBarn> which is useful for development so you can "live edit" the library and see the changes right away
[00:10:35] *** Quits: zln (~zln@c80-217-230-193.bredband.tele2.se) (Ping timeout: 252 seconds)
[00:10:59] <Samian> BrenBarn know any books to learn this? I'm learning by random sources found via google, but it feels like trying to map a forest by walking around with a flashlight.  I want a book that has the forest already mapped out
[00:13:01] *** Joins: pr0xibus (~pr0xibus@185.198.243.144)
[00:14:09] <BrenBarn> I'm not sure of any books
[00:14:21] <BrenBarn> I think this kind of info is often not present in books
[00:14:31] <BrenBarn> a lot of packaging tools change fairly frequently and books become outdated
[00:14:33] <Samian> there's setuptools, pythonwheels.com, importlib, pip, egg files (deprecated I read), "editable" installs, noneditable installs, PyPI all floating in my mind as loosely related nodes. I'm like huh what's the relationship between all these things?  That's the confusion and cluelessness I'm feelings
[00:15:02] <BrenBarn> you're not the only one!
[00:15:10] <BrenBarn> even people who know a lot about Python packaging can get overwhelmed with the plethora of tools and workflows out there
[00:15:32] <BrenBarn> and there are multiple competing toolsets out there for packaging so it's not like there's one right answer
[00:16:58] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[00:17:44] <Samian> What's workflow mean to you? That term is nebulous to me. I googled but everyone definitions seems to be different
[00:18:08] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[00:18:10] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Ping timeout: 240 seconds)
[00:19:06] <Samian> does workflow just mean using a set of tools and doing some sequence of tasks? Like telling an employee before checking in code to (1) run pyfmt. (2) run the unit tests; (3) commit only if the unit tests pass.  Is that a "workflow" ?
[00:19:26] *** Quits: pr0xibus (~pr0xibus@185.198.243.144) (Quit: Lost terminal)
[00:20:07] *** Quits: pro_z (~pro_z@37.214.61.236) (Ping timeout: 245 seconds)
[00:20:46] *** Quits: az (az@user/azz) (Quit: Stable ZNC by #bnc4you)
[00:20:46] *** Quits: adium (adium@user/adium) (Quit: Stable ZNC by #bnc4you)
[00:22:10] *** Quits: theprophet (~theprophe@85.114.228.184) (Quit: Client closed)
[00:22:16] *** Joins: semeion (~semeion@user/semeion)
[00:24:07] <catbeard> sometimes it won't let you commit if the unit tests don't pass
[00:24:27] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[00:24:40] <catbeard> depends on your CI/CD config
[00:24:42] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[00:25:47] <nedbat> Samian: yes, that's what workflow means.
[00:26:17] *** Quits: bfoley (~bfoley@pool-173-48-101-113.bstnma.fios.verizon.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[00:26:28] *** Joins: Fedorasan (~fedorasan@user/fedorasan)
[00:26:37] *** Joins: Lando-SpacePimp (~Lando@user/lando-spacepimp)
[00:26:49] *** Joins: REHBhE02qmJNzm6 (~REHBhE02q@static-198-54-131-70.cust.tzulo.com)
[00:28:33] *** Joins: y1n (~y1n@84-115-64-36.wifi.dynamic.surfer.at)
[00:29:55] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[00:30:37] <Samian> thanks nedbat. Considering employee step-by-step instructions for building code, committing code, and setting up dev environments have existed since there have been software companies, I wonder why I'm only recently hearing the word "workflow" used a lot?
[00:30:44] *** Joins: cloudbender (~cloudbend@user/cloudbender)
[00:31:05] <catbeard> Samian: check out slack authorization workflows
[00:31:10] <catbeard> neat stuff
[00:31:13] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[00:31:55] *** Quits: markb1 (~markb1@2600:1700:eb40:7ecf:6181:b3c:b257:335c) (Remote host closed the connection)
[00:31:58] *** Joins: adium (adium@user/adium)
[00:32:05] <Samian> thanks catbeard
[00:32:10] <nedbat> Samian: language evolves
[00:32:13] *** Joins: pyeverything (~pyeveryth@c-66-31-107-137.hsd1.ma.comcast.net)
[00:32:18] *** Quits: cloudbender (~cloudbend@user/cloudbender) (Client Quit)
[00:32:42] *** Joins: alexises (~lameire@51.15.136.90)
[00:33:55] *** Quits: ledtc (~ledtc@h-94-254-66-235.A216.priv.bahnhof.se) (Ping timeout: 256 seconds)
[00:34:01] <alexises> Hello :) I'm in search of good configuration validation lib, I know that jsonschema exist or cerberus
[00:34:19] <alexises> unfortunently theses libs are not human frendly
[00:34:30] *** Quits: r3m (~launch@user/r3m) (Quit: WeeChat 3.3-dev)
[00:34:40] *** Quits: Wulf (~Wulf@user/wulf) (Ping timeout: 240 seconds)
[00:34:50] *** Joins: r3m (~launch@user/r3m)
[00:35:02] <alexises> I'm searching a lib that is able to provides the reference of the corresponding line:column of the relevent error on the file
[00:35:27] <alexises> many libs validates a json/yaml deserialized object and not a json/yaml file
[00:37:27] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[00:37:36] *** Quits: lexx (~scsi@78.157.70.196) (Ping timeout: 250 seconds)
[00:37:43] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[00:37:57] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[00:42:58] *** Quits: semeion (~semeion@user/semeion) (Ping timeout: 252 seconds)
[00:43:20] *** Joins: fofoni (~fofoni@user/fofoni)
[00:44:25] *** Joins: luke-jr (~luke-jr@user/luke-jr)
[00:45:03] *** Quits: Haxxa (~Haxxa@122.199.45.213) (Quit: Haxxa flies away.)
[00:45:52] *** Quits: lalilulelo (~lalilulel@177.72.97.74) (Quit: Leaving)
[00:46:16] *** Joins: rsx (~dummy@ppp-188-174-139-239.dynamic.mnet-online.de)
[00:46:38] *** Joins: lightbulbjim (~lightbulb@user/lightbulbjim)
[00:47:12] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[00:47:29] *** Joins: chance (~chance@user/chance)
[00:47:30] *** Joins: Guddu (~Guddu@190.84.88.92)
[00:47:41] *** Quits: Derailed (~tom@ec2-13-211-184-100.ap-southeast-2.compute.amazonaws.com) (Quit: ZNC - https://znc.in)
[00:48:29] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[00:48:44] *** Joins: carlesso (~carlesso@c-107-3-160-43.hsd1.ca.comcast.net)
[00:49:12] *** Joins: Gudddu (~Guddu@190.84.88.92)
[00:50:02] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[00:51:19] *** Joins: Haxxa (~Haxxa@122.199.45.213)
[00:51:22] *** Quits: chance (~chance@user/chance) (Client Quit)
[00:51:33] *** Quits: shangxiao (~davids@124.187.193.187) (Quit: WeeChat 3.2.1)
[00:52:06] *** Quits: Guddu (~Guddu@190.84.88.92) (Ping timeout: 256 seconds)
[00:52:49] *** Joins: pycode (~pycode@2001:b07:5d28:551:b2ff:347a:453:271)
[00:54:10] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Ping timeout: 240 seconds)
[00:56:23] *** Joins: Mattiaslndstrm (~Mattiasln@c188-148-207-108.bredband.tele2.se)
[00:56:36] *** Joins: semeion (~semeion@user/semeion)
[00:56:56] *** Quits: Mattiaslndstrm (~Mattiasln@c188-148-207-108.bredband.tele2.se) (Client Quit)
[00:57:40] *** Quits: odoood (~odoood@c-73-184-143-53.hsd1.ga.comcast.net) (Ping timeout: 240 seconds)
[00:57:46] <Macuser> if I use " if x.split(' ')[5] > 0: " will it not work if the line has something separated by 3 spaces
[00:57:47] <Macuser> ?
[01:00:00] <Repiphany> It would fail regardless because you can't compare strings and 0
[01:00:24] <Macuser> oops
[01:01:30] <InPhase> Macuser: Unless the exception is a feature (i.e., handling errors above), that's a multi-line problem requiring more checks.
[01:01:51] <InPhase> s/above/outside/
[01:02:44] *** Quits: slee (~slee@user/slee) (Quit: Leaving)
[01:02:52] *** Quits: vats (~vats@180.149.226.8) (Ping timeout: 256 seconds)
[01:02:56] *** Quits: Curiosity (uid511277@user/cypris) (Quit: Connection closed for inactivity)
[01:05:57] *** Quits: bilb_ono (~alexmarsh@ip68-6-69-149.sb.sd.cox.net) (Ping timeout: 245 seconds)
[01:07:33] *** Quits: linux_dream (~isaac@2a01:e0a:7:60e0:bcc4:b32c:9221:831d) (Quit: WeeChat 3.2)
[01:08:10] *** Joins: bilb_ono (~alexmarsh@ip68-6-69-149.sb.sd.cox.net)
[01:11:43] *** Quits: fanis30 (~fanis30@adsl-142.37.6.0.tellas.gr) (Quit: WeeChat 3.2)
[01:15:10] *** Quits: y1n (~y1n@84-115-64-36.wifi.dynamic.surfer.at) (Ping timeout: 240 seconds)
[01:15:19] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[01:15:44] *** Quits: rsx (~dummy@ppp-188-174-139-239.dynamic.mnet-online.de) (Quit: rsx)
[01:15:44] *** Joins: hqdruxn08 (~hqdruxn08@cpe-66-68-166-214.austin.res.rr.com)
[01:17:28] *** Joins: sgt_chuckles (~sgt_chuck@pool-71-190-209-205.nycmny.fios.verizon.net)
[01:17:31] <sgt_chuckles> clear
[01:17:58] *** Joins: Derailed (~tom@ec2-13-211-184-100.ap-southeast-2.compute.amazonaws.com)
[01:18:31] *** Pixi_ is now known as Pixi
[01:19:49] *** Quits: hqdruxn08__ (~hqdruxn08@cpe-66-68-166-214.austin.res.rr.com) (Ping timeout: 252 seconds)
[01:19:59] * The-Compiler clears sgt_chuckles' screen
[01:20:31] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[01:24:32] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[01:25:44] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[01:25:52] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 252 seconds)
[01:26:35] *** Quits: nomic (~nomic@2a00:23c6:9902:2401:65e9:6f2b:5308:7e2f) (Quit: Leaving)
[01:26:47] *** Quits: redgloboli (~redglobol@user/redgloboli) (Quit: ...enter the matrix...)
[01:26:53] *** Joins: nomic (~nomic@2a00:23c6:9902:2401:65e9:6f2b:5308:7e2f)
[01:27:04] *** Joins: redgloboli (~redglobol@user/redgloboli)
[01:27:05] *** Joins: y1n (~y1n@84-115-64-36.wifi.dynamic.surfer.at)
[01:27:06] *** Quits: HolyTaint (~HolyTaint@gateway/tor-sasl/holytaint) (Ping timeout: 276 seconds)
[01:28:21] *** Lord_of_Life_ is now known as Lord_of_Life
[01:28:45] *** Quits: LuksNuke (~LuksNuke@2001:7e8:c066:6200:be85:8d95:5d9:f9da) (Quit: Leaving)
[01:28:56] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Ping timeout: 256 seconds)
[01:28:56] *** Quits: lightbulbjim (~lightbulb@user/lightbulbjim) (Quit: Leaving...)
[01:29:10] *** Quits: dalan623 (~dalan@14-201-241-42.tpgi.com.au) (Ping timeout: 252 seconds)
[01:29:49] *** Joins: MikZyth (~MikZyth@188.65.242.220)
[01:29:51] <Macuser> lol
[01:29:59] <Macuser> is The-Compiler a bot
[01:30:39] *** Quits: Sky_Net (~Sky_Net@176.14.213.85) (Read error: Connection reset by peer)
[01:31:38] *** Quits: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk) (Quit: Leaving)
[01:32:30] *** Joins: ravindUwU (~ravindUwU@n110-22-100-22.sun3.vic.optusnet.com.au)
[01:32:30] *** Joins: Auron (~Auron956@user/auron)
[01:32:56] <ravindUwU> Hii!
[01:33:05] *** Quits: metah4ck3r (~meta@user/metah4ck3r) (Ping timeout: 252 seconds)
[01:33:08] <nedbat> ravindUwU: hello
[01:33:38] <ravindUwU> How would I specify the generic type arguments for a parent class? T = TypeVar(...) ; class Parent(Generic[T]) ; class Child(Parent[float]) is what I want to achieve
[01:33:39] *** Joins: ExpiredKebab (~sgreadly@2407:7000:a2f5:e803:162:b272:acef:c2cc)
[01:34:21] <nedbat> ravindUwU: sorry, i don't type-hint enough to know
[01:34:46] <ravindUwU> nedbat, that's okay thanks though
[01:35:11] *** Joins: metah4ck3r (~meta@user/metah4ck3r)
[01:35:34] <ravindUwU> ugh typings and super() are the worst bits of Python T-T
[01:36:18] *** Quits: ideopathic (~ideopathi@99-6-12-70.lightspeed.irvnca.sbcglobal.net) (Ping timeout: 256 seconds)
[01:37:05] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[01:37:12] *** Quits: Macuser (~Macuser@216.30.159.201) (Quit: Textual IRC Client: www.textualapp.com)
[01:37:33] *** Quits: pyeverything (~pyeveryth@c-66-31-107-137.hsd1.ma.comcast.net) (Remote host closed the connection)
[01:37:38] <nedbat> ravindUwU: you mean super on its own, or super paired with typing?
[01:37:56] *** Joins: pyeveryt_ (~pyeveryth@c-66-31-107-137.hsd1.ma.comcast.net)
[01:37:58] *** Quits: thiras (~thiras@user/thiras) (Ping timeout: 252 seconds)
[01:38:27] *** Joins: ideopathic (~ideopathi@99-6-12-70.lightspeed.irvnca.sbcglobal.net)
[01:38:33] <ravindUwU> nedbat, super() with multiple inheritance hehe
[01:38:52] *** Quits: kosh (~kosh@user/kosh) (Ping timeout: 245 seconds)
[01:38:58] <phy1729> ravindUwU: is that not working?
[01:38:59] <ammar2> ravindUwU: exactly what you showed as your example https://gist.github.com/644791a0d3fc966f99e1774b83361e5b
[01:39:08] <nedbat> ravindUwU: oh, then the problem is multiple inheritance, not super :)
[01:39:09] <ammar2> (for the types question)
[01:41:22] *** Quits: semeion (~semeion@user/semeion) (Ping timeout: 240 seconds)
[01:42:24] *** Joins: jarthur (~jarthur@2603-8080-1540-002d-9946-f19a-5329-6a99.res6.spectrum.com)
[01:42:29] <The-Compiler> oh, Macuser is gone, I'm not a bot though :D
[01:42:48] *** Joins: semeion (~semeion@user/semeion)
[01:42:52] <ravindUwU> ammar2, oh; on second thought it might be an issue with Pylance not Python eh? https://i.imgur.com/2jxSvTh.mp4
[01:43:50] <ravindUwU> phy1729, ^
[01:43:51] *** Joins: dalan623 (~dalan@203-213-94-109.tpgi.com.au)
[01:43:51] *** Quits: nomic (~nomic@2a00:23c6:9902:2401:65e9:6f2b:5308:7e2f) (Quit: Leaving)
[01:44:12] <ravindUwU> nedbat, fair enough hehe
[01:44:17] *** Quits: Midjak (~Midjak@82-65-111-221.subs.proxad.net) (Quit: This computer has gone to sleep)
[01:44:55] <ammar2> ravindUwU: yeah might be a pylance problem https://mypy-play.net/?mypy=latest&python=3.9&gist=92c11ecb4de7af40b898b8da2940117b
[01:46:46] *** Quits: darksun (~darksun@user/darksun) (Quit: leaving)
[01:46:51] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[01:48:29] *** Quits: fedenix (~fedenix@gateway/tor-sasl/fedenix) (Remote host closed the connection)
[01:48:58] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[01:49:42] *** Quits: blindguard (~blindguar@2a02:908:1864:c200::4433) (Quit: Konversation terminated!)
[01:50:08] *** Joins: p-i-_ (~Ohmu@mx-ll-223.206.69-159.dynamic.3bb.co.th)
[01:50:41] *** Quits: CrazyEddy (crazyed@2603:300a:1d10:c000:de4a:3eff:fe88:cc5f) (Ping timeout: 252 seconds)
[01:53:22] *** Quits: p-i- (~Ohmu@223.206.69.159) (Ping timeout: 252 seconds)
[01:56:23] *** Joins: nomic (~nomic@2a00:23c6:9902:2401:65e9:6f2b:5308:7e2f)
[01:59:35] *** Quits: TonyStone (~TonyStone@2603-7080-8607-c36a-9cdb-69bc-753b-1e50.res6.spectrum.com) (Remote host closed the connection)
[02:01:12] *** Quits: nomic (~nomic@2a00:23c6:9902:2401:65e9:6f2b:5308:7e2f) (Client Quit)
[02:01:52] *** Joins: arinov (~arinov@213.194.126.155)
[02:02:13] *** Joins: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net)
[02:02:25] *** Quits: ExpiredKebab (~sgreadly@2407:7000:a2f5:e803:162:b272:acef:c2cc) (Quit: Textual IRC Client: www.textualapp.com)
[02:03:13] <puff> Good afternoon, does anybody here do python web stuff on dreamhost?  I need to do a stupid little web app and I was going to host it on my dreamhost account, but it occurred to me that it might be a good learning exercise for python web stuff. Dreamhost's site says they have some support for python, but it's unclear if it's real support or "support".
[02:03:28] *** Joins: ExpiredKebab (~sgreadly@2407:7000:a2f5:e803:162:b272:acef:c2cc)
[02:04:07] *** Quits: Hax0r (~Hax0r@128.127.222.236) (Quit: Leaving)
[02:04:10] *** Quits: vvdaiwrw (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Quit: vvdaiwrw)
[02:04:48] *** Joins: mat001 (~mat001@c-73-223-64-126.hsd1.ca.comcast.net)
[02:06:32] *** Joins: WanderingGlitch (~Wandering@aha/hacker/wanderingglitch)
[02:07:40] *** Quits: mat001_ (~mat001@c-73-223-64-126.hsd1.ca.comcast.net) (Ping timeout: 240 seconds)
[02:08:21] <deniska> puff: seems like they provide passenger, which is… a bit annoying to set up to be honest, but it's doable
[02:08:29] <deniska> puff: https://help.dreamhost.com/hc/en-us/articles/215769548-Passenger-and-Python-WSGI
[02:08:50] *** Quits: georgios (~georgios@user/georgios) (Ping timeout: 252 seconds)
[02:09:11] <puff> deniska: Thanks.
[02:09:31] *** Joins: TonyStone (~TonyStone@2603-7080-8607-c36a-9cdb-69bc-753b-1e50.res6.spectrum.com)
[02:09:57] <puff> deniska: How relevant to python web programming in general is passenger?
[02:10:33] <puff> I.e. is it worth investing time in learning it?
[02:10:35] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[02:10:36] <BrenBarn> I've done Python stuff on dreamhost in the past but I found it somewhat difficult to find clear information about how to set it up
[02:11:10] <puff> Ah the fun things you find in google: https://www.news18.com/news/buzz/bus-passenger-uses-python-as-face-mask-and-protective-gear-around-his-neck-in-manchester-2881067.html
[02:11:31] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[02:11:38] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[02:11:47] <jean-luc> at least it wasnt a puff.... adder
[02:11:53] <deniska> puff: so far I only saw passenger used on these kinds of shared hosts which typically specialize in LAMP, and offer python as a bonus
[02:11:56] <puff> <rimshot>
[02:12:13] <puff> Hm, flask on passenger: https://zaiste.net/posts/python-apps-phussion-passenger-flask/
[02:12:53] <deniska> puff: when setting up my own servers, on vps and such, I typically go with nginx+gunicorn
[02:13:40] *** Quits: montxero (~user@149.167.149.74) (Read error: Connection reset by peer)
[02:13:42] *** Quits: magla (~gelignite@55d47635.access.ecotel.net) (Quit: Stay safe!)
[02:14:02] *** Quits: manti7 (~manti7@176.10.104.94) (Quit: WeeChat 3.1)
[02:14:26] *** Joins: montxero (~user@149.167.149.74)
[02:14:50] *** Quits: semeion (~semeion@user/semeion) (Ping timeout: 256 seconds)
[02:15:10] *** Quits: y1n (~y1n@84-115-64-36.wifi.dynamic.surfer.at) (Ping timeout: 240 seconds)
[02:15:25] *** Joins: semeion (~semeion@user/semeion)
[02:16:06] *** Quits: ravindUwU (~ravindUwU@n110-22-100-22.sun3.vic.optusnet.com.au) (Quit: KTHXBAI)
[02:16:08] *** Joins: cashew (~cashugh@user/cashew)
[02:16:28] *** Quits: freeworld (~vit@chello085216193138.chello.sk) (Ping timeout: 252 seconds)
[02:16:47] <BrenBarn> I never used passenger because it seems to only work to run one app on the whole domain
[02:16:57] <BrenBarn> I did some stuff with something else. . . flup?  maybe some other ones at some point
[02:17:04] <BrenBarn> that would led me run some small individual web app
[02:17:22] *** Quits: carlesso (~carlesso@c-107-3-160-43.hsd1.ca.comcast.net) (Ping timeout: 240 seconds)
[02:17:30] *** Joins: nomic (~nomic@2a00:23c6:9902:2401:65e9:6f2b:5308:7e2f)
[02:17:33] <BrenBarn> my impression is that modern web frameworks are harder to get working on Dreamhost shared hosting, although that could be just my own ignorance
[02:17:40] *** Quits: nomic (~nomic@2a00:23c6:9902:2401:65e9:6f2b:5308:7e2f) (Remote host closed the connection)
[02:17:41] <BrenBarn> like I dunno how you'd run an ASGI app on DH
[02:18:36] *** Joins: philipp64|work (~philipp64@mail.redfish-solutions.com)
[02:18:51] *** Joins: nomic (~nomic@2a00:23c6:9902:2401:65e9:6f2b:5308:7e2f)
[02:20:59] *** Quits: heco (~redrum@user/redrum88) (Quit: Going offline, see ya! (www.adiirc.com))
[02:21:02] *** Joins: Pickchea (~private@user/pickchea)
[02:26:01] *** Quits: philipp64|work (~philipp64@mail.redfish-solutions.com) (Quit: philipp64|work)
[02:28:11] *** Joins: Celeo (~Celeo@user/celeo)
[02:28:12] *** Quits: winterflaw (~winterfla@gateway/tor-sasl/winterflaw) (Ping timeout: 276 seconds)
[02:28:20] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[02:28:27] *** Joins: y1n (~y1n@84-115-64-36.wifi.dynamic.surfer.at)
[02:29:53] *** Joins: milkt_ (~debian@gateway/tor-sasl/milkt)
[02:30:03] *** Quits: milkt (~debian@gateway/tor-sasl/milkt) (Remote host closed the connection)
[02:30:35] *** Joins: Mattiaslndstrm (~Mattiasln@c188-148-207-108.bredband.tele2.se)
[02:31:03] *** Quits: Mattiaslndstrm (~Mattiasln@c188-148-207-108.bredband.tele2.se) (Client Quit)
[02:31:15] *** Quits: P1ro (~quassel@user/p1ro) (Ping timeout: 250 seconds)
[02:32:38] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[02:32:43] *** Joins: georgios (~georgios@user/georgios)
[02:32:44] *** Joins: goldfish_ (~goldfish@user/goldfish)
[02:34:38] *** Joins: heco (~redrum@user/redrum88)
[02:34:46] *** Quits: LucaTM (~LucaTM@user/lucatm) (Quit: Textual IRC Client: www.textualapp.com)
[02:34:51] *** Joins: shlomif (~shlomif@87.68.240.100.adsl.012.net.il)
[02:35:10] *** Quits: goldfish (~goldfish@user/goldfish) (Ping timeout: 240 seconds)
[02:35:18] <nedbat> puff: i've used passenger on dreamhost with django
[02:36:56] <puff> nedbat: How'd it turn out?
[02:37:42] <puff> So, doing some reading, I'm beginning to get the idea.  Passenger is like a framework for running WSGI apps, most python webapp frameworks (flask, django, etc) implement WSGI.
[02:37:45] <nedbat> puff: tbh, it's not done yet, but the site serves pages.  I find the connection between webserver and django is always mysterious. I just copy the recommendations, and it works.
[02:38:33] <puff> So two questions a) which python framework is the defacto standard, b) So for a braindead simple python web app, assuming I'm hosting it on dreamhost with passenger, would you recommend doing that?
[02:38:43] <puff> The alternative is to just do it in plain old boring PHP ;-)
[02:38:55] <puff> It's a stupid simple supply inventory management thing for my makerspace.
[02:39:23] *** Joins: fortuno51 (~fortuno51@37.120.156.254)
[02:39:34] *** Quits: fortuno51 (~fortuno51@37.120.156.254) (Remote host closed the connection)
[02:39:48] <nedbat> puff: django is the most-used python web framework.  flask is popular for DIY-ers, and FastAPI is great for a mostly API site.
[02:40:24] <puff> nedbat: Thanks.
[02:40:27] <hexology> passenger looks like a gunicorn alternative that's meant to integrate directly w/ apache or nginx rather than being reverse proxied?
[02:40:39] *** Quits: promey (~Promeys@gateway/tor-sasl/promey) (Remote host closed the connection)
[02:40:44] <nedbat> hexology: could be. like i said, that layer of things mystifies me.
[02:41:02] *** Joins: promey (~Promeys@gateway/tor-sasl/promey)
[02:41:36] <puff> This is basically three tables, user/login, supply request, and template (pre-filled values for supply requests). Just something barely better than a glorified to-do list, to let the membership/board manage refills/replacements for tool supplies.
[02:42:08] <hexology> my general understanding is that wsgi (and its async equivalent asgi) is an api/protocol that an http server "can use to invoke
[02:42:20] <hexology> that an http server "frontend" can use to invoke some python app "backend"
[02:42:55] <deniska> puff: if users and logins are a thing, django is what I tend to use
[02:43:09] <hexology> gunicorn spawns threads/processes and does all the good http server stuff you'd want, and the reason gunicorn knows what exactly to run when spawning a new process is because it's exposed through wsgi
[02:43:10] *** Quits: semeion (~semeion@user/semeion) (Ping timeout: 256 seconds)
[02:43:31] <puff> deniska: Thanks.
[02:43:33] <hexology> normally you reverse proxy requests through apache, nginx, caddy, etc. to the wsgi server
[02:43:40] *** Quits: aead (~aead@user/aead) (Ping timeout: 240 seconds)
[02:43:44] *** Joins: semeion (~semeion@user/semeion)
[02:43:58] <puff> hexology: That matches my fuzzy understanding, i.e. it's sort of like the CGI standard but more sophisticated.
[02:43:59] <hexology> django is nice because it includes an ORM and has plenty of middlewares for handling things like audit logging, user sessions, etc.
[02:44:39] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[02:44:43] <puff> hexology: That is, WSGI services the same *purpose* as the CGI standard, but more sophisticated.
[02:44:51] <deniska> wsgi is python-specific
[02:45:00] *** Quits: upsala (~zcb@185.213.155.160) (Quit: WeeChat 3.2)
[02:45:10] <puff> deniska: Really? I thoguht... oh wait, is WSGI related to OSGI?
[02:45:12] <deniska> but the goal is similar, to make a standard which both servers and frameworks can meet
[02:45:16] *** Joins: dutch (~DutchIngr@user/dutch)
[02:45:18] <hexology> that said, your particular use case sounds very lightweight, so if you don't mind either managing the database on your own or using a separate orm (such as sqlalchemy), you might be fine with something like flask
[02:45:55] <hexology> o dpm
[02:46:01] <hexology> gah keyboard
[02:46:05] <hexology> i don't think osgi and wsgi are related
[02:47:55] <puff> hexology: I'm balancing "simplest/easiest/shortest path" vs "worth investing time"
[02:47:55] <hexology> i think fastcgi handles the apache/nginx -> gunicorn/uvicorn part
[02:48:11] <hexology> and wsgi/asgi handles the gunicorn/uvicorn -> python app part
[02:48:43] <hexology> idk now im confused more after reading about it more
[02:48:45] *** Joins: loki_val (~crabbedha@user/crabbedhaloablut)
[02:48:48] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
[02:49:00] <hexology> puff: fair enough, django might be "overkill" for your case but it will probably handle everything you need to handle out of the box
[02:49:00] *** Quits: crabbedhaloablut (~crabbedha@user/crabbedhaloablut) (Ping timeout: 276 seconds)
[02:49:06] <hexology> and you can ignore the features you aren't using
[02:49:51] <deniska> gunicorn talks http, so nginx - gunicorn is just reverse proxying
[02:50:13] *** Quits: Ivii (~Ivyy@2001:a61:13eb:f801:c96f:e059:653f:9d68) (Remote host closed the connection)
[02:50:54] *** Quits: koltrast (~koltrast@h77-53-57-114.cust.a3fiber.se) (Quit: ZNC - http://znc.in)
[02:51:06] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[02:51:21] <pycode> hello, i do not get why people are using typing... i mean, whats the reason of using typing? i mean python does not really check the type so it is just for "documentation" i suppose, if yes...whats wrong with # comments? is this just a new way to write comments? :D
[02:51:54] *** Joins: koltrast (~koltrast@h77-53-57-114.cust.a3fiber.se)
[02:52:05] <nedbat> pycode: there are type checkers that can check the types: mypy, pylance, pyfire
[02:52:18] <bilb_ono> using the requests library is there a way to store url parameters in a session? So I can say for some requests session always substitue the url parameter x for something in the session object?
[02:52:32] <nedbat> pycode: and IDEs can make better use of type hints than they can comments.
[02:53:19] *** Quits: semeion (~semeion@user/semeion) (Ping timeout: 252 seconds)
[02:57:27] *** Quits: Seiryuu (~Seiryuu@ip174-103-176-143.adsl2.static.versatel.nl) (Quit: Leaving)
[02:58:30] *** Quits: GreenResponse (~tomek@r-45-155-148-237.gpon.bialnet.pl) (Quit: Leaving)
[02:58:39] *** Quits: pyeveryt_ (~pyeveryth@c-66-31-107-137.hsd1.ma.comcast.net) (Remote host closed the connection)
[02:59:15] *** Joins: pyeveryt_ (~pyeveryth@c-66-31-107-137.hsd1.ma.comcast.net)
[02:59:57] *** Quits: bilb_ono (~alexmarsh@ip68-6-69-149.sb.sd.cox.net) (Quit: bilb_ono)
[03:00:00] <pycode> ok
[03:01:24] <pycode> thanks nedbat
[03:01:31] *** Joins: bilb_ono (~alexmarsh@ip68-6-69-149.sb.sd.cox.net)
[03:03:50] *** Quits: fofoni (~fofoni@user/fofoni) (Remote host closed the connection)
[03:03:52] *** Quits: pyeveryt_ (~pyeveryth@c-66-31-107-137.hsd1.ma.comcast.net) (Ping timeout: 245 seconds)
[03:03:59] *** Quits: FFY00_ (~FFY00@archlinux/trusteduser/ffy00) (Remote host closed the connection)
[03:04:48] *** Joins: mat001_ (~mat001@c-73-223-64-126.hsd1.ca.comcast.net)
[03:04:59] *** Joins: FFY00 (~FFY00@archlinux/trusteduser/ffy00)
[03:06:46] *** Joins: semeion (~semeion@user/semeion)
[03:06:59] *** Joins: odoood (~odoood@2601:c8:c003:a550::7)
[03:08:10] *** Quits: mat001 (~mat001@c-73-223-64-126.hsd1.ca.comcast.net) (Ping timeout: 252 seconds)
[03:08:22] *** Joins: cjb (~cjb@user/cjb)
[03:09:29] <p-i-_> Suppose I have the following asyncio code: https://bpa.st/XGSQ ... now how to prevent it from terminating? Something like `while True: sleep(1)`. But there must be something cleaner...
[03:09:54] *** Quits: Pickchea (~private@user/pickchea) (Quit: Leaving)
[03:11:41] *** Quits: FFY00 (~FFY00@archlinux/trusteduser/ffy00) (Read error: Connection reset by peer)
[03:11:41] <BrenBarn> I kind of wish there was some web framework/webserver setup where I could get a simple out-of-the-box server but have lots of flexibility in setting up the Python side
[03:11:42] *** Joins: philipp64|work (~philipp64@mail.redfish-solutions.com)
[03:11:59] <BrenBarn> like the problem I find is that running multiple separate web apps on the same domain (say in subdirectories) requires too much fiddling with the webserver conf
[03:12:33] *** Joins: FFY00 (~FFY00@archlinux/trusteduser/ffy00)
[03:12:45] *** Quits: milkt_ (~debian@gateway/tor-sasl/milkt) (Quit: leaving)
[03:13:04] *** Joins: milkt (~debian@gateway/tor-sasl/milkt)
[03:13:57] *** Joins: carlesso (~carlesso@c-107-3-160-43.hsd1.ca.comcast.net)
[03:14:17] *** Quits: gitly (~gitly@85.255.235.176) (Ping timeout: 245 seconds)
[03:14:46] *** Quits: pycode (~pycode@2001:b07:5d28:551:b2ff:347a:453:271) (Ping timeout: 252 seconds)
[03:15:10] *** Quits: y1n (~y1n@84-115-64-36.wifi.dynamic.surfer.at) (Ping timeout: 240 seconds)
[03:16:09] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.2)
[03:16:36] *** Joins: gitly (~gitly@148.252.132.151)
[03:17:23] *** Quits: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net) (Remote host closed the connection)
[03:17:36] *** Joins: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net)
[03:17:40] *** Joins: pyeveryt_ (~pyeveryth@c-66-31-107-137.hsd1.ma.comcast.net)
[03:18:22] *** Quits: carlesso (~carlesso@c-107-3-160-43.hsd1.ca.comcast.net) (Ping timeout: 250 seconds)
[03:18:43] *** Quits: Donitz (~Donitz@85-156-203-108.elisa-laajakaista.fi) (Read error: Connection reset by peer)
[03:18:50] *** Quits: philipp64|work (~philipp64@mail.redfish-solutions.com) (Quit: philipp64|work)
[03:18:57] *** Joins: nomic2 (~nomic@185.192.69.143)
[03:19:24] *** Quits: pyeveryt_ (~pyeveryth@c-66-31-107-137.hsd1.ma.comcast.net) (Remote host closed the connection)
[03:20:16] *** Quits: semeion (~semeion@user/semeion) (Ping timeout: 252 seconds)
[03:20:26] *** Joins: pyeveryt_ (~pyeveryth@c-66-31-107-137.hsd1.ma.comcast.net)
[03:20:39] *** nomic2 is now known as nommic
[03:20:57] *** Quits: nomic (~nomic@2a00:23c6:9902:2401:65e9:6f2b:5308:7e2f) (Ping timeout: 245 seconds)
[03:21:12] *** Joins: Donitz (~Donitz@85-156-203-108.elisa-laajakaista.fi)
[03:21:47] *** Joins: Curiosity (uid511277@user/cypris)
[03:22:39] *** Quits: bilb_ono (~alexmarsh@ip68-6-69-149.sb.sd.cox.net) (Quit: bilb_ono)
[03:22:44] <anddam> semi-OT question, I am using VSCode OSS, I have setup linting and set the linter to be ~/.local/bin/flake8, yet I see no linting marks on the right scrollbar, while I remember thouse being there
[03:23:08] <anddam> any vscoder around with some insights?
[03:23:43] <voidcat> try saving the file
[03:23:47] *** Joins: pycurious (~Adium@user/pycurious)
[03:23:56] <voidcat> also are you sure there's things that would fail flake8 in there&
[03:24:52] *** Quits: pyeveryt_ (~pyeveryth@c-66-31-107-137.hsd1.ma.comcast.net) (Ping timeout: 250 seconds)
[03:27:46] *** Quits: FFY00 (~FFY00@archlinux/trusteduser/ffy00) (Remote host closed the connection)
[03:27:48] *** Joins: y1n (~y1n@84-115-65-150.wifi.dynamic.surfer.at)
[03:29:02] *** Joins: FFY00 (~FFY00@archlinux/trusteduser/ffy00)
[03:29:12] *** Quits: amahl (~amahl@dsl-jklbng12-54fbca-64.dhcp.inet.fi) (Ping timeout: 250 seconds)
[03:29:27] *** Joins: sgreadly (~sgreadly@2407:7000:a2f5:e803:5442:69ac:e5aa:ac62)
[03:30:30] *** Quits: djhankb (~djhankb@208.113.164.68) (Remote host closed the connection)
[03:31:01] *** Joins: djhankb (~djhankb@208.113.164.68)
[03:31:06] *** Joins: philipp64|work (~philipp64@mail.redfish-solutions.com)
[03:31:10] *** Quits: ExpiredKebab (~sgreadly@2407:7000:a2f5:e803:162:b272:acef:c2cc) (Ping timeout: 240 seconds)
[03:31:13] *** Quits: philipp64|work (~philipp64@mail.redfish-solutions.com) (Client Quit)
[03:32:43] *** Joins: semeion (~semeion@user/semeion)
[03:34:40] *** Quits: pizdets (~pizdets@183.182.110.224) (Ping timeout: 250 seconds)
[03:36:46] *** Quits: odoood (~odoood@2601:c8:c003:a550::7) (Ping timeout: 252 seconds)
[03:39:10] *** Quits: sn1tch3r (~sn1tch3r@user/sn1tch3r) (Remote host closed the connection)
[03:40:32] *** Joins: sn1tch3r (~sn1tch3r@user/sn1tch3r)
[03:42:08] *** Joins: goldfish__ (~goldfish@user/goldfish)
[03:42:20] *** Quits: y1n (~y1n@84-115-65-150.wifi.dynamic.surfer.at) (Ping timeout: 252 seconds)
[03:43:55] *** Quits: zaquest (~notzaques@5.128.210.178) (Quit: Leaving)
[03:45:01] *** Quits: goldfish_ (~goldfish@user/goldfish) (Ping timeout: 252 seconds)
[03:46:39] *** Quits: bomb-on (~bomb-on@194.144.47.113) (Quit: aллилѹіа!)
[03:46:55] *** Quits: scaleww (~scaleww@77-41-20-31.ftth.glasoperator.nl) (Quit: Leaving)
[03:47:08] <anddam> voidcat: nope, checked already to trigger linting with save
[03:47:20] <anddam> also wasn't the action on save formatting?
[03:47:37] <aphysically> wow I have definitely angered mypy with this recursive typing for a graph structure
[03:47:46] *** Quits: qlixed (~qlixed@181.44.129.13) (Ping timeout: 256 seconds)
[03:47:59] <anddam> voidcat: anyway I added lot of spaces and made very long lines
[03:48:04] <anddam> that should have triggered the linter
[03:48:36] <voidcat> aphysically, try putting the inner type it complains about in quotes
[03:49:03] *** Quits: xrogaan (~xrogaan@user/xrogaan) (Quit: Leaving)
[03:49:10] *** Joins: zaquest (~notzaques@5.128.210.178)
[03:49:21] <anddam> voidcat: oh, running flake8 manually gave
[03:49:23] <anddam> flake8.exceptions.PluginRequestedUnknownParameters: pycodestyle requested unknown parameters causing 'FileProcessor' object has no attribute 'indent size'
[03:49:36] <voidcat> oops
[03:49:46] <anddam> but you would expect a process running another one to tell you if the child process was dying in agony, wouldn't you?
[03:50:00] <anddam> I hate vscode
[03:50:24] <voidcat> vscode throws that all in the output tab (select python on the right dropdown)
[03:53:28] *** Joins: qlixed (~qlixed@181.44.129.13)
[03:53:40] *** Quits: goldfish__ (~goldfish@user/goldfish) (Ping timeout: 240 seconds)
[03:54:16] <anddam> voidcat: still only stdout there, nothing in Debug console or Problems
[03:55:05] <voidcat> dunno then
[03:55:26] *** Joins: y1n (~y1n@212095005228.public.telering.at)
[03:56:52] <anddam> voidcat: ha, https://github.com/PyCQA/pycodestyle/issues/983
[03:56:58] <anddam> "upgrade flake8"
[03:57:27] <anddam> and since mine is pip --user provided, one pip run later
[03:57:37] <anddam> bingo bongo, full or red errors
[03:57:39] <anddam> n0ice
[03:57:53] <anddam> x/ or / c/ of /
[03:58:02] <anddam> thanks for the hints
[03:59:02] <voidcat> nice
[04:00:07] *** Joins: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com)
[04:00:10] *** Quits: FFY00 (~FFY00@archlinux/trusteduser/ffy00) (Remote host closed the connection)
[04:01:05] *** Joins: FFY00 (~FFY00@archlinux/trusteduser/ffy00)
[04:02:04] *** Quits: y1n (~y1n@212095005228.public.telering.at) (Ping timeout: 252 seconds)
[04:03:02] <aphysically> recursive typing is apparently to-do for mypy, but the microsoft typer implemented it
[04:03:15] <aphysically> I'll just replace the recursion with Any for now
[04:03:47] *** Quits: et (~et@user/et) (Ping timeout: 252 seconds)
[04:04:22] <voidcat> I was able to get it to work with https://bpa.st/NWCA aphysically
[04:04:32] <voidcat> if that's the kind of recursion you want
[04:04:35] *** Joins: et (~et@user/et)
[04:05:37] *** Quits: Fedorasan (~fedorasan@user/fedorasan) (Quit: Going offline, see ya! (www.adiirc.com))
[04:06:30] <aphysically> I mean like a typealias that uses itself, like mytype = tuple(int, mytype)
[04:06:49] <voidcat> ah
[04:07:13] <aphysically> (in reality it would be like  mytype | int or something, so it can terminate)
[04:07:33] *** Joins: vicfred (~vicfred@user/vicfred)
[04:08:14] <aphysically> I'm typing a structure I'm using as a helper in rendering a directed graph, and the type is recursive
[04:08:29] *** Joins: Macuser (~Macuser@216.30.159.201)
[04:08:34] *** Quits: gitesh (uid423739@id-423739.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[04:08:43] *** Joins: mnemonic (~semeion@user/semeion)
[04:09:23] *** Quits: Auron (~Auron956@user/auron) (Remote host closed the connection)
[04:11:00] *** Quits: Seirdy (~Seirdy@sourcehut/user/seirdy) (Ping timeout: 256 seconds)
[04:11:34] *** Quits: semeion (~semeion@user/semeion) (Ping timeout: 256 seconds)
[04:11:47] *** Joins: et_ (~et@user/et)
[04:12:31] *** Quits: et (~et@user/et) (Ping timeout: 252 seconds)
[04:12:31] *** et_ is now known as et
[04:13:41] *** Joins: vvdaiwrw (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[04:14:58] *** Quits: qlixed (~qlixed@181.44.129.13) (Ping timeout: 256 seconds)
[04:16:22] *** Quits: Thanatos (~Thanatos@ec2-54-148-37-124.us-west-2.compute.amazonaws.com) (Ping timeout: 252 seconds)
[04:16:40] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 240 seconds)
[04:16:53] *** Joins: Seirdy (~Seirdy@sourcehut/user/seirdy)
[04:17:12] *** Joins: qlixed (~qlixed@181.44.129.13)
[04:17:35] *** Joins: CrazyEddy (crazyed@2603:300a:1d10:c000:de4a:3eff:fe88:cc5f)
[04:17:42] *** Quits: Sheilong (uid293653@id-293653.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[04:18:27] *** Quits: Gurkenglas (~Gurkengla@dslb-090-186-104-237.090.186.pools.vodafone-ip.de) (Ping timeout: 245 seconds)
[04:18:34] *** Quits: ^-^hi (~nikw@user/-hi/x-1729478) (Ping timeout: 252 seconds)
[04:20:16] *** Joins: pyeverything (~pyeveryth@c-66-31-107-137.hsd1.ma.comcast.net)
[04:21:47] *** Joins: pizdets (~pizdets@183.182.114.81)
[04:23:50] *** Quits: Spawns_Carpeting (~pi@user/spawns-carpeting/x-6969421) (Quit: ZNC 1.7.2+deb3 - https://znc.in)
[04:24:48] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[04:25:37] *** Joins: Spawns_Carpeting (~pi@user/spawns-carpeting/x-6969421)
[04:26:47] *** Quits: freeman_h (~freeman_h@2a02:c7f:fc54:ba00:4ca:f02d:d72:7385) (Read error: Connection reset by peer)
[04:27:15] *** Joins: jmiehe (~Thunderbi@user/jmiehe)
[04:28:34] *** Quits: nyah (~nyah@bcdcb6e3.skybroadband.com) (Ping timeout: 256 seconds)
[04:28:35] *** Joins: herjazz (~herjazz@p6758124-ipngn30801marunouchi.tokyo.ocn.ne.jp)
[04:29:34] <jmiehe> so I have a script "./foo.py" which uses a created "./foo-lib/" python package, with its dependencies as a Pipfile in "./Pipfile{,.lock"
[04:30:00] <jmiehe> How would I go about creating a pip installable package from that?
[04:30:21] *** Quits: sn1tch3r (~sn1tch3r@user/sn1tch3r) (Remote host closed the connection)
[04:30:29] *** Joins: withered_wolf (~withered_@206.sub-174-209-41.myvzw.com)
[04:30:52] <jmiehe> By now, I just `pipenv run ./foo.py`, which is okay for development use
[04:30:54] *** Quits: withered_wolf (~withered_@206.sub-174-209-41.myvzw.com) (Read error: Connection reset by peer)
[04:31:41] *** Joins: sn1tch3r (~sn1tch3r@user/sn1tch3r)
[04:31:57] <jmiehe> But I'd prefer to (create a venv and) just `pip install [-e] .` and then `foo`
[04:32:13] *** Quits: Macuser (~Macuser@216.30.159.201) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[04:33:07] <jmiehe> I found setuptools-pipfile is part of the answer, but I've never created a setup.py/setup.cfg/pyproject.toml ever yet
[04:34:08] *** Joins: semeion (~semeion@user/semeion)
[04:34:08] *** mnemonic is now known as Guest3235
[04:36:22] *** Quits: Guest3235 (~semeion@user/semeion) (Ping timeout: 245 seconds)
[04:36:59] <aphysically> I should really use namedtuples here I guess
[04:39:08] *** Joins: carlesso (~carlesso@c-107-3-160-43.hsd1.ca.comcast.net)
[04:41:58] *** Quits: brabrax (~brabrax@user/brabrax) (Quit: ZNC 1.8.2 - https://znc.in)
[04:42:56] *** Joins: brabrax (~brabrax@user/brabrax)
[04:43:04] *** Joins: jpds1 (~jpds@gateway/tor-sasl/jpds)
[04:43:06] <nedbat> aphysically: namedtuples are not much loved these days. there are better tools for most purposes
[04:43:27] *** Quits: carlesso (~carlesso@c-107-3-160-43.hsd1.ca.comcast.net) (Ping timeout: 245 seconds)
[04:46:37] *** Quits: jpds (~jpds@gateway/tor-sasl/jpds) (Remote host closed the connection)
[04:49:09] *** Joins: Macuser (~Macuser@216.30.159.201)
[04:49:48] *** Quits: semeion (~semeion@user/semeion) (Ping timeout: 250 seconds)
[04:50:49] *** Quits: pizdets (~pizdets@183.182.114.81) (Quit: pizdets)
[04:50:54] *** Quits: montxero (~user@149.167.149.74) (Remote host closed the connection)
[04:51:32] *** Joins: pizdets (~pizdets@183.182.114.81)
[04:51:47] <yitz> dataclasses!
[04:52:12] <dre> ^
[04:52:35] *** Quits: pizdets (~pizdets@183.182.114.81) (Client Quit)
[04:53:42] *** Quits: reset (~reset@user/reset) (Quit: reset)
[04:54:49] <habnabit_> aphysically, attrs is great, and comes with a free explanation of why namedtuples aren't very good https://www.attrs.org/en/stable/why.html#namedtuples
[04:55:29] *** Joins: pizdets (~pizdets@183.182.114.81)
[04:59:06] *** Quits: arinov (~arinov@213.194.126.155) (Quit: WeeChat 3.1)
[04:59:07] *** Quits: REHBhE02qmJNzm6 (~REHBhE02q@static-198-54-131-70.cust.tzulo.com) (Ping timeout: 256 seconds)
[04:59:54] *** Quits: pizdets (~pizdets@183.182.114.81) (Client Quit)
[04:59:56] *** Quits: pyeverything (~pyeveryth@c-66-31-107-137.hsd1.ma.comcast.net) (Remote host closed the connection)
[05:00:42] *** Joins: pyeveryt_ (~pyeveryth@c-66-31-107-137.hsd1.ma.comcast.net)
[05:01:12] *** Joins: pizdets (~pizdets@183.182.114.81)
[05:02:12] *** Quits: pyeveryt_ (~pyeveryth@c-66-31-107-137.hsd1.ma.comcast.net) (Remote host closed the connection)
[05:03:44] *** Joins: semeion (~semeion@user/semeion)
[05:05:37] *** Quits: jeho (~jehoshaph@user/jehoshaphat) (Remote host closed the connection)
[05:05:46] *** Quits: sgreadly (~sgreadly@2407:7000:a2f5:e803:5442:69ac:e5aa:ac62) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[05:07:46] *** Joins: ngaio (~ngaio@c-98-32-237-193.hsd1.in.comcast.net)
[05:08:06] *** Quits: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net) (Remote host closed the connection)
[05:08:20] *** Joins: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net)
[05:08:40] *** Quits: AutomatedTester (uid395371@selenium/developer/AutomatedTester) (Quit: Connection closed for inactivity)
[05:10:02] *** Joins: ExpiredKebab (~sgreadly@2407:7000:a2f5:e803:4462:66df:eb2d:cd3b)
[05:10:07] *** Quits: damonlynch (~ngaio@2601:245:c700:2c06:5cb4:e285:be91:5705) (Ping timeout: 245 seconds)
[05:11:32] *** Quits: ExpiredKebab (~sgreadly@2407:7000:a2f5:e803:4462:66df:eb2d:cd3b) (Client Quit)
[05:22:14] *** Joins: jeho (~jehoshaph@user/jehoshaphat)
[05:23:31] *** Joins: tlgs (~tlgs@188-141-56-55.dynamic.upc.ie)
[05:25:07] *** Quits: qpdb_ (~qpdb@user/qpdb) (Ping timeout: 252 seconds)
[05:25:23] *** Quits: seednode (~seednode@user/seednode) (Read error: Connection reset by peer)
[05:25:42] <Dev0n> Hey, I have one flask endpoint that's returning an env value, e.g. return os.getenv("FOO"). I just want a sanity check that I'm not opening this endpoint up for any security risks by doing this?
[05:27:04] <Dev0n> ofc, unless someone is able to arbitrary set the value of FOO to something then yea, but in this case, FOO is before the app runs, e.g. FOO=bar python main.py
[05:27:15] <Dev0n> is set*
[05:27:38] *** Joins: seednode (~seednode@user/seednode)
[05:28:12] <InPhase> Dev0n: If you can't trust the system environment variables, you've already lost the security war.
[05:28:46] <InPhase> This includes paths and the location of loadable libraries.
[05:28:55] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.2.1)
[05:29:36] *** Joins: nomic2 (~nomic@185.192.69.143)
[05:29:48] <Dev0n> InPhase, I trust the system, I'm more querying about how it's accessed (through os.getenv).
[05:29:56] <InPhase> Dev0n: If by your question you mean that you are using external input to set the system environment variable, then just be careful what you are setting, that you are only ever setting what you think you are, and that it has no other usages.
[05:30:17] <InPhase> Nothing wrong with using os.getenv
[05:30:19] *** Joins: mnemonic (~semeion@user/semeion)
[05:30:24] <Dev0n> perfect, thanks InPhase
[05:32:16] *** Quits: nommic (~nomic@185.192.69.143) (Ping timeout: 250 seconds)
[05:32:42] *** Quits: vvdaiwrw (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Quit: vvdaiwrw)
[05:33:10] *** Quits: semeion (~semeion@user/semeion) (Ping timeout: 240 seconds)
[05:33:50] *** Quits: jmiehe (~Thunderbi@user/jmiehe) (Quit: jmiehe)
[05:33:55] *** Quits: mickey (~user@user/mickey) (Quit: Ping timeout (120 seconds))
[05:34:29] *** Joins: mickey (~user@user/mickey)
[05:34:44] *** Quits: vicfred (~vicfred@user/vicfred) (Quit: Leaving)
[05:35:11] *** Joins: vlm (~vlm@user/vlm)
[05:35:55] *** Quits: Derailed (~tom@ec2-13-211-184-100.ap-southeast-2.compute.amazonaws.com) (Quit: ZNC - https://znc.in)
[05:36:06] *** Quits: Macuser (~Macuser@216.30.159.201) (Quit: Textual IRC Client: www.textualapp.com)
[05:36:43] *** Joins: Waouh (~waouh@2603-6010-9800-01eb-29da-e4f1-27e2-a1e6.res6.spectrum.com)
[05:37:47] *** Joins: pyeveryt_ (~pyeveryth@c-66-31-107-137.hsd1.ma.comcast.net)
[05:37:57] *** Quits: pyeveryt_ (~pyeveryth@c-66-31-107-137.hsd1.ma.comcast.net) (Remote host closed the connection)
[05:38:13] *** Joins: pyeverything (~pyeveryth@c-66-31-107-137.hsd1.ma.comcast.net)
[05:39:09] *** Joins: qpdb_ (~qpdb@user/qpdb)
[05:40:00] *** Joins: carlesso (~carlesso@c-107-3-160-43.hsd1.ca.comcast.net)
[05:40:37] *** Quits: Vornicus (~Vornicus@2603-8000-5d07-7ef0-48bc-d9bc-c2f0-e922.res6.spectrum.com) (Read error: Connection reset by peer)
[05:40:41] *** Joins: Derailed (~tom@ec2-13-211-184-100.ap-southeast-2.compute.amazonaws.com)
[05:41:59] *** Quits: Derailed (~tom@ec2-13-211-184-100.ap-southeast-2.compute.amazonaws.com) (Client Quit)
[05:42:45] *** Quits: Celeo (~Celeo@user/celeo) (Quit: Leaving)
[05:43:00] *** Joins: frost (~frost@59.71.240.119)
[05:43:23] *** nomic2 is now known as nomic
[05:44:07] *** Joins: Fiji (~Fiji@user/fiji)
[05:44:10] *** Quits: carlesso (~carlesso@c-107-3-160-43.hsd1.ca.comcast.net) (Ping timeout: 240 seconds)
[05:45:48] *** Quits: akk (~akk@174-28-98-206.albq.qwest.net) (Quit: +++)
[05:47:55] *** Quits: dalan623 (~dalan@203-213-94-109.tpgi.com.au) (Quit: dalan623)
[05:48:36] *** Joins: dalan623 (~dalan@203-213-94-109.tpgi.com.au)
[05:48:49] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[05:51:03] *** Joins: aead (~aead@user/aead)
[05:51:20] *** Quits: dalan623 (~dalan@203-213-94-109.tpgi.com.au) (Client Quit)
[05:52:40] *** Joins: dalan623 (~dalan@203-213-94-109.tpgi.com.au)
[05:57:52] *** Joins: mickey8 (~user@user/mickey)
[05:58:54] *** Quits: mickey (~user@user/mickey) (Remote host closed the connection)
[05:58:55] *** mickey8 is now known as mickey
[05:59:06] *** Joins: mat001 (~mat001@c-73-223-64-126.hsd1.ca.comcast.net)
[05:59:33] <habnabit_> Dev0n, (also, use os.environ)
[06:00:05] *** Quits: h_ (rootvegeta@fsf/member/hays) (Quit: h_)
[06:00:23] *** Quits: jetchisel (jetchisel@user/jetchisel) (Quit: Unfortunately time is always against us -- [Morpheus])
[06:01:07] *** Quits: dalan623 (~dalan@203-213-94-109.tpgi.com.au) (Quit: dalan623)
[06:01:51] *** Joins: dalan623 (~dalan@203-213-94-109.tpgi.com.au)
[06:02:05] *** Joins: Wulf (~Wulf@user/wulf)
[06:02:10] *** Quits: mat001_ (~mat001@c-73-223-64-126.hsd1.ca.comcast.net) (Ping timeout: 240 seconds)
[06:07:07] *** Joins: atrigent (~atrigent@c-73-69-68-26.hsd1.ma.comcast.net)
[06:10:34] *** Quits: tlgs (~tlgs@188-141-56-55.dynamic.upc.ie) (Ping timeout: 256 seconds)
[06:12:58] *** Quits: emerent (~quassel@p200300cd5701a194ba27ebfffed28a59.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[06:13:43] *** Joins: emerent (~quassel@p200300cd5701a10fba27ebfffed28a59.dip0.t-ipconnect.de)
[06:16:33] *** Joins: brabrax_ (~brabrax@user/brabrax)
[06:17:12] *** Quits: brabrax (~brabrax@user/brabrax) (Ping timeout: 245 seconds)
[06:17:12] *** brabrax_ is now known as brabrax
[06:19:24] *** Joins: dalan6236 (~dalan@14-201-78-173.static.tpgi.com.au)
[06:21:17] *** Quits: dalan623 (~dalan@203-213-94-109.tpgi.com.au) (Ping timeout: 252 seconds)
[06:21:18] *** dalan6236 is now known as dalan623
[06:21:54] *** Quits: cth (~Cthulchu@193.194.107.250) (Ping timeout: 256 seconds)
[06:25:16] *** Quits: FluffyMask (~masque@user/fluffymask) (Quit: WeeChat 3.2)
[06:26:40] *** Quits: pyre (~pyre@crimeboss.nillas-power.com) (Ping timeout: 240 seconds)
[06:26:52] *** Joins: pyre (~pyre@crimeboss.nillas-power.com)
[06:28:27] *** Joins: seednode2 (~seednode@user/seednode)
[06:28:40] *** Quits: seednode (~seednode@user/seednode) (Ping timeout: 240 seconds)
[06:28:40] *** seednode2 is now known as seednode
[06:29:35] *** Joins: theseb (~cs@47-220-214-54.cnrocmta03.res.dyn.suddenlink.net)
[06:29:53] *** Quits: theseb (~cs@47-220-214-54.cnrocmta03.res.dyn.suddenlink.net) (Remote host closed the connection)
[06:31:19] *** Joins: blddk (~admin@185.233.252.229)
[06:31:42] *** Quits: dcaro_away (~dcaro@user/dcaro) (Quit: ZNC 1.8.2 - https://znc.in)
[06:31:59] *** Quits: dthpulse (~quassel@podciarou.sk) (Remote host closed the connection)
[06:32:01] *** Joins: dcaro (~dcaro@user/dcaro)
[06:32:56] *** Quits: Curiosity (uid511277@user/cypris) (Quit: Connection closed for inactivity)
[06:33:08] *** Joins: dthpulse (~quassel@podciarou.sk)
[06:34:19] *** Quits: Fiji (~Fiji@user/fiji) (Remote host closed the connection)
[06:34:44] *** Joins: Fiji (~Fiji@user/fiji)
[06:35:31] *** Joins: finn_elija (~finn_elij@user/finn-elija/x-0085643)
[06:35:31] *** FinnElija is now known as Guest9426
[06:35:31] *** finn_elija is now known as FinnElija
[06:38:27] *** Quits: Guest9426 (~finn_elij@user/finn-elija/x-0085643) (Ping timeout: 245 seconds)
[06:39:26] *** Quits: Fiji (~Fiji@user/fiji) (Ping timeout: 252 seconds)
[06:39:45] *** Joins: Mija (~Mija@user/mija)
[06:40:52] *** Joins: carlesso (~carlesso@c-107-3-160-43.hsd1.ca.comcast.net)
[06:43:35] *** Quits: EgonX (~EgonX@2601:2c6:47f:9c18:9a9:55a3:201b:8ae6) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[06:45:07] *** Quits: carlesso (~carlesso@c-107-3-160-43.hsd1.ca.comcast.net) (Ping timeout: 245 seconds)
[06:45:30] *** Quits: sargon (~sargon@188.250.185.117) (Ping timeout: 250 seconds)
[06:50:31] *** Quits: Waouh (~waouh@2603-6010-9800-01eb-29da-e4f1-27e2-a1e6.res6.spectrum.com) (Quit: Leaving)
[06:50:31] *** Joins: leduyquang753 (~leduyquan@user/leduyquang753)
[06:57:53] *** Joins: EgonX (~EgonX@2601:2c6:47f:9c18:385a:8616:2ea6:bd5d)
[06:58:50] *** Quits: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net) (Remote host closed the connection)
[06:59:04] *** Joins: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net)
[07:01:03] *** Quits: ngaio (~ngaio@c-98-32-237-193.hsd1.in.comcast.net) (Quit: Leaving)
[07:04:38] *** Joins: audio (~audio@2603-8081-1801-3bb5-92e1-977b-0879-14f5.res6.spectrum.com)
[07:07:29] *** Quits: ttree (~ttree0@c-73-239-62-159.hsd1.wa.comcast.net) (Ping timeout: 252 seconds)
[07:10:18] *** Joins: lalitmee_ (~lalitmee@180.94.33.3)
[07:13:08] *** Joins: Curiosity (uid511277@user/cypris)
[07:14:47] *** Joins: odoood (~odoood@2601:c8:c003:a550::7)
[07:16:02] *** Quits: cjb (~cjb@user/cjb) (Quit: rcirc on GNU Emacs 28.0.50)
[07:20:36] *** Joins: qpq4 (~textual@47.188.117.13)
[07:28:24] *** Joins: thurs8 (~thurs@ip68-225-209-147.ph.ph.cox.net)
[07:31:19] *** Joins: zensei (~zensei@user/zensei)
[07:31:29] *** Quits: qpq4 (~textual@47.188.117.13) (Quit: Textual IRC Client: www.textualapp.com)
[07:32:44] *** Quits: coc0nut (~coc0nut@user/coc0nut) (Ping timeout: 250 seconds)
[07:33:11] *** Joins: majors (~majors@user/majors)
[07:33:16] *** Joins: Sky_Net (~Sky_Net@176.14.213.85)
[07:34:00] *** Joins: coc0nut (~coc0nut@user/coc0nut)
[07:37:38] *** Quits: zebrag (~chris@user/zebrag) (Quit: Konversation terminated!)
[07:41:44] *** Joins: carlesso (~carlesso@c-107-3-160-43.hsd1.ca.comcast.net)
[07:45:22] *** Quits: ferz (~ferz@93-39-142-17.ip76.fastwebnet.it) (Ping timeout: 252 seconds)
[07:46:17] *** Quits: carlesso (~carlesso@c-107-3-160-43.hsd1.ca.comcast.net) (Ping timeout: 245 seconds)
[07:48:09] *** Joins: bilb_ono (~alexmarsh@ip68-6-69-149.sb.sd.cox.net)
[07:49:09] *** Joins: fengshaun_ (~fengshaun@S0106bc9b6886e536.cg.shawcable.net)
[07:49:24] *** Quits: sn1tch3r (~sn1tch3r@user/sn1tch3r) (Quit: Leaving)
[07:49:39] *** Joins: minip (minip@user/minip)
[07:52:50] *** Joins: mat001_ (~mat001@c-73-223-64-126.hsd1.ca.comcast.net)
[07:53:49] *** Joins: carlesso (~carlesso@c-107-3-160-43.hsd1.ca.comcast.net)
[07:54:10] *** Quits: odoood (~odoood@2601:c8:c003:a550::7) (Ping timeout: 252 seconds)
[07:54:56] *** Quits: georgios (~georgios@user/georgios) (Quit: Konversation terminated!)
[07:55:32] *** Quits: LiftLeft (~LiftLeft@216-26-118-34.dynamic.nelson.airstreamcomm.net) (Ping timeout: 245 seconds)
[07:55:49] *** Quits: mat001 (~mat001@c-73-223-64-126.hsd1.ca.comcast.net) (Ping timeout: 252 seconds)
[07:56:08] *** Quits: nomic (~nomic@185.192.69.143) (Quit: Leaving)
[07:56:12] *** Joins: ttree (~ttree0@c-73-239-62-159.hsd1.wa.comcast.net)
[07:58:31] *** Quits: R0b0t1 (~R0b0t1@d-74-214-63-13.md.cpe.atlanticbb.net) (Read error: Connection reset by peer)
[07:59:10] *** Quits: carlesso (~carlesso@c-107-3-160-43.hsd1.ca.comcast.net) (Ping timeout: 240 seconds)
[07:59:25] *** Joins: R0b0t1 (~R0b0t1@d-74-214-63-13.md.cpe.atlanticbb.net)
[08:00:26] *** Joins: ferz (~ferz@93-39-142-17.ip76.fastwebnet.it)
[08:03:07] *** Joins: fikran (~fikran@user/fikran)
[08:03:47] *** Joins: cjb (~cjb@user/cjb)
[08:06:56] *** Joins: zumba_addict (~zumba_add@c-71-194-58-34.hsd1.il.comcast.net)
[08:07:25] *** Quits: dez (uid92154@user/dez) (Quit: Connection closed for inactivity)
[08:07:26] *** Quits: fengshaun_ (~fengshaun@S0106bc9b6886e536.cg.shawcable.net) (Ping timeout: 252 seconds)
[08:10:41] *** Quits: ShorTie (~ShorTie@205.sub-72-105-247.myvzw.com) (Read error: Connection reset by peer)
[08:10:50] *** Quits: minip (minip@user/minip) (Remote host closed the connection)
[08:11:53] *** Joins: ShorTie (~ShorTie@205.sub-72-105-247.myvzw.com)
[08:12:56] *** Quits: HurricaneHarry (~quassel@2a02-a455-9d06-1-79e1-fcc1-c3a1-8838.fixed6.kpn.net) (Ping timeout: 252 seconds)
[08:17:13] *** Quits: sarna (~sarna@c40-227.icpnet.pl) (Ping timeout: 252 seconds)
[08:18:03] *** Joins: mohabaks (~mohabaks@gateway/tor-sasl/mohabaks)
[08:18:21] *** Joins: sarna (~sarna@c40-227.icpnet.pl)
[08:18:21] *** Joins: HurricaneHarry (~quassel@2a02-a455-9d06-1-55ae-dfb0-f1c4-1f83.fixed6.kpn.net)
[08:18:49] *** Joins: freeworld (~vit@chello085216193138.chello.sk)
[08:19:24] *** Quits: zumba_addict (~zumba_add@c-71-194-58-34.hsd1.il.comcast.net) (Quit: Client closed)
[08:24:37] *** Joins: Fiji (~Fiji@user/fiji)
[08:27:33] *** Quits: pycurious (~Adium@user/pycurious) (Quit: Leaving.)
[08:27:43] *** Quits: penguino (~mrpenguin@user/mrpenguin) (Remote host closed the connection)
[08:30:28] *** Quits: junktext (~junktext@109.201.152.179) (Ping timeout: 252 seconds)
[08:31:21] *** Quits: qlixed (~qlixed@181.44.129.13) (Quit: That's all folks!!)
[08:32:31] *** Quits: korg815 (~korg815@user/korg815) (Quit: slackware)
[08:32:38] *** Joins: pycurious (~Adium@user/pycurious)
[08:32:38] *** Quits: pycurious (~Adium@user/pycurious) (Client Quit)
[08:33:04] *** Quits: Sky_Net (~Sky_Net@176.14.213.85) (Read error: Connection reset by peer)
[08:36:02] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.2.1)
[08:36:30] *** Joins: supakeen (~user@python/site-packages/supakeen)
[08:42:02] *** Quits: slowButPresent (~slowButPr@user/slowbutpresent) (Quit: leaving)
[08:48:58] *** Quits: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net) (Remote host closed the connection)
[08:49:11] *** Joins: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net)
[08:50:16] *** Quits: Seirdy (~Seirdy@sourcehut/user/seirdy) (Ping timeout: 252 seconds)
[08:52:28] *** Quits: envex (~envex@cpe-173-91-189-33.neo.res.rr.com) (Ping timeout: 252 seconds)
[08:52:38] *** Quits: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br) (Ping timeout: 256 seconds)
[08:54:42] *** Joins: carlesso (~carlesso@c-107-3-160-43.hsd1.ca.comcast.net)
[08:56:14] *** Joins: Seirdy (~Seirdy@sourcehut/user/seirdy)
[09:00:52] *** Quits: carlesso (~carlesso@c-107-3-160-43.hsd1.ca.comcast.net) (Ping timeout: 245 seconds)
[09:02:10] *** Quits: GenTooMan (~cyberman@2601:547:437f:e5c6:21f:5bff:fefe:a883) (Ping timeout: 240 seconds)
[09:04:53] *** Quits: sgt_chuckles (~sgt_chuck@pool-71-190-209-205.nycmny.fios.verizon.net) (Remote host closed the connection)
[09:06:48] *** Quits: CapnKernel (foobar@gromit.mixdown.ca) (*.net *.split)
[09:06:48] *** Quits: phy1729 (~phy1729@zsh/wizard/phy1729) (*.net *.split)
[09:06:48] *** Quits: wolfshappen (~waff@irc.furworks.de) (*.net *.split)
[09:06:48] *** Quits: ajb (~ajb@cupid.whatbox.ca) (*.net *.split)
[09:06:48] *** Quits: flay (~flay@user/flay) (*.net *.split)
[09:06:48] *** Quits: infobob (~infobob@python/bot/infobob) (*.net *.split)
[09:06:58] *** Joins: GenTooMan (~cyberman@2601:547:437f:e5c6:21f:5bff:fefe:a883)
[09:07:04] *** Joins: wolfshappen (~waff@irc.furworks.de)
[09:07:04] *** Joins: infobob (~infobob@python/bot/infobob)
[09:07:06] *** Joins: flay (~flay@user/flay)
[09:07:44] *** Joins: phy1729 (~phy1729@zsh/wizard/phy1729)
[09:08:49] *** Quits: Xaldafax (~xaldafax@cpe-198-72-160-101.socal.res.rr.com) (Quit: Bye...)
[09:11:15] *** Quits: JerryXiao (~JerryXiao@user/jerryxiao) (*.net *.split)
[09:11:15] *** Quits: sabet (~sabet@user/sabet) (*.net *.split)
[09:11:15] *** Quits: gbear605 (~gbear605@user/gbear605) (*.net *.split)
[09:11:15] *** Quits: cyberjunkie (~cyberjunk@wireguard/tunneler/cyberjunkie) (*.net *.split)
[09:11:15] *** Quits: onu (~onufn@gibbs.uberspace.de) (*.net *.split)
[09:11:15] *** Quits: neil (~kneel@rockylinux/infra/neil) (*.net *.split)
[09:11:15] *** Quits: jjhoo (jahakala@dsl-trebng21-58c18f-56.dhcp.inet.fi) (*.net *.split)
[09:11:15] *** Quits: aluria (~aluria@canonical/aluria) (*.net *.split)
[09:11:15] *** Quits: crackerjack (crackerjac@pear.bnc4free.com) (*.net *.split)
[09:11:15] *** Quits: tris (emptystrin@irc1.lessbroken.org) (*.net *.split)
[09:11:15] *** Quits: thm (~thomas@fedora/thm) (*.net *.split)
[09:11:15] *** Quits: petaflot (~root@lutolf.vserver.nimag.net) (*.net *.split)
[09:11:15] *** Quits: mboehn (mathias@hh1.nuxis.org) (*.net *.split)
[09:11:15] *** Quits: Duckle (~Duckle@user/duckle) (*.net *.split)
[09:11:15] *** Quits: majuscule (~majuscule@disinclined.org) (*.net *.split)
[09:11:15] *** Quits: fredrikhl (~fhl@myrsnipa.uio.no) (*.net *.split)
[09:11:15] *** Quits: holbrode (sid339826@id-339826.tinside.irccloud.com) (*.net *.split)
[09:11:15] *** Quits: EWDurbin (sid38710@id-38710.tinside.irccloud.com) (*.net *.split)
[09:11:15] *** Quits: jbe (~hellother@lysator/root/jbe) (*.net *.split)
[09:11:15] *** Quits: uhu (~uhu@2a01:4f9:c010:1087::2) (*.net *.split)
[09:11:15] *** Quits: mcfrdy (~mcfrdy@user/mcfrdy) (*.net *.split)
[09:11:15] *** Quits: Zal (~Isthmus@user/isveni) (*.net *.split)
[09:11:15] *** Quits: skreech (~skreech@user/skreech) (*.net *.split)
[09:11:15] *** Quits: Artea (~Lufia@artea.com.pt) (*.net *.split)
[09:11:15] *** Quits: tabakhase (tabakhase@user/tabakhase) (*.net *.split)
[09:11:15] *** Quits: gaken (~gaken@user/galen) (*.net *.split)
[09:11:23] *** Joins: jbe (~hellother@lysator/root/jbe)
[09:11:26] *** Joins: skreech (skreech@user/skreech)
[09:11:27] *** Joins: fredrikhl (~fhl@myrsnipa.uio.no)
[09:11:32] *** Joins: gaken (~gaken@user/galen)
[09:11:34] *** Joins: thm (~thomas@fedora/thm)
[09:11:38] *** Joins: holbrode (sid339826@id-339826.tinside.irccloud.com)
[09:11:42] *** Joins: jjhoo (~jahakala@dsl-trebng21-58c18f-56.dhcp.inet.fi)
[09:11:44] *** Joins: tabakhase (tabakhase@user/tabakhase)
[09:11:45] *** Joins: aluria (~aluria@canonical/aluria)
[09:11:46] *** Joins: cyberjunkie (~cyberjunk@wireguard/tunneler/cyberjunkie)
[09:11:47] *** Joins: tris (emptystrin@irc1.lessbroken.org)
[09:11:48] *** Joins: gossie (~gossie@2a10:3781:328:1:e1d:50cc:c868:ca94)
[09:11:50] *** Joins: mboehn (mathias@hh1.nuxis.org)
[09:11:53] *** Joins: Duckle (~Duckle@user/duckle)
[09:11:55] *** Joins: mcfrdy (~mcfrdy@user/mcfrdy)
[09:12:01] *** Joins: EWDurbin (sid38710@id-38710.tinside.irccloud.com)
[09:12:08] *** Joins: gbear605 (~gbear605@user/gbear605)
[09:12:09] *** Joins: onu (~onufn@gibbs.uberspace.de)
[09:12:13] *** Joins: JerryXiao (~JerryXiao@user/jerryxiao)
[09:12:17] *** Joins: crackerjack (crackerjac@pear.bnc4free.com)
[09:12:28] *** Joins: sabet (~sabet@user/sabet)
[09:12:55] *** Joins: neil (~kneel@rockylinux/infra/neil)
[09:13:12] *** Joins: flyback- (~flyback@2601:540:8201:1e60:8918:21eb:b633:ee62)
[09:14:17] *** Quits: flyback (~flyback@2601:540:8201:1e60:404a:1b0c:a28:6844) (Ping timeout: 245 seconds)
[09:16:57] *** Quits: flyback- (~flyback@2601:540:8201:1e60:8918:21eb:b633:ee62) (Client Quit)
[09:16:58] *** Joins: strive (~strive@user/strive)
[09:17:16] *** Joins: flyback (~flyback@2601:540:8201:1e60:8918:21eb:b633:ee62)
[09:19:12] *** Quits: ttree (~ttree0@c-73-239-62-159.hsd1.wa.comcast.net) (Ping timeout: 245 seconds)
[09:27:14] *** Quits: LogicAside (~LogicAsid@user/logicaside) (*.net *.split)
[09:27:14] *** Quits: morgabra (sid500580@user/morgabra) (*.net *.split)
[09:27:14] *** Quits: langdon (~langdon@fedora/langdon) (*.net *.split)
[09:27:14] *** Quits: ZeroKnight (zeroknight@dimensionzero.net) (*.net *.split)
[09:27:14] *** Quits: Classic (~root@user/classic) (*.net *.split)
[09:27:14] *** Quits: veegee (~veegee@ipagstaticip-469c2903-2b07-6dc3-3bc2-98748da5ca77.sdsl.bell.ca) (*.net *.split)
[09:27:14] *** Quits: Inge (~inge@51.15.60.125) (*.net *.split)
[09:27:14] *** Quits: delarge (~v@ctm.linuxers.cl) (*.net *.split)
[09:27:14] *** Quits: jug (~jug@user/jug) (*.net *.split)
[09:27:14] *** Quits: Milos (~Milos@user/milos) (*.net *.split)
[09:27:14] *** Quits: the_rat (~ratto@emily.sorcio.org) (*.net *.split)
[09:27:14] *** Quits: mdk (~mdk@python/psf/mdk) (*.net *.split)
[09:27:14] *** Quits: libussa (~libussa@libussa.net) (*.net *.split)
[09:27:14] *** Quits: chromis (sid150893@tinside.irccloud.com) (*.net *.split)
[09:27:14] *** Quits: KirkMcDonald (~Kirk@python/site-packages/KirkMcDonald) (*.net *.split)
[09:27:14] *** Quits: hexology (~hexology@user/hexology) (*.net *.split)
[09:27:14] *** Quits: hexnewbie (~hexnewbie@user/hexnewbie) (*.net *.split)
[09:27:14] *** Quits: Tuju (~tuju@214-204-50-195.sta.estpak.ee) (*.net *.split)
[09:27:14] *** Quits: asix (~Anders@user/asix) (*.net *.split)
[09:27:14] *** Quits: AM (~techman@82-203-161-159.bb.dnainternet.fi) (*.net *.split)
[09:27:14] *** Quits: {4144} (~{4144}@46.56.64.118) (*.net *.split)
[09:27:14] *** Quits: TFKyle (~kyle@64.201.205.70) (*.net *.split)
[09:27:14] *** Quits: simplicity (~yti@user/simplicity) (*.net *.split)
[09:27:14] *** Quits: cmagina (sid286142@user/cmagina) (*.net *.split)
[09:27:14] *** Quits: ses1984 (~stephanst@128.27.196.35.bc.googleusercontent.com) (*.net *.split)
[09:27:14] *** Quits: petemc (~pete@vps-80fad31a.vps.ovh.net) (*.net *.split)
[09:27:14] *** Quits: _0ne (~one@user/0ne/x-2101768) (*.net *.split)
[09:27:14] *** Quits: lorenzosu (~lorenzosu@user/lorenzosu) (*.net *.split)
[09:27:14] *** Quits: Henry151 (~bishop@user/henry151) (*.net *.split)
[09:27:14] *** Quits: osxtra (~root@136.49.108.80) (*.net *.split)
[09:27:14] *** Quits: treefrob (~treefrob@p2e54235e.dip0.t-ipconnect.de) (*.net *.split)
[09:27:14] *** Quits: t2mkn (~t2mkn@user/t2mkn) (*.net *.split)
[09:27:14] *** Quits: justache (~justache@user/justache) (*.net *.split)
[09:27:14] *** Quits: doc (~doc@user/doc) (*.net *.split)
[09:27:14] *** Quits: coraxx (~cpp@mail.8-pm.com) (*.net *.split)
[09:27:14] *** Quits: drjp (jeanpaul@112-54-174-82.ftth.glasoperator.nl) (*.net *.split)
[09:27:14] *** Quits: Buliarous (~gypsydang@185.207.166.57) (*.net *.split)
[09:27:14] *** Quits: Ninja3047 (~Ninja3047@3047.ninja) (*.net *.split)
[09:27:14] *** Quits: FoodMan_ (~glucose@194.110.13.12) (*.net *.split)
[09:27:14] *** Quits: chowmeined (~chowmeine@user/chowmeined) (*.net *.split)
[09:27:14] *** Quits: shan (shan@cyblog/maintainer/shan) (*.net *.split)
[09:27:14] *** Quits: cacheyourdreams (~cache@user/cacheyourdreams) (*.net *.split)
[09:27:14] *** Quits: Deaygo (~Deaygo@let.deaygo.in) (*.net *.split)
[09:27:14] *** Quits: oisota (~oisota@user/oisota) (*.net *.split)
[09:27:14] *** Quits: whaley (~whaley@159.65.32.34) (*.net *.split)
[09:27:14] *** Quits: zoid (~zoid@user/taxationistheft) (*.net *.split)
[09:27:14] *** Quits: wgwz (~wgwz@45.55.193.150) (*.net *.split)
[09:27:14] *** Quits: Adrixan (~Adrixan@218.72.75.34.bc.googleusercontent.com) (*.net *.split)
[09:27:14] *** Quits: ldlework (~hexeme@user/hexeme) (*.net *.split)
[09:27:14] *** Quits: donofrio (~donofrio@c-68-40-123-74.hsd1.mi.comcast.net) (*.net *.split)
[09:27:14] *** Quits: Pilate (~pilate@pilate.io) (*.net *.split)
[09:27:14] *** Quits: michele (~eraser@user/michele) (*.net *.split)
[09:27:14] *** Quits: glik22 (~glik22@99-36-164-253.lightspeed.snjsca.sbcglobal.net) (*.net *.split)
[09:27:14] *** Quits: slavfox (~slavfox@93.158.232.111) (*.net *.split)
[09:27:14] *** Quits: newdimension (~newdimnes@user/newdimension) (*.net *.split)
[09:27:14] *** Quits: salparadise (~salparadi@129.146.17.140) (*.net *.split)
[09:27:14] *** Quits: marienz (~marienz@libera/staff/marienz) (*.net *.split)
[09:27:14] *** Quits: enkrypt (~enkrypt@user/enkrypt) (*.net *.split)
[09:27:14] *** Quits: kinabalu (~kinabalu@about/java/kinabalu) (*.net *.split)
[09:27:15] *** Quits: OMGOMG (~bobrobert@poppy.ifi.uio.no) (*.net *.split)
[09:27:15] *** Quits: foo (~foo@user/foo/x-8763512) (*.net *.split)
[09:27:15] *** Quits: lgrn_ (~leif@user/lgrn) (*.net *.split)
[09:27:15] *** Quits: Joel (~jjshoe@user/joel) (*.net *.split)
[09:27:15] *** Quits: octav1a (~quassel@173.195.145.98) (*.net *.split)
[09:27:15] *** Quits: operational (~operation@imgonnaf.art) (*.net *.split)
[09:27:15] *** Quits: mage (~julien@orval.bbpf.belspo.be) (*.net *.split)
[09:27:15] *** Quits: Dan39 (~dan@user/dan39) (*.net *.split)
[09:27:15] *** Quits: dzz007 (~dzz007@user/dzz007) (*.net *.split)
[09:27:15] *** Quits: gizmo_ (~gizmo@45.91.125.2) (*.net *.split)
[09:27:15] *** Quits: f8e4 (~user@159.89.21.45) (*.net *.split)
[09:27:15] *** Quits: cryocaustik (~cryocaust@user/cryocaustik) (*.net *.split)
[09:27:15] *** Quits: niko (~niko@libera/staff/niko) (*.net *.split)
[09:27:15] *** Quits: Yamakaja (~yamakaja@user/yamakaja) (*.net *.split)
[09:27:15] *** Quits: hirish (~hirish@ip85.ip-137-74-20.eu) (*.net *.split)
[09:27:15] *** Quits: sud (~sud@user/sud) (*.net *.split)
[09:27:15] *** Quits: achilleas (~ach@user/achilleas) (*.net *.split)
[09:27:15] *** Quits: purplex (~purplex@user/purplex) (*.net *.split)
[09:27:15] *** Quits: MrBurns (~japa@ec2-13-48-124-121.eu-north-1.compute.amazonaws.com) (*.net *.split)
[09:27:15] *** Quits: hodapp (~mawson@user/hodapp) (*.net *.split)
[09:27:15] *** Quits: OliverUK (~opashley@70.138.105.34.bc.googleusercontent.com) (*.net *.split)
[09:27:15] *** Quits: grateful (~grateful@user/grateful) (*.net *.split)
[09:27:15] *** Quits: Brocker (~NoBody@user/brocker) (*.net *.split)
[09:27:21] *** Joins: OMGOMG (~bobrobert@poppy.ifi.uio.no)
[09:27:24] *** Joins: Buliarous (~gypsydang@185.207.166.57)
[09:27:25] *** Joins: foo (~foo@user/foo/x-8763512)
[09:27:28] *** Joins: lexx (~scsi@78.157.70.196)
[09:27:30] *** Joins: Inge_ (~inge@51.15.60.125)
[09:27:30] *** Joins: morgabra (sid500580@user/morgabra)
[09:27:32] *** Joins: marienz (~marienz@libera/staff/marienz)
[09:27:34] *** Joins: chromis (sid150893@id-150893.tinside.irccloud.com)
[09:27:42] *** Joins: oisota (~oisota@user/oisota)
[09:27:47] *** Joins: Deaygo (~Deaygo@let.deaygo.in)
[09:27:48] *** Joins: cmagina (sid286142@user/cmagina)
[09:28:12] *** Joins: kinabalu (~kinabalu@about/java/kinabalu)
[09:28:20] *** Joins: chowmeined (~chowmeine@user/chowmeined)
[09:28:20] *** Joins: newdimension (~newdimnes@user/newdimension)
[09:28:22] *** Joins: cacheyourdreams (~cache@user/cacheyourdreams)
[09:28:22] *** Joins: jug (~jug@user/jug)
[09:28:23] *** Joins: cryocaustik (~cryocaust@user/cryocaustik)
[09:28:25] *** Joins: {4144} (~{4144}@46.56.64.118)
[09:28:25] *** Joins: treefrob (~treefrob@p2e54235e.dip0.t-ipconnect.de)
[09:28:29] *** Joins: dzz007 (~dzz007@user/dzz007)
[09:28:39] *** Joins: purplex (~purplex@user/purplex)
[09:28:40] *** Joins: CapnKernel (foobar@gromit.mixdown.ca)
[09:28:40] *** Joins: achilleas (~ach@user/achilleas)
[09:28:42] *** Joins: ZeroKnight (zeroknight@dimensionzero.net)
[09:28:42] *** Joins: libussa (~libussa@libussa.net)
[09:28:45] *** Joins: hexology (~hexology@user/hexology)
[09:28:45] *** Joins: Joel (~jjshoe@user/joel)
[09:28:45] *** Joins: hirish (~hirish@ip85.ip-137-74-20.eu)
[09:28:45] *** Joins: the_rat (~ratto@emily.sorcio.org)
[09:28:45] *** Joins: Ninja3047 (~Ninja3047@3047.ninja)
[09:28:46] *** Joins: hexeme (~hexeme@user/hexeme)
[09:28:47] *** Joins: Milos (~Milos@user/milos)
[09:28:49] *** Joins: _0ne (~one@user/0ne/x-2101768)
[09:28:50] *** Joins: michele (~eraser@user/michele)
[09:28:52] *** Joins: justache (~justache@user/justache)
[09:28:57] *** Joins: zoid (~zoid@user/taxationistheft)
[09:29:02] *** Joins: f8e4 (~user@159.89.21.45)
[09:29:02] *** Joins: doc (~doc@user/doc)
[09:29:06] *** Joins: sud (~sud@user/sud)
[09:29:14] *** Joins: operational (~operation@imgonnaf.art)
[09:29:18] *** Joins: carlesso (~carlesso@c-107-3-160-43.hsd1.ca.comcast.net)
[09:29:20] *** Joins: jessicant (~jessica@static.172.234.251.148.clients.your-server.de)
[09:29:21] *** Joins: whaley (~whaley@159.65.32.34)
[09:29:39] *** Joins: langdon (~langdon@fedora/langdon)
[09:29:40] *** Joins: LogicAside (~LogicAsid@user/logicaside)
[09:30:03] *** Joins: wgwz (~wgwz@45.55.193.150)
[09:30:26] *** Quits: c10l (~c10l@89.34.167.207) (Quit: The Lounge - https://thelounge.chat)
[09:30:26] *** Joins: stranac (~stranac@195.29.239.126)
[09:30:55] *** Joins: Yamakaja (~yamakaja@user/yamakaja)
[09:31:00] *** Joins: c10l (~c10l@89.34.167.207)
[09:31:01] *** Joins: shan (shan@cyblog/maintainer/shan)
[09:31:08] *** Joins: slavfox (~slavfox@ipv4-93-158-232-111.net.internetunion.pl)
[09:32:28] *** Joins: MrBurns (~japa@ec2-13-48-124-121.eu-north-1.compute.amazonaws.com)
[09:32:31] *** Joins: KirkMcDonald (~Kirk@python/site-packages/KirkMcDonald)
[09:32:35] *** Joins: asix (~Anders@user/asix)
[09:33:01] *** Joins: Henry151 (~bishop@user/henry151)
[09:33:24] *** Joins: dvx (~dvx@185.63.97.64)
[09:33:31] *** Joins: veegee (~veegee@ipagstaticip-469c2903-2b07-6dc3-3bc2-98748da5ca77.sdsl.bell.ca)
[09:34:55] *** Quits: carlesso (~carlesso@c-107-3-160-43.hsd1.ca.comcast.net) (Ping timeout: 252 seconds)
[09:36:43] *** Joins: upsala (~zcb@185.213.155.160)
[09:39:23] *** Joins: maryo (~Maryo@user/maryo)
[09:39:49] *** Quits: maryo (~Maryo@user/maryo) (Client Quit)
[09:45:57] *** Joins: ravan_ (~ravan@user/ravan)
[09:46:38] *** Quits: MrBungle (~MrBungle@2604:3d08:1788:dc00:911a:795:c2cc:9f2c) (Read error: Connection reset by peer)
[09:48:17] *** Inge_ is now known as Inge
[09:48:48] *** Quits: Gudddu (~Guddu@190.84.88.92) (Quit: Leaving)
[09:49:20] *** Joins: AM (~techman@82-203-161-159.bb.dnainternet.fi)
[09:50:16] *** Quits: CyberShadow (vladimir@89.28.117.31) (Quit: CREO ERGO SVM)
[09:50:22] *** Joins: damonlynch (~ngaio@2601:245:c700:2c06:7891:42e2:71d2:bf03)
[09:51:19] *** Joins: lalitmee__ (~lalitmee@180.94.32.116)
[09:52:15] *** Quits: cjb (~cjb@user/cjb) (Quit: rcirc on GNU Emacs 28.0.50)
[09:53:47] *** Quits: lalitmee_ (~lalitmee@180.94.33.3) (Ping timeout: 245 seconds)
[09:56:52] *** Joins: ttree (~ttree0@c-73-239-62-159.hsd1.wa.comcast.net)
[09:57:29] *** Joins: niko (~niko@libera/staff/niko)
[10:01:26] *** Joins: mIk3_08 (~Thunderbi@user/mik3-08/x-2852566)
[10:06:39] *** Joins: AnySomebody (~AnySomebo@p200300c2871c5e415ced088c069ad00e.dip0.t-ipconnect.de)
[10:06:43] *** Quits: Confusioned (~AnySomebo@p200300c2871c5e45e0b9860ece0477f8.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[10:06:55] *** Joins: arseru (uid515527@user/arseru)
[10:06:57] *** Joins: civillian (~nick@124-148-112-110.dyn.iinet.net.au)
[10:08:02] *** Quits: AlanMD (~AlanMD@193.105.140.131) (Read error: Connection reset by peer)
[10:08:11] *** Joins: raisen (~weechat@cpe-108-185-219-72.socal.res.rr.com)
[10:08:58] *** Joins: CyberShadow (vladimir@89.28.117.31)
[10:10:34] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 252 seconds)
[10:12:21] *** Joins: YuGiOhJCJ (~YuGiOhJCJ@gateway/tor-sasl/yugiohjcj)
[10:12:29] *** Joins: fikran (~fikran@user/fikran)
[10:13:44] *** Joins: AlanMD (~AlanMD@193.105.140.131)
[10:16:04] *** Joins: slavaqq (~slavaqq@sdmail.sdserver.cz)
[10:18:21] *** Joins: simplicity (~yti@user/simplicity)
[10:19:51] *** Joins: mexen (uid495612@user/mexen)
[10:20:20] *** Joins: lalitmee_ (~lalitmee@180.94.32.83)
[10:21:01] *** Joins: jetchisel (jetchisel@user/jetchisel)
[10:22:46] *** Quits: lalitmee__ (~lalitmee@180.94.32.116) (Ping timeout: 252 seconds)
[10:28:49] *** Joins: zln (~zln@c80-217-230-193.bredband.tele2.se)
[10:29:47] *** Joins: hexnewbie (~hexnewbie@user/hexnewbie)
[10:30:00] *** Quits: pyeverything (~pyeveryth@c-66-31-107-137.hsd1.ma.comcast.net) (Remote host closed the connection)
[10:30:32] *** Joins: pyeverything (~pyeveryth@c-66-31-107-137.hsd1.ma.comcast.net)
[10:35:40] *** Quits: pyeverything (~pyeveryth@c-66-31-107-137.hsd1.ma.comcast.net) (Ping timeout: 240 seconds)
[10:36:47] *** Joins: txtsd (~txtsd@user/txtsd)
[10:37:49] *** Quits: Mogget (Mogget@vogon.moshwire.com) (Quit: WeeChat 2.7.1)
[10:39:41] *** Quits: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net) (Remote host closed the connection)
[10:39:55] *** Joins: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net)
[10:41:52] *** Joins: ubert (~Thunderbi@91.141.54.165.wireless.dyn.drei.com)
[10:42:28] *** Quits: davor (~davor@user/davor) (Ping timeout: 252 seconds)
[10:44:16] *** Joins: davor (~davor@user/davor)
[10:45:25] *** Joins: Gurkenglas (~Gurkengla@dslb-090-186-104-237.090.186.pools.vodafone-ip.de)
[10:46:13] *** Joins: Mogget (Mogget@vogon.moshwire.com)
[10:46:20] *** Quits: seednode (~seednode@user/seednode) (Quit: Nihil supernum.)
[10:46:26] *** Quits: tgamblin (~tgamblin@2607:fea8:c29d:d7c0:fa88:8bc5:c0d2:27cc) (Ping timeout: 250 seconds)
[10:46:53] *** Joins: seednode (~seednode@user/seednode)
[10:48:36] *** Joins: carl- (~carl-@185.103.188.131)
[10:48:57] *** Quits: mIk3_08 (~Thunderbi@user/mik3-08/x-2852566) (Remote host closed the connection)
[10:49:10] *** Joins: mIk3_08 (~Thunderbi@user/mik3-08/x-2852566)
[10:49:55] *** Joins: gulzar (~gulzar@123.201.100.47)
[10:50:17] *** Joins: winterflaw (~winterfla@gateway/tor-sasl/winterflaw)
[10:52:08] *** Joins: gusto (~Augustus@109.255.100.54)
[10:54:26] *** Quits: mIk3_08 (~Thunderbi@user/mik3-08/x-2852566) (Remote host closed the connection)
[10:54:29] *** Quits: leduyquang753 (~leduyquan@user/leduyquang753) (Quit: Gotta go, see you guys later.)
[10:54:40] *** Joins: mIk3_08 (~Thunderbi@user/mik3-08/x-2852566)
[10:55:37] *** Joins: carl-- (~carl-@185.103.188.130)
[10:56:13] *** Quits: somlis (~somlis@user/somlis) (Ping timeout: 252 seconds)
[10:57:01] *** Joins: fanis30 (~fanis30@adsl-142.37.6.0.tellas.gr)
[10:57:34] *** Joins: manti7 (~manti7@176.10.104.94)
[10:57:58] *** Quits: carl- (~carl-@185.103.188.131) (Ping timeout: 252 seconds)
[10:58:10] *** Quits: ubert (~Thunderbi@91.141.54.165.wireless.dyn.drei.com) (Ping timeout: 260 seconds)
[11:02:42] *** Quits: lexx (~scsi@78.157.70.196) (Quit: WeeChat 2.3)
[11:04:11] *** Joins: minip (~minip@user/minip)
[11:04:32] *** Joins: p-i- (~Ohmu@223.206.69.159)
[11:04:35] *** Joins: iflema (~ian@user/iflema)
[11:05:31] *** Quits: Fiji (~Fiji@user/fiji) (Quit: Leaving)
[11:05:50] *** Joins: lalitmee__ (~lalitmee@180.94.32.179)
[11:07:17] *** Quits: p-i-_ (~Ohmu@mx-ll-223.206.69-159.dynamic.3bb.co.th) (Ping timeout: 252 seconds)
[11:08:34] *** Quits: lalitmee_ (~lalitmee@180.94.32.83) (Ping timeout: 265 seconds)
[11:09:08] *** Joins: jarthur_ (~jarthur@2603-8080-1540-002d-b82e-8865-a976-d9c2.res6.spectrum.com)
[11:11:37] *** Quits: jarthur (~jarthur@2603-8080-1540-002d-9946-f19a-5329-6a99.res6.spectrum.com) (Ping timeout: 252 seconds)
[11:11:52] *** Joins: Derailed (~tom@ec2-13-211-184-100.ap-southeast-2.compute.amazonaws.com)
[11:13:20] *** Quits: ttree (~ttree0@c-73-239-62-159.hsd1.wa.comcast.net) (Ping timeout: 260 seconds)
[11:19:00] *** Quits: kickingvegas (~cchoi@c-24-5-40-20.hsd1.ca.comcast.net) (Quit: leaving)
[11:20:31] *** Joins: kosh (~kosh@user/kosh)
[11:21:14] *** Joins: swensson (~swensson@165.225.193.162)
[11:25:30] *** Quits: renrelkha (~renrelkha@user/renrelkha) (Quit: bye)
[11:27:21] *** Joins: renrelkha (~renrelkha@user/renrelkha)
[11:28:07] *** Quits: Lando-SpacePimp (~Lando@user/lando-spacepimp) (Ping timeout: 252 seconds)
[11:28:29] *** Joins: Wuniu (~Thunderbi@user/wuniu)
[11:30:08] *** Quits: Wuniu (~Thunderbi@user/wuniu) (Client Quit)
[11:30:37] *** Joins: Wuniu (~Thunderbi@user/wuniu)
[11:33:51] *** Joins: rendar (~rendar@user/rendar)
[11:36:00] *** Joins: pycode (~pycode@2001:b07:5d28:551:5e39:5b85:ac42:f509)
[11:38:38] *** Quits: Wuniu (~Thunderbi@user/wuniu) (Ping timeout: 252 seconds)
[11:38:57] *** Quits: dba (uid502594@id-502594.stonehaven.irccloud.com) (Quit: Connection closed for inactivity)
[11:40:36] *** Joins: pocketprotector (~pocketpro@inet-2606-b400-8824-e010--52.oracle-ocna.com)
[11:43:18] *** Joins: NeoCore (~neocore@195.200.221.189)
[11:44:06] *** Quits: mnemonic (~semeion@user/semeion) (Quit: WeeChat 3.2)
[11:46:29] *** Joins: dreadedfrog (~user@193.160.129.69)
[11:49:34] *** Quits: pocketprotector (~pocketpro@inet-2606-b400-8824-e010--52.oracle-ocna.com) (Remote host closed the connection)
[11:49:57] *** Quits: niko (~niko@libera/staff/niko) (Quit: i will be back)
[11:50:10] *** Quits: gulzar (~gulzar@123.201.100.47) (Ping timeout: 240 seconds)
[11:50:30] *** Joins: o (~niko@libera/staff/niko)
[11:51:11] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[11:52:50] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[11:53:20] *** Joins: mat001 (~mat001@c-73-223-64-126.hsd1.ca.comcast.net)
[11:56:14] *** Quits: mat001_ (~mat001@c-73-223-64-126.hsd1.ca.comcast.net) (Ping timeout: 252 seconds)
[11:56:59] *** Joins: y1n (~y1n@84-115-65-139.wifi.dynamic.surfer.at)
[11:57:47] *** Joins: anandprabhu (~anandprab@91.73.233.2)
[11:58:15] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Ping timeout: 260 seconds)
[12:01:00] *** o is now known as niko
[12:03:25] *** Quits: kosh (~kosh@user/kosh) (Ping timeout: 252 seconds)
[12:03:48] *** Joins: ayustae (Thunderbir@gateway/vpn/protonvpn/ayustae)
[12:05:10] *** Quits: seednode (~seednode@user/seednode) (Quit: Nihil supernum.)
[12:05:33] *** Joins: seednode (~seednode@user/seednode)
[12:07:03] *** Joins: Wuniu (~Thunderbi@user/wuniu)
[12:07:04] *** Joins: theprophet (~theprophe@85.114.228.184)
[12:07:09] *** Joins: kosh (~kosh@user/kosh)
[12:13:13] *** Joins: Mattiaslndstrm (~Mattiasln@c188-148-207-108.bredband.tele2.se)
[12:14:36] *** Joins: xrogaan (~xrogaan@user/xrogaan)
[12:14:43] *** Quits: Betal (~Betal@user/betal) (Quit: WeeChat 3.2)
[12:15:54] *** Quits: ravan_ (~ravan@user/ravan) (Read error: Connection reset by peer)
[12:16:33] *** Quits: arseru (uid515527@user/arseru) (Quit: Connection closed for inactivity)
[12:16:36] *** Joins: ravan_ (~ravan@user/ravan)
[12:16:45] *** Joins: vats (~vats@180.149.226.8)
[12:19:50] *** Joins: Norore (~weechat@balder.ens.fr)
[12:20:26] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 252 seconds)
[12:22:05] *** Quits: Mattiaslndstrm (~Mattiasln@c188-148-207-108.bredband.tele2.se) (Ping timeout: 252 seconds)
[12:22:38] *** Joins: fikran (~fikran@user/fikran)
[12:23:30] *** Quits: ravan_ (~ravan@user/ravan) (Ping timeout: 265 seconds)
[12:23:49] *** Joins: mIk3_09 (~Thunderbi@user/mik3-08/x-2852566)
[12:23:58] *** Quits: mIk3_08 (~Thunderbi@user/mik3-08/x-2852566) (Ping timeout: 265 seconds)
[12:23:59] *** mIk3_09 is now known as mIk3_08
[12:27:06] *** Quits: YuGiOhJCJ (~YuGiOhJCJ@gateway/tor-sasl/yugiohjcj) (Quit: YuGiOhJCJ)
[12:28:11] *** Joins: PJBoy (~PJBoy@user/pjboy)
[12:28:41] *** Quits: Wuniu (~Thunderbi@user/wuniu) (Ping timeout: 252 seconds)
[12:29:16] *** Quits: kosh (~kosh@user/kosh) (Ping timeout: 252 seconds)
[12:29:17] *** Quits: luna-is-here_ (~quassel@2a02:908:f761:2a3c::a) (Ping timeout: 245 seconds)
[12:30:26] *** Quits: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net) (Remote host closed the connection)
[12:30:40] *** Joins: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net)
[12:32:02] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[12:35:48] *** Joins: tempate (~alpha@user/tempate)
[12:35:58] *** Joins: hendursa1 (~weechat@user/hendursaga)
[12:36:44] <tempate> Hello. I'm having trouble getting the module regex to work in Jupyter Notebooks. It says it can't find it while pip says it's installed. Can someone help me out?
[12:37:33] *** Joins: cth (~Cthulchu@193.194.107.250)
[12:38:15] *** Joins: iomari891 (~iomari891@105.112.138.38)
[12:38:27] <Repiphany> What import statement are you trying to run
[12:39:09] <tempate> import regex as re
[12:39:10] *** Quits: y1n (~y1n@84-115-65-139.wifi.dynamic.surfer.at) (Ping timeout: 252 seconds)
[12:39:12] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 276 seconds)
[12:39:45] <Repiphany> Are you running jupyter in a venv and/or what kernel do you have selected
[12:40:53] <tempate> I'm running Jupyter in this localhost thing (it's my first time using Jupyter so I don't really know much) and I don't know what kernel it's running
[12:40:58] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[12:41:12] <habnabit_> tempate, how did you install jupyter, and how did you install regex?
[12:41:15] <tempate> ipykernel, apparently
[12:41:19] *** Joins: adanwan (~adanwan@gateway/tor-sasl/adanwan)
[12:41:40] *** Quits: strive (~strive@user/strive) (Remote host closed the connection)
[12:41:49] <tempate> habnabit_: jupyter with snap and regex with pip
[12:42:19] <habnabit_> tempate, snaps are isolated from the rest of your system, aren't they?
[12:42:28] <death916> snap jupyter probably in some weird namespace and cant see pip
[12:42:37] <death916> -installed files
[12:43:30] <tempate> so how should I install it?
[12:43:33] *** Quits: anandprabhu (~anandprab@91.73.233.2) (Quit: Leaving)
[12:43:52] <death916> distro repo if it has it probably
[12:43:54] <habnabit_> tempate, well.. the snap version might have specific instructions for how to install things
[12:44:21] <tempate> actually, I only installed project jupyter with snap; I installed jupyter notebooks through the package manager
[12:44:46] <habnabit_> tempate, but you still used two different things to install regex and notebook
[12:45:04] <tempate> you want me to install jupyter through pip?
[12:45:06] <tempate> I can do that
[12:45:33] <habnabit_> tempate, if it's all in the same venv, it can all see each other
[12:45:38] <habnabit_> tempate, venvs make this prety trivial
[12:45:53] <tempate> so how can I solve the issue?
[12:46:09] <habnabit_> tempate, install into a venv with pip
[12:46:52] *** Joins: LucaTM (~LucaTM@user/lucatm)
[12:47:12] <tempate> the thing is I want some visual way to deal with jupyter anyway
[12:47:18] <tempate> not just through the terminal or whatever
[12:47:32] <habnabit_> tempate, ok?
[12:47:33] <tempate> I spent hours trying to make it work in vscode with no success
[12:47:51] <habnabit_> tempate, do you want jupyter always running or something?
[12:48:02] <habnabit_> tempate, it's already a visual thing, so i'm not sure what you're asking for
[12:48:37] <tempate> no, I don't want it to be always running
[12:49:37] <death916> jupyter works pretty flawlessly in vscode usually. just activate venv in code by selecting the interpreter that has whatever your working on and jupyter installed
[12:50:31] <tempate> death916: well, it's been a nightmare for me; everyone says just CTRL+SHIFT+P and select Python interpreter or whatever, but it doesn't show on my system
[12:50:48] <death916> what specifically doesnt show
[12:51:13] <death916> the interpreter you want?
[12:51:15] <death916> or any
[12:51:43] <death916> if its a venv itll be inside a .venv folder
[12:52:03] <rendar> it seems i can't use `except asyncio.CancelledError` within an `async with` block, look at this -> https://bpa.st/W4HQ
[12:52:07] <rendar> any solutions?
[12:52:12] *** Quits: mohabaks (~mohabaks@gateway/tor-sasl/mohabaks) (Ping timeout: 276 seconds)
[12:52:18] *** Quits: swensson (~swensson@165.225.193.162) (Quit: Client closed)
[12:52:24] <tempate> death916: well, nothing shows: I look up for python after CTRL+SHIFT+P and there's nothing to choose from
[12:52:51] <habnabit_> rendar, "can't"? says who?
[12:53:09] <tempate> death916: I don't think it even recognizes the file as a notebook
[12:53:14] <rendar> habnabit_, well, how can i do that? removing the `finally` block?
[12:53:29] <habnabit_> rendar, how can you do what? your code looks fine
[12:53:41] *** Quits: jinsun (~quassel@user/jinsun) (Read error: Connection reset by peer)
[12:53:50] <death916> tempate:  interpreter will usually be a python binary where your project directory is, then it can open the noteboook in code
[12:53:51] <rendar> habnabit_, the latest lines are fine indeed, but they don't use `async with` block
[12:53:55] <habnabit_> rendar, so?
[12:54:15] <rendar> habnabit_, i just wanted to use an `async with` block because i think it's a cleaner solution
[12:54:22] <rendar> but maybe you can't always use it
[12:54:40] <death916> if your not using a venv look up how and install jupyter inside one and them move notebook and prject files inside, then open in code, and select python binary insde the .venv folder
[12:54:43] <death916> tempate:
[12:54:44] <habnabit_> rendar, ok. you can't use `with` or `async with` if you want anything other than a try block with exactly one finally clause that you don't control
[12:54:55] <habnabit_> rendar, that's all that with blocks do
[12:55:12] *** Joins: DnzAtWrk (~DnzAtWrk@mobile-access-5673bf-42.dhcp.inet.fi)
[12:55:14] <rendar> ok right
[12:55:28] <tempate> death916: alright, let me try
[12:55:28] *** Quits: DnzAtWrk (~DnzAtWrk@mobile-access-5673bf-42.dhcp.inet.fi) (Read error: Connection reset by peer)
[12:55:42] <supakeen> Mrm, I was certain `anext()` existed for consuming one from an async iterator. Do I have to call __anext__?
[12:55:57] <habnabit_> supakeen, i think anext is in 3.10?
[12:56:05] <supakeen> Ah, that'd be why :)
[12:56:28] <hexnewbie> Those should be easy to backport
[12:57:25] *** Joins: jinsun (~quassel@user/jinsun)
[12:57:27] *** Joins: jinsun__ (~quassel@user/jinsun)
[12:58:11] *** Quits: hnOsmium0001 (uid453710@id-453710.stonehaven.irccloud.com) (Quit: Connection closed for inactivity)
[12:58:38] <tempate> death916: it worked! thank you very much
[12:58:40] *** Joins: DnzAtWrk (~DnzAtWrk@mobile-access-5673bf-42.dhcp.inet.fi)
[12:58:45] *** Joins: niluje (~niluje@2a05:d012:f91:1700:6975:ef0b:def6:3bdd)
[12:58:45] *** Joins: Ergo^ (~ergo@91.238.59.144)
[12:59:31] <death916> your welcome good luck
[12:59:39] *** Quits: Derailed (~tom@ec2-13-211-184-100.ap-southeast-2.compute.amazonaws.com) (Quit: ZNC - https://znc.in)
[13:00:27] <rendar> if i'm writing a console application, is very common to have different routines to log something on the screen, e.g. typed unknown command, then routines which sends more serious log to python logging system, right?
[13:03:20] *** Joins: plastico (~plastico@neomutt/plastico)
[13:04:00] *** Joins: Thanatos (~Thanatos@ec2-54-148-37-124.us-west-2.compute.amazonaws.com)
[13:04:25] *** Joins: Derailed (~tom@ec2-13-211-184-100.ap-southeast-2.compute.amazonaws.com)
[13:05:46] *** Joins: PaddyF (~PaddyF@user/paddyf)
[13:07:35] *** Joins: ravan (~ravan@user/ravan)
[13:07:48] *** Joins: lalitmee_ (~lalitmee@180.94.32.247)
[13:09:40] *** Quits: cyphase (~cyphase@user/cyphase) (Ping timeout: 240 seconds)
[13:10:29] *** Quits: lalitmee__ (~lalitmee@180.94.32.179) (Ping timeout: 252 seconds)
[13:10:36] <zln> hi guys, I'm little confused by this https://pasteboard.co/Kjto0mb.png
[13:11:12] <zln> shouldn't both objects change to "Tesla" since brand is class var?
[13:12:12] <habnabit_> zln, nope. your assignment sets an instance attribute, not a class attribute
[13:12:42] <rendar> zln, you're modifying an instance, not a class
[13:12:46] <zln> habnabit_: ah, thought I needed self to make it instance var
[13:12:57] <zln> how can I make it so both changes?
[13:13:07] <zln> when one is changed?
[13:13:07] <rendar> zln, if you do Car.brand = "Volvo"
[13:13:11] <rendar> it will change to both
[13:13:19] <zln> in class?
[13:13:30] <habnabit_> zln, 'self' is just a name for 'the current object'. the name is 'my_first_car' but the rules are exactly the same
[13:13:41] <habnabit_> zln, the name 'self' carries no magic
[13:14:00] <zln> alright, why do one use self? is it for methods?
[13:14:20] <pycode> hello, is this the correct way to load a module having its name? new_module = __import__(modulename)  ?
[13:14:31] <pycode> (its name as string obviously)
[13:14:42] <rendar> zln, check this out
[13:14:42] <rendar> <pycode> (its name as string ob
[13:14:51] <rendar> zln, check this out https://bpa.st/QY5Q
[13:14:56] *** Quits: jdmark (~jdmark@67.8.137.130) (Read error: Connection reset by peer)
[13:14:58] <pycode> rendar, ?
[13:15:05] <rendar> pycode, sorry, wrong button
[13:15:17] <habnabit_> zln, 'why' isn't a very good question. how about 'when does one use self?' -- the answer to that is "as the first parameter of every `def` inside a `class`"
[13:15:29] <rendar> zln, just check this out to understand it https://bpa.st/QY5Q
[13:15:44] *** Joins: gitesh (uid423739@id-423739.ilkley.irccloud.com)
[13:16:59] <zln> thank you guys, for helping me sorting it out :D
[13:17:27] <rendar> zln, see that code
[13:17:43] <rendar> zln, can you tell me why in the last line, c2.brand is Toyota?
[13:18:40] *** Joins: Falc (~Falc@193.191.206.243)
[13:19:36] *** Joins: Elzington_ (~Elzington@68.235.43.28)
[13:19:39] <zln> because you never reassigned that objects brand to another str object?
[13:20:36] *** Joins: mozgalom (~mozgalom@IPnet-gw.157.157.97.111.simnet.is)
[13:20:54] <zln> c2 still points to the class brand but c1 refers to another str object?
[13:21:54] *** Quits: dre (~dre@2001:8003:c932:c301:693b:b827:4df9:b3e4) (Quit: Leaving)
[13:22:22] *** Quits: Elzington (~Elzington@static-68-235-44-10.cust.tzulo.com) (Ping timeout: 256 seconds)
[13:23:11] *** Joins: __that__ (~Guest43@195.59.68.214)
[13:23:14] <__that__> Hi all
[13:23:25] <rendar> zln, yes
[13:23:31] <rendar> zln, exactly
[13:24:07] <zln> I see, thank you for untangling my brain :D
[13:24:30] <rendar> zln, when you assign an attribute to an instance, it will go to the instance's __dict__ dict, e.g. c1.__dict__, when you assign it to a class it will go to the class' dict __dict__, e.g. Car.__dict__
[13:25:12] <zln> ah! much clearer now
[13:25:43] <rendar> zln, glad to help! see? https://bpa.st/UDOA
[13:34:17] *** Quits: rapier (~marcos@170.233.159.1) (Ping timeout: 245 seconds)
[13:36:10] *** Quits: Affliction (affliction@user/affliction) (Remote host closed the connection)
[13:38:58] *** Quits: DnzAtWrk (~DnzAtWrk@mobile-access-5673bf-42.dhcp.inet.fi) (Read error: Connection reset by peer)
[13:40:02] *** Quits: mavhq (~quassel@mapp-14-b2-v4wan-161519-cust401.vm15.cable.virginm.net) (Quit: http://quassel-irc.org - Chat comfortably. Anywhere.)
[13:40:21] *** Joins: mavhq (~quassel@mapp-14-b2-v4wan-161519-cust401.vm15.cable.virginm.net)
[13:40:33] <Dev0n> <habnabit_> Dev0n, (also, use os.environ) - hey, any reason why I should use os.environ instead? I thought internally os.getenv used that anyway?
[13:41:01] *** Joins: DnzAtWrk (~DnzAtWrk@mobile-access-5673bf-42.dhcp.inet.fi)
[13:42:01] <habnabit_> Dev0n, os.environ provides a more consistent/unified interface
[13:42:56] *** Quits: vats (~vats@180.149.226.8) (Ping timeout: 252 seconds)
[13:43:06] <Dev0n> habnabit_, gotcha, thanks
[13:44:03] <hexnewbie> Dev0n: The internal implementation in the past was that os.environ used os.getenv/os.setenv, as opposed the other way round, so os.environ did everything you needed, and the latter did not.
[13:44:11] *** Joins: Affliction (affliction@user/affliction)
[13:44:16] <habnabit_> yep
[13:44:27] <Dev0n> ahh ok
[13:44:39] <habnabit_> that too
[13:45:31] *** Joins: Mattiaslndstrm (~Mattiasln@c188-148-207-108.bredband.tele2.se)
[13:49:19] *** Quits: DnzAtWrk (~DnzAtWrk@mobile-access-5673bf-42.dhcp.inet.fi) (Read error: Connection reset by peer)
[13:49:34] *** Quits: asix (~Anders@user/asix) (Ping timeout: 252 seconds)
[13:50:26] *** Joins: DnzAtWrk (~DnzAtWrk@mobile-access-5673bf-42.dhcp.inet.fi)
[13:50:58] *** Quits: slavaqq (~slavaqq@sdmail.sdserver.cz) (Quit: Client closed)
[13:52:35] *** Joins: somlis (~somlis@user/somlis)
[13:54:03] *** Joins: Mattiasl_ (~Mattiasln@c188-148-207-108.bredband.tele2.se)
[13:54:59] *** Quits: Falc (~Falc@193.191.206.243) (Quit: Leaving)
[13:55:19] *** Quits: Mattiaslndstrm (~Mattiasln@c188-148-207-108.bredband.tele2.se) (Ping timeout: 265 seconds)
[13:55:36] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[13:56:32] <pycode> what is the correct way to load a module having its name?
[13:56:52] <habnabit_> pycode, importlib.import_module
[13:57:35] <pycode> habnabit_, can i do it with submodules too?
[13:57:42] <pycode> import_module('a.b.my_module')
[13:57:43] <pycode> ?
[13:57:47] <habnabit_> pycode, did you try it?
[13:58:06] <pycode> you are right... i need to try before ask
[13:58:08] <pycode> grr sorry
[13:58:16] *** Quits: Linux77 (~Linux7_7@186.233.182.237) (Ping timeout: 252 seconds)
[13:58:23] *** Joins: Linux77 (~Linux7_7@186.233.182.237)
[13:58:28] <pycode> yes it works :)
[13:59:04] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[13:59:13] *** Joins: ice9 (~ice9@user/ice9)
[14:00:14] *** Joins: Mattiaslndstrm (~Mattiasln@c188-148-207-108.bredband.tele2.se)
[14:00:32] *** Quits: Mattiasl_ (~Mattiasln@c188-148-207-108.bredband.tele2.se) (Ping timeout: 252 seconds)
[14:00:46] *** jpds1 is now known as jpds
[14:02:10] *** Quits: promey (~Promeys@gateway/tor-sasl/promey) (Remote host closed the connection)
[14:02:13] *** Quits: arti (~arti@2001:bb8:4008:2020::f) (Quit: No Ping reply in 180 seconds.)
[14:02:37] *** Joins: promey (~Promeys@gateway/tor-sasl/promey)
[14:03:28] *** Joins: arti (~arti@2001:bb8:4008:2020::f)
[14:03:47] *** Joins: asix (~Anders@user/asix)
[14:04:13] *** Quits: minip (~minip@user/minip) (Remote host closed the connection)
[14:04:40] *** Joins: Mattiasl_ (~Mattiasln@c188-148-207-108.bredband.tele2.se)
[14:04:40] *** Quits: __that__ (~Guest43@195.59.68.214) (Quit: Client closed)
[14:04:56] *** Quits: Mattiaslndstrm (~Mattiasln@c188-148-207-108.bredband.tele2.se) (Ping timeout: 252 seconds)
[14:05:10] *** Quits: audio (~audio@2603-8081-1801-3bb5-92e1-977b-0879-14f5.res6.spectrum.com) (Ping timeout: 240 seconds)
[14:08:10] *** Joins: amahl (~amahl@dsl-jklbng12-54fbca-64.dhcp.inet.fi)
[14:09:08] *** Joins: Mattiaslndstrm (~Mattiasln@c188-148-207-108.bredband.tele2.se)
[14:09:17] *** Joins: Artea (~Lufia@artea.com.pt)
[14:09:20] *** Quits: Mattiasl_ (~Mattiasln@c188-148-207-108.bredband.tele2.se) (Ping timeout: 252 seconds)
[14:10:19] *** Joins: Mattiasl_ (~Mattiasln@c188-148-207-108.bredband.tele2.se)
[14:13:07] *** Joins: Bronto22 (~mennoh@2a02:a46b:4db0:1:5604:a6ff:fe37:3044)
[14:13:41] *** Quits: Mattiaslndstrm (~Mattiasln@c188-148-207-108.bredband.tele2.se) (Ping timeout: 265 seconds)
[14:14:22] *** Joins: wender (~Wender@189.37.65.224)
[14:14:38] *** Joins: mat001_ (~mat001@c-73-223-64-126.hsd1.ca.comcast.net)
[14:14:47] *** Quits: Strom (strom@fedora/strom) ()
[14:14:50] <DnzAtWrk> when a package is not built for a python version, can it be ignored?
[14:15:00] <DnzAtWrk> say it is built for 3.7 and I use 3.8
[14:15:07] <DnzAtWrk> pip won't install it
[14:15:33] *** Joins: homura (root@user/homura)
[14:15:51] <habnabit_> DnzAtWrk, "built for"? where do you see that?
[14:16:08] <tempate> Do files get closed if I have a return inside the with open statement?
[14:16:19] <FunkyBob> yes
[14:16:22] <habnabit_> tempate, `with` always runs the cleanup
[14:16:29] <habnabit_> tempate, you can't not
[14:16:44] <FunkyBob> it's one of the joys of with
[14:16:51] *** Joins: Strom (strom@fedora/strom)
[14:17:10] <tempate> great, thanks
[14:17:37] *** Quits: computeiro (~Wender@189.37.64.92) (Ping timeout: 245 seconds)
[14:17:40] *** Quits: mat001 (~mat001@c-73-223-64-126.hsd1.ca.comcast.net) (Ping timeout: 240 seconds)
[14:19:16] *** Quits: tempate (~alpha@user/tempate) (Quit: Leaving.)
[14:20:34] *** Quits: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net) (Remote host closed the connection)
[14:20:48] *** Joins: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net)
[14:22:07] *** Joins: legola (~legola@46.235.100.27)
[14:22:33] *** Quits: adanwan (~adanwan@gateway/tor-sasl/adanwan) (Ping timeout: 276 seconds)
[14:22:49] *** Joins: mat001 (~mat001@c-73-223-64-126.hsd1.ca.comcast.net)
[14:26:19] *** Quits: mat001_ (~mat001@c-73-223-64-126.hsd1.ca.comcast.net) (Ping timeout: 252 seconds)
[14:26:45] *** Quits: DnzAtWrk (~DnzAtWrk@mobile-access-5673bf-42.dhcp.inet.fi) (Read error: Connection reset by peer)
[14:27:15] *** Joins: lalitmee__ (~lalitmee@180.94.33.48)
[14:28:35] *** Joins: DnzAtWrk (~DnzAtWrk@mobile-access-5673bf-42.dhcp.inet.fi)
[14:29:43] *** Quits: lalitmee_ (~lalitmee@180.94.32.247) (Ping timeout: 252 seconds)
[14:30:07] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 265 seconds)
[14:30:40] <DnzAtWrk> forgot what a hot mess using pyenv was :P
[14:31:18] *** Joins: aleks (~aleks@user/aleks)
[14:32:10] *** Joins: fikran (~fikran@user/fikran)
[14:32:12] *** Quits: Mija (~Mija@user/mija) (Ping timeout: 245 seconds)
[14:39:32] <DnzAtWrk> https://miro.medium.com/max/2400/1*wmfcor4t8qlD9ASawFb8Sw.png
[14:39:33] <DnzAtWrk> OFF
[14:39:53] *** Joins: gadfly (~gadfly@23.81.112.197)
[14:40:50] *** Quits: jetchisel (jetchisel@user/jetchisel) (Quit: Unfortunately time is always against us -- [Morpheus])
[14:42:18] *** Joins: Wuniu (~Thunderbi@user/wuniu)
[14:43:49] *** Joins: slavaqq (~slavaqq@sdmail.sdserver.cz)
[14:44:47] *** Quits: Mattiasl_ (~Mattiasln@c188-148-207-108.bredband.tele2.se) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[14:45:07] *** Joins: blindguard (~blindguar@2a02:908:1864:c200::4433)
[14:45:18] *** Quits: gadfly (~gadfly@23.81.112.197) (Quit: Leaving)
[14:46:12] <DnzAtWrk> not pyenv virtualenv either
[14:46:20] *** Quits: mIk3_08 (~Thunderbi@user/mik3-08/x-2852566) (Remote host closed the connection)
[14:46:22] <DnzAtWrk> why won't they let you pick a target directory?
[14:46:34] *** Joins: mIk3_08 (~Thunderbi@user/mik3-08/x-2852566)
[14:46:39] <Yhg1s> who is 'they'?
[14:46:44] <DnzAtWrk> neither pyenv virtualenv nor pipenv let's you pick a directory for your virtualenv
[14:46:50] *** Quits: renrelkha (~renrelkha@user/renrelkha) (Quit: bye)
[14:47:02] <DnzAtWrk> who could they be other than the people who coded pyenv virtualenv
[14:47:11] *** Joins: renrelkha (~renrelkha@user/renrelkha)
[14:47:11] <Yhg1s> if you want that with pyenv, you'd just activate the right python and use 'python -m venv'
[14:47:26] <Yhg1s> DnzAtWrk: you are assuming context to your question that I do not have.
[14:47:33] <DnzAtWrk> I want to pick the target directory/path
[14:47:36] <DnzAtWrk> not a name
[14:47:41] <DnzAtWrk> since I like to keep virtualenvs in certain places
[14:48:03] <DnzAtWrk> based on projects
[14:48:51] <Repiphany> `python -m venv /path/to/venv` works fine
[14:49:21] *** Joins: y1n (~y1n@84-115-64-221.wifi.dynamic.surfer.at)
[14:49:22] <DnzAtWrk> yes, but I need to use pyenv to use an older version of python
[14:49:50] <Repiphany> It will make the venv with whatever python version you have activated
[14:50:17] <DnzAtWrk> is that a seperate isolated virtual environment?
[14:50:25] <DnzAtWrk> or is it linked to the original python environment
[14:50:52] <Yhg1s> DnzAtWrk: each virtualenv is for a specific Python interpreter, the one it was created for.
[14:51:16] *** Joins: Meteorhead (~Meteorhea@165.225.205.11)
[14:52:14] <DnzAtWrk> okay, then I need to see how I can automate pyenv + venv
[14:52:19] <DnzAtWrk> in my bash script
[14:52:40] *** Joins: shad (~shad@user/shad)
[14:53:19] *** Joins: kosh (~kosh@user/kosh)
[14:53:59] <Repiphany> `~/.pyenv/versions/3.9.6/bin/python -m /path/to/3.9.6/venv` even works for me without activating that version
[14:54:08] <Repiphany> -m venv
[14:54:21] <DnzAtWrk> yeah, but I need to install 3.whatever if not installed first
[14:54:23] <DnzAtWrk> using pyenv
[14:54:54] <DnzAtWrk> into the specific dir
[14:55:04] <DnzAtWrk> then create the virtualenv like that
[14:55:32] <DnzAtWrk> Why do I keep finding tutorials which assume you use mac :P
[14:55:37] <DnzAtWrk> os
[14:56:55] <DnzAtWrk> pyenv install ${PYTHON_VERSION} ; ~/.pyenv/versions/${PYTHON_VERSION}/bin/python -m "${VENV_DIR}"
[14:56:56] <DnzAtWrk> there
[14:57:28] <Repiphany> `yes no | pyenv install ${PYTHON_VERSION}`
[14:57:37] <DnzAtWrk> does it check if exists?
[14:58:24] <Repiphany> Yes
[14:58:40] <Repiphany> `yes no | ...` will skip install if it already exists
[14:58:45] *** Joins: ub (~Thunderbi@91.141.54.165.wireless.dyn.drei.com)
[14:58:51] <DnzAtWrk> how does that work?
[14:59:08] <Repiphany> It answers no to the prompt if you want to install anyway
[14:59:12] <DnzAtWrk> ah
[14:59:18] <DnzAtWrk> yes install no exists
[14:59:30] <DnzAtWrk> when asked
[14:59:40] *** Joins: bitplane (~bitplane@141.138.129.46)
[14:59:47] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[15:00:21] *** Quits: slavaqq (~slavaqq@sdmail.sdserver.cz) (Ping timeout: 256 seconds)
[15:01:04] *** Quits: ice9 (~ice9@user/ice9) (Ping timeout: 252 seconds)
[15:01:06] <DnzAtWrk> one more question
[15:01:14] <DnzAtWrk> can you say python 3.8
[15:01:17] <DnzAtWrk> and does it know you mean the latest?
[15:01:19] <DnzAtWrk> 3.8.12
[15:02:01] *** ub is now known as ubert
[15:02:07] *** Joins: gadfly (~gadfly@23.81.112.197)
[15:02:29] *** Joins: NeilRG (~NeilRG@192.222.196.111)
[15:05:05] <NeilRG> how come AbstractSet has no attribute union?
[15:05:56] <pycode> hellom i have a dictionary like { "name1": class_instance1, "name2": class_instance2 } then i have a method that run calculate() on each class_instance of the dictionary... i need to hold the output of that method somewhere i thought to replace {"name1": output_calculate1, "name2": output_calculate2} and so on after the calculate() i do not need the class instance so i can modify the original dictionary
[15:06:19] <pycode> is this a stupid thing i should do "name1": {"instance": class_instance, "output": calculate_output_here}
[15:06:20] <pycode> ?
[15:06:25] <pycode> istead ^
[15:07:51] *** Joins: wib_jonas (~wib_jonas@business-37-191-60-209.business.broadband.hu)
[15:08:44] *** Quits: Wuniu (~Thunderbi@user/wuniu) (Ping timeout: 252 seconds)
[15:09:17] <Cheaterman> Quick and fun question ; has anyone here put Python on a cubesat, and are there special considerations that need to be taken?
[15:09:42] <nedbat> pycode: you could do {"name1": result, "name2": result}, but make it a new dict, don't change the old one
[15:09:42] <DnzAtWrk> yes, power consumption
[15:09:50] <DnzAtWrk> cubesats must be very efficient
[15:09:55] <DnzAtWrk> and python is not neccesarily so
[15:10:04] <pycode> nedbat, ok
[15:10:04] <DnzAtWrk> but I think I've heard of python used on them non-the-less
[15:10:06] <Cheaterman> Hem, let's me rephrase then
[15:10:08] <Yhg1s> pycode: using the same dict doesn't sound like a good idea, for code sanity and cleanliness and debugability. Why not create a new dict with the outputs?
[15:10:16] <Cheaterman> Start with the assumption that the cubesat *will* be running Linux and
[15:10:20] <Cheaterman> *will* have Python on it
[15:10:21] <pycode> yes yes correct i will use a new dict
[15:10:47] <Cheaterman> Which special considerations would you take and why? I told my friend (for example) to have strict quotas on all resources
[15:10:51] <Cheaterman> CPU/mem/IO
[15:11:06] <DnzAtWrk> I'd ASSUME you'd do that on the operating system level in that case
[15:11:16] <Cheaterman> Yes, that's what I told him.
[15:11:37] <Cheaterman> In the best of worlds one could sandbox Python, but that's not how the language works and I'm afraid proper sandboxing (with a vm or container) might add unwelcome overhead
[15:11:39] <DnzAtWrk> Whatever Real-time linux distro you use probably use some kind of watchdogs too I guess
[15:11:47] <DnzAtWrk> maybe you even run several instances of it
[15:12:08] <Cheaterman> of the OS you mean?
[15:12:15] *** Joins: no-n (~ed@101.53.218.157)
[15:12:20] <DnzAtWrk> yes. You need a way to reboot it when things go wrong :D
[15:12:33] <DnzAtWrk> hence watchdog timers
[15:12:36] <DnzAtWrk> and stuff like that
[15:12:42] <Cheaterman> Well yes, but that doesn't need a second OS
[15:13:06] <Cheaterman> OTOH, that's the good thing about Python IMHO - pushing Python files to the sat "feels" way safer than reflashing a ROM remotely
[15:13:07] <DnzAtWrk> dunno about cubesats
[15:13:17] <DnzAtWrk> rockets tend to have multiple instances of their operating system running at once I heard
[15:13:23] <DnzAtWrk> so that when something goes wrong in one, they have backups
[15:13:26] <Cheaterman> if things go wrong in the middle, you created a several tens of thousands of dollars piece of garbage
[15:13:38] <Cheaterman> DnzAtWrk: Computers even
[15:13:51] <Cheaterman> even the Shuttle had a quorum
[15:14:02] <Cheaterman> But I don't think that's applicable to my friend's case.
[15:14:17] <Cheaterman> Anything else you guys would consider? Particularly on the Python side of things
[15:15:31] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[15:16:11] <NeilRG> is there an abstract type for sets with a union method?
[15:16:14] <DnzAtWrk> compiling your own version of python
[15:16:21] <DnzAtWrk> with all the bloat removed
[15:16:27] <DnzAtWrk> only pick the exact modules you need
[15:16:42] <DnzAtWrk> that's what my friend said they did for an integrated system
[15:16:48] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[15:17:33] <DnzAtWrk> https://micropython.org/
[15:17:34] <DnzAtWrk> example
[15:17:38] <DnzAtWrk> I don't know if that is good
[15:17:43] <DnzAtWrk> it's just the first hit on google
[15:17:45] <DnzAtWrk> I would not use it
[15:17:56] <deniska> unless storage space is actually a concern, I wouldn't bother
[15:18:18] <deniska> micropython is a different python implementation heavily optimized for minimal RAM footprint
[15:18:26] <DnzAtWrk> that may be relevant tho
[15:18:29] <DnzAtWrk> ram uses power after all :D
[15:18:34] <DnzAtWrk> well, *cough*
[15:18:41] <deniska> unless you're launching arduino to space, there's no real need for micropython
[15:19:08] <no-n> what about programming a rpi pico
[15:19:46] *** Quits: pycode (~pycode@2001:b07:5d28:551:5e39:5b85:ac42:f509) (Ping timeout: 252 seconds)
[15:19:51] <deniska> I'd expect an average cubesat to have a couple of smartphone worth of hardware in them, and they can certainly run your normal cpython
[15:20:03] <DnzAtWrk> don't be so sure about that
[15:20:08] <DnzAtWrk> often they use very primitive hardware
[15:20:38] <DnzAtWrk> again, it's power efficient
[15:20:56] <DnzAtWrk> with a cubesat, you only have so much power to play around with
[15:21:34] <DnzAtWrk> https://www.cubesatshop.com/product/isis-on-board-computer/
[15:21:44] <DnzAtWrk> 400 Mhz, 4400 - 12600 €
[15:22:15] <DnzAtWrk> 400 mW power consumption
[15:22:40] <DnzAtWrk> "However, physical CubeSat size restricts the area available for solar panels. Typically, the 1U, 2U, and 3U CubeSats' maximum power budgets range from 1 to 2.5 Watts, 2 to 5 Watts, and 7 to 20 Watts, respectively [10]"
[15:22:53] <DnzAtWrk> so yeah
[15:24:01] *** Joins: adanwan (~adanwan@gateway/tor-sasl/adanwan)
[15:24:48] *** Joins: Wuniu (~Thunderbi@user/wuniu)
[15:25:33] *** Joins: cidtest (~cidtest@185.156.172.202)
[15:27:27] <DnzAtWrk> "ou are missing the venv lib for python 3.4"
[15:27:30] <DnzAtWrk> You*
[15:27:36] <DnzAtWrk> Missing? I thought venv was built in!
[15:27:43] <DnzAtWrk> That was why it was superior to virtualenv!
[15:28:21] <DnzAtWrk> I compiled python 3.8.12 using pyenv
[15:28:35] <DnzAtWrk> and ...python -m venv dir fails
[15:28:35] <Yhg1s> DnzAtWrk: why does it say 'python 3.4'?
[15:28:39] *** Quits: very_sneaky (~very_snea@user/very-sneaky/x-7432109) (Quit: very_sneaky)
[15:28:44] <DnzAtWrk> because that's what the person on stack overflow said
[15:28:57] <Yhg1s> DnzAtWrk: how does 'python -m venv dir' fail?}
[15:29:06] <DnzAtWrk> command returned non-zero exit status 1
[15:29:14] <Yhg1s> DnzAtWrk: and the output?
[15:29:34] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Remote host closed the connection)
[15:29:37] <DnzAtWrk> command [dir, -Im, ensurepip, --upgrade, --default-pip] returned non-zero exit status 1
[15:29:55] <Yhg1s> DnzAtWrk: and the output of that command?
[15:30:02] <DnzAtWrk> that
[15:30:07] <DnzAtWrk> with dir being the full dir
[15:30:16] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[15:30:17] <Yhg1s> DnzAtWrk: any other output? What if you run that command yourself?
[15:30:34] *** Quits: djhankb (~djhankb@208.113.164.68) (Remote host closed the connection)
[15:30:35] <DnzAtWrk> it needs ENV_DIR
[15:30:39] <DnzAtWrk> otherwise it won't run
[15:31:06] *** Joins: djhankb (~djhankb@208.113.164.68)
[15:31:41] *** Joins: ayusta (Thunderbir@gateway/vpn/protonvpn/ayustae)
[15:31:42] *** Quits: aead (~aead@user/aead) (Ping timeout: 245 seconds)
[15:31:45] *** Joins: lalitmee_ (~lalitmee@180.94.32.109)
[15:31:59] *** Quits: Wuniu (~Thunderbi@user/wuniu) (Ping timeout: 265 seconds)
[15:32:36] <DnzAtWrk> I knew pyenv would do this
[15:32:58] *** Quits: ayustae (Thunderbir@gateway/vpn/protonvpn/ayustae) (Ping timeout: 252 seconds)
[15:33:09] <DnzAtWrk> not only do you need to install a billion dependencies to build python
[15:33:15] <DnzAtWrk> it will also a fail in a billion ways
[15:33:22] <DnzAtWrk> so better take the entire day for the task :P
[15:33:56] *** Joins: TranquilEcho (~grom@user/tranquilecho)
[15:34:02] *** Quits: lalitmee__ (~lalitmee@180.94.33.48) (Ping timeout: 252 seconds)
[15:34:03] *** Quits: jpds (~jpds@gateway/tor-sasl/jpds) (Ping timeout: 276 seconds)
[15:34:33] *** Joins: ayustae (Thunderbir@gateway/vpn/protonvpn/ayustae)
[15:35:42] *** Joins: jpds (~jpds@gateway/tor-sasl/jpds)
[15:36:14] *** Quits: ayusta (Thunderbir@gateway/vpn/protonvpn/ayustae) (Ping timeout: 252 seconds)
[15:36:17] <DnzAtWrk> and every solution people have is "use apt-install python-blahblah"
[15:36:28] <DnzAtWrk> No! The point is that I don't need to install anything extra for python
[15:36:37] *** Joins: very_sneaky (~very_snea@user/very-sneaky/x-7432109)
[15:37:09] *** Joins: mat001_ (~mat001@c-73-223-64-126.hsd1.ca.comcast.net)
[15:37:22] *** Joins: Atque (~Atque@user/atque)
[15:37:53] <jmcantrell> DnzAtWrk: Why wouldn't you need to install extra stuff for python? It has dependencies, just like any other piece of software.
[15:37:59] *** Joins: Deneb (~johnch@86.111.189.80.dyn.plus.net)
[15:38:21] <DnzAtWrk> because I'm not going to bloody install python3.x-venv to install a virtualenv from a newly built python version
[15:38:28] *** Quits: davor (~davor@user/davor) (Ping timeout: 252 seconds)
[15:38:29] <DnzAtWrk> that only massively confuses everything
[15:38:38] *** Joins: davor_ (~davor@user/davor)
[15:38:49] *** Joins: withered_wolf (~withered_@1437135-v103.1561-static.stchilaa.metronetinc.net)
[15:39:43] *** Quits: y1n (~y1n@84-115-64-221.wifi.dynamic.surfer.at) (Ping timeout: 265 seconds)
[15:39:46] *** Joins: Wuniu (~Thunderbi@user/wuniu)
[15:39:47] <DnzAtWrk> plus... plus
[15:39:49] *** Quits: NeoCore (~neocore@195.200.221.189) (Quit: Leaving)
[15:39:57] <DnzAtWrk> it said that venv is built into python 3
[15:40:03] <DnzAtWrk> so why the heck would I need to install it at all
[15:40:34] *** Quits: mat001 (~mat001@c-73-223-64-126.hsd1.ca.comcast.net) (Ping timeout: 252 seconds)
[15:40:50] <Cheaterman> deniska: Yeah, we're talking a real machine here
[15:40:57] <Cheaterman> with Linux on it and whatnot. CPython is the idea
[15:41:11] <Cheaterman> DnzAtWrk: and I don't think the stdlib will need debloating though, but I totally see where you're coming from with this
[15:41:16] <jmcantrell> DnzAtWrk: what's telling you to install that?
[15:41:17] <Cheaterman> and likely they won't build tkinter for example
[15:41:38] *** Joins: AutomatedTester (uid395371@selenium/developer/AutomatedTester)
[15:41:43] <DnzAtWrk> everyone
[15:41:44] <DnzAtWrk> apt-get install python3.7-dev python3.7-venv
[15:41:47] <DnzAtWrk> install blah blah that
[15:41:50] <DnzAtWrk> repeated on every site
[15:41:59] <Yhg1s> DnzAtWrk: that's for *debian*'s Python. Not one you compiled with pyenv.
[15:42:02] <DnzAtWrk> Again, why the heck do I need to install venv if it is built in
[15:42:06] <Yhg1s> DnzAtWrk: because Debian decided to separate that out.
[15:42:13] <Yhg1s> DnzAtWrk: because debian made it not built-in.
[15:42:21] <DnzAtWrk> that is immsensily dumb of them :P
[15:42:22] <Yhg1s> if you're not using Debian's python, you don't have to worry about any of that.
[15:42:29] <Yhg1s> There is a lot of discussion about that, yes.
[15:42:38] <Cheaterman> DnzAtWrk: They have valid reasons.
[15:42:45] <DnzAtWrk> well then I'm at a loss. venv fails
[15:42:51] <DnzAtWrk> and no real output to go on
[15:43:35] *** Joins: mat001 (~mat001@c-73-223-64-126.hsd1.ca.comcast.net)
[15:43:39] <Yhg1s> DnzAtWrk: can you show the actual command you're running, and the full output you get?
[15:44:19] *** Quits: Mikaela (~sid12355@Feneas/Mikaela) (Remote host closed the connection)
[15:44:35] <Cheaterman> Also you mentioned that you built Python yourself? We might wanna see the configure flags, and we might wanna double check how/where you installed it
[15:44:43] <DnzAtWrk> ~/.pyenv/versions/3.8.12/bin/python -m venv "/home/donitz/.virtualenv/ai_env"
[15:44:56] <Cheaterman> If you have a custom prefix, consider setting PYTHONHOME
[15:45:02] *** Quits: ferz (~ferz@93-39-142-17.ip76.fastwebnet.it) (Ping timeout: 245 seconds)
[15:45:07] *** Joins: Mikaela (~sid12355@Feneas/Mikaela)
[15:45:28] <Yhg1s> Ehh, no, never set PYTHONHOME.
[15:45:40] *** Joins: tempate (~alpha@user/tempate)
[15:45:41] <Cheaterman> Yhg1s: Why? I don't have a choice here.
[15:45:56] <Cheaterman> PYTHONHOME=$(realpath ../py32/prefix) or something along those lines
[15:45:59] *** Parts: tempate (~alpha@user/tempate) ()
[15:46:05] <Cheaterman> (yes, for a 32 bits non-system Python)
[15:46:08] <Yhg1s> Cheaterman: because Python normally finds its home much better on its own, and setting PYTHONHOME affects *all* python installations, not just the one you want to specify the home for.
[15:46:21] <Cheaterman> Yhg1s: read above - but otherwise you're totally correct
[15:46:38] <Cheaterman> It's just that when you build Python from scratch and install it into a custom prefix, you can't expect it to be able to find its home easily
[15:46:38] <Yhg1s> Cheaterman: you haven't said why you need it, just how you're using it.
[15:46:41] *** Quits: mat001_ (~mat001@c-73-223-64-126.hsd1.ca.comcast.net) (Ping timeout: 252 seconds)
[15:46:47] <Yhg1s> Cheaterman: you can. it will.
[15:46:54] <Yhg1s> Cheaterman: as long as you don't move the python binary relative to its standard library.
[15:47:06] <Cheaterman> It sure didn't work for me. I can try again if you want
[15:47:09] <Cheaterman> Lemme see
[15:47:36] <Yhg1s> Cheaterman: as long as the lib/python3.X directory is next to the bin directory containing python, it should work just fine.
[15:47:43] <Cheaterman> Nope, you're wrong sadly
[15:47:43] <Cheaterman> ImportError: /usr/lib/python3.8/lib-dynload/math.cpython-38-x86_64-linux-gnu.so: wrong ELF class: ELFCLASS64
[15:47:58] <Cheaterman> I might have forgotten to mention that I'm EMBEDDING Python though
[15:48:02] <Cheaterman> Which is probably very important in this context
[15:48:41] <Yhg1s> Cheaterman: okay, then you should be calling Py_SetPythonHome() in your embedding application.
[15:49:11] <Yhg1s> (that way it only affects that application, and not anything else started by you or it.)
[15:49:11] <Cheaterman> Yhg1s: !!!!!!!
[15:49:28] <Cheaterman> Didn't know that was a thing and sure sounds a lot more correct than my current workaround! thanks a lot
[15:49:38] <Cheaterman> we learn new things every day! :-)
[15:50:18] *** Joins: tlgs (~tlgs@188-141-56-55.dynamic.upc.ie)
[15:50:27] <Cheaterman> OTOH... People could be putting their Python anywhere and I don't really have any idea where it could be
[15:50:38] <Yhg1s> Cheaterman: you're setting PYTHONHOME now, aren't you?
[15:50:49] <Cheaterman> Yuppers - or rather "people" are setting PYTHONHOME now
[15:50:55] <Cheaterman> to their Python32 prefix location
[15:51:05] <Cheaterman> My embedding thingy does nothing particular in itslf
[15:51:11] <Yhg1s> so make it a configuration thing, or a separate environment variable that only has meaning to your application.
[15:51:20] <Cheaterman> I see, makes sense
[15:51:35] <Cheaterman> Feels a bit like moving the problem around rather than solving anything though
[15:51:52] <Yhg1s> Or, if they're building *from source* against their 32-bit Python installation, the default should really work.
[15:52:07] <Cheaterman> They are - I did
[15:52:10] <Cheaterman> doesn't work :-(
[15:52:16] <Yhg1s> Sounds very peculiar.
[15:52:16] *** Joins: y1n (~y1n@84-115-64-221.wifi.dynamic.surfer.at)
[15:52:24] <jean-luc> https://en.wikipedia.org/wiki/Timeline_of_programming_languages
[15:52:28] <jean-luc> insane stuff :-S
[15:52:28] <Cheaterman> IKR, then again embedding Python is a difficulty and a half
[15:52:31] <Yhg1s> (unless something else is setting PYTHONHOME or PYTHONPATH)
[15:52:40] <Yhg1s> I do it for a living, I don't find it that difficult :)
[15:52:46] <Cheaterman> Nah, it's blank by default, just it's guessing my system locations by default
[15:52:50] <Yhg1s> (but I work in an environment where we have total control)
[15:53:03] <Cheaterman> Yeah that's the thing, I'm doing it mostly for interop with another VM right now...
[15:53:13] <Yhg1s> Cheaterman: oh, right, it guesses based on your program name by default, rather than the python it's linked against.
[15:53:18] <Cheaterman> and that other VM is MUCH LESS cooperative than Python (it's the AMX VM, the Pawn programming language)
[15:53:26] *** Joins: vats (~vats@180.149.226.8)
[15:53:32] <Yhg1s> to get the compile-time default you'd have to call Py_SetProgramName() with a value that won't let it find the wrong Python.
[15:53:42] <Cheaterman> !!! I want that
[15:53:57] <Yhg1s> Cheaterman: Py_SetProgramName("/blah") would probably work, then.
[15:54:04] <Yhg1s> eh, L"/blah"
[15:54:10] *** Joins: ayusta (Thunderbir@gateway/vpn/protonvpn/ayustae)
[15:54:11] <Cheaterman> And it sounds good, too - because I'm 100% sure I'm linking against a 32 bits python at buid time, so I must have its location (in fact I bake it into my binary - is it OK/normal that I dlopen() Python's .so manually?)
[15:54:28] <Yhg1s> Cheaterman: as long as it's libpythonX.y.so, sure.
[15:54:36] <Yhg1s> although it's more normal to just -lpython
[15:54:44] <Cheaterman> I was wondering about that
[15:54:53] <Cheaterman> For some reason I see many people online dlopening
[15:55:11] <Cheaterman> but I sure would prefer to simply handle that at link time
[15:55:13] *** Joins: ferz (~ferz@93-39-142-17.ip76.fastwebnet.it)
[15:55:29] *** Quits: ayustae (Thunderbir@gateway/vpn/protonvpn/ayustae) (Ping timeout: 252 seconds)
[15:55:29] *** ayusta is now known as ayustae
[15:56:28] <Cheaterman> « libpythonX.y.so » surely you meant as opposed to Python C ext modules right? Or do you really mean "don't use libpython3.so" ?
[15:56:31] <Cheaterman> (the symlink)
[15:56:43] <Yhg1s> I meant as opposed to extension modules, yes.
[15:56:46] <Cheaterman> OK good
[15:57:03] <Cheaterman> I'll dig into the SetProgramName thingy
[15:57:41] <Yhg1s> If you already have its location it's really easier to just call Py_SetPythonHome.
[15:57:45] <Yhg1s> That avoids the search altogether.
[15:58:36] <Cheaterman> lol
[15:59:13] <Cheaterman> was about to say « I don't have any location » but I obviously do, I'm compiling with includes from the installed Python after all
[15:59:23] <Cheaterman> and it seems like SetPythonHome would make more sense
[15:59:29] <Cheaterman> I'll see what I can do - thanks a lot again
[16:00:17] *** Joins: Ecophobia (~Ecophobia@mobile-access-2e840c-136.dhcp.inet.fi)
[16:00:33] *** Joins: czuk_cza (~mist@188.147.96.6.nat.umts.dynamic.t-mobile.pl)
[16:01:06] *** Quits: fanis30 (~fanis30@adsl-142.37.6.0.tellas.gr) (Quit: WeeChat 3.2)
[16:03:53] *** Quits: Wuniu (~Thunderbi@user/wuniu) (Ping timeout: 265 seconds)
[16:07:32] *** Joins: scaleww (~scaleww@77-41-20-31.ftth.glasoperator.nl)
[16:11:06] *** Quits: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net) (Read error: Connection reset by peer)
[16:11:19] *** Joins: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net)
[16:14:18] *** Joins: raxor2k (~raxor2k@78.158.248.158)
[16:16:28] <raxor2k> bjs: how can i merge these 2 dicts together easily?  https://bpa.st/OUCA
[16:16:44] *** Joins: Mattiaslndstrm (~Mattiasln@c188-148-207-108.bredband.tele2.se)
[16:16:57] *** Curiosity is now known as Guest6100
[16:17:28] <bjs> raxor2k: the same way as I've done all of these previous ones: make a dict per ID and then loop over each structure and "update" the dict for that ID with the new data
[16:17:47] <raxor2k> bjs: but before i didnt have dict per ID, now i have
[16:17:51] <raxor2k> so now is a different approach
[16:17:55] <bjs> raxor2k: no it's exactly the same
[16:18:47] *** Quits: Masklin_Gurder (~joel@89-233-200-127.cust.bredband2.com) (Ping timeout: 245 seconds)
[16:18:53] <bjs> (again, there are *loads* of ways of doing this but they're all basically going to be the same process)
[16:19:25] <raxor2k> bjs: so youre thinking of something like this? https://bpa.st/YS3Q   this is not correct
[16:19:31] <bjs> no
[16:19:40] <bjs> something like *Exactly the same thing i did last time you asked*
[16:20:36] <raxor2k> no its not, because last time they were in lists
[16:20:43] <raxor2k> now they are all in dicts with their own id
[16:20:57] *** Joins: p-i-_ (~Ohmu@mx-ll-223.206.69-159.dynamic.3bb.co.th)
[16:21:19] <Cheaterman> Yhg1s: Oh also since you do this for a living and don't find it that difficult, do you have thoughts on how many people seem to think Python.h created cancer and HPy is the second coming, despite HPy not being ready yet (AIUI) and Python.h actually being more than workable (again, if I compare it to the Pawn SDK, Pawn looks very sad indeed)
[16:21:20] <bjs> raxor2k: yeah but it's exactly the same,  instead of looping over each dict in a list and getting the exercise ID you ... loop over each dict in a dict and get the exercise ID https://bpa.st/BMPQ
[16:21:26] <DnzAtWrk> I love conda for being easy to use
[16:21:30] <DnzAtWrk> I hate it because it's pre-compiled
[16:21:34] <DnzAtWrk> and I don't really trust it
[16:21:57] <raxor2k> DnzAtWrk: conda is trash
[16:22:03] <DnzAtWrk> again, it's easy to use
[16:22:06] <DnzAtWrk> extremely easy in windows
[16:22:18] <jmcantrell> DnzAtWrk: did you ever get your venv to work?
[16:22:20] <Yhg1s> Cheaterman: I've never heard people use the word 'cancer', and I don't particularly appreciate it. The Python C API is clunky in many, many ways. The HPy proposal is a lot better. It's also a lot newer. I'm not sure what the confusion is.
[16:22:24] <DnzAtWrk> I'm going to continue trying
[16:22:42] <Cheaterman> Yhg1s: Sorry, my words, poorly chosen (the "cancer" / "second coming" thing is a meme)
[16:23:24] <jmcantrell> DnzAtWrk: what's your OS?
[16:23:33] <DnzAtWrk> debian
[16:23:55] <Cheaterman> I don't know about the clunkiness (it doesn't seem that bad to me?) ; I certainly do reckon HPy is very promising, but the problem is that it's mostly promises yet
[16:24:05] *** Quits: p-i- (~Ohmu@223.206.69.159) (Ping timeout: 252 seconds)
[16:24:08] <DnzAtWrk> export PYTHON_VERSION=3.8.12 ; export VENV_DIR=~/.virtualenv/ai_env ; yes no | pyenv install ${PYTHON_VERSION} ; ~/.pyenv/versions/${PYTHON_VERSION}/bin/python -m "${VENV_DIR}"
[16:24:22] <DnzAtWrk> whups
[16:24:27] <DnzAtWrk> that's before I added vend
[16:24:31] *** Joins: tga (~tga@user/tga)
[16:24:33] <DnzAtWrk> export PYTHON_VERSION=3.8.12 ; export VENV_DIR=~/.virtualenv/ai_env ; yes no | pyenv install ${PYTHON_VERSION} ; ~/.pyenv/versions/${PYTHON_VERSION}/bin/python -m venv "${VENV_DIR}"
[16:24:46] *** Quits: winterflaw (~winterfla@gateway/tor-sasl/winterflaw) (Remote host closed the connection)
[16:24:50] <DnzAtWrk> final venv returns exit code non-zero
[16:24:53] <tga> greetings. what's a good way to normalize a json object so that the string representation is always the same, no matter how it's created?
[16:24:58] *** Joins: donofrio (~donofrio@c-68-40-123-74.hsd1.mi.comcast.net)
[16:25:02] <bjs> raxor2k: these are all just the same pattern,  looping over a bunch of collections and building up a new structure from them incrementally. It's a super classic pattern that you'll find everywhere
[16:25:09] <Yhg1s> Cheaterman: the Python C API is a lot better than many C APIs, but it's tied to CPython implementation details, violates C rules in places, and is very, very easy to not quite use right -- for example, getting your refcounting wrong, or incorrectly handling borrowed references.
[16:25:28] *** Joins: Hax0r (~Hax0r@51.252.22.22)
[16:25:44] <Cheaterman> Yhg1s: Yes... eg concrete tuple API giving borrowed refs while abstract sequence gives a new one IIRC
[16:25:50] <Cheaterman> or perhaps the opposite even
[16:26:00] *** Joins: Lorphos (~Lorphos@user/lorphos)
[16:26:07] <Yhg1s> Cheaterman: I didn't even cover the internal inconsistencies
[16:26:19] <Cheaterman> I mean, it's convenient to have both though
[16:26:24] *** Joins: Masklin_Gurder (~joel@89-233-200-127.cust.bredband2.com)
[16:26:28] <Cheaterman> What about violating C rules though? That got me curious
[16:26:46] <Lorphos> I have a list of strings and i want to find the longest substring match at position 0 - what's a good way to do it in python?
[16:27:31] <Yhg1s> Cheaterman: Python assumes things about struct layout, like that a struct and a superset of the struct are interchangeable.
[16:27:40] <Lorphos> the list itself pretty static.. it's pathnames and i want to check filenames (with paths) against it
[16:27:43] <Yhg1s> That's not actually guaranteed by C, so it's not a valid assumption.
[16:27:44] *** Joins: winterflaw (~winterfla@gateway/tor-sasl/winterflaw)
[16:27:56] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Quit: = "")
[16:27:58] <DnzAtWrk> ah
[16:28:11] <DnzAtWrk> replacing the full path with a single directory name works
[16:28:11] <DnzAtWrk> why
[16:28:17] <DnzAtWrk> what's wrong with VENV_DIR
[16:28:29] *** Quits: ubert (~Thunderbi@91.141.54.165.wireless.dyn.drei.com) (Ping timeout: 252 seconds)
[16:28:43] <Cheaterman> Yhg1s: OOOOOOH
[16:28:50] <DnzAtWrk> does ENV_DIR not understand ~?
[16:28:55] <Cheaterman> Yhg1s: Do you mean like in the moduledef? that you gotta cast when a method takes kwargs?
[16:28:59] <Cheaterman> things like that?
[16:29:14] <Yhg1s> Cheaterman: I mean in PyObject structs.
[16:29:29] <Yhg1s> DnzAtWrk: ~ is a shell thing. Your shell has to expand it, not Python.
[16:29:36] <DnzAtWrk> ah crap
[16:29:44] <DnzAtWrk> how do I do that in EXPORT variable
[16:29:47] <Cheaterman> Oh in the PyObject themselves - but aren't the PyMethodDefs a bit similar in that regard
[16:30:02] <Repiphany> $HOME
[16:30:02] <Cheaterman> The PyCFunctionWithKeywords that gets casted to PyCFunction
[16:30:08] <DnzAtWrk> ah
[16:30:17] <Yhg1s> DnzAtWrk: don't put it in quotes.
[16:30:29] <Yhg1s> Cheaterman: those are functions, so that's different.
[16:30:33] <DnzAtWrk> quotes are kinda required afaik, depending on the path
[16:30:35] <DnzAtWrk> it's safer to use them
[16:30:44] <grawity> Lorphos: do you have an example of how you're going to use it?
[16:30:48] <DnzAtWrk> or does it matter?
[16:30:50] <DnzAtWrk> what if there is a space
[16:30:54] *** Joins: dev0 (~dev0@user/deepspace-link)
[16:31:03] <Yhg1s> DnzAtWrk: sure. Because what they do is prevent the shell from interpreting the path. However, you *want* the shell to interpret the ~. So don't put that inside quotes.
[16:31:23] <DnzAtWrk> does /path blahblah/ become two parameters?
[16:31:24] <grawity> in shell, you can concatenate several differently quoted literals, e.g. ~/foo/"$bar" is valid
[16:31:26] <DnzAtWrk> without quotes
[16:31:35] <Cheaterman> Ah, alright, yes, the pointer is of the same size etc. I'm not sure I encountered the things you mentioned about PyObject struct layout and derivatives though, so I'm not sure what you mean in practice, but I can totally see how that's not a great thing in theory
[16:31:46] <DnzAtWrk> grawity, only works if it's not inside a variable
[16:31:52] <Lorphos> grawity: what i want to do is write a very minimal FUSE filesystem that replaces some symlinks with different symlinks, depending on prefix matches
[16:31:53] <grawity> no, it does work just about everywhere
[16:31:58] <grawity> x=~/src/"project with spaces"/etc/'thing"with"quotes'
[16:32:00] <grawity> echo "$x"
[16:32:05] <DnzAtWrk> export VENV_DIR=~/.virtualenv/ai_env
[16:32:07] <DnzAtWrk> ~/.pyenv/versions/${PYTHON_VERSION}/bin/python -m venv "${VENV_DIR}"
[16:32:20] <DnzAtWrk> what if the path was
[16:32:26] <DnzAtWrk> export VENV_DIR=~/.virtualenv/ai env
[16:32:31] <DnzAtWrk> what would removing quotes do then?
[16:32:39] <grawity> a) export VENV_DIR=~/.virtualenv/"ai env"
[16:32:45] <grawity> b) export VENV_DIR=~/".virtualenv/ai env"
[16:32:49] <grawity> c) export VENV_DIR=~/.virtualenv/ai\ env
[16:32:52] <DnzAtWrk> but it didn't expand it inside the variable
[16:32:55] <DnzAtWrk> the variable was never quotes
[16:32:56] <grawity> d) export VENV_DIR="$HOME/.virtualenv/ai env"
[16:33:00] <DnzAtWrk> quoted*
[16:33:08] <grawity> really, how do you know that
[16:33:30] <DnzAtWrk> ah
[16:33:31] <DnzAtWrk> it is
[16:33:34] <DnzAtWrk> then why does it fail
[16:33:45] <Yhg1s> Cheaterman: PyObject is a struct with refcount and type pointer (and possibly debug data). A FooPyObject starts with a PyObject, and contains extra data in addition to it. Casting a FooPyObject to a PyObject is something that's done all over the place, but the C standard doesn't guarantee that two structs with the same contents actually use the same layout in memory.
[16:34:11] <DnzAtWrk> does -m venv not understand how to create the full path?
[16:34:17] <DnzAtWrk> Do I manually have to create the parent dir
[16:34:20] <DnzAtWrk> that would be silly
[16:34:30] <grawity> fairly common limitation tbh
[16:34:33] *** Joins: pro_z (~pro_z@37.214.61.236)
[16:34:45] <raxor2k> bjs: yes youre right, i think my issue is that i have been working too much with lists instead of dicts
[16:34:55] <raxor2k> so my brain need a different way of thinking when working with dicts
[16:35:06] <Yhg1s> DnzAtWrk: no, it will create intermediate directories.
[16:35:20] <Lorphos> so i encounter a link, i check if it's in the list of those symlinks i need to modify and if it is, i modify it.
[16:35:31] <Lorphos> what I'm looking for is a data structure that will make this fast in python
[16:35:32] <Repiphany> `python -m venv "/path/to/venv/"` works fine but `python -m venv "~/path" won't do what you expect
[16:35:48] *** Quits: noctavian (~noctavian@gateway/tor-sasl/noctavian) (Ping timeout: 276 seconds)
[16:35:51] *** Quits: vats (~vats@180.149.226.8) (Remote host closed the connection)
[16:36:02] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.2.1)
[16:36:02] <DnzAtWrk> ufff... do the quotes become part of the parameter?
[16:36:05] <Cheaterman> Yhg1s: Ah I see - despite the FooPyObject being a derivative, you have no guarantees as to where/how the extra fields are added (in theory) ?
[16:36:06] <DnzAtWrk> Geez, I'm at a loss
[16:36:17] <grawity> no, but they do change what expansions are performed
[16:36:30] *** Joins: supakeen (~user@python/site-packages/supakeen)
[16:36:31] <Cheaterman> Yhg1s: I never made a C-level PyObject derivative (and that's probably my own loss), is there any typical use for these?
[16:36:44] <DnzAtWrk> oh bloody wait
[16:36:48] <DnzAtWrk> the dir is not empty
[16:36:52] <grawity> compare: python -c "import sys; print(sys.argv)" ~/foo "~/foo"
[16:37:13] *** Joins: vats (~vats@180.149.226.8)
[16:37:22] <Yhg1s> Cheaterman: sure: defining your own type. It's quite common.
[16:37:32] <DnzAtWrk> well it could have said so
[16:37:34] <jmcantrell> Hmm. I wonder why this doesn't work: https://paste.rs/w60
[16:37:36] <DnzAtWrk> instead of the cryptic error I got
[16:38:15] *** Quits: txtsd (~txtsd@user/txtsd) (Ping timeout: 260 seconds)
[16:38:21] <bjs> raxor2k: you just need experience,  and to stop blaming dicts for it :)
[16:38:28] <Repiphany> jmcantrell: pyenv hasn't been initialized presumably
[16:38:31] <Cheaterman> Yhg1s: Interesting, so that's literally how people implement C-level Python types? So far the only thing I've done is creating a logprintf module that is assigned to sys.stdout and overrides write() and flush() with my own methods ; would this (for example) better be achieved with an instance of a custom type?
[16:38:43] *** Quits: Hax0r (~Hax0r@51.252.22.22) (Quit: Leaving)
[16:38:55] <Cheaterman> (the other things are literally method defs and wouldn't use a custom type)
[16:39:09] *** Joins: Cyp_ (~cyp@192038133070.mbb.telenor.dk)
[16:39:24] <Yhg1s> Cheaterman: it's a little odd to use a module like that, yes. I would avoid writing it in C if at all possible, though.
[16:39:25] *** Quits: y1n (~y1n@84-115-64-221.wifi.dynamic.surfer.at) (Ping timeout: 260 seconds)
[16:39:37] *** Quits: Cyp_ (~cyp@192038133070.mbb.telenor.dk) (Client Quit)
[16:40:00] *** Joins: pycurious (~Adium@user/pycurious)
[16:40:02] *** Quits: manti7 (~manti7@176.10.104.94) (Ping timeout: 252 seconds)
[16:40:22] <jmcantrell> Repiphany: Just the shell function, but that shouldn't matter right? This is the output: https://paste.rs/Y1r
[16:40:35] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 252 seconds)
[16:40:39] <Cheaterman> Yhg1s: I need the thing to make calls to C++ logprintf() function, so I'm not sure I have a choice ; but yes, higher-level support code will be Python (some already is)
[16:40:54] <DnzAtWrk> I wonder how much work it would be to add your own type literals to python
[16:41:00] <DnzAtWrk> like say, 5m
[16:41:02] <jmcantrell> That basic dockerfile works if using archlinux instead of debian
[16:41:03] <Yhg1s> DnzAtWrk: quite a lot.
[16:41:22] *** Joins: Cyberg33k (~Cybergeek@80.161.188.186)
[16:41:45] *** Joins: manti7 (~manti7@176.10.104.94)
[16:42:06] <Repiphany> jmcantrell: Do you need the other debian prerequisites installed https://github.com/pyenv/pyenv/wiki#troubleshooting--faq
[16:42:09] <Cheaterman> Yhg1s: Thanks again for all the good tips :-) sounds like I'm not done refactoring this, hahaha... https://github.com/habecker/PySAMP/pull/76
[16:42:21] *** Joins: fikran (~fikran@user/fikran)
[16:42:22] <Cheaterman> +7500 -6800 noice
[16:42:52] <jmcantrell> Repiphany: ah, lemme try that. i've never used pyenv on debian before
[16:44:12] *** Joins: vvdaiwrw (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[16:44:26] *** Joins: bfoley (~bfoley@pool-173-48-101-113.bstnma.fios.verizon.net)
[16:44:56] *** Joins: Wuniu (~Thunderbi@user/wuniu)
[16:45:25] *** Quits: vats (~vats@180.149.226.8) (Remote host closed the connection)
[16:45:50] <raxor2k> bjs: sure
[16:48:23] <jmcantrell> jaysus. debian is installing xterm when installing the deps needed for pyenv
[16:48:34] *** Joins: vats (~vats@180.149.226.8)
[16:48:46] *** Joins: slowButPresent (~slowButPr@user/slowbutpresent)
[16:50:31] *** Quits: carl-- (~carl-@185.103.188.130) (Ping timeout: 252 seconds)
[16:50:36] *** Quits: dutch (~DutchIngr@user/dutch) (Quit: WeeChat 3.2)
[16:50:45] <jmcantrell> DnzAtWrk: this seems to work for me with debian: https://paste.rs/axB
[16:51:11] <DnzAtWrk> I did get it to work
[16:51:13] <DnzAtWrk> I just had to
[16:51:19] <DnzAtWrk> umm. What did I do
[16:51:27] *** Quits: no-n (~ed@101.53.218.157) (Quit: WeeChat 2.8)
[16:51:30] <jmcantrell> oh, what ended up being the problem?
[16:51:34] <DnzAtWrk> ah yes, rm -rf "${VENV_DIR}" first
[16:53:07] *** Joins: y1n (~y1n@84-115-64-142.wifi.dynamic.surfer.at)
[16:54:19] *** Quits: zamba (~marius@5.226.162.54) (Read error: Connection reset by peer)
[16:54:20] *** Quits: czuk_cza (~mist@188.147.96.6.nat.umts.dynamic.t-mobile.pl) (Ping timeout: 252 seconds)
[16:56:35] *** Quits: Bronto22 (~mennoh@2a02:a46b:4db0:1:5604:a6ff:fe37:3044) (Quit: Konversation terminated!)
[16:58:08] *** Quits: gadfly (~gadfly@23.81.112.197) (Read error: Connection reset by peer)
[16:58:56] *** Joins: gadfly (~gadfly@23.81.112.197)
[16:59:15] *** Quits: maharg101 (~maharg101@savoy.force9.co.uk) (Quit: My Mac Mini has gone to sleep. ZZZzzz…)
[16:59:46] *** Joins: lalitmee__ (~lalitmee@180.94.33.165)
[17:00:51] *** Quits: Cyberg33k (~Cybergeek@80.161.188.186) (Quit: Leaving)
[17:01:29] *** Quits: Mattiaslndstrm (~Mattiasln@c188-148-207-108.bredband.tele2.se) (Ping timeout: 252 seconds)
[17:02:22] *** Quits: lalitmee_ (~lalitmee@180.94.32.109) (Ping timeout: 265 seconds)
[17:02:30] *** Joins: maharg101 (~maharg101@savoy.force9.co.uk)
[17:02:56] *** Joins: Mattiaslndstrm (~Mattiasln@c188-148-207-108.bredband.tele2.se)
[17:03:32] *** Joins: tgamblin (~tgamblin@2607:fea8:c29d:d7c0:fa88:8bc5:c0d2:27cc)
[17:03:41] *** Quits: gadfly (~gadfly@23.81.112.197) (Ping timeout: 252 seconds)
[17:03:58] *** Joins: castor_andrade (castor_and@187.101.171.198)
[17:04:56] *** Joins: Seto_Kaiba (~hunterkll@2001:470:8b06:100:2958:1194:aedf:1fa3)
[17:05:32] *** Quits: scaleww (~scaleww@77-41-20-31.ftth.glasoperator.nl) (Quit: Leaving)
[17:05:42] *** Joins: nyah (~nyah@bcdcb6e3.skybroadband.com)
[17:06:29] *** Quits: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com) (Quit: WeeChat 3.0.1)
[17:07:33] *** Quits: Ecophobia (~Ecophobia@mobile-access-2e840c-136.dhcp.inet.fi) (Quit: WeeChat 2.8)
[17:08:02] *** Quits: Hunterkll (~hunterkll@remote.kisaracorporation.com) (Ping timeout: 245 seconds)
[17:08:57] *** Quits: adanwan (~adanwan@gateway/tor-sasl/adanwan) (Ping timeout: 276 seconds)
[17:11:05] *** Joins: hodapp (~mawson@user/hodapp)
[17:11:56] *** Quits: roe_ (~mroe@216.164.247.250) (Remote host closed the connection)
[17:13:06] *** Joins: Cybergeek (~Cybergeek@2a03:b0c0:3:e0::1ab:5001)
[17:13:35] *** Joins: RangerBobVA (~bmaddox@user/rangerbobva)
[17:14:42] *** Joins: varaindemian (uid73404@id-73404.ilkley.irccloud.com)
[17:15:56] *** Quits: Lorphos (~Lorphos@user/lorphos) (Quit: Client closed)
[17:16:44] <boris[m]> Hello! Is there any python network packet sniffer lib you would recommend ?>
[17:18:31] <jean-luc> https://github.com/EONRaider/Packet-Sniffer
[17:18:54] <jean-luc> there are also tons of tutorials on writng you own
[17:18:55] <Cybergeek> Or use socket library
[17:18:55] <boris[m]> thank you very much jean-luc
[17:19:02] *** Quits: stranac (~stranac@195.29.239.126) (Read error: Connection reset by peer)
[17:19:13] <Cybergeek> https://www.binarytides.com/python-packet-sniffer-code-linux/
[17:19:15] <jean-luc> https://www.tutorialspoint.com/python_penetration_testing/python_penetration_testing_network_packet_sniffing.htm
[17:20:06] <Cybergeek> You can also use scapy
[17:20:16] <Cybergeek> https://www.exploit-db.com/docs/48606
[17:20:56] <boris[m]> Ah scapy is nice !
[17:21:40] <jpic> scapy is actually great
[17:21:54] <jpic> also for automated packet crafting
[17:22:13] *** Joins: zumba_addict (~zumba_add@c-71-194-58-34.hsd1.il.comcast.net)
[17:22:25] <jpic> has a pythonic api which also feels great
[17:22:40] <Wuniu> can anyone send me a tutorial of scrapy
[17:22:44] *** Joins: lalitmee_ (~lalitmee@180.94.33.105)
[17:23:03] <jean-luc> yr google broke?]
[17:23:21] *** Quits: dev0 (~dev0@user/deepspace-link) ()
[17:23:30] <Nei> hi, I have written some docs and examples for my python using markdown + sphinx, does someone know a clever way to test these code blocks?
[17:23:51] <Wuniu> yeah, it's broken, i'm in China
[17:23:56] <boris[m]> Is there an option to continuously log the traffic? Was thinking of https://www.wireshark.org/docs/man-pages/dumpcap.html, which has a round-robin switch , however I think of disk wearing cause of IO. Ideally would like to have it on memory and on demand start writing on disk
[17:24:21] <Nei> china is so annoying without google :x
[17:24:32] <jpic> Wuniu: https://scapy.readthedocs.io/en/latest/
[17:24:36] <jean-luc> omw
[17:24:41] <Wuniu> thanks.
[17:25:34] *** Quits: lalitmee__ (~lalitmee@180.94.33.165) (Ping timeout: 265 seconds)
[17:25:43] *** Joins: hays (rootvegeta@fsf/member/hays)
[17:25:48] <Cybergeek> you welcome
[17:27:09] *** Joins: strive (~strive@user/strive)
[17:27:24] *** Quits: frost (~frost@59.71.240.119) (Quit: Connection closed)
[17:28:08] *** Joins: jmiehe (~Thunderbi@user/jmiehe)
[17:29:18] *** Joins: ppang (~ppang@user/ppang)
[17:30:30] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[17:30:35] *** Quits: djhankb (~djhankb@208.113.164.68) (Remote host closed the connection)
[17:31:09] *** Joins: djhankb (~djhankb@208.113.164.68)
[17:31:33] *** Joins: cecep[m] (~cecep@2001:470:69fc:105::3994)
[17:31:39] *** Quits: Meteorhead (~Meteorhea@165.225.205.11) (Ping timeout: 256 seconds)
[17:31:48] <jmiehe> I just created the "setup.py" for my first package and installed it into a new VENV. It created the script as expected, but apparently my code was not installed … I see the .dist-info dir in site-packages though
[17:32:24] <Mathisen> hello, how to check if a sql querry came back empty ? if rows is none dont seem to work
[17:32:26] <greatgatsby> jmiehe, what command did you use to install it?
[17:32:33] <Yhg1s> jmiehe: can you show the setup.py and the layout of the code?
[17:32:37] *** Quits: deepy (deepy@user/deepy) (Read error: Connection reset by peer)
[17:32:44] *** Quits: very_sneaky (~very_snea@user/very-sneaky/x-7432109) (Quit: very_sneaky)
[17:32:56] *** Quits: Guest6100 (uid511277@user/cypris) (Quit: Connection closed for inactivity)
[17:33:14] <jmiehe> greatgatsby: just "pip install ."
[17:33:30] <jmiehe> https://github.com/ldericher/fftcgtool/tree/develop this is the package
[17:33:32] <greatgatsby> jmiehe, ok, I thought maybe you had used -e
[17:33:38] *** Quits: hays (rootvegeta@fsf/member/hays) (Quit: hays)
[17:33:40] *** Quits: NeilRG (~NeilRG@192.222.196.111) (Remote host closed the connection)
[17:33:57] *** Joins: hays (rootvegeta@fsf/member/hays)
[17:34:10] <Yhg1s> jmiehe: your setup.py doesn't contain any directives to install modules or packages.
[17:34:15] *** Joins: NeilRG (~NeilRG@192.222.196.111)
[17:34:32] <jpic> Wuniu: ever heard about lantern by brave new software?
[17:34:32] <Yhg1s> jmiehe: you need 'packages' or 'py_modules' (in this case, the former) for it to install modules or packages.
[17:35:36] <Wuniu> jpic: it hasn't worked for a long time
[17:35:43] *** Joins: very_sneaky (~very_snea@user/very-sneaky/x-7432109)
[17:35:50] *** Joins: pkapp (~pkapp@c-75-74-40-214.hsd1.fl.comcast.net)
[17:36:08] *** Quits: cidtest (~cidtest@185.156.172.202) (Quit: WeeChat 3.2)
[17:36:29] <Wuniu> even it works, it is too slow to visit a single website.
[17:36:31] <jmiehe> Yhg1s: oh that's the issue
[17:36:49] <jmiehe> Yhg1s: thought I wouldn't need any of that with setuptools-pipfile
[17:37:04] *** Joins: petemc (~pete@vps-80fad31a.vps.ovh.net)
[17:37:07] *** Joins: andrewSC (~andrewSC@archlinux/trusteduser/andrewSC)
[17:37:35] <jpic> Wuniu: i guess that's why they were recruiting, is it still defunct?
[17:37:38] <Yhg1s> jmiehe: oh, that might be. I've never bothered with Pipfile.
[17:37:44] <Mathisen> solved, if not rows: seem to work. another question.. is there some way to just halt the code and not exit the hole thing in a easy way. i want my code to stop and not use something like  sys.exit() i want to keep the program alive
[17:38:11] <Yhg1s> jmiehe: but in that case, your Pipfile should be listing what to install. It doesn't appear to mention your package at all.
[17:38:48] <Wuniu> jpic: i dont use it since 2018, or 2019. i'll try.
[17:38:49] *** Quits: NeilRG (~NeilRG@192.222.196.111) (Ping timeout: 252 seconds)
[17:39:23] <jmiehe> Yhg1s: I found pipenv useful for development, so I thoght it's only logical to use it for dependencies in the package.
[17:39:28] *** Quits: y1n (~y1n@84-115-64-142.wifi.dynamic.surfer.at) (Ping timeout: 252 seconds)
[17:39:29] <jpic> they were recruiting 6 months ago so I believe it should work ... otherwise I will get in touch with them and talk about it
[17:39:55] <Yhg1s> jmiehe: pipenv is meh, but sure. However, I'm not talking about *dependencies* of your package. I'm talking about *your package*.
[17:40:03] *** Joins: carl-- (~carl-@185.103.188.130)
[17:40:31] <jmiehe> Yhg1s: but you're right, `packages=find_packages()` helped
[17:41:05] *** Joins: mefistofeles (~mefistofe@user/mefistofeles)
[17:41:39] *** Quits: tlgs (~tlgs@188-141-56-55.dynamic.upc.ie) (Quit: Leaving)
[17:42:37] *** Quits: mefistofeles (~mefistofe@user/mefistofeles) (Client Quit)
[17:43:11] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[17:43:33] *** Joins: azidhaka (~azidhaka@user/azidhaka)
[17:44:10] *** Joins: rememberYou (~someone@user/rememberyou)
[17:46:34] *** Joins: carl--- (~carl-@c-138ee555.02-180-73746f39.bbcust.telenor.se)
[17:48:21] *** Joins: matsaman (~matsaman@user/matsaman)
[17:49:53] *** Quits: Milos (~Milos@user/milos) (Ping timeout: 252 seconds)
[17:50:02] *** Quits: sarna (~sarna@c40-227.icpnet.pl) (Ping timeout: 245 seconds)
[17:50:13] *** Quits: carl-- (~carl-@185.103.188.130) (Ping timeout: 265 seconds)
[17:50:42] *** Quits: Wuniu (~Thunderbi@user/wuniu) (Ping timeout: 265 seconds)
[17:50:50] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[17:52:59] *** Joins: y1n (~y1n@84-115-64-142.wifi.dynamic.surfer.at)
[17:54:17] *** Quits: CyberShadow (vladimir@89.28.117.31) (Ping timeout: 252 seconds)
[17:54:31] *** Joins: pycode (~pycode@2001:b07:5d28:551:dd34:c2b:75d4:33f7)
[17:55:23] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Ping timeout: 252 seconds)
[17:55:52] *** Quits: Bato (~plauder@2001:bc8:182c:b39::1) (Quit: No Ping reply in 180 seconds.)
[17:56:18] *** Quits: Thanatos (~Thanatos@ec2-54-148-37-124.us-west-2.compute.amazonaws.com) (Remote host closed the connection)
[17:56:24] *** Quits: elkclone (~elkclone@user/elkclone) (Quit: Leaving)
[17:56:42] *** Joins: Thanatos (~Thanatos@ec2-54-148-37-124.us-west-2.compute.amazonaws.com)
[17:56:43] *** Quits: rememberYou (~someone@user/rememberyou) (Remote host closed the connection)
[17:57:19] <azidhaka> Hi everyone, what is the correct way to see if a variable is of <class 'pyad.aduser.ADUser'>
[17:57:19] *** Joins: Bato (~plauder@2001:bc8:182c:b39::1)
[17:57:40] *** Joins: ham5urg (~ham5urg@149.233.240.203.dynamic-pppoe.dt.ipv4.wtnet.de)
[17:57:50] *** Joins: thiras (~thiras@user/thiras)
[17:58:02] *** Quits: Jefren (~Jefren@70.35.67.187) (Ping timeout: 250 seconds)
[17:58:21] *** Joins: todda7 (~torstein@240.red-81-37-247.dynamicip.rima-tde.net)
[17:58:25] <grym> azidhaka: isinstance(mything, pyad.aduser.ADUser)
[17:58:51] <ham5urg> How do I use ConfigArgParse to allow the user to choose one option out of an set of options (array)?
[17:59:16] <todda7> how to create a class/enum that is able to take only these values: WaterDamage.NONE, WaterDamage.PARTIAL("insert int number on init here"), WaterDamage.FULL
[17:59:27] <grym> ham5urg: choices=[...], in argparse
[17:59:39] *** Quits: zumba_addict (~zumba_add@c-71-194-58-34.hsd1.il.comcast.net) (Quit: Client closed)
[17:59:53] <matsaman> azidhaka: some people would use a try/except, though
[17:59:55] <grym> ham5urg: if this thing hasn't preserved that behavior in its API, then i don't know
[18:00:06] *** Quits: nyuszika7h (nyuszika7h@lykos/dev/nyuszika7h) (Quit: ZNC 1.8.2+deb2+b1 - https://znc.in)
[18:00:14] *** Joins: Jefren (~Jefren@70.35.67.152)
[18:00:18] <grym> todda7: enums can't do that
[18:00:32] *** Joins: Mattiasl_ (~Mattiasln@c188-148-207-108.bredband.tele2.se)
[18:01:03] <ham5urg> grym, thanks
[18:01:45] <DnzAtWrk> scipy regression model fit appears to freeze my pyaudio callback thread
[18:01:47] <DnzAtWrk> that makes no sense
[18:01:59] <Cheaterman> Yhg1s: We were talking about the fun times in Python.h land - I've been spending many hours on this segfault when my program exits, that was simply due to me not properly using Py_BLOCK_THREADS when destroying my program (and DECREF-ing my objects)
[18:01:59] *** Quits: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net) (Read error: Connection reset by peer)
[18:02:01] <azidhaka> grym: that's it, thanks
[18:02:13] *** Joins: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net)
[18:02:15] <Cheaterman> It happens. :-)
[18:02:47] *** Quits: Mattiaslndstrm (~Mattiasln@c188-148-207-108.bredband.tele2.se) (Ping timeout: 265 seconds)
[18:02:48] *** Quits: dob1 (~dob1@user/dob1) (Quit: quit)
[18:03:03] *** Quits: Bato (~plauder@2001:bc8:182c:b39::1) (Quit: No Ping reply in 180 seconds.)
[18:03:22] *** Joins: sarna (~sarna@c40-227.icpnet.pl)
[18:03:50] *** Joins: dob1 (~dob1@user/dob1)
[18:03:56] <DnzAtWrk> afaik, a thread shouldn't be entirely frozen, even if you run another multithreaded process
[18:04:03] <DnzAtWrk> so why the heck is the thread stopping
[18:04:10] *** Joins: cthulchu (~Cthulchu@193.194.107.250)
[18:04:32] <Cheaterman> (then again, I find that most problems with Python.h are down to me forgetting "the rules" in some places ; OTOH, I find it lovely that I can align the lifespan of Python objects with C++ ones, by increfing in their constructor and decrefing in their destructor)
[18:04:40] *** Quits: cthulchu (~Cthulchu@193.194.107.250) (Read error: Connection reset by peer)
[18:04:48] *** Joins: Bato (~plauder@2001:bc8:182c:b39::1)
[18:05:01] *** Joins: cthulchu (~Cthulchu@193.194.107.250)
[18:05:26] *** Joins: CyberShadow (vladimir@89.28.117.31)
[18:05:35] <DnzAtWrk> *shrug* guess I have no choice but to restart the microphone stream :P
[18:05:40] <DnzAtWrk> unpredictable
[18:05:50] *** Joins: GreenResponse (~tomek@r-45-155-148-237.gpon.bialnet.pl)
[18:05:50] *** Quits: cth (~Cthulchu@193.194.107.250) (Ping timeout: 252 seconds)
[18:08:00] *** Quits: Bato (~plauder@2001:bc8:182c:b39::1) (Client Quit)
[18:08:40] *** Quits: Jefren (~Jefren@70.35.67.152) (Ping timeout: 260 seconds)
[18:10:34] *** Joins: dogdisaster (dogdisaste@gateway/vpn/protonvpn/dogdisaster)
[18:10:51] *** Joins: Jefren (~Jefren@206.253.157.249)
[18:10:56] *** Joins: tg (~tg@rockylinux/infra/tg)
[18:12:15] *** Joins: t2mkn (~t2mkn@user/t2mkn)
[18:12:26] *** Quits: CyberShadow (vladimir@89.28.117.31) (Ping timeout: 252 seconds)
[18:12:49] *** Joins: tddschn (~textual@45.77.71.205)
[18:12:50] <azidhaka> I have a structure, which is tree-like, with unknown depth and i can use get_children() on each level. I need an idea how do i approach walking it from the bottom up (farthest children)
[18:13:01] *** Joins: ASUChander (~ASUChande@user/asuchander)
[18:13:18] <grym> azidhaka: something something networkx
[18:13:46] *** Joins: lalitmee__ (~lalitmee@180.94.33.123)
[18:15:33] *** Quits: iflema (~ian@user/iflema) (Quit: iflema)
[18:15:44] *** Joins: aead (~aead@user/aead)
[18:15:57] *** Joins: goldfish__ (~goldfish@user/goldfish)
[18:16:17] *** Quits: lalitmee_ (~lalitmee@180.94.33.105) (Ping timeout: 252 seconds)
[18:16:50] <azidhaka> grym: that would do it, thanks
[18:17:13] *** Joins: segfaultbanana (~segfaultb@user/segfaultbanana)
[18:17:19] <grym> azidhaka: "is graph? is not interview? networkx can do it, probably"
[18:17:20] <grym> :)
[18:17:27] *** Quits: hendursa1 (~weechat@user/hendursaga) (Quit: hendursa1)
[18:17:53] *** Joins: hendursaga (~weechat@user/hendursaga)
[18:19:07] *** Joins: B33F_1337 (~b33f1337@host.b33f1337.com)
[18:19:29] *** Joins: iflema (~ian@user/iflema)
[18:20:52] *** Joins: Bato (~plauder@fb0.eu)
[18:21:23] <gcbirzan> Making a set of one element that makes it easy to switch it to no elements is harder than it sounds... I ended up with set([]), but meh
[18:21:30] *** Quits: shad (~shad@user/shad) (Ping timeout: 260 seconds)
[18:21:38] *** Quits: Jefren (~Jefren@206.253.157.249) (Ping timeout: 265 seconds)
[18:22:05] <lericson> None-able type annotations still require using Optional[] in py3.10 right?
[18:22:14] *** Quits: Bato (~plauder@fb0.eu) (Client Quit)
[18:22:27] <jinsun_> gcbirzan: `set()`
[18:22:38] *** Joins: Milos (~Milos@user/milos)
[18:22:57] <gcbirzan> jinsun_: Yeah, and when you want to put a string in it, set('foo'). And ooops!
[18:23:04] <phy1729> gcbirzan: foo = set() | {...} ?
[18:23:14] *** Joins: NeilRG (~NeilRG@192.222.196.111)
[18:23:14] *** Joins: Jefren (~Jefren@70.35.67.5)
[18:23:31] <jinsun_> lericson: you can do, `T | None` in 3.10
[18:23:36] *** Quits: iflema (~ian@user/iflema) (Client Quit)
[18:24:01] <lericson> ah right of course jinsun_
[18:24:18] *** Joins: Bato (~plauder@2001:bc8:182c:b39::1)
[18:24:52] <gcbirzan> Though, here it doesn't matter if it's a dict or a set, I'm just testing with in, so {} and {'foo'} would work.
[18:26:30] <gcbirzan> Or we could just fire the person that puts wrong data in our DB, so I wouldn't need these hacks...
[18:26:49] <jinsun_> gcbirzan: that is really the fault of strings, str should have been made non iterable, maybe in 4.0
[18:27:29] *** Quits: herjazz (~herjazz@p6758124-ipngn30801marunouchi.tokyo.ocn.ne.jp) (Quit: leaving)
[18:27:42] *** Joins: damxsa (~damx@2001:16a2:ce7c:3300:3aeb:69cb:3de4:fb7b)
[18:27:46] *** Quits: NeilRG (~NeilRG@192.222.196.111) (Ping timeout: 252 seconds)
[18:27:55] *** Quits: Jefren (~Jefren@70.35.67.5) (Ping timeout: 265 seconds)
[18:28:28] <gcbirzan> Nah, I think strings should be iterable.
[18:28:43] <gcbirzan> And I wasn't saying it's the fault of sets, except for reusing {} to declare them
[18:28:57] <gcbirzan> Just noticing it's a bit of a trap heh
[18:29:13] *** Quits: damxsa (~damx@2001:16a2:ce7c:3300:3aeb:69cb:3de4:fb7b) (Client Quit)
[18:29:36] *** Joins: Jefren (~Jefren@70.35.66.197)
[18:30:04] <gcbirzan> What also is a trap is looking at it and going set('foo', ) and thinking it'll fix it, heh
[18:30:09] <gcbirzan> but that's 100% my fault
[18:30:48] *** Joins: Vornicus (~Vornicus@2603-8000-5d07-7ef0-fdef-e933-acae-0c55.res6.spectrum.com)
[18:30:55] *** Joins: zebrag (~chris@user/zebrag)
[18:31:50] *** Quits: zepolen (~zepolen@2a02:587:8611:2428:7d4d:8714:ada:4027) (Remote host closed the connection)
[18:32:08] *** Quits: bfoley (~bfoley@pool-173-48-101-113.bstnma.fios.verizon.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[18:32:15] *** Joins: zepolen (~zepolen@2a02:587:8611:2428:c763:b45:45be:c6f6)
[18:32:57] <fluter> hi
[18:33:11] *** Joins: dez (uid92154@user/dez)
[18:33:27] <fluter> is there any bad thing when using virtualenv2.7 to create a venv of py3?
[18:33:56] *** Quits: ppang (~ppang@user/ppang) (Quit: Leaving)
[18:34:16] <matsaman> fluter: not especially, if it works it works
[18:34:20] <matsaman> it's a separate dep, that's all
[18:34:31] <matsaman> I have heard it argued that it's nice to have a separate implementation, even
[18:34:52] <matsaman> I'm using py3's 'venv' lately myself, but I am actually glad there is the separate virtualenv for now
[18:35:01] <fluter> matsaman: ok, so in my box, there is only virtualenv2.7 ,  but i wanna work with 3.9
[18:35:09] <matsaman> fluter: oh oh I see what you're asking
[18:35:39] <fluter> so is the answer differnt? :P
[18:35:56] <matsaman> fluter: what's your OS?
[18:36:05] *** Quits: Jefren (~Jefren@70.35.66.197) (Ping timeout: 252 seconds)
[18:36:32] <fluter> matsaman: linux, centos7
[18:36:40] *** Quits: digilink (~digilink@user/digilink) (Ping timeout: 240 seconds)
[18:36:50] *** Quits: zln (~zln@c80-217-230-193.bredband.tele2.se) (Quit: WeeChat 3.2)
[18:36:59] *** Joins: adanwan (~adanwan@gateway/tor-sasl/adanwan)
[18:37:25] <grym> fluter: you'll have to have a 3.9 installation around, first; do you?
[18:37:36] <matsaman> yeah does centos even do py3?
[18:37:42] <grym> sure
[18:37:44] *** Quits: todda7 (~torstein@240.red-81-37-247.dynamicip.rima-tde.net) (Ping timeout: 252 seconds)
[18:37:48] <fluter> grym: yes, py3.9 is installed, just not virtualenv-3.9
[18:38:00] <grym> matsaman: pyenv works everywhere you can build/provide a reasonable openssl
[18:38:00] *** Joins: Jefren (~Jefren@70.35.66.126)
[18:38:01] <matsaman> grym: provided by centos?
[18:38:05] <matsaman> grym: okay that's what I thought =P
[18:38:06] *** Parts: syxi (~sy@omega.zm.is) ()
[18:38:07] <grym> fluter: so python3.9 -m venv is what i'd do
[18:38:13] *** Joins: nyuszika7h (nyuszika7h@lykos/dev/nyuszika7h)
[18:38:27] <matsaman> or you could use pipx the way the virtualenv docs suggest, probably
[18:38:50] *** Joins: digilink (~digilink@user/digilink)
[18:39:02] *** Quits: tga (~tga@user/tga) (Ping timeout: 265 seconds)
[18:39:07] <fluter> grym: ah ok
[18:39:13] <fluter> matsaman: pipx?
[18:39:16] *** Quits: zepolen (~zepolen@2a02:587:8611:2428:c763:b45:45be:c6f6) (Remote host closed the connection)
[18:39:20] <fluter> you mean pip install virtualenv
[18:39:22] <fluter> ?
[18:39:23] *** Quits: y1n (~y1n@84-115-64-142.wifi.dynamic.surfer.at) (Ping timeout: 252 seconds)
[18:39:41] *** Joins: zepolen (~zepolen@2a02:587:8611:2428:ce94:8d76:7cb4:e244)
[18:39:42] <matsaman> fluter: nah it's somethin' else
[18:39:44] <matsaman> https://virtualenv.pypa.io/en/latest/installation.html
[18:39:51] <matsaman> you've got lots of options
[18:39:52] *** Joins: CyberShadow (vladimir@89.28.117.31)
[18:39:57] <fluter> ah
[18:40:01] <matsaman> but since you're probably going out of your way to get python3 on centos7
[18:40:15] <matsaman> you'll probably have to similarly go out of your way to get a regular virtualenv for python3, too
[18:40:21] <matsaman> unless you want to use the built-in 'venv'
[18:41:23] *** Parts: greatgatsby (~greatgats@bras-base-toroon0411w-grc-52-142-114-106-7.dsl.bell.ca) (Leaving)
[18:41:31] *** Joins: greatgatsby (~greatgats@bras-base-toroon0411w-grc-52-142-114-106-7.dsl.bell.ca)
[18:45:36] *** Quits: milkt (~debian@gateway/tor-sasl/milkt) (Remote host closed the connection)
[18:47:49] *** Joins: milkt (~debian@gateway/tor-sasl/milkt)
[18:48:03] *** Joins: Meteorhead (~Meteorhea@165.225.205.11)
[18:48:09] *** Quits: bitplane (~bitplane@141.138.129.46) (Ping timeout: 256 seconds)
[18:48:26] <ham5urg> Is it possible with module re to tell which col/row made the regex fail? I load the whole file into a single string and let it through re.
[18:49:40] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 265 seconds)
[18:50:00] <matsaman> ham5urg: can you rephrase?
[18:50:41] <lericson> i think he wants to know why his regex isn't matching
[18:51:44] *** Joins: fikran (~fikran@user/fikran)
[18:52:12] *** Joins: junktext (~junktext@109.201.152.177)
[18:52:20] <ham5urg> from pathlib import Path    txt = Path('data.txt').read_text()        .... pattern.match(txt)
[18:52:24] *** Joins: akk (~akk@174-28-98-206.albq.qwest.net)
[18:52:39] <ham5urg> How do I get the position where the regex failed?
[18:52:48] <matsaman> it's going to be hard to say automagically why it's not matching if it's not matching
[18:52:52] <ham5urg> If the user provided a corrupt file
[18:52:57] <matsaman> ham5urg: maybe you can share some of your text and your pattern
[18:53:00] <lericson> it's generally not something re can do
[18:53:02] <matsaman> ham5urg: define 'corrupt'
[18:53:16] <lericson> if you need to tell your users where the error was, you need something like a lexer-parser
[18:53:23] <matsaman> you can certainly evaluate if a file or format matches certain criteria
[18:53:29] *** Joins: Seiryuu (~Seiryuu@ip174-103-176-143.adsl2.static.versatel.nl)
[18:53:41] *** Quits: Seiryuu (~Seiryuu@ip174-103-176-143.adsl2.static.versatel.nl) (Client Quit)
[18:55:34] <ham5urg> lericson, I understand. I would need something like c++-spirit I guess. https://www.boost.org/doc/libs/1_77_0/libs/spirit/doc/html/spirit/introduction.html
[18:56:17] <ham5urg> Can you recommend some Py3 module for such a task?
[18:56:31] <lericson> pyparsing i heard is ok
[18:56:46] <lericson> https://pyparsing-docs.readthedocs.io/en/latest/pyparsing.html
[18:56:47] *** Joins: shad (~shad@user/shad)
[18:56:49] <grym> ham5urg: parsimonious, too
[18:57:53] *** Joins: georgios (~georgios@user/georgios)
[18:58:20] <lericson> i bet they wish they had parsimonious when they wrote the parser for parsimonious
[18:59:09] *** Joins: vicfred (~vicfred@user/vicfred)
[18:59:11] *** Quits: vicfred (~vicfred@user/vicfred) (Client Quit)
[18:59:12] <lericson> oh it is
[18:59:52] <lericson> wow nerd itch scratched
[19:02:10] *** Joins: NeilRG (~NeilRG@192.222.196.111)
[19:03:38] *** Joins: deepy (deepy@user/deepy)
[19:04:21] <grym> iirc parsimonious was born of a deep and personal hatred of mediawiki syntax
[19:04:21] *** Quits: azidhaka (~azidhaka@user/azidhaka) (Quit: azidhaka)
[19:04:41] <lericson> a tale as old as time
[19:04:54] <lericson> well, as old as mediawiki syntax
[19:04:58] <grym> :D
[19:05:06] <grym> spite-driven development works okay sometimes
[19:05:06] *** Joins: RickDeckard (~RickDecka@pool-100-12-189-215.nycmny.fios.verizon.net)
[19:05:49] <Cheaterman> lol it totally does
[19:05:49] <lericson> no doubt
[19:06:49] *** Quits: GenTooMan (~cyberman@2601:547:437f:e5c6:21f:5bff:fefe:a883) (Ping timeout: 252 seconds)
[19:07:30] *** Quits: yano (~yano@ircpuzzles/staff/yano) (Quit: WeeChat, the better IRC client, https://weechat.org/)
[19:07:48] *** Joins: yano (~yano@ircpuzzles/staff/yano)
[19:11:32] *** Joins: _bt (~bt@194.73.96.6)
[19:13:24] *** Joins: drjp (jeanpaul@112-54-174-82.ftth.glasoperator.nl)
[19:14:55] *** Quits: dogdisaster (dogdisaste@gateway/vpn/protonvpn/dogdisaster) (Remote host closed the connection)
[19:15:01] *** Quits: pycurious (~Adium@user/pycurious) (Quit: Leaving.)
[19:15:21] *** Joins: node1 (~node1@user/node1)
[19:16:03] *** Joins: orion (~orion@user/orion)
[19:17:01] <_bt> hello, a little help please? i have a dict {1: 'xx', 6: 'xx', 7: 'xx', 9: 'xx', 11: 'xx', 14: 'xx', 16: 'xx', 18: 'x', 20: 'xx', 22: 'xx', 24: 'xx', 25: 'xx', 27: 'xx', 31: 'xx'}, imagine the dict keys are page numbers, i'd like to output "first" and "last" page from the whole range of keys, splitting on the page boundaries
[19:17:28] <_bt> so in the above case i want 1,5   6,6    7,8   9,10   etc
[19:17:49] *** Quits: Mattiasl_ (~Mattiasln@c188-148-207-108.bredband.tele2.se) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[19:19:14] <node1> Iterate the dict and find the maximum and minimum key from it. And then consider it first = minimum , last= maximum.
[19:19:27] <Lvl4Sword> bt, Is this for a website or something?
[19:19:41] *** Joins: GenTooMan (~cyberman@2601:547:437f:e5c6:21f:5bff:fefe:a883)
[19:19:50] <Lvl4Sword> _bt: ^
[19:19:57] <_bt> no it's not for a website
[19:20:25] <_bt> node1> Iterate the dict and find the maximum and minimum key from it. And then consider it first = minimum , last= maximum.  << this doesn't solve the problem
[19:20:40] <Lvl4Sword> Where's this problem from?
[19:21:04] *** Parts: orion (~orion@user/orion) (Leaving...)
[19:21:05] <yitz> zip(d.keys(), [i-1 for i in d][1:])
[19:21:18] <yitz> _bt: ^
[19:21:31] *** Quits: dreadedfrog (~user@193.160.129.69) (Remote host closed the connection)
[19:21:40] <The-Compiler> wow :)
[19:22:21] <The-Compiler> could drop the .keys() too, I certainly didn't expect such a short and elegant solution
[19:22:51] *** Joins: harpia (~harpia@58.148.205.168.dynamic.vibefibra.com.br)
[19:23:24] *** Joins: Adrixan (~Adrixan@218.72.75.34.bc.googleusercontent.com)
[19:23:31] <yitz> Ugh. Yeah. zip takes an iterable
[19:23:31] *** Joins: asthasr (~asthasr@162.210.28.151)
[19:23:35] <node1> Since you shown a dict ( key value pair)  and wanted us to consider key as page number. Then  you said you wanted the first, last page. I belive a pages in a book is written in ascending order like natural numbers.
[19:24:05] <_bt> yitz, perfect, thank you! very elegant. i need to increase my skills
[19:24:27] <node1> Anyway what do you mean here `splitting on the page boundaries` ?
[19:24:31] <_bt> node1, consider the pages are barcoded, and the dict key is the barcoded page number, and the value is the barcode
[19:24:54] <_bt> assume page1 always starts with a barcode, then following pages may or may not contain a barcode
[19:25:13] <_bt> a document is formed by a barcode and every unbarcoded page after that
[19:25:15] *** Joins: lalitmee_ (~lalitmee@180.94.32.1)
[19:25:20] *** Joins: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br)
[19:25:25] *** Joins: drew` (~drew@user/drew)
[19:25:38] *** Quits: drew (~drew@user/drew) (Read error: Connection reset by peer)
[19:25:45] *** drew` is now known as drew
[19:25:47] <node1> Rephrase your question again.
[19:26:09] <yitz> node1: the question phrasing is pretty terrible but the example output illustrates it decently well
[19:26:24] <_bt> indeed
[19:26:26] <node1> yes yitz
[19:26:28] <_bt> thanks all for help
[19:26:37] <yitz> Put succintly, they want:  zip(d, [i-1 for i in d][1:])
[19:27:25] *** Quits: thiras (~thiras@user/thiras) (Ping timeout: 260 seconds)
[19:27:39] *** Quits: carl--- (~carl-@c-138ee555.02-180-73746f39.bbcust.telenor.se) (Remote host closed the connection)
[19:27:51] *** Quits: lalitmee__ (~lalitmee@180.94.33.123) (Ping timeout: 265 seconds)
[19:28:03] *** Quits: adanwan (~adanwan@gateway/tor-sasl/adanwan) (Ping timeout: 276 seconds)
[19:28:14] *** Joins: lalitmee (~lalitmee@180.94.32.26)
[19:28:46] *** Joins: hnOsmium0001 (uid453710@id-453710.stonehaven.irccloud.com)
[19:30:16] *** Quits: lalitmee_ (~lalitmee@180.94.32.1) (Ping timeout: 265 seconds)
[19:30:26] *** Joins: Blackpajamas (~Blackpaja@24-246-42-203.cable.teksavvy.com)
[19:30:59] <Fieldy> anyone happen to know of a pytorch community on irc? there is a channel here with no ops and maybe 5 users
[19:31:06] *** Quits: node1 (~node1@user/node1) (Quit: Leaving)
[19:31:16] *** Quits: _bt (~bt@194.73.96.6) (Quit: Leaving)
[19:31:54] <grym> Fieldy: here usually works
[19:32:01] <Fieldy> ah ok
[19:32:02] *** Joins: bfoley (~bfoley@pool-173-48-101-113.bstnma.fios.verizon.net)
[19:32:05] *** Quits: vats (~vats@180.149.226.8) (Ping timeout: 260 seconds)
[19:32:14] *** Quits: Proxysna_ (~Proxysna@62.119.254.142) (Remote host closed the connection)
[19:32:58] <Fieldy> i'm messing with machine learning via gpt-neo. pytorch is commonly used with it. however i started with happytransformers, which makes it easier, but appears to be feature-limited and not documented so well. that's a layer on top of something else, which is a layer on top of pytorch. so i'm thinking i just need to learn pytorch as there is much more help out there regarding it
[19:33:38] <Fieldy> this was my motivator for starting python though :)
[19:34:29] <CrtxReavr> dict            2628/tcp   #RFC 2229
[19:34:29] <CrtxReavr> dict            2628/udp   #RFC 2229
[19:34:44] <CrtxReavr> Registered IP protocol called "dict" - interesting.
[19:34:56] *** loki_val is now known as crabbedhaloablut
[19:35:00] <Fieldy> yeah there are tons of them almost no one has heard of /etc/services
[19:35:44] <CrtxReavr> Most /etc/services files are actually rather short, compared to the full list maintained by IANA.
[19:36:10] *** Joins: mefistofeles (~mefistofe@user/mefistofeles)
[19:36:43] <CrtxReavr> Also - trivia not many seem to know - Windows has a services file: c:\windows\system32\drivers\etc\services
[19:36:45] *** Joins: __that__ (~Guest58@195.59.68.214)
[19:37:15] <__that__> Hi there
[19:37:44] *** Joins: ub (~Thunderbi@178.165.164.206.wireless.dyn.drei.com)
[19:38:30] *** Quits: raxor2k (~raxor2k@78.158.248.158) ()
[19:38:45] <__that__> The dataframe in there has got the local_Date Series as object instead of datetime64. The same dataframe stored as UTC it is actually read as datetime64. Does anyone have a clue why please?
[19:38:50] <__that__> https://dpaste.com/D76NATARR
[19:39:10] <__that__> I am going mad with Pandas
[19:40:43] <__that__> I am not 100% why on earth Pandas read that dataframe with local_Date as object rather than datetime64
[19:40:54] *** Joins: kuler (~kulernil@gateway/tor-sasl/kuler)
[19:41:01] *** Quits: tokerboker (~tokerboke@c-73-71-182-125.hsd1.ca.comcast.net) (Remote host closed the connection)
[19:41:35] *** Joins: lalitmee_ (~lalitmee@180.94.33.208)
[19:42:04] *** Quits: wib_jonas (~wib_jonas@business-37-191-60-209.business.broadband.hu) (Quit: Client closed)
[19:42:38] *** Quits: lalitmee (~lalitmee@180.94.32.26) (Ping timeout: 252 seconds)
[19:43:40] <__that__> Or in its default how can In convert it to datetime64. I just don't understand well what's going on. Can pandas create a datetimed64 off a csv files with other timezone other than UTC?
[19:44:20] *** Quits: sarna (~sarna@c40-227.icpnet.pl) (Ping timeout: 260 seconds)
[19:44:43] *** Quits: lack (~lack@user/lack) (Ping timeout: 252 seconds)
[19:45:29] *** Joins: Hax0r (~Hax0r@128.127.222.236)
[19:46:20] <voidcat> I have a library that I am stopping supporting in favour of another library I've written. I want to warn the user not to use the library. a DeprecationWarning in __init__.py seems like the right thing, but the docs say it's ignored by default. what should I use?
[19:47:51] *** Joins: node1 (~node1@user/node1)
[19:48:30] *** Joins: Wuniu (~Thunderbi@user/wuniu)
[19:49:54] *** Joins: darksun (~darksun@user/darksun)
[19:50:07] *** Joins: LiftLeft (~LiftLeft@216-26-118-34.dynamic.nelson.airstreamcomm.net)
[19:52:07] *** Quits: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net) (Remote host closed the connection)
[19:52:21] *** Joins: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net)
[19:53:04] *** Joins: uhu (~uhu@2a01:4f9:c010:1087::2)
[19:53:32] <CrtxReavr> o_O
[19:54:04] <CrtxReavr> If the library is a module, the code in __init__.py should be executed on import.
[19:54:47] *** Quits: ferz (~ferz@93-39-142-17.ip76.fastwebnet.it) (Read error: Connection reset by peer)
[19:54:57] *** Joins: Xaldafax (~xaldafax@cpe-198-72-160-101.socal.res.rr.com)
[19:55:01] *** Joins: vd (~vd@bras-base-mtrlpq2848w-grc-41-70-53-240-121.dsl.bell.ca)
[19:56:20] *** Joins: sarna (~sarna@c40-227.icpnet.pl)
[19:56:56] *** Quits: ham5urg (~ham5urg@149.233.240.203.dynamic-pppoe.dt.ipv4.wtnet.de) (Ping timeout: 252 seconds)
[19:57:50] <voidcat> CrtxReavr, correct, but as the docs say: "Base category for warnings about deprecated features when those warnings are intended for other Python developers (ignored by default, unless triggered by code in __main__)"
[19:58:15] <voidcat> you have to enable a flag on the interpreter to even see it
[19:59:58] <jinsun__> use stacklevel=2 in the warn function to throw the warning where the function is being called from
[20:00:11] *** Joins: magla (~gelignite@55d44c2f.access.ecotel.net)
[20:00:13] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[20:00:14] <jinsun__> then at eat you will see the warning if your function was directly called from main
[20:00:47] *** Quits: Jefren (~Jefren@70.35.66.126) (Ping timeout: 252 seconds)
[20:00:48] *** jinsun is now known as Guest656
[20:00:48] *** jinsun__ is now known as jinsun
[20:00:54] <voidcat> but what if the library is imported in not-main?
[20:01:00] <jinsun> s/eat/least
[20:02:33] <sco1> Is this really something you need to issue to people at runtime?
[20:02:33] *** Joins: d00gy (~d00gy@user/d00gy)
[20:02:39] *** Joins: Jefren (~Jefren@70.35.67.201)
[20:03:06] <voidcat> yes, in case they previously used the library and didn't read the new readme when it was updated
[20:03:40] *** Quits: NeilRG (~NeilRG@192.222.196.111) (Ping timeout: 240 seconds)
[20:04:25] *** Joins: shangxiao (~davids@124.187.193.187)
[20:04:31] *** Joins: lack (~lack@user/lack)
[20:05:32] *** Joins: mort (~mort@188.166.114.29)
[20:06:40] *** Quits: p-i-_ (~Ohmu@mx-ll-223.206.69-159.dynamic.3bb.co.th) (Remote host closed the connection)
[20:06:50] *** Quits: Jefren (~Jefren@70.35.67.201) (Ping timeout: 252 seconds)
[20:06:58] <__that__> is actually reading off a csv with pandas that it is in local time even possible? I get the column as object all the time
[20:07:15] *** Joins: p-i- (~Ohmu@223.206.69.159)
[20:07:21] *** Quits: strive (~strive@user/strive) (Remote host closed the connection)
[20:08:15] <mort> so, I don't understand. I have installed `python3-serial`. I have a `/usr/lib/python3/dist-packages/serial`. But if I do `import serial` with python3, python just says "ModuleNotFoundError: No module named 'serial'".
[20:08:24] <mort> Why can't python3 find my python3 packages?
[20:08:53] *** Quits: lack (~lack@user/lack) (Client Quit)
[20:08:59] *** Joins: Jefren (~Jefren@70.35.66.83)
[20:09:33] <grym> mort: what's python3 -m site
[20:09:35] <CrtxReavr> How were they installed?  What OS?
[20:09:56] <grym> mort: and, is /usr/lib/python3/dist-packages/ on that list
[20:09:58] <mort> oh. Damn. Sorry.
[20:10:21] <mort> I was doing this in a shell where I had sourced a script which changed the python import path
[20:10:30] <grym> tada
[20:10:46] <mort> those scripts should always change your $PS1 imo so that you can tell when your environment is different
[20:10:53] *** Joins: lack (~lack@user/lack)
[20:10:56] <grym> better: don't activate
[20:10:59] <grym> just call explicitly
[20:11:02] <__that__> just realised that pandas convert anything to object where there are more than one timezone
[20:11:34] *** Quits: Wuniu (~Thunderbi@user/wuniu) (Remote host closed the connection)
[20:11:36] *** Joins: w0rp (w0rp@2a01:7e00::f03c:91ff:fedb:589)
[20:12:01] *** Joins: Wuniu (~Thunderbi@user/wuniu)
[20:12:43] *** Joins: ferz (~ferz@93-39-142-17.ip76.fastwebnet.it)
[20:15:32] *** Joins: Seiryuu (~Seiryuu@ip174-103-176-143.adsl2.static.versatel.nl)
[20:15:33] *** Quits: lack (~lack@user/lack) (Client Quit)
[20:16:00] *** Quits: segfaultbanana (~segfaultb@user/segfaultbanana) (Remote host closed the connection)
[20:17:20] *** Joins: segfaultbanana (~segfaultb@user/segfaultbanana)
[20:18:34] *** Quits: Staunch (~Staunch@c-24-7-237-208.hsd1.mn.comcast.net) (Ping timeout: 240 seconds)
[20:20:07] *** Quits: legola (~legola@46.235.100.27) (Remote host closed the connection)
[20:20:26] *** AnySomebody is now known as Confusioned
[20:21:10] *** Quits: Jefren (~Jefren@70.35.66.83) (Ping timeout: 252 seconds)
[20:21:19] *** Joins: legola (~legola@46.235.100.27)
[20:23:20] *** Joins: Jefren (~Jefren@70.35.66.57)
[20:23:56] *** Quits: shlomif (~shlomif@87.68.240.100.adsl.012.net.il) (Quit: Shlomi Fish ("Rindolf") has left the server. “Chuck Norris was challenged to fight the world, and accepted. He bet on himself, won, and collected the bet money.”)
[20:24:00] *** Joins: white_shadow (~white_sha@user/white-shadow/x-1132694)
[20:24:19] *** Joins: kr0nk (~kr0nk@user/kr0nk)
[20:25:02] *** Joins: thiras (~thiras@user/thiras)
[20:25:51] *** Quits: legola (~legola@46.235.100.27) (Ping timeout: 265 seconds)
[20:26:09] <Wuniu> mort: you may better use pip
[20:26:18] <mort> why
[20:27:12] *** Joins: hyskaru (~hyskaru@user/hyskaru)
[20:27:13] *** Quits: pycode (~pycode@2001:b07:5d28:551:dd34:c2b:75d4:33f7) (Ping timeout: 252 seconds)
[20:27:18] *** Quits: jinsun (~quassel@user/jinsun) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[20:27:42] <Wuniu> mort: it wont cause problems, like 'python3 cant find python3 packages'
[20:27:50] <mort> incorrect
[20:28:06] *** Quits: PaddyF (~PaddyF@user/paddyf) (Quit: bye)
[20:28:28] <Wuniu> :(
[20:28:28] <grym> pip+venv will resolve those problems; pip + system package manager + user site may exacerbate them
[20:29:06] <CrtxReavr> Wuniu, he already figured out his issues and typed what it was. . . look at 40 after the hour.
[20:29:14] *** Quits: GreenResponse (~tomek@r-45-155-148-237.gpon.bialnet.pl) (Ping timeout: 265 seconds)
[20:29:15] *** Quits: Guest656 (~quassel@user/jinsun) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[20:29:18] *** Joins: FluffyMask (~masque@user/fluffymask)
[20:29:19] *** Joins: jinsun (~quassel@user/jinsun)
[20:29:19] *** Quits: jinsun (~quassel@user/jinsun) (Client Quit)
[20:29:27] <CrtxReavr> Nope. . . you can still mess up the environment inside a venv.
[20:29:37] *** Quits: ShorTie (~ShorTie@205.sub-72-105-247.myvzw.com) (Ping timeout: 245 seconds)
[20:29:45] *** Joins: jinsun (~quassel@user/jinsun)
[20:29:50] *** Quits: Jefren (~Jefren@70.35.66.57) (Ping timeout: 260 seconds)
[20:30:05] *** Joins: ShorTie (~ShorTie@112.sub-72-108-77.myvzw.com)
[20:30:13] *** Quits: tddschn (~textual@45.77.71.205) (Ping timeout: 265 seconds)
[20:30:30] <mort> the solution is to not have an environment where $PATH is set such that `python3` refers to the wrong python3
[20:31:37] <grym> mort: said differently, you can also always /full/path/to/the/interpreter
[20:31:40] *** Joins: Jefren (~Jefren@206.253.157.220)
[20:31:41] *** Quits: theprophet (~theprophe@85.114.228.184) (Quit: Client closed)
[20:33:02] *** Quits: hyskaru (~hyskaru@user/hyskaru) (Quit: hyskaru)
[20:33:13] *** Quits: mIk3_08 (~Thunderbi@user/mik3-08/x-2852566) (Quit: mIk3_08)
[20:35:15] *** Joins: irrgit (~irrgit@192.241.175.183)
[20:38:05] *** Quits: Wuniu (~Thunderbi@user/wuniu) (Quit: I'm tired, have a good time!)
[20:38:32] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[20:39:17] *** Quits: Jefren (~Jefren@206.253.157.220) (Ping timeout: 252 seconds)
[20:40:59] *** Joins: Jefren (~Jefren@70.35.66.223)
[20:41:41] *** Quits: mozgalom (~mozgalom@IPnet-gw.157.157.97.111.simnet.is) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[20:46:40] *** Joins: nomic (~nomic@185.192.69.188)
[20:48:05] *** Quits: kr0nk (~kr0nk@user/kr0nk) (Quit: leaving)
[20:48:27] *** Joins: kr0nk (~kr0nk@user/kr0nk)
[20:48:35] *** Joins: Betal (~Betal@user/betal)
[20:50:08] *** Quits: nomic (~nomic@185.192.69.188) (Client Quit)
[20:50:09] *** Quits: Foxyloxy (~foxyloxy@cpc151593-shef16-2-0-cust343.17-1.cable.virginm.net) (Read error: Connection reset by peer)
[20:50:46] *** Joins: Foxyloxy (~foxyloxy@cpc151593-shef16-2-0-cust343.17-1.cable.virginm.net)
[20:53:07] *** Quits: Meteorhead (~Meteorhea@165.225.205.11) (Quit: Client closed)
[20:53:29] *** Joins: nomic (~nomic@185.192.69.188)
[20:54:09] *** Joins: maryo (~Maryo@user/maryo)
[20:57:01] *** Quits: nomic (~nomic@185.192.69.188) (Client Quit)
[20:58:41] *** Joins: luna-is-here (~quassel@2a02:908:f761:2a3c::a)
[20:58:55] *** Joins: catern (~sbaugh@2604:2000:8fc0:b:a9c7:866a:bf36:3407)
[20:58:59] *** Joins: pycode (~pycode@2001:b07:5d28:551:6b03:f3a5:ca29:3095)
[20:59:12] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 265 seconds)
[20:59:22] *** Quits: __that__ (~Guest58@195.59.68.214) (Quit: Client closed)
[20:59:28] <catern> dear lazyirc, what's the best way to iterate over the fields defined in a dataclass class, without an actual instance of that class?
[20:59:28] *** Joins: LuxuryMode (uid91005@id-91005.ilkley.irccloud.com)
[20:59:41] *** Joins: philipp64|work (~philipp64@mail.redfish-solutions.com)
[21:01:06] *** Joins: fikran (~fikran@user/fikran)
[21:02:00] *** Joins: kickingvegas (~cchoi@c-24-5-40-20.hsd1.ca.comcast.net)
[21:02:10] *** Joins: mohabaks (~mohabaks@gateway/tor-sasl/mohabaks)
[21:02:23] *** Quits: maryo (~Maryo@user/maryo) (Quit: Leaving)
[21:02:46] *** Joins: maryo (~Maryo@user/maryo)
[21:04:07] <jinsun> catern: `for field in dataclasses.fields(YourDataClass): print(field.name)`
[21:05:14] <catern> jinsun: oh, thanks for solving my laziness heh, I though fields worked only on instances. perfect! thanks!
[21:06:48] *** Joins: bn_work (uid268505@id-268505.highgate.irccloud.com)
[21:06:51] *** Joins: heco_ (~redrum@user/redrum88)
[21:06:57] *** Quits: heco_ (~redrum@user/redrum88) (Remote host closed the connection)
[21:07:34] *** Quits: bfoley (~bfoley@pool-173-48-101-113.bstnma.fios.verizon.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[21:07:45] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Quit: = "")
[21:08:22] *** Joins: jab416171 (~jab416171@c-174-52-53-66.hsd1.ut.comcast.net)
[21:08:55] *** Quits: m4r35n357 (~m4r35n357@host-92-20-120-36.as13285.net) (Quit: Leaving)
[21:10:05] *** Quits: heco (~redrum@user/redrum88) (Ping timeout: 252 seconds)
[21:10:37] *** Joins: bfoley (~bfoley@pool-173-48-101-113.bstnma.fios.verizon.net)
[21:11:03] *** Quits: philipp64|work (~philipp64@mail.redfish-solutions.com) (Quit: philipp64|work)
[21:11:41] * foo looks for vehicle API 
[21:15:12] *** Joins: Sky_Net (~Sky_Net@176.14.213.85)
[21:15:13] *** Joins: fedenix (~fedenix@gateway/tor-sasl/fedenix)
[21:16:23] *** Quits: aleks (~aleks@user/aleks) (Quit: Client closed)
[21:17:14] *** Quits: lalitmee_ (~lalitmee@180.94.33.208) (Ping timeout: 252 seconds)
[21:17:22] *** Joins: Sheilong (uid293653@id-293653.ilkley.irccloud.com)
[21:17:38] *** Quits: Linux77 (~Linux7_7@186.233.182.237) (Read error: Connection reset by peer)
[21:18:04] *** Joins: theprophet (~theprophe@85.114.228.184)
[21:18:21] *** Quits: mexen (uid495612@user/mexen) (Quit: Connection closed for inactivity)
[21:18:23] *** Joins: nomic (~nomic@185.192.69.188)
[21:18:55] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.2.1)
[21:18:55] *** Quits: pycode (~pycode@2001:b07:5d28:551:6b03:f3a5:ca29:3095) (Ping timeout: 252 seconds)
[21:19:13] *** Joins: Midjak (~Midjak@82-65-111-221.subs.proxad.net)
[21:20:45] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[21:20:59] <foo> huh, pip install ___ works on one system but not on the other. I must need to update a pip package list or such?
[21:21:20] *** Joins: rpkilby (~rpkilby@ec2-34-252-84-235.eu-west-1.compute.amazonaws.com)
[21:21:37] *** Quits: RangerBobVA (~bmaddox@user/rangerbobva) (Quit: Leaving)
[21:22:41] *** Joins: mat001_ (~mat001@c-73-223-64-126.hsd1.ca.comcast.net)
[21:24:39] <foo> Ah, my version of python isn't supported. Requires => 3.7
[21:24:53] <foo> I doubt I should see any breakage going from 3.6.8 to 3.7, eh?
[21:25:09] *** Quits: Ergo^ (~ergo@91.238.59.144) (Remote host closed the connection)
[21:25:14] <jean-luc> gl hf
[21:25:39] <grym> foo: i think the only gotcha is if you were foolish enough to use `async` or `await` as variable names
[21:25:40] *** Quits: mat001 (~mat001@c-73-223-64-126.hsd1.ca.comcast.net) (Ping timeout: 240 seconds)
[21:25:46] *** Quits: DnzAtWrk (~DnzAtWrk@mobile-access-5673bf-42.dhcp.inet.fi) (Read error: Connection reset by peer)
[21:25:55] <grym> then 3.7 will not permit you to do that
[21:25:59] <foo> grym: oh, nah. :)
[21:26:38] *** Joins: RangerBobVA (~bmaddox@user/rangerbobva)
[21:28:09] <grym> then you should be gtg
[21:28:16] <grym> foo: and hey, just in time; 3.6.x is EOL in december
[21:28:19] <grym> beat the rush!
[21:29:04] <foo> grym: Oh! Hmm, I'll jump to 3.7.9.
[21:29:07] <foo> grym: thanks. :)
[21:29:13] <grym> foo: why not 3.9, really
[21:29:15] <grym> :)
[21:29:55] <foo> grym: right now, for this immediate package I want that requires 3.7, I'm looking for the least amount of breakage risk. Once I get going here, I'll try to go straight to 3.9. We have some older libraries I got to check in with and see if we have any issues.
[21:30:04] <foo> grym: thanks :)
[21:30:11] *** Quits: wolfgang (~wolfgang@101.174.6.197) (Remote host closed the connection)
[21:34:10] *** Quits: harpia (~harpia@58.148.205.168.dynamic.vibefibra.com.br) (Quit: harpia)
[21:34:12] <foo> grym: if id is not None ... hmm, I wonder if using id variable is bad form.
[21:34:35] *** Quits: georgios (~georgios@user/georgios) (Ping timeout: 260 seconds)
[21:34:57] *** Joins: harpia (~harpia@58.148.205.168.dynamic.vibefibra.com.br)
[21:35:40] *** Quits: Norore (~weechat@balder.ens.fr) (Quit: WeeChat 1.9.1)
[21:37:29] *** Quits: bfoley (~bfoley@pool-173-48-101-113.bstnma.fios.verizon.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[21:37:49] *** Quits: white_shadow (~white_sha@user/white-shadow/x-1132694) (Quit: Leaving)
[21:37:59] *** Joins: bfoley (~bfoley@pool-173-48-101-113.bstnma.fios.verizon.net)
[21:38:24] *** Joins: GreenResponse (~tomek@r-45-155-148-237.gpon.bialnet.pl)
[21:38:30] *** Joins: ub1 (~Thunderbi@77.119.174.203.wireless.dyn.drei.com)
[21:39:14] *** Quits: ub (~Thunderbi@178.165.164.206.wireless.dyn.drei.com) (Ping timeout: 252 seconds)
[21:40:02] *** Quits: shad (~shad@user/shad) (Quit: WeeChat 3.0)
[21:40:19] *** Joins: shad (~shad@user/shad)
[21:40:22] *** Quits: mickey (~user@user/mickey) (Remote host closed the connection)
[21:40:24] *** ub1 is now known as ub
[21:40:47] *** Quits: node1 (~node1@user/node1) (Ping timeout: 265 seconds)
[21:40:48] *** Joins: mickey (~user@user/mickey)
[21:42:18] *** Joins: ckdCreations (~ckdCreati@c-24-17-50-149.hsd1.wa.comcast.net)
[21:42:26] <grym> foo: strictly speaking yes, operationally, you can almost always get away with it
[21:42:39] *** Quits: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net) (Remote host closed the connection)
[21:42:52] *** Joins: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net)
[21:43:20] <deniska> id is too useless of a builtin for a too useful of a name
[21:43:38] <grym> yes, that
[21:43:45] <deniska> so that's one I typically don't mind shadowing in locals
[21:43:49] <akk> b
[21:44:37] *** Quits: dvx (~dvx@185.63.97.64) (Remote host closed the connection)
[21:44:39] <foo> grym / deniska - thank
[21:44:40] <foo> s
[21:44:59] *** Joins: frostschutz (~frostschu@2a01:c23:78b6:cf00:f930:c80a:d282:3d87)
[21:45:12] *** Quits: bfoley (~bfoley@pool-173-48-101-113.bstnma.fios.verizon.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[21:45:20] *** Joins: heco (~redrum@user/redrum88)
[21:45:23] *** Joins: Dan39 (~dan@user/dan39)
[21:47:31] *** Quits: ckdCreations (~ckdCreati@c-24-17-50-149.hsd1.wa.comcast.net) (Ping timeout: 252 seconds)
[21:48:26] *** Joins: ckdCreations (~ckdCreati@147.55.133.142)
[21:49:05] *** jarthur_ is now known as jarthur
[21:49:25] *** Joins: y1n (~y1n@84-115-65-33.wifi.dynamic.surfer.at)
[21:50:49] *** Joins: bomb-on (~bomb-on@194.144.47.113)
[21:51:25] *** Quits: CyberShadow (vladimir@89.28.117.31) (Ping timeout: 265 seconds)
[21:51:29] *** Joins: lack (~lack@user/lack)
[21:52:51] *** Joins: Linux77 (~Linux7_7@186.233.182.237)
[21:54:58] *** Quits: atrigent (~atrigent@c-73-69-68-26.hsd1.ma.comcast.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[22:00:55] *** Joins: NeilRG (~NeilRG@192.222.196.111)
[22:01:06] *** Quits: varaindemian (uid73404@id-73404.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[22:01:54] *** Joins: qlixed (~qlixed@181.44.129.13)
[22:05:34] *** Quits: NeilRG (~NeilRG@192.222.196.111) (Ping timeout: 252 seconds)
[22:06:46] *** Joins: atrigent (~atrigent@c-73-69-68-26.hsd1.ma.comcast.net)
[22:10:16] *** Joins: CyberShadow (vladimir@89.28.117.31)
[22:13:00] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[22:13:05] *** Quits: rpkilby (~rpkilby@ec2-34-252-84-235.eu-west-1.compute.amazonaws.com) (Remote host closed the connection)
[22:13:24] *** Joins: bfoley (~bfoley@pool-173-48-101-113.bstnma.fios.verizon.net)
[22:13:40] *** Joins: rpkilby (~rpkilby@ec2-34-252-84-235.eu-west-1.compute.amazonaws.com)
[22:15:05] *** Quits: rpkilby (~rpkilby@ec2-34-252-84-235.eu-west-1.compute.amazonaws.com) (Remote host closed the connection)
[22:15:11] *** Joins: justsomeguy (~justsomeg@user/justsomeguy)
[22:15:20] *** Joins: rpkilby (~rpkilby@ec2-34-252-84-235.eu-west-1.compute.amazonaws.com)
[22:16:48] *** Quits: majors (~majors@user/majors) (Quit: ZNC 1.7.5+deb4 - https://znc.in)
[22:18:28] *** Joins: RichardThreepwoo (~RichardTh@88.98.124.129)
[22:20:36] *** Joins: majors (~majors@user/majors)
[22:21:15] *** Quits: portalrat (~portalrat@user/portalrat) (Read error: Connection reset by peer)
[22:21:29] *** Joins: portalrat (~portalrat@user/portalrat)
[22:22:46] *** Joins: mat001 (~mat001@c-73-223-64-126.hsd1.ca.comcast.net)
[22:23:46] *** Joins: raxor2k (~raxor2k@78.158.248.158)
[22:23:56] <raxor2k> bjs: i love you. But i might need to ask for one last small little struggle
[22:25:55] *** Quits: mat001_ (~mat001@c-73-223-64-126.hsd1.ca.comcast.net) (Ping timeout: 252 seconds)
[22:26:04] *** Joins: LuksNuke (~LuksNuke@2001:7e8:c066:6200:be85:8d95:5d9:f9da)
[22:26:30] *** Joins: todda7 (~torstein@240.red-81-37-247.dynamicip.rima-tde.net)
[22:28:55] *** Quits: gusto (~Augustus@109.255.100.54) (Quit: Textual IRC Client: www.textualapp.com)
[22:29:23] *** Quits: bfoley (~bfoley@pool-173-48-101-113.bstnma.fios.verizon.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[22:31:54] *** Quits: FH_thecat (~FH_thecat@75.11.25.212.ftth.as8758.net) (Quit: Leaving)
[22:32:07] <Wooble> [always best to just ask the channel]
[22:32:48] *** Joins: jdmark (~jdmark@67.8.137.130)
[22:33:10] *** Quits: ASUChander (~ASUChande@user/asuchander) (Ping timeout: 240 seconds)
[22:33:49] *** Joins: bfoley (~bfoley@pool-173-48-101-113.bstnma.fios.verizon.net)
[22:34:57] <foo> Meh, trying to get my docker up to par with 3.7.9 - getting this error: Compile failed: command 'gcc' failed with exit status 1 -> I already installed the package on ubuntu I thought should take care of this.
[22:35:01] * foo investigates
[22:35:23] <mefistofeles> foo: what package exactly? You probably want build-essential, fwiw
[22:35:50] <mefistofeles> foo: also, if you can paste the whole exact tracelog it would help
[22:35:56] <foo> mefistofeles: thanks, lxml. I have build-essential , python3.7-dev and libxslt-dev
[22:36:23] <mefistofeles> foo: oh ok, so this is from a previous context, I'm missing that :P sorry
[22:36:24] <foo> thanks mefistofeles , pastebin here of the error: https://bpa.st/6PKQ
[22:36:47] <foo> mefistofeles: no previous context, I didn't share yet. Maybe something more in pastebin? Not sure what else I would need, I thought I have everything.
[22:36:54] <foo> hmmm, /me checks lxml version
[22:37:06] <mefistofeles> foo: doesn't hurt updating pip as they say there, btw. Also, it is a bad idea to use pip as the root user (though I think this is from a container?)
[22:37:15] <foo> mefistofeles: yes, container
[22:37:48] *** Quits: vd (~vd@bras-base-mtrlpq2848w-grc-41-70-53-240-121.dsl.bell.ca) (Quit: Client closed)
[22:38:01] <mefistofeles> foo: also that's not the full log :P
[22:38:14] <foo> ok, I had lxml 3.7.1, I updated version to 4.6.3 - trying with this.
[22:38:16] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[22:38:35] * foo needs to put in a solid week upgrading all packages.
[22:38:38] *** Quits: y1n (~y1n@84-115-65-33.wifi.dynamic.surfer.at) (Ping timeout: 252 seconds)
[22:38:54] <foo> mefistofeles: thanks, :) I'll share more if this doesn't solve it.
[22:39:27] *** Joins: vd (~vd@bras-base-mtrlpq2848w-grc-41-70-53-240-121.dsl.bell.ca)
[22:43:34] *** Joins: Akuli (~Akuli@213.216.210.90)
[22:44:13] <foo> mefistofeles: you asked for it. https://bpa.st/PWQA
[22:44:19] <foo> :) odd build error ^^^
[22:44:30] *** Quits: amrooting (amrooting@gateway/vpn/protonvpn/amrooting) (Ping timeout: 256 seconds)
[22:44:35] *** Quits: qlixed (~qlixed@181.44.129.13) (Ping timeout: 260 seconds)
[22:47:36] *** Joins: odoood (~odoood@2601:c8:c003:a550::7)
[22:48:09] *** Joins: rpkilby_ (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[22:49:40] <mefistofeles> foo: you should update pip as I told up there :P
[22:49:54] <mefistofeles> and as it says in the message
[22:50:19] <foo> mefistofeles: ok, will add that to my docker file to see if it resolves this.
[22:50:25] *** Quits: rpkilby_ (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[22:50:25] *** Quits: thiras (~thiras@user/thiras) (Ping timeout: 260 seconds)
[22:50:25] *** Quits: jmiehe (~Thunderbi@user/jmiehe) (Ping timeout: 260 seconds)
[22:51:01] *** Joins: rpkilby_ (~rpkilby@ec2-34-252-84-235.eu-west-1.compute.amazonaws.com)
[22:51:36] *** Quits: rpkilby (~rpkilby@ec2-34-252-84-235.eu-west-1.compute.amazonaws.com) (Read error: Connection reset by peer)
[22:51:44] *** Joins: y1n (~y1n@213162073187.public.t-mobile.at)
[22:51:53] <foo> mefistofeles: thanks, re-running
[22:53:10] *** Quits: RichardThreepwoo (~RichardTh@88.98.124.129) (Quit: Connection closed)
[22:53:27] *** Quits: bilb_ono (~alexmarsh@ip68-6-69-149.sb.sd.cox.net) (Quit: bilb_ono)
[22:54:27] <foo> mefistofeles: ok, seems to have resolved it.
[22:54:29] <foo> mefistofeles: thanks :)
[22:54:39] <mefistofeles> foo: no problem
[22:54:48] *** Joins: p-i-_ (~Ohmu@223.206.69.159)
[22:54:49] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[22:55:26] *** Joins: forgotmynick (uid24625@id-24625.stonehaven.irccloud.com)
[22:55:35] *** Joins: bancroft (~bancroft@bras-base-mtrlpq02hsy-grc-09-76-68-189-147.dsl.bell.ca)
[22:56:40] *** Quits: shad (~shad@user/shad) (Quit: WeeChat 3.0)
[22:57:01] *** Joins: shad (~shad@user/shad)
[22:57:13] *** Joins: sn1tch3r (~sn1tch3r@user/sn1tch3r)
[22:57:40] *** Joins: Proxysna (~Proxysna@62.119.254.142)
[22:58:00] <bancroft> my code works, but code is always read more times than its written so can I get some pointers on my Azure start/stop VM script I wrote to save some money on webservers? https://bpa.st/NOUQ
[22:58:30] *** Quits: zebrag (~chris@user/zebrag) (Remote host closed the connection)
[22:59:04] *** Quits: p-i- (~Ohmu@223.206.69.159) (Ping timeout: 265 seconds)
[22:59:18] *** Quits: mohabaks (~mohabaks@gateway/tor-sasl/mohabaks) (Ping timeout: 276 seconds)
[23:00:07] *** Quits: LuksNuke (~LuksNuke@2001:7e8:c066:6200:be85:8d95:5d9:f9da) (Ping timeout: 252 seconds)
[23:01:20] *** Joins: lalitmee_ (~lalitmee@180.94.33.208)
[23:01:44] *** Quits: maryo (~Maryo@user/maryo) (Ping timeout: 252 seconds)
[23:01:45] <foo> I'm getting a lot of these: https://bpa.st/SXXA ... because I have versions specified in requirements.txt that I install with pip that get out of sync and certain versions depend on other versions. There's probably a better way to handle this by now?
[23:01:47] *** Joins: whimboo (sid394681@id-394681.highgate.irccloud.com)
[23:02:34] *** Quits: bomb-on (~bomb-on@194.144.47.113) (Quit: aллилѹіа!)
[23:02:47] <bancroft> foo: use python poetry, it's dependency resolution is very good
[23:02:59] *** Joins: wolfgang (~wolfgang@101.174.6.197)
[23:03:14] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[23:03:29] *** Joins: Deep3D (Deep3D@user/deep3d)
[23:03:31] <foo> bancroft: hmm. https://python-poetry.org . ok, thanks!
[23:03:45] <bancroft> foo: that's the one
[23:04:23] *** Joins: noctavian (~noctavian@gateway/tor-sasl/noctavian)
[23:05:50] *** Quits: y1n (~y1n@213162073187.public.t-mobile.at) (Ping timeout: 265 seconds)
[23:06:27] *** Joins: menace (~someone@user/menace)
[23:06:45] *** Quits: rpkilby_ (~rpkilby@ec2-34-252-84-235.eu-west-1.compute.amazonaws.com) (Ping timeout: 260 seconds)
[23:06:50] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[23:07:50] * foo fixes his 6th versioning conflict and keeps going
[23:08:13] *** Quits: atrigent (~atrigent@c-73-69-68-26.hsd1.ma.comcast.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[23:08:53] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 252 seconds)
[23:09:08] *** Joins: jess (~jess@libera/staff/jess)
[23:09:53] *** Quits: harpia (~harpia@58.148.205.168.dynamic.vibefibra.com.br) (Quit: harpia)
[23:10:45] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[23:10:55] *** Joins: fikran (~fikran@user/fikran)
[23:11:20] *** Joins: rpkilby (~rpkilby@ec2-34-252-84-235.eu-west-1.compute.amazonaws.com)
[23:12:24] *** Joins: Compu-Celebi (~Compu-Cel@96-18-74-43.cpe.sparklight.net)
[23:13:29] *** Quits: bfoley (~bfoley@pool-173-48-101-113.bstnma.fios.verizon.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[23:13:37] *** Joins: dasbootmir (~dasbootmi@user/dasbootmir)
[23:17:47] *** Quits: hakeem (~hakeem@user/hakeem) (Quit: Remote host closed the connection)
[23:18:28] *** Joins: mat001_ (~mat001@c-73-223-64-126.hsd1.ca.comcast.net)
[23:18:54] *** Joins: rsx (~dummy@ppp-188-174-151-43.dynamic.mnet-online.de)
[23:19:32] <Compu-Celebi> In Python, what is the most efficient method of deleting items from a list that fulfill a particular condition (without replacing the list with a copy without such items)?
[23:20:12] *** Joins: qlixed (~qlixed@152.170.36.244)
[23:21:00] *** Joins: hakeem (~hakeem@user/hakeem)
[23:21:10] *** Quits: mat001 (~mat001@c-73-223-64-126.hsd1.ca.comcast.net) (Ping timeout: 240 seconds)
[23:21:51] *** Quits: justsomeguy (~justsomeg@user/justsomeguy) (Quit: WeeChat 3.2)
[23:22:28] <bjs> raxor2k: did you actually have a question to ask?
[23:22:45] *** Quits: dez (uid92154@user/dez) (Quit: Connection closed for inactivity)
[23:22:53] *** Quits: hakeem (~hakeem@user/hakeem) (Client Quit)
[23:22:56] <mefistofeles> Compu-Celebi: I guess using the pop or remove methods (or any similar type methods that could achieve the same), but I feel that wouldn't be as fast as copying/overwriting using  a comprehension or something like that. Because of its dynamic nature, I'd presume
[23:23:05] *** Joins: hakeem (~hakeem@user/hakeem)
[23:23:21] *** Joins: vats (~vats@42.111.21.216)
[23:23:22] <deniska> And if you are doing that in a loop, may want to iterate backwards to avoid off by one errors
[23:24:13] *** Joins: rpkilby_ (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[23:24:39] <Wooble> "what's the most efficient way of doing this in the least efficient way" is an interesting question ;)
[23:25:45] *** Joins: Mattiaslndstrm (~Mattiasln@c188-148-207-108.bredband.tele2.se)
[23:26:31] *** Quits: todda7 (~torstein@240.red-81-37-247.dynamicip.rima-tde.net) (Ping timeout: 252 seconds)
[23:27:45] *** Quits: rpkilby (~rpkilby@ec2-34-252-84-235.eu-west-1.compute.amazonaws.com) (Ping timeout: 260 seconds)
[23:28:52] *** Joins: lalitmee__ (~lalitmee@180.94.32.100)
[23:29:09] <Compu-Celebi> My ideas were (1) setting the slice of the list that comprises the full list to a copy of the list without the items to delete and (2) iterating through an enumeration of the list to generate a list of the indices of the items to delete, prepending each index so that the list would be backwards, and then iterating through the index list to delete the corresponding items of the former list.
[23:29:36] *** Joins: Fiji (~Fiji@user/fiji)
[23:29:58] *** Quits: rpkilby_ (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[23:30:34] *** Joins: rpkilby (~rpkilby@ec2-34-252-84-235.eu-west-1.compute.amazonaws.com)
[23:30:51] <Compu-Celebi> It would also be possible to iterate through a copy of the former list backward to delete each item that is to be deleted, but like my first idea, that would require copying.
[23:31:26] *** Quits: lalitmee_ (~lalitmee@180.94.33.208) (Ping timeout: 252 seconds)
[23:31:36] *** Joins: alnr (~alnr@38.125.204.99)
[23:32:34] *** Joins: atrigent (~atrigent@c-73-69-68-26.hsd1.ma.comcast.net)
[23:32:40] <Compu-Celebi> I should have said "an enumerated copy."
[23:33:04] *** Quits: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net) (Remote host closed the connection)
[23:33:18] *** Joins: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net)
[23:33:49] *** Quits: RickDeckard (~RickDecka@pool-100-12-189-215.nycmny.fios.verizon.net) (Quit: Leaving...)
[23:34:09] <alnr> is there a way to fetch an element from a set. the item in the set may be == to the searched element but not identical.
[23:34:17] <deniska> Compu-Celebi: iterate over a list forward, once you find an item to remove, start copying items one place back, once you find the second item to remove, start copying items two places back, etc, then chop off the end
[23:34:25] <Compu-Celebi> Make that "an enumeration of a copy."
[23:34:36] <deniska> Compu-Celebi: but at this point it sounds like a CS homework rather than something pythonic :)
[23:34:39] <Compu-Celebi> Actually, an enumeration of the original list would suffice, because the enumeration is not the list itself.
[23:34:48] *** Joins: waynew (~wayne@user/waynew)
[23:35:51] <Wooble> alnr: what type of items are these? if they're equal, they should hash the same and they're functionally the same as far as the set is concerned.
[23:35:54] <Compu-Celebi> I forgot that, as I learned recently, `reversed` cannot be applied to enumerations.
[23:36:23] *** Quits: pro_z (~pro_z@37.214.61.236) (Ping timeout: 252 seconds)
[23:36:37] <alnr> Wooble, they are functionally equal, but still i need the one in the set for my purposes
[23:37:42] *** Quits: Deneb (~johnch@86.111.189.80.dyn.plus.net) (Quit: Leaving)
[23:37:48] <Compu-Celebi> alnr, after ascertaining what item in the set is equal to the value in question, a copy of the item can be stored and the set's `remove` method can be invoked to remove the original copy.
[23:38:03] <Wooble> alnr: next(item for item in your_set if item==value) maybe
[23:38:28] <Compu-Celebi> Wooble, spaces should surround that equality operator.
[23:38:43] <Wooble> Compu-Celebi: sorry, I didn't install a black plugin for my irc client.
[23:38:59] <Wooble> but thank you for your code review.
[23:38:59] *** Joins: X4 (~X4@x4db55048.dyn.telefonica.de)
[23:39:04] <Compu-Celebi> What are "black plugins"?
[23:39:06] <jinsun> but more efficient would be to hold on to the reference of the item before putting it in a set, and don't lose it
[23:39:19] *** Quits: castor_andrade (castor_and@187.101.171.198) (Remote host closed the connection)
[23:39:33] <Wooble> Compu-Celebi: black is a program that reformats python code so you don't have to have tiresome discussions about style
[23:40:31] <Compu-Celebi> Would that not be a plugin, instead of a program?
[23:41:45] *** Joins: omegatron (~some@p54849842.dip0.t-ipconnect.de)
[23:42:18] <Wooble> if I integrated it into weechat, sure.
[23:44:01] <Compu-Celebi> Oh, of course, it would be possible to reformat the code outside the IRC client and then copy it into an IRC message.
[23:44:33] <Compu-Celebi> I must be more careful about subtext perception.
[23:45:24] *** Joins: georgios (~georgios@user/georgios)
[23:45:30] <Compu-Celebi> Anyhow, however, after converting an enumeration to a list, `reversed` can be applied.
[23:46:14] *** Joins: amrooting (amrooting@gateway/vpn/protonvpn/amrooting)
[23:46:18] <Compu-Celebi> However, the conversion creates a list, not to mention that is similar to a reversed copy.
[23:46:28] <bancroft> could someone give me pointers on my script https://bpa.st/NOUQ? I just want another pair of eyes to let me konw if it's readable or if I should thread the allocation/deallocation of VMs and stuff
[23:47:20] <Compu-Celebi> I have no experience with Azure and generally avoid Microsoft products.
[23:47:42] <Compu-Celebi> In addition, I have no experience with cloud computing.
[23:47:55] <bancroft> Compu-Celebi: same ... but when they give so much money for a new business, it's hard to say no. AWS is too big to care about little ole-me
[23:48:12] <alnr> Wooble, type of the item is a node in the graph (nodes are py modules656979. the 'same' element may be encountered in node generation, if its in a seen set, the node has to be the previous one already in the graph.
[23:48:17] <Compu-Celebi> Does "AWS" refer to Amazon Web Services?
[23:48:18] *** Quits: olbat (~olbat@user/olbat) (Quit: Bye ...)
[23:48:21] <alnr> oops
[23:48:24] <bancroft> Compu-Celebi: yes
[23:48:29] *** Joins: semeion (~semeion@user/semeion)
[23:48:47] <alnr> not meant for transmission but my yubikey hit enter :(
[23:49:49] <Compu-Celebi> In addition, I have no direct experience with SSL.
[23:50:34] <bancroft> Compu-Celebi: it's really the lines 50-90 that i'm concerned about
[23:50:57] <bancroft> the iterating over a list in this way, maybe I should thread it because turning on/off a vm takes more than a few seconds
[23:51:06] *** Quits: rendar (~rendar@user/rendar) (Quit: Leaving)
[23:51:33] *** Joins: Auron (~Auron956@user/auron)
[23:51:39] <Compu-Celebi> In addition, for the most part, the only virtual machines that I have ever used are ones for executing Java programs or Python programs.
[23:53:34] <Compu-Celebi> I would have, instead of storing the VM list into a variable, using it directly in the `for` loop's introductory line.
[23:53:44] *** Joins: thiras (~thiras@user/thiras)
[23:54:09] <Compu-Celebi> Creating a variable whose value is to be used only once is generally to be avoided.
[23:54:48] <Byteflux> bancroft: Maybe async/await would be better here instead of threads
[23:54:59] <cluelessperson> eh.  I think it's fine if it cleans things up and gets everything out of one line
[23:55:10] <Compu-Celebi> Also, strangely, one variable name is "`cert`," an abbreviation of "`certificate`," when another variable's name is "`automation_certificate`," instead of "`automation_cert`."  That is inconsistent.
[23:55:11] <cluelessperson> I like seeing   a = 1;  b = thing(a)  etc.
[23:55:45] <deniska> giving names to things is fine, even when used once
[23:56:35] *** Joins: flokuehn (~flokuehn@mue-88-130-54-028.dsl.tropolys.de)
[23:56:51] <jinsun> yes, just don't use temp for everything
[23:57:28] <cluelessperson> reusing variables sounds like a catastrophe waiting to happen.
[23:57:34] <Compu-Celebi> Lines seventy and seventy-one should be combined into one, instead of each argument being on its own line, due to how short each one's code is.
[23:57:41] <cluelessperson> at least in the same context.
[23:58:09] *** Quits: AutomatedTester (uid395371@selenium/developer/AutomatedTester) (Quit: Connection closed for inactivity)
[23:59:02] *** Parts: Deep3D (Deep3D@user/deep3d) ()
[23:59:46] *** Joins: rpkilby_ (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[23:59:54] <Compu-Celebi> For each of two of the function invocations, a comma superfluously follows the last argument.
