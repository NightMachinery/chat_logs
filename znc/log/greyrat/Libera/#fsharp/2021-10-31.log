[02:20:25] *** Quits: indomitable (~indomitab@gateway/tor-sasl/indomitable) (Remote host closed the connection)
[11:46:14] *** Joins: indomitable (~indomitab@gateway/tor-sasl/indomitable)
[14:02:07] *** Joins: megane (~megane@chicken/developer/megane)
[15:21:30] <MatthiasVance> biberu: How would you write this? https://usercontent.irccloud-cdn.com/file/PutP0076/image.png
[15:21:46] <MatthiasVance> Or does this read like normal code
[15:21:49] <MatthiasVance> I have no clue :D
[15:22:25] <MatthiasVance> I think I can abstract out the check for "end of buffer"
[15:23:15] <indomitable> my immediat thought is that it shouldn't take 4 goddamn arguments
[15:23:16] <indomitable> lol
[15:24:56] <MatthiasVance> YES I feel the same way haha
[15:25:20] <indomitable> why does this take a length?
[15:25:25] <indomitable> why don't you just have this operate on some list type?
[15:25:53] <MatthiasVance> the length is the length of a buffer
[15:26:07] <indomitable> wouldn't that be buffersize
[15:26:24] <MatthiasVance> hah wording is fucked, it goes from a buffer to another buffer
[15:26:26] <MatthiasVance> I mean the source
[15:26:31] <MatthiasVance> sourceLength is better
[15:27:13] <indomitable> also is that even allowed MatthiasVance ?
[15:27:16] <indomitable> you're mutating data here
[15:27:23] <MatthiasVance> yeah lol
[15:27:25] <MatthiasVance> no
[15:27:28] <MatthiasVance> I am going to return that instead
[15:27:55] <indomitable> I would use "reverse" instead of backwards too
[15:30:39] <MatthiasVance> yeah I had used reverse
[15:30:43] <MatthiasVance> but it's not reversing the offset
[15:30:51] <MatthiasVance> I'll find a better name
[15:31:01] <MatthiasVance> My head is fuzzy from cold+cough
[15:34:59] <MatthiasVance> I think this is a wonderful method to refactor a lot
[15:35:02] <MatthiasVance> *function =)
[15:35:06] <MatthiasVance> see, my head is all wrong
[15:35:39] <indomitable> it's good that you're just working for that shit company this month then
[15:35:41] <indomitable> :D
[15:35:47] <indomitable> do you get any sick day stuff there?
[15:36:10] <MatthiasVance> In NL you don't have the concept of "sick days"
[15:36:20] <indomitable> why not
[15:36:21] <indomitable> you don't get sick?
[15:36:29] <MatthiasVance> No I mean, it doesn't impact you whatsoever
[15:36:34] <MatthiasVance> So you call in sick and you still get paid
[15:36:40] <indomitable> great
[15:36:43] <indomitable> i assume you're calling in sick
[15:36:44] <indomitable> :D
[15:37:11] <indomitable> fuzzy head, them screwing you on vacation stuff, what downside is there to taking some me-time 
[15:37:32] <MatthiasVance> There is still a tiny chance they aren't going to screw me and coming week is the ISO audit
[15:38:04] <MatthiasVance> I think in their mind they want that to be a contingency
[15:38:07] <MatthiasVance> or something
[15:38:11] <MatthiasVance> Some people are fucked up
[15:40:00] <indomitable> lol
[15:40:26] <MatthiasVance> I also didn't want to play this differently and lower myself to their level
[15:50:09] <biberu> MatthiasVance: not sure i get the context, but i think I'd just set offset to end, then repeatedly adjust it to max(0, pos-bufsize), and build a list of chunks until the marker has been found
[15:50:58] <MatthiasVance> I can't check one buffer and then move on the next, they need to overlap by "length of data I'm trying to find"
[15:51:08] <MatthiasVance> I'll come up with a new one later!
[15:51:34] <biberu> yeah you'd need to read a little bit into the last one 
[15:56:41] <biberu> you needed to keep all buffered data, right?
[15:58:14] <biberu> linked list of chunks, prepend until done, then work with span/view of relevant region so that nothing else needs to know of how it's stored internally
[16:08:51] <indomitable> this sounds like a problem that should have a diagram with its solution
[16:08:51] <indomitable> ;-)
[16:09:11] <indomitable> or a duck
[16:19:41] <biberu> MatthiasVance: can you look for the marker in reverse too? i.e. start with its ending?
[16:20:06] <MatthiasVance> yes that wouldn't be a problem
[16:20:26] <biberu> then if you run out of data and need another chunk you'd know if it was a possible match already
[16:23:09] <MatthiasVance> Yeah I was asking more about F# syntax and less about solution :D
[16:23:14] <MatthiasVance> It helps though so thanks a lot
[16:36:49] <MatthiasVance> biberu: I also run into limits of my F# knowledge so this is a great first thing to write :D
[16:49:07] <megane> not sure if this question makes sense, but in computation expressions, can you use do! with functions that return something else than M(Unit)? 
[16:49:46] <megane> i.e. discard the available value
[17:14:11] <MatthiasVance> I think you'd have to use let! _ = f()
[17:24:56] <MatthiasVance> Do you ever use types in F#?
[17:25:04] <MatthiasVance> Like, I have a bunch of logic to read a stream backwards
[17:25:11] <MatthiasVance> but I don't feel like I need a type
[17:25:21] <MatthiasVance> but sometimes I feel it might make discovery easier
[17:25:37] <MatthiasVance> And that to me signals I'm doing stuff slightly wrong :D
[18:43:55] <megane> MatthiasVance: ok, thanks
[19:15:50] *** Joins: PMunch (~PMunch@c01F28BC3.dhcp.as2116.net)
[19:36:45] *** Quits: PMunch (~PMunch@c01F28BC3.dhcp.as2116.net) (Quit: leaving)
[20:07:56] <MatthiasVance> biberu: LOL. The solution was so simple.
[20:08:10] <MatthiasVance> biberu: All I need is a ReadLine() that reads backwards
[20:08:17] * MatthiasVance switches gears
[20:24:44] <MatthiasVance> Hm then I still need that buffer :D
[20:30:05] <biberu> :)
[20:37:13] <indomitable> think you kind always needed some kind of buffer for that bit of magic
[20:40:02] <MatthiasVance> I was thinking I could just Stream.Read() and it would return one byte, which works for this because it's always ASCII
[20:40:39] <MatthiasVance> but then again any buffered stream (filestream etc.) will invalidate the buffer every time since I'm going backwards xD
[20:40:53] <MatthiasVance> So yeah your assessment seems to be correct indomitable 
[20:41:25] <indomitable> I felt you were being fuzzy headed, and just wanted to think about something for a while, whether it was correct or not :-9
[20:41:31] <indomitable> I am surprised biberu joined in
[20:41:51] <MatthiasVance> lol I was hoping to solve this in a functional way
[20:43:52] <MatthiasVance> I think all of those functions should take a buffer as input, otherwise it makes no sense
[20:45:43] <MatthiasVance> indomitable: In C# land I'd encapsulate the buffer as I said, however more functional I'd pull it out and supply it to the functions, however how can I make sure it is always properly filled? :o Maybe return None when I haven't found anything, then read more into the buffer and try again
[20:46:14] <MatthiasVance> Like biberu said with a linked list / ienumerable
[20:46:19] <MatthiasVance> is the better way
[20:47:42] <indomitable> *I* told you to make it a list type
[20:47:43] <indomitable> lol
[20:47:48] <indomitable> go to sleep!
[20:48:52] <MatthiasVance> 13:28 <biberu> linked list of chunks, prepend until done, then work with span/view of relevant region so that nothing else needs to know of how it's stored internally
[20:55:28] *** Parts: megane (~megane@chicken/developer/megane) ()
[21:10:23] <biberu> MatthiasVance: for the function that looks for the marker I'd probably do something like search_state -> chunk -> search_state, where state is eof|nothing|found|partial + relevant metadata, then something like searcher -> stream -> result<buffer, ...> that keeps calling the searcher with new chunks until some result has been determined
[21:20:12] <MatthiasVance> biberu: That is kind of what I had in my head but it doesn't want to come out in F# yet :D I'll share some code for inspection later this week ^^
[21:20:14] <MatthiasVance> Thanks!
[21:22:44] <MatthiasVance> It would be wonderful to be able to use Seq on a stream xD
[21:26:00] <biberu> maybe write some scanner interface that you can use on top of a stream?
[21:27:08] <indomitable> biberu, is your body ready for AOC?
[21:27:14] <indomitable> xeno is mentally preparing himself no doubt
[21:27:30] <biberu> don't you need free time for that?
[21:27:34] <indomitable> since you have no time for actual code, you will have to look at the task in the morning, and try to solve it in your mind
[21:27:37] <indomitable> exactly
[21:27:43] <indomitable> so you're going to have to do background processing
[21:35:39] <MatthiasVance> free time :')
[21:36:10] <biberu> MatthiasVance: you probably don't want it straight up as a seq btw, might need to e.g. try different parsers and backtrack, discard buffers when you know you won't need them, ...
[21:36:20] <MatthiasVance> yeah that's true
[21:36:45] <biberu> MatthiasVance: iirc the book functional programming in scala had some examples on functional parsing, might be inspirational
[21:36:58] <MatthiasVance> Still getting bit by the fact encapsulation works differently in FP :D
[21:37:16] <MatthiasVance> I have some books I want to read (also on FP) but can't get in the right headspace for it recently
[21:37:33] <MatthiasVance> Luckily starting December 1st I'll be doing more F# and also get more stability :D
[21:38:50] <MatthiasVance> And 20% of my working time I can spend "however I want as long as it's related to being a software engineer", so I can use that for reading
[21:41:30] <biberu> that's nice, i was thinking of getting something similar
[21:41:57] <biberu> the days are so full it's hard to find time for studies
[21:43:30] <indomitable> MatthiasVance, back to old job?
[21:43:43] <MatthiasVance> yeah
[21:43:51] <indomitable> nice
[21:43:56] <indomitable> 20% "engineering time" is quite good
[21:44:02] <indomitable> probably a good balance overall. the 20% extra as it were
[21:44:21] <MatthiasVance> Definitely, especially because all of the other things were not very high paced as well
[21:44:32] <MatthiasVance> And work can be structured around your life instead of the other way around
[21:44:34] <indomitable> generally better to get things done right the first time
[21:44:44] <indomitable> must be a fancy company you work for
[21:44:46] <indomitable> most will not allow such things
[21:44:54] <MatthiasVance> That 20% is not for thinking about work stuff
[21:45:03] <indomitable> though honestly I'd probably work more efficiently with 4 days/80% time doing work an 20% researching and learning stuff
[21:45:07] <indomitable> I know
[21:45:09] <MatthiasVance> ah
[21:45:37] <indomitable> For a while one of my jobs was like that, but management didn't like it (outside my team), so they slowly shut it down
[21:45:41] <MatthiasVance> meh
[21:45:46] <MatthiasVance> Way to kill creativity as well
[21:45:47] <indomitable> So I quit and work somewhere else, since that was the main perk of working there ;-)
[21:46:14] <indomitable> yup
[21:46:19] <MatthiasVance> We have daily chats, but we talk about "how are we going to approach X?", not "what have you done yesterday etc"
[21:47:40] <Deide> I'm not sure you really have encapsulation as it's commonly thought of in FP. The closest feature that fits is closures, I think.
[21:54:06] <biberu> hello Deide :)
[21:54:18] <Deide> Evening
[22:00:01] *** Joins: stenno (~stenno@user/stenno)
[22:26:05] <xeno> indomitable: of course I am mentally preparing myself :)
[22:26:25] <xeno> still annoyed I didn't solve one of last years assignments :/
[22:26:33] <xeno> day 23 part 2 or something
[22:51:28] <MatthiasVance> Is it normal to want a taskSeq or something? :D
[22:57:27] <MatthiasVance> oh nvm I can just return the task
[22:57:58] <MatthiasVance> ah shit, can't
[23:02:23] <biberu> MatthiasVance: sure, asyncseq is a thing
[23:02:37] <MatthiasVance> What about asyncseq? I am working with .NET stuff here
[23:02:42] * MatthiasVance facepalms
[23:02:42] <biberu> maybe there is something for tasks in 6 already?
[23:02:44] <MatthiasVance> asynctask
[23:02:45] <MatthiasVance> :D
[23:02:48] <MatthiasVance> FUUCK
[23:02:50] <MatthiasVance> Time to quit
[23:02:59] <MatthiasVance> biberu: I'll check it out
[23:03:38] <biberu> MatthiasVance: are you using 6?
[23:03:44] <MatthiasVance> yes
[23:04:04] <biberu> nice, maybe someone already made a lib for that then
[23:13:01] <MatthiasVance> Couldn't find anything so far but I'll take a look at asyncSeq :D
[23:13:13] <MatthiasVance> And maybe just find/replace Async with Task :x (just kidding)
[23:16:44] <MatthiasVance> Or I can probably use Async.AwaitTask and then asyncSeq
[23:51:27] *** Joins: jinsun__ (~quassel@user/jinsun)
[23:54:41] *** Quits: jinsun (~quassel@user/jinsun) (Ping timeout: 245 seconds)
