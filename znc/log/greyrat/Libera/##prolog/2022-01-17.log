[00:14:25] *** Joins: rogersm (~rogersm@90.166.180.250)
[00:24:55] *** Quits: sektor (~kvirc@87.227.175.182) (Ping timeout: 256 seconds)
[00:30:17] *** Quits: PrologMUD (~PrologMUD@c-98-232-203-68.hsd1.wa.comcast.net) (Remote host closed the connection)
[00:33:22] *** Joins: PrologMUD (~PrologMUD@c-98-232-203-68.hsd1.wa.comcast.net)
[00:45:48] *** Quits: rogersm (~rogersm@90.166.180.250) (Quit: Leaving...)
[00:53:12] *** Quits: PrologMUD (~PrologMUD@c-98-232-203-68.hsd1.wa.comcast.net) (Remote host closed the connection)
[01:13:05] *** Quits: kwon-young (~kwon-youn@lcs07-lyo-176-188-228-64.sfr.lns.abo.bbox.fr) (Ping timeout: 256 seconds)
[02:00:20] *** Quits: rgrinberg (~textual@2806:101e:7:2b:a509:6fda:5123:c5ae) (Ping timeout: 250 seconds)
[02:30:35] *** Joins: PrologMUD (~PrologMUD@c-98-232-203-68.hsd1.wa.comcast.net)
[02:37:00] *** Joins: yauhsien_ (~yauhsien@61-231-24-192.dynamic-ip.hinet.net)
[02:41:29] *** Quits: yauhsien_ (~yauhsien@61-231-24-192.dynamic-ip.hinet.net) (Ping timeout: 256 seconds)
[03:08:02] *** Joins: ZombieChicken (~weechat@user/zombiechicken)
[03:11:10] *** Joins: yauhsien_ (~yauhsien@61-231-24-192.dynamic-ip.hinet.net)
[03:13:47] *** Quits: PrologMUD (~PrologMUD@c-98-232-203-68.hsd1.wa.comcast.net) (Remote host closed the connection)
[03:25:48] *** Joins: PrologMUD (~PrologMUD@c-98-232-203-68.hsd1.wa.comcast.net)
[03:56:47] *** Joins: jealousmonk (~user@2804:431:e7c5:b880:889f:205:ed34:5b22)
[04:03:24] *** Quits: millido (~millido@84.210.150.128) (Ping timeout: 250 seconds)
[04:06:43] *** Joins: millido (~millido@84.210.150.128)
[04:08:35] *** Quits: Everything (~Everythin@37.115.210.35) (Quit: leaving)
[04:10:02] *** Quits: yauhsien_ (~yauhsien@61-231-24-192.dynamic-ip.hinet.net) (Ping timeout: 240 seconds)
[04:13:17] *** Quits: millido (~millido@84.210.150.128) (Ping timeout: 256 seconds)
[04:14:06] *** Joins: millido (~millido@84.210.150.128)
[05:04:51] *** Quits: millido (~millido@84.210.150.128) (Ping timeout: 256 seconds)
[05:07:04] *** Joins: millido (~millido@84.210.150.128)
[06:10:01] *** Quits: waleee (~waleee@h-98-128-229-110.NA.cust.bahnhof.se) (Ping timeout: 256 seconds)
[07:05:02] *** Quits: skapata (~Skapata@user/skapata) (Ping timeout: 240 seconds)
[07:23:12] *** Joins: rgrinberg (~textual@2806:101e:7:2b:6129:f312:6bd3:a55)
[07:24:11] *** Joins: yauhsien_ (~yauhsien@61-231-24-192.dynamic-ip.hinet.net)
[07:24:24] *** Quits: mzan (~quassel@mail.asterisell.com) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[07:25:31] *** Joins: mzan (~quassel@mail.asterisell.com)
[07:28:47] *** Quits: yauhsien_ (~yauhsien@61-231-24-192.dynamic-ip.hinet.net) (Ping timeout: 256 seconds)
[07:35:18] *** Quits: millido (~millido@84.210.150.128) (Ping timeout: 250 seconds)
[07:36:30] *** Joins: millido (~millido@84.210.150.128)
[07:36:43] *** Joins: Leo_V (~Leo@157.52.18.77)
[07:39:12] *** Quits: Leone (~Leo@157.52.18.77) (Ping timeout: 250 seconds)
[07:44:24] *** Quits: millido (~millido@84.210.150.128) (Ping timeout: 250 seconds)
[07:49:15] *** Joins: skapata (~Skapata@2804:14c:87b0:a6f9:506e:821:1232:2e80)
[07:49:15] *** Quits: skapata (~Skapata@2804:14c:87b0:a6f9:506e:821:1232:2e80) (Changing host)
[07:49:15] *** Joins: skapata (~Skapata@user/skapata)
[07:49:20] *** Joins: millido (~millido@84.210.150.128)
[08:40:04] <lf94> If anyone sees dyvd again, please relay this
[08:40:06] <lf94> http://len.falken.directory/philosophy/prolog-exercise-witness.txt
[08:40:46] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[09:27:20] *** Quits: jealousmonk (~user@2804:431:e7c5:b880:889f:205:ed34:5b22) (Quit: ERC (IRC client for Emacs 27.1))
[09:49:00] <yauhsien> lf94: is it an argument about "who is the witness?"
[10:36:26] *** Quits: rgrinberg (~textual@2806:101e:7:2b:6129:f312:6bd3:a55) (Ping timeout: 250 seconds)
[10:38:22] *** Quits: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl) (Read error: Connection reset by peer)
[10:40:04] *** Joins: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl)
[10:42:22] *** Quits: PrologMUD (~PrologMUD@c-98-232-203-68.hsd1.wa.comcast.net) (Remote host closed the connection)
[10:59:29] *** Quits: bkhl (~bkhl@user/bkhl) (Remote host closed the connection)
[11:02:13] *** Joins: rgrinberg (~textual@2806:101e:7:2b:f4e6:13e8:c8a9:3722)
[11:08:07] *** Joins: PrologMUD (~PrologMUD@c-98-232-203-68.hsd1.wa.comcast.net)
[11:10:29] *** Joins: bkhl (~bkhl@user/bkhl)
[11:11:01] *** Quits: bkhl (~bkhl@user/bkhl) (Remote host closed the connection)
[11:33:34] *** Quits: PrologMUD (~PrologMUD@c-98-232-203-68.hsd1.wa.comcast.net) (Remote host closed the connection)
[11:41:01] *** Quits: rgrinberg (~textual@2806:101e:7:2b:f4e6:13e8:c8a9:3722) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[12:12:17] *** Quits: slavfox (~slavfox@93.158.232.111) (Ping timeout: 240 seconds)
[12:14:18] *** Joins: slavfox (~slavfox@93.158.232.111)
[12:18:00] *** Quits: ZombieChicken (~weechat@user/zombiechicken) (Quit: WeeChat 3.4)
[13:15:02] *** Joins: PrologMUD (~PrologMUD@c-98-232-203-68.hsd1.wa.comcast.net)
[13:30:00] *** Quits: PrologMUD (~PrologMUD@c-98-232-203-68.hsd1.wa.comcast.net) (Remote host closed the connection)
[13:31:31] *** Joins: PrologMUD (~PrologMUD@c-98-232-203-68.hsd1.wa.comcast.net)
[13:33:08] *** Quits: PrologMUD (~PrologMUD@c-98-232-203-68.hsd1.wa.comcast.net) (Remote host closed the connection)
[13:38:01] *** Joins: PrologMUD (~PrologMUD@c-98-232-203-68.hsd1.wa.comcast.net)
[13:39:20] *** Quits: PrologMUD (~PrologMUD@c-98-232-203-68.hsd1.wa.comcast.net) (Remote host closed the connection)
[13:47:26] *** Joins: PrologMUD (~PrologMUD@c-98-232-203-68.hsd1.wa.comcast.net)
[13:54:31] *** Quits: PrologMUD (~PrologMUD@c-98-232-203-68.hsd1.wa.comcast.net) (Remote host closed the connection)
[14:00:02] *** Joins: PrologMUD (~PrologMUD@c-98-232-203-68.hsd1.wa.comcast.net)
[14:10:47] *** Quits: PrologMUD (~PrologMUD@c-98-232-203-68.hsd1.wa.comcast.net) (Remote host closed the connection)
[14:37:16] *** Joins: PrologMUD (~PrologMUD@c-98-232-203-68.hsd1.wa.comcast.net)
[14:42:03] *** Quits: econo (uid147250@user/econo) (Quit: Connection closed for inactivity)
[14:45:51] *** Quits: PrologMUD (~PrologMUD@c-98-232-203-68.hsd1.wa.comcast.net) (Remote host closed the connection)
[14:47:31] *** Joins: PrologMUD (~PrologMUD@c-98-232-203-68.hsd1.wa.comcast.net)
[15:17:24] *** Joins: bkhl (~bkhl@user/bkhl)
[15:17:56] *** Quits: PrologMUD (~PrologMUD@c-98-232-203-68.hsd1.wa.comcast.net) (Remote host closed the connection)
[15:31:15] *** Joins: PrologMUD (~PrologMUD@c-98-232-203-68.hsd1.wa.comcast.net)
[15:32:06] *** Quits: PrologMUD (~PrologMUD@c-98-232-203-68.hsd1.wa.comcast.net) (Remote host closed the connection)
[15:34:13] *** Joins: PrologMUD (~PrologMUD@c-98-232-203-68.hsd1.wa.comcast.net)
[16:28:44] <lf94> yeah
[17:44:14] <lf94> yauhsien: nice github :)
[17:47:31] <yauhsien> yeah, i just go over the advent of code 2021 in prolog and have fun coding.
[17:47:49] <lf94> I'm going over your advent of code specifically too, yeah. Lots of good stuff there!
[17:50:53] <tolja> I managed to complete 11 days this time before running out of time
[18:18:51] <yauhsien> eventually i missed about 5 days, 11 stars.
[18:22:25] *** Joins: skapata (~Skapata@2804:14c:87b0:a6f9:9048:56ad:c252:2add)
[18:22:25] *** Quits: skapata (~Skapata@2804:14c:87b0:a6f9:9048:56ad:c252:2add) (Changing host)
[18:22:25] *** Joins: skapata (~Skapata@user/skapata)
[19:07:00] *** Joins: Sheilong (uid293653@id-293653.ilkley.irccloud.com)
[19:18:56] <aindilis> lf94: hey
[19:24:05] <lf94> tolja: share? :D
[19:24:20] <lf94> aindilis: hey, I got around to updating my thing even with a game theory graph
[19:24:33] <aindilis> cool, yeah looking at it I think
[19:25:03] <aindilis> http://len.falken.directory/philosophy/logical-study-of-mandatory-vaccine.txt
[19:25:05] <aindilis> right?
[19:25:17] <aindilis> yes
[19:25:27] <aindilis> "What follows is a short game theory graph..."
[19:27:25] <aindilis> I like it
[19:27:42] <lf94> yeah that one
[19:27:44] <aindilis> so what are you working on now?
[19:27:52] <aindilis> do you have a moment to chat?
[19:27:52] <lf94> day job work lmao
[19:27:54] <aindilis> ah
[19:27:57] <lf94> webdev
[19:28:00] <lf94> but yes, talk away
[19:28:00] <aindilis> cool!
[19:28:12] <lf94> it's boring so irc keeps me sane
[19:28:16] <aindilis> well, I read some of your home page
[19:28:34] <lf94> "home page" X) Did you know it's a valid RSS feed? :)
[19:28:35] <aindilis> so I'll just lay everything out
[19:28:40] <aindilis> no I didn't
[19:28:46] <aindilis> I stopped using RSS
[19:28:55] <lf94> I never started! lol
[19:28:58] <aindilis> :)
[19:29:05] <aindilis> here is what I hasten to tell you:
[19:29:20] <aindilis> first is I have some notes on using proof + A/B testing for persuasion...
[19:29:32] <aindilis> I'll post those via paste.debian.net in a sec
[19:29:45] <aindilis> second is I noticed you have notes on packaging for Debian - which I am obsessed with
[19:29:54] <aindilis> third (while I try to remember)
[19:30:25] <aindilis> darn, cannot remember, will come to me later probably
[19:31:14] <aindilis> sorry my AI is talking to me and it disrupts my concentration
[19:31:23] <aindilis> I'm working on muzzling it
[19:33:36] <lf94> I really hate debian packaging lol
[19:33:58] <aindilis> heh, oh well :)
[19:34:00] <aindilis> http://paste.debian.net/1227404/
[19:34:01] <lf94> interesting to see those notes
[19:34:41] <aindilis> I think the 3rd thing I had wished to tell you was this:
[19:35:11] <aindilis> when doing proofs of this kind, there can be substantial amounts of background (commonsense) knowledge, for instance, that of probability theory, etc.
[19:35:17] <aindilis> or modal reasoning.
[19:35:33] <aindilis> for this reason, I highly suggest a commonsense reasoner.  the one I obsess on is CYC
[19:36:18] <lf94> What is CYC?
[19:36:22] <aindilis> hehe
[19:36:29] <lf94> "commonsense reasoner" is new to me
[19:36:32] <aindilis> ah
[19:36:40] <lf94> to be honest all this is new to me :D.
[19:36:53] <lf94> I only used prolog for like 2 weeks once in university, and that was 6 years ago
[19:36:53] <aindilis> well you are headed in many of the right directions from my point of view
[19:37:07] <lf94> I feel like I am too
[19:37:16] <aindilis> I recognize that you are starting out in a sense, but you have a gift I think
[19:37:21] <lf94> Prolog programs feel super natural to write, and more correctly than most software.
[19:37:30] <aindilis> yeah you did stuff that I never thought of
[19:37:47] <lf94> Well I come from a heavy software background - I understand how languages work more or less
[19:37:50] <aindilis> so, CYC is this big (proprietary, but with open versions) AI system
[19:38:04] <lf94> I have a lot of self study in lambda calculus and turing machines
[19:38:05] <aindilis> its kinda like the paragon of symbolic AI
[19:38:11] <aindilis> wow cool
[19:38:18] <aindilis> did you read Turing's 1939 thesis?
[19:38:27] <lf94> I probably did, it was a long time ago
[19:38:28] <aindilis> I recommend that
[19:38:29] <aindilis> kk
[19:38:35] <aindilis> my work is based on it
[19:38:45] <aindilis> but I actually kinda suck at LC
[19:38:51] <lf94> http://len.falken.directory/p-lang/lambdajs.txt
[19:39:00] <lf94> :)
[19:39:03] <lf94> I did a full adder using it
[19:39:11] <aindilis> awesome!
[19:39:17] <lf94> note I am not formally taught in any way about this stuff
[19:39:25] <aindilis> well that can be an advantage
[19:39:54] <lf94> I think self learning is generally better, gives you time to think of all the implications of something
[19:40:11] <aindilis> alright, so yeah if you don't mind using a system with proprietary roots, then CYC can help cut a lot of corners.  Also dmiles here has a libre CYC reimplementation
[19:40:12] <lf94> vs being forced to move ahead in some class room setting
[19:40:24] <lf94> dmiles sounds familiar...
[19:40:24] <aindilis> oh right
[19:40:33] <aindilis> yeah I am hybrid - schooling + self-taught
[19:40:34] <lf94> I do mind about using a proprietary system though
[19:40:44] <aindilis> okay, that's good
[19:40:51] <lf94> I need my argumentation system to be future proof
[19:40:53] <lf94> :D
[19:41:07] <aindilis> well OpenCYC is open source
[19:41:11] <lf94> You might find this funny, did it last night lol http://len.falken.directory/philosophy/libertarians-cant-answer-this.txt
[19:41:20] <lf94> I'll check out OpenCYC
[19:41:35] <lf94> (the question was posed by a friend, because i said i'll formalize anything into prolog)
[19:41:41] <aindilis> interesting
[19:41:52] <aindilis> I saw the link and noticed it, but didn't follow
[19:41:56] <lf94> (it can explored way further but it was just a fun thing lol)
[19:42:08] <aindilis> can you explain the gist?
[19:42:38] <lf94> basically it's supposed to be arguing that evaporating water using a giant mirror isnt stealing
[19:42:45] <aindilis> okay
[19:42:51] <lf94> the prolog program above proves it is stealing
[19:43:06] <aindilis> (so btw, re CYC, between dmiles' reimplementation of CYC and the export of OpenCYC, we should be able to have a libre version of CYC)
[19:43:15] <aindilis> okay
[19:43:19] <aindilis> let me think for a sec
[19:43:36] <aindilis> so in a way you are arguing about externalities of actions and intent?
[19:43:56] <aindilis> let me see how CYC defines stealing
[19:44:23] <lf94> your debian paste is very confusing to me :D
[19:44:31] <aindilis> sorry bout that
[19:44:39] <aindilis> I can explain
[19:44:43] <lf94> I guess it's just explaining how you'd implement that system
[19:45:12] <aindilis> actually I'm finding it hard to explain atm
[19:45:30] <aindilis> btw, CYC's "definition" of stealing lacks a real semantics
[19:45:39] <aindilis> oh wait
[19:46:34] <aindilis> it has a lot of predicates denoting changes in user's rights
[19:46:42] <aindilis> without KBQA it's hard to map English to predicates.
[19:47:50] <aindilis> https://commonsensereasoning.org/
[19:48:03] <lf94> so basically that little exercise showed the entire argument relies on the definition of stealing
[19:48:15] <aindilis> whose argument?
[19:48:22] <lf94> the water evaporation one
[19:48:35] <lf94> which is interesting, we can go down two paths
[19:48:38] <lf94> the path of legal definition
[19:48:48] <lf94> the path of ideological definition
[19:48:55] <lf94> probably more paths
[19:49:07] <lf94> then "depending on the person you are", you can determine if it is stealing.
[19:49:27] <aindilis> hrm, so are libertarians expected to say it is not stealing?
[19:49:28] <lf94> I'm really starting to see prolog as a "thought game"
[19:49:32] <lf94> yeah
[19:49:32] <aindilis> and if so, what is their justification?
[19:49:37] <lf94> well, exactly
[19:49:43] <lf94> you have to find it
[19:50:07] <aindilis> so like imagine you dump some trash in someone else's dumpster, is that stealing?
[19:50:22] <lf94> technically you are taking their space
[19:50:25] <aindilis> right
[19:50:28] <lf94> BUT
[19:50:28] <aindilis> so is it?
[19:50:41] <lf94> it depends purely on the definition of stealing
[19:50:49] <lf94> do we go with a legal definition, or an ideological one?
[19:50:52] <aindilis> well there is a term for this type of stealing:
[19:50:56] <aindilis> theft of service
[19:51:10] <aindilis> it's a concept that has helped me out
[19:51:16] <lf94> do we go with the definition of stealing where you can only take physical things
[19:51:17] <lf94> etc
[19:51:33] <lf94> you can adjust the "strictness" of the definition
[19:51:40] <lf94> creating new outcomes.
[19:51:44] <aindilis> for instance, if one pirates a movie, that is not theft, since you haven't taken away the original copy.  however, it is theft of service.
[19:52:20] <aindilis> right
[19:52:24] <lf94> as the prolog "player", it's my job to discover this tree of possibilities, and once found, can be shared with the "questioner"
[19:52:45] *** Joins: rgrinberg (~textual@2806:101e:7:2b:f4e6:13e8:c8a9:3722)
[19:52:48] <lf94> the "questioner" then verifies my facts and rules
[19:52:48] <aindilis> so you're providing a game-theoretic semantics for various concepts, and you implement the definitions in prolog
[19:53:08] <lf94> well some problems will not require game theory
[19:53:12] <lf94> i dont believe this one does
[19:53:16] <aindilis> k
[19:53:16] <lf94> but the vaccine one certainly does
[19:54:02] <aindilis> I believe it is possible to implement formal definitions in Prolog, and then reason with them
[19:54:11] <lf94> if there is a disagreement about a fact, it can easily be pointed out, and the whole thing re-evaluated.
[19:54:19] <aindilis> right
[19:54:30] <lf94> it's a computable argument :D
[19:54:31] <aindilis> for instance: V-ger from Star Trek 1, was programming to learn all that it could and return that knowledge to its creator
[19:54:35] <aindilis> :)
[19:55:06] <aindilis> so one issue with this type of programming is called the Knowledge Bottleneck
[19:55:28] <lf94> https://commonsensereasoning.org/problem_page.html#cookiedough
[19:55:35] <lf94> interesting, I should try to formalize these
[19:55:50] <aindilis> as you try to tackle more complex problems, the amount of background knowledge required increases
[19:56:07] <aindilis> that's why ontologies like CYC's ontology or SigmaKEE's SUMO are handy
[19:56:25] <aindilis> yeah definitely, I'd love to see what you come up with
[19:56:58] <aindilis> if I may, try the egg cracking problem
[19:57:07] * lf94 looks
[19:57:39] <aindilis> https://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.50.621&rep=rep1&type=pdf
[19:58:09] <lf94> lol, _super_ formalized
[19:58:15] <lf94> I think I'll just close that X)
[19:58:39] <aindilis> :)
[19:58:47] <lf94> (the egg is not forever) <- pretty much what I'm going to do, list a bunch of properties of eggs
[19:59:41] <lf94> "axiom" must be synonymous with "fact"
[19:59:57] <aindilis> ooh, I have to go for a bit, forgot to eat breakfast
[20:00:02] <lf94> ttyl
[20:00:04] <aindilis> o/
[20:07:24] *** Joins: jealousmonk (~user@2804:431:e7c5:b880:889f:205:ed34:5b22)
[20:22:14] <tolja> lf94: here's day 8: https://dpaste.com/G6SBNSQQH
[20:22:34] <tolja> The rest weren't quite so nice
[20:22:53] *** Quits: bkhl (~bkhl@user/bkhl) (Quit: ZNC - https://znc.in)
[20:23:00] <lf94> I was going to say: looks so elegant
[20:25:05] <lf94> hpos/HPosition-dep/Depth)
[20:25:11] <lf94> yauhsien: what kind of syntax is this
[20:26:02] <aindilis> https://doc.lagout.org/programmation/Prolog/Adventure%20in%20Prolog%20-%20Amzi.pdf
[20:26:59] *** Quits: rgrinberg (~textual@2806:101e:7:2b:f4e6:13e8:c8a9:3722) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[20:27:59] <yauhsien> lf94: it's functor. in prolog, parameters and arguments can be represented with functors.
[20:28:34] <lf94> functor as in a lambda function or something else?
[20:28:49] <lf94> hpos:HPosition -> dep:Depth -> ... ?
[20:29:06] <yauhsien> lf94: functor is free formated, except it have to be either infix or prefix.
[20:29:07] <lf94> Where ... is the body
[20:29:43] <lf94> I'm very confused :D
[20:29:56] <lf94> If I remember correctly, functor is a map function
[20:30:12] <lf94> "params and args can be represented with map functions"
[20:30:19] <lf94> I find this pretty confusing
[20:30:19] <yauhsien> "functor" is some what-you-want syntax that make data with it different than normal data.
[20:30:50] <lf94> Is there some documentation you can point me to? :)
[20:30:52] <aindilis> yauhsien: can you elaborate on functors?
[20:30:59] <aindilis> lf94: the --> is a DCG btw
[20:31:21] <lf94> I just meant to use -> as a lambda function syntax
[20:31:30] <lf94> (vs the usual dot notation)
[20:32:40] <aindilis> lf94: you can define operators in Prolog by :- op(xfx,'->',90).  or something like that.  But in this case, -> is reserved for if-then-else
[20:32:43] <yauhsien> lf94: for example: the Piano axiom, i will code "nat(zero). nat(succ(X)) :- nat(X)." and 'succ' is a functor which make 'succ(_)' a data which is just not an atom.
[20:33:22] <lf94> aindilis: ah yes, that I know :) I should be careful.
[20:33:38] <yauhsien> aindilis: sure.
[20:33:49] <lf94> Piano -> Peano
[20:33:50] <lf94> :)
[20:34:08] <aindilis> so a functor is like a predicate(arg1,arg2,...,argn). ?
[20:34:22] <aindilis> a term, right?
[20:34:35] <lf94> technically a functor in the category sense is: predicate(n) :- m. ? I think
[20:34:38] <lf94> a mapping 
[20:34:58] <aindilis> interesting
[20:35:04] <lf94> nat(succ(X)) just looks like a normal procedure to me
[20:35:28] <lf94> "nat(succ(X)) holds if nat(X) holds"
[20:35:34] <lf94> I see it as kind of pattern matching
[20:35:52] <lf94> I would suspect succ(_). fails
[20:35:54] <yauhsien> aindilis: no. functor is to build a function-like term.
[20:35:56] <lf94> with just those definitions
[20:36:00] <aindilis> k
[20:36:07] <lf94> do we not have a prolog bot in here? :)
[20:36:10] <lf94> ?- 
[20:36:13] <lf94> ?- hello.
[20:36:18] <lf94> Ah, we do!
[20:36:27] <lf94> prologMUD seems to handle it
[20:36:28] <aindilis> ?- hello.
[20:36:32] <lf94> It'll PM you
[20:36:45] <aindilis> cool, that's an improvement over posting to the channel hehe
[20:36:56] <aindilis> prologMUD is dmiles' thing btw lf94
[20:37:11] <lf94> ?- nat(zero). nat(succ(X)) :- nat(X). :- succ(_).
[20:37:29] <lf94> Eh, not sure how to add things to the context
[20:37:35] <lf94> This is toplevel...
[20:37:41] <aindilis> maybe with assert?
[20:37:44] <yauhsien> ?- huh.
[20:37:45] <lf94> Maybe dmiles_afk can pitch in :)
[20:38:05] <aindilis> :- p(x).
[20:38:06] <lf94> aindilis: probably, I vaguely remember from reading around how to add to the context in the toplevel...
[20:38:17] <aindilis> cool
[20:38:18] <lf94> :- hello.
[20:38:25] <lf94> ?- hello.
[20:38:28] <aindilis> dynamic :- p.
[20:38:29] <yauhsien> wow, prolog bot, cool.
[20:38:32] <aindilis> oops:
[20:38:36] <aindilis> :- dynamic p/1.
[20:38:36] <lf94> nope, still not working
[20:38:52] <aindilis> ?- assert(p(x)).
[20:38:53] <PrologMUD> aindilis: %  det(Yes,1)
[20:38:58] <lf94> I want to make a "mobile-first" web application for prolog
[20:38:59] <aindilis> ?- p(Y).
[20:39:00] <PrologMUD> aindilis:  % Y=x%  det(Yes,1)
[20:39:15] <aindilis> it looks like every pred has been marked dynamic for some reason
[20:39:40] <aindilis> lf94: there is a web dev discipline for Prolog, let me find it
[20:39:44] <lf94> ?- assert(nat(zero). nat(succ(X)) :- nat(X).). succ(_).
[20:39:46] <yauhsien> ?- prolog_flat(stack_limit, N).
[20:40:04] <yauhsien> ?- prolog_flags(stack_limit, N).
[20:40:21] <lf94> did we kill it
[20:40:33] <lf94> ?- succ(_).
[20:40:51] <yauhsien> ?- succ(succ(zero)).
[20:41:00] <lf94> is anyone looking for a webdev who wants to get into prolog
[20:41:01] <lf94> B)
[20:41:04] <yauhsien> :D
[20:41:11] <aindilis> I am hehe, do you mean $work?
[20:41:20] <lf94> yeah, but to hire me
[20:41:26] <aindilis> yeah, no can do srry
[20:41:39] <lf94> expected :p
[20:42:19] <aindilis> https://github.com/Anniepoo/swiplwebtut/blob/master/web.adoc
[20:42:24] <aindilis> srry that took so long
[20:42:57] <aindilis> the way I do web dev is Prolog<-Yaswi->Perl(ShinyCMS(Catalyst)).
[20:43:22] <aindilis> allows me to use all my legacy Perl prorgams
[20:44:03] <yauhsien> i would like to build some application, then build a firm. i would like to use prolog and its successors like erlang and elixir.
[20:44:13] <aindilis> cool!
[20:44:36] <yauhsien> but the most important to me, is everything about business itself.
[20:44:49] <aindilis> yauhsien: I see you contribute a lot on like here and facebook, is Prolog your primary language?
[20:45:06] <lf94> For me, webdev is mostly Rust or NodeJS
[20:45:09] <aindilis> I like that you are so helpful to the community
[20:45:21] <lf94> (on the server side)
[20:45:27] <aindilis> ah coolbeans
[20:45:28] <yauhsien> aindilis: in recent months, yes; years, no.
[20:45:32] <aindilis> yeah everything is nodejs yes
[20:45:34] <aindilis> cool!
[20:45:58] <lf94> I would like to use prolog maybe for my 3D printing stuff
[20:46:06] <lf94> Mix it with code CAD
[20:46:10] <yauhsien> aindilis: thx.
[20:46:15] <aindilis> :)
[20:46:33] <aindilis> lf94: you might talk to anniepoo about that, she does some CAD iirc
[20:46:41] <aindilis> + Prolog
[20:46:54] <lf94> Neat
[20:48:21] <aindilis> btw, dmiles and I have a Discord server for Logicmoo and FRDCSA if either of you are interested.  It's mostly about Prolog, it might be a neat addition to this channel: https://discord.com/invite/JREW7F2
[20:49:33] <yauhsien> aindilis: yay, i was looking forward to it. thx.
[20:49:44] <aindilis> awesome!!!
[20:50:17] *** Joins: econo (uid147250@user/econo)
[20:51:27] *** Joins: bkhl (~bkhl@user/bkhl)
[20:54:04] <lf94> I was looking for something more active also
[20:54:20] <aindilis> well our Discord is pretty low key at this point
[20:56:44] *** Quits: bkhl (~bkhl@user/bkhl) (Quit: ZNC - https://znc.in)
[20:58:12] *** Joins: bkhl (~bkhl@user/bkhl)
[21:06:21] <lf94> how come?
[21:23:20] *** Joins: rgrinberg (~textual@2806:101e:7:2b:f4e6:13e8:c8a9:3722)
[21:26:18] *** Quits: bkhl (~bkhl@user/bkhl) (Remote host closed the connection)
[22:45:04] *** Quits: Haxxa (~Haxxa@202-144-174-197.ip4.superloop.com) (Quit: Haxxa flies away.)
[22:47:38] *** Joins: Haxxa (~Haxxa@202-144-174-197.ip4.superloop.com)
[23:19:36] *** Quits: yauhsien (~Yau-Hsien@61-231-24-192.dynamic-ip.hinet.net) (Read error: Connection reset by peer)
[23:47:21] *** Quits: [relay]_ (~logicmoo@c-98-232-203-68.hsd1.wa.comcast.net) (Read error: Connection reset by peer)
[23:47:34] *** Joins: [relay]_ (~logicmoo@c-98-232-203-68.hsd1.wa.comcast.net)
[23:48:37] *** Joins: yauhsien (~yauhsien@61-231-62-246.dynamic-ip.hinet.net)
[23:53:29] *** Quits: yauhsien (~yauhsien@61-231-62-246.dynamic-ip.hinet.net) (Ping timeout: 256 seconds)
