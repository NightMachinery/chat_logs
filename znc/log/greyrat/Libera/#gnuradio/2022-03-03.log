[00:00:44] *** Quits: DiffieHellman (~Username@user/curve25519chacha) (Remote host closed the connection)
[00:01:22] *** Joins: DiffieHellman (~Username@user/curve25519chacha)
[00:04:07] *** Joins: uros (~Thunderbi@2001:8a0:6074:ad00:ac0a:6ca6:a854:892d)
[00:17:02] *** Quits: __alex (~alex@ip5f5be2d7.dynamic.kabel-deutschland.de) (Ping timeout: 272 seconds)
[00:27:08] *** Quits: uros (~Thunderbi@2001:8a0:6074:ad00:ac0a:6ca6:a854:892d) (Quit: uros)
[00:33:56] <willcode4[m]> n1ai: Increase number of points to 10240 on the eye sink and you'll see an eye. It's not stable, but it's there. Your sample rate seems to be high enough (relative to transitions) that the eye doesn't show in 1024 points.
[00:34:25] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Ping timeout: 256 seconds)
[00:37:45] *** Quits: pcero (~pcero@187.135.224.43) (Ping timeout: 268 seconds)
[00:40:12] <MarcinP[m]> <willcode4[m]> "n1ai: Increase number of..." <- exactly what I did in my last modification
[00:49:55] *** Joins: BrianG61UK (~BrianG61U@2a02:8010:66b7:dddd:d55b:2c16:96aa:6ea3)
[00:53:46] <DaveCherkusN1AI[> So, is there any "rule of thumb" to setting the number of points in the eye sink?  
[00:56:17] <MarcinP[m]> it has to be multiple of sample per seconds for sure
[01:02:36] *** Joins: wolfshappen_ (~waff@irc.furworks.de)
[01:02:39] *** Quits: wolfshappen (~waff@irc.furworks.de) (Ping timeout: 272 seconds)
[01:03:25] <DaveCherkusN1AI[> Is that true for the gui time sink too?  Maybe that's why my flowgraph seems to wander across the screen both in time sink and in eye diagram? 
[01:06:24] <Myon> what can I do to keep the delay of an audio source as short as possible? I have a CW modulator driven by an external morse keyer, but the audio delay is almost a second. https://www.df7cb.de/s/2022-03-02.223414.6nyJWF.png
[01:06:57] <Myon> adding that throttle block helps a bit, but drops too many samples
[01:07:12] <Myon> err audio sink of course
[01:07:50] <MarcinP[m]> I think that throttle is useless there
[01:08:18] <Myon> I'd rather go without it, yes
[01:08:30] <DaveCherkusN1AI[> My diagram wanders like a scope trace that doesn't trigger.  I guess that's what willcode4 meant by it being unstable?
[01:09:19] <Myon> but if I set the audio sink to "ok to block", it limits the flowgraph by keeping its input buffer filled, afaict
[01:09:33] <Myon> (it = the audio sink)
[01:14:36] <Myon> hmm, throttling it by using an (unused) audio source makes it almost real-time: https://www.df7cb.de/s/2022-03-02.224327.nrmg1G.png
[01:15:01] <Myon> but it's still too slow to be used as CW sidetone
[01:26:51] <BarryDuggan[m]> n1ai: clone https://github.com/duggabe/gr-RTTY-basics and follow the instructions... (full message at https://libera.ems.host/_matrix/media/r0/download/libera.chat/256e42075f2f869b9d037efc077f1454d7352533)
[01:29:00] <DaveCherkusN1AI[> Is this where the sim is?  I thought this is where the "real radio" flowgraphs are.
[01:29:38] <DaveCherkusN1AI[> Basically what I want to see is the sim flowgraph with an eye diagram in it.
[01:29:42] <BarryDuggan[m]> it's sort of a sim because it's not using a radio
[01:30:32] <BarryDuggan[m]> use the RTTY_rcv flowgraph to see where I put the eye sink
[01:30:43] <DaveCherkusN1AI[> Ok.  I thought you had https://wiki.gnuradio.org/index.php?title=Simulation_example:_FSK but with an eye diagram in it.
[01:31:39] <BarryDuggan[m]> I should add that 🙂
[01:32:50] <DaveCherkusN1AI[> Right, I did use your RTTY_rcv flowgraph to figure out where to put the eye sink into my "enhanced" FSK sim flowgraph.  I'm still not sure I did that right though.  As above, they are saying to increase the eye sinks number of points to 10*1024 or so.
[01:33:30] <DaveCherkusN1AI[> Mine works, but the displays are "unstable" to borrow willcode4's expression.
[01:33:47] <DaveCherkusN1AI[> My current pastebin: https://pastebin.com/wpWQwJPs
[01:33:57] <BarryDuggan[m]> set the trigger to 'Auto'
[01:34:08] <DaveCherkusN1AI[> BRB.
[01:43:44] <Myon> https://www.youtube.com/watch?v=jq0RewceCwc looks promising, hopefully I can get that Latency Manager to work
[01:54:30] <Myon> DerekKozel[m]: is something like that Latency Manager from the 2019 talk still the way to go if I want real-time audio?
[01:57:26] <Myon> (off to bed, will read backlog)
[03:04:44] *** Quits: jemius (~imperator@200116b82ded26009ef54da4d5502a69.dip.versatel-1u1.de) (Quit: Leaving)
[03:36:06] *** Quits: Tangent-Man (~Tang3nt-M@cpc145602-basl14-2-0-cust33.20-1.cable.virginm.net) (Remote host closed the connection)
[03:36:19] *** Quits: shibboleth (~shibbolet@user/shibboleth) (Quit: shibboleth)
[03:41:36] *** Quits: arch3r (~ben@185.66.194.79) (Ping timeout: 272 seconds)
[03:41:54] *** Joins: arch3r (~ben@185.66.194.78)
[03:50:27] *** Quits: goldrak (~goldrak@bl16-27-108.dsl.telepac.pt) (Ping timeout: 252 seconds)
[04:25:26] *** Quits: revolve (~u0_a227@cpc100838-bagu15-2-0-cust672.1-3.cable.virginm.net) (Ping timeout: 260 seconds)
[04:31:08] *** Joins: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net)
[04:51:36] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Ping timeout: 245 seconds)
[04:53:33] *** Joins: revolve (~u0_a227@cpc100838-bagu15-2-0-cust672.1-3.cable.virginm.net)
[05:17:01] *** Quits: Peanut (~paul@user/peanut) (Ping timeout: 240 seconds)
[05:17:40] *** Joins: Peanut (~paul@user/peanut)
[05:23:48] <BarryDuggan[m]> n1ai: here is my revised FSK_example.grc  https://pastebin.com/VZcyy94a
[05:34:31] *** Joins: pcero (~pcero@187.135.224.43)
[06:12:11] *** Quits: tj123 (~tjh123@cpe-75-185-104-199.cinci.res.rr.com) (Remote host closed the connection)
[06:12:34] *** Joins: tj123 (~tjh123@cpe-75-185-104-199.cinci.res.rr.com)
[06:19:35] *** Joins: monowar (~Thunderbi@FL1-119-239-185-76.fko.mesh.ad.jp)
[06:43:47] *** Quits: pcero (~pcero@187.135.224.43) (Quit: Konversation terminated!)
[06:48:55] *** Quits: gh555222 (~gh555222@99-47-218-161.lightspeed.cntmoh.sbcglobal.net) (Quit: Quit: "The best thing you can do for your country, is get re-elected.")
[07:04:53] * patchvonbraun[m] uploaded an image: (3104KiB) < https://libera.ems.host/_matrix/media/r0/download/gnuradio.org/76dd1b93fe805521b4ae669cc99f1f374f9593a7/ima_27b991d.jpeg >
[07:04:57] <patchvonbraun[m]> First of 4.
[07:08:38] *** Quits: revolve (~u0_a227@cpc100838-bagu15-2-0-cust672.1-3.cable.virginm.net) (Read error: Connection reset by peer)
[07:15:08] <mcdiarmid[m]> I can't remember if I asked this before, but does anyone know if it's possible to set CPU affinity for the UHD: USRP Source block when connected to a USRP N3XX?  Works as I expect with N210's but not N310's.  Running Ubuntu20.04 with apt installs of GNURadio 3.8.3.1 and UHD 3.15.  Thanks!
[07:16:25] <patchvonbraun[m]> On the N310 itself?
[07:17:08] <mcdiarmid[m]> On the system interfacing with the N310 that's running GNURadio
[07:19:11] <patchvonbraun[m]> Yeah so. GnuRadio manages thread affinity when it creates threads for blocks to run in as far as I know. UHD itself I don’t think knows or cares.
[07:21:27] <patchvonbraun[m]> My understanding of CPU affinity in Linux is that it’s a guideline. Emergent behaviors can cause your thread to run on other CPUs, I think?
[07:22:27] <mcdiarmid[m]> That makes sense, probably why CPU affinity doesn't work with Qt GUI blocks either
[07:23:04] <mcdiarmid[m]> Thanks for the explanation, I'll do a bit of digging in the UHD repo
[07:31:23] *** Quits: monowar (~Thunderbi@FL1-119-239-185-76.fko.mesh.ad.jp) (Quit: monowar)
[07:32:12] *** Quits: tj123 (~tjh123@cpe-75-185-104-199.cinci.res.rr.com) (Ping timeout: 240 seconds)
[07:39:41] *** Joins: revolve (~u0_a227@cpc100838-bagu15-2-0-cust672.1-3.cable.virginm.net)
[07:58:07] *** Quits: superkuh (~superkuh@user/superkuh) (Ping timeout: 256 seconds)
[07:58:44] *** Joins: superkuh (~superkuh@user/superkuh)
[08:24:17] *** Quits: revolve (~u0_a227@cpc100838-bagu15-2-0-cust672.1-3.cable.virginm.net) (Ping timeout: 240 seconds)
[08:24:22] *** Quits: jstein (~jstein@gentoo/developer/jstein) (Ping timeout: 260 seconds)
[08:40:49] *** Joins: w1r3d (~w1r3d@user/w1r3d)
[08:55:12] *** Quits: w1r3d (~w1r3d@user/w1r3d) (Read error: Connection reset by peer)
[09:39:22] *** Joins: revolve (~u0_a227@cpc100838-bagu15-2-0-cust672.1-3.cable.virginm.net)
[09:48:34] *** Quits: arch3r (~ben@185.66.194.78) (Ping timeout: 250 seconds)
[09:48:49] *** Joins: arch3r (~ben@185.66.194.79)
[09:51:10] *** Quits: vishwin (~brioux@2001:470:1f07:302::1) (Ping timeout: 260 seconds)
[09:53:47] *** Joins: vishwin (~brioux@2001:470:1f07:302::1)
[10:08:27] *** Quits: arch3r (~ben@185.66.194.79) (Ping timeout: 256 seconds)
[10:12:25] *** Quits: ve7it (~LawrenceG@S0106f0f249afdb93.pk.shawcable.net) (Remote host closed the connection)
[10:27:43] *** Quits: Elzington (~Elzington@87.249.134.10) (Ping timeout: 256 seconds)
[10:29:43] *** Joins: Elzington (~Elzington@68.235.43.22)
[11:25:58] *** Joins: massi (~massi@host-188-15-128-106.business.telecomitalia.it)
[11:31:32] *** Quits: duude__ (~duude__@user/duude/x-4676560) (Ping timeout: 272 seconds)
[11:34:11] *** Joins: jstein (~jstein@gentoo/developer/jstein)
[11:47:17] *** Joins: MajorBiscuit (~MajorBisc@2a02:a461:129d:1:193d:75d8:745d:e91e)
[11:49:11] *** Joins: Tangent-Man (~Tang3nt-M@cpc145602-basl14-2-0-cust33.20-1.cable.virginm.net)
[11:50:11] *** Quits: Tangent-Man (~Tang3nt-M@cpc145602-basl14-2-0-cust33.20-1.cable.virginm.net) (Remote host closed the connection)
[11:50:33] *** Joins: Tangent-Man (~Tang3nt-M@cpc145602-basl14-2-0-cust33.20-1.cable.virginm.net)
[11:50:50] *** Joins: goldrak (~goldrak@217-212-240-69.teliacarrier-cust.com)
[12:06:31] *** Joins: duude__ (~duude__@user/duude/x-4676560)
[12:09:48] *** Joins: uros (~Thunderbi@2001:8a0:6074:ad00:4fdc:10fb:83d4:ff88)
[12:14:50] *** Quits: uros (~Thunderbi@2001:8a0:6074:ad00:4fdc:10fb:83d4:ff88) (Quit: uros)
[12:17:03] *** Joins: uros (~Thunderbi@2001:8a0:6074:ad00:6c2c:7cd7:8834:d044)
[12:17:08] *** Quits: duude__ (~duude__@user/duude/x-4676560) (Ping timeout: 272 seconds)
[12:27:47] <MarcinP[m]> Hi, I have this message:... (full message at https://libera.ems.host/_matrix/media/r0/download/libera.chat/d4b12ed4f97177d420d02f7b3a188e22613f30b9)
[12:28:19] <MarcinP[m]> I have few tagged_stream_to_pdu blocks in my design, do you know how to find which one is complaining?
[12:30:10] *** Quits: vomoniyi[m] (~vomoniyig@2001:470:69fc:105::3023) (Quit: You have been kicked for being idle)
[12:33:17] *** Joins: indigaz6 (~Indigaz@user/indigaz)
[12:34:12] *** Quits: indigaz (~Indigaz@user/indigaz) (Ping timeout: 240 seconds)
[12:34:13] *** indigaz6 is now known as indigaz
[12:48:35] <funkylab[m]> <patchvonbraun[m]> "ima_27b991d.jpeg" <- an RF halfpipe?
[12:52:13] *** Joins: duude__ (~duude__@user/duude/x-4676560)
[12:54:28] *** Quits: MajorBiscuit (~MajorBisc@2a02:a461:129d:1:193d:75d8:745d:e91e) (Ping timeout: 250 seconds)
[12:56:38] *** Joins: MajorBiscuit (~MajorBisc@2a02:a461:129d:1:193d:75d8:745d:e91e)
[12:59:57] *** Quits: Thorn (~Thorn@user/thorn) (Ping timeout: 240 seconds)
[13:03:02] *** Quits: MajorBiscuit (~MajorBisc@2a02:a461:129d:1:193d:75d8:745d:e91e) (Ping timeout: 240 seconds)
[13:03:43] *** Joins: Thorn (~Thorn@user/thorn)
[13:04:58] *** Joins: MajorBiscuit (~MajorBisc@86-88-79-148.fixed.kpn.net)
[13:23:41] *** Quits: Thorn (~Thorn@user/thorn) (Ping timeout: 256 seconds)
[13:24:16] <LordKalma> morning
[13:26:25] *** Joins: Thorn (~Thorn@user/thorn)
[13:33:35] *** Quits: Peanut (~paul@user/peanut) (Ping timeout: 256 seconds)
[13:33:43] *** Joins: Peanut (~paul@user/peanut)
[13:46:27] *** Quits: MajorBiscuit (~MajorBisc@86-88-79-148.fixed.kpn.net) (Quit: WeeChat 3.4)
[13:51:51] *** Joins: MajorBiscuit (~MajorBisc@c-001-023-033.client.tudelft.eduvpn.nl)
[14:46:55] *** Quits: spithash (~spithash@user/spithash) (Ping timeout: 240 seconds)
[14:48:11] *** Joins: spithash (~spithash@user/spithash)
[14:59:21] <JoshMorman[m]> <MarcinP[m]> "I have few tagged_stream_to_pdu..." <- The name that is given inside the runtime is the alias.  You can try printing out the block alias after you instantiate it.  For instance if you have
[14:59:21] <JoshMorman[m]> `block1 = blocks.tagged_stream_to_pdu(...)` then you can do something like `print(f"block1 --> {block1.alias()}")`
[15:27:49] *** Quits: miaoski (~miaoski@2001-b011-0001-677c-996f-df20-a45d-8069.dynamic-ip6.hinet.net) (Ping timeout: 256 seconds)
[15:28:34] *** Joins: pcero (~pcero@187.135.224.43)
[15:29:47] *** Joins: arch3r (~ben@185.66.194.78)
[15:40:18] *** Joins: arch3r- (~ben@185.66.194.79)
[15:40:18] *** Joins: miaoski (~miaoski@2001-b011-0001-677c-6d4f-12d0-9b50-c1c3.dynamic-ip6.hinet.net)
[15:40:36] *** Quits: arch3r (~ben@185.66.194.78) (Ping timeout: 240 seconds)
[15:41:52] *** arch3r- is now known as arch3r
[15:44:00] *** Quits: pcero (~pcero@187.135.224.43) (Quit: Konversation terminated!)
[15:45:08] *** Joins: pcero (~pcero@187.135.224.43)
[15:51:05] *** Joins: jemius (~jemius@2a01:4f8:c0c:8564::1)
[16:10:45] <MarcinP[m]> > <@mormj:gnuradio.org> The name that is given inside the runtime is the alias.  You can try printing out the block alias after you instantiate it.  For instance if you have
[16:10:46] <MarcinP[m]> > `block1 = blocks.tagged_stream_to_pdu(...)` then you can do something like `print(f"block1 --> {block1.alias()}")`
[16:10:46] <MarcinP[m]> Thanks Josh!
[16:21:06] *** Quits: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net) (Quit: Textual IRC Client: www.textualapp.com)
[16:29:10] *** Joins: shibboleth (~shibbolet@user/shibboleth)
[16:30:19] *** Joins: sn0wflake (~snowflake@k1vzx.com)
[16:36:56] *** Quits: pcero (~pcero@187.135.224.43) (Quit: Konversation terminated!)
[16:38:06] *** Joins: pcero (~pcero@187.135.224.43)
[17:01:04] *** Quits: jemius (~jemius@2a01:4f8:c0c:8564::1) (*.net *.split)
[17:01:04] *** Quits: Thorn (~Thorn@user/thorn) (*.net *.split)
[17:01:04] *** Quits: wolfshappen_ (~waff@irc.furworks.de) (*.net *.split)
[17:01:04] *** Quits: cuoops (~cuoops@user/cuoops) (*.net *.split)
[17:01:04] *** Quits: AdamHorden (~adam.hord@host81-150-189-121.in-addr.btopenworld.com) (*.net *.split)
[17:01:04] *** Quits: Echoz (~chris@user/echoz) (*.net *.split)
[17:01:04] *** Quits: opcode (~opcode@user/opcode) (*.net *.split)
[17:01:04] *** Quits: guerby (~guerby@ip165.tetaneutral.net) (*.net *.split)
[17:01:04] *** Quits: flynn378 (sid63564@2a03:5180:f:3::f84c) (*.net *.split)
[17:01:04] *** Quits: nukedclx (nukedclx@shell.k4be.pl) (*.net *.split)
[17:01:04] *** Quits: euidzero_ (~euidzero@158.101.10.150) (*.net *.split)
[17:01:04] *** Quits: Flash (~Flash@user/flash) (*.net *.split)
[17:01:04] *** Quits: murr4y (ali@user/murr4y) (*.net *.split)
[17:01:04] *** Quits: mybit (~wow@192.241.202.241) (*.net *.split)
[17:02:30] *** Joins: jemius (~jemius@2a01:4f8:c0c:8564::1)
[17:02:30] *** Joins: Thorn (~Thorn@user/thorn)
[17:02:30] *** Joins: wolfshappen_ (~waff@irc.furworks.de)
[17:02:30] *** Joins: cuoops (~cuoops@user/cuoops)
[17:02:30] *** Joins: AdamHorden (~adam.hord@host81-150-189-121.in-addr.btopenworld.com)
[17:02:30] *** Joins: opcode (~opcode@user/opcode)
[17:02:30] *** Joins: Echoz (~chris@user/echoz)
[17:02:30] *** Joins: guerby (~guerby@ip165.tetaneutral.net)
[17:02:30] *** Joins: flynn378 (sid63564@2a03:5180:f:3::f84c)
[17:02:30] *** Joins: nukedclx (nukedclx@shell.k4be.pl)
[17:02:30] *** Joins: euidzero_ (~euidzero@158.101.10.150)
[17:02:30] *** Joins: Flash (~Flash@user/flash)
[17:02:30] *** Joins: murr4y (ali@user/murr4y)
[17:02:30] *** Joins: mybit (~wow@192.241.202.241)
[17:03:16] *** Quits: euidzero_ (~euidzero@158.101.10.150) (Max SendQ exceeded)
[17:03:16] *** Quits: wolfshappen_ (~waff@irc.furworks.de) (Max SendQ exceeded)
[17:03:32] *** Joins: wolfshappen (~waff@irc.furworks.de)
[17:03:35] *** Joins: euidzero (~euidzero@158.101.10.150)
[17:05:28] *** Joins: __alex (~alex@ip5f5be2d7.dynamic.kabel-deutschland.de)
[17:15:42] *** Quits: jemius (~jemius@2a01:4f8:c0c:8564::1) (Remote host closed the connection)
[17:41:00] *** Quits: jbg (~jbg@user/jbg) (Ping timeout: 240 seconds)
[17:56:17] *** Quits: MajorBiscuit (~MajorBisc@c-001-023-033.client.tudelft.eduvpn.nl) (Ping timeout: 256 seconds)
[18:00:52] *** Joins: MajorBiscuit (~MajorBisc@2a02:a461:129d:1:193d:75d8:745d:e91e)
[18:16:24] <DaveCherkusN1AI[> Barry Duggan: I see the difference in the RTTY flowgraphs now, and when I compensate, everything works much better!
[18:17:02] * DaveCherkusN1AI[ uploaded an image: (11KiB) < https://libera.ems.host/_matrix/media/r0/download/gnuradio.org/f42f3769419b7017e455c4fcebcf34047b7b601c/image.png >
[18:17:50] <DaveCherkusN1AI[> This shows RTTY_receive.grc from github decimates by 50...  
[18:19:15] * DaveCherkusN1AI[ uploaded an image: (20KiB) < https://libera.ems.host/_matrix/media/r0/download/gnuradio.org/2ddcab90c38082a796a65c79b51cebcbb20c6552/image.png >
[18:19:47] <DaveCherkusN1AI[> Then it resamples by 50/960 before the eye sink.. This is the block I copied/pasted into my flowgraph... 
[18:21:11] <LordKalma> I didnt accompany the dicussion, but generally, it makes life easy if you resample in a way you get an integer number of samples per symbol
[18:21:14] <DaveCherkusN1AI[> Compare to https://wiki.gnuradio.org/index.php?title=Simulation_example:_FSK ...
[18:21:49] * DaveCherkusN1AI[ uploaded an image: (28KiB) < https://libera.ems.host/_matrix/media/r0/download/gnuradio.org/e82043940f8826bcfefc7e7737e9f56a5949721c/image.png >
[18:22:23] <LordKalma> when I last did something like this, I used a generator that did 120GS/s. for some convenience I used a sample rate that gave on that device an integer number of samples per symbol, and that had an integer number of samples over its buffer size .
[18:22:56] <LordKalma> then, my scope was a 200GS/s device, so I used like a 5/4 or multiple thereof resampling to get again an integer number of samples per symbol on demodulaion
[18:22:59] <LordKalma> makes like so much easier
[18:23:08] <DaveCherkusN1AI[> No decimate by 50, so when I copied/pasted the eye sink stuff from RTTY_receive.grc it was expecting the divide by 50 that wasn't there in the simulation example.
[18:23:16] <BarryDuggan[m]> the eye sink only works with an integer number of samples per symbol
[18:23:44] <DaveCherkusN1AI[> Right, but that wasn't the issue, it was a 50x difference in incoming sample rate!
[18:23:50] <LordKalma> hhaha
[18:23:57] <LordKalma> sounds like a problem
[18:24:40] <DaveCherkusN1AI[> Just showing you how I screwed up... 
[18:24:40] <BarryDuggan[m]> one has to check sample rates through each block of the flow
[18:25:01] <BarryDuggan[m]> easy to do 😉
[18:25:26] <LordKalma> yeah, especially when you're doing stuff in the order of "like the example but with a slight change" and you either dont understand it completely or dont pay attention, youre bound to screw up haha
[18:25:38] <DaveCherkusN1AI[> I still feel I'm missing the boat when it comes to how all the eye diagram parameters interact.
[18:26:50] <muaddib[m]> A great way to D-bug that if you’re doing a bunch of rate conversion, connect a ‘probe signal’ block to the stream in question then connect a message ‘debug block’ to that.
[18:26:55] <muaddib[m]> It will print the avg sample rate in the terminal
[18:27:46] <LordKalma> thats pretty good
[18:27:56] <muaddib[m]> It’s a lifesaver when your trying to achieve the desired rate by way of rational up and down sampling.
[18:28:12] <DaveCherkusN1AI[> Vy interesting, muaddib!  So in this example we have 48,000 hz sample rate with signal at 45.45 hz, will it print 45.45 hz?
[18:28:20] <LordKalma> numpy has resample_poly, its so convenient
[18:28:25] <muaddib[m]> No, 48ksps
[18:28:32] <muaddib[m]> It’s all about sample rate
[18:28:44] <muaddib[m]> GNURadio has resample poly
[18:28:53] <muaddib[m]> Er, polyphase arbitrary resampler
[18:29:15] <LordKalma> haha well, as long as you dont write 5/4 instead of 4/5
[18:29:20] <LordKalma> I guess that would be a common mistake
[18:29:58] <muaddib[m]> Well, GNURadio doesn’t have a ‘correct common mistake’ block…not yet
[18:30:09] <LordKalma> hahaha
[18:30:46] <muaddib[m]> But yes, it is a common mistake.
[18:30:46] <LordKalma> I imagine a clippy-type assistant "I noticed your final sample rate is a really weird value, you're sure you want this?"
[18:32:42] <DaveCherkusN1AI[> I guess that's the great thing about GR, you can just stick in another frequency sink if you want to see what the signal's frequency content is.  I am watching the CuriousMarc youtube series on debugging the Apollo comms hardware and they had racks of HP test gear to start and now they just grew an Agilent stack too.  I get it, the good stuff is really valuable when you are doing precision work, bu GR sure costs a lot less!
[18:34:26] <LordKalma> I keep getting emails from Keysight (Agilent/HP/whatever name they had since 5 minutes ago) every day pitching their products for probing here and there
[18:34:28] <muaddib[m]> YES! I tell ppl that all the time. ‘Instant visual debug’ and the fact that it’s streaming are two big factors. That’s why I love it so much. And the fact that your prototype graph can immediately be connected to hardware when it’s ready to test.
[18:34:32] <muaddib[m]> s/graph/flowgraph/
[18:36:01] <DaveCherkusN1AI[> Barry Duggan: TYVM for the tutorial, and the video too, and now online help desk service!  I am learning a lot!  I am also learning I have a lot more to learn!  One thing I'd suggest for the to-do list is to update the FSK simulation flowgraph online with the eye diagram.  It works well for me and IMO is very instructive. Again, TYVM!  
[18:36:09] <LordKalma> their flagship products sell by millions of <currency>
[18:36:49] <DaveCherkusN1AI[> Oh, and one LOL, when I first read "eye diagram" I thought it'd be a Qt simulation of those green tuning eyes from 1960s vintage radios! 
[18:37:14] <LordKalma> hahah I have an old tube radio with those magic tubes
[18:37:24] <BarryDuggan[m]> n1ai: I'll get that done very soon.
[18:37:34] <DaveCherkusN1AI[> No rush, Barry, you already do so much!
[18:37:48] <DaveCherkusN1AI[> Just want you to know it is helping others!
[18:38:33] <DaveCherkusN1AI[> Didn't RTTY operators in the old days use scopes in X-Y mode to tune their gear?  Or am I making that up?
[18:39:42] <BarryDuggan[m]> that is my understanding. I didn't do RTTY back then; just HF DXing on CW and SSB
[18:40:29] <DaveCherkusN1AI[> Ooooh, look at Wikipedia's rtty page, they have exactly what I was thinking of..
[18:40:30] <DaveCherkusN1AI[> https://en.wikipedia.org/wiki/Radioteletype
[18:41:01] *** Quits: Tangent-Man (~Tang3nt-M@cpc145602-basl14-2-0-cust33.20-1.cable.virginm.net) (Ping timeout: 256 seconds)
[18:41:15] <DaveCherkusN1AI[> https://en.wikipedia.org/wiki/Radioteletype#/media/File:RTTY_cross.JPG
[18:41:25] <LordKalma> speaking of RTTY and CW: https://imgur.com/a/dNz2F
[18:41:52] <LordKalma> a very early digital RTTY and CW machine. a shame it seems to be broken
[18:42:02] <LordKalma> belongs to a local ham radio club
[18:42:33] <DaveCherkusN1AI[> Google suggests this is a "crossed ellipse tuning indicator"
[18:43:24] <DaveCherkusN1AI[> LordKalma, send that to CuriousMarc and friends, they'll get it going in an instant!
[18:44:23] <BarryDuggan[m]> not the same behavior as the eye sink. it moves vertically when it is off frequency
[18:45:03] <LordKalma> DaveCherkusN1AI[ we are thinking its the eeprom that gave its last breath... or any IC in there rally...
[18:46:58] <DaveCherkusN1AI[> I don't know if this is what I want to do today, but is seems very possible to do this in GR:
[18:46:58] <DaveCherkusN1AI[> _Judging by this blog post from AI4SV and an inspection of the source code for fldigi (which supports such a scope in its RTTY mode), it's pretty simple — you just run the AF signal through two narrow filters at the mark and space frequencies (exactly as you would normally do when decoding RTTY), and then use the mark signal to drive the X axis and the space signal to drive the Y axis (or vice versa). You should AC-couple each
[18:46:58] <DaveCherkusN1AI[> signal (digitally, subtract it from a lowpassed version of itself) so that the display remains centered regardless of the signal strength._
[18:46:58] <DaveCherkusN1AI[> _You can also downmix each signal, after filtering, to a lower frequency and use the downmixed signals to drive the scope axes. Fldigi does this, apparently as a digital convenience to make it so that there will be a whole number of ellipse-cycles per audio block / per display update, which makes the digital nature of the scope a little bit less obvious._
[18:47:28] <DaveCherkusN1AI[> Reference: https://ham.stackexchange.com/questions/15253/how-is-a-crossed-ellipse-display-generated-from-fsk
[18:49:28] <DaveCherkusN1AI[> LordKalma:  too bad it didn't have "rope memory" like Apollo's AGC did!  There's a bunch of that stuff still sitting on the Moon and chances are very good if it was retrieved it'd still work!
[18:51:28] <DaveCherkusN1AI[> Anyway, on to my next goal, sorting out the 4FSK in these flowgraphs: https://github.com/mobilinkd/m17-gnuradio 
[18:52:58] <DaveCherkusN1AI[> This is a big part of why I wanted to understand 2FSK/RTTY and also how an eye diagram works.
[18:56:38] <funkylab[m]> hm, but that's not really an eye diagram
[18:57:18] <funkylab[m]> well, it could be if mark and space and symbol rate lead to orthogonal signalling
[18:57:30] <funkylab[m]> and if the filters where thus orthogonal
[18:57:37] <funkylab[m]> but in the description, that's not a given
[19:01:25] *** Joins: tj123 (~tjh123@cpe-75-185-104-199.cinci.res.rr.com)
[19:04:27] <muaddib[m]> Since you guys are mentioning the CuriousMarc videos I thought a bit of GNURadio history might be interesting to you. 
[19:04:27] <muaddib[m]> Balint Seeber (the SDR guy in the videos) has a ton of videos on YouTube with insane block counts in his flowgraphs. One of them he ended up having to put on a big screen TV because it was so massive. GNURadio has a unit of measure for flowgraphs called “Balints” which can be enabled from in one of the toolbar drop downs. I think the option is “show flowgraph complexity”
[19:05:54] <patchvonbraun[m]> He was involved in the ISEE-3 reboot project as well, using Arecibo and a USRP N210 to send signals to the probe to change its mission.  The almost succeeded as well, but a stuck valve caused it to lose all propellant and attitude control.
[19:06:03] <DaveCherkusN1AI[> <funkylab[m]> "hm, but that's not really an eye..." <- The description I posted was for an old-school "crossed ellipses" tuning indicator as opposed to an eye diagram.  I was saying one could make this in GR if one wanted... 
[19:08:53] <muaddib[m]> patchvonbraun: they succeeded in getting a response right? Just weren’t able to retask.
[19:09:13] <DaveCherkusN1AI[> > insane block counts in his flowgraphs
[19:09:13] <DaveCherkusN1AI[> Watching that video kinda led me to my urge to make more readable flowgraphs so I could later understand what I was thinking when I made the flowgraph.  I was/am afraid some of my flowgraphs might get that big and I'd never understand them going forward!  Regardless, I was very impressed by Balint's work.  He must be really sharp to be able to find his way around such huge flowgraphs!
[19:09:27] <patchvonbraun[m]> muaddib: Indeed.  Phil Karn helped with some of the telemetry decodes, because they were using a error-correction code that was no longer used.
[19:10:22] <patchvonbraun[m]> n1ai: One of the readability aids that I use is the "virtual sink/virtual source" blocks--you don't have to draw lines all over the place if you use them strategically.
[19:10:23] <DaveCherkusN1AI[> And of course really sharp to construct them in the first place!
[19:11:19] <DaveCherkusN1AI[> patchvonbraun: Yep, am onto that trick now!  And am on to obsessively commenting my flowgraphs too!  Now I just need to learn the dots-and-dashes box trick, hier blocks, etc.
[19:11:37] <DaveCherkusN1AI[> Or just buy a big-screen monitor!
[19:13:04] <DaveCherkusN1AI[> One accidental debug trick I learned for reading other people's flow graphs:  Delete a variable.  See what turns red.  Now you know exactly where the variable is used!  Hit Ctrl-Z to restore.  I found this out by accidentally deleting a variable and realizing it was being used in places i didn't know about.
[19:13:33] <patchvonbraun[m]> n1ai: I've done that with my own graphs that I haven't touched in a while :)
[19:13:44] <muaddib[m]> Disable works too
[19:13:56] <muaddib[m]> Press the ‘d’ key
[19:14:08] <muaddib[m]> Then ‘e’ to re-enable
[19:14:29] <DaveCherkusN1AI[> Yep, I'm up to speed on enable, disable, and bypass too. 
[19:14:41] <muaddib[m]> * Then ‘e’ to (re-)enable
[19:15:02] <muaddib[m]> Right, so you don’t have to delete to get red highlights
[19:15:09] <DaveCherkusN1AI[> Did not know about that view -> show expressions thing till you pointed it out.
[19:17:15] <patchvonbraun[m]> A "please find me the block named <foo>" feature would be nice.  
[19:19:00] *** Quits: vishwin (~brioux@2001:470:1f07:302::1) (Ping timeout: 240 seconds)
[19:22:29] <DaveCherkusN1AI[> I wish matrix/element had threads like slack.. I've lost the post someone made about the lines in the flowgraph trick and I can't find it now.  
[19:22:29] <DaveCherkusN1AI[> I also find the web browser app really doesn't like i when I scroll back in the history too much.  Seems to chew up memory like crazy so my web browser crashes.
[19:23:25] <DaveCherkusN1AI[> Hope this doesn't trigger people...
[19:24:13] <DaveCherkusN1AI[> The android app seems to be better behaved than the web app.
[19:30:05] <n1ai[m]> > Credit to Jacob  for using the lines trick [here](https://github.com/sandialabs/gr-fhss_utils). It's not really a _feature_ in GNURadio, just something you can do with hyphens, pipes and underscores
[19:30:05] <n1ai[m]> I found the quote I was looking for using the Android app.
[19:30:18] *** Quits: dsorber[m] (~dsorbergn@2001:470:69fc:105::e13a) (Quit: You have been kicked for being idle)
[19:30:18] *** Quits: ghostop14[m] (~ghostop14@2001:470:69fc:105::e14c) (Quit: You have been kicked for being idle)
[19:30:19] *** Quits: neelpandeya[m] (~neelpande@2001:470:69fc:105::e17f) (Quit: You have been kicked for being idle)
[19:30:19] *** Quits: berkays[m] (~berkaysgn@2001:470:69fc:105::e73e) (Quit: You have been kicked for being idle)
[19:30:19] *** Quits: Martin[m]1234567 (~martinmat@2001:470:69fc:105::1:3c0f) (Quit: You have been kicked for being idle)
[19:30:19] *** Quits: DavidLuttonM7DAL (~davidlmat@2001:470:69fc:105::e9dc) (Quit: You have been kicked for being idle)
[19:30:19] *** Quits: kieranlevin[m] (~kieranlev@2001:470:69fc:105::eae8) (Quit: You have been kicked for being idle)
[19:34:06] <BarryDuggan[m]> n1ai: you also can do a search if you remember some words or a name
[19:38:17] *** Joins: vishwin (~brioux@2001:470:1f07:302::1)
[19:41:53] <DaveCherkusN1AI[> For those following along at home, it's a "note block" whose Advanced -> Comment field has line art in it...
[19:41:56] * DaveCherkusN1AI[ uploaded an image: (43KiB) < https://libera.ems.host/_matrix/media/r0/download/gnuradio.org/a1ae54dc5560b0b556cbaded4d0e5a589f63eb27/image.png >
[19:45:10] *** Quits: BrianG61UK (~BrianG61U@2a02:8010:66b7:dddd:d55b:2c16:96aa:6ea3) (Quit: Leaving)
[19:46:39] <BarryDuggan[m]> This:
[19:46:57] * BarryDuggan[m] uploaded an image: (11KiB) < https://libera.ems.host/_matrix/media/r0/download/gnuradio.org/1c3d5bd42230d88d932415c0b54360d1cd950d76/Screenshot%20from%202022-03-03%2010-14-28.png >
[19:47:09] <BarryDuggan[m]> from this:
[19:47:26] * BarryDuggan[m] uploaded an image: (27KiB) < https://libera.ems.host/_matrix/media/r0/download/gnuradio.org/66f987f397f873e1fdffbd4667007527a3730c73/Screenshot%20from%202022-03-03%2010-15-09.png >
[20:03:38] <funkylab[m]> Could someone make a feature request issue out of this? I think especially for potential future work on qt-grc it would be very nice to have "we'd like to be able to draw boxes in the background" explicitly written somewhere. And while I think ASCII art is neat, this feels like complex enough that it can't be done in half an hour of coding, yet not impossible to implement; thus, tracking it somewhere is necessary.
[20:09:29] <DaveCherkusN1AI[> Perhaps this? https://github.com/gnuradio/gnuradio/issues/5564
[20:11:33] <DaveCherkusN1AI[> Actually, no, that's a different idea.
[20:12:12] *** Quits: MajorBiscuit (~MajorBisc@2a02:a461:129d:1:193d:75d8:745d:e91e) (Ping timeout: 240 seconds)
[20:14:16] *** Joins: MajorBiscuit (~MajorBisc@c-001-015-039.client.tudelft.eduvpn.nl)
[20:22:29] *** Joins: BrianG61UK (~BrianG61U@2a02:8010:66b7:dddd:d93e:7654:d424:ba76)
[20:23:42] *** Quits: BrianG61UK (~BrianG61U@2a02:8010:66b7:dddd:d93e:7654:d424:ba76) (Read error: Connection reset by peer)
[20:24:43] <BarryDuggan[m]> issue 5564 is my idea. drawing boxes would be a great supplement 
[20:25:33] <DaveCherkusN1AI[> https://github.com/gnuradio/gnuradio/issues/5616
[20:25:33] *** Joins: jemius (~imperator@200116b82d412100fd0d21dda4388e79.dip.versatel-1u1.de)
[20:28:04] <LordKalma> "In this book we won’t be working with differential equations or partial differential equations. However, we will, now and then, work with partially difficult equations."
[20:28:12] <LordKalma> gotta love when authors have a sense of humor
[20:28:12] <muaddib[m]> This is exciting
[20:30:03] <LordKalma> even labview is sometimes terrible at being easy/sane to mark code regions
[20:30:19] <LordKalma> (which is the software I think of the most like grc's UI)
[20:30:38] <muaddib[m]> I agree with the feature/issue for graphics. not only does this help with education/presentation but distributability as well. Passing around flowgraphs is one of the best parts about the community and actually understanding the flowgraph makes it even better, lol.
[20:31:50] *** Quits: Peanut (~paul@user/peanut) (Quit: Power Outage)
[20:33:59] <DaveCherkusN1AI[> Too bad github issues don't have a 'thumbs up' / 'thumbs down' feature!  
[20:34:08] <DaveCherkusN1AI[> I suppose you could drop in a comment saying you support the concept.
[20:35:14] <LordKalma> you can "react" to the original post
[20:35:18] <LordKalma> that's how everybody does it
[20:35:18] <DaveCherkusN1AI[> I did say it could lead to feature creep.  Imagine "skinnable" GRC, GRC merged with Notepad+, CSS style sheets, the mind boggles!
[20:35:48] <LordKalma> DaveCherkusN1AI[, like this: https://i.gyazo.com/e108941d470f5d7da74bf81a6896744f.png
[20:37:44] <DaveCherkusN1AI[> Nice!  I guess it's smart they don't have the :poop: emoji listed there!
[20:39:19] <muaddib[m]> QT GUI has css style sheets
[20:39:27] <muaddib[m]> In grc
[20:39:30] <JDemel[m]> 💩 well. it's called hankey
[20:40:14] <LordKalma> Qt is trivial to change style, you just have to expose it
[20:40:40] <muaddib[m]> It is exposed. I think it’s under tools in GRC
[20:40:44] <LordKalma> that said, the other day I learned stylesheets weren't supposed to be a full theme mechanism, from qt devs directly
[20:41:29] <DaveCherkusN1AI[> Now we need GRCon awards for "coolest GRC skin by a presenter"!
[20:42:10] <LordKalma> qt stylesheets are a pain to write, and without full QStyle objects even harder... so don't expect much
[20:42:11] <muaddib[m]> Just to be clear, I’m talking about the QT GUI applications, not the GRC application itself.
[20:42:16] *** Quits: massi (~massi@host-188-15-128-106.business.telecomitalia.it) (Remote host closed the connection)
[20:42:18] <LordKalma> GRC isn't Qt, right?
[20:42:45] <muaddib[m]> Right
[20:43:26] <muaddib[m]> So the style sheet is for the widgets
[20:43:27] <DaveCherkusN1AI[> What "framework" does GRC use?
[20:43:48] <muaddib[m]> GNURadio companion is a Python script
[20:44:36] <DaveCherkusN1AI[> Guess I need to read its imports.
[20:45:33] <LordKalma> python scripts don't have GUIs
[20:46:26] <DaveCherkusN1AI[> Uses gnome GTK.
[20:47:26] <muaddib[m]> I’m not really qualified to say what does or doesn’t satisfy the definition of a python script.
[20:47:53] <muaddib[m]> Nor do I really care. :)
[20:47:57] <muaddib[m]> Too much work to
[20:48:09] <DaveCherkusN1AI[> My thought is Python is the implementation language and Gnome GTK is the framework it uses.
[20:48:31] <LordKalma> I meant the python std library doesn't provide any gui
[20:48:37] <LordKalma> unless you're counting turtle
[20:49:26] <muaddib[m]> It also doesn’t provide any GNURadio
[20:49:44] <LordKalma> your point»
[20:49:47] <LordKalma> *?
[20:51:40] <muaddib[m]> I didn’t say that it was a pure python application. But I see what you’re saying. Again, I’m not really qualified to speak on the definitions of coding terminology
[20:52:34] <LordKalma> my point was that "it's a python script" isn't a great answer when someone asks what is the gui script. just that
[20:52:46] <LordKalma> *gui framework
[20:52:57] <muaddib[m]> Oh
[20:53:02] <muaddib[m]> Sorry, I see
[20:54:21] <muaddib[m]> At the end of the day all I know is I have an antenna, a filter, an amplifier, an SDR, a computer and some software. 
[20:54:21] <muaddib[m]> I use a highly scientific interative process of hitting each one with a hammer until the system does what i want.
[20:55:03] <DaveCherkusN1AI[> Sorry if I started us down (another?) rat hole, but it did give me a reason to load the gnuradio-companion script into ipython3 to see where it imported things from.  
[20:55:05] <LordKalma> excessive use of that methodology risks you ending up with no antenna, no filter, no amplifier, no SDR, and no computer
[20:55:29] *** Joins: BrianG61UK (~BrianG61U@2a02:8010:66b7:dddd:40ed:b38:9078:7a7)
[21:08:16] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[21:20:33] <DaveCherkusN1AI[> Another annoying newbie question: The tutorial https://wiki.gnuradio.org/index.php?title=Sample_Rate_Change uses interpolation_rate as if it is a rate i.e. something per unit time, but is that really so?  Wouldn't it be better to say interpolation_factor rather than interpolation_rate? Maybe I'm being nit-picky? is this another thing that is a convention derived from real-world interpolators?
[21:27:14] <willcode4[m]> "factor" would be more correct.
[21:40:42] <muaddib[m]> LordKalma: shape and striking-speed put 2 more dimensions in the testing matrix
[21:47:15] *** Joins: Tangent-Man (~Tang3nt-M@cpc145602-basl14-2-0-cust33.20-1.cable.virginm.net)
[21:51:17] *** Quits: MajorBiscuit (~MajorBisc@c-001-015-039.client.tudelft.eduvpn.nl) (Ping timeout: 240 seconds)
[21:53:43] *** Quits: uros (~Thunderbi@2001:8a0:6074:ad00:6c2c:7cd7:8834:d044) (Ping timeout: 256 seconds)
[21:54:40] *** Joins: uros (~Thunderbi@2001:8a0:6074:ad00:5f4a:3e:1cd:4cfc)
[21:56:45] *** Quits: Tangent-Man (~Tang3nt-M@cpc145602-basl14-2-0-cust33.20-1.cable.virginm.net) (Read error: Connection reset by peer)
[21:57:18] *** Joins: Tangent-Man (~Tang3nt-M@cpc145602-basl14-2-0-cust33.20-1.cable.virginm.net)
[21:58:08] <patchvonbraun[m]> Now with a A feed in place:  https://photos.app.goo.gl/hJ99Fnu6eoLDiwUp6
[22:15:33] <LordKalma> muaddib[m] ah?
[22:16:19] <LordKalma> patchvonbraun[m] it's just that or will you make the rest of the revolution parabola?
[22:16:26] <muaddib[m]> patchvonbraun: that’s so cool. When do you get the other three?
[22:17:06] <patchvonbraun[m]> LordKalma: Just that--designed for a highly-elongated beam in one plane.
[22:17:11] <patchvonbraun[m]> muaddib: The materials for the other three I have.  Just need to plod along building them.
[22:19:46] *** Joins: ve7it (~LawrenceG@S0106f0f249afdb93.pk.shawcable.net)
[22:26:03] <patchvonbraun[m]> The basic idea is that this is for a 4-element aperture-synthesis imaging experiment.  We should be able to get several hours of fringes from these because the beam is so wide in the RA direction.
[22:26:48] <patchvonbraun[m]> This allows us to do this without active tracking on the antennas.  The declination beamwidth is about 20deg.
[22:27:06] <patchvonbraun[m]> Only really works for bright sources, but a fun experiment anyway.
[22:41:58] <LordKalma> how will you mount the array?
[22:43:01] <patchvonbraun[m]> LordKalma: Haven't quite decided yet.  Probably we'll set up a linear "track" made from preserved lumber about 40m long, and in a strict E-W direction. Have various mounting points along that track.
[22:45:29] <LordKalma> interesting
[22:47:31] *** Quits: Elzington (~Elzington@68.235.43.22) (Ping timeout: 256 seconds)
[22:47:39] <patchvonbraun[m]> The west antenna will have a fixed, and accurately-surveyed position, and the others will move around relative to it along the track.  A new configuration every couple of days. For about a week or two will allow us to image sources with roughly the same resoution as a 40m dish, but with obviously lower sensitivity.
[22:49:19] *** Joins: Elzington (~Elzington@87.249.134.31)
[23:01:38] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[23:24:15] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[23:25:57] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[23:26:40] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Client Quit)
[23:28:26] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[23:50:13] <DaveCherkusN1AI[> <willcode4[m]> ""factor" would be more correct." <- One of my college profs would be very pleased by this, she was a stickler for paying attention to such things!
[23:52:40] <DaveCherkusN1AI[> Barry Duggan: I don't know if it's helpful to point this out or not, but I found I could derive the eye diagram sink's parameters from numbers already in the flowgraph.  Here's a summation using Python:
[23:52:46] * DaveCherkusN1AI[ uploaded an image: (72KiB) < https://libera.ems.host/_matrix/media/r0/download/gnuradio.org/dbf93b469e4d58dd08026a958d069a39120537b1/image.png >
[23:54:03] <DaveCherkusN1AI[> I don't know if it's better for "learners" to see the formulas or not.  
[23:54:03] <DaveCherkusN1AI[> I know it helped me a lot to go through the process of getting the formulas!
[23:54:03] <DaveCherkusN1AI[> It helped me clarify my understanding of the eye diagram.
[23:56:56] <DaveCherkusN1AI[> Made me wonder if there was any advantage to doing the decimation before the quadrature demodulation as in RTTY_receive.grc versus doing the demodulation at the full rate as in FSK_example_revised.grc 
[23:59:33] <DaveCherkusN1AI[> <BarryDuggan[m]> "the eye sink only works with..." <- Yes, this is what the documentation says:
[23:59:40] * DaveCherkusN1AI[ uploaded an image: (39KiB) < https://libera.ems.host/_matrix/media/r0/download/gnuradio.org/52c85551d4a4519e15030eac0507c4eb02197e2b/image.png >
