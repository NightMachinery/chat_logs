[00:00:59] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[00:16:16] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[00:25:12] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[00:27:58] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[00:30:44] *** Quits: shka (~herr@83.175.151.96.piasta.pl) (Ping timeout: 245 seconds)
[00:34:26] *** Quits: zazzerino (~user@2600:1700:6004:8470::49) (Remote host closed the connection)
[00:52:57] *** Quits: travv0 (sid293381@user/travv0) (Ping timeout: 250 seconds)
[00:53:49] *** Quits: sgithens (sid10659@id-10659.helmsley.irccloud.com) (Ping timeout: 250 seconds)
[00:54:05] *** Quits: conjunctive (sid433686@id-433686.helmsley.irccloud.com) (Ping timeout: 260 seconds)
[00:54:37] *** Joins: pedro-delfino_ (sid507296@helmsley.irccloud.com)
[00:54:46] *** Quits: pedro-delfino (sid507296@id-507296.helmsley.irccloud.com) (Ping timeout: 260 seconds)
[00:54:46] *** pedro-delfino_ is now known as pedro-delfino
[00:57:41] *** Joins: conjunctive (sid433686@helmsley.irccloud.com)
[01:08:08] *** Joins: travv0 (sid293381@user/travv0)
[01:09:00] *** Joins: sgithens (sid10659@id-10659.helmsley.irccloud.com)
[01:12:38] *** Joins: dra (~dra@2a04:4540:6401:bd00:3877:c19a:a252:523a)
[01:13:17] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[01:14:27] <copec> Does the rest parameter cons a new list?
[01:14:55] <copec> the &rest parameter in an ordinary lambda list
[01:15:12] <copec> There aren't recycled cons from it, right?
[01:16:57] <copec> It isn't a list embedded in the source, and it can be lengths up to CALL-ARGUMENTS-LIMIT, so I'm 95% sure the answer is yes
[01:25:18] <pjb> copec: not necessarily.
[01:26:08] <pjb> copec: (defun foo (a b &rest list) â€¦)   (let ((a 1) (b 2) (list (list 3 4 5))) (apply #'foo a b list)) won't cons a new list. (perhaps, implementation dependent).
[01:26:38] <pjb> copec: it can be a l ist embedded in the source: (apply #'foo 1 2 '(3 4 5))
[01:38:21] <copec> I guess I meant in the definition of it: (defun foo (arg1 arg2 &rest argns) (list* arg1 arg2 argns))
[01:39:06] <copec> Will that (outer) list returned share structure with any other lists?
[01:42:37] *** Joins: beach` (~user@2a01:cb19:150:3400:c969:654c:71df:64a7)
[01:47:02] *** Quits: beach (~user@2a01:cb19:150:3400:34da:254c:9f5b:12b2) (Ping timeout: 260 seconds)
[01:47:21] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[01:49:15] *** Joins: selwyn (~selwyn@user/selwyn)
[01:53:24] <copec> pjb, so instead of destructing that list and making a new one for the &rest list, it will just pass it directly as the &rest list
[01:53:32] <copec> Is that what some implementations would do?
[01:55:49] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[02:12:56] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Quit: ERC (IRC client for Emacs 27.2))
[02:21:18] <pjb> copec: apparently, not the common implementations clall -r '(defun foo (list &rest args) (eq list args))' '(let ((list (list 1 2 3))) (apply (function foo) list list))' # they all return nil
[02:35:10] <White_Flame> copec: I know SBCL got some optimizations for iterating &rest lists without manifesting cons cells a few years back.  I'm not sure how common such optimizations are
[02:35:31] <White_Flame> it all depends on what you try to do with it
[02:37:03] <White_Flame> I would guess that LENGTH, CAR/ELT/NTH, and passing &rest lists to APPLY would probably be the first optimizations done, in that order
[02:37:54] <White_Flame> beyond that, iteration and DESTRUCTURING-BIND
[02:38:34] <White_Flame> if you return a new list that tail-shares the &rest list, then yes it will have to manifest the cons cells
[02:40:24] <White_Flame> an interest statement from CLHS: "The value of a rest parameter is permitted, but not required, to share structure with the last argument to apply."
[02:40:53] <White_Flame> but other than that, I wouldn't see why a newly manifested &rest list would ever share structure with any other list
[02:48:52] <copec> That's a good TIL
[02:55:33] *** Quits: dra (~dra@2a04:4540:6401:bd00:3877:c19a:a252:523a) (Remote host closed the connection)
[03:11:46] *** Quits: random-nick (~random-ni@87.116.183.117) (Ping timeout: 245 seconds)
[03:19:24] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[03:23:12] *** Joins: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[03:26:17] *** Quits: CrashTestDummy (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 265 seconds)
[03:46:54] *** Quits: Psybur (~Psybur@mobile-166-170-32-197.mycingular.net) (Remote host closed the connection)
[03:47:13] *** Joins: Psybur (~Psybur@mobile-166-170-32-197.mycingular.net)
[04:34:56] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[04:38:39] *** Quits: sts-q (~sts-q@212.53.219.137) (Ping timeout: 265 seconds)
[04:47:37] *** Joins: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[04:50:34] *** Quits: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 252 seconds)
[04:53:32] *** Joins: CptKirk (~CptKirk@70-57-27-195.hlrn.qwest.net)
[05:19:38] *** Joins: sts-q (~sts-q@212.53.219.204)
[05:30:14] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[05:55:59] *** Quits: Psybur (~Psybur@mobile-166-170-32-197.mycingular.net) (Remote host closed the connection)
[06:02:19] *** Joins: abrantesasf (~abrantesa@187.36.170.211)
[06:05:58] *** Quits: sts-q (~sts-q@212.53.219.204) (Ping timeout: 252 seconds)
[06:06:52] *** Joins: _abrantesasf_ (~abrantesa@187.36.170.211)
[06:07:14] *** Quits: abrantesasf (~abrantesa@187.36.170.211) (Ping timeout: 265 seconds)
[06:12:05] *** Quits: _abrantesasf_ (~abrantesa@187.36.170.211) (Remote host closed the connection)
[06:15:00] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[06:20:23] *** Joins: sts-q (~sts-q@212.53.219.151)
[06:26:01] *** beach` is now known as beach
[06:26:08] *** ChanServ sets mode: +o beach
[06:27:06] *** beach sets mode: -o beach
[06:34:18] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 265 seconds)
[08:47:59] *** Joins: dre (~dre@2001:8003:c932:c301:b1a7:f172:e0ac:f5a0)
[09:54:10] *** Quits: CptKirk (~CptKirk@70-57-27-195.hlrn.qwest.net) (Ping timeout: 256 seconds)
[10:07:17] *** Joins: shka (~herr@83.175.151.96.piasta.pl)
[10:34:35] *** Joins: Cymew (~ante@c-e989225c.023-1144-7570702.bbcust.telenor.se)
[10:47:24] *** Quits: makomo (~makomo@user/makomo) (Ping timeout: 245 seconds)
[10:47:54] *** Joins: cranium (~cranium@user/cranium)
[10:55:34] *** Joins: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[10:58:34] *** Quits: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 252 seconds)
[11:07:34] *** Joins: selwyn (~selwyn@user/selwyn)
[11:15:31] *** Joins: makomo_ (~makomo@user/makomo)
[11:38:26] *** Joins: hendursa1 (~weechat@user/hendursaga)
[11:41:12] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 276 seconds)
[11:51:54] *** Joins: selwyn_ (~selwyn@user/selwyn)
[11:54:04] *** Quits: selwyn (~selwyn@user/selwyn) (Ping timeout: 245 seconds)
[12:05:22] *** Joins: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[12:08:38] *** Quits: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 265 seconds)
[12:57:11] *** Joins: st_iron (uid370243@id-370243.uxbridge.irccloud.com)
[13:32:32] *** Joins: random-nick (~random-ni@87.116.183.117)
[13:43:00] *** Joins: lisp123 (~lisp123@5.30.23.247)
[13:43:55] *** Quits: makomo_ (~makomo@user/makomo) (Ping timeout: 268 seconds)
[14:01:45] *** Quits: selwyn_ (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[14:02:02] <lisp123> I'm trying to think of a better name for this https://pastebin.com/JZekha7X function, any ideas?
[14:02:39] <lisp123> (and if there is another way you would write it --> I felt it had few enough cases, that being explicit helped with readability)
[14:05:09] <mfiano> (if a (cons a b) b)
[14:06:54] <lisp123> mfiano: For example if a = 3 , b = 4, the above will give (3 . 4), whereas I am after (3 4)
[14:08:21] <lisp123> Hence I include the word "proper" in the function name. Only issue is that (custom-proper-cons nil nil) returns nil vs. (nil) or (nil nil) & likewise for (custom-proper-cons nil 3)
[14:08:32] <lisp123> Can't think of a name to capture that behaviour
[14:11:02] <mfiano> (if a (cons a (if (atom b) (cons b nil) b)))
[14:13:14] <lisp123> Hmmm
[14:13:55] <lisp123> I guess its too custom, so I should just keep the name custom-proper-cons
[14:14:26] <mfiano> There is no such thing as a proper cons
[14:14:52] <lisp123> If you can think of a better name, I'm all ears
[14:14:57] <lisp123> Can't think of any good name
[14:15:16] <lisp123> Its not cons, its not append and its not list :( Its like a mish-mash
[14:15:30] <mfiano> It is cons
[14:15:48] <lisp123> It doesn't return a dotted list
[14:15:55] <mfiano> It's just cons-non-nil-to-cons
[14:16:30] <lisp123> But a = nil, b = 3 returns (3) not nil
[14:16:38] <edgar-rft> mish-mash is a perfect name for that function :-)
[14:17:00] <mfiano> Right, you're consing non-nil to a cons
[14:17:04] <mfiano> a is nil so isn't consed
[14:17:06] <lisp123> edgar-rft: indeed...perhaps convoluted-mish-mash...
[14:17:08] <mfiano> hence non-nil
[14:17:15] <lisp123> But my function returns (3)
[14:17:25] <mfiano> Exactly what i said
[14:17:29] <edgar-rft> customly-convoluted-mish-mash
[14:19:14] <mfiano> Does a=1, b=nil give (1) or (1 nil) ?
[14:19:19] <mfiano> or what do you want?
[14:19:24] <lisp123> (1)
[14:19:32] <edgar-rft> lisp123: what shall happen if one or both of the arguments are lists, shall the result be a nested list or should the result *always* be a plain list?
[14:20:24] <mfiano> and what about a=(1 2), b=3
[14:20:39] <lisp123> edgar-rft: If both are lists, then should give ((a) b)
[14:21:03] <lisp123> ((1 2) 3)
[14:21:11] <mfiano> Ok so the behavior you want can be encoded as:
[14:21:19] <mfiano> (alexandria:ensure-list (if a (list* a (alexandria:ensure-list b)) b))
[14:21:30] <mfiano> rather than that crappy combinatoric explosion
[14:21:52] <mfiano> well list* can be cons
[14:22:29] <lisp123> mfiano: I would mostly agree, but I think when there are very few cases, it is useful to have it as combinatoric explosion since its self documenting
[14:22:47] <lisp123> Esp in such a confusing function as this
[14:22:54] <mfiano> Mine is much more self-documentation
[14:23:09] <mfiano> It reads as english on a single line and is clear to understand
[14:23:56] <edgar-rft> what about (remove nil (list a b))?
[14:23:57] <mfiano> Also yours is flawed
[14:26:00] <lisp123> edgar-rft: oooo very nice..very close, but doesn't work for '(1 2 3) '(1 2 3) -> I want ((1 2 3) 1 2 3) vs. ((1 2 3) (1 2 3))
[14:26:51] <lisp123> mfiano: In what sense?
[14:28:47] <mfiano> Nevermind
[14:28:57] <mfiano> (remove nil (cons a (alexandria:ensure-list b)))
[14:29:13] <lisp123> I think !!convoluted-proper-cons!! might be the best name
[14:29:32] <lisp123> mfiano: I thought that could work, but I think it will remove all nils from the resultant list :(
[14:30:16] <lisp123> Actually no it doesn't
[14:31:27] <lisp123> mfiano: that seems to work!
[14:31:52] <mfiano> no it doesn't
[14:32:40] <edgar-rft> lisp123: does the second argument only need special treatment if it's a list, or what shall happen if the second argument is another sequence like a vector or a string?
[14:32:42] <lisp123> yes you are right
[14:32:57] <lisp123> falls over on a = '(1 2 3) b = nil
[14:33:12] <lisp123> edgar-rft: For now I am only considering lists
[14:33:18] <mfiano> you want (if a (cons a (u:ensure-list b)) b) i think
[14:33:31] <mfiano> where u = alexandria in my image :)
[14:34:29] <edgar-rft> lisp123: (remove nil (if (consp b) (cons a b) (list a b)))
[14:35:18] <mfiano> https://gist.github.com/mfiano/457156577623af44014f6f2c2d29a134
[14:35:20] <lisp123> nope, neither of the two work
[14:35:29] <lisp123> (a = '(1 2 3) b = nil)
[14:36:18] <lisp123> mfiano: Line 14 should be (1 2)
[14:36:23] <mfiano> You keep changing the specification!
[14:36:28] <lisp123> I don't...
[14:36:40] <lisp123> I gave the function at the start....was after the right name!
[14:37:02] <mfiano> Your docstring is wrong then
[14:37:48] <lisp123> Yeah its not easy to get the right name / explanation
[14:39:42] <lisp123> I think this discussion shows the value of typecase for small lists of possibilities :) The clearest explanation is in the code, and english doesn't seem to do it justice (nor any other code examples)
[14:51:54] <mfiano> Ok, so I partially agree with you, however, there doesn't need to be nested branches here
[14:54:32] <lisp123> Yes, I agree with you on that. I was thinking of using a cond with each combination, probably would be easier to read than having to go down the branches
[14:54:57] <mfiano> Right
[14:54:59] <mfiano> https://gist.github.com/mfiano/559e49d47310531d272eda4ccc97cdfc
[14:56:54] <lisp123> Seems to work well
[14:57:57] <mfiano> Would be faster to swap first and second branches
[14:58:08] <mfiano> I am tired. I think that's the best I can do right now
[14:58:34] <lisp123> Thanks, enjoy your day
[14:58:37] *** Joins: makomo_ (~makomo@user/makomo)
[14:59:59] <mfiano> I would probably break this up into two functions
[15:00:10] <mfiano> MAYBE-CONS being one
[15:01:08] <mfiano> I dunno. These semantics hurt my head. I can't think of a case this would ever be useful
[15:01:12] <mfiano> Night
[15:01:19] <lisp123> Nights
[15:06:15] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[16:13:21] *** Joins: rotateq (~user@b2b-78-94-235-194.unitymedia.biz)
[16:23:16] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[16:50:06] *** Quits: Arcsech (~arcsechma@2001:470:69fc:105::1:797) (Read error: Connection reset by peer)
[16:50:08] *** Quits: Duuqnd (~duuqnd@2001:470:69fc:105::e9c0) (Read error: Connection reset by peer)
[16:50:10] *** Quits: Gnuxie (~gnuxie@user/gnuxie) (Write error: Connection reset by peer)
[16:50:12] *** Quits: CodeBitCookie[m] (~code-bit-@2001:470:69fc:105::a2f) (Remote host closed the connection)
[16:52:48] *** Joins: Duuqnd (~duuqnd@2001:470:69fc:105::e9c0)
[16:58:38] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 246 seconds)
[17:11:18] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[17:12:34] *** Joins: Gnuxie (~gnuxie@user/gnuxie)
[17:12:34] *** Joins: Arcsech (~arcsechma@2001:470:69fc:105::1:797)
[17:12:34] *** Joins: CodeBitCookie[m] (~code-bit-@2001:470:69fc:105::a2f)
[17:17:41] *** Joins: rain3 (~rain3___@2a02:2f09:d003:5800:b41c:c37:1705:91bc)
[17:26:24] *** Quits: rotateq (~user@b2b-78-94-235-194.unitymedia.biz) (Remote host closed the connection)
[17:39:05] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Quit: WeeChat 3.3)
[17:40:29] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[17:41:38] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Quit: ERC (IRC client for Emacs 27.2))
[17:47:56] *** Joins: selwyn (~selwyn@user/selwyn)
[17:48:10] *** Quits: selwyn (~selwyn@user/selwyn) (Remote host closed the connection)
[17:48:35] *** Joins: selwyn (~selwyn@user/selwyn)
[17:52:49] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[17:56:51] *** Joins: tyson2 (~user@cpe688f2ec1f9b3-cm688f2ec1f9b0.cpe.net.cable.rogers.com)
[18:07:24] *** Quits: makomo_ (~makomo@user/makomo) (Ping timeout: 245 seconds)
[18:35:10] *** Joins: thrig (~thrig@65.113.153.50)
[18:43:30] *** Joins: CptKirk (~CptKirk@70-57-27-195.hlrn.qwest.net)
[18:50:31] *** Joins: makomo (~makomo@user/makomo)
[18:51:40] *** Joins: makomo_ (~makomo@user/makomo)
[19:22:18] *** Quits: lisp123 (~lisp123@5.30.23.247) (Quit: Leaving...)
[19:30:19] *** Quits: Cymew (~ante@c-e989225c.023-1144-7570702.bbcust.telenor.se) (Ping timeout: 245 seconds)
[19:31:10] *** Joins: Psybur (~Psybur@mobile-166-170-32-197.mycingular.net)
[19:37:38] *** Quits: cranium (~cranium@user/cranium) (Quit: Leaving)
[19:49:58] *** Quits: tyson2 (~user@cpe688f2ec1f9b3-cm688f2ec1f9b0.cpe.net.cable.rogers.com) (Quit: ERC (IRC client for Emacs 27.2))
[20:19:14] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[21:05:31] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 245 seconds)
[21:07:39] *** Joins: waleee (~waleee@h-98-128-228-119.NA.cust.bahnhof.se)
[21:07:59] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[21:12:17] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Quit: ERC (IRC client for Emacs 27.2))
[21:19:55] *** Joins: lisp123 (~lisp123@5.30.23.247)
[21:38:28] *** Quits: thrig (~thrig@65.113.153.50) (Remote host closed the connection)
[21:45:39] *** Joins: tyson2 (~user@bras-base-toroon0628w-grc-46-142-112-141-177.dsl.bell.ca)
[22:11:55] *** Joins: selwyn (~selwyn@user/selwyn)
[22:20:25] *** Joins: selwyn_ (~selwyn@user/selwyn)
[22:23:49] *** Quits: selwyn (~selwyn@user/selwyn) (Ping timeout: 252 seconds)
[22:29:40] *** Quits: rain3 (~rain3___@2a02:2f09:d003:5800:b41c:c37:1705:91bc) (Read error: Connection reset by peer)
[22:29:52] *** Joins: rain3 (~rain3___@2a02:2f09:d003:5800:b41c:c37:1705:91bc)
[22:34:54] *** Quits: rain3 (~rain3___@2a02:2f09:d003:5800:b41c:c37:1705:91bc) (Ping timeout: 260 seconds)
[22:45:23] *** Quits: tyson2 (~user@bras-base-toroon0628w-grc-46-142-112-141-177.dsl.bell.ca) (Quit: ERC (IRC client for Emacs 27.2))
[22:49:45] *** Joins: tyson2 (~user@bras-base-toroon0628w-grc-46-142-112-141-177.dsl.bell.ca)
[23:32:11] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
