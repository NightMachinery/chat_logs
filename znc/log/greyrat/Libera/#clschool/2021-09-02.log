[00:17:30] *** Quits: ec_ (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[00:28:00] *** Joins: ec_ (~ec@gateway/tor-sasl/ec)
[00:33:52] *** Quits: silasfox (~sbv@xdsl-85-197-57-82.nc.de) (Ping timeout: 244 seconds)
[00:36:49] *** Quits: shka (~herr@109.231.62.239) (Ping timeout: 252 seconds)
[00:56:10] *** Joins: silasfox (~sbv@2001-4dd6-4b95-0-383d-e94d-aa82-1e8f.ipv6dyn.netcologne.de)
[01:01:37] *** Quits: jeffrey (~jeffrey@80-115-60-193.cable.dynamic.v4.ziggo.nl) (Ping timeout: 252 seconds)
[01:01:42] *** Quits: ec_ (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[01:05:27] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[01:11:56] *** Joins: ec_ (~ec@gateway/tor-sasl/ec)
[01:30:47] <anddam> while at sbcl REPL can I recall previous entries, like using readline?
[01:30:51] <anddam> I am using Sly
[01:31:07] <anddam> up arrow moves the actual cursor position up
[01:32:03] <edgar-rft> try ctrl + up-arrow
[01:32:25] <edgar-rft> that works at leat in slime
[01:33:28] *** Joins: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[01:35:47] <edgar-rft> if that doesn't help try C-h b (Ctrl+H, then B) - an Emacs window should pop up showing you all the current keybindings
[01:36:49] *** Quits: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 252 seconds)
[01:39:35] <anddam> I am using doom emacs
[01:39:44] <anddam> but I can browse keybindings, thx
[01:45:00] <White_Flame> M-p, M-n is also another slime keybinding, for previous & next
[01:45:18] <White_Flame> or you could cursor back to another line, hit enter on it, and it copies it to the new prompt
[01:45:29] <White_Flame> (ymmv with sly)
[01:47:12] *** Quits: ec_ (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[01:52:05] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[01:52:15] *** Joins: ec_ (~ec@gateway/tor-sasl/ec)
[02:03:59] <pjb> anddam: you cannot with bare sbcl.  But nothing prevents you to use emacs (and either inferior-lisp or slime (or the older ilisp) to run sbcl), or to use rlwrap if you run in a terminal.
[02:06:11] <pjb> anddam: clisp includes readline, so you don't need rlwrap when using clisp in a terminal.
[02:06:12] <pjb> sly is like slime.
[02:20:46] <edgar-rft> obviously anddam is talking about the sly repl buffer, when running sbcl in a terminal without rlwrap up-arrow only produces funny characters
[02:21:31] *** Quits: minion (~minion@common-lisp.net) (Remote host closed the connection)
[02:23:42] *** Joins: minion (~minion@common-lisp.net)
[02:32:42] *** Quits: ec_ (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[02:37:46] *** Joins: ec_ (~ec@gateway/tor-sasl/ec)
[02:46:16] <anddam> edgar-rft is right
[02:51:18] *** Joins: Oladon (~olad@98.43.81.226)
[03:03:15] *** Quits: ec_ (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[03:38:59] *** Joins: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[03:42:13] *** Quits: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 252 seconds)
[03:47:12] <derelict> anddam: you can also type #v in the REPL buffer with SLY and it lets retreive the values of previously evaluated expressions
[04:04:06] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[04:28:25] *** Quits: random-nick (~random-ni@87.116.165.220) (Ping timeout: 252 seconds)
[04:42:48] *** Joins: speskk (~user@ool-44c57707.dyn.optonline.net)
[04:42:56] <speskk> Hey folks
[04:44:05] <speskk> I have a structure made via `defstruct`. I'd like to create an instance of that structure and then iterate over it's fields. Is this possible and if so what is the idiomatic way to do this in CL?
[04:56:37] *** Quits: speskk (~user@ool-44c57707.dyn.optonline.net) (Remote host closed the connection)
[05:22:44] <pjb> yes, it's possible. With more patience, speskk would know: (defstruct point x y) (loop with p = (make-point :x 1 :y 2)  for a in '(point-x point-y) collect (funcall a p)) #| --> (1 2) |# 
[05:42:53] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[06:15:10] *** Quits: waleee (~waleee@h-98-128-228-119.NA.cust.bahnhof.se) (Ping timeout: 240 seconds)
[07:00:10] *** Quits: silasfox (~sbv@2001-4dd6-4b95-0-383d-e94d-aa82-1e8f.ipv6dyn.netcologne.de) (Ping timeout: 240 seconds)
[07:00:28] *** Joins: silasfox (~sbv@xdsl-85-197-57-82.nc.de)
[07:19:28] *** Quits: sts-q (~sts-q@212.53.219.134) (Ping timeout: 252 seconds)
[07:27:33] *** Joins: sts-q (~sts-q@91.200.108.181)
[07:47:59] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[07:55:20] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 256 seconds)
[07:57:11] *** Joins: aeth (~aeth@user/aeth)
[08:56:03] *** Joins: Oladon (~olad@98.43.81.226)
[09:14:21] <lotuseater> maybe it was meant in another way like (loop with obj = (make-obj ...) for i being the slot-values of obj collect i)
[09:15:02] <lotuseater> but I don't know if the normal loop offers that too
[09:16:01] <lotuseater> so in an extensible one or with iterate closer-mop offers capabilities, but I just know that this would be for classes, not structs
[09:17:43] <lotuseater> oh I see now this question was 4h ago ^^
[09:23:29] *** Joins: st_iron (uid370243@id-370243.highgate.irccloud.com)
[09:29:05] <beach> Well, if you want a data structure that allows you to loop over every object it contains, you should not choose a struct. 
[09:29:21] <st_iron> good morning
[09:29:30] <beach> Hello st_iron.
[09:42:27] *** Joins: silasfox36 (~silasfox@xdsl-85-197-57-82.nc.de)
[09:42:34] *** Quits: silasfox36 (~silasfox@xdsl-85-197-57-82.nc.de) (Client Quit)
[10:05:20] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[10:29:02] *** Joins: shka (~herr@109.231.62.239)
[11:35:08] *** Joins: rain3 (~rain3___@2a02:2f09:d30b:1300:514:bcc7:8202:1798)
[12:32:27] *** Joins: lisp123 (~lisp123@5.30.23.247)
[12:34:56] *** Joins: hendursa1 (~weechat@user/hendursaga)
[12:37:51] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 276 seconds)
[14:23:00] *** Quits: lisp123 (~lisp123@5.30.23.247) (Quit: Leaving...)
[15:11:36] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[15:33:44] *** Quits: rain3 (~rain3___@2a02:2f09:d30b:1300:514:bcc7:8202:1798) (Read error: Connection reset by peer)
[15:33:58] *** Joins: rain3 (~rain3___@2a02:2f09:d30b:1300:514:bcc7:8202:1798)
[15:52:24] *** Joins: santiagopim (~user@90.167.66.93)
[16:02:32] *** Joins: random-nick (~random-ni@87.116.183.125)
[16:26:46] <pjb> lotuseater: structure-object instances don't have "slots", they only have "accessors".  But you could make defstruct :type list or vector and loop over the list or vector slots.
[16:36:13] *** Joins: lisp123 (~lisp123@5.30.23.247)
[17:33:43] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Quit: ERC (IRC client for Emacs 27.2))
[17:40:42] *** Quits: makomo (~makomo@user/makomo) (Ping timeout: 256 seconds)
[17:45:42] *** Quits: hendursa1 (~weechat@user/hendursaga) (Quit: hendursa1)
[17:46:18] *** Joins: hendursaga (~weechat@user/hendursaga)
[17:53:40] *** Joins: makomo (~makomo@user/makomo)
[18:06:51] *** Joins: tyson2 (~user@cpe688f2ec1f9b3-cm688f2ec1f9b0.cpe.net.cable.rogers.com)
[18:11:14] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[18:44:42] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 245 seconds)
[18:46:27] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[18:53:17] *** Quits: st_iron (uid370243@id-370243.highgate.irccloud.com) (Quit: Connection closed for inactivity)
[18:54:59] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Quit: WeeChat 3.2)
[19:03:43] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[19:07:24] <lotuseater> pjb: ah okay :)
[19:10:14] <lotuseater> last week (or the weekend before?) i made a simple macro to mimick defstruct but that expands to the "same" with defclass etc. but it doesn't cover all the extra options that you can provide like multiple constructors, shouldn't be the problem to add. and for "parsing" and expanding the declaration fields after the name and options the closure function is recursive to minimize unnecessary repetition
[19:11:03] <lotuseater> or that when it reads ":read-only t" i use SUBLIS to replace the keyword :accessor with :reader
[19:11:33] <lisp123> second one sounds pretty cool
[19:12:00] <lisp123> Could I see it, just to learn how to do it?
[19:12:03] <lotuseater> the first not? ^^
[19:12:15] <lisp123> I'm not smart enough for the first :D
[19:12:31] <lotuseater> yes let me look for it
[19:12:47] <lotuseater> but i should comment it for you before you read
[19:13:01] <lisp123> It's fine, I have to learn to read other people's code
[19:13:15] <lisp123> Apparently that's meant to be a very good exercise to become a better programmer
[19:13:20] <lotuseater> and you can learn by changing and looking at different macroexpands
[19:13:53] <lisp123> I find the macroexpander hard to follow for now
[19:14:08] <lisp123> (actually I avoid Macros mostly, that's a 2022-2023 topic for me)
[19:14:24] <lotuseater> yes because mostly you get impl specific noise by
[19:14:41] <lotuseater> really?
[19:15:03] <lisp123> For now at least
[19:15:21] <lotuseater> but my DEFINE-STRUCT is indeed a macro too
[19:15:34] <lisp123> If I can write 50,000 loc, then its time for macros
[19:15:43] <lotuseater> okay, the biggest part is the closure for building the defclass slots
[19:15:50] <lotuseater> wtf no
[19:15:57] <lotuseater> 50,000 ... way too much
[19:16:12] <lotuseater> macros are for abstractions at all
[19:16:25] <lotuseater> (and if a function is not enough)
[19:16:26] <lisp123> as in 50,000 total lines across all programs
[19:16:31] <lisp123> not a particular program
[19:16:56] <lotuseater> the same for that
[19:17:04] <lisp123> like I use it from time to time, I have started using the while macro and I am going to write a "with" macro (Patent Pending)
[19:17:19] <lisp123> but in general my principle will be to avoid, that's sort of what I'm saying
[19:17:23] <lotuseater> even PUSH and POP or SETF and INCF are macros that you don't want to live without
[19:17:38] <lisp123> yes, but those are all built-in :)
[19:17:51] <lisp123> Also I am happy to use other peoples macros, just not writing my own for now
[19:17:58] <lisp123> (except "with" (Patent Pending)
[19:19:58] *** Quits: silasfox (~sbv@xdsl-85-197-57-82.nc.de) (Ping timeout: 252 seconds)
[19:20:27] <lotuseater> i realize right now i forgot the make-* constructor in the expand, that defstruct makes you also automatically instead of the (make-instance 'class ...)
[19:24:45] <lisp123> Ah cool
[19:28:58] *** Joins: lisp123_ (~lisp123@45.86.202.23)
[19:32:37] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 252 seconds)
[19:38:05] *** Joins: thrig (~thrig@65.113.153.50)
[19:40:56] *** Quits: tyson2 (~user@cpe688f2ec1f9b3-cm688f2ec1f9b0.cpe.net.cable.rogers.com) (Quit: ERC (IRC client for Emacs 27.2))
[19:48:47] *** Quits: Harag (~user@105.243.9.173) (Ping timeout: 245 seconds)
[20:04:25] *** Quits: micro (~micro@user/micro) (Ping timeout: 248 seconds)
[20:05:18] *** Joins: micro (~micro@user/micro)
[20:06:10] *** Quits: lisp123_ (~lisp123@45.86.202.23) (Ping timeout: 240 seconds)
[20:07:29] <lotuseater> hm now I sent the source file and the connection is gone
[21:20:50] <pjb> lotuseater: have a look at com.informatimago.common-lisp.cesarum.utility:define-structure-class
[21:37:29] <lotuseater> yeah okay but it was also just for myself to practice
[22:01:16] *** Joins: Oladon (~olad@98.43.81.226)
[22:07:46] *** Joins: ec_ (~ec@gateway/tor-sasl/ec)
[22:17:25] *** Joins: silasfox (~sbv@p200300cec704065cdb41befe26522709.dip0.t-ipconnect.de)
[22:30:00] *** Quits: thrig (~thrig@65.113.153.50) (Remote host closed the connection)
[22:31:23] *** Joins: ec__ (~ec@gateway/tor-sasl/ec)
[22:32:32] *** Quits: rain3 (~rain3___@2a02:2f09:d30b:1300:514:bcc7:8202:1798) (Ping timeout: 256 seconds)
[22:33:05] <pjb> lotuseater: ok. then read the clhs closely, and do a complete analysis.  Often quite complex stuff is hidden behind a simple macro.
[22:35:51] *** Quits: ec_ (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[22:37:09] *** Quits: ec__ (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[22:53:59] *** Joins: ec__ (~ec@gateway/tor-sasl/ec)
[22:54:58] <lotuseater> yes I try to be aware of that
[22:55:20] <lotuseater> I didn't want to say it's perfect :)
[23:02:55] <lotuseater> so it's also an exercise to make more precise looks into the spec
[23:15:30] *** Quits: ec__ (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[23:20:44] *** Joins: ec__ (~ec@gateway/tor-sasl/ec)
[23:35:39] *** Quits: ec__ (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[23:40:28] *** Joins: ec__ (~ec@gateway/tor-sasl/ec)
[23:40:55] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[23:50:36] *** Quits: ec__ (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[23:55:17] *** Joins: ec__ (~ec@gateway/tor-sasl/ec)
