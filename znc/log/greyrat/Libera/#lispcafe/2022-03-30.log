[00:05:19] *** Quits: minion (~minion@common-lisp.net) (Remote host closed the connection)
[00:06:41] *** Joins: minion (~minion@common-lisp.net)
[00:09:36] *** Quits: treflip (~user@user/treflip) (Quit: Quit)
[00:28:10] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-08-70-29-36-27.dsl.bell.ca)
[00:45:51] *** Joins: lisp123 (~lisp123@143.238.171.43)
[00:51:24] *** Quits: rogersm (~rogersm@90.166.180.250) (Quit: Leaving...)
[01:13:22] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[01:30:02] *** Quits: minion (~minion@common-lisp.net) (Remote host closed the connection)
[01:31:22] *** Joins: minion (~minion@common-lisp.net)
[01:44:53] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 260 seconds)
[01:46:58] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[01:59:48] *** Quits: shka (~herr@109.231.3.55) (Ping timeout: 272 seconds)
[02:06:03] <hayley> https://www.reddit.com/r/programmingcirclejerk/comments/tqtz3d/i_hate_the_c_programming_language_hate_it_its_the/ I almost thought this was DBYOL lol
[02:06:04] -ixelp- "I hate the C programming language... hate it... it's the most moronic programming language there is. You've got to be a [...]
[02:10:12] <rotateq> I would say there are even more moronic things out there. :D
[02:10:32] <hayley> C++?
[02:10:33] <rotateq> or just 'more morone'? I'm not sure.
[02:10:54] <rotateq> hayley: definitely, a nice example for that, the Cthulu of languages
[02:12:14] <rotateq> but ok, maybe I'm just too stupid for it
[02:18:08] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Quit: ERC (IRC client for Emacs 27.1))
[02:18:54] <rotateq> so it's also being afraid wasting very much time at something where I never have the chance to be any good at and that will never 'click' in my brain
[02:19:44] <rotateq> but for C I found a German book which may be good for me, a mathematical introduction to it. not such a kind of beast
[02:20:52] <pjb> mathematics and C don't go together very well…
[02:21:18] *** Joins: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340)
[02:21:21] <rotateq> pjb: I know :D so just that my head won't block it too fast
[02:22:23] <hayley> "Fasten your seat belts, and let's all take a JOURNEY TO OPEN SOURCE!!! 🚀" What the fuck did I just read in my emails
[02:22:41] <hayley> "[snip] from Leidos and [snip] from Google will be giving you a peek 🔭 into the world of open source."
[02:22:47] <rotateq> hayley: and for other things, when every 3 years a new "standard" arises from the ashes, no one has any chance really become fully aware of it
[02:23:05] *** Joins: kevingal (~quassel@2a02:8084:4140:f300:99c6:8d11:6785:3de3)
[02:24:40] <rotateq> or that every Python version is something different, so we have literally a Multiverse of Madness with such things
[02:25:46] <rotateq> hayley: you know, Microsoft also does much open source (or pretend to)
[02:27:04] <rotateq> pjb: can we send a CL terminator to the past?
[02:56:43] *** Quits: Posterdati (~posterdat@user/Posterdati) (Ping timeout: 256 seconds)
[03:05:22] <hayley> SBCL mailing list: "OK, I fixed the exponential compile time behavior, while keeping all the new precision intact. Thanks for the report. How do you find these things?" "... launch slime."
[03:06:06] <rotateq> :D
[03:06:23] <rotateq> and what caused this exponential behavior?
[03:07:23] <hayley> Creating too many type constraints apparently.
[03:07:24] <hayley> https://github.com/sbcl/sbcl/commit/4dfad22204bd6a601b51ab3d2788a33acf607aec
[03:07:25] -ixelp- constraint: Make type constraint joining much faster. · sbcl/sbcl@4dfad22 · GitHub
[03:09:36] *** Joins: Posterdati (~posterdat@user/Posterdati)
[03:19:53] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Quit: ec)
[03:24:56] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[03:44:02] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-08-70-29-36-27.dsl.bell.ca) (Remote host closed the connection)
[03:47:53] *** Joins: szkl (uid110435@id-110435.uxbridge.irccloud.com)
[03:56:19] *** Quits: rotateq (~user@p200300e787143500a6f16de1b1c2e823.dip0.t-ipconnect.de) (Quit: ERC (IRC client for Emacs 27.2))
[04:07:49] *** Quits: kevingal (~quassel@2a02:8084:4140:f300:99c6:8d11:6785:3de3) (Remote host closed the connection)
[04:11:58] * hayley spots her RE parser is busted again, and considers using gilberth's POSIX parser, but then she'd have no complements and intersections on REs.
[04:18:52] <hayley> Though the parser isn't so hairy, I could probably add it. But then it wouldn't be exactly POSIX syntax. But then I have no $, ^, or any other boundaries yet.
[04:33:11] <gilberth> You don't want complements.
[04:33:57] <hayley> I don't?
[04:34:00] <gilberth> You want difference and I proposed {-} for that and {&} for intersections. {-} is sth that flex does.
[04:34:26] <gilberth> No, I prefer to be explicit on the domain.
[04:35:04] <gilberth> I mean, whould complement([a-z]) match EOF?
[04:35:16] <gilberth> Flex has {-} already.
[04:36:02] <hayley> I see.
[04:36:27] <hayley> Pity \ is used for escapes, since \ is the set difference symbol IIRC.
[04:36:31] <gilberth> IMHO precedence ought to be between concatenation and alternative.
[04:37:04] <gilberth> Use {-} as {-} is undefined with POSIX. You want to be compatible to POSIX.
[04:37:31] <gilberth> And wait until I get up tomorrow. I have rewritten my parser.
[04:37:49] <hayley> Very well then.
[04:37:52] <gilberth> Of course flex has this only for character sets like [a-z]{-}[p]
[04:38:14] * hayley wonders if algorithms class is boring enough to warrant going to university early.
[04:38:45] <hayley> There is a regex features website which lists set operations on character sets as a feature. Does it count if I have set operations on REs, of which character sets are a subset of?
[04:39:02] <gilberth> WHat do you think about the precedence? Would it hurt to put difference and intersection on the same precedence level?
[04:39:29] <gilberth> Character sets are just a special case to us :-)
[04:39:34] <hayley> I have no idea, other than my own parser gets it all wrong.
[04:40:08] <moon-child> can't you do complement in terms of difference?
[04:40:09] <kakuhen> is it possible to define how to coerce type I made?
[04:40:23] <gilberth> What do you think foo{-}bar{&}baz should be?
[04:40:25] <moon-child> ah, no, I remember, this came up earlier: you can't because you can't specify the empty set in posix
[04:40:43] <hayley> ¬X = \Sigma* \ X
[04:40:58] <gilberth> moon-child: This is what I propose. In the s-expression syntax I outruled NOT aka complement.
[04:41:33] <moon-child> hm, what about a{-}a?  Couldn't you express the empty set that way?
[04:41:40] <gilberth> Sure.
[04:41:43] <hayley> Honestly, no idea. I'd make it a parse error, like Self, to not specify precedence, but (?: ...) looks bad enough that I don't want to encourage it.
[04:42:08] <hayley> *not specify parens for precedence.
[04:42:36] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-08-70-29-36-27.dsl.bell.ca)
[04:42:43] <gilberth> moon-child: And b{&}a would also be the empty set :-)
[04:43:23] <moon-child> so, then, what's the problem with having complement?
[04:43:27] <hayley> Hm, I probably should add source tracking to the parser, so I can say "the second group (ABCDE) won't match" or something like that.
[04:44:33] <gilberth> Well, how about e.g. [0-9]*[.][0-9]*{-}[.] ? Or would you prefer ([0-9]*[.][0-9]*){-}[.] ?
[04:44:59] <hayley> gilberth: btw Owens et al use negation on page 13 of <https://www.ccs.neu.edu/home/turon/re-deriv.pdf>, but later state that negation is common for subtraction still.
[04:45:48] <gilberth> It's a usability issue. As the domain is not clear.
[04:46:52] <gilberth> I mean, you have ^ and $ in the language, as well as either . including newline or not, and <EOF> It's not obvious what \Sigma really is.
[04:49:38] <gilberth> But then for more complex regular expressions I prefer s-expressions, and I can mix POSIX and s-expressions. Like e.g. (- (and (= inte "[0-9]*") #\. (= frac "[0-9*]")) #\.) for example.
[04:50:18] <gilberth> You can indent s-expressions and place comments.
[04:51:24] * hayley gets the monthly ad booklet from an electronics parts dealer.
[04:51:59] <hayley> "Do you read these?" "Only the big books they give each year, with the actual components. The booklets just have hi-fi systems and things I'm not going to buy ever."
[04:52:38] <hayley> And radio parts. It is "Radio Parts Group" after all, but I've only bought components and an oscilloscope there.
[04:53:31] *** Quits: random-nick (~random-ni@87.116.176.196) (Ping timeout: 246 seconds)
[04:53:51] <hayley> Yeah, this is a boring class too. Something about topological sort using a work-list.
[04:57:26] *** Joins: dre (~dre@2001:8003:c932:c301:55ad:378d:2c99:f745)
[04:58:04] *** Parts: dre (~dre@2001:8003:c932:c301:55ad:378d:2c99:f745) ()
[05:16:08] <hayley> Damn, I can't even leave for university as I have to isolate since my brother got COVID. sigh
[05:16:37] <hayley> And he doesn't give a shit. He slept in yesterday morning, and told me last night he doesn't feel sick at all.
[05:17:01] <gilberth> Oh dear!
[05:18:01] <hayley> Meanwhile I hear someone else at his high school got it, and actually feels sick. He is just sitting downstairs watching clickbait YouTube videos...as usual.
[05:19:31] <gilberth> If your brother caught COVID shoudn't he be isolated within the house as best as possible and not sit in shared space like a living room?
[05:20:02] <hayley> Probably.
[05:20:28] <waleee> seems extremly unpractical for limited gains since he has been contagious before a positive result
[05:22:14] <gilberth> Still.
[05:22:14] <waleee> hayley: how many days of not-sick are required in your state of the Oz before you are allowed to venture out?
[05:22:23] <hayley> 7 days.
[05:22:28] <waleee> heh
[05:22:54] <waleee> (was down to 3 at the end in Sweden)
[05:23:01] <hayley> Guess I can at least start working on the runtime feedback thing for SIMD loops in one-more-re-nightmare.
[05:23:27] <hayley> That'll introduce some knobs to turn, and I've gotten lucky that so far I haven't needed any before.
[05:24:24] <waleee> I wonder how long the CCP will continue with blocking of entire cities
[05:24:53] <hayley> Perhaps I make one-more-re-nightmare:*cflags* or something.
[05:25:13] <waleee> seems like an idiotic hill to die on at this point, the 0-covid cases one
[05:25:32] <hayley> idk, Victoria nearly had it. Then didn't
[05:26:50] <waleee> what's the kiwi policy atm?
[05:27:01] <hayley> I'm not sure.
[05:27:46] <waleee> yeah, it have been quiet from there (here in Europe). I forgot to ask the resident kiwi in my town last time I met him
[05:33:55] *** Joins: clothespin (~awolven@c-73-209-95-92.hsd1.il.comcast.net)
[05:34:31] <clothespin> is there a common lisp resource library that I could use as a memory pool?
[05:35:43] <hayley> Can't think of any.
[05:36:20] *** Quits: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340) (Quit: WeeChat 3.4.1)
[05:36:27] <clothespin> know of any in any language with a permissible license?
[05:37:17] <hayley> Well, what's a memory pool going to do?
[05:37:38] *** Joins: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340)
[05:37:44] <clothespin> hand out memory chunks of gpu memory
[05:38:49] <waleee> tried out gnome 42, a pillar of glib-assertion stability apparently (/s)
[05:39:27] <moon-child> clothespin: something like https://github.com/GPUOpen-LibrariesAndSDKs/VulkanMemoryAllocator, then, perhaps?
[05:39:28] -ixelp- GitHub - GPUOpen-LibrariesAndSDKs/VulkanMemoryAllocator: Easy to integrate Vulkan memory allocation library
[05:41:58] <clothespin> Steve Haflich from Franz had an implementation of 'defresource'
[05:42:24] <moon-child> weren't franz the ones who greenspunned cl?
[05:42:26] <moon-child> :P
[05:53:22] <clothespin> I apparently missed all the Franz bashing online
[05:53:55] <drakonis> what exactly keeps franz and lispworks alive after all this time?
[05:54:12] <hayley> Companies pay for CL implementations + support.
[05:54:23] <clothespin> franz makes a database
[05:56:10] <clothespin> there's a defresource in clim, what's the license on clim again?
[05:56:52] <hayley> oclcl-petalisp has a memory pool. The pool is just a table of size -> list of GPU pointers.
[05:56:53] <gilberth> CLIM2 is free and McCLIM is LLGPL
[05:57:23] <clothespin> the defresource.lisp file has your name on it
[05:57:39] <gilberth> Yep, that could happen.
[05:57:54] <clothespin> i think i'll start there
[05:58:08] <GreaseMonkey> chiming in for NZ, the policy appears to be "self-isolate if you test positive, while we pretend we're making progress"
[05:58:15] <GreaseMonkey> it used to be a goal to hit 0 cases
[05:59:04] <GreaseMonkey> omicron is rampant, fortunately the vaccines do a really good job of softening the blow
[05:59:26] <hayley> Who's up for a game of Scrum poker, seeing as I can't play it in person?
[05:59:43] <gilberth> It would do a better job if, if it actually would prevent infection.
[06:00:04] <GreaseMonkey> in my case it actually did
[06:00:46] <GreaseMonkey> hayley: how long would that take to set up? it could be anywhere between a 1 and a 13
[06:01:31] <waleee> gilberth: I saw some intresting research in developing a nasally administered vaccine method that's supposed to do that (by creating a better immune response at the 1st point of contact) 
[06:01:48] <hayley> GreaseMonkey: https://www.scrumpoker.online/join/528834?token=0bc7d9dd01ea218284478832d760b53f
[06:01:49] -ixelp- Scrumpoker Online
[06:02:13] <waleee> * which should be great for more airborne diseases
[06:02:21] <GreaseMonkey> ...and i just got a scam phone call, in future i'm going to answer the phone with moshimoshi
[06:03:48] <hayley> Got 3 players so far.
[06:04:03] <GreaseMonkey> my umatrix is likely to need some tweaking 
[06:04:33] <waleee> gilberth: https://www.nytimes.com/2022/02/02/health/covid-vaccine-nasal.html
[06:04:35] -ixelp- Why Nasal Covid Vaccines May Make Better Boosters - The New York Times
[06:04:53] <hayley> Anyone else? /me put in one-more-re-nightmare issues.
[06:05:13] * waleee is crap at poker
[06:05:34] <hayley> It's not actual poker, more like "pick an estimate and argue with the person who came up with the worst and best estimate"
[06:05:47] <GreaseMonkey> the topic appears to be "No topic", is this correct
[06:05:57] <hayley> I haven't started yet.
[06:06:07] <hayley> Starting then...
[06:07:11] <waleee> ... welp the ui feedback was sparse
[06:07:18] *** Quits: Posterdati (~posterdat@user/Posterdati) (Ping timeout: 260 seconds)
[06:07:52] <hayley> Just waiting for GreaseMonkey now.
[06:08:23] <GreaseMonkey> got a phone call
[06:08:30] <hayley> waleee: ok, you were highest, why 13
[06:09:11] <waleee> ehm is this site not working with firefox?
[06:09:14] <GreaseMonkey> ok, i should have voted or something
[06:09:25] <waleee> I may have to tap out, my wifi is acting up a bit
[06:09:29] <hayley> It registered you submitting 13.
[06:09:37] <GreaseMonkey> did it register me submitting 5
[06:09:45] <hayley> Yes.
[06:10:00] <GreaseMonkey> ok, good, admittedly i'm uncertain about how long such a thing would take
[06:10:14] <hayley> It would work better if gilberth were playing.
[06:11:07] <GreaseMonkey> from my end i'm assuming it'd be a matter of ensuring APIs exist which can go "yes, this is the start of the string" and "yes, this is the end of the string"
[06:11:18] <GreaseMonkey> although i'm not familiar with the codebase
[06:11:18] <waleee> 13? ehm, it was a bit "posix would be nice but not necessarily a buzz kill if not" 
[06:11:52] <hayley> I'd have to make derivatives be conditional on start/end of string, as well as on character, I think.
[06:12:03] <waleee> I should probably have picked a lower number
[06:12:05] <GreaseMonkey> although there is a cheeky workaround where you can start and end the string with newlines
[06:12:30] <hayley> Okay, round 2.
[06:13:43] <GreaseMonkey> is round 2 another card, or another vote on the issue?
[06:14:10] <hayley> Another vote. We keep going until we converge on an estimate
[06:14:13] <GreaseMonkey> because at the moment i'm still uncertain on how long it would take
[06:15:21] <GreaseMonkey> by the way, we can only see our own votes on our screens
[06:15:40] <hayley> Right. Last was 1, 5, 8, and 13
[06:15:48] <GreaseMonkey> alright
[06:16:34] <hayley> 5, 8 and 5 now (someone from university dropped out).
[06:17:39] <GreaseMonkey> i'm also going to have to drop out of this, sorry
[06:17:44] <hayley> So I'm highest now. My current plan is to modify DERIVATIVE and NULLABLE to take in a set of "conditions" for boundaries, which requires changing those algorithms, and also how we memoize slightly.
[06:17:49] <hayley> np, this is a waste of time.
[06:18:09] <GreaseMonkey> scrum poker works better when everyone's involved in the project
[06:18:18] <GreaseMonkey> well, that's a reasonable guess anyway
[06:18:42] <hayley> I don't know what a 5 means, either.
[06:19:47] <GreaseMonkey> the reason people go with "this is totally not the number of hours" is due to abuse from manglement
[06:19:48] <waleee> "if nothing more urgent is up, work on this" for me
[06:20:29] *** Joins: Posterdati (~posterdat@user/Posterdati)
[06:20:52] <hayley> https://www.reddit.com/r/lisp/comments/tqe7c4/a_perhaps_naive_question_on_common_lisp/i2ibo89/
[06:20:54] -ixelp- A, perhaps, naive question on (Common) Lisp : lisp
[06:21:04] <hayley> "In fact, said programmer was actually interviewed and hired for his skill in writing Python and Haskell—not Lisp—since Rigetti used Python, and since a leading framework for (ideal) quantum information theory called Quipper was written in Haskell.  I know that because that programmer was me."
[06:21:52] <gilberth> How about a game of fizz-buzz instead? I start with: printf(((char*[]){"%d\n","fizz\n","buzz\n","fizzbuzz\n"})[!(n%5)+2*!(n%3)],n);
[06:23:54] *** Joins: Inline (~Inline@p200300cd470a540051f7a3750a30b01e.dip0.t-ipconnect.de)
[06:25:51] <GreaseMonkey> if i could be arsed with learning more COBOL i'd consider that for a fizz buzz challenge
[06:26:01] <GreaseMonkey> fizz buzz is one of the things that COBOL is actually not bad at
[06:26:19] *** Quits: Inline__ (~Inline@p200300cd470f690069ffd8a9e8710708.dip0.t-ipconnect.de) (Ping timeout: 260 seconds)
[06:26:35] <GreaseMonkey> note, i have only like 2 days experience with COBOL and i only did it because i was curious
[06:26:54] *** Quits: Posterdati (~posterdat@user/Posterdati) (Ping timeout: 260 seconds)
[06:27:15] <waleee> what. Really. I have vauge memories of io being a pain in the ass (aka lots of lines) when looking at examples
[06:27:54] <gilberth> I once found a book about COBOL on a flea market for like DM 1.00. Never read it.
[06:28:54] <gilberth> Actually I believe I would prefer INTERCAL :-)
[06:29:30] <GreaseMonkey> really, COBOL is a good baseline for "if your language is worse than this, it really should not exist unless you're intentionally taking the piss"
[06:29:57] <gilberth> Should I attempt to write a toy Lisp interpreter in COBOL?
[06:30:25] <GreaseMonkey> someone has already done that
[06:30:55] <GreaseMonkey> "This is a small project built by a student at the Recurse Center to express a love for COBOL and better understand it." - https://github.com/lauryndbrown/Cisp
[06:30:56] -ixelp- GitHub - lauryndbrown/Cisp: A Common Lisp Interpreter Built in COBOL
[06:31:51] <gilberth> Nah, when I am bored I implement a toy Lisp is funny languages like Rust. So far I have Go, Perl, MBASIC-80, C of course, Pascal, and Postscript. The last one was the most fun and actually compiled code. I ought to set up a web page.
[06:36:04] <gilberth> GreaseMonkey: That doesn't seem to do much. All I see is PRINT and +.
[06:36:20] <GreaseMonkey> in that case, it's up for grabs
[06:37:00] <gilberth> Actually I should rather make a Lisp for my yet to be built B32 TTL CPU.
[06:37:58] <gilberth> But that will be painful without any index registers at all.
[06:38:38] <gilberth> Anyhow, I don't know what the fuzz about fizzbuzz is. And I never heard of that game before.
[06:39:08] *** Joins: Posterdati (~posterdat@user/Posterdati)
[07:29:54] <hayley> "Purpose: tokenize lisp input file"
[07:29:55] * hayley buzzer sound
[07:30:14] <moon-child> #'READ
[07:30:17] <moon-child> can I go home now?
[07:30:22] <hayley> Not tokenizing.
[07:30:26] <moon-child> oh
[07:30:28] <moon-child> OH
[07:30:29] <Aurora_v_kosmose> hayley: Is it not?
[07:30:33] <moon-child> whelp
[07:32:28] <moon-child> Aurora_v_kosmose: read parses, it does not tokenize
[07:32:55] <moon-child> tokenizing would be like turning (+ 2 (+ 3e4 5)) into ("(" "+" "2" "(" "+" "3e4" "5" ")" ")")
[07:38:16] <Aurora_v_kosmose> I see
[07:41:35] <moon-child> gilberth: must have been old, if it was priced in marks
[07:42:30] <ck_> currency change was "only 20 years ago" this year, iirc
[07:50:58] *** Joins: semz_ (~semz@user/semz)
[07:53:33] *** Quits: semz (~semz@user/semz) (Ping timeout: 260 seconds)
[08:00:15] *** Quits: Aurora_v_kosmose (~LispyLigh@user/lispylights) (Remote host closed the connection)
[08:00:36] *** Joins: Aurora_v_kosmose (~LispyLigh@user/lispylights)
[08:26:12] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 268 seconds)
[08:28:14] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-08-70-29-36-27.dsl.bell.ca) (Remote host closed the connection)
[08:32:31] *** Quits: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340) (Ping timeout: 256 seconds)
[08:34:14] *** Joins: notzmv (~zmv@user/notzmv)
[08:56:17] *** Joins: dave0 (~dave0@069.d.003.ncl.iprimus.net.au)
[09:03:13] *** Joins: jeosol (~jeosol@user/jeosol)
[09:20:25] *** Quits: pjb (~pjb@user/pjb) (Read error: Connection reset by peer)
[09:21:02] *** Quits: EsoAlgo (~EsoAlgo@152.70.142.52) (Quit: The Lounge - https://thelounge.chat)
[09:22:43] *** Joins: EsoAlgo (~EsoAlgo@152.70.142.52)
[09:55:25] * moon-child spots a comment: 'inds indexes into indices'
[09:59:01] <contrapunctus> beach in #commonlisp be like "I have spoken." 😄
[09:59:10] <hayley> "What then? If we cannot trust any code to be non-malicious, how do we make usable programs, let alone secure ones? Has all of open source been a futile endeavor?"
[09:59:18] <hayley> This is so sad, can we have 1 Gilad Bracha
[10:10:35] <moon-child> you trust your compiler that much?
[10:20:50] <hayley> Marginally more than some random library.
[10:22:40] <hayley> It's also less code than every program I throw at it.
[10:25:37] <moon-child> sure.  But browsers demonstrate that it _is_ a serious problem in practice
[10:29:41] <hayley> Right. I'd still rather have language-based isolation than not.
[10:30:08] <moon-child> yeah
[10:57:50] *** Joins: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340)
[11:08:46] *** Quits: euandreh (~euandreh@2804:14c:33:9fe5:9dda:4bff:cdb5:90b8) (Ping timeout: 260 seconds)
[11:09:35] *** Quits: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340) (Ping timeout: 260 seconds)
[11:36:30] *** Joins: euandreh (~euandreh@191.181.59.160)
[11:49:15] *** Joins: mgl (~mgl@cpc87455-finc19-2-0-cust234.4-2.cable.virginm.net)
[11:54:28] *** Joins: rogersm (~rogersm@90.166.180.250)
[12:02:34] *** Joins: shka (~herr@109.231.3.55)
[12:39:50] * hayley found the bug in her parser.
[12:40:18] <hayley> The issue was that I pulled a Vlang and gave concatenation precedence over alternation.
[12:43:37] *** Joins: cosimone (~user@93-44-187-176.ip98.fastwebnet.it)
[13:00:07] <hayley> Now I wonder why (all-matches #?r"/\*¬($*\*/$*)\*/" "void blah() /* oh god no */ { /* aaa */ }") doesn't produce both matches.
[13:00:18] <hayley> (#?r from cl-interpol)
[13:00:53] <moon-child> methinks you need an rereduce
[13:00:59] <gilberth> Perhaps I should upgrade my mac from 10.14 to 10.10. Crashing every like ten days is not funny. And what is annoying is (1) the blame that I should shutdown my machine proper and (2) applications insisting on reopening all windows. What use is there of a dozen terminal emulator windows all staring at $HOME?
[13:02:10] <hayley> REGRIND isn't supposed to check that the engine behaves. Just that it isn't obviously wrong.
[13:02:36] <moon-child> 'rereduce' a la creduce, to make failing testcases smaller
[13:02:50] <hayley> Right.
[13:03:27] <hayley> But I have to wonder why one-more-re-nightmare doesn't seem to want to continue searching after the first match.
[13:06:32] <selwyn> shka: did you know michael hudson is 83
[13:06:37] <selwyn> 50 year old looking mf
[13:09:12] <shka> huh
[13:09:26] <shka> you have low bar for 50 year old :D
[13:11:36] <hayley> Aha, when I hit EOF, I didn't think to consult the exit map to figure where to restart.
[13:12:15] <hayley> OMRN isn't smart enough to figure out that the RE will never be matched, apparently, and produces a O(n²) search though ):
[13:12:20] <hayley> ...matched after some point
[13:12:55] <dave0> i hope to reach EOF in my 80's
[13:13:31] <dave0> that seems like a reasonably long life
[13:33:39] * hayley spots an attack for rewrites
[13:34:38] <hayley> There's ¬[something \/ everything]*. So something \/ everything = everything, ¬[everything] = nothing, then nothing* = \eps.
[13:37:52] <dave0> can it work without `¬` ?
[13:38:26] <hayley> Probably, but do I want to do that? Owens argues not.
[13:39:22] <dave0> oh shane warne thing on the radio.. he played cricket
[13:41:19] *** semz_ is now known as semz
[14:06:07] <gilberth> I really would appreciate when openvpn would give me any error message. "It just doesn't work" isn't that useful in figuring out what happened.
[14:06:48] <gilberth> At times it helps to just wait half an hour.
[14:06:58] <gilberth> dave0: Do we have coffee left?
[14:07:53] * hayley uploaded an image: (130KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/aiPjGHtkGJIaTeIpWcbUJeFP/tmpWWJ02E3I-tmp.png >
[14:08:18] * hayley up to 2302 lines of code now.
[14:09:21] <dave0> gilberth: ooh my (instant) coffee was on special so i bought a tin... plenty for everyone!
[14:09:27] * dave0 freshens gilberth's coffee
[14:09:43] <dave0> gilberth: i have leftover brownies if you are interested :-p
[14:09:47] <hayley> Still, no issue, as the compiler gets smarter (and less wrong). Though I should change one thing, that I should have a pattern matcher (TAG-FREE x) which only matches when there are no tags, instead of having to write (IF (HAS-TAGS-P x) (NEXT-PATTERN) ...)
[14:09:55] *** Quits: Oddity (~Oddity@user/oddity) (Ping timeout: 256 seconds)
[14:10:20] <gilberth> dave0: Thanks! Brownies for breakfast sounds reasonable. Usually I don't have breakfast but with lovely brownies I make an exception.
[14:10:22] *** Joins: rotateq (~user@ip-078-094-235-194.um19.pools.vodafone-ip.de)
[14:10:46] <dave0> :-)
[14:11:07] <gilberth> dave0: Has it ever occurred to you to use an s-expression syntax for assembly?
[14:11:47] <dave0> gilberth: no, because c has warped my mind
[14:11:58] <moon-child> gilberth: what is the point?  Either I write x y z or I write (x y z).  There is no opportunity for abstraction
[14:12:17] <gilberth> I mean, I use s-expressions for the B32 which gives me nice macros. atm I hack some 8080 using Intel/DR syntax and just realized that this is silly, I should use s-expressions.
[14:12:20] <dave0> gilberth: it wasn't until i started playing with forth that i found how to rewrite the forth language into an assembler
[14:12:45] <dave0> you do not think that way in c
[14:13:03] <hayley> I believe HotSpot has a clever little assembler in C++.
[14:13:33] <gilberth> moon-child: DEFMACRO. http://clim.rocks/gilbert/b32/asm/stdlib.asm or http://clim.rocks/gilbert/b32/asm/pushpop.asm e.g.
[14:14:15] <hayley> Ah yeah, LC3-in-LC3 heavily abuses DEFMACRO for LC3 code generation.
[14:14:48] <moon-child> gilberth: is that full cl at compile time?
[14:15:14] <gilberth> You can't survive 8080 w/o macros. Like load BC from HL? say mov b,h : mov c,l. Load BC from [HL]? mov c,m : inx h : mov b,m : dcx h
[14:15:21] <moon-child> T_T
[14:15:28] <gilberth> moon-child: Yes, the assembler is written in CL.
[14:15:30] <hayley> "WARNING: failed to infer the type from test (HAS-TAGS-P ?) !" What, you ever seen a type like that?
[14:15:40] <moon-child> this 'progn' seems redundant.  Can't you simply interpret a list of lists as a list of instructions?
[14:15:48] <hayley> That's a feature, I don't have such a type.
[14:16:29] <hayley> And Trivia believes that should signal a full warning. Asshole.
[14:16:47] <gilberth> moon-child: I like to be explicit here. Reliance on implicit splicing is too error prone in my experience.
[14:16:58] <dave0> you do not rewrite c into another language, and when i saw forth rewrite itself i was amazed
[14:18:05] <moon-child> it worked fine in my document processor.  Though there is less room for error there.  I can imagine in asm that you might write nop instead of (nop), so then (nop (foo bar) (baz biz)) would be interpreted as a single faulty instruction, rather than a list of instructions, each of which was well-formed
[14:18:25] <moon-child> I used reader macros to generate standard objects; I could not use the lisp reader as I needed to preserve capitalization, punctuation, and spacing
[14:19:49] <gilberth> moon-child: I was bitten more than once by this implicit splicing at various occasions with all sorts of macro processors one being a document processor. I mean after all you don't say just "foo" to invoke FOO in Lisp either. I just prefer it that way. And this little PROGN doesn't hurt.
[14:21:09] <gilberth> My first approach was that defmacro could be like (defmacro jc (addr) `(jnc (+ @ 2)) `(jmp ,addr)) but that turned out to be not that a smart idea either for I can't stick PRINT-debugging in there.
[14:22:01] <moon-child> with my document processor, I use functions, not macros.  So splicing is not really so nice as everything is already evaluated
[14:23:14] <gilberth> BTW. With mulisp you say (defun fib (n) ((lessp n 2) n) (plus (fib (difference n 2)) (fib (difference n 1))))
[14:23:41] <moon-child> thanks, I hate it
[14:23:43] <gilberth> The COND and RETURN is implicit by kinda splicing. Hard to read IMHO. I never liked that.
[14:24:22] <moon-child> in k, and I think some old lisps, you could say (if a b c d e f g) for (if a b (if c d (if e f g)))
[14:24:52] <gilberth> But I can see their point in saving space. With only 16K cons cells to play with, every cons counts. :-)
[14:25:11] <hayley> (trivia:match 2 ((satisfies evenp) 'even)) ⇒ WARNING: failed to infer the type from test (EVENP ?) !
[14:25:13] <gilberth> moon-child: A flattened COND?
[14:25:52] <moon-child> yeah.  And you don't need to specify 't' for the final condition, which I like
[14:25:55] <gilberth> Does it even safe conses?
[14:26:10] <moon-child> I don't think the point is to save conses, but to increase the number of valid forms
[14:26:12] <hayley> Seriously? Should I just (defmacro match (value &body cases &environment e) (handler-bind ((warning #'muffle-warning)) (macroexpand-all (list* 'trivia:match value cases) e))) or something?
[14:26:38] <gilberth> You don't with COND either, just say (defun fib (n) (cond ((< n 2) n) ((+ (fib (- n 2)) (fib (- n 2))))))
[14:27:36] <gilberth> moon-child: I don't like that IF. Why? With COND one clause is one s-expression I could operate on as a whole. In the editor.
[14:28:07] <gilberth> One of the things I don't like with the flattened syntax of LOOP either. I never really liked LOOP and was slow to adopt it.
[14:29:30] <gilberth> For the same reason I don't like the (cond ... (x)) abbrev. And it breaks with multiple values.
[14:33:08] <shka> loop: not enough ()
[14:35:10] <rotateq> I like LOOP.
[14:36:33] <gilberth> I don't like it's syntax at all. Never did.
[14:36:50] <gilberth> Oops, I lost a single quote again.
[14:37:06] <rotateq> so we can still coexistent in this point :)
[14:40:22] <gilberth> And I always forget the redundant "DO" in LOOP.
[14:40:50] <rotateq> for simple ones maybe redundant yes
[14:41:10] <shka> i like iterate, but it could be implemented better
[14:42:19] <gilberth> This comes from its silly syntax. I mean (foo 1 2 3) isn't a loop clause isn't it? If loop clauses would be lists of its own, new LOOP would be compatible to old LOOP.
[14:43:13] <gilberth> Anyhow I believe this comes from Interlisp. They had the idea that (if (< n 2) then n else (+ (fib (- n 2)) (fib (- n 1)))) would be fine Lisp.
[14:44:07] <gilberth> Somehow wanting an Algol'sh syntax there. Silly, if you ask me.
[14:45:26] <rotateq> :D
[14:46:35] <gilberth> This somehow breaks structure. I struggle a bit to express that. But with traditional Lisp I could rip out any part of a given function and substitute it by something else. That is I could mark one s-expression, kill it, insert "X" go up and wrap a (LET ((X <yank-here>)) ...) around. Or move that X to another aux function. This flat syntax breaks that.
[14:47:37] <gilberth> It would work with a good structural editor. But only, if you bite the bullet and go the whole way and have a traditional formal grammar. Then you could kill and yank one node of the AST.
[14:51:34] *** Quits: dave0 (~dave0@069.d.003.ncl.iprimus.net.au) (Quit: dave's not here)
[14:56:45] <gilberth> And I miss an iteration type that works for both vectors and arrays. One occasion that I use CL:MAP for. But then, if feasible, I like the functional approach better in general.
[14:57:59] <rotateq> so you could make a benefit of April :)
[15:04:06] <gilberth> And why can't I say (loop for x in xs do (when (oddp x) (collect x)))?
[15:04:47] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 260 seconds)
[15:05:27] <gilberth> There is (loop for x in xs when (oddp x) collect x), but what if I want to have that COLLECT nested with some LETs, MULTIPLE-VALUE-BIND, etc? Doesn't work.
[15:06:19] *** Joins: aeth (~aeth@user/aeth)
[15:06:50] <gilberth> I use the idiom (loop ... nconc (.... #| yep, we have sth: |# (list x) ... #| no luck: |# nil)) here. And that's not nice.
[15:10:11] <moon-child> 'gather' is nice
[15:10:18] <moon-child> you could implement it in cl without too much trouble
[15:11:04] <shka> gilberth: you can in iterate
[15:11:09] <moon-child> basically, (gather (... (progn ... (take x) (take y)) ...) ...) returns a list of x and y
[15:11:45] <moon-child> it composes better because you can use lisp language constructs to decide when to take, rather than needing to use loop language constructs
[15:12:14] <moon-child> (and of course you could presumably also have take-list which would behave like nconc or append, contrary to take which behaves like collect)
[15:13:16] *** Joins: pjb (~pjb@user/pjb)
[15:15:05] *** Joins: random-nick (~random-ni@87.116.176.196)
[15:16:21] *** Joins: kevingal (~quassel@149.157.107.109)
[15:17:41] <gilberth> moon-child: Somewhere I have a COLLECTING macro, which parallels BLOCK in a way. You say (collecting nil .... (collect x) ...) or (collecting foo ... (collect-into foo x)) with (collect x) = (collect-into nil x).
[15:18:21] *** Quits: lisp123 (~lisp123@143.238.171.43) (Remote host closed the connection)
[15:18:33] <gilberth> Problem is, if you want to have multiple accumulators at once. Or different kind of accumulators, like collecting, noncing, and maximizing some other.
[15:18:48] <moon-child> I don't see what the problem is
[15:19:06] <gilberth> And I see ALWAYS and friends as a kind of accumulator with short-circuit as well.
[15:20:04] <moon-child> always should not be hard to do in that sort of style either
[15:20:25] <gilberth> moon-child: What syntax to you propose for (loop for x in xs when (oddp x) collect x into r maximize x into m finally (return (values m r)))? I mean you're right, accumulation is orthogonal to iteration.
[15:20:57] *** Quits: kevingal (~quassel@149.157.107.109) (Ping timeout: 260 seconds)
[15:20:59] <moon-child> ah, I see
[15:21:21] <gilberth> With a GATHER (I don't like the name) or COLLECTING macro, you could also collect with recursion, say. Or within a loop of loops. In the latter I say (loop ... nconc (loop ... collect x)). Not nice.
[15:21:26] *** Joins: kevingal (~quassel@2001:770:c0:401:c44c:2364:15bc:7df8)
[15:22:03] <moon-child> how about this:
[15:22:28] <gilberth> I try, too. If I may.
[15:22:35] <moon-child> (with-accumulators (r m) (values r m) (mapc (lambda (x) (when (oddp x) (collect-into r x)) (maximize-into m x)) xs))
[15:23:51] <gilberth> moon-child: Yep! Although I don't like the structure. The values should, if you want to make it explicit last.
[15:23:55] *** Quits: mala (~mala@user/malaclyps) (Ping timeout: 260 seconds)
[15:24:01] <moon-child> gilberth: that is fair
[15:24:28] <gilberth> I mean, r and m are bound and values is executed. You don't say e.g. (destructuring-bind (x y) (+ x y) some-list-to-destructure), do you?
[15:25:25] <moon-child> well.  I think it's convenient if there is an implicit progn of accumulating expressions
[15:25:43] <moon-child> unwind-protect is a better model
[15:25:51] <gilberth> So, I propose to skip the values, you always can say (multiple-value-bind (x y) (gather ..)) or move ith (gather ((r m) ...) (values r m)) To parallel binding. Not ideal either.
[15:26:39] <gilberth> moon-child: Yes, but it is (gather # do-last do-first do-second ..) The control flow is reversed.
[15:27:11] <moon-child> yes.  That's what I meant--better to do like how unwind-protect does than how I originally proposed
[15:27:34] <gilberth> BTW, you would LOOP in the gathering anyway, so often there wouldn't be need for implicit progn. Hmm.
[15:28:06] <moon-child> I complained in the past that there is a finally clause but no initially clause
[15:28:16] <moon-child> here you could get an initially clause for free, by just putting it before the loop
[15:28:27] <moon-child> another thing: I want the accumulators to be in the dynamic environment.  But I fear no one else wants that
[15:31:49] <gilberth> This almost looks nice IMHO: http://clim.rocks/gilbert/gather-hmm.lisp
[15:32:10] <hayley> https://github.com/guicho271828/trivia/issues/133
[15:32:10] -ixelp- Type inference and SATISFIES, GUARD1, etc · Issue #133 · guicho271828/trivia · GitHub
[15:32:45] <gilberth> moon-child: I want an non-initially clause. For our comma printing problem, you remember. And we found for nil = nil then (write-string ", ") :-)
[15:32:58] <moon-child> I don't like that the last expression doesn't look distinct from the rest
[15:33:04] <moon-child> I would rather an explicit progn
[15:33:08] <moon-child> like unwind-protect (again)
[15:33:52] <moon-child> gilberth: so, if m and r are just lexicals, what is the difference between (gathering (m r) ...) and (let (m r) ...)?
[15:34:17] <gilberth> Huh? The clean-ups in UWP are in an implicit PROGN.
[15:34:37] <moon-child> oh, I see
[15:34:46] <gilberth> No, this implicit PROGN is fine. LET has it. MULTIPLE-VALUE-BIND has it, DESTRUCTURING-BIND, etc.
[15:34:55] <moon-child> I thought it was flipped
[15:34:58] <moon-child> that is fine then
[15:35:38] <gilberth> And I see it like (GATHERING vars init &body body) just like the mentioned binding form. I believe that is consistent.
[15:36:02] <moon-child> yes.  I just misinterpreted originally
[15:36:48] <moon-child> hmm, one thing I don't like: you can say (sum-into x y) (max-into x z)
[15:36:52] <moon-child> loop doesn't let you do that
[15:37:06] <gilberth> Well, the macro could complain.
[15:37:19] <moon-child> you would need a code walaker
[15:37:23] <gilberth> And say "Make up your mind, stupid!"
[15:38:22] <gilberth> moon-child: No. COLLECT-INTO and MAXIMIZE-INTO etc would be local macros anyway that would need to know their lexical enclosure in GATHERING. I see no problem here.
[15:38:51] <gilberth> Or do I? /me thinks.
[15:38:59] <shka> there is maxf
[15:39:02] <moon-child> yes, but how does maximize-into know if you also tried to sum into the same variable elsewhere?
[15:39:03] <shka> in alexandria
[15:39:18] <shka> and incf
[15:39:34] <moon-child> you could declare at the top what you want to do with the variables.  (gathering ((m maximized) (r summed)) ...).  But that is redundant
[15:40:07] <gilberth> Yep. Let me think. Where is COMPILER-LET, when you need that?
[15:41:24] <hayley> https://videocardz.com/newz/amd-is-selling-broken-playstation-5-apus-to-cryptominers
[15:41:25] -ixelp- AMD is selling broken PlayStation 5 APUs to cryptominers - VideoCardz.com
[15:41:28] <gilberth> shka: MAXF doesn't solve the problem. For efficient COLLECT, you want to keep a tail pointer.
[15:41:34] <moon-child> alternately, you could not be redundant and say (gathering ((m maximized) (r summed)) (gather-into m 5))
[15:41:45] <moon-child> and gather-into would just do the right thing with m
[15:41:48] <moon-child> but I don't like that either
[15:41:52] <shka> gilberth: sure
[15:41:58] <moon-child> as it requires you to have more context to interpret the gather
[15:42:15] <gilberth> moon-child: I don't like that, because you need to get to the top to see what kind of accumulation 'm' is.
[15:42:21] <moon-child> yes, as I said
[15:42:32] <moon-child> maybe having a code walker is not so bad
[15:42:43] <gilberth> moon-child: I read too slow and you type too fast. Sorry.
[15:42:43] <moon-child> after all, loop must implement a compiler for loop-language
[15:42:47] <moon-child> :)
[15:43:15] <gilberth> I won't call it a compiler. It's a rather usual macro. No code walking needed there.
[15:44:11] <moon-child> it doesn't have to compile anything written in lisp.  But it compiles from code written in loop to code written in lisp
[15:44:33] <moon-child> anyway I must sleep now.  Goodnight!
[15:44:38] <gilberth> Actually this is the same problem I face with CLEX. With my WITH-MATCH macro I like to know which captures are actually used. And because there cannot be a portable macroexpand-all, I am kind of bust.
[15:44:52] <gilberth> moon-child: Take care then.
[15:45:43] <hayley> Foo, it is only 10:15pm.
[15:46:13] <rotateq> hayley: can we swap our times/places?
[15:46:23] <hayley> If you must.
[15:46:31] <rotateq> maybe via (rotatef *hayley* *rotateq*)
[15:46:33] <hayley> https://www.reddit.com/r/programmingcirclejerk/comments/tqfi2u/a_beefy_server_should_be_able_to_process_4gb_of/
[15:46:34] -ixelp- A beefy server should be able to process 4GB of data within 30 seconds though I suppose. : programmingcirclejerk
[15:46:46] <hayley> 4GB / 30 seconds = 133MB/s
[15:46:56] <hayley> If the server is running Rust regex, I guess.
[15:53:45] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-08-70-29-36-27.dsl.bell.ca)
[15:55:55] * hayley uploaded an image: (74KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/OlRIARkrCLuUxlzyMtdaoZNG/sicl-bootstrapping.jpg >
[15:57:42] *** Quits: Brucio-61 (~Brucio-61@ip-094-114-248-079.um31.pools.vodafone-ip.de) (Ping timeout: 260 seconds)
[15:58:27] *** Quits: scymtym (~user@ip-094-114-248-079.um31.pools.vodafone-ip.de) (Ping timeout: 260 seconds)
[16:06:35] <rotateq> hayley: from where does this meme come?
[16:06:54] <hayley> The first 5 seconds of https://www.youtube.com/watch?v=XvRQDsH0Yho
[16:06:55] -ixelp- Elvis Costello & The Attractions - (I Don't Want To Go To) Chelsea - YouTube
[16:08:01] <rotateq> okay
[16:08:44] <rotateq> sry I would like to understand more about what you talk, but sometimes it's not quite possible for me :/
[16:10:22] <hayley> SICL iteratively produces a "virtual memory" (really a first-class global environment) with objects in its format, by running MOP code in 5 of such environments.
[16:17:10] *** Joins: razetime (~quassel@117.254.35.251)
[16:27:55] *** Joins: scymtym (~user@2001:638:504:20e6:6ac3:87e0:e782:f3fc)
[16:30:26] *** Joins: treflip (~user@user/treflip)
[16:32:02] <hayley> I guess I should write a documentation book for one-more-re-nightmare at this point.
[16:32:07] *** Joins: Brucio-61 (~Brucio-59@2001:638:504:20e6:6ac3:87e0:e782:f3fc)
[16:32:21] <hayley> The optimisation part would be good. "Step 1. Use this library."
[16:33:39] * selwyn doesn't want to go to chelsea either
[16:34:26] * hayley doesn't want to go to Chel-C
[16:36:43] <gilberth> moon-child: BTW, we need an implicit progn there because one might want to place declarations there.
[16:37:10] <gilberth> So it rather is an implicit LOCALLY of sorts.
[17:12:49] * selwyn explores asdf
[17:12:52] <selwyn> much to contemplate
[17:15:10] *** Quits: razetime (~quassel@117.254.35.251) (Ping timeout: 246 seconds)
[17:17:30] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 272 seconds)
[17:18:39] *** Joins: aeth (~aeth@user/aeth)
[17:23:05] *** Joins: mala (~mala@user/malaclyps)
[17:30:10] *** Joins: razetime (~quassel@117.254.35.196)
[17:31:45] *** Quits: treflip (~user@user/treflip) (Remote host closed the connection)
[17:44:31] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-08-70-29-36-27.dsl.bell.ca) (Remote host closed the connection)
[18:17:00] *** Quits: szkl (uid110435@id-110435.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[18:20:09] *** Quits: rotateq (~user@ip-078-094-235-194.um19.pools.vodafone-ip.de) (Quit: ERC (IRC client for Emacs 26.3))
[18:38:28] *** Joins: treflip (~user@user/treflip)
[18:47:46] *** Joins: tyson2 (~user@cpef492bf758151-cm688f2e29d8d0.cpe.net.cable.rogers.com)
[18:54:04] *** Quits: treflip (~user@user/treflip) (Remote host closed the connection)
[18:54:55] *** Joins: treflip (~user@user/treflip)
[19:12:13] <contrapunctus> I can't decide what separator to use in Lisp package names :|
[19:12:43] <contrapunctus> `:foo-bar` ? `:foo.bar` ? `:foo/bar` ? aaaa
[19:13:31] *** Joins: Lycurgus (~juan@98.4.112.204)
[19:14:53] <contrapunctus> hm...someone a little more experienced than me could probably write a one-liner to figure out what the most commonly-used package name separator on Quicklisp is 🤔️
[19:15:31] *** Quits: treflip (~user@user/treflip) (Remote host closed the connection)
[19:16:11] *** Joins: treflip (~user@user/treflip)
[19:16:32] <Lycurgus> og - . and / , . is prolly best
[19:16:42] <Lycurgus> of
[19:17:12] <Lycurgus> - is commonly used in pkg names
[19:17:28] <Lycurgus> and / is whack if it works at all
[19:19:05] *** Joins: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340)
[19:20:17] <contrapunctus> Lycurgus: thanks, `.` it is then ^^
[19:20:19] *** Quits: treflip (~user@user/treflip) (Client Quit)
[19:21:56] *** Joins: eugercek (~user@user/eugercek)
[19:22:05] <Lycurgus> np
[19:31:21] *** Quits: tyson2 (~user@cpef492bf758151-cm688f2e29d8d0.cpe.net.cable.rogers.com) (Remote host closed the connection)
[19:31:21] *** Joins: rotateq (~user@p200300e787143500a6f16de1b1c2e823.dip0.t-ipconnect.de)
[19:36:13] *** Quits: razetime (~quassel@117.254.35.196) (Ping timeout: 240 seconds)
[19:44:45] *** Joins: razetime (~quassel@117.254.35.251)
[19:46:11] *** Joins: tyson2 (~user@cpef492bf758151-cm688f2e29d8d0.cpe.net.cable.rogers.com)
[20:13:04] *** Quits: razetime (~quassel@117.254.35.251) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[20:29:32] *** Quits: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340) (Ping timeout: 260 seconds)
[20:32:06] *** Joins: razetime (~quassel@117.254.35.251)
[20:42:01] *** Quits: tyson2 (~user@cpef492bf758151-cm688f2e29d8d0.cpe.net.cable.rogers.com) (Remote host closed the connection)
[20:42:53] *** Quits: eugercek (~user@user/eugercek) (Remote host closed the connection)
[20:43:07] <shka> https://www.youtube.com/watch?v=L2p_fGuldt0
[20:43:07] -ixelp- Unleash Apple Silicon... with LINUX! - YouTube
[20:51:51] <selwyn> i hope the hackathon organisers buy that common lisp is a jvm language
[20:52:59] <shka> it is objectively true
[20:53:21] <drakonis> use abcl
[20:53:33] <selwyn> i am using abcl
[20:53:39] <Lycurgus> clojure pretty much has that occupied
[20:53:57] <drakonis> Lycurgus: i saw your doppelganger the other day
[20:54:00] <drakonis> one slycurgus
[20:54:04] <Lycurgus> establishing CL as antithetical to jvm
[20:54:10] <drakonis> he sly
[20:54:23] <selwyn> shka: so this hackathon involves writing bots for a strategy game
[20:54:24] <drakonis> also https://twitter.com/aroo_of_fighter/status/1509104421921165316
[20:54:25] <drakonis> jfc
[20:54:29] <selwyn> could use your analytics :p
[20:54:30] <Lycurgus> right at first he had Lycurgus after the freenode split
[20:54:51] <Lycurgus> and he gratiously ceded it to me as I had it at freenode
[20:54:56] <Lycurgus> and elsewhere
[20:55:28] <shka> selwyn: well, statistical-learning is on the github :P
[20:55:50] <Lycurgus> i think he wanted to go to slycurgus anyway because he was already using and has a domain slycurg.us
[20:55:51] <selwyn> tower defence
[21:00:49] <selwyn> i've never done ai before
[21:06:11] <shka> well, it is all about trees and forests in this library 
[21:06:33] <shka> and this kind of AI is simply adaptive nearest neighbor 
[21:07:01] <selwyn> to play tower defence?
[21:07:46] <shka> it is always like that
[21:07:54] *** Joins: Inline__ (~Inline@p200300cd470a540051f7a3750a30b01e.dip0.t-ipconnect.de)
[21:08:05] * selwyn takes notes
[21:08:22] *** Quits: Inline (~Inline@p200300cd470a540051f7a3750a30b01e.dip0.t-ipconnect.de) (Read error: Connection reset by peer)
[21:08:34] <shka> selwyn: find the next best move given the current situation
[21:09:14] <shka> some aspects of the situation may be irrelevant 
[21:09:45] <shka> and hence, you are performing search for possible actions and utility functions 
[21:09:48] <selwyn> right
[21:09:50] *** Quits: scymtym (~user@2001:638:504:20e6:6ac3:87e0:e782:f3fc) (Ping timeout: 260 seconds)
[21:16:58] *** Joins: scymtym (~user@2001:638:504:20e6:6ac3:87e0:e782:f3fc)
[21:20:06] *** Quits: Lycurgus (~juan@98.4.112.204) (Quit: Exeunt)
[21:22:30] <selwyn> hm, the space of actions is quite big
[21:25:18] <shka> selwyn: yeah, it is
[21:25:29] <shka> that's why you can't scan it all 
[21:33:52] *** Quits: razetime (~quassel@117.254.35.251) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[22:37:29] *** Joins: Oddity (~Oddity@user/oddity)
[23:20:47] *** Quits: Aurora_v_kosmose (~LispyLigh@user/lispylights) (Quit: brb...)
[23:22:58] *** Quits: kevingal (~quassel@2001:770:c0:401:c44c:2364:15bc:7df8) (Remote host closed the connection)
[23:27:45] *** Joins: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340)
[23:52:35] *** Joins: Aurora_v_kosmose (~LispyLigh@user/lispylights)
