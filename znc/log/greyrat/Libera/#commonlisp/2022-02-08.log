[00:00:12] <phoe> I assume because ENCLOSE seems to not be used much
[00:00:36] <Bike> i don't think so. trucler is basically about accessing parts of the environment. enclose is an evaluator.
[00:01:15] *** Joins: simendsjo (~user@84.211.91.241)
[00:01:42] <phoe> a peculiar evaluator that requires access to a lexical environment object
[00:01:50] <phoe> hence my question
[00:04:37] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 240 seconds)
[00:05:36] <Bike> my understanding would be more that you could use trucler accessors to get the information needed to implement enclose
[00:05:48] <phoe> OK, that works too
[00:07:03] *** Joins: gaqwas (~john@dynamic-095-117-041-063.95.117.pool.telefonica.de)
[00:09:06] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Ping timeout: 245 seconds)
[00:09:06] *** Joins: saltrocklamp[m] (~hexology@user/hexology)
[00:10:12] *** Quits: gaqwas (~john@dynamic-095-117-041-063.95.117.pool.telefonica.de) (Remote host closed the connection)
[00:10:23] *** Joins: CodeBitCookie[m] (~code-bit-@2001:470:69fc:105::a2f)
[00:10:34] *** Quits: cage (~cage@94-39-220-187.adsl-ull.clienti.tiscali.it) (Quit: rcirc on GNU Emacs 27.1)
[00:11:34] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca)
[00:11:58] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[00:12:31] *** Joins: cosimone (~user@93-47-231-87.ip115.fastwebnet.it)
[00:13:29] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[00:15:08] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[00:16:02] *** Quits: attila_lendvai (~alendvai@catv-89-132-245-188.catv.fixed.vodafone.hu) (Read error: Connection reset by peer)
[00:16:29] <phoe> has Michael Raskin been around recently?
[00:17:30] *** Joins: edmrk[m] (~edmrkmatr@2001:470:69fc:105::1:5a63)
[00:17:31] *** Joins: Mrtn[m] (~mrtn@2001:470:69fc:105::1f44)
[00:17:35] *** Joins: attila_lendvai (~alendvai@catv-89-132-245-188.catv.fixed.vodafone.hu)
[00:17:52] *** Joins: Arcsech (~arcsechma@2001:470:69fc:105::1:797)
[00:18:15] *** Joins: char[m] (~charlesma@2001:470:69fc:105::1:7050)
[00:18:44] *** Joins: loke[m] (~loke@2001:470:69fc:105::237)
[00:19:57] * Shinmera hopes his ELS submission gets accepted
[00:20:14] *** Quits: cosimone (~user@93-47-231-87.ip115.fastwebnet.it) (Remote host closed the connection)
[00:20:15] <Shinmera> Anyone else here going to the in-person ELS?
[00:20:28] *** Joins: fitzsim` (~user@69-165-165-189.dsl.teksavvy.com)
[00:20:33] *** Quits: fitzsim (~user@69-165-165-189.dsl.teksavvy.com) (Ping timeout: 250 seconds)
[00:20:37] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[00:20:43] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[00:20:50] *** fitzsim` is now known as fitzsim
[00:23:16] <dbotton> I am considering
[00:24:43] <dbotton> where are the exact details of it?
[00:25:28] <Shinmera> The website has all the infos
[00:25:32] <Shinmera> Registration isn't open yet.
[00:25:54] <dbotton> Found it, is on my b-day 3/22
[00:26:22] *** Quits: mfiano (~mfiano@li1282-157.members.linode.com) (Quit: WeeChat 3.3)
[00:26:47] *** Joins: mfiano (~mfiano@cpe-67-240-71-179.nycap.res.rr.com)
[00:28:16] *** Quits: simendsjo (~user@84.211.91.241) (Ping timeout: 245 seconds)
[00:29:26] *** Joins: Brucio-61 (~Brucio-61@ip-094-114-248-079.um31.pools.vodafone-ip.de)
[00:36:44] *** weechat is now known as Spawns_Carpeting
[00:39:49] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[00:42:12] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[00:43:05] *** Quits: yewscion (~yewscion@ec2-44-193-71-234.compute-1.amazonaws.com) (Ping timeout: 250 seconds)
[00:46:01] <phoe> attila_lendvai: the case that seems to not be caught by hu.dwim.walker is (macrolet ((foo ...)) (walk-form (macrolet ((bar ...)) ...))) where WALK-FORM invokes the code walker
[00:46:01] *** Quits: attila_lendvai (~alendvai@catv-89-132-245-188.catv.fixed.vodafone.hu) (Read error: Connection reset by peer)
[00:46:52] <phoe> I see that hu.dwim.walker:parse-macro-definition calls EVAL on a NAMED-LAMBDA, which means that the macro body of BAR is compiled in a null lexenv, which effectively prevents BAR from referring to the local macro FOO
[00:47:06] <phoe> which is the case solved by ENCLOSE
[00:47:09] *** Quits: shka (~herr@109.231.0.226) (Ping timeout: 256 seconds)
[00:47:21] *** Joins: katco (~katco@2001:470:69fc:105::2b8)
[00:47:38] *** Joins: attila_lendvai (~alendvai@catv-89-132-245-188.catv.fixed.vodafone.hu)
[00:48:03] *** Quits: ante_ (~ante@c-0c87225c.023-1144-7570702.bbcust.telenor.se) (Ping timeout: 256 seconds)
[00:48:41] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Remote host closed the connection)
[00:48:42] <phoe> or is that the case?
[00:48:44] *** Joins: Spawns_Carpet[m] (~inceptor-@2001:470:69fc:105::1:298b)
[00:48:44] * phoe re-reads
[00:48:47] *** Joins: sp (~sp@user/susam)
[00:48:54] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[00:49:22] *** Joins: cjb (~cjb@user/cjb)
[00:49:44] <phoe> maybe it's not, because the final MACROEXPAND-ALL is called with the original lexenv, which already includes the expander for FOO
[00:50:26] <phoe> then I am still misunderstanding this affair
[00:50:38] *** Quits: semz (~semz@user/semz) (Quit: Leaving)
[00:51:54] *** Quits: cuz```` (~user@38.140.58.234) (Read error: Connection reset by peer)
[00:53:02] <Bike> should just be if you try to codewalk (macrolet (...) (macrolet (...) ...))
[00:53:34] <Bike> the environment the code walker is called in shouldn't matter, code walking should be as insensitive to that as eval is
[00:53:49] <phoe> https://github.com/hu-dwim/hu.dwim.walker/blob/509a49945ef33dfdb2e9e499c6fa22713ff61c1e/test/macros.lisp#L28-L34
[00:54:38] <phoe> if this test passes, and I assume it does, then it means that hu.dwim.walker is capable of getting this right without ENCLOSE
[00:55:14] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[00:55:29] <phoe> and, yes, it passes
[00:55:32] <phoe> what's the trick!?
[00:55:43] * phoe digs into https://github.com/hu-dwim/hu.dwim.walker/blob/f1a0726a90f3ed8a015715405af024a530304626/source/infrastructure.lisp#L558-L602
[00:56:27] <Bike> calls macroexpand-all, looks like
[00:56:51] <Bike> boy is that complicated.
[00:56:53] <phoe> macroexpand-all is defined to be (unwalk-form (walk-form ...))
[00:56:55] *** Joins: dieggsy (~dieggsy@2001:470:69fc:105::91f)
[00:56:58] <phoe> with an environment object
[00:57:05] *** Joins: miique (~miiquemat@2001:470:69fc:105::1:6901)
[00:57:08] *** Quits: ebrasca (~user@librepanther.com) (Remote host closed the connection)
[00:57:14] *** Joins: yewscion (~yewscion@72-21-196-66.amazon.com)
[00:57:44] <Bike> what's happening here, i guess, is that a lexenv is constructed, and then used to macroexpand-all the body of the macroexpander, thus ensuring outer macros are expanded before the implementation EVAL sees anything.
[00:58:16] <phoe> yes, I can see the functions for augmenting a lexenv
[00:58:52] <phoe> so this, basically, manually macroexpands absolutely every-fricking-thing before proceeding with actual walking
[00:58:57] *** Quits: nature (~nature@45.32.235.173) (Ping timeout: 240 seconds)
[00:59:24] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Quit: ERC (IRC client for Emacs 27.1))
[00:59:29] <phoe> which sidesteps the need for an ENCLOSE
[00:59:49] <phoe> and for PARSE-MACRO as well (by reimplementing it)
[00:59:55] <Bike> it kind of is ENCLOSE.
[00:59:59] <phoe> yes
[01:00:25] <phoe> sweet gods, a portable ENCLOSE written in itself
[01:01:05] *** Quits: Guest4411 (~Guest44@95.175.104.156) (Ping timeout: 256 seconds)
[01:01:06] *** Quits: attila_lendvai (~alendvai@catv-89-132-245-188.catv.fixed.vodafone.hu) (Read error: Connection reset by peer)
[01:01:08] <Bike> i mean, it makes sense. if you have a code walker an evaluator isn't far off.
[01:01:18] <phoe> yes
[01:01:23] *** Quits: mfiano (~mfiano@cpe-67-240-71-179.nycap.res.rr.com) (Quit: WeeChat 3.4)
[01:01:32] *** Joins: attila_lendvai (~alendvai@catv-89-132-245-188.catv.fixed.vodafone.hu)
[01:02:02] <phoe> except this time you don't need to have an evaluator, you simply need to make sure that the macrolet bodies are possible to compile in a null lexenv
[01:02:24] <phoe> and you achieve that by macroexpand-all-ing their bodies in the current lexenv
[01:02:27] *** Joins: mfiano (~mfiano@cpe-67-240-71-179.nycap.res.rr.com)
[01:02:42] <phoe> and then augmenting the environment with the freshly compiled macroexpanders
[01:02:47] <AeroNotix> https://github.com/ghollisjr/cl-sdl2/blob/b49e55f0d0907305ae2c7a6845941480d8b83736/grovel.lisp#L19 I have the same form in my grovel file but I am getting an error, `Unknown Grovel syntax: CFFI-GROVEL::CTYPE`
[01:02:54] <phoe> ...and macroexpand-all-ing the macrolet body, in turn
[01:05:22] *** Quits: miique (~miiquemat@2001:470:69fc:105::1:6901) (Read error: Connection reset by peer)
[01:05:22] *** Quits: dieggsy (~dieggsy@2001:470:69fc:105::91f) (Read error: Connection reset by peer)
[01:05:23] *** Quits: katco (~katco@2001:470:69fc:105::2b8) (Read error: Connection reset by peer)
[01:05:23] *** Quits: luis` (~luismboma@2001:470:69fc:105::cc7) (Read error: Connection reset by peer)
[01:05:23] *** Quits: prov[m] (~provessor@2001:470:69fc:105::cfb) (Read error: Connection reset by peer)
[01:05:23] *** Quits: kakuhen (~kakuhen@user/kakuhen) (Read error: Connection reset by peer)
[01:05:23] *** Quits: Spawns_Carpet[m] (~inceptor-@2001:470:69fc:105::1:298b) (Read error: Connection reset by peer)
[01:05:24] *** Quits: sp (~sp@user/susam) (Write error: Connection reset by peer)
[01:05:24] *** Quits: Arcsech (~arcsechma@2001:470:69fc:105::1:797) (Remote host closed the connection)
[01:05:24] *** Quits: Duuqnd (~duuqnd@2001:470:69fc:105::e9c0) (Read error: Connection reset by peer)
[01:05:24] *** Quits: loke[m] (~loke@2001:470:69fc:105::237) (Read error: Connection reset by peer)
[01:05:24] *** Quits: Mrtn[m] (~mrtn@2001:470:69fc:105::1f44) (Read error: Connection reset by peer)
[01:05:24] *** Quits: seragold[m] (~seragoldm@2001:470:69fc:105::1:6b7f) (Write error: Connection reset by peer)
[01:05:24] *** Quits: saltrocklamp[m] (~hexology@user/hexology) (Write error: Connection reset by peer)
[01:05:24] *** Quits: edmrk[m] (~edmrkmatr@2001:470:69fc:105::1:5a63) (Read error: Connection reset by peer)
[01:05:24] *** Quits: char[m] (~charlesma@2001:470:69fc:105::1:7050) (Read error: Connection reset by peer)
[01:05:24] *** Quits: yitzi (~yitzi@2001:470:69fc:105::fafd) (Write error: Connection reset by peer)
[01:05:25] *** Quits: Gnuxie (~gnuxie@user/gnuxie) (Write error: Connection reset by peer)
[01:05:25] *** Quits: CodeBitCookie[m] (~code-bit-@2001:470:69fc:105::a2f) (Write error: Connection reset by peer)
[01:05:33] *** Joins: IPmonger (~IPmonger@c-69-242-83-226.hsd1.pa.comcast.net)
[01:05:34] <phoe> which, in turn, means that ENCLOSE, required for a full code walker, can be defined in terms of AUGMENT-ENVIRONMENT plus either EVAL or COMPILE plus (optionally) PARSE-MACRO plus a code walker
[01:05:48] *** Quits: IPmonger (~IPmonger@c-69-242-83-226.hsd1.pa.comcast.net) (Remote host closed the connection)
[01:06:06] * phoe is mind-blown
[01:06:31] *** Quits: Dynom (~niels@80-114-12-206.cable.dynamic.v4.ziggo.nl) (Quit: WeeChat 3.4)
[01:08:15] *** Quits: anticomputer (~anticompu@gateway/tor-sasl/anticomputer) (Remote host closed the connection)
[01:08:29] *** Joins: katco (~katco@2001:470:69fc:105::2b8)
[01:08:33] *** Joins: anticomputer (~anticompu@gateway/tor-sasl/anticomputer)
[01:14:03] <phoe> so all that's *really* needed is an implementation-defined AUGMENT-ENVIRONMENT plus a quasi-portable PARSE-MACRO
[01:14:17] *** Joins: luis` (~luismboma@2001:470:69fc:105::cc7)
[01:14:17] *** Joins: edmrk[m] (~edmrkmatr@2001:470:69fc:105::1:5a63)
[01:14:17] *** Joins: Mrtn[m] (~mrtn@2001:470:69fc:105::1f44)
[01:14:18] *** Joins: dieggsy (~dieggsy@2001:470:69fc:105::91f)
[01:14:18] *** Joins: akater[m] (~akatermat@2001:470:69fc:105::ccef)
[01:14:18] *** Joins: Gnuxie (~gnuxie@user/gnuxie)
[01:14:18] *** Joins: saltrocklamp[m] (~hexology@user/hexology)
[01:14:18] *** Joins: yitzi (~yitzi@2001:470:69fc:105::fafd)
[01:14:18] *** Joins: sp (~sp@user/susam)
[01:14:18] *** Joins: nworb (~zbrownm]@2001:470:69fc:105::1:33db)
[01:14:18] *** Joins: kakuhen (~kakuhen@user/kakuhen)
[01:14:18] *** Joins: Duuqnd (~duuqnd@2001:470:69fc:105::e9c0)
[01:14:18] *** Joins: CodeBitCookie[m] (~code-bit-@2001:470:69fc:105::a2f)
[01:14:19] *** Joins: Arcsech (~arcsechma@2001:470:69fc:105::1:797)
[01:14:19] *** Joins: loke[m] (~loke@2001:470:69fc:105::237)
[01:14:19] *** Joins: char[m] (~charlesma@2001:470:69fc:105::1:7050)
[01:14:34] *** Joins: seragold[m] (~seragoldm@2001:470:69fc:105::1:6b7f)
[01:14:51] *** Joins: Spawns_Carpet[m] (~inceptor-@2001:470:69fc:105::1:298b)
[01:14:51] *** Joins: zbrown[m] (~zbrownsys@2001:470:69fc:105::1:4e81)
[01:14:58] <Bike> phoe: the advantage of having this stuff available in the language is that the implemetnation necessarily has all of it, so exposing it reduces duplicate work
[01:15:00] *** Joins: semz (~semz@user/semz)
[01:15:19] <Bike> (i have written parse-macro before and it is kind of a pain in the ass)
[01:15:21] *** Joins: prov[m] (~provessor@2001:470:69fc:105::cfb)
[01:15:28] *** Joins: opalvaults[m] (~opalvault@2001:470:69fc:105::1:51f6)
[01:15:29] *** Joins: linjian (~linj@user/linj)
[01:15:29] *** Joins: miique (~miiquemat@2001:470:69fc:105::1:6901)
[01:15:47] <phoe> Bike: yes, naturally
[01:16:13] <phoe> I'm just looking for patching holes in implementations which don't expose some of this
[01:20:21] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 250 seconds)
[01:21:05] *** Joins: lisp123 (~lisp123@5.30.23.247)
[01:25:04] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[01:25:47] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 250 seconds)
[01:28:50] *** Joins: kevingal_ (~quassel@2a02:8084:4140:f300:c5ec:6f60:4f79:b00c)
[01:29:16] <phoe> Bike: this one? https://github.com/s-expressionists/Concrete-Syntax-Tree/blob/884a3ebdd288d7d9c24d55b4680086a88cb2dbc6/Destructuring/parse-macro.lisp
[01:29:24] <phoe> I think I remember it
[01:29:33] <Bike> uh, maybe. i kinda blocked out the memory.
[01:29:39] <phoe> ...no doubt
[01:29:56] <Bike> oh, yeah, it was me or at least i rewrote it. thanks blame.
[01:30:16] <Bike> "Handle destructuring &whole parameters", gotta get all those commonly used features
[01:32:49] *** Quits: Oddity (~Oddity@user/oddity) (Ping timeout: 256 seconds)
[01:33:40] *** Joins: alvaro121_ (~aa@201.230.126.66)
[01:33:49] *** Quits: pve (~pve@37-33-25-19.bb.dnainternet.fi) (Quit: leaving)
[01:34:45] *** Quits: alvaro121 (~aa@201.230.126.66) (Ping timeout: 256 seconds)
[01:38:16] *** Joins: gaqwas (~john@dynamic-095-117-041-063.95.117.pool.telefonica.de)
[01:41:22] *** Joins: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f)
[01:43:01] *** Quits: wacki (~wacki@87.122.81.161) (Quit: Leaving.)
[01:48:45] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 250 seconds)
[01:49:43] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[01:51:42] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[01:53:15] <opcode> i have an application i want to deploy to a server, and I would like to have a REPL running in it that I can connect to/detach from, a la that JPL satellite debugging story.  Is the canonical way to achieve this to embded a slynk/swank server?
[01:55:01] <Bike> you should be able to just load swank and start a server
[01:56:57] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 240 seconds)
[01:58:47] <opcode> that's what I meant, I think.  I was asking if swank is, uh, the most common way to do that, or if there's some other lib out there that all the leet haxors are using these days
[01:59:01] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[01:59:26] <Xach> opcode: starting in screen/tmux is not uncommon
[01:59:42] <Xach> and then you can start swank/slynk servers as well
[02:00:08] <opcode> ok thanks
[02:02:37] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 256 seconds)
[02:03:18] *** Joins: sheb_ (~sheb@31.223.228.71)
[02:04:08] *** Joins: aeth (~aeth@user/aeth)
[02:05:27] *** Quits: sheb (~sheb@31.223.228.71) (Ping timeout: 256 seconds)
[02:12:40] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[02:14:17] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 240 seconds)
[02:14:42] *** Quits: frgo (~frgo@p548a30d7.dip0.t-ipconnect.de) ()
[02:16:43] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[02:19:08] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca) (Remote host closed the connection)
[02:25:10] *** Quits: occ (~occ@user/occ) (Ping timeout: 250 seconds)
[02:27:07] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[02:30:27] *** Quits: azimut_ (~azimut@gateway/tor-sasl/azimut) (Ping timeout: 276 seconds)
[02:31:39] <Bike> uiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii]'
[02:31:45] <Bike> excuse me
[02:33:38] *** Quits: yewscion (~yewscion@72-21-196-66.amazon.com) (Ping timeout: 260 seconds)
[02:35:04] <phoe> is this what happens when someone replies to a clasp issue from five years ago
[02:37:46] <Bike> it's what happens when my cat decides he needs dinner early
[02:47:29] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[02:54:25] *** Quits: random-nick (~random-ni@87.116.167.125) (Ping timeout: 256 seconds)
[02:59:01] *** Quits: ogamita (~pjb@2a01:cb11:8036:90c2:c18:ddd:1a74:88e2) (Ping timeout: 240 seconds)
[03:00:15] <AeroNotix> opcode: ideally you shouldn't be starting stuff in screen/tmux
[03:00:25] <AeroNotix> unless you like jank
[03:01:05] <AeroNotix> opcode: it's best to make long-running servers start using the system's/distro init system
[03:01:07] <AeroNotix> e.g. systemd
[03:01:34] <Xach> AeroNotix: what is the connection between screen/tmux and jank?
[03:02:04] <AeroNotix> Xach: because it is generally a poor manager of long-running services.
[03:02:16] <Xach> AeroNotix: how so?
[03:02:18] <AeroNotix> tmux/screen aren't inherently _for_ doing that, it's just you can do that with them
[03:02:38] <mfiano> Umm
[03:02:39] <AeroNotix> there's nothing in screen/tmux that restart things, centralize logging, allow you to manage that service once you've started it within screen/tmux
[03:02:54] <Xach> Ok. Thanks for your perspective.
[03:03:17] <AeroNotix> by all means, do it, but there are far superior ways to do it
[03:03:25] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 240 seconds)
[03:04:00] <AeroNotix> writing a systemd unit is literally less work
[03:04:15] <AeroNotix> and you get a tonne of QOL and management features to boot
[03:04:18] <mfiano> Too many subjective adjectives for me.
[03:04:27] <AeroNotix> cool
[03:04:42] <AeroNotix> keep doing it, if you're doing it
[03:04:53] <AeroNotix> but if you suggested doing something like that in a professional setting, you'd be laughed out the room
[03:05:38] <opcode> AeroNotix: I'd much prefer to leverage systemd, but I also want to be able to connect to the running instance without porting my entire emacs config to the server
[03:05:49] <AeroNotix> opcode: you can still do that...
[03:06:05] <opcode> Yes
[03:06:08] <AeroNotix> emacs can connect to remote swank servers
[03:06:28] <mfiano> Luckily, FreeBSD doesn't have such monolithic software built from a corporate agenda
[03:06:32] <AeroNotix> and there's no link between systemd/swank, swank is started in your code. Nothing about _how_ it's started
[03:06:43] <AeroNotix> mfiano: oh true colours shown. ;)
[03:06:54] <AeroNotix> mfiano: it's a shame the systemd portion is what you focused on
[03:07:38] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[03:07:57] *** Joins: random-nick (~random-ni@87.116.167.125)
[03:08:27] <mfiano> I focused on the suggestion. Excuse me for dragging this discussion further off-topic.
[03:08:58] <AeroNotix> the suggestion is to avoid using tmux/screen for long-running services, an example of how _not_ to do that is to use systemd
[03:09:21] <AeroNotix> but by all means replace systemd with your init system of choice
[03:09:25] <moon-child> mfiano: did you see the freebsd port of launchd?
[03:09:43] *** Quits: mgl (~mgl@cpc87455-finc19-2-0-cust234.4-2.cable.virginm.net) (Ping timeout: 256 seconds)
[03:09:53] <mfiano> moon-child: No, that I even know what 'launchd' is though.
[03:10:04] <mfiano> not that*
[03:10:22] <AeroNotix> Apple's thing
[03:10:26] <AeroNotix> for service management
[03:10:27] <moon-child> apple init d, served as a model for systemd
[03:10:36] <moon-child> (just as apple's coreaudio served as a model for pulseaudio)
[03:10:37] <mfiano> That would explain why I wasn't aware.
[03:12:59] <AeroNotix> Hey there's some activity on SWIG to reintroduce the cffi output
[03:13:10] <AeroNotix> I've been hacking on some pieces which always annoyed me
[03:15:07] <AeroNotix> https://github.com/AeroNotix/swig/tree/generate-a-grovel-file
[03:15:13] <AeroNotix> here's my fork based on someone elses
[03:15:36] <AeroNotix> the tl;dr is that it'll spit out the missing pieces that you would otherwise need to manually create a grovel file for
[03:16:10] <AeroNotix> there's still more to be done but hope is that this could be upstreamed in swig and it could be a one and done mechanism to use foreign code
[03:16:29] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 250 seconds)
[03:16:32] <AeroNotix> I know there's shitloads of attempts to do this, but they all fizzle out due to the single-maintainer problem many CL things have
[03:16:47] <AeroNotix> having it in swig itself, might help
[03:17:29] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[03:17:49] <opcode> >and there's no link between systemd/swank, swank is started in your code. Nothing about _how_ it's started
[03:18:04] <AeroNotix> yeah
[03:18:08] <opcode> Yep understood.
[03:18:13] *** Quits: gaqwas (~john@dynamic-095-117-041-063.95.117.pool.telefonica.de) (Ping timeout: 250 seconds)
[03:18:34] <opcode> I was asking mostly about swank because I'm a newcomer to lisp but not to linux
[03:18:51] <AeroNotix> you start the swank server when your application starts
[03:19:00] <AeroNotix> in emacs you connect to that remote swank server
[03:19:09] <AeroNotix> then everything works as a local swank connection
[03:19:21] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[03:20:01] <AeroNotix> all you need is (swank:create-server) in your application code somewhere
[03:20:09] <AeroNotix> M-x slime-connect and provide it the host:port of the remote
[03:21:19] *** Joins: taiju (~user@240b:253:ec40:2400:b7d1:436e:2d61:e925)
[03:22:09] <opcode> Thanks.  Is there any significant reason to choose swank vs slynk?
[03:22:27] <AeroNotix> From me personally, no. I wasn't even aware of slynk until it was mentioned
[03:22:34] <opcode> K
[03:23:08] <Xach> I used slime for many years, but I like a lot of little features of sly and I've switched completely in the last year.
[03:23:12] *** Joins: lisp123 (~lisp123@5.30.23.247)
[03:23:23] <AeroNotix> is there a document describing the pros/cons?
[03:23:32] <Xach> I don't know.
[03:23:36] <AeroNotix> trying to find something on google.
[03:23:49] <AeroNotix> http://joaotavora.github.io/sly/#A-SLY-tour-for-SLIME-users maybe this
[03:27:45] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 250 seconds)
[03:41:27] *** Quits: random-nick (~random-ni@87.116.167.125) (Ping timeout: 256 seconds)
[03:50:02] *** Quits: attila_lendvai (~alendvai@catv-89-132-245-188.catv.fixed.vodafone.hu) (Ping timeout: 240 seconds)
[03:51:40] *** Joins: jeosol (~jeosol@user/jeosol)
[03:51:45] *** Joins: occ (~occ@user/occ)
[04:05:04] <AeroNotix> beach: has there been any work done on closos?
[04:05:07] *** Quits: kevingal_ (~quassel@2a02:8084:4140:f300:c5ec:6f60:4f79:b00c) (Read error: Connection reset by peer)
[04:07:20] <moon-child> AeroNotix: current work has focused on SICL; expect nothing to happen until that is bootstrapped
[04:07:26] <AeroNotix> ok
[04:07:44] <AeroNotix> assuming SICL will be the CL on which closos is implemented?
[04:08:03] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 250 seconds)
[04:08:07] <moon-child> yes
[04:09:56] *** Joins: waleee (~waleee@h-98-128-229-110.NA.cust.bahnhof.se)
[04:17:30] *** Quits: mfiano (~mfiano@cpe-67-240-71-179.nycap.res.rr.com) (Quit: WeeChat 3.4)
[04:19:20] *** Quits: cjb (~cjb@user/cjb) (Quit: rcirc on GNU Emacs 29.0.50)
[04:20:46] *** Joins: mfiano (~mfiano@cpe-67-240-71-179.nycap.res.rr.com)
[04:21:26] *** Joins: cjb (~cjb@user/cjb)
[04:24:37] *** Quits: Brucio-61 (~Brucio-61@ip-094-114-248-079.um31.pools.vodafone-ip.de) (Ping timeout: 240 seconds)
[04:25:46] *** Quits: scymtym (~user@ip-094-114-248-079.um31.pools.vodafone-ip.de) (Ping timeout: 245 seconds)
[04:27:43] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[04:33:27] *** Joins: triffid (~triffid@gateway/tor-sasl/triffid)
[04:40:57] *** Quits: m5zs7k (aquares@web10.mydevil.net) (Ping timeout: 256 seconds)
[04:41:30] *** Quits: waleee (~waleee@h-98-128-229-110.NA.cust.bahnhof.se) (Ping timeout: 260 seconds)
[04:41:36] *** Quits: morganw (~user@80.225.24.132) (Remote host closed the connection)
[04:42:18] *** Joins: sloanr (~user@70-59-77-137.mpls.qwest.net)
[04:44:55] *** Quits: OlCe (~user@amontsouris-156-1-23-81.w92-151.abo.wanadoo.fr) (Ping timeout: 256 seconds)
[04:46:27] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Remote host closed the connection)
[04:54:33] *** Quits: Bike (~Glossina@71.69.170.70) (Quit: Lost terminal)
[04:58:47] *** Joins: Bike (~Bike@71.69.170.70)
[05:04:31] *** Quits: occ (~occ@user/occ) (Ping timeout: 256 seconds)
[05:05:33] *** Joins: occ (~occ@user/occ)
[05:07:38] *** Joins: scymtym (~user@ip-094-114-248-079.um31.pools.vodafone-ip.de)
[05:08:35] *** Quits: patrice (~patrice@user/patrice) (Quit: Leaving)
[05:12:14] *** Quits: cjb (~cjb@user/cjb) (Quit: rcirc on GNU Emacs 29.0.50)
[05:20:45] *** Joins: s-liao (~s-liao@101.86.96.21)
[05:22:28] *** Quits: Catie (~user@user/catie) (Quit: going home)
[05:24:41] *** Joins: lisp123 (~lisp123@5.30.23.247)
[05:26:25] *** Joins: logand`` (~user@dynamic-089-012-091-073.89.12.pool.telefonica.de)
[05:27:57] *** Quits: logand` (~user@dynamic-089-012-107-168.89.12.pool.telefonica.de) (Ping timeout: 240 seconds)
[05:28:19] *** Quits: masinter (~masinter@c-73-158-116-21.hsd1.ca.comcast.net) (Ping timeout: 256 seconds)
[05:29:07] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 256 seconds)
[05:29:37] *** Joins: cjb (~cjb@user/cjb)
[05:32:31] *** Quits: neominimum (sid537410@user/neominimum) (Ping timeout: 256 seconds)
[05:32:33] *** Quits: alanz (sid110616@uxbridge.irccloud.com) (Ping timeout: 250 seconds)
[05:32:40] *** Joins: neominimum (sid537410@user/neominimum)
[05:32:48] *** Joins: alanz (sid110616@id-110616.uxbridge.irccloud.com)
[05:49:20] *** Joins: antonv (~antonv@46.53.242.120)
[05:49:48] <antonv> is it possible to programmatically find out whether asdf:test-op is defined for a given ASDF system?
[05:56:00] *** Joins: razetime (~quassel@49.207.209.26)
[05:56:17] *** Quits: hhdave (~hhdave@ip212.ip-193-70-71.eu) (Ping timeout: 240 seconds)
[05:56:23] *** Quits: Noisytoot (~noisytoot@sourcehut/user/noisytoot) (Ping timeout: 250 seconds)
[05:59:08] *** Joins: hhdave (~hhdave@ip212.ip-193-70-71.eu)
[05:59:30] *** Joins: masinter (~masinter@c-73-158-116-21.hsd1.ca.comcast.net)
[06:00:22] *** Joins: Noisytoot (~noisytoot@sourcehut/user/noisytoot)
[06:02:20] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca)
[06:11:03] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 256 seconds)
[06:15:11] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[06:16:08] *** Joins: akoana (~ah@user/akoana)
[06:18:45] *** Quits: occ (~occ@user/occ) (Ping timeout: 256 seconds)
[06:35:20] *** Joins: occ (~occ@user/occ)
[06:39:43] *** Quits: occ (~occ@user/occ) (Ping timeout: 256 seconds)
[06:43:21] *** Quits: antonv (~antonv@46.53.242.120) (Ping timeout: 256 seconds)
[07:04:32] *** Joins: Guest74 (~Guest74@modemcable110.164-177-173.mc.videotron.ca)
[07:09:02] *** Joins: m5zs7k (aquares@web10.mydevil.net)
[07:09:27] *** Quits: NotThatRPG (~NotThatRP@162-219-230-90.fttp.usinternet.com) (Quit: Textual IRC Client: www.textualapp.com)
[07:11:08] <etimmons> minion: memo for antonv: Probably (compute-applicable-methods #'asdf:perform (list (asdf:make-operation 'asdf:test-op) (asdf:find-system "foo")))
[07:11:08] <minion> Remembered. I'll tell antonv when he/she/it next speaks.
[07:12:15] *** Quits: terrorjack (~terrorjac@2a01:4f8:1c1e:509a::1) (Quit: The Lounge - https://thelounge.chat)
[07:13:08] *** Joins: terrorjack (~terrorjac@2a01:4f8:1c1e:509a::1)
[07:17:49] *** Quits: ecraven (~ecraven@user/nex) (Ping timeout: 240 seconds)
[07:19:00] *** Joins: ecraven (ecraven@user/nex)
[07:22:50] *** Joins: alvaro121 (~aa@201.230.126.66)
[07:23:25] *** Quits: alvaro121_ (~aa@201.230.126.66) (Ping timeout: 240 seconds)
[07:26:02] *** Joins: lisp123 (~lisp123@5.30.23.247)
[07:30:08] <beach> Good morning everyone!
[07:30:37] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 240 seconds)
[07:31:18] *** Quits: AeroNotix (~xeno@185.107.67.252) (Quit: WeeChat 3.4)
[07:31:20] <beach> AeroNotix: CLOSOS requires (among other things) first-class global environments, so SICL is currently the only alternative for its Common Lisp implementation.
[07:34:20] *** Quits: cjb (~cjb@user/cjb) (Quit: rcirc on GNU Emacs 29.0.50)
[07:35:44] <masinter> ls
[07:45:50] <moon-child> pwd
[07:45:58] *** Quits: unyu (~pyon@user/pyon) (Quit: WeeChat 3.4)
[07:47:07] *** Quits: jealousmonk (~user@user/jealousmonk) (Remote host closed the connection)
[07:47:44] *** Joins: unyu (~pyon@user/pyon)
[08:03:49] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[08:07:05] *** Quits: akoana (~ah@user/akoana) (Quit: leaving)
[08:10:36] *** Quits: mfiano (~mfiano@cpe-67-240-71-179.nycap.res.rr.com) (Quit: WeeChat 3.4)
[08:11:31] *** Joins: mfiano (~mfiano@cpe-67-240-71-179.nycap.res.rr.com)
[08:15:00] *** Quits: [w] (~w]@2601:8c1:80:70d0::4b06) (Quit: nyaa~)
[08:19:59] *** Joins: lisp123 (~lisp123@5.30.23.247)
[08:24:33] *** Joins: semz_ (~semz@user/semz)
[08:24:37] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 240 seconds)
[08:27:23] *** Quits: semz (~semz@user/semz) (Ping timeout: 256 seconds)
[08:27:29] *** Quits: Bike (~Bike@71.69.170.70) (Quit: Connection closed)
[08:31:05] *** Quits: unyu (~pyon@user/pyon) (Quit: brb)
[08:36:15] *** Joins: s-liao (~s-liao@101.86.96.21)
[08:39:09] *** Joins: occ (~occ@user/occ)
[08:59:38] *** Joins: wacki (~wacki@87.123.138.240)
[09:04:50] *** Joins: More_flat (~Duck@2405:201:3003:8024:348e:466c:a606:1eb8)
[09:12:02] *** Quits: More_flat (~Duck@2405:201:3003:8024:348e:466c:a606:1eb8) (Quit: Leaving)
[09:16:30] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca) (Remote host closed the connection)
[09:18:23] *** Joins: alvaro121_ (~aa@201.230.126.66)
[09:19:11] *** Quits: alvaro121 (~aa@201.230.126.66) (Ping timeout: 256 seconds)
[09:22:16] *** Quits: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f) (Quit: Leaving)
[09:23:31] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 250 seconds)
[09:23:57] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[09:27:31] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[09:27:34] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[09:32:12] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Remote host closed the connection)
[09:32:51] *** Joins: artchad (~user@public-gprs220372.centertel.pl)
[09:33:53] *** Joins: anticomputer_ (~anticompu@gateway/tor-sasl/anticomputer)
[09:34:34] *** Quits: sloanr (~user@70-59-77-137.mpls.qwest.net) (Ping timeout: 260 seconds)
[09:34:54] *** Quits: anticomputer (~anticompu@gateway/tor-sasl/anticomputer) (Ping timeout: 276 seconds)
[09:40:09] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[09:57:39] *** Joins: cosimone (~user@93-47-228-151.ip115.fastwebnet.it)
[09:58:30] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[09:59:43] *** Joins: Oddity (~Oddity@user/oddity)
[10:03:07] *** Joins: Jing (~hedgehog@240e:390:7c53:a7e1:2d5c:e7c5:18a:2cdc)
[10:11:47] *** Joins: Cymew (~ante@c-0c87225c.023-1144-7570702.bbcust.telenor.se)
[10:21:37] *** Joins: lisp123 (~lisp123@5.30.23.247)
[10:22:20] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[10:26:32] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 252 seconds)
[10:39:25] *** Quits: masinter (~masinter@c-73-158-116-21.hsd1.ca.comcast.net) (Ping timeout: 256 seconds)
[10:53:09] *** Joins: pillton (~user@58-6-230-13.tpgi.com.au)
[10:56:55] *** Quits: artchad (~user@public-gprs220372.centertel.pl) (Read error: Connection reset by peer)
[10:58:01] *** Quits: Krystof (~user@81.174.155.115) (Ping timeout: 256 seconds)
[11:07:14] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 252 seconds)
[11:09:12] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[11:10:36] *** Joins: karlosz (~karlosz@47.151.136.69)
[11:10:42] *** Quits: cosimone (~user@93-47-228-151.ip115.fastwebnet.it) (Remote host closed the connection)
[11:13:22] *** Quits: lottaquestions_ (~nick@2607:fa49:5041:a200:c011:d62d:2c14:89f2) (Remote host closed the connection)
[11:13:28] *** Joins: cosimone (~user@93-47-228-151.ip115.fastwebnet.it)
[11:13:47] *** Joins: lottaquestions_ (~nick@2607:fa49:5041:a200:78c8:bb9f:f5b1:85aa)
[11:14:59] *** Quits: karlosz (~karlosz@47.151.136.69) (Client Quit)
[11:18:54] *** Joins: gaqwas (~john@dynamic-095-118-081-067.95.118.pool.telefonica.de)
[11:25:58] *** Quits: szkl (uid110435@id-110435.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[11:27:31] *** Joins: shka (~herr@109.231.0.226)
[11:30:25] <qhong> is there a lock free queue?
[11:31:13] <moon-child> hmm, I don't know if there is one for cl, but https://liblfds.org/ could make a port
[11:33:32] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Client closed)
[11:33:34] <qhong> idk if ffi overhead will be smaller than just use a lock
[11:33:46] <moon-child> hence 'port'
[11:34:08] <moon-child> I didn't mean to suggest using ffi
[11:34:11] *** Quits: anticomputer_ (~anticompu@gateway/tor-sasl/anticomputer) (Remote host closed the connection)
[11:34:29] *** Joins: anticomputer (~anticompu@gateway/tor-sasl/anticomputer)
[11:36:01] *** Quits: Guest74 (~Guest74@modemcable110.164-177-173.mc.videotron.ca) (Quit: Ping timeout (120 seconds))
[11:37:37] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 240 seconds)
[11:37:39] *** Quits: Jing (~hedgehog@240e:390:7c53:a7e1:2d5c:e7c5:18a:2cdc) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[11:38:28] <qhong> or just http://www.cs.tau.ac.il/~mad/publications/ppopp2013-x86queues.pdf
[11:38:34] <flip214> lock-free means using atomic operations and retries, which will affect the CPU-buses nearly the same as using locks, so there might not be that much advantage
[11:39:26] <flip214> https://lwn.net/Articles/590243/ might be a good idea for multiple CPUs in multiple sockets, ie. when the communication overhead goes up
[11:39:50] *** Joins: aeth (~aeth@user/aeth)
[11:42:40] *** Joins: pve (~pve@87-93-170-72.bb.dnainternet.fi)
[11:43:49] *** Quits: amb007 (~a_bakic@102.215.76.86.rev.sfr.net) (Ping timeout: 240 seconds)
[11:44:21] *** Joins: amb007 (~a_bakic@76.133.22.93.rev.sfr.net)
[11:59:11] *** Joins: lisp123 (~lisp123@5.30.23.247)
[12:01:07] *** Joins: MajorBiscuit (~MajorBisc@c-001-001-054.client.tudelft.eduvpn.nl)
[12:01:09] <qhong> flip214: interesting, this looks promising, probably good to make a user-space mutex library
[12:03:20] <qhong> flip214: dedicated lock free data structure are still useful because they can avoid contention itself in many cases (different processor work on different part of the data structure). Now I think about it, ppl usually call them lock free, but one can probably do those dedicated data structures using just locks
[12:03:54] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 260 seconds)
[12:04:58] <qhong> but anyway, I just want to grab some existing working library and don't feel like writing one myself
[12:06:39] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[12:31:51] *** Quits: gaqwas (~john@dynamic-095-118-081-067.95.118.pool.telefonica.de) (Ping timeout: 256 seconds)
[12:32:39] *** Quits: mixfix41 (~sdenyninn@user/mixfix41) (Ping timeout: 256 seconds)
[12:33:51] <flip214> qhong: look at LPARALLEL or, if sbcl-specific is okay, sb-thread has queues as well
[12:35:23] <bollu> what's the common lisp equivalent of `set(xs)` in python?
[12:36:29] <jackdaniel> why do you assume that people know what is set(xs) in python?
[12:37:26] <bollu> jackdaniel fair point. it builds a set of elements from the sequence `xs`. In this case, let's suppose `xs` is a list for simplicity.
[12:37:35] <jackdaniel> list may be treated as a set, there are some built-in operators in common lisp that work on lists as if they were sets (like union or intersection)
[12:37:51] <bollu> jackdaniel I see. I wanted to remove duplicates
[12:38:02] <beach> clhs remove-duplicates
[12:38:02] <specbot> http://www.lispworks.com/reference/HyperSpec/Body/f_rm_dup.htm
[12:38:15] <jackdaniel> (defun set (sequence) (remove-duplicates sequence))
[12:38:28] <phoe> ;; (shadow 'set)
[12:38:41] <jackdaniel> right
[12:39:18] <jackdaniel> or: (union sequence sequence)
[12:39:43] *** Joins: rain3 (~rain3___@2a02:2f09:d113:6d00:6f23:fba2:d834:1a7)
[12:39:56] <moon-child> a 'set' in python is assumed to have linear lookup time, which a list does not
[12:40:01] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 256 seconds)
[12:40:11] <moon-child> moreover, semantically, a list with duplicate items functions as a perfectly good set
[12:40:23] <qhong> flip214: ha, the package is :sb-concurrency. Thanks! I didn’t expect to find them as sbcl built-ins. The algorithm is a bit old (2004) but should be better than nothing
[12:40:27] <jdz> moon-child: Did you mean "constant", not "linear"?
[12:40:32] <moon-child> err, yeah
[12:40:43] <moon-child> (well, might be log idk)
[12:41:02] <flip214> moon-child: then use (ale:alist-to-hash-table (mapcar #'cons seq seq))
[12:41:33] <flip214> sorry, alexandria:alist-to-hash-table.... <tab> doesn't autocomplete here ;/
[12:41:35] <bollu> I imagine remove-duplicates in O(n^2)?
[12:42:33] <jdz> bollu: How big are your "sets"?
[12:42:43] <moon-child> flip214: I would rather (mapcar #'cons seq '#1=(t . #1#))
[12:42:46] <flip214> bollu: no, not necessarily. an implementation can use a hash-table for improved lookup times.
[12:42:51] <beach> bollu: It cold be O(n) if the test is one that fits a hash table.
[12:42:57] <bollu> jdz I'm creating set to uniqify a large corpus to create the vocabulary
[12:43:05] <bollu> so n is quite large :)
[12:43:09] <jackdaniel> if the implementation uses a hash table then it is O(n)
[12:43:16] <bollu> jackdaniel right.
[12:43:19] <moon-child> jackdaniel: beach just said that :)
[12:43:32] <jackdaniel> I'm a slow sleep-deprived typer
[12:43:36] <jackdaniel> yes he did
[12:43:51] * moon-child also sleep-deprived, should probably go to sleep now buuuuut
[12:44:19] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[12:44:31] <flip214> bollu: but if you don't read your data into a list but a hash-table directly, you might still save some CPU
[12:44:39] <bollu> oh, right, I'm in the haskell mindset where I imagine that there's one implementation that needs to use the lowest common denominator available, which is to say, equality. But I imagine in the case of CL, the implementation can specialize in the case where the list is hashable?
[12:46:55] <jackdaniel> do you mean "where the set is represented as a hashtable"?
[12:47:11] <bollu> yes, that's what I meant
[12:59:47] *** Joins: ante_ (~ante@c-0c87225c.023-1144-7570702.bbcust.telenor.se)
[13:00:15] *** Joins: ogamita (~pjb@pop.92-184-124-124.mobile.abo.orange.fr)
[13:01:13] *** Quits: occ (~occ@user/occ) (Read error: Connection reset by peer)
[13:05:23] *** Quits: semz_ (~semz@user/semz) (Ping timeout: 250 seconds)
[13:06:42] *** Joins: kathe (~kathe@49.32.243.144)
[13:08:46] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Remote host closed the connection)
[13:09:04] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[13:09:48] *** Joins: semz (~semz@user/semz)
[13:10:35] <kathe> beach: is your license for second-climacs similar to bsd-like licenses?
[13:12:17] <kathe> beach: while it seems familiar, there's something regarding "copyrights" that seems different.
[13:12:52] *** Joins: s-liao (~s-liao@101.86.96.21)
[13:13:45] *** Joins: OlCe (~user@amontsouris-156-1-23-81.w92-151.abo.wanadoo.fr)
[13:14:37] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 240 seconds)
[13:17:05] <beach> I assume so, since it is in a file named LICENSE-BSD.
[13:19:47] <kathe> beach: i'm taking this off-channel. writing you a direct private email.
[13:20:00] <kathe> beach: hope you won't get pissed off.
[13:21:38] <kathe> beach: i'm definitely impressed with "sicl" as well as "second-climacs".
[13:22:55] <beach> Thanks.
[13:23:32] *** Joins: notzmv (~zmv@user/notzmv)
[13:36:03] *** Joins: foxfromabyss (~foxfromab@2a01:c23:5c39:8900:cd35:113c:ba08:618d)
[13:38:29] <foxfromabyss> How do I inspect a system to know what the package name is? I feel like the package i am trying to import has a different name than the system (and no alias to the system name)
[13:38:30] <foxfromabyss> Specifically this package https://github.com/mdbergmann/cl-gserver
[13:38:35] <foxfromabyss> *this system
[13:39:01] <beach> foxfromabyss: There can be several packages in a system.
[13:39:47] <beach> Or, rather, a system, when loaded, can create several packages, and their names are unrelated to the system.
[13:40:32] <beach> You just have to inspect the code and look for DEFPACKAGE forms, hoping the packages are defined that way.
[13:40:41] <phoe> and for DEFINE-PACKAGE
[13:40:58] <phoe> although it seems only the former is used here
[13:41:06] <beach> and make-package in that case.
[13:41:11] <beach> clhs make-package
[13:41:11] <specbot> http://www.lispworks.com/reference/HyperSpec/Body/f_mk_pkg.htm
[13:42:19] <foxfromabyss> I see, thanks a lot :)
[13:42:19] <foxfromabyss> first time seeing system name != package name
[13:45:30] *** Quits: ante_ (~ante@c-0c87225c.023-1144-7570702.bbcust.telenor.se) (Quit: Konversation terminated!)
[13:45:45] *** Joins: ante_ (~ante@c-0c87225c.023-1144-7570702.bbcust.telenor.se)
[13:45:55] *** Quits: ante_ (~ante@c-0c87225c.023-1144-7570702.bbcust.telenor.se) (Client Quit)
[13:46:43] <phoe> you'll see that much more often as you dig into Lisp code
[13:47:26] <phoe> in some cases (very simple systems, package-inferred systems) package names are string-equal to system names
[13:47:27] *** Quits: Cymew (~ante@c-0c87225c.023-1144-7570702.bbcust.telenor.se) (Ping timeout: 256 seconds)
[13:47:49] <phoe> in others (some one-package-per-file systems, some more complex systems) you will get multiple packages per system
[13:48:10] <phoe> (I have not seen many situations where you have multiple systems operating on a single package though)
[13:52:24] <foxfromabyss> interesting.. that makes sense, thanks!
[13:57:07] *** Joins: Guest4441 (~Guest44@95.175.104.156)
[14:00:37] *** Quits: OlCe (~user@amontsouris-156-1-23-81.w92-151.abo.wanadoo.fr) (Ping timeout: 240 seconds)
[14:00:56] *** Joins: lisp123 (~lisp123@5.30.23.247)
[14:01:24] <beach> phoe: That would be the typical library situation.  The library defines a package and client code uses symbols from that package.
[14:01:56] <phoe> beach: the client code usually defines its own packages in addition though
[14:02:06] <beach> Sure.
[14:02:06] <moon-child> depends on how you qualify 'operating on'
[14:02:19] <phoe> I thought more like a situation where the total number of defined packages is smaller than the total number of defined systems
[14:02:23] *** Quits: pillton (~user@58-6-230-13.tpgi.com.au) (Remote host closed the connection)
[14:02:34] <beach> Ah, that's different.  Sure.
[14:03:44] <phoe> and usually this is because operating inside a package that you haven't defined yourself violates modularity
[14:05:55] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 256 seconds)
[14:06:30] <phoe> like, I could have implemented all of https://github.com/phoe/quicklisp-quackload/blob/master/quicklisp-quackload.lisp inside package QUICKLISP
[14:06:39] <phoe> but that would be very bad style
[14:07:50] <phoe> instead I do all the work in my own package and only hack a single symbol into package QUICKLISP - which still is bad style, but much less of a danger when it comes to clobbering some existing definitions
[14:11:57] *** Joins: treflip (~user@user/treflip)
[14:13:00] <phoe> if I operated in the same package, I would need to worry that there is no class named QUICKLISP:QUACK-STREAM and no function named QUICKLISP:WRITE-QUACK - probably very unlikely in this concrete case, but hey, it's possbile in the general case
[14:13:39] <phoe> and this danger only grows and grows the more stuff you define
[14:19:13] <phoe> but yeah, Common Lisp makes it possible to easily patch other people's code, and you'd better know what you're doing if you decide to do that
[14:24:15] *** Quits: taiju (~user@240b:253:ec40:2400:b7d1:436e:2d61:e925) (Ping timeout: 250 seconds)
[14:27:43] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 250 seconds)
[14:29:06] *** Joins: OlCe` (~user@amontsouris-156-1-23-81.w92-151.abo.wanadoo.fr)
[14:29:35] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[14:31:00] *** Quits: OlCe` (~user@amontsouris-156-1-23-81.w92-151.abo.wanadoo.fr) (Remote host closed the connection)
[14:31:46] *** Joins: OlCe (~user@amontsouris-156-1-23-81.w92-151.abo.wanadoo.fr)
[14:33:29] *** Quits: amb007 (~a_bakic@76.133.22.93.rev.sfr.net) (Ping timeout: 252 seconds)
[14:33:58] *** Joins: amb007 (~a_bakic@86.37.22.93.rev.sfr.net)
[14:37:21] *** Joins: Brucio-61 (~Brucio-61@ip-094-114-248-079.um31.pools.vodafone-ip.de)
[14:46:10] *** Joins: artchad (~user@public-gprs220372.centertel.pl)
[14:50:57] *** Quits: rain3 (~rain3___@2a02:2f09:d113:6d00:6f23:fba2:d834:1a7) (Ping timeout: 240 seconds)
[14:55:10] *** Joins: rain3 (~rain3___@2a02:2f09:d113:6d00:6f23:fba2:d834:1a7)
[14:56:18] *** Joins: nature (~nature@45.32.235.173)
[14:56:51] *** Joins: Krystof (~user@81.174.155.115)
[15:00:58] *** Quits: kathe (~kathe@49.32.243.144) (Quit: Leaving)
[15:02:49] *** Joins: unyu (~pyon@user/pyon)
[15:06:08] *** Quits: unyu (~pyon@user/pyon) (Client Quit)
[15:09:22] *** Quits: sheb_ (~sheb@31.223.228.71) (Quit: Leaving)
[15:17:46] *** Joins: Jing (~hedgehog@240e:390:7c53:a7e1:7c1f:c247:2b7b:d046)
[15:20:20] *** Joins: attila_lendvai (~alendvai@catv-89-132-245-188.catv.fixed.vodafone.hu)
[15:23:42] *** Joins: random-nick (~random-ni@87.116.167.125)
[15:27:45] *** Joins: kathe (~kathe@49.32.224.62)
[15:36:58] <foxfromabyss> does `list` "snapshot"(copy?) current values of the variables it encapsulates, instead of just containing a reference?
[15:37:27] <phoe> LIST is like any other function
[15:38:41] <foxfromabyss> i.e. `(let ((x 5) (y (list x) (print x) (setf x 6) (print (first y))` would output `5` and then `5` again?
[15:38:52] <foxfromabyss> what do you mean by "like any other function"? :)
[15:39:13] <phoe> when a function is called, its arguments are evaluated
[15:39:22] <phoe> then the function is called with these values
[15:39:34] <foxfromabyss> i am mostly referring to "copy value" vs "copy reference"
[15:39:35] <foxfromabyss> i see
[15:39:37] <phoe> it doesn't matter if it's LIST or not
[15:39:39] <phoe> oh, that thing
[15:39:45] <phoe> beach calls this "uniform reference semantics"
[15:39:46] <foxfromabyss> yeye
[15:39:53] <phoe> http://metamodular.com/common-lisp-semantics.html
[15:40:10] <phoe> Lisp is call-by-value everywhere, except the values that are copied around are references
[15:40:19] <phoe> so there is no clear mapping to e.g. C++ semantics
[15:40:52] <phoe> Wikipedia calls it "call by sharing"
[15:40:54] <phoe> https://en.wikipedia.org/wiki/Evaluation_strategy#Call_by_sharing
[15:41:03] <phoe> and it also notes that the term is not in wide use and is complicated
[15:41:38] <foxfromabyss> guessed as much :P
[15:41:38] <foxfromabyss> i see.
[15:41:39] <foxfromabyss> does this mean that there's no clean way to backpropagate a change in a variable to the change in the list somewhere?
[15:41:56] <phoe> you cannot mutate a lexical variable from outside the scope it is defined in
[15:42:02] <phoe> ;; the only exception is a closure
[15:42:17] <phoe> this also means that assignment operators like SETF need to be macros
[15:42:26] <phoe> rather than functions
[15:42:31] <foxfromabyss> gotcha :)
[15:42:38] <foxfromabyss> still not 100% sure, what should be a macro and what a function tbh
[15:42:51] <phoe> everything should be a function
[15:42:58] <phoe> with the exception of things that cannot or should not be a function
[15:43:05] <foxfromabyss> a clever take!
[15:43:12] <phoe> where "cannot" means because they cannot implement the necessary semantics otherwise
[15:43:39] <phoe> and where "should not" means because the result would be syntactically ugly or complex
[15:44:31] *** Quits: igemnace (~ian@user/igemnace) (Ping timeout: 256 seconds)
[15:44:45] <foxfromabyss> gotcha gotcha :)  thanks a lot!
[15:50:43] <beach> It is amazing to me how languages with exceedingly complicated semantics have been allowed to brainwash many generations of developers.  Lisp semantics was simple from the start and still is.
[15:53:54] <moon-child> phoe: I don't think (with-open-file '(...) (lambda (fp) ...)) is ugly per se, when compared with (with-open-file (fp ...) ...)
[15:54:21] <moon-child> however it is still a meaningful abstraction, and notably it is a syntactic one
[15:56:47] <phoe> moon-child: what is '(...) ?
[15:56:56] *** Joins: taiju (~user@M014013236064.v4.enabler.ne.jp)
[15:56:56] *** Quits: taiju (~user@M014013236064.v4.enabler.ne.jp) (Remote host closed the connection)
[15:57:08] <moon-child> e.g. "something.txt" :direction :input
[15:57:20] <phoe> oh, so the argument list
[15:57:34] <phoe> the main issue is that it needs to be evaluated and consed
[15:57:43] <phoe> there's a slightly better approach for WITH macros
[15:57:47] <moon-child> not if it's a literal
[15:57:52] <moon-child> which it was there--hence the quote
[15:58:24] <phoe> there's a slightly better approach for WITH macros - (call-with-open-file thunk #p"something.txt" :direction :output ...)
[15:58:27] *** Quits: OlCe (~user@amontsouris-156-1-23-81.w92-151.abo.wanadoo.fr) (Ping timeout: 256 seconds)
[15:58:55] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 256 seconds)
[15:59:00] <phoe> this way (defun call-with-open-file (thunk pathname &rest args &key direction ...) ...) can use &key
[15:59:10] <moon-child> ah sure
[15:59:29] <phoe> and many WITH macros are actually implemented as a thin layer over a matching CALL-WITH function where the macro body goes into a lambda body
[15:59:32] <moon-child> (though--if you're just gonna apply OPEN to the result, you don't actually wanna parse the key args.  This came up recently)
[15:59:48] <phoe> yes, you can just (apply #'open pathname args) :D
[15:59:58] <phoe> hence my &rest args up there
[16:00:50] <phoe> the &key direction ... is there for slime syntax hints and such
[16:02:25] *** Joins: lisp123 (~lisp123@5.30.23.247)
[16:03:02] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[16:03:59] *** Joins: igemnace (~ian@user/igemnace)
[16:04:39] *** Joins: silasfox (~sbv@p200300cec71d940048da71ab771d9e03.dip0.t-ipconnect.de)
[16:07:05] *** Joins: mixfix41 (~sdenyninn@user/mixfix41)
[16:07:11] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 250 seconds)
[16:13:05] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca)
[16:15:07] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[16:17:57] *** Joins: unyu (~pyon@user/pyon)
[16:19:51] *** Joins: Bike (~Glossina@71.69.170.70)
[16:34:56] *** Joins: OlCe (~user@amontsouris-156-1-23-81.w92-151.abo.wanadoo.fr)
[16:40:38] *** Quits: silasfox (~sbv@p200300cec71d940048da71ab771d9e03.dip0.t-ipconnect.de) (Quit: WeeChat 3.4)
[16:49:57] *** Quits: rain3 (~rain3___@2a02:2f09:d113:6d00:6f23:fba2:d834:1a7) (Ping timeout: 240 seconds)
[16:55:24] *** Joins: Cymew (~ante@c-0c87225c.023-1144-7570702.bbcust.telenor.se)
[16:58:24] *** Quits: kathe (~kathe@49.32.224.62) (Quit: Leaving)
[17:03:38] *** Joins: silasfox (~sbv@p200300cec71d940048da71ab771d9e03.dip0.t-ipconnect.de)
[17:12:48] *** Joins: taiju (~user@240b:253:ec40:2400:b7d1:436e:2d61:e925)
[17:14:59] *** Joins: occ (~occ@user/occ)
[17:16:51] *** Joins: rain3 (~rain3___@2a02:2f09:d103:6400:778f:987:8477:e76d)
[17:17:41] *** Quits: OlCe (~user@amontsouris-156-1-23-81.w92-151.abo.wanadoo.fr) (Ping timeout: 256 seconds)
[17:24:23] *** Parts: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1) (Error from remote client)
[17:26:01] *** Joins: s-liao (~s-liao@101.86.96.21)
[17:33:26] *** Joins: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1)
[17:34:27] *** Quits: foxfromabyss (~foxfromab@2a01:c23:5c39:8900:cd35:113c:ba08:618d) (Ping timeout: 256 seconds)
[17:53:59] *** Joins: OlCe (~user@amontsouris-156-1-23-81.w92-151.abo.wanadoo.fr)
[17:58:19] *** Quits: OlCe (~user@amontsouris-156-1-23-81.w92-151.abo.wanadoo.fr) (Ping timeout: 250 seconds)
[18:04:08] *** Joins: lisp123 (~lisp123@5.30.23.247)
[18:06:06] <lagash> beach: what "mainstream" language would you say has the ugliest semantics?
[18:07:47] <beach> lagash: There are many recent languages I haven't studied, so I don't know about those, but C++ definitely comes to mind.
[18:08:37] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 240 seconds)
[18:08:45] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Client closed)
[18:09:45] <lagash> I was going to guess C++, yeah *shudders*
[18:12:36] <beach> They kind of didn't have a choice though.
[18:13:02] <beach> Once you decide that you don't want automatic memory management, pretty much all the other semantic decisions follow.
[18:16:49] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca) (Remote host closed the connection)
[18:17:31] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[18:24:19] *** Quits: attila_lendvai (~alendvai@catv-89-132-245-188.catv.fixed.vodafone.hu) (Ping timeout: 256 seconds)
[18:31:17] *** Quits: Rue (~rue@2001-b011-1000-1a29-7937-e51c-8a8a-ea67.dynamic-ip6.hinet.net) (Quit: WeeChat 3.4)
[18:38:16] *** Joins: Guest74 (~Guest74@modemcable110.164-177-173.mc.videotron.ca)
[18:43:09] *** Joins: kathe (~kathe@49.32.142.41)
[18:44:10] *** Quits: santiagopim (~user@44.pool90-167-219.static.orange.es) (Remote host closed the connection)
[18:44:30] *** Quits: silasfox (~sbv@p200300cec71d940048da71ab771d9e03.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[18:46:20] *** Joins: silasfox (~sbv@p4fe8dc32.dip0.t-ipconnect.de)
[18:46:55] *** Joins: lisp123 (~lisp123@5.30.23.247)
[18:49:10] *** Joins: jealousmonk (~user@user/jealousmonk)
[18:49:26] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Remote host closed the connection)
[18:50:49] <Guest74> If I'm waiting for events from the kernel, what function do I use to detect if there's any bytes waiting?  LISTEN seems to imply it's for character streams.
[18:51:39] *** Joins: OlCe (~user@amontsouris-156-1-23-81.w92-151.abo.wanadoo.fr)
[18:51:55] <Xach> Guest74: there is not a standard function in CL for that.
[18:52:23] <Bike> if you're "waiting on events from the kernel" you're presumably using some library, right? it probably has polling systems
[18:52:26] <Guest74> hmm, well, that's a bummer.
[18:52:29] <Xach> I think there are a handful of libraries that may offer some compatibility layer for doing that.
[18:52:48] <Xach> When I needed it (a long time ago) I wrote some sb-alien for epoll functions, it was a very small amount of code.
[18:53:03] <Guest74> bike: no, just using cl.
[18:53:05] <Xach> If I were doing it today I'd spend some time looking for a library.
[18:53:25] <Bike> CL doesn't have a concept of kernels or events. what are you doing?
[18:53:51] <Guest74> I heard some talk about epoll, select that I didn't pay attention to.  Is there something that people have landed on?  I know some people here have worked on eventing systems.
[18:54:09] <Guest74> bike: getting events from the linux kernel.
[18:54:38] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[18:54:53] <Guest74> i.e. reading from /dev/input/eventN
[18:54:55] <Xach> I remember liking the description of https://github.com/markcox80/basic-binary-ipc - I think I'd start there if starting today. There are other options I'm sure.
[18:55:16] <Bike> through a file. okay.
[18:55:57] *** Quits: OlCe (~user@amontsouris-156-1-23-81.w92-151.abo.wanadoo.fr) (Ping timeout: 250 seconds)
[18:56:37] *** Quits: Cymew (~ante@c-0c87225c.023-1144-7570702.bbcust.telenor.se) (Ping timeout: 240 seconds)
[18:56:40] <Guest74> I figure go with the basics and see if there's any trouble before being forced into some ffi ugliness.
[18:57:14] <Xach> There is no built-in way to do it. Implementations may or may not provide it as an extension. They are doing the ffi ugliness so you don't have to.
[18:58:05] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[18:58:28] <Guest74> basic-binary-ipc doesn't seem to work on /dev
[18:59:18] <Guest74> xach: I'd rather use what an implementation has implemented than use an outside foreign library.
[19:00:12] *** Joins: AeroNotix (~xeno@185.107.67.252)
[19:00:17] *** Joins: yewscion (~yewscion@52.94.133.128)
[19:00:28] <AeroNotix> https://gist.github.com/AeroNotix/fb17ede777893580b3d63f777578f08d weeeeeeeeeeeeee
[19:00:39] <AeroNotix> stupid "benchmark" but proves the theory
[19:01:01] <AeroNotix> ffi bindings to io_uring for CL
[19:01:14] <AeroNotix>  
[19:01:22] <AeroNotix> https://github.com/AeroNotix/cl-iouring
[19:01:53] <kathe> beach: why did you choose bsd-license for "sicl"?
[19:02:11] <kathe> beach: i've got nothing against it. just curious.
[19:03:06] <phoe> AeroNotix: nice
[19:03:20] <AeroNotix> next is to make it all nice n lispy
[19:07:12] *** Joins: foxfromabyss (~foxfromab@2a01:c23:5c39:8900:cd35:113c:ba08:618d)
[19:07:28] <beach> kathe: I did not choose a GPL derivative because it is not well adapted to language processors.  The choice between BSD, MIT and similar ones was a tossup.
[19:08:23] <kathe> beach: got it. thanks.
[19:09:11] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[19:11:01] <White_Flame> also consider that while gcc is GPL, the runtime library portion of it had to have an exception for it.  That situation gets even weirder in image-based languages
[19:11:41] <beach> Yeah.
[19:11:57] <AeroNotix> everything should just be public domain
[19:13:05] <beach> And, as much as I am saddened by it, many people don't like GPL derivatives, and that includes Lispers.  I do plan to use GPL for applications like Clovetree (Gsharp v2).
[19:13:36] <AeroNotix> https://gsharp.common-lisp.dev/ this?
[19:13:37] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 256 seconds)
[19:13:44] <White_Flame> lots of people are looking for "commercial use verboten" licenses nowadays, and that's very underserved
[19:14:31] <beach> AeroNotix: That's version 1, yes.  But version 2 is planned, but stalled because I am very busy.
[19:14:44] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[19:14:44] <AeroNotix> yeah I get that that is version 1
[19:15:41] <beach> White_Flame: I have nothing against commercial use of my stuff.  I would mind very much if my stuff were incorporated in some non-free larger system.
[19:16:20] <beach> But again, it gets very complicated with language processors, and, as you pointed out, even more so with image--based languages.
[19:16:32] <White_Flame> then you should probably use AGPL as everything turns into "services" where backend non-free use would not violate the GPL
[19:16:51] <White_Flame> (for stuff like gsharp)
[19:17:09] <beach> I'll consider that when it becomes urgent.
[19:18:51] <beach> AeroNotix: Since I wrote Gsharp, the technology for displaying music material has vastly improved and I no longer need all the font stuff I had to create at the time.  Plus, I made a few design mistakes that I want to fix.
[19:19:18] <Guest74> We're currently seeing a lot of problems with large corporations with lots of revenue using free software developers as their unpaid workers.  I don't see the point in supporting people who don't contribute to the community.l
[19:19:50] <beach> AeroNotix: The other thing is that display resolution has improved a lot, making some of the anti-aliasing compromises I did no longer required.
[19:20:19] <phoe> no need to anti-alias anymore because the screen resolution got so good, eh
[19:20:39] <beach> Pretty much, yes.
[19:20:45] <White_Flame> please no :(
[19:21:05] <beach> I will do *some*, but not all the tricks I had to play with Gsharp.
[19:21:09] <White_Flame> that'd be a per-display tuning if you know it's high dpi
[19:21:44] <beach> By the time I am done with Clovetree, all displays will be high resolution. :)
[19:21:55] <White_Flame> all _new_ displays maybe
[19:22:11] <White_Flame> but stilll, I'm on 27" 4k, and good AA is still important
[19:22:21] <beach> All old ones will have broken, or become so energy inefficient that they should be replaced anyway.
[19:23:24] *** Joins: frgo (~frgo@p548a30d7.dip0.t-ipconnect.de)
[19:23:47] <beach> White_Flame: I still plan to do gray-scale anti-aliasing, but for Gsharp, I had to limit the possible staff sizes so that there would be an integer number of scan lines between two staff lines always.
[19:24:18] <beach> Many such decisions are no longer required.
[19:24:43] <White_Flame> eh, that would still be quite noticeable
[19:25:13] <beach> Also, I was limited by X11 not having transparency, so I had to create lots of combined fonts rather than just drawing things on top of others.
[19:25:49] <Guest74> If you do that then you run into the Word problem, where what you display is not what comes out printed.  Which would seem detrimental to music layout.
[19:26:16] <beach> I could not draw a filled notehead above another filled notehead, because they would overlap and the result was incorrect.
[19:26:26] <White_Flame> hmm, a C natural and D double-flat in the same chord? https://gsharp.common-lisp.dev/clusters.png
[19:26:39] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca)
[19:26:56] *** Quits: kathe (~kathe@49.32.142.41) (Quit: Leaving)
[19:27:04] <White_Flame> does that just mean 2 fingers on 1 key? ;)
[19:27:25] <beach> Guest74: That's not a bit problem with music, because it is possible to move things horizontally by half a pixel without it being noticed.
[19:28:02] <White_Flame> yeah, it's the regularity of the staff lines that would be most noticeable if they were distributed unevenly across pixel rows
[19:28:07] <White_Flame> the horizontal not as much
[19:28:23] <beach> White_Flame: That screenshot just illustrates layout of alterations.
[19:28:36] <White_Flame> I know, just a funny chord
[19:28:39] <beach> Sure.
[19:28:58] <White_Flame> oh and I guess the 2nd one has E sharp and F natural, too
[19:29:25] <White_Flame> can't not point it out ;)
[19:29:38] <beach> Thanks. :)
[19:30:34] <beach> s/bit problem/big problem/
[19:31:20] *** Joins: lisp123 (~lisp123@5.30.23.247)
[19:34:16] <beach> So one restriction was that the space between two staff lines had to be an even number of pixels when the staff line thickness is an odd number of pixels (say 1), so that noteheads on a staff line and noteheads between staff lines looked the same.  Stuff like that is no longer necessary because of automatic anti-aliasing, and the use of alpha channels.
[19:35:09] <beach> But I agree that it might be good to have staff lines be an integer number of pixels thick and also aligned to the pixel grid.
[19:35:45] <Guest74> are you planning on using a glyph atlas from the render extension?  Or some higher level abstraction?
[19:36:28] <beach> I am using McCLIM, so we have backends that can use the render extension of X11.
[19:36:42] <beach> But I believe we do our own rendering.
[19:37:28] <beach> To squeeze as much material possible into a screen at the time, I had to have a font with only 6 pixels between two adjacent staff lines.  That might be exaggerated today, and it introduced all those constraints on the fonts.
[19:38:55] <White_Flame> re staff lines, if the thickness of the lines gets >2px, then you can probably just free place & antialias them
[19:39:03] <beach> There is a new standard for music fonts with lots of information on how glyphs fit together, and there is a new free font that is very complete and that respects that standard.
[19:39:25] <beach> White_Flame: Yeah, that sounds right.
[19:39:34] <beach> But not less.
[19:42:25] <beach> One thing I want to keep from Gsharp and that many existing score editors do wrong is to enforce the duration of bars.  Some classical music does not respect this restriction in the notation, and it is horribly inconvenient during editing.
[19:42:42] <beach> So Gsharp does not enforce any such duration.
[19:42:52] <beach> It makes editing *much* more convenient.
[19:43:14] <beach> Hmm, that came out wrong.
[19:43:39] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[19:43:41] <beach> Existing score editors enforce, and that's a bad idea.  Gsharp does not enforce and it makes editing much easier.
[19:43:56] <Guest74> it's been a long time since I used one, but i remember some having problems with multiple time changes as well.
[19:44:08] <beach> I can imagine.
[19:45:02] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[19:45:11] <beach> Oh, and the reference I used for layout is by Ross.  Now there is a much more complete book entitled "Behind bars".
[19:45:34] <beach> So there are now lots and lots of algorithms and heuristics to implement. :)
[19:46:03] *** Quits: scymtym (~user@ip-094-114-248-079.um31.pools.vodafone-ip.de) (Remote host closed the connection)
[19:46:13] *** Joins: OlCe (~user@amontsouris-156-1-23-81.w92-151.abo.wanadoo.fr)
[19:46:50] <beach> And the new name is "Clovetree", because it contains "Cl", and  it fits with the tradition: Rosegarden, LilyPond.
[19:52:51] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Quit: WeeChat 3.4)
[19:55:28] *** Quits: razetime (~quassel@49.207.209.26) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[19:58:12] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[20:00:05] *** Quits: Brucio-61 (~Brucio-61@ip-094-114-248-079.um31.pools.vodafone-ip.de) (Ping timeout: 256 seconds)
[20:03:16] *** Joins: Rue (~rue@2001-b011-1000-1a29-7937-e51c-8a8a-ea67.dynamic-ip6.hinet.net)
[20:11:25] *** Joins: masinter (~masinter@c-73-158-116-21.hsd1.ca.comcast.net)
[20:13:22] <cosimone> hello, i have a question: just how close is the hyperspec to the cl standard?  i seem to recall having read somewhere that it was generated directly from the standard, but i could be mistaken
[20:13:45] <beach> It was generated from the dpANS.
[20:14:02] <beach> Which we have been told has only cosmetic differences with the standard.
[20:14:12] <beach> But, the translation to HTML introduced mistakes.
[20:15:04] <beach> Actually, maybe he got dispensation and could use the final standard?
[20:15:13] <beach> I forget now.  scymtym will know.
[20:16:13] <beach> Shinmera: Forgot to tell you.  We both plan to go to ELS, barring COVID-related problems of course.
[20:17:12] <beach> cosimone: scymtym did a presentation for the online Lisp meeting about it recently.  You should be able to find the video online.
[20:19:00] *** Joins: scymtym (~user@2001:638:504:20e6:6ac3:87e0:e782:f3fc)
[20:22:32] *** Quits: z3t0 (~z3t0@146.71.14.98) (Read error: Connection reset by peer)
[20:24:28] <Shinmera> beach: great!
[20:26:58] <cosimone> beach: oh, that's good to know, i'll try looking for it
[20:27:26] <scymtym> cosimone: https://www.youtube.com/watch?v=aZn8dKmXbOw
[20:27:43] <phoe> Is it possible for an implementation to have only arrays that are actually adjustable?
[20:28:09] <beach> Yes.
[20:28:24] <cosimone> scymtym: thanks, downloading right now
[20:28:33] <phoe> beach: thanks
[20:28:55] <beach> Sure.  The phrasing of the standard is a bit strange.
[20:29:17] <beach> ... it is easy to (incorrectly) turn the implication arrow around.
[20:32:39] *** Quits: ogamita (~pjb@pop.92-184-124-124.mobile.abo.orange.fr) (Read error: Connection reset by peer)
[20:36:55] *** Quits: nature (~nature@45.32.235.173) (Ping timeout: 256 seconds)
[20:45:30] *** Joins: lisp123 (~lisp123@5.30.23.247)
[20:45:57] *** Quits: unyu (~pyon@user/pyon) (Ping timeout: 240 seconds)
[20:48:12] *** Joins: unyu (~pyon@user/pyon)
[20:50:17] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 256 seconds)
[20:56:14] *** Joins: cage (~cage@94-39-220-187.adsl-ull.clienti.tiscali.it)
[20:59:56] *** Joins: attila_lendvai (~alendvai@2a02:ab88:3710:7c80:9130:5abf:96b3:dc0c)
[21:04:58] *** Joins: sloanr (~user@70-59-77-137.mpls.qwest.net)
[21:05:15] *** Quits: Guest4441 (~Guest44@95.175.104.156) (Ping timeout: 256 seconds)
[21:13:35] *** Joins: nature (~nature@45.32.235.173)
[21:15:01] *** Quits: Jing (~hedgehog@240e:390:7c53:a7e1:7c1f:c247:2b7b:d046) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[21:16:29] *** Joins: Brucio-61 (~Brucio-61@2001:638:504:20e6:6ac3:87e0:e782:f3fc)
[21:19:35] *** Quits: Guest74 (~Guest74@modemcable110.164-177-173.mc.videotron.ca) (Quit: Connection closed)
[21:22:32] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[21:25:24] *** Joins: alejandrozf (~user@190.191.153.68)
[21:30:00] *** Quits: ns12 (~ns12@user/ns12) (Quit: bye)
[21:30:55] *** Joins: ns12 (~ns12@user/ns12)
[21:34:10] *** Joins: Catie (~user@user/catie)
[21:34:37] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[21:36:57] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[21:46:57] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[21:47:42] *** Quits: amb007 (~a_bakic@86.37.22.93.rev.sfr.net) (Ping timeout: 260 seconds)
[21:49:10] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[21:54:19] *** Quits: MajorBiscuit (~MajorBisc@c-001-001-054.client.tudelft.eduvpn.nl) (Ping timeout: 256 seconds)
[21:57:01] *** Quits: OlCe (~user@amontsouris-156-1-23-81.w92-151.abo.wanadoo.fr) (Ping timeout: 245 seconds)
[22:04:49] * phoe gets bitten by (subseq '(1 2 3 . 4) 0 3) being illegal
[22:08:47] *** Quits: rain3 (~rain3___@2a02:2f09:d103:6400:778f:987:8477:e76d) (Ping timeout: 250 seconds)
[22:15:06] *** Quits: cosimone (~user@93-47-228-151.ip115.fastwebnet.it) (Remote host closed the connection)
[22:15:37] <AeroNotix> straz miejska en route
[22:23:32] *** Quits: Brucio-61 (~Brucio-61@2001:638:504:20e6:6ac3:87e0:e782:f3fc) (Quit: Testing)
[22:24:36] * phoe runs
[22:29:24] *** Joins: amb007 (~a_bakic@102.215.76.86.rev.sfr.net)
[22:32:32] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 252 seconds)
[22:33:39] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 256 seconds)
[22:34:05] *** Joins: aeth (~aeth@user/aeth)
[22:34:53] *** Quits: treflip (~user@user/treflip) (Quit: good night)
[22:37:46] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[22:39:20] *** Joins: Guest4434 (~Guest44@95.175.104.156)
[22:39:21] *** Joins: Brucio-61 (~Brucio-61@2001:638:504:20e6:6ac3:87e0:e782:f3fc)
[22:44:16] *** Joins: Oladon (~olad@98.43.81.226)
[22:46:00] *** Quits: foxfromabyss (~foxfromab@2a01:c23:5c39:8900:cd35:113c:ba08:618d) (Quit: Client closed)
[22:50:25] *** Joins: lisp123 (~lisp123@5.30.23.247)
[22:54:51] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 256 seconds)
[22:55:17] *** Quits: Brucio-61 (~Brucio-61@2001:638:504:20e6:6ac3:87e0:e782:f3fc) (Ping timeout: 240 seconds)
[22:55:25] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[22:57:35] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[22:58:03] *** Joins: cosimone (~user@93-47-228-151.ip115.fastwebnet.it)
[23:03:10] *** Joins: IPmonger (~IPmonger@c-69-242-83-226.hsd1.pa.comcast.net)
[23:03:25] *** Quits: IPmonger (~IPmonger@c-69-242-83-226.hsd1.pa.comcast.net) (Remote host closed the connection)
[23:05:57] *** Quits: Guest4434 (~Guest44@95.175.104.156) (Ping timeout: 256 seconds)
[23:10:29] *** Quits: Noisytoot (~noisytoot@sourcehut/user/noisytoot) (Ping timeout: 256 seconds)
[23:22:41] *** Quits: amb007 (~a_bakic@102.215.76.86.rev.sfr.net) (Ping timeout: 250 seconds)
[23:23:27] *** Joins: amb007 (~a_bakic@229.15.23.93.rev.sfr.net)
[23:23:50] *** Joins: Noisytoot (~noisytoot@sourcehut/user/noisytoot)
[23:31:25] *** Joins: kpoeck (~kpoeck@2a01:598:92bc:c73a:65ab:10e9:10:6eb)
[23:36:39] *** Quits: triffid (~triffid@gateway/tor-sasl/triffid) (Remote host closed the connection)
[23:39:24] *** Joins: sjl (~sjl@cpe-66-66-5-59.rochester.res.rr.com)
[23:43:09] *** Quits: shka (~herr@109.231.0.226) (Remote host closed the connection)
[23:47:23] *** Quits: cage (~cage@94-39-220-187.adsl-ull.clienti.tiscali.it) (Quit: rcirc on GNU Emacs 27.1)
[23:49:54] *** Joins: shka (~herr@109.231.0.226)
[23:57:02] *** Joins: lisp123 (~lisp123@5.30.23.247)
[23:57:57] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[23:59:12] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
