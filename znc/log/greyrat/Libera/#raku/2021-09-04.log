[00:31:24] *** Quits: linkable6 (lin-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[00:31:24] *** Quits: tellable6 (tel-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[00:31:24] *** Quits: notable6 (not-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[00:31:24] *** Quits: greppable6 (gre-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[00:31:24] *** Quits: bisectable6 (bis-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[00:31:24] *** Quits: unicodable6 (uni-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[00:31:24] *** Quits: quotable6 (quo-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[00:31:24] *** Quits: releasable6 (rel-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[00:31:24] *** Quits: evalable6 (eva-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[00:31:24] *** Quits: sourceable6 (sou-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[00:31:24] *** Quits: benchable6 (ben-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[00:31:24] *** Quits: coverable6 (cov-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[00:31:24] *** Quits: statisfiable6 (sta-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[00:31:24] *** Quits: shareable6 (sha-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[00:31:24] *** Quits: committable6 (com-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[00:31:24] *** Quits: bloatable6 (blo-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[00:31:24] *** Quits: squashable6 (squ-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[00:31:24] *** Quits: nativecallable6 (nat-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[00:31:41] *** Joins: committable6 (com-able@2001:41d0:2:5eb5::)
[00:31:53] *** Joins: bloatable6 (blo-able@2001:41d0:2:5eb5::)
[00:32:08] *** Joins: bisectable6 (bis-able@2001:41d0:2:5eb5::)
[00:32:23] *** Joins: evalable6 (eva-able@2001:41d0:2:5eb5::)
[00:32:31] *** Joins: shareable6 (sha-able@2001:41d0:2:5eb5::)
[00:32:48] *** Joins: coverable6 (cov-able@2001:41d0:2:5eb5::)
[00:33:07] *** Joins: unicodable6 (uni-able@2001:41d0:2:5eb5::)
[00:33:08] *** Joins: notable6 (not-able@2001:41d0:2:5eb5::)
[00:33:15] *** Joins: greppable6 (gre-able@2001:41d0:2:5eb5::)
[00:33:25] *** Joins: releasable6 (rel-able@2001:41d0:2:5eb5::)
[00:33:40] *** Joins: linkable6 (lin-able@2001:41d0:2:5eb5::)
[00:34:06] *** Joins: squashable6 (squ-able@2001:41d0:2:5eb5::)
[00:34:17] *** Joins: nativecallable6 (nat-able@2001:41d0:2:5eb5::)
[00:44:43] <tonyo> .tell tbrowder nvm, i implemented that feature. checkout Data::Dump 0.0.14
[00:45:54] <tonyo> did tellable go away?
[00:47:45] <MasterDuke> looks like tellable6 didn't make it back last time the bots all disconnected
[00:47:51] <MasterDuke> AlexDaniel: ^^^
[00:54:26] <tonyo> how will i ever get my messages out during my once a week survey of irc
[01:06:29] <melezhik> how can I insert variable into cro template without html escaping, as is ?
[01:06:54] *** Joins: tellable6 (tel-able@2001:41d0:2:5eb5::)
[01:07:23] <AlexDaniel> MasterDuke: I think it's more than just tellable…
[01:07:26] <melezhik> <&HTML(.stuff)>
[01:07:33] <melezhik> found the one ... looks like
[01:08:11] *** Quits: unicodable6 (uni-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[01:08:14] <MasterDuke> oh yeah, benchable6 also at least
[01:09:09] <AlexDaniel> most of the important ones joined, the rest will reconnect eventually anyway :)
[01:09:17] <AlexDaniel> but yes, ping me if something like that happens! Thanks!
[01:10:25] <MasterDuke> thanks
[01:10:27] <melezhik> Uploaded file: https://uploads.kiwiirc.com/files/7e20651b21a1a87a2a506c64943a7e67/sparky-ui.png
[01:10:54] <melezhik> rewriting Sparky from Bailador to Cro,  :]  
[01:11:08] *** Joins: unicodable6 (uni-able@2001:41d0:2:5eb5::)
[01:14:37] <melezhik> I love cro template syntax, it's just easier to insert into html , less typing ...
[01:34:12] *** Joins: reportable6 (rep-able@2001:41d0:2:5eb5::)
[01:36:48] <melezhik> looks I can't refer to hash element withing cro template conditionals?
[01:36:58] <melezhik> I get template rendering error
[01:42:03] <lizmat> melezhik: probably a double quote / single quote mixup
[02:33:02] *** Joins: sourceable6 (sou-able@2001:41d0:2:5eb5::)
[02:33:48] *** Joins: statisfiable6 (sta-able@2001:41d0:2:5eb5::)
[02:42:37] *** Quits: lichtkind (~lichtkind@p200300d0a7115dc1b0e40a09bada4fc7.dip0.t-ipconnect.de) (Ping timeout: 245 seconds)
[03:05:21] *** Quits: patrickb (~quassel@55d45361.access.ecotel.net) (Quit: Quit.)
[03:17:16] *** Quits: Doc_Holliwood (~holli@dslb-092-076-011-007.092.076.pools.vodafone-ip.de) (Ping timeout: 252 seconds)
[03:37:09] *** Joins: Doc_Holliwood (~holli@dslb-092-076-011-007.092.076.pools.vodafone-ip.de)
[04:10:21] *** Joins: benchable6 (ben-able@2001:41d0:2:5eb5::)
[04:30:03] *** Quits: Doc_Holliwood (~holli@dslb-092-076-011-007.092.076.pools.vodafone-ip.de) (*.net *.split)
[04:30:03] *** Quits: timo (~timo@shells.aperture-labs.org) (*.net *.split)
[04:30:03] *** Quits: yjh (~yjh@071-084-181-214.res.spectrum.com) (*.net *.split)
[04:30:03] *** Quits: avar (avar@vm.nix.is) (*.net *.split)
[04:30:03] *** Quits: TempIRCLogger__ (~RakuIRC@ipv4-wenzperl.connected.by.freedominter.net) (*.net *.split)
[04:30:03] *** Quits: Summer (~summer@user/summer) (*.net *.split)
[04:30:03] *** Quits: Maylay (~gren@108-198-59-230.lightspeed.miamfl.sbcglobal.net) (*.net *.split)
[04:30:03] *** Quits: discord-raku-bot (~RakuIRC@ip5f5ab722.dynamic.kabel-deutschland.de) (*.net *.split)
[04:30:03] *** Quits: gfldex (~dex@ip5f5ab722.dynamic.kabel-deutschland.de) (*.net *.split)
[04:30:03] *** Quits: unixcat64 (hyperreal@envs.net) (*.net *.split)
[04:30:04] *** Quits: jmcgnh (~jmcgnh@wikipedia/jmcgnh) (*.net *.split)
[04:30:04] *** Quits: RakuIRCLogger (~RakuIRC@ipv4-wenzperl.connected.by.freedominter.net) (*.net *.split)
[04:30:12] *** Joins: avar (avar@vm.nix.is)
[04:30:16] *** Joins: gfldex (~dex@ip5f5ab722.dynamic.kabel-deutschland.de)
[04:30:19] *** Joins: RakuIRCLogger (~RakuIRC@ipv4-wenzperl.connected.by.freedominter.net)
[04:30:19] *** Joins: TempIRCLogger (~RakuIRC@ipv4-wenzperl.connected.by.freedominter.net)
[04:30:20] *** Joins: Doc_Holliwood (~holli@dslb-092-076-011-007.092.076.pools.vodafone-ip.de)
[04:30:24] *** Joins: discord-raku-bot (~RakuIRC@ip5f5ab722.dynamic.kabel-deutschland.de)
[04:30:34] *** Joins: Summer (~summer@user/summer)
[04:30:35] *** Joins: Maylay (~gren@108-198-59-230.lightspeed.miamfl.sbcglobal.net)
[04:30:40] *** Joins: timo (~timo@shells.aperture-labs.org)
[04:30:42] *** Joins: unixcat64 (hyperreal@envs.net)
[04:32:47] *** Quits: reportable6 (rep-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[04:33:20] *** Joins: reportable6 (rep-able@2001:41d0:2:5eb5::)
[04:41:04] *** Joins: jmcgnh (~jmcgnh@wikipedia/jmcgnh)
[04:57:10] *** Quits: Doc_Holliwood (~holli@dslb-092-076-011-007.092.076.pools.vodafone-ip.de) (Ping timeout: 240 seconds)
[05:11:07] <tbrowder> tonyo: thank you very much!
[05:11:08] <tellable6> 2021-09-03T15:45:56Z #raku <tonyo> tbrowder a PR would be great - i like the idea of using env vars to override defaults and leaving the defaults as is
[05:12:02] <tbrowder> .tell tonyo thanks, i'll work on the PR
[05:12:03] <tellable6> tbrowder, I'll pass your message to tonyo
[05:33:20] *** Joins: quotable6 (quo-able@2001:41d0:2:5eb5::)
[05:34:41] *** Quits: melezhik (~melezhik@c-73-32-143-85.hsd1.tx.comcast.net) (Quit: Connection closed)
[05:45:26] *** Joins: keutoi (~keutoi@157.47.98.150)
[05:52:54] *** Joins: melezhik (~melezhik@c-73-32-143-85.hsd1.tx.comcast.net)
[05:53:09] <melezhik> how can I catch exceptions withing cro routers?
[05:53:30] <melezhik> looks like things like CATCH do not work for me
[05:54:47] <melezhik> or try {} ... - https://github.com/melezhik/sparky/blob/cro/bin/sparky-web.raku#L291-L298
[05:55:15] <melezhik> an error is not cached and propagated to  cro itslef
[05:57:24] *** Joins: justsomeguy (~justsomeg@24.96.241.90)
[05:57:48] <melezhik> for example - https://gist.github.com/melezhik/73a4bc5418492094d11f65a3b78b6d65 , when broken yaml is rendered - https://github.com/melezhik/sparky/blob/cro/bin/sparky-web.raku#L291
[06:00:20] *** Quits: melezhik (~melezhik@c-73-32-143-85.hsd1.tx.comcast.net) (Quit: Connection closed)
[06:12:40] *** Quits: justsomeguy (~justsomeg@24.96.241.90) (Quit: WeeChat 3.2)
[06:14:27] <ugexe> what does your catch example look like?
[06:18:46] <ugexe> raku -MCro::HTTP::Router -MCro::HTTP::Server -MYAMLish -e 'my $application = route { get -> { my %y; my $err; try { %y = load-yaml("asdf"); CATCH { default { $err = $_.Str; say "error:$err"; } } }; content "text/plain", $err } }; my Cro::Service $s = Cro::HTTP::Server.new: :host<localhost>, :port<10000>, :$application; $s.start; react whenever signal(SIGINT) { $s.stop; exit; }'
[06:19:35] <ugexe> it wasnt showing the error to the connecting client until i changed  `$err = $_` to `$err = $_.Str`
[06:20:55] <ugexe> might try $!.Str
[06:21:22] <ugexe> well i guess you already do that with "$!"
[06:26:47] <ugexe> raku -MCro::HTTP::Router -MCro::HTTP::Server -MYAMLish -e 'my $application = route { get -> { my %y; try { %y = load-yaml("!") }; content "text/plain", "$!" } }; my Cro::Service $s = Cro::HTTP::Server.new: :host<localhost>, :port<10000>, :$application; $s.start; react whenever signal(SIGINT) { $s.stop; exit; }'
[06:26:52] <ugexe> that works as expected for me
[06:32:27] *** Quits: skaji (sid178483@id-178483.tinside.irccloud.com) (Ping timeout: 240 seconds)
[06:32:54] *** Joins: skaji (sid178483@id-178483.tinside.irccloud.com)
[06:47:54] *** Quits: rakuUser (~rakuUser@179.215.180.176) (Quit: Connection closed)
[07:21:37] *** Joins: melezhik (~melezhik@c-73-32-143-85.hsd1.tx.comcast.net)
[07:21:37] <melezhik> .
[07:22:33] <moon-child> ..
[07:23:44] <melezhik> ugexe thanks, could you try add cro template to your example?
[07:33:51] *** Quits: melezhik (~melezhik@c-73-32-143-85.hsd1.tx.comcast.net) (Quit: Ping timeout (120 seconds))
[08:33:51] *** Quits: quotable6 (quo-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[08:33:51] *** Quits: notable6 (not-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[08:33:51] *** Quits: nativecallable6 (nat-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[08:33:51] *** Quits: evalable6 (eva-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[08:33:51] *** Quits: statisfiable6 (sta-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[08:33:51] *** Quits: tellable6 (tel-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[08:33:51] *** Quits: squashable6 (squ-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[08:33:51] *** Quits: bloatable6 (blo-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[08:33:52] *** Quits: greppable6 (gre-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[08:33:52] *** Quits: unicodable6 (uni-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[08:33:52] *** Quits: linkable6 (lin-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[08:33:52] *** Quits: coverable6 (cov-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[08:33:52] *** Quits: committable6 (com-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[08:33:52] *** Quits: benchable6 (ben-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[08:33:52] *** Quits: sourceable6 (sou-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[08:33:52] *** Quits: reportable6 (rep-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[08:33:52] *** Quits: bisectable6 (bis-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[08:33:52] *** Quits: releasable6 (rel-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[08:33:52] *** Quits: shareable6 (sha-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[08:34:45] *** Joins: evalable6 (eva-able@2001:41d0:2:5eb5::)
[08:34:51] *** Joins: benchable6 (ben-able@2001:41d0:2:5eb5::)
[08:35:20] *** Joins: committable6 (com-able@2001:41d0:2:5eb5::)
[08:35:26] *** Joins: coverable6 (cov-able@2001:41d0:2:5eb5::)
[08:35:47] *** Joins: statisfiable6 (sta-able@2001:41d0:2:5eb5::)
[08:35:50] *** Joins: linkable6 (lin-able@2001:41d0:2:5eb5::)
[08:36:17] *** Joins: bloatable6 (blo-able@2001:41d0:2:5eb5::)
[08:36:24] *** Joins: unicodable6 (uni-able@2001:41d0:2:5eb5::)
[08:36:28] *** Joins: nativecallable6 (nat-able@2001:41d0:2:5eb5::)
[08:36:31] *** Joins: tellable6 (tel-able@2001:41d0:2:5eb5::)
[08:36:35] *** Joins: greppable6 (gre-able@2001:41d0:2:5eb5::)
[08:36:44] *** Joins: releasable6 (rel-able@2001:41d0:2:5eb5::)
[09:00:00] *** Joins: Doc_Holliwood (~holli@dslb-092-076-011-007.092.076.pools.vodafone-ip.de)
[09:30:17] *** Quits: keutoi (~keutoi@157.47.98.150) (Quit: leaving)
[09:34:36] *** Joins: shareable6 (sha-able@2001:41d0:2:5eb5::)
[09:37:38] *** Joins: reportable6 (rep-able@2001:41d0:2:5eb5::)
[10:15:55] *** Joins: yjh (~yjh@071-084-181-214.res.spectrum.com)
[10:20:46] *** Parts: yjh (~yjh@071-084-181-214.res.spectrum.com) ()
[10:32:47] *** Quits: reportable6 (rep-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[10:33:31] *** Joins: reportable6 (rep-able@2001:41d0:2:5eb5::)
[10:34:11] *** Joins: notable6 (not-able@2001:41d0:2:5eb5::)
[10:35:42] *** Joins: bisectable6 (bis-able@2001:41d0:2:5eb5::)
[10:36:09] *** Joins: squashable6 (squ-able@2001:41d0:2:5eb5::)
[10:39:15] *** Quits: squashable6 (squ-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[10:41:06] *** Joins: squashable6 (squ-able@2001:41d0:2:5eb5::)
[11:02:42] *** Quits: Doc_Holliwood (~holli@dslb-092-076-011-007.092.076.pools.vodafone-ip.de) (Ping timeout: 256 seconds)
[11:44:30] *** Joins: keutoi (~keutoi@157.47.98.150)
[11:57:39] *** Joins: holyghost (~holyghost@109.136.39.83)
[12:01:59] *** Joins: frost (~frost@59.71.240.119)
[12:12:59] <xinming> When I use $obj.raku to dump the object, What is the right way to load the data again?
[12:13:34] <xinming> trying to find data format which can exchange data which is like json, but also supports Capture in raku, failed, So sticking with the raku itself. :-)
[12:36:00] *** Joins: sourceable6 (sou-able@2001:41d0:2:5eb5::)
[12:57:17] *** Quits: Sgeo (~Sgeo@user/sgeo) (Read error: Connection reset by peer)
[13:12:14] <keutoi> I'm not sure of any idomatic way to do it but, EVALFILE gives the result of the last expression in a file, so that might work.
[13:17:17] <xinming> well, I know the EVAL function, But I wish we can have some better way to handle it
[13:25:16] *** Joins: ufobat (~martin@dynamic-095-114-004-008.95.114.pool.telefonica.de)
[13:36:31] <keutoi> I think EVAL might be the only option. Most docs for the `raku` method just state: Returns an implementation-specific string that produces an equivalent object when given to EVAL.
[13:41:37] <holyghost> PHP has a vardump function
[13:42:12] <holyghost> which is non-meta info
[13:43:54] <holyghost> so vardump($v) in PHP ---> '2'
[13:44:05] <holyghost> in your browser to debug
[13:44:21] <holyghost> so mbe have a $obj.dump, #obj.dump-meta
[13:44:57] <holyghost> sorry let me rephrase that : $obj.dump, $obj.dump-meta
[13:45:27] <holyghost> meta info can be used as in a C++ exception (or other such languages)
[13:46:35] <holyghost> just given as an example
[13:48:07] <holyghost> exceptions are stack based, so can be th meta info. I don't know about raku exceptions though
[13:50:13] <holyghost> print, dump, eval
[13:50:34] <holyghost> or say
[13:53:52] <holyghost> intelligent stack-based meta info
[13:54:10] <holyghost> so your compiler fetches more information from its runtime
[13:57:32] <holyghost> It's just a C++ thing
[13:59:13] <holyghost> and maybe scheme/LISP for the eval functionality
[14:25:16] *** Quits: evalable6 (eva-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[14:25:16] *** Quits: linkable6 (lin-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[14:26:01] *** Joins: linkable6 (lin-able@2001:41d0:2:5eb5::)
[14:40:01] <keutoi> Is rakudocs.github.io still being used?
[14:51:45] <raydiak> PHP doesn't have the concept of a Capture, so serializing it is a non-issue for them. that said, I'm personally not aware of any serialization formats which support Captures. though rolling your own might not be so bad, just an array and a hash would be a good start. several serialization formats in the ecosystem support arrays and hashes ofc. if you're looking for something in core, then yes you're left with
[14:51:47] <raydiak> only EVAL. .raku and .EVAL are meant to round-trip with each other
[14:52:59] <raydiak> though personally if I found myself tring to serialize Captures, in most cases I'd first stop and ask myself if my design ought to be rethought
[14:53:39] <holyghost> np, just feeding the features
[14:54:39] <tbrowder> .tell tonyo i'm confused. it looks like you have already implemented the env var, thank you very much!
[14:54:40] <tellable6> tbrowder, I'll pass your message to tonyo
[14:57:47] <tbrowder> ok, i see, you called my issue a feature request and completed it. thanks again!
[14:58:28] <raydiak> though it does bring up the idea of raku-centric serialization. a format which can round-trip all/most raku data structures without EVAL would be a pretty cool thing
[14:58:36] *** Quits: frost (~frost@59.71.240.119) (Quit: Connection closed)
[15:00:11] <raydiak> though apparently "though" is my word of the day though :)
[15:08:10] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:4d09:4215:a798:93d6)
[15:12:43] *** Quits: linkable6 (lin-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[15:14:02] *** Joins: linkable6 (lin-able@2001:41d0:2:5eb5::)
[15:25:45] *** Joins: evalable6 (eva-able@2001:41d0:2:5eb5::)
[15:36:18] *** Joins: quotable6 (quo-able@2001:41d0:2:5eb5::)
[15:38:40] *** Joins: lichtkind (~lichtkind@p200300d0a7115d13b0e40a09bada4fc7.dip0.t-ipconnect.de)
[15:40:59] <lizmat> raydiak: a Raku version of Sereal maybe  :-)
[16:02:40] *** Quits: ufobat (~martin@dynamic-095-114-004-008.95.114.pool.telefonica.de) (Ping timeout: 240 seconds)
[16:03:13] <xinming> raydiak: Because it's cool to serialize Capture. :-)
[16:03:39] <xinming> jsonrpc has some forms of args passing, but it's not as powerful as Capture
[16:04:40] <xinming> If we can serialize capture, We can be more "specific" about what we want for the RPC.
[16:10:04] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:4d09:4215:a798:93d6) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[16:19:19] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:4d09:4215:a798:93d6)
[16:32:44] *** Quits: reportable6 (rep-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[17:06:07] *** Joins: Doc_Holliwood (~holli@dslb-092-076-011-007.092.076.pools.vodafone-ip.de)
[17:18:01] *** Quits: eseyman (~manu@lfbn-idf1-1-2267-180.w92-151.abo.wanadoo.fr) (Ping timeout: 248 seconds)
[17:35:36] *** Joins: reportable6 (rep-able@2001:41d0:2:5eb5::)
[18:47:58] *** Quits: b2gills (~brad@64.191.7.0) (Quit: Leaving.)
[18:48:09] *** Joins: b2gills (~brad@64.191.7.0)
[19:15:08] <raydiak> lizmat: I haven't used Sereal, only have a vague recollection of some work with Storable close to 20 years ago...but from what I'm reading about Sereal, yes, some approximation of that
[19:17:13] <raydiak> xinming: I'm certainly not against such a thing existing and don't want to dissuade you, but imo an external API should usually be simple and language-agnostic...seems like this wouldn't be either of those things if I understand correctly?
[19:21:43] <raydiak> if Capture is specifically what you want, perhaps you could rip some relevant parts of the grammar straight out of the rakudo parser...
[19:28:34] *** Joins: eseyman (~manu@lfbn-idf1-1-2267-180.w92-151.abo.wanadoo.fr)
[19:31:06] *** Joins: monkey_ (~user@190.104.116.134)
[19:47:10] *** Quits: Doc_Holliwood (~holli@dslb-092-076-011-007.092.076.pools.vodafone-ip.de) (Ping timeout: 240 seconds)
[19:47:49] *** Quits: holyghost (~holyghost@109.136.39.83) (Ping timeout: 252 seconds)
[20:15:35] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:4d09:4215:a798:93d6) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[20:20:17] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:4d09:4215:a798:93d6)
[20:21:10] *** Quits: monkey_ (~user@190.104.116.134) (Ping timeout: 240 seconds)
[20:26:43] *** Quits: keutoi (~keutoi@157.47.98.150) (Quit: leaving)
[20:34:36] *** Quits: xkr47 (xkr47@91-150-59-18.customer.karistelefon.fi) (Quit: Reconnecting)
[20:34:42] *** Joins: xkr47 (xkr47@91-150-59-18.customer.karistelefon.fi)
[20:39:06] *** Joins: whatnext (~whatnext@212.250.5.220)
[20:42:13] *** Quits: jrjsmrtn (~jrjsmrtn@ip-83-134-174-201.dsl.scarlet.be) (Quit: ZNC 1.8.2 - https://znc.in)
[20:44:13] *** Joins: jrjsmrtn (~jrjsmrtn@ip-83-134-174-201.dsl.scarlet.be)
[21:05:59] <spacekookie> I'd be curious if people here have favourite programs written in Raku I could try first to see if my packaging tools work :)
[21:06:14] <spacekookie> It's gonna be more challenging (and useful) than my tiny scripts
[21:28:15] *** Quits: whatnext (~whatnext@212.250.5.220) (Quit: Ping timeout (120 seconds))
[21:33:06] <discord-raku-bot> <Anton Antonov#7232> I want like to write a Raku package that provides a grammar / parser for Mathematica aka Wolfram Language (WL). I am considering several package names: 1)  `Grammar::Mathematica`  2) `Mathematica::Grammar` 3) `WL::Grammar` 4) `Grammar::WolframLanguage` 5) `FoxyGoat`. Which one do you think it is bests?
[21:34:11] <discord-raku-bot> <Anton Antonov#7232> Looking at https://modules.raku.org/search/?q=Grammar I see both `Grammar::<name>` and `<name>::Grammar` to be equally represented.
[21:34:29] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:4d09:4215:a798:93d6) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[21:35:25] <raydiak> spacekookie: Not sure about "favorite" but you could try App::Pray. Still works last time I checked. Not popular or useful or anything, but it's fairly extensive and also has a few dependencies, so might be a decent test of packaging tools
[21:37:41] <raydiak> I haven't done serious work on it in years, so there's some anachronisms especially in the META6.json, but you're going to see that all over the ecosystem anyway. main thing off the top of my head that it wouldn't test is %?RESOURCES (they didn't exist when I wrote it)
[21:40:29] <spacekookie> Thanks! I'll have a look at it
[21:41:07] <spacekookie> I'm not very experienced with raku anyway, so it'll be a good thing to learn these things too. I'm currently mostly trying to improve the tooling in NixOS so I have a nicer time playing with the language down the road ;P
[21:43:42] <raydiak> that's a cool way to go about it, not just learning by doing but also paving the way at the same time
[21:46:14] <raydiak> Anton: my vote would be for Grammar:: instead of ::Grammar, unless you plan to develop a collection of related things which would be grouped together under Mathematica::
[21:50:36] <discord-raku-bot> <Anton Antonov#7232> @raydiak Thanks! And good point -- I have to decide do I want to implement "other things" under `Mathematica::`. I am undertaking this because I want to convert a bunch of unit tests from Mathematica to Raku. Hence, I might have additional `Mathematica::*`  packages / modules.
[21:52:24] *** Joins: neither (~neither@5.177.237.246)
[21:57:01] <neither> hi, if I want to alias a method of a class, should I write another method and directly call the other one? e.g., `$obj.very-long-name` and `$obj.vln` where `method vln() { self.very-long-name}`? Or is this better done another way?
[21:57:16] *** Joins: Sgeo (~Sgeo@user/sgeo)
[21:58:17] <moritz_> there are other methods, like installing it with a new name through the metaclass. Is that "better"? depends on what you optimize for
[21:58:55] <moritz_> m: class A { method x { say 42 } }; A.^add_method("y", A.^find_method("x")); A.y
[21:58:55] <camelia> rakudo-moar b451f89b6: OUTPUT: «42␤»
[21:59:50] <moritz_> ah, you should also throw in A.^compose(); after you are done introducing new methods (it works without it in this specifici case, but it's more robust to include it)
[22:09:16] <raydiak> Anton: sounds like a fun project. and you're welcome, of course
[22:14:32] <neither> Thank you moritz_, by better I meant conventional|idiomatic because I'm new to the language
[22:15:34] <neither> sorry for not being clear in the first place
[22:24:07] *** Quits: neither (~neither@5.177.237.246) (Quit: Ping timeout (120 seconds))
[22:24:15] <moritz_> neither: nothing easier to read than a method that calls another method
[22:24:16] <tellable6> moritz_, I'll pass your message to neither
[22:26:17] *** Joins: neither (~neither@5.177.237.246)
[22:30:48] <raydiak> imma paste this because your connection flaked out for a minute and you missed it:
[22:30:50] <raydiak> 17:54:15    moritz_ | neither: nothing easier to read than a method that calls another method
[22:32:53] *** Quits: reportable6 (rep-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[22:54:28] *** Joins: Doc_Holliwood (~holli@dslb-092-076-011-007.092.076.pools.vodafone-ip.de)
[22:55:27] <neither> Thanks
[22:55:29] <tellable6> 2021-09-04T17:54:16Z #raku <moritz_> neither: nothing easier to read than a method that calls another method
[23:06:36] <MasterDuke> neither: there's also https://raku.land/cpan:ELIZABETH/Method::Also
[23:16:14] *** Joins: monkey_ (~user@190.104.116.134)
[23:29:50] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:4d09:4215:a798:93d6)
[23:34:34] *** Joins: reportable6 (rep-able@2001:41d0:2:5eb5::)
[23:49:01] <neither> thank you MasterDuke, that's very readable
