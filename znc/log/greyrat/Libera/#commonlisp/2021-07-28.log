[00:08:31] *** Joins: dsk (~dsk@user/dsk)
[00:15:09] *** Quits: cage (~cage@dynamic-adsl-78-15-35-191.clienti.tiscali.it) (Quit: rcirc on GNU Emacs 27.1)
[00:18:49] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-EC96-dynamic.midco.net) (Quit: Using Circe, the loveliest of all IRC clients)
[00:19:03] *** Quits: dilated_dinosaur (~dino@cpc1-bexl9-2-0-cust231.2-3.cable.virginm.net) (Remote host closed the connection)
[00:19:29] *** Joins: dilated_dinosaur (~dino@cpc1-bexl9-2-0-cust231.2-3.cable.virginm.net)
[00:22:34] *** Joins: kpoeck (~kpoeck@87.140.195.0)
[00:42:44] *** Joins: MichaelRaskin (~MichaelRa@ipb21b6221.dynamic.kabel-deutschland.de)
[00:42:44] *** ChanServ sets mode: +o MichaelRaskin
[00:46:00] *** Quits: shka (~herr@109.231.62.239) (Ping timeout: 256 seconds)
[00:52:11] *** Joins: zos (~zos@ool-457a8044.dyn.optonline.net)
[00:52:12] *** Joins: danieli2 (~danieli@user/danieli)
[00:52:43] *** Quits: danieli (~danieli@user/danieli) (Killed (NickServ (GHOST command used by danieli2)))
[00:52:47] *** danieli2 is now known as danieli
[00:52:55] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Ping timeout: 244 seconds)
[00:53:04] *** Joins: azimut_ (~azimut@gateway/tor-sasl/azimut)
[01:02:33] *** Quits: amk (~amk@176.61.106.150) (Remote host closed the connection)
[01:03:35] <recordgroovy> feels good to get a pr merged c:
[01:04:00] *** Joins: amk (~amk@176.61.106.150)
[01:07:23] *** Quits: Josh_2 (~user@37.25.47.130) (Ping timeout: 255 seconds)
[01:08:44] *** Quits: amk (~amk@176.61.106.150) (Ping timeout: 255 seconds)
[01:09:25] *** Joins: amk (~amk@176.61.106.150)
[01:26:01] <recordgroovy> >    :mailto #.(concatenate 'string "someone" "@" "example" "." "com")
[01:26:22] <recordgroovy> To go against email scrapers on the GitHub... I see no reason why this *can't* be done, right?
[01:29:22] *** Joins: tfeb (~tfb@88.98.95.237)
[01:31:17] <_death> you can just stuff some backslashes
[01:32:39] <_death> interestingly, the glossary entry for "single escape" says "(In the standard readtable, slash is the only single escape.)".. but it's not slash, but backslash (2.1.4.6 has it right)
[01:34:30] <recordgroovy> I'm targeting it to be readable by humans and asdf, but not by generic scrapers.
[01:34:46] <recordgroovy> Enough backslashes would make it readable by asdf, but probably not humans without good effort
[01:34:52] <_death> "\a\b\c\@\e\x\a\m\p\l\e\.\c\o\m"
[01:35:02] <recordgroovy> I stand corrected
[01:36:04] <recordgroovy> Lisp's backslash is always "take next char literally", that's it?
[01:36:12] <_death> clhs 2.1.4.6
[01:36:12] <specbot> Single Escape Character: http://www.lispworks.com/reference/HyperSpec/Body/02_adf.htm
[01:36:27] <recordgroovy> Okay, that's good to know, thanks
[01:39:26] * tfeb is now planning a tool which will convert code with string literals into code which uses load-time-value in ... interesting ways
[01:41:02] *** Quits: amk (~amk@176.61.106.150) (Ping timeout: 252 seconds)
[01:42:28] *** Quits: yitzi (~yitzi@173-27-106-188.client.mchsi.com) (Quit: Leaving)
[01:51:22] *** Quits: taiju (~taiju@240b:253:ec40:2400:4582:f12e:efff:b6a0) (Ping timeout: 240 seconds)
[01:52:57] *** Quits: tfeb (~tfb@88.98.95.237) (Quit: died)
[01:53:42] <moon-child> _death: sounds like a good target for a wscl issue
[01:57:20] <Bike> i think that's on the cliki corrections page already
[02:00:16] *** Quits: Alfr (~Alfr@user/alfr) (Quit: Leaving)
[02:04:12] *** Joins: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[02:07:07] *** Joins: amk (~amk@176.61.106.150)
[02:07:31] *** Quits: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 258 seconds)
[02:13:23] *** Joins: zacts (~zacts@user/zacts)
[02:16:26] <lotuseater> I asked myself, when I can do all sorts of symbol names between pipes #\|, how is this done by the reader, cause (get-macro-character #\|) => (values nil nil). also with #\: for reading in keywords. or is this hidden for purpose to not break certain stuff?
[02:17:16] *** Quits: kpoeck (~kpoeck@87.140.195.0) (Ping timeout: 246 seconds)
[02:19:43] *** Joins: taiju (~taiju@M014013236064.v4.enabler.ne.jp)
[02:20:01] <jcowan> | is a character of a special type: multiple escape.  What it does is not done by the readtable.  : is just a token character: its interpretation happens at a higher level.
[02:20:34] <_death> the readtable does contain the syntax types
[02:21:00] <lotuseater> okay :)
[02:21:45] <lotuseater> it was funny some days ago as i showed someone the symbol '|This is a symbol, really, I swear.| :D
[02:24:21] <jcowan> Yes, it is.  But \ and | are not implemented using readtable macro characters.  You caan change what characters are used, but the behavior of single and multtiple escape chars is hardwired.
[02:24:49] <_death> you can (set-syntax-from-char #\| #\a) and then | is no longer a multiple escape character
[02:25:23] <lotuseater> yeah to having powers brings with it to know what one should NOT do
[02:25:39] <jcowan> or (set-syntax-from-char #\$ #\|) and then $this is a symbol even though it doesn't look like it.$
[02:25:40] *** Quits: zacts (~zacts@user/zacts) (Ping timeout: 246 seconds)
[02:25:58] <lotuseater> i know that :)
[02:26:19] <jcowan> Hacking the readtable is mostly for reading non-CL languages.
[02:27:10] <lotuseater> most of them are so hard to parse o_O or better to say it's so complex
[02:28:18] <White_Flame> of course, the readtable interface isn't always the easiest to extend for every language.  Sometimes you need to go raw
[02:29:43] <jcowan> I should probably have said "non-CL Lisps". CLtL gives the example of !, which is the single escape char for Portable Standard Lisp.
[02:29:50] <lotuseater> or opening foreign files as streams, reading all lines and break up piece by piece
[02:30:00] <jcowan> I doubt it would help much for reading C.
[02:30:46] <lotuseater> yes too much is allowed for writing C
[02:31:52] <lotuseater> but this Fortran77 to CL project is quite interesting
[02:32:24] <jcowan> The Compatibility Note at the bottom of https://www.cs.cmu.edu/Groups/AI/html/cltl/clm/node188.html explains how | is not a macro character.
[02:32:28] <lotuseater> so NASA calls you "we need a FORTRAN77 expert" so no problem, now we do Lisp (again)
[02:33:23] <lotuseater> thx
[02:34:10] <lotuseater> I want the CLtL2 book, but it's so expensive ...
[02:34:26] <jcowan> Well, it's all online
[02:34:56] <lotuseater> haha yes as I have most of the top CL books, old and young, as PDF
[02:35:35] <lotuseater> for working at the machine it's better, left window PDF, right emacs
[02:36:29] <lotuseater> did you ever defined another dispatch character other than #\# ?
[02:41:15] *** Quits: gaqwas (~john@dynamic-095-115-142-224.95.115.pool.telefonica.de) (Ping timeout: 258 seconds)
[02:42:15] *** Quits: attila_lendvai (~alendvai@1F2EF87D.nat.pool.telekom.hu) (Read error: Connection reset by peer)
[02:42:39] *** Joins: attila_lendvai (~alendvai@1F2EF87D.unconfigured.pool.telekom.hu)
[02:43:32] <lotuseater> oh I remembered reading about Symbolics they had their own Lisp implementations for compiling C, Ada, Fortran ^^
[02:45:11] <moon-child> yes, but you probably wouldn't want to use a reader macro for that
[02:45:23] <lotuseater> haha no don't worry
[02:45:53] <jcowan> I found a copy of CLtL2 for $34 at the awesome bookfinder.com (price includes shipping to me, so YMMV)
[02:46:00] <lotuseater> damn
[02:46:35] <lotuseater> i have many of my good math books in my (physical) lib from zvab.com
[02:47:13] <lotuseater> but also something like Feynman Lectures on Physics, Knuth's Concrete Mathematics or TAoCP, expensive ...
[02:47:58] <jcowan> bookfinder indexes essentially all the physical-book retailers in the world
[02:48:29] <lotuseater> have found in the university lib in the book sale (every for 1€) an old version of The METAFONTbook
[02:48:50] <lotuseater> nice, thx for this tip. but the porto could kill me in the long run
[02:50:24] <lotuseater> as much as a new game, but of course more substance: https://www.zvab.com/servlet/BookDetailsPL?bi=30210395030&searchurl=hl%3Don%26kn%3DConcrete%2BMathematics%26sortby%3D20&cm_sp=snippet-_-srp1-_-title2 (just as an example)
[02:51:01] <lotuseater> Common Lisp The Language 1 from 1984 for 23.65€
[02:52:10] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Ping timeout: 268 seconds)
[02:52:18] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[02:56:50] <lotuseater> but now I found a big book (from 1996) about AutoLISP, could be helpful for the new potential job and I bet this small industry company still runs on much old stuff
[03:00:03] *** Quits: sjl (~sjl@cpe-66-66-5-59.rochester.res.rr.com) (Quit: WeeChat 2.2-dev)
[03:02:23] *** Parts: akoana (~ah@user/akoana) ()
[03:05:34] <lotuseater> moon-child: or finally doing this Hercules task and building a translator for COBOL to Java/C# or whatever banks/insurances mean is good
[03:08:15] <hayley> I read that it is made very complicated by having rational arithmetic (bad for Java, fine for CL) and being able to change GOTO targets on the fly (very bad unless you give up and compile basic-block at a time).
[03:08:46] <lotuseater> phew
[03:10:36] <lotuseater> or the systems behavior must be changed safely stepping away from those hairy things
[03:14:41] *** Joins: peterhil (~peterhil@mobile-access-b04815-181.dhcp.inet.fi)
[03:16:12] *** Quits: mister_m (~user@c-73-110-154-209.hsd1.il.comcast.net) (Ping timeout: 265 seconds)
[03:16:28] <lotuseater> ok my eyes get tired, good night
[03:17:02] *** Quits: lotuseater (~user@p200300e7871b3f0034ed9e810c3724ce.dip0.t-ipconnect.de) (Quit: ERC (IRC client for Emacs 27.2))
[03:18:51] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[03:26:25] <etimmons> Xach: UIOP 3.3.6 is on the way. Being tested on the systems not yet covered by CI. Will hopefully be out in a day or two
[03:28:06] *** Quits: frgo (~frgo@p200300deef181d0049a6f005cb021136.dip0.t-ipconnect.de) (Remote host closed the connection)
[03:28:33] *** Joins: frgo (~frgo@p200300deef181d008872ccea77bb1081.dip0.t-ipconnect.de)
[03:31:41] *** Joins: mister_m (~user@c-73-110-154-209.hsd1.il.comcast.net)
[03:46:34] <jcowan> hayley: Java has BigDecimal, which should be a good choice for COBOL
[03:46:48] <hayley> Right.
[03:52:41] *** Joins: zacts (~zacts@user/zacts)
[04:16:38] *** Joins: cjb (~cjb@user/cjb)
[04:29:31] *** Quits: zacts (~zacts@user/zacts) (Quit: Client closed)
[04:30:32] *** Joins: igemnace (~ian@user/igemnace)
[04:41:00] *** Quits: zos (~zos@ool-457a8044.dyn.optonline.net) (Ping timeout: 252 seconds)
[04:44:06] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-10-70-54-112-49.dsl.bell.ca)
[04:46:42] *** Quits: random-nick (~random-ni@87.116.182.181) (Ping timeout: 240 seconds)
[05:10:45] *** Quits: attila_lendvai (~alendvai@1F2EF87D.unconfigured.pool.telekom.hu) (Ping timeout: 265 seconds)
[05:12:54] *** Joins: mister_m` (~user@c-73-110-154-209.hsd1.il.comcast.net)
[05:14:36] *** Quits: mister_m (~user@c-73-110-154-209.hsd1.il.comcast.net) (Ping timeout: 256 seconds)
[05:34:52] *** Joins: jmhimara (~jmhimara@170.39.139.5)
[05:43:41] *** Joins: zacts (~zacts@user/zacts)
[05:47:44] *** Quits: peterhil (~peterhil@mobile-access-b04815-181.dhcp.inet.fi) (Ping timeout: 255 seconds)
[05:47:52] *** Quits: jmhimara (~jmhimara@170.39.139.5) (Quit: Client closed)
[05:49:09] *** Quits: igemnace (~ian@user/igemnace) (Ping timeout: 268 seconds)
[06:01:53] *** Joins: igemnace (~ian@user/igemnace)
[06:02:06] *** Quits: hineios (~hineios@a95-93-142-124.cpe.netcabo.pt) (Ping timeout: 268 seconds)
[06:03:06] <recordgroovy> Hi, I'm wondering if anyone could spare some time to peer-review a library I've been working on. Thanks for any comments :)
[06:03:14] <recordgroovy> https://git.sr.ht/~shunter/parsnip/tree/develop
[06:04:11] *** Quits: zacts (~zacts@user/zacts) (Quit: zacts)
[06:19:28] <moon-child> recordgroovy: I am not so sure of the special-casing of eof.  Usually it makes more sense to treat the eof as just another kind of token
[06:22:13] <recordgroovy> Yeah that probably makes more sense. I'll put that in my todo.
[06:24:33] *** Joins: hineios (~hineios@a95-93-142-124.cpe.netcabo.pt)
[06:25:16] *** Joins: zacts (~zacts@user/zacts)
[06:30:48] *** Quits: zacts (~zacts@user/zacts) (Quit: Client closed)
[06:33:11] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 255 seconds)
[06:36:57] *** Quits: cjb (~cjb@user/cjb) (Quit: rcirc on GNU Emacs 28.0.50)
[07:02:53] *** Quits: mister_m` (~user@c-73-110-154-209.hsd1.il.comcast.net) (Ping timeout: 265 seconds)
[07:07:38] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-10-70-54-112-49.dsl.bell.ca) (Remote host closed the connection)
[07:09:41] *** Joins: prxq_ (~quassel@x4db50dbf.dyn.telefonica.de)
[07:13:38] *** Quits: prxq (~quassel@x4dbe09f7.dyn.telefonica.de) (Ping timeout: 268 seconds)
[07:17:45] *** Quits: makomo (~makomo@user/makomo) (Ping timeout: 252 seconds)
[07:30:49] *** Quits: srhm (~ascii@user/srhm) (Quit: Konversation terminated!)
[07:31:44] <beach> Good morning everyone!
[07:38:45] *** Joins: cjb (~cjb@user/cjb)
[08:21:17] *** Joins: mister_m (~user@c-73-110-154-209.hsd1.il.comcast.net)
[08:39:02] *** Quits: recordgroovy (~recordgro@c-67-185-152-122.hsd1.wa.comcast.net) (Quit: leaving)
[09:05:03] *** Joins: derelict_ (~derelict@user/derelict)
[09:23:36] <Mrtn[m]> It's raining. At least according to my watch.
[09:25:11] <hayley> Looks like it just stopped here. Have fun.
[09:26:57] *** Quits: hafat (~hafat@95.70.168.45) (Ping timeout: 276 seconds)
[09:30:01] *** Joins: Oladon (~olad@98.43.81.226)
[09:32:28] *** Quits: Bike (~Glossina@71.69.170.70) (Quit: Lost terminal)
[09:34:08] *** Quits: mister_m (~user@c-73-110-154-209.hsd1.il.comcast.net) (Remote host closed the connection)
[09:34:42] *** Quits: Inline (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431) (Quit: Leaving)
[09:40:56] *** Quits: Melantha (~pyon@user/pyon) (Ping timeout: 256 seconds)
[09:56:48] *** Quits: mariari (~mariari@user/mariari) (Ping timeout: 256 seconds)
[09:57:11] *** Joins: mariari (~mariari@user/mariari)
[10:08:46] *** Quits: mariari (~mariari@user/mariari) (Ping timeout: 268 seconds)
[10:10:23] *** Joins: mariari (~mariari@user/mariari)
[10:14:23] *** Joins: selwyn (~selwyn@user/selwyn)
[10:21:47] *** Joins: gaqwas (~john@dynamic-095-117-022-153.95.117.pool.telefonica.de)
[10:22:24] *** Joins: peterhil (~peterhil@mobile-access-b04815-181.dhcp.inet.fi)
[10:24:42] *** Quits: mariari (~mariari@user/mariari) (Ping timeout: 245 seconds)
[10:28:17] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[10:29:02] *** Joins: mariari (~mariari@user/mariari)
[10:41:11] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[10:46:13] *** Joins: lotuseater (~user@p200300e7871b3f0034ed9e810c3724ce.dip0.t-ipconnect.de)
[10:48:34] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 240 seconds)
[10:49:39] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[10:51:21] *** Joins: lottaquestions (~nick@2607:fa49:5040:a300:d5df:d412:bed6:9ef6)
[10:51:42] *** Quits: lottaquestions_ (~nick@2607:fa49:5040:5c00:15ff:5298:25c8:dfb2) (Ping timeout: 252 seconds)
[10:55:37] *** Quits: lottaquestions (~nick@2607:fa49:5040:a300:d5df:d412:bed6:9ef6) (Client Quit)
[10:56:01] *** Joins: lottaquestions (~nick@2607:fa49:5040:a300:d5df:d412:bed6:9ef6)
[11:00:59] *** Quits: cjb (~cjb@user/cjb) (Quit: rcirc on GNU Emacs 28.0.50)
[11:04:49] <phantomics> recordgroovy: Looks interesting at a glance, very neat code. I'll give it a try when I have time
[11:29:39] *** Quits: gaqwas (~john@dynamic-095-117-022-153.95.117.pool.telefonica.de) (Ping timeout: 252 seconds)
[11:36:44] <susam> Good morning, everyone!
[11:37:00] <beach> Hello susam.
[11:37:33] *** Joins: shka (~herr@109.231.62.239)
[11:37:52] <susam> Hello beach!
[11:44:14] *** Joins: kakuhen (~kakuhen@user/kakuhen)
[11:49:07] *** Joins: Th30n (~Th30n@cpe-188-252-157-241.zg5.cable.xnet.hr)
[11:55:25] <pjb>  
[11:55:25] <pjb> lotuseater: I've seen big systems defining some dispatching reader macros on $ ; but nowadays, with unicode, you can more often just define a reader macro on a unicode character.
[11:55:34] <pjb> Depending on what you need.
[11:57:27] <lotuseater> thx pjb
[11:57:35] <lotuseater> Hi there beach :)
[12:00:44] <lotuseater> Narrow-minded employment in Germany is really annoying.
[12:03:26] *** Joins: tfeb (~tfb@88.98.95.237)
[12:09:14] *** Joins: attila_lendvai (~alendvai@1F2EFFA5.nat.pool.telekom.hu)
[12:11:19] *** Quits: tfeb (~tfb@88.98.95.237) (Quit: died)
[12:16:26] <kakuhen> Is it possible for eval-when to implicitly modify arguments of functions like find-class?
[12:16:29] *** Joins: layerex (~layerex@213.87.158.36)
[12:17:18] <kakuhen> I have a macro that transforms a given symbol and creates a class named with this transformed symbol, together with methods specialized on the class.
[12:18:20] <kakuhen> Say this transformed symbol is X. Both CCL and SBCL throw style warnings that my defmethod's are using the undefined type X, but the class was defined right before I define these methods.
[12:19:53] <pjb> kakuhen: not eval-when directly, but eval-when implies that the body will be evaluated in different environments, so it's possible that operators that may depend on the environment such as find-class give different results.
[12:20:02] <kakuhen> So I decided to wrap (defclass X () ...) in an eval-when form. Above in the macro, I check the output (find-class X nil). When I use eval-when, errorp somehow becomes T rather than nil
[12:20:09] <pjb> It should be the job of the programmer to ensure that the differences are not semantically different.
[12:20:12] <kakuhen> This issues goes away, however, when I use (find-class X nil nil)
[12:20:52] <pjb> try: (find-class 'x t nil)
[12:21:10] <kakuhen> pjb: Yeah, I suspect eval-when implying a different environment somehow makes the arguments supplied to FIND-CLASS "flip," but it wouldn't explain why this issues goes away when I supply the environment.
[12:21:14] <pjb> find-class is a  function.
[12:21:49] <kakuhen> anyway, I am trying this because SBCL and CCL are giving me style warnings (ECL doesn't give style warnings), and I assume it could be a bug in both SBCL and CCL's compiler, but I don't want to jump to such conclusions yet.
[12:22:14] <kakuhen> and I get strange behavior with FIND-CLASS when I include an (eval-when (:compile-toplevel :load-toplevel) ...) in the macro
[12:22:26] <pjb> You must be doing somethign strange, because a simple toplevel sequence of defclass defmethod should work nicely.
[12:23:19] <kakuhen> Anyway, I am trying to produce a minimal working example of the style warnings SBCL and CCL produce
[12:23:33] *** Joins: pve (~pve@37-33-43-133.bb.dnainternet.fi)
[12:23:33] <kakuhen> SBCL produces twice as many style warnings as CCL, so it's catching(?) something that CCL isn't. Meanwhile ECL just gives zero style warnings.
[12:23:48] <pjb> kakuhen: so, your macro should expand to (progn (defclass x () ()) (defmethod moo ((x x)) …))
[12:23:49] <kakuhen> I'm not sure why a type  for a class wouldn't propagate after you define it
[12:25:01] <beach> kakuhen: The dictionary entry for DEFCLASS contains a phrase that makes its compile-time behavior very hard to understand.
[12:25:37] <beach> That might be the reason for the differences in behavior of different implementations.
[12:26:23] <beach> It is essentially impossible for an implementation to comply with what the standard says.
[12:26:28] <kakuhen> I see. And, before it gets asked, yes, I set the debug level to 3 before compiling on each implementation.
[12:26:38] <pjb> "If a defclass form appears as a top level form, the compiler must make the class name be recognized as a valid type name in subsequent declarations (as for deftype) and be recognized as a valid class name for defmethod parameter specializers and for use as the :metaclass option of a subsequent defclass. The compiler must make the class definition available to be returned by find-class when its environment argument is a value received
[12:26:38] <pjb> as the environment parameter of a macro. "
[12:27:03] <beach> It's the last phrase that is problematic.
[12:27:10] <pjb> Indeed.
[12:27:21] <pjb> Hence the difference observed by kakuhen.
[12:27:33] <beach> Possibly, yes.
[12:27:57] <pjb> kakuhen: But I've seen nothing that implies a need for eval-when in your macro expansion. Just use progn around your defclass and defmethod forms.
[12:27:58] <kakuhen> The style warnings disappear on both SBCL and CCL once I use (find-class X nil nil) and put the defclass in this eval-when block(?)
[12:28:26] <kakuhen> but I found an interesting behavior where ERRORP automatically gets set to T (on both sbcl and ccl!) if I just have (find-class X nil) written, and the defclass is in this eval-when block
[12:28:44] *** Joins: treflip (~user@95.79.32.99)
[12:28:47] <kakuhen> this behavior mysteriously goes away if I do one of two things: remove the eval-when block, or explicitly provide the environment
[12:29:24] <kakuhen> I'm trying to produce a minimal working example but so far I haven't been able to reproduce the style warnings, yet.
[12:30:43] <beach> I would be interested in complete examples of what happens in different implementations and what you expected to happen.  But take your time.
[12:35:11] <beach> kakuhen: It is not enough to say that the definition is in an "eval-when block".  The "situations" given in that form are important too.
[12:35:29] <beach> That's why we need complete examples.
[12:38:18] *** Quits: layerex (~layerex@213.87.158.36) (Quit: Leaving)
[12:39:08] <kakuhen> OK I found out why I was unable to produce a minimal working example of this issue
[12:39:23] <kakuhen> I was looking in the wrong macro >_<
[12:39:26] <lotuseater> nice what was it?
[12:39:29] *** Parts: pranavats (3fba1d1b34@jabberfr.org) (Disconnected: Received SIGTERM)
[12:39:46] <kakuhen> Ok this will sound really dumb, but I have a macro %FOO and a macro FOO that calls %FOO with a restart-case
[12:40:07] <kakuhen> Calling (%FOO bar) does not give the undefined type warning. Calling (FOO bar) does.
[12:40:27] <lotuseater> hmm, see the advise of beach from 10:05
[12:41:35] <kakuhen> i understand the importance, but i also want to minimize irrelevant information -- you'll know i've given up in attempting to produce a minimal example when i just send the entire lisp file along with the repl output for each implementation.
[12:43:17] <kakuhen> Okay I got the example -- really excited now
[12:44:00] <lotuseater> hehe
[12:44:01] <beach> You also need to show when the behavior you observe happens, like if it is at compile time, load time, or run time.
[12:44:58] <lotuseater> beach: this is given by the kind of error the debugger throws, right?
[12:45:14] <kakuhen> http://0x0.st/-Wy-.lisp
[12:46:19] <lotuseater> kakuhen: do you need a macro for foo?
[12:46:31] <beach> lotuseater: Wow, hold on!  First errors are not "thrown", they are "signaled".  Second, it is not typically the debugger that signals the error, but the application code, which will call the debugger if the error is not handled.  Third, no, the same error can be signaled in all three situations.
[12:47:06] *** Joins: pranavats (3fba1d1b34@jabberfr.org)
[12:47:16] <kakuhen> CCL output http://0x0.st/-Wyo.txt
[12:47:23] <lotuseater> sorry my fault, i was just using the wrong vocabulary :)
[12:47:50] <lotuseater> must read more of phoes book
[12:49:19] <kakuhen> SBCL output http://0x0.st/-WyH.txt
[12:50:21] <kakuhen> Expected behavior: I expect the new class' corresponding type to be defined before we define the method specializing on the new class.
[12:50:54] <kakuhen> ECL does not give any style warnings, but I will nonetheless give output for it soon.
[12:51:33] *** Parts: pranavats (3fba1d1b34@jabberfr.org) (Disconnected: Received SIGTERM)
[12:53:08] <kakuhen> These style warnings disappear when the defclass is compiled and loaded at the top level, that is, we place it inside (eval-when (:compile-toplevel :load-toplevel :execute) ...)
[12:53:34] <kakuhen> But this opens up a can of worms where FIND-CLASS suddenly sets ERRORP to T despite supplying NIL to it. This goes away if you explicitly provide NIL for both ERRORP and ENVIRONMENT
[12:54:58] *** Joins: pranavats (3fba1d1b34@jabberfr.org)
[12:58:31] <beach> kakuhen: I see no trace of the argument to FIND-CLASS having been altered.  I see essentially the same behavior, i.e. that the class is not recognized.  And I think it will take me some time to figure out why.  Others here are usually much faster.
[12:59:59] <beach> kakuhen: Did you try macro expanding some stuff?
[13:00:09] *** prxq_ is now known as prxq
[13:00:35] <kakuhen> Yes. And it seemed fine to me. It was invoking FIND-CLASS exactly as I intended, yet ERRORP would be set to T
[13:00:42] <kakuhen> I am currently working on an example that reproduces this behavior
[13:00:43] <beach> kakuhen: And, again, your examples don't show how you compiled and/or loaded the file containing the macro definitions.
[13:01:02] <kakuhen> ah... I'm running C-c C-c in SLY, and I denoted in the file where I have compiled both
[13:01:12] <kakuhen> that corresponds to compile and loading a region
[13:01:20] <kakuhen> is there a lisp function I can invoke at the REPL to explicitly do this?
[13:01:50] <beach> (load (compile-file ...)) if file-compilation semantics is what you want.
[13:02:04] <kakuhen> That seems like what I want, I'll do that for my next outputs.
[13:02:05] <beach> But I don't know what SLY uses.
[13:02:19] <beach> It might do something entirely different.
[13:03:57] <beach> You say "It was invoking FIND-CLASS", but what makes you so sure about that?
[13:05:01] <beach> And what makes you think that FIND-CLASS should be invoked as you intended, rather than as the system decided to invoke it?
[13:06:55] <kakuhen> beach: here is a working example where FIND-CLASS mysterious gets ERRORP set to T http://0x0.st/-WyX.lisp
[13:07:03] <kakuhen> I will post the output from CCL soon, and this time I am compiling and loading at the REPL.
[13:07:30] <beach> There is also the question of what the current package is at compile time.
[13:09:40] *** Quits: dsk (~dsk@user/dsk) (Ping timeout: 272 seconds)
[13:10:31] <kakuhen> CCL output http://0x0.st/-WyK.txt and the debugger with a full backtrace http://0x0.st/-Wy8.txt
[13:10:43] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 244 seconds)
[13:10:51] *** Quits: peterhil (~peterhil@mobile-access-b04815-181.dhcp.inet.fi) (Ping timeout: 252 seconds)
[13:10:59] <kakuhen> beach: in the latter link, you will see immediately in the backtrace (FIND-CLASS BAR* T NIL)
[13:11:14] <kakuhen> I expect (FIND-CLASS BAR* NIL NIL) to be supplied since my macro calls (FIND-CLAS BAR* NIL)
[13:12:05] <beach> Yes, but I have no reason to believe that this error is a result of your own call to find-class.
[13:12:30] <kakuhen> Here's what a macroexpansion does. http://0x0.st/-WyP.txt
[13:12:35] <beach> It happens when the DEFMETHOD form is evaluated.
[13:14:47] <kakuhen> Wouldn't that imply the DEFMETHOD form is evaluated before my own FIND-CLASS call?
[13:14:57] <kakuhen> It's not obvious to me why that would happen
[13:15:49] <beach> Not necessarily.  The  DEFMETHOD macro probably turns names into classes.
[13:16:05] <beach> Whereas your FIND-CLASS call is not evaluated until load time.
[13:17:07] <kakuhen> Okay, I guess that settles the issue with the FIND-CLASS call. This convinced me that my earlier interpretation is incorrect.
[13:17:22] <kakuhen> Thank you for being patient with me by the way
[13:17:33] <kakuhen> Now my remaining question is the cause of the style warnings.
[13:17:47] <beach> Anyway, the FIND-CLASS call is not yours.  it is done by the call to ENSURE-METHOD.
[13:19:38] <beach> I could be wrong about the details, but I am pretty sure of the last thing.
[13:20:11] <beach> Even if your call to FIND-CLASS is evaluated before the defmethod form, you would not see any output from your find-class call.
[13:20:12] <kakuhen> I would like to correct myself on what I said at 01:23 PDT. The FIND-CLASS call that ultimately signals an error does not occur when I specify (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE) in my eval-when block. It occurs when I am missing the :EXECUTE symbol
[13:21:07] <kakuhen> So this error is more due to myself misusing / not understanding what happens when I use EVAL-WHEN with specific arguments
[13:21:08] *** Joins: peterhil (~peterhil@mobile-access-5d6aaf-196.dhcp.inet.fi)
[13:21:40] <beach> Also, every new attempt must be done in a fresh image, or else, you may have altered the global state of your environment in previous attempts.
[13:22:29] <kakuhen> Yes. When I made the separate examples, I made sure to restart my lisp image and delete the FASLs generated by the compiler
[13:22:37] <kakuhen> I did leave  the alexandria FASLs untouched, however.
[13:22:53] <beach> That should still work.
[13:25:09] *** Joins: Melantha (~pyon@user/pyon)
[13:34:18] *** Joins: makomo (~makomo@user/makomo)
[13:36:45] <kakuhen> lotuseater: The reason I have a macro that calls %foo is so that I can pass symbols as arguments. I originally had FOO as a function in my actual code, but ALEXANDRIA:SYMBOLICATE would then complain that I supplied neither a symbol nor a string.
[13:37:26] <beach> Anyway, that backtrace that confused you reminded me of a rule I made for SICL system code (but that I have not had the energy to implement entirely yet), namely that if a standard operator A calls another standard operator B, then A should make sure that B succeeds or else capture any errors by B so that the ultimate error is signaled in terms of A.
[13:37:55] *** Joins: scymtym (~user@p200300c09f028570585033514448f6fd.dip0.t-ipconnect.de)
[13:38:18] <beach> If that rule had been followed here, you would not have seen a call to FIND-CLASS in the backtrace.
[13:39:34] <beach> kakuhen: It would be much preferable if you could eliminate a lot of extraneous stuff to provide a minimal example.  Those macro combinations, and the call to Alexandria make it harder to follow.
[13:41:01] <kakuhen> What I provided in http://0x0.st/-Wy-.lisp is enough to reproduce the warning, but I will attempt removing the call to Alexandria right now. Unfortunately, I am unable to reproduce the style warnings unless I have those macro combinations. The style warnings happen when FOO is called, but not when %FOO itself is called.
[13:41:59] <beach> But is the restart-case really necessary?
[13:42:06] <beach> [for instance]
[13:42:52] <kakuhen> Yes. In my original code, there is a scenario where a condition I made gets signalled, and the user has two choices to restart.
[13:43:10] <beach> I meant for the messages and errors you see.
[13:43:16] <beach> Not for your application.
[13:43:27] <beach> That's what I mean by simplifying the test case.
[13:44:08] <pjb> kakuhen: http://0x0.st/-Wy-.lisp works for me: http://termbin.com/zlqg
[13:44:34] <beach> So, this example again shows that support for debugging is not great, at least in the free Common Lisp implementations.
[13:45:07] <kakuhen> beach: Unfortunately, the style warnings do not appear without the RESTART-CASE macro.
[13:45:11] *** Joins: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[13:45:41] <kakuhen> So perhaps there is something about that macro that causes this. Interestingly enough, ECL does not complain at all. It's just CCL that complains, and SBCL complains even louder by giving twice as many style warnings as CCL.
[13:45:57] *** Quits: igemnace (~ian@user/igemnace) (Ping timeout: 245 seconds)
[13:47:22] <pjb> beach: note: this rule about where to signal or re-signal errors from, should be different when you are debugging the implementation.  often I have code that will use either handler-case or handler-bind (notably in tests) depending on what you want to debug (eg. the tested code, or the tests).
[13:47:49] <beach> Yes, I am talking only about the application programmer here.
[13:48:54] *** Quits: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 276 seconds)
[13:48:54] <pjb> I understand. But when you implement the rule, you need to make it optional because the code and conditions are also used by implementers.
[13:49:40] <beach> I see what you are saying.
[13:50:50] <beach> Also, I would like to see the backtrace not mention the particular operator that was invoked, because the operator that failed could be the result of a macro expansion, and that would be (is?) confusing to the application programmer.
[13:51:20] <kakuhen> pjb: hmm... on my side I am getting warnings, though, even when I run the REPL in a terminal rather than SLY
[13:51:28] <kakuhen> http://0x0.st/-Wyj.txt
[13:51:36] <beach> Instead, the tentative plan is to show the source form (as highlighted text in the source code) that caused the problem.
[13:59:58] *** Joins: igemnace (~ian@user/igemnace)
[14:01:53] <pjb> kakuhen: I use   (proclaim '(optimize (safety 3) (debug 3) (space 0) (speed 0) (compilation-speed 3)))
[14:02:55] <kakuhen> The style warning goes away when I use those options
[14:03:37] <kakuhen> I'm starting to think backquoting restart-case is just giving me more trouble than what it's worth
[14:05:30] *** Quits: igemnace (~ian@user/igemnace) (Read error: Connection reset by peer)
[14:07:04] <pjb> kakuhen: https://termbin.com/xr0o2  ; probably the warning occurs when the implementations tries to perform compilation-time optimization that would require the class to be defined, which it cannot do without evaluating the defclass that is in the progn.  It cannot do that because it's in a single progn form; but should be able to do, because it's a toplevel progn form, so it could be spliced out.
[14:07:21] <pjb> kakuhen: in conclusion, I think the warning is a bug in those compilers.
[14:07:52] <hayley> Is there much I can do to make it more likely that I can handle a STORAGE-CONDITION (for running out of memory) rather than crashing the Lisp implementation?
[14:08:15] <pjb> hayley: depends on the implementations, and on your application…
[14:08:18] <kakuhen> pjb: one of my friends speculated this, since sbcl and ccl apparently share some common history with their compilers, and both have very similar behavior when running this macro, yet ECL didn't
[14:08:29] <hayley> For example, (handler-case (loop collect 2) (storage-condition () 'no)) crashes into LDB rather than signalling on SBCL.
[14:08:41] <pjb> hayley: one trick could be to allocate some vector, and when you get this storage-condition, to release the last reference to that vector to free some space.
[14:08:45] <hayley> pjb: Yes, hence the probabilistic phrasing of my question.
[14:09:00] <pjb> hayley: that should require a minimum of space to perform, but the question is whether it will be enough to continue.
[14:09:59] <pjb> hayley: somebody did an evaluation of the handling of storage-condition in various implementation when usenet cll was still a thing, but nothing moved since.
[14:10:13] <hayley> If I cons up larger objects then I seem to have a better chance on SBCL.
[14:10:17] <pjb> hayley: somebody would have to provide patches to the implementations. So far it has been easier to just buy more RAM.
[14:11:09] <hayley> pjb: My current "threat model" is that we are overwhelmed with messages on a server, and so we run out of memory allocating objects for them all. To handle it, we would probably kill threads which try to run out of memory.
[14:11:15] <pjb> One problem is that the storage-condition handler may require some memory to work.  If the heap is already overextended, it may be difficult. So the implementation should reserve some space for the handlers in this situation.
[14:12:05] <hayley> Given that such message objects would be large, maybe with large strings or byte vectors, it seems I would have a good chance on SBCL.
[14:15:19] *** Joins: kevingal (~quassel@2a02:8084:4140:f300:60a6:d0c5:4d01:36c6)
[14:15:32] <hayley> It appears SBCL reuses one SB-KERNEL::HEAP-EXHAUSTED-ERROR object.
[14:15:33] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Ping timeout: 276 seconds)
[14:15:37] <flip214> hayley: well, you could mmap() your message files and have your OS swap them in/out as needed?
[14:16:09] <flip214> might not be as easy to handle as strings or ub8 vectors... don't know what you need, though.
[14:16:20] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[14:17:20] <hayley> I meant messages coming over a network, which would probably tend to be small.
[14:18:51] <hayley> I already have a message size limit, but one could just send more messages at that size limit on multiple connections (and thus threads; I guess every other multiplexing model looks a bit nicer with this problem) and blow the heap that way.
[14:19:25] <flip214> well, just use the TCP buffers then - only operate on a limited number of messages
[14:19:39] <flip214> the others are kept in local and remote TCP buffers
[14:20:05] <flip214> so if you know how much heap you need per message, and the size of your heap, you can restrict the number of parallel threads and be done
[14:20:39] <flip214> Hunchentoot-QUUX for HTTP gives you a thread pool, for example
[14:20:53] <hayley> Right. I don't think I know how much heap I need per message, and it would hurt my head too much to use only TCP buffers.
[14:21:09] <moon-child> I would change the variable there and say, rather, you know how much heap you need per message, and the number of cores your machine has; so you know the size your heap needs to be
[14:21:24] <moon-child> hayley: you may not know exactly, but it should not be overly difficult to come up with a conservative estimate, no?
[14:22:04] *** Joins: igemnace (~ian@user/igemnace)
[14:22:34] <hayley> I don't know what my server will be used for, and so I could only say something between 10² and 10⁷ bytes per message?
[14:25:26] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Ping timeout: 258 seconds)
[14:26:28] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[14:27:28] <hayley> So, taking the maximum limits the throughput substantially if that is not the case, but a more conservative estimate would be too conservative. Hence why I would like a more...I suppose "feedback"-driven approach?
[14:27:44] <moon-child> I don't think this kind of probabilistic approaches to security is the right one.  Is it better that you have (say) an 80% chance of signalling a condition than a 5% chance?  Marginally.  But if the implementation is unwilling to _reliably_ signal such a condition, I think it is better to accept that as a constraint and look for an alternative solution (or, patch the implementation, as pjb
[14:27:46] <moon-child> suggests)
[14:29:02] <hayley> I would consider it to be a performance hack, as there is no security (or progress, for that matter) lost if the server crashes outright, but I would prefer to only kill one connection rather than all of them.
[14:29:10] <moon-child> for instance, separate your server into multiple processes and use the operating system to coordinate them
[14:29:21] <flip214> hayley: run (TIME (process-one-message)) - the output will tell you how much heap was allocated. round up, and estimate.
[14:30:11] <flip214> also, you can have a background thread monitoring heap usage - but then you'll need to find out which thread to kill...
[14:31:16] <flip214> depending on your usecase (needs IO, or not) it might be easier to just limit number of thread == number of cores. then every thread can process a message without any wait time => minimum latency, minimum heap usage.
[14:31:45] <flip214> works for me with PDF generation - there's no IO involved, just CPU, so there's no reason to have more threads than can run at the same time.
[14:33:20] <moon-child> I think a server must of necessity do a lot of i/o.  But I think the usual approach there is to just have one i/o thread which receives connections and pushes them onto a work queue; and to do writing asynchronously
[14:34:11] <hayley> I can't seem to understand anything that isn't "straight line" networking code with threads, such as using some callback async library or polling or whatnot. Then writing it is daunting.
[14:34:42] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Ping timeout: 245 seconds)
[14:35:29] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[14:36:13] <flip214> hayley: SB-EXT:CALL-WITH-TIMING can give you a :BYTES-CONSED result, so your threads can (over time) estimate their memory use themselves ;)
[14:37:03] <flip214> moon-child: I meant disk-IO that would block worker threads. as soon as an HTTP request has arrived, all the work until pushing the result might be possible without any IO.
[14:37:38] <moon-child> ah, yes.  Usual approach for this is coroutines, but I don't think we have any cl implementations that support them
[14:37:41] <flip214> moon-child: HT-QUUX uses an acceptor thread and a pool of worker threads.
[14:38:22] <moon-child> (of course, come closos, plain threads will be cheap enough it won't matter.  But who knows then that will be)
[14:38:45] <hayley> Another difference is that I have connections which are expected to be persistent, whereas I can't remember if Hunchentoot supports keep-alive.
[14:39:17] *** Quits: derelict_ (~derelict@user/derelict) (Ping timeout: 252 seconds)
[14:40:13] <flip214> hayley: you can tell HT to ignore a TCP socket - and pass that on to an extra thread.
[14:41:27] <hayley> moon-child: FWIW my secret plan is to prototype "green threads" in a fork of SICL, which would then be somewhat reusable for a thread implementation in CLOSOS.
[14:42:34] <flip214> https://edicl.github.io/hunchentoot/#detach-socket
[14:43:28] <flip214> hayley: green threads - with all the features of OS threads? like scheduling priorities, blocking behaviour for OS calls, timeouts, ...??
[14:44:03] <flip214> I've worked on such a library in C - but it never got up to par on features with kernel threads.
[14:46:21] <hayley> Well, Erlang has priorities, and in the case of CLOSOS, blocking OS calls could be handled with the usual devices (mostly semaphores I suppose).
[14:48:36] <hayley> On a Unix system, I think the Erlang and Haskell people both either attempt to use asynchronous operations or a thread pool for synchronous operations, which still use something like mailboxes to unblock the appropriate thread and provide the result.
[14:49:46] <flip214> IMO that's too much complexity for too few advantages. Just use pthreads.
[14:51:50] *** Joins: tfeb (~tfb@88.98.95.237)
[14:52:32] <hayley> Apparently the fastest servers these days use other async stuff, which is backed by some polling technique (epoll, etc, maybe io_uring if you're fancy). Without some intermediate stuff they don't work too well with threads apparently.
[14:54:43] <flip214> yeah. But if your actual workload (PDFs, for me) take 30-60msec to generate, and I only have a handful of cores (and a handful of threads), the server implementation doesn't actually matter.
[14:55:08] <hayley> Right, that probably isn't my workload though.
[14:55:10] <flip214> of course, the "hello world ~a" examples need to keep the server as small as possible for their benchmarks...
[14:57:46] <flip214> io_uring might make sense for tpd2 or similar
[14:58:51] *** Joins: random-nick (~random-ni@87.116.182.181)
[15:09:58] *** Joins: yitzi (~yitzi@173-27-106-188.client.mchsi.com)
[15:11:53] <kakuhen> pjb: thanks for helping me btw. you too, beach. I'm going to sleep now.
[15:12:06] *** Quits: kakuhen (~kakuhen@user/kakuhen) (Quit: Leaving...)
[15:13:36] *** Quits: attila_lendvai (~alendvai@1F2EFFA5.nat.pool.telekom.hu) (Read error: Connection reset by peer)
[15:13:52] *** Joins: superfly` (~user@80.227.170.170)
[15:13:56] <superfly`> Hi
[15:14:00] *** Joins: attila_lendvai (~alendvai@1F2EFFA5.nat.pool.telekom.hu)
[15:14:25] <superfly`> How are you guys going? Just discovered IRC
[15:14:47] <hayley> Welcome to IRC!
[15:15:20] <superfly`> thanks hayley!
[15:16:01] *** Quits: tfeb (~tfb@88.98.95.237) (Quit: died)
[15:16:12] <superfly`> I have been doing common lisp lately, its fun
[15:19:27] *** Joins: silasfox (~sbv@2001-4dd6-abca-0-de39-b264-6870-a7ee.ipv6dyn.netcologne.de)
[15:21:22] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-10-70-54-112-49.dsl.bell.ca)
[15:27:07] *** Quits: frgo (~frgo@p200300deef181d008872ccea77bb1081.dip0.t-ipconnect.de) (Remote host closed the connection)
[15:27:35] *** Joins: frgo (~frgo@p200300deef181d008872ccea77bb1081.dip0.t-ipconnect.de)
[15:31:07] *** Joins: ahc (~ahc@121.98.229.241)
[15:43:36] *** Quits: akanouras (~akanouras@user/akanouras) (Quit: You have been idle for 30+ days)
[15:46:20] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Ping timeout: 265 seconds)
[15:46:37] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[15:50:10] *** Joins: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[15:50:36] *** Joins: cage (~cage@dynamic-adsl-78-15-35-191.clienti.tiscali.it)
[15:53:06] *** Quits: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 240 seconds)
[15:53:14] *** Quits: scymtym (~user@p200300c09f028570585033514448f6fd.dip0.t-ipconnect.de) (Ping timeout: 256 seconds)
[16:03:54] *** Quits: silasfox (~sbv@2001-4dd6-abca-0-de39-b264-6870-a7ee.ipv6dyn.netcologne.de) (Ping timeout: 240 seconds)
[16:06:46] *** Joins: silasfox (~sbv@xdsl-87-78-183-74.nc.de)
[16:12:16] *** Joins: selwyn (~selwyn@user/selwyn)
[16:13:00] *** Quits: selwyn (~selwyn@user/selwyn) (Remote host closed the connection)
[16:13:26] *** Joins: selwyn (~selwyn@user/selwyn)
[16:19:02] *** Parts: superfly` (~user@80.227.170.170) (ERC (IRC client for Emacs 26.3))
[16:20:07] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Ping timeout: 245 seconds)
[16:20:33] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[16:26:41] *** Joins: rain3 (~rain3___@2a02:2f09:d30b:1300:a270:4060:876f:9f40)
[16:30:45] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Ping timeout: 276 seconds)
[16:34:51] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[16:35:06] *** Joins: Qwnavery (~Qwnavery@61-68-186-232.tpgi.com.au)
[16:42:35] <shka> my buddy superfly is here
[16:45:04] <beach> was.
[16:45:17] *** Quits: Qwnavery (~Qwnavery@61-68-186-232.tpgi.com.au) (Ping timeout: 268 seconds)
[16:51:57] *** Quits: Krystof (~user@81.174.155.115) (Ping timeout: 250 seconds)
[16:53:23] <yitzi> beach: Thanks for the paper reference regarding CL and SICL debugging. Very informative.
[16:53:45] <beach> Sure.  Glad you liked it.
[16:54:42] <yitzi> I noticed that there wasn't a section on CMUCL. From what the user manual and repo says they support stepping and breakpoints, although the stepper was broken until recently.
[16:55:45] <beach> Hmm, I thought I had one.  That's an omission.
[16:57:14] <yitzi> Not sure how well maintained it is though. I can't currently test it in my environment since CMUCL can't load ironclad on my system.
[16:57:32] <beach> Yes, I see.
[16:58:25] <jackdaniel> flip214: kernel threads become troublesome when there are a lot of them (the context switch of a kernel thread is more expensive)
[16:59:41] <yitzi> beach: If you are curious you can run the Jupyter debugger stuff here: https://mybinder.org/v2/gh/yitzchak/common-lisp-jupyter/add-debugging?urlpath=lab
[16:59:42] <jackdaniel> also green threads (when pooled in a single native thread) have assured a certain amount of atomicity
[17:00:00] <yitzi> beach: No offense taken if you aren't.
[17:00:21] <jackdaniel> a side-benefit is that if you bother to implement green threads you will probably have delimited continuations for free
[17:00:41] <jackdaniel> (and with that come numerous interesting programming techniques - i.e generators)
[17:00:43] <flip214> jackdaniel: the continuations are a _requirement_, I guess
[17:00:56] <flip214> with all their own .... challenges ;)
[17:01:03] <jackdaniel> delimited continuations*
[17:01:15] <jackdaniel> full blown continuations require much more work
[17:01:43] <flip214> and with _lots_ of kernel threads you run in all the (already-solved, on the kernel-side) scheduling things - O(1), priorities, fairness, ...
[17:02:20] <beach> yitzi: Not sure what I am looking at, or what to expect.
[17:02:55] <beach> Oh, I got some kind of launcher now.
[17:02:59] <jackdaniel> flip214: yes, and these features have a cost, ditto what I've said earlier
[17:03:30] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-10-70-54-112-49.dsl.bell.ca) (Quit: ERC (IRC client for Emacs 27.2))
[17:03:36] <yitzi> beach: It is slow b.c. it is a free server. Try the "debug.ipynb" in the left pane.
[17:07:18] <hayley> jackdaniel: I thought of green threads in the terms of undelimited one shot continuations.
[17:08:48] *** Joins: Bike (~Glossina@71.69.170.70)
[17:08:48] *** ChanServ sets mode: +o Bike
[17:08:48] <beach> yitzi: Yes, I can use it.  Nifty!
[17:10:14] <yitzi> beach: In addition to debugging, stepping, source and variable inspection there is also symbol completion and help/inspect. Along with a widgets and pile of other stuff.
[17:10:33] <beach> Wow, very ambitious.
[17:11:32] <yitzi> The debugging is still a work in progress. The other stuff is pretty well tested and used by drmeister's group. There is also a maxima-jupyter kernel available based on the same code.
[17:11:40] *** Joins: Krystof (~user@81.174.155.115)
[17:12:21] <beach> You have been hard at work.
[17:13:53] <jackdaniel> hayley: what is an "undelimited one shot" continuation?
[17:14:13] <jackdaniel> delimited continuation is the continuation that can't go backwards
[17:14:40] <yitzi> beach: Yep. I've already started tweaking some of the debug messaging based on some your ideas. Thanks again!
[17:14:41] <jackdaniel> i.e you can't rewind it to three instructions before
[17:15:35] <hayley> jackdaniel: Just a snapshot of all machine registers.
[17:16:01] <jackdaniel> I don't understand
[17:16:15] <hayley> I read a delimited continuation was a continuation which was "delimited" to some frame with shift/reset.
[17:18:04] <jackdaniel> in non-scheme terms, a delimited continuation is a computing context that may be resumed, and after resuming it may yield control again (and be resumed again)
[17:18:30] <Bike> "one shot" means you can only use it once, like because the stack isn't copied so it will no longer be in place if you try to continue there later. so register saving works.
[17:18:44] <jackdaniel> I see ,thanks
[17:19:56] <hayley> I /guess/ we are delimited by THREAD-YIELD (and preemptive scheduling) but it doesn't fit how they are presented in Scheme land in my opinion.
[17:22:02] <Bike> i don't think threads are really "delimited continuations". the way the continuations given by shift work, they add to the current call stack, so they return like normal functions (to muddle several levels of description)
[17:22:05] <jackdaniel> so if the stack is not copied and you allow yielding, then how does it work? all threads  share the same stack?
[17:22:24] <Bike> i t hink they have different stacks?
[17:22:45] *** Quits: silasfox (~sbv@xdsl-87-78-183-74.nc.de) (Ping timeout: 252 seconds)
[17:23:32] <jackdaniel> OK, makes sense
[17:23:43] <hayley> Each thread has a separate stack, and yielding saves state, returns to some scheduler, then loads the new state.
[17:23:53] <jackdaniel> I didn't say that delimited continuations are threads, I'm saying that cooperative threads may be implemented with delimited continuations
[17:24:39] *** Joins: silasfox (~sbv@2001-4dd6-8e13-0-6f0d-fa0c-ffdd-c563.ipv6dyn.netcologne.de)
[17:25:05] <hayley> But my observation was the only green thread implementation with continuations uses undelimited continuations once, as I couldn't spot the delimiting.
[17:25:18] <Bike> is the high limit, like, the scheduler?
[17:25:37] <hayley> Somehow delimited continuations are harder for me to understand than undelimited even though the former is supposedly much better to use.
[17:25:45] *** Joins: recordgroovy (~recordgro@c-67-185-152-122.hsd1.wa.comcast.net)
[17:25:55] <Bike> no, i think delimited continuations are definitely harder to understand
[17:26:22] <hayley> The former does some stack knotting, whereas the latter is a funny first class GOTO.
[17:26:22] <Bike> they have some interesting advantages over undelimited, but simplicity is not one of them
[17:28:00] <jackdaniel> I will read on that later, but some loose searching seems to indicate, that one-shot continuations are a certain class of delimited continuations
[17:28:09] <jackdaniel> s/class/subclass/
[17:28:35] <Bike> you can definitely have one shot undelimited continuations
[17:28:45] <Bike> cl:block sort of does that, though with only dynamic extent
[17:29:05] *** Parts: pranavats (3fba1d1b34@jabberfr.org) (Disconnected: Received SIGTERM)
[17:30:27] <Bike> and most hagiographies of delimited continuations emphasize their composability which kind of goes with reusability
[17:30:28] <jackdaniel> continuations that can be called multiple times are full continuations, one-shot may be resumed only once and delimited capture the entire /remaining/ continuation; that's what I've grasped from this quick search
[17:30:53] <Bike> i think that depends on what you mean by "remaining"
[17:30:54] <jackdaniel> but as stated, I will read on that later
[17:31:07] <jackdaniel> thanks for pointers
[17:31:12] <hayley> I think get/setcontext in POSIX-2001 manipulate one shot undelimited continuations, as they are just all the registers as described previously.
[17:31:41] <Bike> i would say they area, yeah.
[17:31:47] <Bike> they are*
[17:31:58] <hayley> Bike: "hagiographies" I like your words, magic man.
[17:33:23] <hayley> Before I was going to say setjmp/longjmp but those are mere escape continuations as I understand how you are supposed to use them.
[17:33:46] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Ping timeout: 240 seconds)
[17:33:54] * hayley has only used setjmp to get GC roots to this day.
[17:34:00] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[17:34:36] *** Joins: pranavats (3fba1d1b34@jabberfr.org)
[17:34:47] <Bike> yeah longjmp has the "UB if the function that used setjmp has returned" bit, so they're only an escape
[17:39:00] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Ping timeout: 276 seconds)
[17:39:52] *** Joins: amb007 (~a_bakic@179.146.204.77.rev.sfr.net)
[17:50:27] *** Joins: ldb (~user@user/ldb)
[17:50:32] <ldb> hello
[17:56:33] *** Quits: silasfox (~sbv@2001-4dd6-8e13-0-6f0d-fa0c-ffdd-c563.ipv6dyn.netcologne.de) (Ping timeout: 276 seconds)
[17:57:50] *** Joins: silasfox (~sbv@2001-4dd6-abca-0-de39-b264-6870-a7ee.ipv6dyn.netcologne.de)
[17:58:13] *** Parts: pranavats (3fba1d1b34@jabberfr.org) (Disconnected: Received SIGTERM)
[18:05:57] *** Joins: pranavats (3fba1d1b34@jabberfr.org)
[18:07:45] <pjb> Bike: like block/return-from indeed.
[18:12:03] <rain3> a 2 hours long video from Atlanta Functional Programming - Common Lisp Study Group youtube channel can be condensed in 1-5 pages of good old text tutorial which in turn can be studied in 10-30 minutes instead of 2-6 hours of listening and watching and pausing and scrolling
[18:12:51] <rain3> interesting stuff there https://www.youtube.com/watch?v=tcmY7zstig4 but it takes too long to watch a 2h long video for only 10 minutes of essential info
[18:13:04] <ldb> play in 2x speed
[18:14:31] <jackdaniel> writing tutorials is a solitary activity while study group is a social activity
[18:14:48] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[18:15:48] <jackdaniel> so while the former purpose is teaching, the latter purpose is socializing (in my understanding)
[18:15:59] *** Quits: silasfox (~sbv@2001-4dd6-abca-0-de39-b264-6870-a7ee.ipv6dyn.netcologne.de) (Ping timeout: 252 seconds)
[18:16:49] <rain3> socializing around good content which can be summarized as a high quality tutorial , either before or after the meeting
[18:17:25] <jackdaniel> since you've watched it you may write a high quality tutorial then ;)
[18:17:45] <rain3> that's the problem, I haven't watched it because it's too arduous and inefficient
[18:17:57] <rain3> I'd rather read the sourcecode
[18:18:02] <rain3> and the papers
[18:18:38] <jackdaniel> ah, that's a shame; perhaps you could write a high-quality tutorial or a paper on another topic related to lisp; I'd gladly read it
[18:18:54] <ldb> there is nothing mandatory for reading
[18:19:07] <ldb> could there be alternative source
[18:19:08] <lotuseater> I skipped through it, is ":filter :something" a method-combination? wasn't aware they can be done that way, but I think because I didn't define ones myself yet
[18:20:02] <ldb> lotuseater: that's probably optional argument lists, I don't think you need method-combination for that
[18:20:15] <lotuseater> hmm :)
[18:20:27] <Bike> what's the context?
[18:20:49] <rain3> jackdaniel: on the other hand your CLIM videos are from beginning to end golden and enjoyable, good and efficient for teaching others
[18:21:34] <lotuseater> they have something like (defmethod stack-push :filter :number ((stack (eql 'normal))) ...)
[18:21:39] <jackdaniel> thanks
[18:22:05] <jackdaniel> they are not followed with tutorials neither though
[18:22:40] <rain3> yes but they are done differently
[18:22:48] <rain3> they are video tutorials in themselves
[18:22:53] <ldb> lotuseater: ok that's indeed method combination type
[18:23:08] <beach> Those would be method qualifiers.
[18:23:31] <beach> clhs defmethod
[18:23:31] <specbot> http://www.lispworks.com/reference/HyperSpec/Body/m_defmet.htm
[18:23:33] *** Quits: taiju (~taiju@M014013236064.v4.enabler.ne.jp) (Remote host closed the connection)
[18:23:49] *** Joins: taiju (~taiju@240b:253:ec40:2400:4582:f12e:efff:b6a0)
[18:25:11] <jackdaniel> that's nice to hear; either way preparing a tutorial after giving a talk is an extra work - if someone does that it is fine; but expecting it from that person is a bit much
[18:27:06] <rain3> I am not asking for it.. I am only pointing out that the same thing can be done more efficiently . If you have the tutorial prepared before, then you don't need to waste time thinking and fighting with bugs  'sorry, it didn't work, we'll try again in the next video'
[18:27:39] <rain3> in a video about the Cells library it happened
[18:31:07] <Bike> those are qualifiers for a custom method combination
[18:35:13] *** Quits: amb007 (~a_bakic@179.146.204.77.rev.sfr.net) (Read error: Connection reset by peer)
[18:35:44] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[18:40:20] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Ping timeout: 265 seconds)
[18:41:04] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[18:41:28] *** Quits: ahc (~ahc@121.98.229.241) (Ping timeout: 246 seconds)
[18:49:02] *** Quits: eta (~eta@chat.i.eta.st) (Quit: changing)
[18:49:26] *** Joins: eta (~eta@chat.i.eta.st)
[18:52:27] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 276 seconds)
[19:09:16] *** Quits: ldb (~user@user/ldb) (Remote host closed the connection)
[19:09:31] *** Joins: ldb (~user@user/ldb)
[19:21:00] *** Joins: mister_m (~user@c-73-110-154-209.hsd1.il.comcast.net)
[19:21:05] <pjb> rain3: totally agree, videos are two slow in general.  However it is not necessarily a bad thing: 1- you can listen to them in parallel to some other task.  2- sometimes you're not working at 100% of your capacities yourself, so it's not so bad they're a little slow. 3- it can give you an excuse for such a slow day.
[19:21:41] <pjb> (and you can always play them at 2x, even if one may sometimes regret there's not an option to play them at 10x).
[19:22:59] <pjb> Perhaps somebody at google will implement an AI to summarize a video, and transform it into a multimedia stream that could be absorbed by brains in high speed.  Or perhaps we'll have to wait for neuralink to provide the brain downloading feature…
[19:23:11] <rain3> the video above actually was quite good in comparison with others. I've downloaded them so that I can play at 10x with vlc player , then I deleted all of those which only had examples from the readme of the lib
[19:23:15] *** Quits: treflip (~user@95.79.32.99) (Remote host closed the connection)
[19:28:53] *** Joins: tfeb (~tfb@88.98.95.237)
[19:29:18] *** Joins: Josh_2 (~user@37.25.47.130)
[19:31:24] *** Quits: Th30n (~Th30n@cpe-188-252-157-241.zg5.cable.xnet.hr) (Quit: WeeChat 3.2)
[19:42:04] *** Quits: ldb (~user@user/ldb) (Ping timeout: 258 seconds)
[19:42:05] *** Quits: tfeb (~tfb@88.98.95.237) (Quit: died)
[19:43:13] *** Joins: zacts (~zacts@user/zacts)
[19:46:25] *** Joins: zos (~zos@ool-457a8044.dyn.optonline.net)
[19:47:16] *** Joins: ldb (~user@user/ldb)
[19:48:17] *** Joins: hafat (~hafat@95.70.168.45)
[19:51:22] *** Quits: ldb (~user@user/ldb) (Ping timeout: 245 seconds)
[19:57:23] *** Joins: ldb (~user@user/ldb)
[19:57:54] *** Joins: hendursaga (~weechat@user/hendursaga)
[20:02:01] *** Quits: ldb (~user@user/ldb) (Ping timeout: 265 seconds)
[20:02:09] *** Quits: hafat (~hafat@95.70.168.45) (Quit: Leaving)
[20:04:11] *** Joins: Lycurgus (~juan@cpe-45-46-140-49.buffalo.res.rr.com)
[20:06:20] *** Joins: Inline (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431)
[20:06:39] <zos> Hello all, I am interested in learning common lisp. I have started working my way through Practical Common Lisp. Right now I am using SBCL with Doom Emacs. In some tutorials I have come across mentions of roswell and am wondering if it is worth setting up from the start.
[20:07:47] *** Joins: ldb (~user@user/ldb)
[20:07:47] <rain3> it's good to set it up so that you can easily switch between different versions of SBCL when needed
[20:07:49] <beach> zos: Welcome to #commonlisp
[20:08:05] <zos> thanks you!
[20:08:26] <beach> zos: I have been using SBCL for decades and never saw the use for Roswell.
[20:08:32] <rain3> and I am not a roswell guy, I have been avoiding it
[20:08:53] <beach> zos: If I were you, I would wait until it is needed.
[20:08:54] <Lycurgus> anybody can speak from current state?
[20:09:01] <rain3> beach's advice is the best
[20:10:20] <Lycurgus> i believe in n chances, especially if somebody else does the m+1 of them, in my case m is like 2 -4
[20:10:54] *** Joins: srhm (~ascii@user/srhm)
[20:11:03] *** Quits: zacts (~zacts@user/zacts) (Quit: zacts)
[20:11:30] <Lycurgus> in FOSS ofc, not in the corporate
[20:11:42] *** Joins: derelict_ (~derelict@user/derelict)
[20:12:04] <beach> Lycurgus: What is the context?
[20:12:33] <Lycurgus> assesment of roswell
[20:12:44] *** Quits: ldb (~user@user/ldb) (Ping timeout: 272 seconds)
[20:12:46] <Lycurgus> *assessment
[20:12:57] <zos> That sounds like good advice - it is going to take some time before I am likely to need to worry about deployment. Thank you for your help
[20:14:07] <beach> zos: #commonlisp is not really for newbie questions, in case you want to ask such questions at some point.  They are tolerated though, and if they become too trivial or too numerous, you might be asked to go to #clschool.
[20:14:21] <beach> Then, you might not need any of that at all of course.  Just saying.
[20:15:00] <zos> Ok, I will keep that in mind. Thank you again
[20:15:13] <beach> Pleasure.  Good luck!
[20:17:36] *** Joins: ldb (~user@user/ldb)
[20:22:03] *** Quits: ldb (~user@user/ldb) (Ping timeout: 252 seconds)
[20:27:25] *** Joins: ldb (~user@user/ldb)
[20:30:21] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[20:32:17] *** Quits: ldb (~user@user/ldb) (Ping timeout: 258 seconds)
[20:33:03] *** Quits: jealousmonk (~jealousmo@brettgilio.com) (Ping timeout: 258 seconds)
[20:33:30] *** Quits: krjst (~krjst@2604:a880:800:c1::16b:8001) (Ping timeout: 240 seconds)
[20:33:34] *** Joins: silasfox (~sbv@2001-4dd6-abca-0-de39-b264-6870-a7ee.ipv6dyn.netcologne.de)
[20:33:49] *** Quits: Vultyre (~vultyre@user/vultyre) (Ping timeout: 258 seconds)
[20:34:18] *** Quits: energizer (~energizer@user/energizer) (Ping timeout: 252 seconds)
[20:34:24] *** Quits: jeosol (~jeosol@76-238-186-228.lightspeed.hstntx.sbcglobal.net) (Ping timeout: 265 seconds)
[20:36:33] *** Joins: krjst (~krjst@2604:a880:800:c1::16b:8001)
[20:37:55] *** Joins: ldb (~user@user/ldb)
[20:38:44] *** Quits: hhdave (~hhdave@ip212.ip-193-70-71.eu) (Ping timeout: 255 seconds)
[20:39:39] *** Joins: hhdave (~hhdave@ip212.ip-193-70-71.eu)
[20:42:57] *** Quits: ldb (~user@user/ldb) (Ping timeout: 276 seconds)
[20:43:34] *** Joins: dsk (~dsk@user/dsk)
[20:43:36] *** Joins: energizer (~energizer@user/energizer)
[20:44:16] <phantomics> Hi everyone, a question
[20:44:56] <phantomics> When I eval: (defvar foo 123) (let ((set-foo (lambda (x) (setf foo x))) (foo foo)) (funcall set-foo (setq foo 55)) (* foo 3))
[20:45:06] <phantomics> And then I check the value of foo, it's still 123
[20:46:05] *** Joins: jealousmonk (~jealousmo@brettgilio.com)
[20:46:11] <phantomics> Why doesn't the set-foo function defined in the (let) affect the top-level binding of foo? The function is defined before the value inside the (let) form is locally bound to foo
[20:46:24] *** Quits: lad (~lad@user/lad) (Ping timeout: 268 seconds)
[20:46:44] <beach> You can't close over special variables.
[20:48:31] <phantomics> Ok, so this method would work if foo was a lexical variable defined in a (let) form containing the code rather than a special variable?
[20:48:35] <jcowan> And CL, alas, lacks lexically scoped global variables.
[20:48:41] *** Joins: Vultyre_ (~vultyre@user/vultyre)
[20:49:15] <jackdaniel> daily quiz: what's a practical value of (apply foo (car bar) (cdr bar)) compared to (apply foo bar) ;?
[20:49:47] <beach> phantomics: It depends on your definition of "work", but yes, you can close over lexical variables.
[20:50:38] <phantomics> Makes sense, thanks
[20:50:47] <jackdaniel> jcowan: how about (let ((foo 42)) (declare (special foo)))
[20:51:17] <beach> jackdaniel: Do you have an answer to the quiz, or are you out of ideas?
[20:51:54] <jackdaniel> beach: I do
[20:52:19] <jackdaniel> I wouldn't say "quiz" otherwise
[20:53:07] <beach> And BAR is just a variable, yes?
[20:53:16] <jackdaniel> sure
[20:53:38] *** Joins: sgithens (sid10659@id-10659.brockwell.irccloud.com)
[20:54:33] <jcowan> Sure, but my claim was that there are no global lexical variables, as you cannot wrap a let around your program (becaause too many things in it insist on being top-level)
[20:55:27] <jackdaniel> there are file-local-variables (in the standard it is i.e *readtable*, but there is also asdf extension that gives you that)
[20:57:10] <beach> jackdaniel: I can imagine if foo is something like #'apply, and (car bar) is something like #'reduce, but I am not sure.
[20:57:18] <jackdaniel> of course one could argue that the practical application I have in mind can't be considered a good style of programming
[20:57:47] <jackdaniel> but the first assures, that at least one argument is passed to the function
[20:58:01] <jackdaniel> consider a generic function (defgeneric foo (a &rest args))
[20:58:08] <beach> Fair enough.
[20:58:10] <jackdaniel> when bar is NIL, then the arity does not match
[20:58:33] <jackdaniel> however you could specialize the first argument on null as a fallback, and then bar could be nil
[20:58:50] <beach> *sigh* sure.
[21:00:56] <jcowan> *double sigh* for NIL punning in Lisp
[21:04:54] *** Joins: lad (~lad@user/lad)
[21:06:13] <hendursaga> Is Consfigurator and Adams the only configuration management software using CL?
[21:09:13] <pjb> zos: have a look at http://cliki.net/Getting+Started http://cliki.net/Online+Tutorial and in general, http://cliki.net
[21:09:28] *** Joins: j-sh (~j-sh@88.130.155.144)
[21:09:56] <j-sh> What is the current best way to use the GNUstep GUI toolkit (and maybe its RAD tool Gorm) with common lisp?
[21:13:27] <pjb> phantomics: yes, it would work with lexical variables, but the question is why did you make a temporary binding of foo in your let?
[21:14:38] <pjb> phantomics: it's not wrong, that's the point of dynamic variables: they let you shadow temporarily the previous binding, during the execution of a let body.  But the point is that if you want to have the previous binding mutated, you should not temporarily shadow it!!!
[21:15:14] <pjb> (defvar *foo* 123) (values (let ((set-foo (lambda (x) (setf *foo* x)))) (funcall set-foo (setq *foo* 55)) (* *foo* 3)) *foo*) #| --> 165 ; 55 |#
[21:15:36] <pjb> phantomics: without (*foo* *foo*), it works as you wanted, doesn't it?
[21:16:16] <pjb> phantomics: note that defvar declares the variable name as special; this is a global declaration that cannot be removed or shadowed. So it is important to use the earmuff convention foo -> *foo* to avoid damaging the normal variable names.
[21:16:23] *** Joins: dickbar__ (~dickbaren@86-90-132-28.fixed.kpn.net)
[21:16:35] <pjb> Always use *foo* for special variables to avoid hours or days of debugging!
[21:17:05] <beach> j-sh: In the logs for a year back, this is the first time GNUstep is mentioned.
[21:17:46] <pjb> j-sh: the question is difficult.
[21:18:29] <pjb> j-sh: the first problem is that there are different Objective-C runtimes: Apple's runtime, GNU runtime, cocotron runtime (used on MS-Windows I believe).
[21:19:49] <pjb> j-sh: the next problem is the FFI from lisp to Objective-C; there are some nice things: the objc runtime is a pure C API.  There are some more difficult things: depending on the runtime and the libraries or frameworks, it's not always easy to introspect the API; we still have to process the headers, and this is not easy (failproof) to do it automatically.
[21:21:19] <pjb> j-sh: ccl provides a FFI that works with Apple's runtime. I don't know how well it could work with GNU Objective-C runtime.  There's an Objectiev-C FFI that could work with GNU Objective-C  (and possibly cocotron, IIRC), but AFAIK it has bitrotten.
[21:21:52] *** Quits: Lycurgus (~juan@cpe-45-46-140-49.buffalo.res.rr.com) (Quit: Exeunt)
[21:22:18] <pjb> even ccl uses a ffigen that is a patch of Apple gcc version 4 that is entirely outdated and therefore is completely bit-rotten; I don't know how to generate the cdb files ccl FFI requires to deal nicely with frameworks on current systems.
[21:22:46] <pjb> j-sh: so to use CL with GNU objective-c runtime, even less batteries are included.
[21:23:42] <pjb> In short, it's a mess, and we'd need to re-implement from scratch an CL -> Objective-C FFI that would work nicely for all runtimes, and all frameworks.  But it's not a small project.
[21:25:19] <pjb> j-sh: Have a look at this objcl library (which is a reader-macro to give [recipient message:arg with:arg] syntax over ccl objc FFI: https://github.com/informatimago/lisp/tree/master/objcl
[21:27:54] *** Joins: tyson2 (~user@toroon12-3096782677.sdsl.bell.ca)
[21:31:10] <pjb> j-sh: there's also https://www.common-lisp.net/project/cl-objc/
[21:31:11] <phantomics> pjb: I know I'm using weird conventions in this code, that's because it's for the output of my APL compiler, and APL has some odd conventions for implicitly shadowing variables but also has ways of modifying variables at the top level of their scope
[21:33:02] <pjb> j-sh: There was http://benkard.de/objective-cl but it's 404 and no wayback.
[21:33:30] <pjb> phantomics: as long as hide those symbols in their own package, ok.
[21:35:28] *** Joins: hafat (~hafat@95.70.168.45)
[21:36:02] <pjb> j-sh: you can still do something.  Have a look at https://cliki.net/com.informatimago.hangman
[21:36:22] <pjb> j-sh: https://github.com/informatimago/hangman-cocoa-lisp
[21:37:08] <pjb> j-sh: well, http://git.informatimago.com/viewgit/index.php?a=tree&p=public/games/hangman-cocoa-objc&h=6a4c99a8d52e6cdaf08b28dffa67797dab8f9a89&hb=99a80c170985b9b3a753025c00870c63a94cf678 ; I don't know if I left the gnustep version on github.
[21:38:06] <pjb> (nope. the gnustep/ subdir only contains  objective-c code… ; as I said, the problem is difficult and has not been worked on ever)
[21:39:00] <pjb> j-sh: basically, CL is a not used by a lot of programmers.  GNUstep is not used by a lot of programmers.  CL with GNUstep is used by a handful of programmers and we don't have the resources to make any progress on the combination.
[21:39:21] <pjb> j-sh: as beach said, it has been a long time since we talked about GNUstep in #commonlisp
[21:44:07] <lotuseater> but now i learned about GNUstep
[21:47:30] *** Quits: mister_m (~user@c-73-110-154-209.hsd1.il.comcast.net) (Ping timeout: 240 seconds)
[21:51:58] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Read error: Connection reset by peer)
[21:52:45] *** Quits: rain3 (~rain3___@2a02:2f09:d30b:1300:a270:4060:876f:9f40) (Remote host closed the connection)
[21:53:33] *** Joins: rain3_ (~rain3___@2a02:2f09:d30b:1300:a270:4060:876f:9f40)
[21:53:45] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[21:54:26] *** rain3_ is now known as rain3
[22:07:52] <pjb> lotuseater: j-sh: so a first step would be to define a complete FFI to the gnu objective-c runtime, to the apple objectiev-c runtime, and possibly others (cocotron, etc).
[22:08:05] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[22:08:32] <pjb> lotuseater: j-sh: next, define a higher level CL to objective-C interface using introspection and working with all runtimes.
[22:08:52] <pjb> lotuseater: j-sh: finally, use my reader macros to be able to use the nice Objective-CL syntax ;-)
[22:10:09] <pjb> two problems: 1- dealing with C macros in the objc runtime headers. 2- dealing with the various structure layout (packed/not packed, 32-bit/64-bit, and other #ifdef).
[22:10:20] <pjb> this cannot be dealt with with introspection.
[22:11:20] <pjb> (perhaps introspecting the debugging symbols in the shared libraries of the run-time, but this adds a new complexity (gdb symbols, dwarf symbols? what to do if stripped without debugging symbols? etc).
[22:11:43] <pjb> And you can also add to the difficulty by wanting to support iOS…
[22:12:50] *** Joins: nij- (~jin@2001-48F8-9021-806-0-0-0-EC96-dynamic.midco.net)
[22:22:40] <j-sh> pjb Thank you for your extensive answer, I didn't know that it would be that difficult to use CL with GNUstep.
[22:22:41] <j-sh> But I will probably try to solve the issues once I have some time off in the future.
[22:22:41] <j-sh> I personally think that it is a shame that GNUstep didn't get the recognition that something like GTK  (it is even older than GTK AFAIK) got, but I guess there aren't many people that want to touch an Objective-c codebase especially since it has the "Apple stigma" to it and even Apple themselves try as hard as possible to deprecate Objective-C
[22:22:42] <j-sh> and replace it with Swift.
[22:26:15] <pjb> j-sh: well, it's not that it's difficult. It's labor intensive to do something complete.
[22:26:49] <pjb> j-sh: if you just want to send a few message, you really need to FFI a few functions in the runtime.  You can easily do that.
[22:27:10] *** Joins: jeosol (~jeosol@76-238-186-228.lightspeed.hstntx.sbcglobal.net)
[22:27:35] <pjb> j-sh: if there were bindings for other languages to GNUstep, that could indeed make it more popular.
[22:29:10] <j-sh> pjb There are apparently bindings for Java, ruby and Smalltalk, but I'm not sure how much they are maintained.
[22:29:42] *** Quits: zos (~zos@ool-457a8044.dyn.optonline.net) (Quit: Leaving)
[22:30:10] *** Joins: gaqwas (~john@dynamic-095-117-022-153.95.117.pool.telefonica.de)
[22:31:57] <pjb> For example, one problem is that the code used to encode the types are defined with #define in the runtime.h header.  So CL needs either to parse those headers, or to hardwire the encoding for each compiler/runtime.
[22:34:58] <pjb> j-sh: For example, you can cffi:defcfun objc_msgSend and sel_getUid, and then already you can send messages to objects.
[22:35:32] <pjb> but in CL you'd want to be able to introspect the classes and objects. So you'd want the full monty.
[22:36:26] <pjb> j-sh: try: (defclass foo () ((x :initarg :x) (y :initform 42)))   (inspect (find-class 'foo))   (inspect (make-instance 'foo))
[22:37:02] <pjb> you'd want to do the same in CL for Objective-C classes. (even more, since in Objective-C the methods are attached to the classes, so you'd also want to list the methods).
[22:37:20] <pjb> and categories, properties, protocols, etc…
[22:40:19] *** Joins: Fare (~fare@2601:184:4a7f:995c:8cb5:3c64:8b2b:5a1)
[22:47:11] <lotuseater> a C# software developer he could also extend his language or that it couldn't be different in CL ^^ hard to make him clear why not
[22:49:05] <lotuseater> *meant
[22:49:19] *** Quits: hafat (~hafat@95.70.168.45) (Quit: Leaving)
[22:56:29] *** Joins: tfeb (~tfb@88.98.95.237)
[22:58:41] *** Joins: akoana (~ah@user/akoana)
[23:00:35] <lotuseater> he also called CL a niche lang, but I shouldn't care
[23:00:56] *** Joins: IPmonger (~IPmonger@172.58.203.245)
[23:01:10] *** Quits: IPmonger (~IPmonger@172.58.203.245) (Remote host closed the connection)
[23:05:01] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[23:05:03] *** Quits: attila_lendvai (~alendvai@1F2EFFA5.nat.pool.telekom.hu) (Read error: Connection reset by peer)
[23:05:44] *** Joins: attila_lendvai (~alendvai@1F2EFFA5.unconfigured.pool.telekom.hu)
[23:07:36] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-EC96-dynamic.midco.net) (Quit: Using Circe, the loveliest of all IRC clients)
[23:11:05] *** Joins: zos (~zosthegoa@ool-457a8044.dyn.optonline.net)
[23:11:56] *** Joins: jmhimara (~jmhimara@dc-auraria-nat13-08.ucdenver.edu)
[23:14:10] *** Joins: lisp123__ (~lisp123@45.130.83.181)
[23:18:16] *** Quits: Guest39 (~Guest39@194.110.112.10) (Quit: Client closed)
[23:18:56] *** Quits: jmhimara (~jmhimara@dc-auraria-nat13-08.ucdenver.edu) (Quit: Client closed)
[23:22:00] *** Joins: meraz_1 (~meraz_1@190.92.33.253)
[23:25:10] *** Joins: selwyn (~selwyn@user/selwyn)
[23:27:38] <jcowan> Anyone who asks you "But why would you want to do *that*?" when talking about cross-language comparison should be resolutely ignored: nobody "wants" a feature they've never heard of, because they've learned to work around it or not to want it or are simply clueless.  (However, the question does make sense within a single language, because there may well be a different way to achieve the same effect within the language.)
[23:28:19] <lotuseater> yes
[23:29:48] <lotuseater> I also tell that's an experience no one can just tell you, you must make it yourself to really get the difference.
[23:30:26] *** Quits: peterhil (~peterhil@mobile-access-5d6aaf-196.dhcp.inet.fi) (Ping timeout: 268 seconds)
[23:30:46] <lotuseater> and then came "but anyone can hack on the compiler so you also have to"
[23:30:52] *** Quits: tyson2 (~user@toroon12-3096782677.sdsl.bell.ca) (Quit: ERC (IRC client for Emacs 27.2))
[23:36:40] <lotuseater> haha and just because something is used by more people or there are many (aweful) book about it means it's better (just better marketed)
[23:38:38] *** Joins: peterhil (~peterhil@mobile-access-5d6aaf-196.dhcp.inet.fi)
[23:39:35] <jcowan> This is a highly speculative question: can anyone see a use case for a separate class hierarchy allowing you to create generic functions that aren't related to ordinary generic functions?
[23:39:53] <lotuseater> ondeed it is
[23:40:17] <jcowan> Namely?
[23:40:34] <tfeb> lotuseater: 'popular does not mean good: it merely means good at being popular', as someone once said.
[23:40:37] <lotuseater> hm?
[23:40:49] <lotuseater> haha yes tfeb
[23:41:03] <lotuseater> it reminds me of a sentence of Knuth
[23:41:30] *** Quits: rain3 (~rain3___@2a02:2f09:d30b:1300:a270:4060:876f:9f40) (Ping timeout: 240 seconds)
[23:42:48] <aeth> jcowan: already exists, sort of
[23:43:01] <jcowan> ???
[23:43:04] <aeth> not via a separate class hierarchy, though, via types.
[23:43:09] <aeth> jcowan: type-based generic dispatch in CL. https://github.com/markcox80/specialization-store/
[23:43:21] <aeth> types allow you to dispatch on numbers/sequences/arrays that don't necessarily have distinct classes
[23:43:58] <aeth> since you could e.g. (simple-array octet (* *)) as a type for 2D (unsigned-byte 8) arrays (assuming octet is defined as such)
[23:44:22] <aeth> jcowan: I wouldn't be surprised if there are other distinct generic function systems, too, perhaps more close to what you're looking for
[23:45:15] <jcowan> Clojure allows uou to create independent class hierarchies, but I can find no explanation of why you'd want to.
[23:45:29] <aeth> maybe for ORM?
[23:45:37] <aeth> so relations-as-pseudoclasses?
[23:46:06] <aeth> or for a DSL where you don't want to represent the DSL's classes as native classes
[23:46:29] <jcowan> Okay, that last makes sense to me
[23:46:50] <aeth> and perhaps you can't do that, if it's a well-specified language in a way that's incompatible with the host language
[23:47:13] <aeth> but that way at least you can use built-in generics even though you can't use the built-in class hierarchy
[23:48:47] <jcowan> How's that possible?
[23:52:32] *** Quits: tfeb (~tfb@88.98.95.237) (Quit: died)
[23:54:32] <pjb> jcowan: independent class hierarchies are usually an illusion, there's normally a TOP class (eg. T in CLOS).
[23:55:20] *** Quits: dsk (~dsk@user/dsk) (Ping timeout: 252 seconds)
[23:56:19] *** Quits: derelict_ (~derelict@user/derelict) (Quit: WeeChat 3.2)
[23:56:20] <pjb> jcowan: that said, in CLOS, playing with metaclasses, you can probably implement separate subhierarchies according to your wishes.
[23:56:22] <jcowan> But not in C++
[23:56:31] <pjb> Well, C++ is not OO.
[23:57:18] <pjb> but yes.
[23:59:44] *** Quits: srhm (~ascii@user/srhm) (Quit: Konversation terminated!)
