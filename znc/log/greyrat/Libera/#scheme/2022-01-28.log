[00:01:14] *** Quits: shawnw (~shawn_w@152.44.212.188) (Ping timeout: 250 seconds)
[00:02:52] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[00:15:22] *** Quits: yewscion (~yewscion@c-24-131-194-135.hsd1.pa.comcast.net) (Ping timeout: 256 seconds)
[00:17:27] *** Joins: klovett_ (~klovett@107.127.17.177)
[00:19:52] *** Quits: klovett (~klovett@107.127.17.177) (Ping timeout: 250 seconds)
[00:21:42] *** Joins: TCZ (~tcz@91.150.178.124)
[00:26:35] *** Joins: notzmv (~zmv@user/notzmv)
[00:37:03] *** Quits: m455 (~m455@user/m455) (Quit: WeeChat 3.0)
[00:58:40] *** Quits: clacke (88d96f2df3@knopi.disroot.org) (Remote host closed the connection)
[01:00:57] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[01:03:11] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[01:04:56] *** Quits: jao (~jao@static-68-235-44-73.cust.tzulo.com) (Ping timeout: 250 seconds)
[01:07:21] *** Joins: jao (~jao@static-68-235-44-10.cust.tzulo.com)
[01:10:45] *** Joins: alMalsamo (~alMalsamo@gateway/tor-sasl/almalsamo)
[01:33:17] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[01:35:30] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[01:36:44] *** Joins: eMBee (~eMBee@realss.com)
[01:37:41] *** Parts: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1) ()
[01:39:37] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[01:40:44] *** Quits: klf (~klf@66.220.205.98) (Quit: This computer has gone to sleep)
[01:41:49] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[01:46:58] *** Quits: gproto23 (~gproto23@user/gproto23) (Ping timeout: 250 seconds)
[01:50:31] *** Joins: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1)
[01:50:34] *** Quits: neceve (~quassel@2.26.93.228) (Ping timeout: 256 seconds)
[01:59:37] *** Quits: Avichi (~Avichi@2001:980:1b5c:1:5fb:e651:57c7:854e) (Quit: Client closed)
[02:02:22] *** Joins: klf (~klf@66.220.205.98)
[02:09:19] *** Quits: TCZ (~tcz@91.150.178.124) (Quit: Leaving)
[02:16:29] *** Quits: klf (~klf@66.220.205.98) (Quit: Leaving)
[02:25:38] *** Quits: ouestbillie (~gallup@bl16-179-173.dsl.telepac.pt) (Ping timeout: 260 seconds)
[02:27:20] *** Joins: ouestbillie (~gallup@185.195.233.151)
[03:18:41] *** Quits: civodul (~user@guix/contributor/civodul) (Ping timeout: 245 seconds)
[03:26:09] *** Quits: skapate (~Skapata@user/skapata) (Remote host closed the connection)
[03:41:58] *** Joins: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net)
[03:44:55] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Remote host closed the connection)
[03:50:13] <mdhughes> How do magnets work?
[03:51:33] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[04:00:00] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 250 seconds)
[04:02:07] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[04:26:58] *** Quits: ouestbillie (~gallup@185.195.233.151) (Ping timeout: 256 seconds)
[04:28:38] *** Joins: ouestbillie (~gallup@bl16-179-173.dsl.telepac.pt)
[04:55:31] *** Joins: s-liao (~s-liao@101.86.96.21)
[05:07:10] *** Quits: lwhjp (~user@2400:2411:a080:4700:be5f:f4ff:fee9:7fbf) (Remote host closed the connection)
[05:23:41] *** Quits: jao (~jao@static-68-235-44-10.cust.tzulo.com) (Remote host closed the connection)
[05:26:15] *** Quits: xsperry (~xs@user/xsperry) (Remote host closed the connection)
[05:29:32] *** Joins: frost (~frost@user/frost)
[05:33:06] *** Joins: jao (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net)
[05:36:06] *** Joins: skapata (~Skapata@2804:14c:87b0:9d2e:e502:a244:bdcc:aece)
[05:36:06] *** Quits: skapata (~Skapata@2804:14c:87b0:9d2e:e502:a244:bdcc:aece) (Changing host)
[05:36:06] *** Joins: skapata (~Skapata@user/skapata)
[05:36:23] *** Quits: choas (~lars@ppp-188-174-89-52.dynamic.mnet-online.de) (Ping timeout: 250 seconds)
[05:45:31] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[05:57:34] *** Joins: xsperry (~xs@user/xsperry)
[05:58:08] *** Joins: pmwals09 (~pmwals09@c-73-218-223-243.hsd1.ma.comcast.net)
[06:06:06] *** Quits: zwr (~zwr@2804:d45:b966:fb00:1974:a2f:e75f:4c0b) (Ping timeout: 250 seconds)
[06:06:32] *** Quits: webshinra (~shinra@2a01cb080779fc00b3436da62fafc69e.ipv6.abo.wanadoo.fr) (Read error: Connection reset by peer)
[06:06:35] *** Joins: webshinra_ (~shinra@2a01cb080779fc00b3436da62fafc69e.ipv6.abo.wanadoo.fr)
[06:06:58] *** Joins: zwr (~zwr@2804:d45:b966:fb00:1493:7e75:a195:6d65)
[06:16:32] *** Quits: epony (epony@user/epony) (Ping timeout: 240 seconds)
[06:22:24] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[06:23:08] *** Quits: frost (~frost@user/frost) (Ping timeout: 256 seconds)
[06:27:31] *** Joins: frost (~frost@user/frost)
[06:40:28] *** Joins: choas (~lars@ppp-188-174-89-52.dynamic.mnet-online.de)
[07:05:55] *** Quits: frost (~frost@user/frost) (Quit: Connection closed)
[07:06:44] *** Joins: frost (~frost@user/frost)
[07:13:05] *** Joins: s-liao (~s-liao@101.86.96.21)
[07:14:25] *** Quits: terrorjack (~terrorjac@2a01:4f8:1c1e:509a::1) (Quit: The Lounge - https://thelounge.chat)
[07:16:37] *** Joins: terrorjack (~terrorjac@2a01:4f8:1c1e:509a::1)
[07:31:29] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[07:40:37] *** Quits: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net) (Ping timeout: 240 seconds)
[07:43:09] *** Joins: lwhjp (~user@2400:2411:a080:4700:be5f:f4ff:fee9:7fbf)
[07:44:29] *** Quits: pmwals09 (~pmwals09@c-73-218-223-243.hsd1.ma.comcast.net) (Remote host closed the connection)
[07:51:01] *** Quits: choas (~lars@ppp-188-174-89-52.dynamic.mnet-online.de) (Ping timeout: 268 seconds)
[07:52:22] *** Joins: choas (~lars@ppp-188-174-89-52.dynamic.mnet-online.de)
[08:16:01] *** Joins: s-liao (~s-liao@101.86.96.21)
[08:29:22] *** Joins: epony (epony@user/epony)
[08:46:17] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[08:53:37] *** Quits: frost (~frost@user/frost) (Ping timeout: 240 seconds)
[08:55:46] *** Joins: s-liao (~s-liao@101.86.96.21)
[09:01:28] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[09:10:18] *** Quits: choas (~lars@ppp-188-174-89-52.dynamic.mnet-online.de) (Ping timeout: 256 seconds)
[09:28:35] *** Joins: X-Scale` (~ARM@218.92.108.93.rev.vodafone.pt)
[09:29:00] *** Joins: daviid` (~user@179.210.52.91)
[09:29:26] *** Joins: teiresias2 (~chris@blvuug/founder/teiresias)
[09:30:37] *** Quits: jao (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net) (Ping timeout: 240 seconds)
[09:30:38] *** Joins: rudybot_ (~luser@ec2-52-8-12-207.us-west-1.compute.amazonaws.com)
[09:32:38] *** Joins: some02 (~cat@h-98-128-128-173.A351.priv.bahnhof.se)
[09:33:19] *** Joins: klovett (~klovett@107.127.17.177)
[09:36:34] *** Joins: frost (~frost@user/frost)
[09:37:09] *** Quits: klovett_ (~klovett@107.127.17.177) (*.net *.split)
[09:37:09] *** Quits: mzan (~quassel@mail.asterisell.com) (*.net *.split)
[09:37:09] *** Quits: linen (~user@S0106a84e3f501ab3.ed.shawcable.net) (*.net *.split)
[09:37:09] *** Quits: X-Scale (~ARM@218.92.108.93.rev.vodafone.pt) (*.net *.split)
[09:37:09] *** Quits: amk (~amk@109.255.169.126) (*.net *.split)
[09:37:09] *** Quits: Goodbye_Vincent (~Goodbye_V@freakshells.net) (*.net *.split)
[09:37:09] *** Quits: daviid (~user@179.210.52.91) (*.net *.split)
[09:37:09] *** Quits: dstein64 (~dstein64@dannyadam.com) (*.net *.split)
[09:37:09] *** Quits: ski (~ski@remote11.chalmers.se) (*.net *.split)
[09:37:09] *** Quits: joast (~rick@cpe-98-146-112-4.natnow.res.rr.com) (*.net *.split)
[09:37:09] *** Quits: tristero (~nobody@user/tristero) (*.net *.split)
[09:37:09] *** Quits: sudden (~cat@user/sudden) (*.net *.split)
[09:37:09] *** Quits: fgudin_ (~fgudin@sdf-eu.org) (*.net *.split)
[09:37:09] *** Quits: teiresias (~chris@blvuug/founder/teiresias) (*.net *.split)
[09:37:09] *** Quits: rudybot (~luser@ec2-52-8-12-207.us-west-1.compute.amazonaws.com) (*.net *.split)
[09:37:10] *** Quits: emacsomancer (~emacsoman@136.60.128.68) (*.net *.split)
[09:37:10] *** Quits: wingo (~wingo@li270-233.members.linode.com) (*.net *.split)
[09:37:10] *** Quits: wheeler (~josh@useirc.net) (*.net *.split)
[09:37:11] *** X-Scale` is now known as X-Scale
[09:42:50] *** Joins: amk (~amk@109.255.169.126)
[09:42:50] *** Joins: ski (~ski@remote11.chalmers.se)
[09:42:50] *** Joins: mzan (~quassel@mail.asterisell.com)
[09:42:50] *** Joins: dstein64 (~dstein64@dannyadam.com)
[09:42:50] *** Joins: wheeler (~josh@useirc.net)
[09:42:50] *** Joins: tristero (~nobody@user/tristero)
[09:42:50] *** Joins: fgudin_ (~fgudin@sdf-eu.org)
[09:42:50] *** Joins: emacsomancer (~emacsoman@136.60.128.68)
[09:42:50] *** Joins: wingo (~wingo@li270-233.members.linode.com)
[10:21:05] *** Joins: choas (~lars@ppp-188-174-89-52.dynamic.mnet-online.de)
[10:21:51] *** daviid` is now known as daviid
[10:25:12] *** Parts: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1) ()
[10:28:51] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[10:36:11] *** Joins: s-liao (~s-liao@101.86.96.21)
[11:06:45] *** Joins: civodul (~user@guix/contributor/civodul)
[11:17:52] <amazigh> windows? is that still a thing?
[11:28:35] *** Quits: frost (~frost@user/frost) (Quit: Connection closed)
[11:34:14] <sham1> I sure hope not. It makes things a lot harder
[11:38:50] *** Joins: linen (~user@S0106a84e3f501ab3.ed.shawcable.net)
[11:39:10] <ns12> The brittle windows have been shattered by Tux's beak and Beastie's trident.
[11:42:54] <sjamaan> heh
[11:50:47] *** Quits: choas (~lars@ppp-188-174-89-52.dynamic.mnet-online.de) (Ping timeout: 250 seconds)
[11:52:38] *** Joins: choas (~lars@ppp-188-174-89-52.dynamic.mnet-online.de)
[11:58:17] *** Quits: choas (~lars@ppp-188-174-89-52.dynamic.mnet-online.de) (Ping timeout: 240 seconds)
[11:59:00] <ns12> In SICP: "Armies, students, and some societies are programmed." - What does this mean? How are societies programmed?
[11:59:37] *** Joins: choas (~lars@ppp-188-174-89-52.dynamic.mnet-online.de)
[11:59:43] <ns12> How do we program armies, students, and societies using Scheme?
[12:04:31] <sham1> It's the word "programming" used in a less literal sense
[12:05:56] <edgar-rft> SICP is a book about programming, it uses Scheme only as an example language, and Scheme itself is too powerless to program people.
[12:06:45] <ns12> I still don't understand what that quote means. Why are "some societies programmed"? Does this imply that some societies are not programmed? What does it mean for a society to be programmed vs. not programmed?
[12:06:49] <mdhughes> You can always program people with a scheme.
[12:08:28] <edgar-rft> true, but not with the programming language named Scheme
[12:11:59] <ns12> What programming language can I use to program "armies, students, and some societies"?
[12:12:33] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[12:12:36] <ns12> sham1: Does it use "programming" in the sense of "programming = brainwashing"?
[12:13:21] <sham1> For instance
[12:18:01] <edgar-rft> most societies run after some program formed from social agreement and legislation, a societiy not running after a program is for example anarchy
[12:19:04] <edgar-rft> ...and there is of course no programming language where humans can be programmed with
[12:23:06] *** Quits: choas (~lars@ppp-188-174-89-52.dynamic.mnet-online.de) (Ping timeout: 250 seconds)
[12:29:47] *** Joins: choas (~lars@ppp-188-174-89-52.dynamic.mnet-online.de)
[12:30:58] *** Joins: karlosz_ (~karlosz@47.151.136.69)
[12:50:30] *** Joins: s-liao (~s-liao@101.86.96.21)
[12:52:02] *** Quits: choas (~lars@ppp-188-174-89-52.dynamic.mnet-online.de) (Ping timeout: 240 seconds)
[13:03:34] *** Joins: jeko (~jeko@2a01:e0a:25f:d8f0:ce49:2fd7:836a:cd7)
[13:14:32] *** Quits: grettke (~grettke@cpe-65-29-228-30.wi.res.rr.com) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[13:32:37] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[13:38:43] <sm2n> ns12: Everything is a computation if you look at it hard enough
[13:39:01] *** Joins: choas (~lars@ppp-188-174-89-52.dynamic.mnet-online.de)
[13:47:58] *** Joins: gproto23 (~gproto23@user/gproto23)
[13:54:12] *** Quits: karlosz_ (~karlosz@47.151.136.69) (Quit: karlosz_)
[13:54:40] <mdhughes> edgar-rft: No such language YET.
[13:57:47] <Franciman> is there a trie implementation in scheme?
[13:58:01] <ecraven> well, read Snow Crash :P
[13:59:42] <mdhughes> Remember how we joked about doing cond in JS? https://old.reddit.com/r/LispMemes/comments/sen9yu/so_sicp_js_edition_is_out_now_lets_take_a_look_at/
[14:00:10] <edgar-rft> mdhughes: I'm eagerly awaiting r8rs to include Ponzi Scheme
[14:01:12] <ecraven> wow, that ? : ? : mess seems.. non-intuitive :P
[14:08:41] *** Quits: ouestbillie (~gallup@bl16-179-173.dsl.telepac.pt) (Remote host closed the connection)
[14:10:48] *** Quits: klovett (~klovett@107.127.17.177) (Quit: ZZZzzz…)
[14:15:58] *** Joins: ouestbillie (~gallup@bl16-179-173.dsl.telepac.pt)
[14:16:49] <mdhughes> Also for programming people, John Barnes has a book series, Orbital Resonance, Kaleidoscope Century, Candle, The Sky So Big and Black, about that. It's non-happy, often worst possible case, but works out to something in the end.
[14:27:34] *** Joins: shawnw (~shawn_w@c-73-225-121-73.hsd1.wa.comcast.net)
[14:43:12] *** Joins: Avichi (~Avichi@2001:980:1b5c:1:1577:eee9:cd59:763b)
[14:45:21] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[14:47:49] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[14:48:57] *** Quits: choas (~lars@ppp-188-174-89-52.dynamic.mnet-online.de) (Ping timeout: 240 seconds)
[14:51:30] *** Joins: choas (~lars@ppp-188-174-89-52.dynamic.mnet-online.de)
[15:08:05] *** Quits: some02 (~cat@h-98-128-128-173.A351.priv.bahnhof.se) (Changing host)
[15:08:05] *** Joins: some02 (~cat@user/sudden)
[15:08:10] *** some02 is now known as sudden
[15:25:32] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 250 seconds)
[15:28:41] *** Quits: choas (~lars@ppp-188-174-89-52.dynamic.mnet-online.de) (Ping timeout: 245 seconds)
[15:33:20] *** Quits: johnjaye (~pi@173.209.65.233) (Ping timeout: 250 seconds)
[15:35:00] *** Joins: choas (~lars@ppp-188-174-89-52.dynamic.mnet-online.de)
[15:43:56] *** Joins: seninha (~seninha@user/seninha)
[15:47:13] *** Joins: notzmv (~zmv@user/notzmv)
[16:08:11] *** Joins: s-liao (~s-liao@101.86.96.21)
[16:27:04] *** Quits: kjak (~kjak@pool-108-45-56-21.washdc.fios.verizon.net) (Ping timeout: 250 seconds)
[16:38:14] <ns12> Why are the reactionaries totally against SICP in JavaScript?
[16:38:14] <ns12> Is it because they perceive JavaScript as a threat to Scheme's status as the holy language of SICP?
[16:40:01] <ns12> mdhughes: "Also for programming people, John Barnes has a book series ..." - That's still in the realm of science fiction ...
[16:41:41] <Franciman> ns12: i think because they deem javascript a terrible language
[16:41:52] *** Joins: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net)
[16:42:28] <Franciman> on my side i am curious to know how the metalinguistic abstractions chapter is going to be written in js
[16:54:13] <leah2> Franciman: it uses a black-box parse function that gives you an ast
[16:54:43] <leah2> imo, sicp in js is a mistake carried to perfection just like "a little java, a few patterns"
[16:57:04] *** Quits: gproto23 (~gproto23@user/gproto23) (Quit: Leaving)
[17:07:45] <Franciman> nice
[17:07:49] <Franciman> but then i can't implement it :P
[17:08:25] <leah2> afaiu how the parser works is not addressed, but i didnt look very closely
[17:09:14] <ns12> leah2: Was "The Little MLer" a mistake as well?
[17:09:20] <leah2> havent read that one
[17:09:42] <leah2> but i assume ML is more suitable to writing mostly-lambda-calculus-stuff
[17:10:02] <sjamaan> Franciman: "read" isn't implemented in the original SICP either AFAIK
[17:10:11] <leah2> true
[17:10:37] <ns12> leah2: I haven't read "A Little Java, A Few Patterns". What's wrong with it?
[17:11:01] <ns12> I wonder why there's no "The Seasoned MLer".
[17:12:16] <Franciman> it is
[17:12:19] <Franciman> in my scheme system
[17:12:33] <Franciman> does the js sicp give me the black box function?
[17:12:54] <leah2> ns12: it uses java in a purely functional style :D
[17:14:01] <Franciman> in a purely verbose style :D
[17:14:11] * ski . o O ( "Modern Compiler Implementation in {ML,C,Java}" ("Tiger" book) by Andrew W. Appel in 1998 at <https://www.cs.princeton.edu/~appel/modern/> )
[17:14:41] <Franciman> a pretty dopaminergic book
[17:16:38] <ns12> Java has some functional features now, including lambda. Perhaps "A Little Java, A Few Patterns" could be updated.
[17:16:57] <sjamaan> Franciman: "The JavaScript programs included in the book run in any implementation of the language that complies with the ECMAScript 2020 specification, using the JavaScript package SICP provided on the MIT Press website."
[17:17:08] <Franciman> ahhh
[17:17:09] <sjamaan> I guess it's not in the book but you can find it in that code
[17:17:10] <Franciman> awesome then
[17:17:21] <Franciman> thank sjamaan 
[17:17:24] <sjamaan> yw
[17:17:34] <Franciman> then i see no problem with sicp in js, except that js has a lot of strange behaviours 
[17:17:44] <Franciman> so you may know how to code, but not how to use js
[17:17:49] <Franciman> because of its _baroque_ syntax
[17:17:55] <Franciman> err
[17:17:57] <Franciman> semantics*
[17:17:59] <ns12> Franciman: parse() is introduced in https://sourceacademy.org/sicpjs/4.1.2 without source code.
[17:21:34] <Franciman> ty
[17:23:12] <ns12> sjamaan: "... JavaScript package SICP provided on the MIT Press website" - Where? I could not find it.
[17:23:29] <s-liao> What is about this?
[17:24:17] <sjamaan> ns12: I don't know either.  I suppose there's a link in the book itself
[17:24:27] <sjamaan> Or a URL in the physical book
[17:24:57] *** Quits: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net) (Ping timeout: 240 seconds)
[17:26:13] <mdhughes> JS isn't a *terrible* language, it's a pretty good Self impl with ugly syntax. But it's a much steeper introduction to learn basically all of JS's syntax & quirks and a bunch of the library, to do what you can do in a tiny bit of Scheme.
[17:26:28] <ns12> I tried to search for "function parse(" in the contents of https://sicp.sourceacademy.org/sicpjs.zip but there were no results.
[17:26:35] <ns12> sjamaan: ^
[17:26:37] <Franciman> mdhughes: terrible semantics, sorry but it is very confusing in many places
[17:26:49] <Franciman> a lot A LOT of quirks
[17:27:30] <dpk> well, to be fair, i'm fairly sure Scheme SICP doesn't have you implement the reader yourself 😛
[17:27:48] <dpk> (though maybe i'm wrong? it's been a while since i've looked at it)
[17:27:52] <mdhughes> "much steeper introduction".
[17:28:03] *** Joins: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1)
[17:28:51] <mdhughes> JS is a very powerful, useful language. It's just to go from gluing together a few web forms to writing anything complex is years of learning & practice.
[17:31:02] <mdhughes> eew, looking thru the sicpjs file, and it uses the ternary-as-cond all over.
[17:33:17] <ski> "Java Precisely" (3rd ed.) by Peter Sestoft (of Moscow ML fame) in (2000 -) 2016 at <https://www.itu.dk/people/sestoft/javaprecisely/> is a nice, concise book, including functional and parallel stuff
[17:36:11] <ns12> sjamaan: Found it. https://about.sourceacademy.org/package/ leads to https://www.npmjs.com/package/sicp which leads to https://github.com/source-academy/js-slang
[17:36:45] <ns12> parse() is probably defined in https://github.com/source-academy/js-slang
[17:38:03] <mdhughes> AND it's all implemented in typescript, so there's a translation layer between the library and what actually gets loaded.
[17:38:37] <ns12> mdhughes: Actually, where exactly is parse() defined?
[17:39:10] <mdhughes> parser/parser.ts, looks like
[17:39:19] <ns12> All I see is layers of layers of complication.
[17:39:44] <mdhughes> This is fucking horrible. Way too many layers of nonsense & translation.
[17:40:49] *** Joins: johnjaye (~pi@173.209.65.233)
[17:41:03] <s-liao> What can we do?
[17:41:11] <mdhughes> Even just stdlib/list.ts, which is Scheme-like lists, is nuts. They build them from JS 2-arrays.
[17:41:34] <ns12> mdhughes: "parser/parser.ts, looks like" - But parse() in that file takes two arguments "export function parse(x: string, context: Context): Value { ... }" whereas the parse() in the book only uses one argument.
[17:41:50] <mdhughes> I dunno, build and burn down a boathouse at MIT in protest?
[17:42:33] <mdhughes> JS arguments are optional.
[17:42:58] <ns12> https://github.com/source-academy/js-slang/blob/343bf1eec7e27b5749fad3f82ee9956908c39eef/src/stdlib/parser.ts#L453-L466
[17:42:59] <rudybot_> https://teensy.info/Bmd1T5cUN5
[17:43:12] <ns12> mdhughes: Okay. Understood.
[17:45:24] <ns12> mdhughes: But there are three definitions of parse() in the source code. (1) src/parser/parser.ts, (2) src/stdlib/parser.ts, (3) src/typings/acorn-loose.d.ts.
[17:45:37] <mdhughes> I have kind of a big JS library, Learn2JS, and it's maybe 1% the size of this mess.
[17:46:03] <mdhughes> So stdlib/parser.ts imports parse from parser/parser.ts
[17:47:59] <ns12> In https://about.sourceacademy.org/package/ :
[17:48:00] <ns12> > SICP JS relies on a JavaScript feature called “proper tail calls”. This feature is specified by the JavaScript standards since 2015, but unfortunately as of 2021, most web browsers do not comply with this aspect of the standard. Node.js does not comply, either, and as a result, some programs in SICP JS will not scale when using the package
[17:48:00] <ns12> sicp in Node.js in the way they should. This will not affect learners in a major way.
[17:48:47] <mdhughes> As I noted, only Safari does TCO. I dunno why everyone else is so stupid.
[17:49:45] <ns12> But in the next paragraph:
[17:49:45] <ns12> > The Source Academy avoids the problem by transpiling the SICP JS sublanguage of JavaScript to JavaScript such that the resulting implementation performs proper tail calls regardless whether the underlying JavaScript implemementation has proper tail calls.
[17:49:45] <ns12> What does that mean? How do they avoid the problem?
[17:50:22] <sjamaan> Trampoline?
[17:50:30] * ski was about to say
[17:52:33] <ns12> If I loop infinitely by using recursion in SICP/JS, will there be no stack overflow?
[17:52:41] <mdhughes> There is a transpiler package. Oh, here: transformReturnStatementsToAllowProperTailCalls
[17:52:44] <mdhughes> <madness>
[17:53:24] <mdhughes> The more I look at this, the worse it gets. It's the goddamned Necronomicon.
[17:53:49] <mdhughes> SICP-JS IS THE GATE. SICP-JS IS THE KEY.
[17:55:31] <ns12> transformReturnStatementsToAllowProperTailCalls: https://github.com/source-academy/js-slang/blob/343bf1eec7e27b5749fad3f82ee9956908c39eef/src/transpiler/transpiler.ts#L192-L243
[17:55:31] <ns12> That's funny 😆
[17:55:31] <rudybot_> https://teensy.info/Ss0cENfhyq
[17:56:11] <mdhughes> I was expecting something like Simply Scheme's prologue that makes Scheme behave like LOGO, except it'd be JS behaving like Scheme. But this is… there's something wrong with the authors.
[17:58:36] *** Joins: klovett (~klovett@107.127.17.177)
[17:58:39] <mdhughes> Well, it's bedtime and I'm gonna have nightmares.
[17:59:29] <s-liao> I can not see the reason for js-scheme yet
[18:00:20] <ns12> Oh look at transpile():
[18:00:20] <ns12>   transformReturnStatementsToAllowProperTailCalls(program)
[18:00:20] <ns12>   transformCallExpressionsToCheckIfFunction(program, globalIds)
[18:00:20] <ns12>   transformUnaryAndBinaryOperationsToFunctionCalls(program, globalIds, context.chapter)
[18:00:20] <ns12>   transformSomeExpressionsToCheckIfBoolean(program, globalIds)
[18:00:20] <ns12>   transformPropertyAssignment(program, globalIds)
[18:00:20] <ns12>   transformPropertyAccess(program, globalIds)
[18:00:21] <ns12>   checkForUndefinedVariables(program, context.nativeStorage, globalIds, skipUndefined)
[18:00:21] <ns12>   transformFunctionDeclarationsToArrowFunctions(program, functionsToStringMap)
[18:00:22] <ns12>   wrapArrowFunctionsToAllowNormalCallsAndNiceToString(program, functionsToStringMap, globalIds)
[18:00:22] <ns12>   addInfiniteLoopProtection(program, globalIds, usedIdentifiers)
[18:00:57] <sjamaan> s-liao: Probably the new author wanted to bring SICP to a JS audience without the "distractions" of having to learn a new language
[18:01:10] <ns12> mdhughes: Sweet dreams.
[18:01:38] <sjamaan> There's something to be said for making the concepts more accessible, but I fear they succeeded more in obscuring the concepts
[18:01:57] <sjamaan> I wonder if the original authors of SICP endorse this version
[18:02:41] <sjamaan> I mean, their names are on the book, but that might just be because this book is so heavily based on the original
[18:06:22] <ns12> "I mean, their names are on the book ..." - That's required by the CC license, right>
[18:06:28] <ns12> s/>/?/
[18:08:52] <s-liao> sjamaan: if that is the reason. I would say what the regretful experience they will lost.
[18:09:23] <s-liao> Learning scheme is a good learning experience.
[18:09:34] <sjamaan> ns12: Yeah but you could change it in a way to indicate they had nothing to do with *this* book (if that's the case)
[18:10:42] <sjamaan> http://groups.csail.mit.edu/mac/users/gjs/gjs.html doesn't list it as one of Sussman's publications
[18:11:11] <sjamaan> But the fact they released it through MIT press gives it an air of being "official" in a way
[18:13:08] <ns12> Well, it's not published yet.
[18:14:51] *** Joins: m455 (~m455@user/m455)
[18:16:34] *** Quits: shawnw (~shawn_w@c-73-225-121-73.hsd1.wa.comcast.net) (Ping timeout: 256 seconds)
[18:19:15] *** Quits: xsperry (~xs@user/xsperry) ()
[18:21:45] *** teiresias2 is now known as teiresias
[18:22:22] *** Joins: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net)
[18:22:51] <s-liao> Learning scheme like you are along with variety allies inside the element of program language. JS still live in rich libraries.
[18:24:07] <sjamaan> But the material from the book is self-contained and doesn't need rich libraries
[18:24:24] <sjamaan> It needs an expressive programming language that doesn't obscure the concepts
[18:28:37] <s-liao> Yes.
[18:29:02] <Franciman> do you like the name «osso» for a r7rs small implementation?
[18:29:27] <X-Scale> This is what we got after 25 years after the SICP 2nd edition. I wonder what they'll do with SICP in 2046.
[18:30:50] <sjamaan> Franciman: What does it mean?
[18:30:53] *** Quits: johnjaye (~pi@173.209.65.233) (Read error: No route to host)
[18:30:57] <Franciman> sjamaan: bone
[18:32:45] <s-liao> If people are looking for deeply understanding scheme  and JS  by this way, she/he would not.
[18:33:15] <s-liao> http://xahlee.info/js/buy_xah_js_tutorial.html
[18:33:34] <sjamaan> Franciman: Inspired by BONES?
[18:34:00] <sjamaan> http://call-with-current-continuation.org/bones/
[18:34:38] <s-liao> This guy do stuff in Emacs, and have JS  book published
[18:40:56] *** Joins: eddof13 (~textual@2806:102e:12:2504:2969:cbe7:ff7f:56e8)
[18:41:14] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Client closed)
[18:42:28] *** Joins: s-liao (~s-liao@101.86.96.21)
[18:42:45] *** Quits: s-liao (~s-liao@101.86.96.21) (Client Quit)
[18:48:18] *** Quits: eddof13 (~textual@2806:102e:12:2504:2969:cbe7:ff7f:56e8) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[18:48:52] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[18:49:25] *** Joins: eddof13 (~textual@2806:102e:12:2504:2969:cbe7:ff7f:56e8)
[18:50:18] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[18:52:53] *** Joins: xsperry (~xs@user/xsperry)
[18:54:29] *** Joins: jao (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net)
[18:56:55] *** Quits: eddof13 (~textual@2806:102e:12:2504:2969:cbe7:ff7f:56e8) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[18:57:13] <wasamasa> yeesh
[18:57:21] <wasamasa> this sicp js stuff doesn't look good at all
[18:57:41] <wasamasa> I'd rather have expected some approach like in the Crockford book where they identify a suitable JS subset to work with, but nope
[18:58:48] <wasamasa> the website sucks arse, cannot even scroll using the keyboard
[18:59:48] <Franciman> sjamaan: uh, no, just a casual name
[19:00:01] <Franciman> about the fact that r7rs small is `scheme reduced to bones`
[19:00:24] <Franciman> anche scheme by itself tries to be minimal
[19:00:53] *** Joins: eddof13 (~textual@2806:102e:12:2504:2969:cbe7:ff7f:56e8)
[19:01:06] <wasamasa> I wonder what hackernews thinks of this
[19:05:07] *** Quits: eddof13 (~textual@2806:102e:12:2504:2969:cbe7:ff7f:56e8) (Client Quit)
[19:06:41] *** Joins: frost (~frost@user/frost)
[19:09:07] *** Quits: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net) (Ping timeout: 250 seconds)
[19:22:37] <sham1> wasamasa: ah yes, Javascript: The good parts. I'm still baffled that said book isn't just the covers
[19:22:44] <sham1> With no pages in between
[19:23:22] <sham1> That's a bit unfair thing to say, although I do feel that while JS has certainly gotten better, there's still a lot of rot inside
[19:29:53] *** Joins: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net)
[19:33:29] *** Quits: frost (~frost@user/frost) (Quit: Connection closed)
[19:33:57] *** Quits: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net) (Ping timeout: 240 seconds)
[19:40:13] *** Quits: Avichi (~Avichi@2001:980:1b5c:1:1577:eee9:cd59:763b) (Quit: Client closed)
[19:45:45] *** Quits: jeko (~jeko@2a01:e0a:25f:d8f0:ce49:2fd7:836a:cd7) (Quit: Konversation terminated!)
[19:45:58] *** Joins: Avichi (~Avichi@2001:980:1b5c:1:6312:86f8:c982:6b19)
[19:46:22] *** Joins: nij- (~jin@2001-48F8-9021-806-0-0-0-6F8B-dynamic.midco.net)
[19:47:13] <nij-> New to scheme (guile) :) I don't understand the syntax `,use (..)`. Why don't we type instead (use (..))?
[19:48:33] <gwatt> Using a naked unquote is just guile's way of saying you're doing system/repl stuff instead of normal scheme code
[19:49:07] <gwatt> I'm pretty sure you can also do (import (..)) or (use-module (..))
[19:51:35] <nij-> oh i see. thanks :)
[19:52:07] *** Quits: Avichi (~Avichi@2001:980:1b5c:1:6312:86f8:c982:6b19) (Ping timeout: 256 seconds)
[19:56:01] *** Joins: Darkcoal (~user@167.86.148.150)
[20:00:38] *** Parts: nij- (~jin@2001-48F8-9021-806-0-0-0-6F8B-dynamic.midco.net) (#scheme)
[20:04:55] *** Joins: joast (~rick@cpe-98-146-112-4.natnow.res.rr.com)
[20:05:56] *** Quits: ski (~ski@remote11.chalmers.se) (Ping timeout: 256 seconds)
[20:10:20] *** Joins: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net)
[20:20:53] *** Joins: Fare (~fare@pool-72-94-152-64.phlapa.fios.verizon.net)
[20:25:36] <Zipheir> sham1: There is rather a lot in that book.  I'm surprised he mentioned the prototype/inheritance stuff, in particular.
[20:25:41] <Zipheir> (Crockford)
[20:26:31] *** Joins: grettke (~grettke@cpe-65-29-228-30.wi.res.rr.com)
[20:26:56] *** Joins: eddof13 (~textual@2806:102e:12:2504:2969:cbe7:ff7f:56e8)
[20:37:32] *** Quits: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net) (Ping timeout: 250 seconds)
[20:38:46] *** Joins: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net)
[20:44:59] <Zipheir> For SICP, at least ECMAScript 6 provides full lexical scope.  It's hard to imagine SICP without that.
[20:45:20] *** Joins: skapata (~Skapata@2804:14c:87b0:9d2e:b45b:c4a9:477:d786)
[20:45:20] *** Quits: skapata (~Skapata@2804:14c:87b0:9d2e:b45b:c4a9:477:d786) (Changing host)
[20:45:20] *** Joins: skapata (~Skapata@user/skapata)
[20:48:01] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 268 seconds)
[20:48:47] *** Quits: m1dnight (~christoph@christophe.dev) (Ping timeout: 256 seconds)
[20:49:39] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[20:49:41] *** Quits: Darkcoal (~user@167.86.148.150) (Ping timeout: 252 seconds)
[21:01:38] *** Quits: eddof13 (~textual@2806:102e:12:2504:2969:cbe7:ff7f:56e8) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[21:15:35] <sham1> Zipheir: now you're imagining SICP but for newlisp
[21:15:56] <sham1> No lexical scope!
[21:21:18] *** Quits: civodul (~user@guix/contributor/civodul) (Ping timeout: 256 seconds)
[21:26:52] *** Joins: m1dnight (~christoph@christophe.dev)
[21:28:02] *** Quits: xgqt (~xgqt@gentoo/developer/xgqt) (Ping timeout: 260 seconds)
[21:28:45] *** Joins: xgqt (~xgqt@gentoo/developer/xgqt)
[21:30:27] *** Joins: eddof13 (~textual@177.230.240.94)
[21:32:33] *** Joins: karlosz (~karlosz@47.151.136.69)
[21:39:19] * Zipheir looks up Newlisp.
[21:39:35] <Zipheir> No lexical scope?  More like Oldlisp, amirite..
[21:45:05] <sham1> Mmhm
[21:45:46] *** Joins: neceve (~quassel@2.26.93.228)
[21:56:09] *** Quits: eddof13 (~textual@177.230.240.94) (Ping timeout: 250 seconds)
[22:24:11] *** Joins: Zipheir_ (~wcm@98.4.178.27)
[22:24:15] *** Joins: lazr_ (~lazr@45.76.248.123)
[22:24:38] *** Quits: Zipheir (~wcm@98.4.178.27) (Killed (NickServ (GHOST command used by Zipheir_)))
[22:24:51] *** Zipheir_ is now known as Zipheir
[22:25:14] *** Quits: lazr (~lazr@45.76.248.123) (Ping timeout: 256 seconds)
[22:25:14] *** Quits: koluacik (~koluacik@165.227.171.188) (Ping timeout: 256 seconds)
[22:25:14] *** Quits: cross (~cross@spitfire.i.gajendra.net) (Ping timeout: 256 seconds)
[22:25:14] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 256 seconds)
[22:25:14] *** Quits: aoh (~aki@haltp.org) (Ping timeout: 256 seconds)
[22:25:16] *** Joins: aoh__ (~aki@haltp.org)
[22:25:27] *** Joins: aeth (~aeth@user/aeth)
[22:25:37] *** Joins: cross_ (~cross@spitfire.i.gajendra.net)
[22:25:41] *** Quits: sdu (~sidu@185.44.146.61) (Ping timeout: 256 seconds)
[22:25:41] *** Quits: Ekho (~Ekho@user/ekho) (Ping timeout: 256 seconds)
[22:25:41] *** Quits: pyro_ (~root@zhaozhou.dcollins.info) (Ping timeout: 256 seconds)
[22:25:41] *** Quits: manumanumanu (~mio@213-67-252-160-no79.tbcn.telia.com) (Ping timeout: 256 seconds)
[22:25:41] *** Quits: snits (~quassel@ip98-179-76-75.ph.ph.cox.net) (Ping timeout: 256 seconds)
[22:25:41] *** Quits: sham1 (~sham1@212-146-44-107.aboa.net) (Ping timeout: 256 seconds)
[22:25:54] *** Joins: pyro (~root@zhaozhou.dcollins.info)
[22:25:56] *** Joins: snits (~quassel@ip98-179-76-75.ph.ph.cox.net)
[22:25:58] *** Joins: sdu (~sidu@185.44.146.61)
[22:26:07] *** Joins: manumanumanu (~mio@213-67-252-160-no79.tbcn.telia.com)
[22:26:25] *** Joins: sham1 (~sham1@212-146-44-107.aboa.net)
[22:27:21] *** Joins: koluacik (~koluacik@165.227.171.188)
[22:32:02] *** Quits: karlosz (~karlosz@47.151.136.69) (Quit: karlosz)
[22:32:33] <leah2> pretty sure js always had lexical scope for function arguments
[22:34:09] <Franciman> it has a strange this thing
[22:34:15] <Franciman> i never understood it, unfortunately
[22:34:23] <Franciman> but it seemed a way to introduce strange scoping
[22:40:39] *** Joins: Ekho (~Ekho@user/ekho)
[22:44:34] <gwatt> The only weird thing about "this" in JS to me is that you can reference it from any function, not just ones in a class. Otherwise it behaves like most oop languages.
[22:54:17] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[22:56:31] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[23:00:03] <leah2> well, having two syntaxes for lambda and one keeps this and the other doesnt doesnt help the case :D
[23:05:55] <Franciman> gwatt: it is not super clear
[23:05:59] <Franciman> https://www.telerik.com/blogs/seven-javascript-quirks-i-wish-id-known-about#functions <- like here
[23:10:24] *** Joins: wnklmnn (~wnklmnn@2a02:908:4e2:9740:2d8:61ff:fef9:b4c2)
[23:12:01] <Zipheir> It does seem like 'this' is still funky after ECMA 6.  I'm not a fan of anaphora like that, er, this.
[23:14:22] <Zipheir> Franciman: Those are some really wonky examples.
[23:16:39] *** Quits: alMalsamo (~alMalsamo@gateway/tor-sasl/almalsamo) (Ping timeout: 276 seconds)
[23:17:49] <Zipheir> I enjoyed working through _JavaScript: The Good Parts_.  But I eventually realized that, being happy with static Web pages, I didn't have much to do with the language.
[23:18:12] *** Joins: alMalsamo (~alMalsamo@gateway/tor-sasl/almalsamo)
[23:19:21] <Franciman> i am now thinking about the fact that javascript started out as a scheme to be run in the browser
[23:19:26] <Franciman> and now they write SICP in js
[23:19:33] <Franciman> everything fits perfectly :)
[23:20:21] <Zipheir> Except the tail-calls.
[23:20:56] *** Quits: jao (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net) (Remote host closed the connection)
[23:21:54] <leah2> it has tailcalls in the spec :p
[23:23:54] <sham1> No one implements it
[23:23:56] <Zipheir> In practice, only Safari optimizes them, right?
[23:24:01] <sham1> Yeah, only Safari
[23:24:08] <sham1> Well, Webkit in general IIRC
[23:24:40] <Zipheir> Maybe JSICP will push actually the big browser forward :)
[23:24:44] <Zipheir> *actually push
[23:24:53] <Zipheir> *browsers
[23:24:56] <Zipheir> Ugh, I can't type today.
[23:25:52] <Franciman> would you write a browser in scheme?
[23:25:55] <Franciman> web browser*
[23:26:17] *** Quits: choas (~lars@ppp-188-174-89-52.dynamic.mnet-online.de) (Ping timeout: 240 seconds)
[23:27:08] <gwatt> leah2: Yeah, the "function" functions vs arrow functions distinction is annoying.
[23:28:39] *** Joins: jao (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net)
[23:38:04] *** Joins: kjak (~kjak@pool-108-45-56-21.washdc.fios.verizon.net)
[23:50:18] <Zipheir> Franciman: A simple HTML browser, sure.  I don't think I'd be willing to undertake an HTML 5 browser in any language. 8-|
[23:51:51] <Zipheir> I'd be more inclined to use Scheme for big programs if it had static typing, in all honesty.
[23:52:22] <Franciman> i think the same
[23:52:50] <Zipheir> Running a Scheme program only to have it crash on a silly type mistake isn't fun, and getting some error like "not an integer: #<unspecified>" is THE WORST.
[23:55:45] <gwatt> I think scheme would be a decent compilation target for javascript, or any other untrusted code
[23:57:58] <Zipheir> I also think it's a good target for other functional languages, e.g. what Idris 2 is doing with Chez.
[23:58:36] <Zipheir> Relational languages as well; miniKanren showed they're pretty nice to implement in Scheme.
[23:58:40] <gwatt> Clearly, use Idris 2 to build a browser on top of chez
[23:59:49] <Zipheir> That would be a project.  And Mozilla talks about Rust being a "provably safe" language!
