[00:00:02] *** Quits: romesrf (~romes@44.190.189.46.rev.vodafone.pt) (Ping timeout: 240 seconds)
[00:00:17] *** Joins: Tuplanolla (~Tuplanoll@91-159-69-98.elisa-laajakaista.fi)
[00:00:41] <polyphem> ski: barely not flooding :)
[00:00:47] *** Joins: Pickchea (~private@user/pickchea)
[00:01:01] * ski glances around nervously
[00:01:50] * ski still can never recall which is the horizontal and which is the vertical one
[00:02:13] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:106a:7188:c314:3535)
[00:03:32] *** Joins: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi)
[00:04:11] *** Joins: Null_A (~null_a@2601:645:8700:2290:a4fb:481a:7fa9:b909)
[00:05:19] <monochrom> Heh a lot of "left, right", "horizontal, vertical" namings in category theory were very accidental and arbitrary.
[00:05:54] <monochrom> Comparing to particle physics. The "top" quark is much heavier than the "bottom" quark. Ah, no wonder why they are so unstable. >:)
[00:06:03] <monochrom> s/Comparing/Comparable/
[00:06:49] <ski> ok, "vertical composition" is "composition", and "horizontal composition" is "lifted composition" (i'm sure i'll quickly forget this again)
[00:06:49] *** Quits: kuribas (~user@ptr-25vy0iagvdrvz4nz7gs.18120a2.ip6.access.telenet.be) (Remote host closed the connection)
[00:07:03] <ski> (yea, i don't like the "left adjoint","right adjoint" naming, either)
[00:07:55] <byorgey> I just remember the picture with two parallel morphisms going from left to right, and a natural transformation as an arrow going from the top morphism to the bottom.  Then vertical and horizontal composition correspond to putting those cells next to each other vertically or horizontally.
[00:08:05] <byorgey> Of course that's yet another thing to remember, but somehow I find it easier
[00:08:22] <monochrom> Left adjoint is at least mnemonicable by "Hom(F x, y)" ooohhh F is on the left.
[00:08:29] *** Joins: alx741 (~alx741@157.100.197.240)
[00:08:37] <monochrom> Now, left and right Kan extensions, I still haven't figured out how.
[00:08:58] <ski> except if you get into the habit of writing `A <---< F B'
[00:09:11] <monochrom> Yikes haha.
[00:09:17] <ski> (i do that, fairly often)
[00:09:27] *** Quits: gdd (~gdd@129.199.146.230) (Quit: WeeChat 3.3)
[00:09:42] <monochrom> How would you like "source adjoint" and "target adjoint"?
[00:09:58] <ski> might work
[00:10:21] <ski> (i'm already using "pre-inverse" and "post-inverse", rather that "left-inverse" and "right-inverse")
[00:10:23] <polyphem> ski: isn't your third function Profunctor dimap 
[00:10:35] <ski> polyphem : something like that
[00:10:49] *** Joins: spacenautx (~spacenaut@user/spacenautx)
[00:11:10] <ski> polyphem : my lambdabot queries were basically questions "do you want co- or contra- variance in the keys ? are the key types ordered ? are the value types semigroups ?"
[00:11:17] *** Quits: Null_A (~null_a@2601:645:8700:2290:a4fb:481a:7fa9:b909) (Ping timeout: 240 seconds)
[00:11:26] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[00:12:11] *** Quits: Batzy (~quassel@user/batzy) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[00:12:34] *** Joins: Batzy (~quassel@user/batzy)
[00:12:36] *** Quits: ccntrq (~Thunderbi@2a01:e34:eccb:b060:8793:de70:3992:9c12) (Ping timeout: 240 seconds)
[00:12:58] <ski> ("are the key types ordered ?" implicitly suggests "are the key mappings order morphisms ?")
[00:13:01] *** Joins: romesrf (~romes@44.190.189.46.rev.vodafone.pt)
[00:17:03] <ProfSimm> Can I make a map which is NOT iterable by design
[00:17:39] *** Joins: gdd (~gdd@129.199.146.230)
[00:17:51] <monochrom> Sure.
[00:18:00] <ski> monochrom : right Kan extension is `G . F >---> H' iff `G >---> H <- F' (or `H / F'). left Kan extension is `H >---> G . F' iff `H /| F >---> G'. so, they're right and left adjoints of `(. F)' (precomposition)
[00:19:23] <monochrom> Ah, yeah, I need to spend more time on that connection.
[00:19:40] <ski> (or with more traditional notation, `Ran_F H' resp. `Lan_F H')
[00:19:41] *** Joins: pavonia (~user@user/siracusa)
[00:23:03] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Ping timeout: 272 seconds)
[00:25:00] *** Quits: Raito_Bezarius (~Raito@wireguard/tunneler/raito-bezarius) (Ping timeout: 252 seconds)
[00:27:20] <ski> given `phi :: forall a. G (F a) -> H a', we (via CoYoneda) get `stage phi :: forall b. G b -> Ran F H b', where `Ran F H b' is `forall a. (b -> F a) -> H a'
[00:28:06] <ski> similarly, given `psi :: forall a. H a -> G (F a)', we (via Yoneda) get `costage psi :: forall b. Lan F H b -> G b', where `Lan F H b' is `exists a. (H a,F a -> b)'
[00:28:29] *** Joins: alx741 (~alx741@181.199.42.143)
[00:30:47] *** Quits: Ariakenom_ (~Ariakenom@h-82-196-111-63.NA.cust.bahnhof.se) (Quit: Leaving)
[00:32:16] *** Quits: alx741 (~alx741@181.199.42.143) (Read error: Connection reset by peer)
[00:32:19] *** Quits: dhouthoo (~dhouthoo@178-117-36-167.access.telenet.be) (Quit: WeeChat 3.4)
[00:32:46] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Excess Flood)
[00:32:58] *** Joins: alx741 (~alx741@181.199.42.143)
[00:34:07] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[00:34:50] *** Joins: Flonk8 (~Flonk@vps-zap441517-1.zap-srv.com)
[00:36:20] *** Quits: alx741 (~alx741@181.199.42.143) (Read error: Connection reset by peer)
[00:36:20] *** Quits: Maxdamantus (~Maxdamant@user/maxdamantus) (Ping timeout: 272 seconds)
[00:36:21] *** Quits: Flonk (~Flonk@vps-zap441517-1.zap-srv.com) (Ping timeout: 256 seconds)
[00:36:57] *** Joins: Maxdamantus (~Maxdamant@user/maxdamantus)
[00:37:14] *** Joins: vorpuni (~pvorp@2001:861:3881:c690:d322:f659:136d:eef6)
[00:37:27] *** Joins: Raito_Bezarius (~Raito@wireguard/tunneler/raito-bezarius)
[00:37:28] *** Flonk8 is now known as Flonk
[00:40:51] *** Quits: justsomeguy (~justsomeg@user/justsomeguy) (Quit: WeeChat 3.4)
[00:42:52] *** Quits: _ht (~quassel@231-169-21-31.ftth.glasoperator.nl) (Remote host closed the connection)
[00:43:09] <EvanR> ProfSimm, I assume by design means implementation rather than interface. Since you can present whatever interface to your ADT
[00:43:09] *** Joins: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl)
[00:43:45] <EvanR> to construct something intentionally omitting a feature seems unusual though xD
[00:49:24] *** Joins: acidjnk (~acidjnk@p200300d0c71f74276499fb418a282b02.dip0.t-ipconnect.de)
[00:50:49] *** Joins: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729)
[00:53:19] *** Joins: alx741 (~alx741@157.100.197.240)
[00:54:24] *** Quits: natechan (~nate@108-233-125-227.lightspeed.sntcca.sbcglobal.net) (Read error: Connection reset by peer)
[00:54:25] *** Joins: v0rpun1 (~pvorp@2001:861:3881:c690:f6b3:6910:f82d:9617)
[00:55:24] *** Quits: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729) (Ping timeout: 240 seconds)
[00:56:06] *** Joins: Slerba (~Slerba@85-76-49-165-nat.elisa-mobile.fi)
[00:56:08] *** Joins: jgeerds (~jgeerds@55d4b9df.access.ecotel.net)
[00:56:11] *** Joins: natechan (~nate@108-233-125-227.lightspeed.sntcca.sbcglobal.net)
[00:56:25] *** Parts: Slerba (~Slerba@85-76-49-165-nat.elisa-mobile.fi) ()
[00:56:28] *** Quits: Batzy (~quassel@user/batzy) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[00:56:30] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[00:56:30] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[00:56:30] *** Joins: wroathe (~wroathe@user/wroathe)
[00:57:35] *** Joins: Batzy (~quassel@user/batzy)
[00:57:45] *** Quits: lottaquestions_ (~nick@2607:fa49:5041:a200:11a4:6cdd:1796:d5ed) (Quit: Konversation terminated!)
[00:58:02] *** Joins: lottaquestions_ (~nick@2607:fa49:5041:a200:77ff:49ec:2b9c:10c4)
[00:59:02] *** Joins: ajb (~ajb@cupid.whatbox.ca)
[00:59:35] *** Joins: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340)
[00:59:48] *** Quits: alp (~alp@user/alp) (Ping timeout: 240 seconds)
[01:00:54] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[01:05:49] *** Quits: benin (~benin@59.92.239.104) (Quit: Ping timeout (120 seconds))
[01:05:50] <freeman42x[m]> any good solution for `data X = A { x :: Int } | B { x :: Int, y :: Char }` and running `y (A 3)` compiling but throwing at runtime? I was told to avoid using records at all and write manual lenses for them but that seems a bad compromise
[01:06:09] *** Joins: benin (~benin@59.92.239.104)
[01:10:08] *** Joins: zeenk (~zeenk@2a02:2f04:a30d:1300:51a3:bcfc:6cda:9fc5)
[01:10:57] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[01:16:47] *** Joins: wroathe (~wroathe@user/wroathe)
[01:16:52] *** Quits: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl) (Ping timeout: 256 seconds)
[01:17:59] <dolio> Can't the appropriate optics be generated? Lens for x, traversal for y.
[01:18:48] *** Joins: alx741 (~alx741@157.100.197.240)
[01:19:48] *** Quits: mikoto-chan (~mikoto-ch@213.177.151.239) (Ping timeout: 240 seconds)
[01:20:58] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 250 seconds)
[01:23:20] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[01:25:07] <ski>   newtype Map k v = MkMap (k -> Maybe v)  -- not iterable
[01:25:45] <ski> (cue covariant vs. contravariant powerset functor)
[01:27:39] *** Quits: Katarushisu (~Katarushi@cpc147334-finc20-2-0-cust27.4-2.cable.virginm.net) (Ping timeout: 250 seconds)
[01:28:12] *** Quits: jstolarek (~jstolarek@staticline-31-183-182-85.toya.net.pl) (Ping timeout: 256 seconds)
[01:28:26] *** Quits: gehmehgeh (~user@user/gehmehgeh) (Quit: Leaving)
[01:30:11] *** Quits: jgeerds (~jgeerds@55d4b9df.access.ecotel.net) (Remote host closed the connection)
[01:30:49] *** Joins: lavaman (~lavaman@98.38.249.169)
[01:34:10] *** Quits: takuan (~takuan@178-116-218-225.access.telenet.be) (Remote host closed the connection)
[01:34:51] *** Joins: machinedgod (~machinedg@24.105.81.50)
[01:35:51] *** Quits: Megant (megant@user/megant) (Ping timeout: 256 seconds)
[01:37:17] *** Joins: Megant (megant@user/megant)
[01:37:54] <freeman42x[m]> <dolio> "Can't the appropriate optics..." <- to generate them you need to keep the records, doesn't it? and keeping the records allows others to misuse them in the way mentioned
[01:38:15] *** Joins: jgeerds (~jgeerds@55d4b9df.access.ecotel.net)
[01:39:58] *** Joins: alx741 (~alx741@157.100.197.240)
[01:40:17] *** Quits: kenran (~kenran@200116b82b49e8006646f20137f4ed5b.dip.versatel-1u1.de) (Quit: WeeChat info:version)
[01:43:32] <dolio> Turn off the field accessors and use the optics.
[01:43:55] *** Joins: alp (~alp@user/alp)
[01:44:17] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[01:46:02] *** Joins: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729)
[01:48:58] *** Joins: jespada (~jespada@85.255.234.190)
[01:49:34] <freeman42x[m]> <dolio> "Turn off the field accessors and..." <- how do you achieve that?
[01:51:52] <dolio> NoFieldSelectors language setting, I think.
[01:53:24] *** Joins: cynomys (~cynomys@user/cynomys)
[01:56:08] *** Joins: Guest|86 (~Guest|86@136.228.217.112)
[01:56:41] *** Quits: Guest|86 (~Guest|86@136.228.217.112) (Client Quit)
[01:58:32] *** Quits: mc47 (~mc47@xmonad/TheMC47) (Remote host closed the connection)
[02:00:52] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[02:01:57] *** Quits: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729) (Ping timeout: 240 seconds)
[02:02:29] *** Joins: alx741 (~alx741@157.100.197.240)
[02:03:20] *** Quits: komikat (~komikat@183.82.154.239) (Remote host closed the connection)
[02:04:01] *** Joins: komikat (~komikat@183.82.154.239)
[02:05:01] *** Quits: spacenautx (~spacenaut@user/spacenautx) (Ping timeout: 272 seconds)
[02:06:35] *** Joins: spacenautx (~spacenaut@user/spacenautx)
[02:06:45] *** Joins: Katarushisu (~Katarushi@cpc147334-finc20-2-0-cust27.4-2.cable.virginm.net)
[02:07:50] *** Quits: v0rpun1 (~pvorp@2001:861:3881:c690:f6b3:6910:f82d:9617) (Remote host closed the connection)
[02:08:17] <gentauro> how can I refactor this? `((\foo -> concat <$> foo) . mergeValues . concat)`. The `foo` part …
[02:08:23] *** Quits: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Ping timeout: 250 seconds)
[02:08:46] <dolio> fmap concat . mergeValues . concat
[02:08:56] <ski> dang, beat me to it :)
[02:09:14] <monochrom> I was dense and thought of section syntax only.
[02:09:43] <ski> gentauro> :t mergeValues
[02:10:02] <gentauro> dolio: thx
[02:10:18] *** Quits: cynomys (~cynomys@user/cynomys) (Quit: Lost terminal)
[02:10:43] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[02:11:07] *** Joins: cynomys (~cynomys@user/cynomys)
[02:11:38] *** Joins: alt-romes (~romes@44.190.189.46.rev.vodafone.pt)
[02:12:36] *** Quits: komikat (~komikat@183.82.154.239) (Ping timeout: 272 seconds)
[02:12:38] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:106a:7188:c314:3535) (Remote host closed the connection)
[02:12:41] *** Quits: spacenautx (~spacenaut@user/spacenautx) (Ping timeout: 256 seconds)
[02:14:06] *** Quits: romesrf (~romes@44.190.189.46.rev.vodafone.pt) (Ping timeout: 256 seconds)
[02:14:27] *** Joins: spacenautx (~spacenaut@user/spacenautx)
[02:14:35] *** Quits: dextaa_ (~dextaa@user/dextaa) (Remote host closed the connection)
[02:15:03] *** Quits: spacenautx (~spacenaut@user/spacenautx) (Max SendQ exceeded)
[02:15:16] <freeman42x[m]> <dolio> "NoFieldSelectors language..." <- that extension seems to have been merged but in the proposal it says: "Enabling this extension will beak Template Haskell which assumes the presence of a field selector." won't that prevent generating lenses via TH?
[02:15:43] <dolio> Dunno.
[02:17:29] <dolio> In the past, when you generate lenses, the field names would be like `_field`. And then the fact that someone might be able to write something that throws an exception by using the weird field accessors isn't really worth worrying about.
[02:17:42] <dvdrw> it sounds like it'll lift your code into undefined behaviour :)
[02:17:45] *** Joins: komikat (~komikat@183.82.154.239)
[02:18:00] <gentauro> ski: I will soon release the code as "open source" so you will have plenty of time to "review it" (which will be very much appreciated)
[02:18:03] <gentauro> :)
[02:18:10] <geekosaur> doesn't that extension go along with others that mroe or less replace generating accessors via TH?
[02:18:19] *** Quits: jespada (~jespada@85.255.234.190) (Read error: Connection reset by peer)
[02:18:20] *** Quits: rtsn (~nstr@user/rtsn) (Quit: Lost terminal)
[02:19:09] *** Quits: bontaq (~user@ool-45779fe5.dyn.optonline.net) (Read error: Connection reset by peer)
[02:19:13] <ski> gentauro : just wondering if one or both of those `concat's could be elided
[02:19:13] *** Joins: bontaq` (~user@ool-45779fe5.dyn.optonline.net)
[02:20:54] *** Joins: spacenautx (~spacenaut@user/spacenautx)
[02:23:18] <gentauro> ski: the complete line is: `fmap concat . mergeValues . concat <$> mapM (mapConcurrently aux) (chunksOf chk mids)`. I was guessing that I perhaps could use some `concatMap`?
[02:28:07] *** Quits: burnsidesLlama (~burnsides@dhcp168-023.wadham.ox.ac.uk) (Remote host closed the connection)
[02:28:35] *** Quits: ProfSimm (~ProfSimm@87.227.196.109) (Remote host closed the connection)
[02:29:07] *** Joins: alx741 (~alx741@157.100.197.240)
[02:29:28] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Remote host closed the connection)
[02:29:50] *** Joins: FinnElija (~finn_elij@user/finn-elija/x-0085643)
[02:30:20] *** Quits: machinedgod (~machinedg@24.105.81.50) (Ping timeout: 272 seconds)
[02:32:53] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[02:33:23] <ski> well, there is some
[02:33:25] <ski> @hoogle concatMapM
[02:33:26] <lambdabot> Data.Vector.Fusion.Bundle.Monadic concatMapM :: Monad m => (a -> m (Bundle m v b)) -> Bundle m v a -> Bundle m v b
[02:33:26] <lambdabot> Data.Vector.Fusion.Stream.Monadic concatMapM :: Monad m => (a -> m (Stream m b)) -> Stream m a -> Stream m b
[02:33:26] <lambdabot> Data.Conduit.Combinators concatMapM :: (Monad m, MonoFoldable mono) => (a -> m mono) -> ConduitT a (Element mono) m ()
[02:33:31] <ski> @hoogle+
[02:33:31] <lambdabot> Data.Conduit.List concatMapM :: Monad m => (a -> m [b]) -> ConduitT a b m ()
[02:33:31] <lambdabot> Control.Monad.Extra concatMapM :: Monad m => (a -> m [b]) -> [a] -> m [b]
[02:33:31] <lambdabot> Extra concatMapM :: Monad m => (a -> m [b]) -> [a] -> m [b]
[02:33:46] <ski> (apparently also `GHC.Utils.Monad')
[02:34:30] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 256 seconds)
[02:36:00] <ski> (and apparently the one in `Control.Monad.Extra' is not simply `(liftM concat .) . mapM', but is a `foldr' that checks if the current list (to prepend) is empty, avoiding the `liftM' in that case)
[02:36:17] <ski> but i was wondering if you could fuse the other `concat' with `mergeValues', possibly
[02:44:45] *** Joins: yauhsien_ (~yauhsien@61-231-19-150.dynamic-ip.hinet.net)
[02:45:07] *** Quits: __monty__ (~toonn@user/toonn) (Quit: leaving)
[02:46:49] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:106a:7188:c314:3535)
[02:47:34] *** Joins: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729)
[02:47:42] *** Joins: dons (~dons@user/dons)
[02:49:14] *** Quits: yauhsien_ (~yauhsien@61-231-19-150.dynamic-ip.hinet.net) (Ping timeout: 256 seconds)
[02:50:44] *** Joins: alx741 (~alx741@181.199.42.143)
[02:57:28] *** Quits: alx741 (~alx741@181.199.42.143) (Read error: Connection reset by peer)
[02:58:13] *** Joins: alx741 (~alx741@157.100.197.240)
[02:58:16] *** Quits: acidjnk (~acidjnk@p200300d0c71f74276499fb418a282b02.dip0.t-ipconnect.de) (Ping timeout: 245 seconds)
[03:00:41] <dons> moin moin
[03:00:51] *** Joins: CiaoSen (~Jura@p200300c95737a2002a3a4dfffe84dbd5.dip0.t-ipconnect.de)
[03:01:09] <Zemyla> I wish IntSet had a complement command.
[03:03:02] <byorgey> hey dons
[03:03:18] <dsal> Zemyla: You want a set of all integers?
[03:03:24] <byorgey> Zemyla: you mean e.g. if it stored a Bool saying whether it was complemented or not?
[03:03:42] <byorgey> I assume you would not want to literally store an IntSet of all Int values not in the original set
[03:03:46] <Zemyla> No, I was thinking about storing the members of the set as a list of intervals.
[03:04:03] <byorgey> Oh, a list of intervals, I see
[03:04:45] <byorgey> That would be nifty.  Getting the details right re: union, intersection, etc. would be the tricky part I assume.  But you should write it. =)
[03:05:46] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[03:05:46] *** Quits: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729) (Ping timeout: 245 seconds)
[03:06:31] *** Quits: cynomys (~cynomys@user/cynomys) (Ping timeout: 256 seconds)
[03:07:09] <Zemyla> Also, I should make Text.Parser.Permutation.Permutation an Applicative.
[03:08:57] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:106a:7188:c314:3535) (Remote host closed the connection)
[03:09:00] *** Quits: Tuplanolla (~Tuplanoll@91-159-69-98.elisa-laajakaista.fi) (Ping timeout: 240 seconds)
[03:09:41] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[03:12:20] *** Quits: juhp (~juhp@128.106.188.82) (Quit: juhp)
[03:12:34] *** Joins: juhp (~juhp@128.106.188.82)
[03:13:01] *** Joins: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl)
[03:13:51] *** Quits: spacenautx (~spacenaut@user/spacenautx) (Quit: WeeChat 3.4)
[03:14:22] *** Quits: jgeerds (~jgeerds@55d4b9df.access.ecotel.net) (Ping timeout: 260 seconds)
[03:15:36] *** Joins: jgeerds (~jgeerds@d53600c5.access.ecotel.net)
[03:17:51] *** Quits: alt-romes (~romes@44.190.189.46.rev.vodafone.pt) (Ping timeout: 256 seconds)
[03:18:42] *** Joins: alt-romes (~romes@44.190.189.46.rev.vodafone.pt)
[03:19:20] *** Quits: cosimone (~user@93-34-132-33.ip49.fastwebnet.it) (Quit: ERC (IRC client for Emacs 27.1))
[03:23:15] *** Quits: alMalsamo (~alMalsamo@gateway/tor-sasl/almalsamo) (Ping timeout: 240 seconds)
[03:23:44] *** Joins: alx741 (~alx741@157.100.197.240)
[03:27:26] *** Quits: zeenk (~zeenk@2a02:2f04:a30d:1300:51a3:bcfc:6cda:9fc5) (Quit: Konversation terminated!)
[03:28:17] *** Quits: wootehfoot (~wootehfoo@user/wootehfoot) (Ping timeout: 240 seconds)
[03:28:38] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[03:30:45] <Axman6> oh nice, I didn't realise that was in the parsers package. More parsers should use that, I hate that I can write a parser for Aeson that can't tell the parser what keys are allowable ahead of time. IIRC Waargonaut has this (after I pestered Sean several times about it)
[03:33:07] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:106a:7188:c314:3535)
[03:35:36] *** Joins: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729)
[03:35:59] <Axman6> dons: so are you back in Aus? Saw your tweet from the sydney ~bus~ boat
[03:39:57] *** Quits: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729) (Ping timeout: 240 seconds)
[03:42:54] *** Quits: max22- (~maxime@2a01cb088335980027fe609829d061d7.ipv6.abo.wanadoo.fr) (Remote host closed the connection)
[03:45:43] *** Quits: alt-romes (~romes@44.190.189.46.rev.vodafone.pt) (Quit: WeeChat 3.4)
[03:46:15] *** Joins: alx741 (~alx741@157.100.197.240)
[03:47:39] *** Quits: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl) (Ping timeout: 256 seconds)
[03:50:41] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[03:59:57] *** Joins: lavaman (~lavaman@98.38.249.169)
[04:00:11] *** Joins: Topsi (~Tobias@dyndsl-095-033-025-181.ewe-ip-backbone.de)
[04:00:58] *** Quits: vicfred (~vicfred@user/vicfred) (Quit: Leaving)
[04:01:30] *** Quits: jgeerds (~jgeerds@d53600c5.access.ecotel.net) (Ping timeout: 260 seconds)
[04:03:33] *** Joins: cynomys (~cynomys@user/cynomys)
[04:04:59] *** Quits: dvdrw (~dvdrw@user/dvdrw) (Quit: leaving)
[04:07:25] *** Joins: alx741 (~alx741@157.100.197.240)
[04:08:10] *** Quits: gentauro (~gentauro@user/gentauro) (Read error: Connection reset by peer)
[04:10:46] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[04:11:01] *** Joins: Null_A (~null_a@2601:645:8700:2290:a4fb:481a:7fa9:b909)
[04:12:04] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[04:12:04] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[04:12:04] *** Joins: wroathe (~wroathe@user/wroathe)
[04:13:37] *** Joins: gentauro (~gentauro@user/gentauro)
[04:14:54] *** Quits: ravella (~ravella@user/ryanavella) (Remote host closed the connection)
[04:15:37] *** Quits: Null_A (~null_a@2601:645:8700:2290:a4fb:481a:7fa9:b909) (Ping timeout: 240 seconds)
[04:19:23] *** Joins: mvk (~mvk@2607:fea8:5cdc:bf00::99e7)
[04:26:03] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[04:27:40] *** Joins: alx741 (~alx741@181.199.42.143)
[04:27:55] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.4)
[04:31:36] *** Quits: califax (~califax@user/califx) (Remote host closed the connection)
[04:32:07] *** Joins: lavaman (~lavaman@98.38.249.169)
[04:32:32] *** Quits: alx741 (~alx741@181.199.42.143) (Read error: Connection reset by peer)
[04:33:09] *** Joins: alx741 (~alx741@181.199.42.143)
[04:36:08] <hololeap_> I'm getting an error when trying to compile mustache-2.4.0 on ghc-8.10.6, but it compiles fine on ghc-9.0.2. the error seems related to parsec, but both systems have the same version
[04:36:22] <hololeap_> so I'm confused as to what could be the underlying error http://sprunge.us/RmBexL
[04:36:50] *** hololeap_ is now known as hololeap
[04:36:55] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Ping timeout: 240 seconds)
[04:37:19] *** Quits: alx741 (~alx741@181.199.42.143) (Read error: Connection reset by peer)
[04:38:16] *** Quits: cynomys (~cynomys@user/cynomys) (Ping timeout: 272 seconds)
[04:39:08] *** Joins: FinnElija (~finn_elij@user/finn-elija/x-0085643)
[04:39:30] <hololeap> the instance it's complaining about is defined in the version of parsec they both have installed: https://hackage.haskell.org/package/parsec-3.1.14.0/docs/Text-Parsec.html#t:Stream
[04:40:38] *** Joins: Ranhir (~Ranhir@157.97.53.139)
[04:40:45] *** Quits: albet70 (~xxx@2400:8902::f03c:92ff:fe60:98d8) (Remote host closed the connection)
[04:41:53] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:106a:7188:c314:3535) (Remote host closed the connection)
[04:43:06] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[04:43:19] *** Joins: lavaman (~lavaman@98.38.249.169)
[04:43:27] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[04:43:43] *** Joins: lavaman (~lavaman@98.38.249.169)
[04:43:50] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[04:44:06] *** Joins: lavaman (~lavaman@98.38.249.169)
[04:44:14] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[04:44:21] <hololeap> here is the source code for the module: https://github.com/JustusAdam/mustache/blob/master/src/Text/Mustache/Parser.hs
[04:44:28] *** Joins: lavaman (~lavaman@98.38.249.169)
[04:44:36] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[04:44:42] *** Joins: ByronJohnson (~bairyn@50-250-232-19-static.hfc.comcastbusiness.net)
[04:46:13] <ski> hm, i guess it may not be picking up `Monad Data.Functor.Identity', for whatever reason ?
[04:46:26] <ski> (considering how there's an instance `Monad m => Stream Text m Char')
[04:46:52] *** Joins: albet70 (~xxx@2400:8902::f03c:92ff:fe60:98d8)
[04:48:31] *** Quits: komikat (~komikat@183.82.154.239) (Ping timeout: 256 seconds)
[04:50:09] *** Joins: ravella (~ravella@user/ryanavella)
[04:50:12] <hololeap> I added `import Data.Functor.Monad` to the module, and now it's saying: No instance for (Stream Text Identity Char)
[04:50:43] <hololeap> it could be my environment or something like that
[04:50:46] *** Joins: komikat (~komikat@183.82.154.239)
[04:50:54] *** Joins: cynomys (~cynomys@user/cynomys)
[04:54:31] *** Joins: alx741 (~alx741@181.199.42.143)
[04:55:54] <hololeap> this did the trick. I have no idea why it is needed, though: http://sprunge.us/JDw9pW
[04:56:00] *** Quits: hyiltiz (~quassel@31.220.5.250) (Ping timeout: 272 seconds)
[04:57:51] *** Quits: alx741 (~alx741@181.199.42.143) (Read error: Connection reset by peer)
[04:58:04] <hololeap> when I apply that patch to my 9.0.2 system, it gives an overlapping instance error
[04:59:37] *** Joins: lavaman (~lavaman@98.38.249.169)
[04:59:39] *** Joins: hyiltiz (~quassel@31.220.5.250)
[05:01:20] <pareto-optimal-d> Is "always write the most polymorphic version of your function first" a hot take? 
[05:01:21] *** Quits: ravella (~ravella@user/ryanavella) (Remote host closed the connection)
[05:02:08] <Axman6> the more polymorphic the function is, the harder it is to get wrong generally
[05:03:08] <dolio> The answer is, "yes."
[05:04:33] <pareto-optimal-d> dolio: Okay, that was my suspicion after telling a coworker I created a note in zettlekasten with that today 😅
[05:05:23] *** Quits: emf (~emf@c-73-97-137-43.hsd1.wa.comcast.net) (Quit: emf)
[05:05:30] <hololeap> ok, this is weird, if I unpack mustache on the 8.10.6 system and then run `cabal build` it says "parsec-3.1.14.0 (lib) (requires download & build)"
[05:05:43] <hololeap> but `ghc-pkg field parsec version` says: "version: 3.1.14.0"
[05:05:48] <pareto-optimal-d> Axman6: that's essentially what led me to write about it today and then others reaction made me want to ask here.
[05:06:39] <dolio> Don't give, "always X," advice.
[05:06:56] <hololeap> so it almost seems like the system-installed parsec is visible to ghc-pkg but not to cabal
[05:07:16] <monochrom> My answer is no. I don't do it. Sometimes I think I did it, but turns out no, my version is not the most polymorphic possible.  Overall, it sounds like dangerously close to perfection OCD and the joke about "what happens if you ask a software dev to make a toaster".
[05:08:41] *** Quits: Pickchea (~private@user/pickchea) (Ping timeout: 272 seconds)
[05:09:14] <Axman6> My advice is always don't give "always X" advice
[05:09:42] <pareto-optimal-d> The disagreement made me think there is a useful question along the lines of "are free theorems and their benefits enough to be worth more than monomorphic functions that have better errors and are easier for beginners to reason about".
[05:10:17] <pareto-optimal-d> and "is having a policy preventing or limiting premature monomorphizing to get more theorems for free additive? Additive multiplicatively?" 
[05:11:06] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:106a:7188:c314:3535)
[05:11:19] <monochrom> My policy is against premature generalizations.  Premature polymorphization is a special case.
[05:13:47] *** Joins: yauhsien_ (~yauhsien@61-231-19-150.dynamic-ip.hinet.net)
[05:14:35] *** Quits: Guest68 (~Guest68@134.101.5.46) (Ping timeout: 256 seconds)
[05:14:46] *** Joins: alx741 (~alx741@157.100.197.240)
[05:16:12] <pareto-optimal-d> monochrom: mine used to be, but after some years working in a codebase that takes a strong stance against premature generalization I see some downsides.
[05:16:12] <pareto-optimal-d> What are your thoughts of the example at 14:00 in this video:
[05:16:12] <pareto-optimal-d> https://youtu.be/BHjIl81HgfE
[05:18:02] <pareto-optimal-d> <Axman6> "My advice is always don't give..." <- I like to create "always do X" and "always do Y" in my notes because they motivate writing "why 'always do X' was a dumb idea" 
[05:18:03] *** Joins: alMalsamo (~alMalsamo@gateway/tor-sasl/almalsamo)
[05:18:33] *** Quits: yauhsien_ (~yauhsien@61-231-19-150.dynamic-ip.hinet.net) (Ping timeout: 256 seconds)
[05:18:43] <dons> Axman6, yep back in Syd
[05:18:50] <pareto-optimal-d> I'll look at one and be outraged
[05:19:01] *** Joins: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729)
[05:20:22] *** Joins: justsomeguy (~justsomeg@user/justsomeguy)
[05:22:35] <justsomeguy> Is there some way to write types like Map, Set, and Sequence as literals?
[05:24:33] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[05:24:34] <jackdk> -XOverloadedLists
[05:26:14] <justsomeguy> I had something in mind like Sets: { "one":1, "two":2 }, Maps: {"one","two"}, Vectors: (1,3) [1,2,3]. It seems like OverloadedLists can do a lot, though.
[05:27:37] *** Quits: alp (~alp@user/alp) (Ping timeout: 240 seconds)
[05:28:59] <monochrom> fromList [(key0, val0), (key1, val1)]; fromList [member0, member1]; [item0, item1].
[05:29:17] *** Quits: turlando (~turlando@user/turlando) (Ping timeout: 240 seconds)
[05:30:54] <justsomeguy> I don't really understand templateHaskell, but can it do things like this?
[05:31:32] * justsomeguy is just curious about what options are available, regardless of how impractical they are to use.
[05:35:08] <justsomeguy> I'll definitely be using OverloadedLists for personal stuff, I think.
[05:36:12] *** Quits: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729) (Ping timeout: 250 seconds)
[05:37:54] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:106a:7188:c314:3535) (Remote host closed the connection)
[05:39:00] *** Quits: jao (~jao@68.235.43.174) (Ping timeout: 240 seconds)
[05:39:19] <justsomeguy> Do fromList and toList get evaulated at compile time, if the values are used elsewhere in the program?
[05:40:31] <monochrom> No.
[05:40:35] <Cale> Never. The best you'll manage is that if you define a constant, they'll get evaluated at most once during the execution of the program.
[05:40:55] *** Joins: deadmarshal (~deadmarsh@95.38.112.124)
[05:40:56] *** Joins: alx741 (~alx741@181.199.42.143)
[05:41:32] <Cale> It would be nice to be able to force that kind of thing to happen statically when you want it, but there's really not much of a way to express it.
[05:41:39] <Cale> (at present)
[05:42:30] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:106a:7188:c314:3535)
[05:43:05] *** Quits: jonathanx__ (~jonathan@h-178-174-176-109.A357.priv.bahnhof.se) (Remote host closed the connection)
[05:43:11] *** Quits: alx741 (~alx741@181.199.42.143) (Read error: Connection reset by peer)
[05:43:22] *** Joins: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl)
[05:43:26] *** Joins: jonathanx__ (~jonathan@h-178-174-176-109.A357.priv.bahnhof.se)
[05:45:45] *** Quits: deadmarshal (~deadmarsh@95.38.112.124) (Ping timeout: 256 seconds)
[05:49:06] *** Quits: justsomeguy (~justsomeg@user/justsomeguy) (Quit: WeeChat 3.4)
[05:50:42] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Ping timeout: 260 seconds)
[05:50:57] *** Quits: derelict (derelict@user/derelict) (Quit: bye)
[05:51:59] *** Joins: derelict (derelict@user/derelict)
[05:52:09] *** Quits: little_mac (~little_ma@2601:410:4300:3ce0:283e:efa7:e0c6:e848) (Remote host closed the connection)
[05:54:35] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[06:00:17] *** Joins: alx741 (~alx741@157.100.197.240)
[06:05:07] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[06:06:39] *** Joins: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729)
[06:06:40] *** Quits: justAstache (~justache@user/justache) (Read error: Connection reset by peer)
[06:07:37] *** Joins: justAstache (~justache@user/justache)
[06:10:57] *** Quits: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729) (Ping timeout: 240 seconds)
[06:11:09] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[06:12:40] *** Quits: juhp (~juhp@128.106.188.82) (Quit: juhp)
[06:12:53] *** Joins: juhp (~juhp@128.106.188.82)
[06:15:02] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 240 seconds)
[06:15:39] *** bontaq` is now known as bontaq
[06:16:02] *** Quits: xff0x (~xff0x@2001:1a81:5372:9200:4da8:4717:4e75:17ef) (Ping timeout: 240 seconds)
[06:17:46] *** Quits: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl) (Ping timeout: 256 seconds)
[06:17:56] *** Joins: xff0x (~xff0x@2001:1a81:53ab:2800:b38f:e60b:4875:f7ef)
[06:21:43] <Axman6> dons: welcome home
[06:22:49] *** Joins: alx741 (~alx741@181.199.42.143)
[06:27:21] *** Quits: alx741 (~alx741@181.199.42.143) (Read error: Connection reset by peer)
[06:28:28] *** Quits: neurocyte0917090 (~neurocyte@user/neurocyte) (Ping timeout: 272 seconds)
[06:32:03] *** Joins: mbuf (~Shakthi@171.61.250.50)
[06:35:40] *** Joins: ravella (~ravella@user/ryanavella)
[06:36:31] *** Joins: yauhsien_ (~yauhsien@61-231-19-150.dynamic-ip.hinet.net)
[06:36:49] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Read error: Connection reset by peer)
[06:37:18] *** Quits: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340) (Ping timeout: 250 seconds)
[06:37:38] *** Quits: hololeap (~hololeap@user/hololeap) (Remote host closed the connection)
[06:38:22] *** Joins: lavaman (~lavaman@98.38.249.169)
[06:38:26] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[06:38:58] *** Joins: lavaman (~lavaman@98.38.249.169)
[06:39:52] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[06:39:53] *** Joins: notzmv (~zmv@user/notzmv)
[06:41:03] *** Joins: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729)
[06:43:16] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 256 seconds)
[06:43:37] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[06:44:12] *** Joins: alx741 (~alx741@157.100.197.240)
[06:45:59] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[06:45:59] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[06:45:59] *** Joins: wroathe (~wroathe@user/wroathe)
[06:50:36] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[06:51:42] *** Joins: hololeap (~hololeap@user/hololeap)
[06:52:54] *** Quits: td_ (~td@muedsl-82-207-238-240.citykom.de) (Ping timeout: 256 seconds)
[06:53:54] *** Quits: Ranhir (~Ranhir@157.97.53.139) (Remote host closed the connection)
[06:54:24] *** Joins: td_ (~td@94.134.91.238)
[06:54:35] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[06:56:24] *** Joins: Ranhir (~Ranhir@157.97.53.139)
[06:59:17] *** Quits: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729) (Ping timeout: 240 seconds)
[07:00:24] *** Quits: zachel (~zachel@user/zachel) (Quit: Quit: Leaving!)
[07:03:08] *** Joins: zachel (~zachel@user/zachel)
[07:03:09] *** Quits: CiaoSen (~Jura@p200300c95737a2002a3a4dfffe84dbd5.dip0.t-ipconnect.de) (Ping timeout: 256 seconds)
[07:05:12] *** Quits: komikat (~komikat@183.82.154.239) (Ping timeout: 272 seconds)
[07:06:48] *** Joins: komikat (~komikat@183.82.154.239)
[07:09:52] <Sqaure> Is there some goto library for simple text replacement, like say "blabla ${var}blabla" 
[07:10:15] *** Joins: little_mac (~little_ma@2601:410:4300:3ce0:25e4:decc:c8da:26b5)
[07:11:04] *** Quits: terrorjack (~terrorjac@2a01:4f8:1c1e:509a::1) (Quit: The Lounge - https://thelounge.chat)
[07:11:17] *** Joins: alx741 (~alx741@157.100.197.240)
[07:11:58] <jackdk> Sqaure: several. interpolation, neat-interpolation, string-interpolate, ... They use -XQuasiQuotes so you write something like `[i|blabla #{var}blabla]`
[07:12:00] *** Joins: terrorjack (~terrorjac@static.3.200.12.49.clients.your-server.de)
[07:12:25] <jackdk> I am not aware of a clear winner
[07:14:55] *** Quits: vysn (~vysn@user/vysn) (Quit: WeeChat 3.4)
[07:15:49] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[07:16:53] *** Joins: deadmarshal (~deadmarsh@95.38.112.124)
[07:18:07] <Sqaure> jackdk, ah thanks
[07:23:20] *** Quits: xkuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[07:27:02] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Remote host closed the connection)
[07:30:52] *** Quits: yauhsien_ (~yauhsien@61-231-19-150.dynamic-ip.hinet.net) (Ping timeout: 256 seconds)
[07:31:34] *** Joins: yauhsien_ (~yauhsien@61-231-19-150.dynamic-ip.hinet.net)
[07:31:54] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Remote host closed the connection)
[07:32:33] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[07:33:49] *** Joins: alx741 (~alx741@157.100.197.240)
[07:36:09] *** Joins: Guest|39 (~Guest|39@190.195.205.199)
[07:36:14] *** Quits: yauhsien_ (~yauhsien@61-231-19-150.dynamic-ip.hinet.net) (Ping timeout: 272 seconds)
[07:36:42] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[07:37:46] <Guest|39> how to install haskell on windows
[07:41:36] <Sqaure> Guest|39, im not running windows myself but i believe it should be detailed here https://www.haskell.org/downloads/ 
[07:42:25] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[07:42:25] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[07:42:25] *** Joins: wroathe (~wroathe@user/wroathe)
[07:42:25] *** Quits: Guest|39 (~Guest|39@190.195.205.199) (Remote host closed the connection)
[07:45:44] <janus> Sqaure: i like https://github.com/yesodweb/shakespeare
[07:48:42] *** Joins: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729)
[07:49:22] <Sqaure> janus, thanks. Looks like i might have more than i need. Just dealing with simple texts here.
[07:50:15] <Sqaure> it*
[07:50:50] *** Joins: alp (~alp@user/alp)
[07:52:55] *** Joins: alx741 (~alx741@181.199.42.143)
[07:53:25] *** Joins: yauhsien_ (~yauhsien@61-231-19-150.dynamic-ip.hinet.net)
[07:53:45] *** Quits: yauhsien_ (~yauhsien@61-231-19-150.dynamic-ip.hinet.net) (Remote host closed the connection)
[07:54:06] *** Quits: Erutuon (~Erutuon@user/erutuon) (Ping timeout: 256 seconds)
[07:54:28] *** Joins: yauhsien_ (~yauhsien@61-231-19-150.dynamic-ip.hinet.net)
[08:01:18] *** Quits: benin (~benin@59.92.239.104) (Quit: Ping timeout (120 seconds))
[08:01:40] *** Joins: benin (~benin@59.92.239.104)
[08:01:42] *** Quits: alx741 (~alx741@181.199.42.143) (Read error: Connection reset by peer)
[08:01:47] *** Quits: yauhsien_ (~yauhsien@61-231-19-150.dynamic-ip.hinet.net) (Remote host closed the connection)
[08:02:24] *** Joins: alx741 (~alx741@157.100.197.240)
[08:02:48] *** Joins: yauhsien_ (~yauhsien@61-231-19-150.dynamic-ip.hinet.net)
[08:05:00] *** Quits: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729) (Ping timeout: 240 seconds)
[08:08:32] *** Quits: yauhsien_ (~yauhsien@61-231-19-150.dynamic-ip.hinet.net) (Ping timeout: 272 seconds)
[08:11:17] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[08:14:06] *** Joins: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl)
[08:15:05] *** Quits: alp (~alp@user/alp) (Remote host closed the connection)
[08:15:25] *** Joins: alp (~alp@user/alp)
[08:15:53] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[08:18:57] *** Quits: deadmarshal (~deadmarsh@95.38.112.124) (Ping timeout: 240 seconds)
[08:19:25] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Read error: Connection reset by peer)
[08:21:09] *** Quits: alp (~alp@user/alp) (Remote host closed the connection)
[08:21:28] *** Joins: alp (~alp@user/alp)
[08:24:10] *** Joins: Erutuon (~Erutuon@user/erutuon)
[08:24:48] *** Quits: komikat (~komikat@183.82.154.239) (Remote host closed the connection)
[08:25:00] *** Joins: komikat (~komikat@183.82.154.239)
[08:27:31] *** Joins: alx741 (~alx741@157.100.197.240)
[08:31:41] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[08:32:37] *** Quits: shapr (~user@pool-173-73-44-186.washdc.fios.verizon.net) (Ping timeout: 240 seconds)
[08:33:37] *** Quits: mvk (~mvk@2607:fea8:5cdc:bf00::99e7) (Ping timeout: 240 seconds)
[08:34:23] *** Quits: zebrag (~chris@user/zebrag) (Quit: Konversation terminated!)
[08:35:24] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[08:36:17] *** Quits: alp (~alp@user/alp) (Ping timeout: 240 seconds)
[08:38:56] *** Quits: Erutuon (~Erutuon@user/erutuon) (Ping timeout: 272 seconds)
[08:41:34] *** Joins: Erutuon (~Erutuon@user/erutuon)
[08:42:17] *** Joins: pokhu (~rishi@103.206.114.88)
[08:43:22] *** Quits: little_mac (~little_ma@2601:410:4300:3ce0:25e4:decc:c8da:26b5) (Quit: Leaving)
[08:43:39] *** Joins: little_mac (~little_ma@2601:410:4300:3ce0:25e4:decc:c8da:26b5)
[08:49:04] *** Quits: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl) (Ping timeout: 272 seconds)
[08:50:01] *** Joins: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729)
[08:50:02] *** Joins: alx741 (~alx741@157.100.197.240)
[08:51:40] *** Joins: yauhsien_ (~yauhsien@61-231-19-150.dynamic-ip.hinet.net)
[08:52:45] *** Quits: Topsi (~Tobias@dyndsl-095-033-025-181.ewe-ip-backbone.de) (Ping timeout: 256 seconds)
[08:52:58] *** Joins: Topsi (~Tobias@dyndsl-095-033-018-046.ewe-ip-backbone.de)
[08:54:37] *** Quits: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729) (Ping timeout: 240 seconds)
[08:54:37] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[08:54:41] *** Joins: hgolden (~hgolden2@cpe-172-114-81-123.socal.res.rr.com)
[08:54:43] <jackdk> Sqaure: if that's your use case, I like the `formatting` library. it's more of a FP-ish take on printf I guess
[08:55:58] *** Quits: yauhsien_ (~yauhsien@61-231-19-150.dynamic-ip.hinet.net) (Ping timeout: 250 seconds)
[08:56:00] <Sqaure> jackdk, okok. Ill check that out. I realize i down want quasi quotes. Atm i just want runtime interpolation (with risk of breaking)
[08:56:09] <Sqaure> I don't*
[08:56:12] *** Quits: cynomys (~cynomys@user/cynomys) (Ping timeout: 240 seconds)
[08:57:07] <jackdk> Sqaure: `format ("Person's name is " % t % ", age is " % int) "Dave" 54` is an example inspired by the docs
[08:58:20] <Sqaure> downloading it now
[09:01:23] *** Quits: little_mac (~little_ma@2601:410:4300:3ce0:25e4:decc:c8da:26b5) (Quit: Leaving)
[09:01:39] *** Joins: little_mac (~little_ma@2601:410:4300:3ce0:25e4:decc:c8da:26b5)
[09:01:59] *** Quits: mbuf (~Shakthi@171.61.250.50) (Quit: Leaving)
[09:05:26] <Sqaure> jackdk, you don't happen to know if it have functions to parse plain text into these text functions?  
[09:05:47] <jackdk> Sqaure: can you please rephrase your question? I don't understand
[09:08:42] *** Quits: bontaq (~user@ool-45779fe5.dyn.optonline.net) (Ping timeout: 272 seconds)
[09:10:40] <Sqaure> jackdk, my texts (that should be able to contain replacement expressions) are loaded from a yaml file. In "Formatting", the uninterpolated texts in the examples are all haskell expressions. So I was wondering if there was an easy way to turn the plain text from yaml into these functions Formatting works with?
[09:11:17] <jackdk> Sqaure: ah, I see. No, formatting won't help you there. I would go looking for a templating library
[09:11:29] <Sqaure> gotcha. Thanks
[09:12:25] *** Joins: yauhsien_ (~yauhsien@61-231-19-150.dynamic-ip.hinet.net)
[09:13:07] *** Joins: alx741 (~alx741@157.100.197.240)
[09:17:41] *** Quits: yauhsien_ (~yauhsien@61-231-19-150.dynamic-ip.hinet.net) (Ping timeout: 256 seconds)
[09:21:49] *** Quits: little_mac (~little_ma@2601:410:4300:3ce0:25e4:decc:c8da:26b5) (Quit: Leaving)
[09:22:07] *** Joins: little_mac (~little_ma@2601:410:4300:3ce0:25e4:decc:c8da:26b5)
[09:22:47] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[09:23:56] <Sqaure> The library "template" seems to do what i want.
[09:25:38] *** Quits: little_mac (~little_ma@2601:410:4300:3ce0:25e4:decc:c8da:26b5) (Client Quit)
[09:25:54] *** Joins: little_mac (~little_ma@2601:410:4300:3ce0:25e4:decc:c8da:26b5)
[09:28:20] *** Joins: cynomys (~cynomys@user/cynomys)
[09:30:26] *** Joins: yauhsien_ (~yauhsien@61-231-19-150.dynamic-ip.hinet.net)
[09:30:26] *** Quits: Unicorn_Princess (~Unicorn_P@93-103-228-248.dynamic.t-2.net) (Quit: Leaving)
[09:30:31] *** Joins: coot (~coot@213.134.190.95)
[09:34:32] *** Quits: modnar (~modnar@shell.sonic.net) (Ping timeout: 250 seconds)
[09:35:54] *** Quits: Giovanni (~Giovanni@176.67.166.45) (Read error: Connection reset by peer)
[09:35:56] *** Quits: yauhsien_ (~yauhsien@61-231-19-150.dynamic-ip.hinet.net) (Ping timeout: 272 seconds)
[09:36:04] *** Joins: modnar (~modnar@shell.sonic.net)
[09:37:31] *** Joins: bahamas (~lucian@84.232.140.52)
[09:39:12] *** Joins: alx741 (~alx741@181.199.42.143)
[09:41:18] *** Joins: Giovanni (~Giovanni@176.67.166.45)
[09:42:59] *** Joins: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729)
[09:43:06] *** Quits: alx741 (~alx741@181.199.42.143) (Read error: Connection reset by peer)
[09:43:25] *** Joins: nattiestnate (~nate@182.2.41.240)
[09:43:41] *** Joins: alx741 (~alx741@157.100.197.240)
[09:47:31] *** Joins: iqubic (~user@2601:602:9502:c70:f02e:17f5:f781:f107)
[09:48:24] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[09:48:46] *** Joins: yauhsien_ (~yauhsien@61-231-19-150.dynamic-ip.hinet.net)
[09:49:04] *** Parts: iqubic (~user@2601:602:9502:c70:f02e:17f5:f781:f107) ()
[09:52:07] *** Quits: yauhsien_ (~yauhsien@61-231-19-150.dynamic-ip.hinet.net) (Remote host closed the connection)
[09:53:01] *** Joins: yauhsien_ (~yauhsien@61-231-19-150.dynamic-ip.hinet.net)
[09:56:56] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Remote host closed the connection)
[09:57:09] *** Parts: pokhu (~rishi@103.206.114.88) ()
[09:58:02] *** Quits: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729) (Ping timeout: 240 seconds)
[09:58:12] *** Quits: yauhsien_ (~yauhsien@61-231-19-150.dynamic-ip.hinet.net) (Ping timeout: 256 seconds)
[09:58:17] *** Joins: takuan (~takuan@178-116-218-225.access.telenet.be)
[09:58:29] *** Quits: bahamas (~lucian@84.232.140.52) (Ping timeout: 256 seconds)
[10:00:11] *** Quits: takuan (~takuan@178-116-218-225.access.telenet.be) (Read error: Connection reset by peer)
[10:00:53] *** Joins: takuan (~takuan@178-116-218-225.access.telenet.be)
[10:02:27] *** Quits: cynomys (~cynomys@user/cynomys) (Ping timeout: 256 seconds)
[10:04:00] *** Quits: shriekingnoise (~shrieking@201.231.16.156) (Quit: Quit)
[10:04:41] *** Joins: alx741 (~alx741@181.199.42.143)
[10:05:20] *** Joins: geekosaur (~geekosaur@xmonad/geekosaur)
[10:09:32] *** Quits: alx741 (~alx741@181.199.42.143) (Read error: Connection reset by peer)
[10:10:10] *** Joins: alx741 (~alx741@181.199.42.143)
[10:15:01] *** Quits: alx741 (~alx741@181.199.42.143) (Read error: Connection reset by peer)
[10:15:39] *** Joins: alx741 (~alx741@157.100.197.240)
[10:16:45] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Remote host closed the connection)
[10:17:01] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[10:19:08] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[10:25:26] *** Quits: vglfr (~vglfr@coupling.penchant.volia.net) (Read error: Connection reset by peer)
[10:25:39] *** Joins: vglfr (~vglfr@coupling.penchant.volia.net)
[10:26:18] *** Joins: gdown (~gavin@h69-11-150-165.kndrid.broadband.dynamic.tds.net)
[10:27:16] *** Joins: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729)
[10:31:48] *** Quits: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729) (Ping timeout: 240 seconds)
[10:33:22] *** Joins: sander (~sander@user/sander)
[10:33:50] *** Joins: mikoto-chan (~mikoto-ch@213.177.151.239)
[10:36:03] *** Quits: bliminse (~bliminse@host86-158-241-239.range86-158.btcentralplus.com) (Ping timeout: 252 seconds)
[10:36:50] *** Quits: vglfr (~vglfr@coupling.penchant.volia.net) (Read error: Connection reset by peer)
[10:37:13] *** Joins: alx741 (~alx741@157.100.197.240)
[10:37:16] *** Joins: vglfr (~vglfr@coupling.penchant.volia.net)
[10:38:01] *** Joins: bliminse (~bliminse@host109-152-150-162.range109-152.btcentralplus.com)
[10:40:51] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[10:42:01] *** Quits: mikoto-chan (~mikoto-ch@213.177.151.239) (Ping timeout: 245 seconds)
[10:44:07] *** Quits: monochrom (trebla@216.138.220.146) (Quit: NO CARRIER)
[10:44:35] *** Joins: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl)
[10:44:58] *** Joins: ccntrq (~Thunderbi@2a01:e34:eccb:b060:ea23:2b79:a0de:4996)
[10:45:11] *** Joins: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729)
[10:52:01] *** Quits: vglfr (~vglfr@coupling.penchant.volia.net) (Read error: Connection reset by peer)
[10:52:26] *** Joins: vglfr (~vglfr@coupling.penchant.volia.net)
[10:55:50] *** Joins: Pickchea (~private@user/pickchea)
[10:58:01] *** Joins: monochrom (trebla@216.138.220.146)
[10:58:37] *** Joins: alx741 (~alx741@157.100.197.240)
[10:58:54] *** Joins: gehmehgeh (~user@user/gehmehgeh)
[11:01:23] *** Quits: vglfr (~vglfr@coupling.penchant.volia.net) (Read error: Connection reset by peer)
[11:01:48] *** Joins: vglfr (~vglfr@coupling.penchant.volia.net)
[11:03:05] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[11:03:15] *** Quits: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao) (Ping timeout: 240 seconds)
[11:03:24] *** Quits: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729) (Ping timeout: 240 seconds)
[11:03:47] *** Joins: dextaa_ (~dextaa@user/dextaa)
[11:03:55] *** Joins: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao)
[11:05:49] *** Joins: cynomys (~cynomys@user/cynomys)
[11:08:24] *** Quits: yrlnry (~mjd@pool-74-109-20-19.phlapa.fios.verizon.net) (Ping timeout: 272 seconds)
[11:09:19] *** Joins: yrlnry (~mjd@pool-74-109-20-19.phlapa.fios.verizon.net)
[11:09:21] *** Joins: alp (~alp@user/alp)
[11:11:36] *** Quits: vorpuni (~pvorp@2001:861:3881:c690:d322:f659:136d:eef6) (Ping timeout: 250 seconds)
[11:15:21] *** Joins: benin7 (~benin@117.202.69.195)
[11:16:44] *** Quits: dextaa_ (~dextaa@user/dextaa) (Remote host closed the connection)
[11:17:15] *** Quits: benin (~benin@59.92.239.104) (Ping timeout: 256 seconds)
[11:17:15] *** benin7 is now known as benin
[11:17:56] *** Joins: MajorBiscuit (~MajorBisc@c-001-017-039.client.tudelft.eduvpn.nl)
[11:19:10] *** Quits: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl) (Ping timeout: 272 seconds)
[11:19:46] *** Joins: alx741 (~alx741@157.100.197.240)
[11:20:01] *** Quits: vglfr (~vglfr@coupling.penchant.volia.net) (Read error: Connection reset by peer)
[11:20:08] *** Joins: vglfr (~vglfr@coupling.penchant.volia.net)
[11:21:49] *** Joins: deadmarshal (~deadmarsh@95.38.230.132)
[11:22:19] *** Quits: nattiestnate (~nate@182.2.41.240) (Quit: WeeChat 3.4)
[11:22:35] <dminuoso> Cale: You said never, what about TH splices?
[11:24:14] *** Joins: lortabac (~lortabac@2a01:e0a:541:b8f0:65ac:9e8f:4b5e:2c6b)
[11:24:15] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[11:24:50] *** Joins: yauhsien_ (~yauhsien@61-231-19-150.dynamic-ip.hinet.net)
[11:26:36] *** Quits: deadmarshal (~deadmarsh@95.38.230.132) (Ping timeout: 256 seconds)
[11:27:11] *** Joins: Ariakenom (~Ariakenom@h-82-196-111-63.NA.cust.bahnhof.se)
[11:29:22] *** Joins: mc47 (~mc47@xmonad/TheMC47)
[11:29:41] *** Joins: jstolarek (~jstolarek@staticline-31-183-182-85.toya.net.pl)
[11:33:23] *** Quits: yauhsien_ (~yauhsien@61-231-19-150.dynamic-ip.hinet.net) (Remote host closed the connection)
[11:33:24] *** Joins: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729)
[11:34:07] *** Joins: zeenk (~zeenk@2a02:2f04:a30d:1300:51a3:bcfc:6cda:9fc5)
[11:34:17] *** Joins: yauhsien_ (~yauhsien@61-231-19-150.dynamic-ip.hinet.net)
[11:34:25] *** Quits: yauhsien (~Yau-Hsien@61-231-19-150.dynamic-ip.hinet.net) (Read error: Connection reset by peer)
[11:35:45] *** Joins: kuribas (~user@ptr-25vy0ial5agu2xq2mv8.18120a2.ip6.access.telenet.be)
[11:37:57] *** Quits: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729) (Ping timeout: 240 seconds)
[11:39:17] *** Quits: yauhsien_ (~yauhsien@61-231-19-150.dynamic-ip.hinet.net) (Ping timeout: 252 seconds)
[11:39:24] *** Joins: dhouthoo (~dhouthoo@178-117-36-167.access.telenet.be)
[11:40:42] *** Joins: alx741 (~alx741@157.100.197.240)
[11:45:32] *** Joins: cfricke (~cfricke@user/cfricke)
[11:47:42] *** Quits: jstolarek (~jstolarek@staticline-31-183-182-85.toya.net.pl) (Quit: leaving)
[11:49:16] *** Quits: vglfr (~vglfr@coupling.penchant.volia.net) (Read error: Connection reset by peer)
[11:49:17] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[11:49:32] *** Joins: vglfr (~vglfr@coupling.penchant.volia.net)
[11:50:01] *** Joins: vickyHaskell (~textual@49.37.169.2)
[11:51:26] *** Joins: Null_A (~null_a@2601:645:8700:2290:a4fb:481a:7fa9:b909)
[11:52:36] *** Quits: Pickchea (~private@user/pickchea) (Ping timeout: 240 seconds)
[11:55:33] *** Quits: Null_A (~null_a@2601:645:8700:2290:a4fb:481a:7fa9:b909) (Ping timeout: 250 seconds)
[11:55:41] *** Joins: acidjnk (~acidjnk@dynamic-089-204-137-076.89.204.137.pool.telefonica.de)
[11:58:37] *** Quits: vglfr (~vglfr@coupling.penchant.volia.net) (Read error: Connection reset by peer)
[11:59:13] *** Joins: vglfr (~vglfr@coupling.penchant.volia.net)
[12:03:48] *** Joins: yauhsien (~yauhsien@61-231-19-150.dynamic-ip.hinet.net)
[12:04:18] *** Joins: cosimone (~user@93-34-132-33.ip49.fastwebnet.it)
[12:04:44] *** Joins: jgeerds (~jgeerds@d53600c5.access.ecotel.net)
[12:05:44] *** Joins: alx741 (~alx741@157.100.197.240)
[12:06:33] *** Joins: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net)
[12:07:06] *** Quits: Sgeo (~Sgeo@user/sgeo) (Read error: Connection reset by peer)
[12:07:24] *** Joins: mbuf (~Shakthi@122.178.120.57)
[12:08:21] *** Joins: fendor (~fendor@178.165.167.221.wireless.dyn.drei.com)
[12:09:21] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[12:09:34] *** Quits: vglfr (~vglfr@coupling.penchant.volia.net) (Read error: Connection reset by peer)
[12:09:47] *** Joins: vglfr (~vglfr@coupling.penchant.volia.net)
[12:10:43] *** Quits: komikat (~komikat@183.82.154.239) (Remote host closed the connection)
[12:13:09] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (Read error: Connection reset by peer)
[12:14:14] *** Joins: vysn (~vysn@user/vysn)
[12:14:16] *** Quits: cynomys (~cynomys@user/cynomys) (Ping timeout: 272 seconds)
[12:14:34] *** Joins: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi)
[12:15:58] *** Joins: komikat (~komikat@183.82.154.239)
[12:15:58] *** Quits: vglfr (~vglfr@coupling.penchant.volia.net) (Read error: Connection reset by peer)
[12:17:14] *** Joins: vglfr (~vglfr@coupling.penchant.volia.net)
[12:19:53] *** Quits: vglfr (~vglfr@coupling.penchant.volia.net) (Read error: Connection reset by peer)
[12:20:34] *** Joins: machinedgod (~machinedg@24.105.81.50)
[12:20:43] *** Quits: komikat (~komikat@183.82.154.239) (Ping timeout: 256 seconds)
[12:21:15] *** Joins: vglfr (~vglfr@coupling.penchant.volia.net)
[12:21:18] *** Joins: chele (~chele@user/chele)
[12:23:00] *** Quits: juhp (~juhp@128.106.188.82) (Quit: juhp)
[12:23:13] *** Joins: juhp (~juhp@128.106.188.82)
[12:23:51] *** Quits: vglfr (~vglfr@coupling.penchant.volia.net) (Read error: Connection reset by peer)
[12:24:03] *** Joins: vglfr (~vglfr@coupling.penchant.volia.net)
[12:24:31] *** Joins: komikat (~komikat@183.82.154.239)
[12:25:38] *** Joins: jespada (~jespada@85.255.234.190)
[12:27:08] *** Joins: alx741 (~alx741@157.100.197.240)
[12:29:09] *** Joins: abhixec (~abhinav@c-67-169-139-16.hsd1.ca.comcast.net)
[12:30:55] *** Quits: vglfr (~vglfr@coupling.penchant.volia.net) (Read error: Connection reset by peer)
[12:31:27] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[12:31:34] *** Joins: vglfr (~vglfr@coupling.penchant.volia.net)
[12:32:52] *** Joins: cynomys (~cynomys@user/cynomys)
[12:33:00] *** Joins: max22- (~maxime@lfbn-ren-1-1026-62.w92-139.abo.wanadoo.fr)
[12:33:49] *** Quits: jgeerds (~jgeerds@d53600c5.access.ecotel.net) (Ping timeout: 240 seconds)
[12:34:52] *** Joins: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl)
[12:35:18] *** Joins: chege (~chege@197.237.199.183)
[12:39:17] *** Quits: chege (~chege@197.237.199.183) (Quit: Client closed)
[12:41:09] *** Joins: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729)
[12:42:35] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 240 seconds)
[12:42:36] *** Quits: vglfr (~vglfr@coupling.penchant.volia.net) (Read error: Connection reset by peer)
[12:43:36] *** Joins: vglfr (~vglfr@coupling.penchant.volia.net)
[12:49:22] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:106a:7188:c314:3535) (Remote host closed the connection)
[12:49:39] *** Joins: alx741 (~alx741@157.100.197.240)
[12:50:25] *** Joins: ProfSimm (~ProfSimm@87.227.196.109)
[12:53:37] *** Quits: Erutuon (~Erutuon@user/erutuon) (Ping timeout: 240 seconds)
[12:54:09] *** Quits: analognoise (~analognoi@185.202.221.26) (Read error: Connection reset by peer)
[12:56:41] *** Quits: gdown (~gavin@h69-11-150-165.kndrid.broadband.dynamic.tds.net) (Remote host closed the connection)
[12:58:00] *** Quits: coot (~coot@213.134.190.95) (Quit: coot)
[12:58:12] *** Quits: vglfr (~vglfr@coupling.penchant.volia.net) (Read error: Connection reset by peer)
[12:58:50] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[12:59:05] *** Joins: vglfr (~vglfr@coupling.penchant.volia.net)
[12:59:24] *** Quits: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729) (Ping timeout: 240 seconds)
[12:59:48] *** Quits: little_mac (~little_ma@2601:410:4300:3ce0:25e4:decc:c8da:26b5) (Ping timeout: 240 seconds)
[12:59:51] *** Joins: bahamas (~lucian@84.232.140.52)
[12:59:59] *** Joins: dvdrw (~dvdrw@user/dvdrw)
[13:15:24] *** Quits: vglfr (~vglfr@coupling.penchant.volia.net) (Read error: Connection reset by peer)
[13:16:04] *** Joins: vglfr (~vglfr@coupling.penchant.volia.net)
[13:16:35] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (Read error: Connection reset by peer)
[13:16:54] *** Joins: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi)
[13:17:11] *** Joins: alx741 (~alx741@157.100.197.240)
[13:18:15] *** Quits: vglfr (~vglfr@coupling.penchant.volia.net) (Read error: Connection reset by peer)
[13:18:29] *** Joins: vglfr (~vglfr@coupling.penchant.volia.net)
[13:20:30] *** Quits: vglfr (~vglfr@coupling.penchant.volia.net) (Read error: Connection reset by peer)
[13:20:54] *** Joins: vglfr (~vglfr@coupling.penchant.volia.net)
[13:21:03] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[13:21:45] *** Quits: econo (uid147250@user/econo) (Quit: Connection closed for inactivity)
[13:27:43] <Unhammer> is there something special about filter (< someDay) that makes it strict?
[13:28:36] <Unhammer> λ> filter (< 10) $ take 10 (iterate (+1 ) 1)
[13:28:38] <Unhammer> [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ]
[13:28:40] <Unhammer> λ> take 10 $ filter (< 10) (iterate (+1 ) 1)
[13:28:43] <Unhammer> Interrupted.
[13:29:04] <Unhammer> hangs
[13:29:50] *** Joins: Null_A (~null_a@2601:645:8700:2290:a4fb:481a:7fa9:b909)
[13:30:36] *** Quits: bahamas (~lucian@84.232.140.52) (Ping timeout: 240 seconds)
[13:30:41] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[13:30:55] <Unhammer> seeing this in both compiled and ghci, 8.10.7
[13:30:56] <dminuoso> % filter (< 10) $ take 10 (iterate (+1 ) 1)
[13:30:57] <yahb> dminuoso: [1,2,3,4,5,6,7,8,9]
[13:31:01] <dminuoso> Works for me?
[13:31:33] <Ferdirand> you're off by one
[13:31:57] *** Joins: fef (~thedawn@user/thedawn)
[13:32:09] <dminuoso> Ah
[13:32:29] *** Quits: vglfr (~vglfr@coupling.penchant.volia.net) (Read error: Connection reset by peer)
[13:32:57] *** Joins: vglfr (~vglfr@coupling.penchant.volia.net)
[13:34:34] *** Quits: Null_A (~null_a@2601:645:8700:2290:a4fb:481a:7fa9:b909) (Ping timeout: 260 seconds)
[13:34:43] *** Joins: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[13:35:22] *** Quits: vglfr (~vglfr@coupling.penchant.volia.net) (Read error: Connection reset by peer)
[13:36:00] *** Joins: ubert1 (~Thunderbi@2a02:8109:9880:303c:34eb:c52f:ccd4:3473)
[13:36:32] *** Joins: vglfr (~vglfr@coupling.penchant.volia.net)
[13:37:27] *** Joins: alx741 (~alx741@157.100.197.240)
[13:38:20] *** Joins: coot (~coot@213.134.190.95)
[13:41:20] *** Joins: acidjnk_new (~acidjnk@p200300d0c714a49878af4a2b338b7680.dip0.t-ipconnect.de)
[13:42:08] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[13:42:09] *** Quits: vglfr (~vglfr@coupling.penchant.volia.net) (Read error: Connection reset by peer)
[13:42:21] *** Joins: vglfr (~vglfr@coupling.penchant.volia.net)
[13:43:15] *** Quits: chexum (~quassel@gateway/tor-sasl/chexum) (Ping timeout: 240 seconds)
[13:44:04] *** Joins: chexum (~quassel@gateway/tor-sasl/chexum)
[13:44:05] *** Quits: vglfr (~vglfr@coupling.penchant.volia.net) (Read error: Connection reset by peer)
[13:45:02] *** Quits: acidjnk (~acidjnk@dynamic-089-204-137-076.89.204.137.pool.telefonica.de) (Ping timeout: 240 seconds)
[13:45:13] *** Joins: vglfr (~vglfr@coupling.penchant.volia.net)
[13:47:25] *** Quits: vglfr (~vglfr@coupling.penchant.volia.net) (Read error: Connection reset by peer)
[13:47:25] *** Joins: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729)
[13:47:58] *** Quits: vysn (~vysn@user/vysn) (Remote host closed the connection)
[13:48:12] *** Joins: vglfr (~vglfr@coupling.penchant.volia.net)
[13:49:47] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:d024:453c:94af:7479)
[13:50:14] *** Quits: vglfr (~vglfr@coupling.penchant.volia.net) (Read error: Connection reset by peer)
[13:50:26] *** Joins: vglfr (~vglfr@coupling.penchant.volia.net)
[13:50:42] *** Quits: vglfr (~vglfr@coupling.penchant.volia.net) (Read error: Connection reset by peer)
[13:50:51] *** Joins: vglfr (~vglfr@coupling.penchant.volia.net)
[13:51:03] <kuribas> > take 9 $ take 10 $ filter (< 10) (iterate (+1 ) 1)
[13:51:06] <lambdabot>  [1,2,3,4,5,6,7,8,9]
[13:51:15] <kuribas> it's lazy :)
[13:53:20] *** Quits: ProfSimm (~ProfSimm@87.227.196.109) (Remote host closed the connection)
[13:53:31] <kuribas> > take 10 $ filter (< 10) (iterate (+1 ) 1)
[13:53:37] <lambdabot>  mueval-core: Time limit exceeded
[13:53:41] *** Quits: vglfr (~vglfr@coupling.penchant.volia.net) (Read error: Connection reset by peer)
[13:53:53] *** Joins: vglfr (~vglfr@coupling.penchant.volia.net)
[13:53:56] *** Quits: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl) (Ping timeout: 256 seconds)
[13:54:31] <kuribas> but "drop 9 $ filter (< 10) (iterate (+1 ) 1)" is _|_
[13:55:00] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:d024:453c:94af:7479) (Ping timeout: 240 seconds)
[13:55:19] *** Joins: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl)
[13:55:49] *** Joins: ProfSimm (~ProfSimm@87.227.196.109)
[13:55:55] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Ping timeout: 256 seconds)
[13:58:08] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[13:58:08] *** Quits: vglfr (~vglfr@coupling.penchant.volia.net) (Read error: Connection reset by peer)
[13:58:08] *** Quits: komikat (~komikat@183.82.154.239) (Read error: Connection reset by peer)
[13:58:19] *** Joins: komikat (~komikat@183.82.154.239)
[13:58:23] *** Joins: alx741 (~alx741@157.100.197.240)
[13:58:53] *** Joins: vglfr (~vglfr@coupling.penchant.volia.net)
[13:58:56] *** Quits: shailangsa (~shailangs@host86-186-127-164.range86-186.btcentralplus.com) (Remote host closed the connection)
[14:01:02] *** Quits: vglfr (~vglfr@coupling.penchant.volia.net) (Read error: Connection reset by peer)
[14:01:15] *** Joins: vglfr (~vglfr@coupling.penchant.volia.net)
[14:01:39] <tomsmeding> in my ghci it nicely evaluates the first 9 elements for the 'take 10 (filter (<10) [1..])' variant, showing precisely what happens
[14:01:39] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[14:01:39] *** Quits: vglfr (~vglfr@coupling.penchant.volia.net) (Read error: Connection reset by peer)
[14:01:47] *** Joins: vglfr (~vglfr@coupling.penchant.volia.net)
[14:03:48] *** Quits: vglfr (~vglfr@coupling.penchant.volia.net) (Read error: Connection reset by peer)
[14:05:14] *** Joins: vglfr (~vglfr@coupling.penchant.volia.net)
[14:05:24] *** Quits: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729) (Ping timeout: 240 seconds)
[14:05:49] *** Quits: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl) (Ping timeout: 240 seconds)
[14:06:15] *** Joins: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl)
[14:08:42] *** Quits: tzh (~tzh@c-24-21-73-154.hsd1.or.comcast.net) (Quit: zzz)
[14:11:49] *** Quits: ProfSimm (~ProfSimm@87.227.196.109) (Remote host closed the connection)
[14:12:48] *** Joins: Pickchea (~private@user/pickchea)
[14:14:56] *** Joins: deadmarshal (~deadmarsh@95.38.230.132)
[14:14:57] *** Quits: vglfr (~vglfr@coupling.penchant.volia.net) (Read error: Connection reset by peer)
[14:15:57] *** Quits: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl) (Ping timeout: 240 seconds)
[14:16:12] *** Quits: ishutin (~ishutin@92-249-150-129.static.digikabel.hu) (Read error: Connection reset by peer)
[14:16:12] *** Quits: yauhsien (~yauhsien@61-231-19-150.dynamic-ip.hinet.net) (Remote host closed the connection)
[14:16:14] *** Joins: vglfr (~vglfr@coupling.penchant.volia.net)
[14:18:24] *** Joins: alx741 (~alx741@157.100.197.240)
[14:20:21] *** Joins: ishutin (~ishutin@fibhost-66-208-172.fibernet.hu)
[14:21:57] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[14:23:46] *** Quits: drdo (~drdo@roach0.drdo.eu) (Quit: Ping timeout (120 seconds))
[14:24:05] *** Joins: drdo (~drdo@roach0.drdo.eu)
[14:24:18] *** Joins: yauhsien (~Yau-Hsien@61-231-19-150.dynamic-ip.hinet.net)
[14:31:40] *** Quits: glguy (x@libera/staff/glguy) (Read error: Connection reset by peer)
[14:32:02] *** Joins: glguy (x@libera/staff/glguy)
[14:32:17] *** Quits: adanwan (~adanwan@gateway/tor-sasl/adanwan) (Remote host closed the connection)
[14:32:33] *** Quits: coot (~coot@213.134.190.95) (Quit: coot)
[14:32:34] *** Joins: adanwan (~adanwan@gateway/tor-sasl/adanwan)
[14:38:41] *** Quits: vglfr (~vglfr@coupling.penchant.volia.net) (Read error: Connection reset by peer)
[14:39:36] *** Joins: vglfr (~vglfr@coupling.penchant.volia.net)
[14:39:49] *** Parts: jakalx (~jakalx@base.jakalx.net) ()
[14:40:00] *** Joins: alx741 (~alx741@157.100.197.240)
[14:43:15] *** Joins: jakalx (~jakalx@base.jakalx.net)
[14:43:19] *** Quits: zaquest (~notzaques@5.130.79.72) (Quit: Leaving)
[14:44:08] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[14:47:32] *** Joins: fendor_ (~fendor@91.141.59.141.wireless.dyn.drei.com)
[14:47:44] *** Quits: vglfr (~vglfr@coupling.penchant.volia.net) (Read error: Connection reset by peer)
[14:47:56] *** Joins: vglfr (~vglfr@coupling.penchant.volia.net)
[14:49:30] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (Read error: Connection reset by peer)
[14:50:05] *** Joins: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729)
[14:50:40] *** Joins: Vajb (~Vajb@2001:999:600:5133:28cb:83bf:5ecf:4314)
[14:50:42] *** Quits: fendor (~fendor@178.165.167.221.wireless.dyn.drei.com) (Ping timeout: 272 seconds)
[14:56:50] *** Quits: vglfr (~vglfr@coupling.penchant.volia.net) (Read error: Connection reset by peer)
[14:57:29] *** Joins: vglfr (~vglfr@coupling.penchant.volia.net)
[15:00:41] *** Joins: Benzi-Junior (~BenziJuni@dsl-149-64-179.hive.is)
[15:02:33] *** Joins: alx741 (~alx741@157.100.197.240)
[15:04:12] *** Quits: vglfr (~vglfr@coupling.penchant.volia.net) (Read error: Connection reset by peer)
[15:04:24] *** Joins: vglfr (~vglfr@coupling.penchant.volia.net)
[15:05:36] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[15:06:35] *** Joins: __monty__ (~toonn@user/toonn)
[15:07:23] *** Joins: nil (~user@134.209.106.31)
[15:07:24] *** Quits: vglfr (~vglfr@coupling.penchant.volia.net) (Read error: Connection reset by peer)
[15:07:33] *** Joins: vglfr (~vglfr@coupling.penchant.volia.net)
[15:08:17] *** Quits: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729) (Ping timeout: 240 seconds)
[15:08:29] *** Quits: vglfr (~vglfr@coupling.penchant.volia.net) (Read error: Connection reset by peer)
[15:08:38] *** Joins: vglfr (~vglfr@coupling.penchant.volia.net)
[15:08:46] *** Joins: coot (~coot@213.134.190.95)
[15:10:48] *** Quits: komikat (~komikat@183.82.154.239) (Remote host closed the connection)
[15:13:20] *** Quits: juhp (~juhp@128.106.188.82) (Quit: juhp)
[15:13:34] *** Joins: juhp (~juhp@128.106.188.82)
[15:14:27] *** Joins: komikat (~komikat@183.82.154.239)
[15:18:41] *** Quits: juhp (~juhp@128.106.188.82) (Quit: juhp)
[15:18:56] *** Joins: juhp (~juhp@128.106.188.82)
[15:22:22] *** Quits: nil (~user@134.209.106.31) (Ping timeout: 272 seconds)
[15:23:56] *** Joins: alx741 (~alx741@181.199.42.143)
[15:24:02] *** Quits: juhp (~juhp@128.106.188.82) (Quit: juhp)
[15:24:15] *** Joins: juhp (~juhp@128.106.188.82)
[15:25:44] *** Quits: Akiva (~Akiva@user/Akiva) (Ping timeout: 256 seconds)
[15:26:40] *** Quits: yrlnry (~mjd@pool-74-109-20-19.phlapa.fios.verizon.net) (Remote host closed the connection)
[15:27:26] *** Quits: benin (~benin@117.202.69.195) (Ping timeout: 256 seconds)
[15:30:29] *** Joins: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl)
[15:33:02] *** Quits: vglfr (~vglfr@coupling.penchant.volia.net) (Read error: Connection reset by peer)
[15:33:10] *** Quits: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[15:33:21] *** Joins: vglfr (~vglfr@coupling.penchant.volia.net)
[15:36:27] *** Joins: zaquest (~notzaques@5.130.79.72)
[15:41:29] *** Joins: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729)
[15:42:10] *** Quits: vglfr (~vglfr@coupling.penchant.volia.net) (Ping timeout: 256 seconds)
[15:43:26] *** Joins: vglfr (~vglfr@coupling.penchant.volia.net)
[15:43:26] *** Quits: alx741 (~alx741@181.199.42.143) (Read error: Connection reset by peer)
[15:43:50] *** Quits: vglfr (~vglfr@coupling.penchant.volia.net) (Read error: Connection reset by peer)
[15:45:12] *** Joins: vglfr (~vglfr@coupling.penchant.volia.net)
[15:49:42] *** Quits: dvdrw (~dvdrw@user/dvdrw) (Quit: leaving)
[15:49:54] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[15:51:41] *** Quits: vickyHaskell (~textual@49.37.169.2) (Quit: Textual IRC Client: www.textualapp.com)
[15:52:03] <Unhammer> yeah it's only when the filter is on the inside it hangs
[15:52:12] *** Quits: xff0x (~xff0x@2001:1a81:53ab:2800:b38f:e60b:4875:f7ef) (Ping timeout: 240 seconds)
[15:52:24] <Unhammer> filter . take -- fine
[15:52:27] <Unhammer> take . filter -- hangs
[15:52:47] <merijn> Which makes sense
[15:53:45] <Unhammer> I don't understand
[15:54:06] <merijn> Unhammer: take *always* returns a finite list
[15:54:13] <merijn> filter on a finite list always terminates
[15:54:17] <Unhammer> that part i get
[15:54:25] <Unhammer> what I don't get is why it hangs when it's backwards
[15:54:30] <merijn> filter on an infinite list will infinitely keep chasing that list to see if something else matches
[15:54:36] *** Quits: cynomys (~cynomys@user/cynomys) (Ping timeout: 240 seconds)
[15:54:45] <Unhammer> but it can't give the matches to take and then be lazily cut off?
[15:54:49] <merijn> Unhammer: Filter doesn't know your list is monotonically increasing
[15:54:53] <merijn> Unhammer: It does
[15:54:59] <merijn> Unhammer: But take tries to match 1 more
[15:55:10] <merijn> So, filter keeps chasing for the "next" unfiltered element
[15:55:14] <merijn> Which it will never find
[15:55:32] <merijn> Unhammer: Classic case of confusing "filter" with 'takeWhile"
[15:55:48] <Unhammer> oooh 
[15:55:51] <Unhammer> doh
[15:56:32] <Unhammer> thank you for clearing that up, will help me sleep tonight :) 
[15:56:34] <merijn> Like, it's obvious to *us* that in an ever increasing list there will never be another elements (<10), but GHC and filter don't know that
[15:56:37] *** Quits: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729) (Ping timeout: 240 seconds)
[15:56:41] *** Joins: xff0x (~xff0x@2001:1a81:53ab:2800:b38f:e60b:4875:f7ef)
[15:57:09] <merijn> filter can only check every individual element of a list and see if it matches. It's just, you know, taking infinitely long to check all elements of an infinite list :)
[15:57:09] <hpc> if it helps, just think, filter = grep
[15:57:40] <merijn> takeWhile, on the other hand, aborts at the first failure and stops
[15:57:48] <merijn> > takeWhile (<10) [1..]
[15:57:50] <lambdabot>  [1,2,3,4,5,6,7,8,9]
[15:57:58] <merijn> > take 10 [1..]
[15:58:00] <lambdabot>  [1,2,3,4,5,6,7,8,9,10]
[15:58:01] <merijn> as does take
[15:58:10] <Unhammer> $ yes|head|grep no
[15:58:12] <Unhammer> $ yes|grep no|head
[15:58:14] <Unhammer> ^C
[15:58:16] <Unhammer> ok
[15:58:17] <merijn> > filter (<1) [1..]
[15:58:20] <Unhammer> :)
[15:58:20] <hpc> (added bonus, if you're like me and think "filter stuff out", you can keep track of if you need to negate your predicate)
[15:58:23] <lambdabot>  mueval-core: Time limit exceeded
[15:58:29] <merijn> > filter (<2) [1..]
[15:58:35] <lambdabot>  mueval-core: Time limit exceeded
[15:58:37] <merijn> aww
[15:58:40] <merijn> not lazy enough :p
[15:59:04] <hpc> > filter (<3) [1..]
[15:59:10] <lambdabot>  mueval-core: Time limit exceeded
[15:59:17] <merijn> hpc: I don't think I ever used filter without having to check in ghci using "filter even [1..10]" to remember how it works :p
[15:59:31] <hpc> hmm, i guess it's only exceptions that give partial output
[15:59:43] <hpc> merijn: now you can uses the grep trick too then :D
[16:00:07] *** Joins: alx741 (~alx741@181.199.42.143)
[16:00:12] <hpc> fun fact: in perl filter is a keyword and it's actually called grep
[16:01:24] <tomsmeding> doesn't lambdabot give partial output only when its output buffer is filled before the time limit?
[16:01:24] *** Quits: vglfr (~vglfr@coupling.penchant.volia.net) (Read error: Connection reset by peer)
[16:01:31] *** Joins: vglfr (~vglfr@coupling.penchant.volia.net)
[16:01:31] *** Quits: jespada (~jespada@85.255.234.190) (Read error: Connection reset by peer)
[16:02:10] *** Joins: ph88 (~ph88@ip5f5af71f.dynamic.kabel-deutschland.de)
[16:02:22] *** Quits: komikat (~komikat@183.82.154.239) (Remote host closed the connection)
[16:02:53] <tomsmeding> let f n | n < 2 = 1 | True = f (n-1) + f (n`div`2) in map f [1..]
[16:02:53] *** Joins: yauhsien_ (~yauhsien@61-231-19-150.dynamic-ip.hinet.net)
[16:02:55] <tomsmeding> > let f n | n < 2 = 1 | True = f (n-1) + f (n`div`2) in map f [1..]
[16:03:01] <lambdabot>  mueval-core: Time limit exceeded
[16:03:05] <tomsmeding> > [1..]
[16:03:06] <lambdabot>  [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,...
[16:03:46] <hpc> > [1, 2, error "also this"]
[16:03:46] <tomsmeding> hm, apparently not, that prefix of the f thing should finish _very_ quickly
[16:03:47] <lambdabot>  [1,2,*Exception: also this
[16:04:10] <tomsmeding> > take 30 $ let f n | n < 2 = 1 | True = f (n-1) + f (n`div`2) in map f [1..]
[16:04:11] <lambdabot>  [1,2,3,5,7,10,13,18,23,30,37,47,57,70,83,101,119,142,165,195,225,262,299,346...
[16:04:14] <tomsmeding> longer prefix
[16:04:22] *** Quits: juhp (~juhp@128.106.188.82) (Quit: juhp)
[16:04:35] *** Joins: juhp (~juhp@128.106.188.82)
[16:05:15] *** Joins: komikat (~komikat@183.82.154.239)
[16:08:38] *** Quits: alx741 (~alx741@181.199.42.143) (Read error: Connection reset by peer)
[16:10:37] *** Quits: vglfr (~vglfr@coupling.penchant.volia.net) (Read error: Connection reset by peer)
[16:11:35] *** Joins: vglfr (~vglfr@coupling.penchant.volia.net)
[16:13:48] *** Quits: adanwan (~adanwan@gateway/tor-sasl/adanwan) (Remote host closed the connection)
[16:14:02] *** Parts: juhp (~juhp@128.106.188.82) (Good Bye)
[16:14:03] *** Joins: adanwan (~adanwan@gateway/tor-sasl/adanwan)
[16:15:47] *** Joins: acidjnk (~acidjnk@p200300d0c718c027c4e2756bf84aaa21.dip0.t-ipconnect.de)
[16:16:30] *** Quits: acidjnk_new (~acidjnk@p200300d0c714a49878af4a2b338b7680.dip0.t-ipconnect.de) (Ping timeout: 260 seconds)
[16:16:51] *** Quits: vglfr (~vglfr@coupling.penchant.volia.net) (Read error: Connection reset by peer)
[16:17:43] *** Joins: vglfr (~vglfr@coupling.penchant.volia.net)
[16:19:06] *** Joins: burnsidesLlama (~burnsides@dhcp168-011.wadham.ox.ac.uk)
[16:19:32] *** Quits: zeenk (~zeenk@2a02:2f04:a30d:1300:51a3:bcfc:6cda:9fc5) (Quit: Konversation terminated!)
[16:20:25] *** Quits: burnsidesLlama (~burnsides@dhcp168-011.wadham.ox.ac.uk) (Remote host closed the connection)
[16:20:51] *** Joins: burnsidesLlama (~burnsides@dhcp168-011.wadham.ox.ac.uk)
[16:23:22] *** Quits: bliminse (~bliminse@host109-152-150-162.range109-152.btcentralplus.com) (Quit: leaving)
[16:25:21] *** Quits: burnsidesLlama (~burnsides@dhcp168-011.wadham.ox.ac.uk) (Ping timeout: 245 seconds)
[16:25:23] *** Joins: alx741 (~alx741@157.100.197.240)
[16:27:15] *** Quits: alMalsamo (~alMalsamo@gateway/tor-sasl/almalsamo) (Ping timeout: 240 seconds)
[16:27:36] *** Quits: vglfr (~vglfr@coupling.penchant.volia.net) (Ping timeout: 272 seconds)
[16:31:57] *** Quits: komikat (~komikat@183.82.154.239) (Remote host closed the connection)
[16:32:27] *** Joins: alMalsamo (~alMalsamo@gateway/tor-sasl/almalsamo)
[16:32:53] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[16:34:41] *** Joins: bliminse (~bliminse@host109-152-150-162.range109-152.btcentralplus.com)
[16:36:02] *** Joins: komikat (~komikat@183.82.154.239)
[16:37:59] *** Quits: komikat (~komikat@183.82.154.239) (Remote host closed the connection)
[16:45:34] <dminuoso> Is there some convenience thing that lets me generate all possible unary constructors for a data type?
[16:46:08] <dminuoso> Originally I thought Enum was that, but that lacks Bounded as a superclass
[16:46:55] *** Joins: Null_A (~null_a@2601:645:8700:2290:a4fb:481a:7fa9:b909)
[16:48:55] <dminuoso> The least painful way seems to cook up something with Data like `gen :: Data a => [a]`
[16:49:13] <dminuoso> Sorry. I meant *nullary* constructors of course.
[16:49:26] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Remote host closed the connection)
[16:49:34] *** Joins: vglfr (~vglfr@coupling.penchant.volia.net)
[16:49:39] <tomsmeding> are there also non-nullary constructors that you want to skip?
[16:50:09] <dminuoso> No, or rather I dont care either way
[16:50:26] *** Joins: komikat (~komikat@183.82.154.239)
[16:50:32] *** Joins: shapr (~user@pool-173-73-44-186.washdc.fios.verizon.net)
[16:50:34] <tomsmeding> type Enum' a = (Enum a, Bounded a)
[16:50:40] <tomsmeding> does that help? :p
[16:50:51] <dminuoso> tomsmeding: Is Bounded deriveable?
[16:50:57] <dminuoso> % data Foo = Foo | Bar deriving Bounded
[16:50:58] <yahb> dminuoso: 
[16:51:00] <dminuoso> Oh wow.
[16:51:02] <dminuoso> I did not expect that
[16:51:06] *** Joins: alx741 (~alx741@157.100.197.240)
[16:51:13] <dminuoso> % minBound :: Foo
[16:51:13] <yahb> dminuoso: ; <interactive>:19:1: error:; * No instance for (Show Foo) arising from a use of `print'; * In a stmt of an interactive GHCi command: print it
[16:51:18] <dminuoso> % data Foo = Foo | Bar deriving (Bounded, Show)
[16:51:19] <yahb> dminuoso: 
[16:51:19] <tomsmeding> heh
[16:51:24] <dminuoso> % minBound :: Foo
[16:51:24] <yahb> dminuoso: Foo
[16:51:28] <dminuoso> % maxBound :: Foo
[16:51:28] <yahb> dminuoso: Bar
[16:51:32] <dminuoso> tomsmeding: Alright, yes. That will work!
[16:51:35] <tomsmeding> :D
[16:52:39] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:d024:453c:94af:7479)
[16:52:53] *** Joins: burnsidesLlama (~burnsides@dhcp168-011.wadham.ox.ac.uk)
[16:53:50] *** Quits: acidjnk (~acidjnk@p200300d0c718c027c4e2756bf84aaa21.dip0.t-ipconnect.de) (Ping timeout: 260 seconds)
[16:55:29] <tomsmeding> :t [minBound..maxBound]
[16:55:29] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[16:55:30] <lambdabot> (Bounded a, Enum a) => [a]
[16:56:12] *** Joins: geekosaur (~geekosaur@xmonad/geekosaur)
[16:56:12] *** Joins: dimsuz (~dimsuz@185.17.131.184)
[16:56:22] <dminuoso> tomsmeding: I did not even conceive to try whether Bounded was deriveable until you mentioned it
[16:56:27] <dminuoso> :)
[16:56:42] *** Quits: ccntrq (~Thunderbi@2a01:e34:eccb:b060:ea23:2b79:a0de:4996) (Remote host closed the connection)
[16:57:02] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:d024:453c:94af:7479) (Ping timeout: 240 seconds)
[16:57:23] <tomsmeding> I guess it kind of makes sense given that Enum is derivable, and deriving Enum basically requires having at least a lower bound
[16:57:46] <dimsuz> Hi! If I have a list of Maybes and from each of them I want to perform an IO action in a do block if it's a Just, how to proceed? I want something like "whenMaybe val $ do ..."
[16:58:37] <dimsuz> I could write "case", but its Nothing block would always be "return ()"
[16:58:46] <dminuoso> tomsmeding: Honestly, Enum very deeply flawed though.
[16:59:08] <dminuoso> `toEnum :: Int -> a`
[16:59:11] <dminuoso> That thing shouldn't exist
[16:59:42] *** Joins: ccntrq (~Thunderbi@2a01:e34:eccb:b060:801:2c01:d0ac:b063)
[16:59:46] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Quit: = "")
[17:00:25] <dminuoso> And Im also not entirely happy about `fromEnum :: a -> Int` either
[17:00:48] <dminuoso> They are very awkward and are sometimes abused for typical enum/integer mappings in protocol settings
[17:01:21] <lortabac> dimsuz: you can use 'for_'
[17:01:49] <tomsmeding> dminuoso: not vouching for quality of the design of Enum :p
[17:01:58] *** Joins: zeenk (~zeenk@2a02:2f04:a30d:1300:51a3:bcfc:6cda:9fc5)
[17:02:05] *** Joins: jippiedoe (~david@2a02-a44c-e14e-1-e90c-8e2f-189d-dd38.fixed6.kpn.net)
[17:02:14] *** Quits: Null_A (~null_a@2601:645:8700:2290:a4fb:481a:7fa9:b909) (Ping timeout: 260 seconds)
[17:02:41] <merijn> dimsuz: See also "maybe (return ()) f"
[17:02:53] <merijn> although for_/forM_ may look cleaner
[17:03:09] <lortabac> dimsuz: or alternatively you can use 'catMaybes' on the list and 'sequenceA' to perform the actions
[17:03:44] <dminuoso> Also, `wither` is a very functional thing
[17:03:58] <dminuoso> % wither f t = catMaybes <$> traverse f t
[17:03:58] <yahb> dminuoso: 
[17:04:02] <dminuoso> % :t wither
[17:04:02] <yahb> dminuoso: Applicative f => (a1 -> f (Maybe a2)) -> [a1] -> f [a2]
[17:04:04] <merijn> dimsuz: How did you get the list of maybes?
[17:04:09] <dminuoso> Is something I very frequently define in my projects. :)
[17:04:23] <merijn> 'cause maybe you just want mapMaybe instead
[17:04:25] <merijn> :t mapMaybe
[17:04:27] <lambdabot> (a -> Maybe b) -> [a] -> [b]
[17:04:43] <lortabac> merijn: +1
[17:05:03] <dimsuz> merijn, lortabac I wrongly said "I have a list of Maybe's". I meant I have four distinct maybe's on which I need to act separately :)  So  I guess it's either mapMaybe or maybe
[17:05:38] <dimsuz> Initially I hoped to do with a list of Maybe's, but that's not going to work and it's another question, I guess I'll ask it separately (one moment)
[17:05:56] <dminuoso> dimsuz: Also, do-notation with Maybe can be very elegant.
[17:06:22] <dminuoso> Just throwing in additional bits that might help *shrugs*
[17:06:44] <lortabac> dimsuz: if you have a single value of type Maybe, you can use either 'for_' or 'maybe (pure ())'
[17:12:15] *** Joins: alx741 (~alx741@157.100.197.240)
[17:12:59] *** Joins: acidjnk (~acidjnk@dynamic-089-204-137-076.89.204.137.pool.telefonica.de)
[17:13:08] <dimsuz> I was trying to build an Sqlite.Simple update query where a set of update parameters comes from user. He can decide to update 1 up to 4 params. I wanted to create a named query
[17:13:08] <dimsuz> let params = ["param1 = :param1", "param2 = :param2", ...]
[17:13:09] <dimsuz>      args = [":param1" := param1, ":param2" := param2, ...]
[17:13:09] <dimsuz> in (executeNamed ("UPDATE table SET " <> params) args)
[17:13:10] <dimsuz> where params and args are build from list of Maybe's coming from user input but Sqlite.Simple doesn't allow me to build Query from non-literal strings (understandably though).
[17:13:10] <dimsuz> I have resorted to doing 1-4 separate updates instead of dynamically building from list. Is it OK?
[17:13:29] <dimsuz> sorry for multiline. I have just recalled I should've used hpaste :(
[17:15:48] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[17:15:59] <geekosaur> hpaste is gone, sadly
[17:16:07] <geekosaur> @where paste
[17:16:07] <lambdabot> Help us help you: please paste full code, input and/or output at e.g. https://paste.tomsmeding.com
[17:17:41] <dimsuz> thanks! will use it next time! also I have realzed this may be offtopic, as it's some DB-library specific question
[17:17:42] *** Quits: burnsidesLlama (~burnsides@dhcp168-011.wadham.ox.ac.uk) (Remote host closed the connection)
[17:17:58] *** Joins: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729)
[17:19:19] <geekosaur> it's still a Haskell question. and I am not sure your list idea would even work since a list hasto have items allof the same type
[17:19:36] <geekosaur> you can't stuff aMaybe Int and a Maybe Text into the same list
[17:21:26] <dimsuz> I was converting them to Sqlite.Simple's NamedParam types so it worked type-wise right up until I stubled on this "newtype Query = Text" which only has IsString and is not possible to build other than from literal strings (for protection from injection)
[17:21:39] *** Joins: acidjnk_new (~acidjnk@dynamic-089-204-137-076.89.204.137.pool.telefonica.de)
[17:22:00] *** Joins: Ash[m] (~signal-wa@2001:470:69fc:105::1:2318)
[17:22:08] <tomsmeding> (you can use Data.String.fromString, but that's explicitly working around the protection, so think hard before you do that)
[17:22:43] *** Quits: max22- (~maxime@lfbn-ren-1-1026-62.w92-139.abo.wanadoo.fr) (Ping timeout: 250 seconds)
[17:23:45] <tomsmeding> dimsuz: how are you doing the separate updates? If the column name is coming from user input, how does that even work in the first place?
[17:23:47] <dimsuz> Oh, nice. thanks! Yes, I understand this is risky. And 4 distinct updates instead of 1 do not sound bad actually, it's just that they are a bit uglier in code. But I doubt I'll ever have more
[17:24:17] *** Quits: acidjnk (~acidjnk@dynamic-089-204-137-076.89.204.137.pool.telefonica.de) (Ping timeout: 240 seconds)
[17:24:58] <dimsuz> tomsmeding users sends in a PUT containing json with either full set of fields to update or some of them. From this json I derive a list of table columns to update
[17:31:07] *** Quits: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net) (Quit: WeeChat 3.3)
[17:32:17] *** Joins: alx741 (~alx741@181.199.42.143)
[17:32:26] <tomsmeding> dimsuz: I guess my question is, how are you getting a user-specified column name into the query in the first place. If you can do that, why can't you do four of them?
[17:34:33] *** Joins: jespada (~jespada@85.255.234.190)
[17:34:57] *** Quits: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729) (Ping timeout: 240 seconds)
[17:36:07] *** Quits: alx741 (~alx741@181.199.42.143) (Read error: Connection reset by peer)
[17:36:07] *** Quits: vglfr (~vglfr@coupling.penchant.volia.net) (Read error: Connection reset by peer)
[17:36:46] *** Joins: alx741 (~alx741@181.199.42.143)
[17:36:56] *** Joins: vglfr (~vglfr@coupling.penchant.volia.net)
[17:38:41] *** Joins: bontaq (~user@ool-45779fe5.dyn.optonline.net)
[17:38:41] *** Quits: vglfr (~vglfr@coupling.penchant.volia.net) (Read error: Connection reset by peer)
[17:39:49] *** Joins: vglfr (~vglfr@coupling.penchant.volia.net)
[17:40:18] *** Quits: alx741 (~alx741@181.199.42.143) (Read error: Connection reset by peer)
[17:40:29] *** Joins: CiaoSen (~Jura@p200300c95737a2002a3a4dfffe84dbd5.dip0.t-ipconnect.de)
[17:41:41] *** Quits: komikat (~komikat@183.82.154.239) (Remote host closed the connection)
[17:43:59] *** Joins: komikat (~komikat@183.82.154.239)
[17:44:43] *** Quits: jippiedoe (~david@2a02-a44c-e14e-1-e90c-8e2f-189d-dd38.fixed6.kpn.net) (Quit: Leaving)
[17:45:40] *** Joins: lavaman (~lavaman@98.38.249.169)
[17:46:02] *** Joins: max22- (~maxime@2a01cb08833598005699785cb4ec772c.ipv6.abo.wanadoo.fr)
[17:47:02] *** Quits: vglfr (~vglfr@coupling.penchant.volia.net) (Read error: Connection reset by peer)
[17:47:26] *** Joins: vglfr (~vglfr@coupling.penchant.volia.net)
[17:47:35] <dimsuz> tomsmeding it's not strictly user defined, it's mapped into my record type by aeson. All json fields are Maybe's. User can fill either all or some. Then I thought I could pair up each of record fields with it's db column name, put them in a list and construct an update query using catMaybe's. But restriction on having literal string queries
[17:47:36] <dimsuz> prevents this. So I'm currently going with 4 distinct `for_`'s as suggested above. Would be troublesome if I had 100 of those, but nowhere near this :)
[17:48:11] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[17:48:11] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[17:48:11] *** Joins: wroathe (~wroathe@user/wroathe)
[17:48:12] *** Joins: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729)
[17:49:01] *** Joins: jkaye (~jkaye@2601:281:8300:7530:1f3b:3a8f:f843:9a79)
[17:49:16] *** Joins: burnsidesLlama (~burnsides@dhcp168-011.wadham.ox.ac.uk)
[17:50:07] *** Joins: jao (~jao@static-68-235-44-77.cust.tzulo.com)
[17:51:27] *** Quits: cosimone (~user@93-34-132-33.ip49.fastwebnet.it) (Remote host closed the connection)
[17:52:03] *** Quits: komikat (~komikat@183.82.154.239) (Remote host closed the connection)
[17:52:17] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[17:56:19] *** Quits: yauhsien_ (~yauhsien@61-231-19-150.dynamic-ip.hinet.net) (Remote host closed the connection)
[17:57:05] *** Joins: yauhsien_ (~yauhsien@61-231-19-150.dynamic-ip.hinet.net)
[17:57:05] *** Joins: alx741 (~alx741@181.199.42.143)
[17:57:29] *** Joins: zer0bitz (~zer0bitz@2001:2003:f74d:b800:b4a7:dec3:a543:4b87)
[18:00:04] *** Quits: burnsidesLlama (~burnsides@dhcp168-011.wadham.ox.ac.uk) (Ping timeout: 272 seconds)
[18:00:05] *** Quits: Vajb (~Vajb@2001:999:600:5133:28cb:83bf:5ecf:4314) (Read error: Connection reset by peer)
[18:00:34] *** Quits: alx741 (~alx741@181.199.42.143) (Read error: Connection reset by peer)
[18:01:08] *** Joins: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi)
[18:01:48] *** Quits: yauhsien_ (~yauhsien@61-231-19-150.dynamic-ip.hinet.net) (Ping timeout: 240 seconds)
[18:02:23] *** Joins: mvk (~mvk@2607:fea8:5cdc:bf00::99e7)
[18:02:43] *** Quits: alMalsamo (~alMalsamo@gateway/tor-sasl/almalsamo) (Remote host closed the connection)
[18:02:59] *** Joins: alMalsamo (~alMalsamo@gateway/tor-sasl/almalsamo)
[18:04:11] *** Joins: komikat (~komikat@183.82.154.239)
[18:04:11] *** Joins: shriekingnoise (~shrieking@201.231.16.156)
[18:05:50] *** Joins: yauhsien_ (~yauhsien@61-231-19-150.dynamic-ip.hinet.net)
[18:06:44] *** Quits: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729) (Ping timeout: 250 seconds)
[18:06:55] *** Joins: doyougnu (~doyougnu@cpe-67-249-83-190.twcny.res.rr.com)
[18:08:41] *** Joins: dalek_caan (~Thunderbi@109.252.124.86)
[18:13:23] *** Joins: Sgeo (~Sgeo@user/sgeo)
[18:16:57] *** Quits: yauhsien_ (~yauhsien@61-231-19-150.dynamic-ip.hinet.net) (Remote host closed the connection)
[18:17:20] *** Joins: alx741 (~alx741@181.199.42.143)
[18:17:50] *** Joins: yauhsien_ (~yauhsien@61-231-19-150.dynamic-ip.hinet.net)
[18:18:51] *** Quits: dimsuz (~dimsuz@185.17.131.184) (Ping timeout: 256 seconds)
[18:18:52] *** Quits: jespada (~jespada@85.255.234.190) (Read error: Connection reset by peer)
[18:19:08] *** Quits: yauhsien (~Yau-Hsien@61-231-19-150.dynamic-ip.hinet.net) (Quit: Leaving)
[18:19:16] *** Joins: burnsidesLlama (~burnsides@dhcp168-011.wadham.ox.ac.uk)
[18:20:32] *** Quits: alx741 (~alx741@181.199.42.143) (Read error: Connection reset by peer)
[18:24:16] *** Joins: bahamas (~lucian@84.232.140.52)
[18:26:13] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[18:27:00] *** Quits: xff0x (~xff0x@2001:1a81:53ab:2800:b38f:e60b:4875:f7ef) (Ping timeout: 240 seconds)
[18:28:20] *** Joins: vysn (~vysn@user/vysn)
[18:28:59] *** Joins: xff0x (~xff0x@2001:1a81:53c8:8500:d186:ea73:d14c:679b)
[18:29:27] *** Quits: acidjnk_new (~acidjnk@dynamic-089-204-137-076.89.204.137.pool.telefonica.de) (Read error: Connection reset by peer)
[18:30:27] *** Joins: acidjnk (~acidjnk@dynamic-089-204-137-076.89.204.137.pool.telefonica.de)
[18:30:31] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[18:32:04] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[18:32:05] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[18:32:05] *** Joins: wroathe (~wroathe@user/wroathe)
[18:35:35] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 240 seconds)
[18:35:41] *** Joins: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729)
[18:37:35] *** Joins: alx741 (~alx741@157.100.197.240)
[18:37:35] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[18:39:21] *** Quits: Pickchea (~private@user/pickchea) (Ping timeout: 272 seconds)
[18:40:06] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[18:40:17] *** Quits: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729) (Ping timeout: 240 seconds)
[18:40:44] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[18:41:48] *** Quits: Megant (megant@user/megant) (Ping timeout: 256 seconds)
[18:42:30] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 272 seconds)
[18:42:44] *** Quits: AlexNoo (~AlexNoo@178.34.160.252) (Quit: Leaving)
[18:43:27] *** Joins: Megant (megant@user/megant)
[18:44:07] *** Quits: AlexZenon (~alzenon@178.34.160.252) (Quit: ;-)
[18:44:27] *** Quits: Alex_test (~al_test@178.34.160.252) (Quit: ;-)
[18:50:52] *** Quits: acidjnk (~acidjnk@dynamic-089-204-137-076.89.204.137.pool.telefonica.de) (Ping timeout: 256 seconds)
[18:50:54] *** Joins: mikoto-chan (~mikoto-ch@213.177.151.239)
[18:51:22] *** Quits: lortabac (~lortabac@2a01:e0a:541:b8f0:65ac:9e8f:4b5e:2c6b) (Quit: WeeChat 2.8)
[18:53:33] *** Joins: kadobanana (~mud@user/kadoban)
[18:53:59] *** Quits: mud (~mud@user/kadoban) (Ping timeout: 256 seconds)
[18:54:21] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:d024:453c:94af:7479)
[18:55:32] *** Joins: arjun` (~user@103.57.87.142)
[18:55:40] <arjun`> hi
[18:55:55] <geekosaur> hi
[18:55:57] <arjun`> is there a way to see what AST haskell generates for a file ?
[18:56:06] *** Quits: komikat (~komikat@183.82.154.239) (Remote host closed the connection)
[18:56:13] <arjun`> geekosaur \o
[18:56:33] <arjun`> how've ya been
[18:56:55] <Franciman> arjun`: i think you can use ghc as a library https://wiki.haskell.org/GHC/As_a_library
[18:57:08] <Franciman> not sure if this is what you are looking for, though
[18:57:29] <geekosaur> you generally can't see the AST itself directly, but -ddump-ds shows what it transforms your program into before applying optimizations and such
[18:57:43] <geekosaur> ("ghc core")
[18:58:01] <arjun`> i've been reading up on template haskell lately, and am curious
[18:58:36] <arjun`> as to how does the entire process of it happens, start to end, what compiles where and what do we end up with
[18:58:36] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:d024:453c:94af:7479) (Ping timeout: 240 seconds)
[18:59:12] *** Joins: alx741 (~alx741@181.199.42.143)
[18:59:40] <arjun`> the haskell AST isn't the same as the one we get with `runQ` is it? InfixE (LitE (Just (IntegerE 1))) or something like that
[18:59:55] <geekosaur> ah. this has a complication: the AST TH works with isn't actually the AST GHC works with internally
[19:00:13] <geekosaur> but I don't know the details there
[19:01:16] <arjun`> when ghc parses stuff, and comes across template haskell, it has to then parse that AST and add it to the FILE's AST so that it can treat it as regular code of a function or a type declaration right
[19:02:10] <arjun`> then there's this curious flag -fexternal-interpreter
[19:03:22] <geekosaur> what's curious about it?
[19:03:23] *** Quits: alx741 (~alx741@181.199.42.143) (Read error: Connection reset by peer)
[19:05:35] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 240 seconds)
[19:06:50] <merijn> arjun`: -fexternal-interpreter is related to cross-compilation
[19:06:58] <merijn> arjun`: Because TH has some nasty edges
[19:07:32] <merijn> arjun`: Like "what if TH generates code based on the size of an Int, but the GHC on *this* CPU has size 8, while the GHC on the cross-compilation target uses size 4?"
[19:08:12] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[19:08:17] *** Quits: vysn (~vysn@user/vysn) (Remote host closed the connection)
[19:08:38] *** Joins: komikat (~komikat@183.82.154.239)
[19:09:28] *** Joins: bjourne (~bjourne@2001:6b0:1:1140:42bf:ff4:f8fa:50e5)
[19:09:49] <arjun`> merijn: i see
[19:09:51] <merijn> arjun`: There is actually a definition of what (conceptually!) is evaluated when. Specifically, TH can see/refer to all code *above* it, but not below it. So if you have a file consisting of 5 code segments "1 A 2 B 3" where A and B are TH splice, the *generated* A code can refer to 1, but not 2, B, or 3.
[19:10:32] *** Joins: vysn (~vysn@user/vysn)
[19:10:38] <arjun`> sure, those are the declarations groups
[19:10:50] <arjun`> if i understood correctly
[19:11:27] <arjun`> but i was curious, why does TH need  separate GHC process to run itself, if it was just an AST insertion
[19:11:35] *** Quits: alMalsamo (~alMalsamo@gateway/tor-sasl/almalsamo) (Ping timeout: 240 seconds)
[19:11:37] <arjun`> i think i had the wrong idea
[19:11:50] <geekosaur> as merijn said, -fexternal-interpreter is for cross compilation
[19:11:55] <geekosaur> normally you wouldn't use it
[19:12:13] <geekosaur> but if you're cross-compiling, the TH needs to run on the target
[19:12:16] *** Quits: mikoto-chan (~mikoto-ch@213.177.151.239) (Ping timeout: 272 seconds)
[19:12:33] <arjun`> i've been interested in the "lets create a js backend for GHC issue"
[19:12:50] <geekosaur> it's also sometimes useful on limited memory machines like arduinos
[19:13:13] <arjun`> and the author asked me to look into TH and GHC and ghcjs
[19:13:46] <arjun`> and i think node is used with -fexternal-interpreter there ?
[19:14:02] <geekosaur> I couldn't tell you about ghcjs
[19:14:36] *** Joins: alMalsamo (~alMalsamo@gateway/tor-sasl/almalsamo)
[19:14:37] <arjun`> nah, that's fine, i was wondering how it worked in GHC first
[19:15:02] <arjun`> seems TH isn't a ast to ast splice and TH code must be compiled separately?
[19:15:48] *** Quits: abhixec (~abhinav@c-67-169-139-16.hsd1.ca.comcast.net) (Ping timeout: 256 seconds)
[19:16:30] <geekosaur> well, TH is code that generates an AST, not simply an AST
[19:16:47] *** Quits: komikat (~komikat@183.82.154.239) (Remote host closed the connection)
[19:17:05] <geekosaur> which is where most of its power lies
[19:17:21] <arjun`> so, it must first run somewhere right?
[19:17:23] *** Parts: dalek_caan (~Thunderbi@109.252.124.86) ()
[19:17:27] *** Joins: komikat (~komikat@183.82.154.239)
[19:18:04] <arjun`> and to run it must be interpreted or compiled if i have the right idea? 
[19:19:01] <geekosaur> yes. so typically it is compiled by the bytecode compiler (think ghci) and immediately interpreted. with -fexternal-interpreter the compilation is done locally but the interpretation is done by an external process which may be running on a different machine, as with cross-compilation
[19:19:31] *** Joins: ShalokShalom (~ShalokSha@2a02:1748:dd5e:7f60:c55f:bc58:d177:838)
[19:19:35] <ShalokShalom> Hi there
[19:19:47] *** Quits: yauhsien_ (~yauhsien@61-231-19-150.dynamic-ip.hinet.net) (Remote host closed the connection)
[19:20:16] <arjun`> geekosaur: that makes so much sense to me rn
[19:20:19] <ShalokShalom> I try to build stack on my phone, in Termux and I always get a straight 'Bus error' out of a 'stack setup'
[19:20:19] <geekosaur> and it's intepreted because it's simpler and it's assumed that the overhead of compilation to object code would be more expensive than interpreting it (this tends to be false with some of the fancier uses of TH these days)
[19:20:36] *** Joins: alx741 (~alx741@181.199.42.143)
[19:20:44] <ShalokShalom> Hi all
[19:20:53] <arjun`> hi !
[19:21:50] <ShalokShalom> Also running just 'stack' gives me Bus error
[19:21:53] <geekosaur> I am noyt sure how well stack or indeed any haskell program would work with termux; it plays too many games to pretend android is a full OS
[19:22:42] <ShalokShalom> Doesnt nessecerily pile up to be a helpful error message.
[19:22:52] <ShalokShalom> Yeah, probably
[19:23:02] <ShalokShalom> I just want to compile one package with it
[19:23:14] <ShalokShalom> Its prebuild binaries are sadly not for arm64
[19:24:35] <geekosaur> haskell does not produce that error message; the shell does
[19:25:17] <geekosaur> it indicates that stack crashed on an OS signal
[19:25:18] *** Quits: alx741 (~alx741@181.199.42.143) (Read error: Connection reset by peer)
[19:25:30] *** Joins: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net)
[19:25:35] <arjun`> geekosaur: so now hypothetically suppose if, we have a working JS backend for GHC, in theory, TH code would be compiled to JS (instead of bytecode)? and then run on node (instead of the ghc interpreter)? and then the result then somehow used in the (still on going) compilation process?
[19:25:55] <ShalokShalom> Ah, it seems there is something
[19:25:57] <ShalokShalom> https://www.reddit.com/r/haskell/comments/55p0jb/stackghc_on_termux/
[19:26:09] *** Joins: Pickchea (~private@user/pickchea)
[19:26:09] <geekosaur> arjun`, I believe that's what ghcjs does now, yes
[19:27:32] *** Joins: yauhsien (~yauhsien@61-231-19-150.dynamic-ip.hinet.net)
[19:28:25] <arjun`> thanks a ton for helping me wrap my head around this geekosaur
[19:29:58] <geekosaur> I wouldn't be too surprised if stack runs out of memory trying to download the list of resolvers. For that matter I'm amazed ghc didn't run out of memory
[19:32:01] *** Quits: yauhsien (~yauhsien@61-231-19-150.dynamic-ip.hinet.net) (Ping timeout: 245 seconds)
[19:33:39] *** Quits: ShalokShalom (~ShalokSha@2a02:1748:dd5e:7f60:c55f:bc58:d177:838) (Ping timeout: 256 seconds)
[19:35:04] *** Quits: cfricke (~cfricke@user/cfricke) (Ping timeout: 256 seconds)
[19:40:23] *** Quits: mbuf (~Shakthi@122.178.120.57) (Quit: Leaving)
[19:41:59] *** Joins: alx741 (~alx741@157.100.197.240)
[19:42:43] <bjourne> has anyone of you heard the term "skeleton programming" when referring to parallel execution of higher order functions?
[19:45:04] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[19:45:11] *** Joins: Null_A (~null_a@2601:645:8700:2290:a4fb:481a:7fa9:b909)
[19:46:41] *** Joins: zebrag (~chris@user/zebrag)
[19:47:43] *** Joins: little_mac (~little_ma@2601:410:4300:3ce0:25e4:decc:c8da:26b5)
[19:47:55] *** Joins: jespada (~jespada@85.255.234.190)
[19:55:23] *** Quits: Pickchea (~private@user/pickchea) (Ping timeout: 252 seconds)
[19:55:55] *** Joins: mikoto-chan (~mikoto-ch@213.177.151.239)
[19:56:01] *** Quits: komikat (~komikat@183.82.154.239) (Remote host closed the connection)
[20:01:19] *** Quits: mikoto-chan (~mikoto-ch@213.177.151.239) (Ping timeout: 250 seconds)
[20:01:19] *** Quits: Null_A (~null_a@2601:645:8700:2290:a4fb:481a:7fa9:b909) (Ping timeout: 250 seconds)
[20:01:58] *** Joins: xkuru (~xkuru@user/xkuru)
[20:02:01] *** Joins: alx741 (~alx741@181.199.42.143)
[20:05:50] *** Quits: alx741 (~alx741@181.199.42.143) (Read error: Connection reset by peer)
[20:06:06] *** Quits: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl) (Ping timeout: 272 seconds)
[20:06:30] *** Joins: alx741 (~alx741@181.199.42.143)
[20:08:41] *** Quits: vysn (~vysn@user/vysn) (Ping timeout: 250 seconds)
[20:10:52] *** Joins: vickyHaskell (~textual@49.37.169.2)
[20:13:04] *** Joins: arjun (~arjun@user/arjun)
[20:13:25] *** Parts: arjun` (~user@103.57.87.142) (ERC 5.4.1 (IRC client for GNU Emacs 29.0.50))
[20:15:14] *** Quits: alx741 (~alx741@181.199.42.143) (Read error: Connection reset by peer)
[20:16:35] *** Joins: Unicorn_Princess (~Unicorn_P@93-103-228-248.dynamic.t-2.net)
[20:20:45] *** Joins: komikat (~komikat@183.82.154.239)
[20:21:31] *** Joins: phma_ (phma@2001:5b0:2172:8c78:5f9d:f266:1ca1:f0c)
[20:21:32] *** Quits: alp (~alp@user/alp) (Ping timeout: 240 seconds)
[20:22:07] *** Joins: analognoise (~analognoi@ip98-176-154-48.sd.sd.cox.net)
[20:24:19] *** Joins: analognoise1 (~analognoi@192.145.80.4)
[20:24:37] *** Quits: phma (~phma@host-67-44-208-227.hnremote.net) (Ping timeout: 240 seconds)
[20:24:56] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Remote host closed the connection)
[20:25:15] *** Joins: geekosaur (~geekosaur@xmonad/geekosaur)
[20:27:14] *** Quits: vickyHaskell (~textual@49.37.169.2) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[20:27:37] *** Quits: analognoise (~analognoi@ip98-176-154-48.sd.sd.cox.net) (Ping timeout: 240 seconds)
[20:29:53] *** Joins: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729)
[20:31:49] *** Joins: alx741 (~alx741@157.100.197.240)
[20:32:18] *** Quits: MajorBiscuit (~MajorBisc@c-001-017-039.client.tudelft.eduvpn.nl) (Ping timeout: 256 seconds)
[20:33:38] *** Quits: coot (~coot@213.134.190.95) (Quit: coot)
[20:34:12] *** Quits: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729) (Ping timeout: 240 seconds)
[20:34:30] *** Quits: Natch (~natch@c-4db8e255.014-297-73746f25.bbcust.telenor.se) (Remote host closed the connection)
[20:35:09] *** Joins: wootehfoot (~wootehfoo@user/wootehfoot)
[20:35:22] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[20:37:41] *** Joins: Akiva (~Akiva@user/Akiva)
[20:40:35] *** Joins: lavaman (~lavaman@98.38.249.169)
[20:45:30] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:3d23:94e0:3c0f:8df3) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[20:45:53] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:940d:dbf8:92f5:3d86)
[20:46:21] *** Joins: AlexZenon (~alzenon@178.34.160.252)
[20:46:31] <maerwald> anyone has an example with servants custom monads, but not with Handler, but with wai's Application?
[20:46:34] *** Joins: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729)
[20:46:44] *** Joins: AlexNoo (~AlexNoo@178.34.160.252)
[20:47:53] *** Quits: jao (~jao@static-68-235-44-77.cust.tzulo.com) (Ping timeout: 256 seconds)
[20:48:53] *** Joins: Alex_test (~al_test@178.34.160.252)
[20:49:01] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 256 seconds)
[20:50:07] *** Joins: jao (~jao@66.63.167.125)
[20:50:51] *** Joins: vicfred (~vicfred@user/vicfred)
[20:51:35] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Quit: ec)
[20:51:51] *** Joins: alx741 (~alx741@157.100.197.240)
[20:54:32] *** Joins: coot (~coot@213.134.190.95)
[20:55:54] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:d024:453c:94af:7479)
[20:59:41] *** Joins: ShalokShalom (~ShalokSha@2a02:1748:dd5e:7f60:f56a:2bb4:a975:dd85)
[21:00:12] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:d024:453c:94af:7479) (Ping timeout: 240 seconds)
[21:00:17] <ShalokShalom> ./stack-2.7.1-linux-aarch64.bin setup
[21:00:17] <ShalokShalom> Could not parse '/root/.stack/config.yaml':
[21:00:18] <ShalokShalom> Aeson exception:
[21:00:18] <ShalokShalom> Error in $: parsing ConfigMonoid failed, expected Object, but encountered Null
[21:00:19] <ShalokShalom> See http://docs.haskellstack.org/en/stable/yaml_configuration/
[21:00:40] <ShalokShalom> So, I downloaded just the binary, is it complaining now, that I lack a yaml?
[21:02:16] *** Joins: Natch (~natch@c-4db8e255.014-297-73746f25.bbcust.telenor.se)
[21:02:36] <ShalokShalom> Why dont they create one, or put one to the download?
[21:02:49] <c_wraith> ...  far more important, why is it looking in /root ?
[21:03:01] *** Quits: dons (~dons@user/dons) (Quit: Lost terminal)
[21:03:22] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[21:04:05] <ShalokShalom> I did it in home, same
[21:04:36] *** Quits: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729) (Ping timeout: 240 seconds)
[21:05:37] <c_wraith> I'd be super wary of file ownership issues breaking all sorts of things at this point.
[21:05:53] <c_wraith> since you clearly ran some commands as root
[21:06:29] *** Quits: ShalokShalom (~ShalokSha@2a02:1748:dd5e:7f60:f56a:2bb4:a975:dd85) (Quit: Ping timeout (120 seconds))
[21:07:10] *** Joins: tzh (~tzh@c-24-21-73-154.hsd1.wa.comcast.net)
[21:07:52] *** Quits: jkaye (~jkaye@2601:281:8300:7530:1f3b:3a8f:f843:9a79) (Remote host closed the connection)
[21:08:12] *** Joins: jkaye (~jkaye@2601:281:8300:7530:1f3b:3a8f:f843:9a79)
[21:08:14] *** Quits: ubert1 (~Thunderbi@2a02:8109:9880:303c:34eb:c52f:ccd4:3473) (Remote host closed the connection)
[21:10:29] *** Joins: akegalj (~akegalj@93-139-180-172.adsl.net.t-com.hr)
[21:12:46] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[21:12:46] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[21:12:46] *** Joins: wroathe (~wroathe@user/wroathe)
[21:14:59] *** Joins: zincy_ (~zincy@2a00:23c8:970c:4801:e530:c2a8:6798:30a9)
[21:17:53] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 252 seconds)
[21:19:28] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (Read error: Connection reset by peer)
[21:20:32] *** Joins: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi)
[21:20:47] *** Joins: Guest60 (~Guest60@134.101.5.46)
[21:21:26] *** Joins: alx741 (~alx741@157.100.197.240)
[21:23:38] <Guest60> is it possible to change a last element in a list of strings? for example list of names, ["Arnold, "1000 more names", "NameToChange"]?  Or even if I want to add a specific element, is it possible?
[21:23:55] <Guest60> not add, but change a specific element of the list let's say at the index 10
[21:23:56] <dminuoso> Yes, but not comfortably
[21:24:14] <dminuoso> What I would do is write `map1 :: (a -> a) -> [a] -> [a]` that maps over the first element
[21:24:17] *** Quits: kuribas (~user@ptr-25vy0ial5agu2xq2mv8.18120a2.ip6.access.telenet.be) (Remote host closed the connection)
[21:24:24] <dminuoso> And then write `reverse . map1 f . reverse`
[21:25:08] <dminuoso> But really, random manipulation lists is not convenient due to how lists are made. At the end lists are more like control structure rather than data structure
[21:25:24] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[21:25:46] <Guest60> I was thinking about a similar solution with reverse, the idea is that I have a list of names and I want to separate them with semicolons, and I want to get rid of the last semicolon, I though about reversing a list and taking all chars except the last without a semicolon and reversing it back..any better solution?
[21:26:23] <Guest60> so I want to populate a list with ["A";"B"; ...; "Z";] and get rid of the last semicolon
[21:26:29] *** Quits: ccntrq (~Thunderbi@2a01:e34:eccb:b060:801:2c01:d0ac:b063) (Remote host closed the connection)
[21:26:34] <dminuoso> Guest60: You might be interested in the following primitives
[21:26:37] <dminuoso> % :t intercalate
[21:26:37] <yahb> dminuoso: [a] -> [[a]] -> [a]
[21:26:50] <dminuoso> % :t intersperse
[21:26:51] <yahb> dminuoso: a -> [a] -> [a]
[21:27:02] <dminuoso> Are these, by any chance, helpful to you?
[21:27:18] <dminuoso> % intercalate ";" ["foo", "bar", "quux"]
[21:27:18] <yahb> dminuoso: "foo;bar;quux"
[21:29:08] <Guest60> I wll check this out, ty.
[21:30:51] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:d024:453c:94af:7479)
[21:30:55] *** Quits: burnsidesLlama (~burnsides@dhcp168-011.wadham.ox.ac.uk) (Remote host closed the connection)
[21:31:04] *** Quits: zincy_ (~zincy@2a00:23c8:970c:4801:e530:c2a8:6798:30a9) (Remote host closed the connection)
[21:31:30] *** Quits: pavonia (~user@user/siracusa) (Quit: Bye!)
[21:33:01] *** Quits: douglaswinship (~douglaswi@78.40.148.180) (Remote host closed the connection)
[21:35:50] *** Joins: eriol (~eriol@user/eriol)
[21:36:48] *** Quits: vglfr (~vglfr@coupling.penchant.volia.net) (Remote host closed the connection)
[21:37:24] *** Quits: pooryorick (~pooryoric@87-119-174-173.tll.elisa.ee) (Ping timeout: 240 seconds)
[21:37:31] *** sprout is now known as egelbot
[21:37:33] *** Joins: vglfr (~vglfr@coupling.penchant.volia.net)
[21:38:17] *** Joins: zincy_ (~zincy@2a00:23c8:970c:4801:e530:c2a8:6798:30a9)
[21:38:22] *** Joins: pooryorick (~pooryoric@87-119-174-173.tll.elisa.ee)
[21:39:54] *** Joins: econo (uid147250@user/econo)
[21:39:58] *** Joins: vickyHaskell (~textual@49.37.169.2)
[21:42:00] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Ping timeout: 256 seconds)
[21:43:37] *** Joins: ProfSimm (~ProfSimm@118.125.246.35.bc.googleusercontent.com)
[21:43:57] *** Joins: alx741 (~alx741@181.199.42.143)
[21:44:33] <EvanR> Guest60, to edit the last element of a list (to write a helper that applies a function to the last element of a list), I'd probably define it directly as two equations.
[21:44:36] *** Quits: doyougnu (~doyougnu@cpe-67-249-83-190.twcny.res.rr.com) (Ping timeout: 240 seconds)
[21:44:50] *** Quits: zincy_ (~zincy@2a00:23c8:970c:4801:e530:c2a8:6798:30a9) (Remote host closed the connection)
[21:44:56] <EvanR> note that such a function needs special treatment for []
[21:45:07] *** egelbot is now known as sprout
[21:45:22] <EvanR> do you crash or react to [] with another []
[21:45:36] *** Joins: zincy_ (~zincy@2a00:23c8:970c:4801:e530:c2a8:6798:30a9)
[21:46:08] *** Joins: cfricke (~cfricke@user/cfricke)
[21:46:12] <EvanR> if you're dealing with non-empty lists, Data.List.NonEmpty can allow you to avoid the question
[21:46:45] *** Quits: alx741 (~alx741@181.199.42.143) (Read error: Connection reset by peer)
[21:47:18] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[21:47:26] *** Joins: alx741 (~alx741@157.100.197.240)
[21:47:35] *** Quits: zincy_ (~zincy@2a00:23c8:970c:4801:e530:c2a8:6798:30a9) (Remote host closed the connection)
[21:48:35] *** Quits: fef (~thedawn@user/thedawn) (Ping timeout: 240 seconds)
[21:50:35] *** Quits: chele (~chele@user/chele) (Remote host closed the connection)
[21:50:36] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[21:52:03] *** Quits: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net) (Quit: WeeChat 3.3)
[21:54:50] *** Joins: jgeerds (~jgeerds@d53600c5.access.ecotel.net)
[21:54:53] *** sprout is now known as egelbot
[21:55:01] *** Quits: ph88 (~ph88@ip5f5af71f.dynamic.kabel-deutschland.de) (Quit: Leaving)
[21:55:52] *** egelbot is now known as sprout
[21:57:26] *** Joins: zincy_ (~zincy@2a00:23c8:970c:4801:e530:c2a8:6798:30a9)
[21:57:26] *** Quits: vglfr (~vglfr@coupling.penchant.volia.net) (Read error: Connection reset by peer)
[21:58:09] *** Joins: vglfr (~vglfr@coupling.penchant.volia.net)
[21:58:28] *** Joins: wonko (~wjc@user/wonko)
[22:04:30] *** Joins: burnsidesLlama (~burnsides@dhcp168-011.wadham.ox.ac.uk)
[22:08:46] *** Joins: emf (~emf@c-73-97-137-43.hsd1.wa.comcast.net)
[22:08:46] *** Quits: vglfr (~vglfr@coupling.penchant.volia.net) (Read error: Connection reset by peer)
[22:08:59] *** Joins: alx741 (~alx741@181.199.42.143)
[22:09:12] *** Quits: zincy_ (~zincy@2a00:23c8:970c:4801:e530:c2a8:6798:30a9) (Remote host closed the connection)
[22:10:06] *** Joins: vglfr (~vglfr@coupling.penchant.volia.net)
[22:10:14] *** Quits: burnsidesLlama (~burnsides@dhcp168-011.wadham.ox.ac.uk) (Ping timeout: 272 seconds)
[22:10:21] *** Joins: turlando (~turlando@user/turlando)
[22:11:48] *** Quits: alx741 (~alx741@181.199.42.143) (Read error: Connection reset by peer)
[22:11:58] *** Joins: zincy_ (~zincy@2a00:23c8:970c:4801:e530:c2a8:6798:30a9)
[22:12:28] *** Joins: alx741 (~alx741@181.199.42.143)
[22:12:42] <sm> can you publish a haskell app in the microsoft app store, does anyone know ?
[22:14:14] <maerwald> sm: tell me if you figure it out
[22:14:21] <maerwald> I'm also interested
[22:14:51] <dminuoso> The microsoft store policies dont seem to give a reason against it
[22:14:59] *** Quits: vglfr (~vglfr@coupling.penchant.volia.net) (Read error: Connection reset by peer)
[22:15:05] <dminuoso> https://docs.microsoft.com/en-us/windows/uwp/publish/store-policies#102-security
[22:15:05] *** Quits: alx741 (~alx741@181.199.42.143) (Read error: Connection reset by peer)
[22:15:10] <sm> https://docs.microsoft.com/en-us/windows/uwp/publish/
[22:15:28] <dminuoso> Appears to be the only section that somewhat relates to what's inside. So as long as you conform to that
[22:15:39] *** Quits: ProfSimm (~ProfSimm@118.125.246.35.bc.googleusercontent.com) (Remote host closed the connection)
[22:15:50] *** Joins: vglfr (~vglfr@coupling.penchant.volia.net)
[22:16:24] *** Joins: emf_ (~emf@2620:10d:c090:400::5:e9f1)
[22:16:38] <sm> https://docs.microsoft.com/en-us/windows/uwp/publish/msiexe/overview is useful
[22:16:57] <sm> but it seems quite hard to be certain without going through it. Or finding an existing app.. can't think of one offhand
[22:17:28] <sm> dminuoso: thanks
[22:17:54] <dminuoso> sm: the policies are very short.
[22:18:12] <dminuoso> If you go through it thoroughly, it seems like a 15 minute read
[22:18:33] <dminuoso> 30 if you're being extra careful I guess
[22:18:57] *** Quits: emf (~emf@c-73-97-137-43.hsd1.wa.comcast.net) (Ping timeout: 240 seconds)
[22:19:06] <sm> I still won't be certain
[22:19:50] <dminuoso> You never will be. At the end you're at the mercy of some random store algorithm's whim.
[22:19:53] <sm> for my particular app at least, which is slightly harder than "any haskell app in principle"
[22:19:53] <dminuoso> Or some admins whim.
[22:21:29] *** Quits: zincy_ (~zincy@2a00:23c8:970c:4801:e530:c2a8:6798:30a9) (Remote host closed the connection)
[22:21:30] *** Quits: vglfr (~vglfr@coupling.penchant.volia.net) (Read error: Connection reset by peer)
[22:21:54] *** Joins: zincy_ (~zincy@2a00:23c8:970c:4801:e530:c2a8:6798:30a9)
[22:22:36] *** Quits: zincy_ (~zincy@2a00:23c8:970c:4801:e530:c2a8:6798:30a9) (Remote host closed the connection)
[22:22:45] *** Joins: vglfr (~vglfr@coupling.penchant.volia.net)
[22:22:50] <sm> I'll be certain if I do it and succeed
[22:23:53] <sm> but if anyone thinks of an existing windows app store haskell app, do let us know
[22:24:10] *** Quits: cfricke (~cfricke@user/cfricke) (Ping timeout: 272 seconds)
[22:25:52] *** Joins: Pickchea (~private@user/pickchea)
[22:26:15] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:940d:dbf8:92f5:3d86) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[22:26:38] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:940d:dbf8:92f5:3d86)
[22:29:21] *** Quits: vickyHaskell (~textual@49.37.169.2) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[22:29:26] *** Joins: slack1256 (~slack1256@45.4.2.52)
[22:29:29] *** Quits: Batzy (~quassel@user/batzy) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[22:29:57] <slack1256> Has anyone seen this error before launching a binary inside docker? "a.out: internal error: Itimer: Failed to spawn thread: Operation not permitted"
[22:30:14] *** Quits: komikat (~komikat@183.82.154.239) (Remote host closed the connection)
[22:31:32] *** Joins: komikat (~komikat@183.82.154.239)
[22:31:45] *** Joins: alx741 (~alx741@181.199.42.143)
[22:31:54] *** Joins: Batzy (~quassel@user/batzy)
[22:32:15] *** Quits: jespada (~jespada@85.255.234.190) (Read error: Connection reset by peer)
[22:32:28] *** Quits: Guest60 (~Guest60@134.101.5.46) (Quit: Client closed)
[22:34:02] *** Quits: chexum (~quassel@gateway/tor-sasl/chexum) (Quit: No Ping reply in 180 seconds.)
[22:35:35] *** Joins: chexum (~quassel@gateway/tor-sasl/chexum)
[22:36:19] *** Quits: alx741 (~alx741@181.199.42.143) (Read error: Connection reset by peer)
[22:37:18] *** Quits: Midjak (~Midjak@82.66.147.146) (Quit: This computer has gone to sleep)
[22:38:21] *** Joins: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340)
[22:39:31] *** Joins: MajorBiscuit (~MajorBisc@2a02:a461:129d:1:193d:75d8:745d:e91e)
[22:40:08] *** Joins: ProfSimm (~ProfSimm@118.125.246.35.bc.googleusercontent.com)
[22:42:43] *** Joins: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl)
[22:42:54] *** Joins: benin (~benin@223.182.225.201)
[22:43:00] *** Quits: deadmarshal (~deadmarsh@95.38.230.132) (Ping timeout: 240 seconds)
[22:45:23] *** Joins: Null_A (~null_a@c-98-210-133-39.hsd1.ca.comcast.net)
[22:49:53] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:d024:453c:94af:7479) (Remote host closed the connection)
[22:50:08] *** Quits: arjun (~arjun@user/arjun) (Ping timeout: 250 seconds)
[22:52:37] *** Quits: vglfr (~vglfr@coupling.penchant.volia.net) (Read error: Connection reset by peer)
[22:52:49] *** Joins: vglfr (~vglfr@coupling.penchant.volia.net)
[22:53:09] *** Joins: alx741 (~alx741@157.100.197.240)
[22:59:29] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[22:59:33] *** Quits: Topsi (~Tobias@dyndsl-095-033-018-046.ewe-ip-backbone.de) (Read error: Connection reset by peer)
[23:00:00] *** Quits: vglfr (~vglfr@coupling.penchant.volia.net) (Read error: Connection reset by peer)
[23:00:08] *** Joins: vglfr (~vglfr@coupling.penchant.volia.net)
[23:02:45] *** Quits: Null_A (~null_a@c-98-210-133-39.hsd1.ca.comcast.net) (Ping timeout: 256 seconds)
[23:12:06] *** Quits: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl) (Ping timeout: 256 seconds)
[23:15:13] *** Quits: ProfSimm (~ProfSimm@118.125.246.35.bc.googleusercontent.com) (Ping timeout: 256 seconds)
[23:16:15] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[23:16:21] *** Joins: alx741 (~alx741@181.199.42.143)
[23:16:49] *** Quits: vglfr (~vglfr@coupling.penchant.volia.net) (Read error: Connection reset by peer)
[23:16:58] *** Joins: vglfr (~vglfr@coupling.penchant.volia.net)
[23:17:23] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 272 seconds)
[23:17:47] *** Joins: ProfSimm (~ProfSimm@87.227.196.109)
[23:18:59] *** Lord_of_Life_ is now known as Lord_of_Life
[23:19:45] *** Quits: alx741 (~alx741@181.199.42.143) (Read error: Connection reset by peer)
[23:19:48] *** Quits: MajorBiscuit (~MajorBisc@2a02:a461:129d:1:193d:75d8:745d:e91e) (Ping timeout: 240 seconds)
[23:22:52] *** Quits: coot (~coot@213.134.190.95) (Ping timeout: 256 seconds)
[23:30:45] *** Joins: coot (~coot@213.134.190.95)
[23:31:17] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:d024:453c:94af:7479)
[23:32:09] *** Joins: Null_A (~null_a@c-98-210-133-39.hsd1.ca.comcast.net)
[23:33:28] <Cale> dminuoso: TH splices will somehow give you an expression, but that expression will generally need to be evaluated. In cases where you have access to the data constructors for the type you're constructing, that can be helpful, but for stuff like Map/Set, it's quite inconvenient at the very least, and for ByteString/Text, you're still out of luck, since we can't have ByteString literals.
[23:34:15] *** Joins: Erutuon (~Erutuon@user/erutuon)
[23:34:28] *** Quits: slack1256 (~slack1256@45.4.2.52) (Ping timeout: 272 seconds)
[23:36:33] *** Quits: jgeerds (~jgeerds@d53600c5.access.ecotel.net) (Read error: Connection reset by peer)
[23:36:35] *** Joins: alx741 (~alx741@181.199.42.143)
[23:37:01] *** Quits: Null_A (~null_a@c-98-210-133-39.hsd1.ca.comcast.net) (Ping timeout: 272 seconds)
[23:39:26] *** Quits: alx741 (~alx741@181.199.42.143) (Read error: Connection reset by peer)
[23:40:04] *** Joins: alx741 (~alx741@181.199.42.143)
[23:40:36] *** Joins: _ht (~quassel@231-169-21-31.ftth.glasoperator.nl)
[23:44:02] *** Joins: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net)
[23:46:24] *** Quits: alx741 (~alx741@181.199.42.143) (Read error: Connection reset by peer)
[23:46:54] *** Joins: wroathe (~wroathe@user/wroathe)
[23:47:32] *** Joins: zero (~z@user/zero)
[23:47:36] *** Joins: wennefer0 (~wennefer0@192.160.51.50)
[23:48:51] *** Quits: dhouthoo (~dhouthoo@178-117-36-167.access.telenet.be) (Quit: WeeChat 3.4)
[23:49:49] *** Quits: zzz (~z@user/zero) (Ping timeout: 240 seconds)
[23:50:02] *** Joins: Null_A (~null_a@2601:645:8700:2290:44bc:7304:7645:6729)
[23:50:50] *** Quits: wennefer0 (~wennefer0@192.160.51.50) (Client Quit)
[23:52:49] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:d024:453c:94af:7479) (Remote host closed the connection)
[23:52:54] *** Quits: wonko (~wjc@user/wonko) (Ping timeout: 260 seconds)
[23:53:00] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[23:53:49] *** Joins: python476 (~user@2a01:e0a:8f9:d3e0:b117:81a8:33f6:93e7)
[23:54:44] *** Quits: bahamas (~lucian@84.232.140.52) (Ping timeout: 272 seconds)
[23:55:22] *** Joins: doyougnu (~doyougnu@cpe-67-249-83-190.twcny.res.rr.com)
[23:56:16] *** Joins: cynomys (~cynomys@user/cynomys)
[23:57:22] *** Joins: slack1256 (~slack1256@45.4.2.52)
[23:58:16] *** Quits: fendor_ (~fendor@91.141.59.141.wireless.dyn.drei.com) (Remote host closed the connection)
