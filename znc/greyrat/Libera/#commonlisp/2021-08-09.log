[00:00:13] *** Quits: rain3 (~rain3___@2a02:2f09:d30b:1300:514:bcc7:8202:1798) (Ping timeout: 258 seconds)
[00:04:08] *** Quits: attila_lendvai (~alendvai@C226779F.nat.pool.telekom.hu) (Ping timeout: 252 seconds)
[00:07:17] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[00:12:39] *** Joins: jimka (~user@2a01:e0a:26a:f400:c79:f12c:3584:a67d)
[00:13:00] *** Quits: tyson2 (~user@toroon12-3096782677.sdsl.bell.ca) (Quit: ERC (IRC client for Emacs 27.2))
[00:17:50] *** Quits: dlowe (~dlowe@user/dlowe) (Remote host closed the connection)
[00:18:05] *** Joins: dlowe (~dlowe@user/dlowe)
[00:18:24] *** Quits: dlowe (~dlowe@user/dlowe) (Remote host closed the connection)
[00:18:41] *** Joins: dlowe (~dlowe@user/dlowe)
[00:18:53] *** Joins: Bike (~Bike@71.69.170.70)
[00:18:53] *** ChanServ sets mode: +o Bike
[00:19:54] *** Quits: amb007 (~a_bakic@87.116.175.62) (Ping timeout: 240 seconds)
[00:20:17] *** Joins: amb007 (~a_bakic@109.245.227.78)
[00:31:51] *** Quits: amb007 (~a_bakic@109.245.227.78) (Read error: Connection reset by peer)
[00:31:54] *** Joins: attila_lendvai (~alendvai@C226779F.nat.pool.telekom.hu)
[00:31:58] *** Joins: amb007 (~a_bakic@87.116.175.36)
[00:36:32] *** Joins: notzmv (~zmv@user/notzmv)
[00:36:38] *** Quits: attila_lendvai (~alendvai@C226779F.nat.pool.telekom.hu) (Ping timeout: 258 seconds)
[00:38:18] *** Quits: amb007 (~a_bakic@87.116.175.36) (Ping timeout: 240 seconds)
[00:39:19] *** Joins: amb007 (~a_bakic@109.245.227.78)
[00:47:37] *** Quits: jimka (~user@2a01:e0a:26a:f400:c79:f12c:3584:a67d) (Ping timeout: 245 seconds)
[00:48:34] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 240 seconds)
[00:50:34] *** Joins: aeth (~aeth@user/aeth)
[00:52:25] *** Quits: nirnam (~nirnam@1.47.28.235) (Read error: Connection reset by peer)
[01:13:49] *** Quits: amb007 (~a_bakic@109.245.227.78) (Read error: Connection reset by peer)
[01:14:01] *** Joins: amb007 (~a_bakic@109-93-245-91.dynamic.isp.telekom.rs)
[01:18:18] *** Joins: lad (~lad@user/lad)
[01:19:13] *** Quits: amb007 (~a_bakic@109-93-245-91.dynamic.isp.telekom.rs) (Read error: Connection reset by peer)
[01:19:35] *** Joins: amb007 (~a_bakic@109.245.227.78)
[01:25:06] *** Joins: nature (~nature@mail.blazebone.com)
[01:31:26] *** Quits: yitzi (~yitzi@173-27-106-188.client.mchsi.com) (Quit: Leaving)
[01:33:44] <lisp123> Is there a way to macroexpand a function
[01:33:44] <lisp123> ?
[01:33:57] <lisp123> I assume not, but it would be nice
[01:34:41] <phoe> lisp123: what do you mean, macroexpand a function
[01:34:42] *** Quits: scymtym (~user@2001:638:504:20e6:6ac3:87e0:e782:f3fc) (Ping timeout: 245 seconds)
[01:34:51] <phoe> you mean, get its source code?
[01:34:56] <lisp123> yes
[01:35:06] <phoe> this is usually achieved via xrefs - try M-. in emacs when your point is over a Lisp symbol
[01:35:17] <lisp123> I have a macro that creates a function, so I want to be able to macroexpand the function
[01:35:22] <phoe> there is also FUNCTION-LAMBDA-EXPRESSION but this is not required to work
[01:35:29] <lisp123> vs. macroexpanding the macro
[01:35:32] <phoe> you can't macroexpand a function
[01:35:54] <phoe> but you can preserve the source code somewhere if you *really* need it
[01:35:55] *** Quits: amb007 (~a_bakic@109.245.227.78) (Read error: Connection reset by peer)
[01:36:11] <phoe> or you can macroexpand your macro call and read the generated source code this way
[01:36:28] <phoe> if your (DEFINE-FOO ...) expands into a (DEFUN ...) then you can read your source code there
[01:36:43] <phoe> slime-macrostep is pure love in these situations
[01:37:22] *** Joins: amb007 (~a_bakic@109.245.227.78)
[01:37:22] <lisp123> or you can macroexpand your macro call and read the generated source code this way >> this is what I am doing
[01:37:34] <lisp123> I will look into slime-macrostep, thanks for the suggestion :)
[01:37:47] <phoe> slime-macrostep is lovely because it expands macros *inline* in your source code
[01:37:58] <phoe> no need to jump into the REPL to issue MACROEXPAND-1 calls and copy large blocks of code
[01:39:30] *** Quits: amb007 (~a_bakic@109.245.227.78) (Read error: Connection reset by peer)
[01:39:59] *** Joins: amb007 (~a_bakic@cable-94-189-183-212.dynamic.sbb.rs)
[01:41:47] <lisp123> phoe: this stuff is amazing :D
[01:42:16] <lisp123> perfect what I was looking for (issue was I had macros inside macros insides functions inside functions - hence wanting to macroexpand functions)
[01:42:28] <lisp123> thanks!!
[01:42:31] <phoe> <3
[01:44:31] *** Quits: Bike (~Bike@71.69.170.70) (Quit: Connection closed)
[01:47:05] <lad> Hi. I am trying to use the cl-json library, could use some help. Here is what i'm trying to do: http://pastie.org/p/5KZ1MWrp9ezmD6NoVBJQAX
[01:47:39] *** Joins: hendursa1 (~weechat@user/hendursaga)
[01:50:42] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 244 seconds)
[01:50:58] <lisp123> lad: so if I understand, you want "60":[181] as an object?
[01:51:25] <lisp123> and not ["60", 181]?
[01:51:57] <lad> lisp123, yes, should be an object, just like the input, not an array
[01:53:02] <lisp123> hmmm
[01:53:08] <lad> lisp123, maybe i have to build up a hash table from the decoded json
[01:53:14] <lad> instead of ALIST
[01:53:30] *** Joins: dsk (~dsk@user/dsk)
[01:53:37] <lisp123> I went down that route before because cl-json was very unintuitive to use
[01:54:36] <lisp123> I am checking some of my old code to see if I remember
[01:57:10] *** Joins: scymtym (~user@ip-88-153-154-183.hsi04.unitymediagroup.de)
[01:59:44] <lisp123> lad:
[01:59:52] <lisp123> lad: I ended up using the YASON
[02:01:10] *** Joins: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[02:01:17] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 252 seconds)
[02:02:00] <lisp123>  (yason:encode "{\"activeFramePerNote\":{\"60\":[181],\"62\":[601],\"64\":[1085]},\"duration\":21.68}") seems to work :D
[02:02:56] *** Joins: aeth (~aeth@user/aeth)
[02:03:15] <lisp123> wait pls ignore, let me fix that...
[02:04:17] *** Quits: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 245 seconds)
[02:10:53] <lisp123> lad: https://pastebin.com/H5GV56r5
[02:11:14] <lisp123> seems to give the same results
[02:11:17] <lisp123> try as a hash I guess
[02:11:54] *** Joins: PinealGlandOptic (~PinealGla@37.115.210.35)
[02:12:05] *** Joins: nirnam (~nirnam@1.47.28.235)
[02:13:33] <lad> lisp123, thanks for your help. will try hash table
[02:13:54] <lisp123> lad: I have to sleep but I suspect it might also be an issue with how your json string is writte
[02:14:13] <lisp123> it looks reasonable, but json is such a finnicky format, so don't rule that out
[02:14:23] <lisp123> if I get any ideas I'll send then to you later, good night & good luck
[02:14:31] <lad> lisp123, rest well
[02:22:24] *** Joins: Bike (~Bike@71.69.170.70)
[02:22:24] *** ChanServ sets mode: +o Bike
[02:23:12] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 258 seconds)
[02:24:36] *** Quits: lisp123 (~lisp123@45.130.83.181) (Remote host closed the connection)
[02:25:33] *** Joins: lisp123 (~lisp123@45.130.83.181)
[02:29:18] <mfiano> macroexpand a function?
[02:29:25] <mfiano> that is a new one :)
[02:29:40] <mfiano> but, (disassemble #'func) will do :)
[02:29:53] *** Quits: lisp123 (~lisp123@45.130.83.181) (Ping timeout: 252 seconds)
[02:30:42] <lotuseater> one can think of that when seeing the symbol MACRO-FUNCTION ^^
[02:41:30] *** Quits: hendursa1 (~weechat@user/hendursaga) (Quit: hendursa1)
[02:42:03] *** Joins: hendursaga (~weechat@user/hendursaga)
[02:42:04] *** Quits: pve_ (~pve@87-93-146-129.bb.dnainternet.fi) (Quit: leaving)
[02:42:47] *** Joins: jimka (~user@2a01:e0a:26a:f400:c79:f12c:3584:a67d)
[02:43:06] *** Quits: nature (~nature@mail.blazebone.com) (Ping timeout: 240 seconds)
[02:46:16] *** Quits: lucerne (~lucerne@ip202.ip-51-178-215.eu) (Quit: Ping timeout (120 seconds))
[02:47:06] *** Joins: lucerne (~lucerne@ip202.ip-51-178-215.eu)
[02:51:09] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[02:54:00] *** Quits: gaqwas (~john@dynamic-077-004-084-010.77.4.pool.telefonica.de) (Ping timeout: 272 seconds)
[03:04:42] *** Quits: taiju (~taiju@240b:253:ec40:2400:3cf8:2df8:a9c6:9f5a) (Ping timeout: 240 seconds)
[03:05:21] *** Joins: taiju (~taiju@240b:253:ec40:2400:3cf8:2df8:a9c6:9f5a)
[03:05:55] *** Joins: lisp123 (~lisp123@45.130.83.181)
[03:12:16] *** Joins: char (~charles@cpe-76-186-124-165.tx.res.rr.com)
[03:14:04] *** Quits: frgo (~frgo@p200300deef181d000d96fec9d6d743ee.dip0.t-ipconnect.de) (Remote host closed the connection)
[03:14:11] *** Joins: hafat (~hafat@95.70.167.173)
[03:14:31] *** Joins: frgo (~frgo@p200300deef181d00e84cc64eee962050.dip0.t-ipconnect.de)
[03:16:21] *** Joins: srhm (~ascii@user/srhm)
[03:16:46] *** Joins: cjb (~cjb@user/cjb)
[03:16:53] *** Quits: jimka (~user@2a01:e0a:26a:f400:c79:f12c:3584:a67d) (Ping timeout: 250 seconds)
[03:17:12] *** Quits: rgherdt (~rgherdt@2a02:8109:86c0:d8d:8186:40cc:d89:9651) (Ping timeout: 245 seconds)
[03:17:59] *** Joins: pillton (~user@2405:b000:600:b0::36a)
[03:19:21] *** Joins: karlosz (~karlosz@router.cloyne.org)
[03:25:07] *** Quits: lisp123 (~lisp123@45.130.83.181) (Ping timeout: 245 seconds)
[03:25:34] *** Quits: lad (~lad@user/lad) (Remote host closed the connection)
[03:25:58] *** Joins: lad (~lad@user/lad)
[03:28:34] *** Quits: sander (~sander@user/sander) (Ping timeout: 256 seconds)
[03:29:10] *** Joins: jimka (~user@2a01:e0a:26a:f400:c79:f12c:3584:a67d)
[03:38:31] *** Quits: karlosz (~karlosz@router.cloyne.org) (Quit: karlosz)
[03:40:57] *** Quits: taiju (~taiju@240b:253:ec40:2400:3cf8:2df8:a9c6:9f5a) (Ping timeout: 245 seconds)
[03:41:51] *** Joins: taiju (~taiju@M014013236064.v4.enabler.ne.jp)
[03:50:06] *** Quits: amb007 (~a_bakic@cable-94-189-183-212.dynamic.sbb.rs) (Ping timeout: 256 seconds)
[03:53:24] *** Joins: mason (~mason@redhat/mason)
[03:55:57] <hayley> Here is a sketch for an immodest proposal for CL-friendly arrays of structs: <https://gist.github.com/no-defun-allowed/d66146c4768a17feddc01763bc4a3f7e>
[03:57:04] <hayley> The aim is to have something resembling interior pointers to arrays with packed structs, but still with type safety and ideally some ability to redefine structure classes.
[04:00:57] *** Quits: dsk (~dsk@user/dsk) (Ping timeout: 245 seconds)
[04:01:31] *** Quits: nirnam (~nirnam@1.47.28.235) (Ping timeout: 250 seconds)
[04:01:42] *** Quits: random-nick (~random-ni@87.116.181.197) (Ping timeout: 272 seconds)
[04:02:14] *** Quits: Bike (~Bike@71.69.170.70) (Quit: Connection closed)
[04:03:15] *** Quits: jimka (~user@2a01:e0a:26a:f400:c79:f12c:3584:a67d) (Ping timeout: 250 seconds)
[04:04:54] <pjb> hayley: I understand the drive for specialized array, but note that CL already has defstruct (:type vector) and displaced arrays…
[04:06:15] <moon-child> hayley: that sounds like a slightly convoluted way of doing arenas
[04:06:44] <hayley> Well, I suppose that is possible. But it prohibits redefining the structure class and the pattern to optimize is perhaps less obvious.
[04:07:06] <hayley> moon-child: To me it is still an array of structs, but I guess it can be used as an arena.
[04:11:12] <hayley> An example that I am vaguely interested in would be to put a cached hash, key and value on the same cache line. If the hash is a fixnum, that is already possible to be fair, but if you really want to keep it unboxed, you need packed structs.
[04:17:06] *** Joins: jimka (~user@2a01:e0a:26a:f400:c79:f12c:3584:a67d)
[04:22:26] <hayley> Come to think of it, the space overhead for "handles" in idea 2 is about the same as for having separate instances, so it's probably fine.
[04:26:13] *** Joins: notzmv (~zmv@user/notzmv)
[04:30:03] *** Quits: hendursaga (~weechat@user/hendursaga) (Remote host closed the connection)
[04:30:24] *** Joins: hendursaga (~weechat@user/hendursaga)
[04:31:19] *** Joins: Bike (~Bike@71.69.170.70)
[04:31:19] *** ChanServ sets mode: +o Bike
[04:35:41] <Bike> the chain of events when a class is redefined seems nasty. like, how do you update an array for more slots? when an object is updated does it have to trigger an update to any arrays it's in?
[04:36:37] *** Quits: taiju (~taiju@M014013236064.v4.enabler.ne.jp) (Ping timeout: 250 seconds)
[04:41:35] <hayley> Well, all the objects have to be updated at once, and some stamp/version/&c can be stored in the storage vector.
[04:42:05] <hayley> In effect the second idea is a very weird way of sharing a "rack" between a lot of standard instances.
[04:43:34] *** Quits: lad (~lad@user/lad) (Remote host closed the connection)
[04:43:52] *** Quits: srhm (~ascii@user/srhm) (Ping timeout: 245 seconds)
[04:43:58] *** Joins: lad (~lad@user/lad)
[04:45:01] *** Joins: taiju (~taiju@M014013236064.v4.enabler.ne.jp)
[04:45:10] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Quit: ERC (IRC client for Emacs 27.2))
[04:50:48] *** Quits: hineios (~hineios@a95-93-142-124.cpe.netcabo.pt) (Ping timeout: 252 seconds)
[04:51:09] *** Quits: dlowe (~dlowe@user/dlowe) (Quit: Wandering off..)
[04:51:10] *** Quits: jimka (~user@2a01:e0a:26a:f400:c79:f12c:3584:a67d) (Ping timeout: 258 seconds)
[04:51:24] *** Joins: dlowe (~dlowe@user/dlowe)
[04:55:48] *** Joins: nirnam (~nirnam@1.47.143.232)
[05:00:32] *** Quits: Bike (~Bike@71.69.170.70) (Quit: Connection closed)
[05:03:39] *** Quits: taiju (~taiju@M014013236064.v4.enabler.ne.jp) (Read error: Connection reset by peer)
[05:04:58] *** Joins: taiju (~taiju@240b:253:ec40:2400:3cf8:2df8:a9c6:9f5a)
[05:08:54] *** Joins: tyson2 (~user@cpeb4fbe4e04394-cmf0f249001100.cpe.net.cable.rogers.com)
[05:13:04] *** Joins: yitzi (~yitzi@173-27-106-188.client.mchsi.com)
[05:20:41] *** Quits: lad (~lad@user/lad) (Ping timeout: 258 seconds)
[05:23:29] *** Joins: srhm (~ascii@user/srhm)
[05:32:11] *** Quits: dlowe (~dlowe@user/dlowe) (Remote host closed the connection)
[05:32:26] *** Joins: dlowe (~dlowe@user/dlowe)
[05:35:27] *** Quits: dlowe (~dlowe@user/dlowe) (Client Quit)
[05:35:42] *** Joins: dlowe (~dlowe@user/dlowe)
[05:35:52] *** Quits: dlowe (~dlowe@user/dlowe) (Remote host closed the connection)
[05:36:06] *** Joins: dlowe (~dlowe@user/dlowe)
[05:36:44] *** Joins: Bike (~Bike@71.69.170.70)
[05:36:44] *** ChanServ sets mode: +o Bike
[05:37:42] *** Quits: dlowe (~dlowe@user/dlowe) (Remote host closed the connection)
[05:41:57] *** Quits: taiju (~taiju@240b:253:ec40:2400:3cf8:2df8:a9c6:9f5a) (Ping timeout: 252 seconds)
[05:52:13] *** Joins: taiju (~taiju@61.127.163.30)
[06:00:48] *** Joins: Fare (~fare@2601:184:4a7f:995c::871)
[06:01:19] *** Quits: taiju (~taiju@61.127.163.30) (Ping timeout: 258 seconds)
[06:27:14] *** Quits: tyson2 (~user@cpeb4fbe4e04394-cmf0f249001100.cpe.net.cable.rogers.com) (Quit: ERC (IRC client for Emacs 27.2))
[06:29:42] *** Joins: dsk (~dsk@user/dsk)
[06:31:35] *** Quits: srhm (~ascii@user/srhm) (Quit: Konversation terminated!)
[06:46:40] *** Joins: jimka (~user@2a01:e0a:26a:f400:c79:f12c:3584:a67d)
[06:49:14] *** Quits: derelict (~derelict@user/derelict) (Ping timeout: 258 seconds)
[06:55:33] *** Joins: prxq (~quassel@x4db937d5.dyn.telefonica.de)
[06:59:35] *** Quits: prxq_ (~quassel@x4db3a812.dyn.telefonica.de) (Ping timeout: 258 seconds)
[07:02:42] *** Joins: taiju (~taiju@M014013236064.v4.enabler.ne.jp)
[07:07:18] *** Joins: selwyn (~selwyn@user/selwyn)
[07:08:42] *** Quits: blihp (~blihp@c-68-43-233-92.hsd1.mi.comcast.net) (Read error: Connection reset by peer)
[07:20:21] *** Quits: raeda (~raeda@72.49.219.33) (Read error: Connection reset by peer)
[07:20:39] *** Joins: raeda (~raeda@72.49.219.33)
[07:20:57] *** Quits: jimka (~user@2a01:e0a:26a:f400:c79:f12c:3584:a67d) (Ping timeout: 245 seconds)
[07:32:12] <beach> Good morning everyone!
[07:32:49] *** Joins: jimka (~user@2a01:e0a:26a:f400:c79:f12c:3584:a67d)
[07:48:13] <lotuseater> Good morning beach.
[07:48:27] *** Quits: hafat (~hafat@95.70.167.173) (Ping timeout: 245 seconds)
[07:51:34] *** Joins: kakuhen (~kakuhen@user/kakuhen)
[07:52:31] *** Quits: Fare (~fare@2601:184:4a7f:995c::871) (Quit: Leaving)
[07:52:46] *** Joins: Fare (~fare@2601:184:4a7f:995c::871)
[07:58:47] *** Quits: Fare (~fare@2601:184:4a7f:995c::871) (Quit: Leaving)
[08:06:17] *** Quits: jimka (~user@2a01:e0a:26a:f400:c79:f12c:3584:a67d) (Ping timeout: 258 seconds)
[08:30:37] *** Quits: Bike (~Bike@71.69.170.70) (Quit: Connection closed)
[09:00:43] *** Joins: khrbt (~khrbt@user/khrbt)
[09:09:25] *** Quits: khrbt (~khrbt@user/khrbt) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[09:10:02] *** Joins: khrbt (~khrbt@user/khrbt)
[09:11:56] *** Quits: khrbt (~khrbt@user/khrbt) (Client Quit)
[09:14:25] *** Joins: jimka (~user@2a01:e0a:26a:f400:c79:f12c:3584:a67d)
[09:15:35] *** Joins: lisp123 (~lisp123@45.130.83.181)
[09:18:09] *** Quits: cjb (~cjb@user/cjb) (Ping timeout: 260 seconds)
[09:19:01] *** Joins: khrbt (~khrbt@user/khrbt)
[09:23:06] *** Quits: khrbt (~khrbt@user/khrbt) (Ping timeout: 240 seconds)
[09:28:49] *** Quits: taiju (~taiju@M014013236064.v4.enabler.ne.jp) (*.net *.split)
[09:28:50] *** Quits: nirnam (~nirnam@1.47.143.232) (*.net *.split)
[09:28:50] *** Quits: aeth (~aeth@user/aeth) (*.net *.split)
[09:28:50] *** Quits: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net) (*.net *.split)
[09:28:50] *** Quits: Josh_2 (~user@37.25.47.130) (*.net *.split)
[09:28:50] *** Quits: iisi (sid19824@stonehaven.irccloud.com) (*.net *.split)
[09:28:50] *** Quits: peterhil (~peterhil@dsl-hkibng32-54fb52-57.dhcp.inet.fi) (*.net *.split)
[09:28:50] *** Quits: copec (~copec@home.unaen.org) (*.net *.split)
[09:28:50] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (*.net *.split)
[09:28:50] *** Quits: skyl4rk (~tlvb@user/tlvb) (*.net *.split)
[09:28:50] *** Quits: mingus (~jan-magnu@ti0135a400-2471.bb.online.no) (*.net *.split)
[09:28:50] *** Quits: fengshaun (~fengshaun@68.69.214.210) (*.net *.split)
[09:28:51] *** Quits: fourier (~fourier@customer-89-255-226-149.stosn.net) (*.net *.split)
[09:29:07] *** Joins: taiju (~taiju@M014013236064.v4.enabler.ne.jp)
[09:29:07] *** Joins: nirnam (~nirnam@1.47.143.232)
[09:29:07] *** Joins: aeth (~aeth@user/aeth)
[09:29:07] *** Joins: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[09:29:07] *** Joins: Josh_2 (~user@37.25.47.130)
[09:29:07] *** Joins: iisi (sid19824@stonehaven.irccloud.com)
[09:29:07] *** Joins: peterhil (~peterhil@dsl-hkibng32-54fb52-57.dhcp.inet.fi)
[09:29:07] *** Joins: copec (~copec@home.unaen.org)
[09:29:07] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[09:29:07] *** Joins: skyl4rk (~tlvb@user/tlvb)
[09:29:07] *** Joins: mingus (~jan-magnu@ti0135a400-2471.bb.online.no)
[09:29:07] *** Joins: fengshaun (~fengshaun@68.69.214.210)
[09:29:07] *** Joins: fourier (~fourier@customer-89-255-226-149.stosn.net)
[09:29:15] *** Quits: taiju (~taiju@M014013236064.v4.enabler.ne.jp) (Remote host closed the connection)
[09:29:31] *** Joins: taiju (~taiju@240b:253:ec40:2400:3cf8:2df8:a9c6:9f5a)
[09:31:03] *** Quits: pranavats (3fba1d1b34@jabberfr.org) (*.net *.split)
[09:31:03] *** Quits: totoro (~totoro@user/totoro) (*.net *.split)
[09:31:03] *** Quits: phantomics (~phantomic@71-218-228-208.hlrn.qwest.net) (*.net *.split)
[09:31:04] *** Quits: Xach (~xach@user/xach) (*.net *.split)
[09:31:04] *** Quits: dtman34 (~dtman34@c-73-62-246-247.hsd1.mn.comcast.net) (*.net *.split)
[09:31:04] *** Quits: ryanbw (~ryanbw@mab.sdf.org) (*.net *.split)
[09:31:04] *** Quits: theBlackDragon (~dragon@fvwm/admin) (*.net *.split)
[09:31:04] *** Quits: mgxm (~mgxm@45.32.160.157) (*.net *.split)
[09:31:04] *** Quits: borodust (~irc@user/borodust) (*.net *.split)
[09:31:04] *** Quits: Demosthenex (~Demosthen@user/demosthenex) (*.net *.split)
[09:31:04] *** Quits: fiddlerwoaroof_ (~fiddlerwo@user/fiddlerwoaroof) (*.net *.split)
[09:31:05] *** Joins: Xach_ (~xach@66-63-89-62.static.suscom-maine.net)
[09:31:08] *** Joins: Demosthe1ex (~Demosthen@dhcp-077-248-042-162.chello.nl)
[09:31:09] *** Quits: Demosthe1ex (~Demosthen@dhcp-077-248-042-162.chello.nl) (Changing host)
[09:31:09] *** Joins: Demosthe1ex (~Demosthen@user/demosthenex)
[09:31:23] *** Joins: phantomics (~phantomic@71-218-228-208.hlrn.qwest.net)
[09:31:25] *** Joins: khrbt (~khrbt@user/khrbt)
[09:31:28] *** Joins: ryanbw (~ryanbw@mab.sdf.org)
[09:31:33] *** Joins: theBlack1ragon (~dragon@fvwm/admin)
[09:31:35] *** Joins: totoro (~totoro@173.82.187.126)
[09:31:37] *** Quits: totoro (~totoro@173.82.187.126) (Changing host)
[09:31:37] *** Joins: totoro (~totoro@user/totoro)
[09:32:12] *** Quits: katco (~katco@2001:470:69fc:105::2b8) (Ping timeout: 245 seconds)
[09:32:19] *** Joins: mgxm (~mgxm@user/mgxm)
[09:32:23] *** Joins: borodust (~irc@user/borodust)
[09:32:23] *** Joins: dtman34 (~dtman34@c-73-62-246-247.hsd1.mn.comcast.net)
[09:32:26] *** Joins: fiddlerwoaroof (~fiddlerwo@user/fiddlerwoaroof)
[09:32:35] *** Quits: luis` (~luismboma@2001:470:69fc:105::cc7) (Ping timeout: 240 seconds)
[09:32:56] *** Quits: dieggsy (~dieggsy@2001:470:69fc:105::91f) (Ping timeout: 256 seconds)
[09:33:14] *** Quits: Gnuxie (~gnuxie@user/gnuxie) (Ping timeout: 268 seconds)
[09:33:14] *** Quits: Mrtn[m] (~mrtn@2001:470:69fc:105::1f44) (Ping timeout: 268 seconds)
[09:34:16] *** Quits: lisp123 (~lisp123@45.130.83.181) (Remote host closed the connection)
[09:34:18] *** Quits: khrbt (~khrbt@user/khrbt) (Client Quit)
[09:34:29] *** Joins: lisp123 (~lisp123@45.130.83.181)
[09:34:50] *** Quits: greyrat_ (~greyrat@ip202.ip-51-178-215.eu) (Bye)
[09:36:39] *** Joins: greyrat (~greyrat@ip202.ip-51-178-215.eu)
[09:36:41] *** Joins: jfb4 (~jfb4@178.62.2.68)
[09:36:44] *** Quits: loke[m] (~loke@2001:470:69fc:105::237) (Ping timeout: 272 seconds)
[09:36:57] *** Quits: hayley (~theemacss@user/hayley) (Ping timeout: 276 seconds)
[09:36:57] *** Quits: etimmons (~etimmons@2001:470:69fc:105::5d5) (Ping timeout: 276 seconds)
[09:37:09] *** Server sets mode: +Ccntz 
[09:38:34] *** Quits: Inline (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431) (Quit: Leaving)
[09:41:14] *** Joins: khrbt (~khrbt@user/khrbt)
[09:43:05] *** Quits: khrbt (~khrbt@user/khrbt) (Client Quit)
[09:48:02] *** Quits: jimka (~user@2a01:e0a:26a:f400:c79:f12c:3584:a67d) (Ping timeout: 245 seconds)
[09:49:41] *** Joins: amb007 (~a_bakic@109.245.227.78)
[09:49:48] *** Quits: amb007 (~a_bakic@109.245.227.78) (Read error: Connection reset by peer)
[09:49:59] *** Joins: amb007 (~a_bakic@cable-94-189-183-212.dynamic.sbb.rs)
[09:50:39] *** Quits: lisp123 (~lisp123@45.130.83.181) (Remote host closed the connection)
[09:51:15] *** Joins: elf_fortrez (~elf_fortr@adsl-72-50-4-118.prtc.net)
[09:51:36] *** Joins: igemnace (~ian@user/igemnace)
[09:53:08] *** Joins: lisp123_ (~lisp123@45.130.83.181)
[09:57:52] *** Quits: lisp123_ (~lisp123@45.130.83.181) (Ping timeout: 256 seconds)
[09:58:42] *** Quits: elf_fortrez (~elf_fortr@adsl-72-50-4-118.prtc.net) (Quit: Client closed)
[10:01:31] *** Joins: icepic1984[m] (~icepic198@2001:470:69fc:105::cd23)
[10:01:50] *** Joins: jimka (~user@2a01:e0a:26a:f400:c79:f12c:3584:a67d)
[10:02:51] *** Joins: akater[m] (~akatermat@2001:470:69fc:105::ccef)
[10:02:58] *** Joins: JooTvora[m] (~joaotavor@2001:470:69fc:105::b9ad)
[10:06:17] *** Joins: hayley (~theemacss@2001:470:69fc:105::234)
[10:06:27] *** Quits: hayley (~theemacss@2001:470:69fc:105::234) (Changing host)
[10:06:27] *** Joins: hayley (~theemacss@user/hayley)
[10:10:33] *** Joins: luis` (~luismboma@2001:470:69fc:105::cc7)
[10:21:34] *** Joins: happy-dude (~happy-dud@2001:470:69fc:105::b4d7)
[10:25:24] *** Joins: karlosz (~karlosz@router.cloyne.org)
[10:33:09] *** Quits: Shinmera (~shinmera@supersolid.equilibrium.tymoon.eu) (Quit: WeeChat 2.8)
[10:33:25] *** Joins: Shinmera (~shinmera@shirakumo/shinmera)
[10:33:38] *** Joins: lisp123 (~lisp123@45.130.83.181)
[10:33:53] *** Joins: dieggsy (~dieggsy@2001:470:69fc:105::91f)
[10:35:23] *** Joins: Gnuxie (~gnuxie@user/gnuxie)
[10:36:07] *** Quits: jimka (~user@2a01:e0a:26a:f400:c79:f12c:3584:a67d) (Ping timeout: 268 seconds)
[10:36:52] *** Joins: lisp321 (~user@80.227.170.170)
[10:37:11] *** Quits: karlosz (~karlosz@router.cloyne.org) (Quit: karlosz)
[10:37:47] <mfiano> polymorphic-functions looks like a nice approach to the array of semantics-changing defgeneric libraries. However, one thing bothers me, but I don't understand the code well enough to know if it can be solved.
[10:37:59] <mfiano> It uses GENTEMP !
[10:39:45] *** Joins: silasfox (~sbv@xdsl-87-78-42-86.nc.de)
[10:40:59] *** Joins: rgherdt (~rgherdt@2a02:8109:86c0:d8d:8186:40cc:d89:9651)
[10:43:37] <moon-child> o.o
[10:46:28] *** Quits: lisp123 (~lisp123@45.130.83.181) (Ping timeout: 272 seconds)
[10:46:38] *** Joins: loke[m] (~loke@2001:470:69fc:105::237)
[10:51:42] *** Quits: gpiero (~quassel@camale.rm-rf.it) (Ping timeout: 276 seconds)
[10:51:57] *** Joins: gpiero (~quassel@camale.rm-rf.it)
[10:53:59] *** Joins: etimmons (~etimmons@2001:470:69fc:105::5d5)
[10:56:55] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[10:57:46] *** Joins: lad (~lad@user/lad)
[10:57:50] *** zagura__ is now known as zagura
[10:58:49] *** Joins: selwyn_ (~selwyn@user/selwyn)
[10:59:08] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 272 seconds)
[10:59:08] *** Lord_of_Life_ is now known as Lord_of_Life
[11:00:08] *** Joins: jimka (~user@2a01:e0a:26a:f400:c79:f12c:3584:a67d)
[11:01:29] *** Quits: selwyn (~selwyn@user/selwyn) (Ping timeout: 252 seconds)
[11:01:31] *** Joins: katco (~katco@2001:470:69fc:105::2b8)
[11:05:32] *** Joins: Mrtn[m] (~mrtn@2001:470:69fc:105::1f44)
[11:16:23] *** Joins: lisp123 (~lisp123@45.130.83.181)
[11:16:29] *** Joins: sander (~sander@user/sander)
[11:16:56] *** Joins: Cymew (~ante@host-90-235-68-191.mobileonline.telia.com)
[11:21:52] *** Quits: amb007 (~a_bakic@cable-94-189-183-212.dynamic.sbb.rs) (Read error: Connection reset by peer)
[11:22:34] *** Joins: gaqwas (~john@dynamic-077-007-118-176.77.7.pool.telefonica.de)
[11:22:35] *** Joins: amb007 (~a_bakic@cable-94-189-183-212.dynamic.sbb.rs)
[11:27:00] *** Quits: lisp123 (~lisp123@45.130.83.181) (Ping timeout: 272 seconds)
[11:27:18] *** Quits: amb007 (~a_bakic@cable-94-189-183-212.dynamic.sbb.rs) (Ping timeout: 268 seconds)
[11:27:59] *** Joins: amb007 (~a_bakic@109.245.227.78)
[11:33:15] *** Joins: elf_fortrez (~elf_fortr@adsl-72-50-4-51.prtc.net)
[11:33:36] *** Quits: elf_fortrez (~elf_fortr@adsl-72-50-4-51.prtc.net) (Write error: Broken pipe)
[11:34:09] *** Joins: elf_fortrez (~elf_fortr@adsl-72-50-4-118.prtc.net)
[11:39:04] *** Joins: khrbt (~khrbt@user/khrbt)
[11:39:04] *** Quits: amb007 (~a_bakic@109.245.227.78) (Read error: Connection reset by peer)
[11:40:33] *** Joins: amb007 (~a_bakic@109.245.227.78)
[11:43:28] *** Quits: Cymew (~ante@host-90-235-68-191.mobileonline.telia.com) (Ping timeout: 272 seconds)
[11:43:38] *** Joins: pranavats (3fba1d1b34@jabberfr.org)
[11:44:35] *** Quits: sander (~sander@user/sander) (Ping timeout: 268 seconds)
[11:45:19] *** Joins: sander (~sander@user/sander)
[11:49:33] *** Joins: rain3 (~rain3___@2a02:2f09:d30b:1300:514:bcc7:8202:1798)
[11:54:09] *** Joins: Cymew (~ante@host-90-235-68-191.mobileonline.telia.com)
[11:57:29] *** Quits: amb007 (~a_bakic@109.245.227.78) (Read error: Connection reset by peer)
[11:58:16] *** Joins: amb007 (~a_bakic@93.87.81.55)
[12:04:22] *** Quits: jimka (~user@2a01:e0a:26a:f400:c79:f12c:3584:a67d) (Ping timeout: 272 seconds)
[12:05:46] *** Joins: pve (~pve@188-67-190-189.bb.dnainternet.fi)
[12:06:13] *** Quits: selwyn_ (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[12:13:36] *** Joins: asarch (~asarch@2806:10ae:7:6d3f:2629:fba:30a3:e233)
[12:23:01] *** Joins: jimka (~user@2a01:e0a:26a:f400:c79:f12c:3584:a67d)
[12:23:13] <mfiano> pillton: You are the author of specialization-store if I recall, correct?
[12:29:10] *** Quits: gaqwas (~john@dynamic-077-007-118-176.77.7.pool.telefonica.de) (Ping timeout: 256 seconds)
[12:32:25] *** Quits: khrbt (~khrbt@user/khrbt) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[12:36:02] *** Joins: hendursa1 (~weechat@user/hendursaga)
[12:38:36] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 244 seconds)
[12:38:43] *** Parts: lisp321 (~user@80.227.170.170) (ERC (IRC client for Emacs 26.3))
[12:40:18] *** Joins: karlosz (~karlosz@router.cloyne.org)
[12:42:28] *** Joins: khrbt (~khrbt@user/khrbt)
[12:52:45] *** Quits: luna-is-here (~quassel@2a02:908:f761:2a3c::a) (Quit: luna-is-here)
[12:54:45] *** Joins: luna-is-here (~quassel@2a02:908:f761:2a3c::a)
[12:54:55] *** Joins: shka (~herr@109.231.62.239)
[12:55:52] *** Quits: elf_fortrez (~elf_fortr@adsl-72-50-4-118.prtc.net) (Ping timeout: 246 seconds)
[12:59:46] *** Quits: amb007 (~a_bakic@93.87.81.55) (Read error: Connection reset by peer)
[13:09:09] *** Joins: Qwnavery (~Qwnavery@user/qwnavery)
[13:11:43] <phoe> what is the intended use case for UIOP:DEFINE-PACKAGE's :UNINTERN option?
[13:12:00] <phoe> like, why should I prefer it over calling CL:UNINTERN in the REPL?
[13:15:35] <mfiano> The latter requires interactive use?
[13:16:16] <mfiano> I imagine it's useful in combination with the symbol merging policies of uiop:define-package
[13:17:00] *** Quits: asarch (~asarch@2806:10ae:7:6d3f:2629:fba:30a3:e233) (Quit: Leaving)
[13:17:01] <phoe> Yes, I'm thinking of it now - like, how exactly does it tie in the other functionalities
[13:17:50] <mfiano> Like, if you want to mix symbols from foo into bar and then erase all traces of bar:x that was derived from foo
[13:17:56] *** Joins: attila_lendvai (~alendvai@1F2EFD02.nat.pool.telekom.hu)
[13:18:21] <phoe> I need an example that is valid Lisp code - I can't see this just yet
[13:19:42] <phoe> uninterning a symbol that is available only via inheritance is a no-op, right?
[13:20:04] <phoe> so after (defpackage #:foo (:use) (:export #:symbol)) (uiop:define-package #:bar (:use) (:mix #:foo) (:unintern #:symbol)) it is still possible to refer to BAR::SYMBOL
[13:20:34] <phoe> so using :UNINTERN with :MIX does not seem like something useful
[13:21:06] <mfiano> :mix is not very useful with a single package designator anyway :p
[13:21:18] <phoe> doesn't matter, can be five packages instead
[13:21:54] <phoe> "uninterning a symbol that is available only via inheritance is a no-op, right?" is what I asked, and it doesn't matter if it's one or ten packages that are effectively USEd
[13:23:35] <beach> That's how I read the Common Lisp HyperSpec entry, yes.
[13:23:39] *** Joins: amb007 (~a_bakic@93.87.81.55)
[13:23:44] <mfiano> Me too
[13:23:48] <phoe> OK
[13:23:53] <mfiano> I wouldn't read too deeply into the bad code that is UIOP
[13:24:01] <mfiano> It's probably only there for symmetrical reasons
[13:24:02] <phoe> I'm reading the docstring, that is enough for me
[13:24:52] <phoe> the way I read it, DEFINE-PACKAGE is meant to define what constitutes a package, instead of what *doesn't* constitute a package
[13:25:01] <phoe> which is why :UNINTERN is puzzling for me
[13:25:48] <phoe> the only use case I can imagine is when one redefines a package, and for whatever reason wants to get rid of some symbols from it along the way
[13:25:55] <mfiano> The exceptional situations is making me scratch my head
[13:26:13] <mfiano> I thought shadowing symbols are only affected by unintern for *present* symbols
[13:26:47] <phoe> mfiano: if package BAZ uses FOO and BAR, and FOO and BAR both export a symbol named SYMBOL, and BAZ shadows SYMBOL too
[13:26:57] <phoe> if you unintern BAZ::SYMBOL then you get a package conflict
[13:27:08] <phoe> because you have FOO:SYMBOL and BAR:SYMBOL as feasible candidates
[13:27:26] <mfiano> what about the no-op?
[13:27:49] <phoe> which no-op?
[13:27:57] <mfiano> the one you asked about that we agreed upon?
[13:28:03] <phoe> if FOO exports SYMBOL and BAR uses FOO then uninterning SYMBOL from BAR is a no-op
[13:28:45] <phoe> because SYMBOL is inherited from FOO
[13:29:21] <phoe> and there is no :USE-EXCEPT-FOR option that allows you to use all exported symbols except for some
[13:29:27] *** Joins: IPmonger (~IPmonger@c-69-242-83-226.hsd1.pa.comcast.net)
[13:29:41] *** Quits: IPmonger (~IPmonger@c-69-242-83-226.hsd1.pa.comcast.net) (Remote host closed the connection)
[13:29:57] <phoe> the best you can do is shadowing, but then if you unintern the shadowed symbol you get back the inherited ones anyway
[13:30:06] <phoe> (along with possible conflicts)
[13:31:03] *** Quits: amb007 (~a_bakic@93.87.81.55) (Read error: Connection reset by peer)
[13:31:51] <mfiano> I see. To be honest I use defpackage-plus because it gives me finer control over these things
[13:31:57] *** Joins: amb007 (~a_bakic@93.87.81.55)
[13:31:58] <mfiano> Such as :inherit-except
[13:33:32] <pve> phoe: I've seen trickery like (defpackage #:my-package (:import-from #:other-package . #.(other-package:a-set-of-symbols))), maybe the :unintern option could be used there to exclude certain symbols? A little far-fetched though..
[13:37:51] <phoe> pve: I see. that would warrant a proper filter on the (a-set-of-symbols) call, it would be cleaner than importing-then-uninterning
[13:47:16] <pjb> phoe: but can't you shadow a symbol without interning a new one?
[13:47:47] <phoe> pjb: via shadowing-import?
[13:48:04] <pve> phoe: sure, although I might personally handle that kind of stuff with separate import or unintern forms after the defpackage
[13:48:25] <pjb> or :shadow or shadow, but it seems you're right, :shadow interns a new symbol…
[13:48:29] <mfiano> Problem with that is package variance errors on implementation foo
[13:48:44] <pjb> https://termbin.com/jd2w
[13:49:58] <mfiano> But on SBCL, I can't live without (setf sb-ext:*on-package-variance* '(:warn t :error nil)) in my rc
[13:54:10] *** Quits: amb007 (~a_bakic@93.87.81.55) (Read error: Connection reset by peer)
[13:55:11] *** Joins: amb007 (~a_bakic@93.87.81.55)
[14:00:41] *** Quits: Cymew (~ante@host-90-235-68-191.mobileonline.telia.com) (Ping timeout: 248 seconds)
[14:02:07] *** Quits: yitzi (~yitzi@173-27-106-188.client.mchsi.com) (Remote host closed the connection)
[14:02:27] *** Joins: yitzi (~yitzi@173-27-106-188.client.mchsi.com)
[14:05:43] *** Quits: yitzi (~yitzi@173-27-106-188.client.mchsi.com) (Client Quit)
[14:06:01] *** Joins: yitzi (~yitzi@173-27-106-188.client.mchsi.com)
[14:14:50] *** Quits: khrbt (~khrbt@user/khrbt) (Quit: Textual IRC Client: www.textualapp.com)
[14:18:24] *** Joins: fizbin (~dtm@2601:82:c380:87a:4c5d:200c:15cb:80b4)
[14:18:33] <fizbin> Is there a convenient way to destructure a cons cell as you bind it? E.g. I've got a (let* ((abcell (myfunc args)) (a (car abcell)) (b (cdr abcell))) ...) and I'm wondering if there's a way to avoid the boilerplate and somehow just bind ((a.b) (myfunc args))
[14:18:36] <pve> mfiano: I've yet to come up with a clean way of handling those package variance errors :(
[14:18:50] <phoe> clhs destructuring-bind
[14:18:50] <specbot> http://www.lispworks.com/reference/HyperSpec/Body/m_destru.htm
[14:18:53] <phoe> fizbin: ^
[14:20:01] <phoe> (destructuring-bind (a . b) (cons 42 24) ...)
[14:21:22] <phoe> pve: mfiano: well, DEFINE-PACKAGE handles package variance errors for me
[14:22:09] <fizbin> phoe: Huh. I thought I tried destructuring-bind and it wouldn't work for me...
[14:22:29] <pve> phoe: it does, but I meant while still clinging to cl:defpackage
[14:22:34] <akater[m]> fizbin: `destructuring-bind` aside, there's also `trivia` in Quicklisp
[14:22:56] <phoe> pve: oh right, yes - that's because redefining packages is completely UB
[14:23:14] <akater[m]> fizbin: but you shouldn't have any issues with destructuring-bind
[14:23:15] <phoe> so implementations can do whatever, in theory - though they try to do The Useful Thing™ instead, and that is unspecified
[14:23:23] <phoe> fizbin: (destructuring-bind (a . b) (cons 42 24) (format t "~A ~A~%" a b)) works for me
[14:23:59] <pve> phoe: right
[14:24:00] <mfiano> phoe: I don't want to depend on uiop, and require users to update asdf manually to get PLN support
[14:24:07] <mfiano> I also don't use Quicklisp anymore :)
[14:24:25] <mfiano> The above form in my rc solves all my issues with package variance though
[14:24:44] <phoe> mfiano: I see
[14:26:04] <fizbin> Ah, I see what I was doing wrong. I couldn't find any examples that destructured a cons cell so was trying to use it like let or let* and had an extra set of parens. The error with (destructuring-bind ((a . b) (cons 42 40)) (+ a b)) was indecipherable.
[14:26:56] <phoe> fizbin: well, D-B accepts 2+ arguments - the first one is the "skeleton" to destructure against, the second one is the data structure to destructure
[14:27:07] <phoe> the rest is the &body to be executed
[14:27:11] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[14:27:35] <phoe> you can't perform multiple destructurings in a single D-B like you can bind multiple variables in a LET or LET*
[14:28:52] *** Quits: tux0r (~tux0r@2a03:4000:34:5e:281e:e1ff:fe28:c3b5) (Ping timeout: 245 seconds)
[14:30:19] <pve> mfiano: I was not aware of sb-ext:*on-package-variance*, thanks!
[14:32:12] *** Quits: dsk (~dsk@user/dsk) (Ping timeout: 245 seconds)
[14:33:29] *** Joins: tux0r (~tux0r@2a03:4000:34:5e:281e:e1ff:fe28:c3b5)
[14:33:54] <mfiano> Sure thing
[14:37:29] *** Quits: amb007 (~a_bakic@93.87.81.55) (Read error: Connection reset by peer)
[14:37:36] *** Joins: selwyn (~selwyn@user/selwyn)
[14:37:38] *** Joins: amb007 (~a_bakic@net233-35-245-109.mbb.telenor.rs)
[14:37:38] *** Quits: amb007 (~a_bakic@net233-35-245-109.mbb.telenor.rs) (Read error: Connection reset by peer)
[14:37:53] *** Joins: amb007 (~a_bakic@93.87.81.55)
[14:39:15] *** Quits: attila_lendvai (~alendvai@1F2EFD02.nat.pool.telekom.hu) (Read error: Connection reset by peer)
[14:39:46] *** Joins: attila_lendvai (~alendvai@1F2EFD02.unconfigured.pool.telekom.hu)
[14:42:47] *** Quits: amb007 (~a_bakic@93.87.81.55) (Ping timeout: 268 seconds)
[14:43:58] *** Joins: amb007 (~a_bakic@net233-35-245-109.mbb.telenor.rs)
[14:44:32] <akater[m]> fizbin: clhs has an example.  You will benefit from looking at such, in general.
[14:45:30] <akater[m]> (I mean, clhs offers examples often enough)
[14:45:40] *** Joins: random-nick (~random-ni@87.116.181.197)
[14:46:53] *** Quits: kakuhen (~kakuhen@user/kakuhen) (Quit: Leaving...)
[14:48:07] *** Quits: pillton (~user@2405:b000:600:b0::36a) (Quit: ERC (IRC client for Emacs 27.2))
[14:49:24] <hayley> phoe: If you are very lazy, (destructuring-bind (pattern-for-a pattern-for-b pattern-for-c) (list a b c) ...)
[14:51:13] <fizbin> akater[m]: where do you see the example of destructuring a cons cell? I don't see that on http://www.lispworks.com/documentation/HyperSpec/Body/m_destru.htm or on http://www.lispworks.com/documentation/HyperSpec/Body/03_de.htm which it links to.
[14:51:25] <phoe> hayley: welllll, you are right
[14:52:16] <phoe> fizbin: http://www.lispworks.com/documentation/HyperSpec/Body/03_ddaaa.htm
[14:52:30] <phoe> it's not easily accessible or findable
[14:55:56] *** Quits: MichaelRaskin (~MichaelRa@ipb21b6221.dynamic.kabel-deutschland.de) (Remote host closed the connection)
[14:57:44] *** theBlack1ragon is now known as theBlackDragon
[14:57:50] <akater[m]> fizbin: The example is on the first page you linked to.  It is close enough to the beginning of the page that I see it right after `M-x hyperspec-lookup destructuring-bind`
[14:58:39] <phoe> akater[m]: I think the issue is that this example does not explicitly use the consing dot notation
[15:00:32] <fizbin> An example of how to use destructuring-bind in structures that didn't match what I was using was insufficient in letting me figure out what to use. Also, having the first form of the lambda list be itself enclosed in another level of parens led me down the wrong path.
[15:01:19] <akater[m]> Well, at least you can't confuse this with let syntax.
[15:01:41] <fizbin> Then, the linked syntax in 3.4.5 led me to conclude "oh, destructuring bind is good for other things, but not cons lists" because I can't see cons lists in the syntax there.
[15:02:14] <akater[m]> Ah, true, it should hove the less complicated example as well.
[15:03:12] *** Joins: dlowe (~dlowe@user/dlowe)
[15:03:33] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Remote host closed the connection)
[15:05:58] *** Joins: lisp123 (~lisp123@45.130.83.181)
[15:05:58] *** Quits: amb007 (~a_bakic@net233-35-245-109.mbb.telenor.rs) (Read error: Connection reset by peer)
[15:07:16] *** Quits: fizbin (~dtm@2601:82:c380:87a:4c5d:200c:15cb:80b4) (Ping timeout: 256 seconds)
[15:07:16] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[15:07:44] *** Joins: amb007 (~a_bakic@net233-35-245-109.mbb.telenor.rs)
[15:09:57] *** Quits: amb007 (~a_bakic@net233-35-245-109.mbb.telenor.rs) (Read error: Connection reset by peer)
[15:10:44] *** Joins: amb007 (~a_bakic@cable-94-189-183-212.dynamic.sbb.rs)
[15:14:02] *** Quits: frgo (~frgo@p200300deef181d00e84cc64eee962050.dip0.t-ipconnect.de) (Remote host closed the connection)
[15:14:31] *** Joins: frgo (~frgo@p200300deef181d00e84cc64eee962050.dip0.t-ipconnect.de)
[15:16:55] *** Joins: fizbin (~dtm@2601:82:c380:87a:4c5d:200c:15cb:80b4)
[15:18:13] *** Quits: fizbin (~dtm@2601:82:c380:87a:4c5d:200c:15cb:80b4) (Remote host closed the connection)
[15:18:46] *** Joins: fizbin (~dtm@2601:82:c380:87a:4c5d:200c:15cb:80b4)
[15:22:30] *** Joins: lisp123_ (~lisp123@45.130.83.181)
[15:23:48] *** Quits: lisp123 (~lisp123@45.130.83.181) (Ping timeout: 272 seconds)
[15:25:58] *** Quits: karlosz (~karlosz@router.cloyne.org) (Quit: karlosz)
[15:26:51] *** Quits: Qwnavery (~Qwnavery@user/qwnavery) (Quit: WeeChat 3.2)
[15:27:05] *** Quits: lisp123_ (~lisp123@45.130.83.181) (Ping timeout: 248 seconds)
[15:31:12] *** Quits: jimka (~user@2a01:e0a:26a:f400:c79:f12c:3584:a67d) (Ping timeout: 276 seconds)
[15:39:31] *** Joins: kevingal (~quassel@2a02:8084:4140:f300:d182:fd4:8496:53d5)
[15:46:24] *** Demosthe1ex is now known as Demosthenex
[15:53:50] *** Joins: lisp123 (~lisp123@45.130.83.181)
[15:57:15] *** Joins: jimka (~user@2a01:e0a:26a:f400:dc7b:c899:c9ab:a576)
[15:58:42] *** Quits: lisp123 (~lisp123@45.130.83.181) (Ping timeout: 272 seconds)
[16:03:02] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 245 seconds)
[16:04:30] *** Joins: Tomte (~th@p200300db9f3cfb00e45a0988ff6a4764.dip0.t-ipconnect.de)
[16:11:08] *** Quits: Xach_ (~xach@66-63-89-62.static.suscom-maine.net) (Changing host)
[16:11:08] *** Joins: Xach_ (~xach@user/xach)
[16:11:08] *** ChanServ sets mode: +o Xach_
[16:11:14] *** Xach_ is now known as Xach
[16:11:46] *** Joins: Cymew (~ante@host-90-235-68-191.mobileonline.telia.com)
[16:14:41] *** Quits: lad (~lad@user/lad) (Ping timeout: 268 seconds)
[16:23:50] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[16:25:41] *** Joins: derelict (~derelict@user/derelict)
[16:39:14] <phantomics> A question: is it simply not possible to check whether a symbol has been bound in the lexical scope? For instance, (let ((a 1)) (is-bound 'a)) would yield t, while (let ((a 1)) (is-bound 'b)) would yield false assuming there's no dynamic variable called b
[16:40:18] <beach> That's correct.  If it were possible, the compiler would be very limited in the kinds of optimizations it could do.
[16:40:41] <beach> And the creators of Common Lisp were very smart because they wanted it to be possible to write compilers that can generate very fast code.
[16:41:05] *** Joins: cosimone (~user@93-34-133-32.ip49.fastwebnet.it)
[16:41:23] <adeht> you can check it during macroexpansion time
[16:41:26] *** adeht is now known as _death
[16:41:30] *** Quits: silasfox (~sbv@xdsl-87-78-42-86.nc.de) (Quit: WeeChat 3.2)
[16:41:57] *** Joins: hafat (~hafat@95.70.167.173)
[16:42:12] <scymtym> phantomics: there is no way to inquire at runtime and no standard way in general. a semi-portable way to do it at compile-time is (let ((a 1)) (macrolet ((is-bound? (&environment env name) `(quote ,(multiple-value-list (sb-cltl2:variable-information name env))))) (is-bound? a)))
[16:42:33] <pjb> phantomics: (shadow 'let) (defmacro let ((&rest bindings) &body body)  `(cl:let ((_bound (append (mapcar (function binding-name) bindings) _bound)) ,@bindings) (flet ((is-bound (sym) (member sym _bound))) ,@body)))
[16:42:56] <phantomics> Ok, thanks, this compile-time solution could help
[16:43:24] *** Quits: hafat (~hafat@95.70.167.173) (Client Quit)
[16:44:00] *** Joins: hafat (~hafat@95.70.167.173)
[16:44:06] <phantomics> But that sb-cltl2 package only works with SBCL?
[16:44:45] <phoe> phantomics: (ql:quickload :introspect-environment)
[16:44:51] <scymtym> yes, the interface is described in "Common Lisp the Language, 2nd edition" but did not make it into the standard
[16:45:10] <yitzi> There is also trivial-cltl2 and cl-environments
[16:45:23] <scymtym> other implementations implement this interface or similar interface and, as other point out, there are portability libraries
[16:45:35] <pjb> phantomics: more exactly: https://termbin.com/uygc
[16:45:57] <pjb> phantomics: with (define-symbol-macro _bound nil)
[16:46:24] <phantomics> pjb: that link's a 404
[16:46:52] <pjb> https://termbin.com/j2mx  then?
[16:47:10] <phantomics> That one works
[16:48:02] *** Quits: amb007 (~a_bakic@cable-94-189-183-212.dynamic.sbb.rs) (Ping timeout: 272 seconds)
[16:48:12] <phantomics> Thanks, basically what I'm writing is a variant of (let) that aliases symbols in the outer scope _if_ they exist
[16:48:34] <hayley> I suppose it is necessary that is-bound-p could not be a function, as it cannot inspect the static environment of its caller.
[16:48:59] <phantomics> so, for example, (let2 ((a)) becomes (let2 ((a a)) _if_ the (let2) is inside another (let) form that assigns a value to a.
[16:49:04] <pjb> phantomics: you mean that you're writing a macro that should depend on the outer scope.
[16:49:13] *** Joins: amb007 (~a_bakic@87.116.162.186)
[16:49:16] <phantomics> pjb: correct
[16:49:49] <pjb> phantomics: macro can get a &environment parameter, but it's an opaque object, there's no (standard) way to use it to find if there's a lexical binding in it.
[16:50:41] <phantomics> So in (let ((a 1)) (let2 ((a)) (+ a 5))), the inner a is assigned the value of the outer a using the (let2) macro because a is defined in the outer scope
[16:50:42] <pjb> So you can only shadow all the operators that establish lexical bindings, and maintain a macroexpansion-time list of the bindings that are created, with a macro or function to query it.
[16:51:18] <pjb> Note this may be difficult to write correctly, because macros can be expanded multiple times, (and therefore some questions about the order of expansion may be asked).
[16:51:35] <pjb> (even in theorically they're expanded outside in, of course).
[16:51:39] <pjb> s/in/if/
[16:51:44] *** Joins: hhdave_ (~hhdave@ip212.ip-193-70-71.eu)
[16:52:24] <pjb> phantomics: and since you will have shadowed a lot of macros (and a few special operators), this will work only on code which you will have compiled  (or are compiling) with them.
[16:52:47] <phantomics> Right, I already have a system for listing assigned variables, but there are some corner case bugs to work out. Maybe it just needs a compiler pass over the full generated code
[16:52:50] *** Quits: hhdave (~hhdave@ip212.ip-193-70-71.eu) (Ping timeout: 252 seconds)
[16:52:50] *** hhdave_ is now known as hhdave
[16:53:05] <pjb> phantomics: but really, the point is that all the lexical environment is just right under your nose: it's literally written down!
[16:53:36] <pjb> So the way to do this (let ((a 1)) (let2 ((a)) (+ a 5)))  is NOT to define and write a let2 to be used inside.
[16:53:52] <phantomics> pjb: this is for my APL compiler, so these are measures to handle how APL deals with lexical variables. None of this would be necessary for writing standard CL
[16:54:14] <pjb> The right way is to write a macro such as: (rebinding-let ((a 1)) … (rebound (+ a 5)) …)
[16:54:32] <pjb> rebinding-let can expand to the outer let, and a macrolet rebound that will expand to your let2.
[16:54:42] <phantomics> I'm automatically hoisting variables and building (let) forms for them as part of compilation
[16:55:24] <pjb> More reason to avoid any shenanigans!  You're generting the code. Therefore generate the code correctly!
[16:57:56] *** Joins: nij- (~jin@2001-48F8-9021-806-0-0-0-1AD1-dynamic.midco.net)
[17:13:40] *** Quits: rgherdt (~rgherdt@2a02:8109:86c0:d8d:8186:40cc:d89:9651) (Read error: Connection reset by peer)
[17:13:57] *** Joins: rgherdt (~rgherdt@2a02:8109:86c0:d8d:8186:40cc:d89:9651)
[17:19:48] *** Quits: cosimone (~user@93-34-133-32.ip49.fastwebnet.it) (Remote host closed the connection)
[17:22:56] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 272 seconds)
[17:24:16] *** Joins: aeth (~aeth@user/aeth)
[17:27:35] *** Joins: cosimone (~user@93-34-133-32.ip49.fastwebnet.it)
[17:28:00] *** Joins: Bike (~Glossina@71.69.170.70)
[17:28:01] *** ChanServ sets mode: +o Bike
[17:30:36] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-1AD1-dynamic.midco.net) (Remote host closed the connection)
[17:34:00] *** Joins: nij- (~jin@2001-48F8-9021-806-0-0-0-1AD1-dynamic.midco.net)
[17:37:44] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-1AD1-dynamic.midco.net) (Remote host closed the connection)
[17:38:46] *** Joins: nij- (~jin@2001-48F8-9021-806-0-0-0-1AD1-dynamic.midco.net)
[17:58:54] *** Quits: ck_ (~ck@plskthx.org) (Ping timeout: 268 seconds)
[17:58:55] *** Quits: fizbin (~dtm@2601:82:c380:87a:4c5d:200c:15cb:80b4) (Ping timeout: 258 seconds)
[18:04:38] *** Quits: amb007 (~a_bakic@87.116.162.186) (Ping timeout: 256 seconds)
[18:05:03] *** Joins: ck_ (~ck@plskthx.org)
[18:05:08] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Ping timeout: 244 seconds)
[18:05:18] *** Joins: amb007 (~a_bakic@cable-94-189-183-212.dynamic.sbb.rs)
[18:05:24] *** Joins: notzmv (~zmv@user/notzmv)
[18:05:37] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[18:05:47] *** Joins: nature (~nature@mail.blazebone.com)
[18:09:22] *** Quits: hhdave (~hhdave@ip212.ip-193-70-71.eu) (Ping timeout: 268 seconds)
[18:09:30] *** Joins: hhdave_ (~hhdave@ip212.ip-193-70-71.eu)
[18:10:49] *** Quits: nature (~nature@mail.blazebone.com) (Ping timeout: 248 seconds)
[18:12:11] *** Joins: Inline (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431)
[18:13:55] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Ping timeout: 244 seconds)
[18:18:37] *** Quits: jimka (~user@2a01:e0a:26a:f400:dc7b:c899:c9ab:a576) (Ping timeout: 268 seconds)
[18:18:39] *** Quits: hafat (~hafat@95.70.167.173) (Quit: Leaving)
[18:22:57] *** Joins: jimka (~user@2a01:e0a:26a:f400:dc7b:c899:c9ab:a576)
[18:25:40] *** Joins: jans1 (~Thunderbi@193.138.218.211)
[18:26:17] *** Quits: attila_lendvai (~alendvai@1F2EFD02.unconfigured.pool.telekom.hu) (Ping timeout: 248 seconds)
[18:26:20] *** Quits: jans (~Thunderbi@185.213.154.244) (Ping timeout: 252 seconds)
[18:26:20] *** jans1 is now known as jans
[18:26:42] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[18:52:20] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Quit: ERC (IRC client for Emacs 27.2))
[18:53:04] *** Quits: hendursa1 (~weechat@user/hendursaga) (Quit: hendursa1)
[18:53:33] *** Joins: hendursaga (~weechat@user/hendursaga)
[18:55:38] <Josh_2> Is quicklisp library search working on the website?
[18:55:42] <Josh_2> it timedout for me
[18:59:36] *** Joins: lisp123 (~lisp123@45.130.83.181)
[19:01:44] *** Quits: amb007 (~a_bakic@cable-94-189-183-212.dynamic.sbb.rs) (Read error: Connection reset by peer)
[19:03:31] *** Joins: amb007 (~a_bakic@cable-94-189-183-212.dynamic.sbb.rs)
[19:04:05] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Remote host closed the connection)
[19:04:22] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[19:07:37] *** Quits: amb007 (~a_bakic@cable-94-189-183-212.dynamic.sbb.rs) (Ping timeout: 245 seconds)
[19:08:09] *** Joins: amb007 (~a_bakic@net233-35-245-109.mbb.telenor.rs)
[19:12:12] *** Quits: waleee (~waleee@h-98-128-228-119.NA.cust.bahnhof.se) (Ping timeout: 245 seconds)
[19:14:08] *** Quits: Vultyre (~vultyre@user/vultyre) (Quit: ZNC 1.7.5+deb4 - https://znc.in)
[19:14:09] *** Quits: amb007 (~a_bakic@net233-35-245-109.mbb.telenor.rs) (Read error: Connection reset by peer)
[19:14:18] *** Joins: amb007 (~a_bakic@87.116.175.6)
[19:16:08] *** Joins: Vultyre (~vultyre@user/vultyre)
[19:23:15] *** Quits: amb007 (~a_bakic@87.116.175.6) (Ping timeout: 258 seconds)
[19:23:49] *** Joins: amb007 (~a_bakic@net233-35-245-109.mbb.telenor.rs)
[19:25:57] *** Quits: retropikel (~retropike@2001:999:200:1f35:c999:987a:90bc:eea) (Ping timeout: 245 seconds)
[19:26:55] *** Quits: Vultyre (~vultyre@user/vultyre) (Quit: ZNC 1.7.5+deb4 - https://znc.in)
[19:27:43] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[19:29:53] *** Joins: dlowe_ (~dlowe@146.115.166.6)
[19:30:27] *** Joins: Vultyre (~vultyre@user/vultyre)
[19:31:33] *** Quits: Vultyre (~vultyre@user/vultyre) (Client Quit)
[19:31:33] *** Quits: amb007 (~a_bakic@net233-35-245-109.mbb.telenor.rs) (Read error: Connection reset by peer)
[19:31:44] *** Joins: amb007 (~a_bakic@cable-94-189-183-212.dynamic.sbb.rs)
[19:34:12] *** Quits: copec (~copec@home.unaen.org) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[19:34:57] *** Joins: santiago` (~user@90.167.182.121)
[19:35:10] *** Joins: copec (~copec@home.unaen.org)
[19:36:18] *** Quits: santiagopim (~user@90.166.59.133) (Ping timeout: 240 seconds)
[19:36:37] *** Joins: retropikel (~retropike@83-245-241-195-nat-p.elisa-mobile.fi)
[19:38:24] <Xach> Josh_2: what website?
[19:39:20] *** Joins: Vultyre (~vultyre@user/vultyre)
[19:39:53] *** Quits: santiago` (~user@90.167.182.121) (Ping timeout: 248 seconds)
[19:51:39] *** Parts: pranavats (3fba1d1b34@jabberfr.org) ()
[19:57:34] <yitzi> Probably the quickdocs one. It was defunct for a bit and now it is back up with a refresh. Maybe they changed their search query stuff?
[19:59:10] <yitzi> Xach: Looks the quickdoc search query changed from http://www.quickdocs.org/search?&q=pkg to https://quickdocs.org/-/search?q=pkg
[19:59:48] *** Joins: srhm (~ascii@user/srhm)
[20:12:45] <dilated_dinosaur> hey there! quick question that i am losing my mind over. in CL (in emacs) how do you put in a newline or carrage return in a string like "hello world\n" in C?
[20:13:03] <Josh_2> Xach: the quicklisp website
[20:13:10] <beach> dilated_dinosaur: Just put a newline in there.
[20:13:26] <Josh_2> Xach: https://www.quicklisp.org/beta/releases.html
[20:13:39] <Josh_2> It just spins for me
[20:13:44] <Josh_2> (when I search)
[20:14:00] <beach> dilated_dinosaur: If you don't want that, do #.(format nil "first~%second")
[20:14:32] *** Joins: attila_lendvai (~alendvai@1F2EFD02.unconfigured.pool.telekom.hu)
[20:16:26] *** Joins: pranavats (3fba1d1b34@jabberfr.org)
[20:17:51] <dilated_dinosaur> huh thanks. this is too much of a pain because i don't know if i am fighting emacs, the repl or CL
[20:18:34] <beach> Pleasure.
[20:20:52] <lotuseater> beach: I thought also about telling TERPRI, but I think this isn't so much recommended. :)
[20:21:29] *** Quits: Cymew (~ante@host-90-235-68-191.mobileonline.telia.com) (Ping timeout: 248 seconds)
[20:21:55] <yitzi> Josh_2: the quicklisp search probably links to quickdocs.org which just changed their search url. You can go directly to quickdocs.org to search if you want.
[20:22:32] <beach> lotuseater: How would you structure that?
[20:22:33] <Josh_2> I already found what I was looking for, thanks though
[20:22:48] *** Quits: attila_lendvai (~alendvai@1F2EFD02.unconfigured.pool.telekom.hu) (Ping timeout: 272 seconds)
[20:23:16] <lotuseater> Ah sure. It wouldn't help.
[20:24:31] <lotuseater> Your advice with #.(format nil ...) is also helpful when writing docstrings one wants to have formatted in the source but also not too much spaces when looking them up.
[20:25:50] <beach> Indeed.  And then I use ~@<newline> to separate the lines.
[20:26:50] <lotuseater> Will try that.
[20:29:04] *** Quits: jimka (~user@2a01:e0a:26a:f400:dc7b:c899:c9ab:a576) (Ping timeout: 272 seconds)
[20:38:19] <Xach> thanks
[20:38:49] <lotuseater> I see, without the @ it doesn't trigger when filling in more newlines.
[20:40:28] <beach> The @ modifier eliminates initial whitespace on the next line, so that all lines are aligned in the leftmost column.
[20:42:32] <lotuseater> Good to know, another thing I wasn't aware of. FORMAT has so many options and possibilities.
[20:44:06] <beach> Yeah.
[20:44:36] <lotuseater> CLHS 22.3.9.3 covers that too I see now.
[20:55:20] *** Parts: nij- (~jin@2001-48F8-9021-806-0-0-0-1AD1-dynamic.midco.net) (#commonlisp)
[20:58:44] *** Joins: jimka (~user@2a01:e0a:26a:f400:dc7b:c899:c9ab:a576)
[21:08:58] *** Quits: amb007 (~a_bakic@cable-94-189-183-212.dynamic.sbb.rs) (Ping timeout: 272 seconds)
[21:09:08] *** Joins: amb007 (~a_bakic@net233-35-245-109.mbb.telenor.rs)
[21:09:26] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[21:17:29] *** Quits: retropikel (~retropike@83-245-241-195-nat-p.elisa-mobile.fi) (Ping timeout: 248 seconds)
[21:18:03] *** Quits: Tomte (~th@p200300db9f3cfb00e45a0988ff6a4764.dip0.t-ipconnect.de) (Quit: Leaving)
[21:18:32] *** Quits: jimka (~user@2a01:e0a:26a:f400:dc7b:c899:c9ab:a576) (Ping timeout: 272 seconds)
[21:21:56] *** Joins: jimka (~user@2a01:e0a:26a:f400:dc7b:c899:c9ab:a576)
[21:22:30] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 244 seconds)
[21:26:11] *** Joins: retropikel (~retropike@2001:999:200:1f35:f194:c1b5:4044:270e)
[21:33:42] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[21:37:24] *** Joins: lad (~lad@user/lad)
[21:48:04] *** Parts: contrapunctus (a75f5b1571@2a00:c70:1:178:170:40:189:1) ()
[21:48:41] *** Quits: pve (~pve@188-67-190-189.bb.dnainternet.fi) (Quit: leaving)
[21:49:49] *** Joins: Fare (~fare@2601:184:4a7f:995c::871)
[21:49:53] *** Joins: fizbin (~fizbin@c-73-33-197-160.hsd1.nj.comcast.net)
[21:53:02] *** Joins: contrapunctus (a75f5b1571@2a00:c70:1:178:170:40:189:1)
[21:58:26] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 272 seconds)
[22:15:36] <Josh_2> With sly which command takes me to the source for a function?
[22:22:00] *** Quits: jimka (~user@2a01:e0a:26a:f400:dc7b:c899:c9ab:a576) (Ping timeout: 276 seconds)
[22:22:01] *** Quits: Inline (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431) (Quit: Leaving)
[22:22:37] *** Quits: amb007 (~a_bakic@net233-35-245-109.mbb.telenor.rs) (Read error: Connection reset by peer)
[22:23:07] *** Joins: amb007 (~a_bakic@93-87-177-82.dynamic.isp.telekom.rs)
[22:28:07] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 244 seconds)
[22:28:14] *** Joins: gaqwas (~john@dynamic-077-007-118-176.77.7.pool.telefonica.de)
[22:30:05] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[22:30:24] *** Joins: notzmv (~zmv@user/notzmv)
[22:31:13] <ck_> I'd guess C-]
[22:33:00] *** Quits: amb007 (~a_bakic@93-87-177-82.dynamic.isp.telekom.rs) (Ping timeout: 258 seconds)
[22:33:01] <ck_> oh, that was a slimv guess, sorry.  Josh_2: M-.
[22:34:09] *** Joins: amb007 (~a_bakic@net233-35-245-109.mbb.telenor.rs)
[22:46:54] *** Joins: fizbin_ (~dtm@2601:82:c380:87a:4c5d:200c:15cb:80b4)
[22:47:30] *** Joins: jimka (~user@2a01:e0a:26a:f400:dc7b:c899:c9ab:a576)
[22:47:56] *** Quits: fizbin (~fizbin@c-73-33-197-160.hsd1.nj.comcast.net) (Quit: Leaving...)
[22:48:29] *** fizbin_ is now known as fizbin
[22:49:56] *** Quits: fizbin (~dtm@2601:82:c380:87a:4c5d:200c:15cb:80b4) (Client Quit)
[22:50:37] *** Joins: fizbin (~dtm@2601:82:c380:87a:4c5d:200c:15cb:80b4)
[22:50:55] *** eta is now known as 077AACRPE
[22:52:04] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[22:53:00] *** Joins: karlosz (~karlosz@router.cloyne.org)
[22:53:51] *** 077AACRPE is now known as eta
[22:55:09] *** Quits: rain3 (~rain3___@2a02:2f09:d30b:1300:514:bcc7:8202:1798) (Ping timeout: 276 seconds)
[23:02:16] *** Quits: lisp123 (~lisp123@45.130.83.181) (Remote host closed the connection)
[23:02:58] *** Joins: lisp123 (~lisp123@45.130.83.181)
[23:04:43] *** Quits: karlosz (~karlosz@router.cloyne.org) (Quit: karlosz)
[23:06:57] *** Joins: pve (~pve@188-67-190-189.bb.dnainternet.fi)
[23:07:21] *** Quits: lisp123 (~lisp123@45.130.83.181) (Ping timeout: 248 seconds)
[23:10:29] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 244 seconds)
[23:10:29] *** Quits: amb007 (~a_bakic@net233-35-245-109.mbb.telenor.rs) (Read error: Connection reset by peer)
[23:10:42] *** Joins: amb007 (~a_bakic@cable-94-189-183-212.dynamic.sbb.rs)
[23:15:10] *** Quits: amb007 (~a_bakic@cable-94-189-183-212.dynamic.sbb.rs) (Ping timeout: 256 seconds)
[23:15:12] *** Quits: yitzi (~yitzi@173-27-106-188.client.mchsi.com) (Quit: Leaving)
[23:15:14] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 268 seconds)
[23:15:46] *** Joins: zephyr (~alandiper@ec2-34-230-252-114.compute-1.amazonaws.com)
[23:16:40] *** Joins: amb007 (~a_bakic@cable-94-189-183-212.dynamic.sbb.rs)
[23:17:08] *** Joins: waleee (~waleee@h-98-128-228-119.NA.cust.bahnhof.se)
[23:21:26] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[23:22:04] <lotuseater> Good to know, someone told me about a special rule when using (setq var thing) and VAR is a symbol macro the setq works like setf.
[23:25:36] *** Quits: fourier (~fourier@customer-89-255-226-149.stosn.net) (Quit: leaving)
[23:34:04] *** Quits: fizbin (~dtm@2601:82:c380:87a:4c5d:200c:15cb:80b4) (Ping timeout: 272 seconds)
[23:41:22] *** Joins: fizbin (~dtm@2601:82:c380:87a:4c5d:200c:15cb:80b4)
[23:42:39] *** Joins: lisp123 (~lisp123@45.130.83.181)
[23:44:04] *** Quits: dlowe_ (~dlowe@146.115.166.6) (Remote host closed the connection)
[23:45:12] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 276 seconds)
[23:46:43] *** Joins: aeth (~aeth@user/aeth)
[23:47:28] *** Quits: lisp123 (~lisp123@45.130.83.181) (Ping timeout: 256 seconds)
[23:49:51] *** Joins: yitzi (~yitzi@173-27-106-188.client.mchsi.com)
[23:51:00] *** Quits: jimka (~user@2a01:e0a:26a:f400:dc7b:c899:c9ab:a576) (Ping timeout: 268 seconds)
[23:51:37] *** Joins: lisp123 (~lisp123@45.130.83.181)
[23:55:57] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 244 seconds)
[23:56:58] *** Quits: lisp123 (~lisp123@45.130.83.181) (Ping timeout: 268 seconds)
[23:57:30] *** Quits: fizbin (~dtm@2601:82:c380:87a:4c5d:200c:15cb:80b4) (Ping timeout: 272 seconds)
[23:59:32] *** Joins: nij- (~jin@2001-48F8-9021-806-0-0-0-1AD1-dynamic.midco.net)
