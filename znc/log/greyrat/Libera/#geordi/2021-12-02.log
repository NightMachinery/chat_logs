[00:33:39] *** Joins: badone (~badone@209.132.189.152)
[07:07:58] *** Joins: great_taste (~great_tas@user/great-taste/x-5798414)
[08:40:08] *** Quits: badone (~badone@209.132.189.152) (Quit: ZNC 1.7.5 - https://znc.in)
[09:34:29] <graphitemaster> << ((1 << 0) | (1 << 1))
[09:34:29] <geordi> 3
[09:34:48] *** Quits: great_taste (~great_tas@user/great-taste/x-5798414) (Quit: Client closed)
[09:40:24] <graphitemaster> << (1 << 3)
[09:40:25] <geordi> 8
[14:14:01] <graphitemaster> << (1 << 5)
[14:14:02] <geordi> 32
[14:14:28] <graphitemaster> << ((1 << 2) | (1 << 3))
[14:14:28] <geordi> 12
[17:55:39] <graphitemaster> << (1 << 2)
[17:55:39] <geordi> 4
[17:55:41] <graphitemaster> << (1 << 3)
[17:55:42] <geordi> 8
[20:17:36] <GyrosGeier> << (1 << 32)
[20:17:37] <geordi> warning: left shift count >= width of type
[20:29:21] *** Joins: great_taste (~great_tas@user/great-taste/x-5798414)
[21:03:03] <CarloWood> { } struct Foo { init i = 0; array<vector<function<void()>>, 16> a; void add(function<void()> f) { a[i].emplace_back(f); } void event() { i = (i + 1) % 16; for (auto&& f : a[i]) f(); a[i].clear(); } };
[21:03:03] <geordi> error: 'init' does not name a type; did you mean 'int'? (fix known)
[21:03:16] <CarloWood> { } struct Foo { int i = 0; array<vector<function<void()>>, 16> a; void add(function<void()> f) { a[i].emplace_back(f); } void event() { i = (i + 1) % 16; for (auto&& f : a[i]) f(); a[i].clear(); } };
[21:03:17] <geordi>  
[21:05:00] <CarloWood> { Foo foo; foo.add([]{ cout << "OK"; }, 4); for (int n = 0; n < 32; ++n) foo.event(); } struct Foo { int i = 0; array<vector<function<void()>>, 16> a; void add(function<void()> f) { a[i].emplace_back(f); } void event() { i = (i + 1) % 16; for (auto&& f : a[i]) f(); a[i].clear(); } };
[21:05:01] <geordi> error: no matching function for call to 'Foo::add(main(int, char**)::<lambda()>, int)'
[21:05:36] <CarloWood> { Foo foo; foo.add([]{ cout << "OK"; }, 4); for (int n = 0; n < 32; ++n) foo.event(); } struct Foo { int i = 0; array<vector<function<void()>>, 16> a; void add(function<void()> f, int n) { a[(i + n) % 16].emplace_back(f); } void event() { i = (i + 1) % 16; for (auto&& f : a[i]) f(); a[i].clear(); } };
[21:05:36] <geordi> OK
[21:06:21] <CarloWood> { Foo foo; foo.add([]{ cout << "4"; }, 4); for (int n = 0; n < 32; ++n) { cout << '!'; foo.event(); } } struct Foo { int i = 0; array<vector<function<void()>>, 16> a; void add(function<void()> f, int n) { a[(i + n) % 16].emplace_back(f); } void event() { i = (i + 1) % 16; for (auto&& f : a[i]) f(); a[i].clear(); } };
[21:06:22] <geordi> !!!!4!!!!!!!!!!!!!!!!!!!!!!!!!!!!
[21:07:23] <CarloWood> { Foo foo; foo.add([]{ cout << "4"; }, 4); for (int k = 0; k < 3; ++k) foo.add([]{ cout << "13"; }, 13); for (int n = 0; n < 32; ++n) { cout << '!'; foo.event(); } } struct Foo { int i = 0; array<vector<function<void()>>, 16> a; void add(function<void()> f, int n) { a[(i + n) % 16].emplace_back(f); } void event() { i = (i + 1) % 16; for (auto&& f : a[i]) f(); a[i].clear(); } };
[21:07:23] <geordi> !!!!4!!!!!!!!!131313!!!!!!!!!!!!!!!!!!!
