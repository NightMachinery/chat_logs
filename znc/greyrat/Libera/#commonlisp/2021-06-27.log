[00:03:31] *** Joins: lisp123 (~lisp123@5.30.23.247)
[00:05:30] *** Quits: dsk (~dsk@user/dsk) (Ping timeout: 240 seconds)
[00:08:04] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 250 seconds)
[00:08:25] *** Joins: lisp123 (~lisp123@5.30.23.247)
[00:11:00] *** Quits: heisig (~heisig@p57942813.dip0.t-ipconnect.de) (Quit: Leaving)
[00:29:04] *** Quits: char (~Srain@c-73-232-118-40.hsd1.tx.comcast.net) (Ping timeout: 258 seconds)
[00:38:40] *** Quits: treflip (~user@95.79.32.99) (Remote host closed the connection)
[00:45:00] *** Quits: shka (~herr@109.231.62.239) (Ping timeout: 244 seconds)
[00:59:21] *** Quits: aleamb (~aleamb@81.61.187.171.dyn.user.ono.com) (Ping timeout: 272 seconds)
[01:03:03] *** Joins: char (~Srain@c-73-232-118-40.hsd1.tx.comcast.net)
[01:18:17] *** Joins: akoana (~ah@user/akoana)
[01:23:11] <Josh_2> Thanks pjb
[01:24:06] *** Quits: Inline (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431) (Remote host closed the connection)
[01:24:54] *** Joins: Inline (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431)
[01:25:18] *** Quits: Inline (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431) (Remote host closed the connection)
[01:26:47] *** Quits: cage (~cage@dynamic-adsl-78-15-34-62.clienti.tiscali.it) (Quit: rcirc on GNU Emacs 27.1)
[01:27:06] *** Joins: Inline (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431)
[01:29:16] *** Quits: Inline (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431) (Remote host closed the connection)
[01:29:21] *** Joins: Inline_ (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431)
[01:29:23] *** Quits: Inline_ (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431) (Remote host closed the connection)
[01:30:07] *** Joins: Inline (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431)
[01:36:37] *** Joins: kakuhen (~kakuhen@user/kakuhen)
[01:44:10] *** Joins: lad_ (~lad@user/lad)
[01:44:26] *** Quits: lad (~lad@user/lad) (Read error: Connection reset by peer)
[01:56:39] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[01:57:11] *** Joins: lisp123 (~lisp123@5.30.23.247)
[02:01:56] *** Quits: gigamonkey (~user@135-180-44-14.fiber.dynamic.sonic.net) (Remote host closed the connection)
[02:02:04] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 265 seconds)
[02:02:11] *** Joins: gigamonkey (~user@135-180-44-14.fiber.dynamic.sonic.net)
[02:05:21] *** Joins: trocado (~trocado@bl18-243-251.dsl.telepac.pt)
[02:10:14] *** Joins: selwyn (~selwyn@user/selwyn)
[02:23:36] *** Joins: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[02:25:22] *** Joins: gigamonk` (~user@135-180-44-14.fiber.dynamic.sonic.net)
[02:26:56] *** Quits: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 252 seconds)
[02:27:12] *** Quits: gigamonkey (~user@135-180-44-14.fiber.dynamic.sonic.net) (Ping timeout: 265 seconds)
[02:30:06] *** Joins: lisp123 (~lisp123@5.30.23.247)
[02:31:43] *** Joins: utis (~utis@cm-84.214.179.98.getinternet.no)
[02:38:09] *** Quits: char (~Srain@c-73-232-118-40.hsd1.tx.comcast.net) (Ping timeout: 244 seconds)
[02:39:42] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 244 seconds)
[02:43:11] *** Joins: char (~Srain@2601:2c3:867f:e810:d001:caf1:1547:6810)
[02:47:47] *** Joins: IAmRasputin (~ryan.gann@209.6.125.193)
[02:52:20] *** Quits: IAmRasputin (~ryan.gann@209.6.125.193) (Ping timeout: 265 seconds)
[02:55:55] *** Joins: aleamb (~aleamb@81.61.187.171.dyn.user.ono.com)
[02:58:36] *** Quits: derelict (~derelict@user/derelict) (Quit: WeeChat 3.2)
[03:00:08] *** Quits: frgo (~frgo@p200300deef27d700957853a548a7fa67.dip0.t-ipconnect.de) (Remote host closed the connection)
[03:00:36] *** Joins: frgo (~frgo@p200300deef27d700957853a548a7fa67.dip0.t-ipconnect.de)
[03:03:51] *** Joins: [deleted] (~livoreno@user/notzmv)
[03:05:23] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Ping timeout: 265 seconds)
[03:06:03] *** Quits: livoreno (~livoreno@user/notzmv) (Ping timeout: 244 seconds)
[03:06:06] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[03:14:30] *** Joins: lisp123 (~lisp123@5.30.23.247)
[03:18:33] *** Quits: sjl (~sjl@cpe-66-66-5-59.rochester.res.rr.com) (Quit: WeeChat 2.2-dev)
[03:19:00] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 252 seconds)
[03:19:47] *** Joins: lisp123 (~lisp123@5.30.23.247)
[03:20:51] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[03:21:14] *** Quits: eta (~eta@chat.i.eta.st) (Ping timeout: 244 seconds)
[03:25:14] *** Quits: varjag (~user@ti0040a400-5479.bb.online.no) (Ping timeout: 268 seconds)
[03:26:51] *** Joins: lisp123 (~lisp123@5.30.23.247)
[03:29:19] *** Joins: eta (~eta@chat.i.eta.st)
[03:30:30] *** Quits: pve (~pve@178-55-4-2.bb.dnainternet.fi) (Quit: leaving)
[03:30:51] *** Quits: char (~Srain@2601:2c3:867f:e810:d001:caf1:1547:6810) (Ping timeout: 244 seconds)
[03:31:18] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 250 seconds)
[03:44:23] *** Quits: bhaible (~bruno@dslb-088-068-034-084.088.068.pools.vodafone-ip.de) (Remote host closed the connection)
[03:45:22] *** Joins: bhaible (~bruno@dslb-088-068-034-084.088.068.pools.vodafone-ip.de)
[03:49:16] *** Quits: makomo (~makomo@user/makomo) (Quit: WeeChat 3.0.1)
[03:50:56] *** Quits: bhaible (~bruno@dslb-088-068-034-084.088.068.pools.vodafone-ip.de) (Remote host closed the connection)
[03:51:20] *** Joins: bhaible (~bruno@dslb-088-068-034-084.088.068.pools.vodafone-ip.de)
[04:00:22] *** Quits: bhaible (~bruno@dslb-088-068-034-084.088.068.pools.vodafone-ip.de) (Remote host closed the connection)
[04:00:46] *** Joins: bhaible (~bruno@dslb-088-068-034-084.088.068.pools.vodafone-ip.de)
[04:02:55] *** Quits: gigamonk` (~user@135-180-44-14.fiber.dynamic.sonic.net) (Remote host closed the connection)
[04:03:08] *** Joins: gigamonk` (~user@135-180-44-14.fiber.dynamic.sonic.net)
[04:05:14] *** Joins: lisp123 (~lisp123@5.30.23.247)
[04:08:50] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[04:15:57] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 265 seconds)
[04:25:49] *** Quits: bhaible (~bruno@dslb-088-068-034-084.088.068.pools.vodafone-ip.de) (Remote host closed the connection)
[04:26:11] *** Joins: bhaible (~bruno@dslb-088-068-034-084.088.068.pools.vodafone-ip.de)
[04:27:10] *** Quits: klltkr_ (~klltkr@2a00:23c5:d198:ad01:ae9:a7bd:1f6f:477e) (Read error: Connection reset by peer)
[04:27:27] *** Joins: klltkr_ (~klltkr@2a00:23c5:d198:ad01:ae9:a7bd:1f6f:477e)
[04:28:10] *** Joins: char (~Srain@2601:2c3:867f:e810:d001:caf1:1547:6810)
[04:36:37] *** Joins: derelict (~derelict@user/derelict)
[04:49:44] *** Quits: taiju (~taiju@M014013236064.v4.enabler.ne.jp) (Ping timeout: 258 seconds)
[04:51:23] *** Joins: lisp123 (~lisp123@5.30.23.247)
[04:53:27] *** Quits: bhaible (~bruno@dslb-088-068-034-084.088.068.pools.vodafone-ip.de) (Remote host closed the connection)
[04:53:49] *** Joins: bhaible (~bruno@dslb-088-068-034-084.088.068.pools.vodafone-ip.de)
[04:56:06] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 244 seconds)
[04:59:08] *** Quits: char (~Srain@2601:2c3:867f:e810:d001:caf1:1547:6810) (Ping timeout: 272 seconds)
[05:03:26] *** Joins: taiju (~taiju@M014013236064.v4.enabler.ne.jp)
[05:08:17] *** Joins: char (~Srain@c-73-232-118-40.hsd1.tx.comcast.net)
[05:15:23] *** Quits: bhaible (~bruno@dslb-088-068-034-084.088.068.pools.vodafone-ip.de) (Remote host closed the connection)
[05:15:44] *** Joins: bhaible (~bruno@dslb-088-068-034-084.088.068.pools.vodafone-ip.de)
[05:18:29] *** Quits: random-nick (~random-ni@87.116.177.254) (Ping timeout: 258 seconds)
[05:20:45] *** Quits: bhaible (~bruno@dslb-088-068-034-084.088.068.pools.vodafone-ip.de) (Remote host closed the connection)
[05:21:08] *** Joins: bhaible (~bruno@dslb-088-068-034-084.088.068.pools.vodafone-ip.de)
[05:29:08] *** Quits: bhaible (~bruno@dslb-088-068-034-084.088.068.pools.vodafone-ip.de) (Remote host closed the connection)
[05:29:32] *** Joins: bhaible (~bruno@dslb-088-068-034-084.088.068.pools.vodafone-ip.de)
[05:32:53] *** Quits: char (~Srain@c-73-232-118-40.hsd1.tx.comcast.net) (Ping timeout: 268 seconds)
[06:09:26] *** Quits: klltkr_ (~klltkr@2a00:23c5:d198:ad01:ae9:a7bd:1f6f:477e) (Ping timeout: 272 seconds)
[06:16:30] *** Quits: bhaible (~bruno@dslb-088-068-034-084.088.068.pools.vodafone-ip.de) (Remote host closed the connection)
[06:16:53] *** Joins: bhaible (~bruno@dslb-088-068-034-084.088.068.pools.vodafone-ip.de)
[06:20:50] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 272 seconds)
[06:30:42] *** Joins: bilegeek (~bilegeek@2600:1008:b015:3e96:6f34:1a42:6ac5:3b86)
[06:49:24] *** Joins: prxq_ (~quassel@x4dbd047f.dyn.telefonica.de)
[06:53:10] *** Quits: prxq (~quassel@x4db6ce7a.dyn.telefonica.de) (Ping timeout: 258 seconds)
[07:10:15] *** Joins: IAmRasputin (~ryan.gann@209.6.125.193)
[07:14:47] *** Quits: IAmRasputin (~ryan.gann@209.6.125.193) (Ping timeout: 265 seconds)
[07:19:27] *** Quits: taiju (~taiju@M014013236064.v4.enabler.ne.jp) (Remote host closed the connection)
[07:19:43] *** Joins: taiju (~taiju@240b:253:ec40:2400:654f:7566:b735:5f06)
[07:23:00] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Ping timeout: 244 seconds)
[07:25:02] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[07:31:52] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-10-70-54-112-49.dsl.bell.ca) (Read error: Connection reset by peer)
[07:37:17] <beach> Good morning everyone!
[07:38:44] *** Quits: derelict (~derelict@user/derelict) (Ping timeout: 250 seconds)
[07:48:02] *** Joins: beach` (~user@2a01:cb19:150:3400:8499:31f5:d834:225d)
[07:52:19] *** Quits: beach (~user@2a01:cb19:150:3400:a1fa:cc82:d570:b580) (Ping timeout: 268 seconds)
[07:52:30] *** beach` is now known as beach
[07:52:39] *** ChanServ sets mode: +o beach
[07:54:13] *** beach sets mode: -o beach
[08:00:10] *** Quits: akoana (~ah@user/akoana) (Quit: leaving)
[08:01:53] *** Joins: dsk (~dsk@user/dsk)
[08:10:00] *** Joins: lisp123 (~lisp123@5.30.23.247)
[08:10:31] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[08:10:51] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 265 seconds)
[08:11:15] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[08:11:44] *** Lord_of_Life_ is now known as Lord_of_Life
[08:15:48] *** Joins: lisp123 (~lisp123@5.30.23.247)
[08:19:21] *** Joins: yp (~yp@113.116.20.116)
[08:19:44] *** yp is now known as Guest7506
[08:20:04] *** Quits: Guest7593 (~yp@113.88.112.40) (Ping timeout: 246 seconds)
[08:20:11] *** Joins: aeth_ (~aeth@user/aeth)
[08:21:14] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 268 seconds)
[08:22:12] *** Quits: [deleted] (~livoreno@user/notzmv) (Read error: Connection reset by peer)
[08:22:31] *** Joins: livoreno (~livoreno@user/notzmv)
[08:32:40] *** Quits: hendursaga (~weechat@user/hendursaga) (Remote host closed the connection)
[08:33:06] *** Joins: hendursaga (~weechat@user/hendursaga)
[08:35:08] *** Joins: char (~Srain@c-73-232-118-40.hsd1.tx.comcast.net)
[08:42:57] *** Joins: phantomics (~phantomic@71-218-246-207.hlrn.qwest.net)
[08:45:38] *** Joins: lisp123 (~lisp123@5.30.23.247)
[09:04:01] *** Quits: Mandus (~aasmundo@0.51-175-33.customer.lyse.net) (Ping timeout: 265 seconds)
[09:04:24] *** Joins: Mandus (~aasmundo@85.112.154.250)
[09:07:12] *** Quits: lad_ (~lad@user/lad) (Ping timeout: 244 seconds)
[09:17:41] *** Quits: Mandus (~aasmundo@85.112.154.250) (Ping timeout: 258 seconds)
[09:19:43] *** Joins: Mandus (~aasmundo@0.51-175-33.customer.lyse.net)
[09:29:41] *** Joins: lad_ (~lad@user/lad)
[09:32:01] *** Joins: IAmRasputin (~ryan.gann@209.6.125.193)
[09:36:53] *** Quits: IAmRasputin (~ryan.gann@209.6.125.193) (Ping timeout: 265 seconds)
[09:49:07] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 258 seconds)
[09:55:03] *** Joins: sjl (~sjl@cpe-66-66-5-59.rochester.res.rr.com)
[10:05:12] *** Quits: aeth (~Michael@user/aeth) (Quit: ...)
[10:10:08] *** Joins: wilfred (uid159@id-159.highgate.irccloud.com)
[10:20:21] *** Joins: aeth (~aeth@user/aeth)
[10:26:40] *** Quits: char (~Srain@c-73-232-118-40.hsd1.tx.comcast.net) (Ping timeout: 265 seconds)
[10:35:30] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 258 seconds)
[10:39:03] *** Joins: aeth (~aeth@user/aeth)
[11:04:20] <susam> beach: Good morning!
[11:04:25] <susam> Good morning, everyone!
[11:06:43] *** Quits: taiju (~taiju@240b:253:ec40:2400:654f:7566:b735:5f06) (Ping timeout: 272 seconds)
[11:11:56] <beach> Hello susam.
[11:14:30] *** Joins: taiju (~taiju@M014013236064.v4.enabler.ne.jp)
[11:32:24] *** Quits: lad_ (~lad@user/lad) (Ping timeout: 265 seconds)
[11:38:19] *** Joins: varjag (~user@ti0040a400-5479.bb.online.no)
[11:39:50] *** Joins: treflip (~user@95.79.32.99)
[11:45:02] *** Joins: selwyn (~selwyn@user/selwyn)
[11:49:54] *** Joins: shka (~herr@109.231.62.239)
[11:55:27] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[12:12:33] *** Joins: pve (~pve@188-67-197-198.bb.dnainternet.fi)
[12:13:56] *** Quits: blihp (~blihp@c-68-43-233-92.hsd1.mi.comcast.net) (Quit: Leaving)
[12:14:49] *** Quits: bilegeek (~bilegeek@2600:1008:b015:3e96:6f34:1a42:6ac5:3b86) (Quit: Leaving)
[12:16:07] *** Joins: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[12:19:53] *** Quits: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 268 seconds)
[12:24:12] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Ping timeout: 268 seconds)
[12:24:39] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[12:29:21] *** Quits: varjag (~user@ti0040a400-5479.bb.online.no) (Ping timeout: 258 seconds)
[12:33:15] <coat> Is there a function that can test if all characters of a string are digits?
[12:34:26] <aeth> (every #'digit-char-p "1234")
[12:34:50] <beach> So, no. :)
[12:35:04] <coat> aeth: thanks
[12:35:26] <coat> is #' necessary in #'digit-char-p. I see 'digit-char-p also works.
[12:35:31] <moon-child> (lambda (x) (every #'digit-char-p x)) :)
[12:35:41] <beach> coat: Common Lisp is wonderful in that, instead of containing a function for every possible special case, it contains all the building blocks to make such functions yourself.
[12:36:09] *** Joins: hendursa1 (~weechat@user/hendursaga)
[12:36:52] <aeth> coat: For built-ins? Shouldn't matter. For user-defined functions? There can be a distinction if it gets redefined. (CLs can prevent things in the COMMON-LISP package from being redefined)
[12:36:53] <moon-child> beach: eh...I know of few languages for which that's not the case
[12:36:59] <moon-child> discounting, say, brainfuck
[12:37:04] <beach> coat: #'digit-char-p is preferable.  You then clearly tell the person reading your code that it is the function you are passing, rather than the symbol.
[12:37:21] <coat> beach: thanks
[12:37:21] <moon-child> and I do wish cl had better tools (built-in) for tacit programming.  It is cumbersome to write the above lambda, rather than (e.g.) (partial #'every #'digit-char-p)
[12:37:56] <beach> moon-child: Oh?  From the videos of C++ "standardization" that I have watched.  The process is mainly about introducing more special cases every iteration.
[12:38:45] <aeth> moon-child: beach is right, some languages love special cases, e.g. sum() is very common
[12:39:12] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 244 seconds)
[12:39:34] <aeth> at least, when we're talking about how to do simple tasks on sequences, which is the topic
[12:39:47] <moon-child> sure, but in few languages can you not write (reduce #'+)
[12:40:13] <pjb> coat: (ignore-errors (parse-integer "123" :junk-allowed nil)) #| --> 123 ; 3 |#   (ignore-errors (parse-integer "1x3" :junk-allowed nil)) #| --> nil ; #<ccl::parse-integer-not-integer-string #x3020036F316D> |#
[12:40:34] <moon-child> cute
[12:41:05] <pjb> that said, it may be less efficient, and on long strings, in both cases.
[12:42:03] <aeth> moon-child: but it winds up with what's idiomatic in the language... and in particular, what's optimal (since if a sum() or .sum() is built in, that's probably faster than their equivalent of (reduce #'+ ...) while if it's not built in, then the implementation will try to optimize (reduce #'+ ...) more)
[12:42:56] <coat> What is the difference between char and schar? http://www.lispworks.com/documentation/lw50/CLHS/Body/f_char_.htm is not easy to understand for me.
[12:44:13] <aeth> it's saying (through several hyperlinks) that schar only works on simple strings, which are simple-strings, i.e. http://www.lispworks.com/documentation/lw50/CLHS/Body/t_smp_st.htm#simple-string
[12:44:34] <aeth> these strings are 1D simple character arrays
[12:44:57] <aeth> simple arrays give certain guarantees. http://www.lispworks.com/documentation/lw50/CLHS/Body/t_smp_ar.htm#simple-array
[12:45:02] <moon-child> aeth: the particular case of 'sum' is a bad one, as it's likely to have different semantics: reducing floating-point error.  More generally, compilers recognizing specific idiomatic forms (such as (reduce #'+)) doesn't scale outside of apl.  More interesting things like loop unrolling and autovectorization any compiler worth its salt will do anyway, given the opportunity
[12:45:12] <coat> aeth: what is a non-simple string?
[12:45:43] <aeth> coat: most commonly, an adjustable string buffer
[12:46:06] *** Joins: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[12:46:11] <aeth> (make-array 8 :element-type 'character :adjustable t :fill-pointer 0)
[12:46:35] <aeth> then (vector-push-extend char that-non-simple-string)
[12:47:07] <beach> coat: The standard is very clear with its definition of SIMPLE for arrays, but it leaves a lot of decisions to the implementation when it comes to non-SIMPLE.
[12:47:42] <aeth> but, yes, there are other ways to get non-simple-strings, e.g. displaced arrays
[12:48:13] <beach> ::clhs simple-array
[12:48:13] <Colleen> Clhs: type simple-array http://www.lispworks.com/documentation/HyperSpec/Body/t_smp_ar.htm
[12:48:49] <beach> aeth: The standard allows for all strings to be simple.
[12:49:17] *** Quits: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 258 seconds)
[12:49:28] <pjb> beach: literal strings?
[12:49:32] <beach> coat: See the definition of simple-array.
[12:49:39] <pjb> beach: I don't see how the standard can forbid: (make-array 8 :element-type 'character :adjustable t :fill-pointer 0)
[12:49:54] <pjb> or can let implementations to forbid it.
[12:49:55] <beach> pjb: It can't.  What makes you think I implied that?
[12:50:10] <coat> aeth: beach: thanks!
[12:50:42] *** Quits: trocado (~trocado@bl18-243-251.dsl.telepac.pt) (Ping timeout: 265 seconds)
[12:50:46] <beach> The standard says: "The type of an array that is not displaced to another array, has no fill pointer, and is not expressly adjustable is a subtype of type simple-array."
[12:51:03] <beach> But it doesn't say that the other types of arrays are non-simple.
[12:51:55] <pjb> Oh, ok. But then it doesn't say that simple-array have to be simple, ie. have to not be displaced, have no fill pointer or cannot be expressly adjustable.
[12:52:10] <pjb> If there are only simple-arrays…
[12:52:31] *** Joins: IAmRasputin (~ryan.gann@209.6.125.193)
[12:52:55] <beach> Right, it has no opinion about that direction of the implication arrow.
[12:53:38] <coat> can this code be made simpler? https://plaster.tymoon.eu/view/2514 - I have repeated (char s n) calls. is there a way to put all the indices in the list, iterate over those indicies and collect (char s i) instead?
[12:53:47] <beach> pjb: Though the standard does not define "simple" that way.
[12:55:12] <beach> coat: (loop for i in '(0 1 2 ....) collect (char s i))
[12:55:22] <pjb> (coerce  "1000-2000-30" 'list) #| --> (#\1 #\0 #\0 #\0 #\- #\2 #\0 #\0 #\0 #\- #\3 #\0) |#
[12:55:45] <coat> beach: thanks
[12:55:51] <pjb> coat: ^
[12:55:53] <beach> Pleasure.
[12:56:52] <beach> pjb: That is not what was asked for.
[12:56:52] *** Quits: IAmRasputin (~ryan.gann@209.6.125.193) (Ping timeout: 252 seconds)
[12:56:57] <coat> pjb: thanks! that would be useful if I wanted all characters. but I want to choose which indices I want so the LOOP solution is more useful for my specific problem.
[12:57:04] <beach> pjb: Note that 9 was missing.
[12:57:12] <pjb> ok.
[12:59:05] <pjb> (let ((string "1000-2000-30")) (coerce (remove #\- string) 'list)) #| --> (#\1 #\0 #\0 #\0 #\2 #\0 #\0 #\0 #\3 #\0) |#
[12:59:14] *** Quits: aeth_ (~aeth@user/aeth) (Quit: ...)
[13:07:37] *** Joins: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[13:11:00] *** Quits: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 265 seconds)
[13:13:46] *** Quits: wheelsucker (~user@2600:8801:8c11:4c00::707) (Remote host closed the connection)
[13:13:59] *** Joins: wheelsucker (~user@2600:8801:8c11:4c00::707)
[13:18:53] *** Quits: _death (~death@adeht.org) (*.net *.split)
[13:19:10] *** Joins: adeht (~death@adeht.org)
[13:25:35] *** Joins: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[13:26:11] *** Joins: lisp123 (~lisp123@5.30.23.247)
[13:29:01] *** Quits: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 268 seconds)
[13:29:54] *** Quits: wilfred (uid159@id-159.highgate.irccloud.com) (Quit: Connection closed for inactivity)
[13:31:20] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 252 seconds)
[13:32:08] *** Quits: jemoka (~jemoka@user/jemoka) (*.net *.split)
[13:32:08] *** Quits: spacebat1 (spacebat@spot.ubermonkey.net) (*.net *.split)
[13:32:08] *** Quits: hirez (~hirez@2602:ffc5:20::1:512e) (*.net *.split)
[13:32:08] *** Quits: sukaeto (~sukaeto@sharona.moonpearltech.com) (*.net *.split)
[13:32:09] *** Quits: markasoftware (~quassel@107.161.26.124) (*.net *.split)
[13:32:15] *** Joins: sukaeto (~sukaeto@sharona.moonpearltech.com)
[13:32:16] *** Joins: markasoftware_ (~quassel@107.161.26.124)
[13:32:16] *** Joins: jemoka_ (~jemoka@user/jemoka)
[13:32:21] *** Joins: hirez- (~hirez@2602:ffc5:20::1:512e)
[13:32:22] *** Joins: spacebat1 (spacebat@spot.ubermonkey.net)
[13:42:31] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Ping timeout: 268 seconds)
[13:43:05] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[14:00:47] *** Joins: trocado (~trocado@188.83.243.251)
[14:25:15] *** Joins: lotuseater (~user@p200300e787083e00b5e33b4e3d09511f.dip0.t-ipconnect.de)
[14:41:50] *** Quits: Inline (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431) (Quit: Leaving)
[14:42:50] *** Quits: trocado (~trocado@188.83.243.251) (Ping timeout: 252 seconds)
[14:44:10] *** Joins: Inline (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431)
[14:51:49] *** Joins: silasfox (~sbv@2001-4dd6-5b1d-0-67ea-637e-1274-9008.ipv6dyn.netcologne.de)
[14:58:31] *** Quits: Inline (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431) (Remote host closed the connection)
[14:58:55] *** Joins: Inline (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431)
[15:00:01] *** Quits: frgo (~frgo@p200300deef27d700957853a548a7fa67.dip0.t-ipconnect.de) (Remote host closed the connection)
[15:00:29] *** Joins: frgo (~frgo@p200300deef27d700957853a548a7fa67.dip0.t-ipconnect.de)
[15:01:01] *** Quits: Inline (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431) (Remote host closed the connection)
[15:01:21] *** Joins: Inline (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431)
[15:05:01] *** Joins: trocado (~trocado@bl18-243-251.dsl.telepac.pt)
[15:13:54] <coat> is there a function that take can take all elements of list *b* and append it to list *a*. For example, (defparameter *a* (list 10 20 30)) (defparameter *b* (list 40 50)). I need (some-func *a* *b*) such that the result would be *a* = (10 20 30 40 50)?
[15:14:08] *** Joins: IAmRasputin (~ryan.gann@209.6.125.193)
[15:14:11] <shka> coat: yes
[15:14:17] <shka> append :D
[15:15:08] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[15:16:17] <coat> shka: append does not seem to modify *a*. It returns a new list for the result.
[15:16:32] <shka> ah
[15:16:33] <shka> ok
[15:16:51] <shka> http://clhs.lisp.se/Body/f_nconc.htm#nconc
[15:16:52] <shka> use this
[15:17:21] <shka> take a look at the example
[15:17:38] <coat> shka: thanks. this works.
[15:18:13] <shka> also, note that destructive modification of lists is perhaps not the best idea if said list (or part of it) has any chance of being shared
[15:18:26] <shka> because bugs will be hilarious
[15:18:46] *** Quits: IAmRasputin (~ryan.gann@209.6.125.193) (Ping timeout: 272 seconds)
[15:21:02] <kakuhen> (format nil "good night")
[15:21:10] *** Quits: kakuhen (~kakuhen@user/kakuhen) (Quit: Leaving...)
[15:24:36] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Ping timeout: 268 seconds)
[15:37:27] *** Quits: hendursa1 (~weechat@user/hendursaga) (Ping timeout: 244 seconds)
[15:38:34] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-10-70-54-112-49.dsl.bell.ca)
[15:40:07] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[15:40:09] *** Joins: hendursa1 (~weechat@user/hendursaga)
[15:46:25] *** Joins: kevingal (~quassel@2a02:8084:4140:f300:b41e:b94d:5367:d2b9)
[15:46:30] <coat> what does 'n' mean in 'nconc'? concatenation of n items?
[15:46:50] <edgar-rft> non-destructive
[15:47:50] <edgar-rft> nonsense, non-consing by using destructive pointer manipulatiopn
[15:48:29] <edgar-rft> append creates a new list, nconc modifies the pointers in the cdr cells
[15:49:18] <edgar-rft> therefore nconc does not allocate new cons cells
[15:50:26] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Ping timeout: 272 seconds)
[15:50:50] *** Joins: amb007 (~a_bakic@206.146.204.77.rev.sfr.net)
[15:52:52] *** Joins: random-nick (~random-ni@87.116.165.220)
[15:53:36] <edgar-rft> same is true for other 'n' functions, e.g. reverse vs. nreverse
[15:56:38] *** Quits: kevingal (~quassel@2a02:8084:4140:f300:b41e:b94d:5367:d2b9) (Remote host closed the connection)
[16:01:01] *** Joins: lisp123 (~lisp123@5.30.23.247)
[16:04:13] <coat> edgar-rft: thanks
[16:04:33] <beach> coat: You may have some interesting surprises with NCONC.
[16:04:55] <beach> coat: I recommend using append instead, and assign to the variable.
[16:05:30] <coat> beach: Is performance hit not a concern in append?
[16:06:02] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 272 seconds)
[16:06:13] <coat> beach: Is the surprise about (nconc a b) regarding the fact that some other variable may be referring to 'a' and might be expecting it to not change?
[16:06:18] <beach> coat: Both are O(n) in terms of the length of the first list.
[16:06:27] <beach> That is one.
[16:06:32] <beach> Here is another:
[16:06:52] <beach> Consider (defparameter *l1* (list)) (defparameter *l2* (list 11 12))
[16:07:10] <beach> What do you think *l1* contains after doing (nconc *l1* *l2*)?
[16:08:15] <coat> (list l1 l2)?
[16:08:54] <beach> That would be the numbers eleven and twelve in *l2*.
[16:09:02] <coat> oops, those were eleven and twelve
[16:09:07] <coat> (list 11 12)?
[16:09:14] <beach> So you expect *l1* to have the value (11 12).  And you would be wrong.
[16:09:19] <beach> Hence my warning.
[16:10:48] <coat> thanks
[16:10:54] <beach> Sure.
[16:11:12] <beach> So do (setf *l1* (append *l1* *l2*)) instead.
[16:11:28] <beach> And forget about NCONC until you understand what it does.
[16:11:48] <beach> ... and until you understand how lists work in Common Lisp.
[16:15:04] <beach> coat: Also, a piece of general advice:  Do not worry about performance unless your application needs to be faster than it is.  And then, only consider parts of the application that are bottlenecks in terms of performance.
[16:15:36] <beach> coat: Worry about your algorithms and data structures in terms of asymptotic complexity as usual.
[16:16:22] *** Joins: derelict (~derelict@user/derelict)
[16:16:24] *** Quits: amb007 (~a_bakic@206.146.204.77.rev.sfr.net) (Ping timeout: 272 seconds)
[16:16:30] <coat> beach: thanks for the advice
[16:16:35] <beach> Sure.
[16:20:01] <coat> which is better to use in code? equalp or string=
[16:20:31] <coat> assuming comparing strings only
[16:20:34] <beach> coat: There is a very general rule in programming, and that is, use the most specific construct that will get the job done.
[16:20:42] *** Joins: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[16:20:47] <coat> so string=
[16:20:58] <beach> If that gets the job done, then yes.
[16:21:29] <coat> why are there so many equal functions in CLHS? it is quite confusing while programming and need to check the CLHS again and again
[16:21:33] <beach> coat: Have you programmed in other languages before?
[16:21:51] <coat> is there a shortcut to look up function documentation in SLIME? say I want to see what equal does in SLIME itself without opening the browser
[16:22:15] <coat> beach: learnt C and Python. but done some real projects in Python only
[16:22:17] <beach> You can open the Common Lisp HyperSpec page in Emacs.
[16:23:05] *** Joins: amb007 (~a_bakic@64.107.204.77.rev.sfr.net)
[16:24:05] *** Quits: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 268 seconds)
[16:26:00] <susam> coat: There are two things I use. C-c C-d d to describe symbol. C-c C-d h to open CLHS in a web browser.
[16:26:26] *** Quits: Inline (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431) (Remote host closed the connection)
[16:26:49] *** Joins: Inline (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431)
[16:27:13] <coat> susam: thanks
[16:27:22] <beach> coat: What material did you use to learn to program?
[16:28:09] <coat> beach: k&r for C. python.org tutorial for python
[16:28:29] <beach> I see.  So you are self-taught?
[16:28:43] <coat> beach: yes
[16:29:02] <coat> beach: but I understand your point about asymptotic complexity. you mean terms of big oh notation, right?
[16:29:07] <beach> I mean, those are both language specific resources, and they probably wouldn't cover rules like the one I just cited.
[16:29:39] <beach> coat: Yes, and that's yet another domain, also independent of any language.
[16:30:57] *** Quits: Inline (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431) (Remote host closed the connection)
[16:31:25] *** Joins: Inline (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431)
[16:31:27] <beach> coat: Part of the reason Common Lisp has so many operators is historical.  But then, most people complain that it doesn't have enough.
[16:31:40] <coat> beach: do you recommend any good source to learn programming from?
[16:32:00] *** Quits: Inline (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431) (Remote host closed the connection)
[16:32:32] <beach> coat: But here is another general rule of programming:  The smaller the language, the more code you have to write yourself, and you often need to do it differently for each project, and certainly in a way incompatible with what other people do.
[16:32:50] <beach> ... like object-oriented programming in early Scheme for instance.
[16:33:01] *** Joins: Inline (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431)
[16:33:26] <beach> coat: I would have to think about that and look around.  I haven't had to do that for a very long time.
[16:34:00] <coat> beach: how did you do learn to program when you did?
[16:34:33] <beach> coat: I had some very good teachers at the university, and then I studied a lot myself.
[16:35:56] *** Quits: taiju (~taiju@M014013236064.v4.enabler.ne.jp) (Ping timeout: 265 seconds)
[16:36:07] <beach> Teachers like Erik Sandewall and Anders Haraldson.
[16:38:46] <beach> https://en.wikipedia.org/wiki/Erik_Sandewall https://sv.wikipedia.org/wiki/Anders_Haraldsson (last one only in Swedish)
[16:41:29] <coat> beach: wow! that's nice
[16:42:03] <beach> coat: You can learn a lot from people like Robert C Martin (a.k.a. Uncle Bob).  He comes across as a bit weird if you watch his "clean code" videos, but he actually knows what he is talking about.
[16:42:18] *** Quits: amb007 (~a_bakic@64.107.204.77.rev.sfr.net) (Ping timeout: 268 seconds)
[16:43:48] <beach> He has also written several books, of course, in case you prefer to read.
[16:44:01] *** Joins: amb007 (~a_bakic@231.105.204.77.rev.sfr.net)
[16:48:30] *** Quits: amb007 (~a_bakic@231.105.204.77.rev.sfr.net) (Ping timeout: 265 seconds)
[16:49:50] *** Quits: cross (~cross@spitfire.i.gajendra.net) (Quit: leaving)
[16:53:24] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 250 seconds)
[16:53:32] *** Joins: cross (~cross@spitfire.i.gajendra.net)
[17:00:39] *** Joins: amb007 (~a_bakic@4.247.204.77.rev.sfr.net)
[17:06:08] *** Quits: cross (~cross@spitfire.i.gajendra.net) (Quit: leaving)
[17:07:15] *** Joins: cross (~cross@spitfire.i.gajendra.net)
[17:08:38] *** Quits: cross (~cross@spitfire.i.gajendra.net) (Client Quit)
[17:09:38] *** Joins: cross (~cross@spitfire.i.gajendra.net)
[17:10:20] *** Quits: amb007 (~a_bakic@4.247.204.77.rev.sfr.net) (Ping timeout: 268 seconds)
[17:12:21] *** Joins: amb007 (~a_bakic@138.247.204.77.rev.sfr.net)
[17:17:07] *** Quits: amb007 (~a_bakic@138.247.204.77.rev.sfr.net) (Ping timeout: 268 seconds)
[17:31:38] <shka> coat: simply put, don't mix destructive and non-destructive data structures
[17:32:18] <shka> and lists should be most of the time considered to be non-destructive
[17:32:34] *** Joins: taiju (~taiju@M014013236064.v4.enabler.ne.jp)
[17:43:20] *** Joins: amb007 (~a_bakic@212.155.102.98)
[18:12:38] *** Joins: char (~Srain@2601:2c3:867f:e810:d001:caf1:1547:6810)
[18:17:23] *** Joins: Equill (~Equill@1.red-83-37-200.dynamicip.rima-tde.net)
[18:39:28] *** Quits: amb007 (~a_bakic@212.155.102.98) (Ping timeout: 268 seconds)
[18:39:45] *** Joins: amb007 (~a_bakic@238.198.204.77.rev.sfr.net)
[18:40:15] <Josh_2> 'ello 'ello
[18:46:17] <Josh_2> You are correct this fella is an odd ball beach but I am a big fan of the eccentric
[18:46:56] *** Quits: silasfox (~sbv@2001-4dd6-5b1d-0-67ea-637e-1274-9008.ipv6dyn.netcologne.de) (Ping timeout: 250 seconds)
[18:47:08] *** Quits: amb007 (~a_bakic@238.198.204.77.rev.sfr.net) (Ping timeout: 272 seconds)
[18:47:25] <beach> Uncle Bob?
[18:47:43] <beach> Yes, I didn't take him seriously at first, but I have changed my mind since.
[18:48:55] *** Joins: silasfox (~sbv@2001-4dd1-7768-0-3047-c983-6ed5-3bf6.ipv6dyn.netcologne.de)
[18:51:21] <Josh_2> Yes Uncle Bob
[19:07:24] *** Joins: cage (~cage@dynamic-adsl-78-15-32-45.clienti.tiscali.it)
[19:20:04] *** adeht is now known as _death
[19:29:11] *** Joins: Nilby (~Nilby@c-67-160-81-88.hsd1.wa.comcast.net)
[19:30:16] *** Quits: silasfox (~sbv@2001-4dd1-7768-0-3047-c983-6ed5-3bf6.ipv6dyn.netcologne.de) (Ping timeout: 250 seconds)
[19:32:07] *** Joins: silasfox (~sbv@2001-4dd6-5b1d-0-67ea-637e-1274-9008.ipv6dyn.netcologne.de)
[19:35:42] *** Joins: IAmRasputin (~ryan.gann@209.6.125.193)
[19:40:20] *** Quits: IAmRasputin (~ryan.gann@209.6.125.193) (Ping timeout: 272 seconds)
[19:49:06] *** Joins: amb007 (~a_bakic@59.247.204.77.rev.sfr.net)
[19:49:29] *** Joins: selwyn (~selwyn@user/selwyn)
[20:03:06] *** Joins: lisp123 (~lisp123@5.30.23.247)
[20:04:03] <shka> the most tragic history about the uncle bob
[20:04:33] <beach> What?
[20:04:42] <shka> is when he mentioned that nobody will be serious about the programming until software bug will cause a major aviation accident
[20:05:08] <shka> but then Boeing Max happens
[20:05:09] <beach> I think he is totally right.
[20:05:21] <beach> Yes, that wasn't enough apparently.
[20:05:28] <shka> and corporate don't care anyway :P
[20:05:57] <beach> They will have to care if there is new legislation as he predicts.
[20:06:28] <shka> yeah, it sounded ludicrous at first, but i actually think that this may be not be worst idea ever
[20:06:58] *** Quits: VFR (~user@cpe-174-105-5-165.columbus.res.rr.com) (Ping timeout: 252 seconds)
[20:07:38] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 265 seconds)
[20:08:28] <beach> I agree, but it would be a terrible idea presently.  What will happen will depend a lot on the "experts" that are chosen to draft legislation.  I won't be surprised if (say) free software is outlawed, and VSCode becomes mandatory, and stuff like that.
[20:08:55] <beach> I mean, imagine they pick "experts" from (say) Oracle.
[20:09:09] <shka> only java allowed
[20:09:10] <shka> :P
[20:09:15] <beach> Exactly.
[20:09:19] <beach> That kind of stuff.
[20:09:20] <Equill> Or Eiffel.
[20:09:54] <Equill> Wait, you're right: Oracle won't promote that, will they? Ignore me.
[20:09:59] <shka> Boeing also decided to move all of the software development to India
[20:10:36] <beach> Wow.
[20:10:38] <beach> Amazing.
[20:17:47] <jcowan> Obviously Boeing has very good (and very expensive) e&o insurance, some of it paid for by taxpayers.  I read once that aviation didn't become profitable (as opposed to pervasive) iuntil the 1960s or so
[20:19:27] <beach> I am not worried about Boeing.  I am worried about the future of software development.
[20:20:27] <shka> jcowan: Boeing is not allowed to go out of business anyway
[20:20:49] <shka> way to many military assets are connected to Boeing
[20:21:08] <jcowan> Bear, Stearns wasn't either, and yet.
[20:22:06] *** Quits: amb007 (~a_bakic@59.247.204.77.rev.sfr.net) (Read error: Connection reset by peer)
[20:22:48] *** Joins: amb007 (~a_bakic@59.247.204.77.rev.sfr.net)
[20:23:26] <jcowan> Software has been in crisis my whole life, almost.
[20:24:33] <shka> regardless, despair https://www.bloomberg.com/news/articles/2019-06-28/boeing-s-737-max-software-outsourced-to-9-an-hour-engineers
[20:25:09] <prxq_> the whole world is in crisis. It
[20:25:16] <prxq_> 's the same pattern everywhere.
[20:25:28] *** prxq_ is now known as prxq
[20:28:11] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[20:29:33] *** Joins: tfb (~tfb@88.98.95.237)
[20:31:02] *** Quits: tfb (~tfb@88.98.95.237) (Client Quit)
[20:32:47] <jcowan> Hey, it's a fallen world.
[20:33:20] <jcowan> Nevertheless, we do have quite a lot of nice things
[20:38:05] *** Quits: amb007 (~a_bakic@59.247.204.77.rev.sfr.net) (Read error: Connection reset by peer)
[20:38:21] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[20:38:34] *** Joins: domovod (~domovod@176.196.122.197)
[20:41:09] *** Joins: varjag (~user@ti0040a400-5479.bb.online.no)
[20:41:50] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Read error: Connection reset by peer)
[20:43:26] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[20:55:12] *** Quits: char (~Srain@2601:2c3:867f:e810:d001:caf1:1547:6810) (Ping timeout: 250 seconds)
[21:02:11] *** Quits: bhaible (~bruno@dslb-088-068-034-084.088.068.pools.vodafone-ip.de) (Remote host closed the connection)
[21:02:34] *** Joins: bhaible (~bruno@dslb-088-068-034-084.088.068.pools.vodafone-ip.de)
[21:05:41] *** Joins: tfb (~tfb@88.98.95.237)
[21:07:35] *** Quits: bhaible (~bruno@dslb-088-068-034-084.088.068.pools.vodafone-ip.de) (Remote host closed the connection)
[21:07:59] *** Joins: bhaible (~bruno@dslb-088-068-034-084.088.068.pools.vodafone-ip.de)
[21:18:26] *** Joins: selwyn (~selwyn@user/selwyn)
[21:22:20] *** Joins: yitzi (~yitzi@173-27-106-188.client.mchsi.com)
[21:26:16] *** Quits: bhaible (~bruno@dslb-088-068-034-084.088.068.pools.vodafone-ip.de) (Remote host closed the connection)
[21:26:39] *** Joins: bhaible (~bruno@dslb-088-068-034-084.088.068.pools.vodafone-ip.de)
[21:32:27] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[21:35:07] *** Quits: bhaible (~bruno@dslb-088-068-034-084.088.068.pools.vodafone-ip.de) (Remote host closed the connection)
[21:35:29] *** Joins: bhaible (~bruno@dslb-088-068-034-084.088.068.pools.vodafone-ip.de)
[21:45:27] *** Joins: sp41 (~spal@70.241.120.35)
[21:52:33] *** Quits: bhaible (~bruno@dslb-088-068-034-084.088.068.pools.vodafone-ip.de) (Remote host closed the connection)
[21:53:11] *** Joins: bhaible (~bruno@dslb-088-068-034-084.088.068.pools.vodafone-ip.de)
[21:58:12] *** Quits: bhaible (~bruno@dslb-088-068-034-084.088.068.pools.vodafone-ip.de) (Remote host closed the connection)
[21:58:34] *** Joins: bhaible (~bruno@dslb-088-068-034-084.088.068.pools.vodafone-ip.de)
[22:04:06] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Ping timeout: 272 seconds)
[22:04:24] *** Joins: amb007 (~a_bakic@43.247.204.77.rev.sfr.net)
[22:05:48] *** Quits: amb007 (~a_bakic@43.247.204.77.rev.sfr.net) (Read error: Connection reset by peer)
[22:07:00] *** Joins: amb007 (~a_bakic@43.247.204.77.rev.sfr.net)
[22:07:11] *** Quits: bhaible (~bruno@dslb-088-068-034-084.088.068.pools.vodafone-ip.de) (Remote host closed the connection)
[22:07:35] *** Joins: bhaible (~bruno@dslb-088-068-034-084.088.068.pools.vodafone-ip.de)
[22:17:47] <pjb> well, airbus at least uses a Coq-validated C compiler: https://github.com/AbsInt/CompCert
[22:17:57] <pjb> ⚠ not free software
[22:18:44] <pjb> Perhaps one day we'll have a formal specification of CL, and a Coq validated CL compiler?
[22:18:53] <pjb> (or ACL2 ?)
[22:19:48] *** Joins: lisp123 (~lisp123@5.30.23.247)
[22:21:50] *** Quits: amb007 (~a_bakic@43.247.204.77.rev.sfr.net) (Read error: Connection reset by peer)
[22:23:29] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[22:26:35] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 258 seconds)
[22:26:41] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-10-70-54-112-49.dsl.bell.ca) (Remote host closed the connection)
[22:29:15] *** Quits: Equill (~Equill@1.red-83-37-200.dynamicip.rima-tde.net) (Quit: KVIrc 5.0.0 Aria http://www.kvirc.net/)
[22:31:55] *** Joins: lisp123 (~lisp123@5.30.23.247)
[22:32:50] *** Joins: selwyn (~selwyn@user/selwyn)
[22:42:02] *** Joins: jans (~Thunderbi@119.51-174-216.customer.lyse.net)
[22:43:47] *** Quits: bhaible (~bruno@dslb-088-068-034-084.088.068.pools.vodafone-ip.de) (Remote host closed the connection)
[22:44:10] *** Joins: bhaible (~bruno@dslb-088-068-034-084.088.068.pools.vodafone-ip.de)
[22:49:02] *** Quits: jans (~Thunderbi@119.51-174-216.customer.lyse.net) (Remote host closed the connection)
[22:51:20] *** Quits: silasfox (~sbv@2001-4dd6-5b1d-0-67ea-637e-1274-9008.ipv6dyn.netcologne.de) (Ping timeout: 250 seconds)
[22:53:20] *** Joins: silasfox (~sbv@2001-4dd1-7768-0-3047-c983-6ed5-3bf6.ipv6dyn.netcologne.de)
[22:53:42] *** Quits: bhaible (~bruno@dslb-088-068-034-084.088.068.pools.vodafone-ip.de) (Remote host closed the connection)
[22:54:41] *** Joins: bhaible (~bruno@dslb-088-068-034-084.088.068.pools.vodafone-ip.de)
[22:57:28] *** Quits: yitzi (~yitzi@173-27-106-188.client.mchsi.com) (Quit: Leaving)
[23:02:44] *** Joins: lad (~lad@user/lad)
[23:03:52] *** Quits: cage (~cage@dynamic-adsl-78-15-32-45.clienti.tiscali.it) (Quit: rcirc on GNU Emacs 27.1)
[23:09:23] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[23:09:50] *** Joins: tyson2 (~user@cpe44d9e795a64f-cm688f2e2dfaa0.cpe.net.cable.rogers.com)
[23:19:24] *** Quits: tyson2 (~user@cpe44d9e795a64f-cm688f2e2dfaa0.cpe.net.cable.rogers.com) (Remote host closed the connection)
[23:19:37] *** Joins: tyson2 (~user@cpe44d9e795a64f-cm688f2e2dfaa0.cpe.net.cable.rogers.com)
[23:24:33] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[23:28:25] *** Joins: tfeb (~tfb@88.98.95.237)
[23:29:41] *** Quits: tfeb (~tfb@88.98.95.237) (Client Quit)
[23:32:56] *** Quits: tyson2 (~user@cpe44d9e795a64f-cm688f2e2dfaa0.cpe.net.cable.rogers.com) (Remote host closed the connection)
[23:36:44] *** Joins: IAmRasputin (~ryan.gann@209.6.125.193)
[23:41:17] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[23:41:38] *** Quits: IAmRasputin (~ryan.gann@209.6.125.193) (Ping timeout: 268 seconds)
[23:41:41] *** Quits: domovod (~domovod@176.196.122.197) (Quit: WeeChat 3.2)
[23:41:59] *** Joins: lisp123 (~lisp123@5.30.23.247)
[23:42:29] *** Joins: tyson2 (~user@cpe44d9e795a64f-cm688f2e2dfaa0.cpe.net.cable.rogers.com)
[23:45:57] *** Quits: silasfox (~sbv@2001-4dd1-7768-0-3047-c983-6ed5-3bf6.ipv6dyn.netcologne.de) (Ping timeout: 268 seconds)
[23:46:35] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 265 seconds)
[23:47:30] *** Joins: silasfox (~sbv@2001-4dd6-5b1d-0-67ea-637e-1274-9008.ipv6dyn.netcologne.de)
[23:47:33] *** Joins: unyu (~pyon@user/pyon)
