[00:07:56] *** Joins: tyson2 (~user@bras-base-toroon0628w-grc-46-142-112-141-177.dsl.bell.ca)
[00:38:28] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 265 seconds)
[00:39:55] *** Joins: aeth (~aeth@user/aeth)
[00:48:18] *** Quits: st_iron (uid370243@id-370243.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[01:24:31] *** Quits: tyson2 (~user@bras-base-toroon0628w-grc-46-142-112-141-177.dsl.bell.ca) (Remote host closed the connection)
[01:36:22] *** Quits: shka (~herr@109.231.0.226) (Ping timeout: 260 seconds)
[01:43:56] *** selwynning is now known as selwyn
[03:17:02] *** Quits: Jing (~hedgehog@2604:a840:3::10c8) (Remote host closed the connection)
[03:17:33] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[03:17:39] *** Joins: Jing (~hedgehog@2604:a840:3::10c8)
[03:44:47] *** Quits: rotateq (~user@p200300e787097300818cd04b4ea1a4f3.dip0.t-ipconnect.de) (Quit: ERC (IRC client for Emacs 27.2))
[04:10:53] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 252 seconds)
[04:11:27] <bremner> can I depend on #'pathname-directory returning a list strings prefixed with :absolute or :relative?
[04:13:18] <bremner> or is this sbcl specific? looking at the CLHS I couldn't figure it out, although that's how all the examples there work
[04:17:54] *** Quits: random-nick (~random-ni@87.116.181.93) (Ping timeout: 265 seconds)
[04:36:10] *** Quits: Jing (~hedgehog@2604:a840:3::10c8) (Remote host closed the connection)
[04:36:45] *** Joins: Jing (~hedgehog@2604:a840:3::10c8)
[04:50:18] *** Quits: Jing (~hedgehog@2604:a840:3::10c8) (Remote host closed the connection)
[04:50:55] *** Joins: Jing (~hedgehog@2604:a840:3::10c8)
[06:58:22] *** Quits: sts-q (~sts-q@212.53.219.229) (Ping timeout: 265 seconds)
[07:09:23] *** Joins: sts-q (~sts-q@212.53.219.230)
[07:12:19] *** Quits: Jing (~hedgehog@2604:a840:3::10c8) (Remote host closed the connection)
[07:13:09] *** Joins: Jing (~hedgehog@2604:a840:3::10c8)
[07:20:04] *** Joins: Oladon (~olad@98.43.81.226)
[08:22:03] *** Quits: sts-q (~sts-q@212.53.219.230) (Quit:  )
[08:22:29] *** Joins: sts-q (~sts-q@212.53.219.230)
[08:36:56] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[08:51:03] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[09:04:05] *** Quits: Jing (~hedgehog@2604:a840:3::10c8) (Remote host closed the connection)
[09:04:41] *** Joins: Jing (~hedgehog@2604:a840:3::10c8)
[09:49:37] *** Joins: st_iron (uid370243@id-370243.uxbridge.irccloud.com)
[09:53:42] *** Joins: treflip (~user@95.79.32.99)
[11:15:30] *** Quits: makomo (~makomo@user/makomo) (Ping timeout: 265 seconds)
[11:20:14] *** Quits: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de) (Quit: Leaving)
[11:26:57] *** Joins: shka (~herr@109.231.0.226)
[11:48:57] *** Quits: treflip (~user@95.79.32.99) (Remote host closed the connection)
[11:50:45] *** Joins: treflip (~user@95.79.32.99)
[11:54:20] *** Joins: rain3 (~rain3___@2a02:2f09:d00c:8800:e5a:2f8d:20e4:29e8)
[12:09:32] *** Joins: lisp123 (~lisp123@5.30.23.247)
[12:17:51] *** Quits: beach (~user@lfbn-bor-1-466-226.w86-213.abo.wanadoo.fr) (Ping timeout: 245 seconds)
[12:59:07] *** Quits: treflip (~user@95.79.32.99) (Read error: Connection reset by peer)
[13:15:57] <MetaYan> bremner: pathname-directory on CCL does the same. Also informative: https://franz.com/support/documentation/ansicl.94/dictentr/pathnam0.htm
[13:22:38] *** Joins: treflip (~user@95.79.32.99)
[13:26:15] *** Quits: pjb (~pjb@user/pjb) (Remote host closed the connection)
[13:29:25] *** Quits: Jing (~hedgehog@2604:a840:3::10c8) (Remote host closed the connection)
[13:30:07] *** Joins: Jing (~hedgehog@2604:a840:3::10c8)
[13:54:14] *** Joins: beach (~user@2a01:cb19:150:3400:8e6:4e:833f:a4f0)
[13:54:14] *** ChanServ sets mode: +o beach
[13:55:35] *** beach sets mode: -o beach
[14:29:33] *** Joins: rotateq (~user@p200300e787097300818cd04b4ea1a4f3.dip0.t-ipconnect.de)
[14:42:27] <bremner> it is? I found it mainly discouraging because the format used by SBCL (and CCL) is not listed explicitly, which I think means it is implementation dependent
[14:44:27] *** Joins: random-nick (~random-ni@87.116.167.143)
[14:47:15] <bremner> basically I have 3 partial paths, the third ending in a file name, and I want to join them up together in some fairly robust way. Currently I use pathname-directory to get lists of strings, but I don't know how portable it is to count on the return value being a list of the structure mentioned.
[15:08:52] <MetaYan> bremner: Sounds like two merge-pathnames could do the trick.
[15:11:25] <bremner> yeah, I guess I should try that again. I forget why I gave up. Maybe just fixated on the way I'm used to doing things.
[15:26:09] <bremner> oof: (merge-pathnames "third/base.type" (merge-pathnames (uiop:relativize-pathname-directory (uiop:ensure-directory-pathname "/subdir/path")) (uiop:ensure-directory-pathname "/root/path")))
[15:48:53] *** Joins: Achylles (~Achylles_@2804:431:d725:5f74:726:267b:60a8:3cf6)
[16:00:41] *** Joins: pjb (~pjb@user/pjb)
[16:06:47] *** Quits: Achylles (~Achylles_@2804:431:d725:5f74:726:267b:60a8:3cf6) (Remote host closed the connection)
[16:16:57] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[16:18:44] <MetaYan> bremner: If you can skip the initial / in subdir and ensure that you end directory strings with / , then it becomes simple: (merge-pathnames "third/base.type" (merge-pathnames "subdir/path/" "/root/path/"))
[16:20:45] <bremner> MetaYan: yes, but I can't assume things about the input because I'm writing a public API
[16:21:39] <bremner> I'm not super fond of the "missing trailing / changes the behaviour" thing either.
[16:28:13] <bremner> (I should have mentioned the public API part earlier, sorry for moving the goalposts)
[16:29:06] <MetaYan> bremner: I did suspect something like that upon seeing your beautiful construct. ;)
[16:30:39] *** Joins: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de)
[16:33:57] <MetaYan> bremner: When trying to ensure incoming paths (URIs mostly) follow a certain structure, I keep things as strings as long as I can and use the string-trim family of functions. But that's just my way of playing.
[17:23:55] <CodeBitCookie[m]> Hello Everyone!
[17:24:10] <CodeBitCookie[m]> Its been a while since I last came here.
[17:24:38] <CodeBitCookie[m]> Is there a shorter/better way to write this?: 
[17:25:26] <CodeBitCookie[m]> (reduce
[17:25:27] <CodeBitCookie[m]>     #'(lambda (x y)
[17:25:27] <CodeBitCookie[m]>         (and x y))
[17:25:27] <CodeBitCookie[m]>     '(nil t t t t) :initial-value t)
[17:25:38] <CodeBitCookie[m]> returns: => nil
[17:26:06] <CodeBitCookie[m]> whereas turning the `'(nil t t t t)` list into `(t t t t t) gives => t
[17:26:40] <CodeBitCookie[m]> The problem with `mapcar`ring or `apply`ing is that `and` is a macro 
[17:27:15] <etimmons> (every #'identity '(nil t t t t)) ?
[17:27:51] <CodeBitCookie[m]> Thank you, that did the trick!
[17:28:45] <etimmons> It also short circuits, so it returns nil after the first nil is found
[17:29:02] <etimmons> Which may or may not be what you want
[17:34:18] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[17:52:17] *** Joins: silasfox (~fox@p200300fb270cb803461d568c658539e8.dip0.t-ipconnect.de)
[17:52:50] *** Quits: silasfox (~fox@p200300fb270cb803461d568c658539e8.dip0.t-ipconnect.de) (Client Quit)
[18:31:25] <rotateq> lazy evaluation, a surely powerful technique with much potential :)
[18:32:06] <rotateq> had to explain that recently in class when it came to discussing the difference between (&) and (&&) operators
[18:34:02] <rotateq> as it was about C# stuff ... brrrrr
[18:35:51] <pjb> How much time? Because in a lisp class, (macroexpand-1 '(and (a) (b))) #| --> (if (a) (and (b))) ; t |# is all there is to say to short-circuit operators.
[18:36:00] <CodeBitCookie[m]> Yeah, I totally agree with the obvious drawback of debug-ablity, although Lisp makes this much more seamless.
[18:36:09] <pjb> vs. say (macroexpand-1 '(logand (a) (b))) #| --> (logand (a) (b)) ; nil |# 
[18:36:26] <pjb> CodeBitCookie[m]: what drawback?
[18:36:51] <pjb> You can still step the high level operators. It's just a matter of choosing a good implementation with a good debugger ;-)
[18:36:57] <CodeBitCookie[m]> pjb: Lazy Evaluation makes it harder to debug some code.
[18:37:00] <pjb> Or to write your own.
[18:37:00] <pjb>  
[18:37:22] <pjb> Well, I answered to & vs && which is shortcircuiting operators, not lazy evaluation.
[18:38:53] <CodeBitCookie[m]> pjb: I forgot to make that a reply to rotateq 
[18:39:01] <CodeBitCookie[m]> * rotateq: Yeah, I
[18:39:27] <CodeBitCookie[m]> <rotateq> "lazy evaluation, a surely..." <- on this ^
[18:42:30] <rotateq> CodeBitCookie[m]: you don't have to reply to all :)
[18:42:54] <rotateq> pjb: yes okay, you're right
[18:43:42] <rotateq> but i tried them to explain why that can be useful and that it is really another programming paradigm, not even the teacher knew it ^^
[18:44:48] <rotateq> but i also didn't expect that
[18:48:40] <rotateq> or when making STRING= (as another simple example) on big strings, maybe first looking if the length is the same, then char by char until one CHAR= fails and then directly giving back NIL. or calculating hash sums of course ^^
[18:51:22] <pjb> You don't even need to compute the hash sum. But using some kind of random access may be useful, given that strings are not random.
[18:54:42] <rotateq> right, like with property testing by letting generate randomized tests :)
[18:55:08] <rotateq> in mathematics the probabilistic method by Paul Erd√∂s is also very very powerful
[18:55:37] <bremner> not sure I see how they are related.
[18:56:19] <rotateq> bremner: ah you know the method? just related metaphorically for first
[18:56:59] <bremner> yes, I know the method reasonably well. It's a way of making counting arguments using the language of probability
[18:59:21] <rotateq> okay me not so well till now
[19:00:52] <pjb> rotateq: For example: https://termbin.com/snfnr
[19:02:51] <bremner> rotateq: in simple terms, it's a way of showing "mathematical objects" exist by showing they have non-zero probability 
[19:05:19] <rotateq> yes i know that, but not how to proof something new with it yet :)
[19:07:02] <bremner> ok, one never knows on the internet what people's background is
[19:18:21] <rotateq> right. I'm interested in mathematics :)
[19:18:55] <rotateq> but more the concrete and not too abstract stuff like in Knuth's "Concrete Mathematics"
[19:39:24] *** Quits: st_iron (uid370243@id-370243.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[20:06:33] *** Joins: makomo (~makomo@user/makomo)
[20:40:10] *** Quits: lisp123 (~lisp123@5.30.23.247) (Read error: Connection reset by peer)
[20:40:53] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 252 seconds)
[20:43:46] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[21:02:02] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 240 seconds)
[21:22:46] *** Joins: Oladon (~olad@98.43.81.226)
[21:24:34] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[21:46:37] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[22:06:31] *** Quits: treflip (~user@95.79.32.99) (Quit: good night ‚ú®)
[22:07:13] *** Joins: Jing_ (~hedgehog@2604:a840:3::103e)
[22:09:59] *** Quits: Jing (~hedgehog@2604:a840:3::10c8) (Ping timeout: 252 seconds)
[22:11:51] *** Joins: waleee-cl (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[22:11:57] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Read error: Connection reset by peer)
[22:12:28] *** Quits: waleee-cl (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Client Quit)
[22:13:17] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[22:19:17] *** Joins: tyson2 (~user@cpeac202e798f63-cmac202e798f60.cpe.net.cable.rogers.com)
[22:40:57] *** Quits: shka (~herr@109.231.0.226) (Ping timeout: 256 seconds)
[22:44:27] *** Quits: rain3 (~rain3___@2a02:2f09:d00c:8800:e5a:2f8d:20e4:29e8) (Ping timeout: 252 seconds)
[22:55:29] *** Joins: lisp123 (~lisp123@5.30.23.247)
[22:59:32] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 240 seconds)
[23:55:47] *** Quits: tyson2 (~user@cpeac202e798f63-cmac202e798f60.cpe.net.cable.rogers.com) (Ping timeout: 265 seconds)
