[00:33:04] <byteit101[m]> is https://github.com/jruby/jruby/pull/6886 likely to wait until 9.3.2? (it's not marked for any release now)
[00:39:34] <headius> I think we should merge it
[00:39:46] <headius> enebo any concerns?
[00:40:33] <enebo[m]> looking at it
[00:41:45] <enebo[m]> I think it is ok
[00:42:06] <enebo[m]> It is funny when I see a one-line change it makes me more nervous :)
[00:42:23] <enebo[m]> but this change looks good and it is at the beginning of the release series
[00:42:24] <byteit101[m]> Note the inveerted test
[00:43:13] <headius> Yeah we want the real class
[00:43:32] <enebo[m]> yeah this new behavior is arguably more what someone would expect
[00:44:37] <enebo[m]> but for 9.3 if this change really tricks someone up I would be pretty surprised.  If it does I think they should probably reformulate how they are checking against the java class
[00:44:38] <enebo[m]> like your spec does
[00:44:40] <headius> Yeah
[00:44:48] <headius> Merged!
[00:44:55] <byteit101[m]> yay
[00:44:58] <enebo[m]> cool
[02:58:09] <JasonvanZyl[m]> If Polyglot Maven builds with Java11 will that cause a problem for you guys?
[03:14:01] <headius> Will it only work on 11?
[03:14:28] <headius> We are close to dropping Java 8 but we still need it for builds because of a bug in javac that has not made it to 11 yet
[03:14:37] <headius> If it is built with 11 but still works on 8 we are fine
[10:53:38] *** Quits: greyrat (~greyrat@ip202.ip-51-178-215.eu) (Bye)
[11:53:51] *** Joins: greyrat (~greyrat@ip202.ip-51-178-215.eu)
[11:54:04] *** Joins: lucerne (~lucerne@ip202.ip-51-178-215.eu)
[11:55:18] *** Server sets mode: +nt 
[11:57:00] *** Quits: _whitelogger (~whitelogg@uruz.whitequark.org) (*.net *.split)
[11:57:00] *** Quits: RomainManni-Buca (~gitterrma@2001:470:69fc:105::3146) (*.net *.split)
[11:57:00] *** Quits: AnilJaiswal[m] (~aniljaisw@2001:470:69fc:105::1:aa) (*.net *.split)
[11:57:00] *** Quits: UweKuboschGitter (~gitterdon@2001:470:69fc:105::3100) (*.net *.split)
[11:57:00] *** Quits: JulesIvanicGitte (~gittergui@2001:470:69fc:105::3118) (*.net *.split)
[12:03:41] *** Joins: fidothe (sid1130@2a03:5180:f:5::46a)
[12:03:41] *** Joins: _whitelogger (~whitelogg@uruz.whitequark.org)
[12:03:41] *** Joins: AnilJaiswal[m] (~aniljaisw@2001:470:69fc:105::1:aa)
[12:03:41] *** Joins: RomainManni-Buca (~gitterrma@2001:470:69fc:105::3146)
[12:03:41] *** Joins: UweKuboschGitter (~gitterdon@2001:470:69fc:105::3100)
[12:03:41] *** Joins: JulesIvanicGitte (~gittergui@2001:470:69fc:105::3118)
[12:07:29] *** Quits: headius (~headius@2001:470:69fc:105::3027) (Ping timeout: 250 seconds)
[12:11:18] *** Joins: headius (~headius@2001:470:69fc:105::3027)
[13:29:16] *** Quits: MatrixTravelerbo (~voyagert2@2001:470:69fc:105::22) (Quit: Bridge terminating on SIGTERM)
[13:29:17] *** Quits: subbu[m] (~subbu@user/subbu) (Quit: Bridge terminating on SIGTERM)
[13:29:17] *** Quits: nilsding (~nilsding@user/nilsding) (Quit: Bridge terminating on SIGTERM)
[13:29:17] *** Quits: enebo[m] (~enebo@2001:470:69fc:105::e6) (Quit: Bridge terminating on SIGTERM)
[13:29:17] *** Quits: kai[m] (~kaikdeorg@2001:470:69fc:105::c43) (Quit: Bridge terminating on SIGTERM)
[13:29:18] *** Quits: JasonvanZyl[m] (~jasonvanz@2001:470:69fc:105::dbb4) (Quit: Bridge terminating on SIGTERM)
[13:29:18] *** Quits: Bi[m] (~bimatrixo@2001:470:69fc:105::109a) (Quit: Bridge terminating on SIGTERM)
[13:29:20] *** Quits: JulesIvanicGitte (~gittergui@2001:470:69fc:105::3118) (Quit: Bridge terminating on SIGTERM)
[13:29:20] *** Quits: RomainManni-Buca (~gitterrma@2001:470:69fc:105::3146) (Quit: Bridge terminating on SIGTERM)
[13:29:20] *** Quits: XavierNoriaGitte (~gitterfxn@2001:470:69fc:105::3111) (Quit: Bridge terminating on SIGTERM)
[13:29:20] *** Quits: CharlesOliverNut (~gitterhea@2001:470:69fc:105::311e) (Quit: Bridge terminating on SIGTERM)
[13:29:20] *** Quits: JesseChavezGitte (~gitterjes@2001:470:69fc:105::3122) (Quit: Bridge terminating on SIGTERM)
[13:29:20] *** Quits: MattPattersonGit (~gitterfid@2001:470:69fc:105::3105) (Quit: Bridge terminating on SIGTERM)
[13:29:20] *** Quits: byteit101[m] (~byteit101@2001:470:69fc:105::30ec) (Quit: Bridge terminating on SIGTERM)
[13:29:20] *** Quits: KarolBucekGitter (~gitterkar@2001:470:69fc:105::3127) (Quit: Bridge terminating on SIGTERM)
[13:29:20] *** Quits: MarcinMielyskiGi (~gitterlop@2001:470:69fc:105::3134) (Quit: Bridge terminating on SIGTERM)
[13:29:20] *** Quits: klobuczek[m] (~klobuczek@2001:470:69fc:105::1:24c) (Quit: Bridge terminating on SIGTERM)
[13:29:20] *** Quits: shibz[m] (~shibzmatr@2001:470:69fc:105::1:8be) (Quit: Bridge terminating on SIGTERM)
[13:29:20] *** Quits: CrisShupp[m] (~cshupp1ma@2001:470:69fc:105::1:374) (Quit: Bridge terminating on SIGTERM)
[13:29:20] *** Quits: NoraHoward[m] (~baroquebo@2001:470:69fc:105::f6ff) (Quit: Bridge terminating on SIGTERM)
[13:29:20] *** Quits: jswenson[m] (~jswensonm@2001:470:69fc:105::fd45) (Quit: Bridge terminating on SIGTERM)
[13:29:20] *** Quits: Leonardomejiabus (~thebiglor@2001:470:69fc:105::1:3a2) (Quit: Bridge terminating on SIGTERM)
[13:29:20] *** Quits: TimGitter[m]1 (~gittertim@2001:470:69fc:105::314b) (Quit: Bridge terminating on SIGTERM)
[13:29:20] *** Quits: mattpatt[m] (~mattpattm@2001:470:69fc:105::315d) (Quit: Bridge terminating on SIGTERM)
[13:29:20] *** Quits: AnilJaiswal[m] (~aniljaisw@2001:470:69fc:105::1:aa) (Quit: Bridge terminating on SIGTERM)
[13:29:20] *** Quits: UweKuboschGitter (~gitterdon@2001:470:69fc:105::3100) (Quit: Bridge terminating on SIGTERM)
[13:29:20] *** Quits: basshelal[m] (~basshelal@2001:470:69fc:105::30e7) (Quit: Bridge terminating on SIGTERM)
[13:29:21] *** Quits: deividrodriguez[ (~deividrod@2001:470:69fc:105::1:16b9) (Quit: Bridge terminating on SIGTERM)
[13:29:22] *** Quits: FlorianDoubletGi (~gitterflo@2001:470:69fc:105::310c) (Quit: Bridge terminating on SIGTERM)
[13:29:22] *** Quits: OlleJonssonGitte (~gitteroll@2001:470:69fc:105::313b) (Quit: Bridge terminating on SIGTERM)
[13:29:22] *** Quits: TimGitter[m] (~gittertir@2001:470:69fc:105::314f) (Quit: Bridge terminating on SIGTERM)
[13:29:22] *** Quits: kares[m] (~karesmatr@2001:470:69fc:105::30d1) (Quit: Bridge terminating on SIGTERM)
[13:29:22] *** Quits: ChrisSeatonGitte (~gitterchr@2001:470:69fc:105::30fb) (Quit: Bridge terminating on SIGTERM)
[13:29:22] *** Quits: lopex[m] (~lopexm]@2001:470:69fc:105::3158) (Quit: Bridge terminating on SIGTERM)
[13:29:22] *** Quits: rebelwarrior[m] (~rebelwarr@2001:470:69fc:105::beba) (Quit: Bridge terminating on SIGTERM)
[13:29:22] *** Quits: johnphillips3141 (~johnphill@2001:470:69fc:105::1:d36) (Quit: Bridge terminating on SIGTERM)
[13:29:22] *** Quits: BlaneDabneyGitte (~gitterrae@2001:470:69fc:105::3140) (Quit: Bridge terminating on SIGTERM)
[13:29:23] *** Quits: ahorek[m] (~ahorekmat@2001:470:69fc:105::30e2) (Quit: Bridge terminating on SIGTERM)
[13:29:23] *** Quits: nelsnnelson[m] (~nelsnnels@2001:470:69fc:105::1:16eb) (Quit: Bridge terminating on SIGTERM)
[13:29:23] *** Quits: liamwhiteGitter[ (~gitterlia@2001:470:69fc:105::312d) (Quit: Bridge terminating on SIGTERM)
[13:29:23] *** Quits: headius (~headius@2001:470:69fc:105::3027) (Quit: Bridge terminating on SIGTERM)
[13:32:36] *** Joins: Bi[m] (~bimatrixo@2001:470:69fc:105::109a)
[13:33:09] *** Joins: ahorek[m] (~ahorekmat@2001:470:69fc:105::30e2)
[13:44:40] *** Joins: enebo[m] (~enebo@2001:470:69fc:105::e6)
[13:44:40] *** Joins: kai[m] (~kaikdeorg@2001:470:69fc:105::c43)
[13:44:40] *** Joins: lopex[m] (~lopexm]@2001:470:69fc:105::3158)
[13:44:41] *** Joins: MatrixTravelerbo (~voyagert2@2001:470:69fc:105::22)
[13:44:41] *** Joins: subbu[m] (~subbu@user/subbu)
[13:44:41] *** Joins: JasonvanZyl[m] (~jasonvanz@2001:470:69fc:105::dbb4)
[13:44:41] *** Joins: nilsding (~nilsding@user/nilsding)
[13:44:52] *** Joins: TimGitter[m] (~gittertim@2001:470:69fc:105::314b)
[13:44:52] *** Joins: MarcinMielyskiGi (~gitterlop@2001:470:69fc:105::3134)
[13:44:52] *** Joins: UweKuboschGitter (~gitterdon@2001:470:69fc:105::3100)
[13:44:52] *** Joins: OlleJonssonGitte (~gitteroll@2001:470:69fc:105::313b)
[13:44:52] *** Joins: JulesIvanicGitte (~gittergui@2001:470:69fc:105::3118)
[13:44:52] *** Joins: RomainManni-Buca (~gitterrma@2001:470:69fc:105::3146)
[13:44:52] *** Joins: BlaneDabneyGitte (~gitterrae@2001:470:69fc:105::3140)
[13:44:52] *** Joins: ChrisSeatonGitte (~gitterchr@2001:470:69fc:105::30fb)
[13:44:52] *** Joins: JesseChavezGitte (~gitterjes@2001:470:69fc:105::3122)
[13:44:52] *** Joins: KarolBucekGitter (~gitterkar@2001:470:69fc:105::3127)
[13:44:52] *** Joins: kares[m] (~karesmatr@2001:470:69fc:105::30d1)
[13:44:52] *** Joins: byteit101[m] (~byteit101@2001:470:69fc:105::30ec)
[13:44:52] *** Joins: liamwhiteGitter[ (~gitterlia@2001:470:69fc:105::312d)
[13:44:52] *** Joins: basshelal[m] (~basshelal@2001:470:69fc:105::30e7)
[13:44:52] *** Joins: MattPattersonGit (~gitterfid@2001:470:69fc:105::3105)
[13:44:52] *** Joins: XavierNoriaGitte (~gitterfxn@2001:470:69fc:105::3111)
[13:44:52] *** Joins: FlorianDoubletGi (~gitterflo@2001:470:69fc:105::310c)
[13:44:53] *** Joins: nelsnnelson[m] (~nelsnnels@2001:470:69fc:105::1:16eb)
[13:44:53] *** Joins: johnphillips3141 (~johnphill@2001:470:69fc:105::1:d36)
[13:44:53] *** Joins: klobuczek[m] (~klobuczek@2001:470:69fc:105::1:24c)
[13:44:53] *** Joins: Leonardomejiabus (~thebiglor@2001:470:69fc:105::1:3a2)
[13:44:53] *** Joins: mattpatt[m] (~mattpattm@2001:470:69fc:105::315d)
[13:44:53] *** Joins: jswenson[m] (~jswensonm@2001:470:69fc:105::fd45)
[13:44:53] *** Joins: NoraHoward[m] (~baroquebo@2001:470:69fc:105::f6ff)
[13:44:53] *** Joins: shibz[m] (~shibzmatr@2001:470:69fc:105::1:8be)
[13:44:53] *** Joins: rebelwarrior[m] (~rebelwarr@2001:470:69fc:105::beba)
[13:44:53] *** Joins: deividrodriguez[ (~deividrod@2001:470:69fc:105::1:16b9)
[13:44:53] *** Joins: CrisShupp[m] (~cshupp1ma@2001:470:69fc:105::1:374)
[13:44:53] *** Joins: AnilJaiswal[m] (~aniljaisw@2001:470:69fc:105::1:aa)
[13:44:53] *** Joins: CharlesOliverNut (~gitterhea@2001:470:69fc:105::311e)
[13:44:54] *** Joins: headius (~headius@2001:470:69fc:105::3027)
[13:44:59] *** Joins: TimGitter[m]1 (~gittertir@2001:470:69fc:105::314f)
[15:31:34] <JasonvanZyl[m]> If I publish a snapshot build can you verify this week? We don't use any language features above java8, but I've lost track of how the mechanics of the compiler works with respect to building with a newer Java and running on an older.
[15:32:14] <JasonvanZyl[m]> Actually I can do the first test, I'll build it with 11 and flip back to 8 to run it and see if it works. So I'll try that first.
[16:28:41] <kares[m]> I've tagged a Bundler+RubyGems update for 9.3.1.0 https://github.com/jruby/jruby/pull/6890 
[16:28:41] <kares[m]> (would be nice to have up-to-date version out of the box - but no hard feelings if this gets untagged from 9.3.1.0)
[16:36:19] <headius> I don't have any major objection, but enebo may have already verified the release
[16:36:35] <headius> We need to get that verification into a CI job perhaps
[16:58:47] *** Joins: subbu (~subbu@user/subbu)
[17:37:33] <JasonvanZyl[m]> headius: I have a local build here of polyglot, what is the simplest thing I can run in your build that will tell me if everything is ok? Should I just try `./mvnw verify` ?
[18:02:20] <enebo[m]> I just merged it.  I will verify new bits
[18:13:02] <headius> Jason van Zyl: just about anything should verify that it still works
[18:13:15] <headius> the main pom is .rb and everything goes from there
[18:15:15] <headius> Jason van Zyl: I commented on your issue for the record
[18:15:50] <headius> we will move to building with 11 soon but need 11.0.13 at least to fix a javac bug I found that prevents us compiling
[19:10:34] <headius> punted the remaining 9.3.1.0 issues to 9.3.2.0
[19:10:51] <headius> we should continue reevaluating whether they fit 9.3 or 9.4 or whether they should just be untargetd
[19:14:32] <headius> enebo: there are not a ton of large items in this release that warrant their own notes
[19:16:50] <enebo[m]> yeah just mostly things people reported
[19:20:31] <headius> yeah I don't have anything worth adding on top of the issue list
[19:20:58] <headius> https://gist.github.com/headius/7ef477728e5ff43c3a95bd4b48852f33
[19:21:15] <headius> list of issues and PRs will largely be self-explanatory
[19:22:50] <headius> Shout out to @ahorek, @byteit101, @GabrielNagy, and @jsvd for contributions
[19:24:27] <headius> I wish we could repro that gem push pipe error
[19:31:06] <enebo[m]> yeah.  I still wonder what the magic is on that
[19:33:04] <headius> the IT management thing on my MBP has been hassling me to update to macOS 11 so perhaps I should do that and hope I can reproduce
[19:53:58] <enebo[m]> https://gist.github.com/enebo/dfa26f46d36f1bee58a856fcd3095d15
[19:54:37] <headius> LGTM
[19:54:52] <headius> I will start prepping the other release items
[19:57:17] <enebo[m]> I plan on pushing site after I eat since it takes some time for Maven
[19:57:44] <enebo[m]> I also think more people see the release on west coast the later we post
[19:59:39] <headius> docker is in process
[20:00:11] <headius> I can throw social posts together whenever the site is up
[20:01:11] <enebo[m]> ok
[20:41:31] <headius> I think I will try to spend the rest of the week figuring out how to get variadic functions working better in jffi
[20:41:50] <headius> I see where all the bits are but the current logic basically assumes varargs all go on heap and that is not right for all platforms
[20:42:33] <headius> the logic builds up a heap va_arg like thing and then dispatches through the same logic as non-variadic calls, but there are libffi functions that should be called for vararg dispatch to set up the call protocol properly
[20:43:13] <headius> jffi itself has no understanding of variadic functions... jnr-ffi does the arg munging on its own
[20:43:31] <headius> this may have been done to avoid having to do a new native jffi lib but it has to change
[20:43:39] *** subbu is now known as subbu|afk
[20:50:10] *** subbu|afk is now known as subbu
[21:06:59] <enebo[m]> headius: going to push site and update github release
[21:07:08] <enebo[m]> After that send release emails
[21:07:21] <enebo[m]> maven is propagated
[21:16:57] <headius> ok
[21:18:47] <enebo[m]> site is live. GH release done.  updating VERSION for 9.3.2.0-SNAPSHOT
[21:19:01] <headius> ok
[21:19:01] <enebo[m]> Will send out email now that I see your response
[21:19:20] <headius> download page links to 9.3.0.0 and 404s
[21:19:55] <enebo[m]> what?
[21:20:08] <enebo[m]> ah I see it
[21:21:43] <enebo[m]> fixed
[21:22:20] *** Joins: enebo (~enebo@c-75-73-81-96.hsd1.mn.comcast.net)
[21:22:22] <headius> enebo: the title and header in the release notes page still says 9.3.0.0 also
[21:22:42] <enebo[m]> damn :)
[21:23:30] *** ChanServ changes topic to 'Get 9.3.1.0! http://jruby.org/ | http://wiki.jruby.org | http://logs.jruby.org/jruby/ | http://bugs.jruby.org | Paste at http://gist.github.com'
[21:23:34] *** Parts: enebo (~enebo@c-75-73-81-96.hsd1.mn.comcast.net) ()
[21:23:57] <enebo[m]> updated
[21:25:17] <headius> damn now FB is using a cached version of the title so it still shows 9.3.0.0
[21:26:02] <headius> weird, linkedin sees it the same way
[21:26:14] <headius> some mirror propagation from GH pages?
[21:26:26] <enebo[m]> maybe those sites do the mirroring themselves?
[21:29:46] <headius> https://www.reddit.com/r/ruby/comments/q7gr0n/jruby_9310_released/
[21:30:43] <headius> https://www.facebook.com/JRubyFans/posts/10165847749095578
[21:30:59] <headius> mirrors seem to be updated now
[21:31:54] <headius> https://www.linkedin.com/feed/update/urn:li:activity:6854113871314219008
[21:34:11] <headius> enebo: are you doing the ruby-versions update?
[21:34:22] <headius> and ruby-build
[21:34:35] <enebo[m]> I wasn't no
[21:41:10] <headius> done and done
[21:41:27] <headius> docker is updated
[21:41:35] <headius> I think that's all the tasks from our end
[21:42:02] <enebo[m]> oh ok...Perhaps we can generate the text for that PR in the future since it probably involves a little copy/pasting
[21:42:28] <headius> I pretty much just left the description blank and the title is the same as the commit: "Add JRuby 9.3.1.0"
[21:42:37] <headius> automating any of this would be nice
[21:43:08] <enebo[m]> yeah it may be a pain to have to click on all these but perhaps postmodern has something which does this
[21:43:18] <headius> ruby-versions has an update script that is pretty easy
[21:43:39] <headius> ruby-build just needs a new file with the version, URL to tarball, and sha256
[21:56:01] <headius> enebo: could you modify your issue list generator to generate markdown instead?
[21:56:20] <headius> I would like to paste the whole release notes to Reddit but it doesn't recognize the HTML in there as being part of the markdown
[21:58:05] <enebo[m]> well good question.  I will look at it.  I am sure this was just a string.
[22:00:38] <enebo[m]> (text)[link] right?
[22:03:12] <headius> other way around
[22:03:23] <headius> [text](link)
[22:03:33] <headius> er... `[text](link)`
[22:08:36] <enebo[m]> ok well I am going to test it but it is simple to change
[22:14:32] <enebo[m]> https://gist.github.com/enebo/210c5f11adb45ac57beb4adf2fa7b98b
[23:03:00] *** Joins: puritylake[m] (~puritylak@2001:470:69fc:105::1:1904)
[23:05:17] <puritylake[m]> Hello to all, joined to talk about the String#freeze issue
[23:05:33] <headius> puritylake: hi there!
[23:05:55] <headius> I'm trying to remember if we have any other cases like this
[23:07:55] <headius> enebo: not sure if you have been following the issue but we need to honor overridden String#freeze and currently always assume it is producing a frozen string
[23:09:04] <enebo[m]> honor mean no longer freeze opto?
[23:09:08] <headius> this is the IR builder logic that does it, with no room for freeze being overridden
[23:09:09] <headius> https://github.com/jruby/jruby/blob/9ad83070e2c09ae20a66f05a74aaa1646a23694d/core/src/main/java/org/jruby/ir/IRBuilder.java#L1116-L1121
[23:09:15] <headius> yeah basically
[23:09:28] <headius> so if freeze is builtin it acts like a FrozenString operand, but if it is overridden it makes the call
[23:10:10] <headius> this specific case is likely never going to happen but it seems like an opportunity to introduce IR for a cached value that is invalidated by a method change
[23:10:12] <enebo[m]> shoot.  I was totally against the idea of using .freeze for this and not a syntax differentiating between immutable/mutable but Matz is not big on that
[23:10:33] <enebo[m]> but it means we cannot prop the value any more like other immediate values
[23:10:42] <headius> well, this was my idea because of matz not wanting to add syntax
[23:11:01] <enebo[m]> yeah but honoring method redefinition is a mistake
[23:11:02] <headius> they still don't have syntax for frozen strings but there's the pragma and some additional utility methods
[23:11:16] <headius> perhaps?
[23:11:25] <headius> it is in the specs in any case
[23:11:54] <enebo[m]> So a = "ff"; p a will not longer become a = "ff" p "ff"
[23:12:26] <headius> no, `a = "ff".freeze; p a` will no longer become `p "ff"`
[23:12:38] <headius> it only affects the .freeze call on a literal string
[23:12:48] <enebo[m]> yeah that was what I was trying to type
[23:13:00] <enebo[m]> Perhaps most people use pragma now 
[23:13:53] <headius> I assume almost everyone prefers the pragma now
[23:14:06] <enebo[m]> I suppose if this is becoming a rarity then it doesn't matter if we just make it ordinary.  If less rare perhaps it is not propagateable but still "special" with a guard 
[23:14:22] <enebo[m]> but are we fixing a real world issue or just a spec?
[23:14:23] <headius> yeah that sums it up
[23:14:24] <headius> Looks good to me, maybe the titles don't need to be links but this is good
[23:14:36] <headius> gah where did that come from
[23:14:53] <enebo[m]> hahah
[23:14:54] <headius> that was about the markdown, if it didn't send before
[23:15:01] <enebo[m]> I know when it was intended to be typed at least
[23:15:11] <headius> as far as I know this is only fixing a spec and an open issue
[23:15:37] <enebo[m]> I think we should consider leaving it as an incompatibility and see if anything real hits it
[23:16:02] <enebo[m]> I certainly don't think without a real use case we should be spending time fixing it atm
[23:16:24] <headius> https://github.com/jruby/jruby/issues/2156
[23:17:07] <headius> I think puritylake was interested in this because it is marked beginner and would be a good intro to IR
[23:17:48] <enebo[m]> The simplest fix is to just make it into a normal String again
[23:17:56] <headius> hmm true
[23:18:07] <headius> we need some numbers on how many people use "foo".freeze now
[23:18:16] <enebo[m]> and I don't think if people are using this syntax we should try and optimize it or add a new instr for it
[23:18:40] <enebo[m]> but I guess I wonder how much .freeze we see
[23:20:09] <headius> if we make it just create the string and call as normal we will fail other specs that expect the same object every time
[23:20:31] <enebo[m]> HAHA yeah 
[23:20:55] <puritylake[m]> Oh the woes of changes in large software lol
[23:21:00] <headius> heheh true dat
[23:21:25] <enebo[m]> so if we keep some special notion then frozenString goes from being an operand to an instr
[23:21:34] <enebo[m]> since it might end up being a call
[23:22:32] <enebo[m]> .operands.FrozenString -> instrs.FrozenStringInstr extends somecallbaseinstr
[23:23:08] <headius> only a handful of uses in 9.3 stdlib
[23:23:27] <headius> maybe grep your gems for `".freeze` and `'.freeze`
[23:23:31] <enebo[m]> but you point out the major issue if we allow redefinition of it we have to make this change
[23:23:56] <headius> FrozenString will remain as an operand for cases where we know it's always frozen, like with pragma
[23:24:06] <enebo[m]> oh yeah that's true
[23:24:18] <enebo[m]> for pragma we know.  I just meand for "".freeze
[23:24:29] <headius> we would add something like a new instr that's either FrozenStringOrCallFreeze or a more generic CacheIfMethodBuiltin
[23:25:01] <headius> the latter might make this more interesting because there will be other patterns
[23:25:11] <enebo[m]> I like the notion of generic but it is realld CacheIfPureFunction
[23:26:36] <headius> nobody has filed this as a problem with their code
[23:26:37] <headius> it could also be gated behind a property so most people would run with the current behavior
[23:27:06] <enebo[m]> yeah I usually like to be compatible when we can see how to easily enough
[23:27:22] <enebo[m]> in this case it is just extending a callinstr but with that said this feels a little like aliasing eval to me
[23:27:57] <enebo[m]> I can think that someone perhaps wants to instrument how many frozen strings they made using freeze or something like that?  Just feels obscure
[23:28:51] <enebo[m]> I would rather figure out another fun issue and just add a line to our list of things we don't support
[23:29:10] <headius> yeah tooling of some sort perhaps
[23:29:20] <headius> hey if you have another item I'm game
[23:29:22] <headius> maybe something 3.0
[23:29:48] <headius> I don't personally care if this ever gets "fixed" so something on the critical path would be cool
[23:30:02] <puritylake[m]> I'd be cool with that
[23:30:37] <enebo[m]> puritylake: do you have a specific interest in IR itself or just getting into JRuby?
[23:31:15] <puritylake[m]> Just getting into JRuby, I just liked the idea of looking into the IR but to be honest I don't mind the task
[23:31:34] <puritylake[m]> As long as I learn something
[23:34:19] <puritylake[m]> Been looking for a open source project to help out with, thought this one might be fun
[23:36:41] <enebo[m]> puritylake: We will find something fun.  I am looking through IR issues a little bit
[23:38:35] <enebo[m]> puritylake: if you ever wanted to implement sprintf I made a start on it.  This is more of a pure Java task to understand sprintf and make a runtime engine
[23:40:14] <puritylake[m]> That could be fun, is the use case more of a utility?
[23:41:18] <puritylake[m]> Oh, I was unaware sprintf was in Ruby, wow I feel dumb lol
[23:41:37] <enebo[m]> we have an implementation which needs to change but more importantly it is very difficult to add things like %p
[23:42:04] <enebo[m]> It has been a long time since I looked at this branch so I want to see how baked it is
[23:42:40] <enebo[m]> I think what I remember is I support %d through a new parser/execution set of code but then fail back to old impl if not that format 
[23:43:17] <enebo[m]> but it is an interesting project because it is making a tiny parser and then making a small interpreter to build up the format string
[23:43:43] <enebo[m]> it also potentially could eventually compile but that is way out of scope 
[23:45:24] <puritylake[m]> So, I can I work with java strings convert to jruby strings or should I work in jruby strings?
[23:45:49] <puritylake[m]> s/I//
[23:46:54] <enebo[m]> in this case it is all Ruby Strings which get reduced down to ByteList
[23:47:05] <enebo[m]> both the format string itself and the resulting string
[23:47:31] <enebo[m]> in JRuby a RubyString < RubyObject and has a ByteList field
[23:47:58] <enebo[m]> You can think of ByteList as a byte[] and an encoding
[23:48:23] <enebo[m]> but all the code is Java itself as it is internals
[23:49:02] <puritylake[m]> Ok, cool, I guess I could work on that for the time being
[23:49:47] <enebo[m]> puritylake: alright cool.  Give me some time to dust this off and I will make a branch for you on jruby org site
[23:50:17] <enebo[m]> It may take until tomorrow as I have to run an errand but I may get it pushed this evening too
[23:50:37] <enebo[m]> we can talk about what it takes and we will be around to answer questions after you get rolling
[23:52:18] <puritylake[m]> No worries, I assume you are based in the west as it is 9pm here but if you ping me I'll try get back to you if you get it ready today
[23:52:46] <enebo[m]> oh yeah middle of US so it is still 15:22
[23:53:02] <puritylake[m]> Ireland on this end
[23:53:15] <enebo[m]> yeah I will let you know once I get it set up
[23:54:01] <puritylake[m]> 👍️
