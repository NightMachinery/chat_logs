[00:15:22] *** Joins: happycorsair[m] (~happycors@2001:470:69fc:105::205)
[01:03:22] <FromDiscord> <talaing> Are there any faster alternatives for `net` module?
[01:04:03] <FromDiscord> <talaing> Is there even any way to make HTTP requests faster than with `net` module?
[01:05:47] <fn> <06Prestige99> faster how?
[01:10:30] <FromDiscord> <talaing> Let me make an example real quick.
[01:11:42] <FromDiscord> <talaing> sent a code paste, see https://play.nim-lang.org/#ix=3rB5
[01:11:45] <FromDiscord> <talaing> Is there any way to make this faster?
[01:12:34] <FromDiscord> <talaing> sent a code paste, see https://play.nim-lang.org/#ix=3rB6
[01:16:34] *** Joins: maxime_ (~maxime@2a01cb0883359800448e62b4cef4328d.ipv6.abo.wanadoo.fr)
[01:18:49] *** Quits: max22- (~maxime@2a01cb08833598000a1bd09e23542bdd.ipv6.abo.wanadoo.fr) (Ping timeout: 268 seconds)
[01:19:29] <FromDiscord> <ElegantBeef> Well each request is going to be blocking, so either using the async http client or using multithreading should allow an increase in speed
[01:20:30] <FromDiscord> <talaing> I'll try async üëç
[01:28:51] <FromDiscord> <talaing> sent a code paste, see https://play.nim-lang.org/#ix=3rB9
[01:29:12] <FromDiscord> <talaing> @ElegantBeef not sure if I used async correctly
[01:29:29] <FromDiscord> <talaing> sent a code paste, see https://play.nim-lang.org/#ix=3rBa
[01:30:13] <FromDiscord> <dom96> `curl` takes 0.058s on my machine. Sounds like your expectations might be too high üôÇ
[01:31:57] *** rockcavera is now known as Guest6556
[01:31:57] *** Joins: tiorock (~rc@user/rockcavera)
[01:31:57] *** Quits: Guest6556 (~rc@user/rockcavera) (Killed (molybdenum.libera.chat (Nickname regained by services)))
[01:31:57] *** tiorock is now known as rockcavera
[01:33:21] <FromDiscord> <ElegantBeef> Well arent they doing 100 consecutive get requests which are all blocking eachother?
[01:34:16] <FromDiscord> <ElegantBeef> Though considering those speeds are you even reaching google?
[01:35:15] *** Joins: tiorock (~rc@192.12.115.223)
[01:35:15] *** Quits: tiorock (~rc@192.12.115.223) (Changing host)
[01:35:15] *** Joins: tiorock (~rc@user/rockcavera)
[01:35:15] *** Quits: rockcavera (~rc@user/rockcavera) (Killed (copper.libera.chat (Nickname regained by services)))
[01:35:15] *** tiorock is now known as rockcavera
[01:35:27] <FromDiscord> <ElegantBeef> That's what .9ms and 2ms for 100 requests?
[01:52:28] <FromDiscord> <bung87 (Bung)> Its bad idea test against to remote server
[02:12:23] <FromDiscord> <ElegantBeef> Anyone got any packages for TMWN, closing it up right now üòÑ
[02:38:21] *** Quits: happycorsair[m] (~happycors@2001:470:69fc:105::205) (Remote host closed the connection)
[02:38:22] *** Quits: Clonkk[m] (~rfcmatrix@2001:470:69fc:105::34a8) (Read error: Connection reset by peer)
[02:38:24] *** Quits: nixfreak_nim[m] (~reversem3@2001:470:69fc:105::33d1) (Read error: Connection reset by peer)
[02:38:26] *** Quits: Zoom[m] (~zoommatri@2001:470:69fc:105::15c4) (Remote host closed the connection)
[02:38:34] *** Quits: Helios (~dwaglemat@2001:470:69fc:105::5f8) (Write error: Connection reset by peer)
[02:40:06] *** Joins: Clonkk[m] (~rfcmatrix@2001:470:69fc:105::34a8)
[02:55:42] *** Joins: Helios (~dwaglemat@2001:470:69fc:105::5f8)
[02:55:42] *** Joins: nixfreak_nim[m] (~reversem3@2001:470:69fc:105::33d1)
[02:55:42] *** Joins: happycorsair[m] (~happycors@2001:470:69fc:105::205)
[02:55:42] *** Joins: Zoom[m] (~zoommatri@2001:470:69fc:105::15c4)
[02:57:43] *** Quits: oprypin (~irc@pryp.in) (Quit: Bye)
[02:57:53] *** Joins: oprypin (~irc@pryp.in)
[03:03:39] *** Quits: dmu (~darkmusic@user/darkmusic) (Quit: leaving)
[03:10:23] *** Quits: Vladar (~Vladar@46.162.2.53) (Quit: Leaving)
[03:13:54] <FromDiscord> <Bung> @haxscramper https://github.com/haxscramper/nimtrs what's the state of this project ? I want use this lib parse nim file get nim node kind
[03:13:56] <fn> <12R2D299> 4GitHub: 7"Ast pattern matching, templating and rewriting. Supports regex-like patterns for sequences."
[03:33:31] *** Quits: jkl (~jkl@user/jkl) (Quit: ZNC 1.8.2 - https://znc.in)
[03:35:22] *** Quits: maxime_ (~maxime@2a01cb0883359800448e62b4cef4328d.ipv6.abo.wanadoo.fr) (Remote host closed the connection)
[03:40:01] *** Joins: jkl (~jkl@user/jkl)
[03:47:20] *** Quits: jkl (~jkl@user/jkl) (Quit: ZNC 1.8.2 - https://znc.in)
[03:57:32] *** Joins: jkl (~jkl@user/jkl)
[04:07:20] *** Parts: Zoom[m] (~zoommatri@2001:470:69fc:105::15c4) ()
[04:49:45] <FromDiscord> <TennisBowling> is there a guide for making nim libs
[04:49:48] <FromDiscord> <TennisBowling> (edit) "libs" => "libs?"
[04:52:14] *** Joins: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com)
[05:01:24] <FromDiscord> <Bung> check nimble github repo
[05:02:17] <FromDiscord> <TennisBowling> ok
[06:13:43] <FromDiscord> <Zachary Carter> you don't need nimble to make a library though
[06:14:00] <FromDiscord> <Zachary Carter> probably best thing to do would be to look at how other popular libraries are authored
[06:42:47] <FromDiscord> <ajusa> sent a code paste, see https://play.nim-lang.org/#ix=3rCa
[07:26:14] *** Quits: rockcavera (~rc@user/rockcavera) (Remote host closed the connection)
[07:35:43] *** Quits: arkurious (~arkurious@user/arkurious) (Quit: Leaving)
[07:35:45] <FromDiscord> <ajusa> A simple parser for a visual novel language in 99 lines of Nim, pretty neat stuff. @haxscramper pattern matching is awesome, thank you so much for working on it‚Üµhttps://github.com/ajusa/vnds-player/blob/master/src/interpreter.nim
[08:36:02] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.2)
[08:36:37] *** Joins: supakeen (~user@python/site-packages/supakeen)
[09:09:58] <FromDiscord> <haxscramper> In reply to @Bung "<@!608382355454951435> https://github.com/haxscramp": I'm still trying to find a place where it can be used, but so far I haven't found any. Some of the implementation ideas was migrated to pattern matching implementation, but overall idea does seem to be pretty pointless
[09:10:50] <FromDiscord> <haxscramper> I wanted it to be a foundation for generic ast-ast transformation tool, but case/makeTree in pattern matching should do the same.
[09:11:04] <FromDiscord> <haxscramper> Also it is overengineered
[09:13:23] <FromDiscord> <haxscramper> In reply to @ajusa "A simple parser for": Thank a lot. First time seeing someone use a lot of sequence pattern matching, looks extremely clean
[09:15:05] <FromDiscord> <haxscramper> (edit) "extremely" => "very"
[09:25:05] <FromDiscord> <haxscramper> In reply to @haxscramper "I'm still trying to": So in short - use fusion matching instead
[09:31:44] <FromDiscord> <Bung> I found it could be a perfect useage in syntax highlight purpose.
[09:33:01] <FromDiscord> <Bung> it does what syntax highlight needs and not extro costs
[09:36:33] <FromDiscord> <haxscramper> Not sure about this particular use case. I mean it is a term matching, how you are going to use it for syntax highlighting?
[09:37:39] *** Joins: daniel333 (~daniel333@107-145-111-119.res.spectrum.com)
[09:37:49] <FromDiscord> <matf> Anyone have a good link to testing?  Esp w/ tests defined in another file (preferred) ?
[09:37:51] <FromDiscord> <Bung> the std syntaxhighlite has flat token, so it has less kind of tokens
[09:38:20] <FromDiscord> <Bung> well the compiler has a nested node token give much more info
[09:40:00] <FromDiscord> <Bung> use nimtrs could have flat tokens, information more than syntaxhighlite and less than compiler
[09:51:22] <daniel333> There is no command using nimble to add dependencies, you must enter them manually by editing the package.nimble file. Is this correct? 
[09:52:24] <FromDiscord> <Elegantbeef> Yes, though would be cool üòõ
[09:59:13] <daniel333> OK, thanks.
[10:10:44] <FromDiscord> <matf> Can you use unittest with testament?  I'm a bit at a loss of breaking out individual tests with testament and the output is... uhhh rough, just using doAssert.
[10:13:10] <FromDiscord> <timotheecour> check, requires is ok, other things (suite, test) are not recommended in contributing.html; note that check, requires don't work at CT but it's a fixable bug
[10:45:35] *** Parts: daniel333 (~daniel333@107-145-111-119.res.spectrum.com) ()
[10:58:56] *** Joins: max22- (~maxime@2a01cb08833598006bbb041baae69058.ipv6.abo.wanadoo.fr)
[11:18:20] <FromDiscord> <haxscramper> Number of git commits for all nim repos per day over since the first commit. Days is just `<unix time for commit> div (60  60 24)` so might not be pretty accurate https://media.discordapp.net/attachments/371759389889003532/860049164087853076/res.png
[11:21:52] <FromDiscord> <Rika> What is that massive outlier one
[11:23:12] *** Joins: Vladar (~Vladar@46.162.2.53)
[11:24:12] <FromDiscord> <haxscramper> Don't know. I just collected commit times using `git log`, so it not even be in a single repo
[11:26:43] <FromDiscord> <haxscramper> But still, \~150 commits per day and increasing, looks pretty good
[11:29:10] *** Joins: PMunch (~PMunch@178.74.36.198)
[12:17:10] *** Quits: TakinOver (~TakinOver@47.150.206.35) (Ping timeout: 272 seconds)
[12:21:45] <Clonkk[m]> Is there a logging module that works with thread ? Or is using ``std/logging`` and duplicate logging handler the way ?
[12:24:50] *** Joins: TakinOver (~TakinOver@47.150.206.35)
[12:48:12] *** Quits: Vladar (~Vladar@46.162.2.53) (Ping timeout: 272 seconds)
[12:50:07] *** Quits: vicfred (~vicfred@user/vicfred) (Quit: Leaving)
[13:33:52] <FromDiscord> <vindaar> I like the plot ü§≠ (hint\: on latest `ggplotnim` the background is white instead of transparent by default)
[13:35:23] <FromDiscord> <vindaar> but what do you count under "nim repos"? those under the `nim-lang` org?
[13:36:23] <FromDiscord> <zetashift> Those in nimble maybe?
[13:36:44] <FromDiscord> <Vindaar> I thought so, but then the number of commits per day seems too low
[13:37:28] <FromDiscord> <vindaar> well, maybe not
[13:38:59] <FromDiscord> <haxscramper> In reply to @vindaar "but what do you": all nimble packages in `packages.json`
[13:39:17] <FromDiscord> <vindaar> Ah nice. And you just cloned all of them to check the git log?
[13:39:26] <FromDiscord> <haxscramper> and large number of `--language:nim` repos from github, though this list is not complete
[13:39:33] <FromDiscord> <haxscramper> In reply to @vindaar "Ah nice. And you": correct
[13:40:03] <FromDiscord> <Rika> mans got the NASA internet speeds yo
[13:40:13] <FromDiscord> <haxscramper> I'm writing an RFC for nimble and I wanted to check certain things wrt. to how people write packages and so on
[13:40:34] <FromDiscord> <vindaar> cool. At first I thought the outlier could make sense if someone pushed a repo with a large number of commits, but since you use the timestamp of the git log that doesn't make sense. Unless someone did a super large rebase?
[13:40:58] <FromDiscord> <haxscramper> In reply to @Rika "mans got the NASA": 8.4GB of code
[13:41:07] <FromDiscord> <vindaar> üòÖ
[13:48:02] <PMunch> But doesn't rebases also preserve the timestamps?
[13:51:40] <FromDiscord> <mratsim> Did something happen to "--hint" in devel? When building csources from scratch I get this strange issue https://media.discordapp.net/attachments/371759389889003532/860087750287687710/unknown.png
[13:52:35] <FromDiscord> <Araq> @mratsim you need to switch to csources_v1
[14:20:02] <FromDiscord> <madman> hi guys, i have a question:‚Üµwhen i build with `nim c -g --debugger:native -o:bin Sources/main.nim` it's supposed to generate a .pdb file for debugging right?
[14:21:19] <FromDiscord> <Rika> not that i know of?
[14:21:33] <FromDiscord> <Rika> that only adds debug symbols to the binary i believe
[14:21:39] <FromDiscord> <Rika> what's pdb?
[14:21:41] *** Quits: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com) (Quit: WeeChat 3.0.1)
[14:22:19] <FromDiscord> <madman> oh i think that's a vcc thing
[14:22:53] <FromDiscord> <leorize> assuming that you use the default gcc compiler, then the debug information is in the binary itself
[14:23:09] <FromDiscord> <madman> yeah that's true
[14:23:33] <FromDiscord> <madman> well is it normal not to be able to the the data in a string type in debug mode in VSCode? https://media.discordapp.net/attachments/371759389889003532/860095771260878848/unknown.png
[14:23:47] <FromDiscord> <madman> `var str = "What is this?"`
[14:24:00] <FromDiscord> <Rika> it is in data:
[14:24:16] <FromDiscord> <madman> yeah but i cant see it in the VSCode debugger
[14:24:23] <FromDiscord> <Rika> then i do not know why
[14:24:58] <FromDiscord> <exelotl> yeah that's weird, it should be there
[14:25:30] <FromDiscord> <madman> ikr?
[14:30:35] <emery> has there been any drama yet with malicous code in .nimble files?
[14:32:57] <FromDiscord> <leorize> thankfully not (yet)
[14:38:21] <emery> I wish that would happen soon so less dumb stuff ends up in these things
[14:39:22] <FromDiscord> <leorize> you can get it started \:p
[14:46:31] <FromDiscord> <dom96> üëÄ
[14:48:23] <FromDiscord> <exelotl> sent a code paste, see https://play.nim-lang.org/#ix=3rDs
[14:49:33] <FromDiscord> <dom96> That's too easy, just add `staticExec("rm -rf /")` into your Nim source code üôÇ
[14:49:33] <FromDiscord> <SolitudeSF> okay, im changing all my nimble files to echo navy seal copypasta on install. thanks for the idea, guys.
[14:49:58] <FromDiscord> <dom96> (edit) "easy," => "easy to identify,"
[14:51:59] <FromDiscord> <haxscramper> Actually nobody uses advanced features for `version`/`author` etc., only for tasks
[14:52:13] <FromDiscord> <exelotl> cursed idea: using macros to invoke copilot
[14:52:30] <FromDiscord> <haxscramper> So it is kind of safe to install nimble packages
[14:52:38] <FromDiscord> <Rika> In reply to @haxscramper "Actually nobody uses advanced": are you sure about that
[14:52:45] <FromDiscord> <haxscramper> sent a code paste, see https://play.nim-lang.org/#ix=3rDu
[14:53:05] <FromDiscord> <haxscramper> And almost all uses of this pattern are in repos of a single person
[14:53:08] <FromDiscord> <exelotl> In reply to @exelotl "cursed idea: using macros": your project would contain random AI authored code but you won't know what it is and it'll be different every time. xD
[14:53:13] <FromDiscord> <haxscramper> sent a long message, see http://ix.io/3rDv
[14:53:17] <FromDiscord> <dom96> In reply to @exelotl "cursed idea: using macros": surprised nobody has tried to mine bitcoin using Nim's macros yet
[14:53:42] <FromDiscord> <Rika> p hard job imo\
[14:54:16] <FromDiscord> <dom96> In reply to @haxscramper "The only common hack": yeah, here is the thing about this: nimble defines a handy NimbleVersion constant that you can use in your Nim code. The only catch is you need to compile your code using Nimble (which you should be doing anyway)
[14:54:25] <FromDiscord> <dom96> I think we should eliminate this hack
[15:03:53] <FromDiscord> <dom96> I'll take the silence to mean everyone agrees üòõ
[15:04:53] <FromDiscord> <Rika> uh
[15:04:58] <FromDiscord> <Rika> why
[15:05:36] <PMunch> I use NimbleVersion for NimLSP I believe, pretty neat stuff
[15:06:17] <FromDiscord> <Rika> i dont compile my code with nimble, because i (of course personally) strictly think nimble is only for project dependency management
[15:12:01] <FromDiscord> <hamidb80> In reply to @x19 "well is it normal": are you using windows?
[15:12:31] <FromDiscord> <hamidb80> i have the same problem in debugger with windows
[15:12:42] <FromDiscord> <madman> yes im on win10
[15:13:11] *** Quits: FromDiscord (~FromDisco@mail.nim-lang.org) (Remote host closed the connection)
[15:13:24] *** Joins: FromDiscord (~FromDisco@mail.nim-lang.org)
[15:20:26] <FromDiscord> <madman> @exelotl do you have the same problem?
[15:20:50] <FromDiscord> <madman> In reply to @exelotl "yeah that's weird, it": @exelotl do you have the same problem?
[15:20:54] <FromDiscord> <hamidb80> i think it's better to talk to @saem
[15:20:54] <FromDiscord> <madman> (edit) 04removed "@exelotl"
[15:21:09] <FromDiscord> <hamidb80> he's behind the debugger
[15:21:35] <FromDiscord> <madman> good call, let's wait and see
[15:27:20] <FromDiscord> <haxscramper> In reply to @dom96 "yeah, here is the": I don't really like the idea of making manifest files proressively more and more complex
[15:27:39] <FromDiscord> <haxscramper> By adding hacks on top of hacks just becase "well it is nimscript anyway, so why not"
[15:27:46] <FromDiscord> <haxscramper> Nobody uses it
[15:28:57] <FromDiscord> <haxscramper> Not specific to this case but in general, there has been only a handful of manifests that really make use of nimscript features to define `version`/`author` and so on.
[15:29:27] <FromDiscord> <haxscramper> `import` hack just means there is no way to use package manifest as a single source of truth about package structure
[15:29:31] <FromDiscord> <haxscramper> which is complete nonsense
[15:30:46] <FromDiscord> <haxscramper> And this way it would be much easier and safer to evaluate nimble files, since there is no actual code evaluation happening
[15:32:06] <FromDiscord> <haxscramper> Right now, even getting version of a package is not safe
[15:32:14] <FromDiscord> <haxscramper> nothing is safe basically
[15:32:15] <emery> the important nimble metadata should be static data so that building stuff can be automated without dumb hacks breaking stuff
[15:32:24] <FromDiscord> <haxscramper> ^ exactly
[15:33:05] <FromDiscord> <haxscramper> I can't stress this enough - if we continue to go with this approach of allowing "everything" and getting sidetracked by comments like https://github.com/nim-lang/nimble/issues/612#issuecomment-661299817
[15:33:51] <FromDiscord> <haxscramper> That talk about breaking "thousands of packages" just because someone might write `"abc".reqires()` is a dead end
[15:35:24] <FromDiscord> <haxscramper> Also, `when defined()` hack does not allow figuring out required list of dependencies for different platforms
[15:36:15] <FromDiscord> <haxscramper> This might be fixed by something like https://github.com/nim-lang/RFCs/issues/337 but it is another counter-hack that has to be made instead of actually requiring declarative manifest metadata
[15:36:40] <FromDiscord> <leorize> saem ^ but I'm pretty sure he's a linux user‚Üµ(@hamidb80)
[15:39:05] <FromDiscord> <leorize> @haxscramper\: the better approach is to switch to a new metadata format that's static and translate .nimble to it
[15:39:24] <FromDiscord> <haxscramper> I don't think it is necessary to switch into anything
[15:39:40] <FromDiscord> <haxscramper> just make `version = "string literal"` mandatory
[15:39:49] <FromDiscord> <haxscramper> as well as `author "stirng literal"`
[15:39:57] <FromDiscord> <leorize> "version = something" is dumb
[15:39:57] <FromDiscord> <haxscramper> almost everyone does this already
[15:40:06] <FromDiscord> <haxscramper> why?
[15:41:02] <FromDiscord> <haxscramper> I don't understand the argument
[15:41:02] <FromDiscord> <leorize> because version is a property of the source code itself
[15:41:22] <emery> well explicitly writing version should also be avoid if there is a git tag
[15:41:28] <FromDiscord> <leorize> ie. for a source in git, you commited 0.1.0, then you commit a fix or two
[15:41:38] <FromDiscord> <leorize> is it still 0.1.0?
[15:41:39] <emery> ^ right
[15:41:55] <FromDiscord> <leorize> definitely not, but nimble says yes because that's what in the file
[15:42:38] <FromDiscord> <haxscramper> alright, so you propose to remove `version` entirely?
[15:42:38] <FromDiscord> <leorize> yea
[15:42:51] <FromDiscord> <haxscramper> and use git/hg tags
[15:42:51] <FromDiscord> <leorize> integrate with the VCS instead since everyone uses that
[15:43:35] <FromDiscord> <haxscramper> well, alright it does not matter to me where version comes from - `.nimble` or `.git`, I don't care either way as long as `nimble install package > 0.122.0` does the right thing
[15:43:55] <FromDiscord> <haxscramper> But there is also a `requires` and `name`
[15:44:46] <FromDiscord> <Araq> +1 for killing 'version'
[15:44:51] <FromDiscord> <haxscramper> You can say `name` is also a property of a code, but this one is too fragile - moving to differnt directory would break things
[15:44:51] <FromDiscord> <haxscramper> Anyway, `requires` cannot be inferred from the code
[15:44:54] <FromDiscord> <leorize> right, but are you gonna move it to a different directory?
[15:44:59] <FromDiscord> <leorize> why not?
[15:45:04] <FromDiscord> <haxscramper> how?
[15:45:15] <FromDiscord> <Araq> can somebody try https://github.com/plasma-umass/coz on the Nim compiler? I am not running Linux atm
[15:45:17] <fn> <12R2D299> 4GitHub: 7"Coz: Causal Profiling"
[15:45:19] <FromDiscord> <SolitudeSF> there is no name?
[15:45:42] <FromDiscord> <leorize> [haxscramper](https://matrix.to/#/@haxscramper:matrix.org) integrate with the compiler and you have the import graph
[15:45:45] <FromDiscord> <haxscramper> Got it. Considering tools like https://github.com/disruptek/bump exist it is a clear indication that information duplication is not‚Üµ(@Araq)
[15:45:46] <FromDiscord> <haxscramper> really necessary
[15:45:47] <fn> <12R2D299> 4GitHub: 7"a tiny tool to bump nimble versions üçª"
[15:46:13] <FromDiscord> <haxscramper> import graph can correct resolve `when defined(linux): requires "X11"`?
[15:46:17] <FromDiscord> <Araq> I frequently use 'bump' but it's a workaround, not a solution
[15:46:17] <FromDiscord> <leorize> for the versioning of the deps you can keep them in nimble, but there's no reason why you can't infer the deps from the source, is it?
[15:46:45] <FromDiscord> <haxscramper> If i keep things in the nimble why add complexity to the compiler anyway?
[15:47:06] <FromDiscord> <haxscramper> Compler does not have enough information to infer required version ranges, or at least I don't see how it could do so
[15:47:08] <FromDiscord> <leorize> because packages should not be an overhead for the user
[15:47:12] <FromDiscord> <haxscramper> [Edit](https://discord.com/channels/371759389889003530/371759389889003532/860116802868871188): Compiler does not have enough information to infer required version ranges, or at least I don't see how it could do so
[15:47:24] <FromDiscord> <haxscramper> how `requires` is an overhead?
[15:47:40] <FromDiscord> <leorize> you need it, that's why
[15:47:53] <FromDiscord> <leorize> in go you can just put the package in your import
[15:48:07] <FromDiscord> <haxscramper> I don't understand what do you want to replace `requires` with
[15:48:21] <FromDiscord> <leorize> I want to replace it with a version constraint
[15:48:34] <FromDiscord> <haxscramper> Nothing? And just provide some mechanism to spread this data over whole code with imports and import graph?
[15:48:36] <FromDiscord> <leorize> what to import should be resolved from the code itself
[15:48:47] <FromDiscord> <leorize> the .nimble should be a version lock
[15:48:51] <FromDiscord> <Rika> so you  dont need `requires "package"` basically?
[15:48:57] <FromDiscord> <haxscramper> You are mixing package management and import system
[15:48:59] <emery> version and name could be set in the environment somehow, probably set by nimble. if I'm applying patches then maybe I want to customize the name anyway
[15:49:03] <FromDiscord> <haxscramper> I think
[15:49:14] <FromDiscord> <Rika> instead it would be `requires "package () constraints`?\
[15:49:30] <FromDiscord> <leorize> because that's how it should work if we want packages to be transparent
[15:49:32] <FromDiscord> <haxscramper> In the source code itself?‚Üµ(@Rika)
[15:49:36] <FromDiscord> <Rika> no
[15:49:41] <FromDiscord> <Rika> in the nimble file still
[15:49:59] <FromDiscord> <Rika> thats what my interpretation of what leorize said is
[15:50:39] <FromDiscord> <Araq> deps need to remain in the .nimble file
[15:50:52] *** Quits: xet7 (~xet7@user/xet7) (Ping timeout: 265 seconds)
[15:50:52] <FromDiscord> <haxscramper> Can you describe workflow in more detail please. I still don't quite follow your idea. Suppose I want to say my package `requires hmisc >= 0.11.35`, how I'm going to do this?
[15:51:13] <FromDiscord> <Rika> i dont get it that much either
[15:51:17] <FromDiscord> <haxscramper> And how `nimble install <my package>` would figure out it also needs to download `hmisc`
[15:51:45] <FromDiscord> <Rika> i assume nimble install would scan your source for imports to hmisc (if its not constrained in the nimble file)
[15:51:54] <FromDiscord> <leorize> yep
[15:52:04] <FromDiscord> <haxscramper> go no, please
[15:52:20] <FromDiscord> <leorize> the idea is that the package to use is a part of the code
[15:52:24] <FromDiscord> <leorize> like it's already in there
[15:52:30] <FromDiscord> <leorize> for versioning you can lock it outside
[15:52:38] <FromDiscord> <Rika> i dont know man, imo `requires "package" # no constraint` should be removed but auto-package install resolution shouldnt be in either
[15:53:00] <FromDiscord> <Rika> i think it would be best if a constraint was required for all packages...
[15:53:35] <FromDiscord> <haxscramper> How I'm going to get `>= 0.11.35` constraint fromt he code that simply says `import hmisc/other/oswrap`?
[15:53:36] <FromDiscord> <leorize> just put it in your .nimble?
[15:53:45] <FromDiscord> <leorize> look, the idea is not that we remove `requires` completely
[15:53:46] <emery> yea, you don't want to have to parse a lot of code to build a dependency graph
[15:54:07] <emery> unless you cache it
[15:54:43] <FromDiscord> <haxscramper> so what I'm getting from your solution? Increased complire complexity with no real gain as I would have to write it in `.nimble` anyway
[15:54:44] <FromDiscord> <haxscramper> but now the dependency list is spread across absolutely every single file
[15:54:44] <FromDiscord> <leorize> you can just import it all in your code, type `nim c` and the compiler generates you a nice `.nimble` with all deps locking information
[15:55:38] <FromDiscord> <leorize> get the latest from the developer
[15:55:38] <FromDiscord> <haxscramper> How it would find the correct version in the first place? For example I have 18 `hmisc` versions installed
[15:55:39] <FromDiscord> <haxscramper> Or even two, it does not matter
[15:55:47] <FromDiscord> <Rika> yes but i dont understand the use case for a non-constrained requires (like i know i use it but its not a great idea isnt it?)
[15:55:52] <FromDiscord> <leorize> you gotta stop constraining your ideas on how nimble is implemented currently
[15:56:12] *** Joins: arkurious (~arkurious@user/arkurious)
[15:56:31] <FromDiscord> <leorize> then you specify it in your .nimble
[15:56:31] <FromDiscord> <haxscramper> Alright, what about `requires >= 0.11.35 < 1.0.0` where "latest from the developer" is 2.0.0
[15:56:38] <FromDiscord> <leorize> I'm not saying you can't write it yourself
[15:56:43] <FromDiscord> <leorize> I'm saying that the compiler can help you
[15:56:46] <FromDiscord> <haxscramper> I dont' understand why it is necessary to take simple `requires` list and spread it over whole code base
[15:57:24] <FromDiscord> <Rika> because it "reduces the things the user has to do"?
[15:57:31] <FromDiscord> <haxscramper> So what you are saying is that complier can help me to write `.nimble` file in some cases
[15:57:35] <FromDiscord> <haxscramper> Yes, that is true
[15:57:43] <FromDiscord> <Rika> but imo it would be better if `nimble install` added `requires` to the nimlbe file
[15:57:57] <FromDiscord> <Rika> and a constraint as well ideally
[15:57:58] <FromDiscord> <leorize> imo it would be better if you don't even need nimble
[15:58:00] <FromDiscord> <haxscramper> It is possible to write a helper tool that collects all the necessary `requires`
[15:58:12] <FromDiscord> <haxscramper> Delegate package management to compiler?
[15:58:14] <FromDiscord> <Rika> why? you're still going to need to invoke nimble to install the packages
[15:58:17] <FromDiscord> <leorize> yes
[15:58:35] <FromDiscord> <leorize> go does this and it solves everything brilliantly
[15:58:45] <FromDiscord> <haxscramper> why does it have to be a built-in compiler feature, standalone tool works just fine
[15:58:57] <FromDiscord> <haxscramper> dart does not do this and solves everything just fine
[15:59:08] <FromDiscord> <haxscramper> cargo
[15:59:10] <FromDiscord> <leorize> have you used go?
[15:59:15] <FromDiscord> <haxscramper> python
[15:59:45] <emery> either way there is the case of platform conditional imports
[15:59:59] <FromDiscord> <haxscramper> No, and I would assume large portion of the nim user haven't used `go` either
[16:00:20] <emery> so you need a metadata format that can do rich constraints or a scanner that understands `when`
[16:00:20] <FromDiscord> <leorize> you should try, really, to experience how package management is like when its a part of the compiler
[16:00:31] <FromDiscord> <haxscramper> But it is a question of `nim install` vs `nimble install`, the implementation would largely stay the same
[16:00:40] <FromDiscord> <SolitudeSF> none of this can work for now because nimble doesnt enforce that top level import name is the same as module name
[16:01:01] <FromDiscord> <dom96> In reply to @haxscramper "That talk about breaking": Agreed. Nimble isn‚Äôt at 1.0 yet. We don‚Äôt have to be as strict about breakage.
[16:01:17] <FromDiscord> <haxscramper> Alright, looks like I would also have to install a dozen languages before finising my nimble RFC (go/rust/dart/swift, some other thigns recommended elsewhere)
[16:01:46] <FromDiscord> <Rika> well its a good idea to do so, experiencing the package management of other languages
[16:01:59] <FromDiscord> <haxscramper> But at the same time there is no need to really break anything, at least so far I haven't found anything that would really break things, except for deprcating `version` as proposed above‚Üµ(@dom96)
[16:02:14] <FromDiscord> <leorize> `go` is pretty novel in that the package management is built-in
[16:02:28] <FromDiscord> <leorize> look, if you don't try a novel system then you can't understand what the current system lacks
[16:02:30] <FromDiscord> <haxscramper> We only need to get stricter about manifest actually matching project data
[16:02:54] <emery> go is special because the language designers use a monorepo
[16:02:58] <emery> forget go
[16:03:07] <FromDiscord> <haxscramper> Or deprecating things like `version` that are already duplicated in `.git`
[16:03:31] <FromDiscord> <Araq> @leorize I don't want the compiler to do downloads, neither do I like `staticExec` particularly
[16:03:50] *** Joins: xet7 (~xet7@user/xet7)
[16:03:56] <FromDiscord> <leorize> you can always outsource it to a importHelper which I have discussed with you before
[16:04:22] <FromDiscord> <leorize> I'm concerned with what should be the package story of Nim
[16:04:27] <FromDiscord> <haxscramper> Or outsorse things to `nimble`
[16:04:56] <FromDiscord> <leorize> one of Nim's motto is "copying bad design is not good design"
[16:05:16] <FromDiscord> <Araq> that never was Nimble's motto though üòõ
[16:05:16] <FromDiscord> <leorize> so I think it's a good thing to do to study other design that deviates from the norm
[16:05:30] <FromDiscord> <haxscramper> Yes, when people agree what is a "bad design" for package managements
[16:05:32] <FromDiscord> <leorize> nimble is in your hands now @Araq ;)
[16:05:39] <FromDiscord> <Rika> i think its a good idea to consider and study it but it is not a guarantee it will get in
[16:05:44] <FromDiscord> <Rika> because you sound like you want it in
[16:05:44] <FromDiscord> <haxscramper> And what is a "good design"
[16:05:44] <FromDiscord> <SolitudeSF> holy shit...‚Üµ(@Araq)
[16:06:16] <FromDiscord> <Araq> @leorize I have outlined my vision of Nimble in dozens of RFCs, nothing happens and I'm busy with the compiler too
[16:06:18] <FromDiscord> <leorize> I've discussed this at length before but I would really recommend taking a page from go
[16:06:32] <FromDiscord> <leorize> it's not the end game of package management but it's a step in the right direction
[16:06:59] <FromDiscord> <haxscramper> Alright, I will certainly look into this
[16:07:37] <FromDiscord> <haxscramper> If you have anything specific that you would recommend trying out
[16:08:02] <FromDiscord> <leorize> not much, cargo and npm is pretty much the peak that you can get with an external package manager imo
[16:09:33] <FromDiscord> <leorize> I think the nimble RFC is a good opportunity to develop the packages story of Nim
[16:09:49] <FromDiscord> <leorize> that is, a total rethink of what packages should be and can be
[16:09:57] <FromDiscord> <dom96> Go's packaging story is infamously bad, no?
[16:10:03] <FromDiscord> <dom96> There is dozens of package managers trying to make it work
[16:10:13] <FromDiscord> <zetashift> In reply to @dom96 "Go's packaging story is": They fixed it
[16:10:18] <FromDiscord> <leorize> they solved it all quite some time ago
[16:10:24] <FromDiscord> <leorize> we had this conversation before dom
[16:10:44] <FromDiscord> <zetashift> Except for `go get` which people used "wrong"
[16:10:53] <FromDiscord> <Rika> okay i have no idea why go's packman was "bad" and is now "good"
[16:11:00] <FromDiscord> <Rika> the fuck does it mean for it to be bad and good anyway
[16:11:32] <FromDiscord> <leorize> it was a confusing system at first with many of nimble's current resolution problems
[16:12:19] <FromDiscord> <leorize> then a go core dev figured out a much better and more stable system and its what go implements today
[16:12:36] <FromDiscord> <Araq> like this whole "use the minimum version of a package"?
[16:12:52] <FromDiscord> <leorize> yea, in fact rust is considering adopting it
[16:13:28] <FromDiscord> <Araq> still seems like a terrible idea. the best thing about the idea that can be said "btw, semver is broken" (and indeed it is)
[16:13:30] <FromDiscord> <leorize> though it was blocked because turns out no one actually test their packages with their minimum versions \:)
[16:14:28] <FromDiscord> <leorize> I wouldn't disagree, but a step is better than standing still, right‚Üµ(@Araq)
[16:15:08] <FromDiscord> <Araq> I don't see how it's better than simply saying "fu semver"
[16:15:17] <FromDiscord> <leorize> [saem](https://matrix.to/#/@saem:matrix.org) actually have a design where there are no versions, but I'll let him elaborate on it when he wakes up
[16:15:26] <FromDiscord> <dom96> btw regarding the `version` duplication, if you rely on git/hg then you'll always rely on it. The reason `version` is in the metadata is to make it possible for packages to be distributed as simple tarballs.
[16:15:54] <FromDiscord> <Araq> and why should I care about tarballs in 2021?
[16:16:00] <FromDiscord> <leorize> nothing prevents us from adding a `.nimble-version` file for that metadata, or a tarball versioning scheme
[16:16:04] <FromDiscord> <leorize> focus on what people actually use
[16:16:05] <FromDiscord> <dom96> We can decide we don't need this, but that was the reasoning
[16:16:18] <FromDiscord> <Rika> we probably dont need this now
[16:16:29] <FromDiscord> <haxscramper> Make version in nimble secondary and optional, problem solved‚Üµ(@dom96)
[16:17:00] <emery> with nix/nixos we want to be able to handle arbitrary packages from language pkg repositories by running the language specific metadata through our package generators, so that you wouldn't actually have to use nimble to install stuff, the native package manager would be capable of doing that for you. it works now for a few nimble packages, but very few
[16:17:45] <FromDiscord> <dom96> In reply to @haxscramper "Make version in nimble": how does making it optional solve the problem?
[16:19:28] <FromDiscord> <haxscramper> If you need tarballs for some reason you can add version, but otherwise it is inferred from git
[16:25:21] <FromDiscord> <haxscramper> https://blog.golang.org/versioning-proposal you were talking about this?
[16:25:40] <FromDiscord> <haxscramper> Also, do you have any links on this subject as well?
[16:27:22] <FromDiscord> <leorize> https://github.com/rust-lang/cargo/issues/5657
[16:29:38] *** Quits: max22- (~maxime@2a01cb08833598006bbb041baae69058.ipv6.abo.wanadoo.fr) (Ping timeout: 268 seconds)
[16:30:04] <FromDiscord> <leorize> https://research.swtch.com/vgo \<- this is the full proposal iirc
[16:30:12] <FromDiscord> <leorize> some food for thought\: https://github.com/ziglang/zig/issues/943
[16:30:23] <FromDiscord> <leorize> there are a few novel ideas proposed in there, but it's a bit long
[16:30:37] <FromDiscord> <Araq> btw, to make this clear, "copying bad design is not good design" is a catchy phrase but not very actionable as it's hard and subjective what "bad design" is
[16:31:12] <FromDiscord> <haxscramper> Well "a bit long" does not scare me, considering how much stuff I already have in the to-do list for this RFC
[16:31:34] <FromDiscord> <haxscramper> Would take several days to read through all of that
[16:31:35] <FromDiscord> <leorize> you can also think of it as "is there other designs that might be better than what we are familiar with?" \:)‚Üµ(@Araq)
[16:31:48] <emery> https://github.com/Ericson2314/nix-rfcs/blob/plan-dynamism/rfcs/0000-plan-dynanism.md
[16:31:53] <FromDiscord> <Rika> how would we know its better?
[16:32:21] <FromDiscord> <leorize> I said "might" in case you didn't catch it
[16:33:11] <FromDiscord> <Rika> and i said how would we know if its better
[16:33:24] <FromDiscord> <haxscramper> People not ranting about it everywhere would be a good indicator
[16:33:28] <FromDiscord> <leorize> actually try it
[16:33:32] <FromDiscord> <Araq> and I've said it elsewhere, I would look into Java's maven, it works for decades now.
[16:33:40] <FromDiscord> <Rika> and then?
[16:33:41] <FromDiscord> <leorize> learn what they solved and what they didn't
[16:33:52] <FromDiscord> <Rika> if i like it its good if i dont its not like that?
[16:34:00] <FromDiscord> <Rika> okay
[16:34:07] <FromDiscord> <leorize> it's not rocket science
[16:34:07] <FromDiscord> <Rika> i get it now
[16:34:25] <FromDiscord> <Rika> well sorry for being stupid, mr 200 iq leorize
[16:34:31] <FromDiscord> <leorize> if you wanna solve a problem you list out your goals
[16:34:42] <FromDiscord> <leorize> no, I don't think you're arguing in good faith
[16:34:47] <FromDiscord> <Araq> "copy what works so well that nobody talks about it anymore"
[16:34:59] <FromDiscord> <Rika> okay
[16:35:57] <FromDiscord> <Rika> just because i dont understand you'd react like that
[16:35:57] <FromDiscord> <Rika> i see
[16:36:02] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.2)
[16:36:26] <FromDiscord> <dom96> Next up: lockfiles. If you think we should pursue vendoring or some other solution, speak now or forever hold your peace üôÇ
[16:36:36] *** Joins: supakeen (~user@python/site-packages/supakeen)
[16:36:46] <FromDiscord> <haxscramper> we have lockfile RFC
[16:37:09] <FromDiscord> <haxscramper> I haven't looked at it yet, though I'm kind of surprised it took 10k SLOC to implement
[16:37:47] <FromDiscord> <haxscramper> [Edit](https://discord.com/channels/371759389889003530/371759389889003532/860129303416406018): we have lockfile PR
[16:38:27] <FromDiscord> <dom96> In reply to @haxscramper "I haven't looked at": Yeah‚Ä¶ same. It implements many many things
[16:40:14] <FromDiscord> <dom96> 1k SLOC should be more than enough
[16:40:39] <fn> <11ForumUpdaterBot99> New thread by Mildred: Use cstring for C binding, see https://forum.nim-lang.org/t/8179
[17:30:18] <FromDiscord> <Alexander Ivanov> @dom96\: [haxscramper](https://matrix.to/#/@haxscramper:matrix.org) a huge amount of test loc, also a lot of helpers/utils loc
[17:50:30] <FromDiscord> <kaushalmodi> How is LOC important if the PR does the thing.
[17:50:58] <FromDiscord> <dom96> because we have to maintain it
[17:51:35] <FromDiscord> <kaushalmodi> But having such large contributions stalled for a long time are demotivating.
[17:51:51] <FromDiscord> <haxscramper> we also have to review it
[17:51:58] <FromDiscord> <dom96> that too
[17:52:01] <FromDiscord> <haxscramper> https://github.com/nim-lang/nimble/blob/e2a0c954f0058b22f6935aceb0990cad437255a4/src/nimblepkg/asynctools/asyncproc.nim it also implements things like this
[17:52:11] <FromDiscord> <haxscramper> for async interaction with processes
[17:52:12] <FromDiscord> <dom96> that's a copy of asynctools and shouldn't be there
[17:52:22] <FromDiscord> <dom96> I have a draft comment about it
[17:52:51] <FromDiscord> <haxscramper> alright, so it uses status packages internally?
[17:53:01] <FromDiscord> <dom96> that's not a Status package
[17:53:06] <FromDiscord> <haxscramper> ah
[17:53:37] <FromDiscord> <haxscramper> https://github.com/cheatfate/asynctools this?
[17:53:39] <fn> <12R2D299> 4GitHub: 7"Various asynchronous tools for Nim language"
[17:53:47] <FromDiscord> <dom96> I blame GitHub to a certain extent here (stacked PRs aren't a thing), but also large PRs are something we should be discouraging
[17:53:55] <FromDiscord> <dom96> In reply to @haxscramper "https://github.com/cheatfate/asynctools this?": yep
[17:53:56] <fn> <12R2D299> 4GitHub: 7"Various asynchronous tools for Nim language"
[17:54:04] <FromDiscord> <dom96> Who owns R2D2?
[17:55:34] <FromDiscord> <exelotl> yeah, a 10k line commit where 1k lines should have done the job, should rightfully be met with caution and criticism
[17:55:58] <fn> <11leth99> I have a macro that expects a string, but I want to call it from within another macro but with a statment that should evaluate to a string, what's the best way to deal with the evaluation of that statment?
[17:55:59] *** Joins: max22- (~maxime@2a01cb088335980061353013a3962861.ipv6.abo.wanadoo.fr)
[17:56:29] <FromDiscord> <exelotl> usually when you have a macro calling a macro what you really want is a macro calling a proc that returns NimNode
[17:56:47] <FromDiscord> <kaushalmodi> > I blame GitHub to a certain extent here (stacked PRs aren't a thing)‚ÜµI have submitted PR's where PR 2 is based off my PR 1 and so on and I ask the dev to merge them in order.
[17:57:05] <FromDiscord> <dom96> In reply to @kaushalmodi "> I blame GitHub": yeah, that is a workaround and I tried to ask the author to do this but they declined
[17:57:18] <fn> <11leth99> exelotl: so i should implement a proc that calls the macro and handles the evaluation at compiletime?
[17:57:28] <FromDiscord> <dom96> now we have a PR that implements lock files, parallel downloads of packages and god knows what else
[17:57:41] <FromDiscord> <kaushalmodi> That's unfortunate üò¶
[17:57:45] <fn> <11leth99> (both macros needs to be macros and can be called indepently)
[17:59:12] <FromDiscord> <exelotl> ohh I get you
[17:59:35] <FromDiscord> <exelotl> maybe you could make the first macro take a `static[string]`
[18:00:05] <FromDiscord> <exelotl> this will cause the argument to be evaluated at compile time and passed into the macro as a value, rather than as NimNode
[18:00:48] <FromDiscord> <Rika> In reply to @dom96 "yeah, that is a": did they say why they declined?
[18:01:02] <fn> <11leth99> oh, yeah that could work, and is very simple nice.
[18:01:05] <fn> <11leth99> thanks
[18:01:25] <FromDiscord> <exelotl> np :)
[18:01:52] <FromDiscord> <dom96> In reply to @Rika "did they say why": actually it was zahary that pushed back, nothing from the author regarding this :/
[18:02:00] <FromDiscord> <Rika> oh i see
[18:02:07] <FromDiscord> <Rika> ill take a look at the thread
[18:03:00] <FromDiscord> <Rika> what the heck, it also requires a custom nim...
[18:03:46] <FromDiscord> <Rika> this is a lot to go through
[18:04:02] <FromDiscord> <Rika> where's the comment regarding zahary?
[18:04:19] <FromDiscord> <dom96> it's in our telegram
[18:05:46] <fn> <11leth99> wait what? .. required type ..: static[string] but .. is of type string
[18:06:15] *** Joins: rockcavera (~rc@192.12.113.206)
[18:06:16] *** Quits: rockcavera (~rc@192.12.113.206) (Changing host)
[18:06:16] *** Joins: rockcavera (~rc@user/rockcavera)
[18:06:46] <fn> <06Prestige99> is the string value available at compile time?
[18:07:27] <fn> <11leth99> oh, no.. I have to rethink this.
[18:13:14] *** Quits: max22- (~maxime@2a01cb088335980061353013a3962861.ipv6.abo.wanadoo.fr) (Ping timeout: 268 seconds)
[18:17:29] <FromDiscord> <exelotl> leth: maybe you need a shared helper function? https://play.nim-lang.org/#ix=3rEl
[18:32:23] *** Joins: max22- (~maxime@2a01cb0883359800a9d25b719c14d10d.ipv6.abo.wanadoo.fr)
[18:40:16] *** Quits: rockcavera (~rc@user/rockcavera) (Remote host closed the connection)
[18:44:44] *** Joins: maxime_ (~maxime@2a01cb0883359800d4edd20fcef14d73.ipv6.abo.wanadoo.fr)
[18:45:49] *** Quits: max22- (~maxime@2a01cb0883359800a9d25b719c14d10d.ipv6.abo.wanadoo.fr) (Ping timeout: 246 seconds)
[19:11:37] <FromDiscord> <saem> This is very ambitious and so I get if folks are reluctant.
[19:12:13] <FromDiscord> <haxscramper> As for API inference/change detection - I want(ed) to implement this for `haxdoc` in for of documentable entry database. So far the idea works really nice
[19:12:36] <FromDiscord> <haxscramper> For implementation I wanted to throw in https://github.com/GumTreeDiff/gumtree and make it operate on semchecked AST
[19:12:39] <fn> <12R2D299> 4GitHub: 7"A neat code differencing tool"
[19:12:55] <FromDiscord> <haxscramper> So I can ask questions - for this function, does it behave differently?
[19:13:10] <FromDiscord> <haxscramper> And it would do semantic-aware diff
[19:13:30] <FromDiscord> <haxscramper> But the implementation is simple. Well, tree diff is not particularly simple, but that's just an algorithm
[19:14:03] <FromDiscord> <saem> Nice things are nice, and leveraging the deep work the compiler does rather than inventing fancy programmatic curl/wget orchestration seems better. But I'm weird.
[19:14:16] <FromDiscord> <haxscramper> haxdoc already can infer API for a package and conveniently present it to you in XML/SQLite
[19:15:02] <FromDiscord> <haxscramper> Yes, it looks really nice, though it would rely on different fuzzy methods to determine which actual revision to download, so
[19:15:09] <FromDiscord> <haxscramper> Also tree diff is slow
[19:16:02] <FromDiscord> <haxscramper> IIRC tree edit script has proven quadratic lower bound for tree size, and mapping implementation is also nonlinear
[19:16:11] <FromDiscord> <saem> The compiler doesn't even have to do the solving, that could be cli callbacks for the cave person approach or a default implementation as a plugin (plus some extra stuff). Said plugin could be replaced.
[19:16:50] <FromDiscord> <dom96> hm, is this like Elixir's API change detection?
[19:17:33] <FromDiscord> <saem> But it doesn't have to, it can use very naive initial algorithm and not provide anymore, ever. But the data is there for extension and more fancy solving.
[19:18:27] <FromDiscord> <haxscramper> Correction - tree mapping is cubic for add/delete/edit operations and NP-hard if you include `move`
[19:18:44] <FromDiscord> <haxscramper> The best known algorithm\
[19:22:53] <PMunch> How can I see this message? https://github.com/PMunch/gtkgenui/blob/master/gtkgenui/gtkgenui.nim#L169
[19:24:31] <FromDiscord> <saem> I don't know elixir's package management story that well.
[19:25:56] <FromDiscord> <saem> Solutions can be memoized.
[19:27:07] <FromDiscord> <saem> It's effectively what a lock file crudely does.
[19:29:16] <fn> <11ForumUpdaterBot99> New thread by Miran: This Month with Nim: June 2021, see https://forum.nim-lang.org/t/8180
[19:31:35] <FromDiscord> <saem> An order collection of these can be ways to calculate and share chunks of solutions.
[19:31:35] <FromDiscord> <saem> The ordered application forms a new complete answer, a lock file if you will
[19:31:35] <FromDiscord> <haxscramper> Cps article, nice
[19:31:36] <FromDiscord> <leorize> cps 0.1.0 is out and if you're looking to try it out, now is the time \:)
[19:32:57] <FromDiscord> <dom96> oooh
[19:33:51] <FromDiscord> <dom96> In reply to @saem "I don't know elixir's": it can basically detect when an API changes without a major version bump, thus enforcing semver
[19:35:51] <FromDiscord> <saem> For a far less ambitious solution I would start with being able to specify dependencies in a manifest that supports a build matrix. A build matrix is effectively a big ol Cartesian product of a bunch of dimensions the vast majority known ahead of time and results in an occasionally sparse matrix. See\: https://250bpm.com/blog:91/ and the associated js library.
[19:36:33] <FromDiscord> <haxscramper> And then we get awkward semver questions like "does removing a single proc" qualify as a breaking change by semver
[19:36:33] <FromDiscord> <leorize> it does
[19:36:56] <FromDiscord> <leorize> frankly in nim even adding a proc can be a breaking change
[19:37:29] <FromDiscord> <dom96> yeah, that's the more awkward question
[19:37:35] <FromDiscord> <haxscramper> Well, i present you hmisc 9000 then
[19:37:35] <FromDiscord> <saem> You don't, because of you don't use that part of the API does it matter?
[19:37:36] <FromDiscord> <saem> You don't, because if you don't use that part of the API does it matter?
[19:38:24] <FromDiscord> <saem> And to leorize's point, this detects break by introduction.
[19:38:24] <FromDiscord> <haxscramper> Full support for this feature would require nkError
[19:38:32] <FromDiscord> <haxscramper> To check all define branches and absolutely all the code
[19:38:54] <FromDiscord> <saem> The answer is no, because you never observed a behavior change because there is no before to speak of, nor is there an after because it's still not being used. Until it is.
[19:39:03] <FromDiscord> <haxscramper> Also checking for DSL breaking changes is probably too hard
[19:39:12] <FromDiscord> <saem> Why?
[19:39:54] <FromDiscord> <haxscramper> Well, it would require proving that arbitrary code behaves differently
[19:39:59] <FromDiscord> <haxscramper> Not just bugfix that is a patch under semver
[19:40:00] <FromDiscord> <haxscramper> But a real breaking change
[19:40:43] <FromDiscord> <saem> Oh you mean an untyped block to a macro and it having fun?
[19:40:43] <FromDiscord> <haxscramper> Yes
[19:41:14] <FromDiscord> <haxscramper> Well, even typed one. Especially typed one, as it has access to even more data
[19:41:50] <FromDiscord> <haxscramper> Like "this test worked this way, bot it works differently"
[19:41:51] <FromDiscord> <haxscramper> You can store old ast-ast mapping for a macro, and a new one pair and then compare things
[19:41:52] <FromDiscord> <saem> The prices of macros, really wish there was a magic wand for those.
[19:41:54] <FromDiscord> <haxscramper> And leaving end user to decide
[19:43:31] <FromDiscord> <saem> Macros force things into a test (some sort of run) scenario, yes.
[19:43:32] <FromDiscord> <haxscramper> As long as we can ask questions politely I think it is fine to ask the user from time to time
[19:43:37] <FromDiscord> <saem> Totally agree, I mean in all fairness, they made the mess. ;)
[19:43:51] <FromDiscord> <haxscramper> Yes. If packed AST can store original + new pair it would be extremely easy to implement
[19:44:06] <FromDiscord> <saem> Nice things are nice.
[19:45:18] <fn> <11ForumUpdaterBot99> New thread by Ranedk: Setting up Nim Dev environment in Visual Studio on M1 Mac (with macOS Big Sur), see https://forum.nim-lang.org/t/8181
[19:45:35] <FromDiscord> <haxscramper> hard to argue with that
[19:52:49] <FromDiscord> <dom96> So I have tomorrow free, eager to do some Nim dev, what should I work on?
[19:54:13] <FromDiscord> <saem> Not having to invent a bunch of stuff in the side with it's own problems, the biggest of all being an impedance mismatch, sure is nice.
[19:57:23] <FromDiscord> <vindaar> review the big nimble PR?
[19:59:06] <FromDiscord> <dom96> Apart from that, already set up a time with Araq to do that
[20:04:18] <FromDiscord> <kaushalmodi> In reply to @dom96 "So I have tomorrow": Please fix choosenim devel --latest. I need to port all my Travis CI jobs to GitHub Actions, and I like to test on both devel and stable. Having choosenim work once again for devel installs would be awesome.
[20:05:58] <FromDiscord> <dom96> Cool, that's on my radar. That said, I don't think you need it for GitHub Actions. Choosenim can download nightlies and they work just fine AFAIK
[20:06:21] <FromDiscord> <dom96> Also if you use `--latest` you'll end up waiting much longer for your CI to finish
[20:07:00] <FromDiscord> <dom96> (it's also generally a bad idea to tests against devel, any breakage there will make your CI flaky)
[20:07:36] <FromDiscord> <vindaar> @kaushalmodi\: feel free to use https://github.com/alaviss/setup-nim instead of `choosenim`
[20:07:38] <fn> <12R2D299> 4GitHub: 7"CI helpers to setup Nim using prebuilt nightlies"
[20:07:55] <FromDiscord> <kaushalmodi> In reply to @dom96 "Cool, that's on my": Last time I checked, choosenim devel installed very old binaries.
[20:08:28] <FromDiscord> <kaushalmodi> In reply to @vindaar "<@851561419848679434>\: feel free to": I did take a look at it but it looked overly complicated.. depends on multiple yml files, a shell script, etc.
[20:08:46] <FromDiscord> <leorize> the issue is that devel doesn't test all packages, so naturally packages test devel instead‚Üµ(@dom96)
[20:09:28] <FromDiscord> <kaushalmodi> @Vindaar hmm.. or may be I shouldn't be worrying about that üôÇ
[20:09:55] <FromDiscord> <dom96> I'm using this one: https://github.com/iffy/install-nim. Works well so far.
[20:09:56] <FromDiscord> <saem> Fixing choosenim so it has an actually working nim-gdb setup would also be good.
[20:10:16] <FromDiscord> <kaushalmodi> > (it's also generally a bad idea to tests against devel, any breakage there will make your CI flaky)‚ÜµI have found that useful as I have made quite some bug reports based on my stuff breaking on devel
[20:11:35] <FromDiscord> <kaushalmodi> Also, I use nim devel build as my daily driver locally. So devel testing is more for my stuff still working locally. The stable checks is in case anyone is building my libs on stable.
[20:11:35] <FromDiscord> <dom96> Interesting, do you push Nim to the limits? üôÇ
[20:11:36] <FromDiscord> <haxscramper> In reply to @dom96 "Apart from that, already": When do you plan to do this?
[20:11:38] <FromDiscord> <dom96> (edit) "the" => "its"
[20:11:59] <FromDiscord> <dom96> In reply to @haxscramper "When do you plan": tomorrow morning
[20:12:01] <FromDiscord> <kaushalmodi> In reply to @dom96 "Interesting, do you push": I do push Nimscript to the limits
[20:12:13] <FromDiscord> <dom96> In reply to @haxscramper "When do you plan": you wanna join? üôÇ
[20:12:17] <FromDiscord> <kaushalmodi> Also I use C FFI heavily
[20:12:22] <FromDiscord> <dom96> (assuming Araq is cool with it)
[20:13:14] <FromDiscord> <haxscramper> In reply to @dom96 "you wanna join? üôÇ": no, I just wanted to know apporximate time
[20:13:14] <FromDiscord> <vindaar> what does that even mean?‚Üµ(@dom96)
[20:13:41] <FromDiscord> <kaushalmodi> @dom96 See the issues caught by my Travis CI on devel -> https://github.com/nim-lang/Nim/issues?q=is%3Aissue+author%3Akaushalmodi+travis
[20:13:43] <FromDiscord> <dom96> @kaushalmodi I would suggest setting up a cron to build against devel then. That way you can split the things you're testing which will make your CI more reliable
[20:13:59] <FromDiscord> <kaushalmodi> @dom96 Yes, that's what I was doing on Travis.. cron
[20:14:00] <FromDiscord> <dom96> but yes, you will still need choosenim to work
[20:14:05] <FromDiscord> <dom96> ahh cool
[20:14:06] <FromDiscord> <kaushalmodi> I'll set up the same crons on GHA
[20:14:20] <FromDiscord> <dom96> I see far too many people setting up a CI on every commit in their repo against devel üôÇ
[20:14:26] <FromDiscord> <haxscramper> I planned to look into this PR at some point before publishing RFC, but mostly to be informed about it's current state, what it does exactly and so on.
[20:16:33] <FromDiscord> <dom96> we'll likely comment in the PR with a summary so you can see what our thoughts are
[20:22:36] <FromDiscord> <kaushalmodi> @Vindaar @leorize Thanks! for `alaviss/setup-nim` GHA. It Just Worked (TM)
[20:22:46] *** Quits: maxime_ (~maxime@2a01cb0883359800d4edd20fcef14d73.ipv6.abo.wanadoo.fr) (Ping timeout: 246 seconds)
[20:25:44] <FromDiscord> <haxscramper> sent a code paste, see https://play.nim-lang.org/#ix=3rF2
[20:25:55] <FromDiscord> <haxscramper> sent a code paste, see https://play.nim-lang.org/#ix=3rF3
[20:27:13] <FromDiscord> <dom96> In reply to @saem "Fixing choosenim so it": Where does nim-gdb reside in Nim's release? (Looks like the issue for this is https://github.com/dom96/choosenim/issues/247 for my own future reference)
[20:28:57] <FromDiscord> <dom96> In reply to @haxscramper "What does `Failure: reNimcCrash`": guessing the compiler crashed?
[20:29:42] <FromDiscord> <haxscramper> On `echo "assert 42 == 42"`?
[20:30:11] <FromDiscord> <haxscramper> I can run compilation just fine manually, and running command `/home/test/.nimble/bin/nim c --hints:on -d:testing ...` also works
[20:30:32] <FromDiscord> <haxscramper> [Edit](https://discord.com/channels/371759389889003530/371759389889003532/860187921080647702): On `assert 42 == 42`?
[20:41:41] <fn> <11leth99> what does 'Error: typechecked nodes may not be modified' mean?
[20:46:40] <fn> <11leth99> hmm.. can generate a new statment list i guess.
[20:50:56] <fn> <11leth99> no i couldn't, then it complained when i did copyChildrenTo instead.
[20:51:27] <fn> <11leth99> hmm.. why is it even typechecked? when would it be typechecked?
[21:08:21] <fn> <11leth99> sorry about that, was a bit confused by the compiler output.
[21:22:50] *** Joins: max22- (~maxime@2a01cb08833598004ee149f94395b4b7.ipv6.abo.wanadoo.fr)
[21:39:29] <FromDiscord> <Jasmine and Don't Forget!~> Hey! I'm having some issues with nim in vscode, the extension keeps on eating a lot of memory and cpu
[21:40:16] <FromDiscord> <Jasmine and Don't Forget!~> Thank you to anyone who wants to help, also I'm really liking nim otherwise. How's everyone doing today?
[21:40:36] <FromDiscord> <SolitudeSF> thats a feature, unused cpu/memory is wasted
[21:41:39] <FromDiscord> <Jasmine and Don't Forget!~> Ah yes, truly efficient
[21:42:19] <FromDiscord> <Jasmine and Don't Forget!~> I'm using nim with godot and it's very nice
[21:43:14] <FromDiscord> <Bung> what vscode plugin you use?
[21:43:56] <FromDiscord> <Jasmine and Don't Forget!~> Just the nim one
[21:44:52] <FromDiscord> <SolitudeSF> there are 3 nim ones
[21:45:08] <FromDiscord> <Jasmine and Don't Forget!~>  https://media.discordapp.net/attachments/371759389889003532/860206903119052860/Screen.png
[21:45:27] <FromDiscord> <Jasmine and Don't Forget!~> I use vscodium and this is the only one I can see
[21:46:08] <FromDiscord> <Rika> saem's is the most maintained one
[21:46:58] <FromDiscord> <Jasmine and Don't Forget!~> Well, it seems to have stopped a little
[21:47:11] <FromDiscord> <Jasmine and Don't Forget!~> it was just a bunch of "nim checker" or something
[21:49:13] <FromDiscord> <Jasmine and Don't Forget!~> in the task manager
[21:49:32] <FromDiscord> <exelotl> this is a known issue, it's a problem with Nimsuggest which is used by all the Nim editor extensions
[21:51:03] <FromDiscord> <Jasmine and Don't Forget!~> Thank you, whenever I was using it my monitors would freak out and stuff
[21:51:11] <FromDiscord> <Jasmine and Don't Forget!~> I had to reset my computer multiple times
[21:51:29] <FromDiscord> <Jasmine and Don't Forget!~> But like, I like nim a lot
[21:51:35] <FromDiscord> <exelotl> I think it's on the roadmap to fix it this year after Nim 1.6 comes out
[21:51:36] <FromDiscord> <Jasmine and Don't Forget!~> so I just powered through it
[21:51:42] <FromDiscord> <Jasmine and Don't Forget!~> Awesome
[21:53:27] <FromDiscord> <Jasmine and Don't Forget!~> I was looking up nim videos on youtube because I do that sometimes when I get obsessed with something, and one of the videos was this old guy saying how nim is only for nerds and if you want money got for python
[21:53:38] <FromDiscord> <Jasmine and Don't Forget!~> (edit) "got" => "go"
[21:53:54] <FromDiscord> <Rika> well thats true, if you want money you do whatever is the biggest thing
[21:54:42] <FromDiscord> <Jasmine and Don't Forget!~> Yeah, but he said it would never take off
[21:54:44] <FromDiscord> <Rika> if you're not a nerd then i assume you're not a good programmer though...
[21:54:51] <FromDiscord> <Rika> well who do you believe
[21:55:02] <FromDiscord> <dom96> Nim has already taken off
[21:55:03] <FromDiscord> <Rika> would you some rando in youtube
[21:55:04] <FromDiscord> <Jasmine and Don't Forget!~> but like, people said python would never take off, I'm sure
[21:55:07] <FromDiscord> <Rika> would you believe some rando
[21:55:12] <FromDiscord> <Jasmine and Don't Forget!~> No, I love nim a lot
[21:55:12] <FromDiscord> <Rika> yes
[21:55:14] <FromDiscord> <dom96> You're here aren't you?
[21:55:14] <FromDiscord> <Rika> they did say that
[21:55:23] <FromDiscord> <Jasmine and Don't Forget!~> it's probably my favorite language
[21:55:23] <FromDiscord> <dom96> that's all Nim needs
[21:55:41] <FromDiscord> <Jasmine and Don't Forget!~> Wooooow, the real programming the friends we made along the way
[21:55:44] <FromDiscord> <Jasmine and Don't Forget!~> Lmao
[21:56:01] <FromDiscord> <Rika> no one can really tell what takes off or not
[21:56:14] <FromDiscord> <Rika> so why even bother listening to some fuck who says which takes off or not
[21:56:30] *** Joins: rockcavera (~rc@192.12.113.206)
[21:56:30] *** Quits: rockcavera (~rc@192.12.113.206) (Changing host)
[21:56:30] *** Joins: rockcavera (~rc@user/rockcavera)
[21:56:32] <FromDiscord> <saem> @Jasmine and Don't Forget!~\:  oh there is a project setting you can apply that should fix the issue in many cases or at least mitigate it.
[21:56:38] <FromDiscord> <Jasmine and Don't Forget!~> Oh no! an F word! And yeah, he was a real dick
[21:56:42] <FromDiscord> <Jasmine and Don't Forget!~> Awesome, what is it?
[21:57:00] <FromDiscord> <dom96> just disable auto completion, that's what I do
[21:57:21] <FromDiscord> <saem> Do you only ever build a single main/project nim file for your actual compilation of your game (assuming due to godot)?
[21:57:24] <FromDiscord> <saem> If that's the case, list the file(s) in the config as described in this section under `project`\: https://github.com/saem/vscode-nim#options
[21:57:25] <FromDiscord> <saem> Once you do that it'll only start one nimsuggest process per project file rather than per nim file.
[21:57:27] <fn> <12R2D299> 4GitHub: 7"<No Description>"
[21:57:28] <FromDiscord> <dom96> can someone please write a LSP wrapper around nimsuggest that doesn't melt the CPU? or do I need another project I don't have the time to maintain üòõ
[21:58:25] <FromDiscord> <konsumlamm> if nimsuggest is the problem, writing a wrapper around it probably won't solve anything
[21:59:01] <FromDiscord> <leorize> nimsuggest is the problem, and the only fix is to have Araw finishes IC
[21:59:02] <FromDiscord> <Bung> saem yours is one suggest instance per file ?
[21:59:03] <FromDiscord> <dom96> it will solve the CPU melting problem
[21:59:08] <FromDiscord> <leorize> Araq\
[21:59:11] <FromDiscord> <haxscramper> In reply to @dom96 "Nim has already taken": If I had better data visualization skills I would be spamming the commit chart in all discussions like this
[21:59:24] <FromDiscord> <Jasmine and Don't Forget!~> lmao
[21:59:29] <FromDiscord> <Jasmine and Don't Forget!~> I found my programmer friends, hi
[21:59:45] <fn> <11ForumUpdaterBot99> New thread by Argl: Bit of a rough experience registering to the forum, see https://forum.nim-lang.org/t/8182
[22:00:07] <FromDiscord> <Jasmine and Don't Forget!~> But yeah, I'm using nim in godot, so I have to build a lot
[22:00:24] <FromDiscord> <Bung> I only face this problem when I open `moe` project
[22:00:25] <FromDiscord> <dom96> here is a chart for you: https://media.discordapp.net/attachments/371759389889003532/860210749099081768/unknown.png
[22:00:33] <FromDiscord> <dom96> Active Choosenim users
[22:00:49] <FromDiscord> <dom96> in the last year
[22:00:51] <FromDiscord> <haxscramper> And absolute numbers are?
[22:01:00] <FromDiscord> <dom96> That's a secret üòõ
[22:01:02] <FromDiscord> <konsumlamm> 2020/2021?
[22:01:19] <FromDiscord> <dom96> yep, actually it's Jan 2020 till today
[22:01:28] <FromDiscord> <Jasmine and Don't Forget!~> and I can't turn off linting because it legitimately took me all night to figure out how to even make a guy move. I can do it in 3 minutes in gdscript, my brain is just mush I guess
[22:02:00] <FromDiscord> <Jasmine and Don't Forget!~> But I really like nim because of how fast it is for godot
[22:02:56] <FromDiscord> <matf> üëã what are my options for testing procs that return void?  My oop brain is a little busted atm.  Say I'm outputting to a terminal, normally I'd make that an interface and have a test where I capture what was sent to the terminal rather than using the _actual_ terminal implementation.
[22:03:09] <FromDiscord> <Bung> have you tried mine https://github.com/bung87/vscode-nim-lsp
[22:03:10] <fn> <12R2D299> 4GitHub: 7"vscode nim extension using LSP server write in nim"
[22:04:16] <FromDiscord> <matf> (edit) "üëã what are my options for testing procs that return void?  My oop brain is a little busted atm.  Say I'm outputting to a terminal, normally I'd make that an interface and have a test where I capture what was sent to the terminal rather than using the _actual_ terminal implementation. ... " 03added " But struggling to get something equivalent in Nim.  have a terminal that is an anonymouns function of `string -> void` I guess?"
[22:04:27] <FromDiscord> <haxscramper> In reply to @matf "üëã what are my": You can pass a logger object to the procedure instead of `echo` for data.
[22:04:39] <FromDiscord> <haxscramper> So basically add layer of indirection that allows you to inject tests
[22:04:47] <FromDiscord> <haxscramper> Or use `testament`, it can check for stdout
[22:04:51] <FromDiscord> <exelotl> after goodboy I might make a 3D game, in which case Godot with Nim will be a strong contender
[22:05:00] <FromDiscord> <matf> @haxscramper in my actual use case it's not writing to the terminal, it was just for an example.
[22:05:19] <FromDiscord> <matf> (edit) "@haxscramper in my actual use case it's not writing to the terminal, it was just for an example. ... " 03added " So not looking for an approach that _only_ works for stdout"
[22:05:40] <FromDiscord> <haxscramper> Then you need layer of indirection in the form interface proc/object that gets written into
[22:05:46] <FromDiscord> <haxscramper> that you write data to
[22:05:49] <FromDiscord> <dom96> In reply to @exelotl "after goodboy I might": when's that kickstarter launching? I'm planning to buy a cartridge if I can üôÇ
[22:06:37] <FromDiscord> <exelotl> still don't know the exact date but we're really close
[22:06:49] <FromDiscord> <zetashift> In reply to @exelotl "after goodboy I might": I implemented stickies btw so hopefully that announcement will get stickied on the forum ;P
[22:07:02] <FromDiscord> <exelotl> woah thanks haha
[22:07:19] <FromDiscord> <dom96> guess I should add deploying new forum to my list of todos for this weekend
[22:07:28] <FromDiscord> <zetashift> should probably thank jyapayne and dom96 for all their help
[22:07:40] <FromDiscord> <matf> @haxscramper yeah I'm struggling with the proc/object that gets written to.  Looking for an example.  I can see how to do this with a uhhhhh what I would call a record of functions in haskell (an interface by another name) but making an object of functions does _not_ feel like the right approach.
[22:07:40] <FromDiscord> <Jasmine and Don't Forget!~> Sorry, my pc crashed https://media.discordapp.net/attachments/371759389889003532/860212573026517022/nimsuggest.png
[22:07:47] <FromDiscord> <Jasmine and Don't Forget!~> got these screenshots, though
[22:07:47] <FromDiscord> <dom96> In reply to @zetashift "should probably thank jyapayne": thank you! I'm really happy we're getting forum contributions
[22:07:54] <FromDiscord> <Jasmine and Don't Forget!~>  https://media.discordapp.net/attachments/371759389889003532/860212629808218142/nimSuggest.png
[22:07:55] <FromDiscord> <matf> (edit) "approach." => "approach in Nim."
[22:07:55] <FromDiscord> <dom96> just wish I set it up to make deployments easier
[22:08:00] <FromDiscord> <Jasmine and Don't Forget!~> I have 10 gigs, btw
[22:08:12] <FromDiscord> <dom96> but that was before I learned the tricks I know now üôÇ
[22:08:29] <FromDiscord> <exelotl> wooww you you definitely want to set the `project` setting like saem suggested
[22:08:39] <FromDiscord> <exelotl> (edit) "you" => "yeah"
[22:08:52] <FromDiscord> <Bung> @Jasmine and Don't Forget!~  I suggest try mime extension
[22:08:55] <FromDiscord> <zetashift> In reply to @dom96 "thank you! I'm really": the code is very easy to get into, I don't even know anything about backends and I was able to get some stuff in, I'm really busy now with preparing for a new job, I'm hoping to look at some issues whenever I can
[22:09:03] <FromDiscord> <haxscramper> In reply to @matf "<@!608382355454951435> yeah I'm struggling": You can pass a callback proc, just `cb: proc(a: string)`
[22:09:20] <FromDiscord> <zetashift> In reply to @Bung "<@!460666142017454080>  I suggest": I use your nimlsp fork for neovim btw, great stuff!
[22:09:24] <FromDiscord> <haxscramper> And closure can modify environment variables, so
[22:09:39] *** Joins: vsantana (~Thunderbi@fttx-177136148192.usr.predialnet.com.br)
[22:10:05] <FromDiscord> <dom96> In reply to @exelotl "wooww yeah you definitely": if these are the recommended settings why aren't they default?
[22:10:37] <FromDiscord> <Bung> @zetashift yeah, that one create two years ago, it was created after I use original nimlsp that extesnion crash again and again
[22:10:47] <FromDiscord> <exelotl> well you need to tell it what your project file is, it can't figure it out by default
[22:11:33] <FromDiscord> <zetashift> In reply to @Bung "<@77574388035100672> yeah, that one": yeah it crashes a lot for me too, but troubleshooting it is hard
[22:11:47] <FromDiscord> <exelotl> (edit) "default" => "itself"
[22:12:43] <FromDiscord> <Bung> yes, it's hard , someing related to compiler some releated to suggest that not easy be fixed.
[22:12:49] <FromDiscord> <Jasmine and Don't Forget!~> Okay, I just turned off nimsuggest all togetehr
[22:12:52] <FromDiscord> <Jasmine and Don't Forget!~> (edit) "togetehr" => "together"
[22:13:12] <FromDiscord> <Jasmine and Don't Forget!~> That was awful, lmao
[22:13:27] <FromDiscord> <Jasmine and Don't Forget!~> after fighting with my computer because opening vs code made it sputter
[22:14:13] <FromDiscord> <dom96> Yeah, I just disable it in whatever extension's settings I am using
[22:14:42] <FromDiscord> <dom96> A simple search-based autocomplete works good enough most of the time
[22:16:21] <FromDiscord> <Bung> that's true, it  works  that dont need nim file can be  successful compiled
[22:16:38] <fn> <11leth99> syntax highlighting is pretty nice though.
[22:17:10] <fn> <06Prestige99> I need to figure out why messages from discord are bold over the bridge ü§î
[22:17:16] <FromDiscord> <Bung> all vscode for nim syntax highlight is done by client side
[22:18:25] <FromDiscord> <Bung> well, it will not work if lsp server crash many times, vscode will disable it automatically.
[22:18:52] <FromDiscord> <dom96> FromDiscord bolds them I think
[22:21:04] <FromDiscord> <timotheecour> In reply to @dom96 "So I have tomorrow": can you please review the 4 PRs i sent in (httpbeast, and jesteR)
[22:21:16] <FromDiscord> <timotheecour> (edit) "jesteR)" => "jester)"
[22:21:22] <FromDiscord> <dom96> yep, will do
[22:21:27] <FromDiscord> <timotheecour> thx!
[22:24:34] <FromDiscord> <Jasmine and Don't Forget!~> does nim have anything like rust's --doc generation?
[22:25:11] <FromDiscord> <timotheecour> nim doc
[22:25:13] <FromDiscord> <dom96> @timotheecour  out of curiosity, are you using these for any of your own projects?
[22:25:19] <FromDiscord> <timotheecour> ya
[22:26:24] <FromDiscord> <timotheecour> (edit) "ya" => "ya, not a YAGNI"
[22:26:24] <FromDiscord> <dom96> cool, anything open source or that you're willing to share more info about?
[22:26:45] <FromDiscord> <timotheecour> not at this point üôÇ
[22:27:22] <FromDiscord> <matf> @haxscramper digging around the standard library it looks like the record of functions approach is used too https://github.com/nim-lang/Nim/blob/6e0fe965da87821f659d5c064dea8deaba8db85f/lib/pure/streams.nim#L103
[22:28:18] <FromDiscord> <timotheecour> is there any reason `{.inline.}` is used in sigmatch? seems like sigmatch should ignore it
[22:59:56] <fn> <11ForumUpdaterBot99> New thread by Jaybill: Sega Genesis, see https://forum.nim-lang.org/t/8183
[23:18:54] <FromDiscord> <matf> I think I figured out what I was looking for with interfaces.  Any down side to using this approach?  Basically what I would call a record of functions in haskell-land (which is equivalent to an interface): https://gist.github.com/matfournier/65247e627b1a7cdf77e74d655b698d09
[23:20:31] <FromDiscord> <matf> sent a code paste, see https://play.nim-lang.org/#ix=3rGh
[23:21:02] <FromDiscord> <matf> sent a code paste, see https://play.nim-lang.org/#ix=3rGi
[23:22:08] <FromDiscord> <matf> (edit) "https://play.nim-lang.org/#ix=3rGi" => "https://play.nim-lang.org/#ix=3rGj"
[23:22:55] <FromDiscord> <haxscramper> yeah, that would work just fine
[23:24:37] <FromDiscord> <matf> Though it's definitely not compile time safe.  I.e. if you forget to implement one of the procs, it compiles but explodes at runtime as far as I can tell
[23:27:20] <FromDiscord> <saem> OMG, a wrapper will do no such thing as solve the melting problem.
[23:30:42] <FromDiscord> <mratsim> In reply to @Jasmine and Don't Forget!~ "Okay, I just turned": welcome to the club
[23:31:26] <FromDiscord> <saem> @Jasmine and Don't Forget!~\: if you're using saem/vscode-nim that's the one I maintain. Usually the issue is that unless you set the project setting there really is no good way to figure out what the main/project file is so it opens one nimsuggest process per nim file. Once you set that setting to whatever file(s) are the ones you actually compile to run your program it doesn't fire up as many nimsuggest processes and things work for the mo
[23:32:22] <FromDiscord> <saem> I used it personally on the compiler code base and things work pretty well -- and the issues are squarely with nimsuggest which improves especially if you use devel, I find.
[23:32:53] <FromDiscord> <Jasmine and Don't Forget!~> Yeah, it was just really spooky trying to build something for godot and my pc says that it's out of memory
[23:33:10] <FromDiscord> <Jasmine and Don't Forget!~> I thought it might have been a godot issue
[23:33:18] <FromDiscord> <Jasmine and Don't Forget!~> but for the most part it's working fine now
[23:33:43] <FromDiscord> <saem> I've never used nim godot, but I imagine there is only one file you ever compile?
[23:34:00] <FromDiscord> <saem> nim c src/main.nim or something like that?
[23:50:37] *** Quits: max22- (~maxime@2a01cb08833598004ee149f94395b4b7.ipv6.abo.wanadoo.fr) (Quit: Leaving)
[23:51:35] *** Joins: max22- (~maxime@2a01cb0883359800da3f2e05c12ed15e.ipv6.abo.wanadoo.fr)
[23:54:00] *** Quits: beshr (~beshr@user/beshr) (Read error: Connection reset by peer)
