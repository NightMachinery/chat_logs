[00:07:22] *** Joins: Krystof (~user@81.174.155.115)
[00:10:06] *** Quits: shka (~herr@83.175.151.96.piasta.pl) (Ping timeout: 245 seconds)
[00:14:48] *** Joins: greaser|q (greaser@antihype.space)
[00:15:50] *** Quits: greaser|q (greaser@antihype.space) (Changing host)
[00:15:50] *** Joins: greaser|q (greaser@user/greasemonkey)
[00:15:54] *** greaser|q is now known as GreaseMonkey
[00:21:51] *** Joins: Psybur (~Psybur@mobile-166-170-32-197.mycingular.net)
[00:38:00] <lisp123> How do implementations compare on profiling?
[00:46:40] *** Quits: Guest6112 (~Guest61@ip184-191-77-38.dc.dc.cox.net) (Quit: Client closed)
[00:50:31] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 252 seconds)
[00:52:10] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[00:58:25] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[01:09:18] *** Joins: mzan (~quassel@mail.asterisell.com)
[01:14:35] *** Quits: pve (~pve@188-67-189-188.bb.dnainternet.fi) (Quit: leaving)
[01:15:09] *** Quits: pjb (~pjb@user/pjb) (Quit: restart for macOS upgrade)
[01:22:27] *** Quits: Psybur (~Psybur@mobile-166-170-32-197.mycingular.net) (Ping timeout: 265 seconds)
[01:26:13] *** Joins: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f)
[01:26:19] *** Joins: cjb (~cjb@user/cjb)
[01:26:46] *** Quits: taiju (~taiju@m014013236064.v4.enabler.ne.jp) (Ping timeout: 252 seconds)
[01:27:32] <Spawns_Carpeting> can the first element of a lisp expr be anything other than an atom in a valid program?
[01:27:46] *** Quits: random-nick (~random-ni@87.116.183.117) (Ping timeout: 265 seconds)
[01:27:46] <Spawns_Carpeting> like ((something) 1 2)
[01:27:52] <hayley> ((lambda (x) x) 1)
[01:28:19] <Spawns_Carpeting> what would an AST for that look like hayley ?
[01:28:25] <Spawns_Carpeting> or an expr tree
[01:28:32] <Spawns_Carpeting> there is no parent node?
[01:28:39] *** Joins: taiju (~taiju@M014013236064.v4.enabler.ne.jp)
[01:28:51] <dre> the parent node is the list
[01:29:12] <hayley> There wouldn't be a parent node, because there isn't a parent of this program fragment.
[01:29:16] <Spawns_Carpeting> an AST would not include the list itself would it?
[01:29:33] <dre> (+ 1 2) => 3 leaves, '+' is one, '1' and '2' -- all on the same level.
[01:29:34] <hayley> This code designates a call to the function (lambda (x) x) with the single argument 1.
[01:29:57] * hayley doesn't know what an AST looks like in most people's heads.
[01:30:47] <Spawns_Carpeting> that's what I thought too dre, but I don't know how you could walk that tree to generate bytecode instructions
[01:31:21] <Spawns_Carpeting> a more convention style AST where each operator is a node, and its children are the parameters makes it easier to do that
[01:31:48] <Spawns_Carpeting> i think the other version would be more like a parse tree or something
[01:31:55] <hayley> Can't say more without knowing your bytecode, but in e.g. the Netfarm VM we would write (BYTE 1) (BYTE 2) (GET-PROC <code for LAMBDA function>) (CALL 2)
[01:33:51] <Spawns_Carpeting> I wonder if a non-lisp language would make a better first programming language to try to implement from scratch. Any thoughts about that?
[01:33:59] <hayley> Nah.
[01:34:13] <Spawns_Carpeting> I figured the syntax would be trivial to parse but i find it maybe more confusing
[01:35:00] <Spawns_Carpeting> it doesn't help that I don't have any formal education in parsers or anything like that, and all of the resources I can find are creating ASTs for non-lispy langs
[01:35:37] <hayley> I don't think you really need an AST if you aren't doing much analysis on it. Just pattern match on the list structure you were given.
[01:35:57] <lisp123> Spawns_Carpeting: 1000s of people have tried to find a better approach than lisp. There isn't :)
[01:36:53] <Spawns_Carpeting> what order do you walk the tree to generate ops in the right order hayley? It might seem like a stupid question but I couldn't figure out a way to do that easily
[01:37:06] *** Quits: ahlk (~user@2600:1700:31c0:3a10::43) (Remote host closed the connection)
[01:37:30] <Spawns_Carpeting> i think you just have to walk it backwards, from the bottom rightmost part to the first node? does that sound correct?
[01:38:23] <hayley> Arguments then the function, handling the most nested forms first. So (f x (g y)) compiles to (read Y) (call G) (read X) (call F)
[01:39:55] <hayley> Don't think of it as a global tree traversal though, with depth or breath-first search or whatever. Just think of each type of expression, and how you would generate code for it. e.g. for a form like (F X) I need to generate code to load X, then call F. For (F (G X)) I need to generate code to load (G X), which consists of loading X and calling G...
[01:41:09] <Alfr> hayley, you can't do that. You need to read and stash x before calling g on y; e.g. when x is special and g sets it.
[01:41:42] *** Joins: akoana (~ah@user/akoana)
[01:41:53] <hayley> Right, it depends on evaluation order of arguments, and CL is defined to use left-to-right evaluation.
[01:41:58] <Alfr> At least for the usual left to right evaluation order.
[01:43:07] * hayley thinks some more
[01:43:31] <hayley> That code probably should be (read X) (read Y) (call G) (call F)
[01:50:00] *** Quits: gaqwas (~john@dynamic-077-007-077-142.77.7.pool.telefonica.de) (Ping timeout: 265 seconds)
[01:52:20] <Spawns_Carpeting> why would we read x first?
[01:52:30] <Spawns_Carpeting> incase it has side effects or something?
[01:53:36] <hayley> It depends on the language you are implementing, and how the bytecode stores arguments. The Netfarm VM uses a stack machine, and the first argument is pushed first.
[01:53:48] <Spawns_Carpeting> i wanted to do a stack machine as well
[01:54:23] <hayley> If I swapped around (read X) and (read Y) (call G), the arguments would be in the wrong order (which is what Alfr pointed out).
[01:54:49] <Spawns_Carpeting> i thought it would push y, call g, push x, call f
[01:55:54] <hayley> Again, it depends on which order you take arguments off the stack.
[01:56:33] *** Quits: cosimone (~user@93-44-185-107.ip98.fastwebnet.it) (Ping timeout: 250 seconds)
[01:58:41] <hayley> If you look at the definition for instruction #9 (CALL) in https://theemacsshibe.gitlab.io/documentation/Netfarm_script_machine.html#%28part._.Instructions%29 I specified that the last function argument is the first value on the stack after the function to call.
[01:59:47] <hayley> (Note that this specification is often too formal for human consumption, myself included.)
[02:04:40] *** Joins: pjb (~pjb@user/pjb)
[02:10:08] *** Quits: frgo (~frgo@p200300deef0cee006001b65a400c77f6.dip0.t-ipconnect.de) (Remote host closed the connection)
[02:10:37] *** Joins: frgo (~frgo@p200300deef0cee00245fe8d12486569b.dip0.t-ipconnect.de)
[02:10:49] *** Quits: loskutak (~loskutak@gw.mecom.cz) (Ping timeout: 252 seconds)
[02:20:23] *** Quits: lisp123 (~lisp123@5.30.23.247) (Quit: Leaving...)
[02:36:29] *** Joins: ahlk (~user@2600:1700:31c0:3a10::43)
[02:48:32] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Quit: ERC (IRC client for Emacs 27.2))
[02:51:52] *** Quits: Spawns_Carpeting (~Spawns_Ca@user/spawns-carpeting/x-6969421) (Ping timeout: 265 seconds)
[02:59:46] *** Quits: waleee (~waleee@h-98-128-228-119.NA.cust.bahnhof.se) (Ping timeout: 252 seconds)
[03:09:51] *** Joins: pillton (~user@2405:b000:703:2::34:248)
[03:15:52] *** Quits: igemnace (~ian@user/igemnace) (Remote host closed the connection)
[03:27:04] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[03:31:24] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[03:31:54] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[03:54:50] *** Joins: lottaquestions (~nick@2607:fa49:503e:3000:ff84:8eee:bb8e:a6cd)
[04:07:05] *** Quits: Skyfire (~pyon@user/pyon) (Quit: brb)
[04:10:27] *** Joins: Skyfire (~pyon@user/pyon)
[04:11:16] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 252 seconds)
[04:11:46] *** Quits: attila_lendvai (~alendvai@catv-213-222-131-28.catv.broadband.hu) (Ping timeout: 252 seconds)
[04:13:05] *** Joins: waleee (~waleee@h-98-128-228-119.NA.cust.bahnhof.se)
[04:17:11] *** Quits: lottaquestions (~nick@2607:fa49:503e:3000:ff84:8eee:bb8e:a6cd) (Ping timeout: 245 seconds)
[04:24:30] *** Joins: asarch (~asarch@2806:10ae:7:d358:cc4d:ac7:7368:6d8b)
[04:25:52] <asarch> One stupid question: do I need :external-format :utf-8 for with-open-file in SBCL?
[04:27:14] *** Joins: igemnace (~ian@user/igemnace)
[04:36:13] <hayley> It depends on the encoding of the file, and the default encoding that SBCL uses on your computer.
[04:39:41] *** Joins: ski (~ski@remote12.chalmers.se)
[04:41:46] *** Quits: waleee (~waleee@h-98-128-228-119.NA.cust.bahnhof.se) (Ping timeout: 245 seconds)
[04:45:56] <asarch> Thank you, thank you very much :-)
[04:48:49] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[04:50:55] *** Quits: asarch (~asarch@2806:10ae:7:d358:cc4d:ac7:7368:6d8b) (Quit: Leaving)
[04:53:37] *** Quits: gendl (sid100083@id-100083.hampstead.irccloud.com) (Ping timeout: 252 seconds)
[04:56:36] *** Joins: gendl (sid100083@hampstead.irccloud.com)
[05:05:20] *** Quits: kevingal (~quassel@2a02:8084:4140:f300:b4ef:77e6:c03c:c923) (Remote host closed the connection)
[05:06:52] *** Quits: splittist (sid17737@tinside.irccloud.com) (Read error: Connection reset by peer)
[05:07:12] *** Quits: victor (sid208353@user/victor) (Ping timeout: 265 seconds)
[05:07:22] *** Quits: hubvu (sid495858@user/hubvu) (Ping timeout: 252 seconds)
[05:15:46] *** Joins: splittist (sid17737@tinside.irccloud.com)
[05:18:20] *** Joins: nature (~nature@mail.blazebone.com)
[05:21:28] *** Joins: hubvu (sid495858@user/hubvu)
[05:22:31] *** Joins: victor (sid208353@user/victor)
[05:35:45] *** Joins: Nilby (~Nilby@2601:603:1481:30a0:82fa:5bff:fe66:4b49)
[05:56:19] *** Quits: prxq (~quassel@x4db4c268.dyn.telefonica.de) (Ping timeout: 252 seconds)
[05:56:25] *** Joins: prxq_ (~quassel@dynamic-077-012-193-044.77.12.pool.telefonica.de)
[06:03:12] *** Quits: ebrasca (~user@librepanther.com) (Remote host closed the connection)
[06:04:16] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 245 seconds)
[06:07:42] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[06:20:24] *** Parts: akoana (~ah@user/akoana) ()
[06:31:17] <beach> Good morning everyone!
[06:41:48] *** Joins: Guest-liao (~Guest-lia@101.86.98.144)
[06:46:35] *** Joins: Spawns_Carpeting (~Spawns_Ca@user/spawns-carpeting/x-6969421)
[06:54:09] *** Quits: semz (~none@user/semz) (Ping timeout: 265 seconds)
[07:06:27] *** Quits: nature (~nature@mail.blazebone.com) (Quit: leaving)
[07:06:51] *** Joins: semz (~none@user/semz)
[07:14:04] <beach> Spawns_Carpeting: What is your objective with this work of yours?  I can tell you how the Cleavir AST would look for an expression like the one that hayley showed, but that may be pointless depending on your objective.
[07:18:20] <Spawns_Carpeting> beach: what do you mean objective? it's just for fun/learning
[07:18:23] <Spawns_Carpeting> no real objective
[07:19:00] <beach> OK, then...
[07:19:33] <beach> The AST would have a parent node "function application", and it would have two children.  The first child would be "function", and the second a list of arguments.
[07:20:56] <beach> The "function" node would then either be a "named function" AST if the operator is a symbol, or it would be an "anonymous function" AST if the operator is (lambda (x) x) as in the example hayley gavce.
[07:20:58] <beach> gave
[07:23:30] *** Quits: taiju (~taiju@M014013236064.v4.enabler.ne.jp) (Ping timeout: 265 seconds)
[07:26:18] <beach> s/parent node/root node/ I guess.
[07:28:57] *** Joins: taiju (~taiju@m014013236064.v4.enabler.ne.jp)
[07:31:46] <Spawns_Carpeting> that makes sense, I think I keep getting the parse tree and the AST mixed up
[07:32:18] <Spawns_Carpeting> AST doesn't really care that much about lists or atoms and whatnot, just about expressions
[07:33:17] <Spawns_Carpeting> my first AST was a flat list for each sexpr rather than an actual tree for example
[07:33:24] <beach> Right.  The Lisp "parse tree" for something like ((lambda (x) x) 1) is trivial, and completely specified.
[07:34:24] <Spawns_Carpeting> yeah it would be a list with a list with list right?
[07:34:41] <Spawns_Carpeting> like this: [[lambda [x] x] 1]
[07:34:49] <Spawns_Carpeting> thats a python list syntax
[07:34:51] <beach> ... It is a proper list of two elements.  The first element is a list of three elements, and the second element is 1.
[07:35:14] <beach> Spawns_Carpeting: It serves no purpose to ask me in terms of Python.
[07:35:19] <Spawns_Carpeting> heh sorry
[07:35:37] <Spawns_Carpeting> what you said makes sense though for sure
[07:36:16] *** Joins: donovanquixote (~Donovan@c-98-246-129-179.hsd1.or.comcast.net)
[07:40:22] <Spawns_Carpeting> i guess I should just ignore lambdas and more advanced stuff for a while anyways
[07:41:29] <beach> You can't really ignore lambda expressions of you want to compile Lisp.
[07:47:49] <Spawns_Carpeting> its just a bytecode thing for now, technically it's nothing because nothing does anything or works at all
[07:48:12] <Spawns_Carpeting> this is my first time doing anything related to programming langs and parsers and stuff
[07:48:14] <beach> I see.  Good luck.
[07:48:40] <Spawns_Carpeting> thanks beach, it helps quite a bit to have some pointers
[07:48:47] <beach> Pleasure.
[07:49:22] <Spawns_Carpeting> why do you say you can't ignore lambdas by the way?
[07:49:47] <beach> Because for Lisp, they are all over the place.
[07:50:12] <Spawns_Carpeting> you technically can omit them thought right?
[07:50:24] <Spawns_Carpeting> might be a bad idea... but possible
[07:51:23] <beach> Well, that's why I asked about the objectives.  You can omit whatever you like if you just want to learn by tinkering a bit.  But if you want to compile Lisp, you need to handle all possible constructs.
[07:52:10] <Spawns_Carpeting> I guess I should say "thing that slightly resembles lisp"
[07:52:40] <Spawns_Carpeting> with an actual lisp being a goal eventually if I get that far
[07:53:41] <beach> minion: Please tell Spawns_Carpeting about Cleavir.
[07:53:42] <minion> Spawns_Carpeting: Cleavir: A project to create an implementation-independent compilation framework for Common Lisp. Currently Cleavir is part of SICL, but that might change in the future
[07:53:55] <beach> minion: Please tell Spawns_Carpeting about SICL.
[07:53:55] <minion> Spawns_Carpeting: SICL: SICL is a (perhaps futile) attempt to re-implement Common Lisp from scratch, hopefully using improved programming and bootstrapping techniques. See https://github.com/robert-strandh/SICL
[07:56:18] <Spawns_Carpeting> this looks pretty cool thanks for sharing
[07:56:26] <Spawns_Carpeting> a lot of info as well
[07:56:28] <beach> Sure.
[08:34:14] *** Quits: jealousmonk (~user@2804:431:e7c4:7e2f:f785:531d:f45d:57b8) (Quit: ERC (IRC client for Emacs 27.1))
[08:58:44] <gin> quicklisp is back up! good to see that
[08:59:08] *** Quits: iamFIREc1 (~iamFIREcr@user/iamfirecracker) (Quit: WeeChat 3.3)
[09:23:36] <hayley> Spawns_Carpeting: I sort of ignored functions with my first "Lisp" interpreter, and trying to write less trivial programs drove me up a wall.
[09:36:13] *** Joins: spiaggia (~user@2a01:cb19:150:3400:8468:9d8b:6bb4:8570)
[09:37:34] <hayley> I could also provide my own bytecode compiler, but it would be tricky to follow, as you'd need to keep the bytecode specification and intermediate languages in mind. But my (lazy) approach is to replace variable references in the input language with De Brujin indices, and then generate linear bytecode.
[09:38:54] <hayley> Spawns_Carpeting: See https://gitlab.com/Theemacsshibe/slacker-compiler#input-language and then the "Intermediate language" grammar.
[09:39:02] <gin> hayley: is your interpreter code available somewhere?
[09:39:33] <gin> I too want to write my own tiny Lisp interpreter (or something like it) but don't know where to start. is it necessary to read the dragon book first?
[09:40:13] <spiaggia> gin: Also in order to learn how it is done?
[09:40:49] <hayley> Yes, in <https://gitlab.com/cal-coop/netfarm/netfarm/-/tree/master/Code/Scripts/Script-machine>. But it is a bit over-optimized, so I would prefer to refer people to <https://cal-coop.gitlab.io/netfarm/documentation/Netfarm_script_machine.html#%28part._.Script_execution%29>
[09:40:59] <gin> spiaggia: yes, a hobby project. yes, to learn how it is done and also to use it myself at least to write trivial programs
[09:41:09] *** Joins: pve (~pve@37-33-53-192.bb.dnainternet.fi)
[09:41:09] <spiaggia> gin: I recommend "Lisp in Small Pieces" or "Anatomy of Lisp".
[09:41:16] <hayley> But, if you haven't written any interpreter before, I would also recommend you start with a "tree walking" interpreter which doesn't bother with bytecode.
[09:41:47] <gin> hayley: by tree walking, do you mean do a recursive descent in the abstract syntax tree and evaluate each node on the fly?
[09:42:03] <gin> spiaggia: thank you for the recommendation. looking them up
[09:42:29] <hayley> Yes, but you don't even have to bother with producing an AST. Just dispatch on the nested list structure.
[09:42:42] <spiaggia> gin: Lisp in Small Pieces is more modern, but I like them both for different reasons.
[09:43:14] <gin> hayley: oh! that sounds simple. worth a try.
[09:43:18] <Spawns_Carpeting> I will check that out tomorrow hayley thanks. I am heading to bed right now and will be back tomorrow!
[09:43:18] <gin> 5
[09:43:33] <gin> ignore '5' above. typo
[09:43:51] <Spawns_Carpeting> also gin maybe we could chat sometime since we are both working on very similar things!
[09:44:18] <gin> lisp in small pieces - 500 pages. sounds like going to take hard work. have to plan time for it.
[09:44:32] <gin> Spawns_Carpeting: sure. what are you working on now?
[09:44:43] <Spawns_Carpeting> working on going to sleep haha
[09:44:51] <Spawns_Carpeting> sorry I have to wake up in a little bit
[09:44:57] <hayley> The book covers a few interpreters (tree walking and bytecode) and then compilation to C, so it makes good use of 500 pages to me.
[09:45:41] <gin> anatomy of lisp - 464 pages. so two hefty books. will start with only one. out of anatomy of lisp and lisp in small pieces which one do you recommend me, a beginner who has never implemented an interpreter?
[09:45:43] <Spawns_Carpeting> but a bytecode VM for a lang that at least resembles lisp
[09:45:53] <Spawns_Carpeting> bytecode VM / bytecode compiler
[09:46:05] <gin> ok, so you have a bytecode VM where the bytecode language is like Lisp?
[09:46:42] <Spawns_Carpeting> the VM is just a standard VM with asm like opcodes, the source language is what I want to be lisp like
[09:46:54] <Spawns_Carpeting> I don't care too much about the VM itself honestly
[09:46:56] * hayley scratches head
[09:47:30] <gin> Spawns_Carpeting: ok
[09:47:54] <Spawns_Carpeting> so you write lispy programs, it gets compiled to your standard PUSH/POP/JUMP style opcodes
[09:48:06] <spiaggia> gin: Anatomy of Lisp could be hard to find.
[09:48:18] <gin> anyone has learnt programming with Logo here? always wanted to ask, is Logo really a dialect of Lisp? i see it mentioned often.
[09:48:38] <gin> spiaggia: that is nice. makes it easy for me. will start with lisp in small pieces.
[09:48:56] <Spawns_Carpeting> what is your goal gin ?
[09:49:02] <hayley> I dunno, but based on (fortunately) infrequent discussions, I sometimes wonder if Common Lisp is a dialect of Lisp.
[09:49:10] <spiaggia> gin: Good.  And the translation was made by an excellent translator, making the English version better than the original.
[09:49:16] <gin> interesting there is #logo channel too on this irc.
[09:49:31] *** Joins: gaqwas (~john@dynamic-077-004-048-156.77.4.pool.telefonica.de)
[09:50:00] <gin> Spawns_Carpeting: goal is to create a small Lisp or Lisp-like language for fun, learning, and also using it to solve small problems like tiny calculations for which I usually use python these days.
[09:50:01] <spiaggia> gin: In fact, the translator was the only person who got promoted to "distinguished writer" at the French ILOG company that used to sell Lisp systems and tools.
[09:50:29] <spiaggia> gin: Her first programming language was Lisp and she has a PhD in English.
[09:50:34] <hayley> (Of course, the answer is no, CL is very clearly Smalltalk. They both have late binding of most things, useful type systems, and no datum that isn't an object :)
[09:50:55] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Ping timeout: 265 seconds)
[09:51:01] *** Joins: icer (eric@gateway/vpn/protonvpn/icer)
[09:51:24] <spiaggia> gin: And if you bring your copy of Lisp in Small Pieces to ELS, she will sign it for you.
[09:51:29] <gin> spiaggia: woah! talk about combining two skills to create a very niche set of skills. i have often heard this advice is that the best way to make a mark in the world is to take two good skills you have and combine them because the combination would become a niche set of skills that very few other people may have
[09:51:44] <gin> spiaggia: like XKCD guy - tech + drawing comics
[09:51:53] *** Joins: amb007 (~a_bakic@163.105.204.77.rev.sfr.net)
[09:52:29] <spiaggia> gin: Indeed.
[09:53:05] <susam> Is ELS going to be physical (as opposed to virtual) this year?
[09:53:33] <hayley> I heard it will be a bit of both. Best double-check...
[09:54:42] <hayley> There's a physical location for ELS 2022 (the ELS this year happened last May), but no mention of an online part on the ELS website.
[09:55:13] <hayley> Oh, helps if I check my emails. Didier Verna said "We will also arrange to remain hybrid so that people can physically attend, or follow online!"
[09:55:57] <spiaggia> susam: Yes, as hayley says, both.  The location is Porto, Portugal.
[09:56:02] *** Quits: Skyfire (~pyon@user/pyon) (Ping timeout: 260 seconds)
[09:56:12] <susam> Thanks hayley and spiaggia.
[09:56:23] <spiaggia> Sure.
[09:56:29] <susam> I am new to this community, by the way. I began joining this channel only since last year although I have been on IRC for 15 years. Attended the last ELS virtually. The talk on Extempore blew my mind. I would like to attend this year's too. Perhaps virtually because I don't live in Europe.
[09:57:09] <spiaggia> susam: We have regular visitors from the US, Japan, etc.
[09:57:30] <spiaggia> s/visitors/participants/
[09:59:18] <hayley> I had hoped to visit last year (from Australia), and also catch the last tour of The Stranglers if possible, but both were stopped by the pandemic. I'll see what I can do for ELS 2022.
[10:00:06] *** Quits: Spawns_Carpeting (~Spawns_Ca@user/spawns-carpeting/x-6969421) (Ping timeout: 265 seconds)
[10:01:16] <spiaggia> hayley: It is worth going.  Just putting a face to many of the people we interact with is worth it.
[10:01:24] <hayley> Definitely.
[10:01:39] *** Parts: pranavats (3fba1d1b34@jabberfr.org) ()
[10:02:33] <susam> Very nice. I will probably only be a visitor (a lurker). Hoping to participate some day. Although I learnt CL long time ago, it is only recently that I have begun using it seriously for some of my hobby projects.
[10:05:04] <susam> gin: Yes, Logo has had a lot of Lisp influence. I talked to an LCSI Logo developer sometime back and the LCSI logo (which is the same as Atari Logo and IBM PC Logo) were developer by experienced Lispers. Emacs + an assember written in Lisp + a debugger written in Lisp were their development tools.
[10:05:05] <spiaggia> susam: I don't know if you habitually go to computing conferences, but you can be a participant without presenting anything, and in fact, most people are.  There might be 15 presentations or so, for around 90 participants.  The thing about going is not so much about the presentations, but about the discussions with the participants during the breaks, or over meals and coffee breaks.
[10:05:45] <susam> gin: I even remember seeing "plist" in one of the Logo manuals.
[10:08:12] *** Joins: shka (~herr@83.175.151.96.piasta.pl)
[10:16:55] <susam> spiaggia: Makes sense. Thanks for the insight.
[10:17:08] <spiaggia> Sure.
[10:17:31] *** Joins: Cymew (~ante@c-e989225c.023-1144-7570702.bbcust.telenor.se)
[10:18:33] *** Quits: makomo (~makomo@user/makomo) (Quit: WeeChat 3.2)
[10:19:41] *** jackdani1l is now known as jackdaniel
[10:19:44] *** Quits: jackdaniel (~jack@turtleware.eu) (Changing host)
[10:19:44] *** Joins: jackdaniel (~jack@user/jackdaniel)
[10:19:44] *** ChanServ sets mode: +o jackdaniel
[10:20:32] <jackdaniel> o/
[10:20:48] <hayley> \o
[10:21:10] *** Quits: donovanquixote (~Donovan@c-98-246-129-179.hsd1.or.comcast.net) (Quit: Leaving)
[10:21:32] *** Joins: pranavats (3fba1d1b34@jabberfr.org)
[10:21:54] <spiaggia> Hello jackdaniel.
[10:23:44] *** Joins: Skyfire (~pyon@user/pyon)
[10:32:58] *** Quits: amb007 (~a_bakic@163.105.204.77.rev.sfr.net) (Ping timeout: 265 seconds)
[10:33:15] *** Joins: amb007 (~a_bakic@1.150.22.93.rev.sfr.net)
[10:38:59] *** Parts: spiaggia (~user@2a01:cb19:150:3400:8468:9d8b:6bb4:8570) (ERC Version 5.3 (IRC client for Emacs))
[10:45:07] *** Quits: amb007 (~a_bakic@1.150.22.93.rev.sfr.net) (Read error: Connection reset by peer)
[10:45:26] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[10:49:07] *** Quits: taiju (~taiju@m014013236064.v4.enabler.ne.jp) (*.net *.split)
[10:49:07] *** Quits: terrorjack (~terrorjac@static.3.200.12.49.clients.your-server.de) (*.net *.split)
[10:49:07] *** Quits: sm2n (~sm2n@user/sm2n) (*.net *.split)
[10:49:07] *** Quits: luna-is-here (~quassel@ip-95-223-59-100.hsi16.unitymediagroup.de) (*.net *.split)
[10:49:07] *** Quits: jcowan (sid325434@ilkley.irccloud.com) (*.net *.split)
[10:49:08] *** Quits: scymtym (~user@ip-94-114-248-79.unity-media.net) (*.net *.split)
[10:49:08] *** Quits: mzan (~quassel@mail.asterisell.com) (*.net *.split)
[10:49:08] *** Quits: Alfr (~Alfr@user/alfr) (*.net *.split)
[10:49:08] *** Quits: borodust (~irc@user/borodust) (*.net *.split)
[10:49:08] *** Quits: mingus (~jan-magnu@ti0135a400-1977.bb.online.no) (*.net *.split)
[10:49:08] *** Quits: samebchase (~thelounge@51.15.68.182) (*.net *.split)
[10:53:14] *** Quits: pillton (~user@2405:b000:703:2::34:248) (Quit: ERC (IRC client for Emacs 27.2))
[10:54:10] *** Parts: pranavats (3fba1d1b34@jabberfr.org) ()
[10:54:20] *** Joins: makomo_ (~makomo@user/makomo)
[10:58:07] *** Joins: random-nick (~random-ni@87.116.183.117)
[11:00:51] *** Joins: taiju (~taiju@m014013236064.v4.enabler.ne.jp)
[11:00:51] *** Joins: mzan (~quassel@mail.asterisell.com)
[11:00:51] *** Joins: terrorjack (~terrorjac@static.3.200.12.49.clients.your-server.de)
[11:00:51] *** Joins: sm2n (~sm2n@user/sm2n)
[11:00:51] *** Joins: luna-is-here (~quassel@ip-95-223-59-100.hsi16.unitymediagroup.de)
[11:00:51] *** Joins: jcowan (sid325434@ilkley.irccloud.com)
[11:00:51] *** Joins: scymtym (~user@ip-94-114-248-79.unity-media.net)
[11:00:51] *** Joins: Alfr (~Alfr@user/alfr)
[11:00:51] *** Joins: borodust (~irc@user/borodust)
[11:00:51] *** Joins: mingus (~jan-magnu@ti0135a400-1977.bb.online.no)
[11:00:51] *** Joins: samebchase (~thelounge@51.15.68.182)
[11:01:58] *** Quits: makomo_ (~makomo@user/makomo) (Ping timeout: 265 seconds)
[11:02:02] *** Quits: terrorjack (~terrorjac@static.3.200.12.49.clients.your-server.de) (Max SendQ exceeded)
[11:02:46] *** Joins: terrorjack (~terrorjac@static.3.200.12.49.clients.your-server.de)
[11:15:01] *** Joins: makomo_ (~makomo@user/makomo)
[11:16:06] *** Quits: cjb (~cjb@user/cjb) ()
[11:28:01] *** Quits: gaqwas (~john@dynamic-077-004-048-156.77.4.pool.telefonica.de) (Ping timeout: 245 seconds)
[11:32:27] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 250 seconds)
[11:32:59] *** Quits: robin (~robin@user/terpri) (Remote host closed the connection)
[11:35:23] *** Joins: hendursa1 (~weechat@user/hendursaga)
[11:36:15] <pve> Hi, is it stylistically ok to use strings in a defpackage form, e.g. (:export "CAT" "MEOW" "PURR" ...)?
[11:36:34] *** Joins: cosimone (~user@151.14.38.15)
[11:36:42] *** Quits: cosimone (~user@151.14.38.15) (Remote host closed the connection)
[11:37:00] *** Joins: cosimone (~user@151.14.38.15)
[11:39:09] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 276 seconds)
[11:39:20] *** Joins: robin (~robin@user/terpri)
[11:41:40] *** Quits: makomo_ (~makomo@user/makomo) (Ping timeout: 252 seconds)
[11:42:06] <beach> pve: I personally think it looks ugly if you then use lower-case letters in the code, which is why I use uninterned symbols instead.
[11:44:23] <beach> The other problem with strings is that it may not work when the readtable changes.  If you use uninterned symbols, there is a better chance that the name of the symbol you use in code is going to be the same as that of the uninterned symbol.  I am thinking particularly of Franz "modern mode".
[11:44:43] <beach> pve: But it is not a big problem, so use strings if that's what you want.
[11:45:04] *** Joins: Tomte (~th@p200300db9f1fd80039dc79cbef91aaa3.dip0.t-ipconnect.de)
[11:45:38] *** Quits: Tomte (~th@p200300db9f1fd80039dc79cbef91aaa3.dip0.t-ipconnect.de) (Remote host closed the connection)
[11:48:06] <pve> beach: Ok thanks. Now that I think about it, this might even be just a matter of syntax highlighting. I like how the strings stand out a bit among the keywords.
[11:48:27] *** Quits: cosimone (~user@151.14.38.15) (Remote host closed the connection)
[11:48:27] <pve> Perhaps I should tell emacs to highlight uninterned symbols differently..
[11:48:49] *** Joins: cosimone (~user@151.14.38.15)
[11:50:14] <pve> And I had not thought of the "modern mode" problem
[11:50:27] <beach> pve: I have said this several times, but let me say it again: Emacs syntax highlighting is mediocre at best.  It doesn't take different roles of symbols into account.  It seems wrong to highlight all uninterned symbols the same no matter the role, and it seems wrong to highlight all strings the same too.
[11:51:00] <beach> pve: I use Emacs for Common Lisp programming only because we don't have anything better yet.  But we are working on it.
[11:53:28] <JeromeLon> (let ((*message* *messages*)) (do something that indirectly (and temporarily) changes and uses *messages*))
[11:53:56] <JeromeLon> I remember getting an sbcl warning about this (using lexical variable for a name that looks like a dynamic one)
[11:54:26] <JeromeLon> But I am not getting it anymore. Does anyone have any idea what circumstances are triggering it?
[11:54:47] <beach> JeromeLon: It would be highly unusual to initialize a variable with a name in singular form with a variable in plural form.
[11:55:10] <JeromeLon> beach: sorry, please assume it's *messages* everywhere
[11:55:15] <beach> Ah!
[11:55:18] <pve> beach: Oh, are you saying that, for example, exported symbols in a defpackage form (written as uninterned symbols) could be highlighted differently than uninterned symbols elsewhere in the code?
[11:55:32] <beach> pve: They should, yes.
[11:56:03] <beach> pve: And the strings used in the :EXPORT clause should be highlighted the same as the uninterned symbols in that clause.
[11:56:18] <pve> beach: That had never occurred to me, but it does seem like a much better way.
[11:56:22] <beach> I.e., the role is more important than the precise nature of the token.
[11:56:50] <cosimone> there are some emacs theems, such as dracula, that do highlight documentation strings differently with respect to other strings
[11:57:08] <cosimone> however, using a declare expression beforehand fools it into thinking it's a regular string
[11:57:09] <Nilby> hmmm, my emacs setup seems to highlight 'foo :foo #:foo "foo" all differntly
[11:57:30] <mfiano>  Then it is behaving correctly
[11:57:30] <beach> cosimone: The technique used by Emacs is intrinsically broken.
[11:57:39] <JeromeLon> beach: or maybe that was my mistake? yes, it was probably a typo, I can reproduce. Thanks!
[11:57:49] <beach> Nilby: Exactly, and that's wrong.
[11:57:49] <cosimone> it's not the smartest there is, that's for sure
[11:58:01] <Nilby> beach: Why?
[11:58:20] <beach> Nilby: Because, as I said, if the role is the same, the highlighting should be the same.
[11:58:22] <mfiano> I do not consider _that_ aspect of Emacs highlighting wrong. I wouldn't want it any other way
[11:58:23] <cosimone> i think a lot of the logic used to highlight common lisp is the same as the one used for emacs lisp, but i could be wrong
[11:58:37] <loke[m]> I'll have to check the spec, but I'm pretty sure that the declarations have to come after the docstring.
[11:58:51] <cosimone> i modified color-identifiers.el a bit to account for common lisp, it does provide a nicer and much richer highlighting
[11:59:16] <beach> mfiano: I'll remember not to recommend anything else then.
[11:59:29] <mfiano> What?
[12:00:31] *** Quits: icer (eric@gateway/vpn/protonvpn/icer) (Ping timeout: 245 seconds)
[12:00:32] <cosimone> loke[m]: according to http://www.lispworks.com/documentation/HyperSpec/Body/m_defun.htm#defun, declarations come before documentation
[12:00:47] <beach> mfiano: Consider (let ((defmethod 234)) (+ defmethod 3))
[12:00:55] <cosimone> btw is there some shorthand to invoke the hyperspec, this is murdering my eyes
[12:01:18] <beach> mfiano: Do you think it is fine that 1. The first DEFMETHOD is highlighted as if it were an operator, and 2. that the second DEFMETHOD is not highlighted the same as the first?
[12:01:37] <beach> mfiano: I am saying that the IDE we are working on would not be for you.
[12:01:43] <mfiano> beach: I wasn't talking about semantic highlighting. I was talking about the atom type differentiations.
[12:02:32] <beach> mfiano: So in (defpackage ... (:export "FOO" 'bar) you want FOO and bar highlighted differently?
[12:02:43] <beach> Er, bar, not 'bar
[12:02:44] <mfiano> I would make lots of mistakes if my uninterned symbol was the same color as a keyword symbol as an argument to a function for example.
[12:02:44] *** Joins: makomo_ (~makomo@user/makomo)
[12:03:01] <mfiano> Since it is easy to miss at a glance (only an additional character)
[12:03:13] <beach> But I never suggested that.
[12:03:28] <mfiano> I was replying to Nilby's observation
[12:04:03] <beach> On the other hand, if you do (f :foo :foo) and F is (defun f (&key foo)...) I would definitely want the second :foo to be highlighted differently.
[12:04:36] <beach> mfiano: I see.  I'll be quiet then.
[12:04:36] <mfiano> Maybe, but I think that is subjective.
[12:05:36] <_death> cosimone: declarations can come before or after docstring
[12:05:45] <beach> I maintain that the role of a token is more important than its exact syntax.  And I maintain that Emacs is unable to take the role into account.
[12:05:53] <mfiano> Why will you "refuse to make suggestions" and "be quiet" over different opinions? Lisp's main strengths include the flexibility it gives programmers and listening to other opinions is always welcome. That sounds sort of a childish response..
[12:06:31] <cosimone> _death: yes, i noticed that too, if i run (documentation ...), i can still see the string
[12:06:33] <beach> mfiano: I just meant that I won't argue with you since you were not referring to any of my suggestions.
[12:06:47] <ecraven> beach: well, emacs *could* do this by just sending the form to swank for fontification
[12:06:50] <ecraven> it just doesn't do this ;)
[12:06:51] <mfiano> Ok, then I apologize.
[12:06:56] <_death> cosimone: the splicing notation [[a | b]] does not impose an order
[12:07:06] <cosimone> it's up to personal preference, but i think the "canonical" form seems to be declarations first
[12:07:12] <beach> ecraven: Yes, of course.
[12:07:17] <cosimone> _death: i see, i wasn't aware of that
[12:07:18] <mfiano> I welcome all opinions on style. It is the collective style that helps us grow.
[12:07:22] <ecraven> but I definitely agree that better fontification would be a boon
[12:07:25] <ecraven> also, nested presentations :-/
[12:07:38] <_death> cosimone: in my experience (and in my style) declarations tend to come after
[12:07:39] <beach> ecraven: I can't agree more.
[12:07:49] <cosimone> yes, i prefer it too
[12:10:16] <ecraven> I've been thinking about that on and off, actually *parsing* s-expressions for fontification in emacs, not just regex-matching them
[12:10:39] <ecraven> and even better than parsing, using a running system to know *what* anything is actually
[12:11:02] <beach> ecraven: We are working on it.
[12:11:25] <ecraven> beach: where, if I may ask?
[12:11:29] <ecraven> I mean, in what context?
[12:12:31] <beach> ecraven: Second Climacs uses READ (in the form of Eclector) to parse the buffer contents, so that it can take custom reader macros and such into account.  And scymtym has been doing work on syntax analysis of the result.
[12:13:13] <beach> ecraven: The main thing stopping me (or us) from making progress is that I still need to figure out how to compute indentation.
[12:13:21] <ecraven> ah, but that means losing all the rest of my Emacs packages :-/
[12:13:34] <ecraven> hehe, indentation is just insanely complicated
[12:13:55] <beach> Not if you have an AST that represents the contents. :)
[12:14:17] <ecraven> for example, emacs "incorrectly" indents '(foo bar\nbaz quux), where I *want* foo and baz to start at the same column (because it's all "data").
[12:14:21] <beach> ecraven: And yes, it is not Emacs.
[12:14:34] <ecraven> the problem isn't Emacs per se, but all the existing modes in Emacs
[12:14:47] <mfiano> Want to know my worst example of Emacs CL indentation failure?
[12:14:56] <beach> ecraven: But, again, to do it right, you need to parse the contents using Common Lisp READ.
[12:15:14] <beach> mfiano: Yes please!
[12:15:34] <beach> My favorite example is (let ((prog1<newline>...)))
[12:16:00] <mfiano> in an asdf:defsystem :depends-on form, if the first dependency is a symbol that begins with DEF, it indents the rest of the list very strangely. It also doesn't matter if its a symbol, keyword, or uninterned symbol prefix.
[12:16:07] <ecraven> well, that's because Emacs only knows the symbols, not what they are bound to ;)
[12:16:28] <mfiano> I like to sort my dependencies lexicographically, and in one project #:defpackage-plus was first. Big mistake :)
[12:16:31] <beach> ecraven: Or, as I put it, it doesn't know the "role" of the symbols.
[12:16:35] <ecraven> yea
[12:17:04] <_death> there is a discussion about precisely these indentation issues current on emacs-devel
[12:17:58] <jackdaniel> automatic indentation was supposed to save the programmer from certain cosmetic dillemas but given how much headache comes from invalid indentation (or of implementing the right thing), that claim seems to be shaky ,)
[12:18:46] <beach> jackdaniel: I maintain that the problems are due to a fundamentally flawed technique for computing indentation.
[12:19:17] <mfiano> beach: Try making the car of a :depends-on form something like #:DEFACE
[12:19:43] <beach> mfiano: I believe you, and I am not surprised.
[12:19:59] <mfiano> It is absolutely horrible after reindenting.
[12:20:07] <mfiano> beyond anything I have seen, even the prog1 thing
[12:20:52] <jackdaniel> beach: I know; I wonder what would be the correct approach for editors that aim to target multiple languages with indentation rules that depend on the role of a symbol
[12:20:56] <mfiano> Semantic indentation I agree with much more so than semantic highlighting.
[12:21:25] <jackdaniel> probably such editor would need to implement at least a part of a compiler for each supported language
[12:21:57] <jackdaniel> (and this is more common in ides lately I think, not necessarily for indentation but for completion and such)
[12:23:32] <pjb> gin: you may start by reading AIM-8 http://informatimago.com/develop/lisp/com/informatimago/small-cl-pgms/aim-8/aim-8.html ; and have a look at those examples: http://informatimago.com/articles/usenet.html#Compilation
[12:23:59] <pjb> gin: but then, if you want to go beyond the toy tiny lisp interpreter, reading LiSP is indeed a very good idea.
[12:24:05] <beach> jackdaniel: I seriously doubt that there is a uniform approach that can take different languages into account.  Each language would need a parser that recognizes that language, in our case READ.  And it needs to be incremental to handle large buffers, which I suspect is not even possible in most languages.
[12:24:36] *** Quits: cosimone (~user@151.14.38.15) (Remote host closed the connection)
[12:25:04] <pjb> gin: and the latest edition of the Dragon Book, Compiler Principles Techniques and Tools, Aho et al. http://dragonbook.stanford.edu/ if you want to go beyond (other languages with parsers, code generation, the latest edition even covers some garbage collection).
[12:26:02] <_death> beach: for languages without programmable syntax there's the tree-sitter approach
[12:27:16] <pjb> gin: LiSP is 500 pages, but it describes actually 11 interpreters/compilers refining them from simplistic to sophisticated, so it's more like 11 times 45 pages. You can process 45 pages ;-)
[12:27:59] <beach> _death: Sure, but I suspect that for languages with complicated syntax rules, there will be many more cases where the entire buffer parse result will be invalidated by a single keystroke.
[12:28:20] *** Joins: Everything (~Everythin@37.115.210.35)
[12:28:57] <beach> I may be wrong of course.
[12:29:22] *** Joins: pranavats (3fba1d1b34@jabberfr.org)
[12:30:00] <_death> beach: depends on the keystroke :).. but I think it seems to work in practice, so IDEs (and emacs..) adopt or experiment with it
[12:30:13] <mfiano> beach: tree-sitter is supposed to be fault tolerant for things like that, though i don't know how that works in process
[12:30:17] <pjb> beach: at least, emacs can highlight docstrings differently from literal strings.
[12:30:18] <beach> _death: Sounds good.
[12:30:41] <mfiano> practice*
[12:31:07] <pjb> Well, I've seen it do it once. I can't reproduce right now… :-/
[12:31:09] <_death> a quick search gives https://emacsconf.org/2020/talks/23/
[12:33:24] <shka> hey, any info on when the quicklisp comes back?
[12:36:17] *** Joins: attila_lendvai (~alendvai@catv-213-222-131-28.catv.broadband.hu)
[12:36:36] <pjb> I've see messages telling it's back already.
[12:36:48] <pjb> it pings.
[12:36:56] <ecraven> I just opened the homepage, seems to be there
[12:38:50] <shka> yeah, works for me as well
[12:39:00] <shka> had a problem in the morning
[12:41:37] *** Joins: selwyn (~selwyn@user/selwyn)
[12:44:42] *** Joins: attila_lendvai_ (~alendvai@catv-213-222-131-28.catv.broadband.hu)
[12:44:44] *** Quits: flip768 (~marek@user/flip214) (Read error: Connection reset by peer)
[12:45:18] *** Joins: flip214 (~marek@user/flip214)
[13:05:22] <flip214> when using FORMAT with ~s, can I make the output (nested in a sublist) of floats like with ~f instead of ~e? for this use case 123456789123.456 is easier to read/compare than 1.234…e9.
[13:14:16] <pjb> Use ~{ ~f ~} instead of ~s
[13:15:17] <pjb> (format nil "(~{~F~^ ~})" '(123456789123.456 100000000.2 0.0000012345)) #| --> "(123456790000.0 100000000.0 0.0000012345)" |#
[13:16:25] <pjb> (setf *read-default-float-format* 'double-float)  (format nil "(~{~F~^ ~})" '(123456789123.456 100000000.2 0.0000012345)) #| --> "(123456789123.456 100000000.2 0.0000012345)"" |#
[13:16:37] <pjb> s/""/"/
[13:17:30] <loke[m]> cosimone: If so, I must conclude the can be mixed, and the BNF is unclear.
[13:17:38] <loke[m]> I'm looking at this: http://clhs.lisp.se/Body/s_declar.htm#declare
[13:17:43] <loke[m]> "A declare expression, sometimes called a declaration, can occur only at the beginning of the bodies of certain forms; that is, it may be preceded only by other declare expressions, or by a documentation string if the context permits."
[13:19:16] *** Joins: cosimone (~user@151.14.38.15)
[13:19:35] *** Quits: cosimone (~user@151.14.38.15) (Remote host closed the connection)
[13:19:56] *** Joins: cosimone (~user@151.14.38.15)
[13:26:07] *** Joins: cosimone` (~user@5.170.241.6)
[13:27:56] *** Quits: cosimone (~user@151.14.38.15) (Ping timeout: 265 seconds)
[13:29:40] <flip214> pjb: well, it's not necessarily on the first level
[13:29:50] *** Joins: rain3 (~rain3___@2a02:2f09:d003:5800:b41c:c37:1705:91bc)
[13:30:23] <flip214> of course, if I knew how many levels deep the sublists go (yeah, so more like a tree), I could use ~{ ~}. In fact, I already do, for one level ;)
[13:30:30] <_death> you can try with a different pprint-dispatch table
[13:30:47] <flip214> but I hoped that there's some *print-* variable that I could change
[13:33:35] *** Joins: cosimone (~user@151.14.38.15)
[13:35:00] <flip214> _death: ah, thanks, that looks promising
[13:35:31] *** Quits: scymtym (~user@ip-94-114-248-79.unity-media.net) (Ping timeout: 252 seconds)
[13:36:07] *** Quits: makomo_ (~makomo@user/makomo) (Ping timeout: 252 seconds)
[13:36:40] *** Quits: cosimone` (~user@5.170.241.6) (Ping timeout: 252 seconds)
[13:45:07] *** Joins: notzmv (~zmv@user/notzmv)
[13:52:58] *** Quits: igemnace (~ian@user/igemnace) (Quit: WeeChat 3.3)
[13:58:07] *** Joins: makomo_ (~makomo@user/makomo)
[14:01:14] <beach> Shinmera: As you know, I object to the term "compiled language", but I can understand that you may have to simplify things, given the audience.
[14:01:44] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Read error: Connection reset by peer)
[14:02:52] <beach> Shinmera: "We explore... games in detail" sounds like "in detail" refers to the games.  Maybe "We explore in detail ... games"
[14:02:53] *** Joins: amb007 (~a_bakic@49.150.22.93.rev.sfr.net)
[14:04:15] <beach> Shinmera: "In CLOS methods ..." looks like "methods" are attached to CLOS.  I would insert a comma: "In CLOS, methods ...".
[14:04:58] *** Joins: scymtym (~user@2001:638:504:20e0:a511:8858:bc9:9aae)
[14:05:19] <beach> "specialise on .. arguments" -> "specialise to ... parameters"
[14:06:15] *** Quits: makomo_ (~makomo@user/makomo) (Quit: WeeChat 3.2)
[14:06:23] *** Joins: makomo (~makomo@user/makomo)
[14:06:55] *** Joins: sp (~susammatr@2001:470:69fc:105::31bc)
[14:07:04] <beach> Shinmera: "All of the methods require" I would write as "Each of the methods requires".
[14:07:44] *** Quits: sp (~susammatr@2001:470:69fc:105::31bc) (Changing host)
[14:07:44] *** Joins: sp (~susammatr@user/susam)
[14:08:32] <beach> Shinmera: "only really shines once ..." -> really shines only once..."
[14:08:38] <sp> Hello!
[14:09:00] <beach> Hello sp.
[14:10:07] *** Quits: frgo (~frgo@p200300deef0cee00245fe8d12486569b.dip0.t-ipconnect.de) (Remote host closed the connection)
[14:10:34] *** Joins: frgo (~frgo@p200300deef0cee00245fe8d12486569b.dip0.t-ipconnect.de)
[14:10:50] <susam> Hello beach! That other nick (sp) is just my other nick connected via Matrix bridge. I was just testing out the Matrix-Libera bridging.
[14:11:02] * sp is susam
[14:11:25] <beach> Shinmera: "the superclass's method" -> "the method of the superclass"
[14:11:46] <beach> susam: Yes, I saw that from the nick changes.
[14:12:56] <susam> Oh yes, the cloak and ircname displays it. Don't have to explain then.
[14:15:50] <beach> Shinmera: My (admittedly small) family says that demonstrative pronouns should be followed by a noun phrase. "To implement this [...], "
[14:16:55] <beach> Shinmera: "to the enemy class' superclass list" -> "to the list of superclasses of the enemy class"
[14:17:40] <beach> Shinmera: "when determining the set of" is a dangling participle that many people don't like. "when the set of ... is determined".
[14:18:11] <beach> "the emitter's :before method" -> "the :before method of the emitter"
[14:18:13] *** Quits: amb007 (~a_bakic@49.150.22.93.rev.sfr.net) (Read error: Connection reset by peer)
[14:18:28] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[14:19:59] <beach> "when segregating behaviours" [also a dangling participle] "when behaviors are segregated"
[14:21:11] <beach> Shinmera: "out of the gate"?  Do you mean "out of the box"?
[14:21:51] <beach> Shinmera: "when designing the overall" [dangling participle]
[14:22:45] <beach> Shinmera: "when handled, the stack unwinds" is a misplaced modifier.
[14:23:49] <beach> Shinmera: "when handled, the condition causes the stack to unwind", except that is not true.  Handling a condition does not cause the stack to unwind.
[14:24:47] <Shinmera> ? the handler of handler-case is executed after unwinding.
[14:25:15] <beach> Did you say HANDLER-CASE?
[14:25:36] <beach> I don't see it.
[14:25:52] <Shinmera> in this first section I'm talking about handler-case, as that's the construct analogous to try/catch in other languages. I then refine it to distinguish with handler-bind later.
[14:26:12] <beach> And it is not the handling that causes it.  It's the non-local control transfer that is part of the macro HANDLER-CASE.
[14:26:29] <beach> Hmm, OK, that's not clear to me.
[14:26:33] <Shinmera> sure. I'm not going to go into that much detail here.
[14:27:04] <jackdaniel> fwiw I have a local utility handler-case* that executes the handler /before/ unwinding the stack (built on top of handler-bind)
[14:27:21] <beach> Shinmera: Anyway, i need to take a lunch break.  I'll read more later.
[14:27:32] <Shinmera> Thanks, I'll go through your revisions in a bit!
[14:27:35] <Shinmera> Enjoy your lunch
[14:27:41] <beach> Thanks.
[14:31:44] *** Quits: random-nick (~random-ni@87.116.183.117) (Ping timeout: 265 seconds)
[14:36:01] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Read error: Connection reset by peer)
[14:38:10] *** Quits: frgo (~frgo@p200300deef0cee00245fe8d12486569b.dip0.t-ipconnect.de) (Remote host closed the connection)
[14:38:15] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[14:40:43] <madnificent_> Xach: Probably not the best time to say so, but with QuickLisp being down I realized I do appreciate it existing very much.  It's been a game changer.  There's something stopping me from adding things I need to it which I can't point my finger to so I'm sure it'll keep gaining momentum.  Thank you.
[14:40:51] *** madnificent_ is now known as madnificent
[14:42:13] *** Joins: Lycurgus (~juan@98.4.112.204)
[14:45:24] *** Quits: sp (~susammatr@user/susam) (Quit: Reconnecting)
[14:45:44] *** Joins: sp (~sp@user/susam)
[14:47:36] *** Quits: sp (~sp@user/susam) (Client Quit)
[14:47:57] *** Joins: sp (~sp@user/susam)
[14:59:41] *** Quits: shka (~herr@83.175.151.96.piasta.pl) (Ping timeout: 245 seconds)
[15:01:34] *** Joins: loskutak (~loskutak@gw.mecom.cz)
[15:11:52] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[15:15:14] *** Quits: Cymew (~ante@c-e989225c.023-1144-7570702.bbcust.telenor.se) (Ping timeout: 265 seconds)
[15:15:25] *** Joins: frgo (~frgo@195-154-222-168.rev.poneytelecom.eu)
[15:23:54] *** Joins: kevingal (~quassel@2a02:8084:4140:f300:8491:1b94:13bc:dee6)
[15:26:59] *** Joins: random-nick (~random-ni@87.116.165.220)
[15:28:21] *** Quits: frgo (~frgo@195-154-222-168.rev.poneytelecom.eu) (Remote host closed the connection)
[15:33:52] *** Joins: frgo (~frgo@195-154-222-168.rev.poneytelecom.eu)
[15:41:50] *** Quits: Inline (~Inline@2a02:908:1252:7a80:89dc:6a58:9f2a:ff3d) (Ping timeout: 260 seconds)
[15:42:17] *** Quits: cosimone (~user@151.14.38.15) (Quit: ERC (IRC client for Emacs 27.1))
[15:47:02] *** Quits: Lycurgus (~juan@98.4.112.204) (Quit: Exeunt)
[15:59:16] *** Joins: lad (~lad@user/lad)
[16:11:01] *** Joins: Cymew (~ante@c-e989225c.023-1144-7570702.bbcust.telenor.se)
[16:25:18] *** Joins: igemnace (~ian@user/igemnace)
[16:25:27] *** Quits: fengshaun (~fengshaun@S010680615f0c2c0a.cg.shawcable.net) (Ping timeout: 268 seconds)
[16:30:41] *** Joins: Bike (~Glossina@71.69.170.70)
[16:30:41] *** ChanServ sets mode: +o Bike
[16:32:14] *** Joins: patrice (~patrice@user/patrice)
[16:37:55] *** Quits: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f) (Remote host closed the connection)
[16:58:28] *** Quits: frgo (~frgo@195-154-222-168.rev.poneytelecom.eu) (Remote host closed the connection)
[17:03:00] *** Joins: lottaquestions (~nick@2607:fa49:503e:3000:608c:efd9:6c56:8079)
[17:11:32] *** Joins: shka (~herr@83.175.151.96.piasta.pl)
[17:12:29] *** Joins: frgo (~frgo@2001:4ba0:92c1:806:3c75:aabe:9b19:3efc)
[17:17:15] *** Quits: frgo (~frgo@2001:4ba0:92c1:806:3c75:aabe:9b19:3efc) (Ping timeout: 268 seconds)
[17:24:39] *** Quits: shka (~herr@83.175.151.96.piasta.pl) (Quit: Konversation terminated!)
[17:35:32] *** Joins: heisig (~heisig@p508b531b.dip0.t-ipconnect.de)
[17:37:57] *** Quits: hisacro (~OBSD@my.displ.nl) (Ping timeout: 265 seconds)
[17:39:13] *** Quits: jeosol (~jeosol@76-238-186-228.lightspeed.hstntx.sbcglobal.net) (Ping timeout: 252 seconds)
[17:40:14] *** Quits: SAL9000 (~SAL9000@shirakumo/sal9000) (Quit: WeeChat 3.1)
[17:44:25] *** Joins: frgo (~frgo@p200300deef0cee00219574b271966773.dip0.t-ipconnect.de)
[17:44:43] *** Quits: frgo (~frgo@p200300deef0cee00219574b271966773.dip0.t-ipconnect.de) (Remote host closed the connection)
[17:44:53] *** Joins: frgo (~frgo@p200300deef0cee00219574b271966773.dip0.t-ipconnect.de)
[17:57:08] *** Quits: igemnace (~ian@user/igemnace) (Remote host closed the connection)
[18:00:11] *** Joins: SAL9000 (~SAL9000@shirakumo/sal9000)
[18:03:25] *** Quits: Cymew (~ante@c-e989225c.023-1144-7570702.bbcust.telenor.se) (Ping timeout: 252 seconds)
[18:17:37] *** Quits: SAL9000 (~SAL9000@shirakumo/sal9000) (Ping timeout: 250 seconds)
[18:17:43] *** Quits: makomo (~makomo@user/makomo) (Ping timeout: 252 seconds)
[18:20:21] *** Quits: loskutak (~loskutak@gw.mecom.cz) (Ping timeout: 265 seconds)
[18:24:53] *** Joins: philnum[m] (~argolargo@2001:470:69fc:105::1:16b1)
[18:25:10] *** Joins: SAL9000 (~SAL9000@shirakumo/sal9000)
[18:25:24] *** Joins: fengshaun (~fengshaun@S010680615f0c2c0a.cg.shawcable.net)
[18:26:46] *** Joins: hisacro (~OBSD@my.displ.nl)
[18:30:43] *** Quits: Guest-liao (~Guest-lia@101.86.98.144) (Quit: Client closed)
[18:33:17] *** Quits: frgo (~frgo@p200300deef0cee00219574b271966773.dip0.t-ipconnect.de) (Remote host closed the connection)
[18:33:50] *** Joins: frgo (~frgo@p200300deef0cee00219574b271966773.dip0.t-ipconnect.de)
[18:34:19] *** Quits: frgo (~frgo@p200300deef0cee00219574b271966773.dip0.t-ipconnect.de) (Remote host closed the connection)
[18:34:29] *** Joins: frgo (~frgo@p200300deef0cee00219574b271966773.dip0.t-ipconnect.de)
[18:34:34] *** Quits: SAL9000 (~SAL9000@shirakumo/sal9000) (Quit: WeeChat 3.1)
[18:36:28] *** Quits: heisig (~heisig@p508b531b.dip0.t-ipconnect.de) (Quit: Leaving)
[18:38:21] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[18:39:26] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[18:40:11] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Client Quit)
[18:47:58] *** Joins: jealousmonk (~user@2804:431:e7c4:7e2f:f785:531d:f45d:57b8)
[18:50:09] *** Quits: frgo (~frgo@p200300deef0cee00219574b271966773.dip0.t-ipconnect.de) (Remote host closed the connection)
[18:50:20] *** Joins: frgo (~frgo@p200300deef0cee00219574b271966773.dip0.t-ipconnect.de)
[18:55:56] *** Quits: euandreh (~euandreh@2804:14c:33:9fe5:bea9:a565:1d5e:1b2d) (Ping timeout: 245 seconds)
[19:03:22] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 252 seconds)
[19:05:06] *** Joins: aeth (~aeth@user/aeth)
[19:06:43] *** Quits: frgo (~frgo@p200300deef0cee00219574b271966773.dip0.t-ipconnect.de) (Remote host closed the connection)
[19:06:56] *** Joins: frgo (~frgo@p200300deef0cee00219574b271966773.dip0.t-ipconnect.de)
[19:07:43] *** Joins: Devon (~devon@pool-108-28-172-103.washdc.fios.verizon.net)
[19:07:44] *** Quits: kevingal (~quassel@2a02:8084:4140:f300:8491:1b94:13bc:dee6) (Remote host closed the connection)
[19:08:06] *** Joins: SAL9000 (~SAL9000@shirakumo/sal9000)
[19:09:55] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 252 seconds)
[19:09:58] *** Quits: lad (~lad@user/lad) (Ping timeout: 252 seconds)
[19:10:30] <Devon> What caused yesterday's QuickLisp.org outage?
[19:11:22] *** Joins: aeth (~aeth@user/aeth)
[19:18:12] *** Joins: makomo (~makomo@user/makomo)
[19:20:43] <Shinmera> registrar didn't propagate records in time
[19:24:22] *** Quits: frgo (~frgo@p200300deef0cee00219574b271966773.dip0.t-ipconnect.de) (Remote host closed the connection)
[19:24:34] *** Joins: frgo (~frgo@p200300deef0cee00219574b271966773.dip0.t-ipconnect.de)
[19:30:43] *** Joins: lisp123 (~lisp123@5.30.23.247)
[19:31:05] <lisp123> Is it true that loop for x in y append z is inefficient?
[19:32:13] <beach> lisp123: No.  Since it is APPEND, Z has to be copied, but that's not more inefficient than it would be to copy it in other situations.
[19:32:16] <Bike> the way that's usually implemented, it doesn't actually use append, and each z is only copied once
[19:32:54] <lisp123> beach & Bike: Great thanks.
[19:33:08] *** ChanServ sets mode: -o Bike
[19:33:30] <beach> lisp123: What made you think it was inefficient?
[19:33:51] <lisp123> https://ccrma.stanford.edu/CCRMA/Courses/AlgoComp/cm/doc/contrib/lispstyle.html --> Remember that append copies its arguments. Avoid using append inside a loop to add elements to the back of a list. Use the collect clause in loop, or push elements onto a list and then nreverse the list to return the original ordering.
[19:34:24] <Bike> that sounds like it's talking about doing (append list (list elem)) which is actually kind of dumb
[19:34:33] <beach> Exactly.
[19:34:38] <beach> lisp123: That's totally different.
[19:35:15] <lisp123> Thanks for confirming. I felt it was something like that but got threw off because it said use a collect clause in a loop so wasn't 100% sure if it also applied to an append clause in the loop macro
[19:37:04] <lisp123> Not sure if you have seen this, but I uncovered this yesterday, still have to read through it to see if any nuggets of historic information http://www.cs.cmu.edu/afs/cs/project/ai-repository/ai//lang/lisp/faq/
[19:37:30] <lisp123> I was aware of the CMU Guide to Lisp, but not all the FAQs
[19:40:41] *** Quits: frgo (~frgo@p200300deef0cee00219574b271966773.dip0.t-ipconnect.de) (Remote host closed the connection)
[19:44:57] <beach> And if Z is known to be freshly allocated, you can use NCONC instead of APPEND.
[19:45:06] *** Quits: lottaquestions (~nick@2607:fa49:503e:3000:608c:efd9:6c56:8079) (Ping timeout: 245 seconds)
[19:47:47] <lisp123> Thanks, good to know
[19:55:07] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Ping timeout: 268 seconds)
[19:55:16] *** Joins: euandreh (~euandreh@191.181.59.160)
[19:55:55] *** Joins: amb007 (~a_bakic@17.150.22.93.rev.sfr.net)
[19:56:20] *** Joins: frgo (~frgo@p200300deef0cee00219574b271966773.dip0.t-ipconnect.de)
[20:04:00] *** Joins: scymtym_ (~user@2001:638:504:20e6:6ac3:87e0:e782:f3fc)
[20:05:31] *** Quits: scymtym (~user@2001:638:504:20e0:a511:8858:bc9:9aae) (Ping timeout: 252 seconds)
[20:08:27] <pjb> lisp123: the problem I have with loop for x in y append z is not that it's inefficient, it is that it's implemented in a non-conforming way in all implementations!  The standard says that it should be implemented as (apply (function append) y), which implies that all the x in y are copied BUT THE LAST one!  But all implementations copy all the elements: https://termbin.com/pjyq
[20:10:01] <beach> Interesting.  I believe SICL LOOP has the same issue.
[20:10:34] <beach> I should figure out how to fix that.
[20:12:07] *** Joins: makomo_ (~makomo@user/makomo)
[20:12:10] <beach> I think it would work to have 2 "tail pointers".
[20:12:37] *** Quits: scymtym_ (~user@2001:638:504:20e6:6ac3:87e0:e782:f3fc) (Ping timeout: 265 seconds)
[20:12:50] *** Joins: caret (~caret@24-116-7-78.cpe.sparklight.net)
[20:12:53] <beach> When APPEND is used, the cells between the two are copied.
[20:15:02] *** Quits: amb007 (~a_bakic@17.150.22.93.rev.sfr.net) (Ping timeout: 265 seconds)
[20:15:38] *** Joins: amb007 (~a_bakic@218.148.22.93.rev.sfr.net)
[20:17:48] <beach> And COLLECT X could then be implemented as APPEND (LIST X)
[20:19:03] *** Quits: frgo (~frgo@p200300deef0cee00219574b271966773.dip0.t-ipconnect.de) (Remote host closed the connection)
[20:19:15] *** Joins: frgo (~frgo@p200300deef0cee00219574b271966773.dip0.t-ipconnect.de)
[20:19:40] <beach> Nah, forget that last one.
[20:20:54] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[20:21:42] *** Joins: lisp123 (~lisp123@5.30.23.247)
[20:24:17] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[20:24:30] *** Joins: lisp123 (~lisp123@5.30.23.247)
[20:25:30] <lisp123> pjb: what are the implications of not copying the last one? I saw that in the standard but didn't realise what it means. Does it mean less memory should be used? And if one changes the last element then the appended list also should change?
[20:25:58] *** Joins: nowl (~nowl@pool-96-230-3-13.bstnma.fios.verizon.net)
[20:32:04] <pjb> lisp123: in general, indeed, it doesn't mean much, only some memory is reused.  But if you mutate the original lists, then the mutations on the last one will be reflected on the appended list. And properties such as: tailp ldiff will break.
[20:32:36] <_death> (let ((x (list 'some 'long 'list))) (prog1 (list (append '(easy to append a prefix to) x) (append '(or multiple prefixes for) x)) (setf (car x) 'any)))
[20:33:58] <lisp123> I see. The implementations should be held to account! I wonder if there was a specific discussion done on this during ANSI process (perhaps alluding to the same points you just mentioned)
[20:34:09] <pjb> tailp/ldiff can be used to represend circular lists without circularity; this is how prolog does it. So it may be important for some algorithms…
[20:34:30] <lisp123> That sounds pretty important :(
[20:34:32] <pjb> The standard is quite explicit on this point.
[20:34:58] <lisp123> Yes, I noted that as well every time I read it
[20:35:17] <pjb> Now, I admit that the behavior of the implementations is valid; we may want to amend the standard on this point… But it's a formal non-conformity.
[20:36:03] <pjb> If only they documented it!  Implementations are allowed to diverge (they become a superset of a subset of CL), but only if they document both the subset and the superset!
[20:37:13] <lisp123> Agree. I feel bad for someone who may have relied upon that point, assuming it was true
[20:37:39] <pjb> We would discuss this on cll; nowadays there doesn't remain much common place where all implementers can discuss those problems. We could make a lightning talk at next ELS…
[20:38:07] <_death> I don't think this behavior is worth the trouble in loop-append though
[20:38:27] <pjb> But it must be documented.
[20:38:31] <pjb> one way or the other.
[20:39:09] <pjb> I'll post an issue on WSCL
[20:50:19] <copec> Do you still :use between separate lisp files that will make up a single system that will have the package name that should be used (via pln's). Or do you even pln between the separate lisp files (each file in its own "subpackage")?
[20:56:37] *** Quits: amb007 (~a_bakic@218.148.22.93.rev.sfr.net) (Read error: Connection reset by peer)
[20:56:39] *** Quits: hendursa1 (~weechat@user/hendursaga) (Quit: hendursa1)
[20:57:40] *** Joins: amb007 (~a_bakic@218.148.22.93.rev.sfr.net)
[20:57:40] *** Quits: amb007 (~a_bakic@218.148.22.93.rev.sfr.net) (Read error: Connection reset by peer)
[20:58:12] *** Joins: hendursaga (~weechat@user/hendursaga)
[20:59:55] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[21:00:08] <Shinmera> Who are you talking to?
[21:01:55] *** Quits: rain3 (~rain3___@2a02:2f09:d003:5800:b41c:c37:1705:91bc) (Ping timeout: 265 seconds)
[21:04:49] <copec> The proverbial you
[21:05:45] <Shinmera> Ah. I do not use one package per file as I think it's a horrible idea. I use plns a lot, and never :use a package unless it's specifically designed for that.
[21:06:10] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[21:07:05] <copec> I see, thank you
[21:08:43] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Ping timeout: 252 seconds)
[21:11:17] <beach> I totally agree with Shinmera.
[21:11:36] <Fade> thirded
[21:11:38] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[21:12:05] <copec> Shinmera: For a project that you want to make a singular system, do you use a file for the defpackage form, for what you want to export, and then just in-package the same package the rest of the files, I take it?
[21:12:49] <copec> and put all the files as :components in the asdf:defsystem form under the .asd file?
[21:14:00] <Shinmera> To me packages are part of the user interface. As such, I make as many packages as I think is appropriate for the user. Typically this is one, but sometimes it is more. I put those into a package.lisp, and then use in-package as appropriate.
[21:14:08] <Shinmera> And yeah, listing the files is NBD.
[21:14:57] *** Quits: frgo (~frgo@p200300deef0cee00219574b271966773.dip0.t-ipconnect.de) (Remote host closed the connection)
[21:15:02] <etimmons> I drank the whole package inferred system, one package per file kool aid a while ago, but have been souring on it as of late.
[21:15:18] <copec> ^me too
[21:15:37] <Shinmera> Files are part of the internal interface. They are an implementation detail that should serve to organise code how it makes sense to you, not to the user.
[21:16:25] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Ping timeout: 265 seconds)
[21:17:00] <copec> I was hoping it would also cut along the aspect of making code more readable, since I was generally my-system-name/file-name for the package along each file
[21:17:19] <copec> Then use the other files that I needed to
[21:17:24] *** Quits: rgherdt__ (~rgherdt@2a02:8109:86c0:d8d:65d3:a88:babe:2183) (Remote host closed the connection)
[21:17:33] <etimmons> I still think it has its merits in some circumstances, but I realized what I really liked about it was the ability to locally declare dependencies, on both other files internal to the same system and other systems.
[21:18:00] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[21:18:33] <selwyn> can files be too long?
[21:18:38] <etimmons> I started work on an ASDF extension that was basically package-inferred-system, but did not require one package per file.
[21:19:13] <etimmons> Sadly, I haven't had the time to go back and finish it yet now that some of the support it needed from ASDF has been exported
[21:19:32] *** Joins: rogersm (~rogersm@90.166.177.48)
[21:23:48] <Shinmera> selwyn: imo, very much yes
[21:25:14] <copec> selwyn, There is probably some limit in an arbitrary component to be reached with file length, but generally they are divided up according to how a programmer wants to organize, which ideally should fall a long lines most commonly understood
[21:25:31] <copec> 🤷
[21:31:18] *** Joins: frgo (~frgo@p548a3042.dip0.t-ipconnect.de)
[21:37:29] *** Joins: tyson2 (~user@bras-base-toroon0628w-grc-46-142-112-141-177.dsl.bell.ca)
[21:40:42] <copec> One more question Shinmera: How do you quickly find in which file where a definition is for a symbol for a respective namespace is defined?
[21:42:04] <copec> I realize this is a more practical question rather than CL
[21:53:21] <Shinmera> I M-.?
[21:53:46] <selwyn> me too
[21:54:10] <selwyn> but common lisp source files are not always viewed in emacs
[21:54:43] *** Joins: Cymew (~ante@c-e989225c.023-1144-7570702.bbcust.telenor.se)
[21:54:47] <selwyn> which is an argument for shorter source files
[21:55:31] <Shinmera> idk man if you need to know that info without emacs just boot emacs up
[21:56:17] <Shinmera> I can't really think of a situation where one really needs to know this but can't access emacs
[21:56:45] <selwyn> a repo on github that i don´t want to/can´t clone at the moment
[21:57:53] <Shinmera> sounds like a bad reason to force the entire code organisation into a specific style :v
[21:58:47] <selwyn> well, ok
[22:01:07] *** Joins: cosimone (~user@2001:b07:ae5:db26:a7aa:8027:6b4e:2fb3)
[22:05:17] *** Quits: tyson2 (~user@bras-base-toroon0628w-grc-46-142-112-141-177.dsl.bell.ca) (Quit: ERC (IRC client for Emacs 27.2))
[22:11:11] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[22:12:00] *** Joins: lisp123 (~lisp123@5.30.23.247)
[22:15:52] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Ping timeout: 265 seconds)
[22:16:32] *** Quits: nowl (~nowl@pool-96-230-3-13.bstnma.fios.verizon.net) (Quit: Leaving)
[22:16:48] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[22:17:11] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 265 seconds)
[22:21:22] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Ping timeout: 252 seconds)
[22:21:30] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[22:24:55] *** Quits: Cymew (~ante@c-e989225c.023-1144-7570702.bbcust.telenor.se) (Ping timeout: 265 seconds)
[22:25:34] *** Joins: lottaquestions (~nick@2607:fa49:503e:3000:2706:5b4f:f250:cfad)
[22:26:13] *** Joins: lisp123 (~lisp123@5.30.23.247)
[22:28:40] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Ping timeout: 268 seconds)
[22:29:23] *** Quits: makomo_ (~makomo@user/makomo) (Quit: WeeChat 3.2)
[22:30:36] *** Joins: amb007 (~a_bakic@218.148.22.93.rev.sfr.net)
[22:30:36] *** Quits: amb007 (~a_bakic@218.148.22.93.rev.sfr.net) (Read error: Connection reset by peer)
[22:31:23] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[22:31:29] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[22:48:53] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 250 seconds)
[22:49:41] *** Quits: lottaquestions (~nick@2607:fa49:503e:3000:2706:5b4f:f250:cfad) (Ping timeout: 245 seconds)
[22:50:38] <pjb> selwyn: that said, when you browse C sources where there's one function per file, you realize that it's going to far too.
[22:50:59] *** Joins: waleee (~waleee@h-98-128-228-119.na.cust.bahnhof.se)
[22:51:12] <pjb> My current answer is that we should let the editor decide where to store stuff.
[22:51:57] <White_Flame> cue rant about tiles themselves being a problem
[22:52:01] <White_Flame> *files
[22:52:54] <White_Flame> forcing a linearization of your code, instead of being a set of declarations & scopes, and having more flexible organization in viewing & editing
[22:53:30] *** Quits: Nilby (~Nilby@2601:603:1481:30a0:82fa:5bff:fe66:4b49) (Ping timeout: 260 seconds)
[22:54:36] *** Quits: lisp123 (~lisp123@5.30.23.247) (Quit: Leaving...)
[22:55:01] <pve> do you mean something like the Smalltalk class browser?
[22:55:29] <copec> I currently divide stuff along lines of where there is a complete abstraction per-say, for instance: https://gist.github.com/copecog/99d4e34065ab1dac84524f0856cec8b4
[22:56:49] *** Quits: hineios (~hineios@a95-93-142-124.cpe.netcabo.pt) (Quit: The Lounge - https://thelounge.chat)
[22:57:05] <White_Flame> pve: that's only one idea, but anything that doesn't lock you to the happenstance location in files is good
[22:57:23] *** Joins: scymtym (~user@ip-94-114-248-79.unity-media.net)
[22:57:31] <White_Flame> copec: abstractions overlap, and different functions/declarations have different relations, just not prev/next inside a section
[22:59:21] *** Joins: hineios (~hineios@a95-93-142-124.cpe.netcabo.pt)
[23:00:08] <pve> White_Flame: yeah, I think I saw on reddit that someone was working on a "class browser" type emacs mode (possibly integrated with slime).. it looked pretty interesting, but I'm not sure how serious it was
[23:00:13] <pjb> pve: yes, for the browsing user interface, indeed.
[23:00:15] <copec> Yeah, it usually becomes "there is too much going on in this single file", so the arbitrary spot that there are less specific details that are convenient to digest together, make the cut there and start a new file
[23:00:41] <ecraven> is there any short tutorial on how to read a binary file into some sort of sequence and then access it as various different number formats at given offsets? (u32le, u16be, and so on)
[23:00:47] <pjb> pve: try: git@github.com:mmontone/lisp-system-browser.git
[23:01:44] <pjb> ecraven: (let ((data (binary-file-contents "/etc/passwd"))) (values (subseq data 0 10) (subseq data 80 90))) #| --> #(35 35 10 35 32 85 115 101 114 32) ; #(115 121 115 116 101 109 32 105 115 32) |#
[23:01:48] <copec> Then when all done, it becomes clear where it makes more sense to divide up, so I end up moving source around anyways. I have never seemed to have gotten enough experience to call that out ahead of time
[23:02:03] <pjb> ecraven: (let ((data (binary-file-contents "/etc/passwd" :element-type '(unsigned-byte 16)))) (values (subseq data 0 10) (subseq data 80 90))) #| --> #(8995 8970 21792 25971 8306 24900 24948 24930 25971 8970) ; #(26998 25956 8292 31074 8970 20256 25968 8302 26948 25970) |#
[23:02:04] <pve> pjb: yes! that's the one I was thinking of
[23:02:21] <ecraven> pjb: unfortunately I have mixed data, it's not all one datatype :-/
[23:02:37] <pjb> ecraven: well, the point is to load the bytes, and then to decode them.
[23:02:44] <pjb> You can use displaced arrays.
[23:02:53] <ecraven> yea, how *do* I best decode them? overlapping displaced arrays?
[23:03:08] <ecraven> ah, ok. thanks!
[23:03:31] <pjb> Well, you use a decoding library anyways. There are several.
[23:03:34] <ecraven> does common lisp support pdp byte ordering (
[23:03:40] <ecraven> "middle endian") out of the box?
[23:04:02] <pjb> I don't know any implementation having a :external-format that let you specify that for binary file.
[23:04:37] <pjb> The standard says: The external-format is meaningful for any kind of file stream whose element type is a subtype of character.
[23:04:48] <pjb> but implementation could add external-formats for binary files.
[23:05:09] <White_Flame> ecraven: CL doesn't expose the memory layout
[23:05:12] <pjb> So, the usual: only octet binary files, and decode yourself.
[23:05:26] <pjb> Since octet binary files is what posix provides.
[23:05:42] <ecraven> thanks ;)
[23:09:06] *** Joins: gaqwas (~john@dynamic-077-004-048-156.77.4.pool.telefonica.de)
[23:12:32] <ecraven> can loop collect into an array?
[23:13:49] <White_Flame> I usually use MAP for that, although if you need extended features of LOOP like conditionall COLLECT, then yeah that's harder
[23:14:59] <White_Flame> if you don't care about GC pressure, you can always (coerce (loop .. ) '(vector ...))
[23:15:08] <ecraven> thanks ;)
[23:15:19] <yitzi> You could use `do (vector-push ...)`
[23:15:37] <yitzi> and just return it.
[23:16:11] <White_Flame> if you need to do soemthing like that, I prefer (map (make-array size) (lambda () ...)) to generate them
[23:16:12] <pjb> or (loop for d from 0 for e in list do (setf (aref destination d) e) (incf d))
[23:16:17] <pjb> or (loop for d from 0 for e in list do (setf (aref destination d) e))
[23:19:08] <copec> It's generally not CL style, but I pretty much always factor complicated loops into recursive algorithms, using function tail recursion, and under SBCL it has always been quicker too
[23:19:51] *** Quits: rogersm (~rogersm@90.166.177.48) (Quit: Leaving...)
[23:21:20] *** Joins: Spawns_Carpeting (~Spawns_Ca@user/spawns-carpeting/x-6969421)
[23:30:36] *** Quits: caret (~caret@24-116-7-78.cpe.sparklight.net) (Read error: Connection reset by peer)
[23:31:43] *** Joins: Lycurgus (~juan@98.4.112.204)
[23:32:04] *** Joins: lottaquestions (~nick@2607:fa49:503e:3000:dae8:1099:d49d:bb8c)
[23:59:21] *** Joins: Psybur (~Psybur@mobile-166-170-32-197.mycingular.net)
