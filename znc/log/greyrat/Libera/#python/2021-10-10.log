[00:00:10] *** Joins: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br)
[00:00:23] *** Joins: fuz (~fuz@user/fuz)
[00:00:24] <Macuser> I'm using a list for each timestamp to collect all values on the line with that time stamp
[00:00:43] <Macuser> 00:00:00 - 23:59:59
[00:01:44] <Repiphany> Could use a dictionary and sort it at the end
[00:02:49] <aphysically> jinsun: black makes it uglier anyway maybe https://bpa.st/FEUQ (would call vencoder_check() instead of vencoder_future.result())
[00:03:21] *** Joins: sh4rk (~lemonade@user/sh4rk)
[00:04:02] <aphysically> actually for the shorter ones it's about the same
[00:04:38] <aphysically> see: https://bpa.st/B3DA
[00:05:39] <jinsun> the _check one looks better actually for the shorter ones
[00:06:35] *** Joins: shibboleth (~shibbolet@user/shibboleth)
[00:09:49] *** Quits: DF32 (~DF32@2001:8a0:f8a0:9a00:7cf0:bf12:756d:927c) (Quit: Client closed)
[00:10:24] *** Joins: scoobydoob (~scooby@user/scoobydoo)
[00:10:52] *** Joins: driib1 (~driib@185.195.233.162)
[00:11:14] *** Quits: cliluw (~cliluw@47.147.80.149) (Read error: Connection reset by peer)
[00:11:14] *** Quits: Donitz (~Donitz@85-156-203-108.elisa-laajakaista.fi) (Read error: Connection reset by peer)
[00:11:14] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Read error: Connection reset by peer)
[00:11:15] *** Quits: driib (~driib@185.195.233.162) (Quit: Ping timeout (120 seconds))
[00:11:15] *** driib1 is now known as driib
[00:11:23] *** scoobydoob is now known as scoobydoo
[00:11:40] *** Quits: bbear (~znc@21212.s.t4vps.eu) (Quit: ZNC 1.7.4 - https://znc.in)
[00:11:45] *** Joins: cliluw (~cliluw@47.147.80.149)
[00:11:51] <jinsun> aphysically: if all the lambda's are the same structure, a in b & c if d else e, then you could write a def that takes a,b,c,d,e, and just put that function in the executor.submit, to make it less ugly, long lambdas get ugly easily
[00:12:03] *** Joins: bbear (~znc@21212.s.t4vps.eu)
[00:12:24] *** Quits: shailangsa (~shailangs@host217-39-45-200.range217-39.btcentralplus.com) (Killed (NickServ (GHOST command used by shailangsa_)))
[00:12:37] <aphysically> yeah good idea
[00:13:25] *** Joins: Praise- (~Fat@user/praise)
[00:13:26] *** Quits: Mumm-Ra (~Lando-Spa@user/lando-spacepimp) (Ping timeout: 245 seconds)
[00:14:04] *** Quits: Praise (~Fat@user/praise) (Quit: No Ping reply in 180 seconds.)
[00:14:04] *** Quits: brelod (~me@90.244.150.142) (Ping timeout: 245 seconds)
[00:14:05] *** Quits: matrixbot_bartab (~matrixbot@155.210.31.93.rev.sfr.net) (Ping timeout: 245 seconds)
[00:14:05] *** Quits: trench (trench@user/trench) (Ping timeout: 245 seconds)
[00:14:05] *** Quits: kurfen (~kurfen@lfbn-ann-1-215-215.w86-200.abo.wanadoo.fr) (Ping timeout: 245 seconds)
[00:14:05] *** Quits: fakenullie (~nullie@london.nullie.name) (Ping timeout: 245 seconds)
[00:14:14] *** Joins: trench (trench@user/trench)
[00:14:18] *** Joins: brelod (~me@90.244.150.142)
[00:14:29] *** Quits: jpodivin (~jpodivin@118.108.broadband14.iol.cz) (Ping timeout: 245 seconds)
[00:14:29] *** Quits: mns (~mns@c-73-119-178-157.hsd1.ma.comcast.net) (Ping timeout: 245 seconds)
[00:14:36] *** Joins: matrixbot_bartab (~matrixbot@155.210.31.93.rev.sfr.net)
[00:14:51] *** Joins: mns (~mns@c-73-119-178-157.hsd1.ma.comcast.net)
[00:14:54] *** Joins: kurfen (~kurfen@lfbn-ann-1-215-215.w86-200.abo.wanadoo.fr)
[00:14:55] *** Joins: Hawker (~Hawker@drmons0544w-47-55-147-54.dhcp-dynamic.fibreop.ns.bellaliant.net)
[00:14:59] *** Joins: Donitz (~Donitz@85-156-203-108.elisa-laajakaista.fi)
[00:15:21] <Macuser> Repiphany yeah i'll just sort the file and rewrite it. that might work
[00:15:40] <rannnn8888> https://bpa.st/5OYA ok and here why i get the c.execute only one time :X  ?
[00:15:40] <Hawker> I've been working at a uni assignment all day, and I'm desperate. Can anyone help me?
[00:16:11] <SnoopJ> Found the answer to my question about inferring the name of a SWIG local: I can avoid the need entirely by prefixing the local's identifier with _global_, which disables argument renaming. Result: `%typemap(in) Acme::Anvil& (Py_buffer _global_pybuf) { /* ... */ };  %typemap(free) Acme::Anvil& { PyBuffer_Release(_global_pybuf); }`
[00:16:22] *** Praise- is now known as Praise
[00:18:07] *** Quits: sh4rk (~lemonade@user/sh4rk) (Quit: ZNC 1.8.2 - https://znc.in)
[00:18:17] <aphysically> jinsun: oh, this doesn't work
[00:18:27] <aphysically> mypy says it cannot determine the type of "lambda: True"
[00:18:34] <aphysically> :D
[00:18:43] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Ping timeout: 252 seconds)
[00:18:48] *** Joins: Gustavo6046_ (~Gustavo60@user/gustavo6046)
[00:19:47] <aphysically> I could define it for all of them before calling with callable syntax Callable[[], bool]
[00:20:30] <aphysically> I'm thinking mypy should probably be able to infer the type of lambda: True though; maybe it will be able to if mypy ever is able to infer the types of real functions too?
[00:20:53] *** Joins: justsomeguy (~justsomeg@user/justsomeguy)
[00:21:23] *** Joins: fjmorazan (~quassel@user/fjmorazan)
[00:21:46] *** Gustavo6046_ is now known as Gustavo6046
[00:21:48] <SnoopJ> I'm not sure type inference is really on the horizon for mypy, that's more the domain of e.g. pyright?
[00:22:11] *** Quits: thurs806 (~thurs@ip68-225-209-147.ph.ph.cox.net) (Read error: Connection reset by peer)
[00:22:11] <SnoopJ> inference of this sort I mean
[00:22:31] <SnoopJ> OTOH I would expect the same, that `lambda: True` would be `Callable[[], bool]`
[00:22:52] <Hawker> So I have a binary tree, and need to delete an arbitrary node and re-allocate all its descendants... is anyone familiar with this?
[00:22:53] <jinsun> pyright does muhc better Callble[[], Literal[True]]
[00:23:03] *** Joins: thurs806 (~thurs@ip68-225-209-147.ph.ph.cox.net)
[00:23:43] <jinsun> although mypy seems to do it as well when I try just that one line def () -> builtins.bool
[00:24:28] <SnoopJ> I think that's because the lambda compiles down to `LOAD_CONST, RETURN_VALUE`
[00:24:47] <SnoopJ> but yea, it seems like mypy *does* get it right?
[00:25:03] <SnoopJ> aphysically, can we see the code mypy's whiffing on?
[00:25:41] <aphysically> yeah one sec
[00:27:29] <aphysically> https://bpa.st/L2TQ it's not quite self-contained, but you get cannot infer type of lambda on the _check definitions (but NOT the true_func one) and also you get cannot call function of unknown type on the _check() calls
[00:28:18] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Read error: Connection reset by peer)
[00:28:23] <aphysically> replacing lambda: True with true_func solves the cannot infer type of lambda errors (???), but not the cannot call function of unknown type errors, and annotating the _check's with the appropriate callable doesn't make it happy, I think it doesn't like what it infers about the submit(..).result function
[00:28:32] <aphysically> I could fix that with a cast() presumably
[00:28:44] <aphysically> but all of that is quite a bit of a mess just to satisfy mypy
[00:28:45] <SnoopJ> and the _check functions annotate with Callable[[], bool]? It might help to see the mypy output as well since the sample isn't standalone
[00:29:12] <aphysically> yeah that would be the correct annotation for them
[00:29:29] <aphysically> https://bpa.st/CRXA
[00:30:02] *** Joins: shailangsa (~shailangs@host217-39-45-200.range217-39.btcentralplus.com)
[00:30:03] *** Joins: _ev (~ev@user/ev/x-8999918)
[00:30:11] <aphysically> well, you can make it standalone if you want by cloning the repo: https://github.com/GBeauregard/pyffstream/blob/49fd89dfe0fe169aef754204b428a2ad6f5a6a88/src/pyffstream/cli.py#L1366
[00:30:17] *** Quits: cthulchu_ (~Cthulchu@193.194.107.250) (Read error: Connection reset by peer)
[00:30:19] *** Parts: _ev (~ev@user/ev/x-8999918) ()
[00:30:29] *** Joins: cthulchu_ (~Cthulchu@193.194.107.250)
[00:30:55] *** Joins: _ev (~ev@user/ev/x-8999918)
[00:31:12] *** Quits: kurfen (~kurfen@lfbn-ann-1-215-215.w86-200.abo.wanadoo.fr) (Quit: WeeChat 2.3)
[00:31:31] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[00:31:41] <aphysically> the lambda: True part of it might have to do with mypy treating ternaries and regular assignment different, but I don't remember the details
[00:31:52] *** Quits: spenat (~spenat@c-1125235c.012-6-62726f1.bbcust.telenor.se) (Ping timeout: 252 seconds)
[00:31:57] <aphysically> iirc that's something that's on the plate to possibly change
[00:32:01] *** Joins: morrigan_ (~m0rr1gan@user/m0rr1gan)
[00:32:02] <jinsun> ah I think mypy has weird bugs with the if else expression, you are hit by that
[00:32:18] <jinsun> if you use if else statements it will be fine probably
[00:32:53] <rannnn8888> https://bpa.st/5OYA ok and here why i get the c.execute only one time :X  ?
[00:33:10] <Macuser> nevermind Repiphany sorting the lines requires the same process
[00:33:14] *** Quits: ali1234 (~al@user/ali1234) (Remote host closed the connection)
[00:33:16] *** Joins: darksun (~darksun@user/darksun)
[00:33:17] <Macuser> ugh this is weird.
[00:33:31] <Macuser> might have to do it your way and use dictionary
[00:34:11] *** Joins: ali1234 (~al@user/ali1234)
[00:34:32] *** Joins: Lando-SpacePimp (~Lando-Spa@user/lando-spacepimp)
[00:34:45] *** Joins: ackyshake (~ackyshake@user/ackyshake)
[00:34:47] <jinsun> aphysically: https://github.com/python/mypy/issues/4134
[00:35:12] <jinsun> althoguh maybe not exactly that
[00:35:32] <jinsun> because here it is not inferring types at all instead of inferring wrongly
[00:35:51] *** Quits: morrigan (~m0rr1gan@user/m0rr1gan) (Ping timeout: 245 seconds)
[00:35:51] *** Quits: B33F_1337 (~b33f1337@host.b33f1337.com) (Ping timeout: 245 seconds)
[00:35:52] *** Quits: jazz-o-lantern (~jaziz@172.58.35.83) (Ping timeout: 245 seconds)
[00:35:52] *** Quits: somlis (~somlis@user/somlis) (Ping timeout: 245 seconds)
[00:37:30] <aphysically> jinsun: yeah I think it's a mypy bug maybe, if I do this: https://bpa.st/KVMA
[00:38:32] <aphysically> that allows it to get the type of the result correct (which it throws an error about, because:
[00:38:33] <aphysically> src/pyffstream/cli.py:1386: error: Incompatible types in assignment (expression has type "Callable[[], bool]", variable has type "Callable[[Optional[float]], bool]")
[00:38:51] *** Quits: han-solo (~hanish@user/han-solo) (Quit: leaving)
[00:39:03] <aphysically> but yeah okay, that's at least correct (result accepts a timeout argument)
[00:39:11] <aphysically> but it still chokes on the lambda assignment for some reason
[00:39:35] *** Quits: ackyshake (~ackyshake@user/ackyshake) (Ping timeout: 265 seconds)
[00:40:12] *** Joins: bomb-on (~bomb-on@194.144.47.113)
[00:40:14] <jinsun> yeah definitely mypy bug, although restructuring that a bit probably will be better here
[00:40:25] <jinsun> I think the simple executor.submit was fine, there won't be much overhead in checking that in a separate thread and creating a Future
[00:40:50] <aphysically> yes these concerns are a bit academic at best
[00:41:33] *** Joins: akaWolf (~akaWolf@akawolf.org)
[00:41:51] <aphysically> oh, the lambda choke goes away if I annotate the callable as Callable[[],bool]...I think it's fine though
[00:42:30] <aphysically> proper annotation would probably need the new callable syntax people are discussing (?)
[00:43:50] <aphysically> not sure how callable matching [] with functions that have only parameters with defaults shakes out and how that interacts with all the new proposals for more fine grained callable syntaxes
[00:43:51] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Ping timeout: 245 seconds)
[00:45:13] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[00:45:26] <aphysically> but anyway to recap on the mypy bug: the top form throws mypy errors but the bottom one doesn't: https://bpa.st/YBZA
[00:47:42] <jinsun> yeah that is just mypy not doing well with ternary expression
[00:48:01] <jinsun> pyright handles it well, it doesn't even need the annotation
[00:48:49] <aphysically> yep
[00:51:46] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 260 seconds)
[00:52:08] *** Quits: Bronto22 (~mennoh@84-86-247-193.fixed.kpn.net) (Quit: Konversation terminated!)
[00:55:40] *** Joins: Bryce (~bryce@ool-457dd6ac.dyn.optonline.net)
[00:55:42] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[00:56:02] *** Joins: LuxuryMode (uid91005@id-91005.ilkley.irccloud.com)
[00:56:22] *** Joins: fakenullie (~nullie@london.nullie.name)
[00:56:36] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Read error: Connection reset by peer)
[00:56:56] <LuxuryMode> I have a regex for matching US zipcodes. Right now it only matches the full 10 char version of 5 digits followed by a hyphen followed by 4 digits. r"(\b\d{5}-\d{4}\b|\b\d{5}\b\s)" I'd like to be able to support the plan 5 digit version, e.g. 50121. How can I modify the regex to support that?
[00:57:41] <LuxuryMode> In other words, it either has to be the 5 digit version of 5 digits + hyphen + 4 digits.
[00:59:06] *** Joins: jazzy (~jaziz@172.58.38.192)
[01:00:20] <LuxuryMode> I guess it's just `\b\d{5}|\b\d{5}-\d{4}\b|\b\d{5}\b\s`?
[01:00:44] *** Quits: pr100 (~pr100@cpc92728-cmbg20-2-0-cust160.5-4.cable.virginm.net) (Ping timeout: 256 seconds)
[01:01:00] <nedbat> LuxuryMode: it looks like your original regex already did 9- or 5-digits
[01:01:26] <nedbat> LuxuryMode: I would use r"\b\d{5}(-\d{4})?\b"
[01:02:04] <LuxuryMode> that would match '98118-1' though, no?
[01:02:35] <nedbat> LuxuryMode: no, because if it has a dash, it has to then have 4 digits and a word break
[01:02:46] *** Quits: Powerhouse6666 (~Powerhous@security.orcacomputers.com) (Quit: Leaving)
[01:02:52] *** Joins: noocsharp (~noocsharp@nihaljere.xyz)
[01:03:38] <LuxuryMode> hmm something must be a bit off bc with your regex, `bool(regex.match('98119-1'))` evaluates to `True`
[01:03:49] *** Quits: grooverman (~grooverma@177.95.12.14) (Read error: Connection reset by peer)
[01:04:22] <nedbat> LuxuryMode: what part did it match? Only the 5-digit part
[01:04:40] <LuxuryMode> oh duh bc I'm using `match`, right
[01:04:58] *** Joins: grooverman (~grooverma@177.95.12.14)
[01:05:04] <nedbat> LuxuryMode: is this meant to be a fullmatch? Or finding zips in text?
[01:05:26] <LuxuryMode> yeah full match. I guess I should have been clearer. I want to essentially validate that the _entire_ string is either 5 digits or 5 digits + hyphen + 4 digits
[01:06:33] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[01:07:06] *** Joins: TheHermann (~TheHerman@gateway/tor-sasl/thehermann)
[01:07:10] <nedbat> LuxuryMode: ok, then you don't need \b on the ends
[01:07:20] *** Joins: ackyshake (~ackyshake@user/ackyshake)
[01:07:58] *** Quits: grooverman (~grooverma@177.95.12.14) (Client Quit)
[01:08:17] *** Quits: justsomeguy (~justsomeg@user/justsomeguy) (Quit: WeeChat 3.2)
[01:08:31] *** Joins: grooverman (~grooverma@177.102.119.40)
[01:09:50] *** Quits: TheHermann (~TheHerman@gateway/tor-sasl/thehermann) (Remote host closed the connection)
[01:10:10] *** Joins: TheHermann (~TheHerman@gateway/tor-sasl/thehermann)
[01:10:15] <LuxuryMode> right
[01:10:19] <LuxuryMode> I think `r'^\d{5}(?:-\d{4})?$'` works
[01:11:07] <nedbat> LuxuryMode: with fullmatch you don't need ^ or $
[01:12:04] *** Quits: jazzy (~jaziz@172.58.38.192) (Ping timeout: 252 seconds)
[01:12:09] <aphysically> jinsun: re: Final for ClassVar
[01:12:11] <LuxuryMode> Ah ok, gotcha. Thanks a lot!
[01:12:17] <aphysically> it's actually valid to use ClassVar with field()!
[01:12:22] *** Quits: gitesh (uid423739@id-423739.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[01:12:24] <aphysically> it only raises if you try to specify a default_factory fo rit
[01:14:52] <LuxuryMode> Does it make sense to put constants that I want at the module level in that module's `__init__.py`?
[01:14:56] <jinsun> aphysically: hmm yeah it is valid, I was just thinking maybe with Final it could be used to distinguish between things that should show up in fields list and those that shouldn't
[01:15:48] <aphysically> yeah, but I think my concern is this still collides with the final PEP
[01:16:23] <aphysically> I don't think we should shove too much burden here to typecheckers?
[01:16:33] <jinsun> aphysically: but I guess we can just treat Final as ClassVar only and then it should never be allowed in the fields list
[01:17:01] <Macuser> ok i need to append to a list inside a dictionary
[01:17:36] <Macuser> dict = {'a': [30],[150]}
[01:18:07] <Macuser> and I wanna append to those lists
[01:18:30] <Macuser> so it becomes for example dict = {'a': [30, 25], [150, 400]}
[01:18:41] *** Joins: somlis (~somlis@user/somlis)
[01:18:46] *** Joins: markb1 (~markb1@2600:1700:eb40:7ecf:def0:6996:2bb9:77)
[01:18:53] *** Quits: ledtc (~ledtc@c-f8aa70d5.014-57-6c756e3.bbcust.telenor.se) (Quit: Client closed)
[01:20:09] <Macuser> stackoverflow here i coooome
[01:20:56] *** Joins: jazzy (~jaziz@172.58.36.233)
[01:21:08] *** Joins: obx (~orange@user/orangeboxcutter)
[01:21:48] *** Quits: orangeboxcutter (~orange@user/orangeboxcutter) (Ping timeout: 250 seconds)
[01:22:08] <Repiphany> That isn't a valid dict
[01:22:15] <Macuser> just realized I typed it wrong
[01:22:26] <Macuser> dict = {'a': [[30],[150]]}
[01:22:31] <Macuser> it's a list of two lists now.
[01:22:38] <Macuser> how do I append to each of those sub lists
[01:22:50] <Repiphany> dict['a'][0].append(25)
[01:23:07] <Macuser> and dict['a'][1].append(400) for the other
[01:24:10] *** Quits: rambleba1 (ramblebamb@gateway/vpn/protonvpn/ramblebamble) (Quit: has been fun y'all see you next time around)
[01:25:55] <jinsun> aphysically: just that if you make Final ClassVar only without having a way to make it instance variable, you lose a way to do things that is possible right now, Final instance variable with default_factory
[01:26:51] <jinsun> (though I never needed this really so I don't care much)
[01:27:45] *** Quits: roxfan (roxfan@11.121-64-87.adsl-dyn.isp.belgacom.be) (Remote host closed the connection)
[01:28:25] *** Joins: kickingvegas (~cchoi@c-24-5-40-20.hsd1.ca.comcast.net)
[01:28:45] *** Joins: Kharon (uid511277@user/cypris)
[01:29:40] *** Joins: roxfan (roxfan@11.121-64-87.adsl-dyn.isp.belgacom.be)
[01:30:30] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 260 seconds)
[01:30:38] *** Quits: shibboleth (~shibbolet@user/shibboleth) (Remote host closed the connection)
[01:30:40] *** Quits: djhankb (~djhankb@208.113.164.68) (Read error: Connection reset by peer)
[01:31:05] <jinsun> aphysically: but the check could be on default_factory instead of field I guess
[01:31:19] *** Quits: TheHermann (~TheHerman@gateway/tor-sasl/thehermann) (Remote host closed the connection)
[01:31:41] *** Joins: TheHermann (~TheHerman@gateway/tor-sasl/thehermann)
[01:31:59] *** Joins: shibboleth (~shibbolet@user/shibboleth)
[01:32:00] <aphysically> I think I might respond that if it's Final you don't need a factory
[01:32:10] *** Joins: fikran (~fikran@user/fikran)
[01:32:39] <aphysically> err
[01:33:36] *** Quits: stewie925 (~stewie925@2600:1702:44f0:35c0:b814:bd17:1c14:5388) (Ping timeout: 256 seconds)
[01:33:44] <aphysically> but right, the check would have to be on default_factory if we're not changing existing dataclass behavior
[01:34:22] <aphysically> I'm just not sure we should punt that kind of analysis to type checkers
[01:34:58] <aphysically> and it all ends up more confusing than just being absolute about it
[01:38:24] <jinsun> aphysically: why not no factory for Final? I might want the variable to be Final only for the instance, but different instances can have different values, weird example butt like this https://mypy-play.net/?mypy=latest&python=3.10&flags=strict&gist=4f1f96d7d3073f5c7548b6d7f9697fca
[01:39:34] *** Quits: kosh (~kosh@user/kosh) (Ping timeout: 252 seconds)
[01:39:56] *** Joins: oriba (~oriba@x4dbf5c15.dyn.telefonica.de)
[01:41:57] *** Joins: PantelicGR (~PantelicG@user/pantelicgr)
[01:43:19] *** Joins: trace987 (~trace@ip5f5a6a70.dynamic.kabel-deutschland.de)
[01:45:55] <rannnn8888> stupid ask :D  if i have list and i want remove one item yes and one no ? what the best way ?
[01:46:33] <jinsun> aphysically: PEP 591 says to assume Final = ClassVar only if it is initialized in the class body, with default_factory the initialiation happens when the dataclass is instantiated, so there it should not be treated as ClassVar
[01:46:50] <rannnn8888> example list['yes','nn','yes2','nn2'] results want list['yes','yes2']
[01:46:56] <aphysically> I actually think that's not true
[01:47:14] *** Joins: Betal (~Betal@user/betal)
[01:47:23] <aphysically> I think it gets initialized THEN re-made with the dataclass decorator or some such
[01:47:29] *** Quits: manti7 (~manti7@176.10.104.94) (Quit: WeeChat 3.1)
[01:47:41] <aphysically> but I"m thinking about it one sec
[01:48:42] <jinsun> yes but you don't care about what happens before the dataclass decorator is called
[01:48:50] <aphysically> yeah I understand now, but there's a sort of trilemma here: 1) we leave the current buggy behavior that doesn't allow annotating classvars as final and gives wrong instructions to type checkers 2) we follow the pep absolutely and always make final classvar, but doesn't allow specifying variables final in your mentioned case, 3) we allow default_factory for final, but we have to make type checkers
[01:48:52] <aphysically> make this extra check and we sorta break the PEP depending on if you interpret it like you said
[01:49:44] *** Joins: stewie925 (~stewie925@2600:1702:44f0:35c0:b814:bd17:1c14:5388)
[01:50:34] *** Quits: stockholm (~Andreas@p200300d2c72cb00024101de045c4546c.dip0.t-ipconnect.de) (Ping timeout: 260 seconds)
[01:51:00] <aphysically> I think I could be convinced by your interpretation of the PEP in 3 even if I don't like the implication
[01:51:14] <jinsun> yeah it would be more work for type checkers, not really sure if it would be that difficult, they are already doing lot of work in constructing the init signature
[01:52:41] <aphysically> Can you add to the issue something that mentions default_factory and how you can imagine interpreting the PEP in such a way that this could be allowed, but that type checkers then need to make this distinction too?
[01:52:56] <aphysically> it's not obvious and it's probably something people reading should understand before they agree to merge any PR
[01:53:05] <aphysically> https://bugs.python.org/issue45384
[01:54:46] <aphysically> I think my feeling on on it rests on how other people feel on 1) do they feel such a reading of the PEP can be sustained 2) are type checkers fine with this?, and I'm fine with typing people to decide on 1) too
[01:56:34] *** Quits: metah4ck3r (~meta@user/metah4ck3r) (Ping timeout: 252 seconds)
[01:57:39] <Macuser> dictionary took like 10 min to create but that beats 6 hours by a lot lol
[01:57:40] *** Quits: akaWolf (~akaWolf@akawolf.org) (Ping timeout: 252 seconds)
[01:58:06] *** Quits: cthulchu_ (~Cthulchu@193.194.107.250) (Read error: Connection reset by peer)
[01:58:08] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Read error: Connection reset by peer)
[01:58:35] *** Joins: cthulchu_ (~Cthulchu@193.194.107.250)
[01:58:40] *** Joins: metah4ck3r (~meta@user/metah4ck3r)
[01:58:56] *** Joins: jbe (~hellother@lysator/root/jbe)
[02:00:14] *** Quits: Macuser (~Macuser@2600:1003:b441:999c:b052:756:be94:2d19) (Quit: Textual IRC Client: www.textualapp.com)
[02:01:03] *** Quits: thurs806 (~thurs@ip68-225-209-147.ph.ph.cox.net) (Quit: The Lounge - https://thelounge.chat)
[02:01:12] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[02:02:50] *** Joins: thurs8060 (~thurs@ip68-225-209-147.ph.ph.cox.net)
[02:03:17] *** Quits: GreenResponse (~tomek@r-45-155-148-237.gpon.bialnet.pl) (Quit: Leaving)
[02:03:43] *** Quits: jbe (~hellother@lysator/root/jbe) (Ping timeout: 252 seconds)
[02:04:57] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Quit: Life beckons)
[02:05:00] <aphysically> my preference is for 2) still I think
[02:05:25] <jinsun> aphysically: hmm well will have to think about better exmples than I came up with (and then make a bpo account :D), I might end up deciding your interpretation is fine and just treat Final = ClasssVar
[02:05:57] <aphysically> 3) complicated the dataclasses.py too a bit
[02:06:00] <aphysically> complicates*
[02:07:20] *** Joins: ivan_ (~Ivyy@2001:a61:13f1:cb01:5732:53b4:430:eff1)
[02:08:01] *** Quits: Akuli (~Akuli@82-203-164-70.bb.dnainternet.fi) (Quit: Leaving)
[02:11:47] *** Quits: ivan_ (~Ivyy@2001:a61:13f1:cb01:5732:53b4:430:eff1) (Client Quit)
[02:12:57] *** Quits: fedenix (~fedenix@gateway/tor-sasl/fedenix) (Remote host closed the connection)
[02:15:38] *** Quits: TheHermann (~TheHerman@gateway/tor-sasl/thehermann) (Quit: Leaving)
[02:16:21] *** Joins: akaWolf (~akaWolf@akawolf.org)
[02:16:50] *** Joins: blackout69 (~blackout6@net-37-179-183-91.cust.vodafonedsl.it)
[02:18:28] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Remote host closed the connection)
[02:18:34] *** Joins: hqdruxn08_ (~hqdruxn08@cpe-66-68-166-214.austin.res.rr.com)
[02:18:49] *** Joins: ph88 (~ph88@dslb-178-001-158-182.178.001.pools.vodafone-ip.de)
[02:22:07] *** Quits: shibboleth (~shibbolet@user/shibboleth) (Quit: shibboleth)
[02:22:10] *** Joins: pycurious (~Adium@user/pycurious)
[02:22:14] *** Quits: Seirdy (~Seirdy@sourcehut/user/seirdy) (Quit: exiting 3.2)
[02:22:28] *** Quits: hqdruxn08__ (~hqdruxn08@cpe-66-68-166-214.austin.res.rr.com) (Ping timeout: 252 seconds)
[02:22:57] <pycurious> I've a large project in which the logger() object is passed around or created depending on the programmer. Does it make sense to make the logger object singleton over the whole project, so that its not instantiated randomly over the course of the project? (its a single process project)
[02:23:34] *** Quits: rakoon (~rakoon@2001:985:f4c6:1:c44:f4e0:3261:4955) (Ping timeout: 252 seconds)
[02:23:36] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[02:23:39] <pycurious> Or perhaps there is a better way to handle logger objects in large projects?
[02:24:16] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Ping timeout: 245 seconds)
[02:24:31] *** Quits: LucaTM (~LucaTM@user/lucatm) (Quit: Textual IRC Client: www.textualapp.com)
[02:24:46] *** Quits: blackout69 (~blackout6@net-37-179-183-91.cust.vodafonedsl.it) (Quit: Leaving.)
[02:24:51] *** Joins: Seirdy (~Seirdy@sourcehut/user/seirdy)
[02:26:22] *** Quits: darksun (~darksun@user/darksun) (Remote host closed the connection)
[02:27:11] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 245 seconds)
[02:27:25] *** Quits: Lando-SpacePimp (~Lando-Spa@user/lando-spacepimp) (Ping timeout: 252 seconds)
[02:28:52] *** Quits: Ivii (~Ivyy@2001:a61:13f1:cb01:5732:53b4:430:eff1) (Remote host closed the connection)
[02:28:54] <The-Compiler> pycurious: one thing people do often is having a logger for every file, via logger = logging.getLogger(__name__)
[02:29:43] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[02:29:50] <pycurious> The-Compiler: In my case I've to setup those loggers quite intricately because they have to ship output to tcp/ip + formatting etc.
[02:30:24] <The-Compiler> pycurious: that's mostly separate from the actual loggers
[02:30:50] *** Quits: {HD} (~{HD}@86.106.121.213) (Ping timeout: 260 seconds)
[02:30:51] *** Quits: palasso (~palasso@user/palasso) (Read error: Connection reset by peer)
[02:30:55] *** Joins: djhankb (~djhankb@208.113.164.68)
[02:31:28] <pycurious> The-Compiler: so you do logging.setup somewhere else and then do logging.getLogger() in every file?
[02:33:13] <The-Compiler> pycurious: yep - well, I don't (I have several loggers based on categories), but many projects do
[02:34:23] *** Joins: nyah (~nyah@bcdcb6e3.skybroadband.com)
[02:34:29] <pycurious> I was thinking of making my log() object singleton - that way it doesnt get instantiated everytime someone wants to use it.
[02:34:42] *** Joins: mefistofeles (~mefistofe@user/mefistofeles)
[02:34:46] *** Joins: {HD} (~{HD}@86.106.121.213)
[02:35:49] <The-Compiler> pycurious: logging.getLogger gets you singletons anyways
[02:36:10] *** Quits: thiras (~thiras@user/thiras) (Ping timeout: 252 seconds)
[02:36:25] <pycurious> I see , thanks!
[02:38:23] <KirkMcDonald> The important thing in the logging module is that the loggers are separate from handlers.
[02:38:43] *** Quits: vimart (~vimart@85.255.233.1) (Quit: WeeChat 2.8)
[02:38:49] <KirkMcDonald> So the thing that streams the output to a socket would be a handler.
[02:39:07] <KirkMcDonald> And you might have any number of loggers which send messages to that handler.
[02:39:35] *** Joins: Fieldy (~no@user/fieldy)
[02:44:16] *** Quits: ttree (~ttree0@c-73-239-62-159.hsd1.wa.comcast.net) (Ping timeout: 245 seconds)
[02:44:19] *** Joins: phantomotap (~phantomot@c-68-35-28-201.hsd1.al.comcast.net)
[02:44:24] *** Quits: KombuchaKip (~kip@192.252.230.5) (Quit: Leaving.)
[02:45:58] * aphysically signed the CPython CLA
[02:46:26] <aphysically> time to work on a patch :) I'm pretty sure this change ends up being more invasive to the (comment) documentation than it is to the actual code
[02:46:58] *** Joins: KombuchaKip (~kip@192.252.230.5)
[02:47:45] <aphysically> jinsun: I reverted back to the always-submit-to-executor code; the if/else w/ extra annotation would work, but I think it looks a bit too much messier than the submit code for my taste
[02:48:42] *** Joins: ComputerTech (~ComputerT@user/computertech)
[02:49:56] <jinsun_> yeah that looked more messy to me too
[02:50:07] *** Quits: nomic (~nomic@185.192.69.208) (Quit: Leaving)
[02:50:31] *** Quits: ph88 (~ph88@dslb-178-001-158-182.178.001.pools.vodafone-ip.de) (Ping timeout: 252 seconds)
[02:52:01] *** Quits: Wulf (~Wulf@user/wulf) (Ping timeout: 265 seconds)
[02:52:45] *** Quits: Seiryuu (~Seiryuu@ip174-103-176-143.adsl2.static.versatel.nl) (Quit: Leaving)
[02:53:11] <aphysically> it will be a satisfying improvement to go from still being occasionally mystified by mutable vs immutable to submitting my first (admittedly minor) bugfix to CPython over the course of a few months
[02:53:14] *** Joins: ph88 (~ph88@dslb-178-001-158-182.178.001.pools.vodafone-ip.de)
[02:53:17] *** Joins: Wulf (~Wulf@user/wulf)
[02:57:49] *** Quits: hudo (~hudo@62.68.20.210) (Ping timeout: 265 seconds)
[02:57:55] *** Quits: rany (~rany@user/rany) (Quit: ZNC 1.8.2+deb2+b1 - https://znc.in)
[03:00:16] *** Quits: redrum88 (~redrum88@user/redrum88) (Quit: Going offline, see ya! (www.adiirc.com))
[03:00:39] *** Quits: coc0nut (~coc0nut@user/coc0nut) (Quit: ZNC 1.8.2 - https://znc.in)
[03:00:39] *** Joins: rany (~rany@user/rany)
[03:02:03] *** Joins: coc0nut (~coc0nut@user/coc0nut)
[03:05:59] *** Quits: Auron (~Auron956@user/auron) (Remote host closed the connection)
[03:09:22] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.3)
[03:09:55] *** Joins: nomic (~nomic@185.192.69.208)
[03:10:09] *** Quits: mat001_ (~mat001@213.143.69.121) (Read error: Connection reset by peer)
[03:10:21] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[03:10:59] *** Joins: c4017w_ (~c4017@209.52.68.8)
[03:13:37] *** Quits: c4017w (~c4017@209.52.68.8) (Ping timeout: 252 seconds)
[03:13:47] *** Parts: _ev (~ev@user/ev/x-8999918) ()
[03:18:39] *** Quits: freeworld (~vit@chello085216193138.chello.sk) (Ping timeout: 245 seconds)
[03:21:18] *** Joins: caveman (~caveman@gateway/tor-sasl/caveman)
[03:22:24] *** Joins: Lando-SpacePimp (~Lando-Spa@user/lando-spacepimp)
[03:25:37] *** Joins: shark (~lemonade@user/sh4rk)
[03:26:12] *** shark is now known as sh4rk
[03:26:13] *** Quits: Compu-Celebi (~Compu-Cel@96-18-74-43.cpe.sparklight.net) (Quit: I am disconnecting from this network.)
[03:30:03] *** Quits: waxfire (~waxfire@65.119.2.240) (Quit: The Lounge - https://thelounge.chat)
[03:30:14] *** Joins: waxfire (~waxfire@65.119.2.240)
[03:33:11] *** Joins: Powerhouse6666 (~Powerhous@security.orcacomputers.com)
[03:33:55] *** sh4rk is now known as shark
[03:34:45] *** Quits: semeion (~semeion@user/semeion) (Quit: WeeChat 3.3)
[03:35:04] <SnoopJ> ...huh, SWIG_exception and SWIG_exception_fail are identical up to a semicolon (`SWIG_fail;;` vs. a single semicolon). Wonder what the deal is with that.
[03:35:22] <SnoopJ> Maybe they're different for other target languages
[03:35:23] *** Joins: Gustavo6046_ (~Gustavo60@user/gustavo6046)
[03:35:48] *** Quits: LuxuryMode (uid91005@id-91005.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[03:36:10] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Ping timeout: 252 seconds)
[03:38:07] *** Gustavo6046_ is now known as Gustavo6046
[03:39:28] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 252 seconds)
[03:41:30] *** Joins: fikran (~fikran@user/fikran)
[03:41:37] <Hawker> Hey can anyone help me with my python assignment? I've been working at it all day but there's one bug I can't figure out
[03:41:54] <nedbat> Hawker: link us to the code, and tell us what's wrong
[03:42:14] *** Joins: wladimir (~wladimir@user/doforlove33)
[03:42:58] <Hawker> Where do I upload my code?
[03:43:10] <Hawker> Like what's easy for you?
[03:43:45] <nedbat> Hawker:  https://bpa.st/+python
[03:44:23] *** Joins: Gustavo6046_ (~Gustavo60@user/gustavo6046)
[03:44:41] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Ping timeout: 245 seconds)
[03:44:47] <Hawker> Thanks one sec
[03:46:07] <Hawker> So I pasted it, it's a binary tree, and under the binary tree I'm writing a deleteNode() method
[03:46:29] <KirkMcDonald> Hawker: You need to share the URL with us.
[03:46:35] *** Quits: astroid99 (~cto-offic@134.148.95.68) (Quit: Leaving)
[03:46:50] <Hawker> ok lol
[03:47:01] <Hawker> I'm a genius
[03:47:02] <Hawker> https://bpa.st/ZHYA
[03:47:03] *** Gustavo6046_ is now known as Gustavo6046
[03:47:21] *** Quits: wladimir (~wladimir@user/doforlove33) (Quit: WeeChat 3.0)
[03:47:36] <Hawker> Ok, so in the deleteNode() method, even though I think everything triggers as intended, I can't actually get the node out of the tree.
[03:48:24] <Hawker> I tried using del, I tried removing the pointer in the parent to the deleted node, I tried setting the deleted node as a new node with value none
[03:48:29] <Hawker> I'm just at a loss at this point
[03:48:33] *** Joins: Jackal-o-lantern (~quassel@173.195.145.98)
[03:49:06] <Jackal-o-lantern> Does anyone know something like google colab that allows two users to work on a notebook at the same time?
[03:49:18] *** Quits: PantelicGR (~PantelicG@user/pantelicgr) (Quit: Leaving)
[03:49:34] *** Quits: ElPresidente (~ElPreside@2605:a601:55be:bb00:b4ee:8306:9589:1945) (Ping timeout: 260 seconds)
[03:50:24] <KirkMcDonald> Hawker: Does listOfDescendants include the node you're trying to remove?
[03:50:40] <Hawker> Nope, try a print.
[03:50:44] <Hawker> Not included
[03:50:57] *** Quits: brelod (~me@90.244.150.142) (Quit: leaving)
[03:51:01] <BtbN> Jackal-o-lantern, isn't that supported natively now?
[03:51:57] *** Quits: ph88 (~ph88@dslb-178-001-158-182.178.001.pools.vodafone-ip.de) (Ping timeout: 265 seconds)
[03:52:06] <BtbN> https://github.com/jupyterlab/jupyterlab/pull/10118 yeah, it's merged
[03:52:45] *** Quits: georgios (~georgios@user/georgios) (Quit: Konversation terminated!)
[03:52:56] <Jackal-o-lantern> BtbN: Is there something like that, which works for two geographically separated students, which is hosted?
[03:53:10] <BtbN> I'm pretty sure that's the point of that?
[03:53:24] <BtbN> Where else would it make sense, if not with users in separate locations
[03:54:18] <BtbN> https://jupyterlab.readthedocs.io/en/stable/user/rtc.html
[03:54:41] <Jackal-o-lantern> I mean, I don't have the access to modify the university config to portforward things to my computer, etc, etc so run it locally, so I'm looking for something that's already hosted. (like google colab)
[03:55:05] <BtbN> Google Colab is not good enough?
[03:55:23] <Jackal-o-lantern> If one of us edits the file after the other, the changes are not reflected.
[03:55:33] <Jackal-o-lantern> very tedious
[03:55:47] <BtbN> That's what you use this new jupyterlab feature for
[03:56:41] <Jackal-o-lantern> I think we are kind of at a disconnect between software and service, though they are related. I don't have a place at the moment to host my own notebook.
[03:57:52] <Hawker> So do you have anything KirkMcDonald?
[03:57:53] <BtbN> All the docs are just using mybinder. Does that not work?
[03:59:49] *** Quits: tm007 (uid287041@id-287041.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[04:00:59] *** Quits: shark (~lemonade@user/sh4rk) (Quit: ZNC 1.8.2 - https://znc.in)
[04:01:32] *** Quits: TranquilEcho (~grom@user/tranquilecho) (Quit: WeeChat 2.8)
[04:01:56] <Jackal-o-lantern> BtbN: yes, this does look promising. I've not used mybinder before, are you familiar with it? Does it kick you out after X hours?
[04:02:11] <BtbN> No idea, never used it
[04:02:18] *** Quits: Klinda (~superleag@user/klinda) (Quit: Konversation terminated!)
[04:02:29] <aphysically> jinsun_: part of me wants to say the PEP saying that ClassVar can't be used with Final was really just a mistake and maybe should be amended, but I'm not sure how nesting the typing stuff works (does it even?)
[04:02:57] <Jackal-o-lantern> Alright, well thank you for a point in the right direction, anyway!
[04:06:09] *** Quits: flokuehn (~flokuehn@i577BC619.versanet.de) (Ping timeout: 245 seconds)
[04:06:31] *** Joins: velix (~velix@user/velix)
[04:06:54] <Hawker> Lemme know if you need anything else or any more information Kirk! :)
[04:07:50] <velix> Can anyone recommend me a WSGI application example? I want to receive a GET request, split the parameters, run a function and return an image. That's how I'm doing it right now. I think WSGI might be more professional :D  https://bpa.st/MKVA
[04:08:19] *** Joins: flokuehn (~flokuehn@muedsl-82-207-236-226.citykom.de)
[04:09:14] *** Quits: niku (~nick@2603-8000-7f03-1ab6-82ee-73ff-fea2-5bcd.res6.spectrum.com) (Ping timeout: 268 seconds)
[04:10:08] *** Joins: astroid99 (~cto-offic@134.148.95.68)
[04:10:47] *** Joins: Gustavo6046_ (~Gustavo60@user/gustavo6046)
[04:11:55] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Ping timeout: 252 seconds)
[04:13:42] *** Gustavo6046_ is now known as Gustavo6046
[04:14:17] <nedbat> velix: how about a web framework?
[04:14:35] <velix> nedbat: You mean like Werkzeug, Flask or Sanic ?
[04:14:47] <nedbat> velix: yes, or Django or FastAPI
[04:15:22] <velix> nedbat: Yes. But, I want to keep it lightweight. It doesn't have much traffic... but I thought, why not make it a little bit more solid? :D
[04:15:43] <nedbat> velix: i'm not sure what lightweight means.  these frameworks are not pigs
[04:16:25] <velix> nedbat: I mean, it works pretty well right now. I just thought, I could make a WSGI application from it and run it with gunicorn
[04:16:49] <velix> nedbat: When a framework means, to install lots of new packages and refactor anything... it's a little bit over the top for me.
[04:17:04] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.3)
[04:17:08] <nedbat> velix: it will be less work to use one of these frameworks than to implement wsgi yourself
[04:17:35] <velix> Okay. I will have a look at FastAPI and Django examples.
[04:21:26] *** Quits: trace987 (~trace@ip5f5a6a70.dynamic.kabel-deutschland.de) (Ping timeout: 265 seconds)
[04:21:58] *** Quits: CrazyEddy (crazyed@2603:300a:1d10:c000:de4a:3eff:fe88:cc5f) (Ping timeout: 268 seconds)
[04:25:09] *** Quits: alzgh (~alzgh@user/alzgh) (Remote host closed the connection)
[04:26:30] *** Quits: winterflaw (~winterfla@gateway/tor-sasl/winterflaw) (Ping timeout: 276 seconds)
[04:26:42] *** Joins: leduyquang753 (~leduyquan@user/leduyquang753)
[04:29:34] *** Joins: CrazyEddy (crazyed@2603:300a:1d10:c000:de4a:3eff:fe88:cc5f)
[04:30:32] *** Quits: djhankb (~djhankb@208.113.164.68) (Remote host closed the connection)
[04:31:33] *** Quits: vlm (~vlm@user/vlm) (Quit: "")
[04:35:11] *** Joins: JoelJoel (~jjshoe@user/joel)
[04:35:39] *** Quits: Spawns_Carpeting (~Spawns_Ca@user/spawns-carpeting/x-6969421) (Quit: WeeChat 3.1)
[04:35:49] *** Joins: vlm (~vlm@user/vlm)
[04:36:25] *** Quits: Joel (~jjshoe@user/joel) (Ping timeout: 265 seconds)
[04:38:09] *** Quits: Vornicus (~Vornicus@2603-8000-5d07-7ef0-7928-af67-c415-4f1b.res6.spectrum.com) (Read error: Connection reset by peer)
[04:38:52] *** Quits: nyah (~nyah@bcdcb6e3.skybroadband.com) (Ping timeout: 252 seconds)
[04:38:55] *** Joins: chenqisu12 (~xirndc@183.217.201.186)
[04:41:25] *** Joins: rany_ (~rany@user/rany)
[04:42:29] *** Joins: Spawns_Carpeting (~Spawns_Ca@user/spawns-carpeting/x-6969421)
[04:42:54] *** Quits: rany (~rany@user/rany) (Read error: Connection reset by peer)
[04:43:24] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 276 seconds)
[04:44:06] *** Joins: lpv (~lpv@2a02:587:3720:3f00:b421:d77:6d37:20dc)
[04:44:16] *** Quits: brabrax (~brabrax@user/brabrax) (Ping timeout: 245 seconds)
[04:44:22] *** Quits: elkclone (~elkclone@user/elkclone) (Ping timeout: 252 seconds)
[04:44:43] *** Joins: brabrax (~brabrax@user/brabrax)
[04:45:28] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.2)
[04:45:54] *** Quits: oriba (~oriba@x4dbf5c15.dyn.telefonica.de) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[04:46:03] *** Joins: comet23 (~comet23@user/comet23)
[04:46:09] *** Parts: lpv (~lpv@2a02:587:3720:3f00:b421:d77:6d37:20dc) (Leaving)
[04:46:49] <comet23> is this good code for a deck of cards?
[04:46:50] <comet23> https://bpa.st/IE4A
[04:47:28] *** Joins: elkclone (~elkclone@user/elkclone)
[04:48:39] *** Quits: akk (~akk@75.161.146.115) (Quit: +++)
[04:48:58] *** Joins: akk (~akk@75.161.146.115)
[04:51:13] *** Joins: ttree (~ttree0@c-73-239-62-159.hsd1.wa.comcast.net)
[04:51:24] *** Quits: mefistofeles (~mefistofe@user/mefistofeles) (Ping timeout: 265 seconds)
[04:52:08] <yitz> comet23: I would move suits and ranks to a module const. I'd swap the f-string for str(). Iterate over suits, not range(len(suits)). What's L19 doing?
[04:52:26] *** Joins: ph88 (~ph88@2a02:8109:9e00:7e5c::3d56)
[04:52:41] <yitz> Does Card() need both the suit name and suit symbol?
[04:52:51] <yitz> Use list comprehensions
[04:53:05] <yitz> And don't shuffle multiple times.
[04:54:02] *** Joins: hendursaga (~weechat@user/hendursaga)
[04:54:46] *** Quits: dld (~davidlowr@73.61.8.155) (Ping timeout: 252 seconds)
[04:54:55] *** Joins: ElPresidente (~ElPreside@136.55.250.31)
[04:55:06] *** Quits: bomb-on (~bomb-on@194.144.47.113) (Quit: aллилѹіа!)
[04:55:50] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[04:55:54] *** Quits: comet23 (~comet23@user/comet23) (Ping timeout: 256 seconds)
[04:56:43] *** Joins: dld (~davidlowr@2601:197:600:1210:2184:de22:ee5e:5a79)
[04:56:47] <nedbat> yitz: they seem to have left, and we haven't mentioned that these are class attributes, not instance.
[04:56:58] *** Quits: ElPresidente (~ElPreside@136.55.250.31) (Client Quit)
[04:57:26] *** Joins: ElPresidente (~ElPreside@2605:a601:55be:bb00:b4ee:8306:9589:1945)
[04:58:04] <yitz> I should have checked that first..
[04:58:39] *** Joins: adiKt (uid472628@id-472628.tinside.irccloud.com)
[04:59:00] *** Quits: akk (~akk@75.161.146.115) (Quit: +++)
[04:59:27] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[05:05:39] *** Quits: zaquest (~notzaques@5.128.210.178) (Remote host closed the connection)
[05:05:45] *** Quits: stewie925 (~stewie925@2600:1702:44f0:35c0:b814:bd17:1c14:5388) (Quit: Client closed)
[05:06:47] *** Joins: zaquest (~notzaques@5.128.210.178)
[05:07:33] *** Quits: FluffyMask (~masque@user/fluffymask) (Quit: WeeChat 3.3)
[05:10:08] *** Quits: jazzy (~jaziz@172.58.36.233) (Changing host)
[05:10:08] *** Joins: jazzy (~jaziz@user/jaziz)
[05:10:43] *** Quits: cthulchu_ (~Cthulchu@193.194.107.250) (Ping timeout: 252 seconds)
[05:12:55] <energizer> yeah you only need to shuffle 7 times not 25
[05:14:01] *** Quits: jinsun (~quassel@user/jinsun) (Ping timeout: 252 seconds)
[05:15:40] <aphysically> lol
[05:16:43] *** Quits: jarthur (~jarthur@2603-8080-1540-002d-2945-239c-37f8-0688.res6.spectrum.com) (Read error: Connection reset by peer)
[05:17:46] *** Quits: jetchisel (jetchisel@user/jetchisel) (Ping timeout: 260 seconds)
[05:17:50] *** Joins: tg (~tg@rockylinux/infra/tg)
[05:17:53] *** Joins: trace987 (~trace@ip5f5a6a70.dynamic.kabel-deutschland.de)
[05:19:04] *** Quits: capn (~capn@user/capn) (Ping timeout: 245 seconds)
[05:19:57] *** Joins: jetchisel (jetchisel@user/jetchisel)
[05:20:43] *** Joins: jarthur_ (~jarthur@cpe-70-114-198-37.austin.res.rr.com)
[05:22:15] <velix> nedbat: I've set it up with wsgiref. WOrks nice with gunicorn, bjoern and others: https://bpa.st/UVYQ
[05:22:58] <energizer> cluelessperson:  https://blog.miguelgrinberg.com/post/flask-video-streaming-revisited but i'd consider going async instead
[05:23:01] *** Quits: elkclone (~elkclone@user/elkclone) (Ping timeout: 245 seconds)
[05:23:47] <velix> I only wasn't able to figure out, how to send _write() manually; I need to free memory after sendung.
[05:23:57] *** Quits: blindguard (~blindguar@2a02:908:1864:c200::2612) (Quit: Konversation terminated!)
[05:24:54] *** Quits: p-i-_ (~Ohmu@mx-ll-223.206.71-4.dynamic.3bb.co.th) (Read error: Connection reset by peer)
[05:25:32] *** Joins: p-i- (~Ohmu@mx-ll-223.206.71-4.dynamic.3bb.co.th)
[05:26:32] <cluelessperson> energizer, I suppose I could do async, but the fact remains, I'm not sure what it means to stream video data
[05:26:50] <cluelessperson> I expect to pass frames to an encoding process/function and just pass data to the client
[05:27:12] <energizer> cluelessperson: i imagine that's covered in the tutorial i linked
[05:27:37] *** Joins: Fiji (~Fiji@user/fiji)
[05:27:53] *** Quits: roxfan (roxfan@11.121-64-87.adsl-dyn.isp.belgacom.be) (Remote host closed the connection)
[05:28:02] *** Quits: rany_ (~rany@user/rany) (Ping timeout: 260 seconds)
[05:28:15] *** Quits: penguino (~mrpenguin@user/mrpenguin) (Ping timeout: 276 seconds)
[05:28:56] *** Joins: geli (~gelignite@55d486d7.access.ecotel.net)
[05:29:50] *** Joins: roxfan (roxfan@11.121-64-87.adsl-dyn.isp.belgacom.be)
[05:30:54] *** Joins: djhankb (~djhankb@208.113.164.68)
[05:31:30] *** Joins: elkclone (~elkclone@user/elkclone)
[05:31:46] *** Quits: magla (~gelignite@55d47841.access.ecotel.net) (Ping timeout: 260 seconds)
[05:32:10] *** Quits: akaWolf (~akaWolf@akawolf.org) (Ping timeout: 252 seconds)
[05:33:27] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 276 seconds)
[05:33:51] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Ping timeout: 245 seconds)
[05:34:44] *** Joins: jinsun (~quassel@user/jinsun)
[05:34:54] *** Quits: trace987 (~trace@ip5f5a6a70.dynamic.kabel-deutschland.de) (Ping timeout: 265 seconds)
[05:35:07] *** Joins: akaWolf (~akaWolf@akawolf.org)
[05:35:10] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[05:35:13] *** Joins: hendursaga (~weechat@user/hendursaga)
[05:35:49] <cluelessperson> energizer, I shal read.
[05:35:52] <cluelessperson> thanks. :)
[05:36:46] *** Quits: jetchisel (jetchisel@user/jetchisel) (Ping timeout: 245 seconds)
[05:37:32] <velix> AH, got it working. Wow. The wsgi stuff is really nice.
[05:42:02] *** Joins: TJ- (~root@2a01:7e00:e001:ee00:fa75:a4ff:fef3:42b4)
[05:42:35] *** Quits: berong91 (~noob4ever@d75-154-235-153.bchsia.telus.net) (Remote host closed the connection)
[05:46:42] *** Joins: berong91 (~noob4ever@d75-154-235-153.bchsia.telus.net)
[05:47:35] *** Quits: KombuchaKip (~kip@192.252.230.5) (Quit: Leaving.)
[05:48:40] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 252 seconds)
[05:50:05] *** Quits: Naan (~naan@user/naan) (Quit: Leaving)
[05:50:51] *** Joins: fikran (~fikran@user/fikran)
[05:51:12] *** Quits: bilb_ono (~alexmarsh@ip184-189-224-55.sb.sd.cox.net) (Quit: bilb_ono)
[05:51:35] *** Joins: lastshell (~aayala@user/lastshell)
[05:52:08] *** Quits: lastshell (~aayala@user/lastshell) (Client Quit)
[05:53:07] *** Quits: markb1 (~markb1@2600:1700:eb40:7ecf:def0:6996:2bb9:77) (Ping timeout: 252 seconds)
[05:56:35] *** Joins: lastshell (~lastshell@user/lastshell)
[05:57:57] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Read error: Connection reset by peer)
[05:58:30] *** Quits: Kharon (uid511277@user/cypris) (Quit: Connection closed for inactivity)
[06:02:56] *** Quits: SuperLag (~akulbe@user/superlag) (Ping timeout: 265 seconds)
[06:03:36] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[06:03:46] *** Joins: SuperLag (~akulbe@user/superlag)
[06:04:06] *** Joins: herjazz (~herjazz@p6758124-ipngn30801marunouchi.tokyo.ocn.ne.jp)
[06:04:06] *** Parts: velix (~velix@user/velix) (Leaving)
[06:05:23] <aphysically> jinsun_: idk I think we're really gonna have to hope someone from typing or that worked on the Final attribute PEP chimes in to get anything definitive, because whatever we do we're probably going to break someone's code
[06:08:31] *** Quits: SuperLag (~akulbe@user/superlag) (Ping timeout: 252 seconds)
[06:08:52] <rud0lf> sorry for prying your skills... is there a short pythonic way to check if fixed size string is all digits? like "735"
[06:08:59] *** Quits: Barones (~Barones@2804:7f3:8987:d597:a526:59d4:bc0c:1f14) (Remote host closed the connection)
[06:09:09] *** Joins: SuperLag (~akulbe@user/superlag)
[06:09:28] <rud0lf> i was thinking about set("735") - set("0123456789")
[06:09:36] <rud0lf> should leave empty one
[06:09:54] <rud0lf> wait wrong, should it be "7", "3", "5" ?
[06:10:27] <rud0lf> ok sorry, just found "isdecimal()"
[06:11:46] *** Quits: s1b1 (~s1b1@user/s1b1) (Quit: ZNC 1.8.2+deb2+b1 - https://znc.in)
[06:13:07] <KirkMcDonald> .isdigit()
[06:13:24] <rud0lf> isn't isdigit for a single digit?
[06:13:28] *** Quits: SuperLag (~akulbe@user/superlag) (Ping timeout: 252 seconds)
[06:13:30] <SnoopJ> combine with all()
[06:13:37] <rud0lf> right, thanks
[06:14:20] <KirkMcDonald> No, it works for longer strings as well.
[06:14:20] <jinsun_> <aphysically> "jinsun: part of me wants to..." <- yeah that wording might not have been required if this was a thing https://github.com/python/typing/issues/213, but unfortunately it isn't
[06:14:31] *** Joins: s1b1 (~s1b1@user/s1b1)
[06:14:35] *** Joins: SuperLag (~akulbe@user/superlag)
[06:15:04] <aphysically> :\
[06:15:14] <KirkMcDonald> .isdecimal() and .isdigit() have slightly different meanings w.r.t. Unicode.
[06:15:30] *** Joins: c4017__ (~c4017@2604:3d08:747f:7c90:59fc:5be0:5552:264c)
[06:15:40] <KirkMcDonald> Likewise .isnumeric()
[06:15:56] *** Quits: lastshell (~lastshell@user/lastshell) (Remote host closed the connection)
[06:15:57] <aphysically> isn't there another one too?
[06:16:10] <aphysically> can't remember if there was 3 or 4 of these
[06:16:22] <KirkMcDonald> I mean there's a pile of 'is' methods for strings.
[06:17:17] *** Quits: freeman_h (~freeman_h@94.5.86.162) (Read error: Connection reset by peer)
[06:17:35] <jinsun_> is there anything that does only 0-9?
[06:18:13] *** Joins: mefistofeles (~mefistofe@user/mefistofeles)
[06:18:18] <aphysically> isdigit i believe
[06:18:29] <jinsun_> or it is just isdigit and isascii
[06:18:45] <aphysically> there's also some character classes defined in the string class I bleieve
[06:18:50] <KirkMcDonald> Yeah, `s.isascii() and s.isdigit()` would do.
[06:18:58] *** Quits: SuperLag (~akulbe@user/superlag) (Ping timeout: 252 seconds)
[06:18:59] *** Quits: c4017_ (~c4017@2604:3d08:747f:7c90:7441:2bf3:2c2c:6e49) (Ping timeout: 246 seconds)
[06:20:33] *** Joins: redrum88 (~redrum88@user/redrum88)
[06:22:00] <aphysically> there's isalnum too
[06:22:18] *** Quits: m33k_ (dexter@user/m33k) (Quit: WeeChat 2.3)
[06:22:51] <KirkMcDonald> Which definitely isn't the thing wanted here.
[06:23:22] <KirkMcDonald> But if you're in the ASCII range, .isdecimal(), .isdigit(), and .isnumeric() are all equivalent.
[06:23:33] <aphysically> I mean that you could combine with isdigit too
[06:24:28] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Ping timeout: 252 seconds)
[06:24:36] <SnoopJ> aphysically, the classes are inherited pretty much directly from Unicode, is the point I think he's making
[06:24:38] *** Joins: SuperLag (~akulbe@user/superlag)
[06:24:51] <aphysically> o
[06:25:27] <SnoopJ> i.e. isnumeric() is basically a test for if the codepoint is in the "Numeric" category
[06:25:59] <aphysically> someone told me isalnum wasn't that, but I'm testing it now and it definitely works for other unicode stuff
[06:26:07] <aphysically> heh
[06:26:32] *** Joins: FinnElija (~finn_elij@user/finn-elija/x-0085643)
[06:27:01] *** Joins: mat001 (~mat001@213.143.69.121)
[06:27:05] <SnoopJ> isalnum() does Py_UNICODE_ISALNUM() over the string
[06:27:27] *** Quits: geli (~gelignite@55d486d7.access.ecotel.net) (Quit: Stay safe!)
[06:30:00] *** Quits: SuperLag (~akulbe@user/superlag) (Ping timeout: 265 seconds)
[06:30:40] *** Quits: djhankb (~djhankb@208.113.164.68) (Read error: Connection reset by peer)
[06:30:41] *** Joins: SuperLag (~akulbe@user/superlag)
[06:31:30] *** Quits: mat001 (~mat001@213.143.69.121) (Ping timeout: 260 seconds)
[06:32:53] *** Quits: zebrag (~chris@user/zebrag) (Quit: Konversation terminated!)
[06:33:16] *** Quits: mefistofeles (~mefistofe@user/mefistofeles) (Ping timeout: 252 seconds)
[06:34:51] *** Joins: Jiogen (~Jiogen@131.203.183.244)
[06:35:14] *** Quits: SuperLag (~akulbe@user/superlag) (Ping timeout: 260 seconds)
[06:35:59] *** Joins: SuperLag (~akulbe@user/superlag)
[06:36:30] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 276 seconds)
[06:37:17] *** Joins: KombuchaKip (~kip@192.252.230.5)
[06:38:24] <jinsun> hmm, https://mypy-play.net/?mypy=latest&python=3.10&flags=strict&gist=57f126b15339acd6e23568bfb91d3aec
[06:39:22] <jinsun> so mypy doesn't catch that probably because unhashable tuples also have a `__hash__` method
[06:40:11] <jinsun> is there any way to annotate that the object is really Hashable and doesn't just have a `__hash__` method that throws
[06:40:50] *** Quits: SuperLag (~akulbe@user/superlag) (Ping timeout: 260 seconds)
[06:42:22] *** Joins: hendursaga (~weechat@user/hendursaga)
[06:43:46] *** Joins: jmiehe1 (~Thunderbi@user/jmiehe)
[06:44:57] *** Quits: tg (~tg@rockylinux/infra/tg) (Quit: tg)
[06:45:02] *** Quits: jmiehe (~Thunderbi@user/jmiehe) (Ping timeout: 260 seconds)
[06:45:02] *** jmiehe1 is now known as jmiehe
[06:45:55] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Ping timeout: 252 seconds)
[06:46:01] *** Quits: EGH (~EGH@185.25.195.104) (Ping timeout: 252 seconds)
[06:46:28] <Spawns_Carpeting> How can you import a file from the same directory today? I've tried simply importing, tried creating __init__.py, tried setting PYTHONPATH, so far no luck
[06:46:38] *** Joins: SuperLag (~akulbe@user/superlag)
[06:46:48] <Spawns_Carpeting> iirc you used to be able to *just* import files if they were in the same directory
[06:47:02] *** Joins: rany (~rany@user/rany)
[06:47:04] <Spawns_Carpeting> unless something on my python install is broke that appears to be impossible
[06:47:31] <Repiphany> What's your file called and how are you trying to import it
[06:47:32] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[06:48:07] *** Joins: sirquack (~sirquack@2601:643:8680:526:8182:437f:20fa:3bb)
[06:48:17] <jinsun> if it is bunch of modules in a folder and not a package, just cd to the folder where your code is and you be able to import any module there
[06:48:23] *** Quits: phantomotap (~phantomot@c-68-35-28-201.hsd1.al.comcast.net) (Quit: Leaving)
[06:48:33] <Spawns_Carpeting> I have a directory called "lispy", in that directory there is "ast" "lexer" and "vm"
[06:48:51] *** Quits: ttree (~ttree0@c-73-239-62-159.hsd1.wa.comcast.net) (Ping timeout: 265 seconds)
[06:49:00] <Spawns_Carpeting> running the ast file directly, with a from lexer import TokenKind at the top
[06:49:17] <Spawns_Carpeting> but I also tried creating __init__.py in the same directory as the files, and doing from lispy import lexer
[06:50:02] <Spawns_Carpeting> yeah jinsun that isn't working for some reason
[06:50:05] <Repiphany> Not lexer.py?
[06:50:30] <Spawns_Carpeting> I can change them to have .py endings, I didn't think that mattered but i guess it may
[06:51:32] <jinsun> no it matters, it doesn't matter if you have a #! but that is for running it directly not importing
[06:51:50] *** Joins: mefistofeles (~mefistofe@user/mefistofeles)
[06:52:08] <Spawns_Carpeting> well hell, adding py suffixes fixed it
[06:52:15] <Spawns_Carpeting> now I feel dumb
[06:52:46] <Spawns_Carpeting> thanks guys
[06:56:08] *** Quits: crabbedhaloablut (~crabbedha@user/crabbedhaloablut) (Remote host closed the connection)
[06:56:16] *** Joins: SallyAhaj_ (SallyAhaj@user/sallyahaj)
[06:56:21] *** Joins: crabbedhaloablut (~crabbedha@user/crabbedhaloablut)
[06:56:53] *** Quits: herjazz (~herjazz@p6758124-ipngn30801marunouchi.tokyo.ocn.ne.jp) (Quit: leaving)
[06:58:39] *** Quits: SallyAhaj (~SallyAhaj@user/sallyahaj) (Ping timeout: 245 seconds)
[06:59:53] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Read error: Connection reset by peer)
[07:08:05] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[07:08:24] *** Quits: adiKt (uid472628@id-472628.tinside.irccloud.com) (Quit: Connection closed for inactivity)
[07:09:42] *** Joins: ttree (~ttree0@c-73-239-62-159.hsd1.wa.comcast.net)
[07:09:42] *** Quits: Hawker (~Hawker@drmons0544w-47-55-147-54.dhcp-dynamic.fibreop.ns.bellaliant.net) (Quit: Leaving)
[07:12:27] *** Joins: p-i-_ (~Ohmu@223.206.71.4)
[07:13:32] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Read error: Connection reset by peer)
[07:15:50] *** Quits: p-i- (~Ohmu@mx-ll-223.206.71-4.dynamic.3bb.co.th) (Ping timeout: 260 seconds)
[07:16:43] *** Quits: ElPresidente (~ElPreside@2605:a601:55be:bb00:b4ee:8306:9589:1945) (Ping timeout: 252 seconds)
[07:26:41] *** Joins: acresearch (~acresearc@user/acresearch)
[07:28:29] *** Quits: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br) (Quit: leaving)
[07:28:43] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[07:29:00] *** Joins: gggpkm (~gggpkm@60.10.23.162)
[07:30:56] *** Joins: djhankb (~djhankb@208.113.164.68)
[07:31:24] *** Joins: trace987 (~trace@ip5f5a6a70.dynamic.kabel-deutschland.de)
[07:31:45] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 276 seconds)
[07:33:43] *** Joins: Lewky (~Lewky@146.70.50.90)
[07:34:00] *** Joins: hendursaga (~weechat@user/hendursaga)
[07:36:01] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.3)
[07:36:31] *** Joins: supakeen (~user@python/site-packages/supakeen)
[07:36:33] *** Joins: ElPresidente (~ElPreside@2605:a601:55be:bb00:9465:e946:3809:23b6)
[07:37:37] *** Quits: rexbinary (~rexbinary@user/rexbinary) (Ping timeout: 252 seconds)
[07:39:11] *** Joins: ElPresidenteP (~ElPreside@2605:a601:55be:bb00:b4ee:8306:9589:1945)
[07:39:46] *** Quits: trace987 (~trace@ip5f5a6a70.dynamic.kabel-deutschland.de) (Ping timeout: 252 seconds)
[07:40:40] *** Quits: Fiji (~Fiji@user/fiji) (Quit: Leaving)
[07:43:09] *** Joins: MrBungle (~MrBungle@2604:3d08:1788:dc00:ec31:9a97:5aaf:272f)
[07:43:20] *** Joins: rexbinary (~rexbinary@user/rexbinary)
[07:43:24] *** MrC is now known as MrSpooky
[07:46:42] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 276 seconds)
[07:48:57] *** Joins: hendursaga (~weechat@user/hendursaga)
[07:49:01] *** Joins: jazzy2 (~jaziz@user/jaziz)
[07:50:52] *** Joins: Joel (~jjshoe@user/joel)
[07:51:41] *** Quits: jazzy (~jaziz@user/jaziz) (Ping timeout: 265 seconds)
[07:51:52] *** Quits: JoelJoel (~jjshoe@user/joel) (Ping timeout: 252 seconds)
[07:52:48] *** Joins: SallyAhaj__ (~SallyAhaj@user/sallyahaj)
[07:52:49] *** SallyAhaj__ is now known as SallyAhaj
[07:53:00] *** Quits: SallyAhaj_ (SallyAhaj@user/sallyahaj) (Remote host closed the connection)
[07:54:16] *** Joins: jetchisel (jetchisel@user/jetchisel)
[07:56:01] <aphysically> jinsun: does it look like an intersection type will ever happen?
[07:56:23] *** Joins: tWqaq (~tWqaq@240e:389:5da6:cc00:5d07:c1e5:6a10:d9c9)
[07:58:27] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 265 seconds)
[07:59:14] <jinsun> well it has been 5 years (or 7years really if you count from the original issue), so I don't have my hopes up
[07:59:48] *** Quits: vvdaiwrw (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Quit: vvdaiwrw)
[08:00:10] *** Joins: fikran (~fikran@user/fikran)
[08:00:16] *** Quits: olasd (~olasd@softwareheritage/olasd) (Ping timeout: 252 seconds)
[08:00:56] <acresearch> jinsun: what has been 7 years?
[08:01:30] *** Joins: rindolf (~shlomif@2a0d:6fc2:4bb1:500:6b1e:2524:3d70:36ec)
[08:01:42] <jinsun> since this was raised https://github.com/python/typing/issues/18
[08:05:03] *** Quits: hnOsmium0001 (uid453710@id-453710.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[08:06:11] <jinsun> aphysically: looks like pyright maintainer doesn' think it will happen https://github.com/python/mypy/issues/11229#issuecomment-930784789
[08:06:19] *** Quits: jeho (~jehoshaph@user/jehoshaphat) (Quit: Leaving)
[08:08:08] <aphysically> I wanted to ask because if it happened sometime in the future I could imagine fixing this for dataclasses could be seen as a mistake
[08:08:35] *** Quits: dodo (~dodo@user/dodo) (Quit: dodo)
[08:08:43] <jinsun> though the author of that issue seems to think it is possible, pointing at Scala
[08:09:59] *** Joins: dodo (~dodo@user/dodo)
[08:10:06] <jinsun> also it is kinda already possible with Protocols, you can subclass 2 protocols and get a new protocol that is intersection of both
[08:10:22] <jinsun> problem is that most of the types are not Protocols
[08:10:55] <aphysically> was that you that commented?
[08:11:15] <aphysically> if not you got off the hook for making an account :D
[08:11:19] *** Quits: jazzy2 (~jaziz@user/jaziz) (Read error: Connection reset by peer)
[08:11:21] *** Joins: jazzy3 (~jaziz@user/jaziz)
[08:11:53] <jinsun> where?
[08:12:17] <aphysically> on pbo
[08:12:23] *** Joins: tsujp (~tsujp@sourcehut/user/tsujp)
[08:12:49] *** Joins: forgotmynick (uid24625@id-24625.hampstead.irccloud.com)
[08:13:14] <jinsun> oh no i didn't get off the hook, that was me :D
[08:13:21] <aphysically> ah I see
[08:13:35] <aphysically> I think I might respond to the thread on the typing mailing list again asking directly for feedback from anyone invested in typing or Final, because I don't know how we can comfortably make a decision on whether or not we should allow default_factory Finals unless they clarify what they want
[08:14:09] <aphysically> or maybe if the PEP authors could chime in what they see is a reasonable reading of their Final PEP
[08:14:28] <aphysically> frankly I find both readings reasonable which is why I want to hear from them
[08:14:51] <jinsun> mostly type checkers job will not change I think
[08:15:18] <jinsun> the point of annotating ClassVar is to prevent assigning to instance attribute
[08:15:30] <jinsun> which already happens if you annotate Final
[08:15:45] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[08:16:30] <aphysically> by the way do you know if there are people using Final as if it's an instance variable with dataclasses
[08:17:02] <aphysically> I find it hard to imagine there won't be, but I think we'd only break usages that were mistakes anyway
[08:17:21] <aphysically> (as in: literally usages that were buggy reassignments of final)
[08:17:41] <jinsun> well the one that has a default_factory definitely assumes it is instance variable
[08:18:00] <jinsun> because each instance will have a new cuid
[08:18:08] <aphysically> well for default_factory that could actually make sense
[08:18:25] <aphysically> I mean for people using it as an instance variable where it *doesn't* make sense (i.e. misannotating it as final)
[08:19:09] *** Quits: reset (~reset@user/reset) (Quit: reset)
[08:19:11] <aphysically> it will throw type-checking errors but not runtime errors, so it's strictly possible somebody wrote code like this (probably minor?)
[08:19:25] *** Quits: Mikaela (~sid12355@Feneas/Mikaela) (Remote host closed the connection)
[08:19:27] *** jarthur_ is now known as jarthur
[08:20:32] <jinsun> oh probably not
[08:22:55] *** Joins: Mikaela (~sid12355@Feneas/Mikaela)
[08:23:09] <aphysically> this is a lot of work for something that just mildly irked me when I couldn't type it Final :P
[08:23:42] <jinsun> aphysically: https://mypy-play.net/?mypy=latest&python=3.10&gist=b1edf21d3a82d034b860d6dcc2fb5bbf
[08:23:58] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Ping timeout: 260 seconds)
[08:24:38] <jinsun> so the thing that will have to change is that it will have to complain on line 14 instead of 15, and extra complaint on line 8
[08:24:43] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[08:25:25] <jinsun> and extra complaint on line 11 too maybe if default_factory throws
[08:26:14] <jinsun> line 17 to line 21 and line 7 will behave exaclty like now
[08:26:33] *** Quits: decimuscorvinus_ (~jimmy@136.37.105.112) (Read error: Connection reset by peer)
[08:26:51] *** Quits: p-i-_ (~Ohmu@223.206.71.4) (Remote host closed the connection)
[08:27:26] *** Joins: p-i- (~Ohmu@mx-ll-223.206.71-4.dynamic.3bb.co.th)
[08:28:04] *** Quits: acresearch (~acresearc@user/acresearch) (Quit: WeeChat 2.8)
[08:28:33] <aphysically> you see e as a real field and not a pseudo-field right?
[08:28:45] <aphysically> i.e. it gets returned by dataclasses.fields()?
[08:29:05] <aphysically> if it's a real field the logic in dataclasses.py needs refactored
[08:29:31] <aphysically> maybe, I need to reread
[08:29:34] *** Joins: decimuscorvinus (~jimmy@136.37.105.112)
[08:30:18] <aphysically> there's this distinction between pseudo-fields and fields in the class and I don't recall off the top of my head how the distinction comes about when returning fields() and how much this matters re: default_factory final fields
[08:32:36] *** Quits: c4017__ (~c4017@2604:3d08:747f:7c90:59fc:5be0:5552:264c) (Ping timeout: 245 seconds)
[08:32:51] *** Quits: xrogaan (~xrogaan@user/xrogaan) (Quit: Leaving)
[08:34:38] *** Quits: Harlin (~DonQixote@c-24-128-8-53.hsd1.co.comcast.net) (Remote host closed the connection)
[08:35:49] *** Quits: redrum88 (~redrum88@user/redrum88) (Quit: Going offline, see ya! (www.adiirc.com))
[08:36:25] *** Quits: Midjak (~Midjak@82-65-111-221.subs.proxad.net) (Ping timeout: 252 seconds)
[08:37:48] *** Joins: Harlin (~DonQixote@c-24-128-8-53.hsd1.co.comcast.net)
[08:37:50] <jinsun> aphysically: yes it would make more sense if it was "real" field, but why will it be easier if it was "pseudo" but still default_factory was allowed?
[08:38:01] *** Joins: c4017 (~c4017@2604:3d08:747f:7c90:242f:9527:3c56:c500)
[08:41:28] <jinsun> aphysically: looking at the code, I'm guessing you will have to change this part and add more if condtiions for Final https://github.com/python/cpython/blob/3d1ca867ed0e3ae343166806f8ddd9739e568ab4/Lib/dataclasses.py#L763
[08:42:14] <jinsun> aphysically: and you can just exclude the cases where default_facotory is not missing from the check
[08:43:15] *** jazzy3 is now known as jazzy
[08:44:46] *** Quits: zepolen (~zepolen@2a02:587:860a:4682:c769:be15:c3da:c84d) (Remote host closed the connection)
[08:44:52] *** Joins: pr100 (~pr100@cpc92728-cmbg20-2-0-cust160.5-4.cable.virginm.net)
[08:45:12] *** Joins: zepolen (~zepolen@2a02:587:860a:4682:766b:ec4f:5c57:b188)
[08:45:46] <energizer> cluelessperson: whenever you have a function that does i/o, define it with async def f(). whenever you call it use `await f()` or nursery.start_soon(f)
[08:45:49] *** Quits: mefistofeles (~mefistofe@user/mefistofeles) (Ping timeout: 265 seconds)
[08:47:20] <pr100> ... but don't put stuff that does blocking i/o in f()
[08:49:44] *** Joins: curiosity (uid507362@user/cypris)
[08:50:36] *** Quits: MrBungle (~MrBungle@2604:3d08:1788:dc00:ec31:9a97:5aaf:272f) (Read error: Connection reset by peer)
[08:51:18] *** Quits: wlsn (~wlsn@79-75-247-141.dynamic.dsl.as9105.com) (Quit: WeeChat 2.3)
[08:51:21] *** Joins: talismanick (~talismani@76.78.246.71)
[08:53:14] *** Joins: Forty-Bot (~kvirc@pool-108-45-127-224.washdc.fios.verizon.net)
[08:54:31] *** Quits: sirquack (~sirquack@2601:643:8680:526:8182:437f:20fa:3bb) (Quit: Leaving)
[08:55:29] *** Quits: Spawns_Carpeting (~Spawns_Ca@user/spawns-carpeting/x-6969421) (Ping timeout: 265 seconds)
[08:55:37] *** Joins: node1 (~node1@user/node1)
[08:56:29] <talismanick> Let's say I download a tarball I found in a (Linux distro) package manager template and unzipped it
[08:56:54] <talismanick> in hopes of installing the Python inside in ~ (because I prefer to manage all my Python in one place)
[08:57:13] <talismanick> How would I make a package out of it which I could install via pipx?
[08:57:37] <talismanick> (I can't find virt-manager's virt-install on PyPI, despite being pure Python)
[08:58:28] <cluelessperson> energizer, I'm mentally trying to understand the design paradigm here.   My guessing is that in async you can run multiple things, almost like threading, asynchronously, at the same time.   So in the main event loop I can create an object that manages blocking io from the camera, processing it, having images prepared,  then another  that handles web requests and streaming.
[09:00:45] <talismanick> Well, not pure Python - it depends on cdrtools and libosinfo, which I just installed - but it pulls in several more system-level Python dependencies, which I'd rather not
[09:02:01] *** Quits: Hanii (~textual@2a00:23c5:c587:6d00:707a:a74a:1ce1:5762) (Quit: Textual IRC Client: www.textualapp.com)
[09:02:33] <energizer> cluelessperson: yes. perhaps there will be `async with open_nursery() as nur: async with camera() as cam: async for frame in cam.frames(): for receiver in recevers: nur.start_soon(publish, frame, receiver)`
[09:02:37] <energizer> or something, idk
[09:02:51] <energizer> i havent done video, dont know what it's like
[09:04:09] <jinsun> talismanick: just look at how your distro builds the package, for example this is the build script for the arch linux package https://github.com/archlinux/svntogit-community/blob/packages/virt-manager/trunk/PKGBUILD
[09:04:12] <cluelessperson> energizer, I feel like this ping pong ball, or one of those pots that rings so excellently.: https://youtu.be/OxIIqpW9keM
[09:04:41] <pr100> cluelessperson: think of it like this: event loop manages a set of tasks, each represents a computation. At any one time only one of them is currently executing. If a task needs the result of another,  it uses `await foo()`. This tells the event loop to make a task for foo, and suspend the caller until the result of foo is available.
[09:05:10] <energizer> man those guys are good at ping pong
[09:06:32] <cluelessperson> pr100, yes, await as I understand, is a sign to move to another ... stack? of instructions
[09:06:36] <talismanick> jinsun: Void templates are almost the same as PKGBUILDs, except for that you're expected to rely more on package manager scripts to handle building busywork commonalities
[09:06:55] <talismanick> That being said, copying it verbatim, but for ~, was a last resort in my mind
[09:07:12] <talismanick> not just because it's extra work, but because I imagine it's liable to be brittle
[09:07:36] *** Quits: LiftLeft (~LiftLeft@191.96.185.36) (Ping timeout: 245 seconds)
[09:07:38] <pr100> cluelessperson: well - to continue the execution of another task if there's one that can proceed at the moment
[09:07:54] *** Quits: chenqisu12 (~xirndc@183.217.201.186) (Quit: Leaving)
[09:11:02] <pr100> ... it's a good model for lots of stuff involve i/o, that's not computationally expensive, but involves a lot of waiting around for stuff to happen over the network. It's no so good for computationally expensive stuff because you don't want to block the event loop with a long running task - for that sort of thing you typically punt the computation
[09:11:03] <pr100> off to another thread or process
[09:11:27] <energizer> you can juggle a lot of balls with one hand
[09:11:55] *** Quits: rindolf (~shlomif@2a0d:6fc2:4bb1:500:6b1e:2524:3d70:36ec) (Quit: Shlomi Fish ("Rindolf") has left the server. “Chuck Norris was challenged to fight the world, and accepted. He bet on himself, won, and collected the bet money.”)
[09:14:33] <energizer> tho usually balls cant juggle other balls, but trio tasks can juggle new tasks
[09:15:28] <energizer> Notes on Structured Juggling, or `throw` Statement Considered Harmful.
[09:20:01] *** Joins: kurfen (~kurfen@37.120.204.67)
[09:20:55] *** Quits: ElPresidenteP (~ElPreside@2605:a601:55be:bb00:b4ee:8306:9589:1945) (Quit: WeeChat 3.3)
[09:21:14] *** Joins: ElPresidenteP (~ElPreside@2605:a601:55be:bb00:b4ee:8306:9589:1945)
[09:21:19] <energizer> isnt video usually done with gstreamer or ffmpeg or something anyway, rather than python?
[09:22:54] * energizer doesnt konw
[09:23:14] *** Quits: dthpulse (~quassel@podciarou.sk) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[09:24:34] *** Joins: WarpedAI (~Warped@user/warped)
[09:25:34] *** Joins: manti7 (~manti7@176.10.104.94)
[09:25:36] *** Joins: dthpulse (~quassel@podciarou.sk)
[09:26:31] *** Quits: Jiogen (~Jiogen@131.203.183.244) (Remote host closed the connection)
[09:26:59] *** Quits: Warped (~Warped@user/warped) (Ping timeout: 245 seconds)
[09:27:37] *** Quits: pycurious (~Adium@user/pycurious) (Quit: Leaving.)
[09:28:14] *** Joins: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net)
[09:28:17] *** Joins: semeion (~semeion@user/semeion)
[09:30:59] *** Quits: djhankb (~djhankb@208.113.164.68) (Read error: Connection reset by peer)
[09:31:30] *** Joins: djhankb (~djhankb@208.113.164.68)
[09:31:37] *** Joins: davor_ (~davor@user/davor)
[09:32:21] *** Quits: davor (~davor@user/davor) (Ping timeout: 265 seconds)
[09:33:20] *** Joins: rakoon (~rakoon@2001:985:f4c6:1:415d:f0c:109d:2177)
[09:36:36] *** Quits: Hexmind (~Hexmind@modemcable049.25-131-66.mc.videotron.ca) (Quit: Been a long day.)
[09:40:49] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Ping timeout: 252 seconds)
[09:42:19] *** Quits: k_sze (~k_sze@mail2.kalunite.net) (Quit: ZNC 1.8.2 - https://znc.in)
[09:42:35] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[09:43:21] *** Joins: k_sze (~k_sze@mail2.kalunite.net)
[09:43:34] *** Quits: gggpkm (~gggpkm@60.10.23.162) (Ping timeout: 252 seconds)
[09:44:24] *** Quits: matrixbot_bartab (~matrixbot@155.210.31.93.rev.sfr.net) (Quit: Bridge terminating on SIGTERM)
[09:45:56] *** Quits: k_sze (~k_sze@mail2.kalunite.net) (Client Quit)
[09:46:32] *** Joins: matrixbot_bartab (~matrixbot@155.210.31.93.rev.sfr.net)
[09:46:35] *** Quits: seednode (~seednode@user/seednode) (Quit: Nihil supernum.)
[09:47:21] *** Joins: seednode (~seednode@user/seednode)
[09:49:42] *** Joins: k_sze (~k_sze@mail2.kalunite.net)
[09:49:46] *** Quits: nomic (~nomic@185.192.69.208) (Quit: Leaving)
[09:51:20] *** Joins: kristine86 (~kristine8@2603-7080-af03-588a-8a5c-43b9-edc5-c5b6.res6.spectrum.com)
[09:51:48] <kristine86> How do you do pytest for classes/methods that uses cli args?
[09:51:49] *** Quits: node1 (~node1@user/node1) (Ping timeout: 252 seconds)
[09:52:11] *** Quits: ElPresidente (~ElPreside@2605:a601:55be:bb00:9465:e946:3809:23b6) (Ping timeout: 245 seconds)
[09:53:58] *** Quits: kurfen (~kurfen@37.120.204.67) (Quit: WeeChat 2.3)
[09:54:42] <BrenBarn> well, hopefully you structure your code so some entry point extracts the CLI args and passes them to functions
[09:54:49] *** Joins: olasd (~olasd@softwareheritage/olasd)
[09:54:56] <BrenBarn> so you don't have a bunch of functions directly accessing the CLI stuff, they just accept what they need as regular function arguments
[09:56:16] *** Joins: cdown (~cdown@151.82.142.25)
[09:56:55] <kristine86> True. But is there any standard way to test such cases?
[09:57:34] *** Joins: LiftLeft (~LiftLeft@102.165.16.149)
[09:58:50] *** Quits: upekkha (~Advanced@2a01:4f8:1c0c:49df::1) (Quit: upekkha)
[09:59:02] *** Joins: upekkha (~Advanced@2a01:4f8:1c0c:49df::1)
[09:59:02] *** Quits: upekkha (~Advanced@2a01:4f8:1c0c:49df::1) (Client Quit)
[09:59:12] *** Joins: upekkha (~Advanced@2a01:4f8:1c0c:49df::1)
[09:59:48] *** Joins: Numero (~Nouser@99-157-54-155.lightspeed.tukrga.sbcglobal.net)
[10:00:12] *** Quits: upekkha (~Advanced@2a01:4f8:1c0c:49df::1) (Client Quit)
[10:00:17] <BrenBarn> if you write it the way I said then you test it like any other function because it accepts what it needs as arguments like any other function
[10:00:29] *** Quits: slowButPresent (~slowButPr@user/slowbutpresent) (Quit: leaving)
[10:00:33] <Numero> I'm about to get back into doing some Python development on Linux again. I used to use Kate as my editor but is there some new hotness for IDE I should be looking into?
[10:00:38] *** Quits: devcpu (~rusty@d50-92-229-34.bchsia.telus.net) (Quit: leaving)
[10:02:39] *** Joins: devcpu (~rusty@d50-92-229-34.bchsia.telus.net)
[10:03:05] <jinsun> vscode is really good
[10:03:57] *** Joins: upekkha (~Advanced@2a01:4f8:1c0c:49df::1)
[10:04:26] <vdamewood> vscode is the hot new thing. vim is the hot old thing.
[10:04:51] *** Joins: rememberYou (~someone@user/rememberyou)
[10:06:41] * aphysically just uses vim >.>
[10:06:42] <aphysically> <.<
[10:06:51] <domhnall> Numero: don't forget to setup an awesome wallpaper for motivation. ;-\
[10:07:37] *** Joins: Warped (~Warped@user/warped)
[10:07:38] <Numero> domhnall: lol
[10:07:46] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 252 seconds)
[10:09:30] *** Joins: fikran (~fikran@user/fikran)
[10:09:55] *** Quits: WarpedAI (~Warped@user/warped) (Ping timeout: 252 seconds)
[10:11:59] *** Joins: mpan (~mysql@user/mpan)
[10:12:02] *** Parts: mpan (~mysql@user/mpan) ()
[10:12:36] *** Joins: DaleNa9g (~DaleNa9g@071-093-142-189.res.spectrum.com)
[10:12:56] *** Joins: hammond_ (proscan@user/hammond2)
[10:13:26] *** Quits: tWqaq (~tWqaq@240e:389:5da6:cc00:5d07:c1e5:6a10:d9c9) (Ping timeout: 245 seconds)
[10:17:57] *** Quits: DaleNa9g (~DaleNa9g@071-093-142-189.res.spectrum.com) (Quit: cya)
[10:18:08] *** Quits: jazzy (~jaziz@user/jaziz) (Ping timeout: 265 seconds)
[10:20:34] *** Joins: ledtc (~ledtc@c-f8aa70d5.014-57-6c756e3.bbcust.telenor.se)
[10:22:27] *** Quits: Betal (~Betal@user/betal) (Quit: WeeChat 3.3)
[10:23:23] *** Joins: cvmn (~caveman@gateway/tor-sasl/caveman)
[10:25:16] *** Joins: Hanii (~textual@2a00:23c5:c587:6d00:2861:83e:d34a:845a)
[10:25:27] *** Quits: sticheln (~atsbomb@116.88.220.71) (Read error: Connection reset by peer)
[10:30:08] *** Quits: GreaseMonkey (greaser@user/greasemonkey) (Remote host closed the connection)
[10:30:31] *** Quits: djhankb (~djhankb@208.113.164.68) (Remote host closed the connection)
[10:30:35] *** Joins: cdown_ (~cdown@pa-18-170-98.service.infuturo.it)
[10:31:02] *** Joins: djhankb (~djhankb@208.113.164.68)
[10:33:36] *** Quits: cdown (~cdown@151.82.142.25) (Ping timeout: 265 seconds)
[10:33:45] *** Joins: palasso (~palasso@user/palasso)
[10:34:06] *** Joins: rendar (~rendar@user/rendar)
[10:35:13] *** Quits: cdown_ (~cdown@pa-18-170-98.service.infuturo.it) (Ping timeout: 252 seconds)
[10:36:24] *** Joins: trace987 (~trace@ip5f5a6a70.dynamic.kabel-deutschland.de)
[10:36:52] *** Quits: LiftLeft (~LiftLeft@102.165.16.149) (Ping timeout: 252 seconds)
[10:37:32] <Atque> Hey hammond_.
[10:44:08] *** Joins: jeho (~jehoshaph@user/jehoshaphat)
[10:44:43] *** Joins: FurCoatStarlette (FurCoatSta@159.196.89.115)
[10:44:48] <rendar> hammond_, also here/
[10:45:12] *** Quits: trace987 (~trace@ip5f5a6a70.dynamic.kabel-deutschland.de) (Ping timeout: 265 seconds)
[10:45:21] <Atque> Hiya rendar
[10:45:27] <rendar> hi
[10:48:22] *** Joins: tobybl (~tobybl@38.247.200.146.dyn.plus.net)
[10:52:33] *** Quits: Numero (~Nouser@99-157-54-155.lightspeed.tukrga.sbcglobal.net) (Quit: Leaving)
[10:52:38] *** Joins: comet23 (~comet23@user/comet23)
[10:53:10] <comet23> i have an error on line 41 it says object is not subscriptable... my code was working earlier
[10:53:15] <comet23> https://bpa.st/GN7Q
[10:53:25] *** Quits: Lando-SpacePimp (~Lando-Spa@user/lando-spacepimp) (Ping timeout: 265 seconds)
[10:55:08] *** Joins: Leonarbro_ (~Leonet@user/leonarbro)
[10:56:05] *** Joins: Leonarbro__ (~Leonet@user/leonarbro)
[10:56:23] <aphysically> did you mean to set __getitem__?
[10:56:56] <comet23> what's __getitem__?
[10:57:39] <aphysically> the way you implement subscriptable classes
[10:57:57] <aphysically> are you intending to access the deck list?
[10:58:06] <aphysically> that's deck.deck in your code, not deck
[10:58:17] <comet23> yeah i'm trying to grab 1 card from that deck just to see if everything is working correctly
[10:58:27] <KirkMcDonald> Also you probably want the deck to be an instance attribute, rather than a class attribute.
[10:58:29] *** Quits: curiosity (uid507362@user/cypris) (Quit: Connection closed for inactivity)
[10:58:29] <comet23> Deck.deck references the class variable
[10:59:04] <aphysically> yeah I was about to say what KirkMcDonald said
[10:59:06] *** Quits: Leonarbro (~Leonet@user/leonarbro) (Ping timeout: 268 seconds)
[10:59:07] <comet23> KirkMcDonald thank you for the suggestion i'm going to redo it but how would i do that just put it in the __init__?
[10:59:07] <jinsun> also no need to shuffle 10 times
[10:59:16] *** Quits: Leonarbro_ (~Leonet@user/leonarbro) (Ping timeout: 245 seconds)
[10:59:20] <KirkMcDonald> comet23: Yes, assign to `self.deck` in __init__
[10:59:37] <comet23> why not 10 times? should i shuffle a random amount?
[10:59:45] <aphysically> :D
[11:00:07] <KirkMcDonald> comet23: To shuffle once is as random as shuffling ten times.
[11:00:17] *** Joins: winterflaw (~winterfla@gateway/tor-sasl/winterflaw)
[11:00:19] <comet23> oh
[11:00:20] <jinsun> 1 time already does what you want
[11:00:27] <aphysically> the reason for shuffling multiple times in real life is due to inability of typical shuffling pattern to adequately mix the cards
[11:00:32] *** Joins: portalrat_ (~portalrat@user/portalrat)
[11:00:32] *** Quits: portalrat_ (~portalrat@user/portalrat) (Remote host closed the connection)
[11:00:38] *** Joins: duskrat (~portalrat@user/portalrat)
[11:00:40] <aphysically> this is not a problem random.shuffle has
[11:00:51] *** Joins: fedenix (~fedenix@gateway/tor-sasl/fedenix)
[11:00:55] <comet23> i love coming here i learn so many new things :D
[11:02:07] *** Quits: portalrat (~portalrat@user/portalrat) (Ping timeout: 265 seconds)
[11:02:08] <aphysically> jinsun: yeah I'm going to try to implement it allowing default_factory Final tomorrow; it's easy enough to fix if someone from typing comes along and says no that's unacceptable or something
[11:02:43] <aphysically> as far as I can tell dataclasses.py is black formatted
[11:02:46] <comet23> this is https://bpa.st/QX4Q
[11:02:51] <comet23> is this better*
[11:03:06] *** Quits: kristine86 (~kristine8@2603-7080-af03-588a-8a5c-43b9-edc5-c5b6.res6.spectrum.com) (Ping timeout: 256 seconds)
[11:03:09] <comet23> wait that is wrong
[11:03:11] <KirkMcDonald> comet23: Now you need to change all the bits that say `Deck.deck` to refer to self.deck
[11:03:41] <aphysically> they got a couple of them, but not all
[11:03:49] <comet23> KirkMcDonald yes... i did forget to do it in the shuffle method
[11:03:56] <KirkMcDonald> comet23: Also in __repr__
[11:04:30] <aphysically> and you're still trying to access deck[0] when you probably mean deck.deck[0]
[11:04:38] <aphysically> (or implement __getitem__)
[11:04:49] *** Quits: kickingvegas (~cchoi@c-24-5-40-20.hsd1.ca.comcast.net) (Quit: leaving)
[11:04:58] <comet23> i love how everyone here is able to read my code so fast... does this superpower come with experience or is there a technique that must be practiced?
[11:05:18] <KirkMcDonald> Experience.
[11:05:18] <aphysically> to be fair I read your code when you posted it before
[11:05:42] *** Joins: herjazz (~herjazz@p6758124-ipngn30801marunouchi.tokyo.ocn.ne.jp)
[11:06:24] *** Joins: kosh (~kosh@user/kosh)
[11:07:53] <jinsun> aphysically: https://twitter.com/llanga/status/1123980467911495680 configparser and dataclasses were going to be the first one to use it
[11:08:40] <comet23> __getitem__ should have self and the index as parameters and return self.deck[index]?
[11:09:23] *** Joins: p-i-_ (~Ohmu@mx-ll-223.206.71-4.dynamic.3bb.co.th)
[11:09:29] <aphysically> jinsun: I'll make sure to use match/case when I make my patch to break everyone trying to use black
[11:09:32] <aphysically> (not really)
[11:10:17] <aphysically> comet23: yeah
[11:10:30] <comet23> AttributeError: 'Deck' object has no attribute 'deck'
[11:10:47] <aphysically> typically you'd support slice objects too
[11:11:04] <comet23> https://bpa.st/AWCQ
[11:11:29] <comet23> aphysically i didn't know i would have to specify it in this magic method
[11:11:43] <comet23> i thought it would handle everything for me thank you for letting me know
[11:12:06] <aphysically> you don't have to use a magic method you can just access the attribute directly
[11:12:32] *** Quits: forgotmynick (uid24625@id-24625.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[11:12:40] *** Quits: p-i- (~Ohmu@mx-ll-223.206.71-4.dynamic.3bb.co.th) (Ping timeout: 252 seconds)
[11:12:40] <comet23> but i thought __getitem__ was a magic method
[11:12:55] <ledtc> magic() its a function.
[11:13:23] <aphysically> comet23: your error is you try to generate cards before you initialize the deck
[11:13:23] <jinsun> yeah but you can avoid that if you do deck.deck[0] instead of deck[0]
[11:13:37] <aphysically> move self.deck = [] above self.generate_cards()
[11:14:11] <aphysically> the problem is when it runs generate_cards(), you try to run append on self.deck, but self.deck doesn't exist yet because you haven't set it to []
[11:14:18] <ledtc> That will probably do it. Gotta make the box before you put stuff in the box, or use a temp box.
[11:14:33] <comet23> aphysically oh that's interesting i didn't know order mattered in initialization
[11:15:02] <ledtc> comet23 "self.generate_cards()" does not sound like initialization, it sound like work.
[11:15:12] <jinsun> it is just a function that runs after your object is created
[11:15:30] <jinsun> so order matters just like in any other function
[11:15:59] *** Joins: freeworld (~vit@chello085216193138.chello.sk)
[11:16:05] <KirkMcDonald> comet23: You are calling generate_cards() twice, once in __init__ and again on line 42.
[11:16:37] *** Quits: ttree (~ttree0@c-73-239-62-159.hsd1.wa.comcast.net) (Ping timeout: 265 seconds)
[11:16:52] <comet23> oh yeah because i was having a problem where i couldn't see the cards being printed out
[11:17:02] <comet23> i don't know why my list was empty
[11:17:35] *** Quits: cvmn (~caveman@gateway/tor-sasl/caveman) (Remote host closed the connection)
[11:17:57] <comet23> thank you so much KirkMcDonald
[11:18:06] <comet23> and aphysically
[11:18:22] <comet23> ledtc and anyone else i might have forgotten
[11:18:43] *** Quits: ElPresidenteP (~ElPreside@2605:a601:55be:bb00:b4ee:8306:9589:1945) (Ping timeout: 252 seconds)
[11:19:19] <ledtc> You´re welcome.
[11:20:41] <cluelessperson> energizer, my thinking is to use ffmpeg bindings to create a video stream but I don't know how such a thing is managed.
[11:21:22] <energizer> cluelessperson: im not the person to ask about that
[11:21:26] *** Joins: capn (~capn@user/capn)
[11:21:26] <comet23> this is what my code looks like now https://bpa.st/KGIA
[11:21:48] <comet23> i'm going to bed because it's late but thank you very much again
[11:21:57] <comet23> have a great night everyone
[11:22:16] <KirkMcDonald> comet23: I would actually recommend keeping the call in __init__ and getting rid of the other one.
[11:22:30] <comet23> KirkMcDonald i'm confused
[11:22:33] <comet23> what do you mean?
[11:22:41] <KirkMcDonald> comet23: The call to generate_cards.
[11:22:52] <comet23> put it in the init?
[11:23:10] *** Quits: tobybl (~tobybl@38.247.200.146.dyn.plus.net) (Remote host closed the connection)
[11:23:15] <KirkMcDonald> comet23: Yes. That way you instantiate Deck and have a fully populated deck.
[11:23:51] <comet23> https://bpa.st/65CA
[11:23:56] <comet23> =D
[11:24:02] *** Quits: bloody (~bloody@user/bloody) (Quit: Always focus on how far you've come, rather than how far you have left to go)
[11:24:13] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Ping timeout: 252 seconds)
[11:24:16] <comet23> how hard will it be for me to port my code into a tui framework after my game logic works?
[11:24:25] <cluelessperson> energizer, well thank you for your advice regardless. :)
[11:24:39] <KirkMcDonald> comet23: You still need to assign `self.deck = []` before calling `self.generate_cards()`.
[11:24:55] <energizer> cluelessperson: if you explain the situation maybe someone will answer, there used to be someone here who would answer video questions
[11:24:56] <comet23> thank you
[11:24:59] <KirkMcDonald> comet23: And you still need to get rid of the second call to generate_cards on line 40.
[11:25:35] <comet23> i'm so sorry i pasted the wrong window
[11:25:53] <energizer> comet23: those variable names card_* in 21-24 are excessive
[11:25:58] <comet23> i meant to paste this one https://bpa.st/PQGA
[11:26:29] <energizer> comet23: and rename it to _generate_cards so it looks more private
[11:26:41] <KirkMcDonald> (Or just move it into __init__.)
[11:26:47] <energizer> yeah that
[11:27:28] *** Joins: alzgh (~alzgh@user/alzgh)
[11:28:19] *** Joins: gitesh (uid423739@id-423739.ilkley.irccloud.com)
[11:28:33] *** Quits: ihaveamac (~ihaveamac@ihaveahax.net) (Quit: fail)
[11:29:02] <comet23> wait a minute do what now
[11:29:14] <comet23> what do you mean by "looks more private?"
[11:29:23] *** Joins: hudo (~hudo@62.68.20.210)
[11:29:30] <comet23> and what would moving it to init do?
[11:30:00] <KirkMcDonald> comet23: generate_cards() doesn't have a lot of meaning as a separate method on its own.
[11:30:15] <KirkMcDonald> comet23: Since it's called from __init__, a user of the class will never have a reason to call it.
[11:30:30] *** Joins: ihaveamac (~ihaveamac@ihaveahax.net)
[11:30:33] *** Quits: djhankb (~djhankb@208.113.164.68) (Read error: Connection reset by peer)
[11:30:38] <comet23> i thought separation of concerns was an important part of this
[11:30:52] <comet23> important part of programming
[11:31:06] *** Joins: djhankb (~djhankb@208.113.164.68)
[11:31:12] <comet23> you're saying my init method needs to look like this? https://bpa.st/VFOA
[11:31:36] <KirkMcDonald> comet23: Could do.
[11:31:47] *** Quits: Skyfire (~pyon@user/pyon) (Quit: brb)
[11:32:11] *** Joins: Skyfire (~pyon@user/pyon)
[11:33:08] *** Joins: grooverman_ (~grooverma@177.95.12.14)
[11:33:35] <comet23> now i'm thinking get_value would be better off in the card class
[11:33:50] <KirkMcDonald> Yes, that seems sensible.
[11:33:56] <comet23> but how will i know what the value of a card is before generating it
[11:34:31] <KirkMcDonald> Do you need to know the value before generating it? That seems like something Card can do in its own __init__.
[11:34:46] <energizer> with dataclasses i might go default_factory=generate_cards
[11:34:48] <comet23> well i'm having the computer generate cards right?
[11:34:50] *** Quits: grooverman (~grooverma@177.102.119.40) (Ping timeout: 260 seconds)
[11:35:12] *** Joins: hendursa1 (~weechat@user/hendursaga)
[11:35:13] <comet23> i just answered my own question sorry for the confusion
[11:35:41] <comet23> the answer is it doesn't matter because i'm making a call to it with the values in place and the values are already hardcoded in the function
[11:35:55] <comet23> i don't understand why i'm all over the place and get confused so easily
[11:36:31] *** Joins: stockholm (~Andreas@p200300d2c73e67001c7b7fd85c8439e7.dip0.t-ipconnect.de)
[11:36:41] <energizer> cuz ur new
[11:37:37] <comet23> if i ever get a job doing this stuff it's because people were kind enough to help me along the way =)
[11:37:51] <comet23> i will never forget this and will pay it forward when the time comes
[11:38:15] <energizer> :)
[11:38:45] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 276 seconds)
[11:39:03] <cluelessperson> comet23, I haven't looked at your code yet, but I was thinking that you could shuffle the cards and track their order, then generate merely gets the next one.
[11:39:40] <cluelessperson> you could even deterministically shuffle them with a seed and have replayable games.
[11:39:44] *** Joins: Mattiaslndstrm (~Mattiasln@94.191.136.10.mobile.tre.se)
[11:40:07] <comet23> what you're talking about sounds way above my current level of knowledge
[11:40:23] <comet23> i would love to implement a feature like that though
[11:40:40] <energizer> thats a good point aboud seeding
[11:40:44] <energizer> about*
[11:42:01] *** Joins: YuGiOhJCJ (~YuGiOhJCJ@gateway/tor-sasl/yugiohjcj)
[11:42:01] <cluelessperson> comet23, Well, it's actually very easy.   Computers don't have true randomness, they use functions that output something that looks random, and should be impossible to determine for an outsider, especially for cryptography.   But in your case, you just use the random module in python, and give it a "seed" from which it bases its next random generations from.
[11:43:19] <cluelessperson> comet23,   I don't mean to overwhelm you, you can always throw countless features into any project, but in this case it really is that simple.  https://youtu.be/OxIIqpW9keM
[11:43:19] *** Quits: pr100 (~pr100@cpc92728-cmbg20-2-0-cust160.5-4.cable.virginm.net) (Ping timeout: 256 seconds)
[11:43:21] <energizer> if you do that, each time you run the program it will give the same deck arrangement
[11:43:30] <energizer> the first time
[11:43:34] <cluelessperson> comet23, sorry, wrong link: https://docs.python.org/3/library/random.html#random.seed
[11:43:40] <energizer> https://docs.python.org/3/library/random.html#notes-on-reproducibility
[11:43:51] *** Quits: Mattiaslndstrm (~Mattiasln@94.191.136.10.mobile.tre.se) (Ping timeout: 245 seconds)
[11:44:14] <comet23> cluelessperson that was my reason for shuffling it 10 times because i read that computers don't have true randomness
[11:44:33] <energizer> comet23: they have good enough randomness
[11:45:06] *** Joins: pyfisch (~pyfisch@user/pyfisch)
[11:45:13] <energizer> if you were using this for a commercial gambling site you might want a fancier random number generator
[11:45:50] <jinsun_> and shuffling more number of times doesn't make it truly random,   it is still predictable
[11:46:03] <comet23> i find it incredible how people are able to predict it
[11:46:09] <comet23> i'd like to learn how they do it someday
[11:46:27] <comet23> i'm bookmarking all those links i have to go to bed it's 1:16 am here
[11:46:35] <comet23> here's what my code looks like now https://bpa.st/ASKQ
[11:46:39] <comet23> thank you so much again :D
[11:47:02] <cluelessperson> comet23, well, in the context of a game, a single basic shuffle is plenty good enough.   But if the system randomness function is broken or predictable, you don't want secure things like bitcoin, nuclear missiles, or military communications being compromised.  So they're more careful to *definitely* use better randomness generators.
[11:49:09] <cluelessperson> comet23, take it easy.
[11:49:21] * cluelessperson is always happy to make things more difficult with fun suggestions
[11:50:34] *** Quits: audiocat (~audio@cpe-24-27-99-134.tx.res.rr.com) (Ping timeout: 252 seconds)
[11:56:55] *** Quits: comet23 (~comet23@user/comet23) (Ping timeout: 256 seconds)
[11:57:00] *** Joins: sticheln (~atsbomb@116.88.220.71)
[11:59:01] *** Joins: han-solo (~hanish@user/han-solo)
[12:04:58] *** Joins: promey_ (~Promeys@gateway/tor-sasl/promey)
[12:07:08] *** Quits: grooverman_ (~grooverma@177.95.12.14) (Read error: Connection reset by peer)
[12:08:39] *** Quits: promeys (~Promeys@gateway/tor-sasl/promey) (Ping timeout: 276 seconds)
[12:13:02] *** Joins: rindolf (~shlomif@2a0d:6fc2:4bb1:500:6b1e:2524:3d70:36ec)
[12:13:59] <rendar> can i specify a default behavior to an abstract method?
[12:14:41] *** Quits: p-i-_ (~Ohmu@mx-ll-223.206.71-4.dynamic.3bb.co.th) (Remote host closed the connection)
[12:14:41] *** Joins: theprophet (~theprophe@85.114.228.184)
[12:15:16] *** Joins: p-i- (~Ohmu@mx-ll-223.206.71-4.dynamic.3bb.co.th)
[12:15:56] <theprophet> how do you save and manipulate databases in python using django?
[12:16:58] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 252 seconds)
[12:18:50] *** Joins: fikran (~fikran@user/fikran)
[12:19:00] *** Joins: Csm319_ (~csm3105@static-26-27-230-77.ipcom.comunitel.net)
[12:20:16] <KirkMcDonald> rendar: That sounds like a non-abstract method.
[12:20:29] <rendar> KirkMcDonald, indeed
[12:20:54] <rindolf> theprophet: https://en.wikipedia.org/wiki/Create,_read,_update_and_delete ?
[12:20:59] <rendar> KirkMcDonald, the thing is, in C++ i get notified when an abstract method implements something, here in py i don't
[12:22:34] <KirkMcDonald> rendar: They are very different object models.
[12:22:55] <theprophet> rindolf so is there a video or documentation for how do you actually connect mysql and django?
[12:22:59] <rendar> ok, well, i just erase the @abc.abstractmethod decorator, then
[12:23:50] <Awoobis> Are there... zero docs on how to actually create and use a ttk theme? everything I can find says "use these existing ones
[12:23:51] <Awoobis> "
[12:24:11] <Awoobis> or says 'use create_theme and inherit', but it doesnt inherit and I dont understand why
[12:24:39] <rindolf> theprophet: yes, there are
[12:24:59] <theprophet> @rindo
[12:25:20] <theprophet> rindolf can you link one proper one for me ? please?
[12:25:48] <rindolf> theprophet: no, i don't know django
[12:26:03] <theprophet> rindolf oh i see ok
[12:28:07] *** Joins: digitalnomadjc (~digitalno@ppp14-2-79-92.adl-apt-pir-bras31.tpg.internode.on.net)
[12:30:53] *** Quits: djhankb (~djhankb@208.113.164.68) (Read error: Connection reset by peer)
[12:31:05] *** Joins: PJBoy (~PJBoy@user/pjboy)
[12:31:25] *** Joins: djhankb (~djhankb@208.113.164.68)
[12:33:41] *** Quits: johncs (~johncs@2604:a880:2:d0::216b:f001) (Quit: bye)
[12:34:05] *** Joins: johncs (~johncs@2604:a880:2:d0::216b:f001)
[12:34:22] *** Joins: rsx (~dummy@ppp-188-174-142-5.dynamic.mnet-online.de)
[12:35:15] *** Joins: curiosity (uid507362@user/cypris)
[12:36:32] *** duskrat is now known as portalrat
[12:38:08] <deniska> theprophet: do you have an existing mysql database you want to access from a django program, or do you want to use django to create and manage mysql database for the orm models?
[12:39:11] <theprophet> deniska i dont have anything yet, but i want to learn how to do those you mention
[12:39:15] *** Quits: RavuAlHemio (~ondra@selene.ondrahosek.com) (Quit: ZNC 1.8.2 - https://znc.in)
[12:39:39] *** Joins: RavuAlHemio (~ondra@selene.ondrahosek.com)
[12:40:24] *** Joins: magla (~gelignite@55d486d7.access.ecotel.net)
[12:40:43] <theprophet> deniska is it just copy paste or how does it work?  for example if you have a site and some registers is it goes to django or mysql ? how does this work , i want a good tutorial documentation for that.
[12:40:50] <deniska> theprophet: for the latter, you just specify django how to connect to a mysql server changing settings.py: https://docs.djangoproject.com/en/3.2/ref/settings/#databases
[12:41:19] *** Quits: Mikaela (~sid12355@Feneas/Mikaela) (Quit: Default quit message is difficult to set. If you don't see me returning, ask me? You will find me, if you want to)
[12:41:23] *** Joins: Seiryuu (~Seiryuu@ip174-103-176-143.adsl2.static.versatel.nl)
[12:41:33] <theprophet> deniska ok that makes sense. is there a full documentation on that? or thats the link your provided?
[12:42:08] <han-solo> also https://docs.djangoproject.com/en/3.2/intro/tutorial02/#database-setup
[12:42:39] <theprophet> ok so bassicaly thats the django documentation with django docs i see
[12:42:44] <theprophet> ok thank you guys
[12:43:00] <han-solo>  👍
[12:43:19] <deniska> their docs are fairly good, I don't remember having to read resources outside of them too often :)
[12:45:05] <raek> I'm trying to get a better understanding of package modules. I've mostly programmed with empty __init__.py files and put all the logic in the "leafs" of the package/module tree. (basically only using packages for grouping modules together)
[12:45:43] <energizer> raek: good.
[12:45:44] <raek> are there any useful guides or general advice for when to (not) put code in the package modules / __init__.py files?
[12:46:08] *** Joins: jbe (~jbe@lysator/root/jbe)
[12:46:17] <energizer> raek: only imports, if anything
[12:46:41] <energizer> and  not import *, always by name
[12:46:51] <raek> energizer: can you elaborate or point to why that is important?
[12:47:07] <raek> I want to understand the underlying reasoning too
[12:47:13] *** Joins: Mikaela (~sid12355@Feneas/Mikaela)
[12:47:31] <energizer> so that tools and people know where the names come from when they look at the file
[12:48:08] <hexnewbie> as well as what names are defined, and what names are not
[12:48:23] <energizer> +1
[12:48:43] <raek> energizer: the "import *" I already understand, but why putting code in __init__.py is a bad idea?
[12:49:28] *** Quits: shawwwn (uid6132@id-6132.helmsley.irccloud.com) (Ping timeout: 252 seconds)
[12:49:50] <deniska> raek: it's executed import time, and very rarely you want non-assignment statement executed during that
[12:49:58] *** Quits: curiosity (uid507362@user/cypris) (Ping timeout: 260 seconds)
[12:50:01] *** Quits: dez (uid92154@user/dez) (Ping timeout: 252 seconds)
[12:50:01] *** Quits: braxas (sid508886@id-508886.lymington.irccloud.com) (Ping timeout: 252 seconds)
[12:50:15] <raek> okay, I should have said "function an classs definitions" instead of code
[12:50:17] <energizer> it might be just a convention now, i cant actually think of a reason
[12:50:25] <raek> I'm not talking about side-effects at the top level
[12:50:54] *** Quits: gitesh (uid423739@id-423739.ilkley.irccloud.com) (Ping timeout: 260 seconds)
[12:51:07] *** Quits: sharpertool (sid80151@id-80151.hampstead.irccloud.com) (Ping timeout: 252 seconds)
[12:51:09] <deniska> raek: I don't think there's any important reason besides "we tend to prefer empty __init__.py nowadays"
[12:51:14] <hexnewbie> It's odd to have a meaningful code in a file named __init__.py. Hey, where is the code of my CallHomeDictionary() class? What, where, __init__.py?! It makes it hard to jump between documents in your editor, too.
[12:51:14] <ferros> raek: there's no particular reason not to put code in it if you want it to be ran at the initialization
[12:51:22] *** Quits: Yhg1s (sid387777@python/psf/thomas) (Ping timeout: 260 seconds)
[12:51:27] *** Joins: sharpertool (sid80151@hampstead.irccloud.com)
[12:51:29] *** Joins: plastico (~plastico@neomutt/plastico)
[12:51:48] <ferros> I never found a need for this in practice but in principle it will work
[12:51:53] <hexnewbie> I do have *one* project where it uses extensive code in __init__.py, but that's mostly because a module was converted to a package as it grew too big. It does not look good
[12:51:56] *** Joins: dez (uid92154@user/dez)
[12:51:57] *** Joins: Yhg1s (sid387777@python/psf/thomas)
[12:51:58] *** Joins: shawwwn (uid6132@helmsley.irccloud.com)
[12:51:59] *** Joins: braxas (sid508886@lymington.irccloud.com)
[12:52:12] <energizer> there might be something about import cycles but i'm having trouble thinking through it
[12:52:35] *** Joins: LucaTM (~LucaTM@user/lucatm)
[12:52:37] <raek> so, if I originally had a module named "foo.bar" (in foo/bar.py) and later I want to add "foo.bar.baz", I can just move the contents of foo/bar.py into foo/bar/__init__.py and everything behaves the same?
[12:52:41] <energizer> been a while since i've got into the import system guts
[12:52:53] <hexnewbie> Python 2 broke on those very often. Though I do import names from my package often, for some reason. (I always have two constants in a project that for some reason make sense to be package-level)
[12:52:55] *** Joins: gitesh (uid423739@ilkley.irccloud.com)
[12:52:58] <energizer> raek: yes
[12:54:29] *** Quits: hendursa1 (~weechat@user/hendursaga) (Remote host closed the connection)
[12:54:50] <raek> so if foo.bar.baz is imported, nothing special happens with foo.bar? (such as, it being imported?)
[12:55:24] <energizer> it is imported
[12:55:30] *** Joins: hendursa1 (~weechat@user/hendursaga)
[12:55:31] <energizer> well
[12:55:39] <energizer> it is executed
[12:55:57] <energizer> and foo.bar is accessible
[12:56:00] <energizer> if that's what you mean
[12:56:54] <raek> ok, so then package modules are a bit special
[12:57:08] <raek> in the sense that they will be imported automatically some times
[12:57:44] <raek> which I need to keep in mind when thing about the dependencies between my modules?
[12:57:55] <raek> (to avoid circular deps)
[12:58:01] <energizer> yes there's also the issue of what if foo/bar/__init__.py defines baz = x and there is foo/bar/baz.py
[12:58:05] <theprophet> guys any suggestions on what should i learn before starting django?
[12:58:18] <theprophet> i know html, but what else?
[12:58:24] <deniska> theprophet: do you know python? :)
[12:58:35] <theprophet> deniska yes
[12:58:39] <ferros> theprophet: start learning and you'll see what you're missing?
[12:58:40] <energizer> theprophet: django docs are great. there's also a book "two scoops of django" you can look at.
[12:58:46] <ferros> It's hard for us to guess
[12:59:21] <deniska> theprophet: knowing web dev basics (html, css and stuff) would be nice, but you can pick it up along the way
[12:59:23] <theprophet> i know mysql, i know html, i know python, what else?
[12:59:29] *** Quits: JacobFrost (sid494713@5.254.36.57) (Ping timeout: 245 seconds)
[12:59:31] <theprophet> i know css
[12:59:40] *** Quits: sa (sid1055@5.254.36.57) (Ping timeout: 260 seconds)
[12:59:41] *** Quits: nicksloan (sid195124@user/nicksloan) (Ping timeout: 245 seconds)
[12:59:57] <deniska> then just start going through django tutorials, you'll see if there's something you're missing
[13:00:03] *** Quits: EWDurbin (sid38710@5.254.36.57) (Ping timeout: 265 seconds)
[13:00:06] *** Quits: Nahra (~user@static.161.95.99.88.clients.your-server.de) (Ping timeout: 245 seconds)
[13:00:06] *** Quits: drmessano (drmessano@user/drmessano) (Ping timeout: 245 seconds)
[13:00:09] *** Quits: eichin (sid27120@5.254.36.57) (Read error: Connection reset by peer)
[13:00:10] *** Quits: Evolver (sid32215@user/evolver) (Read error: Connection reset by peer)
[13:00:10] *** Quits: ziky (sid27087@user/ziky) (Read error: Connection reset by peer)
[13:00:12] *** Quits: holbrode (sid339826@5.254.36.57) (Read error: Connection reset by peer)
[13:00:15] <theprophet> deniska do i need to know json?
[13:00:53] <ferros> no one knows json
[13:01:01] <theprophet> lol
[13:01:23] *** Quits: jetchisel (jetchisel@user/jetchisel) (Quit: Unfortunately time is always against us -- [Morpheus])
[13:02:07] <deniska> theprophet: I mean, depending on what you're going do, but it's not much to know about, it's just a file format for translating simple and maybe nested objects like dicts, lists, strings, numbers to strings
[13:02:08] *** Joins: node1 (~node1@user/node1)
[13:02:15] <ferros> but seriously, go get something to read on django, it's not like someone will put you in prison if you go back to learning some prerequisites
[13:02:26] *** Quits: Csm319_ (~csm3105@static-26-27-230-77.ipcom.comunitel.net) (Quit: Leaving)
[13:02:45] *** Joins: csm3105 (~csm3105@static-26-27-230-77.ipcom.comunitel.net)
[13:02:45] *** Joins: JacobFrost (sid494713@id-494713.tinside.irccloud.com)
[13:02:47] *** Joins: nicksloan (sid195124@user/nicksloan)
[13:02:48] *** Joins: EWDurbin (sid38710@id-38710.tinside.irccloud.com)
[13:02:50] *** Joins: drmessano (drmessano@user/drmessano)
[13:02:52] <theprophet> ferros  i am going to, i am just gathering the correct info before starting it.
[13:02:59] <theprophet> @fer
[13:03:02] *** Joins: holbrode (sid339826@id-339826.tinside.irccloud.com)
[13:03:19] *** Joins: PortableDave (~textual@194-223-17-29.tpgi.com.au)
[13:03:19] <theprophet> ferros thats the exact reason, why i learned hmtl , css and mysql
[13:03:30] *** Quits: Tempesta (~Tempesta@user/tempesta) (Quit: See ya!)
[13:03:35] *** Joins: ziky (sid27087@user/ziky)
[13:03:54] <theprophet> deniska got it, thank you
[13:03:54] <ChrisWarrick> theprophet: well, you won’t really need to use sql in django (also, mysql isn’t the typical choice for django)
[13:04:08] <theprophet> ChrisWarrick what is?
[13:04:09] *** Joins: sa (sid1055@id-1055.tinside.irccloud.com)
[13:04:12] <ChrisWarrick> theprophet: postgresql
[13:04:22] *** Joins: eichin (sid27120@tinside.irccloud.com)
[13:04:28] <ChrisWarrick> theprophet: but yeah, you should start with a django tutorial or book or such
[13:04:33] *** Joins: Evolver (sid32215@user/evolver)
[13:04:40] <han-solo> https://tutorial.djangogirls.org/en/django/ # is also good, i hear
[13:04:49] <theprophet> ChrisWarrick is postgresql very different from mysql?
[13:05:03] <ChrisWarrick> theprophet: depends on what level
[13:05:10] <ChrisWarrick> theprophet: on the level of writing basic queries? not much
[13:05:16] <theprophet> ChrisWarrick for example is syntax same?
[13:05:17] <han-solo> with the orm, you wouldn't need to care much, i guess
[13:05:52] <bob_x1> i have an error python: stdout/stderr (?): SyntaxError: invalid syntax
[13:05:53] <deniska> I used mysql with django because the deployment target was a cheap old school style shared hosting :)
[13:05:57] <bob_x1>     except Exception, e:
[13:05:58] <ChrisWarrick> theprophet: basic queries look the same way in all SQL-based databases (although this also depends on your definition of “basic”)
[13:06:07] <bob_x1> on this line i see the error     except Exception, e:
[13:06:07] <ChrisWarrick> bob_x1: this is dead python (aka python 2) syntax
[13:06:12] <theprophet> ChrisWarrick got it
[13:06:16] <bob_x1> ahh ok
[13:06:24] <ChrisWarrick> bob_x1: did you write the code you’re trying to run? or are you running someone else’s code?
[13:06:37] <theprophet> deniska what do you use now?
[13:06:39] <bob_x1> it's someone elses
[13:06:40] *** Quits: node1 (~node1@user/node1) (Client Quit)
[13:06:45] <ChrisWarrick> theprophet: https://wiki.postgresql.org/wiki/Things_to_find_out_about_when_moving_from_MySQL_to_PostgreSQL
[13:07:15] <deniska> theprophet: not using django nowadays, but if I did, I'd prefer to use it with postgres
[13:07:41] <ChrisWarrick> bob_x1: either try looking for something more modern that can also solve your problem, or if you must use this specific script, you’ll need to install dead python
[13:07:47] <theprophet> deniska may i know why?
[13:07:49] <hexnewbie> bob_x1: If you downloaded a Python 2 program, and your OS links python to python3, you may need to, um, find a python 3 version of the code, try to convert it yourself (2to3 tool helps, but it is still a lot of work for non-trivial scripts), or as a last resort installing Python 2 if your OS still provides a maintained version of that.
[13:08:06] *** Joins: raxor2k (~raxor2k@78.158.228.45)
[13:08:13] *** Parts: raxor2k (~raxor2k@78.158.228.45) ()
[13:08:44] <deniska> theprophet: mysql was historically quite quirky, it's kind of quick and dirty option among databases
[13:08:52] <theprophet> ChrisWarrick thank you for the link.
[13:09:01] <bob_x1> yeah python2 and then maybe just set up the correct interpreter for this exact file. i doubt there is python3 version of the script. its' weechat plugin autoload. do not yet even know what it does
[13:09:04] <bob_x1> need to read first
[13:09:19] <ChrisWarrick> theprophet: (the code and stuff around it is quite outdated, but the differences are generally valid today)
[13:09:21] <theprophet> deniska i see . thank you.
[13:09:29] *** Joins: bilb_ono (~alexmarsh@ip184-189-224-55.sb.sd.cox.net)
[13:09:40] <theprophet> ChrisWarrick noted. thank you
[13:09:46] <ChrisWarrick> bob_x1: weechat can be compiled to use either python2 or python3 scripts
[13:09:46] *** Joins: Tempesta (~Tempesta@user/tempesta)
[13:09:56] <ChrisWarrick> bob_x1: your weechat was compiled with py3, so you’ll need a py3 script
[13:10:18] <hexnewbie> bob_x1: ‘Weechat plugin autoload’ sounds like something that would be short enough to take your chances and 2to3 and small adjustments, but also something that you can't just interpreter versions for
[13:10:29] <hexnewbie> er, can't just switch
[13:11:29] <theprophet> ChrisWarrick what time it takes to actually learn django properly?  for example if i learn django everyday about 4-5 hours .
[13:11:32] *** Joins: vvdaiwrw (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[13:12:00] <deniska> theprophet: it's really impossible to quantify, different people learn at different rates :)
[13:12:15] <theprophet> i am not slow if you mean that xD
[13:12:23] *** Joins: lapno (~lapno@eog175.neoplus.adsl.tpnet.pl)
[13:12:23] <theprophet> i learned python in 3 months
[13:12:54] *** Quits: PortableDave (~textual@194-223-17-29.tpgi.com.au) (Quit: Textual IRC Client: www.textualapp.com)
[13:13:23] *** Joins: PortableDave (~portabled@194-223-17-29.tpgi.com.au)
[13:13:25] <ChrisWarrick> theprophet: what does “properly” mean?
[13:13:26] <hexnewbie> It also depends on the meaning of ‘learned’, I'm still learning Python 20 years later, yet I could also say I learned it in the first three weeks at our college course (9 hours?)
[13:13:39] <theprophet> ChrisWarrick well so i could say  iknow django.
[13:13:46] <ChrisWarrick> theprophet: what does “I know django” mean?
[13:13:55] <theprophet> ChrisWarrick to get a job for example
[13:14:10] <deniska> different jobs may have different expectations
[13:14:29] <theprophet> ChrisWarrick because all i am seeing is they are looking for a senior python/django developer.
[13:14:49] <theprophet> i havent seen any mid or juniors
[13:15:11] <hexnewbie> theprophet: Simply put, the time period is not quantifiable. It might be possible for some people to get the job, start doing the project, and learn the language/project *while* working on it.
[13:15:40] <deniska> I recently was hired to work with a web framework I didn't have any experience in, I was just expected to pick it up on the go :)
[13:15:41] *** Joins: blindguard (~blindguar@2a02:908:1864:c200::2612)
[13:15:59] <theprophet> deniska and how did that work out for you?
[13:16:19] <deniska> theprophet: let's say after you've seen 4 of them, 5th looks fairly similar
[13:17:09] <theprophet> deniska before you got that job, what level of knowledge you had of django?
[13:18:22] <theprophet> deniska unexperienced, very experienced or like in the middle?
[13:18:30] <deniska> theprophet: I can make a site with django, but if a codebase actively uses class based generic views, I may need to keep docs open for a while
[13:19:03] *** Joins: Auron (~Auron956@user/auron)
[13:19:09] <theprophet> deniska i see, thanks for info
[13:19:25] <deniska> theprophet: level of experience is another thing which is really hard to quantify, otherwise hiring process in most software companies wasn't such a mess
[13:19:42] *** Joins: SymbioticFemale (~Symbiotic@gateway/tor-sasl/symbioticfemale)
[13:19:59] <SymbioticFemale> hey python people. i have a question.
[13:20:27] <theprophet> deniska i see
[13:20:39] *** Joins: Mattiaslndstrm (~Mattiasln@94.191.136.10.mobile.tre.se)
[13:20:54] <SymbioticFemale> if a library is buggy in C but also exists in python, is it going to functionally be the same library (so, C code) or is it going to be same functionality but different code-base?
[13:21:23] <ChrisWarrick> SymbioticFemale: what library is it?
[13:22:11] <SymbioticFemale> the library in question is libsodium and my suspicion is that there is a memory issue with one of the function calls, so i want to try to re-write my code in python to see if my issue is solved by doing so, since a memory issue is unlikely to be carried over to python if the library codebase was indeed re-written
[13:22:16] <SymbioticFemale> ChrisWarrick: libsodium
[13:23:27] <ChrisWarrick> SymbioticFemale: https://libsodium.gitbook.io/doc/bindings_for_other_languages
[13:23:43] <ChrisWarrick> SymbioticFemale: the word “binding” means that it’s using the same C code underneath, none of those are rewrites
[13:24:01] <SymbioticFemale> awe ok
[13:24:17] <SymbioticFemale> thanks ChrisWarrick
[13:24:20] <ChrisWarrick> SymbioticFemale: if you suspect there’s a memory issue, report a bug
[13:24:23] <ChrisWarrick> SymbioticFemale: you’re welcome!
[13:25:19] *** Quits: digitalnomadjc (~digitalno@ppp14-2-79-92.adl-apt-pir-bras31.tpg.internode.on.net) (Ping timeout: 256 seconds)
[13:25:55] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Remote host closed the connection)
[13:27:02] *** Joins: Mattiasl_ (~Mattiasln@94.191.136.10.mobile.tre.se)
[13:28:20] *** Quits: PortableDave (~portabled@194-223-17-29.tpgi.com.au) (Quit: Textual IRC Client: www.textualapp.com)
[13:29:47] *** Quits: Mattiaslndstrm (~Mattiasln@94.191.136.10.mobile.tre.se) (Ping timeout: 268 seconds)
[13:30:36] *** Quits: djhankb (~djhankb@208.113.164.68) (Remote host closed the connection)
[13:31:09] *** Joins: djhankb (~djhankb@208.113.164.68)
[13:31:20] *** Joins: cloudbender (~cloudbend@user/cloudbender)
[13:35:12] *** Joins: clarkk (~clarkk@host31-53-69-254.range31-53.btcentralplus.com)
[13:35:25] *** Joins: Cleverness (~clevernes@pool-108-54-152-186.nycmny.fios.verizon.net)
[13:38:27] *** Quits: Mattiasl_ (~Mattiasln@94.191.136.10.mobile.tre.se) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[13:39:06] *** Joins: raxor2k (~raxor2k@78.158.228.45)
[13:39:38] <raxor2k> is there something worrying about pushing hundreds of data to the mysql database using sqlalchemy ?
[13:39:57] *** Joins: EGH (~EGH@185.25.195.104)
[13:41:12] *** Joins: etbcf (~etbcf@2001:8a0:7b3a:dd01:2304:1fdd:d447:fe06)
[13:41:51] *** Joins: trace987 (~trace@ip5f5a6a70.dynamic.kabel-deutschland.de)
[13:42:32] *** Quits: etbcf (~etbcf@2001:8a0:7b3a:dd01:2304:1fdd:d447:fe06) (Client Quit)
[13:45:00] *** Quits: kcrk (~kcrk@user/kcrk) (Quit: http://quassel-irc.org - Chat comfortably. Anywhere.)
[13:45:31] *** Joins: kcrk (~kcrk@user/kcrk)
[13:47:32] <deniska> "hundreds" is typically "not a lot" by computer standards
[13:48:57] *** Joins: bomb-on (~bomb-on@194.144.47.113)
[13:50:19] *** Parts: KSaunderson (~user@142.93.152.208) ()
[13:52:44] <ChrisWarrick> databases have ways to do bulk inserts, although the docs of sqlalchemy discourage using their bulk features (https://docs.sqlalchemy.org/en/14/orm/persistence_techniques.html#bulk-operations)
[13:56:25] *** Joins: shalora (~quassel@2a02:810a:b40:9f4::178f)
[13:59:49] *** Quits: sartan (~sartan@user/sartan) (Quit: WeeChat 1.9.1)
[14:01:37] *** Parts: SymbioticFemale (~Symbiotic@gateway/tor-sasl/symbioticfemale) ()
[14:04:10] *** Quits: nicksloan (sid195124@user/nicksloan) (Ping timeout: 260 seconds)
[14:04:16] *** Quits: drmessano (drmessano@user/drmessano) (Ping timeout: 252 seconds)
[14:04:38] *** Quits: holbrode (sid339826@id-339826.tinside.irccloud.com) (Ping timeout: 260 seconds)
[14:04:49] *** Quits: JacobFrost (sid494713@id-494713.tinside.irccloud.com) (Ping timeout: 252 seconds)
[14:05:22] *** Quits: sa (sid1055@id-1055.tinside.irccloud.com) (Ping timeout: 252 seconds)
[14:05:34] *** Quits: EWDurbin (sid38710@id-38710.tinside.irccloud.com) (Ping timeout: 260 seconds)
[14:06:39] *** Joins: sa (sid1055@tinside.irccloud.com)
[14:06:42] *** Joins: drmessano (drmessano@user/drmessano)
[14:07:16] *** Joins: TranquilEcho (~grom@user/tranquilecho)
[14:07:37] *** Quits: han-solo (~hanish@user/han-solo) (Quit: leaving)
[14:07:53] *** Joins: JacobFrost (sid494713@tinside.irccloud.com)
[14:07:54] *** Joins: EWDurbin (sid38710@tinside.irccloud.com)
[14:08:00] *** Joins: holbrode (sid339826@tinside.irccloud.com)
[14:08:17] *** Joins: han-solo (~hanish@user/han-solo)
[14:08:37] *** Quits: shalora (~quassel@2a02:810a:b40:9f4::178f) (Quit: https://quassel-irc.org - Komfortabler Chat. Überall.)
[14:09:31] *** Quits: srji (~srji@static.43.141.203.116.clients.your-server.de) (Quit: leaving)
[14:10:32] <raxor2k> a_list = ["tim", "pete", "ann", "tim"]    for i in list: if i=="tim":   remove(i)    removes all the "tim" from the list, but is it possible to "pop" only the first time?
[14:10:33] <raxor2k> tim
[14:10:54] <han-solo> x[:] = x[1:] ?
[14:11:12] <han-solo> er, first time
[14:11:25] <han-solo> just break
[14:11:27] <cloudbender> you should not be removing from the list while iterating the list
[14:11:39] <han-solo> and that
[14:12:27] <raxor2k> ok, then i need a queue list
[14:12:34] <raxor2k> to pop/insert in a specified order
[14:13:29] *** Joins: chenqisu12 (~xirndc@183.217.201.186)
[14:13:52] <cloudbender> Maybe just add to the list in bulk then sort it.
[14:14:22] <raxor2k> temporary store in list --> push to db --> remove from list once it is stored to db
[14:14:40] *** Joins: Klinda (~superleag@user/klinda)
[14:14:44] *** Quits: Klinda (~superleag@user/klinda) (Read error: Connection reset by peer)
[14:14:51] *** Joins: cthulchu (~Cthulchu@193.194.107.250)
[14:15:16] *** Joins: dngray (~unknown@user/dngray)
[14:15:45] <dngray> so i am looking at some emojis like 😁😛😋🤣, but the format i'm trying to parse is a html entity
[14:16:00] <dngray> ie &#128540;
[14:16:12] <nedbat> dngray: what are you trying to do with that text?
[14:16:29] <hexnewbie> dngray: import html; html.unescape('&#128540;') → '😜'
[14:16:29] <dngray> i want to get the entity from &#128540; into an emoji like 😛
[14:16:35] <dngray> oh.
[14:16:53] <dngray> i thought i would have to convert it to bytes first
[14:17:29] <dngray> that makes things a lot easier
[14:17:48] <dngray> hexnewbie: so i will just regex the code, and unescape it i guess
[14:18:12] <dngray> i did look around and saw all sorts of complicated methods with beautiful soup, lxml etc
[14:18:53] <nedbat> dngray: what is the regex for?
[14:19:09] <dngray> well i'm parsing SMS messages (they're in XML)
[14:19:12] <hexnewbie> dngray: Those complicated methods sound more correct for the undisclosed final goal, and may end up being *way* *WAY* easier than applying regex to HTML for any reason
[14:19:17] <dngray> and i need to locate the particular code don't i?
[14:19:26] <hexnewbie> dngray: Yeah, use lxml for that
[14:19:49] <nedbat> dngray: html.unescape('<foo>&#128540;</foo>') --> '<foo>😜</foo>'
[14:20:04] *** Joins: nicksloan (sid195124@user/nicksloan)
[14:20:28] <nedbat> dngray: you probably don't need to find the emoji first
[14:20:29] *** Joins: kostkon (~kostkon@2a02:587:a104:3da6:4d6c:40e6:f58:8e46)
[14:20:44] <dngray> nah i shouldn't need to it's only one way
[14:20:52] <dngray> my input data looks like:
[14:20:59] <dngray> <sms protocol="0" address="XXXXXXX" date="xxxxxxx" type="1" subject="null" body="blah &#55357;&#56869;" toa="null" sc_toa="null" service_center="null" read="1" status="-1" locked="0" />
[14:21:21] <dngray> body= will always contain text, with just some codes for when an emoji is ued
[14:21:26] *** Joins: orcus-zombie (~orcus-de@213.170.218.225)
[14:21:29] *** Joins: Klinda (~superleag@user/klinda)
[14:22:09] <dngray> so given the limited features required i think you're right html.unescape is exactly all i need
[14:22:17] <dngray> (i'm never trying to go back to the xml)
[14:22:22] *** Quits: stockholm (~Andreas@p200300d2c73e67001c7b7fd85c8439e7.dip0.t-ipconnect.de) (Ping timeout: 260 seconds)
[14:22:44] *** Quits: cloudbender (~cloudbend@user/cloudbender) (Quit: Connection closed)
[14:23:14] <dngray> nedbat: the only reason for finding the emoji first is because xml.etree.ElementTree cannot process html entities
[14:23:40] <dngray> so the idea was to load the xml file into a buffer, remove the html entities (ie swap them for real emojis), then process with xml.etree.ElementTree
[14:23:48] <hexnewbie> dngray: &#55357;&#56869; does not parse
[14:24:00] <nedbat> dngray: really? That means it isn't a compliant XML parser, or your data isn't true XML
[14:24:14] *** Quits: dbristow (~dbristow@user/dbristow) (Ping timeout: 260 seconds)
[14:24:31] <dngray> you can try it if you like but i was getting errors with xml.etree.ElementTree every time i had a html entity in there
[14:24:36] <dngray> remember some of them are joined together
[14:24:38] <hexnewbie> dngray: Neither with html.unescape(), nor with lxml.etree as XML, nor with lxml.html (which eats the whole sms, because it is more lenient to broken input)
[14:24:40] <nedbat> dngray: maybe try lxml
[14:24:54] <dngray> for example "&#55357;&#56835;" is "😃"
[14:25:13] <hexnewbie> html.unescape('&#55357;&#56869;') yields two escape characters, I suspect those are surrogates
[14:25:24] <dngray> hmm yeah i think they are
[14:25:45] <dngray> for example this message contains:
[14:25:47] <dngray> body="&#55357;&#56869; oh well. We&apos;re moving our stuff out!"
[14:25:56] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 245 seconds)
[14:25:56] <dngray> the actual emoji is a 😥
[14:26:17] <dngray> so does that mean that html.unescape can't deal with surrogates? ie two of those entities together
[14:26:44] <dngray> 🤩 is showing as a &#55358;&#56617;
[14:27:11] *** Joins: dbristow (~dbristow@user/dbristow)
[14:27:25] <hexnewbie> So far neither html, nor lxml seem to be able to handle surrogates encoded like that
[14:27:33] <dngray> hmm
[14:27:51] <hexnewbie> They should never be, as a surrogate is not a valid character anyway
[14:28:04] <dngray> yeah, well blame silence, it produces those
[14:28:09] <dngray> i stopped using that sms app
[14:28:10] *** Joins: fikran (~fikran@user/fikran)
[14:28:35] <dngray> is there a way to deal with a surrogate?
[14:29:02] <dngray> like surrogates are when they're are two symbols that make up a char aren't there
[14:29:25] <dngray> like polar bear emoji is a brown bear and a frost emoji
[14:29:37] <dngray> maybe not, that's a ZWJ sequence
[14:29:50] <dngray> https://emojipedia.org/emoji-zwj-sequence/
[14:31:38] *** Joins: mIk3_08 (~Thunderbi@user/mik3-08/x-2852566)
[14:32:08] *** Joins: zen_coder (~zen_coder@2a02:8109:a280:2d8d:9502:f9d3:d146:db2c)
[14:32:44] <dngray> hexnewbie: why does it have two entities?
[14:33:55] <dngray> the code doesn't even look right https://www.compart.com/en/unicode/U+1F929
[14:35:50] <hexnewbie> dngray: This seems to fix it: https://bpa.st/LEAA
[14:36:24] <dngray> oh, so you had to do something to it first
[14:36:30] <dngray> encoding it in utf-16
[14:36:52] <dngray> i wonder why it does that, when the top of the xml file has:
[14:36:53] <dngray> <?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
[14:37:04] <dngray> i had assumed everything was UTF-8
[14:37:04] *** Parts: orcus-zombie (~orcus-de@213.170.218.225) (Leaving)
[14:37:06] <hexnewbie> dngray: Surrogates are only used in UTF-16 encoding
[14:37:41] <dngray> right, what is even the purpose of surrogates, sorry
[14:37:47] <hexnewbie> dngray: They are not valid characters, should *never* appear in text (except when abused e.g. with Python 3 surrogateescape)
[14:37:56] <dngray> right
[14:38:33] <dngray> so silence probably isn't exporting correctly, i wonder why they did it that way
[14:38:56] <zen_coder> can anybody help me with docker and python? I have a simple test script, where I want to execute some cmds inside docker and want the get the output: https://bpa.st/JZFQ
[14:39:22] *** Joins: paul424 (~tom@apn-37-249-81-20.dynamic.gprs.plus.pl)
[14:39:39] <hexnewbie> dngray: UCS-2 was limited to 65535 characters, which was not enough for CJK, emojis, and Egyptian hieroglyphs for researchers, so 2000 characters were forbidden to be used for low and high surrogates, and a pair of 1000 low surrogates and 1000 high surrogates are used to encode 1000000 additional characters. Thus turning UCS-2 in UTF-16
[14:39:57] <dngray> oh that makes sense
[14:40:09] <hexnewbie> dngray: Neither UTF-8, nor UTF-32 need those, and they definitely do not need to appear in ASCII HTML/XML that has them as entities
[14:40:11] <dngray> yeah so for those really rare ones wouldn't have been able to be encoded in UTF-8
[14:40:54] *** Quits: raxor2k (~raxor2k@78.158.228.45) ()
[14:41:33] *** Quits: csm3105 (~csm3105@static-26-27-230-77.ipcom.comunitel.net) (Ping timeout: 265 seconds)
[14:41:37] *** Quits: lethu (~lethu@user/lethu) (Ping timeout: 252 seconds)
[14:41:40] <hexnewbie> dngray: UTF-8 encodes everything (is unlimited, theoretically), UTF-32 encodes everything (is limited to 4 billion characters), it's the UTF-16 and its ancestor UCS-2 that are the problem, and lead to the existence of surrogates and a 1-million character limit
[14:42:40] <dngray> ah
[14:42:49] <dngray> so this way it can include all of them and not run out
[14:43:39] *** Joins: lethu (~lethu@user/lethu)
[14:43:44] <Wulf> hexnewbie: How is UTF-8 unlimited? I thought the theoretical maximum was 36 bits.
[14:45:46] *** Quits: lapno (~lapno@eog175.neoplus.adsl.tpnet.pl) (Quit: Leaving)
[14:47:45] *** Joins: tobybl (~tobybl@38.247.200.146.dyn.plus.net)
[14:47:55] <nedbat> UTF-8 in theory could use 6-byte sequences that encode up to 31 bits (according to wikipedia)
[14:48:09] <nedbat> but unicode only needs up to 4-byte sequences
[14:48:54] *** Quits: ph88 (~ph88@2a02:8109:9e00:7e5c::3d56) (Quit: Leaving)
[14:50:19] <hexnewbie> Hmm, I guess there are only so many leading bit combinations that you could put without violating self-syncrhonization
[14:50:32] <dngray> hexnewbie: thanks for the example, i'm going to have some fun playing with that
[14:51:24] <dngray> i have to admit without your example, i would have never figured this problem out
[14:51:49] <hexnewbie> So I'm incorrect. Still, if you change the encoding as use unused leading bits in different bytes, it could probably be extended easier than UTF-16 can
[14:54:41] *** Quits: mIk3_08 (~Thunderbi@user/mik3-08/x-2852566) (Quit: mIk3_08)
[14:54:49] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Ping timeout: 252 seconds)
[14:55:31] <supakeen> Ah encoding details let's go.
[14:55:46] <supakeen> UTF-8 actually 'caps' it at 4 bytes max: https://www.rfc-editor.org/rfc/rfc3629#section-3
[14:55:56] <supakeen> Going beyond that would make it not-UTF-8 :)
[14:56:49] <dngray> so hexnewbie, where did you learn all this?
[14:56:59] <dngray> have you just had a lot of experience with this?
[14:57:52] <hexnewbie> This is not UTF-8 either: 'уникод'.encode('koi8-r').decode('utf8', 'surrogateescape').encode('utf8', 'surrogatepass')
[14:58:17] *** Joins: nyah (~nyah@bcdcb6e3.skybroadband.com)
[14:59:19] <hexnewbie> dngray: The joy of working with Python 2 with 16 bit (UCS-2) builds cutting your unicode characters in half, and KVirc also allowing you to delete half of an emoji when you enter one 😃
[15:00:02] <dngray> i vaguely remember KVirc
[15:00:36] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[15:00:46] <dngray> okay, so i am still trying to process your code in my brain
[15:01:02] *** Joins: fassl (~fassl@2a02:8388:1987:9380:c4ee:81c5:625a:a215)
[15:01:14] *** Joins: brelod (~me@90.244.150.142)
[15:01:20] <dngray> https://clbin.com/l2D9T it really does indeed work..... could i trouble you for a few comments
[15:01:26] <dngray> to explain it out
[15:01:29] <hexnewbie> The ‘advantage’ of the surrogate encoding used in UTF-16 is that any earlier systems made to use UCS-2 will accept the extra characters and pass them along, only mistaking the SMP characters for two characters instead of one. The side-effect is that there is still software that thinks ‘😃’ is two characters, even allows you to take the first half or second half of it
[15:02:02] *** Quits: Jefren1 (~Jefren@70.35.66.216) (Ping timeout: 260 seconds)
[15:02:25] <dngray> well i guess i'm lucky, that this parser has very controlled input
[15:02:50] <hexnewbie> dngray: There is an issue with the code, let me provide a fixed version
[15:02:52] *** Joins: reset (~reset@user/reset)
[15:02:58] <dngray> oh cool :)
[15:03:07] <dngray> btw, there's someone here helping me, so they'd love to see the comments too
[15:03:47] *** Joins: Jefren1 (~Jefren@70.35.67.111)
[15:04:15] <dngray> once i got the parser working for silence xml backups i do plan to open source it :)
[15:05:52] <hexnewbie> dngray: https://bpa.st/2KZQ the changed regex is the only change (the second / low surrogate is between 56320 and 57343, so has [67] as second digit)
[15:06:21] <hexnewbie> I also don't think html.escape() will ever do anything with any of those characters
[15:06:39] *** Joins: pr100 (~pr100@cpc92728-cmbg20-2-0-cust160.5-4.cable.virginm.net)
[15:07:20] *** Joins: ZolVas (~ZolVas@2a00:1370:8115:9cd9:3956:54f9:6d96:74a6)
[15:07:47] *** Quits: pankid (~quassel@pankid.club) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[15:08:44] *** Joins: pankid (~quassel@pankid.club)
[15:08:49] *** Quits: pankid (~quassel@pankid.club) (Client Quit)
[15:09:17] *** Joins: pankid (~quassel@pankid.club)
[15:09:26] <dngray> right.
[15:09:51] <dngray> any chance you could throw in some descriptive comments to explain what is going on
[15:09:59] <dngray> because i'm having a hard trouble explaining it to my friend haha
[15:10:22] <dngray> (put your name in the top, cos i'll give you credit for that masterpiece)
[15:10:43] *** Quits: pankid (~quassel@pankid.club) (Client Quit)
[15:11:01] *** Joins: pankid (~quassel@pankid.club)
[15:11:47] <dngray> it'll end up going into a python script that will be useful for anyone wanting to migrate away from this old unmaintained app https://git.silence.dev/Silence/Silence-Android/
[15:18:39] *** Quits: YuGiOhJCJ (~YuGiOhJCJ@gateway/tor-sasl/yugiohjcj) (Quit: YuGiOhJCJ)
[15:18:55] *** Joins: Midjak (~Midjak@82-65-111-221.subs.proxad.net)
[15:20:03] *** Joins: zln (~zln@c80-217-230-193.bredband.tele2.se)
[15:20:46] <hexnewbie> dngray: https://bpa.st/XGZQ
[15:21:02] <dngray> nice :D
[15:21:52] <dngray> hexnewbie: i would give you a bears
[15:21:55] <dngray> beers
[15:22:04] <dngray> everyone knows i like bears.....
[15:22:28] *** Joins: jetchisel (jetchisel@user/jetchisel)
[15:26:35] *** Joins: cusco (~tralala@neptune.tretas.eu)
[15:26:37] <cusco> hello
[15:27:14] <p-i-> Suppose I have foo=Foo(). Can I override so that I can do `if not foo:...` i.e. I have some Foo instance, and i wish it to report as False when treated as a bool.
[15:27:42] <han-solo> implement `__bool__`
[15:27:52] <p-i-> Thanks
[15:28:00] <hexnewbie> dngray: If the abuse of Python's surrogatepass error handler is confusing, you can turn the surrogates into UTF-16-BE bytes data by hand, too: https://bpa.st/M74Q
[15:28:08] <cusco> I'm trying to understand if this is an acceptable way of having a class with default parameters, or what should be the correct approach... https://paste.debian.net/1214921/
[15:29:16] *** Quits: cthulchu (~Cthulchu@193.194.107.250) (Ping timeout: 245 seconds)
[15:30:34] <ChrisWarrick> cusco: I’d do it like this: https://paste.debian.net/1214924/
[15:30:48] *** Quits: djhankb (~djhankb@208.113.164.68) (Read error: Connection reset by peer)
[15:31:23] *** Joins: djhankb (~djhankb@208.113.164.68)
[15:31:51] <hexnewbie> cusco: Be mindful that with your approach, the default for dt_start stays the same time through the entirety of the execution of the program. If you run the program at 02:00 AM, it will stay 02:00 AM at 16:00 PM
[15:31:57] <paul424> https://nedbatchelder.com/blog/tag/python.html any entries worth reading liek the one on names and values ? pity there is no "the most popular" entries search
[15:32:09] <hexnewbie> cusco: ChrisWarrick's approach will ensure the default is always the current time, as the current time changes
[15:32:19] <cusco> hexnewbie: that is my current issue precisely
[15:32:40] *** Joins: Naan (~naan@user/naan)
[15:32:46] <cusco> so I set the default date in the init as well
[15:32:56] <cusco> thank you ChrisWarrick, hexnewbie
[15:33:16] *** Joins: csm3105 (~csm3105@static-26-27-230-77.ipcom.comunitel.net)
[15:33:20] *** Quits: csm3105 (~csm3105@static-26-27-230-77.ipcom.comunitel.net) (Read error: Connection reset by peer)
[15:33:22] *** Joins: foobaz212 (~foobaz212@213.205.198.77)
[15:33:24] *** Quits: ZolVas (~ZolVas@2a00:1370:8115:9cd9:3956:54f9:6d96:74a6) (Ping timeout: 256 seconds)
[15:33:25] *** Quits: promey_ (~Promeys@gateway/tor-sasl/promey) (Remote host closed the connection)
[15:33:55] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[15:33:57] <nedbat> paul424: that would be cool to add a "popular" thing
[15:34:03] *** Quits: mickey8 (~user@user/mickey) (Quit: Ping timeout (120 seconds))
[15:34:25] *** Quits: Mikaela (~sid12355@Feneas/Mikaela) (Remote host closed the connection)
[15:34:45] *** Joins: Mikaela (~sid12355@Feneas/Mikaela)
[15:34:48] *** Joins: mickey8 (~user@user/mickey)
[15:34:54] *** Joins: xiongxin (~quassel@113.116.34.120)
[15:34:54] *** Joins: Hawker (~Hawker@drmons0544w-47-55-147-54.dhcp-dynamic.fibreop.ns.bellaliant.net)
[15:35:18] <dngray> hexnewbie: heh.
[15:36:02] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.3)
[15:36:30] *** Joins: supakeen (~user@python/site-packages/supakeen)
[15:36:30] *** Joins: stockholm (~Andreas@p200300d2c73e67001c7b7fd85c8439e7.dip0.t-ipconnect.de)
[15:37:43] *** Quits: thrillgore (~ZugZug@69-225-55-100.lightspeed.nsvltn.sbcglobal.net) (Ping timeout: 252 seconds)
[15:40:08] *** Quits: chenqisu12 (~xirndc@183.217.201.186) (Quit: Leaving)
[15:41:20] <dngray> hexnewbie: which implementation would you recommend i include
[15:41:28] *** Quits: rindolf (~shlomif@2a0d:6fc2:4bb1:500:6b1e:2524:3d70:36ec) (Read error: Connection reset by peer)
[15:41:46] <dngray> obviously i'm trying to document it as best as i can so, that when anyone else comes across it they will be able to figure out what the hell is going on lol
[15:41:53] *** Quits: xiongxin (~quassel@113.116.34.120) (Read error: Connection reset by peer)
[15:42:44] <hexnewbie> dngray: I'm not sure, I'd probably just go for constructing the bytes() directly, as the Unicode str with surrogates in it is technically invalid bugs me, and I feel 'surrogatepass' exists for other purposes
[15:42:49] *** Joins: xiongxin (~quassel@119.123.101.136)
[15:43:12] <dngray> right.
[15:43:25] <dngray> and verbosity is probably better, if others want to understand it
[15:43:28] <hexnewbie> On the other hand, it's always nice to do the conversion with language features, instead of ordering the bytes yourself.
[15:43:55] <dngray> yeah that is a good point
[15:44:10] <dngray> though is it one of those things that might rot in time i wonder
[15:45:47] *** Quits: rememberYou (~someone@user/rememberyou) (Remote host closed the connection)
[15:55:15] *** Joins: Diemuzi (~Diemuzi@ip68-106-203-17.pn.at.cox.net)
[15:56:35] *** Joins: slowButPresent (~slowButPr@user/slowbutpresent)
[15:59:28] *** Joins: rindolf (~shlomif@2a0d:6fc2:4bb1:500:6b1e:2524:3d70:36ec)
[16:00:39] *** Joins: GreenResponse (~tomek@r-45-155-148-237.gpon.bialnet.pl)
[16:01:19] *** Joins: velix (~velix@user/velix)
[16:02:00] *** Quits: tobybl (~tobybl@38.247.200.146.dyn.plus.net) (Remote host closed the connection)
[16:02:39] <velix> I want to install the latest 3.2.2 version of pygdal using pip. Is there a switch for this or do I need to parse it on my own? `pip install pygdal=3.2.2` give lots of options from 3.2.2.6 to 3.2.2.10
[16:03:50] *** Joins: dgdg (~dg_dg@191.101.31.44)
[16:05:10] <velix> Maybe pygdal>=3.2.2,<3.3 ?
[16:06:19] *** Quits: dg_dg (~dg_dg@191.101.31.48) (Ping timeout: 252 seconds)
[16:06:48] <velix> ah, pygdal==3.2.2.*
[16:06:50] <velix> thanks
[16:13:26] *** Joins: xrogaan (~xrogaan@user/xrogaan)
[16:18:41] *** Joins: thrillgore (~ZugZug@69-225-55-100.lightspeed.nsvltn.sbcglobal.net)
[16:22:08] *** Joins: wolfdale7 (~wolfdale@ec2-3-1-90-26.ap-southeast-1.compute.amazonaws.com)
[16:23:42] *** Quits: wolfdale (~wolfdale@ec2-3-1-90-26.ap-southeast-1.compute.amazonaws.com) (Ping timeout: 260 seconds)
[16:23:42] *** wolfdale7 is now known as wolfdale
[16:25:03] *** Joins: promey (~Promeys@gateway/tor-sasl/promey)
[16:25:26] *** Joins: botanic (~botanic@206-124-18-54.static.forethought.net)
[16:26:46] <Yhg1s> velix: https://www.python.org/dev/peps/pep-0440/#compatible-release
[16:26:58] *** Quits: stockholm (~Andreas@p200300d2c73e67001c7b7fd85c8439e7.dip0.t-ipconnect.de) (Ping timeout: 260 seconds)
[16:27:13] *** Quits: y1n (~y1n@178.115.46.148.wireless.dyn.drei.com) (Ping timeout: 252 seconds)
[16:27:20] <velix> Yhg1s: Thanks
[16:29:03] *** Joins: SteveR (~SteveR@103.215.168.1)
[16:30:41] *** Quits: djhankb (~djhankb@208.113.164.68) (Read error: Connection reset by peer)
[16:30:49] *** Joins: stockholm (~Andreas@p200300d2c73e67001c7b7fd85c8439e7.dip0.t-ipconnect.de)
[16:32:34] *** Quits: herjazz (~herjazz@p6758124-ipngn30801marunouchi.tokyo.ocn.ne.jp) (Quit: leaving)
[16:34:25] *** Quits: elkclone (~elkclone@user/elkclone) (Ping timeout: 252 seconds)
[16:34:54] *** Quits: akaWolf (~akaWolf@akawolf.org) (Ping timeout: 260 seconds)
[16:35:08] *** Joins: elkclone (~elkclone@user/elkclone)
[16:35:50] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 260 seconds)
[16:36:17] *** Quits: tsujp (~tsujp@sourcehut/user/tsujp) (Ping timeout: 256 seconds)
[16:37:30] *** Joins: fikran (~fikran@user/fikran)
[16:38:51] *** Joins: tobybl (~tobybl@38.247.200.146.dyn.plus.net)
[16:41:09] *** Joins: y1n (~y1n@178.115.41.5.wireless.dyn.drei.com)
[16:44:49] *** Joins: water_27300935_ (~xe@182.90.96.72)
[16:45:24] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.3)
[16:51:14] *** Joins: redrum88 (~redrum88@user/redrum88)
[16:51:36] *** Joins: zebrag (~chris@user/zebrag)
[16:55:25] *** Joins: fweht (uid404746@id-404746.lymington.irccloud.com)
[16:57:24] *** Joins: mort (~mort@188.166.114.29)
[16:57:41] <mort> so, I don't get why 'pip install' brings up a kwallet window
[16:58:03] <mort> especially since it seems to do exactly what I want it to do if I just close the window?
[16:58:34] <mort> when I run pip without sudo, I do that because I *want* it to be local to my user, so I don't understand what KDE Wallet even wants me to do
[16:59:17] <The-Compiler> mort: see https://github.com/pypa/pip/issues/8090
[16:59:45] <mort> oh, and I'm also on GNOME so KDE Wallet seems like the wrong thing altogether
[16:59:55] *** Quits: SteveR (~SteveR@103.215.168.1) (Quit: Client closed)
[17:00:08] *** Joins: xavie (~xavie@atoulouse-659-1-133-52.w92-146.abo.wanadoo.fr)
[17:00:11] <The-Compiler> mort: also see https://github.com/pypa/pip/issues/8719 and the issues linked from there
[17:00:42] *** Joins: node1 (~node1@user/node1)
[17:00:52] <hexnewbie> Oh, yeah, since I use twine to publish it pypi it bring a GNOME keyring window to me, and since I've never used keyring - I use kwallet - (nor know what the heck its password would be), I can only cancel it. Though I don't think pip pops those up, only twine.
[17:01:16] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[17:02:38] <The-Compiler> hexnewbie: might want to configure keyring to use kwallet then, see https://pypi.org/project/keyring/
[17:02:47] <mort> that's a very weird bug
[17:02:57] <mort> but what's even the point? What does it need to store passwords for?
[17:03:08] <hexnewbie> The-Compiler: Thanks
[17:04:39] *** Quits: crabbedhaloablut (~crabbedha@user/crabbedhaloablut) (Remote host closed the connection)
[17:04:58] *** Joins: crabbedhaloablut (~crabbedha@user/crabbedhaloablut)
[17:05:14] <The-Compiler> mort: things like credentials for private indexes
[17:05:40] <mort> and it does that regardless of whether you ever use private indexes, and it uses the KDE wallet even on GNOME? That's weird
[17:05:46] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Ping timeout: 252 seconds)
[17:06:03] *** Joins: tuck (~lightstor@user/tuck)
[17:06:55] <The-Compiler> mort: it did, until that bug was fixed
[17:09:27] *** Quits: node1 (~node1@user/node1) (Quit: Leaving)
[17:09:31] *** Joins: akaWolf (~akaWolf@akawolf.org)
[17:10:39] *** Joins: mefistofeles (~mefistofe@user/mefistofeles)
[17:14:05] *** Quits: stockholm (~Andreas@p200300d2c73e67001c7b7fd85c8439e7.dip0.t-ipconnect.de) (Remote host closed the connection)
[17:14:17] *** Joins: stockholm (~Andreas@p200300d2c73e67001c7b7fd85c8439e7.dip0.t-ipconnect.de)
[17:25:54] *** Joins: bluesmonk (uid318026@id-318026.helmsley.irccloud.com)
[17:27:59] *** Quits: gitesh (uid423739@ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[17:28:36] *** Quits: vodkra (~vodkra@user/vodkra) (Remote host closed the connection)
[17:30:28] *** Joins: arinov (~arinov@213.194.126.155)
[17:30:57] *** Joins: djhankb (~djhankb@208.113.164.68)
[17:31:41] *** Joins: Vornicus (~Vornicus@2603-8000-5d07-7ef0-dc27-4892-0c33-30f4.res6.spectrum.com)
[17:32:29] *** Joins: metaace_ (~metaace@user/metaace)
[17:32:30] *** Quits: tobybl (~tobybl@38.247.200.146.dyn.plus.net) (Remote host closed the connection)
[17:33:09] *** Quits: Naan (~naan@user/naan) (Read error: Connection reset by peer)
[17:33:39] *** Quits: dngray (~unknown@user/dngray) (Ping timeout: 276 seconds)
[17:34:18] *** Quits: metaace (~metaace@user/metaace) (Ping timeout: 276 seconds)
[17:35:26] *** Joins: dngray (~unknown@user/dngray)
[17:38:43] *** Quits: paul424 (~tom@apn-37-249-81-20.dynamic.gprs.plus.pl) (Remote host closed the connection)
[17:38:50] *** Quits: barzo (~barzo@31.177.222.75) (Quit: Quit)
[17:39:05] *** Quits: domhnall (~developer@user/domhnall/x-2887755) (Ping timeout: 260 seconds)
[17:39:17] *** Joins: pycurious (~Adium@user/pycurious)
[17:40:46] *** Joins: audiocat (~audio@cpe-24-27-99-134.tx.res.rr.com)
[17:43:24] *** Quits: dngray (~unknown@user/dngray) (Ping timeout: 276 seconds)
[17:44:37] *** Joins: dngray (~unknown@user/dngray)
[17:45:08] *** Joins: mei6 (~mei@user/mei)
[17:45:53] *** Quits: mei6 (~mei@user/mei) (Client Quit)
[17:46:32] *** Joins: vodkra (~vodkra@user/vodkra)
[17:47:01] *** Quits: ATAD (~ATAD@user/atad) (Ping timeout: 252 seconds)
[17:49:29] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[17:49:39] *** Joins: nomic (~nomic@185.192.69.208)
[17:50:34] *** Joins: ATAD (~ATAD@user/atad)
[17:53:17] *** Joins: fedenix_ (~fedenix@gateway/tor-sasl/fedenix)
[17:53:26] *** Quits: fedenix (~fedenix@gateway/tor-sasl/fedenix) (Remote host closed the connection)
[17:53:31] *** Quits: bn_work (uid268505@uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[17:56:02] *** Joins: Lando-SpacePimp (~Lando-Spa@user/lando-spacepimp)
[17:56:11] *** Parts: water_27300935_ (~xe@182.90.96.72) (WeeChat 3.3)
[17:56:52] *** Quits: beterraba (~beterraba@86.107.21.205) (Ping timeout: 252 seconds)
[17:57:14] *** Joins: imakestuff (~imakestuf@197.156.86.134)
[17:57:24] *** Joins: tsujp (~tsujp@sourcehut/user/tsujp)
[17:58:31] *** Joins: dalan62367 (~dalan@59-102-54-91.tpgi.com.au)
[17:59:09] *** Joins: greknod28 (~grek@120.88.171.98)
[18:00:10] *** Quits: dalan6236 (~dalan@59-102-54-91.tpgi.com.au) (Ping timeout: 252 seconds)
[18:00:10] *** dalan62367 is now known as dalan6236
[18:01:17] *** Quits: greknod2 (~grek@120.88.171.98) (Ping timeout: 264 seconds)
[18:01:17] *** greknod28 is now known as greknod2
[18:01:25] *** Joins: fr_sleepy (~fr_sleepy@209.94.138.128)
[18:03:54] *** Joins: mat001 (~mat001@213.143.69.121)
[18:04:38] <dngray> hexnewbie: this link kind of explains it well too https://dev.to/nikkimk/converting-utf-including-emoji-to-html-x1f92f-4951
[18:04:47] <dngray> in this case t hey were trying to make surrogate pairs
[18:04:48] <rendar> can i launch a coroutine without awaiting it, and without creating a new asyncio.Task?
[18:05:03] <dngray> i also found this http://www.russellcottrell.com/greek/utilities/SurrogatePairCalculator.htm
[18:07:25] <pycurious> I'm trying to make a class that I import a singleton using this code -? https://dpaste.org/274o.- any suggestions on how to do this? I could use inheritance - but perhaps there is a better method?
[18:08:41] *** Quits: lethu (~lethu@user/lethu) (Remote host closed the connection)
[18:08:54] <pycurious> Y = singleton(Y) - i guess this works after import?
[18:09:18] *** Joins: oriba (~oriba@dynamic-089-012-110-065.89.12.pool.telefonica.de)
[18:09:18] <pycurious> yup that works.
[18:10:16] <hexnewbie> pycurious: Class decorators are applied with @singleton before the class. But wouldn't it be better to just create a single instance of the class, or to add a class method that caches the instance, without forbidding instantiation altogether?
[18:11:40] *** Quits: pycurious (~Adium@user/pycurious) (Quit: Leaving.)
[18:11:56] *** Joins: pycurious (~Adium@user/pycurious)
[18:14:29] *** Quits: leduyquang753 (~leduyquan@user/leduyquang753) (Quit: Gotta go, see you guys later.)
[18:15:42] *** Quits: sticheln (~atsbomb@116.88.220.71) (Ping timeout: 260 seconds)
[18:16:38] *** Quits: pycurious (~Adium@user/pycurious) (Ping timeout: 260 seconds)
[18:16:55] *** Parts: noocsharp (~noocsharp@nihaljere.xyz) ()
[18:16:56] *** Joins: pycurious (~Adium@user/pycurious)
[18:17:55] <han-solo> pycurious: https://glyph.twistedmatrix.com/2007/07/functional-functions-and-python.html
[18:19:52] *** Joins: LiftLeft (~LiftLeft@191.96.185.96)
[18:20:43] *** Joins: p-i-_ (~Ohmu@mx-ll-223.206.71-4.dynamic.3bb.co.th)
[18:21:11] *** Joins: sedeki (~textual@user/sedeki)
[18:21:37] *** Quits: pycurious (~Adium@user/pycurious) (Ping timeout: 252 seconds)
[18:23:26] *** Quits: p-i- (~Ohmu@mx-ll-223.206.71-4.dynamic.3bb.co.th) (Ping timeout: 245 seconds)
[18:24:29] *** Joins: FluffyMask (~masque@user/fluffymask)
[18:24:30] *** Joins: pycurious (~Adium@user/pycurious)
[18:25:31] *** Quits: l4yer (~l4yer@159.48.55.9) (Ping timeout: 252 seconds)
[18:26:34] *** Quits: foobaz212 (~foobaz212@213.205.198.77) (Quit: Client closed)
[18:28:46] *** Quits: pycurious (~Adium@user/pycurious) (Ping timeout: 260 seconds)
[18:30:56] *** Quits: thurs8060 (~thurs@ip68-225-209-147.ph.ph.cox.net) (Quit: The Lounge - https://thelounge.chat)
[18:31:00] *** Quits: djhankb (~djhankb@208.113.164.68) (Read error: Connection reset by peer)
[18:31:33] *** Joins: djhankb (~djhankb@208.113.164.68)
[18:32:29] *** Joins: thurs8060 (~thurs@ip68-225-209-147.ph.ph.cox.net)
[18:32:48] *** Joins: daoudr_ (~daoudr@91.90.122.14)
[18:35:18] *** Quits: daoudr__ (~daoudr@2a02:1205:c681:1650:2213:cc7f:a040:3a92) (Ping timeout: 250 seconds)
[18:36:32] *** Joins: RangerBobVA (~bmaddox@user/rangerbobva)
[18:36:58] *** Quits: theprophet (~theprophe@85.114.228.184) (Quit: Client closed)
[18:38:22] <hexnewbie> The only reason I've come to use singletons is that, given the example by glyph, in my case I would 8 different classes such as this publisher, so had to consider whether to add 8 arguments for all of them to all functions or create a class Globals() to carry them around. I did the former when they were 3, and moved to singletons when they became 8-10.
[18:38:57] *** Joins: l4yer (~l4yer@159.48.55.8)
[18:40:35] *** Quits: ledtc (~ledtc@c-f8aa70d5.014-57-6c756e3.bbcust.telenor.se) (Quit: Client closed)
[18:42:34] *** Quits: mat001 (~mat001@213.143.69.121) (Ping timeout: 252 seconds)
[18:43:40] *** Joins: mat001 (~mat001@213.143.69.121)
[18:43:47] *** Joins: pycurious (~Adium@user/pycurious)
[18:43:56] *** Joins: gitesh (uid423739@id-423739.ilkley.irccloud.com)
[18:44:43] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 252 seconds)
[18:44:55] *** Joins: Lando-HoloNet (~Lando-Spa@user/lando-spacepimp)
[18:46:19] *** Quits: Lando-SpacePimp (~Lando-Spa@user/lando-spacepimp) (Killed (NickServ (GHOST command used by Lando-HoloNet)))
[18:46:27] *** Lando-HoloNet is now known as Lando-SpacePimp
[18:46:51] *** Joins: fikran (~fikran@user/fikran)
[18:47:53] *** Joins: yaalon (~yaalon@2600:1700:9450:2d30:2827:b894:4602:8503)
[18:48:01] *** Quits: pycurious (~Adium@user/pycurious) (Ping timeout: 252 seconds)
[18:48:17] *** Quits: iflema (~ian@user/iflema) (Quit: iflema)
[18:48:25] *** Joins: ZolVas (~ZolVas@2a00:1370:8115:9cd9:3956:54f9:6d96:74a6)
[18:50:03] *** Joins: pyfisch0 (~pyfisch@user/pyfisch)
[18:50:21] *** Joins: daoudr__ (~daoudr@2a02:1205:c681:1650:2213:cc7f:a040:3a92)
[18:51:51] <stockholm> are there examples for organizing a whole set of sympy equations in order to make them solveable?
[18:51:55] *** Quits: pyfisch (~pyfisch@user/pyfisch) (Ping timeout: 265 seconds)
[18:51:55] *** pyfisch0 is now known as pyfisch
[18:52:15] <stockholm> (is there a dedicated sympy channel somewhere?)
[18:52:53] *** Quits: daoudr_ (~daoudr@91.90.122.14) (Ping timeout: 265 seconds)
[18:53:39] <sedeki> they should have a website, no?
[18:54:03] <sedeki> at the very least, stackoverflow could help you. if you don't find anything else
[18:54:06] *** Joins: sandbox (~Spawns_Ca@user/spawns-carpeting/x-6969421)
[18:54:19] *** sandbox is now known as Spawns_Carpeting
[18:55:53] *** Quits: RangerBobVA (~bmaddox@user/rangerbobva) (Quit: Leaving)
[18:56:05] *** Quits: rsx (~dummy@ppp-188-174-142-5.dynamic.mnet-online.de) (Quit: rsx)
[18:57:27] *** Joins: litchi (~litchi@user/litchi)
[19:00:17] *** litchi is now known as litchi_
[19:00:35] *** litchi_ is now known as litchi01
[19:01:09] *** Quits: litchi01 (~litchi@user/litchi) (Quit: Client closed)
[19:01:56] <gitesh> raising an exception means what?
[19:02:45] *** Quits: xiongxin (~quassel@119.123.101.136) (Quit: No Ping reply in 180 seconds.)
[19:03:05] <bjs> gitesh: have you read the part of the tutorial on errors and exceptions https://docs.python.org/3/tutorial/errors.html
[19:03:53] *** Joins: el1 (~el@240e:390:662d:c990:99cf:ed65:8ec2:77fd)
[19:04:01] *** Joins: xiongxin (~quassel@113.116.34.120)
[19:07:44] *** Joins: litchi (~litchi01m@user/litchi)
[19:12:36] *** Quits: nomic (~nomic@185.192.69.208) (Quit: Leaving)
[19:12:55] <gitesh> bjs: i just read it somewhat
[19:13:26] *** Quits: TranquilEcho (~grom@user/tranquilecho) (Ping timeout: 245 seconds)
[19:14:48] *** Joins: TranquilEcho (~grom@user/tranquilecho)
[19:14:49] *** Joins: Kim^J (~hagbard@ec2-13-51-167-164.eu-north-1.compute.amazonaws.com)
[19:15:15] <gitesh> bjs: if while executing the code in try: block some problem happened like run time exception occurred then we can handle it in except block to graceful run the program
[19:15:24] <gitesh> bjs: https://docs.djangoproject.com/en/3.2/intro/tutorial03/#raising-a-404-error
[19:15:56] <gitesh> bjs: how is question is bound to Http404 if an exception occurs?
[19:17:18] <Kim^J> I get passed a function from some source, I know it takes one parameter, passing that works fine. Now I want to optionally pass a second parameter, but not all functions I get passed supports a second parameter. How can I check if the function supports 2 or more parameters? (I've found inspect.Signature, not sure if that's the right way though)
[19:19:26] <Kim^J> https://bpa.st/XCTQ
[19:19:41] <Kim^J> I want func to be able to support both functions a and b
[19:20:06] *** Quits: jtanner (sid194399@helmsley.irccloud.com) (Ping timeout: 245 seconds)
[19:20:06] *** Quits: Freso (sid7914@libera/staff/metabrainz.user.Freso) (Ping timeout: 245 seconds)
[19:20:06] *** Quits: Venhal (sid515085@uxbridge.irccloud.com) (Ping timeout: 245 seconds)
[19:20:06] *** Quits: WhyNotHugo (sid269118@hampstead.irccloud.com) (Ping timeout: 245 seconds)
[19:20:26] *** Quits: cmagina (sid286142@user/cmagina) (Ping timeout: 265 seconds)
[19:20:31] *** Quits: nicksloan (sid195124@user/nicksloan) (Ping timeout: 252 seconds)
[19:20:55] *** Quits: LyndsySimon (sid34452@lymington.irccloud.com) (Ping timeout: 265 seconds)
[19:20:55] *** Quits: raydeeam (uid325131@dgplug/raydeeam) (Ping timeout: 265 seconds)
[19:21:02] <nedbat> Kim^J: is it an option to change the functions?
[19:21:13] *** Joins: raydeeam (uid325131@dgplug/raydeeam)
[19:21:15] *** Joins: Venhal (sid515085@id-515085.uxbridge.irccloud.com)
[19:21:15] *** Joins: nicksloan (sid195124@user/nicksloan)
[19:21:18] *** Joins: Freso (sid7914@libera/staff/metabrainz.user.Freso)
[19:21:29] *** Joins: LyndsySimon (sid34452@id-34452.lymington.irccloud.com)
[19:21:30] *** Joins: dngray[m] (~dngray@user/dngray)
[19:21:31] *** Joins: cmagina (sid286142@user/cmagina)
[19:21:36] <Kim^J> nedbat: Well, yes
[19:21:40] *** Joins: WhyNotHugo (sid269118@id-269118.hampstead.irccloud.com)
[19:21:43] <Kim^J> But I'd prefer not to xD
[19:21:50] *** Quits: mickey8 (~user@user/mickey) (Quit: Ping timeout (120 seconds))
[19:22:01] <Kim^J> I mean, I can likely solve it with inspect, just not sure if that's the "right" way
[19:22:11] <nedbat> Kim^J: that is the right way
[19:22:17] *** Joins: mickey8 (~user@user/mickey)
[19:22:17] <lambda> Kim^J: what are these functions? why do they need to be called with the "same" arguments, but have different arity?
[19:23:18] *** Joins: jtanner (sid194399@id-194399.helmsley.irccloud.com)
[19:23:20] <Kim^J> lambda: I'm making a migration script for Netbox, most of the time I just need the source item, but now I have a case where I need the pynetbox instance to be able to call another API endpoint to fetch some additional data
[19:23:39] <bjs> gitesh: in that code Http404 is the name of an exception
[19:23:43] <sedeki> gitesh i've worked with django. what is your question?
[19:23:55] <bjs> gitesh: like ZeroDivsionError or FileNotfound or what
[19:24:29] <lambda> Kim^J: alright that all sounds fairly annoying, just use inspect :p
[19:24:32] <Kim^J> lambda: https://bpa.st/CMQA
[19:24:41] *** Quits: TingPing (sid2800@helmsley.irccloud.com) (Ping timeout: 245 seconds)
[19:24:59] <Kim^J> lambda: So, I have hundreds of those lambdas, with just x, that works fine
[19:25:04] <gitesh> sedeki: my question what will happen when question is not found in the database?
[19:25:08] <gitesh> bjs: ok
[19:25:09] <Kim^J> Now I've hit an edge case where I also need nb
[19:25:14] *** Joins: TingPing (sid2800@id-2800.helmsley.irccloud.com)
[19:25:35] *** Joins: upsala (~zcb@185.213.155.232)
[19:25:56] <sedeki> gitesh depends on how you make your query
[19:26:07] *** Quits: dngray (~unknown@user/dngray) (Remote host closed the connection)
[19:26:08] <sedeki> e.g. by using `Question.objects.get` it will raise an exception
[19:26:56] <gitesh> sedeki: what is the point in raising Http404 instead of because question not found
[19:27:56] <sedeki> because by raising Http404 you will showing your nice 404 page instead. the `ObjectNotFound` (i forgot the exact name) is an unknown exception to the web part of the Django framework.
[19:28:20] *** Joins: nomic (~nomic@2a00:23c6:9902:2401:d128:ccbf:510a:f8d)
[19:29:02] *** Quits: astroid99 (~cto-offic@134.148.95.68) (Read error: Connection reset by peer)
[19:29:38] <ZolVas> Python 3.10. Regex. If regex in find-part has groups in paranthesis, e.g. "([A-Z])([a-z])", the replace-part is "$2" is supposed to work in Python, isn't it..? (i.e. saving obly the second part only, deleting the first part - the capital letter)
[19:29:50] *** Quits: tsujp (~tsujp@sourcehut/user/tsujp) (Quit: Client closed)
[19:30:30] *** Quits: gr33n7007h (~gr33n7007@user/gr33n7007h) (Quit: WeeChat 3.3)
[19:30:53] <gitesh> sedeki: does Http404 return from function
[19:31:01] *** Quits: djhankb (~djhankb@208.113.164.68) (Read error: Connection reset by peer)
[19:31:08] <sedeki> no, it is an exception
[19:31:33] *** Joins: djhankb (~djhankb@208.113.164.68)
[19:31:41] <gitesh> sedeki: how is nice 404 page is shown?
[19:31:59] <gitesh> sedeki: because it is not bound to question variable
[19:32:37] <sedeki> it is a generic 404 page w/o context. you're supposed to set it up yourself in production, but you'll get a Django 404 error otherwise
[19:32:38] *** Joins: bitdex_ (~bitdex@gateway/tor-sasl/bitdex)
[19:32:56] <gitesh> Okay sedeki thanks
[19:33:01] <sedeki> np
[19:33:50] *** Quits: xiongxin (~quassel@113.116.34.120) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[19:34:33] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Ping timeout: 276 seconds)
[19:36:21] *** Quits: jeho (~jehoshaph@user/jehoshaphat) (Ping timeout: 245 seconds)
[19:36:37] *** Joins: pycurious (~Adium@user/pycurious)
[19:37:29] *** Quits: Hanii (~textual@2a00:23c5:c587:6d00:2861:83e:d34a:845a) (Quit: Textual IRC Client: www.textualapp.com)
[19:38:40] *** Quits: nomic (~nomic@2a00:23c6:9902:2401:d128:ccbf:510a:f8d) (Quit: Leaving)
[19:38:44] *** Quits: bitdex_ (~bitdex@gateway/tor-sasl/bitdex) (Quit: = "")
[19:39:05] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[19:39:11] <rakoon> Is there a way to prevent pytest capturing an already "catched" exception from logging it? My use case is in a setup fixture i expect an error to happen that I catch it and I dont want pytest to print it in the "capture logging" part when tests finish(it prints though it only if a test fails)
[19:40:56] *** Quits: pycurious (~Adium@user/pycurious) (Ping timeout: 245 seconds)
[19:42:29] *** Joins: hnOsmium0001 (uid453710@id-453710.hampstead.irccloud.com)
[19:43:15] *** Joins: akk (~akk@75.161.146.115)
[19:45:43] *** Leonarbro__ is now known as Leonarbro
[19:46:02] *** Quits: magla (~gelignite@55d486d7.access.ecotel.net) (Quit: Stay safe!)
[19:46:30] <rakoon> Wow i just found a solution! That fixture was "parent" of another fixture that was excplicitly used in the tests. Using the parent fixture as "standalone" with auto_use=True, then i sort of decouple it from a test so the exception i assume happens before a testcase and pytest didnt print it, awesome :D
[19:47:44] *** Quits: fassl (~fassl@2a02:8388:1987:9380:c4ee:81c5:625a:a215) (Quit: Leaving)
[19:49:20] *** Quits: sus (zero@user/zeromomentum) (Quit: the lounge - https://webirc.envs.net)
[19:49:52] *** Joins: sus (zero@user/zeromomentum)
[19:49:58] *** Quits: zepolen (~zepolen@2a02:587:860a:4682:766b:ec4f:5c57:b188) (Ping timeout: 260 seconds)
[19:51:51] *** Quits: sedeki (~textual@user/sedeki) (Quit: Textual IRC Client: www.textualapp.com)
[19:54:08] *** Joins: RabidToaster (~Thunderbi@bras-base-otwaon234vw-grc-25-65-93-17-96.dsl.bell.ca)
[19:57:09] *** Joins: justsomeguy (~justsomeg@user/justsomeguy)
[19:58:47] *** Joins: blackout69 (~blackout6@net-37-179-183-91.cust.vodafonedsl.it)
[19:59:06] *** Quits: arinov (~arinov@213.194.126.155) (Ping timeout: 265 seconds)
[20:00:33] *** Quits: han-solo (~hanish@user/han-solo) (Ping timeout: 265 seconds)
[20:01:50] *** Quits: imakestuff (~imakestuf@197.156.86.134) (Remote host closed the connection)
[20:02:37] *** Joins: ElPresidenteP (~ElPreside@2605:a601:55be:bb00:b4ee:8306:9589:1945)
[20:03:00] *** Quits: bomb-on (~bomb-on@194.144.47.113) (Quit: aллилѹіа!)
[20:05:00] <nedbat> ZolVas: the replacement isn't $2, it's \2
[20:06:17] *** Joins: Narrat (~omnius@p200300df5f0d8e5306ea56fffe2e7cdc.dip0.t-ipconnect.de)
[20:07:03] <jmiehe> any pydantic fans here? how do I get the actual model from a "pre" root_validator? https://bpa.st/DSUA I just get dict instances when I create these
[20:07:33] <jmiehe> cls(**values) gets me into infinite recursion
[20:07:36] *** Joins: han-solo (~hanish@user/han-solo)
[20:08:52] *** Joins: zepolen (~zepolen@2a02:587:860a:4682:8283:5b08:2a6:327c)
[20:09:16] *** Quits: tuck (~lightstor@user/tuck) (Quit: Lost terminal)
[20:10:18] *** Joins: node1 (~node1@user/node1)
[20:10:32] *** Joins: nomic (~nomic@2a00:23c6:9902:2401:d128:ccbf:510a:f8d)
[20:11:17] *** Quits: Diemuzi (~Diemuzi@ip68-106-203-17.pn.at.cox.net) (Quit: See you on the flip side.)
[20:13:38] *** Quits: nomic (~nomic@2a00:23c6:9902:2401:d128:ccbf:510a:f8d) (Client Quit)
[20:14:41] *** Quits: rindolf (~shlomif@2a0d:6fc2:4bb1:500:6b1e:2524:3d70:36ec) (Ping timeout: 245 seconds)
[20:15:39] *** Quits: yaalon (~yaalon@2600:1700:9450:2d30:2827:b894:4602:8503) (Remote host closed the connection)
[20:16:02] *** Joins: yaalon (~yaalon@2600:1700:9450:2d30:2827:b894:4602:8503)
[20:16:04] *** Quits: mickey8 (~user@user/mickey) (Quit: Ping timeout (120 seconds))
[20:16:05] *** Joins: bomb-on (~bomb-on@194.144.47.113)
[20:16:31] *** Joins: mickey8 (~user@user/mickey)
[20:16:53] *** Quits: zepolen (~zepolen@2a02:587:860a:4682:8283:5b08:2a6:327c) (Remote host closed the connection)
[20:16:57] *** Quits: yaalon (~yaalon@2600:1700:9450:2d30:2827:b894:4602:8503) (Remote host closed the connection)
[20:17:18] *** Joins: zepolen (~zepolen@2a02:587:860a:4682:5c31:3b13:b3ea:efca)
[20:17:28] *** Quits: akaWolf (~akaWolf@akawolf.org) (Ping timeout: 265 seconds)
[20:22:03] *** Quits: Cleverness (~clevernes@pool-108-54-152-186.nycmny.fios.verizon.net) (Quit: Leaving)
[20:23:54] *** Quits: raydeeam (uid325131@dgplug/raydeeam) (Quit: Connection closed for inactivity)
[20:25:06] *** Joins: nomic (~nomic@2a00:23c6:9902:2401:d128:ccbf:510a:f8d)
[20:26:28] *** Quits: clarkk (~clarkk@host31-53-69-254.range31-53.btcentralplus.com) (Quit: Leaving)
[20:26:55] *** Joins: yaalon (~yaalon@2600:1700:9450:2d30:2827:b894:4602:8503)
[20:26:59] *** Quits: yaalon (~yaalon@2600:1700:9450:2d30:2827:b894:4602:8503) (Remote host closed the connection)
[20:27:31] *** Joins: elena (~elena_re@178.176.78.122)
[20:27:40] *** elena is now known as elena_re
[20:29:31] *** Quits: jmiehe (~Thunderbi@user/jmiehe) (Quit: jmiehe)
[20:29:46] *** Quits: ZolVas (~ZolVas@2a00:1370:8115:9cd9:3956:54f9:6d96:74a6) (Ping timeout: 256 seconds)
[20:29:48] *** Quits: Strom (strom@fedora/strom) ()
[20:30:33] *** Quits: djhankb (~djhankb@208.113.164.68) (Remote host closed the connection)
[20:31:03] *** Joins: djhankb (~djhankb@208.113.164.68)
[20:31:25] *** Joins: Strom (strom@fedora/strom)
[20:36:12] *** Quits: zettabyte (~zettabyte@user/zettabyte) (Quit: Leaving)
[20:36:27] *** Joins: cthulchu (~Cthulchu@193.194.107.250)
[20:36:33] *** Joins: zettabyte (~zettabyte@user/zettabyte)
[20:37:27] *** Quits: ElPresidenteP (~ElPreside@2605:a601:55be:bb00:b4ee:8306:9589:1945) (Quit: WeeChat 3.3)
[20:37:35] *** Joins: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao)
[20:38:14] *** Joins: akaWolf (~akaWolf@akawolf.org)
[20:40:43] *** Joins: arinov (~arinov@31.142.75.229)
[20:41:40] *** Joins: linux_dream (~isaac@2a01:e0a:7:60e0:bcc4:b32c:9221:831d)
[20:42:01] *** Quits: catern (~sbaugh@2604:2000:8fc0:b:a9c7:866a:bf36:3407) (Remote host closed the connection)
[20:42:20] *** Joins: bloody (~bloody@user/bloody)
[20:45:10] *** Joins: penguino (~mrpenguin@user/mrpenguin)
[20:47:00] *** Joins: roxfan2 (roxfan@11.121-64-87.adsl-dyn.isp.belgacom.be)
[20:47:55] *** Quits: roxfan (roxfan@11.121-64-87.adsl-dyn.isp.belgacom.be) (Ping timeout: 252 seconds)
[20:50:21] *** Joins: ExeciN (~ExeciN@user/nicexe)
[20:50:40] *** Quits: han-solo (~hanish@user/han-solo) (Ping timeout: 252 seconds)
[20:51:32] *** Quits: justsomeguy (~justsomeg@user/justsomeguy) (Quit: WeeChat 3.2)
[20:53:51] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 245 seconds)
[20:53:51] *** Quits: elena_re (~elena_re@178.176.78.122) (Read error: Connection reset by peer)
[20:54:52] *** Joins: ElPresidente (~ElPreside@2605:a601:55be:bb00:b4ee:8306:9589:1945)
[20:56:12] *** Joins: fikran (~fikran@user/fikran)
[20:58:30] *** Joins: redrum88_ (~redrum88@user/redrum88)
[20:58:50] *** Joins: elena_re (~elena_re@178.176.78.122)
[20:59:30] *** Joins: ericzolf (~ericzolf@2a02:8070:a298:29f0::31a)
[21:00:23] *** Quits: elena_re (~elena_re@178.176.78.122) (Client Quit)
[21:00:40] *** Joins: elena (~elena_re@178.176.78.122)
[21:00:41] *** elena is now known as elena_re
[21:01:40] *** Quits: redrum88 (~redrum88@user/redrum88) (Ping timeout: 252 seconds)
[21:03:19] *** Quits: redrum88_ (~redrum88@user/redrum88) (Ping timeout: 252 seconds)
[21:04:16] *** Joins: redrum88_ (~redrum88@user/redrum88)
[21:04:16] *** redrum88_ is now known as redrum88
[21:06:57] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[21:10:52] <ericzolf> I have an issue with reading lines and seeking back at https://github.com/ericzolf/bookiemoney/blob/ericzolf-repeat-seek-issue/combine_bank_statements.py#L119-L139 - the lines commented out in commit https://github.com/ericzolf/bookiemoney/commit/973a9311ac03c1cf63b7a57a7c329f82cb5bfa3e are my workaround
[21:12:31] <ericzolf> I have the impression that by "readline-ing" and seeking back, I confuse some internal counter. Sometimes the program get stucks in the readline, sometimes the fd.tell() gives me numbers modulo 2**64, overall the result is pretty random, depending on the exact input file.
[21:13:17] *** Quits: botanic (~botanic@206-124-18-54.static.forethought.net) (Read error: Connection reset by peer)
[21:13:20] *** Joins: kickingvegas (~cchoi@c-24-5-40-20.hsd1.ca.comcast.net)
[21:13:25] <ericzolf> The readline is stuck somewhere in the cp1252 module.
[21:15:04] *** Quits: luna-is-here (~quassel@2a02:908:f761:2a3c::a) (Quit: luna-is-here)
[21:15:20] <ericzolf> Does any of this sound familiar? I'm unsure how to proceed further with debugging...
[21:16:22] *** Joins: stkrdknmibalz (~test@rrcs-75-87-43-228.sw.biz.rr.com)
[21:16:55] *** Quits: semeion (~semeion@user/semeion) (Ping timeout: 265 seconds)
[21:17:11] *** Quits: elena_re (~elena_re@178.176.78.122) (Read error: Connection reset by peer)
[21:18:14] <nedbat> ericzolf: this sounds really fiddly. I wouldn't try to work at this level to do this.  Can you work on the results of DictReader instead?
[21:19:19] *** Quits: ska (~ska@user/ska) (Ping timeout: 252 seconds)
[21:19:22] <ericzolf> This is fiddly but the input file is a mixture of CSV and "something else", so if the line doesn't look right, I need to step back.
[21:19:58] <nedbat> ericzolf: do you have any control over the format of the input file?
[21:20:17] <ericzolf> Nope, it's the way it comes from all my banks... :-(
[21:20:23] <nedbat> ericzolf: or, can you just read the whole file into a list of lines, and then work with the list?
[21:20:40] <nedbat> ericzolf: what do you do with the line that isn't csv?
[21:21:14] *** Joins: midnite_ (~human@user/midnightlantern)
[21:21:37] <ericzolf> I parse them with a regex or yet another CSV formats (yeah, different CSV "types" separated by "stuff").
[21:21:40] *** Quits: penguino (~mrpenguin@user/mrpenguin) (Remote host closed the connection)
[21:21:56] <midnite_> Hi, it's my first time working with SQLite in Python. I'm following a tutorial to try and get the basics down, but I made a mistake here and I'm not sure what I did wrong. Here's my code, see comments at the bottom for the traceback: https://bpa.st/VNHQ
[21:22:07] *** Joins: penguino (~mrpenguin@user/mrpenguin)
[21:22:30] <ericzolf> Buuut, the idea with reading all at once sounds interesting, let me try this. The files aren't thaaat big, so it shouldn't be an issue... And I only use readline, so I don't care about individual characters...
[21:22:46] *** midnite_ is now known as midnite
[21:22:47] <deniska> midnite_: create_connection doesn't return anything
[21:22:52] <nedbat> ericzolf: btw, list(f) will give you the lines list also, no need for f.readlines()
[21:22:53] <ericzolf> nedbat, thanks, that was a quick one :-)
[21:23:11] *** Joins: hudo_ (~hudo@62.68.20.210)
[21:23:11] *** Quits: ExeciN (~ExeciN@user/nicexe) (Remote host closed the connection)
[21:23:18] <ericzolf> Just in time for (my) dinner :-D
[21:23:19] <BrenBarn> yeah, I think it makes more sense to try to read the lines and store them and then do something else with them if needed, rather than try to seek back in the file
[21:23:36] <deniska> midnite: so it returns None, and then the code tries to call None.cursor() leading to that traceback
[21:23:41] <BrenBarn> even if you can't read the whole file you can maintain your own buffer of "ambiguous" lines and then revisit them
[21:23:44] <midnite> yeah, I see that, thanks :)
[21:24:14] *** Joins: osxtra (~root@136.49.108.80)
[21:24:53] *** Joins: luna-is-here (~quassel@2a02:908:f761:2a3c::a)
[21:26:35] *** Quits: hudo (~hudo@62.68.20.210) (Ping timeout: 265 seconds)
[21:27:30] *** Joins: ErkiS (~opera@85.253.103.121.cable.starman.ee)
[21:28:19] *** Quits: ericzolf (~ericzolf@2a02:8070:a298:29f0::31a) (Ping timeout: 268 seconds)
[21:29:09] *** Quits: pwnd_sfw (~pwnd_sfw@ool-18b88100.dyn.optonline.net) (Quit: Ping timeout (120 seconds))
[21:30:05] *** Joins: semeion (~semeion@user/semeion)
[21:30:29] *** Joins: pwnd_sfw (~pwnd_sfw@ool-18b88100.dyn.optonline.net)
[21:30:49] *** Quits: djhankb (~djhankb@208.113.164.68) (Read error: Connection reset by peer)
[21:31:20] *** Joins: djhankb (~djhankb@208.113.164.68)
[21:31:55] *** Joins: ska (~ska@user/ska)
[21:32:45] *** Joins: wootehfoot (~wootehfoo@user/wootehfoot)
[21:34:10] *** Quits: ElPresidente (~ElPreside@2605:a601:55be:bb00:b4ee:8306:9589:1945) (Ping timeout: 252 seconds)
[21:34:41] <midnite> I have some psuedocode written out here for working with this table in a SQLite3 databse: https://bpa.st/IW3Q
[21:34:56] <midnite> but I'm not quite sure how to implement it
[21:35:40] <midnite> basically, I want to turn a SQLite table into some sort of 2D array. I should also mention I'm still fairly new to Python
[21:35:46] <midnite> so that I can iterate over it
[21:35:57] <midnite> or maybe that's not necessary?
[21:36:40] <midnite> the eventual goal here is to get all the movies starring these two actors represented by the IDs 136 and 307
[21:37:06] <midnite> I don't want someone to hold my hand or tell me how to do this, but a pointer in the right direction would be much appreciated.
[21:37:50] <BrenBarn> you may want to do that with a JOIN in the SQL
[21:38:08] <midnite> this is actually for a problem that I'm supposed to do entirely with SQL queries
[21:38:22] <midnite> but I'm still finding SQL kind of awkward and I'm not sure how to implement this in SQL
[21:38:42] <midnite> so I wrote the psuedocode, and it looked like Python to me, so I thought maybe a first step would be to implement this in Python and just be sure my logic is correct
[21:38:53] <midnite> but I'd appreciate help with the SQL as well
[21:38:57] *** Quits: nomic (~nomic@2a00:23c6:9902:2401:d128:ccbf:510a:f8d) (Quit: Leaving)
[21:39:15] <midnite> we can move this to #sql if you like
[21:40:54] *** Quits: luna-is-here (~quassel@2a02:908:f761:2a3c::a) (Quit: luna-is-here)
[21:41:20] <midnite> BrenBarn: JOINs did come to mind, but I thought, all the data I need to work with right now is in the same table, so how would a JOIN help me?
[21:41:33] <Swayze> you can join a table to itself
[21:41:39] <Swayze> if you need too
[21:41:52] * midnite 's brain breaks
[21:42:18] *** Joins: jeho (~jehoshaph@user/jehoshaphat)
[21:42:20] *** Joins: luna-is-here (~quassel@ip-95-223-59-100.hsi16.unitymediagroup.de)
[21:42:46] <Swayze> there are use cases for example when creating a heirarchy from flat data
[21:43:00] <Swayze> not sure if that applies to you havnt been following
[21:43:24] *** Joins: wladimir (~doforlove@user/doforlove33)
[21:43:34] *** wladimir is now known as ethereal
[21:43:36] <midnite> I have some rough ideas here in psuedocode, I'm aware the logic isn't done yet: https://bpa.st/IW3Q
[21:43:43] <midnite> hopefully that explains what I am trying to do, Swayze
[21:43:44] *** Joins: jaymz (~jaymz@c-68-46-171-130.hsd1.mi.comcast.net)
[21:44:06] *** ethereal is now known as wlad
[21:45:13] *** Joins: Betal (~Betal@user/betal)
[21:49:04] *** Quits: xavie (~xavie@atoulouse-659-1-133-52.w92-146.abo.wanadoo.fr) (Quit: WeeChat 3.3)
[21:49:59] *** Joins: jazzy (~jaziz@user/jaziz)
[21:54:41] *** Quits: flyback (~flyback@2601:540:8201:1e60:9491:71fd:86c8:3b3c) (Ping timeout: 245 seconds)
[21:58:57] *** Joins: ericzolf (~ericzolf@2a02:8070:a298:29f0::31a)
[21:59:05] *** Quits: stockholm (~Andreas@p200300d2c73e67001c7b7fd85c8439e7.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[21:59:24] *** Joins: flyback (~flyback@2601:540:8201:1e60:a482:3dcc:7a9c:52b5)
[22:01:42] *** Quits: hendursa1 (~weechat@user/hendursaga) (Quit: hendursa1)
[22:02:06] *** Joins: hendursaga (~weechat@user/hendursaga)
[22:03:18] *** Joins: hsiktas[m] (~hsiktasma@2001:470:69fc:105::30d4)
[22:03:31] *** Quits: mpmc (~mpmc@user/mpmc) (Quit: ZNC - https://znc.in)
[22:03:42] *** Joins: Hanii (~textual@2a00:23c5:c587:6d00:edd5:453a:8422:e184)
[22:03:52] *** Joins: magla (~gelignite@55d486d7.access.ecotel.net)
[22:04:35] <Swayze> midnite: show your data structure and explain what you trying to do
[22:04:55] *** Quits: y1n (~y1n@178.115.41.5.wireless.dyn.drei.com) (Remote host closed the connection)
[22:04:58] <byte4byte> you just wanna steal it Swayze
[22:06:48] <Swayze> oh i see theres more info above
[22:06:50] <Swayze> looking
[22:06:54] <midnite> Swayze: https://bpa.st/UKBA
[22:07:37] <midnite> Swayze: so I'm not looking for someone to tell me the solution. I want to figure it out myself - cheaters don't learn shit. But I'm not sure how to approach this part of the problem...
[22:08:00] *** Joins: mpmc (~mpmc@user/mpmc)
[22:08:09] *** Quits: arinov (~arinov@31.142.75.229) (Ping timeout: 265 seconds)
[22:08:18] <midnite> so right now, I'm focusing on the part where I get the IDs of the movies, knowing the IDs of the actors are 136 and 307
[22:08:37] <midnite> https://bpa.st/IW3Q here I have a sample from the stars table, which is what I want to work with to find the movie IDs
[22:08:38] *** Joins: RangerBobVA (~bmaddox@user/rangerbobva)
[22:08:59] <midnite> also some psuedocode showing a rough idea of the logic I think would give me the result I am looking for
[22:09:40] *** Quits: node1 (~node1@user/node1) (Quit: Leaving)
[22:09:54] *** Quits: bilb_ono (~alexmarsh@ip184-189-224-55.sb.sd.cox.net) (Quit: bilb_ono)
[22:10:40] <Swayze> midnite: it would be like "SELECT id FROM movies from actor_id in (136,307)
[22:10:51] <Swayze> midnite: it would be like "SELECT id FROM movies where actor_id in (136,307)"
[22:11:04] <Swayze> if you're looking for a sql solution ...
[22:11:14] <Swayze> unless actor id is a string then use in ('136','307')
[22:11:23] <Ninpo> I'd like to describe record relationships in an sqlite database as breadcrumbs. e.g. I have a categories table, a category can be a parent category, a child category or both. I'd like to go over the category records and spit out, say, "Books > Paperback", "Books > Hardback" "Books > Paperback > Non-Fiction" etc. Can;t quite get my head to the correct approach.
[22:12:07] <Swayze> you only need an id field and parent_id field
[22:12:16] <Swayze> which those two you can construct what you need
[22:12:18] <midnite> Swayze: but I believe that returns a list of all movies in which either actor starred, i.e. OR
[22:12:27] <midnite> but I am looking for actor 136 AND 307, both together
[22:12:28] *** Joins: kristine86 (~kristine8@2603-7080-af03-588a-389f-21c4-9070-d18d.res6.spectrum.com)
[22:12:34] <midnite> if it were OR, I would have already solved this
[22:13:22] <Swayze> so the movie id is listed twice? once for each actor?
[22:13:34] <midnite> look at what I pasted above
[22:13:38] <midnite> https://bpa.st/IW3Q
[22:13:42] <midnite> see the comments at the end?
[22:14:44] <Swayze> select count(id) from movies where person_id in (136,307) having count(id)>1
[22:15:17] <Swayze> that will return records with only 2 matches not just the one
[22:15:30] <midnite> the person who gave me a soltion in #sql also used COUNT, so I think it's time I looked into how it works. I don't believe COUNT was covered in lecture
[22:15:36] <midnite> yet of course the solution requires it lol
[22:16:32] *** Joins: stockholm (~Andreas@p200300d2c73e67001c7b7fd85c8439e7.dip0.t-ipconnect.de)
[22:16:58] <Swayze> select id, count(id) from movies where person_id in (136,307) group by id having count(id)>1
[22:18:18] <midnite> here is what seems to work:
[22:18:19] <midnite> SELECT movie_id FROM stars WHERE person_id IN (136, 307) GROUP BY movie_id HAVING COUNT(person_id) > 1;
[22:18:28] <Swayze> yeah
[22:18:37] <Swayze> thats what i said but i dont know the exact column names
[22:18:41] <midnite> yeah :)
[22:18:51] <midnite> do you know why I need to GROUP BY before I do HAVING COUNT?
[22:19:13] <midnite> I'm still very new to SQL, so I don't fully understand this
[22:19:30] <Swayze> if you do an agregation like count or avg you need to group by that column
[22:19:48] <Swayze> or sum
[22:20:15] <Swayze> it means it will only return 1 record for that movie id
[22:20:18] <Swayze> even tho its found twice
[22:20:24] <Swayze> but it will still count them for you
[22:21:31] <Swayze> try it without the group by
[22:21:40] <midnite> I did haha
[22:21:42] <Swayze> see if it works ;-)
[22:21:44] <Swayze> does it?
[22:21:46] <midnite> it gives me an error
[22:21:54] <Swayze> yeah something about id not being in the agregation?
[22:21:57] <Swayze> movie_id
[22:22:14] <Swayze> i imagine ;-)
[22:22:50] <midnite> it's time for a break. I've been doing this for 2.5 hours
[22:22:55] <midnite> maybe I'll understand this later
[22:23:10] <Swayze> t-sql is a small learning curve
[22:23:11] <midnite> thanks, Swayze, for your help
[22:23:16] <Swayze> but its doable
[22:23:19] *** Joins: elena_re (~elena_re@178.176.78.122)
[22:23:19] <midnite> yeah for sure
[22:23:20] <Swayze> yw
[22:23:26] *** Joins: Akuli (~Akuli@82-203-164-212.bb.dnainternet.fi)
[22:23:35] <midnite> it's just a new way of thinking about stuff, having to write SQL queries instead of C or Python
[22:23:45] <midnite> i'll get it soon enough
[22:24:02] <midnite> I'm used to being able to keep track of variables in counters and iterate over things and whatnot
[22:24:06] <Swayze> its great get your database to do the heavy lifting
[22:24:10] <midnite> not having to do everything all in one go
[22:24:11] <Swayze> its the first step of writing optimized code
[22:24:13] <midnite> yeah I guess because
[22:24:20] <midnite> the db is optimized is what I was gonna say yeah
[22:24:21] *** Joins: csm3105 (~csm3105@static-26-27-230-77.ipcom.comunitel.net)
[22:24:28] <midnite> it's like
[22:24:44] *** Joins: CodePoint (~CodePoint@193.27.13.124)
[22:24:51] <Swayze> yeah the db is native to the data and optimized to query and agregate it for you
[22:24:55] <midnite> yeah
[22:24:57] <Swayze> you should use it as far as possible
[22:25:17] <midnite> they used a bit of python in the lecture, so I was suprised to see this assignment be all SQL queries
[22:25:21] <midnite> but now I see why!
[22:25:30] <Swayze> look into stored procedures
[22:25:30] *** Joins: darksun (~darksun@user/darksun)
[22:25:35] <Swayze> ideally you dont want to run dynamic sq
[22:25:47] <Swayze> you want to run pre-compiled code, a stored procedure in your database
[22:26:01] <Swayze> that you call with parameters in this case it woul dbe
[22:26:06] *** Quits: Hanii (~textual@2a00:23c5:c587:6d00:edd5:453a:8422:e184) (Quit: Textual IRC Client: www.textualapp.com)
[22:26:14] <midnite> do you have any good articles on stored procedures?
[22:26:16] <Swayze> exec find_movie @actor1, @actor2
[22:26:18] <midnite> or videos, podcasts, whatever
[22:26:38] <deniska> In my previous life I had to deal with an application which was mostly stored procedures
[22:26:47] <deniska> and… I'm not sold
[22:26:50] <Swayze> sqlite might not support sp's :p
[22:26:50] *** Joins: CodePoint_ (~CodePoint@2600:1700:3070:3790:cbd:e6a8:6935:a71f)
[22:27:09] <Swayze> sp's are compiled in the database and do run faster than the exact same t-sql code you call from your code
[22:27:18] <Swayze> also it prevents against sql injection
[22:27:22] <midnite> ok. we're just working with sqlite3 for now
[22:27:23] <midnite> oh, nice
[22:27:31] <deniska> python's db api already prevents sql injections
[22:27:48] *** Joins: Mattiaslndstrm (~Mattiasln@94.191.136.72.mobile.tre.se)
[22:27:50] <midnite> let's say I want to write an android app that works with a database local to the phone
[22:27:51] <deniska> and compiling a query is rarely a bottleneck
[22:28:02] <midnite> would it be feasible to use something like postgresql?
[22:28:11] <midnite> or would I want to stick with something like sqlite
[22:28:14] <Swayze> i think sqlite is ideal of that
[22:28:16] <Swayze> for*
[22:28:17] <deniska> midnite: not really, but sqlite is available on android
[22:28:22] <midnite> ok
[22:28:37] <Swayze> you only need mysql/maria/postgres if you dealing with hundrds of mb's of data
[22:28:38] <midnite> but if I had my own api and whatnot all set up and backend stuff running on a server, then maybe I could use postgre
[22:28:42] <midnite> ah ok
[22:29:12] <Swayze> and also its a central db server for many services
[22:29:16] <deniska> it's more of what kind of read/write patterns you expect, I certainly dealt with sqlite databases in low tens of gigabytes and it was fine :)
[22:29:19] <Swayze> in the case of an app tehre is only one consumer, your ui
[22:29:24] <Swayze> localised
[22:29:37] <Swayze> yeah what deniska said
[22:30:02] *** Quits: wlad (~doforlove@user/doforlove33) (Ping timeout: 265 seconds)
[22:30:10] <midnite> the app would be a journalling app. the user would rate several things from 1-5 (0-4) or 1-10 or whatever daily and also write some comments
[22:30:22] <midnite> and they'd be able to define custom questions to answer too
[22:30:36] *** Quits: djhankb (~djhankb@208.113.164.68) (Read error: Connection reset by peer)
[22:30:39] <midnite> answers to these custom questions might be yes/no or they might be ints as well
[22:30:44] <midnite> haven't decided yet
[22:30:52] *** Quits: CodePoint (~CodePoint@193.27.13.124) (Ping timeout: 265 seconds)
[22:30:55] *** Quits: CodePoint_ (~CodePoint@2600:1700:3070:3790:cbd:e6a8:6935:a71f) (Client Quit)
[22:31:04] <energizer> midnite: https://nomie.app/
[22:31:08] *** Joins: djhankb (~djhankb@208.113.164.68)
[22:31:13] *** Joins: CodePoint (~CodePoint@2600:1700:3070:3790:cbd:e6a8:6935:a71f)
[22:31:27] <midnite> energizer: i'm not sure if I am happy or sad that this already exists
[22:31:29] <midnite> lol
[22:31:45] <midnite> it's not exactly a unique idea, so I'm not suprised
[22:31:51] <midnite> that it does
[22:32:19] <midnite> anyway, writing my own take on the same idea might be a good exercise still
[22:32:53] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Read error: Connection reset by peer)
[22:33:14] <midnite> thanks for brining it to my attention
[22:33:43] *** Joins: yaalon (~yaalon@75-35-90-51.lightspeed.snantx.sbcglobal.net)
[22:34:20] <mefistofeles> oh, that nomie sounds nice
[22:34:27] *** Quits: midnite (~human@user/midnightlantern) (Quit: bye!)
[22:34:47] *** Joins: shibboleth (~shibbolet@user/shibboleth)
[22:36:28] *** Quits: cmbengue (~Thunderbi@207.191.249.160) (Quit: Thanks, see you later.)
[22:37:13] <Ninpo> I'd like to describe record relationships in an sqlite database as breadcrumbs. e.g. I have a categories table, a category can be a parent category, a child category or both. I'd like to go over the category records and spit out, say, "Books > Paperback", "Books > Hardback" "Books > Paperback > Non-Fiction" etc. Can;t quite get my head to the correct approach.
[22:37:55] <energizer> Ninpo: is nonfiction really a subset of paperback
[22:38:22] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[22:38:36] *** Joins: Nahra (~user@static.161.95.99.88.clients.your-server.de)
[22:39:01] *** Parts: ErkiS (~opera@85.253.103.121.cable.starman.ee) ()
[22:39:19] *** Joins: CodePoint_ (~CodePoint@2600:1700:3070:3790:cbd:e6a8:6935:a71f)
[22:39:20] *** Quits: schumaml (~schumaml@p200300e2ef0b030053c1821a43d17d29.dip0.t-ipconnect.de) (Quit: WeeChat 3.3)
[22:39:38] <ChrisWarrick> Ninpo: do you have a finite number of levels?
[22:39:41] *** Quits: CodePoint (~CodePoint@2600:1700:3070:3790:cbd:e6a8:6935:a71f) (Ping timeout: 245 seconds)
[22:39:54] *** Joins: yuesbeez (uid458354@id-458354.tinside.irccloud.com)
[22:39:55] <Ninpo> ChrisWarrick: yeah there's only 225 categories overall
[22:40:01] *** Quits: CodePoint_ (~CodePoint@2600:1700:3070:3790:cbd:e6a8:6935:a71f) (Client Quit)
[22:40:05] <Ninpo> varying levels of nesting
[22:40:12] <ChrisWarrick> Ninpo: what’s the most nesting you have?
[22:40:27] *** Joins: hrob (~hrob@2a01:6f01:b602:d405:5be9:8fd1:b592:45ba)
[22:40:33] *** Joins: CodePoint (~CodePoint@2600:1700:3070:3790:cbd:e6a8:6935:a71f)
[22:40:34] <Ninpo> at this second I am unsure do you know an easy way to check?
[22:41:01] <Ninpo> I'll paste the schema one sec
[22:41:13] *** Quits: yaalon (~yaalon@75-35-90-51.lightspeed.snantx.sbcglobal.net) (Ping timeout: 252 seconds)
[22:41:24] <ChrisWarrick> Ninpo: since you have 225 categories, I’d load all into memory (into a dict with id = key) and build the parent-child relationships in python
[22:42:00] *** Joins: sarab (~sarab@103.210.200.98)
[22:42:14] <ChrisWarrick> Ninpo: If you had a finite and reasonable nesting level, you could write a bunch of LEFT JOIN categories p1 LEFT JOIN categories p2 …
[22:42:20] *** Quits: bluesmonk (uid318026@id-318026.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[22:42:32] <hrob> I have some code "modules" that take care of scrambling some sensitive material given a user key -- I don't want this code to be very readable, because it is in principle possible to unscramble the data if know 1. key, 2. can undo the algorithm
[22:42:34] <Ninpo> https://bpa.st/KQCA
[22:42:55] <hrob> im looking at pyarmor, but perhaps there are other tools for this
[22:43:01] <Ninpo> ChrisWarrick: that's the schema
[22:43:12] *** Joins: yaalon (~yaalon@2600:1700:9450:2d30:5430:197c:f760:987c)
[22:43:12] <ChrisWarrick> Ninpo: yeah, that’s what I guessed
[22:43:47] <Ninpo> how would I build the relationships in python ChrisWarrick?
[22:44:04] <Ninpo> I've got as far as pulling the name and parent_id via sqlalchemy
[22:44:08] <braxas> hi, how could if False: yield None have any effect?
[22:44:10] <braxas> https://github.com/RDFLib/rdflib/commit/90f6fe5611f4c7411e5eac347cafb9d009829b6c#diff-67618173a88770c70926794a9dac849cc8ed61c03db9b75495b61b1dc7c0a82eL367
[22:44:26] <ChrisWarrick> Ninpo: what do you mean?
[22:44:27] <energizer> hrob: i'm no crypto expert but that sounds like the wrong way to go
[22:44:54] <energizer> hrob: make the code readable, keep the key private
[22:44:54] <ChrisWarrick> Ninpo: you could also think about a WITH RECURSIVE: https://www.sqlite.org/lang_with.html
[22:45:06] *** Quits: Haxxa (~Haxxa@89nnjg0xckz9ggn6r5xm.ip6.superloop.com) (Quit: Haxxa flies away.)
[22:45:13] *** Quits: RangerBobVA (~bmaddox@user/rangerbobva) (Quit: Leaving)
[22:45:13] <Ninpo> ChrisWarrick: you suggested building the parent-child relationships in python after pulling the records into a dict. I'm asking how
[22:46:11] <energizer> braxas: does the function do something you dont like?
[22:46:29] <braxas> energizer: I just don't get how removing that code could have any impact on anything
[22:46:36] <braxas> except maybe type hinting
[22:46:45] <energizer> Ninpo: using WITH RECURSIVE seems like the better idea to me
[22:47:16] <hrob> energizer  yeah there could be a key pair method,  but it doesnt fit the problem for a certain reason
[22:47:17] *** Joins: Haxxa (~Haxxa@89nnjg0xckz9ggn6r5xm.ip6.superloop.com)
[22:47:30] <ChrisWarrick> Ninpo: def find_parents(category): parents = []; parent_id = category.parent_id; while parent_id is not None: parent = CATEGORIES[parent_id]; parents.append(parent); parent_id = parent.parent_id
[22:47:44] *** Joins: Bronto22 (~mennoh@2a02:a46b:4db0:1:5604:a6ff:fe37:3044)
[22:48:14] <energizer> braxas: for one thing it's a syntax error to have an if statement with no body
[22:48:32] <braxas> energizer: it has a body
[22:48:36] <braxas> yield None
[22:48:40] <energizer> braxas: but that's deleted
[22:49:02] <braxas> together with the if statement, there is no if statement without a body before or after
[22:49:06] <energizer> ah
[22:49:19] <energizer> braxas: the yield turns it into a generator function
[22:49:30] <energizer> even if it never executes
[22:50:13] <braxas> Is there no better way of doing it?
[22:50:18] <energizer> doing what?
[22:50:26] <braxas> making it a generator
[22:50:30] <braxas> than adding unreachable code
[22:51:20] <energizer> sometimes i see `return; yield`
[22:51:39] <energizer> but you could just return an empty list
[22:53:09] <energizer> if you're using an idiom like that you could add a comment explaining it
[22:53:29] <braxas> yeah I will, I still don't quite understand why it works to be frank
[22:53:54] <energizer> it's just a syntax rule. a function containing `yield` is a generator function
[22:54:02] *** Joins: CodePoint_ (~CodePoint@107-208-128-79.lightspeed.tukrga.sbcglobal.net)
[22:54:16] <nedbat> isn't `yield from ()` a better way to make an empty generator?
[22:55:23] <energizer> yeah alright
[22:55:42] <braxas> will try that then
[22:55:43] <braxas> TIL
[22:56:10] *** Quits: Hawker (~Hawker@drmons0544w-47-55-147-54.dhcp-dynamic.fibreop.ns.bellaliant.net) (Ping timeout: 260 seconds)
[22:56:42] <energizer> curious why you went with () rather than []
[22:56:54] <SnoopJ> the empty tuple is a singleton, I think?
[22:57:11] *** Quits: CodePoint (~CodePoint@2600:1700:3070:3790:cbd:e6a8:6935:a71f) (Ping timeout: 245 seconds)
[22:57:42] <energizer> so the point is to avoid allocation?
[22:58:15] <nedbat> energizer: it's more constant I guess. i'm fine with [] also :)
[22:58:21] <SnoopJ> And the rest of the stuff implied by BUILD_LIST (vs. LOAD_CONST for the empty tuple)
[22:58:27] <SnoopJ> But yea, probably not such a big difference really :)
[22:58:27] <nedbat> energizer: how about:  yield from ""
[22:58:30] <nedbat> :)
[22:58:32] <energizer> ew ew ew
[22:58:39] <energizer> :)
[22:59:00] *** Quits: kristine86 (~kristine8@2603-7080-af03-588a-389f-21c4-9070-d18d.res6.spectrum.com) (Quit: Client closed)
[22:59:26] *** Joins: kristine86 (~kristine8@2603-7080-af03-588a-389f-21c4-9070-d18d.res6.spectrum.com)
[22:59:40] *** Quits: shokohsc8 (~shokohsc@161.88.195.77.rev.sfr.net) (Read error: Connection reset by peer)
[22:59:46] *** Quits: MrFixIt (~samurai_@c-73-75-104-200.hsd1.il.comcast.net) (Remote host closed the connection)
[23:01:02] <braxas> thanks for the help y'all
[23:01:39] *** Joins: shokohsc8 (~shokohsc@161.88.195.77.rev.sfr.net)
[23:02:07] <braxas> this is also related: https://stackoverflow.com/questions/13243766/python-empty-generator-function
[23:02:58] *** Joins: Pickchea (~private@user/pickchea)
[23:03:46] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 252 seconds)
[23:05:33] *** Joins: fikran (~fikran@user/fikran)
[23:07:21] *** Joins: MrFixIt (~samurai_@c-73-75-104-200.hsd1.il.comcast.net)
[23:11:30] <SnoopJ> ouch: `(_ for _ in ())`
[23:11:43] <SnoopJ> (not a generator function, but still)
[23:13:09] *** Joins: wlad (~doforlove@user/doforlove33)
[23:13:36] *** Quits: CodePoint_ (~CodePoint@107-208-128-79.lightspeed.tukrga.sbcglobal.net) (Quit: CodePoint_)
[23:14:03] *** Quits: jeho (~jehoshaph@user/jehoshaphat) (Ping timeout: 250 seconds)
[23:15:20] <nedbat> SnoopJ: might as well use  `(x for y in "")` and really confuse them :)
[23:15:30] *** Joins: nomic (~nomic@2a00:23c6:9902:2401:d128:ccbf:510a:f8d)
[23:16:40] <energizer> (()for()in())
[23:17:25] <Ninpo> ChrisWarrick: Looks like 4 levels deep is the max but this has helped me work out what I want to do thanks so much :)
[23:18:03] <SnoopJ> nedbat, or try to work that very cursed Ellipsis trivium you found into it :)
[23:18:16] *** Joins: ramblebamble (ramblebamb@gateway/vpn/protonvpn/ramblebamble)
[23:18:24] *** Joins: jeho (~jehoshaph@user/jehoshaphat)
[23:18:48] <SnoopJ> IIRC that was strictly a lexing quirk though, and would become a syntax error with a full parse
[23:19:03] <energizer> whats the ellipsis thing?
[23:19:08] <nedbat> SnoopJ: now i don't remember what that was
[23:19:24] *** Quits: hrob (~hrob@2a01:6f01:b602:d405:5be9:8fd1:b592:45ba) (Quit: Client closed)
[23:20:42] <SnoopJ> `0xfor....real` -> 15
[23:20:49] <SnoopJ> (it was valid after all!)
[23:21:24] *** Joins: adiKt (uid472628@id-472628.tinside.irccloud.com)
[23:23:26] *** Quits: stkrdknmibalz (~test@rrcs-75-87-43-228.sw.biz.rr.com) (Ping timeout: 245 seconds)
[23:23:34] *** Quits: talismanick (~talismani@76.78.246.71) (Ping timeout: 252 seconds)
[23:24:18] *** Quits: pr100 (~pr100@cpc92728-cmbg20-2-0-cust160.5-4.cable.virginm.net) (Ping timeout: 256 seconds)
[23:24:26] *** Quits: wootehfoot (~wootehfoo@user/wootehfoot) (Read error: Connection reset by peer)
[23:24:26] *** Joins: paul424 (~tom@ip-37-248-155-217.multi.internet.cyfrowypolsat.pl)
[23:24:28] *** Quits: linux_dream (~isaac@2a01:e0a:7:60e0:bcc4:b32c:9221:831d) (Quit: WeeChat 3.3)
[23:25:00] <energizer> wat
[23:25:22] <paul424> Hello what is exact diffrence between [something ] and list(something) , I just see the diffrence , but what's the diff in python nomenclature ?
[23:25:29] <nedbat> SnoopJ: idk if i saw it in quite that form :)
[23:25:30] <SnoopJ> energizer, parses identically to: `0xf or (...).real` and doesn't need to evaluate the RHS of the `or`
[23:25:34] *** Quits: ericzolf (~ericzolf@2a02:8070:a298:29f0::31a) (Ping timeout: 260 seconds)
[23:25:58] <nedbat> paul424: [something] might be a list comprehension, or it might be a list literal.
[23:26:25] <nedbat> paul424: [x] makes a one-element list, with x as the element.  list(x) iterates over x, and makes a list of the values produced
[23:26:50] <energizer> SnoopJ: that's great
[23:26:52] <SnoopJ> nedbat, possibly. I do remember it was the end result of an escalation series of silly syntactically valid expressions
[23:26:58] <SnoopJ> escalating*
[23:26:59] <paul424> aha ... does python have constructors  ?
[23:27:06] <nedbat> paul424: yes, __init__ methods
[23:27:12] <paul424> aha those
[23:27:26] *** Quits: sleepingforest (~sleepingf@user/sleepingforest) (Ping timeout: 260 seconds)
[23:27:59] *** Quits: gitesh (uid423739@id-423739.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[23:28:04] *** Joins: ttree (~ttree0@c-73-239-62-159.hsd1.wa.comcast.net)
[23:28:08] <nedbat> SnoopJ: that's the fun of these things, is watching people top each other.  I was thinking of tweeting, "Is this the strangest way to make an empty generator expression: ("" for () in "")
[23:28:21] *** Quits: wlad (~doforlove@user/doforlove33) (Ping timeout: 250 seconds)
[23:28:44] <SnoopJ> the analogy is not entirely exact (i.e. `__init__()` gets `self` as an argument, it initializes an object that's already been constructed), but it's usually the closest match in terms of intent
[23:29:34] *** Joins: Hanii (~textual@2a00:23c5:c587:6d00:edd5:453a:8422:e184)
[23:29:38] *** Quits: realies (~realies@user/realies) (Quit: ~)
[23:29:43] <SnoopJ> nedbat, I guess it's only natural for a community of people who thrive on novelty 😅
[23:30:25] *** Joins: wlad (~doforlove@user/doforlove33)
[23:30:29] <nedbat> whether __init__ is a constructor or not depends on what we mean by constructor.
[23:30:40] * SnoopJ nods
[23:31:14] *** Quits: djhankb (~djhankb@208.113.164.68) (Read error: Connection reset by peer)
[23:31:29] *** Quits: elena_re (~elena_re@178.176.78.122) (Quit: WeeChat 3.2)
[23:31:44] *** Joins: djhankb (~djhankb@208.113.164.68)
[23:32:00] <SnoopJ> The official docs do frequently use this term for __init__, for instance
[23:32:49] *** Quits: runelind (~runelind@user/runelind) (Ping timeout: 245 seconds)
[23:32:52] <SnoopJ> 587 times, apparently
[23:33:01] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Read error: Connection reset by peer)
[23:33:16] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[23:33:22] *** Joins: runelind (~runelind@user/runelind)
[23:34:05] *** Quits: Mattiaslndstrm (~Mattiasln@94.191.136.72.mobile.tre.se) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[23:34:37] *** Quits: molt (~molt@178-222-245-206.static.isp.telekom.rs) (Ping timeout: 252 seconds)
[23:36:17] *** Quits: sarab (~sarab@103.210.200.98) (Quit: Leaving)
[23:39:04] *** Joins: sarab (~sarab@103.210.200.98)
[23:39:29] *** Quits: wlad (~doforlove@user/doforlove33) (Quit: WeeChat 3.3)
[23:39:43] *** Joins: aknot (~aknot@2603:900a:1503:17bb:21f4:4d26:c979:3092)
[23:42:29] <paul424> How does this snippet work :
[23:43:19] <paul424> if iter(numbers) is iter(numbers): raise TypeError('Must supply a container')
[23:43:59] *** Quits: Hanii (~textual@2a00:23c5:c587:6d00:edd5:453a:8422:e184) (Quit: Textual IRC Client: www.textualapp.com)
[23:44:16] <SnoopJ> paul424, `iter(thing)` should return `thing` if it's already an iterator. That snippet is testing whether getting two iterators from the input gives you the same iterator, I think
[23:44:50] <nedbat> paul424: that is an interesting line.  Where did it come from?
[23:45:08] <paul424> Effective python (brett slatkin)
[23:45:39] <paul424> It discusses how the generators get exhausted and how to avoid that
[23:45:48] <nedbat> paul424: and he doesn't explain the line?
[23:45:55] *** Joins: Mattiaslndstrm (~Mattiasln@94.191.136.72.mobile.tre.se)
[23:46:13] *** Joins: realies (~realies@user/realies)
[23:46:28] <nedbat> paul424: i think the line is flawed, because it assumes that iter(container) will return a new object each time.  that *should* be true, but a container might implement it poorly
[23:46:44] <paul424> it does but I am to stupid to comprehend everything what's written there ... maybe due to poor English ...
[23:46:57] *** Quits: zaquest (~notzaques@5.128.210.178) (Remote host closed the connection)
[23:47:31] <SnoopJ> "A container object...produces a fresh new iterator each time you pass it to the iter() function" https://docs.python.org/3/glossary.html#term-iterator
[23:47:47] <SnoopJ> if something produces the same iterator when you call iter() on it, it therefore cannot be a container
[23:48:07] <nedbat> SnoopJ: it could be a buggy container :)
[23:48:19] <paul424> heh,
[23:48:21] <SnoopJ> nedbat, a rules lawyer would I think say that the bug is "it's not a container" :)
[23:48:31] <nedbat> SnoopJ: you won't have to look far to find code like this:  def __iter__(self): return self
[23:48:38] <SnoopJ> agreed
[23:49:39] <paul424> what's wrong with def __iter__(self): return self ? If the container implements the __next__ method isn't that fine ?
[23:49:41] *** Parts: realies (~realies@user/realies) ()
[23:50:14] *** Quits: yaalon (~yaalon@2600:1700:9450:2d30:5430:197c:f760:987c) (Remote host closed the connection)
[23:50:20] *** Joins: zaquest (~notzaques@5.128.210.178)
[23:51:06] <SnoopJ> paul424, two calls to it will return the same object, which contradicts the above (although I'm having trouble finding where that requirement lives aside from the glossary)
[23:51:07] <byte4byte> what are the reasons to use python over php and vice versa though i know its gonna be extremely biased in here?
[23:51:26] *** Quits: DPA (~DPA@75-128-16-94.static.cable.fcom.ch) (Ping timeout: 246 seconds)
[23:51:54] *** Joins: yaalon (~yaalon@2600:1700:9450:2d30:5430:197c:f760:987c)
[23:52:33] <SnoopJ> byte4byte, this blogger has some notable articles about Python and wrote an extensive (perhaps excessive?) criticism of PHP, it contrats the langauge with Python a few times. https://eev.ee/blog/2012/04/09/php-a-fractal-of-bad-design/
[23:52:39] <SnoopJ> contrasts*
[23:52:43] *** Joins: elias117 (~elias117@user/elias117)
[23:52:43] *** Quits: Mattiaslndstrm (~Mattiasln@94.191.136.72.mobile.tre.se) (Ping timeout: 252 seconds)
[23:52:49] <paul424> SnoopJ, aha now you throw some new light to that Item(16)
[23:53:17] <elias117> Hey guys I started my first week at the new job and I'm not sure how well it went
[23:53:43] <elias117> I found out they put me in a senior position and I'm kind of afraid I wont be able to make the cut
[23:53:44] <braxas> elias117: I don't know either
[23:54:17] <braxas> elias117: maybe a discussion for #python-offtopic ?
[23:54:21] *** Joins: ElPresidente (~ElPreside@2605:a601:55be:bb00:b4ee:8306:9589:1945)
[23:54:22] *** Quits: trace987 (~trace@ip5f5a6a70.dynamic.kabel-deutschland.de) (Ping timeout: 252 seconds)
[23:54:29] <SnoopJ> paul424, the rough idea here is that a container should support multiple simultaneous iterators: each one is just at a different spot in the sequence of things contained in it. If I do e.g. `lst = [1,2,3]; it1 = iter(lst); it2 = iter(lst)`, those two iterators can be advanced separately.
[23:54:36] <elias117> thanks braxas
[23:54:50] <paul424> SnoopJ, yes I know see
[23:57:32] <nedbat> paul424: imagine you have a list of numbers, you want all the pairs:  for a in the_list: for b in the_list: print(a, b)
[23:57:43] <nedbat> paul424: this won't work if the_list returns itself as an iterator
[23:58:02] <nedbat> (which is pretty much what SnoopJ just said :) )
[23:58:10] <paul424> yes :)
[23:59:18] <paul424> so if the_list = iter([1,2,3,4,5]) it won't work right ?
[23:59:20] * paul424 checks
