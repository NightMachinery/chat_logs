[00:01:57] <FromDiscord> <TennisBowling> In reply to @Elegantbeef "Which line is the": not sure
[00:31:02] *** Quits: krux02 (~krux02@p200300e817167300a7fae666126e61b1.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[00:39:06] <FromDiscord> <mattrb> sent a code paste, see https://play.nim-lang.org/#ix=3SHm
[00:43:16] <FromDiscord> <Generic> well you could have something exactly like this in C++
[00:43:49] <FromDiscord> <Generic> sent a code paste, see https://play.nim-lang.org/#ix=3SHo
[00:43:56] <FromDiscord> <Generic> but there's no function like this in the standard library
[00:45:24] <FromDiscord> <Generic> more importantly being eable to just implicitly pass variables as mutable is the groundwork for lots very common things in Nim
[00:45:40] <FromDiscord> <Generic> like all seq or Table operations
[00:46:01] <FromDiscord> <Generic> because they are value objects, they're passed in as the first parameter as a var parameter
[00:46:51] <FromDiscord> <demotomohiro> Nim add runtime error checks (overflow, out of bound etc) and stack trace. When you wanto to compare assembly output of Nim and C/C++ add -d:danger option to optimize code and remove runtime checks.
[00:47:36] <FromDiscord> <mattrb> In reply to @Generic "well you could have": Are there other languages in which an array access on a value type isn't a copy?
[00:48:13] <FromDiscord> <Generic> like I demonstrated, in C++, the same thing can be done
[00:48:31] <FromDiscord> <Recruit_main707> other than c++ i guess
[00:49:28] <FromDiscord> <Generic> none I can think of atm, though there aren't really that many languages with non primitive value types
[00:52:47] <FromDiscord> <demotomohiro> sent a code paste, see https://play.nim-lang.org/#ix=3SHt
[00:54:32] <FromDiscord> <mattrb> sent a code paste, see https://play.nim-lang.org/#ix=3SHu
[00:54:42] <FromDiscord> <mattrb> It does inc the second array value like nim, though
[00:55:01] <FromDiscord> <Generic> C++ doesn't initialise values by default
[00:55:05] <FromDiscord> <mattrb> Ah
[00:55:14] <FromDiscord> <Generic> so you get what was already there before
[00:55:21] <FromDiscord> <mattrb> Makes sense then, so it behaves just like nim aside from zeroing the array
[00:55:26] <FromDiscord> <Generic> also int a = arr[0];
[00:55:31] <FromDiscord> <Generic> copies
[00:55:59] <FromDiscord> <Generic> it's the int& (C++) or var int (Nim) in the function signature which says that no copy should be done
[00:56:05] <FromDiscord> <mattrb> Right, the part that's unintuitive to me for both nim anc c++ is that `inc(arr[1])` _doesn't_ copy
[00:56:07] <FromDiscord> <Generic> but instead the value passed should be modified
[00:56:32] <FromDiscord> <mattrb> It's useful, but coming from other languages it just wasn't intuitive to me that that wouldn't copy the value on access
[00:57:30] <FromDiscord> <mattrb> It's useful, don't get me wrong. I just only caught it in my unit tests and was confused at first
[00:57:42] <FromDiscord> <demotomohiro> Incrementing with `arr[1] += 1` is also unintuitive for you?
[00:58:27] <FromDiscord> <mattrb> Hmm
[00:58:48] <FromDiscord> <mattrb> That makes sense, which I guess means my intuition wasn't very solid 🤔
[01:00:12] <FromDiscord> <mattrb> Is there a way in nim or in another language to make a variable assignment like `var a = arr[0]; inc(a)` behave more like `inc(arr[0])` and _not_ copy?
[01:00:48] <FromDiscord> <mattrb> My usecase being that I want to pull out a mutable reference to a value in the array, mess with it, and not have to stick it back in the array (or have to index off of the array for every operation)
[01:01:17] <FromDiscord> <Generic> https://nim-lang.org/docs/sugar.html#dup.m%2CT%2Cvarargs%5Buntyped%5D
[01:03:47] <FromDiscord> <demotomohiro> https://demotomohiro.github.io/littlesugar/withAliases.html↵https://github.com/demotomohiro/littlesugar
[01:06:18] <FromDiscord> <Elegantbeef> In the world of macros anything is possible 😛↵(@mattrb)
[01:08:49] <FromDiscord> <mattrb> In reply to @demotomohiro "Incrementing with `arr[1] +=": Actually, my intuition would be that `arr[0] += 1` is actually just sugar for `arr[0] = arr[0] + 1`, which wouldn't break my intuition since it's a set rather than a get operation on the array, which I _would_ assume behaves that way
[01:09:22] <FromDiscord> <Elegantbeef> I mean it is
[01:09:44] <FromDiscord> <Elegantbeef> and `inc(arr[0])` is sugar for `arr[0] = arr[0] + 1` 😛
[01:10:56] <FromDiscord> <mattrb> Isn't `inc` a proc though?
[01:11:03] <FromDiscord> <Elegantbeef> so is `+=`
[01:11:39] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3SHz
[01:11:49] <FromDiscord> <demotomohiro> @Elegantbeef, Why view type is not implemented as library when anything is possible in the world of macros?↵https://nim-lang.org/docs/manual_experimental.html#view-types
[01:11:49] <FromDiscord> <Elegantbeef> Which means "successive value" or in the case of integers `val + 1`
[01:12:09] <FromDiscord> <mattrb> Which is still unintuitive to me then, since it's accessing a value from an array then passing it to a proc. I would have assumed the array access would always copy
[01:12:14] <FromDiscord> <Elegantbeef> Cause it's easier and more intuitive to implement in compiler
[01:12:15] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Ping timeout: 240 seconds)
[01:12:33] <FromDiscord> <Elegantbeef> Well it only copies on assignment for optimizations and feature reasons↵(@mattrb)
[01:12:57] <FromDiscord> <Mysterysib> Is there an auto null I can define globally?
[01:13:14] <FromDiscord> <mattrb> It's unintuitive to me that array access copies on assignment (even to a `var` variable), but not on calling a proc with a `var` parameter
[01:13:32] <FromDiscord> <mattrb> I think the fact that those behave differently is the root of my confusion
[01:13:36] <FromDiscord> <demotomohiro> C++ has container types that a[x] returns reference not copy.
[01:17:49] <FromDiscord> <mattrb> In reply to @Elegantbeef "In the world of": How would you address this with a macro?
[01:19:25] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[01:20:53] <FromDiscord> <demotomohiro> `var x: int` and arr[1] are both locations somewhere in the memory. So they can work same way.
[01:24:06] <FromDiscord> <mattrb> But `var x = arr[1]` is a copy of `arr[1]`, so if I want to the mutate x, I'll need to stick it back in the array when I'm done
[01:24:26] <FromDiscord> <Elegantbeef> Well except when view types exist
[01:27:20] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3SHG
[01:27:54] <FromDiscord> <Elegantbeef> Nim has declarative mutability which informs dispatch on what procedure to call to give us reference properties, it's hard to do it any other way
[01:29:13] <FromDiscord> <demotomohiro> Maybe `with` module can help you.↵https://nim-lang.org/docs/with.html
[01:30:03] <FromDiscord> <Elegantbeef> Well it's quite simple anything that takes a `var T` either mutates that or returns from it
[01:30:29] <FromDiscord> <Elegantbeef> I dont see how `with` helps
[01:30:51] <FromDiscord> <mattrb> sent a code paste, see https://play.nim-lang.org/#ix=3SHI
[01:31:11] <FromDiscord> <demotomohiro> `byAddr` can be dangrous whe you use it to a element of seq or string.
[01:31:28] <FromDiscord> <mattrb> I'm currently building a lox interpreter in nim. I'd be curious to have some input when I'm done on how I could make it more idiomatic
[01:31:29] <FromDiscord> <Elegantbeef> Well yea it's an unsafe version of `views`
[01:31:52] <FromDiscord> <mattrb> But it's in the stdlib, which makes it a better version of views 👀
[01:32:16] <FromDiscord> <Elegantbeef> Views is in the compiler?
[01:32:17] <FromDiscord> <Elegantbeef> It's an experimental flag to get a borrow checker
[01:32:39] <FromDiscord> <mattrb> Ah, just behind a flag. Got it
[01:32:53] <FromDiscord> <demotomohiro> View types is much safer than `byAddr` but experimal.
[01:33:31] <FromDiscord> <Elegantbeef> Yea views is like Rust's borrow checker, allowing some nicer APIs
[01:33:58] <FromDiscord> <Elegantbeef> Dont need things like `byaddr` when you have a view
[01:36:13] <FromDiscord> <mattrb> Using byAddr allowed for this at least, which is nice. Haven't looked at the output, but I'd imagine it's better optimized too since it doesn't have to index off of the array constantly https://gist.github.com/mattrberry/040dd950e9e9caffbc3103ef327a9578
[01:37:38] <FromDiscord> <Elegantbeef> is frame supposed to be static?
[01:38:34] <FromDiscord> <mattrb> At the moment, since I haven't implemented function calls :p
[01:39:40] <FromDiscord> <Elegantbeef> Is that supposed to run until no more frames?
[01:42:13] <FromDiscord> <mattrb> It will run until returning from the top-level function, defined by the first CallFrame in vm.frames
[01:42:32] <FromDiscord> <Elegantbeef> ah was wondering if we could just use a iterator
[01:43:21] <FromDiscord> <mattrb> The callframes are a stack that the vm will push and pop to. Would probably be weird to lay an iterator over that
[01:43:25] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3SHP
[01:45:10] <FromDiscord> <Elegantbeef> It's the same as the byaddr i guess just without using byaddr/decls 😛
[01:46:57] <FromDiscord> <demotomohiro> Using iterator without loop looks strange but looks good.
[01:47:24] <FromDiscord> <Elegantbeef> Yea it's kinda a hack of course
[01:51:54] <FromDiscord> <mattrb> Thanks for the help today, as usual :)
[02:03:52] <FromDiscord> <Elegantbeef> https://play.nim-lang.org/#ix=3SHT there we go a less hacky version \:PO
[02:18:17] *** Quits: kayabaNerve (~kayabaNer@user/kayabanerve) (Ping timeout: 240 seconds)
[02:28:26] *** Quits: arkurious (~arkurious@user/arkurious) (Quit: Leaving)
[02:46:37] <FromDiscord> <Girvo> Morning all
[02:46:57] <FromDiscord> <Elegantbeef> Afternoon
[02:47:43] <FromDiscord> <Girvo> I'm likely ahead of you time-wise, so my time is more correct than yours 😉
[02:48:05] <FromDiscord> <Elegantbeef> Time is a construct of man only the sun knows which is more accurate
[02:48:42] <FromDiscord> <Girvo> Haha not wrong
[02:48:47] <FromDiscord> <abdu> How do we do inserted body block of argument in macro ?↵just like  inserted body block of template on: `template foo( i:int, codes:untyped) =`↵Please help!
[02:51:07] <FromDiscord> <Elegantbeef> `template foo( i:int, codes:untyped) = codes`
[03:08:46] <NimEventer> New question by itil memek cantik: Do some insertion of body block of argument in macro, see https://stackoverflow.com/questions/71520262/do-some-insertion-of-body-block-of-argument-in-macro
[03:09:38] <FromDiscord> <Girvo> Does anyone know what the performance implications of `pegs`  are? I wonder if it's suitable for my embedded use-case for parsing some AT command responses. Might not even need it really, it's mostly `CRLF` line separated data
[03:10:58] <FromDiscord> <mattrb> In reply to @Elegantbeef "https://play.nim-lang.org/#ix=3SHT there we go": Seems like play.nim-lang.org is down :/
[03:16:49] <FromDiscord> <Elegantbeef> I think it's' generally efficent, best thing would to be to benchmark it↵(@Girvo)
[03:17:06] <FromDiscord> <Elegantbeef> Yea @mattrb  https://wandbox.org use this for now
[03:30:30] <FromDiscord> <mattrb> In reply to @Elegantbeef "Yea <@221832495367323648>  https://wandbox.org": I was mostly saying I couldn't see the code you shared on play.nim-lang.org :p
[03:30:52] <FromDiscord> <Elegantbeef> Ah just replace it with ix.io
[03:31:08] <FromDiscord> <Elegantbeef> http://ix.io/3SHT
[03:40:53] *** Quits: pch (~pch@66.49.131.33) (Remote host closed the connection)
[03:44:53] *** Joins: pch (~pch@66.49.131.33)
[03:59:44] *** Joins: ltriant_ (~ltriant@ec2-13-211-134-196.ap-southeast-2.compute.amazonaws.com)
[04:00:37] *** Quits: ltriant (~ltriant@194-223-10-27.tpgi.com.au) (Ping timeout: 240 seconds)
[04:02:01] *** Quits: arkanoid (~arkanoid@2-238-151-49.ip244.fastwebnet.it) (Ping timeout: 256 seconds)
[04:15:45] <FromDiscord> <Girvo> Is a returned seq[byte] from a proc by copy? or is it by ref as its managed? Dumb question I know
[04:18:55] <pch> seq is refferential
[04:19:00] <pch> openarray is copied
[04:19:01] <pch> iirc
[04:20:30] <pch> however seqs are also like, they're a reference to a copy usually
[04:20:40] <pch> it's just the direct storage in the seq is not the copy
[04:20:40] <FromDiscord> <abdu> sent a code paste, see https://play.nim-lang.org/#ix=3SIh
[04:22:30] <FromDiscord> <Girvo> Awesome
[04:22:39] <FromDiscord> <Girvo> Thats what I was expecting, cheers 🙂
[04:25:08] <FromDiscord> <Girvo> I'm having to pass around a lot of `seq[byte]` for the work I'm doing. Good fun, but nice to work with honestly
[04:26:45] <FromDiscord> <Elegantbeef> what do you mean?↵(@abdu)
[04:27:33] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3SIk
[04:36:08] <FromDiscord> <abdu> sent a code paste, see https://paste.rs/rw9
[04:38:34] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3SIm
[04:48:16] <FromDiscord> <abdu> Works great.. so what insight on quote do, should `var l = newLit 6` be better put inside it or just that ?
[04:48:55] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3SIq
[04:48:58] <FromDiscord> <abdu> Thanks for useful contribution
[04:49:06] <FromDiscord> <Elegantbeef> In this case there is 0 reason to use a macro
[04:49:48] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3SIr
[04:51:42] <FromDiscord> <Girvo> Whats the current workflow for working on Nim itself, say if I wanted to try and fix `createThread` etc. for FreeRTOS on the ESP32?
[04:52:23] <FromDiscord> <Elegantbeef> Fork the git repo, follow the build instructions, modify the file, make a PR, profit
[04:52:48] <FromDiscord> <Elegantbeef> https://nim-lang.github.io/Nim/contributing.html is useful aswell
[04:57:16] *** Joins: kayabaNerve (~kayabaNer@user/kayabanerve)
[05:01:21] <FromDiscord> <Elegantbeef> Oh also @Girvo `openArray`s are slices so even if they're copied they're just a pointer and len so it's cheap
[05:02:02] <FromDiscord> <Elegantbeef> You  generally want to use them instead of index slicing if you care about memory usage
[05:03:36] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3SIC
[05:06:21] <FromDiscord> <Girvo> Ohhhhhhh neat
[05:06:42] <FromDiscord> <Girvo> Alright I might swap the nesper stuff to work with openarray instead. I think it'll be superior for what I'm after, I'll have a play though
[05:06:54] <FromDiscord> <Girvo> Cheers! (now drink)
[05:07:14] <FromDiscord> <Elegantbeef> Drinky drinky is bad for the health
[05:07:55] <FromDiscord> <Girvo> Like _incredibly_ bad lol. I've never understood the "Ballmer Peak" stuff, alcohol makes programming way too difficult for me
[05:08:26] <FromDiscord> <Elegantbeef> I've never drank so no clue for me, i do know that alcohol can be a stimulant though
[05:09:02] <FromDiscord> <Girvo> Not missing much. I'm stoked that the no-alcohol gins are easily available where I am now. All the taste, none of the downside
[05:10:26] <FromDiscord> <Elegantbeef> I'm like the completely wrong person for this area, rural Canada yet I dont drink or do drugs
[05:10:53] <FromDiscord> <Girvo> Haha yeah
[05:11:01] <FromDiscord> <creikey> https://github.com/treeform/windy/blob/master/src/windy.nim#L10 windy exports vmath here, can I `import windy` but just the exported vmath as I don't want the whole library imported?
[05:12:26] <FromDiscord> <Girvo> `vmath` appears to be a separate library, no?
[05:13:29] <FromDiscord> <Girvo> Though its not in the nimble requirements list. Likely a sub-req of one of its dependencies?
[05:13:47] <FromDiscord> <creikey> In reply to @Girvo "Though its not in": it is yes
[05:13:56] <FromDiscord> <creikey> it's a requirement of `windy` and exported from it
[05:14:05] <FromDiscord> <creikey> I guess I could just do `requries vmath`
[05:14:09] <FromDiscord> <creikey> and import vmath
[05:14:12] <FromDiscord> <creikey> and it doesn't install it twice
[05:14:14] <FromDiscord> <Girvo> Yeah thats what I'd do if thats what you're after
[05:14:52] <FromDiscord> <Girvo> As long as the version requirement matches, it will use the same one
[05:15:08] <FromDiscord> <creikey> just checked and it didn't even have a requires vmath in the nimble file so I opened an issue
[05:16:30] <FromDiscord> <Girvo> Yeah thats what threw me off
[05:16:42] <FromDiscord> <Girvo> And I can't see it in the other requires so far
[05:17:28] <FromDiscord> <Girvo> Can you see `vmath` in your `.nimble/pkgs` folder after installing `windy`?
[05:23:55] <FromDiscord> <Elegantbeef> Seems it's a forgetten dependancy
[05:24:26] <FromDiscord> <Girvo> Yeah, most likely because its by the same author so they've `nimble develop`-ed it
[05:24:47] <FromDiscord> <Girvo> I made the same mistake with `nesper` initially lol
[05:28:31] <FromDiscord> <Elegantbeef> Yea i've done similar
[05:31:43] <FromDiscord> <creikey> I feel like that should be linted for
[06:17:57] <NimEventer> New thread by Mardiyah: The 'for i in ...' loop inside parsing macro , see https://forum.nim-lang.org/t/9020
[07:02:29] <FromDiscord> <Kiwids> hi guys. I am coding a small webapp that connected to the backend SQLite DB and using jester to get the request from client. But it seems like somewhere in the thread that is blocking( i have to press `Enter` in console to make the data parse thru). I tried to make all function async, but seems like its still unstable sometimes. I wonder if theres a way for me to find out where exactly the blockage is at
[07:04:07] <FromDiscord> <Kiwids>  https://media.discordapp.net/attachments/371759389889003532/954221135459921950/unknown.png
[07:04:23] <FromDiscord> <Kiwids> this is the API that I was testing and getting stuck...
[07:12:30] <FromDiscord> <Kiwids> reduced the code to, still getting a block https://media.discordapp.net/attachments/371759389889003532/954223241986191370/unknown.png
[07:13:39] <FromDiscord> <Kiwids> 🤔  could it be the decode
[07:15:48] <FromDiscord> <Kiwids> nope...
[07:16:35] <FromDiscord> <Kiwids> literaly this gets blocked. might be a console app issue on windows? im sorry guys i am so noob at this... https://media.discordapp.net/attachments/371759389889003532/954224272392478720/unknown.png
[07:18:09] <nrds> <06Prestige99> You think the echo is blocking execution?
[07:19:16] <FromDiscord> <Kiwids> oh lord
[07:19:26] <FromDiscord> <Kiwids> 😢
[07:20:54] <FromDiscord> <Kiwids> I needa a way to see if the request is actually coming in tho.. 🤔
[07:21:24] <nrds> <06Prestige99> echo should work fine afaik
[07:22:26] <FromDiscord> <Kiwids> hmmm that's so weird... I have two bots just sending get request and it gets blocked. but maybe let me try something to see if its the echo
[07:23:01] <FromDiscord> <Kiwids> if its blocked without echoing. I should be able to see it if I send the 3rd request on top of my 2 bots, the server should hang
[07:23:58] <FromDiscord> <Kiwids> nope.. it still blocking.
[07:27:59] <FromDiscord> <Elegantbeef> Do you have a `readline` somewhere?
[07:28:20] <FromDiscord> <Kiwids> yes
[07:28:34] <FromDiscord> <Kiwids> everytime when program starts. it asks me if I want to reinitiate the DB
[07:28:37] <FromDiscord> <Elegantbeef> Well there is you blocking
[07:28:38] <FromDiscord> <Kiwids> you think that's the problem?
[07:28:53] <FromDiscord> <Elegantbeef> If it's not in the loop, no
[07:29:04] <FromDiscord> <Kiwids> its not
[07:29:10] <FromDiscord> <Elegantbeef> But you're describing a `readLine` inside your programs loop
[07:29:20] <FromDiscord> <Elegantbeef> Needing to hit enter sounds exactly like a readline in the loop
[07:29:26] <FromDiscord> <Kiwids>  https://media.discordapp.net/attachments/371759389889003532/954227505680777226/unknown.png
[07:29:34] <FromDiscord> <Kiwids> this function I create calls a readLine()
[07:30:06] <FromDiscord> <Elegantbeef> Can i see the entire program?
[07:30:07] <FromDiscord> <Kiwids> In reply to @Elegantbeef "Needing to hit enter": yeah i know haha. sometimes I need to press `Enter` after 5 get request. sometimes is 2
[07:30:31] <FromDiscord> <Kiwids> I am so sorry can't really share the source code.
[07:30:37] <FromDiscord> <Kiwids> (edit) "I am so sorry can't really share the ... source" 03added "full"
[07:31:08] <FromDiscord> <Elegantbeef> Cant say much then aside from make sure your stdinIO isnt done in the main loope
[07:32:32] <FromDiscord> <Kiwids> yeah! my code looks just like this one https://github.com/dom96/nim-in-action-code/tree/master/Chapter7/Tweeter
[07:32:41] <FromDiscord> <Kiwids> as I was reading the book and want to start a small project
[07:34:23] <FromDiscord> <Kiwids>  https://media.discordapp.net/attachments/371759389889003532/954228751619727390/unknown.png
[07:34:46] <FromDiscord> <Elegantbeef> `nim -v`?
[07:35:35] <FromDiscord> <Kiwids>  https://media.discordapp.net/attachments/371759389889003532/954229055102783578/unknown.png
[07:36:04] <FromDiscord> <Kiwids> `nim c --gc:boehm  --threads:on  -d:windows --app:console -o:Server.exe `
[07:36:08] <FromDiscord> <Kiwids> and this is my compiler falg
[07:36:12] <FromDiscord> <Kiwids> (edit) "falg" => "flag"
[07:36:21] <FromDiscord> <Elegantbeef> What does `renderMain`, `renderTimeline` and `renderLogin` do?
[07:36:43] <FromDiscord> <Kiwids> it copies the  sql data and put them into a hardcoded html page
[07:36:52] <FromDiscord> <Kiwids> and just feed it back to the client iirc
[07:37:19] <FromDiscord> <Elegantbeef> So there is 100% no stdin io there in your case?
[07:38:19] <FromDiscord> <Kiwids> `        let ok = readLineFromStdin("Previous database file found, do you want to start fresh? [Y/N] ", line)` in createDatbase() I have one. but that's it
[07:39:12] <FromDiscord> <Kiwids> and if the previous database file is not there. it won't even promot for user input, I wrapped the readLine under a fileExist()
[07:39:17] <FromDiscord> <Kiwids> (edit) "readLine" => "`readLine`" | "fileExist()" => "`fileExist()`"
[07:39:50] <FromDiscord> <Elegantbeef> If thats the case this shouldnt be happening
[07:39:56] <FromDiscord> <Elegantbeef> But without code i cant say anything
[07:40:10] <FromDiscord> <Kiwids> sure thanks! i am also very confused hah
[07:40:31] <FromDiscord> <Kiwids> I tried spawn new threads to handle some db tasks. but still no luck
[07:40:39] <FromDiscord> <Kiwids> (edit) "tasks." => "tasks(previous async)."
[07:40:44] <FromDiscord> <Elegantbeef> Well it will never fix the actual problem
[07:40:51] <FromDiscord> <Kiwids> yep
[07:41:50] *** Quits: slowButPresent (~slowButPr@user/slowbutpresent) (Quit: leaving)
[07:42:45] <FromDiscord> <Kiwids> like if I press `Enter`, the server will be working fine for a solid minute https://media.discordapp.net/attachments/371759389889003532/954230855352606741/unknown.png
[07:43:07] <FromDiscord> <Kiwids> but it will eventually get block, where no debug info is displayed until the next `Enter`
[07:49:05] <FromDiscord> <Elegantbeef> I can suggest going to the nearest well and throw a penny and wish for a solution
[07:49:17] <FromDiscord> <Kiwids> sounds like a plan!
[07:54:19] <FromDiscord> <Kiwids> `customOverlapped.data.fd == lpCompletionKey.AsyncFD`  [AssertionDefect]
[07:54:26] <FromDiscord> <Kiwids> got a error and program crashed 🤔
[07:54:38] <FromDiscord> <Kiwids> could it be this? https://media.discordapp.net/attachments/371759389889003532/954233846054924308/unknown.png
[07:54:55] <FromDiscord> <Kiwids> since I reopen the db file everytime the API gets called?
[07:56:05] <FromDiscord> <Elegantbeef> You arent closing the dbconnection
[07:56:13] <FromDiscord> <Kiwids> oh fk
[07:56:22] <FromDiscord> <Kiwids> I commented some of those line out...
[07:56:25] <FromDiscord> <Elegantbeef> So if you open a new one then dont close it that could be an isssue
[07:56:37] <FromDiscord> <Kiwids> ye
[07:56:54] <FromDiscord> <Kiwids> let me try that
[07:57:27] <FromDiscord> <Kiwids> still blocked. let me try to pass as ref
[07:57:33] <FromDiscord> <Elegantbeef> Doesnt make sense that `enter` would continue
[07:58:02] <FromDiscord> <Kiwids> hmm yeah. it crashed again with db.close()
[07:58:06] <FromDiscord> <Elegantbeef> Are you 1000% certain the pressing of enter moves it and it's not just a coincidence?
[07:58:20] <FromDiscord> <Kiwids> nvm
[07:58:34] <FromDiscord> <Kiwids> In reply to @Elegantbeef "Are you 1000% certain": yeah no haha I can screenshare the flow haha
[07:59:13] <FromDiscord> <Elegantbeef> That'd mean to me atleast something is getting your stdin as a file descriptor which would be a very odd bug
[07:59:35] <FromDiscord> <Kiwids> 🤔
[08:01:06] <FromDiscord> <Bubblie> how do I convert nim code to c++ code?
[08:01:27] <FromDiscord> <Elegantbeef> You rewrite it but with 20% more brainpower
[08:01:55] <FromDiscord> <Bubblie> I mean like, since nim compiles to c/c++/js I was wondering where to get the output
[08:02:10] <FromDiscord> <Elegantbeef> Ah
[08:02:14] <FromDiscord> <Kiwids> you can
[08:02:21] <FromDiscord> <Kiwids> there is a compiler flag for it i think
[08:02:26] <FromDiscord> <Elegantbeef> it's in your `.cache/nim/` or you can do `--nimcache:someDir`
[08:03:03] <FromDiscord> <Bubblie> I wonder how neat the output would be... I just started with nim and I love it so far because let me tell you c/c++ is awful
[08:03:16] <FromDiscord> <Elegantbeef> It's not meant to be human read
[08:03:22] <FromDiscord> <Bubblie> yeah
[08:03:24] <FromDiscord> <Elegantbeef> You can do `-d:danger` to make it a bit more readable
[08:03:29] <FromDiscord> <Bubblie> I would assume so since its compiling to it
[08:03:47] <FromDiscord> <Bubblie> In reply to @Elegantbeef "You can do `-d:danger`": ah okay
[08:03:49] <FromDiscord> <Bubblie> thank you
[08:04:06] <FromDiscord> <Elegantbeef> Also can use `--gc:arc` or `orc` which will help a bit
[08:04:16] <FromDiscord> <Bubblie> I like that I can use c/c++ libraries in nim without having to use c/c++ LOL
[08:04:21] <FromDiscord> <Elegantbeef> Dont suggest danger unless you want somewhat clean IR, otherwise use `release`
[08:04:35] <FromDiscord> <Bubblie> In reply to @Elegantbeef "Dont suggest danger unless": ah okay, thank you so much
[08:04:41] <FromDiscord> <Bubblie> Ill keep that in mind
[08:05:24] <FromDiscord> <Bubblie> is there vulkan graphics bindings for nim?
[08:05:31] <FromDiscord> <Elegantbeef> Yes
[08:05:39] <FromDiscord> <Bubblie> oh wow, that's awesome
[08:06:30] <FromDiscord> <Bubblie> There is also NimGL 👀
[08:06:34] <FromDiscord> <Bubblie> sick
[08:06:52] <FromDiscord> <Elegantbeef> You're a gamedev?
[08:07:51] <FromDiscord> <Bubblie> sorta, my main language is java and I mostly make mods for minecraft and applications and I have dabbled with web dev a bit but I really disliked JS
[08:08:01] <FromDiscord> <Bubblie> I was going into vulkan to make my own engine of sorts
[08:08:03] <FromDiscord> <Bubblie> using C++
[08:08:24] <FromDiscord> <Bubblie> but uh well, it wasn't enjoyable using C++
[08:08:34] <FromDiscord> <Elegantbeef> Of course not it's C++ 😛
[08:08:51] <FromDiscord> <Bubblie> my second option is rust but I don't do well with symbol soup languages
[08:08:56] <FromDiscord> <Bubblie> then I found nim yesterday
[08:09:21] <FromDiscord> <Elegantbeef> I also use Nim for gamedev, though i also just make macros for arbitrary things for fun
[08:09:35] <FromDiscord> <Bubblie> that's awesome!
[08:09:51] <FromDiscord> <Bubblie> I hope to use nim for gamedev because of how actually readable things are
[08:10:19] <FromDiscord> <Elegantbeef> It's very good for gamedev imo since it has nice macros and a good type system
[08:10:28] <FromDiscord> <Bubblie> Nim vulkan has no issues right? Or is there something I need to look out for
[08:10:35] <FromDiscord> <Bubblie> In reply to @Elegantbeef "It's very good for": yeah I definitely love the type system here
[08:10:51] <FromDiscord> <Elegantbeef> What do you mean vulkan issues?
[08:12:05] <FromDiscord> <Elegantbeef> I dont use vulkan, so no clue how nice it is to use with Nim
[08:16:58] <FromDiscord> <Bubblie> In reply to @Elegantbeef "What do you mean": as in like, there aren't many problems with the bindings
[08:17:00] <FromDiscord> <Bubblie> is my question
[08:17:10] <FromDiscord> <Elegantbeef> It should be like using it in C
[08:26:33] <FromDiscord> <Equinox> In reply to @Bubblie "my second option is": Symbol soup
[08:26:45] <FromDiscord> <Equinox> What does that mean
[08:27:01] <FromDiscord> <Elegantbeef> `std::<vector<SomeType<int>>`
[08:27:22] <FromDiscord> <huantian> I like my <>
[08:27:47] <FromDiscord> <Equinox> In reply to @Elegantbeef "`std::<vector<SomeType<int>>`": That’s not so bad
[08:28:00] <FromDiscord> <Equinox> How else would you convey that?
[08:28:05] <FromDiscord> <Equinox> What’s the nim way
[08:28:05] <FromDiscord> <Elegantbeef> sorry it's `std::vector<std::variant<int, SomeType<int, float>`
[08:28:11] <FromDiscord> <Elegantbeef> `seq[SomeType[int]`
[08:28:21] <FromDiscord> <Elegantbeef> Perhaps closing both brackets
[08:28:37] <FromDiscord> <Equinox> Yeah but that rust is not correct
[08:28:40] <FromDiscord> <Elegantbeef> It also uses `` and `&` so it gets fucky
[08:28:43] <FromDiscord> <Equinox> You don’t need the std
[08:28:50] <FromDiscord> <Equinox> Vector is just vec
[08:28:53] <FromDiscord> <Elegantbeef> That's not rust
[08:29:08] <FromDiscord> <Equinox> Oh ok
[08:29:13] <FromDiscord> <Equinox> We’re doing C++
[08:29:35] <FromDiscord> <Equinox> I don’t write C++ I have no reason to defend it
[08:29:39] <FromDiscord> <Equinox> Too many things
[08:31:57] <FromDiscord> <Elegantbeef> Rust and C++ both have similar symbol noise imo
[08:33:06] <FromDiscord> <Equinox> The rust version of that is a bit smaller
[08:33:15] <FromDiscord> <Elegantbeef> I mean in general
[08:33:33] <FromDiscord> <Equinox> Vec<sometype<i32>>
[08:34:03] <FromDiscord> <Equinox> In reply to @Elegantbeef "I mean in general": Probably true
[08:35:59] <FromDiscord> <treeform> Crazy Nim bug causing me to pull hair out, I get a segfault in reading and writing to some UncheckedArrays, but if I add some dummy code to slow down to loop it works fine... in fact! just doing 17 inc'ers `for z in 0 ..< 17: counter += 1` works but 16 inc'ers `for z in 0 ..< 16: counter += 1` not enough slow down. What kind of crazy things is this!
[08:36:30] <FromDiscord> <Elegantbeef> Code causing the issue?
[08:38:36] <FromDiscord> <treeform> sent a code paste, see https://play.nim-lang.org/#ix=3SIV
[08:38:44] <FromDiscord> <treeform> its a simple copy loop
[08:39:05] <FromDiscord> <treeform> Can C cause undefined behavior when copying two overlapping 64 bit numbers?
[08:39:10] <FromDiscord> <Elegantbeef> It's syncronous code?
[08:39:18] <FromDiscord> <treeform> yes, no threads, no async
[08:39:32] <FromDiscord> <treeform> fine in orc and arc, but not refc or none
[08:39:52] <FromDiscord> <treeform> if uncomment the `for z in 0 ..` it works
[08:40:15] <FromDiscord> <Elegantbeef> Is `dst` or `dst2` a seq?
[08:40:35] <FromDiscord> <treeform> no its a `ptr UncheckedArray[uint8]`
[08:40:47] <FromDiscord> <Elegantbeef> And it doesnt point to a sequence?
[08:41:01] <FromDiscord> <treeform> yes
[08:41:04] <FromDiscord> <treeform> it comes from a seq
[08:41:16] <FromDiscord> <treeform> I though it was getting moved or something
[08:41:20] <FromDiscord> <Elegantbeef> `gcref` and `gcunref` the see before and after the op
[08:42:01] <FromDiscord> <treeform> I keep the seq around so it does not get collected
[08:42:45] <FromDiscord> <treeform> but I could GCref it so it stays in memory always for ever
[08:44:45] <FromDiscord> <treeform> `GC_ref(dst)` does not help
[08:52:40] <FromDiscord> <Kiwids> aight. just spend some time reading the nim-forum source code..
[08:52:44] <FromDiscord> <Elegantbeef> You do ensure the size is the same or less than right?
[08:52:58] <FromDiscord> <Kiwids> I willl try to adjust my db : dbConn to see if that's the problem
[08:54:55] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3SIX
[08:55:51] <FromDiscord> <Kiwids> also I tried to search for `runForever()` in the source code for Nim-Forum but I couldn't find an
[08:55:52] <FromDiscord> <Kiwids> (edit) "an" => "any"
[08:55:55] <FromDiscord> <Kiwids> (edit) "also I tried to search for `runForever()` in the source code for Nim-Forum but I couldn't find any ... " 03added "🤔"
[08:56:29] <FromDiscord> <Elegantbeef> @treeform\: does the above behave differently?
[08:59:09] <FromDiscord> <treeform> dst is not len is mod 8
[08:59:29] <FromDiscord> <treeform> we need to be able to access any index not just the uint64 steps
[08:59:39] <FromDiscord> <Elegantbeef> Well there you go if dst's len isnt mod 8 you're doing unsafe memory access
[08:59:41] <FromDiscord> <treeform> with bytes
[08:59:42] <FromDiscord> <treeform> sent a code paste, see https://paste.rs/MrG
[09:00:06] <FromDiscord> <treeform> we just want to do it faster
[09:00:11] <FromDiscord> <treeform> by going 8 bytes at a time
[09:00:14] <FromDiscord> <Elegantbeef> If you're writing 8 bytes to a seq that only has allocated 3 bytes you're going to destroy it
[09:00:23] <FromDiscord> <treeform> we make sure its long enough
[09:00:39] <FromDiscord> <Elegantbeef> You should figure out what size fits the best IE `8 -> 4 -> 2 -> 1`
[09:00:51] <FromDiscord> <treeform> the byte works
[09:01:04] <FromDiscord> <treeform> but uin16, uint32, uint64 does not
[09:01:14] <FromDiscord> <Elegantbeef> How does the above code make sure it's long enough
[09:01:17] <FromDiscord> <Elegantbeef> It's offsetting it by 8 bytes writing the 8 bytes from the right
[09:01:35] <FromDiscord> <Elegantbeef> Any remainder will be writing after the sequence
[09:01:52] <FromDiscord> <Bubblie> does nim have algebraic data types?
[09:02:03] <FromDiscord> <Elegantbeef> So if you dont use the largest size that is smaller than dest length it's going to fail
[09:02:13] <FromDiscord> <Elegantbeef> It has object variants which are manually declared tagged unions
[09:02:23] <FromDiscord> <Elegantbeef> There are also things like https://github.com/alaviss/union
[09:03:01] <FromDiscord> <Elegantbeef> In the above case you said the length is not mod 8 which means you write 8 bytes then you attempt to write 8 more and say it's 15 bytes, you have 1 byte going onto some other heap memory
[09:03:35] <FromDiscord> <Elegantbeef> Atleast given what you've explained,  what you're doing is wildly unsafe
[09:04:48] <FromDiscord> <treeform> @ElegantBeef I think you helped me out! I was going to link you the file https://github.com/guzba/zippy/blob/master/src/zippy/inflate.nim#L216-L224 but turns out it has a newer version that fixes the issues that I did not see. Thanks!
[09:05:16] <FromDiscord> <treeform> The `if copyTo < 0` is strange but its a cheap way to make it work.
[09:07:11] <FromDiscord> <Elegantbeef> I mean i clearly didnt help out at all, i just made you look at it 😛
[09:10:01] <FromDiscord> <Elegantbeef> I still dont think `copy64` is actually safe, but i'm a fool
[09:35:12] <FromDiscord> <treeform> We been using copy64 in a ton of places. But maybe it some sort of unsafe behavior which works 99.999% of the time.
[09:35:18] <FromDiscord> <Bubblie> Can you have nim without garbage collection?
[09:35:27] <FromDiscord> <treeform> This is very strange for us.
[09:35:30] <FromDiscord> <Bubblie> And manually memory manage
[09:35:37] <FromDiscord> <Elegantbeef> You can but there isnt much point to
[09:35:54] <FromDiscord> <Elegantbeef> Arc/Orc give you a good memory management system  and isnt a typical GC
[09:36:04] <FromDiscord> <Elegantbeef> Orc is RAII like memory management with a cycle collector
[09:36:12] <FromDiscord> <treeform> We do manually memory manage in tight loops...
[09:36:20] <FromDiscord> <treeform> (edit) "manage" => "management"
[09:36:39] <FromDiscord> <Bubblie> Is there any docs on nim’s memory management system?
[09:36:49] <FromDiscord> <Elegantbeef> I mean you wont really notice if what i think is happening is happening, since you're writing to random spots on the heap
[09:36:56] <FromDiscord> <Rika> https://nim-lang.github.io/Nim/mm.html
[09:37:34] <FromDiscord> <Elegantbeef> Since you're writing in blocks of 8 i think you're accidently ruining data after the sequence, though i'm not 100% certain
[09:38:06] <FromDiscord> <Elegantbeef> Like the `<=` 16 here is very very suspect to me https://github.com/guzba/zippy/blob/master/src/zippy/inflate.nim#L204-L206
[09:38:45] <FromDiscord> <Elegantbeef> I know it's min size is 16 based off line 200, but i dont see anything smaller than 8 bytes being written
[09:39:13] <FromDiscord> <Bubblie> I was just wondering how memory management would play out in nim if I needed it, like if I wanted to run nim in something relatively old and I couldn’t use a gc in it
[09:39:16] <FromDiscord> <Elegantbeef> So like what happens if your source is not divisible by 8
[09:39:51] <FromDiscord> <Elegantbeef> You'd use it like c with `alloc` and `dealloc` but Nim's `arc` is RAIII like so is generally very low overhead
[09:39:52] <FromDiscord> <treeform> In reply to @Elegantbeef "Since you're writing in": I am pretty sure we don't write beyond the allocated memory. We have asserted that to death.
[09:40:05] <FromDiscord> <Rika> In reply to @Bubblie "I was just wondering": As many people have already told you ARC isn’t a “GC” exactly
[09:40:34] <FromDiscord> <Elegantbeef> I've used arc on the rpi pico, it's quite easy and lovely to use
[09:41:02] <FromDiscord> <Elegantbeef> It's a deterministic memory mangement system that cannot handle cycles so pretty ideal for embedded
[09:42:00] <FromDiscord> <treeform> I also like arc for games and such
[09:42:26] <FromDiscord> <Elegantbeef> I'd say use orc by default, if you dont need it it's not going to cost you anything
[09:42:27] <FromDiscord> <treeform> I wish I could run my stuff with orc enable that only tells me when it finds cycles I forgot about, and then release with arc.
[09:43:11] <FromDiscord> <Bubblie> In reply to @Rika "As many people have": Yeah
[09:43:15] <FromDiscord> <Elegantbeef> Probably could add a `--nimDebugOrc` which echos some info for cycles
[09:43:28] <FromDiscord> <Elegantbeef> Dont know how hard that'd be to add to the compiler
[09:43:32] <FromDiscord> <Bubblie> So ORC is more manual than ARC right?
[09:43:35] <FromDiscord> <Elegantbeef> I've not touched memory related stuff
[09:43:36] <FromDiscord> <Elegantbeef> No
[09:43:49] <FromDiscord> <Elegantbeef> Arc is RAII, so it doesnt have a cycle collector
[09:43:53] <FromDiscord> <Bubblie> OH
[09:43:55] <FromDiscord> <Elegantbeef> Orc is Arc + Cycle collector
[09:43:56] <FromDiscord> <Bubblie> Alright
[09:44:02] <FromDiscord> <Bubblie> yeah got it
[09:44:35] <FromDiscord> <Elegantbeef> So arc will insert RC destroy calls into your program and your entire GC will be a static placement of decrements and calls to destroy
[09:44:43] <FromDiscord> <Elegantbeef> So with arc you know where things are going to be destructed
[09:45:14] <FromDiscord> <Bubblie> Thats really cool
[09:45:16] <FromDiscord> <Elegantbeef> Worth noting that the GCs only effect `ref`, `seq` and `string`
[09:45:30] <FromDiscord> <Bubblie> This language is great oml
[09:45:57] <FromDiscord> <Elegantbeef> `ptr` is always manually managed which can point to the GC'd stuff if you know it's safe(It's a system programming language afterall, need unsafe features)
[09:46:25] <FromDiscord> <Elegantbeef> You havent even experienced the best part, introspective macros which allow you to abstract low level code to a high level api 😛
[09:46:52] <FromDiscord> <Rika> Beef here tends to go overkill on those though so practice moderation
[09:47:01] <FromDiscord> <Elegantbeef> What's moderation?
[09:47:11] <FromDiscord> <Elegantbeef> Everything is a nail and i have a macro hammer
[09:49:42] <FromDiscord> <Elegantbeef> To be fair rika my largest Nim package requires macros heavily, so.... uhhh it'd be a disservice if i wasnt proficient in macros!
[09:52:10] <FromDiscord> <Bubblie> Lol
[09:57:49] <FromDiscord> <Rika> thats not my point
[09:57:56] <FromDiscord> <Rika> its fine do be proficient but you're trigger happy
[09:58:22] <FromDiscord> <Elegantbeef> Did someone say macro
[09:59:41] <FromDiscord> <Elegantbeef> Jokes aside, i do try to use the least complex tool
[10:00:11] <FromDiscord> <Bubblie> Im gonna try nim-vulkan tommorow
[10:00:26] <FromDiscord> <Elegantbeef> Have fun writing 10000 loc for a single triangle
[10:00:33] <FromDiscord> <Bubblie> Try to render a triangle without having to type 10000 lines
[10:00:41] <FromDiscord> <Bubblie> LMAO
[10:00:52] <FromDiscord> <Bubblie> We said the same thing kinda
[10:01:03] <FromDiscord> <Bubblie> Yeah to render a triangle it takes a literal bible
[10:01:06] <FromDiscord> <Elegantbeef> https://github.com/beef331/truss3d/blob/master/src/truss3D.nim#L99-L131 cube is easy 😛
[10:01:27] <FromDiscord> <Elegantbeef> Yea my opengl/sdl2/assimp abstraction is like 1k loc so far i think
[10:01:43] <FromDiscord> <Bubblie> Vulkan java vulkan rust vulkan C++ arent all that better in verbosity
[10:01:47] <FromDiscord> <Bubblie> So like
[10:02:20] <FromDiscord> <Elegantbeef> Vulkan is just verbose, so it's just going to be getting that to a point you can happily use it
[10:02:33] <FromDiscord> <Elegantbeef> Personally i can barely stand the opengl API so i dont know how people write vulkan
[10:03:09] <FromDiscord> <Bubblie> Well, I hate OpenGL because of opengl’s state machine
[10:03:11] <FromDiscord> <Bubblie> It drives me mad
[10:03:26] <FromDiscord> <Bubblie> The reason people use vulkan is to avoid gl’s state
[10:03:46] <FromDiscord> <Bubblie> Because oh my god, I had to deal with opengl state before for one of my projects
[10:03:48] <FromDiscord> <Bubblie> Horrible
[10:04:26] <FromDiscord> <Elegantbeef> My present API is more like raylib so it's hardly an issue
[10:09:14] *** Quits: def- (~def-@static.238.114.9.176.clients.your-server.de) (*.net *.split)
[10:09:15] *** Quits: ssiyad (~ssiyad@user/ssiyad) (*.net *.split)
[10:09:15] *** Quits: tinystoat (~squeek@user/tinystoat) (*.net *.split)
[10:14:34] *** Joins: def- (~def-@static.238.114.9.176.clients.your-server.de)
[10:14:34] *** Joins: ssiyad (~ssiyad@user/ssiyad)
[10:14:34] *** Joins: tinystoat (~squeek@user/tinystoat)
[10:14:58] *** Quits: ssiyad (~ssiyad@user/ssiyad) (Max SendQ exceeded)
[10:15:05] *** Joins: ssiyad (~ssiyad@user/ssiyad)
[10:34:01] <NimEventer> New post on r/nim by thindil: Binding Nim to C++ std::list ❚ A Scripter's Notes, see https://reddit.com/r/nim/comments/tgvhjy/binding_nim_to_c_stdlist_a_scripters_notes/
[10:49:48] *** Joins: arkurious (~arkurious@user/arkurious)
[10:57:06] *** Quits: vicecea (~vicecea@gateway/vpn/pia/vicecea) (Remote host closed the connection)
[10:57:36] *** Joins: vicecea (~vicecea@gateway/vpn/pia/vicecea)
[11:12:28] <FromDiscord> <Schelz> Anyone know how to bind to nim a cpp interface M
[11:12:35] <FromDiscord> <Schelz> (edit) "M" => "?"
[11:48:44] *** Joins: PMunch (~PMunch@user/pmunch)
[12:06:22] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:d4f3:e167:a65d:25ad)
[12:35:51] <PMunch> Hmm, why is httpclient.Response.status a string and not a HttpCode?
[12:37:14] <FromDiscord> <Elegantbeef> It perhaps carries the extended message like "- page not found"?
[12:37:45] <FromDiscord> <Rika> https://nim-lang.org/docs/httpclient.html#code
[12:50:40] <FromDiscord> <abdu> How do we pre-allocate a string to avoid reallocation expense ?
[12:50:59] <FromDiscord> <Elegantbeef> `newStringOfCap`
[12:59:15] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:d4f3:e167:a65d:25ad) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[13:48:35] *** Joins: lumo_e (~enrico@151.29.53.201)
[13:50:02] *** Quits: PMunch (~PMunch@user/pmunch) (Quit: Leaving)
[14:00:29] <FromDiscord> <abdu> How NIm's syntax a=b=c=5 , just like of it in C ?
[14:10:13] <Amun-Ra> a=5; b=5; etc.
[14:13:12] <FromDiscord> <Generic> Nim does not have a multiple assignment syntax like this
[14:13:21] <FromDiscord> <abdu> real RHS is about 30 characters
[14:13:32] <FromDiscord> <Generic> in Nim assignments are statements and not expressions
[14:16:14] <Amun-Ra> abdu: this is a call for refactoring
[14:17:10] <FromDiscord> <mratsim> In reply to @abdu "How NIm's syntax a=b=c=5": If you want you can create a template `:=` that assigns and return the assignment.
[14:18:24] <FromDiscord> <mratsim> sent a code paste, see https://play.nim-lang.org/#ix=3SJP
[14:22:07] *** Quits: Lord_Nightmare (znc@user/lord-nightmare/x-3657113) (Quit: ZNC - http://znc.in)
[14:23:10] <FromDiscord> <Generic> doesn't this need a discard or a discardable somewhere?
[14:23:43] <FromDiscord> <Rika> Yes I assume so
[14:26:11] *** Joins: Lord_Nightmare (znc@user/lord-nightmare/x-3657113)
[14:35:04] *** Joins: NeoCron (~NeoCron@p200300e47f277d00ff410b6acd6256a7.dip0.t-ipconnect.de)
[14:47:55] <FromDiscord> <exelotl> (please don't actually do this though) 😅
[14:50:58] <FromDiscord> <Rika> Well it’s your choice and you should know the downsides or consequences of using such pattern
[14:53:22] <FromDiscord> <0ffh> sent a code paste, see https://play.nim-lang.org/#ix=3SJW
[14:54:51] <FromDiscord> <0ffh> sent a code paste, see https://paste.rs/HiJ
[15:36:11] <FromDiscord> <Daan B> image.png https://media.discordapp.net/attachments/371759389889003532/954350002174582804/image.png
[15:36:26] <FromDiscord> <Daan B> image.png https://media.discordapp.net/attachments/371759389889003532/954350064321568818/image.png
[15:37:29] <FromDiscord> <Rika> Tried running under valgrind with malloc?
[16:01:44] <FromDiscord> <Forest> 👀 https://github.com/jjv360/nim-classes
[16:03:37] <FromDiscord> <Forest> Any reasons why this shouldn't be used?
[16:04:48] <FromDiscord> <Forest> Or does anyone know of a more complete implementation
[16:04:55] <FromDiscord> <Forest> Yes i haven't given up on classes in Nim
[16:06:56] <FromDiscord> <auxym> I don't see anything any reason not to use that style, other than the usual caveats of OOP
[16:07:23] <FromDiscord> <auxym> summed up here: https://boxbase.org/entries/2020/aug/3/case-against-oop/
[16:07:39] <FromDiscord> <Daan Breur> In reply to @Rika "Tried running under valgrind": Nope. What's that?
[16:08:28] <Amun-Ra> Forest: method is one of the reasons
[16:12:42] <FromDiscord> <Forest> In reply to @auxym "summed up here: https://boxbase.org/entries/2020/au": Hm, doesn't seem like anything that limits me in Python
[16:12:46] <FromDiscord> <Forest> In reply to @Amun-Ra "<@909883978717204561>: method is one": Wdym?
[16:23:57] <FromDiscord> <auxym> deep, opaque class hierarchies and lots of hidden mutable state are things that OOP tend to migrate towards, but I can guess can be avoided if you are careful
[16:25:56] <FromDiscord> <auxym> methods use dynamic dispatch, which is a slight performance disadvantage but can also make it harder to reason about which overload will be called
[16:31:11] <FromDiscord> <DevNugget> how do I delete the last value from a sequence?↵using ^1 or -1 gives an error
[16:37:49] <FromDiscord> <konsumlamm> https://nim-lang.github.io/Nim/system.html#pop%2Cseq%5BT%5D
[16:56:28] *** Joins: slowButPresent (~slowButPr@user/slowbutpresent)
[17:09:49] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:d4f3:e167:a65d:25ad)
[17:20:30] <FromDiscord> <mratsim> In reply to @Forest "Or does anyone know": https://github.com/yglukhov/iface
[17:21:06] <FromDiscord> <Forest> In reply to @auxym "methods use dynamic dispatch,": Ah fair
[17:21:12] <FromDiscord> <Forest> In reply to @mratsim "https://github.com/yglukhov/iface": Thanks!
[17:45:49] <NimEventer> New thread by Markus_gritsch: NewSeq() named inconsistently?, see https://forum.nim-lang.org/t/9021
[17:54:58] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:d4f3:e167:a65d:25ad) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[17:55:59] *** Quits: robertmeta (sid514@user/robertmeta) (Ping timeout: 250 seconds)
[17:57:36] *** Joins: robertmeta (sid514@user/robertmeta)
[17:57:40] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:d4f3:e167:a65d:25ad)
[17:58:57] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Quit: I'm a quit message virus. Please replace your old line with this line and help me take over the world. <screw you aloo_shu my old line was better and more creative!>)
[18:40:01] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:d4f3:e167:a65d:25ad) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[18:53:18] <FromDiscord> <DevNugget> how can I insert a value into the second last position of a sequence?
[18:56:17] <FromDiscord> <Tanguy> sent a code paste, see https://play.nim-lang.org/#ix=3SKZ
[18:57:09] <FromDiscord> <Tanguy> (edit) "https://play.nim-lang.org/#ix=3SKZ" => "https://play.nim-lang.org/#ix=3SL1"
[18:57:26] <NimEventer> New Nimble package! ftd2xx - Nim wrapper for FTDI ftd2xx library, see https://github.com/leeooox/ftd2xx
[18:57:33] <FromDiscord> <Tanguy> (edit) "https://play.nim-lang.org/#ix=3SL1" => "https://play.nim-lang.org/#ix=3SL3"
[19:08:41] <FromDiscord> <Eshoe> I think I'm too used to dynamic languages. Just the sheer need to convert types. Say an int seq to a string seq is tripping me up.
[19:09:35] <FromDiscord> <Tanguy> sent a code paste, see https://play.nim-lang.org/#ix=3SL6
[19:10:20] <FromDiscord> <Eshoe> 😯 awesome
[19:12:10] <FromDiscord> <Eshoe> Is there a documentation style that's I want to do X, here are the functions you might want to use? Or is the only option right now is to go through libraries until you find something nice?
[19:13:50] <FromDiscord> <demotomohiro> https://nim-lang.org/docs/lib.html↵https://internet-of-tomohiro.netlify.app/nim/faq.en.html
[19:14:54] <FromDiscord> <demotomohiro> If you want to searcch for libraries: https://internet-of-tomohiro.netlify.app/nim/faq.en.html#libraries-is-there-list-of-libraries-or-packages-for-nimqmark
[19:15:38] <FromDiscord> <Eshoe> The FAQ looks interesting, thanks!
[19:19:58] <FromDiscord> <Require Support> is there a better way to include a header file other than `{.emit: """#include "../some_header.h"""".}`
[19:23:38] <FromDiscord> <demotomohiro> Header pragma: https://nim-lang.org/docs/manual.html#implementation-specific-pragmas-header-pragma
[19:47:21] <FromDiscord> <Shinyzenith> How do I specify that a function parameter should be a pointer
[19:47:37] <FromDiscord> <Rika> Pointer to what
[19:47:44] <FromDiscord> <Rika> Void pointer? Typed pointer?
[19:47:52] <FromDiscord> <Rika> Do you really want a pointer?
[19:47:58] <FromDiscord> <Shinyzenith> In reply to @Rika "Do you really want": I do
[19:48:00] <FromDiscord> <Shinyzenith> sent a code paste, see https://play.nim-lang.org/#ix=3SLj
[19:48:06] <FromDiscord> <Shinyzenith> wayland callbacks depend heavily on pointers
[19:48:10] <FromDiscord> <Rika> Void pointer is ‘pointer’
[19:48:15] <FromDiscord> <Shinyzenith> oke
[19:48:51] <FromDiscord> <Shinyzenith> not sure what I'm doing wrong but I think it wants me to give the function a type too↵I'm not sure if that's even possible https://media.discordapp.net/attachments/371759389889003532/954413582987186176/unknown.png
[19:48:57] <FromDiscord> <Shinyzenith> this is after I changed it to just `pointer` ^
[19:50:28] <FromDiscord> <Rika> Add a cdecl pragma
[19:50:33] <FromDiscord> <Shinyzenith> I did
[19:50:44] <FromDiscord> <Shinyzenith>  https://media.discordapp.net/attachments/371759389889003532/954414057165828198/unknown.png
[19:50:52] <FromDiscord> <Shinyzenith> dk how to remove gcsafe
[19:50:57] <FromDiscord> <Shinyzenith> or locks:0
[19:51:13] <Amun-Ra> you lack a ptr in 1st argument
[19:51:58] <FromDiscord> <Shinyzenith> Oh yes
[19:52:38] <FromDiscord> <Shinyzenith> should I just change it to listener: pointer <mytype> ? https://media.discordapp.net/attachments/371759389889003532/954414537614975046/unknown.png
[19:52:48] <FromDiscord> <Rika> No
[19:52:51] <Amun-Ra> pass 1st argument via ddr
[19:52:54] <Amun-Ra> addr*
[19:52:54] <FromDiscord> <Rika> “ptr” for typed
[19:53:06] <FromDiscord> <Rika> So ‘ptr type’
[19:53:15] <FromDiscord> <Shinyzenith> ok
[19:53:38] <FromDiscord> <Shinyzenith> yep ptr worked
[19:53:45] <FromDiscord> <Shinyzenith> addr asked me to change it to unsafeAddr
[19:53:54] <FromDiscord> <Shinyzenith> and that complained about a possible null pointer
[20:07:01] *** Quits: lumo_e (~enrico@151.29.53.201) (Ping timeout: 240 seconds)
[20:29:49] <Amun-Ra> Shinyzenith: either use unsafeAddr or make that thing 'var'
[20:31:20] <FromDiscord> <Shinyzenith> ptr works fine :D
[21:47:52] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:d4f3:e167:a65d:25ad)
[22:25:05] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:d4f3:e167:a65d:25ad) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[22:52:11] *** Joins: pro (~pro@user/pro)
[22:56:01] <FromDiscord> <guzba> In reply to @Elegantbeef "I know it's min": there is no check for that, it is all set up to work even if you only actually want eg 12 of the 16 bytes written
[23:20:34] *** Quits: pch (~pch@66.49.131.33) (Read error: Connection reset by peer)
[23:37:48] <FromDiscord> <Eshoe> sent a code paste, see https://play.nim-lang.org/#ix=3SMF
[23:53:11] <FromDiscord> <Bubblie> Nim has pointers
[23:53:13] <FromDiscord> <Bubblie> Right
[23:54:47] <FromDiscord> <Bubblie> Since pointers are technically memory management, they cannot be gc’d right?
