[00:05:46] *** Quits: hans (~hans@146.84-48-252.nextgentel.com) (Ping timeout: 260 seconds)
[00:21:19] <bagder> c-ares now also special-cases "localhost": https://github.com/c-ares/c-ares/pull/430
[00:21:21] -curelbot- [GitHub] PR #430: RFC6761: special case "localhost" (https://github.com/c-ares/c-ares/pull/430)
[00:22:10] *** Joins: hans (~hans@36.84-48-255.nextgentel.com)
[00:38:26] *** Quits: jfuller (~jimfuller@ip-85-160-10-54.eurotel.cz) (Ping timeout: 260 seconds)
[00:44:03] *** Quits: nvmd (~nvmd@user/nvmd) (Quit: Later, nerds.)
[00:53:01] *** Quits: gh34 (~textual@cpe-184-58-181-106.wi.res.rr.com) (Quit: Textual IRC Client: www.textualapp.com)
[00:55:06] *** Quits: hans (~hans@36.84-48-255.nextgentel.com) (Ping timeout: 245 seconds)
[01:27:06] *** Quits: magla (~gelignite@55d45a4d.access.ecotel.net) (Quit: Stay safe!)
[01:30:27] *** Joins: Vonter_ (~Vonter@user/vonter)
[01:34:54] *** Quits: Vonter_ (~Vonter@user/vonter) (Ping timeout: 260 seconds)
[01:52:41] *** Quits: spare (~gzxsdvs3n@user/spareproject) (Remote host closed the connection)
[02:15:33] *** Quits: Administratorte (~sq@tempest.math.colostate.edu) (Quit: WeeChat 3.3)
[02:30:35] *** Quits: rgrinberg (~textual@ip235-44-15-186.ct.co.cr) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[02:49:59] *** Quits: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be) (Quit: The Lounge - https://thelounge.chat)
[03:45:30] *** Joins: rgrinberg (~textual@ip235-44-15-186.ct.co.cr)
[03:46:36] *** Joins: callmepk (~callmepk@wslu/callmepk)
[04:13:52] *** Quits: gslin1 (~gslin@114-34-121-114.hinet-ip.hinet.net) (Quit: WeeChat 2.8)
[04:23:40] *** Joins: gslin (~gslin@114-34-121-114.hinet-ip.hinet.net)
[05:00:31] *** Quits: jandrusk (jra@gateway/vpn/protonvpn/jandrusk) (Ping timeout: 245 seconds)
[05:06:40] *** Joins: jandrusk (~jra@d149-67-206-12.clv.wideopenwest.com)
[05:58:06] *** Quits: earnestly (~earnest@user/earnestly) (Ping timeout: 260 seconds)
[07:15:18] *** Quits: A-KO (A-KO@user/a-ko) (Remote host closed the connection)
[07:16:19] *** Quits: patterner_ (sid212303@id-212303.ilkley.irccloud.com) (Ping timeout: 258 seconds)
[07:16:21] *** Quits: barnumbirr (sid501346@id-501346.ilkley.irccloud.com) (Ping timeout: 245 seconds)
[07:17:02] *** Joins: barnumbirr (sid501346@ilkley.irccloud.com)
[07:18:43] *** Joins: patterner_ (sid212303@ilkley.irccloud.com)
[07:19:40] *** Joins: Vonter_ (~Vonter@user/vonter)
[07:22:14] *** Joins: A-KO (A-KO@user/a-ko)
[07:23:59] *** Quits: Vonter_ (~Vonter@user/vonter) (Ping timeout: 258 seconds)
[07:34:17] *** Quits: blinky42 (~quassel@user/blinky42) (Ping timeout: 264 seconds)
[07:35:43] *** Joins: blinky42 (~quassel@jabber.blinkylight.net)
[07:35:43] *** Quits: blinky42 (~quassel@jabber.blinkylight.net) (Changing host)
[07:35:43] *** Joins: blinky42 (~quassel@user/blinky42)
[08:38:00] *** Quits: zmt00 (~zmt00@user/zmt00) (Read error: Connection reset by peer)
[08:42:12] *** Joins: zmt00 (~zmt00@user/zmt00)
[08:43:16] *** Joins: The_Blode_ (~Blode@user/the-blode/x-7164444)
[08:44:16] *** Quits: The_Blode (~Blode@user/the-blode/x-7164444) (Ping timeout: 245 seconds)
[08:59:28] *** Joins: hans (~hans@36.84-48-255.nextgentel.com)
[09:09:58] *** Quits: rgrinberg (~textual@ip235-44-15-186.ct.co.cr) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[09:10:10] *** Quits: hans (~hans@36.84-48-255.nextgentel.com) (Ping timeout: 258 seconds)
[09:30:19] *** Joins: hans (~hans@36.84-48-255.nextgentel.com)
[09:35:06] *** Quits: hans (~hans@36.84-48-255.nextgentel.com) (Ping timeout: 260 seconds)
[09:40:22] *** Joins: RayS (~raysl@sdf1.xen.prgmr.com)
[09:40:25] *** Quits: RaySl (~raysl@sdf1.xen.prgmr.com) (Ping timeout: 252 seconds)
[09:47:35] *** Joins: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk)
[09:50:05] *** Joins: hans (~hans@77.17.235.81.tmi.telenormobil.no)
[09:51:29] *** Quits: hans (~hans@77.17.235.81.tmi.telenormobil.no) (Remote host closed the connection)
[09:51:53] *** Joins: hans (~hans@77.17.235.81.tmi.telenormobil.no)
[10:00:49] *** Quits: kardborren (~weechat@user/kardborren) (Ping timeout: 265 seconds)
[10:07:06] *** Quits: hans (~hans@77.17.235.81.tmi.telenormobil.no) (Ping timeout: 265 seconds)
[10:08:26] *** Joins: Vonter_ (~Vonter@user/vonter)
[10:09:21] *** Joins: kdudka (kdudka@nat-pool-brq-t.redhat.com)
[10:09:46] <bagder> today is four years since I got the polhem prize gold medal
[10:12:39] *** Quits: Vonter_ (~Vonter@user/vonter) (Ping timeout: 258 seconds)
[10:13:23] *** Joins: kardborren (~weechat@user/kardborren)
[10:17:38] *** Quits: Trieste_ (T@user/pilgrim) (Ping timeout: 258 seconds)
[10:17:56] *** Joins: Trieste (T@user/pilgrim)
[10:20:19] *** Quits: elibrokeit (eschwartz@archlinux/bugwrangler/eschwartz) (Quit: A random quit message)
[10:20:41] *** Joins: hans (~hans@77.17.235.81.tmi.telenormobil.no)
[10:21:02] *** Joins: elibrokeit (eschwartz@archlinux/bugwrangler/eschwartz)
[10:32:30] *** Quits: hans (~hans@77.17.235.81.tmi.telenormobil.no) (Ping timeout: 260 seconds)
[10:38:28] *** Joins: hans (~hans@77.17.235.81.tmi.telenormobil.no)
[10:49:52] *** Joins: earnestly (~earnest@user/earnestly)
[10:59:36] *** Quits: hans (~hans@77.17.235.81.tmi.telenormobil.no) (Remote host closed the connection)
[10:59:59] *** Joins: hans (~hans@77.17.235.81.tmi.telenormobil.no)
[11:19:12] *** Quits: sayan_ (sid15285@uxbridge.irccloud.com) ()
[11:19:37] *** Joins: sayan (sid15285@dgplug/sayan)
[11:24:50] *** Joins: milkylainen (~milkylain@static-212-247-174-226.cust.tele2.se)
[11:25:55] <milkylainen> Is there a way to build curl postfields with curl_easy_setopt... incrementally?
[11:26:18] <bagder> no
[11:26:40] <bagder> you need to do that yourself
[11:26:44] <milkylainen> Ok.
[11:27:33] <milkylainen> Not a biggie, just curious.
[11:27:34] *** Quits: hans (~hans@77.17.235.81.tmi.telenormobil.no) (Ping timeout: 260 seconds)
[11:28:33] *** Joins: icing (~stefan@p200300c9270b3b001cb2a2e769da815c.dip0.t-ipconnect.de)
[11:28:33] *** Quits: icing (~stefan@p200300c9270b3b001cb2a2e769da815c.dip0.t-ipconnect.de) (Changing host)
[11:28:33] *** Joins: icing (~stefan@user/icing)
[11:32:21] *** Joins: spare (~gzxsdvs3n@user/spareproject)
[11:34:01] *** Quits: spare (~gzxsdvs3n@user/spareproject) (Remote host closed the connection)
[11:44:35] *** Joins: uid_max (~samw@host86-180-104-61.range86-180.btcentralplus.com)
[12:06:00] <bagder> sub 10 open issues!!
[12:06:20] <icing> \o/
[12:11:49] <bagder> what an amazing overview you get when you can see them all - and remember what each is about, in a single small page
[12:35:38] *** Joins: hans (~hans@142.82.213.193.static.cust.telenor.com)
[12:40:44] *** Joins: dege (~dege@user/dege)
[12:43:20] *** Joins: ajak_ (~ajak@gentoo/developer/ajak)
[12:44:33] *** Quits: ajak (~ajak@gentoo/developer/ajak) (Remote host closed the connection)
[12:51:39] <icing> you can give them names!
[12:54:23] <bagder> =)
[13:05:36] *** Joins: spare (~gzxsdvs3n@user/spareproject)
[13:07:40] *** Joins: gryffus (~gryffus@81.19.2.214)
[13:09:11] <gryffus> Hey, is it possible to rewrite redirect host in Curl? I am accessing a HTTP service via public address, but it is trying to redirect me to its private address. Is it possible to modify this in curl?
[13:10:13] <apollo13> That service sounds utterly broken?
[13:11:05] <gryffus> apollo13: no, it's just emergency accesss for repair, that i am trying to do
[13:11:29] <apollo13> ah, why not put the internal hostname into /etc/hosts then and curl would be able to properly follow it?
[13:11:34] <bagder> if it redirects to a host name, you can provide an alternative IP for that host name. But for an IP address I can't think of a work-around other than not  letting curl do the redirect and isntead do it "manually"
[13:11:35] <gryffus> i am trying to fix it remotely, so i did a DNAT to it via a different device
[13:11:48] <gryffus> apollo13: it redirects to IP, not hostname
[13:12:16] <apollo13> ew :D
[13:12:53] <apollo13> mhm maybe a ssh socks proxy so you can redirect curl via the different device? Aside from that I am out of ideas
[13:14:32] <bagder> "apps/cmp.c:2009:5: warning: 'strncpy' destination unchanged after copying no bytes [-Wstringop-truncation]"
[13:14:37] <bagder> what a fun warning
[13:14:45] <bagder> (openssl git master)
[13:41:57] *** Quits: spare (~gzxsdvs3n@user/spareproject) (Remote host closed the connection)
[13:42:20] *** Joins: spare (~gzxsdvs3n@user/spareproject)
[14:10:26] <dege> thats an odd warning .. surely it's bogus code but not incorrect per API spec, should that trigger a warning? 
[14:11:36] <Piru> depends on the code surely
[14:12:00] <Piru> strncpy is universally misunderstood however
[14:12:36] <Piru> more often than not people don't understand how it works. so I guess it's a safe(r) assumption to warn about it
[14:13:14] *** Joins: jfuller (~jimfuller@2.100.broadband6.iol.cz)
[14:13:53] <dege> true, there is that
[14:16:15] <bagder> reading the actual code, it's not easy to see how it figures this out
[14:16:17] *** Quits: andoma_ (~andoma@zebes.smas.se) (Ping timeout: 264 seconds)
[14:16:43] *** Joins: andoma (~andoma@zebes.smas.se)
[14:19:57] <dege> OpenSSL code was never meant to be read
[14:26:08] <bagder> its a function that copies a piece of a buffer to a global static buffer and then returns a pointer to it...
[14:26:18] <bagder> looks awful
[14:31:01] *** Joins: kdudka_ (kdudka@nat-pool-brq-t.redhat.com)
[14:33:46] *** Quits: kdudka (kdudka@nat-pool-brq-t.redhat.com) (Ping timeout: 260 seconds)
[14:44:33] <jfuller> openssl code is meant to be 'felt'
[14:44:40] * jfuller could not resist
[14:46:51] <dege> why are all crypto/TLS libraries such eyesores? .. developers should roll their own crypto, but cryptographers shouldn't roll their own coding conventions
[14:47:23] <jfuller> in my narrow exp, math people are not necc good coders
[14:54:21] <j416> happy anniversary. and, hi. never realised this channel existed. o/
[14:57:41] <gevaerts> Hello, and welcome!
[14:57:45] *** Joins: Vonter_ (~Vonter@user/vonter)
[15:02:04] *** Quits: Vonter_ (~Vonter@user/vonter) (Ping timeout: 258 seconds)
[15:11:30] *** Joins: Jaxx (~Jaxx@user/jaxx)
[15:13:57] *** Quits: dege (~dege@user/dege) (Quit: Textual IRC Client: www.textualapp.com)
[15:39:22] *** Quits: Jaxx (~Jaxx@user/jaxx) (Remote host closed the connection)
[15:40:06] *** Joins: Jaxx (~Jaxx@user/jaxx)
[15:58:47] <bagder> o/
[15:58:57] * bagder spotted curl use in a Swedish tv-show
[16:03:50] *** Joins: gh34 (~textual@cpe-184-58-181-106.wi.res.rr.com)
[16:16:58] * icing imagines bagder sitting in his lair in front of a wall of monitors, closely supervision the availablt tv channels...
[16:19:52] <icing> *supervising the available  -  damnit
[16:21:20] <bagder> hehe
[16:43:59] *** ajak_ is now known as ajak
[16:59:08] <bagder> https://daniel.haxx.se/blog/2021/10/19/hackad-curl-use-on-tv/
[17:00:59] *** Joins: mort (~mort@188.166.114.29)
[17:01:17] <GodEater> fame at last
[17:02:09] <mort> say I have a pointer + length (such as from a std::string_view), and want to pass that to curl as a URL using the easy API; do I have to turn it into a null-terminated string? Or is there a way to tell curl the length of the URL?
[17:02:35] <mort> there's no curlopt_url_length
[17:02:54] <bagder> it needs to be a C string
[17:02:58] <mort> :(
[17:03:44] <icing> rewrite curl in pascal!
[17:04:17] <gevaerts> I would, but my pascal skills are rust-y!
[17:04:24] <bagder> ugh
[17:04:26] <bagder> =)
[17:04:38] <bagder> so no go?
[17:04:42] <GodEater> it's been ages since gevaerts made a terrible pun. I was starting to worry!
[17:04:53] <gevaerts> :)
[17:04:54] <mort> I mean, length-prefixed strings are used everywhere, even in C, and lots of C APIs have pointer + length versions of their string functions
[17:05:30] <Piru> no really they're not used everywhere in C
[17:05:42] <bagder> mort: ... and in C++ getting a C string from other string objects is very easy
[17:05:56] <mort> bagder: not from a std::string_view
[17:06:11] <bagder> ok, you decided to use the only one where it isn't =)
[17:06:23] *** Quits: gryffus (~gryffus@81.19.2.214) (Ping timeout: 264 seconds)
[17:06:54] <mort> string_view is kind of the standard way to accept strings as parameters in C++ when you don't want ownership
[17:07:37] <mort> but it's fine, I'll make sure I have a null-terminated string
[17:07:43] <icing> it's a nice way to pass views into buffers, for sure.
[17:07:49] <mort> would just be useful with a pointer+length API like we have with most other string APIs
[17:07:59] <bagder> most other?
[17:08:26] *** Quits: jfuller (~jimfuller@2.100.broadband6.iol.cz) (Ping timeout: 245 seconds)
[17:08:31] <mort> well, I haven't done a quantitative study, so I suppose I can't claim "most"
[17:08:32] * GodEater senses a vi/emacs-esque war about to start....
[17:09:18] <bagder> libcurl provides a C API. Asking users to provide pointer + length is awkward then, not what users expect
[17:09:26] <icing> 'escq!' for string termination?
[17:10:08] <mort> libc provides a C API I'm pretty sure, and it has strn* variants of its str* functions and its formatting functions have a way to specify lengths
[17:10:44] <mort> strncpy, strncmp, fprintf("%.*s", ...) etc
[17:10:51] <bagder> the strn functions are not pointer + length
[17:11:01] <mort> they are?
[17:11:03] <bagder> they are pointer + cap length
[17:11:06] <Piru> that is because those functions work specifically with the length
[17:11:20] <icing> if you pass a non-terminated string there, you are asking for trouble.
[17:11:35] <Piru> most C APIs do not take string ptr + length
[17:11:51] <bagder> yeah, that's highly surprising if they do
[17:11:55] <bagder> awkward even
[17:11:58] <Piru> yes indeed
[17:11:59] <mort> well, most APIs I've seen have had versions of functions which accept a length
[17:12:17] <bagder> I've only done this for 30 years but that's not my experience
[17:12:20] <Piru> 0 terminated strings ara universal C standard
[17:12:27] <Piru> are*
[17:12:45] <Piru> same with my 30+ years C experience
[17:13:08] <Piru> mort: you've been looking at some really specific things only then
[17:13:24] <icing> I would say this is a C-greybeard chat room - but bagder does not have a beard!
[17:13:38] <GodEater> he does - he just keeps it in a drawer
[17:13:51] <bagder> haha
[17:14:01] <icing> maybe he wears a beardless mask!
[17:14:08] <bagder> I could have a decent beginning in just two weeks! =)
[17:14:08] <mort> so, I picked an example function randomly, the base64 encode API from openssl, and indeed, that takes an input length in its update function: https://www.openssl.org/docs/man1.0.2/man3/EVP_EncodeBlock.html
[17:14:14] <mort> everything in the standard library takes a length
[17:14:22] <mort> *has versions which take a length
[17:14:29] <mort> which other APIs should we check
[17:14:37] <mort> any suggestions?
[17:14:37] <bagder> everything in OpenSSL surely is *not* pointer + length
[17:14:47] *** Joins: gryffus (~gryffus@84.42.229.102)
[17:14:53] <mort> do you want us to check another function bagder?
[17:15:02] <bagder> no
[17:15:04] <bagder> its a silly argument
[17:15:09] <bagder> I rather just not have it
[17:15:09] <mort> what is
[17:15:37] <bagder> I'll run off for some grocery shopping instead!
[17:15:38] <mort> https://www.openssl.org/docs/man1.1.0/man3/BF_encrypt.html these functions take pointer + length
[17:16:03] <mort> you could just say something like, "oh, I suppose it is fairly common for C APIs to take pointer + length" if you don't want to have the discussion
[17:16:32] <bagder> SSL_CTX_use_certificate_chain_file, BIO_read_filename, X509_get_subject_name etc
[17:16:35] <bagder> bbl
[17:17:03] <Piru> mort: you're confused
[17:17:10] <mort> Piru: I don't think I am
[17:17:16] <Piru> yes you are
[17:17:21] <mort> then please tell how
[17:17:30] *** Quits: icing (~stefan@user/icing) (Quit: Leaving...)
[17:18:00] <mort> I don't even know why we're having this discussion, it is fairly common to provide pointer+length versions of functions in C APIs, but it's not universal
[17:18:06] <mort> this shouldn't be controversial
[17:18:07] <GodEater> the better way to have had this discussion was accept the original answer to your question, and not then try to start a "curl is doing it wrong" argument.
[17:18:16] <mort> GodEater: I'm not saying curl is doing it wrong?
[17:18:28] <GodEater> certainly comes across like that
[17:18:40] <mort> I'm saying it's relatively common to provide pointer+length versions of functions, and that it would be useful if curl had that
[17:18:46] <mort> I'm not saying curl is wrong for not having it
[17:19:07] <mort> other people started saying it's unheard of to take pointer+length in C APIs, and that's not correct
[17:19:15] <gevaerts> I just had a look at those BF_encrypt things. Those don't look like they take strings?
[17:19:16] <mort> unless Piru will explain how I'm confused
[17:19:26] *** Quits: gryffus (~gryffus@84.42.229.102) (Ping timeout: 260 seconds)
[17:20:10] <mort> gevaerts: I suppose you could argue they're buffer functions and not string functions and therefore don't count
[17:20:24] <Piru> they're not string functions
[17:20:25] <mort> those functions kind of have to accept a length because they may contain a 0
[17:20:42] <Piru> hence they're not string functions
[17:20:44] <gevaerts> Well yes
[17:21:23] <mort> strncmp is certainly a string function though, and you can use strncmp on a small view of a bigger buffer
[17:21:44] <Piru> I'm not trying to claim that the choice of 0 termination for strings was a good one. but it made sense when C was created
[17:22:06] <mort> I'm not trying to claim that the choice of 0 termination for strings was a bad choice even
[17:22:22] <mort> literally all I'm saying is that it would be useful to have an option to set the length of the URL
[17:22:30] <Piru> no it would not
[17:22:31] <mort> or call it the cap length
[17:22:35] <gevaerts> strncmp() will stop when it encounters a 0. A "true" pointer+length-taking function wouldn't
[17:22:39] <Piru> it'd bloat the API needlessly
[17:22:47] <mort> "needlessly"
[17:22:55] <Piru> also it'd add ambiquity
[17:22:58] <Piru> VERY bad idea
[17:23:06] <mort> it literally wouldn't add ambiguity
[17:23:28] <Piru> it would
[17:23:30] <mort> I can't recall exact examples, but I've seen soooo many APIs which accept a length parameter, and if that length parameter is 0, it goes until the null terminator
[17:23:47] <mort> well, 0, -1, whatever they choose
[17:24:32] <Piru> just doubling all functions that cope with strings just doesn't make sense
[17:24:58] <mort> nothing I'm saying should be controversial and I don't understand why I'm being argued against so aggressively when I'm just 1) sharing my experience that many string APIs have a (cap) length parameter and 2) it would be useful in some circumstances if curl also had that
[17:25:02] <mort> I'm not even saying curl _should_ have it
[17:25:08] <mort> just that it would be useful
[17:25:32] <Piru> the benefit does not outweight the trouble of introducing all new ABI
[17:25:46] <mort> I'm not arguing that the benefits outweigh the trouble, just that it would be useful
[17:25:58] <mort> also, why are you even arguing that my experience of having seen a lot of pointer+length string APIs is wrong
[17:26:06] <mort> how is that something which can be argued against even
[17:26:32] <Piru> well. then just fork it?
[17:26:45] <Piru> no need to argue with stupid people then
[17:26:47] <mort> why? I'm not saying curl _should_ have a pointer+string version
[17:26:57] <mort> I'm saying it would be useful
[17:27:00] <mort> I can work around the lack of it
[17:27:05] <Piru> I disagree
[17:27:14] <Piru> feel free to not agree with me
[17:27:23] <mort> wait
[17:27:34] <Piru> I'm just some random guy. I'm not even related to curl in any official capacity
[17:27:40] <mort> are you saying it would literally be useless, that there are literally 0 use cases where it would be useful
[17:27:50] <mort> or are you saying that it would be useful in some cases, but not enough to be worth it
[17:28:00] <Piru> not worth it
[17:28:07] <Piru> not the trouble it causes
[17:28:07] <mort> then you don't disagree!
[17:28:18] *** Joins: jfuller (~jimfuller@ip-85-160-10-54.eurotel.cz)
[17:28:40] <mort> I don't know how many times I have to say this: I'm not saying that curl _should_ have it, just that it would be useful in certain cases
[17:28:42] <Piru> fine. now lets drop this nonsense already?
[17:28:48] <mort> sure
[17:30:04] <GodEater> https://xkcd.com/386/ vibes for sure.
[17:31:16] *** Quits: troyt (troyt@2601:681:4100:d591:44dd:acff:fe85:9c8e) (Ping timeout: 252 seconds)
[17:31:47] <mort> ok
[17:32:38] <mort> not quite sure who that's directed at, I literally just asked a question and then had to defend the premise of my question for some reason I don't understand
[17:33:06] <Piru> been really cold around here already. sunny though
[17:36:36] *** Joins: magla (~gelignite@55d41a29.access.ecotel.net)
[17:39:11] *** Joins: gryffus (~gryffus@78-80-106-239.customers.tmcz.cz)
[17:41:31] *** Quits: jandrusk (~jra@d149-67-206-12.clv.wideopenwest.com) (Quit: WeeChat 3.3)
[17:44:36] *** Quits: gryffus (~gryffus@78-80-106-239.customers.tmcz.cz) (Ping timeout: 258 seconds)
[17:47:00] *** Joins: gryffus (~gryffus@2a02:8308:a080:5700:25c6:8cfd:32ed:6ab)
[17:49:52] *** Joins: jandrusk (~jra@d149-67-206-12.clv.wideopenwest.com)
[17:50:50] *** Quits: jandrusk (~jra@d149-67-206-12.clv.wideopenwest.com) (Client Quit)
[17:51:07] *** Joins: jandrusk (~jra@d149-67-206-12.clv.wideopenwest.com)
[17:52:16] *** Quits: gryffus (~gryffus@2a02:8308:a080:5700:25c6:8cfd:32ed:6ab) (Ping timeout: 258 seconds)
[17:54:45] *** Joins: gryffus_ (~gryffus@2a02:8308:a080:5700:a5f1:5b56:bd21:90d6)
[17:55:15] <hans> why is curl_easy_escape() capped to 8MB? some static 8MB buffer to avoid malloc? 
[17:55:25] <hans> (capped to CURL_MAX_INPUT_LENGTH)
[17:56:24] <bagder> the generic avoid-crazy-mistakes limit
[17:58:19] *** Joins: ASSISTENZA (~Username@net-47-53-74-164.cust.vodafonedsl.it)
[17:58:19] *** Quits: ASSISTENZA (~Username@net-47-53-74-164.cust.vodafonedsl.it) (Excess Flood)
[17:59:32] <hans> hmm ok. that reminds me PHP recently had a bug with parsing source code above 4GB in size :p (using uint instead of size_t)
[17:59:34] <GodEater> am i right in thinking that icing is an apache dev?
[17:59:43] <bagder> GodEater: he is, yes
[17:59:53] <bagder> hans: that's exactly the kind of mistakes this helps guard against
[18:00:26] *** Quits: gryffus_ (~gryffus@2a02:8308:a080:5700:a5f1:5b56:bd21:90d6) (Ping timeout: 265 seconds)
[18:02:42] *** Quits: jfuller (~jimfuller@ip-85-160-10-54.eurotel.cz) (Ping timeout: 265 seconds)
[18:03:45] *** Quits: Jaxx (~Jaxx@user/jaxx) (Quit: Leaving)
[18:08:02] *** Joins: kdudka__ (kdudka@nat-pool-brq-t.redhat.com)
[18:08:22] <hans> wonder if Apache has caught up with LiteSpeed, but i guess this isn't the channel to discuss it ^^
[18:08:53] <bagder> well, I'm sure that depends on what specifics you want to compare
[18:09:22] *** Quits: The_Blode_ (~Blode@user/the-blode/x-7164444) (Ping timeout: 260 seconds)
[18:10:52] *** Quits: kdudka_ (kdudka@nat-pool-brq-t.redhat.com) (Ping timeout: 252 seconds)
[18:12:14] *** Joins: rgrinberg (~textual@ip235-44-15-186.ct.co.cr)
[18:12:29] *** Joins: ASSISTENZA (~Username@net-47-53-74-164.cust.vodafonedsl.it)
[18:12:30] *** Quits: ASSISTENZA (~Username@net-47-53-74-164.cust.vodafonedsl.it) (Excess Flood)
[18:12:39] <hans> well, cpu consumption; LiteSpeed is basically a drop-in replacement, supporting the same configuration and apis and many of the same modules (mod_php, mod_rewrite, etc), and.. using significantly less cpu than Apache on the same config, doing the same thing.. at least that was the case years ago
[18:37:16] *** Quits: jmcgnh (~jmcgnh@wikipedia/jmcgnh) (Ping timeout: 252 seconds)
[18:42:06] *** Joins: jmcgnh (~jmcgnh@wikipedia/jmcgnh)
[18:44:06] *** Joins: cmeister2 (~cmeister2@214.61.9.51.dyn.plus.net)
[18:47:47] *** Quits: kdudka__ (kdudka@nat-pool-brq-t.redhat.com) (Quit: Leaving)
[18:48:56] *** Quits: Fozzworth_ (~Fozzworth@68-123-12-205.lightspeed.sntcca.sbcglobal.net) (Quit: Leaving)
[19:21:37] *** Quits: spare (~gzxsdvs3n@user/spareproject) (Remote host closed the connection)
[19:22:04] *** Joins: spare (~gzxsdvs3n@user/spareproject)
[19:24:17] *** Quits: gh34 (~textual@cpe-184-58-181-106.wi.res.rr.com) (Remote host closed the connection)
[19:25:16] *** Joins: gh34 (~textual@cpe-184-58-181-106.wi.res.rr.com)
[19:31:30] *** Quits: hans (~hans@142.82.213.193.static.cust.telenor.com) (Ping timeout: 260 seconds)
[19:58:30] *** Quits: magla (~gelignite@55d41a29.access.ecotel.net) (Quit: Stay safe!)
[20:01:46] *** Joins: Shry2 (~Shry4@41.143.149.52)
[20:01:46] *** Quits: Shry3 (~Shry4@41.142.188.228) (Read error: Connection reset by peer)
[20:03:54] *** Quits: callmepk (~callmepk@wslu/callmepk) (Quit: Computer sleeping)
[20:11:05] *** Joins: hans (~hans@46.46.206.37)
[20:13:14] *** Joins: Shry3 (~Shry4@105.158.120.4)
[20:13:15] *** Quits: Shry2 (~Shry4@41.143.149.52) (Read error: Connection reset by peer)
[20:20:13] *** Joins: troyt (troyt@2601:681:4100:d591:44dd:acff:fe85:9c8e)
[20:40:26] *** Quits: Shry3 (~Shry4@105.158.120.4) (Read error: Connection reset by peer)
[20:40:44] *** Joins: Shry3 (~Shry4@105.158.120.4)
[20:44:22] *** Joins: magla (~gelignite@55d41a29.access.ecotel.net)
[20:45:03] *** Joins: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be)
[20:46:38] *** Quits: spare (~gzxsdvs3n@user/spareproject) (Remote host closed the connection)
[20:52:30] *** Joins: The_Blode (~Blode@user/the-blode/x-7164444)
[20:54:08] *** Quits: rgrinberg (~textual@ip235-44-15-186.ct.co.cr) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[21:36:29] *** Joins: Jaxx (~Jaxx@user/jaxx)
[21:39:08] *** Quits: Jaxx (~Jaxx@user/jaxx) (Remote host closed the connection)
[21:39:47] *** Joins: Jaxx (~Jaxx@user/jaxx)
[21:45:38] *** Joins: cmeister24 (~cmeister2@214.61.9.51.dyn.plus.net)
[21:45:59] *** Quits: cmeister2 (~cmeister2@214.61.9.51.dyn.plus.net) (Ping timeout: 264 seconds)
[21:45:59] *** cmeister24 is now known as cmeister2
[22:11:04] *** Joins: jfuller (~jimfuller@ip-85-160-10-54.eurotel.cz)
[22:18:23] *** Quits: The_Blode (~Blode@user/the-blode/x-7164444) (Ping timeout: 264 seconds)
[22:19:19] *** Joins: The_Blode (~Blode@user/the-blode/x-7164444)
[22:23:12] *** Joins: dege (~dege@user/dege)
[22:38:47] *** Quits: troyt (troyt@2601:681:4100:d591:44dd:acff:fe85:9c8e) (Ping timeout: 264 seconds)
[22:47:37] *** Quits: Jaxx (~Jaxx@user/jaxx) (Remote host closed the connection)
[22:48:34] *** Joins: Jaxx (~Jaxx@user/jaxx)
[22:50:05] *** Joins: troyt (~troyt@2601:681:4100:d591:44dd:acff:fe85:9c8e)
[23:07:41] *** Joins: spare (~gzxsdvs3n@user/spareproject)
[23:10:16] *** Joins: rgrinberg (~textual@186.4.37.225)
[23:15:17] *** Quits: magla (~gelignite@55d41a29.access.ecotel.net) (Quit: Stay safe!)
[23:16:42] *** Quits: spare (~gzxsdvs3n@user/spareproject) (Remote host closed the connection)
[23:16:54] *** Joins: spare (~gzxsdvs3n@user/spareproject)
[23:52:06] *** Quits: spare (~gzxsdvs3n@user/spareproject) (Remote host closed the connection)
[23:52:24] *** Joins: spare (~gzxsdvs3n@user/spareproject)
