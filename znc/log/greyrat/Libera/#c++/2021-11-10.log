[00:00:48] *** Joins: spaceangel (~spaceange@ip-89-176-181-220.net.upcbroadband.cz)
[00:03:05] *** Quits: pah (~pah@user/pah) (Ping timeout: 264 seconds)
[00:04:54] *** Joins: pah (~pah@user/pah)
[00:07:09] *** Parts: jplejacq (~jplejacq@24.224.90.176) (Leaving.)
[00:07:38] *** Quits: random-jellyfish (~random-je@user/random-jellyfish) (Quit: Client closed)
[00:08:30] *** Quits: forgotmynick (uid24625@id-24625.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[00:16:19] *** Joins: Zogatribe (Zogatribe@user/zogatribe)
[00:20:09] *** Quits: ko (~i.am@user/marlboro) (Quit: https://gogag.000webhostapp.com/?share=100001205)
[00:22:40] *** Joins: m_ben (~m_ben@user/m-ben/x-7429725)
[00:25:13] *** Joins: Viewday6 (~Viewday@user/viewday)
[00:27:33] *** Quits: Viewday (~Viewday@user/viewday) (Ping timeout: 256 seconds)
[00:27:33] *** Viewday6 is now known as Viewday
[00:29:13] *** Joins: sord937_ (~sord937@gateway/tor-sasl/sord937)
[00:32:33] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Ping timeout: 276 seconds)
[00:34:49] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Ping timeout: 268 seconds)
[00:35:12] *** Quits: SuperNintendoSUX (~sjw@69.206.48.64) (Remote host closed the connection)
[00:36:06] *** Joins: x_kuru (~xkuru@user/xkuru)
[00:36:24] *** Joins: SuperNintendoSUX (~sjw@69.206.48.64)
[00:36:27] *** Quits: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon) (Ping timeout: 276 seconds)
[00:38:17] *** Quits: xkuru (~xkuru@user/xkuru) (Ping timeout: 250 seconds)
[00:54:24] *** Joins: Viewday4 (~Viewday@user/viewday)
[00:55:19] *** Quits: pah (~pah@user/pah) (Ping timeout: 256 seconds)
[00:55:53] *** Quits: constxd (~brad@192.75.101.164) (Ping timeout: 264 seconds)
[00:56:27] *** Quits: Viewday (~Viewday@user/viewday) (Ping timeout: 256 seconds)
[00:56:27] *** Viewday4 is now known as Viewday
[00:58:19] *** Joins: pah (~pah@user/pah)
[01:01:41] *** Quits: pulse (~pulse@user/pulse) (Ping timeout: 250 seconds)
[01:02:15] *** Quits: lxsameer (~lxsameer@user/lxsameer) (Quit: WeeChat 3.3)
[01:03:19] *** Quits: sord937_ (~sord937@gateway/tor-sasl/sord937) (Quit: sord937_)
[01:06:37] *** Quits: magla (~gelignite@55d4ec6e.access.ecotel.net) (Quit: Stay safe!)
[01:07:33] <vancz> if i have a struct with a shared pointer member, is there any convenient way to initialize it?
[01:08:13] <vancz> i.e. can I somehow do something like struct A { shared_ptr<int> blah; }; A{1}
[01:09:25] <CarloWood> { A a{1}; } struct A { shared_ptr<int> blah; };
[01:09:25] <geordi_> error: could not convert '1' from 'int' to 'shared_ptr<int>'
[01:09:48] <Raziel> { A a{std::make_shared(1)}; } struct A { shared_ptr<int> blah; };
[01:09:48] <geordi_> error: no matching function for call to 'make_shared(int)'
[01:09:49] <Raziel> >:
[01:09:59] <CarloWood> { A a{std::make_shared<int>(1)}; } struct A { shared_ptr<int> blah; };
[01:10:00] <geordi_>  
[01:12:04] <vancz> oh I misread the cppreference entry, i thought make_shared was marked c++20, but it was some other variant of it
[01:12:18] <vancz> ok, so is it possible to do that without redundantly specifying the type again?
[01:12:26] *** Joins: badone (~badone@209.132.189.136)
[01:13:29] <CarloWood> Why not add a constructor to A?
[01:13:48] <vancz> i could do that but its just a "simple" struct?
[01:14:16] *** Joins: glestrade (~glestrade@104-185-184-158.lightspeed.sndgca.sbcglobal.net)
[01:14:17] <CarloWood> Everything is possible with C++, but I'm starting to wonder if you don't want something else.
[01:14:35] <CarloWood> You have to ask yourself what you really want to do with A.
[01:15:42] <CarloWood> I often just make an empty class and then start to use as-if it was already perfect. Make the code that uses it look intuitive and pretty.  And then design the class to fit that.
[01:15:56] *** Quits: TonyStone (~TonyStone@2603-7080-8607-c36a-9cdb-69bc-753b-1e50.res6.spectrum.com) (Ping timeout: 246 seconds)
[01:16:54] <Raziel> a constructor doesn't make a struct any less simpler, really.
[01:17:24] *** Joins: TonyStone (~TonyStone@2603-7080-8607-c36a-9cdb-69bc-753b-1e50.res6.spectrum.com)
[01:17:27] <vancz> Im not totally against writing a constructor I was just wondering if this kind of thing could be done without boilerplate
[01:18:25] <CarloWood> { A a{new 42}; } struct A { shared_ptr<int> blah; };
[01:18:25] <geordi_> error: expected type-specifier before numeric constant
[01:18:45] <CarloWood> I think you have to tell it its an int
[01:19:04] <CarloWood> If you don't want that, then hide that fact in struct A.
[01:19:13] *** Quits: biberu (~biberu@user/biberu) (Read error: Connection reset by peer)
[01:19:22] <CarloWood> { A a{new int(42)}; } struct A { shared_ptr<int> blah; };
[01:19:22] <geordi_> error: could not convert '(operator new(4), (<statement>, ((int*)<anonymous>)))' from 'int*' to 'shared_ptr<int>'
[01:19:40] <CarloWood> Yeah, that doesn't work unless it is a constructor.
[01:20:27] <CarloWood> { A a(new int(42)); } struct A { shared_ptr<int> blah; A(int* p) : blah(p) {} };
[01:20:28] <geordi_>  
[01:20:59] <CarloWood> At which you could do (although that seems really ugly/bad design):
[01:21:19] <CarloWood> { A a(42); } struct A { shared_ptr<int> blah; A(int n) : blah(new int(n)) {} };
[01:21:19] <geordi_>  
[01:21:33] *** Quits: froggy (~froggy@2.235.241.212) (Read error: Connection reset by peer)
[01:21:43] *** Joins: froggy (~froggy@2.235.241.212)
[01:21:56] <CarloWood> That would do two allocations, so you should at least use make_shared there, but ok.
[01:22:50] <vancz> im fine with make_shared if i dont have to pass the type
[01:23:06] <vancz> what i really want to avoid is redundantly passing the type if its already specified in the struct, I guess
[01:23:31] *** Joins: Viewday2 (~Viewday@user/viewday)
[01:23:50] <CarloWood> So hide it inside the struct, then you just do:  A a(42);
[01:24:00] *** Joins: Yruama (~Yruama@2a01:cb15:8139:9400:8634:97ff:fe6e:86ac)
[01:24:12] <CarloWood> Who cares that A has 'int' written all over the place in its definition?
[01:24:49] *** Quits: robod34 (Username@79.113.195.239) (Quit: Goe offline! ( http://marius.sucan.ro/ ))
[01:25:15] *** Joins: Dizidentu (~aresg@modemcable105.134-19-135.mc.videotron.ca)
[01:25:55] *** Quits: Viewday (~Viewday@user/viewday) (Ping timeout: 256 seconds)
[01:25:55] *** Viewday2 is now known as Viewday
[01:26:06] <CarloWood> Or outside of the struct... but it seems that you should just rewire your brain so it doesn't think that repeating 'int' is a bad thing.
[01:26:28] <vancz> aha. https://stackoverflow.com/questions/32724136/why-stdmake-shared-has-to-be-provided-type-info-but-stdmake-pair-doesnt-hav/32724257#32724257
[01:27:12] <vancz> well ok, actually thats not quiite the same thing I think? In my case the receiving side should constrain it.
[01:27:32] <Raziel> { Aint aInt(int(42)); struct Aint { shared_ptr<int> iLikeInts; Aint(int gibInt) : iiiint(new int(gibInt)) {} };
[01:27:32] <geordi_> error: Unexpected end of request. Expected '}' or balanced code.
[01:27:40] <Raziel> ere's some proper namin styles for ye
[01:27:55] <CarloWood> { A a{alloc(42)}; /* no int */ } struct A { shared_ptr<int> blah; /* no constructor */ };  template<typename T> shared_ptr<T> alloc(T n) { return {n}; }
[01:27:55] <geordi_> error: could not convert '{n}' from '<brace-enclosed initializer list>' to 'shared_ptr<int>'
[01:28:06] *** Joins: pulse (~pulse@user/pulse)
[01:28:28] <CarloWood> { A a{alloc(42)}; /* no int */ } struct A { shared_ptr<int> blah; /* no constructor */ };  template<typename T> shared_ptr<T> alloc(T n) { return make_shared_ptr<T>(n); }
[01:28:28] <geordi_> error: 'make_shared_ptr' was not declared in this scope
[01:29:03] <CarloWood> geordi: replace make_shared_ptr with make_shared
[01:29:04] <geordi_>  
[01:29:13] <vancz> the simplest answer is that I dont know how c++ type inference works
[01:31:27] *** Joins: Viewday5 (~Viewday@user/viewday)
[01:31:31] *** Joins: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon)
[01:32:37] <vancz> unrelatedly, can I / is there some undefined() function that I can put as a placeholder in unfinished code anywhere?
[01:32:46] <vancz> without having to cast all the types and stuff
[01:32:56] <TinoDidriksen> No, comment it out.
[01:33:17] *** Quits: Viewday (~Viewday@user/viewday) (Ping timeout: 256 seconds)
[01:33:17] *** Viewday5 is now known as Viewday
[01:33:51] *** Joins: biberu (~biberu@user/biberu)
[01:33:57] <vancz> i cant remember if thats what they usually call that
[01:33:59] *** Quits: TonyStone (~TonyStone@2603-7080-8607-c36a-9cdb-69bc-753b-1e50.res6.spectrum.com) (Ping timeout: 264 seconds)
[01:37:11] *** Quits: skapata (~Skapata@user/skapata) (Ping timeout: 245 seconds)
[01:37:48] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[01:37:56] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[01:37:56] *** ChanServ sets mode: +v npaperbot
[01:38:20] <vancz> rust has todo!() https://doc.rust-lang.org/std/macro.todo.html , haskell has undefined https://wiki.haskell.org/Undefined
[01:38:25] *** Quits: froggy (~froggy@2.235.241.212) (Read error: Connection reset by peer)
[01:38:35] *** Joins: froggy (~froggy@2.235.241.212)
[01:39:12] *** Quits: biberu (~biberu@user/biberu) (Read error: Connection reset by peer)
[01:40:04] <T`aZ> static_assert(false, "fix this") or something ?
[01:42:55] *** Joins: Inst (~Inst@2601:6c4:4080:3f80:c951:41b3:1b4a:c1f9)
[01:43:51] *** Joins: biberu (~biberu@user/biberu)
[01:44:14] *** Quits: mackal (~mackal@pool-96-237-249-63.bstnma.fios.verizon.net) (Quit: BE VIGILANT.)
[01:44:28] <vancz> the point is you can put those anywhere and it will type check
[01:44:37] <vancz> can you do that with static_assert?
[01:44:51] <vancz> (well, type check, and also compile)
[01:45:27] <TinoDidriksen> You can comment out a large part of the function body and have it compile but still check input/return types.
[01:46:25] *** Joins: mackal (~mackal@pool-96-237-249-63.bstnma.fios.verizon.net)
[01:47:29] *** Joins: TonyStone (~TonyStone@2603-7080-8607-c36a-9cdb-69bc-753b-1e50.res6.spectrum.com)
[01:52:01] *** Joins: pulse_ (~pulse@user/pulse)
[01:52:11] *** Joins: skapata (~Skapata@user/skapata)
[01:55:23] *** Quits: pulse (~pulse@user/pulse) (Ping timeout: 256 seconds)
[01:55:26] *** Joins: Atque (~Atque@user/atque)
[01:56:14] *** Joins: Viewday1 (~Viewday@user/viewday)
[01:58:13] *** Quits: Viewday (~Viewday@user/viewday) (Ping timeout: 256 seconds)
[01:58:13] *** Viewday1 is now known as Viewday
[01:59:45] *** Joins: emerent_ (~quassel@p200300cd57485556ba27ebfffed28a59.dip0.t-ipconnect.de)
[01:59:45] *** Quits: emerent (~quassel@p200300cd574855efba27ebfffed28a59.dip0.t-ipconnect.de) (Killed (erbium.libera.chat (Nickname regained by services)))
[01:59:45] *** emerent_ is now known as emerent
[02:02:40] *** Joins: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it)
[02:05:22] *** Quits: gh34 (~textual@cpe-184-58-181-106.wi.res.rr.com) (Quit: Textual IRC Client: www.textualapp.com)
[02:05:48] *** Quits: Tas-sos (~Tas-sos@46-174-70.adsl.cyta.gr) (Quit: Lost terminal)
[02:07:57] *** pulse_ is now known as pulse
[02:09:44] *** Joins: sprout_ (~quassel@2a02:a467:ccd6:1:e1e5:75f2:6059:4431)
[02:12:52] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:e9:abf1:b887:13fa) (Ping timeout: 268 seconds)
[02:16:32] <Alipha> vancz: I can whip up something super hacky so you don't have to repeat the typename ;-)
[02:17:19] <bpalmer> the number of times I've been burned by an initializer list initializing a type I didn't expect...
[02:17:20] *** Joins: Viewday1 (~Viewday@user/viewday)
[02:17:34] *** Quits: dansan (~daniel@75.81.148.51) (Quit: The C preprocessor is a pathway to many abilities some consider to be unnatural.)
[02:19:11] *** Quits: Viewday (~Viewday@user/viewday) (Ping timeout: 256 seconds)
[02:19:11] *** Viewday1 is now known as Viewday
[02:25:05] *** Joins: dansan (~daniel@75.81.148.51)
[02:28:08] *** Joins: PlasmaHH (~PlasamaHH@user/plasmahh)
[02:29:11] *** Quits: Fault (~Fault@152.70.112.168) (Quit: Quit.)
[02:29:42] *** Quits: vvdaiwrw (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Remote host closed the connection)
[02:30:06] <Alipha> vancz: https://wandbox.org/permlink/WfWmPhgf1zMswXVs
[02:31:22] <Raziel> Alipha, thanks, I hate it
[02:31:30] *** Joins: vvdaiwrw (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[02:33:33] <bitmask> hey
[02:34:03] *** Joins: pizdets_ (~pizdets@183.182.114.168)
[02:34:32] *** Quits: pizdets (~pizdets@183.182.111.141) (Ping timeout: 240 seconds)
[02:35:14] <bitmask> does offsetof count from the beginning of the structure? so is it more efficient to keep track of offset and += sizeof(previousitem)
[02:35:34] <bitmask> i'm only calling it a few times right now so it doesnt matter but im just curious if it were for something bigger
[02:36:08] <bpalmer> bitmask: offsetof is an offset from the beginning of the structure, but it may not need to "count"
[02:36:22] <Alipha> bitmask: offsetof is determined at compile time
[02:36:23] <bitmask> yea thats what im wondering
[02:36:29] <bitmask> ohh ok
[02:36:54] <bitmask> thanks
[02:36:59] <kalven> and doing += sizeof.. might not be correct anyway because of padding
[02:37:07] <bpalmer> as for += sizeof previousitem  , that's not taking into account ... yeah, padding.
[02:37:15] <bitmask> k
[02:43:29] *** Quits: spaceangel (~spaceange@ip-89-176-181-220.net.upcbroadband.cz) (Remote host closed the connection)
[02:45:35] <CppCon> padding ruined my day . I learned it by suffering pain
[02:45:50] *** Joins: Viewday2 (~Viewday@user/viewday)
[02:46:20] *** Joins: Fault (~Fault@152.70.112.168)
[02:47:31] *** Quits: Viewday (~Viewday@user/viewday) (Ping timeout: 256 seconds)
[02:47:31] *** Viewday2 is now known as Viewday
[02:47:47] <Raziel> CppCon, I had an alignas leaking from some header once. that was fun. and by fun, I mean it took me a few days to figure out why everything was breaking in mysterious ways.
[02:48:23] <Raziel> and by alignas I mean pragma pack
[02:49:49] *** Quits: Fault (~Fault@152.70.112.168) (Client Quit)
[02:50:24] <CppCon> nice!
[02:50:44] <CppCon> is pragma pack std?
[02:50:54] *** Quits: Guest42 (~Guest42@eth-west-pareq2-46-193-4-100.wb.wifirst.net) (Quit: Client closed)
[02:51:29] *** Joins: JeffH (~JeffH@9.sub-174-198-138.myvzw.com)
[02:51:36] <Raziel> no, it's compiler stuff
[02:51:45] *** Quits: ckdCreations (~ckdCreati@c-24-17-50-149.hsd1.wa.comcast.net) (Ping timeout: 250 seconds)
[02:52:27] *** Joins: ckdCreations (~ckdCreati@147.55.130.37)
[02:52:48] *** Quits: JeffH (~JeffH@9.sub-174-198-138.myvzw.com) (Remote host closed the connection)
[02:52:55] *** Joins: Fault (~Fault@152.70.112.168)
[02:55:24] *** Quits: nostart (~nostar@2601:406:4100:34d:8f4:5ea7:30b2:b7e6) (Quit: Leaving)
[02:57:04] *** Quits: GreenResponse (~tomek@r-45-155-148-237.gpon.bialnet.pl) (Quit: Leaving)
[02:58:10] *** Quits: PlasmaHH (~PlasamaHH@user/plasmahh) (Read error: Connection reset by peer)
[03:00:20] *** Quits: cbreak (~cbreak@77-58-201-132.dclient.hispeed.ch) (Quit: ZNC - https://znc.in)
[03:00:22] *** Quits: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it) (Remote host closed the connection)
[03:02:31] *** Joins: cbreak (~cbreak@77-58-201-132.dclient.hispeed.ch)
[03:04:03] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:8c84:9f64:7a7:24c5) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[03:04:32] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:8c84:9f64:7a7:24c5)
[03:04:50] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:8c84:9f64:7a7:24c5) (Client Quit)
[03:07:11] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[03:07:43] *** Joins: biberu\ (~biberu@user/biberu)
[03:09:29] *** Joins: biberu- (~biberu@user/biberu)
[03:10:08] *** Quits: Fault (~Fault@152.70.112.168) (Quit: Quit.)
[03:10:55] *** Joins: JeffH (~JeffH@9.sub-174-198-138.myvzw.com)
[03:11:09] *** Quits: JeffH (~JeffH@9.sub-174-198-138.myvzw.com) (Remote host closed the connection)
[03:11:27] *** Quits: biberu (~biberu@user/biberu) (Ping timeout: 268 seconds)
[03:11:42] <CarloWood> { g()->f(); } struct B { void f() {} }; struct A { B operator->() const { return {} }; A g() { return {} };
[03:11:42] <geordi_> error: Unexpected end of request. Expected '}' or balanced code.
[03:12:12] <CarloWood> { g()->f(); } struct B { void f() {} }; struct A { B operator->() const { return {} }}; A g() { return {} };
[03:12:12] <geordi_> error: expected ';' before '}' token
[03:12:17] <CarloWood> sigh
[03:12:32] *** Quits: biberu\ (~biberu@user/biberu) (Ping timeout: 240 seconds)
[03:12:44] *** Quits: glestrade (~glestrade@104-185-184-158.lightspeed.sndgca.sbcglobal.net) (Quit: glestrade)
[03:13:04] *** Joins: Fault (~Fault@152.70.112.168)
[03:14:05] *** Joins: Viewday9 (~Viewday@user/viewday)
[03:14:20] <CarloWood> Why does this not work?
[03:14:20] <kalven> missing ; in your returns
[03:14:22] <CarloWood> { g()->f(); } struct B { void f() {} }; struct A { B operator->() const { return {}; } }; A g() { return {}; }
[03:14:22] <geordi_> error: result of 'operator->()' yields non-pointer result
[03:14:44] *** Quits: biberu- (~biberu@user/biberu) (Ping timeout: 250 seconds)
[03:14:59] *** Joins: vinleod (~vdamewood@fedora/vdamewood)
[03:15:02] <kalven> it needs to return something that supports ->
[03:15:25] <CarloWood> Seems like it is applying -> twice to me :/.  Not logical.
[03:15:51] *** Quits: Viewday (~Viewday@user/viewday) (Ping timeout: 256 seconds)
[03:15:51] *** Viewday9 is now known as Viewday
[03:16:07] *** vdamewood is now known as Guest5784
[03:16:07] *** Quits: Guest5784 (~vdamewood@fedora/vdamewood) (Killed (iridium.libera.chat (Nickname regained by services)))
[03:16:07] *** vinleod is now known as vdamewood
[03:22:43] *** Joins: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net)
[03:23:58] *** Quits: m_ben (~m_ben@user/m-ben/x-7429725) (Quit: WeeChat 3.3)
[03:24:00] <CppCon> CarloWood, read operator-> spec. it's logical
[03:25:06] <kalven> CarloWood: operator-> has to return something that supports operator-> this can mean returning a pointer to an object, or something that in turn has operator-> overloaded. eventually, a pointer needs to be returned
[03:26:21] *** Quits: LucaTM (~LucaTM@user/lucatm) (Quit: Textual IRC Client: www.textualapp.com)
[03:26:48] *** Joins: biberu (~biberu@user/biberu)
[03:27:12] <CarloWood> Yes I understood that, but it is not a logical demand. It is like applying -> twice: once when calling operator-> and then again on the returned value.
[03:27:36] *** Quits: Inline (~Inline@2a02:908:1252:7a80:6c0:2b98:1609:4e92) (Ping timeout: 245 seconds)
[03:27:39] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.3)
[03:28:18] <kalven> are you saying it should support just treating that B instance as if it was a pointer to a B?
[03:28:35] <CarloWood> no
[03:28:49] <CarloWood> g() returns A
[03:28:56] <CarloWood> g()->  gives me a B
[03:29:02] <CarloWood> (in the above code)
[03:29:12] <CarloWood> so g()->f() should compile :?
[03:30:03] <kalven> not according to the rules, but I get what you mean
[03:30:04] <CarloWood> what they demand is this:
[03:30:30] <CarloWood> (g().operator->())->f();  // that's using a '->' twice.
[03:31:40] *** Quits: vqueiroz (uid340368@id-340368.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[03:32:03] *** Quits: sa02irc (~mbax@155-079-043-212.ip-addr.inexio.net) (Quit: Konversation terminated!)
[03:32:09] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[03:32:10] *** Quits: pulse (~pulse@user/pulse) (Ping timeout: 260 seconds)
[03:32:16] <kalven> but you want it to be (g().operator->()).f()
[03:32:37] *** Joins: rgrinberg (~textual@190.113.102.153)
[03:33:20] <CarloWood> C++ should allow arbitrary operators anyway imho.  Like  a.f();  or a§f() or whatever UTF8 character you defined an operator§() for.
[03:35:01] *** Quits: Fault (~Fault@152.70.112.168) (Quit: Quit.)
[03:35:05] <CarloWood> Yes, I agree that what I am saying isn't 100% an extrapolation either, otherwise it would need to be: g()->.f()
[03:35:38] <CarloWood> But like with operator()().. that '.' isn't needed.
[03:35:58] <CarloWood> A a;  a().f();   // uses A::operator()()
[03:36:07] <CarloWood> heh
[03:36:13] <CarloWood> nevermind me :P
[03:36:18] <CarloWood> it is needed
[03:36:58] *** Joins: Fault (~Fault@152.70.112.168)
[03:38:02] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 246 seconds)
[03:38:16] <CarloWood> kalven: how can I define a move assignment operator in terms of the base class?  I have struct A : B { /* empty */ };
[03:38:27] *** Quits: crabbedhaloablut (~crabbedha@user/crabbedhaloablut) (Ping timeout: 276 seconds)
[03:38:40] <CarloWood> can you do, using B::operator=;  or something?
[03:39:13] <kalven> idk, I don't do moves with hierarchies
[03:39:27] *** Joins: crabbedhaloablut (~crabbedha@user/crabbedhaloablut)
[03:40:56] <CarloWood> seems to work when I specify nothing... it's auto generated
[03:42:09] <CarloWood> { B b1, b2; b1 = std::move(b2); } struct A { A(A&&){} }; struct B : A { };
[03:42:09] <geordi_> error: use of deleted function 'B::B()'
[03:42:21] <CarloWood> { B b1, b2; b1 = std::move(b2); } struct A { A(A&&){} }; struct B : A { B(){} };
[03:42:22] <geordi_> error: no matching function for call to 'A::A()'
[03:42:29] <CarloWood> { B b1, b2; b1 = std::move(b2); } struct A { A(){} A(A&&){} }; struct B : A { B(){} };
[03:42:29] <geordi_> error: use of deleted function 'B& B::operator=(B&&)'
[03:42:41] *** Joins: Viewday6 (~Viewday@user/viewday)
[03:42:58] <CarloWood> { B b1, b2; b1 = std::move(b2); } struct A { A(){} A(A&&){} A& operator=(A&&) { return this; } }; struct B : A { B(){} };
[03:42:58] <geordi_> error: invalid initialization of non-const reference of type 'A&' from an rvalue of type 'A*'
[03:43:05] <CarloWood> oops
[03:43:10] <CarloWood> { B b1, b2; b1 = std::move(b2); } struct A { A(){} A(A&&){} A& operator=(A&&) { return *this; } }; struct B : A { B(){} };
[03:43:11] <geordi_>  
[03:43:40] <CarloWood> So, after defining A& operator=(A&&), B& operator=(B&&) is generated again automatically.
[03:44:11] *** Quits: Viewday (~Viewday@user/viewday) (Ping timeout: 256 seconds)
[03:44:11] *** Viewday6 is now known as Viewday
[03:44:40] *** Joins: Inline (~Inline@aftr-37-201-240-235.unity-media.net)
[03:45:14] *** Joins: nostar (~nostar@68.51.221.108)
[03:46:03] *** Joins: pulse (~pulse@user/pulse)
[03:48:34] <CppCon> CarloWood, try to make your code more simple and easier to manage
[03:48:45] <CppCon> C++ is not a toy
[03:49:16] *** Quits: KAHR-Alpha (~Alpha@2a01cb0d024a6600515f1611ef52d105.ipv6.abo.wanadoo.fr) (Ping timeout: 245 seconds)
[03:49:43] <CarloWood> Which code are you referring to?
[03:50:37] <CppCon> this crap about moving from base
[03:50:47] * CppCon even avoids inheritance :)\
[03:51:05] *** Joins: Viewday0 (~Viewday@user/viewday)
[03:52:12] <CarloWood> Maybe you should think about using C instead?
[03:52:41] *** Quits: Viewday (~Viewday@user/viewday) (Ping timeout: 256 seconds)
[03:52:41] *** Viewday0 is now known as Viewday
[03:52:50] <CppCon> why? I love all the power of C++ and also keeping my code simple
[03:53:01] <CppCon> very small classes, very simple tiny tasks
[03:53:56] *** Quits: Rayke (rayke@user/rayke) (Quit: WeeChat 3.3)
[03:57:52] <CarloWood> CppCon: It is not important how easy or simple, and certainly not small, your classes are. What is important is how easy they are to use.
[03:58:27] <Alipha> CarloWood: yes, the default copy/move ctor/op= will call the corresponding ctor/op= on all members and bases
[04:00:30] <kalven> CarloWood: kinda matters for maintenance... if you're going to understand things when you get back them after a few months or if it's gonna be like solving a riddle
[04:01:11] <CarloWood> Alipha: it's just that since there are no members, I hope(d) that it would do something similar to the 'using Base::Base;': use the Base function directly; but in the case of an assignment operator it has to return a different type. It could still call the base class assignment directly I guess - the implicitly needed cast isn't important at assembly level ;)
[04:01:25] *** Quits: Dizidentu (~aresg@modemcable105.134-19-135.mc.videotron.ca) (Read error: Connection reset by peer)
[04:01:52] *** Joins: Dizidentu (~aresg@modemcable105.134-19-135.mc.videotron.ca)
[04:02:08] <CarloWood> kalven: true, which is why I put a tremendous amount of time into each class ;). Then I will never have to go back for "maintenance". They just work.
[04:02:09] *** Quits: Dizidentu (~aresg@modemcable105.134-19-135.mc.videotron.ca) (Client Quit)
[04:02:37] *** Joins: Moosadee (~Moosadee@136.32.155.193)
[04:02:38] *** Quits: ARoxdale (~ARoxdale@84.203.31.229) (Ping timeout: 268 seconds)
[04:03:38] *** Joins: Rayke (rayke@user/rayke)
[04:03:55] <CarloWood> Anyway, this is the class we're talking about: https://bpa.st/PENQ#1L43
[04:04:20] <kalven> ah, the write once method
[04:04:36] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
[04:04:57] <CarloWood> The whole idea is so SIMPLE that this will NEVER need maintenance: TransientCommandPool is equal to CommandPool except that it forces the vk::CommandPoolCreateFlagBits::eTransient flag to be set.
[04:05:16] <kalven> looks like you can just rely on rule of 0 there.
[04:05:27] <CarloWood> Even if CommandPool needs maintenance, the derived class won't.
[04:06:25] <kalven> just get rid of all your manual move constructors and assignment operators
[04:06:52] *** Quits: Fault (~Fault@152.70.112.168) (Quit: Quit.)
[04:07:23] *** Joins: Viewday9 (~Viewday@user/viewday)
[04:08:07] *** Joins: Fault (~Fault@152.70.112.168)
[04:08:28] *** Joins: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net)
[04:08:36] <CarloWood> When will a move constructor NOT be generated?
[04:08:39] *** Joins: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse)
[04:09:07] *** Quits: Viewday (~Viewday@user/viewday) (Ping timeout: 256 seconds)
[04:09:07] *** Viewday9 is now known as Viewday
[04:09:20] <CarloWood> I guess that's what I'm scared off, that I accidently use a copy constructor when it could have been a move constructor. That's why I prefer to explicitly define them sometimes :/
[04:10:31] <kalven> can UniqueCommandPool be copied?
[04:10:31] <CarloWood> but you're right... I should delete them.
[04:11:12] <CarloWood> I think so yes, it's like a std::unique_ptr, except that it doesn't use allocations.
[04:11:25] <kalven> if it's like unique_ptr then it can't be copied
[04:11:34] <CarloWood> Oh right
[04:11:40] <CarloWood> unique and stuff :)
[04:11:46] *** Quits: Fault (~Fault@152.70.112.168) (Client Quit)
[04:12:15] <kalven> or, seems to be some alias for UniqueHandle<...> which seems to be very similar to unique_ptr.. so yeah, you don't have to worry about it being accidentally copied
[04:12:20] <CarloWood>     UniqueHandle( UniqueHandle const & ) = delete;
[04:12:25] <CarloWood> so no, it can't.
[04:12:32] *** Quits: immibis (~hexchat@62.156.144.218) (Ping timeout: 240 seconds)
[04:12:42] *** Joins: Fault (~Fault@152.70.112.168)
[04:13:32] *** Quits: emerent (~quassel@p200300cd57485556ba27ebfffed28a59.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[04:13:41] *** Quits: crabbedhaloablut (~crabbedha@user/crabbedhaloablut) (Remote host closed the connection)
[04:14:03] *** Joins: crabbedhaloablut (~crabbedha@user/crabbedhaloablut)
[04:14:06] <CarloWood> new version: https://bpa.st/TQHA
[04:14:47] *** Joins: emerent (~quassel@p5b265b66.dip0.t-ipconnect.de)
[04:15:31] *** Quits: Starfoxxes (~Starfoxxe@2a02:8070:53c9:cd00:12bf:48ff:feb8:38c8) (Ping timeout: 245 seconds)
[04:18:25] *** Quits: jkaye (~jkaye@2601:281:8300:7530:49b1:9f67:bcbc:61f) (Ping timeout: 250 seconds)
[04:19:28] *** emerent is now known as Guest999
[04:19:28] *** Joins: emerent_ (~quassel@p200300cd5703cdd4ba27ebfffed28a59.dip0.t-ipconnect.de)
[04:19:28] *** Quits: Guest999 (~quassel@p5b265b66.dip0.t-ipconnect.de) (Killed (osmium.libera.chat (Nickname regained by services)))
[04:19:28] *** emerent_ is now known as emerent
[04:19:29] *** Quits: Fault (~Fault@152.70.112.168) (Quit: Quit.)
[04:20:06] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:5d00:eb1a:26:b28a)
[04:20:25] *** Joins: Fault (~Fault@152.70.112.168)
[04:21:13] *** Joins: ferdna (~ferdna@user/ferdna)
[04:23:26] *** Quits: sprout_ (~quassel@2a02:a467:ccd6:1:e1e5:75f2:6059:4431) (Ping timeout: 245 seconds)
[04:29:10] *** Joins: Starfoxxes (~Starfoxxe@2a02:8070:5390:d00:12bf:48ff:feb8:38c8)
[04:29:23] *** Joins: pah_ (~pah@host-80-181-158-243.pool80181.interbusiness.it)
[04:30:05] *** Quits: pah (~pah@user/pah) (Ping timeout: 256 seconds)
[04:30:30] <CarloWood> Hmm, now I have: class TransientCommandPool : public CommandPool -- but doing:
[04:31:09] <CarloWood> CommandPool cp;  cp = TransientCommandPool{};  is probably not intended; that should not compile :/
[04:32:02] *** Joins: Viewday3 (~Viewday@user/viewday)
[04:32:34] *** Quits: malloy (~jimery@116.30.220.108) (Ping timeout: 250 seconds)
[04:33:56] *** Quits: Fault (~Fault@152.70.112.168) (Quit: Quit.)
[04:34:03] *** Quits: Viewday (~Viewday@user/viewday) (Ping timeout: 256 seconds)
[04:34:03] *** Viewday3 is now known as Viewday
[04:34:44] *** Joins: malloy (~jimery@116.30.220.108)
[04:34:50] <CarloWood> Guess I'll have to use class TransientCommandPool : protected CommandPool
[04:35:12] *** Joins: Fault (~Fault@152.70.112.168)
[04:35:30] *** Joins: ElectronApps (~ElectronA@user/electronapps)
[04:37:11] <Alipha> CarloWood: slicing is indeed annoying. I suppose it doesn't make sense to make the base class abstract?
[04:38:00] <CarloWood> No, I don't want to add a virtual table if not needed.
[04:38:32] *** Joins: cm007magnum (~Rheanna@218.78.79.129)
[04:39:27] <CarloWood> Maybe TransientCommandPool should have a CommandPool as member instead, but then I'll have to duplicate all member functions... which now I also have to do, but now I can use 'using' :p.
[04:39:36] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[04:41:00] *** Quits: Fault (~Fault@152.70.112.168) (Quit: Quit.)
[04:41:37] <CarloWood> I think we talked about this before: I suggested there should be a new access specifier that converts upon inheritance. In this case I'd like the move constructor of CommandPool to be public, but be private after inheritance, so it can't be used there. Then I could just inherit publically and get all the other public methods as still public.
[04:41:56] *** Joins: Fault (~Fault@152.70.112.168)
[04:42:05] <Alipha> CarloWood: CommandPool could have  `CommandPool(const class TransientCommandPool &) = delete;` though then it's annoying that the base class has to know about the derived
[04:42:51] <Alipha> There's some template hacks you could do too
[04:42:54] <CarloWood> That would work?
[04:43:37] <CarloWood> { B b; b = A{}; } struct B {}; struct A : public B {};
[04:43:38] <geordi_>  
[04:44:24] <CarloWood> { B b; b = A{}; } struct A; struct B { std::unique_ptr<int> x; B(A const&) = delete; }; struct A : public B {};
[04:44:24] <geordi_> error: no matching function for call to 'B::B()'
[04:44:29] <CarloWood> sigh
[04:44:48] <CarloWood> { B b; b = A{}; } struct A; struct B { std::unique_ptr<int> x; B() = default; B(A const&) = delete; }; struct A : public B {};
[04:44:49] <geordi_>  
[04:45:09] <Alipha> That's assignment
[04:45:26] <Alipha> You'll have to delete all copy/move ctor/op=
[04:45:43] <CarloWood> <CarloWood> CommandPool cp;  cp = TransientCommandPool{};  is probably not intended; that should not compile :/
[04:45:52] <CarloWood> it was assignment from the start :P
[04:45:57] <Alipha> { B b; b = A{}; } struct A; struct B { std::unique_ptr<int> x; B() = default; B operator=(A const&) = delete; }; struct A : public B {};
[04:45:57] <geordi_> error: use of deleted function 'B B::operator=(const A&)'
[04:46:55] <CarloWood> Something is wrong....
[04:47:35] <CarloWood> { B b; b = A{}; /* This should work: */ A a; a = A{}; } struct A; struct B { std::unique_ptr<int> x; B() = default; B operator=(A const&) = delete; }; struct A : public B {};
[04:47:36] <geordi_> Same error.
[04:47:57] <CarloWood> { /* B b; b = A{}; This should work: */ A a; a = A{}; } struct A; struct B { std::unique_ptr<int> x; B() = default; B operator=(A const&) = delete; }; struct A : public B {};
[04:47:58] <geordi_>  
[04:49:06] <CarloWood> hmm, I'd think that the addition of `B operator=(A const&) = delete;` removes the auto generated B& operator=(B&&)` ?
[04:49:18] <CarloWood> And therefore the move assignment in A?
[04:52:56] *** Quits: Yruama (~Yruama@2a01:cb15:8139:9400:8634:97ff:fe6e:86ac) (Quit: Leaving)
[04:59:29] *** Quits: crankslider (~slidercra@user/slidercrank) (Ping timeout: 264 seconds)
[05:00:27] *** Joins: Viewday8 (~Viewday@user/viewday)
[05:02:23] *** Quits: Viewday (~Viewday@user/viewday) (Ping timeout: 256 seconds)
[05:02:23] *** Viewday8 is now known as Viewday
[05:02:31] *** Quits: HenryTheLongshot (~Henry@46.101.4.181) (Quit: ZNC 1.6.3 - http://znc.in)
[05:03:53] *** Joins: HenryTheLongshot (~Henry@46.101.4.181)
[05:05:26] *** Joins: frost (~frost@user/frost)
[05:06:52] *** Joins: lkor (~lionkor@beammp/staff/lionkor)
[05:06:56] *** Quits: lionkor (~lionkor@beammp/staff/lionkor) (Ping timeout: 246 seconds)
[05:07:32] *** Quits: soman (~soman@83.139.147.234) (Ping timeout: 256 seconds)
[05:08:47] *** Joins: leduyquang753 (~leduyquan@user/leduyquang753)
[05:12:05] *** Quits: Fault (~Fault@152.70.112.168) (Quit: Quit.)
[05:13:12] *** Joins: Fault (~Fault@152.70.112.168)
[05:17:47] *** Quits: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net) (Ping timeout: 250 seconds)
[05:19:13] <drew> if I use for (string& action : actions) to iterate through set<string> actions, is there a way to check if I am on the last item? something like action == actions.end(), but that's not right
[05:19:32] <drew> or do I have to iterate using a pointer or something?
[05:21:23] *** Quits: cm007magnum (~Rheanna@218.78.79.129) (Remote host closed the connection)
[05:23:33] *** Joins: cm007magnum (~Rheanna@218.78.99.237)
[05:24:50] *** Joins: sprout_ (~quassel@2a02:a467:ccd6:1:ec9d:c0:f2e1:89a6)
[05:25:05] *** Joins: Viewday5 (~Viewday@user/viewday)
[05:25:35] *** Quits: ElectronApps (~ElectronA@user/electronapps) (Remote host closed the connection)
[05:26:24] *** Joins: N4buc0 (~N4buc0@2804:7f4:3487:cd22:15de:db95:143c:2496)
[05:26:34] *** Quits: leduyquang753 (~leduyquan@user/leduyquang753) (Quit: Gotta go, see you guys later.)
[05:27:19] *** Quits: Viewday (~Viewday@user/viewday) (Ping timeout: 256 seconds)
[05:27:19] *** Viewday5 is now known as Viewday
[05:27:32] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:5d00:eb1a:26:b28a) (Ping timeout: 240 seconds)
[05:28:02] <Alipha> drew: typically you just use an old school for loop, but you could do if(&action == &*actions.rbegin())
[05:31:50] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Remote host closed the connection)
[05:32:04] *** Quits: Fault (~Fault@152.70.112.168) (Quit: Quit.)
[05:32:57] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[05:33:37] *** Joins: Fault (~Fault@152.70.112.168)
[05:34:05] <drew> I think I tried iterating with for (int i = 0; i < actions.siz(); i++), but I got an error that you can't index the set by indices like actions[i] or whatever
[05:35:09] <drew> or I could user an iterator
[05:35:13] <drew> I'll try that
[05:37:49] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[05:37:56] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[05:37:56] *** ChanServ sets mode: +v npaperbot
[05:38:11] *** Quits: Inst (~Inst@2601:6c4:4080:3f80:c951:41b3:1b4a:c1f9) (Ping timeout: 264 seconds)
[05:38:54] *** Joins: N4buc0- (~N4buc0@186.212.203.26)
[05:39:09] *** Quits: N4buc0 (~N4buc0@2804:7f4:3487:cd22:15de:db95:143c:2496) (Remote host closed the connection)
[05:43:02] *** Joins: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net)
[05:45:14] <Alipha> auto lastIt = std::prev(actions.end()); for(auto it = actions.begin(); it != actions.end(); ++it) { if(it == lastIt)... // drew, probably a more typical way to do it
[05:45:46] <Alipha> Make sure actions is not empty before you use std::prev there
[05:46:15] *** Quits: Fault (~Fault@152.70.112.168) (Quit: Quit.)
[05:46:55] *** Joins: Fault (~Fault@152.70.112.168)
[05:47:22] <drew> I did: for (set<string>::iterator it = actions.begin(); it != actions.end(); it++) { ret += it == actions.end() ? *it : *it + ", "; }
[05:47:49] <drew> is it bad to declare and init the it inside the args of the for loop? I always see examples where people declare and init the it before the loop
[05:48:30] *** Quits: Zogatribe (Zogatribe@user/zogatribe) (Read error: Connection reset by peer)
[05:50:14] <Alipha> drew: end is one past the last element
[05:53:23] <drew> is beginning a member of the set?
[05:53:35] *** Joins: Viewday6 (~Viewday@user/viewday)
[05:54:45] *** Quits: bumbar (~bumbar@188-230-147-76.dynamic.t-2.net) (Remote host closed the connection)
[05:55:05] *** Quits: Viewday (~Viewday@user/viewday) (Ping timeout: 256 seconds)
[05:55:05] *** Viewday6 is now known as Viewday
[05:55:16] <Hello71> i prefer string sep; for (string& action : actions) { ret += sep + action; sep = ", "; }
[05:57:02] *** Quits: pah_ (~pah@host-80-181-158-243.pool80181.interbusiness.it) (Ping timeout: 240 seconds)
[05:57:26] *** Joins: pah (~pah@user/pah)
[05:57:42] *** Joins: Viewday5 (~Viewday@user/viewday)
[05:58:32] *** Quits: Inline (~Inline@aftr-37-201-240-235.unity-media.net) (Ping timeout: 240 seconds)
[05:59:15] *** Quits: Viewday (~Viewday@user/viewday) (Read error: Connection reset by peer)
[05:59:15] *** Viewday5 is now known as Viewday
[06:02:44] *** Joins: rackj (~rackj@c-73-140-240-136.hsd1.wa.comcast.net)
[06:05:56] <Alipha> drew: yes, begin is the first, but end is one past last. C++ loves half open ranges. So [begin, end) is the range of elements
[06:06:39] <Alipha> drew: similarly, an array of 5 elements has indexes 0 to 4. Or in other words, [0, 5)
[06:10:39] <drew> that's a good way to think of it
[06:10:41] <drew> thank you
[06:10:46] <drew> also that's clever Hello71
[06:11:02] <drew> do you have to do string sep = ""; at the beginning?
[06:11:29] *** Quits: cm007magnum (~Rheanna@218.78.99.237) (Remote host closed the connection)
[06:13:40] *** Joins: night_wulfe_ (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[06:13:54] <Alipha> You have to remove the last sep though
[06:14:19] <Alipha> Oh
[06:14:22] <Alipha> I sww
[06:14:24] <Alipha> Sew
[06:14:27] <Alipha> See!
[06:14:32] <Alipha> That is clever
[06:14:34] *** Joins: cm007magnum (~Rheanna@218.78.53.13)
[06:15:06] <Alipha> `string sep;` and `string sep = "";` are effectively the same
[06:15:23] *** Quits: TonyStone (~TonyStone@2603-7080-8607-c36a-9cdb-69bc-753b-1e50.res6.spectrum.com) (Ping timeout: 264 seconds)
[06:15:37] <Alipha> std::string's default constructor will initialize to an empty string
[06:16:03] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[06:16:03] *** Quits: pah (~pah@user/pah) (Ping timeout: 256 seconds)
[06:17:02] *** Quits: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 240 seconds)
[06:18:48] *** Quits: Moosadee (~Moosadee@136.32.155.193) (Remote host closed the connection)
[06:19:07] *** Joins: TonyStone (~TonyStone@2603-7080-8607-c36a-9971-ce5a-c805-3e08.res6.spectrum.com)
[06:19:10] *** Joins: pah (~pah@user/pah)
[06:21:08] *** Quits: cm007magnum (~Rheanna@218.78.53.13) (Remote host closed the connection)
[06:22:05] *** Joins: cm007magnum (~Rheanna@218.78.53.13)
[06:23:00] *** Joins: ElectronApps (~ElectronA@user/electronapps)
[06:24:02] *** Quits: pah (~pah@user/pah) (Ping timeout: 240 seconds)
[06:25:08] *** Joins: Carbonflux (~Carbonflu@c-66-235-54-179.sea.wa.customer.broadstripe.net)
[06:26:54] *** Joins: proller (~p@2a02:6b8:b081:1208::1:e)
[06:29:21] *** Joins: pah (~pah@user/pah)
[06:33:45] *** Joins: highrate (~presonic@111-22-237-24.gci.net)
[06:36:37] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:cc66:8cdf:6920:eedd)
[06:40:02] *** Quits: sprout_ (~quassel@2a02:a467:ccd6:1:ec9d:c0:f2e1:89a6) (Ping timeout: 240 seconds)
[06:42:25] *** Joins: Viewday9 (~Viewday@user/viewday)
[06:42:28] *** Joins: sprout_ (~quassel@2a02:a467:ccd6:1:646d:b422:185d:c10e)
[06:44:13] *** Joins: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[06:44:23] *** Quits: Viewday (~Viewday@user/viewday) (Ping timeout: 256 seconds)
[06:44:23] *** Viewday9 is now known as Viewday
[06:44:53] *** Quits: NEYi (~NEYi@109.251.216.38) (Read error: Connection reset by peer)
[06:46:17] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:cc66:8cdf:6920:eedd) (Ping timeout: 264 seconds)
[06:46:58] *** Quits: Fault (~Fault@152.70.112.168) (Quit: Quit.)
[06:47:38] *** Joins: Fault (~Fault@152.70.112.168)
[06:48:00] *** Joins: jkaye (~jkaye@2601:281:8300:7530:c139:e489:8815:b330)
[06:48:05] *** Quits: night_wulfe_ (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 246 seconds)
[06:51:38] *** Quits: rackj (~rackj@c-73-140-240-136.hsd1.wa.comcast.net) (Quit: Client closed)
[06:53:02] *** Quits: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be) (Ping timeout: 240 seconds)
[06:56:17] *** Joins: lionkor (~lionkor@beammp/staff/lionkor)
[06:57:02] *** Quits: proller (~p@2a02:6b8:b081:1208::1:e) (Ping timeout: 240 seconds)
[06:57:02] *** Quits: lkor (~lionkor@beammp/staff/lionkor) (Ping timeout: 240 seconds)
[06:57:25] *** Quits: nostar (~nostar@68.51.221.108) (Ping timeout: 256 seconds)
[07:03:21] *** Quits: vvdaiwrw (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Quit: vvdaiwrw)
[07:04:30] *** Joins: nostar (~nostar@2601:406:4100:34d:8f4:5ea7:30b2:b7e6)
[07:06:57] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:54d7:9842:9481:b1ca)
[07:11:28] *** Joins: Viewday1 (~Viewday@user/viewday)
[07:11:57] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:54d7:9842:9481:b1ca) (Ping timeout: 268 seconds)
[07:13:17] *** Quits: Viewday (~Viewday@user/viewday) (Ping timeout: 256 seconds)
[07:13:17] *** Viewday1 is now known as Viewday
[07:15:25] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Quit: Ex-Chat)
[07:18:07] *** Quits: jkaye (~jkaye@2601:281:8300:7530:c139:e489:8815:b330) (Ping timeout: 268 seconds)
[07:27:56] *** Joins: N4buc0 (~N4buc0@2804:7f4:3487:cd22:15de:db95:143c:2496)
[07:29:19] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[07:30:00] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Remote host closed the connection)
[07:30:30] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[07:30:51] *** Quits: N4buc0- (~N4buc0@186.212.203.26) (Ping timeout: 256 seconds)
[07:32:00] *** Quits: froggy (~froggy@2.235.241.212) (Read error: Connection reset by peer)
[07:32:31] *** Joins: vqueiroz (uid340368@id-340368.hampstead.irccloud.com)
[07:33:39] *** Joins: froggy (~froggy@2.235.241.212)
[07:34:02] *** Quits: lionkor (~lionkor@beammp/staff/lionkor) (Ping timeout: 240 seconds)
[07:35:35] *** Joins: Viewday2 (~Viewday@user/viewday)
[07:37:39] *** Quits: Viewday (~Viewday@user/viewday) (Ping timeout: 256 seconds)
[07:37:39] *** Viewday2 is now known as Viewday
[07:40:50] *** Quits: N4buc0 (~N4buc0@2804:7f4:3487:cd22:15de:db95:143c:2496) (Remote host closed the connection)
[07:40:56] *** Joins: N4buc0- (~N4buc0@186.212.203.26)
[07:51:13] *** Quits: cm007magnum (~Rheanna@218.78.53.13) (Remote host closed the connection)
[07:53:57] *** Joins: cm007magnum (~Rheanna@218.78.79.129)
[07:54:55] *** Quits: karakedi (~eAC53C340@user/karakedi) (Read error: Connection reset by peer)
[07:59:29] *** Joins: Viewday5 (~Viewday@user/viewday)
[08:00:38] *** Quits: bitmask (~bitmask@c-73-215-237-27.hsd1.nj.comcast.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[08:01:27] *** Quits: Viewday (~Viewday@user/viewday) (Ping timeout: 256 seconds)
[08:01:27] *** Viewday5 is now known as Viewday
[08:09:56] *** Quits: meicceli (meicceli@kapsi.fi) (Ping timeout: 268 seconds)
[08:10:17] <Pwnna> Why is it allowed for me to define a pure virtual function?
[08:10:34] *** Joins: riksteri (riksteri@gateway/vpn/airvpn/riksteri)
[08:10:36] <Pwnna> The definition for such a function can never be used?
[08:11:50] <Pwnna> I guess you can call the parent function?
[08:12:14] <Pwnna> seems like a weird choice i guess
[08:13:47] <Alipha> Pwnna: yes. And in fact, while it's unusual to do so, if you make your destructor pure virtual, you still must define it
[08:14:57] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Remote host closed the connection)
[08:15:25] *** Joins: riksu-raksu (riksteri@gateway/vpn/airvpn/riksteri)
[08:15:50] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[08:16:09] *** Quits: twofingersneat (~twofinger@174-080-036-228.res.spectrum.com) (Read error: Connection reset by peer)
[08:17:18] *** Joins: meicceli (meicceli@kapsi.fi)
[08:18:27] *** Quits: riksteri (riksteri@gateway/vpn/airvpn/riksteri) (Ping timeout: 256 seconds)
[08:27:03] *** Quits: Fault (~Fault@152.70.112.168) (Quit: Quit.)
[08:27:50] *** Joins: Fault (~Fault@152.70.112.168)
[08:27:50] *** Joins: Viewday1 (~Viewday@user/viewday)
[08:29:22] *** Quits: Viewday (~Viewday@user/viewday) (Read error: Connection reset by peer)
[08:29:23] *** Viewday1 is now known as Viewday
[08:30:01] *** Quits: emerent (~quassel@p200300cd5703cdd4ba27ebfffed28a59.dip0.t-ipconnect.de) (Remote host closed the connection)
[08:31:45] *** Joins: emerent (~quassel@p200300cd5703cdd4ba27ebfffed28a59.dip0.t-ipconnect.de)
[08:31:50] *** Quits: Fault (~Fault@152.70.112.168) (Client Quit)
[08:32:25] *** Joins: Fault (~Fault@152.70.112.168)
[08:33:11] *** Quits: froggy (~froggy@2.235.241.212) (Ping timeout: 256 seconds)
[08:33:39] *** Quits: meicceli (meicceli@kapsi.fi) (Ping timeout: 250 seconds)
[08:34:08] *** Quits: ElectronApps (~ElectronA@user/electronapps) (Remote host closed the connection)
[08:35:26] *** Joins: meicceli (meicceli@kapsi.fi)
[08:39:45] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:315a:c7df:cdab:4da8)
[08:41:13] *** Quits: cm007magnum (~Rheanna@218.78.79.129) (Remote host closed the connection)
[08:42:58] *** Quits: pah (~pah@user/pah) (Ping timeout: 260 seconds)
[08:43:11] *** Quits: sprout_ (~quassel@2a02:a467:ccd6:1:646d:b422:185d:c10e) (Ping timeout: 250 seconds)
[08:44:00] *** Joins: cm007magnum (~Rheanna@218.78.67.149)
[08:44:44] *** Joins: pah (~pah@user/pah)
[08:47:18] *** Quits: Fault (~Fault@152.70.112.168) (Quit: Quit.)
[08:47:25] *** Joins: Viewday3 (~Viewday@user/viewday)
[08:49:37] *** Quits: Viewday (~Viewday@user/viewday) (Ping timeout: 256 seconds)
[08:49:37] *** Viewday3 is now known as Viewday
[08:51:04] *** Quits: great_taste (~great_tas@190.32.235.20) (Quit: Client closed)
[08:52:00] *** Joins: Viewday6 (~Viewday@user/viewday)
[08:54:09] *** Quits: Viewday (~Viewday@user/viewday) (Ping timeout: 256 seconds)
[08:54:09] *** Viewday6 is now known as Viewday
[08:57:08] *** Quits: x_kuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[08:57:38] <computerquip> I sorta wish they didn't require that or something would warn me about that. I actually forget about that more often than I'd like to admit.
[08:58:00] <computerquip> Doesn't seem like an obvious rule either...
[09:02:16] *** Joins: pah_ (~pah@host-87-7-20-200.retail.telecomitalia.it)
[09:02:41] *** Quits: pah (~pah@user/pah) (Ping timeout: 250 seconds)
[09:03:47] *** Joins: Fault (~Fault@152.70.112.168)
[09:09:09] *** Quits: badone (~badone@209.132.189.136) (Quit: ZNC 1.7.5 - https://znc.in)
[09:11:35] *** Quits: TonyStone (~TonyStone@2603-7080-8607-c36a-9971-ce5a-c805-3e08.res6.spectrum.com) (Remote host closed the connection)
[09:12:03] *** Joins: Viewday0 (~Viewday@user/viewday)
[09:13:59] *** Quits: Viewday (~Viewday@user/viewday) (Ping timeout: 256 seconds)
[09:13:59] *** Viewday0 is now known as Viewday
[09:16:09] *** Joins: froggy (~froggy@2.235.241.212)
[09:22:39] <InPhase> Pwnna: I use pure virtual functions reasonably often.  It's basically used defining a polymorphic base class for which there can be no instance of the base class, and for which there is no reasonable default behavior for that specific function.
[09:24:50] <InPhase> Pwnna: For example, just recently I wrote an EEGSource base class with a GetData() pure virtual function.  There is no way to get data unless you specific a specific source, so this is just a stand-in so that other routines can polymorphically call it to acquire data, and the actual instance of the source provides the data.
[09:25:52] *** Quits: CorvetteZR1 (~CorvetteZ@cpef81d0fb064e3-cmf81d0fb064e0.cpe.net.cable.rogers.com) (Quit: Leaving)
[09:26:51] <_SKiTZO> InPhase: You using SCORE EEG standard?
[09:27:45] <InPhase> Pwnna: I have another case I was recently working with of a type erasure Command class with a pure virtual Run() function.  The base class has nothing it can do for Run, and it requires a subclass with some specific function to call and set of parameters stored for there to be a thing that can actually be done upon Run.
[09:30:40] <InPhase> _SKiTZO: No, that part of using EEG data is not my department.  :)
[09:31:20] *** Quits: cm007magnum (~Rheanna@218.78.67.149) (Remote host closed the connection)
[09:32:43] *** Joins: cm007magnum (~Rheanna@101.91.232.166)
[09:36:54] <_SKiTZO> InPhase, Just curious since I was working on that standard for a client some years back :-D Would be super cool to meet someone who used my code in the "wild"
[09:37:12] *** Quits: Fault (~Fault@152.70.112.168) (Quit: Quit.)
[09:37:26] *** Joins: Viewday6 (~Viewday@user/viewday)
[09:37:49] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[09:37:57] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[09:37:57] *** ChanServ sets mode: +v npaperbot
[09:39:00] *** Quits: Viewday (~Viewday@user/viewday) (Read error: Connection reset by peer)
[09:39:00] *** Viewday6 is now known as Viewday
[09:41:48] *** Quits: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon) (Ping timeout: 276 seconds)
[09:41:57] <InPhase> _SKiTZO: It looks like a reasonable learning tool for the clinicians that would do scoring of that data.  We so far only piggyback on medical epilepsy monitoring and seek volunteers undergoing this for psychology and neuroscience experiments.  So we work with the clinicians who would go through that sort of process, but our data is branched off and processed separately in a significantly different way.
[09:42:54] *** Quits: ville (~ville@178-75-128-81.bb.dnainternet.fi) (Quit: leaving)
[09:42:56] <InPhase> Hence needing separate software.
[09:44:32] <_SKiTZO> InPhase, cool!
[09:48:10] *** Joins: immibis (~hexchat@62.156.144.218)
[09:49:27] *** Quits: aleko1[m] (~aleko1@2001:470:69fc:105::1:1016) (Quit: Client limit exceeded: 20000)
[09:49:53] *** Quits: equinox[m] (~momoshiki@2001:470:69fc:105::fe92) (Quit: Client limit exceeded: 20000)
[09:50:29] *** Joins: ville (~ville@178-75-128-81.bb.dnainternet.fi)
[09:53:20] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[09:59:10] *** Quits: wolf2k_ouch (~wolfman20@2600:1700:3211:4140:49dc:d8e:b4fc:171d) (Read error: Connection reset by peer)
[10:02:19] *** Quits: Viewday (~Viewday@user/viewday) (Read error: Connection reset by peer)
[10:02:26] *** Joins: N4buc0 (~N4buc0@2804:7f4:3487:cd22:15de:db95:143c:2496)
[10:02:33] *** Joins: Viewday (~Viewday@user/viewday)
[10:03:32] *** Joins: Fault (~Fault@152.70.112.168)
[10:04:05] *** Joins: sa02irc (~mbax@155-079-043-212.ip-addr.inexio.net)
[10:04:32] *** Quits: N4buc0- (~N4buc0@186.212.203.26) (Ping timeout: 240 seconds)
[10:21:02] *** Quits: Enitin (~Enitin@82.102.22.86) (Ping timeout: 240 seconds)
[10:21:12] *** Joins: Enitin (~Enitin@82.102.22.85)
[10:21:21] *** Quits: cm007magnum (~Rheanna@101.91.232.166) (Remote host closed the connection)
[10:21:37] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[10:23:33] *** Joins: cm007magnum (~Rheanna@101.89.150.168)
[10:23:57] *** Quits: Neal__ (~Neal@47.146.41.156) (Quit: Leaving)
[10:24:12] *** Joins: nshire (~Neal@user/nshire)
[10:24:23] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[10:26:43] *** Joins: Viewday5 (~Viewday@user/viewday)
[10:26:53] *** Joins: dkdns (~dkdns@178.49.152.151)
[10:28:47] *** Quits: Viewday (~Viewday@user/viewday) (Ping timeout: 256 seconds)
[10:28:48] *** Viewday5 is now known as Viewday
[10:33:58] *** Joins: JohnMS_WORK (~kvirc@213.134.183.29)
[10:34:31] *** Joins: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon)
[10:38:36] *** Quits: AbleBacon (~AbleBacon@user/AbleBacon) (Read error: Connection reset by peer)
[10:40:05] *** Joins: sprout_ (~quassel@2a02:a467:ccd6:1:3471:ef4b:ebc8:3b49)
[10:43:39] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:315a:c7df:cdab:4da8) (Ping timeout: 250 seconds)
[10:47:43] *** Joins: Viewday6 (~Viewday@user/viewday)
[10:49:45] *** Quits: Viewday (~Viewday@user/viewday) (Ping timeout: 256 seconds)
[10:49:45] *** Viewday6 is now known as Viewday
[10:51:40] *** Quits: martiert (~martiert@ti0185q160-2775.bb.online.no) (Quit: leaving)
[10:51:56] *** Joins: martiert (~martiert@ti0185q160-2775.bb.online.no)
[10:57:36] *** Quits: N4buc0 (~N4buc0@2804:7f4:3487:cd22:15de:db95:143c:2496) (Remote host closed the connection)
[10:57:58] *** Joins: N4buc0 (~N4buc0@2804:7f4:3487:cd22:15de:db95:143c:2496)
[11:08:43] *** Quits: N4buc0 (~N4buc0@2804:7f4:3487:cd22:15de:db95:143c:2496) (Remote host closed the connection)
[11:08:55] *** Joins: N4buc0 (~N4buc0@2804:7f4:3487:cd22:15de:db95:143c:2496)
[11:10:40] *** wils is now known as wilz
[11:11:13] *** Quits: rgrinberg (~textual@190.113.102.153) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[11:11:13] *** Quits: cm007magnum (~Rheanna@101.89.150.168) (Remote host closed the connection)
[11:12:16] *** Joins: Viewday4 (~Viewday@user/viewday)
[11:13:24] *** Joins: cm007magnum (~Rheanna@61.171.69.141)
[11:14:07] *** Quits: Viewday (~Viewday@user/viewday) (Ping timeout: 256 seconds)
[11:14:07] *** Viewday4 is now known as Viewday
[11:15:03] *** Quits: Carbonflux (~Carbonflu@c-66-235-54-179.sea.wa.customer.broadstripe.net) (Quit: When all you have are solutions, everything is a problem.)
[11:15:19] *** Joins: Inst (~Inst@2601:6c4:4080:3f80:75c6:91f1:4f95:975b)
[11:18:14] *** Joins: ElectronApps (~ElectronA@user/electronapps)
[11:18:34] *** Quits: mven` (~mven@ip68-104-39-54.lv.lv.cox.net) (Quit: ZNC 1.8.2 - https://znc.in)
[11:18:46] *** Quits: N4buc0 (~N4buc0@2804:7f4:3487:cd22:15de:db95:143c:2496) (Quit: Leaving)
[11:19:02] *** Joins: rgrinberg (~textual@190.113.102.153)
[11:20:20] *** Quits: froggy (~froggy@2.235.241.212) (Read error: Connection reset by peer)
[11:20:30] *** Joins: froggy (~froggy@2.235.241.212)
[11:22:17] *** Joins: andreasbuhr (~quassel@p548ddf3f.dip0.t-ipconnect.de)
[11:22:22] *** Joins: lucido (~lucido@p200300de0f10ed0f89b4856232b96b8e.dip0.t-ipconnect.de)
[11:26:01] *** Quits: pulse (~pulse@user/pulse) (Ping timeout: 256 seconds)
[11:26:46] *** Quits: Inst (~Inst@2601:6c4:4080:3f80:75c6:91f1:4f95:975b) (Ping timeout: 245 seconds)
[11:30:11] *** Quits: rahl- (~rahl@102.114.76.71) (Ping timeout: 246 seconds)
[11:32:08] *** Joins: rahl (~rahl@102.114.116.223)
[11:37:10] *** Joins: Viewday8 (~Viewday@user/viewday)
[11:39:03] *** Quits: Viewday (~Viewday@user/viewday) (Ping timeout: 256 seconds)
[11:39:03] *** Viewday8 is now known as Viewday
[11:41:36] *** Quits: vqueiroz (uid340368@id-340368.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[11:43:41] *** Joins: Carbonflux (~Carbonflu@c-66-235-54-179.sea.wa.customer.broadstripe.net)
[11:47:21] *** Quits: fflam (~mdt@ip72-220-60-77.sd.sd.cox.net) (Ping timeout: 250 seconds)
[11:51:13] *** Quits: caramel (~caramel@user/caramel) (Read error: Connection reset by peer)
[11:51:37] *** Joins: caramel (~caramel@user/caramel)
[11:54:34] *** Quits: malloy (~jimery@116.30.220.108) (Ping timeout: 250 seconds)
[11:55:25] *** Joins: fflam (~mdt@ip72-220-60-77.sd.sd.cox.net)
[11:55:42] *** Joins: rendar (~rendar@user/rendar)
[11:56:46] *** Joins: malloy (~jimery@116.30.220.108)
[11:59:22] *** Joins: lionkor (~lionkor@beammp/staff/lionkor)
[12:01:41] *** Quits: cm007magnum (~Rheanna@61.171.69.141) (Remote host closed the connection)
[12:01:50] *** Joins: Viewday2 (~Viewday@user/viewday)
[12:03:09] *** Joins: cm007magnum (~Rheanna@218.78.109.69)
[12:03:59] *** Quits: Viewday (~Viewday@user/viewday) (Ping timeout: 256 seconds)
[12:03:59] *** Viewday2 is now known as Viewday
[12:08:28] *** Joins: soman (~soman@83.139.147.234)
[12:15:00] *** Quits: Betal (~Betal@user/betal) (Quit: WeeChat 3.3)
[12:22:29] *** Joins: Viewday9 (~Viewday@user/viewday)
[12:23:21] *** pah_ is now known as pa
[12:23:21] *** Quits: pa (~pah@host-87-7-20-200.retail.telecomitalia.it) (Changing host)
[12:23:21] *** Joins: pa (~pah@user/pah)
[12:24:23] *** Quits: Viewday (~Viewday@user/viewday) (Ping timeout: 256 seconds)
[12:24:23] *** Viewday9 is now known as Viewday
[12:26:43] *** Joins: robod34 (Username@79.113.195.239)
[12:26:49] *** geordi_ is now known as geordi
[12:31:24] *** Joins: PlasmaHH (~PlasamaHH@user/plasmahh)
[12:38:17] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[12:42:23] *** Quits: dkdns (~dkdns@178.49.152.151) (Quit: Client closed)
[12:43:07] *** Joins: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it)
[12:47:35] *** Joins: Viewday7 (~Viewday@user/viewday)
[12:49:19] *** Quits: Viewday (~Viewday@user/viewday) (Ping timeout: 256 seconds)
[12:49:19] *** Viewday7 is now known as Viewday
[12:52:27] *** Quits: rgrinberg (~textual@190.113.102.153) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[12:52:46] *** Joins: interop_madness (~interop_m@user/interop-madness/x-0950004)
[13:00:15] *** Joins: LucaTM (~LucaTM@user/lucatm)
[13:00:36] *** Quits: BluesBoy (~bboy@user/bluesboy) (Quit: leaving)
[13:01:51] *** Cahaan_ is now known as Cahaan
[13:03:32] *** Quits: chozorho (~chozorho@2601:146:300:c30::4ac5) (Ping timeout: 240 seconds)
[13:04:10] *** Joins: CaCode (~CaCode@user/cacode)
[13:07:36] *** Joins: Viewday3 (~Viewday@user/viewday)
[13:09:09] *** Quits: Viewday (~Viewday@user/viewday) (Ping timeout: 256 seconds)
[13:09:09] *** Viewday3 is now known as Viewday
[13:11:16] *** Joins: jzsinatra (~jzsinatra@88-114-238-31.elisa-laajakaista.fi)
[13:13:59] *** Joins: wib_jonas (~wib_jonas@business-37-191-60-209.business.broadband.hu)
[13:14:34] *** Joins: PJBoy (~PJBoy@host81-158-196-74.range81-158.btcentralplus.com)
[13:14:34] *** Quits: PJBoy (~PJBoy@host81-158-196-74.range81-158.btcentralplus.com) (Changing host)
[13:14:34] *** Joins: PJBoy (~PJBoy@user/pjboy)
[13:15:31] *** Joins: Guest38 (~Guest38@178.79.105.181)
[13:15:53] <Guest38> Hey, is this the new channel that used to be on irc.freenode.net #C++ (there's almost nobody on there) ?
[13:15:59] *** Joins: equinox[m] (~momoshiki@2001:470:69fc:105::fe92)
[13:15:59] *** Joins: aleko1[m] (~aleko1@2001:470:69fc:105::1:1016)
[13:16:17] <anyone> freenode is dead
[13:16:42] <anyone> so yes
[13:18:47] *** Joins: vvdaiwrw (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[13:21:02] *** Quits: highrate (~presonic@111-22-237-24.gci.net) ()
[13:22:50] <TinoDidriksen> Guest38, yes.
[13:23:38] <RokerHRO> but this channel isn't a high-traffic channel either. ;-(
[13:24:34] *** Quits: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net) (Quit: Textual IRC Client: www.textualapp.com)
[13:24:56] <TinoDidriksen> #C++-general is certainly more active.
[13:25:16] <anyone> RokerHRO: we just managed to lose all the baggage and all the not-so-C++-standard talk :D
[13:27:04] <TinoDidriksen> Of the 4 C++ channels, this is the 2nd most active. That's fine.
[13:27:16] <RokerHRO> TinoDidriksen: I've never been there. maybe the focus is too strict in this channel, if it kills every chat that is slightly off-topic (e.g. this one right now, too)
[13:27:30] <RokerHRO> TinoDidriksen: which C++ channels do also exist here?
[13:27:47] <TinoDidriksen> !otherchannels
[13:27:48] <nolyc> #C++ (strictly Standard C++), #c++-basic (for learners and newbies), #C++-general (non-standard but still related to C++), #c++-social (anything goes), and #geordi
[13:27:57] <RokerHRO> ah tnx.
[13:28:47] <RokerHRO> I miss #c++-senior and #c++-retiree  ;-D
[13:29:47] *** Joins: furrymcgee (~devuan@cgn-89-1-208-64.nc.de)
[13:30:15] <RokerHRO> geordi: template<class Q,class O>struct o{o<o<Q*,O>,o<Q,O*>>operator->()const{return o<o<Q*,O>,o<Q,O*>>();}};int main(){o<int,short>u;return u->v();}
[13:30:16] <geordi> cc1plus: out of memory allocating 42138891 bytes after a total of 1294336 bytes
[13:32:31] *** Joins: mitch0 (~mitch@178-164-254-231.pool.digikabel.hu)
[13:32:37] *** Joins: Viewday8 (~Viewday@user/viewday)
[13:32:45] *** Joins: CaCode_ (~CaCode@user/cacode)
[13:34:20] <Guest38> I have a legacy C function that allocates memory and returns it in PVOID: however I would like to use RAII for manage it from the caller like this: https://godbolt.org/z/hPqrccjrr is there a better way of handling this or is this as good as it gets?
[13:34:39] *** Quits: Viewday (~Viewday@user/viewday) (Ping timeout: 256 seconds)
[13:34:39] *** Viewday8 is now known as Viewday
[13:35:15] *** Quits: CaCode (~CaCode@user/cacode) (Ping timeout: 250 seconds)
[13:35:41] <TinoDidriksen> Looks good to me. Stuff it in a smart pointer at return, with a custom deleter? Yeah, that's the way.
[13:37:50] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[13:37:57] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[13:37:57] *** ChanServ sets mode: +v npaperbot
[13:38:54] <ville> wonder why we don't call them pointer-like types. wouldn't have any connotations
[13:41:10] *** Quits: ahlk (~user@2600:1700:31c0:3a10::43) (Remote host closed the connection)
[13:41:12] *** Quits: cm007magnum (~Rheanna@218.78.109.69) (Remote host closed the connection)
[13:43:18] *** Joins: cm007magnum (~Rheanna@218.78.79.129)
[13:43:32] *** Quits: pa (~pah@user/pah) (Ping timeout: 240 seconds)
[13:44:20] *** Joins: pah (~pah@user/pah)
[13:47:10] *** Joins: _nightw0lf (~nightw0lf@77.125.126.63)
[13:51:21] *** Quits: pah (~pah@user/pah) (Ping timeout: 245 seconds)
[13:52:03] *** Joins: pah_ (~pah@host-95-248-137-21.retail.telecomitalia.it)
[13:52:41] *** Joins: Viewday8 (~Viewday@user/viewday)
[13:53:20] *** Quits: Viewday (~Viewday@user/viewday) (Read error: Connection reset by peer)
[13:53:20] *** Viewday8 is now known as Viewday
[13:55:27] *** Joins: ___nightw0lf (~nightw0lf@77.125.126.63)
[13:55:32] *** Quits: _nightw0lf (~nightw0lf@77.125.126.63) (Quit: leaving)
[13:55:35] *** Quits: ___nightw0lf (~nightw0lf@77.125.126.63) (Remote host closed the connection)
[13:55:50] *** Joins: _nightw0lf (~nightw0lf@77.125.126.63)
[13:56:57] *** Quits: _nightw0lf (~nightw0lf@77.125.126.63) (Remote host closed the connection)
[14:02:31] *** Quits: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[14:03:49] *** Joins: ko (~i.am@user/marlboro)
[14:07:02] *** Quits: frost (~frost@user/frost) (Ping timeout: 240 seconds)
[14:08:05] *** Quits: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net) (Ping timeout: 256 seconds)
[14:09:02] *** Joins: frost (~frost@user/frost)
[14:14:32] *** Quits: pah_ (~pah@host-95-248-137-21.retail.telecomitalia.it) (Ping timeout: 240 seconds)
[14:14:56] *** Joins: pah (~pah@user/pah)
[14:16:02] *** Quits: frost (~frost@user/frost) (Ping timeout: 240 seconds)
[14:18:07] *** Joins: Viewday6 (~Viewday@user/viewday)
[14:19:56] <imi> https://coliru.stacked-crooked.com/a/da91e21b667626ce -- why the output is BBB? is that some sort of promotion? or is the signed char operator< is used on the operands?
[14:19:59] *** Quits: pah (~pah@user/pah) (Ping timeout: 256 seconds)
[14:19:59] *** Quits: Viewday (~Viewday@user/viewday) (Ping timeout: 256 seconds)
[14:19:59] *** Viewday6 is now known as Viewday
[14:20:49] <PJBoy> yeah everything smaller than int is promoted to int when used in an arithmetic expression
[14:21:34] <PJBoy> the warning given by the compiler is probably worth giving a second read though
[14:21:47] *** Joins: pah (~pah@user/pah)
[14:22:33] <PJBoy> idk why the fuck it prints the value in octal >_>
[14:22:59] *** Quits: sa02irc (~mbax@155-079-043-212.ip-addr.inexio.net) (Remote host closed the connection)
[14:23:32] *** Quits: froggy (~froggy@2.235.241.212) (Ping timeout: 240 seconds)
[14:23:55] *** Joins: sa02irc (~mbax@155-079-043-212.ip-addr.inexio.net)
[14:23:59] *** Joins: BluesBoy (~bboy@user/bluesboy)
[14:24:00] *** Joins: froggy (~froggy@2.235.241.212)
[14:26:17] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[14:27:03] *** Joins: Tas-sos (~Tas-sos@46-174-70.adsl.cyta.gr)
[14:28:37] <imi> yes, static_cast<char>(200) going to be a negative number
[14:29:50] *** Joins: frost (~frost@user/frost)
[14:30:36] <imi> PJBoy: is it promoted to int or is it promoted to unsigned int? what if I write b<a ? can I somehow make it be promoted to unsigned int?
[14:30:53] <RokerHRO> geordi: << static_cast<char>(200);
[14:30:53] <geordi> �
[14:30:56] <RokerHRO> \o/
[14:31:07] <PJBoy> stuff promotes to signed int if possible
[14:31:13] <RokerHRO> geordi: << static_cast<double>(static_cast<char>(200));
[14:31:14] *** Quits: cm007magnum (~Rheanna@218.78.79.129) (Remote host closed the connection)
[14:31:14] <geordi> -56
[14:31:30] <PJBoy> so char/unsigned char/signed char/short all promote to int
[14:31:30] <Guest38> Thank you TinoDidriksen
[14:31:41] <PJBoy> and on almost all platforms, unsigned short promotes to int too
[14:31:44] *** Quits: ElectronApps (~ElectronA@user/electronapps) (Remote host closed the connection)
[14:31:49] <PJBoy> but unsigned short can technically promote to unsigned int
[14:31:53] <PJBoy> IIRC
[14:32:06] <PJBoy> if sizeof(short) == sizeof(int)
[14:32:26] <RokerHRO> PJBoy: and if sizeof(int)==1 even more bizarre things happens. BTDT. :-(
[14:32:51] <PJBoy> yeah but that never happens
[14:32:56] *** Quits: Guest38 (~Guest38@178.79.105.181) (Quit: Client closed)
[14:33:06] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Remote host closed the connection)
[14:33:06] *** Quits: spithash (~spithash@user/spithash) (Remote host closed the connection)
[14:33:20] *** Joins: spithash (~spithash@user/spithash)
[14:33:28] <RokerHRO> PJBoy: sure. on 16- or 32-bit DSPs that don't support 8 bit datatypes, there is CHAR_BIT==16 or even 32.
[14:34:00] <PJBoy> do those have compilers?
[14:34:07] *** Quits: froggy (~froggy@2.235.241.212) (Read error: Connection reset by peer)
[14:34:08] *** pah is now known as pa
[14:34:16] <RokerHRO> PJBoy: they do:  https://roker.spamt.net/c++/datatypes_c55x.png
[14:34:17] *** Joins: cm007magnum (~Rheanna@218.78.79.129)
[14:34:25] *** Joins: froggy (~froggy@2.235.241.212)
[14:34:33] <PJBoy> I'm not convinced
[14:34:49] <PJBoy> oh uh
[14:34:59] <PJBoy> I should have actually read that image
[14:35:24] <PJBoy> 40 bit long long?
[14:35:26] <PJBoy> that's not conforming
[14:35:45] <RokerHRO> it is from a compiler manual for the TI C55x platform. I've used that, some years ago. File I/O is funny on that platform.
[14:37:21] <PJBoy> I'd argue it's not C or C++ :p
[14:37:43] <RokerHRO> but it is.
[14:37:56] <PJBoy> C/C++ require 64-bit minimum long long
[14:38:08] <RokerHRO> PJBoy: since C++11. that document is older.
[14:38:22] <PJBoy> well pre C++11 doesn't have long long :/
[14:38:32] *** Joins: Viewday4 (~Viewday@user/viewday)
[14:38:46] <PJBoy> that's interesting
[14:38:57] <RokerHRO> so it is a "proprietary C++ extension" there. ;-)
[14:39:16] <PJBoy> yeah haha
[14:39:29] <RokerHRO> unsigned long bool b = true;
[14:39:48] <PJBoy> shame they went for 16-bit ASCII instead of UTF-16 :D
[14:40:05] <RokerHRO> 16 bit ASCII? huh?
[14:40:18] <PJBoy> they list chars as being ASCII
[14:40:22] <PJBoy> and also as being 16-bit
[14:40:23] *** Quits: Viewday (~Viewday@user/viewday) (Ping timeout: 256 seconds)
[14:40:23] *** Viewday4 is now known as Viewday
[14:40:54] <RokerHRO> okay, that's BS. I only got values from 0..255 from external files. and IIRC they just write out the "low byte" of their 16 bit 'char' data type.
[14:41:12] <RokerHRO> but I am not sure.
[14:41:31] <PJBoy> well, when I say 16-bit ascii, I do just mean ascii with 8 bits of padding
[14:41:47] <PJBoy> or 9 bits depending on how you count that
[14:41:55] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[14:42:17] <RokerHRO> yes, just pad the octets coming from external media (e.g. flash memory) with 8 zero bits in the upper half and that's it.
[14:42:31] <TinoDidriksen> ASCII is already 7 bits with 1 bit padding, so meh.
[14:43:00] *** Joins: Guest38 (~Guest38@178.79.105.181)
[14:43:09] <Guest38> Is it possible to do this: https://godbolt.org/z/hPqrccjrr without the new PVOID() , but use a local variable or whatever instead (don't want another heap allocation)?
[14:43:22] <RokerHRO> what is PVOID() ?
[14:43:56] <PJBoy> it's defined as void* in the paste
[14:44:21] <RokerHRO> you're using 'free()' and 'delete' in the same code? uh oh...
[14:44:38] <Guest38> Yes I know it's ugly, but that function is from legacy C and can't be easily modified
[14:44:54] <Guest38> But I would like to use RAII to clean whatever the sum returns
[14:45:17] <PJBoy> note that unique_ptr does the nullptr check for you
[14:45:23] <Guest38> However by using std::unique_ptr I need to do new to allocate an rvalue that is managed by the pointer itself
[14:45:25] <PJBoy> so custom deleters shouldn't be bothering
[14:46:01] <Guest38> PJBoy ah so I don't need to check if it's nullptr in the custom deleter ... the deleter won't even be called if the object is nullptr?
[14:46:15] <PJBoy> indeed
[14:46:20] <Guest38> Something new, thanks :)
[14:47:04] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Read error: Connection reset by peer)
[14:47:50] *** Quits: ckdCreations (~ckdCreati@147.55.130.37) (Read error: Connection reset by peer)
[14:47:57] <Guest38> It's not possible to store lvalue into std::unique_ptr, so I could call sum() first and store the result in local variable, then add/move the local variable into std::unique_ptr to be freed automatically when it goes out of scope
[14:48:03] *** Joins: ckdCreations (~ckdCreati@c-24-17-50-149.hsd1.wa.comcast.net)
[14:49:25] <ville> PJBoy: what's wrong with 40-bit long long?
[14:49:48] <PJBoy> long long is 64-bit minimum
[14:50:00] <ville> oh nevermind i was thinking about long
[14:50:34] *** Quits: martiert (~martiert@ti0185q160-2775.bb.online.no) (Remote host closed the connection)
[14:50:37] *** Quits: Guest38 (~Guest38@178.79.105.181) (Quit: Client closed)
[14:52:17] *** Quits: ckdCreations (~ckdCreati@c-24-17-50-149.hsd1.wa.comcast.net) (Ping timeout: 256 seconds)
[14:52:57] <PJBoy> oh did Guest38 leave?
[14:54:01] *** Joins: evangeline (~Eleanor@178.79.105.181)
[14:54:01] *** Quits: vvdaiwrw (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Remote host closed the connection)
[14:54:47] *** Joins: vvdaiwrw (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[14:55:47] *** Quits: vvdaiwrw (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Remote host closed the connection)
[14:56:32] *** Joins: vvdaiwrw (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[14:57:09] *** Quits: dexter0 (~dexter0@c-69-181-126-161.hsd1.ca.comcast.net) (Ping timeout: 250 seconds)
[14:57:18] *** Joins: dexter0_ (~dexter0@c-69-181-126-161.hsd1.ca.comcast.net)
[14:57:43] *** dexter0_ is now known as dexter0
[14:58:14] *** Joins: karakedi (~eAC53C340@user/karakedi)
[14:59:08] *** Joins: Viewday8 (~Viewday@user/viewday)
[15:00:47] *** Quits: Viewday (~Viewday@user/viewday) (Ping timeout: 256 seconds)
[15:00:47] *** Viewday8 is now known as Viewday
[15:01:41] *** Joins: cart_man (~rynot@host-78-144-127-199.as13285.net)
[15:06:05] *** Quits: alkino (~quassel@user/alkino) (Ping timeout: 264 seconds)
[15:06:05] *** Joins: alkino_ (~quassel@user/alkino)
[15:07:36] *** Joins: Viewday6 (~Viewday@user/viewday)
[15:09:17] *** Quits: Viewday (~Viewday@user/viewday) (Ping timeout: 256 seconds)
[15:09:17] *** Viewday6 is now known as Viewday
[15:09:19] *** Joins: Guest38 (~Guest38@178.79.105.181)
[15:09:36] <Guest38> I got disconnected, did anybody write anything in regards to  https://godbolt.org/z/hPqrccjrr ?
[15:10:25] *** Quits: JohnMS_WORK (~kvirc@213.134.183.29) (Ping timeout: 256 seconds)
[15:12:40] *** Joins: Atque (~Atque@user/atque)
[15:12:59] <PJBoy> https://godbolt.org/z/9r1Pnn1Es perhaps?
[15:15:36] <Guest38> What will the PVOID() inside std::unique_ptr do, allocate something or not ?
[15:17:34] <anyone> depends on whether PVOID is trivially constructible or not
[15:17:46] *** Quits: soman (~soman@83.139.147.234) (Quit: Client closed)
[15:18:41] <evangeline> anyone, PVOID is void* ... so is this trivially constructible?
[15:18:58] <anyone> then it won't do anything
[15:20:20] <evangeline> anyone, so no allocation on the heap will occur ... only the buffer pointer that is inside std::unique_ptr will be assigned (probably to nullptr) ?
[15:20:39] <evangeline> So essentially at that point std::unique_ptr doesn't hold anything
[15:21:15] *** Quits: cm007magnum (~Rheanna@218.78.79.129) (Remote host closed the connection)
[15:21:26] <Guest38> Thank you PJBoy, that seems to work okay
[15:21:48] <PJBoy> it's a very abusive piece of code
[15:21:57] <PJBoy> would be more ideal to write a class for this manually
[15:22:17] <Guest38> Can that be done by keeping the function sum intact?
[15:23:47] *** Joins: cm007magnum (~Rheanna@218.78.109.69)
[15:24:09] *** Joins: Viewday8 (~Viewday@user/viewday)
[15:25:22] <PJBoy> if you expose an accessor to this class's internal PVOID, yeah
[15:25:43] *** Quits: Viewday (~Viewday@user/viewday) (Ping timeout: 256 seconds)
[15:25:44] *** Viewday8 is now known as Viewday
[15:28:22] *** Joins: Viewday1 (~Viewday@user/viewday)
[15:29:37] <evangeline> PJBoy, I don't understand, do you maybe have an example?
[15:30:15] *** Quits: Viewday (~Viewday@user/viewday) (Ping timeout: 256 seconds)
[15:30:27] <evangeline> PJBoy, Ah I see, just make the PVOID member public ?
[15:30:38] <PJBoy> would be an option, yeah
[15:30:57] <PJBoy> the more enterprise-y thing to do is make a `get()` method
[15:31:06] *** Joins: JohnMS_WORK (~kvirc@185.73.229.242)
[15:31:23] *** Quits: ville (~ville@178-75-128-81.bb.dnainternet.fi) (Ping timeout: 250 seconds)
[15:31:53] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[15:33:19] *** Joins: ville (~ville@178-75-128-81.bb.dnainternet.fi)
[15:33:41] <PJBoy> https://godbolt.org/z/c9fcnW5Pz or something
[15:34:39] <supernovah> replacing a value in a pointer array I'm halting a thread and can't figure out why... I have void** vmt, int idex, and vmt[index] = oRide
[15:34:43] <supernovah> that assignment isn't wrong is it?
[15:34:58] <evangeline> PJBoy, does this look good: https://godbolt.org/z/6dT6sK7sK ?
[15:35:23] <PJBoy> except for that make_unique
[15:36:23] <evangeline> PJBoy, ah you're right, make_unique will do new allocation
[15:36:28] <evangeline> Ah you added the example, thank you
[15:38:50] *** Joins: lkor (~lionkor@beammp/staff/lionkor)
[15:39:13] <Eelis> hmm, i just realized that constexpr ternary expression is missing
[15:39:17] <Eelis> << (true ? 9 : "lol")
[15:39:17] <geordi> error: operands to '?:' have different types 'int' and 'const char*'
[15:39:39] <Eelis> with a constexpr ternary expression, that would work
[15:39:41] *** Quits: lionkor (~lionkor@beammp/staff/lionkor) (Ping timeout: 264 seconds)
[15:39:42] *** Quits: frost (~frost@user/frost) (Ping timeout: 260 seconds)
[15:39:52] <Eelis> (analogous to "if constexpr")
[15:41:24] *** Quits: Guest38 (~Guest38@178.79.105.181) (Quit: Client closed)
[15:43:27] <Eelis> i wonder if you can make constexpr ternary expression as a macro
[15:43:50] *** Joins: proller (~p@2a02:6b8:0:40c:5076:f741:5552:43b2)
[15:44:27] *** Quits: Carbonflux (~Carbonflu@c-66-235-54-179.sea.wa.customer.broadstripe.net) (Quit: When all you have are solutions, everything is a problem.)
[15:45:04] *** Joins: m_ben (~m_ben@user/m-ben/x-7429725)
[15:45:24] *** Joins: Viewday19 (~Viewday@user/viewday)
[15:45:34] <PJBoy> ternary has the semantics of converting to the common type
[15:45:41] <Eelis> geordi: #define CIF(c,e1,e2) [&]{ if constexpr (c) return e1; else return e2; }() \ int main() { cout << CIF(true, 3, "bla"); }
[15:45:42] <geordi> 3
[15:45:44] <Eelis> there we go
[15:45:47] <PJBoy> I don't think anyone wants a heterogeneous ternary
[15:46:43] <Eelis> then i hope they like a macro instead ;)
[15:47:15] *** Quits: Viewday1 (~Viewday@user/viewday) (Ping timeout: 256 seconds)
[15:47:15] *** Viewday19 is now known as Viewday1
[15:47:18] *** Quits: CaCode_ (~CaCode@user/cacode) (Quit: Leaving)
[15:47:42] <PJBoy> honestly `F(b, exp_true, exp_false)` looks just as appealing as `b ? exp_true : exp_false` to me
[15:48:02] <Eelis> macros always look appealing when you give them single name identifiers
[15:48:07] <Eelis> *single letter identifiers
[15:48:34] <PJBoy> yeah I suppose that's the magic of operators
[15:48:44] <PJBoy> always being small tokens
[15:49:47] <PJBoy> shame ternary isn't overloadable, or I'd make a point about that
[15:50:43] <evangeline> One more thing: if I want to use the following, where I allocate memory inside the function and the function returns me that memory (if it succeeds), otherwise it cleans it up ... can I do something like this: https://godbolt.org/z/rsc88e8KG - this is not working, but the way to release() the resource, is that okay?
[15:50:48] *** Joins: Roughy (~mdaw45ns@user/roughy)
[15:52:32] <PJBoy> that looks fine
[15:54:05] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Remote host closed the connection)
[15:54:27] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[15:57:38] *** Joins: dv^_^ (~dv@eclipse.oxfordfun.com)
[16:01:03] *** Quits: wib_jonas (~wib_jonas@business-37-191-60-209.business.broadband.hu) (Quit: Client closed)
[16:04:52] *** Joins: CaCode (~CaCode@user/cacode)
[16:06:03] *** Joins: Viewday13 (~Viewday@user/viewday)
[16:08:13] *** Quits: Viewday1 (~Viewday@user/viewday) (Ping timeout: 256 seconds)
[16:08:13] *** Viewday13 is now known as Viewday1
[16:10:25] *** Joins: wib_jonas (~wib_jonas@business-37-191-60-209.business.broadband.hu)
[16:11:42] *** Quits: cm007magnum (~Rheanna@218.78.109.69) (Remote host closed the connection)
[16:13:56] *** Joins: cm007magnum (~Rheanna@61.171.38.68)
[16:16:05] *** Quits: chiselfuse (~chiselfus@user/chiselfuse) (Remote host closed the connection)
[16:16:29] *** Joins: jplejacq (~jplejacq@24.224.90.176)
[16:17:05] *** Joins: chiselfuse (~chiselfus@user/chiselfuse)
[16:19:26] *** Quits: Atque (~Atque@user/atque) (Remote host closed the connection)
[16:20:42] *** Joins: Atque (~Atque@user/atque)
[16:22:04] *** Joins: mattallmill (~mattallmi@ip68-103-132-187.ks.ok.cox.net)
[16:24:19] *** Quits: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it) (Remote host closed the connection)
[16:25:12] *** Joins: ElectronApps (~ElectronA@user/electronapps)
[16:25:39] *** Quits: mattallmill (~mattallmi@ip68-103-132-187.ks.ok.cox.net) (Client Quit)
[16:27:18] *** Joins: Viewday10 (~Viewday@user/viewday)
[16:28:37] *** Quits: Viewday1 (~Viewday@user/viewday) (Ping timeout: 256 seconds)
[16:28:37] *** Viewday10 is now known as Viewday1
[16:31:37] *** Quits: daswf852 (~daswf852@user/daswf852) (Read error: Connection reset by peer)
[16:32:24] *** Joins: daswf852 (~daswf852@user/daswf852)
[16:37:38] *** Joins: mattallmill (~mattallmi@ip68-103-132-187.ks.ok.cox.net)
[16:38:35] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[16:40:22] *** Quits: mattallmill (~mattallmi@ip68-103-132-187.ks.ok.cox.net) (Client Quit)
[16:40:39] *** Joins: mattallmill (~mattallmi@ip68-103-132-187.ks.ok.cox.net)
[16:41:24] *** Quits: chiselfuse (~chiselfus@user/chiselfuse) (Remote host closed the connection)
[16:41:34] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Remote host closed the connection)
[16:42:32] *** Joins: chiselfuse (~chiselfus@user/chiselfuse)
[16:42:41] *** Quits: mattallmill (~mattallmi@ip68-103-132-187.ks.ok.cox.net) (Client Quit)
[16:43:01] *** Joins: mattallmill (~mattallmi@ip68-103-132-187.ks.ok.cox.net)
[16:44:05] *** Quits: mattallmill (~mattallmi@ip68-103-132-187.ks.ok.cox.net) (Client Quit)
[16:44:21] *** Joins: mattallmill (~mattallmi@ip68-103-132-187.ks.ok.cox.net)
[16:45:12] *** Quits: mattallmill (~mattallmi@ip68-103-132-187.ks.ok.cox.net) (Client Quit)
[16:45:31] *** Joins: mattallmill (~mattallmi@ip68-103-132-187.ks.ok.cox.net)
[16:47:48] *** Joins: Viewday14 (~Viewday@user/viewday)
[16:50:09] *** Quits: Viewday1 (~Viewday@user/viewday) (Ping timeout: 256 seconds)
[16:52:06] *** Joins: Viewday1 (~Viewday@user/viewday)
[16:54:07] *** Quits: Viewday14 (~Viewday@user/viewday) (Ping timeout: 256 seconds)
[16:56:43] *** Joins: constxd (~brad@192.75.101.164)
[16:59:07] *** Joins: RangerBobVA (~bmaddox@user/rangerbobva)
[17:01:15] *** Quits: cpuid_ (~cpuid@static.136.43.161.5.clients.your-server.de) (Ping timeout: 244 seconds)
[17:01:15] *** Quits: cm007magnum (~Rheanna@61.171.38.68) (Remote host closed the connection)
[17:01:38] *** Joins: AJRS (~AJRS@user/ajrs)
[17:02:01] *** Joins: wolfman2000 (~wolfman20@2600:1700:3211:4140:fc5a:c136:8b87:a942)
[17:02:42] *** Joins: cm007magnum (~Rheanna@218.78.99.237)
[17:02:46] *** Quits: pa (~pah@user/pah) (Ping timeout: 260 seconds)
[17:03:08] *** Parts: AJRS (~AJRS@user/ajrs) ()
[17:07:58] *** Joins: Viewday13 (~Viewday@user/viewday)
[17:09:44] *** Joins: GreenResponse (~tomek@r-45-155-148-237.gpon.bialnet.pl)
[17:09:59] *** Quits: Viewday1 (~Viewday@user/viewday) (Ping timeout: 256 seconds)
[17:09:59] *** Viewday13 is now known as Viewday1
[17:10:35] *** Joins: Moosadee (~Moosadee@136.32.155.193)
[17:19:59] *** Joins: pah (~pah@user/pah)
[17:26:39] *** Joins: useretail (~useretail@185.132.19.151)
[17:30:00] *** Quits: CaCode (~CaCode@user/cacode) (Quit: Leaving)
[17:32:40] *** Joins: martiert (~martiert@ti0185q160-2775.bb.online.no)
[17:32:56] *** Joins: Viewday14 (~Viewday@user/viewday)
[17:34:55] *** Quits: Viewday1 (~Viewday@user/viewday) (Ping timeout: 256 seconds)
[17:34:55] *** Viewday14 is now known as Viewday1
[17:35:11] *** Quits: Enitin (~Enitin@82.102.22.85) (Ping timeout: 264 seconds)
[17:37:32] *** Quits: pah (~pah@user/pah) (Ping timeout: 240 seconds)
[17:37:33] *** Joins: Enitin (~Enitin@82.102.22.86)
[17:37:50] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[17:37:59] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[17:37:59] *** ChanServ sets mode: +v npaperbot
[17:39:12] *** Joins: ania123 (~ania123@212.72.140.51)
[17:39:42] *** Joins: pah (~pah@user/pah)
[17:46:47] *** Joins: pah_ (~pah@host-87-20-64-13.retail.telecomitalia.it)
[17:47:02] *** Quits: pah (~pah@user/pah) (Ping timeout: 240 seconds)
[17:48:59] *** Quits: mattallmill (~mattallmi@ip68-103-132-187.ks.ok.cox.net) (Ping timeout: 264 seconds)
[17:50:23] *** Joins: sn0wdrone (~snowdrone@user/snowdrone)
[17:51:22] *** Quits: cm007magnum (~Rheanna@218.78.99.237) (Remote host closed the connection)
[17:51:24] <imi> can I specialize a template to lambdas?
[17:52:02] <Oxyd> What do you mean by “specialize a template to lambdas”?
[17:53:00] *** Joins: cm007magnum (~Rheanna@61.171.21.169)
[17:53:20] *** Joins: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net)
[17:53:37] *** Quits: snowdrone (~snowdrone@120.245.112.137) (Ping timeout: 256 seconds)
[17:53:45] *** Joins: Viewday19 (~Viewday@user/viewday)
[17:55:53] *** Quits: Viewday1 (~Viewday@user/viewday) (Ping timeout: 256 seconds)
[17:55:53] *** Viewday19 is now known as Viewday1
[17:57:20] *** Joins: snowdrone (~snowdrone@user/snowdrone)
[17:58:57] <kaichiuchu> question
[17:59:06] <kaichiuchu> what is the general feeling of long lambdas?
[17:59:33] <kaichiuchu> e.g. a lambda that is more than a few lines
[17:59:47] *** Quits: Dreadnaught (Kulrak@n122-109-33-182.rdl1.qld.optusnet.com.au) (Ping timeout: 264 seconds)
[17:59:51] *** Quits: sn0wdrone (~snowdrone@user/snowdrone) (Ping timeout: 256 seconds)
[18:01:02] <ville> yellow
[18:01:21] <kaichiuchu> i'm inclined to believe the same.
[18:01:22] *** Joins: sedeki (~textual@user/sedeki)
[18:01:30] <PJBoy> my company is more of a orange fan
[18:05:19] *** Joins: riv (river@tilde.team/user/river)
[18:05:26] <riv> hey im new to C++
[18:05:34] <riv> i dont understand subclassing/overriding functions
[18:05:56] <riv> you can only really override functions that the subclass has thought that someone would override? by declaring virtual?
[18:06:06] <riv> and if its not virtual you are kind of out of luck?
[18:06:32] *** Quits: pah_ (~pah@host-87-20-64-13.retail.telecomitalia.it) (Ping timeout: 240 seconds)
[18:07:47] *** Quits: sedeki (~textual@user/sedeki) (Ping timeout: 246 seconds)
[18:08:23] *** Joins: pah (~pah@user/pah)
[18:08:28] *** Joins: sedeki (~textual@user/sedeki)
[18:08:32] *** Quits: lucido (~lucido@p200300de0f10ed0f89b4856232b96b8e.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[18:09:16] *** Joins: Kulrak (Kulrak@n122-109-135-144.rdl2.qld.optusnet.com.au)
[18:12:23] <urdh> long lambdas are clearly mauve
[18:12:30] *** Joins: gh34 (~textual@cpe-184-58-181-106.wi.res.rr.com)
[18:13:37] <urdh> riv: yes, and that's very intentional
[18:14:15] <riv> what is the benefit of it?
[18:14:32] <urdh> of not having everything virtual by default?
[18:14:47] *** Joins: Ronalds_Mazitis_ (~Ronalds_M@46.109.76.104)
[18:15:16] <Eelis> kaichiuchu: i guess it's the same as with long functions in general: it's not preferred but sometimes the alternative is worse
[18:15:22] <urdh> riv: https://isocpp.org/wiki/faq/virtual-functions#virtual-by-default
[18:15:28] <riv> thank you
[18:16:11] *** Joins: Inline (~Inline@aftr-37-201-240-235.unity-media.net)
[18:18:47] *** Joins: jkaye (~jkaye@2601:281:8300:7530:212b:79de:3c7b:f9e0)
[18:19:27] *** Quits: slidercrank (~slidercra@user/slidercrank) (Read error: Connection reset by peer)
[18:19:35] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:4d21:33e0:266f:38f8)
[18:20:07] *** Joins: slidercrank (~slidercra@user/slidercrank)
[18:20:24] *** Joins: xkuru (~xkuru@user/xkuru)
[18:22:58] *** Joins: glestrade (~glestrade@104-185-184-158.lightspeed.sndgca.sbcglobal.net)
[18:23:30] *** Joins: emerent_ (~quassel@p200300cd572fe8a8ba27ebfffed28a59.dip0.t-ipconnect.de)
[18:23:30] *** emerent is now known as Guest9840
[18:23:30] *** Quits: Guest9840 (~quassel@p200300cd5703cdd4ba27ebfffed28a59.dip0.t-ipconnect.de) (Killed (iridium.libera.chat (Nickname regained by services)))
[18:23:30] *** emerent_ is now known as emerent
[18:23:51] *** Quits: alkino_ (~quassel@user/alkino) (Ping timeout: 250 seconds)
[18:24:08] *** Joins: alkino (~quassel@user/alkino)
[18:24:43] *** Quits: sedeki (~textual@user/sedeki) (Quit: Textual IRC Client: www.textualapp.com)
[18:26:04] *** Joins: dyeplexer (~dyeplexer@user/dyeplexer)
[18:29:40] *** Quits: proller (~p@2a02:6b8:0:40c:5076:f741:5552:43b2) (Ping timeout: 268 seconds)
[18:30:03] *** Quits: ko (~i.am@user/marlboro) (Quit: I come down here for a fat woman and that's what I'm havin.)
[18:33:31] <Alipha> imi: you can detect (and therefore, specialize) if an object has a operator() which can be called with specific parameters
[18:34:13] <Alipha> supernovah: you'll have to paste a testcase
[18:34:15] *** Quits: emerent (~quassel@p200300cd572fe8a8ba27ebfffed28a59.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[18:34:20] <Alipha> !give supernovah testcase
[18:34:22] <nolyc> supernovah: A testcase is the _least_ amount of code that replicates your problem, paste it to https://wandbox.org/ then: 1) click run 2) click share 3) click url and 4) paste the url for us. You _must_ use that website. Do _not_ use a different website. Do _not_ paste code to the channel. See the testcase checklist at http://eel.is/iso-c++/testcase/
[18:34:38] *** Joins: emerent (~quassel@p200300cd57303249ba27ebfffed28a59.dip0.t-ipconnect.de)
[18:34:51] *** Quits: Viewday1 (~Viewday@user/viewday) (Read error: Connection reset by peer)
[18:35:15] *** Joins: Viewday1 (~Viewday@user/viewday)
[18:35:36] <Alipha> RokerHRO: PJBoy: I would think those double and long double sizes would be non-conforming
[18:35:57] *** Joins: great_taste (~great_tas@190.32.235.20)
[18:36:02] *** Quits: JohnMS_WORK (~kvirc@185.73.229.242) (Ping timeout: 240 seconds)
[18:36:04] <imi> Alipha: how to do that?
[18:37:14] *** Quits: ania123 (~ania123@212.72.140.51) (Quit: Client closed)
[18:38:32] *** Quits: dyeplexer (~dyeplexer@user/dyeplexer) (Ping timeout: 240 seconds)
[18:41:13] *** Quits: cm007magnum (~Rheanna@61.171.21.169) (Remote host closed the connection)
[18:41:50] *** Joins: zen_coder (~zen_coder@2a02:8109:a280:2d8d:b80b:fa5c:c6a4:6438)
[18:42:49] *** Joins: chozorho (~chozorho@2601:146:300:c30::685f)
[18:42:52] <Alipha> imi: unfortunately, I'm on a phone atm, so typing out an example is painful. Maybe someone else will. Be you'd SFINAE using https://en.cppreference.com/w/cpp/types/is_invocable
[18:43:01] *** Joins: cm007magnum (~Rheanna@101.91.232.166)
[18:43:57] <Alipha> Or use the concept, https://en.cppreference.com/w/cpp/concepts/invocable
[18:45:32] *** Quits: emerent (~quassel@p200300cd57303249ba27ebfffed28a59.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[18:45:37] *** Quits: glestrade (~glestrade@104-185-184-158.lightspeed.sndgca.sbcglobal.net) (Quit: glestrade)
[18:45:46] <zen_coder> I have two nested namesapces, how can I go one level up? https://ideone.com/YSuceJ
[18:45:52] <PJBoy> Alipha, don't think so
[18:45:55] <RokerHRO> 〇
[18:46:08] <PJBoy> floating points have no requirements other than double >= float and long double >= double
[18:46:18] *** Joins: emerent (~quassel@p200300cd57307093ba27ebfffed28a59.dip0.t-ipconnect.de)
[18:47:06] <imMute> zen_coder: change line 11 to "::core::nested1::func1();"   the leading :: means "start at the root".  you could also leave off the leading ::, "nested1::func1()", and I believe that would work too
[18:47:48] *** Joins: glestrade (~glestrade@104-185-184-158.lightspeed.sndgca.sbcglobal.net)
[18:48:19] <ville> PJBoy: there are some more requirements
[18:49:14] <PJBoy> ( http://eel.is/c++draft/basic.fundamental#12 )
[18:50:09] <PJBoy> as far as I can tell, a type that has only the value 0 and nothing else would be a valid float
[18:50:20] <evangeline> What is the best way to handle exceptions in std::vector (might throw if there's no memory). 1) ignore it, it almost never happens. 2) Put a try/catch around every use of std::vector (not a particularly good approach, we don't want to have try/except everywhere). 3) Add try/except somewhere up the call stack (viable if we have a single entry into the majority of the functions called, but if there are many entries into the code like exported functions
[18:50:20] <evangeline> it's not as usable). 4) any other suggestions?
[18:50:52] *** Joins: asen_ (~asen@2408:821b:618:2ef0:ab85:814b:bf8f:a143)
[18:51:15] <ville> PJBoy: they come from c: https://port70.net/~nsz/c/c11/n1570.html#5.2.4.2.2
[18:51:16] *** Joins: dyeplexer (~dyeplexer@user/dyeplexer)
[18:51:26] <urdh> evangeline: (1)
[18:51:39] <PJBoy> oh yeah there's the floating point environment
[18:51:56] <PJBoy> but that has no additional impact on float types
[18:52:03] <urdh> bad_alloc is (mostly) impossible to handle, and on many platforms overallocation will mean you get a page fault before you ever get bad_alloc anyway
[18:52:04] <evangeline> urdh, so we just ignore it and let exception occur and since it's not handled, std::terminate will be called
[18:52:12] *** Quits: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse) (Read error: Connection reset by peer)
[18:52:44] <urdh> evangeline: yes, that's usually the most reasonable approach
[18:53:09] <urdh> there's a paper about this somewhere, I'm sure
[18:53:32] <urdh> [p1404]
[18:53:32] <npaperbot> P1404R1: [Evolution, Library Evolution] bad_alloc is not out-of-memory! <https://wg21.link/p1404r1> (by Andrzej Krzemieński, Tomasz Kamiński) (2019-06-17) (Related: https://wg21.link/p1404r1/github)
[18:53:47] *** Joins: p_____ (~dyeplexer@user/dyeplexer)
[18:54:03] <PJBoy> I would write the try-catch somewhere you can handle the error
[18:54:12] <PJBoy> which is highly context dependent
[18:54:23] *** Quits: p_____ (~dyeplexer@user/dyeplexer) (Remote host closed the connection)
[18:54:37] <PJBoy> I wouldn't be inclined to let terminate happen, as then your dtors don't execute
[18:55:52] *** Joins: Viewday12 (~Viewday@user/viewday)
[18:56:16] <evangeline> PJBoy, so you would do 3)
[18:56:46] *** Quits: dyeplexer (~dyeplexer@user/dyeplexer) (Ping timeout: 245 seconds)
[18:56:58] <PJBoy> yeah
[18:57:17] *** Joins: jabroni (~mar1@209.58.172.83)
[18:57:19] *** Joins: pulse (~pulse@user/pulse)
[18:57:25] <evangeline> PJBoy, urdh thank you
[18:57:39] *** Quits: Viewday1 (~Viewday@user/viewday) (Ping timeout: 256 seconds)
[18:57:40] *** Viewday12 is now known as Viewday1
[18:57:50] <PJBoy> I don't disagree with urdh though
[18:58:11] *** Joins: zer0bitz (~zer0bitz@dsl-hkibng31-54fae3-116.dhcp.inet.fi)
[18:58:16] <PJBoy> simple programs don't need to bother handling allocation failure
[18:58:31] <PJBoy> and the OOM killer will making bad_alloc not get thrown
[18:58:47] <evangeline> OOM killer?
[18:59:11] <PJBoy> it's a linux demon that kills programs that asked for lots of memory and then had the gall to actually use it
[18:59:32] <PJBoy> you'd need to disable it if you wanted memory allocation failure to throw bad_alloc
[19:08:28] <furrymcgee> doesnt kill cause std::terminate?
[19:08:29] *** Joins: bitmask (~bitmask@c-73-215-237-27.hsd1.nj.comcast.net)
[19:10:03] *** pah is now known as pa
[19:11:18] <PJBoy> maybe?
[19:11:26] <PJBoy> idk if it sigkills it or sigterms it
[19:13:05] *** Joins: magla (~gelignite@55d416cc.access.ecotel.net)
[19:13:07] *** Quits: Raziel (~Raziel@user/raziel) (Read error: Connection reset by peer)
[19:13:24] <urdh> it wouldn't cause std::terminate
[19:13:43] <urdh> possibly it would have an identical effect (ignoring terminate handlers), though
[19:15:52] <ville> you want to have a "try" up the stack to get exceptions anyway
[19:16:26] *** Joins: Viewday17 (~Viewday@user/viewday)
[19:16:41] *** Quits: interop_madness (~interop_m@user/interop-madness/x-0950004) (Quit: Leaving)
[19:17:22] *** Quits: glestrade (~glestrade@104-185-184-158.lightspeed.sndgca.sbcglobal.net) (Quit: glestrade)
[19:17:57] *** Joins: ahlk (~user@2600:1700:31c0:3a10::43)
[19:18:03] *** Quits: Viewday1 (~Viewday@user/viewday) (Ping timeout: 256 seconds)
[19:18:04] *** Viewday17 is now known as Viewday1
[19:21:00] <imMute> PJBoy: 1) the OOM killer is in the kernel, not userspace (though there is a development effort to allow userspace to handle it first)   2) the OOM Killer SIGKILL's the process, there's no way to catch it in the program.
[19:21:17] <PJBoy> right
[19:21:24] *** Quits: ElectronApps (~ElectronA@user/electronapps) (Remote host closed the connection)
[19:21:42] <PJBoy> was point 1) in reference to anything I said?
[19:21:47] <riv> is there any photographic evidence of this "OOM Killer"?
[19:21:59] <imMute> < PJBoy> it's a linux demon that ...
[19:22:04] <PJBoy> ah
[19:22:21] <PJBoy> thanks for that
[19:22:52] <imMute> and it's memory overcommit that you want to disable to get bad_alloc on memory allocation failure.  I don't think it's possible to disable the OOM Killer
[19:23:00] <ville> hmm it seems that part as been reworded at some point, or i can't find the reference i was thinking of
[19:23:23] <PJBoy> I've disabled the OOM killer
[19:23:36] <PJBoy> we do it at work
[19:23:43] <PJBoy> and I had to do it for my uni dissertation project
[19:23:48] <imMute> sounds like a recipe for disaster
[19:23:57] <PJBoy> OOM is the disaster
[19:24:02] <PJBoy> *OOM killer
[19:24:24] <urdh> this could all just be resolved by not having finite memory
[19:25:56] *** Joins: sn0wdrone (~snowdrone@user/snowdrone)
[19:27:59] *** Quits: asen_ (~asen@2408:821b:618:2ef0:ab85:814b:bf8f:a143) (Read error: Connection reset by peer)
[19:28:15] *** Quits: snowdrone (~snowdrone@user/snowdrone) (Ping timeout: 256 seconds)
[19:28:16] *** Joins: asen_ (~asen@2408:821b:618:2ef0:ab85:814b:bf8f:a143)
[19:28:21] *** Quits: bindu (~bindu@user/bindu) (Remote host closed the connection)
[19:28:37] *** Joins: bindu (~bindu@user/bindu)
[19:28:55] *** Quits: asen_ (~asen@2408:821b:618:2ef0:ab85:814b:bf8f:a143) (Max SendQ exceeded)
[19:29:47] *** Joins: JohnMS_WORK (~kvirc@213.134.183.29)
[19:31:32] *** Quits: cm007magnum (~Rheanna@101.91.232.166) (Remote host closed the connection)
[19:35:31] *** Joins: proller (~p@2a02:6b8:0:40c:33a1:c83e:19df:80e8)
[19:36:40] *** Joins: pah (~pah@user/pah)
[19:36:58] *** Joins: Viewday19 (~Viewday@user/viewday)
[19:37:01] <CarloWood> This works:
[19:37:02] *** Quits: pa (~pah@user/pah) (Ping timeout: 240 seconds)
[19:37:04] <CarloWood> { A a{._n = 42}; std::unique_ptr<A> p = std::make_unique<A>(); } struct A { int _n; std::mutex _m; };
[19:37:04] <geordi>  
[19:37:16] *** Joins: skapata (~Skapata@2804:14c:87b0:a6f9:b86f:881a:ecd7:30b5)
[19:37:17] *** Quits: skapata (~Skapata@2804:14c:87b0:a6f9:b86f:881a:ecd7:30b5) (Changing host)
[19:37:17] *** Joins: skapata (~Skapata@user/skapata)
[19:37:52] <CarloWood> struct A has no constructor. So, I can use designated initializer in `A a{._n = 42};`.
[19:38:04] <vancz> is it possible to put my >> overloads in a PrettyPrinter class or something?
[19:38:27] *** Quits: Viewday1 (~Viewday@user/viewday) (Ping timeout: 256 seconds)
[19:38:27] *** Viewday19 is now known as Viewday1
[19:38:37] <CarloWood> make_unique also works when using the default constructor. But now I want to initialize A like 'a' when creating the unique A... How?
[19:38:44] <CarloWood> This doesn't work:
[19:39:00] <CarloWood> { A a{._n = 42}; std::unique_ptr<A> p = std::make_unique<A>({._n = 42}); } struct A { int _n; std::mutex _m; };
[19:39:00] <geordi> error: no matching function for call to 'make_unique<A>(<brace-enclosed initializer list>)'
[19:39:01] <vancz> theres two logical ways to do it, putting them all in one place or putting them in their respective classes
[19:39:51] *** Joins: snowdrone (~snowdrone@user/snowdrone)
[19:41:32] *** Quits: pah (~pah@user/pah) (Ping timeout: 240 seconds)
[19:42:22] *** Quits: sn0wdrone (~snowdrone@user/snowdrone) (Ping timeout: 260 seconds)
[19:42:57] *** Joins: pah (~pah@user/pah)
[19:43:05] <Eelis> !fs perfect
[19:43:05] <nolyc> The C++11 forwarding idiom (which uses a variadic template and std::forward) is not quite perfect, because the following cannot be forwarded transparently: initializer lists, 0 as a null pointer, addresses of function templates or overloaded functions, rvalue uses of definition-less static constants, and access control.
[19:43:13] *** Parts: riv (river@tilde.team/user/river) (WeeChat 3.3)
[19:45:36] <urdh> vancz: just shove them in a pretty_printing.hpp header or something if you feel like they would be cluttering up the "main" header
[19:46:23] *** Quits: JohnMS_WORK (~kvirc@213.134.183.29) (Ping timeout: 256 seconds)
[19:50:01] <anyone> Nobody should use 0 as a nullptr today
[19:50:32] *** Quits: Moosadee (~Moosadee@136.32.155.193) (Ping timeout: 240 seconds)
[19:51:23] *** Quits: letto (~letto@86.120.85.133) (Quit: Konversation terminated!)
[19:52:07] *** Joins: letto (~letto@86.120.85.133)
[19:52:37] *** Quits: pah (~pah@user/pah) (Ping timeout: 256 seconds)
[19:52:50] *** Joins: Viewday14 (~Viewday@user/viewday)
[19:54:53] *** Quits: Viewday1 (~Viewday@user/viewday) (Ping timeout: 256 seconds)
[19:54:53] *** Viewday14 is now known as Viewday1
[19:56:16] *** Quits: wib_jonas (~wib_jonas@business-37-191-60-209.business.broadband.hu) (Quit: Client closed)
[19:56:37] *** Quits: cart_man (~rynot@host-78-144-127-199.as13285.net) (Quit: Konversation terminated!)
[19:57:11] *** Joins: pah_ (~pah@host-79-42-71-25.retail.telecomitalia.it)
[20:05:13] <PJBoy> to be fair
[20:05:31] <PJBoy> I had to use a (void*)0 instead of nullptr recently
[20:05:57] <PJBoy> because this unit testing framework is using ostream << X to output information
[20:06:08] <PJBoy> and prior to C++17, nullptr_t had no ostream operator<< overload
[20:06:40] *** Joins: lucido (~lucido@p200300de0f10ed0f05dc969ef16862ed.dip0.t-ipconnect.de)
[20:06:43] *** Joins: JeffH (~JeffH@205.sub-174-198-141.myvzw.com)
[20:07:19] *** Quits: JeffH (~JeffH@205.sub-174-198-141.myvzw.com) (Remote host closed the connection)
[20:08:12] *** Joins: JeffH (~JeffH@205.sub-174-198-141.myvzw.com)
[20:09:13] *** Quits: JeffH (~JeffH@205.sub-174-198-141.myvzw.com) (Remote host closed the connection)
[20:10:21] *** Joins: JeffH (~JeffH@205.sub-174-198-141.myvzw.com)
[20:11:25] *** Quits: slidercrank (~slidercra@user/slidercrank) (Quit: Why not ask me about Sevastopol's safety protocols?)
[20:12:29] *** Joins: Viewday11 (~Viewday@user/viewday)
[20:14:43] *** Quits: Viewday1 (~Viewday@user/viewday) (Ping timeout: 256 seconds)
[20:14:43] *** Viewday11 is now known as Viewday1
[20:17:59] <CarloWood> Anyone has an insight about my question?
[20:18:39] *** Quits: teepee (~teepee@openscad/teepee) (Remote host closed the connection)
[20:18:51] <CarloWood> It seems that only way to non-default construct a struct with a std::mutex and assign it to a std::unique_ptr is by adding a constructor to that struct.
[20:19:42] <CarloWood> Even though you can use designated initialization otherwise :/.  Perhaps even initializer lists?
[20:19:54] <CarloWood> { A a{._n = 42}; std::unique_ptr<A> p = std::make_unique<A>(); } struct A { int _n; std::mutex _m; };
[20:19:55] <geordi>  
[20:19:59] *** Joins: teepee (~teepee@openscad/teepee)
[20:20:09] <CarloWood> That's designated initializer
[20:20:23] <CarloWood> { A a{42, {}}; std::unique_ptr<A> p = std::make_unique<A>(); } struct A { int _n; std::mutex _m; };
[20:20:23] <geordi>  
[20:20:29] <CarloWood> yup, also works.
[20:20:43] *** Joins: Raziel (~Raziel@user/raziel)
[20:20:45] <CarloWood> but I bet you can't use that for the std::make_unique either...
[20:20:45] <anyone> but what's the non-working version you aimed at?
[20:21:11] <CarloWood> All of this uses `std::make_unique<A>()`, the default constructor of A.
[20:21:26] <CarloWood> Try to give A::_n a value without adding a constructor to A.
[20:21:35] <CarloWood> ie
[20:21:36] *** Joins: cm007magnum (~Rheanna@101.89.150.168)
[20:21:46] <CarloWood> { A a{42, {}}; std::unique_ptr<A> p = std::make_unique<A>({42, {}}); } struct A { int _n; std::mutex _m; };
[20:21:47] <geordi> error: no matching function for call to 'make_unique<A>(<brace-enclosed initializer list>)'
[20:22:15] <anyone> geordi: { A a{42, {}}; std::unique_ptr<A> p = std::make_unique<A>(42); } struct A { int _n; std::mutex _m; };
[20:22:16] <geordi>  
[20:22:37] <CarloWood> heh
[20:22:38] <anyone> make_unique forwards all arguments just like map::emplace, so no extra {}
[20:22:46] <CarloWood> but but
[20:22:47] <anyone> on the outside
[20:22:54] <CarloWood> there is no A(int) !
[20:23:19] <anyone> there is A(const initializer_list&) which is getting used, since there is no A() declared
[20:23:29] <PJBoy> C++20 aggregate init and all that
[20:23:39] <CarloWood> Oh... then...
[20:23:40] <PJBoy> geordi, use --2017
[20:23:41] <geordi> error: no matching function for call to 'A::A(int)'
[20:23:56] <PJBoy> notably it doesn't use initializer_list
[20:24:04] <CarloWood> geordi, use --2020
[20:24:04] <geordi> Same error.
[20:24:07] <CarloWood> :/
[20:24:13] <CarloWood> switch it back please
[20:24:20] <PJBoy> geordi, omit --2017
[20:24:20] <geordi> error: prelude-20.hpp: No such file or directory
[20:24:24] <anyone> lol
[20:24:24] <PJBoy> geordi, omit --2020
[20:24:24] <geordi>  
[20:24:49] <CarloWood> { A a{42, {}}; std::unique_ptr<A> p = std::make_unique<A>(42); } struct A { std::mutex _m; int _n; };
[20:24:49] <geordi> error: could not convert '42' from 'int' to 'mutex'
[20:24:50] <anyone> just add a ctor and move on
[20:25:02] <CarloWood> It's not that easy
[20:25:14] <anyone> that's what she said
[20:25:19] <CarloWood> { A a{42, {}}; std::unique_ptr<A> p = std::make_unique<A>({}, 42); } struct A { std::mutex _m; int _n; };
[20:25:19] <geordi> Same error.
[20:25:36] <CarloWood> Ok.. can you do this one too?
[20:25:41] <CarloWood> with the mutex first
[20:25:46] <anyone> No, because you can't move a mutex
[20:25:57] <anyone> (moving it from the argument list into an A, in case you ask)
[20:26:29] <CarloWood> Oh wait... I didn't change the A a{ stuff
[20:26:46] <CarloWood> { A a{._n = 42}; std::unique_ptr<A> p = std::make_unique<A>({}, 42); } struct A { std::mutex _m; int _n; };
[20:26:46] <geordi> error: no matching function for call to 'make_unique<A>(<brace-enclosed initializer list>, int)'
[20:26:56] <PJBoy> that's more like it
[20:26:59] <CarloWood> { A a{._n = 42}; std::unique_ptr<A> p = std::make_unique<A>(42); } struct A { std::mutex _m; int _n; };
[20:26:59] <geordi> error: could not convert 'forward<int>((* & __args#0))' from 'int' to 'mutex'
[20:27:21] <CarloWood> Can we tell it to skip the mutex? (Use the default constructor for it)?
[20:27:29] <anyone> no
[20:27:32] <PJBoy> nope
[20:27:46] <PJBoy> limitation of emplace semantics
[20:27:50] *** Quits: JeffH (~JeffH@205.sub-174-198-141.myvzw.com) (Remote host closed the connection)
[20:28:22] <CarloWood> Guess I'll have to add a constructor then :(
[20:29:49] *** Quits: furrymcgee (~devuan@cgn-89-1-208-64.nc.de) (Quit: leaving)
[20:30:41] *** Quits: lkor (~lionkor@beammp/staff/lionkor) (Ping timeout: 264 seconds)
[20:30:57] *** Joins: lkor (~lionkor@beammp/staff/lionkor)
[20:33:07] *** Joins: rgrinberg (~textual@200.5.63.76)
[20:33:35] *** Joins: Viewday19 (~Viewday@user/viewday)
[20:35:11] *** Quits: Viewday1 (~Viewday@user/viewday) (Read error: Connection reset by peer)
[20:35:12] *** Viewday19 is now known as Viewday1
[20:42:02] *** Quits: lucido (~lucido@p200300de0f10ed0f05dc969ef16862ed.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[20:51:24] *** Joins: engest (~engest@50.39.227.219)
[20:51:51] *** Joins: JeffH (~JeffH@205.sub-174-198-141.myvzw.com)
[20:52:52] *** Quits: JeffH (~JeffH@205.sub-174-198-141.myvzw.com) (Remote host closed the connection)
[20:53:22] *** Joins: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com)
[20:54:04] *** Joins: Viewday17 (~Viewday@user/viewday)
[20:54:59] *** Joins: JeffH (~JeffH@205.sub-174-198-141.myvzw.com)
[20:55:01] *** Quits: JeffH (~JeffH@205.sub-174-198-141.myvzw.com) (Client Quit)
[20:55:58] *** Joins: JeffH (~JeffH@205.sub-174-198-141.myvzw.com)
[20:56:05] *** Quits: Viewday1 (~Viewday@user/viewday) (Ping timeout: 256 seconds)
[20:56:05] *** Viewday17 is now known as Viewday1
[20:58:57] *** Joins: foobaz212 (~foobaz212@88.98.219.238)
[21:00:08] *** Quits: urdh (~urdh@user/urdh) (Remote host closed the connection)
[21:02:01] *** Quits: JeffH (~JeffH@205.sub-174-198-141.myvzw.com) (Remote host closed the connection)
[21:07:30] *** Quits: RangerBobVA (~bmaddox@user/rangerbobva) (Quit: Leaving)
[21:09:53] *** Joins: RangerBobVA (~bmaddox@user/rangerbobva)
[21:10:18] <CarloWood> I want a concept that only allows bit in a mask 1, 2 and 4.  What am I doing wrong here though? I don't get the error :/
[21:10:22] <CarloWood> { A<8> a; } template<uint32_t flags> struct is_allowed : std::false_type {}; template<uint32_t flags> concept ConceptFlags = is_allowed<flags>::value; template<ConceptFlags flags> struct A {};
[21:10:22] <geordi> error: 'ConceptFlags' does not constrain a type
[21:11:14] *** Quits: cm007magnum (~Rheanna@101.89.150.168) (Remote host closed the connection)
[21:12:20] <CarloWood> Do concepts not work for integer template arguments?
[21:13:08] *** Joins: glestrade (~glestrade@104-185-184-158.lightspeed.sndgca.sbcglobal.net)
[21:13:58] *** Joins: cm007magnum (~Rheanna@218.78.67.149)
[21:14:28] *** Joins: X-Scale` (~ARM@165.201.137.78.rev.vodafone.pt)
[21:14:29] *** Joins: Viewday17 (~Viewday@user/viewday)
[21:15:05] *** Quits: X-Scale (~ARM@31.22.162.107) (Ping timeout: 264 seconds)
[21:15:08] *** Quits: nvmd (~nvmd@user/nvmd) (Quit: Later, nerds.)
[21:16:29] *** Quits: Viewday1 (~Viewday@user/viewday) (Ping timeout: 256 seconds)
[21:16:29] *** Viewday17 is now known as Viewday1
[21:16:45] *** X-Scale` is now known as X-Scale
[21:17:09] *** Joins: spaceangel (~spaceange@ip-89-176-181-220.net.upcbroadband.cz)
[21:19:05] <Alipha> apparently not. static_assert inside A :-)
[21:19:21] <CarloWood> thx
[21:19:51] *** Joins: tradar (~tradar@user/tradar)
[21:21:31] *** ski_ is now known as ski
[21:23:51] *** Joins: Moosadee (~Moosadee@136.32.155.193)
[21:28:06] <Alipha> imi: there's this: https://wandbox.org/permlink/B5mYw3zn7MVvnxsL
[21:28:51] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Quit: sord937)
[21:30:58] *** Quits: tradar (~tradar@user/tradar) (Quit: tradar)
[21:33:18] *** Joins: byku45 (~byku@host-92-10-130-64.as13285.net)
[21:33:59] *** Quits: andreasbuhr (~quassel@p548ddf3f.dip0.t-ipconnect.de) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[21:35:24] *** Quits: indy (~indy@dsl-static-104.213-160-167.telecom.sk) (Read error: Connection reset by peer)
[21:35:29] *** Joins: Viewday12 (~Viewday@user/viewday)
[21:36:42] *** Joins: indy (~indy@dsl-static-104.213-160-167.telecom.sk)
[21:37:13] *** Joins: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it)
[21:37:27] *** Quits: Viewday1 (~Viewday@user/viewday) (Ping timeout: 256 seconds)
[21:37:28] *** Viewday12 is now known as Viewday1
[21:37:51] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[21:37:58] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[21:37:58] *** ChanServ sets mode: +v npaperbot
[21:45:18] <CarloWood> Alipha: Do you know how I can do this?  I want a constructor to only be enabled/exist for certain template parameter values:
[21:45:21] <CarloWood> { A<1> a(42); } template<int n> struct A { A(string) {}  A(int) {} };
[21:45:22] <geordi>  
[21:45:50] <CarloWood> This should not compile unless n == 2, because A(int) should only be enabled for n == 2.
[21:47:25] <CarloWood> { A<1> a(42); } template<int n> struct A { A(string) {}  A(int) { if constexpr (n != 2) { static_assert(false, "n must be 2"); } } };
[21:47:25] <geordi> error: static assertion failed: n must be 2
[21:47:31] <CarloWood> { A<2> a(42); } template<int n> struct A { A(string) {}  A(int) { if constexpr (n != 2) { static_assert(false, "n must be 2"); } } };
[21:47:31] <geordi> Same error.
[21:47:34] <CarloWood> dang
[21:48:15] <Alipha> static_assert(false); always produces a compile error
[21:48:25] *** Joins: nejni-marji (~nejni-mar@user/nejni-marji)
[21:48:32] <CarloWood> { A<2> a(42); } template<int n> struct A { A(string) {}  A(int) { if constexpr (n != 2) { static_assert(n == 2, "n must be 2"); } } };
[21:48:33] <geordi>  
[21:48:38] <CarloWood> { A<1> a(42); } template<int n> struct A { A(string) {}  A(int) { if constexpr (n != 2) { static_assert(n == 2, "n must be 2"); } } };
[21:48:38] <geordi> error: static assertion failed: n must be 2
[21:48:42] <CarloWood> :)
[21:48:56] <CarloWood> Is there a way to just get rid of the constructor?
[21:48:56] *** Joins: Yruama (~Yruama@2a01:cb15:8139:9400:8634:97ff:fe6e:86ac)
[21:48:56] <nejni-marji> Does anyone know where I can ask about help with Xlib library stuff?
[21:48:58] <Alipha> The if constexpr is now redundant
[21:49:03] <CarloWood> yeah
[21:49:23] *** Quits: byku45 (~byku@host-92-10-130-64.as13285.net) (Quit: Client closed)
[21:49:31] <CarloWood> I suppose you can't do   A(int, std::enable_if...) or something
[21:49:50] <Alipha> { A<1> a(42); } template<int n> struct A { A(string) {}  template<int m = n, enable_if_t<m == 2, bool> = true> A(int) {} };
[21:49:50] <geordi> error: no matching function for call to 'A<1>::A(int)'
[21:50:00] <Alipha> { A<1> a(2); } template<int n> struct A { A(string) {}  template<int m = n, enable_if_t<m == 2, bool> = true> A(int) {} };
[21:50:00] <geordi> Same error.
[21:50:06] *** Quits: jkaye (~jkaye@2601:281:8300:7530:212b:79de:3c7b:f9e0) (Ping timeout: 245 seconds)
[21:50:19] <Alipha> Hm
[21:50:24] *** Joins: byku (~byku@host-92-10-130-64.as13285.net)
[21:50:28] <Alipha> Oh
[21:50:29] <CarloWood> { A<2> a(42); } template<int n> struct A { A(string) {}  template<int m = n, enable_if_t<m == 2, bool> = true> A(int) {} };
[21:50:29] <geordi>  
[21:50:35] <CarloWood> cool
[21:52:48] <bpalmer> you could also just specialize for 2. template<int n> class A { public: A(string) {}  };  template<> class A<2> { public: A(string) {} A(int) {} };
[21:53:01] <CarloWood>   // Constructor for transient command pools.
[21:53:01] <CarloWood>   template<vk::CommandPoolCreateFlags::MaskType cf = create_flags, std::enable_if_t<cf | VK_COMMAND_POOL_CREATE_TRANSIENT_BIT, bool> = true>
[21:53:01] <CarloWood>   UnlockedCommandPool(LogicalDevice const* logical_device, ... etc
[21:53:04] <CarloWood> :)
[21:53:19] *** Quits: X-Scale (~ARM@165.201.137.78.rev.vodafone.pt) (Ping timeout: 256 seconds)
[21:53:52] *** Joins: X-Scale` (~ARM@31.22.202.101)
[21:53:53] *** Joins: sn0wdrone (~snowdrone@user/snowdrone)
[21:56:06] *** X-Scale` is now known as X-Scale
[21:56:18] *** Quits: snowdrone (~snowdrone@user/snowdrone) (Ping timeout: 260 seconds)
[22:00:32] *** Quits: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it) (Quit: Leaving.)
[22:01:24] *** Quits: cm007magnum (~Rheanna@218.78.67.149) (Remote host closed the connection)
[22:02:26] *** Quits: byku (~byku@host-92-10-130-64.as13285.net) (Ping timeout: 256 seconds)
[22:03:22] *** Joins: cm007magnum (~Rheanna@218.78.104.50)
[22:03:59] *** Quits: proller (~p@2a02:6b8:0:40c:33a1:c83e:19df:80e8) (Ping timeout: 250 seconds)
[22:12:04] *** Joins: Viewday18 (~Viewday@user/viewday)
[22:12:21] *** Joins: ckdCreations (~ckdCreati@147.55.133.142)
[22:14:17] *** Quits: Viewday1 (~Viewday@user/viewday) (Ping timeout: 256 seconds)
[22:14:17] *** Viewday18 is now known as Viewday1
[22:15:02] *** Joins: dextercd (~dexter@2a02-a450-f25d-1-76d4-35ff-fefe-34c.fixed6.kpn.net)
[22:17:15] *** Quits: riksu-raksu (riksteri@gateway/vpn/airvpn/riksteri) (Quit: riksu-raksu)
[22:18:30] *** Quits: Ameisen (~ameisen@digitalcarbide.com) (Quit: Quitting)
[22:22:59] *** Quits: froggy (~froggy@2.235.241.212) (Read error: Connection reset by peer)
[22:23:06] *** Joins: byku (~byku@host-92-10-130-64.as13285.net)
[22:23:11] *** Joins: froggy (~froggy@2.235.241.212)
[22:27:33] *** Quits: BtbN (btbn@ffmpeg/developer/btbn) (Remote host closed the connection)
[22:28:16] *** Quits: foobaz212 (~foobaz212@88.98.219.238) (Quit: Client closed)
[22:28:27] *** Joins: foobaz212 (~foobaz212@88.98.219.238)
[22:28:46] *** Quits: byku (~byku@host-92-10-130-64.as13285.net) (Quit: byku)
[22:30:08] *** Joins: jkaye (~jkaye@2601:281:8300:7530:65b4:1325:4217:bff5)
[22:31:23] *** Joins: BtbN (btbn@ffmpeg/developer/btbn)
[22:31:46] *** Quits: rgrinberg (~textual@200.5.63.76) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[22:33:02] *** Quits: foobaz212 (~foobaz212@88.98.219.238) (Ping timeout: 256 seconds)
[22:33:07] *** Joins: Viewday18 (~Viewday@user/viewday)
[22:33:37] *** Joins: urdh (~urdh@user/urdh)
[22:34:41] *** Quits: Viewday1 (~Viewday@user/viewday) (Ping timeout: 256 seconds)
[22:34:41] *** Viewday18 is now known as Viewday1
[22:34:49] *** Joins: foobaz212 (~foobaz212@88.98.219.238)
[22:37:18] *** Joins: slidercrank (~slidercra@user/slidercrank)
[22:37:29] *** Joins: Ameisen (~ameisen@137.184.136.18)
[22:39:50] *** Quits: foobaz212 (~foobaz212@88.98.219.238) (Ping timeout: 256 seconds)
[22:42:45] *** Quits: rendar (~rendar@user/rendar) (Quit: Leaving)
[22:42:48] <CarloWood> Is it possible to use the address of a static/global variable as constexpr?
[22:43:12] *** Joins: foobaz212 (~foobaz212@88.98.219.238)
[22:45:27] *** Quits: Ameisen (~ameisen@137.184.136.18) (Ping timeout: 256 seconds)
[22:46:01] *** Quits: Inline (~Inline@aftr-37-201-240-235.unity-media.net) (Ping timeout: 250 seconds)
[22:50:38] *** Quits: nejni-marji (~nejni-mar@user/nejni-marji) (Quit: Client closed)
[22:50:43] *** Joins: CaCode (~CaCode@user/cacode)
[22:51:21] *** Quits: cm007magnum (~Rheanna@218.78.104.50) (Remote host closed the connection)
[22:52:47] *** Joins: Ameisen (~ameisen@198.211.110.166)
[22:53:35] *** Joins: cm007magnum (~Rheanna@218.78.105.67)
[22:53:38] *** Joins: ARoxdale (~ARoxdale@84.203.31.229)
[22:54:10] *** Quits: glestrade (~glestrade@104-185-184-158.lightspeed.sndgca.sbcglobal.net) (Quit: glestrade)
[22:54:15] *** Joins: Viewday13 (~Viewday@user/viewday)
[22:55:31] *** Quits: Ameisen (~ameisen@198.211.110.166) (Client Quit)
[22:55:39] *** Quits: Viewday1 (~Viewday@user/viewday) (Ping timeout: 256 seconds)
[22:55:39] *** Viewday13 is now known as Viewday1
[22:56:15] *** Joins: Ameisen (~ameisen@digitalcarbide.com)
[22:57:36] *** Joins: proller (~p@80.240.216.69)
[22:59:18] *** Joins: ko (~i.am@user/marlboro)
[23:02:49] *** Joins: CaCode_ (~CaCode@user/cacode)
[23:05:02] *** Quits: CaCode (~CaCode@user/cacode) (Ping timeout: 240 seconds)
[23:06:25] *** Joins: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net)
[23:09:16] *** Quits: nshire (~Neal@user/nshire) (Read error: Connection reset by peer)
[23:10:01] *** Quits: RangerBobVA (~bmaddox@user/rangerbobva) (Quit: Leaving)
[23:12:03] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[23:14:55] *** Joins: Viewday18 (~Viewday@user/viewday)
[23:17:11] *** Quits: Viewday1 (~Viewday@user/viewday) (Ping timeout: 256 seconds)
[23:17:11] *** Viewday18 is now known as Viewday1
[23:23:08] *** Joins: AbleBacon (~AbleBacon@user/AbleBacon)
[23:26:55] *** Joins: wootehfoot (~wootehfoo@user/wootehfoot)
[23:27:19] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[23:29:48] *** Joins: plastico (~plastico@neomutt/plastico)
[23:31:57] <evangeline> PJBoy, What is the difference here https://godbolt.org/z/nWGTKrc1o if I use <PINT> vs <PINT&> for casting: the second one being a reference pointer, meaning it uses the same memory location as p.buffer ?
[23:33:27] <Alipha> CarloWood: yes
[23:34:15] *** Quits: m_ben (~m_ben@user/m-ben/x-7429725) (Quit: WeeChat 3.3)
[23:36:18] *** Joins: KAHR-Alpha (~Alpha@2a01cb0d024a660098290fc4ba1d2eed.ipv6.abo.wanadoo.fr)
[23:36:19] *** Joins: Viewday17 (~Viewday@user/viewday)
[23:37:29] *** Joins: rendar (~rendar@user/rendar)
[23:37:52] *** Quits: Viewday1 (~Viewday@user/viewday) (Read error: Connection reset by peer)
[23:37:52] *** Viewday17 is now known as Viewday1
[23:41:17] *** Quits: cm007magnum (~Rheanna@218.78.105.67) (Remote host closed the connection)
[23:43:10] *** Quits: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net) (Ping timeout: 260 seconds)
[23:43:31] *** Joins: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net)
[23:44:13] *** Joins: rgrinberg (~textual@200.5.63.76)
[23:44:23] *** Joins: cm007magnum (~Rheanna@218.78.53.13)
[23:45:31] *** Quits: proller (~p@80.240.216.69) (Ping timeout: 256 seconds)
[23:45:33] <Eelis> CarloWood: only symbolically, so you can't reinterpret_cast to intptr_t and maintain constexprness
[23:45:54] *** Joins: proller (~p@2a02:6b8:b081:8017::1:22)
[23:48:16] <evangeline> why is the custom deleter not called in this case: https://godbolt.org/z/9r1Pnn1Es (I don't see the "Freeing memory at " line)
[23:49:55] <imMute> evangeline: because the unique_ptr never holds an object, so there's nothing for it to free
[23:51:25] <evangeline> imMute, how can I change the code for custom deleter to be called but not creating another heap allocation in the process ?
[23:51:44] *** Joins: Viewday15 (~Viewday@user/viewday)
[23:52:19] <imMute> I'm not sure how to answer that...
[23:53:27] <evangeline> I was doing this with PJBoy before and I'm studying it now and I only know noticed that custom deleter is not called
[23:53:27] *** Quits: Viewday1 (~Viewday@user/viewday) (Ping timeout: 256 seconds)
[23:53:27] *** Viewday15 is now known as Viewday1
[23:53:41] <evangeline> Everything works if I use new inside std::unique_ptr
[23:53:54] <evangeline> But I want to avoid another heap allocation and use a stack variable instead (if possible=
[23:54:22] <imMute> sum() is given a pointer to the p on line 25.  so line 13 is "writing" to the variable on line 25.   but that doesn't affect the unique_ptr - it was just used to initialize that p pointer.
[23:54:30] *** Quits: sa02irc (~mbax@155-079-043-212.ip-addr.inexio.net) (Remote host closed the connection)
[23:54:46] *** Joins: glestrade (~glestrade@104-185-184-158.lightspeed.sndgca.sbcglobal.net)
[23:54:53] <imMute> what do you mean "another" heap allocation?
[23:55:16] <imMute> new and malloc are both heap allocations
[23:55:28] *** Joins: sa02irc (~mbax@155-079-043-212.ip-addr.inexio.net)
[23:57:17] *** Joins: Guest4249 (~Guest42@eth-west-pareq2-46-193-4-100.wb.wifirst.net)
[23:57:27] <anyone> if all you have is a pointer, wrapping it in unique_ptr won't magically stackify it
[23:57:31] <evangeline> imMute, I mean this: https://godbolt.org/z/hPqrccjrr
[23:58:08] <anyone> evangeline: new PVOID is kinda stupid
[23:58:09] <evangeline> anyone, I'm asking if there a way to use a stack variable within std::unique_ptr instead of doing another allocation with new on the heap
[23:58:28] <anyone> the unique_ptr (i.e. "a") is an automatic variable; job done
[23:58:34] <evangeline> I just need 8-bytes (PVOID ptr on 64-bit arch), I don't need another allocation
[23:58:36] <imMute> evangeline: "a stack variable within unique_ptr" ??   that doesn't make sense.  unique_ptr is meant to manage objects allocated on the heap.
[23:59:13] <evangeline> Is there a better way to automatically free whatever sum returns once it goes out of scope (inside main) ?
[23:59:38] <imMute> have sum return a unique_ptr
