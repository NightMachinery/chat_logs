[05:25:54] *** Joins: lucerne (~lucerne@ip202.ip-51-178-215.eu)
[05:26:29] *** Joins: Julian (~tos9@host-82-58-0-63.retail.telecomitalia.it)
[05:28:18] *** Joins: rannnn8888 (~rannnn888@bzq-79-182-123-214.red.bezeqint.net)
[05:30:24] *** Quits: vlm (~vlm@user/vlm) (Quit: "")
[05:30:35] *** Joins: Nalt (~Nalt|||@162-239-107-41.lightspeed.rcsntx.sbcglobal.net)
[05:31:01] <rannnn8888> have way i can get this data more faster :X ? its very slow the two try here https://dpaste.org/VnA9
[05:31:24] *** Quits: Julian (~tos9@host-82-58-0-63.retail.telecomitalia.it) (Ping timeout: 252 seconds)
[05:31:33] <rannnn8888> i talk only about the loops
[05:34:40] *** Joins: vlm (~vlm@user/vlm)
[05:34:51] *** Quits: Donitz (~Donitz@85-156-203-108.elisa-laajakaista.fi) (Ping timeout: 265 seconds)
[05:35:05] *** Roey is now known as trustnugget
[05:36:46] *** Joins: Donitz (~Donitz@85-156-203-108.elisa-laajakaista.fi)
[05:36:59] *** Joins: gr33n7007h (~gr33n7007@user/gr33n7007h)
[05:37:18] *** Quits: lsrtl (~lsrtl@user/lsrtl) (Ping timeout: 258 seconds)
[05:37:38] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 252 seconds)
[05:40:57] *** Joins: diek (~diek@187.36.4.113)
[05:41:06] *** Joins: venmx (~bertie@host86-129-227-84.range86-129.btcentralplus.com)
[05:41:31] *** Quits: ente_ (~ente@p54a445ae.dip0.t-ipconnect.de) (Ping timeout: 258 seconds)
[05:41:37] *** Joins: lukka5 (~lukka5@246-60-231-201.fibertel.com.ar)
[05:42:07] *** Joins: mefistofeles (~mefistofe@user/mefistofeles)
[05:42:42] <hexology> rannnn8888: these are 2 different attempts to write the same code?
[05:43:24] <rannnn8888> hexology yes but its very slow
[05:43:33] <hexology> i see that. you aren't using the index at all
[05:43:40] *** Joins: Julian (~tos9@host-82-58-0-63.retail.telecomitalia.it)
[05:43:46] <hexology> Symbol is an integer?
[05:43:51] <hexology> it's not a string?
[05:44:41] *** Joins: justinf210 (~justinf21@192-230-160-245.3rivers.net)
[05:45:41] <rannnn8888> hexology yep my bad i see but if i make a index its help to call to record by string ?
[05:46:04] *** Quits: venmx (~bertie@host86-129-227-84.range86-129.btcentralplus.com) (Ping timeout: 252 seconds)
[05:46:08] <hexology> can you re-state that question?
[05:46:08] *** Joins: NeilRG (~NeilRG@192.222.196.111)
[05:46:17] <hexology> sorry, i didn't undersatnd
[05:46:19] <hexology> understand*
[05:46:26] *** Quits: lukka5 (~lukka5@246-60-231-201.fibertel.com.ar) (Ping timeout: 252 seconds)
[05:47:27] <rannnn8888> hexology when i add index to dataframe, its can help me ,if i need get "data" by name symbol column
[05:48:37] *** Quits: thiras (~thiras@user/thiras) (Ping timeout: 268 seconds)
[05:48:37] *** Quits: diek (~diek@187.36.4.113) (Read error: Connection reset by peer)
[05:48:38] *** Quits: Julian (~tos9@host-82-58-0-63.retail.telecomitalia.it) (Ping timeout: 252 seconds)
[05:49:01] *** Quits: justinf210 (~justinf21@192-230-160-245.3rivers.net) (Ping timeout: 252 seconds)
[05:49:07] <hexology> rannnn8888: maybe you can write it like this? https://bpa.st/5KRA
[05:49:30] *** Quits: HaJo (~hajo@2a01:c23:9005:5400:821f:2ff:feef:dabf) (Ping timeout: 264 seconds)
[05:49:49] *** Joins: m1n10n (georgecloo@cpe-76-184-204-251.tx.res.rr.com)
[05:49:54] *** Joins: humanBird (~humanBird@2603-8001-7003-5966-51cb-3856-044c-f674.res6.spectrum.com)
[05:50:21] <hexology> https://bpa.st/3O3A fixed a mistake
[05:51:12] <hexology> my own question: is there a way to safely "redefine" `body` to have type `Dict[str, Any]` inside this function? or do i have to create a new variable with the different type?
[05:51:40] <humanBird> "cannot import name 'ssl' from 'urllib3.util.ssl_' (c:\users\alex\.ebcli-virtual-env\lib\site-packages\urllib3\util\ssl_.py)" on python 3.7 on windows
[05:51:45] *** Joins: justinf210 (~justinf21@210.sub-97-43-192.myvzw.com)
[05:52:22] *** Quits: ______GOD______ (~GOD@user/god/x-9778998) (Quit: Turning off a portion of this simulation.)
[05:52:37] *** Joins: greenx (~greenx@pool-173-70-159-250.nwrknj.fios.verizon.net)
[05:53:40] <rannnn8888> hexology df = pd.read_sql_table('stck', conn1) i get
[05:53:59] <rannnn8888> NotImplementedError: read_sql_table only supported for SQLAlchemy connectable.
[05:54:11] <humanBird> ugh.  amazon wants you to execute their bat which does some weird virtualenv stuff..
[05:54:18] <hexology> rannnn8888: my mistake. use read_sql_query then
[05:54:54] *** Quits: Naan (~naan@user/naan) (Quit: Leaving)
[05:55:14] <humanBird> is there such thing as virtualenvs within virtualenvs within virtualenvs?
[05:55:30] *** Quits: Popzi (~Popzi@user/popzi) (Ping timeout: 240 seconds)
[05:55:43] <SnoopJ> humanBird, not really, why?
[05:58:19] *** Quits: heco (~redrum@user/redrum88) (Quit: Going offline, see ya! (www.adiirc.com))
[05:59:38] *** Joins: venmx (~bertie@host86-129-227-84.range86-129.btcentralplus.com)
[05:59:44] *** Joins: diek (~diek@187.36.4.113)
[06:00:52] <rannnn8888> hexology Ok it's a lot faster
[06:00:54] <rannnn8888>  , itry this in my script now ,Just for knowledge before that I tried to use like this, and it's starting slowly and suddenly getting really fast. https://dpaste.org/b7XQ
[06:01:28] *** Quits: goldfish (~goldfish@user/goldfish) (Ping timeout: 252 seconds)
[06:01:36] <humanBird> i see in my console:   (.ebcli-virtual-env) (django) C:\Users\
[06:01:58] <humanBird> this looks to me like there are to activated environments. one for the elastic beanstalk deploy tool and one for my django project
[06:01:59] *** Joins: Julian (~tos9@host-82-58-0-63.retail.telecomitalia.it)
[06:02:09] <humanBird> two*
[06:02:12] *** Quits: ponadm (pony@gateway/vpn/protonvpn/ponadm) (Ping timeout: 252 seconds)
[06:02:31] *** Quits: vimart (~vimart@85.255.232.47) (Quit: WeeChat 2.8)
[06:02:53] <Liblx> graingert: thanks. python had been nice but i will try it!
[06:03:03] *** Quits: Liblx (~Alex@ip4d15ff03.dynamic.kabel-deutschland.de) (Quit: WeeChat 3.1)
[06:03:34] *** Quits: NeilRG (~NeilRG@192.222.196.111) (Quit: Leaving...)
[06:04:02] *** Quits: justinf210 (~justinf21@210.sub-97-43-192.myvzw.com) (Ping timeout: 268 seconds)
[06:04:16] *** Joins: NeilRG (~NeilRG@192.222.196.111)
[06:04:20] *** Joins: pete443 (~pete@user/pete443)
[06:04:24] *** Quits: pete443_ (~pete@user/pete443) (Ping timeout: 252 seconds)
[06:04:27] *** Quits: diek (~diek@187.36.4.113) (Remote host closed the connection)
[06:04:49] *** Quits: venmx (~bertie@host86-129-227-84.range86-129.btcentralplus.com) (Ping timeout: 265 seconds)
[06:07:14] *** Quits: Julian (~tos9@host-82-58-0-63.retail.telecomitalia.it) (Ping timeout: 265 seconds)
[06:07:34] *** Quits: hegstal (~hegstal@2a02:c7f:7604:8a00:7821:4ac6:7f63:f8) (Remote host closed the connection)
[06:07:35] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[06:07:57] *** Joins: justinf210 (~justinf21@192-230-160-245.3rivers.net)
[06:09:06] *** Quits: srhm (~ascii@user/srhm) (Quit: Konversation terminated!)
[06:11:30] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 240 seconds)
[06:11:45] *** Joins: Midnite (~human@user/midnightlantern)
[06:12:33] *** Quits: justinf210 (~justinf21@192-230-160-245.3rivers.net) (Ping timeout: 265 seconds)
[06:12:38] *** Joins: nbao (~nbao@2804:14c:5bb8:9720:ae9e:17ff:fedf:3e09)
[06:15:03] <jinsun> hexology: did you paste the function somewhere?
[06:15:31] <hexology> jinsun: no, it's a big codebase that my team is gradually adding annotations to
[06:18:02] *** Joins: Julian (~tos9@host-82-58-0-63.retail.telecomitalia.it)
[06:20:03] *** Joins: runciter (~runciter@user/runciter)
[06:20:17] <jinsun> hexology: okay, well mypy --allow-redefinition mostly works and allows redefining types for the same variable, you just have to do it at the same level of indentation all the time, so not inside if or for
[06:20:52] <hexology> jinsun: oh im sorry i thought you were asking about the earlier questino. yes i forgot to post my bpaste link. one moment
[06:20:54] <jinsun> and you have to use the previous variable somewhere before redefining it
[06:21:18] *** Quits: ionface (~ionface@user/ionface) (Ping timeout: 268 seconds)
[06:21:32] <hexology> jinsun: https://bpa.st/BZRA
[06:22:10] <rannnn8888> hexology have way to get its with the index symbol ? but keep save the index ?
[06:22:12] *** Joins: ionface (~ionface@user/ionface)
[06:22:32] *** Quits: emerent (~quassel@p200300cd5703bb19ba27ebfffed28a59.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[06:22:37] <hexology> rannnn8888: sorry, i dont understand
[06:22:51] *** Joins: emerent (~quassel@p200300cd5703bb02ba27ebfffed28a59.dip0.t-ipconnect.de)
[06:23:09] *** Quits: Julian (~tos9@host-82-58-0-63.retail.telecomitalia.it) (Ping timeout: 268 seconds)
[06:23:58] <Midnite> can anyone give me a hint as to what's wrong with my code? See the function beginning on line 55, called 'luhn': https://bpa.st/RPRA
[06:24:03] <rannnn8888> hexology like now i get when i print this [indexnumber,data,data] i want if i can get its with the index name [dan,data,data]
[06:24:18] <Midnite> Also, I'm sure some things I'm doing are not pythonic, so I'd appreciate guidance on the proper syntax. Thanks in advance
[06:24:43] <hexology> Midnite: what is wrong with it? incorrect output? errors?
[06:24:56] <hexology> rannnn8888: what is indexnumber?
[06:25:34] <Midnite> hexology: incorrect output. let me share some sample input/output, one second...
[06:25:35] *** Joins: Fiji (~Fiji@user/fiji)
[06:25:56] <Midnite> hexology: https://bpa.st/VVUA
[06:26:18] <hexology> it looks kind of like you're trying to "optimize" the algorithm by only performing a single pass over the data
[06:26:24] <rannnn8888> hexology for the example way can make this https://dpaste.org/nSpv#
[06:26:26] <hexology> my recommendation: don't. just implement the algorithm exactly as written.
[06:26:35] *** Quits: selimcan (~selimcan@217.23.186.18) (Quit: Leaving)
[06:26:39] <Midnite> okay :)
[06:26:40] <hexology> worry about making it more efficient after you've done it correctly
[06:26:42] <Midnite> thanks
[06:26:47] <jinsun> hexology: `body: Dict[str, Any] = json.loads(body)` works, if you run with mypy --allow-redefinition
[06:27:13] <hexology> jinsun: is there a way to set "allow-redefinition" but only for that instance?
[06:27:15] <Midnite> I did find another mistake
[06:27:17] <hexology> i don't want to allow it in general
[06:27:28] <hexology> (at least not without good reason)
[06:31:41] *** Joins: w0x12ef (~w0x12ef@60.10.194.47)
[06:32:06] <jinsun> no idea, probably not, I guess changing the name would be the easier solution there
[06:32:27] <Midnite> how do I add another item to a list in Python?
[06:32:52] <Midnite> my_list.append(12)?
[06:32:55] <Midnite> would that work?
[06:33:04] <jinsun> I allow redefintions for my entire code, just because I can't name things and reuse variables all the time
[06:33:20] *** Quits: lucerne (~lucerne@ip202.ip-51-178-215.eu) (Remote host closed the connection)
[06:33:25] *** Joins: boB_K7IQ (~boB_K7IQ@c-73-254-117-91.hsd1.wa.comcast.net)
[06:33:35] <Midnite> nvm :)
[06:34:20] *** Joins: lucerne (~lucerne@ip202.ip-51-178-215.eu)
[06:35:08] *** Joins: Julian (~tos9@host-82-58-0-63.retail.telecomitalia.it)
[06:35:12] *** Joins: lukka5 (~lukka5@246-60-231-201.fibertel.com.ar)
[06:36:02] *** Joins: pnoud (~pnoud@user/pnoud)
[06:37:24] *** Quits: penguino (~mrpenguin@user/mrpenguin) (Remote host closed the connection)
[06:37:47] *** Joins: penguino (~mrpenguin@user/mrpenguin)
[06:39:40] *** Quits: Nact (~l@host-85-27-124-131.dynamic.voo.be) (Quit: Konversation terminated!)
[06:39:59] *** Quits: Julian (~tos9@host-82-58-0-63.retail.telecomitalia.it) (Ping timeout: 252 seconds)
[06:40:30] *** Quits: runciter (~runciter@user/runciter) (Remote host closed the connection)
[06:41:04] *** Quits: pnoud (~pnoud@user/pnoud) (Ping timeout: 265 seconds)
[06:41:31] <hexology> jinsun: that's what i'll probably do. this part of the code is business critical and doesn't have tests (lol) and i'm afraid of making a mistake doing stuff like that.
[06:41:51] <hexology> i'll have to just `# type: ignore[index]` the error for now and then block out time to write tests for this
[06:43:09] *** Quits: jarthur (~jarthur@2603-8080-1540-002d-f9cc-6895-8b3d-e0f4.res6.spectrum.com) (Quit: jarthur)
[06:45:19] <jinsun> hexology: unfortunately ignoring no-redef doesn't work there, because it gets treated as str later anyway
[06:46:51] *** Joins: Croves (~Croves@2804:14c:578b:9102:b1c6:fb69:47f1:6720)
[06:47:20] *** Parts: Croves (~Croves@2804:14c:578b:9102:b1c6:fb69:47f1:6720) ()
[06:49:12] *** Joins: diek (~diek@187.36.4.113)
[06:50:00] *** Quits: bomb-on (~bomb-on@194.144.47.113) (Quit: aллилѹіа!)
[06:50:29] *** Quits: diek (~diek@187.36.4.113) (Remote host closed the connection)
[06:50:31] <hexology> jinsun: yep. i have to ignore the `index` error on the line where they use []
[06:51:41] *** Joins: Julian (~tos9@host-82-58-0-63.retail.telecomitalia.it)
[06:52:04] *** Quits: NeilRG (~NeilRG@192.222.196.111) (Ping timeout: 252 seconds)
[06:54:07] *** Joins: Polyblank (~Polyblank@user/polyblank)
[06:54:37] *** Quits: w0x12ef (~w0x12ef@60.10.194.47) (Read error: Connection reset by peer)
[06:55:11] *** Quits: Tempesta (Tempesta@user/tempesta) (Quit: See ya!)
[06:56:17] *** Joins: venmx (~bertie@host86-129-227-84.range86-129.btcentralplus.com)
[06:57:01] *** Quits: Julian (~tos9@host-82-58-0-63.retail.telecomitalia.it) (Ping timeout: 265 seconds)
[06:59:49] *** Joins: lightbulbjim_ (~lightbulb@user/lightbulbjim)
[07:00:53] *** Quits: ewdwasright (~ewdwasrig@108.210.81.181) (Ping timeout: 265 seconds)
[07:01:15] *** Quits: venmx (~bertie@host86-129-227-84.range86-129.btcentralplus.com) (Ping timeout: 258 seconds)
[07:02:05] *** Quits: lightbulbjim_ (~lightbulb@user/lightbulbjim) (Client Quit)
[07:02:26] *** Joins: lightbulbjim_ (~lightbulb@user/lightbulbjim)
[07:03:07] *** Joins: lightbulbjim__ (~lightbulb@user/lightbulbjim)
[07:03:15] *** Quits: lightbulbjim_ (~lightbulb@user/lightbulbjim) (Client Quit)
[07:04:24] *** Joins: darksun (~darksun@user/darksun)
[07:04:45] *** Quits: lightbulbjim__ (~lightbulb@user/lightbulbjim) (Client Quit)
[07:05:20] *** Joins: finn_elija (~finn_elij@user/finn-elija/x-0085643)
[07:05:20] *** FinnElija is now known as Guest3314
[07:05:20] *** Quits: Guest3314 (~finn_elij@user/finn-elija/x-0085643) (Killed (cadmium.libera.chat (Nickname regained by services)))
[07:05:20] *** finn_elija is now known as FinnElija
[07:05:36] *** Quits: superboot (~agentgasm@user/superboot) (Quit: leaving)
[07:07:28] *** Joins: Julian (~tos9@host-82-58-0-63.retail.telecomitalia.it)
[07:09:10] *** Joins: cqi (~cqi@2408:8207:252e:f0a0:926:b9d:1884:ddbf)
[07:10:02] *** Quits: darksun (~darksun@user/darksun) (Ping timeout: 252 seconds)
[07:13:08] *** Quits: Vornicus (~Vornicus@2603-8000-5d07-7ef0-15f5-5f62-e0d1-aece.res6.spectrum.com) (Read error: Connection reset by peer)
[07:13:54] *** Quits: Julian (~tos9@host-82-58-0-63.retail.telecomitalia.it) (Ping timeout: 258 seconds)
[07:14:05] *** Quits: DaNeenjah (~jake@adsl-74-230-9-207.hsv.bellsouth.net) (Quit: WeeChat 3.2)
[07:16:58] *** Joins: justinf210 (~justinf21@192-230-160-245.3rivers.net)
[07:19:04] *** Quits: bigRoo (~user@131.236.54.84) (Remote host closed the connection)
[07:20:33] *** Joins: NeilRG (~NeilRG@192.222.196.111)
[07:21:05] *** Joins: diek (~diek@187.36.4.113)
[07:22:05] *** Joins: Julian (~tos9@host-82-58-0-63.retail.telecomitalia.it)
[07:23:50] *** Quits: pieguy128 (~pieguy128@bas1-montreal02-65-92-163-194.dsl.bell.ca) (Quit: ZNC 1.8.2 - https://znc.in)
[07:24:09] *** Joins: pieguy128 (~pieguy128@bas1-montreal02-65-92-163-194.dsl.bell.ca)
[07:26:51] *** Quits: ripdog (~quassel@user/ripdog) (Ping timeout: 244 seconds)
[07:26:51] *** Quits: diek (~diek@187.36.4.113) (Read error: Connection reset by peer)
[07:26:56] *** Quits: death916 (~death916@user/death916) (Ping timeout: 258 seconds)
[07:26:59] *** Quits: Julian (~tos9@host-82-58-0-63.retail.telecomitalia.it) (Ping timeout: 265 seconds)
[07:27:21] *** Joins: mefistof1les (~mefistofe@user/mefistofeles)
[07:27:50] *** Joins: diek (~diek@2804:14d:7681:82bd:5dc3:e9ae:5910:688d)
[07:28:13] *** Joins: ripdog (~quassel@user/ripdog)
[07:30:12] *** Quits: mefistofeles (~mefistofe@user/mefistofeles) (Ping timeout: 252 seconds)
[07:30:20] *** mefistof1les is now known as mefistofeles
[07:30:41] *** Joins: w0x12ef (~w0x12ef@60.10.194.47)
[07:34:13] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[07:34:30] *** Quits: ssbr_ (~ssbr@2620:15c:10f:203:8295:58ce:d0bd:be8d) (Ping timeout: 264 seconds)
[07:34:35] *** Quits: dalan (~dalan@110-175-186-185.tpgi.com.au) (Quit: dalan)
[07:35:59] *** Joins: dalan (~dalan@110-175-186-185.tpgi.com.au)
[07:36:56] <Nalt> https://bpa.st/UECQ If give "am" as the input, there is no match. What is wrong with my syntax?
[07:37:18] <rannnn8888> https://dpaste.org/tSZa what the way :X  ?
[07:38:06] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 264 seconds)
[07:38:09] *** Joins: death916 (~death916@user/death916)
[07:39:14] <Wulf> Nalt: this won't interpolate variables.
[07:39:23] *** Joins: Tempesta (Tempesta@user/tempesta)
[07:39:24] *** Joins: c4017w (~c4017@209.52.68.8)
[07:39:47] *** Joins: Julian (~tos9@host-82-58-0-63.retail.telecomitalia.it)
[07:39:49] <Wulf> Nalt: try format strings instead and also use re.escape
[07:40:01] *** Quits: mefistofeles (~mefistofe@user/mefistofeles) (Quit: Hay te huacho!)
[07:40:08] <Nalt> I don't quite understand what you mean by interpolate in this context.
[07:41:00] <Wulf> Nalt: getting the contents of `lettersGuess' into your regex
[07:41:03] *** Quits: sn1tch3r (~sn1tch3r@201-27-147-42.dsl.telesp.net.br) (Quit: Leaving)
[07:41:08] *** trustnugget is now known as trustnougat
[07:42:00] *** Quits: diek (~diek@2804:14d:7681:82bd:5dc3:e9ae:5910:688d) (Remote host closed the connection)
[07:42:38] *** Joins: diek (~diek@2804:14d:7681:82bd:5dc3:e9ae:5910:688d)
[07:42:55] <Nalt> Okay. I see re.escape https://docs.python.org/3/library/re.html#re.escape and makes sense to use. Now what did you mean by trying format strings?
[07:43:16] <hexology> rannnn8888: pd.read_sql_query("SELECT * FROM stck WHERE Symbol = ?", conn1, params=["dann"])
[07:43:29] <hexology> https://pandas.pydata.org/docs/reference/api/pandas.read_sql_query.html
[07:44:57] *** Quits: Julian (~tos9@host-82-58-0-63.retail.telecomitalia.it) (Ping timeout: 258 seconds)
[07:44:59] <hexology> Nalt: do you want to use the contents of the `lettersGuess` variable in the regex pattern?
[07:45:10] *** Quits: metah4ck3r (~meta@user/metah4ck3r) (Ping timeout: 268 seconds)
[07:45:19] <Nalt> Yes. It is user input.
[07:45:33] <hexology> ok, well just writing "lettersGuess" in the string will not do what you want
[07:45:43] <Nalt> Yes, so I've seen.
[07:46:01] <hexology> fr'(?mi)\b({lettersGuess})\w+'
[07:46:10] <hexology> this will _interpolate_ the value of lettersGuess into the string
[07:46:18] *** Joins: mIk3_08 (~Thunderbi@user/mik3-08/x-2852566)
[07:46:19] <Wulf> hexology: don't forget the re.escape there!
[07:46:42] *** Joins: boxelephant (~boxelepha@d192-24-108-69.col.wideopenwest.com)
[07:46:56] *** Joins: metah4ck3r (~meta@user/metah4ck3r)
[07:47:00] *** Quits: diek (~diek@2804:14d:7681:82bd:5dc3:e9ae:5910:688d) (Ping timeout: 244 seconds)
[07:47:03] <hexology> Wulf: good catch! guessPattern = re.escape(lettersGuess); fr'(?mi)\b({guessPattern})\w+'
[07:47:37] <hexology> downside: if you need to use `{` in your regex you'll have to write `{{` instead, so it could make your regex even uglier than regex usually is
[07:48:19] <Wulf> Nalt: you should use letters_guess instead of camelCase.
[07:48:40] <Nalt> What does the 'f' mean? I can't find where the "f" means on https://docs.python.org/3/library/re.html
[07:48:50] <hexology> the "f" and "r" are not part of the re package
[07:49:09] <hexology> let me try to find the relevant docs
[07:49:39] <Nalt> Wulf, okay.
[07:49:56] <Wulf> https://docs.python.org/3/reference/lexical_analysis.html#f-strings
[07:50:26] <hexology> https://docs.python.org/3/reference/lexical_analysis.html#literals a bit dense, but search for "formatted string literal" to see what "f" means, and search for "escape sequences in string and bytes literals" to see what "r" means
[07:50:39] <Nalt> yep
[07:50:44] *** Quits: MrFantastik (~Thunderbi@98.1.50.67) (Ping timeout: 252 seconds)
[07:51:10] <hexology> tldr the "f" prefix enables string interpolation, and the "r" prefix disables parsing of escape sequences
[07:53:02] *** Quits: tmart (~tmart@47-220-53-233.gtwncmkt04.res.dyn.suddenlink.net) (Read error: Connection reset by peer)
[07:53:02] *** Quits: blackleitus (~blackleit@189.195.192.28) (Read error: Connection reset by peer)
[07:53:36] *** Joins: Fiji_ (~Fiji@user/fiji)
[07:53:39] *** Quits: NeoCore (~neocore@45.152.181.148) (Quit: Leaving)
[07:53:45] <Nalt> Makes sense to me. Thank you two
[07:54:35] *** Joins: tmart (~tmart@47-220-53-233.gtwncmkt04.res.dyn.suddenlink.net)
[07:55:30] *** Joins: rolo (~error@ip1f12fbd1.dynamic.kabel-deutschland.de)
[07:56:30] *** Joins: Julian (~tos9@host-82-58-0-63.retail.telecomitalia.it)
[07:56:53] *** Quits: Fiji (~Fiji@user/fiji) (Ping timeout: 268 seconds)
[07:58:33] *** Joins: dodobrain (~dodobrain@user/dodobrain)
[07:59:43] *** Joins: redir (~redir@157-131-92-184.fiber.dynamic.sonic.net)
[08:00:09] *** Quits: nbao (~nbao@2804:14c:5bb8:9720:ae9e:17ff:fedf:3e09) (Quit: WeeChat 3.1)
[08:00:34] *** justBull is now known as justK
[08:00:35] *** Quits: rolo (~error@ip1f12fbd1.dynamic.kabel-deutschland.de) (Ping timeout: 268 seconds)
[08:01:01] *** Quits: zeden (~zeden@user/zeden) (Quit: WeeChat 3.0.1)
[08:01:46] *** Quits: redir (~redir@157-131-92-184.fiber.dynamic.sonic.net) (Client Quit)
[08:01:49] *** Quits: Julian (~tos9@host-82-58-0-63.retail.telecomitalia.it) (Ping timeout: 268 seconds)
[08:03:52] *** Quits: x_kuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[08:05:10] *** Quits: cqi (~cqi@2408:8207:252e:f0a0:926:b9d:1884:ddbf) (Quit: Leaving)
[08:05:27] *** Quits: dalan (~dalan@110-175-186-185.tpgi.com.au) (Quit: dalan)
[08:06:01] *** Joins: dalan (~dalan@110-175-186-185.tpgi.com.au)
[08:06:35] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[08:08:27] *** Joins: Croves (~Croves@2804:14c:578b:9102:b1c6:fb69:47f1:6720)
[08:08:33] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 265 seconds)
[08:08:42] *** Quits: boxelephant (~boxelepha@d192-24-108-69.col.wideopenwest.com) (Ping timeout: 252 seconds)
[08:08:43] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 258 seconds)
[08:08:43] *** Lord_of_Life_ is now known as Lord_of_Life
[08:09:07] *** Joins: CodePoint (~CodePoint@2600:1700:3070:3790::29)
[08:10:50] *** Joins: drincruz (~drincruz@ool-44c748be.dyn.optonline.net)
[08:10:55] *** Joins: justsomeguy (~justsomeg@user/justsomeguy)
[08:10:57] *** Joins: guymontag (~guymontag@128.106.163.162)
[08:11:59] <CodePoint> Quiet night huh?
[08:13:10] *** Joins: Julian (~tos9@host-82-58-0-63.retail.telecomitalia.it)
[08:13:20] *** Quits: drincruz_ (~drincruz@ec2-18-235-23-153.compute-1.amazonaws.com) (Ping timeout: 258 seconds)
[08:13:23] *** Joins: srhm (~ascii@user/srhm)
[08:15:33] *** Quits: guymontag (~guymontag@128.106.163.162) (Quit: Leaving)
[08:17:56] *** Quits: metah4ck3r (~meta@user/metah4ck3r) (Quit: WeeChat 3.2)
[08:18:18] *** Quits: Julian (~tos9@host-82-58-0-63.retail.telecomitalia.it) (Ping timeout: 258 seconds)
[08:20:26] *** Quits: death916 (~death916@user/death916) (Ping timeout: 252 seconds)
[08:20:46] *** Quits: CodePoint (~CodePoint@2600:1700:3070:3790::29) (Quit: "Going to sleep now.  Good night.")
[08:21:28] *** Joins: bindu (bindu@user/bindu)
[08:21:43] *** Joins: metah4ck3r (~meta@user/metah4ck3r)
[08:25:40] *** Joins: death916 (~death916@user/death916)
[08:26:43] *** Quits: tmart (~tmart@47-220-53-233.gtwncmkt04.res.dyn.suddenlink.net) (Read error: Connection reset by peer)
[08:27:26] *** Quits: srhm (~ascii@user/srhm) (Quit: Konversation terminated!)
[08:28:50] *** Joins: rock2X (~rock@c-69-181-4-101.hsd1.ca.comcast.net)
[08:29:38] *** Joins: Julian (~tos9@host-82-58-0-63.retail.telecomitalia.it)
[08:30:16] *** Joins: pnoud (~pnoud@user/pnoud)
[08:31:12] *** Joins: ente_ (~ente@p54a445ae.dip0.t-ipconnect.de)
[08:31:13] *** Quits: lucerne (~lucerne@ip202.ip-51-178-215.eu) (Write error: Connection reset by peer)
[08:32:07] *** Quits: imp (~imp@186.205.11.214) (Quit: imp)
[08:34:24] *** Quits: Julian (~tos9@host-82-58-0-63.retail.telecomitalia.it) (Pi[09:17:41] <jinsun> mattf:  the new solver misbehaves  sometimes, there is an open issue  https://github.com/pypa/pip/issues/9215
[09:18:14] <mattf> oh god
[09:18:20] *** Joins: lsrtl (~lsrtl@user/lsrtl)
[09:18:23] *** Quits: Polyblank (~Polyblank@user/polyblank) (Quit: Leaving)
[09:18:25] *** Joins: lucerne (~lucerne@ip202.ip-51-178-215.eu)
[09:18:38] *** Quits: m_tadeu (~quassel@bl14-187-233.dsl.telepac.pt) (Ping timeout: 265 seconds)
[09:19:10] <mattf> should i downgrade
[09:20:18] <mattf> oh
[09:20:31] <mattf> 21.1.2 actually works
[09:20:59] <tims> Yep, the intention of it is to trigger __rXXX__ variant of methods __XXX__ returns NotImplemented
[09:21:18] <tims> *methods IF
[09:21:58] *** Quits: FluffyMask (~FluffyMas@user/fluffymask) (Quit: WeeChat 2.9)
[09:22:01] *** Parts: justsomeguy (~justsomeg@user/justsomeguy) (WeeChat 3.0.1)
[09:22:35] *** Joins: fedenix (~fedenix@gateway/tor-sasl/fedenix)
[09:25:57] <TML> mattf: you can also use --use-deprecated=legacy-resolver
[09:26:19] <mattf> well it worked now
[09:26:20] <hexology> tims: well i did `Thing() == Thing()` where `Thing.__eq__` always just returns `NotImplemented`, and still got `False`
[09:26:28] <mattf> thanks for telling me TML
[09:26:47] <hexology> so that must be some special behavior in ==
[09:27:22] <TML> mattf: Hopefully the solver is fixed before they deprecate that flag (scheduled for removal in 21.0)
[09:28:33] <tims> hexology: That's what I would expect.
[09:28:36] *** Joins: Julian (~tos9@host-82-58-0-63.retail.telecomitalia.it)
[09:28:47] <hexology> it makes sense, but i didn't know about it
[09:29:07] <hexology> that said... it still doesn't fix the type refinement issue :)
[09:29:26] <hexology> this might not be fixable until type guards https://www.python.org/dev/peps/pep-0647/
[09:30:22] *** Quits: LiftLeft (~LiftLeft@154.21.23.100) (Ping timeout: 258 seconds)
[09:30:25] *** Joins: stranac (~stranac@195.29.239.126)
[09:30:26] <tims> Heh no, you could use `Union["Thing", object]` that would accept both a specific Thing instance and any other object
[09:33:56] *** Joins: drincruz_ (~drincruz@ool-44c748be.dyn.optonline.net)
[09:34:06] *** Quits: xcombelle (~xavie@176-139-252-198.abo.bbox.fr) (Ping timeout: 265 seconds)
[09:35:36] *** Quits: pr3d4k4t (~zhenya01@user/pr3d4t0r) (Quit: WeeChat 2.8)
[09:37:34] *** Joins: pr3d4t0r (~zhenya01@user/pr3d4t0r)
[09:38:25] *** Quits: drincruz_ (~drincruz@ool-44c748be.dyn.optonline.net) (Ping timeout: 258 seconds)
[09:38:31] <sleepingice> Did anyone here used scrapy-do before https://github.com/ljanyst/scrapy-do ? A scrapy daemon manager library
[09:39:18] *** Joins: ripdog_ (~quassel@user/ripdog)
[09:39:30] *** Quits: justinf210 (~justinf21@192-230-160-245.3rivers.net) (Remote host closed the connection)
[09:39:59] *** Joins: HaMsTeRs (~mx@14-0-228-101.static.pccw-hkt.com)
[09:40:04] *** Quits: milkt (~debian@gateway/tor-sasl/milkt) (Quit: leaving)
[09:41:05] *** Quits: ripdog (~quassel@user/ripdog) (Ping timeout: 252 seconds)
[09:41:06] *** Quits: lukka5 (~lukka5@246-60-231-201.fibertel.com.ar) (Ping timeout: 258 seconds)
[09:42:57] *** Joins: jmcantrell (~weechat@user/jmcantrell)
[09:44:07] *** Joins: jeho (~jehoshaph@user/jehoshaphat)
[09:45:34] *** Joins: Mulugruntz (~Mulugrunt@2400:4152:2063:3100:1fb:8d7b:dd29:5d2a)
[09:46:40] *** Joins: smol (~smol@user/smol)
[09:48:10] <jinsun> hexology: why not take Any instead of object? then you don't have to worry about type refinement
[09:48:54] *** Quits: smol (~smol@user/smol) (Client Quit)
[09:52:37] <hexology> jinsun: if i do that, i have the problem of 'Returning Any from function declared to return "bool"'. i guess because `other` is Any, so `other.data` is also Any
[09:53:19] <hexology> which maybe means that somehow == could return Any and not bool here?
[09:53:31] <hexology> i'm not sure how that would work, but mypy thinks it is possible
[09:53:40] <jinsun> hexology: that is solved by putting the last part in bool(), which is a bit redundant but satisfies mypy
[09:53:58] <hexology> that's icky but it's better than type:ignore :P
[09:54:13] <jinsun> hexology: https://mypy-play.net/?mypy=latest&python=3.9&flags=strict&gist=d5c8f0342c86fbe53dcaf9ae67aa7a54
[09:55:16] <hexology> if we are doing "runtime things", putting an isinstance() in the chain also works: https://mypy-play.net/?mypy=latest&python=3.9&flags=strict&gist=92a98359c29667c223a51d7d7af494e2
[09:55:36] <hexology> maybe isinstance should even go first
[09:55:57] <hexology> i can still compare __class__ afterwards, but isinstance() is enough to let mypy figure it out
[09:57:07] *** Parts: sonne (~vmlinuz@user/sonne) (Leaving)
[09:57:19] <jinsun> yeah either way works, you have to do something redundant to satisfy mypy in both cases
[09:57:47] *** Quits: AquaL1te (~AquaL1te@user/aqual1te) (Ping timeout: 265 seconds)
[09:58:40] <hexology> i think i prefer isinstance, since theoretically you could return the wrong thing from == and bool() would cover up the problem
[09:58:51] <hexology> thanks for the ideas though
[09:59:07] <hexology> interesting that in typeshed they seem to be pretty inconsistent about this
[10:00:03] <jinsun> if you do the __class__ check first, then you should get a bool only, and not Any, so bool doesn't cover up anything
[10:00:34] <jinsun> just mypy is not able to figure it out because it didn't do the type narrowing based on the class check
[10:01:51] <hexology> true, but that's only because i happen to know self.data has a sensible __eq__ implementation
[10:03:09] <jinsun> hexology: also why not `type(self) == type(other)` ? that does the same thing as the __class__ check I think
[10:03:15] *** Joins: AquaL1te (~AquaL1te@user/aqual1te)
[10:04:20] <hexology> oh, mypy can narrow the types with that! https://mypy-play.net/?mypy=latest&python=3.9&flags=strict&gist=c8dd18d25286b2eef759ad03a92e3964
[10:04:50] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[10:05:41] <hexology> i should have tried that
[10:05:48] *** Joins: boxelephant (~boxelepha@d192-24-108-69.col.wideopenwest.com)
[10:10:04] *** Quits: boxelephant (~boxelepha@d192-24-108-69.col.wideopenwest.com) (Ping timeout: 252 seconds)
[10:11:00] *** Quits: ray (~ray@user/re) (Ping timeout: 258 seconds)
[10:12:07] <jinsun> hexology: oh yeah it does, but weirdly it doesn't narrow with an if statement (which I was trying initially) https://mypy-play.net/?mypy=latest&python=3.9&flags=strict&gist=083dfe00817d62e8122cb3899d2e8d63
[10:12:20] <hexology> huh! maybe that's a bug
[10:13:05] *** Joins: ray (~ray@user/re)
[10:14:27] *** Joins: lukka5 (~lukka5@246-60-231-201.fibertel.com.ar)
[10:16:52] *** Joins: chandankumar (~chandanku@51.159.58.174)
[10:18:04] *** Joins: ssbr_ (~ssbr@c-174-61-157-141.hsd1.wa.comcast.net)
[10:18:08] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[10:18:16] *** Quits: chandankumar (~chandanku@51.159.58.174) (Client Quit)
[10:18:55] *** Joins: pradhvan (~pradhvan@103.94.114.237)
[10:19:14] *** Quits: lukka5 (~lukka5@246-60-231-201.fibertel.com.ar) (Ping timeout: 252 seconds)
[10:19:27] *** Joins: chandankumar (~chandanku@51.159.58.174)
[10:20:02] *** Quits: pradhvan (~pradhvan@103.94.114.237) (Remote host closed the connection)
[10:20:25] *** Quits: Julian (~tos9@host-82-58-0-63.retail.telecomitalia.it) (Quit: leaving)
[10:21:05] *** Quits: HaMsTeRs (~mx@14-0-228-101.static.pccw-hkt.com) (Quit: Konversation terminated!)
[10:21:55] *** Quits: penguino (~mrpenguin@user/mrpenguin) (Remote host closed the connection)
[10:21:55] <jinsun> yeah seems like a bug that it doesn't complain about the Any in the and case
[10:22:33] *** Quits: dez (uid92154@user/dez) (Quit: Connection closed for inactivity)
[10:22:33] <jinsun> because when you do reveal_type on that equality check it shows Any and not bool
[10:23:21] *** Quits: kostkon (~kostkon@2a02:587:a100:18e:9fe3:794:a225:7cdb) (Quit: Leaving)
[10:23:36] *** Joins: kostkon (~kostkon@2a02:587:a100:18e:9fe3:794:a225:7cdb)
[10:23:46] <jinsun> and then obviously showing Any itself is a bug, because it should have narrowed down the type
[10:30:42] *** Joins: wyclif (~wyclif@user/wyclif)
[10:31:51] *** Quits: montybanksnyc (~montybank@2601:86:600:a2a:e1e4:7e02:b287:155d) (Read error: Connection reset by peer)
[10:32:51] *** Joins: sazawal (~sazawal@2409:4043:510:d63:bbf3:69a3:5ba3:3292)
[10:33:48] *** Joins: diek (~diek@187.36.4.113)
[10:35:12] *** Quits: cjb (~cjb@user/cjb) ()
[10:35:33] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 258 seconds)
[10:36:27] *** Quits: ray (~ray@user/re) (Ping timeout: 265 seconds)
[10:36:51] *** Quits: reset (~reset@user/reset) (Quit: reset)
[10:38:04] *** Joins: ray (~ray@user/re)
[10:38:13] *** Quits: diek (~diek@187.36.4.113) (Ping timeout: 258 seconds)
[10:38:26] *** Quits: gr33n7007h (~gr33n7007@user/gr33n7007h) (Quit: WeeChat 3.2)
[10:38:40] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 252 seconds)
[10:40:52] *** Quits: mattf (~matheus@179-189-87-110.goldnettelecom.com.br) (Ping timeout: 252 seconds)
[10:42:57] *** Joins: venmx (~bertie@host86-129-227-84.range86-129.btcentralplus.com)
[10:44:25] *** Quits: elena (~elena@202-153-212-80.ca99d4.syd.static.aussiebb.net) (Ping timeout: 246 seconds)
[10:45:04] *** Joins: upsala (~zcb@185.213.155.232)
[10:46:34] *** Quits: seednode (~seednode@user/seednode) (Quit: Nihil supernum.)
[10:47:05] *** Quits: Lando-SpacePimp (~Lando@user/lando-spacepimp) (Ping timeout: 268 seconds)
[10:47:19] *** Joins: seednode (~seednode@user/seednode)
[10:47:30] *** Joins: wyclif (~wyclif@user/wyclif)
[10:47:33] *** Joins: kosh (~kosh@user/kosh)
[10:47:48] *** Quits: venmx (~bertie@host86-129-227-84.range86-129.btcentralplus.com) (Ping timeout: 258 seconds)
[10:49:11] *** Joins: nomic (~nomic@2a00:23c6:9910:1201:cdae:ea4b:93a4:1c59)
[10:50:06] *** Quits: twobitsprite (~twobitspr@107.13.51.62) (Ping timeout: 258 seconds)
[10:50:31] *** Joins: gusto (~Augustus@109.255.100.54)
[10:52:38] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 268 seconds)
[10:54:55] *** Quits: lucerne (~lucerne@ip202.ip-51-178-215.eu) (Remote host closed the connection)
[10:55:04] *** Quits: mud (~mud@user/kadoban) (Ping timeout: 244 seconds)
[10:56:41] *** Joins: pnoud (~pnoud@user/pnoud)
[10:56:53] *** Joins: mud (~mud@user/kadoban)
[10:59:25] *** Joins: wyclif (~wyclif@user/wyclif)
[11:00:05] *** Joins: Einstein (~einstein@pool-100-35-34-110.nwrknj.fios.verizon.net)
[11:00:21] *** Joins: jpodivin (~jpodivin@118.108.broadband14.iol.cz)
[11:00:40] *** Joins: pneff (~pneff@46-127-136-42.dynamic.hispeed.ch)
[11:02:25] *** Joins: cedric (~cedric@2a01:cb11:867:c200:4466:60f4:206b:4b2b)
[11:02:35] *** Quits: Furai (~Furai@cookiehoster.furai.pl) (Quit: WeeChat 3.2)
[11:03:24] *** Joins: rsx (~dummy@ppp-188-174-156-207.dynamic.mnet-online.de)
[11:04:00] *** Joins: gulzar (~gulzar@14.139.123.36)
[11:04:05] *** Joins: manti7 (~manti7@176.10.104.94)
[11:05:27] *** Quits: mud (~mud@user/kadoban) (Ping timeout: 265 seconds)
[11:05:44] *** Joins: ApostleInTriumph (~ApostleIn@vpn2.lix.polytechnique.fr)
[11:05:47] *** Joins: Furai (~Furai@cookiehoster.furai.pl)
[11:06:04] <gulzar> Hi. A small problem. I have two Pandas DataFrames, I tried to calculate scipy.cdist between them, but being too large, it gives memory error. I tried looping over one df and calculate row wise distance. Issue is, while looping it gives 1D series. cdist needs 2D array for it (maybe because XA is dataframe in 2D). Any solution please.
[11:06:22] *** Quits: cedric (~cedric@2a01:cb11:867:c200:4466:60f4:206b:4b2b) (Client Quit)
[11:06:27] *** Joins: mud (~mud@user/kadoban)
[11:06:59] <ApostleInTriumph> Hello. I've a silly question. is it possible to transfer numpy arrays between notebooks? (using same kernel)
[11:07:23] *** Joins: darksun (~darksun@user/darksun)
[11:07:34] *** Joins: drincruz_ (~drincruz@ool-44c748be.dyn.optonline.net)
[11:08:03] <deniska> ApostleInTriumph: not really, besides serializing them in some way
[11:08:33] <deniska> ApostleInTriumph: notebooks may use the same kernel version, but it's still a different running process
[11:08:34] <ApostleInTriumph> deniska i can actually save them and load again, but just that i am a little too lazy and also think it'd be nice to have a way to sync data
[11:08:36] *** Joins[11:49:15] *** Quits: nomic (~nomic@2a00:23c6:9910:1201:cdae:ea4b:93a4:1c59) (Remote host closed the connection)
[11:49:23] *** Joins: nomic2 (~nomic@2a00:23c6:9910:1201:cdae:ea4b:93a4:1c59)
[11:49:54] *** Quits: rolo (~error@ip1f12fbd1.dynamic.kabel-deutschland.de) (Ping timeout: 258 seconds)
[11:50:24] *** Joins: DodgeThis (~DodgeThis@246.102.90.149.rev.vodafone.pt)
[11:50:59] *** Joins: lucerne (~lucerne@ip202.ip-51-178-215.eu)
[11:51:23] *** Quits: squirrel (~sq@user/squirrel) (Ping timeout: 244 seconds)
[11:52:14] *** Church is now known as aleph
[11:53:25] *** Joins: rolo (~error@2a02:8108:8dc0:1cec:12:cd6a:bc9e:b8fc)
[11:57:10] *** Joins: LemurP (~lemurp@109.74.190.250)
[11:57:56] *** nomic2 is now known as nomic
[11:59:43] *** Quits: gloomy (~ldorigo@2a02:a03f:679e:e700:718d:8beb:946b:9ee7) (Ping timeout: 264 seconds)
[12:00:29] *** Joins: amahl (~amahl@dsl-jklbng12-54fbca-64.dhcp.inet.fi)
[12:01:42] *** Joins: pycode1 (~pycode@2001:b07:5d28:551:5d49:5698:a506:6b51)
[12:02:22] *** Joins: w0x12ef (~w0x12ef@117.61.27.167)
[12:02:39] *** Quits: crabbedhaloablut (~crabbedha@user/crabbedhaloablut) (Remote host closed the connection)
[12:02:40] *** Quits: cmc (~methos@gateway/tor-sasl/cmc) (Remote host closed the connection)
[12:02:44] *** Joins: lukka5 (~lukka5@246-60-231-201.fibertel.com.ar)
[12:02:50] *** Joins: crabbedhaloablut (~crabbedha@user/crabbedhaloablut)
[12:03:44] *** Quits: mickey (~user@user/mickey) (Remote host closed the connection)
[12:03:53] *** Joins: cmc (~methos@gateway/tor-sasl/cmc)
[12:04:01] *** Joins: mickey (~user@user/mickey)
[12:06:06] *** Quits: cedric (~cedric@2a01:cb11:867:c200:9eb0:38cb:7b14:a55f) (Quit: Konversation terminated!)
[12:07:27] *** Joins: rendar (~rendar@user/rendar)
[12:07:48] *** Quits: lukka5 (~lukka5@246-60-231-201.fibertel.com.ar) (Ping timeout: 265 seconds)
[12:07:59] *** Joins: Samian (~Samian@2620:10d:c090:400::5:8dbd)
[12:08:18] <Samian> hi
[12:10:04] <raek> Samian: hello!
[12:12:56] *** Quits: rsx (~dummy@ppp-188-174-156-207.dynamic.mnet-online.de) (Quit: rsx)
[12:13:19] *** Quits: ApostleInTriumph (~ApostleIn@vpn2.lix.polytechnique.fr) (Ping timeout: 246 seconds)
[12:14:44] *** Joins: goldfish (~goldfish@user/goldfish)
[12:15:09] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[12:16:13] *** Joins: __jmcantrell__ (~weechat@user/jmcantrell)
[12:16:35] *** Quits: rolo (~error@2a02:8108:8dc0:1cec:12:cd6a:bc9e:b8fc) (Ping timeout: 268 seconds)
[12:17:25] *** Quits: anas (~anas@196.235.97.18) (Quit: WeeChat 3.2)
[12:17:40] *** ray is now known as re
[12:18:43] *** Joins: mcsontos (~mcsontos@95.82.135.0)
[12:19:08] *** Quits: jmcantrell (~weechat@user/jmcantrell) (Ping timeout: 252 seconds)
[12:19:39] <p-i-> Does anyone know how HTTP POSTs work under the hood? I'm trying to switch from using `requests`, where I do: `session.post(url, data={foo:1}` to a faster lib that just lets me supply a `body` param.
[12:20:23] *** re is now known as ray
[12:20:24] <p-i-> I tried `faster(url, body=str({foo:1}))` but it's failing.
[12:22:14] *** Quits: salpynx (~salpynx@121.73.84.248) (Quit: Connection closed)
[12:23:13] *** Joins: zandq (~Thunderbi@112.19.169.147)
[12:24:23] *** Quits: zandq (~Thunderbi@112.19.169.147) (Quit: zandq)
[12:24:26] *** Joins: darksun (~darksun@user/darksun)
[12:25:55] *** Joins: zandq (~Thunderbi@112.19.169.147)
[12:26:13] *** Quits: zandq (~Thunderbi@112.19.169.147) (Client Quit)
[12:26:45] <raek> p-i-: the POST data can be in many formats, but one common is "application/x-www-form-urlencoded"
[12:27:06] <haslo> p-i-: what is `faster` that you're using?
[12:27:07] <raek> it is a text format that in the simple case looks like a=1&b=2
[12:27:11] *** Joins: GiLgAmEzH (~gilgamezh@186.19.69.139)
[12:27:31] <alguien_> p-i-, yeah I'm not familiar with faster, but the first thing is likely sending a Content-Type:application/json or application/x-www-form-urlencoded or multipart/form-data, all of which are serializations that differentiate between keys and values, while the other thing is sending key-values as Content-Type:text/plain which your backend probably doesn't know how to deserialize (is it XML? is it JSON? I don't know, not gonna bother trying).
[12:27:36] <p-i-> https://github.com/juancarlospaco/faster-than-requests
[12:27:43] *** Quits: xrogaan (~xrogaan@user/xrogaan) (Quit: Leaving)
[12:27:59] <p-i-> After a day of fiddling with compiler flags and patching an upstream (nimporter) lib I've got it spinning on macos
[12:28:10] *** Joins: securethemews (~securethe@2a00:23c4:1e98:ef00::4)
[12:28:15] <raek> requests can create such values from dictionaries by using the data keyword argument
[12:28:19] *** Joins: vsajip (~vsajip@82.152.15.113)
[12:29:11] <p-i-> So I can either pass k/v pairs in the URL as query-string 'params' or as a text-dump 'body' str(myjson)
[12:29:35] <p-i-> raek: So `data` gets converted to a querystring?
[12:29:35] <jor> you need to know which content-type the other side accepts :/
[12:29:38] <haslo> what does the endpoint you're posting to require?
[12:29:48] <alguien_> p-i-, yes, but your header must indicate the serialization, so that the api knows how to deserialize it
[12:29:52] <alguien_> pick the one that the api supports
[12:29:59] <p-i-> ok, gotcha
[12:30:02] <alguien_> text/plain it doesn't know what to do with
[12:31:35] *** Quits: vsajip (~vsajip@82.152.15.113) (Quit: Client closed)
[12:31:43] <alguien_> in the first case, request is likely adding the supported Content-Type header itself (along with serializing appropriately). In the second case, you're doing the serialization and not providing the server with the info how you did it (not that the server supports the way you did it)
[12:32:33] *** Joins: i0e (~is0ke3@user/is0ke3)
[12:33:03] *** Joins: gitesh (uid423739@id-423739.charlton.irccloud.com)
[12:33:50] *** alguien_ is now known as alguien
[12:35:18] <jor> I guess you already lost all the speed improvements by fiddling a day with this ;p
[12:35:21] *** Joins: diek (~diek@187.36.4.113)
[12:35:45] <p-i-> lol
[12:36:24] *** Joins: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk)
[12:37:28] *** Joins: venmx (~bertie@host86-129-227-84.range86-129.btcentralplus.com)
[12:39:06] *** Joins: sierkov (~sierkov@c89-176.i07-23.onvol.net)
[12:39:41] *** sierkov is now known as outsider
[12:40:45] *** Quits: diek (~diek@187.36.4.113) (Read error: Connection reset by peer)
[12:41:01] *** Joins: shad (~shad@user/shad)
[12:41:09] *** Joins: hendursa1 (~weechat@user/hendursaga)
[12:41:12] *** Joins: rolo (~error@2a02:8108:8dc0:1cec:12:cd6a:bc9e:b8fc)
[12:42:00] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 244 seconds)
[12:45:03] *** Quits: lucerne (~lucerne@ip202.ip-51-178-215.eu) (Remote host closed the connection)
[12:45:25] *** Joins: Norore (~weechat@2a01:e0a:23a:5600:b9d3:ae19:12de:25b)
[12:46:38] *** Quits: control (guesswho@user/control) (Remote host closed the connection)
[12:46:42] *** Joins: varaindemian (~varaindem@86.124.78.162)
[12:46:59] *** Quits: derelict (~derelict@user/derelict) (Ping timeout: 252 seconds)
[12:48:22] *** Quits: TFKyle (~kyle@64.201.205.70) (Read error: Connection reset by peer)
[12:48:52] *** Quits: nomic (~nomic@2a00:23c6:9910:1201:cdae:ea4b:93a4:1c59) (Quit: Leaving)
[12:49:04] *** Joins: LucaTM (~LucaTM@user/lucatm)
[12:49:08] *** Joins: itsmemoria (~user@103.252.202.82)
[12:49:31] *** Quits: rolo (~error@2a02:8108:8dc0:1cec:12:cd6a:bc9e:b8fc) (Ping timeout: 264 seconds)
[12:50:30] *** Quits: pycode1 (~pycode@2001:b07:5d28:551:5d49:5698:a506:6b51) (Ping timeout: 268 seconds)
[12:51:03] *** Joins: wattux (~wattux@212.51.23.106)
[12:52:17] *** Joins: SparkleKraken (~SparkleKr@97e407ec.skybroadband.com)
[12:53:02] *** Joins: MikZyth (~MikZyth@188.65.242.236)
[12:53:43] *** Quits: ray (~ray@user/re) (Quit: WeeChat 3.1)
[12:53:52] *** Joins: mcope (~matt@user/mcope)
[12:54:23] *** Joins: rolo (~error@2a02:8108:8dc0:1cec:12:cd6a:bc9e:b8fc)
[12:54:31] *** Quits: lsrtl (~lsrtl@user/lsrtl) (Remote host closed the connection)
[12:54:50] *** Joins: lsrtl (~lsrtl@user/lsrtl)
[12:56:53] *** Joins: lukka5 (~lukka5@246-60-231-201.fibertel.com.ar)
[12:57:13] *** Joins: Tas-sos (~Tas-sos@ppp07916722[13:42:16] *** Joins: bindu (bindu@user/bindu)
[13:42:20] *** Parts: bindu (bindu@user/bindu) ()
[13:42:27] *** Quits: Brocker (~Libera@user/brocker) (Remote host closed the connection)
[13:43:13] *** Joins: lucerne (~lucerne@ip202.ip-51-178-215.eu)
[13:45:16] *** Joins: Brocker (~NoBody@user/brocker)
[13:45:19] *** Joins: Gerula (~Gerula@user/gerula)
[13:50:16] *** Joins: mozgalom (~mozgalom@IPnet-gw.157.157.97.111.simnet.is)
[13:50:39] *** Quits: Tas-sos (~Tas-sos@ppp079167220109.access.hol.gr) (Ping timeout: 258 seconds)
[13:51:28] *** Quits: Allegretto (~allegrett@85-238-67-31.pool.digikabel.hu) (Ping timeout: 268 seconds)
[13:51:55] *** Quits: mozgalom (~mozgalom@IPnet-gw.157.157.97.111.simnet.is) (Read error: Connection reset by peer)
[13:51:56] *** Joins: mozgalom_ (~mozgalom@IPnet-gw.157.157.97.111.simnet.is)
[13:52:11] <ronny> p-i-: alos - its typically bad style to do any system level install with pip, prefer the distro package manager
[13:52:45] <graingert> p-i-: I use `pipx run ipython` for messing around in the fancy repl
[13:53:08] <lericson> an asyncio.CancelledError can only happen in an await right
[13:53:24] <graingert> lericson: yes and no
[13:53:34] <graingert> lericson: but mostly yes
[13:53:43] <graingert> lericson: there's async with and async for
[13:53:51] <lericson> ah
[13:53:52] <graingert> and things can throw it manually
[13:53:56] <lericson> right
[13:54:33] *** Quits: dodobrain (~dodobrain@user/dodobrain) (Ping timeout: 268 seconds)
[13:55:58] *** Joins: asd (~noname@user/asd)
[13:58:01] *** Quits: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk) (Quit: Leaving)
[13:58:04] <graingert> lericson: `with anyio.CancelScope(shield=True):` is a bit clearer
[13:58:47] <p-i-> I love the gif-vid on https://pypi.org/project/pipx/ ... sure wish more components were 'documented' that way
[14:00:22] <lericson> anyio? graingert
[14:00:32] <graingert> lericson: yeah it works on trio or asyncio
[14:00:35] <graingert> it's pretty nice
[14:00:57] <lericson> i generally prefer self-contained scripts
[14:01:18] <lericson> if i had other deps then sure but this is a standalone script
[14:01:35] *** Joins: drincruz_ (~drincruz@ool-44c748be.dyn.optonline.net)
[14:01:53] <lericson> a context manager can swallow exceptions huh
[14:02:58] *** Quits: kmh (~kmh@p200300df5f145f004144ecc119e5a184.dip0.t-ipconnect.de) (Quit: Leaving)
[14:03:03] <lericson> oh this is good stuff
[14:03:18] *** Quits: lucerne (~lucerne@ip202.ip-51-178-215.eu) (Remote host closed the connection)
[14:03:26] <lericson> i have an idea of using coroutines to replace state machines in robotics
[14:03:38] *** Quits: LemurP (~lemurp@109.74.190.250) (Ping timeout: 252 seconds)
[14:03:46] <lericson> i guess this is already happening
[14:04:04] *** Joins: Allegretto (~allegrett@fibhost-67-230-113.fibernet.hu)
[14:04:15] *** Quits: moto (~moto@user/moto) (Read error: Connection reset by peer)
[14:04:20] *** Joins: lucerne (~lucerne@ip202.ip-51-178-215.eu)
[14:04:30] *** Joins: moto (~moto@user/moto)
[14:04:56] *** Quits: caveman (~caveman@gateway/tor-sasl/caveman) (Remote host closed the connection)
[14:05:33] *** Joins: caveman (~caveman@gateway/tor-sasl/caveman)
[14:06:04] *** Joins: lucad111 (~lucad111@51-148-40-1.dsl.zen.co.uk)
[14:06:16] *** Quits: drincruz_ (~drincruz@ool-44c748be.dyn.optonline.net) (Ping timeout: 268 seconds)
[14:06:30] *** Joins: boxelephant (~boxelepha@d192-24-108-69.col.wideopenwest.com)
[14:08:02] *** Quits: humanBird (~humanBird@2603-8001-7003-5966-51cb-3856-044c-f674.res6.spectrum.com) (Quit: Client closed)
[14:09:02] *** Quits: crabbedhaloablut (~crabbedha@user/crabbedhaloablut) (Remote host closed the connection)
[14:09:14] *** Joins: crabbedhaloablut (~crabbedha@user/crabbedhaloablut)
[14:09:26] *** Quits: i0e (~is0ke3@user/is0ke3) (Ping timeout: 258 seconds)
[14:10:57] <Tykling> is it possible to round() and += in the same line?
[14:11:09] <lericson> yes why not Tykling
[14:11:19] *** Joins: i0e (~is0ke3@user/is0ke3)
[14:11:19] *** Quits: DnzAtWrk (~DnzAtWrk@mobile-access-6df0bd-162.dhcp.inet.fi) (Read error: Connection reset by peer)
[14:11:20] *** Quits: boxelephant (~boxelepha@d192-24-108-69.col.wideopenwest.com) (Ping timeout: 252 seconds)
[14:11:29] *** AmyMalik is now known as LightningB
[14:11:40] <Tykling> well ok so "a += b" <- where do I stick the round() so a has 2 decimals after?
[14:12:25] <lericson> a = round(a + b)?
[14:12:52] <Tykling> sure, but that is not using += which is what I was asking about :)
[14:12:56] <Tykling> thanks
[14:13:40] *** Quits: pneff (~pneff@46-127-136-42.dynamic.hispeed.ch) (Ping timeout: 268 seconds)
[14:14:19] <mgedmin> if you insist on +=, then your only option is a += b; a = round(a)
[14:14:35] <mgedmin> (on two lines preferably)
[14:15:28] <Tykling> I don't insist on anything it's just easier (a is a deep dive in a nested dict so it is a bit much to have it twice in a line
[14:15:31] <Tykling> )
[14:15:44] *** Quits: asd (~noname@user/asd) (Ping timeout: 252 seconds)
[14:16:06] <Tykling> which is why the assignments operators are so handy (if that is the right term for them)
[14:17:39] *** Joins: asd (~noname@user/asd)
[14:17:59] <lericson> i see
[14:18:33] <lericson> people may berate me for it, but for stuff like that, i usually make some kind of AttrDict so i can go mydict.key1.subkey1a.subsubkey1ax
[14:18:58] *** Joins: Swahili (~Swahili@cpc153693-lewi20-2-0-cust508.2-4.cable.virginm.net)
[14:19:07] <lericson> another rule of thumb is that if you have more than one attribute access in a row, you're probably doing something wrong (eg a.b.c)
[14:19:12] <bjs> lericson: it's not whether people berate you but whether your tools do :)
[14:19:45] <bjs> IDEs typically hate dynamically generated attributes
[14:19:57] <lericson> and i, in turn, hate IDEs
[14:20:18] <bjs> fair enough
[14:20:32] <Swahili> Q: Installing pip in a macos / catalina, as a non-python user, to install a project and run it locally. Encountered some issue which seems to relate to python 2.7 paths; python --version outputs 3.9.5. Here's a pastebin https://paste.sh/LzXZOZL9#8-qmBjmrL1UWDEEClFw4SYQL
[14:21:03] <lericson> i also find that the intersection of (things where a hacked up AttrDict is useful) and (projects where other people will work with me let alone in an IDE) is typically small
[14:21:30] <Swahili> Appreciate if someone could provide any points of what to do to fix this, thank you!
[14:21:54] *** Quits: rowbots (~dirgeable@h69-129-115-197.arvdco.broadband.dynamic.tds.net) (Ping timeout: 240 seconds)
[14:22:00] <lericson> Swahili: you should probably install a new Python using Homebrew or something like that
[14:22:14] <lericson> Swahili: the system Python in macOS isn't really meant for end-user use
[14:22:14] <tims> Tykling: maybe the optimisation is in the wrong place, what about using `item = my_dict["a"]["b"]["c"]; item["d"] = round(item["d"], e)`
[14:22:28] *** Quits: cthulchu (~Cthulchu@193.194.107.250) (Ping timeout: 258 seconds)
[14:22:38] <Swahili> lericson: tks for looking! I've done that in the past, but can do again now.
[14:23:03] <lericson> iirc apple said they will remove the system Python at some point
[14:23:06] <lericson> but don't quote me on that
[14:23:14] <Swahili> brew list, shows python@3.8 and python@3.9
[14:23:32] *** Quits: asd (~noname@user/asd) (Ping timeout: 268 seconds)
[14:25:07] *** Joins: asd (~noname@user/asd)
[14:26:14] *** Joins: pneff (~pneff@46-127-136-42.dynamic.hispeed.ch)
[14:26:38] *** Joins: xkuru (~xkuru@user/xkuru)
[14:28:09] <lericson> I have a list of objects, and a set of sentinels. I want to break this list into a list of lists, divided by these sentinels, so if L = [v0, v1, s, v2, v3, v4] and sentinels = {s} then I want L_seg = [[v0, v1], [v2, v3, v4]]
[14:29:11] *** Joins: pycode1 (~pycode@2001:b07:5d28:551:4e72:c2e4:1b69:825a)
[14:29:47] <mgedmin> lericson: L_seg = [list(group) for is_sentinel, group for itertools.groupby(L, lambda x: x in sentinels) if not is_sentinel]
[14:29:50] <lericson> I guess just a plain old for loop is the easiest
[14:30:15] <lericson> a
[14:30:29] <mgedmin> except my solution is wrong: if you have two sentinels together, it'll treat them as a single sentinel instead of producing an empty sublist
[14:30:36] <lericson> that's fine
[14:30:40] <lericson> even desirable
[14:30:54] <lericson> the next step is to remove segments of low cardinality
[14:30:54] *** Quits: i0e (~is0ke3@user/is0ke3) (Ping timeout: 258 seconds)
[14:30:55] *** Joins: nomic (~nomic@2a00:23c6:9910:1201:cdae:ea4b:93a4:1c59)
[14:31:41] *** Joins: i0e (~is0ke3@user/is0ke3)
[14:31:48] *** Quits: wattux (~wattux@212.51.23.106) (Quit: Client closed)
[14:32:12] *** Quits: Betal (~Beta@user/betal) (Quit: WeeChat 3.2)
[14:32:49] *** Quits: pneff (~pneff@46-127-136-42.dynamic.hispeed.ch) (Ping timeout: 258 seconds)
[14:33:27] *** Quits: xkuru (~xkuru@user/xkuru) (Quit: Unvirtualizing)
[14:33:53] *** Joins: xkuru (~xkuru@user/xkuru)
[14:36:21] <mgedmin> opinions on groupby(L, sentinels.__contains__) vs groupby(L, lambda x: x in sentinels) ?
[14:36:26] <lericson> ha
[14:36:29] <lericson> i actually wrote the former
[14:38:03] <lericson> is there an easy way to do isnegative
[14:38:59] *** Quits: eberna (uid504658@id-504658.charlton.irccloud.com) (Quit: Connection closed for inactivity)
[14:40:11] *** Quits: rememberYou (~someone@user/rememberyou) (Ping timeout: 268 seconds)
[14:40:39] *** Quits: rolo (~error@2a02:8108:8dc0:1cec:12:cd6a:bc9e:b8fc) (Ping timeout: 244 seconds)
[14:41:19] *** Parts: Swahili (~Swahili@cpc153693-lewi20-2-0-cust508.2-4.cable.virginm.net) (Leaving...)
[14:42:37] *** Joins: slav0nic (slav0nic@python.su)
[14:42:52] *** Quits: moto (~moto@user/moto) (Ping timeout: 252 seconds)
[14:42:53] *** Joins: pneff (~pneff@46-127-136-42.dynamic.hispeed.ch)
[14:44:26] *** Joins: puadxtub (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[14:44:44] *** Joins: moto (~moto@user/moto)
[14:45:07] <Tykling> tims: good idea, thanks
[14:45:10] *** Joins: lukka5 (~lukka5@246-60-231-201.fibertel.com.ar)
[14:46:38] *** Joins: rolo (~error@2a02:8108:8dc0:1cec:12:cd6a:bc9e:b8fc)
[14:48:11] *** Quits: nomic (~nomic@2a00:23c6:9910:1201:cdae:ea4b:93a4:1c59) (Quit: Leaving)
[14:48:24] *** Joins: LemurP (~lemurp@109.74.190.250)
[14:48:30] *** Quits: gulzar (~gulzar@14.139.123.36) (Quit: Konversation terminated!)
[14:48:34] *** Joins: nomic (~nomic@2a00:23c6:9910:1201:cdae:ea4b:93a4:1c59)
[14:49:42] *** Joins: m_tadeu (~quassel@bl14-187-233.dsl.telepac.pt)
[14:49:47] *** Quits: crawler (~crawler__@user/crawler) (Quit: Leaving)
[14:49:50] *** Quits: lukka5 (~lukka5@246-60-231-201.fibertel.com.ar) (Ping timeout: 252 seconds)
[14:50:12] *** Quits: chele (~chele@user/chele) (Remote host closed the connection)
[14:52:46] *** Quits: aslicedbanjo (~aslicedba@host86-150-115-64.range86-150.btcentralplus.com) (Quit: Leaving.)
[14:54:33] *** Quits: amahl (~amahl@dsl-jklbng12-54fbca-64.dhcp.inet.fi) (Ping timeout: 265 seconds)
[14:56:24] *** Joins: Crassus (~Crassus@user/crassus)
[14:56:41] *** Joins: YaknotiS (~YaknotiS@user/yaknotis)
[14:57:30] *** Quits: lucerne (~lucerne@ip202.ip-51-178-215.eu) (Read error: Connection reset by peer)
[14:57:31] *** Joins: mayhew (~jm@hlfxns017vw-47-55-124-51.dhcp-dynamic.fibreop.ns.bellaliant.net)
[14:57:41] *** Joins: thiras (~thiras@user/thiras)
[14:58:17] *** Joins: kmh (~kmh@p200300df5f145f003cbf9841c92aa596.dip0.t-ipconnect.de)
[15:02:10] <rendar> can we consider 1.025 aligned to a 0.025 grid? the check i do to get if a number is aligned to some grid, its comparing its modulo to that number, e.g. 75 is aligned to a grid of 25, because 75%25==0, but 1.025%0.025 = 0.024999999999999856 -- how come? is that floating point error? can i overcome this someway?
[15:02:46] <rendar> or it might be something weird with how they implement mod for floats
[15:02:57] <Repiphany> Use ints if you can
[15:03:10] <Repiphany> 1025 and 25 and then scale them later
[15:03:10] <bjs> rendar: the 9999999 part is floating point error yes
[15:03:25] <StyXman> rendar: no, it's because reminder includes the fractional part
[15:03:34] *** Joins: aniruddha (~aniruddha@103.242.197.215)
[15:03:58] <StyXman> like Repiphany says, use ints, maybe keeping an internal value that's 1000 time the float value
[15:04:50] *** Q[15:53:53] <Samian> it's facebook open source code on github
[15:54:19] *** Joins: jw_ (~njw@58.182.164.99)
[15:54:39] <mgedmin> so there's a bug tracker, right?
[15:54:46] *** Joins: lucerne (~lucerne@ip202.ip-51-178-215.eu)
[15:55:02] <Samian> https://github.com/pytorch/FBGEMM/tree/master/fbgemm_gpu
[15:55:06] <rendar> math.isclose(0.025, 1677721.625%0.025)==False <- i need this to be True, the difference is very little, but maybe i have to enlarge a little bit math.isclose() threshold, is that possible?
[15:55:12] <Samian> the instructions state: python setup.py build develop
[15:55:44] <Yhg1s> rendar: you can tell math.isclose how close you consider close with the third and fourth argument.
[15:56:02] <mgedmin> python setup.py develop translates to pip install -e .
[15:57:00] <Samian> "sudo -E pip install -e ." appears to work
[15:57:14] <gulzar> Hi. I spent more than 4 hours today, coudn't get this to work. Please help. I have two Pandas DataFrames (w, p), I tried to calculate scipy.cdist between them, but being too large, it gives memory error. What I need is to do calculations on distance between each row of p with all of w.  I tried looping (ittertrows, itertuples, iteritems) over p . Issue is, while looping it gives 1D series. cdist needs 2D array. Any solution please.
[15:57:18] <Yhg1s> ugh, 'python setup.py build develop' are odd instructions. I *think* they just mean 'python setup.py develop' but 'python setup.py build develop' does something subtly different because of bugs in setuptools
[15:57:37] <Yhg1s> or at least did, in older setuptools versions. I don't know if it's been fixed, and I don't know if it's relevant here. But it's a mess.
[15:57:49] <Yhg1s> Samian: no, really, stop using sudo for these things.
[15:57:52] *** Joins: colddusk (~colddusk@bl10-31-130.dsl.telepac.pt)
[15:58:03] <Samian> Yhg1s when I didn't use sudo, I got a permission denied error
[15:58:19] <Samian> error: [Errno 13] is what I got
[15:58:32] *** Joins: easior_ (~easior@61.155.142.73)
[15:58:40] <Yhg1s> Samian: sure. That doesn't mean "just use sudo". That means "install somewhere else, like a virtualenv"
[15:58:40] <bjs> Samian: use a venv, or --user if you really want to
[15:58:48] *** Quits: aniruddha (~aniruddha@103.242.197.215) (Quit: WeeChat 1.9.1)
[15:59:00] *** Joins: Bronto22 (~mennoh@84-86-247-193.fixed.kpn.net)
[15:59:09] <bjs> Yhg1s: couldn't pip detect `sudo pip` and warn/error?
[15:59:10] <bjs> :l
[15:59:28] <Yhg1s> bjs: it does, now.
[15:59:36] <faceface> Yhg1s: yes
[15:59:37] <Samian> making a virtual env right now means reinstalling a bunch of packages simply for the sake of figuring out how import works and how specifically it works with import fbgemm_gpu
[15:59:56] <Samian> so I'm putting best practices asside so I can figure this out before I wipe the computer clean
[16:00:06] <bjs> Samian: learning how eggs work is a bit silly because the only way ou're even getting an egg is because you're doing something weird that no modern tools do
[16:00:46] <Samian> bpa.st/DTNQ
[16:00:48] <Samian> that's what I see now
[16:01:00] *** Joins: easior__ (~easior@61.155.142.67)
[16:01:13] <Yhg1s> faceface: pathlib.Path('/new/dir/to/use').joinpath(your_path_object.name)
[16:01:19] <bjs> Samian: e.g. if i look on my system (with lots of stuff installed) there are no .egg's at all
[16:01:40] *** Quits: pycode1 (~pycode@2001:b07:5d28:551:4e72:c2e4:1b69:825a) (Ping timeout: 268 seconds)
[16:01:54] <Yhg1s> Samian: perhaps instead of asking for help with what you're doing in order to get around to learn how import works, you should ask more specific questions about the thing you're trying to find out.
[16:02:14] *** Quits: kosh (~kosh@user/kosh) (Ping timeout: 252 seconds)
[16:02:28] *** Joins: drincruz_ (~drincruz@ool-44c748be.dyn.optonline.net)
[16:02:54] *** Quits: ano (~weechat@user/ano) (Remote host closed the connection)
[16:03:04] <Samian> got it
[16:03:20] <Samian> I really appreciate you even helping at all. Thank you a lot guys
[16:03:33] *** Joins: ano (~weechat@user/ano)
[16:03:40] *** Quits: easior_ (~easior@61.155.142.73) (Ping timeout: 258 seconds)
[16:03:50] <Yhg1s> Samian: I really wish you would just ask the questions you have about import, because learning how import works from eggs is a *terrible* idea.
[16:04:02] *** Quits: jw_ (~njw@58.182.164.99) (Quit: jw_)
[16:04:04] <Samian> this is what I see now for print('\n'.join(sys.path))
[16:04:19] *** Quits: wei2912 (~wei2912@112.199.250.21) (Quit: Lost terminal)
[16:04:19] <Samian> bpa.st/TS2A
[16:04:19] <Yhg1s> Samian: I'm not sure why you keep showing us that, to be honest.
[16:04:44] *** Joins: easior (~easior@61.155.142.70)
[16:04:50] <Samian> the path directory now points to the repo directory which is different from all the other packages.
[16:05:03] <Yhg1s> Samian: yes, taht's what 'pip install -e' and 'python setup.py develop' do.
[16:05:09] <faceface> Yhg1s: Thanks
[16:05:49] *** Joins: jw_ (~njw@58.182.164.99)
[16:07:08] *** Quits: drincruz_ (~drincruz@ool-44c748be.dyn.optonline.net) (Ping timeout: 268 seconds)
[16:07:08] *** Quits: easior__ (~easior@61.155.142.67) (Ping timeout: 268 seconds)
[16:08:01] *** Quits: davidlowryduda (~davidlowr@73.61.8.67) (Ping timeout: 265 seconds)
[16:08:10] *** Quits: mesaboogie (~mesaboogi@user/mesaboogie) (Quit: leaving)
[16:08:29] *** Quits: finsternis (~X@23.226.237.192) (Remote host closed the connection)
[16:08:55] *** Joins: mesaboogie (mesaboogie@user/mesaboogie)
[16:09:01] <Samian> except no __init__.py file was created
[16:09:18] <Yhg1s> Samian: where did you expect an __init__.py file to be created?
[16:09:33] <bjs> Samian: pip doesn't create __init__.py's,  it's part of the package and the author of the package writes it.
[16:09:42] *** Joins: palasso (~palasso@user/palasso)
[16:09:46] *** Joins: jmcantrell (~weechat@user/jmcantrell)
[16:09:53] *** Joins: davidlowryduda (~davidlowr@73.61.8.65)
[16:10:03] *** Joins: lbracher (~lbr@94.105.104.226.dyn.edpnet.net)
[16:10:06] <bjs> Samian: if fbgemm_gpu's directory doesn't contain an __init__.py it's because the author (you?) didn't write one, so it there wasn't one to be installed.
[16:10:07] <Samian> bjs  inside /home/sami/Repos/temp_repos/FBGEMM/fbgemm_gpu/fbgemm_gpu
[16:10:11] *** Quits: pneff (~pneff@46-127-136-42.dynamic.hispeed.ch) (Ping timeout: 258 seconds)
[16:10:30] <bjs> Samian: okay?
[16:10:40] <Samian> that's where I expected to see one but didn't
[16:10:49] *** Joins: pycode1 (~pycode@2001:b07:5d28:551:634a:99fe:bd5c:fd4d)
[16:11:17] <bjs> Samian: well perhaps the author didn't include an __init__.py
[16:11:33] <Yhg1s> Samian: they are probably (incorrectly) relying on namespace packages.
[16:11:45] <Yhg1s> (another way in which this package is not doing things well.)
[16:11:53] *** Joins: rolo (~error@2a02:8108:8dc0:1cec:12:cd6a:bc9e:b8fc)
[16:11:59] <Samian> so how else did the author expect the the package to be used by doing import fbgemm_gpu
[16:12:12] <Yhg1s> Samian: a directory does not need an __init__.py file to be importable.
[16:12:14] *** Joins: DaNeenjah (~jake@124.sub-72-105-218.myvzw.com)
[16:12:20] <Yhg1s> (a directory without an __init__.py file is a namespace package)
[16:12:51] *** Quits: __jmcantrell__ (~weechat@user/jmcantrell) (Ping timeout: 265 seconds)
[16:13:15] <Yhg1s> oh, no, it's somethign else entirely.
[16:13:21] *** Joins: easior_ (~easior@61.155.142.70)
[16:13:21] <Samian> thanks for giving me the name "namespace package" to google and read about
[16:13:45] <mgedmin> note that there are two kinds of namespace packages; the __init__.py-less ones are https://www.python.org/dev/peps/pep-0420/
[16:13:47] <Yhg1s> The package only contains an extension module. It doesn't install an fbgem_gpu module, it installs an fbgemm_gpu_py extension module.
[16:13:48] *** Joins: gloomy (~ldorigo@2a02:a03f:679e:e700:718d:8beb:946b:9ee7)
[16:13:54] <Yhg1s> that's all it installs.
[16:13:55] *** Quits: jw_ (~njw@58.182.164.99) (Ping timeout: 268 seconds)
[16:13:56] <Samian> I'm just trying to build this and have it work with import: https://github.com/pytorch/FBGEMM/tree/master/fbgemm_gpu
[16:14:08] <Yhg1s> Samian: what are you trying to import?
[16:14:16] *** Quits: ELFrederich (~ELFrederi@siemens-industry-software-inc-216-196-155-202.static.fuse.net) (Remote host closed the connection)
[16:15:05] <Samian> bpa.st/ZT4Q
[16:15:12] <Samian> those calls are what I want to use
[16:15:26] *** Joins: drincruz_ (~drincruz@ool-44c748be.dyn.optonline.net)
[16:15:26] *** Joins: shad (~shad@user/shad)
[16:15:37] <Yhg1s> Samian: you can't install the package and resolve those imports. Those files are not installed by setup.py. The package can't be installed and used. It can only be used from the repo.
[16:15:54] *** Quits: rolo (~error@2a02:8108:8dc0:1cec:12:cd6a:bc9e:b8fc) (Ping timeout: 240 seconds)
[16:16:04] <Yhg1s> Basically, you can only use this package the exact way the README file says.
[16:16:27] *** Joins: pneff (~pneff@46-127-136-42.dynamic.hispeed.ch)
[16:16:43] *** Quits: easior (~easior@61.155.142.70) (Ping timeout: 265 seconds)
[16:17:08] <Samian> an "fbgemm_gpu_py.so" file is created by pip install -e.   I think saw code that did torch.ops.load_library("fbgemm_gpu_py.so")
[16:17:12] *** Joins: IHasFinger (~JJ_@94.4.131.178)
[16:17:13] *** Joins: easior (~easior@61.155.142.70)
[16:17:18] <Samian> so I'm trying to learn about *.so files and how they're used
[16:18:02] <Yhg1s> Samian: the .so generated by pip is a Python extension module. You would use it like so: 'import fbgemm_gpu_py'
[16:18:09] <mgedmin> .so stands for "shared object", it's the Linux name for dynamically linked libraries
[16:18:17] <Samian> ohhh
[16:18:23] <Samian> thank you for that bit of info!!!
[16:18:42] <Yhg1s> Samian: things loaded with torch.ops.load_library are generally speaking *not* extension modules. They're C or C++ libraries that don't know about Python.
[16:19:06] <Samian> btw, I had bought the book "Fluent Python" and I don't recall any section of the book extension modules or shared objects!!
[16:19:37] *** Quits: easior_ (~easior@61.155.142.70) (Ping timeout: 265 seconds)
[16:19:59] <Yhg1s> Samian: does it claim to cover everything you could possibly do with Python? :)
[16:21:03] <bjs> Samian: .so files aren't a Python thing specifically, I'd be surprised if the book covered them in anything more than a passing mention
[16:21:59] *** Quits: mbrndtgn (~mbrndtgn@undecidable.de) (Quit: The Lounge - https://thelounge.chat)
[16:22:12] *** Joins: mbrndtgn (~mbrndtgn@undecidable.de)
[16:22:15] <Samian> I tried import fbgemm_gpu_py and I get "ImportError: dynamic module does not define module export function (PyInit_fbgemm_gpu_py). Let me google about that!
[16:23:28] <mgedmin> https://docs.python.org/3/extending/index.html#extending-index is the primary official documentation on extension modules
[16:23:36] <mgedmin> (but fbgemm_gpu_py is not one)
[16:23:39] *** Quits: gulzar (~gulzar@106.214.136.134) (Quit: Konversation terminated!)
[16:23:50] <Samian> thank you mgedmin !
[16:23:55] <Yhg1s> Samian: okay, that means the project is *astonishingly* broken. It's generating an extension module that isn't actually an extension module.
[16:24:14] <Samian> Yhg1s  dang :-(
[16:24:25] <Yhg1s> Samian: I would be very hesitant with using this package.
[16:24:42] <Samian> I'll try cloning the repo again in case it's me that screwed up some files
[16:24:50] <Yhg1s> Samian: They probably just wanted to generate a library to use with pytorch's load_library.
[16:25:01] <mgedmin> it's unfair to call it broken if it's meant to be used with torch.ops.load_library() rather than with import
[16:25:28] *** Joins: imp (~imp@186.205.11.214)
[16:25:33] <Yhg1s> mgedmin: no, it's telling setup.py it's an extension module, so it's installed as one. If it's not an extension module, it shouldn't be built as one.
[16:26:17] *** Quits: akaWolf (~akaWolf@akawolf.org) (Ping timeout: 258 seconds)
[16:26:46] *** Joins: zeden (~zeden@user/zeden)
[16:26:51] <Yhg1s> (that is, in fact, *all* that the setup.py builds, because none of the Python code in the package is installed.)
[16:26:53] <mgedmin> lolwut
[16:28:28] <mgedmin> oh, I see, reusing the distutils knowledge about the C compiler?
[16:28:35] <mgedmin> I don't want to know
[16:29:21] *** Joins: easior_ (~easior@61.155.142.70)
[16:29:29] <Samian> yess I can do this: https://bpa.st/6Z3Q
[16:30:03] <Samian> now I'm trying to get a list of all functions in torch.ops.fb.*
[16:30:14] *** Joins: wingsorc (~wingsorc@user/wingsorc)
[16:30:22] *** Joins: boxelephant (~boxelepha@d192-24-108-69.col.wideopenwest.com)
[16:30:51] *** Joins: akaWolf (~akaWolf@akawolf.org)
[16:30:52] *** Joins: brownan (~brownan@136.56.137.143)
[16:31:42] *** Quits: easior (~easior@61.155.142.70) (Ping timeout: 265 seconds)
[16:32:30] *** Quits: DodgeThis (~DodgeThis@246.102.90.149.rev.vodafone.pt) (Ping timeout: 252 seconds)
[16:33:26] *** Joins: lukka5 (~lukka5@246-60-231-201.fibertel.com.ar)
[16:34:12] *** Quits: faceface (~faceface@user/faceface) (Quit: leaving)
[16:35:06] *** Joins: faceface (~faceface@user/faceface)
[16:35:30] *** Quits: boxelephant (~boxelepha@d192-24-108-69.col.wideopenwest.com) (Ping timeout: 268 seconds)
[16:35:42] <faceface> Gah... logresume failed...
[16:36:02] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.2)
[16:36:03] *** Quits: p-i- (~Ohmu@node-cad.pool-1-0.dynamic.totinternet.net) (Ping timeout: 265 seconds)
[16:36:38] *** Joins: supakeen (~user@python/site-packages/supakeen)
[16:37:22] *** Quits: thiras (~thiras@user/thiras) (Ping timeout: 268 seconds)
[16:37:22] *** Quits: LemurP (~lemurp@109.74.190.250) (Ping timeout: 268 seconds)
[16:37:30] *** Quits: pycode1 (~pycode@2001:b07:5d28:551:634a:99fe:bd5c:fd4d) (Ping timeout: 240 seconds)
[16:37:59] *** Joins: DodgeThis (~DodgeThis@246.102.90.149.rev.vodafone.pt)
[16:38:35] *** Quits: lukka5 (~lukka5@246-60-231-201.fibertel.com.ar) (Ping timeout: 268 seconds)
[16:41:01] *** Quits: lucerne (~lucerne@ip202.ip-51-178-215.eu) (Read error: Connection reset by peer)
[16:41:19] *** Joins: rememberYou (~someone@user/rememberyou)
[16:41:24] *** Joins: diek (~diek@2804:14d:7681:82bd:e84f:20c9:c5ab:ee57)
[16:41:32] *** Joins: Quack (~Quack@185.21.216.169)
[16:43:03] *** Joins: lucerne (~lucerne@ip202.ip-51-178-215.eu)
[16:45:52] <Samian> mgedmin  can I pay you to help me figure out how to use fbgemm_gpu in python? I'm desperate xD
[16:46:15] <mgedmin> no
[16:46:31] *** Quits: diek (~diek@2804:14d:7681:82bd:e84f:20c9:c5ab:ee57) (Ping timeout: 264 seconds)
[16:46:36] *** Quits: mbrndtgn (~mbrndtgn@undecidable.de) (Quit: The Lounge - https://thelounge.chat)
[16:47:34] *** Joins: mbrndtgn (~mbrndtgn@undecidable.de)
[16:49:12] *** Joins: pep (~pep@66.red-79-154-168.dynamicip.rima-tde.net)
[16:52:18] *** Quits: Nalt (~Nalt|||@162-239-107-41.lightspeed.rcsntx.sbcglobal.net) (Ping timeout: 252 seconds)
[16:52:49] *** Joins: Nalt (~Nalt|||@162-239-107-41.lightspeed.rcsntx.sbcglobal.net)
[16:52:58] *** Quits: drincruz_ (~drincruz@ool-44c748be.dyn.optonline.net) (Ping timeout: 265 seconds)
[16:53:47] *** Joins: dez (uid92154@user/dez)
[16:54:16] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 258 seconds)
[16:55:40] *** Joins: pycode1 (~pycode@2001:b07:5d28:551:cc51:6a87:699f:ab8a)
[16:58:18] *** Joins: easior__ (~easior@61.155.142.70)
[16:58:32] *** Joins: rhax (~yannick@user/rhax)
[16:59:49] *** Joins: jw_ (~njw@58.182.164.99)
[17:01:20] *** Joins: cdown (~cdown@163.114.131.1)
[17:01:28] *** Quits: easior_ (~easior@61.155.142.70) (Ping timeout: 252 seconds)
[17:02:50] *** Joins: easior (~easior@61.155.142.73)
[17:04:05] *** Quits: cdown_ (~cdown@89.32.122.5) (Ping timeout: 265 seconds)
[17:04:57] *** Quits: diogenese (~diogenese@diogenese.velotech.net) (Quit: Has anybody seen the bridge?)
[17:05:26] *** Joins: diogenese (~diogenese@diogenese.velotech.net)
[17:05:45] *** Joins: lsrtl (~lsrtl@user/lsrtl)
[17:05:46] *** Quits: easior__ (~easior@61.155.142.70) (Ping timeout: 258 seconds)
[17:06:04] *** Joins: wyclif (~wyclif@user/wyclif)
[17:06:46] *** Quits: rhax (~yannick@user/rhax) (Quit: Leaving)
[17:08:48] *** Quits: ionface (~ionface@user/ionface) (Ping timeout: 252 seconds)
[17:10:16] *** Quits: jw_ (~njw@58.182.164.99) (Ping timeout: 252 seconds)
[17:10:17] *** Joins: TranquilEcho (~grom@user/tranquilecho)
[17:10:38] *** Quits: MikZyth (~MikZyth@188.65.242.236) (Ping timeout: 252 seconds)
[17:11:01] *** Quits: zeden (~zeden@user/zeden) (Quit: WeeChat 3.0.1)
[17:11:56] *** Joins: jw_ (~njw@58.182.164.99)
[17:11:57] *** Joins: zeden (~zeden@user/zeden)
[17:11:58] *** Joins: MikZyth (~MikZyth@188.65.242.79)
[17:12:02] *** Quits: Bronto22 (~mennoh@84-86-247-193.fixed.kpn.net) (Quit: Konversation terminated!)
[17:12:34] *** Quits: teut (~teut@182.68.62.72) (Quit: Connection closed)
[17:13:22] *** Quits: zeden (~zeden@user/zeden) (Client Quit)
[17:13:43] *** Joins: zeden (~zeden@user/zeden)
[17:14:21] *** Joins: GreenResponse (~tomek@r-45-155-148-237.gpon.bialnet.pl)
[17:14:40] *** Quits: lsrtl (~lsrtl@user/lsrtl) (Ping timeout: 252 seconds)
[17:15:36] *** Quits: zeden (~zeden@user/zeden) (Client Quit)
[17:15:40] *** Quits: lazysundaydreams (~mistr@2001-1ae9-1e3-500-e9d-92ff-fec7-7069.ip6.tmcz.cz) (Quit: Konversation terminated!)
[17:16:19] *** Joins: foobaz212 (~foobaz212@cpc84737-aztw28-2-0-cust8.18-1.cable.virginm.net)
[17:16:36] *** Quits: easior (~easior@61.155.142.73) (Quit: Leaving)
[17:17:07] *** Joins: zeden (~zeden@user/zeden)
[17:18:17] *** Joins: p-i- (~Ohmu@node-ml1.pool-125-25.dynamic.totinternet.net)
[17:18:41] *** Quits: SirScott (~SirScott@c-67-176-100-163.hsd1.co.comcast.net) (Quit: Ping timeout (120 seconds))
[17:19:11] *** Joins: SirScott (~SirScott@c-67-176-100-163.hsd1.co.comcast.net)
[17:19:16] *** Quits: MarderIII (~MarderIII@2001:985:e889:1:d910:1ab:9333:f2ec) (Ping timeout: 244 seconds)
[17:19:18] *** Joins: rhax (~yannick@user/rhax)
[17:19:42] <merijn> hmm, what's the best way to test packages that are dependent on each other? i.e. suppose I have package foo that depends on package bar, how do I test that "pip install foo" will work. I can sdist the packages, but then I'd have to install manually install 'bar' before 'foo', right?
[17:20:27] <merijn> Can I tell pip to somehow prefer sdist tarballs in a local directory before anything on PyPI?
[17:21:08] <grym> merijn: why not wheels?
[17:21:36] <mgedmin> is bar on pypi?  then pip install dist/foo*.tar.gz ought to work
[17:22:00] <merijn> grym: That's for a later stage, some of these packages cannot be distributed as binaries for license reasons
[17:22:23] <merijn> mgedmin: Old versions of bar are, but I need to test against unreleased versions
[17:22:39] <mgedmin> if you want to test sdists only, you can pip install --no-index --find-links /path/to/all/your/sdists/ foo
[17:23:02] *** Quits: akaWolf (~akaWolf@akawolf.org) (Ping timeout: 258 seconds)
[17:23:03] *** Joins: RangerBobVA (~bmaddox@user/rangerbobva)
[17:23:13] <grym> i dont understand the license thing, but ok
[17:23:15] *** Quits: gusto (~Augustus@109.255.100.54) (Quit: Textual IRC Client: www.textualapp.com)
[17:23:16] <merijn> mgedmin: But that only works if I have sdists for *all* packages, right? Not just the two I happen to have
[17:23:28] <mgedmin> if foo or bar do depend on something from pypi, pip install --pre --find-links /path/ foo ought to prefer a local foo/bar sdist if it has a higher version number than available on PyPI, even if it's a prerelease
[17:23:39] *** Joins: gusto (~Augustus@109.255.100.54)
[17:23:41] <merijn> grym: Some of the python packages wrap C/C++/Fortran under non-open source licenses
[17:23:51] <merijn> grym: I can't just build and upload wheels of those to pypi
[17:24:07] <merijn> mgedmin: Cool, I'll look into that
[17:24:07] <mgedmin> if you're uploading binary wheels to pypi, then things might be more complicated -- I don't remember if pip prefers an older binary wheel to a newer sdist-only thing
[17:24:25] <mgedmin> ah, it does that only if you pass --prefer-binary
[17:24:31] <mgedmin> which is off by default, so no worries there
[17:25:22] *** Joins: staticvoidmaine (~staticvoi@cpe-184-153-179-95.maine.res.rr.com)
[17:28:38] *** Quits: stranac (~stranac@195.29.239.126) (Read error: Connection reset by peer)
[17:29:13] *** Quits: rhax (~yannick@user/rhax) (Quit: Leaving)
[17:29:32] <Samian> what if someone codes a package such that the code works only when the current working directory is the package's root folder, because of the way it uses relative paths to the root.    How do you run the code from another folder, or when you need another directory to be the current working directory?
[17:30:15] <bjs> Samian: python provides way for packages to import things in a relative way which is consistent (using e.g. `from . import blah`) and this way does not rely on "working directory" at all
[17:30:32] <bjs> Samian: if someone is doing something "bad",  then you may have to jump through hoops to make it work in a situation they did not expect
[17:30:46] <Samian> yeah that's the case I'm in I think
[17:30:51] *** Joins: akaWolf (~akaWolf@akawolf.org)
[17:30:52] *** Joins: pnoud (~pnoud@user/pnoud)
[17:31:00] *** Joins: boxelephant (~boxelepha@d192-24-108-69.col.wideopenwest.com)
[17:31:02] *** Quits: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br) (Quit: leaving)
[17:31:26] <bjs> Samian: the "i think" at the end doesn't give much confidence :)
[17:31:40] *** Joins: cthulchu_ (~Cthulchu@193.194.107.250)
[17:32:05] <mgedmin> you file a bug and tell them about importlib.resources, or at least pathlib.Path(__file__).parent
[17:32:34] *** Quits: staticvoidmaine (~staticvoi@cpe-184-153-179-95.maine.res.rr.com) (Quit: staticvoidmaine)
[17:32:56] <bjs> Samian: (note importlib.resources lets you access thing inside a package you can "import", without needing random paths)
[17:33:31] <bjs> yeah or using Path(__file__).parent at least, rather than relative to cwd
[17:33:36] *** Joins: staticvoidmaine (~staticvoi@cpe-184-153-179-95.maine.res.rr.com)
[17:33:53] *** Quits: trace (~trace@ip5b429953.dynamic.kabel-deutschland.de) (Quit: Leaving)
[17:34:03] <bjs> Samian: if the code really does have hard-coded paths relative to the current working dir then you don't have much choice but to run the code with the working directory it expects.
[17:34:55] *** Quits: cthulchu (~Cthulchu@193.194.107.250) (Ping timeout: 258 seconds)
[17:35:23] *** Joins: qunzhong_luxian (~qunzhong_@68.235.43.94)
[17:35:56] *** Quits: pnoud (~pnoud@user/pnoud) (Ping timeout: 252 seconds)
[17:35:56] *** Joins: Oddity (Oddity@S01065c76952069d4.no.shawcable.net)
[17:36:09] <Samian> and if I'm trying to import two packages that have hard-coded paths relative to the folder containing __init__.py,   then I'm screwed and need to fix each hard-coded path?
[17:36:26] *** Quits: seoul_man (~meh@user/seoul-man/x-5066766) (Remote host closed the connection)
[17:36:53] <bjs> Samian: tbh something that has hard-coded paths relative to the working directory is not something you'd find in a package that was intended to be imported at all
[17:37:05] <bjs> because basically, that'll never work when the code is imported
[17:37:13] *** Quits: nomic (~nomic@2a00:23c6:9910:1201:cdae:ea4b:93a4:1c59) (Quit: Leaving)
[17:37:15] <bjs> so yes you'll probably have to fix the code
[17:39:06] *** Joins: ndegruchy (~nathan@156.55.174.130)
[17:39:14] *** Joins: zebrag (~chris@user/zebrag)
[17:41:40] *** Parts: ndegruchy (~nathan@156.55.174.130) ()
[17:42:11] *** Quits: jw_ (~njw@58.182.164.99) (Ping timeout: 258 seconds)
[17:42:43] *** Joins: kosh (~kosh@user/kosh)
[17:43:00] *** Joins: Magician (deepy@user/deepy)
[17:43:43] *** Quits: ThiefMaster (thief@indico/developer/thiefmaster) (Ping timeout: 258 seconds)
[17:43:45] *** Quits: ali1234 (~al@user/ali1234) (Ping timeout: 244 seconds)
[17:44:00] *** Joins: drincruz_ (~drincruz@ool-44c748be.dyn.optonline.net)
[17:44:45] *** Quits: puadxtub (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Ping timeout: 244 seconds)
[17:44:46] *** Joins: Moosadee (~Moosadee@136.32.155.193)
[17:44:47] *** Quits: deepy (deepy@user/deepy) (Ping timeout: 244 seconds)
[17:45:06] *** Quits: Nahra (~user@static.161.95.99.88.clients.your-server.de) (Ping timeout: 252 seconds)
[17:45:16] *** Quits: cmc (~methos@gateway/tor-sasl/cmc) (Ping timeout: 244 seconds)
[17:45:16] *** Quits: fedenix (~fedenix@gateway/tor-sasl/fedenix) (Ping timeout: 244 seconds)
[17:45:22] <raxor2k> bjs: are you here
[17:45:28] *** Quits: varaindemian (~varaindem@86.124.78.162) (Ping timeout: 246 seconds)
[17:45:28] <Samian> bjs  one of the files created when building fbgemm_gpu contains the line:  torch.ops.load_library("fbgemm_gpu_py.so").  fbgemm_gpu_py.so is in the same folder,  when I import a package that contains this sourcode and that line runs, it tries to find fbgemm_gpu_py.so in the current working directly, which isn't the sourcecode's
[17:45:37] <Samian> bjs  that's where my question is coming from
[17:45:38] *** Quits: samhain (~samhain@user/samhain) (Ping timeout: 258 seconds)
[17:46:00] *** Joins: ThiefMaster (thief@indico/developer/thiefmaster)
[17:46:12] <bjs> Samian: that fbgemm_gpu/ directory you showed earlier didn't even really look like a Python package,  and there wasn't much indication that the author even intended you to import it
[17:46:38] <bjs> at least not in any generic "install and import" kind of way
[17:46:48] *** Joins: mefistofeles (~mefistofe@user/mefistofeles)
[17:47:10] <raxor2k> bjs: im doing a unit test on a function, how on earth doesnt those two function work? https://bpa.st/KA5A
[17:47:22] <bjs> raxor2k: why is this question directed at me specifically?
[17:47:34] *** Quits: foobaz212 (~foobaz212@cpc84737-aztw28-2-0-cust8.18-1.cable.virginm.net) (Ping timeout: 246 seconds)
[17:47:36] <raxor2k> it works if i comment out/remove everyting and only have "self.repetitions_finished += 1
[17:47:57] <raxor2k> bjs: you know the reason why it is directed
[17:48:00] <bjs> raxor2k: what is "it"?  and what counts as not working
[17:48:03] *** Joins: samhain (~samhain@user/samhain)
[17:48:04] <bjs> raxor2k: I don't?
[17:48:05] *** Joins: cmc (~methos@gateway/tor-sasl/cmc)
[17:49:25] <raxor2k> bjs: second file work but not the first file: https://bpa.st/MV6Q
[17:49:31] *** Joins: puadxtub (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[17:49:44] *** Joins: lukka5 (~lukka5@246-60-231-201.fibertel.com.ar)
[17:50:06] *** Joins: MarderIII (~MarderIII@2001:985:e889:1:d910:1ab:9333:f2ec)
[17:50:19] *** Joins: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk)
[17:50:24] *** Joins: ali1234 (~al@user/ali1234)
[17:50:27] <Samian> bjs  it's definitely custom stuff, supposed to work using torch.ops.load_library("fbgemm_gpu_py.so")
[17:50:36] <bjs> raxor2k: well, the first file has an extra `increase_repetition` function that the second doesn't have? and the first file seems to do more and sometimes call this increase_set() method.  What does "doesn't work" here mean?
[17:50:44] <Samian> thanks for the help. I wish I knew the resources to get more help, like books and articles.
[17:51:12] <raxor2k> bjs: doesnt work mean it doesnt increase the value of that variable by 1, obviously..
[17:51:14] *** Quits: sharksauce (sharksauce@user/sharksauce) (Quit: WeeChat 2.8)
[17:51:15] *** Quits: RavuAlHemio (~ondra@selene.ondrahosek.com) (Quit: ZNC 1.8.2 - https://znc.in)
[17:51:42] *** Joins: RavuAlHemio (~ondra@selene.ondrahosek.com)
[17:51:43] <bjs> raxor2k: that was very not obvious, and both increase_rep functions increase the value of `self.repetitions_finished` by 1.
[17:51:57] *** Joins: ELFrederich (~ELFrederi@siemens-industry-software-inc-216-196-155-202.static.fuse.net)
[17:52:10] *** Joins: reset (~reset@user/reset)
[17:52:18] *** Joins: jw_ (~njw@58.182.164.99)
[17:52:22] *** Quits: zebrag (~chris@user/zebrag) (Remote host closed the connection)
[17:52:33] <bjs> I mean the first file also has some other function which you've not explained and doesn't get used and doesn't appear in the second file,  and also the first file's increase_rep also does other stuff in this self.increase_set call which can do stuff
[17:52:44] *** Joins: fluffyballoon (~fluffybal@199.204.58.62)
[17:52:56] <bjs> I'm not sure what the question is? "Obviously" the two `increase_rep` methods are different, so I'm not surprised if you have tests that fail for one of them.
[17:53:13] <raxor2k> bjs: so this doesnt come as a surprise for you =
[17:53:14] <raxor2k> ?
[17:53:21] <bjs> raxor2k: what doesn't come as a surprise?
[17:53:55] <raxor2k> that the test fails ?
[17:54:13] *** Quits: MarderIII (~MarderIII@2001:985:e889:1:d910:1ab:9333:f2ec) (Ping timeout: 250 seconds)
[17:54:18] *** Joins: tm007 (uid287041@id-287041.highgate.irccloud.com)
[17:54:27] <bjs> raxor2k: what test?
[17:54:45] *** Quits: ELFrederich (~ELFrederi@siemens-industry-software-inc-216-196-155-202.static.fuse.net) (Remote host closed the connection)
[17:55:14] <bjs> raxor2k: I didn't see a test in your files, where was it?
[17:55:17] <raxor2k> unit test
[17:55:25] <bjs> where?
[17:55:52] <Yhg1s> raxor2k: You really need to learn to show all the relevant code. Not just snippets that you think might be relevant, and then ask about behaviour of *things you didn't show*.
[17:56:15] *** Joins: ELFrederich (~ELFrederi@siemens-industry-software-inc-216-196-155-202.static.fuse.net)
[17:56:16] <bjs> raxor2k: it's very hard to say, I cannot see the test, I don't know what you're testing for, I don't know what the rest of this class is, I don't know what this "increase_set" thing is
[17:56:21] *** Joins: jim87 (~gfurlan@2001:b07:5d37:f91e:bbde:5043:a034:b725)
[17:56:26] *** Quits: metah4ck3r (~meta@user/metah4ck3r) (Quit: WeeChat 3.2)
[17:56:33] <bjs> raxor2k: how am I supposed to know if the test I cannot see fails for the condition you haven't told me when you run this code that you haven't shown me
[17:56:58] *** Joins: zebrag (~chris@user/zebrag)
[17:57:54] *** Quits: jazzy (~jaziz@2600:380:c06b:9daa:64dc:a2b0:2f22:7e0f) (Ping timeout: 264 seconds)
[17:58:07] <bjs> raxor2k: all I can say with high confidence is that both files had a `increase_rep` function and both increase_rep functions increment the self.repetitions_finished variable.
[17:58:26] *** Joins: gitesh (uid423739@id-423739.charlton.irccloud.com)
[17:58:33] <bjs> What happens after they do that, I do not know. What your tests is doing, I do not know.
[17:59:18] *** Joins: foobaz212 (~foobaz212@cpc84737-aztw28-2-0-cust8.18-1.cable.virginm.net)
[18:00:08] *** Quits: zebrag (~chris@user/zebrag) (Read error: Connection reset by peer)
[18:00:42] *** Joins: trace (~trace@ip5b429953.dynamic.kabel-deutschland.de)
[18:01:22] *** Joins: diek (~diek@2804:14d:7681:82bd:e84f:20c9:c5ab:ee57)
[18:01:41] <raxor2k> bjs: im sorry, next time i post full test code
[18:01:44] *** Quits: Nalt (~Nalt|||@162-239-107-41.lightspeed.rcsntx.sbcglobal.net) (Ping timeout: 258 seconds)
[18:01:51] *** pr3d4t0r is now known as NikkiWade
[18:01:56] <bjs> raxor2k: well, forget "full" test code you just didn't paste *any* test code
[18:02:05] *** NikkiWade is now known as pr3d4k4t
[18:02:09] *** Joins: Nalt (~Nalt|||@162-239-107-41.lightspeed.rcsntx.sbcglobal.net)
[18:02:54] <very_sneaky_> raxor2k: I find it useful to try to replicate the problem i'm having with the simplest example that i can. it often helps isolate where the issue is coming from. Then when you need help, you've got a nice contained code snippet that's easy to read and makes it easy for others to help
[18:02:55] *** Quits: foobaz212 (~foobaz212@cpc84737-aztw28-2-0-cust8.18-1.cable.virginm.net) (Client Quit)
[18:04:41] *** Joins: zebrag (~chris@user/zebrag)
[18:07:07] *** Joins: Deneb (~johnch@148.82.159.143.dyn.plus.net)
[18:08:44] *** Joins: badsektor (~badsektor@user/badsektor)
[18:08:45] *** Joins: PdimH (~pdimh@user/pdimh)
[18:11:09] *** Joins: arakimo (~arakimo@user/arakimo)
[18:11:17] *** Quits: davidlowryduda (~davidlowr@73.61.8.65) (Read error: Connection reset by peer)
[18:11:59] <jim87> Hello! I've created a .ui (PySide6) file which has a QStatusBar. I've also created a QWidget which is being added to the status bar's layout. I've eventually showed the added widget (mywidget.show()), but no widget is shown. What am I doing wrong? Thanks - https://pastebin.com/t1dANsp0
[18:13:00] *** Quits: beshr (~beshr@78-72-246-187-no2006.tbcn.telia.com) (Read error: Connection reset by peer)
[18:13:59] *** Joins: seoul_man (~meh@user/seoul-man/x-5066766)
[18:14:22] *** Joins: Payam (~Payam@138.106.57.132)
[18:14:23] *** Joins: davidlowryduda (~davidlowr@73.61.8.36)
[18:15:10] *** Joins: rolo (~error@2a02:8108:8dc0:1cec:12:cd6a:bc9e:b8fc)
[18:15:32] *** Quits: cthulchu_ (~Cthulchu@193.194.107.250) (Ping timeout: 252 seconds)
[18:18:22] *** Quits: kwong (~kwong@user/kwong) (Quit: Going offline, see ya! (www.adiirc.com))
[18:18:55] *** Joins: jamea97 (~jamea77@200.68.140.9)
[18:19:00] <jamea97> hi all
[18:19:26] <jim87> hello
[18:20:19] <jamea97> print(self.root.ids.pedidos_add_input_rv.data)  print: [{'text': '545117001020.001906211707816'}]   before do:  self.root.ids.pedidos_add_input_rv.data.append({'text':texto})   where texto='545117001020.001906211707816'
[18:20:34] <jamea97> how to check if texto exists in the self.root.ids.pedidos_add_input_rv.data  (iwant not add duplicates)
[18:20:53] <Yhg1s> jamea97: you would have to iterate over the list and check each dictionary.
[18:21:20] <Yhg1s> (a better data structure might be a set of texto's, or a dict mapping from texto to dict.)
[18:21:20] <jim87> you might want to add each text to a list and then trick it via list(set(mylist))
[18:21:28] <jamea97> i try: if (texto not in self.root.ids.pedidos_add_input_rv.data):  self.root.ids.pedidos_add_input_rv.data.append({'text':texto})
[18:21:33] <jamea97> but always add...
[18:22:02] <jim87> data = list(set([d.text for d in self.root.ids.pedidos_add_input_rv.data])) <-- unique set of text fields
[18:22:03] <Yhg1s> jamea97: yes, that doesn't work, because it's not texto that's in the list. It's a dict containing a key with a value of texto that's in the list. You have to iterate over the list and check each dictionary.
[18:22:19] <Yhg1s> jim87: you probably meant d['text'] instead of d.text.
[18:22:19] *** Quits: staticvoidmaine (~staticvoi@cpe-184-153-179-95.maine.res.rr.com) (Quit: staticvoidmaine)
[18:22:26] <jim87> yea you're right Yhg1s
[18:22:32] *** Quits: drincruz_ (~drincruz@ool-44c748be.dyn.optonline.net) (Ping timeout: 252 seconds)
[18:23:00] <jamea97> data = list(set([d['text'] for d in self.root.ids.pedidos_add_input_rv.data]))
[18:23:19] *** Joins: staticvoidmaine (~staticvoi@cpe-184-153-179-95.maine.res.rr.com)
[18:23:23] *** Quits: staticvoidmaine (~staticvoi@cpe-184-153-179-95.maine.res.rr.com) (Remote host closed the connection)
[18:24:02] *** Quits: icy (~icy@user/icy) (Quit: ZNC 1.8.2 - https://znc.in)
[18:24:52] <themill> When using type annotations the function definition can get a bit out of control such that splitting it over multiple lines is needed. What's the indentation convention for that? is the first argument adjacent to the ( or on the next line?
[18:25:45] <jamea97> print(self.root.ids.pedidos_add_input_rv.data," ====python==== ", texto)   print: [{'text': '545117001020.001906211707816'}]  ====python====  545117001020.001906211707816  and print(data," ====python==== ") print ['545117001020.001906211707816']  ====python====
[18:25:56] <jamea97> now hot to check if texto is in data ?
[18:26:00] <jamea97> *how
[18:26:03] *** Joins: icy (~icy@user/icy)
[18:26:36] <SnoopJ> themill, PEP 8's prescription forbids the latter, I think.
[18:26:38] <jim87> jamea97: using the previous example, if texto in data
[18:27:02] <Yhg1s> jamea97: again, you have a list of dicts. You have to iterate over the list and check each dict. Or, *don't have a list of dicts*.
[18:27:06] <grym> themill: "whatever black does" :)
[18:27:14] <SnoopJ> black +1
[18:27:50] <grym> themill: so much so that i can't tell you what's right any more because i've completely stopped thinking about it
[18:28:34] *** Joins: jwodder (~jwodder@2601:89:c600:f150:7ca0:8e16:7536:e27f)
[18:28:56] <jim87> themill: PEP8 standard wants def whatever(arg1, arg2, <new line> etc. You can trick it by the 80 characters per line though :D (def myveryVeryVeryLongFunctionName :D)
[18:29:02] <SnoopJ> oh, maybe it's not forbidden if you vertically align the lines
[18:29:21] *** Quits: Tempesta (Tempesta@user/tempesta) (Quit: AdiIRC is updating to v4.1 Beta Build (2021/06/23 UTC) 64 Bit)
[18:29:35] *** Joins: Tempesta (Tempesta@user/tempesta)
[18:29:47] <jim87> Thing I don't like about PEP8 is that it will then indent the rest of the args at the same column of the parenthesis opening, wasting so much horizontal space
[18:29:50] <jamea97> Yhg1s ok, thanks
[18:29:50] <jinsun> I just write the entire def in one line and let black handle the wrapping
[18:30:00] *** Quits: diek (~diek@2804:14d:7681:82bd:e84f:20c9:c5ab:ee57) (Remote host closed the connection)
[18:30:13] *** Joins: diek (~diek@2804:14d:7681:82bd:e84f:20c9:c5ab:ee57)
[18:30:43] <jim87> jinsun: autopep8 for me :D but yes, in the end it's just a matter of syntax linting
[18:30:57] <jwodder> When defining a custom `__eq__(self, other)` and checking that `other` is a value of the class, is it better/more Pythonic to do `if type(self) is type(other)` or `if isinstance(other, ClassName)`?
[18:31:22] *** Quits: diek (~diek@2804:14d:7681:82bd:e84f:20c9:c5ab:ee57) (Remote host closed the connection)
[18:31:33] <SnoopJ> jwodder, the latter (the former misses subclasses and is abusing `is` besides)
[18:32:04] <jwodder> SnoopJ: Is missing subclasses really that bad?  Arguably, a value of type x shouldn't be equal to a value of a subclass.
[18:32:27] <SnoopJ> jwodder, if you want to explicitly require "this class and only this class" but this is pretty darned rare
[18:32:36] <jim87> SnoopJ: could a subclass be "equal" to a parent one?
[18:32:48] <SnoopJ> jim87, sure, this is why True == 1
[18:32:54] <SnoopJ> (bool is a subclass of int)
[18:32:54] *** Joins: xrogaan (~xrogaan@user/xrogaan)
[18:32:58] <jim87> dang :D thanks
[18:33:06] <bjs> SnoopJ: sadly :(
[18:33:12] <SnoopJ> bjs, don't shoot the messenger!
[18:33:18] <SnoopJ> (but yes)
[18:33:28] *** Joins: diek (~diek@2804:14d:7681:82bd:e84f:20c9:c5ab:ee57)
[18:33:33] *** Quits: i0e (~is0ke3@user/is0ke3) (Ping timeout: 258 seconds)
[18:33:51] *** Joins: aniruddha (~aniruddha@103.242.197.215)
[18:34:28] <grym> speaking of subclassing, https://hynek.me/articles/python-subclassing-redux/
[18:34:30] *** Joins: wintrmute (~wintrmute@bit.pappanaka.com)
[18:34:35] *** Joins: i0e (~is0ke3@user/is0ke3)
[18:34:41] *** Quits: wintrmute (~wintrmute@bit.pappanaka.com) (Client Quit)
[18:35:07] <bjs> jim87: I'd say the `if not isinstance(other, ThisClass): return NotImplemented` pattern is very common
[18:35:19] <bjs> but might not always be the most appropriate depending on the type I guess.
[18:35:35] *** Joins: wintrmute (~wintrmute@bit.pappanaka.com)
[18:35:55] *** Quits: rajkosto (~rajkosto@cable-178-149-127-189.dynamic.sbb.rs) (Ping timeout: 265 seconds)
[18:36:09] <CrtxReavr> grym, this might be of interest to you: https://tech.slashdot.org/story/21/06/22/217251/open-source-amd-fidelityfx-super-resolution-impresses-in-pc-game-tests
[18:36:29] *** Quits: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk) (Quit: Leaving)
[18:36:37] *** Quits: alguien (~alguien@user/alguien) (Ping timeout: 258 seconds)
[18:36:42] *** Quits: dhellmann (~dhellmann@097-081-099-073.res.spectrum.com) (Ping timeout: 240 seconds)
[18:36:55] <grym> CrtxReavr: maybe ssbr_ ; i use GPUs for significantly more boring reasons ;)
[18:37:21] <CrtxReavr> grym, that's covered too.
[18:37:57] <jim87> any experience with PySide or PyQt? I'm not able to show a widget within a QStatusBar, which seems to be a stupid bug by my side, still I don't see it: https://pastebin.com/t1dANsp0
[18:38:00] *** Quits: diek (~diek@2804:14d:7681:82bd:e84f:20c9:c5ab:ee57) (Ping timeout: 244 seconds)
[18:38:03] <themill> SnoopJ, grym, jim87: thanks, I guess I should look at some tool for this ;)
[18:38:16] <grym> themill: and then never care again.
[18:39:05] <jim87> themill: which editor / IDE are you using at the moment?
[18:40:10] *** Joins: vladoski (~vladoski@93-36-221-58.ip62.fastwebnet.it)
[18:40:20] <themill> normally kate, sometimes vim, sometimes jupyter. it varies rather
[18:40:28] <vladoski> what's the best way to bulk insert using sqlalchemy core?
[18:40:40] *** Quits: Jigsy (~Jigsy@user/jigsy) (Remote host closed the connection)
[18:40:50] *** Quits: jamea97 (~jamea77@200.68.140.9) (Ping timeout: 252 seconds)
[18:41:04] *** Joins: Jigsy (~Jigsy@user/jigsy)
[18:41:14] *** Quits: imp (~imp@186.205.11.214) (Ping timeout: 265 seconds)
[18:41:18] <SnoopJ> themill, fiddling with tooling can consume an infinite amount of time in general, but choosing a code formatter and using it can make a lot of "hmm, how should this look" stuff fade away. Black is one extreme, with almost no configuration options
[18:41:38] <SnoopJ> But many people (👋) see "almost no configuration" as its main feature
[18:41:50] *** Quits: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com) (Quit: WeeChat 3.0.1)
[18:41:55] <themill> ack
[18:41:55] <jim87> themill: you can use python -m autopep8 <filename>, but there might be a plugin for vim
[18:42:08] <CrtxReavr> black += 1
[18:42:44] *** Joins: NeoCore (~neocore@45.152.181.148)
[18:42:46] *** Quits: pankid (~quassel@pankid.club) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[18:42:57] <CrtxReavr> For a long time, black had literally zero configuration.
[18:43:20] <CrtxReavr> I wouldn't use it, until it added some minor flexibility.
[18:43:59] <grym> it's got ~3 dials now.  "ignore these files", "line length", and "normalise string quotes or not".
[18:44:03] *** Joins: pan (~quassel@pankid.club)
[18:44:10] <SnoopJ> there will definitely be plugins that could do it, or you can do whatever you want on save with `autocmd BufWritePre` (consult :help if you're curious)
[18:44:12] *** Quits: mozgalom_ (~mozgalom@IPnet-gw.157.157.97.111.simnet.is) (Remote host closed the connection)
[18:44:35] <themill> interestingly, black moves the first argument for the function onto the next line
[18:44:41] * SnoopJ prefers to use https://pre-commit.com/ which yells at him upon commit if something is amiss
[18:44:45] <CrtxReavr> alias black='black -l 79 -S'
[18:45:17] *** Joins: betelgeuse (~john2gb@94-225-47-8.access.telenet.be)
[18:45:19] <CrtxReavr> When I'm committing, that's the last time I want something kicked back.
[18:45:27] <CrtxReavr> Though I seldom get the choice.
[18:46:17] *** Joins: clf59 (~clf59@user/clf59)
[18:46:22] <jim87> CrtxReavr: have you tried yapf yet? I find it quite configurable
[18:46:37] <jinsun> I still use it with the defaults, I like the 88 length limit, I always hated earlier that I "lose" 8 characters when I am inside a def inside a class
[18:46:49] <CrtxReavr> I'm honestly very happy with black, using the two tweaks I pasted above
[18:46:59] *** Quits: jwodder (~jwodder@2601:89:c600:f150:7ca0:8e16:7536:e27f) (Quit: My work here is done.)
[18:46:59] <grym> jim87: yapf is _too_ configurable
[18:47:01] *** Joins: dhellmann (~dhellmann@097-081-099-073.res.spectrum.com)
[18:47:03] <grym> to the point of nondeterminism
[18:47:25] <jim87> grym: yup. In one big project we've got yapf, but for new ones I just stick with autopep8
[18:47:30] *** Quits: rolo (~error@2a02:8108:8dc0:1cec:12:cd6a:bc9e:b8fc) (Ping timeout: 250 seconds)
[18:47:34] *** Joins: feriman (~feriman@188.163.113.127)
[18:47:34] <CrtxReavr> I'm a strong believer in 79 columns and using single quotes as the default for strings, wheras black wants to use double-quotes as the default.
[18:47:50] <CrtxReavr> (sinqle quotes matches Python's REPRs for strings.)
[18:47:55] <SnoopJ> I keep 72, 79 highlighted in my editor and use 120 for actual formatting
[18:48:27] <jim87> I think that 120 is a sweet spot. I wish PEP8 would update to that
[18:48:39] *** Quits: pycode1 (~pycode@2001:b07:5d28:551:cc51:6a87:699f:ab8a) (Ping timeout: 244 seconds)
[18:48:46] *** Joins: Bronto22 (~mennoh@84-86-247-193.fixed.kpn.net)
[18:48:46] *** Joins: qlixed (~qlixed@181.44.129.13)
[18:48:49] <CrtxReavr> I stick to 79, 'cause I've had to hack scripts on a servr console in freezing cold datacenters too often.
[18:49:04] <grym> jim87: pep8 is more like a guideline, really
[18:49:18] <SnoopJ> jim87, PEP 8 is just a recommendation, and there are good (if not slightly anachronistic) reasons to recommend 80
[18:49:31] <grym> "Break any of these rules sooner than say anything outright barbarous." might as well be in the Zen
[18:49:38] <grym> (and should be, imo)
[18:49:47] <jim87> SnoopJ: yep when 800x600 was the standard, I suppose
[18:50:03] *** Joins: foozle (~foozle@2001-b011-c001-54d9-5942-3c17-4974-853d.dynamic-ip6.hinet.net)
[18:50:14] <grym> jim87: "why 80" is one of those murky depths of time questions that everyone thinks they have the neat pat answer to :P
[18:50:18] <SnoopJ> jim87, 80 predates graphics mode entirely
[18:50:22] *** Quits: jw_ (~njw@58.182.164.99) (Ping timeout: 252 seconds)
[18:50:29] <CrtxReavr> Though. . . black enforces 88 by default. . . they reason after extensive code analysis that 88 is the magic number that vastly reduces the number of arbitrary, artificial line-wraps in python code.
[18:50:43] <SnoopJ> I'm not entirely sure whence the number, it traces itself back to physical cards at least
[18:50:46] <grym> right; black optimizes for diff stability
[18:51:04] <SnoopJ> but PEP 8 itself encourages users to just pick something and be consistent :)
[18:51:22] <CrtxReavr> (though defaults to 79)
[18:51:27] *** Quits: clf59 (~clf59@user/clf59) (Quit: Textual IRC Client: www.textualapp.com)
[18:51:34] *** Joins: drincruz_ (~drincruz@ool-44c748be.dyn.optonline.net)
[18:51:38] <CrtxReavr> Honestly, that's the only good thing about PEP8.
[18:52:18] *** Quits: betelgeuse (~john2gb@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[18:52:19] <SnoopJ> well, it doesn't really encourage users to flex on this, but it does elsewhere in the document and I'm no literalist
[18:52:33] <jim87> I understand that the more you write horizontally, the worse (preferring the vertical space), but 88 is IMHO too much strictly - but it's a pity not to have the "PEP8 comlpiant" badge on the github's page ahahah :D
[18:52:42] <meatballs> vladoski: I covered bulk loading in a tutorial I gave at PyCon UK a few years back: https://www.owencampbell.me.uk/sql_python_tutorial/chapters/12/
[18:53:02] <SnoopJ> jim87, if you haven't seen this talk before, it's very relevant to this conversation and good besides: https://www.youtube.com/watch?v=wf-BqAjZb8M
[18:53:20] <jim87> thank you SnoopJ :)
[18:53:40] <SnoopJ> speaking of PEP 8 though, I wonder whence "you can increase max line length, but only to 99" comes from. I guess 100 is a nice round number if you are a decimal fanatic? :)
[18:53:43] *** Quits: camel_case (~iphone@user/iphone) (Quit: WeeChat 3.0.1)
[18:53:52] <grym> jim87: 88 _is_ pep8 compliant, though :)
[18:54:04] *** Joins: betelgeuse (~john2gb@94-225-47-8.access.telenet.be)
[18:54:12] <dukwon> nice number - 1 is due to some editors adding an extra character?
[18:54:38] <SnoopJ> dukwon, I think it's an abundance of caution, probably from that card era where you'd reserve one (probably for a prefixing 'C')
[18:54:40] <CrtxReavr> Actually. . . does PEP8 talk actual column width, or is that just a flake8 thing?
[18:54:42] *** Quits: pagnol (~user@014198154145.ctinets.com) (Remote host closed the connection)
[18:54:54] <SnoopJ> yes https://www.python.org/dev/peps/pep-0008/#maximum-line-length
[18:55:05] *** Quits: ELFrederich (~ELFrederi@siemens-industry-software-inc-216-196-155-202.static.fuse.net) (Remote host closed the connection)
[18:55:08] <jim87> SnoopJ: according to Pytagorians, pair numbers allow infinite to pass through, and thus are imperfect numbers :D
[18:55:37] <SnoopJ> jim87, not sure if that's a cheeky name for Pythonistas or the ancient Greek cult, but I guess there's not all that much difference :)
[18:55:47] <SnoopJ> especially on the subject of code format
[18:55:48] <jim87> "comments and docstrings are still wrapped at 72 characters"
[18:55:59] *** Joins: ELFrederich (~ELFrederi@siemens-industry-software-inc-216-196-155-202.static.fuse.net)
[18:56:05] <jim87> comments are imperfect lol
[18:56:13] *** Quits: drincruz_ (~drincruz@ool-44c748be.dyn.optonline.net) (Ping timeout: 265 seconds)
[18:56:36] *** Quits: raxor2k (~raxor2k@78.158.235.125) (Ping timeout: 252 seconds)
[18:56:45] <SnoopJ> 72 might have been inspired by the low end of card width? As grym alluded to, the history is really long and complicated
[18:56:56] *** Quits: leduyquang753 (~leduyquan@user/leduyquang753) (Ping timeout: 258 seconds)
[18:57:03] <dukwon> my monitor x font combination is 480 characters across, i set my max line length to 120
[18:57:12] <SnoopJ> which is maybe a side effect of word sizes being super wacky once upon a time
[18:57:29] <grym> taken to (inane email forward chains from 1997 levels of ) extremes, "why 80" converges on hoary old just-so stories about why rocket booster dimensions are because of roman chariots
[18:57:33] <grym> which is just absurd
[18:57:40] <grym> so ... the truth's somewhere in the middle, and probably fuzzier than we'd like
[18:57:44] <SnoopJ> perfect fit for computing, then
[18:58:08] <CrtxReavr> I think railroad track width is an intermediary requirement.
[18:58:40] *** Joins: neilthereildeil (~neilthere@204.115.183.4)
[18:58:52] <grym> CrtxReavr: and it just falls apart completely if you look into it even slightly.  It's an adorable story, it was for sure used on us in engineering undergrad, it's just kind of not meant to be factural
[18:58:56] <grym> factual, either
[18:59:12] *** Quits: betelgeuse (~john2gb@94-225-47-8.access.telenet.be) (Ping timeout: 250 seconds)
[18:59:34] *** Joins: jw_ (~njw@58.182.164.99)
[18:59:39] <SnoopJ> "For each of the twelve rows of the card, 72 of the 80 columns would be read into two 36-bit words; a control panel [on the IBM 701/704] was used to select the 72 columns to be read."  neat and makes sense (36*2 = 72, so yea, tied to word size I guess)
[19:01:12] * themill starts feeling protective of his nicely formatted fortran
[19:01:32] *** Joins: joakocero (~jochem@190.210.65.46)
[19:01:48] <CrtxReavr> I'm on this call were all but one guy is in US timezones. . . but the guy who isn't is in india, and on a seriously shit connection.
[19:01:55] *** Quits: twobitsprite (~twobitspr@107.13.51.62) (Ping timeout: 258 seconds)
[19:02:08] *** Joins: argoneus (~argoneus@argoneus.com)
[19:02:13] <grym> CrtxReavr: now fully off topic
[19:02:16] *** Joins: drincruz_ (~drincruz@ool-44c748be.dyn.optonline.net)
[19:02:27] <grym> press F to pay respects, but you're muted
[19:02:39] <CrtxReavr> 'Cept that my role on the call is related to python.  >=]
[19:02:56] *** Joins: waynew (~waynew@user/waynew)
[19:03:18] *** Quits: DnzAtWrk (~DnzAtWrk@mobile-access-6df0bd-162.dhcp.inet.fi) (Read error: Connection reset by peer)
[19:03:30] *** Quits: badsektor (~badsektor@user/badsektor) (Remote host closed the connection)
[19:03:36] *** Joins: twobitsprite (~twobitspr@66.115.166.150)
[19:04:50] *** Quits: jw_ (~njw@58.182.164.99) (Ping timeout: 250 seconds)
[19:05:08] <argoneus> hi, I have this subprocess code where I want to feed a program data in the same format as "cmd < file.txt", but the only output I get from the program is that there was no input, could anyone help explain what's going on please? https://bpa.st/U6GA
[19:05:12] *** Joins: rolo (~error@2a02:8108:8dc0:1cec:12:cd6a:bc9e:b8fc)
[19:05:13] <argoneus> it's like the stdin isn't coming through
[19:05:44] *** Joins: diek (~diek@2804:14d:7681:82bd:e84f:20c9:c5ab:ee57)
[19:06:16] <Wulf> argoneus: looking for input=data?
[19:06:25] *** Quits: cman (~Cody@2603:9000:d104:8465:9579:86cd:8e3b:f228) (Ping timeout: 244 seconds)
[19:06:40] <argoneus> oh, does that work too? from the doc I thought it has to be a file descriptor or like PIPE and such
[19:07:26] <argoneus> that's giving me "str object has no attribute fileno"
[19:07:45] *** Joins: cman (~Cody@2603-9000-d104-8465-50c2-cbf3-9f6e-3906.inf6.spectrum.com)
[19:07:58] <Wulf> argoneus: you can use a file descriptor. But then you should rewind it.
[19:08:02] <Wulf> argoneus: input, not stdin!
[19:08:39] <argoneus> oh yeah, sorry, basically I'd like to feed the data as stdin to the program
[19:08:49] <argoneus> but it's very long and if I feed it directly I get a shell exception
[19:09:04] <argoneus> (due to the length)
[19:09:07] *** Quits: doev (~doev@82.115.100.62) (Ping timeout: 246 seconds)
[19:09:36] *** Quits: rolo (~error@2a02:8108:8dc0:1cec:12:cd6a:bc9e:b8fc) (Ping timeout: 250 seconds)
[19:10:11] <argoneus> oh, tmp.seek(0) did the trick, thanks Wulf!
[19:11:02] *** Joins: rolo (~error@2a02:8108:8dc0:1cec:12:cd6a:bc9e:b8fc)
[19:11:24] *** Joins: pycode1 (~pycode@2001:b07:5d28:551:b13b:5bb7:da87:468b)
[19:11:55] *** Joins: cthulchu_ (~Cthulchu@193.194.107.250)
[19:12:12] *** Quits: diek (~diek@2804:14d:7681:82bd:e84f:20c9:c5ab:ee57) (Ping timeout: 250 seconds)
[19:12:20] *** Quits: waynew (~waynew@user/waynew) (Read error: Connection reset by peer)
[19:12:31] *** Joins: waynew (~waynew@user/waynew)
[19:12:39] *** Quits: waynew (~waynew@user/waynew) (Client Quit)
[19:13:02] *** Quits: dhellmann (~dhellmann@097-081-099-073.res.spectrum.com) (Ping timeout: 258 seconds)
[19:13:14] <Wulf> argoneus: https://ideone.com/tkQflW
[19:13:30] *** Quits: Samian (~textual@2620:10d:c090:400::5:8dbd) (Ping timeout: 240 seconds)
[19:13:40] <argoneus> I was using run before, but I need to capture output real-time unfortunately...
[19:13:50] *** Joins: mozgalom (~mozgalom@IPnet-gw.157.157.97.111.simnet.is)
[19:13:54] <argoneus> because it runs very long sql that takes like an hour and people want to be able to monitor it
[19:14:00] *** mozgalom is now known as bomb-on
[19:14:10] <Wulf> ok :)
[19:15:02] <jim87> any experience with PySide or PyQt? I'm not able to show a widget within a QStatusBar, which seems to be a stupid bug by my side, still I don't see it: https://pastebin.com/t1dANsp0
[19:15:44] *** Joins: doev (~doev@82.115.100.62)
[19:16:04] *** Joins: jw_ (~njw@58.182.164.99)
[19:16:07] *** Joins: Croves (~Croves@2804:14c:578b:9102:9cad:79ca:4279:ac08)
[19:16:14] *** Joins: _ELFrederich (~ELFrederi@siemens-industry-software-inc-216-196-155-202.static.fuse.net)
[19:16:42] *** Quits: qunzhong_luxian (~qunzhong_@68.235.43.94) (Quit: Textual IRC Client: www.textualapp.com)
[19:16:58] *** Quits: ELFrederich (~ELFrederi@siemens-industry-software-inc-216-196-155-202.static.fuse.net) (Ping timeout: 250 seconds)
[19:17:10] *** Quits: _ELFrederich (~ELFrederi@siemens-industry-software-inc-216-196-155-202.static.fuse.net) (Remote host closed the connection)
[19:17:54] <Croves> What's your opinion on installing a package to do only one thing? For example, just saw someone on LinkedIn recommending a lib called validate_email to (duh!) validate emails, and I saw a lot of people cheering this but IMO its easier to use Regex
[19:17:58] *** Quits: tims (~tims@193-82-247-42.tpgi.com.au) (Ping timeout: 265 seconds)
[19:18:18] *** Joins: Sheilong (uid293653@id-293653.charlton.irccloud.com)
[19:18:23] *** Joins: ELFrederich (~ELFrederi@siemens-industry-software-inc-216-196-155-202.static.fuse.net)
[19:18:29] *** Joins: dhellmann (~dhellmann@097-081-099-073.res.spectrum.com)
[19:19:08] *** Quits: Jigsy (~Jigsy@user/jigsy) (Quit: bbiafm.)
[19:20:14] <jim87> Croves: forget about email regex - it's fine, but it's very, very difficult to have a _universal_ email checker
[19:20:17] <Wulf> Croves: where did you get a useful regex from?
[19:20:42] <Croves> Wulf https://emailregex.com/
[19:20:59] *** Joins: badsektor (~badsektor@user/badsektor)
[19:21:17] *** Quits: mesaboogie (mesaboogie@user/mesaboogie) (Quit: leaving)
[19:21:31] *** Joins: betelgeuse (~john2gb@94-225-47-8.access.telenet.be)
[19:21:31] <Wulf> Croves: okay, then use this instead of a thirdparty package.
[19:22:04] <SnoopJ> Bearing in mind that RFC 5322 is nowhere near a universal standard and this regex *will* break on someone's valid email address
[19:22:05] <Wulf> Croves: sometimes I do use small packages, e.g. https://pypi.org/project/lazy/
[19:22:23] <Croves> Wulf I'm saying that I prefer to use this Regex expression rather than a third party lib - I was trying to engage with the room, asking what is your opinion on such small packages like the one I mentioned
[19:22:23] <SnoopJ> 99.99% is frankly just made-up
[19:22:25] <argoneus> I generally split my projects between "uses 3rd party packages" and "doesn't use small packages" because in some environments it's a pain to get pip working (vpns and whatnot)
[19:22:31] <argoneus> and if it does use 3rd party packages - what's one more
[19:22:37] <bjs> Croves: small packages that do 1 thing and do it well are good.
[19:22:51] *** Quits: mickey (~user@user/mickey) (Quit: Ping timeout (120 seconds))
[19:23:01] <SnoopJ> Croves, packages are tools, it's a bit like asking if you prefer to own a torque wrench or just guesstimate pressure: both are "valid," but there are reasons you might do it either way
[19:23:08] *** Joins: mickey (~user@user/mickey)
[19:23:19] *** Quits: SparkleKraken (~SparkleKr@97e407ec.skybroadband.com) (Quit: Leaving)
[19:23:49] *** Quits: doev (~doev@82.115.100.62) (Ping timeout: 246 seconds)
[19:25:01] <bjs> Croves: checking if the email matches some regex might be good,  but maybe the library does more. Maybe it understands email better, maybe it actually understands the structure of an email address and how it gets broken down, maybe it actually checks that there is a recipient on the other end (or at least a mail server...)
[19:25:29] *** Quits: mIk3_08 (~Thunderbi@user/mik3-08/x-2852566) (Quit: mIk3_08)
[19:26:02] <bjs> Croves: or maybe the library is bad, and the regex is better. It's hard to know.  Obviously in one case I'd say it's good, and in the other case I'd say it's bad.  The fact it's a library and not copy/pasting code doesn't really affect whether it's good or bad,  I just know I'd not write a check like this myself, I'd someone else's code (however it comes).
[19:26:40] *** Quits: lbracher (~lbr@94.105.104.226.dyn.edpnet.net) (Ping timeout: 265 seconds)
[19:26:46] *** Quits: colddusk (~colddusk@bl10-31-130.dsl.telepac.pt) ()
[19:27:05] *** Quits: rolo (~error@2a02:8108:8dc0:1cec:12:cd6a:bc9e:b8fc) (Ping timeout: 244 seconds)
[19:27:43] *** Joins: sandeepk (~sandeepk@223.130.30.101)
[19:28:38] *** Quits: betelgeuse (~john2gb@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[19:30:15] *** Joins: diek (~diek@187.36.4.113)
[19:30:24] *** Joins: betelgeuse (~john2gb@94-225-47-8.access.telenet.be)
[19:30:37] *** Joins: gmcastil (~gmcastil@50-206-38-110-static.hfc.comcastbusiness.net)
[19:30:49] *** Joins: MarderIII (~MarderIII@2001:985:e889:1:dc25:2b5d:9b33:3d4b)
[19:31:15] *** Quits: diek (~diek@187.36.4.113) (Remote host closed the connection)
[19:31:42] *** Joins: pnoud (~pnoud@user/pnoud)
[19:32:20] <Wulf> https://xkcd.com/2347/
[19:33:02] *** Quits: betelgeuse (~john2gb@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[19:33:26] *** Quits: pycode1 (~pycode@2001:b07:5d28:551:b13b:5bb7:da87:468b) (Ping timeout: 250 seconds)
[19:33:29] *** Joins: diek (~diek@2804:14d:7681:82bd:e84f:20c9:c5ab:ee57)
[19:33:42] *** Quits: blue_rog (~blue_rog@2400:6180:0:d0::89:1) (Quit: WeeChat 1.9.1)
[19:34:48] *** Joins: betelgeuse (~john2gb@94-225-47-8.access.telenet.be)
[19:35:08] *** Joins: Jigsy (~Jigsy@user/jigsy)
[19:35:34] *** Quits: gmcastil (~gmcastil@50-206-38-110-static.hfc.comcastbusiness.net) (Ping timeout: 268 seconds)
[19:35:34] <neilthereildeil> hey guys. i have a highly multiprocessed python application using multiprocessing.BoundedSemaphore. how is multiprocessing.BoundedSemaphore different than threading.BoundedSemaphore?
[19:36:48] *** Quits: pnoud (~pnoud@user/pnoud) (Ping timeout: 258 seconds)
[19:37:21] *** Quits: betelgeuse (~john2gb@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[19:37:24] *** Joins: mesaboogie (mesaboogie@user/mesaboogie)
[19:37:39] *** Joins: kickingvegas (~cchoi@c-24-5-40-20.hsd1.ca.comcast.net)
[19:37:56] *** Quits: normic (~normic@p57bcd98d.dip0.t-ipconnect.de) (Ping timeout: 244 seconds)
[19:38:44] *** Quits: diek (~diek@2804:14d:7681:82bd:e84f:20c9:c5ab:ee57) (Ping timeout: 268 seconds)
[19:39:07] *** Joins: betelgeuse (~john2gb@94-225-47-8.access.telenet.be)
[19:39:28] <neilthereildeil> i imagine the multiprocess version has a different implementation in that it uses IPC?
[19:39:49] *** Joins: Auron (~Auron956@user/auron)
[19:40:14] *** Joins: _ELFrederich (~ELFrederi@siemens-industry-software-inc-216-196-155-202.static.fuse.net)
[19:40:18] *** Quits: mesaboogie (mesaboogie@user/mesaboogie) (Remote host closed the connection)
[19:41:01] *** Quits: ELFrederich (~ELFrederi@siemens-industry-software-inc-216-196-155-202.static.fuse.net) (Remote host closed the connection)
[19:41:44] *** Quits: betelgeuse (~john2gb@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[19:43:30] *** Joins: betelgeuse (~john2gb@94-225-47-8.access.telenet.be)
[19:44:38] <dreamer> hmm, how can I add an `extra-index-url` for a dependency that is set in the `install_requires`? we want to be able to specify our private gitlab pypi for one of our dependencies, but I can't find how (I read that `dependency_links` is no longer there)
[19:44:57] <dreamer> or can `install_requires` also use this?
[19:46:08] *** Quits: betelgeuse (~john2gb@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[19:46:58] *** Quits: feriman (~feriman@188.163.113.127) (Ping timeout: 265 seconds)
[19:47:54] *** Joins: betelgeuse (~john2gb@94-225-47-8.access.telenet.be)
[19:48:13] <habnabit_> dreamer, no. you can't do this from inside setup.py or setup.cfg at all
[19:48:32] *** Joins: slowButPresent (~slowButPr@user/slowbutpresent)
[19:48:47] <habnabit_> dreamer, you can set up a pip config file to include extra-index-url, but that's something that the user running pip has to do
[19:49:03] <dreamer> hmz
[19:49:09] <dreamer> that's .. annoying :)
[19:49:17] <grym> dreamer: if you have something internal that acts like pypi, pip config, perhaps?
[19:49:28] <dreamer> grym: hm?
[19:49:38] <SnoopJ> I think he means like devpi
[19:49:41] <habnabit_> dreamer, how so? if this is for internal devs, it's just another config file they have to install for internal tooling
[19:49:42] <grym> yes
[19:49:57] <dreamer> habnabit_: it is for both our devs and for our CI
[19:50:03] <grym> dreamer: are you wanting to like `pip install git+http://my-gitlab.corp.com/ ... `
[19:50:04] <habnabit_> dreamer, sure. easy to install on CI too
[19:50:05] <dreamer> for the CI this is really annoying
[19:50:08] <habnabit_> dreamer, why?
[19:50:10] <dreamer> grym: no
[19:50:10] <grym> or do you have an internal pypi mirror
[19:50:20] <dreamer> grym: I literally said gitlab
[19:50:28] <habnabit_> dreamer, you can have a global pip config file, user-local, or per-venv
[19:50:28] <dreamer> and it's not a mirror
[19:50:33] *** Quits: betelgeuse (~john2gb@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[19:50:36] <dreamer> it's an extra index
[19:50:39] <grym> dreamer: you literally said "private gitlab pypi", which is (obviously) ambiguous
[19:50:42] <SnoopJ> you can set PIP_CONFIG_FILE in the environment too
[19:50:45] <dreamer> habnabit_: it's annoying to have to set up
[19:50:53] <dreamer> grym: it is not
[19:50:57] *** Joins: Gurkenglas (~Gurkengla@dslb-002-203-144-156.002.203.pools.vodafone-ip.de)
[19:51:06] *** Quits: flyback (~flyback@2601:540:8201:1e60:306e:a032:4148:da11) (Quit: Leaving)
[19:51:11] <habnabit_> dreamer, i'm just not sure what part is annoying about that
[19:51:19] <Gurkenglas> Why can't I do einsum("a,a->aa",x,y)?
[19:51:19] <grym> dreamer: and yet here we are disagreeing on what you said...
[19:51:25] <bjs> neilthereildeil: yes something like that
[19:51:33] <habnabit_> Gurkenglas, who says you can't?
[19:51:33] <dreamer> SnoopJ: can it simply be an env-var? I don't really want to create separate config files for all our repos
[19:51:40] <dreamer> grym: you're the only one :)
[19:51:46] <dreamer> grym: it's a gitlab pypi, and it's private.
[19:51:52] <grym> you can put it in /etc/pip.conf
[19:51:57] <habnabit_> dreamer, huh? why would you need to create config files per-repo? you only need one for the CI box or CI user
[19:52:11] <grym> dreamer: "gitlab pypi" has a meaning, perhaps, that is not universally understood.  certainly i think it's two distinct concepts
[19:52:17] *** Joins: betelgeuse (~john2gb@94-225-47-8.access.telenet.be)
[19:52:26] <grym> one's a forge, the other's a package repo
[19:52:31] <habnabit_> does gitlab have its own pypi-shaped API?
[19:52:32] <SnoopJ> dreamer, no, you either need --index-url/--extra-index-url in the invocation or the equivalent in pip.conf.
[19:52:45] <dreamer> grym: ok, I don't know what you mean with "a forge" I mean that we use a pypi hosted at gitlab using our private orga
[19:52:56] <SnoopJ> habnabit_, I don't think it has anything as such but the discussion has me wondering if you could kludge it and point at the raw blobs...
[19:53:05] *** Joins: flyback (~flyback@2601:540:8201:1e60:6450:faac:2f4c:fd30)
[19:53:18] <grym> dreamer: we're offtopic and you're getting the right answers you need from not-me, but for completeness, a forge is https://en.wikipedia.org/wiki/Forge_(software)
[19:53:26] <dreamer> SnoopJ: hmmm. I'll poke around at that then. atm we set this in the requirements file, but we can't refer to that in the setup.py
[19:53:31] <grym> (so, gitlab/github/sr.ht/...)
[19:53:56] <dreamer> grym: yes, offtopic (also not sure what this has to do with pypi. anyway ..)
[19:53:56] <Gurkenglas> habnabit_, "ValueError: einstein sum subscripts string includes output subscript 'a' multiple times"
[19:54:37] *** Quits: Croves (~Croves@2804:14c:578b:9102:9cad:79ca:4279:ac08) (Quit: Client closed)
[19:54:51] *** Quits: betelgeuse (~john2gb@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[19:54:51] <grym> dreamer: right, gitlab's a forge; pypi's a package repo.  i don't know what they have to do with each other, either.
[19:54:52] <ammar2> habnabit_: yup it does, at least for the enterprise edition https://docs.gitlab.com/ee/user/packages/pypi_repository/
[19:54:53] *** Joins: Akuli (~Akuli@82-203-160-144.bb.dnainternet.fi)
[19:54:58] <habnabit_> neat
[19:55:21] <habnabit_> i still like devpi's mirrors and overlays, but
[19:55:31] <SnoopJ> dreamer, you could pass it in as a build arg to the image, maybe, and do something like `pip install ${PIP_EXTRA_OPTS} ...` ?
[19:55:48] *** Quits: foozle (~foozle@2001-b011-c001-54d9-5942-3c17-4974-853d.dynamic-ip6.hinet.net) (Quit: Leaving)
[19:56:22] <dreamer> SnoopJ: was indeed thinking something like this :)
[19:56:36] *** Joins: betelgeuse (~john2gb@94-225-47-8.access.telenet.be)
[19:56:59] *** Joins: Lando-SpacePimp (~Lando@user/lando-spacepimp)
[19:57:14] *** pep is now known as codificat
[19:57:46] *** Quits: Bronto22 (~mennoh@84-86-247-193.fixed.kpn.net) (Quit: Konversation terminated!)
[19:58:00] *** Joins: srhm (~ascii@user/srhm)
[19:58:34] *** Quits: sandeepk (~sandeepk@223.130.30.101) (Ping timeout: 250 seconds)
[19:59:12] *** Quits: betelgeuse (~john2gb@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[19:59:38] <neilthereildeil> bjs: what happens if a child process that acquires a semaphore slot is killed? how tould the IPC mechanism be notified that it should release that slot?
[20:00:57] *** Joins: betelgeuse (~john2gb@94-225-47-8.access.telenet.be)
[20:01:03] *** Joins: rolo (~error@2a02:8108:8dc0:1cec:12:cd6a:bc9e:b8fc)
[20:01:08] *** Quits: AquaL1te (~AquaL1te@user/aqual1te) (Ping timeout: 252 seconds)
[20:01:59] <NoImNotNineVolt> is there a way to safely modify the keys of a dictionary while iterating over it?
[20:02:13] <SnoopJ> NoImNotNineVolt, what do you mean by "safely"
[20:02:23] <bjs> neilthereildeil: there's no like, messages being sent by the two processes. They're just making a POSIX semaphore (for example) and using that to actually do the synchronization
[20:02:48] *** Quits: roxfan (roxfan@11.121-64-87.adsl-dyn.isp.belgacom.be) (Remote host closed the connection)
[20:03:18] <NoImNotNineVolt> i mean, normally i avoid messing with dicts while iterating over them. deleting keys, adding keys, etc., to avoid raising a RuntimeError or failing to iterate over all entries.
[20:03:24] *** Quits: zbe (~zbe@pleiades.zbe.bz) (Ping timeout: 268 seconds)
[20:03:27] *** Joins: roxfan (roxfan@11.121-64-87.adsl-dyn.isp.belgacom.be)
[20:03:27] *** Quits: iflema (~ian@user/iflema) (Quit: iflema)
[20:03:33] *** Quits: betelgeuse (~john2gb@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[20:04:00] *** Joins: Celeo (~Celeo@user/celeo)
[20:04:04] <bjs> NoImNotNineVolt: changing the set of keys is certainly a "no" for simultaneously iterating the dict
[20:04:07] <NoImNotNineVolt> what if i only want to edit keys? e.g. replace whitespace in keys with underscores. is that something that can be done safely while iterating? or should i make a copy, or do it in two passes, or something like that?
[20:04:15] <SnoopJ> make a new dict imo
[20:04:18] <Yhg1s> NoImNotNineVolt: nope.
[20:04:19] <bjs> NoImNotNineVolt: it can't
[20:04:31] <SnoopJ> `newd = {munge(key):v for k,v in otherd.items()}`
[20:04:34] <NoImNotNineVolt> k. figured it'd be a special case that might be possible.
[20:04:35] <Yhg1s> NoImNotNineVolt: you can't modify dict keys, you can only remove the old ones and add the new ones. That means you can't do it while iterating over the dict.
[20:04:50] <NoImNotNineVolt> Yhg1s: that makes sense. it's a hash. duh. i didn't think.
[20:05:03] <grym> and thankfully ([], "foo") is an invalid key
[20:05:19] <SnoopJ> NoImNotNineVolt, well, the key is the key, but the hash helps you find it quickly
[20:05:20] *** Joins: betelgeuse (~john2gb@94-225-47-8.access.telenet.be)
[20:05:21] <habnabit_> i'd always recommend making a new dict instead of mutating an old one
[20:05:24] <NoImNotNineVolt> so, to avoid making a copy, i'll just do it in two passes.
[20:05:36] <NoImNotNineVolt> yea but this is a recursive function
[20:05:37] <habnabit_> making new dicts is easy
[20:05:54] <NoImNotNineVolt> so i'm really trying to avoid an absurd amount of copies for deep dicts
[20:06:07] <SnoopJ> and usually a good idea because long-lived dicts that churn a lot can get big (slots aren't vacated)
[20:06:16] *** Joins: iflema (~ian@user/iflema)
[20:06:20] <NoImNotNineVolt> short-lived here, at least.
[20:06:38] <SnoopJ> NoImNotNineVolt, what are you worried about copying? In CPython you're paying for the copies of PyObject* which are ~free
[20:06:52] *** Quits: rolo (~error@2a02:8108:8dc0:1cec:12:cd6a:bc9e:b8fc) (Ping timeout: 244 seconds)
[20:06:53] *** Joins: sharksauce (sharksauce@user/sharksauce)
[20:07:09] *** Joins: drincruz (~drincruz@ec2-18-235-23-153.compute-1.amazonaws.com)
[20:07:12] <NoImNotNineVolt> maybe you're right.
[20:08:00] *** Quits: betelgeuse (~john2gb@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[20:08:14] <neilthereildeil> bjs: so what would happen if one of the processes that held the semaphore dies before it releases the semaphore? is the semaphore leaked?
[20:08:16] *** Joins: wilk (~wilk@user/wilk)
[20:08:39] *** Quits: jw_ (~njw@58.182.164.99) (Quit: jw_)
[20:08:43] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 265 seconds)
[20:08:56] *** Quits: sharksauce (sharksauce@user/sharksauce) (Client Quit)
[20:09:24] *** Quits: drincruz_ (~drincruz@ool-44c748be.dyn.optonline.net) (Ping timeout: 250 seconds)
[20:09:26] *** Joins: sharksauce (sharksauce@user/sharksauce)
[20:09:34] *** Joins: rajkosto (~rajkosto@cable-178-149-127-189.dynamic.sbb.rs)
[20:09:36] *** Joins: jw_ (~njw@58.182.164.99)
[20:09:45] *** Joins: betelgeuse (~john2gb@94-225-47-8.access.telenet.be)
[20:09:46] <bjs> neilthereildeil: leaked?
[20:10:01] *** Joins: zumba_addict (~zumba_add@2601:240:4500:8320:c464:707e:2992:78de)
[20:10:02] *** Joins: qunzhong_luxian (~qunzhong_@68.235.43.94)
[20:10:20] * NoImNotNineVolt guesses it blocks
[20:10:23] <bjs> neilthereildeil: remember you don't "hold" a semaphore. A semaphore is an atomic counter.
[20:10:54] <neilthereildeil> so the child process that acquires the semaphore must also release the semaphore. what happens if the process dies after acquiring but before releasing?
[20:10:55] <bjs> if one process is waiting for another to increment the counter, and the other process got killed, then... well, it's going to be waiting for a while :)
[20:11:31] <NoImNotNineVolt> are you sure you're talking about semaphores and not locks or mutexes?
[20:11:34] <bjs> neilthereildeil: I think you're confusing locks and semaphores in your head for your questions
[20:11:58] *** Joins: paultag (~irssi@i.was.z.ero.cool)
[20:12:05] <neilthereildeil> no i mean for semaphores. theres acquire and release
[20:12:10] *** Quits: Barones (~Barones@2804:48dc:8500:0:4969:1672:1a6d:93c2) (Remote host closed the connection)
[20:12:24] *** Joins: Barones (~Barones@2804:48dc:8500:0:9128:7772:2f1d:158f)
[20:12:25] *** Quits: betelgeuse (~john2gb@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[20:12:25] *** Quits: paultag (~irssi@i.was.z.ero.cool) (Client Quit)
[20:12:29] <bjs> neilthereildeil: yes, but programs don't have to acquire then release, there's no "critical section" in between or anything
[20:12:29] <neilthereildeil> a child process is responsible for calling release, but what if it dies before calling release?
[20:12:33] <bjs> two threads can acquire at the same time
[20:12:39] <neilthereildeil> right
[20:12:40] <bjs> neilthereildeil: then the release doesn't happen
[20:13:07] <neilthereildeil> ok, so if im tracking down semaphore leaks, i think i need to look at the child process dying before callingrelease
[20:13:16] <bjs> neilthereildeil: acquire/release are sort of bad names, they should be "increment" and "decrement" really
[20:13:23] <neilthereildeil> agreed
[20:13:47] *** Quits: mcsontos (~mcsontos@95.82.135.0) (Quit: Leaving)
[20:14:06] <bjs> neilthereildeil: if your process is using a shared semaphore and gets killed, then yes it might have died when logically it's "using" a resource the semaphore was counting.  Semaphores have no way to communicate that something has happened in this scenario to the other processes.
[20:14:13] *** Joins: betelgeuse (~john2gb@94-225-47-8.access.telenet.be)
[20:14:46] <neilthereildeil> whats a good way to protect against this risk?
[20:15:04] *** Quits: doc (~doc@user/doc) (Quit: Things to do)
[20:15:42] <neilthereildeil> i have a suspicion this is causing my leak, but i need to confirm it
[20:15:53] *** Joins: zbe (~zbe@pleiades.zbe.bz)
[20:15:56] *** Quits: vladoski (~vladoski@93-36-221-58.ip62.fastwebnet.it) (Remote host closed the connection)
[20:16:20] *** Joins: vladoski (~vladoski@93-36-221-58.ip62.fastwebnet.it)
[20:16:26] <bjs> neilthereildeil: well there's no way semaphore can do anything (it's just not part of its API), and I don't think the Python Semaphore adds anything ontop either.
[20:16:51] *** Quits: betelgeuse (~john2gb@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[20:17:21] *** Quits: jpodivin (~jpodivin@118.108.broadband14.iol.cz) (Quit: Leaving)
[20:17:53] <bjs> neilthereildeil: I mean you can check, you can have the processes each log when they incremenet/decrement the semaphore and see (okay not perfect obviously),  you should be able to tell if the process died while in some unsafe state
[20:18:04] <ammar2> neilthereildeil: you're doing cross-process locking?
[20:18:06] *** Joins: xcombelle (~xavie@176-139-252-198.abo.bbox.fr)
[20:18:37] *** Joins: betelgeuse (~john2gb@94-225-47-8.access.telenet.be)
[20:20:35] *** Quits: mefistofeles (~mefistofe@user/mefistofeles) (Quit: Hay te huacho!)
[20:20:56] *** Joins: fedenix (~fedenix@gateway/tor-sasl/fedenix)
[20:21:12] *** Quits: betelgeuse (~john2gb@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[20:21:22] *** Joins: teut (~teut@182.68.62.72)
[20:21:33] <neilthereildeil> yea i have a semaphore with 184 slots and 184 child processes. after stress testing my application for a few days, i see the semaphores leak around 10 slots
[20:21:47] *** Quits: Vornicus (~Vornicus@2603-8000-5d07-7ef0-15f5-5f62-e0d1-aece.res6.spectrum.com) (Read error: Connection reset by peer)
[20:21:51] *** Joins: control (~guesswho@user/control)
[20:21:59] *** Joins: milkt (~debian@gateway/tor-sasl/milkt)
[20:22:35] *** Joins: ntdll (~ntdll@user/ntdll)
[20:22:50] <bjs> neilthereildeil: and your processes are being killed unexpectedly?
[20:22:57] *** Joins: betelgeuse (~john2gb@94-225-47-8.access.telenet.be)
[20:24:38] <m_tadeu> is there a way to peek on subprocess.stdout to see if there's still something inside?
[20:24:40] *** Quits: akaWolf (~akaWolf@akawolf.org) (Ping timeout: 265 seconds)
[20:25:32] *** Quits: betelgeuse (~john2gb@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[20:25:48] <ammar2> m_tadeu: you can use the select module to see if there's anything available to read
[20:25:50] *** Joins: zeenk (~zeenk@2a02:2f04:a106:9600:82fb:aed9:ca9:38d3)
[20:26:00] <teut> https://docs.python.org/3/reference/grammar.html   why in `disjunction`   conjunction is written in 2 lines?   the first one implies inversion  followed by  1 or more  ` or inversions`   so why not just make   the + a *?
[20:26:01] *** Quits: powerjungle (~powerjung@h081217087223.dyn.cm.kabsi.at) (Quit: ZNC - https://znc.in)
[20:27:19] *** Joins: betelgeuse (~john2gb@94-225-47-8.access.telenet.be)
[20:27:40] *** Quits: Barones (~Barones@2804:48dc:8500:0:9128:7772:2f1d:158f) (Remote host closed the connection)
[20:27:46] *** Joins: ELFrederich (~ELFrederi@siemens-industry-software-inc-216-196-155-202.static.fuse.net)
[20:27:55] *** Joins: Barones (~Barones@2804:48dc:8500:0:59cd:3c6c:84e2:5035)
[20:28:21] *** Quits: _ELFrederich (~ELFrederi@siemens-industry-software-inc-216-196-155-202.static.fuse.net) (Remote host closed the connection)
[20:28:25] <Yhg1s> teut: I doubt there is a reason.
[20:28:30] *** Joins: paultag (~paultag@i.was.z.ero.cool)
[20:28:30] *** Quits: betelgeuse (~john2gb@94-225-47-8.access.telenet.be) (Client Quit)
[20:29:08] <teut> and inversion   is   the  `!` , why is that  in there?
[20:29:18] *** Parts: paultag (~paultag@i.was.z.ero.cool) ()
[20:30:07] <bjs> teut: what do you mean `!`
[20:30:12] <Yhg1s> teut: I don't know what you mean by that.
[20:30:22] <teut> what is an inversion?
[20:30:32] *** Joins: finsternis (~X@23.226.237.192)
[20:30:36] <ammar2> teut: it's written that way because it's easier to express like that in the PEG action
[20:30:42] <Yhg1s> teut: 'not x'
[20:30:44] <bjs> teut: see the grammar, inversion is a `not ...`
[20:30:56] *** Joins: powerjungle (~powerjung@h081217087223.dyn.cm.kabsi.at)
[20:30:58] <ammar2> teut: for the conjunction/disjunction that is
[20:31:23] <teut> yes bjs  that's why I wrote that  !
[20:31:34] <bjs> ammar2: teut: Yhg1s: i suspect this grammar comes right from the actual grammar file, and if it were * you'd always get some binary "or" operation even if there was no `or`
[20:31:45] <Yhg1s> teut: '!' is not a thing in Python.
[20:31:52] <bjs> teut: Python doesn't have "!" ?
[20:31:55] <habnabit_> huh. what does the '.' mean in PEG grammar?
[20:31:56] <teut> yes i know that , you use  not
[20:32:30] <Yhg1s> habnabit_: 'a list separated by the thing before the .'
[20:32:38] <habnabit_> aha
[20:32:55] <ammar2> bjs: that's exactly right
[20:32:59] <SnoopJ> Grammar doc should link to PEP 617 whenever 3.10 drops
[20:33:07] *** Quits: mcope (~matt@user/mcope) (Quit: Konversation terminated!)
[20:33:09] <SnoopJ> https://www.python.org/dev/peps/pep-0617/#s-e is the relevant rule
[20:33:17] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[20:33:22] *** Quits: DaNeenjah (~jake@124.sub-72-105-218.myvzw.com) (Ping timeout: 265 seconds)
[20:33:49] <bjs> teut: you know that as in,  you made a mistake or as in you are trying to say something about "!" that we're not getting?
[20:34:00] *** Joins: rolo (~error@2a02:8108:8dc0:1cec:12:cd6a:bc9e:b8fc)
[20:34:14] *** Joins: DaNeenjah (~jake@adsl-74-230-9-207.hsv.bellsouth.net)
[20:34:23] <teut> plz ignore  the !  , sorry for the confusion, what I mean is  why is the word inversion there?
[20:34:28] <bjs> ammar2: eh it's not that uncommon to do weird case splitting in grammar files
[20:34:49] <bjs> teut: the productions describe the thing they have.  disjunction is the `or` rule,  conjunction is the `and` rule and inversion is the `not` rule
[20:34:53] <bjs> those are just the words for the things that they do
[20:35:16] <teut> disjunction  :<condition>   (or <condition>)+
[20:35:27] <teut> disjunction should be something like tthis
[20:35:43] *** Quits: mrwick (~mrwick@user/mrwick) (Quit: leaving)
[20:35:44] <bjs> teut: that is roughly what the disjunction production says yes
[20:36:30] <teut> no, the disjunction  says  disjunction:    | conjunction ('or' conjunction )+      | conjunction
[20:36:40] <teut> why is the word conjunction occuring?
[20:36:55] <bjs> teut: because that's the rule that can appear between the `or`s
[20:37:03] <grawity> maybe because the particular BNF flavour only has + and not *
[20:37:12] <bjs> teut: you can have an Or that contains And's, but not an And that contains Or's (without brackets)
[20:37:17] <teut> is it something related to precedence of opertors?
[20:37:20] <bjs> teut: yes.
[20:37:39] <teut> ok , I never spend memory in learning precedences
[20:37:43] <bjs> conjunctions are higher precedence than disjunctions so the disjunction production only mentions conjunction
[20:37:55] <teut> I just put ()  all the time
[20:37:56] <bjs> teut: you don't have to,  Python gives you (brackets)
[20:38:03] <teut> yes
[20:38:09] <teut> every language does
[20:38:09] <bjs> but Python itself has to do the right thing, and it's grammar is carefully written to do so :)
[20:38:12] *** Quits: cliluw (~cliluw@47.147.80.149) (Ping timeout: 265 seconds)
[20:38:18] *** Quits: ELFrederich (~ELFrederi@siemens-industry-software-inc-216-196-155-202.static.fuse.net) (Remote host closed the connection)
[20:38:18] <bjs> in the case you dont put brackets that is
[20:38:28] <teut> yes, so now i will learn
[20:38:38] <teut> thanks for the info
[20:38:54] *** Joins: cliluw (~cliluw@47.147.80.149)
[20:38:58] <bjs> teut: this is a very standard thing in grammars, to encode the precedence in layers of productions like this
[20:39:21] <Sheilong> why applying max to a map object yields in a empty list?
[20:39:30] <teut> yes  , to  avoid  ambiguous  representations of the source code
[20:39:36] <teut> I read in a book
[20:39:46] <habnabit_> Sheilong, sounds like the empty list was the maximum in your map
[20:39:54] <habnabit_> Sheilong, is that surprising?
[20:40:08] <Sheilong> habnabit_:  I am quite confuse.
[20:40:16] <habnabit_> Sheilong, show us your code and output
[20:40:17] <bjs> Sheilong: it sounds like you did it wrong if you're confused
[20:40:25] <Sheilong> The only elements in the list were integers.
[20:40:26] *** Joins: MeteHAN (~MeteHAN@95.70.233.95)
[20:40:27] <bjs> Sheilong: max(map(...)) should just work as expected
[20:40:36] <bjs> Sheilong: okay but you mentioned map, so.. what did you do exactly?
[20:40:37] <Sheilong> https://bpa.st/74VA
[20:40:37] *** Quits: rwb (~augh@theguntretort.com) (Ping timeout: 265 seconds)
[20:40:56] <bjs> Sheilong: well input().split() does not contain integers
[20:41:02] <Sheilong> It is just a stupid hackerrank challenge.
[20:41:04] <habnabit_> Sheilong, you can't iterate over a map multiple times
[20:41:22] <habnabit_> Sheilong, it's exhausted and therefore empty after L4
[20:41:24] <neilthereildeil> bjs: my SUSPICION is that some processes might be getting killed unexpectedly
[20:41:26] <Sheilong> ITo make it work I have to explicitly convert the map object to a list
[20:41:35] <habnabit_> Sheilong, oh, you're turning it into a list
[20:41:36] <neilthereildeil> so i want to either confirm or refute this suspicion
[20:41:41] <habnabit_> Sheilong, at that point, use a list comprehension
[20:41:42] <bjs> Sheilong: yes that is correct
[20:41:57] *** Quits: rolo (~error@2a02:8108:8dc0:1cec:12:cd6a:bc9e:b8fc) (Quit: WeeChat 3.2)
[20:41:59] <bjs> Sheilong: you can only use a map object once, as habnabit_ says,  whereas you can use a list object multiple times.
[20:42:13] *** Parts: MeteHAN (~MeteHAN@95.70.233.95) ()
[20:42:23] <bjs> neilthereildeil: well surely you can just look, the OS knows whether a process was killed and if they're child processes they'll be kept around as zombies
[20:42:23] *** Joins: Ha-Jo (~Thunderbi@2a01:c23:8d00:9400:a13c:eb7f:897f:f69)
[20:42:43] <Sheilong> bjs: Aha! I got it.
[20:43:12] <neilthereildeil> bjs: ohh wow i hink thats the next step. can you please explain how i would do this? Im running Linux and need to track child process exits
[20:43:15] <neilthereildeil> think*
[20:43:20] *** Quits: zumba_addict (~zumba_add@2601:240:4500:8320:c464:707e:2992:78de) (Quit: Client closed)
[20:43:20] <Sheilong> It shows that I know nothing of Python lol
[20:43:26] *** Joins: Croves (~Croves@2804:14c:578b:9102:9cad:79ca:4279:ac08)
[20:44:44] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[20:45:14] <SnoopJ> there's a lot to know :)
[20:45:15] *** Quits: pathos (~pathos@169-1-247-122.ip.afrihost.co.za) (Ping timeout: 268 seconds)
[20:46:46] *** Joins: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com)
[20:47:28] <neilthereildeil> bjs: how can i query the OS to find out which processes were killed?
[20:47:51] <bjs> neilthereildeil: well there are lots of ways,  hell there's probably even an invokation of `ps` that'll tell you what you need
[20:47:56] <tunixman> neilthereildeil: https://processmanager.readthedocs.io/en/latest/publicapi.html
[20:48:13] <bjs> neilthereildeil: the system should also send SIGCHLD  to the parent so you can even detect+cleanup there
[20:48:13] *** Joins: dcaro_ (~dcaro@user/dcaro)
[20:48:17] <tunixman> You can also trap SIGCHLD with the signal module and you'll get notified.
[20:48:38] <NoImNotNineVolt> okay, so i have this recursive function that cleans dictionary keys according to the constraints imposed by apache vtl.... https://bpa.st/URUQ
[20:48:48] *** Quits: vladoski (~vladoski@93-36-221-58.ip62.fastwebnet.it) (Remote host closed the connection)
[20:48:56] *** Joins: rwb (~augh@theguntretort.com)
[20:48:57] <NoImNotNineVolt> but is there an easy way to modify this such that it preserves the original order of dict keys?
[20:49:03] <tunixman> Also you'll have to at least fetch the child process status or you'll run into the zombie issue.
[20:49:09] *** Joins: FluffyMask (~FluffyMas@user/fluffymask)
[20:49:10] *** Quits: Barones (~Barones@2804:48dc:8500:0:59cd:3c6c:84e2:5035) (Remote host closed the connection)
[20:49:12] *** Joins: pathos (~pathos@169-1-247-122.ip.afrihost.co.za)
[20:49:42] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 250 seconds)
[20:50:00] <neilthereildeil> ok, so in the parent process, ill trap SIGCHLD and track the PIDs of dead children?
[20:50:10] <NoImNotNineVolt> or to do that, do i basically have to avoid the wholesale copy at the start, and instead simply add keys one at a time in the appropriate order?
[20:51:44] *** Quits: dcaro (~dcaro@user/dcaro) (Ping timeout: 265 seconds)
[20:51:44] *** Quits: shad (~shad@user/shad) (Quit: WeeChat 2.3)
[20:51:44] *** dcaro_ is now known as dcaro
[20:51:49] *** Joins: diek (~diek@2804:14d:7681:82bd:e84f:20c9:c5ab:ee57)
[20:52:00] <bjs> neilthereildeil: see also https://docs.python.org/3/library/os.html#os.wait which is useful for catching SIGCHLD
[20:52:06] *** Quits: rememberYou (~someone@user/rememberyou) (Ping timeout: 252 seconds)
[20:52:43] <neilthereildeil> FYI im using multiprocessing.Pool
[20:52:46] <bjs> with that you can wait() and see a reason why the process died (e.g. if it was given SIGKILL)
[20:52:50] <bjs> it doesn't matter how the process got to be
[20:52:59] <bjs> it has a parent and the parent will be notified when the child is dead
[20:53:02] <neilthereildeil> so wouldnt the Pool code be blocking me?
[20:53:06] *** Quits: diek (~diek@2804:14d:7681:82bd:e84f:20c9:c5ab:ee57) (Remote host closed the connection)
[20:53:12] <bjs> ... talking about systems programming can sound so morbid
[20:53:18] <neilthereildeil> lol
[20:53:26] *** Quits: Nalt (~Nalt|||@162-239-107-41.lightspeed.rcsntx.sbcglobal.net) (Read error: Connection reset by peer)
[20:53:29] <bjs> neilthereildeil: see also signal.signal :)
[20:53:34] *** Joins: justinf210 (~justinf21@84.sub-97-44-1.myvzw.com)
[20:53:45] <neilthereildeil> but would the pool class notify the parent process of child deaths?
[20:53:51] *** Quits: pneff (~pneff@46-127-136-42.dynamic.hispeed.ch) (Ping timeout: 258 seconds)
[20:53:55] <bjs> neilthereildeil: no the pool class is irrelevant
[20:54:09] *** Quits: pathos (~pathos@169-1-247-122.ip.afrihost.co.za) (Ping timeout: 265 seconds)
[20:54:18] *** Joins: Alexer (~alexer@alexer.net)
[20:54:27] <bjs> frankly even the fact it's Python has been mostly irrelevant so far :)
[20:54:31] <neilthereildeil> can i catch SIGCHLD in the parent even though the parent is using a pool to spawn these children?
[20:54:37] <ChrisWarrick> perhaps we should get rid of the terms “parent/child processes”, or “killing processes” too?
[20:54:38] <bjs> neilthereildeil: the pool is totally irrelevant
[20:55:07] *** Quits: boB_K7IQ (~boB_K7IQ@c-73-254-117-91.hsd1.wa.comcast.net) (Ping timeout: 265 seconds)
[20:55:29] *** Joins: tdoss (~tdoss@wsip-70-166-238-194.ks.ks.cox.net)
[20:55:41] <bjs> *unless the "pool" is in its own process, because then _that_ process would get the notification
[20:55:46] *** Joins: Nalt (~Nalt|||@162-239-107-41.lightspeed.rcsntx.sbcglobal.net)
[20:55:47] <bjs> (which "forkserver" does iirc)
[20:56:05] *** Quits: aniruddha (~aniruddha@103.242.197.215) (Quit: WeeChat 1.9.1)
[20:56:12] *** Joins: boB_K7IQ (~boB_K7IQ@c-73-254-117-91.hsd1.wa.comcast.net)
[20:56:34] <neilthereildeil> ok
[20:56:50] *** Quits: PdimH (~pdimh@user/pdimh) (Quit: May we meet again)
[20:56:52] <bjs> neilthereildeil: note a multiprocessing.Pool object does do a lot of tracking of resources for you https://docs.python.org/3/library/multiprocessing.html#contexts-and-start-methods
[20:57:27] *** Joins: diek (~diek@2804:14d:7681:82bd:e84f:20c9:c5ab:ee57)
[20:57:56] <neilthereildeil> btw im using python 2.7
[20:58:18] *** Joins: sed (~sed@pool-100-7-53-231.rcmdva.fios.verizon.net)
[20:58:20] *** Joins: pathos (~pathos@169-1-247-122.ip.afrihost.co.za)
[20:58:35] *** Quits: Nalt (~Nalt|||@162-239-107-41.lightspeed.rcsntx.sbcglobal.net) (Read error: Connection reset by peer)
[20:58:37] *** Quits: diek (~diek@2804:14d:7681:82bd:e84f:20c9:c5ab:ee57) (Remote host closed the connection)
[20:58:50] *** Joins: diek (~diek@2804:14d:7681:82bd:e84f:20c9:c5ab:ee57)
[20:58:58] <sed> Hi how do I restructure this code so that I could print isSubSequence(string1, string2, m, n) from outside the function rather than printing inside?  https://dpaste.org/3Ljr
[20:58:59] <bjs> neilthereildeil: all the process, zombie, signal, wait() and SIGCHLD stuff so far is universal
[20:59:03] <bjs> for any Unix process
[20:59:06] <neilthereildeil> k
[20:59:16] *** Joins: akaWolf (~akaWolf@akawolf.org)
[20:59:39] *** Joins: Nalt (~Nalt|||@162-239-107-41.lightspeed.rcsntx.sbcglobal.net)
[21:00:01] *** Quits: diek (~diek@2804:14d:7681:82bd:e84f:20c9:c5ab:ee57) (Remote host closed the connection)
[21:00:06] <bjs> sed: this code doesn't print from inside the function.  I'm not sure I understand?
[21:00:12] <sed> or actually nvm I just need to somehow print both outputs
[21:00:31] *** Quits: Nalt (~Nalt|||@162-239-107-41.lightspeed.rcsntx.sbcglobal.net) (Read error: Connection reset by peer)
[21:00:36] <sed> for a second i thought it was printing from inside I was not looking at the indents correctly
[21:00:49] <bjs> ah okay
[21:01:20] <sed> nvm i think i got it
[21:01:34] <sed> just re-did the bottom again with different strings a and b
[21:01:36] <sed> I guess right?
[21:01:41] <sed> Unless you have a better way?
[21:01:55] <bjs> sed: I don't understand
[21:02:14] <sed> nvm i think i got it idk why i asked
[21:02:16] *** Quits: lukka5 (~lukka5@246-60-231-201.fibertel.com.ar) (Ping timeout: 250 seconds)
[21:02:21] *** Joins: Nalt (~Nalt|||@162-239-107-41.lightspeed.rcsntx.sbcglobal.net)
[21:02:24] <neilthereildeil> also, how does the interpreter know to share the semaphore across all its child processes?
[21:03:07] <neilthereildeil> is every global variable instantiated from multiprocessing library shared across children? or every global variable or every variable instantiated from multiprocessing library?
[21:03:17] *** Joins: derelict (~derelict@user/derelict)
[21:03:32] *** Quits: Nalt (~Nalt|||@162-239-107-41.lightspeed.rcsntx.sbcglobal.net) (Read error: Connection reset by peer)
[21:03:55] <deniska> neilthereildeil: it probably uses some sort of IPC mechanism, you can check multiprocessing source code
[21:03:56] *** apathor_ is now known as apathor
[21:03:57] <bjs> neilthereildeil: when a process fork()s the entire process and all its memory is copied over and you get 2 copies
[21:04:05] *** Joins: Nalt (~Nalt|||@162-239-107-41.lightspeed.rcsntx.sbcglobal.net)
[21:04:19] <neilthereildeil> so how does it use the same semaphore in the OS if there are 2 copies?
[21:04:35] <bjs> neilthereildeil: the process doesn't -really- have the semaphore, only its name
[21:04:39] <bjs> (or "handle")
[21:04:47] *** Quits: neolem (~neolem@user/neolem) (Quit: The Lounge - https://thelounge.chat)
[21:04:57] <bjs> neilthereildeil: just like a file
[21:05:08] <neilthereildeil> ahh ok. and since its running on the same OS, the child process can access it because it has a copy of the same name/handle?
[21:05:37] *** Quits: Ha-Jo (~Thunderbi@2a01:c23:8d00:9400:a13c:eb7f:897f:f69) (Quit: Ha-Jo)
[21:05:54] *** Joins: drincruz_ (~drincruz@ool-44c748be.dyn.optonline.net)
[21:05:54] <bjs> neilthereildeil: so this is where you have to be careful
[21:06:17] *** Joins: Barones (~Barones@2804:48dc:8500:0:3d0b:6ece:41b6:b602)
[21:07:32] <bjs> neilthereildeil: when you have things that contain handles from the OS,  you can "inherit" the resources, or you might get a copy
[21:07:36] <jim87> any experience with PySide or PyQt? I'm not able to show a widget within a QStatusBar, which seems to be a stupid bug by my side, still I don't see it: https://pastebin.com/t1dANsp0
[21:07:41] *** Quits: justinf210 (~justinf21@84.sub-97-44-1.myvzw.com) (Ping timeout: 265 seconds)
[21:08:23] *** Joins: neolem (~neolem@user/neolem)
[21:08:25] *** Quits: drincruz (~drincruz@ec2-18-235-23-153.compute-1.amazonaws.com) (Ping timeout: 258 seconds)
[21:08:48] <bjs> neilthereildeil: e.g. for files you get two copies of the handle, and it's as if two different processes opened the file at the same time. It's not like they're "sharing" the same handle.
[21:09:20] <bjs> neilthereildeil: if you have a semaphore that is entirely copied, then it has to be stored in some shared memory that is not copied. if you have something (e.g. a file lock) that the OS does know about then it can be inherited safely.
[21:09:52] *** Quits: bomb-on (~mozgalom@IPnet-gw.157.157.97.111.simnet.is) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[21:10:05] *** Joins: majorgreys (~majorgrey@ool-4a5afd9e.dyn.optonline.net)
[21:10:22] <neilthereildeil> so ur saying in multiprocessing.boundedSemaphore, only the HANDLE is copied, not any data structures or objects relating to the sem, and that handle is used to access the same OS object?
[21:10:43] *** Quits: zbe (~zbe@pleiades.zbe.bz) (Ping timeout: 258 seconds)
[21:11:52] *** Joins: greedom (~greedom@2001:16b8:329e:1400:5cb:db5a:8:1baa)
[21:11:54] *** Joins: pneff (~pneff@46-127-136-42.dynamic.hispeed.ch)
[21:11:54] <Gurkenglas> habnabit_, oh chat scrolls off the top here, did you reply to "ValueError: einstein sum subscripts string includes output subscript 'a' multiple times
[21:11:55] <Gurkenglas> "?
[21:13:00] <neilthereildeil> and how is this different than threading.semaphore?
[21:13:00] *** Quits: jmcantrell (~weechat@user/jmcantrell) (Ping timeout: 268 seconds)
[21:13:07] *** Joins: diek (~diek@187.36.4.113)
[21:15:54] <bjs> neilthereildeil: the real reality is that it's using a https://linux.die.net/man/7/sem_overview Named Semaphore object (on POSIX systems)
[21:15:57] *** Quits: jw_ (~njw@58.182.164.99) (Quit: jw_)
[21:17:17] *** Quits: NeoCore (~neocore@45.152.181.148) (Quit: Leaving)
[21:17:18] *** Joins: PantelicGR (~PantelicG@user/pantelicgr)
[21:17:26] *** Joins: matsaman (~matsaman@user/matsaman)
[21:18:42] *** Quits: Einstein (~einstein@pool-100-35-34-110.nwrknj.fios.verizon.net) ()
[21:18:49] <bjs> neilthereildeil: threading.Semaphore is implemented differently (with an unnamed semaphore)
[21:19:34] *** Quits: lucad111 (~lucad111@51-148-40-1.dsl.zen.co.uk) (Quit: Leaving)
[21:19:56] <neilthereildeil> bjs: therefore if i used threading.semaphore, the children would get their own COPY of the semaphore rather than a handle to a the same semaphore that the parent is using?
[21:20:02] *** Quits: boB_K7IQ (~boB_K7IQ@c-73-254-117-91.hsd1.wa.comcast.net) (Ping timeout: 250 seconds)
[21:20:10] <bjs> neilthereildeil: yes i believe so
[21:22:52] <evidlo> what dunder method does 'foo in bar' invoke when comparing foo to elements of bar?
[21:23:39] <evidlo> somehow foo.str is getting called when I do this, which I don't understand
[21:23:43] *** Joins: mattf (~matheus@179-189-87-110.goldnettelecom.com.br)
[21:23:49] <evidlo> `foo.__str__`
[21:24:36] *** Quits: diek (~diek@187.36.4.113) (Remote host closed the connection)
[21:24:45] <bjs> evidlo: bar.__contains__(foo)  #roughly
[21:24:59] <bjs> evidlo: obviously `bar` gets to decide,  and it can call str() if it wants?  Not sure what type does though
[21:25:19] <bjs> neilthereildeil: you can make a little test example calling os.fork() manually and seeing what happens after
[21:25:47] <neilthereildeil> yea im writing a little test program
[21:26:16] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[21:27:55] *** Parts: mattf (~matheus@179-189-87-110.goldnettelecom.com.br) ()
[21:28:12] *** Joins: justinf210 (~justinf21@84.sub-97-44-1.myvzw.com)
[21:31:53] <bjs> neilthereildeil: here's a little example I wrote for you,  it's good to know that the theory seems to correspond to the practice (at least on my system): https://bpa.st/AQYQ
[21:32:32] <neilthereildeil> bjs: wow, thanks so much
[21:32:32] *** Joins: pnoud (~pnoud@user/pnoud)
[21:33:36] *** Quits: dakudos (~dakudos@c-73-229-175-50.hsd1.co.comcast.net) (Remote host closed the connection)
[21:34:10] <bjs> hopefully if you made a C example using sem_open and sem_init you'd see the same behaviours after a fork()
[21:34:39] *** Joins: mesaboogie (mesaboogie@user/mesaboogie)
[21:35:06] *** Quits: cruzr (~cruzr@2604:4300:a:16b::6) (Remote host closed the connection)
[21:35:06] *** Joins: normic (~normic@p4fc30985.dip0.t-ipconnect.de)
[21:35:16] <bjs> neilthereildeil: btw it goes without saying,  you shouldn't be using signal.signal or os.fork or os.kill directly in your code, this is just for demonstration purposes :)
[21:35:23] *** Joins: cruzr (~cruzr@2604:4300:a:16b::6)
[21:35:30] *** Joins: lukka5 (~lukka5@246-60-231-201.fibertel.com.ar)
[21:35:37] *** Joins: dakudos (~dakudos@c-73-229-175-50.hsd1.co.comcast.net)
[21:35:49] <neilthereildeil> but i am planning to install a sigchild handler
[21:36:20] *** Quits: Nalt (~Nalt|||@162-239-107-41.lightspeed.rcsntx.sbcglobal.net) (Read error: Connection reset by peer)
[21:36:35] <bjs> maybe I should've put an os.wait() in the sigchld handler so you can see what it returns in the two difference cases (the kill and the natural exit)
[21:36:45] <bjs> maybe that's an exercise for the reader :)
[21:37:09] <bjs> supakeen: when are we gonna get an "edit" button for the bpastes so I can add things like this when I think of them after I've already hit paste
[21:37:12] <bjs> j/k
[21:37:33] *** Quits: pnoud (~pnoud@user/pnoud) (Ping timeout: 258 seconds)
[21:37:35] *** Joins: penguino (~mrpenguin@user/mrpenguin)
[21:38:03] *** Joins: Nalt (~Nalt|||@162-239-107-41.lightspeed.rcsntx.sbcglobal.net)
[21:38:06] <tunixman> t neilthereildeil here's a good minimal example for the sigchld handler https://mail.python.org/pipermail/tutor/2003-December/026748.html
[21:39:06] *** Quits: MarderIII (~MarderIII@2001:985:e889:1:dc25:2b5d:9b33:3d4b) (Ping timeout: 250 seconds)
[21:39:24] <neilthereildeil> should i not be using atExit in python instead of trapping sigchld?
[21:39:52] <tunixman> No, that won't get called in the parent process when children exit.
[21:39:58] *** Quits: lukka5 (~lukka5@246-60-231-201.fibertel.com.ar) (Ping timeout: 250 seconds)
[21:40:29] <tunixman> You could use that to kill all the child processes though if the parent is exiting.
[21:40:37] *** Quits: Nalt (~Nalt|||@162-239-107-41.lightspeed.rcsntx.sbcglobal.net) (Read error: Connection reset by peer)
[21:41:07] *** Quits: cruzr (~cruzr@2604:4300:a:16b::6) (Remote host closed the connection)
[21:41:42] <jim87> any experience with PySide or PyQt? I'm not able to show a widget within a QStatusBar, which seems to be a stupid bug by my side, still I don't see it: https://pastebin.com/t1dANsp0
[21:41:49] <neilthereildeil> i was thinking about logging callstack at onExit callback t osee if im having some abnormal termination
[21:42:10] *** Joins: Nalt (~Nalt|||@162-239-107-41.lightspeed.rcsntx.sbcglobal.net)
[21:42:42] *** Joins: the-mask (~the-mask@user/the-mask)
[21:42:58] *** Quits: Liexei (Liexei@user/liexei) (Ping timeout: 244 seconds)
[21:43:12] *** Quits: Nalt (~Nalt|||@162-239-107-41.lightspeed.rcsntx.sbcglobal.net) (Read error: Connection reset by peer)
[21:43:18] *** Quits: Titore (Titore@user/titore) (Ping timeout: 268 seconds)
[21:43:29] *** Quits: smqra (~rooba@208.110.85.44) (Ping timeout: 244 seconds)
[21:43:30] *** Joins: Nalt (~Nalt|||@162-239-107-41.lightspeed.rcsntx.sbcglobal.net)
[21:44:11] *** Quits: dakudos (~dakudos@c-73-229-175-50.hsd1.co.comcast.net) (Remote host closed the connection)
[21:44:23] *** Joins: LuxuryMode (uid91005@id-91005.charlton.irccloud.com)
[21:45:12] <the-mask> hi all; one tiny issue; I have 1 installation of python under /user/etc path in windows; but for my projects, in pycharm I've setup the python.exe from a portable instalation of python 3.8.8; however, pip is pointing to the windows installation and not of the portable one ...how do I fix it ?
[21:45:38] *** Joins: MarderIII (~MarderIII@2001:985:e889:1:dc25:2b5d:9b33:3d4b)
[21:46:08] *** Joins: dakudos (~dakudos@c-73-229-175-50.hsd1.co.comcast.net)
[21:46:32] <TML> the-mask: set the portable install of Python to come earlier in %PATH%
[21:46:40] <tunixman> t neilthereildeil yeah that's a good idea. Another thing I've done is wrap whatever main method in a try...finally. It's a bit easier there to catch anything and log it.
[21:46:52] <neilthereildeil> yea i already tried that
[21:46:55] <neilthereildeil> no luck
[21:47:04] <neilthereildeil> i am catching Exception base class
[21:47:08] <neilthereildeil> but not getting anything
[21:47:14] <tunixman> ooooh well, you can try the atExit then.
[21:47:20] <tunixman> something might also be calling abort.
[21:47:21] <the-mask> TML, hmm, didn't see that ....let me try ...
[21:47:36] *** Joins: diek (~diek@2804:14d:7681:82bd:e84f:20c9:c5ab:ee57)
[21:47:38] *** Quits: dakudos (~dakudos@c-73-229-175-50.hsd1.co.comcast.net) (Remote host closed the connection)
[21:47:51] <neilthereildeil> when will the python runtime's atExit function _NOT_ be called?
[21:48:11] *** Joins: Sasazuka (~Sasazuka@user/sasazuka)
[21:48:22] *** Quits: haslo (uid390999@id-390999.highgate.irccloud.com) (Quit: Connection closed for inactivity)
[21:48:25] <tunixman> you can always use https://docs.python.org/3/library/trace.html
[21:48:53] *** Quits: tm007 (uid287041@id-287041.highgate.irccloud.com) (Quit: Connection closed for inactivity)
[21:48:58] *** Quits: gusto (~Augustus@109.255.100.54) (Quit: Textual IRC Client: www.textualapp.com)
[21:49:00] <neilthereildeil> yea im planning to log a stack track from atExit
[21:49:00] <tunixman> neilthereildeil: this is a decent summary https://stackoverflow.com/a/23468485
[21:49:18] <tunixman> By atExit you might not have one anymore though...
[21:49:21] *** Joins: cruzr (~cruzr@2604:4300:a:16b::6)
[21:49:55] *** Quits: fofoni (~fofoni@user/fofoni) (Remote host closed the connection)
[21:50:02] <neilthereildeil> heres my test program: https://paste.ubuntu.com/p/zz7wRJCHtb/
[21:50:06] <tunixman> But then again you might, it's worth tryinge.
[21:50:26] <neilthereildeil> why am i getting AttributeError: 'NoneType' object has no attribute 'release' on line 22?
[21:50:41] *** Quits: greedom (~greedom@2001:16b8:329e:1400:5cb:db5a:8:1baa) (Remote host closed the connection)
[21:50:52] <the-mask> TML, but anyway, how is this possible ..if the interpreter in pycharm is the one of portable installation - how come the "default" pip is the one from the windows installation ?
[21:51:11] *** Quits: GiLgAmEzH (~gilgamezh@186.19.69.139) (Ping timeout: 265 seconds)
[21:51:11] <tunixman> Oh, hm, if you're using multiprocessing I think that handles the child process reaping (the signal handler), so you wouldn't need that...
[21:51:50] *** Quits: diek (~diek@2804:14d:7681:82bd:e84f:20c9:c5ab:ee57) (Remote host closed the connection)
[21:52:07] <tunixman> aside from that though, I think that could be because the child has exited for some reason, I think your intuition there is right.
[21:52:08] <neilthereildeil> tunixman: atExit will not help me according to that link you sent. its too highlevel. i need to know if this error is possibly below the python runtime
[21:52:29] <neilthereildeil> i need a LOW level way to trap on child exit
[21:52:38] <neilthereildeil> sigchild might help in the parent
[21:52:45] <neilthereildeil> but atExit is not good enough in the child
[21:52:54] *** Joins: diek (~diek@187.36.4.113)
[21:52:55] *** Quits: sed (~sed@pool-100-7-53-231.rcmdva.fios.verizon.net) (Remote host closed the connection)
[21:53:02] <tunixman> Yeah, sigchild will help for that in the parent. You also have to make sure you call the multiprocessing exit handler after yours.
[21:53:48] *** Parts: Croves (~Croves@2804:14c:578b:9102:9cad:79ca:4279:ac08) ()
[21:53:51] <neilthereildeil> heres my test program: https://paste.ubuntu.com/p/zz7wRJCHtb/    why am i getting AttributeError: 'NoneType' object has no attribute 'release' on line 22?
[21:53:53] <tunixman> Are you using python2?
[21:53:57] <neilthereildeil> yea 2.7
[21:54:05] <tunixman> ok, let me give it a try.
[21:54:10] *** Joins: lukka5 (~lukka5@246-60-231-201.fibertel.com.ar)
[21:54:33] <neilthereildeil> why doesnt the child process see the semaphore i defined globally and initialized (in the global scope) of the parent?
[21:54:53] *** Joins: fcjsx (~fcjsx@2800:a4:826:7000:a2cc:8392:fcde:d136)
[21:55:14] <tunixman> yeah, there it is...
[21:56:14] <tunixman> My guess is it's getting reinitialized in the child.
[21:56:45] <tunixman> That module level code is going to execute whenever the module is loaded, even in the child.
[21:56:58] <neilthereildeil> shit im doing that in my big buggy app too......
[21:57:23] <neilthereildeil> whats the right way to initialize and share a semaphore with the child?
[21:58:44] <neilthereildeil> a mutliprocessing semaphore
[21:58:44] *** Quits: diek (~diek@187.36.4.113) (Read error: Connection reset by peer)
[21:58:57] *** Joins: Liexei (Liexei@user/liexei)
[21:59:24] *** Quits: venmx (~bertie@host86-129-227-84.range86-129.btcentralplus.com) (Ping timeout: 258 seconds)
[21:59:26] *** Joins: diek (~diek@2804:14d:7681:82bd:e84f:20c9:c5ab:ee57)
[21:59:28] *** Quits: control (~guesswho@user/control) (Ping timeout: 250 seconds)
[21:59:40] *** Joins: Titore (Titore@user/titore)
[22:00:33] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 258 seconds)
[22:01:07] <bjs> neilthereildeil: I'm guessing it's using a fork variant and did so when you made the Pool (so before the semaphore was created?) but that's a total guess, I have vague memory that it didnt' actually fork until it got the first task
[22:01:28] *** Joins: Ogmios (~Ogmios@user/ogmios)
[22:02:07] <neilthereildeil> bjs: am i sharing the semaphore with the child processes incorrectly?
[22:02:14] <neilthereildeil> that might (?) be the bug
[22:02:15] <neilthereildeil> ?
[22:02:36] *** Quits: todda7 (~torstein@2a02:587:3709:c419:1a5e:3e8a:ee7b:40ae) (Ping timeout: 244 seconds)
[22:04:19] *** Quits: rendar (~rendar@user/rendar) ()
[22:05:45] *** Quits: douglaswinship (~douglaswi@78.40.148.180) (Remote host closed the connection)
[22:06:01] <neilthereildeil> bjs: what tunixman said might be correct: on line 6, the child processes might be reinitializing the semaphore variable that was defined in the parent process
[22:06:22] <bjs> neilthereildeil: did you read what I linked earlier?  multiprocessing has 3 modes
[22:06:28] <neilthereildeil> yea i saw that
[22:06:29] *** Joins: Seiryuu (~Seiryuu@ip174-103-176-143.adsl2.static.versatel.nl)
[22:06:50] *** Quits: dude-x (~textual@pool-100-1-141-108.nwrknj.fios.verizon.net) (Quit: Textual IRC Client: www.textualapp.com)
[22:06:52] <bjs> neilthereildeil: so the obvious question is what mode are you using :)
[22:06:53] <evidlo> do people commonly recognize ET as a timezone?
[22:07:17] <matsaman> if I saw it after a time of day, I don't think I'd bat an eye
[22:07:20] <evidlo> seems like EST is more common, even if used incorrectly
[22:07:34] <matsaman> to be fair, the 'S' is irrelevant
[22:07:38] *** Quits: dcaro (~dcaro@user/dcaro) (Ping timeout: 252 seconds)
[22:07:39] <matsaman> only the 'E' is actually relevant
[22:07:46] <matsaman> 9:00 pm (E-astern)
[22:08:12] *** Joins: dude-x (~textual@pool-100-1-141-108.nwrknj.fios.verizon.net)
[22:08:18] <matsaman> when you're referring to a time zone, it's clear it's to do with time, and a standardization
[22:08:26] <matsaman> as a human, anyway
[22:08:27] <evidlo> ET encompasses both EST and EDT, so its a little bit relevant
[22:08:33] *** Joins: nomic (~nomic@2a00:23c6:9910:1201:cdae:ea4b:93a4:1c59)
[22:08:42] <matsaman> it can be, sure
[22:08:51] <neilthereildeil> bjs: im running python 2.7 on Linux so im GUESSING its fork
[22:08:58] <matsaman> usually you won't be coordinatnig with people in both EST and EDT simultaneously
[22:09:02] <matsaman> coordinating*
[22:09:30] <bjs> neilthereildeil: oh right,  2.7
[22:09:40] <bjs> neilthereildeil: yes that's 'fork',  I think what happened is what I said before
[22:11:05] *** Quits: Gurkenglas (~Gurkengla@dslb-002-203-144-156.002.203.pools.vodafone-ip.de) (Quit: Client closed)
[22:11:07] *** Quits: justinf210 (~justinf21@84.sub-97-44-1.myvzw.com) (Remote host closed the connection)
[22:11:25] *** Joins: justinf210 (~justinf21@84.sub-97-44-1.myvzw.com)
[22:11:38] <neilthereildeil> im my code correct though?
[22:11:40] <neilthereildeil> is*
[22:13:03] *** Quits: diek (~diek@2804:14d:7681:82bd:e84f:20c9:c5ab:ee57) (Remote host closed the connection)
[22:13:12] *** Quits: mesaboogie (mesaboogie@user/mesaboogie) (Remote host closed the connection)
[22:13:38] <bjs> neilthereildeil: well no, it's not inherting the semaphore.  Probably because you tried to create it after making the Pool
[22:14:54] <neilthereildeil> so i have to create the pool after the semaphore?
[22:14:58] *** Quits: i0e (~is0ke3@user/is0ke3) (Ping timeout: 252 seconds)
[22:15:22] <bjs> neilthereildeil: probably, if the Pool creates the processes immediately...
[22:15:38] <neilthereildeil> what about the global namespace?
[22:15:45] <bjs> neilthereildeil: what about it
[22:15:49] <neilthereildeil> did i declare the seamphore correctly and in the right place?
[22:15:51] <bjs> no
[22:16:00] <bjs> you did it after creating the Pool
[22:16:30] <tunixman> t neilthereildeil https://paste.ubuntu.com/p/xpT2BY5r9z/
[22:16:30] <neilthereildeil> declare
[22:16:38] *** Quits: codificat (~pep@66.red-79-154-168.dynamicip.rima-tde.net) (Quit: leaving)
[22:16:57] <tunixman> You need the if __name__ == "__main__" guard so it only runs in the parent process.
[22:17:08] <bjs> neilthereildeil: also the whole program seems wrong,  note mine did not use a BoundedSemaphore and there is nothing stopping the child go over  the limit
[22:17:20] *** Quits: justinf210 (~justinf21@84.sub-97-44-1.myvzw.com) (Remote host closed the connection)
[22:17:35] <bjs> so if you run it for long enough eventually the child will crash
[22:17:55] <neilthereildeil> ok, changing the order fixed it
[22:18:24] <neilthereildeil> man, this language is something else haha. people think its EASIER than C??
[22:18:44] <neilthereildeil> im so thankful for compiletime error checking!
[22:18:47] <bjs> neilthereildeil: what do you mean?
[22:18:48] <tunixman> Hahaha well, posix process control and IPC are esoteric in every language.
[22:18:54] <bjs> do you think C would've helped you with any of these issues :)
[22:18:58] <tunixman> And Python is sticking very closely to that model.
[22:19:03] <TML> neilthereildeil: Yes, I find python easier to write correct code in than C :)
[22:19:04] <neilthereildeil> C allows multithreading :)
[22:19:10] <bjs> neilthereildeil: so does Python
[22:19:14] <NoImNotNineVolt> lol
[22:19:16] <neilthereildeil> thats not multithreading
[22:19:20] <bjs> neilthereildeil: they're pthreads :)
[22:19:22] <tunixman> C also doesn't run everything in a module on load after a fork.
[22:19:33] <bjs> tunixman: nor does multiprocessing
[22:19:40] <bjs> except with 'spawn' (in Python > 3)
[22:19:48] *** Joins: rama (~rama@c-24-130-92-222.hsd1.ca.comcast.net)
[22:19:57] <neilthereildeil> anyone thats serious about performance and maintainability of a project shouldnt be using python
[22:20:13] <bjs> neilthereildeil: okay have you now just turned into "hate on Python because I don't understand UNIX processes" mode?
[22:20:18] <tunixman> It seems like it did, but I might also not quite understand what happened and my fix just hid it...
[22:20:29] <TML> neilthereildeil: Well, that's certainly an opinion. Others clearly have a different one. :)
[22:20:40] <neilthereildeil> as a C programmer, everything seems wasteful in python
[22:20:42] <neilthereildeil> but sorry
[22:20:49] <bjs> neilthereildeil: I'm happy to help you understand semaphores and processes and how to do it properly,  I'll just be honest with you if we were in C and you were trying to do the same thing we'd be having the exact same conversation
[22:20:56] <bjs> tbh we were very close to just being off-topic
[22:20:56] <NoImNotNineVolt> i agree with the performance opinion. python's solution to performance complaints amounts to "don't use python".
[22:21:01] <tunixman> I don't think we would though...
[22:21:06] <NoImNotNineVolt> but this indeed is a bit meta
[22:21:11] <tunixman> but yeah this is off topic I think.
[22:21:37] <bjs> No I meant the discussion earlier about semaphores and fork and inheritance and all that, it's not Python doing it and we'd be having the same conversation about sharing and COWs in any language (including C)
[22:21:50] *** Joins: n00b101 (uid448161@id-448161.tooting.irccloud.com)
[22:21:51] <bjs> infact my little example earlier basically was a C program, all the functions were just thin wrappers around C
[22:22:08] <tunixman> There's a lot more going on in python than in C even with similar code though.
[22:22:18] <tunixman> Python's runtime is considerably more featureful.
[22:22:20] <bjs> not really wrt what we were talking about
[22:22:27] <tunixman> Sure, alright.
[22:22:39] <bjs> of course there's a bunch of _unrelated_ stuff, like refcounting and garbage collection and fancy object models but now that's just being distracted
[22:22:49] *** Joins: boB_K7IQ (~boB_K7IQ@152.44.147.180)
[22:23:19] <tunixman> Sure, yeah, alright.
[22:23:27] <rama> if I compose a frozenset from a tuple would there be any guarantee of the ordering of the items in the frozenset?
[22:23:33] <tunixman> I mean I wouldn't really know anyway, I just run code, not write it.
[22:23:51] <bjs> rama: no
[22:24:08] <TML> neilthereildeil: I spent the first 15 years of my software engineering career writing in C, and haven't missed null pointers, buffer over/underflows, or the sparse ecosystem. But hey, I'm glad to hear you found a language you enjoy! :)
[22:24:50] *** Joins: Ashu (~ashwin@45.116.231.3)
[22:25:30] <neilthereildeil> i also spent like a week debugging why my process's memory usage is monotonically increasing even after i del objects. turns out python things memory is free and never releases virtual memory back to the OS
[22:25:41] <neilthereildeil> the answer was to restart the process
[22:25:50] <neilthereildeil> im still searching for a mor ereasonable solution'
[22:26:05] <rama> bjs: thats what i thought, i guess i need to find the proof for the non-deterministic ordering of frozensets.
[22:26:24] <TML> neilthereildeil: That's not something unique to Python, that's how memory management works in general.
[22:26:26] <bjs> rama: frozenset((3,2,1))
[22:26:53] *** Joins: drillbyt (~drillbyt@user/drillbyt)
[22:26:58] <bjs> well, maybe not "non-determinstic". the same frozenset should give you the same order in the same program.
[22:27:05] <bjs> but it at least does not maintain the order 3,2,1
[22:27:25] <bjs> infact I know a little of the internals and would bet money that it'll give you 1,2,3 every time no matter what order you put them in :)
[22:28:12] <neilthereildeil> no, in C when i free memory, crt gives it back to the OS. the VM is unmapped
[22:28:19] <TML> neilthereildeil: https://stackoverflow.com/questions/1421491/does-calling-free-or-delete-ever-release-memory-back-to-the-system has some discussion of this in language-agnostic terms, including why it's actually a bad idea in general for a process to give malloc()'d memory back to the system.
[22:28:23] *** Joins: mesaboogie (mesaboogie@user/mesaboogie)
[22:28:46] <tunixman> free keeps the memory mapped so it can be reused usually...
[22:28:53] *** Quits: d3sync (~d3sync@46.246.128.223.dsl.dyn.forthnet.gr) (Ping timeout: 252 seconds)
[22:28:54] <tunixman> "Occasionally, free can actually return memory to the operating system and make the process smaller. Usually, all it can do is allow a later call to malloc to reuse the space. In the meantime, the space remains in your program as part of a free-list used internally by malloc.
[22:28:57] <bjs> neilthereildeil: unmapped?
[22:28:59] <tunixman> https://www.gnu.org/software/libc/manual/html_node/Freeing-after-Malloc.html
[22:29:17] <neilthereildeil> VirtualFree on windows
[22:29:20] <bjs> neilthereildeil: Python collects chunks of memory and gives back a whole chunk at once.
[22:29:41] <neilthereildeil> which is what the CRT does internally
[22:30:13] <bjs> neilthereildeil: when you del an object, it's unlikely to fill a whole chunk by itself and it's also unlikely to just give it up. e.g. when you free a list it's likely to keep the list around for a while because you're very likely to create another list soon and it can re-use the memory much faster than giving up the virtual memory
[22:30:16] *** Quits: Crassus (~Crassus@user/crassus) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[22:30:20] *** Quits: Lando-SpacePimp (~Lando@user/lando-spacepimp) (Ping timeout: 265 seconds)
[22:30:47] <tunixman> https://sourceware.org/glibc/wiki/MallocInternals
[22:30:57] *** Joins: magla (~gelignite@55d434ed.access.ecotel.net)
[22:30:58] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[22:31:01] <bjs> it can be frustrating if you have a lot of fragmented objects though as you can end up with low utilization of those chunks (areas? I forget what the name is, SnoopJ / Yhg1s know more) and so Python never frees them
[22:31:05] <TML> neilthereildeil: Well, I've never used Windows, so I can't speak to what happens there. But the behaviour you describe in Python is how malloc() works in general on Unix-based systems, for reasons laid out in the link I provided (among others).
[22:31:23] <tunixman> python also uses malloc and free internally, so even when it calls free the memory won't be immediately released.
[22:31:36] <tunixman> free() itself decides when to release it back to the os.
[22:31:39] <bjs> this is where my understanding of Python internals are a little more shaky
[22:32:33] *** Quits: supakeen (~user@python/site-packages/supakeen) (Remote host closed the connection)
[22:32:43] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[22:32:49] <neilthereildeil> assuming python uses glibc or something similar, the VM should be unmapped on linux also, but i didnt see that when i had a long-running pythong process
[22:32:56] *** Joins: supakeen (~user@python/site-packages/supakeen)
[22:33:04] *** Joins: diek (~diek@2804:14d:7681:82bd:e84f:20c9:c5ab:ee57)
[22:33:10] *** Joins: tbcr (~tbcr@user/tbcr)
[22:33:16] <tunixman> 1. python won't call free immediately. 2. free() won't always release memory immediately.
[22:33:41] <tunixman> My guess is python kept the memory around because it was expecting it to be reused.
[22:33:57] <neilthereildeil> i think the assumption in the python virtualmachine and programming model is that we have infinite resources. this assumption might work sometimes in the large cloud servers, but when you are running a long-running server process, these assumptions are violated
[22:34:07] <neilthereildeil> and resources are actually NOT inifinite
[22:34:23] <ChrisWarrick> neilthereildeil: where is that assumption made? why does it not apply to C code?
[22:34:30] *** Joins: i0e (~is0ke3@user/is0ke3)
[22:34:50] <tunixman> Python's memory management is C's memory management for the most part, aside from the garbage collector. It's literally calling mallloc and free.
[22:35:24] <neilthereildeil> free unmaps virtualmemory and gives it back to the OS. i never saw that happen in python (although you all are saying theres a codepath somewhere that does that in python)
[22:35:26] <bjs> there's some extra steps inbetween
[22:35:31] <tunixman> free doesn't though.
[22:35:35] <bjs> neilthereildeil: it won't unmap it immediately
[22:35:36] <tunixman> not always.
[22:35:39] *** Quits: akaWolf (~akaWolf@akawolf.org) (Ping timeout: 265 seconds)
[22:35:47] <neilthereildeil> maybe python is keeping the VM around for something else?
[22:35:48] <tunixman> only when there's enough contiguous chunks.
[22:35:51] <bjs> neilthereildeil: imagine you free some non-aligned pointer.   It *cant* give back the virtual memory yet
[22:35:54] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:2132:cd52:1e4a:f46a) (Ping timeout: 240 seconds)
[22:35:56] <tunixman> Yeah, that's what we've been saying  Ithink...
[22:36:00] <neilthereildeil> agreed
[22:36:02] <bjs> neilthereildeil: you keep saying "the VM".  "the VM" is just the whole Python program
[22:36:14] <neilthereildeil> sry, i meant VM as in virtual memory just now
[22:36:17] <bjs> neilthereildeil: if you read my messages you'll see that yes, there are numerous places where Python keeps things around
[22:36:27] <tunixman> python keeps the memory until it looks like it's not going to be used. free keeps it until there's enough contiguous chunks it can release.
[22:36:40] <tunixman> so there are two levels in python of holding memory, and at least one in c.
[22:38:04] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 265 seconds)
[22:38:12] <bjs> neilthereildeil: Python will malloc() large chunks of memory to use as object storage. Then inside those chunks it'll allocate Python objects. When you del a Python object it will interally "free" up some space in the chunk to use for more Python objects.  Eventually a whole chunk can be freed and given back to the OS
[22:38:15] <tunixman> free: "Note that, in general, "freeing" memory does not actually return it to the operating system for other applications to use. The free() call marks a chunk of memory as "free to be reused" by the application, but from the operating system's point of view, the memory still "belongs" to the application. However, if the top chunk in a heap - the portion adjacent to unmapped memory - becomes large
[22:38:21] <tunixman> enough, some of that memory may be unmapped and returned to the operating system.
[22:38:24] <tunixman> "
[22:38:55] <tunixman> and then free will hold onto it until it also determines it's a good candidate to be released back to the OS.
[22:39:01] <bjs> neilthereildeil: so once you allocate an object in Python, the smaller the object is the harder it is for the memory it sits in to actually ever be given back.  Obviously larger objects are easier (e.g. try make a massive int and del it). Most objects are "small"
[22:39:03] <neilthereildeil> on windows i think its 64K chunks are given back to the OS
[22:39:27] <tunixman> So we have Python GC on top of malloc/free chunk management on top of the various OS calls to take and release virtual memory.
[22:39:29] <bjs> neilthereildeil: no no you're confusing me,  Python will e.g. malloc(some number of megs) and then has its own allocator inside those
[22:39:42] <neilthereildeil> yea tha makes sense
[22:39:45] <neilthereildeil> that*
[22:39:54] *** Quits: xkuru (~xkuru@user/xkuru) (Ping timeout: 252 seconds)
[22:39:58] <tunixman> And both the GC and the malloc/free memory management have to be satisfied that memory is done for it to be released back to the OS.
[22:40:24] <neilthereildeil> yea i think the GC wasnt satisfied last time i was figuring out why i kept getting OOM killed
[22:40:26] <tunixman> the c library also works under the assumption that getting memory pages from the OS isn't cheap, so it tries to avoid thrashing them.
[22:40:35] <tunixman> oh yeah hahaha
[22:40:39] <tunixman> that can happen...
[22:40:42] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[22:40:54] * tunixman 1000 yard stare
[22:41:23] <tunixman> the OOM killer is yet another layer of oh god memory why
[22:42:21] <tunixman> t neilthereildeil https://stackoverflow.com/questions/1316767/how-can-i-explicitly-free-memory-in-python
[22:42:53] <tunixman> The real issue (as it is in C) I think is chunk fragmentation, and gc.collect seems like it might help with that.
[22:42:57] <neilthereildeil> yea i think i saw that article a long time ago
[22:43:30] <neilthereildeil> and i remember that python reverts to calling the native trim() function if you really wanna free the 2GB virtualMem thats being hoarded
[22:43:50] <tunixman> yeah, that's right. or at least the underlying free() call will call trim at the very least.
[22:44:01] <tunixman> I'm looking for the source of gc haha
[22:44:46] <bjs> neilthereildeil: if you really want to see Python give back memory, try make a really big int and then del it
[22:48:24] *** Joins: akaWolf (~akaWolf@akawolf.org)
[22:48:53] *** Joins: glumanda (~manu@194-208-201-025.tele.net)
[22:48:54] <tunixman> hm actually it's taking a lot just to see a small increase in memory. a = 1000 ** 3; then lots of a = a ** 3
[22:49:30] <bjs> tunixman: `x = 2; while True: x **= 2` will do it.  We've been learning a lot about exponential growth recently ;)
[22:49:50] *** shinegutsy is now known as DefectrChocolat
[22:49:58] *** Joins: Lando-SpacePimp (~Lando@user/lando-spacepimp)
[22:50:07] *** Joins: gerikson (~gerikson@user/gerikson)
[22:50:10] *** Quits: tdoss (~tdoss@wsip-70-166-238-194.ks.ks.cox.net) (Quit: Lost terminal)
[22:50:16] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:2132:cd52:1e4a:f46a)
[22:50:50] *** Quits: diek (~diek@2804:14d:7681:82bd:e84f:20c9:c5ab:ee57) (Remote host closed the connection)
[22:51:03] *** maxking is now known as abraj
[22:51:05] *** abraj is now known as araj
[22:51:08] *** araj is now known as maxking
[22:52:04] *** Joins: kujo (~kujo@188.166.12.52)
[22:52:07] <dale> If I run "poetry update", and it reports "No dependencies to install or update", but poetry.lock gets updated with some additional wheel names and hashes (for platforms I'm not using), is Poetry just noticing that some new wheels have popped up on PyPI and recording them for future reference?  I.e. shall I commit these no-op-ish changes?
[22:52:50] <tunixman> the **3 is a bigger power and should do it faster...
[22:52:57] <dale> In this case I think it's just that some new cffi manylinux builds popped up since we last ran "poetry update", but I'm new to poetry.
[22:54:25] *** Joins: node1 (~node1@user/node1)
[22:54:29] *** Joins: rememberYou (~someone@user/rememberyou)
[22:55:17] *** Joins: mcglk (~mcglk@131.191.49.120)
[22:55:31] *** Joins: venmx (~bertie@host86-129-227-84.range86-129.btcentralplus.com)
[22:56:19] *** Quits: andrzejv (~andrzejv@78-56-77-187.static.zebra.lt) (Read error: Connection reset by peer)
[22:56:58] <bjs> tunixman: pfft try it with **=4 !.  but seriously all of them should only take a second or two to use an alarming amount of your memory.  You could then like, add a little kill switch that stopped the loop and del x'd and you can watch the virtmem usage go up/down
[22:57:00] <bjs> (hopefully)
[22:57:15] *** Joins: andrzejv (~andrzejv@78-56-77-187.static.zebra.lt)
[22:57:49] <bjs> as before this is just theory and practice can be muddy,  but my last little script experient for neilthereildeil worked perfectly so I'm not going to chance my luck too much today with practical experiments :)
[22:58:50] *** Quits: jim87 (~gfurlan@2001:b07:5d37:f91e:bbde:5043:a034:b725) (Ping timeout: 250 seconds)
[22:59:41] *** Joins: fofoni (~fofoni@user/fofoni)
[23:00:21] *** Quits: venmx (~bertie@host86-129-227-84.range86-129.btcentralplus.com) (Ping timeout: 258 seconds)
[23:00:21] *** Quits: rajkosto (~rajkosto@cable-178-149-127-189.dynamic.sbb.rs) (Ping timeout: 258 seconds)
[23:00:44] <tunixman> hahahah
[23:00:59] <tunixman> "I think something's wrong. Let's poke it with a stick!"
[23:01:07] * tunixman sharpens his stick.
[23:01:43] <grym> "i know, you have a broken finger"
[23:02:09] <tunixman> That's why I use a stick now...
[23:02:44] *** Quits: DodgeThis (~DodgeThis@246.102.90.149.rev.vodafone.pt) (Read error: Connection reset by peer)
[23:04:03] <tunixman> ok now we're getting somewhere. Just had to check the right number I guess.
[23:05:20] *** Quits: normic (~normic@p4fc30985.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[23:06:01] <tunixman> hm, no, it's staying flat. I wonder if it's the MacOS memory allocator...
[23:07:17] <bjs> i'm not sure hwo your memory usage is staying flat if you're doing that loop i gave... it's using exponentially more memory every iteration and there's no sleeps...
[23:07:22] <tunixman> no, it's slowly climbing  I guess.
[23:07:36] <tunixman> Yeah, same as mine, but mine has a larger base and exponent.
[23:07:37] <bjs> tunixman: check that you really do have 2 *s
[23:07:46] <tunixman> I have 2*.
[23:07:53] <tunixman> I can tell by the time it takes on each iteration.
[23:08:06] <tunixman> "a = a **3"
[23:08:13] <bjs> maybe your malloc takes exponentially more time exactly in tandem with how much it's growing
[23:08:16] <bjs> shrug :)
[23:08:17] <tunixman> this latest has been running 30 minutes or so.
[23:08:19] <tunixman> hahahahahah
[23:08:25] <tunixman> Hopefully it does...
[23:08:40] <bjs> tunixman: what is your initial value for a?
[23:09:34] *** Quits: guntbert (~yesitsme@user/guntbert) (Quit: leaving)
[23:09:38] <tunixman> a = 1000**6
[23:09:53] <tunixman> But I also not using a fresh session so there's probably plenty of garbage lying around.
[23:10:19] *** Quits: xsperry (~as@user/xsperry) (Ping timeout: 258 seconds)
[23:10:46] *** Joins: drincruz (~drincruz@ec2-18-235-23-153.compute-1.amazonaws.com)
[23:10:47] <tunixman> ok new session, now a loop.
[23:10:50] *** Joins: guntbert (~yesitsme@user/guntbert)
[23:11:17] <tunixman> a = 3000; while True: a = a ** 3
[23:12:50] *** Quits: slavfox (~slavfox@ipv4-93-158-232-111.net.internetunion.pl) (Quit: ZNC 1.8.2 - https://znc.in)
[23:13:18] <tunixman> ok well I have enough allocated to see how much gets released anyway.
[23:13:21] *** Quits: drincruz_ (~drincruz@ool-44c748be.dyn.optonline.net) (Ping timeout: 265 seconds)
[23:13:30] *** Quits: mcglk (~mcglk@131.191.49.120) (Quit: (seeya))
[23:13:44] *** Joins: slavfox (~slavfox@93.158.232.111)
[23:13:59] *** Joins: mcglk (~mcglk@131.191.49.120)
[23:14:11] *** Quits: glumanda (~manu@194-208-201-025.tele.net) (Quit: WeeChat 3.2)
[23:14:22] *** Quits: rwb (~augh@theguntretort.com) (Ping timeout: 252 seconds)
[23:15:15] *** Quits: Deneb (~johnch@148.82.159.143.dyn.plus.net) (Quit: Leaving)
[23:15:40] *** Joins: clf59 (~clf59@user/clf59)
[23:16:26] *** Joins: pycode1 (~pycode@2001:b07:5d28:551:ffde:191f:cd94:68ae)
[23:16:33] *** Joins: diek (~diek@2804:14d:7681:82bd:e84f:20c9:c5ab:ee57)
[23:17:01] *** Quits: wingsorc (~wingsorc@user/wingsorc) (Quit: Leaving)
[23:17:19] *** Quits: RangerBobVA (~bmaddox@user/rangerbobva) (Quit: Leaving)
[23:17:48] *** Quits: diek (~diek@2804:14d:7681:82bd:e84f:20c9:c5ab:ee57) (Remote host closed the connection)
[23:17:58] *** Quits: guntbert (~yesitsme@user/guntbert) (Quit: leaving)
[23:18:21] *** Joins: guntbert (~yesitsme@user/guntbert)
[23:18:23] *** Joins: diek (~diek@2804:14d:7681:82bd:e84f:20c9:c5ab:ee57)
[23:19:15] *** Joins: tim__ (~tmart@47-220-53-233.gtwncmkt04.res.dyn.suddenlink.net)
[23:20:03] *** Joins: gr33n7007h (~gr33n7007@user/gr33n7007h)
[23:20:04] *** Quits: fcjsx (~fcjsx@2800:a4:826:7000:a2cc:8392:fcde:d136) (Ping timeout: 250 seconds)
[23:20:10] <tunixman> ok, new test, new session.
[23:21:12] *** Joins: Asmodee[T] (~Asmodee@gateway/tor-sasl/asmodee)
[23:22:06] <tunixman> the answer seems to be "none of it immediately". which is sort of what the docs suggest.
[23:22:25] *** Joins: knull (~knull@88-111-144-111.dynamic.dsl.as9105.com)
[23:22:47] <tunixman> gc.collect() nudged things down a bit but not much.
[23:23:00] *** Quits: knull (~knull@88-111-144-111.dynamic.dsl.as9105.com) (Client Quit)
[23:23:22] <tunixman> I guess I should try in C just to be thorough.
[23:23:30] *** Quits: tmart (~tmart@47-220-53-233.gtwncmkt04.res.dyn.suddenlink.net) (Ping timeout: 265 seconds)
[23:23:32] *** Quits: diek (~diek@2804:14d:7681:82bd:e84f:20c9:c5ab:ee57) (Ping timeout: 250 seconds)
[23:23:46] *** Quits: guntbert (~yesitsme@user/guntbert) (Quit: Reconnecting)
[23:24:03] <mcglk> Is there a canonical way to use a list as a sequence of dictionary keys? e.g., translating ['a', 'b', 'c'] to somedict['a']['b']['c']?
[23:24:04] *** Joins: marcelo56 (~Guest613@static.114.78.0.143.cps.com.ar)
[23:24:06] *** Joins: guntbert (~yesitsme@user/guntbert)
[23:24:14] <marcelo56> Hi
[23:24:33] <marcelo56> I need to write a python list into a file (.txt), but I have some trouble with some characters (Spanish áéíóú) when reading and writing the fie. Any ideas? Thanks
[23:25:27] <The-Compiler> marcelo56: what kind of trouble? How are you reading/writing the file?
[23:25:58] <grym> marcelo56: pathlib.Path('myfile.txt').write_text(json.dumps(mylist), encoding="utf8")
[23:26:18] <marcelo56> a json is better, right?
[23:26:37] *** Quits: Sheilong (uid293653@id-293653.charlton.irccloud.com) (Quit: Connection closed for inactivity)
[23:26:40] <marcelo56> I'd rather use a txt
[23:26:54] <marcelo56> f.write("%s\n" % item.encode('utf-8'))
[23:27:01] <marcelo56> I'm using this
[23:27:06] <The-Compiler> mcglk: I'd do something like   r = somedict; for k in keys: r = r.get(k)
[23:27:15] <bjs> marcelo56: what happens to f.write(item) ?
[23:27:28] *** Joins: cedric (~cedric@2a01:cb11:867:c200:9eb0:38cb:7b14:a55f)
[23:27:35] <bjs> marcelo56: and what kind of "trouble" are you getting?
[23:27:39] *** Joins: Pr0phet (sid505706@id-505706.stonehaven.irccloud.com)
[23:27:46] <The-Compiler> grym: note that'll construct the whole JSON in memory before writing it, which might be a problem if there's a lot of data
[23:27:58] <grym> marcelo56: https://bpa.st/U6DA
[23:28:00] <grym> e.g.
[23:28:49] <The-Compiler> marcelo56: is this Python 2?
[23:28:50] <mcglk> That would be great if I wanted somedict['a'], somedict['b'] and somedict['c'], but I want somedict['a']['b']['c'].
[23:29:01] <The-Compiler> mcglk: that's what this code gets you though?
[23:29:29] <mcglk> You're right: I misread it.
[23:29:45] <mcglk> Gah. My apologies.
[23:30:03] <The-Compiler> no worries :)
[23:30:06] <mcglk> Thank you.
[23:30:17] *** Joins: justinf210 (~justinf21@26.sub-97-44-1.myvzw.com)
[23:30:24] *** Quits: noctavian (~noctavian@gateway/tor-sasl/noctavian) (Ping timeout: 244 seconds)
[23:30:25] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[23:30:32] *** Quits: IHasFinger (~JJ_@94.4.131.178) (Read error: Connection reset by peer)
[23:30:50] *** Joins: noctavian (~noctavian@gateway/tor-sasl/noctavian)
[23:31:12] <marcelo56> already solved it lol
[23:31:25] <marcelo56> it was more simple than I thought
[23:31:26] <marcelo56> thx
[23:31:31] <armin> GAH!
[23:32:25] *** Joins: alguien (~alguien@user/alguien)
[23:32:51] *** Quits: penguino (~mrpenguin@user/mrpenguin) (Remote host closed the connection)
[23:33:04] <grym> marcelo56: in general, prefer serialization formats that have prebuilt tools though
[23:33:17] *** Joins: bomb-on (~bomb-on@194.144.47.113)
[23:33:18] *** Joins: penguino (~mrpenguin@user/mrpenguin)
[23:33:21] *** Joins: pnoud (~pnoud@user/pnoud)
[23:33:43] *** Quits: Payam (~Payam@138.106.57.132) (Ping timeout: 246 seconds)
[23:33:44] *** Joins: Sheilong (uid293653@id-293653.charlton.irccloud.com)
[23:33:51] *** Quits: fedenix (~fedenix@gateway/tor-sasl/fedenix) (Remote host closed the connection)
[23:33:51] <tunixman> On Mac OS, C's free() will free memory back to the OS pretty quickly, so I think most of the issues neilthereildeil saw were python allocator issues.
[23:33:54] *** Quits: Praise (~Fat@user/praise) (Ping timeout: 240 seconds)
[23:33:59] <tunixman> at least on mac os. I didn't try linux.
[23:33:59] *** Quits: cedric (~cedric@2a01:cb11:867:c200:9eb0:38cb:7b14:a55f) (Quit: Konversation terminated!)
[23:34:21] *** Joins: cedric (~cedric@2a01:cb11:867:c200:9eb0:38cb:7b14:a55f)
[23:34:22] *** Joins: fedenix (~fedenix@gateway/tor-sasl/fedenix)
[23:35:26] <tunixman> but then again I did a large block allocation then freed it immediately, which hits the sweet spot for free.
[23:35:30] *** Quits: node1 (~node1@user/node1) (Quit: Leaving)
[23:35:51] *** Quits: penguino (~mrpenguin@user/mrpenguin) (Remote host closed the connection)
[23:36:12] *** Joins: penguino (~mrpenguin@user/mrpenguin)
[23:36:58] *** Quits: pycode1 (~pycode@2001:b07:5d28:551:ffde:191f:cd94:68ae) (Ping timeout: 250 seconds)
[23:37:26] <neilthereildeil> im reading about zombie processes on Linux
[23:37:33] <grym> (¬x_x)¬
[23:37:42] <grym> pidsssss
[23:37:44] <neilthereildeil> i included a SIGCHLD handler in my test program
[23:38:16] *** Quits: pnoud (~pnoud@user/pnoud) (Ping timeout: 250 seconds)
[23:38:22] *** Joins: rwb (~augh@theguntretort.com)
[23:38:25] <neilthereildeil> but it doesnt always call the SIGCHLD handler a number of times equal to the number of children i have
[23:38:31] <neilthereildeil> i think its a race
[23:38:47] <neilthereildeil> i think the parent dies before the last time the SIGCHLD handler is called
[23:38:57] *** Quits: guntbert (~yesitsme@user/guntbert) (Quit: Reconnecting)
[23:39:05] <neilthereildeil> am i supposed to be calling wait() in the parent?
[23:39:11] <neilthereildeil> to avoid zombie children?
[23:39:12] *** Joins: guntbert (~yesitsme@user/guntbert)
[23:39:15] <neilthereildeil> im on linux
[23:39:17] <tunixman> Yeah, that's right.
[23:39:38] <tunixman> You have to wait on the children. But you can wait without blocking, and it'll return -1 when there are none left I think.
[23:40:10] <tunixman> But the other thing is the signal handler may not get called once for each child if some children die while you're in the signal handler.
[23:40:26] <neilthereildeil> ohhh trueeee
[23:40:26] *** Joins: transhumanist (~hiken@2601:196:8800:35f0:1d4e:e5ea:4e24:3511)
[23:40:48] <neilthereildeil> because you cannot count multiple concurrent signals, right?
[23:41:43] *** Quits: sco1 (~sco1@charon.whatbox.ca) (Quit: ZNC 1.8.2 - https://znc.in)
[23:42:51] *** Quits: moto (~moto@user/moto) (Ping timeout: 268 seconds)
[23:43:15] *** Quits: guntbert (~yesitsme@user/guntbert) (Client Quit)
[23:43:16] <NeilRG> the master to main change broke all my projects
[23:43:20] <NeilRG> :(
[23:43:30] *** Joins: guntbert (~yesitsme@user/guntbert)
[23:43:33] *** Joins: seachdamh (~kvirc@user/seachdamh)
[23:45:11] *** Quits: marcelo56 (~Guest613@static.114.78.0.143.cps.com.ar) (Quit: Client closed)
[23:46:22] *** Quits: guntbert (~yesitsme@user/guntbert) (Client Quit)
[23:46:36] *** Joins: guntbert (~yesitsme@user/guntbert)
[23:47:13] *** Quits: seachdamh (~kvirc@user/seachdamh) (Read error: Connection reset by peer)
[23:49:09] *** Joins: moto (~moto@user/moto)
[23:49:11] <tunixman> t neilthereildeil it's open to interpretation... some will deliver as many signals as are sent, others won't.
[23:49:19] *** Quits: justinf210 (~justinf21@26.sub-97-44-1.myvzw.com) (Remote host closed the connection)
[23:49:38] <tunixman> https://stackoverflow.com/questions/8398298/handling-multiple-sigchld
[23:49:46] <tunixman> is an okay overview.
[23:50:40] *** Joins: bungle (~bungle@77-147-16-94.dyn.cable.fcom.ch)
[23:50:41] <neilthereildeil> tunixman: hmm then i guess my strategy of catching sigchld in the parent and printing stack to see who exited abnormally (and therefore didnt release the semaphore will not work
[23:50:58] <neilthereildeil> because i am not guaranteed to be able to print output for EVERY child that died...
[23:51:21] <tunixman> I don't think you can get the child's stack from the parent that way...
[23:51:47] <neilthereildeil> i did. def child_handler(h, frameObj):     traceback.print_stack(frameObj)
[23:51:52] <tunixman> But you can at least print the child process id and exit code.
[23:52:04] <tunixman> That'll give you the frame that was interrupted in the parent.
[23:52:09] <tunixman> the signaled process.
[23:52:14] <tunixman> it won't give you the child frame.
[23:52:22] <tunixman> that's in a different address space.
[23:52:40] <neilthereildeil> ohhhhh
[23:52:41] *** Joins: thiras (~thiras@user/thiras)
[23:52:46] <neilthereildeil> this is the stack frame in the PARENT
[23:52:50] <neilthereildeil> thats useless
[23:52:54] <tunixman> hahahah yeah...
[23:53:01] <neilthereildeil>  damn this is a hard problem
[23:53:05] <neilthereildeil> how the hell do i debug this??
[23:53:24] <neilthereildeil> i need to see which children are dying abnormally and therefore not relasing the semaphore
[23:53:27] <neilthereildeil> hmmm
[23:53:57] *** Joins: Steeve (~steve@user/steeve)
[23:54:11] <TML> neilthereildeil: How do you want to identify "which child" it was that died?
[23:54:18] <neilthereildeil> PID
[23:54:44] <TML> What's the point of capturing the PID of a process after it is already dead?
[23:54:54] <neilthereildeil> because i can log the PID from within the process
[23:54:55] *** Quits: guntbert (~yesitsme@user/guntbert) (Quit: Reconnecting)
[23:55:00] *** Joins: jmcantrell (~weechat@user/jmcantrell)
[23:55:07] <neilthereildeil> i wanna know the callstack of HOW the child died
[23:55:09] *** Joins: guntbert (~yesitsme@user/guntbert)
[23:55:17] <TML> but you can't derive anything meaningful from the PID after the process is already gone
[23:55:28] <neilthereildeil> but the callstack will let me correlate the logs
[23:55:30] <bjs> neilthereildeil: do you not have logs from the children themselves?
[23:55:42] <neilthereildeil> i do have logs from the children
[23:55:44] <bjs> neilthereildeil: why do you keep saying "callstack"
[23:55:50] <bjs> once the process is dead, there is no callstack
[23:55:56] <TML> NeilRG: It's pretty simple to fix
[23:56:01] *** Parts: transhumanist (~hiken@2601:196:8800:35f0:1d4e:e5ea:4e24:3511) ()
[23:56:02] <NeilRG> Wow!  numpy 1.21 is out now and they added annotations for arrays with dtypes!!
[23:56:04] <bjs> neilthereildeil: you might be able to tell whether it died e.g. by SIGKILL or something
[23:56:06] *** Joins: transhumanist (~hiken@2601:196:8800:35f0:1d4e:e5ea:4e24:3511)
[23:56:10] <neilthereildeil> i want to know the callstack at time of child death
[23:56:20] <TML> NeilRG: git branch -m master main
[23:56:20] <bjs> neilthereildeil: the "callstack" is a purely software thing
[23:56:26] <neilthereildeil> ya
[23:56:27] <bjs> neilthereildeil: once the process is dead it's gone
[23:56:31] <bjs> since the software is gone
[23:56:34] <neilthereildeil> but it stays in the log
[23:56:48] <NeilRG> TML Yeah, I had to fix my poetry installs.  It turns out poetry add git+....#main did the trick
[23:56:51] *** Joins: diek (~diek@187.36.4.113)
[23:57:00] <bjs> neilthereildeil: so you have the logs but it's not clear which are alive or which are dead or what happened?
[23:57:04] <NeilRG> TML the error was totally unobvious
[23:57:13] <neilthereildeil> or i need some other way from linux to tell me whether a process was ungacefully killed and thats why my semaphore leaked
[23:57:18] <tunixman> If it's posix mutexes it should get released on the process death I think...
[23:57:21] <TML> NeilRG: I see - never used poetry to refer to a git repo :)
[23:57:41] <neilthereildeil> bjs: i dont know what what point the child process dies, therefore i dont know when to log callstack
[23:57:52] <neilthereildeil> tunixman: realy??
[23:58:13] <neilthereildeil> i think bjs said earlier that these are posix semaphores
[23:58:14] <bjs> neilthereildeil: like i said, a SIGCHLD signal will be sent to the parent and wait() will give you the reason (very coarsely, like what signal killed it)
[23:58:15] <NeilRG> TML yeah unfortunately, I'm still waiting for some projects to release new versions with important features
[23:58:18] *** Quits: rigid (~rigid@user/rigid) (Ping timeout: 240 seconds)
[23:58:22] <bjs> neilthereildeil: if you're using a semaphore you have a semaphore yes
[23:59:27] <neilthereildeil> bjs: how should i be using wait if im using a worker process pool in multiprocessing?
[23:59:35] <neilthereildeil> i dont call wait anywhere in my application right now
[23:59:42] <bjs> neilthereildeil: in the signal handler
[23:59:44] *** Joins: acresearch (~acresearc@user/acresearch)
[23:59:51] <bjs> ugh maybe I really should have put a call to os.wait() in my example earlier
