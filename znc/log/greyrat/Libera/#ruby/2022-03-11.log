[00:06:25] *** Joins: roadie (~user@2a02:8108:5a40:1d87:34fc:c71c:709a:17d5)
[00:13:10] *** Joins: TCZ (~tcz@91.150.178.124)
[00:29:07] *** Quits: _ht (~quassel@231-169-21-31.ftth.glasoperator.nl) (Remote host closed the connection)
[00:29:54] *** Quits: ruby-eval (~ruby@cyberspace.baby) (Remote host closed the connection)
[00:30:03] *** Joins: ruby-eval (~ruby@cyberspace.baby)
[00:30:09] *** Joins: oxfuxxx (~oxfuxxx@37.19.212.98)
[00:32:25] <mooff> :: require 'binding_of_caller'; Symbol.define_method(:~@) { binding.of_caller(1).eval "method(#{inspect})" }
[00:32:26] <ruby-eval> => :~
[00:32:40] <mooff> :: ['hello', 'world'].each &~:puts
[00:32:40] <ruby-eval> hello
[00:32:40] <ruby-eval> world
[00:32:40] <ruby-eval> => ["hello", "world"]
[00:33:34] <mooff> behold.. possibly the first wasm Ruby in the world with binding_of_caller support :)
[00:34:04] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Ping timeout: 250 seconds)
[00:34:58] <mooff> had to build debug_inspector in as a static ext, but other than that, unchanged
[00:37:58] *** Quits: roadie (~user@2a02:8108:5a40:1d87:34fc:c71c:709a:17d5) (Ping timeout: 250 seconds)
[00:49:42] <adam12> mooff: neat
[01:00:57] *** Joins: roadie (~user@2a02:8108:5a40:1d87:b0fc:2b20:da3f:d1b0)
[01:21:08] *** Quits: roadie (~user@2a02:8108:5a40:1d87:b0fc:2b20:da3f:d1b0) (Ping timeout: 252 seconds)
[01:38:13] *** Quits: oxfuxxx (~oxfuxxx@37.19.212.98) (Ping timeout: 256 seconds)
[01:44:18] *** Joins: oxfuxxx (~oxfuxxx@37.19.212.99)
[01:46:14] *** Quits: TCZ (~tcz@91.150.178.124) (Quit: Leaving)
[01:47:12] *** Joins: roadie (~user@2a02:8108:5a40:1d87:b0fc:2b20:da3f:d1b0)
[01:49:48] *** Quits: cyberbanjo (~user@2607:fb90:4247:7118:8739:1e35:d38:1fb8) (Ping timeout: 240 seconds)
[01:50:20] *** Quits: teclator (~quassel@85.155.180.70.dyn.user.ono.com) (Quit: http://quassel-irc.org - Chat comfortably. Anywhere.)
[01:52:35] *** Quits: oxfuxxx (~oxfuxxx@37.19.212.99) (Quit: Yankies Motherfh@ckers C0[k Astroboys)
[02:00:02] *** Joins: r3m (~launch@user/r3m)
[02:22:27] *** Quits: infinityfye (~infinityf@156.212.11.182) (Quit: Leaving)
[02:45:23] <havenwood> I like Rack's new streaming procs so far. They're birdirectional, but here's a simple example just from server to client. https://gist.github.com/havenwood/ffcfd263ebcb9ea1c54fe5daad51ff4e
[02:46:39] <adam12> havenwood: Ah sweet. I had wanted to experiment with it but hadn't the time.
[02:54:37] *** Quits: ur5us_ (~ur5us@2406:e002:6845:dc01:68c7:1b9f:7d41:5e0d) (Ping timeout: 240 seconds)
[02:57:27] *** Quits: havenwood (~havenwood@about/ruby/havenwood) (Remote host closed the connection)
[02:59:40] *** Joins: havenwood (~havenwood@about/ruby/havenwood)
[03:00:40] *** Quits: Tasi (~Tasi@20014C4C220C8F009880C34C45C33416.catv.pool.telekom.hu) (Quit: Leaving)
[03:05:39] *** Quits: roadie (~user@2a02:8108:5a40:1d87:b0fc:2b20:da3f:d1b0) (Ping timeout: 252 seconds)
[03:25:55] *** Joins: ur5us_ (~ur5us@2406:e002:6845:dc01:68c7:1b9f:7d41:5e0d)
[03:29:43] *** Quits: m_antis (~znc_admin@ool-44c09a21.dyn.optonline.net) (Quit: ZNC - https://znc.in)
[03:29:54] *** Quits: rhe (~rhe@labyrinth.rhe.jp) (Quit: Ping timeout (120 seconds))
[03:30:15] *** Joins: rhe (~rhe@labyrinth.rhe.jp)
[03:30:29] *** Joins: m_antis (~znc_admin@ool-44c09a21.dyn.optonline.net)
[03:31:52] *** Joins: roadie (~user@2a02:8108:5a40:1d87:b0fc:2b20:da3f:d1b0)
[03:36:30] <mooff> is it using ractors?
[03:37:35] *** Joins: ur5us (~ur5us@2406:e002:6845:dc01:b921:6822:fa0e:e017)
[03:37:48] *** Quits: ur5us_ (~ur5us@2406:e002:6845:dc01:68c7:1b9f:7d41:5e0d) (Ping timeout: 240 seconds)
[03:38:20] *** Quits: Sheilong (uid293653@id-293653.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[03:49:57] <havenwood> mooff: Nope, defers to Rack webserver to handle the spec but no Ractor dep.
[03:51:03] <mooff> ah... what's the purpose of the .freeze s ?
[03:51:21] <mooff> i assumed it was ractor related
[03:51:27] <havenwood> mooff: They're not needed for the example, but Roda got me on freezing my Rack apps.
[03:52:12] <havenwood> It'll occasionally surface a thread safety issue.
[03:52:25] <mooff> interesting
[03:52:31] <havenwood> In this app just not needed. I like it generally
[03:59:58] *** Joins: hanzo (uid532183@user/hanzo)
[04:02:51] *** Joins: eddof13 (~eddof13@189.178.17.205)
[04:09:52] *** Quits: roadie (~user@2a02:8108:5a40:1d87:b0fc:2b20:da3f:d1b0) (Ping timeout: 250 seconds)
[04:22:10] *** Quits: eddof13 (~eddof13@189.178.17.205) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[04:22:47] *** Joins: eddof13 (~eddof13@189.178.17.205)
[04:33:48] *** Quits: eddof13 (~eddof13@189.178.17.205) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[04:45:37] *** Quits: donofrio (~donofrio@c-68-40-123-74.hsd1.mi.comcast.net) (Read error: Connection reset by peer)
[04:50:04] *** Quits: jetchisel (jetchisel@user/jetchisel) (Ping timeout: 256 seconds)
[04:52:08] *** Joins: jetchisel (jetchisel@user/jetchisel)
[05:30:29] *** Quits: swaggboi (~swaggboi@slackware.uk/supporter/swaggboi) (Quit: C-x C-c)
[05:41:54] *** Joins: swaggboi (~swaggboi@slackware.uk/supporter/swaggboi)
[05:51:31] *** Quits: Rounin (~david@84.212.130.215) (Ping timeout: 256 seconds)
[06:02:36] *** Quits: ur5us (~ur5us@2406:e002:6845:dc01:b921:6822:fa0e:e017) (Ping timeout: 240 seconds)
[07:09:46] *** Quits: hanzo (uid532183@user/hanzo) (Quit: Connection closed for inactivity)
[07:30:06] *** Quits: mooff (mooff@awful.cooking) (Remote host closed the connection)
[07:32:13] *** Joins: mooff (mooff@awful.cooking)
[07:33:46] *** Joins: ur5us (~ur5us@122-56-203-167.mobile.spark.co.nz)
[08:05:39] *** Quits: ur5us (~ur5us@122-56-203-167.mobile.spark.co.nz) (Remote host closed the connection)
[08:06:15] *** Joins: ur5us (~ur5us@122-56-203-167.mobile.spark.co.nz)
[08:14:04] *** Quits: RedNifre (~RedNifre@dslb-188-100-021-030.188.100.pools.vodafone-ip.de) (Ping timeout: 256 seconds)
[08:19:18] *** Joins: EvilAlan (~EvilAlan@cpe-74-77-85-57.buffalo.res.rr.com)
[08:28:22] *** Joins: RedNifre (~RedNifre@dslb-002-206-121-229.002.206.pools.vodafone-ip.de)
[08:42:46] *** Quits: ur5us (~ur5us@122-56-203-167.mobile.spark.co.nz) (Ping timeout: 272 seconds)
[09:11:17] *** Joins: rando25892 (~homefame@user/rando25892)
[09:34:43] *** Quits: EvilAlan (~EvilAlan@cpe-74-77-85-57.buffalo.res.rr.com) (Quit: Client closed)
[09:43:20] *** Joins: EvilAlan (~EvilAlan@cpe-74-77-85-57.buffalo.res.rr.com)
[09:44:14] *** Joins: eddof13 (~eddof13@2806:102e:12:64:994e:c256:6228:a886)
[09:45:22] *** Joins: peer8 (peer@fosshost/techops/peer)
[09:46:35] *** Quits: peer (peer@fosshost/techops/peer) (Ping timeout: 252 seconds)
[09:46:35] *** peer8 is now known as peer
[09:56:30] *** Joins: roadie (~user@2a02:8108:5a40:1d87:b0fc:2b20:da3f:d1b0)
[10:05:11] *** Joins: ur5us (~ur5us@122-56-203-167.mobile.spark.co.nz)
[10:24:26] *** Quits: EvilAlan (~EvilAlan@cpe-74-77-85-57.buffalo.res.rr.com) (Quit: Client closed)
[10:34:29] *** Quits: eddof13 (~eddof13@2806:102e:12:64:994e:c256:6228:a886) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[10:39:37] *** Joins: guest1 (~guest@2806:261:491:43:5e13:e5b3:6a97:b987)
[10:43:32] *** Quits: guest1 (~guest@2806:261:491:43:5e13:e5b3:6a97:b987) (Quit: WeeChat 3.4)
[11:05:10] *** Joins: teclator (~quassel@85.155.180.70.dyn.user.ono.com)
[11:07:23] <nakilon> is "binding.of_caller" smth new?
[11:08:12] <nakilon> ah, a gem
[11:13:48] *** Quits: jetchisel (jetchisel@user/jetchisel) (Ping timeout: 240 seconds)
[11:18:57] *** Joins: EvilAlan (~EvilAlan@cpe-74-77-85-57.buffalo.res.rr.com)
[11:24:30] *** Quits: EvilAlan (~EvilAlan@cpe-74-77-85-57.buffalo.res.rr.com) (Quit: Client closed)
[11:42:35] *** Joins: Rounin (~david@84.212.130.215)
[11:56:01] *** Joins: justAstache4 (~justache@user/justache)
[11:57:20] *** Quits: justAstache (~justache@user/justache) (Ping timeout: 256 seconds)
[11:57:21] *** justAstache4 is now known as justAstache
[12:10:31] *** Quits: ur5us (~ur5us@122-56-203-167.mobile.spark.co.nz) (Read error: Connection reset by peer)
[12:18:20] *** Joins: jetchisel (jetchisel@user/jetchisel)
[12:21:16] *** Quits: gr33n7007h (~gr33n7007@user/gr33n7007h) (Ping timeout: 272 seconds)
[12:30:06] *** Quits: andrea[m] (~andreanit@2001:470:69fc:105::1:28a8) (Quit: You have been kicked for being idle)
[12:33:08] <ox1eef> quite an old gem, too
[12:44:13] *** Quits: jetchisel (jetchisel@user/jetchisel) (Ping timeout: 240 seconds)
[13:10:06] *** Quits: roadie (~user@2a02:8108:5a40:1d87:b0fc:2b20:da3f:d1b0) (Ping timeout: 252 seconds)
[13:13:29] *** Joins: TCZ (~tcz@91.150.178.124)
[13:36:16] *** Joins: roadie (~user@2a02:8108:5a40:1d87:b0fc:2b20:da3f:d1b0)
[13:41:11] *** Quits: roadie (~user@2a02:8108:5a40:1d87:b0fc:2b20:da3f:d1b0) (Ping timeout: 245 seconds)
[13:43:11] <cxl> Hi all, I'm having a hard time understanding the difference between "#" and "::" when reading documentation. In the official Ruby docs, for the CSV module for instance, some methods are documented under "CSV::open", and others as "CSV#each". What does it mean?
[13:43:27] *** Joins: roadie (~user@2a02:8108:5a40:1d87:b0fc:2b20:da3f:d1b0)
[13:44:16] <jhass[m]> cxl: :: denotes that the method is called on the class itself. Foo::bar -> Foo.bar. # denotes that the method is called on an instance of the class Foo#bar -> Foo.new.bar
[13:45:18] <cxl> jhass[m]: Hmmm, ok... so it means that the :: method is defined in the module but # is defined in the class?
[13:46:11] <jhass[m]> mmh, I think you got it right but I can't quite submit to that phrasing due to various reasons ðŸ˜…
[13:47:37] <cxl> jhass[m]: that's what I meant: https://dpaste.org/rV33
[13:48:36] *** Quits: whysthatso1250 (~whysthats@74-206-50-195.sta.estpak.ee) (Quit: Ping timeout (120 seconds))
[13:48:51] *** Joins: whysthatso1250 (~whysthats@74-206-50-195.sta.estpak.ee)
[13:49:12] <jhass[m]> Ah, no, those would both be Foo#meth_one and Bar#meth_two respectively, because you call neither as Foo.meth_one nor Bar.meth_two. You need an instance of Foo or Bar respectively to call them and thus they are denoted with #
[13:49:54] <cxl> What would it look like then for a Foo#meth_one and a Foo::meth_two? What would the class/module look like?
[13:50:00] <cxl> or is that not the way to tell
[13:50:21] *** Quits: hololeap (~hololeap@user/hololeap) (Remote host closed the connection)
[13:50:31] <jhass[m]> the typical way to define a Foo::bar would be module/class Foo; def self.bar; end; end;
[13:51:10] <cxl> Oh ok, it's about the self. or its absence. So :: is a class method and # is an instance method, basically
[13:51:21] <jhass[m]> But I think the important fact that :: vs # in the docs is trying to convey is not how they are defined but how to call them
[13:51:34] <jhass[m]> yeah, more than basically,  that's exactly it
[13:51:37] *** Joins: hololeap (~hololeap@user/hololeap)
[13:51:57] <cxl> Right, so if it has a # you have to call new first, but if it's :: you can call it without instantiating
[13:52:10] <jhass[m]> Yep
[13:52:35] <cxl> Got it, thanks. Now I'm wondering: what's the point of mixing class methods and instance methods in the same namespace?
[13:52:54] <jhass[m]> Now on a technical level that distinction doesn't exist, def self.bar is just a shortcut syntax to define an instance method on self's singleton class, but don't worry about that for now :) 
[13:54:35] *** Joins: Tasi (~Tasi@20014C4C220C8F0070B2A639D4588B33.catv.pool.telekom.hu)
[13:55:03] <cxl> I also see it's possible to have a class in a class. Is that because you can't define methods on a module? So if you need a parent class with methods and another class inside it with its own methods, you do a class in a class? I'm looking at https://github.com/ruby/ruby/blob/ruby_2_7/lib/csv/row.rb for example.
[14:02:12] <cxl> Nah, you can define self. methods on a module... So I don't get it.
[14:03:57] <jhass[m]> the point of mixing is just that it's convenient. Given Ruby doesn't have method overloads a common usecase for example is to provide additional constructors or helpers for interacting. Consider File.new vs File.open for example. Or in the CSV example you have different ways of reading the data which may or may not create you an instance of CSV or so
[14:05:36] <jhass[m]> In Ruby classes are essentially a specialization of modules, so a class is literally a specialization of a module. Modules are what act as namespaces and collections of method definitions, a class then just adds the functionality of creating an object/instance for the type
[14:08:18] <jhass[m]> the other specialization of a class compared to a module is around inheritance. While modules are added to the inheritance via include and a child module (or class, remember all classes are modules) may have any number of direct "ancestor" modules, a class can only act as a parent class and have one parent class (in addition to any ancestor modules)
[14:13:49] *** Quits: mbrndtgn (~mbrndtgn@undecidable.de) (Quit: The Lounge - https://thelounge.chat)
[14:14:28] *** Joins: mbrndtgn (~mbrndtgn@undecidable.de)
[14:20:42] <cxl> jhass[m]: thanks
[14:24:38] *** Joins: infinityfye (~infinityf@156.212.11.182)
[14:38:42] *** Quits: ollysmith (~ollysmith@88.212.177.103) (Ping timeout: 272 seconds)
[14:51:09] *** Quits: roadie (~user@2a02:8108:5a40:1d87:b0fc:2b20:da3f:d1b0) (Quit: ERC (IRC client for Emacs 25.3.50.1))
[15:08:57] *** Quits: szkl (uid110435@id-110435.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[15:28:48] *** Quits: Tempesta (~Tempesta@user/tempesta) (Quit: See ya!)
[15:41:50] *** Quits: infinityfye (~infinityf@156.212.11.182) (Quit: Leaving)
[15:58:45] *** Joins: jetchisel (~jetchisel@user/jetchisel)
[16:00:22] *** Joins: roadie (~user@2a02:8108:5a40:1d87:1154:c286:b079:67fa)
[16:00:43] *** Joins: gr33n7007h (~gr33n7007@user/gr33n7007h)
[16:08:46] *** Quits: jetchisel (~jetchisel@user/jetchisel) (Ping timeout: 250 seconds)
[16:11:06] *** Joins: jetchisel (jetchisel@user/jetchisel)
[16:27:06] *** Quits: TCZ (~tcz@91.150.178.124) (Quit: Leaving)
[16:34:03] *** Joins: Tempesta (~Tempesta@user/tempesta)
[16:35:32] *** Quits: Tempesta (~Tempesta@user/tempesta) (Client Quit)
[16:44:13] *** Joins: fandre1986 (~fandre198@62.67.214.101)
[16:47:02] <mooff> cxl: it might be helpful to see that classes are modules. that is, MyClass.is_a?(Class) == MyClass.is_a?(Module) == true
[16:47:36] <mooff> and so they can be used for namespacing in the same way
[17:17:15] <mooff> got another neat Symbol trick. i'm wondering if this might actually be usable
[17:17:20] <mooff> :: Symbol.define_method(:|) { |obj| obj.method(self) }
[17:17:20] <ruby-eval> => :|
[17:17:39] <mooff> :: %w(/usr/* /var/*).map &:[] | Dir
[17:17:39] <ruby-eval> => [["/usr/local"], ["/var/lib"]]
[17:17:41] *** Joins: gproto23 (~gproto23@user/gproto23)
[17:22:47] *** Quits: wand (~user@gateway/tor-sasl/wand) (Remote host closed the connection)
[17:28:12] *** Joins: wand (~user@gateway/tor-sasl/wand)
[17:33:19] *** Joins: bit4bit (~bit4bit@190.128.123.78)
[17:37:56] *** Joins: TCZ (~tcz@91.150.178.124)
[17:45:43] *** Joins: szkl (uid110435@id-110435.uxbridge.irccloud.com)
[18:08:38] <adam12> I wish the documentation was updated to use the new dot-style syntax for calling class methods.
[18:08:47] <adam12> I wonder if there's been pushback or nobody has ever bothered.
[18:09:25] <sam113101> adam12: is it new?
[18:11:08] <adam12> sam113101: So, it's not new as in recent. But very very old versions of Ruby used more :: style calls (I think they are C style calls IIRC).
[18:11:28] <adam12> Eventually the community standardized on dot notation for class methods.
[18:12:38] <adam12> But this "standardization" feels like it's been forever. 2005 at least? If I go back in memory, I can't remember if I ever did CGI::h or similar.
[18:25:33] <jhass[m]> fwiw yard renders dot or nothing at all depending on context
[18:31:23] <adam12> Adding search to gemdocs.org. Not serving 800kb of gems in a <ul> anymore. Heh.
[18:37:59] *** Quits: bit4bit (~bit4bit@190.128.123.78) (Ping timeout: 256 seconds)
[18:44:46] *** Quits: teclator (~quassel@85.155.180.70.dyn.user.ono.com) (Ping timeout: 256 seconds)
[18:45:35] *** Quits: hresco3 (~hesco@209.195.11.75) (Ping timeout: 256 seconds)
[18:45:37] *** Joins: teclator (~quassel@85.155.180.70.dyn.user.ono.com)
[18:46:48] *** Joins: hresco3 (~hesco@209.195.11.75)
[18:47:23] *** Quits: fandre1986 (~fandre198@62.67.214.101) (Quit: Connection closed)
[18:55:17] <skandal> Hello. How i can extend products.erb by  base.erb ?
[18:55:55] <adam12> skandal: extend as in Django style {% extend %}?
[19:09:45] *** Quits: TCZ (~tcz@91.150.178.124) (Quit: Leaving)
[19:15:17] <jhass[m]> adam12: that input could use a color: black; or something though ðŸ˜…
[19:16:03] <adam12> jhass[m]: What color is it for you? It's _almost_ black for me. Not enough contrast?
[19:16:31] * jhass[m] uploaded an image: (35KiB) < https://libera.ems.host/_matrix/media/r0/download/m.aeshna.de/fIFGwtlxbbhCSqOvNjoHzeTp/Screenshot%202022-03-11%20at%2016.46.23.png >
[19:16:38] <jhass[m]> For me it renders really light somehow
[19:16:52] <adam12> Oh. Damnit. I forgot to look at dark mode.
[19:16:53] <jhass[m]> if I override with color: black in the input it renders fine ðŸ¤·
[19:21:16] <adam12> jhass[m]: Thanks for catching.
[19:21:27] <jhass[m]> <3 
[19:21:51] <jhass[m]> dark mode everything :D 
[19:27:59] <adam12> Mine is set to auto. I normally test manually but for gemdocs.org, it's a shoot-from-the-hip kind of project.
[20:26:14] *** Quits: Tasi (~Tasi@20014C4C220C8F0070B2A639D4588B33.catv.pool.telekom.hu) (Ping timeout: 252 seconds)
[21:15:44] *** Quits: jetchisel (jetchisel@user/jetchisel) (Ping timeout: 252 seconds)
[21:25:25] *** Joins: jetchisel (jetchisel@user/jetchisel)
[21:57:19] *** Joins: markong (~kvirc@213.146.188.203)
[21:57:35] *** Quits: markong (~kvirc@213.146.188.203) (Quit: KVIrc 5.0.0 Aria http://www.kvirc.net/)
[22:24:30] *** Joins: oxfuxxx (~oxfuxxx@37.120.204.132)
[22:28:48] *** Quits: oxfuxxx (~oxfuxxx@37.120.204.132) (Ping timeout: 250 seconds)
[22:36:41] *** Joins: oxfuxxx (~oxfuxxx@37.120.204.134)
[22:41:01] *** Joins: _ht (~quassel@231-169-21-31.ftth.glasoperator.nl)
[22:41:10] *** Joins: mdemo (~mdemo@user/mdemo22)
[22:46:17] *** Quits: jetchisel (jetchisel@user/jetchisel) (Ping timeout: 240 seconds)
[22:48:26] *** Quits: duds- (~duds-@user/duds) (Ping timeout: 256 seconds)
[22:51:34] *** Joins: duds- (~duds-@user/duds)
[22:55:17] *** Joins: jetchisel (jetchisel@user/jetchisel)
[23:02:01] *** Joins: Tasi (~Tasi@20014C4C220C8F000CE80D12B41311DE.catv.pool.telekom.hu)
[23:22:28] *** Quits: roadie (~user@2a02:8108:5a40:1d87:1154:c286:b079:67fa) (Quit: ERC (IRC client for Emacs 25.3.50.1))
[23:46:15] <axsuul> Hi is there a built-in ruby method (I recall with a new Ruby version) for determining the most common value in an array?
[23:48:12] <adam12> axsuul: Enumerable#tally ?
[23:48:28] <adam12> It's not the most common, but you could probably work it out from the max value.
[23:48:33] <axsuul> Yep that's it, thanks!
[23:48:50] <adam12> Actually, #max might work on it's own.
[23:49:15] <adam12> >> ["baz", "foo", "bar", "foo"].max
[23:51:07] <weaksauce> that won't work if baz was the most common it still returns foo since it's lexicographically maximal 
[23:53:36] *** Quits: RougeR (~rougex250@user/rouger) (Ping timeout: 252 seconds)
