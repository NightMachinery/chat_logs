[00:31:30] *** Quits: yuesbeez (uid458354@id-458354.tinside.irccloud.com) (Quit: Connection closed for inactivity)
[00:56:11] *** Quits: user51 (~user51@176.228.148.215) (Quit: Lost terminal)
[01:00:36] *** Quits: lavaball (felix@31.204.155.215) (Remote host closed the connection)
[01:22:02] *** Quits: lopid (~lopid@user/lopid) (Ping timeout: 240 seconds)
[01:25:34] *** Joins: lopid (~lopid@user/lopid)
[02:20:49] *** Joins: treble (~treble@user/treble)
[02:23:26] *** Joins: loganlee (~Thunderbi@user/loganlee)
[03:11:03] *** Joins: veltas (~veltas@104.236.34.215)
[03:11:08] *** Parts: veltas (~veltas@104.236.34.215) ()
[03:26:48] *** Joins: Torr (~Torr@user/torr)
[04:57:44] *** Joins: Penguin666 (~Penguin66@217.138.205.135)
[04:59:01] *** Quits: Penguin666x (~Penguin66@217.138.205.135) (Ping timeout: 240 seconds)
[05:30:18] *** Quits: vlm (~vlm@user/vlm) (Quit: "")
[05:31:55] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[06:01:00] *** Quits: loganlee (~Thunderbi@user/loganlee) (Quit: loganlee)
[06:01:18] *** Joins: loganlee (~Thunderbi@user/loganlee)
[06:20:29] *** Joins: ztx (~ztx@user/ztx)
[07:33:55] *** Quits: loganlee (~Thunderbi@user/loganlee) (Quit: loganlee)
[08:13:55] *** Quits: earnest (~earnest@user/earnestly) (Ping timeout: 256 seconds)
[08:58:57] *** Quits: Thanatermesis (~Thanaterm@191.92.148.122) (Ping timeout: 240 seconds)
[09:06:01] *** Joins: bluedust (~bluedust@117.241.185.116)
[09:08:24] *** Quits: AJ_Z0- (~AJ_Z0@pool-71-114-82-44.washdc.fios.verizon.net) (Excess Flood)
[09:12:39] *** Joins: AJ_Z0 (~AJ_Z0@user/aj-z0/x-3780512)
[09:45:38] *** Joins: bluedust_ (~bluedust@81.92.206.10)
[09:46:10] *** Joins: user51 (~user51@176.228.148.215)
[09:49:17] *** Quits: bluedust (~bluedust@117.241.185.116) (Ping timeout: 240 seconds)
[09:59:42] *** Joins: bluedust (~bluedust@117.241.185.116)
[10:02:57] *** Quits: bluedust_ (~bluedust@81.92.206.10) (Ping timeout: 240 seconds)
[10:04:59] *** Quits: _flood (flooded@gateway/vpn/protonvpn/flood/x-43489060) (Ping timeout: 256 seconds)
[10:09:14] *** Joins: flooded (flooded@gateway/vpn/protonvpn/flood/x-43489060)
[10:13:28] *** Quits: mknod (~mknod@user/mknod) (Quit: mknod)
[10:55:15] *** Quits: roarde (~roarde@user/roarde) (Quit: Leaving)
[12:23:52] *** Joins: Dima[m] (~reddima10@2001:470:69fc:105::366)
[12:56:17] *** Quits: tirnanog (~tirnanog@user/tirnanog) (Quit: = "")
[13:03:13] *** Joins: seninha (~seninha@user/seninha)
[13:11:53] *** Parts: Dima[m] (~reddima10@2001:470:69fc:105::366) ()
[13:59:15] *** Joins: earnest (~earnest@user/earnestly)
[14:26:10] *** Quits: bluedust (~bluedust@117.241.185.116) (Remote host closed the connection)
[14:26:37] *** Joins: x88x88x (~x88x88x@2001:19f0:5:39a8:5400:3ff:feb6:73cb)
[14:36:09] *** Joins: bluedust (~bluedust@117.241.185.116)
[15:04:11] *** Quits: bluedust (~bluedust@117.241.185.116) (Remote host closed the connection)
[15:05:53] *** Joins: o97115 (~o97115@78-56-97-76.static.zebra.lt)
[15:25:10] <o97115> I can't convert a field from one date representation to another only with awk, can I? e.g., I have 'Wed, 05 Jan 2022 07:50:59 +0300 | Lorem Ipsum' string, and want to convert it to '2022-01-05 07:50 Lorem ipsum' (ideally, to another timezone, too...)
[15:25:32] *** Quits: geirha (~geirha@user/geirha) (Quit: WeeChat 2.8)
[15:25:40] <o97115> have to somehow call 'date' on this field, probably?
[15:26:49] *** Joins: geirha (~geirha@user/geirha)
[15:37:36] <emanuele6> something that understands that format (i think that is RFC 5322 format), yes
[15:39:08] <emanuele6> if you want to just reformat the date (since the format is known), you could just rearrange the string.
[15:40:38] <emanuele6> or just use something like GNU date.    and, if you need to convert that date to localtime or another timezone, just use something like GNU date.
[15:41:02] <heiner_> The date format is ISO 8601
[15:41:22] <heiner_> ...the desired date format
[15:41:36] <emanuele6> yes, but the input format is RFC 5322.
[15:42:03] <emanuele6> also, no, "2022-01-05 07:50" is NOT iso-8601.
[15:42:15] <emanuele6> # date -R # RFC5322
[15:42:16] <shbot> emanuele6: Thu, 06 Jan 2022 12:12:15 +0000
[15:42:27] <emanuele6> # date -I # ISO8601
[15:42:28] <shbot> emanuele6: 2022-01-06
[15:42:29] <heiner_> agreed
[15:42:50] *** Quits: _val__ (~valentin@82-169-14-137.biz.kpn.net) (Quit: leaving)
[15:43:31] <emanuele6> heiner_: ISO 8601 does not look like that
[15:43:33] <heiner_> ISO 8601 specifies a delimiting character 'T' between date and time 
[15:43:40] <emanuele6> # date -Iminutes
[15:43:41] <shbot> emanuele6: 2022-01-06T12:13+00:00
[15:43:45] <earnest> emanuele6: Curiously, it's not ISO but almost is RFC3339, which is ISO except that they let you exclude the 'T' :D
[15:43:59] *** Joins: _val_ (~valentin@82-169-14-137.biz.kpn.net)
[15:44:28] * emanuele6 hands RFC3339 a T
[15:45:06] <emanuele6> # date --rfc-3339=minutes
[15:45:11] <earnest> rfc3339 is defined to be exactly iso8601 but with the T being optional 
[15:45:12] <shbot> emanuele6: date: invalid argument 'minutes' for '--rfc-3339'
[15:45:12] <shbot> emanuele6: Valid arguments are:
[15:45:12] <shbot> emanuele6: etc... ( http://ix.io/3LdN )
[15:45:34] <o97115> I'm trying something like this awk -v FS="|" '{print $1 | "gdate -f- +\"%Y-%m-%d %H:%M\"""}'
[15:45:40] <o97115> it kinda works
[15:45:44] <earnest> emanuele6: 'seconds'
[15:45:50] <emanuele6> earnest: rfc3339 with minutes precision is not defined, so it can't be rfc3339
[15:45:50] <o97115> but how do I add $2 to the output?
[15:46:02] <emanuele6> they had "2022-01-05 07:50"
[15:46:09] *** Quits: _val_ (~valentin@82-169-14-137.biz.kpn.net) (Client Quit)
[15:46:17] <earnest> o97115: If you have gawk, you can use its strftime/mktime and such functions
[15:46:26] <emanuele6> the output format is nothing fancy, just Y-%m-%d %H:%M :D
[15:46:27] <earnest> Oh
[15:46:32] <earnest> Also I'd use dateutils for this
[15:46:52] <earnest> Which can convert dates in text like this by telling it the format to expect
[15:47:46] <emanuele6> o97115: no, use something like
[15:48:35] *** Joins: _val_ (~valentin@82-169-14-137.biz.kpn.net)
[15:49:12] <earnest> earnest i earnest ~ print 'Wed, 05 Jan 2022 07:50:59 +0300 | Lorem Ipsum' | dateconv -S -i '%a, %d %b %Y %T %Z'
[15:49:13] <earnest> 2022-01-05T04:50:59 | Lorem Ipsum
[15:49:55] <earnest> Or if you want your format
[15:50:10] <yeti> https://regmedia.co.uk/2021/02/03/bagga_slips_borks.jpg
[15:50:33] <earnest> ~ print 'Wed, 05 Jan 2022 07:50:59 +0300 | Lorem Ipsum' | dateconv -S -i '%a, %d %b %Y %T %Z' -f '%F %H:%M'
[15:50:35] <earnest> 2022-01-05 04:50 | Lorem Ipsum
[15:50:47] <earnest> yeti: :D
[15:50:53] <yeti> https://www.theregister.com/2021/02/05/bork/
[15:51:59] <earnest> yeti: I find it doubly funny ironic that the bag is plastic
[15:52:00] <o97115> earnest: have no dateconv on mac :) macports says dateutils port not found
[15:52:16] *** Quits: Bossi (~quassel@p4fc22a7d.dip0.t-ipconnect.de) (Quit: No Ping reply in 180 seconds.)
[15:52:20] *** flooded is now known as _flood
[15:52:21] <earnest> o97115: https://github.com/hroptatyr/dateutils nice codebase, no dependencies
[15:52:46] <o97115> emanuele6: you didn't say anything after "use something like", do you?
[15:52:51] <earnest> o97115: Note how it managed to handle the +0300 zone, which yours simply tuncated
[15:53:01] <o97115> earnest: thanks!
[15:53:38] <earnest> But I do think more people should know about dateutils, even if they ultimately can't use it.  They're really lovely and fill a much needed gap in the general date tooling on unnix in general which is very lacking
[15:54:25] <earnest> Handing times and their conversions is not trivial and full of pitfalls, leap seconds, time zones, TAI/UTC, leap years, and so on.
[15:54:30] *** Joins: Bossi (~quassel@p4fc22a7d.dip0.t-ipconnect.de)
[15:54:43] <earnest> I'm sure there's a "myths programmers believe about dates" article
[15:54:55] <earnest> Yes https://gist.github.com/timvisee/fcda9bbdff88d45cc9061606b4b923ca
[15:55:33] <yeti> TZ is newspeak and means "madness"
[15:56:45] <yeti> https://www.youtube.com/watch?v=-5wpm-gesOY  +++  https://www.youtube.com/watch?v=DHIQxVhruak
[15:57:13] <emanuele6> o97115: oh, yeah
[15:57:33] <emanuele6> something like FS=" *\\| *" { cmd = "gdate -d " shquote($1) " +'%Y-%m-%d %H:%M'"; cmd | getline var; close(cmd); $1 = var }
[15:57:48] <emanuele6> but if you can use a filter tool, it is much better
[15:58:51] <emanuele6> then you can just use:   BEGIN { dateconv = "..." } { print $1 | dateconv; dateconv | getline var; $1 = var }
[15:59:19] <o97115> that's interesting, thanks!
[16:00:07] <emanuele6> (maybe you can do `getline $1' directly, i don't remember if that is allowed)
[16:01:12] <emanuele6> yeah, you don't need the temporary variable; `getline $1' is valid
[16:02:13] <o97115> emanuele6: sorry, but how do I add $2? :)
[16:02:31] <o97115> to get both $1 and $2 in one line?
[16:02:35] <emanuele6> you don't need to add $2.
[16:02:42] <emanuele6> that code modifies $1
[16:03:28] <emanuele6> # awk -F' *\\| *' '{ $1 = 10 } 1' <<< 'something   | something | something else'
[16:03:30] <shbot> emanuele6: 10 something something else
[16:04:03] <emanuele6> # awk -F' *\\| *' -vOFS=' | ' '{ $1 = 10 } 1' <<< 'something   | something | something else'
[16:04:04] <shbot> emanuele6: 10 | something | something else
[16:04:15] <o97115> khm... it prints out only the modified date for me...
[16:04:28] <o97115> without the rest something | something
[16:05:24] <earnest> awk isn't the best for this due to how it doesn't handle rangers very well
[16:05:33] <earnest> ranges*
[16:05:52] <emanuele6> you tried:  awk -F' *\\| *' '{ $1 = 10 } 1' <<< 'something   | something | something else' ?
[16:06:11] <earnest> Because it means printing $0 without editting it, but modifying will break formatting and such according to FS and such
[16:07:24] <earnest> I'm not aware of a way to print a range of fields in awk while preserving the original whitespace
[16:07:28] <emanuele6> well, you can just use `match()' instead of FS if you really want to preserve spaces and if there can be more than two fields to prevent that, but yes
[16:07:46] <earnest> It's not about reading the input but outputting it again
[16:08:02] <earnest> With the fields you want changed
[16:08:26] <earnest> It also means executing date(1) for every line
[16:09:25] <o97115> emanuele6: yes, this example sure works as you said. however, with my dates, your command only prints out the first part, the modified dates, without "Lorem ipsum"
[16:09:49] <emanuele6> well, i don't know what command you actually run
[16:11:10] <o97115> something like this:
[16:11:16] <o97115> echo "Thu, 06 Jan 2022 14:12:38 +0300 | Lorem ispum" | awk -v FS="\\\|" 'BEGIN { dateconv = "gdate -f- +\"%Y-%m-%d %H:%M\"" } { print $1 | dateconv; dateconv | getline var; $1 = var}'
[16:11:17] <emanuele6> earnest: yes, i meant use: match($0, /^.*|/) { date = substr($0, RSTART, RLENGTH - 1); rest = substr($0, RLENGTH + 1) } { print modify(date) "|" rest }  but it is inconvenient yes
[16:11:56] <emanuele6> earnest: that is only because you use date, with a filter it would be  BEGIN { dateconv = "..." } { print $1 | dateconv; dateconv | getline var; $1 = var }, but yeah still not great
[16:12:21] <emanuele6> o97115: that is not how gdate works.
[16:12:52] <earnest> It's just the one thing that awk suffers with, which is a pity, but in a way this is not what awk was designed for so it makes sense there would be some friction
[16:13:15] <earnest> For this, if they can't use dateutils, I'd use a IFS= while loop and PEs to cut things up
[16:13:28] <earnest> (Or a programming language)
[16:13:30] <o97115> well, the gdate does work here, it conerts the date OK. it's just awk prints the converted dates separately, without the rest of the string
[16:13:30] <emanuele6> o97115: that is the solution for a filter tool that converts dates from stdin. like the one mentioned by earnest. not for GNU date, i gave you the other solution for GNU date.
[16:13:36] <earnest> Which has date utilities
[16:13:54] <earnest> emanuele6: Also they have 'gdate' so they surely have gawk which means mktime/strftime
[16:13:55] <emanuele6> o97115: again, that is not how date works. it is not a filter
[16:14:07] <earnest> emanuele6: E.g. https://0x0.st/ozJ8.bin
[16:14:55] <o97115> oh, I see
[16:14:56] <o97115> sorry
[16:16:34] <earnest> In fact, this looks like irc logs
[16:16:59] <emanuele6> earnest: oh, right you could reformat the string before passing it to mktime() and then use strftime().
[16:17:05] <earnest> Yeah
[16:17:33] <earnest> That should handle most of the pitfalls in parsing dates for you
[16:17:34] <emanuele6> but that only if you can ignore the offset from the input string
[16:19:22] <earnest> The datespec is a string of the form YYYY MM DD HH MM SS[ DST]
[16:20:10] <emanuele6> well, RFC5322 only has numeric offsets like `+0300', not timezones, so you could just add it
[16:20:20] <earnest> Yes
[16:20:26] <emanuele6> so yeah, you could use that solution in GNU awk, nice! :D
[16:21:23] <earnest> It's still tricky though because C locale dates are eh
[16:22:23] <earnest> # date # this is C locale format
[16:22:24] <shbot> earnest: Thu Jan  6 12:52:23 UTC 2022
[16:23:41] <emanuele6> anything that uses %Z is a nightmare to handle
[16:24:03] <o97115> earnest: I can use gawk indeed. but I can't convert date from one format to another (and from one timezone to another) with strftime and mktime, can I?
[16:24:09] <emanuele6> also stuff like %b/%B because they are words and could be translated
[16:24:56] <emanuele6> o97115: if you need to convert TO  localtime or UTC   FROM any RFC5322 date, gawk is fine.
[16:25:36] <o97115> that's indeed the case
[16:25:53] <o97115> how do I use strftime/mktime then?
[16:26:04] <emanuele6> see earnest's example
[16:26:26] <emanuele6> with the added step of adding the offset (e.g. `+0300') manually
[16:27:55] <emanuele6> (and calling strftime() with the format you want)
[16:27:58] *** Joins: bluedust (~bluedust@117.241.185.116)
[17:03:02] <earnest> emanuele6: I don't know how they'd convert locale C (with comma) timestamps to mktime
[17:03:16] <earnest> emanuele6: You know...  jq -R might be better at this, I'm serious
[17:04:23] <earnest> # printf 'foo\tbar   baz    qux\n' | jq -Rr '"\(now) \(.)"'
[17:04:25] <shbot> earnest: 1641476064.329385 foo   bar   baz    qux
[17:04:54] <earnest> It can slice strings, has time functions, etc.
[17:05:10] <earnest> And most importantly, maintains the whitespace formatting
[17:08:35] <emanuele6> yesterday, i found out jq's `gsub()' is actually a recursive `sub()' :(
[17:09:45] <earnest> builtin.jq \o
[17:10:17] <emanuele6> earnest: gsub is implemented in sub(...; "g") which is internal
[17:11:02] <earnest> emanuele6: https://github.com/stedolan/jq/blob/master/src/builtin.jq#L131
[17:11:13] <emanuele6> oh, wow
[17:11:24] <emanuele6> i see
[17:11:36] <emanuele6> anyhow i had to use `split("\n")|map("prefix\(.)")|join("\n")'  because `gsub("^"; "prefix"; "m")' is an infinite loop
[17:11:59] <earnest> lol
[17:12:09] <emanuele6> it took me a lot to figure out too
[17:12:26] <earnest> Yeah that would be quite confusing
[17:12:28] <emanuele6> jq's gsub() is a trap and not really that useful
[17:13:27] <earnest> emanuele6: Worth a bug report
[17:13:35] <earnest> Even if just a note for people to stumble across
[17:13:40] *** Quits: o97115 (~o97115@78-56-97-76.static.zebra.lt) (Quit: o97115)
[17:20:05] *** Joins: bluedust_ (~bluedust@117.241.191.1)
[17:22:27] *** Quits: bluedust (~bluedust@117.241.185.116) (Ping timeout: 256 seconds)
[17:26:11] <emanuele6> (i meant `gsub("(?<x>^|\n)"; "\(.x)prefix")', ^ behaving like that in multiline mode is a GNUsedism)
[17:26:15] <emanuele6> earnest: yeah, maybe
[17:26:24] <emanuele6> i have not checked if there is one already actually
[17:26:57] <emanuele6> there is https://github.com/stedolan/jq/issues/2148
[17:28:25] <emanuele6> # jq -n '"aa" | gsub("a"; "b")'
[17:28:27] <shbot> emanuele6: 3"bb"
[17:28:29] <emanuele6> # jq -n '"aa" | gsub("a"; "a")'
[17:28:31] <shbot> emanuele6: 3"aa"
[17:29:06] <emanuele6> mm, that is odd, maybe it is only bugged if "^" is present
[17:29:34] <emanuele6> oh, well, #awk is not the place for discussing this
[17:34:08] *** Quits: bluedust_ (~bluedust@117.241.191.1) (Remote host closed the connection)
[17:52:00] *** Joins: bluedust (~bluedust@117.241.191.1)
[17:53:23] *** Joins: vlm (~vlm@user/vlm)
[18:06:29] *** Joins: Thanatermesis (~Thanaterm@191.92.148.122)
[20:03:23] *** Quits: dextaa (~DV@user/dextaa) (Ping timeout: 256 seconds)
[20:51:37] *** Joins: dextaa (~DV@user/dextaa)
[21:46:32] *** Quits: epony (epony@user/epony) (Ping timeout: 240 seconds)
[21:50:38] *** Joins: epony (epony@user/epony)
[22:08:43] *** Quits: bluedust (~bluedust@117.241.191.1) (Remote host closed the connection)
[23:41:05] *** Quits: user51 (~user51@176.228.148.215) (Remote host closed the connection)
[23:48:56] *** Joins: roarde (~roarde@user/roarde)
