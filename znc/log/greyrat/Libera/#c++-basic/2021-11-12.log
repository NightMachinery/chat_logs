[00:08:23] *** Joins: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net)
[00:26:00] *** Joins: CaCode (~CaCode@user/cacode)
[00:32:59] *** Joins: Gaboradon (~Gaboradon@cpe-86-58-57-5.static.triera.net)
[01:10:49] *** Joins: Gaboradon_ (~Gaboradon@cpe-86-58-57-5.static.triera.net)
[01:10:49] *** Quits: Gaboradon_ (~Gaboradon@cpe-86-58-57-5.static.triera.net) (Client Quit)
[01:12:16] *** Quits: Gaboradon (~Gaboradon@cpe-86-58-57-5.static.triera.net) (Ping timeout: 268 seconds)
[01:20:15] *** Joins: Guest92 (~Guest92@68.132.78.81)
[01:21:37] <Guest92> Does anyone know if there is a way to read from a file straight into a vector?
[01:21:46] <Guest92> Currently I am doing something like:
[01:22:17] *** Quits: magla (~gelignite@55d4f4a1.access.ecotel.net) (Quit: Stay safe!)
[01:22:43] <Guest92> string temp;  ifstream fin;  vector<string> myVec;
[01:23:08] <Guest92> getline(fin, temp, delim);   myVec.emplace_back(temp);
[01:23:54] <Guest92> I am wondering if there is a way to do something like:  myVec.emplace_back(getline(fin, delim));
[01:24:57] <Guest92> Or maybe the overhead of using temp is negligable.  I'm not 100% sure.
[01:25:25] <Guest92> My usecase involves reading very long strings from a file that is hundreds of GB so I want to be as efficient as possible.
[01:27:15] <Alipha> Guest92: ... so you're reading the whole 100's of GB file into the vector?
[01:29:14] <Guest92> No, sorry for not being clear. Lines are maybe thousands of characters long.  And there are hundreds of GB of llines (so many "medium" sized lines)
[01:29:34] <Guest92> *A thousand chars long or less
[01:29:50] <Guest92> for a line (not multiple thousands)
[01:30:29] <Alipha> Guest92: but the whole contents of the file is going to end up in this vector? or are you storing some of the lines? or are you only working with parts of the file at a time? or?
[01:32:58] <Guest92> Oh sorry, yeah its all going to end up in the vector.   Although I am probably going to do some processing to compress it into a numeric representation so I only have to store each uniquely occurring string once.  Still haven't fully thought this through yet.
[01:33:35] <Guest92> Likely will be streaming in the lines and processing them either as they come in or processing in chunks.
[01:35:04] <Guest92> I guess my current concern is reading each line in as efficiently as possible.  Exactly how I will parse and store them once read in is still a bit up in the air.
[01:35:04] <Alipha> Guest92: considering i assume you don't have 100's GB of RAM, this seems like a bad idea
[01:36:21] <Guest92> Well for dev purposes I actually have over a TB or RAM, but Ideally I would like to keep it in the range of 30-100 GB
[01:36:39] <Alipha> that's impressive
[01:37:04] *** Quits: argonautx_ (~argonautx@i5E867262.versanet.de) (Quit: Leaving)
[01:37:25] <Guest92> Good old university supercomputer.
[01:41:53] <Alipha> while(getline(fin, temp, delim)) { myVec.emplace_back(temp); }  // i think this will actually be fairly decent with performance and is pretty simple
[01:43:45] <Alipha> you're concerned about populating the temp string and then copying the temp string into the vector... but that is actually more efficient than doing:
[01:43:59] <Alipha> while(getline(fin, temp, delim)) { myVec.emplace_back(std::move(temp)); } 
[01:45:11] <Alipha> because the former will reuse the memory allocated by temp. whereas the latter will steal the memory allocated by temp to put it into the vector, which means on the next loop, temp will be empty, and then the getline will end up having to reallocate the temp string several times as temp grows
[01:45:50] <Alipha> so with the former, temp ends up becoming stable in its allocation size and not having to reallocate
[01:47:21] <Alipha> if the performance of this is indeed a huge concern, my suggestion then would be to use a std::vector<std::string_view> instead. you would read the whole file into one big buffer, and then the string_views inside the vector would simply point into this buffer
[01:47:31] <Alipha> or, instead of reading the file, using mmap
[01:49:41] *** Quits: night_wulfe_ (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Read error: Connection reset by peer)
[01:52:31] *** Quits: TheHermann (~TheHerman@gateway/tor-sasl/thehermann) (Remote host closed the connection)
[01:54:09] <Guest92> Ah, fascinating. I was actually thinking move might be better but your explanation definitely makes sense.
[01:59:48] <Guest92> The string_view and mmap are both interesting ideas (and sound fairly similar?).  I could see reading chunks of the file in at a time and processing via string_view.  Since I would know the buffer size ahead of time I'm assuming this would be more efficient than the vector approach which would do a lot of reallocating.
[02:08:45] *** Quits: kylese (~kylese@p5dd8ba77.dip0.t-ipconnect.de) (Quit: Leaving)
[02:15:09] <Alipha> I'd just read the whole file and not chunks, since you have the ram, and reading by chunks will be more complicated, since a chunk most likely won't end on a line boundary
[02:31:33] *** Joins: Inline (~Inline@2a02:908:1252:7a80:eac0:c033:fea2:56dd)
[02:36:47] <Guest92> That would work for now, but the goal is to write something that people with 64~100 GB ram max could use
[02:40:28] <Guest92> A sort of related question I also had was how vector.reserve() works with vector<string>.  I'm assuming it reserves memory based on some default string size?  But then I would question how useful that really is if you are expecting very large strings.  If you need to read in say a string that is 500 chars long then doesn't reallocation need to
[02:40:28] <Guest92> happen anyway, making the reserve() essentially "useless"?
[02:40:51] *** Quits: spaceangel (~spaceange@ip-89-176-181-220.net.upcbroadband.cz) (Remote host closed the connection)
[02:44:03] *** Quits: kariosfox (~kariosfox@87.116.235.192) (Remote host closed the connection)
[03:19:17] <Alipha> Guest92: so, a std::string itself is just a pointer to the actual data, a int to keep track of the size, and an int to keep track of the capacity. So when you reserve on the vector, all you're reserving for each string is those 3 things: a pointer and 2 ints. You're not reserving any space for the characters themselves.
[03:20:02] <Alipha> So in the grand scheme of things, no, reserve probably isn't going to help that much
[03:20:42] *** Quits: Svitkona (~Svitkona@157.245.38.135) (Quit: Ping timeout (120 seconds))
[03:20:52] *** Joins: Svitkona (~Svitkona@157.245.38.135)
[03:21:41] *** Quits: cuavas (~cuavas@hhsrv1.vastheman.com) (Quit: leaving)
[03:22:02] *** Joins: cuavas (~cuavas@hhsrv1.vastheman.com)
[03:34:40] <Guest92> Ah, I see.  Does the situation change at all if the datatype is different?  Say i have vector<mystruct> where mystruct has a string and a few doubles as members.  Does this change anything at all, or is reserve() just reserving space for the vector book-keeping elements?
[03:43:24] *** Quits: CaCode (~CaCode@user/cacode) (Read error: Connection reset by peer)
[03:43:38] *** Joins: CaCode (~CaCode@user/cacode)
[03:59:16] <Alipha> Guest92: reserve(n) will just reserve n*sizeof(mystruct)
[04:02:51] <Alipha> But that will save the vector from having to reallocate. Which if you're pushing back elements one at a time, without the reserve, the vector will reallocate log2(n) times
[04:09:31] *** Joins: gggp (~gggp@li2010-23.members.linode.com)
[04:16:45] *** Joins: ferdna (~ferdna@user/ferdna)
[04:26:40] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[04:36:27] <Guest92> Ah I see.  I'm assuming that's the size when using the default constructor?  So string contributes 0 (+padding) and the doubles whatever size the platform dictates.
[04:38:45] <Guest92> This also raises the question of what exactly is kept contiguous in memory.  For vector<string>, is it just the housekeeping bits that are stored in the array and kept contiguous (with the char arrays wherever on the heap) or is it that both housekeeping and the char arrays are kept contiguous in memory?
[04:39:16] <Alipha> Guest92: just the housekeeping bits are contiguous
[04:39:17] <Guest92> *bits that are stored in the _vector_*
[04:39:57] <Guest92> Ah, that makes a lot more sense.  Otherwise growing a vector<string> would be a headache
[04:40:01] *** Quits: Inline (~Inline@2a02:908:1252:7a80:eac0:c033:fea2:56dd) (Ping timeout: 250 seconds)
[04:40:26] <Guest92> Alipha thanks for all the help!!
[04:40:35] <Alipha> Guest92: reserve does not call any constructors. It's just allocating space for the class/struct itself, not anything that the members may point to
[04:42:57] <Guest92> Hmmm, so how does the size of a string get determined?  Just all the primitives it's class contains?
[04:43:07] <Guest92> *string member
[04:43:30] <Alipha> Guest92: yes
[04:45:54] <Guest92> Alipha: Thanks!
[04:48:15] <Alipha> Guest92: sizeof is computed at compile-time, so it cannot know how much space the pointers will point to at runtime
[04:48:41] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 264 seconds)
[04:54:47] <Guest92> Alipha: Yeah, that had me a bit confused.  But if all that the vector is tracking are the pointers+ then reserve() and sizeof() make perfect sense.  Reallocating the vector (while not great) is not quite as bad as I thought it might be
[04:58:24] *** Quits: sunny93 (~sunny93@wireguard/tunneler/sunny93) (Quit: The Lounge - https://thelounge.chat)
[04:59:44] *** Joins: sunny93 (~sunny93@wireguard/tunneler/sunny93)
[05:09:04] *** Quits: artok (~azo@mobile-access-5d6aa9-118.dhcp.inet.fi) (Ping timeout: 268 seconds)
[05:10:03] *** Quits: DSpider (DSpider@2a02:2f00:1ff:ffff::646c:68d8) (Quit: Leaving)
[05:10:47] *** Quits: lkor (~lionkor@beammp/staff/lionkor) (Ping timeout: 250 seconds)
[05:17:04] *** Quits: gggp (~gggp@li2010-23.members.linode.com) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[05:24:13] *** wasd_ is now known as wasd
[05:24:32] *** Quits: wasd (~wasd@108.101.7.51.dyn.plus.net) (Changing host)
[05:24:32] *** Joins: wasd (~wasd@user/axis)
[05:25:29] *** Joins: artok (~azo@mobile-access-5d6aa9-118.dhcp.inet.fi)
[05:30:02] *** Quits: artok (~azo@mobile-access-5d6aa9-118.dhcp.inet.fi) (Ping timeout: 268 seconds)
[05:31:06] *** Joins: gggp (~gggp@li2010-23.members.linode.com)
[05:32:44] *** Joins: CaCode_ (~CaCode@user/cacode)
[05:35:02] *** Quits: CaCode (~CaCode@user/cacode) (Ping timeout: 240 seconds)
[05:39:46] *** Quits: gehn (~gehn@user/gehn) (Quit: Leaving)
[05:41:42] *** Quits: gggp (~gggp@li2010-23.members.linode.com) (Ping timeout: 260 seconds)
[05:49:58] *** Joins: gggp (~gggp@li2010-23.members.linode.com)
[05:52:17] *** Joins: artok (~azo@mobile-access-5d6aa9-118.dhcp.inet.fi)
[06:16:24] *** Joins: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[06:21:53] *** Quits: gggp (~gggp@li2010-23.members.linode.com) (Remote host closed the connection)
[06:22:25] *** Joins: gggp (~gggp@li2010-23.members.linode.com)
[06:32:49] *** Joins: smallvil_ (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[06:33:23] *** Quits: smallvil_ (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Remote host closed the connection)
[06:37:14] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Ping timeout: 260 seconds)
[06:43:26] *** Quits: gggp (~gggp@li2010-23.members.linode.com) (Remote host closed the connection)
[06:44:03] *** Joins: gggp (~gggp@li2010-23.members.linode.com)
[06:44:13] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[06:44:48] *** Quits: gggp (~gggp@li2010-23.members.linode.com) (Remote host closed the connection)
[06:45:22] *** Joins: gggp (~gggp@li2010-23.members.linode.com)
[06:57:19] *** Quits: gggp (~gggp@li2010-23.members.linode.com) (Remote host closed the connection)
[06:57:51] *** Joins: gggp (~gggp@li2010-23.members.linode.com)
[06:58:39] *** Joins: Guest42 (~Guest42@eth-west-pareq2-46-193-4-100.wb.wifirst.net)
[07:19:16] *** Quits: duude__ (~duude__@user/duude/x-4676560) (Ping timeout: 245 seconds)
[07:32:24] *** Joins: duude__ (~duude__@user/duude/x-4676560)
[07:36:12] *** Joins: duude__- (~duude__@user/duude/x-4676560)
[07:37:41] *** Quits: duude__ (~duude__@user/duude/x-4676560) (Ping timeout: 268 seconds)
[07:37:41] *** duude__- is now known as duude__
[07:39:32] *** Quits: noarb (~noarb@user/noarb) (Ping timeout: 268 seconds)
[07:41:58] *** Joins: duude__- (~duude__@user/duude/x-4676560)
[07:42:37] *** Quits: duude__ (~duude__@user/duude/x-4676560) (Ping timeout: 268 seconds)
[07:42:50] *** duude__- is now known as duude__
[07:44:11] *** Joins: CaCode- (~CaCode@user/cacode)
[07:46:47] *** Quits: CaCode_ (~CaCode@user/cacode) (Ping timeout: 250 seconds)
[07:47:39] *** Quits: duude__ (~duude__@user/duude/x-4676560) (Ping timeout: 256 seconds)
[07:48:04] *** Joins: duude__ (~duude__@user/duude/x-4676560)
[07:51:08] *** Joins: noarb (~noarb@user/noarb)
[07:57:28] *** Quits: gggp (~gggp@li2010-23.members.linode.com) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[08:04:43] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[08:06:22] *** Joins: Trollman- (~Trollmann@user/trollmann)
[08:06:49] *** Joins: gggp (~gggp@li2010-23.members.linode.com)
[08:13:18] *** Joins: byku (~byku@host81-136-214-253.in-addr.btopenworld.com)
[08:13:51] *** Quits: Trollmann (~Trollmann@user/trollmann) (*.net *.split)
[08:31:51] *** Quits: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net) (Ping timeout: 256 seconds)
[08:31:56] *** Quits: byku (~byku@host81-136-214-253.in-addr.btopenworld.com) (Quit: WeeChat 2.8)
[08:42:12] *** Joins: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net)
[08:50:25] *** Quits: gggp (~gggp@li2010-23.members.linode.com) (Remote host closed the connection)
[08:51:04] *** Joins: gggp (~gggp@li2010-23.members.linode.com)
[08:52:54] *** Quits: gggp (~gggp@li2010-23.members.linode.com) (Client Quit)
[08:54:49] *** Joins: gggp (~gggp@li2010-23.members.linode.com)
[09:01:27] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Read error: Connection reset by peer)
[09:19:35] *** Joins: givemeyourpies (~givemeyou@c-66-235-2-202.sea.wa.customer.broadstripe.net)
[09:31:12] *** Quits: Guest92 (~Guest92@68.132.78.81) (Quit: Client closed)
[09:36:33] *** Quits: gggp (~gggp@li2010-23.members.linode.com) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[09:37:24] *** Joins: gggp (~gggp@li2010-23.members.linode.com)
[09:40:24] *** Quits: gggp (~gggp@li2010-23.members.linode.com) (Client Quit)
[10:03:25] *** Joins: byku (~byku@host81-136-214-253.in-addr.btopenworld.com)
[10:13:54] *** Quits: Guest42 (~Guest42@eth-west-pareq2-46-193-4-100.wb.wifirst.net) (Ping timeout: 256 seconds)
[10:15:25] *** Joins: night_wulfe_ (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[10:18:57] *** Quits: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 256 seconds)
[10:26:02] *** Quits: byku (~byku@host81-136-214-253.in-addr.btopenworld.com) (Ping timeout: 268 seconds)
[10:27:16] *** Joins: byku (~byku@host81-136-214-253.in-addr.btopenworld.com)
[10:33:20] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[10:35:54] *** Quits: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net) (Ping timeout: 268 seconds)
[10:46:08] *** Joins: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net)
[11:29:47] *** Quits: byku (~byku@host81-136-214-253.in-addr.btopenworld.com) (Ping timeout: 256 seconds)
[11:42:57] *** Joins: Gaboradon (~Gaboradon@cpe-86-58-57-5.static.triera.net)
[11:43:07] *** Joins: DSpider (DSpider@2a02:2f00:4ff:ffff::646c:689e)
[11:53:04] *** Joins: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[11:56:59] *** Quits: night_wulfe_ (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 256 seconds)
[12:04:33] *** Quits: givemeyourpies (~givemeyou@c-66-235-2-202.sea.wa.customer.broadstripe.net) (Quit: Going offline, see ya! (www.adiirc.com))
[12:12:05] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[12:18:00] *** Joins: byku (~byku@host81-136-214-253.in-addr.btopenworld.com)
[12:23:57] <byku> just wondering, is there no activity on this channel?
[12:46:10] *** Joins: PJBoy (~PJBoy@user/pjboy)
[13:05:56] <LangerJan> byku: time zones, they are crazy
[13:35:58] *** Quits: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net) (Ping timeout: 268 seconds)
[13:36:19] *** Joins: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net)
[13:41:55] *** Joins: givemeyourpies (~givemeyou@c-66-235-2-202.sea.wa.customer.broadstripe.net)
[14:18:09] *** Quits: Gaboradon (~Gaboradon@cpe-86-58-57-5.static.triera.net) (Quit: Shutdown)
[14:23:40] *** Joins: gggp (~gggp@li2010-23.members.linode.com)
[14:27:04] *** Quits: gggp (~gggp@li2010-23.members.linode.com) (Client Quit)
[14:27:40] *** Joins: gggp (~gggp@li2010-23.members.linode.com)
[14:30:44] *** Joins: argonautx (~argonautx@i5E8671B2.versanet.de)
[14:31:57] *** Quits: gggp (~gggp@li2010-23.members.linode.com) (Ping timeout: 250 seconds)
[14:50:18] *** Joins: gggp (~gggp@li2010-23.members.linode.com)
[14:54:30] *** Joins: Gaboradon (~Gaboradon@cpe-86-58-57-5.static.triera.net)
[15:06:18] *** Quits: gggp (~gggp@li2010-23.members.linode.com) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[15:09:47] *** Quits: byku (~byku@host81-136-214-253.in-addr.btopenworld.com) (Quit: WeeChat 2.8)
[15:15:09] *** Quits: DSpider (DSpider@2a02:2f00:4ff:ffff::646c:689e) (Quit: Leaving)
[15:40:34] *** Quits: merit (~merit@2001:470:69fc:105::5ae) (Quit: Bridge terminating on SIGTERM)
[15:40:38] *** Quits: andrea[m]123 (~andreanit@2001:470:69fc:105::1:28a8) (Quit: Bridge terminating on SIGTERM)
[15:40:41] *** Quits: ormaaj (~ormaaj@user/ormaaj) (Quit: Bridge terminating on SIGTERM)
[15:40:43] *** Quits: hnOsmium0001[m] (~hnosmium0@2001:470:69fc:105::15d4) (Quit: Bridge terminating on SIGTERM)
[15:40:46] *** Quits: aleko1[m] (~aleko1@2001:470:69fc:105::1:1016) (Quit: Bridge terminating on SIGTERM)
[15:50:55] *** Joins: gggp (~gggp@li2010-23.members.linode.com)
[15:51:21] *** Quits: gggp (~gggp@li2010-23.members.linode.com) (Client Quit)
[15:56:56] *** Joins: aleko1[m] (~aleko1@2001:470:69fc:105::1:1016)
[15:57:39] *** Joins: DSpider (DSpider@2a02:2f00:4ff:ffff::646c:689e)
[15:57:39] *** Quits: DSpider (DSpider@2a02:2f00:4ff:ffff::646c:689e) (Client Quit)
[16:00:39] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Ping timeout: 256 seconds)
[16:01:00] *** Joins: andrea[m] (~andreanit@2001:470:69fc:105::1:28a8)
[16:01:00] *** Joins: merit (~merit@2001:470:69fc:105::5ae)
[16:01:00] *** Joins: hnOsmium0001[m] (~hnosmium0@2001:470:69fc:105::15d4)
[16:01:00] *** Joins: ormaaj (~ormaaj@user/ormaaj)
[16:20:40] *** Quits: hnOsmium0001[m] (~hnosmium0@2001:470:69fc:105::15d4) (Quit: Client limit exceeded: 20000)
[16:20:45] *** Quits: merit (~merit@2001:470:69fc:105::5ae) (Quit: Client limit exceeded: 20000)
[16:21:00] *** Quits: aleko1[m] (~aleko1@2001:470:69fc:105::1:1016) (Quit: Client limit exceeded: 20000)
[16:22:00] *** Quits: andrea[m] (~andreanit@2001:470:69fc:105::1:28a8) (Quit: Client limit exceeded: 20000)
[16:23:04] *** Joins: gggp (~gggp@li2010-23.members.linode.com)
[16:25:13] *** Quits: gggp (~gggp@li2010-23.members.linode.com) (Client Quit)
[16:36:51] *** Joins: gggp (~gggp@li2010-23.members.linode.com)
[16:40:47] *** Quits: gggp (~gggp@li2010-23.members.linode.com) (Client Quit)
[16:43:38] *** Joins: gggp (~gggp@li2010-23.members.linode.com)
[16:44:09] *** Quits: gggp (~gggp@li2010-23.members.linode.com) (Client Quit)
[17:02:34] *** Joins: gggp (~gggp@li2010-23.members.linode.com)
[17:02:39] *** Quits: gggp (~gggp@li2010-23.members.linode.com) (Remote host closed the connection)
[17:03:20] *** Joins: gggp (~gggp@li2010-23.members.linode.com)
[17:07:34] *** Quits: gggp (~gggp@li2010-23.members.linode.com) (Client Quit)
[17:22:16] *** Quits: Flonk (~Flonk@ec2-52-40-29-25.us-west-2.compute.amazonaws.com) (Quit: The Lounge - https://thelounge.chat)
[17:23:52] *** Joins: Flonk (~Flonk@ec2-52-40-29-25.us-west-2.compute.amazonaws.com)
[17:26:52] *** Quits: Flonk (~Flonk@ec2-52-40-29-25.us-west-2.compute.amazonaws.com) (Client Quit)
[17:28:26] *** Joins: Flonk (~Flonk@ec2-52-40-29-25.us-west-2.compute.amazonaws.com)
[17:31:07] *** Quits: Flonk (~Flonk@ec2-52-40-29-25.us-west-2.compute.amazonaws.com) (Client Quit)
[17:32:11] *** Joins: dld (~dld@2601:197:600:1210:9992:b3e2:af1a:fbc2)
[17:35:18] *** Joins: z9z0b3t1c (z9z0b3t1c@gateway/vpn/protonvpn/z9z0b3t1c)
[17:35:52] *** Joins: riksteri (riksteri@gateway/vpn/airvpn/riksteri)
[17:39:02] *** Joins: Flonk (~Flonk@ec2-52-40-29-25.us-west-2.compute.amazonaws.com)
[17:40:16] *** Joins: Inline (~Inline@2a02:908:1252:7a80:6396:dd82:eabc:bcd7)
[17:46:56] *** Quits: Flonk (~Flonk@ec2-52-40-29-25.us-west-2.compute.amazonaws.com) (Quit: The Lounge - https://thelounge.chat)
[17:48:30] *** Joins: Flonk (~Flonk@ec2-52-40-29-25.us-west-2.compute.amazonaws.com)
[18:04:41] *** Quits: Flonk (~Flonk@ec2-52-40-29-25.us-west-2.compute.amazonaws.com) (Ping timeout: 245 seconds)
[18:49:56] *** Quits: z9z0b3t1c (z9z0b3t1c@gateway/vpn/protonvpn/z9z0b3t1c) (Ping timeout: 246 seconds)
[18:50:49] *** Joins: Guest42 (~Guest42@eth-west-pareq2-46-193-4-100.wb.wifirst.net)
[19:24:40] *** Joins: kariosfox (~kariosfox@87.116.235.192)
[19:37:56] *** Joins: gggp (~gggp@li2010-23.members.linode.com)
[19:38:45] *** Quits: gggp (~gggp@li2010-23.members.linode.com) (Remote host closed the connection)
[19:39:54] *** Joins: gggp (~gggp@li2010-23.members.linode.com)
[19:47:11] *** Quits: Inline (~Inline@2a02:908:1252:7a80:6396:dd82:eabc:bcd7) (Ping timeout: 264 seconds)
[19:49:08] *** Quits: gggp (~gggp@li2010-23.members.linode.com) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[19:49:59] *** Joins: Flonk (~Flonk@ec2-34-221-56-110.us-west-2.compute.amazonaws.com)
[20:03:02] *** Joins: wladimir (~doforlove@user/doforlove33)
[20:03:14] *** wladimir is now known as ethrl
[20:17:28] *** Quits: Flonk (~Flonk@ec2-34-221-56-110.us-west-2.compute.amazonaws.com) (Quit: The Lounge - https://thelounge.chat)
[20:19:14] *** Joins: meator (~meator@user/meator)
[20:28:41] *** Joins: Flonk (~Flonk@ec2-34-221-56-110.us-west-2.compute.amazonaws.com)
[20:31:04] *** Quits: Flonk (~Flonk@ec2-34-221-56-110.us-west-2.compute.amazonaws.com) (Client Quit)
[20:32:29] *** Joins: Flonk (~Flonk@ec2-34-221-56-110.us-west-2.compute.amazonaws.com)
[20:36:04] *** Quits: meator (~meator@user/meator) (Quit: Leaving)
[20:52:54] *** Quits: ethrl (~doforlove@user/doforlove33) (Quit: WeeChat 3.3)
[20:54:44] *** Joins: kylese (~kylese@p5dd8b9a8.dip0.t-ipconnect.de)
[20:55:14] *** Joins: magla (~gelignite@55d446ec.access.ecotel.net)
[20:59:56] *** Quits: Flonk (~Flonk@ec2-34-221-56-110.us-west-2.compute.amazonaws.com) (Quit: The Lounge - https://thelounge.chat)
[21:28:27] *** Quits: kariosfox (~kariosfox@87.116.235.192) (Remote host closed the connection)
[22:08:54] *** Quits: CaCode- (~CaCode@user/cacode) (Remote host closed the connection)
[22:09:56] *** Joins: CaCode- (~CaCode@user/cacode)
[22:11:55] *** Quits: CaCode- (~CaCode@user/cacode) (Remote host closed the connection)
[22:12:12] *** Joins: CaCode- (~CaCode@user/cacode)
[22:12:37] *** CaCode- is now known as CaCode
[22:15:58] *** Joins: meator (~meator@user/meator)
[22:31:43] *** Quits: meator (~meator@user/meator) (Quit: Leaving)
[23:08:54] *** Quits: CaCode (~CaCode@user/cacode) (Remote host closed the connection)
[23:39:40] *** Joins: g0zart (~g0zart@gateway/vpn/pia/g0zart)
