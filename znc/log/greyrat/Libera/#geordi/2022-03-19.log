[09:55:21] *** Quits: great_taste (~great_tas@user/great-taste/x-5798414) (Quit: Client closed)
[13:58:57] <TinoDidriksen> geordi --version
[13:58:58] <geordi> Same output.
[14:46:29] <TinoDidriksen> geordi --version
[14:46:30] <geordi> GCC 12.0.1 20220319 (experimental)
[16:54:33] <CarloWood> { std::vector<S> v1(5); } struct S { double d; tracked::B b; std::string s; };
[16:54:34] <geordi> B0* B1* B2* B3* B4* B0~ B1~ B2~ B3~ B4~
[16:56:36] <CarloWood> { std::vector<S> v1(5); auto v2 = f(v1); SHOW(v2); } struct S { double d; tracked::B b; std::string s; }; std::vector<S> f(std::vector<S> const& v) { std::vector<S> result; for(auto&& a: v) result.push_back(e); return result; }
[16:56:37] <geordi> error: 'e' was not declared in this scope; did you mean 'numbers::e'? (fix known)
[16:56:52] <CarloWood> { std::vector<S> v1(5); auto v2 = f(v1); SHOW(v2); } struct S { double d; tracked::B b; std::string s; }; std::vector<S> f(std::vector<S> const& v) { std::vector<S> result; for(auto&& e : v) result.push_back(e); return result; }
[16:56:53] <geordi> error: no match for 'operator<<' in 'o << escape<S>((* & x))' (operand types are 'ostream' and 'const S')
[16:58:23] <CarloWood> { std::vector<S> v1(5); auto v2 = f(v1); SHOW(v2); } double sd; struct S { double d = ++sd; ; tracked::B b; std::string s; }; std::vector<S> f(std::vector<S> const& v) { std::vector<S> result; for(auto&& e : v) result.push_back(e); return result; } std::ostream& operator<<(std::ostream& os, S const& s) { return os << s.d; }
[16:58:23] <geordi> error: extra ';' (fix known)
[17:00:08] <CarloWood> { std::vector<S> v1(5); auto v2 = f(v1); SHOW(v2); } double sd; struct S { S() { d = ++sd; } double d; ; tracked::B b; std::string s; }; std::vector<S> f(std::vector<S> const& v) { std::vector<S> result; for(auto&& e : v) result.push_back(e); return result; } std::ostream& operator<<(std::ostream& os, S const& s) { return os << s.d; }
[17:00:09] <geordi> Same error.
[17:00:16] <CarloWood> geordi: fix
[17:00:17] <geordi> B0* B1* B2* B3* B4* B5*(B0) B6*(B1) B7*(B5) B5~ B8*(B2) B9*(B7) B10*(B6) B7~ B6~ B11*(B3) B12*(B4) B13*(B9) B14*(B10) B15*(B8) B16*(B11) B9~ B10~ B8~ B11~ v2 = {1, 2, 3, 4, 5} B13~ B14~ B15~ B16~ B12~ B0~ B1~ B2~ B3~ B4~
[17:00:23] <CarloWood> geordi: show
[17:00:24] <geordi> { std::vector<S> v1(5); auto v2 = f(v1); SHOW(v2); } double sd; struct S { S() { d = ++sd; } double d;  tracked::B b; std::string s; }; std::vector<S> f(std::vector<S> const& v) { std::vector<S> result; for(auto&& e : v) result.push_back(e); return result; } std::ostream& operator<<(std::ostream& os, S const& s) { return os << s.d; }
[17:06:14] <CarloWood> geordi: remove all std::
[17:06:15] <geordi> B0* B1* B2* B3* B4* B5*(B0) B6*(B1) B7*(B5) B5~ B8*(B2) B9*(B7) B10*(B6) B7~ B6~ B11*(B3) B12*(B4) B13*(B9) B14*(B10) B15*(B8) B16*(B11) B9~ B10~ B8~ B11~ v2 = {1, 2, 3, 4, 5} B13~ B14~ B15~ B16~ B12~ B0~ B1~ B2~ B3~ B4~
[17:06:18] <CarloWood> geordi: show
[17:06:19] <geordi> { vector<S> v1(5); auto v2 = f(v1); SHOW(v2); } double sd; struct S { S() { d = ++sd; } double d;  tracked::B b; string s; }; vector<S> f(vector<S> const& v) { vector<S> result; for(auto&& e : v) result.push_back(e); return result; } ostream& operator<<(ostream& os, S const& s) { return os << s.d; }
[17:07:12] <CarloWood> { vector<S> v1(5); auto v2 = f(v1); SHOW(v2); } double sd; struct S { S() { d = ++sd; } double d; tracked::B b; string s; }; vector<S> f(vector<S> const& v) { vector<S> result; result.reserve(5); for(auto&& e : v) result.push_back(e); return result; } ostream& operator<<(ostream& os, S const& s) { return os << s.d; }
[17:07:13] <geordi> B0* B1* B2* B3* B4* B5*(B0) B6*(B1) B7*(B2) B8*(B3) B9*(B4) v2 = {1, 2, 3, 4, 5} B5~ B6~ B7~ B8~ B9~ B0~ B1~ B2~ B3~ B4~
[17:09:50] <CarloWood> { vector<S> v1(2); vector<S> v2(3); auto v3 = f(v1, v2); SHOW(v3); } double sd; struct S { S() { d = ++sd; } double d; tracked::B b; string s; }; vector<S> f(vector<S> const& v1, vector<S> const& v2) { vector<S> result; result.reserve(10); for(auto&& e : v1) result.push_back(e); result.insert(result.end(), v2.begin(), v2.end()); return result; } ostream& operator<<(ostream& os, S const& s) { return os << s.d; }
[17:09:51] <geordi> B0* B1* B2* B3* B4* B5*(B0) B6*(B1) B7*(B2) B8*(B3) B9*(B4) v3 = {1, 2, 3, 4, 5} B5~ B6~ B7~ B8~ B9~ B2~ B3~ B4~ B0~ B1~
[17:11:09] <CarloWood> { vector<S> v1(2); vector<S> v2(3); auto v3 = f(v1, v2); SHOW(v3); } double sd; struct S { S() { d = ++sd; } double d; tracked::B b; string s; }; vector<S> f(vector<S> const& v1, vector<S> const& v2) { vector<S> result; result.reserve(10); result.insert(result.end(), v1.begin(), v1.end()); result.insert(result.end(), v2.begin(), v2.end()); return result; } ostream& operator<<(ostream& os, S const& s) { return os << s.d; }
[17:11:10] <geordi> Same output.
[17:13:06] <CarloWood> { vector<S> v1(2, 42); vector<S> v2(3, 43); auto v3 = f(v1, v2); SHOW(v3); } double sd; struct S { S(int n) { d = n + ++sd; } double d; tracked::B b; string s; }; vector<S> f(vector<S> const& v1, vector<S> const& v2) { vector<S> result; result.reserve(10); result.insert(result.end(), v1.begin(), v1.end()); result.insert(result.end(), v2.begin(), v2.end()); return result; } ostream& operator<<(ostream& os, S const& s) { return 
[17:13:06] <CarloWood> os << s.d; }
[17:13:06] <geordi> error: Unexpected end of request. Expected '}' or balanced code.
[17:13:17] <CarloWood> soo long :/
[17:14:05] <CarloWood> too*
[17:14:17] <CarloWood> geordi: replace all result with r
[17:14:17] <geordi> Same error.
[17:14:26] <CarloWood> geordi: show
[17:14:26] <geordi> { vector<S> v1(2, 42); vector<S> v2(3, 43); auto v3 = f(v1, v2); SHOW(v3); } double sd; struct S { S(int n) { d = n + ++sd; } double d; tracked::B b; string s; }; vector<S> f(vector<S> const& v1, vector<S> const& v2) { vector<S> result; result.reserve(10); result.insert(result.end(), v1.begin(), v1.end()); result.insert(result.end(), v2.begin(), v2.end()); return result; } ostream& operator<<(ostream& os, S const& s) { return 
[17:14:41] <CarloWood> wut
[17:14:48] <CarloWood> geordi: replace result with r
[17:14:48] <geordi> error: String `result` occurs multiple times.
[17:14:57] <CarloWood> geordi: replace every result with r
[17:14:58] <geordi> error: Unexpected end of request. Expected '}' or balanced code.
[17:15:02] <CarloWood> geordi: show
[17:15:03] <geordi> { vector<S> v1(2, 42); vector<S> v2(3, 43); auto v3 = f(v1, v2); SHOW(v3); } double sd; struct S { S(int n) { d = n + ++sd; } double d; tracked::B b; string s; }; vector<S> f(vector<S> const& v1, vector<S> const& v2) { vector<S> result; result.reserve(10); result.insert(result.end(), v1.begin(), v1.end()); result.insert(result.end(), v2.begin(), v2.end()); return result; } ostream& operator<<(ostream& os, S const& s) { return 
[17:16:33] <CarloWood> { vector<S> v1(2, 42); vector<S> v2(3, 43); auto v3 = f(v1, v2); SHOW(v3); } double sd; struct S { S(int n) { d = n + ++sd; } double d; tracked::B b; string s; }; vector<S> f(vector<S> const& v1, vector<S> const& v2) { vector<S> r; r.reserve(10); r.insert(r.end(), v1.begin(), v1.end()); r.insert(r.end(), v2.begin(), v2.end()); return r; } ostream& operator<<(ostream& os, S const& s) return os << s.d; }
[17:16:33] <geordi> error: Unexpected `}` after `<< s.d; `. Expected balanced code or end of request.
[17:17:33] <CarloWood> { vector<S> v1(2, 42); vector<S> v2(3, 43); auto v3 = f(v1, v2); SHOW(v3); } double sd; struct S { S(int n) { d = n + ++sd; } double d; tracked::B b; string s; }; vector<S> f(vector<S> const& v1, vector<S> const& v2) { vector<S> r; r.reserve(10); r.insert(r.end(), v1.begin(), v1.end()); r.insert(r.end(), v2.begin(), v2.end()); return r; } ostream& operator<<(ostream& os, S const& s) { return os << s.d; }
[17:17:34] <geordi> B0* B1*(B0) B2*(B0) B0~ B3* B4*(B3) B5*(B3) B6*(B3) B3~ B7*(B1) B8*(B2) B9*(B4) B10*(B5) B11*(B6) v3 = {43, 43, 45, 45, 45} B7~ B8~ B9~ B10~ B11~ B4~ B5~ B6~ B1~ B2~
[17:19:56] <CarloWood> { vector<S> v1(2, 42); vector<S> v2(3, 43); auto v3 = f(v1, v2); SHOW(v3); } double sd; struct S { S(int n) { d = n + ++sd; } S() = delete; double d; tracked::B b; string s; }; vector<S> f(vector<S> const& v1, vector<S> const& v2) { vector<S> r; r.reserve(10); r.insert(r.end(), v1.begin(), v1.end()); r.insert(r.end(), v2.begin(), v2.end()); return r; } ostream& operator<<(ostream& os, S const& s) { return os << s.d; }
[17:19:57] <geordi> Same output.
[19:59:43] *** Joins: great_taste (~great_tas@user/great-taste/x-5798414)
