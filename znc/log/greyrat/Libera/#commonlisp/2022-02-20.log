[00:00:48] *** Quits: cage (~cage@94-39-220-187.adsl-ull.clienti.tiscali.it) (Quit: rcirc on GNU Emacs 27.1)
[00:03:39] <Guest74> what's another good name for something that can both read and write? I don't quite like the term accessor as a suffix.
[00:05:32] <pjb> Guest74: #define defines macros.  (defmacro EVIOCSFF (ff_effect) `(_IOW #\E #x80 ,ff_effect))
[00:06:38] <Guest74> in that case it doesn't actually take a struct.  It just uses the name to determine the size in bytes of the struct.
[00:07:48] *** Joins: amb007 (~a_bakic@102.215.76.86.rev.sfr.net)
[00:08:22] <Guest74> which makes it really easy to parse the header into lisp, because it's basically the same.
[00:09:14] *** Joins: hobo (~hobo@204.128.242.10)
[00:10:06] <Guest74> though I guess that brings up the question, if a macro doesn't take an arg and is always the same, does the compiler just turn it into a constant?
[00:12:26] *** Joins: hobo_ (~hobo@204.128.242.10)
[00:14:12] *** Quits: hobo (~hobo@204.128.242.10) (Ping timeout: 272 seconds)
[00:15:09] *** Parts: contrapunctus (a75f5b1571@2a00:c70:1:178:170:40:189:1) ()
[00:16:18] *** Joins: contrapunctus (a75f5b1571@2a00:c70:1:178:170:40:189:1)
[00:22:30] <aun> Is there a way to prevent inheriting from a structure?
[00:23:07] <rotateq> aun: yes you have the :include option to inherit from one other struct
[00:23:37] <aun> The question was can I prevent users from inheriting from the structure I made
[00:26:37] <rotateq> oh oh course o.O hmm
[00:26:59] <Guest74> maybe naming it with an uninterned symbol.
[00:27:55] <Guest74> why do you want to prevent that?
[00:30:14] <aun> I would really like if structures didn't have inheritance at all. This allows for more efficient structures operations, like copying/comparison and such, because you could statically determine which slots are to be compared/copied etc
[00:30:40] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 272 seconds)
[00:31:33] <Guest74> I don't think you have that problem.
[00:31:55] *** Quits: triffid (~triffid@gateway/tor-sasl/triffid) (Ping timeout: 240 seconds)
[00:32:20] <shka> aun: don't export structure name?
[00:32:57] <aun> uhh, I understand the idea but this is more of a "don't do this" rather then "it's impossible to do this"
[00:32:58] *** Quits: hobo_ (~hobo@204.128.242.10) (Ping timeout: 256 seconds)
[00:33:02] <Guest74> you can still :include unexported structs
[00:33:09] <shka> yes
[00:33:22] <shka> but in that case you are asking for problems
[00:33:29] *** Joins: hobo (~hobo@204.128.242.10)
[00:34:13] <shka> lisp has very limited set of features to actually prohibit you from something
[00:34:17] <Guest74> I don't know if it's just sbcl, but uninterned symbols works.
[00:35:15] <shka> i guess maybe you can add some after method with assert
[00:35:40] <shka> still, this will be error on the initialization, not subclassing
[00:35:57] <shka> overall, my advise is: don't worry about it :-)
[00:36:23] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[00:36:45] <Guest74> they said structure, so I'm not sure they're talking about defclass and friends
[00:37:09] <shka> well, :include
[00:37:32] <aun> Yes talking specifically about structures here
[00:37:59] <aun> I mean, say I m making a deep copy function and you have an array of structs declared as type A. But in fact they are all B (inherited from A). Would you be okay getting array of exactly A structs, with only slots for A copied?
[00:38:00] <shka> anyway, don't worry about that
[00:39:09] <Alfr> aun, if your users can somehow get hold of an instance of your structure, then you can't.
[00:39:44] <shka> aun: "this struct was no designed for :include, don't do that, even it's name is not exported from the package (hint-hint)" as a documentation should suffice
[00:40:02] <aun> Okay
[00:41:19] <Alfr> aun, say, x it such an instance. Then (type-of x) gives you the structure name symbol, then the user may save that and reuse it in a defstruct form ...
[00:42:08] <Guest74> which doesn't work for uninterned symbols.  But i don't think anyone is listening.
[00:42:10] *** Joins: triffid (~triffid@gateway/tor-sasl/triffid)
[00:42:23] <random-nick> I don't think efficiency concerning struct inheritance is a big deal
[00:42:53] <shka> Guest74: what you suggest is... uh... unusual
[00:43:07] <shka> your methods confuse and frighten me sir
[00:43:19] <Guest74> what they're asking is unusual.
[00:43:32] <shka> that as well
[00:43:40] *** Quits: kevingal (~quassel@2a02:8084:4140:f300:9e4:e295:e419:65fb) (Remote host closed the connection)
[00:43:58] <random-nick> since it's single inheritance only, implementations can probably just include the entire superclass struct at the beginning of the new structure
[00:44:25] <random-nick> which helps with readers and writers
[00:44:46] <Alfr> Guest74, why wouldn't that work?
[00:45:32] <Guest74> I dunno, but it doesn't work on sbcl.
[00:48:56] <semz> It does work, but you have to go through pretty awkward eval/#. contortions to get the uninterned symbol into the defstruct form.
[00:49:08] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[00:51:11] <Alfr> Guest74, directly writing #:g... won't work, but (eval (let ((name (type-of x))) `(defstruct (foo (:include ,name)) ..))) certainly works for me.
[00:51:37] <Alfr> semz, it isn't that bad.
[00:52:20] <semz> the one I came up with was awkward :-)
[00:52:26] <Alfr> semz, also an appropriate macro can make the eval go away, I think.
[00:58:14] *** Joins: abrantesasf (~abrantesa@187.36.170.211)
[00:59:51] *** Joins: Guest491241242 (~Guest4912@95.175.104.234)
[01:01:35] *** Quits: Dynom (~niels@80-114-12-206.cable.dynamic.v4.ziggo.nl) (Quit: WeeChat 3.4)
[01:03:48] *** Joins: yewscion (~yewscion@c-73-214-119-161.hsd1.pa.comcast.net)
[01:05:29] *** Joins: nature (~nature@45.32.235.173)
[01:09:48] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 256 seconds)
[01:15:24] *** Joins: hobo_ (~hobo@204.128.242.10)
[01:16:16] *** Quits: hobo (~hobo@204.128.242.10) (Ping timeout: 272 seconds)
[01:20:59] *** Quits: aun (~aun@8186-7fce-aa3c-6ca9-1d00-846c-07d0-2001.dyn.estpak.ee) (Quit: Client closed)
[01:22:29] *** Parts: McParen (~McParen@user/mcparen) ()
[01:25:24] *** Joins: abrante42 (~abrantesa@2804:18:581a:bcc6:1:0:77b0:72c3)
[01:26:31] *** Quits: hobo_ (~hobo@204.128.242.10) (Ping timeout: 256 seconds)
[01:27:39] *** Quits: abrantesasf (~abrantesa@187.36.170.211) (Ping timeout: 256 seconds)
[01:27:47] *** Joins: hobo (~hobo@204.128.242.10)
[01:29:50] *** Quits: Catie (~user@user/catie) (Quit: switching clients)
[01:30:25] *** Joins: Catie (~user@user/catie)
[01:33:52] *** Joins: alvaro121 (~aa@201.230.126.66)
[01:34:00] *** Quits: alvaro121_ (~aa@201.230.126.66) (Ping timeout: 272 seconds)
[01:36:43] *** Quits: hobo (~hobo@204.128.242.10) (Ping timeout: 256 seconds)
[01:38:16] *** Joins: aeth_ (~aeth@user/aeth)
[01:38:17] *** Quits: aeth (~aeth@user/aeth) (Killed (NickServ (GHOST command used by aeth_)))
[01:38:20] *** aeth_ is now known as aeth
[01:39:13] *** Joins: rogersm (~rogersm@90.166.180.250)
[01:59:16] *** Joins: mrcom (~mrcom@99-73-215-70.lightspeed.irvnca.sbcglobal.net)
[02:12:53] *** Quits: wacki (~wacki@87.122.84.8) (Quit: Leaving.)
[02:16:24] *** Quits: lottaquestions_ (~nick@2607:fa49:5041:a200:b668:8e8:f292:8d7c) (Remote host closed the connection)
[02:16:49] *** Joins: lottaquestions_ (~nick@2607:fa49:5041:a200:11a4:6cdd:1796:d5ed)
[02:18:19] *** Joins: dra (~dra@2a04:4540:6407:f400:5dfd:8f0:b5bd:1cf3)
[02:18:45] <random-nick> how come the standard doesn't use the term immediate for objects without guarantees for identity? it's not in the glossary and on pages for functions such as EQ it uses "characters and numbers" to refer to immediates
[02:19:01] <random-nick> is that term newer than the standard?
[02:20:42] <mrcom> Are you seeing immediate used somewhere else in relation to CL?
[02:20:52] *** Quits: dre (~dre@2001:8003:c932:c301:147f:456a:d163:a87f) (Ping timeout: 250 seconds)
[02:22:31] <random-nick> yes, I usually hear that used for objects of classes on which EQ is undefined (characters and numbers)
[02:22:45] <mrcom> I can kind of see the analogy, but the term brings to my mind a situation where instructions and data are combined.
[02:25:30] <mrcom> Pondering...
[02:28:29] *** Quits: rgherdt (~rgherdt@port-92-193-217-5.dynamic.as20676.net) (Remote host closed the connection)
[02:29:58] <moon-child> random-nick: to me, 'immediate' indicates an implementation strategy where objects are not accessed indirectly
[02:30:14] <moon-child> (in this context.  mrcom's definition is also valid, in other context)
[02:31:00] <moon-child> this is orthogonal to the question of whether EQ is guaranteed to behave consistently.  For instance, I would not expect bignums to be represented immediately, but they are still numbers
[02:31:53] <moon-child> in particular, the case in which EQ would be most likely to behave inconsistently is _not_ with immediate values, but with allocated values which are copied
[02:33:04] *** Joins: dre (~dre@2001:8003:c932:c301:1811:4143:ef26:85c6)
[02:33:40] <moon-child> for example, imagine a stack-allocated bignum, one pointer to which is changed to point at an on-heap copy because it is escapes; the implementation optimistically stack allocates because the path where it escapes is unlikely
[02:33:56] <moon-child> for immediates, there is nothing to copy except the value itself, so EQ would be more likely to behave consistently
[02:37:37] <moon-child> s/it is/it/
[02:37:52] <moon-child> s/unlikely/\1 to be taken/
[02:39:09] *** Quits: pve (~pve@37-136-32-80.rev.dnainternet.fi) (Quit: leaving)
[02:42:02] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Read error: Connection reset by peer)
[02:42:28] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[02:44:10] *** Quits: Inline (~Inline@2a02:908:1252:7a80::175) (Read error: Connection reset by peer)
[02:44:26] <mrcom> PG's "Common Lisp" calls it "characters and numbers," too. Doesn't even discuss the difference between EQ and EQL until page 228.
[02:44:48] *** Quits: amb007 (~a_bakic@102.215.76.86.rev.sfr.net) (Read error: Connection reset by peer)
[02:45:00] *** Joins: amb007 (~a_bakic@102.215.76.86.rev.sfr.net)
[02:45:34] *** Quits: shka (~herr@109.231.3.55) (Ping timeout: 256 seconds)
[02:46:03] <mrcom> CL's always been pretty loosey-goosey with types.
[02:47:13] <mrcom> Tagged values (immediates) are sniffingly relegated to "implementation detail".
[02:48:54] <White_Flame> there's been lisps on 8-bits with 16-bit number size, and so there are no numeric immediates there.  Not CL, but the implementation-dependence does make sense for extreme cases
[02:48:56] <mrcom> Much more focused on structure and operations. For example, "list" isn't even a type.
[02:54:46] *** Joins: Inline (~Inline@2a02:908:1252:7a80::175)
[02:55:12] <moon-child> White_Flame: better example: abcl
[02:55:38] <White_Flame> does it box all integer sizes?
[02:55:43] <moon-child> yes
[02:55:55] <random-nick> hmm, that definition of immediate object makes sense
[02:56:20] *** Quits: Guest74 (~Guest74@modemcable110.164-177-173.mc.videotron.ca) (Quit: Connection closed)
[02:56:30] <random-nick> but I always thought of it as meaning an object that doesn't follow the usual identity semantics
[02:57:02] <random-nick> there are also some implementation-defined immediates, such as SBCL's SAPs afaik
[02:59:01] *** Joins: morganw (~user@80.225.24.132)
[02:59:05] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Quit: ERC (IRC client for Emacs 27.1))
[03:00:13] <random-nick> but the link with immediate values in assembly makes the definition of immediate objects as an implementation strategy seem more likely to be what the term means
[03:09:32] <mrcom> Well, it applies pretty nicely to "a value immediately contained in a cons cell". I'm just not used to thinking about it with that phrase.
[03:12:57] *** Quits: tane (~tane@user/tane) (Quit: Leaving)
[03:12:58] *** Quits: abrante42 (~abrantesa@2804:18:581a:bcc6:1:0:77b0:72c3) (Read error: Connection reset by peer)
[03:13:14] *** Joins: abrantesasf (~abrantesa@187.36.170.211)
[03:22:07] *** Joins: hobo (~hobo@2600:1700:8972:63f:3313:2d33:be9f:8246)
[03:28:50] *** Joins: Oladon (~olad@98.43.81.226)
[03:28:55] *** Quits: yewscion (~yewscion@c-73-214-119-161.hsd1.pa.comcast.net) (Ping timeout: 256 seconds)
[03:40:29] *** Quits: dra (~dra@2a04:4540:6407:f400:5dfd:8f0:b5bd:1cf3) (Quit: Leaving)
[03:46:32] *** Quits: dre (~dre@2001:8003:c932:c301:1811:4143:ef26:85c6) (Quit: Leaving)
[03:52:25] *** Quits: aeth (~aeth@user/aeth) (Quit: Reconnecting)
[03:52:35] *** Joins: aeth (~aeth@user/aeth)
[03:54:33] *** Quits: kevingal_ (~quassel@2a02:8084:4140:f300:5498:b740:82c3:302e) (Remote host closed the connection)
[03:58:57] *** Quits: nature (~nature@45.32.235.173) (Ping timeout: 256 seconds)
[04:01:18] *** Quits: triffid (~triffid@gateway/tor-sasl/triffid) (Remote host closed the connection)
[04:05:52] *** Quits: Guest491241242 (~Guest4912@95.175.104.234) (Quit: Client closed)
[04:25:21] *** Quits: orestarod (~orestarod@2a02:2149:8b20:700:2b9d:7f86:7169:61c0) (Ping timeout: 256 seconds)
[04:36:38] *** Quits: random-nick (~random-ni@87.116.179.129) (Ping timeout: 256 seconds)
[04:47:01] *** Joins: s-liao (~s-liao@101.86.96.21)
[04:57:04] <dbotton> Guest74 CLOG uses change-class as part of object factories all the time, it is my favorite feature of CLOS. Example in builder you design your "panel" (a div used as a container), the code generated  creates a DIV, adds your content, then specializes it using change-class to the user defined class and attaches the slots to whatever controls you have assigned names for.
[05:04:59] * moon-child puts up smalltalk posters
[05:05:12] <moon-child> 'If you liked CHANGE-CLASS, you'll _love_ become:!'
[05:11:41] <dbotton> become:?
[05:14:44] <dbotton> looked up, I think change-class more powerful
[05:15:08] <dbotton> and less dangerous
[05:16:35] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[05:16:52] *** Joins: zachel (~zachel@user/zachel)
[05:16:54] *** Joins: jealousmonk (~user@user/jealousmonk)
[05:22:22] *** Parts: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1) (Error from remote client)
[05:23:44] *** Quits: morganw (~user@80.225.24.132) (Remote host closed the connection)
[05:25:11] *** Joins: s-liao (~s-liao@101.86.96.21)
[05:26:55] <jcowan> White_Flame: ABCL boxes fixnums, but it also preallocates a few:  {-1, 0, 1, 2, 3}.
[05:32:41] *** Joins: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1)
[05:45:10] *** Quits: waleee (~waleee@h-98-128-229-110.NA.cust.bahnhof.se) (Ping timeout: 260 seconds)
[06:04:28] *** Joins: eugercek (~user@user/eugercek)
[06:04:30] *** Quits: Catie (~user@user/catie) (Remote host closed the connection)
[06:05:29] *** Joins: Catie (~user@user/catie)
[06:06:07] *** Joins: orestarod (~orestarod@2a02:2149:8b20:700:2b9d:7f86:7169:61c0)
[06:09:30] *** Quits: eugercek (~user@user/eugercek) (Ping timeout: 272 seconds)
[06:14:57] *** Joins: raeda_ (~raeda@74.215.159.82)
[06:15:18] *** Quits: orestarod (~orestarod@2a02:2149:8b20:700:2b9d:7f86:7169:61c0) (Ping timeout: 250 seconds)
[06:19:15] *** Quits: raeda (~raeda@74.215.159.82) (Ping timeout: 256 seconds)
[06:22:46] <dbotton> A method when called executes with the namespace of the package it was defined in or the one that it is active when called?
[06:22:52] <White_Flame> jcowan: yeah I was going to say before in the conversation that singleton values are equivalent to immediate values
[06:23:12] <dbotton> sorry macro
[06:24:00] <White_Flame> when it's called
[06:24:20] <White_Flame> then *package* is the same as whoever called it
[06:24:32] <White_Flame> just like functions & special vars, too ;)
[06:25:27] <White_Flame> now, when the macro is _read_, its symbols are going to be in its file's in-package
[06:25:53] <White_Flame> when the macro body executes, and runs things like INTERN, then it is coming from its caller
[06:27:57] <dbotton> got it
[06:29:17] *** Parts: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1) (Error from remote client)
[06:31:28] <dbotton> so I can call a method defined in one package that receives an object and a slot name as a string, have it call a macro that will use intern on slot name and then set the slot-value and the intern will be in the callers package
[06:31:50] <moon-child> yes
[06:31:52] <moon-child> I did that once
[06:31:55] <moon-child> people don't like it, but
[06:32:10] *** Quits: zachel (~zachel@user/zachel) (Quit: Quit: Leaving!)
[06:33:09] *** Joins: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1)
[06:35:36] *** Joins: zachel (~zachel@user/zachel)
[06:35:37] <dbotton> it seems to be smarter that using MOP
[06:36:23] <dbotton> to spend time doing introspection to get the symbol etc
[06:37:28] <dbotton> like this I can also use the accessor
[06:37:39] *** Quits: Krystof (~user@81.174.155.115) (Ping timeout: 252 seconds)
[06:37:43] <dbotton> and so trigger :before and :after
[06:37:59] <dbotton> so seems much smarter
[06:39:18] <dbotton> although just realized based on what white_flame said, that namespace when calling even a function and I assume method same, is the callers
[06:39:30] <dbotton> so maybe don't need the macro
[06:44:04] <dbotton> OO in lisp not encapsulating the namespaces with the object is a negative for clos
[06:50:00] *** Parts: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1) (Error from remote client)
[07:06:31] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[07:10:22] *** Joins: SR-71 (~user@user/SR-71)
[07:12:50] *** Quits: terrorjack (~terrorjac@2a01:4f8:1c1e:509a::1) (Quit: The Lounge - https://thelounge.chat)
[07:13:43] *** Joins: terrorjack (~terrorjac@2a01:4f8:1c1e:509a::1)
[07:16:39] *** Joins: igemnace (~ian@user/igemnace)
[07:18:24] *** Joins: s-liao (~s-liao@101.86.96.21)
[07:30:16] <beach> Good morning everyone!
[07:31:10] <ns12> Good morning beach.
[07:31:39] *** Quits: akoana (~ah@user/akoana) (Quit: leaving)
[07:31:58] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Remote host closed the connection)
[07:32:25] <beach> dbotton: On the contrary, the fact that encapsulation is orthogonal to object representation makes CLOS much more flexible.  It is possible that this confusion in traditional object-oriented languages is what makes those programs so much more complicated for not much functionality.
[07:32:32] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[07:33:12] <beach> dbotton: Encapsulation is the business of the package system in CLOS.
[07:34:19] <dbotton> Have use Ada since 95 which is same boat it is more of a hindrance than a help
[07:34:21] <jcowan> beach: I can't agree there.  :: means that packages don't actually encapsulate anything.
[07:34:33] <beach> jcowan: Of course.
[07:34:38] <moon-child> jcowan: it is not strong encapsulation
[07:34:41] <moon-child> but it is still encapsulation
[07:34:45] <jcowan> Mmmm.
[07:34:50] <beach> I mean "of course you can't agree with that".
[07:34:59] <jcowan> In any case, inheritance breaks encapsulation too.
[07:35:06] <White_Flame> the "real" hiding encapsulation is closures :-P
[07:35:12] <jcowan> 1
[07:35:16] <jcowan> s/1/+1
[07:35:56] <beach> dbotton: In what way is it a hindrance to use the Common Lisp package system?
[07:36:03] <dbotton> Probably should have designed a way to add inheritance to closures
[07:36:19] <aeth> right, lexical closures are the only "true" encapsulation in Common Lisp
[07:36:21] <dbotton> The other way around
[07:36:31] <dbotton> It is a hindrance to the objects
[07:36:31] <aeth> The variable might not even exist at runtime with the debugger open
[07:36:48] <beach> dbotton: I think you need to explain that.
[07:37:17] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Client closed)
[07:38:37] <beach> jcowan: In your opinion, what is required for a feature to be called encapsulation?
[07:39:59] <dbotton> It means that you have to fully qualify your symbols used to represent accessors and slots it many situations that if the symbol was associated with the class wouldn't. Yes I know that is more limiting
[07:40:27] <beach> dbotton: What utterance are you responding to here?
[07:40:49] <dbotton> explaining in my poor way the hindrance to the object
[07:41:15] <dbotton> it is a syntactic issue only
[07:42:27] <dbotton> I am not per se saying there is a better alternative and still keep CL as it is
[07:42:33] <beach> dbotton: Slots are implementation details and should not be used by client code.  Accessors may or may not be part of the protocol.
[07:42:51] <jcowan> A situation in which state inside a capsule can only be changed by operations provided by the capsule.
[07:42:56] <beach> dbotton: I thought that was exactly what you were saying.
[07:43:14] <beach> jcowan: Sounds like the way the package system works.
[07:43:17] <jcowan> Obviously you can get "encapsulation" by just providing getters and setters for the state.
[07:43:53] <jcowan> No, it's the way closures work.  Indeed, objects (in the OOP sense) are the duals of closures.
[07:44:27] <beach> jcowan: In what way does the package system not provide the functionality you are looking for?
[07:44:42] <dbotton> I think that an introduction to CLOS should describe the use of packages as part of defining an object
[07:44:51] <dbotton> or rather a class
[07:44:55] <jcowan> We've already talked about that: packages are incomplete capsules
[07:45:19] <beach> dbotton: That I can agree with.  But not "OO in lisp not encapsulating the namespaces with the object is a negative for clos".
[07:45:23] <char[m]> dbotton: how would you have close treat namespaces differently?
[07:45:39] <beach> jcowan: So you are not going to tell me.  Fair enought.
[07:45:42] <beach> enough
[07:46:08] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[07:46:54] <jcowan> I thought we already agreed on that point: packages are not complete capsules in the senses closures are.  A closure *prevents* access to its local state variables from outside the closure; thus they are complete capsules providing complete encapsulation.
[07:46:55] <dbotton> negative in CLOS in the eyes of someone wanted OO like in other languages, Same issue happened with "tagged types" we added to Ada in 95. The encapsulation was separate from the OO type
[07:47:18] <jcowan> s/senses/sense
[07:47:29] <dbotton> It creates difficulty in understanding the OO model were OO is a means of encapsulation
[07:47:30] <beach> jcowan: If you don't trust your programmers not to use ::, then you should replace them.
[07:47:43] <dbotton> and it CL and Ada isnot
[07:48:16] <jcowan> Eh.  OOP jargon comes from peope whose base position is "No programmers can be trusted to do anything correctly", to which they then carve out as few exceptions as possible.
[07:48:39] <beach> That is probably why OO is now considered a failure.
[07:49:06] <dbotton> <char[m]> I wouldn't change anything
[07:49:21] <dbotton> I would though change how CLOS is presented to people
[07:49:44] <char[m]> I see you were presenting a different perspective
[07:50:20] <dbotton> I only after using it for some time figures out that beach meant by protocols what most think of as interfaces
[07:51:10] <dbotton> So teaching people to use packages like part of the class definition would lead them to something they could relate to
[07:51:21] <dbotton> after you can show the flexability
[07:52:02] <jcowan> "Let's face it: software is crap. Feature-laden and bloated, written under tremendous time-pressure, often by incapable coders, using dangerous languages and inadequate tools, trying to connect to heaps of broken or obsolete protocols, implemented equally insufficiently, running on unpredictable hardware -- we are all more than used to brokenness."
[07:52:02] <jcowan>                    --Felix Winkelmann (author of Chicken Scheme)
[07:52:58] <jcowan> Of course this is not a position that people who teach CS can afford to hold, or they would hang themselves.
[07:53:06] <dbotton> So teaching a class is = defclass + package and interfaces are your public protocols is a better model for most to get clos
[07:54:21] <beach> jcowan: So that's the level of the discussion now?
[07:54:41] <dbotton> if I am making sense and understand what beach meant by protocols
[07:55:16] <beach> dbotton: http://metamodular.com/protocol.pdf
[07:55:35] <beach> It's in several documents that use Common Lisp.
[07:55:42] <jcowan> Eh, it's 2325 here now and I need to go to bed very soon.  I'm normally more optimistic than this.
[07:55:54] <beach> Yeah, go to bed.
[07:56:23] <dbotton> beach thanks, would have helped more a year ago :)
[07:56:35] <beach> I can't fix that.
[07:57:00] <dbotton> I know and is ok, part of learning the lingo
[07:57:29] <dbotton> Still trying to get my 10k hours in on a new language
[07:58:41] <dbotton> where is that chapter from beach?
[07:59:20] <beach> From a book I am working on.  But it is stalled because of other things I feel I have to do.
[08:02:34] <dbotton> I look forward to it
[08:05:38] *** Joins: semz_ (~semz@user/semz)
[08:06:02] <qhong> is there a good portable way to test if a symbol is a valid type specifier?
[08:06:51] <qhong> I could (typep nil interesting-symbol) and see if it gives an error, but it looks kinda ugly
[08:08:37] *** Quits: semz (~semz@user/semz) (Ping timeout: 256 seconds)
[08:17:26] <moon-child> beach: section 5.6 of your 'protocols' chapter seems somewhat inconsistent.  First it refers to a 'minimal protocol' (implying that there are protocols which are not minimal).  Then it says that something which is not minimal is not a protocol.  Then it says that a set of operations which is not minimal is an extended protocol (a reader might be forgiven for thinking that an extended protocol
[08:17:27] <moon-child> is a type of protocol)
[08:17:54] <moon-child> (or, rather than inconsistent, I should perhaps say unclear)
[08:22:55] *** Parts: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz) ()
[08:23:02] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca) (Remote host closed the connection)
[08:24:49] <beach> moon-child: Thanks.  I should be more consistent with the terminology.
[08:26:30] <beach> The CLIM II specification seems to use API for "extended protocol", and I probably meant to use a different word initially.  But I prefer "extended protocol" to API here, and I should make sure to use it consistently.
[08:31:56] <dbotton> is there a way to check if a symbol exists by string that won't intern the symbol?
[08:32:09] <beach> clhs find-symbol
[08:32:09] <specbot> http://www.lispworks.com/reference/HyperSpec/Body/f_find_s.htm
[08:32:32] <dbotton> much appreciated
[08:36:08] *** Joins: Oladon (~olad@98.43.81.226)
[08:59:58] *** Joins: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1)
[09:16:39] *** Quits: jealousmonk (~user@user/jealousmonk) (Quit: ERC 5.4.1 (IRC client for GNU Emacs 27.1))
[09:21:27] *** Joins: Guest74 (~Guest74@modemcable110.164-177-173.mc.videotron.ca)
[09:33:53] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[09:42:02] *** Quits: opcode (~opcode@user/opcode) (Quit: we freebsd now)
[09:43:28] *** Joins: s-liao (~s-liao@101.86.96.21)
[09:43:35] *** Quits: s-liao (~s-liao@101.86.96.21) (Client Quit)
[09:50:55] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[10:10:28] <dbotton> beach "weakly connected" is the same as loosely coupled? (going over more carefully your protocol doc)
[10:11:45] <beach> Let me check...
[10:12:39] <beach> I guess so, yes.
[10:12:45] <dbotton> why us concept of larger vs smaller here? that may not be the case
[10:13:07] <dbotton> consumer and provider better no/
[10:13:43] <beach> For the two parts of a module you mean?
[10:14:14] <dbotton> for the two different modules one with interface and one with implementation
[10:14:43] <beach> Not two different modules.  Two parts of each module.
[10:15:55] <dbotton> ok, so spec and body in ada lang
[10:16:12] <beach> I don't know Ada.  Sorry.
[10:16:34] <dbotton> specification and implementation
[10:16:51] <beach> Most of the literature on software engineering uses "interface" and "implementation" I think.
[10:17:25] <dbotton> yes but you used smaller and larger
[10:17:45] <dbotton> which is not always the case
[10:17:47] <beach> The implementation is typically large and the interface typically small.
[10:17:54] <beach> The larger the interface part is compared to the implementation, the more code is concerned with coupling with other modules, so the overall coupling in the code base increases.
[10:18:24] <beach> But sure, I can add a "typically" there.
[10:19:41] <dbotton> modules are the same as packages?
[10:20:40] <beach> In Common Lisp?  No, not quite.  A module can have several packages.
[10:20:53] <beach> But the interface part of a module is typically in one package.
[10:21:13] <dbotton> if not mentioned before in book probably should
[10:21:29] <beach> OK, thanks.
[10:22:17] <beach> My preferred way of organizing a module is to have a package that contains ONLY the symbols that are exported, and thus meant to be used by client code.
[10:22:28] *** Joins: Oladon (~olad@98.43.81.226)
[10:22:40] <beach> Then, other packages contain the symbols that make up the implementation of the exported features.
[10:23:11] <beach> This organization is the exact opposite of what typical object-oriented languages require, and it is made possible by the package system.
[10:23:57] <beach> Well, not ONLY those symbols, but those symbols and the ones in the COMMON-LISP package.
[10:24:21] <beach> Well, I take that back.  That's not necessary.
[10:24:24] <dbotton> you probably should look ada as this is how everything is laid out
[10:24:47] <beach> Sounds good.
[10:25:05] <dbotton> you are setting up a layer on top of CL for good engineering :)
[10:25:37] <dbotton> Ada excels in that regard, you can't produce something that compiles with out it
[10:25:42] <beach> So, the interface is just (defpackage #:interface (:use) (:export ...)) and contains no definitions.
[10:26:52] <dbotton> you mention the interface contains functions and generic functions
[10:26:57] <dbotton> how is that so?
[10:27:08] <beach> It contains the symbols that name those items.
[10:27:24] <dbotton> what does that look like?
[10:27:44] <dbotton> same for that you mention the interface contains the return values
[10:27:48] <beach> (defpackage #:interface (:use) (:export #:class-name-1 #:function-1 #:macro-1))
[10:27:55] <dbotton> ah
[10:28:31] <dbotton> and the return values?
[10:28:52] <beach> Then an implementation has (defclass interface:class-name-1 ..) (defgeneric interface:function-1 (...))
[10:29:29] <dbotton> that doesn't show a return value for function or generic function?
[10:30:11] <beach> Not all protocol elements can be encoded in the language.
[10:30:17] <beach> Some of it is in the documentation.
[10:30:31] <dbotton> I actually asked a few weeks ago if someone had a convention for that
[10:30:35] <dbotton> do you?
[10:30:40] *** Joins: kotshie (~kotshie@68.72.208.140)
[10:30:42] <beach> For what?
[10:30:57] <dbotton> return values in the doc string
[10:31:14] <dbotton> how to record it or relate it
[10:31:37] <dbotton> ie put it in to the interface
[10:31:59] <beach> I tend to write separate documentation rather than documentation strings.  I find that documentation that is created as documentation strings is lacking a lot of information.
[10:32:21] <dbotton> I use mgl-pax to sort of reverse engineer my docs from the code it works well
[10:32:43] <dbotton> I wish though I had real "interfaces" like in ada for the docs
[10:32:52] <beach> I find that there is no good place for things like concepts and overall philosophy.
[10:32:52] <moon-child> I find such 'documentation generators' generally have rather poor results
[10:33:00] <moon-child> vs purpose-written documentation
[10:33:31] <moon-child> (even aside from beach's complaint)
[10:33:33] <dbotton> I feel a good interface that is compiled is better than al
[10:33:59] <dbotton> https://rabbibotton.github.io/clog/clog-manual.html
[10:34:12] <dbotton> the pax docs does decent middle of the road
[10:34:35] <dbotton> as I can add docs as well beyond the doc strings
[10:35:21] <beach> That's good.
[10:35:37] <dbotton> That is the one thing I miss in CL the lack of a compiled spec/interface
[10:36:39] <beach> I don't understand what it is that you are missing.
[10:36:56] <beach> I mean, every file is typically compiled in a modern Common Lisp implementation.
[10:37:25] <moon-child> I assume 'compile' in the traditional sense (as similar to 'collate'), not as in 'translate from one programming language to another'
[10:37:47] <beach> Ah.
[10:38:50] <dbotton> I can compile all my specs in ada and leave out the bodies (implementations)
[10:39:19] <dbotton> the compiler checks for consistency, errors etc
[10:39:37] <dbotton> but obviously doesn't produce code in such a run
[10:40:10] <dbotton> on larger project very helpful
[10:40:52] <dbotton> it is a different model, but not that much
[10:42:01] <dbotton> as the older compilers used a "library" that sort of is like the lisp image you build up before dumping to an executable
[10:45:08] <dbotton> in 5.3 probably should compare protocols to abstract classes not classes
[10:47:05] <dbotton> The truth is  (as you taught me early in my lisp journey) comparisons are failures for means of teaching/learning Lisp
[10:48:55] <dbotton> My observation is that since lisp is more abstract, ie you are essentially manipulating references to closures, it is a different than other languages in a fundamental way
[10:50:53] <dbotton> other languages the program is more fixed to the code itself
[10:51:42] <dbotton> the code can be changed or rewritten by some macro etc
[10:52:15] <dbotton> you have to pay attention to what is behind the code all the time
[10:52:35] <dbotton> (sorry if I am not being concrete enough)
[10:53:11] <neominimum> Hey, beach would you forward declare an ordinary function definition as part of the protocol like this: `(defun foo (arg) (declare (ignorable arg)) (error "No concrete implementation exists for FOO"))` and then redefine it later as part of the implementation?
[10:53:31] <beach> dbotton: That sounds like a description of the essence of a dynamic programming language like Common Lisp.
[10:54:34] <beach> neominimum: Probably not.  I wish there were a good way of doing that.  But then, my interface functions tend to be all generic anyway.
[10:55:56] <dbotton> it seems there are two branches of programming, concrete (ada,c, etc) and abstract (lisp)
[10:56:44] <beach> The usual distinction is static (= batch) vs dynamic (= interactive).
[10:56:58] <dbotton> (someone once said that eventually everything will be programmed in Ada or Lisp but they didn't know about the third branch - marketing)
[10:58:17] <moon-child> beach: there are many dynamic languages which are not interactive (or which permit limited interactivity); and I can imagine an interactive static language
[10:58:24] <beach> As long as the software industry is run by insufficiently trained and incompetent people, people are going to adopt the latest fad rather than understanding the essentials.
[10:59:03] <beach> moon-child: My definition is dynamic = interactive = a language with semantics defined by a sequence of interactions.
[10:59:39] <moon-child> I see
[10:59:51] <moon-child> I think most people interpret the terms 'static' and 'dynamic' in context as referring to typing
[11:00:28] <neominimum> dbotton: as far as I'm aware there is nothing inhibiting the use of lisp for the type of programming that I imagine you mean by concrete.
[11:00:35] <beach> I said nothing about types.
[11:01:09] <beach> Then I would have said "statically typed" and "dynamically typed".
[11:01:22] <dbotton> <neominimum> you can statically type lisp
[11:01:34] <moon-child> All I am just saying is that, in context of programming language classification, I think the terms 'static' and 'dynamic' are generally used to refer to types
[11:01:49] <dbotton> First thing I did was work that out and create some macros
[11:02:51] <dbotton> I think concrete vs abstract is acurate
[11:03:01] <neominimum> dbotton: oh I see
[11:03:20] <dbotton> it is just not something talked about in most courses and books
[11:03:41] *** Joins: pve (~pve@178-55-101-2.bb.dnainternet.fi)
[11:04:04] <dbotton> Lisp is very abstract and Ada is very concrete
[11:04:30] <beach> moon-child: I am sorry to hear that.
[11:04:40] <dbotton> Trace analysis is possible in Ada not sure even possible in Lisp
[11:05:14] <dbotton> where you trace every line of code to the compiled output
[11:05:28] <dbotton> and then prove its correctness etc
[11:05:36] <dbotton> used for commercial air craft
[11:06:34] <dbotton> Ada you program the compiler, lisp you program the program
[11:07:03] <dbotton> or program the computer, and program the program that programs the computer better
[11:07:31] <SR-71> It's recursive.
[11:08:53] <dbotton>  lisp is a derivative (math term) of programming
[11:09:43] <dbotton> 5.7 beach is that not exactly what an abstract class is
[11:09:57] <dbotton> maybe should mention that prallel
[11:10:02] <dbotton> parallel
[11:12:20] <dbotton> done with doc. You really should look in to Ada specs, in particular the 2012 standard that introduces contracts.
[11:12:55] *** Joins: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz)
[11:14:43] *** Parts: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz) ()
[11:23:45] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[11:32:39] <beach> dbotton: Neither term exists in the standard, but "protocol class" is what is used in the CLOS literature.
[11:34:23] <beach> dbotton: At the moment, I need to be more careful about additional tasks that I take on, so it shall have to wait.
[11:34:38] *** Joins: treflip (~user@user/treflip)
[11:40:54] *** Joins: davep (uid504677@id-504677.tinside.irccloud.com)
[12:00:25] *** semz_ is now known as semz
[12:01:00] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 272 seconds)
[12:02:32] *** Quits: qiduo (~yuqi@117.147.41.81) (Read error: Connection reset by peer)
[12:04:31] *** Joins: qiduo (~qiduo@117.147.41.81)
[12:05:23] *** Joins: s-liao (~s-liao@101.86.96.21)
[12:07:52] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[12:11:47] *** Joins: rgherdt (~rgherdt@port-92-193-217-5.dynamic.as20676.net)
[12:13:35] *** Quits: mepy_ (~mepy@37.100.156.164) (Quit: Leaving)
[12:26:20] *** Joins: cosimone (~user@93-34-133-75.ip49.fastwebnet.it)
[12:35:50] *** Quits: kotshie (~kotshie@68.72.208.140) (Ping timeout: 272 seconds)
[12:43:12] *** Joins: shka (~herr@109.231.3.55)
[12:43:26] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 272 seconds)
[12:44:02] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[12:56:51] <mfiano> Is there a "prepend FOO to list BAR iff FOO is not nil" operator?
[12:58:20] <moon-child> (append foo bar)?  Or you want the equivalent of (if foo (cons foo bar) bar)?
[12:58:21] <beach> (setf bar (append foo bar))
[12:58:26] <mfiano> doesn't need to be destructive, just the idea without writing the conditionalization myself is fine. I know the standard has a lot of obscure list manipulation functions I can't ever remember
[12:59:45] <mfiano> beach: PREpend, without manual conditionals.
[13:00:05] <moon-child> yes, that prepends foo to bar
[13:00:10] <moon-child> by appending bar to foo
[13:00:11] <beach> Exactly.
[13:00:19] <mfiano> Oh I see what you did
[13:01:07] <mfiano> You would still need to conditionalize though
[13:01:11] * beach sees a change of specification coming up.
[13:01:15] <mfiano> if FOO is not NIL
[13:01:23] <mfiano> Since it must be a list
[13:01:30] <beach> NIL is a list.
[13:01:31] <mfiano> I could use alexandria:ensure-list I suppose
[13:01:35] <beach> The empty list in fact.
[13:01:37] <mfiano> Right
[13:01:46] <mfiano> The original question specified something you overlooked
[13:01:51] <beach> So then the APPEND return the second element.
[13:01:59] <moon-child> mfiano: I will note I asked if that was what you want, a second before beach did at that (by my clock) :)
[13:02:16] <beach> mfiano: What did we overlook?
[13:02:36] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Remote host closed the connection)
[13:02:46] <mfiano> iff FOO is not nil
[13:02:56] <beach> What if it is?
[13:03:01] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[13:03:08] <mfiano> (let ((bar (list 1 2 3))) (setf bar (append '(4) bar)) bar)
[13:03:09] <mfiano> vs
[13:03:13] <mfiano> (let ((bar (list 1 2 3))) (setf bar (append nil bar)) bar)
[13:04:12] <mfiano> The element should be prepended, whether it is an atom or a cons, if it is not nil
[13:04:30] <mfiano> I never said it must be a cons!
[13:04:35] <moon-child> (i.e. (if foo (cons foo bar) bar), as I said earlier)
[13:04:52] <beach> The word PREPEND would not apply to an atom.
[13:06:32] <mfiano> That's overthinking it. In English terms, prepending an element to a list, is done whether a new cons has to be constructed and then linked or not.
[13:06:47] <mfiano> Since PREPEND is not a glossary term.
[13:09:04] <jackdaniel> even if there is such operatir I would not look to hard - adding an utility doing the right thing is trivial while looking for exotic operators is not
[13:10:03] <mfiano> I do like discussing it anyway. THat's how I was able to be reminded of an elegant ADJOIN solution instead of REMOVE-DUPLICATES yesterday.
[13:12:23] <mfiano> jackdaniel: Oh sorry to see you leave #clprojects
[13:13:16] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Client closed)
[13:14:34] <jackdaniel> I have too many channels opened anyway :)
[13:16:04] <moon-child> I think I have about 50 at the moment
[13:19:23] <mfiano> I have about 50 as well, but I set highlights only for pretty much non-CL channels (and lispcafe) :)
[13:20:31] <SR-71> lol, I have just 2.
[13:21:45] *** Quits: treflip (~user@user/treflip) (Remote host closed the connection)
[13:23:57] <mfiano> Well I've been on IRC since before the Web was even conceived :)
[13:25:59] <SR-71> You must have sweet memories with mIRC.
[13:27:38] *** Joins: s-liao (~s-liao@101.86.96.21)
[13:30:21] <mfiano> Nope, I never was into Windows.
[13:39:12] <SR-71> Do you remember when people were whacking with a wet trout everywhere?
[13:39:40] *** Joins: Krystof (~user@81.174.155.115)
[13:41:21] <mfiano> It was a large trout
[13:41:46] <SR-71> Yeah a "Large" one.
[13:50:50] <moon-child> it was smacked, not whacked
[13:50:55] * moon-child smacks SR-71 around a bit with a large trout
[14:04:31] <qhong> Do we have head specializer (like those in Emacs Lisp's CLOS) in real CLOS?
[14:06:27] <qhong> ha, just found https://github.com/sbcl/specializable/
[14:07:30] *** Joins: wacki (~wacki@87.122.81.3)
[14:09:44] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 252 seconds)
[14:11:28] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 272 seconds)
[14:11:46] <qhong> hmm, it doesn't load anymore because of deprecated symbols
[14:12:18] <qhong> I guess in general, does some CLOS extension that supports pattern matching exist?
[14:13:11] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[14:20:39] *** Quits: davep (uid504677@id-504677.tinside.irccloud.com) (Quit: Connection closed for inactivity)
[14:24:24] *** Joins: Dynom (~niels@80-114-12-206.cable.dynamic.v4.ziggo.nl)
[14:25:32] *** Joins: s-liao92 (~s-liao@101.86.96.21)
[14:26:41] *** Joins: treflip (~user@user/treflip)
[14:27:02] *** Quits: s-liao92 (~s-liao@101.86.96.21) (Client Quit)
[14:28:31] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[14:31:07] *** Joins: s-liao (~s-liao@101.86.96.21)
[14:45:36] *** Joins: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f)
[14:47:02] <scymtym> qhong: https://github.com/sbcl/specializable/tree/pattern-specializer-sat has experimental code in that direction, but pattern based specializers are hard to do well
[14:49:24] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Client closed)
[14:51:08] *** Joins: McParen (~McParen@user/mcparen)
[15:12:26] *** Quits: abrantesasf (~abrantesa@187.36.170.211) (Read error: Connection reset by peer)
[15:12:52] *** Joins: abrantesasf (abrantesas@gateway/vpn/protonvpn/abrantesasf)
[15:14:29] *** Joins: cage (~cage@94-39-220-187.adsl-ull.clienti.tiscali.it)
[15:23:08] *** Joins: nature (~nature@45.32.235.173)
[15:32:33] *** Quits: abrantesasf (abrantesas@gateway/vpn/protonvpn/abrantesasf) (Ping timeout: 256 seconds)
[15:37:07] *** Quits: Guest74 (~Guest74@modemcable110.164-177-173.mc.videotron.ca) (Quit: Connection closed)
[15:37:17] *** Joins: Guest74 (~Guest74@modemcable110.164-177-173.mc.videotron.ca)
[15:39:11] *** Joins: random-nick (~random-ni@87.116.179.129)
[15:44:27] *** Quits: nature (~nature@45.32.235.173) (Ping timeout: 256 seconds)
[15:56:09] *** Joins: abrante32 (~abrantesa@187.36.170.211)
[15:59:59] *** Joins: eugercek (~user@user/eugercek)
[16:25:01] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca)
[16:25:59] <McParen> hello, is there a way to avoid initialize-instance called on objects made with make-instance? I have objects with missing initargs, so they cant really be initialized. I'd like to fill in those missing slots, and only then manually call initialize-instance on them, is such a thing even possible?
[16:26:10] <phoe> no
[16:26:29] <phoe> if you want to do something like that, call ALLOCATE-INSTANCE directly
[16:26:54] <phoe> that will give you an uninitialized object that you can then call INITIALIZE-INSTANCE on with all the initargs you want
[16:27:15] <yitzi> Or maybe `initliate-instance :after` and just initialize the slots you want?
[16:27:18] <Guest74> couldn't you just set them using :before?
[16:27:54] <yitzi> Or :before also ^
[16:31:28] *** Joins: notzmv (~zmv@user/notzmv)
[16:32:39] <McParen> yitzi: I dont think :before would work here, because I would have several uninitialized objects, check what is missing and calculate that, then initialize them all. I have to read about phoes suggestion allocate-instance, but it sounds exactly like what i was looking for.
[16:32:52] <McParen> "The generic function allocate-instance creates and returns a new instance of the class, without initializing it."
[16:33:24] *** Quits: cage (~cage@94-39-220-187.adsl-ull.clienti.tiscali.it) (Ping timeout: 240 seconds)
[16:34:34] <beach> McParen: MAKE-INSTANCE is essentially ALLOCATE-INSTANCE + INITIALIZE-INSTANCE.
[16:34:56] <Guest74> this sounds interesting.  What are you doing that has interdependent objects for initialization?
[16:36:04] <yitzi> McParen: Ok, I usually use :after for late binding initialization of slots. I would be curious to see an example for which this isn't sufficient.
[16:38:22] <rotateq> or maybe when some slot-values depend on each other so the slots without initargs get computed with the others and stored via `initialize-instance :after` (just one of many possibilities of course)
[16:41:45] <McParen> yitzi: i am not sure whether it isnt sufficient. my current initialize-instance uses :after to call out cffi, so I need all the params before :after is called.
[16:43:43] *** Joins: orestarod (~orestarod@2a02:2149:8b20:700:2b9d:7f86:7169:61c0)
[16:43:44] <McParen> Guest74: I am trying to layout rectangles on a ncurses screen, and some of them are missing a geometry, so I have to calculate that before fully initializing the object, but I also need an object to find out what is missing.
[16:44:15] <McParen> so I guess it has to be a two-step process.
[16:45:05] <Guest74> ah, someone around here had a tui that handled windows.
[16:45:27] <Guest74> oh, but they didn't use any ffi
[16:48:07] <McParen> Guest74: yes, the problem is basically how to delay the cffi call until all the params are provided.
[16:52:35] *** Joins: cage (~cage@94-39-220-187.adsl-ull.clienti.tiscali.it)
[16:53:39] <rotateq> McParen: shouldn't the pipeline separate this anyway? first instantiation, then recalculations and only then (re)rendering
[16:53:43] <yitzi> McParen: Maybe use :around for the cffi stuff?
[16:57:31] <McParen> rotateq: ideally it would, but I have not anticipated the need to recalculate the init parameters.
[17:00:38] <McParen> yitzi: I think :around would still not allow checking other objects and then finish the initialization of the current object.
[17:00:40] *** Joins: s-liao (~s-liao@101.86.96.21)
[17:01:20] <rotateq> and via another metaclass inheriting from standard-class maybe?
[17:04:50] <rotateq> okay no forget that :D
[17:08:00] <McParen> the cleanest way would be to calc all the geometries first, then initialize all the objects.
[17:08:01] *** Joins: abrantesasf (~abrantesa@177.25.180.20)
[17:09:24] *** Quits: abrante32 (~abrantesa@187.36.170.211) (Ping timeout: 240 seconds)
[17:09:56] <McParen> but it would require a second set of non-cffi objects just to hold the geometries, which is why i want to avoid that.
[17:11:16] <Guest74> can't you just set some geom and then resize?
[17:11:41] <McParen> of course, but that would be too easy. ;)
[17:13:22] <Guest74> I don't think you'd really need an object just to hold a layout.  My layouts are just a tree.
[17:14:48] <Guest74> e.g. though I've changed it a bit, https://github.com/JMC-design/layout
[17:17:43] <beach> Guest74: Trees are objects too.
[17:18:25] <Guest74> I believe they were talking about clos objects.  I could be wrong.
[17:19:10] <beach> There is no such thing as a "CLOS object".  All objects have a class and classes are a CLOS feature.
[17:19:30] <McParen> Guest74: The nodes in the layout tree I have are clos objects, not cons cells.
[17:19:47] <beach> McParen: There is no such thing as a "CLOS object".
[17:19:52] <beach> Guest74: Do you take remarks on your layout.lisp?
[17:20:16] <Guest74> sure.
[17:20:31] <beach> Guest74: LOOP keywords should be first on a line, and your LOOP clauses are not indented correctly.
[17:20:57] *** Quits: amb007 (~a_bakic@102.215.76.86.rev.sfr.net) (Ping timeout: 240 seconds)
[17:21:04] *** Joins: amb007 (~a_bakic@103.144.204.77.rev.sfr.net)
[17:21:44] <yitzi> LET isn't either, so that could be a tab/GitHub issue.
[17:21:50] <beach> Guest74: And you have mysterious multiple spaces between forms in various places.
[17:22:06] <Guest74> yeah, it's pretty old.  Before I learned to stop emacs from inserting tabs.
[17:24:23] <beach> Normally, you would have one blank line between top-level forms.
[17:24:31] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 256 seconds)
[17:24:57] <beach> (loop for i below num...) can be expressed as (loop repeat num ...) if you don't use the loop variable.
[17:25:54] <beach> Sometimes you have NO space between forms.
[17:27:55] <Guest74> what's the command to show whitespace in emacs again?
[17:28:45] <McParen> setq show-trailing-whitespace t
[17:28:55] <Guest74> though it seems just using replace works.
[17:29:09] <Guest74> Now, I mean there's a highlight mode, I don't think it was that.
[17:29:30] <Guest74> aptly named whitespace-mode
[17:30:10] <Guest74> tabs as far as the eye can see.
[17:32:25] <Guest74> stopping emacs from inserting tabs really should be in all beginner tutorials.
[17:32:35] <Guest74> beach: any thoughts besides layout?
[17:33:35] <beach> I don't know what the code does or is supposed to do.  That would be a lot more work.
[17:34:06] <Guest74> So the readme isn't sufficient?  It's the first thing you see.
[17:34:25] <beach> CALC-BOX should probably be split into several smaller functions.
[17:34:25] <Guest74> probably needs better wording.
[17:34:37] <beach> I didn't read the README.
[17:35:10] <Guest74> it's got pictures.
[17:37:17] <Guest74> I think I've settled on cutlist for what calculating a layout produces.
[17:39:29] <McParen> Guest74: the library looks nice.
[17:40:39] <Guest74> thanks, though I think it might be a little terse for human construction.  Seems to work well for generating layouts.
[17:41:04] <Guest74> at some point of thinking of adding things :horizontal and :vertical like all the big kids.
[17:41:38] <Guest74> apparently I can't type.
[17:45:21] <Guest74> My window manager uses it, so there's also main-and-stack and main-and-grid, which seems to work nice at 4k. grid also better distributes windows instead of having a huge stack on the left.
[17:48:04] *** Quits: wacki (~wacki@87.122.81.3) (Quit: Leaving.)
[17:53:06] <McParen> I've looked into allocate-instance and it does not seem to do what I hoped. I can not have some initargs, calculate the missing ones, then call initialize-instance.
[17:55:03] *** Quits: abrantesasf (~abrantesa@177.25.180.20) (Read error: Connection reset by peer)
[17:55:28] <McParen> Guest74: It makes sense to calculate every geometry in the tree first, then make the objects based on that.
[17:55:51] <yitzi> McParen: I really think you can do this with :after and :around. Probably need more concrete code examples, though.
[17:57:42] <Guest74> and depending on what your end goal is, having resizable/moveable windows might be a good thing.  So starting geometry wouldn't be an issue then.
[17:58:15] *** Quits: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f) (Quit: Leaving)
[17:58:24] <Guest74> this may be why systems like X11 have creation and mapping/display as separate.
[17:58:52] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Client closed)
[18:00:20] *** Joins: yewscion (~yewscion@52.94.133.128)
[18:02:35] <McParen> yitzi: I also know that it is possible, but it would currently require a lot of refactoring of what I already have, so I hoped i could avoid that.
[18:03:12] <yitzi> Ok.
[18:05:56] <Guest74> meanwhile, does anybody here know an easy way to populate an sb-alien:array from a lisp array?
[18:08:00] *** Joins: abrantesasf (~abrantesa@187.0.34.114)
[18:09:40] <McParen> Guest74: If that is what CFFI abstracts away, I'd look into examples for cffi:mem-aref
[18:11:17] <McParen> https://cffi.common-lisp.dev/manual/html_node/with_002dforeign_002dobject.html
[18:14:45] <_death> for some specialized arrays, there could (should) be an operator to perform a fast copy.. if it's a static vector, you can just use memmove yourself
[18:15:55] <Guest74> I'm guessing I should at some point move this to cffi, I'm just more familiar with sbcl stuff.
[18:17:08] <Guest74> the array also lives in a struct, but I guess that doesn't change the fact I'd have to get the address of the array I guess?
[18:18:05] <Guest74> _death: yeah, they're mirrors of c arrays, so I was hoping there was a fast copy path.
[18:20:00] *** Quits: yewscion (~yewscion@52.94.133.128) (Ping timeout: 256 seconds)
[18:20:00] *** Quits: psf (~pi@206.55.172.18) (Ping timeout: 256 seconds)
[18:20:13] *** Joins: psf (~pi@206.55.172.18)
[18:20:24] <_death> unfortunately the relevant cffi operators (lisp-array-to-foreign and its counterpart) have naive implementation
[18:20:29] <Guest74> for reference, what I'm doing is writing a macro used to define foreign structs that defines the foreign struct, defines a lisp struct with same type declarations, and creates a reader/writer.
[18:23:36] <Guest74> _death: thanks. I would have forgotten to increment the pointer by the element size.
[18:24:35] <Guest74> though I was just thinking of setf'ing the deref'd index.
[18:24:45] *** Joins: mepy (~mepy@37.100.156.164)
[18:55:25] *** Joins: kevingal (~quassel@2a02:8084:4140:f300:987:a889:ebb5:d519)
[18:58:45] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Remote host closed the connection)
[18:59:36] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[19:02:29] <dbotton> Is there a term for referring to a CLOS object vs a general object in lisp? Would that term be clos object?
[19:03:30] <dbotton> I've seen mixed impressions if the term CLOS should even be used today
[19:03:58] <McParen> i refer to objects produced by make-instance as clos objects and objects for everything else
[19:05:22] <random-nick> I think the usual term for objects of subclasses of standard-object is standard instance
[19:08:41] <yitzi> ^ Yes. Object is any Lisp datum. If someone says "instance" I assume they mean as random-nick has said.
[19:10:27] <yitzi> If "CLOS object" was the correct term the method would be `make-clos-object` not `make-instance`. ;)
[19:13:11] *** Joins: jealousmonk (~user@user/jealousmonk)
[19:13:21] <beach> dbotton: There is the concept of a standard object.  And there is another concept of an instance of a standard class.
[19:13:27] <_death> if precision is required, just (deftype object-of-interest () '(or standard-object structure-object))
[19:13:47] <beach> McParen: There is no such thing as a clos object.
[19:15:09] <beach> random-nick: What is wrong with "standard object" I mean, an instance of the class C is usually referred to as "a C".
[19:15:47] <beach> So if it is an instance of a subclass of the class STANDARD-OBJECT it is "a standard object".
[19:16:45] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 272 seconds)
[19:17:04] <beach> And let me see if I get this right: A subset of standard objects may be instances of a standard class, i.e., instances of an instance of STANDARD-CLASS.
[19:17:14] <Guest74> don't you usually refer to an instance of class by the class and not its supers?
[19:17:41] <beach> That would be a "direct instance".
[19:17:59] <Guest74> just going by what you said.
[19:18:20] <beach> What part?
[19:18:31] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[19:18:32] <Guest74> an instance of the class C is usually referred to as "a C
[19:18:36] <beach> I am not sure whether you are correcting something I said or not.
[19:18:47] <random-nick> from the clhs glossary: instance n. 1. a direct instance. 2. a generalized instance. 3. an indirect instance.
[19:18:53] <beach> Yes.  An instance of the class PERSON is "a person".
[19:19:21] <random-nick> instance apparently means both of those
[19:20:12] <random-nick> and yeah I don't see anything wrong in referring to (generalised) instances of STANDARD-OBJECT as standard objects
[19:20:58] <beach> I believe the term "standard instance" is used in the MOP, and there is a function named STANDARD-INSTANCE-ACCESS, but then the MOP wasn't as carefully worded as the Common Lisp standard.
[19:22:12] <McParen> beach: I know that, as I said, I refer that way to objects initialized by make-instance. when a name got stuck, it is difficult getting rid of it.
[19:22:15] <beach> Guest74: And that works for instances of subclasses too.  If EUROPEAN is a subclass of PERSON, then "a European" is also "a person".
[19:22:47] <Guest74> but we usually say he's european, not a person.
[19:23:16] <Guest74> if we go by english that is, usually using the more specific term.
[19:26:11] <rotateq> McParen: but when you try calling MAKE-INSTANCE on a subclass of BUILT-IN-CLASS it will signal an error
[19:26:17] <_death> there are many axes where you can get much more specific.. people usually just go for a "good enough to get my message across"
[19:27:15] <rotateq> _death: I like using 'this human/person' or 'this entity' when I'm not sure.
[19:27:50] <Guest74> just refer to everything as T and you'll be fine.
[19:28:19] <rotateq> yes, ⊤ and ⊥ :)
[19:29:10] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[19:31:30] <rotateq> ⊤ with the supertype ⊤
[19:35:14] *** Joins: notzmv (~zmv@user/notzmv)
[19:36:27] <Guest74> I guess we also stop at a superclass that differentiates at the level we want to differentiate.
[19:36:47] *** Quits: amb007 (~a_bakic@103.144.204.77.rev.sfr.net) (Ping timeout: 256 seconds)
[19:37:37] *** Joins: amb007 (~a_bakic@75.244.204.77.rev.sfr.net)
[19:45:00] *** Joins: abrante17 (~abrantesa@2804:18:582b:3a0d:1:0:7b8d:6885)
[19:46:09] *** Quits: SR-71 (~user@user/SR-71) (Remote host closed the connection)
[19:47:46] *** Quits: abrantesasf (~abrantesa@187.0.34.114) (Ping timeout: 272 seconds)
[19:49:11] *** Quits: amb007 (~a_bakic@75.244.204.77.rev.sfr.net) (Read error: Connection reset by peer)
[19:49:17] *** Quits: Catie (~user@user/catie) (Ping timeout: 240 seconds)
[19:50:05] *** Joins: amb007 (~a_bakic@102.215.76.86.rev.sfr.net)
[19:55:04] *** Joins: Oladon (~olad@98.43.81.226)
[19:56:01] *** Quits: treflip (~user@user/treflip) (Remote host closed the connection)
[19:57:04] *** Joins: IPmonger (~IPmonger@172.58.155.224)
[19:57:13] *** Quits: IPmonger (~IPmonger@172.58.155.224) (Remote host closed the connection)
[19:58:30] *** Joins: treflip (~user@user/treflip)
[20:00:18] *** Quits: Posterdati (~posterdat@host-87-19-166-231.retail.telecomitalia.it) (Ping timeout: 256 seconds)
[20:10:52] *** Joins: Posterdati (~posterdat@host-87-19-166-231.retail.telecomitalia.it)
[20:11:25] *** Joins: Guest491241242 (~Guest4912@95.175.104.234)
[20:14:57] *** Parts: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1) ()
[20:17:51] *** Quits: abrante17 (~abrantesa@2804:18:582b:3a0d:1:0:7b8d:6885) (Quit: -a- Connection Timed Out)
[20:19:57] <utis> thought i would give seibel's id3-parsing chapter another try, but all my mp3s seem to have version 2.3; does anyone know where i could find some with 2.2?
[20:20:29] *** Joins: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1)
[20:21:19] <Guest74> the versions are backwards compatible, so stuff should work.
[20:22:01] <Guest74> unless he borks on reading a version different than 2.2, but that should be a simple change.
[20:22:17] <_death> maybe instead of finding old mp3s you can extend the code to support it.. https://id3.org/id3v2.3.0
[20:22:32] *** Joins: abrantesasf (~abrantesa@2804:18:582b:3a0d:1:0:7b8d:6885)
[20:24:37] *** Quits: abrantesasf (~abrantesa@2804:18:582b:3a0d:1:0:7b8d:6885) (Read error: Connection reset by peer)
[20:25:05] <Guest74> looks like he talks about supporting 2.3
[20:26:58] *** Joins: abrantesasf (~abrantesa@187.36.170.211)
[20:29:47] *** Joins: waleee (~waleee@h-98-128-229-110.NA.cust.bahnhof.se)
[20:30:30] *** Joins: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz)
[20:31:00] *** Quits: abrantesasf (~abrantesa@187.36.170.211) (Ping timeout: 240 seconds)
[20:31:57] <Guest74> is there a way to evaluate a code snippet, submitted as an arg to a function, in the lexical environment of the function? Or I need to change my function to a macro?
[20:32:27] *** Joins: tane (~tane@user/tane)
[20:33:32] <_death> not really.. but you can construct a lexical environment in the code passed to eval
[20:34:54] <Guest74> that references some lexical var in the function?
[20:36:06] <Guest74> maybe I should just add an option to return the object and keep the function as is.
[20:36:42] <jackdaniel> mcclim emitting svg (halloween edition): https://i.imgur.com/j59Ambd.png
[20:37:25] <Xach> terrifying
[20:37:35] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Ping timeout: 240 seconds)
[20:37:36] <Xach> however it appears to be a png!
[20:38:35] *** Quits: anticomputer (~anticompu@gateway/tor-sasl/anticomputer) (Ping timeout: 240 seconds)
[20:38:35] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 240 seconds)
[20:38:55] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Ping timeout: 240 seconds)
[20:38:55] *** Quits: gxt (~gxt@gateway/tor-sasl/gxt) (Ping timeout: 240 seconds)
[20:39:09] <jackdaniel> here dear sir! http://turtleware.eu/static/paste/5f78f3cc-foo.svg (please don't mind approximating ellipses with polygons, it is wip :)
[20:39:33] <Guest74> lol
[20:39:36] <jackdaniel> but the bezier curve is a path, so there's at least that
[20:41:13] <jackdaniel> (and the code, but since it is wip svg backend won't be found)
[20:41:15] <jackdaniel> http://turtleware.eu/static/paste/4ad776a3-draw.lisp
[20:41:25] <Guest74> I wonder if I should add support for writing polygon points. Is there any use case that they'd be better than just using path?
[20:41:47] <Guest491241242> Hello all, currently at the repl I have to refer to the function with "(PACKAGE:FUNCTION PARAM1 PARAM2). What should I do to be able to write just the function name to make the function call. Like so: "(FUNCTION PARAM1 PARAM2)"
[20:42:01] <jackdaniel> you know, this whole opengl thing and xrender extension that accepts triangles
[20:42:24] <Xach> Guest491241242: there are a number of options! one easy one is (use-package :package). you can make that part of your defpackage. you can also import individual symbols into your current package to avoid package prefixes.
[20:42:31] *** Parts: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz) ()
[20:43:59] <Guest491241242> Ok, thanks Xach!
[20:44:15] <Guest74> jackdaniel: wondering just svg.  If I draw to a render surface I use triangles if appropriate.
[20:44:30] <jackdaniel> ah, you see this is for educational purposes
[20:44:42] <jackdaniel> I'm writing a tutorial for creating "draw-only" backends
[20:44:52] *** Quits: rotateq (~user@p200300e78706a00050f72feb644e2401.dip0.t-ipconnect.de) (Remote host closed the connection)
[20:45:02] <tane> jackdaniel, where will you publish that? :)
[20:45:03] *** Joins: IPmonger (~IPmonger@172.58.158.203)
[20:45:04] <jackdaniel> and McCLIM core methods have a fallbacks so it is enough to implement "only" medium-draw-polygon*
[20:45:04] <Guest74> Do you decimate into triangles?
[20:45:17] *** Quits: IPmonger (~IPmonger@172.58.158.203) (Remote host closed the connection)
[20:45:38] <jackdaniel> not in this backend, but I've implemented triangulation for internal purposes (xrender here we come in other words)
[20:45:44] <Guest74> heh, mine only needs draw:pixel.  But that's not very optimized.
[20:46:17] <Guest74> i wish there was an external library for the triangle thing. hint hint.
[20:46:18] <jackdaniel> tane: on my blog
[20:46:42] <jackdaniel> and later, when appropriately adjusted, in the manual
[20:47:11] *** Joins: wacki (~wacki@87.122.81.3)
[20:48:14] <jackdaniel> (I have also an early draft on my patreon)
[20:52:46] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[20:54:36] *** Joins: anticomputer (~anticompu@gateway/tor-sasl/anticomputer)
[20:55:58] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[20:56:20] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[20:56:30] *** Joins: gxt (~gxt@gateway/tor-sasl/gxt)
[21:02:15] *** Joins: abrantesasf (~abrantesa@187.36.170.211)
[21:07:53] *** Joins: jeffrey (~jeffrey@217-120-53-119.cable.dynamic.v4.ziggo.nl)
[21:20:21] *** Quits: jealousmonk (~user@user/jealousmonk) (Quit: ERC 5.4.1 (IRC client for GNU Emacs 27.1))
[21:23:57] *** Quits: treflip (~user@user/treflip) (Quit: good night)
[21:29:51] *** Quits: abrantesasf (~abrantesa@187.36.170.211) (Remote host closed the connection)
[21:30:38] *** Joins: attila_lendvai (~alendvai@2a02:ab88:3710:7c80:9130:5abf:96b3:dc0c)
[21:39:10] *** Joins: Bike (~Bike@71.69.170.70)
[21:46:10] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[21:52:46] *** Quits: Dynom (~niels@80-114-12-206.cable.dynamic.v4.ziggo.nl) (Quit: WeeChat 3.4)
[22:01:10] *** Joins: Dynom (~niels@80-114-12-206.cable.dynamic.v4.ziggo.nl)
[22:01:50] *** Quits: hobo (~hobo@2600:1700:8972:63f:3313:2d33:be9f:8246) (Quit: ZNC 1.8.2 - https://znc.in)
[22:05:14] *** Quits: Guest74 (~Guest74@modemcable110.164-177-173.mc.videotron.ca) (Quit: Connection closed)
[22:11:48] *** Quits: jeffrey (~jeffrey@217-120-53-119.cable.dynamic.v4.ziggo.nl) (Ping timeout: 240 seconds)
[22:28:32] *** Quits: epony (epony@user/epony) (Ping timeout: 240 seconds)
[22:31:52] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[22:32:15] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Remote host closed the connection)
[22:32:42] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[22:34:31] *** Joins: epony (epony@user/epony)
[22:37:30] *** Quits: utis (~utis@vpn-client500.uio.no) (Ping timeout: 272 seconds)
[22:39:12] *** Joins: utis (~utis@84.208.160.26)
[22:40:38] *** Joins: kevingal_ (~quassel@2a02:8084:4140:f300:88ca:27c6:54f6:835e)
[22:42:08] *** Quits: mrcom (~mrcom@99-73-215-70.lightspeed.irvnca.sbcglobal.net) (Read error: Connection reset by peer)
[23:02:42] *** Quits: parjanya (~esb@2804:14c:1ad:9351:a9f4:2cf3:2d0f:3397) (Ping timeout: 252 seconds)
[23:03:26] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca) (Remote host closed the connection)
[23:05:09] *** Joins: kotshie (~kotshie@68.72.208.140)
[23:06:22] *** Quits: kotshie (~kotshie@68.72.208.140) (Client Quit)
[23:14:00] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[23:15:17] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 256 seconds)
[23:16:44] *** Lord_of_Life_ is now known as Lord_of_Life
[23:19:46] *** Joins: yewscion (~yewscion@ec2-44-193-71-234.compute-1.amazonaws.com)
[23:23:58] *** Parts: McParen (~McParen@user/mcparen) ()
[23:34:09] *** Joins: mrcom (~mrcom@99-73-215-70.lightspeed.irvnca.sbcglobal.net)
[23:37:04] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[23:41:04] *** Quits: kevingal (~quassel@2a02:8084:4140:f300:987:a889:ebb5:d519) (Remote host closed the connection)
[23:42:16] <dbotton> is there an easy way to know if  symbol is a keyword symbol vs regular symbol?
[23:43:01] <dbotton> never mind sorry
[23:50:02] *** Quits: brown121407 (1fd27a54a7@gnu/webmaster/smarton) (Ping timeout: 250 seconds)
[23:50:31] *** Joins: cjb (~cjb@user/cjb)
[23:51:46] *** Quits: jasom (f3e90f0325@2604:bf00:561:2000::3a6) (Ping timeout: 250 seconds)
[23:51:46] *** Quits: sm2n (ae95cb1267@user/sm2n) (Ping timeout: 250 seconds)
[23:51:53] *** Joins: brown121407 (1fd27a54a7@gnu/webmaster/smarton)
[23:51:54] *** Joins: jasom_ (f3e90f0325@2604:bf00:561:2000::3a6)
[23:52:02] *** jasom_ is now known as jasom
[23:52:18] *** Joins: sm2n (ae95cb1267@user/sm2n)
[23:56:15] *** Joins: kevingal (~quassel@2a02:8084:4140:f300:ec08:9ba4:bce:4350)
[23:57:50] *** Quits: kevingal_ (~quassel@2a02:8084:4140:f300:88ca:27c6:54f6:835e) (Ping timeout: 250 seconds)
